WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.780
[MUSIC PLAYING]

00:00:07.780 --> 00:00:09.950
SIYAMED SINIR: Hi, everybody.

00:00:09.950 --> 00:00:13.910
My name is Siyamed Sinir,
and I work on Android Text.

00:00:13.910 --> 00:00:18.940
And today, I would like to talk
about why improving your text

00:00:18.940 --> 00:00:21.850
measuring performance
is important for

00:00:21.850 --> 00:00:25.810
your overall app's performance.

00:00:25.810 --> 00:00:29.410
In order to do this, I wanted
to gather some numbers.

00:00:29.410 --> 00:00:33.310
And therefore, I wrote a simple
sample app that has a feed

00:00:33.310 --> 00:00:35.230
and is very similar
to the applications

00:00:35.230 --> 00:00:37.280
that we use every day.

00:00:37.280 --> 00:00:41.020
It has a list of items, and each
item has an image and some text

00:00:41.020 --> 00:00:43.430
into it.

00:00:43.430 --> 00:00:47.300
When we look at the text, as
you can see in the picture,

00:00:47.300 --> 00:00:51.170
the user name and the
title for each feed item

00:00:51.170 --> 00:00:53.650
is what we call
single style text.

00:00:53.650 --> 00:00:58.250
And the content contains a text
that has different colors, text

00:00:58.250 --> 00:01:02.510
sizes, fonts, and et cetera.

00:01:02.510 --> 00:01:05.780
One important point here that
I would like to emphasize--

00:01:05.780 --> 00:01:09.680
on our platform right
now, the hyphenation

00:01:09.680 --> 00:01:12.990
is turned on by
default. However,

00:01:12.990 --> 00:01:14.720
in this app, as
you can see there,

00:01:14.720 --> 00:01:16.340
is no hyphenation applied.

00:01:16.340 --> 00:01:21.410
And the reason is Android
works by some dictionaries

00:01:21.410 --> 00:01:23.390
in order to be able to
hyphenate the words.

00:01:23.390 --> 00:01:27.340
And since these words are just
random characters side by side,

00:01:27.340 --> 00:01:31.980
it cannot do any hyphenation.

00:01:31.980 --> 00:01:34.230
When we look at
each feed item, we

00:01:34.230 --> 00:01:37.095
see that it has a very
simple structure--

00:01:37.095 --> 00:01:41.460
a linear layout at top, an
image with a relative layout,

00:01:41.460 --> 00:01:45.210
and three TextViews for user
name, title, and content.

00:01:45.210 --> 00:01:47.190
And I'm pretty sure
it's either the same

00:01:47.190 --> 00:01:52.020
or very similar to one of your
apps' existing design or layout

00:01:52.020 --> 00:01:54.090
structure.

00:01:54.090 --> 00:01:59.550
What I wanted to see
was for each feed item,

00:01:59.550 --> 00:02:03.000
what is the percentage
of the time spent on text

00:02:03.000 --> 00:02:04.920
versus the whole layout.

00:02:04.920 --> 00:02:09.270
Therefore, what I did is I
wrote a benchmark where I called

00:02:09.270 --> 00:02:13.230
the linearLayout.measure()
on one end.

00:02:13.230 --> 00:02:15.660
And meanwhile, I recorded
all the parameters

00:02:15.660 --> 00:02:18.140
that were passed to those
different TextViews,

00:02:18.140 --> 00:02:22.470
and I simulated the same
thing on those TextViews.

00:02:22.470 --> 00:02:24.390
Because of the
relative layout here,

00:02:24.390 --> 00:02:27.420
the two TextViews at the top
were getting two measure()

00:02:27.420 --> 00:02:28.230
calls each.

00:02:31.770 --> 00:02:35.530
In order to have
consistent numbers

00:02:35.530 --> 00:02:40.860
or repeatable measurements,
I locked the CPU.

00:02:40.860 --> 00:02:44.160
I ahead of time compiled
my budget benchmark app,

00:02:44.160 --> 00:02:46.260
and I set the debuggable false.

00:02:46.260 --> 00:02:51.090
And these numbers that we will
see soon are for a Pixel X

00:02:51.090 --> 00:02:55.830
Large that is running Android P.

00:02:55.830 --> 00:02:58.170
So the first question
is how much time does it

00:02:58.170 --> 00:03:00.300
require for linear
layout to measure

00:03:00.300 --> 00:03:03.360
versus how much time it requires
to measure all those three

00:03:03.360 --> 00:03:04.990
TextViews?

00:03:04.990 --> 00:03:08.430
This number was interesting.

00:03:08.430 --> 00:03:11.965
4.60 milliseconds
for the whole layout,

00:03:11.965 --> 00:03:16.350
and 98% of that time
is spent on text.

00:03:16.350 --> 00:03:20.940
Since the CPU is locked,
maybe normally the numbers

00:03:20.940 --> 00:03:23.760
on the real device would
be lower than four.

00:03:23.760 --> 00:03:28.160
But still, the ratio
will remain the same.

00:03:28.160 --> 00:03:29.880
The next thing I
wondered was if I

00:03:29.880 --> 00:03:33.960
were to disable hyphenation,
how much improvement would I

00:03:33.960 --> 00:03:39.140
get from my linear
layout, the full layout?

00:03:39.140 --> 00:03:41.510
And just turning
the hyphenation off

00:03:41.510 --> 00:03:45.970
drops all the times by 100%.

00:03:45.970 --> 00:03:50.020
So it improves the
measurement performance by 2x.

00:03:50.020 --> 00:03:51.760
At this point, I
want to remind you

00:03:51.760 --> 00:03:54.940
that hyphenation was
turned on, but there

00:03:54.940 --> 00:03:56.860
was no visible hyphenation.

00:03:56.860 --> 00:04:02.410
So turning off hyphenation did
not have any effect on the UI.

00:04:02.410 --> 00:04:06.250
Finally, I wanted to check
how the numbers would improve

00:04:06.250 --> 00:04:10.390
if I were to use a new API that
we added on Android P and also

00:04:10.390 --> 00:04:11.280
Android X--

00:04:11.280 --> 00:04:13.630
PrecomputedText.

00:04:13.630 --> 00:04:15.580
These numbers were crazier.

00:04:15.580 --> 00:04:19.329
Four milliseconds
become 0.2 milliseconds.

00:04:19.329 --> 00:04:22.633
It's almost 20% to
any X improvement.

00:04:26.260 --> 00:04:28.810
I would like to describe
what PrecomputedText does

00:04:28.810 --> 00:04:29.930
and how it works.

00:04:29.930 --> 00:04:37.570
But before that, I would like to
talk about what kind of things

00:04:37.570 --> 00:04:39.130
we went through
while implementing

00:04:39.130 --> 00:04:41.470
the PrecomputedText.

00:04:41.470 --> 00:04:43.270
We were asking
ourselves questions

00:04:43.270 --> 00:04:46.540
like why is text
measurement so expensive

00:04:46.540 --> 00:04:49.674
and can we make it faster.

00:04:49.674 --> 00:04:51.340
Since almost the
beginning, we have been

00:04:51.340 --> 00:04:53.230
improving the text performance.

00:04:53.230 --> 00:04:56.650
But as you would understand
from the number 98%,

00:04:56.650 --> 00:04:58.840
it's always going
to be a bottleneck.

00:04:58.840 --> 00:05:02.520
Therefore, we try
to see can we move

00:05:02.520 --> 00:05:05.830
all these expensive measurement
to a background thread

00:05:05.830 --> 00:05:08.700
and provide an API.

00:05:08.700 --> 00:05:11.250
In terms of why it
is so expensive,

00:05:11.250 --> 00:05:15.690
whenever the system calls
a measure() on TextView,

00:05:15.690 --> 00:05:18.690
it first does some preliminary
work and tries to identify

00:05:18.690 --> 00:05:22.290
the intrinsic width and height
of the text that it contains.

00:05:22.290 --> 00:05:26.380
Then, according to the
parameters that are passed

00:05:26.380 --> 00:05:29.850
through on measure() and also
the numbers that it finds,

00:05:29.850 --> 00:05:31.860
it creates a layout.

00:05:31.860 --> 00:05:35.100
All these processes goes
into our native code

00:05:35.100 --> 00:05:36.960
because we have to
use some open source

00:05:36.960 --> 00:05:38.910
libraries such as Free
Type and [INAUDIBLE]

00:05:38.910 --> 00:05:42.380
in order to measure our text.

00:05:42.380 --> 00:05:45.840
And when we look from the
scope of our measure, 90%--

00:05:45.840 --> 00:05:47.220
actually more than 90%--

00:05:47.220 --> 00:05:51.270
of our time is spent
on the native code.

00:05:51.270 --> 00:05:53.120
And when we pass
a string like this

00:05:53.120 --> 00:05:55.220
to our native code,
what it does is

00:05:55.220 --> 00:05:57.560
it first divides it into words.

00:05:57.560 --> 00:06:01.820
And then for each word,
it applies text shaping.

00:06:01.820 --> 00:06:04.430
It finds the form that it
can render the character

00:06:04.430 --> 00:06:06.740
and tries to bring those
characters in the word

00:06:06.740 --> 00:06:08.810
together.

00:06:08.810 --> 00:06:11.120
Then we check how
much time this takes

00:06:11.120 --> 00:06:14.570
compared to all the time that's
spent on the native code.

00:06:14.570 --> 00:06:17.340
It is, again, more than 90%.

00:06:17.340 --> 00:06:22.445
So a text measurement taking the
90% of the whole measurement,

00:06:22.445 --> 00:06:25.340
native code taking
the 90% of the text,

00:06:25.340 --> 00:06:28.550
and shaping taking more
than 90% of the native code

00:06:28.550 --> 00:06:31.140
means that most of
the measurement time,

00:06:31.140 --> 00:06:35.240
at least for this app,
is spent on text shaping.

00:06:35.240 --> 00:06:39.410
The system applies the same
rules for all of the words.

00:06:39.410 --> 00:06:43.290
And for each word that is
measured, it caches them.

00:06:43.290 --> 00:06:46.760
One of the reasons to cache
them is just after the measure

00:06:46.760 --> 00:06:49.190
or layout there, will
be a draw operation,

00:06:49.190 --> 00:06:53.700
and the draw will need
the same information.

00:06:53.700 --> 00:06:58.010
Then it applies line
breaking and hyphenation.

00:06:58.010 --> 00:07:02.140
So one valid question here
is why does hyphenation--

00:07:02.140 --> 00:07:05.530
turning it off-- improve
the performance twice?

00:07:05.530 --> 00:07:08.630
It's mainly because of
whenever it tries to hyphenate,

00:07:08.630 --> 00:07:13.520
it has to apply text
shaping for more words.

00:07:13.520 --> 00:07:17.630
Let's say in here, example is
divided into ex- and -ample.

00:07:17.630 --> 00:07:20.570
It has to calculate two more--

00:07:20.570 --> 00:07:23.660
it has to do two more
shaping on two more words.

00:07:26.500 --> 00:07:28.210
So the next question
is, if we were

00:07:28.210 --> 00:07:31.580
to move this expensive
measurement to background

00:07:31.580 --> 00:07:33.690
thread, what we would need.

00:07:33.690 --> 00:07:37.270
The first issue we encountered
was before Android P,

00:07:37.270 --> 00:07:42.550
the native code was acquiring
giant synchronization locks.

00:07:42.550 --> 00:07:48.060
And we fixed it on Android
P. We made the locks smaller.

00:07:48.060 --> 00:07:50.610
Then we wondered, can we
use the existing layout

00:07:50.610 --> 00:07:53.380
classes for such a goal?

00:07:53.380 --> 00:07:55.500
And there were two issues,
two important issues,

00:07:55.500 --> 00:07:56.083
at that point.

00:07:56.083 --> 00:07:57.800
One of them--
layout classes need

00:07:57.800 --> 00:08:00.540
a width to be provided
to them so that they

00:08:00.540 --> 00:08:02.460
can do their calculations.

00:08:02.460 --> 00:08:06.090
And that width, you
would not have that width

00:08:06.090 --> 00:08:10.240
before measuring, so it was
a chicken and egg problem.

00:08:10.240 --> 00:08:13.170
The other one is
the layout objects

00:08:13.170 --> 00:08:16.410
are just blueprints for
the text that contain kind

00:08:16.410 --> 00:08:18.160
of a cache on the Java side.

00:08:18.160 --> 00:08:22.050
And they do not know about
the previously calculated

00:08:22.050 --> 00:08:23.700
native word layout objects.

00:08:23.700 --> 00:08:26.190
All they know is how
many lines there,

00:08:26.190 --> 00:08:29.320
where do they start and end,
and what are their coordinates.

00:08:32.080 --> 00:08:35.539
So we wondered,
what if we created

00:08:35.539 --> 00:08:40.120
a construct, first of all,
that doesn't need the width?

00:08:40.120 --> 00:08:42.820
Second, it should
be able to create it

00:08:42.820 --> 00:08:45.430
on a background thread safely.

00:08:45.430 --> 00:08:48.160
And third, it has to
have strong references

00:08:48.160 --> 00:08:50.530
to those native layout objects.

00:08:50.530 --> 00:08:53.740
This is important because
in terms of layout,

00:08:53.740 --> 00:08:58.540
if you were to create a
layout before you need it,

00:08:58.540 --> 00:09:02.420
then maybe when it's time
to measure or render it,

00:09:02.420 --> 00:09:05.100
you will lose the
word layout objects.

00:09:05.100 --> 00:09:07.120
They will be evicted
from the cache,

00:09:07.120 --> 00:09:08.860
and therefore there
was no guarantee

00:09:08.860 --> 00:09:13.740
that you would have
the speed improvement.

00:09:13.740 --> 00:09:16.400
We wanted to extend this
construct from CharSequence

00:09:16.400 --> 00:09:18.360
and Spannable
because we wanted it

00:09:18.360 --> 00:09:21.060
to be compatible
with our current APIs

00:09:21.060 --> 00:09:24.440
and also your applications.

00:09:24.440 --> 00:09:30.320
Since it is mostly interested
in how the text will look,

00:09:30.320 --> 00:09:32.210
this construct needed
some parameters

00:09:32.210 --> 00:09:34.490
that would change
the text styling,

00:09:34.490 --> 00:09:37.800
such as the text size,
color, locale, and et cetera.

00:09:40.730 --> 00:09:43.930
One important
point here is there

00:09:43.930 --> 00:09:47.270
was a reason why previously
those native objects were being

00:09:47.270 --> 00:09:50.420
cached and evicted, and
it is the amount of memory

00:09:50.420 --> 00:09:51.500
that they use.

00:09:51.500 --> 00:09:53.810
Right now when you
use PrecomputedText,

00:09:53.810 --> 00:09:57.921
you will be spending 20
kilobytes for 500 characters.

00:10:01.360 --> 00:10:03.220
Even though it
implements Spannable,

00:10:03.220 --> 00:10:06.880
which is a mutable
interface, every calculation

00:10:06.880 --> 00:10:11.530
that PrecomputedText does is
done at the construction time.

00:10:11.530 --> 00:10:18.150
Therefore, you should not be
calling SetSpan or RemoveSpan

00:10:18.150 --> 00:10:22.200
functions with spans or
styling information that will

00:10:22.200 --> 00:10:23.940
change how the text will look.

00:10:23.940 --> 00:10:26.040
Otherwise, you will
get an exception

00:10:26.040 --> 00:10:28.340
because that would invalidate
all the computation,

00:10:28.340 --> 00:10:29.340
and it would be useless.

00:10:32.050 --> 00:10:36.720
Then we look at the parameters
that PrecomputedText requires.

00:10:36.720 --> 00:10:40.440
Since most of the text
styling information

00:10:40.440 --> 00:10:43.870
right now is encapsulated
in the text pane,

00:10:43.870 --> 00:10:47.970
it requires the text pane as a
mandatory constructed argument.

00:10:47.970 --> 00:10:51.000
The others are BreakStrategy,
HyphenationFrequency,

00:10:51.000 --> 00:10:53.100
and TextDirection
are the functions

00:10:53.100 --> 00:10:55.710
that you would already know
from the static layout builder.

00:10:59.110 --> 00:11:04.420
Since most of the time you will
be designing your text styling

00:11:04.420 --> 00:11:08.560
in your XML, either
layout.xml or styles.xml,

00:11:08.560 --> 00:11:10.510
we wanted to add
a helper function

00:11:10.510 --> 00:11:12.370
where you can create
the PrecomputedText

00:11:12.370 --> 00:11:15.280
parameters using a TextView.

00:11:15.280 --> 00:11:16.780
However, at this
point, I would like

00:11:16.780 --> 00:11:18.850
to emphasize that
TextView is not

00:11:18.850 --> 00:11:21.520
required to create a
PrecomputedText.Params.

00:11:21.520 --> 00:11:23.770
It is a helper function,
and this function

00:11:23.770 --> 00:11:25.870
is going to make
more sense when we

00:11:25.870 --> 00:11:29.170
go through how to
use PrecomputedText

00:11:29.170 --> 00:11:30.610
with RecyclerView.

00:11:33.550 --> 00:11:38.190
Since version 25, RecyclerView
has a Prefetch feature,

00:11:38.190 --> 00:11:41.790
and we wanted to provide
ways of using PrecomputedText

00:11:41.790 --> 00:11:43.920
with RecyclerView.Prefetch.

00:11:43.920 --> 00:11:47.872
And normally during on
your onBind View Holder,

00:11:47.872 --> 00:11:51.380
you will call setText,
and then the RecyclerView

00:11:51.380 --> 00:11:55.970
would measure the whole
layout that you just created.

00:11:55.970 --> 00:11:59.510
And we know that the measurement
part of the TextViews

00:11:59.510 --> 00:12:01.660
are expensive.

00:12:01.660 --> 00:12:06.140
Then you use RecyclerView
with PrecomputedText,

00:12:06.140 --> 00:12:09.530
you will just change setText
text to setTextFeature.

00:12:09.530 --> 00:12:14.150
And what Prefetch will do
is before an item is shown

00:12:14.150 --> 00:12:17.380
on the screen, it will go
to the background thread,

00:12:17.380 --> 00:12:19.910
do the text measurement,
and as a result will

00:12:19.910 --> 00:12:22.310
create the PrecomputedText.

00:12:22.310 --> 00:12:24.320
When the computation
is ready, it

00:12:24.320 --> 00:12:27.380
will switch back to
the [INAUDIBLE] thread,

00:12:27.380 --> 00:12:31.400
and it will call setText with
this PrecomputedText, which

00:12:31.400 --> 00:12:34.730
will make the
measurement part much

00:12:34.730 --> 00:12:37.985
faster than the previous case.

00:12:41.700 --> 00:12:43.980
Using it is pretty easy.

00:12:43.980 --> 00:12:47.130
Instead of calling setText
in your onBind View Holder,

00:12:47.130 --> 00:12:49.740
you just change it
to be setTextFeature

00:12:49.740 --> 00:12:52.680
and some configuration
for PrecomputedText.

00:12:52.680 --> 00:12:54.390
And here, what you
tell the system

00:12:54.390 --> 00:12:58.240
is please run this task
on a background thread

00:12:58.240 --> 00:13:02.710
and precompute my text with this
CharSequence, which is my data,

00:13:02.710 --> 00:13:05.070
and this display configuration.

00:13:05.070 --> 00:13:07.680
As you can see here,
TextMetricsParamCompat()

00:13:07.680 --> 00:13:09.870
becomes very handy
to be able to create

00:13:09.870 --> 00:13:13.720
the PrecomputedText.Params.

00:13:13.720 --> 00:13:17.130
One point here is, though,
if you are changing your text

00:13:17.130 --> 00:13:19.810
styling according to
the data you have,

00:13:19.810 --> 00:13:21.490
you have to apply
all the styling

00:13:21.490 --> 00:13:25.690
on your TextView or Spannables
before calling this function.

00:13:29.910 --> 00:13:34.270
I will continue with how to
turn off hyphenation in your app

00:13:34.270 --> 00:13:38.690
globally so that you can only
enable it when you need it.

00:13:38.690 --> 00:13:41.140
This thing is also
pretty simple,

00:13:41.140 --> 00:13:42.700
and you already saw the effect.

00:13:42.700 --> 00:13:46.000
It improves the measurement
performance by 2x.

00:13:46.000 --> 00:13:49.840
What you do is first you define
a new style in your styles.xml

00:13:49.840 --> 00:13:53.510
and turn off hyphenation
for that style.

00:13:53.510 --> 00:13:56.710
You extend this style
from a base style

00:13:56.710 --> 00:14:01.090
in order to handle pre-Lollipop
and after-Lollipop cases.

00:14:01.090 --> 00:14:06.380
And for version 21 and above,
you extend this base TextView

00:14:06.380 --> 00:14:10.216
style from Material TextView.

00:14:10.216 --> 00:14:14.990
And finally, on your team,
you set AndroidTextViewStyle

00:14:14.990 --> 00:14:16.590
to be your new style.

00:14:21.460 --> 00:14:23.880
If I were to summarize
all the talk,

00:14:23.880 --> 00:14:27.210
I would say, first go and turn
off hyphenation in your app

00:14:27.210 --> 00:14:30.840
globally so that your
measurement can be faster.

00:14:30.840 --> 00:14:33.330
And it's not only going to
be the text measurement.

00:14:33.330 --> 00:14:35.340
The whole screen
measurement, depending

00:14:35.340 --> 00:14:39.620
on how much text you have,
will be almost twice faster.

00:14:39.620 --> 00:14:42.540
And then please check
the PrecomputedText API.

00:14:42.540 --> 00:14:45.570
And if you are
using RecyclerView,

00:14:45.570 --> 00:14:49.470
please apply the PrecomputedText
and RecyclerView.Prefetch

00:14:49.470 --> 00:14:51.360
code that I showed
you so that you

00:14:51.360 --> 00:14:57.171
will get a more smooth scrolling
experience for your users.

00:14:57.171 --> 00:14:58.244
This was my talk.

00:14:58.244 --> 00:14:59.660
Thank you very
much for listening.

00:14:59.660 --> 00:15:02.360
[APPLAUSE]

00:15:02.360 --> 00:15:05.110
[MUSIC PLAYING]

