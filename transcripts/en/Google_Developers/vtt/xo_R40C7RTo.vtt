WEBVTT
Kind: captions
Language: en

00:00:01.060 --> 00:00:03.485
In the last few years, we've
seen a staggering increase

00:00:03.485 --> 00:00:06.560
in video consumption, while
worldwide internet bandwidth

00:00:06.560 --> 00:00:08.490
hasn't kept the same pace.

00:00:08.490 --> 00:00:10.050
My name is Renganathan,
and I'm here

00:00:10.050 --> 00:00:12.150
to talk to you about
how the WebM Project is

00:00:12.150 --> 00:00:14.520
solving this problem today.

00:00:14.520 --> 00:00:17.930
Video accounts for over 50% of
the peak internet bandwidth,

00:00:17.930 --> 00:00:20.210
and over 2/3 in certain
parts of the world.

00:00:20.210 --> 00:00:21.740
And it's growing fast.

00:00:21.740 --> 00:00:24.640
The WebM Project is a collection
of open source media codex

00:00:24.640 --> 00:00:27.710
and technologies aimed
to address this problem.

00:00:27.710 --> 00:00:29.280
How well does this work?

00:00:29.280 --> 00:00:31.610
VP9 can halve the
bit rate compared

00:00:31.610 --> 00:00:34.650
to H.264 for the same
quality settings.

00:00:34.650 --> 00:00:37.590
This has massive implications
for the web, especially

00:00:37.590 --> 00:00:41.510
YouTube, who loves billions of
VP9 play backs to their users.

00:00:41.510 --> 00:00:42.890
This is because
YouTube is seeing

00:00:42.890 --> 00:00:45.460
both a decrease in
average bitrates,

00:00:45.460 --> 00:00:48.880
and an improvement in
quality over H.264.

00:00:48.880 --> 00:00:52.680
So what does this mean
to YouTube customers?

00:00:52.680 --> 00:00:55.110
VP9 provides a better
streaming experience,

00:00:55.110 --> 00:00:58.870
reducing rebuffers by
25% in developed markets,

00:00:58.870 --> 00:01:01.880
and a whopping 100%
in emerging markets.

00:01:01.880 --> 00:01:04.660
This means videos
to more places.

00:01:04.660 --> 00:01:08.680
In fact, because of VP9, we are
able to serve an additional 25%

00:01:08.680 --> 00:01:12.930
of videos in HD worldwide,
and they load 15% faster,

00:01:12.930 --> 00:01:15.210
which you will notice is
giving YouTube the ability

00:01:15.210 --> 00:01:18.340
to add a check box
to stream 4K videos.

00:01:18.340 --> 00:01:20.540
And the truth is, working
at YouTube's scale

00:01:20.540 --> 00:01:24.100
has allowed us to dramatically
improve VP9 in this past year.

00:01:24.100 --> 00:01:28.620
For starters, we've improved
the encoding speed by 40x.

00:01:28.620 --> 00:01:30.510
To meet the demands
of YouTube we've

00:01:30.510 --> 00:01:33.440
added three new controls
to the encoding process.

00:01:33.440 --> 00:01:36.310
The first is variable bitrate,
controlled by the target

00:01:36.310 --> 00:01:40.140
bitrate parameter, allows you
to hit specific bitrate values.

00:01:40.140 --> 00:01:43.220
Constant quality, controlled
with the CQ level parameter,

00:01:43.220 --> 00:01:46.480
allows you to hit specific
quality values for your encode,

00:01:46.480 --> 00:01:48.600
while the constraint quality
is a hybrid mode that

00:01:48.600 --> 00:01:50.280
allows you to balance
between the two,

00:01:50.280 --> 00:01:54.440
allowing you to conserve bitrate
after hitting a quality goal.

00:01:54.440 --> 00:01:56.950
To provide even more
control of your encodes,

00:01:56.950 --> 00:02:00.000
especially trade off between
computational complexity

00:02:00.000 --> 00:02:01.710
and compression
efficiency, you can

00:02:01.710 --> 00:02:05.140
use the CPU speed
parameter to navigate.

00:02:05.140 --> 00:02:07.020
We are also providing
an additional trade

00:02:07.020 --> 00:02:09.270
off point between
speed and encodes

00:02:09.270 --> 00:02:11.820
with the functional
1-pass encode option.

00:02:11.820 --> 00:02:14.950
Quality wise, this is usually
within a few percentage points

00:02:14.950 --> 00:02:18.010
of a 2-pass encode,
with similar settings.

00:02:18.010 --> 00:02:21.980
Next up, VP9 has three adaptive
quantization experiments

00:02:21.980 --> 00:02:24.200
to adjust bit expenditure
within a frame,

00:02:24.200 --> 00:02:26.690
to give better cycle
visual quality.

00:02:26.690 --> 00:02:28.780
If you look in more
detail at the large, 64

00:02:28.780 --> 00:02:32.130
by 64 blocks in the top center,
at a fixed quantization,

00:02:32.130 --> 00:02:35.270
they're spending only a few
bits for the whole region.

00:02:35.270 --> 00:02:37.680
In contrast, for some of the
regions down on the tracks,

00:02:37.680 --> 00:02:39.720
they're spending
several thousand bits.

00:02:39.720 --> 00:02:41.840
The AQ modes try and
correct the balance

00:02:41.840 --> 00:02:45.060
a little by reducing expenditure
in these expensive areas,

00:02:45.060 --> 00:02:47.754
while where taking a few bits
won't visually hurt much,

00:02:47.754 --> 00:02:49.920
and increasing the expenditure
in the easy sections,

00:02:49.920 --> 00:02:52.620
like the sky and
hillside, and can overall

00:02:52.620 --> 00:02:54.990
improve the visual quality.

00:02:54.990 --> 00:02:57.970
Now these are set using the
AQ mode commandline parameter.

00:02:57.970 --> 00:02:59.750
And for more information
on how to control

00:02:59.750 --> 00:03:03.580
adaptive quantization,
check out webmproject.org.

00:03:03.580 --> 00:03:06.170
Now video-on-demand is
a significant proportion

00:03:06.170 --> 00:03:07.660
of the video on Internet.

00:03:07.660 --> 00:03:10.380
But real time communication
and screen sharing

00:03:10.380 --> 00:03:12.500
are very important
to us is as well.

00:03:12.500 --> 00:03:15.810
I'm happy to announce that VP9
now has a functioning real time

00:03:15.810 --> 00:03:18.540
encode option for video
conferencing and screen

00:03:18.540 --> 00:03:19.440
sharing.

00:03:19.440 --> 00:03:22.010
At the start of the year,
measured against p negative 5

00:03:22.010 --> 00:03:27.365
of VP8 for HD content, VP9
encode was 25 times too slow.

00:03:27.365 --> 00:03:30.020
With the addition of a
non-RD path and many other

00:03:30.020 --> 00:03:33.010
optimizations, this is
now down to about 2x,

00:03:33.010 --> 00:03:35.680
but delivering about
40% compression gains,

00:03:35.680 --> 00:03:40.279
or about 1.4x, delivering
about 20% compression gains.

00:03:40.279 --> 00:03:42.320
Now real time enables
screen sharing applications

00:03:42.320 --> 00:03:44.440
to use VP9, however,
screen sharing

00:03:44.440 --> 00:03:47.540
requires high fidelity text
and color space rendering.

00:03:47.540 --> 00:03:50.215
Towards this, we're also
announcing experimental support

00:03:50.215 --> 00:03:53.490
for 4:4:4 and 4:2:2
color profiles to VP9.

00:03:53.490 --> 00:03:56.420
Now we heard you loud and clear
that you needed simpler tools

00:03:56.420 --> 00:03:58.400
to encode videos into WebM.

00:03:58.400 --> 00:04:00.400
So we announced a
few open source tools

00:04:00.400 --> 00:04:02.130
to make these process better.

00:04:02.130 --> 00:04:05.640
Check out Demystifying WebM
Encodes and Decodes for tips,

00:04:05.640 --> 00:04:09.830
tricks, and tools to encode
and play back WebM files.

00:04:09.830 --> 00:04:12.270
The team has been hard at
work making decode better,

00:04:12.270 --> 00:04:14.650
especially on mobile,
with a strong focus

00:04:14.650 --> 00:04:17.820
on multicore performance and
improvements to battery life.

00:04:17.820 --> 00:04:22.280
We've made VP9 decode over seven
times faster since June, 2013.

00:04:22.280 --> 00:04:25.190
In fact, we can do consistent,
continuous, 1080p play

00:04:25.190 --> 00:04:26.890
back on your Nexus 5.

00:04:26.890 --> 00:04:29.680
And over 10 companies
have licensed the VP9 RTF

00:04:29.680 --> 00:04:32.220
for adding fixed-function
hardware decode,

00:04:32.220 --> 00:04:34.020
including MediaTek and Nvidia.

00:04:34.020 --> 00:04:38.260
Now this means that you have
low power, 2160p, 60 frames

00:04:38.260 --> 00:04:41.960
per second decode
in devices in 2015.

00:04:41.960 --> 00:04:45.240
Finally, we began work on our
new high bit depth profile

00:04:45.240 --> 00:04:49.250
for VP9, which would support
both 10-bit and 12-bit video.

00:04:49.250 --> 00:04:51.910
You can follow its progress
on webmproject.org,

00:04:51.910 --> 00:04:54.050
and we're doing this
work in two phases.

00:04:54.050 --> 00:04:55.970
In the first phase,
all internal buffers

00:04:55.970 --> 00:04:58.930
will be upgraded to 16-bits,
along with all filtering.

00:04:58.930 --> 00:05:01.630
But your input and output
would still be 8-bits.

00:05:01.630 --> 00:05:03.130
With the higher
internal position

00:05:03.130 --> 00:05:05.800
we expect some
huge coding gains.

00:05:05.800 --> 00:05:08.050
In the second phase we
will increase the precision

00:05:08.050 --> 00:05:10.540
of the transfer
coefficients to add extra 2-

00:05:10.540 --> 00:05:13.710
or 4-bits of precision, and make
other changes as appropriate

00:05:13.710 --> 00:05:15.290
for the bitstream syntax.

00:05:15.290 --> 00:05:17.265
We anticipate that
work on the HBD profile

00:05:17.265 --> 00:05:20.730
will be concluded
by the fall of 2014.

00:05:20.730 --> 00:05:23.900
Now we worked very hard to
make VP9 an open project,

00:05:23.900 --> 00:05:25.760
and to help you
provide a great video

00:05:25.760 --> 00:05:29.060
experience through the web,
across many of these devices.

00:05:29.060 --> 00:05:31.400
Now it's your turn to
start telling great video

00:05:31.400 --> 00:05:32.840
stories on the internet.

00:05:32.840 --> 00:05:35.630
For more information on creating
and playing back WebM videos,

00:05:35.630 --> 00:05:38.370
check out "Demystifying
WebM Encode and Decodes."

00:05:38.370 --> 00:05:41.400
And as always, we
are here to help.

