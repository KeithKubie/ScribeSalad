WEBVTT
Kind: captions
Language: en

00:00:00.515 --> 00:00:04.070
Okay, in this chapter you're going
to get a crash course in IndexedDB.

00:00:04.070 --> 00:00:05.550
So hold on tight.

00:00:05.550 --> 00:00:09.002
Let's get through this as quickly as
possible, and hopefully in one piece.

00:00:09.002 --> 00:00:13.950
I'm going to start by going to
the browser and opening idb-test.

00:00:13.950 --> 00:00:16.390
This is just a blank
page with a script tag.

00:00:16.390 --> 00:00:22.310
This script is in public,
JS, idb-test, index.js.

00:00:22.310 --> 00:00:24.170
All it contains at
the moment is an import for

00:00:24.170 --> 00:00:26.450
the IDB library we saw before.

00:00:26.450 --> 00:00:29.220
So okay then, let's create a database.

00:00:29.220 --> 00:00:33.310
We can see from the library's code that
the function signature is .open, and

00:00:33.310 --> 00:00:34.860
then the name of the database,

00:00:34.860 --> 00:00:38.040
the version,
then a callback to set the database up.

00:00:38.040 --> 00:00:39.221
So let's do that.

00:00:39.221 --> 00:00:43.342
I'm going to call idb.open,
then name the DB test-db,

00:00:43.342 --> 00:00:47.340
version one, and
pass in my setup callback.

00:00:47.340 --> 00:00:49.040
This function will be called
if the browser hasn't

00:00:49.040 --> 00:00:50.790
heard about this database before.

00:00:50.790 --> 00:00:54.310
Or if the version it knows about
is less than this number here.

00:00:54.310 --> 00:00:56.950
This function gets a special
upgradeDb parameter

00:00:56.950 --> 00:00:58.628
which we used to define the database.

00:00:58.628 --> 00:01:02.840
To ensure the database integrity, this
is the only place you can create and

00:01:02.840 --> 00:01:05.440
remove objects stores and indexes.

00:01:05.440 --> 00:01:07.790
The API for upgradeDb is in the library.

00:01:07.790 --> 00:01:10.960
But it's mostly just a mirror of
the real IndexedDB API, except for

00:01:10.960 --> 00:01:13.480
a few minor differences
which we'll cover.

00:01:13.480 --> 00:01:16.620
The docs tell me createObjectStore
is the same as IDB.

00:01:16.620 --> 00:01:18.460
So MDN can give us the full story.

00:01:18.460 --> 00:01:20.740
And there's the full detail of the API.

00:01:21.990 --> 00:01:25.250
So I'll create an object
store called keyVal.

00:01:25.250 --> 00:01:28.530
Because we haven't told it otherwise,
this store has a key that's separate to

00:01:28.530 --> 00:01:31.520
the data, which is what we want for
a keyValStore.

00:01:31.520 --> 00:01:33.470
I'm going to add some content here, too.

00:01:33.470 --> 00:01:36.080
We can see from the library
docs that an object store has

00:01:36.080 --> 00:01:39.960
these methods which behave the same
as IDB, except they return a promise.

00:01:39.960 --> 00:01:44.020
This is the thing that makes the library
way more usable than plain IDB.

00:01:44.020 --> 00:01:46.840
So I want to put an item into the store.

00:01:46.840 --> 00:01:48.970
So, let's look at the docs for that.

00:01:48.970 --> 00:01:53.980
MDN shows as .put takes an item and
a key, and returns a request.

00:01:53.980 --> 00:01:57.750
These request objects are the thing that
makes IDB really difficult to deal with.

00:01:57.750 --> 00:02:02.080
So whenever IDB would return a request,
the library returns a promise.

00:02:02.080 --> 00:02:05.760
And yes, the signature here is
value key rather than key value.

00:02:05.760 --> 00:02:09.288
Which is a real gotcha, but
you'll see why it's like that later on.

00:02:09.288 --> 00:02:14.358
In fact, most of the IDB API is stupid,
but for sensible reasons.

00:02:14.358 --> 00:02:18.720
So I'm going to put the value world,
and set the key to be hello.

00:02:18.720 --> 00:02:21.160
With that,
we've finished setting our database up.

00:02:21.160 --> 00:02:24.600
And .open returns a promise that
resolves with a database object.

00:02:24.600 --> 00:02:26.360
So we'll store that for later.

00:02:26.360 --> 00:02:29.740
We can use that database object to
get and set items in the database.

00:02:30.750 --> 00:02:34.190
But for now, if we refresh the page and
run the code.

00:02:34.190 --> 00:02:37.622
We can pop over to the resources
panel in dev tools and yeah, and

00:02:37.622 --> 00:02:39.800
right click and refresh.

00:02:39.800 --> 00:02:41.335
And there we can see our database.

00:02:41.335 --> 00:02:42.900
We can see the object store.

00:02:42.900 --> 00:02:45.100
And we can see the value inside.

00:02:45.100 --> 00:02:47.310
So now,
if I want to read from the database,

00:02:47.310 --> 00:02:49.270
I need to create a transaction.

00:02:49.270 --> 00:02:52.070
The function to do
this is db.transaction.

00:02:52.070 --> 00:02:55.540
Passing any object stores,
I'm going to be using just keyval.

00:02:56.560 --> 00:03:01.220
Then I call object store, passing in the
name of the object store I want, keyval.

00:03:01.220 --> 00:03:02.800
This seems a bit repetitive but

00:03:02.800 --> 00:03:05.909
it's possible to have a transaction
that uses multiple objects stores.

00:03:06.946 --> 00:03:08.780
I called .get on the object store,

00:03:08.780 --> 00:03:11.710
passing in the key I'm interested in,
hello.

00:03:11.710 --> 00:03:15.390
This returns a promise, which resolves
to the value I'm looking for.

00:03:15.390 --> 00:03:16.720
Which I'll log.

00:03:16.720 --> 00:03:21.240
So over in the browser, if I hit
refresh, there's the console log.

00:03:21.240 --> 00:03:24.100
But say, I want to add another
value to the object store.

00:03:24.100 --> 00:03:27.640
To do that, I create a transaction
just as I did before but

00:03:27.640 --> 00:03:29.560
I specify that I want to
read write this time.

00:03:29.560 --> 00:03:32.580
Now, I can get my objects
stores before but

00:03:32.580 --> 00:03:35.350
this time,
call .put on on it to set a value.

00:03:35.350 --> 00:03:42.490
I'm going to set the key food to be
value bar, .put returns a promise but

00:03:42.490 --> 00:03:45.510
this promise doesn't necessarily
mean the operation worked.

00:03:45.510 --> 00:03:48.250
As we saw, if the transaction fails.

00:03:48.250 --> 00:03:51.330
All the operations
are part of it are undone.

00:03:51.330 --> 00:03:54.929
This means that you can do a lot of
work in a transaction and be sure that

00:03:54.929 --> 00:03:58.363
it won't be left or accessed in
some kind of half finished state.

00:03:58.363 --> 00:04:01.620
Either all happens or
none of it happens.

00:04:01.620 --> 00:04:04.774
Transaction.complete is
a promise that fulfills if and

00:04:04.774 --> 00:04:08.200
when the transaction completes,
and it rejects if it fails.

00:04:09.680 --> 00:04:13.200
Once the transaction completes,
I'm going to logout a success message.

00:04:13.200 --> 00:04:15.950
Now I can refresh the browser and
see the console log.

00:04:16.950 --> 00:04:19.180
And in the resources panel, there it is.

00:04:19.180 --> 00:04:20.019
There's the value we set.

00:04:21.480 --> 00:04:24.330
Now, I wanted to talk a bit
more about IDB features, but

00:04:24.330 --> 00:04:27.900
it looks like we're getting rudely
interrupted by a certain, Mike Wales.

00:04:27.900 --> 00:04:29.970
Mike, what do you want?

00:04:29.970 --> 00:04:32.530
&gt;&gt; You've been talking for
quite a while there.

00:04:32.530 --> 00:04:34.070
I think it's time we let
the student have a go.

00:04:35.440 --> 00:04:36.375
&gt;&gt; Okay.

00:04:36.375 --> 00:04:38.012
Yeah.
I think you're right.

00:04:38.012 --> 00:04:38.640
Take it away, Mike.

