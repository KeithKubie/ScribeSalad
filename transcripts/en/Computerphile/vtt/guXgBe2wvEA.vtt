WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.890
Back in the early 1980s John Warnock, 
the founder of Adobe, had invented

00:00:04.890 --> 00:00:10.830
PostScript. He'd pioneered all their work
of getting a PostScript interpreter 

00:00:10.830 --> 00:00:17.640
embedded into laser printers. He persuaded
Steve Jobs, at the time, to say: "When your

00:00:17.640 --> 00:00:21.630
new Macintosh comes out we want it to be
almost a dual announcement - at the same

00:00:21.630 --> 00:00:26.130
time". But they didn't quite make it. The
Macintosh did come out, first of all

00:00:26.130 --> 00:00:30.689
- the little 9-inch [screen] one, that we've 
done videos on but alongside it, fairly shortly

00:00:30.689 --> 00:00:36.360
afterwards was the Apple laser printer. John 
had got the "killer app.", he thought, to

00:00:36.360 --> 00:00:42.480
show off the skills and wonder of his
laser printer driving, with PostScript,

00:00:42.480 --> 00:00:52.140
the output. And that killer example was
a United States Income Tax form for

00:00:52.140 --> 00:00:56.370
Supplementary Income. So he programmed
this up in his PostScript language. You

00:00:56.370 --> 00:01:01.109
sent it down to the Apple Laserwriter which 
was so fast you couldn't believe it (!)

00:01:01.109 --> 00:01:05.760
But it took a minute and a quarter to
image it. And the wondrous Jobs, of

00:01:05.760 --> 00:01:11.369
course, said: "John I know how to present but
I cannot hold them [the audience] for one minute

00:01:11.369 --> 00:01:15.390
and a quarter while we press the button
and we wait for it to come out. And the light

00:01:15.390 --> 00:01:19.290
at the front [of the Laserwriter] is going blink, 
blink, blink"!  So John, being a very good computer

00:01:19.290 --> 00:01:24.659
scientist and knowing all about his own
language, PostScript, said: "Yeah, what we've

00:01:24.659 --> 00:01:28.590
got to do, Steve, is remove all the
procedures, just get them automatically

00:01:28.590 --> 00:01:35.070
removed and unroll the loops and make
sure that every 'if' statement that we

00:01:35.070 --> 00:01:38.369
know what data goes into that 'if'
statement so we know which way it's

00:01:38.369 --> 00:01:43.259
going to go through the program. So we're going
to flatten the program - as it's sometimes called.

00:01:43.259 --> 00:01:49.290
We're going to linearize it; we're going to bind 
in the data and say: "We want the fastest route

00:01:49.290 --> 00:01:55.560
to the final visual effect". So that's
what he did and the unrolled version

00:01:55.560 --> 00:02:00.509
imaged in 20 seconds - not a minute and a
quarter. So it really did work.

00:02:01.500 --> 00:02:08.640
We teach our students very carefully
good programming principles. We teach

00:02:08.640 --> 00:02:12.960
them to use 'if' statements 'for' loops
blocks,  structured programming.

00:02:12.960 --> 00:02:18.780
Oh! and above all else isn't it nice to
hive stuff off into procedures or

00:02:18.780 --> 00:02:23.730
subroutines - whatever you want to call them.
And to call them up with suitable arguments.

00:02:23.730 --> 00:02:28.230
It's clean and nice and structured and
gets you very good grades in your coursework.

00:02:28.230 --> 00:02:33.959
Under the hood you always have to
remember that there is a bit of a

00:02:33.959 --> 00:02:39.090
penalty, performance-wise, to be paid for
doing all this. If you just consider the

00:02:39.090 --> 00:02:45.360
humble 'for' loop, for example. Every time
you go round that loop the compiler is

00:02:45.360 --> 00:02:50.790
building in a checking mechanism, at the
top, saying: "You said start at one and in

00:02:50.790 --> 00:02:55.650
steps of 1 go on until you get to 6. And
do it around the loop like that. And

00:02:55.650 --> 00:03:00.120
every time we go in that loop it has to
say 'What's my loop counter at the moment

00:03:00.120 --> 00:03:06.480
Oh! I'm on three. Now, let me take a look
at how far I'm supposed to  -- oh! 6. 

00:03:06.480 --> 00:03:09.060
Is three less than six. Yes it is!

00:03:09.060 --> 00:03:13.140
Oh! I think we'd better go round again".
I exaggerate -  but you know what i'm

00:03:13.140 --> 00:03:18.600
getting at. Equally if you dive into a
procedure and you call it up with arguments

00:03:18.600 --> 00:03:26.820
do remember - from what we've done already - 
that that causes stack frames to be set up to

00:03:26.820 --> 00:03:32.250
propel your arguments to that function
and to post them into the function and

00:03:32.250 --> 00:03:35.040
then when the function has finished doing 
its job 

00:03:35.040 --> 00:03:39.390
it has to clear down that stack frame.
And if the function is recursive there

00:03:39.390 --> 00:03:41.940
might be the zillions of stack frames to be
cleared down.

00:03:41.940 --> 00:03:45.750
It's all overhead, but it's overhead
that you're probably prepared to pay

00:03:45.750 --> 00:03:49.860
because it helps you think about the
problem and do it neatly and elegantly.

00:03:49.860 --> 00:03:55.290
But, if you're concerned with performance
of your program to the nth degree,

00:03:56.130 --> 00:04:01.350
these overheads can begin to tell and
sometimes to get the optimum/maximum

00:04:01.350 --> 00:04:06.120
performance, under specialist conditions,
you might want to say: "Rather than going

00:04:06.120 --> 00:04:09.920
around this 'for' loop six times and doing
pretty well exactly the same

00:04:09.920 --> 00:04:15.709
thing, I will write it out, by hand, six
times and forget the 'for' loop". Would that

00:04:15.709 --> 00:04:18.380
be quicker? The answer is, very often, "Yes".

00:04:18.380 --> 00:04:23.419
What I thought I'd do, in the true
spirit of Computerphile - this little

00:04:23.419 --> 00:04:28.820
example that we'll do now - we want to
print out six Computerphile banners. Look

00:04:28.820 --> 00:04:33.710
at that! Correct fonts and everything! As
you all know it's called OCR-A. I'm afraid

00:04:33.710 --> 00:04:39.139
that my printer is a bit deficient. It's
knocked off the corner of the pointy bracket

00:04:39.139 --> 00:04:40.490
- but please forgive.

00:04:40.490 --> 00:04:44.570
OK - so how do we do it just using a 
PostScript 'for' loop?

00:04:44.570 --> 00:04:49.760
Well, very briefly, I'll go through this
with you. More details available on the

00:04:49.760 --> 00:04:54.440
specialist PostScript video if you need
it. Every PostScript program has to start

00:04:54.440 --> 00:04:58.639
with %!   This says I am PostScript from now on

00:04:58.639 --> 00:05:04.310
Comments in PostScript programs begin with
% in column 1. So [here is]  a program for six

00:05:04.310 --> 00:05:11.060
Computerphile banners. Define the variable 'n' 
to be 6. Here is the PostScript command

00:05:11.060 --> 00:05:16.610
called 'selectfont' which says what font
you want and what point size do you want

00:05:16.610 --> 00:05:17.180
to do it at.

00:05:17.180 --> 00:05:23.570
We're saying: "Find the font called OCR-A
and, at point size 30, make me a copy of

00:05:23.570 --> 00:05:26.300
that ready for use in PostScript. Here

00:05:26.300 --> 00:05:30.680
PostScript does everything backwards in
Reverse Polish notation, but effectively

00:05:30.680 --> 00:05:32.090
it is very simple.

00:05:32.090 --> 00:05:38.510
It's a 'for' loop so it's basically saying: for -
starting at one and in steps of one up to 'n'

00:05:38.510 --> 00:05:44.270
(but we know 'n' is 6) do the following
code inside these curly braces. Now the

00:05:44.270 --> 00:05:50.090
next line is saying we want six "Computerphiles" 
and they should all be at 10 points

00:05:50.090 --> 00:05:57.650
in from the margin and they should be a
100 points apart.  When you look at

00:05:57.650 --> 00:06:02.360
this carefully I'm doing them upwards, not
downwards. Now you can see what happens

00:06:02.360 --> 00:06:07.310
when you start printing out stuff,
probably designed for US Letter, on to A4

00:06:07.310 --> 00:06:13.760
paper.  Your 10 point. - what is it, 72 points 
an inch?  I tried to do a

00:06:13.760 --> 00:06:16.460
one-seventh of an inch indent and it didn't work!

00:06:16.460 --> 00:06:22.039
It's all to do with paper sizes but
anyway, going up the page, it's a

00:06:22.039 --> 00:06:26.090
100-point increments which is just a bit
more than an inch. Six

00:06:26.090 --> 00:06:29.870
instances of "Computerphile" all
beautifully printed out. And there's the

00:06:29.870 --> 00:06:36.259
end of your 'for' loop. And finally it has
- as it were - virtually imaged this for

00:06:36.259 --> 00:06:41.990
you inside its own graphic memory. But if you
wanted it to show up on your screen, or

00:06:41.990 --> 00:06:48.860
ultimately an your piece of paper, you say
'showpage'. Now some PostScript interpreters,

00:06:48.860 --> 00:06:54.680
if it gets to end of file and you haven't 
said 'showpage' will put a 'showpage' in 
for you. There's the 'showpage'.

00:06:54.680 --> 00:06:57.710
Here's the thing done,

00:06:57.710 --> 00:07:06.710
not in a 'for' loop but writing out six
separate calls of the command to print

00:07:06.710 --> 00:07:12.409
out "Computerphile" at 30 point. You might 
say: "Well you used things like 'show'

00:07:12.409 --> 00:07:21.710
and 'moveto' and 'showpage' and here, on
this copy, you're not! No, I'm trying to

00:07:21.710 --> 00:07:26.060
show you something which will be of use
to us later on -- that PostScript enables

00:07:26.060 --> 00:07:32.090
you to redefine operators and to
abbreviate their names if you want to.

00:07:32.090 --> 00:07:34.190
So, up at the top here I say: "Look

00:07:34.190 --> 00:07:41.090
define, just the letter 's', to be the
operator 'show'. Define 'm' to be the same

00:07:41.090 --> 00:07:45.979
as 'moveto'. Now the word 'bind' just means:
"Remember I've done this definition and

00:07:45.979 --> 00:07:50.270
don't permit any other redefinitions
that might mess things up. Don't let

00:07:50.270 --> 00:07:55.460
anybody .... above all don't let even yourself 
- making mistakes - try and change it again."

00:07:55.460 --> 00:08:01.190
This is binding solidly 'm' to being
'moveto.  'selectfont' I've abbreviated as

00:08:01.190 --> 00:08:08.870
'sf'; 'showpage' as 'sp'. And look the very first
one is there that's "10 200 moveto" and

00:08:08.870 --> 00:08:13.849
there, and then another, then another and
finally 'sp' which is the abbreviation for

00:08:13.849 --> 00:08:18.949
'showpage'. But I didn't write it out by
hand - I got a "transform" program to do

00:08:18.949 --> 00:08:25.050
it for me. Because it's all right doing six
of these with a bit of fancy abbreviation

00:08:25.050 --> 00:08:29.190
definitions at the top. But if it was
10,000 times round I don't want to

00:08:29.190 --> 00:08:33.060
replicate something 10,000 [times] in an 
editor, or by hand.

00:08:33.060 --> 00:08:36.899
Here's a "transform" script which we'll
leave there for in the notes. So  if you get

00:08:36.899 --> 00:08:41.399
it working write us a comment will you?
And say: "Yeah! Wow! it worked for me".

00:08:41.399 --> 00:08:45.420
You should be able to work out how to use it.
And i should say this is a much, much,

00:08:45.420 --> 00:08:51.000
much simplified version of the unrolled
"transform" script that John Warnock used

00:08:51.000 --> 00:08:56.250
back in 1984 to get his income tax form 
- which was far more

00:08:56.250 --> 00:09:00.390
complicated than six "Computerphiles", to
print out in a reasonable amount of time

00:09:00.390 --> 00:09:06.120
on the Apple Laserwriter. Just one final
comment. What John did and what this is

00:09:06.120 --> 00:09:10.920
echoing here in this abbreviation  ....
"Why are you bothering to abbreviate?" The

00:09:10.920 --> 00:09:14.850
answer is: "Well, if you unroll the loops and
replicate things, you're making files

00:09:14.850 --> 00:09:18.660
bigger and bigger and bigger". Lots more
printing isn't there, in the file, and

00:09:18.660 --> 00:09:20.640
that's not necessarily a good thing.

00:09:20.640 --> 00:09:27.360
Can we keep file size down? Yes, by doing
abbreviations. And that realization, made

00:09:27.360 --> 00:09:33.149
by John in 1984, was the very earliest
glimmerings of what we now know as PDF.

