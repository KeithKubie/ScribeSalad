WEBVTT
Kind: captions
Language: en

00:00:03.110 --> 00:00:07.039
today we do not want to get any new C++

00:00:07.039 --> 00:00:07.049
today we do not want to get any new C++
 

00:00:07.049 --> 00:00:09.620
today we do not want to get any new C++
users we hope that you will all use Java

00:00:09.620 --> 00:00:09.630
users we hope that you will all use Java
 

00:00:09.630 --> 00:00:12.620
users we hope that you will all use Java
or Kotlin if you can but obviously there

00:00:12.620 --> 00:00:12.630
or Kotlin if you can but obviously there
 

00:00:12.630 --> 00:00:14.690
or Kotlin if you can but obviously there
are people who can't them we're here for

00:00:14.690 --> 00:00:14.700
are people who can't them we're here for
 

00:00:14.700 --> 00:00:16.340
are people who can't them we're here for
you and so I think what we really want

00:00:16.340 --> 00:00:16.350
you and so I think what we really want
 

00:00:16.350 --> 00:00:19.189
you and so I think what we really want
to say is just we aren't working on C

00:00:19.189 --> 00:00:19.199
to say is just we aren't working on C
 

00:00:19.199 --> 00:00:20.960
to say is just we aren't working on C
and C++ we do care we're trying to make

00:00:20.960 --> 00:00:20.970
and C++ we do care we're trying to make
 

00:00:20.970 --> 00:00:22.429
and C++ we do care we're trying to make
things better and we want to talk about

00:00:22.429 --> 00:00:22.439
things better and we want to talk about
 

00:00:22.439 --> 00:00:23.630
things better and we want to talk about
some of the things that we've been doing

00:00:23.630 --> 00:00:23.640
some of the things that we've been doing
 

00:00:23.640 --> 00:00:26.960
some of the things that we've been doing
over the past few years so specifically

00:00:26.960 --> 00:00:26.970
over the past few years so specifically
 

00:00:26.970 --> 00:00:31.849
over the past few years so specifically
we are the the platform the OS C++ team

00:00:31.849 --> 00:00:31.859
we are the the platform the OS C++ team
 

00:00:31.859 --> 00:00:37.240
we are the the platform the OS C++ team
and we took over the NDK around 2015 for

00:00:37.240 --> 00:00:37.250
and we took over the NDK around 2015 for
 

00:00:37.250 --> 00:00:41.420
and we took over the NDK around 2015 for
our 10 the the parts that we consider

00:00:41.420 --> 00:00:41.430
our 10 the the parts that we consider
 

00:00:41.430 --> 00:00:43.549
our 10 the the parts that we consider
the NDK are basically the compiler the

00:00:43.549 --> 00:00:43.559
the NDK are basically the compiler the
 

00:00:43.559 --> 00:00:44.959
the NDK are basically the compiler the
headers on the libraries so we're not

00:00:44.959 --> 00:00:44.969
headers on the libraries so we're not
 

00:00:44.969 --> 00:00:46.520
headers on the libraries so we're not
talking about things like the studio

00:00:46.520 --> 00:00:46.530
talking about things like the studio
 

00:00:46.530 --> 00:00:49.790
talking about things like the studio
integration the Gradle stuff that's the

00:00:49.790 --> 00:00:49.800
integration the Gradle stuff that's the
 

00:00:49.800 --> 00:00:51.229
integration the Gradle stuff that's the
studio folks are around they've got

00:00:51.229 --> 00:00:51.239
studio folks are around they've got
 

00:00:51.239 --> 00:00:53.119
studio folks are around they've got
numerous talks and you can you can talk

00:00:53.119 --> 00:00:53.129
numerous talks and you can you can talk
 

00:00:53.129 --> 00:00:57.020
numerous talks and you can you can talk
to them other times so Dan's gonna start

00:00:57.020 --> 00:00:57.030
to them other times so Dan's gonna start
 

00:00:57.030 --> 00:00:59.720
to them other times so Dan's gonna start
with a introduction to what we've done

00:00:59.720 --> 00:00:59.730
with a introduction to what we've done
 

00:00:59.730 --> 00:01:02.360
with a introduction to what we've done
since we took over the NDK yes so like

00:01:02.360 --> 00:01:02.370
since we took over the NDK yes so like
 

00:01:02.370 --> 00:01:05.000
since we took over the NDK yes so like
Elliott said we took over in about May

00:01:05.000 --> 00:01:05.010
Elliott said we took over in about May
 

00:01:05.010 --> 00:01:08.539
Elliott said we took over in about May
2015 that was NDK our 10e at the time so

00:01:08.539 --> 00:01:08.549
2015 that was NDK our 10e at the time so
 

00:01:08.549 --> 00:01:12.440
2015 that was NDK our 10e at the time so
I'm going to be covering from then on to

00:01:12.440 --> 00:01:12.450
I'm going to be covering from then on to
 

00:01:12.450 --> 00:01:14.719
I'm going to be covering from then on to
give some perspective with the OS C++

00:01:14.719 --> 00:01:14.729
give some perspective with the OS C++
 

00:01:14.729 --> 00:01:16.910
give some perspective with the OS C++
experience looked like back then this

00:01:16.910 --> 00:01:16.920
experience looked like back then this
 

00:01:16.920 --> 00:01:18.770
experience looked like back then this
was marshmallow we were mostly way done

00:01:18.770 --> 00:01:18.780
was marshmallow we were mostly way done
 

00:01:18.780 --> 00:01:21.890
was marshmallow we were mostly way done
with that we had the transition to clang

00:01:21.890 --> 00:01:21.900
with that we had the transition to clang
 

00:01:21.900 --> 00:01:23.810
with that we had the transition to clang
well underway at that point we moved a

00:01:23.810 --> 00:01:23.820
well underway at that point we moved a
 

00:01:23.820 --> 00:01:26.929
well underway at that point we moved a
device in its entirety we were working

00:01:26.929 --> 00:01:26.939
device in its entirety we were working
 

00:01:26.939 --> 00:01:30.410
device in its entirety we were working
on others we had complete C++ 14 support

00:01:30.410 --> 00:01:30.420
on others we had complete C++ 14 support
 

00:01:30.420 --> 00:01:33.920
on others we had complete C++ 14 support
from Lib C++ at that point Google is big

00:01:33.920 --> 00:01:33.930
from Lib C++ at that point Google is big
 

00:01:33.930 --> 00:01:35.960
from Lib C++ at that point Google is big
on dogfooding so the idea being you know

00:01:35.960 --> 00:01:35.970
on dogfooding so the idea being you know
 

00:01:35.970 --> 00:01:37.760
on dogfooding so the idea being you know
we should be using what you're using so

00:01:37.760 --> 00:01:37.770
we should be using what you're using so
 

00:01:37.770 --> 00:01:39.140
we should be using what you're using so
that we find the bugs before we ship

00:01:39.140 --> 00:01:39.150
that we find the bugs before we ship
 

00:01:39.150 --> 00:01:42.020
that we find the bugs before we ship
them to you unfortunately for the NDK at

00:01:42.020 --> 00:01:42.030
them to you unfortunately for the NDK at
 

00:01:42.030 --> 00:01:43.760
them to you unfortunately for the NDK at
the time this is what things look like

00:01:43.760 --> 00:01:43.770
the time this is what things look like
 

00:01:43.770 --> 00:01:45.770
the time this is what things look like
we had four different compilers that was

00:01:45.770 --> 00:01:45.780
we had four different compilers that was
 

00:01:45.780 --> 00:01:47.569
we had four different compilers that was
two versions of GCC two versions of

00:01:47.569 --> 00:01:47.579
two versions of GCC two versions of
 

00:01:47.579 --> 00:01:50.300
two versions of GCC two versions of
clang clang was heavily forked three

00:01:50.300 --> 00:01:50.310
clang clang was heavily forked three
 

00:01:50.310 --> 00:01:52.609
clang clang was heavily forked three
different C++ libraries we had STL port

00:01:52.609 --> 00:01:52.619
different C++ libraries we had STL port
 

00:01:52.619 --> 00:01:54.469
different C++ libraries we had STL port
hadn't received updates upstream in

00:01:54.469 --> 00:01:54.479
hadn't received updates upstream in
 

00:01:54.479 --> 00:01:56.630
hadn't received updates upstream in
years so it was still in C++ oh three we

00:01:56.630 --> 00:01:56.640
years so it was still in C++ oh three we
 

00:01:56.640 --> 00:01:58.940
years so it was still in C++ oh three we
had good new STL more commonly known as

00:01:58.940 --> 00:01:58.950
had good new STL more commonly known as
 

00:01:58.950 --> 00:02:00.590
had good new STL more commonly known as
get new his lips did C++ that's what you

00:02:00.590 --> 00:02:00.600
get new his lips did C++ that's what you
 

00:02:00.600 --> 00:02:02.810
get new his lips did C++ that's what you
have on your normal Linux system and Lib

00:02:02.810 --> 00:02:02.820
have on your normal Linux system and Lib
 

00:02:02.820 --> 00:02:04.789
have on your normal Linux system and Lib
C++ which is all vm's

00:02:04.789 --> 00:02:04.799
C++ which is all vm's
 

00:02:04.799 --> 00:02:06.770
C++ which is all vm's
C++ standard library which we were using

00:02:06.770 --> 00:02:06.780
C++ standard library which we were using
 

00:02:06.780 --> 00:02:09.469
C++ standard library which we were using
in the platform this was also quite

00:02:09.469 --> 00:02:09.479
in the platform this was also quite
 

00:02:09.479 --> 00:02:11.089
in the platform this was also quite
heavily forked in the NDK and it had a

00:02:11.089 --> 00:02:11.099
heavily forked in the NDK and it had a
 

00:02:11.099 --> 00:02:13.150
heavily forked in the NDK and it had a
compatibility library that let it run

00:02:13.150 --> 00:02:13.160
compatibility library that let it run
 

00:02:13.160 --> 00:02:16.000
compatibility library that let it run
going back to Gingerbread and that

00:02:16.000 --> 00:02:16.010
going back to Gingerbread and that
 

00:02:16.010 --> 00:02:18.010
going back to Gingerbread and that
library had quite a few bugs

00:02:18.010 --> 00:02:18.020
library had quite a few bugs
 

00:02:18.020 --> 00:02:20.080
library had quite a few bugs
unfortunately so that was a major source

00:02:20.080 --> 00:02:20.090
unfortunately so that was a major source
 

00:02:20.090 --> 00:02:23.320
unfortunately so that was a major source
of issues we also had a copy of the OS

00:02:23.320 --> 00:02:23.330
of issues we also had a copy of the OS
 

00:02:23.330 --> 00:02:25.660
of issues we also had a copy of the OS
headers for every single API level and

00:02:25.660 --> 00:02:25.670
headers for every single API level and
 

00:02:25.670 --> 00:02:28.120
headers for every single API level and
architecture and typically that meant

00:02:28.120 --> 00:02:28.130
architecture and typically that meant
 

00:02:28.130 --> 00:02:31.060
architecture and typically that meant
that if we fix a bug in the headers we

00:02:31.060 --> 00:02:31.070
that if we fix a bug in the headers we
 

00:02:31.070 --> 00:02:32.440
that if we fix a bug in the headers we
only fix it in the most recent version

00:02:32.440 --> 00:02:32.450
only fix it in the most recent version
 

00:02:32.450 --> 00:02:34.210
only fix it in the most recent version
and it didn't get back ported which was

00:02:34.210 --> 00:02:34.220
and it didn't get back ported which was
 

00:02:34.220 --> 00:02:36.460
and it didn't get back ported which was
a big problem because you were using

00:02:36.460 --> 00:02:36.470
a big problem because you were using
 

00:02:36.470 --> 00:02:38.110
a big problem because you were using
whichever version of the headers Master

00:02:38.110 --> 00:02:38.120
whichever version of the headers Master
 

00:02:38.120 --> 00:02:40.180
whichever version of the headers Master
min SDK version so if we only fix the

00:02:40.180 --> 00:02:40.190
min SDK version so if we only fix the
 

00:02:40.190 --> 00:02:41.530
min SDK version so if we only fix the
latest version you wouldn't actually see

00:02:41.530 --> 00:02:41.540
latest version you wouldn't actually see
 

00:02:41.540 --> 00:02:44.760
latest version you wouldn't actually see
the fix for about five years maybe more

00:02:44.760 --> 00:02:44.770
the fix for about five years maybe more
 

00:02:44.770 --> 00:02:47.350
the fix for about five years maybe more
so the question is how do we get to this

00:02:47.350 --> 00:02:47.360
so the question is how do we get to this
 

00:02:47.360 --> 00:02:49.660
so the question is how do we get to this
dogfooding world and we could

00:02:49.660 --> 00:02:49.670
dogfooding world and we could
 

00:02:49.670 --> 00:02:51.670
dogfooding world and we could
essentially either just stop shipping in

00:02:51.670 --> 00:02:51.680
essentially either just stop shipping in
 

00:02:51.680 --> 00:02:53.320
essentially either just stop shipping in
decays for a couple years while we dealt

00:02:53.320 --> 00:02:53.330
decays for a couple years while we dealt
 

00:02:53.330 --> 00:02:54.880
decays for a couple years while we dealt
with all of the issues that had to get

00:02:54.880 --> 00:02:54.890
with all of the issues that had to get
 

00:02:54.890 --> 00:02:57.190
with all of the issues that had to get
us there that didn't sound particularly

00:02:57.190 --> 00:02:57.200
us there that didn't sound particularly
 

00:02:57.200 --> 00:03:00.160
us there that didn't sound particularly
appealing so instead we tried to do this

00:03:00.160 --> 00:03:00.170
appealing so instead we tried to do this
 

00:03:00.170 --> 00:03:02.890
appealing so instead we tried to do this
in smaller less disruptive steps each

00:03:02.890 --> 00:03:02.900
in smaller less disruptive steps each
 

00:03:02.900 --> 00:03:05.620
in smaller less disruptive steps each
step still had some disruption but was a

00:03:05.620 --> 00:03:05.630
step still had some disruption but was a
 

00:03:05.630 --> 00:03:08.890
step still had some disruption but was a
much easier hurdle to get over we did

00:03:08.890 --> 00:03:08.900
much easier hurdle to get over we did
 

00:03:08.900 --> 00:03:11.890
much easier hurdle to get over we did
this in a predictable opt-in opt-out and

00:03:11.890 --> 00:03:11.900
this in a predictable opt-in opt-out and
 

00:03:11.900 --> 00:03:14.410
this in a predictable opt-in opt-out and
then removed cycle if I use the unified

00:03:14.410 --> 00:03:14.420
then removed cycle if I use the unified
 

00:03:14.420 --> 00:03:15.520
then removed cycle if I use the unified
headers as an example

00:03:15.520 --> 00:03:15.530
headers as an example
 

00:03:15.530 --> 00:03:18.210
headers as an example
r14 we added a flag to turn those on our

00:03:18.210 --> 00:03:18.220
r14 we added a flag to turn those on our
 

00:03:18.220 --> 00:03:20.410
r14 we added a flag to turn those on our
15 if your app wasn't ready to switch

00:03:20.410 --> 00:03:20.420
15 if your app wasn't ready to switch
 

00:03:20.420 --> 00:03:22.390
15 if your app wasn't ready to switch
yet you could still opt out with a

00:03:22.390 --> 00:03:22.400
yet you could still opt out with a
 

00:03:22.400 --> 00:03:25.630
yet you could still opt out with a
different flag and then by our 16 we'd

00:03:25.630 --> 00:03:25.640
different flag and then by our 16 we'd
 

00:03:25.640 --> 00:03:26.710
different flag and then by our 16 we'd
worked out all the kinks and we were

00:03:26.710 --> 00:03:26.720
worked out all the kinks and we were
 

00:03:26.720 --> 00:03:28.570
worked out all the kinks and we were
ready to move on so we removed the

00:03:28.570 --> 00:03:28.580
ready to move on so we removed the
 

00:03:28.580 --> 00:03:34.840
ready to move on so we removed the
previous option the compilers we started

00:03:34.840 --> 00:03:34.850
previous option the compilers we started
 

00:03:34.850 --> 00:03:37.930
previous option the compilers we started
with this really with our 11 that was

00:03:37.930 --> 00:03:37.940
with this really with our 11 that was
 

00:03:37.940 --> 00:03:40.270
with this really with our 11 that was
when we unfort the NDK is clang and that

00:03:40.270 --> 00:03:40.280
when we unfort the NDK is clang and that
 

00:03:40.280 --> 00:03:43.780
when we unfort the NDK is clang and that
alone let us close just a ton of bugs it

00:03:43.780 --> 00:03:43.790
alone let us close just a ton of bugs it
 

00:03:43.790 --> 00:03:45.220
alone let us close just a ton of bugs it
was then the same compiler that we used

00:03:45.220 --> 00:03:45.230
was then the same compiler that we used
 

00:03:45.230 --> 00:03:48.370
was then the same compiler that we used
to build the OS R 13 couple releases

00:03:48.370 --> 00:03:48.380
to build the OS R 13 couple releases
 

00:03:48.380 --> 00:03:50.199
to build the OS R 13 couple releases
later we switched that to be the default

00:03:50.199 --> 00:03:50.209
later we switched that to be the default
 

00:03:50.209 --> 00:03:53.980
later we switched that to be the default
and then by R 18 it was we were to the

00:03:53.980 --> 00:03:53.990
and then by R 18 it was we were to the
 

00:03:53.990 --> 00:03:55.060
and then by R 18 it was we were to the
point that we could actually rely

00:03:55.060 --> 00:03:55.070
point that we could actually rely
 

00:03:55.070 --> 00:03:57.280
point that we could actually rely
bullion clang and Lib C++ so we removed

00:03:57.280 --> 00:03:57.290
bullion clang and Lib C++ so we removed
 

00:03:57.290 --> 00:04:00.790
bullion clang and Lib C++ so we removed
GCC at this point all of Android all of

00:04:00.790 --> 00:04:00.800
GCC at this point all of Android all of
 

00:04:00.800 --> 00:04:03.190
GCC at this point all of Android all of
Chrome OS iOS all of these are using

00:04:03.190 --> 00:04:03.200
Chrome OS iOS all of these are using
 

00:04:03.200 --> 00:04:05.620
Chrome OS iOS all of these are using
clang so if you are targeting a subset

00:04:05.620 --> 00:04:05.630
clang so if you are targeting a subset
 

00:04:05.630 --> 00:04:07.900
clang so if you are targeting a subset
of these operating systems your code is

00:04:07.900 --> 00:04:07.910
of these operating systems your code is
 

00:04:07.910 --> 00:04:09.460
of these operating systems your code is
much more likely to be portable between

00:04:09.460 --> 00:04:09.470
much more likely to be portable between
 

00:04:09.470 --> 00:04:14.800
much more likely to be portable between
them the unified headers I mentioned

00:04:14.800 --> 00:04:14.810
them the unified headers I mentioned
 

00:04:14.810 --> 00:04:17.110
them the unified headers I mentioned
earlier this is the gist of what those

00:04:17.110 --> 00:04:17.120
earlier this is the gist of what those
 

00:04:17.120 --> 00:04:19.990
earlier this is the gist of what those
look like instead of having a different

00:04:19.990 --> 00:04:20.000
look like instead of having a different
 

00:04:20.000 --> 00:04:21.700
look like instead of having a different
copy of this header for every single API

00:04:21.700 --> 00:04:21.710
copy of this header for every single API
 

00:04:21.710 --> 00:04:24.550
copy of this header for every single API
letter level we have this annotation

00:04:24.550 --> 00:04:24.560
letter level we have this annotation
 

00:04:24.560 --> 00:04:26.770
letter level we have this annotation
here introduced in that says that dlv

00:04:26.770 --> 00:04:26.780
here introduced in that says that dlv
 

00:04:26.780 --> 00:04:27.430
here introduced in that says that dlv
sim was

00:04:27.430 --> 00:04:27.440
sim was
 

00:04:27.440 --> 00:04:30.940
sim was
available until Android 24 the compiler

00:04:30.940 --> 00:04:30.950
available until Android 24 the compiler
 

00:04:30.950 --> 00:04:32.880
available until Android 24 the compiler
will make sure that you can't actually

00:04:32.880 --> 00:04:32.890
will make sure that you can't actually
 

00:04:32.890 --> 00:04:35.080
will make sure that you can't actually
build against that if your min SDK

00:04:35.080 --> 00:04:35.090
build against that if your min SDK
 

00:04:35.090 --> 00:04:38.830
build against that if your min SDK
version is not at least 24 we still have

00:04:38.830 --> 00:04:38.840
version is not at least 24 we still have
 

00:04:38.840 --> 00:04:40.960
version is not at least 24 we still have
all of the types the macros the

00:04:40.960 --> 00:04:40.970
all of the types the macros the
 

00:04:40.970 --> 00:04:42.280
all of the types the macros the
constants all the things that you need

00:04:42.280 --> 00:04:42.290
constants all the things that you need
 

00:04:42.290 --> 00:04:44.290
constants all the things that you need
to use these api is visible so if you

00:04:44.290 --> 00:04:44.300
to use these api is visible so if you
 

00:04:44.300 --> 00:04:46.360
to use these api is visible so if you
are running if your ministy k version is

00:04:46.360 --> 00:04:46.370
are running if your ministy k version is
 

00:04:46.370 --> 00:04:47.560
are running if your ministy k version is
lower than the device you're actually

00:04:47.560 --> 00:04:47.570
lower than the device you're actually
 

00:04:47.570 --> 00:04:48.940
lower than the device you're actually
running on you can still access the new

00:04:48.940 --> 00:04:48.950
running on you can still access the new
 

00:04:48.950 --> 00:04:51.430
running on you can still access the new
api with deal sim and use all the

00:04:51.430 --> 00:04:51.440
api with deal sim and use all the
 

00:04:51.440 --> 00:04:53.170
api with deal sim and use all the
correct types rather than copy pasting

00:04:53.170 --> 00:04:53.180
correct types rather than copy pasting
 

00:04:53.180 --> 00:04:55.000
correct types rather than copy pasting
all the types and constants into your

00:04:55.000 --> 00:04:55.010
all the types and constants into your
 

00:04:55.010 --> 00:04:56.410
all the types and constants into your
project like you would have to with the

00:04:56.410 --> 00:04:56.420
project like you would have to with the
 

00:04:56.420 --> 00:05:01.690
project like you would have to with the
previous solution this did done earth a

00:05:01.690 --> 00:05:01.700
previous solution this did done earth a
 

00:05:01.700 --> 00:05:02.530
previous solution this did done earth a
handful of bugs

00:05:02.530 --> 00:05:02.540
handful of bugs
 

00:05:02.540 --> 00:05:05.350
handful of bugs
it was mostly actually old Android

00:05:05.350 --> 00:05:05.360
it was mostly actually old Android
 

00:05:05.360 --> 00:05:07.510
it was mostly actually old Android
workarounds that had been checked in had

00:05:07.510 --> 00:05:07.520
workarounds that had been checked in had
 

00:05:07.520 --> 00:05:09.010
workarounds that had been checked in had
to be deleted in order to work with the

00:05:09.010 --> 00:05:09.020
to be deleted in order to work with the
 

00:05:09.020 --> 00:05:10.900
to be deleted in order to work with the
new option but bleeding codes pretty

00:05:10.900 --> 00:05:10.910
new option but bleeding codes pretty
 

00:05:10.910 --> 00:05:12.520
new option but bleeding codes pretty
straightforward so that's that's not too

00:05:12.520 --> 00:05:12.530
straightforward so that's that's not too
 

00:05:12.530 --> 00:05:15.520
straightforward so that's that's not too
bad

00:05:15.520 --> 00:05:15.530
 

00:05:15.530 --> 00:05:19.420
Lib C++ like I said this was one of the

00:05:19.420 --> 00:05:19.430
Lib C++ like I said this was one of the
 

00:05:19.430 --> 00:05:23.530
Lib C++ like I said this was one of the
more this was really our main goal was

00:05:23.530 --> 00:05:23.540
more this was really our main goal was
 

00:05:23.540 --> 00:05:26.230
more this was really our main goal was
to give you a up-to-date C++ standard

00:05:26.230 --> 00:05:26.240
to give you a up-to-date C++ standard
 

00:05:26.240 --> 00:05:29.320
to give you a up-to-date C++ standard
library something that actually could

00:05:29.320 --> 00:05:29.330
library something that actually could
 

00:05:29.330 --> 00:05:31.780
library something that actually could
support C++ 11 at the time and then 14

00:05:31.780 --> 00:05:31.790
support C++ 11 at the time and then 14
 

00:05:31.790 --> 00:05:34.960
support C++ 11 at the time and then 14
and now even 17 it was a fairly wrong

00:05:34.960 --> 00:05:34.970
and now even 17 it was a fairly wrong
 

00:05:34.970 --> 00:05:37.000
and now even 17 it was a fairly wrong
long road to get there it required those

00:05:37.000 --> 00:05:37.010
long road to get there it required those
 

00:05:37.010 --> 00:05:40.780
long road to get there it required those
previous fixes first in our 16 was when

00:05:40.780 --> 00:05:40.790
previous fixes first in our 16 was when
 

00:05:40.790 --> 00:05:42.480
previous fixes first in our 16 was when
we really started doing this on earnest

00:05:42.480 --> 00:05:42.490
we really started doing this on earnest
 

00:05:42.490 --> 00:05:46.060
we really started doing this on earnest
we rewrote that compatibility library

00:05:46.060 --> 00:05:46.070
we rewrote that compatibility library
 

00:05:46.070 --> 00:05:49.210
we rewrote that compatibility library
with all the bugs added a whole bunch of

00:05:49.210 --> 00:05:49.220
with all the bugs added a whole bunch of
 

00:05:49.220 --> 00:05:51.100
with all the bugs added a whole bunch of
tests made sure that that was nice and

00:05:51.100 --> 00:05:51.110
tests made sure that that was nice and
 

00:05:51.110 --> 00:05:53.440
tests made sure that that was nice and
solid and we shipped that in our 16 took

00:05:53.440 --> 00:05:53.450
solid and we shipped that in our 16 took
 

00:05:53.450 --> 00:05:56.800
solid and we shipped that in our 16 took
the beta sticker off and said yes please

00:05:56.800 --> 00:05:56.810
the beta sticker off and said yes please
 

00:05:56.810 --> 00:05:58.240
the beta sticker off and said yes please
start using this it wasn't the default

00:05:58.240 --> 00:05:58.250
start using this it wasn't the default
 

00:05:58.250 --> 00:06:01.330
start using this it wasn't the default
yet we waited for our 17 for that so our

00:06:01.330 --> 00:06:01.340
yet we waited for our 17 for that so our
 

00:06:01.340 --> 00:06:03.640
yet we waited for our 17 for that so our
17 it became the default and then our 18

00:06:03.640 --> 00:06:03.650
17 it became the default and then our 18
 

00:06:03.650 --> 00:06:04.870
17 it became the default and then our 18
everything was looking good and we

00:06:04.870 --> 00:06:04.880
everything was looking good and we
 

00:06:04.880 --> 00:06:08.020
everything was looking good and we
removed the other options

00:06:08.020 --> 00:06:08.030
 

00:06:08.030 --> 00:06:11.080
so as of our 18 and the NDK had a single

00:06:11.080 --> 00:06:11.090
so as of our 18 and the NDK had a single
 

00:06:11.090 --> 00:06:12.580
so as of our 18 and the NDK had a single
compiler the same one we used to build

00:06:12.580 --> 00:06:12.590
compiler the same one we used to build
 

00:06:12.590 --> 00:06:14.650
compiler the same one we used to build
the OS a single set of headers same ones

00:06:14.650 --> 00:06:14.660
the OS a single set of headers same ones
 

00:06:14.660 --> 00:06:16.990
the OS a single set of headers same ones
we used to build the OS and a single C++

00:06:16.990 --> 00:06:17.000
we used to build the OS and a single C++
 

00:06:17.000 --> 00:06:18.580
we used to build the OS and a single C++
library at the same one we used to build

00:06:18.580 --> 00:06:18.590
library at the same one we used to build
 

00:06:18.590 --> 00:06:20.560
library at the same one we used to build
the operating system so that was

00:06:20.560 --> 00:06:20.570
the operating system so that was
 

00:06:20.570 --> 00:06:24.590
the operating system so that was
dogfooding mission accomplished

00:06:24.590 --> 00:06:24.600
 

00:06:24.600 --> 00:06:27.930
[Applause]

00:06:27.930 --> 00:06:27.940
[Applause]
 

00:06:27.940 --> 00:06:29.250
[Applause]
does this mean that there's no more

00:06:29.250 --> 00:06:29.260
does this mean that there's no more
 

00:06:29.260 --> 00:06:30.960
does this mean that there's no more
disruption when you update your ndk

00:06:30.960 --> 00:06:30.970
disruption when you update your ndk
 

00:06:30.970 --> 00:06:32.700
disruption when you update your ndk
unfortunately not quite

00:06:32.700 --> 00:06:32.710
unfortunately not quite
 

00:06:32.710 --> 00:06:34.320
unfortunately not quite
there's still a few changes we are gonna

00:06:34.320 --> 00:06:34.330
there's still a few changes we are gonna
 

00:06:34.330 --> 00:06:36.120
there's still a few changes we are gonna
need to be making this is particularly

00:06:36.120 --> 00:06:36.130
need to be making this is particularly
 

00:06:36.130 --> 00:06:39.240
need to be making this is particularly
to reduce the size of the NDK there's a

00:06:39.240 --> 00:06:39.250
to reduce the size of the NDK there's a
 

00:06:39.250 --> 00:06:40.440
to reduce the size of the NDK there's a
whole bunch of redundant copies of

00:06:40.440 --> 00:06:40.450
whole bunch of redundant copies of
 

00:06:40.450 --> 00:06:42.420
whole bunch of redundant copies of
things right now and if your build

00:06:42.420 --> 00:06:42.430
things right now and if your build
 

00:06:42.430 --> 00:06:43.740
things right now and if your build
system is currently relying on those

00:06:43.740 --> 00:06:43.750
system is currently relying on those
 

00:06:43.750 --> 00:06:45.450
system is currently relying on those
redundant copies when I go to delete

00:06:45.450 --> 00:06:45.460
redundant copies when I go to delete
 

00:06:45.460 --> 00:06:47.000
redundant copies when I go to delete
them your build system is gonna break

00:06:47.000 --> 00:06:47.010
them your build system is gonna break
 

00:06:47.010 --> 00:06:49.740
them your build system is gonna break
fortunately as long as you're on NDK our

00:06:49.740 --> 00:06:49.750
fortunately as long as you're on NDK our
 

00:06:49.750 --> 00:06:52.770
fortunately as long as you're on NDK our
19 or newer NDK build and C make are -

00:06:52.770 --> 00:06:52.780
19 or newer NDK build and C make are -
 

00:06:52.780 --> 00:06:54.540
19 or newer NDK build and C make are -
officially supported options are already

00:06:54.540 --> 00:06:54.550
officially supported options are already
 

00:06:54.550 --> 00:06:57.630
officially supported options are already
on to this so as long as you're using

00:06:57.630 --> 00:06:57.640
on to this so as long as you're using
 

00:06:57.640 --> 00:07:03.180
on to this so as long as you're using
those you're already covered if you do

00:07:03.180 --> 00:07:03.190
those you're already covered if you do
 

00:07:03.190 --> 00:07:04.800
those you're already covered if you do
have your own build system there's

00:07:04.800 --> 00:07:04.810
have your own build system there's
 

00:07:04.810 --> 00:07:06.420
have your own build system there's
fortunately a doc linked down there at

00:07:06.420 --> 00:07:06.430
fortunately a doc linked down there at
 

00:07:06.430 --> 00:07:09.270
fortunately a doc linked down there at
the bottom that will tell you all you

00:07:09.270 --> 00:07:09.280
the bottom that will tell you all you
 

00:07:09.280 --> 00:07:10.980
the bottom that will tell you all you
need to know to actually integrate this

00:07:10.980 --> 00:07:10.990
need to know to actually integrate this
 

00:07:10.990 --> 00:07:12.840
need to know to actually integrate this
into your own build system aside from

00:07:12.840 --> 00:07:12.850
into your own build system aside from
 

00:07:12.850 --> 00:07:14.790
into your own build system aside from
that we do have the two build system

00:07:14.790 --> 00:07:14.800
that we do have the two build system
 

00:07:14.800 --> 00:07:17.490
that we do have the two build system
still and UK build is alive and well

00:07:17.490 --> 00:07:17.500
still and UK build is alive and well
 

00:07:17.500 --> 00:07:19.770
still and UK build is alive and well
it is purpose-built for Android so often

00:07:19.770 --> 00:07:19.780
it is purpose-built for Android so often
 

00:07:19.780 --> 00:07:22.170
it is purpose-built for Android so often
if you are targeting only Android that

00:07:22.170 --> 00:07:22.180
if you are targeting only Android that
 

00:07:22.180 --> 00:07:23.190
if you are targeting only Android that
is actually going to be your easiest

00:07:23.190 --> 00:07:23.200
is actually going to be your easiest
 

00:07:23.200 --> 00:07:26.070
is actually going to be your easiest
option that is not the normal case you

00:07:26.070 --> 00:07:26.080
option that is not the normal case you
 

00:07:26.080 --> 00:07:28.020
option that is not the normal case you
are probably also talk targeting iOS

00:07:28.020 --> 00:07:28.030
are probably also talk targeting iOS
 

00:07:28.030 --> 00:07:29.790
are probably also talk targeting iOS
windows handful of other platforms in

00:07:29.790 --> 00:07:29.800
windows handful of other platforms in
 

00:07:29.800 --> 00:07:31.290
windows handful of other platforms in
that case see make is your best bet is

00:07:31.290 --> 00:07:31.300
that case see make is your best bet is
 

00:07:31.300 --> 00:07:33.120
that case see make is your best bet is
gonna be the easiest option for

00:07:33.120 --> 00:07:33.130
gonna be the easiest option for
 

00:07:33.130 --> 00:07:37.200
gonna be the easiest option for
cross-platform work and with that I'm

00:07:37.200 --> 00:07:37.210
cross-platform work and with that I'm
 

00:07:37.210 --> 00:07:41.130
cross-platform work and with that I'm
handing off to Elliot for debugging all

00:07:41.130 --> 00:07:41.140
handing off to Elliot for debugging all
 

00:07:41.140 --> 00:07:44.040
handing off to Elliot for debugging all
right so I think it's not really gonna

00:07:44.040 --> 00:07:44.050
right so I think it's not really gonna
 

00:07:44.050 --> 00:07:45.300
right so I think it's not really gonna
be much of a surprise but the first

00:07:45.300 --> 00:07:45.310
be much of a surprise but the first
 

00:07:45.310 --> 00:07:47.970
be much of a surprise but the first
thing to talk about with C C++ debugging

00:07:47.970 --> 00:07:47.980
thing to talk about with C C++ debugging
 

00:07:47.980 --> 00:07:50.880
thing to talk about with C C++ debugging
is memory issues so like I said at the

00:07:50.880 --> 00:07:50.890
is memory issues so like I said at the
 

00:07:50.890 --> 00:07:54.900
is memory issues so like I said at the
start we we have the OS C++ team so any

00:07:54.900 --> 00:07:54.910
start we we have the OS C++ team so any
 

00:07:54.910 --> 00:07:56.340
start we we have the OS C++ team so any
kind of problem that you guys are having

00:07:56.340 --> 00:07:56.350
kind of problem that you guys are having
 

00:07:56.350 --> 00:07:58.590
kind of problem that you guys are having
in apps we've been having in the RS

00:07:58.590 --> 00:07:58.600
in apps we've been having in the RS
 

00:07:58.600 --> 00:08:01.920
in apps we've been having in the RS
itself for a long time typically we've

00:08:01.920 --> 00:08:01.930
itself for a long time typically we've
 

00:08:01.930 --> 00:08:07.050
itself for a long time typically we've
used a SAN for this we've this is a new

00:08:07.050 --> 00:08:07.060
used a SAN for this we've this is a new
 

00:08:07.060 --> 00:08:09.150
used a SAN for this we've this is a new
hardware accelerated a SAN and hopefully

00:08:09.150 --> 00:08:09.160
hardware accelerated a SAN and hopefully
 

00:08:09.160 --> 00:08:10.310
hardware accelerated a SAN and hopefully
we'll talk about that some other time

00:08:10.310 --> 00:08:10.320
we'll talk about that some other time
 

00:08:10.320 --> 00:08:12.780
we'll talk about that some other time
but right now Isan is kind of the state

00:08:12.780 --> 00:08:12.790
but right now Isan is kind of the state
 

00:08:12.790 --> 00:08:13.920
but right now Isan is kind of the state
of the art for this it's what we're

00:08:13.920 --> 00:08:13.930
of the art for this it's what we're
 

00:08:13.930 --> 00:08:16.440
of the art for this it's what we're
using for the platform and what we're

00:08:16.440 --> 00:08:16.450
using for the platform and what we're
 

00:08:16.450 --> 00:08:18.420
using for the platform and what we're
going to talk about today is how you can

00:08:18.420 --> 00:08:18.430
going to talk about today is how you can
 

00:08:18.430 --> 00:08:21.270
going to talk about today is how you can
use this in the NDK it is supported in

00:08:21.270 --> 00:08:21.280
use this in the NDK it is supported in
 

00:08:21.280 --> 00:08:23.910
use this in the NDK it is supported in
the NDK it's just perhaps less well

00:08:23.910 --> 00:08:23.920
the NDK it's just perhaps less well
 

00:08:23.920 --> 00:08:27.720
the NDK it's just perhaps less well
known so these are the kind of issues

00:08:27.720 --> 00:08:27.730
known so these are the kind of issues
 

00:08:27.730 --> 00:08:29.280
known so these are the kind of issues
that a Tsang can find it's basically

00:08:29.280 --> 00:08:29.290
that a Tsang can find it's basically
 

00:08:29.290 --> 00:08:31.860
that a Tsang can find it's basically
everything except for leaks for leaks we

00:08:31.860 --> 00:08:31.870
everything except for leaks for leaks we
 

00:08:31.870 --> 00:08:34.230
everything except for leaks for leaks we
use now at debug you can find

00:08:34.230 --> 00:08:34.240
use now at debug you can find
 

00:08:34.240 --> 00:08:35.340
use now at debug you can find
documentation for that on

00:08:35.340 --> 00:08:35.350
documentation for that on
 

00:08:35.350 --> 00:08:37.140
documentation for that on
developer.android.com/design the same

00:08:37.140 --> 00:08:37.150
developer.android.com/design the same
 

00:08:37.150 --> 00:08:38.679
developer.android.com/design the same
place as the ACE and I can't

00:08:38.679 --> 00:08:38.689
place as the ACE and I can't
 

00:08:38.689 --> 00:08:40.689
place as the ACE and I can't
but the key thing I want to talk about

00:08:40.689 --> 00:08:40.699
but the key thing I want to talk about
 

00:08:40.699 --> 00:08:43.959
but the key thing I want to talk about
is this rap dat Sh so a semi Android is

00:08:43.959 --> 00:08:43.969
is this rap dat Sh so a semi Android is
 

00:08:43.969 --> 00:08:46.600
is this rap dat Sh so a semi Android is
interesting in that you the way it works

00:08:46.600 --> 00:08:46.610
interesting in that you the way it works
 

00:08:46.610 --> 00:08:48.609
interesting in that you the way it works
is that you have this LD preload this

00:08:48.609 --> 00:08:48.619
is that you have this LD preload this
 

00:08:48.619 --> 00:08:50.739
is that you have this LD preload this
shared library that has to get loaded

00:08:50.739 --> 00:08:50.749
shared library that has to get loaded
 

00:08:50.749 --> 00:08:53.079
shared library that has to get loaded
before your code starts basically it

00:08:53.079 --> 00:08:53.089
before your code starts basically it
 

00:08:53.089 --> 00:08:55.809
before your code starts basically it
intercepts all of the memory allocation

00:08:55.809 --> 00:08:55.819
intercepts all of the memory allocation
 

00:08:55.819 --> 00:08:58.989
intercepts all of the memory allocation
and freeing operations and to do that it

00:08:58.989 --> 00:08:58.999
and freeing operations and to do that it
 

00:08:58.999 --> 00:09:00.999
and freeing operations and to do that it
obviously needs to be running before any

00:09:00.999 --> 00:09:01.009
obviously needs to be running before any
 

00:09:01.009 --> 00:09:03.729
obviously needs to be running before any
allocations are actually made normally

00:09:03.729 --> 00:09:03.739
allocations are actually made normally
 

00:09:03.739 --> 00:09:05.079
allocations are actually made normally
this wouldn't be a problem but on

00:09:05.079 --> 00:09:05.089
this wouldn't be a problem but on
 

00:09:05.089 --> 00:09:07.569
this wouldn't be a problem but on
Android when your app starts you're not

00:09:07.569 --> 00:09:07.579
Android when your app starts you're not
 

00:09:07.579 --> 00:09:09.009
Android when your app starts you're not
actually starting from scratch you're

00:09:09.009 --> 00:09:09.019
actually starting from scratch you're
 

00:09:09.019 --> 00:09:11.169
actually starting from scratch you're
starting from a clone of the zygote

00:09:11.169 --> 00:09:11.179
starting from a clone of the zygote
 

00:09:11.179 --> 00:09:13.900
starting from a clone of the zygote
which you know it's it's generally

00:09:13.900 --> 00:09:13.910
which you know it's it's generally
 

00:09:13.910 --> 00:09:16.419
which you know it's it's generally
helpful if you know it reduces your app

00:09:16.419 --> 00:09:16.429
helpful if you know it reduces your app
 

00:09:16.429 --> 00:09:19.359
helpful if you know it reduces your app
startup time greatly because the kind of

00:09:19.359 --> 00:09:19.369
startup time greatly because the kind of
 

00:09:19.369 --> 00:09:21.400
startup time greatly because the kind of
common startup that every upward have to

00:09:21.400 --> 00:09:21.410
common startup that every upward have to
 

00:09:21.410 --> 00:09:22.929
common startup that every upward have to
do with all the framework stuff has

00:09:22.929 --> 00:09:22.939
do with all the framework stuff has
 

00:09:22.939 --> 00:09:24.639
do with all the framework stuff has
already happened if you want more

00:09:24.639 --> 00:09:24.649
already happened if you want more
 

00:09:24.649 --> 00:09:26.710
already happened if you want more
details about this like out the art

00:09:26.710 --> 00:09:26.720
details about this like out the art
 

00:09:26.720 --> 00:09:28.299
details about this like out the art
folks are going to begin a talk tomorrow

00:09:28.299 --> 00:09:28.309
folks are going to begin a talk tomorrow
 

00:09:28.309 --> 00:09:30.549
folks are going to begin a talk tomorrow
morning where they'll be talking about

00:09:30.549 --> 00:09:30.559
morning where they'll be talking about
 

00:09:30.559 --> 00:09:32.799
morning where they'll be talking about
some of the new optimizations they've

00:09:32.799 --> 00:09:32.809
some of the new optimizations they've
 

00:09:32.809 --> 00:09:34.299
some of the new optimizations they've
done to that in queue but for our

00:09:34.299 --> 00:09:34.309
done to that in queue but for our
 

00:09:34.309 --> 00:09:36.669
done to that in queue but for our
purposes all you need to know is this

00:09:36.669 --> 00:09:36.679
purposes all you need to know is this
 

00:09:36.679 --> 00:09:39.340
purposes all you need to know is this
kind of gets in your way for ASAP so

00:09:39.340 --> 00:09:39.350
kind of gets in your way for ASAP so
 

00:09:39.350 --> 00:09:41.379
kind of gets in your way for ASAP so
what we added was a thing where if you

00:09:41.379 --> 00:09:41.389
what we added was a thing where if you
 

00:09:41.389 --> 00:09:44.079
what we added was a thing where if you
have a shell script in your apk called

00:09:44.079 --> 00:09:44.089
have a shell script in your apk called
 

00:09:44.089 --> 00:09:46.079
have a shell script in your apk called
wrap dot SH and in the correct directory

00:09:46.079 --> 00:09:46.089
wrap dot SH and in the correct directory
 

00:09:46.089 --> 00:09:49.150
wrap dot SH and in the correct directory
when we come to launch when the zygote

00:09:49.150 --> 00:09:49.160
when we come to launch when the zygote
 

00:09:49.160 --> 00:09:51.939
when we come to launch when the zygote
comes to launch your app instead of four

00:09:51.939 --> 00:09:51.949
comes to launch your app instead of four
 

00:09:51.949 --> 00:09:53.619
comes to launch your app instead of four
instead of cloning what's already there

00:09:53.619 --> 00:09:53.629
instead of cloning what's already there
 

00:09:53.629 --> 00:09:55.359
instead of cloning what's already there
it actually starts completely from

00:09:55.359 --> 00:09:55.369
it actually starts completely from
 

00:09:55.369 --> 00:10:00.549
it actually starts completely from
scratch so here's an example of what

00:10:00.549 --> 00:10:00.559
scratch so here's an example of what
 

00:10:00.559 --> 00:10:02.169
scratch so here's an example of what
such as shell script could look like

00:10:02.169 --> 00:10:02.179
such as shell script could look like
 

00:10:02.179 --> 00:10:05.019
such as shell script could look like
so dollar commercial at is basically

00:10:05.019 --> 00:10:05.029
so dollar commercial at is basically
 

00:10:05.029 --> 00:10:07.539
so dollar commercial at is basically
shell for all the arguments so what's

00:10:07.539 --> 00:10:07.549
shell for all the arguments so what's
 

00:10:07.549 --> 00:10:10.749
shell for all the arguments so what's
happening here is when we when this when

00:10:10.749 --> 00:10:10.759
happening here is when we when this when
 

00:10:10.759 --> 00:10:13.539
happening here is when we when this when
Android calls your app daughter's age it

00:10:13.539 --> 00:10:13.549
Android calls your app daughter's age it
 

00:10:13.549 --> 00:10:15.789
Android calls your app daughter's age it
gives you the exact command line that it

00:10:15.789 --> 00:10:15.799
gives you the exact command line that it
 

00:10:15.799 --> 00:10:18.939
gives you the exact command line that it
would otherwise have have run so here

00:10:18.939 --> 00:10:18.949
would otherwise have have run so here
 

00:10:18.949 --> 00:10:20.530
would otherwise have have run so here
we're just saying do what you would have

00:10:20.530 --> 00:10:20.540
we're just saying do what you would have
 

00:10:20.540 --> 00:10:22.179
we're just saying do what you would have
done anyway so the only difference is

00:10:22.179 --> 00:10:22.189
done anyway so the only difference is
 

00:10:22.189 --> 00:10:24.220
done anyway so the only difference is
you're in a completely fresh process

00:10:24.220 --> 00:10:24.230
you're in a completely fresh process
 

00:10:24.230 --> 00:10:26.729
you're in a completely fresh process
you're not clone from the zygote and

00:10:26.729 --> 00:10:26.739
you're not clone from the zygote and
 

00:10:26.739 --> 00:10:28.869
you're not clone from the zygote and
anything that you output to standard

00:10:28.869 --> 00:10:28.879
anything that you output to standard
 

00:10:28.879 --> 00:10:30.549
anything that you output to standard
output or standard error will go to the

00:10:30.549 --> 00:10:30.559
output or standard error will go to the
 

00:10:30.559 --> 00:10:32.949
output or standard error will go to the
log it'll go to logcat rather than just

00:10:32.949 --> 00:10:32.959
log it'll go to logcat rather than just
 

00:10:32.959 --> 00:10:34.809
log it'll go to logcat rather than just
being lost like it normally would again

00:10:34.809 --> 00:10:34.819
being lost like it normally would again
 

00:10:34.819 --> 00:10:35.979
being lost like it normally would again
because the assumption is you're

00:10:35.979 --> 00:10:35.989
because the assumption is you're
 

00:10:35.989 --> 00:10:38.309
because the assumption is you're
debugging here you want to see anything

00:10:38.309 --> 00:10:38.319
debugging here you want to see anything
 

00:10:38.319 --> 00:10:42.519
debugging here you want to see anything
so here's a slightly more interesting

00:10:42.519 --> 00:10:42.529
so here's a slightly more interesting
 

00:10:42.529 --> 00:10:48.429
so here's a slightly more interesting
version then this is saying so the a-sun

00:10:48.429 --> 00:10:48.439
version then this is saying so the a-sun
 

00:10:48.439 --> 00:10:50.259
version then this is saying so the a-sun
options there's a link a couple of

00:10:50.259 --> 00:10:50.269
options there's a link a couple of
 

00:10:50.269 --> 00:10:51.620
options there's a link a couple of
slides ago

00:10:51.620 --> 00:10:51.630
slides ago
 

00:10:51.630 --> 00:10:52.730
slides ago
for all the details about the different

00:10:52.730 --> 00:10:52.740
for all the details about the different
 

00:10:52.740 --> 00:10:55.280
for all the details about the different
Asian options this is just an example of

00:10:55.280 --> 00:10:55.290
Asian options this is just an example of
 

00:10:55.290 --> 00:10:56.780
Asian options this is just an example of
like here are common options that you

00:10:56.780 --> 00:10:56.790
like here are common options that you
 

00:10:56.790 --> 00:10:58.100
like here are common options that you
will want if you're using a Sun on

00:10:58.100 --> 00:10:58.110
will want if you're using a Sun on
 

00:10:58.110 --> 00:10:59.990
will want if you're using a Sun on
Android so that puts that into the

00:10:59.990 --> 00:11:00.000
Android so that puts that into the
 

00:11:00.000 --> 00:11:02.570
Android so that puts that into the
environment for when your app starts LD

00:11:02.570 --> 00:11:02.580
environment for when your app starts LD
 

00:11:02.580 --> 00:11:05.360
environment for when your app starts LD
preload like I said that that's a clue

00:11:05.360 --> 00:11:05.370
preload like I said that that's a clue
 

00:11:05.370 --> 00:11:07.370
preload like I said that that's a clue
to the dynamic linker when you start

00:11:07.370 --> 00:11:07.380
to the dynamic linker when you start
 

00:11:07.380 --> 00:11:09.910
to the dynamic linker when you start
this this app load this library first

00:11:09.910 --> 00:11:09.920
this this app load this library first
 

00:11:09.920 --> 00:11:12.890
this this app load this library first
and this is this is kind of the runtime

00:11:12.890 --> 00:11:12.900
and this is this is kind of the runtime
 

00:11:12.900 --> 00:11:16.850
and this is this is kind of the runtime
for it for a SAM NDK build knows about

00:11:16.850 --> 00:11:16.860
for it for a SAM NDK build knows about
 

00:11:16.860 --> 00:11:18.800
for it for a SAM NDK build knows about
this it'll do this magic for you there's

00:11:18.800 --> 00:11:18.810
this it'll do this magic for you there's
 

00:11:18.810 --> 00:11:20.570
this it'll do this magic for you there's
a little wrinkle with Studio at the

00:11:20.570 --> 00:11:20.580
a little wrinkle with Studio at the
 

00:11:20.580 --> 00:11:22.670
a little wrinkle with Studio at the
moment that we need to teach studio to

00:11:22.670 --> 00:11:22.680
moment that we need to teach studio to
 

00:11:22.680 --> 00:11:25.430
moment that we need to teach studio to
actually package this if you're not

00:11:25.430 --> 00:11:25.440
actually package this if you're not
 

00:11:25.440 --> 00:11:27.170
actually package this if you're not
using studio you don't really need to

00:11:27.170 --> 00:11:27.180
using studio you don't really need to
 

00:11:27.180 --> 00:11:29.600
using studio you don't really need to
anything if you do if you are definitely

00:11:29.600 --> 00:11:29.610
anything if you do if you are definitely
 

00:11:29.610 --> 00:11:33.800
anything if you do if you are definitely
go to developer.android.com/design

00:11:33.800 --> 00:11:33.810
 

00:11:33.810 --> 00:11:35.810
and we've got an example there that has

00:11:35.810 --> 00:11:35.820
and we've got an example there that has
 

00:11:35.820 --> 00:11:37.250
and we've got an example there that has
some screenshots of what you need to do

00:11:37.250 --> 00:11:37.260
some screenshots of what you need to do
 

00:11:37.260 --> 00:11:39.740
some screenshots of what you need to do
if you're using nd cable this is more

00:11:39.740 --> 00:11:39.750
if you're using nd cable this is more
 

00:11:39.750 --> 00:11:41.900
if you're using nd cable this is more
what it looks like in your Android or MK

00:11:41.900 --> 00:11:41.910
what it looks like in your Android or MK
 

00:11:41.910 --> 00:11:43.340
what it looks like in your Android or MK
file you literally just tell the

00:11:43.340 --> 00:11:43.350
file you literally just tell the
 

00:11:43.350 --> 00:11:45.440
file you literally just tell the
compiler please turn on address

00:11:45.440 --> 00:11:45.450
compiler please turn on address
 

00:11:45.450 --> 00:11:48.050
compiler please turn on address
sanitization the no Amit frame pointer

00:11:48.050 --> 00:11:48.060
sanitization the no Amit frame pointer
 

00:11:48.060 --> 00:11:50.630
sanitization the no Amit frame pointer
thing is so that you we can give you

00:11:50.630 --> 00:11:50.640
thing is so that you we can give you
 

00:11:50.640 --> 00:11:55.130
thing is so that you we can give you
good quick unwinds like I say if you do

00:11:55.130 --> 00:11:55.140
good quick unwinds like I say if you do
 

00:11:55.140 --> 00:11:57.410
good quick unwinds like I say if you do
this NDK build picks up on that it's

00:11:57.410 --> 00:11:57.420
this NDK build picks up on that it's
 

00:11:57.420 --> 00:11:59.570
this NDK build picks up on that it's
spots that you've said sanitized address

00:11:59.570 --> 00:11:59.580
spots that you've said sanitized address
 

00:11:59.580 --> 00:12:01.280
spots that you've said sanitized address
and it'll actually set up the right

00:12:01.280 --> 00:12:01.290
and it'll actually set up the right
 

00:12:01.290 --> 00:12:04.760
and it'll actually set up the right
dosage for you so like it's a lots more

00:12:04.760 --> 00:12:04.770
dosage for you so like it's a lots more
 

00:12:04.770 --> 00:12:06.380
dosage for you so like it's a lots more
documentation on that it is kind of

00:12:06.380 --> 00:12:06.390
documentation on that it is kind of
 

00:12:06.390 --> 00:12:08.000
documentation on that it is kind of
complicated but once you get the hang of

00:12:08.000 --> 00:12:08.010
complicated but once you get the hang of
 

00:12:08.010 --> 00:12:09.830
complicated but once you get the hang of
it it's it's it's not too bad there's

00:12:09.830 --> 00:12:09.840
it it's it's it's not too bad there's
 

00:12:09.840 --> 00:12:10.790
it it's it's it's not too bad there's
documentation about that on

00:12:10.790 --> 00:12:10.800
documentation about that on
 

00:12:10.800 --> 00:12:22.430
documentation about that on
developer.android.com/design the

00:12:22.430 --> 00:12:22.440
developer.android.com/design the
 

00:12:22.440 --> 00:12:25.460
developer.android.com/design the
platform has used this for since 2012 we

00:12:25.460 --> 00:12:25.470
platform has used this for since 2012 we
 

00:12:25.470 --> 00:12:27.290
platform has used this for since 2012 we
use this for a long time now but by

00:12:27.290 --> 00:12:27.300
use this for a long time now but by
 

00:12:27.300 --> 00:12:30.500
use this for a long time now but by
default NDK users aren't getting this if

00:12:30.500 --> 00:12:30.510
default NDK users aren't getting this if
 

00:12:30.510 --> 00:12:33.470
default NDK users aren't getting this if
you want us to catch easy sort of buffer

00:12:33.470 --> 00:12:33.480
you want us to catch easy sort of buffer
 

00:12:33.480 --> 00:12:34.400
you want us to catch easy sort of buffer
overrun bugs

00:12:34.400 --> 00:12:34.410
overrun bugs
 

00:12:34.410 --> 00:12:38.600
overrun bugs
if you define fortify source 2 2 again

00:12:38.600 --> 00:12:38.610
if you define fortify source 2 2 again
 

00:12:38.610 --> 00:12:40.430
if you define fortify source 2 2 again
you can look this up on the web for

00:12:40.430 --> 00:12:40.440
you can look this up on the web for
 

00:12:40.440 --> 00:12:42.890
you can look this up on the web for
details you define fortify source you

00:12:42.890 --> 00:12:42.900
details you define fortify source you
 

00:12:42.900 --> 00:12:45.230
details you define fortify source you
can actually have us behind the scenes

00:12:45.230 --> 00:12:45.240
can actually have us behind the scenes
 

00:12:45.240 --> 00:12:47.360
can actually have us behind the scenes
we will the compiler if it can do so

00:12:47.360 --> 00:12:47.370
we will the compiler if it can do so
 

00:12:47.370 --> 00:12:49.700
we will the compiler if it can do so
we'll prove at compile time that your

00:12:49.700 --> 00:12:49.710
we'll prove at compile time that your
 

00:12:49.710 --> 00:12:51.800
we'll prove at compile time that your
code is either correct or incorrect it

00:12:51.800 --> 00:12:51.810
code is either correct or incorrect it
 

00:12:51.810 --> 00:12:53.810
code is either correct or incorrect it
is incorrect it'll just spew out an

00:12:53.810 --> 00:12:53.820
is incorrect it'll just spew out an
 

00:12:53.820 --> 00:12:55.460
is incorrect it'll just spew out an
error and you can fix it there and then

00:12:55.460 --> 00:12:55.470
error and you can fix it there and then
 

00:12:55.470 --> 00:12:57.640
error and you can fix it there and then
if you can't prove it it'll actually

00:12:57.640 --> 00:12:57.650
if you can't prove it it'll actually
 

00:12:57.650 --> 00:13:00.260
if you can't prove it it'll actually
insert a call to a slightly different

00:13:00.260 --> 00:13:00.270
insert a call to a slightly different
 

00:13:00.270 --> 00:13:01.490
insert a call to a slightly different
routine that will do some runtime

00:13:01.490 --> 00:13:01.500
routine that will do some runtime
 

00:13:01.500 --> 00:13:03.800
routine that will do some runtime
checking so in this example this is

00:13:03.800 --> 00:13:03.810
checking so in this example this is
 

00:13:03.810 --> 00:13:05.060
checking so in this example this is
something

00:13:05.060 --> 00:13:05.070
something
 

00:13:05.070 --> 00:13:06.680
something
obviously very contrived but this is

00:13:06.680 --> 00:13:06.690
obviously very contrived but this is
 

00:13:06.690 --> 00:13:08.090
obviously very contrived but this is
something that the sort of static

00:13:08.090 --> 00:13:08.100
something that the sort of static
 

00:13:08.100 --> 00:13:10.190
something that the sort of static
analysis built into the compiler doesn't

00:13:10.190 --> 00:13:10.200
analysis built into the compiler doesn't
 

00:13:10.200 --> 00:13:12.140
analysis built into the compiler doesn't
actually spot it doesn't realize that

00:13:12.140 --> 00:13:12.150
actually spot it doesn't realize that
 

00:13:12.150 --> 00:13:14.390
actually spot it doesn't realize that
that 32 is going to be used as that

00:13:14.390 --> 00:13:14.400
that 32 is going to be used as that
 

00:13:14.400 --> 00:13:16.850
that 32 is going to be used as that
parameter to read so it turns us into a

00:13:16.850 --> 00:13:16.860
parameter to read so it turns us into a
 

00:13:16.860 --> 00:13:19.340
parameter to read so it turns us into a
runtime check and if that fails you then

00:13:19.340 --> 00:13:19.350
runtime check and if that fails you then
 

00:13:19.350 --> 00:13:22.520
runtime check and if that fails you then
get a nice clear abort and the abort

00:13:22.520 --> 00:13:22.530
get a nice clear abort and the abort
 

00:13:22.530 --> 00:13:24.320
get a nice clear abort and the abort
message will be along the line so if you

00:13:24.320 --> 00:13:24.330
message will be along the line so if you
 

00:13:24.330 --> 00:13:26.660
message will be along the line so if you
know fortify the specific function you

00:13:26.660 --> 00:13:26.670
know fortify the specific function you
 

00:13:26.670 --> 00:13:29.240
know fortify the specific function you
called and then what what you asked it

00:13:29.240 --> 00:13:29.250
called and then what what you asked it
 

00:13:29.250 --> 00:13:30.650
called and then what what you asked it
to do and what it thinks that the

00:13:30.650 --> 00:13:30.660
to do and what it thinks that the
 

00:13:30.660 --> 00:13:33.200
to do and what it thinks that the
current state of the world is similar to

00:13:33.200 --> 00:13:33.210
current state of the world is similar to
 

00:13:33.210 --> 00:13:34.970
current state of the world is similar to
that and even easier case we have a lot

00:13:34.970 --> 00:13:34.980
that and even easier case we have a lot
 

00:13:34.980 --> 00:13:37.940
that and even easier case we have a lot
of sort of app compat issues where you

00:13:37.940 --> 00:13:37.950
of sort of app compat issues where you
 

00:13:37.950 --> 00:13:41.360
of sort of app compat issues where you
know SELinux policies have changed or

00:13:41.360 --> 00:13:41.370
know SELinux policies have changed or
 

00:13:41.370 --> 00:13:42.980
know SELinux policies have changed or
permissions on some file have changed or

00:13:42.980 --> 00:13:42.990
permissions on some file have changed or
 

00:13:42.990 --> 00:13:44.870
permissions on some file have changed or
even the existence of a file has changed

00:13:44.870 --> 00:13:44.880
even the existence of a file has changed
 

00:13:44.880 --> 00:13:48.170
even the existence of a file has changed
but apps are assuming oh I just open

00:13:48.170 --> 00:13:48.180
but apps are assuming oh I just open
 

00:13:48.180 --> 00:13:49.790
but apps are assuming oh I just open
this file then I read from it and they

00:13:49.790 --> 00:13:49.800
this file then I read from it and they
 

00:13:49.800 --> 00:13:51.260
this file then I read from it and they
kind of plow on without actually

00:13:51.260 --> 00:13:51.270
kind of plow on without actually
 

00:13:51.270 --> 00:13:53.570
kind of plow on without actually
checking for errors so it's simple cases

00:13:53.570 --> 00:13:53.580
checking for errors so it's simple cases
 

00:13:53.580 --> 00:13:56.090
checking for errors so it's simple cases
like that where it's it's never valid to

00:13:56.090 --> 00:13:56.100
like that where it's it's never valid to
 

00:13:56.100 --> 00:13:58.820
like that where it's it's never valid to
give a null file pointer to any other

00:13:58.820 --> 00:13:58.830
give a null file pointer to any other
 

00:13:58.830 --> 00:14:01.220
give a null file pointer to any other
studio function so we will actually just

00:14:01.220 --> 00:14:01.230
studio function so we will actually just
 

00:14:01.230 --> 00:14:03.830
studio function so we will actually just
on recent builds we'll just blow you out

00:14:03.830 --> 00:14:03.840
on recent builds we'll just blow you out
 

00:14:03.840 --> 00:14:04.490
on recent builds we'll just blow you out
of the water

00:14:04.490 --> 00:14:04.500
of the water
 

00:14:04.500 --> 00:14:08.740
of the water
nice cleanable nice clean error message

00:14:08.740 --> 00:14:08.750
nice cleanable nice clean error message
 

00:14:08.750 --> 00:14:11.090
nice cleanable nice clean error message
another similar thing on on more recent

00:14:11.090 --> 00:14:11.100
another similar thing on on more recent
 

00:14:11.100 --> 00:14:12.860
another similar thing on on more recent
builds is that there's there's been a

00:14:12.860 --> 00:14:12.870
builds is that there's there's been a
 

00:14:12.870 --> 00:14:15.260
builds is that there's there's been a
lot of confusion about P thread T which

00:14:15.260 --> 00:14:15.270
lot of confusion about P thread T which
 

00:14:15.270 --> 00:14:17.210
lot of confusion about P thread T which
is what you get from pthread create and

00:14:17.210 --> 00:14:17.220
is what you get from pthread create and
 

00:14:17.220 --> 00:14:18.530
is what you get from pthread create and
you use with all the other P thread

00:14:18.530 --> 00:14:18.540
you use with all the other P thread
 

00:14:18.540 --> 00:14:20.840
you use with all the other P thread
functions and pip T which is basically

00:14:20.840 --> 00:14:20.850
functions and pip T which is basically
 

00:14:20.850 --> 00:14:23.090
functions and pip T which is basically
just the integer that the kernel users

00:14:23.090 --> 00:14:23.100
just the integer that the kernel users
 

00:14:23.100 --> 00:14:25.310
just the integer that the kernel users
for it's it's raw thread and you do

00:14:25.310 --> 00:14:25.320
for it's it's raw thread and you do
 

00:14:25.320 --> 00:14:27.020
for it's it's raw thread and you do
sometimes need to deal with both of

00:14:27.020 --> 00:14:27.030
sometimes need to deal with both of
 

00:14:27.030 --> 00:14:28.700
sometimes need to deal with both of
these depending on what your your app is

00:14:28.700 --> 00:14:28.710
these depending on what your your app is
 

00:14:28.710 --> 00:14:32.000
these depending on what your your app is
doing you can get a pity from a P thread

00:14:32.000 --> 00:14:32.010
doing you can get a pity from a P thread
 

00:14:32.010 --> 00:14:36.860
doing you can get a pity from a P thread
T there's a P thread getted NP function

00:14:36.860 --> 00:14:36.870
T there's a P thread getted NP function
 

00:14:36.870 --> 00:14:38.360
T there's a P thread getted NP function
that you can call so if you're using

00:14:38.360 --> 00:14:38.370
that you can call so if you're using
 

00:14:38.370 --> 00:14:40.580
that you can call so if you're using
some kind of low-level linux api that

00:14:40.580 --> 00:14:40.590
some kind of low-level linux api that
 

00:14:40.590 --> 00:14:43.010
some kind of low-level linux api that
requires a tid you can do that what you

00:14:43.010 --> 00:14:43.020
requires a tid you can do that what you
 

00:14:43.020 --> 00:14:46.130
requires a tid you can do that what you
can't do is you can't give a tid you

00:14:46.130 --> 00:14:46.140
can't do is you can't give a tid you
 

00:14:46.140 --> 00:14:48.200
can't do is you can't give a tid you
know a PID to one of the P thread

00:14:48.200 --> 00:14:48.210
know a PID to one of the P thread
 

00:14:48.210 --> 00:14:50.360
know a PID to one of the P thread
functions historically it would just

00:14:50.360 --> 00:14:50.370
functions historically it would just
 

00:14:50.370 --> 00:14:52.370
functions historically it would just
silently do nothing because it would

00:14:52.370 --> 00:14:52.380
silently do nothing because it would
 

00:14:52.380 --> 00:14:54.110
silently do nothing because it would
look on its list of current thread say

00:14:54.110 --> 00:14:54.120
look on its list of current thread say
 

00:14:54.120 --> 00:14:55.610
look on its list of current thread say
I've not heard of that that's not a

00:14:55.610 --> 00:14:55.620
I've not heard of that that's not a
 

00:14:55.620 --> 00:14:56.960
I've not heard of that that's not a
thread and do nothing

00:14:56.960 --> 00:14:56.970
thread and do nothing
 

00:14:56.970 --> 00:14:59.330
thread and do nothing
nowadays it actually catches this again

00:14:59.330 --> 00:14:59.340
nowadays it actually catches this again
 

00:14:59.340 --> 00:15:01.520
nowadays it actually catches this again
nice clear abort and tells you what

00:15:01.520 --> 00:15:01.530
nice clear abort and tells you what
 

00:15:01.530 --> 00:15:05.180
nice clear abort and tells you what
you've done usually this means if it's a

00:15:05.180 --> 00:15:05.190
you've done usually this means if it's a
 

00:15:05.190 --> 00:15:07.340
you've done usually this means if it's a
low number like this it means that

00:15:07.340 --> 00:15:07.350
low number like this it means that
 

00:15:07.350 --> 00:15:10.220
low number like this it means that
you've made this P thread and untipped

00:15:10.220 --> 00:15:10.230
you've made this P thread and untipped
 

00:15:10.230 --> 00:15:12.980
you've made this P thread and untipped
confusion if it's a high number that

00:15:12.980 --> 00:15:12.990
confusion if it's a high number that
 

00:15:12.990 --> 00:15:14.420
confusion if it's a high number that
means you've lost track of one of your

00:15:14.420 --> 00:15:14.430
means you've lost track of one of your
 

00:15:14.430 --> 00:15:16.550
means you've lost track of one of your
threads it's it's basically the thread

00:15:16.550 --> 00:15:16.560
threads it's it's basically the thread
 

00:15:16.560 --> 00:15:18.350
threads it's it's basically the thread
equivalent of like a double close or an

00:15:18.350 --> 00:15:18.360
equivalent of like a double close or an
 

00:15:18.360 --> 00:15:21.259
equivalent of like a double close or an
valid free those are often a bit harder

00:15:21.259 --> 00:15:21.269
valid free those are often a bit harder
 

00:15:21.269 --> 00:15:24.139
valid free those are often a bit harder
to debug something brand-new and cue

00:15:24.139 --> 00:15:24.149
to debug something brand-new and cue
 

00:15:24.149 --> 00:15:28.819
to debug something brand-new and cue
that that's new to Android is FD cents

00:15:28.819 --> 00:15:28.829
that that's new to Android is FD cents
 

00:15:28.829 --> 00:15:31.160
that that's new to Android is FD cents
so file descriptors it's what's behind

00:15:31.160 --> 00:15:31.170
so file descriptors it's what's behind
 

00:15:31.170 --> 00:15:33.920
so file descriptors it's what's behind
the scenes of like the studio file or

00:15:33.920 --> 00:15:33.930
the scenes of like the studio file or
 

00:15:33.930 --> 00:15:37.100
the scenes of like the studio file or
the other C++ file API is it's it's an

00:15:37.100 --> 00:15:37.110
the other C++ file API is it's it's an
 

00:15:37.110 --> 00:15:38.990
the other C++ file API is it's it's an
integer it's what the the Linux kernel

00:15:38.990 --> 00:15:39.000
integer it's what the the Linux kernel
 

00:15:39.000 --> 00:15:42.470
integer it's what the the Linux kernel
uses to represent an open file and it's

00:15:42.470 --> 00:15:42.480
uses to represent an open file and it's
 

00:15:42.480 --> 00:15:44.840
uses to represent an open file and it's
quite easy to to mess up the the

00:15:44.840 --> 00:15:44.850
quite easy to to mess up the the
 

00:15:44.850 --> 00:15:47.000
quite easy to to mess up the the
ownership of these and what's really

00:15:47.000 --> 00:15:47.010
ownership of these and what's really
 

00:15:47.010 --> 00:15:49.040
ownership of these and what's really
unfortunate is that the kernel does a

00:15:49.040 --> 00:15:49.050
unfortunate is that the kernel does a
 

00:15:49.050 --> 00:15:51.889
unfortunate is that the kernel does a
kind of first fit allocation so if you

00:15:51.889 --> 00:15:51.899
kind of first fit allocation so if you
 

00:15:51.899 --> 00:15:54.500
kind of first fit allocation so if you
allocate five files and then you close

00:15:54.500 --> 00:15:54.510
allocate five files and then you close
 

00:15:54.510 --> 00:15:56.990
allocate five files and then you close
one and open another you'll get that

00:15:56.990 --> 00:15:57.000
one and open another you'll get that
 

00:15:57.000 --> 00:15:59.269
one and open another you'll get that
same number reused so it's really hard

00:15:59.269 --> 00:15:59.279
same number reused so it's really hard
 

00:15:59.279 --> 00:16:02.030
same number reused so it's really hard
to debug these so what we've done we've

00:16:02.030 --> 00:16:02.040
to debug these so what we've done we've
 

00:16:02.040 --> 00:16:03.800
to debug these so what we've done we've
actually added tracking for this to the

00:16:03.800 --> 00:16:03.810
actually added tracking for this to the
 

00:16:03.810 --> 00:16:05.930
actually added tracking for this to the
C library the link at the bottom

00:16:05.930 --> 00:16:05.940
C library the link at the bottom
 

00:16:05.940 --> 00:16:07.790
C library the link at the bottom
explains how if you've got sort of

00:16:07.790 --> 00:16:07.800
explains how if you've got sort of
 

00:16:07.800 --> 00:16:10.220
explains how if you've got sort of
higher level classes that that control

00:16:10.220 --> 00:16:10.230
higher level classes that that control
 

00:16:10.230 --> 00:16:12.019
higher level classes that that control
some resources that have file

00:16:12.019 --> 00:16:12.029
some resources that have file
 

00:16:12.029 --> 00:16:13.910
some resources that have file
descriptors you can actually take part

00:16:13.910 --> 00:16:13.920
descriptors you can actually take part
 

00:16:13.920 --> 00:16:16.610
descriptors you can actually take part
in this but we've wired up the basic

00:16:16.610 --> 00:16:16.620
in this but we've wired up the basic
 

00:16:16.620 --> 00:16:18.829
in this but we've wired up the basic
classes the basics trucks things like

00:16:18.829 --> 00:16:18.839
classes the basics trucks things like
 

00:16:18.839 --> 00:16:22.009
classes the basics trucks things like
file instead i/o so that you you know

00:16:22.009 --> 00:16:22.019
file instead i/o so that you you know
 

00:16:22.019 --> 00:16:23.470
file instead i/o so that you you know
this example on the slide for example

00:16:23.470 --> 00:16:23.480
this example on the slide for example
 

00:16:23.480 --> 00:16:26.180
this example on the slide for example
this is a real bug that we actually had

00:16:26.180 --> 00:16:26.190
this is a real bug that we actually had
 

00:16:26.190 --> 00:16:28.340
this is a real bug that we actually had
in Android that was found by this

00:16:28.340 --> 00:16:28.350
in Android that was found by this
 

00:16:28.350 --> 00:16:30.110
in Android that was found by this
obviously the real one was spread over

00:16:30.110 --> 00:16:30.120
obviously the real one was spread over
 

00:16:30.120 --> 00:16:32.509
obviously the real one was spread over
multiple files and hundreds of lines but

00:16:32.509 --> 00:16:32.519
multiple files and hundreds of lines but
 

00:16:32.519 --> 00:16:34.939
multiple files and hundreds of lines but
it boils down to this that now is a nice

00:16:34.939 --> 00:16:34.949
it boils down to this that now is a nice
 

00:16:34.949 --> 00:16:37.280
it boils down to this that now is a nice
clear abort well there's actually two

00:16:37.280 --> 00:16:37.290
clear abort well there's actually two
 

00:16:37.290 --> 00:16:38.990
clear abort well there's actually two
modes again see the documentation you

00:16:38.990 --> 00:16:39.000
modes again see the documentation you
 

00:16:39.000 --> 00:16:40.819
modes again see the documentation you
can either but by default at the moment

00:16:40.819 --> 00:16:40.829
can either but by default at the moment
 

00:16:40.829 --> 00:16:43.550
can either but by default at the moment
it just logs if it finds an issue and

00:16:43.550 --> 00:16:43.560
it just logs if it finds an issue and
 

00:16:43.560 --> 00:16:45.350
it just logs if it finds an issue and
then lets you carry on so it preserves

00:16:45.350 --> 00:16:45.360
then lets you carry on so it preserves
 

00:16:45.360 --> 00:16:47.740
then lets you carry on so it preserves
that kind of backward buggy behavior

00:16:47.740 --> 00:16:47.750
that kind of backward buggy behavior
 

00:16:47.750 --> 00:16:49.670
that kind of backward buggy behavior
hopefully in future will actually make

00:16:49.670 --> 00:16:49.680
hopefully in future will actually make
 

00:16:49.680 --> 00:16:51.380
hopefully in future will actually make
that fully enforcing but you can do that

00:16:51.380 --> 00:16:51.390
that fully enforcing but you can do that
 

00:16:51.390 --> 00:16:55.009
that fully enforcing but you can do that
yourself in the meantime so unwinding

00:16:55.009 --> 00:16:55.019
yourself in the meantime so unwinding
 

00:16:55.019 --> 00:16:57.350
yourself in the meantime so unwinding
this is whenever you have a crash you've

00:16:57.350 --> 00:16:57.360
this is whenever you have a crash you've
 

00:16:57.360 --> 00:16:59.000
this is whenever you have a crash you've
seen the sort of stacks that you get

00:16:59.000 --> 00:16:59.010
seen the sort of stacks that you get
 

00:16:59.010 --> 00:17:02.180
seen the sort of stacks that you get
from that this is you know behind the

00:17:02.180 --> 00:17:02.190
from that this is you know behind the
 

00:17:02.190 --> 00:17:03.439
from that this is you know behind the
scenes as a piece of code called the

00:17:03.439 --> 00:17:03.449
scenes as a piece of code called the
 

00:17:03.449 --> 00:17:05.150
scenes as a piece of code called the
unwinder which is basically just

00:17:05.150 --> 00:17:05.160
unwinder which is basically just
 

00:17:05.160 --> 00:17:07.250
unwinder which is basically just
crawling up your stack working out what

00:17:07.250 --> 00:17:07.260
crawling up your stack working out what
 

00:17:07.260 --> 00:17:11.569
crawling up your stack working out what
called what in the past that really it

00:17:11.569 --> 00:17:11.579
called what in the past that really it
 

00:17:11.579 --> 00:17:13.850
called what in the past that really it
worked fine for sins he plus plus but it

00:17:13.850 --> 00:17:13.860
worked fine for sins he plus plus but it
 

00:17:13.860 --> 00:17:16.880
worked fine for sins he plus plus but it
kind of fell apart when it hit Java so

00:17:16.880 --> 00:17:16.890
kind of fell apart when it hit Java so
 

00:17:16.890 --> 00:17:19.010
kind of fell apart when it hit Java so
one thing we've done more recently we've

00:17:19.010 --> 00:17:19.020
one thing we've done more recently we've
 

00:17:19.020 --> 00:17:20.569
one thing we've done more recently we've
we've written a completely new online

00:17:20.569 --> 00:17:20.579
we've written a completely new online
 

00:17:20.579 --> 00:17:22.579
we've written a completely new online
der and the major feature of that is

00:17:22.579 --> 00:17:22.589
der and the major feature of that is
 

00:17:22.589 --> 00:17:24.169
der and the major feature of that is
that it actually understands Java and

00:17:24.169 --> 00:17:24.179
that it actually understands Java and
 

00:17:24.179 --> 00:17:26.059
that it actually understands Java and
Kotlin frames it doesn't matter whether

00:17:26.059 --> 00:17:26.069
Kotlin frames it doesn't matter whether
 

00:17:26.069 --> 00:17:27.949
Kotlin frames it doesn't matter whether
they're ahead of time compile jittered

00:17:27.949 --> 00:17:27.959
they're ahead of time compile jittered
 

00:17:27.959 --> 00:17:30.020
they're ahead of time compile jittered
or interpreted it'll do the right thing

00:17:30.020 --> 00:17:30.030
or interpreted it'll do the right thing
 

00:17:30.030 --> 00:17:32.549
or interpreted it'll do the right thing
in queue we've added a few extra

00:17:32.549 --> 00:17:32.559
in queue we've added a few extra
 

00:17:32.559 --> 00:17:35.970
in queue we've added a few extra
little tricks elf build IDs are useful

00:17:35.970 --> 00:17:35.980
little tricks elf build IDs are useful
 

00:17:35.980 --> 00:17:38.220
little tricks elf build IDs are useful
every every object file every executable

00:17:38.220 --> 00:17:38.230
every every object file every executable
 

00:17:38.230 --> 00:17:40.950
every every object file every executable
you have has a has a hash encoded in it

00:17:40.950 --> 00:17:40.960
you have has a has a hash encoded in it
 

00:17:40.960 --> 00:17:43.320
you have has a has a hash encoded in it
will actually show those hashes in queue

00:17:43.320 --> 00:17:43.330
will actually show those hashes in queue
 

00:17:43.330 --> 00:17:46.230
will actually show those hashes in queue
so that you can if you sometimes you're

00:17:46.230 --> 00:17:46.240
so that you can if you sometimes you're
 

00:17:46.240 --> 00:17:47.850
so that you can if you sometimes you're
not sure like is this is this really the

00:17:47.850 --> 00:17:47.860
not sure like is this is this really the
 

00:17:47.860 --> 00:17:49.440
not sure like is this is this really the
were they running the right version of

00:17:49.440 --> 00:17:49.450
were they running the right version of
 

00:17:49.450 --> 00:17:50.850
were they running the right version of
the code I think they were running on my

00:17:50.850 --> 00:17:50.860
the code I think they were running on my
 

00:17:50.860 --> 00:17:52.620
the code I think they were running on my
debugging against the wrong thing you

00:17:52.620 --> 00:17:52.630
debugging against the wrong thing you
 

00:17:52.630 --> 00:17:55.019
debugging against the wrong thing you
can you can check that out so here's an

00:17:55.019 --> 00:17:55.029
can you can check that out so here's an
 

00:17:55.029 --> 00:17:56.490
can you can check that out so here's an
example of what the stacks used to look

00:17:56.490 --> 00:17:56.500
example of what the stacks used to look
 

00:17:56.500 --> 00:17:59.370
example of what the stacks used to look
like you know the blue parts the C++

00:17:59.370 --> 00:17:59.380
like you know the blue parts the C++
 

00:17:59.380 --> 00:18:02.159
like you know the blue parts the C++
that that used to work fine but as soon

00:18:02.159 --> 00:18:02.169
that that used to work fine but as soon
 

00:18:02.169 --> 00:18:03.930
that that used to work fine but as soon
as we'd hit Java we'd basically stop

00:18:03.930 --> 00:18:03.940
as we'd hit Java we'd basically stop
 

00:18:03.940 --> 00:18:08.159
as we'd hit Java we'd basically stop
because the way Java the way the art

00:18:08.159 --> 00:18:08.169
because the way Java the way the art
 

00:18:08.169 --> 00:18:10.620
because the way Java the way the art
runtime maintains its stack is very

00:18:10.620 --> 00:18:10.630
runtime maintains its stack is very
 

00:18:10.630 --> 00:18:13.769
runtime maintains its stack is very
different in P and Q we've actually

00:18:13.769 --> 00:18:13.779
different in P and Q we've actually
 

00:18:13.779 --> 00:18:15.779
different in P and Q we've actually
taught it about that so this is the kind

00:18:15.779 --> 00:18:15.789
taught it about that so this is the kind
 

00:18:15.789 --> 00:18:17.970
taught it about that so this is the kind
of stack you'll get these days it

00:18:17.970 --> 00:18:17.980
of stack you'll get these days it
 

00:18:17.980 --> 00:18:19.230
of stack you'll get these days it
doesn't even matter whether it's

00:18:19.230 --> 00:18:19.240
doesn't even matter whether it's
 

00:18:19.240 --> 00:18:21.029
doesn't even matter whether it's
interpreted or jittered we'll just do

00:18:21.029 --> 00:18:21.039
interpreted or jittered we'll just do
 

00:18:21.039 --> 00:18:23.700
interpreted or jittered we'll just do
the right thing we even have if you have

00:18:23.700 --> 00:18:23.710
the right thing we even have if you have
 

00:18:23.710 --> 00:18:26.279
the right thing we even have if you have
your own JIT we actually use the same

00:18:26.279 --> 00:18:26.289
your own JIT we actually use the same
 

00:18:26.289 --> 00:18:30.240
your own JIT we actually use the same
kind of API behind the scenes but the

00:18:30.240 --> 00:18:30.250
kind of API behind the scenes but the
 

00:18:30.250 --> 00:18:32.580
kind of API behind the scenes but the
things like gdb use for this so you can

00:18:32.580 --> 00:18:32.590
things like gdb use for this so you can
 

00:18:32.590 --> 00:18:36.149
things like gdb use for this so you can
actually tell us about your own jets as

00:18:36.149 --> 00:18:36.159
actually tell us about your own jets as
 

00:18:36.159 --> 00:18:39.060
actually tell us about your own jets as
well what can you do when you have a

00:18:39.060 --> 00:18:39.070
well what can you do when you have a
 

00:18:39.070 --> 00:18:41.279
well what can you do when you have a
good online der profiling is an obvious

00:18:41.279 --> 00:18:41.289
good online der profiling is an obvious
 

00:18:41.289 --> 00:18:46.230
good online der profiling is an obvious
thing that comes to mind in NDK r-13 we

00:18:46.230 --> 00:18:46.240
thing that comes to mind in NDK r-13 we
 

00:18:46.240 --> 00:18:48.600
thing that comes to mind in NDK r-13 we
shipped a thing called simple perf this

00:18:48.600 --> 00:18:48.610
shipped a thing called simple perf this
 

00:18:48.610 --> 00:18:50.549
shipped a thing called simple perf this
is basically like the Linux perf tool

00:18:50.549 --> 00:18:50.559
is basically like the Linux perf tool
 

00:18:50.559 --> 00:18:52.820
is basically like the Linux perf tool
it's a command-line tool you can use

00:18:52.820 --> 00:18:52.830
it's a command-line tool you can use
 

00:18:52.830 --> 00:18:55.169
it's a command-line tool you can use
it's useful and it was certainly useful

00:18:55.169 --> 00:18:55.179
it's useful and it was certainly useful
 

00:18:55.179 --> 00:18:57.870
it's useful and it was certainly useful
for the OS people not so useful for app

00:18:57.870 --> 00:18:57.880
for the OS people not so useful for app
 

00:18:57.880 --> 00:18:59.840
for the OS people not so useful for app
developers because you can't generally

00:18:59.840 --> 00:18:59.850
developers because you can't generally
 

00:18:59.850 --> 00:19:02.549
developers because you can't generally
you know run your app whenever you want

00:19:02.549 --> 00:19:02.559
you know run your app whenever you want
 

00:19:02.559 --> 00:19:06.779
you know run your app whenever you want
so one thing that we did as a sort of

00:19:06.779 --> 00:19:06.789
so one thing that we did as a sort of
 

00:19:06.789 --> 00:19:09.720
so one thing that we did as a sort of
stopgap was we added a a tool to give

00:19:09.720 --> 00:19:09.730
stopgap was we added a a tool to give
 

00:19:09.730 --> 00:19:12.240
stopgap was we added a a tool to give
you sort of HTML flame graphs that you

00:19:12.240 --> 00:19:12.250
you sort of HTML flame graphs that you
 

00:19:12.250 --> 00:19:13.350
you sort of HTML flame graphs that you
could then see in the browser but

00:19:13.350 --> 00:19:13.360
could then see in the browser but
 

00:19:13.360 --> 00:19:14.850
could then see in the browser but
obviously the real aim was the GUI

00:19:14.850 --> 00:19:14.860
obviously the real aim was the GUI
 

00:19:14.860 --> 00:19:18.269
obviously the real aim was the GUI
profiler hopefully you saw that the this

00:19:18.269 --> 00:19:18.279
profiler hopefully you saw that the this
 

00:19:18.279 --> 00:19:20.039
profiler hopefully you saw that the this
was released in studio three you want it

00:19:20.039 --> 00:19:20.049
was released in studio three you want it
 

00:19:20.049 --> 00:19:21.840
was released in studio three you want it
was mentioned in the studio blogpost and

00:19:21.840 --> 00:19:21.850
was mentioned in the studio blogpost and
 

00:19:21.850 --> 00:19:23.279
was mentioned in the studio blogpost and
hopefully you've tried that if you

00:19:23.279 --> 00:19:23.289
hopefully you've tried that if you
 

00:19:23.289 --> 00:19:25.350
hopefully you've tried that if you
haven't that might actually be worth

00:19:25.350 --> 00:19:25.360
haven't that might actually be worth
 

00:19:25.360 --> 00:19:26.970
haven't that might actually be worth
switching to studio so you can try that

00:19:26.970 --> 00:19:26.980
switching to studio so you can try that
 

00:19:26.980 --> 00:19:29.100
switching to studio so you can try that
so this is what the command line looks

00:19:29.100 --> 00:19:29.110
so this is what the command line looks
 

00:19:29.110 --> 00:19:31.230
so this is what the command line looks
like basically the same if anyone's

00:19:31.230 --> 00:19:31.240
like basically the same if anyone's
 

00:19:31.240 --> 00:19:32.519
like basically the same if anyone's
familiar with the linkspurr tool it's

00:19:32.519 --> 00:19:32.529
familiar with the linkspurr tool it's
 

00:19:32.529 --> 00:19:34.350
familiar with the linkspurr tool it's
basically the same there's these

00:19:34.350 --> 00:19:34.360
basically the same there's these
 

00:19:34.360 --> 00:19:36.750
basically the same there's these
separate record record and report steps

00:19:36.750 --> 00:19:36.760
separate record record and report steps
 

00:19:36.760 --> 00:19:38.730
separate record record and report steps
we also support annotation if you

00:19:38.730 --> 00:19:38.740
we also support annotation if you
 

00:19:38.740 --> 00:19:40.680
we also support annotation if you
actually want to see you know right down

00:19:40.680 --> 00:19:40.690
actually want to see you know right down
 

00:19:40.690 --> 00:19:42.389
actually want to see you know right down
to the assembler level where was my code

00:19:42.389 --> 00:19:42.399
to the assembler level where was my code
 

00:19:42.399 --> 00:19:44.940
to the assembler level where was my code
you can't connect to existing processes

00:19:44.940 --> 00:19:44.950
you can't connect to existing processes
 

00:19:44.950 --> 00:19:45.690
you can't connect to existing processes
but

00:19:45.690 --> 00:19:45.700
but
 

00:19:45.700 --> 00:19:47.250
but
again the easiest way to do that is just

00:19:47.250 --> 00:19:47.260
again the easiest way to do that is just
 

00:19:47.260 --> 00:19:49.980
again the easiest way to do that is just
use studios the studio UI is the picture

00:19:49.980 --> 00:19:49.990
use studios the studio UI is the picture
 

00:19:49.990 --> 00:19:51.509
use studios the studio UI is the picture
in the foreground picture in the

00:19:51.509 --> 00:19:51.519
in the foreground picture in the
 

00:19:51.519 --> 00:19:53.190
in the foreground picture in the
background is the sort of HTML thing we

00:19:53.190 --> 00:19:53.200
background is the sort of HTML thing we
 

00:19:53.200 --> 00:19:56.940
background is the sort of HTML thing we
have so now we will talk about some of

00:19:56.940 --> 00:19:56.950
have so now we will talk about some of
 

00:19:56.950 --> 00:19:59.730
have so now we will talk about some of
the things that people hit either when

00:19:59.730 --> 00:19:59.740
the things that people hit either when
 

00:19:59.740 --> 00:20:02.250
the things that people hit either when
switching to you know from GCC to clan

00:20:02.250 --> 00:20:02.260
switching to you know from GCC to clan
 

00:20:02.260 --> 00:20:06.899
switching to you know from GCC to clan
or from new STL to Lib C++ or just in

00:20:06.899 --> 00:20:06.909
or from new STL to Lib C++ or just in
 

00:20:06.909 --> 00:20:09.629
or from new STL to Lib C++ or just in
fact in terms of upgrading between

00:20:09.629 --> 00:20:09.639
fact in terms of upgrading between
 

00:20:09.639 --> 00:20:13.440
fact in terms of upgrading between
different versions of the NDK so this

00:20:13.440 --> 00:20:13.450
different versions of the NDK so this
 

00:20:13.450 --> 00:20:15.840
different versions of the NDK so this
was a very common issue we saw when

00:20:15.840 --> 00:20:15.850
was a very common issue we saw when
 

00:20:15.850 --> 00:20:17.220
was a very common issue we saw when
people were updating to the unified

00:20:17.220 --> 00:20:17.230
people were updating to the unified
 

00:20:17.230 --> 00:20:20.759
people were updating to the unified
headers you would update and something

00:20:20.759 --> 00:20:20.769
headers you would update and something
 

00:20:20.769 --> 00:20:22.019
headers you would update and something
your code would no longer compile

00:20:22.019 --> 00:20:22.029
your code would no longer compile
 

00:20:22.029 --> 00:20:24.299
your code would no longer compile
because some function that really ought

00:20:24.299 --> 00:20:24.309
because some function that really ought
 

00:20:24.309 --> 00:20:26.310
because some function that really ought
to be there was missing really common

00:20:26.310 --> 00:20:26.320
to be there was missing really common
 

00:20:26.320 --> 00:20:28.639
to be there was missing really common
case for this was M map just disappeared

00:20:28.639 --> 00:20:28.649
case for this was M map just disappeared
 

00:20:28.649 --> 00:20:31.590
case for this was M map just disappeared
the reason for this was that Bionic

00:20:31.590 --> 00:20:31.600
the reason for this was that Bionic
 

00:20:31.600 --> 00:20:33.690
the reason for this was that Bionic
supports this feature called file offset

00:20:33.690 --> 00:20:33.700
supports this feature called file offset
 

00:20:33.700 --> 00:20:36.450
supports this feature called file offset
bits it allows you to specify that you

00:20:36.450 --> 00:20:36.460
bits it allows you to specify that you
 

00:20:36.460 --> 00:20:38.460
bits it allows you to specify that you
want a 64 bit off T so you can deal with

00:20:38.460 --> 00:20:38.470
want a 64 bit off T so you can deal with
 

00:20:38.470 --> 00:20:42.149
want a 64 bit off T so you can deal with
files larger than two gigabytes this was

00:20:42.149 --> 00:20:42.159
files larger than two gigabytes this was
 

00:20:42.159 --> 00:20:44.490
files larger than two gigabytes this was
a feature that wasn't in older n decays

00:20:44.490 --> 00:20:44.500
a feature that wasn't in older n decays
 

00:20:44.500 --> 00:20:47.220
a feature that wasn't in older n decays
so if you set file offset bits when you

00:20:47.220 --> 00:20:47.230
so if you set file offset bits when you
 

00:20:47.230 --> 00:20:50.159
so if you set file offset bits when you
were using an older NDK nothing happened

00:20:50.159 --> 00:20:50.169
were using an older NDK nothing happened
 

00:20:50.169 --> 00:20:52.620
were using an older NDK nothing happened
it's failed silently you got no

00:20:52.620 --> 00:20:52.630
it's failed silently you got no
 

00:20:52.630 --> 00:20:54.450
it's failed silently you got no
indication that nothing happened and it

00:20:54.450 --> 00:20:54.460
indication that nothing happened and it
 

00:20:54.460 --> 00:20:57.269
indication that nothing happened and it
moved on when you then upgraded you were

00:20:57.269 --> 00:20:57.279
moved on when you then upgraded you were
 

00:20:57.279 --> 00:21:00.029
moved on when you then upgraded you were
getting this feature and if you asked

00:21:00.029 --> 00:21:00.039
getting this feature and if you asked
 

00:21:00.039 --> 00:21:01.620
getting this feature and if you asked
for it before it was actually available

00:21:01.620 --> 00:21:01.630
for it before it was actually available
 

00:21:01.630 --> 00:21:03.539
for it before it was actually available
your build would fail

00:21:03.539 --> 00:21:03.549
your build would fail
 

00:21:03.549 --> 00:21:05.310
your build would fail
fortunately the fix for this is

00:21:05.310 --> 00:21:05.320
fortunately the fix for this is
 

00:21:05.320 --> 00:21:07.889
fortunately the fix for this is
extremely easy if all you want is the

00:21:07.889 --> 00:21:07.899
extremely easy if all you want is the
 

00:21:07.899 --> 00:21:09.450
extremely easy if all you want is the
old behavior back grep through your

00:21:09.450 --> 00:21:09.460
old behavior back grep through your
 

00:21:09.460 --> 00:21:11.310
old behavior back grep through your
project find the line that says file

00:21:11.310 --> 00:21:11.320
project find the line that says file
 

00:21:11.320 --> 00:21:13.440
project find the line that says file
offset bits it'll be in either one of

00:21:13.440 --> 00:21:13.450
offset bits it'll be in either one of
 

00:21:13.450 --> 00:21:15.360
offset bits it'll be in either one of
your build scripts or possibly in one of

00:21:15.360 --> 00:21:15.370
your build scripts or possibly in one of
 

00:21:15.370 --> 00:21:17.700
your build scripts or possibly in one of
your source files just delete that line

00:21:17.700 --> 00:21:17.710
your source files just delete that line
 

00:21:17.710 --> 00:21:18.870
your source files just delete that line
everything will be back to the way it

00:21:18.870 --> 00:21:18.880
everything will be back to the way it
 

00:21:18.880 --> 00:21:21.960
everything will be back to the way it
was if you do need a large file support

00:21:21.960 --> 00:21:21.970
was if you do need a large file support
 

00:21:21.970 --> 00:21:25.039
was if you do need a large file support
the answer is a bit more complicated

00:21:25.039 --> 00:21:25.049
the answer is a bit more complicated
 

00:21:25.049 --> 00:21:27.029
the answer is a bit more complicated
essentially you need to figure out what

00:21:27.029 --> 00:21:27.039
essentially you need to figure out what
 

00:21:27.039 --> 00:21:28.649
essentially you need to figure out what
your ministy K version is what you're

00:21:28.649 --> 00:21:28.659
your ministy K version is what you're
 

00:21:28.659 --> 00:21:30.149
your ministy K version is what you're
okay with your min SDK version being

00:21:30.149 --> 00:21:30.159
okay with your min SDK version being
 

00:21:30.159 --> 00:21:32.419
okay with your min SDK version being
which subsets the API is you need

00:21:32.419 --> 00:21:32.429
which subsets the API is you need
 

00:21:32.429 --> 00:21:34.259
which subsets the API is you need
fortunate this is really well documented

00:21:34.259 --> 00:21:34.269
fortunate this is really well documented
 

00:21:34.269 --> 00:21:37.019
fortunate this is really well documented
the dock length there you can search on

00:21:37.019 --> 00:21:37.029
the dock length there you can search on
 

00:21:37.029 --> 00:21:38.430
the dock length there you can search on
our bug tracker if you have more

00:21:38.430 --> 00:21:38.440
our bug tracker if you have more
 

00:21:38.440 --> 00:21:39.810
our bug tracker if you have more
questions just file a bug we're happy to

00:21:39.810 --> 00:21:39.820
questions just file a bug we're happy to
 

00:21:39.820 --> 00:21:45.060
questions just file a bug we're happy to
help so I think probably everyone who

00:21:45.060 --> 00:21:45.070
help so I think probably everyone who
 

00:21:45.070 --> 00:21:47.639
help so I think probably everyone who
has native code has seen this you know

00:21:47.639 --> 00:21:47.649
has native code has seen this you know
 

00:21:47.649 --> 00:21:50.460
has native code has seen this you know
you you run your new version of your apk

00:21:50.460 --> 00:21:50.470
you you run your new version of your apk
 

00:21:50.470 --> 00:21:54.419
you you run your new version of your apk
you get an unsatisfied linker we had

00:21:54.419 --> 00:21:54.429
you get an unsatisfied linker we had
 

00:21:54.429 --> 00:21:56.250
you get an unsatisfied linker we had
this ourselves on the platform so we

00:21:56.250 --> 00:21:56.260
this ourselves on the platform so we
 

00:21:56.260 --> 00:22:00.790
this ourselves on the platform so we
have debugging information in there

00:22:00.790 --> 00:22:00.800
 

00:22:00.800 --> 00:22:02.530
if you set this property you don't need

00:22:02.530 --> 00:22:02.540
if you set this property you don't need
 

00:22:02.540 --> 00:22:03.940
if you set this property you don't need
a rooted device for this debug

00:22:03.940 --> 00:22:03.950
a rooted device for this debug
 

00:22:03.950 --> 00:22:05.200
a rooted device for this debug
properties you can set

00:22:05.200 --> 00:22:05.210
properties you can set
 

00:22:05.210 --> 00:22:07.660
properties you can set
regardless you can actually turn on the

00:22:07.660 --> 00:22:07.670
regardless you can actually turn on the
 

00:22:07.670 --> 00:22:10.330
regardless you can actually turn on the
full login from the from the dynamic

00:22:10.330 --> 00:22:10.340
full login from the from the dynamic
 

00:22:10.340 --> 00:22:11.820
full login from the from the dynamic
linker itself it'll tell you everything

00:22:11.820 --> 00:22:11.830
linker itself it'll tell you everything
 

00:22:11.830 --> 00:22:14.590
linker itself it'll tell you everything
every file it considers and they'll tell

00:22:14.590 --> 00:22:14.600
every file it considers and they'll tell
 

00:22:14.600 --> 00:22:16.420
every file it considers and they'll tell
you why it didn't open it so rather than

00:22:16.420 --> 00:22:16.430
you why it didn't open it so rather than
 

00:22:16.430 --> 00:22:18.910
you why it didn't open it so rather than
just kind of this short DL error message

00:22:18.910 --> 00:22:18.920
just kind of this short DL error message
 

00:22:18.920 --> 00:22:21.040
just kind of this short DL error message
that you get in the unsatisfied link

00:22:21.040 --> 00:22:21.050
that you get in the unsatisfied link
 

00:22:21.050 --> 00:22:23.170
that you get in the unsatisfied link
error if you really want to see the full

00:22:23.170 --> 00:22:23.180
error if you really want to see the full
 

00:22:23.180 --> 00:22:25.960
error if you really want to see the full
information you can here no example of

00:22:25.960 --> 00:22:25.970
information you can here no example of
 

00:22:25.970 --> 00:22:29.820
information you can here no example of
this because it is just far too verbose

00:22:29.820 --> 00:22:29.830
 

00:22:29.830 --> 00:22:32.110
another common issue you'll run into

00:22:32.110 --> 00:22:32.120
another common issue you'll run into
 

00:22:32.120 --> 00:22:33.940
another common issue you'll run into
particularly while updating to a new

00:22:33.940 --> 00:22:33.950
particularly while updating to a new
 

00:22:33.950 --> 00:22:36.880
particularly while updating to a new
compiler or switching switching between

00:22:36.880 --> 00:22:36.890
compiler or switching switching between
 

00:22:36.890 --> 00:22:38.350
compiler or switching switching between
different types of compilers or even

00:22:38.350 --> 00:22:38.360
different types of compilers or even
 

00:22:38.360 --> 00:22:39.820
different types of compilers or even
just to a new version of the compiler is

00:22:39.820 --> 00:22:39.830
just to a new version of the compiler is
 

00:22:39.830 --> 00:22:42.940
just to a new version of the compiler is
undefined behavior C++ is full of

00:22:42.940 --> 00:22:42.950
undefined behavior C++ is full of
 

00:22:42.950 --> 00:22:46.110
undefined behavior C++ is full of
undefined behavior it's very exciting

00:22:46.110 --> 00:22:46.120
undefined behavior it's very exciting
 

00:22:46.120 --> 00:22:48.580
undefined behavior it's very exciting
this can just lead to all sorts of

00:22:48.580 --> 00:22:48.590
this can just lead to all sorts of
 

00:22:48.590 --> 00:22:50.290
this can just lead to all sorts of
surprising behaviors in your application

00:22:50.290 --> 00:22:50.300
surprising behaviors in your application
 

00:22:50.300 --> 00:22:52.330
surprising behaviors in your application
so fortunately clang gives you a really

00:22:52.330 --> 00:22:52.340
so fortunately clang gives you a really
 

00:22:52.340 --> 00:22:54.580
so fortunately clang gives you a really
good tool to try to sort out these

00:22:54.580 --> 00:22:54.590
good tool to try to sort out these
 

00:22:54.590 --> 00:22:56.880
good tool to try to sort out these
issues it's undefined behavior sanitizer

00:22:56.880 --> 00:22:56.890
issues it's undefined behavior sanitizer
 

00:22:56.890 --> 00:22:59.080
issues it's undefined behavior sanitizer
like with a SAN you can enable this

00:22:59.080 --> 00:22:59.090
like with a SAN you can enable this
 

00:22:59.090 --> 00:23:02.680
like with a SAN you can enable this
quite simply in your android make if you

00:23:02.680 --> 00:23:02.690
quite simply in your android make if you
 

00:23:02.690 --> 00:23:05.130
quite simply in your android make if you
add these flags instead of just

00:23:05.130 --> 00:23:05.140
add these flags instead of just
 

00:23:05.140 --> 00:23:07.060
add these flags instead of just
unpredictable behavior at runtime you

00:23:07.060 --> 00:23:07.070
unpredictable behavior at runtime you
 

00:23:07.070 --> 00:23:09.910
unpredictable behavior at runtime you
will get a nice stack trace and a crash

00:23:09.910 --> 00:23:09.920
will get a nice stack trace and a crash
 

00:23:09.920 --> 00:23:12.430
will get a nice stack trace and a crash
in logcat that explains what went wrong

00:23:12.430 --> 00:23:12.440
in logcat that explains what went wrong
 

00:23:12.440 --> 00:23:15.070
in logcat that explains what went wrong
and where it went wrong this is also

00:23:15.070 --> 00:23:15.080
and where it went wrong this is also
 

00:23:15.080 --> 00:23:16.450
and where it went wrong this is also
extremely useful for a security

00:23:16.450 --> 00:23:16.460
extremely useful for a security
 

00:23:16.460 --> 00:23:19.480
extremely useful for a security
conscious code it is much better to just

00:23:19.480 --> 00:23:19.490
conscious code it is much better to just
 

00:23:19.490 --> 00:23:22.870
conscious code it is much better to just
stop and restart rather than continue

00:23:22.870 --> 00:23:22.880
stop and restart rather than continue
 

00:23:22.880 --> 00:23:27.250
stop and restart rather than continue
into unpredictable behavior for security

00:23:27.250 --> 00:23:27.260
into unpredictable behavior for security
 

00:23:27.260 --> 00:23:29.560
into unpredictable behavior for security
reasons we actually ship with this on in

00:23:29.560 --> 00:23:29.570
reasons we actually ship with this on in
 

00:23:29.570 --> 00:23:31.660
reasons we actually ship with this on in
the platform for some modules things

00:23:31.660 --> 00:23:31.670
the platform for some modules things
 

00:23:31.670 --> 00:23:33.400
the platform for some modules things
like stage fright for example back in

00:23:33.400 --> 00:23:33.410
like stage fright for example back in
 

00:23:33.410 --> 00:23:36.760
like stage fright for example back in
Nellore m whenever that was undefined

00:23:36.760 --> 00:23:36.770
Nellore m whenever that was undefined
 

00:23:36.770 --> 00:23:38.470
Nellore m whenever that was undefined
behavior sanitizer was the only tool we

00:23:38.470 --> 00:23:38.480
behavior sanitizer was the only tool we
 

00:23:38.480 --> 00:23:40.150
behavior sanitizer was the only tool we
had that could actually catch that bug

00:23:40.150 --> 00:23:40.160
had that could actually catch that bug
 

00:23:40.160 --> 00:23:43.810
had that could actually catch that bug
and so we now keep that on as a

00:23:43.810 --> 00:23:43.820
and so we now keep that on as a
 

00:23:43.820 --> 00:23:50.530
and so we now keep that on as a
mitigation right so one thing that also

00:23:50.530 --> 00:23:50.540
mitigation right so one thing that also
 

00:23:50.540 --> 00:23:51.850
mitigation right so one thing that also
caused trouble for people who was

00:23:51.850 --> 00:23:51.860
caused trouble for people who was
 

00:23:51.860 --> 00:23:53.590
caused trouble for people who was
switching from GCC to clang is the clang

00:23:53.590 --> 00:23:53.600
switching from GCC to clang is the clang
 

00:23:53.600 --> 00:23:56.740
switching from GCC to clang is the clang
is a lot fuzzier about assembler this

00:23:56.740 --> 00:23:56.750
is a lot fuzzier about assembler this
 

00:23:56.750 --> 00:23:58.990
is a lot fuzzier about assembler this
example there are four different

00:23:58.990 --> 00:23:59.000
example there are four different
 

00:23:59.000 --> 00:24:01.000
example there are four different
instructions so that might be it's

00:24:01.000 --> 00:24:01.010
instructions so that might be it's
 

00:24:01.010 --> 00:24:02.950
instructions so that might be it's
probably obvious to a human which one

00:24:02.950 --> 00:24:02.960
probably obvious to a human which one
 

00:24:02.960 --> 00:24:05.140
probably obvious to a human which one
that they meant but client refuses to

00:24:05.140 --> 00:24:05.150
that they meant but client refuses to
 

00:24:05.150 --> 00:24:08.470
that they meant but client refuses to
guess GCC would just guess the

00:24:08.470 --> 00:24:08.480
guess GCC would just guess the
 

00:24:08.480 --> 00:24:10.360
guess GCC would just guess the
workaround if you if you don't have time

00:24:10.360 --> 00:24:10.370
workaround if you if you don't have time
 

00:24:10.370 --> 00:24:12.310
workaround if you if you don't have time
to to work on this right now and you

00:24:12.310 --> 00:24:12.320
to to work on this right now and you
 

00:24:12.320 --> 00:24:12.669
to to work on this right now and you
just want to

00:24:12.669 --> 00:24:12.679
just want to
 

00:24:12.679 --> 00:24:14.320
just want to
get on with your life after no

00:24:14.320 --> 00:24:14.330
get on with your life after no
 

00:24:14.330 --> 00:24:16.690
get on with your life after no
integrated AAS that lets you use the

00:24:16.690 --> 00:24:16.700
integrated AAS that lets you use the
 

00:24:16.700 --> 00:24:18.850
integrated AAS that lets you use the
binutils assembler behind the scenes so

00:24:18.850 --> 00:24:18.860
binutils assembler behind the scenes so
 

00:24:18.860 --> 00:24:21.100
binutils assembler behind the scenes so
you'll get the existing behavior we

00:24:21.100 --> 00:24:21.110
you'll get the existing behavior we
 

00:24:21.110 --> 00:24:22.749
you'll get the existing behavior we
actually move forward and fixed all of

00:24:22.749 --> 00:24:22.759
actually move forward and fixed all of
 

00:24:22.759 --> 00:24:25.629
actually move forward and fixed all of
the ambiguities in our code the easy

00:24:25.629 --> 00:24:25.639
the ambiguities in our code the easy
 

00:24:25.639 --> 00:24:29.909
the ambiguities in our code the easy
trick for doing that is just use option

00:24:29.909 --> 00:24:29.919
 

00:24:29.919 --> 00:24:32.560
another common problem you will go and

00:24:32.560 --> 00:24:32.570
another common problem you will go and
 

00:24:32.570 --> 00:24:34.840
another common problem you will go and
update your SDK it will update the NDK

00:24:34.840 --> 00:24:34.850
update your SDK it will update the NDK
 

00:24:34.850 --> 00:24:36.039
update your SDK it will update the NDK
with it and now your build is broken

00:24:36.039 --> 00:24:36.049
with it and now your build is broken
 

00:24:36.049 --> 00:24:37.450
with it and now your build is broken
because your Gradle plug-in didn't

00:24:37.450 --> 00:24:37.460
because your Gradle plug-in didn't
 

00:24:37.460 --> 00:24:41.230
because your Gradle plug-in didn't
upgrade there are a handful of

00:24:41.230 --> 00:24:41.240
upgrade there are a handful of
 

00:24:41.240 --> 00:24:42.730
upgrade there are a handful of
assumptions that the Gradle plug-in will

00:24:42.730 --> 00:24:42.740
assumptions that the Gradle plug-in will
 

00:24:42.740 --> 00:24:44.680
assumptions that the Gradle plug-in will
make about how old the NDK is structured

00:24:44.680 --> 00:24:44.690
make about how old the NDK is structured
 

00:24:44.690 --> 00:24:46.960
make about how old the NDK is structured
we are doing everything we can to remove

00:24:46.960 --> 00:24:46.970
we are doing everything we can to remove
 

00:24:46.970 --> 00:24:49.930
we are doing everything we can to remove
those where possible but fortunately

00:24:49.930 --> 00:24:49.940
those where possible but fortunately
 

00:24:49.940 --> 00:24:52.060
those where possible but fortunately
there's another really easy fix for this

00:24:52.060 --> 00:24:52.070
there's another really easy fix for this
 

00:24:52.070 --> 00:24:54.399
there's another really easy fix for this
problem out in beta earlier today with

00:24:54.399 --> 00:24:54.409
problem out in beta earlier today with
 

00:24:54.409 --> 00:24:56.859
problem out in beta earlier today with
Studio 3/5 you can actually specify your

00:24:56.859 --> 00:24:56.869
Studio 3/5 you can actually specify your
 

00:24:56.869 --> 00:24:58.989
Studio 3/5 you can actually specify your
NDK version in your build.gradle right

00:24:58.989 --> 00:24:58.999
NDK version in your build.gradle right
 

00:24:58.999 --> 00:25:00.820
NDK version in your build.gradle right
alongside your Gradle plugin version

00:25:00.820 --> 00:25:00.830
alongside your Gradle plugin version
 

00:25:00.830 --> 00:25:02.590
alongside your Gradle plugin version
that way these two things remain in

00:25:02.590 --> 00:25:02.600
that way these two things remain in
 

00:25:02.600 --> 00:25:04.119
that way these two things remain in
lockstep you upgrade them at the same

00:25:04.119 --> 00:25:04.129
lockstep you upgrade them at the same
 

00:25:04.129 --> 00:25:06.669
lockstep you upgrade them at the same
time everything will be fine again that

00:25:06.669 --> 00:25:06.679
time everything will be fine again that
 

00:25:06.679 --> 00:25:09.310
time everything will be fine again that
is Gradle 3.5 plug-in so you will need

00:25:09.310 --> 00:25:09.320
is Gradle 3.5 plug-in so you will need
 

00:25:09.320 --> 00:25:11.409
is Gradle 3.5 plug-in so you will need
that first but from then on you're

00:25:11.409 --> 00:25:11.419
that first but from then on you're
 

00:25:11.419 --> 00:25:13.960
that first but from then on you're
covered this also lets you install

00:25:13.960 --> 00:25:13.970
covered this also lets you install
 

00:25:13.970 --> 00:25:16.539
covered this also lets you install
multiple versions with a NDK easily so

00:25:16.539 --> 00:25:16.549
multiple versions with a NDK easily so
 

00:25:16.549 --> 00:25:17.980
multiple versions with a NDK easily so
if you are working on multiple projects

00:25:17.980 --> 00:25:17.990
if you are working on multiple projects
 

00:25:17.990 --> 00:25:19.149
if you are working on multiple projects
and you need different versions of the

00:25:19.149 --> 00:25:19.159
and you need different versions of the
 

00:25:19.159 --> 00:25:21.070
and you need different versions of the
NDK for each one because the project

00:25:21.070 --> 00:25:21.080
NDK for each one because the project
 

00:25:21.080 --> 00:25:23.109
NDK for each one because the project
started at different times that's now

00:25:23.109 --> 00:25:23.119
started at different times that's now
 

00:25:23.119 --> 00:25:28.690
started at different times that's now
nice and easy to do so hopefully you

00:25:28.690 --> 00:25:28.700
nice and easy to do so hopefully you
 

00:25:28.700 --> 00:25:30.369
nice and easy to do so hopefully you
already read the blog posts that we've

00:25:30.369 --> 00:25:30.379
already read the blog posts that we've
 

00:25:30.379 --> 00:25:31.930
already read the blog posts that we've
had over the past couple of years about

00:25:31.930 --> 00:25:31.940
had over the past couple of years about
 

00:25:31.940 --> 00:25:34.659
had over the past couple of years about
the move to 64-bit and the requirement

00:25:34.659 --> 00:25:34.669
the move to 64-bit and the requirement
 

00:25:34.669 --> 00:25:39.159
the move to 64-bit and the requirement
that everybody supports it the main

00:25:39.159 --> 00:25:39.169
that everybody supports it the main
 

00:25:39.169 --> 00:25:40.930
that everybody supports it the main
thing we want to talk to you about today

00:25:40.930 --> 00:25:40.940
thing we want to talk to you about today
 

00:25:40.940 --> 00:25:44.019
thing we want to talk to you about today
is just some tips so we had this problem

00:25:44.019 --> 00:25:44.029
is just some tips so we had this problem
 

00:25:44.029 --> 00:25:47.080
is just some tips so we had this problem
back in lollipop like my team we

00:25:47.080 --> 00:25:47.090
back in lollipop like my team we
 

00:25:47.090 --> 00:25:49.119
back in lollipop like my team we
basically spent the entire year fixing

00:25:49.119 --> 00:25:49.129
basically spent the entire year fixing
 

00:25:49.129 --> 00:25:50.859
basically spent the entire year fixing
all the code all these 32-bit

00:25:50.859 --> 00:25:50.869
all the code all these 32-bit
 

00:25:50.869 --> 00:25:53.830
all the code all these 32-bit
assumptions for those of you who are

00:25:53.830 --> 00:25:53.840
assumptions for those of you who are
 

00:25:53.840 --> 00:25:56.109
assumptions for those of you who are
already running the same code on iOS you

00:25:56.109 --> 00:25:56.119
already running the same code on iOS you
 

00:25:56.119 --> 00:25:57.039
already running the same code on iOS you
shouldn't have a problem you've already

00:25:57.039 --> 00:25:57.049
shouldn't have a problem you've already
 

00:25:57.049 --> 00:25:58.779
shouldn't have a problem you've already
been through this transition for those

00:25:58.779 --> 00:25:58.789
been through this transition for those
 

00:25:58.789 --> 00:26:01.210
been through this transition for those
of you aren't the main thing that that

00:26:01.210 --> 00:26:01.220
of you aren't the main thing that that
 

00:26:01.220 --> 00:26:06.310
of you aren't the main thing that that
caused trouble for us was J&amp;I code so

00:26:06.310 --> 00:26:06.320
caused trouble for us was J&amp;I code so
 

00:26:06.320 --> 00:26:07.810
caused trouble for us was J&amp;I code so
places where you have a Java class that

00:26:07.810 --> 00:26:07.820
places where you have a Java class that
 

00:26:07.820 --> 00:26:10.029
places where you have a Java class that
has some kind of native peer that was

00:26:10.029 --> 00:26:10.039
has some kind of native peer that was
 

00:26:10.039 --> 00:26:12.279
has some kind of native peer that was
all using Jayant for us so we had to go

00:26:12.279 --> 00:26:12.289
all using Jayant for us so we had to go
 

00:26:12.289 --> 00:26:14.320
all using Jayant for us so we had to go
through and catch all of those these

00:26:14.320 --> 00:26:14.330
through and catch all of those these
 

00:26:14.330 --> 00:26:17.139
through and catch all of those these
warnings and this actually turns these

00:26:17.139 --> 00:26:17.149
warnings and this actually turns these
 

00:26:17.149 --> 00:26:19.409
warnings and this actually turns these
warnings on and then makes some errors

00:26:19.409 --> 00:26:19.419
warnings on and then makes some errors
 

00:26:19.419 --> 00:26:22.450
warnings on and then makes some errors
this was completely necessary for us to

00:26:22.450 --> 00:26:22.460
this was completely necessary for us to
 

00:26:22.460 --> 00:26:24.520
this was completely necessary for us to
fix the platform

00:26:24.520 --> 00:26:24.530
fix the platform
 

00:26:24.530 --> 00:26:26.440
fix the platform
these catch places where you're

00:26:26.440 --> 00:26:26.450
these catch places where you're
 

00:26:26.450 --> 00:26:29.380
these catch places where you're
converting a 32 bit int to and from a

00:26:29.380 --> 00:26:29.390
converting a 32 bit int to and from a
 

00:26:29.390 --> 00:26:32.350
converting a 32 bit int to and from a
pointer a trickier one a less obvious

00:26:32.350 --> 00:26:32.360
pointer a trickier one a less obvious
 

00:26:32.360 --> 00:26:34.960
pointer a trickier one a less obvious
one is implicit function declarations

00:26:34.960 --> 00:26:34.970
one is implicit function declarations
 

00:26:34.970 --> 00:26:38.590
one is implicit function declarations
will hurt you as well because the the

00:26:38.590 --> 00:26:38.600
will hurt you as well because the the
 

00:26:38.600 --> 00:26:40.540
will hurt you as well because the the
old K and our assumption is that if you

00:26:40.540 --> 00:26:40.550
old K and our assumption is that if you
 

00:26:40.550 --> 00:26:43.030
old K and our assumption is that if you
don't tell the compiler what the type of

00:26:43.030 --> 00:26:43.040
don't tell the compiler what the type of
 

00:26:43.040 --> 00:26:45.370
don't tell the compiler what the type of
a function is the assumption is that it

00:26:45.370 --> 00:26:45.380
a function is the assumption is that it
 

00:26:45.380 --> 00:26:48.070
a function is the assumption is that it
returns int which means 32 bits which

00:26:48.070 --> 00:26:48.080
returns int which means 32 bits which
 

00:26:48.080 --> 00:26:49.870
returns int which means 32 bits which
means it'll truncate your pointer so in

00:26:49.870 --> 00:26:49.880
means it'll truncate your pointer so in
 

00:26:49.880 --> 00:26:53.080
means it'll truncate your pointer so in
this example foo actually returns a char

00:26:53.080 --> 00:26:53.090
this example foo actually returns a char
 

00:26:53.090 --> 00:26:55.420
this example foo actually returns a char
star we didn't tell the compiler that we

00:26:55.420 --> 00:26:55.430
star we didn't tell the compiler that we
 

00:26:55.430 --> 00:26:57.310
star we didn't tell the compiler that we
ignored its warning about the implicit

00:26:57.310 --> 00:26:57.320
ignored its warning about the implicit
 

00:26:57.320 --> 00:26:59.260
ignored its warning about the implicit
function declaration and it said fine

00:26:59.260 --> 00:26:59.270
function declaration and it said fine
 

00:26:59.270 --> 00:27:02.010
function declaration and it said fine
I'll just drop those top 32 bits and

00:27:02.010 --> 00:27:02.020
I'll just drop those top 32 bits and
 

00:27:02.020 --> 00:27:03.940
I'll just drop those top 32 bits and
obviously that doesn't go well at run

00:27:03.940 --> 00:27:03.950
obviously that doesn't go well at run
 

00:27:03.950 --> 00:27:05.680
obviously that doesn't go well at run
time so that's the that's the thing to

00:27:05.680 --> 00:27:05.690
time so that's the that's the thing to
 

00:27:05.690 --> 00:27:06.910
time so that's the that's the thing to
add to your build if you actually want

00:27:06.910 --> 00:27:06.920
add to your build if you actually want
 

00:27:06.920 --> 00:27:09.190
add to your build if you actually want
it the compiler to just say no this is

00:27:09.190 --> 00:27:09.200
it the compiler to just say no this is
 

00:27:09.200 --> 00:27:12.730
it the compiler to just say no this is
wrong I'm not going to do that so dance

00:27:12.730 --> 00:27:12.740
wrong I'm not going to do that so dance
 

00:27:12.740 --> 00:27:13.960
wrong I'm not going to do that so dance
now I'm going to talk about some of the

00:27:13.960 --> 00:27:13.970
now I'm going to talk about some of the
 

00:27:13.970 --> 00:27:15.640
now I'm going to talk about some of the
things that we're working on for the

00:27:15.640 --> 00:27:15.650
things that we're working on for the
 

00:27:15.650 --> 00:27:19.420
things that we're working on for the
near future yes so somewhat short term

00:27:19.420 --> 00:27:19.430
near future yes so somewhat short term
 

00:27:19.430 --> 00:27:21.640
near future yes so somewhat short term
on the roadmap we are looking into a new

00:27:21.640 --> 00:27:21.650
on the roadmap we are looking into a new
 

00:27:21.650 --> 00:27:23.530
on the roadmap we are looking into a new
linker right now we have B FD and we

00:27:23.530 --> 00:27:23.540
linker right now we have B FD and we
 

00:27:23.540 --> 00:27:26.650
linker right now we have B FD and we
have gold we are looking at all D for

00:27:26.650 --> 00:27:26.660
have gold we are looking at all D for
 

00:27:26.660 --> 00:27:30.220
have gold we are looking at all D for
the NDK we are already using LD for the

00:27:30.220 --> 00:27:30.230
the NDK we are already using LD for the
 

00:27:30.230 --> 00:27:34.000
the NDK we are already using LD for the
platform it for one is a lot faster for

00:27:34.000 --> 00:27:34.010
platform it for one is a lot faster for
 

00:27:34.010 --> 00:27:35.950
platform it for one is a lot faster for
something like linking the Linux kernel

00:27:35.950 --> 00:27:35.960
something like linking the Linux kernel
 

00:27:35.960 --> 00:27:38.230
something like linking the Linux kernel
it is actually twice as fast so instead

00:27:38.230 --> 00:27:38.240
it is actually twice as fast so instead
 

00:27:38.240 --> 00:27:39.880
it is actually twice as fast so instead
of a three-minute link step it is only a

00:27:39.880 --> 00:27:39.890
of a three-minute link step it is only a
 

00:27:39.890 --> 00:27:42.340
of a three-minute link step it is only a
minute and a half it is also a lot

00:27:42.340 --> 00:27:42.350
minute and a half it is also a lot
 

00:27:42.350 --> 00:27:45.640
minute and a half it is also a lot
better at detecting ODR violations and

00:27:45.640 --> 00:27:45.650
better at detecting ODR violations and
 

00:27:45.650 --> 00:27:47.230
better at detecting ODR violations and
reporting them in useful ways if you've

00:27:47.230 --> 00:27:47.240
reporting them in useful ways if you've
 

00:27:47.240 --> 00:27:48.550
reporting them in useful ways if you've
ever tried to debug one of those with

00:27:48.550 --> 00:27:48.560
ever tried to debug one of those with
 

00:27:48.560 --> 00:27:51.070
ever tried to debug one of those with
one of the other linkers it can be quite

00:27:51.070 --> 00:27:51.080
one of the other linkers it can be quite
 

00:27:51.080 --> 00:27:54.040
one of the other linkers it can be quite
a pain it's also got better support for

00:27:54.040 --> 00:27:54.050
a pain it's also got better support for
 

00:27:54.050 --> 00:27:55.930
a pain it's also got better support for
the newer clanging features LTO will

00:27:55.930 --> 00:27:55.940
the newer clanging features LTO will
 

00:27:55.940 --> 00:27:59.440
the newer clanging features LTO will
work better with LD this is already in

00:27:59.440 --> 00:27:59.450
work better with LD this is already in
 

00:27:59.450 --> 00:28:01.360
work better with LD this is already in
the NDK as an experimental feature it

00:28:01.360 --> 00:28:01.370
the NDK as an experimental feature it
 

00:28:01.370 --> 00:28:03.520
the NDK as an experimental feature it
has been for a release or two now it's

00:28:03.520 --> 00:28:03.530
has been for a release or two now it's
 

00:28:03.530 --> 00:28:05.050
has been for a release or two now it's
still got some rough edges in the

00:28:05.050 --> 00:28:05.060
still got some rough edges in the
 

00:28:05.060 --> 00:28:07.060
still got some rough edges in the
indicate particularly on Windows it

00:28:07.060 --> 00:28:07.070
indicate particularly on Windows it
 

00:28:07.070 --> 00:28:09.130
indicate particularly on Windows it
doesn't always work we are always

00:28:09.130 --> 00:28:09.140
doesn't always work we are always
 

00:28:09.140 --> 00:28:10.390
doesn't always work we are always
working on this I believe

00:28:10.390 --> 00:28:10.400
working on this I believe
 

00:28:10.400 --> 00:28:14.550
working on this I believe
r21 will have most of those issues fixed

00:28:14.550 --> 00:28:14.560
r21 will have most of those issues fixed
 

00:28:14.560 --> 00:28:18.460
r21 will have most of those issues fixed
however other cases it does work like I

00:28:18.460 --> 00:28:18.470
however other cases it does work like I
 

00:28:18.470 --> 00:28:20.320
however other cases it does work like I
said we are using this for the OS so it

00:28:20.320 --> 00:28:20.330
said we are using this for the OS so it
 

00:28:20.330 --> 00:28:22.900
said we are using this for the OS so it
does work in a good number of cases if

00:28:22.900 --> 00:28:22.910
does work in a good number of cases if
 

00:28:22.910 --> 00:28:25.360
does work in a good number of cases if
you are not impacted by any of the

00:28:25.360 --> 00:28:25.370
you are not impacted by any of the
 

00:28:25.370 --> 00:28:26.680
you are not impacted by any of the
existing bugs and you do want your

00:28:26.680 --> 00:28:26.690
existing bugs and you do want your
 

00:28:26.690 --> 00:28:29.110
existing bugs and you do want your
builds to be faster it is worth a shot

00:28:29.110 --> 00:28:29.120
builds to be faster it is worth a shot
 

00:28:29.120 --> 00:28:30.970
builds to be faster it is worth a shot
if you do encounter bugs please file

00:28:30.970 --> 00:28:30.980
if you do encounter bugs please file
 

00:28:30.980 --> 00:28:33.400
if you do encounter bugs please file
them this is still quite early for us

00:28:33.400 --> 00:28:33.410
them this is still quite early for us
 

00:28:33.410 --> 00:28:35.650
them this is still quite early for us
which is why there is no solid roadmap

00:28:35.650 --> 00:28:35.660
which is why there is no solid roadmap
 

00:28:35.660 --> 00:28:37.210
which is why there is no solid roadmap
here normally we would say you know

00:28:37.210 --> 00:28:37.220
here normally we would say you know
 

00:28:37.220 --> 00:28:39.490
here normally we would say you know
we're going to make this a default in

00:28:39.490 --> 00:28:39.500
we're going to make this a default in
 

00:28:39.500 --> 00:28:40.750
we're going to make this a default in
this release and then remove it in this

00:28:40.750 --> 00:28:40.760
this release and then remove it in this
 

00:28:40.760 --> 00:28:42.220
this release and then remove it in this
release we haven't made it to that point

00:28:42.220 --> 00:28:42.230
release we haven't made it to that point
 

00:28:42.230 --> 00:28:45.820
release we haven't made it to that point
yet but please do try it out if you get

00:28:45.820 --> 00:28:45.830
yet but please do try it out if you get
 

00:28:45.830 --> 00:28:51.310
yet but please do try it out if you get
a chance a larger task here is making it

00:28:51.310 --> 00:28:51.320
a chance a larger task here is making it
 

00:28:51.320 --> 00:28:52.990
a chance a larger task here is making it
easier to access third-party libraries

00:28:52.990 --> 00:28:53.000
easier to access third-party libraries
 

00:28:53.000 --> 00:28:55.330
easier to access third-party libraries
in your NDK applications we want

00:28:55.330 --> 00:28:55.340
in your NDK applications we want
 

00:28:55.340 --> 00:28:57.340
in your NDK applications we want
something as simple as just apt install

00:28:57.340 --> 00:28:57.350
something as simple as just apt install
 

00:28:57.350 --> 00:28:59.590
something as simple as just apt install
open SSL dev if you've ever tried

00:28:59.590 --> 00:28:59.600
open SSL dev if you've ever tried
 

00:28:59.600 --> 00:29:01.630
open SSL dev if you've ever tried
building that for Android it is quite a

00:29:01.630 --> 00:29:01.640
building that for Android it is quite a
 

00:29:01.640 --> 00:29:03.640
building that for Android it is quite a
hassle it does not use any of our

00:29:03.640 --> 00:29:03.650
hassle it does not use any of our
 

00:29:03.650 --> 00:29:05.080
hassle it does not use any of our
supported build systems so you have to

00:29:05.080 --> 00:29:05.090
supported build systems so you have to
 

00:29:05.090 --> 00:29:06.370
supported build systems so you have to
make their build system work with the

00:29:06.370 --> 00:29:06.380
make their build system work with the
 

00:29:06.380 --> 00:29:11.190
make their build system work with the
NDK it can be a hassle so we are

00:29:11.190 --> 00:29:11.200
NDK it can be a hassle so we are
 

00:29:11.200 --> 00:29:13.660
NDK it can be a hassle so we are
investigating a number of options to

00:29:13.660 --> 00:29:13.670
investigating a number of options to
 

00:29:13.670 --> 00:29:15.610
investigating a number of options to
make this easier for you so you can just

00:29:15.610 --> 00:29:15.620
make this easier for you so you can just
 

00:29:15.620 --> 00:29:17.830
make this easier for you so you can just
specify this in your build.gradle my app

00:29:17.830 --> 00:29:17.840
specify this in your build.gradle my app
 

00:29:17.840 --> 00:29:21.130
specify this in your build.gradle my app
depends on curl something like that this

00:29:21.130 --> 00:29:21.140
depends on curl something like that this
 

00:29:21.140 --> 00:29:24.340
depends on curl something like that this
is really early for us right now if you

00:29:24.340 --> 00:29:24.350
is really early for us right now if you
 

00:29:24.350 --> 00:29:27.310
is really early for us right now if you
do have any suggestions or there's a use

00:29:27.310 --> 00:29:27.320
do have any suggestions or there's a use
 

00:29:27.320 --> 00:29:28.360
do have any suggestions or there's a use
case you think we're not going to

00:29:28.360 --> 00:29:28.370
case you think we're not going to
 

00:29:28.370 --> 00:29:30.670
case you think we're not going to
consider there is a bug it is linked

00:29:30.670 --> 00:29:30.680
consider there is a bug it is linked
 

00:29:30.680 --> 00:29:35.140
consider there is a bug it is linked
from our NDK github page please go leave

00:29:35.140 --> 00:29:35.150
from our NDK github page please go leave
 

00:29:35.150 --> 00:29:36.850
from our NDK github page please go leave
a comment there we'd love to hear from

00:29:36.850 --> 00:29:36.860
a comment there we'd love to hear from
 

00:29:36.860 --> 00:29:39.160
a comment there we'd love to hear from
you on that it is definitely not too

00:29:39.160 --> 00:29:39.170
you on that it is definitely not too
 

00:29:39.170 --> 00:29:43.570
you on that it is definitely not too
late for us to change our plans here so

00:29:43.570 --> 00:29:43.580
late for us to change our plans here so
 

00:29:43.580 --> 00:29:46.720
late for us to change our plans here so
yes help us help you try the OS betas

00:29:46.720 --> 00:29:46.730
yes help us help you try the OS betas
 

00:29:46.730 --> 00:29:49.630
yes help us help you try the OS betas
try the NDK betas sooner you file bugs

00:29:49.630 --> 00:29:49.640
try the NDK betas sooner you file bugs
 

00:29:49.640 --> 00:29:51.490
try the NDK betas sooner you file bugs
the more likely it is that we won't ship

00:29:51.490 --> 00:29:51.500
the more likely it is that we won't ship
 

00:29:51.500 --> 00:29:55.300
the more likely it is that we won't ship
them it is never fun when you find out

00:29:55.300 --> 00:29:55.310
them it is never fun when you find out
 

00:29:55.310 --> 00:29:56.500
them it is never fun when you find out
that the only thing you can do is work

00:29:56.500 --> 00:29:56.510
that the only thing you can do is work
 

00:29:56.510 --> 00:29:59.080
that the only thing you can do is work
around an existing bug because it is too

00:29:59.080 --> 00:29:59.090
around an existing bug because it is too
 

00:29:59.090 --> 00:30:00.700
around an existing bug because it is too
late to fix it

00:30:00.700 --> 00:30:00.710
late to fix it
 

00:30:00.710 --> 00:30:04.390
late to fix it
file bugs at our github bug tracker give

00:30:04.390 --> 00:30:04.400
file bugs at our github bug tracker give
 

00:30:04.400 --> 00:30:06.010
file bugs at our github bug tracker give
feedback if you even if you just have a

00:30:06.010 --> 00:30:06.020
feedback if you even if you just have a
 

00:30:06.020 --> 00:30:07.330
feedback if you even if you just have a
question to ask it's a good place to

00:30:07.330 --> 00:30:07.340
question to ask it's a good place to
 

00:30:07.340 --> 00:30:08.560
question to ask it's a good place to
start the worst thing that will happen

00:30:08.560 --> 00:30:08.570
start the worst thing that will happen
 

00:30:08.570 --> 00:30:10.650
start the worst thing that will happen
is I will close your bug with an answer

00:30:10.650 --> 00:30:10.660
is I will close your bug with an answer
 

00:30:10.660 --> 00:30:14.620
is I will close your bug with an answer
if you do have questions you want to

00:30:14.620 --> 00:30:14.630
if you do have questions you want to
 

00:30:14.630 --> 00:30:16.120
if you do have questions you want to
talk to us about in person we do have

00:30:16.120 --> 00:30:16.130
talk to us about in person we do have
 

00:30:16.130 --> 00:30:19.150
talk to us about in person we do have
office hours tomorrow morning at 8:30 if

00:30:19.150 --> 00:30:19.160
office hours tomorrow morning at 8:30 if
 

00:30:19.160 --> 00:30:20.680
office hours tomorrow morning at 8:30 if
you are anything like me and that sounds

00:30:20.680 --> 00:30:20.690
you are anything like me and that sounds
 

00:30:20.690 --> 00:30:22.600
you are anything like me and that sounds
terrible we will also be around at 2:00

00:30:22.600 --> 00:30:22.610
terrible we will also be around at 2:00
 

00:30:22.610 --> 00:30:26.470
terrible we will also be around at 2:00
in the afternoon and thank you for your

00:30:26.470 --> 00:30:26.480
in the afternoon and thank you for your
 

00:30:26.480 --> 00:30:28.720
in the afternoon and thank you for your
time

00:30:28.720 --> 00:30:28.730
 

00:30:28.730 --> 00:30:31.320
[Applause]

00:30:31.320 --> 00:30:31.330
[Applause]
 

00:30:31.330 --> 00:30:53.199
[Applause]
[Music]

