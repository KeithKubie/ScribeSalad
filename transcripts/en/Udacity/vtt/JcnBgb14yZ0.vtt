WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:02.870
Now we consider the implementation of the all-important page

00:00:02.870 --> 00:00:06.380
table data structure, which needs to translate virtual page numbers

00:00:06.380 --> 00:00:09.390
into physical page frames. Virtual page numbers start at

00:00:09.390 --> 00:00:11.740
zero, and then go up by one. So the most

00:00:11.740 --> 00:00:14.070
straightforward way to do this would be to create

00:00:14.070 --> 00:00:17.100
a giant array that is the number of pages long.

00:00:17.100 --> 00:00:20.434
Let's see how this strategy might work. Suppose that we

00:00:20.434 --> 00:00:26.118
have a 48-bit virtual address and 32-bit physical address and

00:00:26.118 --> 00:00:32.860
let's say pages of sizes 4K. We've used up 12 bits for the offset, leaving 2 to

00:00:32.860 --> 00:00:36.320
the 36 possible virtual page numbers. That means

00:00:36.320 --> 00:00:38.960
that we need an array 2 to the 36

00:00:38.960 --> 00:00:41.730
long, each entry probably having 4 bytes to

00:00:41.730 --> 00:00:44.040
specify the physical address, which brings us to a

00:00:44.040 --> 00:00:48.200
total of about 256 gigs. Which is more memory

00:00:48.200 --> 00:00:50.870
than most machines have in RAM. And of course,

00:00:50.870 --> 00:00:53.440
almost all of it is wasted since most virtual addresses

00:00:53.440 --> 00:00:57.007
aren't used. Even with just 32 bit virtual addresses, we

00:00:57.007 --> 00:00:59.212
would still need a page table with 2 to the

00:00:59.212 --> 00:01:01.880
20th entries. And that would put us on the order of

00:01:01.880 --> 00:01:05.000
several megabytes. And of course we need one page table

00:01:05.000 --> 00:01:08.300
per process. So instead, page tables are done in a hierarchical

00:01:08.300 --> 00:01:12.506
way. In our 32-bit example, the highest order 10 bits

00:01:12.506 --> 00:01:16.760
are used as an index into a top level page table.

00:01:16.760 --> 00:01:19.490
The contents of this page table then give us

00:01:19.490 --> 00:01:23.380
the base address of another page table. We use the

00:01:23.380 --> 00:01:26.910
next 10 bits as the index into that lower

00:01:26.910 --> 00:01:30.460
level page table. And the contents of that page table

00:01:30.460 --> 00:01:33.430
then give us the physical page number. Why does

00:01:33.430 --> 00:01:36.200
this help us use less memory? Well recall our virtual

00:01:36.200 --> 00:01:38.890
address space. We use addresses at the bottom, and

00:01:38.890 --> 00:01:41.920
we use addresses at the top. But there's a vast

00:01:41.920 --> 00:01:44.950
empty region in the middle. Many of these

00:01:44.950 --> 00:01:48.256
unused addresses will have the same 10 higher order

00:01:48.256 --> 00:01:50.260
bits. And for these, we won't even have a

00:01:50.260 --> 00:01:53.240
secondary table. Thus, we end up using not too

00:01:53.240 --> 00:01:55.410
much more memory for the page table than we

00:01:55.410 --> 00:01:57.990
really need to. The particulars of the actual page

00:01:57.990 --> 00:02:00.920
implementation vary greatly. Some have three levels, others have

00:02:00.920 --> 00:02:04.190
four. But they all use this basic hierarchical strategy.

