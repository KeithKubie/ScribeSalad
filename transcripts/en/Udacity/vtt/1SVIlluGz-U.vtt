WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Here we go. Here's a function "parse."

00:00:02.000 --> 00:00:04.000
It takes a start_symbol like expression.

00:00:04.000 --> 00:00:07.000
It takes a text like 3x + b.

00:00:07.000 --> 00:00:10.000
It takes a grammar defined with our grammar function.

00:00:10.000 --> 00:00:12.000
The first thing we do is define the tokenizer.

00:00:12.000 --> 00:00:14.000
The tokenizer has two jobs.

00:00:14.000 --> 00:00:17.000
First it has to handle white space that occurs before the token,

00:00:17.000 --> 00:00:22.000
and it does that by looking up in grammar under the key consisting of just a space.

00:00:22.000 --> 00:00:28.000
In the definition of grammar we arrange to store the white space parameter under that key.

00:00:28.000 --> 00:00:31.000
This says build up a regular expression that will parse off

00:00:31.000 --> 00:00:36.000
the appropriate amount of white space--some, all, none, whatever is appropriate for your grammar.

00:00:36.000 --> 00:00:41.000
Then parse off whatever was defined but the atom that we're looking at next.

00:00:41.000 --> 00:00:44.000
We'll see when tokenizer is used how we go ahead and do that.

00:00:44.000 --> 00:00:47.000
Then parse sequence says we're just going to go through a sequence.

00:00:47.000 --> 00:00:53.000
This is a of atoms. We're going to initialize our result to be the empty list.

00:00:53.000 --> 00:00:56.000
Then we're going to go through, try to parse an atom one at a time.

00:00:56.000 --> 00:00:59.000
If we get back nothing for a remainder, then Fail.

00:00:59.000 --> 00:01:04.000
Otherwise, append to the result the tree that we built up by doing that parse

00:01:04.000 --> 00:01:06.000
and continue on in the loop.

00:01:06.000 --> 00:01:09.000
Notice that we're updating the text variable,

00:01:09.000 --> 00:01:13.000
so we're taking the remainder each time and parsing the next atom

00:01:13.000 --> 00:01:15.000
from the remainder of the previous atom.

00:01:15.000 --> 00:01:18.000
Now parse_atom handles two cases.

00:01:18.000 --> 00:01:22.000
If the atom is something that's in the grammar like bxb expression,

00:01:22.000 --> 00:01:26.000
we map it into this tuple of alternatives by looking it up in the grammar,

00:01:26.000 --> 00:01:28.000
getting that list of alternatives.

00:01:28.000 --> 00:01:30.000
For each alternative, we try to parse.

00:01:30.000 --> 00:01:36.000
If we have a successful match--that is if the remainder is not None, indicating failure--

00:01:36.000 --> 00:01:39.000
if there's some sort of remainder left over, then we want to return the result.

00:01:39.000 --> 00:01:44.000
We return the remainder we got, and we build up a tree structure consisting

00:01:44.000 --> 00:01:48.000
of the atoms that we're trying to parse plus the tree of whatever we got back.

00:01:48.000 --> 00:01:52.000
If we exhaust all the alternatives and we can't come up with anything,

00:01:52.000 --> 00:01:57.000
then we return Fail, which says no tree and no remainder.

00:01:57.000 --> 00:02:00.000
Otherwise if the atom is not in the grammar,

00:02:00.000 --> 00:02:02.000
then it must be a regular expression.

00:02:02.000 --> 00:02:04.000
We take the tokenizer that we built up before.

00:02:04.000 --> 00:02:10.000
We insert the atom, which is a regular expression, into that tokenizer and match it against the text.

00:02:10.000 --> 00:02:12.000
If there's not a match, then we Fail.

00:02:12.000 --> 00:02:16.000
If there is a match, we pull out the matching part. That's going to be the tree.

00:02:16.000 --> 00:02:18.000
That's the token that we matched.

00:02:18.000 --> 00:02:22.000
We go ahead and we take the rest of the text after the match and return that as a remainder.

00:02:22.000 --> 00:02:25.000
This is the only place where the text actually advances,

00:02:25.000 --> 00:02:29.000
in this one spot where we're matching tokens against the input text.

00:02:29.000 --> 00:02:33.000
These two routines are internal routines inside the definition of parse,

00:02:33.000 --> 00:02:36.000
and here's the body of parse that just says parse this atom--

00:02:36.000 --> 00:02:39.000
the start symbol against the text.

