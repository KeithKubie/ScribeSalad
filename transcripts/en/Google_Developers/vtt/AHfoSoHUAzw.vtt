WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.470
&gt;&gt; BOYD: So I definitely encourage you to
all attend the GTAC happy hour. The GTAC is

00:00:09.470 --> 00:00:15.490
a great set of organizations that promote
Google technology around the world but, you

00:00:15.490 --> 00:00:20.130
know, more importantly they all get together
and talk about things that they love. They

00:00:20.130 --> 00:00:24.590
talk about the various technologies and how
they're moving forward. And so go to the happy

00:00:24.590 --> 00:00:28.940
hour but then also go to the next GTAC meeting
and meet up with the folks and talk about

00:00:28.940 --> 00:00:33.870
the things that you like and things that you
don't like that Google is doing and we can

00:00:33.870 --> 00:00:38.680
all make the world a better place. So my name
is Ryan Boyd. I'm a developer advocate at

00:00:38.680 --> 00:00:46.190
Google. And I'm here today to talk about OpenID
and OAuth at Google. So I'm primarily a developer

00:00:46.190 --> 00:00:49.830
advocate on Google Apps, so you'll see a little
Google Apps slant here. But in general, I

00:00:49.830 --> 00:00:56.760
want to talk about how these technologies
are used across Google. Actually, you can

00:00:56.760 --> 00:01:00.820
see my Twitter handle there. If you have any
follow up questions or critique, feel free

00:01:00.820 --> 00:01:08.390
to give me an app reply on Twitter. So today,
we're going to talk about an overview of the

00:01:08.390 --> 00:01:13.600
different terms that are involved with OpenID
and OAuth. We're going to talk about each

00:01:13.600 --> 00:01:17.572
of those protocols. Then we're going to talk
about the hybrid combination of the two. And

00:01:17.572 --> 00:01:22.680
then I'm going to go through a practical example
of an application that's been around for a

00:01:22.680 --> 00:01:29.510
while and show how it's evolved through these
different protocols. So OpenID and OAuth and

00:01:29.510 --> 00:01:37.720
this whole space around identity and the access
authorization for data is rapidly moving.

00:01:37.720 --> 00:01:42.580
Things keep on changing and there's a lot
of work going on there. So I'm not going to

00:01:42.580 --> 00:01:47.500
be diving deep into the protocols. I'm going
to be showing you some of that but not too

00:01:47.500 --> 00:01:51.920
much. What I want you to understand when you
leave today is really the different protocols

00:01:51.920 --> 00:01:56.800
that exist, what the used cases are for them
and how they can apply to your application

00:01:56.800 --> 00:02:04.850
to create a better experience for our users
and thus get more users. So what we're talking

00:02:04.850 --> 00:02:10.360
about? The first term we're talking about
here is authentication. The idea behind authentication

00:02:10.360 --> 00:02:18.120
is determining who you are, determining the
actor that's making requests. So with OpenID,

00:02:18.120 --> 00:02:23.900
this is determining who it is that's browsing
the website. But in generic terms, authentication

00:02:23.900 --> 00:02:30.010
is used for other purposes as well to identify
applications and that sort of thing. And then

00:02:30.010 --> 00:02:35.340
we're talking about authorization. What can
you do? So after we've determined who the

00:02:35.340 --> 00:02:41.340
actor is, we need to determine what permissions
that actor has to access what resources and

00:02:41.340 --> 00:02:46.750
perform what actions. So for authentication,
we're going to primarily be talking about

00:02:46.750 --> 00:02:51.850
OpenID. For authorization, we're going to
be primarily talking about OAuth. If you treat

00:02:51.850 --> 00:02:56.819
these terms very strictly, they really merge
together and clash in a number of places but

00:02:56.819 --> 00:03:04.319
we'll trying not to do that in this introductory
presentation. So, OpenID. OpenID is about

00:03:04.319 --> 00:03:09.990
federated identity. And I want to give you
an example of OpenID before I actually dive

00:03:09.990 --> 00:03:15.860
into more information about the protocol.
So I'm going to go over here. We're going

00:03:15.860 --> 00:03:22.130
to go over to a website that I love; it's
called Tungle. How many of you have heard

00:03:22.130 --> 00:03:27.670
of Tungle? All right, just a few. I wasn't
sure how popular it was outside of Silicon

00:03:27.670 --> 00:03:34.620
Valley. But, basically, Tungle is an online
scheduling application. What it does is allows

00:03:34.620 --> 00:03:40.209
you to share your schedule with the world
and allow your customers or partners to create

00:03:40.209 --> 00:03:45.480
appointments on your calendar at the times
that you make available. So, one of the things

00:03:45.480 --> 00:03:50.170
that Tungle does is really tries to get you
into the application quite easily. So you

00:03:50.170 --> 00:03:54.540
can here at the bottom of their sign in page,
they allow you to do the typical first name,

00:03:54.540 --> 00:03:59.150
last name, email address and password, but
they also allow you to sign in using one of

00:03:59.150 --> 00:04:06.150
your existing accounts. So I'm going to click
in an icon here. And although I can't read

00:04:06.150 --> 00:04:12.420
this, I'm still going to approve it. It's
basically asking me to just pass my information,

00:04:12.420 --> 00:04:21.340
my name, my email address and my Portuguese
language over to this application. So I'm

00:04:21.340 --> 00:04:34.690
going to hit "permit."

00:04:34.690 --> 00:04:38.510
And the application is going to log me in
and immediately go into a very simple set

00:04:38.510 --> 00:04:43.919
up process. It already knows who I am. When
I return to this website, as long as I log

00:04:43.919 --> 00:04:50.389
in with my Google account again, it will again
know who I am securely and that makes it a

00:04:50.389 --> 00:04:56.389
lot easier. No longer do you have to receive
email confirmations, create password, deal

00:04:56.389 --> 00:05:01.919
with password resets; you can use the one
account that you're used to using for a lot

00:05:01.919 --> 00:05:06.540
of different sites or at least any site that
implements OpenID. So now, we're going to

00:05:06.540 --> 00:05:12.900
hop back to the presentation and we're going
to talk about the different parties involved

00:05:12.900 --> 00:05:18.610
with OpenID and federated identity. The first
party we'll talk about is the user. That's

00:05:18.610 --> 00:05:24.930
like me. It's someone who's trying to login
to a web application. The identity provider

00:05:24.930 --> 00:05:30.860
is the place on the web where I have my account;
the place on the web that I want to validate

00:05:30.860 --> 00:05:38.070
that I am me. This is oftentimes email providers.
You can create your own, but oftentimes it's

00:05:38.070 --> 00:05:42.170
email providers for most users as you just
saw on this application where I logged in

00:05:42.170 --> 00:05:46.810
with my Google account or my Gmail account.
And then there's the relying party. In the

00:05:46.810 --> 00:05:51.360
demo that I just gave, the relying party was
Tungle. It's a web application which wants

00:05:51.360 --> 00:05:59.020
to allow users to use their existing identity
to login into their application. So here's

00:05:59.020 --> 00:06:03.639
what some of this may look like. I'm calling
federated identity here. There's a little

00:06:03.639 --> 00:06:08.610
bit of controversy with this model. In this
model, we have three applications down the

00:06:08.610 --> 00:06:15.120
center. Those applications are SaaSy Payroll,
which is a fake online payroll application

00:06:15.120 --> 00:06:20.220
which we're going to use later in the demos;
TripIt, which is an online travel planning

00:06:20.220 --> 00:06:26.320
service; and Aviary, which is an image editor.
Each of these applications allow me to login

00:06:26.320 --> 00:06:31.870
via OpenID. SaaSy Payroll just allows me to
login with my Google account. TripIt and Aviary,

00:06:31.870 --> 00:06:36.360
however, could allow me to login with either
my Google account or my Yahoo account. Some

00:06:36.360 --> 00:06:41.759
may call this directed identity instead of
federated identity because these applications

00:06:41.759 --> 00:06:46.740
are restricting what identity providers I
can use to login rather allowing me to use

00:06:46.740 --> 00:06:53.080
any place on the web. But in this case, there's
still multiple identity providers and multiple

00:06:53.080 --> 00:07:01.199
relying parties. OpenID is a safe, faster
and easier way to log into websites. As you've

00:07:01.199 --> 00:07:06.080
heard all of this terminology, you're probably
not thinking it's easier but it is. It's easier

00:07:06.080 --> 00:07:10.039
for our users and we're going to talk about
each of these terms. This is kind of the model

00:07:10.039 --> 00:07:14.410
that's used on the OpenID website and here's
how--what these different terms mean to me.

00:07:14.410 --> 00:07:20.919
Safe. Because the users only enter in their
credentials in one place, they're only trained

00:07:20.919 --> 00:07:26.000
to provide their password to one site. Fishing.
They're going to be much less susceptible

00:07:26.000 --> 00:07:30.160
to fishing attacks and that sort of thing
because they know that they're only going

00:07:30.160 --> 00:07:37.960
to enter in their credentials at their identity
provider. It's faster. The user is already

00:07:37.960 --> 00:07:43.300
often logged in to their OpenID provider.
In the case that I demoed--I don't remember

00:07:43.300 --> 00:07:46.810
actually whether I was logged in or not--but
I'm often logged into my Gmail on a regular

00:07:46.810 --> 00:07:50.729
basis. So if I go to login to a website, I
don't even have to type my password. All I

00:07:50.729 --> 00:07:59.770
have to do is tell that website, "It's okay
to pass my identity onto the website." And

00:07:59.770 --> 00:08:05.220
easier. The user no longer needs to create
and maintain a different set of credentials

00:08:05.220 --> 00:08:09.590
on a bunch of different websites. Now, in
practice, most people don't actually maintain

00:08:09.590 --> 00:08:13.990
a different set of credentials. They use the
same password everywhere which gets back to

00:08:13.990 --> 00:08:20.790
the "safe" idea. Though there is some--there's
actually--our network technician here yesterday

00:08:20.790 --> 00:08:25.930
was wearing a T-shirt that said, "OpenID.
Now you only need to steal my password once."

00:08:25.930 --> 00:08:33.080
But you may only need to steal a password
once but there are things that are being done

00:08:33.080 --> 00:08:39.319
to make those identity providers a lot more
secure. Google--for Google Apps recently announced

00:08:39.319 --> 00:08:43.809
what is called true factor authorization.
So it requires you to have your cell phone

00:08:43.809 --> 00:08:49.449
available and you receive a text message or
an SMS message in order to log on to the website.

00:08:49.449 --> 00:08:53.939
So you provide your password plus that text
message. So you're approving multiple things.

00:08:53.939 --> 00:08:58.489
You can greatly secure each of these individual
identity providers a lot easier than you can

00:08:58.489 --> 00:09:04.850
secure every website that wants to rely on.
So there is a discovery challenge though.

00:09:04.850 --> 00:09:08.869
You want to determine the OpenID provider
of the user. As we saw with some of the previous

00:09:08.869 --> 00:09:16.350
examples, I was just saying, "Use Yahoo or
use Google," but, you know, the initial version

00:09:16.350 --> 00:09:23.980
of OpenID was very open. And what it meant
is that you could actually type in any URL

00:09:23.980 --> 00:09:31.130
here. You could basically say, "My OpenID
provider is at www.google.com/account/oa."

00:09:31.130 --> 00:09:36.860
Only geeks actually use this, only geeks could
remember what the URL was and only geeks cared

00:09:36.860 --> 00:09:42.809
about this. So OpenID wasn't that popular.
There wasn't much adoption. But the community

00:09:42.809 --> 00:09:50.139
embraced a different way of doing OpenID and
this is what we call the OpenID NASCAR. What

00:09:50.139 --> 00:09:54.670
this means is that the websites or the relying
parties present a bunch of different logos

00:09:54.670 --> 00:09:59.489
for you. They tell you, "You can log in using
your Google account or Yahoo account or your

00:09:59.489 --> 00:10:05.290
Twitter account." And you click on one of
these buttons, it then allows you to log in.

00:10:05.290 --> 00:10:12.100
This is a much better way to interact with
users but it actually gets at a problem that

00:10:12.100 --> 00:10:18.019
OpenID was created to prevent. It basically
makes it--if you don't have a popular OpenID

00:10:18.019 --> 00:10:21.869
provider, if you don't have an OpenID provider
that everyone's going to include on these

00:10:21.869 --> 00:10:29.239
NASCAR batch pages, then you can't sign in
to the website. You have to do--create a new

00:10:29.239 --> 00:10:34.029
user name and create a new password. So this
is what I'd like the future to be where you

00:10:34.029 --> 00:10:38.990
enter in your email address and you can log
on to the site. It discovers who your provider

00:10:38.990 --> 00:10:46.300
is and you can immediately login. We're getting
there. You may have noticed that there is

00:10:46.300 --> 00:10:52.110
a Google Apps button and a regular Google
button. Google Apps actually gets partially

00:10:52.110 --> 00:10:56.629
the way there to that ideal world where you
click Google Apps and you can actually type

00:10:56.629 --> 00:11:02.420
in your domain name. And there's a little
bit special magic sauce here, but Google Apps

00:11:02.420 --> 00:11:08.410
will issue OpenID identities on your actual
domain. So there's this two different formats

00:11:08.410 --> 00:11:13.000
of OpenIDs. We have the Google Consumer accounts
which you gave a Gmail account. This is what

00:11:13.000 --> 00:11:21.019
the OpenID looks like. And OpenID identity
is really just a URI. And you can see here's

00:11:21.019 --> 00:11:25.980
a URI for a Gmail account. And then for a
Google Apps account, the OpenID identities

00:11:25.980 --> 00:11:30.370
are on their own domain. This makes it a lot
easier if you wanted to, say, move off of

00:11:30.370 --> 00:11:33.720
Google Apps. I don't know why you'd want to,
but if you did want to move off of Google

00:11:33.720 --> 00:11:43.290
Apps, you can take your OpenID identity space
with you. So Google supports a number of different

00:11:43.290 --> 00:11:48.329
extensions for OpenID. We're going to talk
about the hybrid extension later as we mentioned.

00:11:48.329 --> 00:11:53.949
I'll also talk a little bit about the attribute
exchange here. By default, OpenID provides

00:11:53.949 --> 00:11:59.819
just that URI. It just says, "This is a unique
identifier that will be returned to your application

00:11:59.819 --> 00:12:04.499
every time this user logs in," so you can
maintain state across the user's login. You

00:12:04.499 --> 00:12:10.910
know who the user is but you don't know information
like their name or their email address. Attribute

00:12:10.910 --> 00:12:14.279
exchange provides that information and it
makes it a lot easier to provide a good user

00:12:14.279 --> 00:12:20.189
experience for the user. So we support a number
of different extensions. You can read up on

00:12:20.189 --> 00:12:24.249
them online. But the biggest point that I
want to stress here with OpenID, there is

00:12:24.249 --> 00:12:29.730
that safe, faster, easier--it's not only safe,
faster and easier for users, but it's also

00:12:29.730 --> 00:12:35.420
better for web application developers because
you don't need to deal with storing passwords,

00:12:35.420 --> 00:12:39.859
you don't need to deal with securing your
stored passwords and you can also get users

00:12:39.859 --> 00:12:46.510
into your website a lot faster. And this means
in the end you'll have more users. So how

00:12:46.510 --> 00:12:53.070
is this done? Well, there's all this complicated
terminology. It may sound complicated but

00:12:53.070 --> 00:12:56.959
it's not really hard in practice because a
number of different libraries have been written

00:12:56.959 --> 00:13:02.949
that handle OpenID authentication. These libraries
have been written by people and have been

00:13:02.949 --> 00:13:08.199
reviewed by plenty of people and used by plenty
of people, so they're much more likely to

00:13:08.199 --> 00:13:14.040
be secure than any code you would write yourself.
I would strongly urge you not to write your

00:13:14.040 --> 00:13:20.320
OpenID code by hand, not to write your OAuth
code by hand. It's tricky and there are people

00:13:20.320 --> 00:13:25.689
that have done it before you. So take advantage
of that. All of these libraries will do Vanilla

00:13:25.689 --> 00:13:33.309
OpenID and some of them also handle Google
Apps accounts. So now we've talked about identity.

00:13:33.309 --> 00:13:38.609
We've talked about how to figure out who that
actor is, who the person is that is logging

00:13:38.609 --> 00:13:43.069
into the web application. But you want to
know more than just who the person is; you

00:13:43.069 --> 00:13:47.019
also want to be able to integrate with their
data. You want to be able to integrate with

00:13:47.019 --> 00:13:51.139
things like their calendar. Maybe you're a
video mashup and you want to integrate with

00:13:51.139 --> 00:13:58.839
things like YouTube. Well, that's what OAuth
Authorized Data Access is about. So in terminology,

00:13:58.839 --> 00:14:05.980
there's a protected resource. These are things
like your calendar, your YouTube videos. And

00:14:05.980 --> 00:14:11.279
these protected resources reside on a server
at Google. They require authorization to access

00:14:11.279 --> 00:14:15.929
or at least to be able to edit at times. Some
things are read-only avail publicly. But to

00:14:15.929 --> 00:14:20.939
edit them, you'll need to have access. And
then there's the resource owner. The resource

00:14:20.939 --> 00:14:27.359
owner is the person or entity that owns a
protected resource. They have the ability

00:14:27.359 --> 00:14:33.759
and the rights to grant access to that resource.
Another couple of terms we're going to talk

00:14:33.759 --> 00:14:38.390
about here is the client. In the case of the
SaaSy Payroll, online payroll application

00:14:38.390 --> 00:14:44.040
I'll be talking about, it's a relying party.
In OpenID terms, in the OAuth terms here,

00:14:44.040 --> 00:14:49.709
it's the client. It's the one that's making
HTTP request to the server, in this case Google

00:14:49.709 --> 00:14:54.779
Calendar, to access data. Fairly simple terms
that you're probably already familiar with

00:14:54.779 --> 00:15:00.499
some of them. So the different Google servers
that have protected resources, I actually

00:15:00.499 --> 00:15:07.519
just listed eight of them on this slide, but
there's actually even many more APIs than

00:15:07.519 --> 00:15:13.720
this. Google is really standing strong behind
OAuth and strong behind OpenID as the standards

00:15:13.720 --> 00:15:20.759
that provide authorization and identity access.
So most of our APIs are accessible by OAuth

00:15:20.759 --> 00:15:25.730
now and there's a lot of different cool data.
If you're into finance, you can get a user

00:15:25.730 --> 00:15:31.089
stock portfolio. If you're into videos, like
I said, you can use YouTube, but then there's

00:15:31.089 --> 00:15:38.319
all sorts of business applications as well.
There are a couple of more terms with OAuth

00:15:38.319 --> 00:15:44.189
that I'd like to talk about. There's key management.
So the client needs to establish trust with

00:15:44.189 --> 00:15:48.649
the server. In order to do that, the client
registers with the server. You're going to

00:15:48.649 --> 00:15:53.069
be seeing that shortly. And then there's access
control. The server needs to decide when it

00:15:53.069 --> 00:15:58.260
receives a request from the client, whether
it is going to grant access based off of the

00:15:58.260 --> 00:16:05.189
grants that had been given to that client.
So let's talk about each of these steps. Step

00:16:05.189 --> 00:16:11.899
one, the developer registers the client. That's
the key management. Step two, the resource

00:16:11.899 --> 00:16:17.459
owner, oftentimes a user, grants access to
their data. That's access control. And then

00:16:17.459 --> 00:16:24.839
the client application actually does access
the resource. In the registration step--I'm

00:16:24.839 --> 00:16:29.169
not going to talk about all of this, but basically
there's a website that you go to to register

00:16:29.169 --> 00:16:35.410
your application. Google has one for applications
using Google Consumer Accounts. The Google

00:16:35.410 --> 00:16:40.959
Apps Marketplace, if you were here at that
talk, has a special place that it gives you

00:16:40.959 --> 00:16:45.160
registration information. And then other companies
each have this as well. So there's an example

00:16:45.160 --> 00:16:51.699
of the URL for Twitter to register your client.
Here's what the webpage looks like for where

00:16:51.699 --> 00:16:58.829
the Google consumer sort of registration process.
And I'm registering--this is that Saasy Payroll

00:16:58.829 --> 00:17:04.120
application. So I'm going in and I'm logged
in as myself as the developer, I should say

00:17:04.120 --> 00:17:10.949
here, and I prove that I own the saasyapp.com.
There's a little bit of verification process

00:17:10.949 --> 00:17:16.440
that goes on there, either via DNS or via,
you know, editing a file on your web server

00:17:16.440 --> 00:17:21.829
to prove that you own it. And then Google
will issue a consumer key to you and a consumer

00:17:21.829 --> 00:17:29.019
secret. These consumer keys and secrets are
basically used in OAuth to identify the client

00:17:29.019 --> 00:17:33.309
and then also for the client to prove its
identity. The client has to be able to sign

00:17:33.309 --> 00:17:38.840
cryptographically the request to prove its
identity. So you basically--you register your

00:17:38.840 --> 00:17:44.519
app, you describe the name of your app and
you get an OAuth consumer key and secret.

00:17:44.519 --> 00:17:48.659
We also support RSA stuff, but I'm not going
to get into that in this presentation. But

00:17:48.659 --> 00:17:56.350
if you prefer using RSA instead of what's
called HMAC, you can do that. So, we've now

00:17:56.350 --> 00:18:01.450
registered the client. So the client has registered
to the server, the server knows who the client

00:18:01.450 --> 00:18:06.500
is. This is something you do when you start
developing your application. You then need

00:18:06.500 --> 00:18:14.139
to have the resource owner grant access to
the resources. Keep in mind, the resource

00:18:14.139 --> 00:18:18.860
owner may not be an individual end-user. It's
basically the person who is authorized to

00:18:18.860 --> 00:18:25.620
grant access to those resources. And in the
case of a company, it may actually be the

00:18:25.620 --> 00:18:31.730
company that is authorized to grant access.
So your work email, you might not have the

00:18:31.730 --> 00:18:36.830
rights to be able to give an application access
to your work email or your work calendar.

00:18:36.830 --> 00:18:42.320
Your company has to do that. And so, we have
two different types of OAuth that we'll talk

00:18:42.320 --> 00:18:48.159
about for those two different cases. So for
the consumer where the individual user is

00:18:48.159 --> 00:18:53.010
the resource owner, we use what's called three-legged
OAuth. Three-legged OAuth is actually the

00:18:53.010 --> 00:18:57.139
standard version of OAuth. If you see OAuth
out there, they're likely referring to this.

00:18:57.139 --> 00:19:04.409
And what that means is that there is a series
of web redirects where when the application

00:19:04.409 --> 00:19:09.700
needs to access the user's data, it redirects
the user over to Google or over to Twitter

00:19:09.700 --> 00:19:15.590
or another provider and says, "This application
is trying to access this data. Do you, as

00:19:15.590 --> 00:19:26.310
a user, approve granting access to the data?"
In this case, I am--oops. In this case, I

00:19:26.310 --> 00:19:33.730
am the resource owner and I'm at a company
called Smart Law Firm and the client is saasyapp.com.

00:19:33.730 --> 00:19:38.039
It's the payroll application that we keep
referring to and the protected resource is

00:19:38.039 --> 00:19:44.830
Google Calendar. I can choose either to grant
or deny access to that resource here. Now,

00:19:44.830 --> 00:19:49.580
in the case of a business where the company
actually owns the resource, they might want

00:19:49.580 --> 00:19:56.070
to be able to grant access to the SaaSy Payroll
application for all of their user's calendars

00:19:56.070 --> 00:20:01.740
in one step. For this, they can use two-legged
OAuth. And the real difference here is that

00:20:01.740 --> 00:20:08.860
the IT administrator goes into their Google
Apps control panel and actually says, "This

00:20:08.860 --> 00:20:14.379
client, saasyapp.com, needs access to this
scope," and that's a URL representing the

00:20:14.379 --> 00:20:19.580
Calendar API. And they can authorize it on
behalf of all their users. That way when the

00:20:19.580 --> 00:20:26.789
individual user needs to have their Calendar
data integrated with the payroll application,

00:20:26.789 --> 00:20:31.120
they don't need to grant access and they don't
need to understand if they have the rights

00:20:31.120 --> 00:20:35.389
to grant access. They don't need to know if
their security policies allow them to grant

00:20:35.389 --> 00:20:42.110
access because the administrator can do it
for them. So there are a couple of different

00:20:42.110 --> 00:20:47.260
required elements when you're accessing a
resource using OAuth. There's the consumer

00:20:47.260 --> 00:20:53.320
key and the consumer secret, which you already
saw. You saw we--those were issued to our

00:20:53.320 --> 00:20:58.620
application at the time that we registered
it. Those consumer key--the consumer key is

00:20:58.620 --> 00:21:05.620
used to identify the application. The signature
is created using the consumer secret and it's

00:21:05.620 --> 00:21:10.320
used to prove that identity. And we'll show
you an example of what that looks like here

00:21:10.320 --> 00:21:19.190
shortly. So when actually accessing the resources,
the three-legged OAuth flow where the user

00:21:19.190 --> 00:21:24.840
is individually approving access requires
an additional perimeter called an OAuth Token.

00:21:24.840 --> 00:21:32.090
That token indicates that the permission that
was granted by the user. So it says that this

00:21:32.090 --> 00:21:38.690
application, SaaSy Payroll, has a right to
access this user, Ryan's, Google Calendar.

00:21:38.690 --> 00:21:44.039
So that's presented from the client to the
server along with the rest of the request.

00:21:44.039 --> 00:21:49.190
In two-legged OAuth, however, because the
access has been granted in advance by the

00:21:49.190 --> 00:21:54.110
administrator, they will access the storage
server-side. So all the client needs to do

00:21:54.110 --> 00:22:00.620
is identify itself and prove its identity
using that consumer key and consumer secret

00:22:00.620 --> 00:22:08.090
in signing everything. And then, it needs
to say on whose behalf it is acting. So it

00:22:08.090 --> 00:22:13.450
is acting on behalf of a particular user within
the organization. So in this case, it was

00:22:13.450 --> 00:22:20.049
acting on behalf of, let's say, ryan@smart-lawfirm.com.
So it basically adds an additional query perimeters

00:22:20.049 --> 00:22:25.490
saying who it's acting on behalf. And as long
as the domain administrator has granted that

00:22:25.490 --> 00:22:32.590
access in advance, the client will be able
to access that data. So here's what this looks

00:22:32.590 --> 00:22:37.629
like in an actual HTTP request. Just like
with OpenID, there are libraries that do this

00:22:37.629 --> 00:22:42.270
for you, but I just thought you might want
to see the HTTP request to see if you can

00:22:42.270 --> 00:22:48.019
understand what's going on here. So there's
various things done in cryptography and that's

00:22:48.019 --> 00:22:56.750
timestamp to ensure that this request isn't
made again. And then there's also the signature,

00:22:56.750 --> 00:23:02.450
which is generated. So this is what it looks
like. There are a couple of different types

00:23:02.450 --> 00:23:08.549
of tokens with the three-legged OAuth scenario.
So with the scenario where individual user

00:23:08.549 --> 00:23:13.690
is granting access by that website authorized
denying. There are a couple different of types

00:23:13.690 --> 00:23:19.960
of tokens. Basically, the application creates
a request token. It gets an authorized by

00:23:19.960 --> 00:23:24.410
the user and then exchanges that for what's
called an Access Token. And I'm gonna show

00:23:24.410 --> 00:23:29.450
this to you. I don't expect you to remember
all of this. But there's an OAuth Playground

00:23:29.450 --> 00:23:35.730
that's a really helpful tool for learning
some of this. It was actually written by another

00:23:35.730 --> 00:23:40.549
Googler here named Eric Bidelman. If you've
seen him, thank him. It's a really awesome

00:23:40.549 --> 00:23:48.190
tool. So what it allows you to do is go to
the top here and you say, "I am looking for

00:23:48.190 --> 00:23:56.190
access to a particular API." So I want to
access to the contacts API. Click there. This

00:23:56.190 --> 00:24:02.389
generates what's called a scope, which is
what data--my application is trying to access.

00:24:02.389 --> 00:24:07.009
And then down here, you can see there's an
OAuth consumer key. We don't see a secret

00:24:07.009 --> 00:24:12.960
because the client in this case is actually
this web application, it's the OAuth Playground.

00:24:12.960 --> 00:24:19.019
So it has previously registered and gone on
a secret and that's stored on its server.

00:24:19.019 --> 00:24:24.590
So there's this three-step process here. I
need to do--get a request token. So when I

00:24:24.590 --> 00:24:31.450
do that, it basically performs an HTTP request
to the server and the server returns a request

00:24:31.450 --> 00:24:38.190
token. It might be a little small, but I definitely
encourage you to play around with it yourself.

00:24:38.190 --> 00:24:46.529
And then the next step is authorizing the
request token. So it authorized. And that

00:24:46.529 --> 00:24:50.799
does the redirect for me. And just the same,
I can't understand Portuguese on this page

00:24:50.799 --> 00:24:57.429
either, but it does ask me here to grant access
to my Google contacts. I recognize the words

00:24:57.429 --> 00:25:07.490
a little bit. And I will grant access. And
then, the application can exchange my request

00:25:07.490 --> 00:25:12.750
token for an access token now. And now, it
has everything it needs to make request to

00:25:12.750 --> 00:25:21.149
an API. So what we're going to do here is
actually retrieve my contacts. So once this

00:25:21.149 --> 00:25:26.539
is set up, you can access that API. And you
can actually access multiple APIs at once.

00:25:26.539 --> 00:25:32.701
You can request access for calendar in YouTube
all at one time. But I put the URL in here

00:25:32.701 --> 00:25:38.799
is this is kind of the URL to the rest of
API that I'm looking to get access to contacts,

00:25:38.799 --> 00:25:49.999
and I hit execute. And let me do a little
syntax highlighting here. And you can actually

00:25:49.999 --> 00:25:55.070
see--this says--the title of this feed is
Ryan Boyd's contacts. It retrieved all that

00:25:55.070 --> 00:26:01.749
information based off of this authorization
header. Specify the OAuth consumer key and

00:26:01.749 --> 00:26:11.350
then the signature and pass that to the server;
the server validated it. All right. So we've

00:26:11.350 --> 00:26:16.900
talked about getting access to the user's
identity, knowing who the user is. We've talked

00:26:16.900 --> 00:26:21.340
about getting access to their data, figuring
out, you know, what their contacts are, what

00:26:21.340 --> 00:26:26.860
their calendar is or what their YouTube videos
are. But we've been in multiple steps so far.

00:26:26.860 --> 00:26:32.760
You've seen me grant access to my identity,
so to pass on my email address; then you've

00:26:32.760 --> 00:26:37.950
seen me separately grant access to my contacts
or my calendar. Well, we really want to be

00:26:37.950 --> 00:26:44.370
able to do this all at once. And so, there
is an OpenID in OAuth hybrid process which

00:26:44.370 --> 00:26:49.590
combined these two types of requests, and
it's a very simple three-step process again.

00:26:49.590 --> 00:26:55.000
The developer registers the client just like
it did with OAuth. The resource owner grants

00:26:55.000 --> 00:27:01.659
access to the data and access to the identity.
It all happens in one step. And then the client

00:27:01.659 --> 00:27:07.379
application accesses the resource. It actually--it
actually occurs using a very similar process

00:27:07.379 --> 00:27:13.270
to OpenID except as a result of OpenID, it
returns an OAuth token. I don't dive into

00:27:13.270 --> 00:27:17.950
those details, but rest assured, this makes
it a lot easier for users and makes it a last

00:27:17.950 --> 00:27:24.710
step--last steps in the process. And you'll
see this later with the SaaSy Payroll application.

00:27:24.710 --> 00:27:30.880
So here is where as a user, I'm granting access
to both my identity, my name, and my email

00:27:30.880 --> 00:27:37.679
address, as well as my Google Calendar in
one step. All right, so when do you use each

00:27:37.679 --> 00:27:42.080
of these protocols? Well, you may notice that
the first two terms here I didn't talk about.

00:27:42.080 --> 00:27:46.840
I didn't talk about client login and I didn't
talk about AuthSub. Although these terms are

00:27:46.840 --> 00:27:53.090
still pretty prevalent within our documentation,
you don't want to use these for new applications.

00:27:53.090 --> 00:27:57.909
Really, in my personal opinion, you want to
use OAuth. You want to use the standards.

00:27:57.909 --> 00:28:02.940
So client login is where you pass a username
and password and get access to the resources.

00:28:02.940 --> 00:28:07.299
For obvious reasons, you as an application
don't want the liability of having a user's

00:28:07.299 --> 00:28:12.899
username and password. AuthSub was the kind
of precursor at Google, the non-standard version

00:28:12.899 --> 00:28:17.789
of something like OAuth. So you want to use
OAuth and then there's the different flavors

00:28:17.789 --> 00:28:22.179
that you can use; 3-Legged OAuth is where
you redirect the user and the browser and

00:28:22.179 --> 00:28:26.740
ask for access to their data. You use that
one when the individual user owns the data,

00:28:26.740 --> 00:28:32.880
2-Legged OAuth is when you want to access
data for an entire organization, for entire

00:28:32.880 --> 00:28:38.610
Google Apps domain and the Google Use case.
OpenID is when you want to access a user's

00:28:38.610 --> 00:28:43.100
identity and then, you'll note that there's
a special version of OpenID for Google Apps.

00:28:43.100 --> 00:28:47.080
And then lastly, there's the OpenID and OAuth
Hybrid that allows you to combine these things

00:28:47.080 --> 00:28:53.159
together and do it all in one step. So now,
I want to kind of take all of this information

00:28:53.159 --> 00:28:58.670
that you've learned and talk about an integrated
application and how it evolved. So this is

00:28:58.670 --> 00:29:03.690
the SaaSy Payroll application that I was talking
about. The SaaSy Payroll application launched

00:29:03.690 --> 00:29:08.279
a long time ago and just like every other
application on the Web, it had email addresses

00:29:08.279 --> 00:29:13.549
and passwords. For every user within the system,
it stored both those email addresses and passwords

00:29:13.549 --> 00:29:17.570
in a database table that looks like this.
So the bottom part of this screen here I'm

00:29:17.570 --> 00:29:26.720
going to use to show what the database table
looks like. And here's a quick video showing

00:29:26.720 --> 00:29:31.960
what that looks like from a user experience.
So the user says, "They don't have an account.

00:29:31.960 --> 00:29:37.909
They're going to create one." They login,
they specify--sorry, they enter their email

00:29:37.909 --> 00:29:44.460
address. They specify a password, a very short
one at that, they then get an email and they're

00:29:44.460 --> 00:29:48.889
asked to confirm their account. They click
on that confirmation link and then they have

00:29:48.889 --> 00:29:54.799
access to their payroll data. Now, that was
a very quick recording of the video but oftentimes

00:29:54.799 --> 00:30:03.440
for many users, it takes a lot longer for
them to perform those steps. So the SaaSy

00:30:03.440 --> 00:30:06.769
Payroll application, it wasn't integrated
with anything when it first launched. It was

00:30:06.769 --> 00:30:13.299
just a payroll application. But then Google
in 2006 launched the Calendar API. The Calendar

00:30:13.299 --> 00:30:18.059
API was the first of our Google Data APIs
based off of the Atom Publishing Protocol.

00:30:18.059 --> 00:30:25.309
And then it allowed the SaaSy application
to add events to a user's calendar, to indicate

00:30:25.309 --> 00:30:30.820
when that user was getting paid. So it's very
helpful if you have an upcoming mortgage payment

00:30:30.820 --> 00:30:34.699
or car payment to know when you're getting
paid. So you want to be able to look at your

00:30:34.699 --> 00:30:40.619
Google Calendar and have that information,
because Google Calendar launched their API,

00:30:40.619 --> 00:30:45.110
SaaSy Payroll was able to offer that service
to their users. But the first version of the

00:30:45.110 --> 00:30:50.619
authorization protocol that Google made available
for this was AuthSub. And AuthSub was its

00:30:50.619 --> 00:30:56.350
propriety protocol but it looked much the
same as OAuth does today to the user. So the

00:30:56.350 --> 00:31:01.799
user table on the database has increased a
little bit. In addition to having the email

00:31:01.799 --> 00:31:06.410
address and the password for the user, it
also has a token for the user. That token

00:31:06.410 --> 00:31:12.059
represents the applications access to the
protective resource, the application's access

00:31:12.059 --> 00:31:23.450
to Google Calendar. So let's see what that
looks like. So here--on--below my payroll

00:31:23.450 --> 00:31:28.379
dates, I have a link that says, "Add dates
to your Google Calendar." And the video is

00:31:28.379 --> 00:31:32.269
freezing here a little bit but I'll pull you
up, then we'll continue. So I clicked "Add

00:31:32.269 --> 00:31:38.581
Dates" to your Google Calendar. Then, I'm
asked to grant access to my Google Calendar,

00:31:38.581 --> 00:31:44.879
just as you saw with OAuth earlier. I grant
access, the application now says that dates

00:31:44.879 --> 00:31:51.230
are being added to my calendar. So I go into
my Google Calendar and I can actually see

00:31:51.230 --> 00:31:56.440
that the paydays have been added to my calendar.
So you can see from May 15th and all the other

00:31:56.440 --> 00:32:01.289
days of the month. Here, the paydays were
added. It's very useful for me as a user to

00:32:01.289 --> 00:32:06.581
know when I get paid. So I'm very much happier
with this application and we'll continue to

00:32:06.581 --> 00:32:13.950
use this payroll application for my small
business. So then, the users kept on complaining,

00:32:13.950 --> 00:32:19.090
"You've made it really easy for me to integrate
with my calendar but why do I need to create

00:32:19.090 --> 00:32:24.240
another username and password every time I
access my payroll? Why do I need to keep logging

00:32:24.240 --> 00:32:31.100
in?" And so, with launching OpenID in 2009,
Google made it easy for the SaaSy Payroll

00:32:31.100 --> 00:32:37.110
application to actually log users in with
their existing Google accounts. So you can

00:32:37.110 --> 00:32:42.880
see here now, this application database table
or the users' database table no longer needs

00:32:42.880 --> 00:32:48.759
to have a password for the user instead it
just stores the OpenID. And this OpenID just

00:32:48.759 --> 00:32:55.440
represents that user and it's validated with
Google. So if the user visits again, it gets

00:32:55.440 --> 00:33:01.539
Google passes on or search the OpenID and
the application could look it up in the database

00:33:01.539 --> 00:33:06.700
table just as it would look up a password.
And now, you can see how the experience has

00:33:06.700 --> 00:33:12.330
improved by implementing OpenID in the SaaSy
Payroll application. So instead of entering

00:33:12.330 --> 00:33:20.059
my username and password, I just type in my
email address here and click "Login." I click

00:33:20.059 --> 00:33:24.289
"Allow" because I'm already actually logged
in. I've already typed my password to Google

00:33:24.289 --> 00:33:29.320
and I'm instantly signed in. I no longer need
to provide a new password which oftentimes

00:33:29.320 --> 00:33:35.080
won't be a new password. And I no longer need
to deal with any of that email confirmation

00:33:35.080 --> 00:33:43.760
because the SaaSy Payroll application is trusting
OpenID. And then the process of granting access

00:33:43.760 --> 00:33:51.350
to calendar is just the same as it was before,
but there's two steps there, you know. So

00:33:51.350 --> 00:33:56.419
then at the end of 2009, Google launched this
Hybrid OpenID and OAuth which we saw. And

00:33:56.419 --> 00:34:01.600
what this meant is that they could do these
two steps in one. However, we're now using

00:34:01.600 --> 00:34:07.039
OAuth for authorization, the standard instead
of using this AuthSub Propriety protocol.

00:34:07.039 --> 00:34:11.919
It's a step forward for this application with
a little more code to write, but their database

00:34:11.919 --> 00:34:16.550
table also has to store what different--what
the token types are that the application is

00:34:16.550 --> 00:34:21.520
using. So you can see some of these tokens
were AuthSub tokens and then the third token

00:34:21.520 --> 00:34:26.809
is an OAuth token and with OAuth, the results
of this seeker which we haven't done in too

00:34:26.809 --> 00:34:32.750
much but it needs to restore that seeker.
And here's how that experience has improved

00:34:32.750 --> 00:34:44.819
for the users. Okay at the end of the day
here as everyone getting on to the Internet,

00:34:44.819 --> 00:34:56.880
maybe. Let's try--oh, there here we go. Okay.
So again, I type in my email address and I

00:34:56.880 --> 00:35:03.800
hit Login. And then you can see it asks for
access to my email address and my Google Calendar

00:35:03.800 --> 00:35:09.751
in one step. This just makes it a lot easier
for the user and makes it better for the application

00:35:09.751 --> 00:35:16.970
because the application has gotten its new
users faster and thus we'll get more new users.

00:35:16.970 --> 00:35:20.400
So it's created a one step. We're not going
to finish the video here because we're running

00:35:20.400 --> 00:35:27.980
a little bit late on time. But the next step
here is Google launched the Google Apps Marketplace

00:35:27.980 --> 00:35:32.500
earlier this year. Now like I said, this isn't
really a talk on Google Apps but it does show

00:35:32.500 --> 00:35:39.079
an evolution in how OpenID and OAuth have
made things easier for users. With the Google

00:35:39.079 --> 00:35:44.089
Apps Marketplace, an IT Administrator can
add an application like SaaSy Payroll for

00:35:44.089 --> 00:35:48.980
all of the users within their organization
at once. That's why you see here three rows

00:35:48.980 --> 00:35:55.400
were added to my database table. And none
of those rows have a token. They all stay

00:35:55.400 --> 00:36:01.450
2-Legged OAuth and what that means is that
the SaaSy Payroll application can access all

00:36:01.450 --> 00:36:07.310
of those users' data just by proving its identity
with its consumer key and seeker. It doesn't

00:36:07.310 --> 00:36:12.589
need tokens granted by each of those users
because the administrator has granted access

00:36:12.589 --> 00:36:20.030
to all of them in one process. So let's show
this and this is kind of the final video here

00:36:20.030 --> 00:36:40.030
of how OpenID and OAuth have evolved for the
SaaSy Payroll application. Maybe. Come on,

00:36:40.030 --> 00:36:43.859
this is the best one, all right. So we're
in the Apps Marketplace which is a store for

00:36:43.859 --> 00:36:48.809
Web applications. I'm an IT Administrator
in this case and I'm signing in, I'm entering

00:36:48.809 --> 00:36:55.430
my Google Apps Domain name and after entering
my Google Apps Domain name, I click Go, maybe,

00:36:55.430 --> 00:37:07.740
all right, click Go. All right. We'll wait
a second here and see if this picks up otherwise

00:37:07.740 --> 00:37:12.670
I'll just talk through it a little bit, but--all
right. So there's a very simple install process.

00:37:12.670 --> 00:37:17.920
This simple install process first has to be
agreeing that I love the SaaSy Payroll application,

00:37:17.920 --> 00:37:25.000
it's agreeing to the Terms of Service. Then
the next step is for granting that data access.

00:37:25.000 --> 00:37:31.900
So here, when you see--the IT Administrator
is going to be granting access to the data

00:37:31.900 --> 00:37:38.200
for the entire organization at once. So it's
saying, "It's okay for this application, the

00:37:38.200 --> 00:37:42.680
SaaSy Payroll application to have access to
all of my users' Google Calendars." I'm going

00:37:42.680 --> 00:37:49.280
to grant that access. I trust this application
and I use a non-SSL of URLs. So I'm also saying,

00:37:49.280 --> 00:37:54.940
"I don't believe in believe in security at
one step." But we'll ignore that. You want

00:37:54.940 --> 00:38:00.809
to use that as a cell for access in your APIs
even if some of the APIs work without it.

00:38:00.809 --> 00:38:11.171
So then I hit Grant Data access
and enable the application. The SaaSy Payroll

00:38:11.171 --> 00:38:17.619
service has now been installed for all of
my users and enabled. So users can go to their

00:38:17.619 --> 00:38:26.530
email and go to what we call the universal
navigation bar which is that navigation at

00:38:26.530 --> 00:38:35.651
the top left here.
And they can click on the SaaSy Payroll application.

00:38:35.651 --> 00:38:41.710
I promise it really does work faster than
this in real life. One thing--click on the

00:38:41.710 --> 00:38:48.250
SaaSy Payroll application, the users is actually
immediately signed in to SaaSy Payroll, because

00:38:48.250 --> 00:38:53.160
the administrator had installed this application
and granted access for all the users in the

00:38:53.160 --> 00:39:00.420
organization. The user doesn't need to okay,
passing its identity. The dates are also already

00:39:00.420 --> 00:39:05.150
being added to Google Calendar. So every user
has their payroll dates on their calendar

00:39:05.150 --> 00:39:10.960
even though they didn't inter--individually
interact with the SaaSy Payroll application.

00:39:10.960 --> 00:39:14.870
I don't know about you but most people don't
visit the, you know, payroll application on

00:39:14.870 --> 00:39:18.720
a daily basis so this is great. They're getting
access to when they're getting paid and that's

00:39:18.720 --> 00:39:27.340
the information they need. So the future of
these protocols like I said it's really--it's

00:39:27.340 --> 00:39:32.119
really kind a crazy in the standards bodies.
There's a lot of things being discussed. There's

00:39:32.119 --> 00:39:37.280
a new version of OAuth that's in draft called
OAuth 2.0. It basically tries to make it a

00:39:37.280 --> 00:39:42.799
lot easier for application developers by eliminating
a lot of the cryptographic signing of these

00:39:42.799 --> 00:39:49.240
requests. That's the most complex part of
this. But there's not 100% agreement on it.

00:39:49.240 --> 00:39:55.579
Actually, one of the primary authors of the
draft has a blog, it was basically saying,

00:39:55.579 --> 00:40:00.201
"Making it easier isn't necessarily making
it more secure." And so I encourage you all

00:40:00.201 --> 00:40:04.569
to read up on that. His blog is actually in
the resources section which I'll show here

00:40:04.569 --> 00:40:13.270
shortly. So, OAuth 2.0 also does some things
around, making sure OAuth is compatible with

00:40:13.270 --> 00:40:18.150
mobile devices and desktop applications and
that's all documented in the spec. You can

00:40:18.150 --> 00:40:23.410
do some of that stuff with the previous version
of OAuth, but it wasn't explicitly documented.

00:40:23.410 --> 00:40:28.650
There's another project underway called OpenID
Connect. And the idea behind this is why not

00:40:28.650 --> 00:40:34.430
pass the identity information to an application
by building on top of the existing authorization

00:40:34.430 --> 00:40:41.359
protocol. So building on top of OAuth 2 to
allow the user to grant access to passing

00:40:41.359 --> 00:40:46.539
their identity, have one protocol instead
of two. You know, I'm very supportive of this

00:40:46.539 --> 00:40:51.560
but we'll see how this--we'll see how this
works out in the standards committee. There's

00:40:51.560 --> 00:40:58.220
a lot of active discussion, there's a lot
passionate people on this space. So here are

00:40:58.220 --> 00:41:02.381
some resources. We have Technical docs on
OpenID and OAuth. There's the OAuth Playground

00:41:02.381 --> 00:41:08.250
tool that I talked about. And then lastly,
there's the blog by one of the very prominent

00:41:08.250 --> 00:41:13.510
authors of the OAuth spec with a lot of debate
on it. So I would encourage you all to read

00:41:13.510 --> 00:41:16.550
that if you're really interested in these
protocols. Thank you very much.

