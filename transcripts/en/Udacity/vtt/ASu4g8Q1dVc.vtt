WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:05.753
The abstractions that the transport layer provides are endpoint,

00:00:05.753 --> 00:00:10.440
transport, channel, and connection. And I'll talk

00:00:10.440 --> 00:00:11.800
about each of these things in a little

00:00:11.800 --> 00:00:14.980
bit more detail. Endpoint you can think of

00:00:14.980 --> 00:00:19.920
as nothing but a protection domain or you can say it is a Java virtual machine.

00:00:19.920 --> 00:00:25.670
And it has a table of remote objects that it can access. And so this gives

00:00:25.670 --> 00:00:32.580
you a protection domain or a sandbox for execution of a server cord or

00:00:32.580 --> 00:00:37.040
a client cord can exist within the sandbox. That's what end point. Its basically

00:00:37.040 --> 00:00:40.290
a protection domain. Connection management, is the

00:00:40.290 --> 00:00:43.120
interesting piece that is what is about

00:00:43.120 --> 00:00:46.510
all the details of connecting these end

00:00:46.510 --> 00:00:51.640
points together. And in particular, the connection management

00:00:51.640 --> 00:00:57.850
of the transport layer of the Java Runtime system is responsible for setting up

00:00:57.850 --> 00:01:01.990
connections, tearing down connections, listening for incoming

00:01:01.990 --> 00:01:05.580
connections, and establishing the connection. And when a

00:01:05.580 --> 00:01:09.250
connection is established. Between two end points

00:01:09.250 --> 00:01:11.120
there's a distraction that I mentioned called

00:01:11.120 --> 00:01:14.200
transport comes into play. So, for instant

00:01:14.200 --> 00:01:17.610
between this end point, and this end point,

00:01:17.610 --> 00:01:21.120
thec connection manager decided to have udp

00:01:21.120 --> 00:01:25.230
transport. So a channel is established between this

00:01:25.230 --> 00:01:27.340
end point and this end point to do

00:01:27.340 --> 00:01:30.790
udp transport between these two end points. And

00:01:30.790 --> 00:01:33.720
so this is the functionality of the UDP

00:01:33.720 --> 00:01:37.540
transport that is incorporated in this transport layer.

00:01:37.540 --> 00:01:40.570
And similarly, between this endpoint and this endpoint,

00:01:40.570 --> 00:01:42.880
the connection manager decided to use a TCP

00:01:42.880 --> 00:01:45.270
channel, so the transport that is being used

00:01:45.270 --> 00:01:48.370
here is a TCP connection, both ends. We have

00:01:48.370 --> 00:01:50.960
a TCB connection at both ends to connecting

00:01:50.960 --> 00:01:54.340
this endpoint with this endpoint. Notice that a given

00:01:54.340 --> 00:01:57.660
endpoint, can have different transport for talking to

00:01:57.660 --> 00:02:01.370
different endpoints depending on a variety of parameters. What

00:02:01.370 --> 00:02:04.730
is the best way for this endpoint to talk

00:02:04.730 --> 00:02:08.250
to this endpoint may decide what kind of connection.

00:02:08.250 --> 00:02:13.160
This end point is going to establish with this end point. That is all part of

00:02:13.160 --> 00:02:16.190
connection management that is happening in the transport

00:02:16.190 --> 00:02:18.270
layer of the Java run time. And the

00:02:18.270 --> 00:02:22.820
connection manager is also responsible for locating the

00:02:22.820 --> 00:02:28.320
dispatcher for a remote method that is being invoked on this end point.

00:02:28.320 --> 00:02:33.930
So. A transport is listening on a channel. And when

00:02:33.930 --> 00:02:36.870
an invocation comes in, then this transport

00:02:36.870 --> 00:02:42.220
is responsible for identifying, or locating, the dispatcher

00:02:42.220 --> 00:02:44.990
on this domain, which will know how to

00:02:44.990 --> 00:02:47.910
carry out that invocation. And the connection managers

00:02:47.910 --> 00:02:50.870
also responsible for managing the liveness of the

00:02:50.870 --> 00:02:54.120
connection. Because, if any point goes away, it

00:02:54.120 --> 00:02:56.860
needs to know that and inform this domain

00:02:56.860 --> 00:02:58.840
that, oh this particular end point is gone.

00:02:58.840 --> 00:03:03.990
So, take the appropriate action. So that kind of liveness monitoring is part of

00:03:03.990 --> 00:03:06.960
connection management. So the last abstraction I

00:03:06.960 --> 00:03:09.640
mentioned is the notion of connection itself.

00:03:09.640 --> 00:03:16.130
So once a channel has been established. Then the transport can do IO on

00:03:16.130 --> 00:03:19.290
this channel using connections. So, the path

00:03:19.290 --> 00:03:23.900
for the transport layer is in connection management.

00:03:23.900 --> 00:03:27.410
It listens for an incoming request. When

00:03:27.410 --> 00:03:30.580
an incoming request comes in. It then establishes

00:03:30.580 --> 00:03:34.230
a channel, and the channel that is established

00:03:34.230 --> 00:03:37.080
for communication, which is a mutual agreement between

00:03:37.080 --> 00:03:39.630
these two endpoints. It choses a transport

00:03:39.630 --> 00:03:43.260
that is most appropriate for that and once

00:03:43.260 --> 00:03:46.580
the channel has been established, a connection. Is

00:03:46.580 --> 00:03:49.320
now made between this endpoint and this endpoint

00:03:49.320 --> 00:03:52.330
through this channel. And now these two endpoints

00:03:52.330 --> 00:03:54.750
can do I/O on the channel using the

00:03:54.750 --> 00:03:57.990
connection. So that's how the transport mechanism of

00:03:57.990 --> 00:04:02.660
RMI works. As we saw, the transport mechanism sits

00:04:02.660 --> 00:04:06.690
below the RRL layer. And so it allows

00:04:06.690 --> 00:04:09.320
all the object invocations to happen through the

00:04:09.320 --> 00:04:12.170
transport layer. And the RRL layer is the

00:04:12.170 --> 00:04:14.980
one that is deciding, what are the right transport

00:04:14.980 --> 00:04:19.089
to use depending on the location of the

00:04:19.089 --> 00:04:22.130
two endpoints, where the client is and where

00:04:22.130 --> 00:04:25.440
the server is. Depending on that, it might

00:04:25.440 --> 00:04:27.740
decide what would be the right transport to use.

00:04:27.740 --> 00:04:30.300
Whether it should use TCP or UDP and

00:04:30.300 --> 00:04:34.060
so on. And gives that command to the connection

00:04:34.060 --> 00:04:36.210
manager which is part of the transport layer

00:04:36.210 --> 00:04:40.120
of the software stack. So that the established channel

00:04:40.120 --> 00:04:46.290
can be established and then a connection can be used for actual transport. Of

00:04:46.290 --> 00:04:48.810
the implementation between the client and server.

00:04:49.810 --> 00:04:52.810
So in summary, the distributed object model of

00:04:52.810 --> 00:04:56.660
Java is a powerful vehicle for constructing

00:04:56.660 --> 00:05:00.170
network services and what we say in this

00:05:00.170 --> 00:05:03.290
lesson. Is a glimpse of the classes

00:05:03.290 --> 00:05:05.720
that are available in the distributed object model

00:05:05.720 --> 00:05:07.660
that makes the life of the developer

00:05:07.660 --> 00:05:11.300
easy in terms of creating network objects and

00:05:11.300 --> 00:05:17.540
making it visible for clients to use anywhere. And the power of the RRL layer in

00:05:17.540 --> 00:05:22.550
dynamically deciding how to make the client-server relationship.

00:05:22.550 --> 00:05:24.660
Similar to the sub contract mechanism that we

00:05:24.660 --> 00:05:26.710
saw in spring and we also saw the

00:05:26.710 --> 00:05:30.840
flexibility in the connection management. Allowing different kinds

00:05:30.840 --> 00:05:36.010
of transport exist between the client and the server depending on

00:05:36.010 --> 00:05:39.660
the location of the client and network conditions and so on.

