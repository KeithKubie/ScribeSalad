WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:02.830
Alright Michael, so see if you can tell me where we're

00:00:02.830 --> 00:00:05.530
going here. So, just as a reminder I've erased a bunch of

00:00:05.530 --> 00:00:08.818
stuff so I can make some room. We're trying to maximize

00:00:08.818 --> 00:00:11.892
this cost function, J prime sub pi, which is basically the sum

00:00:11.892 --> 00:00:15.930
of the mutual information between every single feature and its parents.

00:00:15.930 --> 00:00:19.200
And I want to point out that that actually induces a graph. In

00:00:19.200 --> 00:00:23.070
fact a fully connected graph. So here, I've drawn a bunch of

00:00:23.070 --> 00:00:26.310
nodes as part of a graph, and all the edges between them.

00:00:26.310 --> 00:00:28.460
Each one of these nodes is going to represent a feature,

00:00:28.460 --> 00:00:31.200
an X of I and what's going to go on the edges,

00:00:31.200 --> 00:00:33.730
is going to be the mutual information between them. So,

00:00:33.730 --> 00:00:36.870
I know have a fully connected graph, which has the mutual

00:00:36.870 --> 00:00:41.010
information between each pair of nodes. All in squared edges,

00:00:41.010 --> 00:00:44.280
and I want to find a sub graph of this graph,

00:00:44.280 --> 00:00:49.130
in particular a tree. That maximizes these sums. So, any

00:00:49.130 --> 00:00:51.340
ideas how I do that, Michael? First off, does that make

00:00:51.340 --> 00:00:52.020
sense what I just said?

00:00:52.020 --> 00:00:54.190
&gt;&gt; Yeah, yeah, yeah, I mean it's, it's

00:00:54.190 --> 00:00:56.550
very interesting right. So we're trying to pick, each,

00:00:56.550 --> 00:00:59.220
each time we pick an edge, it's actually saying

00:00:59.220 --> 00:01:01.160
that what we, we're going to care about the relationship

00:01:01.160 --> 00:01:03.170
between this pair of variables. And we're only

00:01:03.170 --> 00:01:05.480
allowing edges. We're not allowing, because they, they, that

00:01:05.480 --> 00:01:08.282
involves 2 nodes. We're not getting sets of 3,

00:01:08.282 --> 00:01:10.578
or 5, or however many nodes larger than that.

00:01:10.578 --> 00:01:12.350
&gt;&gt; Mm-hm. And so what we want, is we want to

00:01:12.350 --> 00:01:16.080
be considering a subset of edges, that form a tree,

00:01:16.080 --> 00:01:20.670
that has the highest total information content. This is correct.

00:01:20.670 --> 00:01:22.500
&gt;&gt; And that's a minimum spanning tree.

00:01:22.500 --> 00:01:23.570
&gt;&gt; Well, not quite.

00:01:23.570 --> 00:01:25.990
&gt;&gt; That's a maximum spanning tree.

00:01:25.990 --> 00:01:28.200
&gt;&gt; That's exactly right. It turns out that finding the

00:01:28.200 --> 00:01:31.890
tree consistent with this graph, such that this is true,

00:01:31.890 --> 00:01:34.590
is in fact the same thing as finding the maximum

00:01:34.590 --> 00:01:38.920
spanning tree. Which we all vaguely remember from our algorithms class.

00:01:38.920 --> 00:01:41.150
&gt;&gt; So you said, it was terribly painful, but it's actually not.

00:01:41.150 --> 00:01:41.510
This is a

00:01:41.510 --> 00:01:44.140
&gt;&gt; No, I said, it's, it's terribly easily painful.

00:01:44.140 --> 00:01:45.920
&gt;&gt; So, that's really neat. We turn to

00:01:45.920 --> 00:01:48.520
problem of finding the best distribution, and in

00:01:48.520 --> 00:01:51.900
particular the best dependency tree, independent of the

00:01:51.900 --> 00:01:53.966
true underlying distribution, I want to point out, into

00:01:53.966 --> 00:01:56.630
a problem of some, of a well-known, well

00:01:56.630 --> 00:01:59.050
understood computer science problem, of finding the maximum

00:01:59.050 --> 00:02:01.930
spanning tree. If we find the maximum spanning

00:02:01.930 --> 00:02:03.530
tree. Then we have found the best dependency tree.

00:02:03.530 --> 00:02:06.670
&gt;&gt; So, to be honest, I don't remember maximum spanning tree.

00:02:06.670 --> 00:02:09.400
Minimum spanning tree, can we just solve a maximum spanning

00:02:09.400 --> 00:02:12.680
tree problem by, I don't know, negating the edges or, or

00:02:12.680 --> 00:02:12.930
&gt;&gt; Yes.

00:02:12.930 --> 00:02:13.970
&gt;&gt; Adding, okay.

00:02:13.970 --> 00:02:17.460
&gt;&gt; That's exactly right. So, everywhere in there, where you pick a max,

00:02:17.460 --> 00:02:22.380
you pick a min or you just label them with the negative of

00:02:22.380 --> 00:02:25.170
the mutual information and it's the same thing. I think that this particular

00:02:25.170 --> 00:02:28.340
form of writing as a maximum mutual information, is easier to think about.

00:02:28.340 --> 00:02:29.970
&gt;&gt; Okay.

00:02:29.970 --> 00:02:31.935
&gt;&gt; And what you'll do when you find the maximum

00:02:31.935 --> 00:02:37.570
spanning tree, is you'll end up with, in fact some tree. And you're done.

00:02:37.570 --> 00:02:39.340
&gt;&gt; Well, so now you need to tell me, because

00:02:39.340 --> 00:02:41.990
the structure was a directed structure. So, dude, so can

00:02:41.990 --> 00:02:43.880
we then pick any node then call it the root

00:02:43.880 --> 00:02:46.320
and then do a, like a depth first reversal or something?

00:02:46.320 --> 00:02:48.672
&gt;&gt; Absolutely. So, first off, I want to point out

00:02:48.672 --> 00:02:50.090
there's 2 different algorithms that you could use. Do you

00:02:50.090 --> 00:02:51.460
remember the two algorithms you could use to find

00:02:51.460 --> 00:02:54.560
the maximum spanning tree? Or the 2 famous ones anyway?

00:02:54.560 --> 00:02:56.920
&gt;&gt; I'm going to go with Prim and Kruskal but I know there's others.

00:02:56.920 --> 00:02:59.810
No, those are the two that, that they teach you in algorithms class. And

00:02:59.810 --> 00:03:03.050
it turns out for this particular one, you want to use prim. Because, prim is,

00:03:03.050 --> 00:03:03.505
&gt;&gt; Proper.

00:03:03.505 --> 00:03:06.590
&gt;&gt; [LAUGH] It is proper, prim and proper. Prim is the proper algorithm to

00:03:06.590 --> 00:03:11.240
use whenever you have a strongly connected graph, it just happens to be faster.

00:03:11.240 --> 00:03:12.780
&gt;&gt; You mean densely connect to graph.

00:03:12.780 --> 00:03:14.060
&gt;&gt; What did I say?

00:03:14.060 --> 00:03:14.540
&gt;&gt; Strongly.

00:03:14.540 --> 00:03:16.490
&gt;&gt; Okay, densely connected. Right, a densely connected

00:03:16.490 --> 00:03:17.530
graph and by the way, this is a

00:03:17.530 --> 00:03:19.190
fully connected graph, which is about as dense

00:03:19.190 --> 00:03:21.790
a connected graph as you can get. [LAUGH] So,

00:03:21.790 --> 00:03:26.060
Prim's algorithm runs in time quadratic or polynomial anyway in

00:03:26.060 --> 00:03:29.270
the number of edges. And so it's actually fairly efficient

00:03:29.270 --> 00:03:31.550
as things go, because as we know in theory if

00:03:31.550 --> 00:03:34.500
it's polynomial, it might as well be free. There you go.

00:03:34.500 --> 00:03:35.074
&gt;&gt; [LAUGH]

00:03:35.074 --> 00:03:36.290
&gt;&gt; So use Prim's algorithm, you find

00:03:36.290 --> 00:03:39.088
the Maximum Spanning Tree, and you are done.

00:03:39.088 --> 00:03:42.050
&gt;&gt; Alright, I'm going to need reminding where

00:03:42.050 --> 00:03:43.870
we, where this is all plugging in.

00:03:43.870 --> 00:03:44.450
&gt;&gt; Okay.

00:03:44.450 --> 00:03:44.510
&gt;&gt; because.

00:03:44.510 --> 00:03:45.720
&gt;&gt; That's exactly what I was going to.

00:03:45.720 --> 00:03:47.208
&gt;&gt; because, this is a cool diversion, but.

00:03:47.208 --> 00:03:49.960
&gt;&gt; Right, so this is actually worth pointing out this

00:03:49.960 --> 00:03:51.330
was a bit of a diversion that we had to

00:03:51.330 --> 00:03:53.520
do. Let's go back to the original algorithm that we

00:03:53.520 --> 00:03:55.593
had, and just point out what we would be doing here.

