WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Now, a lot of computer science students bristle a little bit when they take an algorithms class,

00:00:05.000 --> 00:00:07.000
because of the heavy emphasis on mathematics.

00:00:07.000 --> 00:00:10.000
A lot of us got involved in computer science because we really like doing stuff

00:00:10.000 --> 00:00:12.000
and not necessarily doing math.

00:00:12.000 --> 00:00:16.000
But nevertheless, I think there's a very strong case to be made for the importance

00:00:16.000 --> 00:00:20.000
of mathematics in computer science and in algorithm design in particular.

00:00:20.000 --> 00:00:23.000
I'd argue that there are three natural ways that theory stuff or math can really help.

00:00:23.000 --> 00:00:27.000
One is to just get you thinking clearly about what it is that you're trying to accomplish.

00:00:27.000 --> 00:00:31.000
It's very easy when you're in the depths of writing code to lose track

00:00:31.000 --> 00:00:34.000
of what it is that you want the code to actually do.

00:00:34.000 --> 00:00:37.000
Just thinking formally about what you're doing is something

00:00:37.000 --> 00:00:39.000
that using your mathematical background can help with.

00:00:39.000 --> 00:00:44.000
Another thing that it can be very helpful with is analyzing the efficiency of what you've produced.

00:00:44.000 --> 00:00:48.000
You can actually know where there are spots where you could be doing a better job

00:00:48.000 --> 00:00:51.000
and have the code be running more effectively and more efficiently

00:00:51.000 --> 00:00:53.000
without producing incorrect code.

00:00:53.000 --> 00:00:57.000
Just taking a moment to think a little mathematically can be a huge win

00:00:57.000 --> 00:00:59.000
and save you tremendous amounts of time.

00:00:59.000 --> 00:01:01.000
It sounds very important, right?

00:01:01.000 --> 00:01:04.000
Now, this notion of efficiency is actually very important to think about.

00:01:04.000 --> 00:01:06.000
What is it that you want your program to do efficiently.

00:01:06.000 --> 00:01:09.000
Do you want it to be fast in terms of time?

00:01:09.000 --> 00:01:11.000
Do you want it to be efficient in terms of the amount of memory

00:01:11.000 --> 00:01:15.000
on the computer that it uses, so it does its work with as little memory as possible?

00:01:15.000 --> 00:01:18.000
These days more and more people are worrying about energy usage.

00:01:18.000 --> 00:01:21.000
Are there ways of organizing your computation so that it is efficient

00:01:21.000 --> 00:01:23.000
in terms of the amount of power that it uses.

00:01:23.000 --> 00:01:27.000
The tools that we develop in this course are going to be useful across the board here,

00:01:27.000 --> 00:01:30.000
but we're going to mainly focus on issues of time.

00:01:30.000 --> 00:01:34.000
To get you thinking about algorithms and how they work and what makes them correct

00:01:34.000 --> 00:01:37.000
and how to make them more efficient, let's go through an example together.

00:01:37.000 --> 00:01:39.000
Here is a little bit of Python code that I wrote.

00:01:39.000 --> 00:01:43.000
It's a routine called naÃ¯ve, because I'm not telling you yet what it actually is doing.

00:01:43.000 --> 00:01:48.000
What it takes in as input are two integer-valued variables

00:01:48.000 --> 00:01:50.000
that are none negative, and then it does some assignments

00:01:50.000 --> 00:01:52.000
and recalculations and a while loop.

00:01:52.000 --> 00:01:55.000
It runs for a little bit and then it returns z.

00:01:55.000 --> 00:01:58.000
What I'd like you to do is take a look at this. It's not very long.

00:01:58.000 --> 00:02:02.000
It's probably not completely obvious to you right away what it is that it's doing.

00:02:02.000 --> 00:02:05.000
I encourage you to run this in Python.

00:02:05.000 --> 00:02:07.000
Give it some example inputs and outputs.

00:02:07.000 --> 00:02:10.000
See if you can come up with a pattern for what it is that it's doing,

00:02:10.000 --> 00:02:12.000
and then convince yourself why.

00:02:12.000 --> 00:02:14.000
Once you have a hypothesis as to what it's doing,

00:02:14.000 --> 00:02:18.000
see if you can figure out how you can convince yourself that this program actually

00:02:18.000 --> 00:02:20.000
is computing what you think it's computing.

00:02:20.000 --> 00:02:23.000
Then I want you to fill out the following quiz.

00:02:23.000 --> 00:02:27.000
You can take this code, and you can run it for any particular value of a and b,

00:02:27.000 --> 00:02:31.000
but I want you to think about what it does in general as a function of a and b.

00:02:31.000 --> 00:02:35.000
When you run naive(a, b) does it return whichever of a or b is the larger one?

00:02:35.000 --> 00:02:40.000
Does it calculate a - b, or for that matter, does it calculate b - a?

00:02:40.000 --> 00:02:42.000
Does it calculate the sum of a and b?

00:02:42.000 --> 09:59:59.000
Does it calculate the product of a and b?

