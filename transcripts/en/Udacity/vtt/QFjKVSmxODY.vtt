WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:02.090
Okay, so now that we've used beautiful soup to parse

00:00:02.090 --> 00:00:05.190
this HTML, so that we can extract the values we

00:00:05.190 --> 00:00:08.260
need to pass along in our post request, let's talk

00:00:08.260 --> 00:00:11.840
about why these values are here. Well, as many websites

00:00:11.840 --> 00:00:16.530
do, this particular data source uses these values to validate

00:00:16.530 --> 00:00:19.580
each request that comes in. And if you're really interested

00:00:19.580 --> 00:00:22.380
in specifically how, for example, View State is used, I'd

00:00:22.380 --> 00:00:25.160
encourage you to look in the ASP documentation, to see

00:00:25.160 --> 00:00:28.240
how those types of servers use that particular type of

00:00:28.240 --> 00:00:32.100
value. Okay, so just in case it's not clear. What

00:00:32.100 --> 00:00:35.010
we have to do first is submit an initial request

00:00:35.010 --> 00:00:38.150
and then use the response that we get back, specifically the

00:00:38.150 --> 00:00:41.490
values for view state and event validation in order to

00:00:41.490 --> 00:00:45.450
make any subsequent poster request. So let's take a look

00:00:45.450 --> 00:00:47.060
at the code. Now, one thing I want to point

00:00:47.060 --> 00:00:50.260
out, something that I didn't mention last time is that here,

00:00:50.260 --> 00:00:52.860
we've actually hard coded in the value for

00:00:52.860 --> 00:00:56.220
airport less and carrier list. But of course, what

00:00:56.220 --> 00:00:59.030
we'd be doing is actually looping through all possible

00:00:59.030 --> 00:01:02.320
combinations of values in our airport list and carrier

00:01:02.320 --> 00:01:05.730
list, from the data that we extracted using

00:01:05.730 --> 00:01:09.550
this code. Okay, so in this code, we're making

00:01:09.550 --> 00:01:12.340
an initial get request, parsing the response to get

00:01:12.340 --> 00:01:15.380
the viewstate and eventvalidation, and then submitting a subsequent

00:01:15.380 --> 00:01:20.400
post request. Let's run it! Okay. Here we're writing

00:01:20.400 --> 00:01:23.640
this out to a file called virgin_and_logan_airport.html. Let's go

00:01:23.640 --> 00:01:26.880
take a look at that file. Here it is.

00:01:26.880 --> 00:01:29.350
And of course we're going to lose style information because

00:01:29.350 --> 00:01:31.620
relative references will all be broken. we're not actually

00:01:31.620 --> 00:01:33.940
pulling the CSS or java script files that are

00:01:33.940 --> 00:01:37.260
referenced in this HTML file. So, instead of the

00:01:37.260 --> 00:01:40.580
data that we wanted, instead we're getting a syntax error.

00:01:40.580 --> 00:01:42.250
So we need to figure out what's going on there.

