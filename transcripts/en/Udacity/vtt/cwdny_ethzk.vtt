WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now, we’re finally ready to take a detailed look at several coverage metrics, 

00:00:03.000 --> 00:00:07.000
and the first thing to keep in mind, there is a large number of test coverage metrics out there. 

00:00:07.000 --> 00:00:12.000
In the supplemental material for this class, what I’m going to do is link to a nice article, 

00:00:12.000 --> 00:00:14.000
which list 101 test coverage metrics. 

00:00:14.000 --> 00:00:17.000
At first, that sounds a little bit of a joke, but if you take a look at the list, 

00:00:17.000 --> 00:00:20.000
what you see is that it’s not too hard to imagine situations in which 

00:00:20.000 --> 00:00:22.000
most of these metrics are actually useful. 

00:00:22.000 --> 00:00:24.000
And if you read it, you can see that these things would probably 

00:00:24.000 --> 00:00:27.000
actually find bugs in real software systems. 

00:00:27.000 --> 00:00:31.000
So, what I’m going to do here is talk about a fairly small number of coverage metrics that matter

00:00:31.000 --> 00:00:35.000
for everyday programming life and I’m going to talk about a few more that are interesting 

00:00:35.000 --> 00:00:39.000
for one reason or another because it can get inside into software testing 

00:00:39.000 --> 00:00:41.000
for which you probably want actually use in practice. 

00:00:41.000 --> 00:00:44.000
So, the first metric we’re going to worked out is called statement coverage 

00:00:44.000 --> 00:00:47.000
and this is in fact the one that is measured by the fault 

00:00:47.000 --> 00:00:49.000
by the Python test coverage total where we looked at.

00:00:49.000 --> 00:00:52.000
And so, you already had a pretty good idea of what it does, 

00:00:52.000 --> 00:00:54.000
so let’s just go through it in a little bit more detail. 

00:00:54.000 --> 00:00:57.000
So, let’s just use this very simple four line codes that I put as an example 

00:00:57.000 --> 00:00:59.000
and let’s try to measure its’ statement coverage. 

00:00:59.000 --> 00:01:02.000
So, let’s say we call this code with x=0 and y=-1. 

00:01:02.000 --> 00:01:06.000
Well, in that case, this x is 0 test is going to pass 

00:01:06.000 --> 00:01:09.000
and so y is going to be incremented by 1 making y=0. 

00:01:09.000 --> 00:01:14.000
Now, if y=0 will also passes in sort of an increment acts. 

00:01:14.000 --> 00:01:19.000
The four statements in this code fragment, if we enter this code fragment with x=0 and y=-1, 

00:01:19.000 --> 00:01:21.000
all four will be executed. 

00:01:21.000 --> 00:01:24.000
So, this will give us a statement coverage of 100%. 

00:01:24.000 --> 00:01:27.000
So, that’s pretty obvious. It’s really quick, so let’s sort of call it with different values. 

00:01:27.000 --> 00:01:31.000
So now, we call this code with x=20 and y=20. 

00:01:31.000 --> 00:01:34.000
Both tests will fail, and so, we'll end up executing both of the test 

00:01:34.000 --> 00:01:38.000
but neither of them branches of the test, 

00:01:38.000 --> 00:01:42.000
and so, we will end up with a code coverage or 2/4 statements or 50%. 

00:01:42.000 --> 00:01:47.000
While we’re on the subject of statement coverage, I would like to also mention line coverage. 

00:01:47.000 --> 00:01:49.000
This is very similar to statement coverage, 

00:01:49.000 --> 00:01:52.000
but the metric is tied to actual physical lines in the source code. 

00:01:52.000 --> 00:01:55.000
And so, in this case, there is only one statement for each line, 

00:01:55.000 --> 00:01:58.000
so statement coverage and line coverage would be exactly identical. 

00:01:58.000 --> 00:02:03.000
But on the other hand, if we decided to write some code that had multiple statements per line, 

00:02:03.000 --> 00:02:06.000
line coverage would conflate them where a statement coverage would consider them

00:02:06.000 --> 00:02:09.000
individual statements, for most practical purposes, these are very similar. 

00:02:09.000 --> 00:02:12.000
So, statement coverage has a slightly finer granularity.

