WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.020
IBM were thinking of launching the 360
series computers that would be byte

00:00:04.020 --> 00:00:09.469
addressable. In the early 60s there
was a well-known committee that decided

00:00:09.469 --> 00:00:16.529
the character codes we use today - the
ASCII committee (American Standard Code

00:00:16.529 --> 00:00:22.199
for Information Interchange). [In the] early
60s IBM approved of it - they even

00:00:22.199 --> 00:00:28.910
had delegates on the Board. So then the
embarrassing questions start coming in.

00:00:28.910 --> 00:00:32.850
OK, so there's these 8-bit characters
where are they going to come from?

00:00:32.850 --> 00:00:37.170
They're gonna be ASCII aren't they? And
IBM coughed and blushed and spluttered

00:00:37.170 --> 00:00:43.079
and said: "We'll make a statement in due 
course". And a lot of us saw what was going to

00:00:43.079 --> 00:00:51.090
come up here. They'd had half a century
of evolving their own codes, which were

00:00:51.090 --> 00:00:56.670
based on BCD - binary coded decimal.
(More about that, possibly, later). And they

00:00:56.670 --> 00:01:00.750
just, kind of, evolved. 

00:01:00.750 --> 00:01:09.840
The salespeople were going bananas saying: 
"Look, boss, this 360 series. Right?! If you're
saying it can't use our existing codings on our

00:01:09.840 --> 00:01:15.950
card punch -  which we've been using for
years ... because BCD had become EBCDIC:

00:01:15.950 --> 00:01:20.130
Extended Binary Coded Decimal
Interchange Code. And that was the IBM

00:01:20.130 --> 00:01:26.880
way. But it came along with six versions of that
for historical reasons. Shh!! Even now I

00:01:26.880 --> 00:01:31.950
don't know if you can get out of IBM
that document, that shamefacedly owns up

00:01:31.950 --> 00:01:36.299
to six different versions of EBCDIC.
Look it up on Wikipedia. It's hilarious!

00:01:36.299 --> 00:01:43.200
It really is. So, basically, the salesmen said:
"Look, if we can still use our peripherals

00:01:43.200 --> 00:01:47.729
with this new machinery, we can ship
quickly. If we start messing about saying:

00:01:47.729 --> 00:01:51.420
'We will be totally ASCII tested and
compliant before we ship', we're going to

00:01:51.420 --> 00:01:58.020
lose a huge segment, potentially, of our
market to our competitors". So, why not

00:01:58.020 --> 00:02:02.430
just say: "You know where you are with IBM.
You're not really interested in these

00:02:02.430 --> 00:02:05.370
technical details. We'll hold your hand".

00:02:05.370 --> 00:02:12.990
But, under the hood, we will carry on using 
EBCDIC as our characters, and I've no

00:02:12.990 --> 00:02:17.700
doubt the comments will be full of
'Typical IBM Attitudes!' about

00:02:17.700 --> 00:02:22.170
this. But you could see that, commercially
for them, it made sense. Oh! by the way

00:02:22.170 --> 00:02:27.240
Sean, have you noticed. It has an
unforeseen side effect, this! It locks

00:02:27.240 --> 00:02:31.860
people into using IBM machinery for 
evermore, because they'll be utterly

00:02:31.860 --> 00:02:35.340
non-standard! Everybody else will be
using ASCII! Is this a bug, or is it a

00:02:35.340 --> 00:02:40.320
feature, you know. And I do believe - and 
I think while we discussed it before - I

00:02:40.320 --> 00:02:44.100
do believe that, even now,
IBM replacement mainframes will be using

00:02:44.100 --> 00:02:49.260
EBCDIC inside. But did they eventually
get the message and come properly into

00:02:49.260 --> 00:02:55.890
the modern world? Yes, they did,  but it
took a time, because, as far as I know,

00:02:55.890 --> 00:03:01.410
some of the earliest machines [apart from the IBM PC]
to actually use ASCII - that were IBM - was

00:03:01.410 --> 00:03:07.740
when IBM discovered UNIX,  and decided:
"Oh! there's all these servers...  UNIX ... other

00:03:07.740 --> 00:03:11.730
people doing it - let's do it the IBM way,
at great expense". But for our customers,

00:03:11.730 --> 00:03:16.080
who don't mind spending money with us:
"We'll say: ' Here's the IBM way to do Unix' ".

00:03:16.080 --> 00:03:21.840
Well, their AIX - I think it's called -
servers, do of course use ASCII. Life would

00:03:21.840 --> 00:03:27.810
be intolerable for them if it didn't! So,
in a way, the EBCDICity of it could be

00:03:27.810 --> 00:03:33.150
confined to the mainframes and kept
behind the IBM wall, as it were. But just

00:03:33.150 --> 00:03:38.120
occasionally problems from EBCDIC
leapt out into the outside world,

00:03:38.120 --> 00:03:43.110
sometimes as a result of IBM trying to
be "helpful". Would you like to have your

00:03:43.110 --> 00:03:48.720
ASCII-based PDF accidentally, or
deliberately, stored and forwarded by an

00:03:48.720 --> 00:03:53.430
EBCDIC machine, that probably thought it
was part of its duty to translate all

00:03:53.430 --> 00:03:57.690
this rogue ASCII into EBCDIC, for
internal use, and then translate it back

00:03:57.690 --> 00:04:02.400
into ASCII again. on the way out?
I remember Jim King, of Adobe, telling me it

00:04:02.400 --> 00:04:07.800
was his biggest nightmare for ages was
this. Y' know IBM trying to be "helpful"

00:04:07.800 --> 00:04:14.220
Yeah! store-and-forward EBCDIC-based
machines. He said:  "Y'know I tried to

00:04:14.220 --> 00:04:20.420
discover what the common characters were
between ASCII and EBCDIC. How much

00:04:20.420 --> 00:04:25.670
commonality is there? [There's] got to be a lot. There
must be 100-odd characters which are in

00:04:25.670 --> 00:04:29.080
different mapped positions, but
nevertheless they correspond one-to-one.

00:04:29.080 --> 00:04:34.690
Well, first problem is, for C programmers,
there's no curly braces  {  }  in EBCDIC.

00:04:34.690 --> 00:04:39.050
I don't know how they got around that? I'm
guessing something like: "Use

00:04:39.050 --> 00:04:44.930
\(, or something, for { " ?
I don't know. And anyway Jim

00:04:44.930 --> 00:04:49.040
said: "We finally decided at Adobe
there were 80 safe characters that

00:04:49.040 --> 00:04:53.420
were inter-mappable between the two. We
were wrong! It depends which of the six

00:04:53.420 --> 00:04:57.680
versions of EBCDIC you were using!
I think in the end they decided there

00:04:57.680 --> 00:05:03.080
were only 64 absolutely safe characters,
that could be interconverted between the

00:05:03.080 --> 00:05:10.130
two. So I think the moral of all this is
that, of course, increasingly EBCDIC is

00:05:10.130 --> 00:05:19.580
now utterly confined to the - I guess -
" ... replacement hardware why bother to

00:05:19.580 --> 00:05:23.990
re-program it. It was written in COBOL
in 1965, it's still working, we just want

00:05:23.990 --> 00:05:28.580
faster hardware to run it on". Good old
IBM. Supply what the customers want - just

00:05:28.580 --> 00:05:33.830
sign here!  I mean, I speak as one who's
seen a Meg-In-A-Box delivered by IBM.

00:05:33.830 --> 00:05:41.570
It was a 360/70 (?),  I think it
was? And a lot of very worthy people

00:05:41.570 --> 00:05:44.840
were doing very good data processing
using COBOL, and all this kind of stuff.

00:05:44.840 --> 00:05:51.430
And the thing was so unbelievably slow
and two IBM salesman came, buttoned up,

00:05:51.430 --> 00:05:57.050
holding ... well, we here in England .. only the
Chancellor holds up a red box with a

00:05:57.050 --> 00:06:01.310
budget statement. These [IBM] guys were holding
this box. I just happened to be there and

00:06:01.310 --> 00:06:05.930
I think think the computer center
manager's name was Don.  The luckless 

00:06:05.930 --> 00:06:11.150
Don was faced with these guys holding
this black box and they said: "Don we hear,

00:06:11.150 --> 00:06:15.890
via back-channels from your users, they
are not happy with the performance of

00:06:15.890 --> 00:06:21.160
your machine. on the ... " - is it called `IAS' 
[actually IMS] their database system? I forget now.

00:06:21.160 --> 00:06:28.100
"Anyway, they're not happy Don! We have the
solution for you! "What's that?!", says the luckless

00:06:28.100 --> 00:06:31.910
Don, the blood draining from his face. 
"Don - it's a Meg-in-A-Box"

00:06:31.910 --> 00:06:36.830
And they took out two things that
look more like television cabling with

00:06:36.830 --> 00:06:43.640
coaxial plugs on the end, they plug them into the Meg-
in-A-Box and they say: "Open up the CPU case, Don!"

00:06:43.640 --> 00:06:48.620
- who's watching all this happening. They
put these things in there: "OK, Re-gen -  I

00:06:48.620 --> 00:06:52.430
think that's the IBM word is it? -  Re-gen
the system [and] tell it it's got a

00:06:52.430 --> 00:06:57.260
megabyte more memory". So the Re-gen was
done. Honestly the thing went off like a

00:06:57.260 --> 00:07:00.440
Lamborghini compared to what it was doing before.

00:07:00.440 --> 00:07:05.420
And the next thing, almost literally, was  the
queue of users outside the door ... because

00:07:05.420 --> 00:07:09.200
of course then the IBM salesmen depart!
"Hey, just leave it there!

00:07:09.200 --> 00:07:17.870
Let your users get used to it, Don ! Yeah! and
all this, and  the users are outside Don's door in a

00:07:17.870 --> 00:07:22.790
matter of nanoseconds, saying:
"Don! -  that memory stays! [If] that memory goes

00:07:22.790 --> 00:07:26.960
you die!  This machine's wonderful this is
the way it should have been!".  And, of

00:07:26.960 --> 00:07:30.980
course, the bill was presented for the
Meg-in-A-Box, but of course could now

00:07:30.980 --> 00:07:36.500
be done as a properly supplied unit. But,
just for now, I think it was something

00:07:36.500 --> 00:07:42.410
like $10,000 [probably a lot more ...]  $10,000 for a 
Meg of .... but it was IBM memory, Sean, it was so fast!

00:07:42.410 --> 00:07:47.630
The users were happy, I actually saw it in
operation. That's the way it worked, you

00:07:47.630 --> 00:07:52.970
know: "You've got a lot of money. You know
it makes sense. Don't take chances!"

00:07:52.970 --> 00:07:57.890
They won't sack [=US "fire"] you Don, for 
spending $10,000 on a Meg, so long as it's 

00:07:57.890 --> 00:08:04.449
with IBM.  There we are.

