WEBVTT
Kind: captions
Language: en

00:00:07.215 --> 00:00:08.790
MARTIN GORNER: Hello
and welcome back

00:00:08.790 --> 00:00:10.230
to root access Berlin.

00:00:10.230 --> 00:00:14.870
We are recording again from the
new studio at the factory,

00:00:14.870 --> 00:00:18.270
and today I have with me
Mustafa Sezgin from

00:00:18.270 --> 00:00:19.732
SoundCloud.

00:00:19.732 --> 00:00:20.330
Hello Mustafa.

00:00:20.330 --> 00:00:21.100
MUSTAFA SEZGIN: Hi.

00:00:21.100 --> 00:00:22.280
MARTIN GORNER: Can you
introduce yourself?

00:00:22.280 --> 00:00:22.700
MUSTAFA SEZGIN: Sure.

00:00:22.700 --> 00:00:26.690
So I'm the director of mobile
engineering at SoundCloud, and

00:00:26.690 --> 00:00:30.470
I lead up basically the native
mobile applications and the

00:00:30.470 --> 00:00:33.750
development of those at
SoundCloud at the moment.

00:00:33.750 --> 00:00:36.390
MARTIN GORNER: And so you wanted
to tell us about a

00:00:36.390 --> 00:00:40.360
design pattern that you have
recently started using at

00:00:40.360 --> 00:00:41.215
SoundCloud.

00:00:41.215 --> 00:00:41.710
MUSTAFA SEZGIN: Yeah.

00:00:41.710 --> 00:00:45.450
So one of the common problems
that we have on native mobile

00:00:45.450 --> 00:00:49.250
applications is having to
obviously have a responsive

00:00:49.250 --> 00:00:52.390
user interface, and to do that,
you generally need to

00:00:52.390 --> 00:00:56.550
jump off the main UI thread to
retrieve some work where the

00:00:56.550 --> 00:00:59.250
information comes from some IO
source, whether that's from

00:00:59.250 --> 00:01:01.950
the network or from the data.

00:01:01.950 --> 00:01:05.300
There are a lot of components
build in to some of these SDKs

00:01:05.300 --> 00:01:10.260
that help with that, but one of
the recent frameworks that

00:01:10.260 --> 00:01:15.580
we've started to use is RxJava,
which was developed by

00:01:15.580 --> 00:01:19.270
the Netflix guys who have come
together and put together

00:01:19.270 --> 00:01:21.100
really good library.

00:01:21.100 --> 00:01:26.100
And we've started to use that
to kind of replace a lot of

00:01:26.100 --> 00:01:29.680
the work that we do when
retrieving information,

00:01:29.680 --> 00:01:31.810
whether it be from the database
or from our back end

00:01:31.810 --> 00:01:33.510
APIs at the moment.

00:01:33.510 --> 00:01:36.253
MARTIN GORNER: And so you wanted
to show us a demo--

00:01:36.253 --> 00:01:37.240
MUSTAFA SEZGIN: Yep.

00:01:37.240 --> 00:01:39.790
MARTIN GORNER: --of one of the
flows that you have refactored

00:01:39.790 --> 00:01:40.960
using this reactive
programming--

00:01:40.960 --> 00:01:41.360
MUSTAFA SEZGIN: Yes.

00:01:41.360 --> 00:01:44.240
MARTIN GORNER: --in your
Android application.

00:01:44.240 --> 00:01:45.180
MUSTAFA SEZGIN: That's
correct, yeah.

00:01:45.180 --> 00:01:46.400
MARTIN GORNER: So let's
see the demo.

00:01:46.400 --> 00:01:47.250
MUSTAFA SEZGIN: Sure.

00:01:47.250 --> 00:01:49.050
There's a number of areas
where we've done that

00:01:49.050 --> 00:01:51.070
refactoring, but I'll show
you one of the screens

00:01:51.070 --> 00:01:51.890
where we've done this.

00:01:51.890 --> 00:01:54.820
So, for a user who basically
wants to sign up, they come

00:01:54.820 --> 00:01:57.300
in, we've already got a Google
account on here.

00:01:57.300 --> 00:02:00.670
So we'll sign in with Google,
we accept that.

00:02:00.670 --> 00:02:03.125
That logs us in.

00:02:03.125 --> 00:02:06.670
And we'll see here, this is our
onboard in process where

00:02:06.670 --> 00:02:08.789
we're able to actually see
a number of different

00:02:08.789 --> 00:02:09.560
categories.

00:02:09.560 --> 00:02:13.530
For someone who's just signed
up, they can basically find

00:02:13.530 --> 00:02:15.490
some of their favorite
artists, maybe.

00:02:15.490 --> 00:02:19.220
So if they like rock, they can
go in here and they can see

00:02:19.220 --> 00:02:21.172
all the different artists.

00:02:21.172 --> 00:02:24.590
MARTIN GORNER: And so this data
is something you pull

00:02:24.590 --> 00:02:25.560
from your server?

00:02:25.560 --> 00:02:25.950
MUSTAFA SEZGIN: That's
correct.

00:02:25.950 --> 00:02:28.240
MARTIN GORNER: The list of
genres and the list of the top

00:02:28.240 --> 00:02:30.440
artists in these genres.

00:02:30.440 --> 00:02:38.240
What we want to do here is on
the device call a network API,

00:02:38.240 --> 00:02:42.000
so something that returns data
from the SoundCloud APIs.

00:02:42.000 --> 00:02:43.280
MUSTAFA SEZGIN: Yep.

00:02:43.280 --> 00:02:47.850
MARTIN GORNER: And process those
data, get them back on

00:02:47.850 --> 00:02:49.600
the menu [INAUDIBLE]
and display them.

00:02:49.600 --> 00:02:53.250
So if I wanted to do this by
hand, because this is a very,

00:02:53.250 --> 00:02:56.630
very common problem, doing
things asynchronously.

00:02:56.630 --> 00:03:00.170
If I wanted to do this by
hand using threads and

00:03:00.170 --> 00:03:02.750
synchronizing the results,
what would be

00:03:02.750 --> 00:03:04.130
the amount of work?

00:03:04.130 --> 00:03:06.790
MUSTAFA SEZGIN: There is, if you
really want to go to very

00:03:06.790 --> 00:03:11.550
low level and kind of schedule
your own threads and worry

00:03:11.550 --> 00:03:14.600
about synchronization,
inconcurrency is a very

00:03:14.600 --> 00:03:17.460
difficult problem to solve when

00:03:17.460 --> 00:03:18.990
you're developing software.

00:03:18.990 --> 00:03:21.020
There are frameworks that are
available, or components that

00:03:21.020 --> 00:03:24.090
are available in the Android
SDK, such as AsyncTasks, that

00:03:24.090 --> 00:03:25.370
handle this.

00:03:25.370 --> 00:03:27.940
But they are quite basic
in what they provide.

00:03:27.940 --> 00:03:31.240
They do take care of the low
level threading concerns, but

00:03:31.240 --> 00:03:34.650
when it comes to error
handling, or applying

00:03:34.650 --> 00:03:38.430
transformations on the data
set, or even, I guess,

00:03:38.430 --> 00:03:43.450
scheduling, at times as well, it
provides either no or very

00:03:43.450 --> 00:03:46.050
little functionality with
regards to that.

00:03:46.050 --> 00:03:48.660
So there's a lot of extra
functionality and useful

00:03:48.660 --> 00:03:54.090
functionality built into RxJava
that, I guess, makes it

00:03:54.090 --> 00:03:56.780
more attractive than using some
of the built in Android

00:03:56.780 --> 00:03:57.945
SDK components.

00:03:57.945 --> 00:03:59.270
MARTIN GORNER: So let's
see how it works.

00:03:59.270 --> 00:04:01.490
MUSTAFA SEZGIN: Sure,
absolutely.

00:04:01.490 --> 00:04:05.600
MARTIN GORNER: Here we have
the first little bit of

00:04:05.600 --> 00:04:08.480
psedo-code to understand
what will be going on.

00:04:08.480 --> 00:04:10.720
This helped me personally
understand--

00:04:10.720 --> 00:04:11.750
MUSTAFA SEZGIN: Yep.

00:04:11.750 --> 00:04:14.890
MARTIN GORNER: --because once we
go to the Java code, there

00:04:14.890 --> 00:04:18.660
is a little bit of extra
syntactic sugar to make this

00:04:18.660 --> 00:04:20.000
work in Java.

00:04:20.000 --> 00:04:20.899
MUSTAFA SEZGIN: Yep.

00:04:20.899 --> 00:04:22.840
MARTIN GORNER: But the basics
are actually quite simple.

00:04:22.840 --> 00:04:24.230
Can you tell us what
is going on?

00:04:24.230 --> 00:04:24.950
MUSTAFA SEZGIN: Sure.

00:04:24.950 --> 00:04:30.160
So, you could consider that
using kind of the publish

00:04:30.160 --> 00:04:32.660
subscribe panel, the observable
pattern, you have

00:04:32.660 --> 00:04:37.190
your data stream, which in the
land of RxJava, is your

00:04:37.190 --> 00:04:37.800
observable.

00:04:37.800 --> 00:04:40.090
You want to observe your
data stream, basically.

00:04:40.090 --> 00:04:44.960
So the first thing that you need
to kind of obviously do

00:04:44.960 --> 00:04:47.190
is have an observable
data stream.

00:04:47.190 --> 00:04:50.260
And the person or, I guess,
the component which is

00:04:50.260 --> 00:04:53.590
interested in this data stream
needs to subscribe to it, and

00:04:53.590 --> 00:04:55.990
that's what we see in the
first line there.

00:04:55.990 --> 00:04:59.610
MARTIN GORNER: So that first
line actually launches the

00:04:59.610 --> 00:05:00.720
asynchronous processing.

00:05:00.720 --> 00:05:01.480
MUSTAFA SEZGIN: Yes.

00:05:01.480 --> 00:05:06.950
MARTIN GORNER: You subscribe the
observable to an observer,

00:05:06.950 --> 00:05:10.090
and basically what you do is
that you register this doNext

00:05:10.090 --> 00:05:12.080
function, which is
a callback--

00:05:12.080 --> 00:05:13.610
MUSTAFA SEZGIN: Yep.

00:05:13.610 --> 00:05:15.070
MARTIN GORNER: --on
your observable.

00:05:15.070 --> 00:05:15.590
MUSTAFA SEZGIN: That's
correct.

00:05:15.590 --> 00:05:19.540
So basically the work itself,
very simplistically, the

00:05:19.540 --> 00:05:22.870
observable there contains all
the logic required to retrieve

00:05:22.870 --> 00:05:25.270
your data asynchronously.

00:05:25.270 --> 00:05:27.910
As soon as you call subscribe
and pass in that doNext

00:05:27.910 --> 00:05:32.820
function, RxJava kind of takes
care of the rest to launch you

00:05:32.820 --> 00:05:37.970
thread and then basically
execute you observable, which

00:05:37.970 --> 00:05:41.950
is the red line that we see
there with the call function.

00:05:41.950 --> 00:05:43.130
MARTIN GORNER: And the
call function is

00:05:43.130 --> 00:05:44.220
something that you define.

00:05:44.220 --> 00:05:46.980
So that's your function,
you define what

00:05:46.980 --> 00:05:47.770
work you want to do--

00:05:47.770 --> 00:05:48.580
MUSTAFA SEZGIN: That's
correct.

00:05:48.580 --> 00:05:51.680
MARTIN GORNER: --then, at the
end, you will call that doNext

00:05:51.680 --> 00:05:53.180
function, which you have
[? in past ?].

00:05:53.180 --> 00:05:53.680
MUSTAFA SEZGIN: That's
correct.

00:05:53.680 --> 00:05:58.380
So once RxJava calls your
observable to execute it, you

00:05:58.380 --> 00:06:02.490
will do your work and obtain
your data, and then you'll

00:06:02.490 --> 00:06:07.050
pass your data to the callback
function, which is that doNext

00:06:07.050 --> 00:06:08.420
function that we have
provided there.

00:06:08.420 --> 00:06:09.790
MARTIN GORNER: So let's
see that with a

00:06:09.790 --> 00:06:10.850
real Java code now.

00:06:10.850 --> 00:06:11.490
MUSTAFA SEZGIN: Yes.

00:06:11.490 --> 00:06:13.950
MARTIN GORNER: So this is how
you define an observable.

00:06:13.950 --> 00:06:14.710
MUSTAFA SEZGIN: It's very--

00:06:14.710 --> 00:06:18.300
because of the wording, a lot of
people misuse those or for

00:06:18.300 --> 00:06:18.840
one another.

00:06:18.840 --> 00:06:21.100
But basically, in this first
slide, what we're doing is

00:06:21.100 --> 00:06:22.350
we're actually--

00:06:22.350 --> 00:06:25.520
a very simplistic example is we
want to make a network call

00:06:25.520 --> 00:06:28.190
to some back end API.

00:06:28.190 --> 00:06:31.600
And so, what we do is we try and
be as functional as we can

00:06:31.600 --> 00:06:36.240
be in Java, and we create
this observable object.

00:06:36.240 --> 00:06:39.750
And we talked about that call
function, and that is where

00:06:39.750 --> 00:06:42.420
you do your work.

00:06:42.420 --> 00:06:44.450
MARTIN GORNER: So the client
does not make request, that is

00:06:44.450 --> 00:06:45.880
your work, your API call.

00:06:45.880 --> 00:06:46.730
MUSTAFA SEZGIN: That's
correct, yeah.

00:06:46.730 --> 00:06:49.010
So you're making an API request
there, and you get

00:06:49.010 --> 00:06:50.310
back a response.

00:06:50.310 --> 00:06:54.240
Now the next lines are where
kind of a lot of the magic

00:06:54.240 --> 00:06:56.100
happens, in a way.

00:06:56.100 --> 00:06:59.110
So, you can see that you passed
in the observer, which

00:06:59.110 --> 00:07:03.320
is basically that callback
function that we were talking

00:07:03.320 --> 00:07:04.440
about earlier.

00:07:04.440 --> 00:07:08.840
And once you have your data, you
pass it to the observer by

00:07:08.840 --> 00:07:11.050
calling on next.

00:07:11.050 --> 00:07:13.470
And you can do this multiple
times if you have a collection

00:07:13.470 --> 00:07:15.570
of objects, for example.

00:07:15.570 --> 00:07:19.280
You can loop over those and then
basically be calling on

00:07:19.280 --> 00:07:21.330
next multiple times
to provide that

00:07:21.330 --> 00:07:23.380
data until it's completed.

00:07:23.380 --> 00:07:25.970
And at the end, once you've
streamed all your data, you

00:07:25.970 --> 00:07:29.250
have to call on complete to
signal to the caller that the

00:07:29.250 --> 00:07:29.970
stream has ended.

00:07:29.970 --> 00:07:32.670
MARTIN GORNER: So let us see
what an observer looks like.

00:07:32.670 --> 00:07:33.120
MUSTAFA SEZGIN: Sure.

00:07:33.120 --> 00:07:35.400
What we're doing here is now
that we've created our

00:07:35.400 --> 00:07:39.390
observable, the interested
party wants to basically

00:07:39.390 --> 00:07:43.210
subscribe to the data that's
going to come back from that

00:07:43.210 --> 00:07:44.220
observable.

00:07:44.220 --> 00:07:47.480
And you can see there that, once
again, we create a kind

00:07:47.480 --> 00:07:49.530
of an anonymous inner class,
which is that observer to the

00:07:49.530 --> 00:07:51.650
subscribe function.

00:07:51.650 --> 00:07:55.970
And it has to implement those
three methods there.

00:07:55.970 --> 00:07:58.740
The first one, which is I guess
the most important one,

00:07:58.740 --> 00:08:02.590
is on next function, and that is
what will receive the data.

00:08:02.590 --> 00:08:05.580
And whatever kind of processing
you want to do as a

00:08:05.580 --> 00:08:08.880
result of that data, you
should be doing in that

00:08:08.880 --> 00:08:10.880
function there.

00:08:10.880 --> 00:08:13.060
And once you receive-- and, as
I mentioned, that can be

00:08:13.060 --> 00:08:16.270
called multiple times, executed
multiple times--

00:08:16.270 --> 00:08:20.280
and once you've completed
streaming your data, you need

00:08:20.280 --> 00:08:25.800
to call on completed, and that
will basically signal to the

00:08:25.800 --> 00:08:28.200
observer that the stream has
ended, and that there's no

00:08:28.200 --> 00:08:29.610
more data to come.

00:08:29.610 --> 00:08:32.990
Now, as I mentioned earlier as
well, there's built in error

00:08:32.990 --> 00:08:34.620
handling into RxJava.

00:08:34.620 --> 00:08:38.210
So if an exception gets raised
that you didn't catch during

00:08:38.210 --> 00:08:41.539
the work function, and why you
would retrieve a network I/O

00:08:41.539 --> 00:08:43.809
error or something, that
exception will automatically

00:08:43.809 --> 00:08:48.520
be handled by RxJava, and will
be passed through to the on

00:08:48.520 --> 00:08:51.520
error handler or callback
in your observer.

00:08:51.520 --> 00:08:52.200
MARTIN GORNER: That's
very handy.

00:08:52.200 --> 00:08:54.100
MUSTAFA SEZGIN: It
is very hand.

00:08:54.100 --> 00:08:56.070
MARTIN GORNER: And so the last
issue we have to addresses is

00:08:56.070 --> 00:08:58.425
that RxJava is a genetic
framework.

00:08:58.425 --> 00:08:59.230
MUSTAFA SEZGIN: Yep.

00:08:59.230 --> 00:09:01.970
MARTIN GORNER: But on Android,
you want your results

00:09:01.970 --> 00:09:03.570
delivered on a specific thread,

00:09:03.570 --> 00:09:04.760
which is the UI thread.

00:09:04.760 --> 00:09:05.370
MUSTAFA SEZGIN: That's
correct.

00:09:05.370 --> 00:09:07.180
MARTIN GORNER: So how
do you do that?

00:09:07.180 --> 00:09:09.850
MUSTAFA SEZGIN: So the
observable has two methods

00:09:09.850 --> 00:09:12.670
that basically we saw in
the previous slide.

00:09:12.670 --> 00:09:13.775
The first one was--

00:09:13.775 --> 00:09:14.190
MARTIN GORNER: Let's
go back to it.

00:09:14.190 --> 00:09:14.920
MUSTAFA SEZGIN: Yep.

00:09:14.920 --> 00:09:16.960
The first one there was
a subscribe on.

00:09:16.960 --> 00:09:22.130
What that means is that that's
where you specify a scheduler

00:09:22.130 --> 00:09:25.140
that you want the actual work
function to be completed on.

00:09:25.140 --> 00:09:27.830
So in this instance, it was
making the API call.

00:09:27.830 --> 00:09:31.850
But the really cool thing is
that the observe on method

00:09:31.850 --> 00:09:33.950
there that you see on the
observable specifies a

00:09:33.950 --> 00:09:37.990
separate scheduler where you
can actually specify which

00:09:37.990 --> 00:09:40.500
thread the data will
be delivered on.

00:09:40.500 --> 00:09:43.480
Now, in Android land, whenever
you want to update the user

00:09:43.480 --> 00:09:47.790
interface on the device, you
need to be doing that work on

00:09:47.790 --> 00:09:49.620
the main UI thread.

00:09:49.620 --> 00:09:51.720
MARTIN GORNER: And so there
are a couple more lines of

00:09:51.720 --> 00:09:54.580
code to define a scheduler
that will

00:09:54.580 --> 00:09:57.490
handle the data on the--

00:09:57.490 --> 00:09:58.110
MUSTAFA SEZGIN: UI thread.

00:09:58.110 --> 00:09:58.750
MARTIN GORNER: --main
UI thread.

00:09:58.750 --> 00:09:59.320
MUSTAFA SEZGIN: That's
correct.

00:09:59.320 --> 00:10:00.750
Now, this is very simplistic.

00:10:00.750 --> 00:10:04.710
There's a scheduler class within
RxJava that you need to

00:10:04.710 --> 00:10:08.170
subclass, and it has two
abstract schedule methods that

00:10:08.170 --> 00:10:09.050
you'll need to implement.

00:10:09.050 --> 00:10:11.980
This is a very simplistic
implementation of one of them,

00:10:11.980 --> 00:10:15.470
but what we do here is basically
we specify that

00:10:15.470 --> 00:10:19.220
there's basically a handler
which runs runables on the

00:10:19.220 --> 00:10:21.650
main looper, which is
the main UI thread.

00:10:21.650 --> 00:10:22.870
MARTIN GORNER: And the
main looper is the

00:10:22.870 --> 00:10:24.140
main Android UI thread.

00:10:24.140 --> 00:10:24.705
MUSTAFA SEZGIN: That's
correct.

00:10:24.705 --> 00:10:26.130
MARTIN GORNER: That is a call
to the Android [INAUDIBLE].

00:10:26.130 --> 00:10:28.940
MUSTAFA SEZGIN: This is all
mainly Android code, yes, and

00:10:28.940 --> 00:10:31.550
this will exist in, like I
said, the scheduler that

00:10:31.550 --> 00:10:32.800
you'll subclass.

00:10:32.800 --> 00:10:39.350
And what this does is it tells
RxJava to execute that actio,

00:10:39.350 --> 00:10:42.380
the action.call class, or the
actual call line that we see

00:10:42.380 --> 00:10:46.260
there in the run method, which
will deliver those results

00:10:46.260 --> 00:10:50.140
that are passed through on next
to the observer on the

00:10:50.140 --> 00:10:51.350
main UI thread.

00:10:51.350 --> 00:10:54.910
MARTIN GORNER: When you are
shopping around for a library

00:10:54.910 --> 00:10:59.380
like this, have you evaluated
other possibilities?

00:10:59.380 --> 00:11:04.350
MUSTAFA SEZGIN: In Android, one
of the common components

00:11:04.350 --> 00:11:06.570
is obviously async task, and
some of the other components

00:11:06.570 --> 00:11:07.920
that live in the Android SDK.

00:11:07.920 --> 00:11:10.860
There are some extra--

00:11:10.860 --> 00:11:14.920
for those that are familiar with
libraries like Robojuice,

00:11:14.920 --> 00:11:18.400
which provide some dependency
injection functionality as

00:11:18.400 --> 00:11:21.180
well, they extend some
of the async task

00:11:21.180 --> 00:11:22.930
functionality there as well.

00:11:22.930 --> 00:11:26.010
We found with RxJava, in
comparison to using some of

00:11:26.010 --> 00:11:30.280
these standard libraries or
components in the SDKs, is

00:11:30.280 --> 00:11:32.440
that it not only takes care of
a lot of those low level

00:11:32.440 --> 00:11:36.710
concerns, but it provides some
extra functionality to take

00:11:36.710 --> 00:11:38.870
care of the error handling,
as well.

00:11:38.870 --> 00:11:41.740
But on top of that, a lot of
times, you want to apply

00:11:41.740 --> 00:11:43.580
transformations on your data.

00:11:43.580 --> 00:11:47.480
There's a lot of built in
functionality within RxJava to

00:11:47.480 --> 00:11:50.460
apply transformations like
filtering or actually

00:11:50.460 --> 00:11:53.780
transforming the data
itself before being

00:11:53.780 --> 00:11:57.180
delivered to the caller.

00:11:57.180 --> 00:11:59.650
And on top of that, one really
interesting piece of

00:11:59.650 --> 00:12:03.970
functionality is that you can
actually combine data from

00:12:03.970 --> 00:12:05.240
multiple sources.

00:12:05.240 --> 00:12:09.180
So if you need to go, for
example, to your database, and

00:12:09.180 --> 00:12:15.550
you need to go to the API, and
then you need to compose the

00:12:15.550 --> 00:12:19.090
data set into a single stream
of data, RxJava actually has

00:12:19.090 --> 00:12:25.290
built in functionality to be
able to do that quite easily.

00:12:25.290 --> 00:12:27.900
So there's a lot of extra
functionality and useful

00:12:27.900 --> 00:12:30.960
functionality built
into RxJava.

00:12:30.960 --> 00:12:34.090
MARTIN GORNER: I hope you will
enjoy playing with reactive

00:12:34.090 --> 00:12:36.790
programming, and thank you
very much, Mustafa--

00:12:36.790 --> 00:12:37.610
MUSTAFA SEZGIN: Thank
you for having me.

00:12:37.610 --> 00:12:39.600
MARTIN GORNER: --for being with
us on root access Berlin.

00:12:39.600 --> 00:12:40.380
MUSTAFA SEZGIN: Sure.

00:12:40.380 --> 00:12:41.630
Thank you.

