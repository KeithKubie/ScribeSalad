WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:02.690
SAURABH GUPTA: Welcome to Don't
Hate, Automate using

00:00:02.690 --> 00:00:04.050
Google Apps Script.

00:00:04.050 --> 00:00:05.830
My name is Saurabh Gupta.

00:00:05.830 --> 00:00:08.770
I work in Google Developer
relations with Apps and Cloud

00:00:08.770 --> 00:00:10.020
Developer relations team.

00:00:13.150 --> 00:00:16.160
This is our QR code for
giving us feedback.

00:00:16.160 --> 00:00:17.120
So please get it.

00:00:17.120 --> 00:00:19.640
And we will get it when we start
the QA sessions as well.

00:00:25.730 --> 00:00:29.750
So if you love Google Apps, if
you use Google Apps, and you

00:00:29.750 --> 00:00:33.610
want to get more out of Google
Apps, then this is the right

00:00:33.610 --> 00:00:35.930
session for you.

00:00:35.930 --> 00:00:39.400
If you want to be more
productive using Google Apps,

00:00:39.400 --> 00:00:43.590
if you want to extend how you
use Google Apps, like how you

00:00:43.590 --> 00:00:47.930
use Calendar, Contacts, Sites,
Spreadsheet, then Google Apps

00:00:47.930 --> 00:00:51.650
Script is what you
need to use.

00:00:51.650 --> 00:00:55.230
Today I'm going to talk about
what is Google Apps Script,

00:00:55.230 --> 00:00:58.340
and more importantly, why
you should use it.

00:00:58.340 --> 00:01:01.250
And what are the different
types of use cases around

00:01:01.250 --> 00:01:03.000
Google Apps?

00:01:03.000 --> 00:01:06.300
And I'm going to touch a little
bit about what are the

00:01:06.300 --> 00:01:08.800
various services that are
available in Apps Script and

00:01:08.800 --> 00:01:10.090
how you can use them.

00:01:10.090 --> 00:01:19.170
And I'm going to go over a demo
application, and then

00:01:19.170 --> 00:01:20.460
tell you how you
can get started

00:01:20.460 --> 00:01:22.480
using Google Apps Script.

00:01:22.480 --> 00:01:26.770
And I'm also going to talk a
little bit about I/O sessions

00:01:26.770 --> 00:01:28.467
for tomorrow and day after.

00:01:32.670 --> 00:01:36.820
So by show of hands, how many
of you have heard of Google

00:01:36.820 --> 00:01:38.750
Apps Script?

00:01:38.750 --> 00:01:42.560
And how many of you
have used it?

00:01:42.560 --> 00:01:43.150
Quite a few.

00:01:43.150 --> 00:01:44.240
Interesting, OK.

00:01:44.240 --> 00:01:46.674
So what is Google Apps Script?

00:01:49.700 --> 00:01:51.400
Google Apps Script
is a JavaScript

00:01:51.400 --> 00:01:53.780
engine in the cloud.

00:01:53.780 --> 00:01:55.320
That's the technical
definition.

00:01:55.320 --> 00:01:58.570
But it's another way of saying
you open up the browser, you

00:01:58.570 --> 00:02:01.570
write some code, and that code
gets executed in Google

00:02:01.570 --> 00:02:05.390
servers and you get
the response back.

00:02:05.390 --> 00:02:08.130
But more interestingly,
what it is that

00:02:08.130 --> 00:02:11.870
Google Apps Script does.

00:02:11.870 --> 00:02:14.570
So Google Apps Script lets
you access Google

00:02:14.570 --> 00:02:17.080
APIs in an easy way.

00:02:17.080 --> 00:02:22.760
So if you want to access your
calendar and automate some

00:02:22.760 --> 00:02:26.310
task using your calendar, you
want to access your email, or

00:02:26.310 --> 00:02:28.920
you want to access some data in
your spreadsheet, then you

00:02:28.920 --> 00:02:31.930
can do that using Google
Apps Script.

00:02:31.930 --> 00:02:34.600
You can also integrate with
third party APIs, like

00:02:34.600 --> 00:02:38.070
Twitter, Netflix, other
APIs that are

00:02:38.070 --> 00:02:39.450
available out on the web.

00:02:39.450 --> 00:02:44.480
And Google Apps Script makes
it easy for you to do that.

00:02:44.480 --> 00:02:46.550
Apps Script, as I said,
is a JavaScript

00:02:46.550 --> 00:02:47.430
engine in the cloud.

00:02:47.430 --> 00:02:50.770
So naturally the JavaScript
syntax is easy to use.

00:02:50.770 --> 00:02:53.390
And we have made it
even simpler for

00:02:53.390 --> 00:02:54.875
users to use Apps Script.

00:02:54.875 --> 00:02:58.160
And I'm going to show you in the
demo how easy it is to use

00:02:58.160 --> 00:02:59.070
Apps Script.

00:02:59.070 --> 00:03:02.520
So JavaScript, syntax, and
classes are available to you.

00:03:02.520 --> 00:03:06.510
On top of that, we provide a
wide range of Apps Script

00:03:06.510 --> 00:03:09.250
services, which make the Apps
Script a lot more meaningful

00:03:09.250 --> 00:03:10.410
and useful.

00:03:10.410 --> 00:03:13.680
So if you wanted today go out of
the session and say, OK, I

00:03:13.680 --> 00:03:16.990
figured out a use case as to why
I want to use Apps Script,

00:03:16.990 --> 00:03:20.900
that's enhancing and extending
your use of Google Apps.

00:03:20.900 --> 00:03:26.060
That's you automating
a few of your tasks.

00:03:26.060 --> 00:03:29.050
But the more important question
is why you want to

00:03:29.050 --> 00:03:31.395
use Apps Script?

00:03:31.395 --> 00:03:34.500
So I'll share a personal
story with you.

00:03:34.500 --> 00:03:37.100
So I have family in
three continents.

00:03:37.100 --> 00:03:40.100
And we have a family calendar
where we have all sorts of

00:03:40.100 --> 00:03:41.860
birthdays, anniversaries,
everything.

00:03:41.860 --> 00:03:44.400
And we have reminders set
up a few months ago.

00:03:44.400 --> 00:03:47.070
And three days in advance
of anybody's birthday or

00:03:47.070 --> 00:03:48.380
anniversary, an email
comes out.

00:03:48.380 --> 00:03:50.520
It's like Google Calendar
reminder alert--

00:03:50.520 --> 00:03:52.400
somebody's birthday
is coming up.

00:03:52.400 --> 00:03:55.400
And the email automatically
goes into archive.

00:03:55.400 --> 00:03:56.800
And we forget about
the person's

00:03:56.800 --> 00:03:57.600
birthday and all that.

00:03:57.600 --> 00:03:59.610
So my dad calls up and says,
you work for Google, right?

00:03:59.610 --> 00:04:03.370
Can't you figure out a system
where on the day of the event

00:04:03.370 --> 00:04:06.690
itself, a nice email goes out
to the person whose birthday

00:04:06.690 --> 00:04:09.890
it is, and then the joke
of the day or whatever.

00:04:09.890 --> 00:04:13.680
And then that starts a whole
interesting conversation in

00:04:13.680 --> 00:04:14.900
three continents.

00:04:14.900 --> 00:04:16.290
I said, yeah, we can do that.

00:04:16.290 --> 00:04:17.130
Absolutely.

00:04:17.130 --> 00:04:19.550
We have Calendar APIs,
Gmail APIs.

00:04:19.550 --> 00:04:21.149
We can write a neat app.

00:04:21.149 --> 00:04:22.100
I can do that.

00:04:22.100 --> 00:04:24.160
I can deploy that app
in App Engine.

00:04:24.160 --> 00:04:25.830
I can put in a scheduler.

00:04:25.830 --> 00:04:30.840
That app will run every day
for 40 people across three

00:04:30.840 --> 00:04:31.660
continents.

00:04:31.660 --> 00:04:33.150
So I thought, well,
we can do that.

00:04:33.150 --> 00:04:34.310
But I won't do it.

00:04:34.310 --> 00:04:35.540
It's just too much work.

00:04:35.540 --> 00:04:36.240
And it's not worth it.

00:04:36.240 --> 00:04:37.840
It's not worth my time.

00:04:37.840 --> 00:04:40.010
So there is automation
right there.

00:04:40.010 --> 00:04:43.280
But the use case
is too narrow.

00:04:43.280 --> 00:04:44.250
It's not worth my time.

00:04:44.250 --> 00:04:47.150
But, well, with Apps Script, you
could do that very easily.

00:04:47.150 --> 00:04:50.090
In 20 lines of code, without
having to deploy anything,

00:04:50.090 --> 00:04:52.220
without having to write any
code, you can do that.

00:04:52.220 --> 00:04:55.300
That's automation right there.

00:04:55.300 --> 00:04:58.870
Then there are other scenarios
where Apps Script is useful in

00:04:58.870 --> 00:04:59.970
terms of automation.

00:04:59.970 --> 00:05:04.570
Say you want to produce
a sales report

00:05:04.570 --> 00:05:06.840
every Friday night.

00:05:06.840 --> 00:05:09.370
And the sales figures are
in the spreadsheet.

00:05:09.370 --> 00:05:11.910
And you want to perform some
logic in the spreadsheet, get

00:05:11.910 --> 00:05:15.500
your spread data from
spreadsheets, and then prepare

00:05:15.500 --> 00:05:17.540
a report and have it emailed
to whoever you

00:05:17.540 --> 00:05:18.640
want to email it to.

00:05:18.640 --> 00:05:20.650
You can do all that
stuff manually.

00:05:20.650 --> 00:05:22.610
But with the Apps Script,
you can automate it.

00:05:22.610 --> 00:05:25.820
Not only can you automate it,
but you can actually set up

00:05:25.820 --> 00:05:28.260
triggers such that it gets
executed at a particular time

00:05:28.260 --> 00:05:30.560
of the day, or the week,
or month, or whatever.

00:05:30.560 --> 00:05:32.460
So that's automation.

00:05:32.460 --> 00:05:39.250
So our goal is to make you use
Google Apps in a way which is

00:05:39.250 --> 00:05:40.490
more meaningful for you.

00:05:40.490 --> 00:05:41.660
You can automate it.

00:05:41.660 --> 00:05:43.440
You can be more productive.

00:05:46.350 --> 00:05:51.140
So in the story I just shared
with you, one of the key

00:05:51.140 --> 00:05:53.390
things in the story was that
it was an interesting use

00:05:53.390 --> 00:05:56.300
case, but it wasn't worth my
time implementing a full-blown

00:05:56.300 --> 00:05:58.810
app deploying on
the App Engine.

00:05:58.810 --> 00:06:00.770
Well, with Apps Script, it
certainly is, because it's a

00:06:00.770 --> 00:06:03.350
very small script, it's
implementing a very fringe use

00:06:03.350 --> 00:06:05.650
case, which has light volume,
but it's still feature-rich.

00:06:05.650 --> 00:06:07.960
It still requires all
those access to

00:06:07.960 --> 00:06:09.750
APIs, things like that.

00:06:09.750 --> 00:06:13.380
And if there is some breakdown,
some change or

00:06:13.380 --> 00:06:16.980
something, then I need to get
to it very faster now.

00:06:16.980 --> 00:06:20.640
And I need to access my Calendar
data, my Spreadsheet

00:06:20.640 --> 00:06:24.740
data, along with some joke of
the day site, some RSS feed

00:06:24.740 --> 00:06:28.540
somewhere, which is a third
party API, or whatever.

00:06:28.540 --> 00:06:31.680
So I can do all of that and
implement that very narrow use

00:06:31.680 --> 00:06:33.360
case for my purpose.

00:06:33.360 --> 00:06:34.860
Now, how is that
useful to you?

00:06:34.860 --> 00:06:37.660
Well, if you are in an
organization that is using

00:06:37.660 --> 00:06:42.530
Google Apps, or if you are using
Google Apps for personal

00:06:42.530 --> 00:06:45.050
use, then you can still
implement a lot of these

00:06:45.050 --> 00:06:46.720
different types of use cases.

00:06:46.720 --> 00:06:50.910
For instance, say there
is a law firm.

00:06:50.910 --> 00:06:52.590
And there's, like,
10, 15 people.

00:06:52.590 --> 00:06:54.510
And you want everybody
to book time.

00:06:54.510 --> 00:06:55.980
You're going to have a
very small lab which

00:06:55.980 --> 00:06:57.630
has some UI in it.

00:06:57.630 --> 00:07:00.100
Users book time.

00:07:00.100 --> 00:07:01.540
And the data goes into
a spreadsheet.

00:07:01.540 --> 00:07:03.420
And you can generate reports,
things like that.

00:07:03.420 --> 00:07:05.080
It's a very narrow use case.

00:07:05.080 --> 00:07:08.510
But you can implement it very
easily using Apps Script.

00:07:12.010 --> 00:07:15.280
So the third most interesting
reason why you want to use

00:07:15.280 --> 00:07:17.330
Apps Script is because
it's cost effective.

00:07:17.330 --> 00:07:21.720
Now, I don't mean in terms
of dollars and cents.

00:07:21.720 --> 00:07:26.280
But when I say cost effective, I
mean in terms of how easy it

00:07:26.280 --> 00:07:29.510
is for you to implement, manage,
and maintain this

00:07:29.510 --> 00:07:30.260
[? stuff. ?]

00:07:30.260 --> 00:07:32.400
So with Apps Script, you don't
have to do any software

00:07:32.400 --> 00:07:33.070
deployments.

00:07:33.070 --> 00:07:34.200
You don't have to deploy
a software.

00:07:34.200 --> 00:07:37.400
You don't have to take a big
JAR, ZIP, [? TAR, ?]

00:07:37.400 --> 00:07:40.250
RPM, and deploy it
on a machine.

00:07:40.250 --> 00:07:41.890
You don't have to
do any of that.

00:07:41.890 --> 00:07:45.240
You don't have to elevate
machines or capacity.

00:07:45.240 --> 00:07:48.110
And you don't have to worry
about any hardware allocation,

00:07:48.110 --> 00:07:48.980
anything like that.

00:07:48.980 --> 00:07:50.730
So those are the two
big benefits,

00:07:50.730 --> 00:07:53.610
right out of the bat.

00:07:53.610 --> 00:07:56.220
Obviously these benefits derive
from the fact that it's

00:07:56.220 --> 00:07:58.260
a JavaScript engine
in the cloud.

00:07:58.260 --> 00:07:59.150
You open the browser.

00:07:59.150 --> 00:08:00.620
You write some code.

00:08:00.620 --> 00:08:02.070
That codes get executed.

00:08:02.070 --> 00:08:05.290
And so no software deployments,
no hardware

00:08:05.290 --> 00:08:06.250
deployments.

00:08:06.250 --> 00:08:11.760
But then the other very
interesting benefit of Apps

00:08:11.760 --> 00:08:15.330
Script is that it is part
of Google Apps suite.

00:08:15.330 --> 00:08:19.750
So what it gives you is it gives
you a context in which a

00:08:19.750 --> 00:08:21.230
script runs.

00:08:21.230 --> 00:08:24.930
And that context is loaded with
a Google Apps, a Google

00:08:24.930 --> 00:08:26.190
account identity.

00:08:26.190 --> 00:08:30.140
And now that's very important,
because if you're writing a

00:08:30.140 --> 00:08:34.850
standalone app, which uses
Calendar, a GData API, and

00:08:34.850 --> 00:08:37.120
then you're deploying in App
Engine, then you have to worry

00:08:37.120 --> 00:08:37.789
about URLs.

00:08:37.789 --> 00:08:39.780
You have to worry about
authentication, authorization,

00:08:39.780 --> 00:08:41.299
all of that.

00:08:41.299 --> 00:08:44.179
But not in Apps Script.

00:08:44.179 --> 00:08:48.710
In Apps Script, when you write
an app, and that app users

00:08:48.710 --> 00:08:51.200
Calendar services, for example,
to access your

00:08:51.200 --> 00:08:53.670
calendar or some other calendar
that you have access

00:08:53.670 --> 00:08:57.960
to, then authentication is
already taken care of.

00:08:57.960 --> 00:08:59.850
Because the app is running
under your

00:08:59.850 --> 00:09:02.750
Google account identity.

00:09:02.750 --> 00:09:05.470
So that's a very big benefit.

00:09:05.470 --> 00:09:08.290
That's cost savings right there,
because the barrier to

00:09:08.290 --> 00:09:12.880
entry to using APIs
is very low now.

00:09:12.880 --> 00:09:14.970
You can access your contacts,
your calendars, your

00:09:14.970 --> 00:09:19.660
spreadsheets, your sites, and a
wide variety of other APIs.

00:09:19.660 --> 00:09:24.120
And I'm going to show you
in an example what other

00:09:24.120 --> 00:09:25.370
different types of APIs.

00:09:29.010 --> 00:09:31.170
So who should use Apps Script?

00:09:31.170 --> 00:09:34.900
So our goal in the Apps
Script team is

00:09:34.900 --> 00:09:36.770
that anyone can script.

00:09:36.770 --> 00:09:39.550
We want to make it so simple
that anyone should be able to

00:09:39.550 --> 00:09:42.710
open a browser and bold enough
to write a script.

00:09:42.710 --> 00:09:47.660
It's not just us hardware
developers, but that's heavy

00:09:47.660 --> 00:09:54.680
business users, educators,
teachers who want to make a

00:09:54.680 --> 00:09:59.980
classroom experience more
effective, students who want

00:09:59.980 --> 00:10:01.260
to even learn programming.

00:10:01.260 --> 00:10:02.480
It's a great way to do that.

00:10:02.480 --> 00:10:09.670
So Apps Script is for users
across a wide range of

00:10:09.670 --> 00:10:13.440
spectrum, from tech-savvy
business users, to hardware

00:10:13.440 --> 00:10:18.050
developers, to educators, to
students, to other types of

00:10:18.050 --> 00:10:19.960
business users.

00:10:19.960 --> 00:10:23.300
And we want to make it so
simple, and our goal is that

00:10:23.300 --> 00:10:24.550
anyone should be
able to script.

00:10:29.160 --> 00:10:32.650
So how does someone
use Apps Script.

00:10:32.650 --> 00:10:33.870
And I'm going to show
you in a demo.

00:10:33.870 --> 00:10:36.480
But if you concentrate on
the right-hand side

00:10:36.480 --> 00:10:39.510
of the diagram here--

00:10:39.510 --> 00:10:42.170
when an author writes a script,
then the user can

00:10:42.170 --> 00:10:45.880
access that script through
a Google Sites page.

00:10:45.880 --> 00:10:49.095
So an author can write a script
and embed the script in

00:10:49.095 --> 00:10:50.990
a Google Sites page.

00:10:50.990 --> 00:10:54.160
And all of a sudden, your Google
site becomes alive,

00:10:54.160 --> 00:10:57.940
because you can do a lot more
with Apps Script and make your

00:10:57.940 --> 00:11:00.680
site's experience
a lot dynamic.

00:11:00.680 --> 00:11:05.000
You can do the same thing
for spreadsheets.

00:11:05.000 --> 00:11:07.670
So you can embed script
in spreadsheet, access

00:11:07.670 --> 00:11:11.200
spreadsheet data, or make
spreadsheet objects clickable,

00:11:11.200 --> 00:11:11.980
things like that.

00:11:11.980 --> 00:11:15.900
So scripts are exposed through
spreadsheets as well.

00:11:15.900 --> 00:11:19.280
Not only that, you can
[? export ?] scripts as

00:11:19.280 --> 00:11:22.070
standalone web applications.

00:11:22.070 --> 00:11:26.540
So you can write a script that
does whatever, and then you

00:11:26.540 --> 00:11:28.260
can publish it with a URL.

00:11:28.260 --> 00:11:31.890
And anyone who has access or
that you grant permission to

00:11:31.890 --> 00:11:35.420
access can invoke that URL, and
then all of a sudden, in a

00:11:35.420 --> 00:11:39.830
standalone way, they're
accessing your script.

00:11:39.830 --> 00:11:42.040
And the fourth way, how scripts
are used is through

00:11:42.040 --> 00:11:44.650
asynchronous triggers, where
the script could be

00:11:44.650 --> 00:11:45.650
time-driven.

00:11:45.650 --> 00:11:49.110
There's no specific user
action to invoke those

00:11:49.110 --> 00:11:52.150
scripts, but it's sort of
a trigger mechanism.

00:11:58.730 --> 00:12:01.180
So what are different types
of Apps Script services?

00:12:01.180 --> 00:12:03.490
So up until now, what we covered
is why you want to use

00:12:03.490 --> 00:12:04.200
Apps Scripts.

00:12:04.200 --> 00:12:05.300
You want to be productive.

00:12:05.300 --> 00:12:09.610
You want to automate a lot of
the user Google Apps tools.

00:12:09.610 --> 00:12:14.030
And you want to implement a
wide variety of use cases.

00:12:14.030 --> 00:12:17.340
Like just yesterday evening
at our [? GTEC ?]

00:12:17.340 --> 00:12:23.000
conference, there were so many
ideas that we've figured out

00:12:23.000 --> 00:12:25.120
we can implement using Apps
Script, like accessing

00:12:25.120 --> 00:12:27.560
Calendar and syncing Calendar,
things like that.

00:12:27.560 --> 00:12:30.520
And the third reason was,
it's cost effective.

00:12:30.520 --> 00:12:31.810
But how do you do that?

00:12:31.810 --> 00:12:34.140
So these are some of the
variety of services.

00:12:34.140 --> 00:12:37.660
But before I start describing
these services, I'm going to

00:12:37.660 --> 00:12:39.580
show you a quick little
demo as to what Apps

00:12:39.580 --> 00:12:40.830
Script can do for you.

00:12:45.120 --> 00:12:48.490
So I'm going to go into
a Google site which

00:12:48.490 --> 00:12:49.600
I have set up here.

00:12:49.600 --> 00:12:50.780
So this is a site.

00:12:50.780 --> 00:12:52.920
It has a whole bunch of
different Apps Scripts.

00:12:52.920 --> 00:12:55.950
But I'm going to focus on one
particular Apps Script, which

00:12:55.950 --> 00:12:57.610
I call the training script.

00:12:57.610 --> 00:13:02.570
So this script is sort of a
simulation of our training

00:13:02.570 --> 00:13:04.030
scheduling app.

00:13:04.030 --> 00:13:07.880
So this is for-- say, imagine
an organization which has,

00:13:07.880 --> 00:13:09.830
say, 100 people or 50 people.

00:13:09.830 --> 00:13:11.490
And it wants to offer
training.

00:13:11.490 --> 00:13:13.320
And it signed up for
a Netflix account.

00:13:13.320 --> 00:13:17.430
And Netflix has great training
content available.

00:13:17.430 --> 00:13:20.380
So it wants to let its own
members, organization members,

00:13:20.380 --> 00:13:26.110
employees, or school, or
whoever, to search for Netflix

00:13:26.110 --> 00:13:29.340
titles, and then add those
titles to a spreadsheet in a

00:13:29.340 --> 00:13:31.720
queue, and then schedule
a training

00:13:31.720 --> 00:13:32.680
in a training calendar.

00:13:32.680 --> 00:13:35.370
So that's what this app
is going to do.

00:13:35.370 --> 00:13:39.150
And this is one script which is
embedded in a Sites page.

00:13:39.150 --> 00:13:42.350
And what I'm going to show you
is how a site's experience

00:13:42.350 --> 00:13:43.470
comes alive.

00:13:43.470 --> 00:13:46.760
So I'm going to click
on Training here.

00:13:46.760 --> 00:13:48.720
And all of a sudden, the
script gets invoked.

00:13:48.720 --> 00:13:50.690
So this is sort of a two step,
three step workflow.

00:13:53.480 --> 00:13:55.970
As a member of this
organization, I'm asked, OK,

00:13:55.970 --> 00:13:58.580
choose a training category.

00:13:58.580 --> 00:13:59.830
So there are different
categories.

00:13:59.830 --> 00:14:04.170
And these are all part
of the script.

00:14:04.170 --> 00:14:06.090
Now, Script has many
types of services.

00:14:06.090 --> 00:14:07.730
So it's using UI services.

00:14:07.730 --> 00:14:10.750
So say, for instance, I want
to learn a new language.

00:14:10.750 --> 00:14:15.800
So the script now pulls
all the data.

00:14:15.800 --> 00:14:17.060
This is just one Apps Script.

00:14:17.060 --> 00:14:21.650
It is pulling data from
Netflix's OData API, getting

00:14:21.650 --> 00:14:26.550
information on titles that
correspond to a certain genre,

00:14:26.550 --> 00:14:29.110
which is training, or learning
a new language, or

00:14:29.110 --> 00:14:29.930
something like that.

00:14:29.930 --> 00:14:33.230
And then it's able to
show those titles.

00:14:33.230 --> 00:14:36.740
Not only that, you would
have noticed that it is

00:14:36.740 --> 00:14:37.040
interactive.

00:14:37.040 --> 00:14:40.520
It is not like one way, where
a script is able to just

00:14:40.520 --> 00:14:43.320
generate some random HTML.

00:14:43.320 --> 00:14:47.350
It actually was able to take
some action when I selected a

00:14:47.350 --> 00:14:51.560
certain genre as to what
I want to learn.

00:14:51.560 --> 00:14:58.230
So the script can actually
write full-blown UI

00:14:58.230 --> 00:14:58.850
application.

00:14:58.850 --> 00:15:01.200
And I'm going to show you how
easy it is to write these

00:15:01.200 --> 00:15:03.360
types of UI applications.

00:15:03.360 --> 00:15:06.270
So let's go back to the
language instruction.

00:15:06.270 --> 00:15:08.630
And say I want to learn a new
language, and say I'm in the

00:15:08.630 --> 00:15:09.700
mood for learning Italian.

00:15:09.700 --> 00:15:11.660
So I can click on
Add to Queue.

00:15:11.660 --> 00:15:15.960
So by clicking that, what
I'm doing is I'm

00:15:15.960 --> 00:15:17.730
selecting this title.

00:15:17.730 --> 00:15:19.930
And the information of the title
goes into a spreadsheet,

00:15:19.930 --> 00:15:22.060
which is a queue.

00:15:22.060 --> 00:15:25.940
So when I click on Add to Queue,
then that's the next

00:15:25.940 --> 00:15:26.550
step in the workflow.

00:15:26.550 --> 00:15:29.780
And it asks me, OK, what is
the training date that you

00:15:29.780 --> 00:15:31.150
want to schedule the
training on?

00:15:31.150 --> 00:15:33.470
So I'll just give a
random date here.

00:15:33.470 --> 00:15:35.880
So let's say 11.

00:15:35.880 --> 00:15:38.840
And I'll say, OK, I want to
choose an 11:00 AM slot.

00:15:38.840 --> 00:15:42.960
And I'll say Schedule
Training.

00:15:42.960 --> 00:15:46.600
So as soon as I click on
Schedule Training--

00:15:46.600 --> 00:15:47.850
click on it.

00:15:54.940 --> 00:15:56.190
Let me select it.

00:16:00.400 --> 00:16:01.650
Demo gods.

00:16:03.080 --> 00:16:05.000
OK.

00:16:05.000 --> 00:16:06.510
Oh, there you go.

00:16:06.510 --> 00:16:08.150
Finally, we were successful.

00:16:08.150 --> 00:16:14.345
So by selecting a time and
scheduling training, now the

00:16:14.345 --> 00:16:17.950
script actually created an event
on the training calendar

00:16:17.950 --> 00:16:20.720
based on the selection
that I did.

00:16:20.720 --> 00:16:23.010
So let's see what it did.

00:16:23.010 --> 00:16:25.230
So let's go to the calendar.

00:16:25.230 --> 00:16:29.800
And let's reload it.

00:16:44.360 --> 00:16:44.590
Demo gods.

00:16:44.590 --> 00:16:47.050
The calendar is--

00:16:47.050 --> 00:16:48.690
there you go.

00:16:48.690 --> 00:16:54.910
So I have an event scheduled
at 11:00.

00:16:54.910 --> 00:16:58.850
So this is the basic
power of script.

00:16:58.850 --> 00:17:03.120
It now is able to enhance
your site's experience.

00:17:03.120 --> 00:17:08.230
And all of a sudden, your Google
Site becomes home for a

00:17:08.230 --> 00:17:11.599
lot of different types of
office productivity, of

00:17:11.599 --> 00:17:15.270
workflow, and other types of
applications which are

00:17:15.270 --> 00:17:21.329
important, expensive to
implement on very narrow use

00:17:21.329 --> 00:17:26.020
cases or maybe mainstream use
cases, but still expensive to

00:17:26.020 --> 00:17:29.710
implement and do not have
enough volume that it

00:17:29.710 --> 00:17:31.130
justifies a full-blown
development.

00:17:34.980 --> 00:17:39.550
So let's go back to our services
here and discuss a

00:17:39.550 --> 00:17:42.790
little bit about what types of
services Apps Script has.

00:17:42.790 --> 00:17:45.930
So the first category of
services that Apps Script has

00:17:45.930 --> 00:17:48.310
are called the content
services.

00:17:48.310 --> 00:17:53.270
So that's the top-most block
right there, with Spreadsheet,

00:17:53.270 --> 00:17:54.720
Sites, and Docs list.

00:17:54.720 --> 00:17:58.070
So with Spreadsheet's services,
you can access your

00:17:58.070 --> 00:18:05.010
spreadsheets data using Apps
Script and then perform any

00:18:05.010 --> 00:18:08.940
meaningful logic in it and
do a lot more with it.

00:18:08.940 --> 00:18:12.910
Not only that, you can write
custom functions and embed

00:18:12.910 --> 00:18:14.400
those in a spreadsheet.

00:18:14.400 --> 00:18:16.520
So it's [? AKA ?] macro.

00:18:16.520 --> 00:18:20.510
So you can write a macro
and then embed it in

00:18:20.510 --> 00:18:21.200
a spreadsheet cell.

00:18:21.200 --> 00:18:25.380
But you can also access
your site's page data.

00:18:25.380 --> 00:18:27.750
So say, for instance, you want
to create new announcements in

00:18:27.750 --> 00:18:28.690
Site's pages.

00:18:28.690 --> 00:18:30.960
So if you have an announcement
type page and you want to

00:18:30.960 --> 00:18:33.970
create an announcement, you
can very easily do that by

00:18:33.970 --> 00:18:37.310
accessing Site's APIs.

00:18:37.310 --> 00:18:39.650
And Docs list, for those of you
who don't know what Docs

00:18:39.650 --> 00:18:42.110
list is, Docs list is when you
go to docs.google.com and you

00:18:42.110 --> 00:18:44.620
see a list of all the documents
that you have in

00:18:44.620 --> 00:18:47.300
your Docs list.

00:18:47.300 --> 00:18:49.010
So you can manage
your Docs list.

00:18:49.010 --> 00:18:50.150
You can manage permissions.

00:18:50.150 --> 00:18:51.550
You can script out
permissions.

00:18:51.550 --> 00:18:54.570
You can maintain it.

00:18:54.570 --> 00:18:56.970
I personally use it to
manage my Docs list.

00:18:56.970 --> 00:19:00.120
Like, it can grow a lot larger
because so many people share

00:19:00.120 --> 00:19:01.230
documents with you.

00:19:01.230 --> 00:19:04.260
But you want to organize it
based on certain rule logic.

00:19:04.260 --> 00:19:05.290
You can certainly do that.

00:19:05.290 --> 00:19:08.470
And that script can run, say,
weekly, nightly, whatever.

00:19:08.470 --> 00:19:12.470
But the idea here is that we
want you to be able to take

00:19:12.470 --> 00:19:16.370
your data, sort of liberate it,
allow you to do whatever

00:19:16.370 --> 00:19:21.310
you want to do with that data,
and then do some more.

00:19:21.310 --> 00:19:24.250
So that's the first types
of services, which are

00:19:24.250 --> 00:19:25.500
[? content ?] services.

00:19:27.460 --> 00:19:30.370
And this particular code
example, this is taken right

00:19:30.370 --> 00:19:32.900
out of this training
application, which shows you

00:19:32.900 --> 00:19:38.230
how easy it is to use
spreadsheet services.

00:19:38.230 --> 00:19:41.960
So in the first line here,
you see I just use

00:19:41.960 --> 00:19:43.950
SpreadsheetApp.open.

00:19:43.950 --> 00:19:45.900
And I get the spreadsheet key.

00:19:45.900 --> 00:19:46.890
And then I get the sheet.

00:19:46.890 --> 00:19:50.520
And all of a sudden, I have a
reference to a sheet here.

00:19:50.520 --> 00:19:57.030
And then I can just get a
range in the sheet using

00:19:57.030 --> 00:19:59.960
sheet.getRange, if you see the
third line in the code.

00:19:59.960 --> 00:20:03.560
And then I can very easily
set values in the range.

00:20:03.560 --> 00:20:04.460
That's how easy it is.

00:20:04.460 --> 00:20:07.660
So not only it is easy to read
data from spreadsheet, but you

00:20:07.660 --> 00:20:11.170
can do the same thing when
you want to write data.

00:20:11.170 --> 00:20:13.930
And I'm going to show you an
example in the editor how easy

00:20:13.930 --> 00:20:16.810
it is to use the editor.

00:20:16.810 --> 00:20:20.400
Because editor is sort of a mini
ID, where it offers you

00:20:20.400 --> 00:20:21.250
code assessed.

00:20:21.250 --> 00:20:25.810
It offers you capabilities
where you can use these

00:20:25.810 --> 00:20:27.060
services very easily.

00:20:29.610 --> 00:20:32.770
So this chart shows you a little
bit about what you can

00:20:32.770 --> 00:20:34.250
do with these different
services.

00:20:34.250 --> 00:20:37.460
So I'm not going to go
into great detail.

00:20:37.460 --> 00:20:42.090
So the next type of services
are messaging services.

00:20:42.090 --> 00:20:48.740
Messaging services are
communication services where

00:20:48.740 --> 00:20:51.520
you can now access
your contacts.

00:20:51.520 --> 00:20:52.680
You can access your calendar.

00:20:52.680 --> 00:20:54.040
You can send emails.

00:20:54.040 --> 00:20:58.480
So you can very easily write
a script that accesses your

00:20:58.480 --> 00:21:02.570
contacts and a group of contacts
or only selected

00:21:02.570 --> 00:21:03.990
contacts, and then send them

00:21:03.990 --> 00:21:06.250
customized emails, for example.

00:21:06.250 --> 00:21:12.235
So that would be a very good use
case for lot of different

00:21:12.235 --> 00:21:14.610
data-driven communication
that you may have.

00:21:14.610 --> 00:21:16.950
For instance, you may
want to send the

00:21:16.950 --> 00:21:18.300
example of sales report.

00:21:18.300 --> 00:21:20.890
You may want to send it to only
certain people if the

00:21:20.890 --> 00:21:23.590
sales numbers are low
or high or whatever.

00:21:23.590 --> 00:21:26.370
So you can now access
your contacts.

00:21:26.370 --> 00:21:28.570
You can access your calendar.

00:21:28.570 --> 00:21:32.270
And you can interact more
meaningfully and in an

00:21:32.270 --> 00:21:35.685
automated way with
people around who

00:21:35.685 --> 00:21:39.170
are also using Apps.

00:21:39.170 --> 00:21:48.140
So this code snippet is an
example of how easy it is use

00:21:48.140 --> 00:21:49.970
Calendars, for example.

00:21:49.970 --> 00:21:55.810
So you use
CalendarApp.getCalendarById,

00:21:55.810 --> 00:21:59.080
and all of a sudden you have
access to your calendar.

00:21:59.080 --> 00:22:00.940
How cool is that?

00:22:00.940 --> 00:22:04.780
And then you can use standard
JavaScript date functions to

00:22:04.780 --> 00:22:08.620
instantiate date clusters, and
you can create an event.

00:22:08.620 --> 00:22:14.290
So for example, in our example
about sales reports--

00:22:14.290 --> 00:22:17.000
say if the sales numbers come in
low and you want to take an

00:22:17.000 --> 00:22:19.820
action automatically where you
want to schedule an event with

00:22:19.820 --> 00:22:22.220
a group of people or calendar
event, then you can

00:22:22.220 --> 00:22:23.300
certainly do that.

00:22:23.300 --> 00:22:24.900
You don't have to manually
look at something.

00:22:24.900 --> 00:22:29.520
You can do those kinds of things
in an automated way.

00:22:29.520 --> 00:22:32.790
Use of Calendar API, for
instance, comes in very handy

00:22:32.790 --> 00:22:34.040
if you are managing events.

00:22:43.760 --> 00:22:46.030
Then let's talk a little
bit about third

00:22:46.030 --> 00:22:51.110
party integration APIs.

00:22:51.110 --> 00:22:59.590
So not only can you use Apps
Script to integrate with a lot

00:22:59.590 --> 00:23:01.540
of Google Apps products--

00:23:01.540 --> 00:23:04.760
as I just mentioned, Calendar,
Contacts, Spreadsheet, Sites,

00:23:04.760 --> 00:23:05.800
and others--

00:23:05.800 --> 00:23:10.970
but you can also access
third party APIs.

00:23:10.970 --> 00:23:13.140
And in the example that you
just saw in the training

00:23:13.140 --> 00:23:18.420
application, we used UrlFetch
APIs in Apps Script to connect

00:23:18.420 --> 00:23:22.990
to Netflix's OData API.

00:23:22.990 --> 00:23:25.480
Using UrlFetch, you can also
connect to APIs that require

00:23:25.480 --> 00:23:27.380
OAuth-based authentication.

00:23:27.380 --> 00:23:30.410
And Apps Script really makes
OAuths very simple.

00:23:30.410 --> 00:23:32.760
So if you have a use case where,
in a site space, you

00:23:32.760 --> 00:23:36.460
want to fetch data from an API
that requires OAuth, you can

00:23:36.460 --> 00:23:39.580
do that very easy in one line
of code using UrlFetch.

00:23:43.090 --> 00:23:44.330
We have SOAP APIs.

00:23:44.330 --> 00:23:46.230
We have JDBC connectivity.

00:23:46.230 --> 00:23:50.650
So if your database server is
available, accessible, using

00:23:50.650 --> 00:23:55.250
JDBC from Google servers, then
you can run JDBC queries.

00:23:55.250 --> 00:23:59.260
You can access a bunch of SOAP
APIs if the SOAP interface is

00:23:59.260 --> 00:24:02.021
what you're using
for [? it. ?]

00:24:02.021 --> 00:24:04.460
The overall idea is that we
want you, as Google Apps

00:24:04.460 --> 00:24:07.560
users, to be able to extend
the way you want

00:24:07.560 --> 00:24:09.780
to use Google Apps.

00:24:09.780 --> 00:24:13.300
We want you to be able to
implement all the different

00:24:13.300 --> 00:24:17.320
types of use cases that you
could using Apps Script.

00:24:20.700 --> 00:24:24.226
So this is a code snippet which
shows you how easy it is

00:24:24.226 --> 00:24:24.980
to fetch data.

00:24:24.980 --> 00:24:29.370
And this is the exact cut and
paste from the training

00:24:29.370 --> 00:24:30.930
application that I
just showed you.

00:24:30.930 --> 00:24:36.280
So we form a URL here, which is
from Netflix's OData APIs,

00:24:36.280 --> 00:24:39.070
and then we form a full-blown
request.

00:24:39.070 --> 00:24:43.400
And we just say UrlFetch,
UrlFetchApp.fetch, and we then

00:24:43.400 --> 00:24:45.660
parse the [? result. ?]

00:24:45.660 --> 00:24:47.990
It's that simple.

00:24:47.990 --> 00:24:51.310
And if I were to use, say,
Twitter's API, which required

00:24:51.310 --> 00:24:54.370
OAuth, it wouldn't be any
longer than that.

00:24:54.370 --> 00:24:57.417
It would be probably four lines,
just like what this is.

00:25:03.880 --> 00:25:08.400
So the fourth major category
of Apps Script

00:25:08.400 --> 00:25:10.170
services are UI services.

00:25:10.170 --> 00:25:13.020
And they are actually
quite interesting.

00:25:13.020 --> 00:25:19.820
So using UI services in Apps
Script, you can create very

00:25:19.820 --> 00:25:23.870
functional, meaningful,
good-looking UI applications,

00:25:23.870 --> 00:25:27.210
as you just saw in the
training application.

00:25:27.210 --> 00:25:30.440
So the underlying implementation
of UI services

00:25:30.440 --> 00:25:34.860
is Google Web Toolkit, without
all its complexity.

00:25:34.860 --> 00:25:41.700
So using Apps Script, you can
use UI services to write UI

00:25:41.700 --> 00:25:46.090
using JavaScript without
having to worry about

00:25:46.090 --> 00:25:49.730
compiling your Java code, and if
you were to use Google Web

00:25:49.730 --> 00:25:52.740
Toolkit without having to worry
about a lot of different

00:25:52.740 --> 00:25:54.400
complexity that comes
with deploying Web

00:25:54.400 --> 00:25:56.290
Apps, things like that.

00:25:56.290 --> 00:26:02.300
Using UI services, you can
very easily assemble UI

00:26:02.300 --> 00:26:05.595
components, all the widgets that
are available, deploy it

00:26:05.595 --> 00:26:08.210
in a Sites page, or a standalone
application, for

00:26:08.210 --> 00:26:10.950
that matter, and you'll
be all set.

00:26:10.950 --> 00:26:14.890
And I am going to show you in a
little bit as to how you can

00:26:14.890 --> 00:26:16.710
do that with one particular
example.

00:26:19.450 --> 00:26:22.910
So this is an actual cut and
paste from the training

00:26:22.910 --> 00:26:25.200
application, where it shows
you how easy it is to

00:26:25.200 --> 00:26:28.380
create a list box.

00:26:28.380 --> 00:26:31.250
And I'm going to show you how
to create a list box.

00:26:31.250 --> 00:26:33.090
So let me copy this code.

00:26:33.090 --> 00:26:39.020
And in an actual live session,
I'm going to show you in Live

00:26:39.020 --> 00:26:43.140
Editor how easy it is.

00:26:43.140 --> 00:26:44.175
You can see this all right.

00:26:44.175 --> 00:26:45.910
So let me copy this code.

00:26:53.440 --> 00:26:54.690
Copy the code.

00:27:00.880 --> 00:27:03.920
So if you want to create a
script in a Sites page, then

00:27:03.920 --> 00:27:07.110
you click on More Actions
in a Google site.

00:27:07.110 --> 00:27:10.380
And then you click
on Manage Site.

00:27:10.380 --> 00:27:14.010
As soon as you click on Manage
Site, you will see Apps

00:27:14.010 --> 00:27:16.700
Scripts here on the
extreme left.

00:27:16.700 --> 00:27:18.630
You click on Apps Script.

00:27:18.630 --> 00:27:20.750
And then you will see a list
of scripts that you have

00:27:20.750 --> 00:27:23.980
available in that Google site.

00:27:23.980 --> 00:27:27.110
So here we want to write a new
script just to show you how

00:27:27.110 --> 00:27:28.380
you can use Apps Script.

00:27:28.380 --> 00:27:33.100
So we launch the editor and
we write our script.

00:27:33.100 --> 00:27:37.640
So I've just copied some code.

00:27:37.640 --> 00:27:42.540
So before I do that, each script
that is embedded inside

00:27:42.540 --> 00:27:44.950
needs to be called doGet because
of [? get ?] call.

00:27:44.950 --> 00:27:47.400
Then I will say I want to
start a new application.

00:27:47.400 --> 00:27:49.480
So I'll say UiApp.

00:27:52.280 --> 00:27:55.760
And you can see the content
assisting the editor, so how

00:27:55.760 --> 00:27:58.740
easy it is for you to
write a script.

00:27:58.740 --> 00:28:00.940
So I clear the new
application.

00:28:00.940 --> 00:28:03.580
Then I will paste the code.

00:28:03.580 --> 00:28:09.520
So I want to create a list box
label, which actually shows

00:28:09.520 --> 00:28:11.260
labels saying choose
the category.

00:28:11.260 --> 00:28:15.180
So I say app.createLabel here,
and I set some text.

00:28:15.180 --> 00:28:16.810
So I don't have a decorate
function.

00:28:16.810 --> 00:28:18.420
And I don't want to decorate
right now, so

00:28:18.420 --> 00:28:20.890
I'll just remove it.

00:28:20.890 --> 00:28:23.350
Then I will create a list box.

00:28:23.350 --> 00:28:27.510
CategoryListBox =
app.createListBox here.

00:28:27.510 --> 00:28:30.380
So it's that easy to
create a list box.

00:28:30.380 --> 00:28:32.220
And I set a name and an ID.

00:28:32.220 --> 00:28:34.220
This comes in handy when you're

00:28:34.220 --> 00:28:35.750
implementing callback handlers.

00:28:35.750 --> 00:28:39.250
For example, if I'm selecting a
particular list item, and I

00:28:39.250 --> 00:28:43.210
want to have a backend action
on it, then it becomes easy.

00:28:43.210 --> 00:28:48.040
And I add items to
this list box.

00:28:48.040 --> 00:28:51.840
So now I have a label
and a list box.

00:28:51.840 --> 00:28:53.870
But I need to add them to
my application, right?

00:28:57.550 --> 00:28:59.730
First, I will add this
label, for instance.

00:29:03.980 --> 00:29:07.120
And then I will say app.add, and
then I will add the list

00:29:07.120 --> 00:29:09.090
box itself.

00:29:09.090 --> 00:29:11.650
Now I could make it
a lot fancier.

00:29:11.650 --> 00:29:14.690
I can add vertical panels,
horizontal panels, or flow

00:29:14.690 --> 00:29:17.790
panels, things like that, the
types of panels that you are

00:29:17.790 --> 00:29:19.370
used to in Google Web Toolkit.

00:29:19.370 --> 00:29:22.390
You can have those types of
widgets as well if you are

00:29:22.390 --> 00:29:24.945
developing a complex UI.

00:29:24.945 --> 00:29:27.540
So once I have assembled
my application, I can

00:29:27.540 --> 00:29:29.880
just return my app.

00:29:29.880 --> 00:29:30.690
And I'm all set.

00:29:30.690 --> 00:29:32.680
So let's save the script.

00:29:32.680 --> 00:29:38.366
So I'll say Bootcamp Lecture
or something.

00:29:38.366 --> 00:29:42.230
And I save the script.

00:29:42.230 --> 00:29:46.500
So once I save the script, now
I need to make sure that I

00:29:46.500 --> 00:29:47.670
have to embed this in a page.

00:29:47.670 --> 00:29:49.600
So I create a new page.

00:29:49.600 --> 00:29:55.830
And I call it Bootcamp
Session.

00:29:55.830 --> 00:29:58.160
So once I create a new
page, I can insert

00:29:58.160 --> 00:29:59.410
the script as a gadget.

00:30:02.990 --> 00:30:06.660
So now I am editing a
page, a Sites page.

00:30:06.660 --> 00:30:10.190
I click on Insert on
the extreme left.

00:30:10.190 --> 00:30:13.700
And you can see Apps
Script Gadget here.

00:30:13.700 --> 00:30:15.500
You click on Apps
Script Gadget.

00:30:15.500 --> 00:30:19.470
Oops, did I go Picasa here?

00:30:19.470 --> 00:30:24.180
OK, Insert Apps Script Gadget.

00:30:24.180 --> 00:30:26.870
And you will see a list of
scripts that are available.

00:30:26.870 --> 00:30:30.430
So here's our Bootcamp
Lecture script.

00:30:30.430 --> 00:30:32.690
So we select it.

00:30:32.690 --> 00:30:38.530
And now we can provide as to
who can access this script.

00:30:38.530 --> 00:30:40.535
So I can ACL it in
the way I want.

00:30:40.535 --> 00:30:43.990
So I said let only myself
execute it, for instance.

00:30:43.990 --> 00:30:46.690
And I can get the height and
the title and all that.

00:30:46.690 --> 00:30:48.000
So I'm not going to tinker
around with that.

00:30:48.000 --> 00:30:51.032
So all of a sudden, what I've
done is I've embedded a script

00:30:51.032 --> 00:30:53.030
in a Sites page.

00:30:53.030 --> 00:30:55.520
Now this script could
do anything.

00:30:55.520 --> 00:30:58.170
It could access any of APIs--

00:30:58.170 --> 00:30:59.460
Calendar, Contacts, Sites.

00:30:59.460 --> 00:31:01.300
It could be a workflow.

00:31:01.300 --> 00:31:02.400
It could be an expense report.

00:31:02.400 --> 00:31:03.770
It could be a time booking
application.

00:31:03.770 --> 00:31:05.640
It could be any of
these things.

00:31:05.640 --> 00:31:07.960
And it could be a UI application
which leads you

00:31:07.960 --> 00:31:10.240
through certain workflow.

00:31:10.240 --> 00:31:14.570
But now, because you are Google
Apps users and you have

00:31:14.570 --> 00:31:17.070
a site, you have a place
to point to to those

00:31:17.070 --> 00:31:17.990
applications.

00:31:17.990 --> 00:31:19.050
So it gives you a structure.

00:31:19.050 --> 00:31:21.050
It enhances the Sites
capability.

00:31:21.050 --> 00:31:25.660
It allows you to use various
Google services, Apps, API's,

00:31:25.660 --> 00:31:27.260
in a much easier way.

00:31:27.260 --> 00:31:28.510
So let's save this.

00:31:31.560 --> 00:31:36.340
So once I save it, you can see
the script got executed

00:31:36.340 --> 00:31:37.790
because I am on that page.

00:31:37.790 --> 00:31:47.540
And I've just implemented
the list box here.

00:31:47.540 --> 00:31:50.820
And the list box doesn't do
anything because we have not

00:31:50.820 --> 00:31:52.160
put in handlers here.

00:31:52.160 --> 00:31:53.410
So what are handlers?

00:31:57.260 --> 00:31:59.210
Let's go back to our
presentation real quick here.

00:32:07.319 --> 00:32:08.290
OK.

00:32:08.290 --> 00:32:11.980
So as you can see in this code
in the last few lines, you can

00:32:11.980 --> 00:32:15.210
associate events with
each UI object.

00:32:15.210 --> 00:32:19.360
So in the case of a
list box, you can

00:32:19.360 --> 00:32:21.190
associate a change event.

00:32:21.190 --> 00:32:27.520
And you can provide the
name of the function.

00:32:27.520 --> 00:32:31.030
And this is the name of the
function here, which needs to

00:32:31.030 --> 00:32:32.480
be executed when somebody
selects a

00:32:32.480 --> 00:32:33.880
list item, for instance.

00:32:33.880 --> 00:32:37.560
This is very similar to what
types of handlers that are

00:32:37.560 --> 00:32:39.190
available in Google
Web Toolkit.

00:32:39.190 --> 00:32:41.440
But this is a lot simpler
because you don't have to

00:32:41.440 --> 00:32:43.980
worry about some of the
additional complexity.

00:32:43.980 --> 00:32:46.090
So as soon as you give the
name of the function that

00:32:46.090 --> 00:32:53.760
needs to be executed, and a user
selects a list item, then

00:32:53.760 --> 00:32:57.810
you have set up a very
dynamic list box.

00:32:57.810 --> 00:33:00.580
So there are different types
of server handlers.

00:33:00.580 --> 00:33:02.470
There are click handlers, change
handlers, selection

00:33:02.470 --> 00:33:03.720
handlers, things like that.

00:33:07.810 --> 00:33:11.470
You can create a very rich
UI using UI services.

00:33:18.800 --> 00:33:21.160
So let me talk a little
bit about triggers

00:33:21.160 --> 00:33:22.090
and what they are.

00:33:22.090 --> 00:33:25.600
So triggers are an asynchronous
way of executing

00:33:25.600 --> 00:33:26.540
Apps Script.

00:33:26.540 --> 00:33:29.940
You can think of triggers as
cron's cousin, sort of.

00:33:29.940 --> 00:33:32.370
So there are two types
of triggers.

00:33:32.370 --> 00:33:35.867
There's a time driven trigger,
which allows a script to

00:33:35.867 --> 00:33:39.900
execute at a certain frequency
in a time-driven fashion.

00:33:39.900 --> 00:33:41.680
And then there are
event triggers.

00:33:41.680 --> 00:33:46.180
Event triggers are triggers when
a user performs a certain

00:33:46.180 --> 00:33:48.240
action, a script got executed.

00:33:48.240 --> 00:33:51.530
For instance, you can set up a
trigger on your spreadsheet.

00:33:51.530 --> 00:33:54.980
For instance, when, say, a user
opens a spreadsheet, you

00:33:54.980 --> 00:33:58.360
can have a script executed in
an asynchronous way without

00:33:58.360 --> 00:34:01.360
the user actually, who opened
the script, who opens the

00:34:01.360 --> 00:34:05.690
spreadsheet, not knowing or not
getting impacted by it.

00:34:05.690 --> 00:34:08.530
So there are certain types of
event-driven triggers, which

00:34:08.530 --> 00:34:12.380
are very useful in certain
use cases.

00:34:12.380 --> 00:34:16.310
The time-driven trigger, as I
said, is cron's cousin, where

00:34:16.310 --> 00:34:20.460
you can set up frequencies
at which you want

00:34:20.460 --> 00:34:23.010
to execute the script.

00:34:23.010 --> 00:34:27.260
So how do we make it easy for
you to write scripts?

00:34:27.260 --> 00:34:29.639
So I'll go back to the
script editor.

00:34:29.639 --> 00:34:32.870
And in the script editor, you
will see some ID, like

00:34:32.870 --> 00:34:33.550
similarities.

00:34:33.550 --> 00:34:35.650
And this is all, by the
way, a browser.

00:34:35.650 --> 00:34:39.699
So you will see we have
a debugger here.

00:34:39.699 --> 00:34:42.760
So you can set a break point.

00:34:42.760 --> 00:34:45.250
And then you can run the
script in a debugger.

00:34:45.250 --> 00:34:49.330
So it's very easy for you
to debug scripts.

00:34:49.330 --> 00:34:50.850
You can also add
collaborators.

00:34:50.850 --> 00:34:52.100
You can share scripts.

00:34:54.500 --> 00:34:55.690
So you click on Share.

00:34:55.690 --> 00:34:59.480
So you can add collaborators
to your scripts.

00:34:59.480 --> 00:35:04.310
So two people or three people
can write the same script.

00:35:04.310 --> 00:35:07.510
You can publish this script
as a service.

00:35:07.510 --> 00:35:11.830
So what this means is that you
are publishing this app as a

00:35:11.830 --> 00:35:13.320
standalone service.

00:35:13.320 --> 00:35:15.950
So when you click on Publish
as a Service, then

00:35:15.950 --> 00:35:17.410
it gives you a URL.

00:35:17.410 --> 00:35:18.810
And you can distribute
this URL.

00:35:18.810 --> 00:35:22.230
And this script can be executed
outside of sites or

00:35:22.230 --> 00:35:23.780
spreadsheets.

00:35:23.780 --> 00:35:28.320
So using UI services, and
publishing that app that uses

00:35:28.320 --> 00:35:33.170
UI services as a standalone
service, you can write web app

00:35:33.170 --> 00:35:34.660
really, really fast.

00:35:34.660 --> 00:35:36.140
It's probably one of
the fastest ways

00:35:36.140 --> 00:35:37.630
to write a web app.

00:35:37.630 --> 00:35:41.580
You don't have to worry about
any deployments or all of the

00:35:41.580 --> 00:35:42.230
stuff that we talked about.

00:35:42.230 --> 00:35:46.350
It's like just reuse the UI
services, write a UI.

00:35:46.350 --> 00:35:48.400
And then publish it
as a service.

00:35:48.400 --> 00:35:50.610
And you are all set with
a standalone web app.

00:35:53.120 --> 00:35:55.870
And then you can also
publish your script.

00:35:55.870 --> 00:35:59.190
Like, you can share it
with other users.

00:35:59.190 --> 00:36:02.570
And when you click on Publish
Script, you actually can

00:36:02.570 --> 00:36:04.240
publish a script in a gallery.

00:36:04.240 --> 00:36:07.210
And we have a gallery of scripts
where our community

00:36:07.210 --> 00:36:11.730
has contributed hundreds of
scripts across different types

00:36:11.730 --> 00:36:13.700
of use cases.

00:36:13.700 --> 00:36:19.010
So it's a great way to get
started using Apps Script, is

00:36:19.010 --> 00:36:21.980
you go to the gallery, you look
at the script or the use

00:36:21.980 --> 00:36:24.260
case that you want to solve,
and then you go to that

00:36:24.260 --> 00:36:26.540
particular category and then
start writing the script.

00:36:26.540 --> 00:36:29.120
And you can publish
scripts as well.

00:36:29.120 --> 00:36:30.250
You can manage your triggers.

00:36:30.250 --> 00:36:32.760
I just mentioned, which is you
can click on all your triggers

00:36:32.760 --> 00:36:34.850
and you can see if you
have any triggers.

00:36:34.850 --> 00:36:37.520
And then you can even have
notifications on triggers.

00:36:37.520 --> 00:36:41.700
So for instance, in my example
about the family birthday

00:36:41.700 --> 00:36:42.490
email thing--

00:36:42.490 --> 00:36:44.650
say, for instance, I set up a
trigger, and that trigger

00:36:44.650 --> 00:36:45.880
starts failing.

00:36:45.880 --> 00:36:47.520
I would receive notifications.

00:36:47.520 --> 00:36:49.840
So I can avoid that
uncomfortable scenario that

00:36:49.840 --> 00:36:52.050
somebody did not get their
birthday email or

00:36:52.050 --> 00:36:53.300
something like that.

00:37:04.470 --> 00:37:07.040
So how can you get started
using Apps Script?

00:37:12.120 --> 00:37:15.770
So Apps Script is very easy.

00:37:15.770 --> 00:37:19.580
You can just go to that go to
Spreadsheet or Sites and open

00:37:19.580 --> 00:37:21.100
the browser or start
writing code.

00:37:21.100 --> 00:37:23.380
But if you prefer a little bit
structured approach, then you

00:37:23.380 --> 00:37:25.700
can go to our documentation
site.

00:37:25.700 --> 00:37:30.560
And it has a wide variety of
references, tutorials, which

00:37:30.560 --> 00:37:33.790
walk you through actual
use cases.

00:37:33.790 --> 00:37:36.850
You can also participate in our
forums community, which is

00:37:36.850 --> 00:37:37.860
very, very active.

00:37:37.860 --> 00:37:40.840
And it's a great place
to share ideas.

00:37:40.840 --> 00:37:46.160
And I just mentioned, you can
use Gallery to get started.

00:37:46.160 --> 00:37:49.930
Say you are looking for a mail
merge solution, for instance.

00:37:49.930 --> 00:37:52.350
You can go to our gallery and
look for mail merge scripts

00:37:52.350 --> 00:37:55.080
that are out there that
our users have shared.

00:37:55.080 --> 00:37:57.780
And that could be one starting
point for you.

00:37:57.780 --> 00:38:00.180
And then you can look at a wide
variety of case studies

00:38:00.180 --> 00:38:03.340
that we publish from time to
time as to how our users are

00:38:03.340 --> 00:38:04.370
using Apps Script.

00:38:04.370 --> 00:38:07.770
So you can follow our Apps
Script blog or Google Apps

00:38:07.770 --> 00:38:09.000
Developers blog.

00:38:09.000 --> 00:38:12.430
And you will find very
interesting case studies on

00:38:12.430 --> 00:38:14.130
how to use Apps Script.

00:38:14.130 --> 00:38:16.770
And I'm going to walk you
a little bit about our

00:38:16.770 --> 00:38:17.880
documentation.

00:38:17.880 --> 00:38:22.760
So you go to Google Apps
Script Documentation.

00:38:22.760 --> 00:38:25.580
And you can access
all the docs.

00:38:25.580 --> 00:38:29.200
And this is a healthy reference
that we have, of a

00:38:29.200 --> 00:38:30.470
wide variety of services.

00:38:30.470 --> 00:38:33.810
And this list is growing.

00:38:33.810 --> 00:38:36.830
But not only that, we have a
whole bunch of tutorials for

00:38:36.830 --> 00:38:39.590
beginners, intermediate,
and advanced use cases.

00:38:42.640 --> 00:38:46.810
And then if you click on
Support, then you can access

00:38:46.810 --> 00:38:48.890
our forums and issue trackers.

00:38:48.890 --> 00:38:51.980
And you can see how active
our community is.

00:38:51.980 --> 00:38:53.680
So our tutorials are a
really great way to

00:38:53.680 --> 00:38:56.760
start using Apps Script.

00:38:56.760 --> 00:39:01.720
I am also going to plug
our I/O sessions.

00:39:01.720 --> 00:39:06.080
So tomorrow between 3:45 and
4:45, you should definitely be

00:39:06.080 --> 00:39:09.740
in room two to see what's new
with Apps Script, and what

00:39:09.740 --> 00:39:14.800
different types of use cases
you can implement, and what

00:39:14.800 --> 00:39:16.940
more we are doing to make
this Apps Script

00:39:16.940 --> 00:39:18.500
experience a lot better.

00:39:18.500 --> 00:39:22.280
And then there's another session
on May 11th at 1:45,

00:39:22.280 --> 00:39:23.510
again in room two.

00:39:23.510 --> 00:39:26.530
You want to be there in this
session, because in this

00:39:26.530 --> 00:39:28.870
session we are going to cover
specifically about enterprise

00:39:28.870 --> 00:39:31.660
workflows, and how you can
implement those workflows

00:39:31.660 --> 00:39:33.260
using Apps Script.

00:39:33.260 --> 00:39:37.320
And this is going to be a
wonderful session because

00:39:37.320 --> 00:39:39.660
you're going to see a wide
variety of ways Apps Script

00:39:39.660 --> 00:39:45.180
can be used to create common
workflow applications.

00:39:45.180 --> 00:39:47.680
So with that, I'm going to
take a few questions.

00:39:47.680 --> 00:39:50.320
Thank you.

00:39:50.320 --> 00:39:55.030
[APPLAUSE]

00:39:55.030 --> 00:39:59.550
AUDIENCE: Say you wanted to have
two scripts on one page--

00:39:59.550 --> 00:40:02.740
how do you deal with global
name space clashes?

00:40:02.740 --> 00:40:04.850
SAURABH GUPTA: So I don't think
we are supporting two

00:40:04.850 --> 00:40:06.460
scripts in one page
at this time.

00:40:06.460 --> 00:40:08.470
There might be some
issues with that.

00:40:08.470 --> 00:40:15.220
So this is a very interesting
use case.

00:40:15.220 --> 00:40:16.980
Never come across it.

00:40:16.980 --> 00:40:18.510
I don't think we are supporting
at this time.

00:40:21.860 --> 00:40:22.150
AUDIENCE: OK.

00:40:22.150 --> 00:40:23.320
Two quick questions.

00:40:23.320 --> 00:40:27.410
The first is, so one limitation
I've found with the

00:40:27.410 --> 00:40:29.570
Google Spreadsheets is that
you can't do macros.

00:40:29.570 --> 00:40:32.540
Like, I like to program macros
to do grand tasks for me.

00:40:32.540 --> 00:40:34.070
It seems like this is a
great way to do that.

00:40:34.070 --> 00:40:36.590
But the problem being that
once I'm in Google

00:40:36.590 --> 00:40:40.370
Spreadsheets editing my data,
I can't just press Control,

00:40:40.370 --> 00:40:42.530
custom P, Control
X, or something

00:40:42.530 --> 00:40:44.190
and execute my macro.

00:40:44.190 --> 00:40:53.870
But can you make an editable
spreadsheet on a Google site

00:40:53.870 --> 00:40:56.680
using this which also
can run macros--

00:40:56.680 --> 00:40:58.415
as you're entering data,
you can run macros?

00:40:58.415 --> 00:41:01.130
It seems like this is a way
around the problem of not

00:41:01.130 --> 00:41:05.140
having macros on Google
Spreadsheets maybe.

00:41:05.140 --> 00:41:06.120
SAURABH GUPTA: So let me
rephrase the question.

00:41:06.120 --> 00:41:10.700
So you want to write an Apps
Script which is similar to a

00:41:10.700 --> 00:41:13.240
spreadsheet, but gets embedded
in a Sites page?

00:41:13.240 --> 00:41:16.187
AUDIENCE: Right, which allows
you to quickly do

00:41:16.187 --> 00:41:17.790
modifications on the data.

00:41:17.790 --> 00:41:18.090
SAURABH GUPTA: Right.

00:41:18.090 --> 00:41:21.530
So you can implement sort
of a spreadsheet

00:41:21.530 --> 00:41:26.220
using an editable grid.

00:41:26.220 --> 00:41:28.400
But it wouldn't be a full-blown
spreadsheet that

00:41:28.400 --> 00:41:31.850
you are used to, with all your
formulas and everything else.

00:41:31.850 --> 00:41:34.490
So there might be some
short-changing of experience

00:41:34.490 --> 00:41:36.130
in terms of what you will
get as a spreadsheet.

00:41:36.130 --> 00:41:40.680
But there is certainly grid-like
controls out there

00:41:40.680 --> 00:41:42.792
in UI surfaces that
you can use.

00:41:42.792 --> 00:41:43.200
AUDIENCE: OK.

00:41:43.200 --> 00:41:44.610
And the other quick question
is, I know there are other

00:41:44.610 --> 00:41:46.910
ways to do this.

00:41:46.910 --> 00:41:48.680
And maybe I have a question
because I haven't used Google

00:41:48.680 --> 00:41:49.310
Checkout much.

00:41:49.310 --> 00:41:51.580
But can this interface
with Google Checkout?

00:41:51.580 --> 00:41:56.350
Can I put a Google Checkout
functionality on my website

00:41:56.350 --> 00:41:59.560
that's linked through
this, and charge

00:41:59.560 --> 00:42:02.360
people money for things?

00:42:02.360 --> 00:42:05.360
SAURABH GUPTA: So what I didn't
talk about, because

00:42:05.360 --> 00:42:06.320
this was [? 101-01 ?]

00:42:06.320 --> 00:42:08.700
session, was about the
[? permissioning ?] model of

00:42:08.700 --> 00:42:09.530
Apps Script.

00:42:09.530 --> 00:42:14.570
So because Apps Script is sort
of a productivity tool, it is

00:42:14.570 --> 00:42:17.700
meant for you to enhance the
overall experience of apps and

00:42:17.700 --> 00:42:19.000
how you can extend apps.

00:42:19.000 --> 00:42:21.390
So there are certain
restrictions in terms of

00:42:21.390 --> 00:42:24.650
security model of how
a script executes.

00:42:24.650 --> 00:42:27.550
So, for instance, if you write
a script and embed it in a

00:42:27.550 --> 00:42:32.200
Sites page, then went out and
say you distribute the link to

00:42:32.200 --> 00:42:35.220
the Sites page to all the users
in your Apps domain, for

00:42:35.220 --> 00:42:39.220
instance, then whenever a user
hits that link, the script

00:42:39.220 --> 00:42:42.080
executes as you under your
identity, right?

00:42:42.080 --> 00:42:42.880
AUDIENCE: Right.

00:42:42.880 --> 00:42:45.540
SAURABH GUPTA: So there might
be identity restrictions and

00:42:45.540 --> 00:42:47.750
things like that.

00:42:47.750 --> 00:42:48.956
Yeah.

00:42:48.956 --> 00:42:50.206
AUDIENCE: Cool.

00:42:52.380 --> 00:42:54.990
AUDIENCE: I notice when you're
trying to share your script,

00:42:54.990 --> 00:42:58.050
when you tried to create a
URL, you had two options.

00:42:58.050 --> 00:43:01.000
I can run this script, and
everybody can run this script.

00:43:01.000 --> 00:43:04.730
Can you make it so me and three
other people can run

00:43:04.730 --> 00:43:07.100
this script also and
nobody else, rather

00:43:07.100 --> 00:43:09.630
than just me and everyone?

00:43:09.630 --> 00:43:15.520
SAURABH GUPTA: So if you are
non-Apps domain user--

00:43:15.520 --> 00:43:17.170
like a regular consumer
user, meaning if you

00:43:17.170 --> 00:43:18.290
have a Gmail account--

00:43:18.290 --> 00:43:20.790
then it's you and
everyone else.

00:43:20.790 --> 00:43:22.120
That's the choice for now.

00:43:22.120 --> 00:43:28.700
But Apps Script is meant for
Apps domains users so that

00:43:28.700 --> 00:43:30.700
they can get a better experience
out of Apps.

00:43:30.700 --> 00:43:37.930
So most common scenarios are
where scripts are shared with

00:43:37.930 --> 00:43:40.790
the users who are within
the same domain.

00:43:40.790 --> 00:43:43.350
So that's a very common
use case.

00:43:43.350 --> 00:43:46.660
And for instance, in an
educational institution, a

00:43:46.660 --> 00:43:50.730
professor would share a Sites
page with a group of students,

00:43:50.730 --> 00:43:51.260
things like that.

00:43:51.260 --> 00:43:54.390
And all of them are in
the same Apps domain.

00:43:54.390 --> 00:43:57.026
Yes, please.

00:43:57.026 --> 00:43:58.022
OK.

00:43:58.022 --> 00:43:59.020
Yes.

00:43:59.020 --> 00:44:01.090
AUDIENCE: Hi.

00:44:01.090 --> 00:44:03.920
We are Google Enterprise
customers.

00:44:03.920 --> 00:44:08.530
So we use Google Docs, Google
Enterprise, Sites, et cetera.

00:44:08.530 --> 00:44:12.090
But for some of the CRM
capabilities, we use

00:44:12.090 --> 00:44:13.880
salesforce.com.

00:44:13.880 --> 00:44:17.470
And there are some Google things
we actually want to

00:44:17.470 --> 00:44:20.790
implement in house for
our internal people.

00:44:20.790 --> 00:44:25.360
One thing I wanted to ask is
the gadgets you added to a

00:44:25.360 --> 00:44:30.100
Sites page, can we add a gadget
to an email page so

00:44:30.100 --> 00:44:33.660
that somehow we can sign
in to salesforce.com?

00:44:33.660 --> 00:44:37.450
And when you say create a task
on this, it will give me a pop

00:44:37.450 --> 00:44:40.750
up, get some data from
salesforce.com, and then pulse

00:44:40.750 --> 00:44:44.680
data back to salesforce.com?

00:44:47.370 --> 00:44:49.090
It's a little bit
more complex.

00:44:49.090 --> 00:44:54.175
But it's not that tough, because
I can see you can call

00:44:54.175 --> 00:44:57.480
a REST API, which exists
for Salesforce.

00:44:57.480 --> 00:44:59.360
We can add a gadget
which exists.

00:44:59.360 --> 00:45:00.630
So is that possible?

00:45:00.630 --> 00:45:02.490
SAURABH GUPTA: So if I rephrase
your question-- so

00:45:02.490 --> 00:45:07.140
what you want is to be able to
write a script, which can be

00:45:07.140 --> 00:45:11.830
served up in Gmail, and
this gets executed

00:45:11.830 --> 00:45:12.320
as a gadget, right?

00:45:12.320 --> 00:45:14.080
AUDIENCE: Yeah, as
a site gadget.

00:45:14.080 --> 00:45:16.220
SAURABH GUPTA: Right,
so stay tuned.

00:45:16.220 --> 00:45:19.420
Yeah, yeah, so stay tuned.

00:45:19.420 --> 00:45:21.300
Yeah.

00:45:21.300 --> 00:45:22.630
Any other questions?

00:45:22.630 --> 00:45:24.023
Yes, please.

00:45:24.023 --> 00:45:26.569
AUDIENCE: Can you copy a script
[INAUDIBLE] somebody

00:45:26.569 --> 00:45:29.116
else can [INAUDIBLE]?

00:45:29.116 --> 00:45:30.720
SAURABH GUPTA: Yeah, you
can copy and paste.

00:45:30.720 --> 00:45:32.530
It's all available.

00:45:32.530 --> 00:45:34.760
You can share a script
through the gallery.

00:45:34.760 --> 00:45:36.990
So the question is can
you copy a script.

00:45:36.990 --> 00:45:38.630
So you can do it in
multiple ways.

00:45:38.630 --> 00:45:42.470
And we are actually expanding on
this a little bit in coming

00:45:42.470 --> 00:45:43.390
weeks and months.

00:45:43.390 --> 00:45:48.820
But as of today, you can copy
a script and cut and paste.

00:45:48.820 --> 00:45:49.970
That's basic, right?

00:45:49.970 --> 00:45:53.860
But you can also share
it in the gallery.

00:45:53.860 --> 00:45:57.100
So if you publish your script
to the gallery, somebody can

00:45:57.100 --> 00:45:58.030
download that script.

00:45:58.030 --> 00:46:00.350
And that's another sharing
mechanism.

00:46:00.350 --> 00:46:01.762
Yes, please.

00:46:01.762 --> 00:46:04.192
AUDIENCE: [INAUDIBLE]

00:46:04.192 --> 00:46:04.678
sharing.

00:46:04.678 --> 00:46:07.594
That would be [INAUDIBLE]

00:46:07.594 --> 00:46:11.482
access the site.

00:46:11.482 --> 00:46:14.410
[INAUDIBLE]

00:46:14.410 --> 00:46:15.470
SAURABH GUPTA: Right.

00:46:15.470 --> 00:46:16.400
AUDIENCE: OK.

00:46:16.400 --> 00:46:18.730
And then next time [INAUDIBLE]

00:46:18.730 --> 00:46:19.600
SAURABH GUPTA: I'm sorry?

00:46:19.600 --> 00:46:20.850
AUDIENCE: [INAUDIBLE]

00:46:23.270 --> 00:46:24.140
SAURABH GUPTA: Not
at this time.

00:46:24.140 --> 00:46:25.000
Yeah.

00:46:25.000 --> 00:46:27.400
But that's an interesting one.

00:46:27.400 --> 00:46:30.030
The idea of Apps Script is,
because it's a productivity

00:46:30.030 --> 00:46:34.210
tool, so we want your Sites
experience, your Spreadsheet

00:46:34.210 --> 00:46:35.940
experience, your Mail
experience, Calendar

00:46:35.940 --> 00:46:38.890
experience, to be elevated.

00:46:38.890 --> 00:46:41.060
And we want you to be able to
implement those use cases that

00:46:41.060 --> 00:46:43.230
I just talked about.

00:46:43.230 --> 00:46:44.210
Yes.

00:46:44.210 --> 00:46:44.710
Yes, please.

00:46:44.710 --> 00:46:46.450
AUDIENCE: [INAUDIBLE]

00:46:46.450 --> 00:46:48.320
SAURABH GUPTA: Sure, OK.

00:46:48.320 --> 00:46:49.810
So the question is can
I show Gallery?

00:46:49.810 --> 00:46:52.650
So I'm doing it real
quick here.

00:46:52.650 --> 00:46:54.490
So I'll go to the editor.

00:46:54.490 --> 00:46:57.060
And say, for instance,
I click on file.

00:46:57.060 --> 00:47:01.860
And I say Add Script
From Gallery.

00:47:01.860 --> 00:47:07.550
And there you can see the wide
variety of scripts that are

00:47:07.550 --> 00:47:09.140
available across different
types of--

00:47:13.410 --> 00:47:15.530
so these are scripts that
users have shared.

00:47:15.530 --> 00:47:18.910
They are, by the way, great
starting points for you to

00:47:18.910 --> 00:47:19.900
write a script.

00:47:19.900 --> 00:47:24.450
So if, at a time like this, at
6 o'clock, you wished you had

00:47:24.450 --> 00:47:27.570
more hours in a day, and you
wanted to automate a few

00:47:27.570 --> 00:47:29.800
things, start with
the gallery.

00:47:29.800 --> 00:47:32.000
See what you did today which
could have been automated.

00:47:32.000 --> 00:47:33.554
And maybe there's a solution
out there.

00:47:38.400 --> 00:47:41.480
Any other questions?

00:47:41.480 --> 00:47:44.010
If you have questions, you want
to get started, you can

00:47:44.010 --> 00:47:46.140
post on the forum.

00:47:46.140 --> 00:47:47.220
Community is active.

00:47:47.220 --> 00:47:48.570
Google is out on it.

00:47:48.570 --> 00:47:49.250
I am on it.

00:47:49.250 --> 00:47:53.380
And we constantly look for
users to share ideas.

00:47:53.380 --> 00:47:56.260
And if they have any problems,
we are constantly

00:47:56.260 --> 00:47:57.510
helping them out.

