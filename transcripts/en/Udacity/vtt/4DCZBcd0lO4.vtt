WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Let's do a recap of what we learned in this unit.

00:00:04.000 --> 00:00:09.000
First, we talked about some Python features that were maybe new to you.

00:00:09.000 --> 00:00:12.000
We used complex list comprehensions.

00:00:12.000 --> 00:00:20.000
That's something like x-squared for x in blah, blah, blah, if something.

00:00:20.000 --> 00:00:26.000
We showed generator expressions, and that's similar but with parentheses.

00:00:26.000 --> 00:00:31.000
We talked about generator functions or just generators,

00:00:31.000 --> 00:00:35.000
and we recognize those with the yield statement.

00:00:35.000 --> 00:00:39.000
We talked about the idea of handling different types.

00:00:39.000 --> 00:00:46.000
This has the fancy name of polymorphism, meaning different forms.

00:00:46.000 --> 00:00:53.000
We saw an example of that in timed calls where we said that the input n--

00:00:53.000 --> 00:00:58.000
and then there are other inputs there--n could be either an integer,

00:00:58.000 --> 00:01:03.000
in which case we would do one thing, or a float, in which case we would do something else.

00:01:03.000 --> 00:01:07.000
We checked which is which by using "isinstance."

00:01:07.000 --> 00:01:15.000
We talked about the eval function and how we can use that to map from a string to a Python object,

00:01:15.000 --> 00:01:18.000
which is the result of evaluating the string.

00:01:18.000 --> 00:01:22.000
In particular, the case of evaluating to a function.

00:01:22.000 --> 00:01:26.000
Eval is a way of making the computation be done once

00:01:26.000 --> 00:01:31.000
and getting all that work over with so that we can then use that work repeatedly.

00:01:31.000 --> 00:01:39.000
We also talked about instrumentation, and we did timing with the time.clock method

00:01:39.000 --> 00:01:46.000
that's built in, and then we built up timedcall and timedcalls routine.

00:01:46.000 --> 00:01:49.000
And we talked about counting number of invocations of functions

00:01:49.000 --> 00:01:52.000
or assignment statements or whatever.

00:01:52.000 --> 00:01:55.000
There we came up with our own routine that we called c.

00:01:55.000 --> 00:01:59.000
I guess I should say a little bit about variable naming conventions.

00:01:59.000 --> 00:02:07.000
Why did I use a short name like c here, whereas other places I had long, more expressive names?

00:02:07.000 --> 00:02:11.000
I guess the reason is c was used only for debugging purposes.

00:02:11.000 --> 00:02:15.000
It wasn't intended to be part of the final part of the program.

00:02:15.000 --> 00:02:21.000
I felt justified in having that be short, because I was going to be typing it and deleting it frequently.

00:02:21.000 --> 00:02:24.000
Things that are going to persist for longer have longer names

00:02:24.000 --> 00:02:31.000
For example, it's fine to say "for i in range something"

00:02:31.000 --> 00:02:37.000
where there we know that i is an index integer, and it only persists over this short loop.

00:02:37.000 --> 00:02:39.000
It's okay to have a short name.

00:02:39.000 --> 09:59:59.000
If something lasts longer, we probably want it to have a longer, more descriptive name.

