WEBVTT
Kind: captions
Language: en

00:00:04.760 --> 00:00:07.220
PAUL SAXMAN: Hello everybody,
my name is Paul Saxman.

00:00:07.220 --> 00:00:08.740
Thanks for tuning in.

00:00:08.740 --> 00:00:11.550
I'm a Senior Developer Advocate
at Google, and today

00:00:11.550 --> 00:00:14.120
I'm going to answer a few
questions that we had on

00:00:14.120 --> 00:00:18.290
Moderator about building Android
apps for Google TV.

00:00:18.290 --> 00:00:19.810
Next week we're going
to be talking--

00:00:19.810 --> 00:00:22.350
we have a track at Google I/O.
We're going to be covering a

00:00:22.350 --> 00:00:24.330
few different topics.

00:00:24.330 --> 00:00:25.990
One is actually UI.

00:00:25.990 --> 00:00:28.740
One is integrating media
devices with Google TV.

00:00:28.740 --> 00:00:31.210
And one is on the second screen
I'll specifically be

00:00:31.210 --> 00:00:34.170
giving the second screen talk.

00:00:34.170 --> 00:00:36.510
So today, I'd like to cover a
few of the questions that we

00:00:36.510 --> 00:00:38.610
had on second screen
applications.

00:00:38.610 --> 00:00:40.310
But I'd also like to cover a
few of the other general

00:00:40.310 --> 00:00:42.100
questions that you had, because
we had a few really

00:00:42.100 --> 00:00:44.070
good ones via Google
Moderator.

00:00:44.070 --> 00:00:47.880
And we have some in Stack
Overflow that we'll talk about

00:00:47.880 --> 00:00:50.150
today as well.

00:00:50.150 --> 00:00:52.760
On Google Moderator we had
a really good question.

00:00:52.760 --> 00:00:54.300
It actually ends up being
a few questions

00:00:54.300 --> 00:00:55.910
wrapped into one.

00:00:55.910 --> 00:00:58.920
The question is, I want to send
my Google, or Facebook ID

00:00:58.920 --> 00:01:01.480
password, to Google TV
for my Android phone.

00:01:01.480 --> 00:01:04.790
How can I connect or sync
between devices?

00:01:04.790 --> 00:01:06.920
I'm saying that's kind of
two questions in one.

00:01:06.920 --> 00:01:12.220
Primarily because managing IDs
and passwords is really one

00:01:12.220 --> 00:01:16.380
separate topic beyond actually
syncing data between devices.

00:01:16.380 --> 00:01:18.080
So I'd like to cover that
separately from

00:01:18.080 --> 00:01:19.850
actually the syncing.

00:01:19.850 --> 00:01:23.010
It's very fortuitous that
there's a few questions about

00:01:23.010 --> 00:01:25.850
syncing data between devices,
because, like I said, that's

00:01:25.850 --> 00:01:28.610
the talk I'm giving next week.

00:01:28.610 --> 00:01:30.820
So I can maybe give you a little
bit of a preview about

00:01:30.820 --> 00:01:32.640
some of the content that
I'm going to have.

00:01:32.640 --> 00:01:35.780
So in terms of connecting or
syncing between devices you

00:01:35.780 --> 00:01:38.690
actually have a number
of different options.

00:01:38.690 --> 00:01:40.880
The main option is really
do it yourself.

00:01:40.880 --> 00:01:43.930
You can actually use the
Java.net libraries which are

00:01:43.930 --> 00:01:46.700
available on the Android
framework.

00:01:46.700 --> 00:01:48.170
These actually let you
bring up a server

00:01:48.170 --> 00:01:50.180
socket on Google TV.

00:01:50.180 --> 00:01:53.470
You instantiate a socket on your
Android phone, and you

00:01:53.470 --> 00:01:55.130
actually can just do raw socket
communication between

00:01:55.130 --> 00:01:57.230
the two devices.

00:01:57.230 --> 00:02:00.360
The easiest way to actually find
the Google TV device, on

00:02:00.360 --> 00:02:03.610
the home network, for example,
is to use MDNS.

00:02:03.610 --> 00:02:06.980
Google TV devices actually
broadcast an MDNS service

00:02:06.980 --> 00:02:09.720
called Anymote on the
local network.

00:02:09.720 --> 00:02:12.890
So if you use an MDNS library
you can scan the network.

00:02:12.890 --> 00:02:15.360
Find the IP address of the
Google TV device in the living

00:02:15.360 --> 00:02:19.210
room or in the user's
home network.

00:02:19.210 --> 00:02:21.060
Once you have the IP address,
you can actually open up the

00:02:21.060 --> 00:02:23.135
socket connection and do the
communication yourself.

00:02:25.810 --> 00:02:28.820
We've found, actually, that
building up that type of

00:02:28.820 --> 00:02:31.360
communication, like the socket
communication, there's a lot

00:02:31.360 --> 00:02:33.750
of stuff that's repeated
or a lot of apps

00:02:33.750 --> 00:02:35.030
that actually share.

00:02:35.030 --> 00:02:38.790
So we're actually looking to
put together a library that

00:02:38.790 --> 00:02:41.710
developers can use to help
automate some of that.

00:02:41.710 --> 00:02:45.910
So your second option is to use
a library that we'll be

00:02:45.910 --> 00:02:49.200
discussing in a little more
detail at Google I/O.

00:02:49.200 --> 00:02:51.840
Your third option for sharing
data between two devices, or

00:02:51.840 --> 00:02:54.220
Google TV device and a handheld
device, is actually

00:02:54.220 --> 00:02:55.960
using the Anymote library.

00:02:55.960 --> 00:02:58.180
The Anymote library is a little
bit different from just

00:02:58.180 --> 00:02:59.280
raw data communication though.

00:02:59.280 --> 00:03:03.720
It's actually more of a remote
control library that allows

00:03:03.720 --> 00:03:06.450
handheld devices to send events,
like key events and

00:03:06.450 --> 00:03:09.600
mouse events, from a handheld
device to the TV.

00:03:09.600 --> 00:03:11.870
And the interesting thing about
Anymote is that actually

00:03:11.870 --> 00:03:14.530
the TV, or whatever app is in
the foreground on the TV

00:03:14.530 --> 00:03:16.100
actually, receives
those events.

00:03:16.100 --> 00:03:20.110
So you can actually use a
handheld device as an input

00:03:20.110 --> 00:03:23.640
device to send key
and mouse events.

00:03:23.640 --> 00:03:25.800
So that actually doesn't really
fit into the question.

00:03:25.800 --> 00:03:29.160
So what I'd say here is that
for syncing data, just raw

00:03:29.160 --> 00:03:32.370
data, either you're going to
look at opening up socket

00:03:32.370 --> 00:03:33.050
connections.

00:03:33.050 --> 00:03:34.790
You can use the MDNS
to discover the

00:03:34.790 --> 00:03:36.040
devices on the network.

00:03:38.440 --> 00:03:44.360
Or maybe wait a few days, or a
week, and see what we have for

00:03:44.360 --> 00:03:46.500
the library for sharing data.

00:03:46.500 --> 00:03:50.030
In terms of actually IDs and
passwords, and how you want to

00:03:50.030 --> 00:03:55.270
manage IDs and passwords on
devices, the short answer is

00:03:55.270 --> 00:03:57.080
you probably don't.

00:03:57.080 --> 00:03:59.850
You probably want to rely on
something like the Android

00:03:59.850 --> 00:04:02.600
Account Manager to manage
your Google accounts.

00:04:02.600 --> 00:04:10.300
Because when a user actually
sets up an Android device they

00:04:10.300 --> 00:04:12.730
enter their username
and password.

00:04:12.730 --> 00:04:16.810
And then those credentials are
actually used to get access to

00:04:16.810 --> 00:04:18.579
Google services.

00:04:18.579 --> 00:04:22.290
I don't exactly remember the
details, but it might be

00:04:22.290 --> 00:04:25.700
possible to actually get some
kind of authentication token

00:04:25.700 --> 00:04:28.260
out from the Account Manager
that you can

00:04:28.260 --> 00:04:31.660
share with Google TV.

00:04:31.660 --> 00:04:35.860
Or you can actually rely on
Google TV itself to actually

00:04:35.860 --> 00:04:37.620
have the credentials.

00:04:37.620 --> 00:04:39.810
It also has the Account Manager
so you can rely on

00:04:39.810 --> 00:04:40.850
that as well.

00:04:40.850 --> 00:04:43.520
Like any other Android device,
the user actually enters their

00:04:43.520 --> 00:04:45.680
credentials when they
set up the device.

00:04:45.680 --> 00:04:49.090
As far as Facebook is concerned,
I'm not too

00:04:49.090 --> 00:04:51.180
familiar with how
their APIs work.

00:04:51.180 --> 00:04:53.680
What I have seen on some
applications is that it

00:04:53.680 --> 00:04:55.950
actually opens up a web
interface when the user

00:04:55.950 --> 00:05:00.450
authenticates the Facebook
service.

00:05:00.450 --> 00:05:03.620
And I mean generally how this
type of authentication works

00:05:03.620 --> 00:05:06.590
is the application developer
doesn't have access to the

00:05:06.590 --> 00:05:08.290
credentials.

00:05:08.290 --> 00:05:10.220
But they will have access to
some kind of token that they

00:05:10.220 --> 00:05:13.350
can use for authentication
to the service.

00:05:13.350 --> 00:05:15.880
So likewise, in that situation,
if you do get a

00:05:15.880 --> 00:05:18.970
token back from their APIs you
can actually send it to the

00:05:18.970 --> 00:05:21.815
Google TV device using raw
socket connections.

00:05:24.870 --> 00:05:26.070
Let's see, another
question we have.

00:05:26.070 --> 00:05:28.720
So this is actually a very
popular question not only in

00:05:28.720 --> 00:05:32.600
Moderator, but we get this
question a lot about Anymote

00:05:32.600 --> 00:05:34.630
and developing second
screen apps and what

00:05:34.630 --> 00:05:36.350
libraries are available.

00:05:36.350 --> 00:05:38.590
Like I said, we're actually
going to release more

00:05:38.590 --> 00:05:41.540
libraries around Google
I/O next week.

00:05:41.540 --> 00:05:43.620
So stay tuned for that.

00:05:43.620 --> 00:05:46.370
What we have right now, however,
we have quite a few

00:05:46.370 --> 00:05:48.050
libraries available.

00:05:48.050 --> 00:05:50.770
We have the Anymote library,
like I mentioned earlier.

00:05:50.770 --> 00:05:54.170
That's a protocol for actually
sending key events and mouse

00:05:54.170 --> 00:05:57.870
events from a handheld
device to Google TV.

00:05:57.870 --> 00:06:00.720
And it actually is a very
sophisticated library, because

00:06:00.720 --> 00:06:03.400
it actually secures all
the communication.

00:06:03.400 --> 00:06:05.660
And the reason you want
to do that, secure the

00:06:05.660 --> 00:06:08.740
communication, is that if you
are entering key codes in a

00:06:08.740 --> 00:06:13.970
handheld device or using the
handheld device as a keyboard

00:06:13.970 --> 00:06:17.330
or using the key input, the user
could be entering things

00:06:17.330 --> 00:06:18.750
like passwords and login.

00:06:18.750 --> 00:06:20.320
You don't want necessarily
send that

00:06:20.320 --> 00:06:23.680
clear text to the TV.

00:06:23.680 --> 00:06:27.490
So the library actually secures
the data interchange

00:06:27.490 --> 00:06:32.270
so that it can't be sniffed
on a local network.

00:06:32.270 --> 00:06:35.360
So the Anymote protocol, the
Anymote library, is actually

00:06:35.360 --> 00:06:40.060
available in Java for Android
devices or for Java

00:06:40.060 --> 00:06:43.050
applications or Android
applications.

00:06:43.050 --> 00:06:45.960
We also very recently released
the C++ version.

00:06:45.960 --> 00:06:50.070
The C++ version we didn't
provide these wrappers, but

00:06:50.070 --> 00:06:53.660
could be used for iOS
devices as well.

00:06:53.660 --> 00:06:56.545
If you are building an iOS
application, and you want that

00:06:56.545 --> 00:06:58.900
to integrate with Google TV, you
can look into that as an

00:06:58.900 --> 00:07:01.040
option as well.

00:07:01.040 --> 00:07:05.210
We also have the Android remote
control for Google TV.

00:07:05.210 --> 00:07:07.920
We open sourced that.

00:07:07.920 --> 00:07:11.770
And so if you want to build a
remote control application,

00:07:11.770 --> 00:07:16.470
much like the Google TV remote
for Android, you can actually

00:07:16.470 --> 00:07:18.800
start there as well.

00:07:18.800 --> 00:07:22.950
Also very recently, we released
a library called the

00:07:22.950 --> 00:07:25.420
Anymote library.

00:07:25.420 --> 00:07:28.470
To be slightly differentiated
from the Anymote Protocol

00:07:28.470 --> 00:07:31.070
library that we released
previously.

00:07:31.070 --> 00:07:36.730
The Anymote library is actually
an Android library

00:07:36.730 --> 00:07:40.240
that you can import into an
Android project and Eclipse,

00:07:40.240 --> 00:07:41.910
and use it from there.

00:07:41.910 --> 00:07:46.400
It actually simplifies the
communication with Anymote.

00:07:46.400 --> 00:07:48.120
Actually, the pairing,
discovering, communication

00:07:48.120 --> 00:07:51.400
with Anymote quite a bit.

00:07:51.400 --> 00:07:53.550
So if you are thinking about
building an application, you

00:07:53.550 --> 00:07:57.230
might want to look into this
Anymote library as well.

00:07:57.230 --> 00:08:00.160
I've implemented an app
using this library.

00:08:00.160 --> 00:08:03.310
It's a matter of 100 to
200 lines of code.

00:08:03.310 --> 00:08:07.550
If you implemented the Android
remote control, or the Google

00:08:07.550 --> 00:08:09.480
TV remote control for Android,
if you take a look at that

00:08:09.480 --> 00:08:11.530
code it's quite a bit
more sophisticated.

00:08:11.530 --> 00:08:13.580
There's a lot more code that
was pushed up to the client

00:08:13.580 --> 00:08:14.700
side there.

00:08:14.700 --> 00:08:16.720
Whatever code we could abstract,
and put in this

00:08:16.720 --> 00:08:19.100
Android library, we did.

00:08:19.100 --> 00:08:22.080
So those are a few
of the options.

00:08:22.080 --> 00:08:23.970
We're probably going to, like
I said, talk about some more

00:08:23.970 --> 00:08:27.890
stuff at Google I/O about second
screen applications and

00:08:27.890 --> 00:08:28.810
code that's available.

00:08:28.810 --> 00:08:33.820
So my shameless pitch right now
is that if you're really

00:08:33.820 --> 00:08:36.019
curious about second screen
applications, and building

00:08:36.019 --> 00:08:40.944
them, be sure to check
out our talk at I/O.

00:08:40.944 --> 00:08:41.320
So I'm going to move on.

00:08:41.320 --> 00:08:47.850
So we get a lot of questions
about finding out what TV show

00:08:47.850 --> 00:08:50.590
or movie, a Google TV
user is watching.

00:08:50.590 --> 00:08:53.310
Of course a lot of developers
are really interested in this,

00:08:53.310 --> 00:08:55.880
because then you can do things
like tailored ads.

00:08:55.880 --> 00:08:58.900
You can tie into social
streams and actually

00:08:58.900 --> 00:09:04.044
synchronize the viewing
experience with a data feed or

00:09:04.044 --> 00:09:05.930
a social stream.

00:09:05.930 --> 00:09:07.640
Unfortunately, we don't
support that

00:09:07.640 --> 00:09:10.070
presently on Google TV.

00:09:10.070 --> 00:09:13.460
The issue is, A, it's actually
a secure video path.

00:09:13.460 --> 00:09:16.160
We can't just expose the
secure video path to

00:09:16.160 --> 00:09:18.380
applications for them to
analyze it themselves.

00:09:21.890 --> 00:09:23.800
The other issue is that--

00:09:23.800 --> 00:09:26.980
so even though the Google TV
remote controls are universal

00:09:26.980 --> 00:09:30.630
remotes, the user actually uses
that to replace any other

00:09:30.630 --> 00:09:32.660
remote that they have in
their living room.

00:09:32.660 --> 00:09:34.630
And the way that works is Google
TV devices presently

00:09:34.630 --> 00:09:37.130
have infrared blasters.

00:09:37.130 --> 00:09:39.830
So when you configure your
Google TV device you say what

00:09:39.830 --> 00:09:41.830
other AV devices and set-top
boxes you have

00:09:41.830 --> 00:09:43.320
in your living room.

00:09:43.320 --> 00:09:46.070
And then it can be configured to
control those applications

00:09:46.070 --> 00:09:50.310
through the Google TV
remote control.

00:09:50.310 --> 00:09:53.370
The issue is though-- so if a
user uses the Google TV remote

00:09:53.370 --> 00:09:56.350
control we know, essentially,
what they've changed their

00:09:56.350 --> 00:09:57.890
channel to.

00:09:57.890 --> 00:09:59.640
However there's no guarantee
that the user

00:09:59.640 --> 00:10:01.090
used the remote control.

00:10:01.090 --> 00:10:04.400
They could use their set-top
box remote control.

00:10:04.400 --> 00:10:05.960
They could use any other.

00:10:05.960 --> 00:10:08.130
Go to the TV and change
the channel directly.

00:10:08.130 --> 00:10:09.820
There's a number of different
things they can do.

00:10:09.820 --> 00:10:11.900
We don't have that information
necessarily.

00:10:11.900 --> 00:10:15.140
So we don't presently have an
API for actually exposing what

00:10:15.140 --> 00:10:16.940
channel the user is currently
watching.

00:10:16.940 --> 00:10:20.090
But this is a pretty common
request we get from

00:10:20.090 --> 00:10:20.840
developers.

00:10:20.840 --> 00:10:23.095
We are definitely investigating
other ways that

00:10:23.095 --> 00:10:26.110
we could potentially
solve this problem.

00:10:26.110 --> 00:10:29.740
Another very, very common
question we get is about

00:10:29.740 --> 00:10:31.315
embedding live TV
in applications.

00:10:33.890 --> 00:10:36.780
What a lot of developers want
to do is, in addition to

00:10:36.780 --> 00:10:40.850
actually synchronizing let's say
information and live TV,

00:10:40.850 --> 00:10:44.050
they want to put that in a
single interface on the TV.

00:10:44.050 --> 00:10:46.090
So, for example, you could be
watching a sporting event and

00:10:46.090 --> 00:10:48.700
maybe on the right hand side
you can actually see live

00:10:48.700 --> 00:10:50.930
statistics.

00:10:50.930 --> 00:10:53.420
Embedding live TV in an
application is something that

00:10:53.420 --> 00:10:55.950
we currently don't support.

00:10:55.950 --> 00:10:58.280
We absolutely get this
request a lot.

00:10:58.280 --> 00:11:01.590
We think it's a very,
very valid use case.

00:11:01.590 --> 00:11:04.150
And we are absolutely looking
at ways to solve

00:11:04.150 --> 00:11:05.980
that problem as well.

00:11:05.980 --> 00:11:08.170
We don't have anything to
announce in the very near

00:11:08.170 --> 00:11:12.860
term, but, like I said, along
with knowing what the user is

00:11:12.860 --> 00:11:16.500
watching, embedding live TV
is something that we're

00:11:16.500 --> 00:11:20.160
definitely listening
to developers on.

00:11:20.160 --> 00:11:22.890
We have another question
about Anymote.

00:11:22.890 --> 00:11:26.400
This is from a developer
that's very

00:11:26.400 --> 00:11:27.390
familiar with Anymote.

00:11:27.390 --> 00:11:29.990
And the question is, will
Anymote support international

00:11:29.990 --> 00:11:31.830
languages for upcoming

00:11:31.830 --> 00:11:33.830
deployments in other countries?

00:11:33.830 --> 00:11:36.140
We have made announcements that
Google TV is actually

00:11:36.140 --> 00:11:41.100
coming to other countries
sometime this year.

00:11:41.100 --> 00:11:44.700
Stay tuned on what countries
and when.

00:11:44.700 --> 00:11:47.680
So we are looking into actually
adding that support

00:11:47.680 --> 00:11:48.950
to Anymote right now.

00:11:48.950 --> 00:11:52.810
We think we have a potential
solution.

00:11:52.810 --> 00:11:54.540
I'd say stay tuned on that.

00:11:54.540 --> 00:11:59.280
It's something that we have
a solution in hand.

00:11:59.280 --> 00:12:03.630
It's just a matter of getting it
in the hands of developers.

00:12:03.630 --> 00:12:07.870
When and how unfortunately
we can't say yet.

00:12:07.870 --> 00:12:11.220
But that is something that
we'd hopefully be able to

00:12:11.220 --> 00:12:14.290
launch pretty soon.

00:12:14.290 --> 00:12:18.080
I'm going to go over to Stack
Overflow real quick.

00:12:18.080 --> 00:12:20.090
I mean, I look at the questions
in Stack Overflow

00:12:20.090 --> 00:12:20.750
quite regularly.

00:12:20.750 --> 00:12:23.010
And it looks like recently we
got a lot of questions on the

00:12:23.010 --> 00:12:24.570
Google TV Emulator.

00:12:24.570 --> 00:12:29.430
This potentially is related to
the fact that developers in

00:12:29.430 --> 00:12:31.460
other countries are actually
using the Emulator for

00:12:31.460 --> 00:12:32.560
development--

00:12:32.560 --> 00:12:35.330
more even domestically
as well.

00:12:35.330 --> 00:12:38.960
One question is, what are the
possibilities of the Google TV

00:12:38.960 --> 00:12:42.620
Emulator primarily
around live TV?

00:12:42.620 --> 00:12:47.900
So Google TV, and the Google TV
Emulator, actually supports

00:12:47.900 --> 00:12:52.480
the listing and channel changing
APIs that the real

00:12:52.480 --> 00:12:55.560
device supports.

00:12:55.560 --> 00:12:58.030
But it doesn't, obviously, have
access to actually real

00:12:58.030 --> 00:12:59.710
live TV content.

00:12:59.710 --> 00:13:02.920
So what will happen when you set
up the Emulator, you enter

00:13:02.920 --> 00:13:04.620
a US Postal code right now.

00:13:08.660 --> 00:13:11.290
Once you give it the postal
code, you actually can figure

00:13:11.290 --> 00:13:16.340
what content provider you have
or broadcast live TV provider.

00:13:16.340 --> 00:13:19.070
And then actually the channel
lineup will be populated in

00:13:19.070 --> 00:13:22.390
the channel listing provider.

00:13:22.390 --> 00:13:24.270
So when you create a channel
listing provider you can get a

00:13:24.270 --> 00:13:26.370
channel changing intent, and you
can actually fire off that

00:13:26.370 --> 00:13:27.980
intent to change the channel.

00:13:27.980 --> 00:13:31.250
What happens on the Emulator,
though, is that you're given a

00:13:31.250 --> 00:13:32.000
test screen.

00:13:32.000 --> 00:13:35.540
And it'll show you the call sign
for the channel and it'll

00:13:35.540 --> 00:13:37.290
show you the number.

00:13:37.290 --> 00:13:40.030
So you obviously don't have
access to actually the live

00:13:40.030 --> 00:13:44.960
content, but we do emulate live
content in the Emulator.

00:13:44.960 --> 00:13:48.390
So one other question we have,
this is actually a fairly

00:13:48.390 --> 00:13:51.860
common question as well, about
using Anymote in the Emulator.

00:13:51.860 --> 00:13:54.430
We actually don't
support Anymote

00:13:54.430 --> 00:13:55.800
right now in the Emulator.

00:13:55.800 --> 00:13:59.520
The issue is how we actually
bridge the network between the

00:13:59.520 --> 00:14:02.330
Emulator and the platform.

00:14:02.330 --> 00:14:06.200
This is something else
we're looking into.

00:14:06.200 --> 00:14:10.170
Obviously I'm covering all the
questions that we get a lot.

00:14:10.170 --> 00:14:12.740
If I keep saying that we're
looking into it, it's that

00:14:12.740 --> 00:14:14.550
these are the questions that are
in the top of our queue.

00:14:17.510 --> 00:14:19.110
Let me see.

00:14:19.110 --> 00:14:20.425
One other question here--

00:14:25.450 --> 00:14:27.970
actually I'm going to say
that's just about it.

00:14:27.970 --> 00:14:32.000
We did have one more question
in Moderator about Google TV

00:14:32.000 --> 00:14:36.130
being updated to ICS and how
long until Google TV is

00:14:36.130 --> 00:14:39.060
updated to the next release.

00:14:39.060 --> 00:14:40.195
This is something--

00:14:40.195 --> 00:14:45.240
we don't necessarily announce
future releases, but we are

00:14:45.240 --> 00:14:49.360
definitely looking into actually
updating it to a

00:14:49.360 --> 00:14:50.320
future release.

00:14:50.320 --> 00:14:53.100
Whether that's going to be ICS
or the release after that we

00:14:53.100 --> 00:14:54.610
cannot say.

00:14:54.610 --> 00:14:57.810
But it is something that
hopefully developers and users

00:14:57.810 --> 00:15:02.340
can see in the not too
distant future.

00:15:02.340 --> 00:15:04.410
So I think that's just about
it for the questions.

00:15:04.410 --> 00:15:09.670
We started a little bit late,
but I'm going to say that I

00:15:09.670 --> 00:15:12.070
think I covered kind of the main
questions that we had via

00:15:12.070 --> 00:15:15.030
Moderator and Stack Overflow.

00:15:15.030 --> 00:15:17.420
Again, so next week
the Google TV I/O

00:15:17.420 --> 00:15:19.060
sessions are on Thursday.

00:15:19.060 --> 00:15:22.340
I think they're starting
at 9:00 AM and

00:15:22.340 --> 00:15:24.310
going through the morning.

00:15:24.310 --> 00:15:27.420
We have one, Christian Kurzke
is going to give a talk on

00:15:27.420 --> 00:15:30.140
media devices.

00:15:30.140 --> 00:15:34.820
Ossama Alami is going to give
a talk on user experience.

00:15:34.820 --> 00:15:37.780
And the talk that I'll be
giving is going to be on

00:15:37.780 --> 00:15:40.260
building second screen apps that
integrate with Google TV.

00:15:40.260 --> 00:15:42.180
Definitely hope to
see you there.

00:15:42.180 --> 00:15:44.930
If you have any questions, feel
free to keep posting them

00:15:44.930 --> 00:15:46.760
on Stack Overflow.

00:15:46.760 --> 00:15:48.670
I'm guessing this moderator
queue will be open for a

00:15:48.670 --> 00:15:49.050
little while.

00:15:49.050 --> 00:15:51.210
So I can definitely respond
there as well.

00:15:51.210 --> 00:15:54.256
And if you can make it to I/O,
I'd definitely like to meet up

00:15:54.256 --> 00:15:55.506
with you there.

