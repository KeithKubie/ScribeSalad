WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.850
Fundamentally the question is this:
you've got a message that you want to

00:00:05.850 --> 00:00:11.370
send and it's either "yes" or "no". Or
sometimes in signalling they call that

00:00:11.370 --> 00:00:16.980
"acknowledge" and "not acknowledge" -- ACK and 
NAK; yes and no. It's all very well but they might get

00:00:16.980 --> 00:00:24.510
damaged - they might get corrupted. 
Coding theorists, in the very simplest case, did

00:00:24.510 --> 00:00:32.099
realize that in order to be able to correct 
an error - just a 1-bit error - you needed to

00:00:32.099 --> 00:00:36.960
repeat it three times. On Computerphile,
here, we have talked about this stuff in

00:00:36.960 --> 00:00:41.250
more detail but I want to try and keep
this as accessible as possible for

00:00:41.250 --> 00:00:47.579
people who are just coming at this for the first
time. And to try and explain what it is

00:00:47.579 --> 00:00:54.270
about these 3-bit codes that makes
life so much easier. And the answer, my

00:00:54.270 --> 00:00:59.730
friends, lies in putting them at
diametrically opposite corners of a cube.

00:00:59.730 --> 00:01:04.830
What you're saying is, if you send three 0s
that's fine; if you send three 1s, that

00:01:04.830 --> 00:01:08.670
don't get corrupted, that's fine. Just
look at how far away they are from each

00:01:08.670 --> 00:01:11.159
other. it doesn't matter how you get from there

00:01:11.159 --> 00:01:15.689
to there, or backwards, you have to go
one, two, three.

00:01:15.689 --> 00:01:21.119
So, that's technically called the
"distance" between these two codewords.

00:01:21.119 --> 00:01:26.970
So, there's two buzz phrases straight away:
"codewords" and "distance" between them. If

00:01:26.970 --> 00:01:33.360
you, on either side of these accurate
codewords, you write in what you might get

00:01:33.360 --> 00:01:40.259
if one of the bits gets corrupted and
flipped. You now have a situation where

00:01:40.259 --> 00:01:49.470
if you receive 010 the answer is
sometimes called "majority logic". The

00:01:49.470 --> 00:01:55.140
overwhelming decision of this point is
that it's got two 0s and one 1.

00:01:55.140 --> 00:02:00.240
So, therefore,
 if you're going to correct it, it's
far better to correct it to three 0s

00:02:00.240 --> 00:02:04.439
going down one edge than to try and go
all the way around the cube and correct it

00:02:04.439 --> 00:02:07.540
to that [i.e. three 1s]. We're using a 
total of three bits, right?

00:02:07.540 --> 00:02:12.820
111 - three bits. But the actual
message we're trying to get across is

00:02:12.820 --> 00:02:17.110
yes or no, ACK or NAK.
Zero or one. So of those three bits the

00:02:17.110 --> 00:02:22.450
only bit that counts, as far as the message
is concerned, is just one of those bits.

00:02:22.450 --> 00:02:29.080
However, in the course of keeping the
codewords far apart, we have agreed they

00:02:29.080 --> 00:02:33.580
are distance three from one another, in
terms of a walk you do around the cube

00:02:33.580 --> 00:02:38.560
along the edges. So here we are:
total number of bits; number of those

00:02:38.560 --> 00:02:42.850
bits that are devoted to the real
message - only one. How many journeys

00:02:42.850 --> 00:02:46.930
around sides of the cube would you have
to take to get from one codeword to another.

00:02:46.930 --> 00:02:58.330
So, it's a [3,1,3] code. [3,1,3] is the
simplest "full" Hamming code and it is

00:02:58.330 --> 00:03:05.290
"perfect". What do I mean by saying
it is "perfect"?  Every single corner

00:03:05.290 --> 00:03:11.170
- all 8 of them - serves a purpose. A corner
is either a codeword - the actual thing

00:03:11.170 --> 00:03:16.000
you're trying to get through and hope it
doesn't get damaged - or if it's not a codeword

00:03:16.000 --> 00:03:19.900
it's a correction vector. It's a corner

00:03:19.900 --> 00:03:24.760
of the cube that's adjacent which gives you
the clue that if you get *that* [points at "100"]

00:03:24.760 --> 00:03:31.239
received you go to the nearest code word [000]
along a cube edge. So every single

00:03:31.239 --> 00:03:36.459
corner is concerned with either the
proper message or how to correct it.

00:03:36.459 --> 00:03:45.910
Nothing goes to waste.   [3,1,3], hmmm! where do 
you think the next one of

00:03:45.910 --> 00:03:51.760
the perfect ones would occur - that occupy
all the corners? Not on a cube this time - 
it woud have to be on a hypercube.

00:03:51.760 --> 00:03:58.150
&gt;&gt; Sean: So, a  hypercube's going to have 
what  ... ? Another four? Another eight corners ?

00:03:58.150 --> 00:04:03.070
&gt;&gt; DFB: Well it could be 4. It could be a 4-dimensional
hypercube ... a 5-dimensional ... six, whatever.

00:04:03.070 --> 00:04:05.200
&gt;&gt; Sean:  I feel like it's going to be a round number

00:04:05.200 --> 00:04:11.890
Let's go for 6.  [6, 1 something] ? 
&gt;&gt; DFB: Close! [But] it's not. I will reveal the answer

00:04:11.890 --> 00:04:17.079
and then we'll will try and justify it later on. 
That's the simplest "proper" Hamming code.

00:04:17.079 --> 00:04:24.670
Next full Hamming code is not at 6; it's at 7.
And in this notation ....
&gt;&gt; Sean: Is this prime-number related then ?

00:04:24.670 --> 00:04:32.020
&gt;&gt; DFB: No it's not actually prime-number
related but you'll see a pattern emerging.

00:04:32.020 --> 00:04:37.240
This right-hand thing of three [e.g. in 7,4,3 ]
is always there. Even if you're on a

00:04:37.240 --> 00:04:45.970
hyper-cube you keep your codewords three
edges apart and what happens with more

00:04:45.970 --> 00:04:49.750
bits in use is you can afford more bits to
hold the message.

00:04:49.750 --> 00:04:54.910
Whereas, before, you had a 1-bit message
- two possibilities - here we've got a 4-bit

00:04:54.910 --> 00:05:00.610
message which equates to 16 possibilities 
16 possible code words two to the power of 4.

00:05:00.610 --> 00:05:08.169
All wrapped up in a 7-bit message. 
Now your final clue: the next one

00:05:08.169 --> 00:05:15.160
after this is [15, 11, 3]. There is a pattern
emerging here, folks, particularly on that

00:05:15.160 --> 00:05:25.150
leading digit. 3, 7, 15 - always one less than
a power of two.

00:05:25.150 --> 00:05:31.720
That's a necessary condition, together
with distance 3 between codewords,

00:05:31.720 --> 00:05:38.800
for these to be "proper" full Hamming codes
And what I'm saying to you is: [7,4,3] is

00:05:38.800 --> 00:05:45.700
also perfect. Let's try and reason why it's
perfect by waving our hands around  a lot!

00:05:45.700 --> 00:05:53.229
OK -  it goes like this. You've got 4 codewords 
They're on a 7-dimensional

00:05:53.229 --> 00:05:59.050
hypercube. If it's a 7-dimensional
hypercube out of every codeword corner

00:05:59.050 --> 00:06:04.870
there are - try and imagine it - seven
edges going out to correction points for it,

00:06:04.870 --> 00:06:11.520
plus the corner itself. So 7 + 1 is 8. 
Right? You've got eight

00:06:11.520 --> 00:06:17.789
possible things that are either the thing
itself ot its correction points.

00:06:17.789 --> 00:06:22.500
Every codeword counts 8 in terms of corners of
the hypercube but how many of these code

00:06:22.500 --> 00:06:28.710
words can you have? 2 to the power of 4 is 16.
And every one takes up 8 corners 16 x 8?

00:06:28.710 --> 00:06:36.150
&gt;&gt; DFB: 128 do we agree?
&gt;&gt; Sean: Er, 128, yeah - eventually! [laughs]

00:06:36.150 --> 00:06:41.220
So you need 128 corners just by
reasoning from a cube, right up to a

00:06:41.220 --> 00:06:45.900
7-dimensional hypercube you can say
you would occupy 128 corners.

00:06:45.900 --> 00:06:50.940
But consider: 7-bit codes
- which is what we're talking about in

00:06:50.940 --> 00:06:59.819
this hyperspace - what's 2 to the power 7?
&gt;&gt; Sean: 128
&gt;&gt; DFB: Bingo! So, you've got 128 corners and 
they are exactly

00:06:59.819 --> 00:07:07.800
used up. That is what a perfect code is
all about. It's about using up the

00:07:07.800 --> 00:07:13.050
corners on your hypercube to the
absolute maximum. It's so eco-friendly!

00:07:13.050 --> 00:07:16.110
y'know, absolutely nothing goes to waste!

00:07:16.110 --> 00:07:22.500
The big problem with these Hamming codes
is that they only correct one error. That

00:07:22.500 --> 00:07:28.409
is the stopper in the end. That they're
just not suitable for the kinds of

00:07:28.409 --> 00:07:36.840
situations that occurin real life or, at
least, out in noisy Wi-Fi setups, or out

00:07:36.840 --> 00:07:42.240
in interplanetary space.  Very comparable
really in terms of background noise

00:07:42.240 --> 00:07:48.419
bursts of horrible, y'know, [electrical] activity
going on that ruin your code. You need

00:07:48.419 --> 00:07:54.449
something rather more robust than a code
that can detect only one error. But

00:07:54.449 --> 00:08:00.750
nevertheless as a thing to learn about
first and the ability to entirely cover

00:08:00.750 --> 00:08:05.789
certain hypercubes with the codes, and
the way to correction them, they're very nice.

00:08:05.789 --> 00:08:13.629
I'm very fond of perfect codes! 
&gt;&gt; Sean: Does this mean that other codes 
in between these are unusable?

00:08:13.629 --> 00:08:20.560
&gt;&gt; DFB: No! For those in the know we've done 
one already. We used Richard

00:08:20.560 --> 00:08:28.349
Hamming's methodology to develop it, but
we didn't admit to its shortcomings, right?

