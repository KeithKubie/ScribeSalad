WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.190
 <i>Android patterns for performance</i> 

00:00:02.190 --> 00:00:04.380
 Services are an integral part 

00:00:04.380 --> 00:00:06.310
 From all Android apps 

00:00:06.310 --> 00:00:07.760
 But the jobs you provide 

00:00:07.760 --> 00:00:10.422
 Exhaust battery and system resources. 

00:00:10.422 --> 00:00:11.880
 If not, 

00:00:11.880 --> 00:00:14.090
 It may be even more depleted. 

00:00:14.090 --> 00:00:15.350
 My name is Colt McCannless. 

00:00:15.350 --> 00:00:17.930
 And use services in the most effective way 

00:00:17.930 --> 00:00:19.520
 Means ending it in the right way 

00:00:19.520 --> 00:00:21.700
 And sometimes not used. 

00:00:21.700 --> 00:00:25.229
 Services are the way in which an application is defined for an operating system 

00:00:25.229 --> 00:00:28.250
 It needs to run longer 

00:00:28.250 --> 00:00:31.120
 Outside the normal user interface stream activity. 

00:00:31.120 --> 00:00:32.780
 Basically, you can do your business 

00:00:32.780 --> 00:00:34.977
 Without having to wait for input events. 

00:00:34.977 --> 00:00:37.630
 This is great but there are a few things to keep in mind. 

00:00:37.900 --> 00:00:40.700
 First, system-wide services are not free. 

00:00:40.700 --> 00:00:44.220
 Create, schedule, operate and even destroy services 

00:00:44.220 --> 00:00:45.910
 It costs time and memory. 

00:00:46.340 --> 00:00:49.700
 Second, the services run on the UI thread of your application, 

00:00:49.700 --> 00:00:52.487
 Which tries to update the screen every 16 milliseconds or so. 

00:00:52.487 --> 00:00:54.820
 This means that if you are doing a group of activities in a service, 

00:00:54.820 --> 00:00:57.090
 You can easily exceed the 16 milliseconds easily 

00:00:57.090 --> 00:00:58.870
 And drop the frame at the end. 

00:00:58.870 --> 00:01:01.035
 Let me now make this point even clearer. 

00:01:01.035 --> 00:01:04.790
 In 90% of cases, it is the best way to avoid these problems 

00:01:04.790 --> 00:01:06.860
 The service is not used. 

00:01:06.860 --> 00:01:08.450
 But in reality, there are many cases 

00:01:08.450 --> 00:01:11.470
 Where services are used without need. 

00:01:11.470 --> 00:01:14.640
 Including the use of a service to listen to and respond to events, 

00:01:14.640 --> 00:01:16.390
 Is an extreme exaggeration. 

00:01:16.390 --> 00:01:18.930
 APIs, such as BroadcastReceiver, are still available 

00:01:18.930 --> 00:01:22.610
 Respond well to events even when your app works in the background. 

00:01:22.610 --> 00:01:24.650
 It is a multiplier when you continue to use a service 

00:01:24.650 --> 00:01:26.040
 Just to ask a server for data. 

00:01:26.040 --> 00:01:27.820
 This is also a bad idea. 

00:01:27.820 --> 00:01:30.200
 Instead, use Google Cloud Messaging 

00:01:30.590 --> 00:01:33.030
 Allows the server to send updates to you 

00:01:33.040 --> 00:01:35.310
 Which you can still receive in your app directly 

00:01:35.310 --> 00:01:37.450
 Without having to run a service. 

00:01:37.450 --> 00:01:39.330
 And if you know your activity 

00:01:39.330 --> 00:01:41.217
 Will take place in the background, 

00:01:41.217 --> 00:01:43.300
 There is no point in disturbing the framework 

00:01:43.300 --> 00:01:44.890
 To schedule services for you. 

00:01:45.130 --> 00:01:47.830
 Instead, try using a physical thread setting, 

00:01:47.830 --> 00:01:50.310
 Such as IntentServices or HandlerThreads 

00:01:50.310 --> 00:01:51.992
 Or Async Task Loaders, 

00:01:52.232 --> 00:01:55.356
 All of which will bring you the same result with fewer scheduling pressures on the system, 

00:01:55.356 --> 00:01:57.880
 It will also exclude your objects from the UI thread. 

00:01:57.880 --> 00:01:59.389
 This is also an additional benefit. 

00:01:59.389 --> 00:02:01.780
 There are a lot of options available in the framework 

00:02:01.780 --> 00:02:03.860
 To perform multiple types of asynchronous activity 

00:02:03.860 --> 00:02:06.750
 Without the need to resort to the pressures required by the services. 

00:02:07.000 --> 00:02:10.059
 So when possible, try using one of these solutions first. 

00:02:10.479 --> 00:02:12.830
 But if all those options are exhausted 

00:02:13.090 --> 00:02:16.600
 I still find that this service is the only way to solve the problem, 

00:02:16.600 --> 00:02:19.940
 You need to comply with the initial rule of services, 

00:02:20.260 --> 00:02:23.570
 Namely, not to keep service activity more than long-term. 

00:02:23.570 --> 00:02:26.700
 Remember, there are two distinct types of services 

00:02:26.700 --> 00:02:29.180
 They can be terminated in two distinct ways. 

00:02:29.470 --> 00:02:33.470
 For example, the service is running and remains active until it stops clearly 

00:02:33.470 --> 00:02:36.550
 Calling stopSelf or stopService, 

00:02:36.550 --> 00:02:38.120
 Or until your app stops. 

00:02:38.120 --> 00:02:39.560
 Until then, the service remains 

00:02:39.560 --> 00:02:42.560
 Waiting for things to be handled and resources exhausted. 

00:02:42.860 --> 00:02:45.640
 The associated service on the other hand, 

00:02:45.640 --> 00:02:47.820
 It remains operational and consumes system resources 

00:02:47.820 --> 00:02:50.440
 Until all its clients cancel their connection 

00:02:50.440 --> 00:02:53.630
 Calling unbindService or until your application stops. 

00:02:53.630 --> 00:02:56.420
 It is useful to combine these services 

00:02:56.420 --> 00:02:58.740
 But this is a common source of errors. 

00:02:58.740 --> 00:03:00.420
 Such as calling startService 

00:03:00.420 --> 00:03:04.880
 To create your service, call the bindService for an IPC connection. 

00:03:05.090 --> 00:03:08.290
 The problem here is that even when the client calls unbindService, 

00:03:08.800 --> 00:03:12.960
 It will not stop because it is waiting for a stopService call. 

00:03:13.590 --> 00:03:16.580
 The bottom line is that you need to pair the ON and OFF 

00:03:16.580 --> 00:03:20.690
 And bind and unlink directly before the service actually stops, 

00:03:20.690 --> 00:03:22.930
 These are custom with services. 

00:03:22.930 --> 00:03:24.450
 So avoid them if possible. 

00:03:24.450 --> 00:03:25.789
 If you use it, 

00:03:25.789 --> 00:03:29.370
 Be sure to prevent them from working too long. 

00:03:29.370 --> 00:03:32.680
 If you doubt that your services may do so, 

00:03:32.680 --> 00:03:35.810
 The Systrace is a fantastic visual tool 

00:03:35.810 --> 00:03:37.890
 It can help you see where your system time is wasting 

00:03:37.890 --> 00:03:39.904
 And what applications are responsible for it. 

00:03:40.204 --> 00:03:42.730
 This is the main idea for Android Performance Patterns 

00:03:42.730 --> 00:03:45.161
 Make sure you do the right things at the right times 

00:03:45.161 --> 00:03:48.131
 So as not to waste resources or performance cycles. 

00:03:48.131 --> 00:03:51.160
 Check out the rest of the Android Performance Patterns content. 

00:03:51.160 --> 00:03:53.400
 Do not miss joining the Google+ community 

00:03:53.400 --> 00:03:55.640
 For tips from other great developers. 

00:03:55.640 --> 00:03:58.160
 So keep calm, collect your code information 

00:03:58.160 --> 00:03:59.810
 Always remember that performance is important. 

