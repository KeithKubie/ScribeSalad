WEBVTT
Kind: captions
Language: en

00:00:05.126 --> 00:00:05.600
CHET HAASE: Hi.

00:00:05.600 --> 00:00:09.536
I'm Chet Haase, an engineer on
the Android Team at Google.

00:00:09.536 --> 00:00:12.580
I do a bunch of work on
animations, and I've done some

00:00:12.580 --> 00:00:14.740
DevBytes in the past on
ListView animations.

00:00:14.740 --> 00:00:18.360
And I got a request to show how
you might animate adding

00:00:18.360 --> 00:00:20.420
and removing items from
the ListView.

00:00:20.420 --> 00:00:24.060
So recently, I did a talk with
Romain Guy on animations at

00:00:24.060 --> 00:00:26.480
Google I/O. You might want to
check that out since it has

00:00:26.480 --> 00:00:30.160
some of the content and related
content as well.

00:00:30.160 --> 00:00:33.820
And one of the demos that I
showed was removing items from

00:00:33.820 --> 00:00:36.010
the ListView, exactly
what people wanted.

00:00:36.010 --> 00:00:38.040
I've tuned the code a little bit
to make it a little more

00:00:38.040 --> 00:00:41.960
general purpose, and we're going
to show a bit more about

00:00:41.960 --> 00:00:44.230
how it actually works today.

00:00:44.230 --> 00:00:46.990
So the idea with ListView
removals is that you're

00:00:46.990 --> 00:00:48.090
deleting an item there.

00:00:48.090 --> 00:00:49.285
Maybe you want to
swipe it out.

00:00:49.285 --> 00:00:52.030
In the demo that I have, you
swipe these items out, and

00:00:52.030 --> 00:00:54.640
then the swipe itself is
animated and after the item is

00:00:54.640 --> 00:00:57.930
removed from the ListView, the
ListView collapses the gap

00:00:57.930 --> 00:01:01.580
around that item and views move
in from the top or the

00:01:01.580 --> 00:01:03.060
bottom, wherever they need to.

00:01:03.060 --> 00:01:04.665
And all of this is seamless
to the user.

00:01:04.665 --> 00:01:07.630
It's kind of the effect and the
feel that you want with

00:01:07.630 --> 00:01:09.780
the ListView, but it may
not be particularly

00:01:09.780 --> 00:01:12.060
obvious how to do so.

00:01:12.060 --> 00:01:14.520
So let's see how this actually
works today.

00:01:14.520 --> 00:01:17.420
Now, one important point that
I should point out, if you

00:01:17.420 --> 00:01:20.420
look closely at the code in the
Google I/O version of this

00:01:20.420 --> 00:01:23.280
demo, you'll see that I was
using a property called

00:01:23.280 --> 00:01:25.000
Transient State, which was
added in Jelly Bean.

00:01:25.000 --> 00:01:27.230
I've actually removed that.

00:01:27.230 --> 00:01:29.850
It's used implicitly under the
hood when you use the View

00:01:29.850 --> 00:01:32.290
Property Animator, but I'm not
using it explicitly in the

00:01:32.290 --> 00:01:34.700
demo code anymore, because I
actually found a more general

00:01:34.700 --> 00:01:37.140
purpose way of doing this
animation so it's a little

00:01:37.140 --> 00:01:40.110
more applicable to different
releases as well.

00:01:40.110 --> 00:01:41.470
So let's see how it works.

00:01:41.470 --> 00:01:44.590
So if we take a look at the
code, one important point--

00:01:44.590 --> 00:01:48.070
and this is right at the heart
of why I don't need Transient

00:01:48.070 --> 00:01:50.950
State anymore-- is that I'm
using a Stable Array Adapter.

00:01:50.950 --> 00:01:54.220
This is a subclass of Array
Adapter that I created to

00:01:54.220 --> 00:01:56.300
return True for Has
Stable IDs.

00:01:56.300 --> 00:02:00.140
This is a key element because
I'm no longer animating the

00:02:00.140 --> 00:02:02.550
views directly, getting
information directly from the

00:02:02.550 --> 00:02:05.560
views and then making sure that
those views all stay on

00:02:05.560 --> 00:02:06.870
the screen at the same time.

00:02:06.870 --> 00:02:08.770
That's dependent upon the
Jelly Bean capability of

00:02:08.770 --> 00:02:09.539
Transient State.

00:02:09.539 --> 00:02:14.040
Instead, I am dependent upon the
underlying Array Adapter

00:02:14.040 --> 00:02:18.040
to have Stable IDs so that I
can count on those items

00:02:18.040 --> 00:02:20.800
actually being the same
as changes in the

00:02:20.800 --> 00:02:22.140
Array Adapter happen.

00:02:22.140 --> 00:02:26.760
So I do that by returning True
there, and when I get Item ID,

00:02:26.760 --> 00:02:30.350
I actually get unique IDs
as I process the array.

00:02:30.350 --> 00:02:33.020
And then the only other custom
thing that happens in this

00:02:33.020 --> 00:02:36.150
Array Adapter is I set an On
Touch Listener because every

00:02:36.150 --> 00:02:40.460
item in the view, as it's
created, I want it to know

00:02:40.460 --> 00:02:42.490
where to go for its touch events
because I'm going to

00:02:42.490 --> 00:02:45.240
customize that with some swiping
behavior, which we'll

00:02:45.240 --> 00:02:47.170
see very soon.

00:02:47.170 --> 00:02:50.985
So if we go back to our Activity
Class, here's that

00:02:50.985 --> 00:02:53.660
Touch Listener that we were
just talking about.

00:02:53.660 --> 00:02:55.590
So the idea here is this.

00:02:55.590 --> 00:02:59.480
I want to note when the user
clicks down, and I want to

00:02:59.480 --> 00:03:01.040
note when they swipe
left to right.

00:03:01.040 --> 00:03:03.750
Because I want to, first, detect
when it's gone far

00:03:03.750 --> 00:03:05.990
enough that we're actually
in a swiping motion.

00:03:05.990 --> 00:03:08.750
So I'm going to start animating
that as they move

00:03:08.750 --> 00:03:09.490
their finger.

00:03:09.490 --> 00:03:11.790
So then I want to position the
view, and I want to also set

00:03:11.790 --> 00:03:14.890
the alpha of the view to make it
disappear more, the closer

00:03:14.890 --> 00:03:17.030
to the edge of the screen
that it gets.

00:03:17.030 --> 00:03:19.570
And then when they actually let
go of that item, I want to

00:03:19.570 --> 00:03:22.540
determine whether to snap the
item back or to animate it all

00:03:22.540 --> 00:03:23.350
the way off.

00:03:23.350 --> 00:03:27.500
I should point out that in the
widgets that we actually ship,

00:03:27.500 --> 00:03:29.650
we use Velocity Tracking, which
is a better way to do

00:03:29.650 --> 00:03:30.230
this in general.

00:03:30.230 --> 00:03:33.230
I'm using a simple heuristic
of how far have you moved

00:03:33.230 --> 00:03:35.630
instead, which works for the
purposes of the demo.

00:03:35.630 --> 00:03:39.120
I think a more full version of
this effect would actually use

00:03:39.120 --> 00:03:42.050
Velocity Tracking instead so
that as you lifted off your

00:03:42.050 --> 00:03:45.490
finger as you're swiping to the
right, then the item would

00:03:45.490 --> 00:03:48.790
actually animate at the same
speed that it was just moving,

00:03:48.790 --> 00:03:50.440
which is a nicer effect.

00:03:50.440 --> 00:03:53.610
Nevertheless, a simple approach
here, and also simple

00:03:53.610 --> 00:03:55.790
to change using Velocity
instead.

00:03:55.790 --> 00:03:59.070
So when the user presses down,
if there's another item

00:03:59.070 --> 00:04:02.100
pressing, I'm not handling
multi-touch clicks here.

00:04:02.100 --> 00:04:04.690
We're just making a simple demo
here so we return False.

00:04:04.690 --> 00:04:06.440
We're not going to handle
this event.

00:04:06.440 --> 00:04:09.560
Otherwise, we set the value to
say, OK, we're now tracking

00:04:09.560 --> 00:04:13.750
things, and we're going to note
the initial location that

00:04:13.750 --> 00:04:16.959
they pressed down in so that
we know how far to move the

00:04:16.959 --> 00:04:19.279
item in initial move events.

00:04:19.279 --> 00:04:22.720
When there is a subsequent move
event here, we get the

00:04:22.720 --> 00:04:26.780
current location of that, and
then we know how far the user

00:04:26.780 --> 00:04:31.560
has moved the item in general,
and then we also know whether

00:04:31.560 --> 00:04:35.070
to detect for swipe slop, which
is basically how far

00:04:35.070 --> 00:04:35.550
have they moved?

00:04:35.550 --> 00:04:38.720
Have they moved past the point
where yes, we think it's not

00:04:38.720 --> 00:04:40.360
just an error, but we should
actually start

00:04:40.360 --> 00:04:41.370
swiping this thing out.

00:04:41.370 --> 00:04:44.010
So you see a little jump at
the beginning as we detect

00:04:44.010 --> 00:04:47.390
that it's not just noise but
they're actually moving it far

00:04:47.390 --> 00:04:49.510
enough for us to start
swiping it away.

00:04:49.510 --> 00:04:52.270
We tell the ListView to disallow
intercept touch

00:04:52.270 --> 00:04:54.400
events, because I don't want
the ListView doing its own

00:04:54.400 --> 00:04:56.540
thing with scrolling up and down
at the same time as I'm

00:04:56.540 --> 00:04:58.860
trying to swipe items
back and forth.

00:04:58.860 --> 00:05:01.700
So when you call this method and
set it to True, then until

00:05:01.700 --> 00:05:06.560
the final Up Event from the
Touch Event Processor, then

00:05:06.560 --> 00:05:08.250
the items have full
control over here.

00:05:08.250 --> 00:05:10.370
The ListView will not
get in your way.

00:05:10.370 --> 00:05:12.260
And then we tell the Background
Container to show

00:05:12.260 --> 00:05:12.780
the background.

00:05:12.780 --> 00:05:13.930
We'll get into this a
little bit later.

00:05:13.930 --> 00:05:16.830
This is the detail about what
exactly are we going to show

00:05:16.830 --> 00:05:20.220
behind the item as
it's swiped away?

00:05:20.220 --> 00:05:23.280
So if we're actually swiping
this thing, then we're going

00:05:23.280 --> 00:05:24.500
to set the translation x.

00:05:24.500 --> 00:05:26.900
So we're going to move this item
back and forth according

00:05:26.900 --> 00:05:30.120
to how far the user's finger has
moved, and we're going to

00:05:30.120 --> 00:05:30.850
set the alpha.

00:05:30.850 --> 00:05:34.760
We basically want it to be the
inverse of how far away it is

00:05:34.760 --> 00:05:37.010
from wherever they started.

00:05:37.010 --> 00:05:39.380
So the closer they get to the
edge of the screen one way or

00:05:39.380 --> 00:05:41.790
the other, the more translucent
it's going to be,

00:05:41.790 --> 00:05:44.300
the idea being that it's going
to fade out all the way by the

00:05:44.300 --> 00:05:45.970
time it gets off the screen.

00:05:45.970 --> 00:05:49.080
And then finally, when the user
lifts up, if they were

00:05:49.080 --> 00:05:51.890
swiping this thing, then we
can find out how far they

00:05:51.890 --> 00:05:54.830
swiped it, whether they're going
off the screen to the

00:05:54.830 --> 00:05:59.870
left, off the screen to the
right, and then we can set the

00:05:59.870 --> 00:06:01.070
duration based on that.

00:06:01.070 --> 00:06:03.570
We're going to set the duration
based on how far they

00:06:03.570 --> 00:06:07.000
have left to go to the edge of
the screen, whether it's

00:06:07.000 --> 00:06:09.820
popping back into place or
actually popping all the way

00:06:09.820 --> 00:06:11.210
off the screen.

00:06:11.210 --> 00:06:14.390
We're going to set enabled
False on the ListView.

00:06:14.390 --> 00:06:17.060
This prevents the user from
doing something silly like

00:06:17.060 --> 00:06:19.740
actually scrolling and flinging
the ListView at the

00:06:19.740 --> 00:06:22.400
same time as we're animating
all the views into place.

00:06:22.400 --> 00:06:25.020
Makes things look a little bit
more consistent and reasonable

00:06:25.020 --> 00:06:26.090
on the screen.

00:06:26.090 --> 00:06:27.810
And then we're going to set
that enabled to True when

00:06:27.810 --> 00:06:29.910
we're actually all done
with the animation.

00:06:29.910 --> 00:06:32.280
There's two animations that
are going to kick in here.

00:06:32.280 --> 00:06:34.390
The first is that we're going
to animate the Swipe Out or

00:06:34.390 --> 00:06:35.410
the Swipe Back.

00:06:35.410 --> 00:06:37.490
And if it was a Swipe Out,
then we're going to run a

00:06:37.490 --> 00:06:40.420
following animation, which is
going to animate the closure

00:06:40.420 --> 00:06:42.990
of the gap that that item
created when it was removed

00:06:42.990 --> 00:06:43.880
from the list.

00:06:43.880 --> 00:06:47.380
So we're going to set the
duration according to that

00:06:47.380 --> 00:06:49.200
duration that we calculated
before.

00:06:49.200 --> 00:06:51.190
We're going to animate alpha.

00:06:51.190 --> 00:06:54.860
This is using a View Property
Animator, which was an API

00:06:54.860 --> 00:06:59.300
that came in in 3.1,
Honeycomb 3.1.

00:06:59.300 --> 00:07:02.455
And we're also going to animate
translation x to its

00:07:02.455 --> 00:07:04.860
end value, either back all the
way on the screen or all the

00:07:04.860 --> 00:07:06.450
way off the screen.

00:07:06.450 --> 00:07:08.410
And then we're going
to run End Action.

00:07:08.410 --> 00:07:10.790
Now this is an API that came in
in Jelly Bean, so if you're

00:07:10.790 --> 00:07:12.700
writing for Jelly Bean and
later, that's fine.

00:07:12.700 --> 00:07:16.980
If you're writing for run times
that are earlier than

00:07:16.980 --> 00:07:20.090
Jelly Bean, you don't have to
use an End Action here.

00:07:20.090 --> 00:07:23.380
Instead, you can set up a
listener on the View Property

00:07:23.380 --> 00:07:25.650
Animator, and it's just a little
bit more code, but it's

00:07:25.650 --> 00:07:28.210
effectively the same thing.

00:07:28.210 --> 00:07:29.900
When the end of the animation
happens, we're

00:07:29.900 --> 00:07:30.720
going to run this code.

00:07:30.720 --> 00:07:31.810
So the swipe has happened.

00:07:31.810 --> 00:07:36.370
Now we actually want to animate
the removal, animate

00:07:36.370 --> 00:07:38.620
removing the gap in
the ListView.

00:07:38.620 --> 00:07:41.690
So if we're actually removing
the item if it was swiped off,

00:07:41.690 --> 00:07:43.750
then we're going to animate
removal here.

00:07:43.750 --> 00:07:46.000
Otherwise, we're all done, and
we're just going to restore

00:07:46.000 --> 00:07:47.690
the values that we need.

00:07:47.690 --> 00:07:49.840
So animate removal
is down here.

00:07:49.840 --> 00:07:51.940
Now, this is the different
approach from the one that we

00:07:51.940 --> 00:07:56.300
took at Google I/O. The talk
in Google I/O talked about

00:07:56.300 --> 00:07:58.390
let's track where the views
are here and let's set

00:07:58.390 --> 00:08:00.510
Transient State on all those
views to make sure that they

00:08:00.510 --> 00:08:02.880
don't get recycled when
the layout occurs.

00:08:02.880 --> 00:08:04.950
We don't care about that anymore
because we're using

00:08:04.950 --> 00:08:06.380
Item IDs instead.

00:08:06.380 --> 00:08:08.330
So what's happening
is the following.

00:08:08.330 --> 00:08:10.580
For all children that are
currently in the ListView--

00:08:10.580 --> 00:08:12.330
and this is before
layout runs.

00:08:12.330 --> 00:08:14.290
So there's no data
set change yet.

00:08:14.290 --> 00:08:17.050
The list is just the way that
it was at the time that the

00:08:17.050 --> 00:08:19.860
user was swiping it-- we're
going to track where these

00:08:19.860 --> 00:08:22.100
things are.

00:08:22.100 --> 00:08:23.880
So we want to know where the
views are, but we're going to

00:08:23.880 --> 00:08:28.550
store that information about
position in a hash map that's

00:08:28.550 --> 00:08:32.230
keyed off of the Item ID instead
of the view itself.

00:08:32.230 --> 00:08:35.169
So for every view, we're going
to say, where are you now?

00:08:35.169 --> 00:08:38.169
We're going to get the top
value, child.getTop.

00:08:38.169 --> 00:08:40.480
We're going to find out where
it is in its container, and

00:08:40.480 --> 00:08:43.650
we're going to store that
information with the key of

00:08:43.650 --> 00:08:47.400
the Item ID that's associated
with that view before Layout

00:08:47.400 --> 00:08:51.700
runs and Recycle happens and
everything gets all confused

00:08:51.700 --> 00:08:52.720
in the ListView.

00:08:52.720 --> 00:08:54.560
But we don't care, because we've
got the information we

00:08:54.560 --> 00:08:57.090
need, Item ID associated
with position of

00:08:57.090 --> 00:08:58.340
the view at the time.

00:08:58.340 --> 00:09:02.330
Then we're actually going to
remove the item, and we're

00:09:02.330 --> 00:09:03.640
going to remove it
from the adapter.

00:09:03.640 --> 00:09:07.280
That automatically does a
Notify Data Set change.

00:09:07.280 --> 00:09:09.780
And then we use a trick that's
common to a lot of my

00:09:09.780 --> 00:09:13.480
animation demos, which is we set
an On Pre-Draw Listener.

00:09:13.480 --> 00:09:15.720
So what's happened is we've
removed the item.

00:09:15.720 --> 00:09:17.250
This is going to force
a Layout to

00:09:17.250 --> 00:09:18.670
happen on the ListView.

00:09:18.670 --> 00:09:20.620
Views are probably going
to be recycled.

00:09:20.620 --> 00:09:21.930
We're going to chuck them
out of the ListView.

00:09:21.930 --> 00:09:23.540
We're going to figure out
where items need to go.

00:09:23.540 --> 00:09:25.720
Then we're going to
repopulate views.

00:09:25.720 --> 00:09:27.310
And who knows what
view is where?

00:09:27.310 --> 00:09:29.640
But we don't care, because
we have stable IDs.

00:09:29.640 --> 00:09:31.310
We're good to go.

00:09:31.310 --> 00:09:34.890
Layout is going to happen, and
then our Pre-Draw Listener is

00:09:34.890 --> 00:09:35.620
going to be called.

00:09:35.620 --> 00:09:36.820
And this is the important
point.

00:09:36.820 --> 00:09:39.560
It's going to be called
before draws happen.

00:09:39.560 --> 00:09:43.030
So Layout runs, then it calls
our On Pre-Draw Listener, and

00:09:43.030 --> 00:09:44.430
then we can do whatever
we want.

00:09:44.430 --> 00:09:48.090
And what we want to do is set
up an animation to animate

00:09:48.090 --> 00:09:53.930
views from where they were in
the previous frame into where

00:09:53.930 --> 00:09:56.140
we want them to be now that
Layout has run and the

00:09:56.140 --> 00:09:57.960
ListView has finalized
all the content for

00:09:57.960 --> 00:09:59.710
these views that changed.

00:09:59.710 --> 00:10:02.360
So the On Pre-Draw Callback
gets called here.

00:10:02.360 --> 00:10:04.400
We remove the Listener, because
we don't care about it

00:10:04.400 --> 00:10:08.740
after this one frame, then we
come in here and walk through

00:10:08.740 --> 00:10:11.910
all current children
of the ListView.

00:10:11.910 --> 00:10:14.620
So this is everything after
Layout ran, everything got

00:10:14.620 --> 00:10:16.260
recycled, shuffled around.

00:10:16.260 --> 00:10:18.120
For every one of those, we're
going to say, OK,

00:10:18.120 --> 00:10:18.960
where are you now?

00:10:18.960 --> 00:10:22.150
Give me your current
top position.

00:10:22.150 --> 00:10:26.470
And if the position
of that same ID--

00:10:26.470 --> 00:10:30.190
so I'm also tracking the current
ID of this view, and I

00:10:30.190 --> 00:10:33.160
know what the ID used to
be for that content

00:10:33.160 --> 00:10:34.900
before Layout ran.

00:10:34.900 --> 00:10:38.010
And if we have a non-null value
for Start Top, that

00:10:38.010 --> 00:10:40.950
means that this view used to
be somewhere else in the

00:10:40.950 --> 00:10:44.800
container, and we're going to
run an animation to animate

00:10:44.800 --> 00:10:46.820
that change in values.

00:10:46.820 --> 00:10:53.580
So if the top position before
Layout for this content is

00:10:53.580 --> 00:10:57.960
different than the top position
for that item after

00:10:57.960 --> 00:11:00.080
Layout, then we want to
run the animation.

00:11:00.080 --> 00:11:03.100
So we're going to set an initial
translation y value to

00:11:03.100 --> 00:11:06.500
basically run it back to
wherever it started from, and

00:11:06.500 --> 00:11:09.560
then we're going to animate
to translation y of 0.

00:11:09.560 --> 00:11:13.150
So we're basically just going
to animate it into place.

00:11:13.150 --> 00:11:16.220
If this is the first time it's
running, then we want to, with

00:11:16.220 --> 00:11:18.940
the first animation, go ahead
and restore some values when

00:11:18.940 --> 00:11:21.370
we're done, kind of a tedious
detail there.

00:11:21.370 --> 00:11:25.560
If there is no starting position
for that particular

00:11:25.560 --> 00:11:28.610
content item, then that means
that this view is just moving

00:11:28.610 --> 00:11:31.020
onto the screen, either from
the bottom or the top.

00:11:31.020 --> 00:11:37.070
So we calculate an initial
position to start from, and

00:11:37.070 --> 00:11:39.120
there's a little bit of
repeated code there.

00:11:39.120 --> 00:11:40.780
Don't worry about that.

00:11:40.780 --> 00:11:46.290
And then we come in here and
we, again, set the initial

00:11:46.290 --> 00:11:49.150
translation y value to that
delta, and we animate it.

00:11:49.150 --> 00:11:52.060
The animation code is exactly
what we saw before.

00:11:52.060 --> 00:11:53.760
The only difference is
calculating the initial

00:11:53.760 --> 00:11:56.690
position for an item that was
previously off the screen,

00:11:56.690 --> 00:11:59.890
didn't exist in the ListView
container before.

00:11:59.890 --> 00:12:02.300
And then when we're all done, we
clear the top map, which is

00:12:02.300 --> 00:12:05.570
where we were storing these
values of Item IDs associated

00:12:05.570 --> 00:12:10.010
with the top positions.

00:12:10.010 --> 00:12:11.430
That's all the animation
code here.

00:12:11.430 --> 00:12:14.460
The only other thing that's
interesting here is the

00:12:14.460 --> 00:12:15.910
Background Container.

00:12:15.910 --> 00:12:19.160
So there's kind of a graphics
optimization here where, if we

00:12:19.160 --> 00:12:21.840
are constantly drawing a
background behind a ListView

00:12:21.840 --> 00:12:25.090
where all of the items are
opaque, then that means we're

00:12:25.090 --> 00:12:26.150
basically getting overdraw.

00:12:26.150 --> 00:12:28.040
We're drawing an entire
background, and then we're

00:12:28.040 --> 00:12:30.340
drawing all the items on top of
that background, which is

00:12:30.340 --> 00:12:31.820
kind of a wasted effort.

00:12:31.820 --> 00:12:34.590
If you really care about
animation, if you really care

00:12:34.590 --> 00:12:36.570
about performance and you notice
that you're getting

00:12:36.570 --> 00:12:39.140
bottlenecked in some situations,
then one way you

00:12:39.140 --> 00:12:42.620
could work around this is to set
a null background on that

00:12:42.620 --> 00:12:43.850
container so that we're
not going to draw

00:12:43.850 --> 00:12:45.420
anything behind it.

00:12:45.420 --> 00:12:47.990
Well, that's a problem if you're
swiping out and you see

00:12:47.990 --> 00:12:50.700
into the nothingness that's
behind the ListView.

00:12:50.700 --> 00:12:54.110
So what we do is when we start
doing the swipe, we tell the

00:12:54.110 --> 00:12:56.290
Background Container to
show the background.

00:12:56.290 --> 00:12:59.300
That sets up some initial values
here so that we know

00:12:59.300 --> 00:13:02.030
where to draw this
item background.

00:13:02.030 --> 00:13:07.010
And then we override on Draw and
say, OK, if we're drawing

00:13:07.010 --> 00:13:09.470
this thing, then we'll go ahead
and translate to the

00:13:09.470 --> 00:13:12.170
open area, and we'll draw
our shadowed background.

00:13:12.170 --> 00:13:14.230
And our shadowed background
is seen here.

00:13:14.230 --> 00:13:16.240
This is called from the
constructors, and we simply

00:13:16.240 --> 00:13:18.530
load in this resource.

00:13:18.530 --> 00:13:20.870
This is a nine patch
that I defined.

00:13:20.870 --> 00:13:21.650
It's very simple.

00:13:21.650 --> 00:13:25.775
It's basically shadow on top,
shadow on bottom, and then an

00:13:25.775 --> 00:13:27.560
area in the middle that
gets stretched.

00:13:27.560 --> 00:13:31.260
And the net effect, which you
can see in the demo, is that

00:13:31.260 --> 00:13:34.700
we have a little bit of shadow
on top and a little bit of

00:13:34.700 --> 00:13:37.690
shadow on bottom, and then this
grey area in the middle,

00:13:37.690 --> 00:13:40.280
so it makes it look like all of
the items in the ListView

00:13:40.280 --> 00:13:43.440
are popped out from this virtual
background that we

00:13:43.440 --> 00:13:44.240
have there.

00:13:44.240 --> 00:13:46.870
Another item to mention is
sometimes when you're

00:13:46.870 --> 00:13:50.040
animating ListViews, if you have
dividers in the ListView

00:13:50.040 --> 00:13:53.120
and you're playing with things
like we are here, like

00:13:53.120 --> 00:13:56.420
animating the translation
properties, you may notice the

00:13:56.420 --> 00:13:59.110
dividers aren't necessarily
getting drawn correctly.

00:13:59.110 --> 00:14:00.950
So I disabled dividers.

00:14:00.950 --> 00:14:07.490
So if you take a look at the
layout for application, we

00:14:07.490 --> 00:14:11.730
have ListView divider of null
and a divider height of zero.

00:14:11.730 --> 00:14:15.600
So the ListView itself is not
drawing dividers, and instead,

00:14:15.600 --> 00:14:21.220
I've defined the TextView to
actually use a divider.

00:14:21.220 --> 00:14:25.370
So it's using a background,
which I defined, which is

00:14:25.370 --> 00:14:29.500
basically all opaque white with
an opaque line at the

00:14:29.500 --> 00:14:33.150
bottom of it, and that gives
me my own divider that gets

00:14:33.150 --> 00:14:35.150
animated along with these items
as they're moving around

00:14:35.150 --> 00:14:36.290
the ListView.

00:14:36.290 --> 00:14:39.130
So again, this is ListView
removal animations.

00:14:39.130 --> 00:14:41.270
It's the ability to animate
all the changes.

00:14:41.270 --> 00:14:43.100
You could do a very similar
thing with adding.

00:14:43.100 --> 00:14:46.340
I just only took care of the
one direction today.

00:14:46.340 --> 00:14:50.520
But it's doing it in a way that
is usable on all property

00:14:50.520 --> 00:14:54.420
animation APIs all the way back
to when View Property

00:14:54.420 --> 00:14:56.480
Animator came in,
which was 3.1.

00:14:56.480 --> 00:14:58.540
In fact, you could use Object
Animator for everything and

00:14:58.540 --> 00:15:01.070
take it all the way
back to 3.0.

00:15:01.070 --> 00:15:05.510
And if you want a little teaser,
in a future demo,

00:15:05.510 --> 00:15:07.820
we'll see how we can use a very
similar technique and

00:15:07.820 --> 00:15:10.240
actually run this thing on
Gingerbread as well.

00:15:10.240 --> 00:15:12.870
So check out the talk at Google
I/O that we did on

00:15:12.870 --> 00:15:16.240
animation called "A Moving
Experience," and download the

00:15:16.240 --> 00:15:17.880
code and play with
it, and make your

00:15:17.880 --> 00:15:19.300
ListViews more dynamic.

00:15:19.300 --> 00:15:20.550
Thanks.

