WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:12.810
[MUSIC PLAYING]

00:00:12.810 --> 00:00:13.620
Welcome everyone.

00:00:13.620 --> 00:00:15.410
And good morning for those
on the West Coast.

00:00:15.410 --> 00:00:18.220
This is Dartisans
Episode Eight.

00:00:18.220 --> 00:00:19.800
Welcome to our Dart show.

00:00:19.800 --> 00:00:22.570
We broadcast this
live on YouTube.

00:00:22.570 --> 00:00:24.870
You can ask questions via our
moderator if you go to

00:00:24.870 --> 00:00:28.000
developers.google.com/live.

00:00:28.000 --> 00:00:30.720
And we're joined with lots of
great special guests today.

00:00:30.720 --> 00:00:33.180
And this will be posted
onto YouTube later,

00:00:33.180 --> 00:00:34.385
and also on our podcasts.

00:00:34.385 --> 00:00:37.590
So lots of ways to catch up
with the Dart community.

00:00:37.590 --> 00:00:41.100
Before we dive into our show, we
have special guests Rikulo,

00:00:41.100 --> 00:00:44.110
who are building a UI
framework in Dart.

00:00:44.110 --> 00:00:46.030
And we'll chat with some
of the developers.

00:00:46.030 --> 00:00:48.430
And we also have special
guests JJ

00:00:48.430 --> 00:00:49.640
Behrens and Gilad Bracha.

00:00:49.640 --> 00:00:50.810
Hi guys.

00:00:50.810 --> 00:00:52.370
And we'll be talking about
some of the latest

00:00:52.370 --> 00:00:55.400
developments in the Dart
language spec as we near the

00:00:55.400 --> 00:00:56.890
M1 Milestone.

00:00:56.890 --> 00:00:58.970
But first let's get started
with some news.

00:00:58.970 --> 00:01:02.350
And, as always, a big thanks to
Dartwatch and Chris Bucket

00:01:02.350 --> 00:01:05.319
for collecting the weekly news
from the Dart community.

00:01:05.319 --> 00:01:07.980
He does a really great job, and
I'm going to share some of

00:01:07.980 --> 00:01:11.220
the highlights with you now.

00:01:11.220 --> 00:01:13.850
So we've seen a couple
developments with building

00:01:13.850 --> 00:01:14.940
games with Dart.

00:01:14.940 --> 00:01:18.370
Obviously, games always push
any platform in terms of

00:01:18.370 --> 00:01:19.910
performance and capabilities.

00:01:19.910 --> 00:01:22.610
And so, of course, when a new
language and system like Dart

00:01:22.610 --> 00:01:24.900
comes out, everyone wants to
know how can I build those

00:01:24.900 --> 00:01:25.620
really cool games.

00:01:25.620 --> 00:01:28.780
So Jacob Deichert, and I hope
I got that last name right,

00:01:28.780 --> 00:01:31.170
has updated his Castles game.

00:01:31.170 --> 00:01:33.352
And this, and almost all the
libraries that we're going to

00:01:33.352 --> 00:01:34.680
be talking about,
are on GitHub.

00:01:34.680 --> 00:01:37.720
And all the show notes for all
the news items here are on

00:01:37.720 --> 00:01:43.170
Dartwatch.com So Sam McCall, a
Googler, has created a Dart JS

00:01:43.170 --> 00:01:44.460
interop library.

00:01:44.460 --> 00:01:47.120
This is yet another R&amp;D project
to figure out what's

00:01:47.120 --> 00:01:52.110
the right way to integrate the
existing JavaScript libraries

00:01:52.110 --> 00:01:53.860
and capabilities with Dart.

00:01:53.860 --> 00:01:57.300
We're still trying to feel that
out in exactly what may

00:01:57.300 --> 00:01:58.390
be the right way to do that.

00:01:58.390 --> 00:02:01.360
So it's great to see different
efforts in this arena.

00:02:01.360 --> 00:02:04.920
And you can find this also
on GitHub as well.

00:02:04.920 --> 00:02:07.620
Kevin Moore, one of our early
adopters, who's also working

00:02:07.620 --> 00:02:14.180
on a proposed canonical layout
for Pub packages, has been

00:02:14.180 --> 00:02:15.920
creating QR codes in Dart.

00:02:15.920 --> 00:02:19.140
And so that's just a fun little
project from his group.

00:02:19.140 --> 00:02:23.040
Bernhard Pichler has been doing
a really cool project

00:02:23.040 --> 00:02:23.700
called DartFlash.

00:02:23.700 --> 00:02:24.440
Flash.

00:02:24.440 --> 00:02:28.390
And he has a blog that has
been started to help

00:02:28.390 --> 00:02:31.830
ActionScript 3 developers move
over to Dart, as the languages

00:02:31.830 --> 00:02:32.690
are fairly similar.

00:02:32.690 --> 00:02:34.870
And I think that the programming
experience is--

00:02:34.870 --> 00:02:36.960
I think if you come from
ActionScript 3 you'll find

00:02:36.960 --> 00:02:38.330
Dart really pleasurable.

00:02:38.330 --> 00:02:40.350
And so he's been working
on what those

00:02:40.350 --> 00:02:41.460
libraries look like.

00:02:41.460 --> 00:02:45.020
And he also has an open source
game built with DartFlash.

00:02:45.020 --> 00:02:47.050
So his work is continuing
as well.

00:02:47.050 --> 00:02:49.030
In fact, he has an experimental
particle

00:02:49.030 --> 00:02:51.540
animation in DartFlash.

00:02:51.540 --> 00:02:53.370
Adam Smith has been--

00:02:53.370 --> 00:02:56.260
he always seems to take
out the right commits

00:02:56.260 --> 00:02:57.030
at the right time.

00:02:57.030 --> 00:03:00.180
He really does a good job
monitoring the change log.

00:03:00.180 --> 00:03:03.600
He's found that mirrors are
compiled into the Dart VM.

00:03:03.600 --> 00:03:06.660
Now this is an ongoing spec and
implementation effort to

00:03:06.660 --> 00:03:10.060
bring reflection-type abilities
to Dart, the run

00:03:10.060 --> 00:03:11.260
times and the language.

00:03:11.260 --> 00:03:13.590
And so we haven't yet published
much about that.

00:03:13.590 --> 00:03:15.580
Things are still in the works,
but it's cool to see that the

00:03:15.580 --> 00:03:17.900
teams actively working on the
mirrors and reflection

00:03:17.900 --> 00:03:19.850
capabilities.

00:03:19.850 --> 00:03:24.200
Brendan Donaldson has been doing
a great job with a lot

00:03:24.200 --> 00:03:27.970
of samples about Dart language
and libraries and continues

00:03:27.970 --> 00:03:30.520
these on his website,
Dart Examples.

00:03:30.520 --> 00:03:32.820
Recently, he's looked at
libraries and interfaces,

00:03:32.820 --> 00:03:34.420
which is a little funny because
we're going to be

00:03:34.420 --> 00:03:36.745
talking about some of the
changes coming down the pipe

00:03:36.745 --> 00:03:37.490
for libraries.

00:03:37.490 --> 00:03:39.810
But Brendan is usually pretty
quick at updating all this

00:03:39.810 --> 00:03:44.255
stuff, so I'm sure he'll keep
everything up to date.

00:03:44.255 --> 00:03:46.820
Adam Smith, again, has put
up a quick guide to

00:03:46.820 --> 00:03:49.190
building Dart on Win 32.

00:03:49.190 --> 00:03:51.970
In fact, I think Adam and Kevin
were also some the guys

00:03:51.970 --> 00:03:55.000
that helped figure out how to
build Dart with Xcode 4.

00:03:55.000 --> 00:03:57.980
So it's cool to see more and
more ways to build Dart.

00:03:57.980 --> 00:04:00.690
Of course, you can get the
binaries for Dart by

00:04:00.690 --> 00:04:03.460
downloading the Dart Editor, but
if you want to play with

00:04:03.460 --> 00:04:05.640
the source code and propose
patches to the open source

00:04:05.640 --> 00:04:07.950
project, it's nice to know that
you can build on these

00:04:07.950 --> 00:04:09.830
different platforms.

00:04:09.830 --> 00:04:14.595
Justin Fagnani has created a
Dart-collab sample allowing

00:04:14.595 --> 00:04:16.620
you to edit a document
concurrently.

00:04:16.620 --> 00:04:20.670
So this is the underlying, basic
technology that things

00:04:20.670 --> 00:04:24.810
like Google Docs uses, where
multiple editors on one single

00:04:24.810 --> 00:04:28.190
document, more or less in real
time, can collaborate.

00:04:28.190 --> 00:04:30.270
And it's really cool to see
some of these low-level

00:04:30.270 --> 00:04:33.675
libraries appearing
in Dart as well.

00:04:33.675 --> 00:04:38.260
And then this brings us to our
first special guest, Rikulo.

00:04:38.260 --> 00:04:41.130
Rikulo, the library for Dart
development on multiple

00:04:41.130 --> 00:04:43.850
different form factors,
they've released some

00:04:43.850 --> 00:04:46.990
interesting posts, including
a simple snakes game.

00:04:46.990 --> 00:04:49.540
And what I like about their
snakes game is that it works

00:04:49.540 --> 00:04:51.930
on touch and mouse
and keyboard on

00:04:51.930 --> 00:04:53.160
multiple form factors.

00:04:53.160 --> 00:04:56.090
And so that's really,
really cool.

00:04:56.090 --> 00:04:58.670
So with that, I think, let's
invite our first guest, the

00:04:58.670 --> 00:05:00.085
Rikulo team.

00:05:00.085 --> 00:05:02.500
And we're going to go
to the Hangout now.

00:05:02.500 --> 00:05:06.295
MALE SPEAKER: First of all,
what time is it there?

00:05:06.295 --> 00:05:08.960
TIM CLARE: Unfortunately it's
very late or early, depending

00:05:08.960 --> 00:05:10.623
on how you want to look at it.

00:05:10.623 --> 00:05:13.570
It's actually 10 minutes
past midnight here.

00:05:13.570 --> 00:05:14.990
MALE SPEAKER: Wow, you
guys are troopers.

00:05:14.990 --> 00:05:16.233
Thanks for joining us.

00:05:16.233 --> 00:05:17.040
TIM CLARE: I could
be sleeping.

00:05:17.040 --> 00:05:19.286
MALE SPEAKER: Now, where
are you guys again?

00:05:19.286 --> 00:05:21.920
TIM CLARE: We're based out
of Taipei, Taiwan.

00:05:21.920 --> 00:05:23.320
MALE SPEAKER: Yeah, that's--

00:05:23.320 --> 00:05:24.740
Thank you for staying up late.

00:05:24.740 --> 00:05:26.870
I know that Gilad was
complaining about being in

00:05:26.870 --> 00:05:28.130
here early.

00:05:28.130 --> 00:05:30.696
But we're definitely
global today.

00:05:30.696 --> 00:05:31.790
TIM CLARE: Not a problem.

00:05:31.790 --> 00:05:32.850
It's our pleasure.

00:05:32.850 --> 00:05:34.540
MALE SPEAKER: So you guys want
to go ahead and introduce

00:05:34.540 --> 00:05:36.954
yourselves?

00:05:36.954 --> 00:05:38.274
MALE SPEAKER: Yeah, sure.

00:05:38.274 --> 00:05:41.120
We'll start with Tim.

00:05:41.120 --> 00:05:42.590
MALE SPEAKER: Go ahead, Tim.

00:05:42.590 --> 00:05:45.565
TIM CLARE: Sure, I'm actually
the PM, the project manager

00:05:45.565 --> 00:05:47.680
for Rikulo.

00:05:47.680 --> 00:05:49.430
I was one that did
the snakes game.

00:05:49.430 --> 00:05:50.790
I've been working
out [INAUDIBLE]

00:05:50.790 --> 00:05:52.920
for approximately
three years now.

00:05:52.920 --> 00:05:56.760
So I just generally manage the
day to day runnings of Rikulo

00:05:56.760 --> 00:06:01.040
and our community around that.

00:06:01.040 --> 00:06:02.286
MALE SPEAKER: And Simon?

00:06:02.286 --> 00:06:03.810
SIMON PAI: Yeah, I'm Simon.

00:06:03.810 --> 00:06:06.620
I've worked for [INAUDIBLE]
for two years.

00:06:06.620 --> 00:06:08.650
And I'm basically one
of the coding guys

00:06:08.650 --> 00:06:10.670
behind the Rikulo project.

00:06:10.670 --> 00:06:11.660
MALE SPEAKER: Great.

00:06:11.660 --> 00:06:15.390
So why did you guys decide to
use Dart instead of JavaScript

00:06:15.390 --> 00:06:17.470
when building Rikulo.

00:06:17.470 --> 00:06:21.030
SIMON PAI: One of the major
reason is that we think that

00:06:21.030 --> 00:06:24.640
the demand of the client side
programming has been changing.

00:06:24.640 --> 00:06:29.210
And, for example, the client
side computing resource is

00:06:29.210 --> 00:06:30.570
getting cheaper.

00:06:30.570 --> 00:06:34.000
And the application is
getting more complex.

00:06:34.000 --> 00:06:39.110
And also, for example, in
mobile pattern it has to

00:06:39.110 --> 00:06:41.540
tolerate more offline
situation.

00:06:41.540 --> 00:06:46.740
So overall, we demand a more
structured language to support

00:06:46.740 --> 00:06:49.680
that kind of complexity
on client side.

00:06:49.680 --> 00:06:53.660
And we think Dart fit that
gap pretty well.

00:06:53.660 --> 00:06:55.760
MALE SPEAKER: Oh yeah, great.

00:06:55.760 --> 00:06:59.300
So your documentation says
that Rikulo uses a

00:06:59.300 --> 00:07:01.610
structured UI model.

00:07:01.610 --> 00:07:03.470
Can you tell me a little
bit about that?

00:07:03.470 --> 00:07:05.490
I kind of almost got the feeling
that you guys were

00:07:05.490 --> 00:07:08.280
absolutely positioning all
the elements on the page.

00:07:08.280 --> 00:07:10.720
Can you tell me how it's
implemented, like from a

00:07:10.720 --> 00:07:13.220
browser perspective?

00:07:13.220 --> 00:07:14.280
SIMON PAI: Yeah, pretty much.

00:07:14.280 --> 00:07:20.038
Almost all the components are
precisioned absolutely.

00:07:20.038 --> 00:07:22.920
But the traditional HTML
layout is still

00:07:22.920 --> 00:07:26.020
available as a component.

00:07:26.020 --> 00:07:30.010
The reason of doing so is
because CSS-- all those CSS

00:07:30.010 --> 00:07:31.710
layout is very powerful.

00:07:31.710 --> 00:07:33.600
It has two main types.

00:07:33.600 --> 00:07:37.540
You've got this plain block,
inline block in inline

00:07:37.540 --> 00:07:42.150
element, floating, and the
alignment, text alignment.

00:07:42.150 --> 00:07:45.080
And it's actually OK
when you do this--

00:07:45.080 --> 00:07:47.040
when you write an application.

00:07:47.040 --> 00:07:51.240
But when it comes to component
design, it will be a nightmare

00:07:51.240 --> 00:07:53.370
with those, all those
combinations.

00:07:53.370 --> 00:07:57.020
And by making those positioning
absolute, we're

00:07:57.020 --> 00:08:00.120
actually making those
things homogeneous.

00:08:00.120 --> 00:08:02.860
And it's also very
straightforward, so the user

00:08:02.860 --> 00:08:05.185
is easier to predict
the behavior.

00:08:05.185 --> 00:08:07.680
And it will introduce
much less block.

00:08:07.680 --> 00:08:10.230
MALE SPEAKER: So is this kind
of strongly informed by the

00:08:10.230 --> 00:08:13.010
fact that you're trying to build
apps that work mobile,

00:08:13.010 --> 00:08:15.340
or would you do this even if
you weren't trying to be

00:08:15.340 --> 00:08:16.900
mobile or support mobile?

00:08:21.580 --> 00:08:24.698
SIMON PAI: Yeah, Tim, you want
to get a quick question?

00:08:24.698 --> 00:08:26.000
TIM CLARE: Yeah--

00:08:26.000 --> 00:08:28.100
it's OK, I understand
what you're saying.

00:08:28.100 --> 00:08:30.580
Basically, I think it fits into
sort of our vision for a

00:08:30.580 --> 00:08:34.130
native mobile and maybe
the future of the web.

00:08:34.130 --> 00:08:37.299
It's generally what we would
still be considering because

00:08:37.299 --> 00:08:41.020
we see Rikulo as an overall
cross platform.

00:08:41.020 --> 00:08:43.750
So for the web, we actually
prefer this

00:08:43.750 --> 00:08:45.150
way of doing things.

00:08:45.150 --> 00:08:48.260
Basically, this has
come about since--

00:08:48.260 --> 00:08:52.110
originally our team, or the
team before us, used to do

00:08:52.110 --> 00:08:54.380
Windows desktop development.

00:08:54.380 --> 00:08:57.840
And in that, they used to use a
lot of absolute positioning.

00:08:57.840 --> 00:09:02.120
And then what we did is, the
team moved on to doing a Java

00:09:02.120 --> 00:09:05.160
framework, the Java UI
framework named ZK.

00:09:05.160 --> 00:09:10.090
Now within ZK , of course, we
made a lot of uses of CSS.

00:09:10.090 --> 00:09:13.890
And, of course, CSS is great,
a very creative website,

00:09:13.890 --> 00:09:17.980
laying out positions of your
website to such things as big

00:09:17.980 --> 00:09:20.560
magazines, creating
flashy interfaces.

00:09:20.560 --> 00:09:24.920
But ZK's focus was particularly,
like

00:09:24.920 --> 00:09:27.850
applications for enterprise.

00:09:27.850 --> 00:09:30.020
So within applications for
enterprise, you wanted a more

00:09:30.020 --> 00:09:31.800
desktop feel to that.

00:09:31.800 --> 00:09:35.920
So we found that when you use
CSS, it really pushed the

00:09:35.920 --> 00:09:38.430
limits of what it's meant to
do, when you have layouts

00:09:38.430 --> 00:09:41.550
within layouts within layouts,
when you wanted to

00:09:41.550 --> 00:09:42.700
build up your UI.

00:09:42.700 --> 00:09:45.130
And that led to fringe
case bugs.

00:09:45.130 --> 00:09:48.800
So, in this case, we've come
back to sort of the beginning,

00:09:48.800 --> 00:09:52.260
as you will, and come back to
the structured UI model that

00:09:52.260 --> 00:09:55.170
Simon's just stated, with
absolute positioning.

00:09:55.170 --> 00:09:57.240
And also some relative
positioning

00:09:57.240 --> 00:09:59.430
aspects of it as well.

00:09:59.430 --> 00:10:02.000
MALE SPEAKER: I think this is a
testament to the performance

00:10:02.000 --> 00:10:03.120
of modern browsers.

00:10:03.120 --> 00:10:06.310
I think that I've seen some
other approaches that-- just

00:10:06.310 --> 00:10:09.570
computing the position of all
the elements in code.

00:10:09.570 --> 00:10:13.666
And I'm shocked at how fast that
these browsers can do it.

00:10:13.666 --> 00:10:15.880
MALE SPEAKER: Well, you know,
it's amazing if you think like

00:10:15.880 --> 00:10:18.340
5, 10 years ago, no one would
have done this, because it

00:10:18.340 --> 00:10:19.580
would have made it dog slow.

00:10:19.580 --> 00:10:23.410
But with V8, it's now possible
to do all these things in

00:10:23.410 --> 00:10:24.280
JavaScript.

00:10:24.280 --> 00:10:25.440
It's amazing.

00:10:25.440 --> 00:10:27.410
MALE SPEAKER: I'd love to hear
a little bit about what are

00:10:27.410 --> 00:10:30.030
some of the features of Dart
that have been particularly

00:10:30.030 --> 00:10:31.310
beneficial to you
guys, as you've

00:10:31.310 --> 00:10:32.510
built out this framework.

00:10:32.510 --> 00:10:33.990
What are some of the
capabilities that you're

00:10:33.990 --> 00:10:36.400
really exploiting to
get the job done?

00:10:36.400 --> 00:10:41.060
SIMON PAI: Oh like one of the
best uses we have in Dart is

00:10:41.060 --> 00:10:44.500
it both has class and closure.

00:10:44.500 --> 00:10:48.140
So it exposes more options
to help us to

00:10:48.140 --> 00:10:50.950
decide our API design.

00:10:50.950 --> 00:10:52.930
MALE SPEAKER: That's one
of my favorites.

00:10:52.930 --> 00:10:55.820
Yeah, the classes
versus closures.

00:10:55.820 --> 00:10:57.810
That's one of those
things like tastes

00:10:57.810 --> 00:11:00.510
great versus less filling.

00:11:00.510 --> 00:11:01.730
Remember those commercials?

00:11:01.730 --> 00:11:03.200
MALE SPEAKER: Well, I think
what they're saying what I

00:11:03.200 --> 00:11:04.440
love about Dart is I get both.

00:11:04.440 --> 00:11:05.440
MALE SPEAKER: Yeah, exactly.

00:11:05.440 --> 00:11:06.610
MALE SPEAKER: I get
the lexical scope.

00:11:06.610 --> 00:11:07.400
I get closures.

00:11:07.400 --> 00:11:08.490
I get classes.

00:11:08.490 --> 00:11:12.170
And I get top level functions,
and so I don't have to

00:11:12.170 --> 00:11:14.440
completely adopt only
one of those models.

00:11:14.440 --> 00:11:16.780
Any time it feels natural to
use one of them, I can.

00:11:16.780 --> 00:11:18.460
And in Dart, it works
altogether.

00:11:18.460 --> 00:11:19.280
MALE SPEAKER: Great.

00:11:19.280 --> 00:11:22.880
SIMON PAI: Yeah, I think it's
more like twice finally

00:11:22.880 --> 00:11:26.340
[INAUDIBLE], a chance to define
your concept in Dart

00:11:26.340 --> 00:11:30.400
compared to Java.

00:11:30.400 --> 00:11:32.980
MALE SPEAKER: So any time I talk
to people doing mobile

00:11:32.980 --> 00:11:35.610
applications, I always
love to ask, what

00:11:35.610 --> 00:11:38.030
percentage do you think--

00:11:38.030 --> 00:11:41.510
a lot of applications these days
are a mix of native code

00:11:41.510 --> 00:11:44.140
as well as web code,
using web views.

00:11:44.140 --> 00:11:46.990
And so I always ask, what
percentage is native, and what

00:11:46.990 --> 00:11:48.500
percentage is web?

00:11:48.500 --> 00:11:51.280
And where do you think we're
going to go in the future, a

00:11:51.280 --> 00:11:53.440
few years, maybe two
years from now?

00:11:53.440 --> 00:11:55.530
Do you think that percentage
is going to change?

00:11:55.530 --> 00:11:59.890
And what kind of percentages do
you use in your own code?

00:11:59.890 --> 00:12:01.940
TIM CLARE: OK, at the moment--

00:12:01.940 --> 00:12:05.850
let's, for example, use snake.

00:12:05.850 --> 00:12:09.010
The snake code, I'm actually
going to be changing it for

00:12:09.010 --> 00:12:10.490
more mobile focus.

00:12:10.490 --> 00:12:12.920
At the moment, like you said,
yes you can use mouse.

00:12:12.920 --> 00:12:16.050
You can use touch gestures.

00:12:16.050 --> 00:12:18.980
But one of the things that
we're going to change--

00:12:18.980 --> 00:12:24.160
we're going to play with, is
making so snake can be

00:12:24.160 --> 00:12:26.790
controlled using the alignment
of the phone.

00:12:26.790 --> 00:12:29.220
So you tilt it and it
will move the snake.

00:12:29.220 --> 00:12:31.940
That is going to be one of the
demos that we're doing.

00:12:31.940 --> 00:12:36.340
So, generally, to come back to
your question and answer that.

00:12:36.340 --> 00:12:40.860
Where we see it going is just
enough so you can make use of

00:12:40.860 --> 00:12:43.880
the native mobile functionality,
because that is

00:12:43.880 --> 00:12:47.920
really the major difference
between doing everything in

00:12:47.920 --> 00:12:50.820
the web and doing everything
natively, is the actual

00:12:50.820 --> 00:12:51.970
functions of the phone.

00:12:51.970 --> 00:12:52.310
MALE SPEAKER: That's right.

00:12:52.310 --> 00:12:53.932
MALE SPEAKER: To us, that's
the only limitation that

00:12:53.932 --> 00:12:55.250
you've got.

00:12:55.250 --> 00:13:00.210
So we see that mobile is going
to go the way of, maybe in the

00:13:00.210 --> 00:13:03.190
future, of being able to access
these directly from the

00:13:03.190 --> 00:13:05.360
browser, maybe.

00:13:05.360 --> 00:13:10.150
In the future as well, because
we sort of focus on mobile as

00:13:10.150 --> 00:13:13.690
one of our primary goals,
but definitely we also

00:13:13.690 --> 00:13:15.890
looked at the web.

00:13:15.890 --> 00:13:20.170
And actually, Rikulo has a
framework within Dart for web

00:13:20.170 --> 00:13:23.010
development and creating
websites.

00:13:23.010 --> 00:13:26.410
In addition, in the far future,
as well, just going

00:13:26.410 --> 00:13:29.450
way off into the future, we're
looking at the possibility of

00:13:29.450 --> 00:13:32.770
maybe the Dart VM actually
is very powerful.

00:13:32.770 --> 00:13:35.710
So maybe in the very future,
that can actually be ported to

00:13:35.710 --> 00:13:37.000
Android itself.

00:13:37.000 --> 00:13:41.573
So any application you do Rikulo
is natively running on

00:13:41.573 --> 00:13:42.800
your Android phone.

00:13:42.800 --> 00:13:45.170
MALE SPEAKER: Well, both Android
and Dart are open

00:13:45.170 --> 00:13:47.620
source, and I think some
enterprising young fellow in

00:13:47.620 --> 00:13:49.770
the open source community
might-- it'll be an

00:13:49.770 --> 00:13:52.880
interesting experiment to see
if that could happen.

00:13:52.880 --> 00:13:54.540
But, I think, this does
bring up a good point.

00:13:54.540 --> 00:13:55.570
You mentioned the Dart VM.

00:13:55.570 --> 00:13:59.170
But we keep talking about Dart
and Rikulo and mobile.

00:13:59.170 --> 00:14:00.730
I think it's important to
point out that you're

00:14:00.730 --> 00:14:03.770
compiling your Dart code to
JavaScript via the Dart to JS

00:14:03.770 --> 00:14:07.025
compiler that ships with the
Dart SDK and Editor.

00:14:07.025 --> 00:14:10.170
And this allows any Dart app
to run on all the modern

00:14:10.170 --> 00:14:11.800
browsers out there.

00:14:11.800 --> 00:14:15.270
Talk a little, about a minute,
about your experience using

00:14:15.270 --> 00:14:18.040
Dart to JS and compiling
to JavaScript.

00:14:18.040 --> 00:14:21.150
How's that working for you?

00:14:21.150 --> 00:14:23.740
TIM CLARE: With regard to the
snake game, I think if you go

00:14:23.740 --> 00:14:26.720
on to the blog for Rikulo you
can actually see that we've

00:14:26.720 --> 00:14:29.980
embedded the snake game directly
into the web browser.

00:14:29.980 --> 00:14:33.520
And personally what I've found
is it's very good.

00:14:33.520 --> 00:14:36.550
I had absolutely no problems
compiling to JavaScript and

00:14:36.550 --> 00:14:40.650
running it in my Firefox
browser, in Chrome,

00:14:40.650 --> 00:14:42.850
et cetera, et cetera.

00:14:42.850 --> 00:14:46.240
I also liked the fact that
with our system and the

00:14:46.240 --> 00:14:50.190
structured UI that sorts of
Simon was talking about, it's

00:14:50.190 --> 00:14:51.740
very easy to get a nice looking

00:14:51.740 --> 00:14:52.840
interface up and running.

00:14:52.840 --> 00:14:55.960
So, again, the snake game that
you see tries to mimic the

00:14:55.960 --> 00:14:58.010
old-style Nokia phone game.

00:14:58.010 --> 00:14:59.390
I don't know whether
you've seen that.

00:14:59.390 --> 00:15:00.820
So that's what we
try and mimic.

00:15:00.820 --> 00:15:06.225
So, all in all, I'd say the
experience of compiling to JS

00:15:06.225 --> 00:15:07.995
and running it in
the browser has

00:15:07.995 --> 00:15:10.830
been pretty much fantastic.

00:15:10.830 --> 00:15:11.940
MALE SPEAKER: Great.

00:15:11.940 --> 00:15:15.640
So another one that's kind of
interesting these days is, how

00:15:15.640 --> 00:15:17.190
do you guys do testing?

00:15:17.190 --> 00:15:20.670
It's not always so easy to
test apps in the browser.

00:15:20.670 --> 00:15:25.420
I mean, there's unit test
libraries, but how do you do

00:15:25.420 --> 00:15:29.070
testing in terms of testing your
code, but also testing

00:15:29.070 --> 00:15:34.150
the appearance and user
functionality across browsers

00:15:34.150 --> 00:15:35.400
and devices?

00:15:37.515 --> 00:15:39.000
SIMON PAI: We have
to [INAUDIBLE]

00:15:39.000 --> 00:15:41.630
our testing mechanisms
for Rikulo.

00:15:41.630 --> 00:15:45.240
But we aiming for the automation
testing, like using

00:15:45.240 --> 00:15:45.680
[INAUDIBLE].

00:15:45.680 --> 00:15:51.380
And we have lots of experience
on that from our previous

00:15:51.380 --> 00:15:53.330
products [INAUDIBLE].

00:15:53.330 --> 00:15:58.406
And I think its achievable
to do to such approach.

00:15:58.406 --> 00:16:00.340
MALE SPEAKER: OK.

00:16:00.340 --> 00:16:02.750
And then [INAUDIBLE], I was
reading through your

00:16:02.750 --> 00:16:05.690
documentation, and it kind of
seemed like it really had kind

00:16:05.690 --> 00:16:07.215
of an Android feel to the API.

00:16:07.215 --> 00:16:10.340
I was like, wow, this looks
really, really familiar.

00:16:10.340 --> 00:16:13.450
Can you guys tell me what are
the different projects that

00:16:13.450 --> 00:16:16.210
inspired Rikulo.

00:16:16.210 --> 00:16:17.200
TIM CLARE: Sure.

00:16:17.200 --> 00:16:19.180
It actually goes back to
what I said earlier.

00:16:19.180 --> 00:16:22.760
The first inspiration came
from the Windows desktop

00:16:22.760 --> 00:16:25.380
development model and all the
desktop development models for

00:16:25.380 --> 00:16:27.510
the absolute positioning.

00:16:27.510 --> 00:16:31.037
And then we learned from our
experience from ZK and CSS to

00:16:31.037 --> 00:16:33.460
position and it'll come back
to that, absolutely, with

00:16:33.460 --> 00:16:35.590
layout paradigm.

00:16:35.590 --> 00:16:40.760
In addition, we did look
at Android quite a lot.

00:16:40.760 --> 00:16:44.170
A lot of our people in-house
have good experience with

00:16:44.170 --> 00:16:46.440
Android and, of course, iOS.

00:16:46.440 --> 00:16:48.770
So it made sense to
look at it there.

00:16:48.770 --> 00:16:50.980
See what APIs were available.

00:16:50.980 --> 00:16:53.580
In addition, as well, because
of the power of the Dart

00:16:53.580 --> 00:16:58.782
language, we're looking at sort
of the API of the Dart.

00:16:58.782 --> 00:17:02.690
So this is just a good
opportunity for me to say that

00:17:02.690 --> 00:17:05.960
we appreciate all contributions
to Rikulo, not

00:17:05.960 --> 00:17:08.060
just code, not just
documentation.

00:17:08.060 --> 00:17:11.810
By that what I mean is people
just using Rikulo and then

00:17:11.810 --> 00:17:14.480
giving their thoughts on
the API that we've

00:17:14.480 --> 00:17:15.819
got around with Rikulo.

00:17:15.819 --> 00:17:18.780
Seeing whether we can fit in
more Dart features, whether we

00:17:18.780 --> 00:17:21.690
missed something, whether
someone thinks something is

00:17:21.690 --> 00:17:22.745
more elegant.

00:17:22.745 --> 00:17:26.460
We're totally open to
all those feedback.

00:17:26.460 --> 00:17:26.950
MALE SPEAKER: Great.

00:17:26.950 --> 00:17:29.250
MALE SPEAKER: And on that note,
I think, as we wrap up,

00:17:29.250 --> 00:17:31.750
what is some of your feedback
to the Dart team?

00:17:31.750 --> 00:17:33.920
I always like to hear what are
some of the things that you'd

00:17:33.920 --> 00:17:38.030
like us to be working on
next to help Rikulo.

00:17:38.030 --> 00:17:40.045
SIMON PAI: To be honest, our
top request is definitely

00:17:40.045 --> 00:17:43.640
looking forward to the following
release of the first

00:17:43.640 --> 00:17:46.030
official version of Dart.

00:17:46.030 --> 00:17:48.660
We think Dart is a great
language and it's getting

00:17:48.660 --> 00:17:50.460
greater every day.

00:17:50.460 --> 00:17:51.920
MALE SPEAKER: Great.

00:17:51.920 --> 00:17:52.880
MALE SPEAKER: Awesome.

00:17:52.880 --> 00:17:54.210
That's good feedback.

00:17:54.210 --> 00:17:56.245
MALE SPEAKER: Well, how
can people try Rikulo?

00:17:56.245 --> 00:17:57.950
And what do you want to
ask everyone to do?

00:18:00.590 --> 00:18:02.470
TIM CLARE: Personally, I'd just
like to ask everybody to

00:18:02.470 --> 00:18:03.420
download it.

00:18:03.420 --> 00:18:04.720
Try the samples.

00:18:04.720 --> 00:18:06.740
If you take a look at our
Google+ page, there's

00:18:06.740 --> 00:18:09.520
information on getting started
with the samples.

00:18:09.520 --> 00:18:11.120
You can also download Snake.

00:18:11.120 --> 00:18:11.780
Give that one a go.

00:18:11.780 --> 00:18:13.230
And any feedback--

00:18:13.230 --> 00:18:15.590
I'm not a games developer,
so there's probably

00:18:15.590 --> 00:18:16.600
some mess in there.

00:18:16.600 --> 00:18:19.190
So if you've got any feedback
on improving the sample,

00:18:19.190 --> 00:18:21.450
that'd be great for
me to hear.

00:18:21.450 --> 00:18:24.995
And, really just give Rikulo a
try, and just feedback through

00:18:24.995 --> 00:18:27.860
us by email or something
like that.

00:18:27.860 --> 00:18:30.530
We are very open to suggestions,
and we're very

00:18:30.530 --> 00:18:33.260
open to contributors getting
involved us.

00:18:33.260 --> 00:18:34.970
MALE SPEAKER: And what's
the website again?

00:18:34.970 --> 00:18:38.610
TIM CLARE: It is
www.rikulo.org.

00:18:38.610 --> 00:18:40.512
MALE SPEAKER: You want
to spell that?

00:18:40.512 --> 00:18:43.094
TIM CLARE: That is
R-I-K-U-L-O.

00:18:43.094 --> 00:18:44.910
MALE SPEAKER: OK, thanks.

00:18:44.910 --> 00:18:45.250
Awesome.

00:18:45.250 --> 00:18:48.260
MALE SPEAKER: So we're going to
do next talk to Gilad, and

00:18:48.260 --> 00:18:52.840
I know he wants to show us the
proposed syntax for imports,

00:18:52.840 --> 00:18:56.140
but we're going to have to cut
off the Hangout right now.

00:18:56.140 --> 00:18:57.480
MALE SPEAKER: We're going
to bye and thank you.

00:18:57.480 --> 00:18:58.170
MALE SPEAKER: We're
going to goodbye.

00:18:58.170 --> 00:18:58.700
MALE SPEAKER: Yeah,
that's right.

00:18:58.700 --> 00:19:00.510
And then do sharing
the screen.

00:19:00.510 --> 00:19:02.000
MALE SPEAKER: Yeah, we're going
to flip over to Gilad in

00:19:02.000 --> 00:19:03.260
talking about some of the--

00:19:03.260 --> 00:19:04.463
So thanks, guys, of Rikulo.

00:19:04.463 --> 00:19:05.230
MALE SPEAKER: Thank you, guys.

00:19:05.230 --> 00:19:06.670
MALE SPEAKER: Thank you
for staying up late.

00:19:06.670 --> 00:19:08.640
That's awesome.

00:19:08.640 --> 00:19:11.180
And with that, yeah let's talk
to our next special guest,

00:19:11.180 --> 00:19:11.710
Gilad Bracha.

00:19:11.710 --> 00:19:13.814
And thanks for joining
us this morning.

00:19:13.814 --> 00:19:15.100
GILAD BRACHA: Hey Seth, sorry.

00:19:15.100 --> 00:19:16.140
My machine logged me out.

00:19:16.140 --> 00:19:17.610
MALE SPEAKER: That's OK.

00:19:17.610 --> 00:19:21.970
As everyone knows, we are
gearing up for an n1 line in

00:19:21.970 --> 00:19:24.050
the sand, if you will,
around the language.

00:19:24.050 --> 00:19:26.580
And that lets our
implementations then buckle

00:19:26.580 --> 00:19:29.910
down and all get up to the same
state, and then focus on

00:19:29.910 --> 00:19:31.370
other cool things like
performance and

00:19:31.370 --> 00:19:32.520
libraries, et cetera.

00:19:32.520 --> 00:19:36.160
But to do all that, we've got
to get the n1 language

00:19:36.160 --> 00:19:37.040
comfortable.

00:19:37.040 --> 00:19:40.290
And one of the big pieces of
feedback we've received from

00:19:40.290 --> 00:19:43.140
all the major hackathons we've
done, and mailing list

00:19:43.140 --> 00:19:46.520
feedback and bugs, et cetera,
is people are--

00:19:46.520 --> 00:19:50.340
developers are asking for a
better way to compose their

00:19:50.340 --> 00:19:54.330
libraries together, both an
easier-to-understand syntax

00:19:54.330 --> 00:19:57.220
but I think just easier to
understand mental model.

00:19:57.220 --> 00:19:58.200
And so it was awesome.

00:19:58.200 --> 00:20:01.610
The team went back and huddled
and came up with--

00:20:01.610 --> 00:20:03.360
I'm really impressed, some
really great changes that, to

00:20:03.360 --> 00:20:06.050
me at least, answered some
of my biggest questions.

00:20:06.050 --> 00:20:10.190
And here to explain the
libraries and import syntax

00:20:10.190 --> 00:20:12.870
and semantics and just changes
coming down, Gilad.

00:20:12.870 --> 00:20:14.820
So, thanks.

00:20:14.820 --> 00:20:15.850
GILAD BRACHA: OK.

00:20:15.850 --> 00:20:19.360
So I guess people can
see what we have--

00:20:19.360 --> 00:20:19.790
MALE SPEAKER: Do we need
to share the screen?

00:20:19.790 --> 00:20:21.366
GILAD BRACHA: --on the screen.

00:20:21.366 --> 00:20:22.800
MALE SPEAKER: I think we need
to share the screen.

00:20:22.800 --> 00:20:23.400
MALE SPEAKER: We're good.

00:20:23.400 --> 00:20:23.610
MALE SPEAKER: Oh, we're good.

00:20:23.610 --> 00:20:24.035
Wow.

00:20:24.035 --> 00:20:25.760
All right.

00:20:25.760 --> 00:20:29.690
GILAD BRACHA: So this is sort
of a dummy example I just

00:20:29.690 --> 00:20:31.330
typed in here a few
minutes ago.

00:20:31.330 --> 00:20:33.980
But people who are already
familiar with the library

00:20:33.980 --> 00:20:36.920
syntax that we have right now
will notice a few changes.

00:20:36.920 --> 00:20:38.810
And some of them are
just cosmetic.

00:20:38.810 --> 00:20:44.970
And there always are a lot
of comments on syntax.

00:20:44.970 --> 00:20:48.160
But, more substantially really,
there were some issues

00:20:48.160 --> 00:20:52.170
with the library design, where
we wanted to make it more

00:20:52.170 --> 00:20:55.680
robust, in terms of how
libraries evolve.

00:20:55.680 --> 00:20:58.270
We wanted to make it a bit
easier for people to use in a

00:20:58.270 --> 00:21:02.050
few cases where they complained
about issues.

00:21:02.050 --> 00:21:04.780
And so there are a number of
actually meaningful semantic

00:21:04.780 --> 00:21:08.200
features that are
different here.

00:21:08.200 --> 00:21:12.820
So, as you can see, the
hash marks are gone.

00:21:12.820 --> 00:21:15.080
You don't--

00:21:15.080 --> 00:21:17.730
let's see, actually some of
these things actually were

00:21:17.730 --> 00:21:19.390
specced one way and
never implemented.

00:21:19.390 --> 00:21:20.670
And now they're specced
another way.

00:21:20.670 --> 00:21:23.010
So you probably don't even
realize some of the

00:21:23.010 --> 00:21:24.700
improvements that we made.

00:21:24.700 --> 00:21:32.710
But the basic idea here is still
that libraries can be

00:21:32.710 --> 00:21:35.140
broken into different parts.

00:21:35.140 --> 00:21:38.100
But one of the big changes is
we formalized this notion of

00:21:38.100 --> 00:21:40.740
parts, because people were quite
uncomfortable with this

00:21:40.740 --> 00:21:45.050
idea that you just use the
source directive and sucked in

00:21:45.050 --> 00:21:46.960
some code into a library.

00:21:46.960 --> 00:21:48.860
This gave some people
the willies.

00:21:48.860 --> 00:21:51.040
They were thinking of
like preprocessors

00:21:51.040 --> 00:21:51.970
and stuff like that.

00:21:51.970 --> 00:21:55.250
And we didn't help this by
having this hash syntax, which

00:21:55.250 --> 00:21:58.130
we thought would be familiar but
turned out to give people

00:21:58.130 --> 00:22:03.210
the wrong association, because
it never really worked, like

00:22:03.210 --> 00:22:04.910
includes and things like that.

00:22:04.910 --> 00:22:06.880
MALE SPEAKER: You know, I kept
trying to type #ifdef and it

00:22:06.880 --> 00:22:07.710
wasn't working.

00:22:07.710 --> 00:22:09.220
I don't understand.

00:22:09.220 --> 00:22:12.140
GILAD BRACHA: Well, I'm glad
at least that didn't work.

00:22:12.140 --> 00:22:14.730
But the idea here is
now that there--

00:22:14.730 --> 00:22:16.870
that you can still break your
library into parts.

00:22:16.870 --> 00:22:21.110
But one of the key things was
that there wasn't a real

00:22:21.110 --> 00:22:23.960
connection between the parts and
the library, or, at least,

00:22:23.960 --> 00:22:25.600
there was only a one
way connection.

00:22:25.600 --> 00:22:29.620
A library mentioned what things
it was sourcing in.

00:22:29.620 --> 00:22:32.470
But whatever you were sourcing
in was just a file somewhere

00:22:32.470 --> 00:22:34.150
that could go anywhere.

00:22:34.150 --> 00:22:37.000
And this caused issues
in terms of--

00:22:37.000 --> 00:22:39.090
OK, you go browse this source.

00:22:39.090 --> 00:22:41.410
What's the context now, because
the scope is actually

00:22:41.410 --> 00:22:42.305
influenced by--

00:22:42.305 --> 00:22:44.130
is the whole library
wide scope?

00:22:44.130 --> 00:22:45.260
So everything else
in the library

00:22:45.260 --> 00:22:46.270
should be visible there.

00:22:46.270 --> 00:22:48.440
But how do you know that?

00:22:48.440 --> 00:22:51.070
How do your tools know that?

00:22:51.070 --> 00:22:56.290
And so, we got to-- we decided
that the parts actually have

00:22:56.290 --> 00:22:57.960
to point back at the library.

00:22:57.960 --> 00:22:59.930
Well, have is strong word,
because there are cases where

00:22:59.930 --> 00:23:00.820
you don't want it.

00:23:00.820 --> 00:23:02.660
But let's--

00:23:02.660 --> 00:23:04.700
I'm going to just--

00:23:04.700 --> 00:23:07.110
let's suppose this is a
different file now.

00:23:07.110 --> 00:23:08.876
Oops, sorry.

00:23:08.876 --> 00:23:11.660
Shift right we'll just put
a line in the sand here.

00:23:11.660 --> 00:23:15.390
And you're going to have--
suppose this is like the ABC.

00:23:15.390 --> 00:23:23.210
And so, in ABC, we might say
something like part of my lib.

00:23:23.210 --> 00:23:28.070
So there's basically-- the
individual parts declare that

00:23:28.070 --> 00:23:29.390
they are part of something.

00:23:29.390 --> 00:23:30.280
So there's a connection.

00:23:30.280 --> 00:23:33.040
So they don't belong to
something random.

00:23:33.040 --> 00:23:36.820
And that gives everyone, the
user, the tools, the sort of

00:23:36.820 --> 00:23:38.900
information they need.

00:23:38.900 --> 00:23:42.270
Now, nothing is ever that
simple, because, for example,

00:23:42.270 --> 00:23:44.870
for testing we actually rely
on the fact that you can

00:23:44.870 --> 00:23:47.800
actually plug things into
different libraries.

00:23:47.800 --> 00:23:54.160
And so what happens is that you
can still refer to a part

00:23:54.160 --> 00:23:56.550
from multiple libraries.

00:23:56.550 --> 00:24:00.620
And A, if your testing library
simply has the same name,

00:24:00.620 --> 00:24:02.180
you'll be good.

00:24:02.180 --> 00:24:04.200
If for some reason your
testing library has a

00:24:04.200 --> 00:24:07.360
different name, or you have
found some other exotic case

00:24:07.360 --> 00:24:10.080
where you really wanted to share
this stuff, you'll get a

00:24:10.080 --> 00:24:11.370
warning

00:24:11.370 --> 00:24:16.820
Dart's philosophy is generally
to slap you gently rather than

00:24:16.820 --> 00:24:19.240
kick you in the gut,
as the bondage and

00:24:19.240 --> 00:24:21.010
discipline school suggest.

00:24:21.010 --> 00:24:23.220
And so, it'll still work.

00:24:23.220 --> 00:24:26.060
But yeah, if you can tolerate
the warning

00:24:26.060 --> 00:24:27.110
then you can do that.

00:24:27.110 --> 00:24:29.430
But we generally recommend
that a part belongs to a

00:24:29.430 --> 00:24:33.140
particular library or, at most,
to a library and its

00:24:33.140 --> 00:24:34.692
test cousin.

00:24:34.692 --> 00:24:37.770
MALE SPEAKER: So you have my
lib here as the identifier,

00:24:37.770 --> 00:24:38.870
the name of the library.

00:24:38.870 --> 00:24:40.340
Is that any relation
to the file name

00:24:40.340 --> 00:24:42.220
now or is that separate?

00:24:42.220 --> 00:24:44.230
GILAD BRACHA: It doesn't
have to be related.

00:24:44.230 --> 00:24:47.680
It might be very sensible to do
have a convention where it

00:24:47.680 --> 00:24:49.170
was related.

00:24:49.170 --> 00:24:50.700
But it doesn't have to be.

00:24:50.700 --> 00:24:51.730
It's an identifier.

00:24:51.730 --> 00:24:53.850
The identifier--

00:24:53.850 --> 00:24:56.090
people kept asking why is there
a library name in the

00:24:56.090 --> 00:24:56.960
first place?

00:24:56.960 --> 00:24:59.200
And kept telling them,
eventually you're going to

00:24:59.200 --> 00:25:01.200
want to reflect on these
things, print them out,

00:25:01.200 --> 00:25:02.400
there's all kinds of reasons.

00:25:02.400 --> 00:25:04.700
But all of this was abstract
since the mirror stuff

00:25:04.700 --> 00:25:06.360
wasn't there yet.

00:25:06.360 --> 00:25:09.040
One more reason now is this
gives you something you can

00:25:09.040 --> 00:25:10.860
name in the parts.

00:25:10.860 --> 00:25:13.160
This is how you refer to the
library from the part.

00:25:13.160 --> 00:25:15.560
And you want a name, as opposed
to the URI, because

00:25:15.560 --> 00:25:18.840
you don't want to have to
reconfigure these things every

00:25:18.840 --> 00:25:20.950
time something moves.

00:25:20.950 --> 00:25:25.670
So that's one set of
important changes.

00:25:25.670 --> 00:25:28.890
The other set of important
changes really have to do with

00:25:28.890 --> 00:25:33.380
imports, the stuff
that's up here--

00:25:33.380 --> 00:25:36.910
imports, and the hide and show
operators, and how we do

00:25:36.910 --> 00:25:37.840
prefixes, and stuff.

00:25:37.840 --> 00:25:40.080
Well, which looks rather
different--

00:25:40.080 --> 00:25:44.070
lot of people wanted a quote
"real syntax." Now I wanted a

00:25:44.070 --> 00:25:44.900
real syntax.

00:25:44.900 --> 00:25:49.870
The original idea of the syntax
was to make it look

00:25:49.870 --> 00:25:52.940
like a reflective call, with the
intention of building this

00:25:52.940 --> 00:25:55.080
reflective library interface
that would be

00:25:55.080 --> 00:25:56.290
familiar at that point.

00:25:56.290 --> 00:26:00.020
But turns out that there's a
reason people have syntax.

00:26:00.020 --> 00:26:03.870
And reflective calls are
a bit harder to use.

00:26:03.870 --> 00:26:08.260
So we've gone to a more
conventional syntax, which

00:26:08.260 --> 00:26:09.180
does look nicer.

00:26:09.180 --> 00:26:11.190
And gets rid of the hash
which confuses

00:26:11.190 --> 00:26:12.616
the hell out of people.

00:26:12.616 --> 00:26:15.690
MALE SPEAKER: Now, aren't you
worried that, with this new

00:26:15.690 --> 00:26:18.440
syntactic sugar, that syntactic
sugar will lead to

00:26:18.440 --> 00:26:19.130
cancer of the semicolon?

00:26:19.130 --> 00:26:20.330
I

00:26:20.330 --> 00:26:23.540
GILAD BRACHA: This is not really
sugar, in the sense

00:26:23.540 --> 00:26:26.130
that this is simply expressing
what you wanted to do.

00:26:26.130 --> 00:26:28.640
Now I can give you lots of
examples in Dart where it

00:26:28.640 --> 00:26:30.730
already is tempting people.

00:26:30.730 --> 00:26:32.360
And people need a

00:26:32.360 --> 00:26:36.280
semi-colonoscopy to
overcome that.

00:26:36.280 --> 00:26:37.020
But--

00:26:37.020 --> 00:26:37.220
MALE SPEAKER: Touche.

00:26:37.220 --> 00:26:40.650
GILAD BRACHA: in this case,
I don't think we've gone

00:26:40.650 --> 00:26:41.560
overboard at all.

00:26:41.560 --> 00:26:43.400
We're basically--

00:26:43.400 --> 00:26:46.090
we've gotten rid of noise,
right, hash, the parens.

00:26:46.090 --> 00:26:48.230
All the things that are
necessary to parse a general

00:26:48.230 --> 00:26:49.480
purpose expression.

00:26:52.200 --> 00:26:56.690
But aren't necessary, in the
case, where you actually know

00:26:56.690 --> 00:26:58.090
what we're doing here.

00:26:58.090 --> 00:27:00.680
So, it's just lighter.

00:27:00.680 --> 00:27:02.750
And there is more important,
right-- people

00:27:02.750 --> 00:27:04.390
focus on the syntax--

00:27:04.390 --> 00:27:06.290
but more important is it
semantically there are

00:27:06.290 --> 00:27:09.130
important differences here
that make libraries more

00:27:09.130 --> 00:27:12.440
robust in the face of long-term
software evolution,

00:27:12.440 --> 00:27:14.140
which is one of our big
goals with Dart.

00:27:14.140 --> 00:27:16.570
And we're just starting this,
because Dart hasn't been

00:27:16.570 --> 00:27:17.150
around much.

00:27:17.150 --> 00:27:20.710
People haven't yet encountered
all the troubles that have

00:27:20.710 --> 00:27:24.860
led, say, to all these
complicated practices and

00:27:24.860 --> 00:27:28.180
tools and save the Java
world, et cetera.

00:27:28.180 --> 00:27:31.520
So the need for serious library
management is only

00:27:31.520 --> 00:27:33.200
beginning to surface.

00:27:33.200 --> 00:27:36.560
But, here inside the Dart team,
we've already hit some

00:27:36.560 --> 00:27:37.350
of these issues.

00:27:37.350 --> 00:27:40.440
And so we're trying to make
that more robust.

00:27:40.440 --> 00:27:42.390
MALE SPEAKER: Can you talk a
little bit more about what

00:27:42.390 --> 00:27:45.810
hide show and that and
exports syntax?

00:27:45.810 --> 00:27:47.750
MALE SPEAKER: Right, perfect.

00:27:47.750 --> 00:27:50.950
That is exactly how we make
these things more robust.

00:27:50.950 --> 00:27:55.710
So one issue is, a big issue, of
course, is conflicts among

00:27:55.710 --> 00:27:57.010
your imports.

00:27:57.010 --> 00:28:00.000
And so we're trying to give
you tools for name space

00:28:00.000 --> 00:28:01.120
management.

00:28:01.120 --> 00:28:03.680
So really what you're importing
isn't, strictly

00:28:03.680 --> 00:28:04.690
speaking, a library.

00:28:04.690 --> 00:28:06.700
You're importing a name space.

00:28:06.700 --> 00:28:08.840
And it used to be that you
imported the library, and you

00:28:08.840 --> 00:28:10.400
got its entire main space.

00:28:10.400 --> 00:28:13.380
And, if they conflicted, well
there's a problem, which means

00:28:13.380 --> 00:28:17.130
that, over time, as library A
adds something, they might

00:28:17.130 --> 00:28:19.940
break their clients because
somehow there's a conflict.

00:28:19.940 --> 00:28:23.860
So we've done several things
to do ameliorate that.

00:28:23.860 --> 00:28:26.550
One thing is that the
definitions inside your

00:28:26.550 --> 00:28:29.550
library, the importer, always
take precedence

00:28:29.550 --> 00:28:30.570
over anything important.

00:28:30.570 --> 00:28:33.610
So no one can break
you that way.

00:28:33.610 --> 00:28:35.410
If you have a name, and
they have a name,

00:28:35.410 --> 00:28:38.180
your name always wins.

00:28:38.180 --> 00:28:40.860
That makes things a
bit more robust.

00:28:40.860 --> 00:28:42.930
Then there's a question
of what happens.

00:28:42.930 --> 00:28:43.190
OK.

00:28:43.190 --> 00:28:45.910
So I'm importing two libraries
that happened to have a

00:28:45.910 --> 00:28:47.770
conflict between them.

00:28:47.770 --> 00:28:48.950
So we've--

00:28:48.950 --> 00:28:52.070
used to be that we complained
sort of eagerly in the fail

00:28:52.070 --> 00:28:52.840
fast tradition.

00:28:52.840 --> 00:28:55.190
We said, OK, there's
a conflict here.

00:28:55.190 --> 00:28:58.990
Now we only complain, well not
now, when this is implemented,

00:28:58.990 --> 00:29:02.340
we will only complain if you're
actually using a member

00:29:02.340 --> 00:29:05.190
that's ambiguous, that comes
in from multiple places.

00:29:05.190 --> 00:29:06.460
MALE SPEAKER: And that makes
a lot of sense, because if

00:29:06.460 --> 00:29:09.263
you're importing two third party
libraries, and you don't

00:29:09.263 --> 00:29:11.670
want to see any warnings, that
would be really irritating to

00:29:11.670 --> 00:29:13.820
see a warning that you
have no control over.

00:29:13.820 --> 00:29:14.140
GILAD BRACHA: Right.

00:29:14.140 --> 00:29:16.690
And even more irritating where
you get a compile time error,

00:29:16.690 --> 00:29:19.430
which is actually [INAUDIBLE]
state now.

00:29:19.430 --> 00:29:22.510
This is possible with libraries
as opposed to, for

00:29:22.510 --> 00:29:25.410
example, inheritance and
stuff like that.

00:29:25.410 --> 00:29:26.560
I'm not going to
get into that.

00:29:26.560 --> 00:29:30.125
But there's good reasons why
sometimes you don't do it in

00:29:30.125 --> 00:29:33.060
the sort of situations
that seem similar.

00:29:33.060 --> 00:29:37.600
So all of these things kind of
help to help libraries evolve

00:29:37.600 --> 00:29:40.540
independently without breaking
their clients.

00:29:40.540 --> 00:29:43.180
In addition, we have these hide
and show operators that

00:29:43.180 --> 00:29:45.080
basically let you control
the name space.

00:29:45.080 --> 00:29:47.660
So maybe, in fact, I'd recommend
you use these left

00:29:47.660 --> 00:29:50.020
and right, but most people
are too lazy.

00:29:50.020 --> 00:29:52.510
One of the things people have
learned in the Java world is

00:29:52.510 --> 00:29:55.870
that blanket imports are
actually bad style.

00:29:55.870 --> 00:29:59.130
And you want to import
individual elements.

00:29:59.130 --> 00:30:02.900
This, in a way, gives you
a way to do that.

00:30:02.900 --> 00:30:07.020
So the show combinator, if you
look at the third line along

00:30:07.020 --> 00:30:10.280
the imports over here, basically
says, OK, I'm going

00:30:10.280 --> 00:30:14.120
to import from baz.dart, but the
only things I want are the

00:30:14.120 --> 00:30:15.020
name things.

00:30:15.020 --> 00:30:20.250
So these are names of classes
or top level functions,

00:30:20.250 --> 00:30:23.020
basically top level members
of the library.

00:30:23.020 --> 00:30:25.840
And so you can actually control
exactly what you want

00:30:25.840 --> 00:30:29.400
to see, which, again, reduces
the risk of any conflict, and

00:30:29.400 --> 00:30:31.460
lets you decide which one
you wanted to use,

00:30:31.460 --> 00:30:32.230
and things like that.

00:30:32.230 --> 00:30:34.310
MALE SPEAKER: Do you think that
one day, maybe in the

00:30:34.310 --> 00:30:37.090
distant future, the Dart Editor
will automatically

00:30:37.090 --> 00:30:39.750
manage those so that you know
exactly where things are

00:30:39.750 --> 00:30:40.540
coming from?

00:30:40.540 --> 00:30:41.250
GILAD BRACHA: I'm pretty sure.

00:30:41.250 --> 00:30:42.980
And I don't think it should
be that distant, right?

00:30:42.980 --> 00:30:44.970
This is, indeed, one of
the reasons, right?

00:30:44.970 --> 00:30:50.290
So wildcard imports, as in most
languages, are motivated

00:30:50.290 --> 00:30:53.230
by that great force programmer
laziness.

00:30:53.230 --> 00:30:55.290
And the only way to--

00:30:55.290 --> 00:30:57.560
it doesn't help to write-- style
guys would say, well you

00:30:57.560 --> 00:30:59.780
really should import each one
individually, so you really

00:30:59.780 --> 00:31:01.910
know exactly what your
dependencies are.

00:31:01.910 --> 00:31:03.560
That's all good and true.

00:31:03.560 --> 00:31:07.700
But it's like dieting, people
lack character.

00:31:07.700 --> 00:31:10.460
And so, this is sort of
a dieting machine.

00:31:10.460 --> 00:31:13.570
The ID, which sort of says, I'll
figure out what you're

00:31:13.570 --> 00:31:15.830
actually using and put these
things in for you.

00:31:15.830 --> 00:31:19.080
And that's quite common in, I
think, now in the Java world?

00:31:19.080 --> 00:31:22.730
And it's a small matter
of programming.

00:31:22.730 --> 00:31:26.990
The Dart Editor team is doing
a terrific job of trying to

00:31:26.990 --> 00:31:31.060
catch up with 10, 20 years of
work in other tools have

00:31:31.060 --> 00:31:34.270
behind them, to give you
that experience.

00:31:34.270 --> 00:31:37.490
And they've made very great
strides in the past year.

00:31:37.490 --> 00:31:40.300
And I imagine that it won't be
all that long, once this

00:31:40.300 --> 00:31:42.540
construct is in there and
implemented, and the compiler

00:31:42.540 --> 00:31:46.510
and stable, and we know how to
use it, they'll probably start

00:31:46.510 --> 00:31:47.620
supporting that.

00:31:47.620 --> 00:31:51.160
So, in fact, maybe-- again, it's
also a policy decision--

00:31:51.160 --> 00:31:54.560
but I would encourage people
to say import and then show

00:31:54.560 --> 00:31:57.050
each individual thing
that you're using.

00:31:57.050 --> 00:31:59.260
MALE SPEAKER: Now there's two
ways, I think, to hide names.

00:31:59.260 --> 00:32:01.610
You can use the underscore,
or you can use Hide.

00:32:01.610 --> 00:32:03.790
What are some of the pros
and cons of that?

00:32:03.790 --> 00:32:04.990
GILAD BRACHA: There are
more than two ways.

00:32:04.990 --> 00:32:08.320
And it depends what Hide
means as various

00:32:08.320 --> 00:32:11.070
great men have said.

00:32:11.070 --> 00:32:15.140
So hiding via under
bar is privacy.

00:32:15.140 --> 00:32:19.650
That means the language
basically makes them invisible

00:32:19.650 --> 00:32:20.990
outside the library.

00:32:20.990 --> 00:32:22.500
That's sort of good
from a software

00:32:22.500 --> 00:32:24.270
engineering point of it.

00:32:24.270 --> 00:32:27.200
You control the fact, you as a
library author, control the

00:32:27.200 --> 00:32:29.400
fact that nobody can
touch the stuff.

00:32:29.400 --> 00:32:32.500
That's library-based privacy.

00:32:32.500 --> 00:32:35.500
That's one mechanism.

00:32:35.500 --> 00:32:37.950
The mechanisms you see
here are in the

00:32:37.950 --> 00:32:39.180
hands of the importer.

00:32:39.180 --> 00:32:42.660
So the person outside the
library is importing.

00:32:42.660 --> 00:32:45.330
He can control the name space
that they're bringing in.

00:32:45.330 --> 00:32:49.110
And there are actually three
ways to control this.

00:32:49.110 --> 00:32:52.060
So Show is one of them, which
says explicitly, I want this

00:32:52.060 --> 00:32:55.050
and this and that, and then all
the rest isn't coming in

00:32:55.050 --> 00:32:57.080
through this particular
import.

00:32:57.080 --> 00:32:59.740
Another one is Hide, which says,
well, you know what, I

00:32:59.740 --> 00:33:01.780
still have no character.

00:33:01.780 --> 00:33:04.280
I want everything, except
this one or two,

00:33:04.280 --> 00:33:05.360
which actually conflict.

00:33:05.360 --> 00:33:07.080
And I want to filter them out.

00:33:07.080 --> 00:33:09.500
So Hide is sort of symmetric
to Show.

00:33:09.500 --> 00:33:13.150
And then there's As, which is
the third line, which is what

00:33:13.150 --> 00:33:15.350
was currently called
the prefix, right?

00:33:15.350 --> 00:33:21.060
So, basically, when we say
import bam.dart as bam, that's

00:33:21.060 --> 00:33:22.400
essentially introducing
a prefix.

00:33:22.400 --> 00:33:25.120
So all the names coming in from
bam.dart are going to be

00:33:25.120 --> 00:33:26.360
prefixed by bam.

00:33:26.360 --> 00:33:29.340
So you'll say bam.x and bam.y.

00:33:29.340 --> 00:33:32.120
MALE SPEAKER: That also seems
like a pretty safe approach.

00:33:32.120 --> 00:33:34.010
GILAD BRACHA: Yeah that's true,
though it does tend to

00:33:34.010 --> 00:33:37.810
make your names more verbose.

00:33:37.810 --> 00:33:41.990
And so, I'm not sure how--

00:33:41.990 --> 00:33:45.090
we're still giving
people options.

00:33:45.090 --> 00:33:49.930
The other thing that's subtle,
and important to note, is that

00:33:49.930 --> 00:33:54.790
the name space, the stuff that
you are bringing in, you

00:33:54.790 --> 00:33:58.890
sometimes want to also expose
it to your clients.

00:33:58.890 --> 00:33:59.120
Right?

00:33:59.120 --> 00:34:01.510
So this was, I think, this
is less of a problem.

00:34:01.510 --> 00:34:04.320
But at the stage, you guys
remember this probably in more

00:34:04.320 --> 00:34:05.010
detail than I do.

00:34:05.010 --> 00:34:08.639
What we used to have-- dart
dot Dart going HTML.

00:34:08.639 --> 00:34:09.560
And they were similar.

00:34:09.560 --> 00:34:11.980
And people wanted bits of both
and they conflicted, and it

00:34:11.980 --> 00:34:14.020
was very hard to manage.

00:34:14.020 --> 00:34:17.790
And you sort of well, A, being
able to selectively control

00:34:17.790 --> 00:34:18.940
this is one thing that helps.

00:34:18.940 --> 00:34:22.330
But it also is true that you
might think of creating a

00:34:22.330 --> 00:34:26.370
library that just had the mix of
things that you wanted, and

00:34:26.370 --> 00:34:29.480
bringing that in and then
exporting it out.

00:34:29.480 --> 00:34:30.475
In fact, you can--

00:34:30.475 --> 00:34:32.710
it helps you build smaller
libraries, right, because you

00:34:32.710 --> 00:34:35.170
can actually have a library that
has no real content, in

00:34:35.170 --> 00:34:37.150
itself, but is sort
of a funnel.

00:34:37.150 --> 00:34:39.060
You're piping in several
components.

00:34:39.060 --> 00:34:41.199
And, say, well you're always
going to want to go on HTML,

00:34:41.199 --> 00:34:43.210
and SVG, or whatever, So some

00:34:43.210 --> 00:34:44.480
combination that goes together.

00:34:44.480 --> 00:34:46.900
That doesn't mean they have to
be lobbed together in this

00:34:46.900 --> 00:34:48.030
giant monster.

00:34:48.030 --> 00:34:50.650
You import them and
re-export them.

00:34:50.650 --> 00:34:53.340
And that's what the
and export is.

00:34:53.340 --> 00:34:56.750
And JJ and others have
complained about the syntax,

00:34:56.750 --> 00:34:57.910
always complain about syntax.

00:34:57.910 --> 00:34:58.410
MALE SPEAKER: So sorry.

00:34:58.410 --> 00:34:59.060
MALE SPEAKER: You have
to give them

00:34:59.060 --> 00:34:59.740
something to complain about.

00:34:59.740 --> 00:35:01.270
Whatever syntax you have,
misdirect them

00:35:01.270 --> 00:35:02.740
from the real problem.

00:35:02.740 --> 00:35:03.010
GILAD BRACHA: Exactly.

00:35:03.010 --> 00:35:04.260
Yes.

00:35:06.260 --> 00:35:07.750
It's actually fairly--

00:35:07.750 --> 00:35:12.030
we considered a number of
combinations with this thing.

00:35:12.030 --> 00:35:16.810
And we sort of wanted that
import declaration to flow.

00:35:16.810 --> 00:35:20.500
And it's important that export
shouldn't be in the wrong

00:35:20.500 --> 00:35:23.330
place, because you don't
export the prefixes.

00:35:23.330 --> 00:35:23.530
Right?

00:35:23.530 --> 00:35:26.050
Because the prefix is
your own problem.

00:35:26.050 --> 00:35:27.840
You as a library want
to control your

00:35:27.840 --> 00:35:28.820
internal name space.

00:35:28.820 --> 00:35:30.410
You want to give it this name.

00:35:30.410 --> 00:35:34.000
But letting that flow outward,
when you re-export, you've

00:35:34.000 --> 00:35:37.260
started getting very long,
qualified names and conflicts

00:35:37.260 --> 00:35:39.390
with other people just choosing
the same prefix.

00:35:39.390 --> 00:35:41.910
So you don't actually want
to export the prefix.

00:35:41.910 --> 00:35:44.830
So what you're exporting is a
name space that hasn't had

00:35:44.830 --> 00:35:47.590
this prefix applied to it.

00:35:47.590 --> 00:35:50.720
And so, you can't necessarily
put the export in front of the

00:35:50.720 --> 00:35:53.630
As because then it feels
like you're renaming.

00:35:53.630 --> 00:35:56.840
The exported name spaces
includes the prefix.

00:35:56.840 --> 00:35:58.430
So it's tricky.

00:35:58.430 --> 00:36:02.820
And I'm sure I'll be flooded
with suggestions on the other

00:36:02.820 --> 00:36:05.520
things, some of which
we've considered.

00:36:05.520 --> 00:36:07.010
A lot of people suggested
well have a

00:36:07.010 --> 00:36:09.490
separate export directive.

00:36:09.490 --> 00:36:12.770
The problem with that is that
it makes you repeat yourself

00:36:12.770 --> 00:36:14.110
which is not a popular thing.

00:36:14.110 --> 00:36:16.910
Because you not only repeat the
name of the library or the

00:36:16.910 --> 00:36:20.340
URI or whatever, but because you
may be importing this with

00:36:20.340 --> 00:36:23.770
all these high directives or
whatever, then there's more

00:36:23.770 --> 00:36:26.350
stuff that you are going
to have to say again.

00:36:26.350 --> 00:36:29.150
And so you really want to tie
the export to the importer.

00:36:29.150 --> 00:36:32.525
And re-export the name space
that a given import does.

00:36:32.525 --> 00:36:34.665
MALE SPEAKER: You know, It's
kind of interesting looking at

00:36:34.665 --> 00:36:35.810
that ampersand.

00:36:35.810 --> 00:36:38.100
It reminds me of when we
had the pound import.

00:36:38.100 --> 00:36:40.500
And it's like, oh, why
am I having strange

00:36:40.500 --> 00:36:41.990
flashbacks to C?

00:36:41.990 --> 00:36:45.160
It's like I think I'm doing
bitwise operators here.

00:36:45.160 --> 00:36:46.980
GILAD BRACHA: Right, but this is
actually, well we could do

00:36:46.980 --> 00:36:49.130
double ampersand and it
would be logical.

00:36:49.130 --> 00:36:54.780
But no seriously, we could do
introducing lots of keywords

00:36:54.780 --> 00:36:56.070
is always problematic.

00:36:56.070 --> 00:36:57.440
Are they real keywords?

00:36:57.440 --> 00:36:58.590
Are they pseudo keywords?

00:36:58.590 --> 00:37:00.520
Are they none of the above?

00:37:00.520 --> 00:37:04.690
The less words we have to
introduce, the better.

00:37:04.690 --> 00:37:07.000
And, on the other hand,
we wanted this to flow

00:37:07.000 --> 00:37:08.260
as a sort of phrase.

00:37:08.260 --> 00:37:11.600
Import this and export it.

00:37:11.600 --> 00:37:16.710
Otherwise, export just sits
there and it also looks weird.

00:37:16.710 --> 00:37:18.590
MALE SPEAKER: Well, we've got
a couple minutes left.

00:37:18.590 --> 00:37:21.300
And we have some questions
from the public.

00:37:21.300 --> 00:37:22.330
So let's take a couple
of these.

00:37:22.330 --> 00:37:24.760
So Ladislav , a guy who's
doing a great job

00:37:24.760 --> 00:37:27.460
participating in the mailing
list, wants to know-- he

00:37:27.460 --> 00:37:29.580
acknowledges that libraries are
identified by arbitrary

00:37:29.580 --> 00:37:31.990
strings and [INAUDIBLE]
what to a

00:37:31.990 --> 00:37:33.580
qualified identifier here.

00:37:33.580 --> 00:37:37.250
But is the way of locating the
libraries for import also

00:37:37.250 --> 00:37:38.850
going to change?

00:37:38.850 --> 00:37:40.990
GILAD BRACHA: There's no
plan for doing that.

00:37:40.990 --> 00:37:43.950
There are a lot of people
who are fond of URIs.

00:37:43.950 --> 00:37:47.060
Given that we only have a few
minutes, I won't give a long

00:37:47.060 --> 00:37:48.860
discourse on the history of this
idea, of starting with

00:37:48.860 --> 00:37:52.630
Modula and [INAUDIBLE]
and stuff like that.

00:37:52.630 --> 00:37:53.850
It could be done that
way, right?

00:37:53.850 --> 00:37:56.230
You could have just mentioned
the name and the environment

00:37:56.230 --> 00:37:58.900
We'd have to integrate more
tightly into the language so

00:37:58.900 --> 00:38:01.200
it would go find
things for you.

00:38:01.200 --> 00:38:02.880
This is largely what--

00:38:02.880 --> 00:38:05.570
with more retarded things in
public-- but very basic tools

00:38:05.570 --> 00:38:08.500
were built into compilers, that
you'd name a module that

00:38:08.500 --> 00:38:10.700
you were importing, and it would
generally look in the

00:38:10.700 --> 00:38:14.730
directory where it was
installed, or have a path.

00:38:14.730 --> 00:38:15.650
We're not doing that.

00:38:15.650 --> 00:38:19.821
This makes it easy to set
up things initially.

00:38:19.821 --> 00:38:21.820
And it probably isn't
going to change.

00:38:21.820 --> 00:38:24.010
MALE SPEAKER: I think has an
echo to our web programming

00:38:24.010 --> 00:38:26.310
backgrounds, where you
can just pull in by

00:38:26.310 --> 00:38:27.790
files in URIs together.

00:38:27.790 --> 00:38:31.030
And quickly get started
without having this

00:38:31.030 --> 00:38:32.740
infrastructure that large.

00:38:32.740 --> 00:38:34.630
I think that something
to do with it.

00:38:34.630 --> 00:38:38.290
Kevin asks, I think this is a
nice perspective question.

00:38:38.290 --> 00:38:40.780
What was the thinking behind
library-based privacy instead

00:38:40.780 --> 00:38:43.070
of object-based privacy?

00:38:43.070 --> 00:38:44.900
GILAD BRACHA: Ouch.

00:38:44.900 --> 00:38:45.650
MALE SPEAKER: In two
minutes please.

00:38:45.650 --> 00:38:47.090
MALE SPEAKER: I don't think
this is very loaded.

00:38:47.090 --> 00:38:47.930
I think it's a curiosity.

00:38:47.930 --> 00:38:48.680
GILAD BRACHA: No, no.

00:38:48.680 --> 00:38:50.630
I like object-based privacy.

00:38:50.630 --> 00:38:53.640
The thing is, object-based
privacy is--

00:38:53.640 --> 00:38:55.460
it's an austere discipline.

00:38:55.460 --> 00:38:56.850
Right?

00:38:56.850 --> 00:38:58.660
It requires you to design.

00:38:58.660 --> 00:39:02.920
It makes certain kinds
of things hard.

00:39:02.920 --> 00:39:05.320
When you have multiple classes
that are interoperating, you

00:39:05.320 --> 00:39:07.850
want to-- there are objects to
flow out of the library and be

00:39:07.850 --> 00:39:09.970
accessed, but you don't want
them to expose their API.

00:39:09.970 --> 00:39:12.790
But they, between themselves,
have to operate.

00:39:12.790 --> 00:39:15.770
And it can get fairly tricky
how to do that.

00:39:15.770 --> 00:39:17.832
You put some shared state hidden
in the library and have

00:39:17.832 --> 00:39:18.710
them talk through that.

00:39:18.710 --> 00:39:20.260
It gets rather messy.

00:39:20.260 --> 00:39:24.310
It is a lot easier to work with
library-based privacy,

00:39:24.310 --> 00:39:27.970
but it does create certain weird
situations that I'm not

00:39:27.970 --> 00:39:29.920
fond of but--

00:39:29.920 --> 00:39:34.100
Language design is
a compromise.

00:39:34.100 --> 00:39:36.130
MALE SPEAKER: There's a couple
of questions I think are easy

00:39:36.130 --> 00:39:36.880
answer, but are great.

00:39:36.880 --> 00:39:38.210
I think a lot of people
have them.

00:39:38.210 --> 00:39:40.460
What is the status of the
official Dart UI Library?

00:39:40.460 --> 00:39:42.220
And how might web components
factor in?

00:39:42.220 --> 00:39:43.440
This is from Kevin.

00:39:43.440 --> 00:39:44.610
This is a great question.

00:39:44.610 --> 00:39:47.460
The team's still hard at work
trying to figure out how the

00:39:47.460 --> 00:39:49.740
new features, the web platform,
web components,

00:39:49.740 --> 00:39:52.860
impact and affect a
Dart UI library.

00:39:52.860 --> 00:39:54.970
And so the team's hard
at work on that.

00:39:54.970 --> 00:39:56.840
It's still very much part
of the road map.

00:39:56.840 --> 00:39:59.340
But it remains to be seen
exactly how they're going to

00:39:59.340 --> 00:39:59.930
play together.

00:39:59.930 --> 00:40:02.960
But I can say it's fair to
assume that the Dart UI

00:40:02.960 --> 00:40:06.150
Library will play well with web
components as they grow

00:40:06.150 --> 00:40:07.560
and become better
specced out and

00:40:07.560 --> 00:40:10.560
implemented across browsers.

00:40:10.560 --> 00:40:14.290
Polix asks, are there plans for
a global pub repository?

00:40:14.290 --> 00:40:16.390
If yes, will it be a repository
of source files or

00:40:16.390 --> 00:40:20.420
a global map from library name
to Git repositories or both?

00:40:20.420 --> 00:40:23.320
There is a plan for, hopefully,
many different,

00:40:23.320 --> 00:40:24.920
global pub repositories.

00:40:24.920 --> 00:40:28.150
I know the Dart team will
stand up their own,

00:40:28.150 --> 00:40:31.650
pub.dartlink.org, which will
be probably the first, but

00:40:31.650 --> 00:40:34.690
hopefully not the only, package
repository that the

00:40:34.690 --> 00:40:36.960
Pub command works from.

00:40:36.960 --> 00:40:37.820
I don't know

00:40:37.820 --> 00:40:38.665
exactly what's going happen.

00:40:38.665 --> 00:40:42.990
I believe the idea is it will
be friendly to both source

00:40:42.990 --> 00:40:45.700
code repositories like Git,
as well as [? Tarjeezy ?]

00:40:45.700 --> 00:40:46.120
snapshots.

00:40:46.120 --> 00:40:49.280
So I think, at least, we'll have
those two mechanisms to

00:40:49.280 --> 00:40:51.840
publish out your packages and
upload metadata and find and

00:40:51.840 --> 00:40:53.095
discover and install packages.

00:40:56.110 --> 00:40:58.570
And then, I think, another good
question from Polix is--

00:40:58.570 --> 00:41:00.540
is there an easy way to
obtain a Dart REPL?

00:41:00.540 --> 00:41:03.410
If not, are there any plans
to provide one?

00:41:03.410 --> 00:41:03.785
This

00:41:03.785 --> 00:41:05.770
[INTERPOSING VOICES]

00:41:05.770 --> 00:41:07.460
GILAD BRACHA: This should have--
this should have been

00:41:07.460 --> 00:41:09.160
there from day one.

00:41:09.160 --> 00:41:10.640
MALE SPEAKER: Oh, so
you like REPLs.

00:41:10.640 --> 00:41:12.740
GILAD BRACHA: Well, REPLs
are a first step.

00:41:12.740 --> 00:41:15.600
REPLs are actually-- it's sad
that we're talking about REPLs

00:41:15.600 --> 00:41:20.760
when we can actually go a good
way beyond REPLs, right?

00:41:20.760 --> 00:41:22.210
Try it on the Dartlang.

00:41:22.210 --> 00:41:24.720
When it was being put up, I
sort of screamed that this

00:41:24.720 --> 00:41:26.640
should at least be a
REPL if not more.

00:41:26.640 --> 00:41:29.060
But there were technical
difficulties

00:41:29.060 --> 00:41:30.300
around it or whatever.

00:41:30.300 --> 00:41:32.080
It didn't happen.

00:41:32.080 --> 00:41:35.900
I think that the tools
should offer you more

00:41:35.900 --> 00:41:36.980
than a REPL, right?

00:41:36.980 --> 00:41:41.700
The ability to, not only execute
these things, but to

00:41:41.700 --> 00:41:45.830
then inspect their results as
to an object inspector.

00:41:45.830 --> 00:41:50.540
And there's lots of cool
examples of that in the list

00:41:50.540 --> 00:41:51.890
and smalldoc worlds and
stuff like that.

00:41:51.890 --> 00:41:54.500
And this will happen.

00:41:54.500 --> 00:41:56.440
It annoys me more than
it annoys you, how

00:41:56.440 --> 00:41:57.550
slowly this is happening.

00:41:57.550 --> 00:42:01.740
But mirrors will make
some of that easier.

00:42:01.740 --> 00:42:06.765
And just hold your breath
turn blue and--

00:42:06.765 --> 00:42:07.190
MALE SPEAKER: It'll
eventually happen.

00:42:07.190 --> 00:42:09.030
MALE SPEAKER: Yeah I come
from the Python and Ruby

00:42:09.030 --> 00:42:09.500
background.

00:42:09.500 --> 00:42:11.830
And so I definitely
feel a little bit

00:42:11.830 --> 00:42:15.380
strange not having REPL.

00:42:15.380 --> 00:42:16.280
MALE SPEAKER: I think
we're out of time.

00:42:16.280 --> 00:42:18.320
So I want to thank our special
guest, Rikulo.

00:42:18.320 --> 00:42:19.760
Thanks guys, for staying
up again.

00:42:19.760 --> 00:42:21.950
And Gilad, thank you very much
for getting up early and

00:42:21.950 --> 00:42:24.860
helping explain the new library
imports [INAUDIBLE]

00:42:24.860 --> 00:42:25.430
syntax.

00:42:25.430 --> 00:42:27.900
I think this is going to be big
boon, especially when Pub

00:42:27.900 --> 00:42:29.580
and the new library stuff,
we're going to see an

00:42:29.580 --> 00:42:32.160
explosion of third
party libraries.

00:42:32.160 --> 00:42:35.090
I want to encourage everyone
to join us

00:42:35.090 --> 00:42:36.340
on the mailing list.

00:42:36.340 --> 00:42:38.480
The [INAUDIBLE]

00:42:38.480 --> 00:42:40.060
That's the general discussion.

00:42:40.060 --> 00:42:41.530
And certainly encourage
everyone to ask their

00:42:41.530 --> 00:42:43.020
questions on Stack Overflow.

00:42:43.020 --> 00:42:45.580
I think the tag is just
the keyword Dart.

00:42:45.580 --> 00:42:48.000
And you'll find us, as well as
others from the community,

00:42:48.000 --> 00:42:51.140
answering questions and just
generally helping out and

00:42:51.140 --> 00:42:51.830
being really friendly.

00:42:51.830 --> 00:42:53.300
I love to see the community
participate,

00:42:53.300 --> 00:42:54.580
and so lots of ways.

00:42:54.580 --> 00:42:56.780
And, finally, a call
for feedback.

00:42:56.780 --> 00:42:58.540
Just generally love to see
what you're building.

00:42:58.540 --> 00:43:01.460
We love to know what you
think and what you use.

00:43:01.460 --> 00:43:05.270
And what you'd like to see us
help you to make the world's

00:43:05.270 --> 00:43:07.760
next awesome modern web app.

00:43:07.760 --> 00:43:08.260
MALE SPEAKER: Excellent.

00:43:08.260 --> 00:43:09.490
MALE SPEAKER: So with that,
thanks everybody.

00:43:09.490 --> 00:43:09.700
MALE SPEAKER: Thank
you very much.

00:43:09.700 --> 00:43:11.690
MALE SPEAKER: And we'll see you
next time on Dartisans.

00:43:11.690 --> 00:43:12.430
Take care.

00:43:12.430 --> 00:43:20.867
[MUSIC PLAYING]

