WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:03.290
The ability to create custom
watch faces gives you direct

00:00:03.290 --> 00:00:07.210
access to the most prominent UI element
on the user's most personal device.

00:00:07.210 --> 00:00:11.060
And the API is simple enough to
build watch faces quickly and

00:00:11.060 --> 00:00:13.840
flexible enough to
allow personalization.

00:00:13.840 --> 00:00:17.200
Given the depth and flexibility of
the Android platform, you can create

00:00:17.200 --> 00:00:21.810
something for the user that's both
beautiful and pact with unique features.

00:00:21.810 --> 00:00:25.200
And here's a few design guidelines
that'll set the right context for

00:00:25.200 --> 00:00:27.520
making these design decisions.

00:00:27.520 --> 00:00:30.915
First, the Android wear comes
in multiple form factors.

00:00:30.915 --> 00:00:34.828
So you want to make sure that your watch
faces work great on both round and

00:00:34.828 --> 00:00:36.335
square watches.

00:00:36.335 --> 00:00:39.755
Next, there are two primary states for
Android wear.

00:00:39.755 --> 00:00:43.625
Interactive mode is in full color and
motion with fluid animation.

00:00:43.625 --> 00:00:48.015
Now, this is typically when a user is
giving focused attention to their watch.

00:00:48.015 --> 00:00:50.195
Ambient mode is a low power state and

00:00:50.195 --> 00:00:54.570
it should use a limited color palette
that's only updated once a minute.

00:00:54.570 --> 00:00:58.610
And finally, make sure to take
special screens into account.

00:00:58.610 --> 00:01:02.240
On low bit screens,
pixels in ambient mode are either off or

00:01:02.240 --> 00:01:07.110
on, which means you'll only want to use
black and white with no anti-aliasing.

00:01:07.110 --> 00:01:10.700
You're also going to want to use burn-in
protection techniques with OLED screens,

00:01:10.700 --> 00:01:13.590
like avoiding large
blocks of opaque pixels.

00:01:13.590 --> 00:01:19.450
In fact, we recommend that around 95% of
the screen in ambient mode remain black.

00:01:19.450 --> 00:01:22.610
Once you've finalized your design,
the best way to start developing is

00:01:22.610 --> 00:01:25.780
either to start with a sample or
a template in Android Studio.

00:01:25.780 --> 00:01:29.520
And there are three main methods which
you're going to want to know about.

00:01:29.520 --> 00:01:30.840
First the onCreate method.

00:01:30.840 --> 00:01:35.510
You'll take care of your initialization
tasks, such as loading resources or

00:01:35.510 --> 00:01:38.970
initializing paint objects for
later use in this method.

00:01:38.970 --> 00:01:42.500
You can scale these objects using
the onSurfaceChanged method.

00:01:42.500 --> 00:01:46.630
And this method has the screen size
passed in as one of its parameters.

00:01:46.630 --> 00:01:48.280
If you have a bitmap background,

00:01:48.280 --> 00:01:52.400
or watch hands, this is a great place
to scale them to the right size.

00:01:52.400 --> 00:01:55.420
At the core of the watchface
api is the onDraw method.

00:01:55.420 --> 00:01:59.682
Now that allows you to draw whatever
design you can think of to the canvas at

00:01:59.682 --> 00:02:02.798
a high enough frame rate
to deliver fluid animation.

00:02:02.798 --> 00:02:05.857
Now, this is going to come through at
full fidelity while the watch is in

00:02:05.857 --> 00:02:06.766
interactive mode.

00:02:06.766 --> 00:02:10.089
And at other times when the watch
is in ambient mode, you're able to

00:02:10.089 --> 00:02:14.010
draw a more discrete version of
the watch while also saving power.

00:02:14.010 --> 00:02:17.550
Additional preferences can be set
to arrange the System UI elements

00:02:17.550 --> 00:02:19.460
appropriately for your design.

00:02:19.460 --> 00:02:23.530
Once those basics are covered,
the limits are your imagination.

00:02:23.530 --> 00:02:25.530
You can go further with additions like,

00:02:25.530 --> 00:02:29.480
I don't know a moon phase, the current
weather or even fitness stats.

00:02:29.480 --> 00:02:32.580
Now watchmakers call these
items complications, but

00:02:32.580 --> 00:02:35.860
with Android Wear they're
hardly complicated.

00:02:35.860 --> 00:02:39.440
Once you have the data, just draw it
on the canvas as you did the time.

