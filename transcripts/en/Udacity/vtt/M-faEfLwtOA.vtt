WEBVTT
Kind: captions
Language: en

00:00:00.031 --> 00:00:02.385
Okay, so let's see what we've got.

00:00:02.385 --> 00:00:08.435
So a million threads and 1,000 blocks wrote into 10 array elements, right?

00:00:08.435 --> 00:00:12.761
So we should have-- in every array element we've done an increment operation--

00:00:12.761 --> 00:00:17.606
so we should have 100,000 in each, the number 100,000 in each of the array elements.

00:00:17.606 --> 00:00:21.551
And when we print it out, instead what we see is we've got 476.

00:00:21.551 --> 00:00:25.413
That is clearly completely wrong and we need to figure out what happened.

00:00:25.413 --> 00:00:28.928
Let's notice by the way that it took about 3 milliseconds to run this code.

00:00:28.928 --> 00:00:34.204
I can run it again a few times. Hm, this time I got a different number.

00:00:34.204 --> 00:00:38.352
Okay, that's odd--slight different amount of time took slightly less time,

00:00:38.352 --> 00:00:41.015
about the same, though, about 3 milliseconds.

00:00:41.015 --> 00:00:47.705
I can run it again and again, and what you're seeing is that every time I'm getting different,

00:00:47.705 --> 00:00:51.708
seemingly random values written into each of these array elements.

00:00:51.708 --> 00:00:55.821
And it's consistently taking around 3 milliseconds, 3 to 3.2 milliseconds.

00:00:55.821 --> 00:00:58.197
So let's see what's going on.

00:00:58.197 --> 00:01:03.766
The problem is that each of these threads is writing directly into the array

00:01:03.766 --> 00:01:07.459
and ignoring the fact that there might be many other threads doing the same thing.

00:01:07.459 --> 00:01:13.217
So if you look at this actual increment operation, every thread is reading the value at g sub i.

00:01:13.217 --> 00:01:17.863
It's adding 1 to that value, and then it's storing the result back in G sub I again.

00:01:17.863 --> 00:01:23.296
So it's read, a modify, and a write. It's called a read modify write operation for that reason.

00:01:23.296 --> 00:01:29.837
The difficulty is that there's 100,000 other threads that are also trying to read this value,

00:01:29.837 --> 00:01:35.115
compute a different value, and write the result into the same location.

00:01:35.115 --> 00:01:43.274
So in the amount of time it takes each thread to read this value, and increment, it and store it back,

00:01:43.274 --> 00:01:46.083
many, many other threads have gotten to run at the same time,

00:01:46.083 --> 00:01:48.700
and they read the old value, the un-incremented value.

00:01:48.700 --> 00:01:53.248
Since so many threads are reading the old value, the un-incremented value and adding a number,

00:01:53.248 --> 00:01:58.554
incrementing it, and storing it back, you're going to get the same result written over and over and over again.

00:01:58.554 --> 00:02:03.419
You also might have older threads overriding the results from later threads.

00:02:03.434 --> 00:02:08.294
It's no surprise, really, when we look at this code that, in fact, the numbers that we're

00:02:08.294 --> 00:02:10.585
getting in those array elements are essentially random.

00:02:10.585 --> 00:02:12.677
So, what do we do about it?

