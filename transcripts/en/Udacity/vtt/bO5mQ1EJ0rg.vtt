WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:05.420
Now, TCP flows are synchronized, the dynamics of

00:00:05.420 --> 00:00:10.140
the aggregate window as shown in the upper part of the graph, would have the

00:00:10.140 --> 00:00:15.750
same dynamics as any individual flow. The quantities

00:00:15.750 --> 00:00:20.860
on the Y axis here would simply be different. Specifically, the number

00:00:20.860 --> 00:00:25.905
of pockets occupying the buffer would be the sum of all

00:00:25.905 --> 00:00:29.830
of the TCP flows windows, rather than the

00:00:29.830 --> 00:00:32.400
window of any individual flow. Now if there

00:00:32.400 --> 00:00:36.270
are only a small number of flows in the network then these flows may tend to

00:00:36.270 --> 00:00:41.130
stay synchronized, and the aggregate dynamics might mimic

00:00:41.130 --> 00:00:43.580
the dynamics of any single flow as shown.

00:00:44.580 --> 00:00:47.360
But as the network supports an increasingly large

00:00:47.360 --> 00:00:53.140
number of flows, these individual TCP flows become de-synchronized.

00:00:53.140 --> 00:00:58.210
So instead of all of the flows lining up with the saw tooth as shown in

00:00:58.210 --> 00:01:02.330
the bottom part, individual flows might see peaks

00:01:02.330 --> 00:01:05.740
at different times. As a result, instead of

00:01:05.740 --> 00:01:09.820
seeing a huge sawtooth that's the sum of

00:01:09.820 --> 00:01:13.140
a bunch of synchronized flows, the aggregate instead

00:01:13.140 --> 00:01:15.300
might look quite a bit more smooth, as

00:01:15.300 --> 00:01:19.310
a result of the individual flows being desynchronized.

00:01:19.310 --> 00:01:22.550
And we can represent this sum, which

00:01:22.550 --> 00:01:25.970
is the buffer occupancy, as a random variable.

00:01:25.970 --> 00:01:31.240
At any given time, it's going to take a particular range of values. The range of

00:01:31.240 --> 00:01:36.010
values that this buffer occupancy takes, can

00:01:36.010 --> 00:01:38.210
actually be analyzed in terms of the central

00:01:38.210 --> 00:01:41.230
limit theorem. The central limit theorem tells

00:01:41.230 --> 00:01:44.200
us that the more variables that we have,

00:01:44.200 --> 00:01:49.350
and, in this case the number of variables are the number of unique congestion

00:01:49.350 --> 00:01:53.530
windows of flows that we have. The narrowerer the Gaussian will be. In this

00:01:53.530 --> 00:01:58.820
case, the Gaussian is the fluctuation of the sum of

00:01:58.820 --> 00:02:04.220
all of the congestion windows. In fact the width decreases as 1/

00:02:04.220 --> 00:02:09.229
root N, where N is the number of unique, congestion windows of flows that

00:02:09.229 --> 00:02:13.330
we have. And therefore, instead of the required buffering, needing to

00:02:13.330 --> 00:02:17.650
be 2T times C. We can get away, with much less buffering.

00:02:17.650 --> 00:02:20.900
In particular, 2 times C divided by the square root of

00:02:20.900 --> 00:02:24.530
n. Where N, is the number of flows, passing through the router.

