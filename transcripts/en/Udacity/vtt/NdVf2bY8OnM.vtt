WEBVTT
Kind: captions
Language: en

00:00:00.550 --> 00:00:04.110
Throughout this course, we will encounter a variety of technologies and

00:00:04.110 --> 00:00:09.960
tools, that enable designers, artists, developers, and data scientists

00:00:09.960 --> 00:00:13.850
to express their views and communicate their insights with the world at large.

00:00:13.850 --> 00:00:17.400
And while we will try to expose you to, what we think

00:00:17.400 --> 00:00:22.310
are the most relevant tools, to help you create data visualizations,.

00:00:22.310 --> 00:00:26.240
There are far too many technologies out there, to cover them all.

00:00:26.240 --> 00:00:30.300
However, you may encounter them, or at least people who use them, so

00:00:30.300 --> 00:00:33.570
it's a good idea to have some sense of what is there.

00:00:33.570 --> 00:00:35.510
At the bottom of the spectrum,

00:00:35.510 --> 00:00:38.760
are low-level graphics formats and specifications.

00:00:38.760 --> 00:00:42.260
These are some of the most efficient, performant, and flexible of

00:00:42.260 --> 00:00:46.430
your options when choosing to create a visualization, but a very low level and

00:00:46.430 --> 00:00:51.070
have significant overhead, not only to learn, but to develop in.

00:00:51.070 --> 00:00:55.120
Think of these as the assembly language of visualizations.

00:00:55.120 --> 00:00:59.270
While these technologies, are very flexible in what you can do.

00:00:59.270 --> 00:01:04.610
They force you to specify what you want done, in terms of pixels and lines, or

00:01:04.610 --> 00:01:11.390
rather place a point at xy and create a path, to point wz.

00:01:11.390 --> 00:01:17.070
This is much like if you were instructing a painter or robot how to draw.

00:01:18.180 --> 00:01:21.950
As you go up the spectrum, to higher level languages and

00:01:21.950 --> 00:01:26.690
libraries, it becomes much easier and faster to develop your graphics.

00:01:26.690 --> 00:01:30.500
Though the tool you may use, may be slightly less flexible,

00:01:30.500 --> 00:01:34.560
than raw HTML5 canvas, WebGL or SVG.

00:01:34.560 --> 00:01:40.580
A hop, skip and jump up, we have our beloved D3.js.

00:01:40.580 --> 00:01:44.210
We will get more into the specifics of D3 in just a second, but

00:01:44.210 --> 00:01:49.440
as a data visualization library built atop open web standards,

00:01:49.440 --> 00:01:54.280
it is implemented in JavaScript and allows for seamless binding of data,

00:01:54.280 --> 00:02:00.220
to HTML and SVG elements, or actually anything on a webpage really.

00:02:00.220 --> 00:02:06.080
Since you can style HTML and SVG with CSS, CSS works

00:02:06.080 --> 00:02:11.810
very naturally with the whole stack of technologies that D3JS is built atop.

00:02:12.850 --> 00:02:16.210
D3, contrary to what most people may think.

00:02:16.210 --> 00:02:19.220
Is actually pretty low of an abstraction.

00:02:19.220 --> 00:02:23.320
For continuing our analogy of programming languages and

00:02:23.320 --> 00:02:28.380
what they're built atop I would say that D3 in the spectrum of visualization

00:02:28.380 --> 00:02:33.625
technologies is actually at a similar level to where C or

00:02:33.625 --> 00:02:37.850
C++ is in the whole spectrum of programming languages.

00:02:37.850 --> 00:02:42.590
And just like people use C and C++ to build operating systems,

00:02:42.590 --> 00:02:47.930
programs, and compilers for other languages, D3 really shines

00:02:47.930 --> 00:02:52.880
when you use it to build higher level abstractions and libraries on top of it.

00:02:54.110 --> 00:02:58.040
And this brings us to the suite of D3.js libraries.

00:02:58.040 --> 00:02:59.510
This layer represents.

00:02:59.510 --> 00:03:03.180
The plethora of high level libraries built atop the building blocks of D3.

00:03:03.180 --> 00:03:06.600
Although there are far too many libraries to list or

00:03:06.600 --> 00:03:11.530
even fit on this screen that are built atop D3, three of the most common or

00:03:11.530 --> 00:03:14.598
ones that we would mention in this class are Rickshaw,.

00:03:14.598 --> 00:03:18.580
Dimple.js and NVD3.

00:03:18.580 --> 00:03:25.340
People often like to think of D3.js as data visualization library legos.

00:03:25.340 --> 00:03:29.170
You can very easily compose D3.js components.

00:03:29.170 --> 00:03:33.430
To build higher level abstractions and libraries on top of it.

00:03:33.430 --> 00:03:37.990
While it might seem very daunting to navigate the space of every library built

00:03:37.990 --> 00:03:42.710
on top of D3 they usually fall into one of two categories.

00:03:42.710 --> 00:03:47.655
They are either high level charting libraries like NVD3 and

00:03:47.655 --> 00:03:53.140
Dimple.js or they're tailored to a specific type of data.

00:03:53.140 --> 00:03:53.880
Like Rickshaw.

00:03:54.930 --> 00:03:57.610
Rickshaw was built to most effectively and

00:03:57.610 --> 00:04:02.500
easily visualize time series and real time streaming data.

00:04:02.500 --> 00:04:07.550
In the same vein of visualizing a specific type of data are also

00:04:07.550 --> 00:04:13.130
geographic libraries to help plot data on maps and add interaction to maps.

00:04:13.130 --> 00:04:16.890
We will use Dimple.js in this class in the later lessons.

00:04:16.890 --> 00:04:21.010
And really experience the power of using a higher-level abstraction than

00:04:21.010 --> 00:04:22.930
straight D3.

00:04:22.930 --> 00:04:28.330
And again, going back to our spectrum of programming languages, if WebGL,

00:04:28.330 --> 00:04:32.640
Canvas, and SVG are analogous to assembly language,

00:04:32.640 --> 00:04:35.705
D3 is analogous to C and C++.

00:04:35.705 --> 00:04:40.400
I would say the higher level libraries built atop of D3.

00:04:40.400 --> 00:04:45.470
Are similar in abstraction level to something like Python or Ruby.

00:04:45.470 --> 00:04:50.300
Python and ruby are fairly high-level languages, they're interpreted.

00:04:50.300 --> 00:04:53.980
You don't have to deal with memory collection, and

00:04:53.980 --> 00:04:56.600
many times they're implemented in C or C++.

00:04:56.600 --> 00:05:00.660
And, just like these higher level languages.

00:05:00.660 --> 00:05:05.509
Are implemented in a lower level language, NVD3, Dimple.js, and

00:05:05.509 --> 00:05:11.570
Rickshaw can be thought of as implemented in or on top of D3.js.

00:05:11.570 --> 00:05:14.750
At the very top of this spectrum, are libraries that

00:05:14.750 --> 00:05:20.050
have graphical interfaces for creating verializations, such as Raw or Chartio.

00:05:21.360 --> 00:05:25.990
Raw is an open source library built on top of D3 that allows you to

00:05:25.990 --> 00:05:29.940
very easily and quickly build predefined charts.

00:05:29.940 --> 00:05:35.420
Chartio is a web-based product similar to Tableau that allows

00:05:35.420 --> 00:05:40.830
you to very quickly and easily explore your data to build dashboards and

00:05:40.830 --> 00:05:43.210
charts hence the name.

00:05:43.210 --> 00:05:43.710
Chartio.

00:05:45.040 --> 00:05:49.330
Since these libraries are so high up on the spectrum, they have very

00:05:49.330 --> 00:05:54.970
limited flexibility and can usually only produce a set of predefined charts.

00:05:54.970 --> 00:05:58.380
The upside to having a set number of predefined charts.

00:05:58.380 --> 00:06:02.720
The creates those almost effortlessly, and quite seamlessly.

00:06:02.720 --> 00:06:07.010
Think of these as the Excel of data visualization libraries.

00:06:07.010 --> 00:06:10.070
They're incredibly useful for about 90% or

00:06:10.070 --> 00:06:14.500
95% of the use cases you most likely will encounter.

00:06:14.500 --> 00:06:19.010
And they make those 95% of cases quite effortless.

00:06:19.010 --> 00:06:22.580
If their charts happen to match what you're looking for.

00:06:22.580 --> 00:06:26.900
But if you stray from this path of predefined charts it may be cumbersome,

00:06:26.900 --> 00:06:29.850
if not impossible, to customize them.

00:06:29.850 --> 00:06:35.210
If none of my silly analogy to computer programming languages made any sense,

00:06:35.210 --> 00:06:35.800
do not worry.

00:06:35.800 --> 00:06:39.400
You will not need to know any of this for the class.

00:06:39.400 --> 00:06:42.990
Hopefully, however, it helped some folks get a better sense.

00:06:42.990 --> 00:06:46.110
Of where each of these technologies stands on the spectrum of

00:06:46.110 --> 00:06:47.990
abstraction and visualization.

00:06:49.210 --> 00:06:53.380
I sometimes like to thing of these technologies existing within

00:06:53.380 --> 00:06:55.860
a pyramid of abstraction.

00:06:55.860 --> 00:07:01.690
Think of the width of the level of the pyramid representing how flexible

00:07:01.690 --> 00:07:06.610
each of the technologies at that level are and the heighth of the pyramid.

00:07:06.610 --> 00:07:09.940
Is how easy it makes it to create visualizations and

00:07:09.940 --> 00:07:13.140
how much developer productivity they enable.

00:07:13.140 --> 00:07:17.170
At the bottom of the pyramid are technologies that have quite a lot of

00:07:17.170 --> 00:07:21.300
flexibility and offer a lot of games in performance and

00:07:21.300 --> 00:07:26.260
efficiency, but maybe very difficult to use, and slow to develop in.

00:07:26.260 --> 00:07:29.720
At the other end of the spectrum, and at the top of the pyramid.

00:07:29.720 --> 00:07:32.700
You have taken all these like Raw and Chartio.

00:07:32.700 --> 00:07:37.550
Which are very easy to use, allow you to develop visualizations very quickly.

00:07:37.550 --> 00:07:39.600
And iterate on those visualizations.

00:07:39.600 --> 00:07:44.610
But may be much less flexible than something like Web GL or D3.

00:07:44.610 --> 00:07:47.750
One thing you always have to consider as a developer,

00:07:47.750 --> 00:07:50.830
especially if you're working on a data science project.

00:07:50.830 --> 00:07:54.380
Where the entire scope of the project is much larger than just

00:07:54.380 --> 00:07:59.510
the visualization portion is the trade off between developed productivity and

00:07:59.510 --> 00:08:01.580
the efficiency of your solution.

00:08:01.580 --> 00:08:02.980
Due to recent trends and

00:08:02.980 --> 00:08:08.040
the performance improvements in the browser and of all technologies involved.

00:08:08.040 --> 00:08:13.190
And also in the abstractions created by higher level libraries, developers

00:08:13.190 --> 00:08:16.660
are quite fortunate and get something the best of the best of both worlds

00:08:16.660 --> 00:08:22.210
between very productive and having quite flexible and efficient libraries.

00:08:22.210 --> 00:08:24.820
Because of this, you can have your cake and

00:08:24.820 --> 00:08:29.170
eat it too than rather code in a high level library.

00:08:29.170 --> 00:08:33.220
And still get decent performance and flexibility, and while each of

00:08:33.220 --> 00:08:37.110
the many data visualization libraries out there have their strengths and

00:08:37.110 --> 00:08:42.679
weaknesses, in this class we will focus on the particular JavaScript library D3.

