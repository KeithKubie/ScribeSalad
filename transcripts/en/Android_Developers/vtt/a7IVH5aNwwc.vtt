WEBVTT
Kind: captions
Language: en

00:00:08.392 --> 00:00:09.350
ARTUR TSURKAN: Awesome.

00:00:09.350 --> 00:00:11.940
Good morning, everyone.

00:00:11.940 --> 00:00:12.920
My name is Artur.

00:00:12.920 --> 00:00:15.724
I'm a product manager
on Android system UI.

00:00:15.724 --> 00:00:16.640
MADY MELLOR: I'm Mady.

00:00:16.640 --> 00:00:18.617
I'm an engineer on
Android system UI.

00:00:18.617 --> 00:00:19.700
JASON MONK: And I'm Jason.

00:00:19.700 --> 00:00:21.454
I'm an engineer
on Android system.

00:00:21.454 --> 00:00:23.870
ARTUR TSURKAN: And we're here
to talk to you about Android

00:00:23.870 --> 00:00:26.630
slices and how you can use them
to build interactive results

00:00:26.630 --> 00:00:29.270
for Google search.

00:00:29.270 --> 00:00:30.800
So before we get
into the details,

00:00:30.800 --> 00:00:32.990
I wanted to start by
answering the question of what

00:00:32.990 --> 00:00:33.920
slices are?

00:00:33.920 --> 00:00:36.770
And at a high level, slices
are Android's new approach

00:00:36.770 --> 00:00:39.110
for remote content.

00:00:39.110 --> 00:00:42.090
There's a couple of
important aspects to this.

00:00:42.090 --> 00:00:44.252
The first is that
slices are templated.

00:00:44.252 --> 00:00:45.710
What we mean by
this is that we are

00:00:45.710 --> 00:00:48.380
going to provide you with
a flexible and rich mode

00:00:48.380 --> 00:00:51.800
of expressing your app that's
also predictable and dependable

00:00:51.800 --> 00:00:55.400
so that they can be presented
by a wide variety of surfaces.

00:00:55.400 --> 00:00:57.560
Slices are also interactive.

00:00:57.560 --> 00:00:59.900
These templates house
a variety of components

00:00:59.900 --> 00:01:02.480
to enable anything from
rich content previews

00:01:02.480 --> 00:01:05.250
to inline task completion.

00:01:05.250 --> 00:01:07.299
And also, slices are updateable.

00:01:07.299 --> 00:01:09.090
We're going to be able
to iterate much more

00:01:09.090 --> 00:01:11.280
quickly than the traditional
platform releases

00:01:11.280 --> 00:01:13.860
to enable new places for
these slices to appear

00:01:13.860 --> 00:01:17.440
and new types of slices for
you to express your app.

00:01:17.440 --> 00:01:19.630
Most importantly,
slices are backwards

00:01:19.630 --> 00:01:22.420
compatible all the way back
to Android Kit-Kat, which

00:01:22.420 --> 00:01:23.890
means that as they
launch, they're

00:01:23.890 --> 00:01:27.950
going to be available for
95% of Android devices.

00:01:27.950 --> 00:01:31.360
So let's dig into some of these
in a little bit more detail.

00:01:31.360 --> 00:01:33.280
When we say slices
are templated,

00:01:33.280 --> 00:01:35.560
we mean that we are providing
you with a rich layout

00:01:35.560 --> 00:01:39.820
and content system to enable a
wide variety of app use cases.

00:01:39.820 --> 00:01:42.060
These templates are
not plug and play.

00:01:42.060 --> 00:01:45.460
They're flexible
in that you define

00:01:45.460 --> 00:01:48.070
a wide variety of elements
and define them in a priority

00:01:48.070 --> 00:01:50.920
order, so to enable a
rich variety of ways

00:01:50.920 --> 00:01:52.420
to express your app.

00:01:52.420 --> 00:01:56.020
Anything from a weather
forecast to a reservation, music

00:01:56.020 --> 00:01:57.824
playlists to home automation.

00:01:57.824 --> 00:01:59.740
And Mady's going to go
into a lot more details

00:01:59.740 --> 00:02:02.400
on how you construct these.

00:02:02.400 --> 00:02:03.970
Slices are also interactive.

00:02:03.970 --> 00:02:05.890
They're not just static data.

00:02:05.890 --> 00:02:08.199
They can house a variety
of components, anything

00:02:08.199 --> 00:02:10.750
from real time data
fetched directly

00:02:10.750 --> 00:02:13.180
from the APK on
a user's device--

00:02:13.180 --> 00:02:15.850
for example, surfacing
the latest prices

00:02:15.850 --> 00:02:17.470
for ride sharing--

00:02:17.470 --> 00:02:20.590
as well as rich
controls, like actions,

00:02:20.590 --> 00:02:23.770
toggles, sliders, and
scrolling content,

00:02:23.770 --> 00:02:26.470
so that users can complete
the task inline right where

00:02:26.470 --> 00:02:30.490
the slice is being presented.

00:02:30.490 --> 00:02:32.610
Slices are bundled with Jetpack.

00:02:32.610 --> 00:02:35.220
That means that we can more
frequently expand and iterate

00:02:35.220 --> 00:02:36.180
slices.

00:02:36.180 --> 00:02:38.340
That means we can add
more presenting surfaces

00:02:38.340 --> 00:02:40.950
to expand your app's
reach, more templates

00:02:40.950 --> 00:02:43.020
to represent your
app's use cases,

00:02:43.020 --> 00:02:45.210
and more controls and
components to make

00:02:45.210 --> 00:02:48.690
those slices more engaging
and more powerful for users.

00:02:48.690 --> 00:02:51.060
Here's an example of a
potential new messaging template

00:02:51.060 --> 00:02:53.365
that we're exploring
for the future.

00:02:53.365 --> 00:02:55.740
So all this sounds pretty
great, but the really important

00:02:55.740 --> 00:02:57.198
question is, where
are slices going

00:02:57.198 --> 00:02:58.440
to be available for users?

00:02:58.440 --> 00:03:00.870
Where are we launching?

00:03:00.870 --> 00:03:03.840
This year, slices are
launching in search,

00:03:03.840 --> 00:03:07.500
where we're going to use slices
to enhance app predictions

00:03:07.500 --> 00:03:09.430
as the user is searching.

00:03:09.430 --> 00:03:11.580
There are going to be two
main use cases in terms

00:03:11.580 --> 00:03:13.450
of how slices will appear.

00:03:13.450 --> 00:03:15.090
The first is for app names.

00:03:15.090 --> 00:03:17.496
So as a user is searching
for the name of your app,

00:03:17.496 --> 00:03:18.870
we'll be able to
surface what you

00:03:18.870 --> 00:03:21.810
may call a canonical slice for
your app to help accelerate

00:03:21.810 --> 00:03:23.370
some sort of task.

00:03:23.370 --> 00:03:25.860
But we'll also support
general term searches,

00:03:25.860 --> 00:03:28.110
so that users are able to
search for an app deep link

00:03:28.110 --> 00:03:29.820
or a specific feature.

00:03:29.820 --> 00:03:33.360
And of course, because slices
are backwards compatible,

00:03:33.360 --> 00:03:34.860
when they start
appearing in search,

00:03:34.860 --> 00:03:36.859
you'll be able to reach
all hundreds of millions

00:03:36.859 --> 00:03:41.092
of users that are available
on Google search today.

00:03:41.092 --> 00:03:43.300
This is really important,
because with slices, you're

00:03:43.300 --> 00:03:46.600
going to be able to enable a
wide variety of really great

00:03:46.600 --> 00:03:49.720
use cases for folks on search.

00:03:49.720 --> 00:03:51.970
For example, here are a
couple of three buckets

00:03:51.970 --> 00:03:55.270
that we are liking to share
to get your juices flowing.

00:03:55.270 --> 00:03:57.034
The first is a
navigation use case.

00:03:57.034 --> 00:03:58.450
This is in the
sense that the user

00:03:58.450 --> 00:03:59.770
is searching for something
that they already

00:03:59.770 --> 00:04:00.812
know they want to get to.

00:04:00.812 --> 00:04:02.686
For example, the user
knows that they already

00:04:02.686 --> 00:04:03.940
want to get a ride home.

00:04:03.940 --> 00:04:06.430
Well, with slices, you
can use real time data

00:04:06.430 --> 00:04:09.130
to provide additional
context for that decision

00:04:09.130 --> 00:04:11.616
so that they know the price
and time to their destination.

00:04:11.616 --> 00:04:13.990
And they can just start thinking
about booking their ride

00:04:13.990 --> 00:04:16.029
right from the search results.

00:04:16.029 --> 00:04:18.635
They also enable
inline task completion.

00:04:18.635 --> 00:04:20.760
You might be able to use
those interactive controls

00:04:20.760 --> 00:04:23.391
I was referring to earlier,
so that apps like settings

00:04:23.391 --> 00:04:25.390
can enable users to quickly
search for a setting

00:04:25.390 --> 00:04:27.130
and toggle it inline.

00:04:27.130 --> 00:04:30.520
And finally, you can use slices
to enable recall and discover

00:04:30.520 --> 00:04:31.145
use cases.

00:04:31.145 --> 00:04:33.520
Users might be searching for
things that they didn't even

00:04:33.520 --> 00:04:35.510
realize is available
in your app,

00:04:35.510 --> 00:04:37.266
but because it's
installed on their device

00:04:37.266 --> 00:04:38.890
and that you can
surface slices for it,

00:04:38.890 --> 00:04:41.181
you might serendipitously
surface that content for them

00:04:41.181 --> 00:04:43.730
to explore.

00:04:43.730 --> 00:04:45.810
But this is only
just the beginning.

00:04:45.810 --> 00:04:47.840
Our goal with
slices is to enable

00:04:47.840 --> 00:04:51.532
one reusable API to generalize
remote content in Android.

00:04:51.532 --> 00:04:53.240
And different things
that we're exploring

00:04:53.240 --> 00:04:55.220
is trying to make
slices more tightly

00:04:55.220 --> 00:04:59.392
integrated into the system, as
well as more Google platforms.

00:04:59.392 --> 00:05:01.850
I'm going to hand it off to
Jason to talk a little bit more

00:05:01.850 --> 00:05:04.847
about slices' architecture.

00:05:04.847 --> 00:05:05.930
JASON MONK: Thanks, Artur.

00:05:05.930 --> 00:05:07.305
Well, in a minute
Matt he's going

00:05:07.305 --> 00:05:09.597
to walk you through actually
building your first slice,

00:05:09.597 --> 00:05:11.013
but before that I
want to give you

00:05:11.013 --> 00:05:12.770
a little bit of an
idea of how slices work

00:05:12.770 --> 00:05:15.500
and how they look
under the hood.

00:05:15.500 --> 00:05:18.320
So slices-- what a slice
actually is in terms

00:05:18.320 --> 00:05:20.430
of implementation--

00:05:20.430 --> 00:05:22.670
it's structured data.

00:05:22.670 --> 00:05:26.000
And that structured data
contains other slices, content,

00:05:26.000 --> 00:05:27.650
and presentational hints.

00:05:27.650 --> 00:05:29.960
And so one thing to note,
this is not actually

00:05:29.960 --> 00:05:30.870
code on the screen.

00:05:30.870 --> 00:05:32.650
I know it looks
kind of like a DSL.

00:05:32.650 --> 00:05:34.400
But this is really a
string representation

00:05:34.400 --> 00:05:36.400
of what you would construct
once you're actually

00:05:36.400 --> 00:05:37.420
done building a slice.

00:05:37.420 --> 00:05:39.170
There are a few things
that we extract out

00:05:39.170 --> 00:05:40.660
of this information.

00:05:40.660 --> 00:05:43.720
The structure that it has
determines the template.

00:05:43.720 --> 00:05:45.800
And like what we're
seeing, like this example

00:05:45.800 --> 00:05:49.730
of a horizontal weather slice.

00:05:49.730 --> 00:05:54.050
It also contains
the content itself--

00:05:54.050 --> 00:05:57.740
icons, text-- pending
intents for interactivity.

00:05:57.740 --> 00:05:59.960
And the other thing
to note is that this

00:05:59.960 --> 00:06:02.610
contains all of the data for
the slice, no matter the format.

00:06:02.610 --> 00:06:04.460
Mady's going to talk you
through all of the formats

00:06:04.460 --> 00:06:05.834
that we have for
slices right now

00:06:05.834 --> 00:06:08.016
and how we may add more
in the future, too.

00:06:08.016 --> 00:06:11.350
But a single slice that
you return in your app

00:06:11.350 --> 00:06:13.070
will actually hold
all of the formats.

00:06:13.070 --> 00:06:15.260
And so on the right,
we have a short version

00:06:15.260 --> 00:06:16.670
of that same slice.

00:06:16.670 --> 00:06:18.980
And that is using
the exact same data

00:06:18.980 --> 00:06:21.870
to present in a
different format.

00:06:21.870 --> 00:06:25.700
All right, so how does apps
actually get a hold of slices

00:06:25.700 --> 00:06:27.140
from your app?

00:06:27.140 --> 00:06:29.990
So slices sit on top
of content providers.

00:06:29.990 --> 00:06:32.062
Slice provider extends
a content provider.

00:06:32.062 --> 00:06:34.520
Don't worry, we try to hide as
much of the content provider

00:06:34.520 --> 00:06:35.830
as possible for you.

00:06:35.830 --> 00:06:38.330
But there are a few really nice
things that come out of this

00:06:38.330 --> 00:06:40.550
is that they are based on
top of content URIs, which

00:06:40.550 --> 00:06:43.310
means you can have a wide
variety of slices hosted

00:06:43.310 --> 00:06:45.140
from your app.

00:06:45.140 --> 00:06:47.200
And when an app wants
to show your slice,

00:06:47.200 --> 00:06:48.950
you'll get a callback
to [INAUDIBLE] slice

00:06:48.950 --> 00:06:50.408
and you'll get a
URI and you'll get

00:06:50.408 --> 00:06:53.720
to decide what content you
want to connect to that URI

00:06:53.720 --> 00:06:56.552
and return it in that slice
that I just showed you.

00:06:56.552 --> 00:06:58.760
But then they're interactive,
so you need to actually

00:06:58.760 --> 00:06:59.719
be able to update that.

00:06:59.719 --> 00:07:01.884
And the way that works is
through a notified change.

00:07:01.884 --> 00:07:04.160
You send a standard content
provider notify change

00:07:04.160 --> 00:07:05.510
on your slice URI.

00:07:05.510 --> 00:07:07.010
And whoever is
presenting your slice

00:07:07.010 --> 00:07:08.450
will know that it's
time to update,

00:07:08.450 --> 00:07:09.710
and they'll give you
another callback.

00:07:09.710 --> 00:07:11.180
And you can return
different data

00:07:11.180 --> 00:07:13.640
that is dynamic and
changes in response

00:07:13.640 --> 00:07:15.562
to whatever has happened.

00:07:15.562 --> 00:07:17.270
All right, now, I'm
going to hand it over

00:07:17.270 --> 00:07:19.311
to Mady, who's going to
walk you through building

00:07:19.311 --> 00:07:21.170
your first slice.

00:07:21.170 --> 00:07:25.140
MADY MELLOR: Thanks, Jason, for
that architectural overview.

00:07:25.140 --> 00:07:29.690
I'm going to walk you through
an app creating this Wi-Fi slice

00:07:29.690 --> 00:07:34.490
today, so we're going to
build a SliceProvider that

00:07:34.490 --> 00:07:38.550
provides this Wi-Fi slice
that has this toggle.

00:07:38.550 --> 00:07:41.740
And tapping the toggle
will turn Wi-Fi on and off.

00:07:41.740 --> 00:07:43.500
And then the connected
state will change

00:07:43.500 --> 00:07:46.552
based on the Wi-Fi state.

00:07:46.552 --> 00:07:48.010
So the first thing
you've got to do

00:07:48.010 --> 00:07:51.070
is define the SliceProvider
in your Android manifest.

00:07:51.070 --> 00:07:53.200
As Jason mentioned,
slices are built

00:07:53.200 --> 00:07:54.370
on top of content providers.

00:07:54.370 --> 00:07:55.900
So similar to a
content provider,

00:07:55.900 --> 00:07:57.190
you've got to define it here.

00:07:57.190 --> 00:08:01.595
This lets the operating system
be able to find your slices.

00:08:04.310 --> 00:08:08.570
Then you have to implement
your SliceProvider.

00:08:08.570 --> 00:08:11.370
This SliceProvider handles
multiple slices here.

00:08:11.370 --> 00:08:13.760
So we have a Wi-Fi
slice, an alarm slice,

00:08:13.760 --> 00:08:15.530
and a nightlight slice.

00:08:15.530 --> 00:08:19.190
So what will happen
when something is

00:08:19.190 --> 00:08:21.080
trying to display your slice?

00:08:21.080 --> 00:08:25.090
You might type in Wi-Fi
into Google search,

00:08:25.090 --> 00:08:27.050
and it's going to do
some ranking stuff.

00:08:27.050 --> 00:08:31.470
But Jason will go into
some details later.

00:08:31.470 --> 00:08:35.600
And it'll map that search
term to a content URI.

00:08:35.600 --> 00:08:40.850
And in our case, that content
URI will be this Wi-Fi path.

00:08:40.850 --> 00:08:43.679
Based on that, we're going
to build a Wi-Fi slice.

00:08:43.679 --> 00:08:47.550
So we'll jump into this method.

00:08:47.550 --> 00:08:49.350
Slices start with list builders.

00:08:49.350 --> 00:08:51.320
So list builder
accepts different kinds

00:08:51.320 --> 00:08:52.590
of rows of content.

00:08:52.590 --> 00:08:54.120
This Wi-Fi slice
is fairly simple.

00:08:54.120 --> 00:08:55.430
It's a single row.

00:08:55.430 --> 00:08:57.920
So we first start
with our list builder.

00:08:57.920 --> 00:09:00.180
We build a row builder
based off of it.

00:09:00.180 --> 00:09:02.806
We had the Wi-Fi title.

00:09:02.806 --> 00:09:04.430
And then we kind of
do this weird thing

00:09:04.430 --> 00:09:06.430
where we check if
Wi-Fi state is loaded.

00:09:06.430 --> 00:09:08.780
Maybe it takes some
time for us to determine

00:09:08.780 --> 00:09:10.670
whether Wi-Fi is
connected or not

00:09:10.670 --> 00:09:13.070
and we need to do that
in the background.

00:09:13.070 --> 00:09:15.020
In the meantime,
we're still going

00:09:15.020 --> 00:09:19.580
to return a slice with the
content we intend to display,

00:09:19.580 --> 00:09:22.560
but we kind of note that
this content is loading.

00:09:22.560 --> 00:09:26.819
So the toggle-- we
don't know the state.

00:09:26.819 --> 00:09:29.360
And the connected text, we don't
know whether we're connected

00:09:29.360 --> 00:09:29.859
or not.

00:09:29.859 --> 00:09:33.080
So these two pieces, we need
to indicate that they're

00:09:33.080 --> 00:09:34.031
going to be loaded.

00:09:34.031 --> 00:09:36.530
We do that just by passing null
and a Boolean on the builder

00:09:36.530 --> 00:09:38.090
methods.

00:09:38.090 --> 00:09:44.620
We then add that row to the list
builder and we build the slice.

00:09:44.620 --> 00:09:49.130
So meanwhile, our Wi-Fi
state has been loading.

00:09:49.130 --> 00:09:52.070
Maybe when this is done,
we got a call back to

00:09:52.070 --> 00:09:53.660
on Wi-Fi state loaded.

00:09:53.660 --> 00:09:55.900
We flip our flag.

00:09:55.900 --> 00:09:59.160
And now, we need to let
the UI know to update.

00:09:59.160 --> 00:10:03.230
So our Wi-Fi slice is
being displayed somewhere.

00:10:03.230 --> 00:10:07.410
And it is our sad little loading
state with just the Wi-Fi text.

00:10:07.410 --> 00:10:10.070
So we need to let it know to
update to get that subtitle

00:10:10.070 --> 00:10:11.630
string and the
toggle action and we

00:10:11.630 --> 00:10:14.750
do that with
ContentResolver, notifyChange

00:10:14.750 --> 00:10:18.510
on the full content
URI for that slice.

00:10:18.510 --> 00:10:21.600
So you'll get a call
to unbindSlice again.

00:10:21.600 --> 00:10:24.640
It will be the same Wi-Fi URI.

00:10:24.640 --> 00:10:28.270
You'll walk into your
buildWifiSlice method.

00:10:28.270 --> 00:10:30.800
And this time, our
Wi-Fi stays loaded

00:10:30.800 --> 00:10:33.340
so we can check whether
we're connected or not,

00:10:33.340 --> 00:10:38.620
set that subtitle text, and
create our toggle action.

00:10:38.620 --> 00:10:42.790
So this getWifiToggleAction is
going to create a slice action.

00:10:42.790 --> 00:10:48.160
This is how we represent
actions and slices.

00:10:48.160 --> 00:10:51.460
So the slice action basically
wraps the pending intent

00:10:51.460 --> 00:10:53.260
and then takes some
extra information

00:10:53.260 --> 00:10:55.540
to represent the action.

00:10:55.540 --> 00:10:58.810
In our case, we want to
respond to someone tapping

00:10:58.810 --> 00:11:03.280
on the toggle, so we need
to have a broadcast receiver

00:11:03.280 --> 00:11:06.580
to receive that pending
intent and do some stuff

00:11:06.580 --> 00:11:10.010
to update Wi-Fi state.

00:11:10.010 --> 00:11:12.620
So we build our slice
action with that intent,

00:11:12.620 --> 00:11:16.750
a label describing the action,
and then a Boolean value

00:11:16.750 --> 00:11:20.930
representing whether
this toggle is on or off.

00:11:20.930 --> 00:11:24.730
So in our case, the Wi-Fi state.

00:11:24.730 --> 00:11:29.050
So when you tap on that toggle,
that pending intent gets sent.

00:11:29.050 --> 00:11:33.040
You'll define a broadcast
receiver for your app

00:11:33.040 --> 00:11:35.950
to handle this intent.

00:11:35.950 --> 00:11:39.760
In our case, we need Wi-Fi
manager to update Wi-Fi state.

00:11:39.760 --> 00:11:44.010
Something neat that slices
does for toggles is--

00:11:44.010 --> 00:11:48.040
so if the Wi-Fi was on,
I tap on that toggle,

00:11:48.040 --> 00:11:49.900
that pending intent
gets sent, we'll

00:11:49.900 --> 00:11:53.470
attach the resulting state of
the toggle, this extra toggle

00:11:53.470 --> 00:11:55.540
state, to that
intent so that you

00:11:55.540 --> 00:12:00.790
can retrieve it and know what
the new state of the toggle is.

00:12:00.790 --> 00:12:02.890
We'll use that to
update the Wi-Fi.

00:12:02.890 --> 00:12:05.300
And then we're going to
notify our content URI,

00:12:05.300 --> 00:12:08.860
so that any Wi-Fi
slices being displayed

00:12:08.860 --> 00:12:11.630
know to update because
Wi-Fi state has changed.

00:12:14.560 --> 00:12:17.430
So how do you test these?

00:12:17.430 --> 00:12:20.790
Right now, we've got this
great tool slice viewer.

00:12:20.790 --> 00:12:24.210
It allows you to input your
content URIs for your slices,

00:12:24.210 --> 00:12:25.950
and then you can
preview your slice.

00:12:25.950 --> 00:12:28.460
It'll display the slices
in different modes.

00:12:28.460 --> 00:12:31.620
So as Jason mentioned, we
had that shortcut and then

00:12:31.620 --> 00:12:33.130
larger templates.

00:12:33.130 --> 00:12:37.590
So this tool will allow you to
exercise those different modes

00:12:37.590 --> 00:12:39.450
that slices support.

00:12:39.450 --> 00:12:41.700
And the getting
started guide is great.

00:12:41.700 --> 00:12:44.940
I'd highly recommend it.

00:12:44.940 --> 00:12:48.030
So that's kind of the summary
of creating a slice from an app.

00:12:48.030 --> 00:12:50.340
You have your SliceProvider
in your manifest.

00:12:50.340 --> 00:12:51.660
You implement it.

00:12:51.660 --> 00:12:56.640
You map your content URIs
to the different slices

00:12:56.640 --> 00:12:58.050
that your app supports.

00:12:58.050 --> 00:13:01.500
And then you build them
and handle any events.

00:13:01.500 --> 00:13:03.580
And of course, test.

00:13:03.580 --> 00:13:07.100
OK, templates.

00:13:07.100 --> 00:13:10.400
Slices has a really
great templating system.

00:13:10.400 --> 00:13:11.650
We think it's pretty flexible.

00:13:11.650 --> 00:13:15.220
And we hope that it'll be able
to support many of your app use

00:13:15.220 --> 00:13:16.840
cases.

00:13:16.840 --> 00:13:20.240
This is an overview of the
different row types we support.

00:13:20.240 --> 00:13:22.840
So as I mentioned, everything
starts with list builder.

00:13:22.840 --> 00:13:25.480
And list builder, you
attach different rows to it.

00:13:25.480 --> 00:13:30.640
So this slide sort of shows the
different rows that we support.

00:13:30.640 --> 00:13:35.110
And you see text, toggle,
sliders, progress bars,

00:13:35.110 --> 00:13:37.390
different kinds of
grid layouts, and these

00:13:37.390 --> 00:13:38.510
are all kind of flexible.

00:13:38.510 --> 00:13:41.342
So nothing is enforcing
requirements of content,

00:13:41.342 --> 00:13:43.550
so you can kind of pick and
choose how you use these.

00:13:46.480 --> 00:13:50.600
So as mentioned, you add
these to list builder

00:13:50.600 --> 00:13:52.360
and you can kind of
see in these layouts

00:13:52.360 --> 00:13:56.620
how you can express your app
uniquely with the system.

00:13:56.620 --> 00:13:59.560
So Wi-Fi slice here is composed
of just different types

00:13:59.560 --> 00:14:01.930
of rows, supports
the toggle, it can

00:14:01.930 --> 00:14:04.030
do a list of Wi-Fi networks.

00:14:04.030 --> 00:14:07.600
Our reservation slice for
your upcoming trip in Seattle

00:14:07.600 --> 00:14:09.100
gives you the
important information,

00:14:09.100 --> 00:14:11.770
gives you a preview
of your rental,

00:14:11.770 --> 00:14:13.840
and then check in,
checkout locations

00:14:13.840 --> 00:14:19.450
using a big picture and then
a grid layout with two cells.

00:14:19.450 --> 00:14:20.800
And then our music slice--

00:14:20.800 --> 00:14:21.910
it's interactive.

00:14:21.910 --> 00:14:23.440
You can favorite things.

00:14:23.440 --> 00:14:25.180
You can control
your music from it.

00:14:25.180 --> 00:14:27.220
It's scrollable.

00:14:27.220 --> 00:14:29.590
So I hope that you can
see how your app use

00:14:29.590 --> 00:14:34.680
cases could be represented
in our template system.

00:14:34.680 --> 00:14:35.990
So multiple formats.

00:14:35.990 --> 00:14:39.010
As Jason mentioned,
you provide a slice

00:14:39.010 --> 00:14:41.890
with all of the data
we need to present

00:14:41.890 --> 00:14:43.420
in these different formats.

00:14:43.420 --> 00:14:46.570
We want slices to be able
to move across the operating

00:14:46.570 --> 00:14:48.430
system in different spaces.

00:14:48.430 --> 00:14:52.250
And they might need to shift
their form based on that.

00:14:52.250 --> 00:14:54.010
So we're supporting
a short cut form,

00:14:54.010 --> 00:14:58.120
which is just a small tappable
icon, a small slice, which

00:14:58.120 --> 00:15:00.700
is the first row of
your slice generally,

00:15:00.700 --> 00:15:03.720
and then a large slice,
which is all of the content.

00:15:03.720 --> 00:15:05.970
So when you're building your
slice, keep that in mind.

00:15:05.970 --> 00:15:07.553
Make sure you test
the different modes

00:15:07.553 --> 00:15:09.820
so that the slice
displays how you

00:15:09.820 --> 00:15:14.260
expect it to in these formats.

00:15:14.260 --> 00:15:18.420
Things presenting slices
can also customize them.

00:15:18.420 --> 00:15:22.060
So they've got some flexibility
with increasing font size,

00:15:22.060 --> 00:15:24.880
changing the font style,
and maybe overriding

00:15:24.880 --> 00:15:26.260
any colors that you set.

00:15:26.260 --> 00:15:29.920
Because we want slices to sort
of feel at home in the surface

00:15:29.920 --> 00:15:32.980
that they're being presented in.

00:15:32.980 --> 00:15:35.180
So I'm going to walk
you through an example

00:15:35.180 --> 00:15:38.450
to build this home slice,
which allows you to control

00:15:38.450 --> 00:15:41.980
your temperature and see the
many video cameras that you

00:15:41.980 --> 00:15:42.980
might have in your home.

00:15:46.230 --> 00:15:48.940
So again, starts with
the list builder.

00:15:48.940 --> 00:15:50.904
Here, we're defining
two slice actions

00:15:50.904 --> 00:15:53.320
for turning the temperature
up and turning the temperature

00:15:53.320 --> 00:15:54.800
down.

00:15:54.800 --> 00:15:58.600
These just take a pending
intent, icon compat,

00:15:58.600 --> 00:16:00.310
and then a label.

00:16:00.310 --> 00:16:03.430
We create our row, we set
our title and subtitle,

00:16:03.430 --> 00:16:07.480
add the two actions,
add the row to the list,

00:16:07.480 --> 00:16:11.350
and then we've got that
top part of the slice.

00:16:11.350 --> 00:16:14.080
So we'll do the second part now.

00:16:14.080 --> 00:16:15.700
The camera snapshots.

00:16:15.700 --> 00:16:18.490
Maybe we'll get
our data for this.

00:16:18.490 --> 00:16:22.480
This is a grid row, so we'll
define a grid row builder.

00:16:22.480 --> 00:16:24.390
And then for each
of the data elements

00:16:24.390 --> 00:16:26.170
we're displaying in
these cells, we'll

00:16:26.170 --> 00:16:27.730
add a cell to the grid builder.

00:16:27.730 --> 00:16:31.180
And the cell will take an
image, title text, and text.

00:16:31.180 --> 00:16:32.907
And these are
displayed in the order

00:16:32.907 --> 00:16:34.490
that you add them
to the cell builder.

00:16:34.490 --> 00:16:36.250
So if you want to
mix them up, they

00:16:36.250 --> 00:16:38.380
don't need to be
image, text, text.

00:16:38.380 --> 00:16:43.180
It could be text, image,
text, so again, it's flexible.

00:16:43.180 --> 00:16:45.160
Add that grid row to the list.

00:16:45.160 --> 00:16:48.520
And then you've
built your slice.

00:16:48.520 --> 00:16:50.710
And Jason is going
to take it away

00:16:50.710 --> 00:16:53.860
to describe how you can
get these slices appearing

00:16:53.860 --> 00:16:55.870
in Google search.

00:16:55.870 --> 00:16:56.920
JASON MONK: Thanks, Mady.

00:16:56.920 --> 00:16:58.420
All right, so like
Artur said, we've

00:16:58.420 --> 00:17:01.640
got two cases that we're
talking about for Google search.

00:17:01.640 --> 00:17:03.640
These are both showing
up in predictions.

00:17:03.640 --> 00:17:06.854
So you can tap on the search
bar, type a few characters,

00:17:06.854 --> 00:17:08.770
and the user will be
interacting with your app

00:17:08.770 --> 00:17:11.025
basically at that point.

00:17:11.025 --> 00:17:12.919
One thing to note,
this is only for apps

00:17:12.919 --> 00:17:13.960
installed on your device.

00:17:13.960 --> 00:17:16.126
We aren't currently doing
anything with instant apps

00:17:16.126 --> 00:17:17.384
or stuff from the cloud.

00:17:17.384 --> 00:17:19.550
And these next few slides
are really just a preview.

00:17:19.550 --> 00:17:21.799
We're going to be launching
all sorts of documentation

00:17:21.799 --> 00:17:24.521
when we officially ship
this later this summer.

00:17:24.521 --> 00:17:26.020
All right, so let's
talk through how

00:17:26.020 --> 00:17:27.677
you do this for an app name.

00:17:27.677 --> 00:17:30.010
There are two things you
really need to do in this case.

00:17:30.010 --> 00:17:32.720
You need to link a specific
slice to your main activity

00:17:32.720 --> 00:17:33.220
of your app.

00:17:33.220 --> 00:17:34.594
That's the activity
that shows up

00:17:34.594 --> 00:17:38.260
in launcher and the
activity with the name

00:17:38.260 --> 00:17:39.700
that users will search for.

00:17:39.700 --> 00:17:41.990
And you need to grant
some permissions.

00:17:41.990 --> 00:17:44.840
So linking the activity is
actually really, really simple.

00:17:44.840 --> 00:17:48.400
You just add one piece of
metadata into your manifest.

00:17:48.400 --> 00:17:50.560
And that metadata
points at any slice

00:17:50.560 --> 00:17:52.760
URI you want within your app.

00:17:52.760 --> 00:17:55.090
And that's the URI
that you can expect

00:17:55.090 --> 00:17:59.086
to get bound when the users
type in the name of your app.

00:17:59.086 --> 00:18:01.210
You also need to grant
these permissions explicitly

00:18:01.210 --> 00:18:04.720
to search and play
services, so that it

00:18:04.720 --> 00:18:08.930
has access to read your slice
and display it properly.

00:18:08.930 --> 00:18:11.832
We'll talk a bit more about
permissions in a little bit.

00:18:11.832 --> 00:18:13.540
But these are basically
the lines of code

00:18:13.540 --> 00:18:18.490
you need to do for a default
slice or an app slice.

00:18:18.490 --> 00:18:22.900
OK, so the bit more broad
range of general terms--

00:18:22.900 --> 00:18:26.492
this is a little bit
more complicated.

00:18:26.492 --> 00:18:28.450
Another thing to note is
that ranking may vary,

00:18:28.450 --> 00:18:31.330
is that search is going to try
to present whatever content is

00:18:31.330 --> 00:18:34.120
best for the user, and
so you can't always

00:18:34.120 --> 00:18:36.650
guarantee that your app
is going to be shown.

00:18:36.650 --> 00:18:39.250
But that can be enhanced
with a bit of usage reporting

00:18:39.250 --> 00:18:41.120
and stuff like that.

00:18:41.120 --> 00:18:43.120
There are a few things
you need to do here.

00:18:43.120 --> 00:18:45.370
This is based on top of
Firebase app indexing, which

00:18:45.370 --> 00:18:47.076
is existing APIs.

00:18:47.076 --> 00:18:48.200
You can go read about them.

00:18:48.200 --> 00:18:50.320
We've got a link
on the next slide.

00:18:50.320 --> 00:18:53.440
And you tie those Firebase
app indexing content directly

00:18:53.440 --> 00:18:54.310
to a slice.

00:18:54.310 --> 00:18:56.320
And so that will
let search you know

00:18:56.320 --> 00:18:59.770
when it triggers that app
indexable that it should

00:18:59.770 --> 00:19:02.700
be showing a slice for that.

00:19:02.700 --> 00:19:04.160
So the way you do
that is, when you

00:19:04.160 --> 00:19:05.910
are pushing your
app indexable, there

00:19:05.910 --> 00:19:07.500
is some metadata you can tag.

00:19:07.500 --> 00:19:10.290
There's new APIs on
app indexing that

00:19:10.290 --> 00:19:12.150
will be launched
with this, which will

00:19:12.150 --> 00:19:14.949
let you specify your slice URI.

00:19:14.949 --> 00:19:17.490
Another piece of this is that
there's a little bit of content

00:19:17.490 --> 00:19:18.120
validation.

00:19:18.120 --> 00:19:20.610
So when you're
doing app indexing,

00:19:20.610 --> 00:19:22.830
you need to specify
a content URL.

00:19:22.830 --> 00:19:26.009
And that content you needs
to map to the same slice

00:19:26.009 --> 00:19:27.550
that you're specifying
with your app.

00:19:27.550 --> 00:19:30.150
It's just a linking
sort of system

00:19:30.150 --> 00:19:32.784
to verify that you've got
the right content showing.

00:19:32.784 --> 00:19:34.200
And so the way
that works is there

00:19:34.200 --> 00:19:35.449
are two things you need to do.

00:19:35.449 --> 00:19:39.212
One is you need to add an
intent filter to your provider.

00:19:39.212 --> 00:19:40.920
These have been
supported, but are rarely

00:19:40.920 --> 00:19:43.350
used in Android for some time.

00:19:43.350 --> 00:19:45.290
These look very
similar to app linking,

00:19:45.290 --> 00:19:47.790
if you're familiar with verified
app linking or app linking,

00:19:47.790 --> 00:19:49.550
this will look pretty
similar to you.

00:19:49.550 --> 00:19:50.970
This intent filter
is an example.

00:19:50.970 --> 00:19:56.820
It's looking for anything on
https:example.com/anything.

00:19:56.820 --> 00:19:58.930
If you don't have app
linking set up for your app,

00:19:58.930 --> 00:20:00.270
you can do your own URL schemes.

00:20:00.270 --> 00:20:01.770
Like in the settings
app in Android,

00:20:01.770 --> 00:20:03.330
we're doing settings://--

00:20:03.330 --> 00:20:05.010
whatever-- for our deep links.

00:20:05.010 --> 00:20:07.065
And that's our URL scheme.

00:20:07.065 --> 00:20:08.670
The other thing you
do is, once you've

00:20:08.670 --> 00:20:11.877
added an intent filter
for your provider,

00:20:11.877 --> 00:20:14.460
you can expect that you're going
to get calls to on map intent

00:20:14.460 --> 00:20:15.570
to URI.

00:20:15.570 --> 00:20:19.680
This lets your app say, I've
got some incoming intent data.

00:20:19.680 --> 00:20:21.300
And intents are kind of squishy.

00:20:21.300 --> 00:20:23.970
Intents aren't as
defined as a URI.

00:20:23.970 --> 00:20:25.650
And this gives you
the moment to say,

00:20:25.650 --> 00:20:27.108
here, I'm going to
take this intent

00:20:27.108 --> 00:20:28.980
and I'm going to resolve
it to an exact URI

00:20:28.980 --> 00:20:30.870
and this is the
slice I want to show.

00:20:30.870 --> 00:20:33.960
And so you can do whatever
you want within this function

00:20:33.960 --> 00:20:35.970
to determine your path.

00:20:35.970 --> 00:20:38.610
In this case, it's just kind
of like taking the data off

00:20:38.610 --> 00:20:41.910
from the intent and pushing
it over to authority,

00:20:41.910 --> 00:20:43.890
which is a slice provider.

00:20:43.890 --> 00:20:46.740
But you can add your own
logic of your own kind.

00:20:46.740 --> 00:20:48.180
And that's how you add those.

00:20:48.180 --> 00:20:50.440
All right, so that's
kind of a whirlwind tour.

00:20:50.440 --> 00:20:50.940
I know.

00:20:50.940 --> 00:20:53.550
We'll be launching more docs
with that when we officially

00:20:53.550 --> 00:20:54.960
launch search.

00:20:54.960 --> 00:20:57.330
Now, hopefully, your
slices are holding

00:20:57.330 --> 00:20:58.919
all sorts of really
great content

00:20:58.919 --> 00:21:01.210
and you don't want to expose
that content to the world.

00:21:01.210 --> 00:21:02.751
So you probably
really care about how

00:21:02.751 --> 00:21:04.030
the permissions work here.

00:21:04.030 --> 00:21:05.700
So there are three
ways that an app

00:21:05.700 --> 00:21:08.481
can get a hold of
permissions for your slice.

00:21:08.481 --> 00:21:10.730
The first is you get fine
grained permission controls.

00:21:10.730 --> 00:21:12.540
These are very similar
to URI permissions,

00:21:12.540 --> 00:21:14.100
except we designed
them to scale up,

00:21:14.100 --> 00:21:17.790
because we expect people to
have a lot of slices over time.

00:21:17.790 --> 00:21:19.260
These happen
automatically for you

00:21:19.260 --> 00:21:21.180
if you're using the
Firebase app indexing API,

00:21:21.180 --> 00:21:22.263
as we just told you about.

00:21:22.263 --> 00:21:24.480
We'll do those permission
grants for you.

00:21:24.480 --> 00:21:25.980
You notice in the
default app slice,

00:21:25.980 --> 00:21:27.450
you didn't have
that Firebase app

00:21:27.450 --> 00:21:29.074
indexing, which is
why you had to grant

00:21:29.074 --> 00:21:30.256
the permissions yourself.

00:21:30.256 --> 00:21:32.130
The second case that is
different about these

00:21:32.130 --> 00:21:35.190
from URI permissions is that
the user can grant permission.

00:21:35.190 --> 00:21:39.780
When an app doesn't have
permission to show your slices,

00:21:39.780 --> 00:21:42.800
the system will return what
we call a permission slice.

00:21:42.800 --> 00:21:45.460
And it looks something like this
on the right, where it says,

00:21:45.460 --> 00:21:48.510
hey, this app's trying to
show slices from someone else.

00:21:48.510 --> 00:21:50.739
And the user can actually
explicitly grant.

00:21:50.739 --> 00:21:53.280
And the third case of where apps
can get slice permissions is

00:21:53.280 --> 00:21:56.400
that on P+, we're autogranting
permission to launcher

00:21:56.400 --> 00:22:00.450
and the assistant to really
be able to do seamless kind

00:22:00.450 --> 00:22:04.540
of slice integrations
in the future.

00:22:04.540 --> 00:22:07.130
And so if the user clicks
on that permissions

00:22:07.130 --> 00:22:10.020
slice that I mentioned,
they're going to see a dialogue

00:22:10.020 --> 00:22:12.105
and they can choose either
to grant permissions

00:22:12.105 --> 00:22:13.980
or not to grant permissions,
try to give them

00:22:13.980 --> 00:22:15.630
some transparency as
to what's going on

00:22:15.630 --> 00:22:17.520
and how they're exposing
data from your app.

00:22:20.080 --> 00:22:21.917
So how does this work for you?

00:22:21.917 --> 00:22:24.000
The way it works for you
is that you should extend

00:22:24.000 --> 00:22:25.499
slice provider,
because you're going

00:22:25.499 --> 00:22:26.650
to need to for everything.

00:22:26.650 --> 00:22:28.740
And slice provider is going to
handle all of this permission

00:22:28.740 --> 00:22:29.448
checking for you.

00:22:29.448 --> 00:22:30.630
It's going to do all of it.

00:22:30.630 --> 00:22:32.910
Please don't add
Android:permission

00:22:32.910 --> 00:22:36.480
to your providers as you're
used to in your manifest.

00:22:36.480 --> 00:22:38.310
That's going to
break everything.

00:22:38.310 --> 00:22:40.856
And also, if you have a
really, really sensitive data,

00:22:40.856 --> 00:22:43.230
if you're something like a
banking app and you feel like,

00:22:43.230 --> 00:22:47.580
oh, no, users could really,
really shoot themselves

00:22:47.580 --> 00:22:50.700
in the foot here, you can
override onCreate permission

00:22:50.700 --> 00:22:55.620
request, and that will let
you disable the user grant

00:22:55.620 --> 00:22:57.700
and redirect them to
some other dialogue.

00:22:57.700 --> 00:23:02.429
You can have your own sort of
flow there to ensure privacy.

00:23:02.429 --> 00:23:04.470
All right, and I'm going
to pass it back to Artur

00:23:04.470 --> 00:23:07.044
to wrap things up.

00:23:07.044 --> 00:23:08.460
ARTUR TSURKAN: Awesome.

00:23:08.460 --> 00:23:10.517
So that was a lot
of information.

00:23:10.517 --> 00:23:12.100
If you're interested
in learning more,

00:23:12.100 --> 00:23:15.117
please go to this short
link, g.co/Slices.

00:23:15.117 --> 00:23:16.950
In here is everything
related to our getting

00:23:16.950 --> 00:23:19.680
started guide, as well as
links to use and download

00:23:19.680 --> 00:23:22.326
the slices viewer,
building your first slice,

00:23:22.326 --> 00:23:23.700
and all the details
that you need

00:23:23.700 --> 00:23:26.760
to know about creating all the
rich templates that Mady talked

00:23:26.760 --> 00:23:27.770
about.

00:23:27.770 --> 00:23:30.387
We'll also be available today
and tomorrow at office hours.

00:23:30.387 --> 00:23:32.220
That will be posted on
our thank you slides,

00:23:32.220 --> 00:23:33.900
as well as the
Android sandbox if you

00:23:33.900 --> 00:23:36.155
have any direct questions.

00:23:36.155 --> 00:23:38.280
We also want to hear from
you, so please go to this

00:23:38.280 --> 00:23:41.520
google.com/io/scheduling
to provide feedback on this

00:23:41.520 --> 00:23:42.900
session.

00:23:42.900 --> 00:23:44.550
But thank you all,
again, so much

00:23:44.550 --> 00:23:46.560
for coming in the wee
hours of the morning

00:23:46.560 --> 00:23:48.750
and hearing us
talk about slices.

00:23:48.750 --> 00:23:51.720
As well, again, you can
follow these follow-up actions

00:23:51.720 --> 00:23:52.634
to learn more.

00:23:52.634 --> 00:23:54.300
We also have a bit
of time for questions

00:23:54.300 --> 00:23:57.364
right now if anyone has anything
burning that they want to ask.

00:23:57.364 --> 00:23:59.548
[MUSIC PLAYING]

