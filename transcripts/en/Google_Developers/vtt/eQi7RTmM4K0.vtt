WEBVTT
Kind: captions
Language: en

00:00:11.640 --> 00:00:13.098
Hello, and good afternoon.

00:00:13.098 --> 00:00:14.518
My name is Evin Levey.

00:00:15.198 --> 00:00:18.558
I'm a Product Manager at Google
for Google Apps script and

00:00:18.558 --> 00:00:21.378
today we're going to be talking
about scripting Google Apps for

00:00:21.378 --> 00:00:26.218
business process automation.

00:00:26.218 --> 00:00:30.178
And we're going to do a live
wave of this talk, same as

00:00:30.178 --> 00:00:31.960
all the others and this
is the bit.ly link.

00:00:32.898 --> 00:00:37.468
I should point out that that's
a three O 4D, and you can save

00:00:37.468 --> 00:00:40.038
yourselves 20 minutes trying to
figure out why the link

00:00:40.038 --> 00:00:45.920
doesn't work if you know
that's the capital O.
12
00:00:45,92 --&gt; 00:00:45,24
So, maybe I'd ask for
quick show of hands.

00:00:45.240 --> 00:00:51.600
Anyone can tell me if they've
used Apps Script before?

00:00:51.600 --> 00:00:55.060
OK, so quite a few people and
folks maybe who don't know what

00:00:55.060 --> 00:00:59.604
Apps Script is, if you can
-- OK, only one or

00:00:59.604 --> 00:01:00.880
two, that's good.

00:01:00.880 --> 00:01:04.500
All right, so Google Apps
Script is really about

00:01:04.500 --> 00:01:06.680
business process automation.

00:01:06.680 --> 00:01:08.320
That's what we're going
to talk about today.

00:01:08.320 --> 00:01:12.148
It customizes and extends
Google Apps, and really its a

00:01:12.148 --> 00:01:16.560
Cloud scripting language and
so all code runs server side.

00:01:16.560 --> 00:01:19.400
And that can be a little bit
confusing for some, because its

00:01:19.400 --> 00:01:22.280
actually Javascript that we're
using as a language, but it

00:01:22.280 --> 00:01:26.040
runs on Google servers, and
there's nothing happening

00:01:26.040 --> 00:01:29.600
in your browser.

00:01:29.600 --> 00:01:31.400
So, the agenda for today.

00:01:31.400 --> 00:01:34.260
First off, we're going to
talk about the Book of Bob.

00:01:34.260 --> 00:01:36.280
We're going to make
introductions.

00:01:36.280 --> 00:01:40.520
We're going to talk about the
fundamentals of App Scripts and

00:01:40.520 --> 00:01:42.620
we're going to talk about
events and interoperability

00:01:42.620 --> 00:01:47.160
with non-Google services, a
custom UI generation and

00:01:47.160 --> 00:01:49.540
stand-alone script invocation.

00:01:49.540 --> 00:01:53.518
And, then after talking about
the Book of Bob, we have a

00:01:53.518 --> 00:01:56.540
special guest from Motorola,
Stephanie Anthony, who's going

00:01:56.540 --> 00:01:59.640
to tell us about their
portfolio on Google tool.

00:01:59.640 --> 00:02:03.000
Motorola's Pogo.

00:02:03.000 --> 00:02:05.860
So, let's get started
with introductions.

00:02:05.860 --> 00:02:08.200
This is ACME Corp.

00:02:08.200 --> 00:02:10.700
It's a small company,
pretty fast paced.

00:02:10.700 --> 00:02:12.940
Everybody works
80 hours a week.

00:02:12.940 --> 00:02:16.158
All very demanding and
high maintenance people.

00:02:16.158 --> 00:02:17.438
And, this is Bob.

00:02:18.138 --> 00:02:19.520
Bob's the help desk.

00:02:19.520 --> 00:02:21.460
And Bob's responsibility
is to keep everybody

00:02:21.460 --> 00:02:24.958
at ACME Corp happy.

00:02:24.958 --> 00:02:26.038
And, as a result,
he's not happy.

00:02:26.038 --> 00:02:30.680
He spends his time acting as a
gopher and a handyman, doing

00:02:30.680 --> 00:02:36.458
all the grunt work for
everybody else at the company.

00:02:36.458 --> 00:02:39.498
So Bob started out
with a spreadsheet.

00:02:39.498 --> 00:02:41.840
And you can see Bob's
spreadsheet is very

00:02:41.840 --> 00:02:44.858
well-organized, its all
color coded, and very

00:02:44.858 --> 00:02:46.218
easy for him to decipher.

00:02:46.218 --> 00:02:49.398
But, it does take a lot of
maintenance to keep such

00:02:49.398 --> 00:02:52.378
a task list up to date.

00:02:52.378 --> 00:02:54.100
That's pretty significant
overhead in keeping

00:02:54.100 --> 00:02:55.760
on top of his tasks.

00:02:57.838 --> 00:03:00.844
Bob started to automate his
spreadsheet by adding this

00:03:00.844 --> 00:03:04.380
great little feature
from Google forms.

00:03:04.380 --> 00:03:09.020
Has everybody used the
Google forms before?

00:03:09.020 --> 00:03:10.718
OK, about half the people.

00:03:10.718 --> 00:03:10.960
Does anybody not
know what they are?

00:03:14.198 --> 00:03:17.278
OK, so, Google forms: When
you're in a spreadsheet, you're

00:03:17.278 --> 00:03:23.540
able to set up a very simple
form designer and you can

00:03:23.540 --> 00:03:27.138
publish it on your URL, so that
when anybody comes along that

00:03:27.138 --> 00:03:30.118
to that URL, and enters text,
and hits submit, it goes

00:03:30.118 --> 00:03:31.818
straight into your spreadsheet.

00:03:31.818 --> 00:03:34.840
So, its a nice labor
saving device for Bob.

00:03:34.840 --> 00:03:37.498
Instead of answering telephone
calls and transcribing emails

00:03:37.498 --> 00:03:40.752
and putting everything into
the spreadsheet, he just

00:03:40.752 --> 00:03:41.380
directs people to the form.

00:03:41.380 --> 00:03:43.300
They type in their data hit
submit, and it appears

00:03:43.300 --> 00:03:45.358
in his spreadsheet.

00:03:45.358 --> 00:03:49.604
So it's very good and as
far as it goes, but it

00:03:49.604 --> 00:03:50.860
doesn't go far enough.

00:03:50.860 --> 00:03:51.940
And Apps Scripts can help.

00:03:51.940 --> 00:03:53.620
It can help take some of
the busy work out of

00:03:53.620 --> 00:03:56.438
his day to day chores.

00:03:57.938 --> 00:04:00.278
So, with App Script, Bob has
been able to add a special

00:04:00.278 --> 00:04:03.398
menu to spreadsheet,
called Bob's menu.

00:04:03.398 --> 00:04:05.742
And from there, he is able to
send status emails, schedule

00:04:05.742 --> 00:04:10.698
appointments, and even and even
push articles to Google's

00:04:10.698 --> 00:04:11.978
sites knowledge base.

00:04:11.978 --> 00:04:14.058
So, at this stage, we're
really talking about the

00:04:14.058 --> 00:04:15.318
fundamentals of Apps Scripts.

00:04:15.698 --> 00:04:19.640
Let's walk through a couple
of those examples, starting

00:04:19.640 --> 00:04:19.860
with sending an email.

00:04:19.860 --> 00:04:24.660
So, we've got some
Javascript on the screen.

00:04:24.660 --> 00:04:28.780
And, the first little block
defines a few custom menus.

00:04:29.758 --> 00:04:33.178
And we're saying, when the
spreadsheet opens, let's set up

00:04:33.178 --> 00:04:34.324
two menus, one to send a status
email, and one to schedule an

00:04:34.324 --> 00:04:40.878
appointment and then the bottom
function is the email

00:04:40.878 --> 00:04:43.438
sending function.

00:04:43.438 --> 00:04:46.178
Very briefly, we reach
into the spreadsheet.

00:04:46.178 --> 00:04:51.978
We pull out whatever row has
been selected and from that, we

00:04:51.978 --> 00:04:55.432
constructed an email to inform
the user the status of

00:04:55.432 --> 00:04:57.560
the of their query.

00:04:57.560 --> 00:04:59.770
So, we've got a little
demo this operation.

00:05:05.118 --> 00:05:07.898
So, we highlight the row
that's of interest.

00:05:07.898 --> 00:05:11.000
Bob highlights the row that's
of interest, chooses his menu,

00:05:11.000 --> 00:05:13.100
sends the status email, and
then if we flip over to the

00:05:13.100 --> 00:05:19.338
Gmail account of the user, you
see that they get an email from

00:05:19.338 --> 00:05:21.740
Bob, that tells them that
their issue has been updated.

00:05:25.240 --> 00:05:27.938
A nice little
labor-saving trick.

00:05:27.938 --> 00:05:31.578
And now we have a
second example.

00:05:31.920 --> 00:05:35.958
Very similar, and this one
simply figures out the next

00:05:35.958 --> 00:05:39.540
free slot for Bob to meet with
the person having a problem and

00:05:39.540 --> 00:05:43.700
books the event on both
people's calendars.

00:05:43.700 --> 00:05:45.958
And, so poor Wayne has a
problem with his hard disk.

00:05:45.958 --> 00:05:51.918
Bob needs to stop by
and take a look.

00:05:51.918 --> 00:05:52.798
And our little script runs.

00:05:52.758 --> 00:05:57.620
The status gets updated, and
you'll see that if we refresh

00:05:57.620 --> 00:06:00.800
the calendar, both Bob and
Wayne now have an event

00:06:00.800 --> 00:06:04.040
scheduled at a time that's
convenient to both of them.

00:06:04.040 --> 00:06:09.458
This type of thing saves Bob a
few keystrokes, a few clicks, a

00:06:09.458 --> 00:06:12.518
few minutes every time he
updates the status

00:06:12.518 --> 00:06:15.600
of the ticket.

00:06:15.600 --> 00:06:17.758
He can send an email very
quickly and every time he needs

00:06:17.758 --> 00:06:19.758
to meet with somebody, he does
not have to open up the

00:06:19.758 --> 00:06:23.498
calendar, and hunt around
for an appropriate time.

00:06:23.958 --> 00:06:26.720
He's saving a few minutes
every time he does this.

00:06:26.720 --> 00:06:31.980
Maybe adding up to 30 minutes a
day, several hours a month for

00:06:31.980 --> 00:06:34.818
an upfront investment of an a
couple hours of Javascript.

00:06:35.078 --> 00:06:37.360
So its a pretty good deal.

00:06:37.360 --> 00:06:40.838
Bob gets a lot more productive.

00:06:40.838 --> 00:06:42.238
Well, really there is
a lot more we can do.

00:06:42.238 --> 00:06:46.878
Instead of Bob having to
actively choose to do these

00:06:46.878 --> 00:06:50.180
things, maybe we can automate
it all a little bit more.

00:06:50.638 --> 00:06:53.638
This is why we're going
to talk about events.

00:06:53.638 --> 00:06:58.378
Events system allows you to run
a script in response to an

00:06:58.378 --> 00:07:00.860
event that happens or a
trigger, and function that we

00:07:00.860 --> 00:07:03.518
run is known as an event
handler, So, here,

00:07:03.518 --> 00:07:06.478
we've got an on edit.

00:07:06.478 --> 00:07:09.030
Every time Bob edits the
spreadsheet, we're going to do

00:07:09.030 --> 00:07:13.958
some trickery with the colors
and update the status

00:07:13.958 --> 00:07:15.220
of the issues.

00:07:15.220 --> 00:07:17.198
So, its a very simple demo.

00:07:17.358 --> 00:07:19.998
A lot better when you
see it in action.

00:07:19.998 --> 00:07:23.618
As Bob changes his status row,
you'll see that the color

00:07:23.618 --> 00:07:26.758
coding on his spreadsheet
changes automatically.

00:07:26.758 --> 00:07:29.070
This makes it easy to keep his
spreadheet legible, and up to

00:07:29.070 --> 00:07:36.878
date without continually
having to reformat.

00:07:36.878 --> 00:07:37.160
So event handlers.

00:07:37.160 --> 00:07:42.458
App Script has two different
types of event handlers.

00:07:42.778 --> 00:07:45.458
The first type is a simple
event handler that is

00:07:45.458 --> 00:07:49.458
automatically run in response
to actions happening

00:07:49.458 --> 00:07:51.188
on the spreadsheet.

00:07:51.098 --> 00:07:54.940
The name of the function
associates it with an event.

00:07:54.940 --> 00:07:56.860
So, on open is run when the
spreadsheet is opened.

00:07:56.860 --> 00:07:58.820
On edit is run when
the spreadsheet is

00:07:58.820 --> 00:08:00.740
edited, and so forth.

00:08:00.220 --> 00:08:04.198
These simple event handlers
run in a very tight

00:08:04.198 --> 00:08:05.318
security sandbox.

00:08:05.318 --> 00:08:08.238
They're not allowed to
do anything too crazy.

00:08:08.238 --> 00:08:10.480
They can access
the spreadsheet.

00:08:10.480 --> 00:08:14.600
They can color code things, but
they're able to create menus,

00:08:14.600 --> 00:08:16.898
for example, but they're
not allowed to look at

00:08:16.898 --> 00:08:18.898
anybody's private data.

00:08:18.898 --> 00:08:22.540
The second type of
event handler is new.

00:08:22.540 --> 00:08:23.578
We're introducing it today.

00:08:23.578 --> 00:08:25.638
And it's an installable
event handler.

00:08:26.638 --> 00:08:29.278
This type of handler must be
explicitly installed and

00:08:29.278 --> 00:08:30.478
it's a lot more functional.

00:08:30.478 --> 00:08:34.260
So it can do things like send
emails and access calendars.

00:08:35.260 --> 00:08:35.940
So, these installable
event handlers.

00:08:36.920 --> 00:08:38.520
There's a small, but growing
selection of events

00:08:38.520 --> 00:08:40.700
that we can capture.

00:08:40.700 --> 00:08:42.240
Similar to the simple ones,
there's on edit and and on

00:08:42.240 --> 00:08:46.080
open, but we've also added
on form submit, so when

00:08:46.080 --> 00:08:48.020
someone submits, -- I
see cheers in the back.

00:08:50.120 --> 00:08:52.720
This is the number-one feature
requests on our form, so we're

00:08:52.720 --> 00:08:53.660
really happy to push it out.

00:08:54.920 --> 00:08:57.084
It went out about two hours
ago-- so when somebody submits

00:08:57.084 --> 00:09:00.758
the form it goes into the
spreadsheet and then we can do

00:09:00.758 --> 00:09:04.640
some processing with our script
and send out an email, for

00:09:04.640 --> 00:09:07.480
example, or do something
with the information.

00:09:07.480 --> 00:09:12.860
And we also have clock events,
so you can schedule a script to

00:09:12.860 --> 00:09:16.740
run an hourly, daily,
weekly or what not.

00:09:16.740 --> 00:09:18.040
So let's have a look
at how we do this.

00:09:18.040 --> 00:09:22.200
From our script editor,
we select triggers.

00:09:22.200 --> 00:09:24.898
There's nothing set up yet, and
so, in this case, we are going

00:09:24.898 --> 00:09:28.740
to run form submit reply
function in response to an

00:09:28.740 --> 00:09:31.600
event from the spreadsheet, and
that's the on form
187
00:09:31,6 --&gt; 00:09:31,24
submit event.

00:09:33.960 --> 00:09:34.106
So we save it.

00:09:34.106 --> 00:09:38.860
We go back into our spreadsheet
form, we type in as a user

00:09:38.860 --> 00:09:41.340
would, some kind of
complaint about a broken

00:09:41.340 --> 00:09:41.778
[? mass wheel ?].

00:09:43.220 --> 00:09:46.960
And, when this gets submitted,
this script runs in the

00:09:46.960 --> 00:09:49.220
background, and immediately,
we can switch back to email.

00:09:49.220 --> 00:09:53.400
And you see that
the script update.

00:09:53.400 --> 00:09:56.298
It's actually counted how many
issues are ahead of this

00:09:56.298 --> 00:10:00.360
particular person, and it's
able to say there are 15 active

00:10:00.360 --> 00:10:04.160
tickets ahead of you, so you
will be waiting a while.

00:10:04.160 --> 00:10:05.780
This means that Bob can
be very productive

00:10:05.780 --> 00:10:07.580
even when he's in bed.

00:10:07.580 --> 00:10:07.900
It's 11:00 a.m.

00:10:08.600 --> 00:10:11.580
Bob hasn't gotten up yet but,
everybody at ACME Corp is

00:10:11.580 --> 00:10:12.940
getting these emails telling
them where they are in

00:10:12.940 --> 00:10:15.500
the queue and they're
all very impressed.

00:10:16.580 --> 00:10:18.960
Bob's system is getting
pretty awesome.

00:10:19.220 --> 00:10:21.800
We've got forms coming
in, emails going out

00:10:21.800 --> 00:10:24.160
automatically and a bunch
of shortcuts in the menu.

00:10:25.780 --> 00:10:26.058
Bob gets a promotion.

00:10:26.058 --> 00:10:29.198
He's still in bed, by the way,
so he doesn't know he's got the

00:10:29.198 --> 00:10:33.300
promotion, but when he gets to
work, he'll hear all about it.

00:10:33.300 --> 00:10:33.980
That's great.

00:10:33.980 --> 00:10:35.200
It takes us a little
bit further.

00:10:35.200 --> 00:10:39.320
Bob has cut out a lot of busy
work, but ACME Corp is growing

00:10:39.320 --> 00:10:40.418
and they're getting very big.

00:10:40.940 --> 00:10:42.920
They've brought in
a lot of rules.

00:10:42.920 --> 00:10:45.140
There's all kinds of spending
limits and managerial

00:10:45.140 --> 00:10:47.400
approval required.

00:10:47.700 --> 00:10:50.460
Now days, Bob is spending half
his time on Amazon purchasing

00:10:50.460 --> 00:10:53.460
new keyboards and mice
and chairs and monitors.

00:10:53.460 --> 00:10:56.280
The other half his time is
trying to track down manager's

00:10:56.280 --> 00:10:59.520
approval for such items.

00:10:59.900 --> 00:11:03.100
So he really needs something a
little bit more integrated into

00:11:03.100 --> 00:11:06.560
his existing systems that
aren't part of Google.

00:11:06.560 --> 00:11:08.860
So, we're going to talk a
little about that

00:11:08.860 --> 00:11:11.570
interoperability with non
native services or

00:11:11.570 --> 00:11:15.980
non-Google services.

00:11:15.980 --> 00:11:16.760
I know this is pretty
intimidating.

00:11:16.760 --> 00:11:18.260
There is a lot of
code up there.

00:11:18.260 --> 00:11:19.060
The first one is Soap and XML.

00:11:22.200 --> 00:11:26.538
Soap and XML are the
protocols of web services.

00:11:26.758 --> 00:11:29.920
So, in order to talk to
anything outside of Google,

00:11:29.920 --> 00:11:34.420
we're able to the leverage
these and make calls

00:11:34.420 --> 00:11:39.880
too nice services like
Amazon, for example.

00:11:39.880 --> 00:11:41.260
So, I'll run through
this code very briefly.

00:11:41.260 --> 00:11:45.300
The first few lines connect to
Amazon, and then we get a

00:11:45.300 --> 00:11:48.200
little security header that
Amazon has, that has a special

00:11:48.200 --> 00:11:51.100
key that Amazon will give out
to anybody, free of charge.

00:11:51.100 --> 00:11:54.700
And then the big block in the
middle really just says that

00:11:54.700 --> 00:11:58.138
we're going to request a key
word search across

00:11:58.138 --> 00:11:58.438
all of Amazon.

00:11:58.438 --> 00:12:00.520
And, then we grab the results.

00:12:00.520 --> 00:12:03.860
At the very end, we'll see that
we collect the name and price

00:12:03.860 --> 00:12:06.900
and maybe some other details.

00:12:06.900 --> 00:12:10.600
So not really all that much
code, and we get something

00:12:10.600 --> 00:12:10.640
pretty nice like this.

00:12:11.620 --> 00:12:19.200
Custom spreadsheet function
that can find on Amazon.

00:12:19.200 --> 00:12:20.758
And it really does
run that fast.

00:12:20.758 --> 00:12:21.338
It's pretty sweet.

00:12:28.420 --> 00:12:32.880
We're also introducing
JDBC today.

00:12:32.880 --> 00:12:36.140
This was released, again,
just a few hours ago.

00:12:36.140 --> 00:12:39.780
And this means that as well as
talking to Amazon, Bob can

00:12:39.780 --> 00:12:42.620
automatically add things to
his cart, and purchase them.

00:12:42.100 --> 00:12:46.498
He can also talk to his
own back end data stores.

00:12:46.498 --> 00:12:50.240
And he can find out, for
example, in the query who

00:12:50.240 --> 00:12:52.680
someone's manager is.

00:12:52.960 --> 00:12:56.740
So, he can then ask that
person for spending approval.

00:12:57.380 --> 00:13:00.658
We don't have a flashy
demo of JDBC today.

00:13:00.658 --> 00:13:04.040
We do have some great demos on
our web site where we integrate

00:13:04.040 --> 00:13:06.760
with Amazon web services.

00:13:06.760 --> 00:13:10.740
They have a very nice my sequel
database in the Cloud, called

00:13:10.740 --> 00:13:14.918
I'd urge everybody to play
with Apps Script integrating

00:13:14.918 --> 00:13:15.558
with my sequel on Amazon.

00:13:15.858 --> 00:13:17.028
It works very well.

00:13:19.480 --> 00:13:20.880
Bob's system has gotten
pretty awesome.

00:13:20.880 --> 00:13:24.780
We have the forms coming in,
the shortcuts going out.

00:13:24.780 --> 00:13:26.480
All the short cuts in the menu
integration with Amazon.

00:13:28.280 --> 00:13:31.320
Both as a backend database
provider, and as a shopping

00:13:31.320 --> 00:13:34.560
cart order system.

00:13:34.560 --> 00:13:36.980
So, it's working very well.

00:13:36.980 --> 00:13:39.600
Bob thinks this is wonderful,
but really there's

00:13:39.600 --> 00:13:43.100
something missing.

00:13:43.100 --> 00:13:47.680
We've got all this great power
and our users are still using

00:13:47.680 --> 00:13:49.940
this pretty primitive
and static interface.

00:13:50.640 --> 00:13:55.360
Bob has to figure out what
their text means and go off and

00:13:55.360 --> 00:14:00.360
use his shortcuts to do all
this extra look up work.

00:14:00.360 --> 00:14:03.120
So today we're also going
to talk about customize

00:14:03.120 --> 00:14:06.840
user interface, user
experience for scripts.

00:14:06.840 --> 00:14:10.740
This is new and again released
just a few hours ago.

00:14:10.740 --> 00:14:14.720
We're now able to build
graphical user interfaces

00:14:14.720 --> 00:14:16.760
inside scripts.

00:14:16.760 --> 00:14:18.280
So, Bob's menu has a
new item, Show UI.

00:14:18.200 --> 00:14:19.440
And, we've got the
little ACME Corp.

00:14:19.440 --> 00:14:20.060
Help desk form.

00:14:24.600 --> 00:14:28.660
We've got the JDBC query
running in to find out who's

00:14:28.660 --> 00:14:30.520
loaded the form, who their
manager is, their location,

00:14:30.520 --> 00:14:34.580
the phone numbers,
the spending limits.

00:14:34.580 --> 00:14:37.980
And, they're able to now submit
their problems with their

00:14:37.980 --> 00:14:39.040
mice, in the same way as they
could on the static form.

00:14:40.700 --> 00:14:43.252
So, a couple hundred lines of
Javascript later, and we've

00:14:43.252 --> 00:14:49.640
replicated the wonderful
Google spreadsheet forms.

00:14:49.640 --> 00:14:52.760
We're not really leveraging
the power of a dynamic UI.

00:14:53.880 --> 00:14:56.880
We are able to tell the user
that they need spending

00:14:56.880 --> 00:14:58.360
approval, and we are able
to put things into

00:14:58.360 --> 00:14:59.000
the spreadsheet.

00:14:59.000 --> 00:15:02.700
But we really need to extend
the capabilities and do

00:15:02.700 --> 00:15:04.580
something more interesting.

00:15:04.580 --> 00:15:06.100
So let's try something else.

00:15:06.100 --> 00:15:08.320
Let's give it a second option.

00:15:08.320 --> 00:15:12.680
Instead of reporting a problem,
let's try ordering stuff.

00:15:12.680 --> 00:15:18.680
We know that John needs a
mouse, so we do our query, and

00:15:18.680 --> 00:15:21.066
we'll see that we pull back our
results from Amazon including a

00:15:21.066 --> 00:15:25.200
picture and we decide we want
a nice Apple Magic mouse.

00:15:25.440 --> 00:15:29.020
We submit the request, and now
because we've got this JDBC

00:15:29.020 --> 00:15:34.040
backend , we know that John
doesn't have the spending power

00:15:34.040 --> 00:15:35.480
to buy a mouse for $69.99.

00:15:37.100 --> 00:15:42.780
It's going to need to get
approval from his manager.

00:15:42.780 --> 00:15:45.500
So this is great as
far as it goes.

00:15:46.080 --> 00:15:48.840
But I think the eagle-eyed
among you will have noticed

00:15:48.840 --> 00:15:51.060
that we're still running
inside a spreadsheet.

00:15:51.060 --> 00:15:54.820
And Bob doesn't want people
coming into his spreadsheet

00:15:54.820 --> 00:15:55.140
to raise these forms.

00:15:55.140 --> 00:15:57.700
They'll just mess with
his nice color coding

00:15:57.700 --> 00:15:58.860
and his formatting.

00:16:00.040 --> 00:16:02.520
So, again, today we're
releasing another new feature.

00:16:03.700 --> 00:16:07.260
Stand alone script invocation.

00:16:08.480 --> 00:16:13.360
Inside our script editor, we're
able to publish the service

00:16:13.360 --> 00:16:14.360
and add to our domain.

00:16:14.660 --> 00:16:17.620
Now this is a Google Apps
Premier feature only today.

00:16:19.440 --> 00:16:24.520
And what we'll allow you to do
is run it yourself, share the

00:16:24.520 --> 00:16:27.960
service with yourself or share
the service with people

00:16:27.960 --> 00:16:28.460
on your domain.

00:16:28.880 --> 00:16:30.640
It's not available to
regular Gmail users today.

00:16:32.360 --> 00:16:33.000
So, now if

00:16:33.000 --> 00:16:35.320
we put all these
pieces together.

00:16:35.320 --> 00:16:40.100
Let's have a look at Bob's
system running from

00:16:40.100 --> 00:16:41.760
start to finish.

00:16:41.760 --> 00:16:43.760
First, we publish the URL.

00:16:45.660 --> 00:16:48.620
Bob distributes this on the
help desk page, or makes sure

00:16:48.620 --> 00:16:51.740
that it's in everybody's
browsers bookmarks.

00:16:52.820 --> 00:16:56.000
Then John comes back to
the help desk, via the

00:16:56.000 --> 00:16:58.820
bookmark in this browser.

00:16:58.820 --> 00:17:02.512
He knows immediately that he's
ordering something new, a

00:17:02.512 --> 00:17:06.940
keyboard, runs the query great.

00:17:06.940 --> 00:17:10.700
I'll take a Logitech keyboard,
but looking on the list, John

00:17:10.700 --> 00:17:15.360
also decides that he'd like a
nice Cascio keyboard, and he

00:17:15.360 --> 00:17:17.748
decides to chance his arm,
and see if it'll get

00:17:17.748 --> 00:17:19.180
through approval.

00:17:19.180 --> 00:17:21.600
We pop up a little message
saying he's had approval.

00:17:21.600 --> 00:17:25.380
We go to the manager's email,
and the manager gets a nicely

00:17:25.380 --> 00:17:29.248
formatted message, saying, hey
John wants to buy a

00:17:29.248 --> 00:17:30.280
couple keyboards.

00:17:30.280 --> 00:17:33.600
Manager does a bit of a double
take, isn't quite sure what

00:17:33.600 --> 00:17:37.140
to make of this, says, no.

00:17:37.140 --> 00:17:38.916
We won't be having that.

00:17:45.140 --> 00:17:47.080
Gets that nice little message
reinforcing the good

00:17:47.080 --> 00:17:49.140
approval behavior.

00:17:49.140 --> 00:17:51.980
Bob comes back to the
spreadsheet later on, hasn't

00:17:51.980 --> 00:17:54.800
been involved in the process up
to this point and the

00:17:54.800 --> 00:17:58.840
spreadsheet tells him that John
requested two keyboards, the

00:17:58.840 --> 00:18:02.550
manager approved one rejected
the other, and the script has

00:18:02.550 --> 00:18:03.980
gone off and already placed
the order with Amazon.

00:18:05.680 --> 00:18:11.740
So this is the basics of a work
flow spending approval system.

00:18:11.740 --> 00:18:16.160
I hope we've outlined
reasonably well how you can put

00:18:16.160 --> 00:18:19.440
these pieces together for
business process automation.

00:18:20.160 --> 00:18:25.280
Now, Bob's little story is very
nice, but we've also got

00:18:25.280 --> 00:18:29.460
Stephanie Anthony from Motorola
who's been using Apps Script

00:18:29.460 --> 00:18:32.500
for the last six months and
she's going to tell you about

00:18:32.500 --> 00:18:35.000
their progress and how their
processes have being automated

00:18:35.000 --> 00:18:37.298
in a more real world setting.

00:18:45.280 --> 00:18:46.320
STEPHANIE ANTHONY: I
am Stephanie Anthony
365
00:18:46,32 --&gt; 00:18:46,16
from Motorola.

00:18:47.160 --> 00:18:51.020
We deployed Gmail last year for
mobile devices, and right after

00:18:51.020 --> 00:18:53.260
that, we started looking at the
power of Google Apps to

00:18:53.260 --> 00:18:54.220
replace some IT Tools.

00:18:55.040 --> 00:18:57.800
Everybody knows docs and sites
are great for collaborating

00:18:57.800 --> 00:18:59.460
and getting internet
sites up and running.

00:18:59.460 --> 00:19:02.640
But, we saw a lot of power
with Apps Script to actually

00:19:02.640 --> 00:19:03.660
replaced expensive tools.

00:19:05.280 --> 00:19:07.060
So the first area of
opportunity we looked at

00:19:07.060 --> 00:19:10.880
was our IT project and
portfolio management tool.

00:19:10.040 --> 00:19:13.140
When we looked further, we
found that our costs, annually,

00:19:13.140 --> 00:19:16.624
were approaching $1 million,
so we decided to see what we
377
00:19:16,624 --&gt; 00:19:16,44
could do with Apps Script.

00:19:16.440 --> 00:19:19.878
379
00:19:19,878 --&gt; 00:19:19,656
And based on the results,
we're now looking to

00:19:19.656 --> 00:19:19.916
replace other tools.

00:19:24.260 --> 00:19:25.020
We called the tool, Pogo,
or Portfolo on Google.

00:19:25.300 --> 00:19:30.960
From a functional point of
view, it's got proposal

00:19:30.960 --> 00:19:33.280
data, which is like
you're pre-project data.

00:19:33.280 --> 00:19:34.358
This is standard
proftolio management.

00:19:34.358 --> 00:19:37.004
It's the stuff to
authorize before you

00:19:37.004 --> 00:19:38.740
create a project.

00:19:38.740 --> 00:19:39.180
We've got budget forecasts.

00:19:39.180 --> 00:19:42.820
And staffing forecast.
390
00:19:42,82 --&gt; 00:19:42,48
Project data.

00:19:43.420 --> 00:19:46.160
To get from a proposal to
project, you, of course, have

00:19:46.160 --> 00:19:48.140
to go through portfolio
governance, the

00:19:48.140 --> 00:19:48.740
standards stuff.

00:19:48.740 --> 00:19:50.060
There's approvals.

00:19:50.060 --> 00:19:53.520
The portfolio manager creates a
project, the project has

00:19:53.520 --> 00:19:55.800
different fields, carries over
some data, but of, course,

00:19:55.800 --> 00:19:56.100
there's different.

00:19:57.400 --> 00:19:59.998
Budget forecast and
actuals for the project.

00:19:59.998 --> 00:20:02.000
We've got staffing forecasts.

00:20:02.000 --> 00:20:04.460
Then we have named resource
assignment, in management.

00:20:04.460 --> 00:20:07.180
Which means, that we know what
people, by name are working on

00:20:07.180 --> 00:20:10.820
which projects or proposals
during which months, so we

00:20:10.820 --> 00:20:12.200
can see our resources.

00:20:12.200 --> 00:20:15.820
And in terms of reporting, we
focused on, up at the top, the

00:20:15.820 --> 00:20:17.640
project dashboards for
help and key data.

00:20:17.760 --> 00:20:20.800
We've got our target spend
versus approved and

00:20:20.800 --> 00:20:21.400
unapproved spent.

00:20:21.400 --> 00:20:22.184
For resource management, its
the standard stuff and all the

00:20:22.184 --> 00:20:26.340
tools, what resources are
requested by month, allocated

00:20:26.340 --> 00:20:29.420
by month, compare that
against our capacity.

00:20:29.420 --> 00:20:32.120
We've got research
allocation percentages.

00:20:32.120 --> 00:20:34.000
All the research managers
just love to see.

00:20:35.020 --> 00:20:38.040
And then in terms of individual
project reporting, we've got

00:20:38.040 --> 00:20:40.220
milestone completions,
requirements volatility

00:20:40.220 --> 00:20:41.040
and post release defects.

00:20:42.220 --> 00:20:45.320
Then we roll up projects stuff
to the organization level,

00:20:45.320 --> 00:20:46.310
because we have to report
these matrix in our

00:20:46.310 --> 00:20:46.540
organizatin level.

00:20:49.520 --> 00:20:51.080
We also have the work breakdown
structure instead of

00:20:51.080 --> 00:20:53.900
Google Apps in the docs.

00:20:53.900 --> 00:20:56.660
And it was definately possible,
we had it there last year.

00:20:59.300 --> 00:20:59.768
But the users just wanted to
use their own desk top tools,

00:20:59.768 --> 00:21:00.320
so we gave in on that for now.

00:21:01.060 --> 00:21:04.206
Also we had issues risks,
decisions and action

00:21:04.206 --> 00:21:04.340
items inside this tool.

00:21:06.140 --> 00:21:09.360
And we piloted it with one of
our major programs at Motorola.

00:21:09.360 --> 00:21:12.548
What we found though, once we
started showing them Googles

00:21:12.548 --> 00:21:14.980
Apps, they're like, what we
need is team calendar, and we

00:21:14.980 --> 00:21:16.120
need these collaboration
documents and, oh, shouldn't

00:21:16.120 --> 00:21:18.920
we have our own Google site.

00:21:18.920 --> 00:21:20.860
So, for that program, we ended
up making its own Google site

00:21:20.860 --> 00:21:23.340
with shared calendars, and all
the different documents, and

00:21:23.340 --> 00:21:28.180
then we had issue, risk, action
and decision trackers we put in

00:21:28.180 --> 00:21:28.760
there and we put standard
scripts in there.

00:21:29.720 --> 00:21:32.500
Scripts to email you
for overdue issues,

00:21:32.500 --> 00:21:33.920
overdue action items.

00:21:34.338 --> 00:21:37.258
We've got things that inside
the spreadsheet checks for

00:21:37.258 --> 00:21:41.660
invalid data, and ID's,
just different functions.

00:21:41.660 --> 00:21:45.200
And so we made a standard set
of spreadsheet and site and

00:21:45.200 --> 00:21:45.992
we're giving that
to the program.

00:21:45.992 --> 00:21:48.448
So we're saying, here's your
standard set, go ahead

00:21:48.448 --> 00:21:49.860
and customize it.

00:21:49.860 --> 00:21:51.040
As you know, every
program is different.

00:21:51.040 --> 00:21:51.730
They need some different field.

00:21:51.730 --> 00:21:54.040
We really couldn't say,
everybody these are your

00:21:54.040 --> 00:21:57.118
issue fields, because
everybody's different.

00:22:22.120 --> 00:22:23.960
So we're deploying this
in August of this year.

00:22:23.280 --> 00:22:24.920
Right now, its a
prototype mode.

00:22:24.920 --> 00:22:25.900
It's called Pogo, or
Portfolio on Google.

00:22:26.280 --> 00:22:27.620
There's the little android
guy jumping on a pogo stick.

00:22:29.920 --> 00:22:31.940
This is a flash
gadget that we have.

00:22:32.500 --> 00:22:34.640
And then over here, our
proposal date is also

00:22:34.640 --> 00:22:34.858
done through gadgets.

00:22:37.620 --> 00:22:40.240
I'm sure everybody here has
made a spreadsheet form;

00:22:40.240 --> 00:22:42.240
takes five minutes,
its not a big deal.

00:22:42.240 --> 00:22:44.098
But the reason that we needed
to put the form in a gadget

00:22:44.098 --> 00:22:48.520
until his user interface came
out is that we wanted the users

00:22:48.520 --> 00:22:51.480
to be able to edit in the form,
as well as do data entry.

00:22:51.480 --> 00:22:52.816
Because right now, if you
use spread sheet forms,

00:22:52.816 --> 00:22:54.080
you know it's all nice.

00:22:54.080 --> 00:22:57.100
You've got all these different
field values, all these

00:22:57.100 --> 00:22:58.220
different drop downs and then,
when they go to edit it there

00:22:58.220 --> 00:23:01.770
in a spread sheet, they type
whatever in there and
467
00:23:01,77 --&gt; 00:23:01
you've got a mess.

00:23:02.780 --> 00:23:06.200
Also, we wanted to hide things
like the proposal ID, which

00:23:06.200 --> 00:23:09.540
carries with the proposal
through life cycle, and
470
00:23:09,54 --&gt; 00:23:09,2
different formulas.

00:23:09.200 --> 00:23:13.420
So, we needed to use gadget.

00:23:13.420 --> 00:23:22.940
So this gadget and this
a proposal that exists.

00:23:22.940 --> 00:23:25.220
I found it by number,
already in our exist tool.

00:23:25.220 --> 00:23:27.060
Everything has numbers, so
follows the proposal through

00:23:27.060 --> 00:23:29.660
the life cycle, and I can
change a value in

00:23:29.660 --> 00:23:32.380
the drop downs.

00:23:32.380 --> 00:23:36.660
This goes to a temporary
spreadsheet, then there's a

00:23:36.660 --> 00:23:41.660
trigger that runs, it moves it
from the temporary spreadsheet

00:23:41.660 --> 00:23:43.040
to the master if the data
is qualified to move.

00:23:44.880 --> 00:23:46.520
So we recently got triggers,
about two weeks ago,

00:23:46.520 --> 00:23:46.880
and they're great.

00:23:46.880 --> 00:23:49.620
Because, up until this point,
we actually had a button that

00:23:49.620 --> 00:23:51.860
users had to push to kick off
Apps Script, which is

00:23:51.860 --> 00:23:53.540
completely annoying.

00:23:53.540 --> 00:23:54.720
Now, they can stay in the form.

00:23:54.720 --> 00:23:56.750
We've got these triggers
running, with these temp

00:23:56.750 --> 00:23:58.510
tables, and we're able to
control the data that

00:23:58.510 --> 00:24:00.254
goes to the master.

00:24:01.260 --> 00:24:04.020
So, from a process point of
view they did a proposal entry.

00:24:04.180 --> 00:24:09.780
There's also portfolio data
which is locked down for just

00:24:09.780 --> 00:24:10.460
the portfolio managers.

00:24:10.460 --> 00:24:11.620
The portfolio managers go
through their portfolio

00:24:11.620 --> 00:24:12.880
governance boards.

00:24:12.880 --> 00:24:15.040
It becomes a project.

00:24:15.040 --> 00:24:17.280
At the same time, we also
have budget and staffing

00:24:17.280 --> 00:24:18.200
forecasts over here.

00:24:18.200 --> 00:24:19.920
The project form's
similar this.

00:24:20.880 --> 00:24:20.976
Different data.
499
00:24:20,976 --&gt; 00:24:20,22
Some of it carries over.

00:24:24.660 --> 00:24:26.600
But what people always want
to know is how we're doing

00:24:26.600 --> 00:24:29.020
named resource management.

00:24:29.020 --> 00:24:31.940
So, we could have people
enter their research

00:24:31.940 --> 00:24:33.078
requests in a form.

00:24:33.078 --> 00:24:35.380
But we have large projects in
Motorola, and so you can't

00:24:35.380 --> 00:24:37.060
ask someone in enter a
form entry 50 times.

00:24:37.358 --> 00:24:37.880
They just aren't
going to do it.

00:24:38.560 --> 00:24:40.560
So we have a spreadsheet.

00:24:40.560 --> 00:24:42.200
It is a spreadsheet, but
the users are actually

00:24:42.200 --> 00:24:43.860
happy about this.

00:24:43.860 --> 00:24:44.420
They enter very little data.

00:24:44.880 --> 00:24:47.080
They enter, like the user's
name that they want,

00:24:47.080 --> 00:24:48.720
the project number.

00:24:48.720 --> 00:24:51.892
And, then the spreadsheet Apps
script goes and pulls all the

00:24:51.892 --> 00:24:52.540
other data from the master.

00:24:52.540 --> 00:24:54.060
Because we've got user masters
and project masters and it

00:24:54.060 --> 00:24:56.740
pulls all the data back.

00:24:56.740 --> 00:24:58.920
It validates all the
information they put in.

00:24:58.920 --> 00:25:00.940
Like you can't request a person
to work more than full-time on

00:25:00.940 --> 00:25:04.160
a project, that kind
of validation.

00:25:04.160 --> 00:25:05.210
Then, once its been validated,
they push another button and it

00:25:05.210 --> 00:25:10.700
sends it to the resource
request master.

00:25:10.700 --> 00:25:14.920
Then, once a day, the resource
manager get an email like this.

00:25:17.280 --> 00:25:17.590
So, with resource management,
anybody who has a resource

00:25:17.590 --> 00:25:24.100
management tool, the resource
managers, its not just one

00:25:24.100 --> 00:25:25.358
person, there's usually
there's a backup.

00:25:25.358 --> 00:25:28.900
So, my boss forwarded me this.

00:25:28.900 --> 00:25:29.540
So him and his back
up got this email.

00:25:31.640 --> 00:25:33.780
It's requesting resources
to work on a project,

00:25:33.780 --> 00:25:33.820
straight to their Gmail.

00:25:35.078 --> 00:25:39.440
Here's my name, here's the
project number, here's the

00:25:39.440 --> 00:25:42.560
project name, here's a little
note about why they want me to

00:25:42.560 --> 00:25:46.220
work on this, then how much
time they want from me.

00:25:46.220 --> 00:25:48.820
FTE, if you aren't familiar
with resource management is

00:25:48.820 --> 00:25:52.200
full-time equivalent, so
one is one man month.

00:25:52.200 --> 00:25:53.920
So, basically in June, they
want me to work 75% on

00:25:53.920 --> 00:25:58.360
this project, July 50%,
August, 50, and so on.

00:25:58.360 --> 00:26:01.832
My manager can click, and see
all commitments for resource,

00:26:01.832 --> 00:26:02.248
and that will show him
everything else that I'm

00:26:02.248 --> 00:26:03.640
already committed to.

00:26:03.640 --> 00:26:04.660
Its a list view
that's pre-filtered.

00:26:06.980 --> 00:26:09.780
Down below, you can see there's
another person also that he can

00:26:09.780 --> 00:26:12.480
approve down here for
different projects.

00:26:12.480 --> 00:26:15.260
So, what happens is all the
outstanding resources requests

00:26:15.260 --> 00:26:17.100
that haven't been approved or
rejected show up in the email.

00:26:17.100 --> 00:26:20.900
So, let's say he ignores this
today, tomorrow these will be

00:26:20.900 --> 00:26:23.440
back in with any
additional ones.

00:26:23.440 --> 00:26:25.780
So, we think this will actually
help us, because besides the

00:26:25.780 --> 00:26:28.280
expensive tool we have now,
we've actually had other

00:26:28.280 --> 00:26:30.072
expensive project
management tools.

00:26:30.072 --> 00:26:31.980
And our main problem is
the data integrity.

00:26:32.760 --> 00:26:34.040
We can have the fanciest tool
in the world, but if people

00:26:34.040 --> 00:26:37.838
won't update the data
that's a big problem.

00:26:37.838 --> 00:26:40.680
With resource management
you've got all these people.

00:26:40.680 --> 00:26:42.030
They don't want to
log into a tool.

00:26:42.030 --> 00:26:42.420
They don't care.

00:26:43.660 --> 00:26:45.220
So we're thinking with the
email, they're going to get

00:26:45.220 --> 00:26:47.760
their data in, and it will
be a lot easier for them.

00:26:47.760 --> 00:26:48.200
And we're actually thinking
that they won't even realize

00:26:48.200 --> 00:26:51.940
that they're in Pogo or using
Google Apps, because to

00:26:51.940 --> 00:26:56.172
approve, all you do is click
this button here, and

00:26:56.172 --> 00:26:56.500
it's pre- filled out.

00:26:57.000 --> 00:26:57.900
There's the project,
there's the person.

00:26:59.320 --> 00:27:02.060
So if I press submit here, what
happens is it goes to temporary

00:27:02.060 --> 00:27:05.460
spreadsheet, then there's a
wonderful trigger that goes and

00:27:05.460 --> 00:27:09.040
runs Apps Script, and if it the
data goes into the master,

00:27:09.040 --> 00:27:09.440
it will approve it.

00:27:10.320 --> 00:27:12.020
In this case, I'm not
authorized to approve myself

00:27:12.020 --> 00:27:13.740
to work on this project.

00:27:13.740 --> 00:27:15.698
So while this is going to
submit, I am not actually going

00:27:15.698 --> 00:27:17.040
to be assigned to the project.

00:27:17.040 --> 00:27:19.580
It's going to take my manager
or his backup to push the

00:27:19.580 --> 00:27:21.340
button before it will
actually be approved.

00:27:21.340 --> 00:27:24.200
So there's some security there.

00:27:24.200 --> 00:27:27.020
So what's the point of all
this resource request?

00:27:27.020 --> 00:27:27.788
Its that you want to
get resource data

00:27:27.788 --> 00:27:28.078
for decision making.

00:27:33.400 --> 00:27:33.700
So resource pulls like a group.

00:27:33.700 --> 00:27:35.700
It's like a team.

00:27:39.080 --> 00:27:42.840
This is also a gadget,
also running on a timer.

00:27:42.840 --> 00:27:46.460
Right now, all of our timed
triggers are running for every

00:27:46.460 --> 00:27:48.360
minute, because we haven't
really done load testing.

00:27:48.360 --> 00:27:51.240
We're planning to do load
testing over the next

00:27:51.240 --> 00:27:52.460
month, and we're planning
to deploy in August.

00:27:53.260 --> 00:27:55.200
So everything's
running on a minute.

00:27:55.200 --> 00:27:56.180
Obviously, you don't need to
update charts every minute.

00:27:58.100 --> 00:28:00.360
So this will probably be moved
to more of a five-minute thing.

00:28:00.360 --> 00:28:01.280
We have triggers
that update charts.

00:28:01.280 --> 00:28:02.320
We have triggers
that send emails.

00:28:03.540 --> 00:28:04.180
We have triggers that are
moving the data from

00:28:04.180 --> 00:28:06.740
one table to another.

00:28:06.740 --> 00:28:08.366
And, what's really funny, our
very expensive tools we have

00:28:08.366 --> 00:28:12.200
today actually have a bunch of
schedule jobs that runs scripts

00:28:12.200 --> 00:28:12.220
to update the resource
and the budget data.
599
00:28:13,598 --&gt; 00:28:13,078
So, it's very similar.

00:28:16.920 --> 00:28:21.610
So what this chart means, is in
February, you can see about 3

00:28:21.610 --> 00:28:26.880
1/2 FTE or people, full-time
equivilant working on proects.

00:28:26.880 --> 00:28:28.856
Then it spikes up in April
and May gets to about 4

00:28:28.856 --> 00:28:29.380
1/2 and then it dies off.

00:28:30.380 --> 00:28:34.058
So, let's say my capacity is
four people in this group.

00:28:34.058 --> 00:28:37.260
I can see that I've actually
over allocated my team in April

00:28:37.260 --> 00:28:40.140
and May, but we had a lot of
capacity coming up towards

00:28:40.140 --> 00:28:41.860
the end of summer.

00:28:41.860 --> 00:28:43.320
So it can help me with my
decision making in terms

00:28:43.320 --> 00:28:44.440
of what am I going to
do with my resources.

00:28:44.440 --> 00:28:44.760
What can I commit them to?

00:28:45.020 --> 00:28:49.300
Then, at least at Motorola,
everybody has to have

00:28:49.300 --> 00:28:51.830
everything in Excel for
their pivot tables and

00:28:51.830 --> 00:28:52.460
all their analysis.

00:28:52.460 --> 00:28:55.240
So on all of our charts,
we have an option here

00:28:55.240 --> 00:28:56.860
to export the data.

00:28:56.860 --> 00:28:57.298
CSV opens it up in Excel.

00:28:58.220 --> 00:29:01.240
They can do whatever
they want with it.

00:29:01.240 --> 00:29:02.240
This is actually also
another advantage over

00:29:02.240 --> 00:29:04.358
our current tool.

00:29:04.358 --> 00:29:07.540
Because we have such a fancy
tool right now, we export the

00:29:07.540 --> 00:29:08.770
data from our fancy tool
to a data mart inside of

00:29:08.770 --> 00:29:09.920
Motorola, twice per day.

00:29:11.598 --> 00:29:13.758
We've got people watching
those extracts.

00:29:13.758 --> 00:29:14.958
We've got people
watching those loads.

00:29:15.560 --> 00:29:17.656
We've got support people all
along that whole chain trying
627
00:29:17,656 --&gt; 00:29:17,32
to get that data into our
data into our data mart.

00:29:19.520 --> 00:29:21.840
Plus, when you are trying to
make a decision, you could be

00:29:21.840 --> 00:29:23.498
making a decision on data
that's 11, 12 hours old.

00:29:23.498 --> 00:29:26.860
And that's just a fact because
of what we have today.

00:29:26.860 --> 00:29:28.640
But with Google, all
this data's real time.

00:29:28.640 --> 00:29:30.858
They can get all the data
whatever they want, so they

00:29:30.858 --> 00:29:33.740
can make real time decisions.

00:29:33.740 --> 00:29:35.600
We'll let everybody
see all the data.

00:29:35.600 --> 00:29:37.620
As far as updating the data, we
do have the lock down, like

00:29:37.620 --> 00:29:39.960
with the portfolio managers
and research approval.

00:29:39.960 --> 00:29:43.840
But everybody can see
it so, its open.

00:29:43.840 --> 00:29:49.082
In terms of project data, they
need to see their project

00:29:49.082 --> 00:29:53.040
dashboards, and see what's
going with the different

00:29:53.040 --> 00:29:56.780
projects, so this is really
easy with the spreadsheet

00:29:56.780 --> 00:30:00.000
functions in Apps Script, whole
different data together for

00:30:00.000 --> 00:30:01.760
different dashboards that
managers want to see.

00:30:04.560 --> 00:30:06.040
Down here, we used to
have automated help.

00:30:06.040 --> 00:30:08.678
Automated help is actually
an easy thing to turn on.

00:30:09.300 --> 00:30:10.540
You had different matrix.

00:30:10.540 --> 00:30:11.740
Based on the threshold of the
matrix, you can make the

00:30:11.740 --> 00:30:12.770
you can make the colors
red, green, or yellow.

00:30:12.770 --> 00:30:13.830
So, you can decide if a project
has gone red, green or yellow.

00:30:17.040 --> 00:30:22.020
So we had that on, but then the
project manager said, no they

00:30:22.020 --> 00:30:24.280
wanted to set the colors
themselves, so we're back to

00:30:24.280 --> 00:30:27.080
letting them set the colors
of red, green or yellow.

00:30:27.080 --> 00:30:30.428
We do have automated matrix
though, so we didn't

00:30:30.428 --> 00:30:30.540
turn those off.

00:30:31.800 --> 00:30:34.498
We have the triggers that
go out and we're already

00:30:34.498 --> 00:30:35.238
capturing this data.

00:30:35.498 --> 00:30:37.560
We've got budget,
actuals versus plan.

00:30:37.560 --> 00:30:39.800
See this project's
93% on budget.

00:30:39.800 --> 00:30:42.700
Resources committed
versus plan.

00:30:42.700 --> 00:30:43.040
Milestone completion.

00:30:43.040 --> 00:30:45.118
Requirements volatility.
post-release defects.

00:30:45.118 --> 00:30:46.140
All the information that the
project managers want to see.

00:30:48.740 --> 00:30:51.340
And then they can report
up to their management.

00:30:51.340 --> 00:30:54.240
So we went into this just
to see what could be done.

00:30:54.240 --> 00:30:54.520
This is not anybody's
full time job.

00:30:56.320 --> 00:30:57.480
We've been working on this
since August, like a

00:30:57.480 --> 00:30:59.880
couple hours a week.

00:30:59.098 --> 00:31:01.240
August, because that's
Apps Script came out.

00:31:01.240 --> 00:31:03.720
Then what's really exciting
about Apps Script is things

00:31:03.720 --> 00:31:05.790
just keep getting better and
better, like the triggers that

00:31:05.790 --> 00:31:07.440
just came out two weeks ago.

00:31:07.740 --> 00:31:09.300
It's really been exciting
to see all that change.

00:31:09.880 --> 00:31:12.520
We've been working with the
team, prototyping this,

00:31:12.520 --> 00:31:12.800
demoing it at Motorola.

00:31:13.720 --> 00:31:14.578
Different people are on it.

00:31:14.578 --> 00:31:16.760
And what's cool, is that now
people are actually asking

00:31:16.760 --> 00:31:18.720
for this not because it's
cheaper, but because it's

00:31:18.720 --> 00:31:19.720
better in some ways.

00:31:19.720 --> 00:31:22.080
Especially the integration with
email, the real time data.

00:31:22.080 --> 00:31:24.180
So there's actually
demand for it not just

00:31:24.180 --> 00:31:25.980
because it's cheaper.

00:31:25.980 --> 00:31:28.626
So thanks to the Apps Script,
we're able to deploy a light

00:31:28.626 --> 00:31:30.770
weight application without
all the overhead of

00:31:30.770 --> 00:31:31.538
a packaged tool.

00:31:31.538 --> 00:31:42.920
[APPLAUSE]

00:31:42.920 --> 00:31:43.640
EVIN LEVEY: Thank you
very much Stephanie.

00:31:44.960 --> 00:31:49.400
So you can see that we have Bob
and his little use case and

00:31:49.400 --> 00:31:52.538
building up the help desk
system around a spreadsheet

00:31:52.538 --> 00:31:57.380
from scratch incremental
evolutionary, and then we have

00:31:57.380 --> 00:32:00.140
Stephanie at Motorola who's
replacing at one million

00:32:00.140 --> 00:32:02.778
dollar-a-year system with
Apps Script and Google Apps.

00:32:02.220 --> 00:32:08.018
So, it's a pretty
compelling story, I think.

00:32:08.018 --> 00:32:12.660
So, let's maybe do a summary
of what we've covered today.

00:32:12.660 --> 00:32:15.740
Apps Script talks to Google
products and its done that

00:32:15.740 --> 00:32:17.220
for a long time, and that's
what it's all about.

00:32:17.220 --> 00:32:22.000
It's the glue that lets our
products talk to one another.

00:32:22.000 --> 00:32:26.480
Apps Script talks to Soap,
Rest, the language of the web,

00:32:26.480 --> 00:32:31.818
and now it talks to JDBC, my
sequel today, and Oracle and

00:32:31.818 --> 00:32:35.540
MSSQL are coming very shortly.

00:32:35.540 --> 00:32:35.746
And Apps

00:32:35.746 --> 00:32:37.260
Script talks to users.

00:32:37.260 --> 00:32:41.238
We have a fully capable
UI stack now exposed

00:32:41.238 --> 00:32:45.400
again just today.

00:32:45.400 --> 00:32:47.660
Motorola is saving over a
million dollars per year

00:32:47.660 --> 00:32:48.518
by using this stack.

00:32:50.000 --> 00:32:52.280
So, we announced a lot
of new capabilities in

00:32:52.280 --> 00:32:57.760
Apps Script today and some blog
posts on Monday, and we've got

00:32:57.760 --> 00:32:59.560
the new installable
event handlers.

00:33:00.320 --> 00:33:04.720
They allow you to run scripts
based on events that happen

00:33:04.720 --> 00:33:07.832
inside spreadsheets or based on
clock events, particular times

00:33:07.832 --> 00:33:12.720
of the day, particular days
of the week and what not.

00:33:12.720 --> 00:33:14.320
We've got new JDBC
interoperability.

00:33:14.700 --> 00:33:17.140
We can talk to my sequel
where ever it may be.

00:33:17.140 --> 00:33:19.618
Amazon already acts
in the Cloud or your

00:33:19.618 --> 00:33:19.700
own hosted solution.

00:33:19.700 --> 00:33:24.600
And, we've got the new
Apps script UI, and

00:33:24.600 --> 00:33:25.440
stand alone invocation.

00:33:25.520 --> 00:33:29.920
Stand alone invocation, while
it may seem like a footnote, it

00:33:29.920 --> 00:33:32.900
is really the thing that allows
us to bust out of the

00:33:32.900 --> 00:33:36.228
spreadsheet jail, and so it's
taking App Script from being an

00:33:36.228 --> 00:33:39.880
embedded language to being
something that's much more

00:33:39.880 --> 00:33:44.980
stand alone and fully
capable for users.

00:33:44.980 --> 00:33:47.038
And there's a little bit more
that we haven't covered today,

00:33:47.038 --> 00:33:49.240
and a few more announcements.

00:33:49.240 --> 00:33:51.320
We have a new documents
lists capability.

00:33:52.278 --> 00:33:56.900
We can read files from your
Google Docs list and you can

00:33:56.900 --> 00:34:00.380
create and modify files too,
but that's a Googles Apps only

00:34:00.380 --> 00:34:04.460
feature, so consumer users
on Gmail won't get

00:34:04.460 --> 00:34:07.100
that one just yet.

00:34:07.100 --> 00:34:08.160
We've got a new maps API.

00:34:09.978 --> 00:34:12.818
This is kind of cute and maybe
not immediately relevant to the

00:34:12.818 --> 00:34:15.960
enterprise, but you can create
maps, get directions, do some

00:34:15.960 --> 00:34:16.360
limited geocoding
and elevation.

00:34:20.818 --> 00:34:23.058
And in two weeks -- we don't
usually pre-announce -- but in

00:34:23.058 --> 00:34:29.940
two weeks, we'll have Google
documents extensions so you'll

00:34:29.940 --> 00:34:32.258
be able to script our
new document editor

00:34:32.258 --> 00:34:35.358
using Apps Script.

00:34:35.358 --> 00:34:37.958
Not the existing one, but the
new one that we announced

00:34:37.958 --> 00:34:39.038
back on April 12.

00:34:39.098 --> 00:34:41.158
I think most of you
will be able to access

00:34:41.158 --> 00:34:44.878
that in preview mode.

00:34:44.878 --> 00:34:47.298
We also have a few more
pre-announcements just to give

00:34:47.298 --> 00:34:50.558
you a sense where Apps Script
is going over the next

00:34:50.558 --> 00:34:52.738
three to six months.

00:34:52.038 --> 00:34:55.758
In Q3, we're going to launch
Apps Script in sites.

00:34:55.758 --> 00:34:58.038
Today, as we've mentioned
several times, Apps Script

00:34:58.038 --> 00:35:00.260
really lives inside
spreadsheets and we're excited

00:35:00.260 --> 00:35:03.978
to be able to publish
scripts as services.

00:35:03.978 --> 00:35:06.958
Going forward, Apps Scripts
will also live inside Google

00:35:06.958 --> 00:35:10.280
sites and inside the
new document editor.

00:35:10.280 --> 00:35:14.260
We've even got a screen shot
of Apps Script inside sites.

00:35:14.260 --> 00:35:17.818
You'll be able manage your
scripts in there, throughout

00:35:17.818 --> 00:35:20.940
the script editor and also
catch events from Google sites

00:35:20.940 --> 00:35:25.078
like the same way you can
from spreadsheets today.

00:35:25.078 --> 00:35:28.938
So I'd urge you all
to try Apps Script.

00:35:28.938 --> 00:35:32.480
And we have Google short
link for Apps Script.

00:35:32.480 --> 00:35:36.198
And our regular URL is
long and unwieldy, so

00:35:36.198 --> 00:35:37.938
definitely give it a go.

00:35:37.938 --> 00:35:38.638
I urge you to try it.

00:35:38.638 --> 00:35:42.040
And, we're very responsive to
feedback, so if you've got any

00:35:42.040 --> 00:35:45.020
comments or questions, please
do hit our user support form.

00:35:45.918 --> 00:35:50.118
We're looking forward
to hearing from you.

00:35:50.118 --> 00:35:53.872
OK, so maybe we'll stop there
in, and go for questions.

00:35:59.018 --> 00:35:59.278
AUDIENCE: This is
[UNINTELLIGIBLE]

00:35:59.278 --> 00:36:00.358
I'm with with MWP.

00:36:00.358 --> 00:36:02.158
I'm a user of Google
Apps Premier Edition.

00:36:02.158 --> 00:36:08.638
And, in your slides, it talked
about publishing something to a

00:36:08.638 --> 00:36:11.718
knowledge base, and you didn't
show that in your demo.
772
00:36:11,718 --&gt; 00:36:11,038
Could you talk about that?

00:36:16.858 --> 00:36:20.138
EVIN LEVEY: didn't understand
the question part.

00:36:20.138 --> 00:36:22.198
AUDIENCE: In your slides, you
showed that there was an option

00:36:22.198 --> 00:36:25.280
on the menu to publish from the
help desk to a knowledge base.

00:36:26.478 --> 00:36:28.858
I don't think you
showed that part.

00:36:28.858 --> 00:36:30.898
You showed pushing an email
you showed the other things,

00:36:30.898 --> 00:36:31.918
but you didn't show that.

00:36:31.918 --> 00:36:32.158
EVIN LEVEY: That's right.

00:36:32.158 --> 00:36:37.918
We will publish that
as a code example.

00:36:37.918 --> 00:36:39.658
We skipped over it, it
was an example, but

00:36:39.658 --> 00:36:41.418
it's very easy to do.

00:36:41.318 --> 00:36:44.180
Apps Script can talk natively
to Google sites and so there's

00:36:44.180 --> 00:36:47.398
very nice API where you can
create a page and

00:36:47.398 --> 00:36:48.480
push data in it.

00:36:48.480 --> 00:36:52.198
And so we will release all the
code for the demonstration

00:36:52.198 --> 00:36:54.600
today and I'll make sure that
we include the site's example.

00:36:56.640 --> 00:36:58.218
It just seemed to be a little
repetitive once you've

00:36:58.218 --> 00:37:02.198
seen the others.

00:37:02.198 --> 00:37:04.778
AUDIENCE: We work with the
spreadsheet data API.

00:37:05.618 --> 00:37:07.478
We just recently started
integrating with that.

00:37:08.658 --> 00:37:11.958
We wanted to have certain
things automated based

00:37:11.958 --> 00:37:13.078
on data we push in.

00:37:13.078 --> 00:37:17.518
Will Apps Scripts run on
editor whatever from the API?

00:37:19.978 --> 00:37:20.558
EVIN LEVEY: a very
good question.

00:37:20.558 --> 00:37:22.558
I would imagine not.

00:37:23.158 --> 00:37:24.878
It probably does not.

00:37:25.098 --> 00:37:28.140
I think you have to be a live
user, using the spreadsheet

00:37:28.140 --> 00:37:31.380
or an on form submit event
accessing through the data API.

00:37:33.558 --> 00:37:35.118
I think is a non
user operation.

00:37:36.118 --> 00:37:39.680
AUDIENCE: OK, I know the
Apps market place was

00:37:39.680 --> 00:37:42.958
just recently released.

00:37:42.958 --> 00:37:46.340
The Apps domains can have
installed Apps and we would

00:37:46.340 --> 00:37:47.940
like to be able to inter
operate like that.
806
00:37:48,34 --&gt; 00:37:48,218
EVIN LEVEY: Yeah, absolutely.

00:37:48.218 --> 00:37:55.138
I think Apps Script is
certainly that one of the

00:37:55.138 --> 00:37:57.298
pieces that you can building
into your manifest for

00:37:57.298 --> 00:37:59.418
the Apps marketplace.

00:37:59.418 --> 00:38:01.738
And so, I think that you
will be able have that

00:38:01.738 --> 00:38:05.078
functionality in the future.

00:38:05.078 --> 00:38:08.118
AUDIENCE: Yes, will you be
bringing some of the app engine

00:38:08.118 --> 00:38:09.558
features and capabilities
closer to Apps Script?

00:38:09.558 --> 00:38:12.260
Will they work together
in the future?

00:38:13.880 --> 00:38:16.998
So, for example, in business
app they talked about sequel

00:38:16.998 --> 00:38:17.558
data base as a part
of app engine.

00:38:19.118 --> 00:38:21.060
Maybe its service indication.

00:38:21.060 --> 00:38:24.518
Is there any thoughts on making
App Script work in a more

00:38:24.518 --> 00:38:26.860
unified manner with app engine?

00:38:26.860 --> 00:38:30.858
EVIN LEVEY: Yes, you can
absolutely call app engine from

00:38:30.858 --> 00:38:32.198
app script today and there's
full interoperability today.

00:38:33.618 --> 00:38:34.078
We didn't cover that
in the talk today.

00:38:34.078 --> 00:38:36.658
It's something we've
had for over a year.

00:38:36.658 --> 00:38:41.658
And, in terms of database
services, certainly we're

00:38:41.658 --> 00:38:43.658
always looking for more
database providers.

00:38:44.518 --> 00:38:47.038
We understand its a very
important component for you.

00:38:47.038 --> 00:38:53.158
And so JDBC is obviously our
first step in that direction.

00:38:53.158 --> 00:38:53.978
AUDIENCE: Do you know has
anyone been using this

00:38:53.978 --> 00:38:57.518
to create scrum tools?

00:38:58.898 --> 00:38:59.998
EVIN LEVEY: Yes Absolutely.

00:38:59.698 --> 00:39:01.830
I think that at Google,
we're well-known for

00:39:01.830 --> 00:39:02.800
eating our own dog food.

00:39:03.038 --> 00:39:06.634
Our engineering director in New
York City, where the Apps

00:39:06.634 --> 00:39:10.768
Script team is based, and a lot
of the Apps products

00:39:10.768 --> 00:39:11.618
are developed.

00:39:11.618 --> 00:39:14.798
It actually has a full tracking
system built in Apps Script.

00:39:15.418 --> 00:39:17.140
And it's caught on pretty well.

00:39:17.140 --> 00:39:17.820
All of our teams
at Google use it.

00:39:20.118 --> 00:39:22.598
AUDIENCE: Are those available?

00:39:22.598 --> 00:39:23.380
EVIN LEVEY: I'll ask him.

00:39:23.380 --> 00:39:24.750
I think it would be a
great example to post

00:39:24.750 --> 00:39:25.018
on our templates page.

00:39:30.438 --> 00:39:31.698
AUDIENCE: Thanks very much.

00:39:31.858 --> 00:39:36.218
Are there any limitations for
any of the examples you have

00:39:36.218 --> 00:39:42.300
been showing to provide
notifications or work flow

00:39:42.300 --> 00:39:43.418
outside of the domain?

00:39:46.458 --> 00:39:49.758
So, conceivably as the Google
Apps reseller or the individual

00:39:49.758 --> 00:39:53.518
that's acting as help desk for
numerous domains, that these

00:39:53.518 --> 00:39:57.158
types of applications could be
deployed for that purpose?

00:39:57.158 --> 00:39:58.178
EVIN LEVEY: That's a
really good question.

00:39:58.498 --> 00:40:02.058
I know that there's a lot of
complex areas that arise in the

00:40:02.058 --> 00:40:03.900
world business situations.

00:40:03.900 --> 00:40:07.760
We've been working with
partners to address those.

00:40:07.760 --> 00:40:11.498
I think that in most cases,
everything just worked

00:40:11.498 --> 00:40:13.338
the way we showed it
working here today.

00:40:13.338 --> 00:40:17.200
There are few interesting
security implications for some

00:40:17.200 --> 00:40:19.398
of the things that we've shown.

00:40:19.398 --> 00:40:21.898
The primary one is stand
alone script invocation.

00:40:21.898 --> 00:40:24.780
So, where publish your script
as a service, and you can

00:40:24.780 --> 00:40:27.978
distribute the URL and people
hit the URL and your

00:40:27.978 --> 00:40:28.158
script gets run.

00:40:29.298 --> 00:40:32.178
We've been very cautious with
that one to date and that's why

00:40:32.178 --> 00:40:37.320
we're only allowing it to run
for that logged in user, or for

00:40:37.320 --> 00:40:37.678
users on that Apps domain.

00:40:37.678 --> 00:40:44.700
So, I think that would not work
in your scenario, but we're

00:40:44.700 --> 00:40:47.538
figuring the right way to roll
it out across the domain and

00:40:47.538 --> 00:40:50.658
potentially consumer
users in the future.

00:40:56.338 --> 00:40:56.818
AUDIENCE: Hi, great stuff.

00:40:56.818 --> 00:41:02.138
For the JDBC services, I'm
assuming that it's only going

00:41:02.138 --> 00:41:07.208
to work for a Cloud based
like Amazon web services

00:41:07.208 --> 00:41:09.238
or a hosted solution.

00:41:09.238 --> 00:41:14.858
What about operability with the
secured data connector to pull

00:41:14.858 --> 00:41:16.998
from an internal resource.
878
00:41:16,998 --&gt; 00:41:16,222
EVIN LEVEY: Absolutely.

00:41:16.878 --> 00:41:19.698
That's a great question.

00:41:19.698 --> 00:41:22.486
We do have support for JDBC
inside the secured data

00:41:22.486 --> 00:41:28.300
connector now, and its
not quite ready for

00:41:28.300 --> 00:41:29.578
public consumption.

00:41:29.578 --> 00:41:31.778
But we expect to get it
at the door within the

00:41:31.778 --> 00:41:34.458
next that few weeks.

00:41:34.458 --> 00:41:34.798
Let's put it that way.

00:41:34.798 --> 00:41:39.380
I don't have a firm date, and
the SDC team did ask us to

00:41:39.380 --> 00:41:41.638
announce that, and make it
clear to everybody that if

00:41:41.638 --> 00:41:46.678
you're using SDC today, you
will automatically be able to

00:41:46.678 --> 00:41:50.340
have your JDBC tunnel through
the secure data connector into

00:41:50.340 --> 00:41:55.850
your organization and hit your
own internet databases hosted

00:41:55.850 --> 00:41:56.218
there.

00:41:56.218 --> 00:41:56.458
Great question.

00:41:56.458 --> 00:41:59.098
Thank you.

00:41:59.098 --> 00:42:01.800
AUDIENCE: Is there support
for electronic signatures

00:42:01.800 --> 00:42:02.580
in workflow processes?

00:42:04.058 --> 00:42:05.380
EVIN LEVEY: Sorry, I
didn't catch that.

00:42:05.718 --> 00:42:06.058
Could you repeat?

00:42:06.718 --> 00:42:07.678
AUDIENCE: Support for
electronical signatures?

00:42:08.800 --> 00:42:09.840
EVIN LEVEY: Electronic
signatures.

00:42:09.840 --> 00:42:13.060
Not any specific
support at this time.

00:42:13.640 --> 00:42:15.940
It is a question that we
get every once in a while.

00:42:15.940 --> 00:42:18.320
And I think that there's a big
push, especially with some of

00:42:18.320 --> 00:42:22.438
the great products in
the Apps marketplace.

00:42:22.438 --> 00:42:23.818
I think that that's something
we'll addressed pretty soon.

00:42:26.958 --> 00:42:30.768
I think we have some
live wave questions.

00:42:35.506 --> 00:42:38.098
When you say business process
automation, I think you're

00:42:38.098 --> 00:42:39.978
talking about a modeler
and an engine that will

00:42:39.978 --> 00:42:41.398
execute the process.

00:42:41.398 --> 00:42:43.978
Is this something that
you already have besides

00:42:43.978 --> 00:42:44.938
Blueprint that uses GRIT?

00:42:44.938 --> 00:42:48.898
If not, please take a look
at www.processmaker.com.

00:42:51.398 --> 00:42:52.838
That's a great question.

00:42:52.838 --> 00:42:56.118
I'm sure there is a question
in there somewhere other

00:42:56.118 --> 00:42:58.838
than just an advert.

00:42:58.838 --> 00:43:01.578
Let's put it this way, there
are a lot of rules engines

00:43:01.578 --> 00:43:05.478
out there, and they
do a phenomenal job.

00:43:06.198 --> 00:43:11.898
That's not exact strength
that we're aiming for.

00:43:12.260 --> 00:43:13.218
It's not really our nitch.

00:43:13.218 --> 00:43:16.280
If it's something that
everybody feels is really

00:43:16.280 --> 00:43:18.418
lacking from Apps Script, I
think that we can certainly

00:43:18.418 --> 00:43:19.258
move in that direction.

00:43:19.258 --> 00:43:23.158
But we're really talking about
glue here that talks to other

00:43:23.158 --> 00:43:26.940
best of breed products, and so
I think, that maybe

00:43:26.940 --> 00:43:29.520
processmaker is a great
solution that would work well

00:43:29.520 --> 00:43:33.778
and would integrate
well with Apps Script.

00:43:33.778 --> 00:43:37.398
When will we be able to use
submitting a form as a trigger

00:43:37.398 --> 00:43:39.518
for script, preferably
with our script making

00:43:39.518 --> 00:43:41.558
a custom results page?

00:43:41.558 --> 00:43:43.300
The first part, you
can do it now.

00:43:43.300 --> 00:43:46.258
It went live a few hours ago.

00:43:46.678 --> 00:43:50.860
The second part, the script
making a custom results page,

00:43:50.860 --> 00:43:54.898
is not possible today.

00:43:54.018 --> 00:43:58.718
The reason for that is you're
dealing with the spreadsheet

00:43:58.718 --> 00:44:00.880
form, and the spreadsheet
form, just returned

00:44:00.880 --> 00:44:02.678
it's standard response.

00:44:02.678 --> 00:44:06.958
Whereas even with our GUI
capabilities you're not hitting

00:44:06.958 --> 00:44:09.180
our service, your hitting
the form service.

00:44:09.180 --> 00:44:10.980
That's definitely one of
the next steps we'll take.

00:44:11.680 --> 00:44:15.958
The second part is just
not possible today.

00:44:15.958 --> 00:44:17.998
Where do I find more
info on custom user

00:44:17.998 --> 00:44:19.378
interfaces for scripts?

00:44:19.718 --> 00:44:22.636
We do have a user guide that
that's just been pushed

00:44:22.636 --> 00:44:24.560
in the last few hours.

00:44:24.780 --> 00:44:28.880
It goes into a lot of detail
about how to get up to speed on

00:44:28.880 --> 00:44:31.598
writing service like Javascript
with Google Apps Script and

00:44:31.598 --> 00:44:37.218
there, there's the kernal of a
tutorial on using the

00:44:37.218 --> 00:44:41.458
new UI functionality.

00:44:41.458 --> 00:44:43.760
I urge everybody
to start there.

00:44:44.898 --> 00:44:45.198
It's very GRIT like.

00:44:45.498 --> 00:44:49.978
In fact this incarnation
is based on GRIT.

00:44:49.978 --> 00:44:50.598
So if you're familiar
with that, it should

00:44:50.598 --> 00:44:54.178
be no problem to you.

00:44:55.538 --> 00:44:56.248
AUDIENCE: Could you think of or
describe an architecture a bit

00:44:56.248 --> 00:45:06.548
like the Motorola one where
they use forms to not only

00:45:06.548 --> 00:45:11.998
insert records in the system
but to update records.

00:45:11.918 --> 00:45:18.298
And, the business problem is
that you only want to let

00:45:18.298 --> 00:45:21.294
certain users, perhaps the
author of that record to

00:45:21.294 --> 00:45:21.878
be able to edit them.

00:45:23.358 --> 00:45:25.458
EVIN LEVEY: So with spreadsheet
forms today, there's no

00:45:25.458 --> 00:45:26.618
ability to go back and
change a response.

00:45:28.780 --> 00:45:31.658
And, I know its a highly
requested feature.

00:45:31.658 --> 00:45:33.938
With Apps Script, on the
other hand, now that we've

00:45:33.938 --> 00:45:35.558
got a fully capable UI.

00:45:35.820 --> 00:45:38.178
You saw that we were able to
pre-populate some of the fields

00:45:38.178 --> 00:45:42.018
with the results from the
JDBC query, or sequel query.

00:45:43.998 --> 00:45:46.618
You can absolutely build that
today with Apps Script.

00:45:46.618 --> 00:45:51.498
In fact, one of the demos on
our templates page populates

00:45:51.498 --> 00:45:54.698
the form from the spreadsheet,
lets the user edit, and

00:45:54.698 --> 00:45:56.918
submit back and the
rows change and update.

00:45:56.918 --> 00:46:02.438
And, obviously we're
very content to have

00:46:02.438 --> 00:46:03.682
a spreadsheet be our

00:46:03.682 --> 00:46:06.846
data store, because it's such
a nice and fast interface to

00:46:06.846 --> 00:46:09.138
Google spreadsheets, but
naturally you could pull that

00:46:09.138 --> 00:46:20.598
data from any source at all,
including my sequel data base.

00:46:20.598 --> 00:46:24.178
Are there any plans to provide
ODBC connective for sites slash

00:46:24.178 --> 00:46:28.960
docs, scripts that will allow
direct connection to internal,

00:46:28.960 --> 00:46:31.818
behind the fire wall
databases using SDC?

00:46:31.818 --> 00:46:34.758
I think we've probably
covered that one already.

00:46:34.758 --> 00:46:38.498
There's a few pieces that have
to fall into place and we will

00:46:38.498 --> 00:46:44.960
release JDBC through SDC
in the next few weeks.

00:46:44.960 --> 00:46:50.300
And Q3, we'll have sites and
docs be embedded containers for

00:46:50.300 --> 00:46:53.960
Apps Script, and so while
you're able to do most of these

00:46:53.960 --> 00:46:57.278
things today I think to get the
complete solution to the

00:46:57.278 --> 00:47:00.458
question, of it may be a
couple of months ahead.

00:47:00.458 --> 00:47:01.078
AUDIENCE: Yes, hi.

00:47:01.178 --> 00:47:04.590
I was curious to find out
whether or not, you have in

00:47:04.590 --> 00:47:10.658
your road map anything that
would allow people in the

00:47:10.658 --> 00:47:15.978
marketplace, application
developers, to package scripts

00:47:15.978 --> 00:47:18.820
that would then become
ubiquitous in the target

00:47:18.820 --> 00:47:22.338
customers environment since
there's lots of benefits to

00:47:22.338 --> 00:47:26.598
them that if you're an
application developer.

00:47:26.958 --> 00:47:28.938
EVIN LEVEY: I think the
short answer is no.

00:47:28.938 --> 00:47:30.438
We don't have that today.

00:47:30.038 --> 00:47:32.498
What we have inside
Google spreadsheets

00:47:32.498 --> 00:47:34.138
is a script gallery.

00:47:34.138 --> 00:47:36.778
I don't know that many of you
will have seen it, but you can

00:47:36.778 --> 00:47:40.678
hit insert scripts, and gives
you a little pop up like the

00:47:40.678 --> 00:47:43.638
gadget gallery and you can
install that user generated

00:47:43.638 --> 00:47:46.868
content and that's actually
backed by the Google

00:47:46.868 --> 00:47:47.398
Apps marketplace.

00:47:47.398 --> 00:47:50.498
And obviously there's no fee
for any of the scripts.

00:47:50.498 --> 00:47:52.398
This source code is
freely available.

00:47:52.398 --> 00:47:54.556
That really helps with
transparency, and auditing what

00:47:54.556 --> 00:47:56.338
the code is actually doing.

00:47:56.338 --> 00:48:02.178
And that's definitely a
consumer focused piece of

00:48:02.178 --> 00:48:04.298
the picture inside of
Google Apps domain.

00:48:06.338 --> 00:48:09.578
What we intend to offer is a
domain specific gallery along

00:48:09.578 --> 00:48:12.508
the lines of the existing
domain specific template

00:48:12.508 --> 00:48:13.038
gallery and gadgets gallery.

00:48:13.038 --> 00:48:15.978
I think as we move in that
direction of the next few

00:48:15.978 --> 00:48:21.138
months, you'll begin to see
more capabilities to install

00:48:21.138 --> 00:48:26.338
scripts for a domain then do
some kind of deployment

00:48:26.338 --> 00:48:26.718
management.

00:48:26.718 --> 00:48:31.628
For example, every spreadsheet
at Motorola, perhaps would have

00:48:31.628 --> 00:48:38.178
a specific script that runs and
audits its use of the product,

00:48:38.178 --> 00:48:38.558
or something like that.

00:48:39.258 --> 00:48:40.618
AUDIENCE: For this use, it
would be great if you could

00:48:40.618 --> 00:48:44.498
install as part of a
marketplace application

00:48:44.498 --> 00:48:49.098
installation process.

00:48:49.860 --> 00:48:50.038
Thank you.

00:48:50.038 --> 00:48:51.450
EVIN LEVEY: I'm not sure if
there are more questions in our

00:48:51.450 --> 00:48:56.066
wave, no more live questions.

00:48:56.194 --> 00:48:56.578
Oh, one more.

00:48:58.878 --> 00:49:00.898
AUDIENCE: Actually, it's
not a question actually.

00:49:00.898 --> 00:49:01.718
Just thanks for the
presentation, because we've

00:49:01.718 --> 00:49:06.538
been hearing about this for a
while, but, to just kind of

00:49:06.538 --> 00:49:08.280
look at a live system
that actually works.

00:49:08.280 --> 00:49:11.298
Some use cases that you can
really use for business, I

00:49:11.298 --> 00:49:11.998
guess for a business
user a little dumb.

00:49:11.998 --> 00:49:15.058
But just to see something that
come together is really helpful

00:49:15.058 --> 00:49:18.038
with forms, and a menu going to
the left inside, and how you

00:49:18.038 --> 00:49:20.038
can use these things to do
that, so that was great.

00:49:20.038 --> 00:49:20.338
Thanks so much.

00:49:26.498 --> 00:49:27.008
AUDIENCE: I've

00:49:27.008 --> 00:49:28.218
got a question, maybe
for Stephanie.

00:49:28.218 --> 00:49:31.858
How do you deal with the
governance of your code?

00:49:33.418 --> 00:49:33.882
You've got spreadsheets.

00:49:33.882 --> 00:49:34.558
You've got sites.

00:49:36.998 --> 00:49:42.754
They have to be long lived
across the owners of those

00:49:42.754 --> 00:49:45.118
spreadsheets and the
owners of those sites

00:49:45.118 --> 00:49:47.060
leaving the company.

00:49:47.618 --> 00:49:48.152
Perhaps their accounts
being deleted.

00:49:48.152 --> 00:49:51.260
How have you managed that
internally so that that you

00:49:51.260 --> 00:49:54.858
don't delete an important
business spreadsheet that's

00:49:54.858 --> 00:49:57.458
used by many people?

00:49:59.638 --> 00:50:01.938
STEPHANIE ANTHONY: Part of the
reason we want people in forms

00:50:01.938 --> 00:50:03.698
is because we don't people
getting to the scripts.

00:50:03.698 --> 00:50:05.918
So, we can keep the actual
users out of the scripts.

00:50:06.378 --> 00:50:09.424
But we are backing up all of
our code, and Motorola is big

00:50:09.424 --> 00:50:13.540
on code control, and all of our
code being locked down, so we

00:50:13.540 --> 00:50:14.720
are keeping copies
and saving it all.

00:50:18.478 --> 00:50:21.460
AUDIENCE: But, what if
the person that created

00:50:21.460 --> 00:50:23.538
the script leaves?

00:50:23.538 --> 00:50:25.140
Then that document
will be deleted?

00:50:25.140 --> 00:50:29.540
STEPHANIE ANTHONY: Oh, well,
for instance, in a different

00:50:29.540 --> 00:50:32.498
thing that we did, I made a
site for a very top secret type

00:50:32.498 --> 00:50:35.506
of thing, so I can't see the
data, I'm not allowed to see

00:50:35.506 --> 00:50:38.618
the data, so I made it, and I
made someone else the owner, so

00:50:38.618 --> 00:50:39.458
I transferred ownership to him.

00:50:39.458 --> 00:50:41.458
And we've got other things
where we actually share

00:50:41.458 --> 00:50:43.818
ownership, so we try never
to have one person

00:50:43.818 --> 00:50:44.118
owning something.

00:50:44.118 --> 00:50:46.038
We try have multiple people
owning it, but I really like

00:50:46.038 --> 00:50:48.502
that you can create something
and then transfer the ownership

00:50:48.502 --> 00:50:50.680
away and then you're
totally locked out of it.
1073
00:50:50,68 --&gt; 00:50:50,14
That really helps for us.

00:50:57.058 --> 00:50:59.800
EVIN LEVEY: And I think that's
a great question in terms of

00:50:59.800 --> 00:51:02.096
ownership and it comes up
regularly for all of Google

00:51:02.096 --> 00:51:07.720
Apps, and I think that what we
envision inside Apps Scripts

00:51:07.720 --> 00:51:10.538
team in participlar is the
notion of a [? roller cant. ?]

00:51:10.538 --> 00:51:14.378
and so there wouldn't be a
particular employee that owns

00:51:14.378 --> 00:51:15.478
the document or the script.

00:51:16.558 --> 00:51:18.374
Obviously, we intend to bust
out of spreadsheets, so scripts

00:51:18.374 --> 00:51:21.892
will be stand alone, but the
same problem will apply, that

00:51:21.892 --> 00:51:22.400
if the [? roller cant ?]

00:51:22.400 --> 00:51:22.900
gets deleted, the data
gets deleted too.

00:51:26.438 --> 00:51:27.252
But obviously,
[? roller cants ?]

00:51:27.252 --> 00:51:30.798
hopefully won't be leaving
the company to move on to to

00:51:30.798 --> 00:51:31.002
bigger and better things.

00:51:38.058 --> 00:51:41.366
AUDIENCE: This might kind
of weird question, but
1091
00:51:41,366 --&gt; 00:51:41,118
I'm a Systems Integrator.

00:51:42.458 --> 00:51:48.058
We used to laugh at people that
have legacy applications like

00:51:48.058 --> 00:51:54.658
this built on Lotus Notes and
they want to migrate

00:51:54.658 --> 00:51:54.978
into something new.

00:51:54.978 --> 00:51:59.998
Help me understand how to
convince people, that they

00:51:59.998 --> 00:52:04.458
aren't locking into another
scripting language and silo?

00:52:05.230 --> 00:52:05.258
EVAN LEVI: This is actually
something ?] that

00:52:05.258 --> 00:52:06.638
keeps me up at night.

00:52:06.638 --> 00:52:13.378
And Google is all about
basically keeping ourselves

00:52:13.378 --> 00:52:15.878
honest, so that users have the
ability to take their data

00:52:15.878 --> 00:52:18.978
away and go somewhere
else at any time.

00:52:19.658 --> 00:52:23.838
When we're not locking you in,
it forces us to stay ahead

00:52:23.838 --> 00:52:26.898
and keep innovating
and keep moving.

00:52:26.898 --> 00:52:29.358
And code, written on a
system like this, it's

00:52:29.358 --> 00:52:30.218
that big investment.

00:52:30.218 --> 00:52:37.478
You sink a lot of cost, a lot
of time into rebuilding your

00:52:37.478 --> 00:52:38.558
systems on Google Apps Script.

00:52:38.578 --> 00:52:40.598
Hopefully not that much money
and not that much time.

00:52:40.598 --> 00:52:42.018
That's our goal.

00:52:42.018 --> 00:52:43.538
But it's still an investment.

00:52:43.538 --> 00:52:48.558
And at that stage you have some
costs, so what do you do?

00:52:49.618 --> 00:52:51.958
I have no solution.

00:52:51.218 --> 00:52:55.078
I have answer for you and I
recognize that its a problem.

00:52:55.078 --> 00:52:59.978
If you have solutions for that
can make us more open and

00:52:59.978 --> 00:53:04.118
transparent, I'd really
love to hear them.

00:53:04.118 --> 00:53:05.418
OK, I think we'll leave it.

00:53:05.418 --> 00:53:08.618
I'd like to thank everybody
for all the great questions.
1118
00:53:08,978 --&gt; 00:53:08,598
And, please try Apps Script.

00:53:08.598 --> 00:53:13.598
[APPLAUSE]

