WEBVTT
Kind: captions
Language: en

00:00:03.260 --> 00:00:06.000
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:06.080 --> 00:00:10.600
As we talked about last episode, your computer
is connected to a large, distributed network,

00:00:10.600 --> 00:00:11.600
called The Internet.

00:00:11.600 --> 00:00:15.760
I know this because you’re watching a youtube
video, which is being streamed over that very

00:00:15.760 --> 00:00:16.420
internet.

00:00:16.420 --> 00:00:19.240
It’s arranged as an ever-enlarging web of
interconnected devices.

00:00:19.240 --> 00:00:23.650
For your computer to get this video, the first
connection is to your local area network,

00:00:23.650 --> 00:00:28.119
or LAN, which might be every device in your
house that’s connected to your wifi router.

00:00:28.120 --> 00:00:32.280
This then connects to a Wide Area Network,
or WAN, which is likely to be a router run

00:00:32.280 --> 00:00:37.920
by your Internet Service Provider, or ISP
– companies like Comcast, AT&amp;T or Verizon.

00:00:37.920 --> 00:00:41.840
At first, this will be a regional router,
like one for your neighborhood, and then that

00:00:41.840 --> 00:00:45.879
router connects to an even bigger WAN, maybe
one for your whole city or town.

00:00:45.880 --> 00:00:49.989
There might be a couple more hops, but ultimately
you’ll connect to the backbone of the internet

00:00:49.989 --> 00:00:53.940
made up of gigantic routers with super high-bandwidth
connections running between them.

00:00:53.950 --> 00:00:58.289
To request this video file from youtube, a
packet had to work its way up to the backbone,

00:00:58.289 --> 00:01:01.890
travel along that for a bit, and then work
its way back down to a youtube server that

00:01:01.890 --> 00:01:03.059
had the file.

00:01:03.059 --> 00:01:07.620
That might be four hops up, two hops across
the backbone, and four hops down, for a total

00:01:07.620 --> 00:01:08.620
of ten hops.

00:01:08.620 --> 00:01:12.370
If you’re running Windows, MacOS or Linux,
you can see the route data takes to different

00:01:12.370 --> 00:01:16.250
places on the internet by using the traceroute
program on your computer.

00:01:16.250 --> 00:01:18.040
Instructions in the Doobly Doo.

00:01:18.040 --> 00:01:22.700
For us here at the Chad &amp; Stacey Emigholz
Studio in Indianapolis, the route to the DFTBA

00:01:22.700 --> 00:01:25.300
server in California goes through 11 stops.

00:01:25.300 --> 00:01:30.360
We start at 192.168.0.1 -- thats the IP address
for my computer on our LAN.

00:01:30.360 --> 00:01:34.750
Then there’s the wifi router here at the
studio, then a series of regional routers,

00:01:34.750 --> 00:01:39.090
then we get onto the backbone, and then we
start working back down to the computer hosting

00:01:39.090 --> 00:01:43.490
“DFTBA dot com”, which has the IP address
104.24.109.186.

00:01:43.490 --> 00:01:47.530
But how does a packet actually get there?

00:01:47.530 --> 00:01:50.060
What happens if a packet gets lost along the
way?

00:01:50.060 --> 00:01:54.800
If I type “DFTBA dot com” into my web
browser, how does it know the server’s address?

00:01:54.800 --> 00:01:56.700
Those are our topics for today!

00:01:56.700 --> 00:02:05.840
INTRO

00:02:05.850 --> 00:02:09.840
As we discussed last episode, the internet
is a huge distributed network that sends data

00:02:09.850 --> 00:02:11.500
around as little packets.

00:02:11.500 --> 00:02:15.410
If your data is big enough, like an email
attachment, it might get broken up into many

00:02:15.410 --> 00:02:16.410
packets.

00:02:16.410 --> 00:02:21.560
For example, this video stream is arriving
to your computer right now as a series of

00:02:21.560 --> 00:02:23.830
packets, and not one gigantic file.

00:02:23.830 --> 00:02:27.800
Internet packets have to conform to a standard
called the Internet Protocol, or IP.

00:02:27.800 --> 00:02:31.730
It’s a lot like sending physical mail through
the postal system – every letter needs a

00:02:31.730 --> 00:02:35.450
unique and legible address written on it,
and there are limits to the size and weight

00:02:35.450 --> 00:02:36.590
of packages.

00:02:36.590 --> 00:02:39.240
Violate this, and your letter won’t get
through.

00:02:39.240 --> 00:02:40.740
IP packets are very similar.

00:02:40.740 --> 00:02:45.370
However, IP is a very low level protocol – there
isn’t much more than a destination address

00:02:45.370 --> 00:02:49.620
in a packet’s header, which is the metadata
that’s stored in front of the data payload.

00:02:49.620 --> 00:02:53.090
This means that a packet can show up at a
computer, but the computer may not know which

00:02:53.090 --> 00:02:56.460
application to give the data to; Skype or
Call of Duty.

00:02:56.460 --> 00:03:00.540
For this reason, more advanced protocols were
developed that sit on top of IP.

00:03:00.540 --> 00:03:05.010
One of the simplest and most common is the
User Datagram Protocol, or UDP.

00:03:05.010 --> 00:03:08.520
UDP has its own header, which sits inside
the data payload.

00:03:08.520 --> 00:03:12.040
Inside of the UDP header is some useful, extra
information.

00:03:12.040 --> 00:03:13.840
One of them is a port number.

00:03:13.840 --> 00:03:17.790
Every program wanting to access the internet
will ask its host computer’s Operating System

00:03:17.790 --> 00:03:19.340
to be given a unique port.

00:03:19.340 --> 00:03:23.470
Like Skype might ask for port number 3478.

00:03:23.470 --> 00:03:27.630
When a packet arrives to the computer, the
Operating System will look inside the UDP

00:03:27.630 --> 00:03:29.430
header and read the port number.

00:03:29.430 --> 00:03:34.150
Then, if it sees, for example, 3478, it will
give the packet to Skype.

00:03:34.150 --> 00:03:39.150
So to review, IP gets the packet to the right
computer, but UDP gets the packet to the right

00:03:39.150 --> 00:03:41.270
program running on that computer.

00:03:41.270 --> 00:03:45.410
UDP headers also include something called
a checksum, which allows the data to be verified

00:03:45.410 --> 00:03:46.550
for correctness.

00:03:46.550 --> 00:03:49.890
As the name suggests, it does this by checking
the sum of the data.

00:03:49.890 --> 00:03:52.360
Here’s a simplified version of how this
works.

00:03:52.360 --> 00:03:57.770
Lets imagine the raw data in our UDP packet
is 89 111 33 32 58 and 41.

00:03:57.770 --> 00:04:03.150
Before the packet is sent, the transmitting
computer calculates the checksum by adding

00:04:03.150 --> 00:04:07.740
all the data together: 89 plus 111 plus 33
and so on.

00:04:07.740 --> 00:04:11.360
In our example, this adds up to a checksum
of 364.

00:04:11.360 --> 00:04:14.820
In UDP, the checksum value is stored in 16
bits.

00:04:14.820 --> 00:04:19.410
If the sum exceeds the maximum possible value,
the upper-most bits overflow, and only the

00:04:19.410 --> 00:04:20.410
lower bits are used.

00:04:20.410 --> 00:04:24.120
Now, when the receiving computer gets this
packet, it repeats the process, adding up

00:04:24.120 --> 00:04:25.120
all the data.

00:04:25.120 --> 00:04:28.340
89 plus 111 plus 33 and so on.

00:04:28.340 --> 00:04:32.180
If that sum is the same as the checksum sent
in the header, all is well.

00:04:32.180 --> 00:04:35.890
But, if the numbers don’t match, you know
that the data got corrupted at some point

00:04:35.890 --> 00:04:39.400
in transit, maybe because of a power fluctuation
or faulty cable.

00:04:39.400 --> 00:04:44.840
Unfortunately, UDP doesn’t offer any mechanisms
to fix the data, or request a new copy – receiving

00:04:44.840 --> 00:04:48.830
programs are alerted to the corruption, but
typically just discard the packet.

00:04:48.830 --> 00:04:52.840
Also, UDP provides no mechanisms to know if
packets are getting through – a sending

00:04:52.840 --> 00:04:57.530
computer shoots the UDP packet off, but has
no confirmation it ever gets to its destination

00:04:57.530 --> 00:04:58.530
successfully.

00:04:58.530 --> 00:05:03.150
Both of these properties sound pretty catastrophic,
but some applications are ok with this, because

00:05:03.150 --> 00:05:05.620
UDP is also really simple and fast.

00:05:05.620 --> 00:05:10.040
Skype, for example, which uses UDP for video
chat, can handle corrupt or missing packets.

00:05:10.040 --> 00:05:12.530
That’s why sometimes if you’re on a bad
internet connection,

00:05:12.530 --> 00:05:16.250
Skype gets all glitchy – only some of the
UDP packets are making it to your computer.

00:05:16.250 --> 00:05:17.250
Skype does the best it can with the data it
does receive correctly.

00:05:17.250 --> 00:05:20.210
But this approach doesn’t work for many
other types of data transmission.

00:05:20.210 --> 00:05:23.690
Like, it doesn’t really work if you send
an email, and it shows up with the middle

00:05:23.690 --> 00:05:24.690
missing.

00:05:24.690 --> 00:05:26.660
The whole message really needs to get there
correctly!

00:05:26.660 --> 00:05:30.830
When it “absolutely, positively needs to
get there”, programs use the Transmission

00:05:30.830 --> 00:05:37.010
Control Protocol, or TCP, which like UDP,
rides inside the data payload of IP packets.

00:05:37.010 --> 00:05:41.770
For this reason, people refer to this combination
of protocols as TCP/IP.

00:05:41.770 --> 00:05:45.560
Like UDP, the TCP header contains a destination
port and checksum.

00:05:45.560 --> 00:05:49.340
But, it also contains fancier features, and
we’ll focus on the key ones.

00:05:49.340 --> 00:05:52.130
First off, TCP packets are given sequential
numbers.

00:05:52.130 --> 00:05:56.740
So packet 15 is followed by packet 16, which
is followed by 17, and so on... for potentially

00:05:56.740 --> 00:05:58.919
millions of packets sent during that session.

00:05:58.919 --> 00:06:02.740
These sequence numbers allow a receiving computer
to put the packets into the correct order,

00:06:02.740 --> 00:06:04.910
even if they arrive at different times across
the network.

00:06:04.910 --> 00:06:09.670
So if an email comes in all scrambled, the
TCP implementation in your computer’s operating

00:06:09.670 --> 00:06:12.040
system will piece it all together correctly.

00:06:12.040 --> 00:06:16.080
Second, TCP requires that once a computer
has correctly received a packet – and the

00:06:16.080 --> 00:06:19.740
data passes the checksum – that it send
back an acknowledgement, or “ACK” as the

00:06:19.740 --> 00:06:21.530
cool kids say, to the sending computer.

00:06:21.530 --> 00:06:25.960
Knowing the packet made it successfully, the
sender can now transmit the next packet.

00:06:25.960 --> 00:06:29.900
But this time, let’s say, it waits, and
doesn’t get an acknowledgement packet back.

00:06:29.900 --> 00:06:34.100
Something must be wrong If enough time elapses,
the sender will go ahead and just retransmit

00:06:34.100 --> 00:06:35.100
the same packet.

00:06:35.100 --> 00:06:38.639
It’s worth noting that the original packet
might have actually gotten there, but the

00:06:38.639 --> 00:06:40.699
acknowledgment is just really delayed.

00:06:40.699 --> 00:06:42.710
Or perhaps it was the acknowledgment that
was lost.

00:06:42.710 --> 00:06:47.071
Either way, it doesn’t matter, because the
receiver has those sequence numbers, and if

00:06:47.071 --> 00:06:49.590
a duplicate packet arrives, it can be discarded.

00:06:49.590 --> 00:06:54.419
Also, TCP isn’t limited to a back and forth
conversation – it can send many packets,

00:06:54.419 --> 00:06:58.730
and have many outstanding ACKs, which increases
bandwidth significantly, since you aren’t

00:06:58.730 --> 00:07:01.670
wasting time waiting for acknowledgment packets
to return.

00:07:01.670 --> 00:07:06.020
Interestingly, the success rate of ACKs, and
also the round trip time between sending and

00:07:06.020 --> 00:07:08.419
acknowledging, can be used to infer network
congestion.

00:07:08.419 --> 00:07:14.330
TCP uses this information to adjust how aggressively
it sends packets – a mechanism for congestion

00:07:14.330 --> 00:07:14.840
control.

00:07:14.840 --> 00:07:19.420
So, basically, TCP can handle out-of-order
packet delivery, dropped packets – including

00:07:19.420 --> 00:07:24.440
retransmission – and even throttle its transmission
rate according to available bandwidth.

00:07:24.449 --> 00:07:25.449
Pretty awesome!

00:07:25.449 --> 00:07:29.990
You might wonder why anyone would use UDP
when TCP has all these nifty features.

00:07:29.990 --> 00:07:33.750
The single biggest downside are all those
acknowledgment packets – it doubles the

00:07:33.750 --> 00:07:38.060
number of messages on the network, and yet,
you're not transmitting any more data.

00:07:38.060 --> 00:07:43.030
That overhead, including associated delays,
is sometimes not worth the improved robustness,

00:07:43.030 --> 00:07:47.720
especially for time-critical applications,
like Multiplayer First Person Shooters.

00:07:47.720 --> 00:07:50.660
And if it’s you getting lag-fragged you’ll
definitely agree!

00:07:50.660 --> 00:07:54.800
When your computer wants to make a connection
to a website, you need two things - an IP

00:07:54.800 --> 00:07:55.800
address and a port.

00:07:55.800 --> 00:08:00.180
Like port 80, at 172.217.7.238.

00:08:00.180 --> 00:08:03.150
This example is the IP address and port for
the Google web server.

00:08:03.150 --> 00:08:06.942
In fact, you can enter this into your browser’s
address bar, like so, and you’ll end up

00:08:06.942 --> 00:08:07.942
on the google homepage.

00:08:07.942 --> 00:08:12.050
This gets you to the right destination, but
remembering that long string of digits would

00:08:12.050 --> 00:08:13.150
be really annoying.

00:08:13.150 --> 00:08:15.840
It’s much easier to remember: google.com.

00:08:15.840 --> 00:08:19.860
So the internet has a special service that
maps these domain names to addresses.

00:08:19.860 --> 00:08:21.880
It’s like the phone book for the internet.

00:08:21.880 --> 00:08:25.110
And it’s called the Domain Name System,
or DNS for short.

00:08:25.110 --> 00:08:26.669
You can probably guess how it works.

00:08:26.669 --> 00:08:32.060
When you type something like “youtube.com”
into your web browser, it goes and asks a

00:08:32.060 --> 00:08:35.619
DNS server – usually one provided by your
ISP – to lookup the address.

00:08:35.619 --> 00:08:40.209
DNS consults its huge registry, and replies
with the address... if one exists.

00:08:40.209 --> 00:08:44.319
In fact, if you try mashing your keyboard,
adding “.com”, and then hit enter in your

00:08:44.319 --> 00:08:48.010
browser, you’ll likely be presented with
an error that says DNS failed.

00:08:48.010 --> 00:08:52.579
That’s because that site doesn’t exist,
so DNS couldn’t give your browser an address.

00:08:52.579 --> 00:08:56.760
But, if DNS returns a valid address, which
it should for “youtube.com”, then your

00:08:56.760 --> 00:09:00.449
browser shoots off a request over TCP for
the website’s data.

00:09:00.449 --> 00:09:05.639
There’s over 300 million registered domain
names, so to make that DNS Lookup a little

00:09:05.639 --> 00:09:10.240
more manageable, it’s not stored as one
gigantically long list, but rather in a tree

00:09:10.240 --> 00:09:11.240
data structure.

00:09:11.240 --> 00:09:15.459
What are called Top Level Domains, or TLDs,
are at the very top.

00:09:15.460 --> 00:09:17.980
These are huge categories like .com and .gov.

00:09:17.980 --> 00:09:22.540
Then, there are lower level domains that sit
below that, called second level domains; Examples

00:09:22.540 --> 00:09:25.780
under .com include google.com and
dftba.com.

00:09:25.780 --> 00:09:30.200
Then, there are even lower level domains,
called subdomains, like images.google.com,

00:09:30.200 --> 00:09:32.640
store.dftba.com.

00:09:32.640 --> 00:09:35.080
And this tree is absolutely HUGE!

00:09:35.089 --> 00:09:39.161
Like I said, more than 300 million domain
names, and that's just second level domain

00:09:39.161 --> 00:09:41.050
names, not all the sub domains.

00:09:41.050 --> 00:09:45.949
For this reason, this data is distributed
across many DNS servers, which are authorities

00:09:45.949 --> 00:09:47.340
for different parts of the tree.

00:09:47.340 --> 00:09:49.340
Okay, I know you’ve been waiting for it...

00:09:49.340 --> 00:09:57.600
We’ve reached a new level of abstraction!

00:09:57.600 --> 00:10:01.990
Over the past two episodes, we’ve worked
up from electrical signals on wires, or radio

00:10:01.990 --> 00:10:05.470
signals transmitted through the air in the
case of wireless networks.

00:10:05.470 --> 00:10:07.240
This is called the Physical Layer.

00:10:07.240 --> 00:10:11.779
MAC addresses, collision detection, exponential
backoff and similar low level protocols that

00:10:11.779 --> 00:10:15.489
mediate access to the physical layer are part
of the Data Link Layer.

00:10:15.489 --> 00:10:19.179
Above this is the Network Layer, which is
where all the switching and routing technologies

00:10:19.179 --> 00:10:20.619
that we discussed operate.

00:10:20.619 --> 00:10:25.690
And today, we mostly covered the Transport
layer, protocols like UDP and TCP, which are

00:10:25.690 --> 00:10:29.809
responsible for point to point data transfer
between computers, and also things like error

00:10:29.809 --> 00:10:31.959
detection and recovery when possible.

00:10:31.959 --> 00:10:36.371
We’ve also grazed the Session Layer – where
protocols like TCP and UDP are used to open

00:10:36.371 --> 00:10:40.769
a connection, pass information back and forth,
and then close the connection when finished

00:10:40.769 --> 00:10:42.600
– what’s called a session.

00:10:42.600 --> 00:10:47.120
This is exactly what happens when you, for
example, do a DNS Lookup, or request a webpage.

00:10:47.120 --> 00:10:52.020
These are the bottom five layers of the Open
System Interconnection (OSI) model, a conceptual

00:10:52.029 --> 00:10:55.899
framework for compartmentalizing all these
different network processes.

00:10:55.899 --> 00:10:59.749
Each level has different things to worry about
and solve, and it would be impossible to build

00:10:59.749 --> 00:11:02.029
one huge networking implementation.

00:11:02.029 --> 00:11:06.089
As we’ve talked about all series, abstraction
allows computer scientists and engineers to

00:11:06.089 --> 00:11:10.600
be improving all these different levels of
the stack simultaneously, without being overwhelmed

00:11:10.600 --> 00:11:12.009
by the full complexity.

00:11:12.009 --> 00:11:14.160
And amazingly, we’re not quite done yet…

00:11:14.160 --> 00:11:19.480
The OSI model has two more layers, the Presentation
Layer and the Application Layer, which include

00:11:19.480 --> 00:11:23.800
things like web browsers, Skype, HTML decoding,
streaming movies and more.

00:11:23.800 --> 00:11:25.080
Which we’ll talk about next week.

00:11:25.200 --> 00:11:25.920
See you then.

