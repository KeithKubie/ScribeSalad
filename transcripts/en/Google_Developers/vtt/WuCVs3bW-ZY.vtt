WEBVTT
Kind: captions
Language: en

00:00:01.550 --> 00:00:03.660
The apply function and its
variants are useful for

00:00:03.660 --> 00:00:06.490
applying a function across
an R object.

00:00:06.490 --> 00:00:08.430
We'll consider two variants
of the special class of

00:00:08.430 --> 00:00:09.470
functions--

00:00:09.470 --> 00:00:11.700
apply and tapply--

00:00:11.700 --> 00:00:14.660
and we'll also look at
the by function.

00:00:14.660 --> 00:00:17.210
I'm going to start by loading
in a new data set--

00:00:17.210 --> 00:00:20.676
website revenue for the month
of March for 10 businesses.

00:00:20.676 --> 00:00:24.280
I've used the argument header
equals false because there are

00:00:24.280 --> 00:00:27.630
no call names stored in this
comma separated values file.

00:00:27.630 --> 00:00:30.170
The data in this data matrix
have been stored in a slightly

00:00:30.170 --> 00:00:32.220
unorthodox way--

00:00:32.220 --> 00:00:35.040
each business is represented
as a column and each row

00:00:35.040 --> 00:00:40.280
represents a day, in order, of
March 1 through March 31.

00:00:40.280 --> 00:00:47.380
So for example, on March 3, the
10th business made $23.98.

00:00:47.380 --> 00:00:49.640
It might be helpful for me to
take a quick look at how the

00:00:49.640 --> 00:00:53.640
businesses are doing by taking a
look at their total revenue.

00:00:53.640 --> 00:00:56.450
I could take the sum for each
column using a for loop and

00:00:56.450 --> 00:00:59.430
store that result in a vector,
but this would actually be

00:00:59.430 --> 00:01:01.000
inefficient.

00:01:01.000 --> 00:01:03.650
Instead, I should use the apply
function, which will be

00:01:03.650 --> 00:01:06.910
more compact and also run faster
with larger data sets.

00:01:09.480 --> 00:01:11.940
The apply function is useful for
applying a function across

00:01:11.940 --> 00:01:15.400
either the rows or columns
of a data matrix.

00:01:15.400 --> 00:01:18.580
That is, I might want to apply
a function across each row

00:01:18.580 --> 00:01:22.800
separately or across each
column separately.

00:01:22.800 --> 00:01:25.870
The first argument is the
data matrix itself.

00:01:25.870 --> 00:01:28.320
The second argument is the
dimension number over which to

00:01:28.320 --> 00:01:29.790
apply the function.

00:01:29.790 --> 00:01:33.770
Rows are represented by number
1 and columns by number 2.

00:01:33.770 --> 00:01:36.020
Think of the second argument
as specifying the dimension

00:01:36.020 --> 00:01:38.240
that you actually
want to retain.

00:01:38.240 --> 00:01:42.570
The last argument is the
function to be applied.

00:01:42.570 --> 00:01:44.800
In a similar way, we can also
compute the total revenue for

00:01:44.800 --> 00:01:47.690
all the companies on each day
of the month by applying the

00:01:47.690 --> 00:01:51.170
sum function over each
of the rows.

00:01:51.170 --> 00:01:54.240
Notice that there are some
missing observations.

00:01:54.240 --> 00:01:56.670
If we look into the data more
carefully, we would find that

00:01:56.670 --> 00:02:00.840
there are two missing values,
each in the third column.

00:02:00.840 --> 00:02:03.380
If we know that it's OK to omit
these data, we can tell

00:02:03.380 --> 00:02:06.660
the sum function to ignore the
missing observations using NA

00:02:06.660 --> 00:02:09.550
remove equals true.

00:02:09.550 --> 00:02:11.830
The apply function passes
this argument

00:02:11.830 --> 00:02:14.500
onto the sum function.

00:02:14.500 --> 00:02:17.500
Generally, any extra arguments
to apply will be passed to the

00:02:17.500 --> 00:02:20.650
function you specify in
the third argument.

00:02:20.650 --> 00:02:23.020
In this particular use case,
we probably should want to

00:02:23.020 --> 00:02:25.280
investigate the missing
observations, rather than

00:02:25.280 --> 00:02:27.150
simply ignore them.

00:02:27.150 --> 00:02:30.980
Also, just a technical note, for
this application of apply,

00:02:30.980 --> 00:02:32.340
I could've used either the call

00:02:32.340 --> 00:02:34.340
sums or row sums functions.

00:02:37.510 --> 00:02:39.930
All right, onwards to the
second function--

00:02:39.930 --> 00:02:41.180
tapply.

00:02:41.180 --> 00:02:43.610
To help explain this new
function, I'm going to load in

00:02:43.610 --> 00:02:46.090
a second data set that
summarizes eBay auctions for

00:02:46.090 --> 00:02:49.330
the Mario Kart video
game for the Wii.

00:02:49.330 --> 00:02:52.270
This is a tab-delimited text
file of the data, so I'm going

00:02:52.270 --> 00:02:55.800
to read it in using
the read.delim.

00:02:55.800 --> 00:02:59.700
To keep things simple, let's
focus on three variables--

00:02:59.700 --> 00:03:03.930
wheels, conditions,
and total price.

00:03:03.930 --> 00:03:06.490
The tapply function is similar
to the apply function in that

00:03:06.490 --> 00:03:09.300
it helps aggregate
data efficiently.

00:03:09.300 --> 00:03:11.990
For instance, we could examine
the sum of all of the total

00:03:11.990 --> 00:03:15.070
prices of auctions that were
new and used separately by

00:03:15.070 --> 00:03:17.400
providing the vector for the
total price as the first

00:03:17.400 --> 00:03:21.500
argument, the vector for the
conditions as the second, and

00:03:21.500 --> 00:03:24.610
then the sum function
as the third.

00:03:24.610 --> 00:03:27.410
Just like in apply, the third
argument for the tapply

00:03:27.410 --> 00:03:31.100
function is another function to
be applied across the data.

00:03:31.100 --> 00:03:34.240
However, in this case, the
function is applied to each

00:03:34.240 --> 00:03:36.630
group, where the groups are
specified by the second

00:03:36.630 --> 00:03:41.440
argument, which in this case, is
the condition of the game.

00:03:41.440 --> 00:03:43.370
I'm going to modify this command
a little bit since it

00:03:43.370 --> 00:03:46.700
makes more sense to look at the
average price of the game.

00:03:46.700 --> 00:03:49.220
As you might have anticipated,
the games that are new tend to

00:03:49.220 --> 00:03:51.600
sell for more than the
games that are used.

00:03:51.600 --> 00:03:55.690
Here, the difference
is about $10.

00:03:55.690 --> 00:03:57.660
There's a second important
variable in this application

00:03:57.660 --> 00:03:59.450
that relates to the price--

00:03:59.450 --> 00:04:01.040
the number of steering
wheels that come with

00:04:01.040 --> 00:04:02.900
the game in the auction.

00:04:02.900 --> 00:04:05.040
These steering wheels are a
game accessory the make

00:04:05.040 --> 00:04:07.820
playing Mario Kart
a bit more fun.

00:04:07.820 --> 00:04:10.040
Let's look at the average price
of the auctions with

00:04:10.040 --> 00:04:13.910
different numbers of
wheels included.

00:04:13.910 --> 00:04:17.720
As you might expect, we again
see a steady increase in price

00:04:17.720 --> 00:04:19.230
associated with having
more wheels

00:04:19.230 --> 00:04:21.000
included in the auction--

00:04:21.000 --> 00:04:24.290
about $6 to $10 per wheel.

00:04:24.290 --> 00:04:25.250
Now, there's something
interesting

00:04:25.250 --> 00:04:27.020
to think about here.

00:04:27.020 --> 00:04:29.570
If I consider the influence of
both price and the number of

00:04:29.570 --> 00:04:32.660
wheels simultaneously, what will
this do to the estimated

00:04:32.660 --> 00:04:35.910
cost of a new game versus a used
game, and also the cost

00:04:35.910 --> 00:04:37.440
of an extra wheel?

00:04:37.440 --> 00:04:39.330
A table to look at the average
price across each of the

00:04:39.330 --> 00:04:41.620
combinations of condition and
wheels can be made using the

00:04:41.620 --> 00:04:43.920
tapply function.

00:04:43.920 --> 00:04:46.240
To do this, I'm going to provide
the data frame with

00:04:46.240 --> 00:04:47.950
just the condition and
the wheels columns

00:04:47.950 --> 00:04:50.970
as the second argument.

00:04:50.970 --> 00:04:53.140
Some of these numbers look
a little bit surprising.

00:04:53.140 --> 00:04:56.240
For instance, going from no
wheels to one wheel doesn't

00:04:56.240 --> 00:04:59.190
seem to influence the price
when the game is new.

00:04:59.190 --> 00:05:01.470
If we dig in a little more
here, using the length

00:05:01.470 --> 00:05:04.300
function in place of the mean
function, I can see that one

00:05:04.300 --> 00:05:07.560
of the groups had very few
observations, and so this

00:05:07.560 --> 00:05:09.880
average is probably less
reliable, and this might

00:05:09.880 --> 00:05:12.210
explain the difference.

00:05:12.210 --> 00:05:14.240
If I was going to continue this
analysis, I'd probably

00:05:14.240 --> 00:05:16.680
look into this some more.

00:05:16.680 --> 00:05:19.230
One last function before
we wrap up.

00:05:19.230 --> 00:05:22.330
The by function is a variant of
the tapply function, but,

00:05:22.330 --> 00:05:25.830
by default, it returns a
vector of the results.

00:05:25.830 --> 00:05:28.730
Note that when it is printed,
it won't really look like a

00:05:28.730 --> 00:05:31.510
vector, though you could access
the elements just as if

00:05:31.510 --> 00:05:32.760
it was a vector.

00:05:35.310 --> 00:05:38.900
In the next video, we'll take
a look at three functions--

00:05:38.900 --> 00:05:41.470
with, within, and aggregate.

