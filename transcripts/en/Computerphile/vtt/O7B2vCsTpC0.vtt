WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:02.580
You can get results from this where you can't get results from lasers.

00:00:02.580 --> 00:00:04.240
Lasers get bleaked out in sun light

00:00:04.300 --> 00:00:08.760
I had a colleague that I was speaking to who went to Mexico to do crop scanning

00:00:08.760 --> 00:00:11.820
and he had a laser scanner, and he had to do it at night

00:00:11.820 --> 00:00:14.540
in a tent, because the sun wrecked the laser scanner

00:00:14.540 --> 00:00:17.020
and there were wolves about, and it was a big problem for him.

00:00:17.020 --> 00:00:21.360
If you had just used a camera, you might have found that you've got to work harder on your stereo matching

00:00:21.360 --> 00:00:24.060
but there are things it will do that laser scanners can't

00:00:24.060 --> 00:00:26.340
so there's going to be a time for one and a time for the other

00:00:26.340 --> 00:00:30.920
The top tip for the day is: "Use a stereo pair of cameras, don't get eaten by wolves."

00:00:31.560 --> 00:00:33.480
Yeah, that- that will be my advise.

00:00:33.940 --> 00:00:36.740
[typing sounds]

00:00:36.740 --> 00:00:39.100
We find corresponding points in our left and right eyes

00:00:39.100 --> 00:00:43.080
and then we can use that to work out how far away from us something is.

00:00:43.080 --> 00:00:46.640
When we have an individual eye on its own, we have some monocular cues

00:00:46.640 --> 00:00:49.340
some monocular clues, as it were, that we can use

00:00:49.720 --> 00:00:52.840
to find out depth, or at least to estimate depth

00:00:52.840 --> 00:00:55.160
but true 3D only comes from two eyes.

00:00:55.160 --> 00:00:59.380
In a single eye, you might have something like: the object is bigger than it was before

00:00:59.500 --> 00:01:01.180
so it's coming towards us

00:01:01.180 --> 00:01:03.540
or one object is passing our view faster than another

00:01:03.540 --> 00:01:07.360
and that parallax. And that gives us a clue that it's in front of something else.

00:01:07.360 --> 00:01:08.900
Occlusion is an obvious one.

00:01:08.900 --> 00:01:12.440
If something actually is in front of something else, we can make some reasoning about that.

00:01:12.640 --> 00:01:17.040
So, our brains will take those monocular clues...cues, and

00:01:17.040 --> 00:01:19.460
do something with them and work out what's going on.

00:01:19.740 --> 00:01:24.180
But when we have two eyes, then we can do actual 3D depth perception.

00:01:24.560 --> 00:01:28.420
Uhm, the classic example is, of course, magic eye things that were around in the 90's.

00:01:28.420 --> 00:01:30.440
I'm not very good at seeing those.

00:01:30.600 --> 00:01:33.500
I kind of cross-eyed and it kind of works but it's all a bit backwards.

00:01:33.500 --> 00:01:36.780
But the idea there is that we trick our eyes into seeing slightly different images

00:01:36.780 --> 00:01:38.300
and that gives us a perception of depth.

00:01:38.520 --> 00:01:43.000
If we've got a stereo system, what we...the main thing we have to know is where are our cameras.

00:01:43.000 --> 00:01:46.480
Our brains know where our eyes are because they've learned it

00:01:46.720 --> 00:01:50.660
but one's here and one's here, you know. People maybe have slightly further pair of eyes.

00:01:51.140 --> 00:01:53.860
uhm, but your brain will account for this.

00:01:53.860 --> 00:01:56.620
If we're going to do this mathematically using a computer, we need to know

00:01:56.700 --> 00:01:58.300
where these cameras are.

00:01:58.300 --> 00:02:01.240
If you know that we've seen an object in one view

00:02:01.240 --> 00:02:05.140
and then we go into the other view, we need to try and find corresponding points.

00:02:05.140 --> 00:02:08.680
Without knowing where your cameras were, your search space has increased.

00:02:08.680 --> 00:02:11.560
You've got to look at the whole image. Maybe you get points confused.

00:02:11.560 --> 00:02:14.120
Maybe there's a corner that appears multiple times

00:02:14.120 --> 00:02:15.980
because it's like a book and it has four corners.

00:02:15.980 --> 00:02:18.660
And then you've got to try and resolve which one's which.

00:02:19.100 --> 00:02:23.260
Uhm...And some of these features won't appear in both views because of occlusion.

00:02:23.460 --> 00:02:26.740
So, if you take your left and right view of my hands,

00:02:26.740 --> 00:02:31.000
you know, some of my left hand is going to be visible in one eye that isn't in the other eye

00:02:31.000 --> 00:02:32.460
and that's a huge problem.

00:02:32.460 --> 00:02:36.400
So, what we do is, we start with a process called camera calibration.

00:02:36.400 --> 00:02:39.000
We have two cameras that are nearly next to each other

00:02:39.000 --> 00:02:41.520
and we don't know exactly what their angles are

00:02:41.520 --> 00:02:43.680
but we can find that out by using camera calibration.

00:02:43.680 --> 00:02:46.740
We have to take the picture from both cameras at the exact same time

00:02:46.740 --> 00:02:49.020
because otherwise the scene is going to have changed.

00:02:49.020 --> 00:02:51.620
So, we'll assume we're taking pictures with the cameras at the same time,

00:02:51.620 --> 00:02:55.160
something that isn't true of some visual reconstruction system.

00:02:55.160 --> 00:02:58.360
We take a picture of this board and we calibrate the positions of our cameras

00:02:58.680 --> 00:03:02.800
and then we move the cameras and take a picture of something we're trying to reconstruct in 3D.

00:03:02.800 --> 00:03:07.240
So then we have a situation where we have one image here

00:03:08.040 --> 00:03:10.280
on this side, ugh, left- left view

00:03:10.620 --> 00:03:13.660
and we have an image here [marker sounds]

00:03:13.660 --> 00:03:14.740
which is our right view

00:03:14.960 --> 00:03:18.880
In our previous video on the Raytrix, we talked about lens and system in front.

00:03:18.880 --> 00:03:20.680
We will do away with that just for simplicity's sake

00:03:21.180 --> 00:03:22.780
and we'll say that these are pinhole cameras.

00:03:22.780 --> 00:03:25.920
Because we're using a pinhole camera, we'll send our cameras somewhere behind

00:03:26.360 --> 00:03:27.560
this camera plane

00:03:27.800 --> 00:03:31.820
So, some object in the world projects its light down here

00:03:31.820 --> 00:03:35.200
intersects our image plane and then goes into the camera origin like this.

00:03:35.200 --> 00:03:37.480
We have optical center of our camera and any light rays

00:03:37.480 --> 00:03:39.260
coming from this object here

00:03:39.380 --> 00:03:41.660
are going to travel down this ray

00:03:41.660 --> 00:03:42.860
intersect our image plane

00:03:42.860 --> 00:03:45.780
and then go into the optical center of the camera.

00:03:45.780 --> 00:03:49.340
And this will happen for any points in our scene that this camera can see.

00:03:49.340 --> 00:03:52.000
We want to say, we've got a point on this image plane

00:03:52.000 --> 00:03:56.100
Where did it come from? And the crucial problem is that it could have come from here

00:03:56.100 --> 00:03:59.220
or it could have come from here, or here, or here, or anywhere along this ray.

00:03:59.900 --> 00:04:01.020
And we don't know

00:04:01.020 --> 00:04:02.360
and that's what we're trying to find out.

00:04:02.360 --> 00:04:03.740
That's the depth problem.

00:04:04.440 --> 00:04:07.880
Now, we also have an optical center for this camera.

00:04:07.880 --> 00:04:11.660
which is here, and rays will be coming out and intersecting through these points

00:04:12.180 --> 00:04:13.840
So, if we knew

00:04:14.160 --> 00:04:16.080
that this point in this image

00:04:16.080 --> 00:04:17.380
was this point in this image

00:04:17.380 --> 00:04:20.100
then we just project the rays. We find whether they intersect

00:04:20.100 --> 00:04:22.040
and that's...we use simple triangulation, simple maths

00:04:22.740 --> 00:04:25.380
to work out how far away that position is.

00:04:25.380 --> 00:04:27.120
We don't know what point that is

00:04:27.120 --> 00:04:30.000
because it's going to change- it might not be visible in this image.

00:04:30.000 --> 00:04:31.060
That's one problem.

00:04:31.060 --> 00:04:32.680
The search base is quite large.

00:04:32.680 --> 00:04:34.760
Reliably finding the exact point as this

00:04:34.760 --> 00:04:37.160
in a different image when it might have rotated and changed slightly

00:04:37.160 --> 00:04:39.240
is a lot of work in two dimensions.

00:04:39.240 --> 00:04:42.040
And you've got to do that for every single pixel in this image.

00:04:42.040 --> 00:04:43.980
You've got to find maybe one that tries to match in here.

00:04:44.480 --> 00:04:46.840
That's a lot of work to do, so we don't tend to do that.

00:04:46.940 --> 00:04:48.060
We use something

00:04:48.060 --> 00:04:50.140
a nice observation called Epipolar Geometry

00:04:50.140 --> 00:04:51.720
to try and make this a little bit easier.

00:04:51.720 --> 00:04:53.380
If this is our intersection point

00:04:54.020 --> 00:04:54.520
x1

00:04:54.800 --> 00:04:56.480
and this is some object x,

00:04:56.480 --> 00:04:57.460
all the way out there

00:04:57.460 --> 00:04:59.460
and we're trying to find out how far away it is

00:04:59.460 --> 00:05:01.420
We need to try and make our search in this image

00:05:01.420 --> 00:05:02.400
a little bit easier

00:05:02.400 --> 00:05:05.740
So what we do is, we imagine that this is part of a big triangle

00:05:05.740 --> 00:05:07.900
coming out. So this is one corner of our triangle

00:05:07.960 --> 00:05:09.000
This is another

00:05:09.000 --> 00:05:09.980
or it could be this

00:05:09.980 --> 00:05:11.400
This x is somewhere along here

00:05:11.400 --> 00:05:12.620
and comes in through

00:05:12.640 --> 00:05:13.680
this point. So,

00:05:13.680 --> 00:05:14.820
Let me get a different pen

00:05:14.820 --> 00:05:16.120
That may make things easier

00:05:16.340 --> 00:05:17.380
We can draw a ray

00:05:17.380 --> 00:05:19.580
that goes from this optical center

00:05:19.980 --> 00:05:20.480
to here

00:05:20.480 --> 00:05:22.560
and from this optical center to here

00:05:22.560 --> 00:05:24.440
and from this optical center to here

00:05:24.940 --> 00:05:25.900
to any of these

00:05:26.220 --> 00:05:26.720
points

00:05:26.880 --> 00:05:28.880
and they intersect this image

00:05:29.140 --> 00:05:29.780
like this

00:05:29.780 --> 00:05:32.140
and what this is is our epipolar line

00:05:32.820 --> 00:05:33.860
so this line ere

00:05:34.500 --> 00:05:36.100
through these points is

00:05:36.100 --> 00:05:37.720
all the possible projections

00:05:37.880 --> 00:05:39.640
of this ray into this image

00:05:39.840 --> 00:05:42.320
So now, we've simplified our problem

00:05:42.320 --> 00:05:44.120
because we know where these cameras are

00:05:44.120 --> 00:05:45.880
we can say, we're trying to find this

00:05:45.880 --> 00:05:47.520
position x1 in this image

00:05:47.520 --> 00:05:49.640
by knowing that it's going to be somewhere along here

00:05:49.640 --> 00:05:51.140
we know it's goint to be in this

00:05:51.440 --> 00:05:52.080
line here

00:05:52.080 --> 00:05:53.760
so we've got a limited set of pixels

00:05:53.760 --> 00:05:54.900
we now have to look for

00:05:54.900 --> 00:05:56.040
so what we need to do

00:05:56.040 --> 00:05:57.880
is go for each of these pixels in a list

00:05:57.880 --> 00:06:00.040
and say, "Which one of them looks most likethis?"

00:06:00.180 --> 00:06:01.380
and then we find it

00:06:01.380 --> 00:06:03.460
and then we find our triangulation point

00:06:03.460 --> 00:06:04.920
and we find out how far it is away

00:06:04.920 --> 00:06:07.160
is this because you know where the cameras are? Yes.

00:06:07.160 --> 00:06:09.640
It's only possible because we know where the cameras are

00:06:09.980 --> 00:06:10.700
if we don't

00:06:10.700 --> 00:06:12.940
then we have to search through the whole of the other image

00:06:12.940 --> 00:06:14.000
and it takes ages

00:06:14.000 --> 00:06:16.240
one edge of our triangle's between the optical center of the cameras

00:06:16.240 --> 00:06:18.720
one is through this point and out into the world

00:06:18.860 --> 00:06:20.220
and the other is some

00:06:20.220 --> 00:06:21.280
value we don't know

00:06:21.280 --> 00:06:23.360
which is going to be along this line

00:06:23.360 --> 00:06:25.520
because it's just a flat triangle cutting through this image

00:06:25.520 --> 00:06:26.920
which makes it a lot easier

00:06:26.920 --> 00:06:28.600
to find out where these things are

00:06:28.600 --> 00:06:31.560
what we will do, if we're writing a reconstruction algorithm

00:06:31.560 --> 00:06:33.440
is that every point in this image

00:06:33.440 --> 00:06:34.740
and maybe we'll do it backwards

00:06:34.740 --> 00:06:35.840
as well for completeness

00:06:35.840 --> 00:06:37.280
for every point in this image

00:06:37.280 --> 00:06:40.000
we will try to find a point along its particular

00:06:40.040 --> 00:06:41.140
epipolar line

00:06:41.480 --> 00:06:42.840
that best matches it

00:06:42.840 --> 00:06:45.200
and then, of course, you can go much more complicated than

00:06:45.200 --> 00:06:46.860
that. You can try and find

00:06:47.700 --> 00:06:49.060
the global image map

00:06:49.060 --> 00:06:50.200
between here and here

00:06:50.200 --> 00:06:52.400
which is a combination of not only

00:06:52.400 --> 00:06:53.740
the best feature matches

00:06:54.200 --> 00:06:54.760
but also

00:06:55.280 --> 00:06:55.780
uhm

00:06:55.780 --> 00:06:58.140
you know, it needs to be nice and smooth

00:06:58.140 --> 00:07:00.140
objects don't tend to go back and forth a lot

00:07:00.140 --> 00:07:01.820
so you want them to be rounded

00:07:01.820 --> 00:07:02.840
so you have to bear that in mind

00:07:02.980 --> 00:07:04.020
finding a point

00:07:04.440 --> 00:07:05.320
in this image

00:07:05.320 --> 00:07:07.440
based on another one from this image

00:07:07.440 --> 00:07:08.660
is called the correspondence problem

00:07:08.660 --> 00:07:10.460
and that's really the core of what

00:07:10.460 --> 00:07:12.000
of what we're solving here

00:07:13.820 --> 00:07:14.940
[typing sounds]

00:07:14.940 --> 00:07:16.900
finding the included pixels is hard

00:07:16.900 --> 00:07:18.320
and there are approaches based on this

00:07:18.320 --> 00:07:22.060
where they not only try to find what we call the disparity map

00:07:22.060 --> 00:07:23.920
the difference between

00:07:24.200 --> 00:07:25.240
this x and this x

