WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:48.306
[MUSIC PLAYING]

00:00:56.772 --> 00:00:58.130
Hey, everyone.

00:00:58.130 --> 00:00:59.180
My name is Andrew Wales.

00:00:59.180 --> 00:01:02.300
I'm a Developer Programs
Engineer on the Google

00:01:02.300 --> 00:01:05.640
Analytics Developer
Relations Team.

00:01:05.640 --> 00:01:08.590
And I'm here to talk today in
this episode of "Off the

00:01:08.590 --> 00:01:13.060
Charts" all about exception
tracking and why you guys

00:01:13.060 --> 00:01:13.800
should be doing it.

00:01:13.800 --> 00:01:16.340
And in particular, I'm going to
show you five reasons why I

00:01:16.340 --> 00:01:20.730
think you should be measuring
exceptions today.

00:01:20.730 --> 00:01:23.470
So just to take a step back and
maybe get some context on

00:01:23.470 --> 00:01:25.860
the problem as a whole.

00:01:25.860 --> 00:01:31.350
So all apps, obviously, crash
at some point, right?

00:01:31.350 --> 00:01:33.760
There's no perfectly
stable app.

00:01:33.760 --> 00:01:35.900
So all of our apps are going
to have useful crash data

00:01:35.900 --> 00:01:38.200
that's going somewhere.

00:01:38.200 --> 00:01:41.230
And what I'm going to try to
show you is that crashes are

00:01:41.230 --> 00:01:43.120
going to provide an opportunity
for us to improve

00:01:43.120 --> 00:01:44.405
our app experience
for end users.

00:01:47.140 --> 00:01:50.060
And by measuring these crashes,
we can make better

00:01:50.060 --> 00:01:53.370
products, we can make more
money, obviously, so it's a

00:01:53.370 --> 00:01:56.020
win-win for developers
and users.

00:01:58.680 --> 00:02:01.050
So before we get started talking
about the five reasons

00:02:01.050 --> 00:02:03.500
I think you should be doing
exception measurement, I just

00:02:03.500 --> 00:02:07.820
wanted to cover some exception
measurement basics.

00:02:07.820 --> 00:02:09.280
So what is exception
measurement?

00:02:09.280 --> 00:02:10.740
Maybe you've heard that
term before, but

00:02:10.740 --> 00:02:12.650
you've never done it.

00:02:12.650 --> 00:02:15.760
Basically, what I'm talking
about is measuring fatal

00:02:15.760 --> 00:02:18.460
crashes and non-fatal
exceptions in

00:02:18.460 --> 00:02:21.320
native mobile apps.

00:02:21.320 --> 00:02:23.650
And in particular, in Google
Analytics, this is really

00:02:23.650 --> 00:02:27.460
about seeing crashes and
exceptions in context with the

00:02:27.460 --> 00:02:30.880
rest of your app usage
and e-commerce or

00:02:30.880 --> 00:02:33.090
in-app payments data.

00:02:33.090 --> 00:02:36.060
There's a lot of solutions out
there to do different kinds of

00:02:36.060 --> 00:02:37.070
crash measurement.

00:02:37.070 --> 00:02:39.530
And if you're an Android
developer, for example, you

00:02:39.530 --> 00:02:41.190
may already be getting
crash and [? ANR ?]

00:02:41.190 --> 00:02:44.340
data in the Google Play
Developer Console.

00:02:44.340 --> 00:02:48.163
So what really sets analytics
apart is that you're going to

00:02:48.163 --> 00:02:51.360
be able to see the crash data in
context with all the other

00:02:51.360 --> 00:02:55.290
app usage data as well as
your e-commerce data.

00:02:55.290 --> 00:02:57.580
And this is actually
really powerful.

00:02:57.580 --> 00:03:00.300
And I'll show you in a little
bit what you can do when both

00:03:00.300 --> 00:03:01.290
of those things are combined.

00:03:01.290 --> 00:03:05.060
But one of the examples is you
can see the effect of a crash,

00:03:05.060 --> 00:03:07.950
for example, on e-commerce
payments or in-app payments.

00:03:10.780 --> 00:03:15.330
So there's some prerequisites
for getting started with doing

00:03:15.330 --> 00:03:16.790
crash and exception measurement
that I just wanted

00:03:16.790 --> 00:03:17.620
to go over.

00:03:17.620 --> 00:03:20.300
Luckily, there's really
only two.

00:03:20.300 --> 00:03:23.510
Number one is that you should
download the GA SDK for

00:03:23.510 --> 00:03:25.570
Android or iOS.

00:03:25.570 --> 00:03:27.850
And you can do that at our
developer site, which is at

00:03:27.850 --> 00:03:31.920
developers.googl
e.com/analytics.

00:03:31.920 --> 00:03:33.760
And then, number two is just
follow the Getting Started

00:03:33.760 --> 00:03:35.520
Guide if you haven't already.

00:03:35.520 --> 00:03:38.150
That's going to get the SDK
implemented in your app.

00:03:38.150 --> 00:03:39.800
It's going to get some
of the basic

00:03:39.800 --> 00:03:41.420
measurement features in place.

00:03:41.420 --> 00:03:44.290
And actually, if you complete
that Getting Started Guide,

00:03:44.290 --> 00:03:47.040
you'll already have implemented
automatic crash

00:03:47.040 --> 00:03:48.970
measurement, which I'm going to
talk about in a little bit.

00:03:48.970 --> 00:03:53.070
So you'll have a leg up, and
you'll already know how easy

00:03:53.070 --> 00:03:54.320
it is to implement this stuff.

00:03:56.970 --> 00:04:03.460
So one more bit of context
before we jump into it.

00:04:03.460 --> 00:04:06.520
Exceptions in Google Analytics,
they're comprised

00:04:06.520 --> 00:04:08.170
of two collection fields.

00:04:08.170 --> 00:04:10.990
So this is the stuff that you're
actually sending to GA.

00:04:10.990 --> 00:04:12.400
So the first field
is a description

00:04:12.400 --> 00:04:14.990
field, and it's a string.

00:04:14.990 --> 00:04:16.790
And it's, as you might guess, a

00:04:16.790 --> 00:04:19.089
description of the exception.

00:04:19.089 --> 00:04:22.890
There's a 100 character
limit on this field.

00:04:22.890 --> 00:04:26.270
So you can't take an entire
stack trace, dump it in, and

00:04:26.270 --> 00:04:27.820
send it to GA.

00:04:27.820 --> 00:04:30.770
And I'll talk about later,
actually, why you won't want

00:04:30.770 --> 00:04:33.090
to do that for some
other reasons.

00:04:33.090 --> 00:04:35.820
It's really meant to be a pretty
short description of

00:04:35.820 --> 00:04:38.540
the exception that occurred.

00:04:38.540 --> 00:04:40.810
The second field that you send
when you measure an exception

00:04:40.810 --> 00:04:43.330
is this isFatal field.

00:04:43.330 --> 00:04:46.040
And this is a Boolean and just
indicates whether or not the

00:04:46.040 --> 00:04:48.940
exception was fatal, ie,
was it a crash or

00:04:48.940 --> 00:04:50.860
whether it was a non-fatal.

00:04:50.860 --> 00:04:52.255
And so we're just going to
call it an exception.

00:04:54.830 --> 00:04:57.010
As far as your reporting options
go, so once you've got

00:04:57.010 --> 00:04:59.280
your data, we have
a brand new--

00:04:59.280 --> 00:05:01.620
well, it was new a little while
ago, new if you haven't

00:05:01.620 --> 00:05:03.550
used our app reporting.

00:05:03.550 --> 00:05:05.670
But it's a crashes and
exceptions report.

00:05:05.670 --> 00:05:08.510
And this is really going to be
the go to for most people to

00:05:08.510 --> 00:05:12.390
get data on their crashes and
exceptions and see how that's

00:05:12.390 --> 00:05:15.730
trending by release version,
et cetera.

00:05:15.730 --> 00:05:19.810
And that's in the engagement
section on the left-hand nav.

00:05:19.810 --> 00:05:22.530
And then, additionally, we have
the exception description

00:05:22.530 --> 00:05:26.410
dimension and the crashes and
exceptions metrics, which you

00:05:26.410 --> 00:05:30.800
can use pretty much however you
want in custom reports, in

00:05:30.800 --> 00:05:34.690
dashboards, and as
custom segments.

00:05:34.690 --> 00:05:37.700
So if you want to go beyond
what's in the crash as an

00:05:37.700 --> 00:05:40.040
exception report, and I'll show
you some examples of that

00:05:40.040 --> 00:05:42.780
today, you can definitely do
that using these dimensions

00:05:42.780 --> 00:05:44.860
and metrics.

00:05:44.860 --> 00:05:47.380
Just one note for those people
are using the Core Reporting

00:05:47.380 --> 00:05:50.900
API, these dimensions and
metrics are not yet available,

00:05:50.900 --> 00:05:52.150
but they will be coming soon.

00:05:55.010 --> 00:05:58.790
So with that said, let's jump
into the meat of this.

00:05:58.790 --> 00:06:01.960
So five reasons you should be
measuring exceptions today

00:06:01.960 --> 00:06:04.600
using Google Mobile
App Analytics.

00:06:04.600 --> 00:06:07.320
So the first reason I'm going
to talk about is automated

00:06:07.320 --> 00:06:08.230
crash reporting.

00:06:08.230 --> 00:06:10.950
Basically, you should be
measuring this data because it

00:06:10.950 --> 00:06:15.740
is dead simple to
send it to GA.

00:06:15.740 --> 00:06:19.460
Number two, you want to know
how stability is trending

00:06:19.460 --> 00:06:20.700
across your releases.

00:06:20.700 --> 00:06:23.600
So are new releases introducing
more bugs than

00:06:23.600 --> 00:06:26.800
they're resolving
or vice versa?

00:06:26.800 --> 00:06:29.410
This is a really nice thing to
be able to know so that your

00:06:29.410 --> 00:06:34.560
team can check on it as you put
out additional releases.

00:06:34.560 --> 00:06:37.210
Three, so you can find out
what crashes are actually

00:06:37.210 --> 00:06:38.220
costing you.

00:06:38.220 --> 00:06:41.910
And costs aren't always in app
revenue or in-app payments,

00:06:41.910 --> 00:06:44.390
although very often they are.

00:06:44.390 --> 00:06:47.840
But that could also be things
like user engagement metrics.

00:06:47.840 --> 00:06:49.620
You might see those suffer,
and you might consider

00:06:49.620 --> 00:06:50.770
that to be a cost.

00:06:50.770 --> 00:06:55.340
So it's interesting to know
the relative cost of each

00:06:55.340 --> 00:06:57.640
exception to figure out what
impact it's having on your

00:06:57.640 --> 00:06:58.870
user experience.

00:06:58.870 --> 00:07:01.730
This can also help you
prioritize fixing certain

00:07:01.730 --> 00:07:04.470
issues as well.

00:07:04.470 --> 00:07:06.460
Number four is going
to be see which

00:07:06.460 --> 00:07:08.360
devices are least stable.

00:07:08.360 --> 00:07:10.940
So especially in the Android
world, there's a ton of

00:07:10.940 --> 00:07:13.620
devices out there that your
app may be running on, and

00:07:13.620 --> 00:07:15.990
it's really difficult to be able
to test on all of them

00:07:15.990 --> 00:07:17.460
before you release.

00:07:17.460 --> 00:07:22.940
So being able to see by device
easily where the crashes are

00:07:22.940 --> 00:07:27.120
occurring can give you an idea
for, if some device is

00:07:27.120 --> 00:07:29.830
crashing a ton or your app's
crashing a ton on a device, it

00:07:29.830 --> 00:07:31.840
might be something you want to
look into testing before you

00:07:31.840 --> 00:07:33.400
do your next release.

00:07:33.400 --> 00:07:36.120
So that can be really
helpful as well.

00:07:36.120 --> 00:07:40.340
And number five, you can get
insight into trends of caught

00:07:40.340 --> 00:07:42.060
exceptions as well.

00:07:42.060 --> 00:07:43.080
So this is--

00:07:43.080 --> 00:07:45.790
I'm going to be going back and
forth between caught and

00:07:45.790 --> 00:07:47.430
uncaught exceptions.

00:07:47.430 --> 00:07:51.320
Uncaught exceptions are what
I would call crashes where

00:07:51.320 --> 00:07:52.910
there's no handling
code, so the app,

00:07:52.910 --> 00:07:55.080
basically, just crashes.

00:07:55.080 --> 00:07:56.550
But you are going to have a lot
of caught exceptions in

00:07:56.550 --> 00:07:57.900
your app as well.

00:07:57.900 --> 00:08:01.110
And some of these may be really
valuable to track and

00:08:01.110 --> 00:08:01.790
measure as well.

00:08:01.790 --> 00:08:04.850
And you can do that
using the SDKs.

00:08:04.850 --> 00:08:09.000
So let's jump right into
the very first reason--

00:08:09.000 --> 00:08:12.190
automated crash reporting.

00:08:12.190 --> 00:08:16.320
So, basically, it is-- and I may
be exaggerating a little

00:08:16.320 --> 00:08:19.790
bit-- but it's dead simple to
get this implemented whether

00:08:19.790 --> 00:08:22.730
or not you're using EasyTracker
for Android, or

00:08:22.730 --> 00:08:25.800
you're using an advanced
implementation on Android, or

00:08:25.800 --> 00:08:27.760
if you're using iOS.

00:08:27.760 --> 00:08:29.260
So let me show you
how easy this is.

00:08:29.260 --> 00:08:34.650
So with EasyTracker, all you
need to do is add just this

00:08:34.650 --> 00:08:39.039
one line to your XML file--
that's usually analytics.xml,

00:08:39.039 --> 00:08:41.830
but it could be anywhere--

00:08:41.830 --> 00:08:46.300
that just basically says turn on
report uncaught exceptions.

00:08:46.300 --> 00:08:47.130
And that's all you need to do.

00:08:47.130 --> 00:08:48.610
It's just one line.

00:08:48.610 --> 00:08:51.160
It goes with the other
configuration settings then

00:08:51.160 --> 00:08:53.850
you have in your analytics
XML file or

00:08:53.850 --> 00:08:55.760
wherever you store them.

00:08:55.760 --> 00:08:56.580
And that's pretty much it.

00:08:56.580 --> 00:08:59.860
If you did nothing else and
just released your app, at

00:08:59.860 --> 00:09:04.540
least you would get data back
that shows you crashes, a

00:09:04.540 --> 00:09:07.180
description of the crash, and
you'd be able to do most of

00:09:07.180 --> 00:09:08.920
the things that I'm going to
mention today where you can

00:09:08.920 --> 00:09:15.030
segment it by device, and by
app version, et cetera.

00:09:15.030 --> 00:09:15.980
So super easy.

00:09:15.980 --> 00:09:19.740
One line and you're done
for EasyTracker.

00:09:19.740 --> 00:09:22.620
But even without EasyTracker,
if you have an advanced

00:09:22.620 --> 00:09:27.750
implementation, it's actually
still pretty simple.

00:09:27.750 --> 00:09:31.570
In the SDK, we provide a class
called ExceptionReporter.

00:09:31.570 --> 00:09:34.690
And you, basically, would just
create a new instance of

00:09:34.690 --> 00:09:37.620
ExceptionReporter,
and you hand it a

00:09:37.620 --> 00:09:39.310
couple different arguments.

00:09:39.310 --> 00:09:41.410
One of which I wanted to point
out here was that you actually

00:09:41.410 --> 00:09:45.800
give it the current default
uncaught ExceptionHandler.

00:09:45.800 --> 00:09:48.050
And then you set that
ExceptionReporter to be your

00:09:48.050 --> 00:09:50.060
new default uncaught
ExceptionHandler.

00:09:50.060 --> 00:09:53.770
So what's going to happen is
that when there's an uncaught

00:09:53.770 --> 00:09:56.470
exception, our exception
reporter, the GA

00:09:56.470 --> 00:09:58.690
ExceptionReporter, is now
going to pick that up.

00:09:58.690 --> 00:10:00.160
We're going to track an
exception, we're going to

00:10:00.160 --> 00:10:03.290
dispatch it, and then we're
going to hand it over to

00:10:03.290 --> 00:10:06.600
whatever the default exception
tracker was before.

00:10:06.600 --> 00:10:09.380
So if you haven't done anything
crazy or custom,

00:10:09.380 --> 00:10:12.260
that's basically going to mean
that the crash data is going

00:10:12.260 --> 00:10:15.160
to get sent to Google Play, if
need be, and then the app's

00:10:15.160 --> 00:10:18.360
going to exit just as normal.

00:10:18.360 --> 00:10:19.410
So that's pretty much it.

00:10:19.410 --> 00:10:24.150
Even without EasyTracker, it's
still pretty simple.

00:10:24.150 --> 00:10:26.190
And most of the examples
I'm going to give

00:10:26.190 --> 00:10:27.920
today are for Android.

00:10:27.920 --> 00:10:31.460
But I did want to show a quick
example for iOS just to show

00:10:31.460 --> 00:10:34.080
you that just like with
EasyTracker, it's actually

00:10:34.080 --> 00:10:39.050
just one line of code to get
automatic crash tracking up

00:10:39.050 --> 00:10:40.180
and running.

00:10:40.180 --> 00:10:42.150
So you can see here
you just add this

00:10:42.150 --> 00:10:45.310
line to your app delegate.

00:10:45.310 --> 00:10:49.840
And it's very similar to the
XML file in Android or very

00:10:49.840 --> 00:10:50.300
similar to that.

00:10:50.300 --> 00:10:53.045
You just turn it on to send
uncaught exceptions.

00:10:57.390 --> 00:11:01.320
So in terms of what's actually
sent out by this automatic

00:11:01.320 --> 00:11:04.630
exception reporting, GA is going
to send the exception

00:11:04.630 --> 00:11:08.800
type, the method name, the class
name, and the thread

00:11:08.800 --> 00:11:12.490
name, where we can,
automatically.

00:11:12.490 --> 00:11:13.340
We don't--

00:11:13.340 --> 00:11:15.280
well, I'll get to that
in a second.

00:11:15.280 --> 00:11:17.910
Additionally, all these
automatically reported crashes

00:11:17.910 --> 00:11:19.710
are going to be considered
fatal.

00:11:19.710 --> 00:11:22.910
Because these are all crashes
that were picked up by an

00:11:22.910 --> 00:11:27.050
uncaught ExceptionHandler, so we
consider that to be fatal.

00:11:27.050 --> 00:11:28.600
And this is the point
I wanted to get to.

00:11:28.600 --> 00:11:31.580
We don't really recommend
sending the stack trace reason

00:11:31.580 --> 00:11:34.040
or trying to stuff a whole bunch
of information from the

00:11:34.040 --> 00:11:37.410
stack trace into the
description field.

00:11:37.410 --> 00:11:39.320
Number one, because the
description field is actually

00:11:39.320 --> 00:11:39.990
quite small.

00:11:39.990 --> 00:11:41.860
It's only 100 characters.

00:11:41.860 --> 00:11:45.580
But number two, and maybe more
importantly, that stack trace

00:11:45.580 --> 00:11:48.520
may contain some sensitive
personal information or

00:11:48.520 --> 00:11:50.650
personally identifiable
information.

00:11:50.650 --> 00:11:55.570
And it is a big no-no to send
that kind of data to GA.

00:11:55.570 --> 00:11:58.710
So our solution sends exception
type, method name,

00:11:58.710 --> 00:12:01.080
class name, and thread name.

00:12:01.080 --> 00:12:04.030
And if you're doing this on your
own, I would recommend

00:12:04.030 --> 00:12:06.190
that you send similar fields.

00:12:08.880 --> 00:12:11.400
So that's automatic exception
tracking.

00:12:11.400 --> 00:12:13.870
So no matter how you've
implemented our SDKs, it's

00:12:13.870 --> 00:12:15.780
either going to be one line
of code or maybe two

00:12:15.780 --> 00:12:17.210
lines of code tops.

00:12:17.210 --> 00:12:19.320
And you don't have to worry
about it from then on.

00:12:19.320 --> 00:12:22.080
It's going to collect data on
all of these crashes and send

00:12:22.080 --> 00:12:25.610
it back to your GA account where
you can then segment it

00:12:25.610 --> 00:12:27.050
by all these great dimensions
that we'll

00:12:27.050 --> 00:12:28.730
talk about in a bit.

00:12:28.730 --> 00:12:33.440
So in sum, you should do it
because it is very easy, and

00:12:33.440 --> 00:12:37.010
everybody should be
getting this data.

00:12:37.010 --> 00:12:39.030
But let's talk a little bit
about what you can do with the

00:12:39.030 --> 00:12:40.680
data once you have it.

00:12:40.680 --> 00:12:43.880
So the second reason is that you
want to know how stability

00:12:43.880 --> 00:12:45.160
is trending across
your releases.

00:12:48.010 --> 00:12:50.990
So I mentioned it earlier, but
basically, the idea here is

00:12:50.990 --> 00:12:54.490
that you want to know if a new
release is actually producing

00:12:54.490 --> 00:12:57.160
a whole bunch more crashes, if
it's less stable than a prior

00:12:57.160 --> 00:12:58.570
release, or vice versa.

00:12:58.570 --> 00:13:01.760
If you had a bunch of crashes
in one release, and you put

00:13:01.760 --> 00:13:04.160
out a bunch of fixes in your
next, you want to see that

00:13:04.160 --> 00:13:04.870
number come down.

00:13:04.870 --> 00:13:06.270
And it's very useful
to be able to track

00:13:06.270 --> 00:13:08.000
progress against that.

00:13:08.000 --> 00:13:12.050
So what we want to see in GA is
crashes and exceptions by

00:13:12.050 --> 00:13:14.220
app version.

00:13:14.220 --> 00:13:16.190
And this is something that
we make it really easy.

00:13:16.190 --> 00:13:18.730
Actually, the default view of
the crashes and exceptions

00:13:18.730 --> 00:13:22.380
report is going to show you
a breakdown of crashes and

00:13:22.380 --> 00:13:27.060
exceptions as metrics and then
app version as the dimension.

00:13:27.060 --> 00:13:30.700
So we can see in this example
here, there's an app.

00:13:30.700 --> 00:13:35.460
This version 1.1.7 has a ton
of crashes and exceptions.

00:13:35.460 --> 00:13:40.330
And our app version 2 has far
fewer-- only 91 compared to

00:13:40.330 --> 00:13:41.510
about 7,000.

00:13:41.510 --> 00:13:43.820
So it could be that version 2
just came out, so maybe you've

00:13:43.820 --> 00:13:44.910
got to give it more time.

00:13:44.910 --> 00:13:46.870
But it looks like we're making
some pretty good progress here

00:13:46.870 --> 00:13:49.670
in terms of making a more
stable experience in

00:13:49.670 --> 00:13:50.920
this version 2.

00:13:53.190 --> 00:13:55.800
Now, you can take this
a little bit further.

00:13:55.800 --> 00:13:59.500
You can take the same report and
segment it by platform or

00:13:59.500 --> 00:14:02.760
OS version as the secondary
dimension.

00:14:02.760 --> 00:14:06.690
And this gives you even more
granular insight into where

00:14:06.690 --> 00:14:09.560
crashes are coming from in
each of your releases.

00:14:09.560 --> 00:14:14.690
So in this example, you can see
here we've still got app

00:14:14.690 --> 00:14:17.930
version on the left side as
the primary dimension, and

00:14:17.930 --> 00:14:19.780
it's showing 1.1.7.

00:14:19.780 --> 00:14:21.900
But then we've added this
operating system and version

00:14:21.900 --> 00:14:23.100
second dimension.

00:14:23.100 --> 00:14:26.610
And so now we can see, OK,
within my app version 1.1.7,

00:14:26.610 --> 00:14:29.110
within that release, show me the
breakdown of crashes and

00:14:29.110 --> 00:14:31.890
exceptions across these
different versions of Android

00:14:31.890 --> 00:14:33.260
in this case.

00:14:33.260 --> 00:14:35.910
And so here, we see that,
actually, most of the crashes

00:14:35.910 --> 00:14:39.290
and exceptions were
coming from some

00:14:39.290 --> 00:14:40.730
version of Android 4.

00:14:40.730 --> 00:14:43.950
There's some for Android
2 Gingerbread, but

00:14:43.950 --> 00:14:45.060
mostly it's in 4.

00:14:45.060 --> 00:14:49.010
So it gives you an idea of hey,
maybe this is a place we

00:14:49.010 --> 00:14:49.660
can focus on.

00:14:49.660 --> 00:14:51.630
Maybe there's something specific
that's going on here

00:14:51.630 --> 00:14:54.680
that we can take a look
at and try to fix.

00:14:54.680 --> 00:14:56.230
You can use other dimensions
there as well.

00:14:56.230 --> 00:14:59.030
Operating system and version was
just the one I thought was

00:14:59.030 --> 00:14:59.650
most interesting.

00:14:59.650 --> 00:15:04.990
But if you had, for example,
Android and iOS, and you might

00:15:04.990 --> 00:15:07.730
want to just break down app
version by platform, you can

00:15:07.730 --> 00:15:08.980
just do that as well.

00:15:11.580 --> 00:15:13.660
And one last thing you can do
with this that I think is

00:15:13.660 --> 00:15:16.220
pretty cool.

00:15:16.220 --> 00:15:19.800
You can take the app version
dimension and use it in a

00:15:19.800 --> 00:15:22.850
custom segment so that you can
compare crashes over time

00:15:22.850 --> 00:15:26.030
between two or more releases.

00:15:26.030 --> 00:15:27.960
So in this example, what
I've done here,

00:15:27.960 --> 00:15:30.755
I've created two segments.

00:15:33.980 --> 00:15:36.900
They both use the app version
field name, and then the

00:15:36.900 --> 00:15:40.110
values of those fields are going
to be the releases that

00:15:40.110 --> 00:15:41.150
I'm interested in.

00:15:41.150 --> 00:15:42.940
So I have a segment for version

00:15:42.940 --> 00:15:44.896
1.1.4 and version 1.1.7.

00:15:44.896 --> 00:15:48.760
I've applied them both to the
crash as an exceptions report.

00:15:48.760 --> 00:15:51.730
And then I can see over time
in this nice graph what the

00:15:51.730 --> 00:15:53.830
trends are for each version.

00:15:53.830 --> 00:15:57.330
So for example, in this case, I
may have pushed some kind of

00:15:57.330 --> 00:16:02.000
bug fix sometime in the
middle of January.

00:16:02.000 --> 00:16:03.990
And you can see both versions
actually come down.

00:16:03.990 --> 00:16:04.945
So that's great.

00:16:04.945 --> 00:16:08.050
But version 1.1.7 is actually
still showing a bunch of

00:16:08.050 --> 00:16:08.880
crashes over time.

00:16:08.880 --> 00:16:11.760
So it might be that I want to
look in there more closely.

00:16:14.820 --> 00:16:17.770
Third reason, and I think this
one's really cool and

00:16:17.770 --> 00:16:19.560
highlights one of the real
strengths of tracking

00:16:19.560 --> 00:16:22.490
exceptions with GA, which is
that you can get a sense of

00:16:22.490 --> 00:16:25.500
what crashes might be costing
you both in terms of

00:16:25.500 --> 00:16:28.845
e-commerce revenue
or user metrics.

00:16:33.760 --> 00:16:35.470
So let me show you how
you might do this.

00:16:35.470 --> 00:16:37.120
I'll just jump right into it.

00:16:37.120 --> 00:16:39.660
So the first thing you do to set
this up, you're going to

00:16:39.660 --> 00:16:41.720
create a custom segment
using the

00:16:41.720 --> 00:16:43.750
exception description field.

00:16:43.750 --> 00:16:45.630
And then, the value of that
field is going to be whatever

00:16:45.630 --> 00:16:49.190
exception you're interested in
seeing the cost of-- whatever

00:16:49.190 --> 00:16:51.890
the cost is to you.

00:16:51.890 --> 00:16:54.160
Then you are going to create a
second exception, and you can

00:16:54.160 --> 00:16:56.020
call it something
like Baseline.

00:16:56.020 --> 00:17:00.050
And that exception is going to
exclude all sessions that have

00:17:00.050 --> 00:17:01.950
that crash description,
the one that you used

00:17:01.950 --> 00:17:03.560
in the first segment.

00:17:03.560 --> 00:17:05.869
So now you have one segment
that says, give me all

00:17:05.869 --> 00:17:09.670
sessions in which this
particular crash occurred, and

00:17:09.670 --> 00:17:12.780
then another segment that says,
show me all sessions in

00:17:12.780 --> 00:17:15.099
which that crash didn't occur.

00:17:15.099 --> 00:17:17.119
And that's your baseline.

00:17:17.119 --> 00:17:20.260
Now, you can apply both these
segments at the same time to

00:17:20.260 --> 00:17:24.150
pretty much almost any report
in GA, but it's particularly

00:17:24.150 --> 00:17:27.290
interesting to see it applied
to a goals or an e-commerce

00:17:27.290 --> 00:17:31.220
report to see how a crash might
be affecting outcomes.

00:17:31.220 --> 00:17:33.750
That might be able to help you
determine how you should be

00:17:33.750 --> 00:17:37.570
prioritizing fixing that bug
over maybe other bugs.

00:17:37.570 --> 00:17:40.860
You can also use it to see a
difference the impact on user

00:17:40.860 --> 00:17:41.940
engagement metrics.

00:17:41.940 --> 00:17:44.840
So in this case, this example
down here, you can see that

00:17:44.840 --> 00:17:47.527
I've got average time on
screen and screens per

00:17:47.527 --> 00:17:50.370
session, two pretty common
engagement metrics.

00:17:50.370 --> 00:17:54.070
And I've got my baseline
sessions there.

00:17:54.070 --> 00:17:57.250
So 11 seconds is the average
time on screen.

00:17:57.250 --> 00:17:58.780
But for those users
who run into this

00:17:58.780 --> 00:18:00.570
ProfilePicker crash--

00:18:00.570 --> 00:18:03.260
so it's some sort of crash when
you are trying to pick

00:18:03.260 --> 00:18:06.460
your profile, some user data--

00:18:06.460 --> 00:18:09.020
there, average time on screen
is actually much lower.

00:18:09.020 --> 00:18:10.410
It's about three seconds.

00:18:10.410 --> 00:18:12.670
And in terms of screens
per session, our

00:18:12.670 --> 00:18:15.270
baseline is about five.

00:18:15.270 --> 00:18:19.070
But in sessions where we hit
this crash, that drops

00:18:19.070 --> 00:18:21.230
down to about 1.3.

00:18:21.230 --> 00:18:22.210
So that's a pretty big deal.

00:18:22.210 --> 00:18:25.830
So if a user is normally using
the app and getting into it

00:18:25.830 --> 00:18:28.480
about five screens deep, and
then all of a sudden this

00:18:28.480 --> 00:18:31.200
crash is causing those sessions
to be just one screen

00:18:31.200 --> 00:18:35.090
only, that's a pretty serious
problem that you might want to

00:18:35.090 --> 00:18:36.890
look into further
and prioritize

00:18:36.890 --> 00:18:40.040
it to get it resolved.

00:18:40.040 --> 00:18:42.410
I'm going to keep
rolling on here.

00:18:42.410 --> 00:18:44.740
So number four.

00:18:44.740 --> 00:18:46.400
This is particularly important,
I think, for

00:18:46.400 --> 00:18:47.210
Android developers.

00:18:47.210 --> 00:18:52.000
But this is seeing which devices
are the least stable.

00:18:52.000 --> 00:18:56.600
So you can't always test on all
devices before you launch.

00:18:56.600 --> 00:19:00.260
And I know there's a lot of
solutions out there that offer

00:19:00.260 --> 00:19:04.300
testing solutions like that
where you can actually maybe

00:19:04.300 --> 00:19:06.380
get close to testing
on all devices.

00:19:06.380 --> 00:19:10.400
But for those of us who aren't
doing that, you have a couple

00:19:10.400 --> 00:19:13.120
devices maybe that you're
working on in development.

00:19:13.120 --> 00:19:14.570
You try to test as
many as you can.

00:19:14.570 --> 00:19:16.700
But eventually, you have
to release it.

00:19:16.700 --> 00:19:20.760
And in the Android world, that
means your app could get used

00:19:20.760 --> 00:19:26.150
on any number of devices that
you may or may not have had

00:19:26.150 --> 00:19:28.410
time to test.

00:19:28.410 --> 00:19:30.570
So one of the useful things you
can do with this exception

00:19:30.570 --> 00:19:32.670
data, now that you're collecting
it, is that you can

00:19:32.670 --> 00:19:36.030
create a custom report to see
crashes and exceptions broken

00:19:36.030 --> 00:19:38.940
down by device model.

00:19:38.940 --> 00:19:41.980
So here's an example of
what that looks like.

00:19:41.980 --> 00:19:44.150
So I've used the mobile device
marketing name as the

00:19:44.150 --> 00:19:45.490
dimension here.

00:19:45.490 --> 00:19:49.490
I just think it's a nice one
because it gives me back the

00:19:49.490 --> 00:19:52.750
device names that I know, like
Galaxy S III, rather than a

00:19:52.750 --> 00:19:55.760
model number or something
like that.

00:19:55.760 --> 00:19:58.930
And then, you can see crashes
and exceptions per device.

00:19:58.930 --> 00:20:01.050
So in this case, obviously,
there's a lot of crashes on

00:20:01.050 --> 00:20:02.280
Galaxy S III.

00:20:02.280 --> 00:20:07.720
That may be just because more
people are using the S III to

00:20:07.720 --> 00:20:09.120
use your app.

00:20:09.120 --> 00:20:09.980
But it may be something
you want to

00:20:09.980 --> 00:20:11.450
take a look into further.

00:20:11.450 --> 00:20:16.040
For example, on a Galaxy Note
II, that may be a device you

00:20:16.040 --> 00:20:17.650
haven't tested at all.

00:20:17.650 --> 00:20:19.370
You might want to drill in there
to see what kinds of

00:20:19.370 --> 00:20:20.660
crashes are happening there.

00:20:20.660 --> 00:20:23.800
Maybe it's a device you want to
target for future testing

00:20:23.800 --> 00:20:25.590
before you launch the
next version.

00:20:29.450 --> 00:20:32.830
And just quick, to create a
custom report, I use mobile

00:20:32.830 --> 00:20:35.000
device marketing name as the
dimension, crashes and

00:20:35.000 --> 00:20:37.150
exceptions as metrics,
and then you get this

00:20:37.150 --> 00:20:38.400
pretty clean report.

00:20:40.740 --> 00:20:44.030
So the last thing I wanted to
talk about was monitoring

00:20:44.030 --> 00:20:46.650
trends in caught exceptions
as well.

00:20:46.650 --> 00:20:47.960
So a lot of what I've
been talking about

00:20:47.960 --> 00:20:49.000
is measuring crashes.

00:20:49.000 --> 00:20:50.830
So these are uncaught
exceptions.

00:20:50.830 --> 00:20:53.470
But there's a lot of cases
in your app where you're

00:20:53.470 --> 00:20:55.530
expecting that exceptions might
be thrown, and you're

00:20:55.530 --> 00:20:58.470
catching them and handling them
gracefully in a way that

00:20:58.470 --> 00:21:01.480
the app does not just boot the
user back out to the home

00:21:01.480 --> 00:21:04.090
screen as it would in a crash.

00:21:04.090 --> 00:21:05.300
So there's a lot of value,
actually, in

00:21:05.300 --> 00:21:06.900
measuring some of these.

00:21:06.900 --> 00:21:10.230
So I wanted to talk about
this one as well.

00:21:10.230 --> 00:21:12.460
So again, yeah, caught
exceptions probably won't

00:21:12.460 --> 00:21:15.600
crash your app, but they're
still valuable to measure.

00:21:15.600 --> 00:21:18.870
And I use the word selectively
here, because I'll show you in

00:21:18.870 --> 00:21:21.590
a second what I think might
be one valuable use case.

00:21:21.590 --> 00:21:23.520
There's a lot of cases where
you probably don't want to

00:21:23.520 --> 00:21:27.990
measure caught exceptions, and
it's actually a waste to send

00:21:27.990 --> 00:21:31.110
GA that much data and have to
use the radio on the device

00:21:31.110 --> 00:21:33.750
that much to send us the data.

00:21:33.750 --> 00:21:37.860
So let me show you an example,
just a small

00:21:37.860 --> 00:21:38.630
code snippet here.

00:21:38.630 --> 00:21:41.910
Suppose this is from a game.

00:21:41.910 --> 00:21:44.660
And what's happening here is
that I've got a list of high

00:21:44.660 --> 00:21:47.690
scores that are stored in the
cloud, that when a user

00:21:47.690 --> 00:21:52.440
finishes a game in my app, I
want to be able to request

00:21:52.440 --> 00:21:54.840
those high scores and show
them to the user.

00:21:54.840 --> 00:21:57.140
Now, I'm expecting that this
might throw an exception,

00:21:57.140 --> 00:22:00.660
because for some reason, the
high scores might not be

00:22:00.660 --> 00:22:04.100
available, the server might now
be reachable, et cetera.

00:22:04.100 --> 00:22:08.520
So I've set this up to
try and catch blocks.

00:22:08.520 --> 00:22:13.280
And in my catch block, I've
added just two lines here.

00:22:13.280 --> 00:22:14.900
You could actually shorten
it down to one.

00:22:14.900 --> 00:22:17.280
But, basically, I just get a
reference to my tracker.

00:22:17.280 --> 00:22:20.200
And in this example, I'm
using EasyTracker.

00:22:20.200 --> 00:22:22.620
And then from that tracker, I'm
going to send an exception

00:22:22.620 --> 00:22:25.860
that basically says, OK I tried
to get the high scores,

00:22:25.860 --> 00:22:27.870
something went wrong, so
I'm going to send this

00:22:27.870 --> 00:22:29.390
exception to GA.

00:22:29.390 --> 00:22:31.580
And I've just included just a
simple message like "high

00:22:31.580 --> 00:22:35.640
scores are unavailable." and a
false Boolean value indicating

00:22:35.640 --> 00:22:39.190
that this wasn't fatal.

00:22:39.190 --> 00:22:40.200
And then, you'd go on
from there with

00:22:40.200 --> 00:22:43.310
whatever code you need.

00:22:43.310 --> 00:22:46.060
So on the reporting side, what
that might look like is that

00:22:46.060 --> 00:22:47.740
you get something like this.

00:22:47.740 --> 00:22:49.600
And this is a similar example.

00:22:49.600 --> 00:22:56.480
I pulled it from a real live
account, one of ours, where a

00:22:56.480 --> 00:23:02.260
caught exception kept coming up
when the server was failing

00:23:02.260 --> 00:23:02.760
to respond.

00:23:02.760 --> 00:23:05.130
So, basically, users were asking
for data, they were

00:23:05.130 --> 00:23:07.570
sitting there waiting
for it, and the data

00:23:07.570 --> 00:23:08.910
was not being returned.

00:23:08.910 --> 00:23:10.960
So we wanted to make sure we
caught that exception.

00:23:10.960 --> 00:23:13.805
And this is what it would look
like in your reports.

00:23:16.710 --> 00:23:19.290
Two tips on this.

00:23:19.290 --> 00:23:21.910
If the request for data, if
it's a common one that

00:23:21.910 --> 00:23:24.970
requires the user to wait for
a long time, this is also a

00:23:24.970 --> 00:23:28.290
case where you might want to
track that latency using our

00:23:28.290 --> 00:23:29.630
User Timings feature.

00:23:29.630 --> 00:23:31.320
That's probably a whole
different GDL, but I just

00:23:31.320 --> 00:23:32.330
wanted to mention it.

00:23:32.330 --> 00:23:34.260
In cases like this where the
user is sitting there waiting

00:23:34.260 --> 00:23:37.110
for data to come back from the
cloud, and they're actually

00:23:37.110 --> 00:23:37.720
just sitting there.

00:23:37.720 --> 00:23:41.420
It's not asynchronous, Their
experience is stuck

00:23:41.420 --> 00:23:42.380
until they get it.

00:23:42.380 --> 00:23:46.570
That's a good use case for
user timings as well.

00:23:46.570 --> 00:23:48.620
Another tip, you should probably
only measure caught

00:23:48.620 --> 00:23:51.290
exceptions when they're having a
big impact on user behavior.

00:23:51.290 --> 00:23:54.200
So in this example, I've been
saying over and over, the user

00:23:54.200 --> 00:23:57.160
is sitting there waiting for
something to happen, right?

00:23:57.160 --> 00:23:59.840
That's an important thing to
measure, because it directly

00:23:59.840 --> 00:24:02.460
impacts the user experience.

00:24:02.460 --> 00:24:04.160
You want to know how
many times that

00:24:04.160 --> 00:24:05.970
exception is being caught.

00:24:05.970 --> 00:24:09.020
In other cases, you're probably
catching all kinds of

00:24:09.020 --> 00:24:11.550
exceptions all over the
app for a bunch

00:24:11.550 --> 00:24:12.540
of different reasons.

00:24:12.540 --> 00:24:14.860
But if they're not directly
impacting the experience of

00:24:14.860 --> 00:24:17.860
the user, I wouldn't recommend
tracking them.

00:24:17.860 --> 00:24:21.460
You're going to end up sending
us a ton of data and using

00:24:21.460 --> 00:24:24.600
much more of the radio to send
us that data, which is bad for

00:24:24.600 --> 00:24:25.940
battery life anyways.

00:24:25.940 --> 00:24:29.920
And when you get to the reports,
it's not entirely

00:24:29.920 --> 00:24:32.120
clear what that kind of data
would be useful for.

00:24:32.120 --> 00:24:35.940
So I would recommend just
stick to the big caught

00:24:35.940 --> 00:24:38.440
exceptions that are really
going to affect the user

00:24:38.440 --> 00:24:39.690
experience.

00:24:43.390 --> 00:24:46.610
So just to recap the five things
that I just kind of

00:24:46.610 --> 00:24:48.260
rushed through.

00:24:48.260 --> 00:24:50.280
Number one is automated
crash reporting.

00:24:50.280 --> 00:24:51.630
This is super easy to set up.

00:24:51.630 --> 00:24:53.560
So everyone can get this
data in just one or

00:24:53.560 --> 00:24:55.070
two lines of code.

00:24:55.070 --> 00:24:58.760
Just grab the SDK, implement
it, and you're pretty much

00:24:58.760 --> 00:24:59.400
good to go.

00:24:59.400 --> 00:25:00.520
You don't have to do
anything else.

00:25:00.520 --> 00:25:02.490
If you don't want to send any
other data, that's fine.

00:25:02.490 --> 00:25:03.800
You can just send us crashes.

00:25:03.800 --> 00:25:06.640
And it's really simple
to set that up.

00:25:06.640 --> 00:25:09.860
So number two, the second
reason, knowing how stability

00:25:09.860 --> 00:25:11.590
is trending across releases.

00:25:11.590 --> 00:25:14.480
So we looked at ways in which
you can segment your

00:25:14.480 --> 00:25:18.850
exceptions and crash data
by app version, app

00:25:18.850 --> 00:25:20.170
platform, et cetera.

00:25:20.170 --> 00:25:24.190
You can track progress against
total number of crashes and

00:25:24.190 --> 00:25:26.400
thereby stability over
time as you keep

00:25:26.400 --> 00:25:28.820
putting out new releases.

00:25:28.820 --> 00:25:31.820
Three, find out what crashes
are costing you.

00:25:31.820 --> 00:25:32.970
And again, I think this
one's really cool.

00:25:32.970 --> 00:25:37.270
You can create segments for
particular crashes and compare

00:25:37.270 --> 00:25:40.690
them to sessions in which that
crash didn't occur to get a

00:25:40.690 --> 00:25:44.670
sense of what the impact is on
user engagement metrics, but

00:25:44.670 --> 00:25:48.000
also on your e-commerce and
in-app payments as well.

00:25:48.000 --> 00:25:50.970
Number four, seeing which
devices are least stable.

00:25:50.970 --> 00:25:53.200
And this one, again, was really
important for Android

00:25:53.200 --> 00:25:56.730
users who have to deal with a
wide variety of devices, and

00:25:56.730 --> 00:25:59.400
they won't always be able
to test on all of them.

00:25:59.400 --> 00:26:01.750
So this is pretty
cool as well.

00:26:01.750 --> 00:26:05.020
And number five, because you can
get insight into trends of

00:26:05.020 --> 00:26:05.940
caught exceptions.

00:26:05.940 --> 00:26:10.550
And these caught exceptions
can represent moments when

00:26:10.550 --> 00:26:12.420
there's a big impact
on user behavior.

00:26:12.420 --> 00:26:14.070
So it can be really useful
to grab this.

00:26:14.070 --> 00:26:16.920
And the example I used was if
you're requesting data from

00:26:16.920 --> 00:26:18.510
the cloud and the user is
sitting there waiting for

00:26:18.510 --> 00:26:21.110
that, and there's an exception
that's thrown because the

00:26:21.110 --> 00:26:23.410
server is not available, that's
something that's really

00:26:23.410 --> 00:26:25.010
valuable to measure
and hopefully

00:26:25.010 --> 00:26:26.370
minimize in future releases.

00:26:29.090 --> 00:26:32.770
Cool, so that's it for me.

00:26:32.770 --> 00:26:35.540
Five reasons you should be
tracking exceptions.

00:26:35.540 --> 00:26:38.510
If you have questions,
feel free to hit

00:26:38.510 --> 00:26:39.470
the Developer site.

00:26:39.470 --> 00:26:42.400
It's developers.googl
e.com/analytics.

00:26:42.400 --> 00:26:47.340
We've got developer guides for
iOS and Android to help you

00:26:47.340 --> 00:26:49.590
get started with those
really quickly.

00:26:49.590 --> 00:26:51.950
You can also catch me
on Google+, and my

00:26:51.950 --> 00:26:53.890
name's Andrew Wales.

00:26:53.890 --> 00:26:56.230
Thanks, guys, for coming to this
"Off the Charts" session,

00:26:56.230 --> 00:26:57.800
and hopefully I'll see
you again soon.

00:27:05.900 --> 00:27:35.953
[MUSIC PLAYING]

