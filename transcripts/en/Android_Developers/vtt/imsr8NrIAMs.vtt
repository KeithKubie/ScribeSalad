WEBVTT
Kind: captions
Language: en

00:00:03.550 --> 00:00:07.110
CHET HAASE: Hello and welcome
to the RecyclerView, animations,

00:00:07.110 --> 00:00:08.690
layout, and more.

00:00:08.690 --> 00:00:11.250
I am Chet Haase from the
Android UI toolkit team.

00:00:11.250 --> 00:00:13.750
YIGIT BOYAR: I'm Yigit Boyar,
also from the UI Toolkit Team.

00:00:13.750 --> 00:00:14.370
CHET HAASE: I'd
like to point out

00:00:14.370 --> 00:00:16.860
that that's "Yeet," not
"Yidgit" or "Yigit,"

00:00:16.860 --> 00:00:18.070
which we've heard a lot.

00:00:18.070 --> 00:00:21.640
If you spelled .gif with that
kind of g you would actually be

00:00:21.640 --> 00:00:25.319
if, unconditionally.

00:00:25.319 --> 00:00:26.610
YIGIT BOYAR: I'll use this one.

00:00:26.610 --> 00:00:31.190
CHET HAASE: So I wanted to
point out that first of all,

00:00:31.190 --> 00:00:33.770
we created a talk
to do in 45 minutes,

00:00:33.770 --> 00:00:36.040
and we figure the amount
of material we're covering

00:00:36.040 --> 00:00:37.570
is about two hours worth.

00:00:37.570 --> 00:00:40.015
So if people are actually
watching this as a video

00:00:40.015 --> 00:00:41.390
instead, if you
could just run it

00:00:41.390 --> 00:00:43.920
at like two or two
and a half x, then

00:00:43.920 --> 00:00:45.939
maybe we can cram
it all in in time.

00:00:45.939 --> 00:00:47.230
Otherwise we'll see how we do--

00:00:47.230 --> 00:00:49.840
YIGIT BOYAR: They
should run at half x.

00:00:49.840 --> 00:00:52.500
CHET HAASE: That's
too complicated.

00:00:52.500 --> 00:00:54.730
So I also want to
point out that we

00:00:54.730 --> 00:00:57.260
intend today to talk a little
bit about architecture,

00:00:57.260 --> 00:00:59.920
RecyclerView, how the
different classes work together

00:00:59.920 --> 00:01:02.400
to produce animations,
and to create everything

00:01:02.400 --> 00:01:03.810
that RecyclerView view is.

00:01:03.810 --> 00:01:07.430
But the thing that we're
aiming for with RecyclerView

00:01:07.430 --> 00:01:09.630
overall, especially when
compared to list view,

00:01:09.630 --> 00:01:12.590
is to give you a lot
of this stuff for free.

00:01:12.590 --> 00:01:15.400
Right, so it's flexible, it's
pluggable, it's customizable,

00:01:15.400 --> 00:01:18.959
but ideally you will not have
to understand the details, some

00:01:18.959 --> 00:01:21.000
of the details that we're
going to go over today,

00:01:21.000 --> 00:01:23.900
in order to get the kind of
animated behavior you want to.

00:01:23.900 --> 00:01:26.577
But if you would like to
customize that behavior,

00:01:26.577 --> 00:01:28.910
then hopefully the information
we're talking about today

00:01:28.910 --> 00:01:31.900
will help.

00:01:31.900 --> 00:01:34.890
YIGIT BOYAR: OK, so let's
start with the components,

00:01:34.890 --> 00:01:38.080
so this is a RecyclerView,
and many of you

00:01:38.080 --> 00:01:41.880
use the adapter, the layout
manager, and item animator,

00:01:41.880 --> 00:01:45.610
and some advanced users use
the item decorations or even

00:01:45.610 --> 00:01:46.490
the pool.

00:01:46.490 --> 00:01:48.920
But actually all the
RecyclerView architecture

00:01:48.920 --> 00:01:51.840
is all based on components,
there's more components

00:01:51.840 --> 00:01:53.260
that you don't see
inside, there's

00:01:53.260 --> 00:01:56.730
a child helper, which handles
all these views coming

00:01:56.730 --> 00:01:57.350
in and out.

00:01:57.350 --> 00:01:59.780
The adapter helper which
handles your adapter

00:01:59.780 --> 00:02:02.190
updates, and the recycler.

00:02:02.190 --> 00:02:04.310
So let's quickly go
through these components,

00:02:04.310 --> 00:02:05.950
and know what they are doing.

00:02:05.950 --> 00:02:08.840
Layout manager is simple,
it's the main component

00:02:08.840 --> 00:02:11.140
that positions
your items, it can

00:02:11.140 --> 00:02:13.990
be a simple list
it can be a grid,

00:02:13.990 --> 00:02:16.270
or it can be a
second grid of items.

00:02:16.270 --> 00:02:18.670
It depends on the
layout, RecyclerView

00:02:18.670 --> 00:02:21.340
does not know about it,
or doesn't care about it.

00:02:21.340 --> 00:02:25.240
Scrolling is layout manager's
responsibility again.

00:02:25.240 --> 00:02:28.990
Focus, so part of the focus
is handled by the RecyclerView

00:02:28.990 --> 00:02:32.260
as you move it to keep
it, it knows how to move.

00:02:32.260 --> 00:02:34.850
But if the user reaches
the end of the list,

00:02:34.850 --> 00:02:38.680
or if layout manager wants
to handle it separately,

00:02:38.680 --> 00:02:40.410
this is layout
manager's responsibility

00:02:40.410 --> 00:02:43.810
to move the other items
up, and bring in new item,

00:02:43.810 --> 00:02:46.800
and now focus into it.

00:02:46.800 --> 00:02:49.160
Another example, accessibility,
so layout managers

00:02:49.160 --> 00:02:53.850
provide basic accessibility,
information to cycle through,

00:02:53.850 --> 00:02:57.000
this row of this column,
or this row of this column.

00:02:57.000 --> 00:02:59.930
But if you have more
information about those videos,

00:02:59.930 --> 00:03:03.680
like the section one cannot
be accessible to focus,

00:03:03.680 --> 00:03:07.010
you then have access to delegate
to RecyclerView to add this

00:03:07.010 --> 00:03:08.920
additional information.

00:03:08.920 --> 00:03:10.940
Let's go back to adapter.

00:03:10.940 --> 00:03:13.170
So adapter is the
one that creates

00:03:13.170 --> 00:03:16.300
your views, binds
the viewholders,

00:03:16.300 --> 00:03:19.050
tells RecyclerView and
then the data changes.

00:03:19.050 --> 00:03:21.050
It is also the
place, if you want

00:03:21.050 --> 00:03:25.430
to handle like click listeners,
there are multiple wheel types,

00:03:25.430 --> 00:03:28.810
or there's some recycle recovery
which we will touch later on,

00:03:28.810 --> 00:03:30.740
and granular data
changes events,

00:03:30.740 --> 00:03:34.769
like this item is change, not
that the whole list changed.

00:03:34.769 --> 00:03:36.310
And the important
part about adapter,

00:03:36.310 --> 00:03:38.510
is understanding the viewholder.

00:03:38.510 --> 00:03:40.010
Like, this is the
main component.

00:03:40.010 --> 00:03:43.550
I want to go through how
we create the viewholders.

00:03:43.550 --> 00:03:45.940
Layout manager at that part,
while we're on the layout

00:03:45.940 --> 00:03:49.140
says, OK give me this
view for position x.

00:03:49.140 --> 00:03:52.000
It checks the cache,
do we have the view,

00:03:52.000 --> 00:03:54.620
yes we have the view, give it
back to the layout manager.

00:03:54.620 --> 00:03:57.635
We don't even
touch the adapters.

00:03:57.635 --> 00:04:00.260
But first, of course, the cache
says no I don't have this view,

00:04:00.260 --> 00:04:02.130
RecyclerView goes
and asks OK what type

00:04:02.130 --> 00:04:04.430
is this view at
this position, tells

00:04:04.430 --> 00:04:06.410
the position,
checks the pool, do

00:04:06.410 --> 00:04:09.190
I have a type of this
view I can reuse.

00:04:09.190 --> 00:04:12.450
If the pool says no, now it
goes to the adapter and says

00:04:12.450 --> 00:04:14.510
create me a new
one of this type.

00:04:14.510 --> 00:04:16.850
It's not created per position,
like in the listview,

00:04:16.850 --> 00:04:21.260
it's created for this type, and
the adapter creates that view.

00:04:21.260 --> 00:04:24.300
If the pool already has it,
or adapter creates a new one,

00:04:24.300 --> 00:04:26.910
just binds it back and returns
to the layout managers.

00:04:29.550 --> 00:04:31.630
And then the layout
manager will eventually

00:04:31.630 --> 00:04:33.460
add that view to
the UI, this way

00:04:33.460 --> 00:04:35.365
you get that
onViewAttachedToWindow

00:04:35.365 --> 00:04:36.802
callback in your adapter.

00:04:36.802 --> 00:04:38.510
So if you know anything
about life cycle,

00:04:38.510 --> 00:04:40.500
that's what you're looking for.

00:04:40.500 --> 00:04:42.320
So how do we reserve viewholder?

00:04:42.320 --> 00:04:44.361
It's pretty much like we
don't need this anymore,

00:04:44.361 --> 00:04:45.840
but we might need
it in the future.

00:04:45.840 --> 00:04:49.050
So layout manager says, OK
remove and recycle this view,

00:04:49.050 --> 00:04:52.330
tells adapter OK, this
view has been detached

00:04:52.330 --> 00:04:54.500
and then checks if
this view is valid.

00:04:54.500 --> 00:04:57.230
This is important,
valid means, do

00:04:57.230 --> 00:04:59.790
we still have that type
of it in that position,

00:04:59.790 --> 00:05:01.410
the contents are up to date.

00:05:01.410 --> 00:05:04.120
But layout manager doesn't
want this view anyway,

00:05:04.120 --> 00:05:05.930
simple example is scrolling.

00:05:05.930 --> 00:05:08.890
If it is valid, it will let
you move it to the cache.

00:05:08.890 --> 00:05:12.430
From there we can bring it back
without doing a new operation.

00:05:12.430 --> 00:05:14.895
And the cache will
invalidate the oldest one,

00:05:14.895 --> 00:05:16.353
and it's going to
tell the adapter,

00:05:16.353 --> 00:05:19.260
OK this view holder
is now recycled.

00:05:19.260 --> 00:05:23.400
If it is not invalid, and it
will likely go to the pool,

00:05:23.400 --> 00:05:26.350
and adapter will list it
on onViewRecycled callback.

00:05:26.350 --> 00:05:28.700
It's very important
because, this

00:05:28.700 --> 00:05:30.850
is when like you don't
receive onViewRecycled,

00:05:30.850 --> 00:05:32.380
people get confused.

00:05:32.380 --> 00:05:35.620
Cache is important
because of performance.

00:05:35.620 --> 00:05:38.220
Another better way
to go to reserves,

00:05:38.220 --> 00:05:39.680
RecyclerView is
doing your layout,

00:05:39.680 --> 00:05:42.440
tells the layout manager
layout all the children,

00:05:42.440 --> 00:05:45.600
and after the layout is
called RecyclerView checks OK,

00:05:45.600 --> 00:05:48.050
which are the children
that are laid out before,

00:05:48.050 --> 00:05:50.360
and they don't exist anymore.

00:05:50.360 --> 00:05:52.507
For instance,
child recycled then

00:05:52.507 --> 00:05:53.840
adds them back to the ViewGroup.

00:05:53.840 --> 00:05:55.780
This is a distinction
between a view

00:05:55.780 --> 00:06:00.860
being a child of layout manager,
versus a child of RecyclerView.

00:06:00.860 --> 00:06:02.610
And it hides it
from layout manager,

00:06:02.610 --> 00:06:04.990
this means these views, which
the layout manager didn't

00:06:04.990 --> 00:06:07.990
want any more, there are still
a child of the view group,

00:06:07.990 --> 00:06:09.490
out layout manager
doesn't see them,

00:06:09.490 --> 00:06:13.530
and RecyclerView's abstraction
handles this distribution.

00:06:13.530 --> 00:06:15.990
So, calls right through to
RecyclerView, RecyclerView

00:06:15.990 --> 00:06:18.640
tells item animator,
OK I have this view,

00:06:18.640 --> 00:06:21.100
can you get rid of this.

00:06:21.100 --> 00:06:22.900
Item animator runs
the animation, then

00:06:22.900 --> 00:06:25.210
it comes back in 300
milliseconds later,

00:06:25.210 --> 00:06:27.950
tells RecyclerView I'm
done with this view.

00:06:27.950 --> 00:06:29.770
Doing that animation,
this view is not

00:06:29.770 --> 00:06:31.900
visible to the
layout manager's API,

00:06:31.900 --> 00:06:35.400
RecyclerView tells adapter,
OK now I am detaching,

00:06:35.400 --> 00:06:38.180
cache sends it to the pool.

00:06:38.180 --> 00:06:41.720
OK very important about
how to use the viewholder.

00:06:41.720 --> 00:06:45.670
So layout manager calls
removeAndRecycleView,

00:06:45.670 --> 00:06:47.990
RecyclerView checks if it is
valid, if it is not valid,

00:06:47.990 --> 00:06:49.910
we tried to send it to
the pool but we check

00:06:49.910 --> 00:06:51.370
if there's a transient state.

00:06:51.370 --> 00:06:53.320
Transient state means
it's being animated.

00:06:53.320 --> 00:06:56.520
Like some of the view
properties are being animated.

00:06:56.520 --> 00:06:59.800
Then the pools ask the adapter,
I cannot recycle this view

00:06:59.800 --> 00:07:01.650
because this is in
a transient state.

00:07:01.650 --> 00:07:06.360
Your adapter use should be
up overriding this callback,

00:07:06.360 --> 00:07:09.850
and handling it properly, which
means get rid of the animation.

00:07:09.850 --> 00:07:12.920
Well maybe you get to fit your
own bind call, in that case

00:07:12.920 --> 00:07:15.760
you can just say, it's
fine like just recycle it,

00:07:15.760 --> 00:07:17.360
I know how to handle it.

00:07:17.360 --> 00:07:20.710
If you don't do anything, and
if the view is in this case is,

00:07:20.710 --> 00:07:23.160
actually the default
implementation is I

00:07:23.160 --> 00:07:25.660
don't know how to handle it.

00:07:25.660 --> 00:07:29.141
It's going to be thrown
out, or lose that view.

00:07:29.141 --> 00:07:31.890
Bad.

00:07:31.890 --> 00:07:35.720
The moral of the story is
you should use item animator

00:07:35.720 --> 00:07:38.740
to animate, which Chet
will explain to you soon,

00:07:38.740 --> 00:07:39.640
right Chet?

00:07:39.640 --> 00:07:40.830
CHET HAASE: Sure.

00:07:40.830 --> 00:07:43.649
YIGIT BOYAR: If you have
time, OK, so in other cases

00:07:43.649 --> 00:07:45.940
recycled pool says is there
another viewholder to pull,

00:07:45.940 --> 00:07:49.375
the pull says OK I have too
many of these views at type

00:07:49.375 --> 00:07:51.792
x, and when this is
the case this it says

00:07:51.792 --> 00:07:53.750
no I don't want to recycle
it because I already

00:07:53.750 --> 00:07:55.000
have five of it.

00:07:55.000 --> 00:07:56.350
And I will kill the view.

00:07:56.350 --> 00:07:58.160
You don't want this to happen.

00:07:58.160 --> 00:08:03.420
So why would this
happen, is basically,

00:08:03.420 --> 00:08:05.590
you just have too many
viewholders at the same time.

00:08:05.590 --> 00:08:07.399
We already have
it, why would we?

00:08:07.399 --> 00:08:08.940
Why would we create
too many of them?

00:08:08.940 --> 00:08:12.480
Like why did it create, instead
of using the existing one?

00:08:12.480 --> 00:08:14.470
Well a common case,
this happens where

00:08:14.470 --> 00:08:16.620
you're animating too
many of your views

00:08:16.620 --> 00:08:19.039
through crossfade, which
is like change animations.

00:08:19.039 --> 00:08:21.080
And I want to show this
here, because I have seen

00:08:21.080 --> 00:08:22.700
this online, don't do this.

00:08:22.700 --> 00:08:26.650
Don't tell the adapter that all
of your items from 0 to 1,000

00:08:26.650 --> 00:08:28.150
has been changed.

00:08:28.150 --> 00:08:34.340
RecyclerView won't be able
to reuse any of those views,

00:08:34.340 --> 00:08:35.900
so how do we fix this?

00:08:35.900 --> 00:08:38.750
Proper way to fix this is tell
RecyclerView which item has

00:08:38.750 --> 00:08:42.890
changed, or if you really,
really need those viewtypes,

00:08:42.890 --> 00:08:45.260
change the default cache
size so that the RecyclerView

00:08:45.260 --> 00:08:47.860
will pull more of them.

00:08:47.860 --> 00:08:51.560
Item decorations are your
just regular drawings

00:08:51.560 --> 00:08:52.940
throughout the cameras.

00:08:52.940 --> 00:08:54.860
And they can
actually add margins,

00:08:54.860 --> 00:08:57.690
or offsets to the view bounds.

00:08:57.690 --> 00:09:01.010
So look at an example, This
is simple item decoration

00:09:01.010 --> 00:09:04.270
where we draw it a round
ring, and the view.

00:09:04.270 --> 00:09:06.240
Let's see the API a
little bit in detail.

00:09:06.240 --> 00:09:09.350
So this is my view, and
that's the boundaries

00:09:09.350 --> 00:09:12.860
of the view by
default. RecyclerView

00:09:12.860 --> 00:09:14.790
will the item
animator, OK like do

00:09:14.790 --> 00:09:16.820
you have offsets for
this item, which means

00:09:16.820 --> 00:09:19.070
do want to around this item?

00:09:19.070 --> 00:09:21.670
Where you can say
yes, just extend it

00:09:21.670 --> 00:09:25.420
because I need some more space.

00:09:25.420 --> 00:09:28.720
And then when the
drawing stars, this

00:09:28.720 --> 00:09:31.950
is an empty RecyclerView camera,
so RecyclerView will first

00:09:31.950 --> 00:09:34.330
go OK, draw whatever
you want to draw,

00:09:34.330 --> 00:09:37.150
before the layout manager
or the children draws.

00:09:37.150 --> 00:09:40.200
So I draw these
gray backgrounds.

00:09:40.200 --> 00:09:43.350
Another RecyclerView draw will
happen, the children will draw,

00:09:43.350 --> 00:09:45.730
and after that we
will call onDrawOver

00:09:45.730 --> 00:09:49.490
where you can draw over the
children whatever you want.

00:09:49.490 --> 00:09:51.200
There are some important
things that you

00:09:51.200 --> 00:09:53.860
should know about item
decorations, first of all,

00:09:53.860 --> 00:09:56.480
do not try to access your
adapter because you might call

00:09:56.480 --> 00:09:58.170
it in the middle of a layout.

00:09:58.170 --> 00:10:00.560
You can still get the
items adapter position

00:10:00.560 --> 00:10:01.430
but it's tricky.

00:10:01.430 --> 00:10:04.380
Instead, go with the
information in ViewHolder.

00:10:04.380 --> 00:10:07.300
Your view holder should
keep whatever information

00:10:07.300 --> 00:10:09.610
that item decorator needs.

00:10:09.610 --> 00:10:12.440
And onDraw rules
apply, don't allocate

00:10:12.440 --> 00:10:14.300
because you are being
called many times here

00:10:14.300 --> 00:10:15.970
in the drawing cycle.

00:10:15.970 --> 00:10:18.130
And while you need
to get the viewholder

00:10:18.130 --> 00:10:21.660
you can use this method.

00:10:21.660 --> 00:10:25.930
OK, the pool is where we
keep all the remaining views.

00:10:25.930 --> 00:10:29.260
So this is a RecyclerView,
and every single item

00:10:29.260 --> 00:10:31.640
is under the RecyclerView,
so wouldn't it

00:10:31.640 --> 00:10:34.790
be cool if all of them
came from the pool.

00:10:34.790 --> 00:10:37.220
This is where you
can use a view pool.

00:10:37.220 --> 00:10:39.630
Alright, let's go
back to animations.

00:10:39.630 --> 00:10:40.860
CHET HAASE: Yay.

00:10:40.860 --> 00:10:42.370
Let's animate some stuff.

00:10:42.370 --> 00:10:44.770
So we thought when we were
constructing this talk,

00:10:44.770 --> 00:10:46.970
we'd talk more generally
about how animations

00:10:46.970 --> 00:10:49.050
work on Android
first, and then we'd

00:10:49.050 --> 00:10:51.150
get into the specifics
on RecyclerView.

00:10:51.150 --> 00:10:54.410
And then we created a talk that
would take two days to deliver,

00:10:54.410 --> 00:10:56.544
so we're just going to
assume that everybody knows

00:10:56.544 --> 00:10:57.960
how animations
work and we're just

00:10:57.960 --> 00:11:00.510
going to go on and talk about
the RecyclerView Animations

00:11:00.510 --> 00:11:02.054
in particular.

00:11:02.054 --> 00:11:03.470
So first of all,
let's take a look

00:11:03.470 --> 00:11:05.011
at the different
kinds of things that

00:11:05.011 --> 00:11:06.480
can happen in a recycler view.

00:11:06.480 --> 00:11:09.280
So here's a really interesting
RecyclerView over there,

00:11:09.280 --> 00:11:13.810
I want everybody to know
that I did this art myself.

00:11:13.810 --> 00:11:15.900
OK so we have an ad
operation, so we're

00:11:15.900 --> 00:11:17.910
going to tap on
this, or whatever,

00:11:17.910 --> 00:11:20.170
we're going to add an item
in between the h and the i,

00:11:20.170 --> 00:11:21.960
and we're going to create this
other representation where

00:11:21.960 --> 00:11:24.240
you see that p element
there, the i and the j

00:11:24.240 --> 00:11:26.860
got shifted down, and the
k is no longer in the list.

00:11:26.860 --> 00:11:29.290
We have a delete
operation, so we're

00:11:29.290 --> 00:11:31.490
going to delete
the h element there

00:11:31.490 --> 00:11:34.540
and that's going to create
this other list, h has gone,

00:11:34.540 --> 00:11:36.260
I, j, and k got shifted up.

00:11:36.260 --> 00:11:38.720
And then we have this new
element, l down at the bottom.

00:11:38.720 --> 00:11:40.690
Or we may have a
change animation,

00:11:40.690 --> 00:11:43.950
where we're going to change
the content inside the j item,

00:11:43.950 --> 00:11:46.610
and it's going to become
this other content over there

00:11:46.610 --> 00:11:47.540
on the right.

00:11:47.540 --> 00:11:50.610
So all very good, and
also all very beautiful.

00:11:50.610 --> 00:11:51.110
Right?

00:11:51.110 --> 00:11:54.072
OK, so let's talk about
animations in particular.

00:11:54.072 --> 00:11:55.530
So those were the
different states,

00:11:55.530 --> 00:11:56.767
like the before and after.

00:11:56.767 --> 00:11:58.600
But then how do you
animate these things, so

00:11:58.600 --> 00:12:00.400
in the add operation,
say while we're

00:12:00.400 --> 00:12:02.770
going to add an item here,
how do we actually transition

00:12:02.770 --> 00:12:04.350
to this new state of the list?

00:12:04.350 --> 00:12:06.670
What are the animations
that need to take place?

00:12:06.670 --> 00:12:08.396
Well clearly there's
a new item there,

00:12:08.396 --> 00:12:09.770
so we have some
sort of animation

00:12:09.770 --> 00:12:11.880
that's going to fade
that in or otherwise

00:12:11.880 --> 00:12:13.280
make it appear in the list.

00:12:13.280 --> 00:12:15.330
And then we have I
and j that shifted,

00:12:15.330 --> 00:12:17.370
so we could do maybe
some simple translation

00:12:17.370 --> 00:12:19.130
to move those things
around in the list.

00:12:19.130 --> 00:12:21.850
And then we have the item
k that no longer exists,

00:12:21.850 --> 00:12:24.450
so maybe we can do some sort of
fade or disappearing animation

00:12:24.450 --> 00:12:27.430
to make that go away over time.

00:12:27.430 --> 00:12:31.130
So for the remove operation,
similarly what animations

00:12:31.130 --> 00:12:31.880
do we run here?

00:12:31.880 --> 00:12:33.421
Well first of all
we're going to need

00:12:33.421 --> 00:12:35.320
to remove that h
element that went away,

00:12:35.320 --> 00:12:37.150
we're going to shift
some things around

00:12:37.150 --> 00:12:38.950
because they moved
within the list

00:12:38.950 --> 00:12:40.710
in the before and
the after state.

00:12:40.710 --> 00:12:42.632
And then we have
this new item there,

00:12:42.632 --> 00:12:45.090
that's potentially going to
fade in or otherwise transition

00:12:45.090 --> 00:12:46.740
to be in the list there.

00:12:46.740 --> 00:12:48.790
And then finally, we
have the change animation

00:12:48.790 --> 00:12:51.220
where we're going to run
some sort of animation

00:12:51.220 --> 00:12:53.230
to indicate that the
contents of that item

00:12:53.230 --> 00:12:55.430
have changed over time.

00:12:55.430 --> 00:12:59.840
So it's important to point
out that a lot of this stuff

00:12:59.840 --> 00:13:02.270
just comes baked into
RecyclerView and item animator,

00:13:02.270 --> 00:13:04.820
and the default layout
managers already.

00:13:04.820 --> 00:13:07.020
And in fact, even if
you start to customise,

00:13:07.020 --> 00:13:09.870
there's still a lot that just
comes for free out of the box.

00:13:09.870 --> 00:13:12.369
So if an item gets removed
we're automatically

00:13:12.369 --> 00:13:13.910
going to fade it
out, if an item gets

00:13:13.910 --> 00:13:16.060
added we're automatically
going to fade it in.

00:13:16.060 --> 00:13:18.227
If it's moving around in
the before and after state,

00:13:18.227 --> 00:13:19.601
then we're going
to translate it.

00:13:19.601 --> 00:13:21.710
And if it's changing we're
going to cross-fade it.

00:13:21.710 --> 00:13:24.251
Right, we're going to provide
the two different views that we

00:13:24.251 --> 00:13:25.449
then cross fade between.

00:13:25.449 --> 00:13:27.990
And then the question is can we
actually do better than that?

00:13:27.990 --> 00:13:30.290
And it turns out we can.

00:13:30.290 --> 00:13:32.140
So first of all,
let's take a look

00:13:32.140 --> 00:13:34.859
at what an actual list
looks like under the covers.

00:13:34.859 --> 00:13:37.150
So that's what it looks like
on the screen to the user,

00:13:37.150 --> 00:13:40.140
but really that's a view
port into the overall list

00:13:40.140 --> 00:13:43.280
of information that exists
on and off the screen.

00:13:43.280 --> 00:13:46.230
Right, so you have this virtual
list they're scrolling through,

00:13:46.230 --> 00:13:48.580
and you can see the items
here that are represented.

00:13:48.580 --> 00:13:52.060
They actually exist in some
virtual state off screen.

00:13:52.060 --> 00:13:54.740
So now let's take another look
at how these animations might

00:13:54.740 --> 00:13:57.500
work, given the information that
we have about the off screen

00:13:57.500 --> 00:13:58.320
items there.

00:13:58.320 --> 00:14:00.250
So here we said
OK for an addition

00:14:00.250 --> 00:14:02.200
we're going to remove
that k element,

00:14:02.200 --> 00:14:04.040
we're going to shift
stuff around and add it

00:14:04.040 --> 00:14:06.280
if it's in the after
state over there,

00:14:06.280 --> 00:14:08.890
but in actual fact
in the virtual list

00:14:08.890 --> 00:14:12.290
that k didn't go away, it
got shifted off the screen.

00:14:12.290 --> 00:14:15.460
So that animation, a richer
animation of that k element,

00:14:15.460 --> 00:14:17.870
is to simply shift it
or move it off screen,

00:14:17.870 --> 00:14:20.070
to where it would
be if we could see

00:14:20.070 --> 00:14:23.100
whatever parts of the list
that are currently off screen.

00:14:23.100 --> 00:14:25.497
Item removal, similarly
we said OK well we

00:14:25.497 --> 00:14:27.330
need to fade this thing
out, and we're going

00:14:27.330 --> 00:14:28.579
to move some stuff over there.

00:14:28.579 --> 00:14:31.060
And then this l item is
going to appear on the screen

00:14:31.060 --> 00:14:32.650
because it came from somewhere.

00:14:32.650 --> 00:14:35.630
Well we potentially
know where it came from,

00:14:35.630 --> 00:14:38.720
this is the virtual list where
that l didn't just magically

00:14:38.720 --> 00:14:41.580
appear, instead it
shifted on screen

00:14:41.580 --> 00:14:44.940
from where it used to
be in the virtual list.

00:14:44.940 --> 00:14:47.130
And then, changes.

00:14:47.130 --> 00:14:49.719
So these are the different
kinds of animations.

00:14:49.719 --> 00:14:51.760
It's interesting to sort
of break it down and say

00:14:51.760 --> 00:14:53.470
what are all the
possible changes that

00:14:53.470 --> 00:14:55.796
can happen in this
list, before and after,

00:14:55.796 --> 00:14:57.420
and then how do we
animate all of them.

00:14:57.420 --> 00:15:00.710
So persistence is when items
are there before and after,

00:15:00.710 --> 00:15:01.970
whether or not they move.

00:15:01.970 --> 00:15:03.780
If they don't move at
all, nothing to do.

00:15:03.780 --> 00:15:06.770
If they move around in the list,
then you need to move them.

00:15:06.770 --> 00:15:08.300
Things get added
to the list, things

00:15:08.300 --> 00:15:10.700
get removed from the list,
and things get changed.

00:15:10.700 --> 00:15:12.949
But it gets interesting when
you talk about appearance

00:15:12.949 --> 00:15:14.660
and disappearance,
because here, these

00:15:14.660 --> 00:15:16.726
are the things where it
got added to the list,

00:15:16.726 --> 00:15:18.100
but it only got
added to the list

00:15:18.100 --> 00:15:21.310
because it moved on screen from
where it actually persisted

00:15:21.310 --> 00:15:22.859
before the layout change.

00:15:22.859 --> 00:15:24.400
These are the two
types of animations

00:15:24.400 --> 00:15:25.859
that we call
predictive animations,

00:15:25.859 --> 00:15:28.233
and there are some parts of
the API that are around this,

00:15:28.233 --> 00:15:29.660
so if you see the
word predictive,

00:15:29.660 --> 00:15:30.660
this is what it's about.

00:15:30.660 --> 00:15:32.470
It's about telling
us the information

00:15:32.470 --> 00:15:35.060
that we need, to know
where things came from

00:15:35.060 --> 00:15:37.730
or where they're going to,
when they appear or disappear

00:15:37.730 --> 00:15:39.450
from the list.

00:15:39.450 --> 00:15:41.670
So there are two
main things you want

00:15:41.670 --> 00:15:44.820
to think about when you're
trying to customize animations.

00:15:44.820 --> 00:15:46.780
One is the layout manager,
the layout manager

00:15:46.780 --> 00:15:49.470
is responsible for figuring
out where things go.

00:15:49.470 --> 00:15:52.740
In the context of animations,
it's not just where they are,

00:15:52.740 --> 00:15:55.060
but it's where they came
from, and where they're going

00:15:55.060 --> 00:15:56.491
to be after the layout change.

00:15:56.491 --> 00:15:58.490
And then on the other
side is the item animator,

00:15:58.490 --> 00:16:00.260
and that's responsible
for actually

00:16:00.260 --> 00:16:01.710
running the animations.

00:16:01.710 --> 00:16:03.670
So on one side we have
the layout manager

00:16:03.670 --> 00:16:06.900
to figure out where things were
and where they're going to be,

00:16:06.900 --> 00:16:10.132
and then it tabulates
all that information,

00:16:10.132 --> 00:16:11.590
hands it over to
the item animator,

00:16:11.590 --> 00:16:13.860
that then takes that
information and says now how

00:16:13.860 --> 00:16:15.344
do we animate these things.

00:16:15.344 --> 00:16:17.260
And we have built in
animations in the system,

00:16:17.260 --> 00:16:20.760
but then you can customize,
given that same information

00:16:20.760 --> 00:16:23.314
from the layout manager,
in your own system.

00:16:23.314 --> 00:16:24.730
So on the layout
manager side, you

00:16:24.730 --> 00:16:26.000
have basically three options.

00:16:26.000 --> 00:16:28.550
Option one is, you can use
a standard layout manager,

00:16:28.550 --> 00:16:30.120
we give you a few.

00:16:30.120 --> 00:16:31.620
We've got
LinearLayoutManager, we've

00:16:31.620 --> 00:16:34.340
got GridLayoutManager, and
StaggeredGridLayoutManager.

00:16:34.340 --> 00:16:36.230
And all of these come
with the capabilities

00:16:36.230 --> 00:16:39.540
we're talking about now, not
just a simple item animations

00:16:39.540 --> 00:16:41.490
but also predictive
item animations.

00:16:41.490 --> 00:16:44.100
So if you run, we'll see
a demo a little bit later,

00:16:44.100 --> 00:16:48.190
but it actually moves
things off screen smoothly

00:16:48.190 --> 00:16:51.100
or on screen smoothly because it
can tell where these things are

00:16:51.100 --> 00:16:52.770
coming from or going to.

00:16:52.770 --> 00:16:55.180
Option two is if you want to
custom layout manager that's

00:16:55.180 --> 00:16:55.680
fine.

00:16:55.680 --> 00:16:57.290
Knock yourself out,
you know how you

00:16:57.290 --> 00:16:59.380
want to structure your
information on the screen,

00:16:59.380 --> 00:17:00.540
you're going to have
a little bit of work

00:17:00.540 --> 00:17:02.290
to do if you want to
go beyond the basics,

00:17:02.290 --> 00:17:04.640
but basic item animation
is handled for you.

00:17:04.640 --> 00:17:06.359
We know how to fade
things in and out,

00:17:06.359 --> 00:17:08.859
and to cross-fade them, and
to translate on the screen.

00:17:08.859 --> 00:17:11.280
We can calculate all
that stuff automatically.

00:17:11.280 --> 00:17:13.910
But it's not predictive, because
we don't know your layout

00:17:13.910 --> 00:17:17.619
manager, so we can't tell,
for your staggered, grid

00:17:17.619 --> 00:17:21.359
stacks, huge, things that
you have on the screen,

00:17:21.359 --> 00:17:23.810
where should that item
have been before we

00:17:23.810 --> 00:17:27.180
made it appear on the screen
in your strange layout manager.

00:17:27.180 --> 00:17:30.320
We don't know so all we
can do is fade it in.

00:17:30.320 --> 00:17:32.370
And then option three is
to go full bore custom,

00:17:32.370 --> 00:17:34.340
and say I've got a
custom layout manager,

00:17:34.340 --> 00:17:36.690
and I want predictive
animations so you're

00:17:36.690 --> 00:17:38.682
going to need to
enable those, and then

00:17:38.682 --> 00:17:40.890
you're going to need to tell
us what we need to know.

00:17:40.890 --> 00:17:43.110
For the items that go
away, that disappeared off

00:17:43.110 --> 00:17:44.570
the screen, where
would they have

00:17:44.570 --> 00:17:46.670
gone if we can still see them.

00:17:46.670 --> 00:17:49.290
Or if they appear on the
screen, from off screen, where

00:17:49.290 --> 00:17:51.030
did they come from.

00:17:51.030 --> 00:17:54.430
So let's take a look at
some of this information,

00:17:54.430 --> 00:17:55.770
how do we get this?

00:17:55.770 --> 00:18:00.560
So it's the two sides, it's
the pre-layout where we're

00:18:00.560 --> 00:18:03.790
trying to figure out where
they were before they then

00:18:03.790 --> 00:18:05.970
disappeared, and the post
layout like well where

00:18:05.970 --> 00:18:08.410
did they go once they
disappeared from the list.

00:18:08.410 --> 00:18:13.760
For everything that's in
that list, virtual or non.

00:18:13.760 --> 00:18:16.820
So, an important element here
is that there is potentially two

00:18:16.820 --> 00:18:18.200
calls to on layout children.

00:18:18.200 --> 00:18:21.850
Specifically if you opt
into predictive animations,

00:18:21.850 --> 00:18:24.180
then you're going to see two
calls into your on layout

00:18:24.180 --> 00:18:25.220
children method.

00:18:25.220 --> 00:18:27.459
The first one is going
to be pre-layout,

00:18:27.459 --> 00:18:29.750
where we need to know the
information before the layout

00:18:29.750 --> 00:18:32.060
change happens, including
for the items that

00:18:32.060 --> 00:18:33.321
are going to go away.

00:18:33.321 --> 00:18:34.820
And then there's
the regular layout,

00:18:34.820 --> 00:18:37.590
where we figure out where
everything is once layout

00:18:37.590 --> 00:18:40.427
has actually already run.

00:18:40.427 --> 00:18:42.760
All right, so let's take a
look at a little bit of code.

00:18:42.760 --> 00:18:45.410
So we have support
predictive item animations,

00:18:45.410 --> 00:18:47.729
this is what you need to
override and return true.

00:18:47.729 --> 00:18:49.520
If you actually want
predictive animations,

00:18:49.520 --> 00:18:52.260
then we're going to call you
twice for on layout children.

00:18:52.260 --> 00:18:54.990
And on onLayoutChildren
this code

00:18:54.990 --> 00:18:59.380
is taken mostly, stolen mostly,
from linear layout manager

00:18:59.380 --> 00:19:02.260
which Yigit wrote,
which I would suggest

00:19:02.260 --> 00:19:04.710
you look at to understand
the basics of how this works.

00:19:04.710 --> 00:19:07.230
But at a very high level there
are three important elements

00:19:07.230 --> 00:19:09.740
here, one is first you
detach and scrap the views,

00:19:09.740 --> 00:19:12.324
so you basically say,
OK take everything off

00:19:12.324 --> 00:19:13.740
and then I'm going
to tell you how

00:19:13.740 --> 00:19:16.590
to repopulate it into the view.

00:19:16.590 --> 00:19:18.880
And then we're going to
go through all the items

00:19:18.880 --> 00:19:22.250
that need to be in the list,
and we're going to add them in.

00:19:22.250 --> 00:19:25.640
And then we're going to
account for information

00:19:25.640 --> 00:19:28.710
if it's removed then we're
going to adjust the layout

00:19:28.710 --> 00:19:30.650
parameters appropriately.

00:19:30.650 --> 00:19:33.260
And there's a couple of
important things to note here,

00:19:33.260 --> 00:19:35.510
the item count
accounts for not just

00:19:35.510 --> 00:19:37.170
the real items that
are in the list,

00:19:37.170 --> 00:19:39.050
but if you're being
called on pre-layout

00:19:39.050 --> 00:19:40.820
it also accounts
for the items that

00:19:40.820 --> 00:19:44.270
are in the list prior
to layout running.

00:19:44.270 --> 00:19:46.220
So we want to know
where all of the items

00:19:46.220 --> 00:19:48.430
were, before a
layout run, including

00:19:48.430 --> 00:19:51.374
those items that are going to
go away because of the layout.

00:19:51.374 --> 00:19:53.540
So you iterate through
those, you put them in place,

00:19:53.540 --> 00:19:55.350
you add all the views
to RecyclerView,

00:19:55.350 --> 00:19:56.940
and then finally,
you do this step.

00:19:56.940 --> 00:19:59.240
And say, well, if I'm not
running pre-layout then

00:19:59.240 --> 00:20:01.560
I also need to figure out
where the items are going

00:20:01.560 --> 00:20:04.080
to be in the
virtual RecyclerView

00:20:04.080 --> 00:20:06.830
and the virtual list
after a layout runs.

00:20:06.830 --> 00:20:08.850
So once you've provided
all that information,

00:20:08.850 --> 00:20:10.790
then RecyclerView
has the information

00:20:10.790 --> 00:20:14.490
that it needs to then provide
it to the item animator

00:20:14.490 --> 00:20:16.210
to run the animations.

00:20:16.210 --> 00:20:19.384
So in item animator, let's have
some gratuitous animations.

00:20:19.384 --> 00:20:19.884
Awesome.

00:20:22.770 --> 00:20:25.810
So a couple of options
with item animator.

00:20:25.810 --> 00:20:28.850
One is go ahead and use the
default item animator, that's

00:20:28.850 --> 00:20:29.810
why we wrote it.

00:20:29.810 --> 00:20:31.740
It does a lot of
the basics for you.

00:20:31.740 --> 00:20:34.410
If you just want
simple animations,

00:20:34.410 --> 00:20:36.870
recycler view basically
enables default item

00:20:36.870 --> 00:20:40.860
animator, by default. That's
why we called it that.

00:20:40.860 --> 00:20:42.630
Clever, clever
naming, we think a lot

00:20:42.630 --> 00:20:45.410
about APIs in the Android team.

00:20:45.410 --> 00:20:47.094
Then go ahead and use it.

00:20:47.094 --> 00:20:48.760
And you could at least
start from there,

00:20:48.760 --> 00:20:51.650
and then start
customising as you

00:20:51.650 --> 00:20:55.320
see fit for some
specialized animations.

00:20:55.320 --> 00:20:58.460
So it does fade out, and
translate, and it fades in,

00:20:58.460 --> 00:21:00.680
and it crossfades changes.

00:21:00.680 --> 00:21:03.140
Option two is, you can get
a little more customized,

00:21:03.140 --> 00:21:07.610
and you can implement the
animator directly, or implement

00:21:07.610 --> 00:21:11.040
simple item animator,
or you can subclass.

00:21:11.040 --> 00:21:13.090
So what we did in the
demo you're about to see,

00:21:13.090 --> 00:21:15.550
is we subclassed off of
default item animator,

00:21:15.550 --> 00:21:17.645
and then just overrode
the specific capabilities

00:21:17.645 --> 00:21:18.270
that we wanted.

00:21:18.270 --> 00:21:20.519
So there's a lot of things
that you can lean on there,

00:21:20.519 --> 00:21:23.010
so that you don't have to
actually do everything.

00:21:23.010 --> 00:21:25.550
So there's an important
step about recording the pre

00:21:25.550 --> 00:21:27.240
and post layout
information, chances

00:21:27.240 --> 00:21:29.500
are if you're doing
custom animations,

00:21:29.500 --> 00:21:32.040
you may want more information
than the system records

00:21:32.040 --> 00:21:34.030
by default. By
default that says what

00:21:34.030 --> 00:21:36.390
was the view that
was changing here,

00:21:36.390 --> 00:21:39.160
and what were the
bounds of that view.

00:21:39.160 --> 00:21:41.300
So then it knows,
basically how big it was,

00:21:41.300 --> 00:21:43.754
and where it came
from before and after,

00:21:43.754 --> 00:21:45.670
and it can create some
simple animations based

00:21:45.670 --> 00:21:46.790
on that information.

00:21:46.790 --> 00:21:50.840
But if you're animating custom
content in your view holder,

00:21:50.840 --> 00:21:52.650
then maybe you want
more information

00:21:52.650 --> 00:21:53.979
recorded before and after.

00:21:53.979 --> 00:21:56.020
It's worth pointing out
that if anybody has taken

00:21:56.020 --> 00:21:58.706
a look at the transitions,
or the activities transitions

00:21:58.706 --> 00:22:01.960
APIs, this is very
similar to that,

00:22:01.960 --> 00:22:04.910
it's the idea that I need to
record a bunch of information,

00:22:04.910 --> 00:22:06.840
and then Layout is
going to run, then

00:22:06.840 --> 00:22:09.500
I'm going to record information
for the same and potentially

00:22:09.500 --> 00:22:10.570
different views.

00:22:10.570 --> 00:22:12.403
And then we're going
to compare them and run

00:22:12.403 --> 00:22:13.550
appropriate animations.

00:22:13.550 --> 00:22:15.504
So we record that
stuff before and after,

00:22:15.504 --> 00:22:16.920
and then you're
going to override,

00:22:16.920 --> 00:22:19.410
you're going to choose
which methods to override.

00:22:19.410 --> 00:22:21.660
So you can animate the
apparence or disappearance,

00:22:21.660 --> 00:22:24.250
for things that are
appearing or going away.

00:22:24.250 --> 00:22:26.420
Whether they're moving or not.

00:22:26.420 --> 00:22:27.920
You're going to
animate persistence,

00:22:27.920 --> 00:22:29.419
which is the things
that don't move,

00:22:29.419 --> 00:22:31.400
as well as the things
that move on the screen

00:22:31.400 --> 00:22:34.200
but basically are there
before and after layout runs.

00:22:34.200 --> 00:22:35.700
And then you going
to animate change

00:22:35.700 --> 00:22:38.260
when the actual contents
in items change.

00:22:38.260 --> 00:22:39.920
And all of these,
as I said, these

00:22:39.920 --> 00:22:43.060
have standard implementations
in default item animator,

00:22:43.060 --> 00:22:45.040
but then you can choose
to override and do

00:22:45.040 --> 00:22:47.160
something custom if you want.

00:22:47.160 --> 00:22:49.050
And then an important
point is that when

00:22:49.050 --> 00:22:51.900
you're done with your animation
on any particular view holder,

00:22:51.900 --> 00:22:53.970
you have to call dispatch
animation finished.

00:22:53.970 --> 00:22:55.470
There's a little
bit of state that's

00:22:55.470 --> 00:22:57.400
being tracked in
some situations,

00:22:57.400 --> 00:23:00.050
that we need to know
when to get rid of.

00:23:00.050 --> 00:23:02.880
So a good example, Yigit
alluded to this before,

00:23:02.880 --> 00:23:05.514
is if you remove a view, and
then we're going to animate,

00:23:05.514 --> 00:23:08.180
it we're going to fade that view
out, we actually take that view

00:23:08.180 --> 00:23:09.940
and we add it into
the view group

00:23:09.940 --> 00:23:13.250
so that it can exist so that
we can actually fade it out.

00:23:13.250 --> 00:23:14.850
You removed it from
the RecyclerView,

00:23:14.850 --> 00:23:17.870
but we added it in as kind of
a hidden view in the view group

00:23:17.870 --> 00:23:19.882
just for the purposes of
running the animation.

00:23:19.882 --> 00:23:21.840
Well we need to know when
the animation is done

00:23:21.840 --> 00:23:23.500
so that we can remove it then.

00:23:23.500 --> 00:23:25.560
YIGIT BOYAR: There's
actually like one common bug

00:23:25.560 --> 00:23:27.810
that people see, where they
play with the RecyclerView

00:23:27.810 --> 00:23:30.750
count, which is
public unfortunately,

00:23:30.750 --> 00:23:34.030
and then they see
shadow views on the UI,

00:23:34.030 --> 00:23:36.000
because layout manger
doesn't see them.

00:23:36.000 --> 00:23:38.080
So layout manger lays out,
everything works fine,

00:23:38.080 --> 00:23:40.770
but there's one of those views
that was animating and got

00:23:40.770 --> 00:23:42.000
stuck there.

00:23:42.000 --> 00:23:44.970
This is when the proper
APIs are not called back,

00:23:44.970 --> 00:23:48.180
or we are mucking up with
the internals RecyclerView,

00:23:48.180 --> 00:23:52.510
so keep that in mind.

00:23:52.510 --> 00:23:54.730
CHET HAASE: And
finally there's an item

00:23:54.730 --> 00:23:57.360
that if you want to
customize the change

00:23:57.360 --> 00:23:59.700
animation in particular,
there's new APIs that

00:23:59.700 --> 00:24:02.960
came out in 23.1, 23.1.1?

00:24:02.960 --> 00:24:05.185
YIGIT BOYAR: 23.1.0

00:24:05.185 --> 00:24:09.190
CHET HAASE: OK, 1.0 support
labor release a few weeks ago,

00:24:09.190 --> 00:24:12.210
with new change animation APIs.

00:24:12.210 --> 00:24:16.490
It gives us the ability to not
recycle or create a new view

00:24:16.490 --> 00:24:19.709
holder-- sorry, to recycle and
not create a new view holder,

00:24:19.709 --> 00:24:21.000
and we can pass it back to you.

00:24:21.000 --> 00:24:23.420
This avoids expensive,
potentially expensive, things

00:24:23.420 --> 00:24:26.610
like layout or just creating all
these objects on your behalf.

00:24:26.610 --> 00:24:29.310
So now instead of simply
cross fading views,

00:24:29.310 --> 00:24:31.942
for different view holders,
we can actually hand you back

00:24:31.942 --> 00:24:33.400
the same thing,
and then you can do

00:24:33.400 --> 00:24:36.040
it totally custom
animation potentially

00:24:36.040 --> 00:24:38.360
with lower overhead.

00:24:38.360 --> 00:24:41.290
So let's take a look at
a demo, fantastic demo,

00:24:41.290 --> 00:24:42.960
I bet I wrote this.

00:24:42.960 --> 00:24:45.160
Isn't this beautiful?

00:24:45.160 --> 00:24:47.050
So we have a simpler
RecyclerView here,

00:24:47.050 --> 00:24:50.160
you see me flinging, you
see me flinging back,

00:24:50.160 --> 00:24:52.530
there's a linear layout with
a background color on it.

00:24:52.530 --> 00:24:54.370
There's a text
view in the middle,

00:24:54.370 --> 00:24:56.165
the background color
determines the value

00:24:56.165 --> 00:24:57.665
of the text, its
really complicated.

00:25:00.387 --> 00:25:02.970
Some of the elements here are,
standard RecyclerView, standard

00:25:02.970 --> 00:25:05.219
DefaultItemAnimator-- you
haven't seen the animations,

00:25:05.219 --> 00:25:06.710
yet so that doesn't
mean anything--

00:25:06.710 --> 00:25:09.680
standard LinearLayoutManager,
with one caveat-- that I wanted

00:25:09.680 --> 00:25:11.290
to disable predictive
animations,

00:25:11.290 --> 00:25:13.470
so that we can talk about
some of the artifacts

00:25:13.470 --> 00:25:15.070
that you'll see
if you do not have

00:25:15.070 --> 00:25:18.470
predictive animations enabled--
but LinearLayoutManger actually

00:25:18.470 --> 00:25:22.310
has them enabled
by default. So yay.

00:25:22.310 --> 00:25:24.820
All right so there's a
simple view holder here,

00:25:24.820 --> 00:25:27.400
it's just retaining
information about the text view

00:25:27.400 --> 00:25:31.250
and a linear layout, so that
you can get those later and set

00:25:31.250 --> 00:25:33.850
the color in the text
appropriately or even animate

00:25:33.850 --> 00:25:35.370
those values.

00:25:35.370 --> 00:25:37.710
Simple adapter, so
we have this adapter,

00:25:37.710 --> 00:25:39.620
we're going to be
called to bind the view

00:25:39.620 --> 00:25:41.400
holder with the
appropriate information,

00:25:41.400 --> 00:25:43.210
we have this database.

00:25:43.210 --> 00:25:44.880
Very complicated
architecture here, we

00:25:44.880 --> 00:25:46.421
have a list of colors
here, and we're

00:25:46.421 --> 00:25:49.190
to bind the background
color of the container

00:25:49.190 --> 00:25:52.044
and the text in the
text view appropriately.

00:25:52.044 --> 00:25:54.460
And then we're going to be
called to create a view holder,

00:25:54.460 --> 00:25:56.364
we inflate this
resource, we're going

00:25:56.364 --> 00:25:58.030
to set a click
listener-- because that's

00:25:58.030 --> 00:26:00.050
how I determine where
these things are going

00:26:00.050 --> 00:26:02.130
to be added and deleted
in this awesome demo

00:26:02.130 --> 00:26:04.150
that we're working
through right now--

00:26:04.150 --> 00:26:07.540
and that's really about it
in the basic RecyclerView.

00:26:07.540 --> 00:26:10.460
And then we're just going
to get some default behavior

00:26:10.460 --> 00:26:11.880
for the delete
the add animation,

00:26:11.880 --> 00:26:13.517
so we can see the
delete here, you

00:26:13.517 --> 00:26:15.600
can see the touch point
and a little white circle,

00:26:15.600 --> 00:26:18.660
we're clicking on items there
and we're deleting those.

00:26:18.660 --> 00:26:22.150
And we fade the thing out that
got deleted, we shift stuff up

00:26:22.150 --> 00:26:24.580
that got moved in the recycler
view before and after.

00:26:24.580 --> 00:26:27.350
And then we fade in a
new item at the bottom.

00:26:27.350 --> 00:26:30.050
The delete operation
is very simple,

00:26:30.050 --> 00:26:33.950
we remove it from
the list that we had,

00:26:33.950 --> 00:26:36.080
the appropriate position there.

00:26:36.080 --> 00:26:38.080
And then we do a
notifyItemRemoved.

00:26:38.080 --> 00:26:40.920
It's important to
tell RecyclerView

00:26:40.920 --> 00:26:44.250
the thing that happened, don't
just say something changed,

00:26:44.250 --> 00:26:46.080
the more information
you give us about

00:26:46.080 --> 00:26:49.400
the specific range, the specific
item, the specific action,

00:26:49.400 --> 00:26:52.670
the better able we are
going to be to actually take

00:26:52.670 --> 00:26:54.800
advantage of that and give
you a richer experience.

00:26:54.800 --> 00:26:56.270
If you just say
something changed,

00:26:56.270 --> 00:26:59.010
and we don't have stable
IDs and can't determine

00:26:59.010 --> 00:27:00.620
what those things
are that changed,

00:27:00.620 --> 00:27:02.786
you're probably not going
to get the rich animations

00:27:02.786 --> 00:27:05.440
and interaction that you want.

00:27:05.440 --> 00:27:07.644
OK so let's take a
look at add animations,

00:27:07.644 --> 00:27:09.560
once again, we're going
to click an item there

00:27:09.560 --> 00:27:11.950
and then we're going to add one
into the middle of the list.

00:27:11.950 --> 00:27:13.020
We're going to
fade the thing out

00:27:13.020 --> 00:27:14.260
of the bottom that's
going away, we're

00:27:14.260 --> 00:27:15.940
going to shift some
things on the screen,

00:27:15.940 --> 00:27:17.898
then we're going to fade
in the new item there.

00:27:17.898 --> 00:27:20.870
Decent animations, but I
think we can do better.

00:27:20.870 --> 00:27:23.900
This is very similar to
the delete thing, where

00:27:23.900 --> 00:27:25.450
instead of calling
notify delete,

00:27:25.450 --> 00:27:27.720
we do a notify item inserted.

00:27:27.720 --> 00:27:30.550
After we've added the
color into the list.

00:27:30.550 --> 00:27:33.010
All right so here are the
artifacts I was talking about,

00:27:33.010 --> 00:27:34.860
so you can sort of
see these delete

00:27:34.860 --> 00:27:36.620
and add operations again.

00:27:36.620 --> 00:27:38.950
And you can see that,
this is supposed

00:27:38.950 --> 00:27:40.770
to be a contiguous list.

00:27:40.770 --> 00:27:43.010
You're basically breaking
the users' mental model,

00:27:43.010 --> 00:27:45.710
they think there's a list,
but then why is this thing.

00:27:45.710 --> 00:27:47.650
Why is there that
weird janky thing

00:27:47.650 --> 00:27:49.780
at the bottom where things
are fading in and out.

00:27:49.780 --> 00:27:51.238
Now it doesn't look
like a list it,

00:27:51.238 --> 00:27:52.914
just looks like a
jumble of items there.

00:27:52.914 --> 00:27:54.830
So that's the thing that
we want to get around

00:27:54.830 --> 00:27:56.770
with predictive animations.

00:27:56.770 --> 00:27:58.900
So if we take a look at
predictive animations

00:27:58.900 --> 00:28:02.640
for the fade case, you can see
that now when items go away

00:28:02.640 --> 00:28:04.950
they move off the
screen very logically,

00:28:04.950 --> 00:28:06.900
into the position that
they're still occupying

00:28:06.900 --> 00:28:08.170
within the virtual list.

00:28:08.170 --> 00:28:11.260
Same thing with delete, when
items come in from off screen,

00:28:11.260 --> 00:28:13.470
they're moving in a
very predictable manner

00:28:13.470 --> 00:28:16.000
that matches what the user
thinks about this list

00:28:16.000 --> 00:28:16.500
structure.

00:28:19.650 --> 00:28:22.240
So some code to enable to this.

00:28:22.240 --> 00:28:25.070
First of all, here's my
awesome linear layout manager,

00:28:25.070 --> 00:28:28.150
custom class, where basically
just enables or disables

00:28:28.150 --> 00:28:30.050
predictive animations
just for the purposes

00:28:30.050 --> 00:28:31.472
of running the show demo.

00:28:31.472 --> 00:28:32.590
YIGIT BOYAR: You
should OpenSource it.

00:28:32.590 --> 00:28:34.381
CHET HAASE: Yeah we're
going to open source

00:28:34.381 --> 00:28:36.397
just that one snippet of code.

00:28:36.397 --> 00:28:37.980
That's really the
most interesting bit

00:28:37.980 --> 00:28:39.560
in the entire demo.

00:28:39.560 --> 00:28:41.560
We're looking into open
sourcing the rest of it,

00:28:41.560 --> 00:28:43.851
but that's the one that I
really want to get out there.

00:28:43.851 --> 00:28:45.690
Maybe we can write
an article on my blog

00:28:45.690 --> 00:28:47.450
about that,
medium.com we'll write

00:28:47.450 --> 00:28:49.230
an article about that snippet.

00:28:49.230 --> 00:28:50.870
Check there.

00:28:50.870 --> 00:28:55.390
So default change animations,
you can see as we click it,

00:28:55.390 --> 00:28:56.509
you get a crossfade.

00:28:56.509 --> 00:28:58.550
We're doing a cross fade
of the background color,

00:28:58.550 --> 00:28:59.470
as well as the text.

00:28:59.470 --> 00:29:01.345
Everything all at the
same time, basically we

00:29:01.345 --> 00:29:03.130
have the old m we
have the new view,

00:29:03.130 --> 00:29:05.700
and we simply do an alpha
cross-fade between them.

00:29:05.700 --> 00:29:07.290
It's decent, but
maybe we can make

00:29:07.290 --> 00:29:09.030
that a little more interesting.

00:29:09.030 --> 00:29:13.310
And that's with the standard
default item animator,

00:29:13.310 --> 00:29:15.280
so with a custom
item animator, we've

00:29:15.280 --> 00:29:18.310
got a little bit something
more interesting going on.

00:29:18.310 --> 00:29:20.700
So instead of cross fade
in between these two views,

00:29:20.700 --> 00:29:23.330
we're actually treating the
entire view hierarchy in there.

00:29:23.330 --> 00:29:25.310
The linear layout and
the text view separately,

00:29:25.310 --> 00:29:26.851
and doing different
things with them.

00:29:26.851 --> 00:29:29.190
So the background color is
fading to black and then

00:29:29.190 --> 00:29:31.170
back up to the new
color, and the text

00:29:31.170 --> 00:29:34.010
is rotating out of place,
and then with the new value

00:29:34.010 --> 00:29:35.890
rotating into place.

00:29:35.890 --> 00:29:37.600
So how do we do that?

00:29:37.600 --> 00:29:39.990
First of all, we say that we
can reuse the view holder,

00:29:39.990 --> 00:29:42.050
because I don't want
to create a new one.

00:29:42.050 --> 00:29:43.740
I simply want to
animate the items that

00:29:43.740 --> 00:29:47.620
are in the existing view
holder that we already have.

00:29:47.620 --> 00:29:50.810
And then we extend
default item animator,

00:29:50.810 --> 00:29:53.970
specifically to customize
the change in animation.

00:29:53.970 --> 00:29:57.440
So here, we've got the
get item holder info,

00:29:57.440 --> 00:29:59.197
this is a data
structure where we

00:29:59.197 --> 00:30:00.780
cache the information
that we're going

00:30:00.780 --> 00:30:02.360
to retain before and after.

00:30:02.360 --> 00:30:04.360
So that we know the values
that we actually need

00:30:04.360 --> 00:30:06.530
to animate before and after.

00:30:06.530 --> 00:30:08.140
And then this is
going to be called

00:30:08.140 --> 00:30:11.390
by both the pre-layout record
operation, as well as the post

00:30:11.390 --> 00:30:12.370
player record.

00:30:12.370 --> 00:30:16.140
So basically when you
customize this stuff

00:30:16.140 --> 00:30:17.870
we're going to call
your code and say OK,

00:30:17.870 --> 00:30:20.790
record whatever you want
before, and now layout

00:30:20.790 --> 00:30:22.636
is run, record whatever
you want to after.

00:30:22.636 --> 00:30:24.010
And then your
animation calls are

00:30:24.010 --> 00:30:26.285
going to be called with
those data structures,

00:30:26.285 --> 00:30:28.410
so that you can then take
that information that you

00:30:28.410 --> 00:30:31.740
recorded earlier and
do something with it.

00:30:31.740 --> 00:30:34.110
Here we override the
animate change method

00:30:34.110 --> 00:30:36.650
and you can see, in
the method parameters,

00:30:36.650 --> 00:30:39.570
we've got the holder, the old
holder and the new holder,

00:30:39.570 --> 00:30:42.020
which in this case is actually
going to be the same view

00:30:42.020 --> 00:30:43.260
holder information.

00:30:43.260 --> 00:30:45.389
And we have the pre
info and the post info,

00:30:45.389 --> 00:30:46.930
so that's the data
structures that we

00:30:46.930 --> 00:30:50.334
filled in ourselves when we
were called before and after.

00:30:50.334 --> 00:30:51.750
And then let's see
how this works.

00:30:51.750 --> 00:30:53.280
So we create some
animations here.

00:30:53.280 --> 00:30:55.410
We have one animation
that does a fade

00:30:55.410 --> 00:30:57.690
to black from the old
color, and then fade

00:30:57.690 --> 00:30:59.610
from black into the new color.

00:30:59.610 --> 00:31:01.870
And we structure that
inside an animator set,

00:31:01.870 --> 00:31:04.460
and sequence those to
run one after the other.

00:31:04.460 --> 00:31:07.310
And then the text rotation
is on the text view itself,

00:31:07.310 --> 00:31:09.460
so we're going to do a
rotation of zero to 90

00:31:09.460 --> 00:31:13.190
to rotate it so that it's
perpendicular to the viewer.

00:31:13.190 --> 00:31:16.070
And then we swap the text out--
we'll see on the next slide--

00:31:16.070 --> 00:31:18.590
and then we animate the
text back into place

00:31:18.590 --> 00:31:19.930
with the new value of it.

00:31:19.930 --> 00:31:21.430
And again we run
those sequentially.

00:31:21.430 --> 00:31:25.129
Animator set run one, run
the other, and we're done.

00:31:25.129 --> 00:31:26.670
I'm cutting out a
little bit of code,

00:31:26.670 --> 00:31:27.860
there are some
interpolators in there,

00:31:27.860 --> 00:31:29.690
but I just wanted to
get the high level

00:31:29.690 --> 00:31:31.750
view of what's going on there.

00:31:31.750 --> 00:31:34.120
And then we add a
listener on the animation

00:31:34.120 --> 00:31:36.010
so that we swap the
text appropriately,

00:31:36.010 --> 00:31:37.970
so we're going to
use the old text.

00:31:37.970 --> 00:31:41.410
So we've already run layout,
and our reused view holder

00:31:41.410 --> 00:31:42.369
has the new text in it.

00:31:42.369 --> 00:31:44.368
Well that's not going to
make any sense if we're

00:31:44.368 --> 00:31:46.270
trying to rotate the
old text, out so when

00:31:46.270 --> 00:31:48.240
the animation starts
we substitute that

00:31:48.240 --> 00:31:51.260
with the old text, and then
we run that half an animation

00:31:51.260 --> 00:31:54.270
to rotate it out of view so the
views or viewer can't see it

00:31:54.270 --> 00:31:54.930
anymore.

00:31:54.930 --> 00:31:57.100
Then we swap in the
value of the new text,

00:31:57.100 --> 00:32:00.100
and we rotate it into place.

00:32:00.100 --> 00:32:02.430
Change animation, now we
put all this stuff together,

00:32:02.430 --> 00:32:04.500
we create an animator set.

00:32:04.500 --> 00:32:07.320
And we add them all together,
and then most importantly we

00:32:07.320 --> 00:32:09.420
call
dispatchAnimationFinished so

00:32:09.420 --> 00:32:11.600
that the RecyclerView
can get rid of any state

00:32:11.600 --> 00:32:14.120
that it retained for these
things along the way.

00:32:14.120 --> 00:32:15.820
And then we're off and running.

00:32:15.820 --> 00:32:18.190
So on the previous
one, if you actually

00:32:18.190 --> 00:32:20.020
clicked on an item
that was animating,

00:32:20.020 --> 00:32:21.560
you'd get some kind
of janky effects

00:32:21.560 --> 00:32:23.950
because you'd be in the
middle of an animation.

00:32:23.950 --> 00:32:25.800
And then a new
animation would start,

00:32:25.800 --> 00:32:28.110
and they'd be running
at the same time,

00:32:28.110 --> 00:32:30.230
or maybe you could cancel
one but you would get

00:32:30.230 --> 00:32:32.560
some discontinuous behavior.

00:32:32.560 --> 00:32:34.870
So what I really wanted
was, if the user just

00:32:34.870 --> 00:32:37.300
continuously clicks
on these things,

00:32:37.300 --> 00:32:39.760
you make that transition
to the new animation

00:32:39.760 --> 00:32:40.677
as smooth as possible.

00:32:40.677 --> 00:32:42.509
So you can see we're
doing that on the right

00:32:42.509 --> 00:32:45.070
there, were clicking on this
thing and it looks mostly good.

00:32:45.070 --> 00:32:47.060
If they click during
the second half,

00:32:47.060 --> 00:32:49.230
well there's a little
too much information,

00:32:49.230 --> 00:32:51.210
so we are swapping the
text along the way,

00:32:51.210 --> 00:32:53.630
but we're making the
color transition as smooth

00:32:53.630 --> 00:32:54.596
as possible.

00:32:54.596 --> 00:32:55.470
So how do we do that?

00:32:55.470 --> 00:32:58.470
First of all, we need to cache
the running animations we're

00:32:58.470 --> 00:33:00.860
going to need to retain
information about what's

00:33:00.860 --> 00:33:02.980
actually running on each
item-- so we can get

00:33:02.980 --> 00:33:05.330
that information later-- so
we're going to cache this

00:33:05.330 --> 00:33:06.720
in this little data structure.

00:33:06.720 --> 00:33:07.950
And then we're going
to check it when we're

00:33:07.950 --> 00:33:09.970
told to animate a change,
we're going to say

00:33:09.970 --> 00:33:12.020
well are there any
animations currently running

00:33:12.020 --> 00:33:14.180
on this thing, if
there are let's record

00:33:14.180 --> 00:33:15.416
some information about that.

00:33:15.416 --> 00:33:17.040
Are we in the first
half the animation,

00:33:17.040 --> 00:33:18.720
or the second half
the animation,

00:33:18.720 --> 00:33:22.400
and how far are we
in those animations.

00:33:22.400 --> 00:33:25.472
And then we're going to
seek the new animations,

00:33:25.472 --> 00:33:27.680
or we're going to take all
that information from what

00:33:27.680 --> 00:33:30.370
used to be running, and then
seek in the new animations

00:33:30.370 --> 00:33:32.340
that we created from
the previous code

00:33:32.340 --> 00:33:33.620
that we saw before.

00:33:33.620 --> 00:33:36.610
So that if you're halfway
through, or quarter of the way

00:33:36.610 --> 00:33:38.194
through, that first
half an animation,

00:33:38.194 --> 00:33:39.859
we're going to seek
a quarter of the way

00:33:39.859 --> 00:33:41.330
through the new
animation, so it's

00:33:41.330 --> 00:33:43.100
going to start at
exactly the same place

00:33:43.100 --> 00:33:45.344
that the old one left off.

00:33:45.344 --> 00:33:47.760
And then we're going to cache
the new animators when we're

00:33:47.760 --> 00:33:50.380
done, because we need to
provide that information

00:33:50.380 --> 00:33:53.120
for the next
interruption that occurs.

00:33:53.120 --> 00:33:54.987
And that was it

00:33:54.987 --> 00:33:56.070
YIGIT BOYAR: Thanks, Chet.

00:33:56.070 --> 00:33:57.890
CHET HAASE: You're
welcome, Yigit.

00:33:57.890 --> 00:34:00.170
YIGIT BOYAR: I wish I sold
them before writing them.

00:34:03.230 --> 00:34:08.230
OK, so we want to touch base
with some important things

00:34:08.230 --> 00:34:12.060
I about RecyclerView that we
think you should know about.

00:34:12.060 --> 00:34:14.840
So No Update needs No OnBind.

00:34:14.840 --> 00:34:16.699
This is one problem
that people have

00:34:16.699 --> 00:34:18.272
when transitioning
from listView,

00:34:18.272 --> 00:34:20.280
and come with the
same expectations.

00:34:20.280 --> 00:34:22.440
RecyclerView is different.

00:34:22.440 --> 00:34:25.650
So if you don't tell that
an item has been updated,

00:34:25.650 --> 00:34:27.489
we are not going to rebind it.

00:34:27.489 --> 00:34:29.210
How do you update an item?

00:34:29.210 --> 00:34:32.600
So, for example, if you say
ItemMoved, the item only moved.

00:34:32.600 --> 00:34:35.900
I have no idea you are
displaying a wrong number there

00:34:35.900 --> 00:34:38.820
because you didn't tell
me the item has changed.

00:34:38.820 --> 00:34:40.460
So we will just
move it, we are not

00:34:40.460 --> 00:34:41.969
going to tell that
to the adapter.

00:34:41.969 --> 00:34:43.000
Why do we do this?

00:34:43.000 --> 00:34:47.420
Because not calling OnBind means
we are not emulating anything.

00:34:47.420 --> 00:34:50.610
If you don't emulate
anything, caches are valid,

00:34:50.610 --> 00:34:52.500
and kittens are happy.

00:34:52.500 --> 00:34:53.650
It's important.

00:34:53.650 --> 00:34:58.200
So another mistake I always
see is that-- making this.

00:34:58.200 --> 00:35:01.830
You cannot make position
final in OnBind calls.

00:35:01.830 --> 00:35:06.280
This goes back to the same
example in the previous slide.

00:35:06.280 --> 00:35:08.110
Just because an
item moved doesn't

00:35:08.110 --> 00:35:09.830
mean we are going to rebind it.

00:35:09.830 --> 00:35:12.685
So if you use that position,
in an example like this,

00:35:12.685 --> 00:35:15.800
like in a ClickListener,
you're doing it wrong.

00:35:15.800 --> 00:35:19.100
So we can easily crash this
code by something like this.

00:35:19.100 --> 00:35:20.970
You bind it, tied
to position five.

00:35:20.970 --> 00:35:23.240
You move it, then call onClick.

00:35:23.240 --> 00:35:27.300
Now you remove the wrong
item from the adapter.

00:35:27.300 --> 00:35:28.582
So how do you solve this?

00:35:37.750 --> 00:35:39.600
Yes, this is how we solve it.

00:35:39.600 --> 00:35:42.560
There's a getAdapterPosition in
the holder, which will always

00:35:42.560 --> 00:35:46.430
give you the up-to-date
adapter position for a holder.

00:35:46.430 --> 00:35:49.160
So if you cannot
use that position,

00:35:49.160 --> 00:35:52.000
it is better to create that
ClickListener where you create

00:35:52.000 --> 00:35:53.260
the ViewHolder.

00:35:53.260 --> 00:35:55.870
So it's much better to
use onCreateViewHolder

00:35:55.870 --> 00:35:57.970
to end your callback
so that you don't

00:35:57.970 --> 00:36:02.010
keep creating a new object
every time the view is rebounds.

00:36:02.010 --> 00:36:04.380
And this NO_POSITION
check is also important

00:36:04.380 --> 00:36:07.660
because in a case where
an item is the deleted

00:36:07.660 --> 00:36:10.220
but users are quick enough
to click on that item

00:36:10.220 --> 00:36:12.420
before it is
removed from the UI,

00:36:12.420 --> 00:36:15.159
you also receive the callback
because the real view,

00:36:15.159 --> 00:36:16.950
so you should always
check for NO_POSITION.

00:36:19.970 --> 00:36:22.550
Another component involved
in the API we introduced

00:36:22.550 --> 00:36:24.450
is this item payload.

00:36:24.450 --> 00:36:28.860
So when you change an item,
you can say why it changed.

00:36:28.860 --> 00:36:31.570
For example, I can
say this item position

00:36:31.570 --> 00:36:36.430
changed because maybe the user
liked it or stopped liking it.

00:36:36.430 --> 00:36:38.000
The cool part about
this API there

00:36:38.000 --> 00:36:42.300
is another onBind method, which
you see as a list of payloads.

00:36:42.300 --> 00:36:46.640
So if the payload is empty, you
just run the regular onBind.

00:36:46.640 --> 00:36:49.310
But if the payload
is not empty, this

00:36:49.310 --> 00:36:51.730
means we are reusing
the same ViewHolder.

00:36:51.730 --> 00:36:55.060
So you know that ViewHolder
was presenting the same item

00:36:55.060 --> 00:36:56.120
before.

00:36:56.120 --> 00:36:58.970
A change came for this
particular reason.

00:36:58.970 --> 00:37:01.570
So the only thing-- so
say it's a like update.

00:37:01.570 --> 00:37:04.840
The only thing you have to
do is change the button.

00:37:04.840 --> 00:37:07.330
Because you know the rest
of the ViewHolder is valid.

00:37:07.330 --> 00:37:09.135
And this same
payload information

00:37:09.135 --> 00:37:11.770
is also passed to
your item animator,

00:37:11.770 --> 00:37:14.480
where you can use to decide
on the like change I'm

00:37:14.480 --> 00:37:17.240
going to animate, the heart.

00:37:17.240 --> 00:37:20.060
So there's another
confusion in RecyclerView

00:37:20.060 --> 00:37:22.190
where what does an
adapter position mean?

00:37:22.190 --> 00:37:26.110
A layout position, like when
we did it's only one position.

00:37:26.110 --> 00:37:26.970
We did it.

00:37:26.970 --> 00:37:28.480
It was wrong.

00:37:28.480 --> 00:37:31.826
So we'll see this example
where we have a bunch of items.

00:37:31.826 --> 00:37:34.860
The AP stands for Adapter
Position, LP, Layout Position.

00:37:34.860 --> 00:37:35.790
They're all the same.

00:37:35.790 --> 00:37:36.920
It matches.

00:37:36.920 --> 00:37:39.590
Then the adapter says I
moved the item in position 2

00:37:39.590 --> 00:37:41.250
to an item at position 5.

00:37:41.250 --> 00:37:44.030
So now if you look
at it, the items,

00:37:44.030 --> 00:37:47.380
their adapter position doesn't
match their layout positions.

00:37:47.380 --> 00:37:51.010
RecyclerView knows this, so if
you try to call the adapter,

00:37:51.010 --> 00:37:53.080
try to get the adapter
position on that view,

00:37:53.080 --> 00:37:54.470
it will tell you it is at 5.

00:37:54.470 --> 00:37:56.920
So you can safely
access your adapter.

00:37:56.920 --> 00:37:59.610
It's just we did not
run a layout yet.

00:37:59.610 --> 00:38:03.950
So when the layout runs, items
go to their current positions,

00:38:03.950 --> 00:38:06.770
and these are in sync again.

00:38:06.770 --> 00:38:08.890
So if you, for
example, in any event,

00:38:08.890 --> 00:38:11.502
you're trying to get the view
involved with the other one,

00:38:11.502 --> 00:38:12.960
then you would like
to use a layout

00:38:12.960 --> 00:38:16.720
position because it's what the
user is seeing at the moment.

00:38:16.720 --> 00:38:19.300
But if you want to access the
adapter, remove or modify,

00:38:19.300 --> 00:38:22.340
you use the AdapterPosition.

00:38:22.340 --> 00:38:24.660
So another mistake
we have seen a lot

00:38:24.660 --> 00:38:28.750
is why we call-- if RecyclerView
calls onCreate, that means

00:38:28.750 --> 00:38:30.570
it needs a new ViewHolder.

00:38:30.570 --> 00:38:31.970
So it's a common mistake.

00:38:31.970 --> 00:38:35.210
Oh I have a aHeaderViewHolder,
if Recycle asks for it,

00:38:35.210 --> 00:38:37.970
let me just cache and return it.

00:38:37.970 --> 00:38:41.150
It told you to create, not
to return the existing one.

00:38:41.150 --> 00:38:45.930
It would use it if it goes
right, so you cannot do this.

00:38:45.930 --> 00:38:48.430
You need to be creating
a new ViewHolder.

00:38:48.430 --> 00:38:51.430
Or get it from some other
pool that RecyclerView

00:38:51.430 --> 00:38:54.710
doesn't know about.

00:38:54.710 --> 00:38:58.310
So, for example,
RecyclerView pools are great.

00:38:58.310 --> 00:39:00.570
We can reuse the views among
different RecyclerViews,

00:39:00.570 --> 00:39:02.570
even in your own components.

00:39:02.570 --> 00:39:05.110
So let me create
this one giant pool

00:39:05.110 --> 00:39:07.990
for all of my applications,
so I don't create views again.

00:39:07.990 --> 00:39:09.680
Yay performance!

00:39:09.680 --> 00:39:10.330
No.

00:39:10.330 --> 00:39:13.780
You cannot do this either,
because if you do this, first,

00:39:13.780 --> 00:39:15.350
you are going to
leak the context.

00:39:15.350 --> 00:39:18.120
These views are inflated
per their context.

00:39:18.120 --> 00:39:20.760
They get the styles, they
inherit a bunch of stuff.

00:39:20.760 --> 00:39:24.130
So if you leave the
activity, the viewer

00:39:24.130 --> 00:39:25.860
will keep reference
to the context.

00:39:25.860 --> 00:39:27.530
That will total activity.

00:39:27.530 --> 00:39:29.920
Everything will leak
or it will crash.

00:39:29.920 --> 00:39:32.500
The second problem
is the inconsistency,

00:39:32.500 --> 00:39:34.920
because the context may
change between activities.

00:39:34.920 --> 00:39:37.040
They may be loaded
with different styles,

00:39:37.040 --> 00:39:38.540
with different teams.

00:39:38.540 --> 00:39:39.850
So you cannot do this.

00:39:39.850 --> 00:39:42.520
You need to create a pool
per activity context.

00:39:46.100 --> 00:39:49.070
OK, this is another problem
we've been seeing where people

00:39:49.070 --> 00:39:53.330
adapt RecyclerView if it doesn't
receive a change animation,

00:39:53.330 --> 00:39:55.890
on background traditionally,
or well, you cannot do this,

00:39:55.890 --> 00:39:58.150
you need to update your
adapter on the main thread.

00:39:58.150 --> 00:39:59.730
But people are
clever, what they do

00:39:59.730 --> 00:40:02.730
is they update their context
on a background thread,

00:40:02.730 --> 00:40:06.440
and then notify the
RecyclerView on the main thread.

00:40:06.440 --> 00:40:09.690
You cannot fool RecyclerView.

00:40:09.690 --> 00:40:15.050
If that was the proper
solution, we will do it, right?

00:40:15.050 --> 00:40:17.527
We'll just move it
to the main thread.

00:40:17.527 --> 00:40:18.610
So that's not the problem.

00:40:18.610 --> 00:40:20.710
The problem is while
RecyclerView is calculating

00:40:20.710 --> 00:40:23.861
your layout, you cannot suddenly
sudden say I just removed item

00:40:23.861 --> 00:40:24.360
3.

00:40:24.360 --> 00:40:26.100
Oh wait, I was binding it.

00:40:26.100 --> 00:40:27.340
Like, what happens?

00:40:27.340 --> 00:40:28.580
You can't do this.

00:40:28.580 --> 00:40:32.180
You have to update that
adapter on the main thread.

00:40:32.180 --> 00:40:34.180
And tell RecyclerView instantly.

00:40:34.180 --> 00:40:34.960
That's the thing.

00:40:34.960 --> 00:40:35.692
You update it.

00:40:35.692 --> 00:40:37.150
Write those methods
in your adapter

00:40:37.150 --> 00:40:39.680
where every time its
contents are updated,

00:40:39.680 --> 00:40:42.640
it tells the RecyclerView.

00:40:42.640 --> 00:40:43.889
Yike!

00:40:43.889 --> 00:40:44.930
Oh my god, we're on time.

00:40:44.930 --> 00:40:45.620
CHET HAASE: Wow.

00:40:45.620 --> 00:40:47.270
We actually finished in time.

00:40:47.270 --> 00:40:51.900
So I did want to point out, we
will open source the real demo.

00:40:51.900 --> 00:40:53.390
We just have to figure out how.

00:40:53.390 --> 00:40:58.992
So check our feeds
here if you want to.

00:40:58.992 --> 00:41:01.450
Those are the wrong links for
the Dev Summit at the bottom.

00:41:01.450 --> 00:41:02.722
YIGIT BOYAR: Oops!

00:41:02.722 --> 00:41:04.680
CHET HAASE: Ignore the
ones on the lower right.

00:41:04.680 --> 00:41:09.000
They're wrong, but check
our Twitter or G+ feeds,

00:41:09.000 --> 00:41:11.260
and we'll post something
when we open source the demo.

00:41:11.260 --> 00:41:14.325
We have two minutes and
50 seconds for questions.

00:41:16.830 --> 00:41:18.642
Yes?

00:41:18.642 --> 00:41:20.001
AUDIENCE: [INAUDIBLE]

00:41:20.001 --> 00:41:21.740
CHET HAASE: Oh,
There's a mic coming.

00:41:21.740 --> 00:41:23.200
YIGIT BOYAR: Let's
wait for a mic.

00:41:23.200 --> 00:41:26.012
You went past him.

00:41:26.012 --> 00:41:27.720
CHET HAASE: And we're
out of time, sorry.

00:41:27.720 --> 00:41:30.370
AUDIENCE: So, just
want to know, compared

00:41:30.370 --> 00:41:32.260
with listview is
there any performance

00:41:32.260 --> 00:41:34.365
impact on RecyclerView?

00:41:34.365 --> 00:41:35.740
CHET HAASE: Compared
to ListView,

00:41:35.740 --> 00:41:37.073
is there any performance impact?

00:41:37.073 --> 00:41:39.080
I would say hopefully
it's all positive.

00:41:39.080 --> 00:41:41.330
Some of the stuff that you
alluded to like not calling

00:41:41.330 --> 00:41:43.985
onBind, because we have more
information about this stuff,

00:41:43.985 --> 00:41:48.020
we also-- because we know the
specific items and actions

00:41:48.020 --> 00:41:50.050
and ranges that
are being changed,

00:41:50.050 --> 00:41:51.580
we can do things more optimally.

00:41:51.580 --> 00:41:53.740
Our cache is more intelligent.

00:41:53.740 --> 00:41:55.990
YIGIT BOYAR: I think one of
the biggest UI performance

00:41:55.990 --> 00:41:58.570
improvements comes from
not calling onBind.

00:41:58.570 --> 00:42:01.330
So if you dispatch
proper adapter updates,

00:42:01.330 --> 00:42:03.140
you'll probably
gain performance.

00:42:03.140 --> 00:42:05.410
Of course RecyclerView
runs more animations,

00:42:05.410 --> 00:42:08.390
handles more cases, so there's
a cost of them as well.

00:42:08.390 --> 00:42:10.700
But I mean you want those
animations probably,

00:42:10.700 --> 00:42:13.290
so you better use RecyclerView.

00:42:13.290 --> 00:42:16.456
Important part is, dispatch
proper adapter updates.

00:42:16.456 --> 00:42:18.552
CHET HAASE: That's it.

00:42:18.552 --> 00:42:19.385
AUDIENCE: Thank you.

00:42:19.385 --> 00:42:20.176
CHET HAASE: Thanks.

00:42:22.640 --> 00:42:24.500
YIGIT BOYAR: Another question?

00:42:24.500 --> 00:42:26.770
CHET HAASE: Yes?

00:42:26.770 --> 00:42:28.110
No?

00:42:28.110 --> 00:42:30.040
Yes?

00:42:30.040 --> 00:42:32.237
YIGIT BOYAR: He was making--

00:42:32.237 --> 00:42:33.570
AUDIENCE: I'm going to be first.

00:42:33.570 --> 00:42:34.420
CHET HAASE: OK.

00:42:34.420 --> 00:42:39.706
AUDIENCE: In your opinion, use
of your show, the set on click

00:42:39.706 --> 00:42:42.470
listener for every
item, on every view.

00:42:42.470 --> 00:42:46.010
With multitouch
screens right now

00:42:46.010 --> 00:42:48.680
every item will be
clicked, simultaneously

00:42:48.680 --> 00:42:51.970
if you click multiple items.

00:42:51.970 --> 00:42:57.840
Any suggestions to prevent
multi-clicks on RecyclerView?

00:42:57.840 --> 00:42:59.880
CHET HAASE: Actually
multi-click wouldn't

00:42:59.880 --> 00:43:03.480
be an issue in general,
it's pretty robust,

00:43:03.480 --> 00:43:06.080
it's just going to execute
all of them independently.

00:43:06.080 --> 00:43:10.020
I don't know why multi-touch
would have an impact on that.

00:43:10.020 --> 00:43:11.770
YIGIT BOYAR: I'm not
sure if I understand.

00:43:11.770 --> 00:43:15.140
CHET HAASE: Separate
click events.

00:43:15.140 --> 00:43:18.230
AUDIENCE: Yes in terms
on the list view,

00:43:18.230 --> 00:43:21.450
on item selected, as
long as one of them

00:43:21.450 --> 00:43:23.630
will be notified
that it's selected,

00:43:23.630 --> 00:43:27.402
other one is not going to be
clicked at this moment in time.

00:43:27.402 --> 00:43:29.610
CHET HAASE: These were, or
this is totally different.

00:43:29.610 --> 00:43:31.193
These were just click
listeners, there

00:43:31.193 --> 00:43:35.220
was nothing about selection
or active items or anything.

00:43:35.220 --> 00:43:37.470
Maybe you're asking a question
that I'm not answering,

00:43:37.470 --> 00:43:40.690
and that's very
convenient to me.

00:43:40.690 --> 00:43:43.272
YIGIT BOYAR: He does
that to me all the time.

00:43:43.272 --> 00:43:45.480
CHET HAASE: There was one
other person had a question

00:43:45.480 --> 00:43:48.250
and that's all we got time for.

00:43:48.250 --> 00:43:53.000
AUDIENCE: High, I'm a
developer and professor.

00:43:53.000 --> 00:43:58.020
I don't know exactly,
feedback or a question.

00:43:58.020 --> 00:44:00.850
The RecyclerView it's a
little bit very verbose,

00:44:00.850 --> 00:44:05.030
compared to an iOS
table view, etc.

00:44:05.030 --> 00:44:08.050
We have to write a lot of
code to make it happen.

00:44:08.050 --> 00:44:11.340
And I teach coding
too, to the my students

00:44:11.340 --> 00:44:16.270
and it's a hard job to them
to make a simple cycler view,

00:44:16.270 --> 00:44:18.710
and now you have data binding.

00:44:18.710 --> 00:44:25.970
So you have some things to write
less code to make a cycler view

00:44:25.970 --> 00:44:29.680
or something like it in the
future to make more work,

00:44:29.680 --> 00:44:32.942
building a cycler view better?

00:44:32.942 --> 00:44:34.400
CHET HAASE: If only
the people that

00:44:34.400 --> 00:44:36.700
wrote the RecyclerView had
anything to do with the people

00:44:36.700 --> 00:44:37.711
that wrote data binding.

00:44:44.510 --> 00:44:46.840
YIGIT BOYAR: So we
were trying to solve

00:44:46.840 --> 00:44:50.726
a problem with RecyclerView
which was mainly animations.

00:44:50.726 --> 00:44:53.880
Listview reaches limits on
how much we can flex it,

00:44:53.880 --> 00:44:55.500
it starts to break down.

00:44:55.500 --> 00:44:56.930
So the main focus
of RecyclerView

00:44:56.930 --> 00:44:59.360
is to enable you
to do weird stuff.

00:44:59.360 --> 00:45:01.690
And right now we
encourage more code

00:45:01.690 --> 00:45:04.000
because we're not focusing
on making it easier,

00:45:04.000 --> 00:45:05.520
trying to enable it.

00:45:05.520 --> 00:45:08.080
After a while, the API, we
just changed the animation

00:45:08.080 --> 00:45:09.940
API to enable a bunch of stuff.

00:45:09.940 --> 00:45:12.010
Once the APIs become
more stable we're

00:45:12.010 --> 00:45:14.570
going to provide more components
on top of RecyclerView

00:45:14.570 --> 00:45:16.275
but this is not our focus today.

00:45:16.275 --> 00:45:18.150
CHET HAASE: First get
the architecture right,

00:45:18.150 --> 00:45:21.310
then get everything simpler.

00:45:21.310 --> 00:45:23.260
And not get us into
the listview situation

00:45:23.260 --> 00:45:25.930
where it works but
it's terribly fragile.

00:45:25.930 --> 00:45:27.890
The architecture is
not very flexible,

00:45:27.890 --> 00:45:29.740
that was old point
with RecyclerView.

00:45:29.740 --> 00:45:32.602
I think that's more than the
time that we had, thank you!

00:45:32.602 --> 00:45:33.560
YIGIT BOYAR: Thank you.

00:45:33.560 --> 00:45:34.460
[APPLAUSE]

00:45:34.460 --> 00:45:38.710
[MUSIC PLAYING]

