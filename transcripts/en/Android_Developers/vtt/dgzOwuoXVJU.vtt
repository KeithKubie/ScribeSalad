WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.689
[MUSIC PLAYING]

00:00:01.689 --> 00:00:03.480
COLT MCANLIS: When it
comes to performance,

00:00:03.480 --> 00:00:05.512
sometimes it's not the
big, glaring topics

00:00:05.512 --> 00:00:06.720
that cause the most problems.

00:00:06.720 --> 00:00:08.780
It's the little things
that when added together,

00:00:08.780 --> 00:00:11.216
create huge headaches
for your application.

00:00:11.216 --> 00:00:13.840
My name is Colt McAnlis, and one
of the quintessential examples

00:00:13.840 --> 00:00:15.830
of small things adding
up to big problems

00:00:15.830 --> 00:00:17.330
is a feature in the
Java programming

00:00:17.330 --> 00:00:19.550
language known as autoboxing.

00:00:19.550 --> 00:00:21.680
See, to the Java
language, primitive types

00:00:21.680 --> 00:00:25.100
like int, bool, and float are
great for matching their IEEE

00:00:25.100 --> 00:00:26.292
and hardware definitions.

00:00:26.292 --> 00:00:27.750
But this also keeps
them from being

00:00:27.750 --> 00:00:30.420
used with generic collections
offered by the runtime.

00:00:30.420 --> 00:00:33.280
Instead, the Java language
provides object versions

00:00:33.280 --> 00:00:35.949
of these primitives--
like java.lang.integer--

00:00:35.949 --> 00:00:37.490
which give you the
same functionality

00:00:37.490 --> 00:00:41.440
as a primitive int but can be
used with generic collections.

00:00:41.440 --> 00:00:43.780
This is where
autoboxing comes in.

00:00:43.780 --> 00:00:47.330
Autoboxing at its core converts
from primitives to their object

00:00:47.330 --> 00:00:49.234
counterparts on your
behalf so that you

00:00:49.234 --> 00:00:51.900
don't have to worry about any of
those conversions in your code,

00:00:51.900 --> 00:00:53.690
which is generally
pretty awesome.

00:00:53.690 --> 00:00:55.290
Take this simple for
loop for example.

00:00:55.290 --> 00:00:57.329
We can easily treat
the integer object

00:00:57.329 --> 00:00:58.870
just like it were
[? a permivi ?] int

00:00:58.870 --> 00:01:00.690
without any extra syntax.

00:01:00.690 --> 00:01:03.430
But sadly, the hands-free
nature of this functionality

00:01:03.430 --> 00:01:05.360
comes with some
performance penalties.

00:01:05.360 --> 00:01:08.330
See, for each step of the
integer object version

00:01:08.330 --> 00:01:11.210
of the loop, the runtime has
to create a new integer object,

00:01:11.210 --> 00:01:13.350
push the primitive
value into it before it

00:01:13.350 --> 00:01:16.744
can be able to be added back
to the other integer object.

00:01:16.744 --> 00:01:19.160
Which means that any time you
do an autoboxing conversion,

00:01:19.160 --> 00:01:21.630
a new object allocation
comes along with it.

00:01:21.630 --> 00:01:23.320
Compare this with
the version using

00:01:23.320 --> 00:01:26.410
primitives that doesn't require
any additional allocation

00:01:26.410 --> 00:01:27.270
overhead.

00:01:27.270 --> 00:01:30.320
This is really painful to watch
since these objects are larger

00:01:30.320 --> 00:01:32.620
in size than their
primitive counterparts-- 16

00:01:32.620 --> 00:01:34.745
bytes for the integer
object rather than four

00:01:34.745 --> 00:01:37.290
for the primitive-- and also
require more performance

00:01:37.290 --> 00:01:40.690
overhead in order to access the
underlying value-- basically

00:01:40.690 --> 00:01:43.960
creating a double whammy of
issues for memory and runtime

00:01:43.960 --> 00:01:44.547
performance.

00:01:44.547 --> 00:01:46.880
Now, you need to be aware
that this problem doesn't just

00:01:46.880 --> 00:01:49.850
pop up with contrived examples
like our little for loop here.

00:01:49.850 --> 00:01:50.350
Nope.

00:01:50.350 --> 00:01:52.880
It's present any time you
pair a generic collection

00:01:52.880 --> 00:01:55.250
with a primitive type,
which is especially

00:01:55.250 --> 00:01:57.530
a problem for
containers like HashMap.

00:01:57.530 --> 00:02:00.550
Basically anytime you insert,
edit, or retrieve values

00:02:00.550 --> 00:02:02.600
with this generic
container while a primitive

00:02:02.600 --> 00:02:06.140
is involved, you end up a
boxing and unboxing values,

00:02:06.140 --> 00:02:09.750
which is the exact reason that
the Android platform provides

00:02:09.750 --> 00:02:13.010
custom containers for you to
use in these situations instead

00:02:13.010 --> 00:02:14.090
of HashMap.

00:02:14.090 --> 00:02:16.510
The sparse map
family of containers

00:02:16.510 --> 00:02:20.730
are all designed specifically to
combat the autoboxing problem,

00:02:20.730 --> 00:02:22.380
eliminating both
the runtime overhead

00:02:22.380 --> 00:02:24.630
and reducing the
memory footprint.

00:02:24.630 --> 00:02:27.290
Now I if you're not
sure where in your code

00:02:27.290 --> 00:02:29.370
autoboxing could be
causing a problem,

00:02:29.370 --> 00:02:32.440
the ANDROStudio tools can
help you track it down.

00:02:32.440 --> 00:02:34.290
If you're using
allocation tracker,

00:02:34.290 --> 00:02:35.820
keep a lookout for
any places where

00:02:35.820 --> 00:02:37.530
you have a load
of integer objects

00:02:37.530 --> 00:02:39.310
all coming from a
single call site.

00:02:39.310 --> 00:02:41.760
And in TraceView,
watch out for a flood

00:02:41.760 --> 00:02:45.910
of integer.value of calls
happening for any given reason.

00:02:45.910 --> 00:02:48.360
Both of these reports
are a clear sign

00:02:48.360 --> 00:02:50.450
that autoboxing is occurring.

00:02:50.450 --> 00:02:52.200
While the low hanging
fruit of performance

00:02:52.200 --> 00:02:55.050
is the easiest to fix and
the most common to find,

00:02:55.050 --> 00:02:56.610
these little
problems really start

00:02:56.610 --> 00:02:59.050
to add up and cause
really big issues

00:02:59.050 --> 00:03:01.450
if left unchecked, which is
why you need to check out

00:03:01.450 --> 00:03:03.620
the rest of the Android
Performance Patterns content

00:03:03.620 --> 00:03:05.470
to see what else is
working in the shadows.

00:03:05.470 --> 00:03:08.320
And of course, don't forget
to join our Google+ community

00:03:08.320 --> 00:03:11.110
as well for other
great tips and advice.

00:03:11.110 --> 00:03:13.500
So, keep calm,
profile your code,

00:03:13.500 --> 00:03:16.180
and always remember--
perf matters.

00:03:16.180 --> 00:03:19.830
[MUSIC PLAYING]

