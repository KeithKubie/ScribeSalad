WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.982
[MUSIC PLAYING]

00:00:13.920 --> 00:00:14.697
So constraints.

00:00:14.697 --> 00:00:16.530
They're a great way for
you, as a developer,

00:00:16.530 --> 00:00:19.730
to deal with the ever expanding
number of screen sizes, device

00:00:19.730 --> 00:00:22.090
rotations, and new
form factors like slide

00:00:22.090 --> 00:00:23.890
over in the iOS world.

00:00:23.890 --> 00:00:26.360
But one unfortunate casualty
in this brave new world

00:00:26.360 --> 00:00:28.746
of alignment has been
the way we animate views.

00:00:28.746 --> 00:00:31.120
See, it used to be, we could
go around setting a UI views

00:00:31.120 --> 00:00:33.490
position or frame with
a fun little UI view

00:00:33.490 --> 00:00:35.680
animate with duration
method and watch our views

00:00:35.680 --> 00:00:36.990
scoot around the screen.

00:00:36.990 --> 00:00:38.230
That was fun.

00:00:38.230 --> 00:00:40.840
But that's harder to do in
a world full of constraints.

00:00:40.840 --> 00:00:42.640
Constraints don't
necessarily play nicely

00:00:42.640 --> 00:00:44.760
with a view whose frame
you're setting explicitly,

00:00:44.760 --> 00:00:46.300
as you can see here.

00:00:46.300 --> 00:00:48.380
Well, that leads us to
this episodes quick tip,

00:00:48.380 --> 00:00:50.880
sent in by Jacob Cho,
a fan of Route 85

00:00:50.880 --> 00:00:53.350
and a software engineer
at Ensemble, a mobile app

00:00:53.350 --> 00:00:56.800
developer located in beautiful
Vancouver, British Columbia.

00:00:56.800 --> 00:00:59.110
Jacob notes that many
iOS developers forget

00:00:59.110 --> 00:01:02.330
that, in addition to the old way
of animating a view's position,

00:01:02.330 --> 00:01:04.720
you can also animate
constraints in iOS.

00:01:04.720 --> 00:01:06.690
Let's look at how
you might do that.

00:01:06.690 --> 00:01:08.680
Here's my storyboard
and, as you can see here,

00:01:08.680 --> 00:01:11.390
I've got everything set up
nicely using constraints.

00:01:11.390 --> 00:01:13.630
Now, to move my UI image
view on and offscreen,

00:01:13.630 --> 00:01:16.110
I'm going to want to change
this constraint here,

00:01:16.110 --> 00:01:18.720
the one that sets my images
leading edge to the leading

00:01:18.720 --> 00:01:20.020
edge of my super view.

00:01:20.020 --> 00:01:23.290
Right now, it's set to minus
180, so it's off screen.

00:01:23.290 --> 00:01:25.730
So first I'm going to control
drag from this constraint

00:01:25.730 --> 00:01:28.640
into my view controller, to
make it an IB outlet of type NS

00:01:28.640 --> 00:01:29.880
layout constraint.

00:01:29.880 --> 00:01:32.170
This allows me to
access it in my code.

00:01:32.170 --> 00:01:33.850
Now I can adjust
it with a standard

00:01:33.850 --> 00:01:36.030
UIView.animateWithDuration call.

00:01:36.030 --> 00:01:38.420
In this case, I'll change the
constant of the constraint

00:01:38.420 --> 00:01:41.800
from minus 180 to 0, so
that it appears on screen.

00:01:41.800 --> 00:01:43.480
And now we can give it a try.

00:01:43.480 --> 00:01:44.640
Huh, that's weird.

00:01:44.640 --> 00:01:46.450
The constant definitely
changed but what

00:01:46.450 --> 00:01:47.960
happened to my animation?

00:01:47.960 --> 00:01:50.730
Well, it turns out, to get this
constant to animate nicely,

00:01:50.730 --> 00:01:53.930
I need to call layoutIfNeeded
on my view controller's view,

00:01:53.930 --> 00:01:55.710
within this animation block.

00:01:55.710 --> 00:01:58.669
We'll give it one more and,
oh, that's much better.

00:01:58.669 --> 00:02:01.210
I now have a constraint that I
can change within an animation

00:02:01.210 --> 00:02:04.800
block and everything animates
smoothly to its final position,

00:02:04.800 --> 00:02:06.860
except in cases where
I want to adjust

00:02:06.860 --> 00:02:09.830
something besides my
constraint's constant.

00:02:09.830 --> 00:02:11.470
Let's take a look
at another example.

00:02:11.470 --> 00:02:13.550
Here, I want to adjust
this center square

00:02:13.550 --> 00:02:16.276
to expand or shrink to
be either twice or half

00:02:16.276 --> 00:02:17.400
the width of its neighbors.

00:02:17.400 --> 00:02:20.800
Now I could do that, in theory,
by adjusting the multiplier

00:02:20.800 --> 00:02:22.960
on the center views
with constraint.

00:02:22.960 --> 00:02:25.360
But it turns out that changing
that multiplier in code

00:02:25.360 --> 00:02:26.230
doesn't work.

00:02:26.230 --> 00:02:28.950
See, constraint multipliers
are a get only property,

00:02:28.950 --> 00:02:30.770
and Xcode will give me an error.

00:02:30.770 --> 00:02:31.990
So how do I change it?

00:02:31.990 --> 00:02:33.350
Well, the answer is I don't.

00:02:33.350 --> 00:02:36.820
Instead, I create two
completely different constraints

00:02:36.820 --> 00:02:39.930
and enable or disable
either one as necessary.

00:02:39.930 --> 00:02:42.770
As long as I'm still calling
layoutIfNeeded in my animation

00:02:42.770 --> 00:02:45.854
block, this kind of
change will still animate.

00:02:45.854 --> 00:02:47.520
Now, there are two
ways I can accomplish

00:02:47.520 --> 00:02:48.850
this constraint swapping.

00:02:48.850 --> 00:02:50.530
One way is to create
both constraints

00:02:50.530 --> 00:02:52.490
in Interface Builder, like so.

00:02:52.490 --> 00:02:54.730
Now Xcode will complain
that these are incompatible,

00:02:54.730 --> 00:02:55.720
and it's right.

00:02:55.720 --> 00:02:57.470
So first step, we'll
uninstall one of them

00:02:57.470 --> 00:02:59.560
by checking this box here.

00:02:59.560 --> 00:03:01.900
Next, we'll control drag
both of these constraints

00:03:01.900 --> 00:03:04.390
into our code to
make them IB outlets.

00:03:04.390 --> 00:03:07.020
And then I can enable or
disable these, as necessary,

00:03:07.020 --> 00:03:10.739
in my animation
block, like this.

00:03:10.739 --> 00:03:12.530
Once again, you'll
notice I make sure we're

00:03:12.530 --> 00:03:14.910
calling layoutIfNeeded
in our animation block

00:03:14.910 --> 00:03:17.200
and we end up with a nice,
smooth looking animation.

00:03:17.200 --> 00:03:18.227
Look at that.

00:03:18.227 --> 00:03:19.810
The other way to
accomplish this would

00:03:19.810 --> 00:03:22.510
be to create a completely
new constraint in code.

00:03:22.510 --> 00:03:24.457
This is useful when I
don't know in advance

00:03:24.457 --> 00:03:26.290
what I'm going to want
this multiplier to be

00:03:26.290 --> 00:03:28.060
and I need to create
it dynamically.

00:03:28.060 --> 00:03:29.970
So let's see that in action.

00:03:29.970 --> 00:03:32.080
This time in my animation
block, I'll first

00:03:32.080 --> 00:03:33.670
remove the old constraint.

00:03:33.670 --> 00:03:35.680
Next up, I can create
a new multiplier.

00:03:35.680 --> 00:03:37.900
Let's make it slightly
random, just for fun.

00:03:37.900 --> 00:03:39.310
Oh, hey, that is fun.

00:03:39.310 --> 00:03:41.270
OK, next I'll create
a brand new constraint

00:03:41.270 --> 00:03:43.910
with this new multiplier and
assign it to my center view

00:03:43.910 --> 00:03:45.670
with property.

00:03:45.670 --> 00:03:48.620
And then it can add it
back in again to my view.

00:03:48.620 --> 00:03:50.680
Finally, I call layoutIfNeeded
on this super view

00:03:50.680 --> 00:03:52.740
in the animation
block and I once again

00:03:52.740 --> 00:03:55.650
have some nicely animating views
that use this new constraint

00:03:55.650 --> 00:03:56.932
that I've created.

00:03:56.932 --> 00:03:58.890
And because this is all
done using constraints,

00:03:58.890 --> 00:04:01.460
you'll notice this works
as intended on an iPhone,

00:04:01.460 --> 00:04:03.740
an iPhone in landscape
mode, or even, say,

00:04:03.740 --> 00:04:05.720
a slide overview on an iPad.

00:04:05.720 --> 00:04:07.660
And once you understand
that this trick simply

00:04:07.660 --> 00:04:09.220
involves removing
an old constraint

00:04:09.220 --> 00:04:11.290
and adding a new one,
you might discover

00:04:11.290 --> 00:04:14.170
a whole new world of
animation is available to you,

00:04:14.170 --> 00:04:16.870
simply by turning on and
off various constraints.

00:04:16.870 --> 00:04:19.320
For example, on this screen,
I can change all my views

00:04:19.320 --> 00:04:22.437
to be either left
aligned or right aligned,

00:04:22.437 --> 00:04:24.520
simply by adding and
removing two different groups

00:04:24.520 --> 00:04:26.270
of constraints and
then calling our now

00:04:26.270 --> 00:04:27.990
familiar layoutIfNeeded method.

00:04:27.990 --> 00:04:29.380
Pretty neat, huh?

00:04:29.380 --> 00:04:31.640
Oh by the way, one fun
little quirk about all this.

00:04:31.640 --> 00:04:34.940
If you add your new constraints
before you remove the old ones,

00:04:34.940 --> 00:04:37.570
iOS will complain about all
the incompatible constraints

00:04:37.570 --> 00:04:39.860
it has to deal with in
those like few milliseconds.

00:04:39.860 --> 00:04:42.080
So always make sure you
remove the old ones first

00:04:42.080 --> 00:04:44.470
before adding the new ones.

00:04:44.470 --> 00:04:46.120
So thanks to Jacob
for the quick tip.

00:04:46.120 --> 00:04:48.453
Jacob, you're going to get a
very stylish Google t-shirt

00:04:48.453 --> 00:04:49.610
in the mail, but hang on.

00:04:49.610 --> 00:04:50.790
We're not done yet.

00:04:50.790 --> 00:04:53.290
You see, now that you know all
about constraint animation,

00:04:53.290 --> 00:04:55.980
I have a couple more quick tips
from one of Google's engineers

00:04:55.980 --> 00:04:58.036
about more efficient
ways to implement it.

00:04:58.036 --> 00:04:59.410
So follow me onto
the next video,

00:04:59.410 --> 00:05:01.118
because we're not done
learning just yet.

00:05:01.118 --> 00:05:02.920
Click here, click here.

00:05:02.920 --> 00:05:05.240
And, otherwise, I'll
see you on Route 85.

00:05:05.240 --> 00:05:05.840
Bye.

00:05:05.840 --> 00:05:08.890
[MUSIC PLAYING]

