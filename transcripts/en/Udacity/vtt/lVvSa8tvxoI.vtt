WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:03.107
So let's look at the better implementation of

00:00:03.107 --> 00:00:07.140
sequential consistency in which a core can reorder loads.

00:00:07.140 --> 00:00:09.210
But this can lead to violations of sequential

00:00:09.210 --> 00:00:13.320
consistency. So it has to also detect when sequential

00:00:13.320 --> 00:00:17.722
consistency may be violated, and fix things. This

00:00:17.722 --> 00:00:19.830
is, of course, easy to say but how do

00:00:19.830 --> 00:00:25.540
we really do that? So let's at the program where there is a load to A, and

00:00:25.540 --> 00:00:31.560
then sometime later, but not too much later, a load from B. So we need to make

00:00:31.560 --> 00:00:34.870
this execute in order, if doing other wise

00:00:34.870 --> 00:00:38.608
will violate sequential consistency. But we want to really execute

00:00:38.608 --> 00:00:40.390
them out of order, if there is no

00:00:40.390 --> 00:00:45.080
potential for sequential consistency violation. So let's look at

00:00:45.080 --> 00:00:47.130
what happens in the reorder buffer of a

00:00:47.130 --> 00:00:50.820
processor that tries to execute this. The reorder buffer

00:00:50.820 --> 00:00:53.930
keeps instructions in program order. So the

00:00:53.930 --> 00:00:57.340
first load will be known to come ahead

00:00:57.340 --> 00:01:00.571
of the second load. Now, if we actually

00:01:00.571 --> 00:01:02.839
do this access first and this second, then

00:01:02.839 --> 00:01:05.358
there is no potential for violating sequential

00:01:05.358 --> 00:01:08.446
consistency, because we are actually doing whatever the

00:01:08.446 --> 00:01:11.970
simple implementation will do anyway. So the sequential

00:01:11.970 --> 00:01:15.930
consistency violation can occur when we first do

00:01:15.930 --> 00:01:19.730
load B, in our real execution order.

00:01:21.110 --> 00:01:24.300
And later, for example, because the computation for

00:01:24.300 --> 00:01:29.030
address of A has been delayed, we do load of A. Now the important thing to

00:01:29.030 --> 00:01:31.490
note is that this is not necessarily a

00:01:31.490 --> 00:01:35.600
violation of sequential consistency. If nobody writes either

00:01:35.600 --> 00:01:40.970
B or A during this time, then the B here and the A here will be

00:01:40.970 --> 00:01:44.950
the same as if we re-ordered them back

00:01:44.950 --> 00:01:46.630
to their original program order. So we are

00:01:46.630 --> 00:01:48.660
getting the same value of B no matter

00:01:48.660 --> 00:01:53.010
where we load it. If nobody writes anything.

00:01:53.010 --> 00:01:55.220
In fact for this to actually be a

00:01:55.220 --> 00:01:59.555
violation of sequential consistency, like we can actually

00:01:59.555 --> 00:02:01.935
get a different value for B then we

00:02:01.935 --> 00:02:06.240
could in sequential consistency. What has to happen

00:02:06.240 --> 00:02:08.639
is that there is at least one store to

00:02:08.639 --> 00:02:12.430
B. Between the time we actually read B and

00:02:12.430 --> 00:02:15.205
the time when we should have read B according

00:02:15.205 --> 00:02:20.345
to sequential consistency. Why? Well because if we don't have

00:02:20.345 --> 00:02:23.261
the store here, then the value we read here

00:02:23.261 --> 00:02:26.015
is the same as the value that we would have

00:02:26.015 --> 00:02:28.769
read here, where it would be okay to read

00:02:28.769 --> 00:02:31.460
B. So now you can see how we can detect

00:02:31.460 --> 00:02:34.300
violations of sequential consistency. When we read

00:02:34.300 --> 00:02:37.950
something ahead of program order, we need to

00:02:37.950 --> 00:02:41.540
start monitoring the coherence traffic produced by other

00:02:41.540 --> 00:02:44.750
processors. So, if we se such a store,

00:02:44.750 --> 00:02:50.550
then this load and anything that it fed the data to, must be replayed. Note that

00:02:50.550 --> 00:02:53.590
this load, is repayable, because in the rub

00:02:53.590 --> 00:02:56.630
is here, we're assuming that this low still

00:02:56.630 --> 00:03:00.840
hasn't happened. Which means that the commit point

00:03:00.840 --> 00:03:02.920
for the ROB is somewhere here or maybe

00:03:02.920 --> 00:03:08.550
at the low here but definitely the load from B has not been committed so we

00:03:08.550 --> 00:03:14.620
are capable of replaying it. In the worst case we can just cancel this load and

00:03:14.620 --> 00:03:17.930
anything that follows and just refresh those instructions.

00:03:17.930 --> 00:03:21.950
So we know how to undue the damage here.

00:03:21.950 --> 00:03:26.650
But in order to detect the violation now we have to basically anything that we

00:03:26.650 --> 00:03:29.820
load out of order, we need to monitor

00:03:29.820 --> 00:03:33.990
coherence traffic until that load becomes in order.

