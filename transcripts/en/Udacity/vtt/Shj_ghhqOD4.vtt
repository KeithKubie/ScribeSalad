WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The answer is the third choice--the client should send

00:00:03.000 --> 00:00:07.000
the random value encrypted using the server's public key.

00:00:07.000 --> 00:00:12.000
Both of the first two options assume that the client and server already share a symmetric key.

00:00:12.000 --> 00:00:15.000
If this was the case, they wouldn’t need this whole protocol.

00:00:15.000 --> 00:00:18.000
They could use that symmetric key right away to start communicating,

00:00:18.000 --> 00:00:21.000
and the fact they are able to communicate using that key

00:00:21.000 --> 00:00:24.000
verifies that they have authenticated each other.

00:00:24.000 --> 00:00:27.000
This solution does not work well for web applications.

00:00:27.000 --> 00:00:30.000
There's no way for me to easily establish a shared symmetric key

00:00:30.000 --> 00:00:33.000
with Amazon before the protocol begins.

00:00:33.000 --> 00:00:36.000
The fourth choice would be useful for integrity.

00:00:36.000 --> 00:00:38.000
If the server knew the client’s public key,

00:00:38.000 --> 00:00:43.000
then it could verify that this random value came from that client,

00:00:43.000 --> 00:00:46.000
but this would expose the random value to anyone else who intercepted

00:00:46.000 --> 00:00:49.000
the message and also knows the client's public key,

00:00:49.000 --> 00:00:54.000
and it provides no authentication that the server is who the client expects.

00:00:54.000 --> 00:00:57.000
The right answer is the third one--we want to send

00:00:57.000 --> 00:01:00.000
the random value encrypted so it can’t be intercepted,

00:01:00.000 --> 00:01:02.000
but that it can be decrypted by the server,

00:01:02.000 --> 00:01:06.000
and the server has the corresponding private key to decrypt this.

00:01:06.000 --> 00:01:11.000
Now, once the server receives this message, it can decrypt it using its private key.

00:01:11.000 --> 00:01:13.000
We'll use the value of r as the session key.

00:01:13.000 --> 00:01:19.000
After this, both the client and server have the shared session key and can communicate.

00:01:19.000 --> 00:01:21.000
Now, we have a secured channel between the client and the server

00:01:21.000 --> 00:01:26.000
encrypted with the symmetric key k.

