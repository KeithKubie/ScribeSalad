WEBVTT
Kind: captions
Language: en

00:00:01.160 --> 00:00:03.090
Writing your code into R
scripts is valuable for

00:00:03.090 --> 00:00:05.700
managing and organizing
R objects.

00:00:05.700 --> 00:00:07.330
But sometimes you may
wish to clear some

00:00:07.330 --> 00:00:09.490
objects from your workspace.

00:00:09.490 --> 00:00:11.530
To get a look at what objects
exist in your current

00:00:11.530 --> 00:00:15.620
workspace, use the
ls function.

00:00:15.620 --> 00:00:17.840
If you want to remove an
object, use the remove

00:00:17.840 --> 00:00:20.200
function with the argument
name as the

00:00:20.200 --> 00:00:22.910
object to be removed.

00:00:22.910 --> 00:00:25.640
If you want to remove all the
objects in a workspace, you

00:00:25.640 --> 00:00:27.960
can use the list argument in
the remove function and

00:00:27.960 --> 00:00:30.140
specify all of the objects
in the workspace

00:00:30.140 --> 00:00:31.390
using the ls function.

00:00:34.080 --> 00:00:36.370
It's also helpful to be able
to easily convert between

00:00:36.370 --> 00:00:38.570
objects of different types.

00:00:38.570 --> 00:00:40.960
We'll consider three functions
for converting objects to

00:00:40.960 --> 00:00:44.520
numerical, character, and
factor object types.

00:00:44.520 --> 00:00:47.150
For instance, we can apply
each of these functions

00:00:47.150 --> 00:00:49.700
to the object x.

00:00:49.700 --> 00:00:52.880
Applying the as.character and
the as.factor functions affect

00:00:52.880 --> 00:00:54.070
the outcome.

00:00:54.070 --> 00:00:57.840
Had I wanted to actually change
x to, say, a factor, I

00:00:57.840 --> 00:00:59.395
could have assigned the
new result to x.

00:01:01.920 --> 00:01:03.760
One special note here--

00:01:03.760 --> 00:01:06.520
if you have a factor variable
that also looks numeric,

00:01:06.520 --> 00:01:09.270
always convert it to a character
before converting it

00:01:09.270 --> 00:01:12.020
to numerical value.

00:01:12.020 --> 00:01:13.670
There are other comparable
functions that you may

00:01:13.670 --> 00:01:18.290
occasionally find useful, such
as as.matrix, as.data.frame,

00:01:18.290 --> 00:01:19.540
and as.list.

00:01:21.680 --> 00:01:24.070
One last function I'll consider
in this video is the

00:01:24.070 --> 00:01:25.780
on list function.

00:01:25.780 --> 00:01:28.190
In the usual process of data
analysis, I might create a

00:01:28.190 --> 00:01:31.420
list to hold summary and results
of an experiment.

00:01:31.420 --> 00:01:35.290
Here, I'll construct a list
manually for four groups.

00:01:35.290 --> 00:01:38.330
In this example, you can think
of the first number for a

00:01:38.330 --> 00:01:41.440
group to represent its
corresponding sample size.

00:01:41.440 --> 00:01:43.720
The second number might
represent the average response

00:01:43.720 --> 00:01:45.120
for that group.

00:01:45.120 --> 00:01:46.830
And the third value might
represent the standard

00:01:46.830 --> 00:01:48.080
deviation for the group.

00:01:51.030 --> 00:01:53.300
Just a side note worth
mentioning.

00:01:53.300 --> 00:01:55.740
I typically perform these types
of calculations in an

00:01:55.740 --> 00:01:57.790
automated way, which would make
it easier for the code to

00:01:57.790 --> 00:02:01.250
be scaled to an arbitrary
number of groups.

00:02:01.250 --> 00:02:03.450
If you need a refresher on this
topic, look back to the

00:02:03.450 --> 00:02:07.500
fifth video in Section 2.

00:02:07.500 --> 00:02:09.669
All right, so the results are
stored in the list, where each

00:02:09.669 --> 00:02:13.310
list item represents the results
for a single group.

00:02:13.310 --> 00:02:15.760
If I unlist this subject,
I get a vector of

00:02:15.760 --> 00:02:18.330
the unlisted results.

00:02:18.330 --> 00:02:20.580
It would actually be more useful
to hold this object as

00:02:20.580 --> 00:02:24.090
a matrix or as a data frame,
so I'll form these unlisted

00:02:24.090 --> 00:02:26.380
results into a matrix.

00:02:26.380 --> 00:02:29.200
If I'd prefer a data frame, I
could use the as.data.frame

00:02:29.200 --> 00:02:32.830
function applied
to this matrix.

00:02:32.830 --> 00:02:35.570
If I wanted, I could also just
the call names of the data

00:02:35.570 --> 00:02:38.130
frame using the names or the
column names function.

00:02:43.400 --> 00:02:45.650
In the next video, we'll explore
the family of apply

00:02:45.650 --> 00:02:48.580
functions, which are helpful for
applying a function across

00:02:48.580 --> 00:02:51.500
the rows or columns of a
matrix or across the

00:02:51.500 --> 00:02:52.750
elements of a list.

