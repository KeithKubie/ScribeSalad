WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:02.719
Now you've seen this code that calculates the sum of the digits

00:00:02.719 --> 00:00:05.670
of the number. But we promised that this code for iterating over

00:00:05.670 --> 00:00:08.550
each digit in a number would be useful for validating credit card

00:00:08.550 --> 00:00:12.580
numbers, and here's why. When you write down a credit card number, it's

00:00:12.580 --> 00:00:16.010
really easy to switch two numbers. And that's pretty annoying for somebody

00:00:16.010 --> 00:00:18.840
who is trying to charge your credit card so you can buy things.

00:00:18.840 --> 00:00:21.410
Luckily, the designers of credit card numbers back in the day thought

00:00:21.410 --> 00:00:25.300
about this. All credit card numbers have to follow a kind of pattern.

00:00:25.300 --> 00:00:27.540
And there's an algorithm that uses the pattern to figure out

00:00:27.540 --> 00:00:31.556
if the customers has accidentally switched 2 numbers. That algorithm has

00:00:31.556 --> 00:00:34.174
a very similar structure to the code for summing digits. Let

00:00:34.174 --> 00:00:36.604
me write the pseudo code for this algorithm, so we can

00:00:36.604 --> 00:00:40.660
compare this algorithm with the one for validating credit cards. When

00:00:40.660 --> 00:00:43.910
we trace this code, we saw that it set N and

00:00:43.910 --> 00:00:47.440
Sum, and then for each digit in N; starting with the

00:00:47.440 --> 00:00:50.510
one on the right, it added the digit to the Sum.

00:00:50.510 --> 00:00:54.540
And then at the end it printed the Sum, now here's a question; which of these

00:00:54.540 --> 00:00:56.834
lines of code is responsible for making sure

00:00:56.834 --> 00:00:58.940
that the code looks at each digit in N?

