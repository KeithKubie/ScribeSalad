WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
[Norvig] Now let's go back to hand_rank.

00:00:02.000 --> 00:00:05.000
We still have the same specification that the input is a hand

00:00:05.000 --> 00:00:08.000
and the output is a value indicating the ranking of a hand.

00:00:08.000 --> 00:00:12.000
But instead of having the value be an integer like it was before,

00:00:12.000 --> 00:00:16.000
now the value is going to be a tuple where the first element of the tuple

00:00:16.000 --> 00:00:21.000
is still going to be the single value representing the type of ranking--

00:00:21.000 --> 00:00:23.000
8 for a straight flush, for example--

00:00:23.000 --> 00:00:28.000
but then the next element of the tuple serves to break ties.

00:00:28.000 --> 00:00:32.000
If 8 is the highest compared to any other hand, then that's the winner.

00:00:32.000 --> 00:00:35.000
But if there are multiple hands that have an 8, they all tie

00:00:35.000 --> 00:00:37.000
and we have to go on to the first tiebreaker.

00:00:37.000 --> 00:00:40.000
And what should the tiebreaker be?

00:00:40.000 --> 00:00:44.000
Well, in this case, we can just look at the high rank.

00:00:44.000 --> 00:00:50.000
So we can look at the max out of all the ranks breaks the ties.

00:00:50.000 --> 00:01:01.000
And the idea there is if we had a hand that, say, had ranks 2 3 4 5 6,

00:01:01.000 --> 00:01:05.000
then the only thing we care about is the 6.

00:01:05.000 --> 00:01:10.000
We can completely specify this hand because we know it's a straight.

00:01:10.000 --> 00:01:15.000
So if 6 was the high card, then that tells us everything we need to know

00:01:15.000 --> 00:01:19.000
about the straight and how it compares to any other straight.

00:01:19.000 --> 00:01:25.000
So for that kind of hand, we'd get the value (8, 6)

00:01:25.000 --> 00:01:34.000
and a hand that was, say, 6 7 8 9 T would get the value (8, 10),

00:01:34.000 --> 00:01:40.000
and we know that this hand would win because (8, 10) is bigger than (8, 6).

00:01:40.000 --> 00:01:45.000
So this gives us a way to break ties between straight flushes.

00:01:45.000 --> 00:01:50.000
We can do the same type of thing for all the other rankings.

00:01:50.000 --> 00:01:55.000
So rank 7 is 4 of a kind. What do we want to put in there to break the tie?

00:01:55.000 --> 00:01:59.000
The first tiebreaker is the thing that you have 4 of a kind of.

00:01:59.000 --> 00:02:03.000
So you say, I've got 4 of a kind, 4 kings,

00:02:03.000 --> 00:02:08.000
and we can just say, what do you have 4 of a kind of?

00:02:08.000 --> 00:02:14.000
But now I have to firm up the definition of kind.

00:02:14.000 --> 00:02:17.000
We weren't quite clear on what it returns.

00:02:17.000 --> 00:02:23.000
We can make it return a value which is the actual rank.

00:02:23.000 --> 00:02:25.000
So if I have four 7s, it should return 7.

00:02:25.000 --> 00:02:30.000
If I have four 10s, it should return 10, and that will be the tiebreaker.

00:02:30.000 --> 00:02:36.000
And then normally, if we're playing a regular game, there would only be 4 of a kind in a deck.

00:02:36.000 --> 00:02:39.000
So if you had four 10s, nobody else could tie you

00:02:39.000 --> 00:02:41.000
because there wouldn't be another four 10s.

00:02:41.000 --> 00:02:46.000
But we want to allow for the possibility of playing a game where there's 2 decks.

00:02:46.000 --> 00:02:48.000
So we could go to a tiebreaker,

00:02:48.000 --> 00:02:52.000
and then the tiebreaker would be the remaining card in your hand,

00:02:52.000 --> 00:02:55.000
which is the card that you have 1 of a kind of.

00:02:55.000 --> 00:03:04.000
So for example, say if you had a hand that had four 9s and a 3,

00:03:04.000 --> 00:03:08.000
then our value would be 7, meaning 4 of a kind,

00:03:08.000 --> 00:03:11.000
9, meaning you have four 9s,

00:03:11.000 --> 00:03:15.000
and then 3, meaning that's the final tiebreaker.

00:03:15.000 --> 00:03:19.000
There's something a little bit tricky here that I want to go over and make sure we get right.

00:03:19.000 --> 00:03:24.000
Here I'm kind of overloading the idea of the function kind.

00:03:24.000 --> 00:03:30.000
I'm using it to return a value--returns 9 when you have four 9s--

00:03:30.000 --> 00:03:32.000
but I'm also using it as a Boolean test,

00:03:32.000 --> 00:03:39.000
saying if you have 4 of a kind at all, then do this.

00:03:39.000 --> 00:03:45.000
And so I want to arrange kind to return a false value when it doesn't have 4 of a kind

00:03:45.000 --> 00:03:51.000
and to return a true value, which is a number, when you do have 4 of a kind.

00:03:51.000 --> 00:03:53.000
And you can do that in Python.

00:03:53.000 --> 00:03:56.000
In other languages, you would have to decide one or another.

00:03:56.000 --> 00:04:03.000
In a language like Java, you couldn't have something that returns either a Boolean value

00:04:03.000 --> 00:04:06.000
or a number, so you'd have to have another way of dealing with that.

00:04:06.000 --> 00:04:08.000
But in Python you can do that.

00:04:08.000 --> 00:04:11.000
You can have kind return a number when it's needed

00:04:11.000 --> 00:04:15.000
and return a false value when it's needed.

00:04:15.000 --> 00:04:19.000
One thing you have to worry about is it turns out that in Java

00:04:19.000 --> 00:04:23.000
the value 0 is, in fact, counted as false.

00:04:23.000 --> 00:04:28.000
So if I was saying I'm going to return either a false value or return a number

00:04:28.000 --> 00:04:32.000
and if 0 was one of those possible numbers, then I could be in trouble.

00:04:32.000 --> 00:04:35.000
But in this case, 0 is not a possible number

00:04:35.000 --> 00:04:40.000
because the ranks go from 2 to 14, so I'm okay.

00:04:40.000 --> 09:59:59.000
And we'll see more about that when we define the kind function.

