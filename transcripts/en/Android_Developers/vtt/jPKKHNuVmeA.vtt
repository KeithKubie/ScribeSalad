WEBVTT
Kind: captions
Language: en

00:00:05.589 --> 00:00:08.830
&gt;&gt;FERNANDEZ: Hi and welcome to Android Developer
Office Hours.

00:00:08.830 --> 00:00:12.080
I'm Joe Fernandez from Android Developer Relations.

00:00:12.080 --> 00:00:16.660
And this week, we're going to talk about making
Android applications accessible.

00:00:16.660 --> 00:00:20.470
I'm joined by a guest from our Google accessibility
team.

00:00:20.470 --> 00:00:26.130
We have T.V. Raman to my left, Casey Burkhardt
and Alan Viverette.

00:00:26.130 --> 00:00:31.900
Under the table who you can't see is Tilden,
Raman's guide dog who is being very fluffy

00:00:31.900 --> 00:00:34.940
and cute, but won't be speaking today.

00:00:34.940 --> 00:00:38.989
We're going to do things a little bit different
today because we're focusing on accessibility.

00:00:38.989 --> 00:00:42.610
We're going to really just talk about those
issues.

00:00:42.610 --> 00:00:46.990
Casey and Alan are going to talk about or
have some material to present.

00:00:46.990 --> 00:00:52.660
And at the end we'll take some more questions
on accessibility and if you don't have accessibility

00:00:52.660 --> 00:00:54.630
questions don't worry about it.

00:00:54.630 --> 00:00:57.920
Next week, we'll make sure to cover those
things as well.

00:00:57.920 --> 00:01:00.340
So with that I'll introduce Raman.

00:01:00.340 --> 00:01:01.550
&gt;&gt; RAMAN: Thank you Joe.

00:01:01.550 --> 00:01:04.210
Welcome everyone to the session on Android
accessibility.

00:01:04.210 --> 00:01:09.850
My name is T.V. Raman, I lead accessibility
affairs for Android and Chrome.

00:01:09.850 --> 00:01:14.880
And with me I have two engineers from team
Casey and Alan.

00:01:14.880 --> 00:01:20.460
To give you a brief overview slash intro of
what we are talking about today.

00:01:20.460 --> 00:01:27.409
So, as developers when you step back and look
at Android, the platform, what does Android

00:01:27.409 --> 00:01:28.409
give you?

00:01:28.409 --> 00:01:34.880
Android basically makes it easy for you to
focus on your application as opposed to worrying

00:01:34.880 --> 00:01:38.359
about different devices, different screen
sizes.

00:01:38.359 --> 00:01:41.329
Somebody has a keyboard, somebody doesnâ€™t
have a keyboard.

00:01:41.329 --> 00:01:43.579
You focus on your application.

00:01:43.579 --> 00:01:47.619
That's really the core thing that the Android
platform provides for you.

00:01:47.619 --> 00:01:51.890
And so you can write your application and
have it running on hundreds of millions of

00:01:51.890 --> 00:01:54.039
different devices.

00:01:54.039 --> 00:01:59.880
What we from accessibility do is we broadened
this focus even more.

00:01:59.880 --> 00:02:04.899
So we just talk about different devices, but
people are different too.

00:02:04.899 --> 00:02:08.500
Some of your users might be able to see a
little less than others.

00:02:08.500 --> 00:02:11.840
Some of your users might need a slightly different
color scheme.

00:02:11.840 --> 00:02:14.430
Some of them might need larger text.

00:02:14.430 --> 00:02:18.100
Some of them may not see at all and may need
spoken approach.

00:02:18.100 --> 00:02:21.170
Some of your users may need specific affordances.

00:02:21.170 --> 00:02:29.620
So, accessibility is then about increasing
and significantly increasing the size of the

00:02:29.620 --> 00:02:31.819
user base of your applications.

00:02:31.819 --> 00:02:38.010
And writing applications that are really cool
that work in a lot different user scenarios.

00:02:38.010 --> 00:02:42.480
I myself work on applications that are relevant
to blind users.

00:02:42.480 --> 00:02:47.000
And I describe it as working for the eyes
free user context.

00:02:47.000 --> 00:02:51.750
So, don't think about the user not being able
to see, think about the user not looking at

00:02:51.750 --> 00:02:52.750
the screen.

00:02:52.750 --> 00:02:55.670
So, that's the broad thrust of accessibility.

00:02:55.670 --> 00:03:01.650
And what we've been working on as part of
the Android accessibility affair is to build

00:03:01.650 --> 00:03:08.150
the right set of APIs into the platform so
that you as a developer can focus on what

00:03:08.150 --> 00:03:11.430
you do best and what you enjoy which is writing
your application.

00:03:11.430 --> 00:03:15.629
I'll give you a brief overview of how Android
accessibility works.

00:03:15.629 --> 00:03:19.730
We gave a detailed talk at Google I/O this
year and you can watch that talk and it's

00:03:19.730 --> 00:03:22.249
entirety on YouTube.

00:03:22.249 --> 00:03:29.499
But essentially, Android accessibility is
something we started working on in 2008 and

00:03:29.499 --> 00:03:34.639
originally shipped as part of Donut in 2009,
and we've come a long way since.

00:03:34.639 --> 00:03:41.980
A typical way a blind user interacts with
your application is by navigating through

00:03:41.980 --> 00:03:48.590
your app and getting spoken feedback, auditory
feedback for the item that's in focus.

00:03:48.590 --> 00:03:53.079
As of Jellybean we were--also added Braille
support that is in beta.

00:03:53.079 --> 00:03:59.099
But what happens then is that a blind user
is essentially navigating your application

00:03:59.099 --> 00:04:02.379
item at a time, control at a time, getting
spoken feedback.

00:04:02.379 --> 00:04:08.770
And so over the years, we've introduced better
and better user level affordances for doing

00:04:08.770 --> 00:04:10.170
this.

00:04:10.170 --> 00:04:17.640
What this all looks like in Jellybean is that
the user navigates using a combination of

00:04:17.640 --> 00:04:23.389
[INDISTINCT] one is that of touch exploration,
where the user can touch different parts of

00:04:23.389 --> 00:04:27.510
the screen and has appropriate feedback for
what you're touching.

00:04:27.510 --> 00:04:31.880
And that sort of gives you random access to
all parts of your display.

00:04:31.880 --> 00:04:36.389
Random access because it's great, it's--yeah,
or the one complexity if you're developer

00:04:36.389 --> 00:04:37.389
right?

00:04:37.389 --> 00:04:39.710
You can get to anything with the same level
of effort.

00:04:39.710 --> 00:04:41.530
Its problem it's random.

00:04:41.530 --> 00:04:48.060
So, what we also added in Jellybean was with
the ability to what we call leniently navigate

00:04:48.060 --> 00:04:52.420
the interface, which then gives you a more
deterministic access to different aspects

00:04:52.420 --> 00:04:53.740
of your app.

00:04:53.740 --> 00:04:57.580
And in practice as an end-user and a user
I use both.

00:04:57.580 --> 00:05:02.550
So, I'll pull up an app, approximately know
that the search pattern is on the top right.

00:05:02.550 --> 00:05:06.830
I'll go touch there and if I don't here the
search pattern, I'll flick left or right from

00:05:06.830 --> 00:05:10.840
there and arrive at the search pattern and
then double tap.

00:05:10.840 --> 00:05:15.600
How all of this works in the framework is
through three concepts that Casey and Alan

00:05:15.600 --> 00:05:18.090
will explain to you in a lot more detail.

00:05:18.090 --> 00:05:24.120
There is a notion called accessibility focus
in the system which is implemented along side

00:05:24.120 --> 00:05:29.810
system focus with the difference that everything
in the user interface can get accessibility

00:05:29.810 --> 00:05:30.810
focus.

00:05:30.810 --> 00:05:37.160
And as accessibility focus moves, our accessibility
services like TalkBack, SpeakIt or BrailleBack,

00:05:37.160 --> 00:05:39.860
brailles it out on a Braille display.

00:05:39.860 --> 00:05:41.350
So now you have accessibility focus.

00:05:41.350 --> 00:05:46.150
As I said when you touch, your accessibility
focus lands on that spot.

00:05:46.150 --> 00:05:51.110
But you can also navigate with gestures and
Alan will show you those during the demo as

00:05:51.110 --> 00:05:54.660
we go through this, and we call those accessibility
gestures.

00:05:54.660 --> 00:05:59.440
Now, we are computer scientist, so--and all
computer scientist do things by introducing

00:05:59.440 --> 00:06:01.639
a level of indirection.

00:06:01.639 --> 00:06:08.120
And so what we do in Android API is that the
accessibility gestures actually invoke accessibility

00:06:08.120 --> 00:06:09.220
actions.

00:06:09.220 --> 00:06:13.220
And it's those actions that actually perform
user actions.

00:06:13.220 --> 00:06:18.640
And those actually makes for a level of flexibility
because then in the--in a--you can actually

00:06:18.640 --> 00:06:22.840
build more innovative user interfaces for
people with motor impairments and things like

00:06:22.840 --> 00:06:28.940
that where you can then trigger these accessibility
actions throughout their affordances.

00:06:28.940 --> 00:06:35.770
So the goal as I said of the accessibility
API is to work behind the covers and just

00:06:35.770 --> 00:06:38.110
make your applications work.

00:06:38.110 --> 00:06:46.409
And that's pretty much true of you use built-in
Android user interface controls and do all--everything

00:06:46.409 --> 00:06:47.409
right.

00:06:47.409 --> 00:06:52.560
But then as you step out of that box, as you
start becoming inventive, as you write custom

00:06:52.560 --> 00:06:58.020
controls then you have to give the API and
the framework a little bit of help.

00:06:58.020 --> 00:07:03.610
And it's fairly those aspects that these 30
and 40 minutes will be spent on.

00:07:03.610 --> 00:07:08.689
Allan and Casey will show you a sequence of
demos, and show you how these can be fixed.

00:07:08.689 --> 00:07:12.922
There is a sample app to go with this and
we can point you at the source code to this

00:07:12.922 --> 00:07:13.922
later during the talk.

00:07:13.922 --> 00:07:17.869
So, Alan and Casey, take it away.

00:07:17.869 --> 00:07:19.939
&gt;&gt; BURKHARDT: Thanks Raman.

00:07:19.939 --> 00:07:23.880
So as Raman mentioned, there's accessibility
APIs on Android.

00:07:23.880 --> 00:07:25.500
We've had them since Donut.

00:07:25.500 --> 00:07:29.710
In Ice Cream Sandwich, we introduced the new
concept, the new feature "Explore by Touch"

00:07:29.710 --> 00:07:34.639
which will ask a blind user to touch the screen
and have the contact that's being touched

00:07:34.639 --> 00:07:35.639
spoken to them.

00:07:35.639 --> 00:07:40.599
So the way that this works is when you the
user actually touches a control, the Android

00:07:40.599 --> 00:07:44.939
Framework takes that control, bundles it in
a nice package, sends it through the accessibility

00:07:44.939 --> 00:07:49.180
API to any accessibility services that might
be listening.

00:07:49.180 --> 00:07:55.050
An accessibility service is--an example of
one is TalkBack, that software that Alan and

00:07:55.050 --> 00:07:56.250
I write.

00:07:56.250 --> 00:08:01.530
We basically intercept these accessibility
events that the framework sends, take the

00:08:01.530 --> 00:08:06.530
data out of them, explore the view hierarchy
of an application and provide spoken and other

00:08:06.530 --> 00:08:11.360
auditory and haptic feedback to the blind
user to make the application and the device

00:08:11.360 --> 00:08:13.740
accessible.

00:08:13.740 --> 00:08:18.360
Alan actually is going to turn the device
on now and show you what TalkBack looks like

00:08:18.360 --> 00:08:19.360
the first time.

00:08:19.360 --> 00:08:20.360
Booting up here.

00:08:20.360 --> 00:08:21.490
&gt;&gt; VIVERETTE: All right.

00:08:21.490 --> 00:08:26.389
So one of the really great things about the
accessibility service is that, as a developer

00:08:26.389 --> 00:08:28.469
you don't have to worry that much about it.

00:08:28.469 --> 00:08:31.740
So as Raman mentioned, if you use standard
widgets, things just work.

00:08:31.740 --> 00:08:34.110
So, we're going to turn on TalkBack first.

00:08:34.110 --> 00:08:37.130
So we're going to all apps, settings.

00:08:37.130 --> 00:08:40.570
And down here at the bottom we have accessibility.

00:08:40.570 --> 00:08:41.780
And one of the services is TalkBack.

00:08:41.780 --> 00:08:43.400
So, we'll turn that on.

00:08:43.400 --> 00:08:47.250
There's a switch over the top that you can't
see.

00:08:47.250 --> 00:08:52.070
So this dialog pops up explaining that TalkBack
sees basically everything that is shown to

00:08:52.070 --> 00:08:57.060
the user, so all of the text that's on-screen,
TalkBack has access to.

00:08:57.060 --> 00:08:58.820
So we'll just click okay.

00:08:58.820 --> 00:09:04.570
It's okay that TalkBack can interact with
things the way that the user would.

00:09:04.570 --> 00:09:09.600
&gt;&gt; BURKHARDT: So as TalkBack is turned on,
you see certain items on the screen receive

00:09:09.600 --> 00:09:11.770
a yellow highlight.

00:09:11.770 --> 00:09:16.290
In Jellybean, this represents accessibility
focus.

00:09:16.290 --> 00:09:20.690
So as Raman mentioned accessibility focus
works just like system focus, except any item

00:09:20.690 --> 00:09:23.340
whether it's system focused or not can receive
it.

00:09:23.340 --> 00:09:28.240
So that the accessibility service can interrogate
it and find more--find out more information

00:09:28.240 --> 00:09:29.240
about it.

00:09:29.240 --> 00:09:34.050
So, as Alan moves his finger around the screen
you'll see the different items receive accessibility

00:09:34.050 --> 00:09:35.080
focus.

00:09:35.080 --> 00:09:41.350
TalkBack receives events regarding that change
in focus and speaks to the user to let them

00:09:41.350 --> 00:09:42.930
know what they touched.

00:09:42.930 --> 00:09:46.540
In Jellybean there's also the concept of navigation
in a linear way.

00:09:46.540 --> 00:09:51.700
So Alan can use a gesture from swiping left
to right or top to bottom to move focus through

00:09:51.700 --> 00:09:52.700
the user interface.

00:09:52.700 --> 00:09:56.710
&gt;&gt; VIVERETTE: So, we'll move out to the launcher
where it's at, a little bit more interesting.

00:09:56.710 --> 00:09:57.710
Soâ€¦

00:09:57.710 --> 00:10:00.250
&gt;&gt; VIVERETTE: Touch home.

00:10:00.250 --> 00:10:02.190
Double tap to activate it.

00:10:02.190 --> 00:10:05.060
And now I can just swipe left and right to
move through items on the home screen.

00:10:05.060 --> 00:10:10.560
So I'll swipe right a couple times.

00:10:10.560 --> 00:10:16.370
So down here at the bottom we have all apps.

00:10:16.370 --> 00:10:21.190
And then one app that we're going to be using
for demos later on is.

00:10:21.190 --> 00:10:27.010
&gt;&gt; BURKHARDT: So in addition to exploring
by touch you can use gestures to navigate

00:10:27.010 --> 00:10:28.700
linearly really though the UI.

00:10:28.700 --> 00:10:33.700
In Jelly Bean we've also added gestures associated
with that accessibility actions.

00:10:33.700 --> 00:10:38.200
So for example I only can do a two part swipe
up and then right and that will perform the

00:10:38.200 --> 00:10:40.580
system action of pulling down the notification
shade.

00:10:40.580 --> 00:10:44.010
&gt;&gt; VIVERETTE: So, I'll just go up, right.

00:10:44.010 --> 00:10:56.030
&gt;&gt; BURKHARDT: So and then Alan can swipe down
on left and that will dismiss the notification

00:10:56.030 --> 00:10:57.180
as if he pressed the back button.

00:10:57.180 --> 00:11:00.089
&gt;&gt; VIVERETTE: So I'll do down and left to
do a back action.

00:11:00.089 --> 00:11:07.170
&gt;&gt; BURKHARDT: So we have a couple of other
system gestures as well.

00:11:07.170 --> 00:11:13.560
So and what's also worth mentioning is from
Ice Cream Sandwich and on, accessibility services

00:11:13.560 --> 00:11:17.780
when they receive one of these events can
interrogate the view hierarchy.

00:11:17.780 --> 00:11:22.550
So TalkBack for example can deep dive into
the views your applications presents and get

00:11:22.550 --> 00:11:28.690
more information about them such as whether
a button is clickable, a view is checkable

00:11:28.690 --> 00:11:30.210
and so forth.

00:11:30.210 --> 00:11:33.740
So this is used throughout TalkBack.

00:11:33.740 --> 00:11:37.770
So now we're actually going to cover it at
the top three problems that we see most often

00:11:37.770 --> 00:11:41.010
in a third party developer applications.

00:11:41.010 --> 00:11:47.280
We have a sample app which we're going to
use to sort of get into this issues and illustrate

00:11:47.280 --> 00:11:49.050
them for you.

00:11:49.050 --> 00:11:53.610
&gt;&gt; VIVERETTE: And I'll double tap to launch
that.

00:11:53.610 --> 00:11:56.480
Okay.

00:11:56.480 --> 00:12:00.960
And so Casey is going to take us through the
inaccessible content description's app.

00:12:00.960 --> 00:12:03.190
So this is a very common mistake that we see.

00:12:03.190 --> 00:12:07.880
&gt;&gt; Actually Casey, we're getting a rustled
from your mic, could you just make sure that

00:12:07.880 --> 00:12:11.380
it's not touching your t-shirt too much.

00:12:11.380 --> 00:12:14.860
&gt;&gt; BURKHARDT: I think I've lost my mic.

00:12:14.860 --> 00:12:15.860
That's interesting.

00:12:15.860 --> 00:12:19.850
&gt;&gt; You can run it up the outside of your shirt,
you know, once you find it.

00:12:19.850 --> 00:12:20.850
&gt;&gt; BURKHARDT: Sure, why don't you do that.

00:12:20.850 --> 00:12:21.850
&gt;&gt; VIVERETTE: Sure, all right.

00:12:21.850 --> 00:12:27.840
So I'll just take us through the inaccessible
versions of the content description now.

00:12:27.840 --> 00:12:32.670
All right.

00:12:32.670 --> 00:12:36.930
So one of the first things that we see is
this edit box and there's an icon in the top

00:12:36.930 --> 00:12:41.510
left of the screen here that has a little
search icon.

00:12:41.510 --> 00:12:46.231
And since I only hear edit box I don't know
that the meaning of this edit box is so let's

00:12:46.231 --> 00:12:48.130
say a search turn.

00:12:48.130 --> 00:12:51.410
So swiping through the rest of the interface.

00:12:51.410 --> 00:12:53.340
That's pretty clear.

00:12:53.340 --> 00:12:59.060
Now, Image 76 isn't the best description for
this if you can see it there's a little map

00:12:59.060 --> 00:13:00.060
here.

00:13:00.060 --> 00:13:04.410
So as a sighted user I can guess, "Okay this
is probably has something to do with location."

00:13:04.410 --> 00:13:09.290
But because there is no text attached to it
to the accessibility service, I don't know

00:13:09.290 --> 00:13:10.610
what's going on.

00:13:10.610 --> 00:13:14.980
So I'll continue to use swipe through.

00:13:14.980 --> 00:13:18.000
And we have the same unlabeled images here.

00:13:18.000 --> 00:13:24.790
So let's take a step back and look at some
of the ways that we can fix this.

00:13:24.790 --> 00:13:27.970
So we'll.

00:13:27.970 --> 00:13:31.320
Back out of the keyboard and it will back
out of.

00:13:31.320 --> 00:13:36.270
This particular demo and open up the fix version.

00:13:36.270 --> 00:13:41.680
&gt;&gt; BURKHARDT: So you could see in this--in
this edit box, look at this edit text the

00:13:41.680 --> 00:13:42.920
one that we have now.

00:13:42.920 --> 00:13:48.000
There's actually hint text and since TalkBack
and other accessibility services can get information

00:13:48.000 --> 00:13:52.420
about the view hierarchy it can pull out information
from the accessibility event end from your

00:13:52.420 --> 00:13:54.810
view to learn what the hint text is.

00:13:54.810 --> 00:13:57.560
So now when I navigate to.

00:13:57.560 --> 00:14:01.081
I hear the hint text which gives me more context
than to what I'm actually doing as a user

00:14:01.081 --> 00:14:03.670
and as I moved through the user interface.

00:14:03.670 --> 00:14:09.130
I get the go button and now we've added content
descriptions to this image buttons so when

00:14:09.130 --> 00:14:14.060
I navigate to them.

00:14:14.060 --> 00:14:15.060
Local deals.

00:14:15.060 --> 00:14:16.230
Social deals.

00:14:16.230 --> 00:14:20.490
And real time deals rather than hearing image
91, image 76.

00:14:20.490 --> 00:14:25.520
&gt;&gt; VIVERETTE: So as a developer this is one
of the easiest things that you can fix.

00:14:25.520 --> 00:14:29.330
You simply go into your layout XML, you go
to each items.

00:14:29.330 --> 00:14:35.470
So you go to your image view or your image
button and you add an Android:contentDescription.

00:14:35.470 --> 00:14:39.570
And if you have things that you specifically
don't want to have a content description you'll

00:14:39.570 --> 00:14:42.920
notice that you still get link errors if you
put no descriptions.

00:14:42.920 --> 00:14:46.780
You'll get this little yellow squeals in your
layout XML.

00:14:46.780 --> 00:14:51.310
So if there's some thing like there's a little
star here that were purely using as decoration

00:14:51.310 --> 00:14:56.510
there is no reason that a user needs to know
that it's a star, we simply put content description

00:14:56.510 --> 00:14:58.180
equals at null.

00:14:58.180 --> 00:15:03.430
So that null let's it know that you thought
about whether or not your image needs to content

00:15:03.430 --> 00:15:08.730
description and you decided that because it's
purely decorative it's okay to be skipped.

00:15:08.730 --> 00:15:15.120
For things that have dynamic content descriptions
you can also call view.set contentDescription

00:15:15.120 --> 00:15:18.420
so if the meaning of.

00:15:18.420 --> 00:15:21.280
Is going to change sometime during the execution
of the application.

00:15:21.280 --> 00:15:27.260
I'll simply call whatever variable I have
to store that in .set contentDescription and

00:15:27.260 --> 00:15:30.130
pass it to the new explanation of what that
button does.

00:15:30.130 --> 00:15:35.810
&gt;&gt; BURKHARDT: We'd also like to mention that
we prefer that you would not override to get

00:15:35.810 --> 00:15:38.910
contentDescription up on the view class.

00:15:38.910 --> 00:15:44.720
Avoid taking that shortcut because we do some
caching once that contentDescription is called

00:15:44.720 --> 00:15:48.481
and it helps us out and make sure that your
users can get the correct description of that

00:15:48.481 --> 00:15:50.930
button when they need to, so.

00:15:50.930 --> 00:15:54.610
&gt;&gt; VIVERETTE: Always use set contentDescription
if you're setting your contentDescription

00:15:54.610 --> 00:15:55.610
dynamically.

00:15:55.610 --> 00:15:56.610
All right.

00:15:56.610 --> 00:16:01.000
So let's back out of this.

00:16:01.000 --> 00:16:06.740
And one other thing to take note here is that
each of this buttons is totally accessible

00:16:06.740 --> 00:16:08.130
in Ice Cream Sandwich.

00:16:08.130 --> 00:16:12.130
A lot of developers are going to be developing
for let's say Gingerbread or below and on

00:16:12.130 --> 00:16:16.980
these devices accessibility relies on use
of a track ball or directional pad on a hardware

00:16:16.980 --> 00:16:18.310
keyboard.

00:16:18.310 --> 00:16:24.510
So each of these buttons is also set to be
Android focusable equals true which means

00:16:24.510 --> 00:16:29.780
if a user has a keyboard and they start pressing
down or right, they'll move from this icon

00:16:29.780 --> 00:16:32.580
to this icon, to this icon.

00:16:32.580 --> 00:16:36.640
Buttons and image buttons are going to have
this set by default but if you use an image

00:16:36.640 --> 00:16:43.240
view you'll have to explicitly say this image
view should be able to receive keyboard focus.

00:16:43.240 --> 00:16:47.700
All right.

00:16:47.700 --> 00:16:59.640
So let's move on to one of the next things
which is grouping and ordering of items.

00:16:59.640 --> 00:17:05.850
&gt;&gt; BURKHARDT: So as we move to this user interface
we see that we have some header text and we

00:17:05.850 --> 00:17:08.510
have a table with some data in it.

00:17:08.510 --> 00:17:11.649
Let's jump right in to the table.

00:17:11.649 --> 00:17:19.659
And you see as I--as I navigate through this
UI and when I touch the table, I'm not actually

00:17:19.659 --> 00:17:27.610
getting any kind of feedback, I have to go
over and touch the actual item over here.

00:17:27.610 --> 00:17:33.929
And as I swipe left and right through the
UI I'm getting--I'm getting very granular

00:17:33.929 --> 00:17:35.580
information.

00:17:35.580 --> 00:17:41.040
And also if I touch the table as a whole it's
going to read all of this content which is

00:17:41.040 --> 00:17:42.830
hard to follow.

00:17:42.830 --> 00:17:46.549
What we need to improve here is the way that
user grouped so that the user can access the

00:17:46.549 --> 00:17:51.539
information in an individual way so they don't
have to get this large verse of text.

00:17:51.539 --> 00:17:57.220
&gt;&gt; VIVERETTE: So what TalkBalk sees when you
open up this application is a bunch of text.

00:17:57.220 --> 00:18:02.379
So these are all--all of these items here
are actually just thrown into a relative layout,

00:18:02.379 --> 00:18:05.500
so date is below from status is below date.

00:18:05.500 --> 00:18:08.169
To TalkBack this just looks like a big bag
of text we use.

00:18:08.169 --> 00:18:14.221
So what it reads is a big bag of text we use
in order on--of the screen left or right and

00:18:14.221 --> 00:18:20.919
top to bottom which is nice if you want to
spend 12 minutes listing to the screen but.

00:18:20.919 --> 00:18:27.080
&gt;&gt; BURKHARDT: If we go in to the fix version.

00:18:27.080 --> 00:18:31.210
We've now put all of this text we use that
are in relevant layout in their own individual

00:18:31.210 --> 00:18:34.409
groupings, you know, hierarchal way--hierarchal
way that makes sense.

00:18:34.409 --> 00:18:37.679
So now when I touch explore.

00:18:37.679 --> 00:18:39.320
That's exactly what I want to hear.

00:18:39.320 --> 00:18:50.570
One row in the table.

00:18:50.570 --> 00:18:54.090
So the user can explore each one of these
rows one by one without having to hear the

00:18:54.090 --> 00:18:56.219
full text in the entire table.

00:18:56.219 --> 00:19:00.759
&gt;&gt; VIVERETTE: In our lab what we've actually
done is provide a little bit more context.

00:19:00.759 --> 00:19:07.070
So amount here is actually inside of a linear--a
relative layout inside of a linear layout

00:19:07.070 --> 00:19:09.510
that contains each of these rows.

00:19:09.510 --> 00:19:13.500
And we've also for keyboard accessibility
made this row focusable.

00:19:13.500 --> 00:19:18.370
So that let's TalkBack know that the things
inside of that layout should be grouped together.

00:19:18.370 --> 00:19:22.799
One thing you'll also notice is when I go
to this top bar right here which starts out

00:19:22.799 --> 00:19:27.840
with payment process in the top left and moves
into the description of this deal at the bottom.

00:19:27.840 --> 00:19:34.440
It actually reads the title, the description
and then it reads the notes payment process

00:19:34.440 --> 00:19:35.450
and the date.

00:19:35.450 --> 00:19:40.799
The reason that we've done this is because
visually this information at the top, local,

00:19:40.799 --> 00:19:46.620
social, real time deals, this title is larger,
it's more important--it's more immediate for

00:19:46.620 --> 00:19:48.020
the user.

00:19:48.020 --> 00:19:51.059
This description is also is more immediate.

00:19:51.059 --> 00:19:55.021
If the user wants to hear more about it they
just stay on it for a little longer, they

00:19:55.021 --> 00:19:57.990
hear what the status and the date are.

00:19:57.990 --> 00:20:02.799
And the way that this actually works in code
is that we've set the content description

00:20:02.799 --> 00:20:04.980
of this entire group.

00:20:04.980 --> 00:20:11.659
So we've taken this relative layout and done
set contentDescription to be the text of each

00:20:11.659 --> 00:20:16.620
of these items can concatenated in the order
that we want them red.

00:20:16.620 --> 00:20:20.419
So when I tap on it.

00:20:20.419 --> 00:20:31.089
So you'll hear those in the order that you
really want to hear them for efficiency.

00:20:31.089 --> 00:20:33.600
&gt;&gt; BURKHARDT: That's right.

00:20:33.600 --> 00:20:34.600
Okay.

00:20:34.600 --> 00:20:41.460
Our last demo here deals with using custom
views.

00:20:41.460 --> 00:20:45.910
So what we have here is a part of an application
that is just directly drawn.

00:20:45.910 --> 00:20:47.710
We've basically implemented the onDraw method.

00:20:47.710 --> 00:20:52.350
We have several objects and we call each of
those objects onDraw within the context of

00:20:52.350 --> 00:20:55.850
the lager canvas, we draw directly to the
screen.

00:20:55.850 --> 00:21:01.149
When TalkBack is on--because there's no textural
content actually associated with this view,

00:21:01.149 --> 00:21:02.149
it's completely dead.

00:21:02.149 --> 00:21:03.630
There's no touch exploration.

00:21:03.630 --> 00:21:05.890
There's no feedback, nothing.

00:21:05.890 --> 00:21:08.070
The application action bar will speak.

00:21:08.070 --> 00:21:13.480
Because it's a standard Android action bar
but nothing else will.

00:21:13.480 --> 00:21:21.179
The way we fix this, we have APIs in Jellybean
that allow for developers to use custom drawn

00:21:21.179 --> 00:21:23.130
views and make them accessible.

00:21:23.130 --> 00:21:24.879
We also have a helper class available.

00:21:24.879 --> 00:21:27.800
Touch exploration helper which is available
in the Eyes-Free website.

00:21:27.800 --> 00:21:32.210
Will point to the source for that shortly.

00:21:32.210 --> 00:21:36.950
And now that I've implemented this node provider,
this new Jellybean API that allows us to define

00:21:36.950 --> 00:21:44.309
regions in custom views for things, I can
touch explore the content.

00:21:44.309 --> 00:21:50.799
I can also double tap to make things happen.

00:21:50.799 --> 00:21:54.720
And I can even do something like long pressing.

00:21:54.720 --> 00:21:59.629
The text color is now red disabled.

00:21:59.629 --> 00:22:04.279
So this is basically the mechanism in Jellybean
that allows developers to make their entirely

00:22:04.279 --> 00:22:08.899
custom drawn views accessible to the standard
Jellybean accessibility sources.

00:22:08.899 --> 00:22:14.160
&gt;&gt; VIVERETTE: So if you're rendering something
in OpenGL which is great and pretty and fast,

00:22:14.160 --> 00:22:16.340
you can also make it totally accessible.

00:22:16.340 --> 00:22:18.549
And so this requires a little bit more work.

00:22:18.549 --> 00:22:23.110
We've made this node provider helper class
to make it a little bit easier but you can

00:22:23.110 --> 00:22:29.259
provide an entire view hierarchy virtually
that TalkBack and a user of accessibility

00:22:29.259 --> 00:22:32.080
will be able to explore.

00:22:32.080 --> 00:22:34.669
So actually I'd like to swipe through this
too, jus to show.

00:22:34.669 --> 00:22:40.710
When you implement the node provider you sort
of magically get a lot of extra features.

00:22:40.710 --> 00:22:45.740
So I can swipe left and right through this.

00:22:45.740 --> 00:22:47.690
And that didn't take any extra effort.

00:22:47.690 --> 00:22:53.220
Just adding those virtual nodes, lets TalkBack
manage swiping left and right through the

00:22:53.220 --> 00:22:55.179
hierarchy.

00:22:55.179 --> 00:23:05.280
So one thing that we didn't mention earlier--I
would like to back out for a real quick.

00:23:05.280 --> 00:23:10.149
So you'll notice that on this tablet everything
is really small.

00:23:10.149 --> 00:23:13.650
And for somebody with low vision.

00:23:13.650 --> 00:23:19.210
They find that things in your app are a little
difficult to see.

00:23:19.210 --> 00:23:24.749
So one way to get around that.

00:23:24.749 --> 00:23:28.630
And I'll pop into accessibilities settings.

00:23:28.630 --> 00:23:35.530
It's the internal feature called large text
mode.

00:23:35.530 --> 00:23:43.049
So this is going to do exactly what you expected
to.

00:23:43.049 --> 00:23:49.620
So for anybody on the Hangout or for anybody
watching in maybe low resolution you can hopefully

00:23:49.620 --> 00:23:50.789
read the text now.

00:23:50.789 --> 00:23:53.559
It's a lot bigger.

00:23:53.559 --> 00:23:59.350
And one really easy mistake to make is in
your application, when you're setting your

00:23:59.350 --> 00:24:06.139
text sizes to use density independent pixels,
dips instead of scaled pixels.

00:24:06.139 --> 00:24:11.389
So when you set text size, if you use scale
pixels it respects the system's desired text

00:24:11.389 --> 00:24:13.210
size.

00:24:13.210 --> 00:24:19.770
One thing that this can be a problem for is
if you don't test your app with slightly larger

00:24:19.770 --> 00:24:24.539
text or slightly longer strings, you may find
that strings extend of the edge of the screen

00:24:24.539 --> 00:24:27.399
or wrap in ways that you don't expect.

00:24:27.399 --> 00:24:30.350
If you're doing internationalization of your
apps, it's important to make sure that you're

00:24:30.350 --> 00:24:32.190
testing for this any way.

00:24:32.190 --> 00:24:38.470
So if you have a string that shows up as a
certain size, in Germany it may end up being

00:24:38.470 --> 00:24:44.040
longer and with large fonts on, it's going
to be loner as well as a little bit taller.

00:24:44.040 --> 00:24:47.381
So it's important to test your app with that
to make sure it works but generally if you

00:24:47.381 --> 00:24:51.640
use scaled pixels instead of dips whit will
just work.

00:24:51.640 --> 00:24:59.179
So let's go in to one of the test apps real
quick to see what the difference looks like.

00:24:59.179 --> 00:25:01.709
So we'll pop into the inaccessible version
of item grouping.

00:25:01.709 --> 00:25:02.709
&gt;&gt; BURKHARDT: Uh-hmm.

00:25:02.709 --> 00:25:03.709
&gt;&gt; Item grouping inaccessible.

00:25:03.709 --> 00:25:07.480
&gt;&gt; BURKHARDT: And we'll see that the text
size was exactly the same which we're looking

00:25:07.480 --> 00:25:08.610
at here is the header.

00:25:08.610 --> 00:25:13.380
It's the same as it was previously because
we've actually constructed this view using

00:25:13.380 --> 00:25:15.030
dips rather than scaled pixels.

00:25:15.030 --> 00:25:21.720
And if we go back to out into the fixed version
you can see that the header now is quite large

00:25:21.720 --> 00:25:27.759
and it follows the convention of a platform
by using scaled pixels so the text is larger

00:25:27.759 --> 00:25:29.590
for users of a large text feature.

00:25:29.590 --> 00:25:33.380
&gt;&gt; VIVERETTE: And you'll also notice that
the text which used to take up only line is

00:25:33.380 --> 00:25:34.879
now wrapped on two.

00:25:34.879 --> 00:25:38.260
And fortunately that doesn't mess up the rest
of our view.

00:25:38.260 --> 00:25:42.020
It works very well if the line needs to wrap
again.

00:25:42.020 --> 00:25:45.080
All right.

00:25:45.080 --> 00:25:47.850
So some of the other features that we're just
going to cover real quick, but we're not going

00:25:47.850 --> 00:25:50.470
to do specific demos for.

00:25:50.470 --> 00:25:59.600
Our web accessibility, so Android Ice Cream
Sandwich and Jellybean have support for opening

00:25:59.600 --> 00:26:01.919
web view content and touch exploring.

00:26:01.919 --> 00:26:03.549
So a lot of apps are hybrid.

00:26:03.549 --> 00:26:07.799
You have both of web view and native Android
content.

00:26:07.799 --> 00:26:12.049
And if you go into accessibility options and
turn on TalkBack you should also make sure--I'll

00:26:12.049 --> 00:26:14.139
just pop in there again.

00:26:14.139 --> 00:26:18.350
Actually I'm going to use the recent apps
swipe to get in there.

00:26:18.350 --> 00:26:21.200
So we'll do down right.

00:26:21.200 --> 00:26:28.419
I'll swipe over to settings, so that's just
going to be a couple of swipes to the right.

00:26:28.419 --> 00:26:30.460
All right.

00:26:30.460 --> 00:26:35.659
Settings, and I'll double tap to open that
up.

00:26:35.659 --> 00:26:36.789
Okay.

00:26:36.789 --> 00:26:40.169
And I'm just going to go straight to accessibilities
since it's.

00:26:40.169 --> 00:26:46.490
Is located near the bottom.

00:26:46.490 --> 00:26:51.919
And you'll notice this item, Enhance Web Accessibility.

00:26:51.919 --> 00:27:06.429
When I double click that it gets a little
bit more obvious.

00:27:06.429 --> 00:27:11.700
So what this means is that when this feature
is turned on, web views that has JavaScript

00:27:11.700 --> 00:27:15.039
are going to inject something called AndroidVox.

00:27:15.039 --> 00:27:19.769
This is similar to ChromeVox which is our
web accessibility solution on chrome.

00:27:19.769 --> 00:27:22.830
It's a--basically a JavaScript screen reader.

00:27:22.830 --> 00:27:27.429
And it allows users to touch your web view
content and receive touch exploration feedback

00:27:27.429 --> 00:27:30.299
the same way that they want for a needed Android
views.

00:27:30.299 --> 00:27:32.879
This also works for swiping left and right.

00:27:32.879 --> 00:27:37.910
So if you have a hybrid web app--this feature
is turned on by default when you do setup

00:27:37.910 --> 00:27:40.739
wizard accessibility for a new device.

00:27:40.739 --> 00:27:44.460
If you turned on TalkBack afterwards, you'll
have to make sure to turn this on.

00:27:44.460 --> 00:27:46.619
So I'm just going to allow this.

00:27:46.619 --> 00:27:54.080
And now when I have web content and I'm testing
my application for accessibility.

00:27:54.080 --> 00:27:58.330
I can swipe through normal Android content
and then it will automatically start moving

00:27:58.330 --> 00:28:00.440
into my web content when I get to that.

00:28:00.440 --> 00:28:05.879
&gt;&gt; BURKHARDT: And our recommendation for developers,
you have hybrid apps or web apps, are basically

00:28:05.879 --> 00:28:10.739
to use your stand--web accessibility standards,
the W3C accessibility standards within your

00:28:10.739 --> 00:28:15.110
hybrid app web views to make sure that your
contact is accessible.

00:28:15.110 --> 00:28:20.539
So use ARIA live regions, label your images
with default tags those standard web accessibility

00:28:20.539 --> 00:28:21.539
recommendations.

00:28:21.539 --> 00:28:23.399
&gt;&gt; VIVERETTE: And the same [INDISTINCT] arts
apply for all text.

00:28:23.399 --> 00:28:28.741
So if you have decorate images--decorative
images, they--if they don't need content descriptions

00:28:28.741 --> 00:28:34.049
for native Android they wouldn't need old
text for web content.

00:28:34.049 --> 00:28:37.980
&gt;&gt; RAMAN: They do all the [INDISTINCT] empty
strains, some [INDISTINCT] along side--on

00:28:37.980 --> 00:28:43.139
the Android side which is all [INDISTINCT]
&gt;&gt; VIVERETTE: All right.

00:28:43.139 --> 00:28:48.970
So that's a quick overview of all of the features
in Android accessibility.

00:28:48.970 --> 00:28:50.470
We haven't covered Braille.

00:28:50.470 --> 00:28:56.919
We don't have a Braille device with us right
now to demo but for making sure that your

00:28:56.919 --> 00:29:02.690
app works with Braille you can actually typically
just swipe through.

00:29:02.690 --> 00:29:07.490
If you can swipe through and you can double
click to activate things in your app and everything

00:29:07.490 --> 00:29:12.119
is red as you would expect then your apps
should work very well for a user with a Braille

00:29:12.119 --> 00:29:14.799
input/output device
&gt;&gt; RAMAN: And as I mentioned a new--a Google

00:29:14.799 --> 00:29:23.230
IO Talk from Google IO of 2012, this year
has more details on what we launched in relieving

00:29:23.230 --> 00:29:28.414
in that also it does includes a Braille demo.

00:29:28.414 --> 00:29:32.590
But I think of a Braille device as both as
an input and output device which is what it

00:29:32.590 --> 00:29:33.749
actually is.

00:29:33.749 --> 00:29:37.580
It's a Bluetooth device that both apps as
a Braille keyboard that allows a blind user

00:29:37.580 --> 00:29:41.380
to input text and then also displays extra
component.

00:29:41.380 --> 00:29:42.380
It's a very cool thing to see.

00:29:42.380 --> 00:29:47.840
You can look at it at the in the YouTube videos
and but as developer you know, you shouldn't

00:29:47.840 --> 00:29:53.789
have to worry about Braille versus speech
or do you need to be worrying about populating

00:29:53.789 --> 00:29:59.630
this accessibility events correctly so that
the services can pick up the right observations.

00:29:59.630 --> 00:30:04.490
&gt;&gt; VIVERETTE: So, as a developer there are
a lot of resources at your disposal for implementing

00:30:04.490 --> 00:30:05.490
accessibility.

00:30:05.490 --> 00:30:11.200
We have a great developer guideline section
on the Android website regarding accessibility.

00:30:11.200 --> 00:30:15.610
We have great UX guidelines regarding accessibility
on the Android site.

00:30:15.610 --> 00:30:20.149
TalkBack is open source, so if you need to
know a lot, you can actually check that out

00:30:20.149 --> 00:30:21.919
online.

00:30:21.919 --> 00:30:27.419
And the sample app that we ran through with
a bad and good versions of accessibility in

00:30:27.419 --> 00:30:32.369
applications is also open sourced and available
online.

00:30:32.369 --> 00:30:39.490
&gt;&gt; BURKHARDT: With that, I think we'll head
it back for questions.

00:30:39.490 --> 00:30:42.740
&gt;&gt; Actually, we--and actually we have Richard
on the Hangout.

00:30:42.740 --> 00:30:43.740
I'm going to put him on.

00:30:43.740 --> 00:30:50.830
So he can ask you guys a question.

00:30:50.830 --> 00:30:55.169
&gt;&gt; VIVERETTE: Sure.

00:30:55.169 --> 00:30:56.169
&gt;&gt; Just wait one second.

00:30:56.169 --> 00:30:57.200
Richard, can you hear us?

00:30:57.200 --> 00:30:58.200
Oops, that's me.

00:30:58.200 --> 00:30:59.480
&gt;&gt; BURKHARDT: We don't hear a thing.

00:30:59.480 --> 00:31:00.480
&gt;&gt; One more time.

00:31:00.480 --> 00:31:01.480
I'm sorry about that.

00:31:01.480 --> 00:31:02.480
There's a--hold on.

00:31:02.480 --> 00:31:03.480
&gt;&gt; VIVERETTE: We're working on hearing you.

00:31:03.480 --> 00:31:04.480
&gt;&gt; Yeah.

00:31:04.480 --> 00:31:05.480
Give me one second.

00:31:05.480 --> 00:31:06.549
I'm going to sort this sound issue out real
quick.

00:31:06.549 --> 00:31:10.899
&gt;&gt; I'm going to mess around a little bit with
our sound equipment.

00:31:10.899 --> 00:31:13.839
Sorry, hold on a sec.

00:31:13.839 --> 00:31:22.869
&gt;&gt; RAMAN: So, yeah, while we--while we get
the audio issue sorted here, [INDISTINCT]

00:31:22.869 --> 00:31:29.049
I mean, this--it look--we look forward to
using you apps on [INDISTINCT] devices but

00:31:29.049 --> 00:31:30.299
they know user interfaces.

00:31:30.299 --> 00:31:32.830
There's a fun stuff to do in.

00:31:32.830 --> 00:31:35.230
You'll probably discover in the process of
making your apps when accessible, that there

00:31:35.230 --> 00:31:37.169
are simple user issues that you discover that
make your app more usable for all your users

00:31:37.169 --> 00:31:42.809
as you fix these things.

00:31:42.809 --> 00:31:49.320
&gt;&gt; VIVERETTE: And I think one of the most
important things in making an app accessible

00:31:49.320 --> 00:31:53.539
is making sure that it's orderly and simplified.

00:31:53.539 --> 00:31:55.730
Simplification is good for everyone.

00:31:55.730 --> 00:32:00.210
So if it doesnâ€™t take 15 button clicks to
get from one place to another, everyone wins.

00:32:00.210 --> 00:32:01.210
&gt;&gt; BURKHARDT: Absolutely.

00:32:01.210 --> 00:32:06.669
&gt;&gt; RAMAN: Enumerate the number of exclusive
actions that your users need to do, eliminate

00:32:06.669 --> 00:32:13.330
the explicit pieces of content that users
half to read in order to figure out how to

00:32:13.330 --> 00:32:19.309
use your application and, you know, things
that are sure stoppers for blind users that

00:32:19.309 --> 00:32:23.139
usually are a pain in the neck for your avid
users, who donâ€™t want to complain about

00:32:23.139 --> 00:32:24.139
it.

00:32:24.139 --> 00:32:27.950
But as we sort of smoothen those things out
the over all interaction gets a lot smaller.

00:32:27.950 --> 00:32:31.519
And these are modern than devices right?

00:32:31.519 --> 00:32:33.270
These are devices we use on the go.

00:32:33.270 --> 00:32:37.330
The fastest somebody can do something on your
application, the more often they are like

00:32:37.330 --> 00:32:38.379
to do it.

00:32:38.379 --> 00:32:41.919
&gt;&gt; BURKHARDT: And the best way to test for
this stuff is the developer is testing by

00:32:41.919 --> 00:32:42.919
doing.

00:32:42.919 --> 00:32:45.539
So go and--go ahead into accessibility settings
and turn on TalkBack.

00:32:45.539 --> 00:32:48.989
And go into your application; try to explore
it by touch.

00:32:48.989 --> 00:32:51.009
Try to swipe through your user interface.

00:32:51.009 --> 00:32:53.219
&gt;&gt; VIVERETTE: And close your eyes and keep
them closed.

00:32:53.219 --> 00:32:55.149
&gt;&gt; BURKHARDT: Absolutely, no cheating.

00:32:55.149 --> 00:32:57.390
&gt;&gt; All right, I think Richard's maybe working.

00:32:57.390 --> 00:32:58.390
Richard, can you give it another shot please?

00:32:58.390 --> 00:32:59.390
No, nothing.

00:32:59.390 --> 00:33:00.390
&gt;&gt; RAMAN: No way.

00:33:00.390 --> 00:33:01.390
&gt;&gt; BURKHARDT: Interesting.

00:33:01.390 --> 00:33:02.390
&gt;&gt; RAMAN: Richard, can you do sign language?

00:33:02.390 --> 00:33:07.289
Maybe we can read sign language.

00:33:07.289 --> 00:33:09.220
&gt;&gt; All right.

00:33:09.220 --> 00:33:11.149
Sorry guys.

00:33:11.149 --> 00:33:14.269
I'm going to just go ahead and read Richard's
question now from the--from the Hangout.

00:33:14.269 --> 00:33:16.210
Sorry about that Richard.

00:33:16.210 --> 00:33:19.750
We'll--I'll get that question read for you.

00:33:19.750 --> 00:33:25.440
So Richard's question is--let me just scroll
up.

00:33:25.440 --> 00:33:32.369
He's curious about the performance hits that
a lot of the features that we implemented

00:33:32.369 --> 00:33:36.900
on, I mean, you have on the device.

00:33:36.900 --> 00:33:37.900
&gt;&gt; VIVERETTE: Yeah.

00:33:37.900 --> 00:33:38.900
&gt;&gt; And how you run that?

00:33:38.900 --> 00:33:39.900
&gt;&gt; RAMAN: So, the simple answer is their zero
performance, I hope so.

00:33:39.900 --> 00:33:43.740
And let me answer that in the different level
in which does I believe it stands [INDISTINCT]

00:33:43.740 --> 00:33:46.490
and then I let Allan and Casey fill in.

00:33:46.490 --> 00:33:54.299
So, on the Android platform, the accessibility
API are present in every device.

00:33:54.299 --> 00:34:02.509
So any Jellybean device has already the API
any Ice Cream Sandwich device has all these

00:34:02.509 --> 00:34:03.509
APIs.

00:34:03.509 --> 00:34:06.190
They donâ€™t--they are on off until an accessibility
service is turned on.

00:34:06.190 --> 00:34:12.119
So, until an accessibility service is turned
on, these--as I said, these APIs are not.

00:34:12.119 --> 00:34:17.660
When an accessibility service is turned on,
these APIs raised to appropriate event and

00:34:17.660 --> 00:34:24.310
they grow--go across by [INDISTINCT] but we've
spend a lot of time optimizing the single

00:34:24.310 --> 00:34:26.120
framework.

00:34:26.120 --> 00:34:32.490
So the performance that you see on the device
both in terms of load as well as battery is

00:34:32.490 --> 00:34:33.510
almost zero.

00:34:33.510 --> 00:34:41.740
Extra speech does take up some CPU cycles
but on to these devices, you donâ€™t notice.

00:34:41.740 --> 00:34:47.429
&gt;&gt; BURKHARDT: We have a lot of developers
who ask us often, "Is there a way we can only

00:34:47.429 --> 00:34:51.820
implement some accessibility features and
turn them on if accessibility itself is on?"

00:34:51.820 --> 00:34:56.380
And thatâ€™s something that you can do through
the accessibility manager class there is a

00:34:56.380 --> 00:35:02.370
check to see if accessibility--if an accessibility
service is on and if explore touch is enabled.

00:35:02.370 --> 00:35:03.370
&gt;&gt; VIVERETTE: Yeah.

00:35:03.370 --> 00:35:08.250
So if you're using the accessibility helper
class, and you're creating a virtual view

00:35:08.250 --> 00:35:12.480
hierarchy for all of your nodes, you can do
this only when accessibility is turned on

00:35:12.480 --> 00:35:14.380
and thatâ€™s really easy to check.

00:35:14.380 --> 00:35:19.490
Its accessibility manager dot is enabled and
I Touch Exploration enabled on newer devices,

00:35:19.490 --> 00:35:21.250
newer APIs.

00:35:21.250 --> 00:35:25.920
In terms of the performance hit that your
application takes, as Raman had mentioned

00:35:25.920 --> 00:35:30.430
there really in none and we care very deeply
about performance.

00:35:30.430 --> 00:35:38.020
I think tens of milliseconds is really pushing
it as far as the performance hit that somebody

00:35:38.020 --> 00:35:40.730
has to deal with when accessibility is turned
on.

00:35:40.730 --> 00:35:44.940
So we worked on profiling and making sure
that we're as fast as possible.

00:35:44.940 --> 00:35:50.520
&gt;&gt; RAMAN: So you should take the fact that
we [INDISTINCT] these API's on every device,

00:35:50.520 --> 00:35:57.130
as oppose to saying there's should be on some
devices that they user ask for accessibility

00:35:57.130 --> 00:35:58.130
[INDISTINCT].

00:35:58.130 --> 00:35:59.130
&gt;&gt; Okay.

00:35:59.130 --> 00:36:00.130
&gt;&gt; So Richard is also one of...

00:36:00.130 --> 00:36:02.370
&gt;&gt; Did sound--did sound start working yet?

00:36:02.370 --> 00:36:06.360
&gt;&gt; ...especially on the battery.

00:36:06.360 --> 00:36:09.100
&gt;&gt; RAMAN: Back of the [INDISTINCT] I use my
device everyday.

00:36:09.100 --> 00:36:10.100
It talks to me with the whole time.

00:36:10.100 --> 00:36:13.200
And I donâ€™t find myself charging my phones
any more often than any of these guys.

00:36:13.200 --> 00:36:17.720
So I typically leave home around 7:30 in the
morning.

00:36:17.720 --> 00:36:23.050
I unplug my phone and I typically donâ€™t
need to charge my phone until about 8:30 in

00:36:23.050 --> 00:36:25.180
the evening.

00:36:25.180 --> 00:36:27.710
So--and I use my phone a lot.

00:36:27.710 --> 00:36:29.000
&gt;&gt; VIVERETTE: I also use my phone a lot.

00:36:29.000 --> 00:36:33.360
I think I may actually get worse battery time
than Raman because I have my screen brightness

00:36:33.360 --> 00:36:35.080
set a lot higher.

00:36:35.080 --> 00:36:39.240
So that--I think thatâ€™s actually one of
the most interesting things is that while

00:36:39.240 --> 00:36:44.620
we are doing speech in the background, we're
doing vibration in the background.

00:36:44.620 --> 00:36:48.970
If the user just turns their brightness down,
they're probably going to save more battery

00:36:48.970 --> 00:36:52.230
than they're eating up from the vibration,
the haptic feedback.

00:36:52.230 --> 00:36:56.660
&gt;&gt; RAMAN: Alan wrote me a wonderful application
called shapes that actually it makes my screen

00:36:56.660 --> 00:36:59.200
completely dark to which, it's the tone of
the dark.

00:36:59.200 --> 00:37:03.990
&gt;&gt; VIVERETTE: Yeah, so all LED devices, he's
saving a lot of battery on screen brightness.

00:37:03.990 --> 00:37:09.440
&gt;&gt; RAMAN: I do that on my laptops too.

00:37:09.440 --> 00:37:13.280
My little, you know, laptop gives me about
six to eight hours so, it's a good thing.

00:37:13.280 --> 00:37:17.660
Turn your monitor off, use speech.

00:37:17.660 --> 00:37:23.601
&gt;&gt; FERNANDEZ: It's a challenge for the rest
of us today as supposed so trying to turn

00:37:23.601 --> 00:37:24.601
your monitors off [INDISTINCT] with out them.

00:37:24.601 --> 00:37:25.601
&gt;&gt; The other one was adjusting the brightness.

00:37:25.601 --> 00:37:27.560
&gt;&gt; FERNANDEZ: [INDISTINCT] yeah, okay.

00:37:27.560 --> 00:37:28.590
Let's see.

00:37:28.590 --> 00:37:34.560
I actually thought I'd ask you guys a question.

00:37:34.560 --> 00:37:35.560
You mentioned accessibility for web use.

00:37:35.560 --> 00:37:36.560
&gt;&gt; VIVERETTE: Uh-hmm.

00:37:36.560 --> 00:37:40.810
&gt;&gt; FERNANDEZ: And that feature in now in Ice
Cream Sandwich and also in Jellybean.

00:37:40.810 --> 00:37:41.810
&gt;&gt; RAMAN: Uh-hmm.

00:37:41.810 --> 00:37:45.470
&gt;&gt; FERNANDEZ: What's your advice for folks
who want to try to support that the--well,

00:37:45.470 --> 00:37:50.589
for releases prior to Ice Cream Sandwich and
before?

00:37:50.589 --> 00:37:56.050
&gt;&gt; RAMAN: So, actually the web view access
with also then in Honeycomb which is [INDISTINCT].

00:37:56.050 --> 00:38:01.290
We're looking at Gingerbread devices, if you
have a--if you have an application, that's

00:38:01.290 --> 00:38:08.620
a hybrid application and you want to support
accessibility for web use, you could do what

00:38:08.620 --> 00:38:10.600
our Gmail team did.

00:38:10.600 --> 00:38:18.330
And what they did was to take the [INDISTINCT]
so the [INDISTINCT] as Alan explained is a

00:38:18.330 --> 00:38:24.580
JavaScript reader, an accessibility to looking
inside the [INDISTINCT] And what happens on

00:38:24.580 --> 00:38:32.430
Ice Cream Sandwich--Honeycomb, Ice Cream Sandwich
and above is that the Android framework, when

00:38:32.430 --> 00:38:34.080
the accessibility is enabled and that option
is turned on.

00:38:34.080 --> 00:38:41.120
It actually adds a little piece of code that
injects that script into every webpage.

00:38:41.120 --> 00:38:46.060
So the script is downloaded once, cached on
your device and then injected into HTML pages

00:38:46.060 --> 00:38:50.370
as I say lower by adding a [INDISTINCT].

00:38:50.370 --> 00:38:55.000
So if you have a specific application, as
an app is Gmail.

00:38:55.000 --> 00:38:59.710
What the Gmail team did was going all the
way back to Froyo.

00:38:59.710 --> 00:39:05.260
They took our script and added a little piece
of code in their web view handler that on

00:39:05.260 --> 00:39:12.460
load, basically added a script back that injected
a script and then thatâ€™s actually how Gmail

00:39:12.460 --> 00:39:14.180
talks on both Froyo and Gingerbread.

00:39:14.180 --> 00:39:19.360
So, if you are a developer who's going to
hybrid app and you want to support all the

00:39:19.360 --> 00:39:21.700
way back to Froyo that's what you need to
know.

00:39:21.700 --> 00:39:25.340
&gt;&gt; VIVERETTE: So, if you're looking into doing
this yourself, you can actually check out

00:39:25.340 --> 00:39:29.900
the web view source code on the Android project
site.

00:39:29.900 --> 00:39:33.990
Look for accessibility and you'll find all
of the places where we're getting the URL

00:39:33.990 --> 00:39:40.660
for the accessibility scripts, injecting it,
proving Java bridge API to JavaScript and

00:39:40.660 --> 00:39:45.350
you can add that to your own web view, being
careful to not turn that on, on Honeycomb

00:39:45.350 --> 00:39:49.920
and above because it's already being injected,
you donâ€™t want it twice.

00:39:49.920 --> 00:39:54.900
&gt;&gt; RAMAN: And once you do that, the service
that are serving that script app have a caching

00:39:54.900 --> 00:39:55.900
policy [INDISTINCT] at least.

00:39:55.900 --> 00:39:56.900
So you just use [INDISTINCT] you got it?

00:39:56.900 --> 00:39:57.900
Between the device and server, they'll negotiate
appropriately and data script when, you know,

00:39:57.900 --> 00:39:58.900
every few weeks based on the caching policies.

00:39:58.900 --> 00:40:09.550
So you donâ€™t have to worry about taking
a download on [INDISTINCT].

00:40:09.550 --> 00:40:14.500
&gt;&gt; BURKHARDT: And also, if you're concerned
about performance, it's around the injection,

00:40:14.500 --> 00:40:19.230
you can again check accessibility manager
to see if an accessibility services is active

00:40:19.230 --> 00:40:20.230
on a device.

00:40:20.230 --> 00:40:22.420
&gt;&gt; VIVERETTE: Yeah, thatâ€™s super important.

00:40:22.420 --> 00:40:26.960
You donâ€™t want to inject the script if accessibility
is off because then everybody will get Touch

00:40:26.960 --> 00:40:31.950
Exploration and it will talk and that would
be weird.

00:40:31.950 --> 00:40:37.060
&gt;&gt; FERNANDEZ: [INDISTINCT] great, thanks for
that very comprehensive answer guys.

00:40:37.060 --> 00:40:38.500
Is there any more questions from him or...

00:40:38.500 --> 00:40:39.500
&gt;&gt; Yeah.

00:40:39.500 --> 00:40:41.590
Richard also wants to know if there's a way
to change the voice parameters.

00:40:41.590 --> 00:40:47.020
I think he is referring to maybe using a different
voice and explain for confirmation.

00:40:47.020 --> 00:40:48.280
&gt;&gt; FERNANDEZ: Different voices?

00:40:48.280 --> 00:40:50.890
&gt;&gt; VIVERETTE: This is my favorite thing about
Android.

00:40:50.890 --> 00:40:53.380
&gt;&gt; RAMAN: Oh, you want to answer that Alan?

00:40:53.380 --> 00:40:54.380
Go for it.

00:40:54.380 --> 00:40:55.380
&gt;&gt; VIVERETTE: Sure.

00:40:55.380 --> 00:40:56.580
Let's--we'll all--I think we've all sort of
had an experience with this.

00:40:56.580 --> 00:40:57.580
&gt;&gt; BURKHARDT: Yes.

00:40:57.580 --> 00:41:03.910
&gt;&gt; VIVERETTE: So I personally use an Australian
voice on my phone, a female Australian voice.

00:41:03.910 --> 00:41:06.840
It sounds really great for driving directions.

00:41:06.840 --> 00:41:10.360
But one of the cool things about Android is
anyone can write a text-to-speech engine.

00:41:10.360 --> 00:41:14.400
So if you go on a Play Store and look for
text-to-speech, there are a lot of engines

00:41:14.400 --> 00:41:18.910
that you can download for like three or four
dollars and you get great quality voices.

00:41:18.910 --> 00:41:24.370
These are drop-in replacements, so if somebody
installs a German voice and their device look--is

00:41:24.370 --> 00:41:30.160
set to German, it will just speak; it will
speak everything in German correctly.

00:41:30.160 --> 00:41:34.830
And we have translations and TalkBack for
all of the languages that are available for

00:41:34.830 --> 00:41:36.720
TTS on Android.

00:41:36.720 --> 00:41:42.310
&gt;&gt; BURKHARDT: And also as far as changing
voice parameters, TalkBack will respect whatever

00:41:42.310 --> 00:41:44.340
is currently set in text-to-speech settings.

00:41:44.340 --> 00:41:48.880
So if you prefer voice faster, you can set
the voice speed to very fast.

00:41:48.880 --> 00:41:52.710
TalkBack will use that and send all the device
feedback in a very fast manner.

00:41:52.710 --> 00:41:57.910
&gt;&gt; RAMAN: So for us, when we design that with
extra speed API.

00:41:57.910 --> 00:42:15.700
We had a couple of adding principles which
is we wanted users to be able to get other

00:42:15.700 --> 00:42:22.380
voices and have all their talking applications
talk with that better voice with TalkBack

00:42:22.380 --> 00:42:24.070
or other applications.

00:42:24.070 --> 00:42:25.190
All right.

00:42:25.190 --> 00:42:30.870
So, let's say somebody has written you an
app that reads a doc.

00:42:30.870 --> 00:42:39.230
You get a better voice as a user you should
be able to use that voice for that other app.

00:42:39.230 --> 00:42:40.550
So, why is that an app is so multi?

00:42:40.550 --> 00:42:41.880
And that actually creates for a good ecosystem
because if you are a developer who's writing

00:42:41.880 --> 00:42:42.880
an application that talks, you can focus on
writing an application and be assured that

00:42:42.880 --> 00:42:43.880
when a user gets a better voice your app sounds
better.

00:42:43.880 --> 00:42:44.880
All right.

00:42:44.880 --> 00:42:46.392
Just as if I download your app--if I buy your
app today and then I use it on the phone with

00:42:46.392 --> 00:42:47.392
a better display, it looks better.

00:42:47.392 --> 00:42:48.392
All right.

00:42:48.392 --> 00:42:51.320
So, similarly if I--you do download your app
today and I get a voice that sounds better

00:42:51.320 --> 00:42:52.570
on your app.

00:42:52.570 --> 00:42:54.240
&gt;&gt; Could you hear that?

00:42:54.240 --> 00:42:55.520
&gt;&gt; RAMAN: And that's actually how this whole
thing is about.

00:42:55.520 --> 00:43:05.170
So, excellent question and it shows up another
aspect of the platform that's interesting

00:43:05.170 --> 00:43:06.420
and...

00:43:06.420 --> 00:43:08.400
&gt;&gt; Just a couple in YouTube.

00:43:08.400 --> 00:43:09.400
I'm sorry.

00:43:09.400 --> 00:43:12.760
&gt;&gt; FERNANDEZ: We have some questions in the
YouTube stream which I'm not sure I can find.

00:43:12.760 --> 00:43:14.780
Maybe you can read them out for us Daniel.

00:43:14.780 --> 00:43:15.780
&gt;&gt; Yeah.

00:43:15.780 --> 00:43:16.780
So, the one I found is from Funnergoat.

00:43:16.780 --> 00:43:18.770
Quiz question is any tips regarding accessibility
in app widgets?

00:43:18.770 --> 00:43:22.140
What type of app widgets do target users get
the most use out of?

00:43:22.140 --> 00:43:24.420
&gt;&gt; RAMAN: So, speaking for myself as a user,
app widgets that, you know, display a subset

00:43:24.420 --> 00:43:25.420
piece of information are very, very useful.

00:43:25.420 --> 00:43:36.080
So, I'll highlight vote app for just that
I find useful enough, which I don't find useful.

00:43:36.080 --> 00:43:42.650
This is not necessarily a criticism of those
widgets but more of--more a user's point of

00:43:42.650 --> 00:43:47.330
view if your app works and nice framework.

00:43:47.330 --> 00:43:54.280
So, like, a finance stock widget that you've--that
you basically touch and it speaks the current

00:43:54.280 --> 00:43:56.730
stock price is an enormous use, right?

00:43:56.730 --> 00:44:03.100
It saves you that effort of content switching
and going to that app and look for that thing.

00:44:03.100 --> 00:44:04.100
Talk widget obviously speaks the time.

00:44:04.100 --> 00:44:05.100
You know, you don't have to launch the thing.

00:44:05.100 --> 00:44:06.100
Great stuff.

00:44:06.100 --> 00:44:07.100
I actually find the Gmail a very, very useful.

00:44:07.100 --> 00:44:16.850
So, I can actually have in my own screen a
Gmail widget that shows me a particular demo.

00:44:16.850 --> 00:44:24.560
And in my mind [INDISTINCT] summarizing the
widget that actually speaks the summaries

00:44:24.560 --> 00:44:26.310
of all the--of [INDISTINCT].

00:44:26.310 --> 00:44:28.680
It's very nice because one touch you hear
it, you tap it, you have it.

00:44:28.680 --> 00:44:31.730
The widget installed are not that useful.

00:44:31.730 --> 00:44:41.430
So, videos that shows you the seven books
you have on your bookshelf by showing a little

00:44:41.430 --> 00:44:43.990
pixilated image of the spine of the book.

00:44:43.990 --> 00:44:44.990
Not too useful.

00:44:44.990 --> 00:44:47.900
And because the thing if you started doing
an accessible, speakable version of that.

00:44:47.900 --> 00:44:53.400
The way you touch it and speaks the titles
of the seven books.

00:44:53.400 --> 00:44:56.330
You might as well launch the thing and go
look at it there.

00:44:56.330 --> 00:45:03.440
And, so, on the other hand, a widget that
directly launches a book is very useful because

00:45:03.440 --> 00:45:08.720
that's, like, you know, you're reading a book,
you just--you know the process of reading

00:45:08.720 --> 00:45:09.720
it.

00:45:09.720 --> 00:45:10.760
You pause reading it.

00:45:10.760 --> 00:45:13.330
Maybe it's a book you are reading over three
weeks.

00:45:13.330 --> 00:45:15.280
Having a video to that book on your home screen
is really useful.

00:45:15.280 --> 00:45:16.280
So, yeah.

00:45:16.280 --> 00:45:17.280
So, app videos are embedded videos--are actually--absolutely
useful because again you just know what it

00:45:17.280 --> 00:45:18.280
does without launching the apps.

00:45:18.280 --> 00:45:19.280
So...

00:45:19.280 --> 00:45:27.130
&gt;&gt; FERNANDEZ: So, from like a coding perspective,
do you guys have any information about how

00:45:27.130 --> 00:45:30.120
that should be done?

00:45:30.120 --> 00:45:35.224
Is it the same basically of what we're doing
in the things around the stuff?

00:45:35.224 --> 00:45:36.224
&gt;&gt; VIVERETTE: Yeah.

00:45:36.224 --> 00:45:37.224
It's...

00:45:37.224 --> 00:45:38.224
&gt;&gt; RAMAN: The same--the same thing.

00:45:38.224 --> 00:45:39.224
&gt;&gt; VIVERETTE: Same thing.

00:45:39.224 --> 00:45:40.224
&gt;&gt; BURKHARDT: That's the same deal.

00:45:40.224 --> 00:45:41.224
Add content descriptions always make sure
that you have contentDescriptions.

00:45:41.224 --> 00:45:43.330
Always test your apps with accessibility turned
on.

00:45:43.330 --> 00:45:46.550
And your eyes close because you'll find out
a lot of short comings.

00:45:46.550 --> 00:45:48.250
&gt;&gt; FERNANDEZ: That's right.

00:45:48.250 --> 00:45:49.380
All right.

00:45:49.380 --> 00:45:50.380
Great.

00:45:50.380 --> 00:45:51.380
Anymore questions?

00:45:51.380 --> 00:45:53.900
I don't see anything here.

00:45:53.900 --> 00:45:54.900
&gt;&gt; Yeah.

00:45:54.900 --> 00:45:57.200
I'm going to put Richard back on.

00:45:57.200 --> 00:45:58.200
We have actually sound now.

00:45:58.200 --> 00:45:59.200
I was able to debug.

00:45:59.200 --> 00:46:00.200
So...

00:46:00.200 --> 00:46:01.200
&gt;&gt; Yeah.

00:46:01.200 --> 00:46:02.200
&gt;&gt; Very good.

00:46:02.200 --> 00:46:03.200
&gt;&gt; Awesome.

00:46:03.200 --> 00:46:04.200
&gt;&gt; VIVERTTE: Welcome back.

00:46:04.200 --> 00:46:05.200
&gt;&gt; RAMAN: Hello Richard.

00:46:05.200 --> 00:46:06.200
&gt;&gt; How are you doing sir?

00:46:06.200 --> 00:46:07.200
&gt;&gt; RAMAN: Are you all right?

00:46:07.200 --> 00:46:08.200
&gt;&gt; FERNANDEZ: Good.

00:46:08.200 --> 00:46:09.200
Thank you.

00:46:09.200 --> 00:46:10.200
Any question?

00:46:10.200 --> 00:46:11.200
&gt;&gt; Yeah.

00:46:11.200 --> 00:46:12.200
I'm on a [INDISTINCT] too.

00:46:12.200 --> 00:46:13.200
I restarted my browser so that helps.

00:46:13.200 --> 00:46:14.630
So, I was kind of curious about any time my
feature comes about.

00:46:14.630 --> 00:46:19.820
I work for a company in Malpitas and what
we do is a certification programs.

00:46:19.820 --> 00:46:26.160
So, my job is Android full-time and my job
is to be aware of these features, run the

00:46:26.160 --> 00:46:27.160
development crew.

00:46:27.160 --> 00:46:33.200
And what we're doing particularly interested
in are like the certification that goes around

00:46:33.200 --> 00:46:34.200
the device.

00:46:34.200 --> 00:46:35.320
So, you implement the feature.

00:46:35.320 --> 00:46:37.710
It goes to the carrier or the OEM.

00:46:37.710 --> 00:46:39.690
They implement the feature.

00:46:39.690 --> 00:46:46.079
How do you--when you make viewer go to show
the features are working properly?

00:46:46.079 --> 00:46:51.380
&gt;&gt; RAMAN: So, excessive data or CTS [INDISTINCT]
accessibility along with the other parts of

00:46:51.380 --> 00:46:53.140
the platform.

00:46:53.140 --> 00:46:54.140
So...

00:46:54.140 --> 00:46:55.400
&gt;&gt; Did you say CTS Test?

00:46:55.400 --> 00:46:56.400
&gt;&gt; RAMAN: CTS.

00:46:56.400 --> 00:46:57.400
Yes.

00:46:57.400 --> 00:46:58.400
&gt;&gt; FERNANDEZ: Right.

00:46:58.400 --> 00:46:59.400
It's the Compatibility Test Suite.

00:46:59.400 --> 00:47:01.880
It's the--an acronym if you need the translation
there.

00:47:01.880 --> 00:47:02.880
&gt;&gt; RAMAN: Right.

00:47:02.880 --> 00:47:03.880
&gt;&gt; No, that's fine.

00:47:03.880 --> 00:47:06.860
I just haven't seen that particular test suite
yet.

00:47:06.860 --> 00:47:07.860
&gt;&gt; FERNANDEZ: Okay.

00:47:07.860 --> 00:47:08.860
Yeah.

00:47:08.860 --> 00:47:14.510
That's--you need to go check out the source.android.com
site and look under the compatibility tab

00:47:14.510 --> 00:47:16.460
and you'll find the information about that.

00:47:16.460 --> 00:47:17.460
&gt;&gt; Okay.

00:47:17.460 --> 00:47:18.490
So, you do have your test suite out there?

00:47:18.490 --> 00:47:20.280
I've got all the code of course.

00:47:20.280 --> 00:47:24.370
And I'll just go and take a look down in there
and see what you guys are doing.

00:47:24.370 --> 00:47:25.370
&gt;&gt; FERNANDEZ: Uh-hmm.

00:47:25.370 --> 00:47:29.210
&gt;&gt; Because one of the things that I have to
deal with too is when an arbitrate person

00:47:29.210 --> 00:47:32.870
writes an app and they're using it after I'll
be able to tell them whether or not they've

00:47:32.870 --> 00:47:33.870
done it right.

00:47:33.870 --> 00:47:34.870
&gt;&gt; RAMAN: Right.

00:47:34.870 --> 00:47:35.870
&gt;&gt; So...

00:47:35.870 --> 00:47:36.870
&gt;&gt; RAMAN: Yeah.

00:47:36.870 --> 00:47:38.320
So, with those we don't have test for those
today.

00:47:38.320 --> 00:47:48.970
And what the CTS best do is they test what
you ask before which is, you know, a tenure

00:47:48.970 --> 00:47:52.210
or a device provider has make Android and
they've implemented it on their device.

00:47:52.210 --> 00:47:53.800
How did they know that their platform is complied
and that...

00:47:53.800 --> 00:47:54.800
&gt;&gt; Okay.

00:47:54.800 --> 00:47:55.800
&gt;&gt; RAMAN: ...what you see it does too.

00:47:55.800 --> 00:48:02.630
And as a part of that they also--we also test
for accessibility compliance to make sure

00:48:02.630 --> 00:48:04.710
that the accessibility of the platform doesn't
break.

00:48:04.710 --> 00:48:05.710
&gt;&gt; Okay.

00:48:05.710 --> 00:48:06.710
Perfect.

00:48:06.710 --> 00:48:07.710
Those are very useful by the way [INDISTINCT]
up the platform.

00:48:07.710 --> 00:48:09.370
Thank you so much for putting those out there.

00:48:09.370 --> 00:48:10.370
It's...

00:48:10.370 --> 00:48:11.470
&gt;&gt; RAMAN: Yeah.

00:48:11.470 --> 00:48:12.470
Yeah.

00:48:12.470 --> 00:48:15.080
&gt;&gt; It allows--it literally allows me to do
my job.

00:48:15.080 --> 00:48:17.060
&gt;&gt; RAMAN: Do good, useful things with it.

00:48:17.060 --> 00:48:18.490
That's why we put it out there.

00:48:18.490 --> 00:48:19.490
&gt;&gt; Oh, absolutely.

00:48:19.490 --> 00:48:20.810
The hard part I have is getting through all
the code.

00:48:20.810 --> 00:48:23.410
I've spent so much time just going through
the code and making adjustments.

00:48:23.410 --> 00:48:26.710
I wish I had more time and actually put it
back in.

00:48:26.710 --> 00:48:31.610
In fact today, I just signed the contributor
agreement for Google after all these years.

00:48:31.610 --> 00:48:32.710
&gt;&gt; FERNANDEZ: All right.

00:48:32.710 --> 00:48:34.980
&gt;&gt; So, hopefully you'll be seeing some things.

00:48:34.980 --> 00:48:38.500
But, yeah, it's a lot of code to go through.

00:48:38.500 --> 00:48:39.500
&gt;&gt; FERNANDEZ: Oh, yeah.

00:48:39.500 --> 00:48:40.500
That's great.

00:48:40.500 --> 00:48:45.320
But we're glad to have you as a contributor
and keep asking us questions and contribute

00:48:45.320 --> 00:48:46.320
it to the--to the site.

00:48:46.320 --> 00:48:47.320
We really appreciate it.

00:48:47.320 --> 00:48:49.410
&gt;&gt; RAMAN: And to keep you busy we are writing
all codes.

00:48:49.410 --> 00:48:50.410
&gt;&gt; Yeah, that's good.

00:48:50.410 --> 00:48:51.410
I know.

00:48:51.410 --> 00:48:52.410
I know.

00:48:52.410 --> 00:48:56.510
Now, well, part of the--part of the challenge
with picking your contribution is--to work

00:48:56.510 --> 00:49:01.760
on it how do I not duplicate what's already
been down because I don't know what someone

00:49:01.760 --> 00:49:02.760
is doing it 2:00 in the morning, you know.

00:49:02.760 --> 00:49:03.760
&gt;&gt; FERNANDEZ: Yeah.

00:49:03.760 --> 00:49:04.760
&gt;&gt; BURKHARDT Yeah.

00:49:04.760 --> 00:49:05.760
&gt;&gt; RAMAN: Yes, you don't need to know.

00:49:05.760 --> 00:49:06.760
&gt;&gt; No, there isn't.

00:49:06.760 --> 00:49:07.760
&gt;&gt; FERNANDEZ: Yeah.

00:49:07.760 --> 00:49:08.760
&gt;&gt; So, that's part of it.

00:49:08.760 --> 00:49:09.760
That's part of it.

00:49:09.760 --> 00:49:10.760
&gt;&gt; RAMAN: Let's do it.

00:49:10.760 --> 00:49:11.760
I think just do it and hope you're doing it
better.

00:49:11.760 --> 00:49:12.760
&gt;&gt; VIVERETTE: That's right.

00:49:12.760 --> 00:49:14.770
&gt;&gt; FERNANDEZ: Definitely, you want to the
most and do that.

00:49:14.770 --> 00:49:15.792
&gt;&gt; RAMAN: And you'll probably...

00:49:15.792 --> 00:49:16.792
&gt;&gt; FERNANDEZ: That's a good rule to follow
in our lives.

00:49:16.792 --> 00:49:22.200
&gt;&gt; I'm doing a lot of virtual machine work
right now and down in--down in the guts of

00:49:22.200 --> 00:49:23.260
doubt right now.

00:49:23.260 --> 00:49:31.090
And so, what I'll be looking for is, you have
this virtual machine handle the TalkBack because

00:49:31.090 --> 00:49:33.340
you're dealing--there's a native interface
I assume.

00:49:33.340 --> 00:49:37.580
&gt;&gt; VIVERETTE: Oh, this is actually a great
time to mention that if you turn on TalkBack

00:49:37.580 --> 00:49:38.580
on the emulator...

00:49:38.580 --> 00:49:39.580
&gt;&gt; Uh-hmm.

00:49:39.580 --> 00:49:40.590
&gt;&gt; VIVERETTE: ...It just works.

00:49:40.590 --> 00:49:42.650
So, the emulator has text speech.

00:49:42.650 --> 00:49:43.650
&gt;&gt; Okay.

00:49:43.650 --> 00:49:49.520
&gt;&gt; VIVERETTE: You may need to install TalkBack--does
TalkBack built in to the emulator now?

00:49:49.520 --> 00:49:50.570
&gt;&gt; RAMAN: I don't know.

00:49:50.570 --> 00:49:52.359
&gt;&gt; VIVERETTE: You may need to install TalkBack
separately.

00:49:52.359 --> 00:49:53.359
&gt;&gt; RAMAN: Uh-hmm.

00:49:53.359 --> 00:49:54.359
Yes.

00:49:54.359 --> 00:49:55.359
&gt;&gt; FERNANDEZ: Okay.

00:49:55.359 --> 00:49:56.359
&gt;&gt; VIVERETTE: That's available also on the
eyes-free project site that we mentioned where

00:49:56.359 --> 00:49:58.660
the source code for TalkBack is.

00:49:58.660 --> 00:50:02.420
But if you turn on you can use Touch Exploration
by moving your mouse around the screen.

00:50:02.420 --> 00:50:03.420
&gt;&gt; Yes.

00:50:03.420 --> 00:50:07.700
&gt;&gt; VIVERETTE: You can basically--and actually
that's a great way to test keyboard accessibility.

00:50:07.700 --> 00:50:08.700
&gt;&gt; Yes.

00:50:08.700 --> 00:50:09.700
&gt;&gt; Okay.

00:50:09.700 --> 00:50:10.700
&gt;&gt; VIVERETTE: So, you get a desktop with a
keyboard.

00:50:10.700 --> 00:50:14.830
You open up the emulator and you can use the
arrow keys to move through your application.

00:50:14.830 --> 00:50:19.310
And that works the same way that a hardware
keyboard would on a device like droid.

00:50:19.310 --> 00:50:22.750
&gt;&gt; RAMAN: Alan has mentioned moving the mouse,
let me reticulate that.

00:50:22.750 --> 00:50:28.680
The way Touch Exploration is implemented on
Android is using what we call the--[INDISTINCT]

00:50:28.680 --> 00:50:29.680
pipeline.

00:50:29.680 --> 00:50:34.840
And so, when you move your mouse--point mouse
that generates how it entered and how it exited

00:50:34.840 --> 00:50:35.840
events.

00:50:35.840 --> 00:50:39.820
And that actually walk the figure as generating
when you're doing Touch Exploration.

00:50:39.820 --> 00:50:40.820
&gt;&gt; Okay.

00:50:40.820 --> 00:50:41.820
So, who handle...

00:50:41.820 --> 00:50:42.820
&gt;&gt; RAMAN: So, I don't know...

00:50:42.820 --> 00:50:45.790
&gt;&gt; What part of the OS handles the event--the
actual event?

00:50:45.790 --> 00:50:49.480
Is that--does done on the main thread or are
you passing it off to some other service?

00:50:49.480 --> 00:50:54.580
&gt;&gt; FERNANDEZ: That's probably a little deeper
than we can go...

00:50:54.580 --> 00:50:55.580
&gt;&gt; VIVERETTE: Yeah.

00:50:55.580 --> 00:50:56.580
So, I can go into a 30 minutes explanation
of...

00:50:56.580 --> 00:50:57.580
&gt;&gt; RAMAN: Yes.

00:50:57.580 --> 00:50:58.580
&gt;&gt; No, no, that why I talk about it.

00:50:58.580 --> 00:50:59.580
&gt;&gt; VIVERETTE: I will touch the input system.

00:50:59.580 --> 00:51:01.140
&gt;&gt; RAMAN: It can be done by looking first
core.

00:51:01.140 --> 00:51:06.273
The other floating part if you're playing
with an emulator of--or if, you know, an S2,

00:51:06.273 --> 00:51:07.390
you can also play with Bluetooth keyboards.

00:51:07.390 --> 00:51:11.730
I actually have a little pocket sized Bluetooth
Keyboard that I sometimes use.

00:51:11.730 --> 00:51:16.820
And that keyboard actually has a little touchpad
that access that most.

00:51:16.820 --> 00:51:23.230
And you can actually do touch it's relation
using the things.

00:51:23.230 --> 00:51:24.230
That's actually very cool.

00:51:24.230 --> 00:51:25.530
You can email from your pocket and hold this
keyboard and, you know, Touch Explore your

00:51:25.530 --> 00:51:26.530
phone.

00:51:26.530 --> 00:51:27.530
That is very interesting.

00:51:27.530 --> 00:51:28.530
&gt;&gt; Okay.

00:51:28.530 --> 00:51:29.530
I'll go down--I'll go down and look at the
code that would probably answer my question

00:51:29.530 --> 00:51:30.530
though.

00:51:30.530 --> 00:51:31.530
&gt;&gt; RAMAN: Sounds good.

00:51:31.530 --> 00:51:32.530
Yes.

00:51:32.530 --> 00:51:33.530
&gt;&gt; FERNANDEZ: Sounds great.

00:51:33.530 --> 00:51:34.530
&gt;&gt; RAMAN: Thank you Richard.

00:51:34.530 --> 00:51:35.530
&gt;&gt; FERNANDEZ: All right.

00:51:35.530 --> 00:51:36.530
&gt;&gt; You're welcome.

00:51:36.530 --> 00:51:37.530
Thank you very much.

00:51:37.530 --> 00:51:38.530
&gt;&gt; FERNANDEZ: Great.

00:51:38.530 --> 00:51:39.530
Yeah.

00:51:39.530 --> 00:51:40.530
Thanks for joining us.

00:51:40.530 --> 00:51:41.530
And we're just about out of time.

00:51:41.530 --> 00:51:42.530
So, we're going to wrap up.

00:51:42.530 --> 00:51:43.720
Thanks to Alan and Casey and Raman today for
joining me in telling us all about to how

00:51:43.720 --> 00:51:47.120
to make our applications successful.

00:51:47.120 --> 00:51:53.160
We'll be posting those resources that we mentioned,
project, the application that were demonstrated

00:51:53.160 --> 00:51:55.530
today which includes the upper class for accessibility,
correct?

00:51:55.530 --> 00:51:56.530
&gt;&gt; BURKHARDT: That's right.

00:51:56.530 --> 00:51:59.350
&gt;&gt; FERNANDEZ: And take a look for that on
our Google+ stream.

00:51:59.350 --> 00:52:01.470
And that's it for today.

00:52:01.470 --> 00:52:07.060
We'll be in--we'll be here again next week
to take our general questions around Android

00:52:07.060 --> 00:52:08.060
development.

00:52:08.060 --> 00:52:09.060
So, thanks for joining us.

00:52:09.060 --> 00:52:09.065
We'll see you next week.

