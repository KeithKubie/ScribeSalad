WEBVTT
Kind: captions
Language: en

00:00:03.310 --> 00:00:05.490
LYLA FUJIWARA: At
Google I/O 2017,

00:00:05.490 --> 00:00:07.400
we announced the
Lifecycle library,

00:00:07.400 --> 00:00:10.020
a set of libraries and guidance
for avoiding memory leaks

00:00:10.020 --> 00:00:12.720
and solving common Android
lifecycle challenges.

00:00:12.720 --> 00:00:14.820
The Lifecycle
library has hit 2.0.

00:00:14.820 --> 00:00:17.580
It's also now part of Jetpack
and includes new integrations

00:00:17.580 --> 00:00:18.790
with Databinding.

00:00:18.790 --> 00:00:22.050
This is a tour of the Lifecycle
library's LiveData class.

00:00:22.050 --> 00:00:24.600
LiveData is an observable
data holder class

00:00:24.600 --> 00:00:26.520
that is also lifecycle aware.

00:00:26.520 --> 00:00:27.856
Let's take a look at an example.

00:00:27.856 --> 00:00:29.730
You're going to have
your UI, and then you're

00:00:29.730 --> 00:00:31.710
also going to have this
LiveData object, which

00:00:31.710 --> 00:00:34.740
holds some data that you
want to show on screen.

00:00:34.740 --> 00:00:37.440
The UI observes the
LiveData object.

00:00:37.440 --> 00:00:41.670
This is like saying the UI
wants to be notified of updates.

00:00:41.670 --> 00:00:43.490
Therefore, when the
LiveData changes,

00:00:43.490 --> 00:00:46.140
the UI will get
notified, and then the UI

00:00:46.140 --> 00:00:48.520
can redraw itself
with the new data.

00:00:48.520 --> 00:00:50.640
So in short, LiveData
makes it easy to keep

00:00:50.640 --> 00:00:53.720
what's going on screen
in sync with the data.

00:00:53.720 --> 00:00:55.670
OK, so here's some actual code.

00:00:55.670 --> 00:00:58.765
LiveData objects will usually
be kept in the ViewModel class.

00:00:58.765 --> 00:01:00.890
If you're not sure what a
ViewModel is, no worries.

00:01:00.890 --> 00:01:02.425
Check out the video.

00:01:02.425 --> 00:01:04.550
Let's say you're creating
an activity and ViewModel

00:01:04.550 --> 00:01:06.380
for a user profile.

00:01:06.380 --> 00:01:08.240
You'll have this
user LiveData object

00:01:08.240 --> 00:01:10.040
that holds a User object.

00:01:10.040 --> 00:01:12.020
Now, over in your
activity's onCreate,

00:01:12.020 --> 00:01:14.630
you'll get that LiveData
from the ViewModel class.

00:01:14.630 --> 00:01:16.670
Call observe on the LiveData.

00:01:16.670 --> 00:01:19.040
For the first argument, you're
going to pass in the UI,

00:01:19.040 --> 00:01:20.670
in this case the activity.

00:01:20.670 --> 00:01:22.400
The second argument
is an "observer,"

00:01:22.400 --> 00:01:24.080
which is just a callback.

00:01:24.080 --> 00:01:27.590
Here you will call the
code to update the UI.

00:01:27.590 --> 00:01:29.750
Now you can change the
LiveData by calling

00:01:29.750 --> 00:01:32.030
either setValue or postValue.

00:01:32.030 --> 00:01:34.550
Use setValue if you're
running on the UI thread,

00:01:34.550 --> 00:01:37.550
and then use postValue if you're
running on a background thread.

00:01:37.550 --> 00:01:39.920
When either setValue
or postValue is called,

00:01:39.920 --> 00:01:42.860
the LiveData notifies
active observers.

00:01:42.860 --> 00:01:45.770
If you're using Android
Studio 3.1 or higher,

00:01:45.770 --> 00:01:48.256
LiveData and ViewModels
work with Databinding.

00:01:48.256 --> 00:01:50.630
Usually you're going to go
ahead and bind your View Model

00:01:50.630 --> 00:01:53.180
to your XML layout, which is
explained in the ViewModel

00:01:53.180 --> 00:01:54.200
video.

00:01:54.200 --> 00:01:56.620
Now, after associating your
ViewModel and Databinding

00:01:56.620 --> 00:01:59.150
layout, you just need to
add this single line change

00:01:59.150 --> 00:02:01.220
to have your LiveData
be properly observed

00:02:01.220 --> 00:02:02.930
when bound to the XML.

00:02:02.930 --> 00:02:06.020
You can now include references
in your XML to your ViewModel

00:02:06.020 --> 00:02:08.090
and the LiveData stored with it.

00:02:08.090 --> 00:02:09.770
If you use Databinding,
you're going

00:02:09.770 --> 00:02:11.900
to no longer need to
actually manually set up

00:02:11.900 --> 00:02:12.697
these observers.

00:02:12.697 --> 00:02:14.780
So instead of creating
this LiveData observer code

00:02:14.780 --> 00:02:16.238
that I showed you
before, you could

00:02:16.238 --> 00:02:17.960
remove all that boilerplate.

00:02:17.960 --> 00:02:20.840
Instead, the TextView's
XML references the LiveData

00:02:20.840 --> 00:02:22.130
directly.

00:02:22.130 --> 00:02:24.410
What makes LiveData different
from other observables

00:02:24.410 --> 00:02:26.780
is that it is also
lifecycle aware.

00:02:26.780 --> 00:02:29.890
This means that it understands
whether your UI is on screen,

00:02:29.890 --> 00:02:31.580
offscreen or destroyed.

00:02:31.580 --> 00:02:33.800
LiveData knows
about your UI state

00:02:33.800 --> 00:02:36.290
because you passed it
when you call Observe.

00:02:36.290 --> 00:02:38.900
OK, so here's some benefits
of LiveData's life cycle

00:02:38.900 --> 00:02:39.840
awareness.

00:02:39.840 --> 00:02:42.080
So let's say your
activity is not on screen,

00:02:42.080 --> 00:02:45.140
then your LiveData doesn't
trigger useless UI updates.

00:02:45.140 --> 00:02:47.230
If the activity or
UI gets destroyed,

00:02:47.230 --> 00:02:49.700
then the observation connection
is cleaned up automatically

00:02:49.700 --> 00:02:50.510
by LiveData.

00:02:50.510 --> 00:02:52.220
Thus you'll never
accidentally trigger

00:02:52.220 --> 00:02:54.920
an activity or fragment that
is offscreen or destroyed

00:02:54.920 --> 00:02:56.600
to redraw itself.

00:02:56.600 --> 00:02:59.420
This is possible in part because
of interfaces and classes

00:02:59.420 --> 00:03:01.220
in the Lifecycle
library that are also

00:03:01.220 --> 00:03:03.140
used by framework classes.

00:03:03.140 --> 00:03:05.030
These classes are--

00:03:05.030 --> 00:03:07.580
Lifecycle, which is an object
that represents an Android

00:03:07.580 --> 00:03:09.920
lifecycle and what
state it's in;

00:03:09.920 --> 00:03:12.740
LifecycleOwner, which is an
interface for objects that

00:03:12.740 --> 00:03:15.410
have a lifecycle like
AppCompatActivity

00:03:15.410 --> 00:03:19.160
or an activity fragment; and
finally, LifecycleObserver,

00:03:19.160 --> 00:03:22.310
which is an interface for
observing a lifecycle.

00:03:22.310 --> 00:03:25.550
OK, so LiveData is a
lifecycle observer.

00:03:25.550 --> 00:03:27.110
It abstracts away
the need for you

00:03:27.110 --> 00:03:30.180
to deal directly with activity
or factored lifecycle.

00:03:30.180 --> 00:03:32.180
So those are the basics
of working with LiveData

00:03:32.180 --> 00:03:33.650
and why it's useful.

00:03:33.650 --> 00:03:36.350
I'm going to touch on a
few more complex usages.

00:03:36.350 --> 00:03:39.140
Room is built to work
well with LiveData.

00:03:39.140 --> 00:03:41.840
Room can return LiveData
objects which are automatically

00:03:41.840 --> 00:03:44.960
notified when the database data
changes and have their data

00:03:44.960 --> 00:03:46.880
loaded in a background thread.

00:03:46.880 --> 00:03:48.950
This makes it easy to
have the UI update when

00:03:48.950 --> 00:03:50.027
your database updates.

00:03:50.027 --> 00:03:52.610
You can go ahead and learn more
about Room in the introduction

00:03:52.610 --> 00:03:54.100
to Room video.

00:03:54.100 --> 00:03:56.690
LiveData also provides
transformations, including

00:03:56.690 --> 00:03:59.780
map, switchMap and a class
called MediatorLiveData

00:03:59.780 --> 00:04:02.150
for your own custom
transformations.

00:04:02.150 --> 00:04:04.820
Map lets you apply a function
to the output of LiveData A

00:04:04.820 --> 00:04:08.640
and then propagate the results
downstream to LiveData B.

00:04:08.640 --> 00:04:11.960
For example, you could use
LiveData to take a user object

00:04:11.960 --> 00:04:14.300
and instead output a string
of the user's combined

00:04:14.300 --> 00:04:16.279
first and last name.

00:04:16.279 --> 00:04:18.260
SwitchMap function
transformation

00:04:18.260 --> 00:04:20.660
is a lot like map, but
for mapping functions

00:04:20.660 --> 00:04:23.690
that emit LiveData
instead of values.

00:04:23.690 --> 00:04:26.490
So an example here is if
you have a bunch of users,

00:04:26.490 --> 00:04:28.520
perhaps stored in
a Room database,

00:04:28.520 --> 00:04:30.980
you might have a lookup
function for those users.

00:04:30.980 --> 00:04:34.550
Using switchMap, you'd have
a LiveData for the user ID.

00:04:34.550 --> 00:04:37.340
Whenever the ID changes,
your user lookup function

00:04:37.340 --> 00:04:39.470
would be called with that ID.

00:04:39.470 --> 00:04:42.620
The result LiveData now
references the newly found user

00:04:42.620 --> 00:04:43.220
LiveData.

00:04:43.220 --> 00:04:45.470
OK, so no matter how
many different times you

00:04:45.470 --> 00:04:48.250
call this look up function
and get a different LiveData,

00:04:48.250 --> 00:04:51.920
your UI only needs to observe
the result LiveData once, which

00:04:51.920 --> 00:04:53.344
is the power of switchMap.

00:04:53.344 --> 00:04:55.760
Now, if you want to go ahead
and make your own custom data

00:04:55.760 --> 00:04:57.470
transformations, you
should take a look

00:04:57.470 --> 00:04:59.630
at the MediatorLiveData class.

00:04:59.630 --> 00:05:02.630
MediatorLiveData includes
methods to add and remove

00:05:02.630 --> 00:05:04.520
source LiveData objects.

00:05:04.520 --> 00:05:06.320
You could then combine
and propagate events

00:05:06.320 --> 00:05:08.750
from all these
sources downstream.

00:05:08.750 --> 00:05:10.630
Getting started with
LiveData is simple,

00:05:10.630 --> 00:05:13.040
but there is a lot of
potential for experimentation

00:05:13.040 --> 00:05:15.230
with this lifecycle
aware observable.

00:05:15.230 --> 00:05:17.570
Hopefully this has inspired
you to build something.

00:05:17.570 --> 00:05:20.560
And as always, the
documentation is linked.

