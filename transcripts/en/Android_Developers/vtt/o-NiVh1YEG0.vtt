WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.770
OLIN LAN: Hello, everybody.

00:00:02.770 --> 00:00:05.539
I'm Oli Lan, an engineer
on the Android Wear team.

00:00:05.539 --> 00:00:07.080
TONY FERREIRA: And
I'm Tony Ferreira,

00:00:07.080 --> 00:00:09.410
a designer on Android Wear.

00:00:09.410 --> 00:00:10.970
OLIN LAN: It's great to be here.

00:00:10.970 --> 00:00:13.470
We're really excited to tell
you about the new stuff coming

00:00:13.470 --> 00:00:15.340
to watch faces on Android Wear.

00:00:17.970 --> 00:00:22.970
The watch face is at the heart
of the Android Wear interface.

00:00:22.970 --> 00:00:25.280
Of course, it tells the time.

00:00:25.280 --> 00:00:28.840
And with the thousands of
watch faces on Google Play,

00:00:28.840 --> 00:00:32.860
it's a great way for users
to express their style.

00:00:32.860 --> 00:00:35.260
We added interactivity
last year,

00:00:35.260 --> 00:00:39.520
and the watch face came
to life like never before.

00:00:39.520 --> 00:00:42.770
But the watch face can do more.

00:00:42.770 --> 00:00:45.670
As an always-on screen
that's just a glance away,

00:00:45.670 --> 00:00:49.200
it's a great place to get the
information you care about.

00:00:49.200 --> 00:00:51.770
And that's why we're
introducing the Complications

00:00:51.770 --> 00:00:55.160
API for Android Wear.

00:00:55.160 --> 00:00:58.420
TONY FERREIRA: But first of
all, what are Complications?

00:00:58.420 --> 00:01:00.940
That term comes from
traditional watchmaking.

00:01:00.940 --> 00:01:03.440
And it means, well,
pretty much anything

00:01:03.440 --> 00:01:06.650
that's not telling the time.

00:01:06.650 --> 00:01:09.110
Complications on
mechanical watches

00:01:09.110 --> 00:01:14.040
show things like the date, your
alarm, or phase of the moon.

00:01:14.040 --> 00:01:16.300
So the small dials
you see on this watch,

00:01:16.300 --> 00:01:18.500
they are complications.

00:01:18.500 --> 00:01:21.190
On smartwatches there
are new possibilities,

00:01:21.190 --> 00:01:27.330
like the weather, stock prices,
or events from your calendar.

00:01:27.330 --> 00:01:29.370
OLIN LAN: Many watch
faces on Android Wear

00:01:29.370 --> 00:01:36.270
already include complications,
like Bits from usTwo or Legacy

00:01:36.270 --> 00:01:38.181
from Zuhanden.

00:01:38.181 --> 00:01:40.680
But as it stands,
each watch face

00:01:40.680 --> 00:01:44.040
has to go and get
the data itself.

00:01:44.040 --> 00:01:46.040
That could mean
your watch face has

00:01:46.040 --> 00:01:48.860
to find its own source
of weather data,

00:01:48.860 --> 00:01:53.610
or finance data, or anything
else you want to show.

00:01:53.610 --> 00:01:56.950
And if the user wants to see
something you haven't included,

00:01:56.950 --> 00:01:59.740
they're out of luck.

00:01:59.740 --> 00:02:02.040
Or maybe you're not a
watch face developer,

00:02:02.040 --> 00:02:05.560
but your app has data that would
be great on the watch face,

00:02:05.560 --> 00:02:09.699
like fitness stats
or finance info.

00:02:09.699 --> 00:02:12.140
As it stands, there's
no way to do this other

00:02:12.140 --> 00:02:14.460
than building your
own watch face

00:02:14.460 --> 00:02:16.710
or making deals with individual
watch face developers.

00:02:19.500 --> 00:02:22.270
The Complications
API for Android Wear

00:02:22.270 --> 00:02:24.970
changes all of this.

00:02:24.970 --> 00:02:30.087
Apps using the API will be
data providers or watch faces.

00:02:32.930 --> 00:02:36.630
If you build a watch face
using the Complications API,

00:02:36.630 --> 00:02:40.170
then you get access to a whole
ecosystem of data providers.

00:02:40.170 --> 00:02:42.920
Here are just some of the
partners already working

00:02:42.920 --> 00:02:45.910
on using the API.

00:02:45.910 --> 00:02:48.520
And if you build
a data provider,

00:02:48.520 --> 00:02:54.620
you can get your data on a
whole range of watch faces.

00:02:54.620 --> 00:02:58.040
Now on Google Play,
there's a huge range

00:02:58.040 --> 00:02:59.900
of styles of watch faces.

00:02:59.900 --> 00:03:03.400
So there's no way
that just one style,

00:03:03.400 --> 00:03:08.150
one visual style of complication
would fit on every watch face.

00:03:08.150 --> 00:03:11.460
Because of that, with
the Complications API,

00:03:11.460 --> 00:03:14.550
the watch face gets to decide
how to render the data.

00:03:14.550 --> 00:03:17.020
It gets to choose the visual
style, the colors, the fonts,

00:03:17.020 --> 00:03:18.080
etc.

00:03:18.080 --> 00:03:20.590
The data provided just
provides raw fields

00:03:20.590 --> 00:03:25.200
like strings, text,
images, and numbers.

00:03:25.200 --> 00:03:27.416
Before we get into the
details of the API though,

00:03:27.416 --> 00:03:29.040
Tony is going to go
through some things

00:03:29.040 --> 00:03:32.650
to think about when
designing for complications.

00:03:32.650 --> 00:03:35.246
TONY FERREIRA: Thanks, Oli.

00:03:35.246 --> 00:03:37.870
So some of you may have already
checked out the Material design

00:03:37.870 --> 00:03:39.600
spec for wearables.

00:03:39.600 --> 00:03:41.490
And there you'll find
a ton of useful things

00:03:41.490 --> 00:03:46.164
to help developers and designers
design for Android Wear.

00:03:46.164 --> 00:03:48.080
I'd like to highlight
some of the things, some

00:03:48.080 --> 00:03:50.246
of those design principles
that you'll find in there

00:03:50.246 --> 00:03:54.080
and how they apply
to complications.

00:03:54.080 --> 00:03:56.610
So the first design
principle is glanceable,

00:03:56.610 --> 00:04:00.100
making things clear
and understandable.

00:04:00.100 --> 00:04:04.480
For complications, small, easy
to read snippets of information

00:04:04.480 --> 00:04:06.240
work best.

00:04:06.240 --> 00:04:09.130
It's very important that the
information on the watch face

00:04:09.130 --> 00:04:13.360
is organized with a clear
hierarchy, large enough

00:04:13.360 --> 00:04:16.860
to read easily, and
high enough in contrast.

00:04:16.860 --> 00:04:20.820
Users shouldn't need to
squint to read the UI.

00:04:20.820 --> 00:04:23.720
The second design
principle is time saving,

00:04:23.720 --> 00:04:27.670
getting the information you want
quickly without any roadblocks.

00:04:27.670 --> 00:04:29.530
Instead of navigating
to your favorite apps

00:04:29.530 --> 00:04:31.470
to find the
information you want,

00:04:31.470 --> 00:04:33.560
with the introduction
of complications,

00:04:33.560 --> 00:04:36.810
it's right there
on the watch face.

00:04:36.810 --> 00:04:38.780
Complications are also tapable.

00:04:38.780 --> 00:04:42.090
So you can deep link to your
favorite contact or upcoming

00:04:42.090 --> 00:04:43.990
calendar event.

00:04:43.990 --> 00:04:46.150
And complications
are also persistent,

00:04:46.150 --> 00:04:49.230
there whenever you need them.

00:04:49.230 --> 00:04:52.500
The third design
principle is consistent.

00:04:52.500 --> 00:04:54.540
Complications should have
a healthy relationship

00:04:54.540 --> 00:04:56.440
with the watch face.

00:04:56.440 --> 00:04:59.990
As Oli just said, with
Complications on Android Wear,

00:04:59.990 --> 00:05:03.360
the watch face decides how the
complications are rendered.

00:05:03.360 --> 00:05:06.230
So they feel part
of the same family.

00:05:06.230 --> 00:05:08.410
Consider aligning the
style of the complications

00:05:08.410 --> 00:05:10.930
with the watch face.

00:05:10.930 --> 00:05:15.680
Oli is now going to talk you
through the complication types.

00:05:15.680 --> 00:05:17.370
OLIN LAN: Thanks, Tony.

00:05:17.370 --> 00:05:22.470
So complications are all about
data, supplied by provider apps

00:05:22.470 --> 00:05:25.670
and displayed on watch faces.

00:05:25.670 --> 00:05:30.090
This could include numerical
data like your battery level,

00:05:30.090 --> 00:05:33.600
text like the title
of your next meeting,

00:05:33.600 --> 00:05:38.060
or images like an
icon or a profile pic.

00:05:38.060 --> 00:05:42.240
Not every type of data will
fit on every watch face.

00:05:42.240 --> 00:05:44.340
There might only be
space for a small icon

00:05:44.340 --> 00:05:46.990
or a short bit of text.

00:05:46.990 --> 00:05:49.770
Or you might want to use
numerical data without having

00:05:49.770 --> 00:05:52.930
to show text or images.

00:05:52.930 --> 00:05:56.450
So watch faces need to
say what they can display.

00:05:56.450 --> 00:06:00.220
And data providers need to
say what they can supply.

00:06:00.220 --> 00:06:05.380
To help with this, we've defined
a number of complication types.

00:06:05.380 --> 00:06:08.250
Complication types
determine what kinds of data

00:06:08.250 --> 00:06:09.800
are included.

00:06:09.800 --> 00:06:12.920
There's usually one field that's
the key piece of information.

00:06:12.920 --> 00:06:15.160
And we've named the
types after that field.

00:06:15.160 --> 00:06:18.916
So here you see examples
of the short text type.

00:06:18.916 --> 00:06:20.540
These are all short
text complications.

00:06:20.540 --> 00:06:22.720
But as you can see there
are optional elements.

00:06:22.720 --> 00:06:25.150
There may be an icon
or a second string.

00:06:25.150 --> 00:06:28.460
But the most important value
is contained in the short text

00:06:28.460 --> 00:06:30.980
field.

00:06:30.980 --> 00:06:33.400
If you're a data
provider, you can

00:06:33.400 --> 00:06:35.750
choose which of the
optional fields to include.

00:06:35.750 --> 00:06:37.700
But a short text
complication must always

00:06:37.700 --> 00:06:40.760
include the short text field.

00:06:40.760 --> 00:06:44.000
If you're building a watch face
and you support short text,

00:06:44.000 --> 00:06:48.290
you need to consider
all of these variations.

00:06:48.290 --> 00:06:50.020
Here are some other examples.

00:06:50.020 --> 00:06:53.100
You might not need any text
to convey the information.

00:06:53.100 --> 00:06:56.760
Then maybe the icon
type is enough.

00:06:56.760 --> 00:07:00.080
Or, if you have numerical
data within bounds

00:07:00.080 --> 00:07:03.180
like a percentage, then
the range value type

00:07:03.180 --> 00:07:06.230
could be for you.

00:07:06.230 --> 00:07:10.330
We also have a few other types.

00:07:10.330 --> 00:07:13.910
You'll notice that we have
bot icon and small image.

00:07:13.910 --> 00:07:16.760
The difference is that
images for the icon field

00:07:16.760 --> 00:07:18.590
should be tintable
by the watch face.

00:07:18.590 --> 00:07:21.600
They should be single color
with a transparent background.

00:07:21.600 --> 00:07:24.910
This allows the watch face to
fit it better to its style.

00:07:24.910 --> 00:07:27.690
So if you are building a
watch face where full color

00:07:27.690 --> 00:07:31.130
images won't match
the style, then you

00:07:31.130 --> 00:07:32.590
can support the icon type.

00:07:32.590 --> 00:07:35.090
But you might not want to
support the small image type,

00:07:35.090 --> 00:07:36.852
where images may be full color.

00:07:39.407 --> 00:07:41.740
So when you're thinking about
the different complication

00:07:41.740 --> 00:07:44.100
types, if you are
building a provider,

00:07:44.100 --> 00:07:47.030
think about the different
forms your data can take.

00:07:47.030 --> 00:07:48.530
And if you're
building complications

00:07:48.530 --> 00:07:51.547
into a watch face, think
about how many of the types

00:07:51.547 --> 00:07:52.380
you want to support.

00:07:55.400 --> 00:07:58.260
Now back to Tony to talk about
some more guidelines for what

00:07:58.260 --> 00:08:00.539
face developers.

00:08:00.539 --> 00:08:02.580
TONY FERREIRA: OK, so I
want to talk a little bit

00:08:02.580 --> 00:08:04.290
about the things
you should consider

00:08:04.290 --> 00:08:06.720
when designing complications.

00:08:06.720 --> 00:08:08.950
However, bear in mind
there isn't a one size

00:08:08.950 --> 00:08:11.110
fits all solution to this.

00:08:11.110 --> 00:08:14.180
We have a diverse collection
of watch faces on the platform.

00:08:14.180 --> 00:08:16.420
And we think it's important
that complications

00:08:16.420 --> 00:08:19.790
are flexible enough to
mirror that diversity.

00:08:19.790 --> 00:08:23.045
So please use these guidelines
as a starting point.

00:08:23.045 --> 00:08:24.920
But if you feel your
watch face would benefit

00:08:24.920 --> 00:08:27.211
from deviating from these
guidelines, then by all means

00:08:27.211 --> 00:08:30.580
please do so.

00:08:30.580 --> 00:08:33.539
Complication should never
conflict with the surrounding

00:08:33.539 --> 00:08:35.480
objects on the watch face.

00:08:35.480 --> 00:08:39.110
For more traditional watch
face layouts, as shown here,

00:08:39.110 --> 00:08:42.950
these red areas, in general,
shouldn't have complications.

00:08:42.950 --> 00:08:47.160
As it will be a conflict with
other parts of the watch face.

00:08:47.160 --> 00:08:49.530
Give your complications
a bit of space,

00:08:49.530 --> 00:08:51.920
so they have room
to breathe as well.

00:08:51.920 --> 00:08:54.910
And if possible, staying true to
the alignment of the watch face

00:08:54.910 --> 00:08:58.110
will also help you
achieve better balance.

00:08:58.110 --> 00:09:00.070
So if you have a
center aligned clock,

00:09:00.070 --> 00:09:02.360
it might make sense to center
align the complications

00:09:02.360 --> 00:09:02.860
as well.

00:09:05.660 --> 00:09:08.190
Complications can be
rendered however you wish.

00:09:08.190 --> 00:09:10.860
Though you might want
to give your data

00:09:10.860 --> 00:09:14.270
a little more protection and
house them in a container.

00:09:14.270 --> 00:09:16.260
So we found these
form factors work well

00:09:16.260 --> 00:09:18.610
with the various data types.

00:09:18.610 --> 00:09:28.070
We have circle, square,
pill, and rectangle.

00:09:28.070 --> 00:09:32.270
And bear in mind, the size
and form of these containers

00:09:32.270 --> 00:09:36.900
decide what data types
can and can't be rendered.

00:09:36.900 --> 00:09:38.870
And containers are optional.

00:09:38.870 --> 00:09:39.800
Sometimes they help.

00:09:39.800 --> 00:09:41.200
Sometimes they don't.

00:09:41.200 --> 00:09:44.120
But the important thing to
remember, as a watch face

00:09:44.120 --> 00:09:46.270
developer, is you have
the freedom to choose.

00:09:49.877 --> 00:09:51.960
Building a strong relationship
with the watch face

00:09:51.960 --> 00:09:54.095
is also very important.

00:09:54.095 --> 00:09:55.470
You don't want
your complications

00:09:55.470 --> 00:09:57.650
to seem like an afterthought.

00:09:57.650 --> 00:10:00.560
So here are some
things to consider.

00:10:00.560 --> 00:10:02.970
Use color to tint the data.

00:10:02.970 --> 00:10:07.030
This will help create better
harmony with the watch face.

00:10:07.030 --> 00:10:09.140
Decide whether your
complications need containers

00:10:09.140 --> 00:10:10.350
or not.

00:10:10.350 --> 00:10:12.290
You can see in this
example, in the middle,

00:10:12.290 --> 00:10:14.080
we've removed the
containers just

00:10:14.080 --> 00:10:16.730
to help the complications better
integrate into the watch face.

00:10:19.330 --> 00:10:22.060
And play around with scale.

00:10:22.060 --> 00:10:25.320
This will help you achieve
better visual hierarchy.

00:10:25.320 --> 00:10:27.380
But most importantly,
on top of all that,

00:10:27.380 --> 00:10:28.408
just have fun with them.

00:10:28.408 --> 00:10:29.907
And don't be scared
to get creative.

00:10:33.910 --> 00:10:36.710
You can have multiple
complications on a watch face.

00:10:36.710 --> 00:10:38.770
This is awesome
for those of us who

00:10:38.770 --> 00:10:42.620
want to surface lots of data.

00:10:42.620 --> 00:10:45.250
Here you can see we've
removed the containers

00:10:45.250 --> 00:10:46.150
to create more space.

00:10:46.150 --> 00:10:48.300
And we can easily fit
eight complications

00:10:48.300 --> 00:10:50.270
on a single watch face.

00:10:50.270 --> 00:10:53.570
If multiple complications is a
direction you wish to go down,

00:10:53.570 --> 00:10:56.300
just try to make sure that
things don't get too cluttered

00:10:56.300 --> 00:10:57.676
and the UI remains glanceable.

00:11:00.250 --> 00:11:04.010
The Complications API can also
be used as a creative tool.

00:11:04.010 --> 00:11:06.010
With the ranged
value data type, you

00:11:06.010 --> 00:11:10.130
can abstract that data
whichever way you like.

00:11:10.130 --> 00:11:12.120
So in the example,
we've shown here,

00:11:12.120 --> 00:11:14.979
we display your step count goal.

00:11:14.979 --> 00:11:16.520
Throughout the day,
as you get closer

00:11:16.520 --> 00:11:18.310
to reaching your
step count goal,

00:11:18.310 --> 00:11:21.220
the graphic in the
background also updates.

00:11:21.220 --> 00:11:23.220
Presenting the
data like this, in

00:11:23.220 --> 00:11:25.900
an unconventional
and abstract way,

00:11:25.900 --> 00:11:28.491
opens the door for more fun
and engaging watch faces.

00:11:31.260 --> 00:11:33.900
And just to finish,
here are a few examples

00:11:33.900 --> 00:11:36.320
of implemented
complications designed

00:11:36.320 --> 00:11:39.100
by our creative partners usTwo.

00:11:39.100 --> 00:11:40.910
In the first example
here, you can

00:11:40.910 --> 00:11:44.400
see they've kept things simple
and find a straightforward way

00:11:44.400 --> 00:11:47.960
of adding complications to
a preexisting watch face,

00:11:47.960 --> 00:11:50.060
removing containers
and tinting the data.

00:11:52.860 --> 00:11:56.170
The second example is
a little more bespoke.

00:11:56.170 --> 00:11:57.760
They've used their
creative license

00:11:57.760 --> 00:12:00.620
and played around with things
like the layout and the form

00:12:00.620 --> 00:12:01.920
factors.

00:12:01.920 --> 00:12:03.900
This helps better
align the complications

00:12:03.900 --> 00:12:05.652
with the watch face aesthetic.

00:12:08.290 --> 00:12:11.370
In the last example, we have had
some fun with the range value

00:12:11.370 --> 00:12:15.120
data type, creating a really
cool generative abstract

00:12:15.120 --> 00:12:16.700
design.

00:12:16.700 --> 00:12:19.610
In this example, you can
imagine your daily step count

00:12:19.610 --> 00:12:22.644
or battery level
being represented.

00:12:22.644 --> 00:12:24.060
I'll now hand you
over to Oli, who

00:12:24.060 --> 00:12:27.580
is going to talk you through
the details of the API.

00:12:27.580 --> 00:12:30.360
OLIN LAN: Thanks, Tony.

00:12:30.360 --> 00:12:35.210
OK, so let's take a look at
how this all fits together.

00:12:35.210 --> 00:12:39.120
Android Wear manages the flow
of data between data providers

00:12:39.120 --> 00:12:41.410
and watch faces.

00:12:41.410 --> 00:12:43.540
When data is needed
for a complication,

00:12:43.540 --> 00:12:45.780
Android Wear will
send an update request

00:12:45.780 --> 00:12:51.130
to the data provider asking
for a specific type of data.

00:12:51.130 --> 00:12:54.340
The provider builds a
complication data object

00:12:54.340 --> 00:12:57.550
of that type with
the required fields

00:12:57.550 --> 00:13:00.890
and sends it back to Wear.

00:13:00.890 --> 00:13:03.470
Android Wear then forwards
that onto the watch face,

00:13:03.470 --> 00:13:07.820
which can then include
it when it renders.

00:13:07.820 --> 00:13:09.820
Android Wear also
provides the UI

00:13:09.820 --> 00:13:12.170
that allows users
to choose providers

00:13:12.170 --> 00:13:13.570
for each complication.

00:13:13.570 --> 00:13:16.090
And we'll talk
about that in a bit.

00:13:16.090 --> 00:13:17.960
But now let's take
a look at what you

00:13:17.960 --> 00:13:20.877
need to do to add
complications to a watch face.

00:13:23.860 --> 00:13:25.650
So first of all,
you need to decide

00:13:25.650 --> 00:13:27.900
how many complications
to include

00:13:27.900 --> 00:13:31.530
and what types to
support in each one.

00:13:31.530 --> 00:13:33.050
So, for this example,
let's say you

00:13:33.050 --> 00:13:37.970
want to include a small round
complication on the right.

00:13:37.970 --> 00:13:42.320
Now in that space we
could support short text.

00:13:42.320 --> 00:13:46.180
We could also support icon.

00:13:46.180 --> 00:13:51.520
And there's also enough space
there to show a ranged value.

00:13:51.520 --> 00:13:53.720
Now in that space we
could, if we wanted,

00:13:53.720 --> 00:13:55.090
support small image as well.

00:13:55.090 --> 00:13:59.630
But let's say for this
example that we don't want to.

00:13:59.630 --> 00:14:01.450
Now let's say we
also want to include

00:14:01.450 --> 00:14:04.590
a complication at the bottom.

00:14:04.590 --> 00:14:09.100
This one could support the
same types as the first one.

00:14:09.100 --> 00:14:12.720
But there's also enough
space to make this one wider.

00:14:12.720 --> 00:14:16.150
So it could support
the long text type.

00:14:16.150 --> 00:14:18.510
Note that we consider this
to be the same complication.

00:14:18.510 --> 00:14:22.940
Even though it's a different
shape, depending on the type.

00:14:22.940 --> 00:14:25.630
So to summarizes, these
are the types supported

00:14:25.630 --> 00:14:28.967
by each of those complications.

00:14:28.967 --> 00:14:31.050
One more thing, you need
to give each complication

00:14:31.050 --> 00:14:36.190
a numerical ID so that you can
refer to it with the system.

00:14:36.190 --> 00:14:38.350
That's chosen by the watch face.

00:14:38.350 --> 00:14:40.730
We call it the watch
face complication ID,

00:14:40.730 --> 00:14:44.300
and it can be any integer.

00:14:44.300 --> 00:14:47.710
OK, so next you need
a way for the user

00:14:47.710 --> 00:14:49.860
to choose providers
for each complication.

00:14:53.060 --> 00:14:54.590
As I mentioned
earlier, Android Wear

00:14:54.590 --> 00:14:57.470
provides the UI to
choose a provider

00:14:57.470 --> 00:14:59.700
for a particular complication.

00:14:59.700 --> 00:15:02.520
But the rest of the
UI is up to you.

00:15:02.520 --> 00:15:05.490
So what we're showing
here on the slide

00:15:05.490 --> 00:15:08.770
is a basic list that could be
part of the watch faces config

00:15:08.770 --> 00:15:09.270
activity.

00:15:09.270 --> 00:15:11.190
It's the watch
face's own settings.

00:15:11.190 --> 00:15:15.450
So this screen is not
provided by the system.

00:15:15.450 --> 00:15:17.980
So when the user taps
on item in this list,

00:15:17.980 --> 00:15:23.280
the watch face needs to launch
that system provider chooser.

00:15:23.280 --> 00:15:24.460
Let's look at some code.

00:15:24.460 --> 00:15:28.930
So, in order to do that, you
use this support library method

00:15:28.930 --> 00:15:30.200
to get hold of an intent.

00:15:30.200 --> 00:15:31.658
That's
createProviderChooserIntent.

00:15:33.830 --> 00:15:36.880
You pass in the watch
face component name.

00:15:36.880 --> 00:15:39.730
That's the package and class
name of your watch face.

00:15:39.730 --> 00:15:42.360
That's just how you refer to
your watch face to the system.

00:15:42.360 --> 00:15:45.500
And you also pass in the
watch face complication

00:15:45.500 --> 00:15:49.460
ID for the complication
that is being configured.

00:15:49.460 --> 00:15:53.120
So that's the number
we chose earlier.

00:15:53.120 --> 00:15:59.300
You then pass in the types
supported by that complication.

00:15:59.300 --> 00:16:01.460
In this list, the
order doesn't matter.

00:16:01.460 --> 00:16:03.050
You list them in
order of preference,

00:16:03.050 --> 00:16:05.870
with the most
preferred coming first.

00:16:05.870 --> 00:16:08.760
In this example, we've put
ranged value at the top.

00:16:08.760 --> 00:16:10.760
That's because that
type conveys the most

00:16:10.760 --> 00:16:11.960
information to the user.

00:16:11.960 --> 00:16:13.210
So that's often a good choice.

00:16:13.210 --> 00:16:16.111
And that's a good way
to think about this.

00:16:16.111 --> 00:16:16.610
OK.

00:16:16.610 --> 00:16:18.030
So then when you
have the intent,

00:16:18.030 --> 00:16:21.820
you call
startActivityforResult to show

00:16:21.820 --> 00:16:24.310
the system provide chooser.

00:16:24.310 --> 00:16:27.960
So, when the user taps
on an item in this list,

00:16:27.960 --> 00:16:31.030
the system provider
choose is shown.

00:16:31.030 --> 00:16:34.950
Now when the user chooses
a provider in this UI,

00:16:34.950 --> 00:16:37.040
it gets setup automatically.

00:16:37.040 --> 00:16:40.510
You don't need to
do anything else.

00:16:40.510 --> 00:16:43.080
OK, so to show the data,
what you need to do

00:16:43.080 --> 00:16:44.660
is tell the system
that your watch

00:16:44.660 --> 00:16:46.560
face is ready to receive it.

00:16:46.560 --> 00:16:48.820
So let's move into
the watch face service

00:16:48.820 --> 00:16:52.460
itself, specifically the engine.

00:16:52.460 --> 00:16:56.710
So what you need to do is
call setActiveComplications,

00:16:56.710 --> 00:16:59.180
and pass in the watch
face complication

00:16:59.180 --> 00:17:03.690
IDs for the complications
that are ready.

00:17:03.690 --> 00:17:08.639
Here we're showing in
onCreate of the engine.

00:17:08.639 --> 00:17:10.180
That's usually a
good place to do it.

00:17:10.180 --> 00:17:12.250
But you can call this
method from elsewhere.

00:17:12.250 --> 00:17:14.919
For example, if the active
complications change.

00:17:17.450 --> 00:17:22.700
Once you've done that, you will
start to receive data in calls

00:17:22.700 --> 00:17:25.839
to the on complication
data update method.

00:17:28.680 --> 00:17:31.680
The data will come with the
watch face complication ID

00:17:31.680 --> 00:17:34.160
that it relates to.

00:17:34.160 --> 00:17:36.340
Now, you'll only receive
data when it changes.

00:17:36.340 --> 00:17:39.880
So you'll have to hold onto
the complication data object.

00:17:39.880 --> 00:17:43.950
And any images, such as icons,
should be loaded asynchronously

00:17:43.950 --> 00:17:46.980
and be sure to catch them.

00:17:46.980 --> 00:17:49.050
Now once you've got the
data, it's up to you

00:17:49.050 --> 00:17:51.380
how to incorporate it
into your watch face.

00:17:51.380 --> 00:17:52.880
But before rendering
it, you need

00:17:52.880 --> 00:17:56.030
to check if the data
is still active.

00:17:56.030 --> 00:17:59.860
Some complication data is only
valid until a certain time.

00:17:59.860 --> 00:18:02.940
So for example, it might be
for a next event complication.

00:18:02.940 --> 00:18:05.790
And then the piece of
data will only be relevant

00:18:05.790 --> 00:18:08.910
up until the end of that event.

00:18:08.910 --> 00:18:12.180
You check it using
this method, the

00:18:12.180 --> 00:18:14.580
is active method on
the complication data.

00:18:14.580 --> 00:18:16.550
So you just pass
in the current time

00:18:16.550 --> 00:18:19.130
when you're drawing a
frame to see if you still

00:18:19.130 --> 00:18:21.937
need to draw that data.

00:18:21.937 --> 00:18:23.520
There's one other
thing you should do,

00:18:23.520 --> 00:18:27.730
which is to check to see if
complications are tapped on.

00:18:27.730 --> 00:18:30.200
You do this using the
interactive watch face's APIs

00:18:30.200 --> 00:18:32.430
that we announced last year.

00:18:32.430 --> 00:18:37.310
So that is by implementing
onTap command.

00:18:37.310 --> 00:18:39.540
If a complication is
tapped on, then you

00:18:39.540 --> 00:18:43.570
need to check the complication
data to see if it specifies

00:18:43.570 --> 00:18:47.360
a tap action pending intent.

00:18:47.360 --> 00:18:49.890
If there is one, you need
to fire that intent when

00:18:49.890 --> 00:18:52.300
the computation is tapped on.

00:18:52.300 --> 00:18:54.870
This allows deep linking
from the complication

00:18:54.870 --> 00:18:56.832
straight into a
relevant activity.

00:19:00.528 --> 00:19:03.510
OK, so that's how
to add complications

00:19:03.510 --> 00:19:05.520
to your watch face.

00:19:05.520 --> 00:19:08.360
One important tip that goes
for watch phase development

00:19:08.360 --> 00:19:10.940
in general, but particularly
for complications,

00:19:10.940 --> 00:19:14.730
is minimize the work you
do in every draw call,

00:19:14.730 --> 00:19:18.620
especially if you're drawing
more than once a second.

00:19:18.620 --> 00:19:22.020
Avoid object creation in
On Draw wherever possible.

00:19:22.020 --> 00:19:24.590
As that can lead to a lot of
garbage collection and, hence,

00:19:24.590 --> 00:19:27.690
poor performance.

00:19:27.690 --> 00:19:31.920
OK, so now let's take a look
at how to build a complication

00:19:31.920 --> 00:19:32.645
data provider.

00:19:35.950 --> 00:19:38.600
A data provider is a service.

00:19:38.600 --> 00:19:42.280
And to create one, you need to
extend complication provider

00:19:42.280 --> 00:19:44.643
service from the
support library.

00:19:47.290 --> 00:19:51.155
This class has one abstract
method that you must implement.

00:19:51.155 --> 00:19:55.240
That is On Complication Updates.

00:19:55.240 --> 00:19:59.480
This method is called whenever
the system wants data from you.

00:19:59.480 --> 00:20:02.230
So it will be called
when a complication using

00:20:02.230 --> 00:20:03.910
your provider is activated.

00:20:03.910 --> 00:20:06.100
By which I mean, when
the watch face calls

00:20:06.100 --> 00:20:08.560
Set Active Complications.

00:20:08.560 --> 00:20:11.020
And it will also be called
when your provider is

00:20:11.020 --> 00:20:15.780
chosen for a complication
that's already active.

00:20:15.780 --> 00:20:18.140
It can also be called
with a certain frequency,

00:20:18.140 --> 00:20:21.840
such as every hour, if
that's what you want.

00:20:21.840 --> 00:20:24.750
And it's also possible
to trigger updates

00:20:24.750 --> 00:20:26.770
if you need a push style.

00:20:26.770 --> 00:20:28.970
For example, if you
have a messaging app,

00:20:28.970 --> 00:20:32.000
and you want to update a
complication when a message

00:20:32.000 --> 00:20:34.930
arrives, you could do this.

00:20:34.930 --> 00:20:37.330
If you want more information
on that then check out

00:20:37.330 --> 00:20:41.090
the provider update request
class in the previous support

00:20:41.090 --> 00:20:43.440
library.

00:20:43.440 --> 00:20:46.560
OK, so let's take a look
at an example of how you

00:20:46.560 --> 00:20:48.050
might implement this method.

00:20:48.050 --> 00:20:52.030
So you'll see that one of
the parameters is the type.

00:20:52.030 --> 00:20:55.370
That's the complication
type that's required.

00:20:55.370 --> 00:20:58.320
And the first thing we're
going to do is check that.

00:20:58.320 --> 00:21:01.130
Now in this example, we're only
going to support short text.

00:21:01.130 --> 00:21:02.880
In a real world example
you would probably

00:21:02.880 --> 00:21:04.612
support more than one type.

00:21:07.920 --> 00:21:11.750
So first thing now is we start
building a complication data

00:21:11.750 --> 00:21:17.210
object of that type,
type short text.

00:21:17.210 --> 00:21:19.250
And now we're setting
the short text

00:21:19.250 --> 00:21:21.976
field, which is the required
field for this type.

00:21:21.976 --> 00:21:26.120
And we do it assessing it
to a simple string, "hello."

00:21:26.120 --> 00:21:28.890
You'll notice that it's wrapped
here is a complication text

00:21:28.890 --> 00:21:29.736
object.

00:21:29.736 --> 00:21:33.990
All of the set methods for
text in complication data

00:21:33.990 --> 00:21:37.070
take one of these
complication text objects.

00:21:37.070 --> 00:21:41.100
It can just be a wrapper for
simple string or char sequence.

00:21:41.100 --> 00:21:43.080
It can also be used
for other things.

00:21:43.080 --> 00:21:44.932
And we'll talk about
that a bit later.

00:21:48.030 --> 00:21:51.390
OK, so we're also going
to specify an icon.

00:21:51.390 --> 00:21:55.190
That's an optional
field for short text.

00:21:55.190 --> 00:21:58.860
All of the image set methods
for complication data

00:21:58.860 --> 00:22:01.840
use the icon class from
the Android framework.

00:22:01.840 --> 00:22:03.810
That allows it to
be either a wrapper

00:22:03.810 --> 00:22:06.110
for a resource from
your application,

00:22:06.110 --> 00:22:08.590
a drawable resource.

00:22:08.590 --> 00:22:12.110
Or it could also be a bitmap.

00:22:12.110 --> 00:22:15.370
However, as I mentioned
earlier, the icon field images

00:22:15.370 --> 00:22:16.740
should always be tintable.

00:22:16.740 --> 00:22:20.380
They should be single color
with a transparent background.

00:22:20.380 --> 00:22:25.070
And we strongly recommend you
use vector drawables for this.

00:22:25.070 --> 00:22:28.670
That's because the watch
face could draw the icon

00:22:28.670 --> 00:22:29.670
at different sizes.

00:22:29.670 --> 00:22:32.242
And using a vector will
allow it to resize cleanly.

00:22:35.170 --> 00:22:37.590
OK, so that completes
the complication data

00:22:37.590 --> 00:22:39.990
object for this example.

00:22:39.990 --> 00:22:43.250
All you need to do next is
send that data to the system.

00:22:43.250 --> 00:22:45.720
And you do that using
the complication manager

00:22:45.720 --> 00:22:48.310
object, which is passed
in as a parameter

00:22:48.310 --> 00:22:49.688
to on complication update.

00:22:53.590 --> 00:22:56.460
OK, there are two other
methods that you can optionally

00:22:56.460 --> 00:22:58.050
implement.

00:22:58.050 --> 00:23:02.579
They are,
onComplicationActivated

00:23:02.579 --> 00:23:03.620
onComplicationDeactivate.

00:23:07.520 --> 00:23:10.880
Complications are activated when
the watch face calls Set Active

00:23:10.880 --> 00:23:12.060
Complications.

00:23:12.060 --> 00:23:14.720
And they are deactivated
either by another call

00:23:14.720 --> 00:23:17.940
to Set Active Complications
with different IDs

00:23:17.940 --> 00:23:19.918
or when the user
changes watch face.

00:23:23.060 --> 00:23:25.760
Now, as a service,
your provider has

00:23:25.760 --> 00:23:27.332
to be declared in the manifest.

00:23:27.332 --> 00:23:31.180
And that's also where you use
metadata to declare things

00:23:31.180 --> 00:23:35.470
like what types you can
support and what update period

00:23:35.470 --> 00:23:38.180
you would like, if any.

00:23:38.180 --> 00:23:40.879
Here, with the supported types,
the order does not matter.

00:23:40.879 --> 00:23:42.670
And that's because, as
I mentioned earlier,

00:23:42.670 --> 00:23:45.880
the watch face gets to decide
the order of preference

00:23:45.880 --> 00:23:49.160
for any particular complication.

00:23:49.160 --> 00:23:52.060
Now for the update period, be
aware that the update period

00:23:52.060 --> 00:23:54.614
is not guaranteed.

00:23:54.614 --> 00:23:55.530
We do apply a minimum.

00:23:55.530 --> 00:23:57.040
The system applies a minimum.

00:23:57.040 --> 00:23:58.830
So you should think
in terms of minutes

00:23:58.830 --> 00:24:03.860
or longer, not seconds,
particularly in ambient mode

00:24:03.860 --> 00:24:05.990
or when the device
isn't being worn,

00:24:05.990 --> 00:24:10.080
update requests might
come less frequently.

00:24:10.080 --> 00:24:13.680
Try to make the update period as
long as is reasonably possible.

00:24:13.680 --> 00:24:17.960
Getting updates too often
could impact battery life.

00:24:17.960 --> 00:24:21.130
If your provider doesn't
need regular updates at all,

00:24:21.130 --> 00:24:23.060
then you can just
set this to zero.

00:24:23.060 --> 00:24:25.600
And then you won't get any
calls beyond the initial one.

00:24:28.560 --> 00:24:30.940
Now one example
where you might think

00:24:30.940 --> 00:24:32.960
you want to update
every minute is

00:24:32.960 --> 00:24:34.920
where you are displaying
something related

00:24:34.920 --> 00:24:37.770
to the time on the watch face.

00:24:37.770 --> 00:24:41.320
So here you can see
two complications where

00:24:41.320 --> 00:24:43.790
the text changes every minute.

00:24:43.790 --> 00:24:48.410
We've got a world clock and
the time to my next event.

00:24:48.410 --> 00:24:51.760
But it would be wasteful to wake
up the provider every minute.

00:24:51.760 --> 00:24:54.340
And there's no guarantee
that the update request

00:24:54.340 --> 00:24:58.530
would come in at the point
where the minute changes.

00:24:58.530 --> 00:25:01.890
Even the date complication
shouldn't need to update.

00:25:01.890 --> 00:25:03.900
Even though it would
only be once a day,

00:25:03.900 --> 00:25:05.400
there's no guarantee
the update will

00:25:05.400 --> 00:25:07.220
come at the stroke of midnight.

00:25:07.220 --> 00:25:11.780
So it would be showing incorrect
data at certain times of day.

00:25:11.780 --> 00:25:16.660
So instead, the API allows you
to use time dependent text.

00:25:16.660 --> 00:25:19.090
For text that represents
the current time,

00:25:19.090 --> 00:25:21.970
we have time format text.

00:25:21.970 --> 00:25:26.260
And for text that represents the
time to or from a given time,

00:25:26.260 --> 00:25:29.347
use the time difference text.

00:25:29.347 --> 00:25:30.680
Let's take a look at an example.

00:25:33.870 --> 00:25:36.250
So let's say that we're
building a complication showing

00:25:36.250 --> 00:25:38.410
the time to my next meeting.

00:25:38.410 --> 00:25:40.270
And we're using the
short text type.

00:25:40.270 --> 00:25:45.530
So I'm building the complication
data of type short text.

00:25:45.530 --> 00:25:47.810
We saw earlier that
set short text takes

00:25:47.810 --> 00:25:51.030
a complication text object.

00:25:51.030 --> 00:25:53.590
And that's so that here we
can pass in a different kind

00:25:53.590 --> 00:25:55.559
of complication text object.

00:25:55.559 --> 00:25:57.100
So we're going to
use Time Difference

00:25:57.100 --> 00:26:00.380
Builder to create one.

00:26:00.380 --> 00:26:02.800
So passing into the
builder, we need

00:26:02.800 --> 00:26:04.750
to set the reference period.

00:26:04.750 --> 00:26:07.080
That is the time that
the text relates to.

00:26:07.080 --> 00:26:11.250
So in this case it's the
time of my next event.

00:26:11.250 --> 00:26:14.280
Let's say that's from
4:00 PM until 5:00 PM.

00:26:14.280 --> 00:26:15.760
In that case,
start time here Is.

00:26:15.760 --> 00:26:16.670
4:00 PM.

00:26:16.670 --> 00:26:19.920
End time here is 5:00 PM.

00:26:19.920 --> 00:26:22.210
Now we add a style.

00:26:22.210 --> 00:26:26.690
So this just determines
how the text is formatted,

00:26:26.690 --> 00:26:27.800
is displayed.

00:26:27.800 --> 00:26:30.670
In this case we're
using short joule unit.

00:26:30.670 --> 00:26:32.660
That means, for
example, if the time

00:26:32.660 --> 00:26:36.690
difference was five hours and 15
minutes, it would show 5H 15M.

00:26:40.180 --> 00:26:43.810
That completes the
time difference text.

00:26:43.810 --> 00:26:45.060
So we call Build.

00:26:45.060 --> 00:26:46.620
There's one more thing.

00:26:46.620 --> 00:26:49.810
As I mentioned earlier,
complication data

00:26:49.810 --> 00:26:52.520
can cease to be valid
after a certain time.

00:26:52.520 --> 00:26:53.980
And that is the case here.

00:26:53.980 --> 00:26:56.000
And it's particularly
important here

00:26:56.000 --> 00:26:59.800
because the time difference
text is the time to the event,

00:26:59.800 --> 00:27:02.300
but it's also the
time since the event.

00:27:02.300 --> 00:27:05.320
So if it were 10
minutes after my event,

00:27:05.320 --> 00:27:09.430
then the complication might show
10M, which is not what we want.

00:27:09.430 --> 00:27:12.090
So we have to set an end
time so that it shows nothing

00:27:12.090 --> 00:27:14.690
after the event.

00:27:14.690 --> 00:27:17.330
OK, so that completes
the complication data.

00:27:17.330 --> 00:27:20.880
So we just call Build.

00:27:20.880 --> 00:27:24.890
Let's see what that would
look like on the watch face.

00:27:24.890 --> 00:27:27.890
So, the event is at 4:00 PM.

00:27:27.890 --> 00:27:33.610
One hour and 45 minutes
before, we would see this.

00:27:33.610 --> 00:27:37.790
At 3:45 PM, we would see this.

00:27:37.790 --> 00:27:40.040
So although it's
the short joule unit

00:27:40.040 --> 00:27:43.230
style, when it's only minutes,
we only show the minutes.

00:27:43.230 --> 00:27:45.110
We never show seconds
in this style.

00:27:47.940 --> 00:27:50.750
During the event,
we would show this.

00:27:50.750 --> 00:27:54.612
So the time difference text
actually shows the text now.

00:27:54.612 --> 00:27:56.070
These strings, all
of these strings

00:27:56.070 --> 00:28:00.790
are localized according to
the locale of the device.

00:28:00.790 --> 00:28:02.970
After the event we see nothing.

00:28:02.970 --> 00:28:05.960
Because we set the end time.

00:28:05.960 --> 00:28:09.350
So for more details of the
types and styles of time

00:28:09.350 --> 00:28:12.880
dependent text, check out
the complication text class

00:28:12.880 --> 00:28:14.500
in the wearable support preview.

00:28:17.230 --> 00:28:21.450
OK, so that's the Complications
API for both data providers

00:28:21.450 --> 00:28:23.030
and for watch faces.

00:28:23.030 --> 00:28:25.696
We're really excited to see
how you all make use of it.

00:28:28.810 --> 00:28:29.897
TONY FERREIRA: Thanks.

00:28:29.897 --> 00:28:31.730
So if you like what
you've heard here today,

00:28:31.730 --> 00:28:34.040
and you'd like to
try it out, you can.

00:28:34.040 --> 00:28:38.710
Just go to g.co/wearpreview.

00:28:38.710 --> 00:28:43.230
You can find out about how to
get the Preview SDK, device

00:28:43.230 --> 00:28:47.360
images, and more information
about the APIs we're launching.

00:28:47.360 --> 00:28:50.150
The dev preview also
includes this watch face.

00:28:50.150 --> 00:28:51.910
It's called elements.

00:28:51.910 --> 00:28:54.940
And it supports a variety
of complication types.

00:28:54.940 --> 00:28:59.010
So you can test any data
providers you build.

00:28:59.010 --> 00:29:03.100
The preview does include a few
providers, like battery level,

00:29:03.100 --> 00:29:05.546
world clock, and date.

00:29:05.546 --> 00:29:07.920
You can use these to test the
complications on your watch

00:29:07.920 --> 00:29:10.570
face.

00:29:10.570 --> 00:29:12.570
Here is a list of the
Android Wear sessions

00:29:12.570 --> 00:29:14.321
that were on today at
I/O. And don't worry

00:29:14.321 --> 00:29:16.195
if you've missed any of
them, because they're

00:29:16.195 --> 00:29:17.346
all be on YouTube soon.

00:29:21.032 --> 00:29:23.490
OLIN LAN: So if you'd like to
have a go at creating a watch

00:29:23.490 --> 00:29:27.030
face with complications or
building a data provider,

00:29:27.030 --> 00:29:28.270
do check out the code labs.

00:29:28.270 --> 00:29:30.910
You can do them here
at I/O. Or you can go

00:29:30.910 --> 00:29:36.900
to g.co/codelabs/io16/wear.

00:29:36.900 --> 00:29:40.090
We'd also love to hear any
feedback you have on the API.

00:29:40.090 --> 00:29:43.120
So if you find any bugs, or
if you have any suggestions

00:29:43.120 --> 00:29:48.596
or questions, please go
to g.co/wearpreviewbug.

00:29:48.596 --> 00:29:52.140
And finally, if you'd like to
discuss the Complications API

00:29:52.140 --> 00:29:55.570
or anything else about Android
Wear with other developers,

00:29:55.570 --> 00:29:58.700
go on to Android Wear
developers G+ Community

00:29:58.700 --> 00:30:02.640
at g.co/androidweardev.

00:30:02.640 --> 00:30:03.820
OK, thank you very much.

00:30:03.820 --> 00:30:05.320
[APPLAUSE]

00:30:05.320 --> 00:30:09.270
[MUSIC PLAYING]

