WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
[Evans] Here's one way to define sum_list.

00:00:02.000 --> 00:00:05.000
It's a procedure that takes in 1 input,

00:00:05.000 --> 00:00:08.000
and we'll name the input p as the name for our parameter.

00:00:08.000 --> 00:00:12.000
I tend to use p as the name for a list. There's no really good reason for that.

00:00:12.000 --> 00:00:16.000
I don't want to use the letter l because l looks too much like a 1.

00:00:16.000 --> 00:00:22.000
I don't want to use m, n, or o because m and n are used usually to represent numbers

00:00:22.000 --> 00:00:24.000
and o looks too much like a 0.

00:00:24.000 --> 00:00:28.000
So the first good letter to use after l is p.

00:00:28.000 --> 00:00:31.000
Of course you could use any name you want for your parameter name.

00:00:31.000 --> 00:00:37.000
To define sum_list we're going to introduce a variable to keep track of the sum so far.

00:00:37.000 --> 00:00:39.000
Let's call that result.

00:00:39.000 --> 00:00:42.000
Initially, the value of the result of 0.

00:00:42.000 --> 00:00:45.000
Next we'll use a for-loop to go through the elements.

00:00:45.000 --> 00:00:47.000
We're going to go through the elements of p.

00:00:47.000 --> 00:00:50.000
Each time we execute the block of the for-loop

00:00:50.000 --> 00:00:52.000
the value of e will be the current element of p,

00:00:52.000 --> 00:00:56.000
and we'll go through the loop once for each element of p in order.

00:00:56.000 --> 00:01:00.000
So what we want to do is add that value to result.

00:01:00.000 --> 00:01:03.000
When we then get to the for-loop, that means we've gone through all the elements

00:01:03.000 --> 00:01:06.000
and we should return the result.

00:01:06.000 --> 00:01:09.000
Let's try this in the Python interpreter.

00:01:09.000 --> 00:01:11.000
We've defined sum_list.

00:01:11.000 --> 00:01:13.000
Let's try running it.

00:01:13.000 --> 00:01:16.000
We do get the value 12.

00:01:16.000 --> 00:01:19.000
What do you think would happen if we run sum_list like this,

00:01:19.000 --> 00:01:23.000
passing in the empty list?

00:01:23.000 --> 00:01:25.000
The answer is that we get the value 0,

00:01:25.000 --> 00:01:28.000
which is what we expect, right?

00:01:28.000 --> 00:01:30.000
The sum of no elements is 0.

00:01:30.000 --> 00:01:33.000
And if we look at the code, that's exactly what happens.

00:01:33.000 --> 00:01:36.000
Initially, we set the result to 0.

00:01:36.000 --> 00:01:38.000
The for-loop goes through all the elements of p,

00:01:38.000 --> 00:01:41.000
but if there are no elements of p, it doesn't execute at all.

00:01:41.000 --> 00:01:44.000
And so we go to the next statement, which returns the result, which has the value 0.

