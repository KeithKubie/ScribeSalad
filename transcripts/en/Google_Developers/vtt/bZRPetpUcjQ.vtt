WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:01.360
JAKE: Yeah, let's not
talk about {opt-in.}

00:00:01.360 --> 00:00:03.030
MATT GAUNT: [? Flash--
?] I punish myself.

00:00:03.030 --> 00:00:04.210
That's secretly what it is.

00:00:04.210 --> 00:00:05.320
JAKE: So here he is again.

00:00:05.320 --> 00:00:05.986
It's Matt Gaunt.

00:00:05.986 --> 00:00:10.006
[APPLAUSE]

00:00:10.006 --> 00:00:11.460
MATT GAUNT: Thanks, everyone.

00:00:11.460 --> 00:00:17.040
So this talk is going to be
about cross-device development.

00:00:17.040 --> 00:00:20.990
Like Jake said-- if my
clicker would work-- my name

00:00:20.990 --> 00:00:22.550
is Matthew Gaunt.

00:00:22.550 --> 00:00:25.800
I have this wonderful photo
thanks to Addy Osmani.

00:00:25.800 --> 00:00:27.110
He took the photo.

00:00:27.110 --> 00:00:29.020
He then decided, I know what.

00:00:29.020 --> 00:00:30.940
I want to exercise
my Photoshop skills

00:00:30.940 --> 00:00:32.800
and make him like Popeye.

00:00:32.800 --> 00:00:34.380
So thank you, Mr. Osmani.

00:00:37.610 --> 00:00:39.690
You could argue that
there shouldn't really

00:00:39.690 --> 00:00:41.700
be a need for this kind
of talk in the sense

00:00:41.700 --> 00:00:43.220
that one of the
beauties of the web

00:00:43.220 --> 00:00:46.300
is the fact that if
you've got a browser,

00:00:46.300 --> 00:00:49.770
it does mean that you can
sit there and develop for it.

00:00:49.770 --> 00:00:52.240
But the biggest issue
with mobile devices

00:00:52.240 --> 00:00:55.954
is you can imagine a
scenario like this.

00:00:55.954 --> 00:00:57.620
This poor guy is
sitting there thinking,

00:00:57.620 --> 00:00:59.203
I'm going to develop
for all of those,

00:00:59.203 --> 00:01:00.600
and it's going to be great.

00:01:00.600 --> 00:01:03.580
By his face, maybe not so much.

00:01:03.580 --> 00:01:06.430
And I think the main reason
that it becomes a bit difficult

00:01:06.430 --> 00:01:09.130
is you have this
environment on your desktop

00:01:09.130 --> 00:01:11.040
where you're developing.

00:01:11.040 --> 00:01:13.780
What is the road to
go from your desktop

00:01:13.780 --> 00:01:16.060
to supporting all these devices?

00:01:16.060 --> 00:01:17.520
What are going to
be the obstacles?

00:01:17.520 --> 00:01:19.770
How do you get around them?

00:01:19.770 --> 00:01:21.680
How do you essentially
smooth out that path?

00:01:24.380 --> 00:01:27.150
And we've all seen that whole
dragging backwards and forwards

00:01:27.150 --> 00:01:27.700
the window.

00:01:27.700 --> 00:01:30.375
And I think, generally, people
will fall into two camps

00:01:30.375 --> 00:01:31.000
pretty quickly.

00:01:31.000 --> 00:01:33.069
They think, no, that's
not mobile development.

00:01:33.069 --> 00:01:33.610
That's awful.

00:01:33.610 --> 00:01:34.651
How could you claim that?

00:01:34.651 --> 00:01:37.240
And the other side will be
like, well, it's not that bad.

00:01:37.240 --> 00:01:39.260
It just helps you get there.

00:01:39.260 --> 00:01:42.710
My opinion is it helps
you focus on the content

00:01:42.710 --> 00:01:44.760
rather than necessarily
devices, which

00:01:44.760 --> 00:01:47.550
is the right way of doing
things in my opinion.

00:01:47.550 --> 00:01:49.830
But at the same time, you
can imagine a scenario

00:01:49.830 --> 00:01:53.280
like this, where if
you take a Nexus 4,

00:01:53.280 --> 00:01:55.055
you put it in
landscape, it's sort

00:01:55.055 --> 00:01:58.630
of the same size as a
Nexus 7 in portrait.

00:01:58.630 --> 00:02:00.520
And realistically,
and I don't want

00:02:00.520 --> 00:02:03.070
to give users the same
experience on both

00:02:03.070 --> 00:02:05.464
those scenarios
based off of width.

00:02:05.464 --> 00:02:06.880
And then you can
start, obviously,

00:02:06.880 --> 00:02:08.479
doing media queries
with orientation.

00:02:08.479 --> 00:02:09.853
But unless you
actually sit there

00:02:09.853 --> 00:02:12.090
with a device in your hand
playing around with it,

00:02:12.090 --> 00:02:15.340
the incentive to go and do that
extra work may not be apparent.

00:02:18.140 --> 00:02:21.120
So we get to this point
where we say, well, OK.

00:02:21.120 --> 00:02:22.760
I need to support these devices.

00:02:22.760 --> 00:02:24.840
And this looks like a
nice, structured way

00:02:24.840 --> 00:02:27.902
of having all your devices,
a nice, beautiful wall.

00:02:27.902 --> 00:02:31.020
But it's still daunting
as to how you can actually

00:02:31.020 --> 00:02:36.660
utilize this and
develop in the same way.

00:02:36.660 --> 00:02:41.210
So for me, I still
break things down

00:02:41.210 --> 00:02:42.810
into three buckets
for how I like

00:02:42.810 --> 00:02:44.630
to approach these
kind of things.

00:02:44.630 --> 00:02:46.255
Number one is the
iteration speed.

00:02:46.255 --> 00:02:47.630
When I'm developing,
I want to be

00:02:47.630 --> 00:02:50.155
able to get a fast turnaround
over what I'm doing.

00:02:50.155 --> 00:02:52.070
The second one is launching.

00:02:52.070 --> 00:02:54.100
And that sounds a
bit insane, the fact

00:02:54.100 --> 00:02:56.500
that I'm going to tell you
how to launch a browser--

00:02:56.500 --> 00:03:00.140
tap that little icon--
but I'm going to.

00:03:00.140 --> 00:03:01.620
And then there's emulation.

00:03:04.300 --> 00:03:08.010
As {Mr._Paul_Archer} is showing
you, there's already one tool.

00:03:08.010 --> 00:03:12.110
So, iterations-- for me,
one of the main reasons

00:03:12.110 --> 00:03:14.550
people like tools
like Live Reload

00:03:14.550 --> 00:03:17.010
are the fact that you don't
have to hit this icon.

00:03:17.010 --> 00:03:18.926
And it's insane to say
it, but there are still

00:03:18.926 --> 00:03:21.590
people who are constantly
just hitting Refresh.

00:03:21.590 --> 00:03:24.350
I watched one guy who had made
a change in his text editor

00:03:24.350 --> 00:03:25.780
and went to Chrome.

00:03:25.780 --> 00:03:28.860
He hit a plug-in that
would clear the cache,

00:03:28.860 --> 00:03:30.237
then hit the Refresh button.

00:03:30.237 --> 00:03:31.820
And he was doing
that for each change.

00:03:31.820 --> 00:03:33.489
And I was just like,
what are you doing?

00:03:33.489 --> 00:03:34.280
Just open DevTools.

00:03:34.280 --> 00:03:35.360
It clears out the cache.

00:03:35.360 --> 00:03:37.859
And then use Live Reload, and
then you don't touch anything.

00:03:40.060 --> 00:03:43.285
And for me, I use
Grunt for a build tool.

00:03:43.285 --> 00:03:44.660
But one of the
nice things is you

00:03:44.660 --> 00:03:47.370
get a load of these
extra modules for free.

00:03:47.370 --> 00:03:49.740
And one of those that
I literally rely on

00:03:49.740 --> 00:03:52.840
is Live Reload.

00:03:52.840 --> 00:03:55.840
So if you're not
familiar with Grunt--

00:03:55.840 --> 00:04:00.180
I think there was half
that maybe used it--

00:04:00.180 --> 00:04:05.200
it's essentially a way of
pulling in third-party modules

00:04:05.200 --> 00:04:08.800
and tasks that will essentially
perform some action for you.

00:04:08.800 --> 00:04:14.800
So the main one for Live Reload
is this Watch task right here.

00:04:14.800 --> 00:04:16.260
And basically,
what this is doing

00:04:16.260 --> 00:04:18.570
is saying, whenever a file
changes in my file system,

00:04:18.570 --> 00:04:20.970
I want you to perform
certain tasks.

00:04:20.970 --> 00:04:24.590
So here we've got
our Compass task.

00:04:24.590 --> 00:04:26.690
And whenever a SAS
file changes, I

00:04:26.690 --> 00:04:28.880
want you to run
the Compass server

00:04:28.880 --> 00:04:32.180
and then run this
Autoprefixer task.

00:04:32.180 --> 00:04:35.750
Now, I loved Flexbox when
it first started coming out

00:04:35.750 --> 00:04:36.960
and I was playing with it.

00:04:36.960 --> 00:04:38.540
The thing I hated
was the fact that I

00:04:38.540 --> 00:04:41.540
had multiple versions with
multiple vendor prefixes

00:04:41.540 --> 00:04:42.940
that I had to deal with.

00:04:42.940 --> 00:04:45.620
Autoprefixer just
took all of that away,

00:04:45.620 --> 00:04:49.344
and I've literally
never looked back.

00:04:49.344 --> 00:04:51.010
So once we've got
these other tasks that

00:04:51.010 --> 00:04:53.090
have run through and
changed whatever we need,

00:04:53.090 --> 00:04:54.870
we have this Live Reload task.

00:04:54.870 --> 00:04:56.640
Now, what Live
Reload will do is it

00:04:56.640 --> 00:05:00.550
will inject a
script into my HTML.

00:05:00.550 --> 00:05:03.840
And then, basically, it will
start running the Live Reload

00:05:03.840 --> 00:05:05.840
server in the back end as well.

00:05:05.840 --> 00:05:08.070
So what that means is
whenever I make a change,

00:05:08.070 --> 00:05:10.890
it will tell the
browser to update.

00:05:10.890 --> 00:05:16.100
So that's definitely
not what I want.

00:05:16.100 --> 00:05:18.890
There we go.

00:05:18.890 --> 00:05:25.540
So what that means is as
soon as I come into here,

00:05:25.540 --> 00:05:29.023
I can start making my
page look beautiful.

00:05:37.810 --> 00:05:39.700
Yeah, there we go.

00:05:39.700 --> 00:05:42.160
And obviously, like I said,
it's not just necessarily

00:05:42.160 --> 00:05:43.160
SAS and everything else.

00:05:43.160 --> 00:05:49.459
It'll start changing files when
it comes to JavaScript as well.

00:05:49.459 --> 00:05:51.500
And this is great because
it's not just something

00:05:51.500 --> 00:05:52.920
that you have in desktop.

00:05:52.920 --> 00:05:57.620
This applies to mobile as well.

00:05:57.620 --> 00:06:01.069
But you could be quite
fooled into thinking, well,

00:06:01.069 --> 00:06:02.360
that all sounds good and great.

00:06:02.360 --> 00:06:05.340
But that Grunt file and all
the stuff that you've done

00:06:05.340 --> 00:06:06.850
is kind of horrible.

00:06:06.850 --> 00:06:08.560
And I'd completely
agree with you.

00:06:08.560 --> 00:06:11.194
If I were to write that, I would
fail miserably and probably

00:06:11.194 --> 00:06:12.610
spend several hours
crying, making

00:06:12.610 --> 00:06:15.510
every single task play nice.

00:06:15.510 --> 00:06:19.430
And it's at that point you
can use something like Yeoman.

00:06:19.430 --> 00:06:22.700
Who's heard of Yeoman before?

00:06:22.700 --> 00:06:23.550
OK, a lot.

00:06:23.550 --> 00:06:25.070
Good.

00:06:25.070 --> 00:06:27.070
For those who haven't,
Yeoman is essentially

00:06:27.070 --> 00:06:29.880
a tool that helps you
scaffold out a new project.

00:06:29.880 --> 00:06:31.690
It gives you a good
set of defaults,

00:06:31.690 --> 00:06:34.330
and it can also ask
you a set of things

00:06:34.330 --> 00:06:36.080
that you might
want to add in that

00:06:36.080 --> 00:06:38.945
is specific to your
personal taste.

00:06:38.945 --> 00:06:40.320
And the main reason
I like Yeoman

00:06:40.320 --> 00:06:43.777
is because it can touch on the
whole life cycle of your app.

00:06:43.777 --> 00:06:45.360
It doesn't necessarily
just have to be

00:06:45.360 --> 00:06:48.430
build or specific
tools that you like.

00:06:48.430 --> 00:06:51.844
It can actually touch
on a number of things.

00:06:51.844 --> 00:06:56.036
And when we were first
talking about Yeoman and web

00:06:56.036 --> 00:06:57.410
development and
whether it should

00:06:57.410 --> 00:06:59.520
be mobile first or anything
else, we sat and said,

00:06:59.520 --> 00:07:04.400
well, do people want a load
of tools specific to mobile?

00:07:04.400 --> 00:07:08.440
And if they do, what are
those tools going to be?

00:07:08.440 --> 00:07:11.520
So me and Addy, we came
up with this notion

00:07:11.520 --> 00:07:14.150
of, well, what I
really want to do

00:07:14.150 --> 00:07:16.420
is basically have
a mobile builder

00:07:16.420 --> 00:07:19.644
and find out what tools
people actually want to use.

00:07:19.644 --> 00:07:21.310
So we came up with
the mobile generator.

00:07:21.310 --> 00:07:25.387
So the way you work with
Yeoman is you say yo and then

00:07:25.387 --> 00:07:27.970
the project you want to scaffold
out, so in this case, mobile.

00:07:31.056 --> 00:07:31.876
Yeah, there we go.

00:07:31.876 --> 00:07:33.750
Brief moment of fear
where I thought the demo

00:07:33.750 --> 00:07:34.780
was going to fail.

00:07:34.780 --> 00:07:36.695
So the kind of things
this gives you is it

00:07:36.695 --> 00:07:38.820
will give you first a choice
of whichever framework

00:07:38.820 --> 00:07:40.650
you want to build
with, so whether that's

00:07:40.650 --> 00:07:44.229
Bootstrap, PureCSS,
TopCoat, Foundation.

00:07:44.229 --> 00:07:45.770
It will then ask
you whether you want

00:07:45.770 --> 00:07:47.979
to include any boilerplate
from that framework.

00:07:47.979 --> 00:07:49.520
So something like
Bootstrap, it comes

00:07:49.520 --> 00:07:53.550
with that canonical,
responsive design.

00:07:53.550 --> 00:07:57.746
It will also add in a task that
could do the srcset for you.

00:07:57.746 --> 00:08:01.850
So it will re-size the
images, create the source.

00:08:01.850 --> 00:08:05.160
If you've ever come across
FastClick from FT Labs,

00:08:05.160 --> 00:08:07.900
it's designed to remove
a 300-millisecond delay

00:08:07.900 --> 00:08:09.480
in some of the browsers.

00:08:09.480 --> 00:08:11.470
Although that's going
away pretty fast

00:08:11.470 --> 00:08:15.070
with Firefox and
Chrome, at least.

00:08:15.070 --> 00:08:19.640
It can also add in a task for
PhantomJS and CasperJS, which

00:08:19.640 --> 00:08:23.930
it's a way of essentially taking
your web page, start a server,

00:08:23.930 --> 00:08:25.870
and then basically change
the viewport for you

00:08:25.870 --> 00:08:27.340
and then create a set of images.

00:08:27.340 --> 00:08:30.100
So that way, you get a really
quick turnaround as to what

00:08:30.100 --> 00:08:33.169
your site looks like across
various devices-- well,

00:08:33.169 --> 00:08:35.380
viewport sizes.

00:08:35.380 --> 00:08:36.580
Browser Stack testing.

00:08:36.580 --> 00:08:39.570
The idea with this is you could
just go Grunt, open Nexus 5.

00:08:39.570 --> 00:08:42.659
And then it would just go to
Browser Stack in a new tab

00:08:42.659 --> 00:08:44.850
and open up a Nexus
5 emulator for you

00:08:44.850 --> 00:08:47.490
or whatever it might be.

00:08:47.490 --> 00:08:52.660
RequireJS support,
converting images to WebP,

00:08:52.660 --> 00:08:57.470
polyfill for async
localStorage, also

00:08:57.470 --> 00:08:59.900
some boilerplate for
the Fullscreen API.

00:08:59.900 --> 00:09:02.550
It's interesting seeing what
people are trying to do around

00:09:02.550 --> 00:09:04.670
this, because you
need user interaction.

00:09:04.670 --> 00:09:06.620
If you can get these
to scroll and then,

00:09:06.620 --> 00:09:09.380
as soon as they start
scrolling off the URL bar,

00:09:09.380 --> 00:09:12.210
then kick in Fullscreen
API, this just

00:09:12.210 --> 00:09:14.990
simplifies it for you.

00:09:14.990 --> 00:09:17.190
And the last thing
we offered developers

00:09:17.190 --> 00:09:20.950
was, if you were using
Modernizr to basically help you

00:09:20.950 --> 00:09:23.431
with feature detection,
it's nice in development

00:09:23.431 --> 00:09:25.680
[? stage ?] just to have all
the tests you could want.

00:09:25.680 --> 00:09:27.825
But at the same
time, good practice

00:09:27.825 --> 00:09:30.370
is you sit there and pick
the tests you actually need

00:09:30.370 --> 00:09:31.870
and clear it out afterwards.

00:09:31.870 --> 00:09:35.635
And there's a task
exactly for that.

00:09:35.635 --> 00:09:37.760
I'm not going to build it,
because it takes forever

00:09:37.760 --> 00:09:38.450
with MPM.

00:09:38.450 --> 00:09:43.240
But the point of
this is the fact

00:09:43.240 --> 00:09:46.930
that, with Yeoman,
it exposes you

00:09:46.930 --> 00:09:48.610
to a new kind of
workflow in the sense

00:09:48.610 --> 00:09:51.026
that there's a load of tools
out that you can use and just

00:09:51.026 --> 00:09:53.900
basically get at
your fingertips.

00:09:53.900 --> 00:09:57.725
Why haven't you
gone full screen?

00:09:57.725 --> 00:10:00.176
There we go.

00:10:00.176 --> 00:10:01.550
So if you haven't
checked it out,

00:10:01.550 --> 00:10:03.950
it's well worth just
playing around with it.

00:10:03.950 --> 00:10:08.350
You can get it from MPM, and
it has a load of good features.

00:10:08.350 --> 00:10:09.910
Now, Live Reload
isn't just Grunt.

00:10:09.910 --> 00:10:12.290
There are a number of other
tools out there that do it.

00:10:12.290 --> 00:10:14.800
One of them is Ghostlab.

00:10:14.800 --> 00:10:18.330
Now Ghostlab has this
really nice other feature,

00:10:18.330 --> 00:10:22.510
which I'm going to give
you a quick demo of.

00:10:22.510 --> 00:10:24.640
There we go.

00:10:24.640 --> 00:10:27.420
So one of the nice
features with Ghostlab

00:10:27.420 --> 00:10:28.700
is you can drag a directory.

00:10:28.700 --> 00:10:33.250
It creates a server for you, and
it will do the live reloading.

00:10:33.250 --> 00:10:34.900
But one of the
other cool features,

00:10:34.900 --> 00:10:40.110
if I launch just
a demo page, which

00:10:40.110 --> 00:10:45.355
is just a plain HTML spot--
do I have this on my tablet?

00:10:45.355 --> 00:10:45.855
Yes.

00:10:52.050 --> 00:10:54.062
Let's move that out of the way.

00:10:54.062 --> 00:10:57.580
So you can sort of
see the tablet there.

00:10:57.580 --> 00:10:59.460
Now, one of the
nice things here is

00:10:59.460 --> 00:11:03.620
it starts syncing up what
I'm doing on my desktop

00:11:03.620 --> 00:11:07.180
with what's going
on on the tablet.

00:11:07.180 --> 00:11:09.090
Now, you can imagine
a really nice scenario

00:11:09.090 --> 00:11:11.090
where, if you're testing
across multiple devices

00:11:11.090 --> 00:11:14.050
and you want to see what the
entire UI of all those devices

00:11:14.050 --> 00:11:17.830
looks like, you can just
do it from your desktop.

00:11:17.830 --> 00:11:19.170
And it's not just scrolling.

00:11:19.170 --> 00:11:22.910
You can sit there and type away.

00:11:22.910 --> 00:11:24.852
It'll do clicks and options.

00:11:24.852 --> 00:11:26.560
And it's just a really
nice, pleasant way

00:11:26.560 --> 00:11:28.280
of just syncing up
multiple devices.

00:11:39.800 --> 00:11:42.500
So I think whatever you
end up using for tools,

00:11:42.500 --> 00:11:45.230
I think it's worth considering
how fast you can actually

00:11:45.230 --> 00:11:48.880
get a turnaround over
what you're doing.

00:11:48.880 --> 00:11:52.300
So the next thing is launching.

00:11:52.300 --> 00:11:55.240
I spared you from it with that
demo, where I painfully try

00:11:55.240 --> 00:11:59.760
and type in an IP address
and then fail miserably.

00:11:59.760 --> 00:12:02.400
But out of interest,
of all those people

00:12:02.400 --> 00:12:05.010
who test on multiple devices,
who also then regularly tests

00:12:05.010 --> 00:12:06.850
across multiple browsers
on those devices?

00:12:09.520 --> 00:12:12.060
OK, a handful of people.

00:12:12.060 --> 00:12:14.140
And you can imagine why, right?

00:12:14.140 --> 00:12:16.697
It's a pain in the backside.

00:12:16.697 --> 00:12:18.280
And the main reason
for that is you've

00:12:18.280 --> 00:12:19.720
got to go across each
of these devices,

00:12:19.720 --> 00:12:22.100
select each of the browsers
that you want to test against,

00:12:22.100 --> 00:12:23.600
and then repeat for
the next version

00:12:23.600 --> 00:12:25.700
if you want to test across that.

00:12:25.700 --> 00:12:28.270
And then, also, you've got
to enter in the IP address.

00:12:28.270 --> 00:12:30.265
And you could argue,
well, you put a bookmark.

00:12:30.265 --> 00:12:31.940
Or hopefully no one
touches the devices,

00:12:31.940 --> 00:12:34.440
so when I open up that browser,
it's pointing to my machine.

00:12:34.440 --> 00:12:36.845
And no one ever touches it,
and it's all fine and dandy.

00:12:36.845 --> 00:12:39.140
But you've still got to
touch the browser anyway,

00:12:39.140 --> 00:12:40.640
and it's a bottleneck
for the number

00:12:40.640 --> 00:12:43.260
of devices you test against.

00:12:43.260 --> 00:12:48.270
So I came up with this thing to
scratch that itch for myself.

00:12:48.270 --> 00:12:52.420
And I'm hoping that other people
will find it helpful as well.

00:12:52.420 --> 00:12:56.690
And it's called Mini Device Lab
because I have no imagination

00:12:56.690 --> 00:12:58.440
whatsoever.

00:12:58.440 --> 00:13:05.670
So all it is is a small
Cordova application

00:13:05.670 --> 00:13:08.190
with a couple of plug-ins
that I've written.

00:13:12.550 --> 00:13:17.131
Can I position
this in a sane way?

00:13:17.131 --> 00:13:18.130
Kind of, but not really.

00:13:21.800 --> 00:13:28.530
OK, so I sign in with Google+,
and what that's going to do is

00:13:28.530 --> 00:13:31.470
basically generate an
account for this device lab.

00:13:34.590 --> 00:13:37.795
Please work.

00:13:37.795 --> 00:13:39.190
[UNCOMFORTABLE HUMMING]

00:13:39.190 --> 00:13:41.469
[LAUGHTER]

00:13:41.469 --> 00:13:43.510
MATT GAUNT: I knew this
was going to let me down.

00:13:43.510 --> 00:13:45.218
I've been sitting
there going through it.

00:13:45.218 --> 00:13:45.820
There we go.

00:13:45.820 --> 00:13:48.330
No apps, no devices in the lab.

00:13:48.330 --> 00:13:49.990
So I hit sign in
on both of these.

00:13:49.990 --> 00:13:52.907
It won't ask me to do anything,
because Google+ Sign-In has

00:13:52.907 --> 00:13:54.990
this nice thing where you
don't have to do it once

00:13:54.990 --> 00:13:56.380
you've agreed once.

00:13:56.380 --> 00:13:58.310
So once you've done
that, you literally

00:13:58.310 --> 00:13:59.930
don't need this
app anymore, so I'm

00:13:59.930 --> 00:14:02.940
going to fling it
into the abyss.

00:14:02.940 --> 00:14:09.650
Hit Refresh on my desktop--
oh, that's definitely not good.

00:14:12.040 --> 00:14:12.540
Cool.

00:14:12.540 --> 00:14:14.290
There we go.

00:14:14.290 --> 00:14:16.440
So now I've got two devices.

00:14:16.440 --> 00:14:19.060
And I've got a
couple of browsers.

00:14:19.060 --> 00:14:23.580
So if I hit Launch on
this-- damn you, Nexus 10.

00:14:26.024 --> 00:14:28.440
See, what's going to be really
bad as well is the Nexus 10

00:14:28.440 --> 00:14:30.980
is going to kick in as soon
as I start doing other stuff.

00:14:30.980 --> 00:14:31.825
There we go.

00:14:31.825 --> 00:14:35.350
So the idea with this
is I enter in a URL,

00:14:35.350 --> 00:14:39.940
and it launches across the
devices in that Device Lab.

00:14:39.940 --> 00:14:41.930
Now, the nice thing
with this, if I go back

00:14:41.930 --> 00:14:47.640
to our lovely Ghostlabs demo
and I want to launch it in,

00:14:47.640 --> 00:14:54.200
let's say, Firefox--
damn you, Twitter.

00:14:58.050 --> 00:15:01.360
I'm presenting, and you know it.

00:15:01.360 --> 00:15:04.635
So if I go and select Firefox
to launch across those devices,

00:15:04.635 --> 00:15:06.750
it not totally
clear, but the tablet

00:15:06.750 --> 00:15:09.060
has launched Firefox
with the URL.

00:15:09.060 --> 00:15:12.040
And the Nexus 4 has
gone to the Play Store

00:15:12.040 --> 00:15:13.480
because it's not pre-installed.

00:15:13.480 --> 00:15:15.563
So even though you haven't
got the browsers there,

00:15:15.563 --> 00:15:18.400
it simplifies it a little
bit to some extent.

00:15:21.840 --> 00:15:25.020
And the idea with this was
literally to get to this point

00:15:25.020 --> 00:15:30.580
where it encourages you to have
multiple devices that you can

00:15:30.580 --> 00:15:34.110
actually develop against
and actually support

00:15:34.110 --> 00:15:36.900
the browsers that
are on those devices.

00:15:36.900 --> 00:15:39.300
At the moment, it is
100% in alpha stage,

00:15:39.300 --> 00:15:42.370
as you saw from my praying to
the gods that it would work.

00:15:42.370 --> 00:15:44.010
But it's all open
sourced on GitHub.

00:15:44.010 --> 00:15:46.170
You still have to sort
out your own App Engine

00:15:46.170 --> 00:15:47.050
instance and stuff.

00:15:47.050 --> 00:15:50.566
But I'm hoping to get to a point
where I can just release it

00:15:50.566 --> 00:15:51.940
on the Play Store,
and it'll have

00:15:51.940 --> 00:15:53.898
iOS support and other
stuff, because it is just

00:15:53.898 --> 00:15:54.920
a Cordova application.

00:15:54.920 --> 00:15:56.336
I just need to do
the plug-in bit.

00:15:58.730 --> 00:16:01.340
And the main thing with as
well is a lot of the tools

00:16:01.340 --> 00:16:03.660
out there say, enter
in this IP address.

00:16:03.660 --> 00:16:05.260
And I wanted to
get to point where

00:16:05.260 --> 00:16:06.510
it will work with those tools.

00:16:06.510 --> 00:16:08.830
They don't get in the way.

00:16:08.830 --> 00:16:12.810
So that's what I was
going to say on launch.

00:16:12.810 --> 00:16:15.190
So then the other
thing is emulation

00:16:15.190 --> 00:16:19.250
with emulators and
all the other stuff.

00:16:19.250 --> 00:16:21.126
And I expect most
of you might be

00:16:21.126 --> 00:16:23.030
sitting there thinking,
well, hang on.

00:16:23.030 --> 00:16:24.910
You've talked about
DevTools emulation.

00:16:24.910 --> 00:16:26.285
Now you're talking
about devices,

00:16:26.285 --> 00:16:29.620
and now you're talking
about emulators as well.

00:16:29.620 --> 00:16:31.391
Why do I need all these
different options?

00:16:31.391 --> 00:16:32.890
What the hell are
you talking about?

00:16:36.137 --> 00:16:37.470
And they all have pros and cons.

00:16:37.470 --> 00:16:40.680
Devices, the big con of these
is you have to buy them.

00:16:40.680 --> 00:16:44.470
Nobody wants to spend money
on these kind of things.

00:16:44.470 --> 00:16:46.696
But at the same
time, you need them.

00:16:46.696 --> 00:16:48.070
You get close to
what the user is

00:16:48.070 --> 00:16:50.725
going to be experiencing
at the end of the day.

00:16:50.725 --> 00:16:52.600
And arguably, they can
be easier to work with

00:16:52.600 --> 00:16:56.170
compared to the other stuff.

00:16:56.170 --> 00:16:59.740
DevTools Emulation, it's great
for sanity checking what you're

00:16:59.740 --> 00:17:01.460
going to end up
giving to a user.

00:17:01.460 --> 00:17:04.819
But the problem is,
you're still in Chrome

00:17:04.819 --> 00:17:07.319
on the desktop [?
browser. ?] You don't have

00:17:07.319 --> 00:17:09.839
feature parity with
Chrome for Android.

00:17:09.839 --> 00:17:12.210
So if you imagined
back in the day

00:17:12.210 --> 00:17:14.834
when WebRTC may have come
to Chrome for desktop

00:17:14.834 --> 00:17:17.660
and not Chrome for
Android, it will still

00:17:17.660 --> 00:17:20.000
look like you've got
WebRTC on the Nexus 4

00:17:20.000 --> 00:17:21.430
in DevTools Emulation.

00:17:21.430 --> 00:17:24.332
You install it on the device,
and obviously it will fail.

00:17:24.332 --> 00:17:26.790
But it is still awesome for
the fact you're testing the UI.

00:17:29.872 --> 00:17:31.580
Emulators, they're
incredibly useful when

00:17:31.580 --> 00:17:35.700
you need to test a particular
platform and, essentially,

00:17:35.700 --> 00:17:37.699
specific configurations.

00:17:37.699 --> 00:17:39.240
The biggest problem
is sometimes they

00:17:39.240 --> 00:17:40.900
can be a bit of a
faff to sort out.

00:17:40.900 --> 00:17:44.300
Performance doesn't necessarily
match the device, either.

00:17:44.300 --> 00:17:45.910
IOS is super fast,
and you might find

00:17:45.910 --> 00:17:49.740
you have performance
issues on the device.

00:17:49.740 --> 00:17:52.272
Android is notoriously
bad out of the box,

00:17:52.272 --> 00:17:53.480
just when you start using it.

00:17:56.141 --> 00:17:57.640
And the other thing
is there is no--

00:17:57.640 --> 00:17:59.597
I should have said this--
no app stores, which

00:17:59.597 --> 00:18:01.430
means there's no evergreen
browsers that you

00:18:01.430 --> 00:18:03.470
can get into those emulators.

00:18:03.470 --> 00:18:05.480
I think Firefox
have public builds

00:18:05.480 --> 00:18:07.877
available for their APKs.

00:18:07.877 --> 00:18:09.960
We have Content Shell,
which you can actually get.

00:18:09.960 --> 00:18:13.490
And it's basically like Chrome
for Android, the rendering,

00:18:13.490 --> 00:18:17.400
but without any of the
nice, Chromey bits.

00:18:17.400 --> 00:18:19.240
The link at the bottom
is to an article

00:18:19.240 --> 00:18:21.550
Paul Kinlan had put together.

00:18:21.550 --> 00:18:23.070
And basically it's
a shell script.

00:18:23.070 --> 00:18:26.510
It'll look at the latest
part of the source tree

00:18:26.510 --> 00:18:28.420
with the latest build
of Content Shell

00:18:28.420 --> 00:18:30.020
and then install
it to anything that

00:18:30.020 --> 00:18:31.920
is connected to
ADB at that time.

00:18:31.920 --> 00:18:35.060
So if you've got an emulator
open or a device connected,

00:18:35.060 --> 00:18:38.530
it'll install Content Shell.

00:18:38.530 --> 00:18:40.980
So I'm not entirely sure
how to pronounce this,

00:18:40.980 --> 00:18:43.360
so I'm going to say it's
Intel XHam to be official.

00:18:43.360 --> 00:18:45.890
But I'm going to
call it Extreme Ham.

00:18:45.890 --> 00:18:49.450
This is essentially something
you can install in our machine

00:18:49.450 --> 00:18:50.480
from Intel.

00:18:50.480 --> 00:18:53.820
And basically, if you use an
Intel-based Android emulator

00:18:53.820 --> 00:18:57.190
as well from the SDK
Tools, it basically

00:18:57.190 --> 00:18:59.350
allows the emulator to
get access to the CPU

00:18:59.350 --> 00:19:01.599
and run a bit faster than
what you would normally get.

00:19:05.960 --> 00:19:09.852
The other one, any of you guys
heard of Genymotion before?

00:19:09.852 --> 00:19:12.610
That guy has, [INAUDIBLE].

00:19:12.610 --> 00:19:16.410
So Genymotion is a
company which is basically

00:19:16.410 --> 00:19:21.280
building versions
of-- I did have it.

00:19:21.280 --> 00:19:23.440
Oh, there we go.

00:19:23.440 --> 00:19:26.390
So they basically take
builds of Android,

00:19:26.390 --> 00:19:30.530
and I believe they put it inside
a VirtualBox-style environment.

00:19:30.530 --> 00:19:31.780
So it runs quite smoothly.

00:19:37.714 --> 00:19:40.380
Now, you've still got that issue
it doesn't have the Play Store,

00:19:40.380 --> 00:19:41.700
but it shows up in ADB.

00:19:41.700 --> 00:19:43.690
So if you've got
the APKs again, you

00:19:43.690 --> 00:19:46.710
can just install it on there.

00:19:46.710 --> 00:19:48.000
It's quite a nice option.

00:19:48.000 --> 00:19:50.909
I think there might be
some stuff around the kinds

00:19:50.909 --> 00:19:52.950
of processor that it's
running, as in VirtualBox.

00:19:52.950 --> 00:19:54.530
But it's quite speedy.

00:19:54.530 --> 00:19:56.740
And if you just need to
support the Android browser,

00:19:56.740 --> 00:19:57.540
it's already there.

00:19:57.540 --> 00:20:03.392
So it might be a slightly
nicer way to support that,

00:20:03.392 --> 00:20:05.850
save you pulling your hair out
and looking like Paul Lewis.

00:20:08.930 --> 00:20:11.610
So there are cloud-based
emulator options as well.

00:20:11.610 --> 00:20:14.240
I'm sure you guys
have seen this.

00:20:14.240 --> 00:20:19.400
Browser Stack focuses more
on the interactive playing

00:20:19.400 --> 00:20:22.150
around with of emulators.

00:20:22.150 --> 00:20:24.219
They've got a much
wider range of devices

00:20:24.219 --> 00:20:25.760
than I've seen
anywhere else in terms

00:20:25.760 --> 00:20:27.740
of emulating different
viewport sizes

00:20:27.740 --> 00:20:30.140
and resolutions, et cetera.

00:20:30.140 --> 00:20:35.140
But it does still suffer with
the no evergreen browsers.

00:20:35.140 --> 00:20:36.920
Sauce Labs is another one.

00:20:36.920 --> 00:20:39.350
Both of these have
local tunneling support,

00:20:39.350 --> 00:20:41.825
so you can just route
your local server to them.

00:20:41.825 --> 00:20:43.200
Interesting thing
with Sauce Labs

00:20:43.200 --> 00:20:45.360
is they have interactive
session support,

00:20:45.360 --> 00:20:48.900
but they focus more towards
the automated testing.

00:20:48.900 --> 00:20:50.300
So they have web driver support.

00:20:50.300 --> 00:20:53.110
And the nice with that is,
if you run through a script

00:20:53.110 --> 00:20:56.400
and tell it, say, enter in this
text item, click these buttons,

00:20:56.400 --> 00:20:58.127
scroll here, it
will actually record

00:20:58.127 --> 00:20:59.710
a video of that
entire session, so you

00:20:59.710 --> 00:21:00.810
can review it at the end.

00:21:03.650 --> 00:21:05.930
And then the last one that
I was going to talk about

00:21:05.930 --> 00:21:08.770
was Device Anywhere.

00:21:08.770 --> 00:21:10.850
The nice thing with what
these guys are doing

00:21:10.850 --> 00:21:13.960
is basically you're controlling
real devices there and then.

00:21:13.960 --> 00:21:15.710
They basically allowed
you to control them

00:21:15.710 --> 00:21:18.600
remotely, which means
you're essentially

00:21:18.600 --> 00:21:20.900
getting the actual ROMs that
come with these devices--

00:21:20.900 --> 00:21:22.875
so any browsers
that come with them.

00:21:22.875 --> 00:21:24.790
And if you're finding
you've got quirks

00:21:24.790 --> 00:21:27.274
that are really
specific to one device,

00:21:27.274 --> 00:21:29.190
this might be a really
nice way of finding out

00:21:29.190 --> 00:21:33.224
what those are without actually
needing to buy the device.

00:21:33.224 --> 00:21:34.640
The one and only
criticism of this

00:21:34.640 --> 00:21:36.306
is they are actually
real devices, which

00:21:36.306 --> 00:21:38.160
mean people go into
Settings and say, hey,

00:21:38.160 --> 00:21:39.420
I'm going to put a
password on this phone.

00:21:39.420 --> 00:21:39.920
Enjoy.

00:21:42.790 --> 00:21:45.340
There is a Help box on the
side, so you can hopefully

00:21:45.340 --> 00:21:46.090
just get it fixed.

00:21:46.090 --> 00:21:47.190
But it takes a while.

00:21:47.190 --> 00:21:49.150
So if you were pushing
something out the door

00:21:49.150 --> 00:21:52.590
and then someone goes,
can you just check this?

00:21:52.590 --> 00:21:56.170
That would be a bit
disappointing at that point.

00:21:56.170 --> 00:21:57.870
So you've got all
these emulators,

00:21:57.870 --> 00:21:59.640
and it's all super awesome.

00:21:59.640 --> 00:22:02.000
And then you come to
debugging a problem.

00:22:02.000 --> 00:22:03.840
So there is Weinre.

00:22:03.840 --> 00:22:07.966
It's one of those things that
you wish just didn't ever

00:22:07.966 --> 00:22:09.590
exist, but at the
same time you love it

00:22:09.590 --> 00:22:13.090
because it's kind
of a last resort.

00:22:13.090 --> 00:22:15.820
You can get it from MPM, install
it, and just add a script tag,

00:22:15.820 --> 00:22:18.050
and it'll just start
basically giving you

00:22:18.050 --> 00:22:21.900
really basic debugging.

00:22:21.900 --> 00:22:25.780
So if you've got nothing
else, give it a go.

00:22:25.780 --> 00:22:31.980
For the Android web view,
there's also this JSHybugger.

00:22:31.980 --> 00:22:35.560
And it does some really
quite clever stuff

00:22:35.560 --> 00:22:40.275
that essentially allows
you to debug the web

00:22:40.275 --> 00:22:42.440
view using Chrome DevTools.

00:22:42.440 --> 00:22:49.380
So I have my ever useful
Touch Example application,

00:22:49.380 --> 00:22:51.690
which I can show you there.

00:22:51.690 --> 00:22:54.810
And I drag that down, and
the little Android pops up.

00:22:54.810 --> 00:22:57.450
That's literally all it does.

00:22:57.450 --> 00:23:10.380
But if I go into Chrome Inspect
and fumble about a bit-- there

00:23:10.380 --> 00:23:18.500
we go-- you should see
that-- oh, come on-- you

00:23:18.500 --> 00:23:22.780
get this JSHybugger that
comes up in about inspect.

00:23:22.780 --> 00:23:27.579
So this is just the
everyday Android web view.

00:23:27.579 --> 00:23:29.370
But one of the really
nice things with this

00:23:29.370 --> 00:23:37.380
is you can go in, as
you would before, change

00:23:37.380 --> 00:23:40.112
various aspects of
the entire thing.

00:23:40.112 --> 00:23:42.430
I accidentally fumbled
around and found this,

00:23:42.430 --> 00:23:44.720
but you can actually
put breakpoints

00:23:44.720 --> 00:23:46.370
into the JavaScript.

00:23:46.370 --> 00:23:50.450
So that point, I've put a break
on changeState, ENDING_TOUCH.

00:23:50.450 --> 00:23:52.190
So the minute I
left off, it just

00:23:52.190 --> 00:23:55.520
starts going, hey,
what do you want to do.

00:23:55.520 --> 00:24:00.390
But it comes with the whole
set of really nice features

00:24:00.390 --> 00:24:04.030
that Weinre simply doesn't have.

00:24:04.030 --> 00:24:06.320
So if you're getting
to this point

00:24:06.320 --> 00:24:11.352
where Android web view and
Weinre just doesn't work,

00:24:11.352 --> 00:24:13.370
it's definitely worth
checking JSHybugger.

00:24:13.370 --> 00:24:15.190
And there's also a
plug-in for Cordova.

00:24:15.190 --> 00:24:16.969
So you can literally
add the plug-in,

00:24:16.969 --> 00:24:18.260
and you get all of that set up.

00:24:25.315 --> 00:24:27.440
The last thing that I wanted
to talk about in terms

00:24:27.440 --> 00:24:31.160
of emulation is the
notion of, basically,

00:24:31.160 --> 00:24:34.950
throttling your network to see
what a user might be getting.

00:24:34.950 --> 00:24:37.060
This video is an old
version of my website,

00:24:37.060 --> 00:24:40.320
and essentially,
one side has Wi-Fi.

00:24:40.320 --> 00:24:42.100
The other side
has 2G connection.

00:24:42.100 --> 00:24:44.672
Guess which one is which?

00:24:44.672 --> 00:24:46.130
And the really nice
thing with this

00:24:46.130 --> 00:24:48.200
is it's easy to forget
that, one way or another,

00:24:48.200 --> 00:24:51.180
network speed is going
to be a real big variable

00:24:51.180 --> 00:24:52.470
for your users.

00:24:52.470 --> 00:24:55.222
And what I particularly like is
the notion of if you're showing

00:24:55.222 --> 00:24:57.055
text and it's actually
appearing really fast

00:24:57.055 --> 00:24:59.580
but you're basically waiting
for a heavy background image

00:24:59.580 --> 00:25:03.210
to load up, you can just
apply a dark background,

00:25:03.210 --> 00:25:05.900
and hopefully things
will appear a bit faster.

00:25:05.900 --> 00:25:07.540
This is a nice way
of just giving you

00:25:07.540 --> 00:25:10.860
access to see that that's
going to have an effect.

00:25:10.860 --> 00:25:13.620
Same with if you actually
spend time smooshing down

00:25:13.620 --> 00:25:15.560
all your resources.

00:25:15.560 --> 00:25:18.480
You can actually see
the benefit of it.

00:25:18.480 --> 00:25:21.270
The link at the bottom is
for Matt Gemmel's blog post

00:25:21.270 --> 00:25:24.580
of network link
conditioning, which is OSX.

00:25:24.580 --> 00:25:28.914
But Charles Proxy seems to
be the cross-platform option

00:25:28.914 --> 00:25:30.330
for throttling
your network speed.

00:25:36.270 --> 00:25:37.160
There we go.

00:25:37.160 --> 00:25:39.706
So that, for me,
is the whole suite

00:25:39.706 --> 00:25:41.080
of things for
mobile development.

00:25:41.080 --> 00:25:43.630
Find a flow that works
for you on desktop

00:25:43.630 --> 00:25:47.480
and then gives you the extra
tools that you want for mobile.

00:25:47.480 --> 00:25:50.700
I'd say consider having a
little look at Device Lab

00:25:50.700 --> 00:25:53.340
and having a play with
it because, for me, it

00:25:53.340 --> 00:25:57.320
was one thing that really became
apparent as being an issue.

00:25:57.320 --> 00:25:58.944
And then emulation,
just try and get

00:25:58.944 --> 00:26:00.360
yourself set up
with the emulators

00:26:00.360 --> 00:26:04.560
that you know you're
probably going to want to use

00:26:04.560 --> 00:26:08.750
and just try and treat it
as a part of your workflow.

00:26:08.750 --> 00:26:11.780
So that's all I
was going to say.

00:26:11.780 --> 00:26:17.860
I've included-- there we go--
some links, the GitHub link

00:26:17.860 --> 00:26:21.880
for the Mini Device Lab,
Mobile on HTML5Rocks.

00:26:21.880 --> 00:26:24.660
There's also my Google I/O
talk on modern workflow,

00:26:24.660 --> 00:26:29.420
and then Addy Osmani has
done another awesome set

00:26:29.420 --> 00:26:32.650
of presentations on
modern workflow as well.

00:26:32.650 --> 00:26:34.315
So that all I wanted to say.

00:26:34.315 --> 00:26:35.330
And thank you very much.

00:26:35.330 --> 00:26:41.314
[APPLAUSE]

00:26:41.314 --> 00:26:42.230
JAKE: Excellent stuff.

00:26:42.230 --> 00:26:44.180
So it's now another break.

00:26:44.180 --> 00:26:46.290
The breakout sessions
that are happening later,

00:26:46.290 --> 00:26:49.510
they've been selected
based on your votes.

00:26:49.510 --> 00:26:52.180
If you want to know where
they are going to take place,

00:26:52.180 --> 00:26:55.175
you can go to
bit.ly/cdsbreakouts.

00:26:55.175 --> 00:26:57.050
But they're also listed
on the board outside,

00:26:57.050 --> 00:26:58.430
so you can just
have a look there.

00:26:58.430 --> 00:27:00.140
Some of them are going to
be in here, but some of them

00:27:00.140 --> 00:27:01.223
are going to be elsewhere.

00:27:01.223 --> 00:27:04.550
So you can find out which
ones you want to take part in.

00:27:04.550 --> 00:27:07.270
So Paul and Matt are
going to be upstairs doing

00:27:07.270 --> 00:27:08.380
Q&amp;A during the break.

00:27:08.380 --> 00:27:10.970
So if you have any questions to
ask them, they'll be up there.

00:27:10.970 --> 00:27:14.100
And then we're back at 3:30
when the Chrome and Android

00:27:14.100 --> 00:27:16.220
leads are going to be--

