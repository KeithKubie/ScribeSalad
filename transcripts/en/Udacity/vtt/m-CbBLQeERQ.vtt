WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:05.660
The keyword when I describe the, the performance loss in micro kernel-based

00:00:05.660 --> 00:00:09.060
operating system structure is the potential

00:00:09.060 --> 00:00:12.050
for performance loss. What L3 micro kernel

00:00:12.050 --> 00:00:17.880
does is by proof of construction, they show that they can debunk the

00:00:17.880 --> 00:00:20.520
myths about micro kernel-based operating system

00:00:20.520 --> 00:00:25.260
structure. Now, L3 micro-kernel, being a micro-kernel,

00:00:25.260 --> 00:00:29.615
has a minimal set of abstractions. Has address space, threads,

00:00:29.615 --> 00:00:34.750
inter-process communication, and a service for providing unique IDs

00:00:34.750 --> 00:00:40.320
for subsystems that live on top of the micro-kernel. The exact details of these

00:00:40.320 --> 00:00:45.820
mechanisms provided by L3 micro-kernel is not that critical,

00:00:45.820 --> 00:00:50.450
but the important thing is the micro-kernel provides the

00:00:50.450 --> 00:00:55.256
minimal set of abstractions as we've been always talking about. Namely address

00:00:55.256 --> 00:01:00.440
space, threads, inter-process communication, and UID.

00:01:00.440 --> 00:01:04.519
And L3 argues that these are fundamental

00:01:04.519 --> 00:01:11.290
abstractions that any subsystem that lives on top of the micro-kernel, or any

00:01:11.290 --> 00:01:13.710
subsystem that you want to implement

00:01:13.710 --> 00:01:16.680
in the general purpose operating system requires

00:01:16.680 --> 00:01:21.615
these facilities. And therefore, L3 argues that

00:01:21.615 --> 00:01:24.370
micro-kernels should provide this as the minimal set

00:01:24.370 --> 00:01:27.730
of abstractions. How they actually provide it may

00:01:27.730 --> 00:01:30.090
differ from one micro-kernel to the other. But

00:01:30.090 --> 00:01:32.380
the important takeaway is that, this is the

00:01:32.380 --> 00:01:35.793
minimal set of abstractions that a micro-kernel should

00:01:35.793 --> 00:01:39.250
provide. Now let's talk about the system services.

00:01:39.250 --> 00:01:41.840
Now, as I mentioned in the previous slide,

00:01:41.840 --> 00:01:44.520
the system services have to be

00:01:44.520 --> 00:01:48.190
distinct protection domains. Protected from one another

00:01:48.190 --> 00:01:53.870
and protected from the applications that live on top of the operating system.

00:01:53.870 --> 00:01:59.850
And of course, we have this hard line between the applications and the

00:01:59.850 --> 00:02:04.860
servers providing the services and the micro-kernel.

00:02:04.860 --> 00:02:06.900
This is the structure of a micro-kernel

00:02:06.900 --> 00:02:09.160
based operating system. So what is

00:02:09.160 --> 00:02:13.170
different about every micro-kernel. The key distinction

00:02:13.170 --> 00:02:19.080
is that each of these services of the operating system. They have to be

00:02:19.080 --> 00:02:22.750
in their own protection domain, not necessarily

00:02:22.750 --> 00:02:25.960
distinct hardware address spaces. The point L3

00:02:25.960 --> 00:02:29.290
establishes by proof of construction, is that

00:02:29.290 --> 00:02:32.311
there are ways to construct a micro-kernel

00:02:32.311 --> 00:02:34.750
based operating system providing these

00:02:34.750 --> 00:02:38.840
services. Efficiently, knowing the features of

00:02:38.840 --> 00:02:44.540
the hardware platform. In other words, L3's argument is, it's all about

00:02:44.540 --> 00:02:49.996
efficient implementation of the micro-kernel and not the principle of a

00:02:49.996 --> 00:02:54.940
micro-kernel based operating system structure. So

00:02:54.940 --> 00:02:58.340
to fully understand how L3 micro-kernel

00:02:58.340 --> 00:03:03.560
goes about systematically debunking the myths about micro-kernel based operating

00:03:03.560 --> 00:03:08.765
system structure, we have to understand, the strikes against the micro-kernel.

