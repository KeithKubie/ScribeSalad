WEBVTT
Kind: captions
Language: en

00:00:00.319 --> 00:00:01.379
Mano Marks: &gt;&gt; Hi, everybody.

00:00:01.379 --> 00:00:02.539
My name is Mano Marks.

00:00:02.939 --> 00:00:06.909
I'm here to talk to you about building scalable geo web applications.

00:00:07.420 --> 00:00:13.309
With me is Keith Golden and Jeffrey Sambells and they are going to be handling different portions of it.

00:00:13.509 --> 00:00:20.090
Normally when I give these kinds of presentations I like to encourage questions during and I'm not going to do that

00:00:20.090 --> 00:00:20.839
this time.

00:00:20.840 --> 00:00:27.399
We have a lot of -- a lot of area to cover and so we're gonna save questions for the end.

00:00:27.879 --> 00:00:34.049
So, please, if you want, there's a -- you know, there's a moderator page for questions if you'd like, if you have a

00:00:34.049 --> 00:00:35.189
question and you don't wanna forget it.

00:00:35.939 --> 00:00:37.110
Put it in there and we'll get to those.

00:00:37.270 --> 00:00:42.349
And also at the end we'll have, uh, questions for the microphones.

00:00:42.729 --> 00:00:48.209
So, I'm gonna go ahead and get started.

00:00:48.209 --> 00:00:49.078
Okay.

00:00:48.340 --> 00:00:53.429
So, I'm gonna spend a little bit of time talking about what it means to be scalable.

00:00:57.039 --> 00:01:04.769
The main problem with building a web application these days is that from my point of view people end up actually using

00:01:04.769 --> 00:01:07.269
it.

00:01:07.269 --> 00:01:10.979
And the danger in people actually using it is then your application might go down.

00:01:11.389 --> 00:01:17.819
I think everybody here has heard the term "slash dotted" where your application gets posted to Slashdot, or Digg, or

00:01:17.819 --> 00:01:24.309
some other -- some other popular web site and then a whole bunch of people go to it and then it overwhelms your

00:01:24.309 --> 00:01:24.699
servers.

00:01:25.659 --> 00:01:34.599
So, what we're gonna talk about today is how you can take that load off of you and your servers and put them onto us.

00:01:35.529 --> 00:01:38.389
So, we have three basic approaches to that which I'll mention.

00:01:38.389 --> 00:01:41.799
But let me just quickly run through some of these difficulties.

00:01:44.610 --> 00:01:46.369
Well, the big one in the center is the users.

00:01:46.629 --> 00:01:48.489
The users are the main problem, as I said.

00:01:49.430 --> 00:01:55.389
If you have to build your own application infrastructure, if you have to build your own servers, you have to

00:01:55.869 --> 00:02:03.089
load-balance, maintain your machines, you have to invest a lot of time, energy, and money.

00:02:03.089 --> 00:02:04.400
You have to shard your databases.

00:02:04.669 --> 00:02:12.730
You have to spend all this time doing things that are not building web applications but really maintaining it and

00:02:12.730 --> 00:02:14.199
making sure that it stays up.

00:02:14.190 --> 00:02:17.260
Now, some people really love doing that and a lot of them work for us.

00:02:17.910 --> 00:02:23.770
I'm guessing that a lot of you don't like doing that and would rather just focus on the content creation.

00:02:23.889 --> 00:02:28.520
And that's where we're gonna talk about.

00:02:28.520 --> 00:02:29.151
Okay.

00:02:28.889 --> 00:02:37.520
So, a few things to think about in terms of building scalable Geo applications in particular you want multi-format

00:02:37.550 --> 00:02:37.960
output.

00:02:38.029 --> 00:02:45.169
That is, you wanna be able to serve it in Google Maps, in KML, in open layers and whatever -- in whatever formats that

00:02:45.169 --> 00:02:45.410
you can.

00:02:46.199 --> 00:02:48.619
You wanna be able to do specialized spatial queries.

00:02:49.350 --> 00:02:56.960
So, uh, be able to do bounding box queries at least. You know, radial searches, that kind of thing.

00:02:56.949 --> 00:02:58.529
You want it to be highly customizable.

00:02:58.529 --> 00:03:05.630
That is, I'm guessing the vast majority of you wanna do your own applications, run your own applications, and have it

00:03:05.630 --> 00:03:06.440
be special to you.

00:03:06.990 --> 00:03:10.809
And, you know, as programmers you have your own quirks and things you wanna do.

00:03:12.930 --> 00:03:19.610
And sometimes you wanna rely on open Geo standards, like KML and GRSS.

00:03:19.610 --> 00:03:22.240
So that goes along with the multiple format output.

00:03:22.240 --> 00:03:31.230
So, here I'm gonna -- here's the handy dandy little matrix where you see I cleverly highlighted in blue, the answer.

00:03:33.479 --> 00:03:41.179
But basically we're gonna talk about App Engine, the Google Maps Data --the Google -- I'm sorry, the Maps Data API and

00:03:41.180 --> 00:03:41.400
Google Base.

00:03:41.400 --> 00:03:45.900
I'm gonna talk about the advantages and disadvantages of them.

00:03:46.540 --> 00:03:54.769
And you'll see that for the most part we have a very good coverage and we're gonna talk about some of the weaknesses

00:03:55.089 --> 00:03:56.040
as we go along as well.

00:03:59.050 --> 00:03:59.291
Okay.

00:03:59.809 --> 00:04:04.229
I'm gonna talk about Google Base and I'm doing this first because I kinda wanna get it out of the way.

00:04:05.150 --> 00:04:13.470
There's a number of people who just want to give data to Google and have Google store it and then do something with

00:04:13.580 --> 00:04:13.619
it.

00:04:13.729 --> 00:04:20.809
And we have this giant -- what I think of as this giant XML repository called Google Base, the back end of a lot of

00:04:20.899 --> 00:04:27.540
services that you might have used like the Google product search, which I still wanna call Froogle, and various other

00:04:27.540 --> 00:04:28.290
things.

00:04:28.290 --> 00:04:33.100
It's got -- it's the back end, like a said, for a lot of our services.

00:04:33.309 --> 00:04:41.029
If you put data into it, it becomes easily discoverable in search and it supports bounding box and radius searches.

00:04:41.369 --> 00:04:46.149
It's got a Google Data API. It's got a lot of things that you want.

00:04:46.480 --> 00:04:54.139
One of the things I wanna point out in the end is the upload times can be Kind of long.

00:04:54.140 --> 00:05:03.570
So, fundamentally, when we're talking about the Google Data API for Google Base, Google Data -- Google Data is one of

00:05:03.570 --> 00:05:10.690
our basic protocols for accessing Google services -- data and Google services.

00:05:10.690 --> 00:05:16.089
So, I wanna mention that for Base.

00:05:16.089 --> 00:05:22.390
It's got a lot of Google Data API which means it supports a lot client libraries that we've already good for that.

00:05:22.959 --> 00:05:31.440
There's a lot of support in general for the Google Data API's but there's not a ton specifically for Base so this is

00:05:31.440 --> 00:05:34.739
one of the reasons we don't encourage people to use it a lot.

00:05:34.739 --> 00:05:40.959
I wanna point out here, just give you some code samples here.

00:05:41.399 --> 00:05:44.449
This is how you put an item into Base.

00:05:45.130 --> 00:05:47.730
This is a personal ad.

00:05:47.730 --> 00:05:50.349
A surprising number of personal ads in Google Base, actually.

00:05:50.640 --> 00:05:52.699
I think that's to increase their discoverability.

00:05:53.149 --> 00:06:01.100
A lot of the search engines like Hot Or Not put their data into Google Base.

00:06:01.489 --> 00:06:08.279
You'll see here there's an atom entry it's got a title, it's got an item type, location, gender, marital status.

00:06:08.279 --> 00:06:14.729
You see, there's a lot of sort of customizable but also a lot of standard attribute data.

00:06:14.730 --> 00:06:16.679
I'm gonna just mention this briefly.

00:06:16.679 --> 00:06:18.100
I'm an XML head.

00:06:19.589 --> 00:06:26.799
AtomPub, which is the basis for Google Data API's uses this term "attribute" and, of course, in XML, attribute means

00:06:26.799 --> 00:06:27.910
something completely different.

00:06:29.239 --> 00:06:33.659
But basically an attribute is like you see here, location, gender, marital status.

00:06:34.070 --> 00:06:43.739
So, to repeat what I said earlier, there's a number of standard attributes and then there's also you can customize

00:06:43.739 --> 00:06:45.309
your own personal attributes.

00:06:45.470 --> 00:06:54.429
So, you can basically treat it as a big schema-less data store.

00:06:54.429 --> 00:06:56.619
And then here's a sample spatial query.

00:06:56.709 --> 00:07:08.259
So, of the products I'm gonna talk about at the moment, Base actually has the best spatial query support built in.

00:07:08.260 --> 00:07:11.529
That's important, that phrase "built in."

00:07:13.059 --> 00:07:18.510
And that's that it will allow you to do bounding box and radius searches based on a straight up query.

00:07:19.419 --> 00:07:27.199
So, you'll see here, this is one long URL that I've broken out into these three lines here.

00:07:27.690 --> 00:07:29.459
So, you've got your basic snippets.

00:07:30.730 --> 00:07:40.309
You've got the query, which tells the type, and then the location, and that's how you get a -- that's how you get all

00:07:40.309 --> 00:07:50.959
the personal ads within a certain -- within a radius of that, those latitude and longitude coordinates.

00:07:50.959 --> 00:07:51.769
Okay.

00:07:51.149 --> 00:07:54.709
I'm gonna talk now about App Engine.

00:07:56.600 --> 00:08:02.410
So, Google App Engine is one of our premier developer platforms right now.

00:08:02.769 --> 00:08:09.100
I think you probably have seen the number of different sessions that are available on Google App Engine.

00:08:09.820 --> 00:08:19.000
You'll have seen -- during keynote they announced that we've now opened up the Java Runtime to anybody who wants to

00:08:19.000 --> 00:08:20.489
sign up for it.

00:08:20.489 --> 00:08:27.660
So, we're putting a lot of energy and effort into App Engine which we're not doing quite as much for Base.

00:08:29.720 --> 00:08:35.900
So, what you have in it is a high-performance, high-availability, easy development server.

00:08:35.900 --> 00:08:39.729
You can use Python or Java on it.

00:08:39.789 --> 00:08:43.289
It's free to get started and it's built on Google infrastructure.

00:08:43.289 --> 00:08:49.309
And when I say that, they're all built on Google infrastructure but you're actually building applications in a way

00:08:49.309 --> 00:08:52.650
very similar to the way that we build applications at Google.

00:08:53.200 --> 00:08:58.559
And, in fact, a number of our applications, like Google Moderator, are actually built on top of Google App Engine.

00:08:59.510 --> 00:09:07.650
So, basically with Google App Engine, you run your own applications but you're running them on our servers and we

00:09:07.650 --> 00:09:20.400
handle all the issues on scaling and denial of service attacks, and all those kind of things, and backups.

00:09:20.650 --> 00:09:26.979
So, here are the advantages of it: It's built for scaling, it's replicated in data centers around the world, you can

00:09:26.979 --> 00:09:35.420
use standard Python or Java libraries, although I will point out that you can't use anything that relies on C

00:09:35.419 --> 00:09:44.229
libraries which unfortunately takes out a lot of the standard Geo -- Geo libraries like GDAL, OGR from use.

00:09:45.260 --> 00:09:47.570
We have easy authentication.

00:09:47.739 --> 00:09:53.130
You can authenticate using Google accounts very easily, and it's highly customizable.

00:09:53.130 --> 00:10:01.850
Anybody running the application would have no idea that they were – they were running it unless you told them.

00:10:01.849 --> 00:10:06.510
Disadvantages for spatial Applications is that it's very limited spatial support in queries.

00:10:09.619 --> 00:10:14.559
And particularly it has limitation on inequality queries.

00:10:14.559 --> 00:10:22.059
So, you build a model and put it into the -- of something -- you put an entity into the data store, it has a number of

00:10:22.059 --> 00:10:22.500
properties.

00:10:23.750 --> 00:10:31.309
When you do a query on that, analogous to a relational data base but not the same, you do a query on the different

00:10:31.309 --> 00:10:35.979
properties, and you're only allowed one inequality on one property.

00:10:36.669 --> 00:10:36.869
Sorry.

00:10:37.059 --> 00:10:39.039
You're only allowed inequality on one property.

00:10:39.520 --> 00:10:46.309
So, what you could do is you could say, give me everything with a latitude between X and Y.

00:10:46.309 --> 00:10:50.730
So, that's an inequality on one property greater than X less than Y.

00:10:50.729 --> 00:10:55.670
But you couldn't then do an inequality on longitude.

00:10:55.960 --> 00:10:59.770
And the reason for this is that's it's built on top of a highly distributed database.

00:11:00.149 --> 00:11:07.989
These things -- you're creating an index which might span multiple machines and there's no way to keep track of two

00:11:07.989 --> 00:11:14.079
properties in that query -- in that index.

00:11:14.080 --> 00:11:21.419
And that's just fundamentally we're giving -- we're exposing to you one of the limitations that we also work with in

00:11:21.419 --> 00:11:24.849
building applications.

00:11:24.849 --> 00:11:34.279
It's also a very different way of building applications than most people who start out developing a -- an app -- a

00:11:34.289 --> 00:11:36.279
spatial application to start out with.

00:11:36.469 --> 00:11:39.000
It's not -- you can't use post AIS, you're using our data store.

00:11:39.000 --> 00:11:44.049
You can't use any of the standard spatial databases or libraries.

00:11:44.339 --> 00:11:48.369
You're really creating a kind of cooler way of doing things.

00:11:48.599 --> 00:11:59.090
But you're working within these limitations and you're doing it in a way that would be unfamiliar to most of you.

00:11:59.089 --> 00:12:08.330
So, let me show you a few code samples from Google App Engine and then talk about approaches that people have made to

00:12:08.679 --> 00:12:12.609
get beyond these limitations.

00:12:13.399 --> 00:12:15.039
So, this is a very simple model.

00:12:15.039 --> 00:12:22.849
You see it, you've got the import, class myLocation, you give it a name, and a location.

00:12:23.520 --> 00:12:26.979
You'll see right there it's got this Geo point property that sounds very exciting.

00:12:26.979 --> 00:12:30.549
When I first saw that I got very -- I was very excited and I thought great!

00:12:30.549 --> 00:12:31.690
We're gonna have great spatial queries.

00:12:31.690 --> 00:12:41.229
Unfortunately, you don't get very much for that.

00:12:41.229 --> 00:12:42.959
So, here's a simple query to the data store.

00:12:43.419 --> 00:12:51.390
After you've put any item into a data store, you use a GQL data query, a language and you would just say

00:12:51.390 --> 00:12:55.849
MyLocation.gql where name equals something.

00:12:55.849 --> 00:13:00.059
And that -- that colon one and "foo", that's a substitution process.

00:13:00.059 --> 00:13:06.159
So, let's see, did I put in a slide out of order?

00:13:06.159 --> 00:13:07.839
No, I did not.

00:13:07.839 --> 00:13:08.249
Okay.

00:13:08.250 --> 00:13:12.079
So, the only thing that this geo point property gets you is ordering.

00:13:12.770 --> 00:13:22.839
So, if you order your query by the location property you'll get things in order from north to south, and then east to

00:13:22.839 --> 00:13:27.519
west. North to south, east to west.

00:13:27.520 --> 00:13:28.260
Okay.

00:13:28.260 --> 00:13:29.739
All right.

00:13:29.750 --> 00:13:38.350
So, let's talk about some of the approach -- I'm gonna talk about two approaches that people use to get around this.

00:13:38.349 --> 00:13:39.820
One -- the first one is Geohashing.

00:13:39.890 --> 00:13:42.739
This is a fairly common approach right now.

00:13:43.339 --> 00:13:46.659
I was talking with people just last week at Ware Camp.

00:13:46.769 --> 00:13:49.919
Somebody was saying they built on this.

00:13:49.919 --> 00:13:57.799
It's -- Geohashing is you take the latitude and longitude and you hash them together to create a single value.

00:13:58.719 --> 00:14:07.919
So, in one inequality query, you can query based on a string match on this hash and you use only the one inequality

00:14:08.339 --> 00:14:11.580
query -- inequality in your query.

00:14:12.500 --> 00:14:20.609
So, it's built on an open source library which is available in Python which means it's easy to use and very easy to

00:14:20.609 --> 00:14:27.039
plug in and basically allows you to do a simple radius search on your properties.

00:14:28.169 --> 00:14:33.059
I'm not gonna show you an example of it 'cause there's a few places where it falls down, particularly around the

00:14:33.059 --> 00:14:41.989
International Date Line and the disadvantage is it still uses your one inequality query.

00:14:41.989 --> 00:14:46.869
So, the idea is to allow you to do an inequality query on some other property.

00:14:46.869 --> 00:14:49.619
Say you're doing a real estate search.

00:14:50.149 --> 00:14:58.299
You wanna get all houses within a certain radius but you also want to get them at costs between a hundred thousand and

00:14:58.299 --> 00:15:07.179
$250,000 which precludes you from getting a place in the Bay Area but you know, that's my point.

00:15:07.190 --> 00:15:07.461
Okay.

00:15:07.919 --> 00:15:10.729
So, let me talk to you a moment about Geo Model.

00:15:10.830 --> 00:15:16.199
This was actually developed by Roman Nurik, who is sitting in the audience today. We can all cheer him.

00:15:17.380 --> 00:15:29.570
This is a -- the approach here is to pre-confute something's location, essentially, dividing the world into a 16 by 16

00:15:29.570 --> 00:15:32.039
grid and then each of those things into a 16 by 16 grid.

00:15:32.500 --> 00:15:37.109
Basically it's a quad-tree, but it's a 16-tree instead of a four, whatever that would be.

00:15:39.570 --> 00:15:45.539
And then you assign your entity to a cell at each different zoom level.

00:15:45.539 --> 00:15:51.869
So, that's a basic approach. And then when you're doing a query you basically figure out which zoom you're at and pick

00:15:51.869 --> 00:16:00.590
out the individual -- the individual cells that are appropriate for your bounding box and then you have -- then you

00:16:00.589 --> 00:16:03.099
find everything that matches that.

00:16:03.099 --> 00:16:09.669
And the advantage is that it places -- you're doing equality queries instead of inequality queries.

00:16:09.669 --> 00:16:15.639
You're saying give me everything in this cell, and that cell, and that cell, and that cell, and that way you build up

00:16:15.799 --> 00:16:23.039
a result set that you can then return to the user.

00:16:23.049 --> 00:16:30.929
So, the advantage is it doesn't use the inequality query, and it's customizable different zoom levels, resolutions,

00:16:30.929 --> 00:16:31.469
and grids.

00:16:31.609 --> 00:16:38.409
It's also, by the way, an open source library so you can customize the library however you want, develop your own

00:16:38.409 --> 00:16:43.890
algorithms for assigning cell numbers.

00:16:43.890 --> 00:16:51.010
The disadvantage is it's kind of complex and it also doesn't scale as well with other geometry types.

00:16:51.179 --> 00:16:53.789
Right now it's optimized for -- for point data.

00:16:56.039 --> 00:17:00.580
So, it's hard to give it to somebody and say, here, get started with this.

00:17:01.640 --> 00:17:07.750
There's a learning curve that's involved.

00:17:07.749 --> 00:17:14.009
So, I've got some code in here and I don't have a ton of time because I wanna give Keith and Jeffrey the bulk of this

00:17:14.269 --> 00:17:16.669
time to talk about the Maps Data API.

00:17:16.669 --> 00:17:24.869
But just to give you some -- give you this and then when these slides go up and they're published then you can go

00:17:24.869 --> 00:17:26.219
through some of the code.

00:17:26.259 --> 00:17:33.979
Or you can go directly to look up Geo Model on Google Code site.

00:17:33.979 --> 00:17:39.000
And let me -- I just wanna give you a short example of this work here.

00:17:39.659 --> 00:17:43.739
This is geomodeldemo@appspot.com.

00:17:43.739 --> 00:17:51.209
And what Roman did is he took Geo names, took the database from Geo names and took a whole bunch of locations, I think

00:17:51.209 --> 00:18:01.739
just in the United States, and uploaded them to App Engine. I think they had a hundred thousand-ish records, something

00:18:01.739 --> 00:18:02.049
like that.

00:18:03.939 --> 00:18:14.139
So, we'll do a search center of San Francisco, California, and do a search.

00:18:14.139 --> 00:18:23.380
So, you'll see that it's -- it kinda chews through quite a big data store and comes up with top ten results or so and

00:18:23.379 --> 00:18:26.789
then also puts the center in there.

00:18:26.789 --> 00:18:41.309
And now we're gonna do an inequality query, the minimum population, so something greater than 50,000.

00:18:41.309 --> 00:18:52.929
And so here it finds the locations and the Geo name database that have populations of 50,000 or more within a radius

00:18:53.219 --> 00:18:58.869
of San Francisco – setting the center at San Francisco, and displays it on the map.

00:18:58.869 --> 00:19:08.119
And you'll see that his demo also very nicely then figures out what the bounds are of that search and resets the map

00:19:08.339 --> 00:19:10.219
to it.

00:19:10.219 --> 00:19:11.979
Okay.

00:19:11.979 --> 00:19:20.510
And I think that is it for Google App Engine.

00:19:20.509 --> 00:19:21.719
So, I'm gonna hand this over to Keith.

00:19:21.719 --> 00:19:29.889
Keith Golden: &gt;&gt; Hi, I'm Keith Golden. I'm a tech lead of the -- of Google My Maps team

00:19:29.889 --> 00:19:37.499
and more generally more user generated content efforts within Google.

00:19:41.099 --> 00:19:51.849
And I'm very pleased to say that a few weeks ago we launched publicly the Google Maps Data API.

00:19:51.849 --> 00:19:53.010
So, what exactly is this?

00:19:53.009 --> 00:20:00.400
Mano talked about the -- how Google Base has a Google Data API.

00:20:00.399 --> 00:20:03.609
So, this is a Google Data API specifically for Google Maps.

00:20:06.009 --> 00:20:17.109
So, specifically, it's designed for storing geospatial content and it works closely with a number of maps capabilities

00:20:18.419 --> 00:20:20.329
so in particular it works with My Maps.

00:20:21.369 --> 00:20:28.029
Anything that you create using the My Maps editor within Google My Maps you can access using the Google Maps Data API

00:20:29.389 --> 00:20:29.989
and vice versa.

00:20:29.989 --> 00:20:33.709
Anything that you create using the Data API is accessible via My Maps.

00:20:35.589 --> 00:20:38.709
Now, all Google Data APIs are essentially AtomPubs.

00:20:38.809 --> 00:20:53.129
So, this is an atom, you know, it's basically a standard XML representation for both getting and modifying data.

00:20:53.129 --> 00:21:00.520
We currently support three types of geometry: point, polyline, and polygon geometry.

00:21:01.189 --> 00:21:09.629
Basically what we support right now is effectively limited to what you can actually display in Google Maps with My

00:21:09.629 --> 00:21:12.689
Maps but we don't intend to stop there.

00:21:15.899 --> 00:21:25.880
And anything that you create that you indicate as public will be searchable on Google Maps so we index it all for you

00:21:27.379 --> 00:21:36.339
and we make it searchable for people who go to maps@Google.com.

00:21:36.339 --> 00:21:41.309
We do provide a few capabilities that are not currently part of the My Maps user interface.

00:21:41.309 --> 00:21:49.140
So, for instance, we support user-defined attributes which can have some structure to them.

00:21:49.209 --> 00:22:01.149
You can define a type for your data, for instance, and units. We support efficient batch operations, and we also

00:22:01.149 --> 00:22:05.569
support efficient, kind of incremental operations if you have an application.

00:22:05.719 --> 00:22:10.989
So, for instance, you know, you all have one of these little toys.

00:22:10.989 --> 00:22:14.459
We have a couple of applications written for the Android.

00:22:14.459 --> 00:22:18.499
That's My Maps editor and an application called My Tracks.

00:22:18.499 --> 00:22:22.089
Both of these applications use the Google Maps Data API.

00:22:22.089 --> 00:22:32.179
And one of the problems with a mobile application is you might have a very large amount of data but you don't wanna be

00:22:32.179 --> 00:22:37.649
sending a very large amount of data continuously over very limited bandwidth.

00:22:39.489 --> 00:22:43.549
But you want -- always want your data to be fresh.

00:22:43.549 --> 00:22:53.219
So, I might have, you know, thousands -- hundreds of thousands, you know, perhaps millions of points, but maybe only a

00:22:53.219 --> 00:22:57.829
few of them have been updated recently and so I only want the few that were updated.

00:22:59.609 --> 00:23:06.389
And similarly if I make a few edits on my phone, I just wanna send those edits over. The latter is something that

00:23:06.389 --> 00:23:17.789
works very naturally with AtomPub and the former is something, you know, we support updated min and show deleted

00:23:18.129 --> 00:23:24.659
parameters which basically say, I can say give me everything that's been updated in the last minute and also let me

00:23:24.659 --> 00:23:25.839
know about things that were deleted.

00:23:30.459 --> 00:23:37.529
And, finally, one advantage of Google Data API is there are client libraries in a variety of languages.

00:23:37.949 --> 00:23:45.369
We have some custom libraries specifically for the Maps Data API.

00:23:45.369 --> 00:23:54.199
So, in AtomPub, you know, all the world is represented in terms of feeds and entries within those feeds.

00:23:55.339 --> 00:24:01.279
And so in the Google Maps API there are two types of feed, what we call maps feed and a features feed.

00:24:01.279 --> 00:24:06.149
In maps feed it's a list -- it's essentially a list of all your My Maps.

00:24:07.099 --> 00:24:15.780
A map is essentially a collection of features and a feature is some particular element that you put on the map.

00:24:15.779 --> 00:24:26.989
So, when I -- you know, if I request from the API My Maps feed, what that's giving me is a list of all the maps I own,

00:24:27.229 --> 00:24:37.659
very simple, some metadata, some access to your control information, title, and then the main thing that's of interest

00:24:37.769 --> 00:24:47.579
is in the content element of the entry there's a source attribute which is -- references a features feed.

00:24:47.579 --> 00:24:51.649
And the features feed lists all of the individual features within that map.

00:24:51.649 --> 00:24:59.139
So, it actually lists your maps, you use the maps feed, and to list the content of a map then you load the features

00:24:59.139 --> 00:25:00.199
feed.

00:25:00.199 --> 00:25:03.789
And the features feed also is fairly straightforward.

00:25:03.879 --> 00:25:12.789
There's not much in the way of kind of non-standard AtomPub attributes.

00:25:12.789 --> 00:25:25.359
Via the bulk of the information is specified in the content tag of the feature entry and the content is simply -- it's

00:25:25.359 --> 00:25:26.889
KML.

00:25:26.889 --> 00:25:37.619
So, KML is an open geo spatial consortium standard that was originally written for Google Earth and we don't currently

00:25:37.619 --> 00:25:39.159
support all of KML.

00:25:39.159 --> 00:25:41.309
We're actually working on supporting all of KML.

00:25:41.309 --> 00:25:46.649
Right now, as I said, we basically deal with the subset that you conveniently display in Google Maps.

00:25:46.649 --> 00:25:56.219
But we're working on kind of more 3-D geometry for Google Earth and some of the more interesting structure that KML

00:25:56.219 --> 00:25:57.219
supports.

00:25:57.969 --> 00:26:03.719
So, currently, we support three kind of geometry: line, polygon, and point geometry.

00:26:10.549 --> 00:26:15.939
All requests using the Maps Data API currently require authentication.

00:26:16.329 --> 00:26:20.889
We need to know who you are to know if you actually have the right to do what it is you're trying to do.

00:26:21.519 --> 00:26:28.899
So, for instance, editing a map that you own or that you have rights to edit.

00:26:30.219 --> 00:26:33.400
And there are three different choices for how you can do the authentication.

00:26:33.399 --> 00:26:45.909
There's AuthSub, OAuth, which is kind of open standard, and then ClientLogin which is appropriate for non-web

00:26:45.909 --> 00:26:49.289
applications like Java programs and useful for other purposes as well.

00:26:50.529 --> 00:26:58.369
And one just other important bit of useful information if you use ClientLogin it asks you for a service name and the

00:26:58.369 --> 00:26:59.559
service name for that is "local."

00:27:01.699 --> 00:27:07.449
So, this URL here is -- this is kinda the top-level entry point.

00:27:08.349 --> 00:27:16.929
If you send an authenticated request for this URL, this will list all of your My Maps, basically all the maps that you

00:27:16.929 --> 00:27:23.189
own, rather created through the API or in the My Maps user interface.

00:27:23.189 --> 00:27:30.719
And then from there you can drill down, you get other links that reference individual maps and then features within

00:27:30.719 --> 00:27:35.319
maps.

00:27:35.319 --> 00:27:45.119
In Google Data APIs we actually use four different HTTP actions. So, in addition to the normal "GET" and "POST"

00:27:45.489 --> 00:27:48.839
there's also "PUT" and "DELETE".

00:27:48.839 --> 00:27:56.369
So, if you send a "GET" request with this map’s URL this says give me a list of all my maps.

00:27:58.359 --> 00:28:07.399
If I do a "POST" to that URL, then that is used to create a map, to add a new map to the feed.

00:28:07.399 --> 00:28:15.789
If I do a "PUT" to the URL for a particular entry, so you get an entry URL back whenever you do a “POST,” then you can

00:28:15.789 --> 00:28:26.739
use that to edit the metadata of the map, and finally if you wanna delete a map just do an HTTP "DELETE".

00:28:26.749 --> 00:28:35.339
And you can also -- among the metadata you can specify the access control specifically whether it's, you know, public

00:28:35.379 --> 00:28:35.989
or unlisted.

00:28:37.769 --> 00:28:39.169
So, similarly, there's a feature feed.

00:28:39.169 --> 00:28:41.789
And, again, we support GET, POST, PUT and DELETE.

00:28:42.599 --> 00:28:50.199
GET will list all the features within a map, POST can be used to create a new feature, PUT to edit an existing

00:28:50.199 --> 00:28:52.889
feature, and then DELETE to remove a feature.

00:28:56.329 --> 00:29:07.419
And we -- in addition to the KML, we support a custom property element which allows you to define custom attributes

00:29:07.749 --> 00:29:17.949
for -- and again, as Mano said, there's confusion with XML terminology versus, you know, Google Data terms -- but you

00:29:17.949 --> 00:29:22.259
can define custom attributes for your features.

00:29:22.259 --> 00:29:25.619
So, here's an example.

00:29:25.619 --> 00:29:32.189
So, the interesting thing to note here is that actually most of this is just KML.

00:29:32.189 --> 00:29:36.669
So, basically what we're doing is taking a KML placemark and we're wrapping it up in an atom entry.

00:29:39.849 --> 00:29:54.349
And so, as I mentioned, anything that is public -- and public is the default -- anything that's public is going to be

00:29:54.819 --> 00:29:58.879
potentially searchable, you know, findable, on Google Maps.

00:29:58.879 --> 00:30:01.609
And you may not want that for everything.

00:30:02.259 --> 00:30:13.669
So, if you want your map not to be indexed you can use a app:draft tag which has to be wrapped up in an app:control to

00:30:14.109 --> 00:30:18.869
specify that this is something that's unlisted, that it is not for public consumption.

00:30:22.829 --> 00:30:25.659
Now, another important thing is attribution.

00:30:27.729 --> 00:30:30.379
Now, as I said, all these requests were authenticated.

00:30:30.379 --> 00:30:35.659
Whenever you add -- you create a new map, create a new feature, we know who you are.

00:30:36.309 --> 00:30:37.939
Or at least we think we know who you are.

00:30:40.109 --> 00:30:50.159
And so by default we always try to attribute any feature that was created to who the user is who uploaded that

00:30:50.159 --> 00:30:50.489
feature.

00:30:50.629 --> 00:30:52.669
But that might not be correct.

00:30:52.669 --> 00:30:53.009
Okay?

00:30:53.009 --> 00:31:00.089
Maybe you wanna create a Maps API site, community site for, say, bicycling maps.

00:31:00.889 --> 00:31:08.869
So you want everyone to go to your site and upload their bike route and you want everyone to be editing the same data.

00:31:09.299 --> 00:31:09.549
Right?

00:31:09.809 --> 00:31:18.029
And a logical way to do that is you have a single account and you've got some, you know, server running, some proxy,

00:31:18.189 --> 00:31:21.479
that is authenticating all of the users under that account.

00:31:22.499 --> 00:31:23.499
Right?

00:31:22.499 --> 00:31:32.009
So, the user isn't logging in as herself, you know, the user's logging in as you, basically.

00:31:33.589 --> 00:31:36.189
And then -- but you may have your own account management.

00:31:36.189 --> 00:31:38.999
You may know something about your users that we don't know.

00:31:40.109 --> 00:31:48.999
So, if you want to override the default attribution you can do so and there's a standard way to do that in KML.

00:31:48.999 --> 00:31:52.909
KML accepts is atom:author and atom:link tags.

00:31:54.229 --> 00:32:02.659
atom:author can be used to specify who the real author of something is and atom:link can be used to specify a web URL

00:32:02.979 --> 00:32:04.129
for this particular resource.

00:32:04.289 --> 00:32:11.839
'Cause by default we'll just -- if something shows up in search, we'll just, you know, point someone to the My Map

00:32:11.989 --> 00:32:15.319
that contains that data displayed in Google Maps but maybe you don't want that.

00:32:15.319 --> 00:32:23.489
Maybe you have your own API site to display that data in a more reasonable way using, you know, the custom attributes

00:32:23.489 --> 00:32:25.049
that you've defined.

00:32:25.059 --> 00:32:31.659
And so you can use these tags to customize that.

00:32:31.659 --> 00:32:40.049
Now, the examples, you know, I've shown you we're all HTTP and XML but you don't need to talk HTTP directly.

00:32:40.349 --> 00:32:43.389
There are our client libraries in a number of languages.

00:32:45.229 --> 00:32:56.509
Right now we have custom libraries in Java, Javascript, and as of yesterday we have Objective-C and other custom

00:32:56.509 --> 00:32:57.179
libraries are in the works.

00:32:57.349 --> 00:33:00.709
There's also generic libraries that also work.

00:33:03.269 --> 00:33:10.269
So, for instance, if you wanna do something in Python on App Engine, of course you can use the Java libraries in App

00:33:10.679 --> 00:33:11.359
Engine but if you wanna use

00:33:11.359 --> 00:33:13.519
Python there's a generic Python library.

00:33:13.779 --> 00:33:17.569
We don't yet have custom Python libraries but the generic ones will work.

00:33:18.659 --> 00:33:24.959
And Jeff is gonna be talking about a custom library for PHP that his company wrote.

00:33:27.819 --> 00:33:34.859
And finally right now all of the data is expressed in KML.

00:33:34.859 --> 00:33:41.439
We do intend to support other formats in the very near future but right now it's just KML.

00:33:41.439 --> 00:33:46.379
If you want code to help you parse the KML, we have that also available for download.

00:33:46.719 --> 00:33:49.779
There's something called live KML.

00:33:49.979 --> 00:33:57.719
The code is written in C++ but there's SWIG bindings for a variety of different languages.

00:33:57.719 --> 00:34:05.419
And here's just an example, a very simple kinda stupid program written in java just to show you how the client

00:34:05.419 --> 00:34:06.149
libraries work.

00:34:06.149 --> 00:34:11.459
So, the first thing we're doing is we're constructing a URL for a particular feed.

00:34:11.880 --> 00:34:17.840
This is a feature feed for a particular map.

00:34:17.840 --> 00:34:28.459
We're specifying what the name of our service is and then we're using the set user credentials to do a client login,

00:34:28.459 --> 00:34:33.180
just manually specifying the user name and password rather than doing something to have the user type that in.

00:34:33.179 --> 00:34:37.400
We then get the feed.

00:34:37.530 --> 00:34:39.229
Now, all these requests are synchronous.

00:34:39.360 --> 00:34:46.409
So, when we get a feed, when we come back with the result, the feed is actually immediately available.

00:34:46.409 --> 00:34:48.660
We have Java objects for all those things.

00:34:48.659 --> 00:34:52.159
So, then we can immediately go in and it rate over all the entries in the feed.

00:34:52.780 --> 00:34:56.520
And so all we're doing here is we're adding a new custom property for each entry.

00:34:57.959 --> 00:35:05.579
And just to kinda make this example really simple, all we're doing is defining the custom property to be what we call

00:35:05.580 --> 00:35:06.679
annotation property.

00:35:06.679 --> 00:35:11.310
It's just something that I made up, and we're setting that up into the title of the entry.

00:35:13.169 --> 00:35:15.099
So, then you just call the My Service update.

00:35:15.449 --> 00:35:22.479
Again, this is synchronous, so we're gonna have this synchronous operation once per entry.

00:35:22.479 --> 00:35:24.190
This isn't gonna be fast.

00:35:25.560 --> 00:35:30.520
If you really wanted to do this in practice it would make much more sense to use the batch operations.

00:35:30.570 --> 00:35:46.239
And there's information available on pro.google.com, you know, slash I think API/G data that tells you how to use

00:35:46.239 --> 00:35:47.770
batch operations.

00:35:47.770 --> 00:35:50.429
So, that's it, you know, for right now.

00:35:50.840 --> 00:35:54.800
We are furiously working on getting new capabilities added.

00:35:55.340 --> 00:36:02.290
There are a lot of things, you know, gaps that we know exist and that we know are important to all of you, and we're

00:36:02.290 --> 00:36:06.399
also interested in hearing anything you have to say, any suggestions you have on how to improve this.

00:36:08.260 --> 00:36:16.959
So, certainly, we need to do better with search, we're working on -- so, all this stuff is searchable but it's not

00:36:16.959 --> 00:36:20.479
right now searchable through the Data API.

00:36:20.479 --> 00:36:34.380
We're working on richer content, better integration with the maps Java script API and new kind of feeds are in the

00:36:34.380 --> 00:36:34.570
works.

00:36:37.110 --> 00:36:38.989
So, that's it.

00:36:38.989 --> 00:36:42.200
&gt;&gt; [applause].

00:36:42.199 --> 00:36:45.410
&gt;&gt; [whispering]

00:36:45.409 --> 00:37:09.050
&gt;&gt; Everyone, I'm Jeff Sambells, director of research and development at We-Create and co-author of PA Google Maps API.

00:37:09.050 --> 00:37:16.350
I've been asked to talk a little bit about the Google Maps.API and how we've used -- integrated it into our site and

00:37:16.350 --> 00:37:18.260
how it benefits our users and developers.

00:37:18.260 --> 00:37:23.910
So, to begin with, We-Create's developed a site called ConnectorLocal.com.

00:37:23.909 --> 00:37:28.229
It's a site focused on delivering high-quality, hyper local information.

00:37:28.229 --> 00:37:49.000
Let's pull it up here.

00:37:49.000 --> 00:37:49.350
Okay.

00:37:49.350 --> 00:38:04.949
As you can see here, we've integrated places into our site and ... here are a few places in ConnectorLocal.com around

00:38:04.949 --> 00:38:13.540
the Moscone Center that I've added previous to here and there are -- it's all information based on our central

00:38:13.540 --> 00:38:15.130
location here at the center.

00:38:16.620 --> 00:38:22.760
And we've chosen to integrate Google Maps because it allows our users to easily share their information back and forth

00:38:22.760 --> 00:38:25.219
between ConnectorLocal and the Google Maps.

00:38:26.239 --> 00:38:36.500
If we take a quick look at the Google Maps page we can easily create a map.

00:38:36.510 --> 00:38:39.489
We can quickly create a map.

00:38:39.489 --> 00:39:00.139
Let's call it "Google IO -- " and using some of the places that we've already defined in ConnectorLocal, we can pick

00:39:00.140 --> 00:39:11.910
from, so, let's say a few hotels in the area and export them to our Google My Maps account.

00:39:11.909 --> 00:39:18.770
Now, as we've already discussed, these maps -- these items now become available in my account and if we login, we can

00:39:18.770 --> 00:39:22.310
see that -- here we go.

00:39:22.310 --> 00:39:31.540
The map is now available and it create -- contains the few places that are -- that I selected previously.

00:39:31.540 --> 00:39:38.020
So, this gives our users a great opportunity to take the information that they've assembled in local and share it with

00:39:38.020 --> 00:39:43.330
other users who may not be part of the ConnectorLocal system.

00:39:43.330 --> 00:39:51.270
So, this also brings me to another point that ConnectorLocal had a problem with how to get all the information in its

00:39:51.479 --> 00:39:53.010
site into the search index.

00:39:53.010 --> 00:39:58.989
'Cause if you think about it, the search engine has a hard time understanding geographic relevance of the of the

00:39:58.989 --> 00:40:01.690
information as its presented through standard web crawler.

00:40:03.130 --> 00:40:09.419
Search engine doesn't really have solid location or any underlying desire when it visits the site.

00:40:10.489 --> 00:40:19.310
So, we needed to find some solution to take that geographic relevance and submit it to the search engine.

00:40:19.310 --> 00:40:28.079
Well, the Maps Data API take -- is perfect for this because we can take all the underlying information, package it up

00:40:28.130 --> 00:40:32.050
with geographic relevance, and submit it right to the search engine for indexing.

00:40:35.739 --> 00:40:42.879
So, we can also, as well as create -- as well as our users sharing information with local -- with Google Maps, they

00:40:42.880 --> 00:40:48.949
can also take their existing Google Maps information -- so, here I've got a few other maps -- and import those right

00:40:49.159 --> 00:41:01.610
directly back into ConnectorLocal.

00:41:01.610 --> 00:41:11.529
As you see, in my Google Maps area of the site, I have a few maps including the one we just created available for

00:41:11.530 --> 00:41:11.880
import.

00:41:11.880 --> 00:41:18.390
I'll take the previous map that I've created and import it with just a few simple clicks.

00:41:19.280 --> 00:41:24.739
And now a lake -- actually two lakes that were in that map are now added to My Places.

00:41:24.739 --> 00:41:32.919
So, this lets me easily retrieve the information from my My Maps account and now includes with my ConnectorLocal

00:41:32.919 --> 00:41:33.369
information.

00:41:38.370 --> 00:41:58.320
So, if we take a -- flip back.

00:41:58.330 --> 00:42:05.690
So, if we take a look at the bit of code that we're using to do this, We-Create has developed a library wrapper for

00:42:05.689 --> 00:42:08.839
PHP to access the Google Maps Data API.

00:42:08.840 --> 00:42:10.599
It's free to download.

00:42:10.590 --> 00:42:15.070
You can download it at the link there and we're working on including it directly in the Zend framework itself.

00:42:18.909 --> 00:42:21.520
To -- here we see -- oh, sorry.

00:42:21.520 --> 00:42:26.870
All the examples that I'm going to be showing in a moment assume that you've already authenticated with the service

00:42:27.290 --> 00:42:29.019
and have substantiated the object.

00:42:29.020 --> 00:42:36.399
To authenticate, as we previously discussed, you can use AuthSub or the client login if you already know the user name

00:42:36.399 --> 00:42:37.709
and password.

00:42:37.709 --> 00:42:48.290
Here is the quick example of retrieving the map feed which lists the existing maps in my Google My Maps account.

00:42:48.290 --> 00:42:56.020
So, we just simply substantiated a new query, passed that query into the maps feed, and we can retrieve a nice PHP

00:42:56.020 --> 00:42:59.690
formatted object with the ID, title, and summary action resub map.

00:43:03.120 --> 00:43:07.409
So, retrieving the attributes in the map are okay but you're probably gonna want a little bit more information, which

00:43:07.409 --> 00:43:10.500
is where feature feed comes in.

00:43:10.500 --> 00:43:11.350
Again, fairly simple.

00:43:11.350 --> 00:43:17.739
Create the new feature query, pass it into the new feature feed, and you can retrieve your features.

00:43:18.800 --> 00:43:23.810
But feature feed actually can use a lot of more interesting information in the placemarks.

00:43:26.189 --> 00:43:35.570
And the -- our PHP library wraps the KML entries into a nice object format so instead of dealing with the KML itself

00:43:35.639 --> 00:43:40.979
and parsing it, you can just simply retrieve it through the object.

00:43:40.989 --> 00:43:44.750
So, if we wanted to create a new map, again, very simple.

00:43:44.750 --> 00:43:49.329
Create a new map entry, assign it a title and a summary, and insert a map.

00:43:49.330 --> 00:43:55.330
When the map's inserted at this point, it becomes part of the my maps account, as you saw earlier, and -- but at this

00:43:55.330 --> 00:43:58.719
point it has no features or anything interesting in it besides the title and the summary.

00:43:58.719 --> 00:44:01.469
So, you're gonna wanna sad some new features to it.

00:44:04.270 --> 00:44:08.320
To add a new feature, you have to start working with those KML placemarks.

00:44:08.320 --> 00:44:14.300
So, the placemarks example here, I'm just creating a very point for the

00:44:14.300 --> 00:44:25.740
Moscone Center and this is a very simple example that we could extend to include additional points, lines, polygons,

00:44:26.060 --> 00:44:36.050
as well as style attributes for things like colors, the line width, icons for this points and all that kinda thing.

00:44:36.050 --> 00:44:38.320
So, that's just a quick introduction to the PHP library.

00:44:38.320 --> 00:44:44.290
You can feel free to use it and I'll hand the talk back over to Mano and open up for questions.

00:44:44.290 --> 00:44:45.770
&gt;&gt; [applause]

00:44:45.770 --> 00:44:48.000
&gt;&gt; Thank you.

00:44:48.000 --> 00:44:49.489
&gt;&gt; [applause]

00:44:49.489 --> 00:44:50.229
Okay.

00:44:50.229 --> 00:44:58.209
So, we're gonna open up for questions now if you have any questions come up to the microphones.

00:44:58.239 --> 00:45:05.430
We'll go over to Google Moderator where we have ... no questions so far.

00:45:05.429 --> 00:45:07.770
Let me refresh that.

00:45:07.770 --> 00:45:08.939
So, any questions anybody has?

00:45:08.939 --> 00:45:16.549
&gt;&gt; umm, you talked about having polygon support.

00:45:16.550 --> 00:45:23.100
Do you have holes in the polygons that are supported?

00:45:23.100 --> 00:45:33.300
&gt;&gt; As I said, so, short answer is -- short answer is no.

00:45:33.300 --> 00:45:41.560
[Laughing] As I said, we currently are limited to what the My Maps editor supports and we're furiously working on

00:45:41.929 --> 00:45:44.040
erasing that limit.

00:45:44.040 --> 00:45:47.469
But right now there's no support for multi-boundary polygons.

00:45:47.469 --> 00:45:48.799
&gt;&gt; And you mentioned search by locations will be coming.

00:45:48.800 --> 00:45:55.040
What sort of searches will be possible?

00:45:55.040 --> 00:46:04.429
&gt;&gt; Well, certainly you know, radius and bounding box type searches as well as keyword and attribute search.

00:46:04.429 --> 00:46:11.590
&gt;&gt; You're hoping to do a search by arbitrary polygon rather than just bounding box?

00:46:11.590 --> 00:46:22.770
&gt;&gt; That was actually searched by arbitrary polygon was the most frequently-requested feature capability that I've

00:46:22.770 --> 00:46:25.050
heard, you know, from developers.

00:46:26.310 --> 00:46:28.459
And so yeah, that's definitely on our list.

00:46:28.459 --> 00:46:34.450
I can't tell you exactly when, you know, I men, certainly probably do release radius and bounding box engine and, you

00:46:34.449 --> 00:46:34.679
know, polygon search.

00:46:34.679 --> 00:46:36.109
But that's certainly something we'll work on.

00:46:36.110 --> 00:46:42.469
&gt;&gt; Thanks.

00:46:42.469 --> 00:46:52.020
&gt;&gt; Other questions?

00:46:52.020 --> 00:46:58.389
All right.

00:46:58.389 --> 00:47:15.969
Normally at this point I would say I would go out and ask you questions but it's late in the day.

00:47:15.969 --> 00:47:19.580
Oh, go ahead.

00:47:19.580 --> 00:47:25.110
&gt;&gt; So, your talk was about scalability with geo applications.

00:47:25.110 --> 00:47:25.600
So, when you talk about storing data in My Maps, what are the scalability limitations?

00:47:25.600 --> 00:47:25.969
I mean, can I throw millions of points into My Maps?

00:47:25.969 --> 00:47:26.030
You know?

00:47:26.030 --> 00:47:26.090
&gt;&gt; Yes.

00:47:26.090 --> 00:47:26.729
So, first the good news.

00:47:26.929 --> 00:47:28.659
There are no intrinsic limits.

00:47:31.969 --> 00:47:39.729
You can have millions of placemarks in a map.

00:47:39.729 --> 00:47:52.580
However, we do currently have quota limits and the quota limits – right now the default per user limits are low just

00:47:52.580 --> 00:48:00.100
because we don't really know what to expect and we wanna, you know, we don't wanna get an unpleasant prize.

00:48:00.100 --> 00:48:08.770
But, if you have specific requirements and you need higher quotas, you know, talk to us and we can easily accommodate

00:48:08.770 --> 00:48:09.179
that.

00:48:09.179 --> 00:48:21.100
Our intent is not to limit the developers out there, you know, the intent is just to make sure we can provide the

00:48:21.100 --> 00:48:27.150
level of service that, you know, we need for as many users as possible.

00:48:27.149 --> 00:48:34.890
Now, you may find that certain things, you know, maybe don't perform quite as well when you have a large numbers of

00:48:34.889 --> 00:48:36.939
points or small number of points.

00:48:36.939 --> 00:48:44.390
We -- There are things, you know -- So, in particular right now, given that the way you can access is feed is load the

00:48:44.520 --> 00:48:46.660
feed, maybe kinda page after page.

00:48:48.729 --> 00:48:52.090
That's not gonna give you a very good experience for, you know large number of features.

00:48:54.080 --> 00:49:01.500
In addition to the search, which certainly addresses part of that, there are other things that we're working on that

00:49:01.500 --> 00:49:07.270
unfortunately we're not yet in a position to announce anything about but I think we'll definitely give you a good

00:49:07.270 --> 00:49:11.200
experience for large collections.

00:49:11.199 --> 00:49:13.010
&gt;&gt; Yes?

00:49:13.010 --> 00:49:18.459
&gt;&gt; Everything's done over HTTP; right?

00:49:18.459 --> 00:49:20.270
No SSL?

00:49:20.270 --> 00:49:25.719
Is there any possibility that'll change?

00:49:25.719 --> 00:49:27.539
&gt;&gt; Yeah.

00:49:27.540 --> 00:49:28.880
Currently it's all HTTP.

00:49:28.879 --> 00:49:38.929
That's something if there's a really compelling need for it, you know, talk to us and, you know, maybe we can add it

00:49:38.929 --> 00:49:40.800
to the to-do list.

00:49:40.800 --> 00:49:45.770
&gt;&gt; So, the no My Maps for My Domain ready to announce right now?

00:49:45.770 --> 00:49:46.780
&gt;&gt; No, no.

00:49:46.770 --> 00:49:47.179
Not at this time.

00:49:47.280 --> 00:49:55.250
That's certainly something that we're very aware of the need for that.

00:49:55.250 --> 00:49:58.620
And it's on our road map.

00:49:58.620 --> 00:50:00.890
But we don't have it currently.

00:50:00.889 --> 00:50:03.900
So, currently, it's only your normal Google account.

00:50:03.899 --> 00:50:08.169
No apps for your My Domain accounts.

00:50:08.169 --> 00:50:15.339
It's basically the same limit that, you know, applies to really all --everything under Google Maps right now.

00:50:15.340 --> 00:50:20.079
We just don't have that support yet.

00:50:20.080 --> 00:50:25.489
But, you know, it's on our road map.

00:50:25.489 --> 00:50:28.159
&gt;&gt; Any more questions?

00:50:28.159 --> 00:50:30.479
All right.

00:50:30.479 --> 00:50:34.379
Well, enjoy the -- enjoy the party tonight and I hope to see you there.

00:50:34.379 --> 00:50:40.729
If you have any more questions for us we'll hang around here for probably another ten minutes if anybody's still here.

00:50:40.899 --> 00:50:41.059
So.

00:50:41.820 --> 00:50:42.540
Great. Thanks a lot, everyone.

00:50:42.540 --> 00:50:42.780
&gt;&gt; [applause]

