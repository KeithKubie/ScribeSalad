WEBVTT
Kind: captions
Language: en

00:00:00.122 --> 00:00:02.080
JOANNA SMITH: If you have
some heavy work to do

00:00:02.080 --> 00:00:04.660
and it doesn't need
to be done right now,

00:00:04.660 --> 00:00:08.050
then I'm going to kindly
ask you to use JobScheduler.

00:00:08.050 --> 00:00:10.910
JobScheduler is guaranteed
to get your job done.

00:00:10.910 --> 00:00:12.990
But since it operates
at the system level,

00:00:12.990 --> 00:00:15.500
it can use several factors
to intelligently schedule

00:00:15.500 --> 00:00:18.230
your background work to run
with the jobs from other apps

00:00:18.230 --> 00:00:21.010
as well, and that means
we can minimize things

00:00:21.010 --> 00:00:23.740
like radio use, which
is a clear battery win.

00:00:23.740 --> 00:00:26.160
And as of API 24,
JobScheduler even

00:00:26.160 --> 00:00:29.140
considers memory pressure,
which is a clear overall win

00:00:29.140 --> 00:00:31.760
for devices and their users.

00:00:31.760 --> 00:00:33.900
JobScheduler was
introduced in Lollipop

00:00:33.900 --> 00:00:36.480
and is pretty cool, because
it doesn't perform work solely

00:00:36.480 --> 00:00:39.640
based on time, but rather
based on conditions.

00:00:39.640 --> 00:00:42.612
For example, you can use
setRequiredNetworkType for jobs

00:00:42.612 --> 00:00:44.320
that you want to
execute when the user is

00:00:44.320 --> 00:00:46.650
on a metered versus an
unmetered connection

00:00:46.650 --> 00:00:48.730
or you can call
setPersisted for jobs

00:00:48.730 --> 00:00:51.520
that you want to persist
across a potential reboot.

00:00:51.520 --> 00:00:54.000
And as of API 24,
there are even methods

00:00:54.000 --> 00:00:56.995
to schedule a job based on an
update to a content provider.

00:00:56.995 --> 00:00:58.870
And of course, you can
read the documentation

00:00:58.870 --> 00:01:01.650
to see how to play with other
criteria you might care about,

00:01:01.650 --> 00:01:04.980
from backoff policies to time
limits for scheduling the job.

00:01:04.980 --> 00:01:07.430
Basically, this is
where the magic happens,

00:01:07.430 --> 00:01:10.460
so spend some time
getting it right.

00:01:10.460 --> 00:01:13.300
You can define these conditions
when you are creating the job

00:01:13.300 --> 00:01:15.370
through the JobInfo object.

00:01:15.370 --> 00:01:19.140
To build that JobInfo object,
you need two things every time,

00:01:19.140 --> 00:01:21.580
and then the criteria are all
the bonus that's over here.

00:01:21.580 --> 00:01:22.990
But you need a
job number to help

00:01:22.990 --> 00:01:26.830
you distinguish which job
this is and a job service.

00:01:26.830 --> 00:01:28.960
Now, your job
service is actually

00:01:28.960 --> 00:01:32.030
going to be a service that
extends the JobService class,

00:01:32.030 --> 00:01:35.080
and this is where you'll define
the work that you'll be doing.

00:01:35.080 --> 00:01:36.830
But since you're
extending another class,

00:01:36.830 --> 00:01:40.100
you will need to implement
a few required methods.

00:01:40.100 --> 00:01:42.480
OnStartJob is called by
the system when it is

00:01:42.480 --> 00:01:44.120
time for your job to execute.

00:01:44.120 --> 00:01:47.620
This is where the one tricky
part about JobScheduler exists.

00:01:47.620 --> 00:01:50.490
Your JobService runs
on the main thread.

00:01:50.490 --> 00:01:52.530
That's right, the main thread.

00:01:52.530 --> 00:01:55.740
So use onStartJob to
either perform simple work

00:01:55.740 --> 00:01:59.097
or to kick off a background
thread for complicated work.

00:01:59.097 --> 00:02:00.680
And if you do kick
off something else,

00:02:00.680 --> 00:02:01.842
you'll need to return true.

00:02:01.842 --> 00:02:03.300
But if you're done
with everything,

00:02:03.300 --> 00:02:04.747
go ahead and return false.

00:02:04.747 --> 00:02:06.830
This will let the system
know whether your job has

00:02:06.830 --> 00:02:09.080
any ongoing work still.

00:02:09.080 --> 00:02:11.660
OnStopJob is called
by the system

00:02:11.660 --> 00:02:14.590
if your job is canceled
before being finished, perhaps

00:02:14.590 --> 00:02:16.620
because the conditions
are no longer being met,

00:02:16.620 --> 00:02:18.410
like the device
has been unplugged.

00:02:18.410 --> 00:02:21.150
So use this for safety
checks and clean up, and then

00:02:21.150 --> 00:02:24.110
return true if you'd like the
system to reschedule the job

00:02:24.110 --> 00:02:27.070
or false if it doesn't matter
and the job will be dropped.

00:02:27.070 --> 00:02:29.550
JobFinished is not a
method you override,

00:02:29.550 --> 00:02:31.230
and the system won't
call it, but that's

00:02:31.230 --> 00:02:32.990
because you need to
be the one to call

00:02:32.990 --> 00:02:35.010
this method once your
service or thread has

00:02:35.010 --> 00:02:36.540
finished working on the job.

00:02:36.540 --> 00:02:39.100
That is, if your
onStartJob returned true,

00:02:39.100 --> 00:02:40.940
because this is how
the system knows

00:02:40.940 --> 00:02:42.810
that your work is
really done and it

00:02:42.810 --> 00:02:44.290
can release your wakelock.

00:02:44.290 --> 00:02:45.760
So if you forget,
your app is going

00:02:45.760 --> 00:02:48.570
to look pretty guilty in
the battery stats lineup.

00:02:48.570 --> 00:02:51.070
JobFinished takes two
parameters, the current job,

00:02:51.070 --> 00:02:53.280
so that it knows which
one we are talking about,

00:02:53.280 --> 00:02:55.210
and a Boolean,
indicating whether you'd

00:02:55.210 --> 00:02:56.640
like to reschedule the job.

00:02:56.640 --> 00:02:58.494
Perhaps your work
failed for some reason.

00:02:58.494 --> 00:03:00.160
So this will kick off
the JobScheduler's

00:03:00.160 --> 00:03:02.050
exponential backoff
logic for you

00:03:02.050 --> 00:03:05.400
or else the logic you
specified in JobInfo.

00:03:05.400 --> 00:03:07.270
Now, as with any
service, you'll need

00:03:07.270 --> 00:03:09.789
to add this one to your
AndroidManifest.xml.

00:03:09.789 --> 00:03:11.330
What's different,
though, is that you

00:03:11.330 --> 00:03:14.180
need to add a permission
that will allow JobScheduler

00:03:14.180 --> 00:03:16.880
to call your jobs and
be the only one that

00:03:16.880 --> 00:03:18.900
can access your JobService.

00:03:18.900 --> 00:03:21.340
Finally, you can
schedule a job using

00:03:21.340 --> 00:03:23.740
JobScheduler, which you
will get from the system,

00:03:23.740 --> 00:03:27.010
then call schedule using that
super perfect JobInfo object

00:03:27.010 --> 00:03:29.330
you created, and
you are good to go.

00:03:29.330 --> 00:03:30.910
Not so scary, is that?

00:03:30.910 --> 00:03:32.460
There are a lot of
pieces to be sure,

00:03:32.460 --> 00:03:33.560
and you'll need
to think carefully

00:03:33.560 --> 00:03:35.510
about when and what
should trigger your job

00:03:35.510 --> 00:03:37.620
and what happens if it
fails for some reason.

00:03:37.620 --> 00:03:39.770
But overall,
JobScheduler was designed

00:03:39.770 --> 00:03:40.840
to be easy to work with.

00:03:40.840 --> 00:03:43.360
So give it a try and
go build better apps.

00:03:43.360 --> 00:03:46.710
[MUSIC PLAYING]

