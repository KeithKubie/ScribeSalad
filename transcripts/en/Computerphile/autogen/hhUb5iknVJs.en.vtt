WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:03.150
I guess what we were asking today is have your passwords been pwned

00:00:03.150 --> 00:00:05.150
 

00:00:06.300 --> 00:00:11.740
One of the websites I used to keep secure online is have I been pwned right now, I love this websites. It's great.

00:00:11.840 --> 00:00:14.460
Run by a guy called Troy hunt and whenever it is a big leak

00:00:14.460 --> 00:00:18.600
Let's say a company gets hacked and always using these passwords get leave out in internet

00:00:18.600 --> 00:00:22.139
Obviously people who are trying to crack passwords and break into your accounts

00:00:22.140 --> 00:00:23.230
They're going to be looking at these things

00:00:23.230 --> 00:00:26.369
But what he does, is he collects them and lets you know

00:00:26.369 --> 00:00:28.980
You've got an email address that you use for most of your accounts

00:00:29.300 --> 00:00:32.160
You put this in the website and if that email address ever appears in a leak

00:00:32.160 --> 00:00:34.960
I assume probably tied to a password but not necessarily

00:00:34.960 --> 00:00:38.940
It will let you know and that's a really good thing because no one's on top of all the leaks, right?

00:00:38.940 --> 00:00:44.399
I certainly am not. And so maybe I have an email address. So I want to make sure hasn't been given away

00:00:44.440 --> 00:00:48.719
So this is a great website, you know, we'll put a link to it. But actually this is not what we're talking about today

00:00:48.720 --> 00:00:51.940
what we're talking about today is the Password API

00:00:51.940 --> 00:00:57.580
it's also put online right which is another great asset.

00:00:58.180 --> 00:01:00.719
This is where you could actually send in your password in a manner of speaking

00:01:01.080 --> 00:01:02.980
and It'll tell you whether it's ever been leaked

00:01:03.280 --> 00:01:06.900
Now that's important because if your password has ever been leaked before

00:01:06.900 --> 00:01:08.360
by you or by someone else

00:01:08.560 --> 00:01:13.500
Then it could be appearing in a long list of words that are being used for a dictionary attack

00:01:13.689 --> 00:01:17.519
Right, and that just makes your password much more vulnerable

00:01:17.520 --> 00:01:22.950
In general I would argue that if your password has been leaked before it's not really safe to use

00:01:22.960 --> 00:01:24.299
There's some interesting questions here

00:01:24.300 --> 00:01:29.060
Should you be putting your password into a box on the internet that says it will tell you if it's been hacked?

00:01:29.060 --> 00:01:30.060
In general, no!

00:01:30.920 --> 00:01:33.780
In general, be very careful about where you type in your password

00:01:34.260 --> 00:01:38.100
Even if I make a website and I say you should definitely trust me because it's me.

00:01:38.100 --> 00:01:40.720
Still don't trust me. All right

00:01:40.720 --> 00:01:45.749
Just know what you know for a start. I might just be inept of programming and I've got a vulnerability

00:01:46.210 --> 00:01:49.979
So this uses an interesting mechanism called k-anonymity

00:01:50.440 --> 00:01:56.040
to make sure that you can send in your password and find out whether it's in this big database of passwords

00:01:56.280 --> 00:01:58.640
and no one gets to find out what it was.

00:01:58.640 --> 00:02:00.560
All right, which is using hashing, and it's really great

00:02:00.620 --> 00:02:01.800
So we're going to talk about that now

00:02:02.040 --> 00:02:05.780
so you can go on to haveibeenpwned.com/passwords

00:02:05.800 --> 00:02:08.819
and you can type in your password there and you can look at the source code

00:02:08.820 --> 00:02:13.800
That's probably okay. But actually it's got a REST API where you can actually visit specific URLs

00:02:14.000 --> 00:02:17.260
and obtain information on whether your password is in that database

00:02:17.260 --> 00:02:18.940
you can do this very often

00:02:18.940 --> 00:02:22.940
you could do it for example for all the passwords in your collection in your password manager

00:02:22.940 --> 00:02:27.120
and actually some password managers like 1Password actually do this automatically for you

00:02:27.120 --> 00:02:29.040
and they check your password this way

00:02:29.060 --> 00:02:30.380
I mean, that's a really good idea

00:02:30.380 --> 00:02:33.800
If you type in a password that you think is great for a new website

00:02:34.080 --> 00:02:37.880
Your password manager can say actually this one's already been leaked like previously

00:02:37.880 --> 00:02:39.160
so don't use that one.

00:02:39.720 --> 00:02:40.540
So, how does this work?

00:02:40.540 --> 00:02:42.200
and how does it remain secure

00:02:42.200 --> 00:02:46.040
because even if this website is fully trustworthy

00:02:46.040 --> 00:02:49.519
It's not a good idea to be sending a hashed version of your password to this website, right?

00:02:49.520 --> 00:02:52.340
this is the website that has all the lists of all the passwords

00:02:52.340 --> 00:02:58.660
if yours shows up, suddenly your IP address is saying My passwords weak my passwords weak

00:02:58.660 --> 00:03:01.740
and that's just not a good thing you want to have happen, right?

00:03:01.740 --> 00:03:02.690
So how does it work?

00:03:02.690 --> 00:03:07.360
Well, just like with all passwords. We hash it as a start to begin protecting it

00:03:07.370 --> 00:03:11.570
So let's imagine I have my password which is you know Password1

00:03:11.570 --> 00:03:14.820
this is where we link to the video where I said don't use that password

00:03:14.820 --> 00:03:19.400
if there's any variation on the word password or have any of the numbers 1 2 3 4 in or doing it?

00:03:19.400 --> 00:03:23.620
You need to delete those passwords. Maybe delete your account out of shame

00:03:24.360 --> 00:03:28.400
This will be hashed using SHA-1 which for this purpose is okay, right?

00:03:28.920 --> 00:03:31.040
You wouldn't necessarily permanently store your passwords in this format

00:03:31.500 --> 00:03:37.339
But for this API is OK and that's going to produce 160 bit hash

00:03:37.340 --> 00:03:43.910
Right, which might look something like FA2 241C... for 160 bits

00:03:44.970 --> 00:03:46.380
160 bits?

00:03:46.380 --> 00:03:47.400
Yeah

00:03:47.400 --> 00:03:52.010
Ok. Now the problem is if I send this off to the website, I've just given them my password

00:03:52.010 --> 00:03:53.160
I mean not quite because

00:03:53.160 --> 00:03:57.200
SHA-1 is hash but that could be broken. Especially if my password is not good, right

00:03:57.200 --> 00:04:02.940
and also he's got a bunch of these passwords and hashes already computed in this database

00:04:02.960 --> 00:04:05.180
So as soon as he sees that I've got the hash.

00:04:05.180 --> 00:04:07.740
He reverse looks up the password.

00:04:07.960 --> 00:04:09.140
That's a vulnerability, right?

00:04:09.140 --> 00:04:12.040
I trust the guy but I still wouldn't want to do that, right?

00:04:12.640 --> 00:04:16.700
And so this API used a system called K anonymity

00:04:16.700 --> 00:04:19.300
what happens is instead of me giving them the whole hash

00:04:19.480 --> 00:04:21.200
I give them just enough of the hash

00:04:21.200 --> 00:04:23.520
But they can give me back anything that might match

00:04:23.520 --> 00:04:26.460
and I am the one that actually finds that whether it does, right?

00:04:26.460 --> 00:04:27.600
and that's a really neat trick.

00:04:27.600 --> 00:04:29.600
So I will give them the first

00:04:29.600 --> 00:04:31.600
one, two, three, four, five

00:04:31.780 --> 00:04:35.140
characters of the hex of this password hash

00:04:35.140 --> 00:04:39.840
so I will send the pwned password API FA224, for example

00:04:40.080 --> 00:04:42.380
and it will send me back some number of passwords

00:04:42.400 --> 00:04:47.639
that have been leaked in the past whose hashes begin with those five characters now, there'll be a lot of them

00:04:47.639 --> 00:04:52.559
there's some 550 million passwords in this database which is a kind of scary and

00:04:52.990 --> 00:04:59.370
It will return to you all the passwords but could match this and how many times they've been seen in leaked passwords, right? And

00:04:59.919 --> 00:05:06.688
Usually you'll get about 4 or 500 back right? That's when you go through the list yourself at your end and say ok

00:05:06.689 --> 00:05:08.849
Actually, my password is or it's not in there, right?

00:05:08.849 --> 00:05:12.989
Because there's going to be a lot of possible hashes and possible passwords are start with these 5 characters

00:05:13.029 --> 00:05:18.839
This is called k-anonymity the idea is that the website only knows we're one of about 500

00:05:19.150 --> 00:05:23.609
People that could have this password. It doesn't even know actually if we have one of these passwords

00:05:24.669 --> 00:05:26.669
Which is quite nice, right?

00:05:27.129 --> 00:05:31.829
So I've written some code to do this and we'll have a look before you get a code out if you've hashed it with SHA-1

00:05:32.379 --> 00:05:38.309
Is this just the way that this system works that it uses SHA-1 or is it I was just trying to work out because yes

00:05:39.840 --> 00:05:46.960
Exactly it isn't the case for these passwords all originally hashed in SHA-1 like this database includes both the plaintext and the hashed versions

00:05:46.960 --> 00:05:51.500
These are passwords that are previously been cracked right, as opposed to leaked in hashed form

00:05:51.509 --> 00:05:52.199
so for example

00:05:52.199 --> 00:05:57.749
Maybe my password has been leaked in like bcrypt form and no one ever broke it right in which case it's have no real concern

00:05:58.120 --> 00:06:01.949
I mean it's better if it've never been leaked, but you know

00:06:02.860 --> 00:06:08.000
So these are passwords that have been leaked and they ended up in plaintext either because they were already in plaintext

00:06:08.000 --> 00:06:12.509
or because they've been cracked and they're now in plaintext. She's got some code. Ok, let's look at some code

00:06:12.509 --> 00:06:18.509
So the first thing we can do is just pull this API directly very easy to do you simply go to a web address

00:06:19.270 --> 00:06:24.719
Part of which is the beginning of your hash and then we try that. All right, so let's to give an example

00:06:24.719 --> 00:06:29.489
So I'm gonna hit I'm gonna use curl right to obtain a website back

00:06:29.500 --> 00:06:32.740
Just going to send an HTTP request and receive a response

00:06:32.740 --> 00:06:39.600
Curl, it's just a software library that I'm using here to send off a request to a specific address and whatever website or day

00:06:39.740 --> 00:06:42.799
Comes back. I received that onto the command line, so it's gonna be curl

00:06:43.530 --> 00:06:49.250
HTTPS only works for HTTPS to make sure there's encryption involved. API dot pwned passwords

00:06:49.919 --> 00:06:53.629
comm for such range forward slash and then the

00:06:54.060 --> 00:07:00.739
Prefix of my hash which in this case was FA224. So FA224 that's going to come back

00:07:00.740 --> 00:07:06.530
It's done it with a big long list of all the possible passwords that they have that start with that hash

00:07:06.750 --> 00:07:08.690
Now it doesn't return the FA224

00:07:08.690 --> 00:07:13.729
It just returns the other bits because it's a waste of time now some of these are being cracked or or seen maybe one time

00:07:13.759 --> 00:07:18.709
This one's been seen 169 times. I have no idea what it is. I'd have to break the password to find out

00:07:19.259 --> 00:07:24.049
Given it's been leaked 106 nine times. It's probably not very strong. Maybe it's Password1

00:07:24.300 --> 00:07:27.319
Yeah, it could be you can try any of your password this way

00:07:27.319 --> 00:07:32.598
all you have to do is take your password hash it right which is easy to do on the command line or I've written some

00:07:32.599 --> 00:07:34.500
Python code and

00:07:34.500 --> 00:07:38.299
Then we can fire off to this API the first few bits and then we get back a list

00:07:38.300 --> 00:07:43.250
We look through the list to see if our full hash is in there. And if so, our password isn't broken

00:07:43.500 --> 00:07:46.880
So I've written some Python code we'll do this exact thing, right?

00:07:46.880 --> 00:07:50.149
So all it does is it uses a the cryptography library

00:07:50.150 --> 00:07:54.139
which is a great library in Python to hash the password in SHA-1

00:07:54.139 --> 00:08:00.408
It takes the first five characters of the hexadecimal representation and it sends them off to the password API

00:08:00.539 --> 00:08:04.129
It comes back with let's say 500 of them. I split it all up

00:08:04.130 --> 00:08:06.259
I look through and try find my password

00:08:06.259 --> 00:08:11.629
And if I find it then it'll print that it's found right and obviously I should change it now, of course

00:08:11.630 --> 00:08:13.699
I'm just typing this with random passwords, but you get the idea

00:08:13.740 --> 00:08:20.150
So let's have a go - I've called it pwned.py And then let's use this one Password1 with a capital P

00:08:20.150 --> 00:08:26.810
So it's been found the hash actually starts with 70CCD and it's been found a 111000 times

00:08:27.139 --> 00:08:33.978
That isn't great what that means is that in different leaks. This password has occurred a hundred thousand times, right?

00:08:33.979 --> 00:08:39.499
It's definitely in password list right it's a prime candidate. We already knew this is Password1, right?

00:08:39.500 --> 00:08:42.559
Let's try something a little bit more difficult. So let's say Password1234

00:08:42.750 --> 00:08:45.020
This is going to be in there. There's only 3000 times

00:08:45.180 --> 00:08:47.060
Right, but it's still not very good

00:08:47.060 --> 00:08:50.239
If your password appears any number of times just one

00:08:50.459 --> 00:08:55.999
Then that means that theoretically someone that had access to this list and these are all publicly available these leaks could

00:08:57.120 --> 00:09:00.620
Could put that in there big big long list of things and just try them as a matter

00:09:00.620 --> 00:09:05.060
Of course on any new leak that turns up. It doesn't mean that you're definitely going to get hacked

00:09:05.060 --> 00:09:07.759
It just means that there's a better chance right and it's not ideal

00:09:07.759 --> 00:09:11.599
So why not have a look and see so I mean so we've used this password

00:09:11.600 --> 00:09:17.120
But perhaps we should use something slightly stronger any ideas in the password cracking video. iloveyoukate was it? All right

00:09:17.120 --> 00:09:20.629
Let's try that. So I love you Kate. All right, there we go

00:09:22.170 --> 00:09:28.639
It was found 93 times, I think some people might have started using it I mean, please don't use that bad passwords

00:09:28.639 --> 00:09:30.639
You know, it's very nice. But yeah

00:09:32.129 --> 00:09:34.909
Yeah, I mean any password that appeared in that list is

00:09:35.519 --> 00:09:40.638
going to be is breakable enough that it's definitely going to be in there, right? So that's a huge problem

00:09:41.310 --> 00:09:44.810
You know if you if you start to get a slightly more difficult passwords

00:09:44.810 --> 00:09:48.169
Like some of the ones that we were looking at maybe in the choosing your password video

00:09:48.170 --> 00:09:52.430
So for example 4 words, so let's say why don't you do correct horse battery staple

00:09:53.100 --> 00:09:56.020
That is definitely in there and I can tell you about even running it.

00:09:56.020 --> 00:10:03.700
correcthorsebatterystaple was found. 114 times. No people. We don't use correcthorsebatterystaple

00:10:03.709 --> 00:10:06.948
What about but using your tip of pushing a random character?

00:10:06.949 --> 00:10:10.549
So if I take correct horse battery staple and let's say I put a star in the middle of here

00:10:10.550 --> 00:10:14.930
So correcthorsebat*erystaple. All right, not probably pronounceable

00:10:15.079 --> 00:10:20.209
All right, then we'll find it wasn't found in the dictionary. Right? Don't use it now because it will be in there now

00:10:21.000 --> 00:10:22.459
But this is the idea

00:10:22.459 --> 00:10:29.388
So to sort of make unexpected changes, but it's very easy to just pull this API right and just see you know

00:10:29.389 --> 00:10:31.370
It's this new password. I'm trying already in there

00:10:31.370 --> 00:10:36.379
Right and if it is don't use it, that's quite simple. If you're using a parcel management generating most your passwords at random

00:10:36.379 --> 00:10:40.819
They're unlikely to be in there, but you never know and it just makes it that much weaker if they are

00:10:41.730 --> 00:10:42.959
Okay

00:10:42.959 --> 00:10:48.438
Shall I ask you how do you say that point own poem home? Pwned is it? I don't know

00:10:48.440 --> 00:10:50.440
I mean if I'm wrong then I'm a noob

00:10:52.200 --> 00:10:53.240
I thought you were leet

00:10:56.960 --> 00:10:58.960
Definitely not

