WEBVTT
Kind: captions
Language: en

00:00:01.650 --> 00:00:03.030
ROB: All right, how's it going?

00:00:03.030 --> 00:00:05.155
Thank you guys so much for
coming out this morning.

00:00:05.155 --> 00:00:06.300
I know it's a little early.

00:00:06.300 --> 00:00:08.258
It's good to see you all
here bright and early.

00:00:08.258 --> 00:00:11.330
What we're going to be talking
about today is Web Components.

00:00:11.330 --> 00:00:12.330
You guys can come on up.

00:00:12.330 --> 00:00:13.500
Sure, why not.

00:00:13.500 --> 00:00:14.040
Grab a seat.

00:00:14.040 --> 00:00:14.840
Grab a seat.

00:00:17.821 --> 00:00:20.070
Now, for those of you who
didn't catch Dimitri's panel

00:00:20.070 --> 00:00:21.030
the other day, I
just want to give you

00:00:21.030 --> 00:00:22.900
kind of a quick,
high-level summary of what

00:00:22.900 --> 00:00:24.608
Web Components are
and kind of what we're

00:00:24.608 --> 00:00:26.395
going to be talking
about this morning.

00:00:26.395 --> 00:00:27.770
So Web Components
give developers

00:00:27.770 --> 00:00:30.780
the ability to extend
the HTML vocabulary.

00:00:30.780 --> 00:00:33.120
And with that, we get
this much easier model

00:00:33.120 --> 00:00:36.580
for creating reusable,
encapsulated little components

00:00:36.580 --> 00:00:38.014
we can compose together.

00:00:38.014 --> 00:00:39.805
Now, today there are
a handful of libraries

00:00:39.805 --> 00:00:42.346
which are being built on top of
the Web Components standards.

00:00:42.346 --> 00:00:46.507
You've got X-Tag, Bosonic, and
Polymer, by these guys up here.

00:00:46.507 --> 00:00:48.090
And the cool thing
is that now that we

00:00:48.090 --> 00:00:50.970
have this whole ecosystem of
tools that's available to us,

00:00:50.970 --> 00:00:53.040
we have this growing
world of components

00:00:53.040 --> 00:00:54.210
that are being built.

00:00:54.210 --> 00:00:56.830
So you've got the Core
and the Paper element sets

00:00:56.830 --> 00:00:58.455
have been produced
by the Polymer team.

00:00:58.455 --> 00:00:59.996
You've got the Brick
set that's being

00:00:59.996 --> 00:01:01.310
built by the folks at Mozilla.

00:01:01.310 --> 00:01:03.250
And you also have a
whole slew of components

00:01:03.250 --> 00:01:05.580
that are being built by
individuals out there,

00:01:05.580 --> 00:01:08.540
put up on GitHub and shared on
sites like Component Kitchen

00:01:08.540 --> 00:01:10.670
and CustomElements.io.

00:01:10.670 --> 00:01:14.280
So with this big change
comes a lot of questions.

00:01:14.280 --> 00:01:15.972
Developers are
wondering, what are

00:01:15.972 --> 00:01:17.680
some of the best
practices around working

00:01:17.680 --> 00:01:18.830
with Web Components?

00:01:18.830 --> 00:01:20.220
And they also want to know,
when are these things going

00:01:20.220 --> 00:01:21.460
to be production-ready?

00:01:21.460 --> 00:01:23.940
When can we actually start
dropping these into our apps?

00:01:23.940 --> 00:01:25.939
So to help answer some
of those questions today,

00:01:25.939 --> 00:01:27.231
we've got a really great panel.

00:01:27.231 --> 00:01:29.439
Just to introduce really
quickly down here at the end

00:01:29.439 --> 00:01:31.980
we've got Matt McNulty,
who is the engineering team

00:01:31.980 --> 00:01:33.420
manager for Polymer.

00:01:33.420 --> 00:01:35.170
Next to him we
have Taylor Savage,

00:01:35.170 --> 00:01:37.670
who is the product
manager for Polymer.

00:01:37.670 --> 00:01:39.500
To my right, your
left, is going to be

00:01:39.500 --> 00:01:42.240
Kevin Schaaf,
engineer on Polymer.

00:01:42.240 --> 00:01:45.120
To my left, your right,
is Dimitri Glazkov,

00:01:45.120 --> 00:01:49.225
godfather of Web Components
and software engineer on Blink.

00:01:49.225 --> 00:01:50.600
DIMITRI: Uncle of
Web Components.

00:01:50.600 --> 00:01:53.240
ROB: Uncle of Web Components.

00:01:53.240 --> 00:01:55.539
Next to him we have Steve
Orvell, engineer on Polymer.

00:01:55.539 --> 00:01:57.330
And at the end there
we have Alice Boxhall,

00:01:57.330 --> 00:01:59.450
an engineer on the
Chrome team who

00:01:59.450 --> 00:02:01.770
is specializing
in accessibility.

00:02:01.770 --> 00:02:03.442
So we've got a lot
of good questions.

00:02:03.442 --> 00:02:05.650
But if you out there in the
audience have a question,

00:02:05.650 --> 00:02:07.180
we have a microphone up here.

00:02:07.180 --> 00:02:09.221
And for those of you
watching on the live stream,

00:02:09.221 --> 00:02:10.810
you can tweet
@ChromiumDev and we'll

00:02:10.810 --> 00:02:14.010
try to get those questions
asked to the panel as well.

00:02:14.010 --> 00:02:15.480
Let's start with
the first question

00:02:15.480 --> 00:02:18.090
here, from Hector
Carmona, who wants

00:02:18.090 --> 00:02:20.040
to know, "Are there
any steps that

00:02:20.040 --> 00:02:22.640
must be taken to ensure
that an application is

00:02:22.640 --> 00:02:25.301
accessible to screen readers
when working with Polymer?"

00:02:25.301 --> 00:02:27.300
That sounds like a good
question for you, Alice.

00:02:27.300 --> 00:02:28.610
ALICE: Yeah.

00:02:28.610 --> 00:02:33.020
OK, so there's sort of a
couple of facets to that.

00:02:33.020 --> 00:02:35.430
As mentioned-- I think
Matt mentioned yesterday--

00:02:35.430 --> 00:02:36.805
when we talk about
Polymer, we're

00:02:36.805 --> 00:02:38.850
talking about a few
different things.

00:02:38.850 --> 00:02:41.995
So I'll address the
Polymer Paper elements

00:02:41.995 --> 00:02:43.120
part of the question first.

00:02:43.120 --> 00:02:47.014
So if you're using
Paper elements, by 1.0

00:02:47.014 --> 00:02:48.680
you shouldn't have
to do anything extra.

00:02:48.680 --> 00:02:52.760
So today the accessibility story
is a bit of a work in progress.

00:02:52.760 --> 00:02:54.490
So you'll look at
some elements, you'll

00:02:54.490 --> 00:02:56.073
see that they're
extremely accessible.

00:02:56.073 --> 00:02:57.700
All the markup's been done.

00:02:57.700 --> 00:03:00.640
Other elements, there's still
some work left to be done.

00:03:00.640 --> 00:03:02.600
But by 1.0 they
should be-- Matt,

00:03:02.600 --> 00:03:05.640
correct me if I'm wrong--
completely accessible.

00:03:05.640 --> 00:03:08.224
[CHEERING AND APPLAUSE]

00:03:08.224 --> 00:03:10.640
ALICE: So I know that the team
has been working incredibly

00:03:10.640 --> 00:03:13.690
hard on that, and learning
a lot about accessibility.

00:03:13.690 --> 00:03:17.904
So if you're not using
the Core or Paper

00:03:17.904 --> 00:03:20.070
elements-- you are creating
your own elements-- yes,

00:03:20.070 --> 00:03:21.500
there's definitely extra
work that you have to do.

00:03:21.500 --> 00:03:23.980
And this is the work that the
Polymer team have been doing.

00:03:23.980 --> 00:03:26.935
So essentially, what you have to
do is what you would do today.

00:03:26.935 --> 00:03:29.310
Sort of what you would do in
the pre-Web Components world

00:03:29.310 --> 00:03:34.300
to actually create
accessible custom widgets,

00:03:34.300 --> 00:03:37.340
just built using divs
and spans and so on.

00:03:37.340 --> 00:03:40.560
And that is to use
technologies like RER

00:03:40.560 --> 00:03:42.860
to specify the semantics
of the elements.

00:03:42.860 --> 00:03:46.670
So with native elements,
they're actually--

00:03:46.670 --> 00:03:48.640
these semantics are
specified by the browser

00:03:48.640 --> 00:03:49.959
and actually baked in.

00:03:49.959 --> 00:03:51.500
When you're creating
custom elements,

00:03:51.500 --> 00:03:53.600
you have to specify
your own semantics.

00:03:53.600 --> 00:03:56.690
So there's plenty of resources
on the web on how to do this.

00:03:56.690 --> 00:03:57.880
There's articles.

00:03:57.880 --> 00:04:01.410
There's a Google DevBytes talk
that I gave for I/O this year,

00:04:01.410 --> 00:04:05.949
which sort of outlines at a
high level what you need to do.

00:04:05.949 --> 00:04:07.740
But yeah, the answer
is that you definitely

00:04:07.740 --> 00:04:08.980
will need to do
extra work if you're

00:04:08.980 --> 00:04:10.104
creating your own elements.

00:04:10.104 --> 00:04:12.900
And that would be a
great thing to do.

00:04:12.900 --> 00:04:13.880
ROB: Awesome.

00:04:13.880 --> 00:04:16.152
Thanks.

00:04:16.152 --> 00:04:19.550
All right, so our next question
comes from Cross Product--

00:04:19.550 --> 00:04:22.000
I'm assuming that's
not your real name.

00:04:22.000 --> 00:04:24.630
"If I'm adding third-party
components to my application,

00:04:24.630 --> 00:04:27.000
how can I know that they'll
perform well and not

00:04:27.000 --> 00:04:29.500
bloat the file size of my app?"

00:04:29.500 --> 00:04:31.890
That seems like a good one
for either Kevin or Steve.

00:04:31.890 --> 00:04:33.056
You guys have an opinion?

00:04:33.056 --> 00:04:33.512
KEVIN: Yeah, yeah.

00:04:33.512 --> 00:04:34.410
I can take a shot.

00:04:34.410 --> 00:04:38.100
So the awesome thing
about encapsulation

00:04:38.100 --> 00:04:40.680
is it hides complexity.

00:04:40.680 --> 00:04:42.335
So the tricky thing
about encapsulation

00:04:42.335 --> 00:04:43.850
is that it also
hides complexity.

00:04:43.850 --> 00:04:44.350
Right?

00:04:44.350 --> 00:04:46.100
So you pull in
this custom element

00:04:46.100 --> 00:04:48.110
that you found in a catalog.

00:04:48.110 --> 00:04:50.740
And the awesome thing
is you don't really

00:04:50.740 --> 00:04:53.577
have to know what the guy-- what
kind of feats of engineering

00:04:53.577 --> 00:04:55.160
the guy had to do
inside of it to make

00:04:55.160 --> 00:04:56.640
this awesome spreadsheet
component or something.

00:04:56.640 --> 00:04:59.010
But at the same time,
you're a little bit removed

00:04:59.010 --> 00:05:00.090
from what's in there.

00:05:00.090 --> 00:05:02.390
So I think there's two good
answers to this question.

00:05:02.390 --> 00:05:05.360
One is, as Matt
mentioned yesterday,

00:05:05.360 --> 00:05:10.460
we're doing a ton of work right
now on performance of Polymer.

00:05:10.460 --> 00:05:13.320
We think composition is such an
awesome tool that you shouldn't

00:05:13.320 --> 00:05:16.940
have to be limited
by having to think,

00:05:16.940 --> 00:05:19.449
"Oh, do I need to only
put three things in here?

00:05:19.449 --> 00:05:21.240
Because I need to worry
about performance."

00:05:21.240 --> 00:05:22.710
So a lot of the
work we're doing it

00:05:22.710 --> 00:05:25.820
so that you can much more
freely compose things

00:05:25.820 --> 00:05:28.240
to get the right abstractions
and the right level

00:05:28.240 --> 00:05:31.160
of componentization.

00:05:31.160 --> 00:05:35.140
So performance, I think,
is a big answer to this.

00:05:35.140 --> 00:05:37.799
Just so that you're not being
taxed for every custom element

00:05:37.799 --> 00:05:40.340
that you're putting in there,
to the extent that you might be

00:05:40.340 --> 00:05:43.920
today with the current
version in Polymer.

00:05:43.920 --> 00:05:45.810
I think another answer
to this question

00:05:45.810 --> 00:05:47.840
is really where the
community comes in.

00:05:47.840 --> 00:05:49.560
So I think Rob
just mentioned, we

00:05:49.560 --> 00:05:53.090
have kind of community-based
catalogs that are springing up.

00:05:53.090 --> 00:05:57.150
So we have Component Kitchen
and CustomElements.io.

00:05:57.150 --> 00:06:00.450
And we have Jan here in the
audience who's working on WebM.

00:06:00.450 --> 00:06:01.912
ROB: [INAUDIBLE].

00:06:01.912 --> 00:06:02.620
KEVIN: Oh, Enzio.

00:06:02.620 --> 00:06:03.920
Great.

00:06:03.920 --> 00:06:07.690
MATT: They're even sitting
next to each other.

00:06:07.690 --> 00:06:10.204
KEVIN: And so, you know,
having these catalogs--

00:06:10.204 --> 00:06:12.620
and especially once we have
things like reputation systems

00:06:12.620 --> 00:06:15.980
in those catalogs, so that
you have four spreadsheet

00:06:15.980 --> 00:06:16.480
components.

00:06:16.480 --> 00:06:18.980
You know, the one that's
got 16 stars next to it

00:06:18.980 --> 00:06:21.330
and has the payload
size mentioned,

00:06:21.330 --> 00:06:22.830
and everyone raving about it.

00:06:22.830 --> 00:06:25.900
These are the things that we can
have spring up in the community

00:06:25.900 --> 00:06:27.677
to help people
navigate their way

00:06:27.677 --> 00:06:29.760
through these third-party
elements in figuring out

00:06:29.760 --> 00:06:31.959
which ones are the good ones.

00:06:31.959 --> 00:06:32.750
ROB: Yeah, totally.

00:06:32.750 --> 00:06:34.260
I think that we
definitely are going

00:06:34.260 --> 00:06:37.409
to look towards the
community to stand up.

00:06:37.409 --> 00:06:39.200
The sorts of catalogs
to help us figure out

00:06:39.200 --> 00:06:40.408
what's the best stuff to use.

00:06:40.408 --> 00:06:41.900
What should bubble to the top.

00:06:41.900 --> 00:06:43.420
And really that's
just going to come

00:06:43.420 --> 00:06:45.540
from folks using it,
trying it out, starring

00:06:45.540 --> 00:06:47.420
things, and liking
them and whatnot.

00:06:47.420 --> 00:06:49.170
And actually using
them in their projects.

00:06:50.784 --> 00:06:52.200
All right, so the
next question is

00:06:52.200 --> 00:06:55.410
going to come
from-- who is this?

00:06:55.410 --> 00:06:56.435
Dave on the internet.

00:06:56.435 --> 00:06:58.760
What's up, Dave?

00:06:58.760 --> 00:06:59.260
Dave!

00:06:59.260 --> 00:07:01.030
Dave, what up, dude?

00:07:01.030 --> 00:07:04.490
"What solutions do you recommend
to manage dependencies and the

00:07:04.490 --> 00:07:06.830
build process in a complex
application with Web

00:07:06.830 --> 00:07:07.825
Components?"

00:07:07.825 --> 00:07:09.950
In particular, I think Dave
is interested in things

00:07:09.950 --> 00:07:10.870
like package managers.

00:07:10.870 --> 00:07:13.940
And he's asking, are Bower
or NPM up to the job?

00:07:20.650 --> 00:07:22.830
STEVE: OK, so.

00:07:22.830 --> 00:07:26.410
First thing I want
to say is, at Polymer

00:07:26.410 --> 00:07:28.410
we're building a library
fundamentally concerned

00:07:28.410 --> 00:07:30.939
with making AIs using
custom elements to do so,

00:07:30.939 --> 00:07:32.730
using these new Web
Component technologies.

00:07:32.730 --> 00:07:34.782
The tools that you're
using for these things

00:07:34.782 --> 00:07:35.740
are still on the table.

00:07:35.740 --> 00:07:37.281
We're not taking
those away from you.

00:07:37.281 --> 00:07:42.480
And the goal here is to sort
of build in a standard way

00:07:42.480 --> 00:07:45.480
such that we plug into
your existing workflow

00:07:45.480 --> 00:07:47.540
as well as we can.

00:07:47.540 --> 00:07:52.030
Having said that, we've chosen
to use Bower as a mechanism

00:07:52.030 --> 00:07:54.240
to get our components
to our users.

00:07:54.240 --> 00:07:56.620
We think it's relatively good.

00:07:56.620 --> 00:07:58.990
It serves our basic needs.

00:07:58.990 --> 00:08:02.400
But we're certainly
not wedded to it,

00:08:02.400 --> 00:08:04.120
and we're open to change here.

00:08:04.120 --> 00:08:07.250
And we definitely recognize that
the NPM community is growing

00:08:07.250 --> 00:08:09.050
and wants to provide
better front-end, sort

00:08:09.050 --> 00:08:12.230
of client-side support
for pulling resources.

00:08:12.230 --> 00:08:17.290
And we want to be nimble here,
and use the tools-- support

00:08:17.290 --> 00:08:19.790
well the tools the
community wants.

00:08:19.790 --> 00:08:24.280
So we certainly will
embrace the tools

00:08:24.280 --> 00:08:26.600
as they mature to become useful.

00:08:26.600 --> 00:08:28.200
And again, for us
right now, we found

00:08:28.200 --> 00:08:33.720
that Bower filled the hole that
we needed, in the best way.

00:08:33.720 --> 00:08:37.299
So having said that, as far
as managing dependencies--

00:08:37.299 --> 00:08:39.950
HTML Imports is a
great way to do this.

00:08:39.950 --> 00:08:47.680
So fundamentally, the unit of
what a thing is in HTML Imports

00:08:47.680 --> 00:08:48.410
is HTML.

00:08:48.410 --> 00:08:50.390
Which is makes a lot
of sense because this

00:08:50.390 --> 00:08:53.720
is the fundamental thing that
we are actually building here,

00:08:53.720 --> 00:08:56.830
is web pages that use HTML.

00:08:56.830 --> 00:09:00.470
You can pull in actual
HTML declarative tags.

00:09:00.470 --> 00:09:01.910
You can pull in CSS.

00:09:01.910 --> 00:09:03.260
You can pull in scripts.

00:09:03.260 --> 00:09:04.750
You can support composition.

00:09:04.750 --> 00:09:06.550
You can nest imports
inside each other.

00:09:06.550 --> 00:09:08.830
It's great.

00:09:08.830 --> 00:09:12.190
And fundamentally,
we might ask, OK,

00:09:12.190 --> 00:09:15.700
HTML Imports sounds good there,
but if I nest my resources

00:09:15.700 --> 00:09:17.950
like that, that sounds like
a lot of network requests.

00:09:17.950 --> 00:09:20.880
And we all know that
that's a potential issue.

00:09:20.880 --> 00:09:23.490
So on the Polymer team, we
built a tool called Vulcanize.

00:09:23.490 --> 00:09:26.120
And the tool basically
says, OK that's great,

00:09:26.120 --> 00:09:28.120
you're using HTML Imports.

00:09:28.120 --> 00:09:29.787
And when you go to
production with this,

00:09:29.787 --> 00:09:32.203
you probably want to reduce
the number of network requests

00:09:32.203 --> 00:09:32.810
you have.

00:09:32.810 --> 00:09:34.340
And you can Vulcanize
your imports.

00:09:34.340 --> 00:09:36.092
Basically what it
does is it just says,

00:09:36.092 --> 00:09:37.300
OK, I'm going to concatenate.

00:09:37.300 --> 00:09:38.655
Just like you would with script.

00:09:38.655 --> 00:09:41.160
You concatenate those
imports into one file

00:09:41.160 --> 00:09:43.870
so it can make one request.

00:09:43.870 --> 00:09:47.080
And again, this fundamentally
solves that problem.

00:09:47.080 --> 00:09:50.620
We also realize that there's
a lot of existing solutions.

00:09:50.620 --> 00:09:52.570
And as I said, we
want to support those.

00:09:52.570 --> 00:09:56.700
And there are a number
of module systems

00:09:56.700 --> 00:09:59.060
that are really
focused around dealing

00:09:59.060 --> 00:10:00.490
with JavaScript, primarily.

00:10:00.490 --> 00:10:03.540
There's ES6 modules, which
is a standard that's coming.

00:10:03.540 --> 00:10:07.095
There's AMD modules,
and there's RequireJS

00:10:07.095 --> 00:10:08.470
There's a lot of
tools like that.

00:10:08.470 --> 00:10:10.400
And I would like to say
that fundamentally, we

00:10:10.400 --> 00:10:14.140
don't see really any core
issues with these things working

00:10:14.140 --> 00:10:15.900
together with HTML Imports.

00:10:15.900 --> 00:10:18.550
And I would like to say
that Quickoffice-- which

00:10:18.550 --> 00:10:20.324
I know Matt spoke
about yesterday.

00:10:20.324 --> 00:10:21.740
That's a big project
within Google

00:10:21.740 --> 00:10:24.990
that uses Polymer
technologies-- actually

00:10:24.990 --> 00:10:27.220
does use RequireJS and
HTML Imports together.

00:10:27.220 --> 00:10:28.690
So again, we work
with it and make

00:10:28.690 --> 00:10:30.106
sure there's no
rough edges there.

00:10:30.106 --> 00:10:32.974
And we feel like fundamentally
this can work together well.

00:10:32.974 --> 00:10:34.640
ROB: One thing I would
add to that, too,

00:10:34.640 --> 00:10:37.200
is that I know that
in Vulcanize, we're

00:10:37.200 --> 00:10:39.670
working to improve that tool
a bit so that it's easier

00:10:39.670 --> 00:10:41.755
to exclude things from
different bundles.

00:10:41.755 --> 00:10:43.630
You could actually break
your dependencies up

00:10:43.630 --> 00:10:46.274
into your critical
elements, and maybe

00:10:46.274 --> 00:10:47.440
your less critical elements.

00:10:47.440 --> 00:10:51.350
And then lazy load
those at a later point.

00:10:51.350 --> 00:10:53.947
Like right now, excluding stuff
in Vulcanize-- you can do it.

00:10:53.947 --> 00:10:55.030
It's a little bit of work.

00:10:55.030 --> 00:10:56.821
Because you have to
kind of know everything

00:10:56.821 --> 00:10:58.342
that's in the other bundle.

00:10:58.342 --> 00:11:00.300
And you've got to write
it all out line by line

00:11:00.300 --> 00:11:02.280
and say, "Exclude all
these things individually."

00:11:02.280 --> 00:11:03.330
We're working on
some changes that

00:11:03.330 --> 00:11:04.538
might make that a lot easier.

00:11:04.538 --> 00:11:07.740
Where you could just say,
"OK, in bundle B just exclude

00:11:07.740 --> 00:11:09.082
everything from bundle A."

00:11:09.082 --> 00:11:10.540
And that could make
it a lot easier

00:11:10.540 --> 00:11:12.720
for you to then start
lazy loading things.

00:11:12.720 --> 00:11:13.910
Another thing to consider.

00:11:13.910 --> 00:11:16.110
Lazy loading is probably going
to be a bigger pattern that we

00:11:16.110 --> 00:11:17.860
talk about in the
future, as we figure out

00:11:17.860 --> 00:11:21.570
how we want that to
work in these apps.

00:11:21.570 --> 00:11:22.600
All right.

00:11:22.600 --> 00:11:26.840
Next question is, "Why
can't I keyboard tab through

00:11:26.840 --> 00:11:29.180
the Polymer elements today"--
and I'm assuming they mean

00:11:29.180 --> 00:11:30.920
the Core and the
Paper elements--

00:11:30.920 --> 00:11:33.400
"And will this be fixed by 1.0?"

00:11:33.400 --> 00:11:37.600
So that sounds like a
good question for Alice.

00:11:37.600 --> 00:11:39.210
ALICE: All right.

00:11:39.210 --> 00:11:41.827
Yeah, when I saw this question,
I kind of laughed to myself

00:11:41.827 --> 00:11:43.160
and I was a little bit confused.

00:11:43.160 --> 00:11:45.000
Because as I was
saying, the Polymer team

00:11:45.000 --> 00:11:48.730
have been doing a lot of work
on accessibility and keyboard

00:11:48.730 --> 00:11:50.970
handling is actually a
big part of accessibility.

00:11:50.970 --> 00:11:51.510
As you can imagine.

00:11:51.510 --> 00:11:53.134
If you're using a
screen reader, you're

00:11:53.134 --> 00:11:55.990
really accessing things
a lot via the keyboard

00:11:55.990 --> 00:11:57.470
if you're on a desktop device.

00:11:57.470 --> 00:11:58.690
So I went and took a look.

00:11:58.690 --> 00:12:01.660
And it turns out that most
stuff is keyboard accessible

00:12:01.660 --> 00:12:03.400
and you can tab to it.

00:12:03.400 --> 00:12:05.320
And there's just no focus dials.

00:12:05.320 --> 00:12:08.909
So I think we need to punt this
one right along to the material

00:12:08.909 --> 00:12:10.700
design panel later on,
and you can ask them

00:12:10.700 --> 00:12:13.840
why there's no focus dials.

00:12:13.840 --> 00:12:16.120
ROB: Sick burn!

00:12:16.120 --> 00:12:18.130
KEVIN: So you're say
they are navigable.

00:12:18.130 --> 00:12:20.740
There's just no visual
indication that focuses on it.

00:12:20.740 --> 00:12:24.410
MATT: So there was briefly
a visual style on this--

00:12:24.410 --> 00:12:26.220
that you can also ask
the material design

00:12:26.220 --> 00:12:30.317
panel-- that involved pulsing.

00:12:30.317 --> 00:12:32.400
And we actually, unfortunately,
left that in there

00:12:32.400 --> 00:12:34.691
when we announced all the
material design stuff at I/O.

00:12:34.691 --> 00:12:36.450
And then really
quickly removed it

00:12:36.450 --> 00:12:40.200
because it was
incredibly irritating.

00:12:40.200 --> 00:12:41.870
So now we just
haven't replaced it.

00:12:41.870 --> 00:12:43.550
So we've got to work on that.

00:12:43.550 --> 00:12:44.932
There's an entire
document on it.

00:12:44.932 --> 00:12:47.140
DIMITRI: There's way too
much cross-panel pollination

00:12:47.140 --> 00:12:47.820
going on here.

00:12:50.597 --> 00:12:52.180
STEVE: One other
thing I wanted to add

00:12:52.180 --> 00:12:54.650
was just give me an
opportunity to mention

00:12:54.650 --> 00:12:55.900
some work that's ongoing here.

00:12:58.790 --> 00:13:01.550
Shadow DOM kind of changed a
lot of fundamental behavior

00:13:01.550 --> 00:13:03.520
about the browser
and custom elements,

00:13:03.520 --> 00:13:04.940
and introduces a
lot of new stuff.

00:13:04.940 --> 00:13:08.360
And so one of things that
we as a team like to do

00:13:08.360 --> 00:13:11.560
is, if we see something that
the platform-- native elements

00:13:11.560 --> 00:13:13.560
in the platform-- can
do that we can't do,

00:13:13.560 --> 00:13:14.640
we ask guys like Dimitri.

00:13:14.640 --> 00:13:16.390
And say, "Hey, can you
give us that power?

00:13:16.390 --> 00:13:18.940
Can you fix that?"

00:13:18.940 --> 00:13:24.087
And he says, "That's really hard
and nobody at other companies

00:13:24.087 --> 00:13:25.670
is going to agree
and it's going to be

00:13:25.670 --> 00:13:27.128
tough to do the
standards process."

00:13:27.128 --> 00:13:30.695
But, you know, that's
why he's the godfather.

00:13:30.695 --> 00:13:32.070
So one of the
areas, for example,

00:13:32.070 --> 00:13:35.130
that came up specifically
with respect to focus

00:13:35.130 --> 00:13:38.040
is, lots of times you want
to make a custom element.

00:13:38.040 --> 00:13:40.470
And this might get
slightly complicated,

00:13:40.470 --> 00:13:42.430
where, "Hey, I
want to be focused

00:13:42.430 --> 00:13:43.880
but I want to maybe
delegate focus

00:13:43.880 --> 00:13:45.115
to some control
that's inside of me."

00:13:45.115 --> 00:13:47.750
And a perfect example of a
platform element that does this

00:13:47.750 --> 00:13:50.160
is an input, which
is type="date".

00:13:50.160 --> 00:13:53.500
In this case, you call
focus on the input

00:13:53.500 --> 00:13:57.580
and inside that there's
individual editors

00:13:57.580 --> 00:13:59.580
for the month, the
day, and the year.

00:13:59.580 --> 00:14:03.380
And it works really well and it
integrates with the tab index

00:14:03.380 --> 00:14:05.590
perfectly and it does
exactly what you think.

00:14:05.590 --> 00:14:07.840
And if you try to do this
with a custom element today,

00:14:07.840 --> 00:14:08.950
it's very tricky.

00:14:08.950 --> 00:14:12.460
And you have to end up writing a
lot of code and it's difficult.

00:14:12.460 --> 00:14:14.170
So actually, Alice
and I have been

00:14:14.170 --> 00:14:17.750
working with a couple great
Blink engineers in Tokyo,

00:14:17.750 --> 00:14:21.600
and there's ongoing
work to fix this.

00:14:21.600 --> 00:14:23.860
And this is one of
these areas where

00:14:23.860 --> 00:14:25.900
Blink is doing
implementation work.

00:14:25.900 --> 00:14:27.840
We're going to make
sure it makes sense.

00:14:27.840 --> 00:14:29.889
And the feedback will
go back into the spec.

00:14:29.889 --> 00:14:31.930
And we'll make sure that
other browsers implement

00:14:31.930 --> 00:14:32.720
this the same way.

00:14:32.720 --> 00:14:34.750
But the bottom line is
you'll be able to create

00:14:34.750 --> 00:14:38.319
custom elements that have this
kind of complex focus behavior

00:14:38.319 --> 00:14:39.860
that the elements
in the platform do.

00:14:39.860 --> 00:14:41.670
So it should be awesome.

00:14:41.670 --> 00:14:42.292
ROB: Good.

00:14:42.292 --> 00:14:44.250
Now, one of things that
you mentioned just then

00:14:44.250 --> 00:14:46.162
was that sometimes
we want to add stuff.

00:14:46.162 --> 00:14:48.036
And you go to Dimitri,
and you're like, "Hey,

00:14:48.036 --> 00:14:48.480
can we add this?"

00:14:48.480 --> 00:14:50.688
And he says, "Well, I don't
know if the other browser

00:14:50.688 --> 00:14:52.840
makers are going
to agree on that."

00:14:52.840 --> 00:14:55.850
And that's actually a larger
question that developers have.

00:14:55.850 --> 00:14:58.560
So a lot of folks are
saying, "Web Components

00:14:58.560 --> 00:14:59.290
seem really cool.

00:14:59.290 --> 00:15:00.430
I want to use them.

00:15:00.430 --> 00:15:03.190
But I've got to make sure
that if I'm using something

00:15:03.190 --> 00:15:05.370
it's supported in all browsers."

00:15:05.370 --> 00:15:08.180
Do you guys see there being
a problem with Web Components

00:15:08.180 --> 00:15:10.300
picking up adoption in
some of the other browsers?

00:15:10.300 --> 00:15:13.434
Are we ever going to reach
some sort of consensus on this?

00:15:13.434 --> 00:15:15.600
I feel like that's a good
question for you, Dimitri.

00:15:18.561 --> 00:15:19.935
DIMITRI: This is
a good question.

00:15:23.960 --> 00:15:24.610
All right.

00:15:24.610 --> 00:15:27.920
It's also a hard question.

00:15:27.920 --> 00:15:31.230
Going first is hard in any case.

00:15:31.230 --> 00:15:35.139
And gosh, I wish that we
didn't have to do this first

00:15:35.139 --> 00:15:37.680
and somebody else would do Web
Components first and figure it

00:15:37.680 --> 00:15:38.660
all out.

00:15:38.660 --> 00:15:40.440
But it's us.

00:15:40.440 --> 00:15:46.110
And yes, a lot of things that
we've done is not scientific.

00:15:46.110 --> 00:15:48.090
It's intuition-based.

00:15:48.090 --> 00:15:51.120
Because you can't get
data-driven about a feature

00:15:51.120 --> 00:15:54.570
until you actually start
having usage of the feature.

00:15:54.570 --> 00:15:58.350
And so there's a certain
chicken and egg problem.

00:15:58.350 --> 00:16:02.540
You can't ship anything until
you get some usage out of it.

00:16:02.540 --> 00:16:05.410
You can't get usage out
of it until you ship it.

00:16:05.410 --> 00:16:09.570
And the thing that's
going to happen

00:16:09.570 --> 00:16:11.840
is, yes, we will
probably realize

00:16:11.840 --> 00:16:14.520
that there are some
mistakes we've made.

00:16:14.520 --> 00:16:19.730
And we need to listen to
you and look at the patterns

00:16:19.730 --> 00:16:21.420
that you're forming
around problems.

00:16:21.420 --> 00:16:24.200
Identify those patterns
as either, "Oh, this

00:16:24.200 --> 00:16:25.080
is a useless feature.

00:16:25.080 --> 00:16:26.038
We can just remove it."

00:16:26.038 --> 00:16:29.030
Or, "Oh, this problem
has not been solved yet,

00:16:29.030 --> 00:16:30.650
so we need to solve it."

00:16:30.650 --> 00:16:36.420
And similarly, as far as the
browser developer is concerned,

00:16:36.420 --> 00:16:39.040
there is definitely going
to be interesting-- well,

00:16:39.040 --> 00:16:41.870
we already are having really
good discussions with Mozilla--

00:16:41.870 --> 00:16:43.580
for implementing Web Components.

00:16:43.580 --> 00:16:48.772
And the way we wrote the spec,
for example, was very like,

00:16:48.772 --> 00:16:50.230
"Well, this is how
it should work."

00:16:50.230 --> 00:16:52.188
And turns out when you
have a different browser

00:16:52.188 --> 00:16:55.390
implementation, "This
is how it should work"

00:16:55.390 --> 00:16:58.050
is just a vague phrase
that doesn't make any sense

00:16:58.050 --> 00:17:02.790
in the implementation context
of a different browser.

00:17:02.790 --> 00:17:04.410
So we have to go
and tune the spec,

00:17:04.410 --> 00:17:07.180
and kind of go,
"Oh, this actually

00:17:07.180 --> 00:17:09.000
needs to be more
precise wording.

00:17:09.000 --> 00:17:13.329
And this is a much more
difficult problem or question

00:17:13.329 --> 00:17:14.440
to answer."

00:17:14.440 --> 00:17:16.640
And so going through
this, as well,

00:17:16.640 --> 00:17:19.450
is just going to be
an iterative process.

00:17:19.450 --> 00:17:23.510
And I don't see this-- like I
mentioned earlier, yesterday

00:17:23.510 --> 00:17:27.400
actually, with my presentation--
this is just the beginning.

00:17:27.400 --> 00:17:29.800
Web Components are going
to grow and mature.

00:17:29.800 --> 00:17:33.500
And as part of that,
there will be changes.

00:17:33.500 --> 00:17:34.830
And we expect those changes.

00:17:34.830 --> 00:17:39.120
And we talk to pretty
much every browser vendor.

00:17:39.120 --> 00:17:43.120
All of them want
you to be happy.

00:17:43.120 --> 00:17:49.060
And the gist of the uncertainty
is whether the Web Components

00:17:49.060 --> 00:17:51.400
are solving the right problems.

00:17:51.400 --> 00:17:54.030
And the best way to
find out is to have

00:17:54.030 --> 00:17:59.256
you use it and react
to it and provide data.

00:17:59.256 --> 00:18:01.444
And once we have data,
we can act on it.

00:18:01.444 --> 00:18:02.860
And that's what
we're going to do.

00:18:05.207 --> 00:18:07.540
MATT: One of the unique things
about the Polymer project

00:18:07.540 --> 00:18:09.520
is being embedded
in the Chrome team.

00:18:09.520 --> 00:18:11.570
We've done a lot of that
iteration throughout.

00:18:11.570 --> 00:18:15.710
And basically none of
the specs exist today

00:18:15.710 --> 00:18:17.980
in the form they were
in when we joined,

00:18:17.980 --> 00:18:19.660
as a result of that iteration.

00:18:19.660 --> 00:18:21.368
And even still there's
going to be things

00:18:21.368 --> 00:18:23.020
that we've missed
as Polymer matures,

00:18:23.020 --> 00:18:24.320
as Web Components matures.

00:18:24.320 --> 00:18:26.560
These other vendors
come along that we'll

00:18:26.560 --> 00:18:27.650
realize we have to change.

00:18:27.650 --> 00:18:29.050
And we'll do that.

00:18:29.050 --> 00:18:32.110
DIMITRI: And this was
a real informative--

00:18:32.110 --> 00:18:34.700
may not be clearly
visible, but the process

00:18:34.700 --> 00:18:36.680
of Polymer team
starting to first

00:18:36.680 --> 00:18:40.270
chew on specs the way they
were was amazing to me.

00:18:40.270 --> 00:18:42.260
Because, first of
all, they messed up

00:18:42.260 --> 00:18:44.850
all of my perfect world.

00:18:44.850 --> 00:18:48.150
Turns out that when you
design things by yourself,

00:18:48.150 --> 00:18:51.110
you imagine things perfectly and
everything works exactly right.

00:18:51.110 --> 00:18:53.210
But then when pesky
users come and start

00:18:53.210 --> 00:18:56.370
trying to use your stuff,
everything falls apart.

00:18:56.370 --> 00:19:00.270
And that was amazing, just
the process of watching it.

00:19:00.270 --> 00:19:04.280
Adding functionality and
removing it and reshaping it

00:19:04.280 --> 00:19:06.000
was a really good process.

00:19:06.000 --> 00:19:07.740
And I fully expect
that this continues

00:19:07.740 --> 00:19:09.470
to happen as more
users start using it.

00:19:09.470 --> 00:19:11.860
I think we've got
the basics right,

00:19:11.860 --> 00:19:14.990
but there's going to be
interesting things like focus

00:19:14.990 --> 00:19:17.654
and figuring out, "How do you
do that multiple input thing?

00:19:17.654 --> 00:19:19.070
What is the right
way to do this?"

00:19:19.070 --> 00:19:24.440
And we're going to
see more of that.

00:19:24.440 --> 00:19:26.080
STEVE: Add one thing
really quickly,

00:19:26.080 --> 00:19:30.740
which is I think that when
I spoke to you previously

00:19:30.740 --> 00:19:33.020
about focus, this is
primarily additive.

00:19:33.020 --> 00:19:35.660
So this is not going to-- if
start relying on these things,

00:19:35.660 --> 00:19:38.480
isn't going to change
fundamentally how you use it.

00:19:38.480 --> 00:19:41.360
And then the one other
thing that I just recalled

00:19:41.360 --> 00:19:43.240
and I want to mention
quickly is that we

00:19:43.240 --> 00:19:45.430
have been collaborating
with Mozilla.

00:19:45.430 --> 00:19:48.560
One very drilled-in
issue was, how

00:19:48.560 --> 00:19:51.230
should define events
flow through Shadow DOM?

00:19:51.230 --> 00:19:53.520
And this was a particular
topic in which Mozilla

00:19:53.520 --> 00:19:56.307
add their-- I think
actually, their model

00:19:56.307 --> 00:19:57.890
for thinking about
it was a little bit

00:19:57.890 --> 00:20:01.530
different than the way that
it was implemented in Chrome.

00:20:01.530 --> 00:20:05.100
And I don't think that the
Blink implementation for this

00:20:05.100 --> 00:20:06.490
has changed yet,
but I think this

00:20:06.490 --> 00:20:08.497
was an area of very
lively discussion.

00:20:08.497 --> 00:20:10.830
And this is one of these
things that's super drilled-in.

00:20:10.830 --> 00:20:13.610
And I think for the normal
developer you would not-- I

00:20:13.610 --> 00:20:16.320
mean, you'd probably
write 1,000 applications

00:20:16.320 --> 00:20:19.980
and never really
care about this.

00:20:19.980 --> 00:20:22.880
But I think it's an
area where I actually

00:20:22.880 --> 00:20:24.820
think that it's very
possible that the Blink

00:20:24.820 --> 00:20:28.630
implementation will change based
on the input that Mozilla gave.

00:20:28.630 --> 00:20:32.600
And this is one of these things
that you've got to hammer out.

00:20:32.600 --> 00:20:35.639
So I think a lot of these
technologies or changes

00:20:35.639 --> 00:20:36.680
are going to be additive.

00:20:36.680 --> 00:20:38.250
And where they are
not additive, I

00:20:38.250 --> 00:20:41.410
think we're really
looking at trying

00:20:41.410 --> 00:20:43.470
to make them as
low-impact as possible.

00:20:43.470 --> 00:20:44.890
And this is a case where I
think nobody would really

00:20:44.890 --> 00:20:45.639
notice the change.

00:20:45.639 --> 00:20:47.860
But it might make it easier
to get agreement and get

00:20:47.860 --> 00:20:50.951
more people adopting it.

00:20:50.951 --> 00:20:51.450
ROB: Cool.

00:20:51.450 --> 00:20:54.100
And then kind of piggy-backing
off of that a little bit,

00:20:54.100 --> 00:20:56.560
we have this question
from [INAUDIBLE].

00:20:56.560 --> 00:20:59.490
He's saying, "Now that you
do have some browsers which

00:20:59.490 --> 00:21:02.370
are picking up Web
Components, what

00:21:02.370 --> 00:21:04.510
do we think about-- is
there going to come a time

00:21:04.510 --> 00:21:07.480
where we don't need a
library like Polymer?

00:21:07.480 --> 00:21:09.680
Where we don't want to use
a library like Polymer?

00:21:09.680 --> 00:21:13.290
What does that look
like you guys?"

00:21:13.290 --> 00:21:16.137
MATT: Well, I think
part of that question

00:21:16.137 --> 00:21:17.720
probably comes from
a misunderstanding

00:21:17.720 --> 00:21:20.240
that I talked about yesterday
around the polyfills being

00:21:20.240 --> 00:21:21.920
part of Polymer.

00:21:21.920 --> 00:21:24.820
We would love a world in which
we don't have polyfills at all.

00:21:24.820 --> 00:21:26.278
Because it means
the Web Components

00:21:26.278 --> 00:21:27.990
are out there and
widely accepted.

00:21:27.990 --> 00:21:29.510
I don't think that's going
to happen for a while,

00:21:29.510 --> 00:21:30.976
because I think
the web platform is

00:21:30.976 --> 00:21:32.350
going to start
moving faster now.

00:21:32.350 --> 00:21:33.810
And we're going to have
new technologies and things

00:21:33.810 --> 00:21:35.190
like Service Worker
and Promises,

00:21:35.190 --> 00:21:37.860
and all these things
coming that will require

00:21:37.860 --> 00:21:39.850
polyfills going
on to the future.

00:21:39.850 --> 00:21:44.380
So that polyfills as a tool
are never going to go away.

00:21:44.380 --> 00:21:46.400
But the Web Components
ones certainly will.

00:21:46.400 --> 00:21:47.380
Hopefully really soon.

00:21:50.400 --> 00:21:51.971
So that was kind of part one.

00:21:51.971 --> 00:21:54.380
And I lost my train of thought.

00:21:54.380 --> 00:21:56.386
ROB: Sorry, so the
polyfills are going away,

00:21:56.386 --> 00:21:58.510
but then what do you see
for Polymer in the future?

00:21:58.510 --> 00:21:59.010
MATT: Yeah.

00:21:59.010 --> 00:22:01.070
So above that Polymer
itself, there's

00:22:01.070 --> 00:22:04.050
always going to be-- Polymer
is opinionated, right?

00:22:04.050 --> 00:22:06.110
And it's going to
provide syntactic sugar.

00:22:06.110 --> 00:22:08.080
So you want those
primitives to be primitive.

00:22:08.080 --> 00:22:10.700
You want them to be so
expressive that no one up here

00:22:10.700 --> 00:22:13.210
can think of all the
different uses for them.

00:22:13.210 --> 00:22:14.730
Like with Dimitri
was talking to,

00:22:14.730 --> 00:22:18.237
the intersection of your perfect
little world with actual users.

00:22:18.237 --> 00:22:20.070
Those users are going
to come up with things

00:22:20.070 --> 00:22:22.111
that are much more awesome
if you've got a really

00:22:22.111 --> 00:22:24.009
low-level primitive
that's really expressive.

00:22:24.009 --> 00:22:25.550
So to a certain
extent there's always

00:22:25.550 --> 00:22:27.342
going to be room to
sugar those primitives.

00:22:27.342 --> 00:22:28.799
And there's always
going to be room

00:22:28.799 --> 00:22:31.270
to have an opinion and
a variety of opinions.

00:22:31.270 --> 00:22:33.600
So there will be more
libraries like Polymer

00:22:33.600 --> 00:22:35.930
that use Web Components
going forward.

00:22:35.930 --> 00:22:39.760
And they'll have a place
for a really long time.

00:22:39.760 --> 00:22:42.147
ROB: You mentioned
the polyfills there.

00:22:42.147 --> 00:22:44.230
Another question that a
lot of developers have is,

00:22:44.230 --> 00:22:47.320
what are we doing to
ensure that those polyfills

00:22:47.320 --> 00:22:49.429
and Polymer in general
run well across all

00:22:49.429 --> 00:22:50.470
these different browsers?

00:22:50.470 --> 00:22:52.540
Because we are trying to
support a lot of things

00:22:52.540 --> 00:22:56.020
on a lot of different platforms.

00:22:56.020 --> 00:22:57.970
STEVE: I can speak
to that a little bit.

00:22:57.970 --> 00:23:00.450
So fundamentally, when
we look at Web Components

00:23:00.450 --> 00:23:03.280
we're talking about
custom elements,

00:23:03.280 --> 00:23:07.800
HTML Imports, Shadow DOM,
things like the template tag.

00:23:07.800 --> 00:23:10.137
And template is a good example.

00:23:10.137 --> 00:23:12.220
There's actually pretty
good support for this now,

00:23:12.220 --> 00:23:14.094
and it's really only IE
that doesn't have it.

00:23:14.094 --> 00:23:16.770
And it's not the hardest
thing to polyfill.

00:23:16.770 --> 00:23:19.620
Custom elements, as it turns,
it's incredibly convenient

00:23:19.620 --> 00:23:21.310
for the browser
do all that work.

00:23:21.310 --> 00:23:24.580
But you can write a polyfill
and it's not that bad

00:23:24.580 --> 00:23:26.270
if your browser is modern.

00:23:26.270 --> 00:23:28.640
If you go back to IE
10, it's very painful.

00:23:28.640 --> 00:23:30.530
But we actually do support that.

00:23:30.530 --> 00:23:34.110
If you go back further, we
said it's a little too hard.

00:23:34.110 --> 00:23:37.560
But I think it's theoretically
possible to extend support

00:23:37.560 --> 00:23:41.011
slightly further back
if there's demand.

00:23:41.011 --> 00:23:43.495
HTML imports, again, it's
incredibly convenient

00:23:43.495 --> 00:23:44.870
for the browser
do all that work.

00:23:44.870 --> 00:23:48.390
And there are certain things
that are around fetching that

00:23:48.390 --> 00:23:49.970
a polyfill really cannot do.

00:23:49.970 --> 00:23:53.160
But fundamentally,
this is also something

00:23:53.160 --> 00:23:57.070
that's not really
impossible to polyfill.

00:23:57.070 --> 00:24:00.462
And so we definitely take
a lot of time and effort

00:24:00.462 --> 00:24:02.920
to make sure that the Custom
Elements polyfill and the HTML

00:24:02.920 --> 00:24:04.294
Imports polyfill
work really well

00:24:04.294 --> 00:24:06.190
and are fundamentally
pretty sound.

00:24:06.190 --> 00:24:11.593
And we don't feel like there's
huge caveats for using them.

00:24:11.593 --> 00:24:18.330
Shadow DOM, on the other hand,
is a very, very, very difficult

00:24:18.330 --> 00:24:19.840
thing to polyfill.

00:24:19.840 --> 00:24:23.160
Fundamentally changes the
way the browser works.

00:24:23.160 --> 00:24:25.510
MATT: We weren't entirely
sure you could polyfill that.

00:24:25.510 --> 00:24:26.009
STEVE: Yeah.

00:24:26.009 --> 00:24:28.230
And really this is one
of these things where

00:24:28.230 --> 00:24:31.265
we had a couple engineers
that were almost too good.

00:24:31.265 --> 00:24:33.680
They did almost too good
a job and sort of proved

00:24:33.680 --> 00:24:35.940
that it was
fundamentally possible.

00:24:35.940 --> 00:24:37.910
But what we have
found in practice

00:24:37.910 --> 00:24:41.040
is there's a pretty
significant both performance

00:24:41.040 --> 00:24:43.690
penalty to trying to polyfill
Shadow DOM correctly.

00:24:46.307 --> 00:24:48.640
MATT: The point of polyfills
has never been performance.

00:24:48.640 --> 00:24:49.630
STEVE: Yeah.

00:24:49.630 --> 00:24:51.100
MATT: It's been compatibility.

00:24:51.100 --> 00:24:53.160
If you can polyfill
something performantly,

00:24:53.160 --> 00:24:54.150
you don't need
the native future.

00:24:54.150 --> 00:24:54.490
STEVE: Yeah.

00:24:54.490 --> 00:24:55.910
So this is one of
these things that's

00:24:55.910 --> 00:24:57.030
actually really tough for us.

00:24:57.030 --> 00:24:57.970
Because on the one
hand, we really

00:24:57.970 --> 00:24:59.560
want to use this
awesome technology

00:24:59.560 --> 00:25:01.280
to push this forward.

00:25:01.280 --> 00:25:03.720
On the other hand,
it's really painful

00:25:03.720 --> 00:25:06.240
to use it on a browser
that doesn't support it.

00:25:06.240 --> 00:25:09.040
And not only is there
a performance problem

00:25:09.040 --> 00:25:10.770
but there's a really
long tail of bugs

00:25:10.770 --> 00:25:14.632
because it's fairly intrusive
to how-- again, fundamentally

00:25:14.632 --> 00:25:16.090
changing the way
the browser works.

00:25:16.090 --> 00:25:20.240
So we've done a good job
squashing those bugs.

00:25:20.240 --> 00:25:22.560
And then there's another
thing, which is it

00:25:22.560 --> 00:25:24.600
does CSS encapsulation,
which we love

00:25:24.600 --> 00:25:27.800
and we hate depending
on your perspective.

00:25:27.800 --> 00:25:30.440
But fundamentally,
this is something

00:25:30.440 --> 00:25:33.910
that is exceptionally hard to
polyfill in a way that is not

00:25:33.910 --> 00:25:37.260
like, "Oh, my page now
takes 10 minutes to load."

00:25:37.260 --> 00:25:40.314
So what we chose to do for
CSS from the start was to say,

00:25:40.314 --> 00:25:42.480
OK, we're not going to try
to be super-correct here.

00:25:42.480 --> 00:25:44.590
We're going to try
to be practical.

00:25:44.590 --> 00:25:46.470
And moving forward
with our new version,

00:25:46.470 --> 00:25:49.430
we're stepping back and
taking a look at Shadow DOM

00:25:49.430 --> 00:25:52.780
and trying to apply that same
rule a little more broadly.

00:25:52.780 --> 00:25:54.947
And say we're going to be
a little bit less correct.

00:25:54.947 --> 00:25:57.155
We're not to make as much--
we're going to still have

00:25:57.155 --> 00:25:59.460
the polyfill, but we think
that practically speaking we

00:25:59.460 --> 00:26:03.070
can get a lot of
the benefit here

00:26:03.070 --> 00:26:05.370
having more of a shim
instead of a polyfill.

00:26:05.370 --> 00:26:09.980
And what this would do is it
would allow us to-- again,

00:26:09.980 --> 00:26:14.910
this is part of a vision in
our new version, 0.8-- to say,

00:26:14.910 --> 00:26:17.160
oh you can use this in
browsers that don't support it.

00:26:17.160 --> 00:26:18.860
And the penalty
for using Polymer

00:26:18.860 --> 00:26:20.960
in browsers that don't
support these technologies

00:26:20.960 --> 00:26:22.870
is not as great.

00:26:22.870 --> 00:26:25.120
And yes, there are going to
be some trade-offs there.

00:26:25.120 --> 00:26:27.120
Like you're not going to
get the same guarantees

00:26:27.120 --> 00:26:28.270
that you do in Chrome.

00:26:28.270 --> 00:26:32.710
However, with some cooperation,
we can get most of the benefit

00:26:32.710 --> 00:26:35.160
and sort of prove out that
Web Components make sense

00:26:35.160 --> 00:26:37.790
and get the feedback that
Dimitri was talking about.

00:26:40.450 --> 00:26:42.620
If thousands of web pages
start using these things--

00:26:42.620 --> 00:26:45.280
and mobile Safari mostly
works, but there's

00:26:45.280 --> 00:26:50.170
a couple of issues with-- the
performance is good enough.

00:26:50.170 --> 00:26:52.620
But there's some issues
with, "Oh, it's not native."

00:26:52.620 --> 00:26:56.380
This is pressure for this to be,
we hope, adopted more widely.

00:27:00.110 --> 00:27:00.620
ROB: Yeah.

00:27:00.620 --> 00:27:01.994
And one other
thing that I wanted

00:27:01.994 --> 00:27:05.655
to add there was we talked a
lot about how we're polyfilling

00:27:05.655 --> 00:27:07.280
all these things in
different browsers,

00:27:07.280 --> 00:27:09.317
but how are we actually
testing those polyfills?

00:27:09.317 --> 00:27:11.150
What are we doing, and
how should developers

00:27:11.150 --> 00:27:12.230
test these things?

00:27:12.230 --> 00:27:14.980
Because as you
mentioned, behavior

00:27:14.980 --> 00:27:19.454
is not exactly the same
under polyfill versus Chrome.

00:27:19.454 --> 00:27:22.120
Are there things that people can
do to unit test their elements,

00:27:22.120 --> 00:27:23.700
or integration test
their elements?

00:27:23.700 --> 00:27:26.470
Like how would
developers do that today?

00:27:26.470 --> 00:27:29.420
KEVIN: Yeah, so maybe
three or four months ago

00:27:29.420 --> 00:27:32.100
we started to tackle
this problem head-on.

00:27:32.100 --> 00:27:34.580
So the interesting thing about
Custom Elements-- and it's

00:27:34.580 --> 00:27:38.610
a little unique from
other frameworks--

00:27:38.610 --> 00:27:41.805
is that you're actually creating
an actual element in the DOM.

00:27:41.805 --> 00:27:43.680
So you have this tight
coupling with the DOM.

00:27:43.680 --> 00:27:46.240
So there's really no way
to test a Custom Element

00:27:46.240 --> 00:27:47.700
outside the DOM, first of all.

00:27:47.700 --> 00:27:49.300
So that was kind
of a unique problem

00:27:49.300 --> 00:27:53.070
with just being able to build
a testing framework that

00:27:53.070 --> 00:27:54.440
tests these things.

00:27:54.440 --> 00:27:55.350
It requires the DOM.

00:27:55.350 --> 00:27:56.630
So that's one.

00:27:56.630 --> 00:27:59.390
And then, as you
say, because we have

00:27:59.390 --> 00:28:02.470
this variable with the polyfills
across-- which introduce

00:28:02.470 --> 00:28:04.630
slight differences in
behavior across platforms--

00:28:04.630 --> 00:28:06.140
it was really
important that we were

00:28:06.140 --> 00:28:09.020
able to easily on a
per check-in basis

00:28:09.020 --> 00:28:13.360
be able to run our tests across
all these different browsers.

00:28:13.360 --> 00:28:15.810
So we've been spending
a lot of time,

00:28:15.810 --> 00:28:17.960
the last four months
or so, developing

00:28:17.960 --> 00:28:19.850
what we're calling
Web Component Tester.

00:28:19.850 --> 00:28:21.960
So it's kind of a framework.

00:28:21.960 --> 00:28:24.530
And we're right now where we're
integrating with Sauce Labs

00:28:24.530 --> 00:28:28.100
to be able to easily-- with
Sauce Labs and GitHub--

00:28:28.100 --> 00:28:31.980
so that when you push
a change to a component

00:28:31.980 --> 00:28:34.050
it can run continuous
integration across a suite

00:28:34.050 --> 00:28:40.320
of browsers in the cloud and
return you those results.

00:28:40.320 --> 00:28:45.945
So I think-- the intention is
that this same framework can

00:28:45.945 --> 00:28:48.830
be rolled out and used on
anyone's third-party components

00:28:48.830 --> 00:28:49.440
going forward.

00:28:52.010 --> 00:28:53.660
So look for more
details on that.

00:28:53.660 --> 00:28:55.820
I think we blogged maybe
a little bit about it.

00:28:55.820 --> 00:28:56.620
MATT: Yeah, the 0.

00:28:56.620 --> 00:28:59.820
5.1 release has got
some stuff about that.

00:28:59.820 --> 00:29:02.401
ROB: Yeah,
blog.polymer-project.org has

00:29:02.401 --> 00:29:04.900
a whole section on Web Component
Tester if you want to check

00:29:04.900 --> 00:29:05.460
that out.

00:29:05.460 --> 00:29:08.940
And I believe also we have
the Seed Element project,

00:29:08.940 --> 00:29:12.530
which is up on GitHub at
PolymerLabs/ seed-element.

00:29:12.530 --> 00:29:13.490
I believe.

00:29:13.490 --> 00:29:15.821
Ian, if that is Using
Web Component Tester?

00:29:15.821 --> 00:29:16.320
Yes.

00:29:16.320 --> 00:29:16.820
OK.

00:29:16.820 --> 00:29:19.120
So if you go and check out
the Seed Element as well,

00:29:19.120 --> 00:29:20.750
that's basically an example.

00:29:20.750 --> 00:29:22.050
You could just follow that.

00:29:22.050 --> 00:29:24.060
Implement it with
your own element

00:29:24.060 --> 00:29:27.030
to get some of those
tests up and running.

00:29:27.030 --> 00:29:29.070
Switching gears a
little bit, let's talk

00:29:29.070 --> 00:29:31.278
about some of the other
libraries that are out there.

00:29:31.278 --> 00:29:34.950
Some of the other things which
were even shown yesterday here.

00:29:34.950 --> 00:29:38.940
Yesterday, my British
doppelganger Matt Gaunt

00:29:38.940 --> 00:29:41.440
got up here and showed
Google's Web Starter Kit.

00:29:41.440 --> 00:29:43.710
And a lot of people are
interested to know, when is it

00:29:43.710 --> 00:29:45.610
appropriate to use
Google Web Starter Kit?

00:29:45.610 --> 00:29:47.560
When is it appropriate
to use Polymer?

00:29:47.560 --> 00:29:50.290
And really, what are the
differences between the two?

00:29:50.290 --> 00:29:50.790
Taylor?

00:29:50.790 --> 00:29:51.370
TAYLOR: I can answer this.

00:29:51.370 --> 00:29:51.870
Yeah.

00:29:51.870 --> 00:29:56.721
So first starting off, kind
of reiterating the difference.

00:29:56.721 --> 00:29:58.220
They're two totally
different tools.

00:29:58.220 --> 00:30:01.260
So Polymer at its core is
for building components.

00:30:01.260 --> 00:30:02.970
And you can build
little UI components

00:30:02.970 --> 00:30:04.640
or you can build arbitrarily
complex components.

00:30:04.640 --> 00:30:07.098
And with composition you can
nest these components together

00:30:07.098 --> 00:30:07.973
to build entire apps.

00:30:07.973 --> 00:30:10.098
And Web Starter Kit is
exactly what it sounds like.

00:30:10.098 --> 00:30:11.090
It's a starter kit.

00:30:11.090 --> 00:30:12.700
So it's a great
jumping off point.

00:30:12.700 --> 00:30:14.960
It's a great skinning
of existing classic web

00:30:14.960 --> 00:30:16.790
apps that are span and div.

00:30:16.790 --> 00:30:19.670
And most importantly,
it's for older browsers.

00:30:19.670 --> 00:30:21.560
So Polymer has
always been and will

00:30:21.560 --> 00:30:22.940
continue to be future-facing.

00:30:22.940 --> 00:30:24.190
We support evergreen browsers.

00:30:24.190 --> 00:30:26.773
With the polyfills, we're able
to reach back a little bit more

00:30:26.773 --> 00:30:28.740
and support slightly
older browsers.

00:30:28.740 --> 00:30:31.470
With Web Starter Kit,
you get all the way back.

00:30:31.470 --> 00:30:34.510
So if you want to get that
nice material design look, kind

00:30:34.510 --> 00:30:37.102
of a light shim over your
existing classic web app,

00:30:37.102 --> 00:30:38.560
Web Starter Kit's
a good way to go.

00:30:38.560 --> 00:30:41.750
If you want to build these
complex, future-facing, really

00:30:41.750 --> 00:30:44.660
nice, silky smooth web apps
with all kinds of behavior,

00:30:44.660 --> 00:30:46.180
Polymer is probably
your way to go.

00:30:46.180 --> 00:30:49.640
And then on top of this,
also, the Paper elements

00:30:49.640 --> 00:30:51.900
is just one set of
componentss-- happen

00:30:51.900 --> 00:30:55.264
to be built by the Polymer team
using Polymer-- that shows what

00:30:55.264 --> 00:30:57.180
you can do by skinning
a whole set of elements

00:30:57.180 --> 00:30:59.010
and making them work
specifically together.

00:30:59.010 --> 00:31:01.300
And so that's our material
design implementation.

00:31:01.300 --> 00:31:03.910
But again, it
composites and groups

00:31:03.910 --> 00:31:05.310
the design into
different phases.

00:31:05.310 --> 00:31:07.270
So we have things as
simple as buttons,

00:31:07.270 --> 00:31:09.616
or we have entire
scaffolding layouts.

00:31:09.616 --> 00:31:10.990
So if you want to
read, actually,

00:31:10.990 --> 00:31:13.040
Web Starter Kit, you
can look through and get

00:31:13.040 --> 00:31:15.930
a nice, top-to-bottom,
app-wide, "What

00:31:15.930 --> 00:31:17.850
should the best
practices for design be?"

00:31:17.850 --> 00:31:19.820
And with Polymer, we actually
implement these as components,

00:31:19.820 --> 00:31:22.280
so you can drag and drop them,
and drop them in your app

00:31:22.280 --> 00:31:22.980
as you'd like.

00:31:22.980 --> 00:31:25.410
So that's kind of the
difference between Web Starter

00:31:25.410 --> 00:31:27.774
Kit and Polymer.

00:31:27.774 --> 00:31:29.440
ROB: Just to add to
that really quickly.

00:31:29.440 --> 00:31:31.840
When I threw together the
website for the Polytechnics--

00:31:31.840 --> 00:31:36.300
which is
itshackademic.com-- I really

00:31:36.300 --> 00:31:37.964
just wanted a
traditional content site.

00:31:37.964 --> 00:31:39.630
I wasn't trying to
build an application.

00:31:39.630 --> 00:31:42.213
I was just trying to make a site
so people could go and figure

00:31:42.213 --> 00:31:43.600
out where the Polytechnics were.

00:31:43.600 --> 00:31:47.290
And for that, I didn't
actually use Web Starter Kit.

00:31:47.290 --> 00:31:49.495
I was just using
regular HTML and SaaS.

00:31:49.495 --> 00:31:50.870
Just kind of rolled
my own thing.

00:31:50.870 --> 00:31:53.232
But I would have
used Web Starter Kit.

00:31:53.232 --> 00:31:55.190
It would have been totally
reasonable to use it

00:31:55.190 --> 00:31:56.010
in that situation.

00:31:56.010 --> 00:31:57.400
There was one thing, though.

00:31:57.400 --> 00:32:01.090
I had this really complex map
thing that I wanted to build.

00:32:01.090 --> 00:32:03.210
And so for that, I used Polymer.

00:32:03.210 --> 00:32:04.649
I built a widget out of Polymer.

00:32:04.649 --> 00:32:06.440
I used it specifically
in that application.

00:32:06.440 --> 00:32:08.356
So the two are not
mutually exclusive, either.

00:32:08.356 --> 00:32:14.110
You could use Web Starter
Kit and Polymer together,

00:32:14.110 --> 00:32:14.610
if you want.

00:32:14.610 --> 00:32:16.020
You want maybe some
interesting widgets

00:32:16.020 --> 00:32:17.520
that you want to
drop into that app.

00:32:17.520 --> 00:32:19.140
So you could use both.

00:32:19.140 --> 00:32:21.350
Now piggybacking
off of that, you've

00:32:21.350 --> 00:32:25.610
also got libraries out there
like AngularJS and Ember.

00:32:25.610 --> 00:32:29.820
One person is wondering, "With
AngularJS 2.x embracing Web

00:32:29.820 --> 00:32:33.630
Components as well, can you guys
talk about how the two align

00:32:33.630 --> 00:32:35.180
and which one should I choose?"

00:32:35.180 --> 00:32:37.990
And this question was
asked by Carlos Santana.

00:32:37.990 --> 00:32:39.005
So that's exciting!

00:32:39.005 --> 00:32:45.610
I guess he's into guitar playing
as well as Web Components.

00:32:45.610 --> 00:32:48.800
MATT: Yeah, he's a big
Angular enthusiast.

00:32:48.800 --> 00:32:51.330
ROB: He's a real
Renaissance man, it seems.

00:32:51.330 --> 00:32:52.920
So who would like
to take that one?

00:32:52.920 --> 00:32:53.420
Matt?

00:32:53.420 --> 00:32:54.860
MATT: Sure, I'll take it.

00:32:54.860 --> 00:32:57.300
Yeah, so Angular is a
really popular library.

00:32:57.300 --> 00:32:58.160
It's great.

00:32:58.160 --> 00:32:59.090
People use it a lot.

00:32:59.090 --> 00:33:00.850
We talk with them quite a bit.

00:33:00.850 --> 00:33:02.850
It's awesome that they're
going to be supporting

00:33:02.850 --> 00:33:05.850
Web Components with Angular 2.

00:33:05.850 --> 00:33:07.380
We're going to have
to wait and see

00:33:07.380 --> 00:33:09.860
a little bit to see
exactly what form

00:33:09.860 --> 00:33:13.350
that support's going to take.

00:33:13.350 --> 00:33:15.800
We'll have to wait
and see a little bit.

00:33:15.800 --> 00:33:16.990
But it'll be great.

00:33:16.990 --> 00:33:19.530
Regardless of that,
one of the great things

00:33:19.530 --> 00:33:21.870
about Web Components
is that it's just HTML.

00:33:21.870 --> 00:33:25.590
So unless your library
takes an optimization path

00:33:25.590 --> 00:33:29.780
or ignores the fact that Custom
Elements could, ever exist,

00:33:29.780 --> 00:33:32.490
you should be able to just drop
these things into any existing

00:33:32.490 --> 00:33:34.410
app in any existing framework.

00:33:34.410 --> 00:33:36.580
So I think as Web Components
becomes more popular,

00:33:36.580 --> 00:33:39.220
it's going to be a lot easier
to do this kind of interop.

00:33:39.220 --> 00:33:42.470
And then changes we're
making in Polymer 0.8,

00:33:42.470 --> 00:33:44.530
using events for change
notification and things

00:33:44.530 --> 00:33:47.020
like that, should also
help a lot of the interop.

00:33:47.020 --> 00:33:49.660
So I think it's going to end
up-- Angular is really popular.

00:33:49.660 --> 00:33:52.050
I think we're going to end
up with the pattern of using

00:33:52.050 --> 00:33:53.327
Polymer elements in Angular.

00:33:53.327 --> 00:33:55.160
And Angular and Polymer
together is probably

00:33:55.160 --> 00:33:58.499
going to be a pretty
popular solution as well.

00:33:58.499 --> 00:34:00.290
STEVE: The only thing
I want to add to this

00:34:00.290 --> 00:34:05.110
is the future that we see is a
future in which you don't have

00:34:05.110 --> 00:34:09.260
to choose A or B. You
can choose A and B.

00:34:09.260 --> 00:34:13.067
And again, Custom Elements
provide a mechanism

00:34:13.067 --> 00:34:15.400
that we can sort of make these
things lightweight enough

00:34:15.400 --> 00:34:16.983
that they can be
used together easily.

00:34:20.050 --> 00:34:22.300
ROB: All right, so
the next question.

00:34:22.300 --> 00:34:26.420
Folks are wondering, is it the
plan of hybrid Polymer web apps

00:34:26.420 --> 00:34:29.960
to be an alternative to
Android apps written in Java?

00:34:29.960 --> 00:34:33.460
If so, when will they be equally
usable in terms of performance?

00:34:33.460 --> 00:34:34.960
This is something
that actually I've

00:34:34.960 --> 00:34:36.460
had a few people ask
me here at the event.

00:34:36.460 --> 00:34:38.043
They come up and
they're like, well, I

00:34:38.043 --> 00:34:40.062
see all these really
cool components

00:34:40.062 --> 00:34:41.020
and I'm not quite sure.

00:34:41.020 --> 00:34:42.864
Should I be building
a hybrid app?

00:34:42.864 --> 00:34:44.280
Should I be building
a native app?

00:34:44.280 --> 00:34:47.489
And how do I decide
between the two?

00:34:47.489 --> 00:34:47.989
Matt?

00:34:47.989 --> 00:34:49.620
MATT: I'll take that one again.

00:34:49.620 --> 00:34:51.245
One of the awesome
things about the web

00:34:51.245 --> 00:34:52.340
is its ubiquity and reach.

00:34:52.340 --> 00:34:52.839
Right?

00:34:52.839 --> 00:34:54.850
So it's across
basically every platform

00:34:54.850 --> 00:34:57.860
that exists as a way
of doing web content.

00:34:57.860 --> 00:35:01.020
Many, many, many native apps
use web content as well,

00:35:01.020 --> 00:35:03.057
or hybrid apps today.

00:35:03.057 --> 00:35:03.640
So it's great.

00:35:03.640 --> 00:35:04.970
It's already there.

00:35:04.970 --> 00:35:06.820
And we think Polymer
going to be a great way

00:35:06.820 --> 00:35:09.840
to build apps across absolutely
any one of these platforms,

00:35:09.840 --> 00:35:11.930
including things that
aren't internet connected.

00:35:11.930 --> 00:35:14.660
HTML is an awesome
way to build UIs

00:35:14.660 --> 00:35:19.190
regardless of whether it's
connected to the internet.

00:35:19.190 --> 00:35:20.710
Yeah, so that said, performance.

00:35:20.710 --> 00:35:22.418
Performance characteristics
are different

00:35:22.418 --> 00:35:24.530
on every single
platform, both on the web

00:35:24.530 --> 00:35:27.050
across different platforms
and native versus web.

00:35:27.050 --> 00:35:30.900
I think there are, if you look
at our Topeka app from I/O,

00:35:30.900 --> 00:35:34.500
it's got native quality
performance on Android.

00:35:34.500 --> 00:35:37.110
Particular things in
Android's framework

00:35:37.110 --> 00:35:38.430
are slow or janky, right?

00:35:38.430 --> 00:35:39.679
Just like they are on the web.

00:35:39.679 --> 00:35:42.330
It's just a different
flavor of janky.

00:35:42.330 --> 00:35:45.120
So I think, that said, Chrome's
performance is improving

00:35:45.120 --> 00:35:47.790
dramatically, especially
in the last year or so,

00:35:47.790 --> 00:35:49.790
as we're finding it a lot
easier to build really

00:35:49.790 --> 00:35:52.300
high-performance web
apps on Android lately.

00:35:52.300 --> 00:35:54.515
And then iOS has always had
really smooth animations

00:35:54.515 --> 00:35:55.390
and things like that.

00:35:55.390 --> 00:35:57.200
So it's going to be
an evolving story.

00:35:57.200 --> 00:35:58.950
And the great thing
is if you use the web,

00:35:58.950 --> 00:36:01.100
you can kind of reach it all

00:36:01.100 --> 00:36:04.400
ROB: And then piggybacking
off of that really quickly,

00:36:04.400 --> 00:36:06.880
someone was asking,
would we recommend

00:36:06.880 --> 00:36:09.490
going ahead and using Polymer
in a client application today?

00:36:09.490 --> 00:36:12.422
And if not, why not?

00:36:12.422 --> 00:36:14.880
And when is there a good time
for them to start doing that?

00:36:14.880 --> 00:36:17.780
How are they going to know
when that good time is?

00:36:17.780 --> 00:36:20.680
MATT: Are the Salesforce
guys still here?

00:36:20.680 --> 00:36:22.550
I think we sort of
answer that yesterday.

00:36:22.550 --> 00:36:26.290
I think that it is-- depending
on your level of tolerance

00:36:26.290 --> 00:36:28.620
for being an early
adopter, you can absolutely

00:36:28.620 --> 00:36:30.882
use these things today.

00:36:30.882 --> 00:36:32.340
Salesforce and News
Corp and things

00:36:32.340 --> 00:36:34.640
like that are examples of
that, as well as YouTube

00:36:34.640 --> 00:36:37.130
and other Google
properties that are dipping

00:36:37.130 --> 00:36:38.870
their toes in the
water as we speak.

00:36:38.870 --> 00:36:40.190
So I think it's ready today.

00:36:40.190 --> 00:36:42.595
And please use it, and
tell us if it's not.

00:36:42.595 --> 00:36:43.595
And tell us exactly how.

00:36:43.595 --> 00:36:44.555
And we'll fix it.

00:36:44.555 --> 00:36:45.930
STEVE: The only
thing I would add

00:36:45.930 --> 00:36:48.220
to that is just
that any of us who

00:36:48.220 --> 00:36:51.270
have built complicated
applications on any platform--

00:36:51.270 --> 00:36:53.380
you all know that it's
really easy to make

00:36:53.380 --> 00:36:55.000
a thing that is very bad.

00:36:55.000 --> 00:36:56.772
Right?

00:36:56.772 --> 00:36:58.230
And I mean, the
way I like to think

00:36:58.230 --> 00:37:03.482
about this is when you're using
the basic core building blocks

00:37:03.482 --> 00:37:05.190
that the platform
you're using gives you,

00:37:05.190 --> 00:37:07.600
what kind of head
room do you have?

00:37:07.600 --> 00:37:09.520
When do you have to make
these tough decisions

00:37:09.520 --> 00:37:10.390
about performance?

00:37:10.390 --> 00:37:12.570
And when do you have
to optimize and say,

00:37:12.570 --> 00:37:13.919
OK, this is a complicated thing.

00:37:13.919 --> 00:37:15.710
I better figure out
how to do this in a way

00:37:15.710 --> 00:37:17.585
that my application
doesn't really slow down.

00:37:17.585 --> 00:37:20.200
And when is the platform
really supporting your use case

00:37:20.200 --> 00:37:23.390
in a way that's helping you
from having to worry about this?

00:37:23.390 --> 00:37:26.570
And this is one of the
areas that we really

00:37:26.570 --> 00:37:29.320
felt like Polymer needed to
do a bit better, as Matt said.

00:37:29.320 --> 00:37:31.450
So we want to try to
increase that head room such

00:37:31.450 --> 00:37:33.966
that you can really feel
confident about using

00:37:33.966 --> 00:37:34.590
these elements.

00:37:34.590 --> 00:37:36.960
They feel lightweight.

00:37:36.960 --> 00:37:39.340
And it doesn't feel
like, oh, I don't

00:37:39.340 --> 00:37:41.300
want to include that
thing because it's

00:37:41.300 --> 00:37:44.000
going to slow my app down.

00:37:44.000 --> 00:37:45.800
So one of our
goals going forward

00:37:45.800 --> 00:37:48.400
is you can do really well today.

00:37:48.400 --> 00:37:49.420
They had room is there.

00:37:49.420 --> 00:37:52.880
But our goal is to
increase that so that it

00:37:52.880 --> 00:37:55.655
feels even better in the future.

00:37:55.655 --> 00:37:57.280
ROB: And can you guys
talk a little bit

00:37:57.280 --> 00:38:01.210
about what the differences are
in Polymer 0.8, specifically?

00:38:01.210 --> 00:38:04.000
Like why is it so much smaller
than the previous version?

00:38:04.000 --> 00:38:06.860
And did that simply come from
breaking the polyfills out,

00:38:06.860 --> 00:38:09.250
or is the payload
smaller across the board?

00:38:09.250 --> 00:38:10.440
What's the deal?

00:38:10.440 --> 00:38:14.200
And why is it so different
in terms of performance?

00:38:14.200 --> 00:38:14.700
MATT: Sure.

00:38:14.700 --> 00:38:15.450
I can start that.

00:38:15.450 --> 00:38:19.390
I'm sure Steve's going to jump
in right after me, though.

00:38:19.390 --> 00:38:21.890
Right now I can say
the payload difference?

00:38:21.890 --> 00:38:24.510
The biggest piece of
that was moving away

00:38:24.510 --> 00:38:28.870
from our existing data binding
system and making that opt-in.

00:38:28.870 --> 00:38:33.060
While creating a system
that's simpler but still

00:38:33.060 --> 00:38:34.847
handles a lot of
the same use cases.

00:38:34.847 --> 00:38:36.680
So wasn't breaking any
of the polyfills out.

00:38:36.680 --> 00:38:38.740
We're still using the
Custom Elements polyfill.

00:38:38.740 --> 00:38:40.830
We're still using the
HTML Imports polyfill.

00:38:40.830 --> 00:38:43.140
And we will still have
a Shadow DOM shim.

00:38:43.140 --> 00:38:45.730
That Shadow DOM shim will
probably be somewhat smaller,

00:38:45.730 --> 00:38:49.160
but it's not a
driver of payload.

00:38:49.160 --> 00:38:51.830
And similarly, we have-- we
didn't just cut features out

00:38:51.830 --> 00:38:53.534
to reduce payload, as well.

00:38:53.534 --> 00:38:54.950
Most of the features
are all still

00:38:54.950 --> 00:38:58.270
there in a really similar form.

00:38:58.270 --> 00:39:01.630
STEVE: Yeah, I would just
say maybe three points.

00:39:01.630 --> 00:39:05.250
Fundamentally, Polymer
started a little bit

00:39:05.250 --> 00:39:06.830
as a science project.

00:39:06.830 --> 00:39:09.060
It was basically, can we
use these technologies

00:39:09.060 --> 00:39:13.180
that this guy made and
make something cool?

00:39:13.180 --> 00:39:14.810
And we're, as Matt
said yesterday,

00:39:14.810 --> 00:39:17.406
I think we're pretty
successful in a lot of ways.

00:39:17.406 --> 00:39:19.780
But one of the things that we
did when we did that was we

00:39:19.780 --> 00:39:21.780
said, let's use these
technologies fundamentally

00:39:21.780 --> 00:39:24.850
first and see if we
can make a good thing.

00:39:24.850 --> 00:39:28.480
And we know the shape of the
thing that we want to make now.

00:39:28.480 --> 00:39:30.120
And it totally makes sense.

00:39:30.120 --> 00:39:31.905
And those principles
are not changing.

00:39:31.905 --> 00:39:34.030
But one of things that we
did with this new version

00:39:34.030 --> 00:39:37.240
is we sort of said,
OK, let's start

00:39:37.240 --> 00:39:40.220
from the perspective of "We
need to make the thing that's

00:39:40.220 --> 00:39:44.350
absolutely as fast as it can
be and add little bit by bit

00:39:44.350 --> 00:39:47.207
layer, by layer, and not
slow down as we do so."

00:39:47.207 --> 00:39:49.290
This was sort of a
fundamentally different process

00:39:49.290 --> 00:39:51.170
and allows us to ensure
that everything's

00:39:51.170 --> 00:39:53.390
tight and small and lean.

00:39:53.390 --> 00:39:54.970
That's the first point.

00:39:54.970 --> 00:39:57.960
The second point
is, as Matt said,

00:39:57.960 --> 00:39:59.430
our data binding
system was really

00:39:59.430 --> 00:40:02.850
good at dealing with
generalized generic data.

00:40:02.850 --> 00:40:05.020
And that's excellent if
you have this problem,

00:40:05.020 --> 00:40:08.089
and complicated apps often do.

00:40:08.089 --> 00:40:09.880
But if you're making
a button, you probably

00:40:09.880 --> 00:40:10.990
don't have this problem.

00:40:10.990 --> 00:40:13.270
So to pay for that
system when you just

00:40:13.270 --> 00:40:16.330
want to use a button, not
necessarily a great trade-off.

00:40:16.330 --> 00:40:19.760
So this is where we said, "We
need a lighter-weight thing

00:40:19.760 --> 00:40:22.690
for a lot of elements
that we're making."

00:40:22.690 --> 00:40:26.490
And that led to a big complexity
reduction and size reduction

00:40:26.490 --> 00:40:28.740
and speed improvement.

00:40:28.740 --> 00:40:30.910
And then the last point
is just on Shadow DOM.

00:40:30.910 --> 00:40:33.960
The Shadow DOM polyfill is big
and tries to be very correct.

00:40:33.960 --> 00:40:36.110
And again, our goal
here is to say,

00:40:36.110 --> 00:40:38.630
"We need to be leaner
and meaner here."

00:40:38.630 --> 00:40:40.910
Both in terms of code
size and also in terms

00:40:40.910 --> 00:40:43.250
of actual basic functionality.

00:40:43.250 --> 00:40:45.610
We're going cut it
to the core and get

00:40:45.610 --> 00:40:49.230
just what we need to prove
out this technology is

00:40:49.230 --> 00:40:52.090
going to be
fundamentally viable.

00:40:52.090 --> 00:40:56.630
So that all put together
seems pretty good so far.

00:40:56.630 --> 00:40:58.390
MATT: Lots of lames.

00:40:58.390 --> 00:41:00.090
ROB: Yeah.

00:41:00.090 --> 00:41:01.670
And sort of following on that.

00:41:01.670 --> 00:41:04.540
Charles [INAUDIBLE] from
Twitter is wondering, "How can

00:41:04.540 --> 00:41:06.200
we actually start using 0.8?

00:41:06.200 --> 00:41:08.539
Even though it is
new and experimental,

00:41:08.539 --> 00:41:10.580
how can we actually start
playing around with it,

00:41:10.580 --> 00:41:15.910
and will there be a list of
possible breaking changes?"

00:41:15.910 --> 00:41:16.410
STEVE: Yeah.

00:41:16.410 --> 00:41:16.910
Totally.

00:41:16.910 --> 00:41:19.990
So right now-- did we announce?

00:41:19.990 --> 00:41:21.250
I don't know.

00:41:21.250 --> 00:41:23.540
Right now in the
Polymer GitHub repo

00:41:23.540 --> 00:41:26.040
there's actually a branch
called 0.8 preview.

00:41:26.040 --> 00:41:29.140
I don't really recommend
anyone poke too hard

00:41:29.140 --> 00:41:31.355
at that because it's very early.

00:41:31.355 --> 00:41:33.480
But you can get some-- if
you're really interested,

00:41:33.480 --> 00:41:36.680
you can get some basic ideas
of the directions we're going.

00:41:36.680 --> 00:41:37.745
Stay tuned.

00:41:37.745 --> 00:41:40.200
"Coming soon" is what
I can say about that.

00:41:40.200 --> 00:41:41.820
What was the other
part about it?

00:41:41.820 --> 00:41:43.770
KEVIN: Yeah, as
far as the breaking

00:41:43.770 --> 00:41:48.310
changes-- so as
Matt said, we hope

00:41:48.310 --> 00:41:50.800
to make it around a
few minor versions

00:41:50.800 --> 00:41:52.960
worth of breaking changes.

00:41:52.960 --> 00:41:55.510
I don't think we've
got it buttoned

00:41:55.510 --> 00:41:59.500
up enough to be able
to write those yet.

00:41:59.500 --> 00:42:02.040
But we'll certainly have
something like a migration

00:42:02.040 --> 00:42:04.090
guide when we get
to the point where

00:42:04.090 --> 00:42:06.290
we're going to release
it, to guide people

00:42:06.290 --> 00:42:10.980
on how to migrate
their code over.

00:42:10.980 --> 00:42:14.250
And the last thing I'll say
is that I think, conceptually,

00:42:14.250 --> 00:42:16.890
the way that you're thinking
about composing and building

00:42:16.890 --> 00:42:18.860
applications using Polymer?

00:42:18.860 --> 00:42:22.910
All of those concepts, 100%,
nothing there is changing.

00:42:22.910 --> 00:42:25.920
It's really going
to be very small.

00:42:25.920 --> 00:42:30.110
Just minor syntactical-type
changes I think,

00:42:30.110 --> 00:42:32.397
that'll be involved in
going from 0.5 to 0.8.

00:42:32.397 --> 00:42:34.230
ROB: Yeah, that's really
one of the benefits

00:42:34.230 --> 00:42:36.590
of working with components
is that as someone consuming

00:42:36.590 --> 00:42:38.192
the component, you
only really care

00:42:38.192 --> 00:42:40.150
about the external
interface of that component.

00:42:40.150 --> 00:42:43.440
You don't really need to or want
to know about the internals.

00:42:43.440 --> 00:42:45.769
And so if those are getting
tweaked, it's totally OK.

00:42:45.769 --> 00:42:47.060
It shouldn't really affect you.

00:42:47.060 --> 00:42:48.500
And that's sort of
the beauty of it.

00:42:48.500 --> 00:42:49.916
Which is something
that you really

00:42:49.916 --> 00:42:52.010
don't have today on the web.

00:42:52.010 --> 00:42:53.700
If you're using
Twitter Bootstrap,

00:42:53.700 --> 00:42:55.970
and they need to change
a div in their nav bar,

00:42:55.970 --> 00:42:57.864
well, you better copy
and paste a whole bunch

00:42:57.864 --> 00:42:59.280
of new markup in
your application,

00:42:59.280 --> 00:43:01.029
because you're going
to need that new div.

00:43:01.029 --> 00:43:03.730
Whereas with a component that
can be inside the Shadow DOM,

00:43:03.730 --> 00:43:06.650
for instance, and you can
just say, power update.

00:43:06.650 --> 00:43:07.400
Get the new thing.

00:43:07.400 --> 00:43:08.800
And move along.

00:43:08.800 --> 00:43:10.961
Which is really nice.

00:43:10.961 --> 00:43:12.960
I just want to remind
folks, because some people

00:43:12.960 --> 00:43:14.710
are asking if they can
ask live questions.

00:43:14.710 --> 00:43:16.168
We do have a
microphone right here.

00:43:16.168 --> 00:43:18.120
I apologize for not
pointing that out earlier.

00:43:18.120 --> 00:43:19.875
If you do-- anyone here
in the audience who

00:43:19.875 --> 00:43:21.333
wants to come up
and ask something,

00:43:21.333 --> 00:43:25.830
if you just come stand at the
mic, I will call upon you.

00:43:25.830 --> 00:43:28.800
Let's actually move
into a little bit

00:43:28.800 --> 00:43:30.310
more technical specifics.

00:43:30.310 --> 00:43:31.935
Because people have
questions about how

00:43:31.935 --> 00:43:33.490
to do particular
things with just

00:43:33.490 --> 00:43:35.334
Web Components and
Polymer as well.

00:43:35.334 --> 00:43:37.250
One question that we
have here is, "When is it

00:43:37.250 --> 00:43:41.290
appropriate to put things in
the Shadow DOM versus the Light

00:43:41.290 --> 00:43:41.940
DOM?"

00:43:41.940 --> 00:43:44.360
And I'm curious, Dimitri, if
you have an opinion on that.

00:43:48.296 --> 00:43:49.545
DIMITRI: It's a good question.

00:43:53.060 --> 00:43:55.710
I think a lot of these
assumptions and opinions

00:43:55.710 --> 00:43:58.740
are going to vary.

00:43:58.740 --> 00:44:04.330
And how people start
using, building frameworks

00:44:04.330 --> 00:44:07.870
around this, and building
toolkits around this.

00:44:07.870 --> 00:44:10.830
My thinking always
had been that if you

00:44:10.830 --> 00:44:16.630
want to make things composeable,
the composition boundaries

00:44:16.630 --> 00:44:21.010
that you imagine is where
Shadow DOM and Light DOM meet.

00:44:21.010 --> 00:44:25.170
So I would start-- I would not
say when is it appropriate?

00:44:25.170 --> 00:44:27.280
That's not the right question.

00:44:27.280 --> 00:44:29.040
So I guess that
was a bad question.

00:44:29.040 --> 00:44:29.540
Sorry.

00:44:29.540 --> 00:44:31.500
And I said it was
a good question.

00:44:31.500 --> 00:44:34.700
The right question is, when
do you need to separate?

00:44:37.840 --> 00:44:40.090
And answering that
question is very

00:44:40.090 --> 00:44:42.430
specific for your application.

00:44:42.430 --> 00:44:45.500
So if you need to
compose things together

00:44:45.500 --> 00:44:48.160
and they need to stay
separate, then one of them

00:44:48.160 --> 00:44:50.770
goes in the Shadow DOM, one
of them goes in the Light DOM.

00:44:50.770 --> 00:44:54.200
If you don't want to do that
and don't need any of this ever,

00:44:54.200 --> 00:44:55.670
then you don't need Shadow DOM.

00:44:58.350 --> 00:45:01.060
KEVIN: I think one way that
you can conceptualize this

00:45:01.060 --> 00:45:05.380
in your head is to think about
private API and public API.

00:45:05.380 --> 00:45:08.010
So the things that you put in
the Shadow DOM of your Custom

00:45:08.010 --> 00:45:10.549
Element are really the private
internals of your component.

00:45:10.549 --> 00:45:12.840
The things that need to make
it go, that the user of it

00:45:12.840 --> 00:45:15.173
really doesn't have to think
about or know about or care

00:45:15.173 --> 00:45:17.250
about or have access to.

00:45:17.250 --> 00:45:18.690
And the insertion
points that you

00:45:18.690 --> 00:45:21.520
put-- so the content element
that you put in your Shadow DOM

00:45:21.520 --> 00:45:23.800
is really exposing where
the public APIs of that

00:45:23.800 --> 00:45:24.990
are for composition.

00:45:24.990 --> 00:45:28.290
So that's the place where
users can pass Light DOM in,

00:45:28.290 --> 00:45:31.960
and then you can decide, the
author of that public API,

00:45:31.960 --> 00:45:36.270
how that expresses itself into
the DOM of your Custom Element.

00:45:36.270 --> 00:45:39.433
So that's, I think, a way that
users can think about that.

00:45:39.433 --> 00:45:41.170
STEVE: The only other
thing I would add

00:45:41.170 --> 00:45:46.470
is just that, I know
this question sometimes

00:45:46.470 --> 00:45:50.570
will be people asking
about things like search.

00:45:50.570 --> 00:45:53.470
Like, well, if I
have one element

00:45:53.470 --> 00:45:56.220
and how's my page
going to be crawl-able?

00:45:56.220 --> 00:45:57.650
And this is an
important question.

00:45:57.650 --> 00:45:59.640
I know that making
stuff for the web,

00:45:59.640 --> 00:46:01.880
this is something that comes up.

00:46:01.880 --> 00:46:03.080
It's critically important.

00:46:03.080 --> 00:46:07.460
And the company we're at here
as something to do with that.

00:46:07.460 --> 00:46:10.220
And that's a good question.

00:46:10.220 --> 00:46:16.860
I think what I will say in
response is, that what we think

00:46:16.860 --> 00:46:19.200
is great about Custom
Elements and Shadow DOM is

00:46:19.200 --> 00:46:21.080
their support for composition.

00:46:21.080 --> 00:46:24.980
When you're making
the system that

00:46:24.980 --> 00:46:28.270
is really good at
that thing, it really

00:46:28.270 --> 00:46:32.920
is unfortunate to have to
worry about essentially what

00:46:32.920 --> 00:46:33.800
is a detail.

00:46:33.800 --> 00:46:38.570
How the external
structure is to this tool.

00:46:38.570 --> 00:46:41.220
So, I mean, one of the
things we're trying to do

00:46:41.220 --> 00:46:43.840
is push the technology
forward to try

00:46:43.840 --> 00:46:45.750
to make the tools
smarter at dealing

00:46:45.750 --> 00:46:47.090
with these types of things.

00:46:47.090 --> 00:46:50.370
It's almost as if you-- here's
my attempt at an analogy-- you

00:46:50.370 --> 00:46:52.999
used LEGOs and they were
great at building things,

00:46:52.999 --> 00:46:55.290
but you only allowed someone
to look at your LEGO thing

00:46:55.290 --> 00:46:56.390
from the top down.

00:46:56.390 --> 00:46:58.180
And it was kind
of lame that way.

00:46:58.180 --> 00:46:58.930
Right?

00:46:58.930 --> 00:47:01.029
So you just look at it
from a different angle,

00:47:01.029 --> 00:47:02.320
and oh, it's three dimensional.

00:47:02.320 --> 00:47:03.930
It's awesome.

00:47:03.930 --> 00:47:08.266
So "tools evolve" is where I go.

00:47:08.266 --> 00:47:10.390
ROB: We have a question
right here in the audience.

00:47:10.390 --> 00:47:11.806
AUDIENCE: Yeah,
so this question's

00:47:11.806 --> 00:47:14.080
related to that question.

00:47:14.080 --> 00:47:16.690
When you have injection
points going into a shadow

00:47:16.690 --> 00:47:18.580
DOM-- so let's say
you have an accordion,

00:47:18.580 --> 00:47:20.880
and the actual content that
are going into the panels

00:47:20.880 --> 00:47:23.057
are injected content.

00:47:23.057 --> 00:47:24.640
And so they're part
of the public API,

00:47:24.640 --> 00:47:26.390
but as soon as they
go into the Shadow DOM

00:47:26.390 --> 00:47:28.760
they're kind of
private API that point.

00:47:28.760 --> 00:47:31.050
How would you deal
with like, let's say,

00:47:31.050 --> 00:47:35.010
a user has a Tooltip plugin
that they're trying to use,

00:47:35.010 --> 00:47:37.760
and I want to show Tooltips on
the content of the accordion,

00:47:37.760 --> 00:47:40.593
but the accordion is
now in the Shadow DOM?

00:47:45.990 --> 00:47:48.359
KEVIN: To be clear, if
you have an accordion,

00:47:48.359 --> 00:47:50.150
it has an insertion
point, so the accordion

00:47:50.150 --> 00:47:52.639
is creating some divs
around open and close,

00:47:52.639 --> 00:47:53.430
that sort of thing.

00:47:53.430 --> 00:47:55.340
That's all kind of
hidden from the user.

00:47:55.340 --> 00:48:00.390
But the content that the user
passes in through the Light DOM

00:48:00.390 --> 00:48:03.140
really stays in the
scope of the user.

00:48:03.140 --> 00:48:08.030
And so they should be fully able
to compose a Tooltip decorator,

00:48:08.030 --> 00:48:11.370
or whatever, around the Light
DOM that they're passing in.

00:48:11.370 --> 00:48:16.126
So I think these use cases
should be well supported.

00:48:16.126 --> 00:48:17.500
STEVE: The only
thing I would add

00:48:17.500 --> 00:48:25.075
is, today, before Shadow
DOM, the DOM of the browser

00:48:25.075 --> 00:48:26.840
is kind of Wild West.

00:48:26.840 --> 00:48:31.280
If I want to make a thing that,
say, makes all buttons blue,

00:48:31.280 --> 00:48:32.390
I can do that with CSS.

00:48:32.390 --> 00:48:35.140
If I wanted to make a
thing that makes a Tooltip

00:48:35.140 --> 00:48:37.010
plugin for anything
in the whole universe,

00:48:37.010 --> 00:48:40.440
I can do that with
jQuery really easily.

00:48:40.440 --> 00:48:43.343
And what we introduced with
Custom Elements and Shadow DOM

00:48:43.343 --> 00:48:46.200
is this fundamental
concept of scoping.

00:48:46.200 --> 00:48:49.840
And the idea is that this
helps you with composition.

00:48:49.840 --> 00:48:51.997
And that's really
what it's there for,

00:48:51.997 --> 00:48:53.330
is to help you with composition.

00:48:53.330 --> 00:48:56.180
So there are times when
you go, if somebody,

00:48:56.180 --> 00:49:00.510
say-- so as Kevin said, if
I'm a Custom Element guy

00:49:00.510 --> 00:49:03.540
and I go, "I want to use the
Tooltip plugin in my Custom

00:49:03.540 --> 00:49:05.860
Element," that
should work great.

00:49:05.860 --> 00:49:07.340
The support for that is there.

00:49:07.340 --> 00:49:10.640
If I'm a guy that goes,
"Regardless of what content

00:49:10.640 --> 00:49:12.765
is on my page that
uses Custom Elements

00:49:12.765 --> 00:49:15.140
and may use Shadow DOM, I want
to use that Tooltip plugin

00:49:15.140 --> 00:49:18.040
and have it apply globally,"
there we have a tension.

00:49:18.040 --> 00:49:22.460
We have a tension between
composition and encapsulation.

00:49:22.460 --> 00:49:25.200
I mean, one guy is
going to say, "I

00:49:25.200 --> 00:49:28.510
don't want my button
inside my scope

00:49:28.510 --> 00:49:30.790
to be-- I want it to be
protected from that guy who

00:49:30.790 --> 00:49:33.920
tries to use this crazy Tooltip
plugin that I don't want."

00:49:33.920 --> 00:49:36.030
Another guy's going
to go, "I want

00:49:36.030 --> 00:49:37.320
that button inside that scope.

00:49:37.320 --> 00:49:39.528
I don't know about it, but
I want that Tooltip plugin

00:49:39.528 --> 00:49:41.190
to be applied."

00:49:41.190 --> 00:49:43.150
And this is something
where there's really

00:49:43.150 --> 00:49:46.430
no fundamentally right answer,
and we have to evolve the way

00:49:46.430 --> 00:49:49.414
that we build things,
such that it makes sense.

00:49:49.414 --> 00:49:51.080
I mean, fundamentally,
this is something

00:49:51.080 --> 00:49:55.780
that we're hoping to address
better moving forward.

00:49:55.780 --> 00:50:00.320
And I just think, stay tuned
for additional opinions

00:50:00.320 --> 00:50:02.392
and support for this in Polymer.

00:50:02.392 --> 00:50:04.100
ROB: Yes, Scott, do
you have another one?

00:50:04.100 --> 00:50:07.560
AUDIENCE: So as a
library developer,

00:50:07.560 --> 00:50:09.377
if somebody is
using your library

00:50:09.377 --> 00:50:11.460
and they're trying to
interact with content that's

00:50:11.460 --> 00:50:14.030
injected into the Shadow
DOM, should the answer today

00:50:14.030 --> 00:50:16.610
be "We will not help you"?

00:50:16.610 --> 00:50:19.600
Because this needs to be figured
out in the Shadow DOM and Web

00:50:19.600 --> 00:50:21.970
Components?

00:50:21.970 --> 00:50:23.690
STEVE: I wouldn't go that far.

00:50:23.690 --> 00:50:27.660
What I would say is, again, I
see two fundamental use cases.

00:50:27.660 --> 00:50:30.290
Use case number
one, guy is like,

00:50:30.290 --> 00:50:31.930
"I don't want to
be-- I don't want

00:50:31.930 --> 00:50:33.510
you to deal with my internals."

00:50:33.510 --> 00:50:35.910
Use case number two, guy
from the outside says,

00:50:35.910 --> 00:50:38.440
"I want to tweak this thing."

00:50:38.440 --> 00:50:44.050
Fundamentally, I think the
best pattern, moving forward,

00:50:44.050 --> 00:50:48.330
is a situation where
if a Guy A made

00:50:48.330 --> 00:50:50.840
Custom Element and Guy
B is trying to use it

00:50:50.840 --> 00:50:55.260
and has this need, that there's
an evolution of the Custom

00:50:55.260 --> 00:50:57.690
Element so that it
supports that use case.

00:50:57.690 --> 00:50:59.080
That's a process, right?

00:50:59.080 --> 00:51:01.937
And in the interim,
Guy B might go,

00:51:01.937 --> 00:51:03.770
"I'm going to fork your
code and change it."

00:51:03.770 --> 00:51:08.620
Or fundamentally, one of the
things that Shadow DOM started

00:51:08.620 --> 00:51:10.030
as a couple years
ago, it started

00:51:10.030 --> 00:51:14.310
with a much stronger
encapsulated boundary.

00:51:14.310 --> 00:51:17.460
And practically speaking,
as users, what we did was we

00:51:17.460 --> 00:51:18.850
softened it a bit.

00:51:18.850 --> 00:51:22.970
So for example, initially there
was no shadow root property.

00:51:22.970 --> 00:51:26.510
So there was no way to get
at those elements inside.

00:51:26.510 --> 00:51:27.650
Today there is.

00:51:27.650 --> 00:51:31.000
So it is certainly possible
for you as a user to say,

00:51:31.000 --> 00:51:32.950
"I need to poke at the
innards of that thing."

00:51:32.950 --> 00:51:35.970
It's not the greatest pattern,
because it's somewhat brittle.

00:51:35.970 --> 00:51:38.210
But it's possible.

00:51:38.210 --> 00:51:41.580
And again, the best solution
is for sort of communication

00:51:41.580 --> 00:51:43.115
and the Custom
Element that you're

00:51:43.115 --> 00:51:44.740
using to provide the
API that it needs.

00:51:44.740 --> 00:51:46.115
ROB: Steve, really
quick, can you

00:51:46.115 --> 00:51:48.600
explain, why was that
boundary softened?

00:51:48.600 --> 00:51:51.400
Like, was there a
reason for doing that?

00:51:51.400 --> 00:51:55.300
KEVIN: It's precisely
because of this tension.

00:51:55.300 --> 00:51:56.670
I mean, it's interesting, right?

00:51:56.670 --> 00:51:59.994
So through Shadow DOM
and these technologies

00:51:59.994 --> 00:52:01.410
we're bringing--
like Steve said--

00:52:01.410 --> 00:52:03.737
we're bringing this
concept of scoping

00:52:03.737 --> 00:52:05.320
to the web, which
really hasn't there.

00:52:05.320 --> 00:52:07.240
It's been this
huge global thing.

00:52:07.240 --> 00:52:09.367
Like all the CSS
and all of the DOM.

00:52:09.367 --> 00:52:10.950
It's all in this one
big global thing.

00:52:10.950 --> 00:52:11.908
Which is kind of crazy.

00:52:11.908 --> 00:52:14.160
When you look at any other
computing environment,

00:52:14.160 --> 00:52:15.770
you would say that's crazy.

00:52:15.770 --> 00:52:17.520
So we're bringing this
concept of scoping.

00:52:17.520 --> 00:52:19.020
And then all of the
sudden you start

00:52:19.020 --> 00:52:21.080
to feel a little bit of
this pain of taking away

00:52:21.080 --> 00:52:24.570
this kind of global toy-- like,
often misused but sometimes

00:52:24.570 --> 00:52:29.080
useful, global query
selectors and global style.

00:52:29.080 --> 00:52:31.140
And so those things are
definitely in tension.

00:52:31.140 --> 00:52:34.820
And I think it's up
to us to help evolve

00:52:34.820 --> 00:52:37.490
more tools for helping
you do these kind

00:52:37.490 --> 00:52:41.650
of cross-cutting types
of things, like theming

00:52:41.650 --> 00:52:44.524
and they use case
sales [INAUDIBLE].

00:52:44.524 --> 00:52:45.940
ROB: Yeah, and
actually, I'm going

00:52:45.940 --> 00:52:47.231
to get you guys really quickly.

00:52:47.231 --> 00:52:49.674
But you mentioned theming and
that is a common question.

00:52:49.674 --> 00:52:51.590
So someone asked, "What
are the best practices

00:52:51.590 --> 00:52:54.252
for managing and coordinating
styles between different Custom

00:52:54.252 --> 00:52:55.960
Elements so the design
appears coherent?"

00:52:55.960 --> 00:52:58.177
This is from William
in Silicon Valley.

00:52:58.177 --> 00:53:00.010
There's a little addendum
to this, which is,

00:53:00.010 --> 00:53:03.614
"Is anybody else concerned that
the /deep combinator is going

00:53:03.614 --> 00:53:06.030
to end up feeling like important
if you're on a really big

00:53:06.030 --> 00:53:06.590
project?"

00:53:06.590 --> 00:53:09.450
Like too many people using deep
and that's the new important.

00:53:09.450 --> 00:53:12.865
So what do you guys say
about theming and deep?

00:53:12.865 --> 00:53:14.240
STEVE: Yeah, I
can speak to that.

00:53:14.240 --> 00:53:15.990
This is a big topic.

00:53:15.990 --> 00:53:18.850
And I just want to
say a few things.

00:53:18.850 --> 00:53:21.810
I think we're pretty unhappy
with deep and [INAUDIBLE]

00:53:21.810 --> 00:53:24.660
shadow, which is its cousin.

00:53:24.660 --> 00:53:28.190
Because they feel too blunt.

00:53:28.190 --> 00:53:31.520
And also because
Blink guys tell us

00:53:31.520 --> 00:53:34.340
they're really
hard to make fast.

00:53:34.340 --> 00:53:39.320
So Polymer is going
to try to not rely

00:53:39.320 --> 00:53:41.060
on those, moving forward.

00:53:41.060 --> 00:53:42.560
And it makes it
tough, because we

00:53:42.560 --> 00:53:45.620
have to adopt other strategies.

00:53:45.620 --> 00:53:47.700
And one of those strategies,
we have an element

00:53:47.700 --> 00:53:49.600
called Core Style
that we want to evolve

00:53:49.600 --> 00:53:50.630
and make more powerful.

00:53:50.630 --> 00:53:52.088
But the notion
basically is there's

00:53:52.088 --> 00:53:55.640
an interaction between the
styles that an element needs

00:53:55.640 --> 00:53:58.945
and where it's
getting them from.

00:53:58.945 --> 00:53:59.570
ROB: All right.

00:53:59.570 --> 00:54:02.090
Question from the audience.

00:54:02.090 --> 00:54:03.300
AUDIENCE: Hi.

00:54:03.300 --> 00:54:06.070
I'm David from the
Pinterest web team.

00:54:06.070 --> 00:54:10.360
And we love Web Components
and we want to use Polymer.

00:54:10.360 --> 00:54:12.470
Unfortunately, we
have to support

00:54:12.470 --> 00:54:16.300
Android browser, IE8, IE9.

00:54:16.300 --> 00:54:20.080
Is there any sort of
graceful degradation guides

00:54:20.080 --> 00:54:23.300
that you have, maybe
internally, or that you

00:54:23.300 --> 00:54:26.389
would consider writing?

00:54:26.389 --> 00:54:27.680
ROB: I have an opinion on that.

00:54:27.680 --> 00:54:28.370
Can I take it?

00:54:28.370 --> 00:54:29.170
Can I take it?

00:54:29.170 --> 00:54:29.670
OK!

00:54:32.410 --> 00:54:35.500
So one thing to consider, if
you have to support those older

00:54:35.500 --> 00:54:38.030
legacy browsers, is there's
a few different options

00:54:38.030 --> 00:54:39.550
so you can go about it.

00:54:39.550 --> 00:54:42.060
First of all, you don't have
to use all the Web Components

00:54:42.060 --> 00:54:42.560
standards.

00:54:42.560 --> 00:54:44.851
You could just, for instance,
just use Custom Elements.

00:54:44.851 --> 00:54:48.130
And the polyfill for
Custom Elements, I believe

00:54:48.130 --> 00:54:51.975
should work on Android
browser and IE9, maybe?

00:54:51.975 --> 00:54:53.350
The polyfill for
Custom Elements?

00:54:53.350 --> 00:54:55.933
I know that someone has done a
variation of that polyfill that

00:54:55.933 --> 00:54:58.362
does work on IE9 and
an entry browser.

00:54:58.362 --> 00:55:00.570
There's a variation-- I
think it's just call Document

00:55:00.570 --> 00:55:03.330
Register Element or
something, by [INAUDIBLE].

00:55:03.330 --> 00:55:06.070
MATT: Oddly enough, the Shadow
DOM polyfill works in IE9.

00:55:06.070 --> 00:55:07.000
ROB: Interesting.

00:55:07.000 --> 00:55:10.544
But I guess what I'm getting at
here is that Custom Elements--

00:55:10.544 --> 00:55:11.960
I don't know if
it's our polyfill,

00:55:11.960 --> 00:55:13.380
but there is a polyfill
out there, at least,

00:55:13.380 --> 00:55:14.796
that does support
Custom Elements.

00:55:14.796 --> 00:55:18.660
You could consider just using
that, just as a starting point.

00:55:18.660 --> 00:55:21.230
I believe what GitHub does,
too, is they do-- maybe

00:55:21.230 --> 00:55:24.020
I shouldn't say this-- but
they do user agent sniffing.

00:55:24.020 --> 00:55:26.659
And they figure
out, is this person

00:55:26.659 --> 00:55:28.450
going to be able to
support Web Components?

00:55:28.450 --> 00:55:30.960
If so, then maybe I'll give
them the Web Component flavor.

00:55:30.960 --> 00:55:32.430
And if not, maybe not.

00:55:32.430 --> 00:55:33.850
But the other thing that they
do, which is really good,

00:55:33.850 --> 00:55:35.225
is they're using
a type extension

00:55:35.225 --> 00:55:38.164
elements for their
little time element

00:55:38.164 --> 00:55:39.830
that is on the GitHub
website right now.

00:55:39.830 --> 00:55:41.540
They've created a
Custom Element that

00:55:41.540 --> 00:55:43.530
extends the native time element.

00:55:43.530 --> 00:55:45.340
And so they take a time element.

00:55:45.340 --> 00:55:47.090
They put a time-stamp
in it on the server,

00:55:47.090 --> 00:55:48.172
and they send that down.

00:55:48.172 --> 00:55:50.380
Now if the browser does not
work with Web Components,

00:55:50.380 --> 00:55:51.530
you still get a time-stamp.

00:55:51.530 --> 00:55:53.030
If it does work
with Web Components,

00:55:53.030 --> 00:55:55.460
well then, that thing kicks
in and starts figuring out

00:55:55.460 --> 00:55:57.000
the relative time
difference and everything.

00:55:57.000 --> 00:55:58.874
So you get the progressive
enhancement there.

00:55:58.874 --> 00:56:01.080
So maybe look at
Custom Elements.

00:56:01.080 --> 00:56:02.900
Maybe look at type
extension elements,

00:56:02.900 --> 00:56:05.110
because that way they
give you good fallbacks.

00:56:05.110 --> 00:56:08.232
Those are my two big
opinions on that.

00:56:08.232 --> 00:56:09.720
Anyone else?

00:56:09.720 --> 00:56:13.460
MATT: Send the older
browsers to an older version.

00:56:13.460 --> 00:56:13.960
ROB: Yeah.

00:56:13.960 --> 00:56:15.590
AUDIENCE: Thanks.

00:56:15.590 --> 00:56:18.240
ROB: So I think we only have
time for one last question.

00:56:18.240 --> 00:56:19.740
We'll take one
from the audience.

00:56:19.740 --> 00:56:20.920
Yes.

00:56:20.920 --> 00:56:23.410
AUDIENCE: JB, SunGard
consulting services.

00:56:23.410 --> 00:56:25.830
So you said that you're
removing some things

00:56:25.830 --> 00:56:29.670
from some of the polyfills.

00:56:29.670 --> 00:56:33.100
What sort of things
you're going to do?

00:56:33.100 --> 00:56:34.700
What things are performant?

00:56:34.700 --> 00:56:36.440
And if things are
really un-performant,

00:56:36.440 --> 00:56:38.550
what kind of things are
really un-performant?

00:56:38.550 --> 00:56:42.700
And what are we going to have to
do for IE10 and older browsers?

00:56:45.480 --> 00:56:46.410
STEVE: Sure.

00:56:46.410 --> 00:56:50.110
I mean, I think
fundamentally, around this, I

00:56:50.110 --> 00:56:52.530
think I would speak
to Shadow DOM.

00:56:52.530 --> 00:56:53.800
ROB: And Steve, if I may?

00:56:53.800 --> 00:56:55.050
Keep it short.

00:56:55.050 --> 00:56:56.230
STEVE: OK.

00:56:56.230 --> 00:56:58.960
So Shadow DOM polyfill
as it is today

00:56:58.960 --> 00:57:01.290
tries to provide a
completely correct view

00:57:01.290 --> 00:57:02.800
of the entire universe.

00:57:02.800 --> 00:57:06.050
Our goal with the new shim is
to say, "We don't necessarily

00:57:06.050 --> 00:57:06.580
need that.

00:57:06.580 --> 00:57:08.900
Instead, what we need is
a completely correct view

00:57:08.900 --> 00:57:12.880
from the perspective of the
element that uses Shadow DOM."

00:57:12.880 --> 00:57:15.540
By doing that, we can get a
pretty massive performance

00:57:15.540 --> 00:57:16.100
improvement.

00:57:16.100 --> 00:57:18.360
KEVIN: Massive
simplification that

00:57:18.360 --> 00:57:21.790
still covers 95%
of the use cases

00:57:21.790 --> 00:57:24.380
that users are going to need.

00:57:24.380 --> 00:57:26.260
STEVE: Yeah, and the
other thing I would say

00:57:26.260 --> 00:57:28.090
is that the polyfill
still exists

00:57:28.090 --> 00:57:31.230
for the guy who wants
the more correct view.

00:57:31.230 --> 00:57:31.772
ROB: Cool.

00:57:31.772 --> 00:57:33.480
All right, well, I
want to thank everyone

00:57:33.480 --> 00:57:35.530
on the panel for
coming out today.

00:57:35.530 --> 00:57:37.030
Hopefully for you
guys this has been

00:57:37.030 --> 00:57:38.210
an illuminating discussion.

00:57:38.210 --> 00:57:40.567
Thank you for everyone who
submitted questions to us.

00:57:40.567 --> 00:57:42.650
If you still have more
questions, for those of you

00:57:42.650 --> 00:57:43.430
here in the
audience, we're going

00:57:43.430 --> 00:57:45.430
to be having breakout
sessions later in the day,

00:57:45.430 --> 00:57:46.500
I believe upstairs.

00:57:46.500 --> 00:57:47.710
So come grab some of us.

00:57:47.710 --> 00:57:49.251
We'll also be sort
of floating around

00:57:49.251 --> 00:57:50.310
throughout the afternoon.

00:57:50.310 --> 00:57:52.893
Also, for those of you who had
questions on the moderator that

00:57:52.893 --> 00:57:55.170
were not answered, we're
going to try and answer those

00:57:55.170 --> 00:57:55.900
after the fact.

00:57:55.900 --> 00:57:57.290
So if you didn't get
your answer today

00:57:57.290 --> 00:57:58.400
but it was on the
moderator, we're

00:57:58.400 --> 00:57:59.800
going to follow up
and try and give you

00:57:59.800 --> 00:58:01.310
a response for all
of those things.

00:58:01.310 --> 00:58:03.726
So thank you all so much for
being with us this afternoon.

00:58:03.726 --> 00:58:05.230
Or this morning.

