WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:02.680
FRED CHUNG: Hi, my name is
Fred with Android Developer

00:00:02.680 --> 00:00:04.000
Relations team.

00:00:04.000 --> 00:00:06.460
We're going to talk about
improving Android Studio

00:00:06.460 --> 00:00:09.360
performance on
memory-constrained computers.

00:00:09.360 --> 00:00:12.280
Android Studio comes with
many features developers

00:00:12.280 --> 00:00:14.500
expect from a modern IDE.

00:00:14.500 --> 00:00:17.560
For example, lint checks
help identify errors

00:00:17.560 --> 00:00:20.140
as you are typing source
code in the editor.

00:00:20.140 --> 00:00:22.270
These developer
productivity features

00:00:22.270 --> 00:00:24.640
mean increased
resource requirements

00:00:24.640 --> 00:00:26.510
on the host operating system.

00:00:26.510 --> 00:00:30.820
Practically, developers
working on complex multi-module

00:00:30.820 --> 00:00:34.750
production projects usually
have 8 gigabytes of RAM or more.

00:00:34.750 --> 00:00:37.720
However, if you're working
on a simple project

00:00:37.720 --> 00:00:41.590
on a memory-constrained computer
with, say, 4 gigabytes of RAM

00:00:41.590 --> 00:00:44.500
or less, we're going to go
through several things you

00:00:44.500 --> 00:00:48.670
could do to make the development
experience a bit smoother.

00:00:48.670 --> 00:00:51.310
There isn't a definite
answer on the minimum specs

00:00:51.310 --> 00:00:54.040
needed to run Android
Studio because there are so

00:00:54.040 --> 00:00:55.420
many factors.

00:00:55.420 --> 00:00:59.920
An obvious first step is close
any unnecessary applications

00:00:59.920 --> 00:01:01.630
on the operating system.

00:01:01.630 --> 00:01:05.379
Sorry for those users that keep
20 web browser tabs opened.

00:01:05.379 --> 00:01:07.990
For those that have
antivirus software running

00:01:07.990 --> 00:01:12.160
on the computer, note that
build files generated by the IDE

00:01:12.160 --> 00:01:14.610
may trigger real-time
virus scanning.

00:01:14.610 --> 00:01:16.930
This competes for
system resources.

00:01:16.930 --> 00:01:20.500
If possible, go to your
virus scanner configuration

00:01:20.500 --> 00:01:24.130
and exclude project
build output directories.

00:01:24.130 --> 00:01:26.800
Android Studio has a
default maximum Java heap

00:01:26.800 --> 00:01:28.810
size of 1.2 gigabytes.

00:01:28.810 --> 00:01:31.720
If your computer has low RAM,
you should correspondingly

00:01:31.720 --> 00:01:36.670
reduce the default heap size to
something like 512 megabytes.

00:01:36.670 --> 00:01:38.560
You can set the
desired values using

00:01:38.560 --> 00:01:42.880
the xmx key in the
studio.vmoption configuration

00:01:42.880 --> 00:01:46.270
file by following
these instructions.

00:01:46.270 --> 00:01:48.160
Note that reducing
this value means

00:01:48.160 --> 00:01:50.350
shrinking the amount of
resources for features

00:01:50.350 --> 00:01:51.610
within Android Studio.

00:01:51.610 --> 00:01:56.090
For example, performance of the
Layout Editor may be affected.

00:01:56.090 --> 00:01:59.230
Now let's talk about Gradle,
one of the core components

00:01:59.230 --> 00:02:01.120
in Android Studio.

00:02:01.120 --> 00:02:04.390
Update to the latest versions
of Gradle and Android

00:02:04.390 --> 00:02:07.480
plugin for Gradle to ensure
the latest performance

00:02:07.480 --> 00:02:10.780
optimizations are
available to your project.

00:02:10.780 --> 00:02:14.560
For example, in 3.0, we've
improved incremental packaging

00:02:14.560 --> 00:02:17.290
with AAPT2.

00:02:17.290 --> 00:02:21.100
The snippets here shows specific
configurations for the Android

00:02:21.100 --> 00:02:23.070
Studio 3.0 beta version.

00:02:23.070 --> 00:02:25.060
Your specific
installed version may

00:02:25.060 --> 00:02:27.590
need a different set of values.

00:02:27.590 --> 00:02:30.460
Next, I'm going to talk
about several techniques that

00:02:30.460 --> 00:02:32.620
have to do with
degrading support

00:02:32.620 --> 00:02:35.500
and leaving only the
bare minimum running.

00:02:35.500 --> 00:02:37.480
Note that some of
these techniques

00:02:37.480 --> 00:02:41.390
could provide performance gain
at the expense of code quality,

00:02:41.390 --> 00:02:45.350
so you really should
use with caution.

00:02:45.350 --> 00:02:48.670
Android Studio provides
a power save mode.

00:02:48.670 --> 00:02:51.190
When turned on, it
will disable a number

00:02:51.190 --> 00:02:54.430
of background operations that
perform lint checks, code

00:02:54.430 --> 00:02:56.380
completions, and so on.

00:02:56.380 --> 00:02:58.000
There'll be a point
in time when you

00:02:58.000 --> 00:03:01.500
want to execute any disabled
operations manually.

00:03:01.500 --> 00:03:03.230
Take lint checks, for example.

00:03:03.230 --> 00:03:05.710
You can manually run them
through the command line

00:03:05.710 --> 00:03:08.000
as shown here.

00:03:08.000 --> 00:03:10.810
Some of you may be using
the Android Emulator.

00:03:10.810 --> 00:03:13.690
On average, it consumes
2 gigabytes of RAM.

00:03:13.690 --> 00:03:17.800
If possible, use an
actual Android device.

00:03:17.800 --> 00:03:21.250
This will help reduce resource
load on your computer.

00:03:21.250 --> 00:03:24.400
Alternatively, if you
must use an emulator,

00:03:24.400 --> 00:03:27.910
consider emulated
RAM, which will also

00:03:27.910 --> 00:03:31.750
decrease virtual memory
consumption on your computer.

00:03:31.750 --> 00:03:35.470
This configuration can be
found under Advanced Settings

00:03:35.470 --> 00:03:38.620
in Virtual Device Configuration.

00:03:38.620 --> 00:03:42.910
Gradle offline mode is a feature
for bandwidth-limited users

00:03:42.910 --> 00:03:45.820
to disable downloading
of build dependencies.

00:03:45.820 --> 00:03:48.370
As a side effect, this
could help improve

00:03:48.370 --> 00:03:51.250
performance on low RAM
machines, since this also

00:03:51.250 --> 00:03:54.030
reduces the amount of
background processing.

00:03:54.030 --> 00:03:56.710
Android Studio offers
an optimization

00:03:56.710 --> 00:04:00.220
to compile multiple
modules in parallel.

00:04:00.220 --> 00:04:02.770
On low RAM machines,
this feature

00:04:02.770 --> 00:04:07.210
will likely have a negative
impact on performance.

00:04:07.210 --> 00:04:10.720
You can disable it in the
Compiler Settings dialog.

00:04:10.720 --> 00:04:12.880
I hope this video gives
you some ideas on how

00:04:12.880 --> 00:04:15.790
to fine-tune Android Studio
in your low RAM environments

00:04:15.790 --> 00:04:18.459
to make the development
experience smoother.

00:04:18.459 --> 00:04:21.527
To learn more, check out
the Android Developer site.

00:04:21.527 --> 00:04:22.360
Thanks for watching.

00:04:22.360 --> 00:04:25.710
[MUSIC PLAYING]

