WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.832
[MUSIC PLAYING]

00:00:06.136 --> 00:00:08.840
CHET HAASE: Hello, and welcome
to What's New in Android.

00:00:08.840 --> 00:00:13.430
Or as I, the only person, like
to refer to it as the Android

00:00:13.430 --> 00:00:13.950
Keynote.

00:00:13.950 --> 00:00:16.779
I'm Chet Haase from the
Android UI Toolkit team.

00:00:16.779 --> 00:00:19.070
ROMAINE GUY: And I'm Romaine
Guy for the Graphics team.

00:00:19.070 --> 00:00:22.760
DAN SANDLER: And I'm Dan
Sandler from the System UI team.

00:00:22.760 --> 00:00:25.160
And we don't have a lot of
time, so let's get to it.

00:00:25.160 --> 00:00:27.440
Are you ready for
What's New in Android?

00:00:27.440 --> 00:00:30.485
Here's where we left
off last time, API 25.

00:00:30.485 --> 00:00:32.299
So we're just going
to that git-sha

00:00:32.299 --> 00:00:36.800
there, pop it in to
git-diff, and then off we go.

00:00:36.800 --> 00:00:39.740
You're going to want
write this down.

00:00:39.740 --> 00:00:41.310
OK--

00:00:41.310 --> 00:00:42.380
CHET HAASE: Next.

00:00:42.380 --> 00:00:45.020
DAN SANDLER: Yep, that
was a good one, OK.

00:00:45.020 --> 00:00:46.140
CHET HAASE: I love those.

00:00:46.140 --> 00:00:48.598
DAN SANDLER: Oh, man, remember
we almost made that an enum?

00:00:48.598 --> 00:00:50.360
It was hilarious.

00:00:50.360 --> 00:00:52.129
[LAUGHTER]

00:00:52.129 --> 00:00:52.670
You got that?

00:00:54.765 --> 00:00:56.390
You think this is
what people came for?

00:00:56.390 --> 00:00:58.970
I don't know why we didn't
think of this before.

00:00:58.970 --> 00:01:01.220
So we've been doing this
talk-- we've been telling you

00:01:01.220 --> 00:01:02.700
what's new for years.

00:01:02.700 --> 00:01:04.670
And you can see that--

00:01:04.670 --> 00:01:06.814
I've forgot my blazer.

00:01:06.814 --> 00:01:08.480
Actually, no, I had
a lovely red blazer,

00:01:08.480 --> 00:01:09.560
but somebody borrowed
it for the keynote.

00:01:09.560 --> 00:01:10.460
[LAUGHTER]

00:01:10.460 --> 00:01:12.100
You've got your--

00:01:12.100 --> 00:01:14.324
ROMAINE GUY: It looks like
you're [INAUDIBLE] me.

00:01:14.324 --> 00:01:16.831
DAN SANDLER: [LAUGHS]
But this year it

00:01:16.831 --> 00:01:18.080
was a little different, right?

00:01:18.080 --> 00:01:21.080
You had developer
previews well in advance,

00:01:21.080 --> 00:01:23.600
so you've seen a lot
of these APIs before.

00:01:23.600 --> 00:01:25.940
You had the Google keynote
where we showed off

00:01:25.940 --> 00:01:27.800
a lot of really exciting stuff.

00:01:27.800 --> 00:01:29.337
We had a developer
keynote where you

00:01:29.337 --> 00:01:30.920
learn about even
more developer stuff.

00:01:30.920 --> 00:01:32.399
So what are we doing here?

00:01:32.399 --> 00:01:34.190
What is the point of
What's New in Android?

00:01:34.190 --> 00:01:35.777
CHET HAASE: Existential crisis.

00:01:35.777 --> 00:01:38.880
DAN SANDLER: [LAUGHS] So--

00:01:41.957 --> 00:01:43.040
did you test this clicker?

00:01:43.040 --> 00:01:43.510
CHET HAASE: I did,

00:01:43.510 --> 00:01:43.660
DAN SANDLER: OK.

00:01:43.660 --> 00:01:43.890
CHET HAASE: I did.

00:01:43.890 --> 00:01:46.140
DAN SANDLER: Think of
this talk like a wine

00:01:46.140 --> 00:01:49.440
tasting or a whiskey flight
or one of those soda machines

00:01:49.440 --> 00:01:51.450
that you can push
all the buttons on.

00:01:51.450 --> 00:01:55.740
This is an artisanal
hand-picked selection of things

00:01:55.740 --> 00:01:58.959
you may have overlooked in
the new release of Android,

00:01:58.959 --> 00:02:00.750
things you're going to
need to do no matter

00:02:00.750 --> 00:02:05.250
what to be part of Android
O, and honestly just

00:02:05.250 --> 00:02:08.220
things we'd like to talk
about when we're on stage.

00:02:08.220 --> 00:02:11.736
So with that, this is really
what's new in Android.

00:02:11.736 --> 00:02:13.110
Specifically, what
you might have

00:02:13.110 --> 00:02:14.910
missed in the developer
preview or the I/O

00:02:14.910 --> 00:02:19.590
keynote or the other keynote,
and why you should care.

00:02:19.590 --> 00:02:22.860
One last thing that I want
to make sure we get to today

00:02:22.860 --> 00:02:24.921
is this.

00:02:24.921 --> 00:02:27.390
Everybody's always
excited about this.

00:02:27.390 --> 00:02:29.936
But we're going to
hold that for the end.

00:02:29.936 --> 00:02:32.200
AUDIENCE: Awww.

00:02:32.200 --> 00:02:34.062
DAN SANDLER: It's
going to be good.

00:02:34.062 --> 00:02:35.270
All right, let's get started.

00:02:35.270 --> 00:02:36.820
Romaine, talk about
UI and graphics.

00:02:36.820 --> 00:02:38.110
ROMAINE GUY: Yes, let's start.

00:02:38.110 --> 00:02:40.390
So the first feature
we want to talk about

00:02:40.390 --> 00:02:42.916
is one that you saw this
morning in one of the keynotes.

00:02:42.916 --> 00:02:44.290
Chet, this clicker
does not work.

00:02:44.290 --> 00:02:45.501
You didn't test it.

00:02:45.501 --> 00:02:46.483
CHET HAASE: Ah.

00:02:49.920 --> 00:02:50.420
You know--

00:02:50.420 --> 00:02:51.503
DAN SANDLER: Wasting time.

00:02:51.503 --> 00:02:53.675
CHET HAASE: --you know, I'm
going to stand back here

00:02:53.675 --> 00:02:55.300
and I'm going to do
the slides for you.

00:02:55.300 --> 00:02:55.900
ROMAINE GUY: All right.

00:02:55.900 --> 00:02:56.800
Go to the next slide, please.

00:02:56.800 --> 00:02:57.370
DAN SANDLER: This
is why they didn't

00:02:57.370 --> 00:02:58.180
want to give us a clicker.

00:02:58.180 --> 00:02:59.987
ROMAINE GUY: All
right, so a feature--

00:02:59.987 --> 00:03:00.881
[LAUGHTER]

00:03:00.881 --> 00:03:02.177
CHET HAASE: That works for me.

00:03:02.177 --> 00:03:03.510
ROMAINE GUY: Just go back there.

00:03:03.510 --> 00:03:05.150
[LAUGHTER]

00:03:05.150 --> 00:03:06.610
I don't want to see you.

00:03:06.610 --> 00:03:08.640
So the first feature
that you saw this morning

00:03:08.640 --> 00:03:11.181
in one of the keynotes, picture
in picture is not just for TV

00:03:11.181 --> 00:03:11.780
anymore.

00:03:11.780 --> 00:03:12.947
It's also for your phone.

00:03:12.947 --> 00:03:15.280
So here we have an example
with third party application.

00:03:15.280 --> 00:03:17.730
Netflix running on your
phone, picture in picture.

00:03:17.730 --> 00:03:19.152
Give me that clicker.

00:03:19.152 --> 00:03:20.360
DAN SANDLER: Let's move back.

00:03:20.360 --> 00:03:21.130
There we go.

00:03:21.130 --> 00:03:22.810
ROMAINE GUY: And
it's really easy

00:03:22.810 --> 00:03:24.220
to implement in
your application.

00:03:24.220 --> 00:03:26.770
You just have to
modify your manifest--

00:03:26.770 --> 00:03:29.110
and stop playing the
animation, please.

00:03:29.110 --> 00:03:31.360
You just have to say support
picture in picture, true.

00:03:31.360 --> 00:03:33.210
You don't need in O
the resizeable activity

00:03:33.210 --> 00:03:36.100
true attribute anymore,
and you should also

00:03:36.100 --> 00:03:38.350
test configuration changes.

00:03:38.350 --> 00:03:40.510
And in your code when
you want to enter

00:03:40.510 --> 00:03:42.236
the picture in picture mode,
you just have one [INAUDIBLE]

00:03:42.236 --> 00:03:42.550
to call.

00:03:42.550 --> 00:03:44.966
You get your activity, and you
call enterPictureInPicture.

00:03:44.966 --> 00:03:48.510
Super simple, and it's going
to make your user super happy.

00:03:48.510 --> 00:03:50.704
Then a feature that's
very dear to my heart.

00:03:50.704 --> 00:03:51.620
It's color management.

00:03:51.620 --> 00:03:53.950
So we're adding support for
wide-gamut displacing O.

00:03:53.950 --> 00:03:55.450
It's not going to
be on all devices.

00:03:55.450 --> 00:03:57.670
Only devices that
support the feature

00:03:57.670 --> 00:04:00.040
will enable it for
your application.

00:04:00.040 --> 00:04:02.230
We're adding support
for 16 bit PNG files,

00:04:02.230 --> 00:04:06.040
so you can have wider colors,
more saturated colors.

00:04:06.040 --> 00:04:08.710
We support ICC profiles,
so color profiles

00:04:08.710 --> 00:04:12.520
embedded in bitmaps in
JPEGs, PNGs, and the WebPs.

00:04:12.520 --> 00:04:15.760
It will ensure accurate
rendition of colors

00:04:15.760 --> 00:04:17.356
across multiple screens.

00:04:17.356 --> 00:04:18.730
We also have a
bunch of new APIs,

00:04:18.730 --> 00:04:19.660
but we're going
to talk about that

00:04:19.660 --> 00:04:21.790
more at the end of the
week in a different talk.

00:04:21.790 --> 00:04:25.000
So because a picture is
worth a thousand words,

00:04:25.000 --> 00:04:27.220
this is color management
and how it works.

00:04:27.220 --> 00:04:28.410
I hope it's clear.

00:04:28.410 --> 00:04:30.170
[LAUGHTER]

00:04:30.170 --> 00:04:33.520
But really the color
management is about something

00:04:33.520 --> 00:04:36.520
you've probably experienced
with your own application.

00:04:36.520 --> 00:04:38.630
Your colors look
different across devices.

00:04:38.630 --> 00:04:40.541
So we have solutions
for you in Android O.

00:04:40.541 --> 00:04:42.040
So if you want to
know more, there's

00:04:42.040 --> 00:04:43.748
going to be a talk
that I'm going to give

00:04:43.748 --> 00:04:46.390
on Friday at 11:30 on stage 2.

00:04:46.390 --> 00:04:48.600
It's called Understanding Color.

00:04:48.600 --> 00:04:51.550
Next, we are also adding
support for multiple displays.

00:04:51.550 --> 00:04:53.715
If your application is already--

00:04:53.715 --> 00:04:55.910
the clicker is horrible.

00:04:55.910 --> 00:04:59.300
If your application supports
multiple windows already,

00:04:59.300 --> 00:05:00.790
the multi-window
mode, it already

00:05:00.790 --> 00:05:04.900
supports multiple display in
O. When the phone is connected

00:05:04.900 --> 00:05:07.244
or a network device is
connected to multiple displays

00:05:07.244 --> 00:05:09.160
and you have an application
that's compatible,

00:05:09.160 --> 00:05:11.560
the user can choose to
send your application

00:05:11.560 --> 00:05:12.730
on a different display.

00:05:12.730 --> 00:05:16.960
When this happens, you're going
to get a resizing configuration

00:05:16.960 --> 00:05:17.710
change.

00:05:17.710 --> 00:05:20.680
You can also control on what
display your activity shows up.

00:05:20.680 --> 00:05:22.720
You can use the Activity
Options for that.

00:05:22.720 --> 00:05:24.250
And you should
really test your app

00:05:24.250 --> 00:05:25.824
if you want to
support this feature.

00:05:25.824 --> 00:05:28.240
To help you with testing, we
have two new developer tools.

00:05:28.240 --> 00:05:30.730
You can run adb shell
dumpsys display.

00:05:30.730 --> 00:05:32.860
It will list all the
current available displays

00:05:32.860 --> 00:05:33.760
on the device.

00:05:33.760 --> 00:05:36.680
And if you call adb shell start
with your activity intent,

00:05:36.680 --> 00:05:38.200
you can specify the
display on which

00:05:38.200 --> 00:05:39.491
you want to start the activity.

00:05:39.491 --> 00:05:42.310
So a very easy way
for you to test this.

00:05:42.310 --> 00:05:44.050
There's a lot more
to those APIs,

00:05:44.050 --> 00:05:48.160
so we encourage you to
go to the office hours

00:05:48.160 --> 00:05:52.210
on Friday and Thursday, the
office hours for Windows

00:05:52.210 --> 00:05:53.990
and activities.

00:05:53.990 --> 00:05:54.580
Next, media.

00:05:57.340 --> 00:05:58.720
[LAUGHTER]

00:05:58.720 --> 00:06:01.580
So we have a lot of very useful
classes in our media package.

00:06:01.580 --> 00:06:04.230
We have the media player, the
media recorder, the extractor,

00:06:04.230 --> 00:06:05.130
and the codec.

00:06:05.130 --> 00:06:07.080
And we added a
new getMetrics API

00:06:07.080 --> 00:06:08.730
on every one of those classes.

00:06:08.730 --> 00:06:11.119
It helps to query
information about the media

00:06:11.119 --> 00:06:12.160
that you're dealing with.

00:06:12.160 --> 00:06:15.570
So you can query the resolution,
the codec, the bitrate,

00:06:15.570 --> 00:06:17.132
the duration, this kind of data.

00:06:17.132 --> 00:06:18.090
It's super easy to use.

00:06:18.090 --> 00:06:20.167
Just call getMetrics on
one of those objects.

00:06:20.167 --> 00:06:21.750
You get the
PersistableBundle, and you

00:06:21.750 --> 00:06:25.380
can look up the documentation
on developer.android.com

00:06:25.380 --> 00:06:28.470
to know what kind of
queries are available.

00:06:28.470 --> 00:06:29.920
Playback is also much improved.

00:06:29.920 --> 00:06:33.240
You now have control over the
buffering in your application.

00:06:33.240 --> 00:06:36.260
So you can specify a low
and a high watermark.

00:06:36.260 --> 00:06:39.660
So the playback of
the video will not

00:06:39.660 --> 00:06:42.390
start until you reach
the low watermark,

00:06:42.390 --> 00:06:45.270
and the system will
do its best to keep

00:06:45.270 --> 00:06:47.304
cache data between this
low and high watermark.

00:06:47.304 --> 00:06:48.720
And you can specify
the watermarks

00:06:48.720 --> 00:06:53.130
in duration or amount
of data, in size.

00:06:53.130 --> 00:06:54.750
We also improved seeking.

00:06:54.750 --> 00:06:56.310
So when you seek
into a video, you

00:06:56.310 --> 00:06:57.476
can now choose the behavior.

00:06:57.476 --> 00:06:59.850
Do you want to seek
to the closest frame,

00:06:59.850 --> 00:07:02.670
to the next keyframe, to
the previous keyframe,

00:07:02.670 --> 00:07:04.680
or to the closest sync frame.

00:07:04.680 --> 00:07:07.050
And, finally, we
made DRM playback

00:07:07.050 --> 00:07:08.910
with Widevine a
lot easier to use

00:07:08.910 --> 00:07:12.000
in all of your applications.

00:07:12.000 --> 00:07:15.450
For recording, until
now, the media mixer

00:07:15.450 --> 00:07:21.900
only let you add one video
track and/or one audio track.

00:07:21.900 --> 00:07:24.900
Now you can have as many audio
and video tracks as you want.

00:07:24.900 --> 00:07:27.010
You can also create
custom tracks.

00:07:27.010 --> 00:07:29.390
The MIME type has to
start with "application/"

00:07:29.390 --> 00:07:31.890
and it's basically a side band
where you can encode any kind

00:07:31.890 --> 00:07:32.598
of data you want.

00:07:32.598 --> 00:07:36.120
So a canonical example is
to encode JavaScript data

00:07:36.120 --> 00:07:38.070
if you want to be able
to replay a 360 video

00:07:38.070 --> 00:07:40.450
or something like that.

00:07:40.450 --> 00:07:43.820
WebView comes with
really useful new APIs.

00:07:43.820 --> 00:07:46.710
We've added the ability
to save browsing,

00:07:46.710 --> 00:07:49.100
that you know and
love from Chrome.

00:07:49.100 --> 00:07:52.620
That detects malwares
and unsecure web pages.

00:07:52.620 --> 00:07:55.870
So if you add this tag in your
manifest, this meta-data tag,

00:07:55.870 --> 00:07:58.080
it's going to use the same
backend and the same API

00:07:58.080 --> 00:08:01.530
that Chrome itself uses
to secure the browsing

00:08:01.530 --> 00:08:03.240
experience for your users.

00:08:03.240 --> 00:08:05.165
The WebView uses now
multiple processes.

00:08:05.165 --> 00:08:07.810
And in particular,
there's a render process.

00:08:07.810 --> 00:08:11.380
So we also have new APIs to
deal with these multi-processes.

00:08:11.380 --> 00:08:13.680
So if the render
process crashes,

00:08:13.680 --> 00:08:17.361
you can use the Termination
Handle API to detect the crash

00:08:17.361 --> 00:08:19.110
and decide what to do
in your application.

00:08:19.110 --> 00:08:21.000
You can crash your
application if you want,

00:08:21.000 --> 00:08:22.458
you can try to
restart the WebView,

00:08:22.458 --> 00:08:25.080
or you can just log something
and show a message to the user.

00:08:25.080 --> 00:08:27.060
It's much more
graceful than before.

00:08:27.060 --> 00:08:29.430
You can also use the
Renderer Importance API

00:08:29.430 --> 00:08:32.169
to better deal with the
low memory situations.

00:08:32.169 --> 00:08:33.990
So when the system
is low on memory,

00:08:33.990 --> 00:08:36.990
it's going to try to
reclaim RAM from somewhere.

00:08:36.990 --> 00:08:39.030
And you can tell the
system whether your WebView

00:08:39.030 --> 00:08:42.640
is very important or not that
important to your application.

00:08:42.640 --> 00:08:45.030
So if the WebView is
critical to your application,

00:08:45.030 --> 00:08:48.282
you should definitely
take a look at this API.

00:08:48.282 --> 00:08:50.490
CHET HAASE: So you know it's
the right button, right?

00:08:50.490 --> 00:08:51.815
ROMAINE GUY: Yes, I know that.

00:08:51.815 --> 00:08:53.159
[LAUGHTER]

00:08:53.159 --> 00:08:55.200
So there were a couple of
long requested features

00:08:55.200 --> 00:08:58.410
for animators, specifically
for AnimatorSets.

00:08:58.410 --> 00:09:02.250
They were deceptively tricky to
implement, so it took a while.

00:09:02.250 --> 00:09:06.510
But now in Android O, we have
the capability in AnimatorSets

00:09:06.510 --> 00:09:07.980
of having seeking.

00:09:07.980 --> 00:09:09.760
So now if you have
an Animator that's

00:09:09.760 --> 00:09:11.340
a collection of
child Animators, you

00:09:11.340 --> 00:09:13.080
can seek within
those child Animators

00:09:13.080 --> 00:09:14.610
in the overall AnimatorSet.

00:09:14.610 --> 00:09:16.110
So, yeah.

00:09:16.110 --> 00:09:20.160
We also have the ability, uh--

00:09:20.160 --> 00:09:21.370
to reverse

00:09:21.370 --> 00:09:21.954
[LAUGHTER]

00:09:21.954 --> 00:09:23.370
ROMAINE GUY: Hey,
Chet, didn't you

00:09:23.370 --> 00:09:25.775
try to implement those
APIs a while ago?

00:09:25.775 --> 00:09:26.525
CHET HAASE: Maybe.

00:09:26.525 --> 00:09:27.380
ROMAINE GUY: Uh-huh.

00:09:27.380 --> 00:09:29.149
And who implemented
the APIs in the end?

00:09:29.149 --> 00:09:29.940
CHET HAASE: Not me.

00:09:29.940 --> 00:09:30.110
ROMAINE GUY: Yeah

00:09:30.110 --> 00:09:30.818
CHET HAASE: Yeah.

00:09:30.818 --> 00:09:32.010
ROMAINE GUY: Exactly.

00:09:32.010 --> 00:09:34.770
CHET HAASE: So new capability,
again, in AnimatorSet

00:09:34.770 --> 00:09:35.500
to reverse.

00:09:35.500 --> 00:09:39.000
So you no longer have to set up
a separate AnimatorSet with all

00:09:39.000 --> 00:09:41.760
that functionality and get
a listener and all that.

00:09:41.760 --> 00:09:45.330
We do all that tedious
work for you, so yeah.

00:09:45.330 --> 00:09:47.550
Autofill, because
it's really tedious

00:09:47.550 --> 00:09:49.660
to get all that information
correct over and over.

00:09:49.660 --> 00:09:51.780
We saw this in the
keynote earlier.

00:09:51.780 --> 00:09:53.740
It's the ability to--

00:09:53.740 --> 00:09:55.110
you've got a form to fill in.

00:09:55.110 --> 00:09:57.970
There is a provider that can
give you that information.

00:09:57.970 --> 00:09:59.910
So when you get
those text fields,

00:09:59.910 --> 00:10:02.760
we can automatically enter
that information for you.

00:10:02.760 --> 00:10:05.617
And there are a couple of
different aspects to this.

00:10:05.617 --> 00:10:07.950
One is that you can certainly
implement your own service

00:10:07.950 --> 00:10:10.140
and provide that capability,
or depend on service

00:10:10.140 --> 00:10:11.820
that we are providing instead.

00:10:11.820 --> 00:10:14.720
Or more typically, you will
implement a client of that.

00:10:14.720 --> 00:10:16.140
The standard views just work.

00:10:16.140 --> 00:10:18.761
If you're using TextView,
if you're using EditText,

00:10:18.761 --> 00:10:20.385
we know how to receive
this information

00:10:20.385 --> 00:10:22.674
to interact with
a service already.

00:10:22.674 --> 00:10:24.840
So you don't need to do
anything for standard views.

00:10:24.840 --> 00:10:27.210
If you're using custom
views, or if you

00:10:27.210 --> 00:10:30.210
want to provide more information
about standard views,

00:10:30.210 --> 00:10:34.620
we have APIs for providing
hints to us about what the value

00:10:34.620 --> 00:10:36.716
types are, as well
as APIs to tell

00:10:36.716 --> 00:10:38.340
us more about your
custom views and how

00:10:38.340 --> 00:10:40.350
you want to interact with that.

00:10:40.350 --> 00:10:42.450
Also if you have a
custom view hierarchy--

00:10:42.450 --> 00:10:45.810
let's say you have a surface
view where you have views

00:10:45.810 --> 00:10:49.140
inside of there but all we know
is that there's a SurfaceView,

00:10:49.140 --> 00:10:51.130
then there are APIs
for you to tell us

00:10:51.130 --> 00:10:53.820
about the virtual hierarchy that
you want us to interact with.

00:10:53.820 --> 00:10:56.760
There is going to be more about
this in a session on Friday

00:10:56.760 --> 00:10:58.460
morning, so go to
that if you want

00:10:58.460 --> 00:11:00.980
to learn more about autofill.

00:11:00.980 --> 00:11:03.100
And now let's talk a
little bit about text.

00:11:03.100 --> 00:11:05.750
There's been a bunch of stuff
going on in the text arena

00:11:05.750 --> 00:11:07.074
this time.

00:11:07.074 --> 00:11:08.240
I think we can rewrite this.

00:11:08.240 --> 00:11:09.752
There we go.

00:11:09.752 --> 00:11:12.110
[LAUGHTER]

00:11:12.110 --> 00:11:15.500
I only use that font
because it hurts Dan.

00:11:15.500 --> 00:11:17.200
It just physically hurts him.

00:11:17.200 --> 00:11:18.410
It's awesome.

00:11:18.410 --> 00:11:20.180
ROMAINE GUY: I
think you broke him.

00:11:20.180 --> 00:11:22.040
CHET HAASE: All right,
so first of all,

00:11:22.040 --> 00:11:27.080
you can use XML to declare
font information using

00:11:27.080 --> 00:11:29.360
sort of a neat hack
with data binding,

00:11:29.360 --> 00:11:31.820
but it's kind of tricky to do.

00:11:31.820 --> 00:11:33.680
And why shouldn't
we actually provide

00:11:33.680 --> 00:11:35.000
that capability for you?

00:11:35.000 --> 00:11:35.840
So now we do.

00:11:35.840 --> 00:11:38.540
So you can now actually
put a font file directly

00:11:38.540 --> 00:11:40.740
in this new resource
font directory.

00:11:40.740 --> 00:11:44.219
[APPLAUSE]

00:11:48.700 --> 00:11:50.320
Yay, indeed.

00:11:50.320 --> 00:11:52.570
So put that in the
directory, or you can tell us

00:11:52.570 --> 00:11:53.520
about the font family.

00:11:53.520 --> 00:11:55.840
So you can provide several
fonts with information

00:11:55.840 --> 00:11:57.700
about the styles of
each, and then you

00:11:57.700 --> 00:12:01.225
can just use those directly as
you could any other resource.

00:12:01.225 --> 00:12:03.955
And from code, you just
say, give me that resource,

00:12:03.955 --> 00:12:05.950
and away you go.

00:12:05.950 --> 00:12:07.120
Downloadable fonts.

00:12:07.120 --> 00:12:09.017
Now we have the
capability for you

00:12:09.017 --> 00:12:11.350
to declare a font that you
want to use that we will then

00:12:11.350 --> 00:12:14.950
download and cache on the system
for you if it is not there yet,

00:12:14.950 --> 00:12:18.290
or if it is on the system then
we'll use it from the cache.

00:12:18.290 --> 00:12:20.140
You can do this from
code or from XML

00:12:20.140 --> 00:12:23.240
and use it as a resource,
just like you did in XML fonts

00:12:23.240 --> 00:12:25.510
on the previous exciting slide.

00:12:25.510 --> 00:12:27.220
And we also have a
font provider that we

00:12:27.220 --> 00:12:29.636
are providing in a not yet
released version of Google Play

00:12:29.636 --> 00:12:30.340
Services.

00:12:30.340 --> 00:12:32.840
There is a beta version of that
available at the conference

00:12:32.840 --> 00:12:33.340
this week.

00:12:33.340 --> 00:12:34.770
I don't know the
details on that,

00:12:34.770 --> 00:12:36.940
but there's a session where
you can learn the details,

00:12:36.940 --> 00:12:39.273
or you should be able to go
to the Play Services website

00:12:39.273 --> 00:12:40.960
to learn more about that.

00:12:40.960 --> 00:12:43.624
And this gives you access
to all of Google fonts.

00:12:43.624 --> 00:12:45.790
So if you just want to use
one of the standard ones,

00:12:45.790 --> 00:12:49.510
such as that beautiful font I
use to kickoff this section,

00:12:49.510 --> 00:12:52.810
maybe that's in there,
then you can ask for that

00:12:52.810 --> 00:12:54.970
directly from the service.

00:12:54.970 --> 00:12:58.000
Also there's the ability to
have Auto-Sizing TextView.

00:12:58.000 --> 00:13:00.700
So, typically, if you
resize a TextView--

00:13:00.700 --> 00:13:03.580
[APPLAUSE]

00:13:05.224 --> 00:13:06.640
DAN SANDLER: You
never know what's

00:13:06.640 --> 00:13:09.790
going to be the hit, right?

00:13:09.790 --> 00:13:10.360
Text.

00:13:10.360 --> 00:13:12.524
CHET HAASE: Text
is cool, especially

00:13:12.524 --> 00:13:13.690
when it's in the right font.

00:13:13.690 --> 00:13:16.630
So what you get now is
the behavior on the left

00:13:16.630 --> 00:13:18.670
there where we're just
resizing the view itself.

00:13:18.670 --> 00:13:20.590
There's no change to the font.

00:13:20.590 --> 00:13:23.420
But on the right, if you opt
into the Auto-Sizing TextView

00:13:23.420 --> 00:13:26.140
behavior, then we're going
to resize the font for you.

00:13:26.140 --> 00:13:28.570
And you can specify the
behavior or the step increments

00:13:28.570 --> 00:13:31.090
that you want to use
or the specific size

00:13:31.090 --> 00:13:33.700
that you want to snap
to as it resizes.

00:13:33.700 --> 00:13:34.930
So there's APIs for that.

00:13:34.930 --> 00:13:38.860
There's APIs in both XML as well
as Java programming language

00:13:38.860 --> 00:13:41.380
codes, so knock yourself out.

00:13:41.380 --> 00:13:43.210
And for all of
these text features,

00:13:43.210 --> 00:13:46.210
XML fonts, downloadable fonts,
and Auto-Sizing TextView.

00:13:46.210 --> 00:13:48.280
They're talking about all
of these in the What's

00:13:48.280 --> 00:13:50.475
New in Support Library
session tomorrow morning.

00:13:50.475 --> 00:13:52.600
And you're wondering, why
are they talking about it

00:13:52.600 --> 00:13:53.980
in a Support Library session?

00:13:53.980 --> 00:13:56.260
Aren't these O platform APIs?

00:13:56.260 --> 00:13:57.490
Yes, they are.

00:13:57.490 --> 00:13:59.761
And they are also
in Support Library.

00:13:59.761 --> 00:14:02.587
[APPLAUSE]

00:14:05.890 --> 00:14:08.110
So you can use all of these
capabilities going back

00:14:08.110 --> 00:14:10.120
on to earlier releases.

00:14:10.120 --> 00:14:11.800
AccessibilityService Utilities.

00:14:11.800 --> 00:14:13.690
If you're writing in
AccessibilityService,

00:14:13.690 --> 00:14:14.440
great thing to do.

00:14:14.440 --> 00:14:16.773
We have new capabilities that
you can take advantage of.

00:14:16.773 --> 00:14:18.370
Language detection,
the ability to put

00:14:18.370 --> 00:14:21.130
a button in the navigation bar
along with the other buttons

00:14:21.130 --> 00:14:23.160
there to make it easier
to access your stuff.

00:14:23.160 --> 00:14:25.750
Separate volume control
for accessibility volume,

00:14:25.750 --> 00:14:27.484
so you're not
conflating that volume

00:14:27.484 --> 00:14:28.900
with other volumes
on the devices,

00:14:28.900 --> 00:14:33.182
and also the ability to define
custom fingerprint gestures.

00:14:33.182 --> 00:14:35.140
If you want to learn
anything more about these,

00:14:35.140 --> 00:14:37.750
there's a session this
afternoon on accessibility

00:14:37.750 --> 00:14:39.100
that you should check out.

00:14:39.100 --> 00:14:42.454
And finally, one of my
favorite really tiny changes--

00:14:42.454 --> 00:14:43.870
I'm going to say
tiny because it's

00:14:43.870 --> 00:14:46.960
one line of code for the
API, but the actual cls

00:14:46.960 --> 00:14:49.180
that went in to fix
all the code that

00:14:49.180 --> 00:14:52.509
was dependent upon the former
implementation was huge.

00:14:52.509 --> 00:14:54.550
So I don't want to detract
from the work from it.

00:14:54.550 --> 00:14:56.925
But API-wise, really
tiny, kind of hidden,

00:14:56.925 --> 00:14:59.050
kind of looks like the same
thing from the outside.

00:14:59.050 --> 00:15:01.600
The way findViewById used to
be declared with something

00:15:01.600 --> 00:15:04.390
like this, public
view, findViewById,

00:15:04.390 --> 00:15:07.075
and then you call that, you
pass in your resource ID,

00:15:07.075 --> 00:15:08.950
and get back a view,
and then you immediately

00:15:08.950 --> 00:15:10.420
cast it into what you want.

00:15:10.420 --> 00:15:12.347
So TextView, you have
to tell it to TextView

00:15:12.347 --> 00:15:14.680
on both the left and the
right, and there's parentheses,

00:15:14.680 --> 00:15:15.730
and it's big bother.

00:15:15.730 --> 00:15:19.000
People use helper libraries
just to get around the fact

00:15:19.000 --> 00:15:21.910
that this looks so horrible.

00:15:21.910 --> 00:15:24.178
So now--

00:15:24.178 --> 00:15:25.666
[APPLAUSE]

00:15:25.666 --> 00:15:26.658
--we have this.

00:15:31.630 --> 00:15:33.850
I call this feature Castaway.

00:15:33.850 --> 00:15:35.530
I think I am the only
one that does so.

00:15:38.429 --> 00:15:40.470
DAN SANDLER: All right,
blew past my first slide.

00:15:40.470 --> 00:15:41.220
That's fine.

00:15:41.220 --> 00:15:44.190
I want to talk a little bit
about some of the System UI

00:15:44.190 --> 00:15:45.750
stuff you're going to look at.

00:15:45.750 --> 00:15:47.416
If you have an app,
you're going to need

00:15:47.416 --> 00:15:49.020
to know about adaptive icons.

00:15:49.020 --> 00:15:52.950
I think this got like barely
a mention in one of Steph's

00:15:52.950 --> 00:15:54.090
slides earlier today.

00:15:54.090 --> 00:15:56.582
Essentially, we are trying
to save you time and money.

00:15:56.582 --> 00:15:59.040
There are so many launchers
out there, and each one of them

00:15:59.040 --> 00:16:02.070
has a different recommendation
for the shape of your icon.

00:16:02.070 --> 00:16:04.290
So adaptive icons is a
new piece of technology

00:16:04.290 --> 00:16:07.920
that we have brought to you
in O that allows you to say,

00:16:07.920 --> 00:16:10.740
here's my background, here's
my foreground, cut out

00:16:10.740 --> 00:16:11.940
to whatever shape you like.

00:16:11.940 --> 00:16:14.520
So even if the
launcher has a circle

00:16:14.520 --> 00:16:17.910
or it's got round rectangle
or it's got something awful,

00:16:17.910 --> 00:16:24.680
you have an icon that matches
exactly the local flavor.

00:16:24.680 --> 00:16:26.430
There's going to be a
ton more information

00:16:26.430 --> 00:16:31.020
about adaptive icons
at a talk on Thursday,

00:16:31.020 --> 00:16:33.750
and definitely go to that one.

00:16:36.420 --> 00:16:38.880
All right, let's talk about
shortcuts and widgets,

00:16:38.880 --> 00:16:40.770
because launcher is
also part of System UI.

00:16:40.770 --> 00:16:44.460
Previously, to get shortcuts and
widgets on the user's screen,

00:16:44.460 --> 00:16:47.220
there's a broadcast for
shortcuts that kind of works,

00:16:47.220 --> 00:16:50.250
and for widgets you just have
to beg the user, please, please,

00:16:50.250 --> 00:16:52.425
see if you can find our
widget inside the launcher.

00:16:55.250 --> 00:16:59.520
In O, you can now actually
request one of these things

00:16:59.520 --> 00:17:02.089
to be pinned to the
user's workspace

00:17:02.089 --> 00:17:03.630
using Shortcut
Manager for shortcuts,

00:17:03.630 --> 00:17:05.910
using App Widget
Manager for widgets.

00:17:05.910 --> 00:17:07.764
And the user then
gets the opportunity

00:17:07.764 --> 00:17:10.180
to say, no, I don't want that
on my desktop, or yes, I do,

00:17:10.180 --> 00:17:12.000
and, in fact, I will
go ahead and place it

00:17:12.000 --> 00:17:13.200
exactly where I want it.

00:17:13.200 --> 00:17:15.000
Or they can just say, sure,
find a spot for it, which

00:17:15.000 --> 00:17:16.230
was the previous behavior.

00:17:16.230 --> 00:17:18.711
So now you don't have to walk
the user through a long flow.

00:17:18.711 --> 00:17:20.460
You just send them
right into this dialog.

00:17:20.460 --> 00:17:21.725
It's super convenient.

00:17:21.725 --> 00:17:24.350
Look at all the new users you're
going to have on your widgets.

00:17:24.350 --> 00:17:27.640
[APPLAUSE]

00:17:29.686 --> 00:17:32.060
I could just say I'm pausing
for applause when I'm really

00:17:32.060 --> 00:17:33.560
fussing with the clicker here.

00:17:33.560 --> 00:17:36.890
This also we'll talk
about on Thursday at 4:30.

00:17:36.890 --> 00:17:39.250
All right, notifications,
you knew it was coming.

00:17:39.250 --> 00:17:40.392
They're super useful.

00:17:40.392 --> 00:17:41.600
They're great for engagement.

00:17:41.600 --> 00:17:43.430
Users love them.

00:17:43.430 --> 00:17:45.240
They may be a little
out of control.

00:17:45.240 --> 00:17:48.069
There's a lot that is being
used in the notification stream

00:17:48.069 --> 00:17:49.610
right now, and it's
very hard for you

00:17:49.610 --> 00:17:51.526
to get your message to
the users that want it.

00:17:51.526 --> 00:17:54.230
And it's very hard for a
user to manage the inflow

00:17:54.230 --> 00:17:56.420
of demands on their attention.

00:17:56.420 --> 00:17:57.920
If it's out of
control now, the user

00:17:57.920 --> 00:17:59.086
should always be in control.

00:17:59.086 --> 00:18:01.253
That's been a principle of
ours since the beginning.

00:18:01.253 --> 00:18:03.044
We added the ability
to block notifications

00:18:03.044 --> 00:18:04.280
from a package in Jelly Bean.

00:18:04.280 --> 00:18:09.160
And Nougat we refined a little
bit and added quietening.

00:18:09.160 --> 00:18:11.810
But all through this,
the number one request

00:18:11.810 --> 00:18:14.210
we get from users is,
OK, but can I just

00:18:14.210 --> 00:18:16.522
block some of an
app's notifications?

00:18:16.522 --> 00:18:18.230
On the other hand,
the number one request

00:18:18.230 --> 00:18:21.140
we get from developers
is could the user just

00:18:21.140 --> 00:18:22.857
block some of my notifications?

00:18:22.857 --> 00:18:23.690
It's the same thing.

00:18:23.690 --> 00:18:25.340
Everybody's been asking
for the same thing.

00:18:25.340 --> 00:18:27.423
And this is where notification
channels come from.

00:18:27.423 --> 00:18:30.260
It's a new API in O.
A channel is a named

00:18:30.260 --> 00:18:32.050
category of notifications
from one app

00:18:32.050 --> 00:18:34.280
that all share
the same behavior.

00:18:34.280 --> 00:18:37.400
Vibration, sound, light,
whether they pop up on screen,

00:18:37.400 --> 00:18:42.410
so that the user has explicit
and fine grained control.

00:18:42.410 --> 00:18:46.380
[APPLAUSE]

00:18:46.380 --> 00:18:49.140
So it's an app, you'll get to
set up all your own channels,

00:18:49.140 --> 00:18:52.590
defining the default behavior
for O. A private message should

00:18:52.590 --> 00:18:54.220
pop up.

00:18:54.220 --> 00:18:58.070
A tag maybe doesn't pop up
or it's got a lower priority,

00:18:58.070 --> 00:19:00.570
and then it users when they
long press a notification or use

00:19:00.570 --> 00:19:02.200
the new slide gesture
to look at it,

00:19:02.200 --> 00:19:03.930
they can see what
channel it's on

00:19:03.930 --> 00:19:07.680
and make changes
right there in line.

00:19:07.680 --> 00:19:11.100
Once you target O, if you take
nothing else away from my two

00:19:11.100 --> 00:19:12.570
minutes here, take away this.

00:19:12.570 --> 00:19:15.420
You have to use channels
for every notification,

00:19:15.420 --> 00:19:16.570
or they will be dropped.

00:19:16.570 --> 00:19:19.170
So until you target O,
you can start slowly

00:19:19.170 --> 00:19:21.540
evolving your notification
system over to channels.

00:19:21.540 --> 00:19:23.800
Once you target O, they
have to all be channelized,

00:19:23.800 --> 00:19:26.050
because we're trying to get
to a consistent experience

00:19:26.050 --> 00:19:28.140
where the user knows what
they're going to get.

00:19:28.140 --> 00:19:29.580
And we're going
to talk about that

00:19:29.580 --> 00:19:30.960
and a lot of other
great stuff, including

00:19:30.960 --> 00:19:32.449
design considerations,
all the code

00:19:32.449 --> 00:19:34.740
that I didn't put up there,
whatever that little blinky

00:19:34.740 --> 00:19:39.280
thing is over there, on
this talk at 4:30 tomorrow.

00:19:39.280 --> 00:19:42.710
There's a lot of other great
stuff coming to System UI.

00:19:42.710 --> 00:19:44.310
We have listed some of it here.

00:19:44.310 --> 00:19:45.600
It ran off the end again.

00:19:45.600 --> 00:19:47.550
I like doing that with slides.

00:19:47.550 --> 00:19:49.890
And I encourage you very much
to check out the developer

00:19:49.890 --> 00:19:51.960
previews or install the beta
and play with all of it.

00:19:51.960 --> 00:19:53.001
We're really proud of it.

00:19:55.440 --> 00:19:57.700
ROMAINE GUY: All right,
new APIs for US developers.

00:19:57.700 --> 00:19:59.830
We expanded on the
Strict Mode API

00:19:59.830 --> 00:20:02.250
that I'm sure you all
using in your debugging.

00:20:02.250 --> 00:20:04.170
So now on the
ThreadPolicy, you can

00:20:04.170 --> 00:20:07.400
get warned when using
unbuffered I/O. So if you use

00:20:07.400 --> 00:20:09.810
an input or an output stream
without wrapping it into one

00:20:09.810 --> 00:20:12.090
of the buffered streams,
you'll get a flash

00:20:12.090 --> 00:20:15.030
or whatever it is, the
trigger warning you've set.

00:20:15.030 --> 00:20:17.430
On the VmPolicy, if you
don't tag your sockets

00:20:17.430 --> 00:20:18.450
you can also get warned.

00:20:18.450 --> 00:20:20.550
Tagging sockets is really
useful to do traffic

00:20:20.550 --> 00:20:22.630
debugging using Android Studio.

00:20:22.630 --> 00:20:25.000
And finally, if you
open another intent--

00:20:25.000 --> 00:20:27.366
if you send an intent to
outside of your application

00:20:27.366 --> 00:20:28.740
and you need to
grant permission,

00:20:28.740 --> 00:20:29.910
you can also be warned.

00:20:29.910 --> 00:20:31.470
So it's fairly easy to use.

00:20:31.470 --> 00:20:34.490
It looks like the
previous APIs we had.

00:20:34.490 --> 00:20:35.260
Media File Access.

00:20:35.260 --> 00:20:38.700
So we introduced the document
providers a while ago,

00:20:38.700 --> 00:20:41.310
a couple releases ago, and
they're extremely useful,

00:20:41.310 --> 00:20:42.990
except when you have
large documents.

00:20:42.990 --> 00:20:44.400
If you have a
large document, you

00:20:44.400 --> 00:20:46.290
needed to download
the entire data

00:20:46.290 --> 00:20:50.670
before you could pass it to the
user of the document provider.

00:20:50.670 --> 00:20:53.220
So now you can create
seekable file descriptors.

00:20:53.220 --> 00:20:55.260
It's extremely useful
for audio, video,

00:20:55.260 --> 00:20:57.100
or any large type of content.

00:20:57.100 --> 00:20:59.430
It's also extremely easy to use.

00:20:59.430 --> 00:21:02.160
So you get to StorageManager,
you open the proxy file

00:21:02.160 --> 00:21:03.987
descriptor, you
give it a callback,

00:21:03.987 --> 00:21:05.820
and then we're going
to invoke your callback

00:21:05.820 --> 00:21:07.730
to request the size
of the documents,

00:21:07.730 --> 00:21:10.497
to request some amount of
data in the byte array,

00:21:10.497 --> 00:21:12.580
and then we're going to
tell you when to close it.

00:21:18.740 --> 00:21:20.550
Cached data.

00:21:20.550 --> 00:21:23.540
So this is new APIs
that the system gives

00:21:23.540 --> 00:21:24.950
you to be a better citizen.

00:21:24.950 --> 00:21:26.840
So each app has a
certain amount of data it

00:21:26.840 --> 00:21:30.740
can use in the cache partition.

00:21:30.740 --> 00:21:33.910
And when the system runs out
of space, out of storage space,

00:21:33.910 --> 00:21:36.360
it's going to start deleting
some of your cache data.

00:21:36.360 --> 00:21:39.170
So if you stay below the
quota that you're given,

00:21:39.170 --> 00:21:41.720
you can avoid your
data being deleted.

00:21:41.720 --> 00:21:44.270
For this, you can use
the StorageManager.

00:21:44.270 --> 00:21:46.280
You can query the
number of bytes

00:21:46.280 --> 00:21:48.664
that are allocated to your app.

00:21:48.664 --> 00:21:50.330
You should query that
from time to time,

00:21:50.330 --> 00:21:52.040
because the quota
can change depending

00:21:52.040 --> 00:21:53.960
on how much of
the quote you use,

00:21:53.960 --> 00:21:56.870
or how often the user
uses the application.

00:21:56.870 --> 00:21:58.460
Then when you want
to allocate data,

00:21:58.460 --> 00:21:59.789
you can just use allocateBytes.

00:21:59.789 --> 00:22:00.830
You could do it yourself.

00:22:00.830 --> 00:22:02.330
You could just create
a file, you could just

00:22:02.330 --> 00:22:03.345
create an output stream.

00:22:03.345 --> 00:22:04.970
But it's much better
to do it this way,

00:22:04.970 --> 00:22:07.550
because when you go through
allocateBytes, if needed,

00:22:07.550 --> 00:22:09.980
the system will delete
another app's cached data

00:22:09.980 --> 00:22:11.720
to make space for your data.

00:22:11.720 --> 00:22:13.880
So that means that
getCacheQuotaBytes

00:22:13.880 --> 00:22:16.430
might be bigger than
the free space that's

00:22:16.430 --> 00:22:18.266
left on the device.

00:22:18.266 --> 00:22:19.640
You can also use
something called

00:22:19.640 --> 00:22:22.220
setCacheBehaviorTombstone.

00:22:22.220 --> 00:22:24.680
So this is very
useful for your app

00:22:24.680 --> 00:22:27.140
to be able to tell the
difference between a file that

00:22:27.140 --> 00:22:30.950
was never cached, and a file
that was cached but deleted.

00:22:30.950 --> 00:22:33.200
So when you set that
behavior and the system

00:22:33.200 --> 00:22:35.390
deletes some of your
files in your cache,

00:22:35.390 --> 00:22:36.696
it will truncate the file.

00:22:36.696 --> 00:22:39.320
So the file will still be there,
but the size will be set to 0.

00:22:39.320 --> 00:22:43.370
That tells you that the cache
was deleted by the system.

00:22:43.370 --> 00:22:46.070
And, finally, the usable space
and the allocatable space

00:22:46.070 --> 00:22:47.231
are different.

00:22:49.579 --> 00:22:51.870
DAN SANDLER: There's a lot
going on in Android security

00:22:51.870 --> 00:22:53.110
in this release.

00:22:53.110 --> 00:22:56.130
And we only have little bit
of time to talk about it.

00:22:56.130 --> 00:22:58.540
I wanted to highlight some
of the privacy agreements

00:22:58.540 --> 00:23:00.760
that are new in Android O.

00:23:00.760 --> 00:23:02.326
If you've been using
Android ID, you

00:23:02.326 --> 00:23:03.700
need to know now
that it is going

00:23:03.700 --> 00:23:08.420
to be different for every app,
for every user on the device.

00:23:08.420 --> 00:23:11.126
So it can't be used to
track users between apps

00:23:11.126 --> 00:23:12.250
on the same device anymore.

00:23:12.250 --> 00:23:14.290
Similarly, if you've
been reflecting

00:23:14.290 --> 00:23:17.620
into system properties to get
net.hostname, it is empty now.

00:23:17.620 --> 00:23:19.570
And so if you're
saying, well, I really

00:23:19.570 --> 00:23:23.140
need advertising IDs to
be able to send users

00:23:23.140 --> 00:23:25.300
the correct contextual
advertisements, that

00:23:25.300 --> 00:23:28.570
is what the Advertising ID API
in Google Play Services is for.

00:23:28.570 --> 00:23:30.160
So go check it out
in Google Play,

00:23:30.160 --> 00:23:32.770
but you cannot use Android ID.

00:23:32.770 --> 00:23:34.540
You can't trust it
anymore in the same way

00:23:34.540 --> 00:23:36.375
you might have done.

00:23:36.375 --> 00:23:37.750
I had a slide here
about WebView,

00:23:37.750 --> 00:23:39.050
but then Romaine took it.

00:23:39.050 --> 00:23:40.508
One other thing I
wanted to mention

00:23:40.508 --> 00:23:43.210
about safe browsing in WebView
is because WebView is now

00:23:43.210 --> 00:23:45.520
pushed to the Play
Store every six months,

00:23:45.520 --> 00:23:48.460
you will be able to opt
into safe browsing features

00:23:48.460 --> 00:23:53.669
as far back as Lollipop,
which is fantastic.

00:23:53.669 --> 00:23:55.960
We also saw the unveiling
during the keynote, something

00:23:55.960 --> 00:23:58.126
we're calling Google Play
Protect, which is actually

00:23:58.126 --> 00:24:00.460
a lot of technologies that
we've had in place before,

00:24:00.460 --> 00:24:02.290
but really haven't
given the visibility

00:24:02.290 --> 00:24:03.430
that they truly deserve.

00:24:03.430 --> 00:24:05.860
Because we are watching out
for people all the time.

00:24:05.860 --> 00:24:09.580
So any device with Google
Play has Protect enabled.

00:24:09.580 --> 00:24:11.350
Every app that gets
uploaded to Play

00:24:11.350 --> 00:24:13.360
is prescreened and
continuously rescreened

00:24:13.360 --> 00:24:16.030
for each new version
that's uploaded.

00:24:16.030 --> 00:24:17.830
And every time
you install an app

00:24:17.830 --> 00:24:19.752
where you have Play
Protect set up,

00:24:19.752 --> 00:24:21.460
that app is going to
be screened as well,

00:24:21.460 --> 00:24:26.620
even if you got it from another
store or from ADB install.

00:24:26.620 --> 00:24:29.260
And we're really
excited about this.

00:24:29.260 --> 00:24:31.810
There is so much
more to talk about--

00:24:31.810 --> 00:24:34.730
so much more to talk
about in Android security.

00:24:34.730 --> 00:24:36.520
They gave me a whole
slide deck of stuff,

00:24:36.520 --> 00:24:38.260
so I said, why don't
you have your own talk?

00:24:38.260 --> 00:24:40.300
I actually didn't say that,
they had their own talk anyway.

00:24:40.300 --> 00:24:41.530
On Thursday at
2:30, you're going

00:24:41.530 --> 00:24:43.390
to go and find out what's
new in Android security

00:24:43.390 --> 00:24:44.240
from soup to nuts.

00:24:44.240 --> 00:24:46.270
Everything from Kernel
hardening all the way

00:24:46.270 --> 00:24:49.600
to more stuff about WebView.

00:24:49.600 --> 00:24:51.330
ROMAINE GUY:
Language and runtime,

00:24:51.330 --> 00:24:53.410
I think you already know
what I'm going to say.

00:24:53.410 --> 00:24:56.440
So this morning, we announced
official support for Kotlin.

00:24:56.440 --> 00:24:58.755
[APPLAUSE]

00:25:02.460 --> 00:25:05.245
You saw Steph on stage, and
I see her sitting right there

00:25:05.245 --> 00:25:05.870
in the hallway.

00:25:05.870 --> 00:25:08.390
So if you see her at
I/O, go say thanks.

00:25:08.390 --> 00:25:10.490
So Steph and the
whole team behind her

00:25:10.490 --> 00:25:13.390
did amazing work over
the past, however

00:25:13.390 --> 00:25:15.590
much time, to bring you this.

00:25:15.590 --> 00:25:16.740
So go thank her.

00:25:16.740 --> 00:25:18.750
She'll pass your thanks
along to the whole team.

00:25:18.750 --> 00:25:21.380
So it's available
today in Android 3.0.

00:25:21.380 --> 00:25:23.390
There's a lot of
documentation already online.

00:25:23.390 --> 00:25:25.440
I could spend hours
talking about Kotlin

00:25:25.440 --> 00:25:27.440
and why it's good for
you, why it's good for us.

00:25:27.440 --> 00:25:28.920
Actually, should
I hijack the talk?

00:25:28.920 --> 00:25:29.540
CHET HAASE: He could.

00:25:29.540 --> 00:25:30.750
Actually, he really good.

00:25:30.750 --> 00:25:32.575
He does, in fact.

00:25:32.575 --> 00:25:33.950
ROMAINE GUY: But
unfortunately we

00:25:33.950 --> 00:25:35.700
don't have that much
time in this session.

00:25:35.700 --> 00:25:39.560
So, instead, I invite you
to come on Friday at 10:30

00:25:39.560 --> 00:25:40.947
here on this stage.

00:25:40.947 --> 00:25:43.280
There's going to be a talk
called Introduction to Kotlin

00:25:43.280 --> 00:25:48.320
from Andrey Breslav, the lead
language designer at JetBrains;

00:25:48.320 --> 00:25:52.430
and Hadi, VP of Developer
Advocacy at JetBrains.

00:25:52.430 --> 00:25:57.830
And then in the
afternoon on stage 4,

00:25:57.830 --> 00:26:00.460
we'll have Life is Great
and Everything Will Be OK,

00:26:00.460 --> 00:26:03.170
Kotlin is Here by Christina
Lee from Pinterest

00:26:03.170 --> 00:26:05.954
and Jack Wharton from Square.

00:26:05.954 --> 00:26:07.910
[APPLAUSE]

00:26:07.910 --> 00:26:10.631
And this is important to
us, because the reason

00:26:10.631 --> 00:26:12.880
why we brought you Kotlin
is because you the community

00:26:12.880 --> 00:26:13.930
are using Kotlin.

00:26:13.930 --> 00:26:17.050
We listened, we heard you, we're
bringing you what you wanted.

00:26:17.050 --> 00:26:19.510
So we wanted to have you, the
community, onstage to talk

00:26:19.510 --> 00:26:22.180
about it better than we can.

00:26:22.180 --> 00:26:24.670
Also, if you have questions,
you can come to the developer

00:26:24.670 --> 00:26:26.650
sandbox at the Android
[INAUDIBLE] Platform

00:26:26.650 --> 00:26:31.060
booth today from 3:00 to 4:30,
on Thursday from 2:00 to 4:00,

00:26:31.060 --> 00:26:33.310
and on Friday from
noon to 2:00 p.m.

00:26:33.310 --> 00:26:36.280
Andrey, the language
designer, will be there

00:26:36.280 --> 00:26:37.520
to answer all your questions.

00:26:37.520 --> 00:26:40.000
So please come if you want to
know anything about Kotlin.

00:26:40.000 --> 00:26:42.550
Just go there and go
ask your questions.

00:26:42.550 --> 00:26:46.060
Now, like Steph mentioned, we're
also doubling down on our other

00:26:46.060 --> 00:26:48.010
languages, so the Java
programming language,

00:26:48.010 --> 00:26:50.039
and we also have C and C++.

00:26:50.039 --> 00:26:51.580
So for the Java
programming language,

00:26:51.580 --> 00:26:53.380
we're adding new
packages in Android O.

00:26:53.380 --> 00:26:56.290
We have java.time that
finally makes manipulating

00:26:56.290 --> 00:26:58.930
time and dates easy.

00:26:58.930 --> 00:27:00.190
And it makes sense.

00:27:00.190 --> 00:27:02.150
It makes a lot more
sense than the older APIs

00:27:02.150 --> 00:27:03.130
CHET HAASE: It's about time.

00:27:03.130 --> 00:27:04.588
ROMAINE GUY: Yeah,
it's about time.

00:27:04.588 --> 00:27:08.040
We're also bringing
you java.nio.file.

00:27:08.040 --> 00:27:12.120
It improves on the good
old java.io.file API.

00:27:12.120 --> 00:27:14.500
It lets you access the
attributes of the file.

00:27:14.500 --> 00:27:17.060
It lets you easily manipulate
paths and read files.

00:27:17.060 --> 00:27:18.540
We'll look at an example.

00:27:18.540 --> 00:27:21.640
And, finally,
java.lang.invoke, it's

00:27:21.640 --> 00:27:23.840
a slight variation
on reflection.

00:27:23.840 --> 00:27:26.320
This is a gross approximation,
but it's really cool

00:27:26.320 --> 00:27:31.187
because it lets you transform
and wrap method handles

00:27:31.187 --> 00:27:32.020
in your application.

00:27:32.020 --> 00:27:33.930
So here's an example
of the new files API.

00:27:33.930 --> 00:27:37.660
So you can use the path
class to get a path.

00:27:37.660 --> 00:27:39.887
And then you can just
call files.lines.

00:27:39.887 --> 00:27:41.720
It will read the entire
content of the file.

00:27:41.720 --> 00:27:43.570
You're going to get a stream.

00:27:43.570 --> 00:27:47.680
So in this example, I'm
using lambdas and stream APIs

00:27:47.680 --> 00:27:49.810
to remove all the empty
lines, all the lines that

00:27:49.810 --> 00:27:52.660
start with a pound sign, and
then I collect everything back

00:27:52.660 --> 00:27:54.520
into a single stream at the end.

00:27:54.520 --> 00:27:57.982
So it's a lot easier
than it was before.

00:27:57.982 --> 00:27:59.940
CHET HAASE: All right,
some changes in runtime.

00:27:59.940 --> 00:28:01.690
We heard about some
of these this morning,

00:28:01.690 --> 00:28:03.250
and there's more
about it this week.

00:28:03.250 --> 00:28:04.690
New concurrent-copying
collector,

00:28:04.690 --> 00:28:06.710
making everything basically
faster and better.

00:28:06.710 --> 00:28:08.530
Concurrent-copying
means no pause time,

00:28:08.530 --> 00:28:10.024
except when there is a full GC.

00:28:10.024 --> 00:28:11.440
So it can do all
the stuff that it

00:28:11.440 --> 00:28:14.832
needs to do in the background
while you're doing other stuff.

00:28:14.832 --> 00:28:17.290
In particular, one of the really
cool things that it can do

00:28:17.290 --> 00:28:20.510
is actually compact the
heap in the foreground.

00:28:20.510 --> 00:28:23.489
So previously, I believe
in the previous release,

00:28:23.489 --> 00:28:26.030
it had the ability to compact
the heap, which is really good.

00:28:26.030 --> 00:28:28.150
It can defragment it, can
make the heap smaller,

00:28:28.150 --> 00:28:30.250
it can make allocations
and collections faster,

00:28:30.250 --> 00:28:32.080
but it could only do
this when activities

00:28:32.080 --> 00:28:33.350
were in the background.

00:28:33.350 --> 00:28:35.529
So it'd go into an idle
state, and then do it

00:28:35.529 --> 00:28:36.820
when it was in that idle state.

00:28:36.820 --> 00:28:38.291
But when it was
in the foreground,

00:28:38.291 --> 00:28:40.540
there was nothing that it
could do about the expanding

00:28:40.540 --> 00:28:41.830
and fragmenting heap.

00:28:41.830 --> 00:28:43.510
Now it can collect
in the foreground,

00:28:43.510 --> 00:28:46.390
defrag in the foreground,
and everything gets faster.

00:28:46.390 --> 00:28:50.170
There's also a new faster
mechanism for allocations.

00:28:50.170 --> 00:28:52.030
So we can just do bump
pointer allocations,

00:28:52.030 --> 00:28:53.440
which is way, way faster.

00:28:53.440 --> 00:28:55.070
Collections are
faster, and all of this

00:28:55.070 --> 00:28:57.880
essentially results
in less jank for you.

00:28:57.880 --> 00:29:00.700
So faster to allocate stuff,
faster to collect stuff,

00:29:00.700 --> 00:29:03.460
means that just dealing with
garbage and memory in general

00:29:03.460 --> 00:29:06.580
is much faster using
ART in the O release.

00:29:06.580 --> 00:29:09.790
Lots of various optimizations,
loop unrolling, inlining.

00:29:09.790 --> 00:29:12.100
One of the things to
note is that Dalvik

00:29:12.100 --> 00:29:18.100
was created with memory-type
constraints, right?

00:29:18.100 --> 00:29:19.662
Everything was
about saving memory

00:29:19.662 --> 00:29:21.370
with Dalvik, which
means that it can only

00:29:21.370 --> 00:29:22.757
do so much optimization.

00:29:22.757 --> 00:29:24.340
It sort of reached
the end of its life

00:29:24.340 --> 00:29:26.470
as far as what they could
do to optimize things.

00:29:26.470 --> 00:29:29.230
When ART came online, they
basically put in a platform

00:29:29.230 --> 00:29:31.807
upon which we could build
future optimization.

00:29:31.807 --> 00:29:33.640
So we're starting to
reap those benefits now

00:29:33.640 --> 00:29:35.650
where with every
release, including

00:29:35.650 --> 00:29:37.510
O and future
releases, we're going

00:29:37.510 --> 00:29:38.830
to be able to do more and more.

00:29:38.830 --> 00:29:40.670
And there's a bunch of
them in this release.

00:29:40.670 --> 00:29:43.562
And you should check out a
session later in the week

00:29:43.562 --> 00:29:44.770
for more information on that.

00:29:44.770 --> 00:29:46.470
Also there is DEX locality.

00:29:46.470 --> 00:29:49.810
This in particular improves
launch time for activities,

00:29:49.810 --> 00:29:53.330
because we can collect all
the memory in the same space.

00:29:53.330 --> 00:29:55.030
So it's easier and
faster to access

00:29:55.030 --> 00:29:56.900
as your application
is starting up.

00:29:56.900 --> 00:30:00.490
So there's a session on Friday
morning, Performance and Memory

00:30:00.490 --> 00:30:01.080
Improvements.

00:30:01.080 --> 00:30:03.970
So check that out for
more particulars there.

00:30:03.970 --> 00:30:06.070
So beyond the platform,
we have Support Library.

00:30:06.070 --> 00:30:09.100
We have other mechanisms for
delivering things that aren't

00:30:09.100 --> 00:30:10.331
just about the O release.

00:30:10.331 --> 00:30:11.830
We wanted to call
out some of those.

00:30:11.830 --> 00:30:14.470
There's the v26 beta
release that comes out

00:30:14.470 --> 00:30:16.390
with developer preview 2.

00:30:16.390 --> 00:30:19.270
The stuff that we already talked
about in text, fonts and XML,

00:30:19.270 --> 00:30:22.002
downloadable fonts, as well
as Auto-Sizing TextView.

00:30:22.002 --> 00:30:22.960
Those are all in there.

00:30:22.960 --> 00:30:24.160
You can check those out.

00:30:24.160 --> 00:30:26.890
In addition, there's something
that we call EmojiCompat.

00:30:26.890 --> 00:30:29.620
So one of the big issues
that we have with emojis

00:30:29.620 --> 00:30:31.810
is that if your
friends are sending you

00:30:31.810 --> 00:30:35.204
emojis that are from some
future standard than whatever

00:30:35.204 --> 00:30:37.120
we shipped on the release
that you're running,

00:30:37.120 --> 00:30:39.400
it's not possible for
you to see those emojis.

00:30:39.400 --> 00:30:41.440
And you're going to
see tofus instead,

00:30:41.440 --> 00:30:43.210
which given some
of the emojis I've

00:30:43.210 --> 00:30:48.130
seen may be more attractive,
but not very meaningful.

00:30:48.130 --> 00:30:50.620
So wouldn't it be nice
if you could actually get

00:30:50.620 --> 00:30:52.310
updated emojis on your device?

00:30:52.310 --> 00:30:54.160
So now we have two
mechanisms that apps

00:30:54.160 --> 00:30:56.110
can use to get updated emojis.

00:30:56.110 --> 00:30:59.470
One is that apps can actually
bundle with updated emojis.

00:30:59.470 --> 00:31:01.990
So they can update the
apps to the Play Store

00:31:01.990 --> 00:31:04.120
and then to their
users so that the users

00:31:04.120 --> 00:31:07.600
get more timely updates
of these emojis.

00:31:07.600 --> 00:31:10.780
The other, and probably
better long term solution,

00:31:10.780 --> 00:31:12.970
is to actually use
a service that we

00:31:12.970 --> 00:31:14.770
can provide for
downloadable fonts

00:31:14.770 --> 00:31:17.680
that we talked about earlier,
where they can automatically

00:31:17.680 --> 00:31:21.040
get updated fonts through
downloadable fonts, right?

00:31:21.040 --> 00:31:23.710
So the app can build
in the capability

00:31:23.710 --> 00:31:27.430
to use the downloadable
fonts capability to have

00:31:27.430 --> 00:31:31.510
updated emojis as we provide
them into the service.

00:31:31.510 --> 00:31:34.270
So, again, go to the What's
New in Support Library talk

00:31:34.270 --> 00:31:36.850
tomorrow morning to learn
more about all of those.

00:31:36.850 --> 00:31:39.820
We also had more stuff
going on an animation

00:31:39.820 --> 00:31:41.530
besides the small
stuff in AnimatorSet

00:31:41.530 --> 00:31:42.850
I talked about earlier.

00:31:42.850 --> 00:31:46.520
We have the ability to now have
physics-based animation stuff.

00:31:46.520 --> 00:31:49.030
So if we want to see
that in animation form,

00:31:49.030 --> 00:31:51.280
the ability to have
essentially animations

00:31:51.280 --> 00:31:52.540
driven through velocity.

00:31:52.540 --> 00:31:53.920
All of the animation
capabilities

00:31:53.920 --> 00:31:55.570
that we have in the
platform to date

00:31:55.570 --> 00:31:57.850
have been driven around
the idea of a duration.

00:31:57.850 --> 00:32:00.640
You tell it how long
you want it to run for.

00:32:00.640 --> 00:32:02.140
But many animations,
you really want

00:32:02.140 --> 00:32:03.370
to drive it by the velocity.

00:32:03.370 --> 00:32:05.140
In particular,
animations that are

00:32:05.140 --> 00:32:07.000
driven by user interactions.

00:32:07.000 --> 00:32:09.310
You're dragging something on
the screen and you let go,

00:32:09.310 --> 00:32:12.100
wouldn't it be nice if it
took off from your finger

00:32:12.100 --> 00:32:14.200
at the same velocity
that you were dragging

00:32:14.200 --> 00:32:16.060
it went when you let go?

00:32:16.060 --> 00:32:18.700
So flings, scrolls,
all that stuff,

00:32:18.700 --> 00:32:22.780
it really requires a velocity
based animation system instead.

00:32:22.780 --> 00:32:24.340
You can do that
with the animators,

00:32:24.340 --> 00:32:25.690
but it's really tedious.

00:32:25.690 --> 00:32:26.830
It requires math.

00:32:26.830 --> 00:32:28.030
Math is hard.

00:32:28.030 --> 00:32:30.700
And so we've baked
in that capability

00:32:30.700 --> 00:32:33.400
to this new Physics
Animation System that

00:32:33.400 --> 00:32:35.410
is more natural, more
interactive, and more

00:32:35.410 --> 00:32:37.150
interruptable
Because it was really

00:32:37.150 --> 00:32:41.250
intended to work with that
user interactivity model.

00:32:41.250 --> 00:32:42.520
Here's a small demo of this.

00:32:42.520 --> 00:32:44.950
So as we're dragging
the top thing around,

00:32:44.950 --> 00:32:47.650
the other two circles
are essentially

00:32:47.650 --> 00:32:50.920
hinged to the top one through
springs that you defined.

00:32:50.920 --> 00:32:52.660
And so they follow it in space.

00:32:52.660 --> 00:32:54.550
They're not lockstep
following it,

00:32:54.550 --> 00:32:57.160
but they're basically on
springs that are attached.

00:32:57.160 --> 00:33:00.010
And they immediately benefit
from that interactivity

00:33:00.010 --> 00:33:02.560
and that physics-based
notion of these springs.

00:33:02.560 --> 00:33:06.190
So there's a talk on this
on Friday afternoon, all

00:33:06.190 --> 00:33:08.024
about the new physics-based
animation stuff.

00:33:08.024 --> 00:33:10.356
Please come to that if you
want to know more about that.

00:33:10.356 --> 00:33:11.540
Architecture components.

00:33:11.540 --> 00:33:13.390
This was mentioned
in the keynotes.

00:33:13.390 --> 00:33:16.510
We thought that maybe
sometimes Android development

00:33:16.510 --> 00:33:19.090
is a little bit harder
than it needs to be.

00:33:19.090 --> 00:33:21.745
So we took a step back
and said, OK, what

00:33:21.745 --> 00:33:23.620
are some of the major
problems that we should

00:33:23.620 --> 00:33:25.750
take another run at
to try to simplify

00:33:25.750 --> 00:33:27.160
this for app developers?

00:33:27.160 --> 00:33:29.440
And a couple of those
that we've taken specific

00:33:29.440 --> 00:33:32.260
runs at right now
or around lifecycle.

00:33:32.260 --> 00:33:34.540
It is apparently kind of
hard to deal with the fact

00:33:34.540 --> 00:33:36.490
that your activities
can die at any time

00:33:36.490 --> 00:33:38.950
when you rotate the screen
or it goes in the background

00:33:38.950 --> 00:33:39.700
or whatever.

00:33:39.700 --> 00:33:42.160
And finding out exactly
what state you're in

00:33:42.160 --> 00:33:43.150
can be a bit tedious.

00:33:43.150 --> 00:33:45.280
It is an ongoing issue
that all app developers

00:33:45.280 --> 00:33:46.370
need to deal with.

00:33:46.370 --> 00:33:48.010
So we've taken another
approach to that

00:33:48.010 --> 00:33:49.630
to make that much easier.

00:33:49.630 --> 00:33:51.374
And in addition to
that, we've also

00:33:51.374 --> 00:33:52.540
taken a look at persistence.

00:33:52.540 --> 00:33:56.140
So you can issue raw SQL
now, and that's about all

00:33:56.140 --> 00:33:57.710
you got on the system.

00:33:57.710 --> 00:34:00.730
So we have a new way of doing
that builds on that capability

00:34:00.730 --> 00:34:02.709
and makes it easier
and more powerful.

00:34:02.709 --> 00:34:04.750
We're going to talk about
all of those this week.

00:34:04.750 --> 00:34:06.874
We're going to have an
introduction to architecture

00:34:06.874 --> 00:34:10.310
components, I would encourage
you to go to, this afternoon.

00:34:10.310 --> 00:34:12.370
That's actually immediately
after this session.

00:34:12.370 --> 00:34:14.409
And then tomorrow
morning, we're going

00:34:14.409 --> 00:34:16.480
to have one on the
lifecycle problem

00:34:16.480 --> 00:34:17.719
and how we've solved that.

00:34:17.719 --> 00:34:20.221
And we're also going to have
one on persistence and offline.

00:34:20.221 --> 00:34:22.179
And all of these are bits
that you can actually

00:34:22.179 --> 00:34:25.439
try out in an earlier
release form already.

00:34:25.439 --> 00:34:26.230
So check those out.

00:34:26.230 --> 00:34:28.564
Hopefully it will make your
developer lives easier.

00:34:28.564 --> 00:34:30.480
There are some behavior
changes, some of which

00:34:30.480 --> 00:34:32.570
you're going to care
about more than others.

00:34:32.570 --> 00:34:34.510
There have been some
changes to the behavior

00:34:34.510 --> 00:34:37.510
of background applications,
in particular, location.

00:34:37.510 --> 00:34:40.239
If you are running as a
background application,

00:34:40.239 --> 00:34:43.900
you're only going to get course
grained location information.

00:34:43.900 --> 00:34:47.170
All of these things are being
done not to make it harder,

00:34:47.170 --> 00:34:49.120
but to make the
devices better, right?

00:34:49.120 --> 00:34:52.330
If all applications have all
capabilities at all times,

00:34:52.330 --> 00:34:55.252
and they can do whatever they
need to or want to at any time,

00:34:55.252 --> 00:34:57.460
then essentially you're
going to run the battery down

00:34:57.460 --> 00:35:00.010
because everybody's doing
too much work all the time.

00:35:00.010 --> 00:35:02.740
So we're trying to be judicious
about which applications

00:35:02.740 --> 00:35:05.290
actually need the
services at which times

00:35:05.290 --> 00:35:07.540
so that we can make the
experience for the user much

00:35:07.540 --> 00:35:08.230
better.

00:35:08.230 --> 00:35:10.700
The experience for your
users much better as well.

00:35:10.700 --> 00:35:13.410
So one of those is in location,
course grained information

00:35:13.410 --> 00:35:14.660
when you're in the background.

00:35:14.660 --> 00:35:16.030
Another one is wake locks.

00:35:16.030 --> 00:35:18.520
We noticed that it was
common for an application

00:35:18.520 --> 00:35:21.151
to go into a background state
and then into a cache state,

00:35:21.151 --> 00:35:22.900
and it would have a
wake lock at the time.

00:35:22.900 --> 00:35:24.790
And it would just
keep that wake lock,

00:35:24.790 --> 00:35:26.600
and it would hold it
for a very long time.

00:35:26.600 --> 00:35:28.300
And that really runs
the battery down.

00:35:28.300 --> 00:35:31.060
So now, sometime after
you go into a cache state,

00:35:31.060 --> 00:35:33.270
the wake lock is
automatically released

00:35:33.270 --> 00:35:34.960
so that it doesn't
put the device

00:35:34.960 --> 00:35:38.330
into that unseemly state.

00:35:38.330 --> 00:35:41.237
And also there are
limits to execution

00:35:41.237 --> 00:35:42.820
when you're running
in the background.

00:35:42.820 --> 00:35:45.010
There have also been
changes to alert windows.

00:35:45.010 --> 00:35:46.510
In particular,
there's this new type

00:35:46.510 --> 00:35:49.090
of window called Type
Application Overlay.

00:35:49.090 --> 00:35:52.720
If you are targeting the O SDK,
then this is the window type

00:35:52.720 --> 00:35:55.720
that you must use if you
want to have an alert window

00:35:55.720 --> 00:35:56.680
capability.

00:35:56.680 --> 00:35:59.252
If you're on earlier releases,
obviously that didn't exist.

00:35:59.252 --> 00:36:00.460
You're not going to use this.

00:36:00.460 --> 00:36:02.980
Just know that whatever
window type you are using

00:36:02.980 --> 00:36:05.590
is going to be layered under
one of these type application

00:36:05.590 --> 00:36:09.430
overlay windows, because we
have a more clearly defined

00:36:09.430 --> 00:36:12.190
layering policy now with that.

00:36:12.190 --> 00:36:14.710
There is more information
about this afternoon

00:36:14.710 --> 00:36:17.881
at 5 o'clock, Background
Check and Other Insights.

00:36:17.881 --> 00:36:19.630
So please come to that
if you want to know

00:36:19.630 --> 00:36:21.680
all the details about that.

00:36:21.680 --> 00:36:24.264
And then, finally, we promised
to get back to this, didn't we?

00:36:24.264 --> 00:36:25.096
DAN SANDLER: We did.

00:36:25.096 --> 00:36:26.440
This is one more thing, right?

00:36:26.440 --> 00:36:27.356
CHET HAASE: All right.

00:36:27.356 --> 00:36:30.340
So we were going to talk
about this, and I think--

00:36:30.340 --> 00:36:32.980
I mean, we have to have
a drumroll, don't we?

00:36:32.980 --> 00:36:34.780
How about like a thigh roll?

00:36:34.780 --> 00:36:36.384
Can we have a thigh roll?

00:36:36.384 --> 00:36:37.180
[APPLAUSE]

00:36:37.180 --> 00:36:37.480
CHET HAASE: All right.

00:36:37.480 --> 00:36:38.800
DAN SANDLER: That sounds nice.

00:36:38.800 --> 00:36:41.680
CHET HAASE: Unfortunately, I'm
looking at the timer on stage,

00:36:41.680 --> 00:36:43.420
and I'm going to say
that O stands for--

00:36:45.455 --> 00:36:46.080
AUDIENCE: Awww.

00:36:46.080 --> 00:36:46.996
CHET HAASE: -- oh, no.

00:36:46.996 --> 00:36:47.980
We're out of time.

00:36:47.980 --> 00:36:49.320
Thank you.

00:36:49.320 --> 00:36:53.280
[APPLAUSE]

00:36:53.280 --> 00:36:57.810
[MUSIC PLAYING]

