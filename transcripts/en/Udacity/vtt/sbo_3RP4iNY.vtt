WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Hello, I am Peter Chapman, your assistant instructor for

00:00:04.000 --> 00:00:08.000
this course on programming languages, "Building a Web Browser."

00:00:08.000 --> 00:00:11.000
You may have seen me on the forums and kind of managing

00:00:11.000 --> 00:00:14.000
the course in general, but one of the major things I do,

00:00:14.000 --> 00:00:18.000
helping you learn this material, is going over the homework answers.

00:00:18.000 --> 00:00:22.000
With that said, let's get started with the first problem on the first homework assignment,

00:00:22.000 --> 00:00:28.000
and that is a multiple choice question on general concepts covered in the first lecture.

00:00:28.000 --> 00:00:33.000
Statement 1 says, "Web pages can control their behavior and appearance

00:00:33.000 --> 00:00:35.000
through embedded JavaScript."

00:00:35.000 --> 00:00:38.000
This is definitely true.

00:00:38.000 --> 00:00:42.000
Almost any web page that you use on a daily basis

00:00:42.000 --> 00:00:46.000
has tons of JavaScript that make things nice and interactive and speedy.

00:00:46.000 --> 00:00:49.000
If you were to visit, say, our web site without JavaScript enabled,

00:00:49.000 --> 00:00:51.000
there would be almost nothing you can do.

00:00:51.000 --> 00:00:54.000
Nothing would load. Nothing would be interactive.

00:00:54.000 --> 00:00:58.000
And it's really not an overstatement that JavaScript is the basis

00:00:58.000 --> 00:01:00.000
for modern web applications.

00:01:00.000 --> 00:01:04.000
Statement 2, "While English sentences can be broken up into words,

00:01:04.000 --> 00:01:06.000
HTML and JavaScript cannot."

00:01:06.000 --> 00:01:08.000
This statement is false.

00:01:08.000 --> 00:01:12.000
Let's look at a piece of HTML to show you why.

00:01:12.000 --> 00:01:17.000
Here we can break up this sample bit of HTML into smaller pieces,

00:01:17.000 --> 00:01:20.000
namely the beginning of the bold tag,

00:01:20.000 --> 00:01:24.000
the actual text that says "Irvin," and the ending of the bold tag.

00:01:24.000 --> 00:01:27.000
Individually, each of these things has meaning

00:01:27.000 --> 00:01:34.000
in the same way that the sentence above, the word and,

00:01:34.000 --> 00:01:40.000
allows HTML and JavaScript to together be applied to the cannot.

00:01:40.000 --> 00:01:42.000
Some of these words have semantic meaning.

00:01:42.000 --> 00:01:44.000
Others are more syntactic structure.

00:01:44.000 --> 00:01:50.000
But nonetheless, they're words, just in a different language.

00:01:50.000 --> 00:01:54.000
Statement 3, "For every Python program that calls re.findall(), there is another

00:01:54.000 --> 00:01:59.000
Python program that does not call re.findall() but still obtains the same results."

00:01:59.000 --> 00:02:01.000
As it turns out, this statement is true.

00:02:01.000 --> 00:02:06.000
Before I deal with re.findall(), let's think of an alternative example and build up to that.

00:02:06.000 --> 00:02:10.000
Let's say instead of wanting to do find all, we just want to find one.

00:02:10.000 --> 00:02:14.000
That is, given a regular expression and an input text,

00:02:14.000 --> 00:02:17.000
we want to determine whether or not the text matches

00:02:17.000 --> 00:02:20.000
exactly the regular expression, and we can do this

00:02:20.000 --> 00:02:23.000
using the tools that we developed in lecture, particularly

00:02:23.000 --> 00:02:25.000
the procedure fsmsim.

00:02:25.000 --> 00:02:29.000
What we have to do is create a finite state machine representation

00:02:29.000 --> 00:02:33.000
for this regular expression, and that's pretty straightforward.

00:02:33.000 --> 00:02:37.000
We process the input text on this state machine using fsmsim,

00:02:37.000 --> 00:02:40.000
so you'd have to represent the state machine using the map

00:02:40.000 --> 00:02:44.000
that we described in lecture, and if the input text ends on an accepting state,

00:02:44.000 --> 00:02:48.000
then we can say we've found one match,

00:02:48.000 --> 00:02:53.000
so that's how we use fsmsim to find matches for the regular expression.

00:02:53.000 --> 00:02:55.000
But find all does something a little different.

00:02:55.000 --> 00:02:57.000
Let's say you had this code.

00:02:57.000 --> 00:03:00.000
This statement takes in a regular expression, the map numbers,

00:03:00.000 --> 00:03:04.000
and an input string that contains 2 numbers, 12 and 34.

00:03:04.000 --> 00:03:07.000
What find all is going to return looks like this.

00:03:07.000 --> 00:03:10.000
It's going to return 2 strings, 12 and 34,

00:03:10.000 --> 00:03:13.000
so we can use fsmsim to do kind of one matching.

00:03:13.000 --> 00:03:16.000
If we were just given the string 12, then we could do that,

00:03:16.000 --> 00:03:20.000
but we want to do a little different style of interpretation with find all,

00:03:20.000 --> 00:03:23.000
and we can still use fsmsim just with a little more effort.

00:03:23.000 --> 00:03:27.000
So let's say we have our black box fsmsim.

00:03:27.000 --> 00:03:31.000
And it has a representation for that regular expression.

00:03:31.000 --> 00:03:34.000
We also have our string that consists of 5 characters.

00:03:34.000 --> 00:03:38.000
What we're going to do is we're going to feed in the first character

00:03:38.000 --> 00:03:41.000
into our regular expression simulator.

00:03:41.000 --> 00:03:44.000
One matches the regular expression,

00:03:44.000 --> 00:03:48.000
so so far we have a match for 1.

00:03:48.000 --> 00:03:52.000
In order to match larger strings, we're going to try adding one more character,

00:03:52.000 --> 00:03:55.000
and we're going to feed in 12 to our regular expression simulator.

00:03:55.000 --> 00:03:58.000
12 matches, so far, so good.

00:03:58.000 --> 00:04:00.000
Now we're going to try 12+.

00:04:00.000 --> 00:04:06.000
12+ doesn't match, so we've realized that 12 is the largest possible

00:04:06.000 --> 00:04:10.000
prefix that will match this regular expression, and it's going to be one of the results.

00:04:10.000 --> 00:04:14.000
We're going to go back, and we're just going to try +.

00:04:14.000 --> 00:04:16.000
+ doesn't work.

00:04:16.000 --> 00:04:18.000
We're going to try +3. That doesn't work either.

00:04:18.000 --> 00:04:22.000
That's not a number, and +34, which also doesn't work.

00:04:22.000 --> 00:04:25.000
We're going to give up on the +, and we're going to do the 3.

00:04:25.000 --> 00:04:28.000
3 matches. Now we can try the 4.

00:04:28.000 --> 00:04:32.000
34 matches, and since that's all the characters left in this string, we're done.

00:04:32.000 --> 00:04:36.000
And that's kind of how we can use fsmsim to simulate

00:04:36.000 --> 00:04:38.000
the same exact functionality of find all.

00:04:38.000 --> 00:04:42.000
Statement 4, "Every regular expression that involves neither

00:04:42.000 --> 00:04:47.000
+ nor * matches a finite set of strings."

00:04:47.000 --> 00:04:49.000
This is true.

00:04:49.000 --> 00:04:51.000
In the regular expressions that we define in class,

00:04:51.000 --> 00:04:56.000
the only repetition is through + and *.

00:04:56.000 --> 00:04:59.000
We can do some fancy things still such as or

00:04:59.000 --> 00:05:03.000
or optional characters, but that doesn't even get us near

00:05:03.000 --> 00:05:08.000
the possibilities that these repeating operators can give us.

00:05:08.000 --> 00:05:10.000
I can enumerate a lot of different types in my regular expression,

00:05:10.000 --> 00:05:14.000
a lot of different strings, but it's never going to be infinite.

00:05:14.000 --> 00:05:17.000
And so if you don't have the + or the *,

00:05:17.000 --> 00:05:19.000
you're stuck with a finite set of strings.

00:05:19.000 --> 00:05:23.000
It may be a very large finite set, but it's still finite.

