WEBVTT
Kind: captions
Language: en

00:00:01.688 --> 00:00:03.800
MALE SPEAKER: Shanghai
GDG is a very

00:00:03.800 --> 00:00:05.870
interesting development community.

00:00:05.870 --> 00:00:07.250
FEMALE SPEAKER: I'm glad
somebody has asked this

00:00:07.250 --> 00:00:07.585
question

00:00:07.585 --> 00:00:09.223
MALE SPEAKER: This is where
the magic happens.

00:00:09.223 --> 00:00:10.755
FEMALE SPEAKER: This is
primarily a question and

00:00:10.755 --> 00:00:12.270
answer show, so if any
of you out there

00:00:12.270 --> 00:00:13.520
would like to ask questions?

00:00:24.244 --> 00:00:25.250
DAN HOLEVOET: All right.

00:00:25.250 --> 00:00:25.870
Hi, everybody.

00:00:25.870 --> 00:00:28.490
Welcome to another session
of Google App

00:00:28.490 --> 00:00:29.860
Engine Office Hours.

00:00:29.860 --> 00:00:33.740
Today I'm going to be walking
you through some of the

00:00:33.740 --> 00:00:36.980
advancements in Google Cloud
Endpoints, which many of you

00:00:36.980 --> 00:00:40.540
may know we announced at
Google I/O in June.

00:00:40.540 --> 00:00:43.640
So for any of you that aren't
familiar with endpoints, we'll

00:00:43.640 --> 00:00:46.750
be giving you a little bit of
a summary and a refresher on

00:00:46.750 --> 00:00:48.590
what that new technology is.

00:00:48.590 --> 00:00:51.830
And then we're also going to
go and show you some of the

00:00:51.830 --> 00:00:54.820
things that we didn't actually
talk about at I/O as well.

00:00:54.820 --> 00:00:58.970
So I prepared some slides
for you, so we'll

00:00:58.970 --> 00:00:59.990
switch over to those.

00:00:59.990 --> 00:01:03.150
And we'll get started.

00:01:03.150 --> 00:01:06.840
So the topic today is a Google
Cloud Endpoints points using

00:01:06.840 --> 00:01:10.180
Java as the back end
implementation, JavaScript for

00:01:10.180 --> 00:01:12.700
actually consuming the
endpoints, and some

00:01:12.700 --> 00:01:15.850
information on how to use both
of those and OAuth 2 as well.

00:01:18.420 --> 00:01:20.640
So if you're not familiar with
Google Cloud Endpoints , as I

00:01:20.640 --> 00:01:23.980
said, this is a technology we
announced at Google I/O. It's

00:01:23.980 --> 00:01:26.610
a feature of App Engine that
allows you to create a

00:01:26.610 --> 00:01:31.060
scalable API, hosted on App
Engine, that also uses many of

00:01:31.060 --> 00:01:33.440
the pieces of Google's
API infrastructure.

00:01:33.440 --> 00:01:36.600
So when you're building APIs
on Google Cloud Endpoints,

00:01:36.600 --> 00:01:39.040
you're building them on the same
technologies that we use

00:01:39.040 --> 00:01:40.970
to build Google APIs.

00:01:40.970 --> 00:01:43.420
So things like the Google
Calendar API, Google Plus

00:01:43.420 --> 00:01:46.440
APIs, many of the APIs that
you're probably already

00:01:46.440 --> 00:01:49.070
familiar with and
already using.

00:01:49.070 --> 00:01:50.558
And what's great about--

00:01:50.558 --> 00:02:24.150
[NO AUDIO]

00:02:24.150 --> 00:02:27.860
DAN HOLEVOET: --like, well, if
I get 10 requested a second,

00:02:27.860 --> 00:02:29.440
can I make that 100
very easily?

00:02:29.440 --> 00:02:32.310
Yes, you can.

00:02:32.310 --> 00:02:35.180
So if you saw any of the content
that we shared at I/O,

00:02:35.180 --> 00:02:37.720
whether it was the session that
I was participating in or

00:02:37.720 --> 00:02:40.960
the codelabs or some of the
other sessions, one of the

00:02:40.960 --> 00:02:43.050
things that we showed off
was a simple tic-tac-toe

00:02:43.050 --> 00:02:48.050
application that would allow you
to power a simple Web game

00:02:48.050 --> 00:02:50.750
or an Android game or an i/OS
game that let you play

00:02:50.750 --> 00:02:52.200
tic-tac-toe.

00:02:52.200 --> 00:02:56.310
And so this is a very simple
diagram showing you what the

00:02:56.310 --> 00:02:58.090
very basic architecture
is for that game.

00:02:58.090 --> 00:03:01.760
So we have a datastore which
is keeping track of the

00:03:01.760 --> 00:03:04.050
previous games that
you've played.

00:03:04.050 --> 00:03:08.810
We have that datastore being
modified by Google App Engine.

00:03:08.810 --> 00:03:12.850
We have Google Cloud Endpoints
as a layer exposing two simple

00:03:12.850 --> 00:03:16.630
API is from Google App Engine to
a Web interface, an Android

00:03:16.630 --> 00:03:19.980
interface, and an
iOS interface.

00:03:19.980 --> 00:03:21.590
And so you can see here,
this is what the

00:03:21.590 --> 00:03:24.130
game might look like.

00:03:24.130 --> 00:03:28.210
If I click on one of these
squares-- whoops.

00:03:28.210 --> 00:03:30.100
I accidentally advanced
my slides here.

00:03:30.100 --> 00:03:31.700
Let me see if I can go back.

00:03:31.700 --> 00:03:33.240
Well, you can still see it.

00:03:33.240 --> 00:03:35.430
So I click on one of
the squares, the

00:03:35.430 --> 00:03:37.380
computer fills in a move.

00:03:37.380 --> 00:03:40.620
It's not terribly bright, so it
let me win there, but you

00:03:40.620 --> 00:03:43.310
can see that this has
demonstrated that

00:03:43.310 --> 00:03:43.900
I won at the bottom.

00:03:43.900 --> 00:03:47.020
And if we scroll down, we can
also see-- let's see if I can

00:03:47.020 --> 00:03:48.270
get this back.

00:03:51.360 --> 00:03:54.080
Let's refresh.

00:03:54.080 --> 00:03:54.580
No.

00:03:54.580 --> 00:03:56.990
Not working.

00:03:56.990 --> 00:03:59.326
Well, you can still see--

00:03:59.326 --> 00:04:01.540
if I can manage to get
this to scroll over.

00:04:04.280 --> 00:04:05.390
There we go.

00:04:05.390 --> 00:04:09.510
You can see that I've won this
particular game and then also

00:04:09.510 --> 00:04:11.440
tied in a previous
game as well.

00:04:11.440 --> 00:04:13.430
So we'll talk a little bit about
some of the details on

00:04:13.430 --> 00:04:16.600
how this type of system
was implemented.

00:04:16.600 --> 00:04:20.180
So as I mentioned, this is one
of the examples that we used

00:04:20.180 --> 00:04:24.520
at I/O. And this is basically
the model that we're storing

00:04:24.520 --> 00:04:26.700
in the datastore that represents
the previously

00:04:26.700 --> 00:04:27.700
played games.

00:04:27.700 --> 00:04:30.240
So whenever we finished a game
of tic-tac-toe, we're going to

00:04:30.240 --> 00:04:34.770
save an instance of the score
class inside of our datastore.

00:04:34.770 --> 00:04:37.780
And so if you're familiar with
Java development on App

00:04:37.780 --> 00:04:41.080
Engine, one of the
implementations that we

00:04:41.080 --> 00:04:43.750
support for interacting with
a datastore is called JDO.

00:04:43.750 --> 00:04:46.450
And this is a really simple
JDO class that

00:04:46.450 --> 00:04:47.370
represents a score.

00:04:47.370 --> 00:04:51.510
So there's actually nothing
custom in this class that's

00:04:51.510 --> 00:04:52.870
unique to using Google
Cloud Endpoints.

00:04:52.870 --> 00:04:56.070
This is the same type of code
that you would write yourself

00:04:56.070 --> 00:04:59.560
if you were implementing any
other type of application in

00:04:59.560 --> 00:05:00.960
Java on App Engine.

00:05:00.960 --> 00:05:03.230
So we have a couple
properties here.

00:05:03.230 --> 00:05:06.970
We have a unique identifier
that represents the score.

00:05:06.970 --> 00:05:08.680
We have the player who
played the game.

00:05:08.680 --> 00:05:09.960
We have the outcome of
the game, and we

00:05:09.960 --> 00:05:12.790
have when it was played.

00:05:12.790 --> 00:05:14.960
This is also some of the code
that we showed you at I/O.

00:05:14.960 --> 00:05:18.970
This is a really simple endpoint
class that implements

00:05:18.970 --> 00:05:20.330
a tic-tac-toe API.

00:05:20.330 --> 00:05:22.660
We've cut out some of the
methods that do things like

00:05:22.660 --> 00:05:25.380
get previous scores and list all
the scores to just focus

00:05:25.380 --> 00:05:27.180
on one of the examples.

00:05:27.180 --> 00:05:30.240
So in this particular case,
we're inserting a new score

00:05:30.240 --> 00:05:31.400
from a game that we
just finished

00:05:31.400 --> 00:05:33.780
playing into the datastore.

00:05:33.780 --> 00:05:36.300
And so you can see here we have
some properties, like the

00:05:36.300 --> 00:05:39.410
name of the API, what version
the API is, tic-tac-toe and

00:05:39.410 --> 00:05:41.370
Version 1.0, respectively.

00:05:41.370 --> 00:05:43.190
We're giving the API
method a name.

00:05:43.190 --> 00:05:46.490
So this is inserting one of the
scores into the datastore.

00:05:46.490 --> 00:05:49.190
And then we have some really
simple code to take the score

00:05:49.190 --> 00:05:52.240
that we sent to the App
Engine back end and

00:05:52.240 --> 00:05:54.470
persist it for us.

00:05:54.470 --> 00:05:56.630
So now we're going to talk about
some of the new things

00:05:56.630 --> 00:05:58.980
that we're going to see today
and how we can combine this

00:05:58.980 --> 00:06:01.860
with OAuth 2 in JavaScript to
actually implement the front

00:06:01.860 --> 00:06:04.600
end for this application.

00:06:04.600 --> 00:06:06.610
So the first thing that we're
going to do is we're going to

00:06:06.610 --> 00:06:11.200
add another property to the API
annotation, and that's for

00:06:11.200 --> 00:06:12.180
the client ID.

00:06:12.180 --> 00:06:16.180
So what this is basically doing
is it's saying for any

00:06:16.180 --> 00:06:19.680
request that's made to this API,
I would like to make sure

00:06:19.680 --> 00:06:22.520
that it is coming from an
application represented by

00:06:22.520 --> 00:06:25.010
whatever client ID
I've specified.

00:06:25.010 --> 00:06:27.820
So if you're not familiar with
OAuth 2, a client ID is

00:06:27.820 --> 00:06:30.230
basically a way of identifying
an application.

00:06:30.230 --> 00:06:33.600
And if you've used any of
Google's other APIs, you may

00:06:33.600 --> 00:06:36.060
have used the API's console,
which is where you would get a

00:06:36.060 --> 00:06:37.530
client ID for your
own application.

00:06:37.530 --> 00:06:40.640
So in the same way that you
represent your application to

00:06:40.640 --> 00:06:44.240
Google, you are representing
your application when you call

00:06:44.240 --> 00:06:46.620
Google Cloud Endpoints.

00:06:46.620 --> 00:06:49.285
So here you can see an example
of client ID ABC123.apps.goog

00:06:49.285 --> 00:06:50.535
leusercontent.com.

00:06:53.060 --> 00:06:55.970
You can put multiple values in
there if you'd like, multiple

00:06:55.970 --> 00:06:59.020
client IDs or applications to
be accessing your APIs.

00:06:59.020 --> 00:07:02.140
But if it doesn't show up in
that list, the request will

00:07:02.140 --> 00:07:05.050
obviously not succeed.

00:07:05.050 --> 00:07:06.670
So the next thing that we're
going to do is we're going to

00:07:06.670 --> 00:07:09.710
say, OK, well, we've said what
applications we want these

00:07:09.710 --> 00:07:12.180
requests to come from, but once
we've done that how do we

00:07:12.180 --> 00:07:13.590
figure out what user
it is that's

00:07:13.590 --> 00:07:15.080
actually making a request?

00:07:15.080 --> 00:07:17.660
And doing this inside of an
endpoint class is actually

00:07:17.660 --> 00:07:19.380
really simple.

00:07:19.380 --> 00:07:23.560
The only thing that we have to
really do is add this code

00:07:23.560 --> 00:07:25.040
here that I'm highlighting.

00:07:25.040 --> 00:07:29.500
We're adding the user object
as a parameter in our

00:07:29.500 --> 00:07:33.080
invocation to the
insert method.

00:07:33.080 --> 00:07:37.160
So this is the exact same user
service that you might have

00:07:37.160 --> 00:07:40.770
used inside of other App
Engine applications.

00:07:40.770 --> 00:07:43.346
So if you're using a user object
somewhere else inside

00:07:43.346 --> 00:07:45.840
of your code, and you use it
inside of Google Cloud

00:07:45.840 --> 00:07:48.750
Endpoints, this is actually
exactly the same.

00:07:48.750 --> 00:07:51.730
So you can see here we're then
setting the score, the player

00:07:51.730 --> 00:07:54.660
of this particular game, to the
user that is sending this

00:07:54.660 --> 00:07:58.070
request So that we can persist
it inside of the datastore.

00:07:58.070 --> 00:08:01.250
And then if you were to use that
user object later, if you

00:08:01.250 --> 00:08:04.950
want to query all of the scores
from a particular user,

00:08:04.950 --> 00:08:07.050
it's exactly the same
type of object.

00:08:07.050 --> 00:08:08.920
If you're doing other types
of interactions with the

00:08:08.920 --> 00:08:11.780
datastore outside of Cloud
Endpoints, again, it's exactly

00:08:11.780 --> 00:08:14.980
the same user service that
you're already used to using.

00:08:14.980 --> 00:08:16.150
And then, of course,
we're persisting

00:08:16.150 --> 00:08:17.950
it as we were before.

00:08:17.950 --> 00:08:20.600
And then for cases where we
actually do not have a valid

00:08:20.600 --> 00:08:23.080
request from a user, we're
throwing an OAuth request

00:08:23.080 --> 00:08:26.473
exception, which will be
properly propagated back to

00:08:26.473 --> 00:08:28.430
any of the clients that are
calling these APIs.

00:08:31.450 --> 00:08:34.220
So if you combine the two of
those, this is what the final

00:08:34.220 --> 00:08:36.549
code would look like for
our back end service.

00:08:36.549 --> 00:08:41.020
You can call it V2 of the
tic-tac-toe API that now

00:08:41.020 --> 00:08:46.000
properly supports OAuth
via the user service.

00:08:46.000 --> 00:08:49.520
So let's move on to how you
would implement the front end

00:08:49.520 --> 00:08:51.890
code for this in JavaScript.

00:08:51.890 --> 00:08:56.510
So in the demos that we showed
at I/O we had a really simple

00:08:56.510 --> 00:08:58.900
example using the
Google-provided JavaScript

00:08:58.900 --> 00:09:00.030
client library.

00:09:00.030 --> 00:09:02.730
And basically when that loads
we call initialization

00:09:02.730 --> 00:09:05.220
functions that load up all
of the APIs that we're

00:09:05.220 --> 00:09:06.950
interested in using.

00:09:06.950 --> 00:09:09.920
So in that particular example,
we're only interested in

00:09:09.920 --> 00:09:11.500
loading the tic-tac-toe API.

00:09:11.500 --> 00:09:13.540
And this is what the code for
that looked like when we

00:09:13.540 --> 00:09:16.650
showed it off at I/O.

00:09:16.650 --> 00:09:18.640
Now that we're interested in
using OAuth 2, we're going to

00:09:18.640 --> 00:09:21.660
add another API into
that code.

00:09:21.660 --> 00:09:25.400
And once that API has loaded,
we're going to attempt to sign

00:09:25.400 --> 00:09:26.470
in the user.

00:09:26.470 --> 00:09:28.470
So you can see here
the API that we're

00:09:28.470 --> 00:09:30.070
loading is an OAuth 2.

00:09:30.070 --> 00:09:32.760
This is of course V2 of OAuth.

00:09:32.760 --> 00:09:36.380
And then we're calling a sign-in
method, which I can

00:09:36.380 --> 00:09:37.630
show you now as well.

00:09:40.500 --> 00:09:43.750
So what this does is it calls
a built-in function of the

00:09:43.750 --> 00:09:47.340
JavaScript client library
called authorize.

00:09:47.340 --> 00:09:49.880
It takes the client ID
for your application.

00:09:49.880 --> 00:09:52.210
Again, this is the same client
ID that you passed into your

00:09:52.210 --> 00:09:56.620
back end code, one or more API
scopes that you're interested

00:09:56.620 --> 00:09:57.510
in using, such as the

00:09:57.510 --> 00:10:01.140
userinfo.email scope, and mode.

00:10:01.140 --> 00:10:04.040
And we'll talk about that
more in just a second.

00:10:04.040 --> 00:10:07.440
And then a response type, which
type of tokens you're

00:10:07.440 --> 00:10:08.760
interested in getting back.

00:10:08.760 --> 00:10:12.910
So the mode here is there's
two configurations

00:10:12.910 --> 00:10:13.440
that you can use.

00:10:13.440 --> 00:10:15.750
The first mode is
immediate mode.

00:10:15.750 --> 00:10:20.140
And what that will attempt to do
is basically authorize the

00:10:20.140 --> 00:10:22.570
user without initiating
a prompt.

00:10:22.570 --> 00:10:24.960
So basically that pop-up window
that you might be used

00:10:24.960 --> 00:10:27.130
to seeing won't appear.

00:10:27.130 --> 00:10:29.740
But this will only work if the
user has already previously

00:10:29.740 --> 00:10:32.490
granted access to your
application.

00:10:32.490 --> 00:10:34.980
And you might say, well, let's
say the user hasn't granted

00:10:34.980 --> 00:10:36.090
authorization in the past.

00:10:36.090 --> 00:10:37.800
Well, we'll get to that
in just a second.

00:10:37.800 --> 00:10:41.295
So here we'll assume that the
user has already logged into

00:10:41.295 --> 00:10:42.570
the application before.

00:10:42.570 --> 00:10:44.980
So when your page gets loaded,
they'll automatically be

00:10:44.980 --> 00:10:50.230
logged back in again, and then
your application can continue.

00:10:50.230 --> 00:10:52.340
So this is basically what the
callback function would look

00:10:52.340 --> 00:10:56.630
like once the user
has authorized.

00:10:56.630 --> 00:11:00.210
We're going to basically make
a request here to get

00:11:00.210 --> 00:11:02.190
information about the
user, such as the

00:11:02.190 --> 00:11:04.280
user's email address.

00:11:04.280 --> 00:11:06.280
Properly save the token,
and then we

00:11:06.280 --> 00:11:07.530
can call our endpoints.

00:11:11.090 --> 00:11:13.220
And then finally, to handle the
case where the user has

00:11:13.220 --> 00:11:15.590
never authorized the application
before, we'll add

00:11:15.590 --> 00:11:19.010
a little bit of code to our
UI, like a sign-in button.

00:11:19.010 --> 00:11:21.680
And when that button is clicked,
it will call a method

00:11:21.680 --> 00:11:25.360
such as Auth here, which we'll
call that authorized method

00:11:25.360 --> 00:11:27.790
again without using
immediate mode.

00:11:27.790 --> 00:11:31.000
And then we'll pass that through
to the same callback

00:11:31.000 --> 00:11:32.250
method that we used
previously.

00:11:34.800 --> 00:11:39.240
So the best part about this is
that it's relatively simple to

00:11:39.240 --> 00:11:43.500
add OAuth 2 to your
implementations of your

00:11:43.500 --> 00:11:46.280
client, so in the JavaScript
client like we showed here.

00:11:46.280 --> 00:11:48.980
But the actual code
to call the APIs

00:11:48.980 --> 00:11:50.490
hasn't changed at all.

00:11:50.490 --> 00:11:53.340
So this is exactly the same code
that we used in the demos

00:11:53.340 --> 00:11:57.750
at I/O to insert a new score
into the datastore.

00:11:57.750 --> 00:12:00.530
And all of the pieces around
OAuth 2 have basically just

00:12:00.530 --> 00:12:03.330
been transparently added
in the background of

00:12:03.330 --> 00:12:05.260
all of these requests.

00:12:05.260 --> 00:12:07.530
So there's nothing special that
we need to do once we're

00:12:07.530 --> 00:12:10.010
actually writing our code to
make sure that OAuth 2

00:12:10.010 --> 00:12:10.990
continues to work.

00:12:10.990 --> 00:12:13.700
All that's handled just a single
time right up front.

00:12:16.510 --> 00:12:19.800
So hopefully you found this
demo interesting.

00:12:19.800 --> 00:12:22.030
If you haven't already signed
up for the Trusted Tester

00:12:22.030 --> 00:12:24.180
Program for Google Cloud
Endpoints, there's a

00:12:24.180 --> 00:12:25.460
link to that here.

00:12:25.460 --> 00:12:29.930
We'll provide a link to these
slides in the information

00:12:29.930 --> 00:12:31.380
about this hangout.

00:12:31.380 --> 00:12:34.610
We also have a link to the
codelab, which I also showed

00:12:34.610 --> 00:12:38.490
at I/O, so you can follow
through the complete

00:12:38.490 --> 00:12:40.890
development of a
Java back end.

00:12:40.890 --> 00:12:44.810
And then I have a link to the
little IFrame demo that I

00:12:44.810 --> 00:12:46.640
showed earlier in the slides
if you'd like to play

00:12:46.640 --> 00:12:47.930
tic-tac-toe yourself.

00:12:47.930 --> 00:12:52.940
And then you can also inspect
the entire source code of the

00:12:52.940 --> 00:12:55.570
front end of the application,
so all of the JavaScript

00:12:55.570 --> 00:12:57.730
that's powering that demo.

00:12:57.730 --> 00:13:00.990
And with that, I think we're
done with slides.

00:13:00.990 --> 00:13:04.070
And I think we have some
questions from the moderator

00:13:04.070 --> 00:13:05.320
that we can go through?

00:13:10.020 --> 00:13:10.920
AMY: Can you hear me, Dan?

00:13:10.920 --> 00:13:11.280
DAN HOLEVOET: Yes.

00:13:11.280 --> 00:13:12.340
I can hear you.

00:13:12.340 --> 00:13:13.300
AMY: Great.

00:13:13.300 --> 00:13:13.850
Hi, everyone.

00:13:13.850 --> 00:13:18.505
I'm Amy, another App Engine
devrel, Developer Regulations.

00:13:18.505 --> 00:13:21.470
So I'm going to be the
moderator, question reader.

00:13:29.760 --> 00:13:30.170
OK.

00:13:30.170 --> 00:13:33.240
And so I'm going to start one
that I think is most related

00:13:33.240 --> 00:13:36.710
to this presentation.

00:13:36.710 --> 00:13:40.250
Some APIs, email settings,
requires a super user to

00:13:40.250 --> 00:13:41.820
authenticate.

00:13:41.820 --> 00:13:44.670
When running the Web
application, only the end user

00:13:44.670 --> 00:13:46.650
is authorizing access.

00:13:46.650 --> 00:13:50.590
How best to intermix that
authorization with normal end

00:13:50.590 --> 00:13:53.340
user authorization?

00:13:53.340 --> 00:13:58.640
DAN HOLEVOET: So I think that
there's really a couple pieces

00:13:58.640 --> 00:14:01.250
to the answer for
this question.

00:14:01.250 --> 00:14:07.870
So one of those is that on App
Engine we have the concept of

00:14:07.870 --> 00:14:10.910
service accounts, or actually
Google APIs have the concept

00:14:10.910 --> 00:14:17.750
of service accounts, which
basically allow you to call an

00:14:17.750 --> 00:14:21.760
API that's not necessarily
representing a

00:14:21.760 --> 00:14:23.450
request from a user.

00:14:23.450 --> 00:14:28.470
So a lot of those administrative
type of APIs,

00:14:28.470 --> 00:14:32.130
the request that they're
making to update some

00:14:32.130 --> 00:14:34.720
organization-specific
information, a lot of the time

00:14:34.720 --> 00:14:39.740
those are coming from services
rather than active users.

00:14:39.740 --> 00:14:42.250
But then there's also the
concept of two-legged OAuth,

00:14:42.250 --> 00:14:45.200
which I think is maybe more
interesting in this case.

00:14:45.200 --> 00:14:48.640
So something like the email
settings API, only an

00:14:48.640 --> 00:14:52.670
administrator can access that
particular API, but they might

00:14:52.670 --> 00:14:55.230
want to do it on behalf
of another user.

00:14:55.230 --> 00:14:59.150
So let's say the domain
administrator for an

00:14:59.150 --> 00:15:02.690
organization wants to update
the email signatures of all

00:15:02.690 --> 00:15:03.960
the people at their company.

00:15:03.960 --> 00:15:06.710
They might call the email
settings API on behalf of a

00:15:06.710 --> 00:15:12.210
specific user in order to update
those email settings.

00:15:12.210 --> 00:15:14.580
So without a little bit more
detail on what the specific

00:15:14.580 --> 00:15:17.040
API is that we're trying to
call, I don't think we can

00:15:17.040 --> 00:15:19.600
give a complete answer.

00:15:19.600 --> 00:15:21.950
But those are two of the
technologies that might be

00:15:21.950 --> 00:15:23.200
useful in that case.

00:15:28.929 --> 00:15:29.930
AMY: OK.

00:15:29.930 --> 00:15:33.110
The next question is a
little more general.

00:15:33.110 --> 00:15:37.210
Is there a way to backup and
restore data within any Google

00:15:37.210 --> 00:15:38.390
infrastructure?

00:15:38.390 --> 00:15:41.770
Not like Google Drive, but
much larger, mostly for

00:15:41.770 --> 00:15:43.670
archiving purposes?

00:15:43.670 --> 00:15:46.170
If not, is such a service
in the plan or

00:15:46.170 --> 00:15:48.700
are there other providers?

00:15:48.700 --> 00:15:54.510
So this is not directly related
to Cloud Endpoints.

00:15:54.510 --> 00:15:57.890
I can take a stab at part
of it and then you

00:15:57.890 --> 00:15:58.620
can elaborate, Dan.

00:15:58.620 --> 00:15:59.020
DAN HOLEVOET: Sure.

00:15:59.020 --> 00:16:04.460
AMY: But there's a free
your data initiative.

00:16:04.460 --> 00:16:06.540
I can't remember exactly what
that's called, but it's

00:16:06.540 --> 00:16:09.630
actually a big effort to let you
get all of the data that

00:16:09.630 --> 00:16:13.570
you own out of all the various
Google services.

00:16:13.570 --> 00:16:16.930
Do you remember what that
is called exactly, Dan?

00:16:16.930 --> 00:16:18.080
DAN HOLEVOET: Is it called--

00:16:18.080 --> 00:16:20.220
it might be called Take Out.

00:16:20.220 --> 00:16:22.190
AMY: It might be, yeah.

00:16:22.190 --> 00:16:25.690
Yeah, so there are some things
supported like that.

00:16:25.690 --> 00:16:30.080
Perhaps a little more
pertinently to App Engine and

00:16:30.080 --> 00:16:33.520
other cloud services, something
else that you might

00:16:33.520 --> 00:16:38.310
investigate is Google Cloud
Storage, which is very good

00:16:38.310 --> 00:16:41.830
for easily archiving and
accessing lots of data.

00:16:41.830 --> 00:16:48.280
And it plays well with BigQuery
and Google Compute

00:16:48.280 --> 00:16:51.050
Engine when that's more
widely available.

00:16:51.050 --> 00:16:53.340
And it's really fast
and scalable.

00:16:53.340 --> 00:16:54.590
So you might check into that.

00:16:57.220 --> 00:16:58.540
Anything to add?

00:16:58.540 --> 00:17:00.720
DAN HOLEVOET: No, I think that
pretty much covers it.

00:17:00.720 --> 00:17:04.660
I would wonder why they wouldn't
consider Drive for

00:17:04.660 --> 00:17:05.829
archival storage as well.

00:17:05.829 --> 00:17:09.020
I mean, unless we're talking
really huge amounts of data in

00:17:09.020 --> 00:17:12.000
which maybe the price is not
quite suitable for that.

00:17:12.000 --> 00:17:15.383
But I think it would
work there, too.

00:17:15.383 --> 00:17:19.363
AMY: Yeah, that's another
[INAUDIBLE].

00:17:19.363 --> 00:17:19.822
OK.

00:17:19.822 --> 00:17:22.119
Let's see.

00:17:22.119 --> 00:17:27.329
Here's one that I'm not sure I
know how to interpret without

00:17:27.329 --> 00:17:29.660
some clarification.

00:17:29.660 --> 00:17:32.930
It says, I know how to loop
through all the documents and

00:17:32.930 --> 00:17:34.435
nest collections.

00:17:34.435 --> 00:17:37.740
But how would you access all
the unresolved comments for

00:17:37.740 --> 00:17:38.990
each document?

00:17:41.831 --> 00:17:42.817
DAN HOLEVOET: Yeah, I'm--

00:17:42.817 --> 00:17:45.160
AMY: I think we might need a
little more context on that

00:17:45.160 --> 00:17:48.550
one, sorry.

00:17:48.550 --> 00:17:50.750
Yeah.

00:17:50.750 --> 00:17:54.000
And I would encourage
people to post

00:17:54.000 --> 00:17:55.720
questions on Stack Overflow.

00:17:55.720 --> 00:18:00.040
So since we can't talk to the
person directly right now who

00:18:00.040 --> 00:18:03.540
posted that question, do ask it
on Stack Overflow and add a

00:18:03.540 --> 00:18:04.334
little more detail.

00:18:04.334 --> 00:18:05.584
DAN HOLEVOET: Yeah,
definitely.

00:18:09.468 --> 00:18:09.960
All right.

00:18:09.960 --> 00:18:11.695
Are those the only moderator
questions?

00:18:11.695 --> 00:18:12.820
AMY: Let's see.

00:18:12.820 --> 00:18:13.480
Yeah.

00:18:13.480 --> 00:18:15.550
Those are the only ones.

00:18:15.550 --> 00:18:16.900
DAN HOLEVOET: Great.

00:18:16.900 --> 00:18:21.275
Do you have anything to add
about Cloud Endpoints?

00:18:21.275 --> 00:18:21.980
AMY: I don't.

00:18:21.980 --> 00:18:23.830
That was an excellent
presentation, Dan.

00:18:23.830 --> 00:18:24.620
DAN HOLEVOET: Thank you.

00:18:24.620 --> 00:18:28.562
AMY: And I would encourage
everyone to go

00:18:28.562 --> 00:18:30.690
play with the codelab.

00:18:30.690 --> 00:18:33.800
We'll post the links to the
slides, and from there you'll

00:18:33.800 --> 00:18:35.130
find the codelab link.

00:18:35.130 --> 00:18:37.186
I've played around with it,
and it's kind of fun.

00:18:37.186 --> 00:18:38.018
It's really great.

00:18:38.018 --> 00:18:40.810
DAN HOLEVOET: Yeah, I should
note that the codelab doesn't

00:18:40.810 --> 00:18:42.830
actually require that you're
white listed until you

00:18:42.830 --> 00:18:45.260
actually deploy to App Engine.

00:18:45.260 --> 00:18:47.690
So if you just want to try it
out and you say, well, I'm not

00:18:47.690 --> 00:18:50.940
sure if I want to apply, or
you're not sure if you'll get

00:18:50.940 --> 00:18:54.510
in immediately, you can try
out many of the steps.

00:18:54.510 --> 00:18:57.150
I think up through step four
of the codelab, which is

00:18:57.150 --> 00:19:00.440
actually fairly significant,
even without deploying

00:19:00.440 --> 00:19:02.541
anything to App Engine.

00:19:02.541 --> 00:19:05.770
AMY: And I'd also add, just
because we get this question

00:19:05.770 --> 00:19:09.630
periodically, people also wonder
if Cloud Endpoints are

00:19:09.630 --> 00:19:11.060
supported in Python.

00:19:11.060 --> 00:19:14.130
And yes, they are, even
though the codelab

00:19:14.130 --> 00:19:15.112
doesn't touch on that.

00:19:15.112 --> 00:19:17.650
DAN HOLEVOET: Right, exactly.

00:19:17.650 --> 00:19:22.300
And I will hope to share some
more information on the Python

00:19:22.300 --> 00:19:26.800
development environment for
Endpoints, perhaps in a future

00:19:26.800 --> 00:19:28.046
hangout

00:19:28.046 --> 00:19:31.660
AMY: Yeah, a future
mini tech talklet.

00:19:31.660 --> 00:19:36.120
So yes, for those of you who
aren't tuning into on these

00:19:36.120 --> 00:19:40.860
necessarily every week, where
we're starting to have a goal

00:19:40.860 --> 00:19:43.130
of presenting a lot of these
little mini tech talks pretty

00:19:43.130 --> 00:19:49.270
much every week and then just
also take regular App Engine

00:19:49.270 --> 00:19:50.950
Office Hour-type
questions, too.

00:19:50.950 --> 00:19:54.140
So we hope to give you these
little chunks of information

00:19:54.140 --> 00:19:54.840
every week.

00:19:54.840 --> 00:19:57.880
Hopefully something that's
relatively new maybe that you

00:19:57.880 --> 00:20:00.700
haven't played around with
it yet or don't have much

00:20:00.700 --> 00:20:01.700
information on yet.

00:20:01.700 --> 00:20:04.392
So stay tuned.

00:20:04.392 --> 00:20:06.570
DAN HOLEVOET: All
right, great.

00:20:06.570 --> 00:20:09.350
Well, if that's all the
questions, then thanks

00:20:09.350 --> 00:20:10.950
everyone for tuning in.

00:20:10.950 --> 00:20:12.440
And we'll see you
all next time.

