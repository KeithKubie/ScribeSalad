WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.948
[MUSIC PLAYING]

00:00:07.177 --> 00:00:08.260
SPEAKER 1: Hey, everybody.

00:00:08.260 --> 00:00:10.960
Welcome back to
What's New in Android.

00:00:10.960 --> 00:00:13.450
SPEAKER 2: First, we'll
start with distribution. you.

00:00:13.450 --> 00:00:15.658
You saw in the keynote, we
introduced the dynamic app

00:00:15.658 --> 00:00:16.407
bundles.

00:00:16.407 --> 00:00:18.990
Towards the end, it was pretty
clear it's pretty easy for you.

00:00:18.990 --> 00:00:20.650
All you have to do is
click a different menu

00:00:20.650 --> 00:00:21.860
when you build your application.

00:00:21.860 --> 00:00:23.500
And we're going to
save you some space.

00:00:23.500 --> 00:00:25.760
It's going to be faster
and easier for your users

00:00:25.760 --> 00:00:26.636
to download your app.

00:00:26.636 --> 00:00:28.468
SPEAKER 1: Let's talk
about Android Jetpack.

00:00:28.468 --> 00:00:30.100
This is a set of
components as well as

00:00:30.100 --> 00:00:33.140
guidance on how to build
better Android applications.

00:00:33.140 --> 00:00:35.050
All of you are familiar
with most of what

00:00:35.050 --> 00:00:37.150
is in Android Jetpack already.

00:00:37.150 --> 00:00:39.192
What we're doing is
adding to it over time

00:00:39.192 --> 00:00:41.150
with stuff that's going
to make it even better.

00:00:41.150 --> 00:00:42.880
And we're also
improving it over time.

00:00:42.880 --> 00:00:44.830
One of the major steps
that we're taking

00:00:44.830 --> 00:00:48.370
is what I like to think of
as a refactor, because it's

00:00:48.370 --> 00:00:49.450
a refactor.

00:00:49.450 --> 00:00:51.600
And we're doing a whole
lot of tedious renaming.

00:00:51.600 --> 00:00:53.680
And we're also providing
tools to make it easier

00:00:53.680 --> 00:00:56.120
for you to do the similar
refactoring that you're

00:00:56.120 --> 00:00:58.030
going to need to do
in your application,

00:00:58.030 --> 00:01:00.340
as well as in Android Studio.

00:01:00.340 --> 00:01:03.160
Everything is being renamed
to something more appropriate

00:01:03.160 --> 00:01:04.459
called Androidx.

00:01:04.459 --> 00:01:07.060
Jetpack architecture is
about architecture components

00:01:07.060 --> 00:01:09.160
that were announced
last year at I/O,

00:01:09.160 --> 00:01:11.810
and then iterated with
feedback from the community,

00:01:11.810 --> 00:01:14.380
and finally went
1.0 in the fall.

00:01:14.380 --> 00:01:16.360
Work Manager is
currently in preview.

00:01:16.360 --> 00:01:18.160
There's going to
be a talk about it.

00:01:18.160 --> 00:01:20.530
Also navigation-- it
turns out that up versus

00:01:20.530 --> 00:01:23.620
back is a hard problem
for applications to solve.

00:01:23.620 --> 00:01:25.360
We are making that
much easier, and we're

00:01:25.360 --> 00:01:28.260
integrating with the tool
to make it even easier yet.

00:01:28.260 --> 00:01:30.430
SPEAKER 2: Kotlin--
it's the [INAUDIBLE]

00:01:30.430 --> 00:01:31.960
thing we announced last year.

00:01:31.960 --> 00:01:32.560
So we're busy.

00:01:32.560 --> 00:01:34.570
We want to make it better
for all the Kotlin developers

00:01:34.570 --> 00:01:35.069
out there.

00:01:35.069 --> 00:01:37.130
I'm sure there's a
lot of you here today.

00:01:37.130 --> 00:01:38.755
So some of the things
we've been doing.

00:01:38.755 --> 00:01:41.180
The ART team has been really
busy with D8, R8, and ART

00:01:41.180 --> 00:01:41.450
itself.

00:01:41.450 --> 00:01:42.910
They've been looking at
the bytecode generated

00:01:42.910 --> 00:01:43.916
by the Kotlin compiler.

00:01:43.916 --> 00:01:46.040
They've analyzed some of
the bytecode patterns that

00:01:46.040 --> 00:01:48.130
were different from the
ones generated by the Java

00:01:48.130 --> 00:01:49.650
programming language compiler.

00:01:49.650 --> 00:01:53.050
And they've been optimizing
for those patterns.

00:01:53.050 --> 00:01:56.350
We've also been adding a lot
of nullability annotations

00:01:56.350 --> 00:01:59.590
to our Java APIs, both
in the core libraries--

00:01:59.590 --> 00:02:01.900
so libcore-- and our
support libraries

00:02:01.900 --> 00:02:04.065
to make it easier for
you to use the platform

00:02:04.065 --> 00:02:06.410
APIs when you're in Kotlin.

00:02:06.410 --> 00:02:08.440
And finally, we
launched on GitHub

00:02:08.440 --> 00:02:10.030
a new library
called android-ktx.

00:02:10.030 --> 00:02:14.050
It's a set of Kotlin extensions
for existing platform APIs.

00:02:14.050 --> 00:02:16.060
And the goal here is to
try to take advantage

00:02:16.060 --> 00:02:17.710
of some of the Kotlin
language features

00:02:17.710 --> 00:02:19.900
to make existing
APIs easier to use.

00:02:19.900 --> 00:02:22.226
They're already easier to
use just by using Kotlin,

00:02:22.226 --> 00:02:24.100
but with the extension,
they get even better.

00:02:24.100 --> 00:02:26.920
SPEAKER 3: So Slices is our
new approach to remote content

00:02:26.920 --> 00:02:30.190
that you can actually use to
project UI into your own app

00:02:30.190 --> 00:02:32.380
or into other apps
that support it.

00:02:32.380 --> 00:02:33.550
It's very structured.

00:02:33.550 --> 00:02:36.100
This is not sort of here's a
canvas or an absolute layout.

00:02:36.100 --> 00:02:37.390
Go nuts with it.

00:02:37.390 --> 00:02:41.170
We give you a structure to fill
out and a whole bunch of very

00:02:41.170 --> 00:02:44.380
flexible templates in which to
populate that data with some

00:02:44.380 --> 00:02:46.675
display hints, so that the
receiving end of the Slice--

00:02:46.675 --> 00:02:47.650
the Slice host--

00:02:47.650 --> 00:02:50.050
kind of knows what
to do with it.

00:02:50.050 --> 00:02:50.980
These are interactive.

00:02:50.980 --> 00:02:51.855
These are updateable.

00:02:51.855 --> 00:02:54.730
This is meant to be something
that holds rich UI-- sliders,

00:02:54.730 --> 00:02:57.520
controls, live information,
possibly videos--

00:02:57.520 --> 00:03:00.280
things that actually feel
like real UI as opposed

00:03:00.280 --> 00:03:03.070
to a snapshot of something
happening in a distant process

00:03:03.070 --> 00:03:03.940
somewhere.

00:03:03.940 --> 00:03:05.810
Slices are addressable
by content URI,

00:03:05.810 --> 00:03:07.810
and this is how they're
passed around the system

00:03:07.810 --> 00:03:09.760
and how they're passed
along to app indexing

00:03:09.760 --> 00:03:14.020
to be shown in
context-like search.

00:03:14.020 --> 00:03:16.150
And then finally,
Slices is entirely

00:03:16.150 --> 00:03:17.620
inside the support library.

00:03:17.620 --> 00:03:19.911
It's entirely in Jetpack, so
it's backwards-compatible.

00:03:19.911 --> 00:03:23.470
You can use Slices all
the way back to API 19.

00:03:23.470 --> 00:03:25.330
Related to Slices is Actions.

00:03:25.330 --> 00:03:27.970
You can think of these as
shortcuts with parameters.

00:03:27.970 --> 00:03:30.220
[INAUDIBLE] likes to think
of them as visible intents.

00:03:30.220 --> 00:03:32.740
This is essentially a
deep link into your app

00:03:32.740 --> 00:03:34.250
with some additional payload.

00:03:34.250 --> 00:03:35.950
It's not just a link to music.

00:03:35.950 --> 00:03:38.530
It's linked to the particular
album or something like that.

00:03:38.530 --> 00:03:40.279
And you saw these as
well in the keynotes,

00:03:40.279 --> 00:03:43.690
showing up in predictive
space inside our app launching

00:03:43.690 --> 00:03:45.550
experience--

00:03:45.550 --> 00:03:47.320
actions you define
in an actions XML

00:03:47.320 --> 00:03:49.999
file that goes into
your APK or app bundle.

00:03:49.999 --> 00:03:52.040
And that too can get
registered with app indexing

00:03:52.040 --> 00:03:54.910
so that search results
and predictive features

00:03:54.910 --> 00:03:56.470
can show those actions.

00:03:56.470 --> 00:03:59.588
[MUSIC PLAYING]

