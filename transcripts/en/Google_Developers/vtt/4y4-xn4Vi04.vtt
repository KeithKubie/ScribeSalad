WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.400
MARK PELLEGRINI: Hi, I'm Mark.

00:00:01.400 --> 00:00:02.270
JOHN ASMUTH: And I'm John.

00:00:02.270 --> 00:00:04.645
MARK PELLEGRINI: We're both
engineers on the Google Cloud

00:00:04.645 --> 00:00:05.230
SDK team.

00:00:05.230 --> 00:00:07.896
Today we're going to be giving a
brief walk-through of the Cloud

00:00:07.896 --> 00:00:10.995
SDK and specifically the new
gcloud command-line tool.

00:00:10.995 --> 00:00:12.370
JOHN ASMUTH: Here
at Google we've

00:00:12.370 --> 00:00:14.420
been working hard to create
a great Cloud Platform.

00:00:14.420 --> 00:00:15.795
And we know that
for a lot of you

00:00:15.795 --> 00:00:18.459
this means a great
command-line experience, too.

00:00:18.459 --> 00:00:20.000
MARK PELLEGRINI:
The Google Cloud SDK

00:00:20.000 --> 00:00:22.458
gives you everything you need
to work with the Google Cloud

00:00:22.458 --> 00:00:24.360
Platform in a single
convenient package.

00:00:24.360 --> 00:00:26.540
The new gcloud tool
is a complete rewrite

00:00:26.540 --> 00:00:28.020
of the existing
Cloud command-line

00:00:28.020 --> 00:00:30.930
interfaces you might be aware
of, with a specific focus

00:00:30.930 --> 00:00:32.860
on product integration,
ease of use,

00:00:32.860 --> 00:00:35.039
and, of course,
command-line power.

00:00:35.039 --> 00:00:36.830
The best way to show
off what gcloud can do

00:00:36.830 --> 00:00:38.092
is just to show you.

00:00:38.092 --> 00:00:39.800
JOHN ASMUTH: Let's
start with a situation

00:00:39.800 --> 00:00:42.345
we've all been in being a new
developer on a project team.

00:00:42.345 --> 00:00:44.330
You're an experienced developer
and you know how to code

00:00:44.330 --> 00:00:46.163
but you don't know the
tools your team uses,

00:00:46.163 --> 00:00:48.570
the workflows they follow,
or how to get started.

00:00:48.570 --> 00:00:51.030
Fortunately for us, this app
is built on the Google Cloud

00:00:51.030 --> 00:00:51.637
Platform.

00:00:51.637 --> 00:00:53.970
Your new tech lead tells you
to go grab the Google Cloud

00:00:53.970 --> 00:00:57.012
SDK, that your project
name is gcloud-demo-io2014,

00:00:57.012 --> 00:00:58.720
and that there's a
bug in production that

00:00:58.720 --> 00:01:00.242
needs to be fixed right away.

00:01:00.242 --> 00:01:02.450
MARK PELLEGRINI: We don't
really know where to start,

00:01:02.450 --> 00:01:04.290
so we search for the
Google Cloud SDK.

00:01:04.290 --> 00:01:05.970
And we land at Google's
Developer site,

00:01:05.970 --> 00:01:08.551
where we see some
installation instructions.

00:01:08.551 --> 00:01:10.300
JOHN ASMUTH: The set
up looks pretty easy.

00:01:10.300 --> 00:01:11.480
Run one command to install.

00:01:11.480 --> 00:01:14.327
And then run gcloud off
login on the command-line.

00:01:14.327 --> 00:01:16.410
MARK PELLEGRINI: We've
created this one liner that

00:01:16.410 --> 00:01:18.870
can take care of the whole
installation process.

00:01:18.870 --> 00:01:21.550
If you're on a system with
bash, paste it into a terminal

00:01:21.550 --> 00:01:23.960
and follow the instructions.

00:01:23.960 --> 00:01:26.570
Follow the prompts to choose
some installation options.

00:01:26.570 --> 00:01:28.120
And it will then
download and install

00:01:28.120 --> 00:01:29.655
the latest version of the SDK.

00:01:32.505 --> 00:01:33.190
OK.

00:01:33.190 --> 00:01:35.100
So we have the Cloud SDK now.

00:01:35.100 --> 00:01:37.290
The website said it
installed the gcloud tool.

00:01:37.290 --> 00:01:39.980
That seems like a
good place to start.

00:01:39.980 --> 00:01:41.950
JOHN ASMUTH: If we run
in gcloud with bashh

00:01:41.950 --> 00:01:43.824
it's going to tell us
about all the things we

00:01:43.824 --> 00:01:44.765
can do with gcloud.

00:01:44.765 --> 00:01:46.320
The developer
site's instructions

00:01:46.320 --> 00:01:48.030
mentioned running
gcloud off login.

00:01:48.030 --> 00:01:49.811
So let's do that first.

00:01:49.811 --> 00:01:51.560
When you run that
command it will take you

00:01:51.560 --> 00:01:53.770
to an authentication page
where you authenticate

00:01:53.770 --> 00:01:54.820
with your Google account.

00:01:54.820 --> 00:01:56.680
And then you can give
gcloud permission

00:01:56.680 --> 00:01:57.650
to work on your behalf.

00:02:01.467 --> 00:02:02.300
MARK PELLEGRINI: OK.

00:02:02.300 --> 00:02:03.966
Now we're logged in,
but we don't really

00:02:03.966 --> 00:02:05.011
know what to do next.

00:02:05.011 --> 00:02:07.260
Let's see if there any other
gcloud commands that look

00:02:07.260 --> 00:02:09.889
promising.

00:02:09.889 --> 00:02:10.960
There's a init command.

00:02:10.960 --> 00:02:15.220
It sounds like that'll set
up a local workspace for us.

00:02:15.220 --> 00:02:16.850
Looks like it needs a project.

00:02:16.850 --> 00:02:18.599
But we have that information.

00:02:18.599 --> 00:02:20.140
JOHN ASMUTH: gcloud
init is a command

00:02:20.140 --> 00:02:22.431
that can set up a local
development environment for you

00:02:22.431 --> 00:02:24.667
and bring in a repository
hosted by Google.

00:02:24.667 --> 00:02:26.500
After the init finishes,
there's a directory

00:02:26.500 --> 00:02:28.200
holding the project's
gear repository

00:02:28.200 --> 00:02:29.820
with all our project files.

00:02:29.820 --> 00:02:31.560
Now that we have
all the code, we

00:02:31.560 --> 00:02:33.626
need to get work
on fixing this bug.

00:02:33.626 --> 00:02:35.000
MARK PELLEGRINI:
First, let's try

00:02:35.000 --> 00:02:36.730
to reproduce it with
the current code.

00:02:36.730 --> 00:02:39.484
We need to run this app to
see where the problem is.

00:02:39.484 --> 00:02:41.025
I know we run this
app on App Engine.

00:02:41.025 --> 00:02:42.730
I bet there's a
command in gcloud

00:02:42.730 --> 00:02:44.820
for running an App Engine app.

00:02:44.820 --> 00:02:46.560
Well, it looks like
there's an app group.

00:02:46.560 --> 00:02:47.434
That seems promising.

00:02:50.360 --> 00:02:50.860
Great.

00:02:50.860 --> 00:02:51.972
There's a run command.

00:02:51.972 --> 00:02:52.830
Let's try that.

00:02:56.010 --> 00:02:58.244
Looks like we need to give
it our project directory.

00:02:58.244 --> 00:03:00.910
JOHN ASMUTH: gcloud app run will
run your app in a local testing

00:03:00.910 --> 00:03:02.993
environment on your own
computer without receiving

00:03:02.993 --> 00:03:04.737
any real traffic
from the internet.

00:03:04.737 --> 00:03:06.070
Hey, it looks like it's running.

00:03:06.070 --> 00:03:07.829
Let's check it out.

00:03:07.829 --> 00:03:09.120
Sure enough, there's a problem.

00:03:09.120 --> 00:03:10.994
This stack trace looks
pretty obvious though.

00:03:10.994 --> 00:03:12.982
Let's try and fix it.

00:03:12.982 --> 00:03:15.440
MARK PELLEGRINI: So first,
let's take a look at our source.

00:03:19.440 --> 00:03:20.780
Well, I see what's wrong here.

00:03:20.780 --> 00:03:22.155
How did this get
into production?

00:03:24.479 --> 00:03:26.520
One of the nice things
about the local app server

00:03:26.520 --> 00:03:28.500
is that it will automatically
reload your source

00:03:28.500 --> 00:03:29.083
if it changes.

00:03:29.083 --> 00:03:32.280
If we just refresh the page
we can see if our fix is good.

00:03:32.280 --> 00:03:35.780
JOHN ASMUTH: Looks
like it's working now.

00:03:35.780 --> 00:03:38.050
Now it's time to get
this fix submitted.

00:03:38.050 --> 00:03:40.850
Since we're using Git, we can
use all the normal Git commands

00:03:40.850 --> 00:03:42.800
and commit our change
and then push it back

00:03:42.800 --> 00:03:45.290
to our project's repository.

00:03:45.290 --> 00:03:46.900
You can also
configure your project

00:03:46.900 --> 00:03:49.355
to deploy the app when you
push, but for this project

00:03:49.355 --> 00:03:51.480
and for this demo, we
haven't enabled that feature.

00:03:54.602 --> 00:03:56.060
MARK PELLEGRINI:
Instead, let's use

00:03:56.060 --> 00:03:57.850
gcloud to redeploy the
app since it's currently

00:03:57.850 --> 00:03:58.724
broken in production.

00:04:02.080 --> 00:04:05.270
We need to tell it what
version to deploy to.

00:04:05.270 --> 00:04:06.960
Once the deployment
is finished, we

00:04:06.960 --> 00:04:10.320
can check on the production
site to see our fix in action.

00:04:10.320 --> 00:04:12.090
JOHN ASMUTH: That's
pretty easy. gcloud

00:04:12.090 --> 00:04:14.340
had everything we needed to
set up a local development

00:04:14.340 --> 00:04:16.950
environment, make a
fix, test our app,

00:04:16.950 --> 00:04:19.267
and then redeploy
back into production.

00:04:19.267 --> 00:04:21.100
The unified command-line
and integrated help

00:04:21.100 --> 00:04:22.849
really helped us figure
out the right path

00:04:22.849 --> 00:04:25.615
to take to get where
we needed to go.

00:04:25.615 --> 00:04:26.740
MARK PELLEGRINI: All right.

00:04:26.740 --> 00:04:28.322
Let's say now that
we work in DevOps,

00:04:28.322 --> 00:04:30.530
and we're responsible for
deploying a web application

00:04:30.530 --> 00:04:31.930
across a farm of machines.

00:04:31.930 --> 00:04:34.240
How can gcloud help us do this?

00:04:34.240 --> 00:04:35.740
JOHN ASMUTH: First,
let's just start

00:04:35.740 --> 00:04:37.624
with a bunch of empty VMs.

00:04:37.624 --> 00:04:39.540
We just created them so
they're running Linux,

00:04:39.540 --> 00:04:41.640
but they have
nothing else on them.

00:04:41.640 --> 00:04:44.050
We want to have our web
application running on each one

00:04:44.050 --> 00:04:46.258
and then set up a load
balancer to distribute traffic

00:04:46.258 --> 00:04:49.329
among all of them so we can
increase our overall capacity.

00:04:49.329 --> 00:04:51.870
MARK PELLEGRINI: We use gcloud
to push the files for a custom

00:04:51.870 --> 00:04:54.437
web server to each machine
and to get it running.

00:04:54.437 --> 00:04:56.020
When we're done,
we'll have our server

00:04:56.020 --> 00:04:57.940
running on a fleet of
machines serving traffic

00:04:57.940 --> 00:05:00.420
through a single IP.

00:05:00.420 --> 00:05:02.270
We can probably configure
each VM manually

00:05:02.270 --> 00:05:04.520
but there's a lot of them
and it would be really handy

00:05:04.520 --> 00:05:05.990
if we can just script this.

00:05:05.990 --> 00:05:07.560
Let's drop back into
the command-line

00:05:07.560 --> 00:05:09.297
and see how to do
this using gcloud.

00:05:09.297 --> 00:05:10.880
JOHN ASMUTH: First,
let's find the VMs

00:05:10.880 --> 00:05:12.405
that we already have running.

00:05:12.405 --> 00:05:14.530
We can get some basic
information about our cluster

00:05:14.530 --> 00:05:16.210
by running with a list command.

00:05:16.210 --> 00:05:19.279
It shows us the instance name
and IP among other things.

00:05:19.279 --> 00:05:20.820
For this demo, we
only have a couple,

00:05:20.820 --> 00:05:22.444
but really if there's
any more than one

00:05:22.444 --> 00:05:25.090
we'd probably want
to script this.

00:05:25.090 --> 00:05:27.050
Since the commands can
also get long sometimes,

00:05:27.050 --> 00:05:29.010
we added a shell mode to gcloud.

00:05:29.010 --> 00:05:31.690
Here we'll just run
gcloud compute --shell,

00:05:31.690 --> 00:05:35.470
and every future gcloud command
can omit the first two words.

00:05:35.470 --> 00:05:37.720
MARK PELLEGRINI: Next, we'll
create a target pool that

00:05:37.720 --> 00:05:39.440
will refer to each of those VMs.

00:05:39.440 --> 00:05:41.010
A target pool is
simply a grouping

00:05:41.010 --> 00:05:42.480
of machine between
which the load

00:05:42.480 --> 00:05:44.690
balancer can distribute traffic.

00:05:44.690 --> 00:05:46.480
For the instances
to use, I can just

00:05:46.480 --> 00:05:50.080
give it the output of the other
command that lists all of them.

00:05:50.080 --> 00:05:52.910
Once the target pool is ready
we can create a forwarding rule.

00:05:52.910 --> 00:05:55.710
A forwarding rule
accepts traffic on one IP

00:05:55.710 --> 00:05:57.150
and does some basic
load balancing

00:05:57.150 --> 00:05:59.370
between the VMs in the
pool we just created.

00:06:04.100 --> 00:06:04.650
OK.

00:06:04.650 --> 00:06:06.805
Forwarding rule's set up.

00:06:06.805 --> 00:06:08.180
JOHN ASMUTH: Let's
see what IP we

00:06:08.180 --> 00:06:11.480
need to connect to by listing
the forwarding rules available.

00:06:11.480 --> 00:06:13.690
Then we can use cURL to
connect to the web server.

00:06:16.885 --> 00:06:19.010
Of course, this isn't going
to work because there's

00:06:19.010 --> 00:06:21.072
no actual software running
on that machine yet.

00:06:21.072 --> 00:06:22.530
MARK PELLEGRINI:
Fortunately, we've

00:06:22.530 --> 00:06:25.710
got a nice little Go program
that will serve HTTP.

00:06:25.710 --> 00:06:26.660
It's pretty simple.

00:06:26.660 --> 00:06:28.993
All it does is it tells you
the host name of the machine

00:06:28.993 --> 00:06:30.177
that it's running on.

00:06:30.177 --> 00:06:31.760
We're using a Mac
here but the program

00:06:31.760 --> 00:06:34.982
can easily be
compiled for Linux.

00:06:34.982 --> 00:06:37.440
JOHN ASMUTH: Now we need to
push our server to all the VMs.

00:06:37.440 --> 00:06:39.660
We can use SSH and
SCP just like normal,

00:06:39.660 --> 00:06:42.390
but gcloud can even
make this a bit easier.

00:06:42.390 --> 00:06:44.522
The config SSH command
will create an alias

00:06:44.522 --> 00:06:46.480
in your host file for
each of the available VMs

00:06:46.480 --> 00:06:48.300
so that you can easily
SSH to all of them

00:06:48.300 --> 00:06:51.760
without having to remember
their IP addresses.

00:06:51.760 --> 00:06:53.885
Here we'll use bash in an
environment variable that

00:06:53.885 --> 00:06:56.010
will hold each of our VM names.

00:06:56.010 --> 00:06:58.320
Then we can use bash
to make a for loop that

00:06:58.320 --> 00:07:00.980
will run SCP and send
our server to each

00:07:00.980 --> 00:07:02.460
of the VMs in our project.

00:07:09.160 --> 00:07:09.965
Look at them go.

00:07:13.620 --> 00:07:15.890
Then once that's all set,
we can use the same variable

00:07:15.890 --> 00:07:17.890
and another for loop--
very similar-- to iterate

00:07:17.890 --> 00:07:21.660
over each VM and use SSH
to connect and run nohup

00:07:21.660 --> 00:07:23.850
and sudo that will run our
server in the background.

00:07:36.114 --> 00:07:37.780
MARK PELLEGRINI: Of
course, the firewall

00:07:37.780 --> 00:07:39.520
doesn't have anything
open by default.

00:07:39.520 --> 00:07:41.800
So we have to ask for an
exception for these machines

00:07:41.800 --> 00:07:44.625
so that they can actually
receive HTTP traffic.

00:07:44.625 --> 00:07:46.955
We use gcloud to indicate
that these machines will

00:07:46.955 --> 00:07:50.910
be used as HTTP servers and
that port 80 should be opened.

00:07:50.910 --> 00:07:52.970
Since we're making an API
call for each instance

00:07:52.970 --> 00:07:55.250
we issue these commands in
parallel to save some time.

00:07:57.552 --> 00:08:00.010
JOHN ASMUTH: Now if we make a
few cURL requests to the load

00:08:00.010 --> 00:08:01.970
balancer, we can see
that it's all working

00:08:01.970 --> 00:08:04.480
and the traffic's being
split between our VMs.

00:08:04.480 --> 00:08:06.188
MARK PELLEGRINI: So
just like that, we've

00:08:06.188 --> 00:08:09.440
set up a load balancer pool of
machines serving our web app.

00:08:09.440 --> 00:08:11.116
Of course, this is
just one example

00:08:11.116 --> 00:08:13.490
of the many powerful things
that gcloud command-line tool

00:08:13.490 --> 00:08:14.600
can do for you.

00:08:14.600 --> 00:08:16.420
Check out our developers
page to read more

00:08:16.420 --> 00:08:18.520
about the services
we support or just

00:08:18.520 --> 00:08:20.014
give gcloud a try on your own.

00:08:20.014 --> 00:08:21.430
JOHN ASMUTH: And
we're continually

00:08:21.430 --> 00:08:22.540
releasing new features.

00:08:22.540 --> 00:08:23.990
So also be sure
to join our Google

00:08:23.990 --> 00:08:26.380
group to get the latest updates.

00:08:26.380 --> 00:08:27.930
MARK PELLEGRINI: Thanks.

