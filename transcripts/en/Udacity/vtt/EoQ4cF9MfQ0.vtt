WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.480
So, far we've seen that HTTP can be used to request content like

00:00:03.480 --> 00:00:07.145
what's in a webpage; images, text, video.

00:00:07.145 --> 00:00:08.810
But for the apps that we'll be writing,

00:00:08.810 --> 00:00:11.565
we'll use HTTP in a slightly different way.

00:00:11.565 --> 00:00:14.520
Instead of using URLs like Udacity.com,

00:00:14.520 --> 00:00:17.280
we'll you special URLs that correspond to methods like

00:00:17.280 --> 00:00:20.895
getimageData that are made available by Web services.

00:00:20.895 --> 00:00:25.890
Web services sometimes they're also referred to as APIs but don't get confused,

00:00:25.890 --> 00:00:27.250
they mean the same thing.

00:00:27.250 --> 00:00:30.230
I want to take a look at a quick example from the Flickr API.

00:00:30.230 --> 00:00:33.785
We're going to look at flickr.people.getPublicPhotos.

00:00:33.785 --> 00:00:37.900
This method returns some kind of image data back to our client or an app.

00:00:37.900 --> 00:00:40.640
We're going to look at Flickr's documentation for this method now.

00:00:40.640 --> 00:00:42.590
I posted a link in the instructor notes.

00:00:42.590 --> 00:00:46.190
So, this is the documentation for getPublicPhotos and

00:00:46.190 --> 00:00:47.840
there's something that I want to draw to

00:00:47.840 --> 00:00:50.515
your attention first and that is the use of arguments.

00:00:50.515 --> 00:00:53.030
So, the arguments listed here are a lot like the arguments

00:00:53.030 --> 00:00:55.490
that you'd see for a swift function call and you'll

00:00:55.490 --> 00:00:57.785
also notice that some of them are required like

00:00:57.785 --> 00:01:01.120
api_key while others are not like safe_search.

00:01:01.120 --> 00:01:03.650
Now, this is really cool here at the bottom.

00:01:03.650 --> 00:01:05.460
This is the API Explorer.

00:01:05.460 --> 00:01:09.635
Not all APIs have this but Flickr does and it's extremely useful.

00:01:09.635 --> 00:01:15.130
The API Explorer allows us to test the APIs methods before using them in our apps.

00:01:15.130 --> 00:01:19.655
For this method, it shows the only required argument is the user ID.

00:01:19.655 --> 00:01:21.250
This is only a half truth.

00:01:21.250 --> 00:01:23.780
The API key is also required but in

00:01:23.780 --> 00:01:28.345
the API Explorer it automatically includes a test API key for us.

00:01:28.345 --> 00:01:30.235
For the user ID argument,

00:01:30.235 --> 00:01:33.740
I'll go ahead and use my user ID that I've copied ahead of time,

00:01:33.740 --> 00:01:38.040
and then under the extras argument I'll type url_m.

00:01:39.800 --> 00:01:42.100
If you read the documentation,

00:01:42.100 --> 00:01:45.320
the url_m option specifies that we want

00:01:45.320 --> 00:01:49.475
the result of this method to include URLs for medium images.

00:01:49.475 --> 00:01:51.175
You'll see that in just a second.

00:01:51.175 --> 00:01:54.560
And last, we want to change the output type to JSON or

00:01:54.560 --> 00:01:58.820
JavaScript Object Notation which we'll talk about more later in this lesson.

00:01:58.820 --> 00:02:01.230
And let's call the method,

00:02:01.840 --> 00:02:05.230
and after it's called we can see the results below.

00:02:05.230 --> 00:02:08.570
In the results we see this information about photos and then

00:02:08.570 --> 00:02:12.605
within photos it looks like there's a group of individual photos.

00:02:12.605 --> 00:02:16.020
Judging by the total value we see of 13,

00:02:16.020 --> 00:02:19.220
it appears there's probably 13 total photos,

00:02:19.220 --> 00:02:22.940
and for each photo we can see this owner ID which is the

00:02:22.940 --> 00:02:27.045
same as my user ID and we also see an ID for the image.

00:02:27.045 --> 00:02:31.610
If we keep scrolling to the right there's more values and here is

00:02:31.610 --> 00:02:36.185
the url_m value that we specified in the extras argument.

00:02:36.185 --> 00:02:38.910
If we copy one of these,

00:02:39.040 --> 00:02:43.400
we can paste it into the browser to see the image.

00:02:44.810 --> 00:02:48.560
The URL seems to be not working and I think it's because

00:02:48.560 --> 00:02:52.820
these extra slash characters that have been added before each of the forward slashes.

00:02:52.820 --> 00:02:58.850
So, let me remove these and I'm removing them manually now but normally

00:02:58.850 --> 00:03:01.280
these slash characters will get removed when we create

00:03:01.280 --> 00:03:05.440
an NSURL and code, and let's try this.

00:03:05.440 --> 00:03:08.610
Nice. This is a picture of Eloise.

00:03:08.610 --> 00:03:11.330
This is my wife's cat and I'd actually didn't really like

00:03:11.330 --> 00:03:14.945
Eloise very much at first but she's kind of grown in me over time.

00:03:14.945 --> 00:03:19.180
Back in the API Explorer let's recap on what's happening.

00:03:19.180 --> 00:03:21.110
The results being returned by

00:03:21.110 --> 00:03:25.970
this getPublicPhotos method is this JSON data representing the photos and

00:03:25.970 --> 00:03:29.210
my public photo stream and they're being

00:03:29.210 --> 00:03:34.015
returned as JSON because that's what we specified here in the output.

00:03:34.015 --> 00:03:40.264
If we scroll all the way at the bottom we see this really long and ugly URL.

00:03:40.264 --> 00:03:44.470
I'll copy this and paste it back into our browser.

00:03:44.470 --> 00:03:46.410
If we visit this link,

00:03:46.410 --> 00:03:49.310
we get the exact same thing that we saw on the API Explorer.

00:03:49.310 --> 00:03:52.820
In fact, the URL that we're using here is extremely

00:03:52.820 --> 00:03:57.020
similar to the URL or App we'll use receive data from Flickr.

00:03:57.020 --> 00:04:02.430
Now if we look more closely at the URL itself we can see the arguments that we passed in.

00:04:02.430 --> 00:04:06.080
We didn't pass in the method argument that was implicit in the Explorer

00:04:06.080 --> 00:04:10.180
but if we keep scrolling here to the right past the API key,

00:04:10.180 --> 00:04:20.630
we can see my user ID here and then we can see the extras argument and the url_m.

00:04:21.230 --> 00:04:27.815
There are also these ampersands that seem to separate the different argument values.

00:04:27.815 --> 00:04:31.310
So, there's one there. There's one there.

00:04:31.310 --> 00:04:34.085
You can see them continuing on.

00:04:34.085 --> 00:04:40.820
Now the ampersands themselves are part of a standard for how arguments are sent in a URL.

00:04:40.820 --> 00:04:44.690
Speaking of standards, I should note that URLs can only be

00:04:44.690 --> 00:04:48.610
sent over the Internet using the ASCII character set.

00:04:48.610 --> 00:04:52.940
The ASCII character set is a simple way of representing characters on

00:04:52.940 --> 00:04:57.305
a computer where character values can also be represented using a number.

00:04:57.305 --> 00:05:01.950
Here's some example ASCII characters and their corresponding values.

00:05:01.950 --> 00:05:06.500
I've posted a link in the instructor notes if you want to read more about them.

00:05:06.500 --> 00:05:10.580
In some cases, we may want to use a URL that contains characters that are

00:05:10.580 --> 00:05:14.485
considered unsafe ASCII characters such as the plus sign.

00:05:14.485 --> 00:05:17.210
When this happens, we have to encode or escape

00:05:17.210 --> 00:05:21.655
these unsafe characters into valid ASCII characters in the URL.

00:05:21.655 --> 00:05:25.285
The escape version of a plus sign is percent 2B.

00:05:25.285 --> 00:05:27.440
In each of those characters the percent sign,

00:05:27.440 --> 00:05:32.010
the two and the B are valid, safe ASCII characters.

00:05:33.980 --> 00:05:36.165
Here's another example.

00:05:36.165 --> 00:05:41.040
This is a URL that uses Flickr's flickr.photos.search method.

00:05:41.040 --> 00:05:43.730
One of the arguments and this method is called

00:05:43.730 --> 00:05:47.575
text which is a string representing a text search.

00:05:47.575 --> 00:05:53.830
In this URL, the text is equal to red percent 2B blue.

00:05:56.470 --> 00:06:02.465
This is the escaped or encoded version of the actual text which is red plus blue.

00:06:02.465 --> 00:06:05.480
Since the plus sign is considered unsafe ASCII,

00:06:05.480 --> 00:06:09.030
it's escaped with a character's percent 2B.

