WEBVTT
Kind: captions
Language: en

00:00:05.650 --> 00:00:07.150
AGA MADURSKA: Hello,
my name is Aga,

00:00:07.150 --> 00:00:11.089
and I'm one of the TLs on the
Android Wear Support Library.

00:00:11.089 --> 00:00:12.130
OLI LAN: And I'm Oli Lan.

00:00:12.130 --> 00:00:15.580
I'm the lead engineer for watch
faces on the Android Wear.

00:00:15.580 --> 00:00:16.892
It's great to be here.

00:00:16.892 --> 00:00:18.850
We're excited to tell
you about some new things

00:00:18.850 --> 00:00:23.470
to help you build apps and
watch faces on Android Wear.

00:00:23.470 --> 00:00:24.940
I'm going to
introduce some tools

00:00:24.940 --> 00:00:28.600
to help you build watch faces
with support for complications.

00:00:28.600 --> 00:00:30.100
But, first, Aga's
going to tell you

00:00:30.100 --> 00:00:32.229
about some big changes
coming to the support

00:00:32.229 --> 00:00:34.570
libraries for Android Wear.

00:00:34.570 --> 00:00:36.790
AGA MADURSKA: Thank you.

00:00:36.790 --> 00:00:40.300
So when smartwatches first
launched, a lot of developers

00:00:40.300 --> 00:00:43.360
struggled to build apps
for this new form factor.

00:00:43.360 --> 00:00:47.380
There were issues with small
screens, round screens,

00:00:47.380 --> 00:00:49.720
for the first time, and
also bridging information

00:00:49.720 --> 00:00:52.480
from the phone to the watch.

00:00:52.480 --> 00:00:54.040
We built a wearable
support library

00:00:54.040 --> 00:00:55.490
to help with these issues.

00:00:55.490 --> 00:00:58.180
And, today, I'm pleased to
announce that we are starting

00:00:58.180 --> 00:00:59.530
to open source our code.

00:01:02.750 --> 00:01:04.330
The wearable
support library will

00:01:04.330 --> 00:01:06.940
be moving to the
Android Support Library

00:01:06.940 --> 00:01:09.340
and will become the
so-called wear module.

00:01:09.340 --> 00:01:13.576
This is similar to other modules
in the Android Support Library.

00:01:13.576 --> 00:01:14.950
Ones that, hopefully,
you already

00:01:14.950 --> 00:01:18.970
know-- like the Core UI or
the Recycler View or Design.

00:01:18.970 --> 00:01:22.090
So it will just become
another module for you, again,

00:01:22.090 --> 00:01:25.630
open sourcing the code.

00:01:25.630 --> 00:01:32.600
This is launching with Android
Support Library 26.0.0-beta1,

00:01:32.600 --> 00:01:34.480
so it launched,
actually, two days ago,

00:01:34.480 --> 00:01:38.200
so you can start using it
pretty much immediately.

00:01:38.200 --> 00:01:40.120
It's very easy to
add to your code.

00:01:40.120 --> 00:01:43.020
You just add your
regular dependency

00:01:43.020 --> 00:01:46.600
with a very similar
structure to other modules.

00:01:46.600 --> 00:01:48.850
Just make sure to mention
wear there, and beta1.

00:01:52.210 --> 00:01:55.040
So, hopefully, this
change makes you happy.

00:01:55.040 --> 00:01:57.760
There's a few
reasons to be happy.

00:01:57.760 --> 00:01:59.950
First and foremost,
as I said before,

00:01:59.950 --> 00:02:02.150
the code is not open source.

00:02:02.150 --> 00:02:05.290
You can stop trying to
reverse engineer it now.

00:02:05.290 --> 00:02:07.570
It's all going to be out there.

00:02:07.570 --> 00:02:10.900
The APIs will now be part
of the support library,

00:02:10.900 --> 00:02:14.110
and they will be consistent
with the rest of Android

00:02:14.110 --> 00:02:16.780
and the rest of the
support library.

00:02:16.780 --> 00:02:20.420
We will have more frequent
releases along the Android

00:02:20.420 --> 00:02:23.930
Support Library that will
be roughly every two months.

00:02:23.930 --> 00:02:25.810
And this means we
will be able to take

00:02:25.810 --> 00:02:29.470
in more of your feedback and
react to it a lot quicker

00:02:29.470 --> 00:02:30.355
than we were before.

00:02:33.040 --> 00:02:36.310
But we won't be moving
all of the code at once.

00:02:36.310 --> 00:02:39.800
That would be a bit of
a shock to the ecosystem

00:02:39.800 --> 00:02:41.410
to move everything.

00:02:41.410 --> 00:02:43.840
So we'll start with
the UI components.

00:02:43.840 --> 00:02:46.300
And I'm going to focus on
that for the rest of my talk.

00:02:46.300 --> 00:02:49.720
So the first package
we'll be open sourcing

00:02:49.720 --> 00:02:53.080
is the view package,
or now it's going

00:02:53.080 --> 00:02:54.970
to be called the widget package.

00:02:54.970 --> 00:02:58.360
And there, we want to focus
on enabling round-friendly UIs

00:02:58.360 --> 00:03:00.610
and space-efficient
interaction patterns.

00:03:00.610 --> 00:03:03.640
So we're targeting the two
main issues that developers

00:03:03.640 --> 00:03:06.570
had with UIs, which
is building stuff

00:03:06.570 --> 00:03:09.910
for round screens for the
first time in Android,

00:03:09.910 --> 00:03:13.570
and also building for
really, really tiny screens--

00:03:13.570 --> 00:03:17.350
very little screen estate.

00:03:17.350 --> 00:03:20.420
It's not trivial to build
good UIs in such conditions.

00:03:20.420 --> 00:03:23.770
So that's why those are the
things we're focusing on first.

00:03:26.290 --> 00:03:28.780
Here's a good example
of how we've enhanced

00:03:28.780 --> 00:03:31.300
a typical Android list.

00:03:31.300 --> 00:03:34.330
You used to have, on Android,
a very straight list--

00:03:34.330 --> 00:03:36.970
all the elements would
just go one by one--

00:03:36.970 --> 00:03:38.440
start at the top.

00:03:38.440 --> 00:03:40.570
What we've done
with wear here is

00:03:40.570 --> 00:03:44.800
we've played to the round
factor of the watch.

00:03:44.800 --> 00:03:48.880
We've adopted the list
to follow a curve.

00:03:48.880 --> 00:03:51.880
And that means, also, it
fits a lot more information

00:03:51.880 --> 00:03:57.490
on the screen than it was able
to with just a straight list.

00:03:57.490 --> 00:04:02.260
Here are some other examples
of our best round-friendly UIs.

00:04:02.260 --> 00:04:04.060
We've got the Launcher.

00:04:04.060 --> 00:04:05.740
We've got the Date/Time Picker--

00:04:05.740 --> 00:04:09.040
launched recently in the new
pocket-- in the new Desk Clock

00:04:09.040 --> 00:04:10.510
app.

00:04:10.510 --> 00:04:12.460
And then we've
got LifeSum, which

00:04:12.460 --> 00:04:16.329
is a great example of
a third-party app that

00:04:16.329 --> 00:04:20.800
encompasses a round-friendly UI.

00:04:20.800 --> 00:04:24.130
So all of these make use of
the curvature of the screen.

00:04:24.130 --> 00:04:27.700
All of them manage to fit
more information in the UIs

00:04:27.700 --> 00:04:29.870
and are just, generally,
more pleasant to use.

00:04:29.870 --> 00:04:31.870
So these are the kind
of UIs that we want

00:04:31.870 --> 00:04:33.530
you to build in the future.

00:04:33.530 --> 00:04:36.125
And we want to help you build
those UIs with the support

00:04:36.125 --> 00:04:36.625
library.

00:04:39.850 --> 00:04:42.830
So when building the
wear widget modules--

00:04:42.830 --> 00:04:46.930
so the UI components-- we were
thinking of the UI, generally,

00:04:46.930 --> 00:04:49.540
in terms of components--

00:04:49.540 --> 00:04:53.110
much like Android Framework,
much like the Android Support

00:04:53.110 --> 00:04:54.220
Library.

00:04:54.220 --> 00:04:56.860
So with this module,
we want to double up

00:04:56.860 --> 00:04:59.980
a suite of building blocks
that would make it easier

00:04:59.980 --> 00:05:02.800
for developers to put
together a UI, which

00:05:02.800 --> 00:05:07.300
is both intuitive and like
feels native on Android Wear--

00:05:07.300 --> 00:05:10.480
as well as build it
in a flexible manner

00:05:10.480 --> 00:05:13.780
enough that it will kind
of express the personality

00:05:13.780 --> 00:05:15.850
and the character of your app.

00:05:15.850 --> 00:05:20.110
So we're exploring both tiny
building blocks, like views--

00:05:20.110 --> 00:05:22.180
so images views or text views.

00:05:22.180 --> 00:05:24.400
We're also exploring
larger ones--

00:05:24.400 --> 00:05:28.520
like the WearableRecyclerView
or SwipeDismissFrame layout.

00:05:28.520 --> 00:05:33.020
And we call these,
specifically, components.

00:05:33.020 --> 00:05:38.620
And these components-- these
larger pieces of data--

00:05:38.620 --> 00:05:40.540
come together to form UIs.

00:05:40.540 --> 00:05:42.490
So this is where you
come in as developers

00:05:42.490 --> 00:05:44.890
and will reuse our
components and views

00:05:44.890 --> 00:05:47.890
to build your own apps.

00:05:47.890 --> 00:05:51.370
Some of these views and layouts
already exist in Android,

00:05:51.370 --> 00:05:54.460
and some of them need to
be implemented specifically

00:05:54.460 --> 00:05:56.159
for wear.

00:05:56.159 --> 00:05:57.700
Those are the ones
that we would want

00:05:57.700 --> 00:06:05.590
to go to put in the wear module
in the Widget UI Library.

00:06:05.590 --> 00:06:07.450
So here's a
visualization, again,

00:06:07.450 --> 00:06:09.680
of how we think about UI.

00:06:09.680 --> 00:06:12.340
It's reusable building
blocks, rather than

00:06:12.340 --> 00:06:15.700
custom-tailored or
special-case interfaces.

00:06:15.700 --> 00:06:17.344
Hopefully, that's
not big news to you.

00:06:17.344 --> 00:06:18.760
But I wanted to
make it very plain

00:06:18.760 --> 00:06:21.790
that this is what we're going
for with this new library.

00:06:24.770 --> 00:06:27.730
So, again, with this in mind,
we hope we will enable you

00:06:27.730 --> 00:06:30.940
to build good interfaces--
functional interfaces,

00:06:30.940 --> 00:06:32.800
very rich ones--

00:06:32.800 --> 00:06:35.830
that feel native to Android
Wear but also express

00:06:35.830 --> 00:06:38.960
the character of your app.

00:06:38.960 --> 00:06:42.280
So this is quite a long project.

00:06:42.280 --> 00:06:44.620
The complete construction
of the wear module

00:06:44.620 --> 00:06:45.610
will take some time.

00:06:45.610 --> 00:06:49.300
So I want to now to
spend the rest of my time

00:06:49.300 --> 00:06:52.730
to talk a little bit about how
where we will make it happen

00:06:52.730 --> 00:06:56.120
and what's the timeline for it--

00:06:56.120 --> 00:06:57.800
step by step.

00:06:57.800 --> 00:07:01.910
So we have divided all the
existing wear UI elements,

00:07:01.910 --> 00:07:04.820
broadly speaking,
into three categories.

00:07:04.820 --> 00:07:09.620
We will migrate the components
that are already built for wear

00:07:09.620 --> 00:07:14.860
and that are wear-specific
into the new wear module.

00:07:14.860 --> 00:07:17.180
Some components we will merge.

00:07:17.180 --> 00:07:19.700
Those are the components
that are useful

00:07:19.700 --> 00:07:24.150
not only for wearable devices
but also for handheld devices.

00:07:24.150 --> 00:07:26.550
So they can be reused on phones.

00:07:26.550 --> 00:07:29.200
There's no need for them to
live only in the wearable space.

00:07:29.200 --> 00:07:33.050
So we will graduate or merge
them into the framework

00:07:33.050 --> 00:07:39.530
or into other handheld or
generic support modules.

00:07:39.530 --> 00:07:41.390
And then the last
group is the components

00:07:41.390 --> 00:07:43.154
that we will deprecate.

00:07:43.154 --> 00:07:44.570
Those are the ones
that are mostly

00:07:44.570 --> 00:07:48.740
associated with all the design
patterns that have not proven

00:07:48.740 --> 00:07:50.994
successful with our users.

00:07:50.994 --> 00:07:53.285
And I'll talk a little bit
more about that in a second.

00:07:55.795 --> 00:07:57.920
So, first, I want to talk
about the components that

00:07:57.920 --> 00:07:58.614
will migrate.

00:07:58.614 --> 00:08:00.530
I want to, kind of, shine
a spotlight on them.

00:08:00.530 --> 00:08:03.050
Those are the most
important bits.

00:08:03.050 --> 00:08:07.010
They are the ones that are
launching with the Support

00:08:07.010 --> 00:08:10.490
Library 26.0.0-beta1.

00:08:10.490 --> 00:08:12.300
And that's the
WearableRecyclerView,

00:08:12.300 --> 00:08:16.070
which gives you that nice
curved list that we used also

00:08:16.070 --> 00:08:19.310
to build the Launcher.

00:08:19.310 --> 00:08:21.900
And then we have
the BoxInsetLayout,

00:08:21.900 --> 00:08:26.990
which enables you to fit all
of your UIs on the screen

00:08:26.990 --> 00:08:30.980
into the center middle
square of the screen.

00:08:30.980 --> 00:08:34.039
So you can reuse, basically,
your UIs between a square

00:08:34.039 --> 00:08:36.350
and the round watch.

00:08:36.350 --> 00:08:39.590
And then we've got this
SwipeDismissFrameLayout,

00:08:39.590 --> 00:08:41.059
which is quite an
interesting case

00:08:41.059 --> 00:08:43.850
because it encapsulates
a design pattern that we

00:08:43.850 --> 00:08:45.330
want you to use.

00:08:45.330 --> 00:08:48.650
So this pattern is
replacing the Back button

00:08:48.650 --> 00:08:50.900
on the handheld device.

00:08:50.900 --> 00:08:55.430
On wear, we don't use the
button for a back gesture.

00:08:55.430 --> 00:08:57.680
We want you to swipe
away your views.

00:08:57.680 --> 00:09:01.190
That was a specific
request from the developers

00:09:01.190 --> 00:09:03.980
during our Developer
Preview Program,

00:09:03.980 --> 00:09:07.550
so we're making this
component available to you

00:09:07.550 --> 00:09:09.370
in the Wearable Support Module.

00:09:11.920 --> 00:09:15.620
The next group-- oh,
sorry-- so in terms of code,

00:09:15.620 --> 00:09:18.130
should be a really
simple short slide.

00:09:18.130 --> 00:09:20.680
On the example of the
WearableRecyclerView,

00:09:20.680 --> 00:09:25.040
this is how you import
it now into your code.

00:09:25.040 --> 00:09:27.950
And this is how you would
use it in an onCreate method

00:09:27.950 --> 00:09:30.680
and the activity, for example.

00:09:30.680 --> 00:09:34.220
So when-- now with the
migration to the new module,

00:09:34.220 --> 00:09:36.140
there are very few
changes that we would

00:09:36.140 --> 00:09:38.030
need from you in terms of code.

00:09:38.030 --> 00:09:42.420
Hopefully, very simple
and easy to implement.

00:09:42.420 --> 00:09:46.990
So, first, we change the package
name to support.wear.widget--

00:09:46.990 --> 00:09:52.940
to distinguish this new UI wear
module in the support library.

00:09:52.940 --> 00:09:56.600
And then the second thing
is that we would introduce

00:09:56.600 --> 00:09:59.840
minimal tweaks to
the API, so that it

00:09:59.840 --> 00:10:04.040
is consistent with the existing
Android APIs and Support

00:10:04.040 --> 00:10:06.080
Library APIs.

00:10:06.080 --> 00:10:09.500
These are better APIs
and, hopefully, will make

00:10:09.500 --> 00:10:12.010
your code healthier in general.

00:10:12.010 --> 00:10:15.350
So super easy to
update your apps--

00:10:15.350 --> 00:10:19.550
really not much of an issue.

00:10:19.550 --> 00:10:22.789
Clicker, OK, so
then some classes--

00:10:22.789 --> 00:10:24.330
the ones that we're
merging-- are not

00:10:24.330 --> 00:10:26.430
only applicable to wear.

00:10:26.430 --> 00:10:28.530
This we will, as
I mentioned, merge

00:10:28.530 --> 00:10:30.960
into the main framework or
different support library

00:10:30.960 --> 00:10:32.490
modules.

00:10:32.490 --> 00:10:41.060
So here we've got mostly what I
call round things with an icon

00:10:41.060 --> 00:10:43.484
inside, sometimes.

00:10:43.484 --> 00:10:44.400
There's a lot of them.

00:10:44.400 --> 00:10:46.020
All of them look the same.

00:10:46.020 --> 00:10:49.620
There's no point in having
separate UI components for it--

00:10:49.620 --> 00:10:53.130
separate kind of
pieces of layouts

00:10:53.130 --> 00:10:54.480
that you would need to use.

00:10:54.480 --> 00:10:57.390
And also there already
is a circle image view

00:10:57.390 --> 00:11:01.680
in the support
library for handheld.

00:11:01.680 --> 00:11:04.890
So we're going to take all
of those additional APIs

00:11:04.890 --> 00:11:08.040
that we've created and merge
them into that one component.

00:11:08.040 --> 00:11:12.150
So that there's only one kind of
really strong, really flexible

00:11:12.150 --> 00:11:13.500
component for you to use.

00:11:16.770 --> 00:11:19.080
And then the third
group here, I want

00:11:19.080 --> 00:11:23.260
to talk about it on this
example of a conversation.

00:11:23.260 --> 00:11:28.010
And Hangout is a group of
layouts that we're deprecating.

00:11:28.010 --> 00:11:29.940
So those are the layouts
that are associated

00:11:29.940 --> 00:11:34.860
with user patterns that didn't
prove successful-- didn't prove

00:11:34.860 --> 00:11:36.790
popular with our users.

00:11:36.790 --> 00:11:41.520
So here, we are taking the
two-dimensional spatial model--

00:11:41.520 --> 00:11:44.640
where you could move either
vertically or horizontally

00:11:44.640 --> 00:11:47.590
in an app or in the system UI--

00:11:47.590 --> 00:11:51.810
and we're transforming
it into a linear layout,

00:11:51.810 --> 00:11:56.370
like here just vertically,
which is following

00:11:56.370 --> 00:11:59.380
the material design principles.

00:11:59.380 --> 00:12:01.680
So all of the classes
associated with

00:12:01.680 --> 00:12:05.470
that two-dimensional spatial
model will be deprecated.

00:12:05.470 --> 00:12:07.720
So that's the GridViewPager.

00:12:07.720 --> 00:12:10.920
That's different action
buttons, action layouts,

00:12:10.920 --> 00:12:11.890
things like that.

00:12:11.890 --> 00:12:15.030
So this will, hopefully, slim
down your dependencies as well.

00:12:17.620 --> 00:12:21.420
That pretty much
encompasses everything

00:12:21.420 --> 00:12:23.402
that we're going to
be doing in 2017.

00:12:23.402 --> 00:12:25.380
And here's a rough
timeline of what

00:12:25.380 --> 00:12:27.270
I've just been speaking about.

00:12:27.270 --> 00:12:29.580
So, today, we're
announcing and launching

00:12:29.580 --> 00:12:33.240
the wear module with the
first three core components.

00:12:33.240 --> 00:12:35.260
Just, again, to remind
you that's launching with

00:12:35.260 --> 00:12:40.230
the Android Support
Library 26.0.0-beta1.

00:12:40.230 --> 00:12:43.560
When that program
graduates out from beta--

00:12:43.560 --> 00:12:46.380
alongside the O Launch--

00:12:46.380 --> 00:12:51.120
we will deprecate the old
APIs in the current place,

00:12:51.120 --> 00:12:53.460
and then we will
really encourage people

00:12:53.460 --> 00:12:55.140
to move over to the new APIs.

00:12:55.140 --> 00:12:58.080
Then we will, subsequently,
have regular bug fixing

00:12:58.080 --> 00:13:00.900
and update releases
of the wear module

00:13:00.900 --> 00:13:03.720
with the Android
Support Library.

00:13:03.720 --> 00:13:06.760
And then some time,
saying mid-2018,

00:13:06.760 --> 00:13:09.180
mid-next year, we
would be starting

00:13:09.180 --> 00:13:14.040
to remove old APIs, so
that we slim down, again,

00:13:14.040 --> 00:13:20.070
dependencies to the ones
that we want people to use.

00:13:20.070 --> 00:13:21.395
So that's all from me.

00:13:21.395 --> 00:13:22.770
With that, I'm
going to hand over

00:13:22.770 --> 00:13:25.340
to Oli to talk
about complications.

00:13:25.340 --> 00:13:26.220
OLI LAN: Thanks, Aga.

00:13:26.220 --> 00:13:28.986
Some important changes there.

00:13:28.986 --> 00:13:31.431
[APPLAUSE]

00:13:34.369 --> 00:13:36.660
So I'm going to talk about
some new things we're adding

00:13:36.660 --> 00:13:38.580
for watch face developers.

00:13:38.580 --> 00:13:43.510
And as this is a big win for
anyone building a watch face--

00:13:43.510 --> 00:13:46.060
yes, it's another reason
to jump in the air in front

00:13:46.060 --> 00:13:48.820
of a sunset.

00:13:48.820 --> 00:13:51.250
More personalized
helpful watch faces

00:13:51.250 --> 00:13:55.270
are a key part of Wear 2.0.

00:13:55.270 --> 00:13:58.090
That's why last
year, here at I/O, we

00:13:58.090 --> 00:14:02.890
introduced the Complications
API for Android Wear.

00:14:02.890 --> 00:14:06.280
On wear, just like in
traditional watchmaking,

00:14:06.280 --> 00:14:09.980
a complication is a display
of data on the watch face.

00:14:09.980 --> 00:14:14.510
So these are all examples
of complications.

00:14:14.510 --> 00:14:18.610
Apps using the Complications
API can be data providers,

00:14:18.610 --> 00:14:20.380
or they can be watch faces.

00:14:20.380 --> 00:14:24.820
And Android Wear manages the
flow of data between the two.

00:14:24.820 --> 00:14:27.850
So watch faces
using the API can be

00:14:27.850 --> 00:14:30.190
configured to show any
of the data providers

00:14:30.190 --> 00:14:32.680
that are installed.

00:14:32.680 --> 00:14:34.780
This lets users put
the information they

00:14:34.780 --> 00:14:38.390
care about just a glance away.

00:14:38.390 --> 00:14:40.640
And if you build
a data provider,

00:14:40.640 --> 00:14:44.320
you can get your app's data onto
a whole range of watch faces.

00:14:47.260 --> 00:14:50.110
All of these apps already
include data providers

00:14:50.110 --> 00:14:51.580
for complications.

00:14:51.580 --> 00:14:54.420
There's fitness
apps like Strava,

00:14:54.420 --> 00:14:57.100
there's finance
apps like Robinhood,

00:14:57.100 --> 00:15:01.790
and there's weather apps like
AccuWeather and lots of others.

00:15:01.790 --> 00:15:04.390
So if you add complication
support to a watch face

00:15:04.390 --> 00:15:06.550
that you're building,
users will be

00:15:06.550 --> 00:15:08.320
able to choose from
any of these apps--

00:15:08.320 --> 00:15:11.410
if they're installed as well
as from built-in providers

00:15:11.410 --> 00:15:15.760
like the World Clock, Next
Event, and Battery Life.

00:15:15.760 --> 00:15:17.380
It's like you're
adding functionality

00:15:17.380 --> 00:15:19.480
from all of these
apps without having

00:15:19.480 --> 00:15:20.750
to know a thing about them.

00:15:23.610 --> 00:15:27.550
Many watch faces have already
added complication support,

00:15:27.550 --> 00:15:31.290
including classic styled
ones like Ultimate Watch 2--

00:15:31.290 --> 00:15:35.700
more abstract styles like Venom,
and super customizable ones

00:15:35.700 --> 00:15:36.570
like Pujie Black.

00:15:39.210 --> 00:15:42.710
And there are ones that
are a bit different.

00:15:42.710 --> 00:15:45.480
On Move, from the [INAUDIBLE]
[? Moods ?] Collection--

00:15:45.480 --> 00:15:48.325
The ring around the
outside is a complication.

00:15:48.325 --> 00:15:49.950
So here it's showing
your battery life,

00:15:49.950 --> 00:15:51.824
but it could also show
your fitness progress.

00:15:54.540 --> 00:15:58.110
Mesh Turbine HD shows the
complications on spokes,

00:15:58.110 --> 00:16:00.210
coming out from the
center of the screen,

00:16:00.210 --> 00:16:01.570
with a scrolling text effect.

00:16:04.580 --> 00:16:07.880
And Fit Cat-- it has a cat.

00:16:07.880 --> 00:16:09.560
But it also has
complications using

00:16:09.560 --> 00:16:13.380
the API in their own style.

00:16:13.380 --> 00:16:15.200
So there's a huge
variety of styles

00:16:15.200 --> 00:16:17.900
of watch face on Android Wear.

00:16:17.900 --> 00:16:21.620
And that's why the API gives
watch faces complete control

00:16:21.620 --> 00:16:23.480
over how they draw the data--

00:16:23.480 --> 00:16:25.910
to ensure complications
fit perfectly

00:16:25.910 --> 00:16:29.210
and to allow new interesting
ways of representing

00:16:29.210 --> 00:16:32.240
the information.

00:16:32.240 --> 00:16:35.170
But this freedom can make
it hard to add complications

00:16:35.170 --> 00:16:38.060
support to a watch face.

00:16:38.060 --> 00:16:40.760
When you build a watch
face, you don't have access

00:16:40.760 --> 00:16:41.990
to layouts or views.

00:16:41.990 --> 00:16:44.570
You draw directly
onto the canvas.

00:16:44.570 --> 00:16:47.235
And you have to create
the settings UI yourself.

00:16:49.990 --> 00:16:54.410
Today, we're introducing a few
things to make this easier.

00:16:54.410 --> 00:16:57.910
There's TextRenderer, which
helps draw all kinds of text

00:16:57.910 --> 00:17:00.640
onto a canvas.

00:17:00.640 --> 00:17:03.670
ComplicationDrawable is a
complete rendering solution

00:17:03.670 --> 00:17:06.040
for complications.

00:17:06.040 --> 00:17:09.339
A new setting sample shows how
to let users easily configure

00:17:09.339 --> 00:17:13.240
complications and style.

00:17:13.240 --> 00:17:15.910
And a test suite
provider lets you easily

00:17:15.910 --> 00:17:20.609
check if complications
will display correctly.

00:17:20.609 --> 00:17:22.614
So first up is
TextRenderer, and you

00:17:22.614 --> 00:17:24.780
might have noticed this has
been in wearable support

00:17:24.780 --> 00:17:27.170
for a few months.

00:17:27.170 --> 00:17:30.960
TextRenderer makes drawing
text onto a canvas easier.

00:17:30.960 --> 00:17:32.760
And that's important
because many

00:17:32.760 --> 00:17:34.620
of the most useful
complication types

00:17:34.620 --> 00:17:39.210
include text, such as the
short text type, the long text

00:17:39.210 --> 00:17:44.000
type, and the range-value type.

00:17:44.000 --> 00:17:47.030
The strings in the short
text and range-value types

00:17:47.030 --> 00:17:48.640
will be short.

00:17:48.640 --> 00:17:51.920
They should only be
seven characters maximum.

00:17:51.920 --> 00:17:54.990
While, as in long text, the
strings can be any length,

00:17:54.990 --> 00:17:57.120
and there are challenges
rendering the text

00:17:57.120 --> 00:17:59.710
in both cases.

00:17:59.710 --> 00:18:01.800
So here's a short text example.

00:18:01.800 --> 00:18:04.410
This string here is
seven characters long,

00:18:04.410 --> 00:18:08.400
and it fits nicely
at this font size.

00:18:08.400 --> 00:18:11.700
But this string is also
seven characters long.

00:18:11.700 --> 00:18:14.130
So to handle both of
these and make them fit,

00:18:14.130 --> 00:18:17.400
you have to measure the text
before you draw and adjust

00:18:17.400 --> 00:18:19.232
the font size accordingly.

00:18:21.950 --> 00:18:23.710
Here's a long text example.

00:18:23.710 --> 00:18:26.650
A short string looks
good centered vertically,

00:18:26.650 --> 00:18:29.080
but the text can be any
length, so it can easily

00:18:29.080 --> 00:18:31.930
flow outside the box.

00:18:31.930 --> 00:18:33.850
You can use something
like a static layout

00:18:33.850 --> 00:18:35.090
to help with this.

00:18:35.090 --> 00:18:36.910
But you need to be
careful not to relay out

00:18:36.910 --> 00:18:39.550
the text on every frame.

00:18:39.550 --> 00:18:42.280
With TextRenderer,
you tell it the bounds

00:18:42.280 --> 00:18:44.690
that you want the
text to fit in.

00:18:44.690 --> 00:18:47.440
If seven characters
don't fit, it

00:18:47.440 --> 00:18:50.790
will shrink the
font until it does.

00:18:50.790 --> 00:18:54.240
And longer text can be
flowed over multiple lines

00:18:54.240 --> 00:18:55.780
and ellipsized at the end.

00:18:58.706 --> 00:18:59.830
So let's look at some code.

00:19:04.060 --> 00:19:06.280
So when you initialize
your watch face,

00:19:06.280 --> 00:19:09.990
create a TextRenderer using
this simple constructor,

00:19:09.990 --> 00:19:13.710
and you pass in the TextPaint
that you want to use.

00:19:13.710 --> 00:19:16.900
The TextPaint defines
the font, the text size,

00:19:16.900 --> 00:19:19.740
the color-- things like that.

00:19:19.740 --> 00:19:22.440
Now because TextRenderer
caches things like the layout,

00:19:22.440 --> 00:19:24.570
you should create
one for each field.

00:19:24.570 --> 00:19:26.250
So we have one
for the text here,

00:19:26.250 --> 00:19:28.260
and we also have
one for the title.

00:19:28.260 --> 00:19:30.610
Don't share TextRenderers
between fields.

00:19:33.870 --> 00:19:35.700
Now when you want
to draw, you need

00:19:35.700 --> 00:19:38.100
to set the text on the renderer.

00:19:38.100 --> 00:19:40.540
So you do that calling setText.

00:19:40.540 --> 00:19:46.050
And to get the text,
you call getText.

00:19:46.050 --> 00:19:48.900
Now this takes the
current time, and you need

00:19:48.900 --> 00:19:51.060
to do this every time you draw.

00:19:51.060 --> 00:19:53.890
And that's whether you're
using TextRenderer or not.

00:19:53.890 --> 00:19:55.500
And that's because
some complications

00:19:55.500 --> 00:19:56.650
are time-dependent.

00:19:56.650 --> 00:19:59.850
So imagine a World Clock
complication, the text changes,

00:19:59.850 --> 00:20:00.770
depending on the time.

00:20:03.880 --> 00:20:07.180
Once you've set the text,
draw into the bounds

00:20:07.180 --> 00:20:09.550
that you specify.

00:20:09.550 --> 00:20:12.370
Now, it's OK to pass in
the text and the bounds

00:20:12.370 --> 00:20:15.940
every time like this, because
TextRenderer only lays the text

00:20:15.940 --> 00:20:20.220
out again if
something has changed.

00:20:20.220 --> 00:20:21.990
That does mean
that sometimes you

00:20:21.990 --> 00:20:23.970
need to tell TextRenderer
that a change has

00:20:23.970 --> 00:20:27.317
occurred, such as if you
change the paint's text size.

00:20:27.317 --> 00:20:29.400
And that's because the
paint is a different object

00:20:29.400 --> 00:20:32.570
from the TextRenderer.

00:20:32.570 --> 00:20:36.200
So let's imagine that we have
code that makes the text bigger

00:20:36.200 --> 00:20:39.320
when something happens.

00:20:39.320 --> 00:20:42.710
In that case, you should
call requestUpdateLayout

00:20:42.710 --> 00:20:45.490
on the TextRenderer,
so that it can adjust.

00:20:48.170 --> 00:20:50.210
Now one other thing
that TextRenderer can do

00:20:50.210 --> 00:20:52.100
is adjust the rendering
for the Always

00:20:52.100 --> 00:20:55.910
On screen, so for
the ambient mode.

00:20:55.910 --> 00:20:58.670
Many watch faces are black
and white in this mode,

00:20:58.670 --> 00:21:03.240
so you might not want things
like color emoji appearing.

00:21:03.240 --> 00:21:06.020
So you need to tell
the TextRenderer

00:21:06.020 --> 00:21:09.320
that the device has entered
ambient mode, so inAmbientMode

00:21:09.320 --> 00:21:11.180
change in your
watch face, you just

00:21:11.180 --> 00:21:15.150
pass the inAmbientMode Boolean
into the TextRenderer, like so.

00:21:18.830 --> 00:21:20.540
So that's TextRenderer.

00:21:20.540 --> 00:21:23.780
We strongly suggest we use it
whenever you're rendering text

00:21:23.780 --> 00:21:26.660
directly onto a canvas.

00:21:26.660 --> 00:21:28.490
But what if you
want not just text

00:21:28.490 --> 00:21:30.290
but the entire
complication drawn

00:21:30.290 --> 00:21:34.160
for you in a standard way?

00:21:34.160 --> 00:21:37.910
That's where the new
ComplicationDrawable comes in.

00:21:37.910 --> 00:21:39.860
ComplicationDrawable
can render all

00:21:39.860 --> 00:21:42.050
of the six main
complication types,

00:21:42.050 --> 00:21:44.660
and it handles all of the
layout and styling for you.

00:21:47.330 --> 00:21:48.950
As an example,
let's look at what

00:21:48.950 --> 00:21:50.690
you'd need to do to
render a short text

00:21:50.690 --> 00:21:53.690
complication like this.

00:21:53.690 --> 00:21:55.640
Now without
ComplicationDrawable,

00:21:55.640 --> 00:21:59.120
when data arrives, you need to
decode any of the images which

00:21:59.120 --> 00:22:00.230
are included.

00:22:00.230 --> 00:22:03.260
And you also need to cache those
images because you certainly

00:22:03.260 --> 00:22:08.000
don't want to decode
them more than once.

00:22:08.000 --> 00:22:10.400
Now every time you
draw, first, you

00:22:10.400 --> 00:22:12.500
need to check that
that data is active.

00:22:12.500 --> 00:22:14.420
And that's because
some complication data

00:22:14.420 --> 00:22:17.330
is only relevant within
a certain time frame.

00:22:17.330 --> 00:22:19.160
For example, if it's
for your next meeting,

00:22:19.160 --> 00:22:23.630
you don't want to show it
after the meeting is finished.

00:22:23.630 --> 00:22:26.270
And then to draw, well,
we draw the background.

00:22:26.270 --> 00:22:29.870
We draw the image,
and we draw the text--

00:22:29.870 --> 00:22:33.520
probably using TextRenderer.

00:22:33.520 --> 00:22:37.000
With ComplicationDrawable,
it's much simpler.

00:22:37.000 --> 00:22:39.490
When data arrives, you
pass it to the drawable

00:22:39.490 --> 00:22:42.650
by calling setComplicationData.

00:22:42.650 --> 00:22:45.370
And then on every frame,
you just call draw.

00:22:45.370 --> 00:22:47.860
It is a drawable.

00:22:47.860 --> 00:22:51.300
Now like TextRenderer,
and like other drawables,

00:22:51.300 --> 00:22:53.320
ComplicationDrawable
draws within bounds.

00:22:56.100 --> 00:22:59.230
And the layout adapts to
the shape of the bounds,

00:22:59.230 --> 00:23:01.600
so here you can see,
within square bounds,

00:23:01.600 --> 00:23:03.130
you get a circular complication.

00:23:03.130 --> 00:23:06.040
Whereas, the wider
bounds give a pill shape.

00:23:06.040 --> 00:23:08.500
And you can also see that
the position of the icon

00:23:08.500 --> 00:23:12.200
is different in the two cases.

00:23:12.200 --> 00:23:13.810
If you don't set any
style parameters,

00:23:13.810 --> 00:23:15.393
you'll get a default
look, but there's

00:23:15.393 --> 00:23:19.180
many things you can set, such
as the background color--

00:23:19.180 --> 00:23:22.060
the corner radius, if you'd
rather have something more

00:23:22.060 --> 00:23:25.100
like a square and a circle.

00:23:25.100 --> 00:23:28.030
You can change the border
or have no border at all.

00:23:28.030 --> 00:23:31.690
You can change the colors, and
you can change the typeface.

00:23:34.950 --> 00:23:36.600
You can create a
ComplicationDrawable

00:23:36.600 --> 00:23:41.040
programmatically with
a simple constructor.

00:23:41.040 --> 00:23:44.850
And then you can set the
styling options for active mode

00:23:44.850 --> 00:23:47.530
and for ambient mode.

00:23:47.530 --> 00:23:49.560
But if you have lots
of styling to set,

00:23:49.560 --> 00:23:52.620
you might find it easier
to use XML instead.

00:23:52.620 --> 00:23:57.186
You will need to be using
API Level 24 to do this.

00:23:57.186 --> 00:23:58.560
But as long as
you're doing that,

00:23:58.560 --> 00:24:03.660
now you can just inflate the
drawable in the standard way.

00:24:03.660 --> 00:24:05.600
Now we do need the
context to render.

00:24:05.600 --> 00:24:10.180
So you'll need to pass that into
us as well, into the drawable.

00:24:10.180 --> 00:24:11.730
And if you do that,
then you're XML

00:24:11.730 --> 00:24:14.350
might look something like this.

00:24:14.350 --> 00:24:16.590
So attributes at
the top level apply

00:24:16.590 --> 00:24:19.110
to both ambient
and active modes--

00:24:19.110 --> 00:24:21.940
unless they're overridden
in ambient mode

00:24:21.940 --> 00:24:23.730
by the attributes in
the ambient section.

00:24:27.031 --> 00:24:29.530
So there were a few things you
need to pass to the drawable.

00:24:29.530 --> 00:24:31.300
As I mentioned earlier,
you, of course,

00:24:31.300 --> 00:24:33.490
have to give it the
complication data.

00:24:33.490 --> 00:24:37.150
So in onComplicationDataupdate,
for your watch face, which

00:24:37.150 --> 00:24:38.920
is where you receive
the data, you just

00:24:38.920 --> 00:24:41.020
pass that data to the drawable.

00:24:43.600 --> 00:24:46.390
You also need to tell
the complication drawable

00:24:46.390 --> 00:24:48.676
when the device goes in
and out of ambient mode.

00:24:48.676 --> 00:24:50.300
And that's because
the drawable handles

00:24:50.300 --> 00:24:51.760
the change of styles for you.

00:24:51.760 --> 00:24:54.820
So all you need to do
is call setInAmbientMode

00:24:54.820 --> 00:24:57.880
every time it changes.

00:24:57.880 --> 00:24:59.680
And you also need
to tell the drawable

00:24:59.680 --> 00:25:02.330
if there are any special
properties of the screen.

00:25:02.330 --> 00:25:04.840
So if it uses
LOW_BIT_AMBIENT mode,

00:25:04.840 --> 00:25:07.210
or if it has BURN_IN_PROTECTION,
tell the drawable that,

00:25:07.210 --> 00:25:10.628
and it can adapt the rendering
for those properties.

00:25:14.380 --> 00:25:17.190
And then to draw, now
if it's the first time,

00:25:17.190 --> 00:25:20.010
or if something's changed, then
you'll need to set the bounds.

00:25:20.010 --> 00:25:23.730
So set the bounds, and
you just call setBounds

00:25:23.730 --> 00:25:26.460
on the complication drawable.

00:25:26.460 --> 00:25:28.380
Now the bounds that
you pass in here

00:25:28.380 --> 00:25:32.010
should be defined in proportion
to the watch face bounds.

00:25:32.010 --> 00:25:36.180
So you might say, position it
one-quarter of the screen width

00:25:36.180 --> 00:25:37.050
across.

00:25:37.050 --> 00:25:39.330
Don't use fixed
dimensions, and that's

00:25:39.330 --> 00:25:42.420
because watches vary
hugely in their size,

00:25:42.420 --> 00:25:47.010
so you don't want to be defining
things in an absolute way.

00:25:47.010 --> 00:25:50.100
Then you need--
you just call draw

00:25:50.100 --> 00:25:52.432
on the ComplicationDrawable.

00:25:52.432 --> 00:25:54.390
This method also takes
the time, and that so it

00:25:54.390 --> 00:25:56.110
can get the correct
up-to-date value.

00:26:00.879 --> 00:26:02.420
So that's it in
ComplicationDrawable,

00:26:02.420 --> 00:26:05.720
so that should really make it a
lot easier to add complication

00:26:05.720 --> 00:26:09.429
support to your watch faces.

00:26:09.429 --> 00:26:11.470
Now, ComplicationDrawable
is the biggest addition

00:26:11.470 --> 00:26:13.390
to wearable support.

00:26:13.390 --> 00:26:16.374
But the next two things
are available as samples,

00:26:16.374 --> 00:26:18.790
so that you can adapt them to
meet the needs of your watch

00:26:18.790 --> 00:26:20.050
face.

00:26:20.050 --> 00:26:22.450
The first is for settings.

00:26:22.450 --> 00:26:24.820
Any watch face
with complications

00:26:24.820 --> 00:26:26.780
should include a way
to configure them.

00:26:26.780 --> 00:26:30.610
And, usually, that's in
your watch face settings.

00:26:30.610 --> 00:26:34.180
But if you bury complications
deep in your settings' UI,

00:26:34.180 --> 00:26:35.890
it can be frustrating
for users who

00:26:35.890 --> 00:26:39.190
want to change things around.

00:26:39.190 --> 00:26:41.392
For the LG Watch
Style and support,

00:26:41.392 --> 00:26:42.850
we worked with our
partners, ustwo,

00:26:42.850 --> 00:26:45.160
to design a UI that
lets users have

00:26:45.160 --> 00:26:48.910
a visual interface for
setting up complications

00:26:48.910 --> 00:26:52.550
and also have quick
access to other settings.

00:26:52.550 --> 00:26:55.372
So here's how it's set up.

00:26:55.372 --> 00:26:57.080
At the top, we have
an image of the watch

00:26:57.080 --> 00:27:00.010
face with the complications
slots clearly shown.

00:27:00.010 --> 00:27:02.200
This lets users get
a good idea of where

00:27:02.200 --> 00:27:04.310
the data is going to appear.

00:27:04.310 --> 00:27:06.160
Provider icons show
what's currently

00:27:06.160 --> 00:27:08.680
selected in each slot.

00:27:08.680 --> 00:27:11.110
Below, if you
scroll down, you can

00:27:11.110 --> 00:27:13.874
see all of the other settings.

00:27:13.874 --> 00:27:15.790
Now a background image
here is a special case.

00:27:15.790 --> 00:27:17.500
Technically, it
is a complication

00:27:17.500 --> 00:27:19.810
using the large image type.

00:27:19.810 --> 00:27:22.150
But in studies, we found
users understand this better

00:27:22.150 --> 00:27:25.010
as a separate item.

00:27:25.010 --> 00:27:28.320
So this is what it looks like
on the portions watch face.

00:27:31.140 --> 00:27:34.925
And now let's see it in action.

00:27:34.925 --> 00:27:37.300
So you'll see the user can
just tap on one of those slots

00:27:37.300 --> 00:27:38.230
at the top.

00:27:38.230 --> 00:27:40.960
It opens the complication
provider chooser,

00:27:40.960 --> 00:27:44.320
and they can quickly choose
what they want in each slot.

00:27:44.320 --> 00:27:46.060
It's much easier
than having a list

00:27:46.060 --> 00:27:50.410
with left slot, right
slot, top slot, et cetera.

00:27:50.410 --> 00:27:52.690
If you'd like to try this
on a real watch face,

00:27:52.690 --> 00:27:55.720
download the ustwo looks
or Moods Collections

00:27:55.720 --> 00:27:58.210
on any watch running Wear 2.0.

00:27:58.210 --> 00:28:00.140
All of those watch
faces use this UI.

00:28:03.770 --> 00:28:06.530
Now, you'll find this what
UI implemented in the updated

00:28:06.530 --> 00:28:08.060
watch face sample.

00:28:08.060 --> 00:28:10.970
So check out AnalogComplicati
onWatchFaceService

00:28:10.970 --> 00:28:12.170
in the sample.

00:28:12.170 --> 00:28:14.120
This has been updated
for the new stuff

00:28:14.120 --> 00:28:16.190
that we're introducing
today, so it also

00:28:16.190 --> 00:28:17.810
uses ComplicationDrawable now.

00:28:20.420 --> 00:28:23.360
The config UI is
an AnalogComplicati

00:28:23.360 --> 00:28:25.000
onConfigActivity.

00:28:25.000 --> 00:28:26.750
And the items that
are shown in the UI

00:28:26.750 --> 00:28:28.791
are defined here in
AnalogComplicationConfigData.

00:28:28.791 --> 00:28:31.142
Complication

00:28:31.142 --> 00:28:32.725
Let's take a quick
look at that class.

00:28:36.230 --> 00:28:39.290
So in here, you'll
find this method

00:28:39.290 --> 00:28:41.420
gets data to populate adapter.

00:28:41.420 --> 00:28:44.010
And it returns a
list of config items.

00:28:44.010 --> 00:28:48.140
So those define what the entry
in that settings list are.

00:28:48.140 --> 00:28:51.230
So the top entry will probably
be the PreviewAndCompli

00:28:51.230 --> 00:28:52.250
cationConfigItem.

00:28:52.250 --> 00:28:55.880
That's the view of the
watch face with the slots.

00:28:55.880 --> 00:28:58.620
And then we might have
a Background option.

00:28:58.620 --> 00:29:02.270
We might have some more
options and then return.

00:29:02.270 --> 00:29:05.000
The actual sample has a
few more details than this.

00:29:08.349 --> 00:29:09.140
So that's settings.

00:29:11.790 --> 00:29:13.950
Now let's say you've
added complication support

00:29:13.950 --> 00:29:15.660
to your watch face.

00:29:15.660 --> 00:29:18.930
How can you check that
everything's working?

00:29:18.930 --> 00:29:20.580
For most complication
types, there

00:29:20.580 --> 00:29:23.850
are several combinations of
fields that you must handle.

00:29:23.850 --> 00:29:26.370
So, for example, if your
watch face supports short text

00:29:26.370 --> 00:29:29.730
complications, that might be in
the form of an icon with text,

00:29:29.730 --> 00:29:32.430
or it might be a text and
another piece of text,

00:29:32.430 --> 00:29:35.510
or just a single piece of text.

00:29:35.510 --> 00:29:37.860
The test suite provider
makes it easy to make sure

00:29:37.860 --> 00:29:40.560
that every combination looks
good on your watch face.

00:29:46.520 --> 00:29:48.030
So when you install
the test suite,

00:29:48.030 --> 00:29:51.430
it'll appear in the
list of data providers.

00:29:51.430 --> 00:29:53.620
And when you pick it,
you'll be able to choose

00:29:53.620 --> 00:29:55.540
which complication
type you want to test.

00:29:55.540 --> 00:29:59.780
So let's say we
choose short text.

00:29:59.780 --> 00:30:02.190
Here's how it might
appear on the watch face.

00:30:02.190 --> 00:30:04.730
And then all you have to
do is tap the complication,

00:30:04.730 --> 00:30:09.030
and it will cycle through
the different combinations.

00:30:09.030 --> 00:30:11.929
So all of these are
short text complications.

00:30:11.929 --> 00:30:13.720
And if your watch face
supports short text,

00:30:13.720 --> 00:30:16.169
it has to render all
of these correctly.

00:30:20.570 --> 00:30:22.629
This is a long-text
example, and for long text,

00:30:22.629 --> 00:30:23.920
there's even more combinations.

00:30:23.920 --> 00:30:26.010
So it's really useful
to give this a go

00:30:26.010 --> 00:30:27.810
and check that everything
works properly.

00:30:27.810 --> 00:30:32.310
You can have icons with text
and title, just text and title,

00:30:32.310 --> 00:30:33.540
or images as well.

00:30:37.410 --> 00:30:41.140
We're releasing the test suite
provider open source on GitHub,

00:30:41.140 --> 00:30:42.560
so that you can
see how it works,

00:30:42.560 --> 00:30:46.870
and so that you can add your
own test cases, if you want.

00:30:46.870 --> 00:30:50.110
If you're building a data
provider and not a watch face,

00:30:50.110 --> 00:30:52.240
I suggest you also
take a look at this

00:30:52.240 --> 00:30:54.550
because it's a good example
of a provider for each

00:30:54.550 --> 00:30:56.110
of the different
complication types.

00:31:01.339 --> 00:31:01.880
So that's it.

00:31:01.880 --> 00:31:03.350
So these four tools
should make it

00:31:03.350 --> 00:31:07.760
a lot simpler and easier to add
complication support to a watch

00:31:07.760 --> 00:31:08.690
face.

00:31:08.690 --> 00:31:09.970
Please do give them a go.

00:31:09.970 --> 00:31:12.490
There are code labs to
try out here at I/O,

00:31:12.490 --> 00:31:14.780
or you can check out the
samples on the dev site

00:31:14.780 --> 00:31:16.370
or through Android Studio.

00:31:16.370 --> 00:31:19.280
Or you can start using the new
version of wearable support,

00:31:19.280 --> 00:31:22.170
and try it out on your
own watch face right away.

00:31:22.170 --> 00:31:24.110
And please do let us
know what you think.

00:31:27.068 --> 00:31:28.547
[APPLAUSE]

00:31:33.970 --> 00:31:37.280
So this is just one last slide
that sums up our presence--

00:31:37.280 --> 00:31:41.330
Android Wear Presence
at Google I/O 2017.

00:31:41.330 --> 00:31:45.460
If you haven't seen the talk
of yesterday at 9:30 AM,

00:31:45.460 --> 00:31:46.400
it is recorded.

00:31:46.400 --> 00:31:49.520
It was a general overview
of how the platform is doing

00:31:49.520 --> 00:31:53.790
and what's new in the
platform this year.

00:31:53.790 --> 00:31:55.850
And today's talk
is also recorded,

00:31:55.850 --> 00:31:58.790
so you can come back to
it after I/O is done.

00:31:58.790 --> 00:32:00.850
Thank you very much.

