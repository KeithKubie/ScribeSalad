WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.860
In the last video, if I remember

00:00:01.860 --> 00:00:04.467
correctly 'cause it was a good month ago now.

00:00:04.467 --> 00:00:06.080
I drew a graph out and we

00:00:06.080 --> 00:00:09.180
worked through it with Dijkstra, and at the end

00:00:09.180 --> 00:00:10.200
I pointed out a couple of problems.

00:00:10.200 --> 00:00:11.309
So let's just remind ourselves about

00:00:11.309 --> 00:00:13.920
those problems and then when we'll talk about A star

00:00:13.920 --> 00:00:17.089
we can see how it addresses it.

00:00:17.160 --> 00:00:19.289
The problem is with Dijkstra that it will follow

00:00:19.289 --> 00:00:22.230
the path currently shortest and that -- and

00:00:22.230 --> 00:00:23.490
doesn't pay any attention to what

00:00:23.490 --> 00:00:24.359
direction it's going.

00:00:24.359 --> 00:00:26.220
So if i'm coming down here to my end goal,

00:00:26.220 --> 00:00:29.099
and I'm starting up here, that's fine if

00:00:29.099 --> 00:00:30.269
the weights are all the same because it will

00:00:30.269 --> 00:00:31.650
look at it up here and there, but I'll

00:00:31.650 --> 00:00:32.669
get there quite quick.

00:00:32.669 --> 00:00:33.630
The problem is of course if you've got

00:00:33.630 --> 00:00:35.640
the map of the UK and it's searching quickly

00:00:35.640 --> 00:00:38.040
down all nice motorways when in

00:00:38.040 --> 00:00:39.600
fact actually we don't need to go down

00:00:39.600 --> 00:00:41.730
the motorways because it's a country road drive

00:00:41.730 --> 00:00:43.170
or something like this. Now, course in

00:00:43.170 --> 00:00:44.820
practice, it wouldn't take very long

00:00:44.820 --> 00:00:47.190
still because your computer is quite fast

00:00:47.190 --> 00:00:48.570
but the whole point of these algorithms

00:00:48.570 --> 00:00:50.610
is they're quick and you can imagine if you're

00:00:50.610 --> 00:00:52.770
writing a sat-nav, you don't want it to

00:00:52.770 --> 00:00:56.097
take a long time churning for the roads unnecessarily.

00:00:56.097 --> 00:00:57.329
The other problem is,

00:00:57.329 --> 00:01:00.120
if your graph doesn't look like a map because,

00:01:00.120 --> 00:01:02.190
you know, in some sense the UK road network

00:01:02.190 --> 00:01:04.040
isn't quite sparse but the most of the

00:01:04.049 --> 00:01:06.080
country doesn't have a road on it. It's

00:01:06.090 --> 00:01:08.520
mostly fields and sheep and stuff. But,

00:01:08.520 --> 00:01:11.250
you know, all houses. If you have a

00:01:11.250 --> 00:01:13.140
situation where you've got a quite a

00:01:13.140 --> 00:01:16.650
dense network like this, so I guess you

00:01:16.650 --> 00:01:19.103
could say a bit like Manhattan. But also just,

00:01:19.103 --> 00:01:20.970
you know, another problem where your

00:01:20.970 --> 00:01:22.200
graph structure is different. So if

00:01:22.200 --> 00:01:23.880
you're looking through an image or

00:01:23.880 --> 00:01:25.590
something like this. I'm starting up here

00:01:25.590 --> 00:01:28.049
and cross that out. There we are and I'm

00:01:28.049 --> 00:01:29.100
finishing down,

00:01:29.100 --> 00:01:31.229
I don't know... here. Let's remember that

00:01:31.229 --> 00:01:33.360
Dijkstra follows the shortest path based

00:01:33.360 --> 00:01:35.700
on the distance of each of these. Now, if

00:01:35.700 --> 00:01:37.710
it is just a uniform grid, let's

00:01:37.710 --> 00:01:39.150
say, we have no interesting information

00:01:39.150 --> 00:01:41.490
to provide for these weights and all

00:01:41.490 --> 00:01:43.470
these weights say one so it's just

00:01:43.470 --> 00:01:45.220
gonna to flood fill from here. It's gonna

00:01:45.220 --> 00:01:46.799
go here, and then here and then to

00:01:46.799 --> 00:01:50.009
these three and then to these four, and so on and

00:01:50.009 --> 00:01:52.229
that's not very optimal. Especially

00:01:52.229 --> 00:01:53.549
if we just literally want to go

00:01:53.549 --> 00:01:55.409
straight down here, like this. So we want to

00:01:55.409 --> 00:01:58.700
build in some kind of idea of, but not

00:01:58.700 --> 00:02:00.240
necessarily the direction we're heading but we are

00:02:00.240 --> 00:02:02.580
at least going towards our goal, so we can

00:02:02.580 --> 00:02:05.100
aim for it. And that's what A star does.

00:02:05.100 --> 00:02:07.110
A star is basically a small extension to

00:02:07.110 --> 00:02:09.270
Dijkstra that builds in a heuristic that

00:02:09.270 --> 00:02:11.039
says we're getting a bit closer.

00:02:11.039 --> 00:02:13.620
This is our nice screwed up graph from last time

00:02:13.620 --> 00:02:15.510
and this is our nice new fresh graph

00:02:15.510 --> 00:02:18.090
that I've done which is, topologically exactly

00:02:18.090 --> 00:02:20.700
the same. I may have traced it. So, we

00:02:20.700 --> 00:02:21.720
could do Dijkstra on this.

00:02:21.720 --> 00:02:25.000
I've got my little cards for my priority queue.

00:02:25.000 --> 00:02:27.780
I've reminded myself how the end condition is

00:02:27.780 --> 00:02:29.780
so I can end it properly.

00:02:30.480 --> 00:02:32.660
That's all fine. What we want to do is extend this

00:02:32.670 --> 00:02:36.329
to A star. Now, A star is basically exactly the

00:02:36.329 --> 00:02:38.099
same as Dijkstra, except it has an

00:02:38.140 --> 00:02:40.100
additional heuristic that is how far do

00:02:40.200 --> 00:02:45.140
we have to go. And, in this case,

00:02:45.200 --> 00:02:46.230
a pretty reasonable heuristic to come up with

00:02:46.230 --> 00:02:48.450
will be literal Euclidean distance

00:02:48.450 --> 00:02:49.950
of how far we have to go. So, in this case

00:02:49.950 --> 00:02:52.900
S to E will be that far, C to E will be that far.

00:02:52.900 --> 00:02:55.230
And so on. I couldn't think of a good way of

00:02:55.230 --> 00:02:56.540
calculating this without literally just

00:02:56.549 --> 00:02:58.799
measuring it. So I got my, got my...

00:02:58.799 --> 00:03:04.140
dainty 10 meter tape measure,

00:03:04.140 --> 00:03:05.909
which is a little bit overkill. But we'll,

00:03:05.909 --> 00:03:11.040
you know, make it work. So this is all a bit odd.

00:03:11.040 --> 00:03:13.200
I don't use tape measures as much as you can

00:03:13.200 --> 00:03:14.519
imagine 'cause I mostly sit at a desk

00:03:14.519 --> 00:03:16.620
and do typing. This is a tape measure in

00:03:16.620 --> 00:03:18.870
centimeters and inches. Let's use inches today.

00:03:18.870 --> 00:03:19.919
Alright.

00:03:19.919 --> 00:03:22.650
Imperial, woo. So I'm gonna literally

00:03:22.650 --> 00:03:24.840
measure the amount of inches from S to E,

00:03:24.840 --> 00:03:26.910
and then A to E, and then I'm just gonna put

00:03:26.910 --> 00:03:28.260
this on here now. And this is where

00:03:28.260 --> 00:03:30.120
you fast forward. So, I'm gonna use it,

00:03:30.120 --> 00:03:32.970
the black pen for this. So let's say this is 10.

00:03:32.970 --> 00:03:37.680
There. This is harder than I thought it would be.

00:03:37.680 --> 00:03:38.880
I haven't got enough hands.

00:03:38.880 --> 00:03:41.280
8... 6... I'm rounding up a bit

00:03:41.280 --> 00:03:44.250
it's not very accurate. 4... So the green

00:03:44.250 --> 00:03:46.169
ones are our step distances from Dijkstra and the

00:03:46.169 --> 00:03:48.920
black ones are measured inches.

00:03:48.920 --> 00:03:54.500
Also 3, 6, 7. We're getting there. 6 again.

00:03:54.500 --> 00:03:58.020
Alright. That's me doing my workman's... Now:

00:03:58.020 --> 00:03:59.960
we've got exactly the same graph as before but now we

00:03:59.970 --> 00:04:02.129
have some measure of the distance to our thing.

00:04:02.129 --> 00:04:04.530
It's not a very good heuristic in

00:04:04.530 --> 00:04:06.269
a sense that my measuring is not very

00:04:06.269 --> 00:04:08.760
accurate and for A star to work really

00:04:08.760 --> 00:04:10.349
well, you have to have a consistent

00:04:10.349 --> 00:04:13.019
metric and you have to, not

00:04:13.019 --> 00:04:14.519
overestimate how far you've got to go.

00:04:14.519 --> 00:04:16.829
Things like this... But, we'll just

00:04:16.829 --> 00:04:19.660
hope it works, sort of work itself out....

00:04:19.660 --> 00:04:22.400
You know, it can't be any worse than me

00:04:22.409 --> 00:04:24.750
you know, doing it by hand anyway. So, recall

00:04:24.750 --> 00:04:27.030
when we did Dijkstra. What we had was we had

00:04:27.030 --> 00:04:29.790
some queue here like this. These had the current

00:04:29.790 --> 00:04:32.190
distance from the start to these nodes.

00:04:32.190 --> 00:04:33.690
And if one of the nodes had a

00:04:33.690 --> 00:04:35.880
shorter path, it would move up the queue and

00:04:35.880 --> 00:04:37.830
then when we wanted to expand a node we take it

00:04:37.830 --> 00:04:39.660
off the queue. A star works exactly the

00:04:39.660 --> 00:04:42.330
same way, except the distance isn't what

00:04:42.330 --> 00:04:44.250
we ordered them by anymore. It's a

00:04:44.250 --> 00:04:46.260
distance of the path plus how far they

00:04:46.260 --> 00:04:47.310
have to go.

00:04:47.310 --> 00:04:50.340
so for example. B, the distance is

00:04:50.340 --> 00:04:53.250
going to be 2 plus 7 which is 9. Alright.

00:04:53.250 --> 00:04:55.080
So B will have a value of 9 on this queue.

00:04:55.080 --> 00:04:57.540
And the idea is that if something has a

00:04:57.540 --> 00:04:58.950
long way to go,

00:04:58.950 --> 00:05:00.480
it's going to receive a higher weight

00:05:00.480 --> 00:05:01.800
and be further down the queue and

00:05:01.800 --> 00:05:03.570
expanded later. What it will do is

00:05:03.570 --> 00:05:06.720
prioritize nodes, that are going roughly

00:05:06.720 --> 00:05:09.210
in the right direction, unless... I mean it will

00:05:09.210 --> 00:05:10.919
still go down really good paths, really

00:05:10.919 --> 00:05:13.650
short paths. But not at the expense of

00:05:13.650 --> 00:05:15.480
everything else, it's the idea.

00:05:15.480 --> 00:05:17.100
OK, so let's run through this just like we did

00:05:17.100 --> 00:05:18.690
with Dijkstra and hopefully I won't make

00:05:18.690 --> 00:05:21.360
any mistakes. People will very kindly

00:05:21.360 --> 00:05:23.669
point them out if I do. Oh look, look. Checkered flag.

00:05:23.669 --> 00:05:25.680
This is why I don't draw things, because

00:05:25.680 --> 00:05:27.330
it's not it's never good... Right,

00:05:27.330 --> 00:05:29.850
okay, we're starting at S. I'm not going to

00:05:29.850 --> 00:05:31.380
draw the infinity symbols on because we

00:05:31.380 --> 00:05:33.540
know that all of these nodes start with

00:05:33.540 --> 00:05:35.280
a distance of infinity because we

00:05:35.280 --> 00:05:37.680
don't know how far the path is. In Dijkstra,

00:05:37.680 --> 00:05:40.440
we store the distance to each path, and

00:05:40.440 --> 00:05:42.150
we also ordered by that distance. We've

00:05:42.150 --> 00:05:43.590
now got two separate measures we're

00:05:43.590 --> 00:05:45.390
measuring in A star: one is the distance

00:05:45.390 --> 00:05:47.610
to the node, and one is the distance to

00:05:47.610 --> 00:05:50.400
a node and any remaining distance. So, we

00:05:50.400 --> 00:05:51.780
kind of need to have two values on each

00:05:51.780 --> 00:05:53.340
of these things. So I'm going to try and

00:05:53.340 --> 00:05:54.750
keep the colors the same so that we

00:05:54.750 --> 00:05:55.680
don't lose track.

00:05:55.680 --> 00:05:57.000
So anything I draw in green is

00:05:57.000 --> 00:05:59.310
going to be this 'g' cost function which

00:05:59.310 --> 00:06:01.680
is the distance to a current node,

00:06:01.680 --> 00:06:03.120
so for C that would be 3.

00:06:03.120 --> 00:06:05.400
And then, in black I'm going to have 3

00:06:05.400 --> 00:06:07.410
plus 8 which is the sort of combined

00:06:07.410 --> 00:06:09.000
cost; the thing we're actually ordering by.

00:06:09.000 --> 00:06:13.200
OK, so the path cost to S is 0 and the sort

00:06:13.200 --> 00:06:15.120
of distance to go is 10, but it won't

00:06:15.120 --> 00:06:16.440
matter because S is the only thing in

00:06:16.440 --> 00:06:18.720
our queue. So we'll put S in the queue but everything

00:06:18.720 --> 00:06:20.430
else have a distance to infinity. So

00:06:20.430 --> 00:06:22.289
let's start expanding some stuff. So A

00:06:22.289 --> 00:06:25.950
first. A has... I gotta find A mate. Fast forward.

00:06:25.950 --> 00:06:27.330
Oh here we are.

00:06:27.330 --> 00:06:28.720
Why aren't these in alphabetical order?

00:06:28.720 --> 00:06:30.620
I mean, you know... What was I thinking?

00:06:30.620 --> 00:06:35.340
Right, so A has a distance of 7 and a combined

00:06:35.340 --> 00:06:38.190
distance of 9 plus 7 which is 16. The

00:06:38.190 --> 00:06:42.240
same for B. Same B, B, B... Again B.

00:06:42.240 --> 00:06:43.229
I mean it's actually at the end.

00:06:43.229 --> 00:06:45.330
Unbelievable. So I'm gonna

00:06:45.330 --> 00:06:46.710
keep seeing it at the top now 'cause I know

00:06:46.710 --> 00:06:47.520
that's coming.

00:06:47.520 --> 00:06:50.580
OK, so B has a weight of 2 and a

00:06:50.580 --> 00:06:54.090
combined cost of 7 plus 2, which is 9.

00:06:54.090 --> 00:06:56.669
So, I'm gonna put that in there. Now, B goes in

00:06:56.669 --> 00:06:58.680
the queue and goes ahead of A, because

00:06:58.680 --> 00:07:00.960
9 is smaller than 16, right. We're

00:07:00.960 --> 00:07:02.940
keeping a track of these green distances.

00:07:02.940 --> 00:07:04.820
We're not actually using them to see which one

00:07:04.820 --> 00:07:07.620
comes next. And then C. C has a path

00:07:07.620 --> 00:07:09.750
cost of 3 and then a combined weight

00:07:09.750 --> 00:07:12.780
of 11. 8 plus 3. And then that goes in

00:07:12.780 --> 00:07:14.700
just above A like this, right. So

00:07:14.700 --> 00:07:16.800
actually, so far, pretty similar to Dijkstra,

00:07:16.800 --> 00:07:19.050
apart all the numbers are changed. So what's next.

00:07:19.050 --> 00:07:21.270
We start expanding B. I haven't been

00:07:21.270 --> 00:07:24.210
keeping track of the previous node so

00:07:24.210 --> 00:07:26.310
all of these currently there's the storm

00:07:26.310 --> 00:07:29.540
in red all are going through S

00:07:29.540 --> 00:07:30.659
at the moment.

00:07:30.659 --> 00:07:34.020
OK, so B next. We can go to A. A has a

00:07:34.020 --> 00:07:35.789
distance of seven when we deciding

00:07:35.789 --> 00:07:38.430
whether the path to A better via B

00:07:38.430 --> 00:07:39.930
we don't care about this heuristic,

00:07:39.930 --> 00:07:41.640
we only care about the actual cost of it,

00:07:41.640 --> 00:07:45.750
the path to A, so in this case 2 + 3 is

00:07:45.750 --> 00:07:47.430
less than 7 just like with Dijkstra

00:07:47.430 --> 00:07:50.729
we're going to replace it so A, its new weight

00:07:50.729 --> 00:07:53.550
is going to be 5, and 16 is going to

00:07:53.550 --> 00:07:57.210
be 5 + 9, so 14, right? And this now,

00:07:57.210 --> 00:08:00.120
this path is going through B, not..

00:08:00.120 --> 00:08:02.280
Do you think I can turn this into a B?

00:08:02.280 --> 00:08:04.200
Oh yes, there we go, look at that.

00:08:04.200 --> 00:08:06.580
So it stays below C, it's not a big deal.

00:08:06.600 --> 00:08:10.260
OK, D... Let's find in my shuffled list.

00:08:10.260 --> 00:08:11.840
If you're implement this, don't shuffle it because

00:08:11.849 --> 00:08:13.440
it'll be a lot harder to find in memory

00:08:13.440 --> 00:08:16.560
Right, there we are. B has a path length of 2

00:08:16.560 --> 00:08:19.820
D has a path length of 4, so that's a path length of 6

00:08:19.820 --> 00:08:23.159
and D has got a distance of 8 to the end so

00:08:23.159 --> 00:08:25.800
actually you can see here that D is

00:08:25.800 --> 00:08:27.599
traveling forward in this direction, but is actually

00:08:27.599 --> 00:08:29.400
getting further away than B so these

00:08:29.400 --> 00:08:30.960
going to be quite heavily penalized

00:08:30.960 --> 00:08:32.940
that's our hope so D is not going to be

00:08:32.940 --> 00:08:34.409
expanded for a while we're going to look

00:08:34.409 --> 00:08:36.599
there until it's a last resort

00:08:36.600 --> 00:08:40.940
So 8 + 4 is 12, and that path goes through...

00:08:40.940 --> 00:08:43.220
You know what, I'm just gonna leave the lids off.

00:08:43.220 --> 00:08:45.600
And that goes through B. So put that in.

00:08:45.600 --> 00:08:48.040
And that goes above A because A is a terrible one,

00:08:48.040 --> 00:08:49.320
remember there's a fallen tree on that one,

00:08:49.320 --> 00:08:51.480
but it still could be back and then

00:08:51.480 --> 00:08:54.120
finally H. Now, H has a path length of 1 which is

00:08:54.120 --> 00:08:57.180
nice and quick, B has a path length of 2 so

00:08:57.180 --> 00:08:59.580
the total path cost is 3 and the

00:08:59.580 --> 00:09:02.399
actual heuristic cost is 3 plus 6 which

00:09:02.399 --> 00:09:04.440
is 9, that's 9 in here, 9 is looking

00:09:04.440 --> 00:09:05.640
pretty good right now.

00:09:05.640 --> 00:09:07.170
Now H goes straight above everything

00:09:07.170 --> 00:09:08.680
like this, right?

00:09:08.680 --> 00:09:10.580
B is about to pop out so that's good.

00:09:10.580 --> 00:09:13.480
So B is finished, and we put B on our finished pack.

00:09:13.480 --> 00:09:17.180
Huh, finished stack... Finished list?

00:09:17.180 --> 00:09:18.420
Finished data structure over here.

00:09:18.420 --> 00:09:20.420
Next up is H, right? Now,

00:09:20.430 --> 00:09:21.899
last time we didn't expand H next,

00:09:21.899 --> 00:09:24.810
we expanded C next in Dijkstra because

00:09:24.810 --> 00:09:26.279
they had the same rough paths cost which

00:09:26.279 --> 00:09:28.560
is 3 and C was already in the list so

00:09:28.560 --> 00:09:30.209
now we already started to move a little bit

00:09:30.209 --> 00:09:32.130
faster with A star which is good because

00:09:32.130 --> 00:09:35.399
it means my example is working so H comes off

00:09:35.399 --> 00:09:37.140
and let's see where we can go

00:09:37.140 --> 00:09:39.420
we could go to F, so that's easy, I'll find F

00:09:39.420 --> 00:09:41.910
F has a past of 3 + 3

00:09:41.910 --> 00:09:44.070
which is 6 and it has a distance to go

00:09:44.070 --> 00:09:46.529
of 6, so that's a total heuristic cost of 12

00:09:46.529 --> 00:09:50.279
and it's going through H. Right, this goes in

00:09:50.279 --> 00:09:52.860
and it will come in behind D here with a

00:09:52.860 --> 00:09:55.440
path cost also of 12, right, in general

00:09:55.440 --> 00:09:57.140
if there's a conflict will just put the first on in

00:09:57.149 --> 00:09:58.740
you know, depends on your implementation

00:09:58.740 --> 00:10:02.130
G has a path cost of 3 from H plus another

00:10:02.130 --> 00:10:05.320
2 so that's 5 and then plus another 3 is 8.

00:10:05.320 --> 00:10:06.620
Ok, we're done with H

00:10:06.630 --> 00:10:09.300
G goes in right to the top which is good

00:10:09.300 --> 00:10:11.399
news for us, for our nice elegant search.

00:10:11.399 --> 00:10:14.250
So we're going to expand G, so where's E?

00:10:14.250 --> 00:10:15.600
But I'm not gonna go off half-cocked this time

00:10:15.600 --> 00:10:17.579
and finish my algorithm here. G has a path

00:10:17.579 --> 00:10:21.089
length of 5 and so E has a path length

00:10:21.089 --> 00:10:22.440
of 7

00:10:22.440 --> 00:10:24.060
see now I've drawn this checkered flag and

00:10:24.060 --> 00:10:25.560
it's in the way of my numbers, thanks for

00:10:25.560 --> 00:10:28.380
the suggestion there. Right, E has a

00:10:28.380 --> 00:10:30.480
heuristic cost of zero because we're at

00:10:30.480 --> 00:10:33.630
the goal so actually 7 is the final

00:10:33.630 --> 00:10:35.459
value that we get given here and this

00:10:35.459 --> 00:10:37.980
goes through G and we're going to

00:10:37.980 --> 00:10:40.230
put E in, so E goes in here

00:10:40.230 --> 00:10:41.900
G is not really on the stack anymore.

00:10:41.900 --> 00:10:43.440
G can't expand anywhere else, we've already

00:10:43.440 --> 00:10:46.020
been to H and so the next iteration of the

00:10:46.020 --> 00:10:48.959
algorithm starts, right? We popping off the

00:10:48.959 --> 00:10:49.740
top

00:10:49.740 --> 00:10:51.180
we're about to expand it and we realize

00:10:51.180 --> 00:10:52.980
that's where we're going and we finished

00:10:52.980 --> 00:10:53.880
our algorithm

00:10:53.880 --> 00:10:56.550
ok so then just like before we trace

00:10:56.550 --> 00:10:58.709
back through so E goes to G and then...

00:10:58.709 --> 00:11:01.290
Where's my G? There it is. And G goes to H,

00:11:01.290 --> 00:11:02.670
and then H goes to B,

00:11:02.670 --> 00:11:05.700
and B goes to S, and S is the start, alright?

00:11:05.700 --> 00:11:08.220
So we've got our path, S-B-H-G-E

00:11:08.220 --> 00:11:10.380
Now in this case it's exactly the same path

00:11:10.380 --> 00:11:12.320
as Dijkstra because

00:11:12.320 --> 00:11:15.180
I picked a fairly reasonable heuristic, right?

00:11:15.180 --> 00:11:17.220
Plus or minus a bit of my dodgy measuring

00:11:18.180 --> 00:11:20.300
But you can see we didn't bother to expand

00:11:20.310 --> 00:11:24.000
C or L or even consider I and J many fewer

00:11:24.000 --> 00:11:25.860
nodes got put in the stack...In both terms

00:11:25.860 --> 00:11:27.690
of the amount of computation we did and

00:11:27.690 --> 00:11:30.180
the memory footprint was reduced and we

00:11:30.180 --> 00:11:31.820
still obtained the same result.

00:11:31.820 --> 00:11:33.920
So there were one or two comments on the last

00:11:33.930 --> 00:11:36.060
video about not expanding those but

00:11:36.060 --> 00:11:37.380
you're saying that on A star you

00:11:37.380 --> 00:11:39.300
definitely don't have to expand those,

00:11:39.300 --> 00:11:40.680
No. The comments on the video were

00:11:40.680 --> 00:11:42.420
because basically I forgot to wait

00:11:42.420 --> 00:11:44.340
until E was expanded to finish, I got

00:11:44.340 --> 00:11:46.800
overexcited and as soon as I saw E,

00:11:46.800 --> 00:11:48.510
I declared it over when we went and got

00:11:48.510 --> 00:11:51.120
coffee and yeah and that's not right

00:11:51.120 --> 00:11:53.040
because technically speaking there could

00:11:53.040 --> 00:11:54.660
have been a path from say, F to E, that

00:11:54.660 --> 00:11:56.790
was super-sneaky and really quick, right?

00:11:56.790 --> 00:11:58.410
I'm sorry, super-sneaky is not a technical

00:11:58.410 --> 00:12:00.270
term you see in the literature, and if

00:12:00.270 --> 00:12:01.920
that had happened we have to wait until

00:12:01.920 --> 00:12:03.810
E bubbles to the top of our priority

00:12:03.810 --> 00:12:05.880
queue to be able to know for sure that we've got

00:12:05.880 --> 00:12:07.830
the shortest path. In this case it was

00:12:07.830 --> 00:12:09.240
very straightforward, E went straight to

00:12:09.240 --> 00:12:11.640
the top, but you can never guarantee and a

00:12:11.640 --> 00:12:12.780
different graph will have a different

00:12:12.780 --> 00:12:13.890
thing

00:12:13.890 --> 00:12:15.870
so the actual stopping criterion for

00:12:15.870 --> 00:12:18.660
both Dijkstra and A star is when your goal

00:12:18.660 --> 00:12:20.430
node gets to the top of your priority queue.

00:12:20.430 --> 00:12:23.400
But yeah that was good that people pointed that out

00:12:23.400 --> 00:12:24.750
because it completed the video with a

00:12:24.750 --> 00:12:26.370
bit of extra comments. To wrap up you can

00:12:26.370 --> 00:12:27.990
imagine now that we've seen a video on

00:12:27.990 --> 00:12:30.330
how that works in terms of GPS positions

00:12:30.330 --> 00:12:31.950
and we've seen a couple of videos on

00:12:31.950 --> 00:12:34.380
pathfinding and there's lots of videos on data

00:12:34.380 --> 00:12:36.510
structures in this you can imagine now

00:12:36.510 --> 00:12:39.090
that you might start to think i can

00:12:39.090 --> 00:12:40.860
actually not see how that might be

00:12:40.860 --> 00:12:42.210
implemented I could see you know the

00:12:42.210 --> 00:12:43.680
parts of the system that have to work together

00:12:43.680 --> 00:12:45.540
we've got a map that stored in the

00:12:45.540 --> 00:12:46.410
memory

00:12:46.410 --> 00:12:47.790
we've got nodes that we're trying to get

00:12:47.790 --> 00:12:49.470
to and from, that we've got an algorithm

00:12:49.470 --> 00:12:51.000
that will find a way through

00:12:51.000 --> 00:12:54.960
Now, you can imagine also that it's

00:12:54.960 --> 00:12:56.940
unrealistic to expect a small sat-nav

00:12:56.940 --> 00:12:59.010
to completely compute its way through the

00:12:59.010 --> 00:13:00.870
UK but if you saw "I what the best path

00:13:00.870 --> 00:13:02.760
from Land's End to John O'Groats" you

00:13:02.760 --> 00:13:04.620
might melt your sat-nav unless you do

00:13:04.620 --> 00:13:06.450
something a little bit smarter so you

00:13:06.450 --> 00:13:07.830
can imagine they might precompute some

00:13:07.830 --> 00:13:09.240
of these things but they know the

00:13:09.240 --> 00:13:11.040
shortest way of getting from Nottingham

00:13:11.040 --> 00:13:12.600
into London is via the M1 or

00:13:12.600 --> 00:13:13.139
something like this

00:13:13.139 --> 00:13:15.689
to sort of hard code some of it in some sense

00:13:15.689 --> 00:13:16.799
to be honest

00:13:16.799 --> 00:13:18.480
I don't work for a sat-nav company, I don't

00:13:18.480 --> 00:13:19.619
know what their proprietary algorithms

00:13:19.619 --> 00:13:21.749
are, but you can see this is the kind of

00:13:21.749 --> 00:13:23.399
thing we're doing we're trying to find a

00:13:23.399 --> 00:13:24.959
nice elegant way of getting from A to B

00:13:24.959 --> 00:13:27.059
and there's lots of pathfinding algorithms

00:13:27.059 --> 00:13:28.859
and you could come up with lots of

00:13:28.860 --> 00:13:31.100
interesting heuristics, not just euclidean distance

00:13:33.380 --> 00:13:34.859
Also of course they're going to

00:13:34.859 --> 00:13:36.749
have a GPS to measure up in your dating

00:13:36.749 --> 00:13:39.089
that I mean yet although i would say VPS

00:13:39.089 --> 00:13:40.799
often has an accuracy of possibles few

00:13:40.799 --> 00:13:42.779
meters so it was shoddy measuring tape

00:13:42.779 --> 00:13:44.699
is actually pinpoint precision compared

00:13:44.699 --> 00:13:47.279
to that still have maps are carefully

00:13:47.279 --> 00:13:49.019
crafted would be exact known positions

00:13:49.019 --> 00:13:50.609
of all these junctions and they know how

00:13:50.609 --> 00:13:51.929
long it takes to travel out the

00:13:51.929 --> 00:13:53.249
roundabout and they know how long it

00:13:53.249 --> 00:13:55.259
takes because of traffic and think about

00:13:55.259 --> 00:13:56.489
this they're going to be doing a lot

00:13:56.489 --> 00:13:59.759
smarter or albums and i'm doing but this

00:13:59.759 --> 00:14:01.350
is a start and you can see you could

00:14:01.350 --> 00:14:04.850
build this up into a really good system

