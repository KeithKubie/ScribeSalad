WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.670
&gt;&gt; FRYZEL: Welcome to Boot Camp. And I hope
you're having a very good time here. My name

00:00:08.670 --> 00:00:15.530
is Vic. I'm an engineer on Google Docs. I'm
going to give a talk today about how to store

00:00:15.530 --> 00:00:20.390
all of your data in Google's Cloud. So if
you have any questions or anything, we're

00:00:20.390 --> 00:00:25.349
going to have a question-and-answer session
at the end of the talk. But if you, you know,

00:00:25.349 --> 00:00:30.089
just don't think of your question now or whatever,
you can hit me up on Twitter or Buzz. There's

00:00:30.089 --> 00:00:39.190
my Twitter name right there. So, let's get
started. This is my SpeakerMeter tag. If you

00:00:39.190 --> 00:00:45.440
want to scan this now and browse that URL,
and--you can rate me as I speak or whatever.

00:00:45.440 --> 00:00:51.370
And I'll get some indication as to how great
my speaking abilities are or how much they

00:00:51.370 --> 00:01:02.810
suck. So--oh, let me go back. I saw some people
scanning it. Okay. So to start off, we all

00:01:02.810 --> 00:01:08.140
know that there's a lot of cloud services
nowadays that offer the ability to store data.

00:01:08.140 --> 00:01:13.040
This is nothing new. This has been around
for quite a long time. I mean, if you think

00:01:13.040 --> 00:01:18.829
back to it, the first cloud storage really
existed in maybe the late '80s or early '90s

00:01:18.829 --> 00:01:24.971
where you had the--this idea of a mainframe;
and you could upload data there via some means

00:01:24.971 --> 00:01:29.759
and then consume it in some other means. But
usually, there is this idea that you uploaded

00:01:29.759 --> 00:01:36.240
data to be processed. And when you uploaded
data to be processed, you did it because the

00:01:36.240 --> 00:01:40.119
terminals with which you were uploading this
data or submitting this data were actually

00:01:40.119 --> 00:01:49.069
weak in terms of power and the power is concentrated
into the mainframe. So, this--or this idea

00:01:49.069 --> 00:01:54.689
is sort of recurring today. So, developers
need the ability to do more than just store

00:01:54.689 --> 00:02:00.140
the data; they actually need the ability to
process large amounts of data in a, you know,

00:02:00.140 --> 00:02:04.189
short amount of time. So, we're starting to
move back to this idea of putting data in

00:02:04.189 --> 00:02:09.310
the cloud, and then having thousands of computers
act on it, and then giving you setbacks and

00:02:09.310 --> 00:02:15.160
meaningful result. Users also have more needs
of this data. So, they need to be able to

00:02:15.160 --> 00:02:18.820
be access and manipulate the data from pretty
much anywhere, so--in lots of different ways.

00:02:18.820 --> 00:02:27.720
I mean, a majority of data is actually documents;
things that users add-on on a regular basis,

00:02:27.720 --> 00:02:30.490
especially in an enterprise environment, right?
So--I mean, in an enterprise environment,

00:02:30.490 --> 00:02:36.200
you have docs, calendars, things like that,
that people use every single day. In a consumer

00:02:36.200 --> 00:02:41.320
setting, there's actually a lot of these as
well. People manage their photos, their contacts,

00:02:41.320 --> 00:02:46.350
other personal information; and they store
all of these data traditionally nowadays in

00:02:46.350 --> 00:02:52.980
the cloud. But if we take a look at everything
that somebody's doing there's a large portion

00:02:52.980 --> 00:03:00.930
of it being done in documents. So, let's compare
options for storing cloud data. Firstly, we

00:03:00.930 --> 00:03:05.820
have offline doc--documents, and this is--this
is pretty basic concept, right? I'm pretty

00:03:05.820 --> 00:03:12.650
sure that I remember, like two decades ago
working in Microsoft Office and using offline

00:03:12.650 --> 00:03:17.600
docs. So, that was okay. I had the ability
to edit documents. But there wasn't really

00:03:17.600 --> 00:03:22.330
built-in collaboration or sharing, and there
wasn't any sense that these documents were

00:03:22.330 --> 00:03:26.360
accessible from anywhere. And I also had a
whole lot of trouble converting between formats.

00:03:26.360 --> 00:03:32.080
So, I remember having lots of trouble converting
the things like PDFs or, you know, for a long

00:03:32.080 --> 00:03:38.140
time, other office formats. So this was actually
a pretty limited option. And even today, if

00:03:38.140 --> 00:03:43.210
you want to share something from an offline
document system, you traditionally attach

00:03:43.210 --> 00:03:47.750
it to an email and send it off. So, that's
actually not a very good way to share things

00:03:47.750 --> 00:03:51.280
at all. So skipping Google Docs for a minute
and moving on to the traditional cloud storage.

00:03:51.280 --> 00:03:57.819
Traditional cloud storage is actually kind
of dumb, in that; here, we can upload things

00:03:57.819 --> 00:04:03.930
and access them from anywhere but we can't
do anything with that data, right? So, users

00:04:03.930 --> 00:04:09.480
can't do things like edit documents, there's
no built-in collaboration or sharing, and

00:04:09.480 --> 00:04:13.950
lastly, it's really hard to convert things
between formats. But Google Docs actually

00:04:13.950 --> 00:04:20.209
does a lot of these things. So, it fits a
use case of a cloud storage platform; because

00:04:20.209 --> 00:04:25.720
it does all of these things and also gives
you cloud services to act on your data. So,

00:04:25.720 --> 00:04:30.930
going into Google Docs in a little bit more
detail. This is your Google Documents list.

00:04:30.930 --> 00:04:37.180
So, just a quick show of hands, who uses Google
Docs? I think every single person in the room

00:04:37.180 --> 00:04:42.230
raised their hand. So that's fantastic. So
you're familiar with this, right? You have

00:04:42.230 --> 00:04:48.330
collections, you have, you know, all of your
files and documents there or you can store

00:04:48.330 --> 00:04:54.580
things. It's really easy to share. So, this
is a really standard interface for accessing

00:04:54.580 --> 00:05:01.490
all of the stuff you put in Google Docs. So,
for those of you who might not know, your

00:05:01.490 --> 00:05:08.370
documents list can actually contain more than
just documents. It can contain videos, spreadsheets,

00:05:08.370 --> 00:05:14.680
any other file type and collections. So, videos;
we actually recently added support for playing

00:05:14.680 --> 00:05:19.020
videos in your documents list. So, if you
upload a video of like, your kids playing

00:05:19.020 --> 00:05:24.910
or something, you can watch that. And we also
support uploading other file types as well

00:05:24.910 --> 00:05:33.510
now. So you can upload any way an audio recording
you made or a ZIP file, things like that.

00:05:33.510 --> 00:05:39.500
So, they can upload or download anything in
the Google Docs interface. So, what we wanted

00:05:39.500 --> 00:05:43.310
to start to look at now is you doing that
in a programmatic matter, right? With the

00:05:43.310 --> 00:05:49.480
Google Documents List API. So who here has
used the Google Documents List API? I see

00:05:49.480 --> 00:05:57.300
like maybe, five, six people. If you're not
using this API and your applications need

00:05:57.300 --> 00:06:02.550
cloud storage, you should definitely consider
using this API. For a large number of reasons

00:06:02.550 --> 00:06:07.300
that I'm going to go through. But today, what
we're going to do in detail is go through

00:06:07.300 --> 00:06:12.520
example of working with the Documents List
API, and give you an introduction into using

00:06:12.520 --> 00:06:19.100
this API. And this introduction is for the
main I/O talk about the Google Documents List

00:06:19.100 --> 00:06:26.330
API and I/O on Wednesday. So, the Documents
List API allows your application to do pretty

00:06:26.330 --> 00:06:31.220
much anything you can do in the Google Docs
UI. So, you can upload files, you can download

00:06:31.220 --> 00:06:37.460
files, you can store items, move items between
collections, create collections; all of the

00:06:37.460 --> 00:06:45.592
stuff. So, really, the API allows your applications
to act as if they were a user in the UI. Some

00:06:45.592 --> 00:06:51.000
of the basic features; you can store any type
of data. This is new. Previously, you could

00:06:51.000 --> 00:06:55.910
not store any type of data with the API; so
now, you can store any type of data. You can

00:06:55.910 --> 00:07:01.930
also securely share data. So, secure sharing
is actually a really important feature of

00:07:01.930 --> 00:07:06.990
Google Docs, in that you can share something
with someone without sending it via plain

00:07:06.990 --> 00:07:13.250
text email. So, to be--to be clear here, if
you use a traditional offline document or

00:07:13.250 --> 00:07:20.310
an offline file, like let's say you want to
send a text file to your friend in New York.

00:07:20.310 --> 00:07:24.460
If you were to do that and you emailed it
to them, the email is most likely going to

00:07:24.460 --> 00:07:28.729
be in plain text, and the attachment is also
going to be in plain text. So, there are things

00:07:28.729 --> 00:07:33.600
you can do. Like, you could encrypt the email;
but generally, people find encrypting email

00:07:33.600 --> 00:07:37.210
to be inaccessible and not a lot of people
know how to do that. But people know how to

00:07:37.210 --> 00:07:41.650
go into Google Docs and they know how to click
share. And so when you do this, what happens

00:07:41.650 --> 00:07:48.180
is, an email gets sent off to your friends;
and it's a sharing email with no sensitive

00:07:48.180 --> 00:07:52.850
information in the email unless you choose
to include the item in the email. So then,

00:07:52.850 --> 00:07:57.040
the user has to click on a link and then go
to Google Docs. And all of this time, they've

00:07:57.040 --> 00:08:03.710
been acting via HTTPS; and all of the transactions
are secure. So, you don't have to worry about

00:08:03.710 --> 00:08:07.729
things being stolen, like that. Also with
the API, you can manage collections. I'm going

00:08:07.729 --> 00:08:14.060
to go into that in a little bit. So, who uses
API? Just give you some example use cases.

00:08:14.060 --> 00:08:19.900
Here are three example use cases. The first
one is Memeo. Memeo builds this product called

00:08:19.900 --> 00:08:26.419
Memeo Connect. And it essentially connects
all of your individual devices to the Google

00:08:26.419 --> 00:08:32.289
Cloud and syncs things back and forth. They
also give a back-up product. Syncplicity does

00:08:32.289 --> 00:08:38.750
something similar but in a more desktops-oriented
setting. So, syncplicity has a sync client

00:08:38.750 --> 00:08:43.469
for your desktop, and it can sync different
portions of your hard drive very easily to

00:08:43.469 --> 00:08:48.540
the cloud. So here, we have two products that
are actually pretty successful; and what they

00:08:48.540 --> 00:08:52.770
do is sync things to the cloud. And lastly,
we have Google Doc--the Google Docs app for

00:08:52.770 --> 00:08:58.410
Android. So, the Google Docs app for Android
is new. Has anybody used this? Yes, it's sick,

00:08:58.410 --> 00:09:04.021
right? I really like this app a lot. This
actually also uses a Documents List API. So,

00:09:04.021 --> 00:09:09.600
what it's doing is, from your Android phone,
it's essentially Java application that uses

00:09:09.600 --> 00:09:14.800
our Java client library and makes request
to the API on a regular basis on behalf of

00:09:14.800 --> 00:09:19.640
a user to request a list of documents or let
you interact with those documents. So, those

00:09:19.640 --> 00:09:25.390
are three use cases. So, more popular use
cases are definitely, like I said, synchronization

00:09:25.390 --> 00:09:32.790
but backups to the Cloud. So I personally,
on my workstation at home, I set up a--I used

00:09:32.790 --> 00:09:38.250
to have like an Rsync script set up. But what
I realized was I had to have like an SSH client

00:09:38.250 --> 00:09:43.670
wherever I was to access my documents from
my like, web server. And that wasn't really

00:09:43.670 --> 00:09:51.029
convenient. So, I started synching my documents
to my Google Docs in my files. And in doing

00:09:51.029 --> 00:09:54.040
this, I can actually access my files from
anywhere. So that's really useful. You don't

00:09:54.040 --> 00:10:00.060
need any special clients or anything to access
your data. Also, document editing. Some people

00:10:00.060 --> 00:10:05.020
prefer to implement their own document editors
and actually use Google Docs as the storage

00:10:05.020 --> 00:10:10.840
for the data. So, there are a lot of products
that, you know, for instance implement their

00:10:10.840 --> 00:10:17.670
own web versions of spreadsheet or they build
a sync client between Microsoft Office and

00:10:17.670 --> 00:10:22.140
Google Docs. And in those cases, document
editing is actually use case for this; but

00:10:22.140 --> 00:10:26.950
the storage is all handled by the Documents
List API. Also, revision management. I've

00:10:26.950 --> 00:10:31.390
seen people implement wikis and corporate
intranets and things like that. So, it's really

00:10:31.390 --> 00:10:37.270
easy to edit text in Google Docs. So, doing
something like a corporate intranet or a wiki

00:10:37.270 --> 00:10:39.029
is really simple and you can manage all of
those revisions yourself through the Documents

00:10:39.029 --> 00:10:48.670
List API. So, we're going to get started developing
apps now. So, the documentation is at this

00:10:48.670 --> 00:10:55.140
Google link. So, I don't know if anybody cares
to write that down. But essentially, the documentation

00:10:55.140 --> 00:10:59.740
is a complete guide on how to do every single
thing with the API. We're not really going

00:10:59.740 --> 00:11:02.770
to go through the documentation today which
is why I'm giving you the link. I'm going

00:11:02.770 --> 00:11:07.580
to go through some more advanced use cases.
They're in the documentation, but are much

00:11:07.580 --> 00:11:14.150
better explained in person. So this is just
a screenshot of the documentation. So you

00:11:14.150 --> 00:11:19.450
can see here, it's laid out in a use case-oriented
manner. So, if you need to, for instance,

00:11:19.450 --> 00:11:25.529
create a collection or create a sub-collection,
or learn how to upload a drawing or download

00:11:25.529 --> 00:11:31.980
a spreadsheet; all of those things are here
and described in detail. But again, I'm not

00:11:31.980 --> 00:11:35.870
going to walk through the documentation today.
Instead, I want to go through some specific

00:11:35.870 --> 00:11:41.720
key words and terminology before we move in
to actually writing code. So, for the purpose

00:11:41.720 --> 00:11:47.080
of this talk; and when you're working with
Documents List API, a document is any entry

00:11:47.080 --> 00:11:53.110
that's editable in Google Docs. So, don't
think text document here; think spreadsheet,

00:11:53.110 --> 00:11:59.920
drawing, presentation, text document is also
one. But this is just something that you can

00:11:59.920 --> 00:12:06.420
edit in Google Docs via the Web UI. Whereas
a file is something that cannot be edited

00:12:06.420 --> 00:12:11.750
in the Google Docs UI, okay? Does everybody
understand the distinction? So, a file is

00:12:11.750 --> 00:12:16.560
not a document. It means, when you upload
it, it's just there for storage, you can't

00:12:16.560 --> 00:12:25.490
yet edit it in Google Docs. A collection is
something that contains other entries. So,

00:12:25.490 --> 00:12:31.410
a collection is kind of like a folder; and
it's kind of like a label. We actually used

00:12:31.410 --> 00:12:36.209
to call these "Things Folders", but we realized
that that's not a really good name because

00:12:36.209 --> 00:12:43.959
people have some predisposition of what a
folder is. So, a collection is like a folder,

00:12:43.959 --> 00:12:49.950
in that, it has a hierarchy. So, you can put
a collection inside of another collection,

00:12:49.950 --> 00:12:55.290
okay? So, kind of like a folder in that regard.
But it's like a label in the sense that a

00:12:55.290 --> 00:13:01.930
document or a file can belong to more than
one collection, okay? So, you could apply

00:13:01.930 --> 00:13:09.610
a collection as a label to 10 documents, okay?
And then, you can apply a different label

00:13:09.610 --> 00:13:14.201
to those same 10 documents. So, we've kind
of merged the idea of a folder and a label

00:13:14.201 --> 00:13:20.230
into one thing and we call it a collection.
If you don't understand how those two things

00:13:20.230 --> 00:13:25.410
work together, you can more or less think
of these as a folder though. Lastly, a resource

00:13:25.410 --> 00:13:31.279
is any of the three things that I've previously
described. So, the API works in such a manner

00:13:31.279 --> 00:13:36.660
that things are abstracted out so that you
can change the title of a collection just

00:13:36.660 --> 00:13:40.790
like you would change the title of a document.
And we try to make it really easy. So, a resource

00:13:40.790 --> 00:13:46.779
refers to any of those three things. So, who
in the room knows Java? Almost everybody.

00:13:46.779 --> 00:13:53.860
Who in the room knows Python? Less people.
Okay. So, I'm going to go through some Java

00:13:53.860 --> 00:13:59.090
samples and then some Python samples. But
if you don't know one or the other, you should

00:13:59.090 --> 00:14:03.450
be able to follow along. If not, all of these
things can be figured out pretty easily with

00:14:03.450 --> 00:14:08.829
the documentation or you can just ask me later.
So here, what we're doing is we're creating

00:14:08.829 --> 00:14:15.430
a new URL. And the Documents List API is a
REST-based API. Everybody knows REST? Yes.

00:14:15.430 --> 00:14:20.720
If you don't know REST, there's other talks
on it here. But essentially, what it--what

00:14:20.720 --> 00:14:25.579
it means is, it's a single endpoint that allows
you to create, retrieve, update and delete

00:14:25.579 --> 00:14:34.300
resources. So here, we have the single endpoint;
and if we do an HTTP GET request, we can fetch

00:14:34.300 --> 00:14:40.200
a list of documents. And if we do an HTTP
POST, we can create a new document or file.

00:14:40.200 --> 00:14:47.209
So here, I'm creating a new URL and then I'm
fetching that URL into a feed. And the feed

00:14:47.209 --> 00:14:53.540
here is just like a list of resources. And
then, for each resource in that list, I'm

00:14:53.540 --> 00:14:58.070
just printing out its title. So this is like
the Hello World of Documents List API, right?

00:14:58.070 --> 00:15:03.630
You're just fetching a list of documents in
files and then printing them out. Everybody

00:15:03.630 --> 00:15:09.709
understand what's going on here? Cool. So,
here's a much more complex example. Here is

00:15:09.709 --> 00:15:16.300
an example of uploading your existing documents.
So, let's just walk through this really quick.

00:15:16.300 --> 00:15:20.130
The only line here that really matters is
the top line because this is what's calling

00:15:20.130 --> 00:15:27.529
the method we defined below. So here, we're
calling uploadFile and then "/path/to/your/file.doc"

00:15:27.529 --> 00:15:33.410
and then we're giving it a title. So, after
that, we print out where the document ended

00:15:33.410 --> 00:15:38.950
up, you know, on Google Docs and you can give
that link to a user for instance to click

00:15:38.950 --> 00:15:43.830
on and then access it in Google Docs. So the
uploadFile method is where all the interesting

00:15:43.830 --> 00:15:48.250
stuff happens. We could have new Java file
objects based on the given path, and then

00:15:48.250 --> 00:15:55.270
we find out its MIME type. So, these are pretty
much the two things required to upload a document.

00:15:55.270 --> 00:16:00.620
You need to know the path of the file on your
hard drive, and you need to know its type.

00:16:00.620 --> 00:16:05.769
So if you wanted to upload a text document,
you don't want to upload it for instance as

00:16:05.769 --> 00:16:11.680
a presentation. Then lastly, what we're going
to do is create a new Documents List API entry.

00:16:11.680 --> 00:16:15.029
We're going to set the file to the file we
just created, and then we're going to set

00:16:15.029 --> 00:16:20.630
its title, and then lastly, we're going to
do the HTTP POST request to insert this at

00:16:20.630 --> 00:16:27.769
that endpoint. So, long story short, we found
the file on the hard drive, we determine its

00:16:27.769 --> 00:16:32.630
MIME type, and then we send it to Google Doc--the
Google Documents List API. And now, the Google

00:16:32.630 --> 00:16:36.079
Documents List API is going to take it from
there. It's going to interpret your document,

00:16:36.079 --> 00:16:42.430
convert it to a Google Docs format, and then
make it editable in the Web UI. So, I don't

00:16:42.430 --> 00:16:47.899
know what is this, 20 lines of code and we're
uploading stuff and having it converted automatically.

00:16:47.899 --> 00:16:53.470
It--it's pretty nice. So, another example.
Remember I said documents are not files. If

00:16:53.470 --> 00:16:58.010
you want to upload something and make sure
that does--it does not get converted, you

00:16:58.010 --> 00:17:02.790
can use convert=false. So we won't convert
it if we don't know how to convert it. But

00:17:02.790 --> 00:17:08.410
if you wanted to, for instance, upload a text
file and make it not editable via a user,

00:17:08.410 --> 00:17:14.130
you could do convert=false. So there are lots
of reasons to do this; maybe you only want

00:17:14.130 --> 00:17:17.819
this file editable on the user's hard drive
and not from Google Docs or something like

00:17:17.819 --> 00:17:24.309
that. So, convert=false. So, you would us
this to upload a ZIP file or, you know, an

00:17:24.309 --> 00:17:30.650
mp3 file maybe, something like that. So, that's
all pretty simple. I just want to get a little

00:17:30.650 --> 00:17:36.179
bit more advanced now. So, I want to get a
little bit more advanced with this use case.

00:17:36.179 --> 00:17:43.530
How do you turn an image of text into text
that you can edit? Ideas, anybody? You can

00:17:43.530 --> 00:17:49.640
shout them out. So, who in the audience knows
about OCR? Cool. So, we're going to go through

00:17:49.640 --> 00:17:56.740
OCR a little bit today; and how you can implement
it with one line of code. So, OCR stands for

00:17:56.740 --> 00:18:02.040
Optical Character Recognition. And essentially,
what this allows you to do if you implement

00:18:02.040 --> 00:18:09.110
it properly is turn an image of text, which
is a set of pixels, into a textual representation.

00:18:09.110 --> 00:18:14.419
So, in this case, we have that stop sign and
everybody here knows that it says, "Stop."

00:18:14.419 --> 00:18:18.640
But does the computer know that it says, "Stop"?
And so, Optical Character Recognition allows

00:18:18.640 --> 00:18:25.010
us, via a series of algorithms, to turn it
into a text file, right? That we can edit.

00:18:25.010 --> 00:18:29.910
So, we can edit those characters. Now, this
brings up a whole bunch of important points.

00:18:29.910 --> 00:18:35.910
Firstly, can somebody tell me, what is the
paragraph style of a stop sign? Anybody know?

00:18:35.910 --> 00:18:40.970
No, right? So, it's pretty confusing. What
is the paragraph style of a stop sign? So,

00:18:40.970 --> 00:18:45.880
OCR has to do a lot of analysis on how to
make this show up correctly in a document.

00:18:45.880 --> 00:18:49.600
It's one thing to turn it into text; it's
another thing to make sure that all of the

00:18:49.600 --> 00:18:54.510
letters are capitalized and that it shows
up in the correct paragraph setting, right?

00:18:54.510 --> 00:19:00.300
So, Google Docs actually allows you to do
this very easily. So, we would take all of

00:19:00.300 --> 00:19:08.460
the previous code and just change it so that
we say, ocr=true at the end of the URL. And

00:19:08.460 --> 00:19:14.380
that's it. Now, when Google Docs gets to the
file, it's going to use Optical Character

00:19:14.380 --> 00:19:18.740
Recognition on the file and turn it into an
editable document. So, this is pretty sick.

00:19:18.740 --> 00:19:23.640
And this is like my favorite feature. So,
we're going to take a look at how we do this

00:19:23.640 --> 00:19:33.320
in action. So, let me pull up TextMate. So,
here, I have a Python program that I wrote.

00:19:33.320 --> 00:19:41.830
And the sole purpose of this Python Program
is to upload an image and get text back, okay?

00:19:41.830 --> 00:19:47.679
So, if you're not familiar with Python--oops,
I'm used to using them, so you can see me

00:19:47.679 --> 00:19:54.500
type JK there. You can--if we scroll through
with it--if you're not used to using Python,

00:19:54.500 --> 00:19:59.530
here, I'm just putting a shebang saying this
should run with the Python interpreter, and

00:19:59.530 --> 00:20:05.800
then copyright comments, whatever. Then the
imports. These imports are used in a variety

00:20:05.800 --> 00:20:14.850
of ways. But the important one here is that
we're importing the gdata docs API client.

00:20:14.850 --> 00:20:21.210
So, all these means is that we, at Google,
write a Python client library and then we

00:20:21.210 --> 00:20:26.720
give it to you for free. And the purpose of
this library is to make these HTTP requests

00:20:26.720 --> 00:20:31.750
that I talked about for you. So, we have the
equivalent in Java, in .Net, in PHP. So, if

00:20:31.750 --> 00:20:35.789
you're using any of those languages, using
the API should be really simple. So, here,

00:20:35.789 --> 00:20:41.940
I'm importing the Python one, and I'm going
to write an upload method. So, I'm just going

00:20:41.940 --> 00:20:46.820
to create a docs client; and all this is is
some class that makes these HTTP requests

00:20:46.820 --> 00:20:51.820
very simple. And then, I'm going to log in.
So here, I'm using client login with the user

00:20:51.820 --> 00:20:56.140
name and password. This is my test account.
If you login and delete stuff, that will just

00:20:56.140 --> 00:21:06.260
annoy me. So next, we're going to get that
base URL we talked about. So, that's like

00:21:06.260 --> 00:21:10.200
the feed and stuff of all private flow of
things that you saw before. Now, we're going

00:21:10.200 --> 00:21:16.309
to iterate over a list of files; and for each
file, we're going to do some stuff. Just because

00:21:16.309 --> 00:21:21.110
I was lazy, I didn't, like, detect the MIME
type, I just assumed that you're using a JPEG

00:21:21.110 --> 00:21:27.200
file. We're going to append that ocr=true
flag to the end of the URL. And then, we're

00:21:27.200 --> 00:21:32.840
going to open up the file, read it into some
file container that's part of the client library,

00:21:32.840 --> 00:21:38.440
and then we're going to decode client.Upload.
So, this is about 10 lines of code; and we

00:21:38.440 --> 00:21:43.520
just uploaded a file with OCR in Python. The
rest of this--oh, actually, at the end of

00:21:43.520 --> 00:21:48.490
this method, what it does is it prints out
success; and then, the URL at which we could

00:21:48.490 --> 00:21:54.380
access the new editable document on the web.
The rest of this is just like some option

00:21:54.380 --> 00:21:58.990
parsing stuff; that's not really relevant.
We're just going to pass in the list of files.

00:21:58.990 --> 00:22:07.299
So, if I come back here, you can see me testing
out some random data. So, I have this directory

00:22:07.299 --> 00:22:12.370
with a couple of things in it. docslist.py,
I'm sorry, that's red and green for some of

00:22:12.370 --> 00:22:20.290
you, is the file that we're going to run and
we're going to do this pass in -f stop.jpg.

00:22:20.290 --> 00:22:25.660
So, I just put it out the options that we
passed in there, make sure they're parsed

00:22:25.660 --> 00:22:30.970
correctly. Success. So, I just write a command,
upload--uploaded it to the Google Cloud, and

00:22:30.970 --> 00:22:43.050
converted it to text. This is going to be
amazing if I can find Firefox. Hold on one

00:22:43.050 --> 00:22:59.620
second. Apparently, I never learned how to
copy and paste. Why is that not working? Search

00:22:59.620 --> 00:23:14.570
Bookmarks and History. Okay. That's looks
more I like it. All right. So, here, we have

00:23:14.570 --> 00:23:21.000
the original stop sign image. So, we just
include this in the document so you know what

00:23:21.000 --> 00:23:25.160
you converted; but you can easily remove this
from the document just by converting the document

00:23:25.160 --> 00:23:31.570
to like, a raw plain text file and then the
image will be thrown away. And then down here,

00:23:31.570 --> 00:23:36.720
this little word is what I've been looking
for. So, this word, I can edit. I can insert

00:23:36.720 --> 00:23:42.910
stuff into it. It's raw text. So it read the
stop sign, put it in the correct character

00:23:42.910 --> 00:23:48.710
case, and then put it in the correct paragraph
style down here. So, that's pretty crazy.

00:23:48.710 --> 00:23:52.549
But that's kind of a silly example, because
not many people are like, "Hmm, I wonder if

00:23:52.549 --> 00:23:57.539
the stop sign says, 'stop'." So, instead,
what we're going to do is look at a little

00:23:57.539 --> 00:24:05.740
bit more of an advanced sample. Look--the
question was, will it also do font style?

00:24:05.740 --> 00:24:13.169
And the answer is no, not at this time; because
we don't have the stop sign font registered,

00:24:13.169 --> 00:24:20.520
sorry. So, here's another one. This is from
the University of Texas. I really don't know

00:24:20.520 --> 00:24:25.330
what's about; I just like, searched for it
on the web. And it says, "In July 1845 Texas

00:24:25.330 --> 00:24:29.480
formally accepted an American proposal to
be annexed to the United States." I guess

00:24:29.480 --> 00:24:34.450
that's kind of important. So, anybody from
Texas? Woohoo. All right. So, we're going

00:24:34.450 --> 00:24:40.320
to convert this into a textual form; and then
we could do something like, put it on our

00:24:40.320 --> 00:24:45.101
blog in text form so that it's searchable,
people can copy and paste it much more easily,

00:24:45.101 --> 00:24:51.250
things like that. We can change the font if
we wanted to. So, this is called text1.jpg.

00:24:51.250 --> 00:25:00.990
Let me go back to our terminal. And after
come up, and instead of stop, let me do text1.jpg.

00:25:00.990 --> 00:25:08.330
So, it just takes a second. And there we go.
So, it's uploaded and converted. This is all

00:25:08.330 --> 00:25:14.539
live. I didn't--I didn't have some master
plan to fool you all. Let me go back to Firefox,

00:25:14.539 --> 00:25:20.720
new tab and open this up. So, here's the original
image, right? This is not editable, right?

00:25:20.720 --> 00:25:24.930
If I delete this image, the whole image goes
away. And down here, I'm not sure if you can

00:25:24.930 --> 00:25:33.830
see this; but in--well, that was kind of slow.
In July 1845, something, something, something,

00:25:33.830 --> 00:25:40.590
Texas was annexed. So, that's pretty [INDISTINCT],
right? I just took an image off of my hard

00:25:40.590 --> 00:25:45.669
drive, uploaded it through the Cloud, and
then had Google's thousands of computers operate

00:25:45.669 --> 00:25:57.590
on your one file, and convert it into raw
editable text like this. So, yes. Yes, cool.

00:25:57.590 --> 00:26:04.039
So, actually, I have a lot of international
friends especially now that I work at Google.

00:26:04.039 --> 00:26:10.299
It seems like, you know, half the company
works in a different office. And on occasion,

00:26:10.299 --> 00:26:14.990
I have no idea what the hell people are saying,
because they speak in different language than

00:26:14.990 --> 00:26:23.580
I do. So, this is something that we can resolve
at Google Docs. What we're going to do is

00:26:23.580 --> 00:26:33.190
show that OCR isn't actually just limited
to English. So if I comeback to find her,

00:26:33.190 --> 00:26:41.159
and I look in text2, let me zoom in here.
I don't speak German. Does anybody speak German?

00:26:41.159 --> 00:26:45.880
All right. So, this is some German text. I
don't really know what it says, but I'm going

00:26:45.880 --> 00:26:52.911
to find out, right? Because I'm going to convert
it away from this image into OCR. And then

00:26:52.911 --> 00:26:58.150
if I wanted to, I could use the translate
features of the API to translate that text

00:26:58.150 --> 00:27:03.570
to English or vice versa. So, if we come back
to the terminal, I've got this in text2.jpg.

00:27:03.570 --> 00:27:18.920
I can upload text2. And just give it a minute.
It takes like, extra long for German. Just

00:27:18.920 --> 00:27:22.630
kidding. Sorry. Do you have a question?
&gt;&gt; [INDISTINCT]

00:27:22.630 --> 00:27:27.100
&gt;&gt; FRYZEL: The question is: Are you limited
to the Roman alphabet? No, we do support other

00:27:27.100 --> 00:27:35.610
character sets. And that will become evident
because--I mean, there are some English characters

00:27:35.610 --> 00:27:41.090
that do not show up or, like--I only know
French ones like [SPEAKING IN FOREIGN LANGUAGE]

00:27:41.090 --> 00:27:47.670
for instance. It's not part of my U.S. keyboard.
So it's not just like an ASCII character set

00:27:47.670 --> 00:27:53.419
or anything like that. Okay. So, if I copy
this and then I go back to Firefox. Now, that

00:27:53.419 --> 00:28:04.799
we have these English texts converted with
OCR, is change this whole use case just a

00:28:04.799 --> 00:28:11.929
little bit. It's really good that we have
OCR for, you know, the ASCII character set.

00:28:11.929 --> 00:28:16.929
But actually, our OCR implementation, I can
go quite a bit further. And so, what we do

00:28:16.929 --> 00:28:25.280
allow is for the conversion of the--of like,
other languages essentially. So, let's take

00:28:25.280 --> 00:28:34.720
an example that I have here of text2.jpg.
And so, if I zoom in here, you can see that

00:28:34.720 --> 00:28:44.429
text2.jpg is in German. So--actually, does
anybody in the audience know German? Two people.

00:28:44.429 --> 00:28:49.419
Cool. Okay. So maybe you guys can read this
because I can't. But that's okay because what

00:28:49.419 --> 00:28:58.990
I'm going to do is turn this image of German
text into an editable form. And then after

00:28:58.990 --> 00:29:10.299
it's editable, what we can do are some things
like translation. So this is text2.jpg's.

00:29:10.299 --> 00:29:16.940
So let me pull up my terminal here. We'll
just find it here. And let me pull up my other

00:29:16.940 --> 00:29:23.529
terminal. Sorry. So, here, we have the previous
command that we just ran. So docslist.py-f

00:29:23.529 --> 00:29:28.860
text1.jpg, that was for the English version.
Now we have text2.jpg, so let's just run that.

00:29:28.860 --> 00:29:37.960
So it's going to take a second here while
it uploads and converts; but if we just give

00:29:37.960 --> 00:29:49.270
it one more second. Oh, there. Okay. So, we
now have the converted form of the image here.

00:29:49.270 --> 00:29:59.600
So let me go back to Firefox. And if I pop
this up. So if I scroll down, oop, there's

00:29:59.600 --> 00:30:05.559
the--there's the German image. Remember, we
said the original image shows up just so we

00:30:05.559 --> 00:30:09.130
can tell what we converted. And then if I
scroll down further with compact controls

00:30:09.130 --> 00:30:16.000
on. I scroll down further. Click that image
out of there. We actually now have the editable

00:30:16.000 --> 00:30:21.070
text here, right? So, this came straight out
of the image. And you can see it's actually

00:30:21.070 --> 00:30:28.780
pretty high quality; and the paragraph form
is intact. So if I scroll down further, you

00:30:28.780 --> 00:30:35.809
can see like here nothing is out of place.
The first line is where it's supposed to be.

00:30:35.809 --> 00:30:42.640
So now, we can go a step further, right? Like,
if we, for instance, pull up this English

00:30:42.640 --> 00:30:48.559
version of the text and I want to convert
it, say, for my friend in Japan, what I can

00:30:48.559 --> 00:30:55.190
actually do is go to tools, translate document,
and then I can just choose a language. Let

00:30:55.190 --> 00:31:00.790
me choose Japanese here. Does anybody in the
audience actually know Japanese? No? Okay.

00:31:00.790 --> 00:31:08.460
Well, my friend does, so. I'm going to translate
it. And, boom. So, we've actually now got

00:31:08.460 --> 00:31:13.779
the fully translated version; and it's editable
so I don't have other right character set.

00:31:13.779 --> 00:31:18.650
But you can see that I can make changes to
the document just like any other document.

00:31:18.650 --> 00:31:24.940
So, that's pretty huge, right? So, now that
we've been able to do that from the UI, we

00:31:24.940 --> 00:31:30.690
can actually also do it via the API. And it's
really simple. Instead of saying OCR=true,

00:31:30.690 --> 00:31:38.450
you're just going to say translate=true. It's
the API. So, it's pretty straightforward.

00:31:38.450 --> 00:31:46.190
So, yes, that's pretty much it for that sample.
Let's go back to the presentation. Oops. I'm

00:31:46.190 --> 00:31:53.809
not showing you in Firefox. So, this has just
really been an introduction to one of our

00:31:53.809 --> 00:31:57.581
most powerful services. I just wanted to take
another quick survey. Who in the audience

00:31:57.581 --> 00:32:05.520
uses Documents List API? Well, yes. So there
were a lot of people. If you're not--again,

00:32:05.520 --> 00:32:10.341
this is definitely an API you should be considering
if you're doing any form of cloud storage;

00:32:10.341 --> 00:32:18.100
that we provide both the storage and the services
on top of that data to make your life as a

00:32:18.100 --> 00:32:25.029
developer easier. So, if you're really interested
in the Google Docs APIs in a more advanced

00:32:25.029 --> 00:32:31.960
use case, you should definitely come and check
out my main IO talk on a similar topic. It's

00:32:31.960 --> 00:32:38.909
May 11th; so this Wednesday, from 12:30 to
1:30 in Room 2 at IO. So at the talk, we're

00:32:38.909 --> 00:32:44.049
actually going to change the use case a little
bit and go through writing a full application.

00:32:44.049 --> 00:32:49.440
So, we're going to start talking about things
like; how do you build an app engine app with

00:32:49.440 --> 00:32:55.029
the Documents List API? How do you implement
3-legged OAuth with the API? How do you use

00:32:55.029 --> 00:33:00.750
something like Javascript in HTML5 to upload
files? Things like that. So, it's going to

00:33:00.750 --> 00:33:04.690
be really, really interesting full-fledged
app, and we're going to go through all of

00:33:04.690 --> 00:33:09.909
the codes. So, it's going to be a very technical
topic. So--yes, please attend that. Here's

00:33:09.909 --> 00:33:17.000
my SpeakerMeter QR code again. If you're interested
in giving me feedback on the talk, please

00:33:17.000 --> 00:33:21.870
let me know. It's right there. Also, the documentation
is at that Google link, so went through documentation

00:33:21.870 --> 00:33:26.040
a little bit. But if you're interested in
implementing any of these use cases, definitely

00:33:26.040 --> 00:33:32.860
just go take a look. Also, we have a really
thriving inactive forum community in which

00:33:32.860 --> 00:33:39.230
myself and Rob, who's in the audience--we're
both engineers on Google Docs, and we post

00:33:39.230 --> 00:33:43.210
in there on a regular basis. So, when you
post in the forum, you're actually essentially

00:33:43.210 --> 00:33:47.241
emailing us; and we'll email you back. So,
definitely check out the forum if you have

00:33:47.241 --> 00:33:52.220
any questions or if you just want to show
off something cool that you've done, that's

00:33:52.220 --> 00:33:56.080
all a good idea. So, now, I wanted to open
it up for questions.

00:33:56.080 --> 00:34:03.060
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: It's not a limitation of the abilities

00:34:03.060 --> 00:34:20.619
of the document type, we just haven't implemented
it yet. That's all. Other questions? Yes?

00:34:20.619 --> 00:34:28.310
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: Yes. So, the question is, does

00:34:28.310 --> 00:34:32.739
the Documents List API support speech to text?
Is that essentially your question? Yes. The

00:34:32.739 --> 00:34:39.029
answer is no, but primary because that doesn't
have a lot to do with storage at the moment.

00:34:39.029 --> 00:34:44.169
However, if you are going to write, for instance,
a web application or an Android application,

00:34:44.169 --> 00:34:49.619
there is this new HTML5 speech input. And
the speech input allows you to convert speech

00:34:49.619 --> 00:34:54.379
to text. So, if you wanted to have somebody,
you know, for instance narrate a document,

00:34:54.379 --> 00:34:59.599
and just have everything they say pop up in
a--in a Google Doc, you could do this pretty

00:34:59.599 --> 00:35:06.509
easily. So, in an HTML5 app, you would use
the input speech type; and on an Android app,

00:35:06.509 --> 00:35:11.809
there's the whole speech API. So, that is
definitely doable. So, the Documents List

00:35:11.809 --> 00:35:17.569
API more or less just handles the storage
end or the conversion end from a--from a non-speech

00:35:17.569 --> 00:35:39.720
perspective. Yes. Other questions? Yes?
&gt;&gt; [INDISTINCT]

00:35:39.720 --> 00:35:49.649
&gt;&gt; FRYZEL: Yes.
&gt;&gt; [INDISTINCT]

00:35:49.649 --> 00:35:55.250
&gt;&gt; FRYZEL: Yes, yes. So, the question is,
she's building a knowledge management system,

00:35:55.250 --> 00:36:02.229
and they're building a gadget in sites that
uploads documents. And on occasion, the documents

00:36:02.229 --> 00:36:08.579
that for users to upload are too large? That's
your question? So, we have the Metadata feed

00:36:08.579 --> 00:36:14.380
and that tells you the maximum file size of
varying types of documents. So, for various

00:36:14.380 --> 00:36:22.239
reasons, we have maximum file sizes. Some
of those reasons just involve things like

00:36:22.239 --> 00:36:28.319
users abusing the system. And we want to avoid
people abusing the system, just using it for

00:36:28.319 --> 00:36:36.650
legit causes. So, that's one reason. But if
you run into a specific file size limitation,

00:36:36.650 --> 00:36:41.329
there are a couple of best practices. One,
you may consider splitting up the file into

00:36:41.329 --> 00:36:44.710
separate parts. I mean, you can upload any
type of file you want. So, if I took, for

00:36:44.710 --> 00:36:50.260
instance, a Microsoft Word file, and I literally
cut it in half at the byte and then have,

00:36:50.260 --> 00:36:54.660
you know, now two distinct files and I upload
both of those, and then later on I merge them

00:36:54.660 --> 00:36:58.380
back together, that's fine. Things like that.
But for documents that are converted, you

00:36:58.380 --> 00:37:04.819
shouldn't really have any issues. We have
a very generous quota for things like that.

00:37:04.819 --> 00:37:09.390
So, I'm not sure I answered your question,
but I'm happy talk afterward. We can go through

00:37:09.390 --> 00:37:20.619
specifically your application. Other questions?
I take you first.

00:37:20.619 --> 00:37:24.650
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: Yes.

00:37:24.650 --> 00:37:29.030
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: Yes. So, the question was, can

00:37:29.030 --> 00:37:32.160
I just upload an HTML file and add my own
editor for the HTML?

00:37:32.160 --> 00:37:34.509
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: Yes. So--I mean, in that particular

00:37:34.509 --> 00:37:40.170
case, you would probably just upload the HTML
file and say convert=false. And if you do

00:37:40.170 --> 00:37:44.890
that, we won't try to convert it to something
editable; and you can just build your own

00:37:44.890 --> 00:37:50.079
editor on top of that with no issues.
&gt;&gt; [INDISTINCT]

00:37:50.079 --> 00:38:00.029
&gt;&gt; FRYZEL: I'm sorry. I can't hear you.
&gt;&gt; [INDISTINCT]

00:38:00.029 --> 00:38:07.489
&gt;&gt; FRYZEL: Oh. The thing that you're referring
to--you're referring to like an "Open with"

00:38:07.489 --> 00:38:15.460
thing, right? Like on a--I think on Mac, you
can right-click on something like "Open with"?

00:38:15.460 --> 00:38:19.469
Like "Open with" some arbitrary application?
Is that what you mean? That's something that

00:38:19.469 --> 00:38:34.329
we're considering. And I don't have any other
information to give at this point. Other questions?

00:38:34.329 --> 00:38:37.359
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: So, the question is, are there

00:38:37.359 --> 00:38:43.160
any plans to convert character-based files
to--oh, vector-based. Well, actually, we already

00:38:43.160 --> 00:38:50.849
support SVG imports. So, you can create an
SVG file, upload that to us, and we'll turn

00:38:50.849 --> 00:38:55.539
it into a drawing for you. So, that's fully
supported. We're working on some other import

00:38:55.539 --> 00:39:06.489
formats from different file types, but SVG
is definitely the best one so far. Other questions?

00:39:06.489 --> 00:39:10.029
Yes.
&gt;&gt; [INDISTINCT]

00:39:10.029 --> 00:39:15.329
&gt;&gt; FRYZEL: No.
&gt;&gt; [INDISTINCT]

00:39:15.329 --> 00:39:29.109
&gt;&gt; FRYZEL: How did you--the API was. I work
on spreadsheets; and I will gladly talk to

00:39:29.109 --> 00:39:39.239
you about this after the talk. Yes. But the
short answer is, no. Not at this moment. Other

00:39:39.239 --> 00:39:41.950
questions? Yes.
&gt;&gt; [INDISTINCT]

00:39:41.950 --> 00:39:44.210
&gt;&gt; FRYZEL: Yes.
&gt;&gt; [INDISTINCT]

00:39:44.210 --> 00:39:49.690
&gt;&gt; FRYZEL: Yes. The question is, what about
version control and collaborative editing?

00:39:49.690 --> 00:39:55.690
So, in Google Docs, what we do--I mean, we
pretty much live and breathe collaborative

00:39:55.690 --> 00:40:01.140
something. So, collaborative editing is what
Google Docs does really, really well. And

00:40:01.140 --> 00:40:07.150
those changes are handled by operational transforms.
So, when there's a conflict, essentially,

00:40:07.150 --> 00:40:14.799
we--for conversion. Here, the Google Documents
List API provides you a list of those versions;

00:40:14.799 --> 00:40:20.520
and you can actually create, retrieve, update,
and delete versions of a specific document.

00:40:20.520 --> 00:40:26.530
So, you actually have full control over the
versioning of any document or file. Does that

00:40:26.530 --> 00:40:34.689
make sense? Yes. Okay. Other questions? Yes.
&gt;&gt; For a version change, is that change [INDISTINCT]

00:40:34.689 --> 00:40:36.709
&gt;&gt; FRYZEL: No.
&gt;&gt; [INDISTINCT]

00:40:36.709 --> 00:40:38.729
&gt;&gt; FRYZEL: No.
&gt;&gt; [INDISTINCT]

00:40:38.729 --> 00:40:45.499
&gt;&gt; FRYZEL: Yes. You can say "Google Docs API,
here is a new version of this file. Please

00:40:45.499 --> 00:40:58.149
create one for me and--" yes. All right. Other
questions? Yes.

00:40:58.149 --> 00:41:06.221
&gt;&gt; [INDISTINCT] some of those have access
to the API [INDISTINCT] Can you guys sort

00:41:06.221 --> 00:41:07.221
of [INDISTINCT] to it [INDISTINCT]? For example,
you make application and [INDISTINCT] the

00:41:07.221 --> 00:41:10.059
history [INDISTINCT].
&gt;&gt; FRYZEL: The history. That's a really good

00:41:10.059 --> 00:41:14.960
question. The question was, can a malicious
user log into the API or like, access using

00:41:14.960 --> 00:41:23.599
the API and model with revision history and
then make changes that nobody knows about?

00:41:23.599 --> 00:41:28.910
The answer is that no, that wouldn't really
work because there's always going to be a

00:41:28.910 --> 00:41:33.239
latest revision; and the latest revision will
give you a--essentially, a history of everything

00:41:33.239 --> 00:41:37.160
that changed up to that revision. So, if they
deleted the latest revision, you'd be left

00:41:37.160 --> 00:41:46.949
with the original. So, that really, I don't
think would work out. Yes.

00:41:46.949 --> 00:41:49.829
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: They could delete that revision

00:41:49.829 --> 00:41:54.940
but revision's changes have already been applied
in Revision 7. So, it's still going to be

00:41:54.940 --> 00:42:03.759
there. You can't maliciously add data and
get rid of the paper trail. Yes. Yes?

00:42:03.759 --> 00:42:12.609
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: Yes. You could say .json and then...

00:42:12.609 --> 00:42:16.019
&gt;&gt; [INDISTINCT]
&gt;&gt; FRYZEL: Yes. You can update the contents

00:42:16.019 --> 00:42:20.130
of that file. If you send a create request
each time, you'd end up with like 100 JSON

00:42:20.130 --> 00:42:35.460
files. But if you find this particular JSON
file, you can change its contents with new

00:42:35.460 --> 00:42:42.980
stuff. Yes. Anything else? Yes, sorry.
&gt;&gt; [INDISTINCT]

00:42:42.980 --> 00:42:43.980
&gt;&gt; FRYZEL: Yes.
&gt;&gt; [INDISTINCT]

00:42:43.980 --> 00:42:44.980
&gt;&gt; FRYZEL: Yes.
&gt;&gt; [INDISTINCT]

00:42:44.980 --> 00:42:47.789
&gt;&gt; FRYZEL: Yes. You wouldn't need a public
Docs account. So, the API supports access

00:42:47.789 --> 00:42:54.780
control lists, which I refer to as ACLs. And
so, you actually have full control over that--over

00:42:54.780 --> 00:43:00.140
a document's ACL. So, you can--I forget the
specific use case. But the question was, how

00:43:00.140 --> 00:43:05.509
do I essentially create a public repository
of documents. You would upload all of these

00:43:05.509 --> 00:43:09.160
documents; and then, you can mark them public
to the world so that you just need the link

00:43:09.160 --> 00:43:12.920
to find the document. And then, you show the
link with whoever who wants it. You can also

00:43:12.920 --> 00:43:16.799
be much less restrictive than that--or much
less generous in that with your sharing. You

00:43:16.799 --> 00:43:23.769
could share to like, these specific people,
these people with--that only have this link,

00:43:23.769 --> 00:43:31.089
things like that. Anything else? Okay. So,
again, my name is Vic. I'll be around BootCamp

00:43:31.089 --> 00:43:36.349
today and throughout all of I/O. This is Rob.
He'll be around same thing. If you have any

00:43:36.349 --> 00:43:40.270
questions about the Documents List API or
Docs in general, feel free to find us and

00:43:40.270 --> 00:43:42.381
just ask as anything. All right. Thank you.

