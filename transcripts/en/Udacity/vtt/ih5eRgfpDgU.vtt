WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:03.310
We have manually written
our own request directly

00:00:03.310 --> 00:00:05.759
to the wire and received
a response from the server

00:00:05.759 --> 00:00:07.567
just as the server send it.

00:00:07.567 --> 00:00:09.150
It feels raw, close
to the bare metal,

00:00:09.150 --> 00:00:11.820
doesn't it, like there's
almost no software between us

00:00:11.820 --> 00:00:13.050
and the bytes being sent.

00:00:13.050 --> 00:00:15.030
And yet there's still
so much happening

00:00:15.029 --> 00:00:17.339
that we can't directly
see, and it actually

00:00:17.339 --> 00:00:20.550
has a big impact on how fast
the entire request response

00:00:20.550 --> 00:00:22.380
process is.

00:00:22.379 --> 00:00:25.859
If you are a little familiar
with networking architecture,

00:00:25.859 --> 00:00:29.429
you might know that HTTP is
not the entire story, that's

00:00:29.429 --> 00:00:31.050
merely the protocol.

00:00:31.050 --> 00:00:32.969
For a more complete
picture, we are

00:00:32.969 --> 00:00:38.070
using HDP on top of TCP on
top of IP on top of ethernet--

00:00:38.070 --> 00:00:40.590
probably, mostly, maybe.

00:00:40.590 --> 00:00:42.690
The point is we don't
need to understand

00:00:42.689 --> 00:00:45.479
each of these layers,
but TCP in particular

00:00:45.479 --> 00:00:47.969
has a big impact on
how we should structure

00:00:47.969 --> 00:00:50.729
our requests to have
them perform well,

00:00:50.729 --> 00:00:52.739
and it warrants a close look.

00:00:52.740 --> 00:00:55.770
The internet protocol allows
us to talk to other machines

00:00:55.770 --> 00:00:57.990
on the internet,
while TCP allows

00:00:57.990 --> 00:01:00.480
us to have multiple,
independent streams of data

00:01:00.479 --> 00:01:02.369
between these two machines.

00:01:02.369 --> 00:01:05.370
These streams are
distinguished by port numbers.

00:01:05.370 --> 00:01:09.180
The TCP protocol also ensures
that no packages get lost

00:01:09.180 --> 00:01:11.760
and that they arrive
in the right order.

00:01:11.760 --> 00:01:15.510
All of this requires precautions
that cost time and resources.

00:01:15.510 --> 00:01:18.140
Opening a new connection
is especially costly,

00:01:18.140 --> 00:01:21.780
as the TCP handshake, which
makes sure both machines are

00:01:21.780 --> 00:01:24.629
aware of the newly created
communication channel,

00:01:24.629 --> 00:01:28.589
has to be executed that
requires two round trips.

00:01:28.590 --> 00:01:32.579
If you're using HTTPS, the
additional TLS handshake

00:01:32.579 --> 00:01:35.099
has to be executed as well.

00:01:35.099 --> 00:01:38.489
If HTTPS and TLS are new
to you, stick around,

00:01:38.489 --> 00:01:40.949
and we'll talk about
them in the next lesson.

00:01:40.950 --> 00:01:43.859
Once all that is done,
the actual HTTP protocol

00:01:43.859 --> 00:01:45.790
can finally take over.

00:01:45.790 --> 00:01:47.940
Head-of-line blocking
is a huge bottleneck

00:01:47.939 --> 00:01:49.319
to website performance.

00:01:49.319 --> 00:01:51.989
Browsers being able to open
up six parallel connections

00:01:51.989 --> 00:01:53.849
helps, but it's not great.

00:01:53.849 --> 00:01:56.309
Later we'll see how
HTTP2 fixes issues

00:01:56.310 --> 00:01:58.460
with head-of-line blocking.

