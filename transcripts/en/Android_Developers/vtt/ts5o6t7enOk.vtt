WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.902
(music playing)

00:00:02.272 --> 00:00:05.930
No matter how aggressively you optimized
your networking code for performance,

00:00:05.930 --> 00:00:10.600
there's still a huge problematic perf issue
that you haven't seen: bloated asset files.

00:00:10.600 --> 00:00:13.680
My name is Colt McAnlis.
And if you're not aggressively attacking

00:00:13.680 --> 00:00:16.580
the size of the assets
that you're transferring to your users,

00:00:16.580 --> 00:00:19.140
you're basically stealing
time and money from them.

00:00:19.142 --> 00:00:22.490
See, sending bloated assets to your users
has three big problems.

00:00:22.490 --> 00:00:26.410
Now, number one is network speeds.
Bandwidth is still a really big problem

00:00:26.410 --> 00:00:29.404
for most of the people around the world.
Not everyone is on 4G.

00:00:29.404 --> 00:00:32.810
And the slower the network,
the longer it takes to download the data.

00:00:32.810 --> 00:00:35.600
Which directly translates
to number two, battery drain.

00:00:35.600 --> 00:00:38.600
The longer the cellular radio
is talking to the network,

00:00:38.600 --> 00:00:43.530
the more battery it'll drain to do so.
So bloated files burn more battery.

00:00:43.670 --> 00:00:47.620
And let's not forget number three, cost.
A majority of folks out there

00:00:47.620 --> 00:00:50.374
aren't on unlimited data plans,
which means that every bit

00:00:50.374 --> 00:00:54.600
they're transferring to their device
from your application costs them money,

00:00:54.600 --> 00:00:57.860
which, if you ask me, is a raw deal
for a free application.

00:00:58.980 --> 00:01:01.089
And unless you've taken
a hard, grinding look

00:01:01.089 --> 00:01:03.570
at the size of the assets
that you're sending to your users,

00:01:03.570 --> 00:01:05.450
they're going to be larger
than they need to be.

00:01:05.450 --> 00:01:08.130
And the two biggest candidates
that cause the most bloat?

00:01:08.130 --> 00:01:11.482
Images and serialized data.
For images, sometimes the easiest solution

00:01:11.500 --> 00:01:13.690
is to just change what
file type you're using.

00:01:13.690 --> 00:01:17.550
I mean, if you don't need transparency,
avoid using PNG files

00:01:17.550 --> 00:01:21.410
because they don't compress as well as JPEG
and WEBP counterparts.

00:01:21.430 --> 00:01:25.730
And if you are using JPEG or WEBP,
remember that small changes in quality

00:01:25.730 --> 00:01:31.130
can have huge changes in file size.
You can crank down the quality settings

00:01:31.140 --> 00:01:35.200
of an image a significant amount
before users start to notice any issues.

00:01:35.230 --> 00:01:37.360
So aggressively finding
the right trade off

00:01:37.360 --> 00:01:40.090
between quality and
size can be a huge win.

00:01:40.090 --> 00:01:42.820
And this goes doubles for
different types of images.

00:01:42.820 --> 00:01:45.380
Thumbnails occupy
much smaller portions of the screen.

00:01:45.380 --> 00:01:47.920
and, thus, it's harder to
notice visual issues there.

00:01:47.920 --> 00:01:50.630
You can get by with a much
lower quality than, say,

00:01:50.630 --> 00:01:54.540
a full screen version where
it's easier to see compression artifacts.

00:01:54.560 --> 00:01:58.700
And resolution is especially
important for screen sizes and needs.

00:01:58.720 --> 00:02:02.000
There's really no reason to
send a four-megapixel image

00:02:02.000 --> 00:02:04.590
down to a device
and only have it used as a thumbnail.

00:02:04.590 --> 00:02:07.760
Or smaller screen devices
that can't possibly display it

00:02:07.760 --> 00:02:11.019
at that resolution, which is why
you should store different qualities

00:02:11.019 --> 00:02:13.340
and resolutions of the
same image on your server.

00:02:13.340 --> 00:02:15.760
So, you can optimize for
the smallest possible file

00:02:15.760 --> 00:02:18.200
to be sent to the users.
And if this sounds like a

00:02:18.200 --> 00:02:21.420
''too much overhead'' for you,
remember users are paying

00:02:21.420 --> 00:02:24.820
to download your bloated files.
So shame on you.

00:02:24.950 --> 00:02:28.040
Now, just as problematic as images
is serialized data.

00:02:28.040 --> 00:02:32.434
JSON and XML are horrible types
when it comes to compressed size.

00:02:32.440 --> 00:02:36.160
I mean, they are super, super bloated.
Look at all this extra stuff

00:02:36.160 --> 00:02:39.610
that's jammed into these files
just to make them more readable for humans

00:02:39.610 --> 00:02:41.860
commas, spaces, quotes, carriage return.

00:02:41.930 --> 00:02:46.170
Listen, your users don't need to pay
to send that data to their device.

00:02:46.230 --> 00:02:49.320
Instead, you should be leveraging
binary serialization formats.

00:02:49.340 --> 00:02:52.740
Proto buffs, nano buffs, and flat buffers
are all accessible on Android

00:02:52.740 --> 00:02:56.170
and can reduce your data footprint
significantly with their own

00:02:56.170 --> 00:02:59.210
nuanced implementation trade offs.
Oh, and by the way, remember

00:02:59.210 --> 00:03:03.360
that any of the data you serialize
is going to be GZIP compressed

00:03:03.360 --> 00:03:06.160
by the HTTP stack,
meaning that you should be adopting

00:03:06.160 --> 00:03:10.450
a Struct-of-Arrays format to help bundle
similar typed fields together

00:03:10.450 --> 00:03:12.890
so that the LZ stage
of the GZIP compressor

00:03:12.890 --> 00:03:15.600
can do a better job of
finding symbol matches.

00:03:15.600 --> 00:03:19.089
If you're confused about the size
of the assets that you're sending around

00:03:19.089 --> 00:03:22.608
and what it's costing your users,
check out the networking and monitor tool

00:03:22.608 --> 00:03:27.640
inside of Android Studio or the ARO tool
from AT&amp;T. Both provide great information

00:03:27.640 --> 00:03:31.110
that lets you track issues down.
And tracking down performance problems

00:03:31.110 --> 00:03:33.840
is what we are all about,
which is why you need to check out

00:03:33.840 --> 00:03:35.950
the rest of the
Android Performance Patterns content.

00:03:35.950 --> 00:03:38.530
And also join our community on
Google+ for great advice

00:03:38.530 --> 00:03:40.840
from people who've already solved
these problems.

00:03:40.840 --> 00:03:42.330
So keep calm.
Profile your code.

00:03:42.330 --> 00:03:44.820
And always remember... Perf Matters.

00:03:45.440 --> 00:03:48.110
(music playing)

