WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.540
We've been talking about instant messaging in, you know, messaging apps

00:00:03.540 --> 00:00:09.320
How can you start having the same conversations you might have over the Internet, but where maybe someone's got there phone off, or asynchronously?

00:00:09.320 --> 00:00:12.320
You might have to wait six months before the next message comes.

00:00:12.320 --> 00:00:13.580
These are things we have to think about.

00:00:13.580 --> 00:00:16.220
That gives attackers a lot of time to break keys.

00:00:16.360 --> 00:00:19.180
It gives you a lot of time, um,

00:00:19.220 --> 00:00:20.820
to forget what the key was.

00:00:20.820 --> 00:00:22.900
And then a message comes in and you can't read it.

00:00:22.900 --> 00:00:24.980
We've only covered half the story.

00:00:24.980 --> 00:00:29.040
We talked about this pre-key bundles, and this initial triple Diffie-Hellman key exchange

00:00:29.040 --> 00:00:30.940
which is where we want to asynchonously

00:00:31.100 --> 00:00:32.540
establish some keys.

00:00:32.540 --> 00:00:35.560
Now, one option then would be to, just like on the Internet

00:00:35.560 --> 00:00:37.360
when you're doing online shopping

00:00:37.580 --> 00:00:39.500
is to use that key from now on

00:00:39.500 --> 00:00:41.060
to secure every message.

00:00:41.060 --> 00:00:43.720
This is not a good idea because imagine

00:00:43.720 --> 00:00:45.780
you have a conversation for six months

00:00:45.780 --> 00:00:48.940
and some nefarious party has recorded all of your messages.

00:00:49.280 --> 00:00:52.180
Then what happens is you break one of them and you've got all of them

00:00:52.180 --> 00:00:53.940
cause all the keys are always the same, right?

00:00:53.980 --> 00:00:56.460
So we don't do that, we update the key.

00:00:58.100 --> 00:01:00.980
I guess it's a question of how often do you update the key?

00:01:01.240 --> 00:01:05.300
and Signal, and WhatsApp, and the Signal Protocol

00:01:06.420 --> 00:01:09.040
are pretty, um, rigid about this.

00:01:09.120 --> 00:01:11.540
They will update the key every single message, right?

00:01:11.540 --> 00:01:15.600
Every single message, when you use an app like this, is a different key.

00:01:15.860 --> 00:01:20.980
So basically making an app as absolutely difficult as possible as an attacker to get any message.

00:01:20.980 --> 00:01:23.420
You break a message, maybe you read one message.

00:01:23.420 --> 00:01:24.980
Maybe you'll get a couple, if you're lucky.

00:01:24.980 --> 00:01:26.540
Cause you're sniffing everything.

00:01:26.540 --> 00:01:29.340
But most of the time you'll get one and that's all.

00:01:29.340 --> 00:01:31.580
And, of course, the keys are not exactly easy to break anyway.

00:01:31.580 --> 00:01:34.140
So it makes it very, very difficult to break.

00:01:34.140 --> 00:01:36.860
At the core of this is something called a ratchet function.

00:01:36.860 --> 00:01:40.380
A ratchet function is a function that can sort of turn in one way, but not backwards.

00:01:40.380 --> 00:01:41.980
So think of it like a hash function

00:01:41.980 --> 00:01:44.460
you can take an input, go through a hash function

00:01:44.460 --> 00:01:45.940
but you can't go backwards.

00:01:45.940 --> 00:01:47.660
So that's kind of like a ratchet.

00:01:47.660 --> 00:01:51.380
And the key derivation function that we use here, which is kind of like a hash

00:01:51.460 --> 00:01:56.720
um, is used in this way. It's called a KDF ratchet or a key derivation function ratchet.

00:01:56.720 --> 00:01:59.460
So let's imagine that we have our root key or our key.

00:01:59.460 --> 00:02:00.900
So this is our current key

00:02:01.080 --> 00:02:03.700
and we want to encrypt a message.

00:02:03.700 --> 00:02:06.200
So what we do is we pass it through a key derivation function

00:02:06.200 --> 00:02:08.680
which operates in a similar way, in this instance, to a hash

00:02:08.680 --> 00:02:10.480
but they're a defined cryptographic primitive.

00:02:10.480 --> 00:02:12.220
It has an input that comes in here.

00:02:12.220 --> 00:02:15.480
This can be a constant, it could be relevant to whatever the application is.

00:02:15.860 --> 00:02:17.820
And out comes a new key

00:02:17.920 --> 00:02:20.760
and your current output key

00:02:20.860 --> 00:02:23.380
or message key, or temporary key.

00:02:23.380 --> 00:02:24.340
Whatever you want to call it.

00:02:25.200 --> 00:02:26.780
So, this is a kind of chain.

00:02:26.780 --> 00:02:28.960
So this is message #1 that we encrypt using this key.

00:02:28.960 --> 00:02:30.380
Maybe we want to send another message.

00:02:30.380 --> 00:02:32.540
So we put this through a KDF again

00:02:32.700 --> 00:02:34.700
a KDF not KDE (fixes spelling)

00:02:34.700 --> 00:02:37.340
Goes through here, this comes out with another key.

00:02:37.580 --> 00:02:40.100
And another message #2 key.

00:02:40.180 --> 00:02:41.700
And this goes on and on.

00:02:41.700 --> 00:02:46.120
And this kind of function is absolutely at the core of things like Signal, Whatsapp.

00:02:46.120 --> 00:02:49.580
The reason it's useful is because it doesn't let us turn backwards.

00:02:49.580 --> 00:02:51.260
If I break this key, as an attacker

00:02:51.260 --> 00:02:54.180
I can't reverse this one-way function to get to this key.

00:02:54.180 --> 00:02:56.820
So I can't find out what this message key was, or this message key

00:02:56.820 --> 00:02:58.660
or all of the ones back in time.

00:02:58.660 --> 00:03:01.380
So, I can break a key somewhere in the conversation

00:03:01.380 --> 00:03:04.260
and I can't read any of the messages you wrote previously.

00:03:04.260 --> 00:03:05.760
That's a good thing.

00:03:05.760 --> 00:03:08.640
What it doesn't do is provide us with, sort of, future secrecy.

00:03:08.640 --> 00:03:12.880
So, if I break this key, I can use this KDF to produce this key and this key.

00:03:12.880 --> 00:03:14.320
And so on and so forth.

00:03:14.320 --> 00:03:15.460
That's a huge problem.

00:03:15.460 --> 00:03:17.860
So how do we fix that? Well what we tend to do

00:03:17.860 --> 00:03:20.700
is we bring in a Diffie-Hellman ratchet as well.

00:03:20.700 --> 00:03:23.580
So sometimes what will happen is, when they're having these conversations

00:03:23.580 --> 00:03:26.820
is that you will receive Diffie-Hellman parameters from the other party

00:03:26.820 --> 00:03:31.080
and you'll use them to manipulate your key derivation function to change this chain.

00:03:31.080 --> 00:03:33.520
And that will mean that if someone cracked a key

00:03:33.520 --> 00:03:36.000
as long as they're not privy to all of the Diffie-Hellman parameters

00:03:36.000 --> 00:03:39.260
you will be able to reestablish secrecy from then on.

00:03:39.260 --> 00:03:44.380
So this is very nice, when we combine a KDF chain with this Diffie-Hellman ratchet

00:03:44.380 --> 00:03:46.060
we've got this kind of "double ratchet"

00:03:46.060 --> 00:03:50.080
and that's what happens in Signal and in Whatsapp.

00:03:50.080 --> 00:03:52.980
So let's have a look at how this actually works in practice.

00:03:53.420 --> 00:03:54.120
(paper ripping)

00:03:54.480 --> 00:03:56.260
I'm going to simplify a bit by drawing

00:03:56.260 --> 00:03:58.780
these ratchets as sort of actual physical ratchets

00:03:58.780 --> 00:04:01.140
rather than keys and key-pairs and things

00:04:01.140 --> 00:04:04.360
So, we have our two classic parties that are having a conversation

00:04:04.360 --> 00:04:05.540
Alice and Bob.

00:04:05.760 --> 00:04:09.480
Now Alice has three KDF chains which she's using

00:04:09.480 --> 00:04:12.740
One is a... drawing the ratchet is going to be difficult

00:04:12.780 --> 00:04:14.880
so I'm going to draw little circles

00:04:14.880 --> 00:04:16.020
Camera: "That's my job, then, right?"

00:04:16.020 --> 00:04:17.140
Yeah, that's your job, sorry.

00:04:17.140 --> 00:04:19.500
Alice has a Diffie-Hellman ratchet here

00:04:19.500 --> 00:04:24.000
which has sort of, you know, got these one-way things on it that mean it can't turn backwards.

00:04:24.640 --> 00:04:27.580
She has a sending ratchet: "Send".

00:04:27.960 --> 00:04:31.240
and a receiving ratchet: "Receive".

00:04:31.500 --> 00:04:33.660
And Bob has the exact same thing.

00:04:33.660 --> 00:04:35.980
So he has a Diffie-Hellman ratchet of his own

00:04:36.100 --> 00:04:39.620
and he has a sending ratchet and he has a receiving ratchet.

00:04:39.620 --> 00:04:43.460
Now, what's going to happen is every time that Alice wants to send a message to Bob

00:04:43.460 --> 00:04:47.700
she's going to update this sending ratchet, produce a new output key, and send that to Bob.

00:04:48.580 --> 00:04:52.220
So, let's imagine that happens, let's say Alice sends a message to Bob.

00:04:52.500 --> 00:04:56.480
So she ticks this ratchet over, she produces another

00:04:56.480 --> 00:04:58.760
key in that chain, and

00:04:58.760 --> 00:05:02.480
and an output message key, so let's call this "Alice #1".

00:05:03.260 --> 00:05:06.960
Alice encrypts a message with "Alice #1" and sends it over to Bob.

00:05:07.120 --> 00:05:10.100
Bob, ticks over his receiving chain

00:05:10.100 --> 00:05:15.060
Luckily the sending chain of Alice and the receiving chain of Bob started at the same point, so they know what they're doing.

00:05:15.580 --> 00:05:17.820
He ticks his over one and produces

00:05:17.820 --> 00:05:21.540
that same "A #1" so that he can decrypt the message and read it.

00:05:21.540 --> 00:05:23.180
So Alice maybe wants to send another one

00:05:23.180 --> 00:05:25.260
so she's going to tick this KDF function again

00:05:25.260 --> 00:05:28.020
she's going to produce a new key and "A #2".

00:05:28.020 --> 00:05:32.060
She's going to send that to Bob, he's going to tick his receiving function "A #2"

00:05:32.060 --> 00:05:34.520
Now Bob wants to send a message, so he's going to tick his...

00:05:34.720 --> 00:05:37.600
His is going to be "Bob #1"

00:05:37.600 --> 00:05:42.880
Alice gets a message and thinks "Well that means I need to calculate whatever the key was to work out what that message was".

00:05:42.920 --> 00:05:45.480
So she's gonna tick this and gonna get "B #1".

00:05:45.480 --> 00:05:48.120
And these chains are theoretically going to grow and grow.

00:05:48.760 --> 00:05:51.720
And Alice's sending chain

00:05:51.720 --> 00:05:55.020
will be in sync with Bob's receiving chain, and vice versa.

00:05:55.020 --> 00:05:59.160
Bob will send a message and it will be Alice's receiving chain that has another key.

00:05:59.160 --> 00:06:01.700
So all that has to happen, for this to work

00:06:01.740 --> 00:06:05.260
is that the sending and receiving chains of both Alice and Bob have to be in sync

00:06:05.300 --> 00:06:07.840
and they have to start at the same position

00:06:07.840 --> 00:06:11.900
But we know that's easy to do because they started using a Diffie-Hellman key exchange

00:06:12.140 --> 00:06:15.660
But we haven't got that future secrecy that we wanted

00:06:15.660 --> 00:06:18.340
These won't heal themselves. If someone breaks "A #2"

00:06:18.820 --> 00:06:21.140
and knows what this sending key was

00:06:21.140 --> 00:06:23.780
they've essentially broken Alice's ratchet

00:06:23.780 --> 00:06:27.180
and they can tick along with it and work out all of these messages

00:06:27.340 --> 00:06:31.280
So what happens occasionally or whenever they want, is

00:06:31.320 --> 00:06:33.940
as part of one of Bob's messages

00:06:33.940 --> 00:06:36.660
he will send a new Diffie-Hellman public key.

00:06:36.660 --> 00:06:38.620
So this will come over here like this

00:06:38.620 --> 00:06:41.180
Alice will use it to tick her Diffie-Hellman ratchet

00:06:41.240 --> 00:06:44.180
and that will reset these messages

00:06:44.180 --> 00:06:48.900
and Bob will also do the same thing: he will reset his sending or receiving messages as appropriate.

00:06:48.900 --> 00:06:53.140
This Diffie-Hellman parameter is used to update the starting positions of these two ratchets

00:06:53.140 --> 00:06:54.820
and then they continue with their messages.

00:06:54.820 --> 00:06:58.020
Camera: "Presumably Bob's update the moment he sends the Diffie-Hellman."

00:06:58.020 --> 00:06:59.700
That's right, so he would have already done that

00:06:59.700 --> 00:07:03.820
so that he can then send "B #1" using the latest Diffie-Hellman pair.

00:07:03.820 --> 00:07:06.860
So they can send this every message if they want or hardly ever.

00:07:06.860 --> 00:07:08.700
In practice, it's sent every message.

00:07:10.140 --> 00:07:11.820
So the idea is that we have...

00:07:12.900 --> 00:07:15.980
we have loads of really interesting cryptographic properties here

00:07:15.980 --> 00:07:19.240
First of all, the Diffie-Hellman means that we have

00:07:19.240 --> 00:07:21.300
a sort of self-healing property

00:07:21.660 --> 00:07:24.940
If someone breaks one of these intermediate keys

00:07:24.940 --> 00:07:27.660
as soon as one of these Diffie-Hellman ratchets ticks over

00:07:27.660 --> 00:07:30.020
that gets reset and we lose that ability.

00:07:30.020 --> 00:07:33.540
Because of these KDF ratchets, if you break one of these keys down here

00:07:33.540 --> 00:07:35.560
you can't find out what all the other messages were.

00:07:35.560 --> 00:07:38.440
This method of producing keys will kind of heal itself

00:07:38.440 --> 00:07:42.900
and you can't reverse it, you can't go back down the chain and decrypt historic messages.

00:07:42.900 --> 00:07:45.520
And also, it deals nicely with asynchronous data.

00:07:45.520 --> 00:07:47.520
Alice can send ten messages to Bob

00:07:47.520 --> 00:07:49.680
with or without Diffie-Hellman parameters

00:07:49.680 --> 00:07:51.380
and as long as they both follow the rules

00:07:51.380 --> 00:07:54.540
the exact right amount of keys will be generated

00:07:54.540 --> 00:07:57.100
and they will exactly match his receiving keys.

00:07:57.100 --> 00:08:00.880
And they can update their Diffie-Hellman parameters, as well, whenever they want.

00:08:00.880 --> 00:08:04.480
Camera: "Does the Diffie-Hellman go one-way? Is it only ever Bob-to-Alice?"

00:08:04.480 --> 00:08:07.540
No, so remember, the Diffie-Hellman is a conversation between two parties

00:08:07.600 --> 00:08:09.600
they both have a public key, so

00:08:09.600 --> 00:08:12.160
every time Alice sends a message, she'll send her part

00:08:12.160 --> 00:08:14.840
and every time Bob sends a message, he'll send his part.

00:08:14.840 --> 00:08:19.540
So essentially you have these, sort of, halfway Diffie-Hellman exchanges which is this ratchet.

00:08:19.540 --> 00:08:21.820
So Alice will send, and they'll both update.

00:08:21.820 --> 00:08:23.540
Bob will send and they'll both update.

00:08:23.540 --> 00:08:25.140
Alice will send and they'll both update.

00:08:25.460 --> 00:08:28.260
So keeping these different chains in sync

00:08:28.260 --> 00:08:30.180
is a little bit of a brain-melter.

00:08:30.180 --> 00:08:34.860
But it can be done as long as you follow the rules and as long as Alice and Bob are doing the exact same thing

00:08:34.860 --> 00:08:38.460
you'll find that they know exactly which key handles which message.

00:08:38.460 --> 00:08:40.900
Camera: "What happens if one of these messages gets missed?"

00:08:40.900 --> 00:08:42.580
Ah, so this is another nice thing about this.

00:08:42.580 --> 00:08:46.660
So, if one of these messages gets missed then what essentially happens is, temporarily

00:08:46.660 --> 00:08:48.500
these two chains become out of sync.

00:08:48.640 --> 00:08:51.580
So maybe Bob sends ten messages to Alice

00:08:51.580 --> 00:08:53.520
so this receiving chain is ten long

00:08:53.520 --> 00:08:55.520
but Alice has only received two of them so far

00:08:55.520 --> 00:08:57.280
and then she receives number nine.

00:08:57.280 --> 00:09:01.040
She's gotta be able to work out what key decrypts that message.

00:09:01.040 --> 00:09:04.900
Well, in the message Bob will have some information that says I've already sent

00:09:04.900 --> 00:09:06.400
eight messages on this chain.

00:09:06.420 --> 00:09:10.380
Alice will look at her two and go: "Well that's not right, so I better wait."

00:09:10.540 --> 00:09:15.240
"Or, I can tick seven more ticks to get to the right key."

00:09:15.240 --> 00:09:18.740
"And hold onto these ones in case those messages come in later."

00:09:18.740 --> 00:09:23.540
So they'll both gonna have to be a little bit careful about which keys they delete, which keys they keep

00:09:23.540 --> 00:09:25.740
temporarily, until those messages come in.

00:09:25.740 --> 00:09:29.560
But as soon as you've used a key to decrypt a message, you delete it.

00:09:29.560 --> 00:09:31.380
And they get deleted immediately.

00:09:31.380 --> 00:09:35.940
And that way, it's very robust to people capturing a device or something like that.

00:09:35.940 --> 00:09:39.680
Camera: "So I know that if I use one of these apps, Signal or Whatsapp or whatever

00:09:39.680 --> 00:09:42.840
you get these little ticks to see if somethings delivered or if it's been read."

00:09:42.860 --> 00:09:44.180
Camera: "How does that work?"

00:09:44.180 --> 00:09:47.180
So if you text me you can see that I've read it but I've not bothered responding.

00:09:47.180 --> 00:09:49.520
Yeah, so that's sort of an application layer thing.

00:09:49.520 --> 00:09:51.400
So what will happen is, this is kind of very low level

00:09:51.400 --> 00:09:53.940
we're talking just above the network protocols

00:09:53.940 --> 00:09:56.860
you've got this stuff happening, informing the encryption.

00:09:56.860 --> 00:09:59.560
Within that, the message doesn't have to contain an image or a GIF

00:09:59.740 --> 00:10:01.400
or a text message.

00:10:01.620 --> 00:10:05.720
It could contain a read receipt, or a proof of delivery, or something like this.

00:10:05.720 --> 00:10:09.020
And this would depend on the actual application and how they manage these messages.

00:10:09.020 --> 00:10:10.820
It really doesn't make a lot of difference.

00:10:10.820 --> 00:10:12.500
All that happens is a kind of...

00:10:12.500 --> 00:10:14.740
the wrapper around these messages

00:10:14.740 --> 00:10:16.900
is going to be these Diffie-Hellman parameters

00:10:16.900 --> 00:10:19.660
and whichever message it is in these chains.

00:10:19.660 --> 00:10:21.660
Camera: "Do they use this for video as well?"

00:10:21.660 --> 00:10:25.060
They do, yeah. So, the packets that get sent when you're performing

00:10:25.140 --> 00:10:26.740
end-to-end encryption

00:10:26.740 --> 00:10:29.020
in things like Signal or Whatsapp

00:10:29.020 --> 00:10:32.640
we use the exact same protocol for that, all encryption is done this way.

00:10:33.260 --> 00:10:35.660
Cause this is just generating keys.

00:10:35.660 --> 00:10:37.820
The actual encryption will be done with something like

00:10:37.820 --> 00:10:41.920
an AEAD cipher, so, for example: ChaCha or AES.

00:10:42.840 --> 00:10:47.140
And that will include all the normal symmetric key cryptography stuff

00:10:47.140 --> 00:10:50.840
that make sure that messages haven't been tampered with and things like this.

00:10:50.840 --> 00:10:54.360
Camera: "With my video head on, I'm wondering how it all gets chunked up, you see, but maybe that's..."

00:10:54.360 --> 00:10:58.000
Yeah, that's... that's difficult for me to know without reading the code.

00:10:58.780 --> 00:11:00.540
But, you know, it's going to be small...

00:11:00.540 --> 00:11:03.880
small packets of normal size, just like TLS data over the Internet.

00:11:03.880 --> 00:11:07.280
It's not going to be much different than you watching a streaming video

00:11:07.280 --> 00:11:09.600
over an encrypted Internet connection, at that point.

00:11:09.600 --> 00:11:12.720
Camera: "What happens if you have more than two people involved? Does it work the same?"

00:11:12.800 --> 00:11:16.700
Not quite, it gets... it gets a little bit messy.

00:11:16.900 --> 00:11:18.340
(laughter)

00:11:19.300 --> 00:11:20.820
Camera: "That's for another video."

00:11:20.860 --> 00:11:21.680
Yes.

00:11:22.140 --> 00:11:23.820
You gotta train for a long time.

00:11:23.820 --> 00:11:25.540
And let's not let Steve off the hook.

00:11:25.540 --> 00:11:26.380
Here's Steve, over here.

00:11:26.380 --> 00:11:28.620
High value of two, high value of one. Whatever that means.

00:11:28.620 --> 00:11:31.260
The interesting thing about this is we're not performing a classification.

00:11:31.460 --> 00:11:32.560
Little endian systems.

00:11:32.560 --> 00:11:34.500
So that's why we call it "endianness".

00:11:34.760 --> 00:11:37.180
It all traces back to eggs...

