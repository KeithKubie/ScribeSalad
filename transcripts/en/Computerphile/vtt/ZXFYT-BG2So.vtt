WEBVTT
Kind: captions
Language: en

00:00:00.099 --> 00:00:01.810
Let's talk a bit about, uh ...

00:00:01.810 --> 00:00:03.990
two-Factor authentication or multi-Factor authentication

00:00:04.690 --> 00:00:08.040
Anytime where you have a password usually a password doesn't have to be. Uhm ...

00:00:08.620 --> 00:00:14.460
And then they ask you something else like to verify your identity so maybe they send you a one-time password through a text

00:00:14.589 --> 00:00:20.429
Or maybe you have to use an app like Google authenticator to produce a one-time number if I want to login to my online

00:00:20.500 --> 00:00:23.360
Banking I have to put my card and type my pin into a device

00:00:24.000 --> 00:00:27.260
Which produces me a one-time password. It's this kind of idea.

00:00:29.940 --> 00:00:33.500
Everyone I think has a kind of intuitive idea of what the point of two factor is

00:00:33.610 --> 00:00:37.679
but let's sort of try and formalize it a bit and break down what it's good for and what it's not good for and

00:00:38.020 --> 00:00:44.969
You know, exactly what we're getting from it that we wouldn't otherwise have. The point of authentication is to verify to some server

00:00:44.980 --> 00:00:50.250
It's usually remote or your machine that you are who you say you are. And so in essence you're really

00:00:50.350 --> 00:00:53.399
Allowed to access the things on that machine or on that device

00:00:54.010 --> 00:00:57.660
Passwords seem to be what we've settled on as a kind of happy medium. They are something

00:00:57.660 --> 00:00:59.550
We know by I have some knowledge

00:00:59.550 --> 00:01:03.300
but hopefully no one else has and that means that I can type that in and

00:01:03.399 --> 00:01:06.478
Verify it must be me because I'm the only one that knows what that is right?

00:01:06.729 --> 00:01:11.849
if you want to know about what happens when other people know those things then see the other videos we've done on this because I've

00:01:11.850 --> 00:01:14.909
Talked about passwords before so if your password is six characters long

00:01:15.460 --> 00:01:16.920
It's being cracked right now

00:01:16.920 --> 00:01:22.470
And it's being cracked quickly because we can go through all with six character passwords in a fraction of a second

00:01:22.659 --> 00:01:26.069
Passwords are not foolproof right, people pick bad ones and they get hacked

00:01:26.950 --> 00:01:29.939
They even they can pick good ones, and they still get hacked because it's like a key logger

00:01:29.939 --> 00:01:35.008
Maybe a key log, or something like this. That's where two factor or multi-factor authentication comes in. Uhm ...

00:01:35.860 --> 00:01:39.209
So usually we talk about these three things we can use to demonstrate

00:01:39.970 --> 00:01:43.109
That we are who we say we are so we have something

00:01:43.110 --> 00:01:43.930
we know a

00:01:43.930 --> 00:01:46.919
Password or something else a date of birth a mother's maiden name

00:01:47.049 --> 00:01:52.769
these are kind of common ones people go for something we have, right. Our mobile phone receiving a text message or

00:01:53.380 --> 00:01:57.990
Credit card or something like this or something we are. Now, something we are is less common, but this would be

00:01:58.630 --> 00:02:01.979
Biometrics or fingerprints you know Iris recognition voice recognition?

00:02:02.590 --> 00:02:04.450
If we're going a bit more out there gait recognition

00:02:04.450 --> 00:02:10.410
That's how you walk things like this usually demonstrating who you are has some kind of hardware involved

00:02:11.110 --> 00:02:13.110
So is less common

00:02:13.630 --> 00:02:17.469
We're gonna put it aside for today what we do is. We combine something we know with something

00:02:17.470 --> 00:02:23.770
We have to make it that much harder for someone that finds out that thing we know can break into our account all right

00:02:23.770 --> 00:02:26.740
So let's assume for a minute that someone's guessed my password

00:02:27.080 --> 00:02:33.430
They don't have possession of my phone hopefully we don't need a pin code on the phone. They don't have the app on the phone

00:02:34.040 --> 00:02:40.689
So they can't answer that question when asked so when they try and log in they get the password correct

00:02:40.690 --> 00:02:46.180
But they can't get the second part of the puzzle and that has two benefits first of all they can't compromise the account

00:02:46.280 --> 00:02:49.330
but also if someone's logged in successfully of a password

00:02:49.330 --> 00:02:50.090
but

00:02:50.090 --> 00:02:55.900
unsuccessfully with the other part of the two factor that could flag a warning that then sends an email to the user to say just

00:02:55.900 --> 00:03:00.249
Check your password hasn't been compromised if your password is compromised even if it's not your fault

00:03:00.440 --> 00:03:02.440
They stopped someone breaking into your account

00:03:02.510 --> 00:03:06.999
This is why it's quite common on things like password managers online banking and other

00:03:07.190 --> 00:03:10.600
You know some email systems and in fact a lot of computer systems these days

00:03:10.760 --> 00:03:14.139
We'll see multi-factor authentication being used, but that isn't to say

00:03:14.900 --> 00:03:17.230
That it's always a good idea, right?

00:03:17.230 --> 00:03:23.890
There's this sort of opinion perhaps in security circles about more security is always better and that I broadly agree with in general

00:03:24.260 --> 00:03:30.760
But of course you have to consider ease of use you have to consider that some of these people aren't experts

00:03:30.760 --> 00:03:35.109
and they haven't got that much time to be constantly checking their mobile for extra texts and

00:03:35.180 --> 00:03:39.340
Things maybe they're trying to do this somewhere where there isn't any reception you can't

00:03:39.710 --> 00:03:45.010
Just put on extra layers of security and it not a little bit hinder what people are trying to do

00:03:45.010 --> 00:03:51.219
I think the idea of multi-factor authentication is to have a compromise between the additional security offers

00:03:51.220 --> 00:03:58.929
And it being a total pain and never actually getting anything done. You know so for example on some software

00:03:59.570 --> 00:04:00.980
You'll find that it only

00:04:00.980 --> 00:04:06.759
Asks let's say for multi-factor for logging in on a new device and once you've logged in it will allow you to persist that that

00:04:06.760 --> 00:04:13.389
Session for a while things like this the idea being that it's somewhat inconvenient, but it doesn't get a bit silly about it

00:04:13.700 --> 00:04:16.749
All right, because this can come back and get you someone pointing this out to me

00:04:17.420 --> 00:04:19.929
when I was talking about this on on Twitter and

00:04:21.200 --> 00:04:23.200
You know that they had a lot of friends who

00:04:23.540 --> 00:04:26.610
Accidentally been kicked off whatever observer because they've the device

00:04:26.860 --> 00:04:33.689
that was producing - something they have and that's actually happened to me I used Google Authenticator to log onto one of my servers and

00:04:34.210 --> 00:04:40.110
I lost my phone because it got broken and it went off to repairs and for those two weeks. I'd completely forgotten

00:04:40.560 --> 00:04:45.360
I mean you smash your phone the last thing you're thinking about is all. I must save my Google authenticator passwords

00:04:45.360 --> 00:04:47.360
You're not thinking about that

00:04:47.380 --> 00:04:51.869
it's gone, and then you realize actually I can't log into my twitter or my or my

00:04:53.230 --> 00:04:57.179
Server for two weeks right in the end. I had to in the end

00:04:57.180 --> 00:05:02.489
I had to go in Via the terminal on the server and reset the authenticator password which was a bit of a pain

00:05:02.560 --> 00:05:07.890
So you can imagine it's quite easy to lock yourself out because you can lose that thing you have so

00:05:09.160 --> 00:05:15.209
You know multi-factor authentication is a really good thing and people should be using it where security is a concern right?

00:05:16.090 --> 00:05:18.010
but it's not a

00:05:18.010 --> 00:05:20.010
completely foolproof

00:05:20.020 --> 00:05:26.129
Replacement for good passwords, and you can't really realistically use it on every single system you have unless you're just

00:05:27.250 --> 00:05:33.809
Unbelievably willing to put up with you know inconvenience right if you much more patient than me because I you know I can't do it

00:05:33.810 --> 00:05:37.049
I supposed to clarify two-factor authentication is a subset of multi-factor authentication

00:05:37.420 --> 00:05:39.509
Which could have any number of authentication

00:05:39.670 --> 00:05:44.640
Mechanisms you could imagine combining all three of these you see that on the movies quite a lot where they look into something with their

00:05:44.640 --> 00:05:47.549
I then they speak out loud or maybe they also type in a password

00:05:53.210 --> 00:05:55.100
It's going to take an ages to log into anything

00:05:55.100 --> 00:06:02.520
But you know that's the idea so a good example is the is the hash based one-time password or one-time password

00:06:02.520 --> 00:06:08.460
Right which is at the core of Google authenticator and numerous other tools for uhm ...

00:06:09.020 --> 00:06:16.000
generating these things so we're talking about you. Type in a password that you know and then some device you have generates a different password

00:06:16.340 --> 00:06:18.850
But only it has only used that one time

00:06:19.400 --> 00:06:25.000
And unless you know both of those things at the same time you're not getting in. That's the idea so I actually have Google authenticator

00:06:26.000 --> 00:06:27.580
So I can show you broadly what it is

00:06:27.580 --> 00:06:31.030
There are lots of alternatives like free one-time password and another

00:06:31.280 --> 00:06:32.140
numerous other apps

00:06:32.140 --> 00:06:38.560
You can search for but do this all what I've got here is Google authenticator every 30 seconds rotating these one-time passwords

00:06:38.560 --> 00:06:41.199
So you can see this little countdown here when it gets to the bottom

00:06:41.200 --> 00:06:46.540
It'll generate another set of passwords, and then I have to type in that password whenever I log in

00:06:47.180 --> 00:06:48.500
so

00:06:48.500 --> 00:06:49.720
How does that work well?

00:06:49.720 --> 00:06:54.699
Let's just talk a little bit about how it works in actual fact it basically ties back into our message authentication

00:06:54.800 --> 00:06:59.770
codes that we were talking about in a previous video right we had HMAC with a key

00:07:00.110 --> 00:07:06.819
Would be used to generate two sub keys, but we won't dwell on that and a message in hash based one-time passwords or h?

00:07:07.340 --> 00:07:08.360
HOTP

00:07:08.360 --> 00:07:14.770
We actually calculate the age mac of a secret key s and a counter

00:07:14.900 --> 00:07:21.310
That we're counting up right so the first time I log into this website the counter will be 0 or 1 it's not important

00:07:21.310 --> 00:07:27.129
Right but obviously my device, but I'm using to generate these one-time passwords and the server have to be on the same number

00:07:27.860 --> 00:07:33.190
The secret key we've shared beforehand hopefully not in plain text to everyone all right

00:07:33.190 --> 00:07:38.649
So it'll be able some long string that a server gave me when I first created my account or when I first set up this

00:07:38.660 --> 00:07:45.819
Authentication system the idea is that we're combining our secret key that only means a server know with whatever the counter currently is

00:07:46.070 --> 00:07:48.070
to generate a one-off

00:07:48.080 --> 00:07:54.460
Hash which is then essentially shortened and turned into a small number the way. We do that is

00:07:55.100 --> 00:08:00.309
We take certain bytes from the h mac because that's going to be for example for an h mac of a ShA-1

00:08:00.800 --> 00:08:06.279
That's going to be 60 bits. So we take four bytes from here. We calculate those four bytes

00:08:07.189 --> 00:08:12.759
Modulo 10 to the d. Where d is how many decimal we want right so on my Google authenticator?

00:08:12.759 --> 00:08:13.689
I was using six

00:08:13.689 --> 00:08:14.479
so your

00:08:14.479 --> 00:08:20.258
authentication app would have a certain number of digits the output and what would happen is the server when you log in will perform the

00:08:20.259 --> 00:08:26.678
Exact same calculation because they know were two things that we do they know the secret key, and they know the counter right now

00:08:26.679 --> 00:08:31.119
I'll get on to exact because Google authenticator extends this to use time and we'll talk about that in a moment

00:08:31.279 --> 00:08:36.789
But the thing the interesting thing about this is in actual fact it's really a second password alright this secret

00:08:36.789 --> 00:08:42.128
Key is a big long password that we have that is stored on my phone or my other device and stored on the server

00:08:42.469 --> 00:08:46.958
So in some sense that can also be compromised. It's still vulnerable to phishing and many other

00:08:47.540 --> 00:08:54.490
Security issues the problem with this like it's quite widely used the problem is but it you might accidentally get out of sync

00:08:54.490 --> 00:09:00.279
Let's imagine that you generate one of these one-time passwords, but then someone phones you up and you get distracted and you wander off

00:09:00.279 --> 00:09:04.659
Right then you generate another one try login, and you have sync and we've got a real problem

00:09:04.990 --> 00:09:11.409
So we're gonna check use instead and this is what Google authenticator. Does is use totp or a time-based one-time?

00:09:11.930 --> 00:09:17.349
Password so always happening here if we're placing our increment encounter with the current time alright

00:09:17.350 --> 00:09:19.870
So that as long as me in the server roughly at the same time

00:09:20.029 --> 00:09:23.859
We can log in we still keep this shared secret between ourselves

00:09:23.860 --> 00:09:30.430
There's obviously a few niggly details that we have to consider here, so first of all we you know, what unit of time

00:09:30.430 --> 00:09:34.689
We're using we can't use milliseconds because the chance of me in a server being on the same number of milliseconds is

00:09:34.939 --> 00:09:40.449
Astronomically low, and I can't type in the one-time password in a millisecond from it to be

00:09:40.449 --> 00:09:43.329
I mean, I could type pretty far. No, so what we do is

00:09:43.329 --> 00:09:46.959
We let's say round to the nearest or floor to the nearest 30 seconds

00:09:46.959 --> 00:09:50.169
So what you would do is you would take the Unix time number part on use time right?

00:09:50.170 --> 00:09:53.949
So you know link somewhere buried deep down inside that system?

00:09:54.280 --> 00:09:59.280
There's a little counter, but that Unix time divided by let's say 30, okay

00:09:59.280 --> 00:10:03.520
And then the floor function which basically goes down to the nearest integer

00:10:03.520 --> 00:10:05.700
So what we're saying there is in

00:10:05.800 --> 00:10:07.800
thirty-second blocks

00:10:08.200 --> 00:10:12.500
Generate a unique number right which in essence replaces this counter, right?

00:10:12.520 --> 00:10:19.400
We still use an HMAC as before now in practice in case they're out by let's say a minute or two minutes

00:10:19.580 --> 00:10:26.900
We might calculate on the server side c + 1 C minus 1 just to see if they're ok they're close enough, right?

00:10:26.900 --> 00:10:30.290
So for example when like when I look at the password on my app if

00:10:30.540 --> 00:10:31.880
it's about to expire

00:10:31.880 --> 00:10:36.170
I can still type it in because even if it's just expired it'll still be allowed, right?

00:10:36.170 --> 00:10:39.920
And it's a security parameter of these systems is how what the window size is.

00:10:40.040 --> 00:10:43.220
So I'm just oversimplifying this slightly. Actually we can

00:10:43.220 --> 00:10:47.420
subtract a start time here, right? Like the default is zero which is what I haven't bothered to talk about it

00:10:47.420 --> 00:10:49.350
but you can agree with the server a

00:10:49.350 --> 00:10:54.499
time to start and you essentially take Unix time - whatever your start time is but let's not get into too much

00:10:54.690 --> 00:10:56.809
You know in too much pedantic.

00:10:56.809 --> 00:10:59.860
Presumably that helps with the timezones, right?

00:10:59.940 --> 00:11:02.580
Yeah, I mean time zones caused a problem here

00:11:04.600 --> 00:11:05.660
That's for another video.

00:11:05.780 --> 00:11:08.240
Yeah, I know right accounting we had a video on that.

00:11:13.560 --> 00:11:16.310
From the bank. I think due for ease of a technical term

00:11:18.030 --> 00:11:24.110
Very similar so what happened so smart cards were actually to pass a little bit smarter than people think and they actually perform

00:11:24.630 --> 00:11:26.310
encryption and all kinds of things.

00:11:26.310 --> 00:11:28.310
What that machine will do is

00:11:28.500 --> 00:11:33.710
essentially a challenge response. It will send them a request of a card for it to perform a certain cryptographic function

00:11:34.050 --> 00:11:38.300
The card asks for the pin. You supply a pin and it performs a punk function

00:11:38.300 --> 00:11:42.019
which is then turned into a a one-time password, right?

00:11:42.020 --> 00:11:47.600
So it basically verifies that you are both in possession of your card and have the pin which is good news

00:11:48.450 --> 00:11:54.980
Other banks will work on this kind of principle with a time-based system, and hopefully they ask you plenty of time

00:11:54.980 --> 00:11:58.699
So in my bank to log in I have to use this device and then to send any money

00:11:58.700 --> 00:12:04.610
I also have to use this device and this stops the old the classic replay attack and time of check time of use issues

00:12:04.770 --> 00:12:06.889
Where I've logged in wandered off

00:12:07.620 --> 00:12:11.420
Stupidly left my online banking logged in and then someone has at all my money

00:12:12.000 --> 00:12:14.000
Which would be if not quite as much as they'd like

00:12:15.749 --> 00:12:18.288
I've always had a slight concern with the multi-factor authentication

00:12:18.289 --> 00:12:23.598
they've used in Star Trek where they read out their password allowed operation in front of everyone else. I mean, okay

00:12:23.599 --> 00:12:25.019
Yes, so the voice recognition

00:12:25.019 --> 00:12:28.578
Part of it. There's something they have maybe you can't steal that but now everyone knows your password

00:12:29.369 --> 00:12:33.559
It's hope they may take them daily. I'm sure they've solved it by then that we release their problems

