WEBVTT
Kind: captions
Language: en

00:00:01.710 --> 00:00:03.630
Welcome to section two.

00:00:03.630 --> 00:00:06.660
R is a powerful tool
for data analysis.

00:00:06.660 --> 00:00:09.070
And the first step to working
with data in R is to get the

00:00:09.070 --> 00:00:10.850
data into R.

00:00:10.850 --> 00:00:13.550
Suppose I have a CSV file on
my computer and I wanted to

00:00:13.550 --> 00:00:18.330
load it into R. Since I'm
running R on OS X, I could use

00:00:18.330 --> 00:00:21.010
the Command-D trick to change
my working directory to the

00:00:21.010 --> 00:00:22.420
folder with the file.

00:00:22.420 --> 00:00:24.650
But it's also helpful to know
how to navigate using the

00:00:24.650 --> 00:00:26.625
getwd and setwd functions.

00:00:29.190 --> 00:00:32.030
We'll also make use of the List
Files function, which

00:00:32.030 --> 00:00:34.510
lists the files and folders in
the current working directory.

00:00:37.190 --> 00:00:39.350
I want to get into my Google
Drive folder so I'm going to

00:00:39.350 --> 00:00:43.060
specify that in the
setwd function.

00:00:43.060 --> 00:00:45.660
Next, I'm going to print out
the folders in this Google

00:00:45.660 --> 00:00:47.870
Drive folder and navigate
to Projects.

00:00:50.770 --> 00:00:53.480
Next, I'm going to navigate
to the Top_Secret folder.

00:00:53.480 --> 00:00:55.550
And since I know there's a data
folder there, I'm just

00:00:55.550 --> 00:00:59.560
going to add this folder
into my setwd command.

00:00:59.560 --> 00:01:00.100
All right.

00:01:00.100 --> 00:01:02.650
I've arrived, and I can now see
the data set of interests

00:01:02.650 --> 00:01:04.319
in my current working
directory, the

00:01:04.319 --> 00:01:08.270
state.csv data set.

00:01:08.270 --> 00:01:10.480
Since I'll be saving this code,
I might as well save my

00:01:10.480 --> 00:01:12.980
current working directory
in a setwd command at

00:01:12.980 --> 00:01:15.710
the top of my script.

00:01:15.710 --> 00:01:17.790
This way, I won't need to set
the directory in the future

00:01:17.790 --> 00:01:22.340
unless I change the working
directory of my project files.

00:01:22.340 --> 00:01:25.460
Now that I'm ready to go, I'll
load in the state.csv file

00:01:25.460 --> 00:01:29.180
using the read.csv function,
specifying the name of the

00:01:29.180 --> 00:01:32.840
file in quotation marks.

00:01:32.840 --> 00:01:35.950
When you're reading the CSV file
into R, it's stored as a

00:01:35.950 --> 00:01:38.680
data matrix, which is more
formally called a data frame

00:01:38.680 --> 00:01:40.370
in R.

00:01:40.370 --> 00:01:42.680
Just like with a regular matrix,
I can use the dim

00:01:42.680 --> 00:01:44.950
function to see how many
rows and columns

00:01:44.950 --> 00:01:46.760
are in the data set.

00:01:46.760 --> 00:01:49.910
There are 51 rows representing
all US states and Washington,

00:01:49.910 --> 00:01:52.970
DC and 12 different columns
representing the 12 different

00:01:52.970 --> 00:01:56.040
variables recorded
for each state.

00:01:56.040 --> 00:01:59.070
I'll use the head function to
print out the first two rows

00:01:59.070 --> 00:02:01.450
of this state data set
just like I could do

00:02:01.450 --> 00:02:03.610
with a regular matrix.

00:02:03.610 --> 00:02:07.040
However, if I apply the length
function, R will just return

00:02:07.040 --> 00:02:08.729
the number of variables in
the data set, which are

00:02:08.729 --> 00:02:11.190
represented by the columns.

00:02:11.190 --> 00:02:13.290
Data frames are one of the
most common objects for

00:02:13.290 --> 00:02:16.930
holding data inside of R, and
I can subset on them in ways

00:02:16.930 --> 00:02:20.510
similar to how I might
subset a matrix.

00:02:20.510 --> 00:02:22.160
This is fine, but there
are actually better

00:02:22.160 --> 00:02:24.660
ways with data frames.

00:02:24.660 --> 00:02:27.600
A new function for data frames
worth remembering is the names

00:02:27.600 --> 00:02:31.380
function which is used to access
the variable names.

00:02:31.380 --> 00:02:33.430
Once you know the names of the
variables, it's easy to

00:02:33.430 --> 00:02:35.470
extract out the entire
variable using

00:02:35.470 --> 00:02:36.780
the data set name.

00:02:36.780 --> 00:02:38.840
Followed by a dollar sign,
then followed by

00:02:38.840 --> 00:02:40.720
the variable name.

00:02:40.720 --> 00:02:43.220
Let's take a look at
the smoke variable.

00:02:43.220 --> 00:02:45.090
The smoke variable is
a numerical variable

00:02:45.090 --> 00:02:46.690
representing the percentage
of people who

00:02:46.690 --> 00:02:49.020
smoke in each state.

00:02:49.020 --> 00:02:51.420
If I wanted, I could apply some
standard functions like

00:02:51.420 --> 00:02:54.040
the mean or standard deviation
function to get some summary

00:02:54.040 --> 00:02:57.170
information about
this variable.

00:02:57.170 --> 00:02:59.900
In addition to subsetting with
brackets, I can make use of

00:02:59.900 --> 00:03:02.110
this subset function.

00:03:02.110 --> 00:03:04.580
Here I'm going to examine only
states with smoking rates

00:03:04.580 --> 00:03:08.260
higher than 25%.

00:03:08.260 --> 00:03:10.480
If I wanted, I could also
specify that I only want to

00:03:10.480 --> 00:03:11.810
select a small number
of columns.

00:03:15.460 --> 00:03:18.105
Next, I'll take a look at the
party that won each state in

00:03:18.105 --> 00:03:20.520
the 2012 presidential
election.

00:03:20.520 --> 00:03:23.340
This is in the pres12
variable.

00:03:23.340 --> 00:03:27.030
Note that the pres12 variable
isn't numerical, yet it was

00:03:27.030 --> 00:03:29.870
stored for the smoke variable
which was a numerical object

00:03:29.870 --> 00:03:32.320
in the state data frame.

00:03:32.320 --> 00:03:34.350
Data frames can hold a different
type of variable in

00:03:34.350 --> 00:03:37.100
each column while a matrix can
only hold a single data type

00:03:37.100 --> 00:03:39.820
for the entire matrix.

00:03:39.820 --> 00:03:42.130
Notice also that the output
doesn't look like a regular

00:03:42.130 --> 00:03:44.990
string output, which generally
has quotation marks when it is

00:03:44.990 --> 00:03:46.950
printed out.

00:03:46.950 --> 00:03:48.620
Additionally, there's a listing
at the bottom that

00:03:48.620 --> 00:03:51.050
indicates there are
two levels.

00:03:51.050 --> 00:03:53.750
Output like this indicates that
this is a factor variable

00:03:53.750 --> 00:03:55.860
or a factor object.

00:03:55.860 --> 00:03:58.355
A factor object is a special
kind of object that's sort of

00:03:58.355 --> 00:04:01.150
a blend between character
and numerical variables.

00:04:01.150 --> 00:04:03.740
If you ever have substantial
trouble working with factors

00:04:03.740 --> 00:04:07.305
in R, you can just convert the
factor to a string with the

00:04:07.305 --> 00:04:09.860
as.character function.

00:04:09.860 --> 00:04:12.360
R will generally convert a
character variable back into a

00:04:12.360 --> 00:04:15.460
factor variable when it is
appropriate to do so.

00:04:15.460 --> 00:04:18.350
However, when R does do this
conversion, it may notify you

00:04:18.350 --> 00:04:19.279
with a warning.

00:04:19.279 --> 00:04:21.370
Just read your warnings
carefully and make sure that

00:04:21.370 --> 00:04:22.620
that's all that's happening.

00:04:24.870 --> 00:04:27.310
In the next video, we'll talk
about ways to take a quick

00:04:27.310 --> 00:04:30.530
look at a data object inside
of R, and we'll also take a

00:04:30.530 --> 00:04:31.780
look at date objects.

