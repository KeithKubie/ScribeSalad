WEBVTT
Kind: captions
Language: en

00:00:05.069 --> 00:00:06.069
&gt;&gt;Roman Nurik: All right.

00:00:06.069 --> 00:00:07.069
We are good.

00:00:07.069 --> 00:00:08.469
I think we are ready to go.

00:00:08.469 --> 00:00:13.200
Thank you everyone for coming to our session,
Android Design for UI Developers.

00:00:13.200 --> 00:00:16.550
Today we are going to talk about how to implement
some of those awesome patterns that we have

00:00:16.550 --> 00:00:21.710
documented on developer.android.com/design.

00:00:21.710 --> 00:00:25.140
My name is Roman Nurik.

00:00:25.140 --> 00:00:27.120
I'm on the Android developer relations team.

00:00:27.120 --> 00:00:32.480
&gt;&gt;Nick Butcher: Hi, my name is Nick Butcher,
also on the Android developer relations team.

00:00:32.480 --> 00:00:38.920
We focus on UX and design to help you guys
build awesome applications.

00:00:38.920 --> 00:00:45.239
Some of you might know us from Android design
in action, our weekly YouTube show every Tuesday

00:00:45.239 --> 00:00:49.989
on YouTube where we talk about how to design
awesome Android applications.

00:00:49.989 --> 00:00:51.050
So today's going to be slightly different.

00:00:51.050 --> 00:00:52.530
We will be focusing much more on the code.

00:00:52.530 --> 00:00:53.900
This is a developer conference.

00:00:53.900 --> 00:00:57.810
We will talk about building the cool applications
not just design them.

00:00:57.810 --> 00:01:02.199
&gt;&gt;Roman Nurik: We will cover three main themes
today.

00:01:02.199 --> 00:01:06.470
First is app navigation where we will talk
about some of the newer patterns as well as

00:01:06.470 --> 00:01:10.439
some of the existing navigation patterns that
are out there.

00:01:10.439 --> 00:01:11.710
Then Nick will talk.

00:01:11.710 --> 00:01:15.100
&gt;&gt;Nick Butcher: I'm going to tell you all
about responsive design.

00:01:15.100 --> 00:01:18.189
What it is, why you should care and how you
can go about building it in your apps.

00:01:18.189 --> 00:01:23.030
&gt;&gt;Roman Nurik: If you pay attention, if you
guys are on your laptops, if you pay attention

00:01:23.030 --> 00:01:27.190
to a single section of this session, please
listen to Nick.

00:01:27.190 --> 00:01:28.950
So whenever he talks, listen to him.

00:01:28.950 --> 00:01:30.159
&gt;&gt;Nick Butcher: No pressure.

00:01:30.159 --> 00:01:35.090
&gt;&gt;Roman Nurik: I will finish off with a discussion
of the Holo visual language specifically how

00:01:35.090 --> 00:01:42.880
to implement some of the visual characteristics
that are a part of Holo style and theme.

00:01:42.880 --> 00:01:46.780
So first let's talk about app navigation,
shall we?

00:01:46.780 --> 00:01:51.890
So anytime we talk about navigation you think
about a couple of different ways to navigate.

00:01:51.890 --> 00:01:55.009
So one of those important ways is lateral
navigation.

00:01:55.009 --> 00:02:00.270
Basically the way this which you switch between
sibling elements or kind of members of a single

00:02:00.270 --> 00:02:03.710
collection or a top-level sections in the
app.

00:02:03.710 --> 00:02:09.500
So the action bar, as probably many of you
know, is one mechanism or one tool that gives

00:02:09.500 --> 00:02:12.120
you access to lateral navigation.

00:02:12.120 --> 00:02:17.230
So you can use things like tabs or a spinner
in the action bar to provide kind of access

00:02:17.230 --> 00:02:18.850
to sibling sections.

00:02:18.850 --> 00:02:24.600
We're not going to talk about how to implement
the action bar.

00:02:24.600 --> 00:02:31.320
We have a good training class on developer.android.com/training
that talks about how to do this.

00:02:31.320 --> 00:02:34.140
Implementing effective navigation.

00:02:34.140 --> 00:02:35.609
Implementing lateral navigation.

00:02:35.609 --> 00:02:38.180
Please take a look, it's really awesome.

00:02:38.180 --> 00:02:42.109
We do want to talk about compatibility for
the action bar.

00:02:42.109 --> 00:02:47.079
So as many of you know, the action bar is
not available on versions of platform below

00:02:47.079 --> 00:02:49.639
API 11.

00:02:49.639 --> 00:02:54.340
But we have been working on something called
ActionBarCompat will give you access to the

00:02:54.340 --> 00:03:00.910
action bar and all versions 2.1 and above.

00:03:00.910 --> 00:03:06.790
The native APIs here, you have activity, fragment
activity, get action bar.

00:03:06.790 --> 00:03:10.169
The APIs for action bar compat will be similar.

00:03:10.169 --> 00:03:13.919
The overall structure of the code doesn't
change.

00:03:13.919 --> 00:03:21.160
You swap different imports, swap in different
names for classes and things and you're done.

00:03:21.160 --> 00:03:23.870
So this is not available right now, I should
mention.

00:03:23.870 --> 00:03:26.070
This is still something that we're working
on.

00:03:26.070 --> 00:03:27.810
It's going to be available very soon.

00:03:27.810 --> 00:03:31.010
If you're using the I/O app right now.

00:03:31.010 --> 00:03:36.070
It is using the action bar compat library.

00:03:36.070 --> 00:03:40.360
It is coming sooner rather than later.

00:03:40.360 --> 00:03:43.449
Like I said, it will be available on Android
2.1 and above.

00:03:43.449 --> 00:03:49.010
You will be able to use it on those versions
which is basically all devices out there.

00:03:49.010 --> 00:03:53.920
And a very important note here is that if
you are already using ActionBarSherlock, there's

00:03:53.920 --> 00:04:00.560
a phenomenal library by Jake Wharton.

00:04:00.560 --> 00:04:06.140
You shouldn't feel like you should switch
over to this version of the compatibility

00:04:06.140 --> 00:04:07.810
library.

00:04:07.810 --> 00:04:12.480
This is a phenomenal library.

00:04:12.480 --> 00:04:17.190
It's going to be very similar in terms of
APIs and so ActionBarCompat we recommend for

00:04:17.190 --> 00:04:18.190
new apps.

00:04:18.190 --> 00:04:23.530
If you are creating a new app, consider ActionBarCompat.

00:04:23.530 --> 00:04:31.950
Basically what this means, if you are thinking
about the action bar, not using it because

00:04:31.950 --> 00:04:34.131
of compatibility, you no longer have that
excuse.

00:04:34.131 --> 00:04:35.131
&gt;&gt;Nick Butcher: No excuses now.

00:04:35.131 --> 00:04:36.131
Just use it.

00:04:36.131 --> 00:04:37.930
&gt;&gt;Roman Nurik: Exactly.

00:04:37.930 --> 00:04:43.060
Another component is ViewPager.

00:04:43.060 --> 00:04:44.810
We talk about lateral navigation.

00:04:44.810 --> 00:04:48.730
We also think about swiping left and right
or the swipe views pattern.

00:04:48.730 --> 00:04:54.120
Now, ViewPager is kind of the conical implementation
of that pattern.

00:04:54.120 --> 00:04:59.150
It's covered very well in our training classes
so we're not going to go into too much detail

00:04:59.150 --> 00:05:00.150
there.

00:05:00.150 --> 00:05:03.910
The reason I mention it here, we should really
be using it if you are using any sort of horizontal

00:05:03.910 --> 00:05:07.360
paging or built this kind of conical implementation.

00:05:07.360 --> 00:05:12.270
&gt;&gt;Nick Butcher: Whenever you see tabs, think
swipe.

00:05:12.270 --> 00:05:14.410
&gt;&gt;Roman Nurik: Exactly.

00:05:14.410 --> 00:05:20.580
We do want to cover a new pattern that was
just formalized yesterday in an update to

00:05:20.580 --> 00:05:24.310
the Android design guide called navigation
drawers.

00:05:24.310 --> 00:05:29.270
So navigation drawers are for main navigation.

00:05:29.270 --> 00:05:35.780
If you have disparate sections in your app,
navigation drawers is another tool you have

00:05:35.780 --> 00:05:38.110
for navigation.

00:05:38.110 --> 00:05:41.630
I'm not going to talk about all the guidelines
here.

00:05:41.630 --> 00:05:44.680
All the documentation is published.

00:05:44.680 --> 00:05:49.830
If you click on the navigation drawer section,
you will see all that stuff.

00:05:49.830 --> 00:05:56.380
I will say that -- as many of you saw in the
Google Play music part of the keynote, the

00:05:56.380 --> 00:06:00.610
navigation drawer has a slightly different
style than you'd expect.

00:06:00.610 --> 00:06:02.990
It doesn't slide the content out of the way.

00:06:02.990 --> 00:06:05.310
The action bar stays fixed.

00:06:05.310 --> 00:06:09.480
Not sliding the content out of the way is
one way to further indicate that this is really

00:06:09.480 --> 00:06:11.190
a piece of the app's chrome.

00:06:11.190 --> 00:06:15.300
It's a piece of chrome like the action bar
that sits atop of your content.

00:06:15.300 --> 00:06:16.970
So the content is stable there.

00:06:16.970 --> 00:06:21.550
The other thing that this does is it helps
preserve the horizontal gesture space.

00:06:21.550 --> 00:06:26.240
So if your content involves things like swiping
to dismiss and things like that, it's still

00:06:26.240 --> 00:06:28.060
very compatible with this pattern.

00:06:28.060 --> 00:06:32.830
&gt;&gt;Nick Butcher: In contrast to what you were
saying about action bar, if you are using

00:06:32.830 --> 00:06:39.460
some of the other community libraries out
there, you might consider moving to this official

00:06:39.460 --> 00:06:43.320
library because this implements all of our
best practices and UX that we recommend you

00:06:43.320 --> 00:06:44.320
use.

00:06:44.320 --> 00:06:45.320
So really do consider that.

00:06:45.320 --> 00:06:46.320
&gt;&gt;Roman Nurik: Exactly.

00:06:46.320 --> 00:06:49.010
I want to show you a quick video of what this
looks like.

00:06:49.010 --> 00:06:56.740
The activity content, you press on the left,
bezel, it peaks for a bit.

00:06:56.740 --> 00:06:58.970
You can interact with it, of course.

00:06:58.970 --> 00:07:02.900
Then you can also kind of swipe to hide it.

00:07:02.900 --> 00:07:08.270
You can also touch on the action bar's top
left area to show and hide it as well.

00:07:08.270 --> 00:07:12.611
So there are a lot of kind of unique little
things about this, this pattern, and we're

00:07:12.611 --> 00:07:15.950
going to talk about how to implement this
pattern using some of the new features in

00:07:15.950 --> 00:07:21.330
the support library just released yesterday.

00:07:21.330 --> 00:07:26.360
So to implement a navigation drawer, the very
first thing you do is in your activity content

00:07:26.360 --> 00:07:31.050
you replace the top level layer with a DrawerLayout.

00:07:31.050 --> 00:07:34.520
It works on API 4 and above.

00:07:34.520 --> 00:07:36.980
Which is basically every device out there.

00:07:36.980 --> 00:07:41.110
This DrawerLayout contains two children -- should
contain two children.

00:07:41.110 --> 00:07:44.400
The first is the actual activity content.

00:07:44.400 --> 00:07:47.010
So everything that you had in your activity
before.

00:07:47.010 --> 00:07:51.960
And then the second child of the DrawerLayout
should be the actual drawer that slides out

00:07:51.960 --> 00:07:55.550
and that's usually going to be something like
a ListView or a GridView or something.

00:07:55.550 --> 00:07:56.669
Generally a ListView.

00:07:56.669 --> 00:08:01.800
Now, you can set the width of this to fix
that width to whatever you want.

00:08:01.800 --> 00:08:05.960
We recommend somewhere between 240dp and 320dp
of width.

00:08:05.960 --> 00:08:09.990
You can vary that, of course, by device if
you find on larger screen devices you want

00:08:09.990 --> 00:08:12.419
a slightly larger drawer.

00:08:12.419 --> 00:08:18.889
Now, that gets you -- just doing that gets
you all the edge swipe stuff.

00:08:18.889 --> 00:08:20.590
It does a lot of things for you.

00:08:20.590 --> 00:08:24.639
But another important part of the drawer is
how it interacts with the action bar.

00:08:24.639 --> 00:08:31.550
So for that we have another component that's
part of the support library r13 called ActionBarDrawerToggle.

00:08:31.550 --> 00:08:35.740
That's basically kind of a helper method or
helper class that ties the action bar with

00:08:35.740 --> 00:08:36.740
the drawer.

00:08:36.740 --> 00:08:40.770
So you simply create a new -- substantiate
the ActionBarDrawerToggle.

00:08:40.770 --> 00:08:41.800
Give it the activity.

00:08:41.800 --> 00:08:43.760
Give it the drawer layout itself.

00:08:43.760 --> 00:08:48.540
You give it the icon to show on the top left
because that icon is custom for navigation

00:08:48.540 --> 00:08:54.960
drawers and then you basically set this action
bar drawer toggle instance as the DrawerListener

00:08:54.960 --> 00:08:56.560
for the DrawerLayout.

00:08:56.560 --> 00:08:59.360
Now, one quick note about the icon.

00:08:59.360 --> 00:09:00.640
It's available for download.

00:09:00.640 --> 00:09:06.490
We have both Holo light and Holo dark variations
and all the densities available for download.

00:09:06.490 --> 00:09:11.260
You should customize this.

00:09:11.260 --> 00:09:17.870
Changing the colors and such, make sure you
customize this to fit in with the theme.

00:09:17.870 --> 00:09:21.760
One other important -- I guess, very important
part of the action bar drawer toggle is that

00:09:21.760 --> 00:09:26.420
you need to pass through the onOptionsItemSelected
method from your activity.

00:09:26.420 --> 00:09:32.960
This takes care of actually handling button
presses on the action bar's top left area.

00:09:32.960 --> 00:09:38.490
Basically it just handles the android.R.id.home
click.

00:09:38.490 --> 00:09:40.880
That's basically it for navigation drawers.

00:09:40.880 --> 00:09:43.360
That's really all the main code that you need.

00:09:43.360 --> 00:09:44.360
It's really easy to do.

00:09:44.360 --> 00:09:48.540
You guys should absolutely start using it
if it makes sense for your app.

00:09:48.540 --> 00:09:55.870
Again, this is all available in the support
library r13 which was pushed yesterday.

00:09:55.870 --> 00:10:00.460
So one last note, I guess, on navigation is
up navigation.

00:10:00.460 --> 00:10:05.440
So we had a talk -- full talk dedicated to
up and back navigation last year from Adam

00:10:05.440 --> 00:10:07.600
Powell and Rich Fulcher last year.

00:10:07.600 --> 00:10:12.580
This year we wanted to give you tips and tricks
for up.

00:10:12.580 --> 00:10:19.140
The first thing to do to implement up is tell
the action bar to show the up button.

00:10:19.140 --> 00:10:21.650
You can do that by using this method here.

00:10:21.650 --> 00:10:27.950
Now, Jelly Bean, as of Android 4.1, you can
automatically -- or the system will automatically

00:10:27.950 --> 00:10:30.060
handle up presses for you.

00:10:30.060 --> 00:10:34.180
You simply give a parent activity name for
each of your activities and the system will

00:10:34.180 --> 00:10:38.100
take care of taking you to the right place
when you press up.

00:10:38.100 --> 00:10:42.020
For earlier versions of the platform, you
can use this meta data element to supply that

00:10:42.020 --> 00:10:44.149
same value.

00:10:44.149 --> 00:10:49.360
That's worth noting that in a lot of cases
you have to customize where you go when the

00:10:49.360 --> 00:10:50.810
user presses up.

00:10:50.810 --> 00:10:54.950
Rather than handling all the up stuff yourself,
simply override these two methods.

00:10:54.950 --> 00:11:02.230
You override the getParentActivityIntent method
to tell the platform which activity to visit

00:11:02.230 --> 00:11:03.250
when you press up.

00:11:03.250 --> 00:11:08.100
You can also customize what happens by providing
extras that you would then handle in that

00:11:08.100 --> 00:11:09.100
activity.

00:11:09.100 --> 00:11:14.850
Then you can also override the onCreateNavigateUpTaskStack
method to basically customize what happens

00:11:14.850 --> 00:11:18.500
when you are navigating up outside of your
core task.

00:11:18.500 --> 00:11:22.790
So this happens, for example, if you get to
your app from something like gmail.

00:11:22.790 --> 00:11:24.790
Pressing up should stay within your app.

00:11:24.790 --> 00:11:27.090
This let's you customize what happens there.

00:11:27.090 --> 00:11:32.070
You'll see that it still mirrors the overall
structure of your app, how you got to that

00:11:32.070 --> 00:11:33.070
activity.

00:11:33.070 --> 00:11:34.070
So I think that's it for navigation.

00:11:34.070 --> 00:11:38.529
I'm going to go off and hand things to Nick
to talk about responsive design.

00:11:38.529 --> 00:11:42.330
&gt;&gt;Nick Butcher: Thanks, Roman.

00:11:42.330 --> 00:11:46.500
Part of the joy and strength of the Android
is the variety of devices.

00:11:46.500 --> 00:11:49.970
Small phones, big phones, tablets, everything
in between.

00:11:49.970 --> 00:11:54.279
As developers that can perhaps seem daunting
to make sure your UI is going to look great

00:11:54.279 --> 00:11:58.030
on those different sized devices.

00:11:58.030 --> 00:12:02.840
So luckily Android has been built from the
very beginning to deal with this kind of difference

00:12:02.840 --> 00:12:03.940
sized devices.

00:12:03.940 --> 00:12:06.730
So it has lots of greats tricks in there.

00:12:06.730 --> 00:12:11.779
RelativeLayout and layout weights and so forth
will help to you build a scalable UI.

00:12:11.779 --> 00:12:15.000
I hope that you are using all these things
already.

00:12:15.000 --> 00:12:18.709
The problem with this is that scaling your
UI up and down is only going to get you so

00:12:18.709 --> 00:12:19.709
far.

00:12:19.709 --> 00:12:25.900
I will outline issues you may run into if
you are relying on scaling techniques and

00:12:25.900 --> 00:12:30.250
how you can better work around them.

00:12:30.250 --> 00:12:33.790
So one of the challenges you might encounter
if you are scaling is something like this

00:12:33.790 --> 00:12:36.870
where you have excessively wide layout.

00:12:36.870 --> 00:12:41.730
Here we are running text and images to the
entire width of the device and it produces

00:12:41.730 --> 00:12:45.410
quite an uncomfortable reading experience
which is hard to scan.

00:12:45.410 --> 00:12:50.540
Ideally, aim for line length of 45 to 75 characters.

00:12:50.540 --> 00:12:54.730
Anything longer is going to feel very uncomfortable
and not easy to use.

00:12:54.730 --> 00:12:57.910
We don't have great tooling for automatically
detecting line lengths.

00:12:57.910 --> 00:13:04.920
But you can use the multi-config editor which
will help you to get an idea and visually

00:13:04.920 --> 00:13:09.840
inspect what your layouts is going to look
like on a variety of different devices.

00:13:09.840 --> 00:13:12.970
One hint that you might look for that you
run into in this issue is whenever you find

00:13:12.970 --> 00:13:18.840
yourself typing this, like layout_width="match_parent",
stop and think how is this going to scale

00:13:18.840 --> 00:13:20.120
up to larger devices?

00:13:20.120 --> 00:13:25.600
Is this going to lead to this excessively
long line length issue?

00:13:25.600 --> 00:13:29.810
Another challenge to run into is something
like this, where you end up with a very unbalanced

00:13:29.810 --> 00:13:31.650
kind of UI.

00:13:31.650 --> 00:13:33.080
So here in this example application.

00:13:33.080 --> 00:13:36.510
We can see all of the content is kind of,
like, clustered together tightly into the

00:13:36.510 --> 00:13:41.029
top left-hand corner leaving a huge space
around.

00:13:41.029 --> 00:13:47.180
You can encounter this behavior if you are
using a list-driven application.

00:13:47.180 --> 00:13:52.300
And you end up with this huge amount of white
space on the other side on larger devices.

00:13:52.300 --> 00:13:54.519
What you really want to ideally go for is
a more balanced look.

00:13:54.519 --> 00:13:59.370
You want to be able to step back and squint
at your application and have an overall balance

00:13:59.370 --> 00:14:01.010
distribution of your content.

00:14:01.010 --> 00:14:07.100
A missed opportunity is the last one.

00:14:07.100 --> 00:14:11.010
When your app is running on a larger device,
you want to take advantage that you have this

00:14:11.010 --> 00:14:12.810
extra room, extra space.

00:14:12.810 --> 00:14:15.820
Put your content first, really enjoy it.

00:14:15.820 --> 00:14:19.200
Here's an example of an application which
is perhaps showing a lot of imagery.

00:14:19.200 --> 00:14:23.470
The images come out very small and you can't
see them very well.

00:14:23.470 --> 00:14:26.660
Such a shame that you are not actually reacting
to the amount of space available on the device

00:14:26.660 --> 00:14:29.620
and showing them off.

00:14:29.620 --> 00:14:32.900
So those are some of the challenges you might
get into in scaling approaches.

00:14:32.900 --> 00:14:36.860
Here are strategies.

00:14:36.860 --> 00:14:39.890
The first strategy is combination.

00:14:39.890 --> 00:14:44.810
This is where you have more space available
to you on a device.

00:14:44.810 --> 00:14:49.240
You combine different content.

00:14:49.240 --> 00:14:52.850
On a phone or smaller device, you have two
layouts which you combine together when you

00:14:52.850 --> 00:14:55.510
have sufficient room.

00:14:55.510 --> 00:14:58.310
Building this kind of layout is easier if
you are already embracing fragments.

00:14:58.310 --> 00:15:00.580
Fragments have been pretty well covered.

00:15:00.580 --> 00:15:02.580
I will not take you through them.

00:15:02.580 --> 00:15:08.170
They are building blocks to reduce your app
down to so it makes it easier to define individual

00:15:08.170 --> 00:15:10.120
blocks and lay them out differently.

00:15:10.120 --> 00:15:14.970
You only have to code them once and then move
them around.

00:15:14.970 --> 00:15:22.150
To build this kind of master detail, you can
use this trick alternate layouts.

00:15:22.150 --> 00:15:30.019
All of those activities includes a single
fragment filling up the whole screen.

00:15:30.019 --> 00:15:37.460
On larger devices, we override that same activity
and include both fragments at once.

00:15:37.460 --> 00:15:42.660
I'm using the layout-w resource qualifier.

00:15:42.660 --> 00:15:50.230
Devices that have 600dps of width, pick up
this configuration instead.

00:15:50.230 --> 00:15:53.990
Easier than writing all that, is using this
template.

00:15:53.990 --> 00:15:57.640
Use this code to create a master detail flow.

00:15:57.640 --> 00:15:59.050
Work through the wizard.

00:15:59.050 --> 00:16:01.029
Give it to your objects.

00:16:01.029 --> 00:16:04.390
It will generate the activity.

00:16:04.390 --> 00:16:07.830
It is getting much easier to create this kind
of layout.

00:16:07.830 --> 00:16:13.410
&gt;&gt;Roman Nurik: It's worth noting this isn't
currently available in Android studio, Tor

00:16:13.410 --> 00:16:15.070
would be able to tell us.

00:16:15.070 --> 00:16:19.600
It is not available but it is something we
are going to work on to get it in there.

00:16:19.600 --> 00:16:21.660
This is an important tool.

00:16:21.660 --> 00:16:27.550
&gt;&gt;Nick Butcher: And another tool for building
these combination approaches is another custom

00:16:27.550 --> 00:16:31.650
layout that has just launched in r13 of the
support library, just went out yesterday.

00:16:31.650 --> 00:16:34.000
That's a SlidingPaneLayout.

00:16:34.000 --> 00:16:37.000
The SlidingPaneLayout that you use to build
these two-column views.

00:16:37.000 --> 00:16:40.370
You see this is my master; this is my detailed
pane.

00:16:40.370 --> 00:16:42.800
If there's enough room it, will lay them out
next to each other.

00:16:42.800 --> 00:16:48.709
If there isn't, like the case on the right,
it will overlap so one is on top of each other.

00:16:48.709 --> 00:16:56.709
Sliding the finger across will reveal them,
the master pane again, and you can click or

00:16:56.709 --> 00:16:59.130
slide back to go to overlapping view.

00:16:59.130 --> 00:17:05.370
It is worth calling out differences to how
this is different than the DrawLayout.

00:17:05.370 --> 00:17:07.549
These two panes really are in the same plane.

00:17:07.549 --> 00:17:13.309
So unlike the navigation draw where chrome
comes across the top, these are content panes.

00:17:13.309 --> 00:17:18.659
They move together so you can think of them
as being very tightly connected.

00:17:18.659 --> 00:17:26.889
&gt;&gt;Roman Nurik: To summarize it is to say that
drawer layout is for primary app navigation.

00:17:26.889 --> 00:17:29.059
Really kind of chrome versus content.

00:17:29.059 --> 00:17:30.539
This is all about content.

00:17:30.539 --> 00:17:35.779
This is effectively a tool to take master
detail flows and simplify them across different

00:17:35.779 --> 00:17:37.820
orientations and tablets.

00:17:37.820 --> 00:17:40.090
&gt;&gt;Nick Butcher: Awesome.

00:17:40.090 --> 00:17:46.379
To implement this SlidingPaneLayout, you define
it as root layout and give it two children.

00:17:46.379 --> 00:17:49.870
The first child is going to form that master
or left-hand pane and the second child is

00:17:49.870 --> 00:17:52.080
going to be the content pane.

00:17:52.080 --> 00:17:57.299
So you define a layout width for each of those
and if the sum of those two widths exceeds

00:17:57.299 --> 00:18:01.360
the amount of space available on the device,
they will overlap and you have this sliding

00:18:01.360 --> 00:18:02.360
behavior.

00:18:02.360 --> 00:18:05.429
If the device has enough room, it will show
them side by side.

00:18:05.429 --> 00:18:10.100
You can also set a layout weight of one on
the content pane which means it will expand

00:18:10.100 --> 00:18:12.539
to fill the extra space like when it is shown
on its own.

00:18:12.539 --> 00:18:15.940
You can really think of the content pane's
layout_width as the minimum size.

00:18:15.940 --> 00:18:22.840
This is an easy way to build a responsive
layout.

00:18:22.840 --> 00:18:25.450
So that was it for combination-type strategies.

00:18:25.450 --> 00:18:29.489
The next strategy to go on to is what we call
macro reflow.

00:18:29.489 --> 00:18:34.139
The idea of this reflow is to rearrange the
major blocks of your content.

00:18:34.139 --> 00:18:39.119
So here is an example where we can see when
shown on a larger device in landscape we reflow

00:18:39.119 --> 00:18:44.139
it down to rearrange the content blocks to
avoid those problems of having really excessive

00:18:44.139 --> 00:18:47.039
line lanes or unbalanced content.

00:18:47.039 --> 00:18:55.120
Here you can see by using fragments, we just
defined the content once and very simply just

00:18:55.120 --> 00:18:58.659
using a different layout, just specifies an
orientation.

00:18:58.659 --> 00:19:01.510
When it is landscape, they will be stacked
next to each other.

00:19:01.510 --> 00:19:03.970
When they are in portrait, they will be stacked
on top of each other.

00:19:03.970 --> 00:19:06.890
Really simple but makes a huge difference.

00:19:06.890 --> 00:19:12.850
So the next strategy to know is what we are
calling micro reflow.

00:19:12.850 --> 00:19:16.419
So rather than taking these major blocks and
moving them around, it is actually going to

00:19:16.419 --> 00:19:22.680
look at the individual blocks and change representation
depending on how much space they have to layout.

00:19:22.680 --> 00:19:26.559
So this kind of micro reflow makes huge use
of what we call dimension files.

00:19:26.559 --> 00:19:28.169
Hopefully a lot of you are using these already.

00:19:28.169 --> 00:19:29.960
I want to stress it in case anyone isn't.

00:19:29.960 --> 00:19:31.498
This approach makes huge use of dimension
files, so I hope a lot of you are using these.

00:19:31.498 --> 00:19:35.720
Just like in your layouts, I hope none of
you are hard coding strings into your layouts.

00:19:35.720 --> 00:19:42.460
The same is true for your layout configurations
and your sizing and dimensions and so forth.

00:19:42.460 --> 00:19:46.190
You really want to be putting all of those
things into a dimensions file or a style for

00:19:46.190 --> 00:19:47.190
two reasons.

00:19:47.190 --> 00:19:52.639
Firstly, it let's you reuse these same dimensions
across different screens throughout your app

00:19:52.639 --> 00:19:56.519
so you can have consistent margins and consistent
text sizing throughout your application.

00:19:56.519 --> 00:20:01.840
And secondly, it let's you override them and
provide alternative sizes and dimensions on

00:20:01.840 --> 00:20:03.080
different sized devices.

00:20:03.080 --> 00:20:09.130
In this example we've defined standard dimensions
for text sizes and margins and line spacing,

00:20:09.130 --> 00:20:10.190
for example.

00:20:10.190 --> 00:20:14.480
Define them in this dimensions file and use
them throughout the application's' different

00:20:14.480 --> 00:20:15.480
screens.

00:20:15.480 --> 00:20:18.799
And then on a larger device, you can provide
different sizes so it's really simple to use

00:20:18.799 --> 00:20:24.149
the same layout but bump up the text sizing
and other margin sizes or line spacing to

00:20:24.149 --> 00:20:25.720
get a better experience on a larger device.

00:20:25.720 --> 00:20:31.679
&gt;&gt;Roman Nurik: This helps recompose your screens
on larger devices to rebalance.

00:20:31.679 --> 00:20:34.940
When you step away and you squint and you
look at the screen, you kind of see everything

00:20:34.940 --> 00:20:36.940
smooshed to the top left.

00:20:36.940 --> 00:20:39.889
This type of approach will really help rebalance
things.

00:20:39.889 --> 00:20:44.009
It's very, very important to use this technique
especially for tablet UIs.

00:20:44.009 --> 00:20:47.090
&gt;&gt;Nick Butcher: One point to especially call
out here.

00:20:47.090 --> 00:20:51.330
In this example, I'm using the SW or smallest
width qualifier.

00:20:51.330 --> 00:20:55.759
What this does is looks at smallest width
of the device which is the width in portrait.

00:20:55.759 --> 00:20:57.249
It just uses that.

00:20:57.249 --> 00:21:00.639
So it's an orientation agnostic qualifier.

00:21:00.639 --> 00:21:04.249
The reason I've chosen to use this here is
some of these dimensions, you don't want them

00:21:04.249 --> 00:21:06.419
altered just because you rotated a device.

00:21:06.419 --> 00:21:11.489
It can jarring to change text size when you
rotate your device as it will re-layout so

00:21:11.489 --> 00:21:15.190
also chaninging text size could cause confusion.

00:21:15.190 --> 00:21:20.840
Using something like SW, orientation agnostic
qualifier, you can keep dimensions stable

00:21:20.840 --> 00:21:25.909
while some dimensions will change.

00:21:25.909 --> 00:21:31.659
So some examples of doing this kind of micro
reflow is margin point.

00:21:31.659 --> 00:21:35.980
Sometimes you can't use combination or reflow
to move around or show more content on the

00:21:35.980 --> 00:21:40.450
screeb but you still want to avoid unbalanced
or excessively long line lengths.

00:21:40.450 --> 00:21:44.470
Instead, you can simply introduce page margins.

00:21:44.470 --> 00:21:50.029
So a technique for doing this is setting a
style onto your content container here called

00:21:50.029 --> 00:21:51.029
MarginPoint.

00:21:51.029 --> 00:21:55.539
We will use that style to provide the layout
width of the content container.

00:21:55.539 --> 00:21:59.279
On a smaller device, the style is going to
say match the parent here.

00:21:59.279 --> 00:22:04.289
It's going to grow up until you reach max
much size you want the content to reach, here

00:22:04.289 --> 00:22:05.809
we're using 600dps.

00:22:05.809 --> 00:22:09.850
When it reaches that size, it will clamp and
never continue to grow any larger.

00:22:09.850 --> 00:22:14.549
Also by setting a layout gravity of center,
it will put the content in the center and

00:22:14.549 --> 00:22:18.759
have these margin points so you don't get
this excessively wide or unbalanced feel.

00:22:18.759 --> 00:22:21.690
&gt;&gt;Roman Nurik: Two quick points.

00:22:21.690 --> 00:22:28.340
The w600dp modifier, qualifier, if you will,
so it's important to note that that is the

00:22:28.340 --> 00:22:31.119
width of the screen and not the width of the
content.

00:22:31.119 --> 00:22:37.200
So if your content has extra padding or margins
or such, make sure to account for that when

00:22:37.200 --> 00:22:39.990
you are doing the math to determine the switching
point.

00:22:39.990 --> 00:22:44.299
Another point I wanted to make is that this
might not work for every scenario.

00:22:44.299 --> 00:22:52.580
It's perfectly okay in some cases to use dialogs
on tablets and full screen activities on phones,

00:22:52.580 --> 00:22:53.580
phone size UIs.

00:22:53.580 --> 00:23:00.330
The way to do that is to use the Theme.Holo.DialogWhenLarge
theme.

00:23:00.330 --> 00:23:05.289
Customize that using a similar resource qualifier
based approach.

00:23:05.289 --> 00:23:12.119
&gt;&gt;Nick Butcher: So the last point to give
you on doing this kind of micro reflow approach

00:23:12.119 --> 00:23:14.359
is switching from lists to grids.

00:23:14.359 --> 00:23:18.440
So as I mentioned before, ListViews can feel
unbalanced when they grow to larger devices.

00:23:18.440 --> 00:23:22.479
It's going to be great to switch over to a
grid representation that you have content

00:23:22.479 --> 00:23:23.479
that works for it.

00:23:23.479 --> 00:23:27.720
Something that has a consistent height or
has a very visual kind of graphic which you

00:23:27.720 --> 00:23:29.799
can include, this can work really, really
well.

00:23:29.799 --> 00:23:37.229
So to build this kind of approach, instead
of using a ListView, you simply use a GridView

00:23:37.229 --> 00:23:38.520
in the layout.

00:23:38.520 --> 00:23:41.230
You then use an integer resource for the number
of columns attribute.

00:23:41.230 --> 00:23:46.880
You can then define the number of columns
it will show based on the size of the device.

00:23:46.880 --> 00:23:52.220
By default, going into single column which
will give you the ListView representation.

00:23:52.220 --> 00:23:56.379
On larger devices, step up to two or more
columns.

00:23:56.379 --> 00:24:00.679
You simply need to respect that change in
your adapter.

00:24:00.679 --> 00:24:06.799
So in your adapter, you can query that very
same integer resource and find out how many

00:24:06.799 --> 00:24:12.260
columns the GridView wants to use and inflate
a different layout for the individual item

00:24:12.260 --> 00:24:17.099
so it can be a list style item in a single
column or grid style layout in multiple column

00:24:17.099 --> 00:24:18.099
view.

00:24:18.099 --> 00:24:22.740
&gt;&gt;Roman Nurik: GridView and ListView are very
similar in terms of API.

00:24:22.740 --> 00:24:28.049
They both inherit -- they both sub class the
AbsListView class.

00:24:28.049 --> 00:24:33.889
So switching between ListView and GridView
on different cases, that's also possible as

00:24:33.889 --> 00:24:34.889
well.

00:24:34.889 --> 00:24:36.909
So definitely feel free to do that in your
apps.

00:24:36.909 --> 00:24:37.919
&gt;&gt;Nick Butcher: Cool.

00:24:37.919 --> 00:24:42.940
Those are some of the challenges you might
encounter with a scalable approach and how

00:24:42.940 --> 00:24:45.650
responsive design can help to you get around
them.

00:24:45.650 --> 00:24:50.690
And one point I wanted to make, in all of
those kind of strategies we just talked through,

00:24:50.690 --> 00:24:54.309
never once did we talk about a phone layout
and tablet layout.

00:24:54.309 --> 00:25:05.739
Each of them was based upon the content; it
took a content-first approach.

00:25:05.739 --> 00:25:10.059
So by defining your content on, you know,
these switching points, instead of thinking

00:25:10.059 --> 00:25:13.570
in like strict device terms you kind of future
proof yourself a little bit.

00:25:13.570 --> 00:25:17.349
Who knows whatever size and shape or orientation
aspect ratio device is going to come around

00:25:17.349 --> 00:25:20.399
the corner, and you want your application
to be able to cope with them.

00:25:20.399 --> 00:25:24.419
By putting you content first and thinking
about your content to size it, whatever device

00:25:24.419 --> 00:25:27.679
comes along we'll just pick the most appropriate
one that's going to work for it.

00:25:27.679 --> 00:25:32.409
So now I'll hand it back to Roman to give
you pro-tips on implementing the Holo visual

00:25:32.409 --> 00:25:33.409
language.

00:25:33.409 --> 00:25:39.889
&gt;&gt;Roman Nurik: So holo visual language, that
means a couple of different things.

00:25:39.889 --> 00:25:44.360
Just for some really quick exposition or I
guess background, I guess, back in Android

00:25:44.360 --> 00:25:50.820
3.0, Honeycomb, we redesigned or rethought
the UI for Android and that kind of manifested

00:25:50.820 --> 00:25:52.179
in this Holo visual language.

00:25:52.179 --> 00:25:57.599
And there are two major tenets that I can
think of right now about the Holo visual language

00:25:57.599 --> 00:26:01.000
that are important to note as we go through
the process of implementing it.

00:26:01.000 --> 00:26:08.149
The first is a refocus on content versus chrome,
so we want to spend as many of the pixels

00:26:08.149 --> 00:26:12.600
as we have available to us on content rather
than showing boxes and borders and things

00:26:12.600 --> 00:26:13.860
like the chrome.

00:26:13.860 --> 00:26:19.429
It's kind of like a refocus on showing the
information rather than the machinery behind

00:26:19.429 --> 00:26:21.409
it that makes everything work.

00:26:21.409 --> 00:26:27.299
The second tenet, I guess it's a sub-tenet
of the first one, is really a focus on space

00:26:27.299 --> 00:26:32.549
and typography to communicate hierarchy rather
than things like borders and boxes and so

00:26:32.549 --> 00:26:33.549
on.

00:26:33.549 --> 00:26:37.169
So as we go through this process, keep that
in mind because that's kind of what influences

00:26:37.169 --> 00:26:38.639
some of these decisions.

00:26:38.639 --> 00:26:43.659
So the very first thing you need to do to
implement Holo, use the Holo visual language

00:26:43.659 --> 00:26:49.330
in your app, is to inherit the Theme.Holo
theme or one of its descendents.

00:26:49.330 --> 00:26:55.700
So one thing to note is this is only available
on API 11 and higher, Android 3.0 and higher,

00:26:55.700 --> 00:27:00.090
so one thing you can do to mitigate that is
to have this kind of switching behavior for

00:27:00.090 --> 00:27:01.340
the base theme.

00:27:01.340 --> 00:27:06.619
You can inherit Theme.Holo.Light, for example,
on API 11 or higher and then just Theme.Light,

00:27:06.619 --> 00:27:09.690
which is available everywhere in other versions
of the platform.

00:27:09.690 --> 00:27:13.779
&gt;&gt;Nick Butcher: This trick of actually having
a base, like a level of indirection between

00:27:13.779 --> 00:27:17.639
the inherited theme from the base theme, which
has like a different switching point is really

00:27:17.639 --> 00:27:21.909
handy because some of the platform behaviors
which you want to take advantage of may have

00:27:21.909 --> 00:27:26.169
been introduced in different API levels and
using this base theme behavior lets you insert

00:27:26.169 --> 00:27:28.070
them into your hierarchy.

00:27:28.070 --> 00:27:29.070
It's really handy.

00:27:29.070 --> 00:27:32.499
&gt;&gt;Roman Nurik: We use this a lot in the I/O
app which will be open sourced at some point

00:27:32.499 --> 00:27:35.210
very soon so you can see how we make use of
this.

00:27:35.210 --> 00:27:40.249
I do want to mention that when we release
the ActionBarCompat library it will handle

00:27:40.249 --> 00:27:45.450
a lot of this stuff for you for your activities
theme or your applications theme.

00:27:45.450 --> 00:27:50.359
Simply you would inherit Theme.Appcompat.Light,
but the file name might change.

00:27:50.359 --> 00:27:54.730
Rather than switch on this you can just inherit
on this.

00:27:54.730 --> 00:27:56.909
This is again coming soon.

00:27:56.909 --> 00:28:02.379
So once you've inherited the Theme.Holo theme
-- we should figure out a better way to say

00:28:02.379 --> 00:28:03.529
that.

00:28:03.529 --> 00:28:07.669
Once you've inherited that theme it's time
to use some of the resources that the framework

00:28:07.669 --> 00:28:08.669
gives you for free.

00:28:08.669 --> 00:28:12.809
And one of the favorite things that you like
to say, Nick, is lean on the framework.

00:28:12.809 --> 00:28:16.409
Use what it gives you for free so you don't
have to reimplement all of this stuff from

00:28:16.409 --> 00:28:17.409
scratch.

00:28:17.409 --> 00:28:20.119
&gt;&gt;Nick Butcher: There's nothing worse than
trying to imitate the way the stock UI looks

00:28:20.119 --> 00:28:22.190
because you might overlook a slight detail.

00:28:22.190 --> 00:28:25.390
You can actually just reuse the same styles
that we used to build it and then you will

00:28:25.390 --> 00:28:26.730
get the exact same consistent behavior.

00:28:26.730 --> 00:28:30.809
I think I stole that saying from Rich Fulcher!
&gt;&gt;Roman Nurik: Exactly.

00:28:30.809 --> 00:28:35.649
So one thing you will notice is that in the
next couple of screens, next couple of slides,

00:28:35.649 --> 00:28:40.159
we're going to be using this question mark
android colon syntax, and that is basically

00:28:40.159 --> 00:28:41.950
a theme attribute reference.

00:28:41.950 --> 00:28:46.599
We're basically accessing something that is
stored in the theme, whether it be a dimension

00:28:46.599 --> 00:28:51.559
file, like the listPreferredItemHeightSmall,
which is the standard item height for a small

00:28:51.559 --> 00:28:56.159
list item, or a style resource for like loading
spinners.

00:28:56.159 --> 00:29:01.299
So for example, to create a large loading
spinner or indeterminate -- indeterminate

00:29:01.299 --> 00:29:06.460
progress view, you simply create a progress
bar and set its style to the question mark

00:29:06.460 --> 00:29:11.129
Android progress bar style large attributes,
theme attribute.

00:29:11.129 --> 00:29:14.720
And then if you want to use drawables, for
example, we have built in drawables into all

00:29:14.720 --> 00:29:21.559
the themes so you can use the listChoiceIndicatorSingle
drawable as, for example, the drawableTop

00:29:21.559 --> 00:29:24.460
attribute in a TextView or drawableLeft or
such.

00:29:24.460 --> 00:29:26.299
So really you get a lot of stuff for free.

00:29:26.299 --> 00:29:31.970
I definitely advise you guys to take a look
at the docs for the android.R.Attr Java class,

00:29:31.970 --> 00:29:33.830
I guess.

00:29:33.830 --> 00:29:37.989
It contains a whole bunch of these you can
use in your apps.

00:29:37.989 --> 00:29:42.070
So I want to talk a little bit about that
space and typography stuff.

00:29:42.070 --> 00:29:43.460
The first is space.

00:29:43.460 --> 00:29:45.679
Take a look at this screen.

00:29:45.679 --> 00:29:52.099
So I think there's kind of a fundamental problem
with this screen in that it's lacking visual

00:29:52.099 --> 00:29:53.409
hierarchy, visual structure.

00:29:53.409 --> 00:29:58.789
There's kind of just floating elements out
in this massive space that don't really have

00:29:58.789 --> 00:30:00.840
any sort of hierarchy.

00:30:00.840 --> 00:30:04.509
So one way in which we can fix this is to
introduce dividers.

00:30:04.509 --> 00:30:10.739
So these dividers are basically just that,
they divide different sections of the screen.

00:30:10.739 --> 00:30:15.750
It's really kind of using the minimal amount
of pixels possible to introduce hierarchy

00:30:15.750 --> 00:30:18.469
rather than using boxes and borders and things.

00:30:18.469 --> 00:30:20.659
To implement these dividers it's fairly simple.

00:30:20.659 --> 00:30:25.129
You simply set the show dividers attribute
on a linear layout to middle to draw these

00:30:25.129 --> 00:30:29.980
dividers in between the different children
of the linear layout, and then you provide

00:30:29.980 --> 00:30:32.369
the drawable to draw in that space.

00:30:32.369 --> 00:30:36.799
And as you can see here we provide -- the
system provides a standard drawable for that

00:30:36.799 --> 00:30:37.799
space.

00:30:37.799 --> 00:30:43.779
It's also, you know, worth noting that in
addition to using dividers to introduce hierarchy

00:30:43.779 --> 00:30:50.210
you should still be using the standard 16
dp margins and the standard 48 dp visual rhythm

00:30:50.210 --> 00:30:55.220
that we talk about in the design guide, and
that will really help establish a structure

00:30:55.220 --> 00:30:59.529
and kind of like a rhythm to your screens.

00:30:59.529 --> 00:31:03.879
So another thing I wanted to talk about with
dividers is divider padding.

00:31:03.879 --> 00:31:08.380
So if you provide the divider padding attribute
here, it's eight dp's, it will actually draw

00:31:08.380 --> 00:31:12.620
some space above and below or to the left
and right of the divider, and this really

00:31:12.620 --> 00:31:14.710
helps introduce further hierarchy.

00:31:14.710 --> 00:31:19.539
So in this case imagine that we didn't set
the divider padding on the dividers between

00:31:19.539 --> 00:31:21.950
the text and the delete icon.

00:31:21.950 --> 00:31:22.950
It would just look like a table.

00:31:22.950 --> 00:31:26.710
It would just look like a grid of things and
it wouldn't be clear what the real hierarchy

00:31:26.710 --> 00:31:27.710
was.

00:31:27.710 --> 00:31:30.909
But as soon as we introduce the padding you
can immediately see that these are a set of

00:31:30.909 --> 00:31:36.779
list items and within each list item there
are two separate touch targets.

00:31:36.779 --> 00:31:41.690
So going along with this theme of refocusing
on content rather than chrome, we want to,

00:31:41.690 --> 00:31:43.479
you know, also do that for buttons.

00:31:43.479 --> 00:31:48.259
We don't want to keep drawing borders and
boxes around buttons because we can do that

00:31:48.259 --> 00:31:49.499
in a different way.

00:31:49.499 --> 00:31:54.769
So this borderless button style, which is
very commonly used with dividers, it really

00:31:54.769 --> 00:31:56.690
helps kind of simplify your UI.

00:31:56.690 --> 00:32:00.609
It really helps focus on the content over
the chrome.

00:32:00.609 --> 00:32:05.909
So one thing to note is that it is borderless
so you do need dividers to set its kind of

00:32:05.909 --> 00:32:12.440
boundaries, but when you touch the button,
you -- it does light up to indicate that this

00:32:12.440 --> 00:32:13.440
is the touch region.

00:32:13.440 --> 00:32:15.600
This is the thing you're acting on.

00:32:15.600 --> 00:32:20.549
So to use them you simply create an image
button or a button and you set its style to

00:32:20.549 --> 00:32:22.789
the borderlessButtonStyle theme attribute.

00:32:22.789 --> 00:32:26.029
This gives it to you all for free.

00:32:26.029 --> 00:32:31.100
Another type of -- another variation on borderless
buttons is a button bar, so if at the bottom

00:32:31.100 --> 00:32:35.629
of a dialogue or bottom of a screen you have
two actions, you can use this button bar style

00:32:35.629 --> 00:32:40.380
on your linear layout and it will automatically
create the dividers and apply the weights

00:32:40.380 --> 00:32:41.380
correctly.

00:32:41.380 --> 00:32:42.799
Actually, it doesn't apply the weights.

00:32:42.799 --> 00:32:44.509
Never mind.

00:32:44.509 --> 00:32:50.109
So it automatically adds these dividers, and
when using button bars, make sure that you

00:32:50.109 --> 00:32:52.429
do the order of the buttons correctly.

00:32:52.429 --> 00:32:57.619
The preferred button should always be on the
right, so save versus discard or delete versus

00:32:57.619 --> 00:32:58.619
cancel.

00:32:58.619 --> 00:33:01.809
Even if it's a negative action, like delete,
the preferred item should really be on the

00:33:01.809 --> 00:33:02.809
right.

00:33:02.809 --> 00:33:07.369
It's very important as of Android 4.0 and
above.

00:33:07.369 --> 00:33:11.359
So use that button bar style and then each
of the buttons in that -- I've been saying

00:33:11.359 --> 00:33:12.409
the word button way too much.

00:33:12.409 --> 00:33:13.859
&gt;&gt;Nick Butcher: It's lost all meaning.

00:33:13.859 --> 00:33:14.859
&gt;&gt;Roman Nurik: Yes.

00:33:14.859 --> 00:33:21.440
Each of those buttons needs the buttonBarButtonStyle
to apply -- somebody needs to count how many

00:33:21.440 --> 00:33:22.460
times I just said the word button.

00:33:22.460 --> 00:33:23.679
It's like 20.

00:33:23.679 --> 00:33:25.330
Anyway, it's very straightforward.

00:33:25.330 --> 00:33:26.470
Again, this is very little code.

00:33:26.470 --> 00:33:27.470
You're not really doing much.

00:33:27.470 --> 00:33:28.470
You're just setting styles.

00:33:28.470 --> 00:33:30.399
&gt;&gt;Nick Butcher: Lean on the framework, lean
on the framework.

00:33:30.399 --> 00:33:32.389
&gt;&gt;Roman Nurik: Yes, take it away.

00:33:32.389 --> 00:33:34.720
Again, it has that touch highlight.

00:33:34.720 --> 00:33:39.169
Another thing to think about is how do you
provide this touch feedback on things that

00:33:39.169 --> 00:33:44.429
aren't buttons, things that may have kind
of layout or a view hierarchy within them.

00:33:44.429 --> 00:33:47.020
Reto touched on this in his session early
this morning.

00:33:47.020 --> 00:33:52.480
I'm not going to cover it in detail, but really
using selectableItemBackground, which is a

00:33:52.480 --> 00:33:56.549
drawable, it resolves to a drawable, using
that as the foreground or background on a

00:33:56.549 --> 00:33:58.460
view is really kind of a great way to do that.

00:33:58.460 --> 00:34:02.960
Also, if you're using a list you can use the
list selector attribute to provide the right

00:34:02.960 --> 00:34:03.960
drawable to use there.

00:34:03.960 --> 00:34:07.649
&gt;&gt;Nick Butcher: I can't stress how important
this touch feedback really is.

00:34:07.649 --> 00:34:11.192
As you kind of pare back on the crutches and
the chrome, you need to communicate to the

00:34:11.192 --> 00:34:14.210
user what is interactive and what does something.

00:34:14.210 --> 00:34:17.810
Anything that is interactive really needs
to react visually react whenever you touch

00:34:17.810 --> 00:34:18.810
it.

00:34:18.810 --> 00:34:20.660
So using things like this can really communicate
that.

00:34:20.660 --> 00:34:23.040
It also will communicate the bounds which
you can interact with.

00:34:23.040 --> 00:34:28.000
So as you use the borderless buttons, without
using the bounding boxes, touching it will

00:34:28.000 --> 00:34:32.520
highlight the entire interactive bounds so
the next time the user comes back to the element

00:34:32.520 --> 00:34:36.640
they have already this model of where they
can interact and where they can't.

00:34:36.640 --> 00:34:38.210
&gt;&gt;Roman Nurik: Exactly.

00:34:38.210 --> 00:34:42.840
So another important visual element in the
holo visual language is list headings.

00:34:42.840 --> 00:34:46.570
So list headings are basically the things
that separate different groups of list items,

00:34:46.570 --> 00:34:52.110
and they should really be 14sp, bold, all
caps, just like action bar tabs, for example,

00:34:52.110 --> 00:34:54.650
and they should have a 2 dp separator below
them.

00:34:54.650 --> 00:35:00.530
So you don't really have to figure all this
stuff out, you can actually just use a listSeparatorTextViewStyle,

00:35:00.530 --> 00:35:03.170
set that on the TextView and you automatically
get the styling.

00:35:03.170 --> 00:35:07.860
If you do end up customizing this with your
brand's accent colors, then by all means use

00:35:07.860 --> 00:35:09.660
those values.

00:35:09.660 --> 00:35:15.890
This is kind of a great tool to use for releasing,
I guess, the space to the list, the content

00:35:15.890 --> 00:35:19.150
itself in the list.

00:35:19.150 --> 00:35:20.980
So we've been talking about space a lot.

00:35:20.980 --> 00:35:25.140
I want to take a brief moment to talk about
typography, which is incredibly important

00:35:25.140 --> 00:35:31.700
in the holo visual language, so as of Android
4.1 we've given you this really robust typographic

00:35:31.700 --> 00:35:35.950
palette, I guess, for use in your apps.

00:35:35.950 --> 00:35:40.970
So you can use new weights and variance of
Roboto to really help to communicate structure.

00:35:40.970 --> 00:35:48.140
Rather than using text sizes to communicate
structure and hierarchy, using weights is

00:35:48.140 --> 00:35:49.910
kind of a nice way to do that.

00:35:49.910 --> 00:35:55.580
So a couple of quick notes don't use thin
for really small text.

00:35:55.580 --> 00:35:57.400
It's best for large headings.

00:35:57.400 --> 00:36:00.160
Also, light is best for headings as well.

00:36:00.160 --> 00:36:04.040
And condensed can work really well for like
news article headings.

00:36:04.040 --> 00:36:08.840
Light does work well in body text, but you
do need to be aware of kind of the minimum

00:36:08.840 --> 00:36:09.840
sizes that you should be using.

00:36:09.840 --> 00:36:13.030
&gt;&gt;Nick Butcher: As a rule you probably want
to be sticking to regular or light on slightly

00:36:13.030 --> 00:36:18.610
larger type sizes and reserve thin and maybe
larger light for things you want to stand

00:36:18.610 --> 00:36:22.370
out essentially by having larger size, but
lighter type looks really, really good.

00:36:22.370 --> 00:36:26.140
&gt;&gt;Roman Nurik: So quick note, this is Android
4.1 and above.

00:36:26.140 --> 00:36:30.170
If you want to use this in earlier versions
of the platform you can download these fonts

00:36:30.170 --> 00:36:33.870
at Google Fonts and you can import them into
your project.

00:36:33.870 --> 00:36:38.290
One last quick note, another important part
of the Holo visual language is again that

00:36:38.290 --> 00:36:42.650
full-bleed images using as much space as you
can dedicated to content.

00:36:42.650 --> 00:36:48.320
One of the things you run into sometimes is
not all photos come in the same aspect ratio

00:36:48.320 --> 00:36:52.330
so what you can do is you can use an image
view.

00:36:52.330 --> 00:36:57.330
You can use an image view with a consistent
aspect ratio and drop in an image, set the

00:36:57.330 --> 00:37:02.490
scale type on the image view to center crop
to actually make sure that the image fits

00:37:02.490 --> 00:37:06.390
nicely in the image view and doesn't kind
of mess with your layout.

00:37:06.390 --> 00:37:10.600
So one thing to note here is that this does
end up cropping things in some cases.

00:37:10.600 --> 00:37:16.800
You know, that's really good for -- it's fine
for things like bacon photos or meat or like

00:37:16.800 --> 00:37:17.820
landscapes.

00:37:17.820 --> 00:37:21.660
Not so good for like photos of people where
their eyes may be cut off.

00:37:21.660 --> 00:37:23.700
It's kind of creepy.

00:37:23.700 --> 00:37:27.880
So definitely the center crop technique is
very good for making sure that your UIs stay

00:37:27.880 --> 00:37:30.550
nicely aligned and fit.

00:37:30.550 --> 00:37:36.720
When using these full-bleed images, it's best
to kind of introduce separators between them.

00:37:36.720 --> 00:37:41.100
Very light separators, maybe one dp or so,
to really make sure that colors of different

00:37:41.100 --> 00:37:44.640
images don't bleed into each other.

00:37:44.640 --> 00:37:48.740
So before -- that was a lot of stuff to cover
and obviously there's a lot more.

00:37:48.740 --> 00:37:52.690
We can't cover everything, but the last thing
I want to cover is producing Holo assets.

00:37:52.690 --> 00:38:00.100
So, you know, as we showed, you can use XML
and some minor styling stuff to really provide

00:38:00.100 --> 00:38:06.480
a lot of the assets for your apps; however,
you do end up still needing things like icons

00:38:06.480 --> 00:38:10.290
and -- and PNG files and so on, and there
are three really good tools for that.

00:38:10.290 --> 00:38:16.100
The first is the Android asset studio which
will generate icons for action bars and notification

00:38:16.100 --> 00:38:17.100
icons.

00:38:17.100 --> 00:38:20.960
It will apply the right sizing, coloring and
opacity and so on.

00:38:20.960 --> 00:38:26.660
The second is the action bar style generator
that assuming your theming your app with your

00:38:26.660 --> 00:38:31.750
brand's accent colors, which you should be
doing, you simply drop in those accent colors

00:38:31.750 --> 00:38:36.740
into this tool and it will generate automatically
all the different assets that you need for

00:38:36.740 --> 00:38:41.240
the action bar, tab indicators, as well as
the selectable item background stuff.

00:38:41.240 --> 00:38:46.510
It will automatically create these kind of
like accented, pressed and focused states.

00:38:46.510 --> 00:38:48.800
&gt;&gt;Nick Butcher: And the right hierarchy so
you just drop into your project.

00:38:48.800 --> 00:38:49.800
Super simple.

00:38:49.800 --> 00:38:50.800
&gt;&gt;Roman Nurik: Right.

00:38:50.800 --> 00:38:55.330
And lastly there's the Android holo colors
tool, which does the same exact thing for

00:38:55.330 --> 00:38:57.850
like check boxes and buttons and things like
that.

00:38:57.850 --> 00:39:02.650
Now, I really want to mention that Jeff and
Jerome who wrote these two tools are in the

00:39:02.650 --> 00:39:06.380
developer sandbox, so if you have bugs to
report, go harass them.

00:39:06.380 --> 00:39:08.390
They're really awesome guys.

00:39:08.390 --> 00:39:12.530
If you want a demo, a live demo of what this
looks like, definitely check them out.

00:39:12.530 --> 00:39:13.990
&gt;&gt;Nick Butcher: They're great tools.

00:39:13.990 --> 00:39:14.990
Just use them.

00:39:14.990 --> 00:39:17.090
&gt;&gt;Roman Nurik: There are no bugs remarkably.

00:39:17.090 --> 00:39:20.260
I think that's it for our talk.

00:39:20.260 --> 00:39:21.440
Thank you once again for coming.

00:39:21.440 --> 00:39:26.430
I want to do a quick shoutout that we can't
take questions right now, but Nick and I both

00:39:26.430 --> 00:39:30.580
will be in the Android platform office hours
where we'll be able to take questions.

00:39:30.580 --> 00:39:35.050
I also want to mention that we have an Android
Design in Action Live design lab.

00:39:35.050 --> 00:39:38.250
What is it, tomorrow at 2:00 p.m.?

00:39:38.250 --> 00:39:43.470
So if you want to come and learn how to design
an app from scratch without using computer

00:39:43.470 --> 00:39:46.730
tools, we're just going to be sketching and
wire framing, definitely go check it out at

00:39:46.730 --> 00:39:47.730
2:00 p.m. tomorrow.

00:39:47.730 --> 00:39:50.460
&gt;&gt;Nick Butcher: And for those of you remote
watching on the live stream and so forth,

00:39:50.460 --> 00:39:55.330
then we're actually quite active on Google+,
so follow us on Google+ or join the Android

00:39:55.330 --> 00:39:56.400
Designers community.

00:39:56.400 --> 00:39:58.200
The Developers community is also good.

00:39:58.200 --> 00:40:02.460
And join in the conversation on the hash tag
#ADiA and the #AndroidDesign tag.

00:40:02.460 --> 00:40:04.960
And tune in to Android Design in Action every
week.

00:40:04.960 --> 00:40:06.290
Thanks very much.

00:40:06.290 --> 00:40:06.740
[ Applause ]

