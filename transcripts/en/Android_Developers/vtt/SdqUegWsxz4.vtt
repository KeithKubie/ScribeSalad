WEBVTT
Kind: captions
Language: en

00:00:05.650 --> 00:00:08.490
So now that we have a better
understanding of what this

00:00:08.490 --> 00:00:12.670
Google Play Games library does
for us, let's start using it.

00:00:12.670 --> 00:00:16.760
So I'm going to go to our
Downloads folder, and I'm

00:00:16.760 --> 00:00:19.570
going to open up our as-of-yet
unused Play

00:00:19.570 --> 00:00:21.400
Games Services folder.

00:00:21.400 --> 00:00:23.970
And in here, there's a bundle
and a framework.

00:00:23.970 --> 00:00:28.820
And we're going to add both of
these into our xcode project.

00:00:28.820 --> 00:00:31.560
Just click and drag them in.

00:00:31.560 --> 00:00:34.920
Again, if you're storing this
in a centralized folder that

00:00:34.920 --> 00:00:37.230
maybe many of your applications
were using, you

00:00:37.230 --> 00:00:40.030
might not want to copy items
and keep it as a reference.

00:00:40.030 --> 00:00:41.950
In my case, I do just
so this is a nice,

00:00:41.950 --> 00:00:43.190
little standalone app.

00:00:43.190 --> 00:00:47.440
So I'm going to click Finish,
and they're there.

00:00:47.440 --> 00:00:50.330
So I'm going to drag my
framework into my Frameworks

00:00:50.330 --> 00:00:53.740
folder, and there you go.

00:00:53.740 --> 00:00:55.390
Import step is done.

00:00:55.390 --> 00:00:57.980
There are a few other steps we
need to do before we start

00:00:57.980 --> 00:00:59.300
using this library.

00:00:59.300 --> 00:01:00.930
The first is kind of
an obscure one.

00:01:00.930 --> 00:01:05.530
I'm going to go into
my Info.plist file.

00:01:05.530 --> 00:01:07.735
And I'm going to add
a new entry.

00:01:10.670 --> 00:01:13.620
Right-click and do Add Row.

00:01:13.620 --> 00:01:18.520
You can also do this by going
to Editor, Add Item.

00:01:18.520 --> 00:01:20.850
And we're going to call
this GPGapplicationID.

00:01:24.460 --> 00:01:27.750
And this is the 11- or 12-digit
number that is

00:01:27.750 --> 00:01:29.840
associated with our
application.

00:01:29.840 --> 00:01:32.040
And there's two way
you can get this.

00:01:32.040 --> 00:01:37.030
The first is if we were to just
look at our client ID,

00:01:37.030 --> 00:01:39.470
it's basically the
same number here.

00:01:39.470 --> 00:01:43.100
So we can just copy over this
first numeric portion

00:01:43.100 --> 00:01:44.800
of our client ID.

00:01:44.800 --> 00:01:50.500
You can also get this from the
Google Play Developer console.

00:01:50.500 --> 00:01:54.860
If we were going into
play.google.com/apps/publish,

00:01:54.860 --> 00:01:56.590
and gets my number.

00:01:56.590 --> 00:01:57.750
This number right here?

00:01:57.750 --> 00:01:59.450
That is also the
application ID.

00:01:59.450 --> 00:02:01.460
So you can get it from
either place.

00:02:01.460 --> 00:02:04.680
Either way, I'm just going
to copy it, go back to my

00:02:04.680 --> 00:02:08.419
Info.plist file, and
paste it in.

00:02:08.419 --> 00:02:10.110
There we go.

00:02:10.110 --> 00:02:12.530
And then the next thing we're
going to do is go

00:02:12.530 --> 00:02:14.680
into this PCH file.

00:02:14.680 --> 00:02:17.100
This is our pre-compiled
header.

00:02:17.100 --> 00:02:21.060
And I'm going to add an
import statement here.

00:02:24.080 --> 00:02:26.122
I'm going to add
PlayGameServices

00:02:26.122 --> 00:02:27.372
/PlayGameServices.h.

00:02:29.830 --> 00:02:30.940
I don't know why it doesn't
like to [INAUDIBLE]

00:02:30.940 --> 00:02:32.490
it, but it doesn't.

00:02:32.490 --> 00:02:36.400
And this is sort of a nice way
of importing this basically

00:02:36.400 --> 00:02:39.490
into any file that I'm going to
use just to avoid having to

00:02:39.490 --> 00:02:42.330
import it all over the place,
because at some point, you'll

00:02:42.330 --> 00:02:43.680
probably forget.

00:02:43.680 --> 00:02:45.440
I suppose this is optional.

00:02:45.440 --> 00:02:48.750
If you want to skip this step
and just import it manually in

00:02:48.750 --> 00:02:51.690
any file that's going to use
PlayGamesServices, feel free

00:02:51.690 --> 00:02:53.000
to do that, as well.

00:02:53.000 --> 00:02:55.320
I just find this is
easier for me.

00:02:55.320 --> 00:02:58.210
Next, let's go back to our
IntroViewController.

00:02:58.210 --> 00:03:02.830
And let's go to our
finishedWithAuth handler.

00:03:06.710 --> 00:03:08.970
And this is basically
where we left off.

00:03:08.970 --> 00:03:11.540
We had our auth object, and
we haven't done a whole

00:03:11.540 --> 00:03:12.630
lot else with it.

00:03:12.630 --> 00:03:14.555
Well now, let's do that.

00:03:14.555 --> 00:03:16.990
Now, right above our
finishWithAuth method, I'm

00:03:16.990 --> 00:03:21.230
going to create a new
method called

00:03:21.230 --> 00:03:22.480
signInToGooglePlayGames.

00:03:26.880 --> 00:03:30.440
And this is essentially a method
that we will call to

00:03:30.440 --> 00:03:32.800
set up the Google Play
Games library.

00:03:32.800 --> 00:03:36.360
And generally speaking, we
access this through a shared

00:03:36.360 --> 00:03:38.150
singleton instance,
kind of the same

00:03:38.150 --> 00:03:40.450
way we did with GPPSignIn.

00:03:40.450 --> 00:03:44.790
The name of our singleton
class is GPGManager--

00:03:44.790 --> 00:03:47.380
GPG here standing for
Google Play Games.

00:03:47.380 --> 00:03:50.020
We're going to access this
sharedInstance, and then we're

00:03:50.020 --> 00:03:52.980
going to set up our OAuth
information with this library

00:03:52.980 --> 00:03:55.880
by calling signIn.

00:03:55.880 --> 00:03:58.170
Now, there are two arguments
that we pass in here.

00:03:58.170 --> 00:04:01.190
The first is a GPP
sign-in object.

00:04:01.190 --> 00:04:05.070
So again, we access this through
the singleton method--

00:04:05.070 --> 00:04:06.320
sharedInstance.

00:04:08.800 --> 00:04:12.500
And then next, we pass in a
reauthorize handle or block.

00:04:12.500 --> 00:04:15.490
This is basically a handler that
our GPG manager needs to

00:04:15.490 --> 00:04:18.490
call if auth fails
for some reason.

00:04:18.490 --> 00:04:21.540
Typically, this might happen if,
say, your user plays your

00:04:21.540 --> 00:04:24.040
game for over an
hour, and their

00:04:24.040 --> 00:04:26.060
access token has expired.

00:04:26.060 --> 00:04:28.560
You might have noticed that they
all have an expiration

00:04:28.560 --> 00:04:31.810
time of 3,600 seconds.

00:04:31.810 --> 00:04:35.170
A less common situation might
be that a user has gone into

00:04:35.170 --> 00:04:38.410
their account settings and
revoked their permissions for

00:04:38.410 --> 00:04:41.570
your game, but your game still
attempts to, for instance,

00:04:41.570 --> 00:04:43.440
submit a score to
a leaderboard.

00:04:43.440 --> 00:04:45.990
So in both those situations,
the manager needs to

00:04:45.990 --> 00:04:47.050
know what to do.

00:04:47.050 --> 00:04:50.110
And in general, the correct
thing to do is just try

00:04:50.110 --> 00:04:51.640
signing the user in again.

00:04:51.640 --> 00:04:55.330
And so we'll do that by
adding in this code.

00:04:55.330 --> 00:04:59.760
So if requiresKeychainWipe,
which, in general, means we've

00:04:59.760 --> 00:05:02.560
got the signal that we kind of
want to clear out all the old

00:05:02.560 --> 00:05:04.050
cache data.

00:05:04.050 --> 00:05:11.310
We can call from our
sharedInstance, signout.

00:05:11.310 --> 00:05:13.925
And this completely signs the
user out from the Google Play

00:05:13.925 --> 00:05:16.940
Games manager, which means
that it drops all cached

00:05:16.940 --> 00:05:17.960
information.

00:05:17.960 --> 00:05:20.910
It does a few other cleanup
tasks to ensure that the user

00:05:20.910 --> 00:05:23.430
really is signed out
on this device.

00:05:23.430 --> 00:05:26.440
But then in either situation,
we'll probably want to try

00:05:26.440 --> 00:05:27.790
signing user in again.

00:05:27.790 --> 00:05:33.310
And to do that, we will call
GPPSignIn sharedInstance

00:05:33.310 --> 00:05:36.210
authenticate, which is the same
method that gets called

00:05:36.210 --> 00:05:38.020
when the user clicks
the sign-in button.

00:05:38.020 --> 00:05:42.250
And again, if everything goes
well, it will pass the results

00:05:42.250 --> 00:05:46.050
to the GPP sign-ins delegate
method, which is right below

00:05:46.050 --> 00:05:48.490
our finished with auth
error handler.

00:05:48.490 --> 00:05:51.420
So again, going back to our most
common situation of the

00:05:51.420 --> 00:05:55.440
user's been playing for an hour,
and their token is no

00:05:55.440 --> 00:05:59.280
longer valid, and they attempt
to unlock an achievement, our

00:05:59.280 --> 00:06:02.580
GPG manager will get back a
response saying, hey, this

00:06:02.580 --> 00:06:03.770
token is no longer valid.

00:06:03.770 --> 00:06:07.670
It will go to its reauthorize
handler, in this situation,

00:06:07.670 --> 00:06:09.730
requiresKeychainWipe
will be false.

00:06:09.730 --> 00:06:11.980
And it'll say, OK, I guess I'll
just authenticate the

00:06:11.980 --> 00:06:13.630
user again.

00:06:13.630 --> 00:06:16.190
This will happen silently
in the background.

00:06:16.190 --> 00:06:19.310
It's a silent authentication
that should succeed, and we're

00:06:19.310 --> 00:06:21.190
able to continue like normal.

00:06:21.190 --> 00:06:22.680
Don't worry if this code
doesn't entirely

00:06:22.680 --> 00:06:23.790
make sense to you.

00:06:23.790 --> 00:06:26.450
This tends to be kind of
boilerplate code that people

00:06:26.450 --> 00:06:29.570
just kind of copy and paste from
our documentation, but

00:06:29.570 --> 00:06:31.950
it's worth kind of knowing
what's going on.

00:06:31.950 --> 00:06:34.470
And then all that's left
to do is call it.

00:06:34.470 --> 00:06:37.650
And so, in our finished with
auth error handler, I'm just

00:06:37.650 --> 00:06:44.380
going to say, you know, if
there's no error, let's call

00:06:44.380 --> 00:06:46.846
signInToGooglePlayGames.

00:06:46.846 --> 00:06:49.200
And that's it.

00:06:49.200 --> 00:06:50.700
And so let's run this and
see what happens.

00:06:54.180 --> 00:06:55.915
Hey, look at that.

00:06:55.915 --> 00:06:58.440
That "Welcome back to Todd
Kerpelman" message?

00:06:58.440 --> 00:07:01.880
That is the Google Play Games
library actually doing a fair

00:07:01.880 --> 00:07:03.270
amount of work behind
the scenes.

00:07:03.270 --> 00:07:04.980
It's taken my OAuth token.

00:07:04.980 --> 00:07:08.740
It's used that to get my player
profile, my name, my

00:07:08.740 --> 00:07:10.060
avatar URL.

00:07:10.060 --> 00:07:13.430
And it's used that to display a
little notification message

00:07:13.430 --> 00:07:14.830
at the top of the screen.

00:07:14.830 --> 00:07:17.590
And all that gets performed
automatically as soon as I

00:07:17.590 --> 00:07:20.160
call signIn on that shared
singleton instance.

00:07:20.160 --> 00:07:21.320
And that's pretty cool.

00:07:21.320 --> 00:07:24.180
I didn't even need to know my
OAuth information at all.

00:07:24.180 --> 00:07:27.720
And in fact, if you'll notice,
this OAuthToAuthentication

00:07:27.720 --> 00:07:30.090
object doesn't actually
get passed in to

00:07:30.090 --> 00:07:32.160
signInToGooglePlayGames.

00:07:32.160 --> 00:07:34.400
It gets all the auth information
it needs from this

00:07:34.400 --> 00:07:37.500
GPGSignin object, which
is kind of cool, too.

00:07:37.500 --> 00:07:38.430
So that's pretty good.

00:07:38.430 --> 00:07:40.840
We're starting to look more
like a real application.

00:07:40.840 --> 00:07:44.390
Next up, let's add a Sign Out
button and maybe perform a few

00:07:44.390 --> 00:07:45.350
cleanup steps.

00:07:45.350 --> 00:07:46.600
We'll do that in the
next lesson.

