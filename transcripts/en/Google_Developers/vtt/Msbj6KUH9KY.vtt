WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:13.165
[MUSIC PLAYING]

00:00:19.626 --> 00:07:28.960
[MUSIC PLAYING]

00:07:37.852 --> 00:07:40.420
CHRIS CARTLAND: Welcome to
Google+ Developers Live.

00:07:40.420 --> 00:07:42.970
My name is Chris Cartland, and
I'm a developer programs

00:07:42.970 --> 00:07:44.995
engineer working on the
Google+ platform.

00:07:44.995 --> 00:07:46.270
YANIV YAAKUBOVICH: And I'm
Yaniv Yaakubovich.

00:07:46.270 --> 00:07:49.462
I'm a product manager on
the Google+ platform.

00:07:49.462 --> 00:07:50.827
LEE DENISON: And I'm Lee.

00:07:50.827 --> 00:07:53.246
I'm also a developer programs
engineer on the Google+

00:07:53.246 --> 00:07:54.225
platform in London.

00:07:54.225 --> 00:07:55.710
CHRIS CARTLAND: Yeah, thanks
for joining us via Hangouts

00:07:55.710 --> 00:07:57.510
all the way from London.

00:07:57.510 --> 00:07:58.400
Today is really exciting.

00:07:58.400 --> 00:08:01.440
We're going to talk about
Cross-Platform Single Sign-On,

00:08:01.440 --> 00:08:03.850
which is something you may have
seen demonstrated in the

00:08:03.850 --> 00:08:06.550
I/O keynote this year.

00:08:06.550 --> 00:08:09.030
It's a really cool feature.

00:08:09.030 --> 00:08:11.470
We're going to first talk about
what it is, and then

00:08:11.470 --> 00:08:14.150
we're going to actually show you
the code and how that fits

00:08:14.150 --> 00:08:18.080
into our sample application,
PhotoHunt.

00:08:18.080 --> 00:08:20.450
And we will show you all the
details of how to make sure

00:08:20.450 --> 00:08:22.610
that you're doing right, and
you can do this in your

00:08:22.610 --> 00:08:24.340
application.

00:08:24.340 --> 00:08:25.610
So this is really exciting.

00:08:25.610 --> 00:08:28.300
First of all, Yaniv, can you
tell us a little more about

00:08:28.300 --> 00:08:30.680
what Cross-Platform Single
Sign-On really is?

00:08:30.680 --> 00:08:31.020
YANIV YAAKUBOVICH: Sure.

00:08:31.020 --> 00:08:34.539
We recognize that users don't
just use one device to

00:08:34.539 --> 00:08:35.909
interact with your app.

00:08:35.909 --> 00:08:38.830
They switch between laptops,
tablet, and mobile devices on

00:08:38.830 --> 00:08:39.840
a daily basis.

00:08:39.840 --> 00:08:42.789
And we're focused on making
desktop and mobile work better

00:08:42.789 --> 00:08:45.280
together so user will
have a seamless

00:08:45.280 --> 00:08:46.820
experience between platforms.

00:08:46.820 --> 00:08:50.170
With that, we've taken another
step in this direction, and

00:08:50.170 --> 00:08:53.350
we're introducing the
Cross-Platform Single Sign-On,

00:08:53.350 --> 00:08:55.730
or as we call it, SSO.

00:08:55.730 --> 00:09:01.240
Cross-Platform SSO lets you
connect to users and more

00:09:01.240 --> 00:09:03.610
easily keep them engaged across
devices, removing all

00:09:03.610 --> 00:09:07.010
the frictions of consent
and authentication.

00:09:07.010 --> 00:09:10.490
Now, a user connects on one
device, and seamlessly,

00:09:10.490 --> 00:09:13.200
they're connected to
any other device.

00:09:13.200 --> 00:09:16.060
Let's look, for example, on the
case of a user that logs

00:09:16.060 --> 00:09:19.730
in to your web app to start
adding items to

00:09:19.730 --> 00:09:21.060
their shopping cart.

00:09:21.060 --> 00:09:23.980
But this user is actually not
completing the transaction,

00:09:23.980 --> 00:09:25.390
doesn't check out.

00:09:25.390 --> 00:09:29.970
If this user already signed in
with Google+, when using our

00:09:29.970 --> 00:09:33.170
Cross-Platform Single Sign-On,
when they go to your web

00:09:33.170 --> 00:09:35.710
application, they automatically
sign in to

00:09:35.710 --> 00:09:37.760
Google without the need
to consent again or

00:09:37.760 --> 00:09:39.250
to authorize anything.

00:09:39.250 --> 00:09:41.450
And all of the data is available
for them to use, and

00:09:41.450 --> 00:09:43.830
they can check out from exactly
the same place that

00:09:43.830 --> 00:09:45.625
they were before in
your website.

00:09:45.625 --> 00:09:46.470
CHRIS CARTLAND: That's
really great.

00:09:46.470 --> 00:09:47.930
So that would mean that they
could actually buy something

00:09:47.930 --> 00:09:50.710
more quickly with less friction
in that app--

00:09:50.710 --> 00:09:51.240
YANIV YAAKUBOVICH: Exactly

00:09:51.240 --> 00:09:51.910
CHRIS CARTLAND: --make
it easier to do what

00:09:51.910 --> 00:09:53.010
they want to do.

00:09:53.010 --> 00:09:53.960
That's great.

00:09:53.960 --> 00:09:57.420
So yeah, I'd actually love to
see how this actually works.

00:09:57.420 --> 00:09:59.410
So if we can--

00:09:59.410 --> 00:10:01.030
Lee, I think you can
help us out here.

00:10:01.030 --> 00:10:03.010
First, can you explain a
little bit about what

00:10:03.010 --> 00:10:04.720
PhotoHunt is?

00:10:04.720 --> 00:10:07.130
And then once you've done that,
we can go into actually

00:10:07.130 --> 00:10:10.236
the code and how PhotoHunt's
working to do this.

00:10:10.236 --> 00:10:11.380
LEE DENISON: Yeah, sure.

00:10:11.380 --> 00:10:16.320
So PhotoHunt is a sampler which
demonstrates the Google+

00:10:16.320 --> 00:10:21.000
APIs on Android, iOS,
and the web.

00:10:21.000 --> 00:10:21.750
It's a game.

00:10:21.750 --> 00:10:25.700
It's a photo scavenger hunt
where players capture photos

00:10:25.700 --> 00:10:27.560
with their mobile devices
and cameras.

00:10:27.560 --> 00:10:30.050
And they submit them
to a daily feed.

00:10:30.050 --> 00:10:32.660
And then other players can vote
on their photos to find

00:10:32.660 --> 00:10:35.190
out which one is the best one.

00:10:35.190 --> 00:10:39.550
But more than our other sampler
applications, it's

00:10:39.550 --> 00:10:41.900
really close to a real-world
implementation.

00:10:41.900 --> 00:10:45.680
So it is much closer to helping
you understand what

00:10:45.680 --> 00:10:48.330
the real world issues you might
face when you try and

00:10:48.330 --> 00:10:51.570
implement social login
in your app.

00:10:51.570 --> 00:10:54.180
So for example, it implements a
client-server architecture.

00:10:54.180 --> 00:10:56.240
So if you've done that in your
own app, then it'll give you

00:10:56.240 --> 00:10:59.030
an idea of how to do that.

00:10:59.030 --> 00:11:01.280
It has both a signed-out and
a signed-in experience.

00:11:01.280 --> 00:11:03.440
So if you're planning to do that
in your app, then you can

00:11:03.440 --> 00:11:05.250
see how that works.

00:11:05.250 --> 00:11:08.240
And also, it doesn't a more
real-world kind of error

00:11:08.240 --> 00:11:10.710
handling flow as well,
particularly on the server

00:11:10.710 --> 00:11:14.130
side is a good way to
see how that works.

00:11:14.130 --> 00:11:17.000
So it has a server component,
which is implemented in Java.

00:11:17.000 --> 00:11:20.280
And we're planning to add more
languages in the future.

00:11:20.280 --> 00:11:23.380
And it has client
implementations in JavaScript

00:11:23.380 --> 00:11:26.810
for the web and on iOS
and on Android.

00:11:26.810 --> 00:11:28.970
These are all available
on GitHub.

00:11:28.970 --> 00:11:31.110
And also, the documentation
is available on

00:11:31.110 --> 00:11:32.360
developers.google.com/+.

00:11:35.550 --> 00:11:38.440
So if we take a look at the
architecture that you get when

00:11:38.440 --> 00:11:41.570
you set up a PhotoHunt instance,
then you can see

00:11:41.570 --> 00:11:45.110
that we get an Android client
and a JavaScript client.

00:11:45.110 --> 00:11:48.730
And each of them authenticate
independently with the Google+

00:11:48.730 --> 00:11:51.740
APIs using Google+ sign-in.

00:11:51.740 --> 00:11:54.160
And so they can each make direct
calls to the Google

00:11:54.160 --> 00:11:55.830
APIs in their own right.

00:11:55.830 --> 00:11:57.930
And they can do things like
get the user's profile

00:11:57.930 --> 00:12:00.140
information and get their social
graph and all the good

00:12:00.140 --> 00:12:02.200
things that you want to do.

00:12:02.200 --> 00:12:06.080
They also authenticate with
the PhotoHunt server.

00:12:06.080 --> 00:12:08.800
But that is a completely
PhotoHunt-specific API.

00:12:08.800 --> 00:12:10.325
So that's nothing to
do with Google.

00:12:10.325 --> 00:12:11.820
It's a PhotoHunt-specific API.

00:12:11.820 --> 00:12:15.840
But during that process, they
will pass over Google

00:12:15.840 --> 00:12:19.420
credentials, which the PhotoHunt
server can then use

00:12:19.420 --> 00:12:23.280
to also make calls to
the Google APIs on

00:12:23.280 --> 00:12:24.180
behalf of the user.

00:12:24.180 --> 00:12:27.620
So if you're writing moments
server side or if you're

00:12:27.620 --> 00:12:29.670
getting the social graphs server
side to contribute

00:12:29.670 --> 00:12:31.812
there, then you can
also do that.

00:12:31.812 --> 00:12:34.860
CHRIS CARTLAND: Yeah, so for
this application, users are

00:12:34.860 --> 00:12:38.760
going to authenticate either on
Android or on the web, and

00:12:38.760 --> 00:12:40.850
possibly two different places,
they may have to

00:12:40.850 --> 00:12:42.100
see a consent dialogue.

00:12:42.100 --> 00:12:44.020
And then that information gets
passed to the server, and then

00:12:44.020 --> 00:12:45.870
the server does all the
actual API calls to

00:12:45.870 --> 00:12:47.420
Google, or most of them.

00:12:47.420 --> 00:12:48.080
LEE DENISON: Right.

00:12:48.080 --> 00:12:49.310
Exactly.

00:12:49.310 --> 00:12:52.670
So for Single Sign-On, what
we're really interested in is

00:12:52.670 --> 00:12:56.290
that conversation that goes on
between the clients and Google

00:12:56.290 --> 00:12:59.040
rather than the server
and Google.

00:12:59.040 --> 00:13:01.570
So let's focus on that.

00:13:01.570 --> 00:13:06.190
When a user signs in with a
Google+ Sign-In, then it's

00:13:06.190 --> 00:13:07.590
important that Google--

00:13:07.590 --> 00:13:09.910
if it's for the very first time
for your service, then

00:13:09.910 --> 00:13:13.915
Google needs to show a consent
dialogue, which explains to

00:13:13.915 --> 00:13:17.710
the user the permissions that
your app is requesting to be

00:13:17.710 --> 00:13:19.870
able to access the Google
APIs and their

00:13:19.870 --> 00:13:21.820
data on their behalf.

00:13:21.820 --> 00:13:24.880
So that consent dialogue is
displayed natively as part of

00:13:24.880 --> 00:13:27.390
Google Play Services on Android
and is displayed as

00:13:27.390 --> 00:13:31.310
part of the sign-in
flow on the web.

00:13:31.310 --> 00:13:35.320
But with Google+ Sign-In, when
you consent to those

00:13:35.320 --> 00:13:40.010
permissions for a given app,
you do that to the project,

00:13:40.010 --> 00:13:42.680
regardless of what platform you
happen to be accessing on,

00:13:42.680 --> 00:13:43.910
which is great news for
the developers.

00:13:43.910 --> 00:13:45.190
So it means Android is
used for the user.

00:13:45.190 --> 00:13:49.045
So it means that if I sign in
for the first time on Android

00:13:49.045 --> 00:13:51.130
for this app, then I'll
see the native

00:13:51.130 --> 00:13:52.030
consent dialogue there.

00:13:52.030 --> 00:13:54.890
But then if I subsequently
access the same service via

00:13:54.890 --> 00:13:57.090
the web, I won't have
to consent again.

00:13:57.090 --> 00:14:00.445
And the same thing happens vice
versa, if you sign in

00:14:00.445 --> 00:14:02.420
first on the web.

00:14:02.420 --> 00:14:05.530
So that creates a seamless
experience for the user on

00:14:05.530 --> 00:14:08.740
Android because the
user has already

00:14:08.740 --> 00:14:10.110
authenticated to the device.

00:14:10.110 --> 00:14:12.130
So that means that they
don't have to type

00:14:12.130 --> 00:14:12.820
in their user name.

00:14:12.820 --> 00:14:14.745
They don't have to type
in their password.

00:14:14.745 --> 00:14:18.295
And because if they've signed
in already on the web, and

00:14:18.295 --> 00:14:20.350
they don't even see the consent
dialogue, that means

00:14:20.350 --> 00:14:22.902
that they're dropped straight
to a signed-in experience in

00:14:22.902 --> 00:14:25.800
your app without having to
click a single button.

00:14:25.800 --> 00:14:27.440
You get the personalized
experience.

00:14:27.440 --> 00:14:30.965
And also, as Yaniv said, if they
started anything on the

00:14:30.965 --> 00:14:33.030
web, that state will be
available to them immediately

00:14:33.030 --> 00:14:33.782
in the app.

00:14:33.782 --> 00:14:35.495
YANIV YAAKUBOVICH: And
this goes both ways.

00:14:35.495 --> 00:14:37.820
LEE DENISON: Yeah, and
it goes both ways.

00:14:37.820 --> 00:14:41.386
So if the user's already signed
in for the first time

00:14:41.386 --> 00:14:44.845
on Android, in a browser, if
that's their browser at home,

00:14:44.845 --> 00:14:46.850
they're likely to be already
signed in to Google.

00:14:46.850 --> 00:14:49.850
And that means that when they
access the service in a web

00:14:49.850 --> 00:14:52.270
browser, and the Sign-In button
is displayed, it will

00:14:52.270 --> 00:14:55.350
attempt an immediate mobile
authentication.

00:14:55.350 --> 00:14:57.305
And because they've already
consented on Android, that

00:14:57.305 --> 00:14:58.240
will go ahead.

00:14:58.240 --> 00:15:00.830
And again, they'll be signed in
without having to click a

00:15:00.830 --> 00:15:01.670
single button.

00:15:01.670 --> 00:15:03.700
And they get all the benefits
that way, as well.

00:15:03.700 --> 00:15:04.495
CHRIS CARTLAND: That's
really great.

00:15:04.495 --> 00:15:06.280
And it's a really neat thing
that we're able to bring this

00:15:06.280 --> 00:15:07.900
together on Android and
the web and make

00:15:07.900 --> 00:15:09.870
those two more seamless.

00:15:09.870 --> 00:15:11.420
LEE DENISON: Yeah.

00:15:11.420 --> 00:15:14.160
Now, the great news for
developers is that you don't

00:15:14.160 --> 00:15:15.970
need to make any special
changes.

00:15:15.970 --> 00:15:18.230
You don't have to do anything
special in your app to

00:15:18.230 --> 00:15:19.210
actually implement
Single Sign-On.

00:15:19.210 --> 00:15:22.110
It's taken care of for you.

00:15:22.110 --> 00:15:24.470
What I'm going to do is take
us through the Android code

00:15:24.470 --> 00:15:27.040
for PhotoHunt and explain what's
going on behind the

00:15:27.040 --> 00:15:30.910
scenes to make Single
Sign-On happen.

00:15:30.910 --> 00:15:33.430
So in Android, as we know, this
Sign-In is handled by the

00:15:33.430 --> 00:15:34.860
PlusClient, which
is our interface

00:15:34.860 --> 00:15:37.020
to Google Play Services.

00:15:37.020 --> 00:15:41.400
And typically, what we do is
we would tie our PlusClient

00:15:41.400 --> 00:15:44.510
life cycle to the life cycle
of our activity.

00:15:44.510 --> 00:15:49.050
Now, in PhotoHunt, because you
typically want the same

00:15:49.050 --> 00:15:51.350
Sign-In logic for every
activity, what you're going to

00:15:51.350 --> 00:15:53.913
do is probably either implement
a base activity to

00:15:53.913 --> 00:15:56.220
collect that reusable
functionality together, or

00:15:56.220 --> 00:15:58.900
what we've done in PhotoHunt
is actually put it in a

00:15:58.900 --> 00:16:00.230
reusable fragment.

00:16:00.230 --> 00:16:04.420
So let's take a look at
PlusClient fragment.

00:16:04.420 --> 00:16:08.440
So like I say, this ties the
PlusClient's life cycle to the

00:16:08.440 --> 00:16:10.230
life cycle of the activity.

00:16:10.230 --> 00:16:13.320
So we can see that in the
onCreate method of this

00:16:13.320 --> 00:16:16.380
PlusClient fragment, we
initialize our PlusClient.

00:16:16.380 --> 00:16:21.170
And then we call connect.

00:16:21.170 --> 00:16:24.810
We use the PlusClient Builder
to create the PlusClient.

00:16:24.810 --> 00:16:28.270
And what we do here is we set
the scopes, which represent

00:16:28.270 --> 00:16:31.730
the permissions that your app
is asking of the user.

00:16:31.730 --> 00:16:34.170
And we also set the visible
actions, which is the app

00:16:34.170 --> 00:16:36.870
activities that your app
would like to write.

00:16:36.870 --> 00:16:40.990
Now, it's really important
that the scopes and the

00:16:40.990 --> 00:16:44.520
activities that you set are the
same across all platforms.

00:16:44.520 --> 00:16:46.600
All the platforms that you
implement need to match,

00:16:46.600 --> 00:16:50.250
because if you ask for different
scopes on different

00:16:50.250 --> 00:16:54.570
platforms, then when you log
in on the web, say, after

00:16:54.570 --> 00:16:56.920
you've already logged in on
Android and you're asking for

00:16:56.920 --> 00:16:59.900
different scopes, Google will
have to ask the user for their

00:16:59.900 --> 00:17:02.200
consent to them, because you're
asking for a different

00:17:02.200 --> 00:17:03.270
set of permissions.

00:17:03.270 --> 00:17:06.595
So if you want SSO to work, you
really need to make sure

00:17:06.595 --> 00:17:08.869
that those scopes match across
all the platforms that you

00:17:08.869 --> 00:17:09.869
implement on.

00:17:09.869 --> 00:17:11.690
CHRIS CARTLAND: So like you said
before, you're not really

00:17:11.690 --> 00:17:13.650
doing anything new to implement
Single Sign-On.

00:17:13.650 --> 00:17:16.180
We're just checking to make sure
that you have things set

00:17:16.180 --> 00:17:19.760
up correctly so that right now
on this screen, we can see the

00:17:19.760 --> 00:17:22.849
setVisibleActivities
and setScopes.

00:17:22.849 --> 00:17:26.060
And those need to be the same
on Android and the web and

00:17:26.060 --> 00:17:27.190
across all your platforms.

00:17:27.190 --> 00:17:28.690
LEE DENISON: Yeah.

00:17:28.690 --> 00:17:30.270
So of course, when you're
implementing on multiple

00:17:30.270 --> 00:17:32.470
platforms, you don't get to
define that ahead of somewhere

00:17:32.470 --> 00:17:33.250
where you can use
it everywhere.

00:17:33.250 --> 00:17:35.560
It's really a developer job.

00:17:35.560 --> 00:17:37.642
You've got to make sure that
those are the same across lots

00:17:37.642 --> 00:17:40.440
of different platforms.

00:17:40.440 --> 00:17:40.840
So yeah.

00:17:40.840 --> 00:17:44.250
So at the end of that onCreate
method, we call connect, just

00:17:44.250 --> 00:17:47.740
as we would regardless of Single
Sign-On And that does

00:17:47.740 --> 00:17:48.770
two things.

00:17:48.770 --> 00:17:51.810
It will attempt Sign-On
immediately, and it will

00:17:51.810 --> 00:17:54.610
attempt to fetch the sign-in
state of the user.

00:17:54.610 --> 00:17:57.315
And to do that, it needs a
connection to Google Play

00:17:57.315 --> 00:18:00.020
Services, which is the other
thing you would set up.

00:18:00.020 --> 00:18:03.060
And that call is asynchronous
and will ultimately come back

00:18:03.060 --> 00:18:07.720
to onConnected if the user has
approved their app anywhere,

00:18:07.720 --> 00:18:10.090
on any platform.

00:18:10.090 --> 00:18:12.120
And we've got a successful
connection to Google Play

00:18:12.120 --> 00:18:14.870
Services, then that'll come
back in onConnected.

00:18:14.870 --> 00:18:16.690
And if it fails for some reason,
then it will come back

00:18:16.690 --> 00:18:17.500
in onConnectionFailed.

00:18:17.500 --> 00:18:21.990
So that's no different
for Single Sign-On.

00:18:21.990 --> 00:18:25.650
So PlusClient, of course,
integrates with the Android

00:18:25.650 --> 00:18:26.250
Account Manager.

00:18:26.250 --> 00:18:28.000
And that means that it already
knows about the Google

00:18:28.000 --> 00:18:31.760
accounts on the device and
also whether they are

00:18:31.760 --> 00:18:33.480
authenticated in terms
of typing in

00:18:33.480 --> 00:18:34.920
user name and password.

00:18:34.920 --> 00:18:38.460
So all that we need to do is
decide which account we need

00:18:38.460 --> 00:18:42.090
to use and whether or not that
account has approved our app.

00:18:42.090 --> 00:18:44.580
Now, that gives us several
possible states

00:18:44.580 --> 00:18:46.560
that we can be in.

00:18:46.560 --> 00:18:51.430
So you can see here that
if the user has not--

00:18:51.430 --> 00:18:54.520
if none of the accounts on the
device have approved our app,

00:18:54.520 --> 00:18:55.420
then we're going to get

00:18:55.420 --> 00:18:57.610
onConnectionFailed regardless, right?

00:18:57.610 --> 00:19:00.670
That might mean if they also
haven't chosen the account,

00:19:00.670 --> 00:19:01.710
then we might show them
the Account Chooser.

00:19:01.710 --> 00:19:03.811
But whatever else happens, we're
going to have to show

00:19:03.811 --> 00:19:04.320
them the consent dialogue.

00:19:04.320 --> 00:19:05.330
So that's fine.

00:19:05.330 --> 00:19:08.470
That's what users
would expect.

00:19:08.470 --> 00:19:12.660
But if they've authorized our
app on any platform, on the

00:19:12.660 --> 00:19:16.175
web or Android, then we can see
on the left-hand side that

00:19:16.175 --> 00:19:17.820
we've got a number of
options open to us.

00:19:17.820 --> 00:19:21.570
So in the common case, in the
case where there's only one

00:19:21.570 --> 00:19:24.900
Google account on the device,
then that would be chosen.

00:19:24.900 --> 00:19:28.260
It would be the default
account for the app.

00:19:28.260 --> 00:19:30.470
And they would get authorized
immediately.

00:19:30.470 --> 00:19:33.160
And the next thing that happens
is that onConnected is

00:19:33.160 --> 00:19:36.100
called, and our app drops
into its signed-in

00:19:36.100 --> 00:19:39.020
state, which is great.

00:19:39.020 --> 00:19:41.743
If the user does actually have
more than one Google account

00:19:41.743 --> 00:19:44.250
on the device, then it gets a
little bit more complicated.

00:19:44.250 --> 00:19:45.885
But it's still handled.

00:19:45.885 --> 00:19:50.180
So here, what happens is if
exactly one of those accounts

00:19:50.180 --> 00:19:53.750
has authed our app, then again,
we'll get the Single

00:19:53.750 --> 00:19:54.580
Sign-On experience.

00:19:54.580 --> 00:19:57.280
It will choose that account
as the default account.

00:19:57.280 --> 00:20:00.310
And then we'll get you on to
onConnected, which is great.

00:20:00.310 --> 00:20:03.440
If more than one of those
accounts has authorized our

00:20:03.440 --> 00:20:06.980
app, then we don't know which
one the user needs to pick.

00:20:06.980 --> 00:20:08.750
So we have to at least
show them a chooser.

00:20:08.750 --> 00:20:11.120
We won't show them a consent
dialogue once they pick, but

00:20:11.120 --> 00:20:14.200
we have to show them
the chooser.

00:20:14.200 --> 00:20:17.030
So either way, that's
a pretty seamless

00:20:17.030 --> 00:20:18.410
experience for the user.

00:20:18.410 --> 00:20:19.940
CHRIS CARTLAND: Yeah, and
clearly, there is the case

00:20:19.940 --> 00:20:21.200
where you've never authorized.

00:20:21.200 --> 00:20:24.700
So you haven't even signed on
once with the app, so you

00:20:24.700 --> 00:20:26.250
can't do Single Sign-On
in that case.

00:20:26.250 --> 00:20:27.320
LEE DENISON: Exactly.

00:20:27.320 --> 00:20:29.055
So if you've never signed in,
and you are, then you're going

00:20:29.055 --> 00:20:31.130
to get the onConnectionFailed
regardless.

00:20:31.130 --> 00:20:32.040
CHRIS CARTLAND: But once you've
done it once, you end

00:20:32.040 --> 00:20:33.650
up in the left column.

00:20:33.650 --> 00:20:35.980
And then it's really just a
matter of whether the user has

00:20:35.980 --> 00:20:37.350
multiple accounts
on that device.

00:20:37.350 --> 00:20:40.860
And Google tries to make a good
decision, but sometimes

00:20:40.860 --> 00:20:41.892
you have to let the
user choose.

00:20:41.892 --> 00:20:43.380
LEE DENISON: And actually,
the same thing happens

00:20:43.380 --> 00:20:44.040
on the web as well.

00:20:44.040 --> 00:20:48.560
So if the user is signed into
their browser with multiple

00:20:48.560 --> 00:20:50.480
Google accounts, then they'll
get an Account

00:20:50.480 --> 00:20:51.590
Chooser there as well.

00:20:51.590 --> 00:20:53.790
So the logic is the same
across all platforms.

00:20:53.790 --> 00:20:56.090
We handle that case with
multiple accounts, but the

00:20:56.090 --> 00:21:00.140
common case is one account,
and there it is.

00:21:00.140 --> 00:21:02.400
So the last thing I wanted
to talk about was when

00:21:02.400 --> 00:21:03.350
the user signs out.

00:21:03.350 --> 00:21:08.822
So here, if you've implemented
sign-in before, you know that

00:21:08.822 --> 00:21:12.470
what we do in sign-out is we
clear the default account.

00:21:12.470 --> 00:21:15.560
And that forces the Account
Chooser to appear when they

00:21:15.560 --> 00:21:17.430
sign in a second time.

00:21:17.430 --> 00:21:20.745
Now, Google Play Services
remembers whether or not for

00:21:20.745 --> 00:21:24.980
this app we have carried out
the Single Sign-On flow.

00:21:24.980 --> 00:21:30.390
So what you'd expect is that
when the user signs out,

00:21:30.390 --> 00:21:32.600
they'll see that account user,
regardless of whether the

00:21:32.600 --> 00:21:34.397
Single Sign-On flow would've
caused one of them

00:21:34.397 --> 00:21:35.170
to be signed in.

00:21:35.170 --> 00:21:36.760
And that still works.

00:21:36.760 --> 00:21:38.620
So you have to remember
that Google Play

00:21:38.620 --> 00:21:40.100
Services remembers that.

00:21:40.100 --> 00:21:43.370
And particularly if you're
debugging, it's a good idea

00:21:43.370 --> 00:21:46.160
when you want to test Single
Sign-On to go in and clear the

00:21:46.160 --> 00:21:48.410
state in Google Play Services.

00:21:48.410 --> 00:21:50.810
So that will force the Single
Sign-On flow to happen again

00:21:50.810 --> 00:21:52.060
for the app.

00:21:54.640 --> 00:21:56.720
So yeah, that really
creates a seamless

00:21:56.720 --> 00:21:58.440
experience for the user.

00:21:58.440 --> 00:22:01.470
You, as a developer, are doing
exactly what you would have

00:22:01.470 --> 00:22:02.050
done before.

00:22:02.050 --> 00:22:03.900
You're implementing onConnected
to be your

00:22:03.900 --> 00:22:04.800
signed-in experience.

00:22:04.800 --> 00:22:06.600
You're implementing
onConnectionFailed to be your

00:22:06.600 --> 00:22:08.680
signed-out experience.

00:22:08.680 --> 00:22:11.440
And you really do exactly the
same, and Google Play Services

00:22:11.440 --> 00:22:14.400
takes care of everything
else for you.

00:22:14.400 --> 00:22:16.730
If the user is signed in as a
result of Single Sign-On, they

00:22:16.730 --> 00:22:20.230
will get that toast message to
say, welcome back to the app.

00:22:20.230 --> 00:22:21.585
And so they're not surprised
by the fact that

00:22:21.585 --> 00:22:22.205
they're signed in.

00:22:22.205 --> 00:22:24.400
But from your app's perspective,
it just works

00:22:24.400 --> 00:22:26.670
exactly the same.

00:22:26.670 --> 00:22:27.840
So that's all I have to
say about the Android

00:22:27.840 --> 00:22:28.390
implementation.

00:22:28.390 --> 00:22:31.470
Cartland, do you want to take
us through the JavaScript

00:22:31.470 --> 00:22:31.900
implementation?

00:22:31.900 --> 00:22:32.870
CHRIS CARTLAND: Yeah, great.

00:22:32.870 --> 00:22:36.220
Yeah, I'm going to briefly look
at the JavaScript for

00:22:36.220 --> 00:22:37.470
PhotoHunt as well.

00:22:39.530 --> 00:22:42.080
Oh, I guess we forgot to talk
a little bit about the

00:22:42.080 --> 00:22:43.920
onConnectionFailed.

00:22:43.920 --> 00:22:45.970
That is the same thing that
you would have had before.

00:22:45.970 --> 00:22:48.310
And that will help to get the
user through the rare case

00:22:48.310 --> 00:22:51.620
where they have multiple apps
that have authorized.

00:22:51.620 --> 00:22:52.110
LEE DENISON: Yeah.

00:22:52.110 --> 00:22:53.090
CHRIS CARTLAND: Great.

00:22:53.090 --> 00:22:55.440
So now, yeah, moving on
to the JavaScript.

00:22:55.440 --> 00:22:57.360
The first thing that you need
to make sure you've set up

00:22:57.360 --> 00:23:00.710
right is the Sign-In button,
which in PhotoHunt is done

00:23:00.710 --> 00:23:03.110
through gapi.signin.render.

00:23:03.110 --> 00:23:06.070
We have several fields
that we configure

00:23:06.070 --> 00:23:07.270
with the Sign-In button.

00:23:07.270 --> 00:23:10.420
And the ones I really want to
call out are the request

00:23:10.420 --> 00:23:13.070
visible actions and
the scopes.

00:23:13.070 --> 00:23:16.020
We want to make sure that those
are the same as the ones

00:23:16.020 --> 00:23:19.950
that Lee talked about in
Android, because, of course,

00:23:19.950 --> 00:23:22.540
if you have different scopes,
different permissions, we're

00:23:22.540 --> 00:23:25.440
going to have to ask users
for the new permissions.

00:23:25.440 --> 00:23:28.940
But once we've set those up,
this is, again, the same

00:23:28.940 --> 00:23:32.570
Sign-In button that we had
before Single Sign-On existed.

00:23:32.570 --> 00:23:35.080
And the user will click
on that and authorize.

00:23:35.080 --> 00:23:39.420
If they authorized either now
on the web or in the Android

00:23:39.420 --> 00:23:43.520
flow that Lee just described,
then the callback will be

00:23:43.520 --> 00:23:46.350
fired with the authentication
and authorization information

00:23:46.350 --> 00:23:47.540
that you need.

00:23:47.540 --> 00:23:51.450
So this really has, actually,
no change at this point.

00:23:51.450 --> 00:23:54.490
PhotoHunt takes care of knowing
who the user is and

00:23:54.490 --> 00:23:57.790
then being the app, which
is really the key here.

00:23:57.790 --> 00:24:00.540
We're trying to do all this work
so that as a developer

00:24:00.540 --> 00:24:03.730
and as a user, you can just
get to using the app.

00:24:03.730 --> 00:24:06.550
You don't want to spend time
signing in and doing all the

00:24:06.550 --> 00:24:07.180
other work.

00:24:07.180 --> 00:24:09.240
You just want to get to
PhotoHunt where you can

00:24:09.240 --> 00:24:10.730
actually deal with stuff.

00:24:10.730 --> 00:24:15.590
So that's the stuff there.

00:24:15.590 --> 00:24:18.110
YANIV YAAKUBOVICH: If you have
any more questions, we're

00:24:18.110 --> 00:24:23.730
welcome to answer them on the
Stack Overflow account.

00:24:23.730 --> 00:24:26.480
Just use Google+ as your tag.

00:24:26.480 --> 00:24:30.200
You can also see all of those
examples that we discussed

00:24:30.200 --> 00:24:34.260
today on developers.google.com/+
or on

00:24:34.260 --> 00:24:37.670
our community on Google+
for developers.

00:24:37.670 --> 00:24:38.810
CHRIS CARTLAND: Yeah, great.

00:24:38.810 --> 00:24:40.260
So thank you so much for
joining us today.

00:24:40.260 --> 00:24:42.900
And thank you so much, Lee, for
staying up late in London

00:24:42.900 --> 00:24:44.260
to help us out with this.

00:24:44.260 --> 00:24:45.290
LEE DENISON: Welcome.

00:24:45.290 --> 00:24:47.180
CHRIS CARTLAND: And thank you,
everyone, for watching.

00:24:47.180 --> 00:24:48.430
We'll see you next week.

00:24:56.430 --> 00:26:11.340
[MUSIC PLAYING]

