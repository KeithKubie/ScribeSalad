WEBVTT
Kind: captions
Language: en

00:00:01.665 --> 00:00:03.040
COLT MCCANDLISS:
By now, everyone

00:00:03.040 --> 00:00:05.470
knows that APK size is
an important factor when

00:00:05.470 --> 00:00:07.410
it comes to user acquisition.

00:00:07.410 --> 00:00:10.010
Who wants to wait 30 minutes
to download some massive app

00:00:10.010 --> 00:00:12.660
on a 2G connection or
pay the high data rates

00:00:12.660 --> 00:00:15.216
required to download that
app on a metered network?

00:00:15.216 --> 00:00:16.340
My name is Colt McCandliss.

00:00:16.340 --> 00:00:18.682
And to keep your app from
being one of those data hogs,

00:00:18.682 --> 00:00:20.390
there are some important
tools and tricks

00:00:20.390 --> 00:00:22.000
that you should
keep up your sleeve.

00:00:22.000 --> 00:00:23.691
At the [? quarter ?]
reducing APK size

00:00:23.691 --> 00:00:25.440
comes the understanding
that bloat usually

00:00:25.440 --> 00:00:28.290
comes from two key factors--
resources and code.

00:00:28.290 --> 00:00:30.790
And since resources can often
account for the largest bloat,

00:00:30.790 --> 00:00:33.399
and is the easiest to fix,
we're going to start there.

00:00:33.399 --> 00:00:35.440
The first and most important
thing you need to do

00:00:35.440 --> 00:00:36.830
is make sure that
you're properly

00:00:36.830 --> 00:00:38.940
using the Remove
Unused Resources

00:00:38.940 --> 00:00:40.850
flag in your gretl files.

00:00:40.850 --> 00:00:42.960
This flag will remove
any content that's not

00:00:42.960 --> 00:00:44.252
being used by your application.

00:00:44.252 --> 00:00:45.668
This includes
anything that you've

00:00:45.668 --> 00:00:47.939
forgotten to prune from
your tree and resources that

00:00:47.939 --> 00:00:49.730
have been included in
third party libraries

00:00:49.730 --> 00:00:51.890
but your app doesn't use.

00:00:51.890 --> 00:00:53.760
Secondly, most
resource bloat comes

00:00:53.760 --> 00:00:56.310
from supporting multiple
resolutions and screen

00:00:56.310 --> 00:00:58.520
densities for your app.

00:00:58.520 --> 00:01:00.990
As of Android 4.4,
the framework supports

00:01:00.990 --> 00:01:10.040
LDPI, MDPI, TVDPI, HDPI,
xHDPI, xxHDPI, and xxxHDPI.

00:01:10.040 --> 00:01:10.910
But let's be clear.

00:01:10.910 --> 00:01:13.080
Just because you can
support all these densities

00:01:13.080 --> 00:01:15.470
doesn't mean you should
have copies of your assets

00:01:15.470 --> 00:01:16.530
for each one of them.

00:01:16.530 --> 00:01:18.140
And see, if you
don't have resources

00:01:18.140 --> 00:01:20.430
for a specific
resolution, the framework

00:01:20.430 --> 00:01:22.350
will rescale an
existing resource

00:01:22.350 --> 00:01:23.560
to fit the bill for you.

00:01:23.560 --> 00:01:26.170
So if there is no noticeable
difference between the resource

00:01:26.170 --> 00:01:29.660
you're scaling by hand and
the framework re-sized one,

00:01:29.660 --> 00:01:31.180
you can toss your
custom one out.

00:01:31.180 --> 00:01:33.170
The result is a
much leaner APK that

00:01:33.170 --> 00:01:36.620
has only the resources it
needs for distribution.

00:01:36.620 --> 00:01:38.510
Thirdly, we all know
that images account

00:01:38.510 --> 00:01:39.690
for the largest footprints.

00:01:39.690 --> 00:01:43.380
So for icons or other small,
simple graphics in your app,

00:01:43.380 --> 00:01:45.800
you might want to take a look
at vector drawables instead

00:01:45.800 --> 00:01:47.650
of PNGs or JPEGs.

00:01:47.650 --> 00:01:50.440
These are assets that describe
the shape of your graphic using

00:01:50.440 --> 00:01:52.537
XML instead of just raw pixels.

00:01:52.537 --> 00:01:54.370
The result is that
instead of keeping around

00:01:54.370 --> 00:01:57.150
one version of your drawable
for each supported resolution,

00:01:57.150 --> 00:01:59.595
you instead can
use one file and it

00:01:59.595 --> 00:02:02.820
will generate the resolution
you need at load time.

00:02:02.820 --> 00:02:06.290
Fourthly, try to reuse
resources wherever possible.

00:02:06.290 --> 00:02:08.490
Android provide
several utilities

00:02:08.490 --> 00:02:11.235
to modify an existing
asset in layout code,

00:02:11.235 --> 00:02:12.860
which you could use
to get the look you

00:02:12.860 --> 00:02:16.384
want without having to include
a whole new unique image.

00:02:16.384 --> 00:02:18.800
For example, let's say you've
got two images that are just

00:02:18.800 --> 00:02:20.030
rotations of each other.

00:02:20.030 --> 00:02:23.740
You could get rid of one by
just creating a rotate drawable

00:02:23.740 --> 00:02:25.220
to create the other.

00:02:25.220 --> 00:02:27.880
Now while these may
sound like small changes,

00:02:27.880 --> 00:02:30.990
they can yield a significant
savings for your APK.

00:02:30.990 --> 00:02:33.120
For example, the
Android framework team

00:02:33.120 --> 00:02:35.430
was able to use
color tint support,

00:02:35.430 --> 00:02:38.060
then go and replace nine
patches with XML shapes,

00:02:38.060 --> 00:02:40.810
and then replace bitmaps
with vector drawables.

00:02:40.810 --> 00:02:45.680
The result-- their APK
drawable count shrunk by 80%.

00:02:45.680 --> 00:02:47.730
Now once you get your
assets in a smooth state,

00:02:47.730 --> 00:02:50.220
it's now time to make
sure that your code is

00:02:50.220 --> 00:02:51.540
as slim as possible.

00:02:51.540 --> 00:02:53.360
See, even though
code bloat is not

00:02:53.360 --> 00:02:55.580
as problematic as
resources, remember,

00:02:55.580 --> 00:02:58.920
when you're downloading things
on 2G, every bit counts.

00:02:58.920 --> 00:03:00.580
Now once again,
your first step is

00:03:00.580 --> 00:03:03.160
to make sure that
your use of ProGuard

00:03:03.160 --> 00:03:05.850
is being done correctly
to have code removal.

00:03:05.850 --> 00:03:08.230
Simply set the
minified enabled flag

00:03:08.230 --> 00:03:09.854
to True in your gretl settings.

00:03:09.854 --> 00:03:12.270
This will signal ProGuard to
do all the heavy lifting when

00:03:12.270 --> 00:03:13.910
you want to compile your app.

00:03:13.910 --> 00:03:16.000
We did a video on that if
you want to learn more.

00:03:16.000 --> 00:03:17.800
Next up, try to
optimize code which

00:03:17.800 --> 00:03:20.930
is responsible for
generating other code.

00:03:20.930 --> 00:03:23.400
There's lots of things, like
enums and protocol buffers,

00:03:23.400 --> 00:03:26.290
which can result in an increased
number of methods and classes

00:03:26.290 --> 00:03:29.150
inside of your .dex
file, thus causing bloat.

00:03:29.150 --> 00:03:31.790
As such, make sure to have a
key nine or, in some cases,

00:03:31.790 --> 00:03:34.930
a flame thrower, to tune and
optimize this type of code,

00:03:34.930 --> 00:03:36.630
as it can reduce the
amount of code that

00:03:36.630 --> 00:03:38.100
gets generated from it.

00:03:38.100 --> 00:03:40.140
Finally, take a hard
look at libraries you've

00:03:40.140 --> 00:03:41.510
included in your application.

00:03:41.510 --> 00:03:43.320
Some libraries,
especially those designs

00:03:43.320 --> 00:03:45.250
for the server or the
desktop environments,

00:03:45.250 --> 00:03:47.260
come with a whole lot
of objects and methods

00:03:47.260 --> 00:03:49.180
that your Android app
just doesn't need.

00:03:49.180 --> 00:03:52.870
Now to be fair, ProGuard helps
solve part of this problem.

00:03:52.870 --> 00:03:55.340
But it can't fix everything
since some of these libraries

00:03:55.340 --> 00:03:58.300
can have big internal
dependencies that ProGuard just

00:03:58.300 --> 00:03:59.250
can't remove.

00:03:59.250 --> 00:04:01.300
Not to mention that for
these large libraries,

00:04:01.300 --> 00:04:02.980
this type of
ProGuard optimization

00:04:02.980 --> 00:04:06.210
can come at a great cost of
taking longer to compile.

00:04:06.210 --> 00:04:08.220
As such, always make
sure to try to find

00:04:08.220 --> 00:04:11.230
a tiny, mobile friendly,
alternative version

00:04:11.230 --> 00:04:12.410
of the library you need.

00:04:12.410 --> 00:04:13.785
And if that fails,
you can always

00:04:13.785 --> 00:04:15.951
just extract the functions
you need from the library

00:04:15.951 --> 00:04:18.480
and put in your own code base
if you're willing to do that.

00:04:18.480 --> 00:04:21.250
Anyhow, the most
important in all of this

00:04:21.250 --> 00:04:23.430
is properly splitting your APK.

00:04:23.430 --> 00:04:26.300
See, there's some content that
is bundled into your APK which

00:04:26.300 --> 00:04:29.040
all users have to download,
but only some [? SOA ?] portion

00:04:29.040 --> 00:04:31.290
will ever use, like
having a small screen

00:04:31.290 --> 00:04:35.070
device download a high
resolution screen content.

00:04:35.070 --> 00:04:36.600
To fix this, the
Android platform

00:04:36.600 --> 00:04:39.680
allows you to split
content into different APKs

00:04:39.680 --> 00:04:44.370
based on things like APK levels,
screen sizes, and GPU texture

00:04:44.370 --> 00:04:45.120
support.

00:04:45.120 --> 00:04:47.630
This way, devices with
specific screen sizes

00:04:47.630 --> 00:04:50.324
won't receive assets
from sizes it won't use.

00:04:50.324 --> 00:04:51.740
Although, be warned
that this does

00:04:51.740 --> 00:04:54.540
come with a little extra
overhead to build and deploy.

00:04:54.540 --> 00:04:57.070
Oh, and as of
Android Studio 2.2,

00:04:57.070 --> 00:05:00.000
there's a really
fancy new built in APK

00:05:00.000 --> 00:05:01.697
analyzer, which
helps you understand

00:05:01.697 --> 00:05:03.780
the contents and the sizes
of different components

00:05:03.780 --> 00:05:05.160
in your APK.

00:05:05.160 --> 00:05:07.680
It gives you direct access
to see what's being included,

00:05:07.680 --> 00:05:09.630
its sizes, and help
you figure out what's

00:05:09.630 --> 00:05:11.260
needed to make them smaller.

00:05:11.260 --> 00:05:13.550
See, at its core,
making smaller APKs

00:05:13.550 --> 00:05:16.260
makes faster downloads, which
makes happier users, which

00:05:16.260 --> 00:05:17.920
makes happier developers.

00:05:17.920 --> 00:05:19.964
So make everybody
happier by checking out

00:05:19.964 --> 00:05:22.130
the rest of the Android
Performance Patterns videos.

00:05:22.130 --> 00:05:24.750
And don't forget to ask the
tough questions on our Google+

00:05:24.750 --> 00:05:25.760
community.

00:05:25.760 --> 00:05:28.529
So keep calm, profile your
code, and always remember,

00:05:28.529 --> 00:05:29.070
perf matters.

00:05:29.070 --> 00:05:32.720
[MUSIC PLAYING]

