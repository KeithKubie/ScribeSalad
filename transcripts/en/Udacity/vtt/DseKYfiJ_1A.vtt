WEBVTT
Kind: captions
Language: en

00:00:05.620 --> 00:00:09.340
Alright, we've covered a lot of ground. Easily a dozen performance rules.

00:00:09.340 --> 00:00:12.990
&gt;&gt; Yeah, to be honest, it's a bit overwhelming. There's a lot to keep in mind.

00:00:12.990 --> 00:00:15.810
&gt;&gt; I think I can help you with that. There are a lot of different rules, but

00:00:15.810 --> 00:00:18.550
really, there are three buckets into which we can

00:00:18.550 --> 00:00:21.730
place most of them. So what do you mean?

00:00:21.730 --> 00:00:23.310
&gt;&gt; Well, let's take a look.

00:00:23.310 --> 00:00:26.950
&gt;&gt; First, we talked about minifying, compression, and caching.

00:00:26.950 --> 00:00:30.650
All three techniques apply to HTML, CSS, and JavaScript.

00:00:30.650 --> 00:00:33.310
Next, we know that some resources, namely

00:00:33.310 --> 00:00:37.320
CSS, will block rendering. To optimize this, we

00:00:37.320 --> 00:00:40.240
talked about two strategies. Use media queries

00:00:40.240 --> 00:00:44.090
on link to unblock rendering, and inline CSS.

00:00:44.090 --> 00:00:46.690
Finally, we also saw that Javascript blocks

00:00:46.690 --> 00:00:49.270
the document parser, which is something we want

00:00:49.270 --> 00:00:51.940
to avoid. To fix that, we can defer

00:00:51.940 --> 00:00:55.650
Javascript execution, or use the async attribute on

00:00:55.650 --> 00:00:59.850
the script tag. So, looking at these, can you spot some patterns?

00:00:59.850 --> 00:01:04.360
&gt;&gt; Hm, let's see. Minify, compress, cache, and

00:01:04.360 --> 00:01:06.790
minimizing the amount of HTML, CSS, and Javascript.

00:01:06.790 --> 00:01:10.740
It's all about reducing the amount of data we have to send down the wire, right?

00:01:10.740 --> 00:01:13.390
&gt;&gt; Spot on, that's the first bucket, minimize

00:01:13.390 --> 00:01:15.960
the number of bytes. The fewer bytes we need

00:01:15.960 --> 00:01:17.920
to download, the faster the browser can get

00:01:17.920 --> 00:01:20.600
the data and start processing to render the page.

00:01:20.600 --> 00:01:21.770
Any other patterns?

00:01:21.770 --> 00:01:24.480
&gt;&gt; Hm, okay, so this one and this

00:01:24.480 --> 00:01:27.020
one. Are all about removing files from the critical

00:01:27.020 --> 00:01:29.690
rendering path. For CSS there's the media query

00:01:29.690 --> 00:01:32.780
stuff, and for JavaScript we have the asyntac word.

00:01:32.780 --> 00:01:34.860
&gt;&gt; Exactly. There are many cases where we need CSS

00:01:34.860 --> 00:01:38.360
and JavaScript, but there really shouldn't block rendering of a page.

00:01:38.360 --> 00:01:41.530
Things like print style sheets and analytics JavaScript code are

00:01:41.530 --> 00:01:45.970
both great examples. Our second bucket is to reduce the number

00:01:45.970 --> 00:01:47.600
of critical resources.

00:01:47.600 --> 00:01:50.120
&gt;&gt; Right, not all resources are critical.

00:01:50.120 --> 00:01:51.680
So I guess we should play close attention

00:01:51.680 --> 00:01:54.450
to CSS and JavaScript in particular. What's the

00:01:54.450 --> 00:01:57.080
third bucket? I don't see anything left here.

00:01:57.080 --> 00:01:57.640
&gt;&gt; Right.

00:01:57.640 --> 00:02:01.760
&gt;&gt; The last one is, is to shorten the critical rendering path length.

00:02:02.810 --> 00:02:04.500
&gt;&gt; Wait, what do you mean by length?

00:02:04.500 --> 00:02:07.400
&gt;&gt; Good question. Let's work through some hands-on examples. Let's

00:02:07.400 --> 00:02:11.020
construct the critical rendering paths for our hello world page here.

00:02:11.020 --> 00:02:14.890
At time zero, we request the HTML. Once

00:02:14.890 --> 00:02:19.290
the response arrives, sometime later at time 1. We

00:02:19.290 --> 00:02:22.030
parse the HTML and construct the DOM. And

00:02:22.030 --> 00:02:24.590
then we render the page to the screen. Note

00:02:24.590 --> 00:02:29.590
that there's no CSS or JavaScript. So as soon as we have the DOM, we can render

00:02:29.590 --> 00:02:31.670
the page. We do have an image in this

00:02:31.670 --> 00:02:34.490
page, but it doesn't block the critical rendering path.

00:02:34.490 --> 00:02:35.840
&gt;&gt; That seems pretty straightforward.

00:02:35.840 --> 00:02:36.110
&gt;&gt; Yeah,

00:02:36.110 --> 00:02:38.070
fair enough. We'll make it more interesting

00:02:38.070 --> 00:02:40.540
in a second, but first, let's analyze the

00:02:40.540 --> 00:02:43.920
first page against our three buckets. First, how

00:02:43.920 --> 00:02:46.930
many critical path resources do we have here?

00:02:46.930 --> 00:02:49.910
&gt;&gt; Well, there's only one HTML file, and obviously

00:02:49.910 --> 00:02:53.246
we need that to render the page, so. Just one?

00:02:53.246 --> 00:02:55.490
&gt;&gt; Yup. We have one critical resource on this

00:02:55.490 --> 00:02:59.360
page. Now, how many critical bytes do we have here?

00:02:59.360 --> 00:03:02.260
&gt;&gt; Well the HTML's five kilobytes, so five kilobytes?

00:03:02.260 --> 00:03:08.250
&gt;&gt; Right again. We have five kilobytes. Now, the last one. In the best case, how

00:03:08.250 --> 00:03:10.040
many round trips between the browser and the

00:03:10.040 --> 00:03:12.390
server do we need to render this page?

00:03:12.390 --> 00:03:16.680
&gt;&gt; Hm, I'm guessing also one. We send the requests to the

00:03:16.680 --> 00:03:19.880
server, and we get the response, and I think with that we're good.

00:03:21.010 --> 00:03:23.930
&gt;&gt; You're right this time. The HTML file is small then we

00:03:23.930 --> 00:03:27.500
only need one route trip to fetch all the data. As a result,

00:03:27.500 --> 00:03:30.310
the best case critical path length is also 1.

00:03:30.310 --> 00:03:32.910
&gt;&gt; I remember PHP insight said that my page

00:03:32.910 --> 00:03:36.980
should ideally be under 14 kilobytes. Is this why?

00:03:36.980 --> 00:03:40.090
&gt;&gt; Yes, exactly. And of course if the page is larger the page will

00:03:40.090 --> 00:03:44.460
still render, but if the file is large, it'll take more round trips to fetch

00:03:44.460 --> 00:03:48.130
the data. And this is pretty low level stuff, but it can make a

00:03:48.130 --> 00:03:50.260
big difference in how quickly the page

00:03:50.260 --> 00:03:52.630
takes to render. So, check the instructor notes

00:03:52.630 --> 00:03:56.250
if you want to learn more. Wait, did you write a book on this?

00:03:56.250 --> 00:03:59.640
&gt;&gt; Actually yes, yes I did, and it's available online and it's free. So if

00:03:59.640 --> 00:04:01.580
you're curious about this topic you can

00:04:01.580 --> 00:04:03.920
learn more about it. Check the Instructor Notes.

00:04:03.920 --> 00:04:04.870
&gt;&gt; Cool, yeah, will do.

