WEBVTT
Kind: captions
Language: en

00:00:00.459 --> 00:00:04.880
&gt;&gt;Kelly Norton: I'm Kelly Norton. I'm the
tech lead for the Speed Tracer open source

00:00:04.880 --> 00:00:06.490
project.

00:00:06.490 --> 00:00:11.639
Now before, before I get started in earnest,
I just wanna ask a quick question which is:

00:00:11.639 --> 00:00:15.400
how many people attended my talk by a similar
name last year? Anyone? Oh, cool. Awesome.

00:00:15.400 --> 00:00:16.400
&gt;&gt;voice in audience: [inaudible]

00:00:16.400 --> 00:00:22.199
&gt;&gt;Kelly Norton: Oh, awesome. Yeah. So, and
I, yeah a lot of people watched it on the

00:00:22.199 --> 00:00:23.199
Web.

00:00:23.199 --> 00:00:29.859
So, I'm gonna do things a-a little bit different
this year. Last year I talked about performance

00:00:29.859 --> 00:00:35.350
tips and I told you what GWT, all the tools
in GWT do to help you make your apps faster.

00:00:35.350 --> 00:00:41.039
This year I'm gonna do two things different.
The first thing is I'm not just gonna talk

00:00:41.039 --> 00:00:45.510
about GWT development, I'm actually gonna
broaden the scope a little bit and just talk

00:00:45.510 --> 00:00:50.710
about developing Web front-ends. The reason
will be obvious to you as I go through this,

00:00:50.710 --> 00:00:54.670
so if you're writing your apps in JavaScript
or Java this talk will be of interest to you.

00:00:54.670 --> 00:01:00.460
The second thing is, instead of giving you
a-a bunch of tips and-and telling you all

00:01:00.460 --> 00:01:06.399
the new things in GWT to make your apps faster,
instead I'm gonna concentrate on this tool

00:01:06.399 --> 00:01:11.509
Speed Tracer. The reasoning there is that
I-I truly believe that by showing you this

00:01:11.509 --> 00:01:16.530
tool, it actually encaps-encapsulates more
tips in it than I can possibly tell you about

00:01:16.530 --> 00:01:18.409
in an hour here on stage.

00:01:18.409 --> 00:01:23.750
And the-the secret is, that much of the stuff
that I said last year came directly from Speed

00:01:23.750 --> 00:01:25.890
Tracer, which wasn't released at the time.

00:01:25.890 --> 00:01:31.310
However, if you absolutely are gonna be demandin'
your money back if you don't get tips about

00:01:31.310 --> 00:01:38.560
performance, at least a day's worth, there's
a lot to see and hear at Google I/O, including

00:01:38.560 --> 00:01:42.722
a number of talks today in this room and a
talk tomorrow.

00:01:42.722 --> 00:01:47.659
In fact there's so much going on performance-wise,
I-I just took it upon myself to call it "the

00:01:47.659 --> 00:01:51.590
(secret) front-end performance series."

00:01:51.590 --> 00:01:57.330
One more bit of administration. If you're
interested in the live waving of this, that

00:01:57.330 --> 00:02:03.630
is you want to take notes, have conversations,
ask questions while this session is happening

00:02:03.630 --> 00:02:08.289
and after, jot down that URL quickly and,
and join in the wave.

00:02:08.289 --> 00:02:09.340
[pause]

00:02:09.340 --> 00:02:12.620
Alright. Let's get started.

00:02:12.620 --> 00:02:16.240
So I told you what I'm not gonna talk about
and told you what other people were gonna

00:02:16.240 --> 00:02:20.930
talk about. Now let me actually tell you what
I'm gonna talk about.

00:02:20.930 --> 00:02:25.690
So the plan today is first we're gonna start.
Now when I do a performance talk I always

00:02:25.690 --> 00:02:28.600
like to start by justifying why performance
matters.

00:02:28.600 --> 00:02:33.660
Now that's kind of preachin' to-to the choir
right? I mean you're at a Google conference

00:02:33.660 --> 00:02:38.310
in a session about performance. Google has
historically cared a lot about performance,

00:02:38.310 --> 00:02:43.110
but I-I'd like to simplify the argument a
little bit and focus on one particular aspect

00:02:43.110 --> 00:02:45.870
of performance in applications.

00:02:45.870 --> 00:02:49.480
After we do that, hopefully I will have convinced
you; you'll stick around; and I'll spend most

00:02:49.480 --> 00:02:55.090
of the time from there on out showing you
Speed Tracer. Giving you a-a test drive and

00:02:55.090 --> 00:02:59.740
then we'll actually after that jump into a
few specific examples; scenarios that we've

00:02:59.740 --> 00:03:04.691
had to tackle both internal and external to
Google, where we've actually used Speed Tracer

00:03:04.691 --> 00:03:10.370
and found some of our own performance problems
and fortunately fixed them.

00:03:10.370 --> 00:03:13.900
After that, you'll be so thrilled, you'll
wanna hear about new features; of course I'll

00:03:13.900 --> 00:03:17.540
tell you about those and since we started
a little bit early, hopefully we'll have time

00:03:17.540 --> 00:03:20.890
for even a-a-a few extra questions.

00:03:20.890 --> 00:03:26.460
So first, let's actually tackle that question
of why performance matters. Now whenever you're

00:03:26.460 --> 00:03:31.700
gonna justify spending time on performance
in your Web applications, there's always a

00:03:31.700 --> 00:03:37.670
lot of complex reasons people give why it
matters, why you should do it. To me, and-and

00:03:37.670 --> 00:03:41.970
they're all perfectly good, I'm-I'm sure their
great, they include math and return on investment

00:03:41.970 --> 00:03:43.350
and everything.

00:03:43.350 --> 00:03:48.570
But to me it-it actually comes down to a very
simple thing. Performance affects your users.

00:03:48.570 --> 00:03:53.200
I've always said, "Performance is actually
just a characteristic of usability." Now I'm

00:03:53.200 --> 00:03:57.670
gonna try to continue to convince you of this,
but I'm only gonna use basically three bullet

00:03:57.670 --> 00:04:03.650
points from here on out with some sup, some
supporting evidence, including some demos.

00:04:03.650 --> 00:04:10.660
So first bullet point: performance affects
your users simply because it affects your

00:04:10.660 --> 00:04:16.330
users' ability to actually use your applications.
So to give you an example of this--get to

00:04:16.330 --> 00:04:22.849
the right window here--oh hey, my talk is
starting.

00:04:22.849 --> 00:04:23.849
[pause]

00:04:23.849 --> 00:04:27.139
So very simple game; you can play along at
your seat. As a matter of fact, I gave you

00:04:27.139 --> 00:04:31.389
the URL because it's even harder for me doing
it up here on stage with a track pad, so I'm

00:04:31.389 --> 00:04:36.091
probably gonna get some misleading results
as I try it here on stage. Very simple game

00:04:36.091 --> 00:04:40.590
 -- all you do, you grab the ball, you drop
it in the hole, and it'll time you.

00:04:40.590 --> 00:04:44.870
However, as you go through each of these putting
greens, I'm gonna increase the amount of delay.

00:04:44.870 --> 00:04:48.870
So the first one obviously zero milliseconds
delay. As you move the mouse as you're dragging

00:04:48.870 --> 00:04:53.060
it there's no delay, nothing to interfere
with you. It seems easy. The-the ball stays

00:04:53.060 --> 00:04:58.599
right there with the mouse, but if I start
adding additional delay, it-it not only takes

00:04:58.599 --> 00:05:01.319
me longer, but it actually feels more difficult.

00:05:01.319 --> 00:05:04.039
[pause]

00:05:04.039 --> 00:05:08.860
A hundred milliseconds, it's-it's pretty difficult.
Wow.

00:05:08.860 --> 00:05:14.590
So the question is, why is that?

00:05:14.590 --> 00:05:20.129
So how many people have heard of Fitts's Law?
Probably a number of you. This is usually

00:05:20.129 --> 00:05:25.260
the-the sort of HDI concept that tells us
that we want to have big buttons, and we want

00:05:25.260 --> 00:05:28.659
to have 'em close. It basically says, "It's
exponentially easier to hit something that's

00:05:28.659 --> 00:05:32.770
big and close," which totally makes sense.
Now if you dig a little deeper into Fitts's

00:05:32.770 --> 00:05:39.469
Law, it's actually based on something called
the deterministic iterative corrections model,

00:05:39.469 --> 00:05:45.050
which is a really fancy way of saying that
the way this works is you need to take your

00:05:45.050 --> 00:05:48.360
mouse pointer, and you need to put it over
something. You look at the distance between

00:05:48.360 --> 00:05:51.379
where your mouse pointer is and where the
button is, and you tell your hand to go off

00:05:51.379 --> 00:05:52.889
in that direction.

00:05:52.889 --> 00:05:56.789
Well your hand's not very intelligent on its
own, so at some point you realize there's

00:05:56.789 --> 00:06:02.099
some error, and so you correct for that. And
then it, so you change your direction a little

00:06:02.099 --> 00:06:06.979
bit, and then you correct again. And you do
this in a series of smaller and smaller sub-movements

00:06:06.979 --> 00:06:11.129
until you finally get to your target, right?
In fact, the series of smaller and smaller

00:06:11.129 --> 00:06:14.979
sub-movements is where that whole log term
comes from in Fitts's Law.

00:06:14.979 --> 00:06:20.030
Now why does this apply to the golf? Well,
if you think about it, applying what I just

00:06:20.030 --> 00:06:24.199
described, when you introduce delay what it
means is every time you're do one of those

00:06:24.199 --> 00:06:28.020
sub-movements, you're operating on out of
date information. So you have, you can do

00:06:28.020 --> 00:06:35.009
two things: you can either slow down, which
obviously is unpleasant, or you can make a

00:06:35.009 --> 00:06:36.999
lot more of these small sub-movements.

00:06:36.999 --> 00:06:42.349
So net, the sort of the net effect is that
you increase one of the coefficients here

00:06:42.349 --> 00:06:48.310
B, which is usually somethin' that varies
from person to person, and it's also something

00:06:48.310 --> 00:06:52.349
that tends to get larger as people age. So
the punch line for this whole thing is by

00:06:52.349 --> 00:06:56.509
making your apps slow, you actually make your
users feel older. So --

00:06:56.509 --> 00:06:58.340
[laughter]

00:06:58.340 --> 00:07:04.479
Okay. So the other thing is-is users are just
amazingly sensitive to delays. This is actually

00:07:04.479 --> 00:07:08.189
a demo that I showed last year, but I'm gonna
show it again 'cause many people told me it-it

00:07:08.189 --> 00:07:12.650
demonstrated sort of the threshold at which
people started to see things. 'Cause it's

00:07:12.650 --> 00:07:16.849
often surprising if you do this series where
you start wrapping up delays, the point at

00:07:16.849 --> 00:07:18.370
which you actually started to notice.

00:07:18.370 --> 00:07:23.490
So let's go over this. Now you've seen this
interaction everywhere. I mean it's all over

00:07:23.490 --> 00:07:28.680
the Web. I simply mouse over some links, and
the links highlight to support the fact that

00:07:28.680 --> 00:07:32.969
my mouse is now over them. I mean we-we refer
to it as a hover, right?

00:07:32.969 --> 00:07:37.949
Now the simple interact that you find everywhere,
what happens if I start adding delay to this?

00:07:37.949 --> 00:07:41.990
At what point are you gonna notice? So obviously
at no delay this thing's great; feels good.

00:07:41.990 --> 00:07:48.979
If I come up at 25 milliseconds, it's-it's
still keepin' up -- not really a problem.

00:07:48.979 --> 00:07:54.020
Maybe if you're eagle eyed in the front row,
you can see something. If I come up to fil-50

00:07:54.020 --> 00:07:58.909
milliseconds, I mean it's clearly starting
to lag, but it's not problematic. I mean it

00:07:58.909 --> 00:08:06.159
doesn't, it has a little bit of a sluggishness
feel, but if I go all the way up to 100 milliseconds,

00:08:06.159 --> 00:08:12.419
I don't care if you were drinking this morning,
or didn't drink this morning, sorry, this

00:08:12.419 --> 00:08:17.729
is sluggish. And-and you notice this. This
app actually feels like it's not keeping up

00:08:17.729 --> 00:08:22.510
with you; it sort of breaks the metaphor of
your action caused something to happen.

00:08:22.510 --> 00:08:25.710
[pause]

00:08:25.710 --> 00:08:28.910
Okay.

00:08:28.910 --> 00:08:35.950
Now the last one is a surprising one. And
that is that the users' perception of quality

00:08:35.950 --> 00:08:42.010
in your application can actually change based
on the performance alone. In fact, there's

00:08:42.010 --> 00:08:46.190
a surprising study that shows that not only
can their perception of the quality of your

00:08:46.190 --> 00:08:51.430
application change, but actually the content
contained in that application or Webpage can

00:08:51.430 --> 00:08:52.430
actually change.

00:08:52.430 --> 00:08:59.070
They did, in fact, and here's a link to the
study. They found that, or these researchers

00:08:59.070 --> 00:09:03.070
found that as they increased the amount of
latency in loading a Web page, users actually

00:09:03.070 --> 00:09:09.930
consistently rated the-the content of those
Web pages lower. I'm obviously, it would very

00:09:09.930 --> 00:09:16.060
hard to demo this on stage, so bathroom reading
if you wanna grab the link.

00:09:16.060 --> 00:09:17.740
[pause]

00:09:17.740 --> 00:09:24.570
But those are fun demos and everything. If
you're gonna remember one thing about, about

00:09:24.570 --> 00:09:29.880
sort of the why performance is important and
sort of action items for making your apps

00:09:29.880 --> 00:09:33.390
more performant, it's this one number. This
is all you have to remember from this section,

00:09:33.390 --> 00:09:37.490
just one single number; it's hundred milliseconds.
So a hundred milliseconds is the amount of

00:09:37.490 --> 00:09:43.870
time that you as a developer have to block
the UI event queue in the browser that has

00:09:43.870 --> 00:09:44.870
to run code.

00:09:44.870 --> 00:09:48.961
So to make it more concrete. If you wire up
a click handler, you have a hundred milliseconds

00:09:48.961 --> 00:09:53.020
in that click hander-handler, and you have
to return. You set a timer -- when that timer

00:09:53.020 --> 00:09:56.710
fires you got a hundred milliseconds. You
can set another timer -- when it fires you

00:09:56.710 --> 00:10:04.520
get another hundred milliseconds. So if you
follow this, then you're-you're apps are going

00:10:04.520 --> 00:10:08.210
to feel much snappier.

00:10:08.210 --> 00:10:13.290
Hundred milliseconds is not arbitrary. I mean
you saw it appear earlier as I, as I talked

00:10:13.290 --> 00:10:18.190
about the delay. Hundred milliseconds is actually
the limit at which humans start, stop seeing

00:10:18.190 --> 00:10:22.180
things as being instantaneous. So I say a
hundred milliseconds is the limit, obviously

00:10:22.180 --> 00:10:24.630
the average needs to be much lower. If you
make all your events hundred milliseconds,

00:10:24.630 --> 00:10:29.510
it's gonna look like that, the hover example
that I showed you.

00:10:29.510 --> 00:10:33.920
So keep this number in mind. I'm gonna make
it easier for you because I'm gonna show you

00:10:33.920 --> 00:10:37.270
a tool that actually has this number built
right in. But hundred milliseconds really

00:10:37.270 --> 00:10:40.740
is the sort of take away from this section.

00:10:40.740 --> 00:10:46.590
So we're gonna get into showing Speed Tracer,
but first I wanna continue on this one number:

00:10:46.590 --> 00:10:48.950
hundred milliseconds.

00:10:48.950 --> 00:10:53.020
Why is it so hard to do things in a hundred
milliseconds? I mean it seems so easy, there's

00:10:53.020 --> 00:10:58.710
one-tenth of a second, that's the time I have,
but-but why is that so hard in browsers?

00:10:58.710 --> 00:11:03.040
Well the first thing is-is people don't even
measure. I mean this is the, probably the

00:11:03.040 --> 00:11:06.620
number reason, and it's a simple fact. And
why would they? It's very hard. I mean if

00:11:06.620 --> 00:11:11.820
you think about it, maybe I wanna measure
how much time it takes when I click on a button,

00:11:11.820 --> 00:11:15.240
but it's not just enough to measure how much
time it took to do that click amount, I really

00:11:15.240 --> 00:11:20.130
wanna know how much time it took when I called
a method from that click handler, and I wanna

00:11:20.130 --> 00:11:24.010
know how long that method took, and then I
called another method. So before long I have

00:11:24.010 --> 00:11:29.920
this whole framework for taking timings in
my Web app, which is just unwieldy, right?

00:11:29.920 --> 00:11:36.480
The second thing is browners-browsers are
all event and call back based. This-this makes

00:11:36.480 --> 00:11:41.790
it very hard to know what's causing the problems.
So you may see an animation stutter on application,

00:11:41.790 --> 00:11:46.760
you may notice that a, when you click a button
it stayed blue, or, you know, whatever the

00:11:46.760 --> 00:11:52.090
depress color is too long, but it's really
hard to know what caused that, because in

00:11:52.090 --> 00:11:56.450
addition to handling the click event or running
the animation, you may have a timer going

00:11:56.450 --> 00:12:00.710
off, there may be network, there may be data
coming back over the network and an XLMHttpRequest

00:12:00.710 --> 00:12:05.980
and your handler ran for that. So it's really
hard to-to cast blame on the one thing that's

00:12:05.980 --> 00:12:08.700
causing problems in your application.

00:12:08.700 --> 00:12:13.870
And the final thing is browsers are just really
complex. They tend to have lots of nes-nested

00:12:13.870 --> 00:12:19.530
sub-systems; they call each other in sort
of mutually recursive ways; extremely hard

00:12:19.530 --> 00:12:25.750
to reason about and-and the more tricks that
browser vendors use to make them faster, it

00:12:25.750 --> 00:12:29.510
does make it faster, but it also makes it
that much more predictable. So every time

00:12:29.510 --> 00:12:35.080
they make something lazy so that it only happens
when you, when you exercise a particular part

00:12:35.080 --> 00:12:40.760
of the UI, it becomes much harder to reason
about what's going on.

00:12:40.760 --> 00:12:44.450
So we wanted to do somethin' about this 'cause
if-if you've follow along with us for very

00:12:44.450 --> 00:12:50.230
long in Google Web Tool Kit, we're all about
writing fast apps. So we said, "Well, we'll

00:12:50.230 --> 00:12:56.380
build a tool." And we really wanted a tool
that does two things. It one, it-it tells

00:12:56.380 --> 00:12:59.960
you what's goin' on. I said the number one
reason is that no one ever times, well that's,

00:12:59.960 --> 00:13:03.690
you really sho-just, should just have a tool
that's timing for you all the time. That tells

00:13:03.690 --> 00:13:07.820
you how long it takes to do everything inside
your application.

00:13:07.820 --> 00:13:10.870
And when it's timing everything, why not let
it go ahead and tell me what happened inside

00:13:10.870 --> 00:13:16.280
the browser? I mean I have to start to understand
what the browser does so that I can make things

00:13:16.280 --> 00:13:20.610
faster. If I don't know which sub-system in
the browser is causing me problems, I really

00:13:20.610 --> 00:13:27.060
don't know how to structure a fix, right?
So a tool should do, should do these two things.

00:13:27.060 --> 00:13:30.770
And this is, this is where Speed Tracer came
from.

00:13:30.770 --> 00:13:33.790
So I'm gonna actually spend, now I'm gonna
switch over to the browser, and I'm gonna

00:13:33.790 --> 00:13:35.321
spend most of the time showin' you Speed Tracer.

00:13:35.321 --> 00:13:39.690
[pause]

00:13:39.690 --> 00:13:44.060
So let's start with an application you're,
you're probably familiar with, hopefully:

00:13:44.060 --> 00:13:50.120
Google Calendar. You can see I have an extremely
busy schedule this week. And we're just gonna

00:13:50.120 --> 00:13:54.360
use this as an example application. I'm gonna
show you Speed Tracer monitoring the performance

00:13:54.360 --> 00:13:59.230
in Calendar. Now Calendar's it's-it's a, it's
a fast application. The engineers on Calendar

00:13:59.230 --> 00:14:02.450
have honed it, they've tweaked it, they've
used tools like Speed Tracer, and they've

00:14:02.450 --> 00:14:03.450
made it fast.

00:14:03.450 --> 00:14:07.860
But we're gonna use it to-to sort of show
things off.

00:14:07.860 --> 00:14:12.200
So I open Speed Tracer. Speed Tracer's a Chrome
extension. And you'll see that I just, to

00:14:12.200 --> 00:14:16.871
get it started, I just clicked on this button
up here in the, in the top of the browser

00:14:16.871 --> 00:14:19.670
Chrome.

00:14:19.670 --> 00:14:22.490
Okay, so I'm gonna go back to Calendar here,
and I'm just gonna reload it so that we have

00:14:22.490 --> 00:14:29.720
somethin' to look at, and then I can describe
what we're seein'. Go back into Speed Tracer.

00:14:29.720 --> 00:14:33.830
As you probably expect going left to right
is time -- very common way to represent time.

00:14:33.830 --> 00:14:41.390
I'm, I'm gonna zoom out so that we can get
a better view, and then sort of working from

00:14:41.390 --> 00:14:44.470
top to bottom, there's obviously a control
bar at the top which gives you things like

00:14:44.470 --> 00:14:49.060
zooming. You saw me just zoom all the way
out so that I can see all the data.

00:14:49.060 --> 00:14:52.670
Next is, and probably the most noticeable
thing is this graph called the Sluggishness

00:14:52.670 --> 00:14:57.640
graph. Now this sort encapsulates that hundred
milliseconds that I told you about earlier.

00:14:57.640 --> 00:15:04.630
The Sluggishness graph is intended to be really
simple to use. That is if your, if your application

00:15:04.630 --> 00:15:08.790
causes the Sluggishness graph to hit 100 percent
at the top of the graph, then you're keeping

00:15:08.790 --> 00:15:12.970
the browser too busy, which basically means
that you ran something longer than a hundred

00:15:12.970 --> 00:15:16.690
milliseconds. And we even have little heuristics
so that if you continually run things that

00:15:16.690 --> 00:15:22.080
are even some fraction of a hundred milliseconds,
you continue to sort of push up the Sluggishness

00:15:22.080 --> 00:15:23.080
graph.

00:15:23.080 --> 00:15:26.230
The intent here is that you can very easily
run it on the application, and it tells you

00:15:26.230 --> 00:15:29.720
when things are bad. Rather than giving you
a whole dump of data and then you go and analyze

00:15:29.720 --> 00:15:33.700
it, you try to figure out where the slow part
is, this actually tells you when it thinks

00:15:33.700 --> 00:15:35.520
something is not performing well.

00:15:35.520 --> 00:15:40.510
Obviously if you keep, if you keep the graph
low, well below a hundred milliseconds, everything's,

00:15:40.510 --> 00:15:42.920
everything's wonderful.

00:15:42.920 --> 00:15:46.840
So typically the way you use this is you start,
you look at your application and you, and

00:15:46.840 --> 00:15:52.971
you sort of watch the Sluggishness graph looking
for these peaks. And they, they shine or stand

00:15:52.971 --> 00:15:58.200
out on the overview graph down below, which
shows you the full timeline. Once you find

00:15:58.200 --> 00:16:01.590
somethin' of interest, then this is about
the only data we have from Calendar right

00:16:01.590 --> 00:16:07.610
here in this region, I can simply select directly
on the Sluggishness graph and zoom in.

00:16:07.610 --> 00:16:13.810
Now zooming in, zooming in we get the full
details of everything that happens. We list

00:16:13.810 --> 00:16:18.111
all the browser events that happened; the
top level events, so this can include everything

00:16:18.111 --> 00:16:25.850
from parsing HTML as you load up the, the
main HTML page; it can be timer aspiring;

00:16:25.850 --> 00:16:29.650
it even shows paints for the when the browser
decided to repaint the screen.

00:16:29.650 --> 00:16:36.340
Then if you dig deeper into those and expand
one, you can see that you get the full details

00:16:36.340 --> 00:16:41.050
of everything that happened during the, during
this event. And like I said, browser sub-systems

00:16:41.050 --> 00:16:46.650
tend to be very mutually recursive so you
see things like a layout being called recursively

00:16:46.650 --> 00:16:52.090
and parsing of HTML often causes scripts to
run; these sort of things that are very hard

00:16:52.090 --> 00:16:57.430
to reason about. You sort of have them, you
can see them laid out in this convenient event

00:16:57.430 --> 00:16:58.430
trace.

00:16:58.430 --> 00:17:03.560
Now if I then click on, if I then click on
one of the nodes on the tree, I can get even

00:17:03.560 --> 00:17:08.419
more details about exactly what happened;
the details are specific to that type of event,

00:17:08.419 --> 00:17:12.419
so they often help you particularly when one
of these are very large, to find out exactly

00:17:12.419 --> 00:17:13.419
what's causin' the problem.

00:17:13.419 --> 00:17:19.490
And I'm goin' show you sort of a working example
of that soon.

00:17:19.490 --> 00:17:24.009
Okay, so one of the things I wanna highlight
is that a, is that many tools focus on sort

00:17:24.009 --> 00:17:27.819
of the loading of your application when it
first loads off your Web server, and it's

00:17:27.819 --> 00:17:30.539
sort of getting started fast, but that's really
only a part of the story.

00:17:30.539 --> 00:17:34.919
What you really want when you're building
interactive applications, is you want somethin'

00:17:34.919 --> 00:17:39.330
they continue to watch because it's not just
the loading of your application, it has to

00:17:39.330 --> 00:17:44.409
continue to feel, continue to not be sluggish
as we termed it here.

00:17:44.409 --> 00:17:49.899
So to-to just give you a sense of that real
quick: if I go back in the Calendar and I

00:17:49.899 --> 00:17:54.309
suspect that I'll probably wanna go for drinks
later for awhile--

00:17:54.309 --> 00:17:55.610
[laughter]

00:17:55.610 --> 00:18:03.029
Let's call that "Drinks." Go back to Speed
Tracer. Now I'm gonna use the zoom button

00:18:03.029 --> 00:18:07.830
again so I can see the whole timeline, and
I can find that new data that came in. The

00:18:07.830 --> 00:18:13.929
zoom out I see that I have some new data over
to the right here; gonna zoom into that. And-and

00:18:13.929 --> 00:18:18.250
basically the point is here you-you saw that
just as I got the data, as the application

00:18:18.250 --> 00:18:22.330
was loaded, I can continue to get the data
'cause this is, Calendar is an AJAX-style

00:18:22.330 --> 00:18:26.340
application, so that it continues to run code
and update, and it's very interactive. So

00:18:26.340 --> 00:18:31.879
I can continue to monitor that application
as I use it, not just when I'm loading the

00:18:31.879 --> 00:18:32.990
page.

00:18:32.990 --> 00:18:37.659
Okay, so I'm gonna jump back, zoom out real
quick, and jump back in to talk about the

00:18:37.659 --> 00:18:38.840
next part.

00:18:38.840 --> 00:18:45.649
You've probably noticed a few of these top
level events have little green, green, orange,

00:18:45.649 --> 00:18:50.929
and sometimes red indicators to the side.
We call these hints. The-the idea here was

00:18:50.929 --> 00:18:56.440
that we do a lot of performance investigations
with Speed Tracer, and we often discover patterns.

00:18:56.440 --> 00:19:01.860
One-one I'm gonna show you in the next section.
And it's nice to go ahead and-and sort of

00:19:01.860 --> 00:19:06.950
encapsulate, or identify these patterns and
then build some rules to just point them out

00:19:06.950 --> 00:19:07.950
for you.

00:19:07.950 --> 00:19:11.820
Some of them, some of them are very simple.
So in this case, this is simply an event that

00:19:11.820 --> 00:19:15.320
took just slightly over a hundred milliseconds.
But since it took over, took over a hundred

00:19:15.320 --> 00:19:18.539
milliseconds, I wanna sort of give you a light
warning that says, "Hey, this kinda took a

00:19:18.539 --> 00:19:24.200
long time; it's a green, it's a green hint
so it's not really critical, but it's something

00:19:24.200 --> 00:19:28.029
you should know about." It if took even longer,
the thing would get more critical.

00:19:28.029 --> 00:19:34.130
And we have a, we have a number of hints that
have to do with the run time of your application

00:19:34.130 --> 00:19:38.519
and also on the network panel, which shows
you all the network resources that they loaded

00:19:38.519 --> 00:19:48.340
over the network. It also shows you best practices
here for instance, caching of resources; and

00:19:48.340 --> 00:19:54.200
so recommending that you, that you increase,
use the right headers for your cache policies

00:19:54.200 --> 00:19:57.721
for your resources so you don't always have
to fetch them from the server.

00:19:57.721 --> 00:20:01.410
You also notice that now that I'm talkin'
about the network view, it's, it may be hard

00:20:01.410 --> 00:20:05.961
to see, but the network view is actually sort
underlaid on the Sluggishness view, so you

00:20:05.961 --> 00:20:09.590
can kind of see them both at the same time.

00:20:09.590 --> 00:20:13.380
The reason why we did this is because you
always have these HTMLHttpRequests which are

00:20:13.380 --> 00:20:17.590
goin' off to the server, they're getting data,
they're bringing 'em back, and you always

00:20:17.590 --> 00:20:22.510
run code as a result. If you used Google Web
Tool Kit when you do an RPC, you see this

00:20:22.510 --> 00:20:26.630
happen. You go and you do something on the
server and then something, the request comes

00:20:26.630 --> 00:20:31.429
back and you run some code and it's actually
very handy to, handy to know exactly when

00:20:31.429 --> 00:20:35.159
the data came back from the network and then
something ran in the browser. So we wanna

00:20:35.159 --> 00:20:39.289
correlate things going on in the network with
things that are happening inside the browser

00:20:39.289 --> 00:20:42.929
or inside your code.

00:20:42.929 --> 00:20:46.669
Okay, so the final thing I wanna show you
as part of sort of the run through of Speed

00:20:46.669 --> 00:20:53.110
Tracer, is say, say we've used Speed Tracer,
we've found, used it on our application, we've

00:20:53.110 --> 00:20:57.369
just found a performance problem. Now, it's
really hard to talk about performance problems.

00:20:57.369 --> 00:21:03.249
I can, I can send an email to my teammate,
and I can say, "Yeah, when you push this button,

00:21:03.249 --> 00:21:08.460
and then you do this and you resize this,
it gets really slow and it seems like this

00:21:08.460 --> 00:21:13.129
is not updating." And even if I had to communicate
all the data in Speed Tracer, it would be

00:21:13.129 --> 00:21:19.990
really hard, right? I'd have to say, "Well,
it's 32.4 percent layout, and it's 15 percent

00:21:19.990 --> 00:21:23.610
recalculation." It's just not an efficient
way to talk about these problems.

00:21:23.610 --> 00:21:29.090
What I would rather do, is I would rather
take what I have here, send it to my teammate

00:21:29.090 --> 00:21:34.289
or-or post it on mar-in our issue tracker
system, and then have that person open it

00:21:34.289 --> 00:21:38.830
back up and look at what I was seeing. So
to, so when we did Speed Tracer, we added

00:21:38.830 --> 00:21:43.889
the save/load functionality, so I just hit,
hit save, and I save this just as I would

00:21:43.889 --> 00:21:49.700
a Web page; save that to my Desktop. I send
that to my teammate, and I say, "Hey could

00:21:49.700 --> 00:21:55.039
you take a look at this? I don't really like
the way this thing is performing." And let

00:21:55.039 --> 00:21:57.570
me switch back.

00:21:57.570 --> 00:21:58.570
[pause]

00:21:58.570 --> 00:22:06.600
So, I then open up that file I just received
by email; I click open monitor; and we're

00:22:06.600 --> 00:22:11.700
right back to where we were. So, so my teammate
can see exactly what I saw when I found the

00:22:11.700 --> 00:22:15.879
problem. So it's much easier to talk about
performance problems when you do run into

00:22:15.879 --> 00:22:17.080
them.

00:22:17.080 --> 00:22:18.279
[pause]

00:22:18.279 --> 00:22:21.869
Close those out.

00:22:21.869 --> 00:22:23.070
[pause]

00:22:23.070 --> 00:22:25.470
All right.

00:22:25.470 --> 00:22:26.679
[pause]

00:22:26.679 --> 00:22:30.140
Okay. So that's sort of the full, that's sort
of the full tour of the Speed Tracer UI. That

00:22:30.140 --> 00:22:33.000
gives you a sense of-of how to use it at the
high level.

00:22:33.000 --> 00:22:38.269
But now I wanna dive a little deeper and take
a couple of specific examples a-a scenarios

00:22:38.269 --> 00:22:43.630
where we've had to do a performance investigations
on internal Google applications and some external

00:22:43.630 --> 00:22:44.630
applications.

00:22:44.630 --> 00:22:48.480
Now I've simplified these examples 'cause
I, if I didn't we would spend three hours

00:22:48.480 --> 00:22:52.980
just going, trying to explain to you the code
of some of these applications. But, hopefully,

00:22:52.980 --> 00:22:56.960
it'll give you a flavor of the types of things
you can find, and the ways in which Speed

00:22:56.960 --> 00:22:59.300
Tracer pinpoints the problem.

00:22:59.300 --> 00:23:05.179
So we're gonna start with a, an example I
like to call the "The mysterious case of too

00:23:05.179 --> 00:23:08.159
much layout." And this is one of my favorites
to show because this is absolutely something

00:23:08.159 --> 00:23:11.910
we did not know about until we started looking
at these applications in a Speed Tracer.

00:23:11.910 --> 00:23:20.119
I'll tell you that we originally ran into
this problem, we're helping the AdWords Front

00:23:20.119 --> 00:23:24.450
End Team. Now as you can imagine, that team
needs to display a lot of tables. They need

00:23:24.450 --> 00:23:30.131
to display tables with numbers in them and
you, in fact, many of them for probably obvious

00:23:30.131 --> 00:23:34.980
reasons you want to edit it; you want to edit
the-the values. I don't think they're as powerful

00:23:34.980 --> 00:23:40.340
as this, you can't actually change the melting
point of hydrogen, but you get the point.

00:23:40.340 --> 00:23:43.720
So very simple; I-I've brought it down to
this simple part. I wanna build a table; I

00:23:43.720 --> 00:23:50.590
want that table to be editable. So and I'm
gonna, let me close this window just so I

00:23:50.590 --> 00:23:55.999
don't get confused. So I'm gonna go ahead
and open Speed Tracer as I talk. Make that

00:23:55.999 --> 00:23:58.499
a full screen and return here.

00:23:58.499 --> 00:24:03.460
Now I'm gonna clear this for a second, and
I'm gonna show you what we originally saw

00:24:03.460 --> 00:24:08.509
in their UI, and the thing that had them distressed.
So they had to build up this table, so when

00:24:08.509 --> 00:24:14.601
they did that they hit run and you notice
that that button stayed blue for a little

00:24:14.601 --> 00:24:19.529
long, and it was actually a little bit of
delay there as it built up the table. This

00:24:19.529 --> 00:24:23.909
table, and if you style it even more, the
performance gets worse.

00:24:23.909 --> 00:24:28.150
So let's, let's actually look at it in Speed
Tracer and confirm that it was probably a

00:24:28.150 --> 00:24:34.809
little longer than we wanted. In fact, it's
about 431 milliseconds which, that's-that's

00:24:34.809 --> 00:24:38.309
well beyond the hundred milliseconds that
we're aimin' for.

00:24:38.309 --> 00:24:47.119
So now being engineers, and I am as guilty
as probably anyone, I knew what the problem

00:24:47.119 --> 00:24:50.860
was. There was no need to even look at it
in a tool, I mean we all knew what the problem

00:24:50.860 --> 00:24:56.169
was. We were sure of ourselves, and so let
me show you what the code looked like to begin

00:24:56.169 --> 00:24:57.169
with.

00:24:57.169 --> 00:24:59.769
Very simple. This is just a part of it, right?
When we built a cell for each one of these

00:24:59.769 --> 00:25:09.840
tables, we-we created a cell which just a-a-a
TD Element in HTML speak; then we created

00:25:09.840 --> 00:25:16.730
a span to put our text in. We needed the,
we needed the width of the, of the cell because

00:25:16.730 --> 00:25:20.909
we wanted to have this hidden text box, right?
So we wanted to put this there. We just wanted

00:25:20.909 --> 00:25:25.249
it to be there so we could just, made it easy,
we would just enable it and show it whenever

00:25:25.249 --> 00:25:28.990
someone clicked on the cell. And then of course
we wired up the click handlers to show it,

00:25:28.990 --> 00:25:35.200
and when-when you leave the text box we committed
our changes; those, really simple.

00:25:35.200 --> 00:25:38.840
But I was sure that the problem was, I mean
you hear all the time it takes a long time

00:25:38.840 --> 00:25:42.519
to build up DOM Elements, right. And here
we are we're buildin' too many DOM Elements.

00:25:42.519 --> 00:25:44.970
So I built a hidden text box that I didn't
even need.

00:25:44.970 --> 00:25:48.629
No need to even look at it in the tool. We
know what the problem was, let's just go ahead

00:25:48.629 --> 00:25:53.919
and fix it. So we fix the code and by comparison
you'll see that all I did is I moved this

00:25:53.919 --> 00:25:59.059
text box inside the click event, right? So
this-this should fix our problem. It was,

00:25:59.059 --> 00:26:06.419
it was wonderful it only took a few minutes
to fix it. And, but surprisingly when we tried

00:26:06.419 --> 00:26:11.430
it, it didn't seem much faster. And looking
at it in Speed Tracer--

00:26:11.430 --> 00:26:15.509
[pause]

00:26:15.509 --> 00:26:19.440
sort of confirm. It did get a little faster,
but certainly not below a hundred milliseconds,

00:26:19.440 --> 00:26:24.940
which we were aimin' for. Now, I was suddenly
a lot less certain about what the problem

00:26:24.940 --> 00:26:31.220
was. So now let's-let's actually do the right
thing, and let's go back and look, let's go

00:26:31.220 --> 00:26:37.070
back and look at the original event in Speed
Tracer, and see what it actually says the

00:26:37.070 --> 00:26:38.220
problem is.

00:26:38.220 --> 00:26:40.970
So I'm gonna zoom out again and find that
original event. We see the hump over here

00:26:40.970 --> 00:26:45.960
to, on the left of the graph. I'm gonna zoom
into that hump, and this time let's expand

00:26:45.960 --> 00:26:52.940
it. Okay, well first of all I'm looking at
the breakdown and it's clear that the problem

00:26:52.940 --> 00:26:57.330
here is, we're doing too much layout.

00:26:57.330 --> 00:27:01.960
And if I were not convinced by that, if I
scroll down through what actually happened,

00:27:01.960 --> 00:27:08.880
there is no doubt that the problem is that
I'm doing way too much layout. But, but that's

00:27:08.880 --> 00:27:13.270
interesting to know, but what do I do about
that? I don't even know I caused the layout

00:27:13.270 --> 00:27:16.409
problem, right? I mean I wouldn't even know
how to fix that.

00:27:16.409 --> 00:27:23.889
Okay, well, let's-let's click on one and find
out. I thought the problem was the-the input

00:27:23.889 --> 00:27:29.429
box. If I then click on, well that's certainly
not the line that I thought was the problem,

00:27:29.429 --> 00:27:34.159
right? So, okay, well maybe that one was just
a fluke; maybe it's being caused by a variety

00:27:34.159 --> 00:27:42.940
of things. If I click on other of these, no,
the, the panel is unanimous. It looks like

00:27:42.940 --> 00:27:46.130
the problem is not what I thought it was,
which was that it was taking me too long to

00:27:46.130 --> 00:27:50.290
build up all my UI. The problem is that I
was somehow forced in the browser to do a

00:27:50.290 --> 00:27:59.369
bunch of layout, and so I'll explain in detail
why what's happening here, but before I do

00:27:59.369 --> 00:28:01.389
that, let's actually fix the problem.

00:28:01.389 --> 00:28:06.789
So, so here's where we were on the last step;
I had moved everything inside my click handler

00:28:06.789 --> 00:28:13.309
so I could build up my, part of my UI lazily.
I-I'm just gonna move one line this time.

00:28:13.309 --> 00:28:16.559
I'm just gonna move that width inside the
click handler instead and go ahead and move

00:28:16.559 --> 00:28:22.249
it in with the building of the input element.

00:28:22.249 --> 00:28:26.830
Let's clear it and see what that does. Well,
you can already tell it was a lot faster,

00:28:26.830 --> 00:28:31.440
right? But if I switch back over to Speed
Tracer to confirm it and see how much faster

00:28:31.440 --> 00:28:38.350
it is, well, it's-it's actually kinda hard
to find because it's, because it's small and

00:28:38.350 --> 00:28:44.320
let's see here it is down here: 12 milliseconds;
sure beats the heck out of 400 milliseconds.

00:28:44.320 --> 00:28:48.140
It does exactly the same thing, right? And
this is something that could have puzzled

00:28:48.140 --> 00:28:54.309
me for days had I not been guided by a tool
to sort of show that there was a problem and

00:28:54.309 --> 00:28:56.100
where the problem was.

00:28:56.100 --> 00:29:00.309
In fact, you'll notice that the strange thing
is, after I went and changed this code, no

00:29:00.309 --> 00:29:06.590
layout actually occurs in this event. In fact,
the layout occurs after the fact; after this

00:29:06.590 --> 00:29:11.970
event is completely finished, the browser
does layout. Now that may seem strange to

00:29:11.970 --> 00:29:17.109
you, so let me show you a quick example, that-that
illustrates what's goin' on here.

00:29:17.109 --> 00:29:22.360
I-I told you before that browser vendors are
always trying to make things lazy. So they're

00:29:22.360 --> 00:29:27.169
trying to make things lazy because it's-it's
a little bit of an issue with the APIs inside

00:29:27.169 --> 00:29:32.739
the browser. At any point you can ask for
the width of something, and you may actually

00:29:32.739 --> 00:29:37.059
change that width as you go, or you may change
the styles. And what they try to do is they

00:29:37.059 --> 00:29:41.360
try not to lay everything out for you every
time you change somethin' because that would

00:29:41.360 --> 00:29:46.669
be silly. If they, if you happen to be changing
five class names in a row, then they don't

00:29:46.669 --> 00:29:51.039
want to update all the layout every time you
change something so they try to be sneaky.

00:29:51.039 --> 00:29:56.590
They try to wait until you read something
that needs the layout information before they

00:29:56.590 --> 00:29:58.070
do the layout.

00:29:58.070 --> 00:30:03.789
But that can actually, that can actually get
you in trouble because if you're, if you're

00:30:03.789 --> 00:30:09.159
constantly reading things that happen, that
cause layout, at the same time that you're

00:30:09.159 --> 00:30:12.989
setting things that invalidate that layout
information, you start causing this pattern

00:30:12.989 --> 00:30:15.169
that we've been referring to as "layout thrashing."

00:30:15.169 --> 00:30:20.230
Sort of a simple example here that I hope
illustrates it, right? Two lines, you're setting

00:30:20.230 --> 00:30:24.750
a class name and you're taking the width.
Now the top one is, the top one is going to

00:30:24.750 --> 00:30:31.690
be a lot, a lot slower than the bottom one
simply because I forced some layout, which

00:30:31.690 --> 00:30:38.309
I then immediately just threw away. I may
not have even needed that-that width at the

00:30:38.309 --> 00:30:41.779
same time. And that's a, and browsers try
to be smart about certain sub-trees of the

00:30:41.779 --> 00:30:47.799
DOM and invalidating only parts of the tree,
but because of some of the, because of some

00:30:47.799 --> 00:30:51.730
of the ways the DOM tree works, it's actually,
it's actually quite hard, and it could be

00:30:51.730 --> 00:30:56.009
surprising invalidating something on one part
of the DOM can actually have ripple effects

00:30:56.009 --> 00:30:58.010
in other parts of the UI.

00:30:58.010 --> 00:31:04.830
So this was a very surprising result to us.
We've run into it time and time again, and

00:31:04.830 --> 00:31:09.309
it is actually a hint lid inside of Speed
Tracer, and you probably saw that when we

00:31:09.309 --> 00:31:12.330
looked at that, when I expanded the-the tree
for that first one, you saw that it was offerin'

00:31:12.330 --> 00:31:17.700
a hintlet to tell you that you had a lot of
layout activity, and it very much looked like

00:31:17.700 --> 00:31:21.059
one of these cases where you were thrashing
in the layout.

00:31:21.059 --> 00:31:26.769
Okay, so let's switch to our next example
here, which I call "the mysterious case of

00:31:26.769 --> 00:31:32.450
too much data." Now there's no one app I can
blame this one on. This actually has happened

00:31:32.450 --> 00:31:37.059
quite a bit. It's a, it's an age-old question
when you're doing Web applications which have

00:31:37.059 --> 00:31:41.549
talk to a server it sort of classic client
server model. Figuring out what to send from

00:31:41.549 --> 00:31:48.679
the server when, right? I don't, I cannot,
obviously I can't get my app up fast and load

00:31:48.679 --> 00:31:53.299
my entire database into the client side, and
I also don't want to fetch every little piece

00:31:53.299 --> 00:31:57.669
of data every time it's needed, so there's
a nice balancing act from getting the right

00:31:57.669 --> 00:32:01.129
amount of data to the front-end at just the
right time.

00:32:01.129 --> 00:32:09.789
So, and for this example I actually reused,
I actually reused just some an, a piece of

00:32:09.789 --> 00:32:12.740
code I had layin' around. The reason I had
it layin' around is because it's the way I

00:32:12.740 --> 00:32:16.830
explain that why I moved from Boston to Atlanta.

00:32:16.830 --> 00:32:20.210
So you'll notice when I hit load everything,
and all this thing did is was it fetched all

00:32:20.210 --> 00:32:25.910
the weather stations in the U.S., and it just
sort of plotted 'em on a canvas, right. So

00:32:25.910 --> 00:32:30.960
we're seein' all the weather stations in the
U.S. Unsurprisingly it kinda looks familiar

00:32:30.960 --> 00:32:34.470
when you just sort of draw 'em on a canvas,
right?

00:32:34.470 --> 00:32:39.809
But the reason why I like this app is because
it shows why I moved from Boston. You notice

00:32:39.809 --> 00:32:43.059
the low ends of the graph here? And went to-

00:32:43.059 --> 00:32:44.059
[pause]

00:32:44.059 --> 00:32:50.429
Atlanta. Oooh, notice the nice ends of the
graph that correspond with the winters. Those

00:32:50.429 --> 00:32:58.110
are actually the temperatures for the year
2009 -- so, much warmer in Atlanta.

00:32:58.110 --> 00:33:03.519
But to show you again, and I'm gonna open
Speed Tracer this time so we can get a sense

00:33:03.519 --> 00:33:07.899
of how long things actually take. I'm gonna
hit the, I'm gonna clear this, and I'm gonna

00:33:07.899 --> 00:33:13.269
hit load everything again. And this is loading
everything as it says. I'm loading not only

00:33:13.269 --> 00:33:19.129
positions for all the weather stations, but
I'm also loading all that data for 2009. Now

00:33:19.129 --> 00:33:23.609
I feel justified in doing this because I'm
over a fast connection, and it's probably

00:33:23.609 --> 00:33:29.409
gonna get cached, and this is sort of a limited
purpose application anyway; I'm mostly just

00:33:29.409 --> 00:33:36.779
showin' it to in presentations like this.

00:33:36.779 --> 00:33:41.239
And so in fact if I go to the network, and
I look at how long it took to fetch over the

00:33:41.239 --> 00:33:44.110
network, it was actually pretty fast. I mean
it didn't take that long. It was, total it

00:33:44.110 --> 00:33:51.320
was less than a second to fetch the data.
Now the surprising thing, is that while it

00:33:51.320 --> 00:33:57.460
was less than a second to fetch the data,
actually parsing the data because it was JSONed

00:33:57.460 --> 00:34:04.239
was half a second, right? So even if it was
cached, I still have to sustain a half a second

00:34:04.239 --> 00:34:09.639
of the UI being locked up, right? And this
is just simple JSON structure. I mean it's

00:34:09.639 --> 00:34:16.070
like a-a list of objects that contain lists,
right? It's not-not really that complex.

00:34:16.070 --> 00:34:20.020
So the other thing I wanna use with this example,
is I wanna demonstrate a feature of Speed

00:34:20.020 --> 00:34:28.099
Tracer. Now if I expand this, you'll notice
that Speed Tracer's shamefully not doing very

00:34:28.099 --> 00:34:32.119
well here. It's just tellin' me I ran a bunch
of JavaScript. It's saying you ran a bunch

00:34:32.119 --> 00:34:33.119
of JavaScript, and it took a long time.

00:34:33.119 --> 00:34:37.889
Well, that's not really helpful for a developer,
right. I mean, I-I really need what I had

00:34:37.889 --> 00:34:43.510
on the last example, which is for Speed Tracer
to point out a particular line for me to fix.

00:34:43.510 --> 00:34:47.211
We're currently workin' on that. We're gonna
continue to add instrumentation and hopefully

00:34:47.211 --> 00:34:51.829
get there, but in the meantime you need a
way out if you get stuck.

00:34:51.829 --> 00:34:58.039
So I want to show you your way out. Let me
clear this and show you a piece of code.

00:34:58.039 --> 00:35:02.490
Now you can imagine when the data comes back
over the network, this does a couple of things.

00:35:02.490 --> 00:35:08.510
It parses the JSON and then it renders. Now
a, this is another one where I fooled myself,

00:35:08.510 --> 00:35:12.710
and I said, "Clearly the problem is that it's
taking a long time to draw this stuff to canvas"

00:35:12.710 --> 00:35:17.839
and then it's not the case and I've already
sort of tipped this off. But-but the main

00:35:17.839 --> 00:35:23.910
thing I wanna point out is I've added some
lines here; I've done console at mark timeline,

00:35:23.910 --> 00:35:24.910
and I've passed a string.

00:35:24.910 --> 00:35:29.599
Now this, this is basically a way to put additional
information into Speed Tracer's tree. So every

00:35:29.599 --> 00:35:34.250
time I do this console at mark timeline, I'm
basically tellin' Speed Tracer, "Okay, take

00:35:34.250 --> 00:35:38.990
this string and wherever it happened in the
timing, just embed that string." So I can

00:35:38.990 --> 00:35:41.530
find these points in the tree, right?

00:35:41.530 --> 00:35:45.309
So let me show that, show you that. And I'm
gonna enable the logging, and we're gonna

00:35:45.309 --> 00:35:49.789
load everything again. I go back to Speed
Tracer; zoom all the way out so I can see

00:35:49.789 --> 00:35:57.970
the-the new data all the way over here on
the right; and again zoom in; and again 448

00:35:57.970 --> 00:36:03.000
milliseconds; pretty long. But you'll notice
this time instead of just being a big blob

00:36:03.000 --> 00:36:08.870
of JavaScript, I also have these logs in here
which correspond directly to the strings that

00:36:08.870 --> 00:36:11.930
I-I put in, that you saw in the code.

00:36:11.930 --> 00:36:17.069
And in fact, you'll also notice that there
is a little blue icon over here on the event

00:36:17.069 --> 00:36:20.599
itself, so you can actually use this mark
timeline to actually find, particularly if

00:36:20.599 --> 00:36:26.111
you have a-a app that uses a lot of timers.
It's often very hard to actually find the

00:36:26.111 --> 00:36:30.500
event you're lookin' for. Console at mark
timeline is a great way to actually find what

00:36:30.500 --> 00:36:33.060
you're lookin' for.

00:36:33.060 --> 00:36:38.140
And so you see the, you see the strings here
that I had in the code. Now a trick that not

00:36:38.140 --> 00:36:42.380
many people know about is if I wanna know
the difference be, in time from any two nodes

00:36:42.380 --> 00:36:49.560
in the tree, I can use a little hidden feature
which is on Windows, I do control click, on

00:36:49.560 --> 00:36:54.369
Mac, I do command click, and it will tell
me the time difference between these two nodes.

00:36:54.369 --> 00:36:59.730
So it's pretty clear that the problem now
is parsing JSON, not the rendering. Parsing

00:36:59.730 --> 00:37:09.630
JSON was about 306, 360 milliseconds. This
was doing the rendering only about 45 milliseconds.

00:37:09.630 --> 00:37:16.349
And it's also not surprising with all that
information that the fix for this was simply

00:37:16.349 --> 00:37:20.631
to just not load everything. So rather than
loading all the data for 2009 for all the

00:37:20.631 --> 00:37:23.089
stations up front, I just wait and load that
weather data on demand.

00:37:23.089 --> 00:37:27.920
So let's try the other strategy here: the
load as needed. It'll-it came up a lot faster

00:37:27.920 --> 00:37:34.360
which you probably already noticed, and of
course it works just the same. But let's go

00:37:34.360 --> 00:37:40.049
back and confirm what we saw--whoops--inside
of Speed Tracer. Again, I'll actually use

00:37:40.049 --> 00:37:46.420
a, since I keep zooming out let me just move
over here this time.

00:37:46.420 --> 00:37:53.789
And, yeah, 50, 56 milliseconds this time;
a lot better. Parsing the JSON just by dropping

00:37:53.789 --> 00:37:59.829
those, those arrays from each of the different
elements, it goes down a whole 28 milliseconds.

00:37:59.829 --> 00:38:01.130
So, much, much better.

00:38:01.130 --> 00:38:06.450
So-so those are two example that I hope show
you sort of, they're sort of scenarios ha-that

00:38:06.450 --> 00:38:11.250
show you how you can use Speed Tracer to-to
conquer real world stuff, not just sort of

00:38:11.250 --> 00:38:16.579
takin' you on a tour of the UI, actually shows
you simplified playbacks of what we've done

00:38:16.579 --> 00:38:18.849
in our own performance investigations.

00:38:18.849 --> 00:38:22.119
So now, let me get back to my slides.

00:38:22.119 --> 00:38:24.280
I wanna talk about new features.

00:38:24.280 --> 00:38:30.849
I'm gonna show you three new features. Two
of 'em are in what we're callin' our milestone,

00:38:30.849 --> 00:38:35.440
which is, if you're going now in your seat
and you're downloading Speed Tracer, or you

00:38:35.440 --> 00:38:39.039
already have it installed, and you just noticed
a new version arrived, that is the milestone.

00:38:39.039 --> 00:38:43.260
So up or download right now is the milestone
that will have two of these features in it.

00:38:43.260 --> 00:38:47.921
The third one, we're still experiment-experimenting
with, but it'll be available soon. And of

00:38:47.921 --> 00:38:51.200
course we're open source so if you're really
interested you can grab it now out of the

00:38:51.200 --> 00:38:53.160
source repository.

00:38:53.160 --> 00:38:58.780
So the first thing and I-I've, I gave this
away early. The number one requested feature

00:38:58.780 --> 00:39:03.839
was that people said, "Can you please show
me the line of code that's causin' the problem?"

00:39:03.839 --> 00:39:07.329
Now obviously when I did the case of too much
layout, I already showed you this, right.

00:39:07.329 --> 00:39:09.390
We jumped right to the line of code.

00:39:09.390 --> 00:39:13.390
So I'm not gonna show you that again. Instead
I'm gonna say we took it a little bit, we

00:39:13.390 --> 00:39:14.990
took it a little bit further in some cases.

00:39:14.990 --> 00:39:23.730
So, for people who are doing GWT code, they
write in Java, right? And in fact when you

00:39:23.730 --> 00:39:28.880
jump to that line of JavaScript code, it's
not pretty. I mean it, it's really hard to

00:39:28.880 --> 00:39:30.760
make sense of it.

00:39:30.760 --> 00:39:36.270
We-we actually wanna jump back to the line
of Java code. So people laughed and they said,

00:39:36.270 --> 00:39:39.880
"Yeah, yeah, yeah, take us back to the line
of Java code," and we weren't quite sure how

00:39:39.880 --> 00:39:43.740
to do that, and so we kinda laughed along
with them. But we-we finally figured somethin'

00:39:43.740 --> 00:39:47.500
out, and let-let me show you what we figured
out.

00:39:47.500 --> 00:39:52.161
So I'm gonna, this is an application, if you
use App Engine, the Java SDK App Engine, you're

00:39:52.161 --> 00:39:57.330
probably familiar with this particular application.
It's actually one of the samples.

00:39:57.330 --> 00:40:04.559
And, and I-I am, I'm gonna use Speed Tracer
on it, but the way I launched this one was

00:40:04.559 --> 00:40:09.700
instead of just sort of going to the application,
going to the application and then bringing

00:40:09.700 --> 00:40:14.630
Speed Tracer up on it, I actually used a new
feature that's part of the Google Eclipse,

00:40:14.630 --> 00:40:23.140
Google Plug-in, Google Eclipse Plug-in, or
Google Plug-in for Eclipse, I'm sorry.

00:40:23.140 --> 00:40:28.410
So you'll notice in their new version that
there is now a new menu item that I can save

00:40:28.410 --> 00:40:33.220
profile as Speed Tracer. Okay, I've already
run this 'cause I didn't, obviously since

00:40:33.220 --> 00:40:36.470
you wanna run in production mode it runs to
the GWT Compiler. I didn't want you guys to

00:40:36.470 --> 00:40:43.450
wait on that on stage. So I already have it
running for us over here.

00:40:43.450 --> 00:40:50.299
I'm gonna open Speed Tracer; make it full
screen; return back here. I'm simply gonna

00:40:50.299 --> 00:40:57.210
refresh this guy, just so we can get some
data. Now I hear Sticky was written by somebody

00:40:57.210 --> 00:41:03.480
who has just mad front-end skills so it's
really fast. I wrote it.

00:41:03.480 --> 00:41:04.550
[laughter]

00:41:04.550 --> 00:41:09.299
And I'm gonna zoom in on the-the little bit
of data we have and I'm gonna focus in on

00:41:09.299 --> 00:41:15.329
this XMLHttpRequest 'cause that looks like
some interesting data, and now I look and

00:41:15.329 --> 00:41:20.800
there's some parsed HTML and I'm gonna, again
I wanna look at the line of code that caused

00:41:20.800 --> 00:41:25.599
this and-and if I wanna look at the JavaScript
then I can look at the JavaScript, and it's

00:41:25.599 --> 00:41:29.790
about as intelligible as I thought it was
gonna be. It's highly obfuscated, but you

00:41:29.790 --> 00:41:35.240
also notice there's something new for this
particular trace. Right underneath the line

00:41:35.240 --> 00:41:40.299
of code for JavaScript is, hopefully you can
read that, is a Java identifier. If you're,

00:41:40.299 --> 00:41:47.950
if you've written Google Web Tool Kit front-end
code, you recognize this Google, com.googlegwtuserclientuimage.

00:41:47.950 --> 00:41:52.900
You-you're probably familiar with this.

00:41:52.900 --> 00:42:06.201
And if I click on this link, then I actually
go right into Eclipse. So-

00:42:06.201 --> 00:42:07.201
[applause]

00:42:07.201 --> 00:42:12.329
So-so hopefully that helped. I-I know that
many people have, have not enjoyed looking

00:42:12.329 --> 00:42:17.380
at the obfuscated JavaScript. We thought that
jumping directly into the ID would probably

00:42:17.380 --> 00:42:22.640
be suitable for people who are really attached
to their tools like Eclipse, as we are.

00:42:22.640 --> 00:42:34.420
Okay. So the next feature which you probably
saw if you, if you stayed for the whole keynote,

00:42:34.420 --> 00:42:39.460
is Server Side Profile Tracing. So I had a
lot of people who-who they said, "Well I've,

00:42:39.460 --> 00:42:44.230
I've-I've worked on my front-end code, and
it's really fast, but I still have this slow

00:42:44.230 --> 00:42:49.869
section, and it's the server so the server
guy hopefully will eventually take care of

00:42:49.869 --> 00:42:54.240
it, but I don't know what's goin' on." And
they said, "It would be really cool if Speed

00:42:54.240 --> 00:42:58.220
Tracer could just tell me what was goin' on
in the server, could show me the traces for

00:42:58.220 --> 00:43:04.539
what happened on the server." We thought that
was a great idea as well, and so I'm gonna

00:43:04.539 --> 00:43:09.710
show you this particular example on App Engine.

00:43:09.710 --> 00:43:14.279
So we've taken Sticky, the sample app, and
we've deployed it to App Engine. And I've

00:43:14.279 --> 00:43:19.809
turned on App Stats, which is a new feature
inside of App Engine that-that tells you what

00:43:19.809 --> 00:43:24.551
happens inside of App En-inside of App Engine
as you run your application, much as the way

00:43:24.551 --> 00:43:27.789
Speed Tracer shows you what happens inside
the browser when you run your, the front-end

00:43:27.789 --> 00:43:29.380
part of your application.

00:43:29.380 --> 00:43:30.829
Now I'm gonna open Speed Tracer.

00:43:30.829 --> 00:43:31.930
[pause]

00:43:31.930 --> 00:43:39.860
And let's go back here and do something. Maybe-

00:43:39.860 --> 00:43:40.860
[pause]

00:43:40.860 --> 00:43:48.240
type somethin' in here, maybe move something
around. All of these are causing writes back

00:43:48.240 --> 00:43:53.520
to the App Engine. So it's telling the datastore
to save the position of the Sticky and to

00:43:53.520 --> 00:43:55.170
update the content.

00:43:55.170 --> 00:44:02.920
I'm gonna go back to Speed Tracer, and I'm
going to zoom all the way out and go to the

00:44:02.920 --> 00:44:07.170
Network Panel. You-you'll notice that some
of these, or in fact all of these, now have

00:44:07.170 --> 00:44:12.029
a special icon beside them that indicates
that, in addition to knowing how long things

00:44:12.029 --> 00:44:17.010
took in HttpRequest headers that are in there,
it also has additional information about what

00:44:17.010 --> 00:44:22.059
happened on the server, and if I click on
one of these, it'll actually fill in with

00:44:22.059 --> 00:44:26.829
a trace that came directly from App Engine.
And if you've used App Engine you recognize

00:44:26.829 --> 00:44:32.100
these names. This is a get from the data store.
We began a transaction, did another get, did

00:44:32.100 --> 00:44:37.400
a put, committed the results and then deleted
somethin' from memcache and in fact that's

00:44:37.400 --> 00:44:43.440
when I updated something so it, it ended up
invalidating my, invalidating my cache so

00:44:43.440 --> 00:44:47.299
the next time, or invalidating my memcache,
so the next time I actually had to do a bunch

00:44:47.299 --> 00:44:51.160
of queries to get everything instead of just
pulling it out of memcache.

00:44:51.160 --> 00:44:57.339
So we think this is really cool, to be able
to see the full story from the client side

00:44:57.339 --> 00:45:01.180
all the way back into the server, and just
really get a sense for what is taking a long

00:45:01.180 --> 00:45:08.160
time, regardless of whether it's the browser
or the back-end serve, the back-end serving

00:45:08.160 --> 00:45:10.309
infrastructure.

00:45:10.309 --> 00:45:16.470
And the other thing about this is it's available
in two exciting flavors. For App Engine, which

00:45:16.470 --> 00:45:22.280
I just showed you, is based on App Stats.
There is actually a talk, sadly it's going

00:45:22.280 --> 00:45:27.240
on right now, but there's a talk here at Google
I/O about App Stats if you're interested in

00:45:27.240 --> 00:45:28.240
that part.

00:45:28.240 --> 00:45:34.500
And-and the other is, as part of our work
with SpringSource if you're a user of their

00:45:34.500 --> 00:45:39.770
tc Server Developer Edition, they have a tool
called Spring Insight which shou-which has

00:45:39.770 --> 00:45:45.160
similar statistics for their, for their stack
and Speed Tracer works there as well. So you

00:45:45.160 --> 00:45:49.069
can get these, if you're, if you're usin'
that container as well you can get these traces

00:45:49.069 --> 00:45:51.510
right up in Speed Tracer.

00:45:51.510 --> 00:45:55.270
Okay, so those are the two things that are
contained in the milestone that you can download

00:45:55.270 --> 00:45:58.240
right now.

00:45:58.240 --> 00:46:04.390
The next thing, the next thing is, we're still
workin' on, but we're actually quite excited

00:46:04.390 --> 00:46:05.390
about.

00:46:05.390 --> 00:46:11.450
Now you often work very hard to get your performance
down. You spend about two weeks or so, and

00:46:11.450 --> 00:46:16.329
you're trying to get the performance in your
Web application just as tight as possible,

00:46:16.329 --> 00:46:22.630
and then you get it fast, and you celebrate,
and you go out for beers, and then at some

00:46:22.630 --> 00:46:28.140
unspecified time later, you realize that it's
no longer fast again because somebody committed

00:46:28.140 --> 00:46:29.140
something.

00:46:29.140 --> 00:46:32.920
Somebody didn't know about the excessive layout
thing, they weren't looking at it with Speed

00:46:32.920 --> 00:46:39.020
Tracer all the time, they committed something,
and all that work you've done is now out the

00:46:39.020 --> 00:46:43.950
window and not only that you're stuck with
a window of some number of revisions that

00:46:43.950 --> 00:46:47.779
you now have to do a binary search on to figure
out exactly what broke it.

00:46:47.779 --> 00:46:54.339
So we, teams kept telling us, "I really just
wish, I work really hard to remove the, a

00:46:54.339 --> 00:47:00.260
lot of the layout out of the start of my application.
I wish every time somebody put something in

00:47:00.260 --> 00:47:06.339
that it automatically ran Speed Tracer on
it and can tell me if the layout went up again."

00:47:06.339 --> 00:47:09.779
So we thought that was a pretty good idea
as well, and so we were like, "Well, okay

00:47:09.779 --> 00:47:13.000
what do we need? What do we actually need?
Well really all we need is headless Speed

00:47:13.000 --> 00:47:17.020
Tracer, watches your application while it
runs in your continuous build, and then sends

00:47:17.020 --> 00:47:22.319
the-those results somewhere for analysis."
So we built the headless Speed Tracer, and

00:47:22.319 --> 00:47:26.819
now what we're doin' is we're testing it on
some, some internal applications, and we're

00:47:26.819 --> 00:47:29.390
trying to figure the right formula for a dashboard.

00:47:29.390 --> 00:47:34.550
I'll give you sort of an inside peek on where
we are with the dashboard. This is actually

00:47:34.550 --> 00:47:38.849
an internal application we've been monitoring,
and we're tryin' to see if we can, we can

00:47:38.849 --> 00:47:43.450
actually see the regressions as they happen.
And so we're, we're doing this; we're running

00:47:43.450 --> 00:47:47.700
their, we have Speed Tracer in a continuous
build for them. It just sends all its data

00:47:47.700 --> 00:47:52.020
back to our dashboard; we do some analysis
over it; and we just plot everything. And

00:47:52.020 --> 00:47:56.450
so we're-we're monitor it on an on-going basis
to watch things change, to see how things

00:47:56.450 --> 00:47:57.480
change.

00:47:57.480 --> 00:48:01.019
We're monitoring a lot of different things
at this point. One is the breakdown of what

00:48:01.019 --> 00:48:05.760
happened. I mentioned earlier we-we've actually
done a lot of exercises. We've just helped

00:48:05.760 --> 00:48:11.799
teams to remove layout; this excessive layout
from certain parts of their applications,

00:48:11.799 --> 00:48:17.760
and they want to keep it out. They want it
to stay fast; they don't want people accidentally

00:48:17.760 --> 00:48:21.500
checking something in that-that-that breaks
all their hard work. So we sort of monitor

00:48:21.500 --> 00:48:27.099
the breakdown if, if we notice that the layout
goes up then obviously it, we should probably

00:48:27.099 --> 00:48:29.961
investigate that change list that went in
that-that caused that to happen.

00:48:29.961 --> 00:48:35.369
Monitoring other things, like I don't how
many people are familiar with GWT's lightweight

00:48:35.369 --> 00:48:39.779
metrics. There's actually a system built into
it that tells you how long it took a module

00:48:39.779 --> 00:48:43.609
to load; we're monitoring this, that for the
application as well. And-and a lot of other

00:48:43.609 --> 00:48:44.930
things.

00:48:44.930 --> 00:48:50.329
But-but the main thing is, is that this will
enable you to-to put Speed Tracer in your

00:48:50.329 --> 00:48:55.190
continuous build and start to actually analyze
what's going on in your application as it

00:48:55.190 --> 00:49:00.250
runs as part of the build, which we think
is, is going to be pretty important.

00:49:00.250 --> 00:49:03.230
Okay.

00:49:03.230 --> 00:49:08.050
So the next thing I'll tell you is go grab
a copy of the milestone. It's-it's available

00:49:08.050 --> 00:49:13.210
at this link. I'm sure the link is going to
be in the, in the Wave. We actually have some

00:49:13.210 --> 00:49:18.580
Googlers taking notes; so important facts
like this will be in there.

00:49:18.580 --> 00:49:22.089
And I'm happy to take a few questions. While-while
I take questions I'm gonna leave this slide

00:49:22.089 --> 00:49:27.329
up. This is my contact information -- some
additional Speed Tracer URL's. Speed Tracer

00:49:27.329 --> 00:49:33.630
is a open source project and that bottom link
is actually directly to the open source, source

00:49:33.630 --> 00:49:36.059
repository at Google Code.

00:49:36.059 --> 00:49:39.289
And finally a reminder that we're gonna be
takin' notes inside of Google Wave.

00:49:39.289 --> 00:49:43.880
Now I'm gonna, I-I'm going to just do live
questions during this part, but if you've

00:49:43.880 --> 00:49:47.250
put a question in Moderator I'm just gonna
answer it throughout the day so we can continue

00:49:47.250 --> 00:49:51.220
to talk there. I hope that's okay, but I decided
to, to just field the questions for the people

00:49:51.220 --> 00:49:55.450
in the room, while people are in the room,
that way I can actually answer more questions

00:49:55.450 --> 00:49:59.849
than I could if I tried to handle Moderator
while on stage, so.

00:49:59.849 --> 00:50:04.530
Thank you, guys, and I'm happy to field questions
now.

00:50:04.530 --> 00:50:05.530
[applause]

00:50:05.530 --> 00:50:10.569
Oh, and please use the mic. Please use the
mic for questions so that we're gonna actually

00:50:10.569 --> 00:50:14.780
be recording, so I wanna make sure that your
question is on, is on the audio.

00:50:14.780 --> 00:50:20.680
&gt;&gt;male in audience: I have a question about
the example you have with Java going back

00:50:20.680 --> 00:50:21.680
to Java line,

00:50:21.680 --> 00:50:22.680
&gt;&gt;Kelly Norton: Uh-hum.

00:50:22.680 --> 00:50:27.760
&gt;&gt;male in audience: but what can you do at
that point because I think there's another

00:50:27.760 --> 00:50:34.680
abstraction with-with Java, how do you know
how it translates into JavaScript? Maybe that's

00:50:34.680 --> 00:50:36.491
hidden from you. Do you -

00:50:36.491 --> 00:50:37.491
&gt;&gt;Kelly Norton: Yeah.

00:50:37.491 --> 00:50:39.549
&gt;&gt;male in audience: have to do, do you have
to write Jav-JavaScript and then interface

00:50:39.549 --> 00:50:40.549
it with GWT?

00:50:40.549 --> 00:50:44.480
&gt;&gt;Kelly Norton: Right. So, so it's a good
question and actually I've found there's a

00:50:44.480 --> 00:50:49.099
big, one of the other advantages that I didn't
even mention of this is, you saw that I clicked

00:50:49.099 --> 00:50:53.109
on the link first that brought up the JavaScript,
and then I clicked on the link that brought

00:50:53.109 --> 00:50:56.940
up the Java. Now it turns out that that's
actually really powerful in itself because

00:50:56.940 --> 00:51:02.140
you often want to ask the question, "What
did the GWT compiler do for me?"

00:51:02.140 --> 00:51:05.619
And it just turns out to be a really convenient
way to answer that question because you can

00:51:05.619 --> 00:51:09.609
actually bring up the JavaScript inside a
Speed Tracer and bring it up in an IDE and

00:51:09.609 --> 00:51:14.450
obviously on your work station you typically
have more than the 10/24 by 7/68 that I have

00:51:14.450 --> 00:51:18.450
here. So you can bring 'em up side by side,
and it actually helps to answer that question

00:51:18.450 --> 00:51:21.569
in an efficient manner because otherwise you
would have to look at the Java code, and then

00:51:21.569 --> 00:51:25.220
you would have to open the JavaScript code
in an editor, and then you would have to find

00:51:25.220 --> 00:51:30.720
the function that you're lookin' for. Well
this-this allows much quicker way to compare

00:51:30.720 --> 00:51:35.380
them side by side. So we often, we actually
often use that quite a bit to-to figure out

00:51:35.380 --> 00:51:36.450
exactly what the GWT compiler is doing.

00:51:36.450 --> 00:51:37.890
&gt;&gt;male in audience: [inaudible]

00:51:37.890 --> 00:51:40.519
&gt;&gt;Kelly Norton: Sorry. Okay.

00:51:40.519 --> 00:51:43.690
&gt;&gt;male in audience: Hi. Thanks for your talk.

00:51:43.690 --> 00:51:44.690
&gt;&gt;Kelly Norton: Thank you.

00:51:44.690 --> 00:51:48.309
&gt;&gt;male in audience: I have a question about
the server tracing feature 'cause you said

00:51:48.309 --> 00:51:53.950
it was compatible with App Engine and SpringSource.
Is there any documentation on the kind of

00:51:53.950 --> 00:51:58.450
data you need to get back from the server
to be able to display it in Speed Tracer?

00:51:58.450 --> 00:52:03.850
&gt;&gt;Kelly Norton: There is, there is not currently
anything besides our source repository but

00:52:03.850 --> 00:52:10.109
there is about to be. It-it's actually pretty
simple. It turns out that the event trace

00:52:10.109 --> 00:52:16.720
that we show for the, for what's goin' on
inside the browser, is exactly the sort of

00:52:16.720 --> 00:52:18.700
nested data structure you want for the server.

00:52:18.700 --> 00:52:23.150
The only thing that sort of confounds it is
if you're using multiple threads, and we haven't

00:52:23.150 --> 00:52:28.660
really handled that case quite yet, but it's,
you basically just end of creating a JSON

00:52:28.660 --> 00:52:35.839
structure that has this, this, this sort of
tree appearance. It's, we're gonna, at some

00:52:35.839 --> 00:52:40.730
point after I/O we're actually gonna get the
data at least published to the open source

00:52:40.730 --> 00:52:44.819
group while we continue to tweak on it, but,
but yeah, it's pretty simple JSON format.

00:52:44.819 --> 00:52:45.869
&gt;&gt;male in audience: Okay, thanks.

00:52:45.869 --> 00:52:49.400
&gt;&gt;Kelly Norton: Look for that to show up soon.

00:52:49.400 --> 00:52:50.400
&gt;&gt;male in audience: It's actually the same
question-

00:52:50.400 --> 00:52:51.400
&gt;&gt;Kelly Norton: Oh, cool.

00:52:51.400 --> 00:52:52.400
&gt;&gt;male in audience: I had.

00:52:52.400 --> 00:52:53.400
&gt;&gt;Kelly Norton: Awesome.

00:52:53.400 --> 00:52:55.430
And, and also if you, if you have server-side
tools that you wanna make this work with,

00:52:55.430 --> 00:53:01.130
feel free to, to, we have there's Speed Tracer
Dev Google Group. Feel free to email that

00:53:01.130 --> 00:53:04.309
group, and we'll, we'll help you get to where
you need to be. So-

00:53:04.309 --> 00:53:11.349
&gt;&gt;male in audience: Right. So, thank you for
the talk. I'm not sure if this falls into

00:53:11.349 --> 00:53:17.720
the realm of Speed Tracer, but it's about
profiling. What happens is, most of the developers

00:53:17.720 --> 00:53:26.569
are running Speed Tracer on a faster machines
than your end user would and is there any

00:53:26.569 --> 00:53:34.519
direction that you can create profiles and
do caps on CPU or memory and get a more realistic

00:53:34.519 --> 00:53:39.240
profile rather than a little skewed from a
developers point of view?

00:53:39.240 --> 00:53:43.640
&gt;&gt;Kelly Norton: Yeah, that's, it's a great
idea. We're interested in it. We haven't really

00:53:43.640 --> 00:53:49.369
done, we haven't really done much in that,
in that realm. But I think it's an absolutely

00:53:49.369 --> 00:53:54.490
great idea. For instance, particularly if
you could use, if you could use things we

00:53:54.490 --> 00:54:00.609
know about, the breakdown of users and their
machines, that would be even better. And to

00:54:00.609 --> 00:54:04.789
say things like, "Oh, well this event ran
fine for you, but on this particular demographic

00:54:04.789 --> 00:54:06.480
it's not gonna run well."

00:54:06.480 --> 00:54:13.950
I mean there are a lot of great ideas, on
that obviously we haven't done anything yet,

00:54:13.950 --> 00:54:14.950
but I think something like that would be really
cool.

00:54:14.950 --> 00:54:15.950
&gt;&gt;male in audience: Thank you.

00:54:15.950 --> 00:54:16.950
[pause]

00:54:16.950 --> 00:54:17.950
&gt;&gt;male in audience: I was just wanted to ask
about the developer plug-in for Chrome.

00:54:17.950 --> 00:54:18.950
&gt;&gt;Kelly Norton: Yep.

00:54:18.950 --> 00:54:22.809
&gt;&gt;male in audience: For Mac OS. Do you know
of any news on that?

00:54:22.809 --> 00:54:24.370
&gt;&gt;Kelly Norton: The-the developer -

00:54:24.370 --> 00:54:30.720
&gt;&gt;male in audience: So you can run the code
server and then run Chrome and MAC OS and

00:54:30.720 --> 00:54:35.839
use Speed Tracer against that. I don't know
I may have just-

00:54:35.839 --> 00:54:38.309
&gt;&gt;Kelly Norton: Oh, you mean for Chrome OS
or for?

00:54:38.309 --> 00:54:39.309
&gt;&gt;male in audience: Yeah. Oh, no. Sorry for
Mac OS.

00:54:39.309 --> 00:54:40.309
&gt;&gt;Kelly Norton: Oh, Mac OS-

00:54:40.309 --> 00:54:41.309
&gt;&gt;Male in audience: Yeah.

00:54:41.309 --> 00:54:42.309
&gt;&gt;Kelly Norton: for Mac OS on Chrome or?

00:54:42.309 --> 00:54:43.309
&gt;&gt;male in audience: Yeah.

00:54:43.309 --> 00:54:44.309
&gt;&gt;Kelly Norton: Um.

00:54:44.309 --> 00:54:45.309
&gt;&gt;male in audience: Like with developer plug-ins
so you can-

00:54:45.309 --> 00:54:46.309
&gt;&gt;voice in audience: [inaudible]

00:54:46.309 --> 00:54:49.269
&gt;&gt;Kelly Norton: Oh, oh, oh, you mean the,
the-the, when you're actually running inside

00:54:49.269 --> 00:54:50.269
of development mode.

00:54:50.269 --> 00:54:51.410
&gt;&gt;male in audience: Yeah.

00:54:51.410 --> 00:54:52.430
&gt;&gt;Kelly Norton: [ ]. Okay.

00:54:52.430 --> 00:54:59.750
So yes. The, we still don't have a plug-in
for Mac as you've pointed out, for Mac Chrome,

00:54:59.750 --> 00:55:00.750
right?

00:55:00.750 --> 00:55:01.750
&gt;&gt;male in audience: Yeah.

00:55:01.750 --> 00:55:03.970
&gt;&gt;Kelly Norton: I-I don't know when that's
coming. Bruce do you know? Is Bruce still

00:55:03.970 --> 00:55:05.329
in the room? Does it-

00:55:05.329 --> 00:55:11.319
I don't know. If you email me, I can find
out. I-I-I got kind of detached from what's

00:55:11.319 --> 00:55:17.009
gonna on with development mode, but, but I
can find out for ya. I think it's, there's

00:55:17.009 --> 00:55:19.250
been a lot of discussion about it, I'm just
not sure when it's gonna come, when it's gonna

00:55:19.250 --> 00:55:20.250
come about.

00:55:20.250 --> 00:55:24.660
Doing Speed Chaser in development mode obviously
gives you a lot of misleading results, but,

00:55:24.660 --> 00:55:29.609
but yeah, development mode for Chrome on the
Mac is desperately needed -- Linux as well.

00:55:29.609 --> 00:55:30.609
[pause]

00:55:30.609 --> 00:55:35.900
&gt;&gt;male in audience: Hi. Thank you for your
talk. I was curious about your last feature

00:55:35.900 --> 00:55:38.650
if anyone-if you know of anyone developing
a Hudson Plugin for-for that?

00:55:38.650 --> 00:55:40.180
&gt;&gt;Kelly Norton: You mean the headless?

00:55:40.180 --> 00:55:41.319
&gt;&gt;male in audience: Yeah.

00:55:41.319 --> 00:55:46.619
&gt;&gt;Kelly Norton: Yeah. So the only place that-that
exists right now is in, in the source control

00:55:46.619 --> 00:55:50.950
repository for Speed Tracer. So if you're
interested feel free to grab it, compile it,

00:55:50.950 --> 00:55:54.610
try it out yourself. We're open source project
so if you wanna contribute back, it's awesome.

00:55:54.610 --> 00:55:59.840
What's we're really tryin' to do with that
right now is we know that, we know that we

00:55:59.840 --> 00:56:03.490
want this thing in the continuous build, but
it's actually so much data to analyze, we're

00:56:03.490 --> 00:56:06.900
tryin' to figure out exactly the sort of things
that we're gonna wanna look on-look at on

00:56:06.900 --> 00:56:11.210
an on-going basis, so we're still tryin' to
sort of simplify the reams of data.

00:56:11.210 --> 00:56:17.079
So to-so if there's anybody who wants to help
out and wants to sort of try it out, the more

00:56:17.079 --> 00:56:22.349
da-the more data we can get about what sort
of things people want to see, the easier it

00:56:22.349 --> 00:56:27.570
will be to-to get to something more, faster
that-that is actually simple enough to-to

00:56:27.570 --> 00:56:35.900
use on-on a daily basis in your continuous
build. So-

00:56:35.900 --> 00:56:37.210
&gt;&gt;male in audience: Thanks.

00:56:37.210 --> 00:56:38.210
&gt;&gt;male in audience: Thanks the GWT Speed Tracer.
It's frickin' awesome.

00:56:38.210 --> 00:56:42.289
But we've done a mock timeline in the console.
Is there anything in GWT or that would just

00:56:42.289 --> 00:56:46.039
be a native method that you'd just passing
in a string to at the present?

00:56:46.039 --> 00:56:49.000
&gt;&gt;Kelly Norton: Right now it's just you create
a-a JS9 method-

00:56:49.000 --> 00:56:50.000
&gt;&gt;male in audience: Yep.

00:56:50.000 --> 00:56:51.000
&gt;&gt;Kelly Norton: and call it directly.

00:56:51.000 --> 00:56:52.000
&gt;&gt;male in audience: Yep.

00:56:52.000 --> 00:56:55.079
&gt;&gt;Kelly Norton: There's actually some talk
about doing something a little, a little more

00:56:55.079 --> 00:57:00.400
clever. In fact we've, I'm-I'm-I made a pitch
to add a console at mark timeline into all

00:57:00.400 --> 00:57:05.049
the widgets that you could turn on in a permutation
so that you get like full traces of when things

00:57:05.049 --> 00:57:06.049
happen.

00:57:06.049 --> 00:57:07.049
&gt;&gt;male in audience: Yep.

00:57:07.049 --> 00:57:09.700
&gt;&gt;Kelly Norton: So something like that's gonna
happen soon, but right now just call it as

00:57:09.700 --> 00:57:10.700
a native method, yeah.

00:57:10.700 --> 00:57:11.700
&gt;&gt;male in audience: Excellent, thank you.

00:57:11.700 --> 00:57:12.700
&gt;&gt;Kelly Norton: Sure.

00:57:12.700 --> 00:57:16.660
&gt;&gt;male in audience: So first of all, thank
you for that connection to the Java code.

00:57:16.660 --> 00:57:21.780
That was by far my biggest phony request,
like I scrolled out half of my complaints

00:57:21.780 --> 00:57:22.780
as soon as you-

00:57:22.780 --> 00:57:23.780
&gt;&gt;Kelly Norton: Awesome.

00:57:23.780 --> 00:57:24.780
&gt;&gt;male in audience: got to that point.

00:57:24.780 --> 00:57:25.780
&gt;&gt;Kelly Norton: That's cool.

00:57:25.780 --> 00:57:31.119
&gt;&gt;male in audience: Maybe a couple more kind
of phony requests here. So knowing the line

00:57:31.119 --> 00:57:38.029
of code that caused the problem is nice, but
if-if you profile like in an all Java stack,

00:57:38.029 --> 00:57:42.089
use a profiler, generally you record, and
then you stop recording-

00:57:42.089 --> 00:57:43.089
&gt;&gt;Kelly Norton: Yep.

00:57:43.089 --> 00:57:47.819
&gt;&gt;male in audience: and you kind of get times
per method. And Speed Tracer doesn't work

00:57:47.819 --> 00:57:51.181
that way I'd assume because maybe browsers
don't really work that way.

00:57:51.181 --> 00:57:52.181
&gt;&gt;Kelly Norton: Yep.

00:57:52.181 --> 00:57:56.130
&gt;&gt;male in audience: It's like call backs and
stuff, but it's kind of hard to correlate

00:57:56.130 --> 00:58:03.200
like that this code took a lot of time, as
opposed to oh this is just the entry to the

00:58:03.200 --> 00:58:07.460
code that maybe took a lot of time. Is there
a way that Speed Tracer can sort of help us

00:58:07.460 --> 00:58:08.460
find those hot spots?

00:58:08.460 --> 00:58:12.670
&gt;&gt;Kelly Norton: Yes. Stay tuned. We're-we're
actually, Eric who's duckin' his head out

00:58:12.670 --> 00:58:17.160
there in the audience, raise your head Eric,
raise your hand Eric. So Eric is actually

00:58:17.160 --> 00:58:23.720
workin' some, some integration with a, with
a conventional JavaScript debugger which,

00:58:23.720 --> 00:58:26.869
there's still, there's still a lot of technical
work to be done for that. Of course everything

00:58:26.869 --> 00:58:31.450
we do we sort of work with Chrome and Web
Kit teams to-to figure out the best way to

00:58:31.450 --> 00:58:32.450
do it.

00:58:32.450 --> 00:58:36.809
So, we-we're actually doing that right now
with integration with the profiler. The-the

00:58:36.809 --> 00:58:40.170
thought is that what we would do is-is in
addition to having that sort of event stream-

00:58:40.170 --> 00:58:41.170
&gt;&gt;male in audience: Um-hum.

00:58:41.170 --> 00:58:44.380
&gt;&gt;Kelly Norton: you could click on any event
and actually get a profile for that particular

00:58:44.380 --> 00:58:45.380
event. Right-

00:58:45.380 --> 00:58:46.380
&gt;&gt;male in audience: [unintelligible]

00:58:46.380 --> 00:58:48.080
&gt;&gt;Kelly Norton: so it's actually still organized
in the way that Speed Tracer likes to organize

00:58:48.080 --> 00:58:52.890
things, but you-you get all the information
that you would have in a, in a regular JavaScript

00:58:52.890 --> 00:58:53.890
profiler. So-

00:58:53.890 --> 00:59:00.690
&gt;&gt;male in audience: And then one maybe tiny
pony request and maybe just your expertise.

00:59:00.690 --> 00:59:06.859
Sometimes I'm afraid that we lose a lot of
time, we deliver big payloads, JSON payloads,

00:59:06.859 --> 00:59:13.432
and we Gzip them because we wanna adhere to
best practices and try to make it as small

00:59:13.432 --> 00:59:18.099
as possible, and sometimes I'm afraid that
the browser's taking a long time to unGzip

00:59:18.099 --> 00:59:19.099
them-

00:59:19.099 --> 00:59:20.099
&gt;&gt;Kelly Norton: Right.

00:59:20.099 --> 00:59:24.289
&gt;&gt;male in audience: if-if you have something
that goes to a hundred K and then it unGzips

00:59:24.289 --> 00:59:29.990
to four Mgs, that seems like that should take
some time, but I could never find any indication

00:59:29.990 --> 00:59:32.150
of how long that is possibly taking.

00:59:32.150 --> 00:59:33.150
&gt;&gt;Kelly Norton: Right.

00:59:33.150 --> 00:59:35.900
&gt;&gt;male in audience: Is that an event that
I could look at or-

00:59:35.900 --> 00:59:42.319
&gt;&gt;Kelly Norton: So we don't have it as an
event. And-and I have to say that my experimentation

00:59:42.319 --> 00:59:46.519
here is pretty small, but I have what, I will
tell you that I observed, from what I've observed,

00:59:46.519 --> 00:59:47.519
it's insignificant.

00:59:47.519 --> 00:59:48.519
&gt;&gt;male in audience: Okay.

00:59:48.519 --> 00:59:51.940
&gt;&gt;Kelly Norton: The reason why it's insignificant,
in addition to just not taking a lot of total

00:59:51.940 --> 00:59:56.869
time, is that most browsers actually have
additional threads, or in some cases additional

00:59:56.869 --> 01:00:01.279
processes, that are part of the resource loading
stack. So in most cases it doesn't even happen

01:00:01.279 --> 01:00:02.279
on your UI thread.

01:00:02.279 --> 01:00:03.279
&gt;&gt;male in audience: Right.

01:00:03.279 --> 01:00:04.950
&gt;&gt;Kelly Norton: So even if it did take a little
bit of time, it still has that asynchronous

01:00:04.950 --> 01:00:05.950
feel apart from the actual UI so-

01:00:05.950 --> 01:00:06.950
&gt;&gt;male in audience: Um.

01:00:06.950 --> 01:00:08.180
&gt;&gt;Kelly Norton: The native, oh sorry.

01:00:08.180 --> 01:00:14.000
&gt;&gt;male in audience: Sorry, and the native
JSON parsing do you think that that's gonna

01:00:14.000 --> 01:00:19.589
help with the payload delivery, or is that
timing that you're looking at already native

01:00:19.589 --> 01:00:20.589
browser JSON timing?

01:00:20.589 --> 01:00:25.680
&gt;&gt;Kelly Norton: It's, so the native parsing
of JSON in the browsers is-is considerably

01:00:25.680 --> 01:00:27.259
faster than what we have been doing.

01:00:27.259 --> 01:00:28.259
&gt;&gt;male in audience: Yeah.

01:00:28.259 --> 01:00:29.259
&gt;&gt;Kelly Norton: I-I think it's gonna actually
get faster though. I've already heard some

01:00:29.259 --> 01:00:30.259
discussion-

01:00:30.259 --> 01:00:31.259
&gt;&gt;male in audience: Right. Thank you.

01:00:31.259 --> 01:00:34.460
&gt;&gt;Kelly Norton: around, about it. I mean.
So we're gonna run outa time. I-I'm, what

01:00:34.460 --> 01:00:38.339
I'm gonna do is I'm gonna break down my stuff,
and I'm gonna head towards the back so that

01:00:38.339 --> 01:00:43.119
as the next session comes in, where, I'm not
standin' up in the front, and if you have

01:00:43.119 --> 01:00:46.230
a question that you wanna ask me, then, then
meet me, meet me back there.

01:00:46.230 --> 01:00:47.230
Cool.

01:00:47.230 --> 01:00:48.230
Thanks, everyone.

01:00:48.230 --> 01:00:48.231
[applause]

