WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.772
[APPLAUSE]

00:00:05.550 --> 00:00:08.130
DAN SHAW: How's everybody doing?

00:00:08.130 --> 00:00:15.870
So before we kick off into my
talk and my janky graphics,

00:00:15.870 --> 00:00:16.370
is this on?

00:00:16.370 --> 00:00:17.116
Can you hear me?

00:00:17.116 --> 00:00:17.740
AUDIENCE: Yeah.

00:00:17.740 --> 00:00:19.340
DAN SHAW: Great.

00:00:19.340 --> 00:00:22.820
I'm going to kind of lay out
where we're going this evening.

00:00:22.820 --> 00:00:27.640
So we have a very interesting
kind of eclectic mix for you,

00:00:27.640 --> 00:00:33.130
and that very much
represents the world of Node.

00:00:33.130 --> 00:00:37.120
We're in the enterprise,
in embedded devices,

00:00:37.120 --> 00:00:41.140
in mobile, all over
the place, so I'm

00:00:41.140 --> 00:00:43.740
going to share some of my
experience, some of what

00:00:43.740 --> 00:00:48.850
I've been helping grow
in the Node community.

00:00:48.850 --> 00:00:54.300
And then after me, we'll
have Trevor Norris, Node core

00:00:54.300 --> 00:00:57.370
contributor, and we're
going to go really deep

00:00:57.370 --> 00:01:04.430
into some core stuff that
is sort of very low level.

00:01:04.430 --> 00:01:07.560
And then we're going
to come up from there,

00:01:07.560 --> 00:01:11.370
and Eric Toth of Paypal
is going to share

00:01:11.370 --> 00:01:14.740
some of the experience of
the transformation that's

00:01:14.740 --> 00:01:20.940
taken place at Paypal and
really the pervasive Node that

00:01:20.940 --> 00:01:24.390
is driving Paypal now.

00:01:24.390 --> 00:01:26.980
So it's really
exciting, and we're

00:01:26.980 --> 00:01:30.980
going to close out with
Guillermo Rauch, the creator

00:01:30.980 --> 00:01:37.930
of Socket.io and WebSockets and
connecting it back to Kaazing.

00:01:37.930 --> 00:01:39.610
This meetup is
really special to me

00:01:39.610 --> 00:01:43.510
because it connects back
to the very earliest

00:01:43.510 --> 00:01:47.410
parts of my career that
were with WebSockets.

00:01:47.410 --> 00:01:49.890
I, unfortunately,
made the choice to go,

00:01:49.890 --> 00:01:54.040
not with Java, but over
to this Node thing,

00:01:54.040 --> 00:01:59.180
and it was WebSockets
and Socket.io

00:01:59.180 --> 00:02:02.180
that really kickstarted
that part of my career.

00:02:02.180 --> 00:02:07.080
So we're going to bring it home
with Guillermo and WebSockets

00:02:07.080 --> 00:02:08.520
and Socket.io.

00:02:08.520 --> 00:02:13.280
Socket.io got to 1.0
before Node got to 1.0,

00:02:13.280 --> 00:02:21.550
so that's really exciting and an
integral part of Node's growth.

00:02:21.550 --> 00:02:24.160
But that's the evening.

00:02:24.160 --> 00:02:29.510
Let me dive into Node.js
and what's going on.

00:02:29.510 --> 00:02:32.830
So I'm DShaw.

00:02:32.830 --> 00:02:37.580
I am the co-founder of a
company called NodeSource.

00:02:37.580 --> 00:02:40.680
We do Node for the enterprise.

00:02:40.680 --> 00:02:44.780
We help large companies
run Node effectively.

00:02:44.780 --> 00:02:49.940
Before that, I
co-founded a consortium,

00:02:49.940 --> 00:02:53.740
a group of individuals that
came together early on in Node's

00:02:53.740 --> 00:02:58.180
history to provide professional
services for the Node firm.

00:02:58.180 --> 00:03:03.190
And I've worked at a bunch of
startups with Node, at Storify,

00:03:03.190 --> 00:03:07.690
Spreecast, Voxer, ClassDojo.

00:03:07.690 --> 00:03:13.250
And if you enjoy hearing me um
and ah and all that stuff you,

00:03:13.250 --> 00:03:20.070
can listen in your eardrums to
me on my podcast called NodeUp,

00:03:20.070 --> 00:03:24.250
and I run a couple
events around bots

00:03:24.250 --> 00:03:26.830
and Arduino stuff, nodebots.sf.

00:03:29.284 --> 00:03:29.950
Nebrius is here.

00:03:29.950 --> 00:03:32.940
I don't know if
Miles is also here.

00:03:32.940 --> 00:03:35.600
Great group of people,
where we come together,

00:03:35.600 --> 00:03:38.700
and it's really kind of the
antithesis of this event.

00:03:38.700 --> 00:03:43.870
This event is special
person dropping knowledge

00:03:43.870 --> 00:03:46.680
on other people.

00:03:46.680 --> 00:03:53.430
The Node bots, I compare it to
getting together and basically

00:03:53.430 --> 00:03:54.820
building LEGOs with friends.

00:03:54.820 --> 00:03:56.800
Close as I can get to that.

00:03:56.800 --> 00:04:02.100
It's just hacking,
sharing, and hanging out.

00:04:02.100 --> 00:04:08.180
So NodeBots Day and NodeBots.sf,
it's very special, kind of

00:04:08.180 --> 00:04:13.630
very different,
meetup that I created.

00:04:13.630 --> 00:04:18.940
So let's dive in and see why
Node has been so important

00:04:18.940 --> 00:04:24.900
and why Node is relevant
and why Node will continue

00:04:24.900 --> 00:04:27.610
to be relevant for,
let's say, 10 years.

00:04:27.610 --> 00:04:30.340
I'm not going to say that
Node is going to be relevant

00:04:30.340 --> 00:04:34.760
forever, but there's a
incredibly positive story

00:04:34.760 --> 00:04:38.340
for Node in the next 10 years.

00:04:38.340 --> 00:04:41.510
And the foundation
anchor of that

00:04:41.510 --> 00:04:44.570
is because Node is a
platform for running

00:04:44.570 --> 00:04:47.570
JavaScript on the server.

00:04:47.570 --> 00:04:54.010
It has increasingly been a part
of how we build applications.

00:04:54.010 --> 00:04:57.350
With the dawn of
HTML5, we really now

00:04:57.350 --> 00:05:03.590
have the tools to build
what we want with JavaScript

00:05:03.590 --> 00:05:10.480
on the web, and that is driving
ever more greater importance

00:05:10.480 --> 00:05:20.570
of JavaScript and the need for
dynamic and effective backends.

00:05:20.570 --> 00:05:23.770
On top of that, we're
building services

00:05:23.770 --> 00:05:26.230
that need to be responsive.

00:05:26.230 --> 00:05:30.405
I'm using-- I'm stealing the
responsive word from responsive

00:05:30.405 --> 00:05:34.840
design to illustrate
a pattern that we've

00:05:34.840 --> 00:05:42.830
seen in the backend, where
perhaps you have a API

00:05:42.830 --> 00:05:45.280
endpoint that returns
a lot of data.

00:05:45.280 --> 00:05:47.640
Awesome for your web app.

00:05:47.640 --> 00:05:50.457
Really horrible for
your mobile application.

00:05:50.457 --> 00:05:52.040
Mobile application,
you need something

00:05:52.040 --> 00:05:53.880
that's tailored for that.

00:05:53.880 --> 00:05:57.510
It's been an area where
Node has really excelled.

00:05:57.510 --> 00:06:02.970
You can craft and deliver
content that is precisely

00:06:02.970 --> 00:06:06.010
targeted to the
needs of the device,

00:06:06.010 --> 00:06:11.320
and Node is an incredible
lightweight engine

00:06:11.320 --> 00:06:12.980
to drive that.

00:06:12.980 --> 00:06:16.620
The Internet of Things
has been another factor

00:06:16.620 --> 00:06:19.990
in increasing the
relevance of Node,

00:06:19.990 --> 00:06:25.270
the democratization
of programming,

00:06:25.270 --> 00:06:28.600
really, with JavaScript.

00:06:28.600 --> 00:06:34.250
And it has been augmented by
the democratization of hardware

00:06:34.250 --> 00:06:36.930
with Arduinos and
Raspberry Pi's,

00:06:36.930 --> 00:06:42.260
so connecting that to our
services and our infrastructure

00:06:42.260 --> 00:06:44.940
has been really compelling.

00:06:44.940 --> 00:06:49.850
And beyond that, there's
new opportunities

00:06:49.850 --> 00:06:54.960
inside devices, inside of
switches, inside of the devices

00:06:54.960 --> 00:06:59.930
that are powering the internet
that is ever more increasingly

00:06:59.930 --> 00:07:01.230
important.

00:07:01.230 --> 00:07:03.300
So we have this
beautiful language,

00:07:03.300 --> 00:07:07.830
beautiful with warts
language, JavaScript.

00:07:07.830 --> 00:07:10.370
But the fantastic
thing about JavaScript,

00:07:10.370 --> 00:07:14.700
that it's incredibly
approachable and everywhere,

00:07:14.700 --> 00:07:19.295
and it powers all
of these platforms.

00:07:19.295 --> 00:07:22.200
When I went through
the transition

00:07:22.200 --> 00:07:26.880
from being a Java,
JavaScript developer,

00:07:26.880 --> 00:07:30.490
middle tier developer, doing
the backend services in Java

00:07:30.490 --> 00:07:34.150
and the frontend
services in JavaScript,

00:07:34.150 --> 00:07:37.930
I was blown away, once I moved
to JavaScript on the server

00:07:37.930 --> 00:07:41.160
side, how fast I was moving.

00:07:41.160 --> 00:07:42.990
It was absolutely incredible.

00:07:42.990 --> 00:07:45.620
So this rapid cycle
time, and what

00:07:45.620 --> 00:07:49.030
I'd like to call the
time from ideation

00:07:49.030 --> 00:07:53.810
to realization, really,
really becomes much smaller

00:07:53.810 --> 00:07:56.720
when you're working
with a dynamic language,

00:07:56.720 --> 00:07:58.670
if you want to get
language geeky.

00:07:58.670 --> 00:08:05.310
But JavaScript is a
fantastic expression of that.

00:08:05.310 --> 00:08:12.120
And then if you're looking at
JavaScript and its relevance,

00:08:12.120 --> 00:08:18.840
this is being reinforced
and becoming a competency

00:08:18.840 --> 00:08:23.460
that business leaders are
looking for and hiring around.

00:08:23.460 --> 00:08:30.110
And the fact that, now, we
have frontend pervasive,

00:08:30.110 --> 00:08:34.390
tooling pervasive,
backend pervasive-- it's

00:08:34.390 --> 00:08:43.500
growing and snowballing into
a really relevant career path.

00:08:43.500 --> 00:08:47.700
So as we explore Node,
let's go and look

00:08:47.700 --> 00:08:53.700
at what it took to get
here because it was not

00:08:53.700 --> 00:08:57.910
all roses for the
entire history.

00:08:57.910 --> 00:09:02.400
Back in 2009, we had the
original presentation

00:09:02.400 --> 00:09:05.580
of Ryan Doll's hacks.

00:09:05.580 --> 00:09:14.620
2010, when I started adopting
Node and then left my job

00:09:14.620 --> 00:09:17.360
and then basically came out
San Francisco and abandoned

00:09:17.360 --> 00:09:23.060
everything to come
work on Node--

00:09:23.060 --> 00:09:24.760
I'm not allowed to curse.

00:09:24.760 --> 00:09:26.460
Things were really broken.

00:09:29.740 --> 00:09:31.590
The ecosystem was
really fragmented.

00:09:31.590 --> 00:09:34.590
We didn't have a
package manager.

00:09:34.590 --> 00:09:38.770
We had Kiwi, which is kind of
janky, from TJ Holowaychuk,

00:09:38.770 --> 00:09:44.810
and Isaac came along with NPM.

00:09:44.810 --> 00:09:48.000
Thankfully, we kind
of came together

00:09:48.000 --> 00:09:50.250
and decided to
have one mechanism

00:09:50.250 --> 00:09:54.000
for delivering packages.

00:09:54.000 --> 00:09:58.390
Your promise lovers, we
got rid of promises then.

00:09:58.390 --> 00:10:02.750
So we explored a
lot of patterns,

00:10:02.750 --> 00:10:05.480
broke a lot of
things, and really

00:10:05.480 --> 00:10:10.530
brought together a
fantastic platform.

00:10:10.530 --> 00:10:18.460
Fast forward a year, and
2011 with the .6 release,

00:10:18.460 --> 00:10:19.950
we introduce Windows.

00:10:19.950 --> 00:10:27.240
And we don't have
laptops out, but there's

00:10:27.240 --> 00:10:29.110
a sea of silver
in here, I'm sure,

00:10:29.110 --> 00:10:34.440
if you pull your laptops
out, and the systems

00:10:34.440 --> 00:10:38.950
that are not Macs are
probably Linux machines.

00:10:38.950 --> 00:10:41.810
But if you go outside
of the West Coast,

00:10:41.810 --> 00:10:44.710
you go outside the Bay
Area, Windows still

00:10:44.710 --> 00:10:47.470
dominates the world,
and if it weren't

00:10:47.470 --> 00:10:50.490
for Microsoft's
investment in Node,

00:10:50.490 --> 00:10:52.890
I honestly don't think
the platform would

00:10:52.890 --> 00:10:54.120
be where it is today.

00:10:54.120 --> 00:11:00.740
So I am really grateful
for that evolution in Node,

00:11:00.740 --> 00:11:06.600
even though I spend very little
time in the Windows ecosystem

00:11:06.600 --> 00:11:09.070
for Node and its success.

00:11:09.070 --> 00:11:12.680
If we didn't have that cross
platform ability, if you look

00:11:12.680 --> 00:11:16.750
at other platforms that
have chosen sort of eschew

00:11:16.750 --> 00:11:21.510
and ignore Windows, they
haven't evolved as much,

00:11:21.510 --> 00:11:25.250
so this is a pivotal
point in Node's growth.

00:11:25.250 --> 00:11:29.820
2012 is all about the real time.

00:11:29.820 --> 00:11:31.090
Socket.io is booming.

00:11:31.090 --> 00:11:35.670
Everyone is working with
Node, building great things.

00:11:35.670 --> 00:11:37.530
2012 spent a lot
of time with Steven

00:11:37.530 --> 00:11:44.930
out at [INAUDIBLE] not Node, but
great architecture, fantastic.

00:11:44.930 --> 00:11:49.100
Real time has been
pivotal to Node's growth.

00:11:49.100 --> 00:11:54.280
The low latency IO is just
a fantastic fit for that.

00:11:54.280 --> 00:11:59.870
Then in 2013, we
introduce the enterprise.

00:11:59.870 --> 00:12:04.810
Walmart comes along, and
they have their Black Friday

00:12:04.810 --> 00:12:07.840
event running all
their mobile, I

00:12:07.840 --> 00:12:12.520
think, large portion
of their mobile traffic

00:12:12.520 --> 00:12:20.340
through Node and having it
be a rock solid Black Friday.

00:12:20.340 --> 00:12:26.380
That really encouraged many
others to come along behind it,

00:12:26.380 --> 00:12:30.250
and so you had Walmart
and Paypal really paving

00:12:30.250 --> 00:12:33.450
the road for large scale Node.

00:12:33.450 --> 00:12:40.760
And 2014, it's really
become pervasive,

00:12:40.760 --> 00:12:45.480
and one of the
default choices where

00:12:45.480 --> 00:12:49.220
new development, new
platforms, are growing

00:12:49.220 --> 00:12:55.100
and the productivity that
is being done in Node

00:12:55.100 --> 00:12:59.000
is letting these
organizations choose that.

00:12:59.000 --> 00:13:04.240
And all of the foundation of
why we're building JavaScript

00:13:04.240 --> 00:13:10.610
applications has driven
the growth of Node.

00:13:10.610 --> 00:13:16.610
So as were looking at
building applications,

00:13:16.610 --> 00:13:23.790
let's see what has led to Node's
success in these environments.

00:13:23.790 --> 00:13:29.580
If you look at large systems
that have evolved over years,

00:13:29.580 --> 00:13:33.020
and you look at-- I'm going
to pick on Java a little bit.

00:13:33.020 --> 00:13:38.870
--you look at Java apps, it is
typically one big monolithic

00:13:38.870 --> 00:13:39.690
application.

00:13:39.690 --> 00:13:45.640
And I know dyed-in-the-wool Java
developers will say that you

00:13:45.640 --> 00:13:46.690
can go POJOs.

00:13:46.690 --> 00:13:52.980
You can go simple minimalist
Java services-- awesome.

00:13:52.980 --> 00:13:57.900
Engineering good practices
are, in a way, universal,

00:13:57.900 --> 00:14:01.360
and you can apply them
in most every language.

00:14:01.360 --> 00:14:05.910
But typically, what you
see in Java applications,

00:14:05.910 --> 00:14:08.290
Ruby applications,
PHP applications,

00:14:08.290 --> 00:14:11.170
are large monolithic
applications,

00:14:11.170 --> 00:14:16.250
and this tends to
slow everybody down.

00:14:16.250 --> 00:14:22.870
And over time,
having all that code,

00:14:22.870 --> 00:14:26.060
having to go through
this bottleneck,

00:14:26.060 --> 00:14:29.550
these applications were
incredibly behind schedule,

00:14:29.550 --> 00:14:37.270
and in fact, six months to
two years behind schedule

00:14:37.270 --> 00:14:39.620
with some of these
other platforms.

00:14:39.620 --> 00:14:43.010
The reality is that
shipping code wins,

00:14:43.010 --> 00:14:48.220
and the time to
execution, the time

00:14:48.220 --> 00:14:53.960
to realizing that
engineering effort,

00:14:53.960 --> 00:15:00.530
is greatly reduced in building
out an application that--

00:15:00.530 --> 00:15:01.900
I'll step away from Node.

00:15:01.900 --> 00:15:06.830
We'll latch onto the
principles of engineering.

00:15:06.830 --> 00:15:11.860
So a smaller thing, you can
iterate on it faster, period.

00:15:11.860 --> 00:15:13.340
Right?

00:15:13.340 --> 00:15:15.820
Node tends to encourage that.

00:15:15.820 --> 00:15:20.310
So one of the biggest
impact in the last year

00:15:20.310 --> 00:15:28.260
or so areas of Node's growth
has been the frontend backend.

00:15:28.260 --> 00:15:35.300
It's a really odd slice of
the application architecture,

00:15:35.300 --> 00:15:41.040
but these rich client teams
that have been building out,

00:15:41.040 --> 00:15:46.210
these fantastic dynamic
JavaScript experiences,

00:15:46.210 --> 00:15:48.640
needed something more.

00:15:48.640 --> 00:15:54.110
The monoliths that were
driving the delivery

00:15:54.110 --> 00:15:59.150
of these applications
were just too slow.

00:15:59.150 --> 00:16:01.860
You need, as a
frontend engineer,

00:16:01.860 --> 00:16:05.780
to rapidly iterate on
the customer experience

00:16:05.780 --> 00:16:07.150
to respond to their needs.

00:16:07.150 --> 00:16:10.260
So the introduction
of a frontend

00:16:10.260 --> 00:16:13.570
backend-- it's a backend
for your frontend services.

00:16:13.570 --> 00:16:18.280
So templating and CSS
and all that stuff

00:16:18.280 --> 00:16:23.450
is moved out of the monolith,
the big application,

00:16:23.450 --> 00:16:27.980
into this lightweight
dynamic Node layer,

00:16:27.980 --> 00:16:37.890
and it's not incredibly
sexy code, there.

00:16:37.890 --> 00:16:41.590
It's very utilitarian, but
it's extraordinarily functional

00:16:41.590 --> 00:16:48.330
and absolutely allows these
user interface engineers,

00:16:48.330 --> 00:16:52.580
these frontend teams, to
operate in a whole new way.

00:16:52.580 --> 00:16:56.100
And from my experience
as a developer that

00:16:56.100 --> 00:16:58.566
did backend services
and frontend,

00:16:58.566 --> 00:17:05.680
the ability to also
think in JavaScript

00:17:05.680 --> 00:17:09.380
is insanely liberating,
so let's look

00:17:09.380 --> 00:17:13.480
at the impact of the
frontend backend.

00:17:13.480 --> 00:17:18.490
These engineers that are
crafting the user experience

00:17:18.490 --> 00:17:24.410
are the front line of
what everyone experiences,

00:17:24.410 --> 00:17:29.140
so it's extremely important
that area of the code base

00:17:29.140 --> 00:17:30.180
be dynamic.

00:17:30.180 --> 00:17:35.740
Your backend services that talk
to a database or data schema

00:17:35.740 --> 00:17:40.520
probably doesn't evolve
weekly, but your frontend

00:17:40.520 --> 00:17:42.570
may evolve moment to moment.

00:17:42.570 --> 00:17:43.730
There's a baseball game.

00:17:43.730 --> 00:17:46.360
There's an earthquake in Napa.

00:17:46.360 --> 00:17:50.450
You need to address
what's changing

00:17:50.450 --> 00:17:55.830
and deliver an experience
that is appropriate.

00:17:55.830 --> 00:17:59.740
So Node is empowering
these frontend teams

00:17:59.740 --> 00:18:06.520
by allowing us to really
put in front of them

00:18:06.520 --> 00:18:09.580
the tools that they
need to deliver

00:18:09.580 --> 00:18:12.750
the experience
that they want to.

00:18:12.750 --> 00:18:17.750
So we're able to
pull away from some

00:18:17.750 --> 00:18:21.630
of these weird architectures
that are delivering

00:18:21.630 --> 00:18:30.710
HTML, HTML5, whatever, HTML,
CSS, and the JavaScript.

00:18:33.840 --> 00:18:43.530
If you've gone to Java Land or
C++ Land and had a C++ or Java

00:18:43.530 --> 00:18:48.610
abstraction for CSS that you
have to-- it's a nightmare

00:18:48.610 --> 00:18:49.550
scenario.

00:18:49.550 --> 00:18:58.340
You can't take your expertise
in all these technologies

00:18:58.340 --> 00:19:00.160
and apply it.

00:19:00.160 --> 00:19:05.890
It's so incredibly
separate there.

00:19:05.890 --> 00:19:13.740
So we go in, and we reduce
that crazy abstraction,

00:19:13.740 --> 00:19:17.950
get rid of that, allow
frontend engineers

00:19:17.950 --> 00:19:21.110
to operate within
their specialization

00:19:21.110 --> 00:19:24.370
and be able to focus
on what they're doing.

00:19:24.370 --> 00:19:27.130
They don't have to go
through a middleman,

00:19:27.130 --> 00:19:30.620
essentially, to
produce the experience.

00:19:30.620 --> 00:19:36.100
You can rely on the
knowledge and your expertise

00:19:36.100 --> 00:19:40.260
that you've built
up over your career.

00:19:40.260 --> 00:19:46.300
So the biggest thing for me
in going through my transition

00:19:46.300 --> 00:19:52.690
from having to do backend
services in Node--

00:19:52.690 --> 00:19:55.820
in something other than Node,
and delivering a frontend

00:19:55.820 --> 00:20:01.020
experience is not having
the context switch.

00:20:01.020 --> 00:20:08.170
I would go build UI components,
and then on a separate day,

00:20:08.170 --> 00:20:12.440
have to go and sort of go
into Java mode database, ORMs

00:20:12.440 --> 00:20:15.900
in Java, Hibernate,
all that stuff.

00:20:15.900 --> 00:20:19.810
It was really, really
mentally challenging to go

00:20:19.810 --> 00:20:21.610
back and forth.

00:20:21.610 --> 00:20:25.680
Enjoyed programming
in both, but not

00:20:25.680 --> 00:20:29.130
having that context
switch-- a lot of times,

00:20:29.130 --> 00:20:32.340
we're crafting API
elements that we're

00:20:32.340 --> 00:20:35.750
delivering new
experiences to the user.

00:20:35.750 --> 00:20:37.680
You can rapidly
iterate on the backend,

00:20:37.680 --> 00:20:42.830
rapidly iterate on the frontend,
and really pull together

00:20:42.830 --> 00:20:47.990
a fantastic experience without
that cognitive load that's

00:20:47.990 --> 00:20:52.210
involved in going back and
forth between platforms.

00:20:52.210 --> 00:20:56.610
So what are the ways
that we can really

00:20:56.610 --> 00:21:00.470
embrace Node, incorporate
Node into our ecosystem?

00:21:00.470 --> 00:21:04.442
How do we accomplish
this frontend backend?

00:21:04.442 --> 00:21:05.900
One of the biggest
things that I've

00:21:05.900 --> 00:21:10.460
seen in the success
of a frontend backend

00:21:10.460 --> 00:21:15.070
is the use of an API, having
an effective abstraction

00:21:15.070 --> 00:21:16.525
layer for your data.

00:21:19.900 --> 00:21:24.000
I've thrown out the concept
that databases must die.

00:21:24.000 --> 00:21:25.830
I got a lot of
backlash for that,

00:21:25.830 --> 00:21:28.090
but essentially,
what I mean there

00:21:28.090 --> 00:21:30.670
is that you should
be talking to an API.

00:21:30.670 --> 00:21:33.440
You should not be
exposing-- and again, this

00:21:33.440 --> 00:21:34.540
is not Node specific.

00:21:34.540 --> 00:21:38.420
This is engineering in general.

00:21:38.420 --> 00:21:42.280
You should be exposing,
to other tiers

00:21:42.280 --> 00:21:45.380
in your architecture,
an API, and then

00:21:45.380 --> 00:21:50.650
if it's your responsibility
in the various tiers of things

00:21:50.650 --> 00:21:52.910
to talk to a
database, that's fine.

00:21:52.910 --> 00:21:54.810
There, you have
database connections.

00:21:54.810 --> 00:21:57.680
But if you're doing
template rendering

00:21:57.680 --> 00:22:02.340
and rendering JavaScript
files and CSS rendering,

00:22:02.340 --> 00:22:04.230
you should probably
focus on just that.

00:22:04.230 --> 00:22:06.180
Separate out those concerns.

00:22:06.180 --> 00:22:07.430
Focus on that.

00:22:07.430 --> 00:22:09.620
Create a lightweight
API layer that

00:22:09.620 --> 00:22:13.460
talks to your data
services, aggregates them,

00:22:13.460 --> 00:22:19.490
and really focus the areas.

00:22:19.490 --> 00:22:23.850
You'll design better, smaller,
more effective applications

00:22:23.850 --> 00:22:26.000
that way.

00:22:26.000 --> 00:22:32.130
So that ends up basically
looking like proxies

00:22:32.130 --> 00:22:39.360
all the way down, so
the smaller apps--

00:22:39.360 --> 00:22:42.380
it can feel a little bit weird.

00:22:42.380 --> 00:22:47.080
But there are-- once
you break things

00:22:47.080 --> 00:22:49.760
out into these API
layers that are talking,

00:22:49.760 --> 00:22:53.580
you're essentially
handing off the data

00:22:53.580 --> 00:22:55.250
through these various tiers.

00:22:55.250 --> 00:23:01.850
So if you're looking at
an application that's

00:23:01.850 --> 00:23:05.630
going through all
these hops, that

00:23:05.630 --> 00:23:09.050
is a very effective
pattern in Node.

00:23:09.050 --> 00:23:13.970
And if you need to
take a data point away

00:23:13.970 --> 00:23:18.050
for, oh, my god,
latency bad, network

00:23:18.050 --> 00:23:23.300
bad in an internal
network with Node,

00:23:23.300 --> 00:23:27.420
you're looking at about six
milliseconds added latency

00:23:27.420 --> 00:23:30.510
going through Node
because Node is very, very

00:23:30.510 --> 00:23:36.230
efficient at doing streaming
I/O. So that allows you to have

00:23:36.230 --> 00:23:41.810
very fluent interfaces for
communicating with their data.

00:23:41.810 --> 00:23:45.610
To do this, we're using
a dynamic language,

00:23:45.610 --> 00:23:48.710
rolling this out into any scale.

00:23:48.710 --> 00:23:52.240
Do yourself a favor--
don't set aside testing.

00:23:52.240 --> 00:23:56.970
Test early, test often,
and to make that effective,

00:23:56.970 --> 00:23:58.270
automate it.

00:23:58.270 --> 00:23:59.370
Automate your testing.

00:23:59.370 --> 00:24:03.290
Have that baked
into your ecosystem.

00:24:03.290 --> 00:24:08.530
Automate the process
of shipping code.

00:24:08.530 --> 00:24:12.370
I've always been a fan
of continuous integration

00:24:12.370 --> 00:24:13.930
and continuous delivery.

00:24:13.930 --> 00:24:18.350
Not so much for
the fanciness of,

00:24:18.350 --> 00:24:22.900
oh, we're shipping code
every xyz times a day.

00:24:22.900 --> 00:24:24.740
The reason why I love
continuous integration

00:24:24.740 --> 00:24:29.630
and continuous delivery is
it forces you to do this.

00:24:29.630 --> 00:24:32.900
If your code is going
out all the time,

00:24:32.900 --> 00:24:36.030
and you don't have
effective tests in place,

00:24:36.030 --> 00:24:40.860
someone's going to be
unhappy, so they're

00:24:40.860 --> 00:24:44.610
great patterns that allow
you to work effectively.

00:24:44.610 --> 00:24:51.560
So Node is really
growing and becoming

00:24:51.560 --> 00:24:56.450
an essential part of
how we build things

00:24:56.450 --> 00:25:02.630
from servers to build tools
throughout our ecosystem

00:25:02.630 --> 00:25:09.420
because of JavaScript, and
I'm grateful for the ability

00:25:09.420 --> 00:25:12.460
to write JavaScript everywhere.

00:25:12.460 --> 00:25:13.657
Fantastic.

00:25:13.657 --> 00:25:14.490
Thank you very much.

00:25:14.490 --> 00:25:19.600
[APPLAUSE]

00:25:19.600 --> 00:25:22.190
DAN SHAW: So I'm going to
bring out Trevor Norris.

00:25:22.190 --> 00:25:25.860
And I guess as Trevor's
getting set up--

00:25:25.860 --> 00:25:31.160
we'll have a larger
Q&amp;A panel later today,

00:25:31.160 --> 00:25:34.630
but if you want to
ask any questions,

00:25:34.630 --> 00:25:39.680
happy to take one as Trevor
recompiles his kernel.

00:25:39.680 --> 00:25:40.260
Linux user.

00:25:43.520 --> 00:25:44.206
Yes?

00:25:44.206 --> 00:25:45.122
AUDIENCE: [INAUDIBLE]?

00:25:50.780 --> 00:25:52.024
DAN SHAW: Right.

00:25:52.024 --> 00:25:52.940
AUDIENCE: [INAUDIBLE]?

00:26:00.482 --> 00:26:02.440
DAN SHAW: Sorry, I need
to repeat the question.

00:26:02.440 --> 00:26:07.780
So the question is
there's 10 years out.

00:26:07.780 --> 00:26:10.960
What is out there?

00:26:10.960 --> 00:26:14.360
I think that would
be driven by what

00:26:14.360 --> 00:26:17.530
web technology's exposed to us.

00:26:17.530 --> 00:26:23.580
The web is the
driver for JavaScript

00:26:23.580 --> 00:26:29.090
and one of the reasons why
JavaScript got to this level.

00:26:29.090 --> 00:26:34.170
If we begin to see
pluralities in the web--

00:26:34.170 --> 00:26:37.990
I'm at Google, so Dart.

00:26:37.990 --> 00:26:40.580
I don't think it's
going to Dart,

00:26:40.580 --> 00:26:48.760
but if the browsers can
introduce a language that

00:26:48.760 --> 00:26:51.960
begins to become as
pervasive as JavaScript,

00:26:51.960 --> 00:26:52.980
I would look to that.

00:26:55.970 --> 00:26:59.830
On NodeUp, we have
a show scheduled

00:26:59.830 --> 00:27:05.020
for next week on Node versus Go.

00:27:05.020 --> 00:27:09.230
Again, I don't think-- Go
is a fantastic language.

00:27:09.230 --> 00:27:15.520
It really does a beautiful
job at being a better C,

00:27:15.520 --> 00:27:18.400
but it was designed to
be a systems language.

00:27:18.400 --> 00:27:20.820
Node was designed to be
an applications language.

00:27:20.820 --> 00:27:23.715
Node's extremely,
extremely effective

00:27:23.715 --> 00:27:26.180
at being an
application language;

00:27:26.180 --> 00:27:29.130
OK at doing systemsy things.

00:27:29.130 --> 00:27:31.560
At NodeSource, we
actually end up

00:27:31.560 --> 00:27:34.390
recommending that
a lot of companies

00:27:34.390 --> 00:27:37.320
do not use Node for
all their things,

00:27:37.320 --> 00:27:41.460
their systems tools that
are really good and really

00:27:41.460 --> 00:27:46.800
effective at doing what they
do, and build your applications.

00:27:46.800 --> 00:27:50.330
Use the JavaScript
and that Velocity

00:27:50.330 --> 00:27:55.200
to build your applications.

00:27:55.200 --> 00:27:58.400
But it is not a
universal panacea.

00:27:58.400 --> 00:28:07.050
It's a fantastic tool, but
in every large installation

00:28:07.050 --> 00:28:12.760
of code that I've seen,
there's an incredible plurality

00:28:12.760 --> 00:28:15.620
of languages that
continue to exist.

00:28:15.620 --> 00:28:24.650
And even though JavaScript has
taken over a lot of the new

00:28:24.650 --> 00:28:28.090
growth in many of
these instances,

00:28:28.090 --> 00:28:32.990
the presence of Java and
presence of C++ at your larger

00:28:32.990 --> 00:28:35.650
code bases are still there.

00:28:35.650 --> 00:28:41.650
So what comes in
after JavaScript,

00:28:41.650 --> 00:28:47.390
in my mind, whatever the web
drives in and very possibly

00:28:47.390 --> 00:28:49.690
could still be JavaScript.

00:28:49.690 --> 00:28:50.498
Yes?

00:28:50.498 --> 00:28:51.414
AUDIENCE: [INAUDIBLE]?

00:29:07.630 --> 00:29:09.780
DAN SHAW: So the
specifics of what

00:29:09.780 --> 00:29:16.110
are the effective tools for REST
API's with JavaScript, right?

00:29:16.110 --> 00:29:21.440
So the contract patterns
there-- I think,

00:29:21.440 --> 00:29:26.420
actually, Eric Toth can
probably speak better to this.

00:29:26.420 --> 00:29:30.510
I tend to be a little bit
lower level than that,

00:29:30.510 --> 00:29:35.450
but I believe they have
been exploring RUM.

00:29:35.450 --> 00:29:40.800
The API contracts, what
are the expected patterns?

00:29:40.800 --> 00:29:48.520
That is an area that the Java
world has really excelled at,

00:29:48.520 --> 00:29:52.200
and that the JavaScript world
has done less of a good job

00:29:52.200 --> 00:29:58.800
at addressing and tackling as
a fundamental part of what's

00:29:58.800 --> 00:29:59.470
going on.

00:29:59.470 --> 00:30:08.190
So schemas and-- what is the,
I know you guys are using,

00:30:08.190 --> 00:30:10.550
for your REST API's?

00:30:10.550 --> 00:30:11.620
Swagger?

00:30:11.620 --> 00:30:15.840
Swagger seems to be
increasingly popular.

00:30:15.840 --> 00:30:21.710
I do think there's a-- I
always get a nice cringe when

00:30:21.710 --> 00:30:25.710
I mentioned WADLs,
you know, WSDL, WADLs.

00:30:25.710 --> 00:30:31.250
WSDL was really
influential in introducing

00:30:31.250 --> 00:30:33.650
us to service oriented
architectures.

00:30:33.650 --> 00:30:39.830
WADL is XML to describe
JSON, and that sucked.

00:30:39.830 --> 00:30:47.270
So it's not a great pattern,
and if you ask any JavaScript

00:30:47.270 --> 00:30:52.590
developer about XML,
they're going to back away.

00:30:52.590 --> 00:30:58.440
But I do think there's a lot
of room for improvement there,

00:30:58.440 --> 00:31:05.500
and if you look at API
definitions, Discovery,

00:31:05.500 --> 00:31:11.020
and a lot of the things that
came out of the SOAP era,

00:31:11.020 --> 00:31:12.920
the patterns for
that have not really

00:31:12.920 --> 00:31:15.910
concretized in JavaScript,
even though the use of it

00:31:15.910 --> 00:31:19.250
is probably even greater.

00:31:19.250 --> 00:31:20.650
So we'll be back.

00:31:20.650 --> 00:31:23.440
We'll have a panel and
probably some discussion.

00:31:23.440 --> 00:31:24.910
Hand it over to Trevor Norris.

00:31:24.910 --> 00:31:26.080
I'm going to steal my water.

00:31:28.419 --> 00:31:29.460
TREVOR NORRIS: Thank you.

00:31:29.460 --> 00:31:31.310
DAN SHAW: Thank you.

