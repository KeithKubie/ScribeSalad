WEBVTT
Kind: captions
Language: en

00:00:02.744 --> 00:00:04.410
KHALED ABDEL RAHMAN:
I'm Khaled, and I'm

00:00:04.410 --> 00:00:07.590
a product manager on the
Living Room team at Google.

00:00:07.590 --> 00:00:10.889
And my focus is cast
games and bringing games

00:00:10.889 --> 00:00:11.680
to the living room.

00:00:11.680 --> 00:00:15.420
Yeah, I have one fan already.

00:00:15.420 --> 00:00:18.110
So Google Cast is
designed for you

00:00:18.110 --> 00:00:20.190
to interact with your
home entertainment devices

00:00:20.190 --> 00:00:23.730
with your mobile phone-- so
your TVs, your speakers, now

00:00:23.730 --> 00:00:25.250
with Chromecast Audio.

00:00:25.250 --> 00:00:27.980
It's a very fluid experience
that most people already

00:00:27.980 --> 00:00:28.680
know how to do.

00:00:28.680 --> 00:00:31.850
You already know and love how
you're searching for content

00:00:31.850 --> 00:00:33.660
on your mobile phone.

00:00:33.660 --> 00:00:36.090
And it's a really,
really simple process.

00:00:36.090 --> 00:00:38.480
You find the content,
you tap the button,

00:00:38.480 --> 00:00:41.090
the content is on the TV.

00:00:41.090 --> 00:00:43.490
And Chromecast has been
doing exceptionally well.

00:00:43.490 --> 00:00:45.690
It's a top selling
streaming device.

00:00:45.690 --> 00:00:49.430
As we announced last September,
it's done over $20 million

00:00:49.430 --> 00:00:51.130
in sales.

00:00:51.130 --> 00:00:52.990
And we've launched
the new Chromecast

00:00:52.990 --> 00:00:55.840
and its colorful variations
you see up there.

00:00:55.840 --> 00:00:57.000
It's really fun.

00:00:57.000 --> 00:00:59.370
And we've also launched
Chromecast Audio,

00:00:59.370 --> 00:01:04.660
where you can now stream
your favorite audio apps

00:01:04.660 --> 00:01:08.430
to the different devices that
you have around your home.

00:01:08.430 --> 00:01:10.760
So let's jump right into it.

00:01:10.760 --> 00:01:13.390
Why make a Google Cast game?

00:01:13.390 --> 00:01:16.620
So a Google Cast game is
going to enable a multiscreen

00:01:16.620 --> 00:01:17.270
experience.

00:01:17.270 --> 00:01:21.280
So now you're playing on your
TV as well as on your phone.

00:01:21.280 --> 00:01:24.760
People love games so much that
it's the top category on all

00:01:24.760 --> 00:01:26.800
of the app stores available.

00:01:26.800 --> 00:01:29.920
But gaming on the TV is
actually not that simple.

00:01:29.920 --> 00:01:32.480
You have to spend a few
dollars on a console,

00:01:32.480 --> 00:01:34.570
get a bunch of controllers
for all your friends

00:01:34.570 --> 00:01:36.030
that are coming in.

00:01:36.030 --> 00:01:39.450
Wouldn't it be much simpler if
the mobile games that you have

00:01:39.450 --> 00:01:42.180
can immediately be
played on your TV?

00:01:42.180 --> 00:01:44.830
With Chromecast, you
absolutely can do that.

00:01:44.830 --> 00:01:48.568
And the entry level is basically
$35 for a Chromecast device.

00:01:52.470 --> 00:01:54.950
What does that mean
for you as a developer?

00:01:54.950 --> 00:01:57.300
Well, across Google
Cast, when games and apps

00:01:57.300 --> 00:02:00.340
are connected to the TV, we're
seeing stronger engagement,

00:02:00.340 --> 00:02:01.320
increased monetization.

00:02:01.320 --> 00:02:04.880
And given that the living
room is inherently social--

00:02:04.880 --> 00:02:08.860
people are there and commenting
on how bad you are playing--

00:02:08.860 --> 00:02:11.250
we're seeing an increase in
downloads for multiplayer

00:02:11.250 --> 00:02:14.310
titles, which is great.

00:02:14.310 --> 00:02:15.990
Given that it's
also on your phone,

00:02:15.990 --> 00:02:19.050
you can utilize all the power
of your phone-- everything

00:02:19.050 --> 00:02:21.195
from infrastructure
is already there.

00:02:21.195 --> 00:02:22.570
If you've already
built your app,

00:02:22.570 --> 00:02:26.250
it becomes much simpler to
just build Cast functionality

00:02:26.250 --> 00:02:29.120
and have it run on the TV.

00:02:29.120 --> 00:02:31.770
So let's talk a bit about the
user experience and some things

00:02:31.770 --> 00:02:33.650
to consider with a Cast game.

00:02:38.210 --> 00:02:42.040
Did it switch to
the right slide?

00:02:42.040 --> 00:02:44.000
There you go.

00:02:44.000 --> 00:02:46.150
So the first thing to
consider is private

00:02:46.150 --> 00:02:48.040
versus public information.

00:02:48.040 --> 00:02:50.040
Now you have a new
set of experiences

00:02:50.040 --> 00:02:51.700
that are open for you.

00:02:51.700 --> 00:02:53.650
Players that are in
your living room each

00:02:53.650 --> 00:02:56.520
have their own screen, and
then there is a big shared TV

00:02:56.520 --> 00:02:59.090
screen that they can play with.

00:02:59.090 --> 00:03:01.830
If you consider a poker game,
the dealer could be on the TV,

00:03:01.830 --> 00:03:05.220
and everyone's personal
cards are on their phone.

00:03:05.220 --> 00:03:08.600
And that's so much fun.

00:03:08.600 --> 00:03:12.390
At the same time, given that
this is a split information,

00:03:12.390 --> 00:03:15.402
please make sure that
the player doesn't really

00:03:15.402 --> 00:03:17.110
need to figure out
where they're looking.

00:03:17.110 --> 00:03:19.130
This is what we
call look fatigue.

00:03:19.130 --> 00:03:22.520
Players should not be switching
constantly from TV to phone

00:03:22.520 --> 00:03:24.350
and trying to figure
out where they look.

00:03:24.350 --> 00:03:26.470
It should be very
smooth to them,

00:03:26.470 --> 00:03:28.820
following with the whole
Cast experience being

00:03:28.820 --> 00:03:33.100
very smooth-- a few taps to
get your content on the TV.

00:03:33.100 --> 00:03:35.380
And same thing for
multiplayer-- the first player

00:03:35.380 --> 00:03:38.090
is going to have a really smooth
experience getting the game up

00:03:38.090 --> 00:03:39.980
there with one tap of a button.

00:03:39.980 --> 00:03:42.200
The person joining should
have the same experience.

00:03:42.200 --> 00:03:44.910
It's just simply one
tap, get into the game,

00:03:44.910 --> 00:03:45.930
and start playing.

00:03:45.930 --> 00:03:47.747
And those are the best
kind of experiences

00:03:47.747 --> 00:03:49.580
you can have with your
friends on the couch.

00:03:54.540 --> 00:03:55.040
Sorry.

00:03:55.040 --> 00:03:57.710
There's a bit of latency
happening between me switching

00:03:57.710 --> 00:04:01.490
and-- so given the
phone as a controller,

00:04:01.490 --> 00:04:03.420
you obviously have a lot
to work with in terms

00:04:03.420 --> 00:04:05.140
of interaction models.

00:04:05.140 --> 00:04:09.600
There's a whole spectrum for
more abstract, just simply

00:04:09.600 --> 00:04:13.640
gyroscope and accelerometer,
to then the more traditional

00:04:13.640 --> 00:04:16.630
that you use with your phone
now, which is specified taps

00:04:16.630 --> 00:04:18.470
and targeted touch inputs.

00:04:18.470 --> 00:04:20.980
So I wanted to highlight some
of these interaction models

00:04:20.980 --> 00:04:24.490
and give you a recommendation
on what's best to use.

00:04:24.490 --> 00:04:26.690
And obviously, this is
just a recommendation.

00:04:26.690 --> 00:04:30.530
So I highly recommend first
that you guys experiment and see

00:04:30.530 --> 00:04:33.980
what works best for your game.

00:04:33.980 --> 00:04:37.179
First up, we have gestures
and non-targeted taps.

00:04:37.179 --> 00:04:39.470
This works great with something
like an endless runner.

00:04:39.470 --> 00:04:41.261
You're not even looking
down at your phone.

00:04:41.261 --> 00:04:43.840
You're just swiping
left and right and up.

00:04:43.840 --> 00:04:47.122
And then it has minimum
to almost nonexistent look

00:04:47.122 --> 00:04:48.580
fatigue, because
players don't even

00:04:48.580 --> 00:04:52.070
need to look down
on their phone.

00:04:52.070 --> 00:04:55.430
Next up is gyroscope and
accelerometer-- very,

00:04:55.430 --> 00:04:57.850
very intuitive, really
nice in party games

00:04:57.850 --> 00:05:00.390
where everyone is flailing
their phone around in the living

00:05:00.390 --> 00:05:01.120
room.

00:05:01.120 --> 00:05:03.260
And everyone knows
that steer your phone

00:05:03.260 --> 00:05:05.880
is equal to steering
a car in a game.

00:05:05.880 --> 00:05:08.850
Everyone knows that.

00:05:08.850 --> 00:05:11.300
Third up is targeted
touch input,

00:05:11.300 --> 00:05:13.010
which we talked about a bit.

00:05:13.010 --> 00:05:16.220
You're targeting specific
items on the phone screen.

00:05:16.220 --> 00:05:20.110
And this could be good for a lot
of experiences, such as a board

00:05:20.110 --> 00:05:21.760
game, a card game.

00:05:21.760 --> 00:05:23.260
But obviously, you
don't want people

00:05:23.260 --> 00:05:25.420
to look down on their
phone when a lot of action

00:05:25.420 --> 00:05:28.450
is happening on the TV.

00:05:28.450 --> 00:05:30.650
Last but not least
is the microphone--

00:05:30.650 --> 00:05:31.950
very underutilized.

00:05:31.950 --> 00:05:33.180
Anyone agrees?

00:05:33.180 --> 00:05:35.582
Very underutilized
in games today.

00:05:35.582 --> 00:05:37.790
I really would like to see
party games where everyone

00:05:37.790 --> 00:05:41.270
is shouting at their phone
and trying to guess stuff

00:05:41.270 --> 00:05:43.775
coming up on the TV.

00:05:43.775 --> 00:05:45.150
And lastly, you
should definitely

00:05:45.150 --> 00:05:48.520
mix and match with all of
these, try and figure out what's

00:05:48.520 --> 00:05:50.990
best for your specific game.

00:05:50.990 --> 00:05:53.400
Driver Speedboat Paradise
is out right now,

00:05:53.400 --> 00:05:56.660
and it has a really great
interaction model where you're

00:05:56.660 --> 00:05:58.480
tilting the phone to
steer a speed boat,

00:05:58.480 --> 00:06:01.665
but then you do swipes on the
screen for different tricks

00:06:01.665 --> 00:06:02.540
with your speed boat.

00:06:02.540 --> 00:06:03.240
It's a lot of fun.

00:06:03.240 --> 00:06:04.364
You guys should try it out.

00:06:06.870 --> 00:06:11.140
Now, let's do a quick technical
overview of everything

00:06:11.140 --> 00:06:13.820
involved with the Cast games.

00:06:13.820 --> 00:06:16.230
So there are two ways
to use Cast games

00:06:16.230 --> 00:06:19.250
and to build your games
for Cast or Cast enable it.

00:06:19.250 --> 00:06:22.590
The simplest one
is to use an HTML5

00:06:22.590 --> 00:06:25.150
and use Game Manager
for multiplayer-- so web

00:06:25.150 --> 00:06:28.720
applications that are run on
the receiver or the Google Cast

00:06:28.720 --> 00:06:29.790
device.

00:06:29.790 --> 00:06:32.110
More advanced-- and
probably more interesting--

00:06:32.110 --> 00:06:34.570
way is remote
display, where you can

00:06:34.570 --> 00:06:37.190
use the full power
of your device

00:06:37.190 --> 00:06:41.090
to render frames on the GPU
and broadcast them to the TV.

00:06:41.090 --> 00:06:43.870
This ends up being a very high
quality gaming experience,

00:06:43.870 --> 00:06:47.520
because you're using a very
powerful device that is already

00:06:47.520 --> 00:06:49.950
in your pocket.

00:06:49.950 --> 00:06:52.570
A lot of resources
are available for you.

00:06:52.570 --> 00:06:56.220
Google Games Hub is
developers.google.com/games.

00:06:56.220 --> 00:06:58.570
You can find all of these
resources that will help you

00:06:58.570 --> 00:07:00.220
in building games in general.

00:07:00.220 --> 00:07:02.930
But I won't be covering
these, because we're

00:07:02.930 --> 00:07:06.130
going to focus on Cast
games specifically.

00:07:06.130 --> 00:07:08.730
And the resources for those
are in the developer page

00:07:08.730 --> 00:07:10.440
specifically for Cast.

00:07:10.440 --> 00:07:14.540
You have the Cast SDK,
the Cast Game Manager API.

00:07:14.540 --> 00:07:17.610
And then for remote display,
you have the remote display API

00:07:17.610 --> 00:07:20.630
and the plugin that
we built for Unity.

00:07:20.630 --> 00:07:24.370
I'll cover those more in a bit.

00:07:24.370 --> 00:07:26.830
So the Cast SDK itself
is the foundation

00:07:26.830 --> 00:07:28.770
for all of our offerings.

00:07:28.770 --> 00:07:31.380
All apps involve something
like a device discovery

00:07:31.380 --> 00:07:36.280
phase, a selection phase, and
all is handled by the Cast SDK.

00:07:36.280 --> 00:07:39.800
Cast SDK can also optionall
load an HTML5 page,

00:07:39.800 --> 00:07:44.420
and HTML5 game for the
Google Cast device.

00:07:44.420 --> 00:07:48.780
The Game Manager leverages the
Cast SDK to use the Google Cast

00:07:48.780 --> 00:07:50.530
device as a hub.

00:07:50.530 --> 00:07:53.410
Basically, it's going to
help you do communication,

00:07:53.410 --> 00:07:56.870
synchronization across multiple
devices that are connected

00:07:56.870 --> 00:08:00.820
to a single Google Cast device.

00:08:00.820 --> 00:08:04.140
Remote display, which I
had just mentioned as well,

00:08:04.140 --> 00:08:06.650
renders frames on the
GPU, broadcasts them

00:08:06.650 --> 00:08:09.650
to the TV for a high
quality game experience.

00:08:09.650 --> 00:08:12.170
Generally, you're going
to be rendering a local UI

00:08:12.170 --> 00:08:14.480
from controls on
your sender device,

00:08:14.480 --> 00:08:18.020
and then stream a gameplay
scene up to the TV.

00:08:18.020 --> 00:08:22.890
You usually add this to the
game engine rendering pipeline.

00:08:22.890 --> 00:08:26.800
And this is definitely
loading an HTML5 page,

00:08:26.800 --> 00:08:28.980
so keep that in mind.

00:08:28.980 --> 00:08:31.860
We've also built a
plug-in for Unity.

00:08:31.860 --> 00:08:33.809
This includes a
simulator, so it's

00:08:33.809 --> 00:08:37.010
going to help you iterate fast
and build games really fast.

00:08:37.010 --> 00:08:39.750
You don't actually have
to build onto a device

00:08:39.750 --> 00:08:42.380
to test your game out.

00:08:42.380 --> 00:08:44.380
And it also includes
a sample UI.

00:08:44.380 --> 00:08:46.970
And we've also built
a full, open source

00:08:46.970 --> 00:08:49.410
sample that's available
on the Unity Asset store

00:08:49.410 --> 00:08:51.070
to help you get started.

00:08:51.070 --> 00:08:54.070
So you're basically going to
focus your time on game design,

00:08:54.070 --> 00:08:57.840
polishing that
two-screen experience.

00:08:57.840 --> 00:09:00.090
So how do these apps work?

00:09:00.090 --> 00:09:03.240
There's three parts to consider.

00:09:03.240 --> 00:09:06.530
The first piece is the
sender, AKA your phone.

00:09:06.530 --> 00:09:10.800
It's the secondary screen to
the big screen experience.

00:09:10.800 --> 00:09:13.470
The receiver, or the
Google Cast device,

00:09:13.470 --> 00:09:17.190
that is the big screen
experience, and the app

00:09:17.190 --> 00:09:20.010
ID, which points to the
application to show content

00:09:20.010 --> 00:09:21.190
on the receiver.

00:09:21.190 --> 00:09:24.050
Now, as a developer, you
have to register your app ID

00:09:24.050 --> 00:09:25.880
at the developer console site.

00:09:25.880 --> 00:09:30.710
And it has information on how to
run your app on the Google Cast

00:09:30.710 --> 00:09:33.520
device itself, whether
it has to fetch a URL

00:09:33.520 --> 00:09:36.760
or run a remote display of it.

00:09:36.760 --> 00:09:41.160
So the Cast SDK, as I said,
takes care of device discovery

00:09:41.160 --> 00:09:43.740
to find all the Cast
devices on your network.

00:09:43.740 --> 00:09:48.310
Your app will get callbacks
if that device list changes.

00:09:48.310 --> 00:09:52.430
Once a device is discovered,
we can show the Cast icon.

00:09:52.430 --> 00:09:53.650
We tap the Cast icon.

00:09:53.650 --> 00:09:55.650
You're going to see a
list of all the devices

00:09:55.650 --> 00:09:56.760
that are available.

00:09:56.760 --> 00:09:58.410
And now this is
tied to the app ID.

00:09:58.410 --> 00:10:01.400
The app ID will allow us
to filter out any devices

00:10:01.400 --> 00:10:02.650
that we don't care about.

00:10:02.650 --> 00:10:04.070
So if we're building
a video app,

00:10:04.070 --> 00:10:06.930
we're not going to show
Chromecast audio in there.

00:10:06.930 --> 00:10:09.060
And this can also be
used for whitelisting

00:10:09.060 --> 00:10:13.980
when your game is private and
it's still in development mode.

00:10:13.980 --> 00:10:17.780
Once a device is selected,
the receiver device

00:10:17.780 --> 00:10:21.130
basically fetches the URL-- if
we're doing a web application,

00:10:21.130 --> 00:10:24.230
fetches the URL that is
attached to the app ID,

00:10:24.230 --> 00:10:26.400
starts the session
on the receiver,

00:10:26.400 --> 00:10:28.220
and then tells the
sender that the session

00:10:28.220 --> 00:10:30.690
is ready and ready
to communicate

00:10:30.690 --> 00:10:34.100
and send and receive commands.

00:10:34.100 --> 00:10:35.790
So let's say a web
application is now

00:10:35.790 --> 00:10:39.290
running on the receiver,
an HTML5 web application.

00:10:39.290 --> 00:10:41.850
The Cast SDK
provides the session.

00:10:41.850 --> 00:10:44.200
They can exchange messages,
and these messages

00:10:44.200 --> 00:10:48.160
can be customized-- something
like movement in a game.

00:10:48.160 --> 00:10:52.500
And then the Cast SDK is going
to sync the information, track

00:10:52.500 --> 00:10:56.280
of player states and everything,
and sync it back to the sender.

00:10:56.280 --> 00:10:58.110
Now, if you're looking
at multiplayer,

00:10:58.110 --> 00:10:59.950
that's where the
game manager comes in

00:10:59.950 --> 00:11:02.920
for [INAUDIBLE] applications.

00:11:02.920 --> 00:11:05.600
Basically, the setup
for the first sender

00:11:05.600 --> 00:11:07.800
is exactly the same as
we've just described.

00:11:07.800 --> 00:11:10.500
It's the exact same
process, except the session

00:11:10.500 --> 00:11:14.730
is specifically a game manager
game session that is running.

00:11:14.730 --> 00:11:17.920
For the second sender, it's
also a very similar experience.

00:11:17.920 --> 00:11:20.470
However, instead of
hijacking the receiver

00:11:20.470 --> 00:11:24.050
and running a new application
or fetching a new URL,

00:11:24.050 --> 00:11:27.080
you're simply joining a
preexisting game manager

00:11:27.080 --> 00:11:28.090
session.

00:11:28.090 --> 00:11:30.920
And now, basically,
Game Manager API

00:11:30.920 --> 00:11:34.326
syncs player states,
updates both senders,

00:11:34.326 --> 00:11:35.700
and does everything
that you need

00:11:35.700 --> 00:11:39.120
to do in a multiplayer game.

00:11:39.120 --> 00:11:41.920
Now let's take a look
at remote display.

00:11:41.920 --> 00:11:45.310
So remote display uses the
power of the GPU for gameplay.

00:11:45.310 --> 00:11:48.670
Effectively, it's really
sending video to the receiver

00:11:48.670 --> 00:11:51.710
and rendering all the
frames on the phone.

00:11:51.710 --> 00:11:54.820
This does not load a web
application on the receiver.

00:11:54.820 --> 00:11:58.470
The sender is only streaming
images and audio frames

00:11:58.470 --> 00:12:01.570
to the receiver.

00:12:01.570 --> 00:12:04.570
The game engine is responsible
for both screens-- the Sender

00:12:04.570 --> 00:12:06.390
screen and the TV screen.

00:12:06.390 --> 00:12:09.440
Usually, as I said, it's
a UI on the small screen,

00:12:09.440 --> 00:12:12.700
and then the gameplay is
seen on the TV screen.

00:12:12.700 --> 00:12:15.760
And the remote display API
is encoding and transmitting

00:12:15.760 --> 00:12:17.760
frames provided by your game.

00:12:17.760 --> 00:12:19.420
Effectively, the
bigger screen is

00:12:19.420 --> 00:12:22.100
acting like a secondary
screen to your phone.

00:12:22.100 --> 00:12:24.280
You can also think about
it as if you're connected

00:12:24.280 --> 00:12:26.990
through HDMI over Wi-Fi.

00:12:26.990 --> 00:12:30.600
And we're taking advantage
of the Google Cast device

00:12:30.600 --> 00:12:33.360
decoding capabilities, the
hardware decoding capabilities,

00:12:33.360 --> 00:12:36.870
to have a smoother and high
quality experience for gaming.

00:12:36.870 --> 00:12:39.960
And it works really well.

00:12:39.960 --> 00:12:42.960
Some great examples
of this is the sample.

00:12:42.960 --> 00:12:44.690
The Google Cast
Remote Display Sample

00:12:44.690 --> 00:12:46.840
is available on the
Unity Asset store.

00:12:46.840 --> 00:12:50.560
It looks really good, plays
really well on the TV,

00:12:50.560 --> 00:12:52.970
and it has a nice
dual analog control

00:12:52.970 --> 00:12:56.810
scheme on your phone
so you can experience

00:12:56.810 --> 00:12:59.470
this different
control scheme as well

00:12:59.470 --> 00:13:03.910
as how games react and
look on a bigger screen TV.

00:13:03.910 --> 00:13:06.040
Out right now from
Hasbro is Risk.

00:13:06.040 --> 00:13:10.330
It's the best version
of Risk available by far

00:13:10.330 --> 00:13:11.300
on a mobile phone.

00:13:11.300 --> 00:13:13.590
I highly suggest
you guys try it.

00:13:13.590 --> 00:13:15.070
I've already played
with friends.

00:13:15.070 --> 00:13:19.970
And it became so
competitive, we had to stop.

00:13:19.970 --> 00:13:21.790
Another game is
Angry Birds Friends.

00:13:21.790 --> 00:13:23.280
It's so much fun.

00:13:23.280 --> 00:13:26.520
They have a really nice control
scheme where you're basically

00:13:26.520 --> 00:13:28.680
dragging on your phone,
and you don't even

00:13:28.680 --> 00:13:31.330
have to look down
the whole time.

00:13:31.330 --> 00:13:33.190
Just Dance Now-- it's dancing.

00:13:33.190 --> 00:13:35.290
Who doesn't like dancing?

00:13:35.290 --> 00:13:37.640
You're using your
phone to move around,

00:13:37.640 --> 00:13:41.210
and it's been doing
tremendously well.

00:13:41.210 --> 00:13:44.050
So we're very excited to see
what you guys come up with,

00:13:44.050 --> 00:13:46.040
and we hope that similar
to how some of you

00:13:46.040 --> 00:13:49.100
created the best experiences
on mobile devices,

00:13:49.100 --> 00:13:51.960
you create the next set
of intimate experiences

00:13:51.960 --> 00:13:53.220
in the living room.

00:13:53.220 --> 00:13:56.290
Here are all the resources
back up again for reference.

00:13:56.290 --> 00:13:59.047
And for any questions, please
find me after the talk,

00:13:59.047 --> 00:14:00.380
and I'll be happy to answer any.

00:14:00.380 --> 00:14:02.430
Thank you.

00:14:02.430 --> 00:14:05.480
[APPLAUSE]

