WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.419
KUAN YONG: All right.

00:00:02.969 --> 00:00:05.540
Welcome everybody to our talk
on YouTube API Uploads.

00:00:06.620 --> 00:00:07.859
My name is Kuan.

00:00:07.859 --> 00:00:11.299
I'm the Product Manager for the
YouTube Developer Platform.

00:00:11.299 --> 00:00:14.709
And, together with the Jeff on
the Developer Relationship Team

00:00:14.709 --> 00:00:17.599
and Gareth on our Engineering
Team, we're going to spend the

00:00:17.599 --> 00:00:21.310
next 40, 45 minutes or so,
going over all of the different

00:00:21.310 --> 00:00:24.780
ways that you can use our API
to upload videos to YouTube.

00:00:26.119 --> 00:00:29.709
So, before we move on any
further, this is the wave link.

00:00:29.709 --> 00:00:31.349
And, you know, if you want to
open up that in your browser,

00:00:31.349 --> 00:00:34.469
take notes, post questions, and
we'll get to as many of them as

00:00:34.469 --> 00:00:39.610
possible at the end
of the session.

00:00:39.610 --> 00:00:41.020
Alright, a quick show of hands.

00:00:41.020 --> 00:00:41.540
How many of you
guys -- I'm sorry?

00:00:41.540 --> 00:00:44.700
AUDIENCE: [INAUDIBLE]

00:00:44.700 --> 00:00:44.766
KUAN YONG:

00:00:44.766 --> 00:00:48.910
-- or you can go to the
main I/O page for wave.

00:00:48.910 --> 00:00:51.397
And, it's got links to all
the different waves that

00:00:51.397 --> 00:00:54.220
are set up for the talks.

00:00:55.510 --> 00:00:58.090
Alright cool.

00:00:58.090 --> 00:00:59.040
So, a quick show of hands.

00:00:59.040 --> 00:01:01.100
How many of you guys have ever
uploaded a video to YouTube?

00:01:01.100 --> 00:01:02.490
Oh wow.

00:01:02.490 --> 00:01:05.020
That's kind of more
than I expected.

00:01:05.180 --> 00:01:08.630
And, how many of you guys
have done so using the API?

00:01:09.090 --> 00:01:10.380
Very impressive.

00:01:10.650 --> 00:01:13.210
Well, the goal is of your
kind of familiarity level

00:01:13.210 --> 00:01:15.330
with the YouTube API.

00:01:15.330 --> 00:01:18.570
We hope that this session will
be useful to you, because we

00:01:18.570 --> 00:01:23.610
are going to go through a lot
of the common upload flows.

00:01:23.610 --> 00:01:27.610
For example, uploading from a
website, a web app, uploading

00:01:27.610 --> 00:01:28.270
from a client app.

00:01:28.270 --> 00:01:32.430
We're also going to talk about
new resumable upload API, which

00:01:32.430 --> 00:01:37.080
will let you upload, you know,
huge multi-gigabyte files

00:01:37.080 --> 00:01:38.510
in a reliable way.

00:01:39.030 --> 00:01:41.720
Potentially, over a flaky
internet connection, so mobile

00:01:41.720 --> 00:01:43.874
connection would be a good
example, and we'll show

00:01:43.874 --> 00:01:45.650
you how to do that.

00:01:45.650 --> 00:01:48.070
We'll also talk about best
practices for uploading

00:01:48.070 --> 00:01:52.930
metadata that goes with your
video at upload time, bearing

00:01:52.930 --> 00:01:56.560
in mind in some situations, the
best practices is to not give

00:01:56.560 --> 00:01:58.740
us any metadata at all.

00:01:58.740 --> 00:02:02.670
And, we'll talk about different
ways in which you can do that.

00:02:02.670 --> 00:02:05.610
We'll also cover writing
upload apps for both

00:02:05.610 --> 00:02:06.370
Android and the iPhone.

00:02:07.960 --> 00:02:12.989
And, we'll wrap up by doing a
little discussion on our

00:02:12.989 --> 00:02:17.269
flagship Open Source video
moderation and hosting

00:02:17.269 --> 00:02:20.750
platform, that we built
entirely on top of the YouTube

00:02:20.750 --> 00:02:22.880
APIs, and it runs on
Google App Engine.

00:02:22.880 --> 00:02:27.919
And, we call that
YouTube Direct.

00:02:27.919 --> 00:02:30.889
So, you know, why are we having
this talk in the first place.

00:02:30.889 --> 00:02:32.609
Basically, we want
your content.

00:02:32.609 --> 00:02:36.320
So, if you're building any sort
of app, any sort of service

00:02:36.320 --> 00:02:39.670
that deals with videos, we'll
like you think of YouTube as

00:02:39.670 --> 00:02:42.290
kind of your general
purpose video hosting

00:02:42.290 --> 00:02:43.759
platform in a cloud.

00:02:43.759 --> 00:02:45.949
Our APIs have been around
for many years now.

00:02:45.949 --> 00:02:46.759
They're stable.

00:02:46.759 --> 00:02:49.199
And, we continue to
improve upon them.

00:02:49.199 --> 00:02:53.189
You may have heard a stat that
some 24 hours of videos are

00:02:53.189 --> 00:02:55.719
uploaded to YouTube every
minute, but API accounts

00:02:55.719 --> 00:02:57.669
for over 3 of those hours.

00:02:57.669 --> 00:03:00.319
So, that's a lot of video
conten that's flowing

00:03:00.319 --> 00:03:03.669
through the APIs.

00:03:03.669 --> 00:03:05.219
There's one thing that you're
going to hear over and over

00:03:05.219 --> 00:03:08.139
again during this presentation,
is that you should always let

00:03:08.139 --> 00:03:11.819
your users upload their videos
to their own YouTube account.

00:03:12.790 --> 00:03:16.090
YouTube is really not set up
for the use case, where you

00:03:16.090 --> 00:03:20.060
create this mega-account, and
have all you users dump content

00:03:20.060 --> 00:03:21.449
into that one account.

00:03:22.059 --> 00:03:24.589
If you do that, your app will
never be able to scale, that

00:03:24.589 --> 00:03:27.099
there's a limit on how many
videos can go into any single

00:03:27.099 --> 00:03:28.489
want one YouTube account.

00:03:28.489 --> 00:03:30.669
And, also you might want to
have to think about the

00:03:30.669 --> 00:03:33.159
different product and legal
issues that could come up,

00:03:33.159 --> 00:03:36.040
because your kind of asserting
ownership over everything that

00:03:36.040 --> 00:03:37.700
gets uploaded to your
YouTube account.

00:03:38.219 --> 00:03:41.349
And, in many cases, that's not
really what you want to do.

00:03:41.349 --> 00:03:45.339
So, always let users upload
videos to their account.

00:03:45.339 --> 00:03:46.439
We support OWA.

00:03:46.439 --> 00:03:50.509
You know, there's really no
excuse for you to not do so.

00:03:50.509 --> 00:03:52.929
Some other reminders
for anybody who's

00:03:52.929 --> 00:03:54.709
using on the APIs.

00:03:54.709 --> 00:03:57.509
If you're going to be sending
us requests, it's just polite

00:03:57.509 --> 00:04:00.079
to identify yourself
in every request.

00:04:00.079 --> 00:04:00.439
Right now.

00:04:00.439 --> 00:04:03.129
We require a developer key
only when you're going

00:04:03.129 --> 00:04:04.729
a write operation.

00:04:04.729 --> 00:04:07.540
But, as a best practice, we
recommend sending us a

00:04:07.540 --> 00:04:09.749
developer key with
every request.

00:04:09.749 --> 00:04:13.419
Videos uploaded to YouTube can
only be up to ten minutes long.

00:04:13.419 --> 00:04:16.430
But, if you are developing a
service for one of our official

00:04:16.430 --> 00:04:21.530
content partners, this
limit may not apply to you.

00:04:21.530 --> 00:04:24.539
Always give us your videos in
the highest possible quality.

00:04:24.539 --> 00:04:26.770
You know, the original
source format.

00:04:26.770 --> 00:04:28.909
Right now on YouTube,
we're encoding all of

00:04:28.909 --> 00:04:31.110
our videos up to 10 ADP.

00:04:31.110 --> 00:04:34.384
But, in the future if should
we decide to offer a high

00:04:34.384 --> 00:04:37.249
resolution format, we do
actually go back to our video

00:04:37.249 --> 00:04:39.549
catalog and re-process
all those videos.

00:04:39.549 --> 00:04:42.114
So, if you want to future proof
your videos on YouTube, you

00:04:42.114 --> 00:04:44.660
know, if you wanted your videos
to look great on that Google TV

00:04:44.660 --> 00:04:47.559
device we announced this
morning, you know, you want to

00:04:47.559 --> 00:04:49.729
make sure that you're giving us
the highest quality

00:04:49.729 --> 00:04:52.509
possible content.

00:04:52.509 --> 00:04:56.139
Finally, just note that as with
all the API requests, upload

00:04:56.139 --> 00:04:57.590
requests are rate limited.

00:04:57.590 --> 00:05:00.430
And, this may come up if you're
trying to do a bulk migration

00:05:00.430 --> 00:05:02.360
of a whole bunch of
videos into YouTube.

00:05:03.179 --> 00:05:06.239
And, a simple strategy that we
recommend for doing so, is to,

00:05:06.239 --> 00:05:08.440
you know, upload as
fast as you can.

00:05:08.440 --> 00:05:11.349
And, if you get a quota error,
simply just back off, do

00:05:11.349 --> 00:05:13.020
nothing for 10 minutes,
and then resume.

00:05:14.580 --> 00:05:17.180
And, it's a real easy
way to kind of manage

00:05:17.180 --> 00:05:18.889
your usage quotas.

00:05:18.889 --> 00:05:21.729
Alright, so Jeff will now tell
us -- tell you guys more about

00:05:21.729 --> 00:05:23.479
how to upload from a web app.

00:05:25.909 --> 00:05:26.309
JEFFREY POSNICK: Cool.

00:05:26.309 --> 00:05:27.560
Thanks very much Kuan.

00:05:28.139 --> 00:05:31.710
So, the first form of YouTube
API App, we can talked about

00:05:31.710 --> 00:05:34.039
is browser-based uploads.

00:05:34.039 --> 00:05:37.650
And, browser-based uploads are
perfect for the scenario

00:05:37.650 --> 00:05:41.240
in which you have a web
application, and you want to

00:05:41.240 --> 00:05:44.230
allow users to upload videos to
YouTube from within the context

00:05:44.230 --> 00:05:45.989
of that web application.

00:05:46.759 --> 00:05:48.559
Browser-based uploads and all
the other stuff we're going to

00:05:48.559 --> 00:05:52.999
talk about are documented fully
in the YouTube API section

00:05:52.999 --> 00:05:53.680
of Code.Google.com.

00:05:55.219 --> 00:05:57.899
So, all the new gritty
details are there.

00:05:57.899 --> 00:06:00.409
But, I'm going to give you kind
of a high level of review,

00:06:00.409 --> 00:06:01.929
of how that's done.

00:06:01.929 --> 00:06:06.889
So, browser-based uploads
work in a two-step process.

00:06:06.949 --> 00:06:12.060
The first step involves a post
to specific well defined URL.

00:06:13.079 --> 00:06:16.189
That post will normally
include all the metadata

00:06:16.189 --> 00:06:17.159
about the video.

00:06:17.939 --> 00:06:20.759
You know, we'll talk a little
bit more about kind of

00:06:20.759 --> 00:06:23.069
incomplete metadata or
no metadata scenario.

00:06:23.069 --> 00:06:25.379
But, you know, any of those
cases you're gonna have

00:06:25.379 --> 00:06:27.389
to do an initial post.

00:06:27.389 --> 00:06:31.419
What you get back from that
post is a unique pretty much a

00:06:31.419 --> 00:06:37.029
security token, and a URL that
you will end up using to do the

00:06:37.029 --> 00:06:39.779
actual upload of
the video data.

00:06:39.779 --> 00:06:40.699
And, so, you know, it

00:06:40.699 --> 00:06:43.369
could be potentially a
very large video file.

00:06:43.879 --> 00:06:47.469
It's worth noting in this
scenario, the user selects a

00:06:47.469 --> 00:06:51.090
file locally from their hard
drive, and their upload

00:06:51.090 --> 00:06:52.689
directly to YouTube servers.

00:06:52.689 --> 00:06:57.169
So, you know, user might be
uploading 500 megabytes, but

00:06:57.169 --> 00:07:00.259
you don't actually have to, you
know, store that 500 megabytes

00:07:00.259 --> 00:07:03.600
somewhere locally temporarily
on your servers.

00:07:03.600 --> 00:07:05.080
It's just going
directly to YouTube.

00:07:05.199 --> 00:07:06.819
So, it scales pretty well.

00:07:06.819 --> 00:07:08.409
And, that's the case.

00:07:08.409 --> 00:07:12.749
And, the way the actual file
upload is done is really pretty

00:07:12.749 --> 00:07:14.909
much a simple HTML form post.

00:07:15.870 --> 00:07:21.139
You know, form contains an
action element, and that action

00:07:21.139 --> 00:07:22.950
element -- sorry action
attribute, and that would

00:07:22.950 --> 00:07:25.310
be the URL that you get
back from the first up.

00:07:25.310 --> 00:07:27.889
That's a unique URL.

00:07:27.889 --> 00:07:31.280
And, it will have file elements
in which a person would have

00:07:31.280 --> 00:07:32.610
selected the local file.

00:07:32.610 --> 00:07:35.740
And, it will have a token,
which is just another -- in

00:07:35.740 --> 00:07:38.139
addition to the unique URL --
it's just another way that we

00:07:38.139 --> 00:07:40.620
make sure that you're actually
uploading on behalf of the

00:07:40.620 --> 00:07:43.819
user that you say you are.

00:07:43.819 --> 00:07:45.879
So, I'm going to show
you an example of

00:07:45.879 --> 00:07:46.789
that in a little bit.

00:07:46.789 --> 00:07:50.750
I just want to mention and
reinforce something that you're

00:07:50.750 --> 00:07:53.060
going to hear a lot, which is
there's really no excuse

00:07:53.060 --> 00:07:56.840
in this case not to use
either AuthSub or OAuth.

00:07:58.789 --> 00:08:01.770
AuthSub and OAuth are very
similar in their purpose.

00:08:01.770 --> 00:08:06.319
And, basically what it'll let
you do is obtain credentials to

00:08:06.319 --> 00:08:10.120
upload videos or to take any
action on behalf

00:08:10.120 --> 00:08:12.129
of a given user.

00:08:12.759 --> 00:08:14.389
And, it will allow you to do
that without actually having

00:08:14.389 --> 00:08:18.879
to request the users log
in name or password.

00:08:19.279 --> 00:08:22.559
You know, obviously, nobody out
here, and nobody watching this

00:08:22.559 --> 00:08:25.650
would write malicious
applications.

00:08:25.650 --> 00:08:28.840
And, you know, do anything
nasty with people's

00:08:28.840 --> 00:08:29.680
usernames and passwords.

00:08:30.029 --> 00:08:33.880
But, we really feel better if
the user name and passwords

00:08:33.880 --> 00:08:36.690
get entered on webpages
that are hosted by Google.

00:08:37.000 --> 00:08:41.119
And, what you'll actually do is
get back a token that you could

00:08:41.119 --> 00:08:44.160
use pretty much indefinitely
to make requests on

00:08:44.160 --> 00:08:44.900
that users behalf.

00:08:44.900 --> 00:08:49.690
And, I'll walk you through that
process, right now actually.

00:08:49.690 --> 00:08:53.920
So, I have a couple of
examples, one example that has

00:08:53.920 --> 00:08:57.300
both the source code and a log
demo that I'm going to pull up.

00:08:57.400 --> 00:09:00.390
In this particular case, it's
doing browser-based uploads

00:09:00.390 --> 00:09:04.240
from the context of an
ActionScript 3 Flash

00:09:04.240 --> 00:09:07.590
application, which is kind of
cool, and it actually makes use

00:09:07.590 --> 00:09:12.320
of ActionScript 3' support for
AuthSub, which we just recent

00:09:12.320 --> 00:09:14.570
-- about 6 months
ago announced.

00:09:15.130 --> 00:09:17.270
So, it might be something that
you haven't seen before.

00:09:17.920 --> 00:09:21.000
It's certainly something
that seems to be a

00:09:21.000 --> 00:09:21.700
common enough scenario.

00:09:21.700 --> 00:09:25.170
We worked with a lot of
advertisors, the who write

00:09:25.170 --> 00:09:28.520
stuff in ActionScript, and
might want to solicit

00:09:28.520 --> 00:09:30.490
uploads to YouTube.

00:09:30.620 --> 00:09:32.619
And, this is kind of good
reference code for that.

00:09:33.140 --> 00:09:35.580
But, it also is just a
good general purpose

00:09:35.580 --> 00:09:37.380
explanation on how to do
browser-based uploads.

00:09:37.380 --> 00:09:40.670
So, I'm going to
pull up that TEMPO.

00:09:40.670 --> 00:09:43.480
Things are a little
small on the screen.

00:09:43.480 --> 00:09:43.870
So pardon that.

00:09:43.870 --> 00:09:46.790
But, cool things I wan to
show you at least are the

00:09:46.790 --> 00:09:47.530
AuthSub user for that sign.

00:09:47.790 --> 00:09:50.730
And, that gets initiated by
clicking on the login button.

00:09:51.790 --> 00:09:55.940
I happend to already be signed
in to my YouTube/Google

00:09:55.940 --> 00:09:57.650
accounts at this point.

00:09:57.650 --> 00:09:58.200
Right over here.

00:09:58.200 --> 00:10:00.899
But, if I weren't it would
ask me to initially enter

00:10:00.899 --> 00:10:02.610
my username and password.

00:10:03.700 --> 00:10:06.010
Because I'm already signed in,
it takes me directly to the

00:10:06.010 --> 00:10:09.230
second step in the AuthSub
process, which is authorizing

00:10:09.230 --> 00:10:13.130
access to the target
webpage for my accounts.

00:10:13.290 --> 00:10:15.900
In this particular case, I
haven't registered ahead

00:10:15.900 --> 00:10:20.320
of time hum for this
particular shockwave file.

00:10:20.320 --> 00:10:23.370
And, that means you'll
see a little bit of a

00:10:23.370 --> 00:10:24.900
scary warning message.

00:10:24.900 --> 00:10:27.090
But, we'll talk a little bit
later, and I'll show you an

00:10:27.090 --> 00:10:31.150
example little bit later about
registering and the type of

00:10:31.150 --> 00:10:33.140
message you'll see
in that scenario.

00:10:33.140 --> 00:10:36.310
In any case, I do trust this
application, so, I'm going

00:10:36.310 --> 00:10:37.630
to click allow access.

00:10:38.800 --> 00:10:42.870
And, a re-direction is
done back to the flash

00:10:42.870 --> 00:10:43.300
content that we have.

00:10:43.300 --> 00:10:46.170
And, you can see up here it
says that I'm logged in

00:10:46.170 --> 00:10:48.940
now with my account.

00:10:48.940 --> 00:10:55.000
So, click upload at this
point, very simple example.

00:10:55.000 --> 00:10:58.570
I choose a movie file that I
prepared for the purpose.

00:10:58.570 --> 00:11:02.360
And, should hopefully happen
very quickly, the file

00:11:02.360 --> 00:11:03.530
upload successfully.

00:11:03.530 --> 00:11:07.420
For where a much larger file
you'd actually be able to see

00:11:07.420 --> 00:11:10.410
on the status message printed
out of every x number of bytes.

00:11:10.410 --> 00:11:12.890
I'm not exactly sure
how it's calculate.

00:11:12.890 --> 00:11:18.130
But, because we're using the
flash plug-in basically to do

00:11:18.130 --> 00:11:22.560
the upload on our behalf, the
flash plug-in exposes nice

00:11:22.560 --> 00:11:26.230
events whenever x percent of
the upload has completed.

00:11:26.230 --> 00:11:30.120
So, you actually can provide
some feedback to your users

00:11:30.120 --> 00:11:33.660
as to how far along the
upload process you are.

00:11:34.300 --> 00:11:37.430
So, that was, you know,
what you users might see.

00:11:37.430 --> 00:11:40.010
And, it was a very,
very simple example.

00:11:40.010 --> 00:11:41.240
It didn't actually ask
for any metadata.

00:11:41.240 --> 00:11:43.560
We had some hardcore
metadata in this case.

00:11:43.560 --> 00:11:48.030
But, I'm just going to walk you
through some of the relevant

00:11:48.030 --> 00:11:50.620
portions of that code
to illustrate the

00:11:50.620 --> 00:11:51.570
different processes.

00:11:51.570 --> 00:11:55.200
So, this is actually the first
step that we talked about.

00:11:55.200 --> 00:11:58.400
This gets triggered after
you select a file.

00:11:58.400 --> 00:12:03.320
And it is responsible for
sending the initial metadata

00:12:03.320 --> 00:12:05.500
to the browser-based
upload's endpoint.

00:12:05.500 --> 00:12:08.369
And, it's going to get back a
response that has a token, and

00:12:08.369 --> 00:12:09.519
we'll get to that in a second.

00:12:09.519 --> 00:12:12.340
So, I'm just hard coding
some metadata in this case.

00:12:12.980 --> 00:12:16.660
Obviously, I could have just as
easily have written something

00:12:16.660 --> 00:12:21.230
in you flash file, or you know,
in a HTML form that captured

00:12:21.230 --> 00:12:23.259
video title, so and so forth.

00:12:23.259 --> 00:12:27.140
Or, you could have used
incomplete metadata.

00:12:27.140 --> 00:12:29.710
I'm setting a developer tag,
which we'll talk about

00:12:29.710 --> 00:12:30.490
of a little bit.

00:12:34.320 --> 00:12:36.960
And, doing a POST
request to the

00:12:36.960 --> 00:12:37.250
endpoint.

00:12:37.250 --> 00:12:42.440
So, when the post is complete,
this would be fired off.

00:12:42.440 --> 00:12:47.920
What I'm doing here is
just really not even

00:12:47.920 --> 00:12:49.200
using XML parts.

00:12:49.200 --> 00:12:51.590
I'm just using regular
expressions to strip out those

00:12:51.590 --> 00:12:55.000
2 elements from the POST
response that I care about,

00:12:55.000 --> 00:12:58.770
namely the URL to use as, you
know, the next step where

00:12:58.770 --> 00:13:00.350
you upload the file.

00:13:00.350 --> 00:13:04.180
And, the unique token to also
include in our request.

00:13:04.180 --> 00:13:08.829
So, I'm getting both of those
values, and then I'm calling

00:13:08.829 --> 00:13:12.930
the upload file function.

00:13:12.930 --> 00:13:17.930
And, what upload file over here
is doing is just adding in what

00:13:17.930 --> 00:13:21.860
amounts to -- this is kind of
just faking what a forms

00:13:21.860 --> 00:13:23.310
mission would look like.

00:13:24.290 --> 00:13:27.450
So, this is, you know, could
be, you could think about it

00:13:27.450 --> 00:13:29.785
this is the same sort of data
that would be sent if you

00:13:29.785 --> 00:13:32.920
were doing a traditional
browser-based submission.

00:13:32.920 --> 00:13:35.850
So, it's adding in
an extra parameter.

00:13:35.850 --> 00:13:37.180
And, that contains
the upload token.

00:13:37.180 --> 00:13:43.040
And, so using that upload URL
that it previously got from the

00:13:43.040 --> 00:13:45.809
first POST response as the
target for the second

00:13:45.809 --> 00:13:47.870
file upload stage.

00:13:47.870 --> 00:13:52.480
So, this is actually, you know,
create a file reference, and

00:13:52.480 --> 00:13:55.550
you could upload on it, and
that actually accomplishes the

00:13:55.550 --> 00:13:57.300
upload from the context
of ActionScript.

00:13:58.460 --> 00:14:02.650
The complete sample is
available, as, you know, just

00:14:02.650 --> 00:14:03.960
Open Source sample code.

00:14:03.960 --> 00:14:06.570
The links to it are in
the slide, so definitely

00:14:06.570 --> 00:14:07.280
check that out.

00:14:07.280 --> 00:14:10.630
If you're doing any sort of
flash development, or if you

00:14:10.630 --> 00:14:12.680
just want to see an example
of broswer-based uploads.

00:14:12.680 --> 00:14:21.220
So, I'll actually hand
things over to Gareth now.

00:14:21.220 --> 00:14:24.320
GARETH McSORLEY: Thanks Jeff.

00:14:24.320 --> 00:14:24.980
OK.

00:14:24.980 --> 00:14:27.960
So, Jeff has given you some
insight into how you would

00:14:27.960 --> 00:14:30.550
perform uploads from a
browser-based application.

00:14:30.550 --> 00:14:32.610
And, I'm going to tell you
about the 2 upload mechanisms

00:14:32.610 --> 00:14:36.000
we offer for installed
applications primarily.

00:14:36.490 --> 00:14:38.230
The first one is what
we call direct upload.

00:14:38.920 --> 00:14:42.150
I'm going to be skimming over
this one pretty quickly,

00:14:42.150 --> 00:14:45.940
because it's largely been
superseded by the second

00:14:45.940 --> 00:14:48.560
mechanism, resumable.

00:14:48.560 --> 00:14:50.890
So, this is for
installed applications.

00:14:51.830 --> 00:14:56.220
Although, you can also use it
for server side apps, where you

00:14:56.220 --> 00:14:59.140
have access to the video file.

00:14:59.140 --> 00:15:03.140
The direct uploads while in the
surface may seem to be the

00:15:03.140 --> 00:15:04.710
simplest upload mechanism.

00:15:04.710 --> 00:15:06.600
It's a single post.

00:15:06.600 --> 00:15:10.130
It uses the multi-part related
format, which is one of the

00:15:10.130 --> 00:15:12.790
more obscure content types.

00:15:12.790 --> 00:15:15.510
And, it's very picky about
how it's formatted.

00:15:16.100 --> 00:15:19.589
So, it's quite easy to
incorrectly format these

00:15:19.589 --> 00:15:22.480
multi-part related messages,
which is one of the reasons

00:15:22.480 --> 00:15:26.100
why resumable is better.

00:15:26.100 --> 00:15:30.870
And, again you'll see this time
and time again, don't let users

00:15:30.870 --> 00:15:32.880
list uploads into
your own account.

00:15:33.780 --> 00:15:37.400
Always let them use one of the
authentication mechanisms.

00:15:37.400 --> 00:15:40.006
The temptation for installed
applications is to

00:15:40.006 --> 00:15:41.260
use client log in.

00:15:41.260 --> 00:15:44.690
But, we really discourage it
in favor of AuthSub or OAuth.

00:15:45.480 --> 00:15:47.680
Because, it means that you
don't have to handle the users

00:15:47.680 --> 00:15:53.300
credentials, and then there's
no security issues around that.

00:15:53.300 --> 00:15:57.290
Obviously, OAuth and AuthSub do
need a browser, but, you know,

00:15:57.290 --> 00:15:59.980
let's face it you can
get browser enabled

00:15:59.980 --> 00:16:00.780
fridges these days.

00:16:00.780 --> 00:16:06.450
So, it shouldn't be too hard
to do a quick redirect to get

00:16:06.450 --> 00:16:11.330
an AuthSub or OAuth token.

00:16:11.330 --> 00:16:11.595
OK.

00:16:11.595 --> 00:16:13.640
So, I'm going to spend a little
more time talking about

00:16:13.640 --> 00:16:14.840
resumable uploads.

00:16:14.840 --> 00:16:17.170
Especially, since not sp
many of you have done

00:16:17.170 --> 00:16:18.170
an upload with the API.

00:16:18.340 --> 00:16:21.210
If you're going to get
started, this is probably the

00:16:21.210 --> 00:16:23.840
mechanism you should use.

00:16:23.840 --> 00:16:28.690
In terms of use case, it's
identical to direct uploads.

00:16:28.690 --> 00:16:30.640
You're going to use it
primarily for installed.

00:16:30.640 --> 00:16:31.940
Applications.

00:16:31.940 --> 00:16:33.470
But, it's a bit more
like the browser upload

00:16:33.470 --> 00:16:35.520
that Jeff showed you.

00:16:36.740 --> 00:16:41.650
It's a 2 stage process, whereby
you make an initial post.

00:16:41.650 --> 00:16:44.130
You're going to get back a
unique URL for your upload.

00:16:44.130 --> 00:16:48.390
And, you're going to use that
URL to either provide the

00:16:48.390 --> 00:16:50.850
file contents, or query for
the status of the upload.

00:16:54.800 --> 00:16:58.870
Wherever client library support
available use resumable.

00:16:58.920 --> 00:17:02.210
I think at the moment that
means DotNet and Java, but we

00:17:02.210 --> 00:17:06.220
should be rolling out for other
client libraries in the future.

00:17:06.220 --> 00:17:08.490
Even where client library
support isn't unavailable,

00:17:08.490 --> 00:17:10.520
you may want to consider
using resumable anyway.

00:17:13.020 --> 00:17:16.460
As you no doubt noticed from
our keynote yesterday,

00:17:16.460 --> 00:17:19.240
even the best networks can
let you down sometimes.

00:17:19.240 --> 00:17:24.020
And, whether it's, you know,
uploading your superhighway def

00:17:24.020 --> 00:17:28.029
version of Rick Astley, and
having somebody trip over your

00:17:28.029 --> 00:17:31.403
network cable, or trying to
upload your latest cute cat

00:17:31.403 --> 00:17:35.100
video from your phone, a
failed upload is a really

00:17:35.100 --> 00:17:36.360
bad user experience.

00:17:36.360 --> 00:17:39.070
And, resumable gives you a way
of avoiding that, and allowing

00:17:39.070 --> 00:17:42.980
the upload to continue
under those conditions.

00:17:42.980 --> 00:17:46.990
So, it's really perfect for any
mobile devices, or anything

00:17:46.990 --> 00:17:51.140
where you may not have a fully
dependable network connection.

00:17:51.700 --> 00:17:54.960
And, obviously the bigger
the video, the greater the

00:17:54.960 --> 00:18:00.500
payoff in resumable if
something goes wrong.

00:18:00.500 --> 00:18:04.650
So, there is a small sample
script just giving you a

00:18:04.650 --> 00:18:07.890
rough idea of how to do
resumable uploads on

00:18:07.890 --> 00:18:10.210
the Google Code site.

00:18:10.210 --> 00:18:12.840
But, what I'm actually going to
do today is kind of walk you

00:18:12.840 --> 00:18:16.875
through the protocol, just to
give you a feel for how simple

00:18:16.875 --> 00:18:19.060
it actually is to
do this upload.

00:18:20.510 --> 00:18:25.540
If any of you are familiar with
Google Gears, and its resumable

00:18:25.540 --> 00:18:32.220
HTTP protocol, then this will
be very familiar to you.

00:18:32.220 --> 00:18:36.490
So, the opening shot in any
resumable upload is a single

00:18:36.490 --> 00:18:44.520
post request to the URL here,
so the this is uploading to a

00:18:44.520 --> 00:18:45.630
who doesn't exist,
may not exist.

00:18:47.920 --> 00:18:51.970
And, the important points to
know here is the URL starts

00:18:51.970 --> 00:18:55.076
with resumable, that's

00:18:55.076 --> 00:18:56.010
what indicates it's a
resumable upload rather

00:18:56.010 --> 00:18:58.010
than a direct upload.

00:18:58.010 --> 00:19:00.330
And, the content type
is nice and simple,

00:19:00.330 --> 00:19:01.330
it's not multi-part.

00:19:01.330 --> 00:19:03.720
You don't have to format
a complicated body.

00:19:04.040 --> 00:19:07.490
It's just the straight OAuth
XML for the video entries.

00:19:07.630 --> 00:19:12.760
So, in the body of the request,
you put the XML entry

00:19:12.760 --> 00:19:16.100
containing the title and the
description, and so

00:19:16.100 --> 00:19:19.690
on and so forth.

00:19:19.690 --> 00:19:24.350
The response assuming your
original request is good.

00:19:24.350 --> 00:19:27.320
So, we do perform validation
on the original request.

00:19:27.320 --> 00:19:30.760
So, if there's something
wrong with the Atom or

00:19:30.760 --> 00:19:34.410
if your developer key is
invalid, you'll get an

00:19:34.410 --> 00:19:35.240
immediate rejection.

00:19:35.240 --> 00:19:37.289
So, you don't have to waste
your time uploading the

00:19:37.289 --> 00:19:41.300
file, only to find out
something is wrong.

00:19:41.300 --> 00:19:44.080
But, hopefully you've
got an all right, and

00:19:44.080 --> 00:19:45.990
you'll get a 200.

00:19:45.990 --> 00:19:48.200
And, the important part here
is this location header.

00:19:49.160 --> 00:19:53.660
And, the location header
will have this really long

00:19:53.660 --> 00:19:55.370
string of the end of it.

00:19:55.370 --> 00:19:58.640
A really long URL, which
I truncate it here just

00:19:58.640 --> 00:20:01.120
to fit all on a slide.

00:20:01.120 --> 00:20:05.280
And, this is your unique
URL for your upload.

00:20:05.280 --> 00:20:07.160
So, this is where you're going
to send the file, and also

00:20:07.160 --> 00:20:09.720
where you can get information
on the progress of the upload.

00:20:12.330 --> 00:20:14.390
So, the next step is
to actually send

00:20:14.390 --> 00:20:15.350
the final content.

00:20:15.350 --> 00:20:18.309
So, here I'm just going to
try and send an entire

00:20:18.309 --> 00:20:20.180
file in one go.

00:20:20.340 --> 00:20:24.480
So, I used the URL I got
from the previous step.

00:20:24.480 --> 00:20:27.630
And again, we've got nice
simple content type, either

00:20:27.630 --> 00:20:30.360
a video type or just
an octet stream.

00:20:32.270 --> 00:20:32.330
And.

00:20:32.330 --> 00:20:34.980
I just provide the video
file in the body.

00:20:34.980 --> 00:20:40.710
So again, no need to format
any multi-part messages.

00:20:40.710 --> 00:20:44.830
Assuming everything goes
great, you'll get 2001

00:20:44.830 --> 00:20:45.770
created response.

00:20:45.770 --> 00:20:46.000
And, that's it.

00:20:46.000 --> 00:20:49.680
Your videos is live
and in YouTube.

00:20:53.360 --> 00:20:55.950
Now, obviously things
don't work out great.

00:20:55.950 --> 00:21:00.636
So, if you get either a time
out on your connection, or if

00:21:00.636 --> 00:21:06.670
you get a 500 response of some
sort, you can try and

00:21:06.670 --> 00:21:08.870
resume the upload.

00:21:08.870 --> 00:21:11.240
And, the way you do that
is by sending a very

00:21:11.240 --> 00:21:14.030
particular request.

00:21:14.030 --> 00:21:17.140
So, you'll notice it's the same
URL as I was using before --

00:21:17.140 --> 00:21:18.990
when I was sending
the file content.

00:21:18.990 --> 00:21:21.770
But, this time it's
totally empty.

00:21:21.770 --> 00:21:26.440
And, I add this special header,
content range, and the star

00:21:26.440 --> 00:21:30.500
slash star means I'm querying
for the status of the upload.

00:21:30.500 --> 00:21:38.250
Now, if the upload had
completed successfully, then

00:21:38.250 --> 00:21:40.340
what I will get in response
to this, would be

00:21:40.340 --> 00:21:42.250
the same created.

00:21:42.250 --> 00:21:44.410
So, if it was just the case
that you didn't get the

00:21:44.410 --> 00:21:47.350
response, then making the
query would give you back

00:21:47.350 --> 00:21:51.420
the completed response.

00:21:51.420 --> 00:21:55.080
In the event the upload wasn't
complete, then you'll get this

00:21:55.080 --> 00:21:56.340
new response code, the 308.

00:21:56.340 --> 00:22:01.580
And, that tells you that
the server has some of the

00:22:01.580 --> 00:22:03.890
file but not all of it.

00:22:03.890 --> 00:22:05.990
And, the range header's
the interesting part.

00:22:05.990 --> 00:22:17.720
It tells you how many bites
the server received thus far.

00:22:17.720 --> 00:22:20.740
Then you continue by sending
the file content again.

00:22:20.740 --> 00:22:23.910
And, this time we add in a
content range header to tell

00:22:23.910 --> 00:22:27.970
the server what part of the
file I'm actually uploading.

00:22:27.970 --> 00:22:32.380
You have to continue from
the byte immediately after

00:22:32.380 --> 00:22:33.440
the one the server has.

00:22:33.440 --> 00:22:38.539
You can't send
overlapping blots.

00:22:38.539 --> 00:22:43.530
In my earlier example, I tried
to just upload the whole file

00:22:43.530 --> 00:22:47.040
in one go, but you can also use
the content range header

00:22:47.040 --> 00:22:48.310
from the very start.

00:22:48.310 --> 00:22:50.130
And, upload your
file in chunks.

00:22:50.130 --> 00:22:54.580
If it's easier for you for the
file handling, then you can

00:22:54.580 --> 00:22:58.640
just upload it in say 10
megabyte chunks by using the

00:22:58.640 --> 00:23:03.210
content range header from
the very beginning.

00:23:03.210 --> 00:23:07.980
And then, assuming this request
goes through OK, then I'll get

00:23:07.980 --> 00:23:10.100
again the 201 a-one created.

00:23:10.100 --> 00:23:12.720
If there's another
problem, then I can

00:23:12.720 --> 00:23:14.370
try and resume again.

00:23:14.370 --> 00:23:17.410
And, basically from the moment
you start a resumable upload,

00:23:17.410 --> 00:23:20.920
you've got roughly a
day to complete it.

00:23:21.030 --> 00:23:24.530
So, you go plenty of
opportunity to pick up

00:23:24.530 --> 00:23:33.950
even in the worst of
network conditions.

00:23:33.950 --> 00:23:34.850
So, that's a quick look
into the resumable.

00:23:35.740 --> 00:23:39.200
And, now I'm going to give you
a couple of tips and tricks

00:23:39.200 --> 00:23:44.950
for handling metadata
for uploaded videos.

00:23:44.950 --> 00:23:49.139
So, in the past, we had fairly
strict requirements on this

00:23:49.139 --> 00:23:51.940
metadata, you had to provide
us along with the video.

00:23:51.940 --> 00:23:54.920
So, you had to give us a
title, you had to give us a

00:23:54.920 --> 00:23:58.100
description, and you had to
give us some categories.

00:24:00.830 --> 00:24:04.200
There's no way that you can you
can bypass those requirements.

00:24:04.200 --> 00:24:08.510
So, you know, for a mobile
device where you may not want

00:24:08.510 --> 00:24:13.305
to force the user to enter
these details, or just to make

00:24:13.305 --> 00:24:19.915
a nicer upload experience so
the video gets uploaded while

00:24:19.915 --> 00:24:24.230
the user is still typing in the
title and description, that he

00:24:24.230 --> 00:24:30.600
can get his cute kid video
on the web quicker.

00:24:30.600 --> 00:24:34.520
So, you specify this
yt incomplete tag.

00:24:34.520 --> 00:24:38.950
And, this tells YouTube that
the metadata on this video is

00:24:38.950 --> 00:24:40.940
not going to be complete, and
it should be regarded

00:24:40.940 --> 00:24:42.810
as a draft.

00:24:42.810 --> 00:24:46.799
What that means is your video
won't show up in searcher until

00:24:46.799 --> 00:24:51.250
you've gone into the website,
and updated the metadata, or

00:24:51.250 --> 00:24:53.230
updated it through the API.

00:24:53.230 --> 00:24:55.800
But, the video itself will
still be uploaded, and

00:24:55.800 --> 00:24:59.000
it will be accessible.

00:24:59.000 --> 00:25:02.680
So, yeah, this is really ideal
for situations for typing in

00:25:02.680 --> 00:25:07.200
the metadata would be
painful for the user.

00:25:07.200 --> 00:25:09.610
And, another good reason for
resumable is you even have

00:25:09.610 --> 00:25:12.540
the option to send those
absolutely nothing.

00:25:12.540 --> 00:25:17.050
So, you can just send totally
empty body, and we'll take it

00:25:17.050 --> 00:25:22.940
and treat it as incomplete.

00:25:22.940 --> 00:25:26.120
So, to give you example,
this is essentially the

00:25:26.120 --> 00:25:30.620
simplest video entry
you can now generate.

00:25:30.620 --> 00:25:34.590
And, so you can see that it
just has the basic boilerplate

00:25:34.590 --> 00:25:38.070
for an Atom XML entry.

00:25:38.070 --> 00:25:41.160
And, then there's just yt and
complete tag, which lives

00:25:41.160 --> 00:25:42.460
inside the app control.

00:25:42.460 --> 00:25:43.590
And, that's it.

00:25:43.590 --> 00:25:45.200
That's all you would
have to provide.

00:25:45.200 --> 00:25:46.510
But, you could provide
more if you wanted.

00:25:46.510 --> 00:25:48.760
If you wanted to give a title
at this point, you could

00:25:48.760 --> 00:25:52.090
certainly do that.

00:25:52.090 --> 00:26:01.200
And, certainly this is the
simplest resumable request.

00:26:01.200 --> 00:26:04.970
So, you don't provide
anybody at all.

00:26:04.970 --> 00:26:06.910
An important point here is
that you don't provide

00:26:06.910 --> 00:26:08.330
a content type.

00:26:08.330 --> 00:26:13.440
If you specify a content
type, it will fail to parse.

00:26:13.440 --> 00:26:18.880
And, on uploads in the past,
we've required a header called

00:26:18.880 --> 00:26:21.440
the slug header, and
traditionally this is where you

00:26:21.440 --> 00:26:23.270
put the file name of
file you're uploading.

00:26:24.460 --> 00:26:27.340
And, the case where you'd give
us incomplete metadata, we're

00:26:27.340 --> 00:26:33.140
going to use that header to
generate a standards title,

00:26:33.140 --> 00:26:34.140
just as a placeholder.

00:26:34.140 --> 00:26:37.100
So, if you are using
this it's worth putting

00:26:37.100 --> 00:26:39.410
something meaningful
into the slug header.

00:26:39.480 --> 00:26:42.630
Maybe the time stap of when
it was uploaded, or maybe

00:26:42.630 --> 00:26:50.930
the device it came from.

00:26:50.930 --> 00:26:50.993
OK.

00:26:51.056 --> 00:26:54.500
You've heard us mention a few
times now that it's not a good

00:26:54.500 --> 00:26:57.670
idea to solicit user uploads
into your own accounts.

00:26:57.670 --> 00:27:00.190
And, and not just because we
needed to path out the talk,

00:27:00.190 --> 00:27:02.400
it's actually a really
important point.

00:27:02.400 --> 00:27:05.529
And, it's like continual source
of problems for partners

00:27:05.529 --> 00:27:08.330
who start using the API.

00:27:08.330 --> 00:27:12.080
The most common use case
for why people to this, is

00:27:12.080 --> 00:27:16.170
they want people to upload
videos using their tool.

00:27:16.170 --> 00:27:18.280
And, then they want to be
able to retrieve all

00:27:18.280 --> 00:27:21.900
the videos uploaded with
their tool in one go.

00:27:21.900 --> 00:27:24.560
Now, there an often overlooked
feature called developer tags,

00:27:24.560 --> 00:27:27.800
which gives you exactly the
functionality without the need

00:27:27.800 --> 00:27:33.429
to have users uploading
into your account.

00:27:33.429 --> 00:27:37.530
A developer tag is a tag
specify an upload time that's

00:27:37.530 --> 00:27:40.300
bound to a particular
developer key.

00:27:40.300 --> 00:27:42.080
So, the tag is only
visible if you're using

00:27:42.080 --> 00:27:44.940
that developer key.

00:27:44.940 --> 00:27:48.790
So, on upload you with a media
category as shown there.

00:27:48.790 --> 00:27:51.090
And, you just give it
whatever name you like.

00:27:51.240 --> 00:27:53.350
The name of your application,
the name of your

00:27:53.350 --> 00:27:55.640
favorite pet, whatever.

00:27:55.640 --> 00:28:00.310
And, then when you're fetching
the deals from the API, you can

00:28:00.310 --> 00:28:04.320
specify the developer tag again
using format shown

00:28:04.320 --> 00:28:05.090
at the bottom.

00:28:05.090 --> 00:28:08.909
So, this dash followed by the
schema, and then your tag name.

00:28:08.909 --> 00:28:11.630
And, as long as you use the
same developer key in both

00:28:11.630 --> 00:28:14.480
cases, you'll get back only
the videos that have

00:28:14.480 --> 00:28:15.270
your developer tags.

00:28:15.270 --> 00:28:17.270
So, only the videos that
were uploaded using

00:28:17.270 --> 00:28:18.640
your application.

00:28:18.640 --> 00:28:22.560
And, this is a much nicer way
to still have all the videos

00:28:22.560 --> 00:28:26.089
accessible without hitting
upload limits, and

00:28:26.089 --> 00:28:29.050
things like that.

00:28:29.050 --> 00:28:29.290
OK.

00:28:29.290 --> 00:28:32.160
So, I'll now hand you back over
to Jeff for some discussion

00:28:32.160 --> 00:28:37.450
of mobile uploads.

00:28:37.450 --> 00:28:39.070
JEFFREY POSNICK: Thanks
very much Gareth.

00:28:39.070 --> 00:28:42.030
So, I'm going to start talking
about mobile uploads by

00:28:42.030 --> 00:28:43.880
discussing the Android OS case.

00:28:44.880 --> 00:28:49.280
So, let me just say here that
when I'm describing this

00:28:49.280 --> 00:28:52.410
initial scenario, I'm talking
about Android phones that I

00:28:52.410 --> 00:28:54.710
guess are called Google
Experience phones, and have

00:28:54.710 --> 00:28:57.540
the YouTube app built in.

00:28:58.429 --> 00:29:02.419
So, in the scenario, what we
recommend and this is a pretty

00:29:02.419 --> 00:29:06.140
straightforward approach, is to
use the ACTION_SEND Intents.

00:29:06.140 --> 00:29:09.390
Talk to you about intensible
a bit at the keynote

00:29:09.390 --> 00:29:09.890
this morning.

00:29:09.890 --> 00:29:11.970
But, for those who aren't
familiar with them.

00:29:12.360 --> 00:29:15.900
They're basically way of
telling the Android operating

00:29:15.900 --> 00:29:19.100
system, that you would like to
do something, optionally

00:29:19.100 --> 00:29:20.620
with some piece of data.

00:29:20.620 --> 00:29:23.250
So, in this case, we're going
to be using ACTION_SEND Intent,

00:29:23.250 --> 00:29:26.230
which as the name kind of
implies, tells the Android

00:29:26.230 --> 00:29:29.320
operating system, hey I'd like
to send some data somewhere.

00:29:29.320 --> 00:29:33.220
And, the data in this case
is going to be a local

00:29:33.220 --> 00:29:35.039
movie file of some sort.

00:29:35.640 --> 00:29:40.110
It's not very many lines of
codes that you need to actually

00:29:40.110 --> 00:29:41.260
accomplish that sort of thing.

00:29:41.260 --> 00:29:46.140
You know, in this particular
case, I'm assuming that there's

00:29:46.140 --> 00:29:49.230
a movie file stored in your
SD card called test.move.

00:29:51.049 --> 00:29:53.830
You know, this is just
obviously an example.

00:29:53.830 --> 00:29:56.920
Probably, what you would be
doing would be capturing video

00:29:56.920 --> 00:30:00.250
directly from the video camera
built in on whatever Android

00:30:00.250 --> 00:30:04.680
device you are using, saving it
locally, and pointing at that

00:30:04.680 --> 00:30:09.780
particular movie files when
calling the ACTION_SEND Intent.

00:30:09.780 --> 00:30:12.092
And, I'll go in a little
bit, and show you what

00:30:12.092 --> 00:30:13.320
that actually looks like.

00:30:13.320 --> 00:30:17.130
But, before I do, I just want
to note that the video will be

00:30:17.130 --> 00:30:20.980
uploaded into whatever YouTube
account is associated with the

00:30:20.980 --> 00:30:24.529
Android phone, which, you know,
99% of the time is probably

00:30:24.529 --> 00:30:26.680
what you want to do.

00:30:26.680 --> 00:30:30.080
And, if you do need a little
bit -- I also want to mention

00:30:30.080 --> 00:30:34.580
the current ACTION_SEND Intent
isn't so much an API as it is

00:30:34.580 --> 00:30:37.549
kind of like a fire and forget
type of thing that doesn't give

00:30:37.549 --> 00:30:42.200
you any notifications once the
actual upload is complete.

00:30:42.200 --> 00:30:45.040
So, there's not much
information you

00:30:45.040 --> 00:30:45.750
can get back it.

00:30:46.360 --> 00:30:50.890
And, I've been speaking to the
Google engineers working on the

00:30:50.890 --> 00:30:55.240
YouTube app, and they want me
to let you guys know that at

00:30:55.240 --> 00:30:57.899
some point in the near future,
we should see some

00:30:57.899 --> 00:30:58.470
enhancements here.

00:30:58.470 --> 00:31:02.060
And, you will actually be able
to get back some metadata about

00:31:02.060 --> 00:31:09.340
the uploaded video once the
ACTION_SEND Intent completes.

00:31:09.340 --> 00:31:13.260
That being said, you might want
a little bit more control than

00:31:13.260 --> 00:31:16.810
what the ACTION-SEND
Intent offers.

00:31:16.810 --> 00:31:20.750
And in that scenario, it's
perfectly fine to just use

00:31:20.750 --> 00:31:25.190
either one of the, kind of,
built in HTTP libraries that

00:31:25.190 --> 00:31:27.550
Android devices offer.

00:31:27.550 --> 00:31:30.940
Or, you could actually use the
newest version of the Google

00:31:30.940 --> 00:31:32.370
Data Java client library.

00:31:33.470 --> 00:31:37.039
think anything that's in
the 2 O release branch now

00:31:37.039 --> 00:31:38.350
works on Android phones.

00:31:38.350 --> 00:31:41.150
So, you know, that's another
choice if you don't want to

00:31:41.150 --> 00:31:45.139
go through the Intent
based approach.

00:31:45.139 --> 00:31:47.190
And, just to show you what
the Intent looks like.

00:31:47.780 --> 00:31:50.850
this is basically what the
user would see if you execute

00:31:50.850 --> 00:31:53.650
the code on previous page.

00:31:53.650 --> 00:31:56.109
And, they'd have a bunch of
different choices as to

00:31:56.109 --> 00:31:59.020
how they wanted to share
particular video file.

00:31:59.180 --> 00:32:01.470
One of them is going
to be YouTube.

00:32:01.470 --> 00:32:03.910
So, select YouTube, the
video will kind of upload

00:32:03.910 --> 00:32:04.950
in the background.

00:32:04.950 --> 00:32:07.230
And, the user will get notified
when the upload is complete.

00:32:07.230 --> 00:32:10.490
But, your code right
now wouldn't.

00:32:10.490 --> 00:32:18.610
So, that's the Android
story, also iPhone.

00:32:18.610 --> 00:32:18.743
KUAN YONG: Thanks Jeff.

00:32:18.776 --> 00:32:21.960
How many of you guys
write iPhone apps?

00:32:21.960 --> 00:32:23.860
You can be honest, we know this
a Google event and certain

00:32:23.860 --> 00:32:26.580
things were said at a keynote
this morning, but we're trying

00:32:26.580 --> 00:32:29.340
to be as inclusive as possible.

00:32:29.340 --> 00:32:33.300
So, if you haven't already
dealt with iPhone SKD the next

00:32:33.300 --> 00:32:35.480
couple of slides may not make
all that much sense to you.

00:32:35.480 --> 00:32:37.990
But, hopefully though at
least show you that it's not

00:32:37.990 --> 00:32:39.550
that hard to get started.

00:32:39.550 --> 00:32:44.750
The bad news is there is no
equivalent of the ACTION_SEND

00:32:44.750 --> 00:32:46.250
Intent on the iPhone.

00:32:46.250 --> 00:32:48.540
So, if you want to upload a
video to YouTube in an iPhone

00:32:48.540 --> 00:32:51.669
app, you will have to code
against our APIs directly.

00:32:51.669 --> 00:32:54.690
And, it's not that hard to do.

00:32:54.690 --> 00:32:59.360
So, a typical life cycle of a
video on the iPhone is with the

00:32:59.360 --> 00:33:00.390
UI image picker controller.

00:33:00.560 --> 00:33:03.710
You create an instance of that,
you present that as a model

00:33:03.710 --> 00:33:07.269
view control, and it takes care
of the entire process of

00:33:07.269 --> 00:33:08.920
activating the camera
on the phone.

00:33:08.920 --> 00:33:11.440
Giving the user a chance to
capture a short snippet of

00:33:11.440 --> 00:33:14.659
video, allowing the user to
trim the ends of the video.

00:33:14.659 --> 00:33:17.700
And, what you get at the end
of the process is a path to

00:33:17.700 --> 00:33:20.360
an mpeg 4 file that's
stores somewhere in the

00:33:20.360 --> 00:33:21.980
iPhone file system.

00:33:21.980 --> 00:33:25.539
And, what we recommend doing is
once you get that path to the

00:33:25.539 --> 00:33:29.869
mpeg 4 file, copy that file to
some place that your app owns.

00:33:29.869 --> 00:33:32.279
In most cases, that's
going to be your apps

00:33:32.279 --> 00:33:33.400
documents directory.

00:33:33.400 --> 00:33:35.910
And, the reason for that is
while you're in a process of

00:33:35.910 --> 00:33:40.590
uploading that file, should
your app crash it's not

00:33:40.590 --> 00:33:43.159
guarantee that that movie file
is going to be there at that

00:33:43.159 --> 00:33:45.893
same place the next time
the user launches your

00:33:45.893 --> 00:33:46.090
app.

00:33:46.090 --> 00:33:48.729
So, you want to make sure that
you move that file someplace

00:33:48.729 --> 00:33:51.660
that ensures they will persist.

00:33:51.660 --> 00:33:53.630
Upload a file and wans
you're done uploading,

00:33:53.630 --> 00:33:56.179
delete that file.

00:33:56.179 --> 00:34:00.889
If you're relatively new to
iPhone programming, one

00:34:00.889 --> 00:34:03.789
reminder here is that make
you add the user low memory

00:34:03.789 --> 00:34:04.899
situations properly.

00:34:04.899 --> 00:34:07.649
The UIImagePickerController
is pretty heavy weight.

00:34:07.649 --> 00:34:10.389
So, when you activate it, when
it's on screen, when your

00:34:10.389 --> 00:34:14.760
camera is activated, most
likely the phone OS is going to

00:34:14.760 --> 00:34:17.169
tell your app to release
all of the views.

00:34:17.169 --> 00:34:20.349
Which means when control
returns back to your app, all

00:34:20.349 --> 00:34:23.210
of your views are going to had
be reloaded from a nip file, or

00:34:23.210 --> 00:34:24.239
recreated programmatically.

00:34:25.069 --> 00:34:26.869
And, when that happens, you
just want to make sure that

00:34:26.869 --> 00:34:30.450
your views are consistent with
the underline application

00:34:30.450 --> 00:34:33.089
state, and it's just an
easy mistake that novice

00:34:33.089 --> 00:34:36.169
iPhone programmers make.

00:34:36.169 --> 00:34:37.969
Just some sample code.

00:34:37.969 --> 00:34:40.322
It's going to be part of the
deck, so I'm not going to

00:34:40.322 --> 00:34:41.349
go too much into this.

00:34:41.349 --> 00:34:44.609
But, just shows you just basic
code for setting up the

00:34:44.609 --> 00:34:44.679
UIImagePickerController.

00:34:46.259 --> 00:34:50.259
Setting it up for recording
just videos and not stills.

00:34:50.629 --> 00:34:51.860
Presenting that controller.

00:34:51.860 --> 00:34:54.610
And displaying the path to your
apps documents directory, so

00:34:54.610 --> 00:34:57.999
that you can do a simple copy
of the mpeg 4 file from the

00:34:57.999 --> 00:35:02.709
temporary location to
your app's location.

00:35:02.709 --> 00:35:04.229
A few additional
tips and tricks.

00:35:04.229 --> 00:35:05.899
So, we do have an objectives
c-client library.

00:35:05.899 --> 00:35:07.909
But, it's pretty heavyweight.

00:35:07.909 --> 00:35:09.459
So, if you want to use
that, you know, we

00:35:09.459 --> 00:35:10.430
don't really blame you.

00:35:10.430 --> 00:35:13.950
If you want to handroll your
own HTTP requests, one open

00:35:13.950 --> 00:35:18.249
source objectives CHTTPRequest
library I like using

00:35:18.249 --> 00:35:19.069
is ASIHTTPRequest.

00:35:19.729 --> 00:35:22.140
And, you can check it out
at the link over there.

00:35:22.140 --> 00:35:25.510
It makes it really easy to do
things like display a progress

00:35:25.510 --> 00:35:28.209
bar, you know, while the
post is in progress.

00:35:29.369 --> 00:35:32.369
If you are going to be
hand rolling you own HTTP

00:35:32.369 --> 00:35:34.989
API, you're probably not
want to deal with XML.

00:35:34.989 --> 00:35:39.460
You will want to check out
our new compact JSON output

00:35:39.460 --> 00:35:40.339
format, which we call JSON-C.

00:35:41.469 --> 00:35:43.759
And, there's tons, you know,
open source iPhon libraries

00:35:43.759 --> 00:35:45.360
for parsing JSON.

00:35:45.360 --> 00:35:48.159
So, I highly recommend that you
guys go down that approach.

00:35:48.159 --> 00:35:51.370
So, to see all this code in
action, we have some sample

00:35:51.370 --> 00:35:54.509
code that's part of our YouTube
Direct open source project.

00:35:54.509 --> 00:35:57.390
If you go to the link, there
is a sample iPhone app

00:35:57.390 --> 00:35:58.810
that you can take a look.

00:35:58.810 --> 00:36:02.430
It currently uses the older,
you know, single post

00:36:02.430 --> 00:36:03.190
direct upload method.

00:36:03.400 --> 00:36:06.250
But, it should be very easy to
convert that to one that uses

00:36:06.250 --> 00:36:10.969
the resumable upload API,
again as I just talked about.

00:36:10.969 --> 00:36:12.279
And, one last tip.

00:36:12.279 --> 00:36:15.509
If you haven't already figured
out how to play a YouTube video

00:36:15.509 --> 00:36:18.909
within an iPhone app, there's
really a simple way to do so.

00:36:18.909 --> 00:36:22.450
All you have to do is create a
UI web view within your app.

00:36:22.450 --> 00:36:25.890
And, just give it some HTML
that is just the usual

00:36:25.890 --> 00:36:27.729
YouTube, and then snip it.

00:36:27.729 --> 00:36:32.449
And, what it does is enables
the Safari plug-in to convert

00:36:32.449 --> 00:36:35.900
the flash embed, and do
something that the user can

00:36:35.900 --> 00:36:37.399
actually interact with.

00:36:37.399 --> 00:36:39.949
And, on the iPad, the
experience is really nice,

00:36:39.949 --> 00:36:42.799
because the video will play
in line within your app.

00:36:42.799 --> 00:36:45.009
So, the user doesn't have to
leave your app to a different

00:36:45.009 --> 00:36:46.950
screen to watch a video
and come back to it.

00:36:46.950 --> 00:36:49.750
The video will play as
part of your apps UI.

00:36:49.750 --> 00:36:51.769
And, the overall user
experience is really nice.

00:36:52.450 --> 00:36:55.199
I recommed you guys
check it out.

00:36:55.199 --> 00:36:56.009
Alright.

00:36:56.009 --> 00:37:00.669
So, back to Jeff to talk
about YouTube Direct.

00:37:00.669 --> 00:37:02.440
JEFFREY POSNICK: Thanks Kuan.

00:37:02.440 --> 00:37:04.269
So, YouTube Direct.

00:37:05.279 --> 00:37:08.419
Some of you might be familiar
with it, but probably most not.

00:37:08.419 --> 00:37:11.380
So, let me just give you a
review of exactly what it is.

00:37:12.020 --> 00:37:16.450
YouTube Direct is basically it
comes down to is an App Engine

00:37:16.450 --> 00:37:19.800
instance running some open
source code that's built on

00:37:19.800 --> 00:37:22.310
top of the YouTube APIs.

00:37:22.820 --> 00:37:25.109
Running it is as a complete
open source project.

00:37:25.489 --> 00:37:28.289
Kind of the model that we see
people doing is downloading the

00:37:28.289 --> 00:37:32.119
code, creating their App Engine
instance, and deploying it.

00:37:32.359 --> 00:37:35.630
The reason why people might
want to use YouTube Direct

00:37:35.630 --> 00:37:42.279
makes it, we hope, easier to
embed a upload interface on

00:37:42.279 --> 00:37:47.230
any arbitrary website, and
solicit YouTube videos.

00:37:47.230 --> 00:37:49.214
So, it's using browser-based
uploads under the hood that

00:37:49.214 --> 00:37:50.809
we are already discussed.

00:37:50.809 --> 00:37:54.259
And, one of the, you know,
initial types of partners that

00:37:54.259 --> 00:37:57.419
we've reached out to have
been news organizations.

00:37:57.419 --> 00:37:59.509
And, we've been trying to
promote citizen journalism,

00:37:59.509 --> 00:38:00.829
and things along those lines.

00:38:00.829 --> 00:38:02.599
And, that's absolutely great.

00:38:02.599 --> 00:38:04.760
But, we want to make sure that
people knew that, you know,

00:38:04.760 --> 00:38:08.040
that's not the only potential
uses for YouTube direct.

00:38:08.959 --> 00:38:12.400
Pretty much any website where
you think it would be nice to

00:38:12.400 --> 00:38:16.759
have a way of soliciting
contents in response to, you

00:38:16.759 --> 00:38:19.219
know, certain calls to action
that might have on your page,

00:38:19.219 --> 00:38:22.690
or just general, you know,
upload your video responses

00:38:22.690 --> 00:38:24.209
to so and so forth.

00:38:24.209 --> 00:38:27.769
You can do that using YouTube
Direct pretty easily.

00:38:27.769 --> 00:38:31.519
So, there's two different
components of YouTube Direct,

00:38:31.519 --> 00:38:36.539
one of which is kind of the
use and user facing iFrame.

00:38:36.539 --> 00:38:39.140
And, this is what kind of
hosts the whole browser

00:38:39.140 --> 00:38:40.070
base upload interface.

00:38:40.540 --> 00:38:46.760
There's also a back end, admin
only moderation panel, that

00:38:46.760 --> 00:38:50.209
lets you keep track of all the
videos that have

00:38:50.209 --> 00:38:51.419
been submitted.

00:38:51.419 --> 00:38:53.439
And, moderates those videos.

00:38:53.439 --> 00:38:59.139
And, moderation refers to the
ability to add videos that you

00:38:59.139 --> 00:39:03.549
do choose to, you know, accept
into a playlist that will

00:39:03.549 --> 00:39:05.519
live in your own account.

00:39:05.519 --> 00:39:10.119
Or, additionally, update the
metadata of those videos to

00:39:10.119 --> 00:39:11.942
potentially contain
a link back to

00:39:11.942 --> 00:39:12.479
your websites.

00:39:12.779 --> 00:39:16.059
Some way branding the fact that
those videos were uploaded, you

00:39:16.059 --> 00:39:19.119
know, by your YouTube
Direct instance.

00:39:19.119 --> 00:39:22.729
So, that's all part of
the open source project.

00:39:22.729 --> 00:39:24.819
So, we have a demo.

00:39:24.819 --> 00:39:27.049
This is a little
abstract to talk about.

00:39:27.049 --> 00:39:30.189
I just have App Engine
instance set up for

00:39:30.189 --> 00:39:34.309
this purpose over here.

00:39:34.309 --> 00:39:38.239
You know, this happens to be
running on App Engine itself,

00:39:38.239 --> 00:39:40.479
YTD [? demo.appspot ?]

00:39:40.479 --> 00:39:40.859
com.

00:39:40.859 --> 00:39:44.349
But, this actual page does not
have to be on App Engine.

00:39:44.479 --> 00:39:46.720
This, you know, think of that
as, you know, something that

00:39:46.720 --> 00:39:49.009
can potentially be on
your own website.

00:39:49.609 --> 00:39:52.160
It's just this content over
here, and what happened was

00:39:52.160 --> 00:39:55.660
that an iFrame was dynamically
inserted into the page.

00:39:56.509 --> 00:39:58.959
This is what is running,
this is what has to

00:39:58.959 --> 00:40:00.679
run on App Engine.

00:40:00.679 --> 00:40:05.479
So, in this case click
on login into YouTube.

00:40:05.479 --> 00:40:07.499
Maybe remember from a little
bit earlier, where I was doing

00:40:07.499 --> 00:40:08.909
the flash based example.

00:40:09.690 --> 00:40:12.819
It's more or less doing
the same sort of AuthSub

00:40:12.819 --> 00:40:13.229
authorization step.

00:40:13.229 --> 00:40:16.639
In this case, I was registered
ahead of time with this

00:40:16.639 --> 00:40:17.189
particular demand.

00:40:17.189 --> 00:40:20.739
So, you get nicer message
saying registered, secure.

00:40:20.739 --> 00:40:27.989
And, hopefully users at that
point will click allow access.

00:40:27.989 --> 00:40:32.699
And, you get redirected back
to the page that you are on.

00:40:33.009 --> 00:40:36.029
Those are logged in to my
account at this point.

00:40:36.029 --> 00:40:37.419
And, there are two
different options.

00:40:37.419 --> 00:40:39.969
You can either submit
an existing video.

00:40:40.679 --> 00:40:42.509
And, I'll show you
that briefly.

00:40:42.509 --> 00:40:46.809
It uses a YouTube API to load
in the most recent videos that

00:40:46.809 --> 00:40:49.119
were uploaded in your account.

00:40:50.859 --> 00:40:53.299
That's not really what I want
to demo though, I'd like to

00:40:53.299 --> 00:40:55.579
show you just the upload
a new video flow.

00:40:55.579 --> 00:40:57.130
Because, this is what's
actually using the

00:40:57.130 --> 00:41:01.129
browser-based uploads rather
than just calling a video

00:41:01.129 --> 00:41:08.749
that's already live
in the account.

00:41:08.749 --> 00:41:12.529
We're obviously not doing a YTM
complete here, we're actually

00:41:12.529 --> 00:41:14.259
collecting some metadata.

00:41:15.089 --> 00:41:18.499
The rest of the form is kind of
optional, and because this is

00:41:18.499 --> 00:41:21.549
an open source project, you
have full access to the coe.

00:41:21.549 --> 00:41:23.430
You could adjust the types
of information that

00:41:23.430 --> 00:41:25.109
you'd like to collect.

00:41:26.299 --> 00:41:28.361
You know, certainly for this
purpose I'm not going to put

00:41:28.361 --> 00:41:30.279
in my phone number or
anything like that.

00:41:30.279 --> 00:41:32.639
AppEngine does have the
ability to send out emails.

00:41:33.259 --> 00:41:37.249
So, if I wanted I could fill
in email address here.

00:41:37.449 --> 00:41:41.179
I would get notified when the
moderator of this YouTube

00:41:41.179 --> 00:41:43.389
Direct instance decides to,
you know, either accept

00:41:43.389 --> 00:41:45.619
or reject the video.

00:41:45.619 --> 00:41:47.502
But, in this case I'm just
going to choose the file,

00:41:47.502 --> 00:41:53.459
I'm going to choose the
same file from before.

00:41:53.459 --> 00:41:54.029
And, click upload.

00:41:54.029 --> 00:41:59.149
So, what's was worth noting is
that as I'm uploading this

00:41:59.149 --> 00:42:02.549
video, it's going live
into my own account.

00:42:03.319 --> 00:42:04.270
My Jeff [? passing ?]

00:42:04.270 --> 00:42:05.369
test account.

00:42:05.369 --> 00:42:09.179
S, regardless of whether
anybody moderates a video and

00:42:09.179 --> 00:42:11.689
approves it or not, this
video is live on YouTube.

00:42:11.689 --> 00:42:15.952
Moderation step only effects
whether the master account for

00:42:15.952 --> 00:42:18.319
the YouTube Direct instance
will include that video in a

00:42:18.319 --> 00:42:21.809
playlist, or include some text
linking back to this

00:42:21.809 --> 00:42:23.129
particular package.

00:42:23.129 --> 00:42:27.599
So, I will show you the
admin interface, briefly.

00:42:27.599 --> 00:42:30.729
I'm running a little
bit low on time.

00:42:30.729 --> 00:42:35.940
So, I won't spend too
much time on that.

00:42:40.910 --> 00:42:45.390
is basically something I threw
together with all the different

00:42:45.390 --> 00:42:47.789
uploads and a list over here.

00:42:47.789 --> 00:42:51.329
I'll click on details, it pulls
in the video details from a

00:42:51.329 --> 00:42:54.750
combination of some stored
locally in the data store, from

00:42:54.750 --> 00:42:57.809
App Engine, but it also will
sink anything that's been

00:42:57.809 --> 00:43:00.989
updated using the YouTube
API, and pull that down.

00:43:01.439 --> 00:43:03.099
It'll let you
preview the video.

00:43:03.099 --> 00:43:05.430
Let's you actually, a new
feature that we added

00:43:05.430 --> 00:43:07.539
was the ability to edit
captions for the video.

00:43:07.539 --> 00:43:11.449
So, we're kind of seeing some
potentially cool uses for that

00:43:11.449 --> 00:43:15.519
with some organizations that
want to allow people to upload

00:43:15.519 --> 00:43:19.549
videos, and then they'll do
captions, and update the

00:43:19.549 --> 00:43:21.659
captions are live on
the YouTube instance.

00:43:21.659 --> 00:43:25.349
So, that's a pretty cool use.

00:43:25.349 --> 00:43:28.819
And, at this point, you know,
kind of choose, whether

00:43:28.819 --> 00:43:32.229
approve or reject the
video, so and so forth.

00:43:32.229 --> 00:43:35.489
So I just wanted to go
back to the slides.

00:43:35.489 --> 00:43:37.924
We went through all of this.

00:43:38.459 --> 00:43:42.599
And, you know, just brief kind
of high picture overview of how

00:43:42.599 --> 00:43:44.479
we've build YouTube Direct.

00:43:44.479 --> 00:43:48.150
At the center, you know, an
inappropriate is App Engine.

00:43:48.150 --> 00:43:51.869
So, this is a written
using actually the Java

00:43:51.869 --> 00:43:53.049
version of App Engine.

00:43:53.049 --> 00:43:54.979
Bunch of JSPs and servlets.

00:43:55.499 --> 00:43:57.259
We're making use of App
Engine data store.

00:43:57.259 --> 00:44:00.860
We're keeping track of a whole
bunch of things, including the

00:44:00.860 --> 00:44:04.340
off sub token session
information, video metadata,

00:44:04.340 --> 00:44:05.819
things like that.

00:44:05.819 --> 00:44:09.069
We talked to the YouTube API
obviously to sync metadata

00:44:09.069 --> 00:44:12.379
and do the actual
browser-based uploads.

00:44:13.979 --> 00:44:18.209
We're talking to Google
Accounts for getting the

00:44:18.209 --> 00:44:19.839
YouTube credentials
for the given user.

00:44:21.059 --> 00:44:24.239
And, we're talking to the host
website, so the host website,

00:44:24.239 --> 00:44:27.799
you know, loads in some
JavaScripts, you know, when you

00:44:27.799 --> 00:44:32.369
click on whatever button
triggers the upload process it

00:44:32.369 --> 00:44:37.549
basically dynamically inserts
the iFrame into the site.

00:44:37.549 --> 00:44:40.489
And, there's the ability, you
know, in the admin panel, which

00:44:40.489 --> 00:44:44.619
we didn't spend too much time
talking about to have configure

00:44:44.619 --> 00:44:48.299
different options for your
YouTube API settings, and

00:44:48.299 --> 00:44:53.179
to moderate videos
as they come in.

00:44:53.179 --> 00:44:56.019
So, that's pretty much
what I wanted to cover

00:44:56.019 --> 00:44:58.279
about YouTube Direct.

00:44:58.279 --> 00:45:00.729
We're going to take some
questions at this point.

00:45:00.729 --> 00:45:04.970
And, I'm going to pull up the
link for the Google Wave again

00:45:04.970 --> 00:45:07.809
that has moderator instance.

00:45:07.809 --> 00:45:11.769
Definitely in addition to the
questions that come from

00:45:11.769 --> 00:45:14.575
moderator, feel free
to come up to

00:45:14.575 --> 00:45:17.659
the mic, and ask any
questions locally too.

00:45:26.949 --> 00:45:33.399
So, if you guys want to
come up to while they

00:45:33.399 --> 00:45:34.169
handle the questions.

00:45:34.969 --> 00:45:36.769
Take the first from
the audience.

00:45:38.559 --> 00:45:39.660
AUDIENCE: You guys keep on
talking about, you know, you

00:45:39.660 --> 00:45:42.646
really want to have the
users themselves upload the

00:45:42.646 --> 00:45:43.834
videos to your [INAUDIBLE]

00:45:43.834 --> 00:45:44.309
account.

00:45:44.309 --> 00:45:44.489
Which I understand.

00:45:44.489 --> 00:45:45.830
It makes sense.

00:45:45.830 --> 00:45:49.789
However, as far as a user
experience, you have a lot

00:45:49.789 --> 00:45:51.089
of old people who don't
have YouTube accounts.

00:45:52.659 --> 00:45:56.449
When I took videos from them,
it just doesn't seem to make

00:45:56.449 --> 00:45:59.049
sense as far as, you know, to
get videos from a wide

00:45:59.049 --> 00:46:00.189
range of audience.

00:46:00.189 --> 00:46:03.199
And, so we're trying to figure
out is, you know, for our

00:46:03.199 --> 00:46:05.409
organization, we're trying to
figure out how exactly to

00:46:05.409 --> 00:46:07.139
make that work properly.

00:46:07.139 --> 00:46:12.459
And, especially since doing --
I've used YouTube Direct a

00:46:12.459 --> 00:46:15.650
little bit, and doing the
iFrame and all that

00:46:15.650 --> 00:46:17.009
is kind of clunky.

00:46:17.009 --> 00:46:19.819
It's just, you know, you
have to go back and forth

00:46:19.819 --> 00:46:20.399
between the websites.

00:46:20.399 --> 00:46:22.880
It just makes it a very
difficult process.

00:46:22.880 --> 00:46:24.400
And, we're try to figure
out, you know, what's the

00:46:24.400 --> 00:46:25.119
best way of doing that.

00:46:25.449 --> 00:46:29.209
Is it better to use
direct login through our

00:46:29.209 --> 00:46:33.579
website, or, you know.

00:46:33.579 --> 00:46:34.949
JEFFREY POSNICK: I'll
take some of that.

00:46:34.949 --> 00:46:35.899
And other people can jump in.

00:46:35.899 --> 00:46:41.460
So, I guess first of all, you
know, we might have slightly

00:46:41.460 --> 00:46:43.589
different opinions in that
we think people creating

00:46:43.589 --> 00:46:45.450
YouTube accounts and having
YouTube is pretty great.

00:46:46.970 --> 00:46:51.819
Obviously, you know, it might
be an extra step for a user to

00:46:51.819 --> 00:46:54.310
have to authorize
the application.

00:46:54.420 --> 00:46:55.670
It is a one-time step.

00:46:55.670 --> 00:47:00.380
Once you do the AuthSub login,
you can reuse that token, and

00:47:00.380 --> 00:47:03.690
you'll have access to that
account pretty much

00:47:03.690 --> 00:47:03.979
indefinitely.

00:47:03.979 --> 00:47:05.720
In case you think that your
users are going to be

00:47:05.720 --> 00:47:08.719
interacting with your website,
you know, in a daily basis.

00:47:08.719 --> 00:47:10.609
That gets around
things a little bit.

00:47:10.989 --> 00:47:15.819
I mean that being said, yeah,
you know, it is easier to do

00:47:15.819 --> 00:47:17.909
the approach where you
upload all your videos

00:47:17.909 --> 00:47:18.649
into one account.

00:47:18.649 --> 00:47:21.579
And, we do see a lot of people
who end up doing that.

00:47:21.979 --> 00:47:25.099
As somebody who has to deal
with the aftermath of people

00:47:25.099 --> 00:47:27.599
who decide that they're going
to live with that sort of

00:47:27.599 --> 00:47:30.649
approach, and don't realize
what our limitations are, I can

00:47:30.649 --> 00:47:36.249
tell you that it's just really
not how we have things set up.

00:47:36.339 --> 00:47:40.889
I mean, I don't want to any
potential legal issues or

00:47:40.889 --> 00:47:43.250
anything like that, but it's
also problematic from

00:47:43.250 --> 00:47:44.119
that point of view.

00:47:44.119 --> 00:47:47.179
Beyond, whatever, you know,
restriction we have on the

00:47:47.179 --> 00:47:48.089
size videos and accounts.

00:47:48.429 --> 00:47:54.999
So, I don't have an answer for
you in terms of saying, you

00:47:54.999 --> 00:47:57.700
know, this is a magical other
approach you can take.

00:47:57.700 --> 00:48:00.359
It's a sort of thing where
you really do need to.

00:48:00.359 --> 00:48:03.049
And, I think users across the
web need to get used to having

00:48:03.049 --> 00:48:07.529
this sort of interstitial page
where you login on a trusted

00:48:07.529 --> 00:48:10.329
site, and you grant
access to other things.

00:48:10.329 --> 00:48:12.709
And, I think across the
Google APIs, you'll

00:48:12.709 --> 00:48:16.690
see that same model.

00:48:16.690 --> 00:48:17.224
AUDIENCE: OK.

00:48:17.224 --> 00:48:17.758
Yep.

00:48:17.758 --> 00:48:18.292
JEFFREY POSNICK: Yeah.

00:48:20.939 --> 00:48:22.649
Take another from the audience.

00:48:23.949 --> 00:48:26.579
AUDIENCE: A lot of people are
using YouTube for search

00:48:26.579 --> 00:48:28.599
engine optimization in
trying to drive traffic.

00:48:28.599 --> 00:48:32.160
And, they're labeling videos
with things that don't relate

00:48:32.160 --> 00:48:34.119
to what the video's about.

00:48:34.119 --> 00:48:36.819
And, I'm wondering if you're
planning on using voice

00:48:36.819 --> 00:48:40.770
recognition, so that you have
an idea of what the video is

00:48:40.770 --> 00:48:44.679
about, other than just what
people are calling it.

00:48:45.039 --> 00:48:46.559
KUAN YONG: Did you
mean the tags?

00:48:46.559 --> 00:48:47.289
AUDIENCE: The tags.

00:48:47.289 --> 00:48:47.469
Yes.

00:48:47.469 --> 00:48:50.660
The tags don't always match
with video is about.

00:48:51.109 --> 00:48:53.549
But, Google has this great
voice recognition thing.

00:48:53.549 --> 00:48:53.819
KUAN YONG: Right.

00:48:53.819 --> 00:48:56.069
We haven't really spoken a
lot about this publicly.

00:48:56.069 --> 00:48:59.269
But, we do have automated
classification systems

00:48:59.269 --> 00:49:00.299
that are going on.

00:49:00.299 --> 00:49:02.940
Like, for example, when you go
to YouTube.com and you start

00:49:02.940 --> 00:49:05.940
browsing videos by categories,
we don't just go by the

00:49:05.940 --> 00:49:07.390
categories that a
user tells us.

00:49:07.390 --> 00:49:10.970
We actually classify some of
the videos through other means.

00:49:10.970 --> 00:49:13.169
So, we have some of
this information.

00:49:13.169 --> 00:49:16.281
I'll take what you've
just said back to the

00:49:16.281 --> 00:49:16.409
team.

00:49:16.409 --> 00:49:18.079
It's something we could
potentially look at.

00:49:18.079 --> 00:49:21.679
Maybe exposing some of the tags
that came out of the automatic

00:49:21.679 --> 00:49:23.419
video classification process.

00:49:23.419 --> 00:49:25.989
Right now these are not
exposed, but we could

00:49:25.989 --> 00:49:29.309
potentially expose
them in the future.

00:49:29.309 --> 00:49:31.389
JEFFREY POSNICK: I'm just going
to switch to the moderator real

00:49:31.389 --> 00:49:33.459
quick, and make sure we get a
couple questions from there.

00:49:33.879 --> 00:49:36.759
Will there be an HTML5 version
of the Chromos player

00:49:36.759 --> 00:49:37.969
at some point.

00:49:39.109 --> 00:49:43.379
I assume also the Chromos
player refers to both the

00:49:43.379 --> 00:49:45.939
player that doesn't have all
the Chrome, and also the

00:49:45.939 --> 00:49:48.449
standard embedded player that
you see pretty much

00:49:48.449 --> 00:49:50.069
across the web.

00:49:50.259 --> 00:49:53.199
I made sure to talk to the
Players Team before I came,

00:49:53.199 --> 00:49:56.279
because I had a feeling it will
be a question about this.

00:49:56.889 --> 00:49:57.999
The answer is yes.

00:49:57.999 --> 00:50:03.159
There will be a way of
embedding HTML5 player

00:50:03.159 --> 00:50:05.189
video into your webpages.

00:50:05.579 --> 00:50:08.429
Much like you do right
now with Flash Player.

00:50:08.429 --> 00:50:14.099
It's not something that we're
really ready to commit to a

00:50:14.099 --> 00:50:15.539
specific implementation
right now.

00:50:15.539 --> 00:50:17.529
It's really just not very
far along in deciding

00:50:17.529 --> 00:50:18.739
how it's going to done.

00:50:18.739 --> 00:50:21.779
It probably will be an
iFrame of some sort.

00:50:21.779 --> 00:50:26.299
And, a JavaScript object
that ends up being

00:50:26.299 --> 00:50:27.589
loaded in an exposed.

00:50:27.589 --> 00:50:29.749
The same sort of API
we have right now.

00:50:29.749 --> 00:50:33.049
I think, you know, hopefully
we'll match the existing API.

00:50:33.049 --> 00:50:35.549
So, you shouldn't have to
rewrite too much of your

00:50:35.549 --> 00:50:37.379
custom, you know, player
control logic and

00:50:37.379 --> 00:50:38.679
things like that.

00:50:38.679 --> 00:50:40.269
But, under but under the hood
it's going to be completely

00:50:40.269 --> 00:50:42.099
different obviously.

00:50:42.099 --> 00:50:45.039
So, stay tuned pretty much.

00:50:45.039 --> 00:50:47.039
We should have something.

00:50:47.409 --> 00:50:50.169
Take another from the audience.

00:50:50.169 --> 00:50:50.399
AUDIENCE: OK.

00:50:50.399 --> 00:50:51.212
Sorry,

00:50:51.212 --> 00:50:52.849
I have a lot of questions
here I'll try to be brief.

00:50:54.729 --> 00:50:57.409
First, where our institution
is trying to use this almost

00:50:57.409 --> 00:50:58.239
as a workflow system.

00:50:58.239 --> 00:51:00.679
We have some people from our
Media Department who were

00:51:00.679 --> 00:51:02.889
sending stuff up to PR.

00:51:02.889 --> 00:51:06.319
And, it is uploaded to an
institutional account, and

00:51:06.319 --> 00:51:09.789
they're trying to send it up to
another department on the

00:51:09.789 --> 00:51:12.709
University to approve it before
it goes live on the web.

00:51:12.709 --> 00:51:15.209
So, that might be an
interesting use case study for

00:51:15.209 --> 00:51:17.559
having functional accounts,
multiple counts, not

00:51:17.559 --> 00:51:19.069
only a user accunt.

00:51:20.579 --> 00:51:23.059
Secondly, for the gentleman
that was before me.

00:51:23.059 --> 00:51:26.439
Are you guys using any of the
automated generated captions

00:51:26.439 --> 00:51:29.249
to end search data?

00:51:29.249 --> 00:51:32.349
And, can you speak
to the captions?

00:51:32.349 --> 00:51:32.549
KUAN YONG: Yes.

00:51:32.549 --> 00:51:36.499
We do use autogenerated
captions as part of the

00:51:36.499 --> 00:51:40.759
search ranking secret
sauce, blah, blah blah.

00:51:40.759 --> 00:51:44.369
We currently don't have a way
to expose those automatically

00:51:44.369 --> 00:51:46.799
generated captions to
the API right now.

00:51:47.129 --> 00:51:49.689
The reasons for that are
mostly legal in nature.

00:51:50.089 --> 00:51:53.619
So, I can't really go too
much into this stuff.

00:51:54.949 --> 00:52:00.539
So, I hope that answers your
question about captions.

00:52:00.539 --> 00:52:00.889
AUDIENCE: Sort of.

00:52:00.889 --> 00:52:01.289
JEFFREY POSNICK: OK.

00:52:01.289 --> 00:52:04.489
I'll try to get through as
many other ones as we can.

00:52:05.999 --> 00:52:07.459
I have a video hosted
at my own server.

00:52:07.459 --> 00:52:11.449
Is there a way to get the
video from a given URL rather

00:52:11.449 --> 00:52:13.260
than from a local file.

00:52:14.240 --> 00:52:16.540
I guess that's during
the upload stage.

00:52:16.540 --> 00:52:17.100
No.

00:52:17.340 --> 00:52:18.819
That's not something
you can do.

00:52:19.630 --> 00:52:23.879
I guess so it basically have
our servers fetch the video

00:52:23.879 --> 00:52:26.509
file from a well defined URL
instead of including

00:52:26.509 --> 00:52:27.539
it in the request.

00:52:27.539 --> 00:52:28.959
But, no.

00:52:29.259 --> 00:52:31.299
I don't know if that's
something we're even thinking

00:52:31.299 --> 00:52:32.319
about doing it necessarily.

00:52:32.319 --> 00:52:33.410
GARETH McSORLEY: Yeah.

00:52:33.410 --> 00:52:36.249
Not something I've heard about
anyone thinking of dong.

00:52:36.249 --> 00:52:36.549
JEFFREY POSNICK: Yeah.

00:52:36.549 --> 00:52:38.719
Sorry about that.

00:52:38.719 --> 00:52:39.289
And, let see.

00:52:39.289 --> 00:52:41.079
We use the API to
autogenerate captions.

00:52:41.079 --> 00:52:43.769
Such a copy of those generated
captions cleanup locally using

00:52:43.769 --> 00:52:47.369
heuristics and upload to
clean captions file.

00:52:47.369 --> 00:52:48.819
JEFFREY POSNICK: Kuan?

00:52:48.819 --> 00:52:50.059
KUAN YONG: We kind
of answered that.

00:52:50.059 --> 00:52:52.150
So, the autogenerated captions
are not available through

00:52:52.150 --> 00:52:54.859
the API unfortunately.

00:52:54.859 --> 00:52:57.619
JEFFREY POSNICK: But,
you can upload you own

00:52:57.619 --> 00:52:58.970
captions using the API.

00:52:58.970 --> 00:53:01.499
KUAN YONG: If you're the
owner of that video.

00:53:01.499 --> 00:53:02.299
JEFFREY POSNICK: Let's see.

00:53:02.299 --> 00:53:04.410
Can you add metatags for SCO?

00:53:07.969 --> 00:53:11.149
So, I guess this will be
additional tags that were

00:53:11.149 --> 00:53:15.019
just visible by search
engines perhaps.

00:53:16.299 --> 00:53:17.129
KUAN YONG: I don't think so.

00:53:17.129 --> 00:53:19.919
Because, you're talking about a
standard YouTube watch page,

00:53:19.919 --> 00:53:23.050
and that's not something that
third parties have

00:53:23.050 --> 00:53:25.219
control over.

00:53:25.219 --> 00:53:27.069
JEFFREY POSNICK: With resumable
uploads when we slice large

00:53:27.069 --> 00:53:29.639
files into small pieces, is it
possible to upload the pieces

00:53:29.639 --> 00:53:31.370
out of order simultaneously?

00:53:31.370 --> 00:53:31.950
GARETH McSORLEY: Yeah.

00:53:31.950 --> 00:53:33.980
The simple answer is
unfortunately not yet.

00:53:33.980 --> 00:53:37.519
So, at the moment the rules
for resumable uploads

00:53:37.519 --> 00:53:38.450
are very strict.

00:53:38.450 --> 00:53:40.909
You have to upload all
the bytes in sequence.

00:53:40.909 --> 00:53:43.319
And, you can't upload
any overlapping chunks.

00:53:43.319 --> 00:53:46.889
But, stay tuned, we're hoping
to relax those requirements

00:53:46.889 --> 00:53:48.329
in the near future.

00:53:48.329 --> 00:53:48.999
JEFFREY POSNICK: Right.

00:53:48.999 --> 00:53:50.229
And, ending on a high note.

00:53:50.229 --> 00:53:53.249
Will there ever be a way to
download YouTube videos that

00:53:53.249 --> 00:53:55.199
does not violate the
terms of service?

00:53:55.199 --> 00:53:56.209
KUAN YONG: Well, the
answer is simple.

00:53:56.699 --> 00:53:57.049
No.

00:53:58.799 --> 00:54:02.829
Not so because we're terrible
people, but the license

00:54:02.829 --> 00:54:05.612
agreement that we have with
anybody who uploads a video to

00:54:05.612 --> 00:54:08.769
YouTube, you know, whether it's
your mom or some huge studio is

00:54:08.769 --> 00:54:12.059
that we'll use your videos only
for streaming purposes.

00:54:12.059 --> 00:54:16.430
So, any use cases that does not
involve streaming, cannot be

00:54:16.430 --> 00:54:17.310
supported through the API.

00:54:17.310 --> 00:54:18.849
So, no downloads.

00:54:18.849 --> 00:54:20.069
AUDIENCE: Now I
have a question.

00:54:20.400 --> 00:54:23.499
If I want to upload the video,
I'd like to make, I have new

00:54:23.499 --> 00:54:25.190
version of the temp video.

00:54:25.190 --> 00:54:28.140
But, I would like to keep
all of the data of the old.

00:54:28.140 --> 00:54:30.320
Because, it's new
version, not new video.

00:54:30.320 --> 00:54:31.610
Is there any way to keep that.

00:54:31.610 --> 00:54:34.080
For example, I do all the
advertising for a particular

00:54:34.080 --> 00:54:37.220
video, and now when they're
making a new version you need

00:54:37.220 --> 00:54:38.994
to replace all the odds,
and it takes a lot of

00:54:38.994 --> 00:54:40.940
time to improve them.

00:54:40.940 --> 00:54:41.319
KUAN YONG: Yeah.

00:54:41.319 --> 00:54:43.190
There's no way for us to
support that if you're

00:54:43.190 --> 00:54:46.049
just a regular user
uploading to YouTube.

00:54:46.699 --> 00:54:49.609
We do have some super high
tier content partners

00:54:49.609 --> 00:54:52.969
that require the ability
to swap out a video.

00:54:53.179 --> 00:54:55.479
But, we can't offer this
generally, because then you

00:54:55.479 --> 00:54:58.180
have a whole bunch of beat and
switch videos where somebody

00:54:58.180 --> 00:55:00.280
gets a video really popular,
and just kind of keeps

00:55:00.280 --> 00:55:02.120
swapping, you know, videos
into that same video ID.

00:55:02.120 --> 00:55:05.629
So, something like that
is going to be a dooz

00:55:05.629 --> 00:55:07.989
really, really easily.

00:55:07.989 --> 00:55:12.689
So, that's just the
reality of the situation.

00:55:13.630 --> 00:55:13.799
JEFFREY POSNICK: OK.

00:55:13.799 --> 00:55:17.209
I have a feeling we're
pretty much out of time.

00:55:17.209 --> 00:55:18.239
Thank you everybody.

00:55:19.299 --> 00:55:24.299
KUAN YONG: Thanks
for being Here.

