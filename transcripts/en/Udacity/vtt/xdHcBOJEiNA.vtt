WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:03.310
To test this architecture
on real devices,

00:00:03.310 --> 00:00:07.140
let's use WEBPAGETEST to take
a look at the weather app that

00:00:07.140 --> 00:00:10.170
you're going to be building
throughout this course.

00:00:10.170 --> 00:00:15.660
First, let's try using a Nexus 5
on a typical cable connection.

00:00:15.660 --> 00:00:18.496
We did a lot of work to
optimize the app, but

00:00:18.496 --> 00:00:23.660
it still takes 1.1 seconds until
there's anything on screen.

00:00:23.660 --> 00:00:27.340
And it takes 1.9 seconds to
completely render the page.

00:00:29.065 --> 00:00:34.375
Thanks to service workers, a repeat
visit achieves it's first meaningful

00:00:34.375 --> 00:00:40.105
paint after only 0.3 seconds and
is finished rendering at 0.6 seconds.

00:00:41.685 --> 00:00:44.545
What about on a slower connection?

00:00:44.545 --> 00:00:48.195
Let's try using a Nexus 5
on a typical 3G connection.

00:00:49.450 --> 00:00:53.670
The first time to meaningful
paint is now three seconds, and

00:00:53.670 --> 00:00:57.560
it took five seconds until
everything is finished rendering.

00:01:00.060 --> 00:01:02.850
Here's where we really see
the performance improvements of

00:01:02.850 --> 00:01:04.390
service workers.

00:01:04.390 --> 00:01:09.615
A repeat visit with service workers
enabled takes only 0.3 seconds for

00:01:09.615 --> 00:01:16.160
the first meaningful paint and
0.5 seconds until it's finish rendering.

00:01:16.160 --> 00:01:18.760
On a 3G connection
using service workers,

00:01:18.760 --> 00:01:22.240
we got a ten x performance boost.

00:01:22.240 --> 00:01:27.120
The visual complete event went
from 5 seconds to 0.5 seconds.

00:01:27.120 --> 00:01:30.890
If you have users on Edge,
the results are even more drastic.

00:01:30.890 --> 00:01:35.064
Instead of taking 13 seconds
to complete rendering,

00:01:35.064 --> 00:01:39.160
everything is now rendered
in 0.8 seconds, nice.

