WEBVTT
Kind: captions
Language: en

00:00:00.605 --> 00:00:01.730
RICH FULCHER: Good morning.

00:00:01.730 --> 00:00:03.969
Thank you all for
joining us today.

00:00:03.969 --> 00:00:06.510
We'll just start with a couple
of introductions and then dive

00:00:06.510 --> 00:00:08.029
right into the material.

00:00:08.029 --> 00:00:09.670
So I'm Rich Fulcher.

00:00:09.670 --> 00:00:10.879
DAVE CHIU: I'm Dave Chiu.

00:00:10.879 --> 00:00:11.920
ZACH GIBSON: Zach Gibson.

00:00:11.920 --> 00:00:13.400
BETHANY FONG: And
I'm Bethany Fong.

00:00:13.400 --> 00:00:15.270
RICH FULCHER: And
we're all designers

00:00:15.270 --> 00:00:18.760
working from across Google,
from Android to Chrome,

00:00:18.760 --> 00:00:22.300
concentrating on bringing
Material Design to Google's

00:00:22.300 --> 00:00:23.250
apps.

00:00:23.250 --> 00:00:25.114
And just personally,
we're really

00:00:25.114 --> 00:00:27.030
thrilled to be here this
morning to really get

00:00:27.030 --> 00:00:29.094
to show off this work
that we've been working on

00:00:29.094 --> 00:00:30.010
for quite a while now.

00:00:30.010 --> 00:00:32.049
So thanks for coming.

00:00:32.049 --> 00:00:34.970
Yesterday's keynote
introduced Material Design,

00:00:34.970 --> 00:00:38.020
which is a new visual
language focused

00:00:38.020 --> 00:00:41.300
on creating bold,
graphic interfaces.

00:00:41.300 --> 00:00:46.360
It takes the principles of
typography, position, scale,

00:00:46.360 --> 00:00:49.020
and color, and
uses those to build

00:00:49.020 --> 00:00:51.840
really wonderful interfaces.

00:00:51.840 --> 00:00:56.000
Material Design combines these
classic print design principles

00:00:56.000 --> 00:00:57.500
with the kind of
innovation that you

00:00:57.500 --> 00:01:00.470
can achieve through the
application of technology.

00:01:00.470 --> 00:01:04.550
It takes elements that were
formerly static and makes

00:01:04.550 --> 00:01:07.000
them reactive and responsive.

00:01:07.000 --> 00:01:11.310
It receives energy from the
user, from the user's finger,

00:01:11.310 --> 00:01:14.040
from their mouse click,
and it directs that energy

00:01:14.040 --> 00:01:18.370
to power transformation
and animation

00:01:18.370 --> 00:01:21.370
of the material itself.

00:01:21.370 --> 00:01:25.780
Material Design is also
one adaptive design.

00:01:25.780 --> 00:01:28.660
So it's a single
design system that

00:01:28.660 --> 00:01:32.420
covers handheld and web devices.

00:01:32.420 --> 00:01:35.840
It covers a variety of
different form factors.

00:01:35.840 --> 00:01:39.030
Now, this is important
because it enables the user

00:01:39.030 --> 00:01:42.470
to leverage the mastery
they gain in one context

00:01:42.470 --> 00:01:46.220
and apply it to another to get
that sense of intuitiveness

00:01:46.220 --> 00:01:48.660
that comes from being
able to do that.

00:01:48.660 --> 00:01:51.480
In this session,
we're going to discuss

00:01:51.480 --> 00:01:54.490
how Material Design
affects the way you design

00:01:54.490 --> 00:01:58.070
the interaction of
your applications.

00:01:58.070 --> 00:02:01.280
We're going to cover
three major topics today.

00:02:01.280 --> 00:02:04.700
We're going to start by talking
about the materials themselves

00:02:04.700 --> 00:02:06.970
and the properties
of those materials

00:02:06.970 --> 00:02:09.810
that guide how you use them.

00:02:09.810 --> 00:02:13.350
That will lead into a
discussion of structure, which

00:02:13.350 --> 00:02:15.570
will cover both the level
of how do I structure

00:02:15.570 --> 00:02:19.240
individual scenes or views
within my application,

00:02:19.240 --> 00:02:22.240
and then up to how do I
structure my entire app.

00:02:22.240 --> 00:02:24.800
And finally, we'll
end by looking

00:02:24.800 --> 00:02:28.170
at some of the standard
components that

00:02:28.170 --> 00:02:31.690
are kind of novel
for Material Design

00:02:31.690 --> 00:02:34.950
and go into a bit of detail
about how you can apply them

00:02:34.950 --> 00:02:37.050
that are particularly important.

00:02:37.050 --> 00:02:39.810
So since Material
is the metaphor that

00:02:39.810 --> 00:02:43.230
powers this entire system,
let's start by talking about two

00:02:43.230 --> 00:02:47.610
of the fundamental
ones-- paper and ink.

00:02:47.610 --> 00:02:50.525
DAVE CHIU: In Material Design,
every pixel drawn by an app

00:02:50.525 --> 00:02:52.480
is a dot of ink on
a piece of paper.

00:02:52.480 --> 00:02:54.700
Paper is, on its own, colorless.

00:02:54.700 --> 00:02:56.942
Ink can be any color.

00:02:56.942 --> 00:02:59.400
Each piece of paper wants to
be a simple shape with rounded

00:02:59.400 --> 00:03:02.590
corners-- a rectangle, a
square, or a circle, which

00:03:02.590 --> 00:03:06.070
is, after all, just a square
with extremely rounded corners.

00:03:06.070 --> 00:03:08.490
Paper does not want to
be a star or a triangle

00:03:08.490 --> 00:03:10.560
or the shape of your app icon.

00:03:10.560 --> 00:03:11.920
Ink is much less restricted.

00:03:11.920 --> 00:03:14.350
It can flow into any shape.

00:03:14.350 --> 00:03:16.625
Measured in the x- and
y-axes, both paper and ink

00:03:16.625 --> 00:03:18.470
can have any size.

00:03:18.470 --> 00:03:20.220
Paper can fill the
entire display such

00:03:20.220 --> 00:03:22.190
that you can't see
the edges, or it

00:03:22.190 --> 00:03:24.480
can be the size of
a single button.

00:03:24.480 --> 00:03:27.790
The size of ink is limited only
by its need to stay on paper.

00:03:27.790 --> 00:03:30.550
But paper has an
absolute fixed thickness

00:03:30.550 --> 00:03:33.360
equal to one DIP, or
Density Independent Pixel.

00:03:33.360 --> 00:03:35.620
Now, why is that important?

00:03:35.620 --> 00:03:39.560
Because we must now consider the
z-axis when laying out content.

00:03:39.560 --> 00:03:42.470
As a quick refresher, the z-axis
is perpendicular to both the x-

00:03:42.470 --> 00:03:45.540
and y-axes, allowing us to
position surfaces in front

00:03:45.540 --> 00:03:48.370
of or behind other surfaces.

00:03:48.370 --> 00:03:50.720
Paper surfaces are
intuitive and natural.

00:03:50.720 --> 00:03:52.710
But to maintain that
materiality, we layer

00:03:52.710 --> 00:03:54.460
and move them in ways
that could plausibly

00:03:54.460 --> 00:03:56.280
fit within these devices.

00:03:56.280 --> 00:03:58.300
This means we constrain
paper's behavior

00:03:58.300 --> 00:04:01.230
based on the perceived
z depth of the device.

00:04:01.230 --> 00:04:02.760
So for a phone,
that's the distance

00:04:02.760 --> 00:04:04.820
between your thumb on
the screen to the back

00:04:04.820 --> 00:04:07.190
of the phone against
the palm of your hand.

00:04:07.190 --> 00:04:09.450
Monitors and television
support perceived

00:04:09.450 --> 00:04:12.070
z depth greater than their
physical dimensions in part

00:04:12.070 --> 00:04:15.510
because we don't physically
handle the devices.

00:04:15.510 --> 00:04:17.550
The position of a piece
of paper gives the user

00:04:17.550 --> 00:04:20.640
hints about how it
relates to other paper.

00:04:20.640 --> 00:04:23.080
The dimensionality
invites interaction.

00:04:23.080 --> 00:04:24.900
When the user sees
a realistic shadow,

00:04:24.900 --> 00:04:27.660
they think there is a gap-- we
call it a step-- between two

00:04:27.660 --> 00:04:31.290
pieces of paper, and they will
behave and move independently.

00:04:31.290 --> 00:04:34.720
When there is no shadow between
two coplanar pieces of paper,

00:04:34.720 --> 00:04:37.182
the edge they share
is instead a seam.

00:04:37.182 --> 00:04:38.890
And the movement of
those pieces of paper

00:04:38.890 --> 00:04:40.500
will be linked together.

00:04:40.500 --> 00:04:43.400
Paper always occupies
a single z position.

00:04:43.400 --> 00:04:46.240
It is always flat, never
tilted so that one edge is

00:04:46.240 --> 00:04:48.680
closer than another to
the user, and it does not

00:04:48.680 --> 00:04:51.450
flip over to show
the other side.

00:04:51.450 --> 00:04:53.710
The z position of paper
is also a reflection

00:04:53.710 --> 00:04:55.370
of content hierarchy.

00:04:55.370 --> 00:04:57.350
Paper with a z position
closer to the user

00:04:57.350 --> 00:05:00.870
typically contains content
you want the user to focus on,

00:05:00.870 --> 00:05:02.850
such as a dialog
box, or when you

00:05:02.850 --> 00:05:04.820
select a date in the
calendar and it expands

00:05:04.820 --> 00:05:07.190
and moves forward from the grid.

00:05:07.190 --> 00:05:09.450
Paper with a z
position that's higher

00:05:09.450 --> 00:05:11.820
also tends to affect
underlying content.

00:05:11.820 --> 00:05:13.632
An obvious example is
a navigation drawer,

00:05:13.632 --> 00:05:15.090
which appears above
everything else

00:05:15.090 --> 00:05:17.150
because it changes
the displayed content.

00:05:17.150 --> 00:05:19.580
App bars are another
obvious example.

00:05:19.580 --> 00:05:20.970
With Material
Design, rather than

00:05:20.970 --> 00:05:23.560
thinking of depth as
ornament-- so adding a few drop

00:05:23.560 --> 00:05:25.740
shadows here and there
and calling it a day--

00:05:25.740 --> 00:05:29.120
use depth to help users
understand how your app works,

00:05:29.120 --> 00:05:32.250
how content is organized,
and the scope of actions.

00:05:32.250 --> 00:05:34.120
So let's talk about layout.

00:05:34.120 --> 00:05:36.280
How do we take all the
possibilities of this system

00:05:36.280 --> 00:05:38.530
and present them in a coherent
and consistent fashion?

00:05:45.685 --> 00:05:47.810
ZACH GIBSON: In all of our
Material Design layouts,

00:05:47.810 --> 00:05:51.320
we strive for consistency,
a cohesive experience

00:05:51.320 --> 00:05:53.380
across all of our apps.

00:05:53.380 --> 00:05:55.130
This starts with the
fundamental structure

00:05:55.130 --> 00:05:58.480
of how we build our
applications and layouts.

00:05:58.480 --> 00:06:00.430
The history of graphic
design has given us

00:06:00.430 --> 00:06:04.950
tools like key lines,
baseline grids, aspect ratios,

00:06:04.950 --> 00:06:07.420
and the use of incremental
spatial relationships

00:06:07.420 --> 00:06:08.780
in our designs.

00:06:08.780 --> 00:06:11.200
These tools are the
building blocks that we use

00:06:11.200 --> 00:06:13.850
and we need to create
consistency in our designs

00:06:13.850 --> 00:06:17.130
across mobile
tablet and desktop.

00:06:17.130 --> 00:06:19.440
Historically, the best
graphic design work

00:06:19.440 --> 00:06:21.550
has come from a deep
understanding of a grid

00:06:21.550 --> 00:06:24.930
structure, so that when it's
used to its full potential

00:06:24.930 --> 00:06:27.080
or even when something
breaks this grid structure,

00:06:27.080 --> 00:06:32.519
it can be done in exciting and
innovative and delightful ways.

00:06:32.519 --> 00:06:35.060
So there's a visual design talk
that's happening later today.

00:06:35.060 --> 00:06:38.010
And it's going to cover a bit
more details about the grid

00:06:38.010 --> 00:06:39.440
structure.

00:06:39.440 --> 00:06:40.960
But for this
presentation, it's just

00:06:40.960 --> 00:06:43.930
important to note that
our grid system is

00:06:43.930 --> 00:06:46.230
based on an 8-DIP increment.

00:06:46.230 --> 00:06:47.822
So it's nothing new, really.

00:06:47.822 --> 00:06:49.280
If you've been
working for the web,

00:06:49.280 --> 00:06:51.800
these are very familiar
and friendly numbers.

00:06:51.800 --> 00:06:55.600
You'll find that our headers,
icons, paper elements, padding,

00:06:55.600 --> 00:07:01.400
margins, buttons, et cetera are
all numbers like 16, 24, 32,

00:07:01.400 --> 00:07:04.790
96, 960, 1,024.

00:07:04.790 --> 00:07:05.590
You get the idea.

00:07:05.590 --> 00:07:08.390
They're all familiar and
friendly numbers to us.

00:07:08.390 --> 00:07:10.220
We're just baking
this into the system

00:07:10.220 --> 00:07:13.220
for the sake of consistency
and visual harmony across all

00:07:13.220 --> 00:07:14.680
of our screens.

00:07:14.680 --> 00:07:18.042
So with our grid now
in place, I think

00:07:18.042 --> 00:07:19.750
we're ready to start
designing some apps.

00:07:24.150 --> 00:07:27.370
RICH FULCHER: OK, so how do
the properties of paper and ink

00:07:27.370 --> 00:07:31.150
affect the way that you
actually structure your app?

00:07:31.150 --> 00:07:33.860
So when you construct
any particular screen,

00:07:33.860 --> 00:07:37.196
we've found it best
to start from paper.

00:07:37.196 --> 00:07:38.570
That's the material
that's really

00:07:38.570 --> 00:07:42.480
going to define the
architecture of any scene

00:07:42.480 --> 00:07:44.870
or view that you're
going to construct.

00:07:44.870 --> 00:07:47.730
And it's going to
call out what elements

00:07:47.730 --> 00:07:51.850
are surfaced above or below
or can move independently.

00:07:51.850 --> 00:07:54.439
You can always come back and do
ink as kind of a second pass.

00:07:54.439 --> 00:07:55.730
You've got your paper laid out.

00:07:55.730 --> 00:07:58.620
Then you can fill in as you
would just kind of draw it in,

00:07:58.620 --> 00:08:04.240
all of the controls, all of
the content, as a later action.

00:08:04.240 --> 00:08:06.820
We've spent a lot
of time actually

00:08:06.820 --> 00:08:10.760
cutting out pieces of paper and
layering them and moving them

00:08:10.760 --> 00:08:12.890
till we came up,
within the system,

00:08:12.890 --> 00:08:14.940
with views that made sense.

00:08:14.940 --> 00:08:17.510
I really got to hone
my scissor and glue

00:08:17.510 --> 00:08:21.210
skills working on this project.

00:08:21.210 --> 00:08:23.620
We even used things
like little wooden discs

00:08:23.620 --> 00:08:26.270
here to track the Floating
Action Button, which

00:08:26.270 --> 00:08:29.090
is a highlight component
within Material Design

00:08:29.090 --> 00:08:30.650
that Bethany will
go into more detail

00:08:30.650 --> 00:08:32.940
about in just a
couple of minutes.

00:08:32.940 --> 00:08:35.710
So playing with paper
is a great practice

00:08:35.710 --> 00:08:38.880
for just getting a sense of
how this design system works.

00:08:38.880 --> 00:08:40.770
It really gives
you a feel for how

00:08:40.770 --> 00:08:42.799
the surfaces will
interact with each other.

00:08:42.799 --> 00:08:45.090
When they approach
each other, does one

00:08:45.090 --> 00:08:47.430
lift to get out of
the way of the other?

00:08:47.430 --> 00:08:49.430
Do they move
together as a group?

00:08:49.430 --> 00:08:51.790
And just kind of shuffling
the paper around physically

00:08:51.790 --> 00:08:54.620
helps you just very quickly
get an understanding of that.

00:08:54.620 --> 00:08:58.090
It's a really fast,
really cheap, even kind

00:08:58.090 --> 00:09:01.050
of fun way of designing.

00:09:01.050 --> 00:09:04.040
So when we're talking about just
the structural possibilities

00:09:04.040 --> 00:09:07.150
for your app at the high
level, all of the possibilities

00:09:07.150 --> 00:09:10.630
that you're used to
seeing are still there.

00:09:10.630 --> 00:09:13.980
If your app wants to
use tabs, that's great.

00:09:13.980 --> 00:09:14.840
We support that.

00:09:14.840 --> 00:09:15.880
No worries.

00:09:15.880 --> 00:09:20.260
If you occasionally indulge in
using a left side navigation

00:09:20.260 --> 00:09:21.540
drawer, that's covered, too.

00:09:21.540 --> 00:09:23.530
That pattern's there.

00:09:23.530 --> 00:09:27.760
If your app is all about
search, we like search, too.

00:09:27.760 --> 00:09:30.040
That's a pattern that
you can support, as well.

00:09:30.040 --> 00:09:33.090
As a designer or developer
of your application,

00:09:33.090 --> 00:09:36.950
you are responsible for picking
the most appropriate pattern

00:09:36.950 --> 00:09:41.050
that's going to best serve
your users and their goals.

00:09:41.050 --> 00:09:44.350
So be sure to consider
all the possibilities.

00:09:44.350 --> 00:09:47.110
Now, each of those
will have its own set

00:09:47.110 --> 00:09:49.330
of advantages and disadvantages.

00:09:49.330 --> 00:09:52.940
I'll pick on the left navigation
drawer for just a moment here.

00:09:52.940 --> 00:09:55.260
This is a really
suitable pattern

00:09:55.260 --> 00:09:58.450
if you have a large number
of high-level views.

00:09:58.450 --> 00:10:01.140
It becomes, effectively,
this very convenient table

00:10:01.140 --> 00:10:04.230
of contents to your application
that the user can quickly

00:10:04.230 --> 00:10:06.950
access and scan and
jump to a section.

00:10:06.950 --> 00:10:10.850
It can also be really valuable
if your app has deep paths

00:10:10.850 --> 00:10:13.120
through its hierarchy,
where the user can go down,

00:10:13.120 --> 00:10:15.740
down, down to deeper
levels, because they

00:10:15.740 --> 00:10:18.080
can use the drawer
as a rapid mechanism

00:10:18.080 --> 00:10:20.840
for pivoting back and going
to a different top level

00:10:20.840 --> 00:10:25.620
without having to go up,
up, up first to do that.

00:10:25.620 --> 00:10:28.280
On the other hand, there
are drawbacks to the drawer.

00:10:28.280 --> 00:10:30.180
It's clearly not as
obvious as something

00:10:30.180 --> 00:10:33.830
like tabs, which are immediately
visible on the screen all

00:10:33.830 --> 00:10:35.950
of the time.

00:10:35.950 --> 00:10:39.330
It also may not be ideal if
the contents of the drawer

00:10:39.330 --> 00:10:42.720
are heterogeneous, if it's not
a standard list of categories

00:10:42.720 --> 00:10:45.190
or labels, because,
in that case,

00:10:45.190 --> 00:10:47.910
the user is going to need
to spend a little bit more

00:10:47.910 --> 00:10:50.660
time using your app to
familiarize themselves

00:10:50.660 --> 00:10:52.390
with what the content
of that drawer

00:10:52.390 --> 00:10:55.520
is, because they're not
seeing it all of the time.

00:10:55.520 --> 00:10:57.800
On the other other hand,
that could be valuable

00:10:57.800 --> 00:11:00.640
if you're trying to demote
some of that content,

00:11:00.640 --> 00:11:03.120
if those are less frequently
visited destinations

00:11:03.120 --> 00:11:06.430
that you want to politely
steer the user away from,

00:11:06.430 --> 00:11:09.210
but make accessible
in certain situations.

00:11:09.210 --> 00:11:11.465
So as every designer
always says, it depends.

00:11:15.219 --> 00:11:16.760
ZACH GIBSON: So the
previous examples

00:11:16.760 --> 00:11:18.926
that Rich showed and a lot
of the screens that we've

00:11:18.926 --> 00:11:20.550
been looking at are all mobile.

00:11:20.550 --> 00:11:23.520
But the basic structure
of our applications

00:11:23.520 --> 00:11:27.020
applies to mobile tablet
and desktop layouts.

00:11:27.020 --> 00:11:30.210
The tools that we have at
our disposal are all here.

00:11:30.210 --> 00:11:33.380
There's an app bar, there's
a canvas area with a Floating

00:11:33.380 --> 00:11:36.880
Action Button, there's an
occasional bottom bar and side

00:11:36.880 --> 00:11:40.330
navs that can be
accessed temporarily.

00:11:40.330 --> 00:11:42.640
From a structural standpoint,
we keep this stuff

00:11:42.640 --> 00:11:45.480
around no matter what
the screen size is.

00:11:45.480 --> 00:11:48.460
So as we move up in
the tablet, the app bar

00:11:48.460 --> 00:11:50.040
can absorb elements
that couldn't

00:11:50.040 --> 00:11:53.930
fit into the mobile screens,
and the side nav bars can still

00:11:53.930 --> 00:11:56.650
be accessed temporarily
as they were in mobile,

00:11:56.650 --> 00:12:00.020
or they can be pinned.

00:12:00.020 --> 00:12:02.880
Additionally, in our
desktop structure,

00:12:02.880 --> 00:12:05.800
the side nav bar as well
as content canvas area

00:12:05.800 --> 00:12:08.040
can have secondary
toolbars for things

00:12:08.040 --> 00:12:12.150
like tabs or palettes or
just secondary actions.

00:12:12.150 --> 00:12:14.290
As you'll notice
in Material Design,

00:12:14.290 --> 00:12:17.980
these structural elements
are all extremely flexible.

00:12:17.980 --> 00:12:20.620
They can move and
react to screen sizes

00:12:20.620 --> 00:12:23.740
and different contexts
in magical ways.

00:12:23.740 --> 00:12:25.740
So let's take a look at
some of the family shots

00:12:25.740 --> 00:12:30.130
that we have to see
what's happening.

00:12:30.130 --> 00:12:31.790
In this example
of a file browser,

00:12:31.790 --> 00:12:35.650
you can see a lot of the stuff
that we talked about in action.

00:12:35.650 --> 00:12:41.690
The header is extended based
on a default height of the app

00:12:41.690 --> 00:12:42.190
bar.

00:12:42.190 --> 00:12:43.565
And this is really
just to create

00:12:43.565 --> 00:12:45.560
a little bit of visual
hierarchy in the layout

00:12:45.560 --> 00:12:46.790
for the tiles and the list.

00:12:49.730 --> 00:12:51.480
As you can see on the
desktop screen here,

00:12:51.480 --> 00:12:54.035
the right nav is
pinned while browsing.

00:12:58.080 --> 00:13:01.490
In the mobile screen here, we
add intentional negative space

00:13:01.490 --> 00:13:05.130
between the line items
just to separate the items

00:13:05.130 --> 00:13:06.770
with something
other than a rule.

00:13:09.950 --> 00:13:12.100
And a similar app
structure is maintained

00:13:12.100 --> 00:13:13.740
throughout our layouts.

00:13:13.740 --> 00:13:16.280
And you can see that here by
the left nav being opened.

00:13:20.490 --> 00:13:23.760
Our responsive solutions
combine fixed, fluid,

00:13:23.760 --> 00:13:26.660
and sticky elements that should
be able to adapt to the way

00:13:26.660 --> 00:13:28.730
that people use their devices.

00:13:28.730 --> 00:13:31.440
You can see that here
by the mobile screen.

00:13:31.440 --> 00:13:33.690
The density of information
that's being shown

00:13:33.690 --> 00:13:35.520
relates to the
amount of information

00:13:35.520 --> 00:13:38.300
that people want to interact
with on their phone.

00:13:38.300 --> 00:13:40.320
On tablet, we can
add illustrations,

00:13:40.320 --> 00:13:43.620
we can add photographs, to make
a more immersive and playful

00:13:43.620 --> 00:13:44.760
experience.

00:13:44.760 --> 00:13:46.440
And then, when the
screen grows, we

00:13:46.440 --> 00:13:49.090
can add intentional
negative space again

00:13:49.090 --> 00:13:51.900
to separate content areas.

00:13:51.900 --> 00:13:53.440
The toolbar that's
being shown here

00:13:53.440 --> 00:13:55.370
is also extremely flexible.

00:13:55.370 --> 00:13:57.050
It can rest on a
background, it can

00:13:57.050 --> 00:13:59.350
be transparent over
an image, or it

00:13:59.350 --> 00:14:01.130
can fit within
any defined space.

00:14:04.770 --> 00:14:08.370
Our designs show a lot of
variations in the toolbars

00:14:08.370 --> 00:14:12.220
to make them generally
more useful and flexible.

00:14:12.220 --> 00:14:15.600
Sometimes, we extend the top bar
just to add a splash of color

00:14:15.600 --> 00:14:17.180
to our screens.

00:14:17.180 --> 00:14:21.600
We can use cards to
keep text line lengths

00:14:21.600 --> 00:14:24.180
at digestible sizes when
the screen gets bigger.

00:14:28.740 --> 00:14:33.490
Primary content can be higher in
z depth or closer to the glass.

00:14:33.490 --> 00:14:36.890
In this contacts screen, you
can see that a left nav also

00:14:36.890 --> 00:14:39.810
might be pinned and
scroll under the toolbar,

00:14:39.810 --> 00:14:44.090
while primary content in a card
might scroll over the toolbar.

00:14:44.090 --> 00:14:46.150
You can also see
here that what was

00:14:46.150 --> 00:14:48.340
full width on a
mobile screen is now

00:14:48.340 --> 00:14:51.065
a floating card or a
floating surface on desktop.

00:14:53.950 --> 00:14:55.540
You can also see one
of our designers.

00:14:59.510 --> 00:15:01.070
In this music
example, we're using

00:15:01.070 --> 00:15:02.510
a bottom bar for the player.

00:15:02.510 --> 00:15:05.570
We're using large
photographs in the background

00:15:05.570 --> 00:15:07.990
and dynamic color choices.

00:15:07.990 --> 00:15:10.400
We're also using a
Floating Action Button,

00:15:10.400 --> 00:15:12.850
this little blue Play button
in some of the screens

00:15:12.850 --> 00:15:15.730
here, just to add a
pop of color to screen.

00:15:15.730 --> 00:15:19.070
Bethany's going to talk a
little bit more about that.

00:15:19.070 --> 00:15:20.520
There's a lot of
structural nuance

00:15:20.520 --> 00:15:21.853
that's happening in this screen.

00:15:24.860 --> 00:15:27.420
Our toolbars can have
all types of content

00:15:27.420 --> 00:15:30.490
in them, from photographs
to input fields.

00:15:30.490 --> 00:15:34.810
And we can use typographic
scale by having dynamic type.

00:15:38.530 --> 00:15:41.540
Menus that generate
from toolbars,

00:15:41.540 --> 00:15:44.530
they can come above other
elements in z depth.

00:15:44.530 --> 00:15:48.240
And this plays into our story
of real materials in real space

00:15:48.240 --> 00:15:49.570
that can do magical things.

00:15:54.060 --> 00:15:56.100
And not all of our
toolbars are pinned

00:15:56.100 --> 00:15:58.020
to the top in a colored bar.

00:15:58.020 --> 00:16:00.010
They can be associated
with a surface that's

00:16:00.010 --> 00:16:01.570
currently in focus.

00:16:01.570 --> 00:16:03.810
So if you imagine this
toolbar here associated

00:16:03.810 --> 00:16:08.350
with this list view,
when it scrolls down,

00:16:08.350 --> 00:16:09.810
that toolbar might come with it.

00:16:12.350 --> 00:16:14.681
So how does all of
this content move?

00:16:14.681 --> 00:16:17.180
There's going to be a lot more
details covered in the motion

00:16:17.180 --> 00:16:19.610
talk that's happening
later today.

00:16:19.610 --> 00:16:23.550
But let's talk a little
bit about scrolling.

00:16:23.550 --> 00:16:26.820
This is a common scrolling
pattern that's happening here.

00:16:26.820 --> 00:16:30.280
Content moves up, the
app bar scrolls off.

00:16:30.280 --> 00:16:34.860
And the status bar
picks up a little bit

00:16:34.860 --> 00:16:37.670
of the color of the
application and sticks around,

00:16:37.670 --> 00:16:40.880
which is something
new with Material.

00:16:40.880 --> 00:16:43.900
Also, when a user
scrolls back here,

00:16:43.900 --> 00:16:45.679
the toolbar can come
back at a little bit

00:16:45.679 --> 00:16:47.220
of a different pace
than the content.

00:16:51.380 --> 00:16:52.930
In this example,
you can see how we

00:16:52.930 --> 00:16:55.770
think of the top
toolbar in blocks.

00:16:55.770 --> 00:16:58.360
There's one block that contains
the search field and another

00:16:58.360 --> 00:17:00.790
that contains tabs.

00:17:00.790 --> 00:17:04.240
On scroll, these are
handled independently.

00:17:04.240 --> 00:17:07.349
So here, we're pushing
off the top search bar

00:17:07.349 --> 00:17:08.849
and keeping the tabs.

00:17:08.849 --> 00:17:13.460
And this is dependent on the
context of the application.

00:17:13.460 --> 00:17:17.920
You can also see that, on
the slightest downward pull,

00:17:17.920 --> 00:17:19.025
the search bar comes back.

00:17:23.230 --> 00:17:25.819
This is where things
get really exciting.

00:17:25.819 --> 00:17:28.260
We can have
photographs that morph

00:17:28.260 --> 00:17:31.890
into colored bars
on our toolbars.

00:17:31.890 --> 00:17:36.770
We can have dynamic
UI that removes itself

00:17:36.770 --> 00:17:38.920
from the screen
in different ways.

00:17:38.920 --> 00:17:43.180
Our typography can
scale and move.

00:17:43.180 --> 00:17:45.980
Scrolling and the
way that things move

00:17:45.980 --> 00:17:50.100
is very much dependent on
content and the context

00:17:50.100 --> 00:17:52.244
and the containers
that hold our content.

00:17:52.244 --> 00:17:53.660
So with that in
mind, Dave's going

00:17:53.660 --> 00:17:54.935
to talk more about components.

00:17:57.315 --> 00:17:59.190
DAVE CHIU: So now that
we've covered Material

00:17:59.190 --> 00:18:01.770
and how it's structured,
let's take a closer look

00:18:01.770 --> 00:18:02.980
at some of the bits
and pieces that make up

00:18:02.980 --> 00:18:04.771
an interface and some
of the best practices

00:18:04.771 --> 00:18:06.289
for implementing them.

00:18:06.289 --> 00:18:08.580
At a high level, one key
thing you typically want to do

00:18:08.580 --> 00:18:12.100
is organize information to
help your users make decisions.

00:18:12.100 --> 00:18:15.830
We support the expected forms
of content organization-- lists,

00:18:15.830 --> 00:18:18.370
grids, and now, formally, cards.

00:18:18.370 --> 00:18:20.470
Lists and grids are familiar
and well understood.

00:18:20.470 --> 00:18:23.580
Lists are great for text, and
grids are great for images.

00:18:23.580 --> 00:18:25.980
But the question of why
and when to use cards

00:18:25.980 --> 00:18:28.090
has been a point of some
uncertainty in the past.

00:18:28.090 --> 00:18:31.560
So here's some more
concrete guidelines.

00:18:31.560 --> 00:18:33.680
Cards are great for
displaying a set of data

00:18:33.680 --> 00:18:35.870
with different content types.

00:18:35.870 --> 00:18:38.510
Google now is a perfect
example-- stock quotes,

00:18:38.510 --> 00:18:41.880
weather, directions,
World Cup scores--

00:18:41.880 --> 00:18:44.980
as a little aside here, any
spontaneous booing or cheering

00:18:44.980 --> 00:18:48.059
during our talk will
not be taken personally.

00:18:48.059 --> 00:18:49.850
Each card can have a
dramatically different

00:18:49.850 --> 00:18:52.080
presentation, so making them
separate pieces of paper

00:18:52.080 --> 00:18:53.470
makes sense.

00:18:53.470 --> 00:18:56.240
Cards are malleable and
can easily handle data sets

00:18:56.240 --> 00:18:59.140
where content varies in
length from item to item.

00:18:59.140 --> 00:19:02.270
In comparison, lists and
grids have a natural bias

00:19:02.270 --> 00:19:05.550
towards regularity,
making them best

00:19:05.550 --> 00:19:07.930
for consistently
structured data.

00:19:07.930 --> 00:19:10.520
Each card can contain
a heterogeneous mix

00:19:10.520 --> 00:19:12.760
of media, text,
controls, and actions

00:19:12.760 --> 00:19:14.530
related to a single subject.

00:19:14.530 --> 00:19:17.800
Cards give you the flexibility
to combine and create complex

00:19:17.800 --> 00:19:21.300
compositions of content and
actions, such as +1 buttons,

00:19:21.300 --> 00:19:23.550
sliders, and comments, in
a way that lists and grids

00:19:23.550 --> 00:19:26.530
aren't simply
designed to handle.

00:19:26.530 --> 00:19:28.790
But just because
you can use cards

00:19:28.790 --> 00:19:30.710
does not mean you
should use them.

00:19:30.710 --> 00:19:33.260
When deciding between
lists, grids, or cards,

00:19:33.260 --> 00:19:37.180
first ask yourself, how can I
best support my user's goals?

00:19:37.180 --> 00:19:38.930
Are they trying to
find a specific thing,

00:19:38.930 --> 00:19:40.780
like a photo or a file?

00:19:40.780 --> 00:19:42.740
Grids and lists have
a consistent rhythm

00:19:42.740 --> 00:19:45.420
and composition that
makes them easy to scan

00:19:45.420 --> 00:19:47.900
and well suited for
quick comparison.

00:19:47.900 --> 00:19:50.130
In contrast, cards are
harder to scan through

00:19:50.130 --> 00:19:51.890
because of their
irregular cadence.

00:19:51.890 --> 00:19:55.280
But they are great for browsing
diverse content and layouts.

00:19:55.280 --> 00:19:58.510
As these examples show, adding
more pieces of paper, more ink,

00:19:58.510 --> 00:20:01.840
and more shadows to the screen
increases noise and distraction

00:20:01.840 --> 00:20:03.810
without increasing clarity.

00:20:03.810 --> 00:20:05.480
Remember, you can
always split an item

00:20:05.480 --> 00:20:07.970
into its own piece of paper
the instant it's needed.

00:20:07.970 --> 00:20:10.590
So that's a brief overview of
containers and some guidelines

00:20:10.590 --> 00:20:12.580
around when to use each type.

00:20:12.580 --> 00:20:14.830
Bethany will now cover more
of the components and best

00:20:14.830 --> 00:20:17.246
practices to use when building
Material Design interfaces.

00:20:20.432 --> 00:20:22.890
BETHANY FONG: So we looked at
all the standard UI elements,

00:20:22.890 --> 00:20:25.950
like buttons, text
fields, and switches,

00:20:25.950 --> 00:20:28.190
from a Material
Design perspective

00:20:28.190 --> 00:20:30.100
so that they, too,
will help you create

00:20:30.100 --> 00:20:32.430
one adaptive design
for your app.

00:20:32.430 --> 00:20:34.710
And these goals of
moderating complexity

00:20:34.710 --> 00:20:36.570
and of reacting
appropriately extend

00:20:36.570 --> 00:20:39.070
into all of our elements.

00:20:39.070 --> 00:20:41.690
Our controls are designed to
be consistent with the larger

00:20:41.690 --> 00:20:43.120
visual story.

00:20:43.120 --> 00:20:45.320
We use simple geometric
shapes to build

00:20:45.320 --> 00:20:48.900
more complex, but still
cohesive, components.

00:20:48.900 --> 00:20:50.750
And by building
with paper and ink,

00:20:50.750 --> 00:20:54.550
our components have an enhanced
ability to react to the user.

00:20:54.550 --> 00:20:57.330
For example, as elements
come into focus,

00:20:57.330 --> 00:20:59.520
they become alive,
hinting at what's

00:20:59.520 --> 00:21:02.120
to come by ebbing and
flowing between the rest

00:21:02.120 --> 00:21:04.490
and the pressed state,
through diffusing ink

00:21:04.490 --> 00:21:08.180
and traveling
through the z space.

00:21:08.180 --> 00:21:10.540
Element states have
been simplified to help

00:21:10.540 --> 00:21:12.960
as you design
across form factors.

00:21:12.960 --> 00:21:15.170
All of the element
states are coordinated

00:21:15.170 --> 00:21:17.940
so that the same element
will function correctly

00:21:17.940 --> 00:21:21.270
in a design that is being used
with different input methods.

00:21:21.270 --> 00:21:24.010
You can see that each
input method works nicely

00:21:24.010 --> 00:21:27.040
with the others without having
to duplicate your control

00:21:27.040 --> 00:21:28.360
states.

00:21:28.360 --> 00:21:31.080
And as you create custom
controls for your own app,

00:21:31.080 --> 00:21:33.430
you may want to follow a
similar approach for quicker

00:21:33.430 --> 00:21:33.971
adaptability.

00:21:36.320 --> 00:21:38.400
I'm going to talk in more
detail about buttons.

00:21:38.400 --> 00:21:40.010
There are three
styles of buttons,

00:21:40.010 --> 00:21:43.202
and each is appropriate for
different circumstances.

00:21:43.202 --> 00:21:44.660
The Floating Action
Button is known

00:21:44.660 --> 00:21:47.040
by its shorthand, the FAB.

00:21:47.040 --> 00:21:49.270
The FAB is the newest
and has the most unique

00:21:49.270 --> 00:21:52.310
characteristics, while the
others are more familiar.

00:21:52.310 --> 00:21:54.060
Both the FAB and
the raised buttons

00:21:54.060 --> 00:21:56.580
are made of paper
in Material Design,

00:21:56.580 --> 00:21:58.580
and the flat button
is made of ink.

00:22:01.310 --> 00:22:03.210
This pyramid illustrates
the frequency

00:22:03.210 --> 00:22:05.640
of use of different
button styles.

00:22:05.640 --> 00:22:08.010
The FAB is the strongest
in the visual hierarchy

00:22:08.010 --> 00:22:09.720
and is most rarely used.

00:22:09.720 --> 00:22:11.270
It's special.

00:22:11.270 --> 00:22:15.150
The raised button is used more
commonly, but still sparingly.

00:22:15.150 --> 00:22:18.000
It's quite visible, but
because it doesn't float

00:22:18.000 --> 00:22:21.160
means it doesn't respond to z
space changes in the same way

00:22:21.160 --> 00:22:22.760
that the FAB does.

00:22:22.760 --> 00:22:24.400
And finally, there
is the flat button,

00:22:24.400 --> 00:22:28.339
a very commonly used control.

00:22:28.339 --> 00:22:30.130
So I heard in the
session yesterday there's

00:22:30.130 --> 00:22:33.600
a really good question
that was, basically,

00:22:33.600 --> 00:22:35.700
what are all the
circles on the screen?

00:22:35.700 --> 00:22:36.520
And here it is.

00:22:36.520 --> 00:22:38.360
It's the FAB.

00:22:38.360 --> 00:22:42.000
So it represents the single
hallmark action for a screen.

00:22:42.000 --> 00:22:45.400
It's a tool for you to call
out the key parts of your app's

00:22:45.400 --> 00:22:47.130
product story.

00:22:47.130 --> 00:22:48.570
It should be used
for actions that

00:22:48.570 --> 00:22:51.350
are strongly
characteristic of your app.

00:22:51.350 --> 00:22:53.150
Pausing or resuming
playback tells me

00:22:53.150 --> 00:22:55.050
that this is a music app.

00:22:55.050 --> 00:22:58.610
Or driving directions tells
me that this is a maps app.

00:22:58.610 --> 00:23:00.670
Not every screen
should use a FAB,

00:23:00.670 --> 00:23:04.270
because not every screen has
an action with this importance.

00:23:04.270 --> 00:23:07.180
It doesn't really have
the right type of data.

00:23:07.180 --> 00:23:10.840
It's a natural cue for telling
users what to do next, also.

00:23:10.840 --> 00:23:13.540
So in user research, we found
that users understood it

00:23:13.540 --> 00:23:15.420
as a way-finding tool.

00:23:15.420 --> 00:23:18.260
Research shows that, when
faced with an onslaught

00:23:18.260 --> 00:23:22.210
of unfamiliar screens, as many
users do on a regular basis,

00:23:22.210 --> 00:23:25.270
like when they install your
app for the first time,

00:23:25.270 --> 00:23:27.520
they started using
the FAB to navigate.

00:23:27.520 --> 00:23:29.220
And users discovered
that it was really

00:23:29.220 --> 00:23:31.793
useful as a signpost
of what's important.

00:23:34.420 --> 00:23:36.430
And here, the FAB is
being used in a variety

00:23:36.430 --> 00:23:38.250
of different types of apps.

00:23:38.250 --> 00:23:42.100
You can see how it highlights a
hallmark action for each app--

00:23:42.100 --> 00:23:45.120
compose for a messaging app,
add files for a storage app,

00:23:45.120 --> 00:23:46.092
and so on.

00:23:46.092 --> 00:23:47.550
And you've probably
noticed that it

00:23:47.550 --> 00:23:49.250
can be placed around the screen.

00:23:49.250 --> 00:23:50.780
And we have a few
recommended places

00:23:50.780 --> 00:23:54.420
that work pretty well, like in
the lower right-hand corner.

00:23:54.420 --> 00:23:56.500
The FAB is also
the first element

00:23:56.500 --> 00:23:58.350
that is allowed
to straddle a seam

00:23:58.350 --> 00:24:00.580
or allowed the hang
over a paper edge,

00:24:00.580 --> 00:24:02.950
such as in the
screen for people.

00:24:02.950 --> 00:24:06.050
And also note that there's
only one FAB per screen.

00:24:06.050 --> 00:24:08.520
There should never be multiple
on screen at one time,

00:24:08.520 --> 00:24:12.510
as that confuses our
visual hierarchical goal.

00:24:12.510 --> 00:24:15.500
You can use your app's
accent color for your FAB.

00:24:15.500 --> 00:24:17.632
Just make sure that you
retain adequate contrast

00:24:17.632 --> 00:24:18.465
from the background.

00:24:21.730 --> 00:24:23.510
Because the FAB
is character-ful,

00:24:23.510 --> 00:24:25.280
it's generally a
positive action,

00:24:25.280 --> 00:24:31.280
like create, favorite, share,
navigate, explore, and so on.

00:24:31.280 --> 00:24:34.220
And unless it's truly
the hallmark of an app,

00:24:34.220 --> 00:24:38.380
FAB shouldn't be destructive
actions, like archive or trash.

00:24:38.380 --> 00:24:40.720
They also shouldn't
be unspecific

00:24:40.720 --> 00:24:44.950
or alerts, limited actions
like cutting and pasting text,

00:24:44.950 --> 00:24:46.920
or stuff that should
really been in a toolbar,

00:24:46.920 --> 00:24:48.570
like changing the volume.

00:24:48.570 --> 00:24:50.430
Basically, the
function should be

00:24:50.430 --> 00:24:52.230
an action that makes
your user feel really

00:24:52.230 --> 00:24:54.400
positive about using
the FAB and never

00:24:54.400 --> 00:24:58.070
worried it's going to
do something wrong.

00:24:58.070 --> 00:25:00.100
So it's not just a round button.

00:25:00.100 --> 00:25:02.330
It has some
transformative properties

00:25:02.330 --> 00:25:04.065
that you'll be able
to use to help ease

00:25:04.065 --> 00:25:06.260
your users from
screen to screen.

00:25:06.260 --> 00:25:08.615
It can expand, morph, and react.

00:25:11.890 --> 00:25:14.230
The FAB can replace
itself with a sequence

00:25:14.230 --> 00:25:16.720
of more specific of actions.

00:25:16.720 --> 00:25:19.640
This helps surface a set that
don't really belong at the top,

00:25:19.640 --> 00:25:21.230
but are still important.

00:25:21.230 --> 00:25:24.290
And you can design them to
be contextual to your users.

00:25:24.290 --> 00:25:27.110
Imagine a user tapping the
FAB and their favorite people

00:25:27.110 --> 00:25:29.270
expanding out as contacts.

00:25:29.270 --> 00:25:32.060
And these do need to be tightly
related actions, as well

00:25:32.060 --> 00:25:34.820
as ones which can be understood
through the simple initial

00:25:34.820 --> 00:25:36.070
icon.

00:25:36.070 --> 00:25:40.220
So for example, if an add FAB
hides the search function,

00:25:40.220 --> 00:25:43.870
users won't naturally think
to look there for search.

00:25:43.870 --> 00:25:47.130
And lastly, don't turn your
FAB into an action overflow.

00:25:47.130 --> 00:25:51.000
Those still belong
in the app bar.

00:25:51.000 --> 00:25:53.060
So because the FAB is
made of floating paper,

00:25:53.060 --> 00:25:55.180
it can morph into
a new surface that

00:25:55.180 --> 00:25:57.180
allows for richer interactions.

00:25:57.180 --> 00:25:59.320
For example, you
can have a new Post

00:25:59.320 --> 00:26:02.680
FAB, which enlarges directly
into a composition field

00:26:02.680 --> 00:26:05.280
or into an open
camera viewfinder.

00:26:05.280 --> 00:26:07.730
It's not just a fancy
or dropdown menu.

00:26:07.730 --> 00:26:11.040
You're making your hero
action even more heroic

00:26:11.040 --> 00:26:13.130
and reinforcing
the sense that this

00:26:13.130 --> 00:26:17.240
is a core usage of your app.

00:26:17.240 --> 00:26:19.340
As you recall, FABs
can be positioned

00:26:19.340 --> 00:26:21.750
along steps or seams of paper.

00:26:21.750 --> 00:26:25.420
And as that paper moves, the FAB
can transfer its anchor point.

00:26:25.420 --> 00:26:27.750
Reactions can be
simple as shifting

00:26:27.750 --> 00:26:30.960
a FAB's position in response
to other paper moving,

00:26:30.960 --> 00:26:32.970
like in Zach's example.

00:26:32.970 --> 00:26:34.960
Or as a user
scrolls down a page,

00:26:34.960 --> 00:26:38.490
the FAB can hop locations from
scene to scene or even off

00:26:38.490 --> 00:26:40.630
to a floating
position so that users

00:26:40.630 --> 00:26:44.420
don't lose sight of that
important FAB function.

00:26:44.420 --> 00:26:46.680
So with that, you
should have a picture

00:26:46.680 --> 00:26:48.989
of what the new Material
Design elements are like

00:26:48.989 --> 00:26:50.530
and what the FAB
can do for your app.

00:26:54.240 --> 00:26:55.790
RICH FULCHER: So
we've covered kind

00:26:55.790 --> 00:26:57.740
of the basics of
Material Design, how

00:26:57.740 --> 00:26:58.930
the materials behave.

00:26:58.930 --> 00:27:01.870
We've talked about layout,
we've talked about structure,

00:27:01.870 --> 00:27:05.070
we highlighted a couple
of key components.

00:27:05.070 --> 00:27:07.676
But as developers and designers
who already have apps,

00:27:07.676 --> 00:27:09.800
the question on your mind
is probably, what's next?

00:27:09.800 --> 00:27:12.200
How do I take these
Material Design principles,

00:27:12.200 --> 00:27:15.440
this new system, and
apply it to my apps?

00:27:15.440 --> 00:27:17.170
The good news is we
haven't thrown out

00:27:17.170 --> 00:27:18.340
anything you already know.

00:27:18.340 --> 00:27:20.547
So all of the components
that you're used to using,

00:27:20.547 --> 00:27:21.380
they're still there.

00:27:21.380 --> 00:27:22.320
They're still supported.

00:27:22.320 --> 00:27:24.070
We've given them a
little bit of a refresh

00:27:24.070 --> 00:27:26.790
to make them more
reactive, more alive.

00:27:26.790 --> 00:27:30.110
But they're still there, and
you can still count on them.

00:27:30.110 --> 00:27:34.380
As announced yesterday, there is
a preview release of our new UI

00:27:34.380 --> 00:27:41.160
guidelines available at
www.google.com/design.

00:27:41.160 --> 00:27:44.620
And this covers all of
the standard components

00:27:44.620 --> 00:27:46.760
that we didn't address
today that haven't changed.

00:27:46.760 --> 00:27:49.080
So you can see all
of those elements.

00:27:49.080 --> 00:27:52.110
You can get all the
updated guidance on those.

00:27:52.110 --> 00:27:53.600
It's also packed with examples.

00:27:53.600 --> 00:27:56.640
So you may see in those
examples something that

00:27:56.640 --> 00:27:59.620
inspires you to think about
the design of your app

00:27:59.620 --> 00:28:03.510
or part of your app in a
slightly different way.

00:28:03.510 --> 00:28:06.370
Here's a screenshot from
the spec covering the layout

00:28:06.370 --> 00:28:09.470
chapter, just showing
a few wire frames.

00:28:09.470 --> 00:28:13.200
And it clearly shows the
application of the 8-DIP grid

00:28:13.200 --> 00:28:14.170
that Zach talked about.

00:28:14.170 --> 00:28:19.450
And you can see some of
the key lines called out.

00:28:19.450 --> 00:28:21.690
All of these guides have
been responsibly designed

00:28:21.690 --> 00:28:25.460
so that they'll work well on
desktop, on tablet, on phone.

00:28:25.460 --> 00:28:27.900
You can check them
on any of the devices

00:28:27.900 --> 00:28:30.050
that you're designing for.

00:28:30.050 --> 00:28:32.860
I wouldn't read them on
your new fancy Android Wear.

00:28:32.860 --> 00:28:36.220
But everything else
we've got covered.

00:28:36.220 --> 00:28:37.720
So this site will
continue to evolve

00:28:37.720 --> 00:28:40.740
as our frameworks update.

00:28:40.740 --> 00:28:43.480
There are also a lot of
really helpful resources,

00:28:43.480 --> 00:28:46.910
particularly for interaction
designers, on this site.

00:28:46.910 --> 00:28:50.440
So we offer a bunch
of layout templates

00:28:50.440 --> 00:28:52.250
for the standard views.

00:28:52.250 --> 00:28:55.565
We have sticker sheets of
all of the component types.

00:28:55.565 --> 00:28:57.190
And if you're thinking
Android, they're

00:28:57.190 --> 00:29:00.600
in light and dark
theme available there.

00:29:00.600 --> 00:29:04.200
And then there are also color
palettes, icon sets, advice

00:29:04.200 --> 00:29:08.240
or animation, lots and
lots of content there.

00:29:08.240 --> 00:29:11.590
But we'd like to leave
you with a challenge.

00:29:11.590 --> 00:29:14.300
And that is to
think about not just

00:29:14.300 --> 00:29:17.170
how you can make your app more
attractive, more delightful

00:29:17.170 --> 00:29:19.010
by applying Material
Design to it.

00:29:19.010 --> 00:29:22.100
But how can you use these
principles to actually make

00:29:22.100 --> 00:29:24.920
your app easier to use?

00:29:24.920 --> 00:29:29.110
And one way to start on that is
to question some of the design

00:29:29.110 --> 00:29:31.260
decisions you may
have already made.

00:29:31.260 --> 00:29:33.590
So let's start with the
biggest one, the question of,

00:29:33.590 --> 00:29:35.870
how do I structure
my application?

00:29:35.870 --> 00:29:37.660
We talked about
structuring based

00:29:37.660 --> 00:29:39.400
on hierarchy in this talk.

00:29:39.400 --> 00:29:40.900
But another way of
thinking about it

00:29:40.900 --> 00:29:44.710
might be to structure
based on motion,

00:29:44.710 --> 00:29:46.930
planning for all the
different surfaces

00:29:46.930 --> 00:29:49.680
that you want to have moving
between the different views

00:29:49.680 --> 00:29:50.872
within your application.

00:29:50.872 --> 00:29:53.080
And what are those elements
that should be lifted up,

00:29:53.080 --> 00:29:56.860
that are important, that want
to get that signature treatment?

00:29:56.860 --> 00:30:00.020
Motion provides
meaning to the user.

00:30:00.020 --> 00:30:04.090
It is a form of feedback which
focuses the user's attention.

00:30:04.090 --> 00:30:05.760
And it builds a
sense of continuity

00:30:05.760 --> 00:30:09.820
between different states
within your application.

00:30:09.820 --> 00:30:14.630
So relatedly, how do
you move to a model that

00:30:14.630 --> 00:30:17.460
is-- the old model
we've been building in

00:30:17.460 --> 00:30:20.505
is this kind of screen,
screen, screen style

00:30:20.505 --> 00:30:23.150
of design, where I start
at the top of my app,

00:30:23.150 --> 00:30:25.640
and then I build all
the intermediary screens

00:30:25.640 --> 00:30:27.140
till I get to the
bottom of the app.

00:30:27.140 --> 00:30:30.430
And we just kind of realize
those one at a time.

00:30:30.430 --> 00:30:32.990
We can do something
much more fluid now.

00:30:32.990 --> 00:30:37.550
We can use transitions to give
the user the sense that they

00:30:37.550 --> 00:30:41.850
can do more work in fewer
places within the app

00:30:41.850 --> 00:30:45.990
by just transforming the
context slightly for them.

00:30:45.990 --> 00:30:48.970
So we can use animation
to guide the user here,

00:30:48.970 --> 00:30:51.450
rather than just dropping them
into some new context where

00:30:51.450 --> 00:30:54.620
they have to reorient
themselves after they've

00:30:54.620 --> 00:30:57.030
landed from the teleport.

00:30:57.030 --> 00:30:59.860
You can guide them
more easily, build up

00:30:59.860 --> 00:31:02.580
more of that sense of
direction and connection

00:31:02.580 --> 00:31:06.090
between these
different conditions.

00:31:06.090 --> 00:31:08.190
And think about what
you would do for the FAB

00:31:08.190 --> 00:31:10.760
if it's appropriate
for your screen.

00:31:10.760 --> 00:31:14.420
What is that hallmark
application or that hallmark

00:31:14.420 --> 00:31:15.960
action that you'd
want affiliated

00:31:15.960 --> 00:31:17.340
with your application?

00:31:17.340 --> 00:31:19.220
Or think of it this
way-- what's that action

00:31:19.220 --> 00:31:23.050
that you want to clearly show
in the screenshot promoting

00:31:23.050 --> 00:31:26.405
your app that shows up in the
detail page of a store listing?

00:31:26.405 --> 00:31:28.780
What's the thing anybody
looking at that should take away

00:31:28.780 --> 00:31:32.760
and say, oh, this app does this?

00:31:32.760 --> 00:31:37.360
And in general, how can you
lean into the frameworks more?

00:31:37.360 --> 00:31:39.590
Are there things that
you're doing currently

00:31:39.590 --> 00:31:41.470
in a custom way
that no longer need

00:31:41.470 --> 00:31:43.450
to be custom, that can
take advantage of some

00:31:43.450 --> 00:31:46.000
of the new APIs
that are present?

00:31:46.000 --> 00:31:50.570
Can you make your code
base faster, smaller,

00:31:50.570 --> 00:31:55.370
easier to maintain by relying
on the framework more?

00:31:55.370 --> 00:31:57.720
There are three more
excellent sessions today

00:31:57.720 --> 00:32:00.450
covering different aspects
of Material Design.

00:32:00.450 --> 00:32:02.640
There's one starting
at the top of the hour.

00:32:02.640 --> 00:32:05.640
And then, later today, we
have sessions specifically

00:32:05.640 --> 00:32:09.260
on visual design and
on motion design.

00:32:09.260 --> 00:32:11.420
We also have the Sandbox space.

00:32:11.420 --> 00:32:15.600
If you've come by there, you've
seen the new UI guidelines

00:32:15.600 --> 00:32:18.000
projected on giant
touch screens.

00:32:18.000 --> 00:32:20.400
We'll have a couple of
small, short talks there.

00:32:20.400 --> 00:32:23.940
I'll give a talk at 2:00
on a little bit more detail

00:32:23.940 --> 00:32:26.750
about using paper and
ink and how those work.

00:32:26.750 --> 00:32:29.270
But all of the designers
here, as well as others,

00:32:29.270 --> 00:32:30.210
will be in that space.

00:32:30.210 --> 00:32:32.793
It's a really great opportunity
to ask any questions you might

00:32:32.793 --> 00:32:34.730
have and just come
by and say hi.

00:32:34.730 --> 00:32:36.764
We're happy to meet you.

00:32:36.764 --> 00:32:38.930
And with that, thank you
very much for your interest

00:32:38.930 --> 00:32:40.485
and for your attention today.

00:32:40.485 --> 00:32:48.260
[APPLAUSE]

00:32:48.260 --> 00:32:49.954
And we'll happily
take a few questions

00:32:49.954 --> 00:32:50.995
in the time that remains.

00:32:54.990 --> 00:32:56.490
MALE SPEAKER: Hello,
I'm [? Akeel ?]

00:32:56.490 --> 00:32:58.080
from the University of Maryland.

00:32:58.080 --> 00:33:01.120
And I just had a question
about the navigation drawer.

00:33:01.120 --> 00:33:06.700
What were the reasons behind
moving the hamburger icon

00:33:06.700 --> 00:33:12.860
from halfway beyond the
edge to into the screen?

00:33:12.860 --> 00:33:13.680
RICH FULCHER: OK.

00:33:13.680 --> 00:33:17.370
I think this question maybe
relates most to Android.

00:33:17.370 --> 00:33:21.260
So formerly, in Android, you'd
have the application icon

00:33:21.260 --> 00:33:27.890
and then a hint of the drawer
indicator icon beside it.

00:33:27.890 --> 00:33:31.710
Part of Material has moved
away from using the app icon

00:33:31.710 --> 00:33:34.850
as the visual identifier
of where you are.

00:33:34.850 --> 00:33:39.090
And we tried to encourage
developers to express the app's

00:33:39.090 --> 00:33:42.520
identity more through
those standards of color

00:33:42.520 --> 00:33:46.070
and typography and treatment
to make each view more

00:33:46.070 --> 00:33:48.410
character-ful and more
immediately recognizable.

00:33:48.410 --> 00:33:50.870
So as we moved away from
using the application icon,

00:33:50.870 --> 00:33:52.730
we want to give a
full width affordance

00:33:52.730 --> 00:33:55.001
in that space for
opening the drawer.

00:33:55.001 --> 00:33:56.000
MALE SPEAKER: Thank you.

00:33:56.000 --> 00:33:58.320
RICH FULCHER: Sure.

00:33:58.320 --> 00:33:59.580
MALE SPEAKER: Hi.

00:33:59.580 --> 00:34:03.340
This is essentially paper, but
I haven't seen any folding.

00:34:03.340 --> 00:34:06.045
Is there any specific
reason for that?

00:34:06.045 --> 00:34:07.420
DAVE CHIU: So one
of the things I

00:34:07.420 --> 00:34:09.503
talked about was this
notion of perceived z depth.

00:34:09.503 --> 00:34:11.270
And so, when you're
handling a phone,

00:34:11.270 --> 00:34:13.540
you have a sense
of the thickness

00:34:13.540 --> 00:34:16.520
of that between the glass
and the back of the phone.

00:34:16.520 --> 00:34:18.790
So we want to
preserve the notion

00:34:18.790 --> 00:34:21.160
that there is a finite
amount of space to use.

00:34:21.160 --> 00:34:22.659
And so, if you start
folding things,

00:34:22.659 --> 00:34:24.834
then that would sort
of break the plane.

00:34:24.834 --> 00:34:27.000
That's something potentially
you could explore maybe

00:34:27.000 --> 00:34:29.929
on deeper z depth environments,
like televisions, when

00:34:29.929 --> 00:34:31.679
you start thinking
about three dimensions.

00:34:31.679 --> 00:34:34.920
But for now, we're really
focusing on keeping things

00:34:34.920 --> 00:34:37.530
in a single z position and sort
of moving things laterally.

00:34:37.530 --> 00:34:38.780
MALE SPEAKER: OK, makes sense.

00:34:38.780 --> 00:34:39.279
Thanks.

00:34:41.810 --> 00:34:42.954
MALE SPEAKER: Hi.

00:34:42.954 --> 00:34:44.370
So the I mainly
was wanting to ask

00:34:44.370 --> 00:34:48.020
about, for backwards
compatibility, to getting

00:34:48.020 --> 00:34:52.820
these new patterns into as far
back as, like, Gingerbread.

00:34:52.820 --> 00:34:54.219
Is that possible?

00:34:54.219 --> 00:35:00.060
And also, for low-end devices
with all these new animations,

00:35:00.060 --> 00:35:03.800
what are things that-- is it
just better not to use those?

00:35:03.800 --> 00:35:07.730
Or what are good guidelines?

00:35:07.730 --> 00:35:09.520
RICH FULCHER: Sure.

00:35:09.520 --> 00:35:12.180
I think my take on
the best practice

00:35:12.180 --> 00:35:15.660
is you want to kind of
design for Material Design,

00:35:15.660 --> 00:35:16.790
first and foremost.

00:35:16.790 --> 00:35:19.660
We've found that the translation
exercise of taking something

00:35:19.660 --> 00:35:23.450
that's designed for Material and
kind of simplifying it downward

00:35:23.450 --> 00:35:25.380
has been a reasonably
straightforward one.

00:35:25.380 --> 00:35:27.590
I mean, most of the same
elements are still there.

00:35:27.590 --> 00:35:30.850
You still have things like
action bars and toolbars.

00:35:30.850 --> 00:35:32.760
You can make them
less transformative

00:35:32.760 --> 00:35:36.000
as the design goes down
to earlier versions.

00:35:36.000 --> 00:35:39.210
And some of these
changes will actually

00:35:39.210 --> 00:35:42.350
be supported through
Support Library, as well.

00:35:42.350 --> 00:35:44.570
So I think you just start
with the highest end,

00:35:44.570 --> 00:35:47.050
you simplify to pare
it down, and then

00:35:47.050 --> 00:35:49.950
you still have a design
that feels very coherent.

00:35:49.950 --> 00:35:52.060
Material has a unique
theme on Androids.

00:35:52.060 --> 00:35:54.160
You can target that theme
and build against it.

00:35:54.160 --> 00:35:56.560
And you can kind of see what
happens on that right away.

00:35:56.560 --> 00:36:00.010
The second part of your
question was-- sorry,

00:36:00.010 --> 00:36:01.280
just remind me quickly.

00:36:01.280 --> 00:36:02.100
MALE SPEAKER: Low-end devices.

00:36:02.100 --> 00:36:03.420
RICH FULCHER:
Low-end devices, yes.

00:36:03.420 --> 00:36:05.086
So the animation
framework will actually

00:36:05.086 --> 00:36:07.320
be aware of the capabilities.

00:36:07.320 --> 00:36:10.751
It will basically shorten or
remove animations in some cases

00:36:10.751 --> 00:36:12.500
to make sure that,
instead of just getting

00:36:12.500 --> 00:36:14.880
a very junky or
stuttery animation,

00:36:14.880 --> 00:36:17.610
you just sometimes get a clean
cut or cross-fade instead

00:36:17.610 --> 00:36:19.230
of a more elaborate one.

00:36:19.230 --> 00:36:21.380
So it's not as full
of an experience,

00:36:21.380 --> 00:36:23.769
but it still feels kind of
complete for that device.

00:36:23.769 --> 00:36:24.810
MALE SPEAKER: OK, thanks.

00:36:24.810 --> 00:36:26.990
RICH FULCHER: Sure.

00:36:26.990 --> 00:36:27.930
MALE SPEAKER: Hi.

00:36:27.930 --> 00:36:31.800
I have the
skeuomorphism question.

00:36:31.800 --> 00:36:33.804
I'm wondering how
that went internally.

00:36:33.804 --> 00:36:35.470
And do you guys
consider the skeuomorph?

00:36:39.120 --> 00:36:42.480
DAVE CHIU: So skeuomorphism.

00:36:42.480 --> 00:36:45.120
So that's the notion
of introducing

00:36:45.120 --> 00:36:47.730
kind of ornament and unnecessary
elements into design.

00:36:47.730 --> 00:36:49.580
And I would say
that, in this case,

00:36:49.580 --> 00:36:52.005
we're trying to use
paper as an inspiration.

00:36:54.579 --> 00:36:57.120
It's an interesting question,
because I guess the most amount

00:36:57.120 --> 00:36:59.410
of skeuomorphism that
you could potentially

00:36:59.410 --> 00:37:01.784
call skeuomorphism is,
effectively, shadowing,

00:37:01.784 --> 00:37:04.075
because, effectively, they're
just pieces of paper that

00:37:04.075 --> 00:37:04.860
are moving about.

00:37:04.860 --> 00:37:07.575
There's no additional
ornament beyond it's

00:37:07.575 --> 00:37:10.660
a blank piece of paper
that you're adding ink to.

00:37:10.660 --> 00:37:12.340
The idea there is
that we're trying

00:37:12.340 --> 00:37:15.180
to add additional affordances
so people can more intelligently

00:37:15.180 --> 00:37:18.462
understand what's going on.

00:37:18.462 --> 00:37:19.920
Conversations have
given the design

00:37:19.920 --> 00:37:22.380
world talk about flat
design and post flat design.

00:37:22.380 --> 00:37:24.755
Arguably, this is kind of post
flat design, because we're

00:37:24.755 --> 00:37:27.760
trying to take the direction
of flat design, which

00:37:27.760 --> 00:37:31.481
is the answer or response
to skeuomorphism-- that's

00:37:31.481 --> 00:37:33.730
one extreme end of the
spectrum-- we're trying to pull

00:37:33.730 --> 00:37:35.220
it back and say,
we do kind of need

00:37:35.220 --> 00:37:38.300
to introduce a little bit more
affordance here and give users

00:37:38.300 --> 00:37:40.370
guidance as to how
things work, how

00:37:40.370 --> 00:37:42.760
they relate to each
other, what to expect.

00:37:42.760 --> 00:37:43.640
ZACH GIBSON: Yeah.

00:37:43.640 --> 00:37:45.056
Just to add to
that, I think we're

00:37:45.056 --> 00:37:47.565
at a place that's kind
of in between the flat

00:37:47.565 --> 00:37:50.040
and skeuomorphism.

00:37:50.040 --> 00:37:52.660
A lot of our stuff is
flat on first appearance,

00:37:52.660 --> 00:37:54.600
but it's tangible
and you can touch it.

00:37:54.600 --> 00:37:57.880
And when you do touch
it and interact with it,

00:37:57.880 --> 00:37:59.230
it feels real.

00:37:59.230 --> 00:38:01.260
And I think that that's
a kind of place that's

00:38:01.260 --> 00:38:06.849
in between pure, flat design
and skeuomorphic stuff.

00:38:06.849 --> 00:38:07.640
MALE SPEAKER: Cool.

00:38:07.640 --> 00:38:08.140
Thank you.

00:38:08.140 --> 00:38:10.362
ZACH GIBSON: Yeah, sure.

00:38:10.362 --> 00:38:11.070
MALE SPEAKER: Hi.

00:38:11.070 --> 00:38:12.940
You'll have to forgive me
if this is a basic design

00:38:12.940 --> 00:38:14.356
question, because
I'm a developer.

00:38:14.356 --> 00:38:16.970
But you mentioned that it's
important to have the FAB's

00:38:16.970 --> 00:38:20.570
primary color work well with
the image content behind it.

00:38:20.570 --> 00:38:23.120
I'm just wondering if
there is sort of a way

00:38:23.120 --> 00:38:25.040
that you determine what
that is dynamically

00:38:25.040 --> 00:38:26.530
based on the content.

00:38:26.530 --> 00:38:29.780
And if so, is that available
in Polymer and Android?

00:38:32.569 --> 00:38:33.360
RICH FULCHER: Yeah.

00:38:33.360 --> 00:38:36.230
So the library is
called Palette.

00:38:36.230 --> 00:38:38.530
It is a way of extracting
the dominant color

00:38:38.530 --> 00:38:41.240
value from an image
and then using

00:38:41.240 --> 00:38:46.050
that to select the complimentary
color that's appropriate.

00:38:46.050 --> 00:38:47.890
I think there are
a few cases where

00:38:47.890 --> 00:38:49.760
the FAB would want to do that.

00:38:49.760 --> 00:38:51.540
I think the FAB in
particular often

00:38:51.540 --> 00:38:57.880
wants to be a known, fixed
color for easy identifiability

00:38:57.880 --> 00:38:58.822
within your app.

00:38:58.822 --> 00:39:00.530
That said, there are
a couple of contexts

00:39:00.530 --> 00:39:01.560
where it makes sense to do that.

00:39:01.560 --> 00:39:02.390
But it is supported.

00:39:02.390 --> 00:39:03.790
And Palette is the
name of that library.

00:39:03.790 --> 00:39:04.790
MALE SPEAKER: Thank you.

00:39:04.790 --> 00:39:06.609
RICH FULCHER: Sure.

00:39:06.609 --> 00:39:07.400
FEMALE SPEAKER: Hi.

00:39:10.340 --> 00:39:12.950
FAB definitely stands
out for me in this talk.

00:39:12.950 --> 00:39:15.250
And I think through
the whole conference,

00:39:15.250 --> 00:39:18.010
designing for your
cross platform is

00:39:18.010 --> 00:39:20.240
one of the main
themes this year.

00:39:20.240 --> 00:39:22.630
So I'm just wondering,
any thoughts

00:39:22.630 --> 00:39:26.820
on how to apply FAB in TV
space, like in a TV UI?

00:39:26.820 --> 00:39:29.410
Because for most
of TV, the remote

00:39:29.410 --> 00:39:33.480
doesn't have a touch screen,
and it still operates on D-pad.

00:39:33.480 --> 00:39:35.499
So I'm just wondering,
any thoughts on that?

00:39:35.499 --> 00:39:36.290
BETHANY FONG: Yeah.

00:39:36.290 --> 00:39:40.010
So the FAB is a raised button
which still has a focus state.

00:39:40.010 --> 00:39:42.260
And I know that a
lot of our TV UI

00:39:42.260 --> 00:39:46.470
relies on moving the focus
state around the screen.

00:39:46.470 --> 00:39:49.360
And a lot of our
apps on Android TV,

00:39:49.360 --> 00:39:52.730
we've actually used the FAB
very successfully using focus

00:39:52.730 --> 00:39:53.550
to pull it out.

00:39:53.550 --> 00:39:54.540
So it still works.

00:39:54.540 --> 00:39:55.664
FEMALE SPEAKER: OK, thanks.

00:39:58.574 --> 00:39:59.365
FEMALE SPEAKER: Hi.

00:39:59.365 --> 00:40:01.340
My question is kind of related.

00:40:01.340 --> 00:40:03.760
So I love what you've
done to, I guess,

00:40:03.760 --> 00:40:06.102
facilitate design
cross-platform.

00:40:06.102 --> 00:40:08.310
So I'm wondering, if you're
working on a product that

00:40:08.310 --> 00:40:11.960
is still primarily desktop--
is still kind of becoming

00:40:11.960 --> 00:40:15.940
responsive, but is still
desktop-- do you feel like some

00:40:15.940 --> 00:40:19.710
of these things, like the new
animations or the metaphors

00:40:19.710 --> 00:40:23.030
of paper and ink, is that still
appropriate for a primarily

00:40:23.030 --> 00:40:24.330
desktop application?

00:40:24.330 --> 00:40:27.947
Or does it require
interaction via touch?

00:40:27.947 --> 00:40:30.030
ZACH GIBSON: Yeah, I think
it's still appropriate.

00:40:30.030 --> 00:40:33.380
A lot of the Polymer stuff
that we've been working on

00:40:33.380 --> 00:40:36.330
implements some of these
touch ripples and animations.

00:40:36.330 --> 00:40:39.620
And you can kind of get
some of that stuff for free

00:40:39.620 --> 00:40:43.960
by using Polymer
elements in desktop.

00:40:43.960 --> 00:40:48.670
But yeah, I think it
totally still applies.

00:40:48.670 --> 00:40:51.040
On mobile, there's
no hover states.

00:40:51.040 --> 00:40:53.960
And there's definitely
differences.

00:40:53.960 --> 00:40:57.140
And I think we're trying to
respect those differences

00:40:57.140 --> 00:40:58.960
in the different form factors.

00:40:58.960 --> 00:41:02.920
But just from a
structural standpoint,

00:41:02.920 --> 00:41:05.040
keeping all of the
same stuff around

00:41:05.040 --> 00:41:08.260
is how we're keeping
consistent across form factors.

00:41:08.260 --> 00:41:10.760
DAVE CHIU: And as Bethany and
I have both sort of discussed,

00:41:10.760 --> 00:41:13.210
the notion of the FAB
transforming and also

00:41:13.210 --> 00:41:15.230
just paper hierarchy,
some of those things

00:41:15.230 --> 00:41:15.900
still apply to desktop.

00:41:15.900 --> 00:41:17.316
So you can start
talking about how

00:41:17.316 --> 00:41:18.979
the FAB transforms
a to-do paper.

00:41:18.979 --> 00:41:20.520
And that helps cue
users that there's

00:41:20.520 --> 00:41:23.020
a new activity or a new action
being-- when you're composing

00:41:23.020 --> 00:41:24.779
a new email or
note or something,

00:41:24.779 --> 00:41:26.820
that can turn into a new
piece of paper and helps

00:41:26.820 --> 00:41:28.610
give them some sense
of relationship

00:41:28.610 --> 00:41:30.790
with that new
surface, with the work

00:41:30.790 --> 00:41:32.320
that they've been
previously doing.

00:41:32.320 --> 00:41:34.084
FEMALE SPEAKER: Have
you found that users,

00:41:34.084 --> 00:41:36.250
that their relationship
with the mouse in the screen

00:41:36.250 --> 00:41:38.430
is kind of similar
with their relationship

00:41:38.430 --> 00:41:41.110
to just clicking on the screen?

00:41:41.110 --> 00:41:43.450
Have you kind of explored that?

00:41:43.450 --> 00:41:46.560
RICH FULCHER: There's
a bit more difference.

00:41:46.560 --> 00:41:48.780
I don't think any of us
are too close to that work

00:41:48.780 --> 00:41:49.460
specifically.

00:41:49.460 --> 00:41:52.830
But I know from the
development of the pixel

00:41:52.830 --> 00:41:55.307
that users sometimes
move between those modes

00:41:55.307 --> 00:41:55.890
of engagement.

00:41:55.890 --> 00:41:57.431
Like when a touchscreen
is available,

00:41:57.431 --> 00:41:59.750
that's appropriate
for some lighter

00:41:59.750 --> 00:42:01.930
browsing-oriented activities.

00:42:01.930 --> 00:42:05.820
But the more precise targeting
and more work active,

00:42:05.820 --> 00:42:08.730
I'm alternating between
keyboard and mouse,

00:42:08.730 --> 00:42:10.493
they tend to bias
towards that affordance.

00:42:10.493 --> 00:42:11.284
FEMALE SPEAKER: OK.

00:42:11.284 --> 00:42:12.130
Thank you.

00:42:12.130 --> 00:42:12.921
RICH FULCHER: Sure.

00:42:17.040 --> 00:42:17.990
All right.

00:42:17.990 --> 00:42:19.290
Well, thank you all again.

00:42:19.290 --> 00:42:19.590
DAVE CHIU: Thank you.

00:42:19.590 --> 00:42:20.673
ZACH GIBSON: Thanks, guys.

00:42:20.673 --> 00:42:21.740
[APPLAUSE]

