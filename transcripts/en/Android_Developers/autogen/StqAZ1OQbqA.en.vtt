WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.000 align:start position:0%
 
using<00:00:00.690><c> instant</c><00:00:01.020><c> run</c><00:00:01.199><c> is</c><00:00:01.380><c> as</c><00:00:01.560><c> simple</c><00:00:01.890><c> as</c>

00:00:02.000 --> 00:00:02.010 align:start position:0%
using instant run is as simple as
 

00:00:02.010 --> 00:00:03.770 align:start position:0%
using instant run is as simple as
pressing<00:00:02.190><c> run</c><00:00:02.580><c> or</c><00:00:02.790><c> debug</c><00:00:03.179><c> with</c><00:00:03.360><c> the</c><00:00:03.449><c> lightning</c>

00:00:03.770 --> 00:00:03.780 align:start position:0%
pressing run or debug with the lightning
 

00:00:03.780 --> 00:00:06.050 align:start position:0%
pressing run or debug with the lightning
bolt<00:00:03.959><c> displayed</c><00:00:04.440><c> after</c><00:00:05.250><c> making</c><00:00:05.430><c> incremental</c>

00:00:06.050 --> 00:00:06.060 align:start position:0%
bolt displayed after making incremental
 

00:00:06.060 --> 00:00:07.610 align:start position:0%
bolt displayed after making incremental
changes<00:00:06.420><c> since</c><00:00:06.629><c> your</c><00:00:06.779><c> last</c><00:00:06.930><c> build</c><00:00:07.230><c> and</c><00:00:07.350><c> deploy</c>

00:00:07.610 --> 00:00:07.620 align:start position:0%
changes since your last build and deploy
 

00:00:07.620 --> 00:00:10.220 align:start position:0%
changes since your last build and deploy
on<00:00:08.580><c> something</c><00:00:09.059><c> simple</c><00:00:09.480><c> and</c><00:00:09.630><c> helpful</c><00:00:09.929><c> most</c>

00:00:10.220 --> 00:00:10.230 align:start position:0%
on something simple and helpful most
 

00:00:10.230 --> 00:00:12.650 align:start position:0%
on something simple and helpful most
people<00:00:10.620><c> are</c><00:00:10.800><c> satisfied</c><00:00:10.950><c> with</c><00:00:11.370><c> that</c><00:00:11.550><c> hey</c><00:00:12.450><c> Wayne</c>

00:00:12.650 --> 00:00:12.660 align:start position:0%
people are satisfied with that hey Wayne
 

00:00:12.660 --> 00:00:16.189 align:start position:0%
people are satisfied with that hey Wayne
hey<00:00:13.230><c> here</c><00:00:13.830><c> you</c><00:00:13.920><c> go</c><00:00:14.360><c> what's</c><00:00:15.360><c> that</c><00:00:15.570><c> it's</c><00:00:16.080><c> an</c>

00:00:16.189 --> 00:00:16.199 align:start position:0%
hey here you go what's that it's an
 

00:00:16.199 --> 00:00:18.200 align:start position:0%
hey here you go what's that it's an
automatic<00:00:16.470><c> dog</c><00:00:16.800><c> feeder</c><00:00:16.830><c> it</c><00:00:17.369><c> makes</c><00:00:17.640><c> it</c><00:00:17.789><c> faster</c>

00:00:18.200 --> 00:00:18.210 align:start position:0%
automatic dog feeder it makes it faster
 

00:00:18.210 --> 00:00:20.390 align:start position:0%
automatic dog feeder it makes it faster
and<00:00:18.270><c> easier</c><00:00:18.390><c> to</c><00:00:18.630><c> feed</c><00:00:18.960><c> your</c><00:00:19.080><c> pets</c><00:00:19.260><c> mmm</c><00:00:20.130><c> nice</c>

00:00:20.390 --> 00:00:20.400 align:start position:0%
and easier to feed your pets mmm nice
 

00:00:20.400 --> 00:00:23.210 align:start position:0%
and easier to feed your pets mmm nice
nice<00:00:21.090><c> but</c><00:00:21.990><c> we're</c><00:00:22.140><c> engineers</c><00:00:22.410><c> we're</c><00:00:23.039><c> not</c>

00:00:23.210 --> 00:00:23.220 align:start position:0%
nice but we're engineers we're not
 

00:00:23.220 --> 00:00:27.290 align:start position:0%
nice but we're engineers we're not
normal<00:00:23.699><c> people</c><00:00:24.060><c> uh</c><00:00:24.439><c> Wayne</c><00:00:25.439><c> oh</c><00:00:25.849><c> yeah</c><00:00:26.849><c> I</c><00:00:26.880><c> think</c><00:00:27.060><c> I</c>

00:00:27.290 --> 00:00:27.300 align:start position:0%
normal people uh Wayne oh yeah I think I
 

00:00:27.300 --> 00:00:28.550 align:start position:0%
normal people uh Wayne oh yeah I think I
understand<00:00:27.689><c> the</c><00:00:27.750><c> mechanism</c><00:00:28.170><c> for</c><00:00:28.199><c> this</c><00:00:28.410><c> and</c><00:00:28.529><c> I</c>

00:00:28.550 --> 00:00:28.560 align:start position:0%
understand the mechanism for this and I
 

00:00:28.560 --> 00:00:32.060 align:start position:0%
understand the mechanism for this and I
think<00:00:28.740><c> I</c><00:00:28.800><c> know</c><00:00:28.859><c> how</c><00:00:29.010><c> it</c><00:00:29.039><c> works</c><00:00:29.279><c> now</c><00:00:29.490><c> huh</c><00:00:31.070><c> so</c>

00:00:32.060 --> 00:00:32.070 align:start position:0%
think I know how it works now huh so
 

00:00:32.070 --> 00:00:33.889 align:start position:0%
think I know how it works now huh so
let's<00:00:32.759><c> take</c><00:00:32.910><c> a</c><00:00:32.940><c> look</c><00:00:33.180><c> under</c><00:00:33.360><c> the</c><00:00:33.660><c> foot</c><00:00:33.809><c> of</c>

00:00:33.889 --> 00:00:33.899 align:start position:0%
let's take a look under the foot of
 

00:00:33.899 --> 00:00:35.209 align:start position:0%
let's take a look under the foot of
instant<00:00:34.200><c> run</c><00:00:34.350><c> and</c><00:00:34.530><c> see</c><00:00:34.800><c> how</c><00:00:34.980><c> it</c><00:00:35.100><c> actually</c>

00:00:35.209 --> 00:00:35.219 align:start position:0%
instant run and see how it actually
 

00:00:35.219 --> 00:00:35.959 align:start position:0%
instant run and see how it actually
works

00:00:35.959 --> 00:00:35.969 align:start position:0%
works
 

00:00:35.969 --> 00:00:38.150 align:start position:0%
works
I'm<00:00:36.450><c> ready</c><00:00:36.719><c> Maya</c><00:00:36.960><c> this</c><00:00:37.350><c> is</c><00:00:37.410><c> an</c><00:00:37.590><c> Android</c><00:00:37.860><c> tool</c>

00:00:38.150 --> 00:00:38.160 align:start position:0%
I'm ready Maya this is an Android tool
 

00:00:38.160 --> 00:00:43.270 align:start position:0%
I'm ready Maya this is an Android tool
time<00:00:38.370><c> deep</c><00:00:38.610><c> dive</c><00:00:38.820><c> and</c><00:00:39.059><c> this</c><00:00:39.329><c> is</c><00:00:39.629><c> instant</c><00:00:40.260><c> run</c>

00:00:43.270 --> 00:00:43.280 align:start position:0%
 
 

00:00:43.280 --> 00:00:46.100 align:start position:0%
 
in<00:00:44.280><c> Sarang</c><00:00:44.670><c> minimizes</c><00:00:45.270><c> the</c><00:00:45.390><c> time</c><00:00:45.600><c> taken</c><00:00:45.989><c> to</c>

00:00:46.100 --> 00:00:46.110 align:start position:0%
in Sarang minimizes the time taken to
 

00:00:46.110 --> 00:00:47.840 align:start position:0%
in Sarang minimizes the time taken to
build<00:00:46.260><c> and</c><00:00:46.469><c> deploy</c><00:00:46.559><c> incremental</c><00:00:47.370><c> changes</c><00:00:47.700><c> to</c>

00:00:47.840 --> 00:00:47.850 align:start position:0%
build and deploy incremental changes to
 

00:00:47.850 --> 00:00:49.729 align:start position:0%
build and deploy incremental changes to
your<00:00:47.940><c> app</c><00:00:48.120><c> when</c><00:00:48.420><c> you</c><00:00:48.450><c> run</c><00:00:48.719><c> the</c><00:00:48.870><c> debug</c><00:00:49.260><c> variant</c>

00:00:49.729 --> 00:00:49.739 align:start position:0%
your app when you run the debug variant
 

00:00:49.739 --> 00:00:52.130 align:start position:0%
your app when you run the debug variant
of<00:00:49.860><c> your</c><00:00:50.010><c> project</c><00:00:50.460><c> rather</c><00:00:51.360><c> than</c><00:00:51.539><c> doing</c><00:00:51.660><c> a</c><00:00:51.870><c> full</c>

00:00:52.130 --> 00:00:52.140 align:start position:0%
of your project rather than doing a full
 

00:00:52.140 --> 00:00:54.200 align:start position:0%
of your project rather than doing a full
build<00:00:52.410><c> stopping</c><00:00:52.980><c> the</c><00:00:53.070><c> app</c><00:00:53.219><c> reinstalling</c><00:00:53.969><c> and</c>

00:00:54.200 --> 00:00:54.210 align:start position:0%
build stopping the app reinstalling and
 

00:00:54.210 --> 00:00:56.119 align:start position:0%
build stopping the app reinstalling and
then<00:00:54.300><c> relaunching</c><00:00:54.870><c> it</c><00:00:54.989><c> instant</c><00:00:55.410><c> run</c><00:00:55.590><c> tries</c><00:00:55.890><c> to</c>

00:00:56.119 --> 00:00:56.129 align:start position:0%
then relaunching it instant run tries to
 

00:00:56.129 --> 00:00:58.580 align:start position:0%
then relaunching it instant run tries to
only<00:00:56.550><c> deploy</c><00:00:56.760><c> changes</c><00:00:57.300><c> avoid</c><00:00:57.809><c> restarting</c><00:00:58.500><c> or</c>

00:00:58.580 --> 00:00:58.590 align:start position:0%
only deploy changes avoid restarting or
 

00:00:58.590 --> 00:01:00.680 align:start position:0%
only deploy changes avoid restarting or
reinstalling<00:00:59.100><c> the</c><00:00:59.280><c> app</c><00:00:59.399><c> or</c><00:00:59.640><c> even</c><00:01:00.059><c> restarting</c>

00:01:00.680 --> 00:01:00.690 align:start position:0%
reinstalling the app or even restarting
 

00:01:00.690 --> 00:01:02.869 align:start position:0%
reinstalling the app or even restarting
the<00:01:00.780><c> activity</c><00:01:01.199><c> there</c><00:01:01.949><c> are</c><00:01:02.070><c> three</c><00:01:02.280><c> variations</c>

00:01:02.869 --> 00:01:02.879 align:start position:0%
the activity there are three variations
 

00:01:02.879 --> 00:01:05.600 align:start position:0%
the activity there are three variations
to<00:01:03.059><c> instant</c><00:01:03.420><c> run</c><00:01:03.570><c> a</c><00:01:03.780><c> hot</c><00:01:04.229><c> were</c><00:01:04.589><c> warm</c><00:01:05.040><c> or</c><00:01:05.309><c> cold</c>

00:01:05.600 --> 00:01:05.610 align:start position:0%
to instant run a hot were warm or cold
 

00:01:05.610 --> 00:01:08.270 align:start position:0%
to instant run a hot were warm or cold
swap<00:01:06.409><c> understanding</c><00:01:07.409><c> what</c><00:01:07.560><c> does</c><00:01:07.770><c> happen</c><00:01:08.130><c> and</c>

00:01:08.270 --> 00:01:08.280 align:start position:0%
swap understanding what does happen and
 

00:01:08.280 --> 00:01:10.160 align:start position:0%
swap understanding what does happen and
why<00:01:08.549><c> we'll</c><00:01:08.880><c> help</c><00:01:09.060><c> you</c><00:01:09.240><c> take</c><00:01:09.510><c> full</c><00:01:09.780><c> advantage</c>

00:01:10.160 --> 00:01:10.170 align:start position:0%
why we'll help you take full advantage
 

00:01:10.170 --> 00:01:11.660 align:start position:0%
why we'll help you take full advantage
of<00:01:10.260><c> instant</c><00:01:10.619><c> run</c><00:01:10.710><c> and</c><00:01:10.920><c> to</c><00:01:11.070><c> understand</c><00:01:11.549><c> its</c>

00:01:11.660 --> 00:01:11.670 align:start position:0%
of instant run and to understand its
 

00:01:11.670 --> 00:01:13.520 align:start position:0%
of instant run and to understand its
limitations<00:01:12.240><c> and</c><00:01:12.420><c> how</c><00:01:12.720><c> your</c><00:01:12.869><c> code</c><00:01:13.110><c> change</c><00:01:13.409><c> is</c>

00:01:13.520 --> 00:01:13.530 align:start position:0%
limitations and how your code change is
 

00:01:13.530 --> 00:01:17.030 align:start position:0%
limitations and how your code change is
affected<00:01:14.150><c> this</c><00:01:15.150><c> is</c><00:01:15.479><c> a</c><00:01:15.720><c> very</c><00:01:16.170><c> simplified</c><00:01:16.560><c> look</c>

00:01:17.030 --> 00:01:17.040 align:start position:0%
affected this is a very simplified look
 

00:01:17.040 --> 00:01:19.219 align:start position:0%
affected this is a very simplified look
at<00:01:17.159><c> the</c><00:01:17.250><c> Android</c><00:01:17.520><c> build</c><00:01:17.790><c> process</c><00:01:18.229><c> your</c>

00:01:19.219 --> 00:01:19.229 align:start position:0%
at the Android build process your
 

00:01:19.229 --> 00:01:20.960 align:start position:0%
at the Android build process your
manifest<00:01:19.650><c> files</c><00:01:19.860><c> are</c><00:01:20.070><c> merged</c><00:01:20.310><c> and</c><00:01:20.580><c> packaged</c>

00:01:20.960 --> 00:01:20.970 align:start position:0%
manifest files are merged and packaged
 

00:01:20.970 --> 00:01:22.520 align:start position:0%
manifest files are merged and packaged
along<00:01:21.150><c> with</c><00:01:21.420><c> your</c><00:01:21.540><c> apps</c><00:01:21.659><c> resources</c><00:01:22.200><c> into</c><00:01:22.439><c> an</c>

00:01:22.520 --> 00:01:22.530 align:start position:0%
along with your apps resources into an
 

00:01:22.530 --> 00:01:25.249 align:start position:0%
along with your apps resources into an
apk<00:01:23.090><c> similarly</c><00:01:24.090><c> the</c><00:01:24.450><c> Java</c><00:01:24.750><c> files</c><00:01:25.080><c> are</c>

00:01:25.249 --> 00:01:25.259 align:start position:0%
apk similarly the Java files are
 

00:01:25.259 --> 00:01:26.899 align:start position:0%
apk similarly the Java files are
compiled<00:01:25.590><c> into</c><00:01:25.770><c> byte</c><00:01:26.040><c> code</c><00:01:26.280><c> and</c><00:01:26.490><c> then</c><00:01:26.580><c> convert</c>

00:01:26.899 --> 00:01:26.909 align:start position:0%
compiled into byte code and then convert
 

00:01:26.909 --> 00:01:28.819 align:start position:0%
compiled into byte code and then convert
it<00:01:27.000><c> to</c><00:01:27.030><c> Dex</c><00:01:27.330><c> files</c><00:01:27.540><c> that</c><00:01:27.810><c> are</c><00:01:27.930><c> also</c><00:01:28.110><c> included</c>

00:01:28.819 --> 00:01:28.829 align:start position:0%
it to Dex files that are also included
 

00:01:28.829 --> 00:01:31.370 align:start position:0%
it to Dex files that are also included
in<00:01:28.920><c> the</c><00:01:29.009><c> apk</c><00:01:29.460><c> first</c><00:01:30.450><c> it</c><00:01:30.689><c> adds</c><00:01:30.869><c> bytecode</c>

00:01:31.370 --> 00:01:31.380 align:start position:0%
in the apk first it adds bytecode
 

00:01:31.380 --> 00:01:33.260 align:start position:0%
in the apk first it adds bytecode
instrumentation<00:01:31.619><c> to</c><00:01:32.159><c> your</c><00:01:32.280><c> class</c><00:01:32.490><c> files</c><00:01:32.790><c> so</c>

00:01:33.260 --> 00:01:33.270 align:start position:0%
instrumentation to your class files so
 

00:01:33.270 --> 00:01:34.969 align:start position:0%
instrumentation to your class files so
we<00:01:33.420><c> can</c><00:01:33.570><c> replace</c><00:01:33.689><c> code</c><00:01:34.110><c> on</c><00:01:34.259><c> the</c><00:01:34.350><c> fly</c><00:01:34.650><c> when</c><00:01:34.860><c> we</c>

00:01:34.969 --> 00:01:34.979 align:start position:0%
we can replace code on the fly when we
 

00:01:34.979 --> 00:01:37.190 align:start position:0%
we can replace code on the fly when we
update<00:01:35.189><c> it</c><00:01:35.460><c> later</c><00:01:35.490><c> and</c><00:01:35.939><c> it</c><00:01:36.659><c> adds</c><00:01:36.810><c> a</c><00:01:36.930><c> new</c><00:01:37.049><c> app</c>

00:01:37.190 --> 00:01:37.200 align:start position:0%
update it later and it adds a new app
 

00:01:37.200 --> 00:01:38.840 align:start position:0%
update it later and it adds a new app
server<00:01:37.619><c> class</c><00:01:37.829><c> that</c><00:01:38.040><c> will</c><00:01:38.130><c> run</c><00:01:38.340><c> within</c><00:01:38.700><c> your</c>

00:01:38.840 --> 00:01:38.850 align:start position:0%
server class that will run within your
 

00:01:38.850 --> 00:01:41.090 align:start position:0%
server class that will run within your
debug<00:01:39.210><c> app</c><00:01:39.420><c> in</c><00:01:39.689><c> which</c><00:01:40.140><c> the</c><00:01:40.290><c> IDE</c><00:01:40.530><c> will</c><00:01:40.770><c> use</c><00:01:40.979><c> to</c>

00:01:41.090 --> 00:01:41.100 align:start position:0%
debug app in which the IDE will use to
 

00:01:41.100 --> 00:01:42.560 align:start position:0%
debug app in which the IDE will use to
transmit<00:01:41.430><c> code</c><00:01:41.759><c> changes</c><00:01:42.180><c> that</c><00:01:42.360><c> will</c><00:01:42.479><c> be</c>

00:01:42.560 --> 00:01:42.570 align:start position:0%
transmit code changes that will be
 

00:01:42.570 --> 00:01:45.319 align:start position:0%
transmit code changes that will be
applied<00:01:42.869><c> at</c><00:01:43.079><c> runtime</c><00:01:43.579><c> Gradle</c><00:01:44.579><c> also</c><00:01:44.939><c> modifies</c>

00:01:45.319 --> 00:01:45.329 align:start position:0%
applied at runtime Gradle also modifies
 

00:01:45.329 --> 00:01:47.330 align:start position:0%
applied at runtime Gradle also modifies
the<00:01:45.509><c> application</c><00:01:45.960><c> manifest</c><00:01:46.229><c> to</c><00:01:46.740><c> inject</c><00:01:47.040><c> a</c><00:01:47.189><c> new</c>

00:01:47.330 --> 00:01:47.340 align:start position:0%
the application manifest to inject a new
 

00:01:47.340 --> 00:01:49.730 align:start position:0%
the application manifest to inject a new
application<00:01:47.939><c> class</c><00:01:48.149><c> this</c><00:01:48.869><c> will</c><00:01:49.079><c> proxy</c><00:01:49.560><c> your</c>

00:01:49.730 --> 00:01:49.740 align:start position:0%
application class this will proxy your
 

00:01:49.740 --> 00:01:51.530 align:start position:0%
application class this will proxy your
own<00:01:49.829><c> custom</c><00:01:50.250><c> application</c><00:01:50.310><c> class</c><00:01:50.970><c> if</c><00:01:51.210><c> you're</c>

00:01:51.530 --> 00:01:51.540 align:start position:0%
own custom application class if you're
 

00:01:51.540 --> 00:01:53.719 align:start position:0%
own custom application class if you're
using<00:01:51.750><c> one</c><00:01:52.020><c> and</c><00:01:52.229><c> injects</c><00:01:52.860><c> custom</c><00:01:53.490><c> class</c>

00:01:53.719 --> 00:01:53.729 align:start position:0%
using one and injects custom class
 

00:01:53.729 --> 00:01:55.069 align:start position:0%
using one and injects custom class
loaders<00:01:54.119><c> that</c><00:01:54.149><c> allow</c><00:01:54.479><c> us</c><00:01:54.630><c> to</c><00:01:54.780><c> apply</c><00:01:54.869><c> the</c>

00:01:55.069 --> 00:01:55.079 align:start position:0%
loaders that allow us to apply the
 

00:01:55.079 --> 00:01:58.399 align:start position:0%
loaders that allow us to apply the
real-time<00:01:55.590><c> code</c><00:01:55.860><c> changes</c><00:01:56.750><c> from</c><00:01:57.750><c> now</c><00:01:57.899><c> on</c><00:01:58.110><c> when</c>

00:01:58.399 --> 00:01:58.409 align:start position:0%
real-time code changes from now on when
 

00:01:58.409 --> 00:02:00.289 align:start position:0%
real-time code changes from now on when
you<00:01:58.530><c> hit</c><00:01:58.680><c> run</c><00:01:58.920><c> Android</c><00:01:59.369><c> studio</c><00:01:59.549><c> checks</c><00:02:00.090><c> if</c>

00:02:00.289 --> 00:02:00.299 align:start position:0%
you hit run Android studio checks if
 

00:02:00.299 --> 00:02:01.819 align:start position:0%
you hit run Android studio checks if
there's<00:02:00.540><c> an</c><00:02:00.689><c> open</c><00:02:01.020><c> socket</c><00:02:01.229><c> to</c><00:02:01.500><c> a</c><00:02:01.530><c> server</c>

00:02:01.819 --> 00:02:01.829 align:start position:0%
there's an open socket to a server
 

00:02:01.829 --> 00:02:04.340 align:start position:0%
there's an open socket to a server
running<00:02:02.070><c> within</c><00:02:02.399><c> your</c><00:02:02.640><c> app</c><00:02:02.759><c> and</c><00:02:03.000><c> if</c><00:02:03.210><c> so</c><00:02:03.509><c> uses</c>

00:02:04.340 --> 00:02:04.350 align:start position:0%
running within your app and if so uses
 

00:02:04.350 --> 00:02:05.870 align:start position:0%
running within your app and if so uses
that<00:02:04.500><c> socket</c><00:02:04.860><c> to</c><00:02:05.009><c> confirm</c><00:02:05.369><c> that</c><00:02:05.520><c> there</c><00:02:05.670><c> is</c><00:02:05.759><c> an</c>

00:02:05.870 --> 00:02:05.880 align:start position:0%
that socket to confirm that there is an
 

00:02:05.880 --> 00:02:07.670 align:start position:0%
that socket to confirm that there is an
instant<00:02:06.329><c> run</c><00:02:06.479><c> enabled</c><00:02:06.750><c> version</c><00:02:07.290><c> of</c><00:02:07.409><c> your</c><00:02:07.530><c> app</c>

00:02:07.670 --> 00:02:07.680 align:start position:0%
instant run enabled version of your app
 

00:02:07.680 --> 00:02:09.680 align:start position:0%
instant run enabled version of your app
running<00:02:07.950><c> in</c><00:02:08.129><c> the</c><00:02:08.550><c> foreground</c><00:02:08.819><c> of</c><00:02:09.179><c> that</c><00:02:09.390><c> target</c>

00:02:09.680 --> 00:02:09.690 align:start position:0%
running in the foreground of that target
 

00:02:09.690 --> 00:02:12.020 align:start position:0%
running in the foreground of that target
device<00:02:10.190><c> you</c><00:02:11.190><c> will</c><00:02:11.310><c> then</c><00:02:11.459><c> check</c><00:02:11.700><c> the</c><00:02:11.910><c> apps</c>

00:02:12.020 --> 00:02:12.030 align:start position:0%
device you will then check the apps
 

00:02:12.030 --> 00:02:13.760 align:start position:0%
device you will then check the apps
build<00:02:12.330><c> ID</c><00:02:12.540><c> to</c><00:02:12.840><c> make</c><00:02:12.930><c> sure</c><00:02:13.140><c> it's</c><00:02:13.290><c> the</c><00:02:13.410><c> version</c>

00:02:13.760 --> 00:02:13.770 align:start position:0%
build ID to make sure it's the version
 

00:02:13.770 --> 00:02:16.850 align:start position:0%
build ID to make sure it's the version
expects<00:02:14.370><c> before</c><00:02:14.700><c> sending</c><00:02:15.030><c> any</c><00:02:15.120><c> changes</c><00:02:15.860><c> while</c>

00:02:16.850 --> 00:02:16.860 align:start position:0%
expects before sending any changes while
 

00:02:16.860 --> 00:02:18.170 align:start position:0%
expects before sending any changes while
you're<00:02:17.010><c> developing</c><00:02:17.250><c> Android</c><00:02:18.000><c> studio</c>

00:02:18.170 --> 00:02:18.180 align:start position:0%
you're developing Android studio
 

00:02:18.180 --> 00:02:20.180 align:start position:0%
you're developing Android studio
monitors<00:02:18.930><c> which</c><00:02:19.110><c> files</c><00:02:19.380><c> have</c><00:02:19.590><c> changed</c><00:02:20.070><c> and</c>

00:02:20.180 --> 00:02:20.190 align:start position:0%
monitors which files have changed and
 

00:02:20.190 --> 00:02:22.280 align:start position:0%
monitors which files have changed and
based<00:02:20.610><c> on</c><00:02:20.790><c> that</c><00:02:21.030><c> runs</c><00:02:21.420><c> a</c><00:02:21.540><c> custom</c><00:02:21.930><c> Gradle</c><00:02:22.260><c> task</c>

00:02:22.280 --> 00:02:22.290 align:start position:0%
based on that runs a custom Gradle task
 

00:02:22.290 --> 00:02:24.710 align:start position:0%
based on that runs a custom Gradle task
that<00:02:22.740><c> creates</c><00:02:23.130><c> a</c><00:02:23.280><c> Dex</c><00:02:23.550><c> file</c><00:02:23.760><c> for</c><00:02:24.000><c> only</c><00:02:24.210><c> the</c>

00:02:24.710 --> 00:02:24.720 align:start position:0%
that creates a Dex file for only the
 

00:02:24.720 --> 00:02:28.040 align:start position:0%
that creates a Dex file for only the
changed<00:02:25.200><c> classes</c><00:02:26.180><c> that</c><00:02:27.180><c> new</c><00:02:27.420><c> Dex</c><00:02:27.660><c> file</c><00:02:27.840><c> is</c>

00:02:28.040 --> 00:02:28.050 align:start position:0%
changed classes that new Dex file is
 

00:02:28.050 --> 00:02:29.510 align:start position:0%
changed classes that new Dex file is
picked<00:02:28.290><c> up</c><00:02:28.380><c> by</c><00:02:28.440><c> Android</c><00:02:28.890><c> studio</c><00:02:29.070><c> which</c>

00:02:29.510 --> 00:02:29.520 align:start position:0%
picked up by Android studio which
 

00:02:29.520 --> 00:02:31.250 align:start position:0%
picked up by Android studio which
deploys<00:02:29.850><c> it</c><00:02:30.060><c> to</c><00:02:30.180><c> the</c><00:02:30.270><c> app</c><00:02:30.360><c> server</c><00:02:30.570><c> we</c><00:02:30.930><c> inject</c>

00:02:31.250 --> 00:02:31.260 align:start position:0%
deploys it to the app server we inject
 

00:02:31.260 --> 00:02:33.440 align:start position:0%
deploys it to the app server we inject
it<00:02:31.380><c> into</c><00:02:31.500><c> the</c><00:02:31.590><c> running</c><00:02:31.890><c> app</c><00:02:32.040><c> the</c><00:02:33.000><c> app</c><00:02:33.150><c> server</c>

00:02:33.440 --> 00:02:33.450 align:start position:0%
it into the running app the app server
 

00:02:33.450 --> 00:02:35.450 align:start position:0%
it into the running app the app server
uses<00:02:33.960><c> the</c><00:02:34.080><c> custom</c><00:02:34.440><c> class</c><00:02:34.650><c> loaders</c><00:02:35.070><c> to</c><00:02:35.280><c> load</c>

00:02:35.450 --> 00:02:35.460 align:start position:0%
uses the custom class loaders to load
 

00:02:35.460 --> 00:02:38.390 align:start position:0%
uses the custom class loaders to load
and<00:02:35.640><c> apply</c><00:02:35.910><c> the</c><00:02:35.970><c> updated</c><00:02:36.600><c> classes</c><00:02:37.190><c> but</c><00:02:38.190><c> of</c>

00:02:38.390 --> 00:02:38.400 align:start position:0%
and apply the updated classes but of
 

00:02:38.400 --> 00:02:40.430 align:start position:0%
and apply the updated classes but of
course<00:02:38.730><c> the</c><00:02:38.940><c> old</c><00:02:39.150><c> versions</c><00:02:39.720><c> of</c><00:02:39.840><c> those</c><00:02:39.930><c> classes</c>

00:02:40.430 --> 00:02:40.440 align:start position:0%
course the old versions of those classes
 

00:02:40.440 --> 00:02:42.290 align:start position:0%
course the old versions of those classes
already<00:02:40.650><c> exist</c><00:02:41.280><c> in</c><00:02:41.430><c> the</c><00:02:41.490><c> running</c><00:02:41.790><c> instance</c><00:02:41.940><c> of</c>

00:02:42.290 --> 00:02:42.300 align:start position:0%
already exist in the running instance of
 

00:02:42.300 --> 00:02:44.720 align:start position:0%
already exist in the running instance of
your<00:02:42.330><c> app</c><00:02:42.600><c> so</c><00:02:42.650><c> Gradle</c><00:02:43.650><c> has</c><00:02:43.830><c> transformed</c><00:02:44.460><c> the</c>

00:02:44.720 --> 00:02:44.730 align:start position:0%
your app so Gradle has transformed the
 

00:02:44.730 --> 00:02:46.550 align:start position:0%
your app so Gradle has transformed the
updated<00:02:45.180><c> versions</c><00:02:45.570><c> to</c><00:02:45.750><c> override</c><00:02:46.320><c> the</c>

00:02:46.550 --> 00:02:46.560 align:start position:0%
updated versions to override the
 

00:02:46.560 --> 00:02:49.550 align:start position:0%
updated versions to override the
pre-existing<00:02:47.310><c> classes</c><00:02:47.900><c> the</c><00:02:48.900><c> app</c><00:02:48.990><c> server</c><00:02:49.230><c> then</c>

00:02:49.550 --> 00:02:49.560 align:start position:0%
pre-existing classes the app server then
 

00:02:49.560 --> 00:02:51.050 align:start position:0%
pre-existing classes the app server then
uses<00:02:49.950><c> the</c><00:02:50.070><c> instrumentation</c><00:02:50.790><c> that</c><00:02:50.820><c> we</c>

00:02:51.050 --> 00:02:51.060 align:start position:0%
uses the instrumentation that we
 

00:02:51.060 --> 00:02:52.850 align:start position:0%
uses the instrumentation that we
injected<00:02:51.540><c> into</c><00:02:51.780><c> our</c><00:02:51.900><c> original</c><00:02:52.050><c> classes</c><00:02:52.710><c> to</c>

00:02:52.850 --> 00:02:52.860 align:start position:0%
injected into our original classes to
 

00:02:52.860 --> 00:02:54.740 align:start position:0%
injected into our original classes to
delegate<00:02:53.370><c> each</c><00:02:53.580><c> method</c><00:02:53.940><c> call</c><00:02:54.270><c> to</c><00:02:54.300><c> the</c><00:02:54.600><c> new</c>

00:02:54.740 --> 00:02:54.750 align:start position:0%
delegate each method call to the new
 

00:02:54.750 --> 00:02:56.800 align:start position:0%
delegate each method call to the new
override<00:02:55.260><c> classes</c><00:02:55.770><c> that</c><00:02:55.950><c> we've</c><00:02:56.130><c> just</c><00:02:56.400><c> loaded</c>

00:02:56.800 --> 00:02:56.810 align:start position:0%
override classes that we've just loaded
 

00:02:56.810 --> 00:02:59.390 align:start position:0%
override classes that we've just loaded
from<00:02:57.810><c> now</c><00:02:57.960><c> on</c><00:02:58.200><c> each</c><00:02:58.560><c> time</c><00:02:58.890><c> the</c><00:02:59.040><c> affected</c>

00:02:59.390 --> 00:02:59.400 align:start position:0%
from now on each time the affected
 

00:02:59.400 --> 00:03:01.370 align:start position:0%
from now on each time the affected
method<00:02:59.700><c> gets</c><00:02:59.880><c> called</c><00:03:00.020><c> anywhere</c><00:03:01.020><c> within</c><00:03:01.170><c> our</c>

00:03:01.370 --> 00:03:01.380 align:start position:0%
method gets called anywhere within our
 

00:03:01.380 --> 00:03:03.320 align:start position:0%
method gets called anywhere within our
app<00:03:01.560><c> the</c><00:03:02.070><c> new</c><00:03:02.220><c> modified</c><00:03:02.730><c> version</c><00:03:03.150><c> of</c><00:03:03.240><c> the</c>

00:03:03.320 --> 00:03:03.330 align:start position:0%
app the new modified version of the
 

00:03:03.330 --> 00:03:05.420 align:start position:0%
app the new modified version of the
method<00:03:03.510><c> will</c><00:03:03.810><c> get</c><00:03:03.960><c> called</c><00:03:04.200><c> instead</c><00:03:04.710><c> if</c><00:03:05.340><c> you</c>

00:03:05.420 --> 00:03:05.430 align:start position:0%
method will get called instead if you
 

00:03:05.430 --> 00:03:07.280 align:start position:0%
method will get called instead if you
set<00:03:05.730><c> breakpoints</c><00:03:06.000><c> or</c><00:03:06.510><c> look</c><00:03:06.840><c> at</c><00:03:06.960><c> your</c><00:03:07.050><c> stack</c>

00:03:07.280 --> 00:03:07.290 align:start position:0%
set breakpoints or look at your stack
 

00:03:07.290 --> 00:03:09.110 align:start position:0%
set breakpoints or look at your stack
trace<00:03:07.560><c> you'll</c><00:03:07.770><c> actually</c><00:03:07.980><c> see</c><00:03:08.400><c> the</c><00:03:08.550><c> override</c>

00:03:09.110 --> 00:03:09.120 align:start position:0%
trace you'll actually see the override
 

00:03:09.120 --> 00:03:11.990 align:start position:0%
trace you'll actually see the override
named<00:03:09.420><c> classes</c><00:03:10.020><c> methods</c><00:03:10.560><c> called</c><00:03:11.160><c> within</c><00:03:11.730><c> your</c>

00:03:11.990 --> 00:03:12.000 align:start position:0%
named classes methods called within your
 

00:03:12.000 --> 00:03:14.870 align:start position:0%
named classes methods called within your
stack<00:03:12.470><c> okay</c><00:03:13.470><c> so</c><00:03:13.800><c> that</c><00:03:14.070><c> takes</c><00:03:14.220><c> care</c><00:03:14.370><c> of</c><00:03:14.550><c> our</c><00:03:14.670><c> hot</c>

00:03:14.870 --> 00:03:14.880 align:start position:0%
stack okay so that takes care of our hot
 

00:03:14.880 --> 00:03:17.360 align:start position:0%
stack okay so that takes care of our hot
swap<00:03:15.180><c> so</c><00:03:15.600><c> when</c><00:03:16.080><c> do</c><00:03:16.200><c> we</c><00:03:16.290><c> need</c><00:03:16.500><c> to</c><00:03:16.650><c> warm</c><00:03:16.890><c> swap</c><00:03:17.160><c> and</c>

00:03:17.360 --> 00:03:17.370 align:start position:0%
swap so when do we need to warm swap and
 

00:03:17.370 --> 00:03:20.900 align:start position:0%
swap so when do we need to warm swap and
what<00:03:17.910><c> is</c><00:03:18.030><c> a</c><00:03:18.060><c> warm</c><00:03:18.390><c> swap</c><00:03:18.660><c> a</c><00:03:19.010><c> warm</c><00:03:20.010><c> swap</c><00:03:20.310><c> restarts</c>

00:03:20.900 --> 00:03:20.910 align:start position:0%
what is a warm swap a warm swap restarts
 

00:03:20.910 --> 00:03:23.360 align:start position:0%
what is a warm swap a warm swap restarts
the<00:03:20.970><c> activity</c><00:03:21.450><c> we</c><00:03:22.410><c> do</c><00:03:22.530><c> things</c><00:03:22.770><c> like</c><00:03:22.950><c> changing</c>

00:03:23.360 --> 00:03:23.370 align:start position:0%
the activity we do things like changing
 

00:03:23.370 --> 00:03:25.040 align:start position:0%
the activity we do things like changing
resources<00:03:23.910><c> the</c><00:03:24.060><c> restart</c><00:03:24.480><c> is</c><00:03:24.570><c> needed</c><00:03:24.930><c> to</c>

00:03:25.040 --> 00:03:25.050 align:start position:0%
resources the restart is needed to
 

00:03:25.050 --> 00:03:27.740 align:start position:0%
resources the restart is needed to
reload<00:03:25.560><c> the</c><00:03:25.800><c> affected</c><00:03:26.220><c> resources</c><00:03:26.700><c> right</c><00:03:27.510><c> now</c>

00:03:27.740 --> 00:03:27.750 align:start position:0%
reload the affected resources right now
 

00:03:27.750 --> 00:03:30.020 align:start position:0%
reload the affected resources right now
that<00:03:27.990><c> means</c><00:03:28.170><c> changing</c><00:03:28.650><c> any</c><00:03:28.860><c> resource</c><00:03:29.490><c> results</c>

00:03:30.020 --> 00:03:30.030 align:start position:0%
that means changing any resource results
 

00:03:30.030 --> 00:03:31.670 align:start position:0%
that means changing any resource results
in<00:03:30.180><c> all</c><00:03:30.390><c> of</c><00:03:30.600><c> them</c><00:03:30.750><c> being</c><00:03:30.930><c> repackaged</c><00:03:31.560><c> and</c>

00:03:31.670 --> 00:03:31.680 align:start position:0%
in all of them being repackaged and
 

00:03:31.680 --> 00:03:33.680 align:start position:0%
in all of them being repackaged and
resent<00:03:32.190><c> but</c><00:03:32.580><c> we're</c><00:03:33.180><c> working</c><00:03:33.510><c> on</c><00:03:33.600><c> an</c>

00:03:33.680 --> 00:03:33.690 align:start position:0%
resent but we're working on an
 

00:03:33.690 --> 00:03:35.330 align:start position:0%
resent but we're working on an
incremental<00:03:33.990><c> packager</c><00:03:34.709><c> that</c><00:03:34.890><c> will</c><00:03:35.010><c> only</c>

00:03:35.330 --> 00:03:35.340 align:start position:0%
incremental packager that will only
 

00:03:35.340 --> 00:03:37.420 align:start position:0%
incremental packager that will only
package<00:03:35.700><c> and</c><00:03:35.880><c> deploy</c><00:03:35.970><c> changed</c><00:03:36.720><c> resources</c>

00:03:37.420 --> 00:03:37.430 align:start position:0%
package and deploy changed resources
 

00:03:37.430 --> 00:03:40.730 align:start position:0%
package and deploy changed resources
that<00:03:38.430><c> said</c><00:03:38.850><c> warm</c><00:03:39.420><c> swap</c><00:03:39.720><c> won't</c><00:03:40.170><c> work</c><00:03:40.440><c> for</c>

00:03:40.730 --> 00:03:40.740 align:start position:0%
that said warm swap won't work for
 

00:03:40.740 --> 00:03:42.470 align:start position:0%
that said warm swap won't work for
changes<00:03:41.130><c> to</c><00:03:41.250><c> resources</c><00:03:41.700><c> that</c><00:03:41.850><c> are</c><00:03:42.060><c> referenced</c>

00:03:42.470 --> 00:03:42.480 align:start position:0%
changes to resources that are referenced
 

00:03:42.480 --> 00:03:44.330 align:start position:0%
changes to resources that are referenced
within<00:03:42.660><c> the</c><00:03:42.840><c> manifest</c><00:03:43.290><c> or</c><00:03:43.500><c> changes</c><00:03:44.160><c> to</c><00:03:44.250><c> the</c>

00:03:44.330 --> 00:03:44.340 align:start position:0%
within the manifest or changes to the
 

00:03:44.340 --> 00:03:46.520 align:start position:0%
within the manifest or changes to the
manifests<00:03:44.820><c> itself</c><00:03:45.140><c> that's</c><00:03:46.140><c> because</c><00:03:46.440><c> the</c>

00:03:46.520 --> 00:03:46.530 align:start position:0%
manifests itself that's because the
 

00:03:46.530 --> 00:03:47.930 align:start position:0%
manifests itself that's because the
values<00:03:46.860><c> read</c><00:03:47.100><c> from</c><00:03:47.250><c> the</c><00:03:47.340><c> manifest</c><00:03:47.700><c> are</c>

00:03:47.930 --> 00:03:47.940 align:start position:0%
values read from the manifest are
 

00:03:47.940 --> 00:03:50.570 align:start position:0%
values read from the manifest are
determined<00:03:48.390><c> when</c><00:03:48.540><c> the</c><00:03:48.570><c> apk</c><00:03:49.110><c> is</c><00:03:49.260><c> installed</c><00:03:49.770><c> so</c>

00:03:50.570 --> 00:03:50.580 align:start position:0%
determined when the apk is installed so
 

00:03:50.580 --> 00:03:52.190 align:start position:0%
determined when the apk is installed so
you<00:03:50.610><c> need</c><00:03:51.000><c> a</c><00:03:51.030><c> reinstallation</c><00:03:51.480><c> before</c><00:03:52.050><c> those</c>

00:03:52.190 --> 00:03:52.200 align:start position:0%
you need a reinstallation before those
 

00:03:52.200 --> 00:03:55.370 align:start position:0%
you need a reinstallation before those
changes<00:03:52.620><c> can</c><00:03:52.770><c> be</c><00:03:52.800><c> seen</c><00:03:53.600><c> so</c><00:03:54.600><c> changing</c><00:03:55.320><c> the</c>

00:03:55.370 --> 00:03:55.380 align:start position:0%
changes can be seen so changing the
 

00:03:55.380 --> 00:03:56.990 align:start position:0%
changes can be seen so changing the
string<00:03:55.680><c> resource</c><00:03:56.040><c> used</c><00:03:56.340><c> to</c><00:03:56.430><c> define</c><00:03:56.700><c> the</c><00:03:56.850><c> app</c>

00:03:56.990 --> 00:03:57.000 align:start position:0%
string resource used to define the app
 

00:03:57.000 --> 00:03:58.850 align:start position:0%
string resource used to define the app
name<00:03:57.270><c> or</c><00:03:57.570><c> drawable</c><00:03:58.080><c> representing</c><00:03:58.620><c> the</c><00:03:58.709><c> app</c>

00:03:58.850 --> 00:03:58.860 align:start position:0%
name or drawable representing the app
 

00:03:58.860 --> 00:04:01.270 align:start position:0%
name or drawable representing the app
icon<00:03:59.100><c> aren't</c><00:03:59.820><c> supported</c><00:04:00.270><c> within</c><00:04:00.420><c> instant</c><00:04:00.870><c> run</c>

00:04:01.270 --> 00:04:01.280 align:start position:0%
icon aren't supported within instant run
 

00:04:01.280 --> 00:04:03.770 align:start position:0%
icon aren't supported within instant run
so<00:04:02.280><c> far</c><00:04:02.459><c> we've</c><00:04:02.730><c> looked</c><00:04:02.910><c> at</c><00:04:03.060><c> warm</c><00:04:03.330><c> swaps</c><00:04:03.600><c> to</c>

00:04:03.770 --> 00:04:03.780 align:start position:0%
so far we've looked at warm swaps to
 

00:04:03.780 --> 00:04:05.540 align:start position:0%
so far we've looked at warm swaps to
update<00:04:04.020><c> resources</c><00:04:04.530><c> and</c><00:04:04.709><c> before</c><00:04:05.010><c> that</c><00:04:05.040><c> hot</c>

00:04:05.540 --> 00:04:05.550 align:start position:0%
update resources and before that hot
 

00:04:05.550 --> 00:04:07.400 align:start position:0%
update resources and before that hot
swaps<00:04:05.850><c> that</c><00:04:06.090><c> override</c><00:04:06.540><c> methods</c><00:04:06.750><c> within</c><00:04:07.260><c> your</c>

00:04:07.400 --> 00:04:07.410 align:start position:0%
swaps that override methods within your
 

00:04:07.410 --> 00:04:09.470 align:start position:0%
swaps that override methods within your
running<00:04:07.650><c> app</c><00:04:07.770><c> but</c><00:04:08.580><c> what</c><00:04:08.790><c> about</c><00:04:08.970><c> structural</c>

00:04:09.470 --> 00:04:09.480 align:start position:0%
running app but what about structural
 

00:04:09.480 --> 00:04:11.300 align:start position:0%
running app but what about structural
changes<00:04:09.900><c> that</c><00:04:10.080><c> can't</c><00:04:10.350><c> be</c><00:04:10.410><c> applied</c><00:04:10.770><c> simply</c><00:04:11.190><c> by</c>

00:04:11.300 --> 00:04:11.310 align:start position:0%
changes that can't be applied simply by
 

00:04:11.310 --> 00:04:14.180 align:start position:0%
changes that can't be applied simply by
calling<00:04:11.670><c> a</c><00:04:11.730><c> method</c><00:04:11.880><c> again</c><00:04:12.530><c> like</c><00:04:13.530><c> adding</c>

00:04:14.180 --> 00:04:14.190 align:start position:0%
calling a method again like adding
 

00:04:14.190 --> 00:04:16.340 align:start position:0%
calling a method again like adding
removing<00:04:14.370><c> or</c><00:04:14.760><c> changing</c><00:04:14.790><c> annotations</c><00:04:15.690><c> fields</c>

00:04:16.340 --> 00:04:16.350 align:start position:0%
removing or changing annotations fields
 

00:04:16.350 --> 00:04:18.320 align:start position:0%
removing or changing annotations fields
static<00:04:16.950><c> or</c><00:04:17.100><c> instant</c><00:04:17.430><c> method</c><00:04:17.700><c> signatures</c><00:04:18.120><c> or</c>

00:04:18.320 --> 00:04:18.330 align:start position:0%
static or instant method signatures or
 

00:04:18.330 --> 00:04:20.000 align:start position:0%
static or instant method signatures or
changing<00:04:18.840><c> parent</c><00:04:19.200><c> classes</c><00:04:19.410><c> or</c><00:04:19.709><c> static</c>

00:04:20.000 --> 00:04:20.010 align:start position:0%
changing parent classes or static
 

00:04:20.010 --> 00:04:22.580 align:start position:0%
changing parent classes or static
initializers<00:04:20.640><c> these</c><00:04:21.570><c> cases</c><00:04:21.989><c> require</c><00:04:22.440><c> an</c>

00:04:22.580 --> 00:04:22.590 align:start position:0%
initializers these cases require an
 

00:04:22.590 --> 00:04:24.920 align:start position:0%
initializers these cases require an
application<00:04:23.010><c> restart</c><00:04:23.640><c> using</c><00:04:23.970><c> where</c><00:04:24.510><c> possible</c>

00:04:24.920 --> 00:04:24.930 align:start position:0%
application restart using where possible
 

00:04:24.930 --> 00:04:27.560 align:start position:0%
application restart using where possible
a<00:04:25.110><c> called</c><00:04:25.500><c> swap</c><00:04:25.770><c> call</c><00:04:26.580><c> swaps</c><00:04:26.880><c> apply</c><00:04:27.180><c> code</c>

00:04:27.560 --> 00:04:27.570 align:start position:0%
a called swap call swaps apply code
 

00:04:27.570 --> 00:04:29.450 align:start position:0%
a called swap call swaps apply code
Changez<00:04:27.870><c> by</c><00:04:27.990><c> sending</c><00:04:28.380><c> nude</c><00:04:28.620><c> x-files</c><00:04:29.100><c> that</c><00:04:29.370><c> are</c>

00:04:29.450 --> 00:04:29.460 align:start position:0%
Changez by sending nude x-files that are
 

00:04:29.460 --> 00:04:31.130 align:start position:0%
Changez by sending nude x-files that are
small<00:04:29.730><c> slices</c><00:04:30.240><c> containing</c><00:04:30.690><c> only</c><00:04:30.840><c> the</c>

00:04:31.130 --> 00:04:31.140 align:start position:0%
small slices containing only the
 

00:04:31.140 --> 00:04:32.870 align:start position:0%
small slices containing only the
affected<00:04:31.560><c> classes</c><00:04:32.040><c> to</c><00:04:32.160><c> the</c><00:04:32.190><c> type</c><00:04:32.460><c> device</c>

00:04:32.870 --> 00:04:32.880 align:start position:0%
affected classes to the type device
 

00:04:32.880 --> 00:04:35.510 align:start position:0%
affected classes to the type device
before<00:04:33.270><c> restarting</c><00:04:34.080><c> the</c><00:04:34.200><c> app</c><00:04:34.320><c> as</c><00:04:34.500><c> a</c><00:04:35.100><c> result</c>

00:04:35.510 --> 00:04:35.520 align:start position:0%
before restarting the app as a result
 

00:04:35.520 --> 00:04:37.070 align:start position:0%
before restarting the app as a result
called<00:04:35.820><c> swaps</c><00:04:36.120><c> dependent</c><00:04:36.570><c> on</c><00:04:36.660><c> uploading</c>

00:04:37.070 --> 00:04:37.080 align:start position:0%
called swaps dependent on uploading
 

00:04:37.080 --> 00:04:39.110 align:start position:0%
called swaps dependent on uploading
multiple<00:04:37.320><c> decks</c><00:04:37.770><c> files</c><00:04:38.010><c> so</c><00:04:38.400><c> that</c><00:04:38.760><c> requires</c>

00:04:39.110 --> 00:04:39.120 align:start position:0%
multiple decks files so that requires
 

00:04:39.120 --> 00:04:41.510 align:start position:0%
multiple decks files so that requires
art<00:04:39.480><c> which</c><00:04:40.170><c> is</c><00:04:40.200><c> only</c><00:04:40.530><c> guaranteed</c><00:04:40.800><c> available</c>

00:04:41.510 --> 00:04:41.520 align:start position:0%
art which is only guaranteed available
 

00:04:41.520 --> 00:04:44.000 align:start position:0%
art which is only guaranteed available
on<00:04:41.640><c> devices</c><00:04:41.970><c> running</c><00:04:42.330><c> Android</c><00:04:42.540><c> 5.0</c><00:04:43.350><c> or</c><00:04:43.560><c> epi</c>

00:04:44.000 --> 00:04:44.010 align:start position:0%
on devices running Android 5.0 or epi
 

00:04:44.010 --> 00:04:48.260 align:start position:0%
on devices running Android 5.0 or epi
level<00:04:44.250><c> 21</c><00:04:44.730><c> or</c><00:04:45.000><c> higher</c><00:04:46.550><c> the</c><00:04:47.550><c> type</c><00:04:47.760><c> device</c><00:04:48.090><c> is</c>

00:04:48.260 --> 00:04:48.270 align:start position:0%
level 21 or higher the type device is
 

00:04:48.270 --> 00:04:50.060 align:start position:0%
level 21 or higher the type device is
running<00:04:48.570><c> API</c><00:04:48.870><c> level</c><00:04:49.230><c> 20</c><00:04:49.560><c> or</c><00:04:49.680><c> lower</c><00:04:49.830><c> and</c>

00:04:50.060 --> 00:04:50.070 align:start position:0%
running API level 20 or lower and
 

00:04:50.070 --> 00:04:51.680 align:start position:0%
running API level 20 or lower and
possibly<00:04:50.640><c> using</c><00:04:50.940><c> the</c><00:04:51.000><c> dalvik</c><00:04:51.300><c> runtime</c>

00:04:51.680 --> 00:04:51.690 align:start position:0%
possibly using the dalvik runtime
 

00:04:51.690 --> 00:04:54.820 align:start position:0%
possibly using the dalvik runtime
Android<00:04:52.200><c> studio</c><00:04:52.440><c> deploys</c><00:04:52.920><c> a</c><00:04:52.950><c> full</c><00:04:53.400><c> apk</c>

00:04:54.820 --> 00:04:54.830 align:start position:0%
Android studio deploys a full apk
 

00:04:54.830 --> 00:04:57.230 align:start position:0%
Android studio deploys a full apk
instant<00:04:55.830><c> run</c><00:04:55.950><c> tries</c><00:04:56.220><c> to</c><00:04:56.370><c> be</c><00:04:56.460><c> clever</c><00:04:56.730><c> but</c><00:04:56.850><c> it</c>

00:04:57.230 --> 00:04:57.240 align:start position:0%
instant run tries to be clever but it
 

00:04:57.240 --> 00:04:59.300 align:start position:0%
instant run tries to be clever but it
can't<00:04:57.540><c> turn</c><00:04:57.750><c> back</c><00:04:57.810><c> time</c><00:04:58.050><c> if</c><00:04:58.620><c> you</c><00:04:58.890><c> make</c><00:04:59.100><c> code</c>

00:04:59.300 --> 00:04:59.310 align:start position:0%
can't turn back time if you make code
 

00:04:59.310 --> 00:05:00.920 align:start position:0%
can't turn back time if you make code
changes<00:04:59.700><c> that</c><00:04:59.820><c> effect</c><00:05:00.090><c> initializes</c><00:05:00.750><c> that</c>

00:05:00.920 --> 00:05:00.930 align:start position:0%
changes that effect initializes that
 

00:05:00.930 --> 00:05:02.480 align:start position:0%
changes that effect initializes that
will<00:05:01.080><c> run</c><00:05:01.230><c> when</c><00:05:01.470><c> the</c><00:05:01.560><c> application</c><00:05:02.070><c> was</c><00:05:02.220><c> first</c>

00:05:02.480 --> 00:05:02.490 align:start position:0%
will run when the application was first
 

00:05:02.490 --> 00:05:04.700 align:start position:0%
will run when the application was first
started<00:05:03.090><c> you'll</c><00:05:03.720><c> need</c><00:05:03.780><c> to</c><00:05:03.990><c> restart</c><00:05:04.380><c> your</c><00:05:04.530><c> app</c>

00:05:04.700 --> 00:05:04.710 align:start position:0%
started you'll need to restart your app
 

00:05:04.710 --> 00:05:06.950 align:start position:0%
started you'll need to restart your app
for<00:05:05.010><c> the</c><00:05:05.070><c> changes</c><00:05:05.370><c> to</c><00:05:05.400><c> take</c><00:05:05.520><c> effect</c><00:05:05.960><c> to</c>

00:05:06.950 --> 00:05:06.960 align:start position:0%
for the changes to take effect to
 

00:05:06.960 --> 00:05:08.930 align:start position:0%
for the changes to take effect to
perform<00:05:07.260><c> an</c><00:05:07.350><c> incremental</c><00:05:07.860><c> build</c><00:05:08.100><c> and</c><00:05:08.370><c> restart</c>

00:05:08.930 --> 00:05:08.940 align:start position:0%
perform an incremental build and restart
 

00:05:08.940 --> 00:05:11.930 align:start position:0%
perform an incremental build and restart
the<00:05:09.000><c> app</c><00:05:09.180><c> click</c><00:05:09.570><c> rerun</c><00:05:10.280><c> if</c><00:05:11.280><c> you</c><00:05:11.460><c> want</c><00:05:11.610><c> to</c><00:05:11.670><c> stop</c>

00:05:11.930 --> 00:05:11.940 align:start position:0%
the app click rerun if you want to stop
 

00:05:11.940 --> 00:05:13.790 align:start position:0%
the app click rerun if you want to stop
everything<00:05:12.390><c> and</c><00:05:12.660><c> redeploy</c><00:05:13.140><c> a</c><00:05:13.170><c> clean</c><00:05:13.560><c> build</c>

00:05:13.790 --> 00:05:13.800 align:start position:0%
everything and redeploy a clean build
 

00:05:13.800 --> 00:05:16.040 align:start position:0%
everything and redeploy a clean build
select<00:05:14.250><c> run</c><00:05:14.490><c> and</c><00:05:14.700><c> then</c><00:05:15.000><c> clean</c><00:05:15.330><c> and</c><00:05:15.510><c> rerun</c><00:05:15.840><c> app</c>

00:05:16.040 --> 00:05:16.050 align:start position:0%
select run and then clean and rerun app
 

00:05:16.050 --> 00:05:18.440 align:start position:0%
select run and then clean and rerun app
to<00:05:16.830><c> stop</c><00:05:17.040><c> the</c><00:05:17.160><c> running</c><00:05:17.400><c> app</c><00:05:17.550><c> perform</c><00:05:18.060><c> a</c><00:05:18.210><c> clean</c>

00:05:18.440 --> 00:05:18.450 align:start position:0%
to stop the running app perform a clean
 

00:05:18.450 --> 00:05:20.660 align:start position:0%
to stop the running app perform a clean
build<00:05:18.900><c> and</c><00:05:19.140><c> deploying</c><00:05:19.800><c> your</c><00:05:19.980><c> apk</c><00:05:20.430><c> to</c><00:05:20.490><c> the</c>

00:05:20.660 --> 00:05:20.670 align:start position:0%
build and deploying your apk to the
 

00:05:20.670 --> 00:05:24.290 align:start position:0%
build and deploying your apk to the
target<00:05:20.940><c> device</c><00:05:21.800><c> so</c><00:05:22.800><c> is</c><00:05:23.370><c> knowing</c><00:05:23.760><c> how</c><00:05:23.940><c> it</c><00:05:24.090><c> works</c>

00:05:24.290 --> 00:05:24.300 align:start position:0%
target device so is knowing how it works
 

00:05:24.300 --> 00:05:26.150 align:start position:0%
target device so is knowing how it works
enough<00:05:24.660><c> for</c><00:05:24.810><c> an</c><00:05:24.900><c> engineer</c><00:05:25.260><c> let's</c><00:05:25.830><c> check</c><00:05:26.040><c> in</c>

00:05:26.150 --> 00:05:26.160 align:start position:0%
enough for an engineer let's check in
 

00:05:26.160 --> 00:05:27.920 align:start position:0%
enough for an engineer let's check in
with<00:05:26.280><c> Wayne</c><00:05:26.520><c> I've</c><00:05:26.970><c> replaced</c><00:05:27.300><c> the</c><00:05:27.420><c> mechanism</c>

00:05:27.920 --> 00:05:27.930 align:start position:0%
with Wayne I've replaced the mechanism
 

00:05:27.930 --> 00:05:29.300 align:start position:0%
with Wayne I've replaced the mechanism
with<00:05:28.050><c> a</c><00:05:28.080><c> brillo</c><00:05:28.320><c> board</c><00:05:28.590><c> I</c><00:05:28.680><c> think</c><00:05:28.800><c> I</c><00:05:29.010><c> can</c><00:05:29.160><c> make</c>

00:05:29.300 --> 00:05:29.310 align:start position:0%
with a brillo board I think I can make
 

00:05:29.310 --> 00:05:34.100 align:start position:0%
with a brillo board I think I can make
this<00:05:29.430><c> thing</c><00:05:29.490><c> internet-enabled</c><00:05:32.930><c> that's</c><00:05:33.930><c> what</c>

00:05:34.100 --> 00:05:34.110 align:start position:0%
this thing internet-enabled that's what
 

00:05:34.110 --> 00:05:34.580 align:start position:0%
this thing internet-enabled that's what
I<00:05:34.140><c> thought</c>

00:05:34.580 --> 00:05:34.590 align:start position:0%
I thought
 

00:05:34.590 --> 00:05:36.800 align:start position:0%
I thought
in<00:05:34.800><c> that</c><00:05:35.580><c> spirit</c><00:05:35.910><c> let's</c><00:05:36.210><c> look</c><00:05:36.360><c> at</c><00:05:36.480><c> ways</c><00:05:36.630><c> you</c>

00:05:36.800 --> 00:05:36.810 align:start position:0%
in that spirit let's look at ways you
 

00:05:36.810 --> 00:05:38.360 align:start position:0%
in that spirit let's look at ways you
can<00:05:36.960><c> tweak</c><00:05:37.200><c> your</c><00:05:37.350><c> use</c><00:05:37.530><c> of</c><00:05:37.680><c> instant</c><00:05:37.980><c> run</c><00:05:38.100><c> to</c><00:05:38.280><c> get</c>

00:05:38.360 --> 00:05:38.370 align:start position:0%
can tweak your use of instant run to get
 

00:05:38.370 --> 00:05:40.700 align:start position:0%
can tweak your use of instant run to get
the<00:05:38.520><c> absolute</c><00:05:38.850><c> most</c><00:05:39.210><c> out</c><00:05:39.450><c> of</c><00:05:39.510><c> it</c><00:05:39.750><c> instant</c><00:05:40.620><c> run</c>

00:05:40.700 --> 00:05:40.710 align:start position:0%
the absolute most out of it instant run
 

00:05:40.710 --> 00:05:42.380 align:start position:0%
the absolute most out of it instant run
is<00:05:40.860><c> controlled</c><00:05:41.220><c> by</c><00:05:41.310><c> Android</c><00:05:41.700><c> studio</c><00:05:41.940><c> so</c><00:05:42.360><c> you</c>

00:05:42.380 --> 00:05:42.390 align:start position:0%
is controlled by Android studio so you
 

00:05:42.390 --> 00:05:44.360 align:start position:0%
is controlled by Android studio so you
need<00:05:42.750><c> to</c><00:05:42.930><c> start</c><00:05:43.230><c> and</c><00:05:43.440><c> restart</c><00:05:43.860><c> your</c><00:05:43.920><c> debug</c>

00:05:44.360 --> 00:05:44.370 align:start position:0%
need to start and restart your debug
 

00:05:44.370 --> 00:05:46.760 align:start position:0%
need to start and restart your debug
instance<00:05:44.760><c> from</c><00:05:44.970><c> the</c><00:05:45.180><c> IDE</c><00:05:45.510><c> don't</c><00:05:46.320><c> start</c><00:05:46.650><c> and</c>

00:05:46.760 --> 00:05:46.770 align:start position:0%
instance from the IDE don't start and
 

00:05:46.770 --> 00:05:48.080 align:start position:0%
instance from the IDE don't start and
restart<00:05:46.920><c> your</c><00:05:47.250><c> app</c><00:05:47.400><c> from</c><00:05:47.580><c> the</c><00:05:47.670><c> device</c><00:05:47.910><c> or</c>

00:05:48.080 --> 00:05:48.090 align:start position:0%
restart your app from the device or
 

00:05:48.090 --> 00:05:49.730 align:start position:0%
restart your app from the device or
emulator<00:05:48.240><c> or</c><00:05:48.690><c> things</c><00:05:48.990><c> will</c><00:05:49.110><c> get</c><00:05:49.260><c> out</c><00:05:49.440><c> of</c><00:05:49.470><c> whack</c>

00:05:49.730 --> 00:05:49.740 align:start position:0%
emulator or things will get out of whack
 

00:05:49.740 --> 00:05:52.220 align:start position:0%
emulator or things will get out of whack
really<00:05:50.400><c> quickly</c><00:05:50.760><c> let's</c><00:05:51.330><c> start</c><00:05:51.630><c> by</c><00:05:51.870><c> improving</c>

00:05:52.220 --> 00:05:52.230 align:start position:0%
really quickly let's start by improving
 

00:05:52.230 --> 00:05:53.810 align:start position:0%
really quickly let's start by improving
those<00:05:52.440><c> full</c><00:05:52.680><c> build</c><00:05:52.890><c> times</c><00:05:53.130><c> by</c><00:05:53.340><c> tweaking</c><00:05:53.610><c> the</c>

00:05:53.810 --> 00:05:53.820 align:start position:0%
those full build times by tweaking the
 

00:05:53.820 --> 00:05:56.870 align:start position:0%
those full build times by tweaking the
resources<00:05:54.360><c> allocated</c><00:05:54.870><c> to</c><00:05:54.990><c> Dex</c><00:05:55.320><c> you</c><00:05:55.730><c> can</c><00:05:56.730><c> edit</c>

00:05:56.870 --> 00:05:56.880 align:start position:0%
resources allocated to Dex you can edit
 

00:05:56.880 --> 00:05:58.550 align:start position:0%
resources allocated to Dex you can edit
your<00:05:57.000><c> projects</c><00:05:57.540><c> Gradle</c><00:05:57.870><c> dot</c><00:05:57.990><c> properties</c><00:05:58.350><c> file</c>

00:05:58.550 --> 00:05:58.560 align:start position:0%
your projects Gradle dot properties file
 

00:05:58.560 --> 00:06:00.560 align:start position:0%
your projects Gradle dot properties file
to<00:05:58.710><c> increase</c><00:05:59.160><c> the</c><00:05:59.370><c> maximum</c><00:05:59.520><c> heap</c><00:06:00.000><c> size</c><00:06:00.300><c> of</c><00:06:00.480><c> the</c>

00:06:00.560 --> 00:06:00.570 align:start position:0%
to increase the maximum heap size of the
 

00:06:00.570 --> 00:06:02.720 align:start position:0%
to increase the maximum heap size of the
Gradle<00:06:00.930><c> daemon</c><00:06:01.260><c> to</c><00:06:01.530><c> enable</c><00:06:01.890><c> Dex</c><00:06:02.130><c> in</c><00:06:02.280><c> process</c>

00:06:02.720 --> 00:06:02.730 align:start position:0%
Gradle daemon to enable Dex in process
 

00:06:02.730 --> 00:06:05.510 align:start position:0%
Gradle daemon to enable Dex in process
the<00:06:03.540><c> default</c><00:06:03.840><c> here</c><00:06:04.080><c> is</c><00:06:04.170><c> one</c><00:06:04.380><c> gig</c><00:06:04.680><c> so</c><00:06:05.010><c> set</c><00:06:05.310><c> it</c><00:06:05.430><c> to</c>

00:06:05.510 --> 00:06:05.520 align:start position:0%
the default here is one gig so set it to
 

00:06:05.520 --> 00:06:07.520 align:start position:0%
the default here is one gig so set it to
at<00:06:05.610><c> least</c><00:06:05.790><c> two</c><00:06:06.210><c> and</c><00:06:06.480><c> Dex</c><00:06:06.720><c> in</c><00:06:06.840><c> process</c><00:06:07.260><c> will</c><00:06:07.440><c> be</c>

00:06:07.520 --> 00:06:07.530 align:start position:0%
at least two and Dex in process will be
 

00:06:07.530 --> 00:06:09.200 align:start position:0%
at least two and Dex in process will be
enabled<00:06:07.950><c> allowing</c><00:06:08.610><c> multiple</c><00:06:08.940><c> decks</c>

00:06:09.200 --> 00:06:09.210 align:start position:0%
enabled allowing multiple decks
 

00:06:09.210 --> 00:06:11.120 align:start position:0%
enabled allowing multiple decks
processors<00:06:09.810><c> to</c><00:06:09.960><c> run</c><00:06:10.140><c> within</c><00:06:10.290><c> a</c><00:06:10.440><c> single</c><00:06:10.680><c> VM</c>

00:06:11.120 --> 00:06:11.130 align:start position:0%
processors to run within a single VM
 

00:06:11.130 --> 00:06:13.040 align:start position:0%
processors to run within a single VM
that's<00:06:11.610><c> also</c><00:06:12.090><c> shared</c><00:06:12.330><c> with</c><00:06:12.450><c> Gradle</c><00:06:12.930><c> and</c>

00:06:13.040 --> 00:06:13.050 align:start position:0%
that's also shared with Gradle and
 

00:06:13.050 --> 00:06:15.290 align:start position:0%
that's also shared with Gradle and
significantly<00:06:13.890><c> increases</c><00:06:14.520><c> build</c><00:06:14.760><c> speeds</c><00:06:15.060><c> if</c>

00:06:15.290 --> 00:06:15.300 align:start position:0%
significantly increases build speeds if
 

00:06:15.300 --> 00:06:17.780 align:start position:0%
significantly increases build speeds if
you've<00:06:16.110><c> increased</c><00:06:16.530><c> the</c><00:06:16.740><c> Java</c><00:06:17.100><c> max</c><00:06:17.340><c> heap</c><00:06:17.550><c> size</c>

00:06:17.780 --> 00:06:17.790 align:start position:0%
you've increased the Java max heap size
 

00:06:17.790 --> 00:06:19.640 align:start position:0%
you've increased the Java max heap size
in<00:06:18.000><c> your</c><00:06:18.150><c> module</c><00:06:18.570><c> level</c><00:06:18.840><c> build</c><00:06:19.140><c> or</c><00:06:19.320><c> Gradle</c>

00:06:19.640 --> 00:06:19.650 align:start position:0%
in your module level build or Gradle
 

00:06:19.650 --> 00:06:21.650 align:start position:0%
in your module level build or Gradle
file<00:06:19.890><c> from</c><00:06:20.130><c> the</c><00:06:20.250><c> default</c><00:06:20.520><c> of</c><00:06:20.730><c> one</c><00:06:20.910><c> gig</c><00:06:21.180><c> you'll</c>

00:06:21.650 --> 00:06:21.660 align:start position:0%
file from the default of one gig you'll
 

00:06:21.660 --> 00:06:23.150 align:start position:0%
file from the default of one gig you'll
need<00:06:21.780><c> to</c><00:06:21.960><c> increase</c><00:06:22.200><c> the</c><00:06:22.470><c> Gradle</c><00:06:22.770><c> daemon</c><00:06:23.040><c> to</c>

00:06:23.150 --> 00:06:23.160 align:start position:0%
need to increase the Gradle daemon to
 

00:06:23.160 --> 00:06:25.820 align:start position:0%
need to increase the Gradle daemon to
the<00:06:23.250><c> M</c><00:06:23.370><c> size</c><00:06:23.610><c> accordingly</c><00:06:24.410><c> thanks</c><00:06:25.410><c> to</c><00:06:25.530><c> support</c>

00:06:25.820 --> 00:06:25.830 align:start position:0%
the M size accordingly thanks to support
 

00:06:25.830 --> 00:06:28.160 align:start position:0%
the M size accordingly thanks to support
in<00:06:26.070><c> art</c><00:06:26.340><c> for</c><00:06:26.550><c> multiple</c><00:06:26.910><c> decks</c><00:06:27.150><c> loading</c><00:06:27.540><c> you'll</c>

00:06:28.160 --> 00:06:28.170 align:start position:0%
in art for multiple decks loading you'll
 

00:06:28.170 --> 00:06:29.750 align:start position:0%
in art for multiple decks loading you'll
get<00:06:28.290><c> the</c><00:06:28.380><c> best</c><00:06:28.680><c> performance</c><00:06:29.220><c> of</c><00:06:29.310><c> instant</c><00:06:29.640><c> run</c>

00:06:29.750 --> 00:06:29.760 align:start position:0%
get the best performance of instant run
 

00:06:29.760 --> 00:06:32.330 align:start position:0%
get the best performance of instant run
by<00:06:29.940><c> setting</c><00:06:30.270><c> your</c><00:06:30.390><c> min</c><00:06:30.630><c> SDK</c><00:06:30.780><c> version</c><00:06:31.470><c> to</c><00:06:31.680><c> 21</c><00:06:32.220><c> or</c>

00:06:32.330 --> 00:06:32.340 align:start position:0%
by setting your min SDK version to 21 or
 

00:06:32.340 --> 00:06:34.430 align:start position:0%
by setting your min SDK version to 21 or
higher<00:06:32.370><c> if</c><00:06:32.820><c> your</c><00:06:33.390><c> app</c><00:06:33.510><c> supports</c><00:06:33.960><c> earlier</c>

00:06:34.430 --> 00:06:34.440 align:start position:0%
higher if your app supports earlier
 

00:06:34.440 --> 00:06:35.840 align:start position:0%
higher if your app supports earlier
platform<00:06:34.890><c> versions</c><00:06:35.250><c> it</c><00:06:35.400><c> may</c><00:06:35.580><c> be</c><00:06:35.640><c> worth</c>

00:06:35.840 --> 00:06:35.850 align:start position:0%
platform versions it may be worth
 

00:06:35.850 --> 00:06:37.760 align:start position:0%
platform versions it may be worth
creating<00:06:36.120><c> a</c><00:06:36.419><c> new</c><00:06:36.630><c> product</c><00:06:36.840><c> flavor</c><00:06:37.230><c> that</c><00:06:37.530><c> sets</c>

00:06:37.760 --> 00:06:37.770 align:start position:0%
creating a new product flavor that sets
 

00:06:37.770 --> 00:06:39.860 align:start position:0%
creating a new product flavor that sets
your<00:06:37.980><c> min</c><00:06:38.130><c> SDK</c><00:06:38.280><c> to</c><00:06:38.669><c> 21</c><00:06:39.240><c> for</c><00:06:39.510><c> your</c><00:06:39.600><c> debugging</c>

00:06:39.860 --> 00:06:39.870 align:start position:0%
your min SDK to 21 for your debugging
 

00:06:39.870 --> 00:06:40.879 align:start position:0%
your min SDK to 21 for your debugging
cycles

00:06:40.879 --> 00:06:40.889 align:start position:0%
cycles
 

00:06:40.889 --> 00:06:42.200 align:start position:0%
cycles
you<00:06:40.979><c> can</c><00:06:41.099><c> take</c><00:06:41.249><c> full</c><00:06:41.460><c> advantage</c><00:06:41.939><c> of</c><00:06:42.060><c> the</c>

00:06:42.200 --> 00:06:42.210 align:start position:0%
you can take full advantage of the
 

00:06:42.210 --> 00:06:44.270 align:start position:0%
you can take full advantage of the
enhanced<00:06:42.659><c> instant</c><00:06:43.020><c> run</c><00:06:43.139><c> support</c><00:06:43.560><c> also</c>

00:06:44.270 --> 00:06:44.280 align:start position:0%
enhanced instant run support also
 

00:06:44.280 --> 00:06:45.980 align:start position:0%
enhanced instant run support also
remember<00:06:44.999><c> that</c><00:06:45.150><c> any</c><00:06:45.360><c> changes</c><00:06:45.780><c> to</c><00:06:45.900><c> the</c>

00:06:45.980 --> 00:06:45.990 align:start position:0%
remember that any changes to the
 

00:06:45.990 --> 00:06:48.200 align:start position:0%
remember that any changes to the
manifest<00:06:46.469><c> will</c><00:06:46.770><c> necessitate</c><00:06:47.099><c> a</c><00:06:47.699><c> full</c><00:06:47.969><c> build</c>

00:06:48.200 --> 00:06:48.210 align:start position:0%
manifest will necessitate a full build
 

00:06:48.210 --> 00:06:50.629 align:start position:0%
manifest will necessitate a full build
and<00:06:48.449><c> deploy</c><00:06:48.749><c> cycle</c><00:06:49.199><c> so</c><00:06:49.889><c> if</c><00:06:50.159><c> your</c><00:06:50.370><c> build</c>

00:06:50.629 --> 00:06:50.639 align:start position:0%
and deploy cycle so if your build
 

00:06:50.639 --> 00:06:52.610 align:start position:0%
and deploy cycle so if your build
process<00:06:50.759><c> automatically</c><00:06:51.719><c> updates</c><00:06:52.110><c> any</c><00:06:52.319><c> part</c>

00:06:52.610 --> 00:06:52.620 align:start position:0%
process automatically updates any part
 

00:06:52.620 --> 00:06:54.200 align:start position:0%
process automatically updates any part
of<00:06:52.680><c> the</c><00:06:52.800><c> app</c><00:06:52.919><c> manifest</c><00:06:53.370><c> for</c><00:06:53.789><c> example</c>

00:06:54.200 --> 00:06:54.210 align:start position:0%
of the app manifest for example
 

00:06:54.210 --> 00:06:56.089 align:start position:0%
of the app manifest for example
automatically<00:06:54.930><c> iterating</c><00:06:55.379><c> version</c><00:06:55.740><c> code</c><00:06:55.919><c> or</c>

00:06:56.089 --> 00:06:56.099 align:start position:0%
automatically iterating version code or
 

00:06:56.099 --> 00:06:58.219 align:start position:0%
automatically iterating version code or
version<00:06:56.430><c> name</c><00:06:56.639><c> consider</c><00:06:57.539><c> disabling</c><00:06:58.110><c> those</c>

00:06:58.219 --> 00:06:58.229 align:start position:0%
version name consider disabling those
 

00:06:58.229 --> 00:07:00.050 align:start position:0%
version name consider disabling those
automatic<00:06:58.770><c> updates</c><00:06:59.159><c> in</c><00:06:59.340><c> your</c><00:06:59.490><c> debug</c><00:06:59.759><c> build</c>

00:07:00.050 --> 00:07:00.060 align:start position:0%
automatic updates in your debug build
 

00:07:00.060 --> 00:07:02.629 align:start position:0%
automatic updates in your debug build
variants<00:07:00.830><c> instant</c><00:07:01.830><c> run</c><00:07:01.979><c> currently</c><00:07:02.400><c> only</c>

00:07:02.629 --> 00:07:02.639 align:start position:0%
variants instant run currently only
 

00:07:02.639 --> 00:07:04.760 align:start position:0%
variants instant run currently only
instruments<00:07:03.240><c> the</c><00:07:03.360><c> main</c><00:07:03.539><c> process</c><00:07:04.020><c> so</c><00:07:04.379><c> if</c><00:07:04.620><c> your</c>

00:07:04.760 --> 00:07:04.770 align:start position:0%
instruments the main process so if your
 

00:07:04.770 --> 00:07:07.129 align:start position:0%
instruments the main process so if your
app<00:07:04.919><c> uses</c><00:07:05.279><c> multiple</c><00:07:05.460><c> processes</c><00:07:06.240><c> hot</c><00:07:06.569><c> and</c><00:07:06.779><c> warm</c>

00:07:07.129 --> 00:07:07.139 align:start position:0%
app uses multiple processes hot and warm
 

00:07:07.139 --> 00:07:09.379 align:start position:0%
app uses multiple processes hot and warm
swaps<00:07:07.499><c> on</c><00:07:07.710><c> those</c><00:07:08.370><c> other</c><00:07:08.580><c> processes</c><00:07:09.210><c> will</c>

00:07:09.379 --> 00:07:09.389 align:start position:0%
swaps on those other processes will
 

00:07:09.389 --> 00:07:11.629 align:start position:0%
swaps on those other processes will
degrade<00:07:09.749><c> to</c><00:07:09.779><c> cold</c><00:07:10.139><c> swaps</c><00:07:10.439><c> or</c><00:07:10.650><c> full</c><00:07:11.159><c> builds</c><00:07:11.490><c> if</c>

00:07:11.629 --> 00:07:11.639 align:start position:0%
degrade to cold swaps or full builds if
 

00:07:11.639 --> 00:07:13.339 align:start position:0%
degrade to cold swaps or full builds if
you're<00:07:11.789><c> targeting</c><00:07:11.969><c> an</c><00:07:12.300><c> API</c><00:07:12.569><c> level</c><00:07:13.020><c> less</c><00:07:13.169><c> than</c>

00:07:13.339 --> 00:07:13.349 align:start position:0%
you're targeting an API level less than
 

00:07:13.349 --> 00:07:15.920 align:start position:0%
you're targeting an API level less than
21<00:07:13.879><c> remember</c><00:07:14.879><c> that</c><00:07:15.029><c> hot</c><00:07:15.180><c> swapping</c><00:07:15.569><c> doesn't</c>

00:07:15.920 --> 00:07:15.930 align:start position:0%
21 remember that hot swapping doesn't
 

00:07:15.930 --> 00:07:17.719 align:start position:0%
21 remember that hot swapping doesn't
reinitialize<00:07:16.500><c> objects</c><00:07:17.039><c> rerun</c><00:07:17.490><c> class</c>

00:07:17.719 --> 00:07:17.729 align:start position:0%
reinitialize objects rerun class
 

00:07:17.729 --> 00:07:19.670 align:start position:0%
reinitialize objects rerun class
initializes<00:07:18.449><c> or</c><00:07:18.599><c> modify</c><00:07:19.169><c> data</c><00:07:19.439><c> that's</c>

00:07:19.670 --> 00:07:19.680 align:start position:0%
initializes or modify data that's
 

00:07:19.680 --> 00:07:21.170 align:start position:0%
initializes or modify data that's
already<00:07:20.039><c> been</c><00:07:20.250><c> saved</c><00:07:20.580><c> or</c><00:07:20.759><c> transferred</c>

00:07:21.170 --> 00:07:21.180 align:start position:0%
already been saved or transferred
 

00:07:21.180 --> 00:07:23.390 align:start position:0%
already been saved or transferred
anything<00:07:21.990><c> that</c><00:07:22.110><c> has</c><00:07:22.259><c> already</c><00:07:22.680><c> run</c><00:07:22.889><c> and</c><00:07:23.159><c> won't</c>

00:07:23.390 --> 00:07:23.400 align:start position:0%
anything that has already run and won't
 

00:07:23.400 --> 00:07:25.909 align:start position:0%
anything that has already run and won't
be<00:07:23.520><c> rerun</c><00:07:23.879><c> without</c><00:07:24.240><c> the</c><00:07:24.419><c> app</c><00:07:24.509><c> restarting</c><00:07:25.139><c> it's</c>

00:07:25.909 --> 00:07:25.919 align:start position:0%
be rerun without the app restarting it's
 

00:07:25.919 --> 00:07:27.740 align:start position:0%
be rerun without the app restarting it's
not<00:07:26.039><c> always</c><00:07:26.490><c> possible</c><00:07:26.759><c> for</c><00:07:27.150><c> Android</c><00:07:27.539><c> studio</c>

00:07:27.740 --> 00:07:27.750 align:start position:0%
not always possible for Android studio
 

00:07:27.750 --> 00:07:29.809 align:start position:0%
not always possible for Android studio
to<00:07:27.990><c> know</c><00:07:28.229><c> when</c><00:07:28.500><c> that</c><00:07:28.680><c> happens</c><00:07:29.069><c> so</c><00:07:29.310><c> remember</c><00:07:29.729><c> to</c>

00:07:29.809 --> 00:07:29.819 align:start position:0%
to know when that happens so remember to
 

00:07:29.819 --> 00:07:31.610 align:start position:0%
to know when that happens so remember to
restart<00:07:30.180><c> your</c><00:07:30.300><c> activity</c><00:07:30.719><c> or</c><00:07:30.870><c> restart</c><00:07:31.379><c> the</c><00:07:31.500><c> app</c>

00:07:31.610 --> 00:07:31.620 align:start position:0%
restart your activity or restart the app
 

00:07:31.620 --> 00:07:33.589 align:start position:0%
restart your activity or restart the app
when<00:07:31.919><c> you</c><00:07:32.039><c> know</c><00:07:32.250><c> your</c><00:07:32.520><c> changes</c><00:07:32.909><c> will</c><00:07:33.060><c> require</c>

00:07:33.589 --> 00:07:33.599 align:start position:0%
when you know your changes will require
 

00:07:33.599 --> 00:07:36.110 align:start position:0%
when you know your changes will require
it<00:07:33.810><c> if</c><00:07:34.319><c> you're</c><00:07:35.039><c> on</c><00:07:35.069><c> Windows</c><00:07:35.490><c> you</c><00:07:35.729><c> may</c><00:07:35.759><c> find</c>

00:07:36.110 --> 00:07:36.120 align:start position:0%
it if you're on Windows you may find
 

00:07:36.120 --> 00:07:37.459 align:start position:0%
it if you're on Windows you may find
that<00:07:36.210><c> Windows</c><00:07:36.569><c> Defender</c><00:07:36.750><c> real-time</c>

00:07:37.459 --> 00:07:37.469 align:start position:0%
that Windows Defender real-time
 

00:07:37.469 --> 00:07:39.140 align:start position:0%
that Windows Defender real-time
protection<00:07:38.009><c> is</c><00:07:38.159><c> causing</c><00:07:38.639><c> instant</c><00:07:38.969><c> run</c>

00:07:39.140 --> 00:07:39.150 align:start position:0%
protection is causing instant run
 

00:07:39.150 --> 00:07:40.879 align:start position:0%
protection is causing instant run
slowdowns<00:07:39.599><c> you</c><00:07:40.020><c> can</c><00:07:40.139><c> get</c><00:07:40.289><c> around</c><00:07:40.499><c> that</c><00:07:40.740><c> by</c>

00:07:40.879 --> 00:07:40.889 align:start position:0%
slowdowns you can get around that by
 

00:07:40.889 --> 00:07:42.589 align:start position:0%
slowdowns you can get around that by
adding<00:07:41.129><c> your</c><00:07:41.400><c> project</c><00:07:41.789><c> folder</c><00:07:41.939><c> to</c><00:07:42.270><c> the</c><00:07:42.360><c> list</c>

00:07:42.589 --> 00:07:42.599 align:start position:0%
adding your project folder to the list
 

00:07:42.599 --> 00:07:45.409 align:start position:0%
adding your project folder to the list
of<00:07:42.779><c> Windows</c><00:07:43.110><c> Defender</c><00:07:43.259><c> exclusions</c><00:07:44.039><c> as</c><00:07:44.419><c> of</c>

00:07:45.409 --> 00:07:45.419 align:start position:0%
of Windows Defender exclusions as of
 

00:07:45.419 --> 00:07:47.179 align:start position:0%
of Windows Defender exclusions as of
this<00:07:45.569><c> recording</c><00:07:46.080><c> instant</c><00:07:46.560><c> run</c><00:07:46.710><c> doesn't</c>

00:07:47.179 --> 00:07:47.189 align:start position:0%
this recording instant run doesn't
 

00:07:47.189 --> 00:07:49.579 align:start position:0%
this recording instant run doesn't
support<00:07:47.490><c> Jack</c><00:07:47.930><c> instrumentation</c><00:07:48.930><c> tests</c><00:07:49.349><c> or</c>

00:07:49.579 --> 00:07:49.589 align:start position:0%
support Jack instrumentation tests or
 

00:07:49.589 --> 00:07:51.140 align:start position:0%
support Jack instrumentation tests or
deploying<00:07:50.129><c> to</c><00:07:50.279><c> multiple</c><00:07:50.699><c> devices</c>

00:07:51.140 --> 00:07:51.150 align:start position:0%
deploying to multiple devices
 

00:07:51.150 --> 00:07:54.050 align:start position:0%
deploying to multiple devices
simultaneously<00:07:51.680><c> but</c><00:07:52.849><c> interneuron</c><00:07:53.879><c> is</c>

00:07:54.050 --> 00:07:54.060 align:start position:0%
simultaneously but interneuron is
 

00:07:54.060 --> 00:07:55.550 align:start position:0%
simultaneously but interneuron is
constantly<00:07:54.689><c> evolving</c><00:07:55.110><c> with</c><00:07:55.289><c> the</c><00:07:55.319><c> team</c>

00:07:55.550 --> 00:07:55.560 align:start position:0%
constantly evolving with the team
 

00:07:55.560 --> 00:07:57.409 align:start position:0%
constantly evolving with the team
exploring<00:07:56.099><c> new</c><00:07:56.250><c> techniques</c><00:07:56.669><c> to</c><00:07:56.759><c> maximize</c><00:07:57.270><c> the</c>

00:07:57.409 --> 00:07:57.419 align:start position:0%
exploring new techniques to maximize the
 

00:07:57.419 --> 00:07:58.939 align:start position:0%
exploring new techniques to maximize the
number<00:07:57.449><c> of</c><00:07:57.659><c> cases</c><00:07:57.930><c> that</c><00:07:58.169><c> allow</c><00:07:58.529><c> for</c><00:07:58.589><c> a</c><00:07:58.800><c> hot</c>

00:07:58.939 --> 00:07:58.949 align:start position:0%
number of cases that allow for a hot
 

00:07:58.949 --> 00:08:00.709 align:start position:0%
number of cases that allow for a hot
swap<00:07:59.219><c> and</c><00:07:59.399><c> minimizing</c><00:08:00.060><c> the</c><00:08:00.089><c> need</c><00:08:00.300><c> for</c><00:08:00.360><c> called</c>

00:08:00.709 --> 00:08:00.719 align:start position:0%
swap and minimizing the need for called
 

00:08:00.719 --> 00:08:03.170 align:start position:0%
swap and minimizing the need for called
swaps<00:08:01.020><c> or</c><00:08:01.199><c> full</c><00:08:01.560><c> deploy</c><00:08:02.039><c> and</c><00:08:02.339><c> install</c><00:08:02.759><c> cycles</c>

00:08:03.170 --> 00:08:03.180 align:start position:0%
swaps or full deploy and install cycles
 

00:08:03.180 --> 00:08:05.480 align:start position:0%
swaps or full deploy and install cycles
and<00:08:03.389><c> you</c><00:08:03.449><c> can</c><00:08:04.349><c> always</c><00:08:04.649><c> find</c><00:08:04.889><c> the</c><00:08:05.009><c> latest</c><00:08:05.039><c> tips</c>

00:08:05.480 --> 00:08:05.490 align:start position:0%
and you can always find the latest tips
 

00:08:05.490 --> 00:08:07.249 align:start position:0%
and you can always find the latest tips
and<00:08:05.669><c> tricks</c><00:08:05.879><c> on</c><00:08:06.060><c> optimizing</c><00:08:06.479><c> instant</c><00:08:06.930><c> run</c><00:08:07.080><c> on</c>

00:08:07.249 --> 00:08:07.259 align:start position:0%
and tricks on optimizing instant run on
 

00:08:07.259 --> 00:08:10.159 align:start position:0%
and tricks on optimizing instant run on
the<00:08:07.409><c> Android</c><00:08:07.770><c> studio</c><00:08:07.979><c> documentation</c><00:08:09.020><c> you</c><00:08:10.020><c> can</c>

00:08:10.159 --> 00:08:10.169 align:start position:0%
the Android studio documentation you can
 

00:08:10.169 --> 00:08:11.510 align:start position:0%
the Android studio documentation you can
also<00:08:10.289><c> explore</c><00:08:10.680><c> the</c><00:08:10.889><c> cutting</c><00:08:11.159><c> edge</c><00:08:11.279><c> by</c>

00:08:11.510 --> 00:08:11.520 align:start position:0%
also explore the cutting edge by
 

00:08:11.520 --> 00:08:13.129 align:start position:0%
also explore the cutting edge by
subscribing<00:08:12.000><c> to</c><00:08:12.120><c> the</c><00:08:12.300><c> canary</c><00:08:12.659><c> or</c><00:08:12.870><c> beta</c>

00:08:13.129 --> 00:08:13.139 align:start position:0%
subscribing to the canary or beta
 

00:08:13.139 --> 00:08:15.139 align:start position:0%
subscribing to the canary or beta
release<00:08:13.439><c> channels</c><00:08:13.849><c> if</c><00:08:14.849><c> you're</c><00:08:15.000><c> having</c>

00:08:15.139 --> 00:08:15.149 align:start position:0%
release channels if you're having
 

00:08:15.149 --> 00:08:17.149 align:start position:0%
release channels if you're having
trouble<00:08:15.750><c> with</c><00:08:15.779><c> instant</c><00:08:16.229><c> run</c><00:08:16.319><c> or</c><00:08:16.469><c> any</c><00:08:16.680><c> Android</c>

00:08:17.149 --> 00:08:17.159 align:start position:0%
trouble with instant run or any Android
 

00:08:17.159 --> 00:08:18.829 align:start position:0%
trouble with instant run or any Android
studio<00:08:17.279><c> features</c><00:08:17.879><c> let</c><00:08:18.210><c> us</c><00:08:18.300><c> know</c><00:08:18.449><c> on</c><00:08:18.599><c> Twitter</c>

00:08:18.829 --> 00:08:18.839 align:start position:0%
studio features let us know on Twitter
 

00:08:18.839 --> 00:08:21.320 align:start position:0%
studio features let us know on Twitter
or<00:08:19.080><c> Google+</c><00:08:19.469><c> I'm</c><00:08:19.830><c> reto</c><00:08:20.399><c> Meier</c><00:08:20.460><c> and</c><00:08:20.879><c> this</c><00:08:21.180><c> has</c>

00:08:21.320 --> 00:08:21.330 align:start position:0%
or Google+ I'm reto Meier and this has
 

00:08:21.330 --> 00:08:23.240 align:start position:0%
or Google+ I'm reto Meier and this has
been<00:08:21.479><c> an</c><00:08:21.689><c> Android</c><00:08:22.080><c> tool</c><00:08:22.289><c> time</c><00:08:22.529><c> instant</c><00:08:23.099><c> run</c>

00:08:23.240 --> 00:08:23.250 align:start position:0%
been an Android tool time instant run
 

00:08:23.250 --> 00:08:30.740 align:start position:0%
been an Android tool time instant run
deep<00:08:23.550><c> dive</c>

00:08:30.740 --> 00:08:30.750 align:start position:0%
 
 

00:08:30.750 --> 00:08:33.750 align:start position:0%
 
yeah

