WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:06.620
The title of this, ur, video should be, c...can we have this. The title of this video should be "How not to store passwords"

00:00:06.620 --> 00:00:09.800
um...uh, thank you, um

00:00:09.840 --> 00:00:14.440
because, y...you really shouldn't store passwords yourself

00:00:14.440 --> 00:00:16.040
if you can at all avoid it

00:00:16.040 --> 00:00:18.040
if you are running any kind of web service

00:00:18.040 --> 00:00:20.220
and you are storing passwords

00:00:20.240 --> 00:00:24.260
it is so incredibly easy to get it wrong

00:00:24.260 --> 00:00:27.540
ur, that basically you shouldn't try

00:00:27.540 --> 00:00:31.160
if you can use sign-in with facebook or twitter or google

00:00:31.160 --> 00:00:33.740
and get them to handle it for you

00:00:33.740 --> 00:00:35.740
for crying out loud please do

00:00:37.900 --> 00:00:39.760
if you're web programmer

00:00:39.760 --> 00:00:42.620
sooner or later, you're gonna have to store passwords

00:00:42.620 --> 00:00:46.840
and this is the ways not to do it

00:00:46.840 --> 00:00:50.060
if you wanna know the ways to do it i will kinda say that at the end

00:00:50.060 --> 00:00:55.760
but please please please look up a recent tutorial for the language you're using.

00:00:55.760 --> 00:00:58.000
um, by the time you watch this video,

00:00:58.120 --> 00:00:59.480
the advice will have changed

00:00:59.480 --> 00:01:01.480
you may be watching this years in the future

00:01:01.860 --> 00:01:07.420
look up a tutorial that has been written the last few months by someone reputable and follow that.

00:01:08.040 --> 00:01:09.600
how do you not store passwords.

00:01:09.600 --> 00:01:12.400
the first instinct, the naive thing :

00:01:13.740 --> 00:01:15.740
is just store the users passwords

00:01:15.740 --> 00:01:21.700
so let's say you have a signup box, and you have a username and password box

00:01:21.720 --> 00:01:24.100
the naive thing is when a user signs up,

00:01:24.140 --> 00:01:29.340
you take their password and store it in the database as it is in plain text.

00:01:29.360 --> 00:01:30.840
that has a couple of advantages:

00:01:30.840 --> 00:01:34.920
first of all if they forget their password, you could just email it to them.

00:01:35.340 --> 00:01:38.100
and it means that checking it is really simple:

00:01:38.100 --> 00:01:41.460
when they log in again, you take the username, you take that password,

00:01:41.460 --> 00:01:43.460
and then you check what they just typed

00:01:43.460 --> 00:01:45.460
you compare it to what it's in the database

00:01:45.460 --> 00:01:47.460
and if it matches, you let them in

00:01:47.880 --> 00:01:51.560
and that is the naive approach to storing passwords

00:01:51.560 --> 00:01:57.540
and there are still professional websites, out there, run by big corporations

00:01:57.540 --> 00:01:59.540
that still use this strategy

00:01:59.540 --> 00:02:01.540
and you can tell that they're using this strategy

00:02:01.540 --> 00:02:06.480
because they email your password back to you in plain text when you ask for it

00:02:06.840 --> 00:02:10.520
um, this is a monumentally bad idea

00:02:10.520 --> 00:02:16.780
this is an astonishingly bad idea because if someone gets into your database

00:02:16.780 --> 00:02:20.440
through a security hole, or because they're an insider with access

00:02:20.440 --> 00:02:22.440
and let's be honest if you're storing passwords this way

00:02:22.440 --> 00:02:25.060
you probably have other security holes too

00:02:25.060 --> 00:02:30.280
then, they can just read out every user, and their passwords

00:02:30.280 --> 00:02:32.500
so you have their email address, and you have their passwords

00:02:32.500 --> 00:02:38.580
and let's be honest, most people reuse the same password for their email address on websites

00:02:38.800 --> 00:02:42.280
so this is a bad idea, because it's incredibly insecure

00:02:42.280 --> 00:02:44.280
approach number 2

00:02:45.800 --> 00:02:48.420
slightly less naive, still a bad idea

00:02:48.420 --> 00:02:50.220
is you take that password,

00:02:50.260 --> 00:02:52.400
and you encrypt it,

00:02:52.400 --> 00:02:56.020
so you hide it behind something

00:02:56.120 --> 00:02:58.120
and encryption is two way

00:02:58.120 --> 00:03:00.120
so encryption is so you have a key

00:03:00.120 --> 00:03:02.760
that will lock something, and then unlock it again

00:03:02.760 --> 00:03:06.500
so the naive approach is you take the user's password

00:03:06.860 --> 00:03:11.760
you take it into your database, encrypt it like this behind the other thing you've locked

00:03:11.760 --> 00:03:15.360
and then, when they log in again

00:03:15.360 --> 00:03:20.080
you take what they've got, you go here, you unlock this

00:03:20.080 --> 00:03:22.080
you compare them, and then you let them in!

00:03:22.680 --> 00:03:24.680
now that's a little bit more secure,

00:03:24.680 --> 00:03:28.440
because if someone just reads out the database you've got an encryption key there

00:03:28.440 --> 00:03:30.440
but it's got a couple of big flaws

00:03:30.860 --> 00:03:33.900
first of all, as soon as that key is available

00:03:34.060 --> 00:03:37.340
the password is still visible and can still be read out

00:03:37.340 --> 00:03:41.060
and it means that an insider, or even a hacker in some cases

00:03:41.060 --> 00:03:43.660
can just take the encryption key as well with them

00:03:43.660 --> 00:03:45.660
and they've still got access to all the passwords

00:03:46.060 --> 00:03:48.300
that's a pretty bad idea

00:03:48.880 --> 00:03:53.740
the other flaw with this is that if you have lots of people using the same password

00:03:53.740 --> 00:03:55.740
and if you've got a big site this will happen

00:03:55.740 --> 00:03:59.860
because lots of people will use 123456 or password1

00:03:59.860 --> 00:04:03.380
and if I've just said either of your youtube passwords, go change it

00:04:03.380 --> 00:04:07.840
if you have that all the encryption will be the same

00:04:07.840 --> 00:04:10.700
so, even if you don't have the encryption key,

00:04:11.040 --> 00:04:15.480
you can still tell that all these people have the same password, so it's probably a common one

00:04:15.480 --> 00:04:19.420
Adobe just made this mistake this month, as we record this

00:04:19.420 --> 00:04:21.420
Adobe, the big company

00:04:21.420 --> 00:04:24.140
behind Acrobat, which makes PDFs

00:04:24.140 --> 00:04:27.540
behind Photoshop, behind all the big tools

00:04:27.540 --> 00:04:29.540
millions and millions and millions of users

00:04:30.180 --> 00:04:32.180
their password database got breached

00:04:32.180 --> 00:04:35.540
gigabytes of passwords lost

00:04:35.680 --> 00:04:37.380
but it's fine..

00:04:37.440 --> 00:04:39.040
yours ? yes mine were as well

00:04:39.040 --> 00:04:43.740
fortunately i didn't use that password anywhere else, which is what you should hopefully be doing

00:04:43.740 --> 00:04:46.180
their passwords were encrypted

00:04:46.320 --> 00:04:50.060
and, that was it, it was just a lock on it

00:04:50.060 --> 00:04:52.380
and it meant that everyone who had the same password

00:04:52.500 --> 00:04:54.940
had the same encrypted code

00:04:54.940 --> 00:04:58.500
unfortunately they'd also stored all the password hints with them

00:04:58.500 --> 00:05:00.500
which is wonderful

00:05:00.500 --> 00:05:05.520
because then you can look, oh look, there's 20 people who've used the same password here

00:05:05.520 --> 00:05:08.560
and that one says Michael Jackson is the password hint

00:05:08.560 --> 00:05:11.300
and that one says Halloween

00:05:11.300 --> 00:05:14.000
and that one says "type of movie" oh look it's "thriller'

00:05:14.000 --> 00:05:16.000
OK, wonderful it's "thriller'

00:05:17.340 --> 00:05:22.500
and that's  one of the biggest software companies in the world didn't do this properly

00:05:24.400 --> 00:05:26.400
anyway, so , don't use encryption

00:05:26.400 --> 00:05:28.400
naive attempt number 3:

00:05:29.440 --> 00:05:30.040
hashing

00:05:30.280 --> 00:05:32.280
now i talked about this in an earlier video

00:05:32.280 --> 00:05:36.200
a hash is a summary of a load of data

00:05:36.200 --> 00:05:39.140
so let's say you have the password the user enters

00:05:39.520 --> 00:05:42.980
and you know that, when they enter it, you're gonna hash it.

00:05:42.980 --> 00:05:44.980
you're gonna put it through some kind of convolutions

00:05:44.980 --> 00:05:47.120
that ends up like that

00:05:47.120 --> 00:05:50.140
and then, when the users enters their password again

00:05:50.920 --> 00:05:53.740
mutate in the same way, compare, they're the same

00:05:53.740 --> 00:05:55.740
which is great in theory,

00:05:55.740 --> 00:05:59.120
but unfortunately you open the same problem that Adobe had

00:05:59.240 --> 00:06:04.720
which is that if you can tell a common password, if it's in loads of people's database entries

00:06:04.860 --> 00:06:06.860
you probably can work out what it is

00:06:06.980 --> 00:06:08.900
worse than that, as i've said before

00:06:08.900 --> 00:06:10.780
Google has an index of these things

00:06:10.780 --> 00:06:13.120
if you're using a basic hashing algorithm

00:06:13.120 --> 00:06:18.120
you can pretty much just type the code into Google and it will give you the password back

00:06:18.240 --> 00:06:21.280
as well as just  searching for common hashes on Google

00:06:21.280 --> 00:06:23.280
there are these things called "rainbow tables"

00:06:23.280 --> 00:06:27.640
which trade off computation time for hard drive space

00:06:27.640 --> 00:06:31.480
so rather than having to calculate millions and milions of hashes,

00:06:31.480 --> 00:06:34.780
for this one password, someone has already done it for you

00:06:35.140 --> 00:06:39.960
calculated hashes for billions of common passwords

00:06:40.220 --> 00:06:42.220
and just put them out in a database

00:06:42.220 --> 00:06:45.600
it's gigabytes long, but it's a lot easier to search through that

00:06:45.600 --> 00:06:47.600
than it is to try and do a load of calculations

00:06:47.600 --> 00:06:52.820
so if you're using something common like MD5 or SHA1 with nothing else added

00:06:53.340 --> 00:06:58.400
the rainbow table will pretty much help you crack that in a few seconds

00:06:58.920 --> 00:07:04.440
i have in the past used all those naive approaches myself on things i built in my youth

00:07:04.440 --> 00:07:06.460
i've gone back and fixed them where they're still alive

00:07:06.460 --> 00:07:10.380
and just sort of quietly buried code where they weren't

00:07:11.420 --> 00:07:15.920
but the approach nowadays is to use something called hashing and salting

00:07:15.920 --> 00:07:19.380
as i said the best thing is not to store passwords at all but if you have to

00:07:19.380 --> 00:07:22.900
the advice these days is hash; salt

00:07:23.020 --> 00:07:26.780
so a salt is a random string of characters

00:07:27.000 --> 00:07:29.640
that is different for every single user

00:07:29.660 --> 00:07:34.640
it's a password you know, in your database, you can store it in plain text, it doesn't matter

00:07:34.640 --> 00:07:37.660
the user could even know it, not it would help them with anything

00:07:37.660 --> 00:07:39.520
that means

00:07:39.520 --> 00:07:42.360
when the user registers, they put their password in

00:07:42.360 --> 00:07:45.520
and it goes into the same algorithm but as well as that

00:07:45.540 --> 00:07:48.060
you generate a random string of characters for each user

00:07:48.220 --> 00:07:51.400
completely random, a new second password if you like

00:07:51.400 --> 00:07:52.920
that goes in the database

00:07:53.080 --> 00:07:55.800
and that gets fed into this algorithm too

00:07:56.180 --> 00:08:00.500
so that comes in, mutates it a bit more, comes out with something else

00:08:00.500 --> 00:08:03.520
so if another user uses the same password

00:08:03.680 --> 00:08:05.960
that algorithm will get a completely different salt

00:08:05.960 --> 00:08:07.180
from them

00:08:07.180 --> 00:08:10.600
some people might base it on the username that's generally a bad thing to do

00:08:10.600 --> 00:08:12.680
it should just be a random string of characters

00:08:12.680 --> 00:08:18.320
so the same password going in from a different user will mutate into something entirely different

00:08:19.140 --> 00:08:20.260
the point of this

00:08:21.020 --> 00:08:24.460
is that now you just have a random string for each user

00:08:24.460 --> 00:08:27.680
you cannot possibly pull the password back from this

00:08:27.700 --> 00:08:29.300
it wont appear in Google

00:08:29.660 --> 00:08:32.540
because it's a massively long random string

00:08:32.940 --> 00:08:34.860
you can't brute force it back

00:08:34.980 --> 00:08:38.100
by looking at what common passwords are reused

00:08:38.220 --> 00:08:39.440
all you can do

00:08:39.440 --> 00:08:41.420
is do the old style attack

00:08:42.080 --> 00:08:46.000
of trying every single common password one after the other

00:08:46.000 --> 00:08:47.520
and if your salt is long enough

00:08:47.520 --> 00:08:49.760
and your hashing algorithm is complicated enough

00:08:49.760 --> 00:08:52.660
then that's really incredibly difficult to do

00:08:52.680 --> 00:08:56.760
do it right, and it's lifetime of the universe difficult to do

00:08:56.760 --> 00:09:02.120
or at least it is, until they use the password 123456

