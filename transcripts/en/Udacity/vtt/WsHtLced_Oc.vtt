WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.270
So Richard just showed you
some of the flaws with HTTP/1,

00:00:03.270 --> 00:00:05.570
and said that HTTP/2
would solve them.

00:00:05.570 --> 00:00:06.930
But how does it do it?

00:00:06.929 --> 00:00:08.629
Well, take out your
note-taking pencil,

00:00:08.630 --> 00:00:12.320
because I'm about to show
you the wonders of HTTP/2.

00:00:12.320 --> 00:00:15.230
Remember the human readability
of requests and response

00:00:15.230 --> 00:00:16.070
headers?

00:00:16.070 --> 00:00:17.179
Well, that's got to go.

00:00:17.179 --> 00:00:20.629
It's the first step to improve
performance with HTTP/2.

00:00:20.629 --> 00:00:23.089
It was nice while it
lasted, but nobody is really

00:00:23.089 --> 00:00:26.899
benefiting from the plain text
approach that HTTP/1 took.

00:00:26.899 --> 00:00:29.509
We are wasting precious
bytes by spelling things out

00:00:29.510 --> 00:00:32.658
in text form when a
single bit is sufficient.

00:00:32.658 --> 00:00:33.649
Don't worry, though.

00:00:33.649 --> 00:00:36.049
Tools like Wireshark
or DevTools will still

00:00:36.049 --> 00:00:39.409
let you see headers,
even with HTTP/2.

00:00:39.409 --> 00:00:41.750
The second big
problem HTTP/2 solves

00:00:41.750 --> 00:00:43.429
is head-of-line blocking.

00:00:43.429 --> 00:00:46.429
It does this through a
technique called multiplexing.

00:00:46.429 --> 00:00:48.500
Multiplexing is a
fancy sounding term

00:00:48.500 --> 00:00:50.509
that means combining
multiple signals

00:00:50.509 --> 00:00:52.820
into a new single signal.

00:00:52.820 --> 00:00:57.170
With HTTP/2, we now have one
connection instead of six.

00:00:57.170 --> 00:00:59.670
That seems like a terrible
step backwards at first,

00:00:59.670 --> 00:01:02.060
but we are using the single
connection differently

00:01:02.060 --> 00:01:03.980
than HTTP/1 would have.

00:01:03.979 --> 00:01:06.829
What used to be a dedicated
connection in HTTP/1

00:01:06.829 --> 00:01:09.530
is now called a
stream, and all streams

00:01:09.530 --> 00:01:11.540
share that single connection.

00:01:11.540 --> 00:01:13.490
These streams are
split up into frames

00:01:13.489 --> 00:01:16.789
and are being multiplexed
onto that single connection.

00:01:16.790 --> 00:01:19.100
When one stream is
blocked, another stream

00:01:19.099 --> 00:01:21.890
can take over the connection
and make good use of what

00:01:21.890 --> 00:01:23.500
would have been idle time.

00:01:23.500 --> 00:01:25.400
Head-of-line blocking, be gone.

00:01:25.400 --> 00:01:29.790
Lastly, HTTP/2 takes care of
header data being uncompressed.

00:01:29.790 --> 00:01:31.850
With HTTP/2,
headers are not just

00:01:31.849 --> 00:01:34.399
being compressed with
[? key.zip, ?] the engineers

00:01:34.400 --> 00:01:36.830
came up with an HTTP/2
compression that

00:01:36.829 --> 00:01:39.769
is tailored towards the
specific structure of headers

00:01:39.769 --> 00:01:42.560
and the multiplexing
feature of HTTP/2.

00:01:42.560 --> 00:01:45.710
All streams not only share
the connection, but also

00:01:45.709 --> 00:01:46.909
the compressor.

00:01:46.909 --> 00:01:49.759
This means a header never
has to be sent twice,

00:01:49.760 --> 00:01:52.730
since the compressor recognizes
that it's been sent before,

00:01:52.730 --> 00:01:55.130
and sends a reference instead.

00:01:55.129 --> 00:01:57.799
For example, cookies
are really long headers.

00:01:57.799 --> 00:02:00.079
So it is an enormous
advantage to say,

00:02:00.079 --> 00:02:02.689
insert the same cookie
header as three requests ago

00:02:02.689 --> 00:02:05.239
here, instead of
the actual value.

00:02:05.239 --> 00:02:08.388
I won't go into the intricacies
of this compression algorithm.

00:02:08.389 --> 00:02:10.860
But if you're interested
in how it works,

00:02:10.860 --> 00:02:14.260
there is some additional
reading in the instructor notes.

