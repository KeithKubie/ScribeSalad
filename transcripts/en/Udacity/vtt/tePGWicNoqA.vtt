WEBVTT
Kind: captions
Language: en

00:00:00.100 --> 00:00:03.530
To examine a more realistic problem, let's revisit the problem that we

00:00:03.530 --> 00:00:08.109
had in our last lesson. Once again, this is a map of a part of Long Island, and

00:00:08.109 --> 00:00:13.860
the problem is to go from Q to the end location here. So I'll call it Q problem.

00:00:13.860 --> 00:00:17.110
We'll retrieve from memory the D case, which takes us from this initial

00:00:17.110 --> 00:00:22.190
location to this collocation. Clearly, this D case is potentially useful for

00:00:22.190 --> 00:00:27.470
addressing the Q problem. But it is not useful as is. The initial location of

00:00:27.470 --> 00:00:31.520
the D case is not the same as the initial location of the Q problem. And the end

00:00:31.520 --> 00:00:35.930
location of the D case is not the same as the end location of the Q problem.

00:00:35.930 --> 00:00:40.520
So we can start with this D case but we need to adapt it. So,

00:00:40.520 --> 00:00:45.450
this leads us to the overall process of case-based reasoning. The basic process

00:00:45.450 --> 00:00:49.900
of case-based reasoning consists of four steps. The first step is retrieval, and

00:00:49.900 --> 00:00:53.210
we already and considered this when we were considering learning by recording

00:00:53.210 --> 00:00:58.850
cases. K nearest neighbor is one way of retrieving cases from memory. Once

00:00:58.850 --> 00:01:03.170
we have retrieved a case from memory that is delivered to the current problem,

00:01:03.170 --> 00:01:08.370
we need to adapt it. For example, in the previous problem we had the D case and

00:01:08.370 --> 00:01:11.600
the Q problem. And we needed to adapt the D case into the Q problem.

00:01:11.600 --> 00:01:15.900
There are many similar examples. All of us program and

00:01:15.900 --> 00:01:20.210
all of us, as computer programmers, sometimes use case-based reasoning.

00:01:20.210 --> 00:01:23.970
We are given a new problem to address, and we often look at the design of

00:01:23.970 --> 00:01:27.476
a program that we have come across earlier. So there's retrieving a case and

00:01:27.476 --> 00:01:31.080
they're adapting a particular design of the old program to solve the new

00:01:31.080 --> 00:01:34.800
problem. Once we have adapted the case to meet the requirements of

00:01:34.800 --> 00:01:39.170
the new problem, we have a candidate solution for the new problem. With it,

00:01:39.170 --> 00:01:44.262
the candidate solution is to be evaluated. For example, in the navigation

00:01:44.262 --> 00:01:48.715
problem, when we have a solution of the Q problem, we can evaluate it but

00:01:48.715 --> 00:01:53.100
they would actually take us to the end location. We can do a simulation, we

00:01:53.100 --> 00:01:57.200
can walk through it. As we walk thought it, we will be able to evaluate whether

00:01:57.200 --> 00:02:00.740
the solution actually succeeds in meeting the requirements of the problem. For

00:02:00.740 --> 00:02:05.010
the programming problem, once we have a new program that we obtain by

00:02:05.010 --> 00:02:10.220
adapting the old program, we can actually run the program to see, whether or

00:02:10.220 --> 00:02:13.890
not it will meet the requirements of the new problem. Let us suppose for

00:02:13.890 --> 00:02:17.830
a moment that we evaluate a candidate solution and it succeeds. Then,

00:02:17.830 --> 00:02:22.300
we could encapsulate the new problem and the new solution into a case, and store

00:02:22.300 --> 00:02:26.280
it back into the case memory, so that case memory is constantly increasing.

00:02:26.280 --> 00:02:31.110
Notice that this case-based reasoning process unifies memory, reasoning, and

00:02:31.110 --> 00:02:35.810
learning. There is a case memory that contains a large number of cases and

00:02:35.810 --> 00:02:39.150
that's how we retrieve cases that are relevant to the current problem.

00:02:39.150 --> 00:02:40.650
We'll reason when we adapt and

00:02:40.650 --> 00:02:45.090
evaluate. And we learn when we store the new case back into the case memory.

