WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.269
[MUSIC PLAYING]

00:00:05.850 --> 00:00:07.100
WAYNE PIEKARSKI: Hi, everyone.

00:00:07.100 --> 00:00:08.470
Good morning.

00:00:08.470 --> 00:00:09.402
How's everyone doing?

00:00:09.402 --> 00:00:11.110
I hope you enjoyed
your developer keynote

00:00:11.110 --> 00:00:12.522
and early keynote this morning.

00:00:12.522 --> 00:00:14.230
It's really exciting
to see you all here.

00:00:14.230 --> 00:00:17.470
So my name's Wayne Piekarski,
and I'm a developer

00:00:17.470 --> 00:00:19.057
advocate here at Google.

00:00:19.057 --> 00:00:20.890
And today, I'm really
excited to talk to you

00:00:20.890 --> 00:00:23.320
about all the cool new
things we've been doing

00:00:23.320 --> 00:00:25.090
on the Internet of Things.

00:00:25.090 --> 00:00:28.720
And this enables what we refer
to as ubiquitous computing.

00:00:28.720 --> 00:00:31.810
So there's been a lot of new and
interesting products and tools

00:00:31.810 --> 00:00:34.690
of interest to developers
that going to be highlighting

00:00:34.690 --> 00:00:35.602
in this talk.

00:00:35.602 --> 00:00:37.810
And some of them are being
released at I/O right now.

00:00:37.810 --> 00:00:39.893
So there's been a whole
bunch of new announcements

00:00:39.893 --> 00:00:40.780
during the keynotes.

00:00:40.780 --> 00:00:42.540
Yesterday we had
Cloud IoT launching,

00:00:42.540 --> 00:00:44.314
so there's all
kinds of new things.

00:00:44.314 --> 00:00:46.480
So we're going to do sort
of a whirlwind tour of all

00:00:46.480 --> 00:00:49.150
of Google's products that are
related to this so that you

00:00:49.150 --> 00:00:52.660
can find out more of what
you can do for yourself.

00:00:52.660 --> 00:00:55.240
So importantly,
here at I/O, we have

00:00:55.240 --> 00:00:57.730
a whole bunch of really
interesting engineers

00:00:57.730 --> 00:01:00.206
and PMs and leaders from
all the different teams

00:01:00.206 --> 00:01:02.830
that work on these products that
I'm going to be talking about.

00:01:02.830 --> 00:01:04.930
So make sure you take
advantage of that,

00:01:04.930 --> 00:01:07.850
and go and see them in the
sandboxes and so forth.

00:01:07.850 --> 00:01:11.170
So let's get started
with our little tour.

00:01:11.170 --> 00:01:13.840
So as we know, computing
has evolved over the years.

00:01:13.840 --> 00:01:16.300
So we started from
mainframes, and then we

00:01:16.300 --> 00:01:19.270
moved to desktops and
laptops, and then phones.

00:01:19.270 --> 00:01:21.820
And so every decade or
so, we shrink electronics.

00:01:21.820 --> 00:01:23.627
And now we're at wearables.

00:01:23.627 --> 00:01:25.960
The problem is is that if we
get any smaller than what's

00:01:25.960 --> 00:01:28.607
on a wearable, we run into the
problem of that humans can't

00:01:28.607 --> 00:01:30.190
interact with them
anymore, because we

00:01:30.190 --> 00:01:31.600
can't make something
that's smaller than this

00:01:31.600 --> 00:01:33.310
because our fingers
can't touch it.

00:01:33.310 --> 00:01:35.230
So there's kind of a
limit to what we can

00:01:35.230 --> 00:01:37.960
do with shrinking electronics.

00:01:37.960 --> 00:01:40.990
And what's happening now
is that computers are being

00:01:40.990 --> 00:01:43.210
embedded into everyday devices.

00:01:43.210 --> 00:01:44.980
We use different
devices depending

00:01:44.980 --> 00:01:46.490
on what we're trying to do.

00:01:46.490 --> 00:01:48.910
So we use a laptop to
write documents or emails,

00:01:48.910 --> 00:01:51.580
a TV for videos, or phone
for things when we're away

00:01:51.580 --> 00:01:54.160
from home, and a wearable
when we're running,

00:01:54.160 --> 00:01:55.750
and something when
we're driving.

00:01:55.750 --> 00:01:58.180
So there's all these different
competing experiences

00:01:58.180 --> 00:02:01.210
that are suitable for what
you're doing at the time.

00:02:01.210 --> 00:02:03.010
And now we're at
a point where we

00:02:03.010 --> 00:02:06.610
have thermostats and light
bulbs and basic electronics that

00:02:06.610 --> 00:02:08.289
are being internet enabled.

00:02:08.289 --> 00:02:10.190
But we can do a
lot more than that,

00:02:10.190 --> 00:02:12.880
and we're moving to a
world where computing

00:02:12.880 --> 00:02:16.210
is going to be everywhere,
assisting users with their day

00:02:16.210 --> 00:02:19.000
and solving problems that we
didn't even realize existed.

00:02:19.000 --> 00:02:20.500
And we're going to
look back on this

00:02:20.500 --> 00:02:23.480
and go, wow, this really
changed everything.

00:02:23.480 --> 00:02:28.330
So while phones were bigger
than PCs, Internet of Things

00:02:28.330 --> 00:02:30.297
is going to be even
bigger than phones,

00:02:30.297 --> 00:02:31.630
and it's going to be incredible.

00:02:31.630 --> 00:02:35.200
So we use the term "ubiquitous
computing" to describe this.

00:02:35.200 --> 00:02:37.870
It's technology that's
accessible to the user

00:02:37.870 --> 00:02:39.810
wherever they are
and whenever they are

00:02:39.810 --> 00:02:41.480
in what they're trying to do.

00:02:41.480 --> 00:02:44.110
And so today we're going to
talk about what platforms Google

00:02:44.110 --> 00:02:46.660
provides and what
developer tools Google

00:02:46.660 --> 00:02:51.010
provides to help support this.

00:02:51.010 --> 00:02:54.640
So in the past, we trained
users to install apps

00:02:54.640 --> 00:02:56.590
onto their phones
that had icons.

00:02:56.590 --> 00:02:58.960
So you would click
an icon for each app.

00:02:58.960 --> 00:03:01.232
And now we have devices that
don't even have screens,

00:03:01.232 --> 00:03:03.190
so we need to think
differently about computing

00:03:03.190 --> 00:03:04.360
and what it means.

00:03:04.360 --> 00:03:07.240
We need to take the user's
context into consideration.

00:03:07.240 --> 00:03:08.740
So what time is it?

00:03:08.740 --> 00:03:10.210
What's the user's location?

00:03:10.210 --> 00:03:11.260
What are they doing?

00:03:11.260 --> 00:03:13.510
And we need to make good
decisions for our products

00:03:13.510 --> 00:03:16.830
based on those kind of things.

00:03:16.830 --> 00:03:19.750
And you need to think of
your platform as a view

00:03:19.750 --> 00:03:20.830
into your service now.

00:03:20.830 --> 00:03:23.920
So it's no longer just a
single app or a single website.

00:03:23.920 --> 00:03:25.660
Your service needs
to be ubiquitous,

00:03:25.660 --> 00:03:27.100
it needs to be
everywhere, and it

00:03:27.100 --> 00:03:29.060
needs to work on all platforms.

00:03:29.060 --> 00:03:31.270
So we want a single,
seamless experience

00:03:31.270 --> 00:03:33.490
to keep our users happy.

00:03:33.490 --> 00:03:35.890
So with that in
mind, a little intro,

00:03:35.890 --> 00:03:38.230
let's get started
talking about what

00:03:38.230 --> 00:03:42.940
consumer products are provided
that consumers have right now.

00:03:42.940 --> 00:03:46.590
And we'll start
talking with Android.

00:03:46.590 --> 00:03:50.320
So with Android, as you
saw the keynote today,

00:03:50.320 --> 00:03:52.480
they announced there's
like, 2 billion devices out

00:03:52.480 --> 00:03:53.771
there that are running Android.

00:03:53.771 --> 00:03:54.730
So that's incredible.

00:03:54.730 --> 00:03:56.890
And we have Android
phones, we've got tablets,

00:03:56.890 --> 00:03:59.080
we've got wearables,
we've got TV.

00:03:59.080 --> 00:04:02.090
And they all involve
the same infrastructure,

00:04:02.090 --> 00:04:04.150
so they will work
on Google Play.

00:04:04.150 --> 00:04:06.790
You build your apps
using Android Studio,

00:04:06.790 --> 00:04:08.610
and the apps run on the device.

00:04:08.610 --> 00:04:11.530
So we do things like that
right now, but many of you

00:04:11.530 --> 00:04:13.660
may have only written
a phone up before.

00:04:13.660 --> 00:04:15.550
So one thing you
might want to consider

00:04:15.550 --> 00:04:19.510
is also extending your app
to run on Wear or Android TV.

00:04:19.510 --> 00:04:21.250
So last year, I gave
a talk at Google I/O

00:04:21.250 --> 00:04:24.190
that talked about how easy it is
to put your apps to Android TV.

00:04:24.190 --> 00:04:26.440
There's a few tweaks in your
manifest you got to make,

00:04:26.440 --> 00:04:28.270
you change the UI a
little bit, and then

00:04:28.270 --> 00:04:30.770
it runs on those
devices as well.

00:04:30.770 --> 00:04:32.650
And so these are
new opportunities

00:04:32.650 --> 00:04:35.526
to have different kinds of users
looking at your application,

00:04:35.526 --> 00:04:37.900
because there are times when
looking at something on a TV

00:04:37.900 --> 00:04:40.210
is better, and sometimes
when a wearable is better,

00:04:40.210 --> 00:04:42.459
and you really need to take
advantage of those things.

00:04:46.030 --> 00:04:48.490
Android in general does all
kinds of interesting things.

00:04:48.490 --> 00:04:51.160
They do apps, games, they
can do sensor processing,

00:04:51.160 --> 00:04:52.540
3D graphics, audio.

00:04:52.540 --> 00:04:55.480
So there's lots of all kinds of
really interesting capabilities

00:04:55.480 --> 00:04:58.330
that we're going to get
to talking about later on

00:04:58.330 --> 00:05:00.580
I'm just going to highlight
Android Auto as well.

00:05:00.580 --> 00:05:02.500
Android Auto is a
little bit different

00:05:02.500 --> 00:05:05.470
in that it's a templated
user interface in that you

00:05:05.470 --> 00:05:08.320
can build messaging
and media apps as well.

00:05:08.320 --> 00:05:11.380
So if you're a company that
makes media or messaging apps,

00:05:11.380 --> 00:05:14.410
you simply add some extensions
to your Android app,

00:05:14.410 --> 00:05:17.350
and then it will work when
the user plugs in their phone

00:05:17.350 --> 00:05:19.830
into a vehicle, or
when they install it

00:05:19.830 --> 00:05:23.560
into one of those cars that you
can see out in the demo area.

00:05:23.560 --> 00:05:27.640
So we have this big
ecosystem of Android devices

00:05:27.640 --> 00:05:29.380
that solve different needs.

00:05:29.380 --> 00:05:32.357
Now, there's no one device
that's perfect for everything.

00:05:32.357 --> 00:05:33.940
Some are better than
others, depending

00:05:33.940 --> 00:05:35.800
on the context that
the user is in,

00:05:35.800 --> 00:05:39.880
but they all solve different
problems depending on the time

00:05:39.880 --> 00:05:41.920
where the user is,
whether at their home

00:05:41.920 --> 00:05:44.170
or in their living room.

00:05:44.170 --> 00:05:45.430
So that's Android.

00:05:45.430 --> 00:05:48.130
Now, you may have also heard
at the keynote about Google

00:05:48.130 --> 00:05:50.160
Home and the Google Assistant.

00:05:50.160 --> 00:05:52.030
And so these are also
platforms that we're

00:05:52.030 --> 00:05:53.920
going to cover today
and explain how

00:05:53.920 --> 00:05:58.600
that fits into our vision
of ubiquitous computing.

00:05:58.600 --> 00:06:02.384
We announced today that the
Assistant is now available.

00:06:02.384 --> 00:06:04.300
It was available on
Google Home, but now we're

00:06:04.300 --> 00:06:05.950
also announcing that
it's going to be

00:06:05.950 --> 00:06:09.220
available on a lot of
Android phones out there.

00:06:09.220 --> 00:06:13.150
And also it's coming soon
on Wear, TV, and Auto.

00:06:13.150 --> 00:06:15.700
So we're bringing
the Assistant to all

00:06:15.700 --> 00:06:18.310
of these different
platforms, and the Assistant

00:06:18.310 --> 00:06:20.890
allows the user to have
a conversation with it

00:06:20.890 --> 00:06:22.700
to get things done.

00:06:22.700 --> 00:06:24.520
And so the basic
Google Assistant

00:06:24.520 --> 00:06:26.560
is you talking to
Google, but there's

00:06:26.560 --> 00:06:28.780
a third party library
that allows you to build

00:06:28.780 --> 00:06:29.980
your own extensions as well.

00:06:29.980 --> 00:06:32.050
And we'll get to
talking about that soon.

00:06:32.050 --> 00:06:33.970
The Google Assistant
is interesting

00:06:33.970 --> 00:06:37.960
because it supports both text
and voice-based audio inputs

00:06:37.960 --> 00:06:38.890
and outputs.

00:06:38.890 --> 00:06:40.955
And once again, that
depends on the context

00:06:40.955 --> 00:06:42.490
of what the user is doing.

00:06:42.490 --> 00:06:45.190
If they're in a movie theater,
they can type on their phone.

00:06:45.190 --> 00:06:46.734
If they're driving,
they can speak.

00:06:46.734 --> 00:06:49.150
If they're standing in the
kitchen with their hands dirty,

00:06:49.150 --> 00:06:50.510
they can speak as well.

00:06:50.510 --> 00:06:53.680
So you use a different
input and output modality

00:06:53.680 --> 00:06:57.160
depending on what
the user is doing.

00:06:57.160 --> 00:06:58.930
As we can see,
context is important,

00:06:58.930 --> 00:07:02.620
and that's going to help us
with all these platforms.

00:07:02.620 --> 00:07:05.560
So these were the
consumer platforms.

00:07:05.560 --> 00:07:08.050
Now we're going to talk about
the possibilities for you

00:07:08.050 --> 00:07:10.900
as a developer, and how
you can extend them.

00:07:10.900 --> 00:07:13.190
Consumers have these
devices already.

00:07:13.190 --> 00:07:16.360
There's billions of phones
and TVs and wearables

00:07:16.360 --> 00:07:17.324
and so forth out there.

00:07:17.324 --> 00:07:19.240
You want to be able to
take advantage of them,

00:07:19.240 --> 00:07:20.477
and how can you do that?

00:07:20.477 --> 00:07:22.060
Because there's a
bunch of new options

00:07:22.060 --> 00:07:25.190
that you're going to
find very interesting.

00:07:25.190 --> 00:07:27.460
So the first thing
that's really cool

00:07:27.460 --> 00:07:30.220
is that we announce
recently the developer

00:07:30.220 --> 00:07:32.320
preview for Android Things.

00:07:32.320 --> 00:07:35.470
And so Android Things
is Google's new platform

00:07:35.470 --> 00:07:38.050
to support the development
of IoT devices,

00:07:38.050 --> 00:07:39.910
and it's based on Android.

00:07:39.910 --> 00:07:41.890
And one of the really
interesting things

00:07:41.890 --> 00:07:43.900
about Android Things
is the use of what

00:07:43.900 --> 00:07:47.590
we call a SOM, which you can
see on the slides over there.

00:07:47.590 --> 00:07:50.380
Now, a SOM is a
little tiny board

00:07:50.380 --> 00:07:53.350
that's got a CPU,
memory, wireless,

00:07:53.350 --> 00:07:55.090
and all of the important
things that make

00:07:55.090 --> 00:07:56.740
the device do what it does.

00:07:56.740 --> 00:07:59.110
And they're all on a
single common board

00:07:59.110 --> 00:08:00.880
with a common set of software.

00:08:00.880 --> 00:08:03.640
Now, these SOMs are
made in bulk quantities

00:08:03.640 --> 00:08:05.560
so that you can buy
them in small quantities

00:08:05.560 --> 00:08:07.840
and pay reasonable
prices for them.

00:08:07.840 --> 00:08:12.040
And you plug them into your
own custom developer board

00:08:12.040 --> 00:08:14.770
to test them, but you can build
your own custom development

00:08:14.770 --> 00:08:17.465
boards depending on your needs
for the kind of application

00:08:17.465 --> 00:08:19.090
you're building,
because you don't want

00:08:19.090 --> 00:08:21.580
to have to embed a full
developer board into a product

00:08:21.580 --> 00:08:23.830
that you're selling.

00:08:23.830 --> 00:08:27.190
And so the SOM contains
hard-to-design components.

00:08:27.190 --> 00:08:29.590
When you're doing
electronics manufacture,

00:08:29.590 --> 00:08:32.230
you start to realize that there
are high-speed electronics

00:08:32.230 --> 00:08:33.789
and low-speed electronics.

00:08:33.789 --> 00:08:37.299
High-speed electronics require
really skilled design people

00:08:37.299 --> 00:08:40.096
who really know how to build
things that run at 1 gigahertz,

00:08:40.096 --> 00:08:41.470
and there's a lot
of design rules

00:08:41.470 --> 00:08:42.970
you've got to take into place.

00:08:42.970 --> 00:08:44.380
Whereas low-speed
electronics are

00:08:44.380 --> 00:08:46.300
the kind of things that
we can build at home.

00:08:46.300 --> 00:08:47.940
So I've actually
got to talk tomorrow

00:08:47.940 --> 00:08:49.060
where we're going
to go through how

00:08:49.060 --> 00:08:51.490
to go about making your own
boards for an Android Thing

00:08:51.490 --> 00:08:54.010
device that you can
solder at home, basically.

00:08:54.010 --> 00:08:56.500
So we're going to talk
about that tomorrow.

00:08:56.500 --> 00:08:59.140
But the nice thing
about SOMs is that it's

00:08:59.140 --> 00:09:02.440
our initiative to democratize
hardware development.

00:09:02.440 --> 00:09:04.270
And we're making it
fun for prototyping

00:09:04.270 --> 00:09:06.130
so anyone can take an
Android Things board

00:09:06.130 --> 00:09:09.800
and build something, but
there is a road to production.

00:09:09.800 --> 00:09:11.860
You don't have to switch
hardware and switch

00:09:11.860 --> 00:09:13.090
your software platform.

00:09:13.090 --> 00:09:14.920
You can use the same
hardware and software

00:09:14.920 --> 00:09:17.440
for both your prototype
and the commercial product

00:09:17.440 --> 00:09:19.092
that you can sell in quantities.

00:09:19.092 --> 00:09:21.550
And that's one of the really
important things about Android

00:09:21.550 --> 00:09:26.140
Things and our
architecture based on SOMs.

00:09:26.140 --> 00:09:28.390
So the way you get started
with Android Things

00:09:28.390 --> 00:09:30.550
is you start with one of
these developer boards.

00:09:30.550 --> 00:09:33.130
So I've got some samples
on the slide here,

00:09:33.130 --> 00:09:36.640
and you can see that the
developer board is quite large.

00:09:36.640 --> 00:09:37.810
The SOM is plugged into it.

00:09:37.810 --> 00:09:39.726
The SOM is actually the
really small component

00:09:39.726 --> 00:09:43.840
on the bottom left, and it's on
the top left of the other one

00:09:43.840 --> 00:09:44.810
as well.

00:09:44.810 --> 00:09:47.470
So the SOM just plugs in,
but the developer board

00:09:47.470 --> 00:09:49.750
has breakout pins
for every interface

00:09:49.750 --> 00:09:53.740
you would need as a hacker
or a maker making prototypes.

00:09:53.740 --> 00:09:58.180
So there's USB ports,
audio, GPIO pins, I2C buses,

00:09:58.180 --> 00:10:00.610
HDMI outputs, things like that.

00:10:00.610 --> 00:10:02.740
Now, you build
your prototype, you

00:10:02.740 --> 00:10:06.190
put a breadboard next to it,
you can run jumper wires across.

00:10:06.190 --> 00:10:09.340
And then when you finish, you
can then take that custom board

00:10:09.340 --> 00:10:10.690
and shrink it down.

00:10:10.690 --> 00:10:15.870
But it's nice because you can
test both and use the same SOM.

00:10:15.870 --> 00:10:17.950
So in tomorrow's
talk, we're actually

00:10:17.950 --> 00:10:19.490
going to go through an example.

00:10:19.490 --> 00:10:22.720
So my colleague Dave actually
built this LED candle project.

00:10:22.720 --> 00:10:25.052
So we wanted to test
how hard it would

00:10:25.052 --> 00:10:27.010
be to make your own boards
and then solder them

00:10:27.010 --> 00:10:28.300
in our own workshop.

00:10:28.300 --> 00:10:30.760
So you can see here
on the left that Dave

00:10:30.760 --> 00:10:35.600
built a prototype which had
a large board with the LEDs

00:10:35.600 --> 00:10:38.440
and resistors and wires on
it plugged into the Edison

00:10:38.440 --> 00:10:40.630
debugging board,
and we tested it.

00:10:40.630 --> 00:10:44.890
And once we were happy with
it, then we used PCB software,

00:10:44.890 --> 00:10:46.600
we designed a
schematic, and then

00:10:46.600 --> 00:10:48.130
we had the board fabricated.

00:10:48.130 --> 00:10:49.870
Now the board we
fabricated very cheaply.

00:10:49.870 --> 00:10:51.244
There are lots of
places nowadays

00:10:51.244 --> 00:10:54.740
that will fab boards for you
really quickly and easily.

00:10:54.740 --> 00:10:57.490
And so you can see
on the right that we

00:10:57.490 --> 00:11:01.240
have our LED prototype
sitting in its plastic shell,

00:11:01.240 --> 00:11:03.130
and then there's a lid
we put on top of it.

00:11:03.130 --> 00:11:06.400
And the board we built is
almost the size of the SOM.

00:11:06.400 --> 00:11:09.190
And that's an example of how
you can build a cheap board,

00:11:09.190 --> 00:11:10.690
build it in with a
SOM, and then you

00:11:10.690 --> 00:11:12.670
can embed it into a
component and sell it.

00:11:12.670 --> 00:11:14.290
So I was quite
excited that we were

00:11:14.290 --> 00:11:17.290
able to hand solder this
and build these prototypes.

00:11:17.290 --> 00:11:19.384
So it helps to increase
the time that you

00:11:19.384 --> 00:11:21.300
can do for prototyping,
because you don't want

00:11:21.300 --> 00:11:23.549
to have to wait a month every
time you want to iterate

00:11:23.549 --> 00:11:25.060
on something,
because electronics

00:11:25.060 --> 00:11:28.820
can be a little hard to
do compared to software.

00:11:28.820 --> 00:11:31.090
So the nice thing
about Android Things,

00:11:31.090 --> 00:11:32.840
and we have a bunch
of talks at Google I/O

00:11:32.840 --> 00:11:34.310
specifically about
Android Things,

00:11:34.310 --> 00:11:36.780
so definitely attend those
if you're interested.

00:11:36.780 --> 00:11:39.290
But Android Things uses
standard Android APIs

00:11:39.290 --> 00:11:41.230
to make IoT devices.

00:11:41.230 --> 00:11:44.240
It's a variant of Android in
the same way that Wear is,

00:11:44.240 --> 00:11:47.240
the same way that TV is, and
the same way that tablets

00:11:47.240 --> 00:11:48.710
and phones are
different variants.

00:11:48.710 --> 00:11:50.740
And so they will use the
same Android code base

00:11:50.740 --> 00:11:53.900
to implement their features,
and the same APIs are available.

00:11:53.900 --> 00:11:56.330
Use Android Studio
to write your code.

00:11:56.330 --> 00:11:59.150
You can use your existing
code-based development tools.

00:11:59.150 --> 00:12:02.060
And you can hire any
Android programmer

00:12:02.060 --> 00:12:05.391
to build IoT software for
you now, whereas in the past,

00:12:05.391 --> 00:12:06.890
you would have to
hire someone who's

00:12:06.890 --> 00:12:09.590
familiar with microcontrollers
and assembly language

00:12:09.590 --> 00:12:11.066
and low-level hardware.

00:12:11.066 --> 00:12:12.440
It's now a lot
easier, and that's

00:12:12.440 --> 00:12:14.400
what we're really
trying to do here.

00:12:14.400 --> 00:12:18.120
The other thing is that
it's a real Android device.

00:12:18.120 --> 00:12:20.390
So it includes
Google Play services

00:12:20.390 --> 00:12:21.540
with all of its features.

00:12:21.540 --> 00:12:24.110
So we've built a version
of Google Play services

00:12:24.110 --> 00:12:28.281
that's reduced in size so it
uses less memory because it

00:12:28.281 --> 00:12:30.530
doesn't have as many features
as a phone, for example.

00:12:30.530 --> 00:12:31.816
You're not making phone calls.

00:12:31.816 --> 00:12:34.190
But we have a special version
of the Google Play services

00:12:34.190 --> 00:12:38.150
that offers like Fused Location
provider, Firebase support,

00:12:38.150 --> 00:12:40.460
and that's available to
you on your device as well.

00:12:40.460 --> 00:12:42.950
It really enables a lot of
interesting functionality

00:12:42.950 --> 00:12:45.380
that we'll get into soon.

00:12:45.380 --> 00:12:48.500
So as we said before, it's
based on a SOM architecture,

00:12:48.500 --> 00:12:51.110
but it's more than just the
hardware modules itself.

00:12:51.110 --> 00:12:52.760
It's also the software.

00:12:52.760 --> 00:12:57.980
So Google is providing managed
software updates for those SOMs

00:12:57.980 --> 00:13:01.220
in the form of what's called
a BSP, or a Board Support

00:13:01.220 --> 00:13:02.420
Package.

00:13:02.420 --> 00:13:05.540
So Google provides the
Linux kernel, the drivers,

00:13:05.540 --> 00:13:08.990
and the libraries that
are necessary to run

00:13:08.990 --> 00:13:10.700
Android on that SOM.

00:13:10.700 --> 00:13:14.130
And Google pushes updates
to those devices itself.

00:13:14.130 --> 00:13:16.490
So you're a dog
feeder manufacturer

00:13:16.490 --> 00:13:17.884
making little prototypes.

00:13:17.884 --> 00:13:20.300
You don't want to have to worry
about security and updates

00:13:20.300 --> 00:13:22.040
and looking for kernel flaws.

00:13:22.040 --> 00:13:23.990
You simply get your
updates from Google,

00:13:23.990 --> 00:13:26.750
you update your software
module that runs on the device,

00:13:26.750 --> 00:13:28.770
and then you're done.

00:13:28.770 --> 00:13:31.910
So the same Android
security team

00:13:31.910 --> 00:13:34.370
that makes patches
for Android will

00:13:34.370 --> 00:13:37.190
be providing those same patches
to Android Things devices as

00:13:37.190 --> 00:13:37.980
well.

00:13:37.980 --> 00:13:40.430
So every month or whatever
the release cycle is,

00:13:40.430 --> 00:13:43.250
we'll make new binary
updates for our SOM modules

00:13:43.250 --> 00:13:45.279
and push them out
to public devices.

00:13:45.279 --> 00:13:46.820
And there will be
a developer console

00:13:46.820 --> 00:13:48.980
that you'll use
to maintain those

00:13:48.980 --> 00:13:50.600
and keep your
devices up to date,

00:13:50.600 --> 00:13:54.110
and also monitor how your
fleet of IoT devices is doing.

00:13:54.110 --> 00:13:56.900
So we're provided a lot of
really nice infrastructure

00:13:56.900 --> 00:13:59.780
that helps make
automatic updates

00:13:59.780 --> 00:14:02.780
and keeps devices secure,
because security with IoT

00:14:02.780 --> 00:14:04.500
devices is very important.

00:14:04.500 --> 00:14:06.740
And as we're seeing,
lots of devices

00:14:06.740 --> 00:14:09.740
are having problems out there
that are not built correctly,

00:14:09.740 --> 00:14:11.300
we're trying to
do our bit to make

00:14:11.300 --> 00:14:13.340
sure there's an ecosystem
of secure devices

00:14:13.340 --> 00:14:17.165
out there that are
based on Android.

00:14:17.165 --> 00:14:19.540
So one of the things I find
really exciting about Android

00:14:19.540 --> 00:14:23.110
Things is it's not just about
light bulbs and thermostats,

00:14:23.110 --> 00:14:24.910
but it's about all
the really crazy ideas

00:14:24.910 --> 00:14:27.250
that we're going to be able
to build in the future.

00:14:27.250 --> 00:14:28.892
These devices are very powerful.

00:14:28.892 --> 00:14:30.100
They're not microcontrollers.

00:14:30.100 --> 00:14:32.500
They're very high-end
processes, similar to what

00:14:32.500 --> 00:14:34.269
you had in a phone two
or three years ago.

00:14:34.269 --> 00:14:36.310
And so there's going to
be a lot of possibilities

00:14:36.310 --> 00:14:39.250
for computer vision,
for audio processing,

00:14:39.250 --> 00:14:40.720
and machine learning.

00:14:40.720 --> 00:14:42.490
And the computing
power in these devices

00:14:42.490 --> 00:14:44.710
keeps increasing every
year, and the costs

00:14:44.710 --> 00:14:46.580
keep decreasing as well.

00:14:46.580 --> 00:14:49.180
So we're going to see a lot
of really interesting things,

00:14:49.180 --> 00:14:52.660
and we're enabling you
to build those devices.

00:14:52.660 --> 00:14:55.990
And so one of the really
nice examples is TensorFlow.

00:14:55.990 --> 00:14:58.630
So we've ported
TensorFlow to Android,

00:14:58.630 --> 00:15:01.930
and therefore it also works
on Android Things as well.

00:15:01.930 --> 00:15:04.780
It works on both
ARM and x86 chips,

00:15:04.780 --> 00:15:07.540
so you can support any kind of
Android Things device that's

00:15:07.540 --> 00:15:08.620
out there.

00:15:08.620 --> 00:15:11.260
And we've built some
samples, so there's a URL

00:15:11.260 --> 00:15:14.150
up there to a GitHub project
if you want to have a look.

00:15:14.150 --> 00:15:15.820
We did a blog post
about this recently

00:15:15.820 --> 00:15:18.940
where we took a dog
recognition sample

00:15:18.940 --> 00:15:20.890
and we made it work
on Android Things.

00:15:20.890 --> 00:15:22.420
And so it's really
cool because you

00:15:22.420 --> 00:15:24.560
can take photos of
dogs and people,

00:15:24.560 --> 00:15:26.320
and it'll classify them for you.

00:15:26.320 --> 00:15:29.170
And TensorFlow has--
they've already

00:15:29.170 --> 00:15:32.260
provided a model called
the Google Inception Model.

00:15:32.260 --> 00:15:33.940
And this is a
training set of data

00:15:33.940 --> 00:15:36.700
that Google has built
using millions of images

00:15:36.700 --> 00:15:38.230
that they've
trained, and then you

00:15:38.230 --> 00:15:39.850
can use it to recognize images.

00:15:39.850 --> 00:15:42.640
And so in the example, you
could show a photo of a dog,

00:15:42.640 --> 00:15:44.200
and it tells you what it is.

00:15:44.200 --> 00:15:47.110
And so in this example
here, I've got my dog, Mila,

00:15:47.110 --> 00:15:49.660
and you point the camera
at her, and then it goes,

00:15:49.660 --> 00:15:51.250
wow, she's a
Staffordshire Terrier.

00:15:51.250 --> 00:15:52.666
So it's that cool
that it actually

00:15:52.666 --> 00:15:55.480
can identify the breed of
the dog based on the photo.

00:15:55.480 --> 00:15:58.270
And so I think my next project--

00:15:58.270 --> 00:16:00.310
I like doing IoT projects
at home for my dog,

00:16:00.310 --> 00:16:01.990
so I built a pet
feeder last year.

00:16:01.990 --> 00:16:03.190
But I think my next
one is going to be

00:16:03.190 --> 00:16:05.050
some kind of camera-based
thing that detects when they're

00:16:05.050 --> 00:16:07.132
on the couch and then
scares them away from it

00:16:07.132 --> 00:16:08.090
or something like that.

00:16:08.090 --> 00:16:09.660
So got to work on that.

00:16:09.660 --> 00:16:13.050
If someone wants to build
that, I'll definitely buy it.

00:16:13.050 --> 00:16:15.010
So TensorFlow is
really cool, and it

00:16:15.010 --> 00:16:17.620
offers all kinds of
amazing possibilities

00:16:17.620 --> 00:16:20.680
of doing machine vision, and it
makes it really easy for you.

00:16:20.680 --> 00:16:22.556
And by using something
like Google Inception,

00:16:22.556 --> 00:16:24.680
you don't even need to
build a training set for it.

00:16:24.680 --> 00:16:26.420
You can just get
started straight away.

00:16:26.420 --> 00:16:27.795
So check out the
sample for that.

00:16:30.260 --> 00:16:33.140
So we talked about the
Google Assistant before.

00:16:33.140 --> 00:16:36.640
So there is a third
party API that we've

00:16:36.640 --> 00:16:39.610
provided called Actions
on Google, which

00:16:39.610 --> 00:16:43.420
is what you can use to extend
the Google Assistant to support

00:16:43.420 --> 00:16:45.310
conversations with your users.

00:16:45.310 --> 00:16:47.920
And we call those
Assistant Apps that you

00:16:47.920 --> 00:16:49.810
can build as a developer.

00:16:49.810 --> 00:16:51.790
And so we provide
something called

00:16:51.790 --> 00:16:56.260
a conversation API that takes
the Google Home's speech

00:16:56.260 --> 00:16:57.320
recognition.

00:16:57.320 --> 00:16:59.050
So when the user
speaks something,

00:16:59.050 --> 00:17:01.540
it recognizes the text,
generates a string,

00:17:01.540 --> 00:17:05.866
and it then passes it
to your cloud service,

00:17:05.866 --> 00:17:07.990
and it gives it to you so
that you can do something

00:17:07.990 --> 00:17:09.130
with that string.

00:17:09.130 --> 00:17:10.947
And then you can
generate or reply,

00:17:10.947 --> 00:17:13.030
and then the reply will
be spoken back to the user

00:17:13.030 --> 00:17:14.050
by the assistant.

00:17:14.050 --> 00:17:16.160
So it's just strings
going back and forth.

00:17:16.160 --> 00:17:19.210
So it makes it really easy to
integrate your own actions.

00:17:19.210 --> 00:17:21.339
And there's all kinds
of demos out here

00:17:21.339 --> 00:17:23.212
that you can see in
the sandbox areas

00:17:23.212 --> 00:17:24.670
to try them out
for yourself if you

00:17:24.670 --> 00:17:26.014
haven't played with it before.

00:17:26.014 --> 00:17:27.430
And we have codelabs
that show you

00:17:27.430 --> 00:17:29.680
how to build your own
actions as well, which

00:17:29.680 --> 00:17:31.520
is quite interesting.

00:17:31.520 --> 00:17:33.820
So in the example
on the slide here,

00:17:33.820 --> 00:17:36.700
we have actually ported
the Google I/O app

00:17:36.700 --> 00:17:38.020
to the Google Assistant.

00:17:38.020 --> 00:17:40.614
So you can actually ask
it questions like, tell

00:17:40.614 --> 00:17:42.280
me what kind of topics
you want to know,

00:17:42.280 --> 00:17:44.320
or when's the next Android talk.

00:17:44.320 --> 00:17:47.380
So you can ask these questions
and have a conversation or chat

00:17:47.380 --> 00:17:49.750
with it to find out
what you want to know.

00:17:49.750 --> 00:17:51.580
And so we really
want to encourage

00:17:51.580 --> 00:17:54.610
people to build
conversations that are not

00:17:54.610 --> 00:17:57.130
"press 1 for sales, and
press 2 for support,"

00:17:57.130 --> 00:17:58.564
but they're much more intuitive.

00:17:58.564 --> 00:17:59.980
And we have a whole
bunch of talks

00:17:59.980 --> 00:18:03.110
here about how to build
really good voice user

00:18:03.110 --> 00:18:04.690
interfaces, or VUIs.

00:18:04.690 --> 00:18:07.330
And we have some of the best
experts in the field giving

00:18:07.330 --> 00:18:10.210
these presentations to give
you key insights as to how

00:18:10.210 --> 00:18:11.647
to build really good VUIs.

00:18:11.647 --> 00:18:14.230
And I remember going to one of
the talks, and I was like, wow,

00:18:14.230 --> 00:18:16.130
I didn't realize that
there was so much thought

00:18:16.130 --> 00:18:17.180
that's been put into this.

00:18:17.180 --> 00:18:18.638
So there's a lot
of research that's

00:18:18.638 --> 00:18:21.100
been going into making really
good voice conversations,

00:18:21.100 --> 00:18:23.170
and you can build them now, too.

00:18:23.170 --> 00:18:26.980
Now, the one thing about
working with Actions on Google

00:18:26.980 --> 00:18:30.640
is that the basic API is
strings going back and forth.

00:18:30.640 --> 00:18:35.560
But trying to build those
complex conversations yourself

00:18:35.560 --> 00:18:36.340
is not easy.

00:18:39.160 --> 00:18:41.170
If you had to write code
that actually processed

00:18:41.170 --> 00:18:42.910
those strings
separately, you would

00:18:42.910 --> 00:18:44.110
have a hard time doing it.

00:18:44.110 --> 00:18:47.350
So we've actually got
a tool called api.ai

00:18:47.350 --> 00:18:51.700
that we use to help build really
nice conversation actions that

00:18:51.700 --> 00:18:53.740
run on the Google Assistant.

00:18:53.740 --> 00:18:56.230
So let's talk a little
bit about api.ai.

00:18:56.230 --> 00:18:59.300
Api.ai has this really
simple user interface.

00:18:59.300 --> 00:19:01.420
You don't even need to be
a programmer to use it.

00:19:01.420 --> 00:19:05.140
And what you do is you give
it example sentences of things

00:19:05.140 --> 00:19:07.027
that you want the
system to process.

00:19:07.027 --> 00:19:08.860
So there's a video I
made a couple of months

00:19:08.860 --> 00:19:12.210
ago where we built this
personal chef example.

00:19:12.210 --> 00:19:14.440
And so you could say things
to it like, I'm hungry,

00:19:14.440 --> 00:19:17.230
and I want a hot soup
because it's cold outside,

00:19:17.230 --> 00:19:19.790
and chicken sounds good to me,
and I'd like a cold dessert,

00:19:19.790 --> 00:19:21.010
and I want it right now.

00:19:21.010 --> 00:19:23.350
You could give these
really complex sentences,

00:19:23.350 --> 00:19:25.990
and api.ai was
able to extract out

00:19:25.990 --> 00:19:28.062
the key phrases
of those sentences

00:19:28.062 --> 00:19:30.520
and pass it to your web hook
so that you could do something

00:19:30.520 --> 00:19:32.046
with it.

00:19:32.046 --> 00:19:34.420
Trying to write a regular
expression to process something

00:19:34.420 --> 00:19:37.150
like this is really
complicated, and api.ai

00:19:37.150 --> 00:19:40.930
uses machine learning techniques
that you program by typing

00:19:40.930 --> 00:19:42.520
in these example sentences.

00:19:42.520 --> 00:19:44.020
It then learns from you.

00:19:44.020 --> 00:19:46.090
And then as users
use your action,

00:19:46.090 --> 00:19:47.830
it then learns
from that as well.

00:19:47.830 --> 00:19:49.780
And if there's mistakes,
you can correct it,

00:19:49.780 --> 00:19:51.827
and it trains this
model to understand

00:19:51.827 --> 00:19:54.160
the different phrases that
people are going to give you.

00:19:54.160 --> 00:19:57.314
So it's a really neat way
of building conversations,

00:19:57.314 --> 00:19:58.480
and it makes it really easy.

00:19:58.480 --> 00:20:01.164
And so I've had plenty of
people on our design team

00:20:01.164 --> 00:20:02.830
who've never written
code in their life.

00:20:02.830 --> 00:20:04.288
And they come into
api.ai, and they

00:20:04.288 --> 00:20:05.914
start building their
own assistant app,

00:20:05.914 --> 00:20:07.996
and it's really cool with
what you can do with it.

00:20:07.996 --> 00:20:09.610
So we've got a bunch
of great samples.

00:20:09.610 --> 00:20:11.890
If you go to
developers.google.com/actions,

00:20:11.890 --> 00:20:15.227
we have a bunch of great
samples on how to do that.

00:20:15.227 --> 00:20:17.560
And so if you're a beginner,
you should start with that.

00:20:17.560 --> 00:20:20.020
And so finally, we
mentioned in the keynote

00:20:20.020 --> 00:20:23.350
today that the Assistant
runs on phones,

00:20:23.350 --> 00:20:25.870
and it runs on the
Google Home device,

00:20:25.870 --> 00:20:28.192
and we have other
platforms coming soon.

00:20:28.192 --> 00:20:29.650
But the key thing
to remember, I've

00:20:29.650 --> 00:20:31.720
had a few people ask
me this, is like, well,

00:20:31.720 --> 00:20:34.910
if it runs on the phone, how
do I build an APK around that?

00:20:34.910 --> 00:20:37.870
And the answer is all
of the actions on Google

00:20:37.870 --> 00:20:39.321
is hosted in the
cloud somewhere.

00:20:39.321 --> 00:20:40.820
You can use whatever
cloud provider,

00:20:40.820 --> 00:20:43.780
you want, but the action
lives in the cloud somewhere

00:20:43.780 --> 00:20:45.800
because it's available
to every device--

00:20:45.800 --> 00:20:49.540
Google Home, phones, portable
devices, and so forth.

00:20:49.540 --> 00:20:51.790
Not every device has the
ability to install apps

00:20:51.790 --> 00:20:53.330
onto the device itself.

00:20:53.330 --> 00:20:55.580
So have a look at the
documentation to learn more,

00:20:55.580 --> 00:20:57.205
but it's definitely
something if you're

00:20:57.205 --> 00:20:59.440
interested in building a
conversational interaction

00:20:59.440 --> 00:21:02.117
with your service, because
people are driving,

00:21:02.117 --> 00:21:03.700
they're walking,
they're doing things.

00:21:03.700 --> 00:21:06.070
They're not always at a
phone or at a computer,

00:21:06.070 --> 00:21:08.912
and this is definitely a way
of enabling more capabilities

00:21:08.912 --> 00:21:10.120
for your service or platform.

00:21:12.940 --> 00:21:15.610
So one thing we're announcing
at Google I/O this year

00:21:15.610 --> 00:21:18.700
is a new contest for
Actions on Google.

00:21:18.700 --> 00:21:22.420
And so we want to see what kind
of amazing, cool Assistant Apps

00:21:22.420 --> 00:21:23.972
that people like you build.

00:21:23.972 --> 00:21:25.930
And so we're launching
this contest here at I/O

00:21:25.930 --> 00:21:27.010
to encourage that.

00:21:27.010 --> 00:21:29.140
So we've got over
20 different prizes,

00:21:29.140 --> 00:21:32.600
and one of the biggest prizes is
a trip to Google I/O next year.

00:21:32.600 --> 00:21:34.592
So you don't have to wait
in line for a ticket,

00:21:34.592 --> 00:21:35.800
and that's one of the prizes.

00:21:35.800 --> 00:21:38.500
So we really want
to encourage you all

00:21:38.500 --> 00:21:40.360
to go out there and
build Assistant actions,

00:21:40.360 --> 00:21:43.330
submit them, try them out,
and see how that goes.

00:21:43.330 --> 00:21:46.360
And there's a link,
g.co/actionschallenge,

00:21:46.360 --> 00:21:48.250
that you can use to
learn more about this.

00:21:51.720 --> 00:21:56.580
So next, we also have announced
the Google Assistant SDK,

00:21:56.580 --> 00:21:58.800
and this allows you
to embed the Google

00:21:58.800 --> 00:22:02.280
Assistant into custom devices
that you build yourself.

00:22:02.280 --> 00:22:05.790
So you're no longer limited to
just a phone or a Google Home.

00:22:05.790 --> 00:22:08.040
You can now make your
own crazy device.

00:22:08.040 --> 00:22:10.560
And so if you look outside
in the sandbox area,

00:22:10.560 --> 00:22:13.230
we have Deeplocal,
who's a partner of ours.

00:22:13.230 --> 00:22:15.840
They made a drink-making
machine that you can walk up

00:22:15.840 --> 00:22:18.074
to, press a button,
tell it what you want,

00:22:18.074 --> 00:22:19.740
but you can have a
conversation with it.

00:22:19.740 --> 00:22:22.031
You can say things like, oh,
I'm feeling a bit thirsty,

00:22:22.031 --> 00:22:24.540
I really feel like a
whatever the drink is.

00:22:24.540 --> 00:22:27.750
And with the power
of api.ai, it helps

00:22:27.750 --> 00:22:29.670
to understand what
you're trying to ask for,

00:22:29.670 --> 00:22:32.810
and it helps to
understand what you want.

00:22:32.810 --> 00:22:34.310
And so it's really
amazing what they

00:22:34.310 --> 00:22:36.570
were able to do by embedding
the Google Assistant

00:22:36.570 --> 00:22:38.310
SDK into their device.

00:22:38.310 --> 00:22:40.440
And they built up
really quickly, too.

00:22:40.440 --> 00:22:45.900
So recently, we announced
in the MagPi magazine

00:22:45.900 --> 00:22:48.300
a kit called the AIY
Projects kit, which

00:22:48.300 --> 00:22:51.157
is that cardboard box that's
shown at the top there.

00:22:51.157 --> 00:22:52.740
So it's a really
nice kit because it's

00:22:52.740 --> 00:22:55.560
a cardboard box that
has a button, a speaker,

00:22:55.560 --> 00:22:58.620
a microphone, and it all
wraps around a Raspberry Pi.

00:22:58.620 --> 00:23:02.460
And we gave these kits away to
tens of thousands of people,

00:23:02.460 --> 00:23:05.820
and every one of them has the
Google Assistant built into it.

00:23:05.820 --> 00:23:07.802
So you push the
button, talk to it,

00:23:07.802 --> 00:23:09.010
and you can do stuff with it.

00:23:09.010 --> 00:23:11.065
So I'm really curious
to see what people

00:23:11.065 --> 00:23:12.690
are going to do with
this kind of stuff

00:23:12.690 --> 00:23:14.740
because the possibilities
are endless.

00:23:14.740 --> 00:23:17.310
You can talk to your
cocktail machine or whatever.

00:23:17.310 --> 00:23:19.780
So it's quite fun.

00:23:19.780 --> 00:23:22.260
So how can you go about
embedding the Google Assistant

00:23:22.260 --> 00:23:24.210
SDK to work in your project?

00:23:24.210 --> 00:23:26.700
So we have a dedicated
session at I/O

00:23:26.700 --> 00:23:28.860
about embedding the
Google Assistant in.

00:23:28.860 --> 00:23:29.832
It has a lot of detail.

00:23:29.832 --> 00:23:31.290
The engineers on
the team are going

00:23:31.290 --> 00:23:34.210
to go through code samples
in a lot of detail.

00:23:34.210 --> 00:23:35.730
They're going to have demos.

00:23:35.730 --> 00:23:38.190
But I'm just going to give
a quick little summary here.

00:23:38.190 --> 00:23:40.710
So if you look in the
box of the AIY Projects,

00:23:40.710 --> 00:23:43.292
it just has a microphone,
a speaker, a few cables,

00:23:43.292 --> 00:23:44.000
and some buttons.

00:23:44.000 --> 00:23:45.540
So it's very simple.

00:23:45.540 --> 00:23:49.960
And we run on any Linux or
Android Things-based device.

00:23:49.960 --> 00:23:52.510
So we have support
on both platforms.

00:23:52.510 --> 00:23:54.920
And the nice thing
is that the software,

00:23:54.920 --> 00:23:57.930
the API it uses
to talk to Google,

00:23:57.930 --> 00:24:01.740
is based on something called
GRPC, which is an open source

00:24:01.740 --> 00:24:03.840
portable library that's
designed for doing

00:24:03.840 --> 00:24:05.190
this kind of interaction.

00:24:05.190 --> 00:24:07.050
And within like, a
week of launching this,

00:24:07.050 --> 00:24:09.932
we had all these people popping
up with contributed projects,

00:24:09.932 --> 00:24:11.890
porting it to all kinds
of different platforms.

00:24:11.890 --> 00:24:14.979
So I was quite excited to see
the huge interest in this,

00:24:14.979 --> 00:24:16.770
and the porting to many
different platforms

00:24:16.770 --> 00:24:18.330
is really easy.

00:24:18.330 --> 00:24:20.370
And so you can run it
on pretty much anything.

00:24:20.370 --> 00:24:22.560
The next thing is that
you can use a button

00:24:22.560 --> 00:24:24.540
press to activate it,
because you don't always

00:24:24.540 --> 00:24:25.620
want to use hotword.

00:24:25.620 --> 00:24:29.250
But we do provide a library
that adds hotword support

00:24:29.250 --> 00:24:33.030
too so that you can trigger it
just like we do on our consumer

00:24:33.030 --> 00:24:34.350
Google Home devices.

00:24:34.350 --> 00:24:36.540
So you can say, "Hey
Google, talk to it,"

00:24:36.540 --> 00:24:38.370
and it does the
recognition, and then

00:24:38.370 --> 00:24:41.280
it does everything just like
you do on a Google Home.

00:24:41.280 --> 00:24:44.370
So basically, you show up
with your hardware, speaker,

00:24:44.370 --> 00:24:46.680
and microphone, and then
you hook it all together.

00:24:46.680 --> 00:24:48.540
And then you use
Actions on Google

00:24:48.540 --> 00:24:50.550
to implement the rest
of your functionality.

00:24:50.550 --> 00:24:52.950
And the Actions on
Google that you build

00:24:52.950 --> 00:24:55.740
work on either the
device you've made,

00:24:55.740 --> 00:24:57.470
but it works on any
device that user

00:24:57.470 --> 00:24:59.040
had that they're logged into.

00:24:59.040 --> 00:25:01.600
So there are a lot of
exciting possibilities.

00:25:01.600 --> 00:25:03.800
So as you saw from
the cocktail machine,

00:25:03.800 --> 00:25:05.202
that's a pretty crazy idea.

00:25:05.202 --> 00:25:07.410
And I'm very interested to
see what other crazy ideas

00:25:07.410 --> 00:25:11.160
people come up with, and
see it online, and so forth.

00:25:13.860 --> 00:25:17.660
So that was a little tour of
some of the developer platform

00:25:17.660 --> 00:25:20.330
extensions that we provide
for Android, the Google

00:25:20.330 --> 00:25:24.470
Assistant, Actions on Google,
and the Assistant SDK.

00:25:24.470 --> 00:25:26.270
But you might want
to do even more

00:25:26.270 --> 00:25:28.700
than that as part of building
a ubiquitous computing

00:25:28.700 --> 00:25:30.350
experience for your users.

00:25:30.350 --> 00:25:32.240
So you might want to
connect up your devices

00:25:32.240 --> 00:25:33.980
and coordinate
them, and now we're

00:25:33.980 --> 00:25:35.938
going to talk about how
we go about doing that.

00:25:38.430 --> 00:25:42.470
So today at Google I/O, we
announced the Smart Home

00:25:42.470 --> 00:25:45.950
initiative, which is our
support for home automation.

00:25:45.950 --> 00:25:48.750
So we've supported consumer
devices for a while.

00:25:48.750 --> 00:25:51.630
But now we're opening this
up to third party developers

00:25:51.630 --> 00:25:54.170
so that anyone can
build a device that

00:25:54.170 --> 00:25:55.852
integrates with our Smart Home.

00:25:55.852 --> 00:25:57.560
So if you go over to
the tent over there,

00:25:57.560 --> 00:25:59.360
you can see a variety
of demos that we've

00:25:59.360 --> 00:26:03.170
got where you can play with
commercial devices that

00:26:03.170 --> 00:26:06.140
are available, but now
you can build your own.

00:26:06.140 --> 00:26:10.100
And you can integrate them into
what we call the Home Graph.

00:26:10.100 --> 00:26:13.610
So the Home Graph is
a diagram of sorts

00:26:13.610 --> 00:26:15.830
that knows the state
of all of the devices

00:26:15.830 --> 00:26:16.940
that are in your house.

00:26:16.940 --> 00:26:19.520
Your light bulbs, your
thermostats, your doors.

00:26:19.520 --> 00:26:22.010
It remembers how
bright your lights

00:26:22.010 --> 00:26:24.740
are at any particular time
and what color they're set to.

00:26:24.740 --> 00:26:27.890
And with the Home Graph
storing this information,

00:26:27.890 --> 00:26:30.770
you then have the ability to
speak to the Google Assistant

00:26:30.770 --> 00:26:32.250
and to make changes to it.

00:26:32.250 --> 00:26:34.100
So you can say things
like, make it warmer,

00:26:34.100 --> 00:26:37.880
or turn off all the
lights, or dim the lights

00:26:37.880 --> 00:26:39.110
just a little bit.

00:26:39.110 --> 00:26:40.940
Now, "dim the lights
just a little bit"

00:26:40.940 --> 00:26:43.610
requires knowledge of the
current brightness and then

00:26:43.610 --> 00:26:44.990
what "a little bit" means.

00:26:44.990 --> 00:26:49.070
And so Google handles all of
the parsing of the language

00:26:49.070 --> 00:26:51.230
to extract out what
you're trying to do.

00:26:51.230 --> 00:26:53.240
It goes to the Home
Graph, makes the changes,

00:26:53.240 --> 00:26:55.820
and then it sends commands
to all of the devices

00:26:55.820 --> 00:26:58.220
to change their state
so that it matches

00:26:58.220 --> 00:27:00.790
what the user desires here.

00:27:00.790 --> 00:27:03.890
And so device makers is can
now build these things really

00:27:03.890 --> 00:27:05.930
easily, whereas
before it required

00:27:05.930 --> 00:27:07.930
you to have a separate
app running on your phone

00:27:07.930 --> 00:27:09.020
that you would have to press.

00:27:09.020 --> 00:27:11.180
But now you can just be
sitting back on your couch,

00:27:11.180 --> 00:27:12.770
and you can just speak to
your Google Home device,

00:27:12.770 --> 00:27:14.270
and it just does
everything for you.

00:27:14.270 --> 00:27:16.140
So it's kind of cool.

00:27:16.140 --> 00:27:17.429
So how do you do this?

00:27:17.429 --> 00:27:19.220
I'm going to quickly
go through an example.

00:27:19.220 --> 00:27:22.204
There is a talk that goes
through this in complete detail

00:27:22.204 --> 00:27:23.870
where they're going
to show demos and go

00:27:23.870 --> 00:27:25.790
through the example
line by line.

00:27:25.790 --> 00:27:29.550
But basically what happens
is we've provided a sample,

00:27:29.550 --> 00:27:33.320
which is on our developers.googl
e.com/actions/smarthome.

00:27:33.320 --> 00:27:35.840
And there's node.js sample
that we've provided.

00:27:35.840 --> 00:27:38.300
So what you do is you spin
up the node.js example

00:27:38.300 --> 00:27:41.090
on your cloud server
of your choice,

00:27:41.090 --> 00:27:44.450
and then you submit an action
package that tells the Google

00:27:44.450 --> 00:27:47.570
Home that that demo exists.

00:27:47.570 --> 00:27:49.640
The next step is you
go to your phone,

00:27:49.640 --> 00:27:53.010
and you have to register
the devices that you own.

00:27:53.010 --> 00:27:55.587
So you click on your
smartphone integration,

00:27:55.587 --> 00:27:57.170
you type in your
username and password

00:27:57.170 --> 00:28:00.410
for that particular
OEM's service,

00:28:00.410 --> 00:28:04.340
and then it does an auth login,
and it returns auth credentials

00:28:04.340 --> 00:28:05.540
to the Google Home.

00:28:05.540 --> 00:28:06.690
So the assistant.

00:28:06.690 --> 00:28:09.650
So the assistant now
has an auth login token

00:28:09.650 --> 00:28:12.712
that it can use to
control your devices.

00:28:12.712 --> 00:28:15.170
So when it comes time for the
user, when they say something

00:28:15.170 --> 00:28:17.210
like "dim the lights
a little bit,"

00:28:17.210 --> 00:28:19.010
now everything
springs into action.

00:28:19.010 --> 00:28:22.070
So "dim the lights a little
bit" goes to the Home Graph.

00:28:22.070 --> 00:28:23.570
The Home Graph then
decides how much

00:28:23.570 --> 00:28:26.120
to lower the dimness
of that light bulb by.

00:28:26.120 --> 00:28:31.160
And then the light bulb
is sent a command--

00:28:31.160 --> 00:28:33.320
that's through the
API that we show you--

00:28:33.320 --> 00:28:36.542
and then the command arrives
at your cloud service.

00:28:36.542 --> 00:28:38.750
And then you can send the
command to your light bulbs

00:28:38.750 --> 00:28:41.720
with however its implemented
and change the light bulb state.

00:28:41.720 --> 00:28:44.380
So its really designed to
integrate with the existing

00:28:44.380 --> 00:28:46.130
infrastructures, because
lots of companies

00:28:46.130 --> 00:28:48.212
have different kinds of
light bulbs out there,

00:28:48.212 --> 00:28:49.670
and we want to make
it really easy.

00:28:49.670 --> 00:28:52.220
So it hooks into all their
existing cloud infrastructure

00:28:52.220 --> 00:28:53.180
really easily.

00:28:53.180 --> 00:28:55.040
So you write a really
small cloud service

00:28:55.040 --> 00:28:58.430
and hook it all in,
and it just works.

00:28:58.430 --> 00:29:04.400
Now, one of the really nice
things about this initiative

00:29:04.400 --> 00:29:07.790
is that we integrate devices
across all different OEMs.

00:29:07.790 --> 00:29:10.509
So you don't need to mention
the name of the manufacturer

00:29:10.509 --> 00:29:12.050
when you want to
change a light bulb.

00:29:12.050 --> 00:29:13.484
You just say turn
all the lights,

00:29:13.484 --> 00:29:14.900
or turn all the
lights off, and it

00:29:14.900 --> 00:29:17.540
tells all of them that are
connected to the Home Graph.

00:29:17.540 --> 00:29:20.540
The other thing you can do
is you can embed the Google

00:29:20.540 --> 00:29:23.570
Assistant SDK into a
device like a light bulb,

00:29:23.570 --> 00:29:26.009
and then you can talk to
the light bulb itself.

00:29:26.009 --> 00:29:28.550
So when you speak to the light
bulb, you can say, "Turn off."

00:29:28.550 --> 00:29:29.840
The light bulb will turn off.

00:29:29.840 --> 00:29:32.840
But you can also say, "Turn all
the lights on in the house,"

00:29:32.840 --> 00:29:35.000
and then it'll send
the command everywhere.

00:29:35.000 --> 00:29:37.310
So you have the ability
to embed the assistant

00:29:37.310 --> 00:29:40.460
into the devices
itself, and there's

00:29:40.460 --> 00:29:42.780
all kinds of combinations
you can do here.

00:29:42.780 --> 00:29:45.080
So the cocktail
machine example, that's

00:29:45.080 --> 00:29:48.470
also an example of a device
that has the Assistant built in,

00:29:48.470 --> 00:29:50.840
and it's a device of
its own that hooks

00:29:50.840 --> 00:29:52.770
in to the ecosystem of Things.

00:29:52.770 --> 00:29:56.720
So that's the really nice thing
about the Google Assistant SDK,

00:29:56.720 --> 00:30:00.950
is it brings both embedding
devices and the Smart Home

00:30:00.950 --> 00:30:02.480
initiative together.

00:30:02.480 --> 00:30:04.899
So definitely go check that
out in the sandbox area.

00:30:04.899 --> 00:30:06.440
There's a bunch of
really nice demos.

00:30:06.440 --> 00:30:08.660
And we have examples that
you can actually play with

00:30:08.660 --> 00:30:09.868
to sort of see how they work.

00:30:12.140 --> 00:30:13.580
As a few other
developer products,

00:30:13.580 --> 00:30:14.860
let's go through them quickly.

00:30:14.860 --> 00:30:16.450
We also have Firebase.

00:30:16.450 --> 00:30:19.270
So Firebase is an
SDK that many are

00:30:19.270 --> 00:30:21.070
familiar with for
writing Android apps.

00:30:21.070 --> 00:30:23.470
It works on the
web, Android, iOS,

00:30:23.470 --> 00:30:26.140
and it's a very portable
library that runs anywhere.

00:30:26.140 --> 00:30:29.260
Now, Firebase Cloud
Messaging is a part of that,

00:30:29.260 --> 00:30:31.720
and it allows you to deliver
quick, reliable messages

00:30:31.720 --> 00:30:34.060
to devices to wake them up.

00:30:34.060 --> 00:30:36.640
Now, normally when
you build IoT devices,

00:30:36.640 --> 00:30:38.877
the quick and dirty
way is to do polling

00:30:38.877 --> 00:30:40.960
where you poll once every
five minutes to find out

00:30:40.960 --> 00:30:42.550
what your latest
command is going to be.

00:30:42.550 --> 00:30:44.591
But that's not very
efficient, because if someone

00:30:44.591 --> 00:30:46.720
says change the lights,
it'll take five minutes.

00:30:46.720 --> 00:30:48.580
So Firebase Cloud
Messaging is a great way

00:30:48.580 --> 00:30:52.960
of delivering messages to
your products between devices,

00:30:52.960 --> 00:30:54.580
if that's something
you want to do.

00:30:54.580 --> 00:30:58.630
And it provides
very fast updates,

00:30:58.630 --> 00:31:00.940
and it's available
currently everywhere.

00:31:00.940 --> 00:31:05.540
And because Android Things
supports Google Play services,

00:31:05.540 --> 00:31:09.880
it then supports all of the cool
features of Firebase as well.

00:31:09.880 --> 00:31:13.030
Firebase also has a real-time
database capability.

00:31:13.030 --> 00:31:15.370
So it's cloud hosted,
it's based on NoSQL,

00:31:15.370 --> 00:31:18.520
and it lets you store and
sync data between your devices

00:31:18.520 --> 00:31:19.910
and real time as well.

00:31:19.910 --> 00:31:21.940
So maybe the Smart Home
thing is not for you,

00:31:21.940 --> 00:31:24.231
and maybe you want to do your
own kind of synchronizing

00:31:24.231 --> 00:31:25.030
between devices.

00:31:25.030 --> 00:31:26.690
You can use that here as well.

00:31:26.690 --> 00:31:29.740
And once again, because
Android Things supports

00:31:29.740 --> 00:31:31.720
all of Firebase
out of the box, you

00:31:31.720 --> 00:31:33.520
can use this stuff for
free without having

00:31:33.520 --> 00:31:34.780
to do any extra work.

00:31:34.780 --> 00:31:37.270
And actually, one of our
engineers on my team, he

00:31:37.270 --> 00:31:39.670
made a sample where he actually
ported Firebase to work

00:31:39.670 --> 00:31:41.180
on Arduino devices as well.

00:31:41.180 --> 00:31:43.300
So there's a URL for there
if you want to do that.

00:31:43.300 --> 00:31:45.670
That's useful for really,
really cheap devices

00:31:45.670 --> 00:31:48.370
if you want to embed
Firebase into that.

00:31:48.370 --> 00:31:50.890
The nice thing about
Firebase, the database,

00:31:50.890 --> 00:31:53.530
is that you don't even need
to provide your own server.

00:31:53.530 --> 00:31:55.960
If you just want to synchronize
data between devices,

00:31:55.960 --> 00:31:57.690
you don't need to have
any cloud hosting,

00:31:57.690 --> 00:31:59.800
and we handle all of the
provisioning and scaling

00:31:59.800 --> 00:32:00.910
and so forth.

00:32:00.910 --> 00:32:03.620
And so we've provided a whole
bunch of samples for that.

00:32:03.620 --> 00:32:06.700
So go check that out
if you're interested.

00:32:06.700 --> 00:32:08.560
And finally, for
Firebase, we also

00:32:08.560 --> 00:32:12.410
have the ability to store
larger user-generated content.

00:32:12.410 --> 00:32:15.100
So you might have a doorbell
where you press a button

00:32:15.100 --> 00:32:16.570
and it takes a
photo, and you want

00:32:16.570 --> 00:32:18.790
to synchronize that photo
over to a device that's

00:32:18.790 --> 00:32:20.230
running an app that you've got.

00:32:20.230 --> 00:32:22.660
So this is great because
you can take that photo,

00:32:22.660 --> 00:32:24.370
it'll store it in
Firebase for you,

00:32:24.370 --> 00:32:27.100
and then make it available to
all of the other devices that

00:32:27.100 --> 00:32:28.390
are part of your ecosystem.

00:32:28.390 --> 00:32:31.420
So you can store photos,
videos, large files.

00:32:31.420 --> 00:32:33.470
It's kind of nice
for things like this.

00:32:33.470 --> 00:32:35.386
And once again, it
works on Android Things.

00:32:35.386 --> 00:32:36.760
But also something
that you might

00:32:36.760 --> 00:32:39.400
want to consider using on
Android Wear or Android TV

00:32:39.400 --> 00:32:40.120
as well.

00:32:40.120 --> 00:32:42.310
Because remember, they're
full Android devices

00:32:42.310 --> 00:32:44.530
that have the same
capabilities as phones,

00:32:44.530 --> 00:32:48.230
so you can use it there as well.

00:32:48.230 --> 00:32:51.190
And then just yesterday
we released a blog post

00:32:51.190 --> 00:32:54.440
where we announced a new
initiative called Cloud IoT

00:32:54.440 --> 00:32:57.880
Core, which is a fully managed
service on the Google Cloud

00:32:57.880 --> 00:33:01.510
platform that allows you to
securely connect millions

00:33:01.510 --> 00:33:04.750
of IoT devices to Google Cloud.

00:33:04.750 --> 00:33:07.270
Now, the reason this
is cool is because it

00:33:07.270 --> 00:33:10.480
scales automatically, and it
works anywhere in the world.

00:33:10.480 --> 00:33:12.520
We provide endpoints
everywhere that you

00:33:12.520 --> 00:33:14.210
don't have to worry about.

00:33:14.210 --> 00:33:16.079
You just simply
upload your data,

00:33:16.079 --> 00:33:17.620
and it works everywhere
in the world.

00:33:17.620 --> 00:33:19.600
It handles millions of devices.

00:33:19.600 --> 00:33:22.690
And imagine a scenario where
you've got an enterprise where

00:33:22.690 --> 00:33:25.750
you're building millions of
thermostats or power meters

00:33:25.750 --> 00:33:27.420
for the power
company or something.

00:33:27.420 --> 00:33:29.110
Now, every one of
those power meters

00:33:29.110 --> 00:33:31.180
is going to be logging
data every minute,

00:33:31.180 --> 00:33:32.570
and there's millions of them.

00:33:32.570 --> 00:33:35.992
So imagine millions of devices
logging data every minute.

00:33:35.992 --> 00:33:38.450
You're going to end up with
terabytes and terabytes of data

00:33:38.450 --> 00:33:40.070
really, really quickly.

00:33:40.070 --> 00:33:42.130
So Google Cloud is ideal
for this kind of thing

00:33:42.130 --> 00:33:46.030
because it's built to run
really mega large applications.

00:33:46.030 --> 00:33:52.030
And so we support the ability to
use standardized MQTT messages,

00:33:52.030 --> 00:33:55.030
so we support lots of
different protocols like that.

00:33:55.030 --> 00:33:58.190
And you can access all
your data very easily.

00:33:58.190 --> 00:34:00.190
And the nice thing is you
can use cloud services

00:34:00.190 --> 00:34:02.740
like BigQuery to
analyze that data

00:34:02.740 --> 00:34:05.200
and extract out really
useful information

00:34:05.200 --> 00:34:08.080
that you might not be able
to see with small data sets.

00:34:08.080 --> 00:34:10.719
So once again, we
have a bunch of talks

00:34:10.719 --> 00:34:11.770
about cloud IoT as well.

00:34:11.770 --> 00:34:12.860
We've got two of them.

00:34:12.860 --> 00:34:15.010
One is a combo session
about Android Things,

00:34:15.010 --> 00:34:18.070
and another one is just about
cloud IoT and all the concepts.

00:34:18.070 --> 00:34:20.850
So definitely check out those
two talks if you're interested.

00:34:20.850 --> 00:34:23.260
They're got demos and
samples and so forth

00:34:23.260 --> 00:34:25.960
that you can learn more about.

00:34:25.960 --> 00:34:27.679
So we're almost out of time.

00:34:27.679 --> 00:34:30.580
So that was a quick whirlwind
tour of some of the things

00:34:30.580 --> 00:34:33.850
that Google provides to
support ubiquitous computing

00:34:33.850 --> 00:34:35.770
and the Internet
of Things, and we

00:34:35.770 --> 00:34:37.929
think they're really
useful for making

00:34:37.929 --> 00:34:41.350
amazing, powerful, and
secure products that

00:34:41.350 --> 00:34:43.979
scale to a worldwide audience,
because you can't just

00:34:43.979 --> 00:34:44.770
build things small.

00:34:44.770 --> 00:34:46.420
We've got to build big
because there's lots of people

00:34:46.420 --> 00:34:47.380
out there.

00:34:47.380 --> 00:34:49.540
Every single one of the
things I mentioned here

00:34:49.540 --> 00:34:52.060
has a dedicated deep
dive session at I/O,

00:34:52.060 --> 00:34:53.906
and so you should
definitely check that out.

00:34:53.906 --> 00:34:55.780
And also if you can't
make it to those talks,

00:34:55.780 --> 00:34:56.904
they're all being recorded.

00:34:56.904 --> 00:34:59.496
So don't worry, you can
catch up on them later.

00:34:59.496 --> 00:35:01.870
The other point about Google
I/O that I want to highlight

00:35:01.870 --> 00:35:04.300
is that it's all about
meeting people and talking

00:35:04.300 --> 00:35:06.439
to the engineers who
work on the products.

00:35:06.439 --> 00:35:08.980
So if you look at the top of
the map, there's a codelab area.

00:35:08.980 --> 00:35:10.960
Not everyone's been to
the codelabs before,

00:35:10.960 --> 00:35:14.230
but you can actually sit
down and work on a machine

00:35:14.230 --> 00:35:16.180
and try these
products out yourself.

00:35:16.180 --> 00:35:18.844
We've got devices plugged
in, and it's a lot of fun.

00:35:18.844 --> 00:35:20.260
And we have the
engineers who work

00:35:20.260 --> 00:35:21.850
on those products
standing around

00:35:21.850 --> 00:35:23.720
to answer questions
and help you out.

00:35:23.720 --> 00:35:26.134
We have office hours
on the bottom right

00:35:26.134 --> 00:35:27.050
where you can show up.

00:35:27.050 --> 00:35:29.440
We've got three sessions
for Android Things

00:35:29.440 --> 00:35:32.074
where you can come and meet the
engineers and ask questions.

00:35:32.074 --> 00:35:33.490
And also we're
going to be around.

00:35:33.490 --> 00:35:36.010
So if you see any of us walking
around, come and talk to us

00:35:36.010 --> 00:35:38.630
and tell us what your idea is,
if you've got any problems,

00:35:38.630 --> 00:35:39.130
or whatever.

00:35:39.130 --> 00:35:42.080
So we look forward
to hearing from you.

00:35:42.080 --> 00:35:43.270
So finally, what's next?

00:35:43.270 --> 00:35:46.860
So if you want to learn more,
join our Google+ Communities.

00:35:46.860 --> 00:35:51.195
So we've got three of them for
IoT, Actions, and Assistant,

00:35:51.195 --> 00:35:53.320
and we do a lot of postings
there to keep people up

00:35:53.320 --> 00:35:54.010
to date.

00:35:54.010 --> 00:35:58.180
I also am a developer advocate
for IoT and Android Things,

00:35:58.180 --> 00:36:00.760
and also the Assistant,
so follow me on Google+

00:36:00.760 --> 00:36:03.385
and Twitter if you want to keep
up to date with everything that

00:36:03.385 --> 00:36:04.100
I'm working on.

00:36:04.100 --> 00:36:06.400
So what can you
do with all this?

00:36:06.400 --> 00:36:09.310
So there are all kinds
of possibilities for IoT

00:36:09.310 --> 00:36:10.690
and the Internet of Things.

00:36:10.690 --> 00:36:12.880
And think about cool
ideas you can build,

00:36:12.880 --> 00:36:14.290
but also I want
everyone to think

00:36:14.290 --> 00:36:16.030
about what things
you could do to help

00:36:16.030 --> 00:36:17.740
people who are less fortunate.

00:36:17.740 --> 00:36:19.944
Think of people with
accessibility issues,

00:36:19.944 --> 00:36:21.610
and people who could
benefit from having

00:36:21.610 --> 00:36:23.950
more computing in their
lives to perform tasks

00:36:23.950 --> 00:36:25.326
they can't currently perform.

00:36:25.326 --> 00:36:27.200
This technology is going
to change the world,

00:36:27.200 --> 00:36:28.991
and I look forward to
building it with you.

00:36:28.991 --> 00:36:30.850
Thank you very much.

00:36:30.850 --> 00:36:34.200
[MUSIC PLAYING]

