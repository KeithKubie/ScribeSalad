WEBVTT
Kind: captions
Language: en

00:00:00.425 --> 00:00:02.050
What I want to do in
this video is step

00:00:02.050 --> 00:00:04.360
through the
insertion_sort function

00:00:04.360 --> 00:00:05.830
that we wrote in the last video.

00:00:05.830 --> 00:00:07.371
But before I do
that, I actually want

00:00:07.371 --> 00:00:10.490
to just focus on one part of it,
because I realize that I used

00:00:10.490 --> 00:00:13.084
something that you
probably don't recognize,

00:00:13.084 --> 00:00:14.500
because we haven't
used it before.

00:00:14.500 --> 00:00:17.850
I used the keyword
right over here.

00:00:17.850 --> 00:00:19.280
I used break.

00:00:19.280 --> 00:00:21.250
And you might guess
what break means,

00:00:21.250 --> 00:00:22.950
but now I'll explain
it explicitly.

00:00:22.950 --> 00:00:26.350
What break means is break
out of the smallest loop

00:00:26.350 --> 00:00:27.500
that you were doing.

00:00:27.500 --> 00:00:29.209
So we were taking
our item, and we

00:00:29.209 --> 00:00:31.250
kept comparing it to the
thing to the left of it.

00:00:31.250 --> 00:00:32.720
Or we were taking value
and comparing things

00:00:32.720 --> 00:00:33.810
to the left of it.

00:00:33.810 --> 00:00:36.737
And as soon as we found value
not being less than the thing

00:00:36.737 --> 00:00:38.570
to the left of it, we
said, hey, we're done.

00:00:38.570 --> 00:00:40.470
We don't have to keep
going to the left.

00:00:40.470 --> 00:00:42.950
And in that situation, I
want to break the loop.

00:00:42.950 --> 00:00:44.690
So we're breaking
this while loop.

00:00:44.690 --> 00:00:47.830
And then we just continue in our
next iteration of this for loop

00:00:47.830 --> 00:00:48.360
over here.

00:00:48.360 --> 00:00:49.457
So that's what break did.

00:00:49.457 --> 00:00:51.290
Now with that out of
the way, let's actually

00:00:51.290 --> 00:00:54.230
step through this program
on a simple example.

00:00:54.230 --> 00:00:57.250
So let's say that someone
calls-- well, let's just

00:00:57.250 --> 00:01:03.550
define a to be equal to-- let me
think of a fairly simple list--

00:01:03.550 --> 00:01:13.510
2, 1, 2, 1, I don't know, 2,
1, 3-- 2, 1, 3, 2, I think,

00:01:13.510 --> 00:01:15.900
is a good list over there.

00:01:15.900 --> 00:01:24.590
And let's assume that we are
calling insertion_sort on a.

00:01:24.590 --> 00:01:26.560
Let's think about
what's going to happen.

00:01:26.560 --> 00:01:28.980
Well, the first thing, of
course, that list-- let's

00:01:28.980 --> 00:01:32.010
keep track of all of
the variables here.

00:01:32.010 --> 00:01:34.210
So list is, right
from the get-go,

00:01:34.210 --> 00:01:39.160
going to refer to 2, 1, 3, 2.

00:01:39.160 --> 00:01:41.220
That's list right
from the get-go.

00:01:41.220 --> 00:01:44.430
And then we enter into the
function, for index in range.

00:01:44.430 --> 00:01:46.470
And let's parse this
part right over here.

00:01:46.470 --> 00:01:49.530
So what is len of the list?

00:01:49.530 --> 00:01:57.902
So len of our list is the same
thing as len of 2, 1, 3, 2.

00:01:57.902 --> 00:01:59.860
And this is just really
the number of elements.

00:01:59.860 --> 00:02:03.320
Len is short for length--
not that much shorter.

00:02:03.320 --> 00:02:06.740
But len of this is just
going to be 1, 2, 3, 4.

00:02:06.740 --> 00:02:09.130
It's going to be equal
to four elements.

00:02:09.130 --> 00:02:11.530
So this right over
here is going to be 4.

00:02:11.530 --> 00:02:19.320
And then the call, range
between 1 and len of list is 4.

00:02:19.320 --> 00:02:22.910
This will return the
list starting at 1,

00:02:22.910 --> 00:02:27.550
up to, but not
including 4, 1, 2, 3.

00:02:27.550 --> 00:02:29.820
And so these are the
indices we want to use,

00:02:29.820 --> 00:02:32.799
because the first index
is this right over here.

00:02:32.799 --> 00:02:34.340
Second index is this
right over here.

00:02:34.340 --> 00:02:35.990
And the third index
is that over here.

00:02:35.990 --> 00:02:38.570
Remember, this is
the 0-th index.

00:02:38.570 --> 00:02:41.390
So index is going to keep
incrementing between these two.

00:02:41.390 --> 00:02:44.250
It's going to be 1
first, then 3, then 2.

00:02:44.250 --> 00:02:49.040
So let me just create
our variable index

00:02:49.040 --> 00:02:52.080
whose scope is inside
of the for loop.

00:02:52.080 --> 00:02:54.840
So let's say we have index.

00:02:54.840 --> 00:02:56.890
Index is going to
start off being

00:02:56.890 --> 00:03:00.860
the first item in
this list right here,

00:03:00.860 --> 00:03:05.730
the list generated by
range, 1 comma len of list.

00:03:05.730 --> 00:03:09.260
So index is going to
start off being 1.

00:03:09.260 --> 00:03:10.850
And then over here,
we say value is

00:03:10.850 --> 00:03:14.430
equal to the index
element in list.

00:03:14.430 --> 00:03:18.850
So let me define
our variable value.

00:03:18.850 --> 00:03:22.502
So what is list of 1?

00:03:22.502 --> 00:03:24.210
So what is the first
element in the list?

00:03:24.210 --> 00:03:25.330
It's the 0-th element.

00:03:25.330 --> 00:03:27.250
This is the first element.

00:03:27.250 --> 00:03:30.290
So we're looking at
this right over here.

00:03:30.290 --> 00:03:33.300
It is the first element,
so that's fair enough.

00:03:33.300 --> 00:03:36.550
And then we define i
to be index minus 1.

00:03:36.550 --> 00:03:38.860
So let me put i over here.

00:03:38.860 --> 00:03:39.770
Do a new color.

00:03:39.770 --> 00:03:41.330
So now let's do i.

00:03:41.330 --> 00:03:42.930
It is index minus 1.

00:03:42.930 --> 00:03:45.840
Index is 1, so
index minus 1 is 0.

00:03:45.840 --> 00:03:50.580
So it's the index of the
item to the left of value.

00:03:50.580 --> 00:03:51.750
So that is going to be 0.

00:03:51.750 --> 00:03:54.370
This index is 1, this is 0.

00:03:54.370 --> 00:03:57.950
And then we're saying, while i
is greater than or equal to 0,

00:03:57.950 --> 00:03:59.474
do all of this
business over here.

00:03:59.474 --> 00:04:01.140
And the first thing
that we do over here

00:04:01.140 --> 00:04:05.510
is we compare value
to the object that

00:04:05.510 --> 00:04:08.030
is at the i-th
element in the list.

00:04:08.030 --> 00:04:09.400
So let me write that over here.

00:04:09.400 --> 00:04:14.640
So list at i.

00:04:14.640 --> 00:04:17.870
So that is going to be the
0-th element in the list,

00:04:17.870 --> 00:04:20.430
so that is 2.

00:04:20.430 --> 00:04:21.760
So we're comparing value.

00:04:21.760 --> 00:04:22.960
We're comparing 1.

00:04:22.960 --> 00:04:26.760
We're saying if 1 is less
than the i-th element in list,

00:04:26.760 --> 00:04:30.110
if 1 is less than
2, then do this.

00:04:30.110 --> 00:04:31.869
Well, 1 is definitely
less than 2.

00:04:31.869 --> 00:04:33.660
We're essentially taking
1 and comparing it

00:04:33.660 --> 00:04:34.960
to the thing to the
left and saying, hey,

00:04:34.960 --> 00:04:35.850
it's less than that.

00:04:35.850 --> 00:04:36.808
So it's less than that.

00:04:36.808 --> 00:04:39.115
So let's shift this
2 to the right,

00:04:39.115 --> 00:04:41.200
and let's shift 1 to the left.

00:04:41.200 --> 00:04:44.220
And so we go into here
and we say, list i plus 1.

00:04:44.220 --> 00:04:47.400
So what's i plus
1? i plus 1 is 1.

00:04:47.400 --> 00:04:51.490
So this is list of 1, so
this slot right over here.

00:04:51.490 --> 00:04:53.550
So this, in yellow
that I just underlined,

00:04:53.550 --> 00:04:56.320
that's this slot right
over here. i is 0.

00:04:56.320 --> 00:04:57.720
i plus 1 is 1.

00:04:57.720 --> 00:05:01.080
So the first item,
or the first slot,

00:05:01.080 --> 00:05:02.560
is this slot right over here.

00:05:02.560 --> 00:05:05.830
Let's replace it with
whatever is at list

00:05:05.830 --> 00:05:07.880
and whatever is in
the i-th element,

00:05:07.880 --> 00:05:11.590
or whatever is in the 0 slot,
I guess I should call it.

00:05:11.590 --> 00:05:13.560
So let's replace it with this 2.

00:05:13.560 --> 00:05:14.060
Right?

00:05:14.060 --> 00:05:14.934
Let me make it clear.

00:05:14.934 --> 00:05:17.460
And this time around,
this is 2, and this

00:05:17.460 --> 00:05:20.180
is the slot where the 1 was.

00:05:20.180 --> 00:05:21.880
So we're going to
put this-- we're

00:05:21.880 --> 00:05:24.200
going to replace that with 2.

00:05:24.200 --> 00:05:26.319
And then in the place
where the 2 was,

00:05:26.319 --> 00:05:27.860
we're going to
replace it with value.

00:05:27.860 --> 00:05:30.490
And remember,
value was set to 1.

00:05:30.490 --> 00:05:32.210
So value is set to 1.

00:05:32.210 --> 00:05:36.132
And so our list now
looks like 1, 2, 3, 2.

00:05:36.132 --> 00:05:37.590
And hopefully, this
looks familiar,

00:05:37.590 --> 00:05:39.560
if you remember when
we first described

00:05:39.560 --> 00:05:41.870
the insertion_sort algorithm.

00:05:41.870 --> 00:05:44.060
So we go through there.

00:05:44.060 --> 00:05:45.480
And now we want to decrement i.

00:05:45.480 --> 00:05:48.910
We say whatever i was--
it's 1-- we subtract 1.

00:05:48.910 --> 00:05:50.440
So now it's 0.

00:05:50.440 --> 00:05:53.473
So the new value for i is 0.

00:05:56.930 --> 00:05:57.760
Actually, no, no.

00:05:57.760 --> 00:05:58.260
Sorry.

00:05:58.260 --> 00:05:59.660
Whatever i was.

00:05:59.660 --> 00:06:02.100
i was 0.

00:06:02.100 --> 00:06:04.590
You subtract 1 from
that, and now i

00:06:04.590 --> 00:06:06.505
is going to be negative 1.

00:06:11.950 --> 00:06:13.340
And then we go to
the while loop.

00:06:13.340 --> 00:06:15.580
It says while i is greater
than or equal to 0.

00:06:15.580 --> 00:06:20.020
Well, i is now negative 1,
so the while loop no longer

00:06:20.020 --> 00:06:20.520
applies.

00:06:20.520 --> 00:06:23.490
This will return false. i is
not greater than or equal to 0,

00:06:23.490 --> 00:06:25.930
so it won't perform
any of this anymore.

00:06:25.930 --> 00:06:31.350
And so we'll now go to the
next iteration of the for loop.

00:06:31.350 --> 00:06:33.356
And essentially, what
that's signifying

00:06:33.356 --> 00:06:34.980
is that we were done
with that element.

00:06:34.980 --> 00:06:37.480
We compared all the way to
everything to the left of it,

00:06:37.480 --> 00:06:39.230
and it found its
place, or it just

00:06:39.230 --> 00:06:41.230
found its place in general.

00:06:41.230 --> 00:06:44.000
Now let's go to the next
iteration of the for loop.

00:06:44.000 --> 00:06:46.790
Now index is going to
be the next element.

00:06:46.790 --> 00:06:48.430
Now index, instead
of being 1, is

00:06:48.430 --> 00:06:51.260
going to be the next element
in the list generated

00:06:51.260 --> 00:06:52.810
by this expression here.

00:06:52.810 --> 00:06:55.160
So index is now going to be 2.

00:06:58.420 --> 00:07:03.960
And now list value is what's
ever at the second index.

00:07:03.960 --> 00:07:06.340
So it's this item
right over here.

00:07:06.340 --> 00:07:08.430
Notice, we were at the
second to the left.

00:07:08.430 --> 00:07:11.280
Now we're at the-- or we were
at the first to the left,

00:07:11.280 --> 00:07:13.220
or one right to the left of it.

00:07:13.220 --> 00:07:15.560
Now we're one space
more to the right.

00:07:15.560 --> 00:07:20.260
So value now is going to be 3.

00:07:20.260 --> 00:07:21.950
i is going to be index minus 1.

00:07:21.950 --> 00:07:23.900
Index is 2.

00:07:23.900 --> 00:07:28.090
2 minus 1 is 1.

00:07:28.090 --> 00:07:30.180
So this is now 1.

00:07:33.900 --> 00:07:36.860
And we say, while i is
greater than or equal to 0.

00:07:36.860 --> 00:07:40.900
Well, it's clearly greater
than or equal to 0 now.

00:07:40.900 --> 00:07:44.350
So if value is less than
list, the i-th element

00:07:44.350 --> 00:07:46.260
in list, so the value is 3.

00:07:46.260 --> 00:07:49.190
And is that less than--
well, what's at list i

00:07:49.190 --> 00:07:52.460
is no longer 2-- so what's
in the first element?

00:07:52.460 --> 00:07:55.760
Well, actually, it is still a 2.

00:07:55.760 --> 00:07:58.250
So if we look at the
first element-- list

00:07:58.250 --> 00:08:01.780
the i-th element in
list, i is 1, 0, 1.

00:08:01.780 --> 00:08:04.500
It is still 2, so I actually
didn't have to cross that out.

00:08:04.500 --> 00:08:08.740
It is still going to
be 2 right over there.

00:08:08.740 --> 00:08:13.060
And so if 3 is less
than 2, do this.

00:08:13.060 --> 00:08:15.000
Well, 3 isn't less
than 2, so you're

00:08:15.000 --> 00:08:16.340
going to do the else clause.

00:08:16.340 --> 00:08:19.320
And you're just going to
break out of this while loop.

00:08:19.320 --> 00:08:21.290
And that made sense,
because you said, look,

00:08:21.290 --> 00:08:23.782
we compared 3 immediately
to the thing right

00:08:23.782 --> 00:08:24.990
before it, to the left of it.

00:08:24.990 --> 00:08:27.160
And we said, hey, 3
is in the right place.

00:08:27.160 --> 00:08:28.180
3 is greater than 2.

00:08:28.180 --> 00:08:30.017
It's not less than
2, so I'm not going

00:08:30.017 --> 00:08:31.350
to do all the shifting business.

00:08:31.350 --> 00:08:33.699
I don't have to shift 2 to
the right and 3 to the left

00:08:33.699 --> 00:08:34.990
and then look at the next item.

00:08:34.990 --> 00:08:37.600
I know that everything to the
left of 3 is already sorted.

00:08:37.600 --> 00:08:39.750
So if 3 is not less than
2, it's definitely not

00:08:39.750 --> 00:08:42.150
going to be less than
anything to the left of it.

00:08:42.150 --> 00:08:42.900
And so we're done.

00:08:42.900 --> 00:08:44.810
We leave it the way it is.

00:08:44.810 --> 00:08:46.220
And so then we break out.

00:08:46.220 --> 00:08:49.000
And then we go to the next
iteration of the for loop.

00:08:49.000 --> 00:08:51.330
So now index is going to
be the next item here.

00:08:51.330 --> 00:08:53.710
It is now going
to be equal to 3,

00:08:53.710 --> 00:08:56.960
the next item in this list
generated by this expression.

00:08:56.960 --> 00:08:59.110
So it's now going to be 3.

00:08:59.110 --> 00:09:01.940
Index is now going to be 3.

00:09:01.940 --> 00:09:07.800
Value is now going
to be 0, 1, 2, 3.

00:09:07.800 --> 00:09:11.600
Value is now going to be
this item right over here.

00:09:11.600 --> 00:09:14.040
That is going to be value,
because our index is now 3.

00:09:14.040 --> 00:09:16.065
So our value is now 2.

00:09:16.065 --> 00:09:18.622
Let me cross these guys out.

00:09:18.622 --> 00:09:20.410
Let me save some space.

00:09:20.410 --> 00:09:22.570
Value is now 2.

00:09:22.570 --> 00:09:27.120
And now i is 2.

00:09:27.120 --> 00:09:31.640
i is index minus
1, so 3 minus 1.

00:09:31.640 --> 00:09:33.070
So that is 2.

00:09:33.070 --> 00:09:35.690
So i is now going to be 2.

00:09:35.690 --> 00:09:40.870
And the object that is at the
second element of the list, 0,

00:09:40.870 --> 00:09:45.310
1, 2 is now going to be 3.

00:09:45.310 --> 00:09:46.944
And so the first
thing we do while i

00:09:46.944 --> 00:09:48.485
is greater than or
equal to 0-- well,

00:09:48.485 --> 00:09:50.151
i is clearly greater
than or equal to 0.

00:09:50.151 --> 00:09:51.460
It's 2 right now.

00:09:51.460 --> 00:09:56.910
If value-- if 2 is
less than what's

00:09:56.910 --> 00:10:00.180
in the i-th slot of list,
so 2 is less than 3,

00:10:00.180 --> 00:10:02.810
so we do perform
this right over here.

00:10:02.810 --> 00:10:08.780
And so what we do is, whatever
is at list of i plus 1.

00:10:08.780 --> 00:10:10.660
I is 2. i plus 1 is 3.

00:10:10.660 --> 00:10:12.640
So whatever is at
this slot, which

00:10:12.640 --> 00:10:15.890
is the third slot where the 2
was, replace it with whatever

00:10:15.890 --> 00:10:17.090
is to the left of it.

00:10:17.090 --> 00:10:19.180
So replace it with the 3.

00:10:19.180 --> 00:10:21.140
So we're going to
replace this with the 3.

00:10:21.140 --> 00:10:22.990
And in the next
element, take whatever

00:10:22.990 --> 00:10:30.610
was that slot to the left
where i is, and replace it

00:10:30.610 --> 00:10:31.340
with value.

00:10:34.400 --> 00:10:36.060
So then we replaced
it with value.

00:10:36.060 --> 00:10:41.210
So this thing is now
going to be a 2 again.

00:10:41.210 --> 00:10:43.170
And now we decrement i again.

00:10:43.170 --> 00:10:46.290
So now i is equal to 1.

00:10:46.290 --> 00:10:48.020
And we go through
the while loop again.

00:10:48.020 --> 00:10:50.360
I is clearly greater
than or equal to 0.

00:10:50.360 --> 00:10:51.550
It is 1.

00:10:51.550 --> 00:10:53.500
Value is still 2.

00:10:53.500 --> 00:10:55.420
Remember 2, is what
we're comparing

00:10:55.420 --> 00:10:57.830
while we go through
this while loop,

00:10:57.830 --> 00:11:00.180
but we're comparing to each
of the items to the left.

00:11:00.180 --> 00:11:04.760
If 2 is less than whatever is
at the i-th slot in the list.

00:11:04.760 --> 00:11:06.970
So the first slot
in the list is a 2.

00:11:06.970 --> 00:11:09.940
Well, 2 is equal to that,
but it's not less than that,

00:11:09.940 --> 00:11:11.490
so we don't have to
do anything more.

00:11:11.490 --> 00:11:12.350
The thing is sorted.

00:11:12.350 --> 00:11:13.910
2 is in the right place.

00:11:13.910 --> 00:11:16.580
If it's equal to the
thing to the left of it,

00:11:16.580 --> 00:11:18.190
we don't have to shift anything.

00:11:18.190 --> 00:11:20.520
And that means it's at
least equal or greater

00:11:20.520 --> 00:11:22.060
than everything to
the left of that,

00:11:22.060 --> 00:11:25.920
since everything
is sorted already.

00:11:25.920 --> 00:11:27.420
So then we're done.

00:11:27.420 --> 00:11:31.590
Since 2 is not less
than 2, we break out.

00:11:31.590 --> 00:11:33.164
And we break out
in the for loop.

00:11:33.164 --> 00:11:34.580
It says, OK, let
me see if there's

00:11:34.580 --> 00:11:37.700
anything left in this
list to apply index to.

00:11:37.700 --> 00:11:38.300
There isn't.

00:11:38.300 --> 00:11:40.060
We've used everything
in that list.

00:11:40.060 --> 00:11:41.560
And so we break out
of the for loop.

00:11:41.560 --> 00:11:42.170
And we're done.

00:11:42.170 --> 00:11:43.420
And the list should be sorted.

00:11:43.420 --> 00:11:46.270
And we see right here,
the list is sorted.

00:11:46.270 --> 00:11:54.180
Our final sorted list
is 1, 2, 2, and 3.

