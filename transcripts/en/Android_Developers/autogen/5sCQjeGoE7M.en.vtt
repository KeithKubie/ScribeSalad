WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.090

00:00:01.090 --> 00:00:04.350
To create our awesome apps,
you need to design great UIs.

00:00:04.350 --> 00:00:07.030
And to integrate these
Uis with your code

00:00:07.030 --> 00:00:09.080
and create a nice
user experience,

00:00:09.080 --> 00:00:12.070
you need to write a
lot of code, right?

00:00:12.070 --> 00:00:16.000
Hi, I'm Neto Marin, and I'm here
to introduce the Data Binding Library

00:00:16.000 --> 00:00:18.820
and help you
write less code.

00:00:18.820 --> 00:00:22.760
With Data Binding, you can move
base UI Logic code from Java

00:00:22.760 --> 00:00:24.520
to your XML layout code.

00:00:24.520 --> 00:00:27.420
So no more findViewById
or setText

00:00:27.420 --> 00:00:30.310
calls to manipulate and
update your layouts.

00:00:30.310 --> 00:00:32.240
And the good news is
that the Data Binding

00:00:32.240 --> 00:00:33.790
is a support library.

00:00:33.790 --> 00:00:36.670
So you can use it with all
Android platform versions

00:00:36.670 --> 00:00:40.450
back to Android
2.1 or API Level 7.

00:00:40.450 --> 00:00:43.389
The Data Binding Library
is already available under

00:00:43.389 --> 00:00:45.180
the support repository,
through

00:00:45.180 --> 00:00:46.640
the Android SDK Manager.

00:00:46.640 --> 00:00:49.950
And don't forget to check if
you're using Android Studio 1.3

00:00:49.950 --> 00:00:50.680
or later.

00:00:50.680 --> 00:00:53.600
For more details about Gradle
dependency, classpath and

00:00:53.600 --> 00:00:55.750
Android Studio plugin configuration,

00:00:55.750 --> 00:00:59.010
visit the Data Binding
Guide on developer.android.com

00:00:59.010 --> 00:01:02.060
and check all the steps
and configuration.

00:01:02.060 --> 00:01:06.140
Now let's see how Data Binding
can help you write less code.

00:01:06.140 --> 00:01:08.240
Imagine you want
to show some user

00:01:08.240 --> 00:01:11.310
information, like first
name, last name, and email.

00:01:11.310 --> 00:01:14.400
Your layout XML file,
without Data Binding

00:01:14.400 --> 00:01:17.240
could look like this.

00:01:17.240 --> 00:01:19.940
And then you will have to
implement a bunch of Java code

00:01:19.940 --> 00:01:22.420
to instantiate the
views, find the views,

00:01:22.420 --> 00:01:24.050
and set the correct values.

00:01:24.050 --> 00:01:26.110
But now with Data
Binding, you just

00:01:26.110 --> 00:01:28.140
have to add a
data tag declaration

00:01:28.140 --> 00:01:30.820
with the variable name and type.

00:01:30.820 --> 00:01:34.000
And for each view, when you
want the data from the object,

00:01:34.000 --> 00:01:37.070
just refer to the
corresponding attribute.

00:01:37.070 --> 00:01:39.660
All the data will be
retrieved from the data object

00:01:39.660 --> 00:01:42.250
that you declared and populated.

00:01:42.250 --> 00:01:45.110
This data object could be
a plain old Java object,

00:01:45.110 --> 00:01:47.890
a POJO for that
user, or it's also

00:01:47.890 --> 00:01:50.680
possible to use a
JavaBean object.

00:01:50.680 --> 00:01:52.190
Much easier, eh?

00:01:52.190 --> 00:01:54.830
And to bind events,
it's straightforward as well.

00:01:54.830 --> 00:01:57.300
Bind events to
handler methods directly,

00:01:57.300 --> 00:01:59.000
similar to what you
do using

00:01:59.000 --> 00:02:03.400
android: onClick when assigning
to a method in the activity.

00:02:03.400 --> 00:02:06.020
But now let's move
on a more complex UI,

00:02:06.020 --> 00:02:08.270
like this fictional news app.

00:02:08.270 --> 00:02:10.850
Notice several details, like
a different color for read

00:02:10.850 --> 00:02:14.150
and unread news or headline
colors for breaking news.

00:02:14.150 --> 00:02:17.630
This would require quite a few
lines of code to implement.

00:02:17.630 --> 00:02:21.040
And again, Data Binding can
make your life easier here.

00:02:21.040 --> 00:02:23.240
For example, here we
have the layout file

00:02:23.240 --> 00:02:26.480
for the items of the news
app, each news.

00:02:26.480 --> 00:02:29.570
And you can see how we
moved the logic of changing

00:02:29.570 --> 00:02:31.390
the CardView's
background color, to red

00:02:31.390 --> 00:02:35.870
or white, to one attribute
of the news item class.

00:02:35.870 --> 00:02:39.790
And moving the logic
from the adapter to the XML

00:02:39.790 --> 00:02:42.990
makes the adapter much
simpler, as we can see here.

00:02:42.990 --> 00:02:46.110
In this example, we just need
to create the NewsItemBinding

00:02:46.110 --> 00:02:47.780
and inflate it.

00:02:47.780 --> 00:02:50.590
And the great thing here
is that the NewItemBinding

00:02:50.590 --> 00:02:54.170
was automatically generated
by the Data Binding Library.

00:02:54.170 --> 00:02:59.000
So, for example, if you have
a layout file called news_item.xml

00:02:59.000 --> 00:03:03.360
the library will create the
NewsItemBinding automatically.

00:03:03.360 --> 00:03:05.310
And after creating
and inflating,

00:03:05.310 --> 00:03:07.860
you return this
into a ViewHolder.

00:03:07.860 --> 00:03:11.180
And on onBindingViewHolder
is the place

00:03:11.180 --> 00:03:14.070
where you state that a
specific ViewHolder is

00:03:14.070 --> 00:03:16.300
bound to a specific item.

00:03:16.300 --> 00:03:17.960
And here is a ViewHolder class.

00:03:17.960 --> 00:03:19.700
As we can see, much simpler.

00:03:19.700 --> 00:03:22.130
No more FindViewById,
no more ImageView,

00:03:22.130 --> 00:03:24.380
or TextView, or whatever.

00:03:24.380 --> 00:03:27.620
It's something you write once
and don't have to maintain.

00:03:27.620 --> 00:03:31.040
You just have to change your
item layout, if you need,

00:03:31.040 --> 00:03:33.440
and the library will
update all the stuffs.

00:03:33.440 --> 00:03:35.580
It just works.

00:03:35.580 --> 00:03:40.100
Another great benefit of using
Data Binding are the custom attributes

00:03:40.140 --> 00:03:41.730
You can define some
custom attributes,

00:03:41.730 --> 00:03:44.420
like imageURL, that
actually doesn't exist,

00:03:44.420 --> 00:03:47.240
but you can develop it using
some third-party library.

00:03:47.240 --> 00:03:50.670
Or a color filter option,
which you can do easily

00:03:50.670 --> 00:03:52.830
with a few line of codes.

00:03:52.830 --> 00:03:55.710
So after adding the custom
attributes to the XML Layout file

00:03:55.710 --> 00:04:00.360
you have to code, wherever
you want, a public static method

00:04:00.360 --> 00:04:03.090
and add the notation
@BindingAdapter

00:04:03.090 --> 00:04:06.590
to have that method, bound to
that custom attribute.

00:04:06.590 --> 00:04:08.340
And you have no more
to add listeners

00:04:08.340 --> 00:04:12.310
and all the stuff you need
to perform a specific action.

00:04:12.310 --> 00:04:14.600
You will no longer
need to do FindViewById

00:04:14.600 --> 00:04:15.990
any place in your code.

00:04:15.990 --> 00:04:20.540
For example, if you have an item
in your layout with the id mark_read,

00:04:20.540 --> 00:04:22.890
the library automatically
generates a field

00:04:22.890 --> 00:04:24.560
inside the binding class.

00:04:24.560 --> 00:04:27.700
And also, if your pojo implements
the Observable interface

00:04:27.700 --> 00:04:30.340
descends from
BasicObserver, when

00:04:30.340 --> 00:04:34.130
you call a setter on that
POJO, like this setIsRead

00:04:34.130 --> 00:04:37.040
to mark this item as
read, any UI views

00:04:37.040 --> 00:04:41.380
in your layout that rely on
that attribute will be updated.

00:04:41.380 --> 00:04:43.590
Another nice trick you
have with Data Binding

00:04:43.590 --> 00:04:46.370
is that you can use an
operators, in this case,

00:04:46.370 --> 00:04:47.450
a null check.

00:04:47.450 --> 00:04:49.680
So if the other
attribute is null, you

00:04:49.680 --> 00:04:52.420
can use any other
string you want.

00:04:52.420 --> 00:04:55.080
Check the documentation for
the handful of other operators

00:04:55.080 --> 00:04:57.220
that can simplify your code.

00:04:57.220 --> 00:05:00.450
And also, you can include
another layout file

00:05:00.450 --> 00:05:04.700
and specify an attribute bound
for you with this layout.

00:05:04.700 --> 00:05:07.880
In summary, Data Binding makes
your code shorter, simpler,

00:05:07.880 --> 00:05:09.930
and easier to maintain.

00:05:09.930 --> 00:05:12.950
Check out the Data Binding Guide
for details, configurations,

00:05:12.950 --> 00:05:15.320
and more about this new library.

00:05:15.320 --> 00:05:18.330
Looking forward to see you
make your code simpler.

00:05:18.330 --> 00:05:19.500
Bye.

00:05:19.500 --> 00:05:22.850
[MUSIC PLAYING]

00:05:22.850 --> 00:05:29.838

