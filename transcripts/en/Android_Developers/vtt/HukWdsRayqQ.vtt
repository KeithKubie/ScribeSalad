WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:02.140
ADAM CHAMPY: Hi, my
name is Adam Champy,

00:00:02.140 --> 00:00:04.940
and I'm the product lead
for the Google Cast SDK

00:00:04.940 --> 00:00:07.590
and the Cast integrations
with OEM TV partners.

00:00:07.590 --> 00:00:08.701
I'm joined here by Sascha.

00:00:08.701 --> 00:00:10.450
SASCHA PRUETER: My
name is Sascha Prueter.

00:00:10.450 --> 00:00:12.840
I'm heading up the
Android TV team,

00:00:12.840 --> 00:00:15.150
and this is not
my Twitter handle.

00:00:15.150 --> 00:00:17.890
So whoever you message,
please be nice.

00:00:21.310 --> 00:00:24.190
Also, who of you is actually
here for the session

00:00:24.190 --> 00:00:26.860
and who is here because
this is a room with shade

00:00:26.860 --> 00:00:29.750
and quite cool?

00:00:29.750 --> 00:00:30.960
No hands go up.

00:00:30.960 --> 00:00:34.200
Who is here for free devices?

00:00:34.200 --> 00:00:34.700
Very good.

00:00:34.700 --> 00:00:36.557
There are no free devices.

00:00:36.557 --> 00:00:38.140
So we're talking
with you a little bit

00:00:38.140 --> 00:00:40.011
about the living room today.

00:00:40.011 --> 00:00:43.010
And Adam will talk about Cast,
I will talk a little later

00:00:43.010 --> 00:00:43.810
about Android TV.

00:00:43.810 --> 00:00:45.099
So heading over to Adam.

00:00:45.099 --> 00:00:45.890
ADAM CHAMPY: Great.

00:00:45.890 --> 00:00:48.460
So we're going to talk about
building integrated experiences

00:00:48.460 --> 00:00:49.500
for the living room.

00:00:49.500 --> 00:00:53.507
And for many of you, you may not
think the stakes are that high.

00:00:53.507 --> 00:00:55.090
But let me take you
through a scenario

00:00:55.090 --> 00:00:56.990
that you've probably
experienced.

00:00:56.990 --> 00:01:00.430
Millions of people will go
home tonight or tomorrow

00:01:00.430 --> 00:01:02.380
and turn on the TV.

00:01:02.380 --> 00:01:04.780
And if they're
unlucky, very unlucky,

00:01:04.780 --> 00:01:08.770
they might end up watching
five to seven episodes, reruns,

00:01:08.770 --> 00:01:12.710
of possibly the worst
reality TV show there is.

00:01:12.710 --> 00:01:14.710
And what's scary about
that is that you probably

00:01:14.710 --> 00:01:17.220
have an idea of the show
you think I'm talking about

00:01:17.220 --> 00:01:20.650
or you have three to
four candidates in mind.

00:01:20.650 --> 00:01:23.620
We're talking today
about an experience that

00:01:23.620 --> 00:01:25.160
should be much
easier for consumers

00:01:25.160 --> 00:01:27.700
than turning on and
struggling to find something.

00:01:27.700 --> 00:01:29.730
We're talking today
about our vision

00:01:29.730 --> 00:01:34.100
for the living room, which
is unified by Google Cast.

00:01:34.100 --> 00:01:37.580
Google Cast is a technology
that connects the mobile phones

00:01:37.580 --> 00:01:41.260
that billions of people have
with entertainment devices.

00:01:41.260 --> 00:01:43.680
Whether they're extender
devices like Chromecast,

00:01:43.680 --> 00:01:46.170
or integrated devices
like Android TV, or we'll

00:01:46.170 --> 00:01:48.300
soon talk about Cast TV.

00:01:48.300 --> 00:01:51.340
What this does is it brings
entertainment from the smallest

00:01:51.340 --> 00:01:54.090
screens that you have onto
the most beautiful displays

00:01:54.090 --> 00:01:55.490
in your home.

00:01:55.490 --> 00:01:58.440
And sound to the best
speakers that you have.

00:01:58.440 --> 00:02:00.300
More specifically,
if this wasn't

00:02:00.300 --> 00:02:03.760
a bit confusing for
some folks, Google Cast

00:02:03.760 --> 00:02:07.070
is about the mobile experience
and taking mobile apps

00:02:07.070 --> 00:02:10.490
and extending the content
to larger screens or larger

00:02:10.490 --> 00:02:11.430
speakers.

00:02:11.430 --> 00:02:14.716
So focus in on that if
you're a mobile developer.

00:02:14.716 --> 00:02:17.720
Android TV is about taking
the full power of Android

00:02:17.720 --> 00:02:20.620
and realizing it in a TV
form factor, controlled

00:02:20.620 --> 00:02:22.852
by a D-pad remote.

00:02:22.852 --> 00:02:25.310
Sascha will take you through
a lot of that in the Android N

00:02:25.310 --> 00:02:26.351
updates in a few minutes.

00:02:29.053 --> 00:02:30.886
The goal of Cast
experience for those of you

00:02:30.886 --> 00:02:33.350
who haven't seen it
is unified by the idea

00:02:33.350 --> 00:02:36.080
of a cast button, which takes
the apps that you already

00:02:36.080 --> 00:02:40.840
know and love and adds this
extension to a large screen.

00:02:40.840 --> 00:02:43.050
So if you press this
button, it takes the video

00:02:43.050 --> 00:02:44.190
onto the screen.

00:02:44.190 --> 00:02:46.510
Or if you press this
button, it takes the music

00:02:46.510 --> 00:02:48.370
into your speakers.

00:02:48.370 --> 00:02:51.150
And millions of
people love this.

00:02:51.150 --> 00:02:53.450
What's amazing about
this too is that we've

00:02:53.450 --> 00:02:54.961
enabled thousands of apps.

00:02:54.961 --> 00:02:56.960
And if you want to see
which apps we've enabled,

00:02:56.960 --> 00:02:59.490
go to g.co/castapps.

00:02:59.490 --> 00:03:02.650
And these are the same
apps that users download

00:03:02.650 --> 00:03:06.380
and use on their mobile
devices with Cast added.

00:03:06.380 --> 00:03:09.960
So there's nothing else for
the user to do on the app-side.

00:03:09.960 --> 00:03:12.510
For everybody in this room,
that's probably enough.

00:03:12.510 --> 00:03:15.360
You could probably figure out
how to make all this experience

00:03:15.360 --> 00:03:17.330
work great, but
there's a lot of people

00:03:17.330 --> 00:03:20.480
who aren't at I/O or in
different places that

00:03:20.480 --> 00:03:23.580
look at streaming as
still being too far away.

00:03:23.580 --> 00:03:26.860
They look at it as an HDMI
port connection and saying,

00:03:26.860 --> 00:03:29.540
I don't want to plug
hardware into my device.

00:03:29.540 --> 00:03:32.910
Or they look at an
experience of input switching

00:03:32.910 --> 00:03:35.580
and say this is a
recipe for disaster.

00:03:35.580 --> 00:03:39.060
Because before I push the input
button, everything's working.

00:03:39.060 --> 00:03:40.780
And when I push
the input button,

00:03:40.780 --> 00:03:42.830
something else
happens and I probably

00:03:42.830 --> 00:03:44.830
have a one in four chance
of getting it wrong,

00:03:44.830 --> 00:03:47.530
because I have four
inputs on my TV.

00:03:47.530 --> 00:03:51.120
So we took this message to
heart and worked with a team

00:03:51.120 --> 00:03:55.752
at Vizio to launch the
first TV with Cast built in.

00:03:55.752 --> 00:03:58.330
And in particular,
this is one of them.

00:03:58.330 --> 00:04:00.510
It's a beautiful
P series display

00:04:00.510 --> 00:04:04.520
and it has 4K casting as
well as Dolby vision casting.

00:04:04.520 --> 00:04:07.480
And that's the first
integrated device to do this,

00:04:07.480 --> 00:04:08.900
and it's gorgeous.

00:04:08.900 --> 00:04:12.060
And we get to see them out
in the sandbox as well.

00:04:12.060 --> 00:04:16.510
And what we did is we made
it possible for that same SDK

00:04:16.510 --> 00:04:20.610
that developers use, that
cast, to enable the TV

00:04:20.610 --> 00:04:22.160
to switch to Cast.

00:04:22.160 --> 00:04:24.390
So as soon as you
push the Cast button,

00:04:24.390 --> 00:04:27.080
instead of having to hope that
you're on the right input,

00:04:27.080 --> 00:04:29.630
it's just a seamless
experience for the consumer.

00:04:29.630 --> 00:04:31.620
And Vizio has brought
this technology

00:04:31.620 --> 00:04:36.020
into their TVs as well as
their speakers and soundbars.

00:04:36.020 --> 00:04:38.340
So today, we're also
proud to announce

00:04:38.340 --> 00:04:40.740
the Google Cast for TV program.

00:04:40.740 --> 00:04:45.760
Extending this capability to
Toshiba, Philips, Magnavox,

00:04:45.760 --> 00:04:49.250
and Polaroid, to
take this technology

00:04:49.250 --> 00:04:52.100
to millions more consumers.

00:04:52.100 --> 00:04:53.890
What's amazing for the
developer community

00:04:53.890 --> 00:04:57.380
is that you can now reach
millions of endpoints,

00:04:57.380 --> 00:05:00.570
not just on Chromecast,
not just on Android TV,

00:05:00.570 --> 00:05:04.200
but in a class of device that
integrates Cast purely, just

00:05:04.200 --> 00:05:05.300
Cast.

00:05:05.300 --> 00:05:07.230
And what's amazing
about this it's

00:05:07.230 --> 00:05:12.120
that same cast when I talked
about in the first experience.

00:05:12.120 --> 00:05:14.280
And many of these
devices, if not all,

00:05:14.280 --> 00:05:16.620
will also have another
feature, which is the idea

00:05:16.620 --> 00:05:18.380
that they can wake on Cast.

00:05:18.380 --> 00:05:20.290
Where if you press
that cast button,

00:05:20.290 --> 00:05:24.570
the TV wakes up without the
user having to do anything.

00:05:24.570 --> 00:05:27.830
So instead of having to find the
remote control, turn on the TV,

00:05:27.830 --> 00:05:29.930
hope to get to the
right input, your one

00:05:29.930 --> 00:05:33.640
cast button away from the
content that you love.

00:05:33.640 --> 00:05:36.480
So that's the consumer journey,
and enabling more eyeballs

00:05:36.480 --> 00:05:38.747
for the developer community.

00:05:38.747 --> 00:05:40.580
But what we also are
proud to announce today

00:05:40.580 --> 00:05:45.550
is the new Google Cast SDK, and
this is our first major update

00:05:45.550 --> 00:05:46.850
in a few years.

00:05:46.850 --> 00:05:49.010
And it's based on a
lot of the feedback

00:05:49.010 --> 00:05:52.810
that we've gotten
about how Cast works.

00:05:52.810 --> 00:05:54.690
And one of the things
that you may think

00:05:54.690 --> 00:05:57.680
is-- I've explained this
very simple UX model, where

00:05:57.680 --> 00:06:00.670
you had a cast button and video
goes from a small little device

00:06:00.670 --> 00:06:02.950
to a big device.

00:06:02.950 --> 00:06:06.270
There's a lot of edge cases
and corner cases and things

00:06:06.270 --> 00:06:09.470
to think about for the
developer in that experience.

00:06:09.470 --> 00:06:11.910
And historically,
honestly, our SDK

00:06:11.910 --> 00:06:14.620
made you think about
a lot of those things.

00:06:14.620 --> 00:06:17.260
What we're looking at in our
new SDK that will come out

00:06:17.260 --> 00:06:20.160
in the next few weeks
is us taking the burden

00:06:20.160 --> 00:06:23.810
on implementing every single
one of the Cast UX guidelines

00:06:23.810 --> 00:06:26.710
which are these corner
cases, and manage these best

00:06:26.710 --> 00:06:28.290
practices.

00:06:28.290 --> 00:06:31.270
Additionally, we think we can
really reduce development time

00:06:31.270 --> 00:06:33.500
by not only offering
that, but also offering

00:06:33.500 --> 00:06:36.580
the right abstraction between
what you're developing

00:06:36.580 --> 00:06:37.935
and what the Cast SDK provides.

00:06:37.935 --> 00:06:39.950
And I'll take you through
that a little bit.

00:06:39.950 --> 00:06:43.360
For way more detail on all of
this, come to our talk at 9

00:06:43.360 --> 00:06:45.685
AM on Friday, and if
you don't get up for 9

00:06:45.685 --> 00:06:49.120
AM's on Fridays, that talk
will also be recorded.

00:06:49.120 --> 00:06:52.870
So the Cast lifecycle
to go into a little bit

00:06:52.870 --> 00:06:56.761
if you don't come on Friday,
is about four major steps,

00:06:56.761 --> 00:06:59.010
three of which are done
almost all the time and one is

00:06:59.010 --> 00:07:00.280
kind of optional.

00:07:00.280 --> 00:07:01.790
The first one is
discovery, trying

00:07:01.790 --> 00:07:05.760
to figure out do I have a
TV, do I have a Chromecast,

00:07:05.760 --> 00:07:08.897
do I have an Android
TV on my network.

00:07:08.897 --> 00:07:11.480
And that's trying to figure out
again how to discover devices.

00:07:11.480 --> 00:07:13.820
The next step is actually
connecting to it,

00:07:13.820 --> 00:07:16.570
launching what's
called a receiver app.

00:07:16.570 --> 00:07:18.450
The third step is
then controlling,

00:07:18.450 --> 00:07:21.650
because in the Cast model,
all video and all streaming

00:07:21.650 --> 00:07:24.670
is going directly from
the cloud to the device

00:07:24.670 --> 00:07:28.010
and you send small
messages back and forth.

00:07:28.010 --> 00:07:30.120
What this historically
has been is kind of tricky

00:07:30.120 --> 00:07:31.952
because if it all
goes well, great.

00:07:31.952 --> 00:07:33.910
But if not, there's all
this awesome complexity

00:07:33.910 --> 00:07:36.340
in reconnect, where
if you lose Wi-Fi,

00:07:36.340 --> 00:07:38.330
if the user leaves
and comes back,

00:07:38.330 --> 00:07:40.114
or you change different
Wi-Fi networks.

00:07:40.114 --> 00:07:41.530
Some of these steps
could actually

00:07:41.530 --> 00:07:46.110
be pretty complex for
the end user experience.

00:07:46.110 --> 00:07:48.460
We also made it complex
for the developer.

00:07:48.460 --> 00:07:51.320
We made you become aware
of every single one

00:07:51.320 --> 00:07:54.280
of the steps of this process.

00:07:54.280 --> 00:07:57.960
So our lifecycle became
your app lifecycle.

00:07:57.960 --> 00:07:59.940
And at first, it's
pretty simple and you

00:07:59.940 --> 00:08:03.130
may have adopted the Cast SDK
and copied some boilerplate

00:08:03.130 --> 00:08:04.910
code into your apps.

00:08:04.910 --> 00:08:07.370
And the first time you
do that, it's actually

00:08:07.370 --> 00:08:08.700
pretty straightforward.

00:08:08.700 --> 00:08:12.620
But if we make any
changes or any updates,

00:08:12.620 --> 00:08:16.080
this became very, very
tough for you to manage both

00:08:16.080 --> 00:08:17.480
from where do I
make the changes,

00:08:17.480 --> 00:08:20.200
and also where the externalities
in making every single one

00:08:20.200 --> 00:08:22.160
of those choices.

00:08:22.160 --> 00:08:23.820
So what we've done
in this new SDK

00:08:23.820 --> 00:08:26.910
is implemented a much
better abstraction,

00:08:26.910 --> 00:08:30.820
where Cast handles both the
state transitions as well

00:08:30.820 --> 00:08:35.409
as provides default UX for this
very unique type of interaction

00:08:35.409 --> 00:08:38.760
model between a phone
and a larger device.

00:08:38.760 --> 00:08:42.350
More specifically, we're
offering two major areas

00:08:42.350 --> 00:08:44.750
against state management
and user experience.

00:08:44.750 --> 00:08:47.760
In state management, you'll now
find something called the Cast

00:08:47.760 --> 00:08:50.570
Context, which is
a singleton that

00:08:50.570 --> 00:08:54.350
manages all phases of
state, from discovery

00:08:54.350 --> 00:08:57.060
all the way through connection
and launching of the receiver

00:08:57.060 --> 00:08:57.740
app.

00:08:57.740 --> 00:09:00.306
We also offer an optional
reconnection service

00:09:00.306 --> 00:09:01.930
for those of you who
don't want to deal

00:09:01.930 --> 00:09:04.750
with trying to figure
out if there's still

00:09:04.750 --> 00:09:07.474
a Chromecast or still a
Cast TV on the network.

00:09:07.474 --> 00:09:09.140
And this is optional
because some people

00:09:09.140 --> 00:09:11.350
have innovated quite a
bit in the space already.

00:09:11.350 --> 00:09:14.010
So you can choose
to use it or not.

00:09:14.010 --> 00:09:16.650
On the UX side, we
now provide as soon

00:09:16.650 --> 00:09:19.050
as the user hits
the Cast button, all

00:09:19.050 --> 00:09:23.390
of the different steps of
Cast beyond that press,

00:09:23.390 --> 00:09:25.806
so that you don't have
to worry about callbacks

00:09:25.806 --> 00:09:28.430
and trying to figure out what's
the state of whether a user has

00:09:28.430 --> 00:09:31.000
gone in or backed
out of that flow.

00:09:31.000 --> 00:09:33.970
We've also for
optional use, added

00:09:33.970 --> 00:09:35.800
what we call an
expanded controller

00:09:35.800 --> 00:09:39.254
and a mini controller, which
are part of our UX guidelines

00:09:39.254 --> 00:09:40.670
alongside our
philosophy of saying

00:09:40.670 --> 00:09:44.920
if it's in our UX guidelines,
our SDK should provide it.

00:09:44.920 --> 00:09:46.990
And we'll see that in
the next few slides.

00:09:46.990 --> 00:09:50.370
So the new Cast button-- and
you're seeing Android and iOS,

00:09:50.370 --> 00:09:53.820
the new Cast button is
fully provided by the SDK.

00:09:53.820 --> 00:09:55.320
And in Friday's
talk, we'll actually

00:09:55.320 --> 00:09:57.220
go through adding
the Cast button

00:09:57.220 --> 00:10:00.460
and getting all the way
through casting media.

00:10:00.460 --> 00:10:04.380
The SDK in fully now
supports drawing and managing

00:10:04.380 --> 00:10:06.910
all routes, including the
top level of knowing what

00:10:06.910 --> 00:10:09.190
to do with the
background, and then

00:10:09.190 --> 00:10:11.830
the next level in B of
actually describing what action

00:10:11.830 --> 00:10:13.080
the user is about to take.

00:10:13.080 --> 00:10:16.590
C, choosing essentially
a particular device,

00:10:16.590 --> 00:10:18.090
and D saying well,
maybe something's

00:10:18.090 --> 00:10:19.780
already going on in that device.

00:10:19.780 --> 00:10:23.079
You don't have to worry about
any of those states at all.

00:10:23.079 --> 00:10:24.620
You essentially have
a factory method

00:10:24.620 --> 00:10:26.760
to say what color should
the cast button be,

00:10:26.760 --> 00:10:28.670
and you're done.

00:10:28.670 --> 00:10:30.990
The next part that we've
done is we've created again

00:10:30.990 --> 00:10:33.030
these customizable controllers.

00:10:33.030 --> 00:10:34.700
So at the bottom of
the screen, you'll

00:10:34.700 --> 00:10:39.489
see a mini controller, which is
a persistent play/pause button,

00:10:39.489 --> 00:10:41.280
but you can actually
customize which button

00:10:41.280 --> 00:10:43.250
is most useful for your app.

00:10:43.250 --> 00:10:45.580
So that this allows
the user to always

00:10:45.580 --> 00:10:48.230
be in control of the
streaming experience.

00:10:48.230 --> 00:10:50.220
So if you're live app
or you're a music app

00:10:50.220 --> 00:10:53.000
and you really care about
skip forward or thumbs up

00:10:53.000 --> 00:10:55.490
or thumbs down or
a heart or a star,

00:10:55.490 --> 00:10:58.390
and that's the most important
button for your application,

00:10:58.390 --> 00:11:00.290
you can put that in
the mini controller.

00:11:00.290 --> 00:11:02.650
We also offer an optional
expanding controller,

00:11:02.650 --> 00:11:05.860
which takes the best practices
of a full screen control

00:11:05.860 --> 00:11:07.560
and allows us
similarly to control

00:11:07.560 --> 00:11:09.260
the buttons that are present.

00:11:09.260 --> 00:11:11.230
Again, both of these
screens are optional

00:11:11.230 --> 00:11:15.390
and in both Android and iOS, we
can wire our state transitions

00:11:15.390 --> 00:11:16.980
to your controllers
if you've already

00:11:16.980 --> 00:11:19.030
invested a significant
amount of time

00:11:19.030 --> 00:11:23.300
in figuring out the best
UX model for your users.

00:11:23.300 --> 00:11:26.080
Across the board-- and I'll
use Android as an example,

00:11:26.080 --> 00:11:28.170
we also provide the mini
controller, the expanding

00:11:28.170 --> 00:11:30.870
controller, and lock
screen controls.

00:11:30.870 --> 00:11:33.680
And these lock screen controls
also work with Android Wear.

00:11:33.680 --> 00:11:35.830
So if you're just
literally a couch potato

00:11:35.830 --> 00:11:38.280
and can't even
pick up the remote,

00:11:38.280 --> 00:11:43.470
you can hit play and
pause on your watch.

00:11:43.470 --> 00:11:46.040
This one last screen
is for those of you who

00:11:46.040 --> 00:11:49.570
are trying to introduce the fact
that Cast is now in your app,

00:11:49.570 --> 00:11:53.360
or have recently changed
where Cast is slightly located

00:11:53.360 --> 00:11:58.050
or aspects of that, we offer
Android compliant notification

00:11:58.050 --> 00:11:59.346
that says where Cast is.

00:11:59.346 --> 00:12:00.720
and at first you
might think this

00:12:00.720 --> 00:12:04.609
is pretty self-serving for the
Cast team to say cast more.

00:12:04.609 --> 00:12:06.900
We would only do this, though,
if it actually benefited

00:12:06.900 --> 00:12:07.910
the developer community.

00:12:07.910 --> 00:12:09.701
And what we found is
in the apps that we've

00:12:09.701 --> 00:12:12.820
tested this concept with, it
drives longer session times

00:12:12.820 --> 00:12:16.390
as well as longer adherence
to the app itself.

00:12:16.390 --> 00:12:19.460
So we offer this as an
optional behavior pattern

00:12:19.460 --> 00:12:21.760
that you can call for
both Android and iOS.

00:12:26.780 --> 00:12:29.060
In terms of timing, we're
going to be launching

00:12:29.060 --> 00:12:30.920
this over the next few weeks.

00:12:30.920 --> 00:12:33.550
The apps that you see
are full demo apps,

00:12:33.550 --> 00:12:36.630
where you're going to be able
to dive into the code itself.

00:12:36.630 --> 00:12:40.012
So by about mid June,
you'll see the core SDK.

00:12:40.012 --> 00:12:41.470
In the middle of
the summer, you'll

00:12:41.470 --> 00:12:44.200
have access to the fully
customizable controllers.

00:12:44.200 --> 00:12:46.470
We're launching iOS
and Android first,

00:12:46.470 --> 00:12:49.710
then we'll add and layer in
the capabilities for the web

00:12:49.710 --> 00:12:52.180
sender, as well as a
new web receiver that's

00:12:52.180 --> 00:12:54.790
compatible with all of this.

00:12:54.790 --> 00:13:01.360
So with that, all of this
is enabled by the Cast app.

00:13:01.360 --> 00:13:04.300
And I'll shift to here.

00:13:04.300 --> 00:13:09.730
What's great about the Cast
app is that not only can you

00:13:09.730 --> 00:13:13.840
discover content, but you can
control all of your devices.

00:13:13.840 --> 00:13:18.372
And you can see I have a Cast
TV, I also have a Chromecast.

00:13:18.372 --> 00:13:19.830
And the first device
that showed up

00:13:19.830 --> 00:13:22.540
was a Nexus player,
an Android TV.

00:13:22.540 --> 00:13:24.040
And to talk much
more about Android,

00:13:24.040 --> 00:13:25.816
I'll turn it over to Sascha.

00:13:27.955 --> 00:13:29.038
SASCHA PRUETER: Thank you.

00:13:33.630 --> 00:13:35.280
Thanks, Adam.

00:13:35.280 --> 00:13:37.430
So now talking a little
bit about Android TV.

00:13:37.430 --> 00:13:40.230
I think this shows how
Google sees the living

00:13:40.230 --> 00:13:41.930
room as one big ecosystem.

00:13:41.930 --> 00:13:45.879
We bring in other platforms
into the Cast ecosystem.

00:13:45.879 --> 00:13:47.670
We are actually making
sure that Android TV

00:13:47.670 --> 00:13:49.820
is a prime Cast endpoint.

00:13:49.820 --> 00:13:53.980
We're actually spending a lot of
time making sure it really is.

00:13:53.980 --> 00:13:59.520
So one of the things
Adam already touched on

00:13:59.520 --> 00:14:06.630
is with Cast being a very
mobile-centric approach

00:14:06.630 --> 00:14:09.990
on getting the consumer
to the content on the TV,

00:14:09.990 --> 00:14:14.010
with Android TV traditionally
being more of remote control

00:14:14.010 --> 00:14:15.520
driven, like a
Leanback experience.

00:14:15.520 --> 00:14:17.200
You sit back on the
couch, you just grab

00:14:17.200 --> 00:14:19.910
the remote control
from the table,

00:14:19.910 --> 00:14:21.540
and start playing content.

00:14:21.540 --> 00:14:24.320
But also with Cast
built in, we see that

00:14:24.320 --> 00:14:26.760
oftentimes in
families for example,

00:14:26.760 --> 00:14:31.360
that the kids like to just Cast
the content from their iPad

00:14:31.360 --> 00:14:34.030
or their Android phone
to the Android TV device

00:14:34.030 --> 00:14:37.607
while the parents might like
to use the remote control.

00:14:37.607 --> 00:14:39.190
And so the nice thing
about Android TV

00:14:39.190 --> 00:14:41.240
is combining the
different approaches

00:14:41.240 --> 00:14:44.370
to interact with
the TV, and also

00:14:44.370 --> 00:14:48.530
give UX developers the power
to create rich new first grade

00:14:48.530 --> 00:14:52.740
experiences on that TV device.

00:14:52.740 --> 00:14:54.900
And one thing I
like to highlight,

00:14:54.900 --> 00:14:58.680
and I won't spend too much
time on these marketing slides.

00:14:58.680 --> 00:15:00.470
But one thing I really
like to highlight

00:15:00.470 --> 00:15:02.990
is Android TV is
not something for TV

00:15:02.990 --> 00:15:06.470
built on the outside of
Android bolted on top.

00:15:06.470 --> 00:15:10.240
It really is extending the
Android the core framework

00:15:10.240 --> 00:15:12.990
to make TV a first
class citizen.

00:15:12.990 --> 00:15:16.380
That is important, because only
that way, you as a developer

00:15:16.380 --> 00:15:21.160
have the guarantee that
Android API will always

00:15:21.160 --> 00:15:27.020
be there for you and
serve TV content always.

00:15:27.020 --> 00:15:31.760
So your app is not being
broken by an Android update.

00:15:31.760 --> 00:15:33.580
No, with every new
Android version,

00:15:33.580 --> 00:15:35.130
you actually got new features.

00:15:38.240 --> 00:15:42.962
For the people who saw this slot
on the schedule and thought,

00:15:42.962 --> 00:15:45.170
I need to get out of the
sun so I will sit down here,

00:15:45.170 --> 00:15:47.870
or they were speculating
on free devices, just

00:15:47.870 --> 00:15:48.980
a super quick summary.

00:15:48.980 --> 00:15:50.770
What is Android TV actually?

00:15:50.770 --> 00:15:53.816
So it's really a TV platform
like Android has always

00:15:53.816 --> 00:15:54.940
been a platform for mobile.

00:15:54.940 --> 00:15:58.970
Android TV is the platform
for TV devices, which

00:15:58.970 --> 00:16:01.790
you can interact with
as a developer with all

00:16:01.790 --> 00:16:05.170
the standard tools you
know from developing

00:16:05.170 --> 00:16:06.960
for Android on mobile.

00:16:06.960 --> 00:16:10.100
Same SDK, the same
developer tools, and you

00:16:10.100 --> 00:16:15.380
can enable a bunch of different
device classes on Android TV.

00:16:15.380 --> 00:16:19.920
Smart TVs obviously, with
Android TV right built in,

00:16:19.920 --> 00:16:22.350
we see a lot of success
internationally with pay TV

00:16:22.350 --> 00:16:23.090
set-top boxes.

00:16:23.090 --> 00:16:26.790
So cable or satellite,
live TV providers

00:16:26.790 --> 00:16:30.150
bringing their set-top box
to your running Android TV.

00:16:30.150 --> 00:16:32.760
And so you basically can
get your apps on there,

00:16:32.760 --> 00:16:36.270
but you also have all your cable
or satellite channel content.

00:16:36.270 --> 00:16:40.380
And also, the other category of
course, streaming devices, game

00:16:40.380 --> 00:16:43.210
consoles, things like
the NVIDIA Shield

00:16:43.210 --> 00:16:45.370
for example in the
marker right now.

00:16:45.370 --> 00:16:49.500
These are then also great
devices where consumers have

00:16:49.500 --> 00:16:51.710
apps, games available to them.

00:16:51.710 --> 00:16:53.485
And it's all on
the same platform.

00:16:56.820 --> 00:16:59.950
So talking a little bit what
happened in the last year

00:16:59.950 --> 00:17:02.340
also with Android TV.

00:17:02.340 --> 00:17:03.460
The ecosystem is growing.

00:17:03.460 --> 00:17:07.994
We have more and more
partners coming to Android TV,

00:17:07.994 --> 00:17:09.410
and I think it's
a very good story

00:17:09.410 --> 00:17:11.910
to see partners who
actually already launched

00:17:11.910 --> 00:17:15.210
in the first year on
Android TV, now recommitting

00:17:15.210 --> 00:17:18.550
new, and actually extending
their lineup of Android TV

00:17:18.550 --> 00:17:20.240
models for this year.

00:17:20.240 --> 00:17:23.849
So talking about Sony, Sharp,
Philips actually bringing

00:17:23.849 --> 00:17:25.310
new models to the market.

00:17:25.310 --> 00:17:29.470
But also, it's great to
see new rivals especially

00:17:29.470 --> 00:17:33.430
in new regions like TCL,
Vestel, RCA, or Bayco,

00:17:33.430 --> 00:17:38.320
launching devices on Android
TV over the coming weeks

00:17:38.320 --> 00:17:40.950
and months.

00:17:40.950 --> 00:17:45.120
And we also are quite happy
to welcome another new partner

00:17:45.120 --> 00:17:47.590
on the Android TV platform.

00:17:47.590 --> 00:17:51.340
You see that orange
logo there on the right.

00:17:51.340 --> 00:17:54.130
We are actually really
excited to announce

00:17:54.130 --> 00:17:56.410
that a new partner
for Android TV

00:17:56.410 --> 00:17:59.640
is Xiaomi, with bringing
their first Android

00:17:59.640 --> 00:18:03.200
device in the US on Android TV.

00:18:03.200 --> 00:18:07.090
So Xiaomi will soon be launching
the Mi Box here in the US,

00:18:07.090 --> 00:18:09.540
and it's the first
Android TV product,

00:18:09.540 --> 00:18:13.985
and it's a very powerful device.

00:18:13.985 --> 00:18:17.420
It's 4K capable, HDR capable.

00:18:17.420 --> 00:18:20.390
You get all the high
quality content from 4K,

00:18:20.390 --> 00:18:24.520
HDR enabled content from
YouTube, Netflix, and so on.

00:18:24.520 --> 00:18:27.280
It has all these capabilities.

00:18:27.280 --> 00:18:30.880
Comes with a nice sleek remote
control that is voice-enabled,

00:18:30.880 --> 00:18:32.075
a Bluetooth remote control.

00:18:36.770 --> 00:18:40.780
They will also ship as an
optional accessory a game pad,

00:18:40.780 --> 00:18:47.090
so you can enjoy Android TV
games on your Mi Box device.

00:18:47.090 --> 00:18:53.140
If you want to find out more
about this, starting tomorrow

00:18:53.140 --> 00:18:56.610
at 12:30, we have some
people from Xiaomi over here.

00:18:56.610 --> 00:18:59.580
So starting at 12:30 tomorrow,
Hugo Barra from Xiaomi

00:18:59.580 --> 00:19:02.960
will be in the Android
TV sandbox over there.

00:19:02.960 --> 00:19:06.760
And you can try out the device
in the Android TV sandbox,

00:19:06.760 --> 00:19:08.290
play around with it.

00:19:08.290 --> 00:19:10.430
Hugo will talk about the device.

00:19:10.430 --> 00:19:12.220
You might have to
take a selfie with him

00:19:12.220 --> 00:19:14.832
if you want to see the
device, but that's up to you.

00:19:18.060 --> 00:19:21.170
Moving on from devices and
talking a little bit more

00:19:21.170 --> 00:19:23.340
about content.

00:19:23.340 --> 00:19:25.900
Because let's face it, in
the end on the TV device,

00:19:25.900 --> 00:19:28.180
you want to have content.

00:19:28.180 --> 00:19:30.750
We're really happy how the
Play store on Android TV

00:19:30.750 --> 00:19:33.120
has grown over the last year.

00:19:33.120 --> 00:19:35.930
We have lots and
lots of new apps

00:19:35.930 --> 00:19:38.920
and content, the
games on the platform.

00:19:38.920 --> 00:19:40.750
And over the coming
weeks, we actually

00:19:40.750 --> 00:19:42.250
see a lot of new arrivals.

00:19:42.250 --> 00:19:45.170
So we're really
happy to get ESPN

00:19:45.170 --> 00:19:46.950
with a native app on Android TV.

00:19:46.950 --> 00:19:53.160
We have additions like CNN, MTV,
Disney, Comedy Central, Crunchy

00:19:53.160 --> 00:19:57.050
Roll, that will all launch apps
on Android TV over the coming

00:19:57.050 --> 00:20:01.090
weeks, or actually some
of them even this week.

00:20:01.090 --> 00:20:04.300
Also, more international content
was a very important focus

00:20:04.300 --> 00:20:04.800
for us.

00:20:04.800 --> 00:20:08.380
So we're really happy that for
example, Spotify is launching

00:20:08.380 --> 00:20:10.470
their app on Android TV.

00:20:10.470 --> 00:20:11.820
We have Deezer and so on.

00:20:11.820 --> 00:20:14.020
So really the
ecosystem is really

00:20:14.020 --> 00:20:15.660
growing also on
the content side,

00:20:15.660 --> 00:20:17.195
and we are really
happy about that.

00:20:19.810 --> 00:20:23.266
So you already heard
from rockstar Dave

00:20:23.266 --> 00:20:24.890
this morning, a little
bit about what's

00:20:24.890 --> 00:20:29.220
new with Android N.
And he showed already

00:20:29.220 --> 00:20:32.390
one new feature in the keynote,
but I want to spend some time

00:20:32.390 --> 00:20:38.830
talk about what are the new TV
related features in Android N.

00:20:38.830 --> 00:20:43.030
So a big aspect for us was
when looking at Android N,

00:20:43.030 --> 00:20:45.950
especially from a consumer
perspective was we

00:20:45.950 --> 00:20:48.920
thought it was a little
bit too easy on Android TV

00:20:48.920 --> 00:20:50.690
to get disconnected
from your content.

00:20:50.690 --> 00:20:54.340
So if you're watching
something and you

00:20:54.340 --> 00:20:56.150
have the video full
screen, if you just

00:20:56.150 --> 00:20:58.060
wanted to look up
something, maybe look up

00:20:58.060 --> 00:20:59.890
for some of the
content or look up

00:20:59.890 --> 00:21:04.504
what other recommendations
you might have,

00:21:04.504 --> 00:21:06.420
you got immediately
disconnected from content.

00:21:06.420 --> 00:21:08.730
And especially if you are a
little bit of a power user

00:21:08.730 --> 00:21:10.200
and you're jumping
very frequently

00:21:10.200 --> 00:21:11.880
between different
kinds of content apps,

00:21:11.880 --> 00:21:18.895
for example live TV and Netflix,
or in between YouTube and Hulu,

00:21:18.895 --> 00:21:20.520
the system didn't
handle that too well.

00:21:20.520 --> 00:21:22.310
So one of the things
we did was actually

00:21:22.310 --> 00:21:24.890
introducing the
reasons as you know it

00:21:24.890 --> 00:21:28.700
from mobile in a very remote
controlled friendly way.

00:21:28.700 --> 00:21:31.370
So to see how that looks like,
let's take a look at the video.

00:21:35.760 --> 00:21:37.710
So you know the typical
Android TV, Leanback

00:21:37.710 --> 00:21:40.700
interface with easy
to store content.

00:21:40.700 --> 00:21:43.700
And if you are jumping a
lot between different apps,

00:21:43.700 --> 00:21:45.200
you're looking for
a YouTube snippet

00:21:45.200 --> 00:21:49.440
here and then jumping back
to live TV, looking for apps,

00:21:49.440 --> 00:21:51.670
recent allows you to
bring up all your apps

00:21:51.670 --> 00:21:54.829
you have recently used, scroll
it easy with a remote control.

00:21:54.829 --> 00:21:56.370
If you don't like
something in there,

00:21:56.370 --> 00:22:00.130
you can also just quickly
dismiss it and then

00:22:00.130 --> 00:22:02.130
jump to the app
where you actually

00:22:02.130 --> 00:22:03.580
wanted to watch the content.

00:22:03.580 --> 00:22:04.470
So it's very easy.

00:22:04.470 --> 00:22:06.760
We spent a lot of time
thinking about what's

00:22:06.760 --> 00:22:09.840
the right interaction model if
you just have a remote control.

00:22:09.840 --> 00:22:11.800
You don't want any
special buttons,

00:22:11.800 --> 00:22:15.300
you don't want anything that
is very complicated to use.

00:22:15.300 --> 00:22:20.180
And so we think we got
to a good solution here,

00:22:20.180 --> 00:22:23.610
and it will be available on
every Android TV and device.

00:22:27.500 --> 00:22:31.780
Another topic, also
very much related

00:22:31.780 --> 00:22:35.570
to what I said earlier
about losing contact

00:22:35.570 --> 00:22:38.100
with the content,
or actually for you

00:22:38.100 --> 00:22:39.900
as an app developer
or content provider,

00:22:39.900 --> 00:22:45.600
losing contact to the user
the moment he or she decides

00:22:45.600 --> 00:22:47.960
they want to look up something.

00:22:47.960 --> 00:22:49.700
One of the things we
wanted to invest in

00:22:49.700 --> 00:22:54.260
was also having multiple
content sources at the same time

00:22:54.260 --> 00:22:55.320
visible on the screen.

00:22:55.320 --> 00:22:57.492
So I have picture
in picture mode

00:22:57.492 --> 00:22:58.950
where you can
actually while you're

00:22:58.950 --> 00:23:01.400
browsing for new content,
still be connected

00:23:01.400 --> 00:23:04.300
to what you're watching.

00:23:04.300 --> 00:23:07.276
So to see how that looks
like, let's start this video.

00:23:13.630 --> 00:23:15.190
That's great.

00:23:15.190 --> 00:23:18.410
So we exported all
our demos into videos,

00:23:18.410 --> 00:23:19.950
because demos always fail.

00:23:25.170 --> 00:23:30.080
Yeah, next year, the
YouTube offline mode.

00:23:30.080 --> 00:23:34.024
So as an example,
you're watching live TV.

00:23:34.024 --> 00:23:35.940
You hear something that's
interesting for you.

00:23:35.940 --> 00:23:38.180
For example, in
this, it's a report

00:23:38.180 --> 00:23:42.570
about a game that was
just released on Android.

00:23:42.570 --> 00:23:44.040
You think, oh
that's interesting.

00:23:44.040 --> 00:23:46.840
Why don't I see if
I can find that?

00:23:46.840 --> 00:23:48.360
And you bring up Search.

00:23:48.360 --> 00:23:52.244
You search with Voice Search
for "Pac-Man," and you see oh,

00:23:52.244 --> 00:23:54.660
actually I can install that
and play that on my Android TV

00:23:54.660 --> 00:23:55.190
device.

00:23:55.190 --> 00:23:57.520
But all the time,
content is still ongoing.

00:23:57.520 --> 00:23:59.860
You're not disconnected
from what you're watching,

00:23:59.860 --> 00:24:02.900
and we think that's a
very important experience,

00:24:02.900 --> 00:24:06.520
especially with more and more
content coming to the platform

00:24:06.520 --> 00:24:07.650
and be available to you.

00:24:12.290 --> 00:24:16.360
So what we allowed you
as the developer to do

00:24:16.360 --> 00:24:19.980
is basically enable
picture-in-picture

00:24:19.980 --> 00:24:23.090
for your application.

00:24:23.090 --> 00:24:27.300
You can basically pin the
video into a specific section.

00:24:27.300 --> 00:24:31.310
You can add a special
button to the media

00:24:31.310 --> 00:24:36.570
controls in the control
bar, if you choose to do so,

00:24:36.570 --> 00:24:38.290
which can easily
switch to PIP mode

00:24:38.290 --> 00:24:41.760
for devices that do not have
a dedicated picture-in-picture

00:24:41.760 --> 00:24:42.460
button.

00:24:42.460 --> 00:24:44.730
There are a bunch of
devices like Smart TVs

00:24:44.730 --> 00:24:47.920
that already have a
picture-in-picture button,

00:24:47.920 --> 00:24:49.470
but we wanted to
design an interface

00:24:49.470 --> 00:24:51.380
that with every D-pad
remote controller,

00:24:51.380 --> 00:24:54.530
you can enable this experience.

00:24:54.530 --> 00:24:58.710
And you can really easily
enable picture-in-picture mode

00:24:58.710 --> 00:25:02.060
for your app by
basically just adding

00:25:02.060 --> 00:25:06.820
this capability to
your app manifest.

00:25:06.820 --> 00:25:09.310
There's an activity on
picture-in-picture mode change.

00:25:09.310 --> 00:25:11.935
You basically just implement
that and you're good to go.

00:25:16.030 --> 00:25:19.970
Also, one thing that we have
driven from the beginning

00:25:19.970 --> 00:25:24.340
is traditional TV functionality.

00:25:24.340 --> 00:25:27.280
I know we all like
apps and we like games

00:25:27.280 --> 00:25:30.240
and like to have as many
apps possible on your TV.

00:25:30.240 --> 00:25:34.230
But still, a lot of content
consumption in the house

00:25:34.230 --> 00:25:35.470
is traditional TV.

00:25:35.470 --> 00:25:36.930
So from the
beginning, Android TV,

00:25:36.930 --> 00:25:39.500
since Android L
implemented something

00:25:39.500 --> 00:25:40.750
called the TV input framework.

00:25:40.750 --> 00:25:45.340
Which handles things like
HDMI input switching,

00:25:45.340 --> 00:25:50.770
like physical cable
tuner control.

00:25:50.770 --> 00:25:54.530
And also apps can expose
channels via this interface.

00:25:54.530 --> 00:25:57.960
And in L, it was just
simple channel switching,

00:25:57.960 --> 00:26:00.230
channel metadata,
program guides.

00:26:00.230 --> 00:26:02.640
We extended that in Android
N with adding time shift

00:26:02.640 --> 00:26:03.350
capabilities.

00:26:03.350 --> 00:26:05.710
So if you bring your
content into a live channel,

00:26:05.710 --> 00:26:08.460
you can take advantage
of time shifting.

00:26:08.460 --> 00:26:11.400
Now in Android N, we are also
adding recording capabilities.

00:26:11.400 --> 00:26:15.050
So you as a content provider
with your channel input

00:26:15.050 --> 00:26:19.260
can actually offer easy
recording capabilities

00:26:19.260 --> 00:26:25.030
and expose those to the user,
like you know it from any DVR.

00:26:25.030 --> 00:26:32.510
So to see how that looks like,
we take a look at this video,

00:26:32.510 --> 00:26:35.000
So this is free-to-air antenna.

00:26:35.000 --> 00:26:37.510
This is like some device
with an antenna tuner.

00:26:37.510 --> 00:26:39.310
You bring up the guide,
you know all that.

00:26:39.310 --> 00:26:42.410
By the way, this
is engineering UX.

00:26:42.410 --> 00:26:46.420
I had to fight a lot of
flights to actually show this.

00:26:46.420 --> 00:26:50.600
And fighting fights mean I
didn't ask our UX person.

00:26:50.600 --> 00:26:53.007
So this is not the final
version that we'll launch,

00:26:53.007 --> 00:26:55.090
but we will provide an
update to the live channels

00:26:55.090 --> 00:26:56.310
app in the Play store.

00:26:56.310 --> 00:26:57.970
And you can see all
the standard things

00:26:57.970 --> 00:27:00.380
like recording management,
schedule management.

00:27:00.380 --> 00:27:04.700
You can delete recordings,
you can schedule recordings,

00:27:04.700 --> 00:27:08.910
just as you know it
any traditional DVR.

00:27:08.910 --> 00:27:10.480
And as the content
provider, you can

00:27:10.480 --> 00:27:13.870
choose to opt in and
provide this experience.

00:27:13.870 --> 00:27:18.960
This here is an example of
how also subfeatures like fast

00:27:18.960 --> 00:27:20.870
forward, rewind obviously work.

00:27:20.870 --> 00:27:25.630
We have plug-ins for that
in our media controls.

00:27:25.630 --> 00:27:29.140
And so very straightforward,
and you can try it out

00:27:29.140 --> 00:27:31.660
as part of the
Android N SDK preview.

00:27:39.180 --> 00:27:43.440
As already mentioned, we
provide a standard set

00:27:43.440 --> 00:27:48.430
of features, a schedule,
start/stop recording, listing

00:27:48.430 --> 00:27:51.540
recordings including metadata.

00:27:51.540 --> 00:27:53.110
It can be managed
through TV app.

00:27:53.110 --> 00:27:55.410
We, Google, we
provide one TV app

00:27:55.410 --> 00:27:58.370
which is for example, on NVIDIA
Shield, Nexus player, and so

00:27:58.370 --> 00:28:00.570
on, which is the
live channels app.

00:28:00.570 --> 00:28:03.690
Some TV OEMs provide
their own implementation,

00:28:03.690 --> 00:28:06.990
but they all support
the TV input framework.

00:28:06.990 --> 00:28:09.290
And you can basically
as a developer,

00:28:09.290 --> 00:28:11.610
if you want to bring
content into live channels

00:28:11.610 --> 00:28:13.400
that you want to
make recordable,

00:28:13.400 --> 00:28:16.400
you can add this by implementing
the new recording session

00:28:16.400 --> 00:28:17.220
class.

00:28:17.220 --> 00:28:22.080
It's described as part of
the end developer preview SDK

00:28:22.080 --> 00:28:23.370
documentation.

00:28:23.370 --> 00:28:26.730
Also, one of the things
we will demo it with

00:28:26.730 --> 00:28:32.510
is we will soon provide
support for external USB tuner

00:28:32.510 --> 00:28:34.820
as an open source
sample, you can basically

00:28:34.820 --> 00:28:37.110
plug in the USB tuner
and antenna tuner

00:28:37.110 --> 00:28:39.470
into your Nexus
player, for example.

00:28:39.470 --> 00:28:41.900
You get the content right
to your Nexus player

00:28:41.900 --> 00:28:47.380
and you can play around with
recording and all the stream

00:28:47.380 --> 00:28:49.080
management I just mentioned.

00:28:49.080 --> 00:28:51.260
We will provide that as
an open source sample

00:28:51.260 --> 00:28:53.450
as part of the
live channels app.

00:28:59.200 --> 00:29:03.050
Another really important
topic for us for Android N

00:29:03.050 --> 00:29:07.730
was supporting HDR, or high
dynamic range properly.

00:29:07.730 --> 00:29:12.430
So as you know, with all
the UHD, new UHD TVs,

00:29:12.430 --> 00:29:14.970
HDR became a big topic.

00:29:14.970 --> 00:29:20.560
It really describes
the ability to display

00:29:20.560 --> 00:29:27.580
a wide range of colors and
in the right natural color

00:29:27.580 --> 00:29:28.300
schemes.

00:29:28.300 --> 00:29:32.740
And so one of the
problems we saw

00:29:32.740 --> 00:29:35.060
is that there are a lot
of different HDR standards

00:29:35.060 --> 00:29:35.810
out there.

00:29:35.810 --> 00:29:38.950
So you have HDR 10,
you have Dolby Vision,

00:29:38.950 --> 00:29:43.070
you have a hybrid log gamma.

00:29:43.070 --> 00:29:46.380
And as both a consumer
and the content provider,

00:29:46.380 --> 00:29:47.390
it's confusing.

00:29:47.390 --> 00:29:51.827
Because how do I know which
standard I have to support?

00:29:51.827 --> 00:29:53.660
If I have a content app
and want to play out

00:29:53.660 --> 00:29:58.120
beautiful 4K content
with a format in HDR,

00:29:58.120 --> 00:29:59.510
which of the standards do I use?

00:29:59.510 --> 00:30:02.240
How do I even know what
the device supports?

00:30:02.240 --> 00:30:08.460
So in Android N, we are adding
new APIs to support HDR,

00:30:08.460 --> 00:30:10.560
and we are addressing two cases.

00:30:10.560 --> 00:30:12.900
One is the case for
device manufacturers

00:30:12.900 --> 00:30:15.870
so they can actually
properly plumb up

00:30:15.870 --> 00:30:20.440
their HDR decoder in the
system and signal to the system

00:30:20.440 --> 00:30:25.400
and say, hey, I support these
high dynamic range standards.

00:30:25.400 --> 00:30:30.490
And as a content provider
for example, Netflix,

00:30:30.490 --> 00:30:34.460
they can query
the system and see

00:30:34.460 --> 00:30:37.270
these are the standards
that this device supports

00:30:37.270 --> 00:30:40.340
and then make the choice
which stream to deliver.

00:30:40.340 --> 00:30:43.010
And that could be everything
from the standard,

00:30:43.010 --> 00:30:45.147
like the HDR streams they
have for this device,

00:30:45.147 --> 00:30:46.230
or they can make the call.

00:30:46.230 --> 00:30:49.140
Well, this device actually
does not support an HDR center

00:30:49.140 --> 00:30:54.400
that I need, so I'm just
delivering a plain 4K stream.

00:30:54.400 --> 00:30:57.220
We had to get HDR
capabilities API'd

00:30:57.220 --> 00:31:00.220
so that apps can actually
query for the capabilities

00:31:00.220 --> 00:31:01.170
of this device.

00:31:03.880 --> 00:31:05.760
Some important
things to note here.

00:31:05.760 --> 00:31:08.430
The decoder capabilities
will also be exposed to that,

00:31:08.430 --> 00:31:11.471
and we have some
requirements around that.

00:31:11.471 --> 00:31:16.406
HDR 10 requires HEVC decoder
to support HDR 10 Main 10.

00:31:16.406 --> 00:31:22.570
Dolby Vision requires a special
HEVC decoder and hybrid log

00:31:22.570 --> 00:31:26.710
gamma requires VP9 profile 2.

00:31:26.710 --> 00:31:29.870
By the way, this is the
profile that YouTube

00:31:29.870 --> 00:31:32.160
announced earlier this year
they will support HDR in.

00:31:36.400 --> 00:31:38.160
Another important
topic, especially

00:31:38.160 --> 00:31:42.850
at I/O for developers
is the Leanback library.

00:31:42.850 --> 00:31:47.820
Leanback library is our toolset
to enable app development very,

00:31:47.820 --> 00:31:50.060
very easily on Android TV.

00:31:50.060 --> 00:31:53.940
So if you already are used
to Android development

00:31:53.940 --> 00:31:57.290
on mobile, on tablet,
in any form factor,

00:31:57.290 --> 00:31:59.760
we give you with
Leanback support library,

00:31:59.760 --> 00:32:02.550
we give you a toolset to
very easily bring your app

00:32:02.550 --> 00:32:05.870
from mobile to the big screen.

00:32:05.870 --> 00:32:08.840
And over the last year,
we saw lots of developers

00:32:08.840 --> 00:32:11.445
use our toolset, and we
got a lot of feedback.

00:32:11.445 --> 00:32:13.570
So there are certain things
that they were missing.

00:32:13.570 --> 00:32:15.670
There were certain use
cases we actually initially

00:32:15.670 --> 00:32:17.430
didn't envision.

00:32:17.430 --> 00:32:22.440
And we for once,
listened, and we

00:32:22.440 --> 00:32:26.250
are providing an update to the
Leanback library very soon.

00:32:26.250 --> 00:32:28.460
It's around the end timeframe.

00:32:28.460 --> 00:32:31.490
And we add in for example,
support for custom fragments

00:32:31.490 --> 00:32:32.805
in the browse fragment.

00:32:32.805 --> 00:32:35.180
The browse fragment is one of
these things that basically

00:32:35.180 --> 00:32:39.340
allows you to display multiple
lists of content in your app

00:32:39.340 --> 00:32:40.380
very easily.

00:32:40.380 --> 00:32:43.140
But we had a very
strict approach to that.

00:32:43.140 --> 00:32:45.820
We had basically one thought
on how this should look like.

00:32:45.820 --> 00:32:48.920
We got lots of feedback that
yeah, the browsing itself

00:32:48.920 --> 00:32:50.480
would be nice, but
in my app, I would

00:32:50.480 --> 00:32:52.105
like to have it a
little bit different.

00:32:52.105 --> 00:32:54.070
I would like to have
different metadata

00:32:54.070 --> 00:32:56.810
and I'd like to have
a different order.

00:32:56.810 --> 00:32:59.100
And by building
a custom fragment

00:32:59.100 --> 00:33:02.140
into the browse fragment,
that will help you a lot

00:33:02.140 --> 00:33:05.790
without reinventing the wheel.

00:33:05.790 --> 00:33:09.470
We also improved the
media player a lot

00:33:09.470 --> 00:33:10.680
to support custom actions.

00:33:10.680 --> 00:33:13.080
We get details in media
action specifically

00:33:13.080 --> 00:33:15.790
that allows if you have a
very content-heavy app that

00:33:15.790 --> 00:33:20.780
wants to display a lot
of the content metadata

00:33:20.780 --> 00:33:25.250
and interact with that during
playback, that will help you.

00:33:25.250 --> 00:33:26.950
And also, we make
branding easier.

00:33:26.950 --> 00:33:31.240
So a lot of the feedback
was if you are actually

00:33:31.240 --> 00:33:35.370
using the Leanback library as
a standard to build your app,

00:33:35.370 --> 00:33:39.870
it was a little bit hard to
get your own brand in there,

00:33:39.870 --> 00:33:43.560
make your app a little bit
different from the other apps.

00:33:43.560 --> 00:33:47.310
And we did a bunch of work to
allow you to brand it easily

00:33:47.310 --> 00:33:50.300
without reinventing everything
and building everything

00:33:50.300 --> 00:33:50.950
yourself again.

00:33:53.660 --> 00:33:56.000
For this, this is only
a super high level

00:33:56.000 --> 00:33:57.266
teaser what's going on here.

00:33:57.266 --> 00:33:59.890
There's a session this week, and
we'll listen to those sessions

00:33:59.890 --> 00:34:04.460
later that goes really, really
deep into the Leanback library

00:34:04.460 --> 00:34:05.160
inner workings.

00:34:05.160 --> 00:34:07.880
So if you're a developer wanting
to develop for Android TV,

00:34:07.880 --> 00:34:09.320
that's a great
session to attend.

00:34:09.320 --> 00:34:14.060
Three of our developers will
go through a bunch of use cases

00:34:14.060 --> 00:34:15.909
and explain a
bunch of these news

00:34:15.909 --> 00:34:17.500
and how the Leanback
library actually

00:34:17.500 --> 00:34:19.710
works underneath on Android TV.

00:34:23.460 --> 00:34:29.179
So of all these new things,
how can you actually

00:34:29.179 --> 00:34:29.980
interact with that?

00:34:29.980 --> 00:34:35.000
As you heard in the keynote,
the Android N developer preview

00:34:35.000 --> 00:34:36.670
is already available.

00:34:36.670 --> 00:34:39.824
So you can download
that already and you

00:34:39.824 --> 00:34:41.520
should get started with that.

00:34:41.520 --> 00:34:43.679
All the Android TV features
are included as part

00:34:43.679 --> 00:34:44.960
of the standard Android SDK.

00:34:44.960 --> 00:34:47.179
There's nothing special for TV.

00:34:47.179 --> 00:34:48.810
It is just Android.

00:34:48.810 --> 00:34:51.850
So if you download the Android
N developer preview SDK,

00:34:51.850 --> 00:34:54.060
the Leanback library
will be included,

00:34:54.060 --> 00:34:56.620
all the new TV features
will be included.

00:34:56.620 --> 00:34:59.910
And we also updated
the documentation

00:34:59.910 --> 00:35:02.850
and some of the sample
apps as part of that.

00:35:02.850 --> 00:35:07.560
Also, we got a bunch of
feedback on the emulator for TV,

00:35:07.560 --> 00:35:10.450
it having horrible
performance, which

00:35:10.450 --> 00:35:12.660
was valid feedback
because it indeed

00:35:12.660 --> 00:35:14.960
had very horrible performance.

00:35:14.960 --> 00:35:16.900
We updated that quite a bit.

00:35:16.900 --> 00:35:18.470
We think it's much better now.

00:35:18.470 --> 00:35:23.310
It's actually usable as a pretty
standard development tool.

00:35:23.310 --> 00:35:27.340
You don't necessarily have
to use the hardware anymore.

00:35:27.340 --> 00:35:29.920
And also, for those you
who have a Nexus player,

00:35:29.920 --> 00:35:34.000
you can sign up or download for
the Android N developer preview

00:35:34.000 --> 00:35:35.100
image.

00:35:35.100 --> 00:35:37.780
You can download
the image in Flash,

00:35:37.780 --> 00:35:42.410
or you can sign up for an online
OTA directly to the device.

00:35:45.490 --> 00:35:49.240
And one important
thing-- we have a bunch

00:35:49.240 --> 00:35:52.300
of sessions that go into a lot
more detail than this overview

00:35:52.300 --> 00:35:53.140
session.

00:35:53.140 --> 00:35:56.270
So if you're interested,
especially if you're

00:35:56.270 --> 00:36:01.530
working on media streaming
apps, join the XO Player session

00:36:01.530 --> 00:36:03.850
both valid for
mobile and TV today.

00:36:03.850 --> 00:36:05.475
We have office hours
with a living room

00:36:05.475 --> 00:36:09.130
with both Cast an Android
TV tomorrow at 10:00,

00:36:09.130 --> 00:36:12.230
and at 3:00 PM the
talk I just mentioned,

00:36:12.230 --> 00:36:15.990
deep dive into the
Leanback support library.

00:36:15.990 --> 00:36:19.710
At nine, I think it's your talk
going deeper and introducing

00:36:19.710 --> 00:36:22.450
the new Cast SDK.

00:36:22.450 --> 00:36:24.280
Jay and I will
target 11 on Friday

00:36:24.280 --> 00:36:27.770
about bringing live content
to Android TV also much

00:36:27.770 --> 00:36:29.670
more detailed than the session.

00:36:29.670 --> 00:36:32.640
And at 2 PM on Friday
is a great session

00:36:32.640 --> 00:36:34.390
if you have a mobile
app and are wondering

00:36:34.390 --> 00:36:35.796
how to bring that to TV.

00:36:35.796 --> 00:36:37.420
How does that transition
actually work?

00:36:37.420 --> 00:36:38.620
What are best practices?

00:36:38.620 --> 00:36:40.390
What is the easiest way?

00:36:40.390 --> 00:36:44.580
So that's a good
session to attend then.

00:36:44.580 --> 00:36:46.540
We also have our
support communities,

00:36:46.540 --> 00:36:49.850
developer communities,
you see the links here.

00:36:49.850 --> 00:36:55.550
But I think with that, I think
we should open for questions.

00:36:55.550 --> 00:36:59.050
I think we have
microphones somewhere,

00:36:59.050 --> 00:37:00.321
if there are any questions.

00:37:00.321 --> 00:37:01.820
I think they should
be on the sides.

00:37:01.820 --> 00:37:05.130
I think I see one there,
and one right here.

00:37:05.130 --> 00:37:10.890
So if you have a question,
come up, ask a question.

00:37:10.890 --> 00:37:14.790
If not, I'm totally
cool with that.

00:37:14.790 --> 00:37:17.530
ADAM CHAMPY: And just so you
know, our sandbox is literally

00:37:17.530 --> 00:37:20.210
about 100 yards that
way and we'll be there

00:37:20.210 --> 00:37:24.790
for good chunks of today,
tomorrow, and Friday.

00:37:24.790 --> 00:37:30.470
AUDIENCE: Hello,
I have a question.

00:37:30.470 --> 00:37:33.340
Can you hear me?

00:37:33.340 --> 00:37:38.060
Actually, all this talk about
the living room about Google

00:37:38.060 --> 00:37:40.494
Cast and Android TV.

00:37:40.494 --> 00:37:44.210
I'm a former education
technologist actually,

00:37:44.210 --> 00:37:48.440
and I'm wondering about
streaming interactive content

00:37:48.440 --> 00:37:52.880
to the Smartboards
in the classroom.

00:37:52.880 --> 00:37:59.421
Do you guys support other
formats than video and audio

00:37:59.421 --> 00:38:00.150
for casting?

00:38:02.802 --> 00:38:04.010
ADAM CHAMPY: So I can answer.

00:38:04.010 --> 00:38:06.200
So can folks who
are leaving just

00:38:06.200 --> 00:38:09.160
be a little quieter
for one second?

00:38:09.160 --> 00:38:12.570
The main aspect of interaction
or a classroom aspect

00:38:12.570 --> 00:38:14.820
could be served in a
couple different ways.

00:38:14.820 --> 00:38:17.610
If you have a mobile app that
wants to display something

00:38:17.610 --> 00:38:20.790
on the big screen like
video content or voting

00:38:20.790 --> 00:38:22.580
from different
students in a class,

00:38:22.580 --> 00:38:25.030
the Cast model is really
powerful for that.

00:38:25.030 --> 00:38:28.030
So we could follow up or
join the discussion on Friday

00:38:28.030 --> 00:38:29.905
and we can talk a little
bit more about that.

00:38:34.180 --> 00:38:36.840
AUDIENCE: I'm talking
about custom content.

00:38:36.840 --> 00:38:40.090
For example, HTML5 or Flash.

00:38:40.090 --> 00:38:41.700
ADAM CHAMPY: So
currently on Cast, we

00:38:41.700 --> 00:38:44.681
support effectively an
HTML5 player and a couple

00:38:44.681 --> 00:38:45.680
different media formats.

00:38:45.680 --> 00:38:47.554
I'm happy to speak with
you afterwards and go

00:38:47.554 --> 00:38:49.454
into much more detail on that.

00:38:49.454 --> 00:38:50.620
I'll join you right outside.

00:38:55.886 --> 00:38:58.820
AUDIENCE: The Play store on
Android TV is kind of lame.

00:39:02.530 --> 00:39:04.560
My app is buried
at the very bottom

00:39:04.560 --> 00:39:07.820
and there's really no
way for people to get it,

00:39:07.820 --> 00:39:11.450
because you just have to
keep scrolling to the right,

00:39:11.450 --> 00:39:14.790
and nobody is going to
go beyond three or four,

00:39:14.790 --> 00:39:18.340
let's say five
apps down the list,

00:39:18.340 --> 00:39:21.470
because I guess you're using the
Leanback library for the Play

00:39:21.470 --> 00:39:22.580
Store as well.

00:39:22.580 --> 00:39:25.360
So is there going to be
any improvement to that

00:39:25.360 --> 00:39:27.880
so that my app can
get discovered?

00:39:27.880 --> 00:39:30.410
SASCHA PRUETER: I mean, now
with the Play Store filling up

00:39:30.410 --> 00:39:33.580
with more and more
apps, it's the same way

00:39:33.580 --> 00:39:35.050
as mobile a little bit, right?

00:39:35.050 --> 00:39:37.360
You can't expect with
millions and millions of apps

00:39:37.360 --> 00:39:40.400
to have every app being
on the front page.

00:39:40.400 --> 00:39:42.640
No one scrolls through
millions and millions of apps,

00:39:42.640 --> 00:39:46.930
so we are focusing more on
bringing categories more up

00:39:46.930 --> 00:39:50.600
and doing some work
about featuring apps,

00:39:50.600 --> 00:39:52.820
and also improving search.

00:39:52.820 --> 00:39:57.080
But it is now a pure scrolling
model with thousands of apps

00:39:57.080 --> 00:40:00.000
being in the store, becomes
less and less of a model.

00:40:00.000 --> 00:40:02.430
What we're trying
to do is very soon

00:40:02.430 --> 00:40:04.470
come up with a new
model around categories,

00:40:04.470 --> 00:40:08.340
so that drilling into different
types of apps for the user

00:40:08.340 --> 00:40:09.340
will be easier.

00:40:09.340 --> 00:40:12.300
So discovery by
browsing categories

00:40:12.300 --> 00:40:13.914
depending on what
they're looking for,

00:40:13.914 --> 00:40:15.080
will be a little bit easier.

00:40:15.080 --> 00:40:15.705
AUDIENCE: Cool.

00:40:15.705 --> 00:40:18.570
Is there a way to like feature
apps that are not Netflix

00:40:18.570 --> 00:40:21.570
and like all the big
guys, maybe curate it

00:40:21.570 --> 00:40:24.310
a bit and trying to get the
little guys a little bit up

00:40:24.310 --> 00:40:25.040
there?

00:40:25.040 --> 00:40:29.660
SASCHA PRUETER: So we have
guidelines if you look

00:40:29.660 --> 00:40:33.740
on the android.com/tv, we
have guidelines, for example,

00:40:33.740 --> 00:40:40.130
UX guidelines to be even
considered for highlighting.

00:40:40.130 --> 00:40:41.986
Then again, it
depends in what region

00:40:41.986 --> 00:40:43.860
your app is available,
what content is there,

00:40:43.860 --> 00:40:45.340
what competitions you have.

00:40:45.340 --> 00:40:48.160
We can't always only
merchandise or highlight

00:40:48.160 --> 00:40:50.720
a very low number of apps.

00:40:50.720 --> 00:40:54.880
So we are really investing more
into like category navigation,

00:40:54.880 --> 00:40:58.460
and more discovery options
on the Android TV Play Store

00:40:58.460 --> 00:40:59.080
and Search.

00:40:59.080 --> 00:41:00.038
AUDIENCE: Cool, thanks.

00:41:05.080 --> 00:41:07.040
SASCHA PRUETER:
Thank you very much.

