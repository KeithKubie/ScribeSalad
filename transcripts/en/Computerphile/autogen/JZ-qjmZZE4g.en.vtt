WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.430
I want to say now, ahead of time: when
you're watching this video, please do not

00:00:05.430 --> 00:00:11.219
race off and say "First". The idea is you
get on and you say: "First - and the answer

00:00:11.219 --> 00:00:16.289
to the question in the video is this.
This is it!" OK -  so let's get there, let's

00:00:16.289 --> 00:00:23.900
pose the question. The reason for coming
in on book codes is that they are a particularly

00:00:23.900 --> 00:00:32.309
accessible and - y'know -  "easy to visit",
application of checksum technology.

00:00:32.309 --> 00:00:38.460
That's what it comes down to. The classic
ISBN-10 . d!0-digits long but that

00:00:38.460 --> 00:00:43.379
10th digit is a weighted checksum of
all of the digits that have occurred

00:00:43.379 --> 00:00:51.899
previously. And in the course of working
out let's say: "What is the checksum digit?"

00:00:51.899 --> 00:00:56.399
I mean, last time, when we introduced
these, we went for the hard stuff first. I

00:00:56.399 --> 00:00:59.730
regarded the checksum digit as been
correct. But, if you remember, we damaged

00:00:59.730 --> 00:01:02.399
one [digit] in the middle.
Let's do a straightforward one this time

00:01:02.399 --> 00:01:07.320
and convinced ourselves that it does still
work. And work out later after that, what

00:01:07.320 --> 00:01:13.979
might go wrong. And would it work for
bases of calculation that are different

00:01:13.979 --> 00:01:18.600
from 11. Because if you remember it's
effectively [that] we're taking things modulo 11.

00:01:18.600 --> 00:01:23.810
In terms of doing another one I'm
going to work out the checksum with you. And

00:01:23.810 --> 00:01:29.090
then I'm going to challenge you to get
out there and find out what this book is.

00:01:29.090 --> 00:01:35.369
Let me say to you I'm going to consider
this ISBN [points at written-out checksum] 
The first nine digits it's:

00:01:35.369 --> 00:01:42.659
"0 201 07981 c".  And I [have]
put a "c" at the end to denote that the

00:01:42.659 --> 00:01:46.320
checksum digit has still to be
calculated. Those of you have seen the

00:01:46.320 --> 00:01:50.750
previous video on this topic will be
very familiar with this. Iif you're not,

00:01:50.750 --> 00:01:54.720
see if you can follow it, and if you
can't follow it then go back and pull

00:01:54.720 --> 00:01:59.369
down the previous video to start off with. 
Every one of these digits in an

00:01:59.369 --> 00:02:05.100
ISBN has a weighting, starting at one from
the left the second digit has a weighting

00:02:05.100 --> 00:02:09.209
of 2; the 3rd digit a weighting of 3 and so on.
All the way up to a weighting of 9.

00:02:09.209 --> 00:02:13.890
But the checksum digit is the one that

00:02:13.890 --> 00:02:18.349
checks out all the rest when you've done
this simple addition and multiplication

00:02:18.349 --> 00:02:25.409
some modulo 11. So, if you remember, it
goes like this: I calculate the checksum

00:02:25.409 --> 00:02:36.299
digit, I was saying, by weighted multiply and
addition. 1*0  + 2*2 +  3*0

00:02:36.299 --> 00:02:43.319
+ 4*1 ... and so on ...  + 0*5
 + 7*6  + 9*7

00:02:43.319 --> 00:02:50.189
+ 8*8 + 9*1 + the
checksum digit, c*10, because that's

00:02:50.189 --> 00:02:57.030
in the tenth position on the right. Skip! 
[to written out version]
I did all this last night I worked it out!

00:02:57.030 --> 00:03:02.209
What's the answer to all of this? It's
that the equation you have to solve is

00:03:02.209 --> 00:03:08.120
186 + 10*c  - that's what it all comes
down to = has got to be equal to 0.

00:03:08.120 --> 00:03:12.120
Remembering what we did in high-school
algebra, rearranging equations, it's

00:03:12.120 --> 00:03:18.269
easy so far, you say: "OK keep the 10c
on the left hand side move the 186 to

00:03:18.269 --> 00:03:27.090
the other side. So it's 10*c = -186 
So, again, using Sean's clocks

00:03:27.090 --> 00:03:32.340
method, that he did last time, he actually
showed you a way of working out what a

00:03:32.340 --> 00:03:37.889
negative number is modulo a certain base
And keep reminding yourselfso - it's modulo 11.

00:03:37.889 --> 00:03:41.689
Another simple way to describe the
algorithm for coping with negative

00:03:41.689 --> 00:03:48.750
results like this is to say: "Keep adding
multiples of 11 until it goes positive"

00:03:48.750 --> 00:03:54.120
That's one of the ways I remind myself
how to do it. If you want to make that

00:03:54.120 --> 00:04:00.329
go positive using multiples of 11? Well, I
would point out to you just off the top

00:04:00.329 --> 00:04:09.509
of my head, that 11*17 is 187. And 187
is one more than 186. So if you have

00:04:09.509 --> 00:04:16.440
-186 + 187 that comes out to being + 1. 
You end up with the fact

00:04:16.440 --> 00:04:28.139
that -186, let's use "math chat", is:
" ...  congruent to 1 modulo 11".  OK, so if

00:04:28.139 --> 00:04:32.490
in doubt keep adding the +11
multiples until it goes positive and

00:04:32.490 --> 00:04:39.330
then you'll have your answer.  10c
therefore is now equal to 1 modulo 11.

00:04:39.330 --> 00:04:46.889
So 'c' therefore - bring the 10 under and
divide is 1/10 modulo 11. What we did

00:04:46.889 --> 00:04:52.530
last time, we're revising it by doing it
again this time, is we say: "Ah! we have to

00:04:52.530 --> 00:04:58.530
find inverses. Now at this stage - we did
this for the first time in the previous

00:04:58.530 --> 00:05:04.229
video - I've written out the table of
inverses modulo 11. Well 1 is obviously

00:05:04.229 --> 00:05:09.690
a remainder of 1. If you want the inverse
of 2 what do you have to do?  You have to

00:05:09.690 --> 00:05:15.000
find a multiple of that that makes it be
one more than a multiple of 11. So 6

00:05:15.000 --> 00:05:22.020
2s are 12 but 11s into 12 goes once remainder
1. So, in other words, the key multiplier

00:05:22.020 --> 00:05:28.320
is 6 that turns our 2 into a 12
remainder 1. And again with a 3 it's

00:05:28.320 --> 00:05:35.789
different. {For]  four you would need 4*3s are 12 [which] 
is 1*11 remainder 1. So here, then, on this

00:05:35.789 --> 00:05:42.840
bottom row are all of the inverses for 1
2 3 4 up to 10. And, as you can see, the

00:05:42.840 --> 00:05:48.870
inverse of 10 is 10. It's so-called "self
inverse".  So,  our 1/10th  here gives you 

00:05:48.870 --> 00:05:54.260
an answer of 10. So we see we've been trying
to work out the checksum digit. It is 10.

00:05:54.260 --> 00:06:02.610
This poses us a problem, actually, because
10 looks like two digits doesn't it?

00:06:02.610 --> 00:06:06.990
It looks like one zero but it isn't. It's 10.
And immediately, as a computer scientist,

00:06:06.990 --> 00:06:11.849
if I had been on the ISBN committee,
I might have jumped up and down in

00:06:11.849 --> 00:06:16.349
the 60s, 70s, whenever it wasn't saying: "Look
we have a problem here. Because we're doing

00:06:16.349 --> 00:06:20.490
modulo 11 we will end up, occasionally,
with remainders of 10. How do we

00:06:20.490 --> 00:06:24.750
represent them? My friends at IBM have
the perfect answer and they've built in

00:06:24.750 --> 00:06:29.729
future-proofing by inventing hexadecimal
[notation] which goes all the way up to remainder 16

00:06:29.729 --> 00:06:35.039
And they've just used ABCDEF  [for digits from 10 upwards]
yeah I migh thave been tempted to say: "Why not use 'A' ?"

00:06:35.039 --> 00:06:37.410
I don't know. I think
I'd have been laughed out of the room

00:06:37.410 --> 00:06:42.330
because, of course, ISBNS were
developed, really, by people who were

00:06:42.330 --> 00:06:48.300
booksellers, publishers, librarians and as
far as they're concerned it's a literary

00:06:48.300 --> 00:06:53.820
background, not a computer science
background. And I bet you somebody said

00:06:53.820 --> 00:07:00.170
"Let's use Roman numerals because [then] X is 10".
What does this lead us on to ?

00:07:00.170 --> 00:07:06.920
Well, without wanting to get too mathematical,
what it's led us into realizing is that

00:07:06.920 --> 00:07:13.560
remainders are important. And the whole
of our adventure that we are beginning today

00:07:13.560 --> 00:07:18.270
is all about remainders. Because when it
gets into more advanced coding

00:07:18.270 --> 00:07:22.110
theory - which is what you all say you
want me to do, you have only yourselves

00:07:22.110 --> 00:07:25.680
to blame! - it's all down to remainders. And we've

00:07:25.680 --> 00:07:30.450
got to get very comfortable with
remainders and multiplicative inverses.

00:07:30.450 --> 00:07:36.300
Which we've done on the ISBN example. In
mathematical terminology, then, you would

00:07:36.300 --> 00:07:43.440
say: "Oh! consider a set of integers Z_n.
What is Z_11?"

00:07:43.440 --> 00:07:51.150
Well Z_11 is, basically, ISBNs. The
rules say if you call it Z_11 then it

00:07:51.150 --> 00:07:55.560
means all the integers from 0 up to
n - 1. So it's from 0 to 10. Fine,

00:07:55.560 --> 00:08:01.680
that's exactly what we've been doing! The
question is, for any given n, I mean you

00:08:01.680 --> 00:08:06.750
could have Z_3, Z_4, Z_11, Z_17,
Z_whatever, can you turn it into

00:08:06.750 --> 00:08:12.300
something that works? And you would get
one of these inverses, that we had to do

00:08:12.300 --> 00:08:17.790
in solving our equation? And the answer,
the short answer, is: "Yes you can as long

00:08:17.790 --> 00:08:23.610
as it's [the subscript is] prime. And I want to 
just try and convince you about that. What we found in

00:08:23.610 --> 00:08:29.910
doing the example was, basically, !0*c =1
{Therefore] c = 1 / 10. So what

00:08:29.910 --> 00:08:35.460
that's saying to us is: if you want to
divide by n it's the same as multiplying

00:08:35.460 --> 00:08:42.870
by 1 over n, and [thus] if we know how to do
multiples of things we know how to do

00:08:42.870 --> 00:08:46.320
division, so long as it's possible to invert

00:08:46.320 --> 00:08:52.920
to form the reciprocal of any number in
that field. But if you ever stumble

00:08:52.920 --> 00:08:57.389
across something where, for one reason or
another, you can't find an inverse, then

00:08:57.389 --> 00:09:02.940
you really are scuppered. This [points at list of 
inverses] makes Z be a finite field, because it allows

00:09:02.940 --> 00:09:10.319
division. If you get a set of numbers for
a certain Z_n,  or whatever, where you

00:09:10.319 --> 00:09:15.750
can't find the inverse then it becomes a
mere ring - not a field (... hope I've got

00:09:15.750 --> 00:09:19.589
that right mathematicians ?!). But, yes, so in
general then the set of infinite

00:09:19.589 --> 00:09:24.630
integers all good all the way to infinity
there'll be quite a lot where you cannot find

00:09:24.630 --> 00:09:31.470
an [integer] inverse. So, in general, arbitrary sets
of 0 to positive integers form rings, not

00:09:31.470 --> 00:09:37.199
fields. but the special case where with
the arithmetic we know they form

00:09:37.199 --> 00:09:43.800
fields is when they [the number bases] are prime. 
What I'm saying here, then, is this: divide is vital!

00:09:43.800 --> 00:09:50.730
If it is absent - but the other three:  + - *
are OK then, for that

00:09:50.730 --> 00:09:55.380
particular choice of n  - 'p' say -  then you
could say, well Z_p is a  ring. But it's

00:09:55.380 --> 00:10:02.910
not a field. All of the prime numbers if
they feature in this Z_m, if m is a

00:10:02.910 --> 00:10:08.310
prime it will work. It will have a
multiplicative inverse. You will be able

00:10:08.310 --> 00:10:13.079
to divide. And there is no problem. Now I
want to try and convince you about this,

00:10:13.079 --> 00:10:17.490
and say it's not just a one-off freak, by
first of all doing a multiply and [an]

00:10:17.490 --> 00:10:22.139
addition table for 3.  We all agree
3 is a small odd number. It happens

00:10:22.139 --> 00:10:26.670
to be a prime as well. And then you will
say: "Ah! but show us where it goes wrong then!"

00:10:26.670 --> 00:10:33.329
This is all about finding inverses.
And if we're using, shall we say, a system

00:10:33.329 --> 00:10:38.899
based on 3, rather than 11, then
we know that 3 is prime - it's the

00:10:38.899 --> 00:10:44.370
smallest odd prime because 1 doesn't
count remember - computer scientists, you

00:10:44.370 --> 00:10:48.750
might think of 1 as being prime but all
that's heresy in mathematics!  1 is special!

00:10:48.750 --> 00:10:56.220
OK, on this diagram here ...  Here I
am tackling Z_3. Here's our first foray into

00:10:56.220 --> 00:10:58.410
the way you should do things systematically.

00:10:58.410 --> 00:11:03.750
It's to say:  well if Z-3 is going to
form one of these fields, finite fields,

00:11:03.750 --> 00:11:08.700
where everything wraps round and all the
remainders work, you need always to do

00:11:08.700 --> 00:11:12.960
two things: you need to construct an
addition table and a multiplication table.

00:11:12.960 --> 00:11:19.020
Let's do the addition table first
and we'll be just using ordinary decimal

00:11:19.020 --> 00:11:23.820
arithmetic like we do with ISBN but occasionally
I'll be saying: "Ah! but that's modulo 3,

00:11:23.820 --> 00:11:27.750
whereas previously it was modulo 11. And
we have to do a division and get a remainder.

00:11:27.750 --> 00:11:34.140
0, 1, 2 there, 0, 1, 2 there
Here we go, look,  0 + 0 is 0,

00:11:34.140 --> 00:11:42.030
0 + 1 is 1.  0 + 2 is 2.  Come to the
second row. 1 + 0 is 1.  1 + 1 is 2.

00:11:42.030 --> 00:11:51.990
1 + 2 is 3. But we're working modulo 3
now.  3 modulo 3 is 0. 2: 2 + 0 is 2.

00:11:51.990 --> 00:11:59.370
2 + 1 is 3. Ah! but it's modulo 3 so
there's a 0.  2 + 2 is 4, but divide

00:11:59.370 --> 00:12:05.910
that by 3 and it goes once, remainder 1
So here we are look 0 1 2;  1 2 0; 

00:12:05.910 --> 00:12:12.600
2 0 1. And here, another wonderful
buzz phrase for you, is that that

00:12:12.600 --> 00:12:21.210
addition table shows you that every one of 
your possible remainders, 0 1 and 2. In every row

00:12:21.210 --> 00:12:30.750
there is a 0 entry. And that 0 entry is
called the "additive inverse". And what it

00:12:30.750 --> 00:12:40.620
is saying is 1 plus 2 is 3, but because
it's modulo 3 that's a remainder of 0.

00:12:40.620 --> 00:12:46.950
So, in other words, 2 in this field is
behaving like -1, because 1 +  -1

00:12:46.950 --> 00:12:53.010
cancels out to 0. So, remember,
when you're doing additions in a finite

00:12:53.010 --> 00:12:57.750
field you should be looking at your table
saying: "Is there a 0 on every row? Have I

00:12:57.750 --> 00:13:03.660
got an additive inverse?" Because you've
absolutely got to have that, OK? And it's

00:13:03.660 --> 00:13:07.950
passed all the tests so far. There are
additive inverses for everything. And it

00:13:07.950 --> 00:13:12.640
relates the modulo business to
negative numbers, and everything, as we've  now

00:13:12.640 --> 00:13:17.770
discovered. OK, here's the somewhat
harder one you have to construct - for

00:13:17.770 --> 00:13:22.510
everything you intend to use in your
codes. You have to construct a multiply

00:13:22.510 --> 00:13:26.620
table as well, and show it works. 0 * 0 = 0
0 * 1 is 0.

00:13:26.620 --> 00:13:32.680
Anything times 0 is 0. So you get a
row of 0s at the top - that's

00:13:32.680 --> 00:13:39.940
absolutely common. I did do a video here,
foreshadowing this, ages ago,  involving

00:13:39.940 --> 00:13:44.560
Reed-Muller codes. And I said there you
will always get a row of 0s

00:13:44.560 --> 00:13:48.610
possibility for one of your codewords.
It's called the zero vector and we're

00:13:48.610 --> 00:13:52.150
getting it here as well. So don't get
worried by that. What about the second

00:13:52.150 --> 00:13:56.890
row. 1 * 0 = 0;  1* 1 is 1;  1 * 2 = 2,
just using ordinary multiplication.

00:13:56.890 --> 00:14:09.010
No problem. Two 0s are  0;  two 1s are 2;  
Two 2s are 4, which goes once remainder 1.

00:14:09.010 --> 00:14:14.740
What do we look for in the multiply table?  What
we look for in the multiply table is the

00:14:14.740 --> 00:14:24.430
1s entries. And they must be there, in
every non-zero row. You must have 1s - just

00:14:24.430 --> 00:14:32.200
one 1, you know and all that. OK, now, I
hope I've got enough space. I just love

00:14:32.200 --> 00:14:38.470
saying this word - this is the
'multiplicative inverse'. That's a way then

00:14:38.470 --> 00:14:43.240
of forming a table of inverses - by
methods other than just chatting to

00:14:43.240 --> 00:14:47.290
Sean and saying: "Oh! it must be such and such",
is [to] write down your multiply table,

00:14:47.290 --> 00:14:51.340
look for all your 1s, they've got to be
there. And those are the multiplicative

00:14:51.340 --> 00:14:56.620
inverses of those particular numbers. 
&gt;&gt; Sean: So, wherever we find a 1 in that table the

00:14:56.620 --> 00:15:01.600
things either side of it will be the inverse of
each other?
&gt;&gt; DFB: Yes the column head and the row head.

00:15:01.600 --> 00:15:06.520
The trouble is this is easy-peasy.
They're both self-inverse one inverts to the other.

00:15:06.520 --> 00:15:13.960
&gt;&gt; Sean: Buto, if we'd done a table for 11 ...
&gt;&gt; DFB: You'd find it dotted with 1s, 

00:15:13.960 --> 00:15:19.270
all over, and if you'd picked out the row and
column intersection for all those 1s

00:15:19.270 --> 00:15:22.690
it would have given us the linear table
I wrote

00:15:22.690 --> 00:15:27.790
on the previous slide. Clearly then Z_3 is
a prime field. It's got a multiplicative

00:15:27.790 --> 00:15:32.769
inverse, in every row which isn't the
zero row. A set of inverses can be found

00:15:32.769 --> 00:15:37.269
by looking into the multiply table,
picking them out, reading off the column

00:15:37.269 --> 00:15:41.370
head andn the row. And there you are: that
inverts to that; that's [the] inverse of that.

00:15:41.370 --> 00:15:45.940
All right then. So, what would - what could -
possibly go wrong in Z_4 ? 

00:15:45.940 --> 00:15:49.709
We're motoring! It cannot go wrong! Oh! yes it can ...

00:15:49.709 --> 00:15:58.899
OK, here we go folks, this is Z_4, is
Z_4 a field? Is it a ring? 

00:15:58.899 --> 00:16:03.100
Let's find out. We've got the luxury again
of just using ordinary decimal

00:16:03.100 --> 00:16:07.510
multipliers with remainders, that we're
familiar with. So I won't go through it

00:16:07.510 --> 00:16:10.690
in great detail. You know how this works now. 
Let's take the 3 row [in the addition table] as an

00:16:10.690 --> 00:16:18.250
example:  3 + 0 is 3;  3 + 1 is 4;
Right? But remember we're working modulo 4 now.

00:16:18.250 --> 00:16:28.600
4 modulo 4 is 0; 3 + 2 is 5; but
5 modulo 4 is 1;  3 + 3 is 6; 6 modulo 4 is 2.

00:16:28.600 --> 00:16:32.820
So we complete the addition table
And we look through it and we say: 

00:16:32.820 --> 00:16:39.100
on every row there must be a 0 because
that's forming the additive inverse and

00:16:39.100 --> 00:16:44.949
enabling you to cope with negative
integers in this field. Perfect, no problem.

00:16:44.949 --> 00:16:49.029
Multiply. let's try multiply on Z_4.

00:16:49.029 --> 00:16:53.920
what happens just like it did for 3 is
that 0 times anything is 0 so

00:16:53.920 --> 00:17:00.130
you'll get a zero vector of four 0s. And [then]
you look at 1 and you say: "All right, here

00:17:00.130 --> 00:17:06.189
I go: 1 * 0 = 0;  1 * 1 = 1;
1 * 2 = 2;  1 * 3 = 3.  It's easy peasy!

00:17:06.189 --> 00:17:16.959
Now let's come on to 2.  2 * 0 = 0; 
2 * 1 = 2;  2 * 2 is ... oh heck! 2

00:17:16.959 --> 00:17:30.150
2 * 2 = 4 right; But 4 mod 4 = 0;
Fine.  2 * 3 =  6;  6 mod 4 = 2;

00:17:30.150 --> 00:17:36.520
That row is a disaster!
And why is it a disaster? It's because

00:17:36.520 --> 00:17:41.470
2 is a factor of 4. That's why it
goes wrong on .

00:17:41.470 --> 00:17:45.370
It's a bit like sequential cog-wheels on [the Tunny 
machine at] Bletchley Park, for those of you who've watched

00:17:45.370 --> 00:17:50.710
that video. You cannot have things that
have factors in these alleged things

00:17:50.710 --> 00:17:55.510
that work. Now 3 [the third row] behaves itself. 
3 * 0 = 0;  3 * 1 = 3;

00:17:55.510 --> 00:18:03.040
3 * 2 = 6; 6 mod 4 = 2.
3 * 3 is 9. But 2 * 4 = 8 so that's a
remainder of 1.

00:18:03.040 --> 00:18:10.270
But that one bad row scuppers you, because in
order for a thing to be a field you have

00:18:10.270 --> 00:18:15.040
got to be able to find a 1 on every single row of your 
[multiply] table [that's not the zero rowo] and if you

00:18:15.040 --> 00:18:20.410
can't do that, you've had it. What we are
going to find, as we move on into the realms

00:18:20.410 --> 00:18:25.090
of higher coding theory, is that Galois
comes to the rescue of computer

00:18:25.090 --> 00:18:29.800
scientists. Whereas in the very old  - I
don't know, Egyptian mathematics? -  days or

00:18:29.800 --> 00:18:33.100
something. We would have been stuck with the
fact that they knew about primes but they

00:18:33.100 --> 00:18:39.040
didn't know about what could be done
with powers of primes. And that is what

00:18:39.040 --> 00:18:45.730
almost the entirety of computer-
based coding theory is. It is heavily

00:18:45.730 --> 00:18:52.420
dominated by powers of 2. But if you
remember, all the arithmetic has to be

00:18:52.420 --> 00:18:58.870
done modulo the number base (or the
*characteristic*),  So when you get to 

00:18:58.870 --> 00:19:04.750
16 and you think of it as 2 ^ 4, you do not 
[in Galois fields] do your arithmetic modulo 16. 

00:19:04.750 --> 00:19:12.910
You still do it modulo 2, and modulo 2 in the
addition framework means:  our good old

00:19:12.910 --> 00:19:18.340
friend 'exclusive or' So, that holds no
perils for us whatsoever, as computer

00:19:18.340 --> 00:19:25.900
scientists. The multiply is harder
because as we've seen with 4, just

00:19:25.900 --> 00:19:32.140
regarding it has an even number, it goes
wrong on 2. You can't find an inverse.

00:19:32.140 --> 00:19:37.600
And if you're going to find one what Galois
says is: "OK, mathematicians, computer

00:19:37.600 --> 00:19:43.150
scientist even, listen to me. 'm gonna
have to carefully redefine what "divide"

00:19:43.150 --> 00:19:48.970
and "inverse" mean.
Stay with me!

