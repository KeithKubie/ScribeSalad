WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:03.270
We've already written one version
of a Mad Libs generator, but

00:00:03.270 --> 00:00:05.340
there are couple parts
that could be improved.

00:00:05.340 --> 00:00:08.240
Namely, we want to be able
to not only replace noun and

00:00:08.240 --> 00:00:12.780
verb, but any other substitute that we
wanted, like adjective, person or name.

00:00:13.840 --> 00:00:17.180
Now, just like the last Mad Libs
generator you wrote, there are many ways

00:00:17.180 --> 00:00:20.690
that you can build this and I encourage
you to try and implement your own way.

00:00:20.690 --> 00:00:23.532
But I'll show you the way
that I approach this problem,

00:00:23.532 --> 00:00:25.600
which I'll use for loops, and lists.

00:00:25.600 --> 00:00:28.196
Let's say we have this string mad_lib1,

00:00:28.196 --> 00:00:31.360
which is equal to I
can VERB around PLACE.

00:00:31.360 --> 00:00:32.189
In this string,

00:00:32.189 --> 00:00:36.270
the words we want to replace with
user input are VERB and PLACE.

00:00:37.750 --> 00:00:42.560
However, what if we had this other
sentence mad_lib2 is equal to

00:00:42.560 --> 00:00:44.390
NAME is what they call PLURAL NOUN.

00:00:45.650 --> 00:00:49.740
Since we want our function to be able to
handle replacements, like place, name,

00:00:49.740 --> 00:00:51.980
plural noun and
other words we may add in the future,

00:00:51.980 --> 00:00:56.440
why don't we create a list of words,
which I'll call Partis Beach and

00:00:56.440 --> 00:01:00.380
set it equal to a working list of
possible replacement words, like so.

00:01:01.890 --> 00:01:05.990
Since the words I know I want to replace
so far are VERB, PLACE, NAME and NOUN,

00:01:05.990 --> 00:01:10.900
in this example I'll set my parts_of_speech
equal to a list of those strings.

00:01:10.900 --> 00:01:13.840
Now that we have a list of word we want
to replace, how do we use it to create

00:01:13.840 --> 00:01:17.720
a Mad Libs generator that
replaces words with user input?

00:01:17.720 --> 00:01:20.470
I said that the string dot split
function would come in handy and

00:01:20.470 --> 00:01:21.580
this is where we'll use it.

00:01:22.810 --> 00:01:25.770
If we split the string mad
lib on the blank space,

00:01:25.770 --> 00:01:27.910
we'll now have each word
in the list element.

00:01:29.070 --> 00:01:30.920
We'll also create this empty list,

00:01:30.920 --> 00:01:34.810
replaced, which you'll see how
it'll be used in just a second.

00:01:34.810 --> 00:01:39.130
Now that we have our three list setup,
parts_of_speech,

00:01:39.130 --> 00:01:44.250
split madlib, and replaced, let's go
over how we'll solve this problem.

00:01:44.250 --> 00:01:48.060
General idea is to
iterate through madlib,

00:01:48.060 --> 00:01:52.080
check if the current iteration or
word rom contains a part of speech, and

00:01:52.080 --> 00:01:54.840
if it does, we'll prompt the user
to enter their replacement word for

00:01:54.840 --> 00:01:59.630
that part of speech, and then add that
user input to word to the list replaced.

00:01:59.630 --> 00:02:01.560
If the word isn't in parts_of_speech,

00:02:01.560 --> 00:02:04.660
we'll simply add the word we're
looking at to replaced instead.

00:02:04.660 --> 00:02:07.290
So let's run through an example
using the split mad_lib1.

00:02:07.290 --> 00:02:11.120
So the first thing I
look at is the string I.

00:02:11.120 --> 00:02:12.750
Is this in parts_of_speech?

00:02:12.750 --> 00:02:13.780
No, it's not.

00:02:13.780 --> 00:02:15.560
So I'll add it to replaced.

00:02:15.560 --> 00:02:16.750
Next, I look at can.

00:02:17.840 --> 00:02:19.860
Is this in parts_of_speech?

00:02:19.860 --> 00:02:22.650
It isn't, so I'll add it to replaced.

00:02:22.650 --> 00:02:24.250
Now I look at VERB.

00:02:24.250 --> 00:02:25.850
Is this in parts_of_speech?

00:02:25.850 --> 00:02:28.930
It is, so
I'll prompt the user to give me a verb.

00:02:28.930 --> 00:02:31.180
And let's say I put in jump.

00:02:31.180 --> 00:02:32.720
I'll now add that to replaced.

00:02:33.868 --> 00:02:37.330
Since around isn't in parts_of_speech,
I'll now add that to replaced.

00:02:38.420 --> 00:02:40.350
And now we're at PLACE.

00:02:40.350 --> 00:02:42.380
Now this is where things
get a bit interesting.

00:02:42.380 --> 00:02:47.240
Now notice that there was this
period at the end of place.

00:02:47.240 --> 00:02:49.320
Since we want to keep all punctuation,

00:02:49.320 --> 00:02:52.330
we're going to have to make our
approach a little bit more robust.

00:02:52.330 --> 00:02:55.870
Well, first you need to check that the
string PLACE is in the string PLACE with

00:02:55.870 --> 00:02:59.470
a period rather than just comparing
the two words for equality.

00:03:00.550 --> 00:03:05.310
Now we'll need to replace just
the word PLACE with the user input, so

00:03:05.310 --> 00:03:06.880
we keep the period.

00:03:06.880 --> 00:03:11.240
And then, add their replacement word
with a period to the list replaced.

00:03:11.240 --> 00:03:14.570
So let's say I put in Italy for PLACE.

00:03:14.570 --> 00:03:18.580
Replaced will now have Italy
with a period at the end of it,

00:03:18.580 --> 00:03:21.080
as a last element of the list.

00:03:21.080 --> 00:03:24.440
And there we go, now we have
a list with the replacement words.

00:03:24.440 --> 00:03:28.810
The only thing we need to do now,
is change this list back into a string.

00:03:28.810 --> 00:03:32.600
We already know how to convert strings
to lists by using the split function.

00:03:32.600 --> 00:03:35.900
Now I'll show you just one more
function that's the reverse of that.

00:03:35.900 --> 00:03:36.400
Join.

00:03:37.530 --> 00:03:40.700
As you can see what
we'll be joining on and

00:03:40.700 --> 00:03:45.040
the string to join are in opposite
positions of the split function.

00:03:45.040 --> 00:03:46.780
But no need to worry.

00:03:46.780 --> 00:03:49.170
If we join on replace like this,

00:03:49.170 --> 00:03:53.560
our output will be a string that's
equal to I can jump around Italy.

00:03:54.730 --> 00:03:57.900
Now, the real beauty of this approach
is that we can add any words that we

00:03:57.900 --> 00:04:01.420
want to replace to our
parts_of_speech list, and

00:04:01.420 --> 00:04:03.150
our generator will work just the same.

00:04:03.150 --> 00:04:06.890
Now that we've gone over the general
solution we want to implement,

00:04:06.890 --> 00:04:07.920
it's time to write some code.

