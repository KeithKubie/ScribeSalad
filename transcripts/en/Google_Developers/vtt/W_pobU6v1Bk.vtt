WEBVTT
Kind: captions
Language: en

00:01:05.590 --> 00:01:08.050
PETE LEPAGE: Hey, everybody, and
welcome to another Chrome

00:01:08.050 --> 00:01:09.820
Apps Office Hours.

00:01:09.820 --> 00:01:12.790
This week, I'm going to be
talking about the new in-app

00:01:12.790 --> 00:01:16.910
payment system that's available
for the new Chrome

00:01:16.910 --> 00:01:19.080
packaged app platform.

00:01:19.080 --> 00:01:22.010
If you've used Chrome apps
before, you know that there

00:01:22.010 --> 00:01:25.310
was a model where you could sell
an app with a one-time

00:01:25.310 --> 00:01:31.870
payment up front in the store,
or you could allow the user to

00:01:31.870 --> 00:01:33.450
get the app for free.

00:01:33.450 --> 00:01:37.770
Well, with Chrome packaged
apps, now you can use the

00:01:37.770 --> 00:01:39.370
in-app payment system.

00:01:39.370 --> 00:01:43.800
The in-app payment system uses
the same similar set of APIs

00:01:43.800 --> 00:01:48.670
that are used by the Google
Wallet digital service system,

00:01:48.670 --> 00:01:52.150
and it allows us to just quickly
and easily charge our

00:01:52.150 --> 00:01:55.990
users for digital goods.

00:01:55.990 --> 00:01:58.930
So let's get started and take
a look at our code--

00:01:58.930 --> 00:02:00.380
or take a look at some slides.

00:02:00.380 --> 00:02:03.000
We can switch to the
slides, perfect.

00:02:03.000 --> 00:02:06.470
So there's effectively five
steps that we need to walk

00:02:06.470 --> 00:02:08.889
through in order to
use the in-app

00:02:08.889 --> 00:02:10.590
payments in a Chrome app.

00:02:10.590 --> 00:02:13.950
So step one, obvious,
pretty easy.

00:02:13.950 --> 00:02:15.950
We need to go set up our
merchant account.

00:02:15.950 --> 00:02:18.710
You can set that up either in
the production or sandbox

00:02:18.710 --> 00:02:19.560
environment.

00:02:19.560 --> 00:02:22.160
Today I'm going to be using
one in the sandbox

00:02:22.160 --> 00:02:24.780
environment.

00:02:24.780 --> 00:02:26.740
And we'll be using the
sandbox environment

00:02:26.740 --> 00:02:28.400
through this whole thing.

00:02:28.400 --> 00:02:30.885
The second thing we need to do
is create something called a

00:02:30.885 --> 00:02:35.740
JSON web token, or a JWT, that
identifies each individual

00:02:35.740 --> 00:02:37.020
item that we want to sell.

00:02:37.020 --> 00:02:40.010
So if we want to sell a gold
star or later I'm going to be

00:02:40.010 --> 00:02:43.450
selling some sad pandas, if you
want to sell those, you

00:02:43.450 --> 00:02:47.030
need to have a JWT for
each individual item.

00:02:47.030 --> 00:02:50.860
Third thing we need to do is
include a buy.js file in our

00:02:50.860 --> 00:02:53.330
Chrome packaged app
application.

00:02:53.330 --> 00:02:59.020
Because of content security
policy rules, we can't include

00:02:59.020 --> 00:03:00.950
files from outside resources.

00:03:00.950 --> 00:03:05.090
So we need to include that
buy.js file in our Chrome

00:03:05.090 --> 00:03:07.080
packaged app.

00:03:07.080 --> 00:03:13.130
Finally, or almost finally, we
need to go and add our success

00:03:13.130 --> 00:03:15.620
and failure callbacks
to our packaged app.

00:03:15.620 --> 00:03:18.010
These are the functions that
are called when the

00:03:18.010 --> 00:03:22.890
application has completed the
purchase or failed to complete

00:03:22.890 --> 00:03:23.850
the purchase.

00:03:23.850 --> 00:03:27.460
And then finally, the last and
most easy step, hooking up the

00:03:27.460 --> 00:03:31.280
buy API to a button or to
whatever event we want to have

00:03:31.280 --> 00:03:34.040
the user click on that.

00:03:34.040 --> 00:03:38.350
Let's take a look at how the
flow works within the app and

00:03:38.350 --> 00:03:39.330
for a user.

00:03:39.330 --> 00:03:41.990
So I've got my app up, and the
user says, hey, I want to go

00:03:41.990 --> 00:03:42.940
buy something.

00:03:42.940 --> 00:03:45.330
So they go and click
on that buy button.

00:03:45.330 --> 00:03:53.160
And we make an API call that
goes and kicks off the in-app

00:03:53.160 --> 00:03:55.530
payment service.

00:03:55.530 --> 00:03:58.890
That in-app payment service
tosses up a dialogue that

00:03:58.890 --> 00:04:03.040
allows the user to enter their
name and credit card

00:04:03.040 --> 00:04:04.180
information.

00:04:04.180 --> 00:04:08.210
And then it sends that back up
to the Google servers to go

00:04:08.210 --> 00:04:09.930
and actually bill their
credit card.

00:04:09.930 --> 00:04:12.220
So it goes and checks to see.

00:04:12.220 --> 00:04:16.649
It'll then potentially
do an HTTP post

00:04:16.649 --> 00:04:17.700
request to your service.

00:04:17.700 --> 00:04:20.470
This is an optional thing and
something that I highly

00:04:20.470 --> 00:04:24.750
recommend you do so that you
can use later to verify

00:04:24.750 --> 00:04:28.480
whether the purchase was made
successfully or not.

00:04:28.480 --> 00:04:33.260
As long as the Google service
gets back a 200 OK from your

00:04:33.260 --> 00:04:38.730
servers, it then does a callback
into your application

00:04:38.730 --> 00:04:40.930
saying, hey, all right, great.

00:04:40.930 --> 00:04:45.200
The user's purchased that app or
purchase that digital good,

00:04:45.200 --> 00:04:49.860
whatever it happens to
be, a sad panda.

00:04:49.860 --> 00:04:52.140
And you get the call back.

00:04:52.140 --> 00:04:54.990
Now like I said, optionally,
you can have your server

00:04:54.990 --> 00:04:56.960
register and say,
hey, yup, OK, I

00:04:56.960 --> 00:04:58.780
acknowledge this purchase.

00:04:58.780 --> 00:05:03.430
You can also do a validation
from the app to your server to

00:05:03.430 --> 00:05:07.090
say, hey, did this user actually
make this purchase,

00:05:07.090 --> 00:05:10.230
so that you can have sort of a
second line of verification,

00:05:10.230 --> 00:05:12.840
making sure that it did
actually happen.

00:05:15.650 --> 00:05:19.760
So the API to call to actually
make the purchase is a

00:05:19.760 --> 00:05:21.390
relatively simple API.

00:05:21.390 --> 00:05:22.640
It's google.payments.inapp.buy.

00:05:25.000 --> 00:05:28.260
And we provide a JSON object.

00:05:28.260 --> 00:05:29.900
And in that JSON object,
we need to

00:05:29.900 --> 00:05:31.060
specify a couple of things.

00:05:31.060 --> 00:05:33.540
Parameters is one.

00:05:33.540 --> 00:05:34.760
Today--

00:05:34.760 --> 00:05:41.690
or if you don't specify the
parameters as env sandbox or

00:05:41.690 --> 00:05:46.150
env prod, it's going to use
the sandbox by default.

00:05:46.150 --> 00:05:47.840
So if you want to make sure
that you're using the

00:05:47.840 --> 00:05:49.990
production environment, you need
to make sure that you set

00:05:49.990 --> 00:05:54.080
the env parameter to prod.

00:05:54.080 --> 00:05:58.280
The JWT, which is a rather long
file, we'll see what one

00:05:58.280 --> 00:06:02.620
of those looks like in a sec,
that specifies the item.

00:06:02.620 --> 00:06:06.530
And then the two callbacks
that get called after the

00:06:06.530 --> 00:06:09.320
purchase has finished.

00:06:09.320 --> 00:06:12.290
So when we start to think about
that JWT, well, what's a

00:06:12.290 --> 00:06:13.340
JWT stand for?

00:06:13.340 --> 00:06:17.840
JWT stands for Java Web Token.

00:06:17.840 --> 00:06:22.000
But it's signed and encoded, so
that when it's sent to the

00:06:22.000 --> 00:06:24.140
server, we can verify
that yes, this is

00:06:24.140 --> 00:06:24.910
actually what it is.

00:06:24.910 --> 00:06:27.690
And the user can't go and change
the price on whatever

00:06:27.690 --> 00:06:28.960
they're going to buy.

00:06:28.960 --> 00:06:31.710
So in its raw form, before we've
signed in and coded it,

00:06:31.710 --> 00:06:34.130
you can see a couple important
things here.

00:06:34.130 --> 00:06:43.280
We have that issue line here
that you see specifies the

00:06:43.280 --> 00:06:44.610
seller name.

00:06:44.610 --> 00:06:48.250
And that's the seller ID that
we get back when we sign up

00:06:48.250 --> 00:06:52.910
for our Google Wallet merchant
account for the first time.

00:06:52.910 --> 00:06:57.450
We can then specify the price,
whatever we want to give it

00:06:57.450 --> 00:06:59.560
for a name.

00:06:59.560 --> 00:07:04.280
We have to set a creation time
and an expiry time for this

00:07:04.280 --> 00:07:05.510
particular object.

00:07:05.510 --> 00:07:11.070
And that's what the exp and iat
are for. iat for issued

00:07:11.070 --> 00:07:13.060
at, and exp, expired at.

00:07:13.060 --> 00:07:19.340
those are a number of seconds
after the epoch, so if you're

00:07:19.340 --> 00:07:20.750
familiar with that.

00:07:20.750 --> 00:07:22.980
And then finally, that
type just defines

00:07:22.980 --> 00:07:24.760
the particular type.

00:07:24.760 --> 00:07:28.640
There are two types of JWTs
that we can use to sell

00:07:28.640 --> 00:07:30.370
product within our apps.

00:07:30.370 --> 00:07:33.840
One is just a single, one-time
item, just like you see here.

00:07:33.840 --> 00:07:37.800
But the other one is a
subscription service.

00:07:37.800 --> 00:07:40.640
And with a subscription service,
you can bill the user

00:07:40.640 --> 00:07:42.140
on a regular basis.

00:07:42.140 --> 00:07:46.470
They can be billed every month,
and you charge them

00:07:46.470 --> 00:07:49.630
$0.99 every month, or maybe it's
$1.99, or whatever you

00:07:49.630 --> 00:07:54.470
want to charge on a monthly,
regular recurring schedule.

00:07:54.470 --> 00:07:57.830
So there's a bunch of libraries
that are available

00:07:57.830 --> 00:08:02.370
to take this JSON and
package it on down.

00:08:02.370 --> 00:08:05.820
Once you've gone and packaged it
all down, you've signed it

00:08:05.820 --> 00:08:07.810
with your key, this is
what it looks like.

00:08:07.810 --> 00:08:10.930
It's a really long,
ugly string.

00:08:10.930 --> 00:08:13.210
And there's a link there at the
bottom that you can see.

00:08:13.210 --> 00:08:16.710
And all of these links will be
available in the sample that

00:08:16.710 --> 00:08:18.940
I've got, as well.

00:08:18.940 --> 00:08:26.690
But that link there links to a
Python JWT library to allow

00:08:26.690 --> 00:08:28.390
you to create and sign these.

00:08:28.390 --> 00:08:30.520
And the sample that we've
got going shows you how

00:08:30.520 --> 00:08:32.990
to do that as well.

00:08:32.990 --> 00:08:33.600
So let's do it.

00:08:33.600 --> 00:08:34.850
Let's give it a try.

00:08:37.409 --> 00:08:40.120
The sample that I'm about to
show you is a Chrome packaged

00:08:40.120 --> 00:08:44.970
app that's available in
the GitHub repository.

00:08:44.970 --> 00:08:47.490
So if you go to that URL,
you can go grab it.

00:08:47.490 --> 00:08:48.950
And there's two components
to it.

00:08:48.950 --> 00:08:52.680
So let's just pop out of here,
and let me bring up--

