WEBVTT
Kind: captions
Language: en

00:00:08.034 --> 00:00:08.950
BRUNO OLIVEIRA: Hello.

00:00:08.950 --> 00:00:11.640
My name is Bruno Oliveira, and
welcome to our third episode

00:00:11.640 --> 00:00:14.330
in the Play Games
and the NDK series.

00:00:14.330 --> 00:00:16.970
We're going to talk about some
threading and lifecycle issues

00:00:16.970 --> 00:00:19.580
that may be tricky.

00:00:19.580 --> 00:00:22.300
So first of all, let's
start with threading.

00:00:22.300 --> 00:00:25.910
So when you are using
Play Games and NDK, what

00:00:25.910 --> 00:00:27.369
you have to realize,
all the time,

00:00:27.369 --> 00:00:29.410
is that the UI thread is
different from your game

00:00:29.410 --> 00:00:29.900
thread.

00:00:29.900 --> 00:00:31.530
So whenever you're
writing your game logic,

00:00:31.530 --> 00:00:32.830
that's going to be
running on the game

00:00:32.830 --> 00:00:33.960
thread on the native side.

00:00:33.960 --> 00:00:36.710
And when ever you do most of the
calls with he Play Games API,

00:00:36.710 --> 00:00:38.793
you're going to want to
do them from the UI thread

00:00:38.793 --> 00:00:39.520
on the Java side.

00:00:39.520 --> 00:00:42.230
So usually, one of
the patterns that you

00:00:42.230 --> 00:00:44.570
can use to manage the
difficulty is just

00:00:44.570 --> 00:00:46.990
create methods called post
something something and then

00:00:46.990 --> 00:00:48.765
those methods post
to the UI thread.

00:00:48.765 --> 00:00:50.390
And then on the UI
thread, you actually

00:00:50.390 --> 00:00:52.980
use the game helper to make
the corresponding API call.

00:00:52.980 --> 00:00:54.438
So something like
this, post submit

00:00:54.438 --> 00:00:56.445
score, which we covered
on the last video,

00:00:56.445 --> 00:00:58.070
you just call that
from the native side

00:00:58.070 --> 00:00:59.850
and then that posts
to the UI thread.

00:00:59.850 --> 00:01:02.860
How do you call this
from the native side?

00:01:02.860 --> 00:01:04.930
Well, you can just
use J and I. But now,

00:01:04.930 --> 00:01:06.430
how do you actually
do the opposite?

00:01:06.430 --> 00:01:08.130
How do you call from
dalvik to native?

00:01:08.130 --> 00:01:10.421
When you call from dalvik to
native, all you have to do

00:01:10.421 --> 00:01:12.070
is declare native
method in your class,

00:01:12.070 --> 00:01:14.920
and then implement the
corresponding native method.

00:01:14.920 --> 00:01:17.930
So for instance, here we are
reporting that the sign in

00:01:17.930 --> 00:01:20.740
has succeeded into
the native code.

00:01:20.740 --> 00:01:22.185
When you write
the native method,

00:01:22.185 --> 00:01:23.810
one thing that you
have to look out for

00:01:23.810 --> 00:01:25.550
is that you're actually
running on the UI thread.

00:01:25.550 --> 00:01:27.490
Even though you've
crossed the native barrier

00:01:27.490 --> 00:01:29.060
into native code,
that doesn't mean

00:01:29.060 --> 00:01:30.685
that you're running
on the game thread.

00:01:30.685 --> 00:01:32.400
You're actually running
on the UI thread,

00:01:32.400 --> 00:01:34.812
and if you start trying to
manipulate your game objects

00:01:34.812 --> 00:01:36.270
and game logic
there, you might run

00:01:36.270 --> 00:01:38.200
into very hard to debug issues.

00:01:38.200 --> 00:01:42.160
So one of things you can do is
just synchronize at that point.

00:01:42.160 --> 00:01:43.910
However, synchronization
may be expensive.

00:01:43.910 --> 00:01:45.534
Like if you have a
mutex or a semaphore

00:01:45.534 --> 00:01:47.891
and so on, you're going
to log that on every frame

00:01:47.891 --> 00:01:49.390
that your game is
going to draw, you

00:01:49.390 --> 00:01:50.850
might end up with
a very slow game.

00:01:50.850 --> 00:01:53.434
So one of the very useful
patterns we usually see,

00:01:53.434 --> 00:01:54.850
is you want to do
an atomic write,

00:01:54.850 --> 00:01:57.590
especially when it's a very
small data structure that you

00:01:57.590 --> 00:02:00.250
just want to like pass a
Boolean between threads,

00:02:00.250 --> 00:02:01.920
you can do just
an anatomic write.

00:02:01.920 --> 00:02:06.230
So in this case, we are using
the system dot atomic dot h.

00:02:06.230 --> 00:02:09.610
So these are a few
convenience functions

00:02:09.610 --> 00:02:12.080
that allow you to do
atomic writes and reads.

00:02:12.080 --> 00:02:16.169
In this case, we are getting
the new state from the UI thread

00:02:16.169 --> 00:02:18.710
and then writing it atomically
to that static variable called

00:02:18.710 --> 00:02:19.510
state.

00:02:19.510 --> 00:02:22.110
Because this means that when you
try to read it from your game

00:02:22.110 --> 00:02:23.949
thread, you can just
read it because this

00:02:23.949 --> 00:02:25.490
is going to be called
for any threat.

00:02:25.490 --> 00:02:28.440
You can just read it, because
since writing it is atomic,

00:02:28.440 --> 00:02:31.750
you don't have to worry about
various conditions there.

00:02:31.750 --> 00:02:33.520
So you get the state
there based on that.

00:02:33.520 --> 00:02:35.790
So this means you can actually
get the state on every frame,

00:02:35.790 --> 00:02:38.165
so you don't have to have a
callback saying yes, anything

00:02:38.165 --> 00:02:40.320
has succeeded or failed
on the native side.

00:02:40.320 --> 00:02:42.720
Because, in any
event, you're going

00:02:42.720 --> 00:02:45.220
to have to process every frame
to do animations and such.

00:02:45.220 --> 00:02:47.860
So you're already occupying
the CPU on every frame,

00:02:47.860 --> 00:02:50.380
so it doesn't really cost much
more just to read a Boolean

00:02:50.380 --> 00:02:52.380
variable to see if the
user is signed in or not.

00:02:52.380 --> 00:02:55.681
So it can eliminate some
complications there that way.

00:02:55.681 --> 00:02:57.680
So it can call a gets an
in state on every frame

00:02:57.680 --> 00:03:01.320
however, without having to
write callbacks or anything.

00:03:01.320 --> 00:03:06.020
So let's talk about the
lifecycle of a Play Games app.

00:03:06.020 --> 00:03:09.782
So back in the good old days,
I remember that writing a game

00:03:09.782 --> 00:03:11.740
was pretty easy because
there was no lifecycle.

00:03:11.740 --> 00:03:14.440
Essentially the game got
started, the game got played,

00:03:14.440 --> 00:03:17.010
and then the user
stopped the game,

00:03:17.010 --> 00:03:18.810
and it goes back to
the operating system.

00:03:18.810 --> 00:03:20.440
So that was a pretty easy time.

00:03:20.440 --> 00:03:22.196
Now, with modern
operating systems,

00:03:22.196 --> 00:03:23.570
especially on
mobile devices, you

00:03:23.570 --> 00:03:25.380
have a whole bunch
of callbacks that you

00:03:25.380 --> 00:03:26.610
have to pay attention to.

00:03:26.610 --> 00:03:27.700
So when you're game
starts, you get onCreate

00:03:27.700 --> 00:03:29.783
and then you get onStart
and then you get onResume

00:03:29.783 --> 00:03:31.710
and then you get
the WindowFocus,

00:03:31.710 --> 00:03:33.360
and then you get onPause.

00:03:33.360 --> 00:03:34.839
And then you lose
the window focus

00:03:34.839 --> 00:03:36.505
because of the lock
screen, and then you

00:03:36.505 --> 00:03:39.460
get onStop because the user has
gone back to the home screen.

00:03:39.460 --> 00:03:41.150
And then you get
onStart again, so it's

00:03:41.150 --> 00:03:42.275
a whole bunch of callbacks.

00:03:42.275 --> 00:03:44.730
Some of them are hierarchical,
some of them are not.

00:03:44.730 --> 00:03:47.230
Some of them come out of phase,
and you have to pay addition

00:03:47.230 --> 00:03:49.900
to all of those callbacks to
know when you can and when you

00:03:49.900 --> 00:03:51.440
cannot render stuff
into your game.

00:03:51.440 --> 00:03:53.540
Because sometimes you may
even have a GL surface,

00:03:53.540 --> 00:03:55.480
sometimes you don't
have a GL surface.

00:03:55.480 --> 00:03:57.050
Sometimes you should
not be running.

00:03:57.050 --> 00:03:58.700
Sometimes you should
deallocate stuff.

00:03:58.700 --> 00:04:02.120
So you have to pay attention
to all those callbacks.

00:04:02.120 --> 00:04:05.845
So it's important to keep track
in your native game of where

00:04:05.845 --> 00:04:07.970
in the lifecycle you are
regarding those callbacks.

00:04:07.970 --> 00:04:09.428
You have to know
whether or not you

00:04:09.428 --> 00:04:11.020
are between onResume
and onPause.

00:04:11.020 --> 00:04:12.840
You have to know whether or
not you have the window focus.

00:04:12.840 --> 00:04:14.923
You have to know whether
or not you have a surface

00:04:14.923 --> 00:04:17.250
or you don't have a surface,
and so on and so forth.

00:04:17.250 --> 00:04:19.583
And now, we're going to talk
about how to integrate Play

00:04:19.583 --> 00:04:22.460
Games into that flow because
it's very important as well,

00:04:22.460 --> 00:04:25.090
if you're using Play Games to
know when you can make Play

00:04:25.090 --> 00:04:27.850
Games API calls and
when you cannot.

00:04:27.850 --> 00:04:31.470
So let's try to simplify
this lifecycle a little bit.

00:04:31.470 --> 00:04:33.180
It's not as scary as it looks.

00:04:33.180 --> 00:04:35.700
So normally, this is a basic
Android activity lifecycle.

00:04:35.700 --> 00:04:37.260
You get onCreate
and you get onStart

00:04:37.260 --> 00:04:39.300
and then you get
onResume and onPause.

00:04:39.300 --> 00:04:43.200
These events are all
nested within each other,

00:04:43.200 --> 00:04:46.590
so your only going to get
onResume only after onStart.

00:04:46.590 --> 00:04:49.760
And then before you get onStop,
you're going to get onPause.

00:04:49.760 --> 00:04:51.580
So you can have a
variable that tracks

00:04:51.580 --> 00:04:53.740
where in that state
machine you are.

00:04:53.740 --> 00:04:57.170
And then, of course, you're game
should only be actively playing

00:04:57.170 --> 00:04:58.780
between onResume and onStart.

00:04:58.780 --> 00:05:02.820
And then, of course, there is
an out of phase state machine,

00:05:02.820 --> 00:05:05.530
which is the window
focus, so we know

00:05:05.530 --> 00:05:08.914
focus can come in and come
out even if it's out of phase

00:05:08.914 --> 00:05:09.830
with the other events.

00:05:09.830 --> 00:05:11.190
So you should not
assume that's going

00:05:11.190 --> 00:05:12.904
to happened between
onResume and onPause,

00:05:12.904 --> 00:05:14.820
but you should assume
that that may happen out

00:05:14.820 --> 00:05:15.860
of phase with that.

00:05:15.860 --> 00:05:18.530
So you have to keep track of
when you have the window focus.

00:05:18.530 --> 00:05:21.550
Other than that, if you're using
OpenGL, and you most likely

00:05:21.550 --> 00:05:23.569
are if you're
using NDK, you also

00:05:23.569 --> 00:05:25.735
have to keep track of when
the surface gets created,

00:05:25.735 --> 00:05:27.620
gets resized and gets destroyed.

00:05:27.620 --> 00:05:29.940
So that's one more piece--
one more moving piece

00:05:29.940 --> 00:05:31.322
that you have to keep track of.

00:05:31.322 --> 00:05:33.530
So it's only when you have
those five things that you

00:05:33.530 --> 00:05:34.937
can actually do
active game play.

00:05:34.937 --> 00:05:36.520
So you have a surface,
you have focus,

00:05:36.520 --> 00:05:40.660
and the activity is
in its resumed state.

00:05:40.660 --> 00:05:44.874
So how does the Play
Games API merge into this?

00:05:44.874 --> 00:05:46.790
So this is where we have
the game play, right?

00:05:46.790 --> 00:05:49.710
So how do you deal
with the Play Games API

00:05:49.710 --> 00:05:51.590
lifecycle on top of that?

00:05:51.590 --> 00:05:53.670
So fortunately, the
Play Games lifecycle

00:05:53.670 --> 00:05:56.280
is actually nested in
the activities lifecycle,

00:05:56.280 --> 00:05:58.860
so it's not actually as
difficult as you might imagine.

00:05:58.860 --> 00:06:01.130
So you have onStart
and onStop, so

00:06:01.130 --> 00:06:02.520
between onStart
and onStop that's

00:06:02.520 --> 00:06:06.490
when the Play Games activity
lifecycle actually happens.

00:06:06.490 --> 00:06:09.480
Typically, after
onStart-- so there's

00:06:09.480 --> 00:06:11.490
no way to keep a
connection to Play Games

00:06:11.490 --> 00:06:14.230
while your application
is not started.

00:06:14.230 --> 00:06:15.900
So whenever you get
onStop, you actually

00:06:15.900 --> 00:06:17.650
lose the connection
to Play Games and have

00:06:17.650 --> 00:06:19.310
to restore it on onStart.

00:06:19.310 --> 00:06:22.520
If you're using Game Helper
or basic Game Activity,

00:06:22.520 --> 00:06:25.167
that restoration is done
for you automatically.

00:06:25.167 --> 00:06:26.750
So you don't have
to worry about that,

00:06:26.750 --> 00:06:28.590
but you have to
know that it exists.

00:06:28.590 --> 00:06:31.280
So whenever you get
the onStart callback,

00:06:31.280 --> 00:06:33.100
you're not connected
to Play Games.

00:06:33.100 --> 00:06:36.090
And then you have to wait
for the onSignInSucceeded or

00:06:36.090 --> 00:06:37.090
onSignInFailed callback.

00:06:37.090 --> 00:06:40.590
So there is this window
of time between onStart

00:06:40.590 --> 00:06:43.390
and onSignInSucceeded where
your activity is started,

00:06:43.390 --> 00:06:45.840
it may even be resumed
or have window focus,

00:06:45.840 --> 00:06:47.472
you may even have
the GL service,

00:06:47.472 --> 00:06:49.930
but you might not be connected
to Play Games because you're

00:06:49.930 --> 00:06:51.670
waiting for the
onSignInSucceeded or

00:06:51.670 --> 00:06:53.650
onSignInFailed
callbacks to be called.

00:06:53.650 --> 00:06:55.650
Only after that point are
you actually connected

00:06:55.650 --> 00:06:57.400
to Play Games, and you
can make API calls.

00:06:57.400 --> 00:06:59.210
And remember that
when you get onStop,

00:06:59.210 --> 00:07:00.990
you get disconnected
from Play Games.

00:07:00.990 --> 00:07:02.710
So this is what the
lifecycle looks like.

00:07:02.710 --> 00:07:05.800
So to simplify
this a little bit.

00:07:05.800 --> 00:07:08.874
So what happens-- what
may go wrong in this case?

00:07:08.874 --> 00:07:10.790
So suppose that your
game is actually running,

00:07:10.790 --> 00:07:13.630
and then before you get the
onSignInSucceeded callback,

00:07:13.630 --> 00:07:16.460
you try to unlock something,
you achieve something

00:07:16.460 --> 00:07:18.640
very extraordinary and
you want to unlock it,

00:07:18.640 --> 00:07:20.140
and then you might
run into trouble.

00:07:20.140 --> 00:07:21.930
Because at that point
in the lifecycle,

00:07:21.930 --> 00:07:25.150
the Play Games API is
not accepting API calls.

00:07:25.150 --> 00:07:27.934
So if you haven't
thought about that,

00:07:27.934 --> 00:07:29.100
you're going to get a crash.

00:07:29.100 --> 00:07:30.516
And if you have
thought about that

00:07:30.516 --> 00:07:33.032
and you're perfecting it with
an is connected test, what's

00:07:33.032 --> 00:07:34.490
going to happen is
that achievement

00:07:34.490 --> 00:07:35.323
is going to be lost.

00:07:35.323 --> 00:07:37.590
So nobody wants that.

00:07:37.590 --> 00:07:40.180
So one of the strategies
that some games use

00:07:40.180 --> 00:07:43.240
is that when you are between
onStart and onSignInSucceeded,

00:07:43.240 --> 00:07:44.820
you show a please wait screen.

00:07:44.820 --> 00:07:48.190
This is usually not so
bad because the interval

00:07:48.190 --> 00:07:50.390
of time between onStart
and onSignInSucceeded

00:07:50.390 --> 00:07:51.512
is usually small.

00:07:51.512 --> 00:07:53.220
If the user has already
signed in before,

00:07:53.220 --> 00:07:54.626
it's going to be pretty small.

00:07:54.626 --> 00:07:56.250
If the user has never
signed in before,

00:07:56.250 --> 00:07:57.350
it's also going
to be pretty small

00:07:57.350 --> 00:07:58.830
because it's going
to fail quickly.

00:07:58.830 --> 00:08:01.110
So it's going to
be very-- it's not

00:08:01.110 --> 00:08:03.750
going to be typical for that to
take more than say one or two

00:08:03.750 --> 00:08:04.250
seconds.

00:08:04.250 --> 00:08:06.291
So it's probably a good
idea to put a please wait

00:08:06.291 --> 00:08:08.410
screen between onStart
and onSignInSucceeded.

00:08:08.410 --> 00:08:11.160
Or of course, just handle that
within the logic of your game.

00:08:11.160 --> 00:08:13.390
So for instance, if
every level starts

00:08:13.390 --> 00:08:16.130
with this intro screen that's
going to last five seconds,

00:08:16.130 --> 00:08:18.030
then you don't need to
put up a wait screen

00:08:18.030 --> 00:08:19.946
because you know that
SignInSucceeded is going

00:08:19.946 --> 00:08:23.320
to happen before
that pop-up-- I mean

00:08:23.320 --> 00:08:27.600
before that story
board scene goes away.

00:08:27.600 --> 00:08:30.440
But it's nice to
check for that anyway.

00:08:30.440 --> 00:08:32.360
Once that please
wait screen goes way,

00:08:32.360 --> 00:08:34.739
you know you can
safely do API calls.

00:08:34.739 --> 00:08:36.530
So that's when you try
to unlock something.

00:08:36.530 --> 00:08:39.539
So this is one of the very
useful patterns in that sense.

00:08:39.539 --> 00:08:42.789
So the actual implementation
is, of course, up to your game.

00:08:42.789 --> 00:08:45.994
You can do something very smart,
or you can do something much

00:08:45.994 --> 00:08:48.410
more simplistic, something
just like putting a please wait

00:08:48.410 --> 00:08:51.540
screen, but the important thing
is to notice that you have this

00:08:51.540 --> 00:08:54.470
lifecycle issue, and you should
be attentive in order not

00:08:54.470 --> 00:08:57.570
to make any API calls
when you shouldn't.

00:08:57.570 --> 00:09:00.636
And I guess that's pretty much
all there is to the lifecycle.

00:09:00.636 --> 00:09:02.010
Thank you very
much for watching,

00:09:02.010 --> 00:09:05.190
and we hope you
make great games.

