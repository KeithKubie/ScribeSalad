WEBVTT
Kind: captions
Language: en

00:00:01.490 --> 00:00:03.610
SUNIL JAMES: Good morning,
everybody.

00:00:03.610 --> 00:00:06.070
My name's Sunil James, and I'm
a product manager with Google

00:00:06.070 --> 00:00:07.310
Cloud Platform.

00:00:07.310 --> 00:00:09.490
With me is John Cormie,
a senior

00:00:09.490 --> 00:00:11.520
engineer also on the team.

00:00:11.520 --> 00:00:13.670
And today, we're going to be
introducing to you a brand new

00:00:13.670 --> 00:00:16.650
feature in Google Compute Engine
that delivers to you

00:00:16.650 --> 00:00:19.710
greater network control
than ever before.

00:00:19.710 --> 00:00:22.590
So let's get to it.

00:00:22.590 --> 00:00:25.370
So I know this is supposed to
be an advanced session.

00:00:25.370 --> 00:00:28.100
But I thought it wise to take
just a few minutes to walk you

00:00:28.100 --> 00:00:29.580
through some of the
basics of what GCE

00:00:29.580 --> 00:00:30.830
networking has to offer.

00:00:34.260 --> 00:00:37.390
So first, Google Computer Engine
allows you to create a

00:00:37.390 --> 00:00:40.470
private layer three network
within the context of the

00:00:40.470 --> 00:00:41.980
broader Google Cloud
that can cut across

00:00:41.980 --> 00:00:44.030
multiple GCE regions.

00:00:44.030 --> 00:00:48.500
By default, a GCE region is
sized to a /16 insider

00:00:48.500 --> 00:00:53.820
notation, which is about 65,000
RFC 1918 IP addresses.

00:00:53.820 --> 00:00:57.850
Second, GCE gives you the
ability to attach a static,

00:00:57.850 --> 00:01:01.750
public IP address to any given
instance within your network.

00:01:01.750 --> 00:01:04.480
These IPs are portable across
zones within a region.

00:01:07.160 --> 00:01:11.410
Third, as part of the underlying
network fabric, GCE

00:01:11.410 --> 00:01:14.510
delivers to you industrial grade
firewall technology that

00:01:14.510 --> 00:01:17.020
enables you to define which
incoming connections are

00:01:17.020 --> 00:01:19.920
accepted by which instances.

00:01:19.920 --> 00:01:23.610
And by the way, this fabric is
the same exact fabric, same

00:01:23.610 --> 00:01:26.330
global, high bandwidth, low
latency backbone network

00:01:26.330 --> 00:01:29.120
that's used by all the other
Google created Google products

00:01:29.120 --> 00:01:30.680
that you probably use
every single day.

00:01:36.650 --> 00:01:39.580
So we launched GCE last year.

00:01:39.580 --> 00:01:42.810
And we've spent a lot of time
talking to developers, talking

00:01:42.810 --> 00:01:45.700
to customers, trying to
understand what they want to

00:01:45.700 --> 00:01:48.730
do, what they want to achieve.

00:01:48.730 --> 00:01:51.290
And from the networking
standpoint, it's a

00:01:51.290 --> 00:01:52.530
long list of things.

00:01:52.530 --> 00:01:55.180
And we're going to be working
very hard to deliver month

00:01:55.180 --> 00:01:57.180
over month over the coming
months a great set of

00:01:57.180 --> 00:01:58.830
networking capabilities.

00:01:58.830 --> 00:02:01.240
But to start off with for today,
I want to talk about

00:02:01.240 --> 00:02:04.980
some of the nearer term or
most pressing issues that

00:02:04.980 --> 00:02:07.960
customers have said they'd like
to be able to tackle.

00:02:07.960 --> 00:02:10.750
First, we've had customers say
to us, I'd really like to be

00:02:10.750 --> 00:02:13.260
able to create and enable
hybrid cloud.

00:02:13.260 --> 00:02:16.340
I'd like to be able to connect
my existing data centers with

00:02:16.340 --> 00:02:18.660
my private GCE networks so
that I can actually move

00:02:18.660 --> 00:02:22.700
workloads between two without
necessarily breaking the

00:02:22.700 --> 00:02:26.730
security barrier that exist
with my existing WAN.

00:02:26.730 --> 00:02:29.940
Another use case has been, I'd
really like to be able to have

00:02:29.940 --> 00:02:34.040
the ability to have all my
private VMs share just one,

00:02:34.040 --> 00:02:35.010
static IP address.

00:02:35.010 --> 00:02:36.070
Just give me a NAT
opportunity.

00:02:36.070 --> 00:02:38.230
Or give me a NAT instance,
for example.

00:02:38.230 --> 00:02:40.540
And then third, we've had
customers who say, I want to

00:02:40.540 --> 00:02:43.170
be able to instrument proxies
within the context of my

00:02:43.170 --> 00:02:45.460
networks so that I can do
things like enforce AUP

00:02:45.460 --> 00:02:49.050
policies and things
of that sort.

00:02:49.050 --> 00:02:50.850
So we've digested all
of this feedback.

00:02:50.850 --> 00:02:53.960
And we're really proud and
really excited to give you

00:02:53.960 --> 00:02:56.990
guys a chance to take a look at
the set of advanced routing

00:02:56.990 --> 00:03:00.670
capabilities that GCE is
bringing to market today.

00:03:04.330 --> 00:03:07.680
So the work that we've done
with the advanced routing

00:03:07.680 --> 00:03:09.930
extends upon a set of networking
technologies that

00:03:09.930 --> 00:03:13.000
have been in GCE
since day one.

00:03:13.000 --> 00:03:16.070
The diagram on this slide
describe some of the basic

00:03:16.070 --> 00:03:19.460
components within the GCE
network, starting with that

00:03:19.460 --> 00:03:23.080
red object, which is a massively
scalable, virtual

00:03:23.080 --> 00:03:26.690
router that sits at the core of
every single GCE network.

00:03:26.690 --> 00:03:30.010
Every single VM in your network
is directly connected

00:03:30.010 --> 00:03:30.560
to this router.

00:03:30.560 --> 00:03:33.825
So when a VM needs to send a
packet, the router takes a

00:03:33.825 --> 00:03:36.220
look at the VMs [INAUDIBLE] a
routing table, as indicated by

00:03:36.220 --> 00:03:38.980
those tan boxes, and then
determines what the

00:03:38.980 --> 00:03:40.690
next hop should be.

00:03:40.690 --> 00:03:45.080
Starting today, we're beginning
to give you greater

00:03:45.080 --> 00:03:49.400
ability to actually configure
this router than ever before.

00:03:49.400 --> 00:03:50.950
And that's what GCE advanced
routing's all about.

00:03:56.210 --> 00:03:58.740
As you'll see in the rest of
this presentation, we've

00:03:58.740 --> 00:04:00.260
extended the routing
capabilities so that you can

00:04:00.260 --> 00:04:02.380
do many of the things that
I was talking about

00:04:02.380 --> 00:04:04.130
beforehand and more.

00:04:04.130 --> 00:04:06.150
But a few procedural items just
make sure we're all on

00:04:06.150 --> 00:04:06.650
the same page.

00:04:06.650 --> 00:04:10.790
So first, each cloud project you
create includes one routes

00:04:10.790 --> 00:04:13.710
collection that contains all the
routes applicable to the

00:04:13.710 --> 00:04:16.850
GCE network's provision as
part of that project.

00:04:16.850 --> 00:04:20.829
Second, each GCE network has two
default routes, one that

00:04:20.829 --> 00:04:23.320
automatically routes traffic to
the internet, and one that

00:04:23.320 --> 00:04:25.700
routes VM to VM traffic within
your network itself.

00:04:29.180 --> 00:04:32.110
So let's talk about some of the
components of what is in

00:04:32.110 --> 00:04:33.820
GCE advanced routing.

00:04:33.820 --> 00:04:36.500
First off, we have
route names.

00:04:36.500 --> 00:04:38.530
So route name is the user
friendly name of a route.

00:04:38.530 --> 00:04:41.370
In this case, we named the route
vpn-route to indicate a

00:04:41.370 --> 00:04:43.700
route for VPN traffic.

00:04:43.700 --> 00:04:45.210
Second, we have network.

00:04:45.210 --> 00:04:48.280
Network is the name of the GCE
network to which the route is

00:04:48.280 --> 00:04:51.300
applicable to.

00:04:51.300 --> 00:04:53.370
Third, we have destination
range.

00:04:53.370 --> 00:04:55.660
This is the set of IP addresses
to which the route's

00:04:55.660 --> 00:04:58.500
going to apply.

00:04:58.500 --> 00:05:00.460
Fourth, we have instance tags.

00:05:00.460 --> 00:05:04.260
So instance tags tell the
virtual router which VMs a

00:05:04.260 --> 00:05:05.850
route needs to apply to.

00:05:05.850 --> 00:05:08.290
So if a route has no tags, for
example, it then applies to

00:05:08.290 --> 00:05:09.970
all the VMs within the
network itself.

00:05:13.350 --> 00:05:16.580
Next hop, it directs the
router to send matching

00:05:16.580 --> 00:05:18.950
traffic to a designated
VM or a gateway.

00:05:18.950 --> 00:05:20.900
Next hop VMs can be
identified both by

00:05:20.900 --> 00:05:23.810
name and by IP address.

00:05:23.810 --> 00:05:25.940
And then lastly, priority value,
which is used to help

00:05:25.940 --> 00:05:28.220
break ties.

00:05:28.220 --> 00:05:30.940
Rather, I'm sorry, priority
value, which is used to help

00:05:30.940 --> 00:05:34.480
break ties when there are more
than one most specific

00:05:34.480 --> 00:05:35.860
matching route.

00:05:35.860 --> 00:05:38.280
So lower priority value
actually equals higher

00:05:38.280 --> 00:05:40.400
priority, like when you're
prioritizing

00:05:40.400 --> 00:05:41.650
bugs, if you will.

00:05:44.480 --> 00:05:47.490
So when a packet leaves a VM,
the virtual router employees

00:05:47.490 --> 00:05:49.470
the following logic
to decide how to

00:05:49.470 --> 00:05:51.210
route the packet itself.

00:05:51.210 --> 00:05:54.730
First, GCE only keeps the most
specific routes that match a

00:05:54.730 --> 00:05:56.650
packet's destination.

00:05:56.650 --> 00:05:59.940
Next, it looks at the remaining
routes, and then

00:05:59.940 --> 00:06:02.640
only keeps those with the lowest
priority value, which

00:06:02.640 --> 00:06:06.460
as we mentioned earlier indicate
highest priority.

00:06:06.460 --> 00:06:09.310
And then lastly, if there are
any remaining ties, the

00:06:09.310 --> 00:06:11.620
virtual router then computes a
hash based on the fields you

00:06:11.620 --> 00:06:15.140
see in the slide to select
the next hop.

00:06:15.140 --> 00:06:18.470
If the next hop is found, the
virtual router then forwards

00:06:18.470 --> 00:06:19.190
the packet along.

00:06:19.190 --> 00:06:21.210
If it's not, the virtual
router's going to drop that

00:06:21.210 --> 00:06:24.115
packet and reply back with an
ICP destination or network

00:06:24.115 --> 00:06:25.365
unreachable error.

00:06:33.540 --> 00:06:36.590
And one last thing I'd like to
mention to you is that before

00:06:36.590 --> 00:06:40.120
you can employee a VM as a
forwarding device, you must

00:06:40.120 --> 00:06:44.740
upon creating that VM set the
can_ip_forward flag as shown

00:06:44.740 --> 00:06:46.390
in the example GCE [INAUDIBLE]
command that's

00:06:46.390 --> 00:06:47.670
on the screen here.

00:06:47.670 --> 00:06:51.180
The reason for this is because
GCE's default security posture

00:06:51.180 --> 00:06:53.940
prevents VMs from spoofing
the source IP address

00:06:53.940 --> 00:06:55.480
of egressing packets.

00:06:55.480 --> 00:06:58.390
As such, enabling this flag
actually allows the VM to

00:06:58.390 --> 00:07:00.940
forward packets with a source IP
address other than its own,

00:07:00.940 --> 00:07:02.500
which is exactly the
functionality we need

00:07:02.500 --> 00:07:03.750
here in this case.

00:07:06.390 --> 00:07:09.340
Now, I know that these

00:07:09.340 --> 00:07:10.680
capabilities are really powerful.

00:07:10.680 --> 00:07:13.260
But I know that they're also
sometimes really complex.

00:07:13.260 --> 00:07:17.030
And so personally, I find
it helpful to visualize

00:07:17.030 --> 00:07:17.650
this kind of stuff.

00:07:17.650 --> 00:07:20.310
So maybe John, you can walk us
through some examples to

00:07:20.310 --> 00:07:21.770
describe what we've
been having here.

00:07:21.770 --> 00:07:22.150
JOHN CARMIE: Yeah.

00:07:22.150 --> 00:07:23.170
Thanks, Sunil.

00:07:23.170 --> 00:07:24.960
Thank you.

00:07:24.960 --> 00:07:27.690
All right, so for each one of
those things that Sunil just

00:07:27.690 --> 00:07:30.190
told you about, we're going to
illustrate it with an example.

00:07:30.190 --> 00:07:32.720
The first thing I want to show
you an example of is

00:07:32.720 --> 00:07:35.300
constructing the
routing table.

00:07:35.300 --> 00:07:38.460
All right, so here on the white
board, I've drawn a

00:07:38.460 --> 00:07:40.050
network in Compute Engine.

00:07:40.050 --> 00:07:42.740
And we have the project's route
collection of to the

00:07:42.740 --> 00:07:44.080
right hand side there.

00:07:44.080 --> 00:07:46.990
The components are the route
name, one through three, the

00:07:46.990 --> 00:07:50.720
tags, which are represented as
little tag shaped colors, and

00:07:50.720 --> 00:07:52.960
the network, which is
the third column.

00:07:52.960 --> 00:07:56.220
So the routing table for an
instance, remember, is a

00:07:56.220 --> 00:07:58.170
subset of this project's
route collection.

00:07:58.170 --> 00:08:02.220
And the system constructs it
by selecting rows from that

00:08:02.220 --> 00:08:06.320
table where the network matches
and the tags match.

00:08:06.320 --> 00:08:08.580
You need to know that if there
are no tags on a route, it

00:08:08.580 --> 00:08:10.630
means it matches any VM.

00:08:10.630 --> 00:08:13.850
So let's look at one example,
that top VM there, number one.

00:08:13.850 --> 00:08:16.310
It gets route one because route
one has no tags, and so

00:08:16.310 --> 00:08:17.800
it matches any VM.

00:08:17.800 --> 00:08:19.880
It gets route three because
it shares the

00:08:19.880 --> 00:08:21.010
green tag in common.

00:08:21.010 --> 00:08:23.480
It does not get route two
because it doesn't share any

00:08:23.480 --> 00:08:24.690
tag in common.

00:08:24.690 --> 00:08:27.290
If you're familiar with Compute
Engine firewalls, this

00:08:27.290 --> 00:08:30.600
is all very similar.

00:08:30.600 --> 00:08:34.390
All right, now that we have
a routing table, imagine a

00:08:34.390 --> 00:08:35.470
packet leaves the VM.

00:08:35.470 --> 00:08:38.155
And the system's got to pick
the next hop for it.

00:08:38.155 --> 00:08:40.450
It's going to consult this
routing table and walk through

00:08:40.450 --> 00:08:44.570
that route selection recipe that
Sunil just told us about.

00:08:44.570 --> 00:08:45.250
There are three steps.

00:08:45.250 --> 00:08:48.350
And I'm going to illustrate two
of those with examples.

00:08:48.350 --> 00:08:50.890
The first thing the system does,
recall, is it's going to

00:08:50.890 --> 00:08:54.670
pick the most specific routes,
the most specific matching

00:08:54.670 --> 00:08:58.400
routes from the instances
table.

00:08:58.400 --> 00:09:01.140
So for again, the visual
thinkers out there, this is

00:09:01.140 --> 00:09:03.940
how I think about most
specific matches.

00:09:03.940 --> 00:09:05.960
In this example, we have
a packet destined for

00:09:05.960 --> 00:09:07.420
10.120.1.2.

00:09:07.420 --> 00:09:09.420
It's that star at the
bottom there.

00:09:09.420 --> 00:09:13.400
And the routing table is
the four routes in

00:09:13.400 --> 00:09:14.650
the upper right corner.

00:09:16.810 --> 00:09:18.440
First, I want to tell you a
little bit about the notation

00:09:18.440 --> 00:09:19.460
if it's not familiar.

00:09:19.460 --> 00:09:22.710
For example, 10.120.0.0/16.

00:09:22.710 --> 00:09:25.240
That's how we denote
an IP prefix.

00:09:25.240 --> 00:09:26.580
The thing on the left-hand
side of the

00:09:26.580 --> 00:09:28.040
slash is the IP prefix.

00:09:28.040 --> 00:09:29.910
And the thing on the right hand
side tells you how many

00:09:29.910 --> 00:09:32.430
bits of that address
are significant.

00:09:32.430 --> 00:09:36.760
So 10.120.0.0/16 means anything

00:09:36.760 --> 00:09:41.610
that starts with 10.120.

00:09:41.610 --> 00:09:44.490
Now, I like to think of the IP
address space as a giant

00:09:44.490 --> 00:09:45.480
binary tree.

00:09:45.480 --> 00:09:47.330
And the root of that tree
is the top of that

00:09:47.330 --> 00:09:48.830
black triangle there.

00:09:48.830 --> 00:09:51.810
The leaves, all 2 to the 32 of
them, are the IP addresses

00:09:51.810 --> 00:09:52.330
themselves.

00:09:52.330 --> 00:09:53.930
And they run along the bottom.

00:09:53.930 --> 00:09:56.590
And the interior nodes
are IP prefixes.

00:09:56.590 --> 00:10:00.050
And that's where we can hang
routes off in our table.

00:10:00.050 --> 00:10:03.840
So there's four routes
in this example.

00:10:03.840 --> 00:10:07.500
And you can see visually that
for this destination, three of

00:10:07.500 --> 00:10:10.600
them match-- black, red, and
blue-- because their

00:10:10.600 --> 00:10:14.580
destination lies within the
sub-trees of those routes.

00:10:14.580 --> 00:10:16.830
It does not much green because
it doesn't lie within the

00:10:16.830 --> 00:10:18.480
green subtree.

00:10:18.480 --> 00:10:19.790
OK, so we have three matches.

00:10:19.790 --> 00:10:22.260
But we only care about
the most specific.

00:10:22.260 --> 00:10:26.280
Now again, you can see visually
that the most

00:10:26.280 --> 00:10:28.180
specific routes are the
smallest subtrees.

00:10:28.180 --> 00:10:30.100
And so we actually have a
tie for most specific

00:10:30.100 --> 00:10:32.120
between red and blue.

00:10:32.120 --> 00:10:34.660
Even though black matches,
it's less specific

00:10:34.660 --> 00:10:35.280
than red and blue.

00:10:35.280 --> 00:10:37.780
And so it doesn't apply.

00:10:37.780 --> 00:10:41.720
All right, so now we have the
most specific matches.

00:10:41.720 --> 00:10:44.800
The next step of the route
selection recipe is the

00:10:44.800 --> 00:10:46.250
priority selection.

00:10:46.250 --> 00:10:48.160
That's pretty straightforward.

00:10:48.160 --> 00:10:50.220
We discard routes of lower
priority, so I'm not going to

00:10:50.220 --> 00:10:51.040
illustrate that.

00:10:51.040 --> 00:10:55.920
We'll jump to the third step,
which is flow hashing.

00:10:55.920 --> 00:10:57.470
So there can only
be one next hop.

00:10:57.470 --> 00:11:02.160
And so if you have ties left
that are equally specific and

00:11:02.160 --> 00:11:05.510
equal priority, we have to
pick one of them somehow.

00:11:05.510 --> 00:11:08.590
And so as Sunil said earlier,
the system computes a hash of

00:11:08.590 --> 00:11:09.890
the destination packet.

00:11:09.890 --> 00:11:12.590
And you can see this at the
bottom of the slide.

00:11:12.590 --> 00:11:13.740
H is the hash function.

00:11:13.740 --> 00:11:16.820
And it operates on all the parts
of that packet leaving

00:11:16.820 --> 00:11:20.630
the VM-- source IP, the source
port if there is one, the

00:11:20.630 --> 00:11:23.060
destination IP, the destination
port if there is

00:11:23.060 --> 00:11:24.645
one, and the protocol.

00:11:24.645 --> 00:11:29.050
And so out of the hash function,
we get a number.

00:11:29.050 --> 00:11:32.240
And we use that number to index
into any remaining ties.

00:11:32.240 --> 00:11:35.890
And whichever route that picks,
that's where the packet

00:11:35.890 --> 00:11:38.350
goes as the next hop.

00:11:38.350 --> 00:11:40.630
OK, so now you understand
the algorithm and the

00:11:40.630 --> 00:11:41.720
mechanics of this.

00:11:41.720 --> 00:11:43.170
But like, why?

00:11:43.170 --> 00:11:43.800
Why do we do this?

00:11:43.800 --> 00:11:45.220
What is the hash good for?

00:11:45.220 --> 00:11:47.750
Well, the answer is scale.

00:11:47.750 --> 00:11:50.940
And I'm going to illustrate
it with this example.

00:11:50.940 --> 00:11:53.440
So in this example network,
the administrator has

00:11:53.440 --> 00:11:56.570
configured it so that all
traffic going to the internet

00:11:56.570 --> 00:11:59.840
needs to pass through a gateway
VM, say for some

00:11:59.840 --> 00:12:01.780
security or policy reason.

00:12:01.780 --> 00:12:06.440
Now, this works fine for a
while, but the number of VMs

00:12:06.440 --> 00:12:08.490
in his or her network is
growing over time.

00:12:08.490 --> 00:12:10.890
And so eventually, we get to a
point where no one gateway can

00:12:10.890 --> 00:12:12.770
handle the number of
packets that are

00:12:12.770 --> 00:12:14.290
flowing to the internet.

00:12:14.290 --> 00:12:18.400
And so yeah, you can buy a
bigger VM for the gateway to

00:12:18.400 --> 00:12:20.140
have more power to process
those packets.

00:12:20.140 --> 00:12:23.410
But eventually, you're buying
our biggest VM, and you can't

00:12:23.410 --> 00:12:24.270
scale up anymore.

00:12:24.270 --> 00:12:25.140
You have to scale out.

00:12:25.140 --> 00:12:27.190
And so as you can see in this
picture, we've scaled out by

00:12:27.190 --> 00:12:29.100
adding a second gateway.

00:12:29.100 --> 00:12:31.220
But the second gateway only
helps you if you can

00:12:31.220 --> 00:12:33.330
distribute load across
gateways.

00:12:33.330 --> 00:12:35.360
And so that's where this
hash function comes in.

00:12:35.360 --> 00:12:38.730
What the hash function does
is assigns flows to

00:12:38.730 --> 00:12:40.660
next hops at random.

00:12:40.660 --> 00:12:45.050
And so as the number of flows
grows large, you are

00:12:45.050 --> 00:12:48.200
distributing your load more or
less evenly across gateways.

00:12:48.200 --> 00:12:50.310
Not perfectly evenly, because
everyone is kind of

00:12:50.310 --> 00:12:51.680
a random coin flip.

00:12:51.680 --> 00:12:53.540
But as the number of flows
gets large, it's

00:12:53.540 --> 00:12:54.740
more or less even.

00:12:54.740 --> 00:12:59.430
And so that's load balancing
of flows leaving the VMs.

00:12:59.430 --> 00:13:03.990
Now, note that we don't assign
packets to gateways randomly.

00:13:03.990 --> 00:13:05.910
We assign flows randomly.

00:13:05.910 --> 00:13:09.440
And so that's important because
for protocols like

00:13:09.440 --> 00:13:12.010
TCP, if you're processing
packets in parallel, they can

00:13:12.010 --> 00:13:12.630
get out of order.

00:13:12.630 --> 00:13:13.880
And that slows you down.

00:13:16.980 --> 00:13:18.840
All right, so we've done
a lot of talking

00:13:18.840 --> 00:13:20.460
about advanced routing.

00:13:20.460 --> 00:13:22.290
I'm really excited to be
able to show it to you

00:13:22.290 --> 00:13:25.110
today in our demo.

00:13:25.110 --> 00:13:28.450
What we're going to do is build
a site to site VPN using

00:13:28.450 --> 00:13:31.280
Compute Engine, open source
software, and

00:13:31.280 --> 00:13:33.290
the new routing feature.

00:13:33.290 --> 00:13:35.510
But you know, we're engineers.

00:13:35.510 --> 00:13:37.250
We're not cowboys or cowgirls.

00:13:37.250 --> 00:13:38.910
We have to design our
network first.

00:13:38.910 --> 00:13:41.210
So first thing we're going to
do is jump on the whiteboard

00:13:41.210 --> 00:13:43.140
and sketch out a
network design.

00:13:43.140 --> 00:13:45.190
And you know, it's going to take
a few iterations to get

00:13:45.190 --> 00:13:46.090
something workable.

00:13:46.090 --> 00:13:48.610
And I hope those iterations will
motivate why routes are

00:13:48.610 --> 00:13:51.320
important and a good
and useful thing.

00:13:51.320 --> 00:13:54.770
OK, after we have the design,
we're going to use the gcutil

00:13:54.770 --> 00:13:59.400
command line tool to show you
the resources in GCE that

00:13:59.400 --> 00:14:03.400
we've already created to model
this network design.

00:14:03.400 --> 00:14:07.160
Finally, we're going to SSH into
VMs, send some packets,

00:14:07.160 --> 00:14:09.610
and see them moving through our
network in the way we've

00:14:09.610 --> 00:14:11.870
configured using the trace
route tool and

00:14:11.870 --> 00:14:13.120
the TCP dump tool.

00:14:17.390 --> 00:14:19.920
OK, so first the design phase.

00:14:19.920 --> 00:14:22.990
Here's an existing,
hypothetical, on premises,

00:14:22.990 --> 00:14:26.650
back office application that we
want to move to the cloud.

00:14:26.650 --> 00:14:27.830
There's a couple parts.

00:14:27.830 --> 00:14:31.580
There's the front end here,
those office FE machines.

00:14:31.580 --> 00:14:32.990
Those are the database
clients.

00:14:32.990 --> 00:14:35.750
And there's the back end,
the database itself.

00:14:35.750 --> 00:14:37.550
All these parts live
on a private

00:14:37.550 --> 00:14:42.260
RFC1918 real world network.

00:14:42.260 --> 00:14:44.750
What I want you to notice
about this very simple

00:14:44.750 --> 00:14:47.100
application is that there's
actually two layers of

00:14:47.100 --> 00:14:48.330
security here.

00:14:48.330 --> 00:14:50.520
The first layer is the
application layer.

00:14:50.520 --> 00:14:56.040
And what I mean by that is those
database clients need to

00:14:56.040 --> 00:14:58.280
have a username and password
to log into the database.

00:14:58.280 --> 00:15:00.901
And that secret credential is
embedded in them, say it's in

00:15:00.901 --> 00:15:02.860
a config file that's maybe
only readable by some

00:15:02.860 --> 00:15:05.200
user on that box.

00:15:05.200 --> 00:15:06.690
The second layer of
security is the

00:15:06.690 --> 00:15:08.390
network layer of security.

00:15:08.390 --> 00:15:09.750
None of these pieces
are connected

00:15:09.750 --> 00:15:10.630
to the public internet.

00:15:10.630 --> 00:15:13.110
And so if you want to access
them, you have to be

00:15:13.110 --> 00:15:15.520
physically connected
to that network.

00:15:15.520 --> 00:15:16.770
Now, notice these
two layers are

00:15:16.770 --> 00:15:19.340
independent and kind of redundant.

00:15:19.340 --> 00:15:20.590
They back each other up.

00:15:20.590 --> 00:15:23.470
So if know the username and
password to the database, but

00:15:23.470 --> 00:15:25.250
you aren't connected to the
network, you're out of luck.

00:15:25.250 --> 00:15:26.960
You can't access the data.

00:15:26.960 --> 00:15:30.440
And conversely, if you somehow
break into the office building

00:15:30.440 --> 00:15:31.820
and connect to the network,
but you don't know the

00:15:31.820 --> 00:15:35.080
username and password,
again you're stuck.

00:15:35.080 --> 00:15:38.860
So these kind of overlapping
or independent, redundant

00:15:38.860 --> 00:15:41.000
security layers, that's
something we're going to try

00:15:41.000 --> 00:15:43.690
and preserve as we move
to the cloud.

00:15:43.690 --> 00:15:44.520
Now, one constraint.

00:15:44.520 --> 00:15:45.430
We're not going to
move the whole

00:15:45.430 --> 00:15:46.770
application to the cloud.

00:15:46.770 --> 00:15:49.040
We're just going to move
the front ends.

00:15:49.040 --> 00:15:50.960
Say, for whatever reason, just
to make it interesting, we'll

00:15:50.960 --> 00:15:52.655
keep OfficeDB--

00:15:52.655 --> 00:15:54.580
it has to stay in office-net.

00:15:58.250 --> 00:16:01.110
All right, so here's our first
shot at doing this.

00:16:01.110 --> 00:16:03.440
Let's be totally naive, just
do the simplest thing that

00:16:03.440 --> 00:16:05.190
could possibly work.

00:16:05.190 --> 00:16:08.480
We'll take those database
clients, spin up VMs for them.

00:16:08.480 --> 00:16:09.840
Well, first we have to
create a network.

00:16:09.840 --> 00:16:12.820
So we'll create a network,
cloud-net, in Compute Engine.

00:16:12.820 --> 00:16:19.190
We'll take our address space,
our RFC1918, it's in the 10.

00:16:19.190 --> 00:16:19.750
range.

00:16:19.750 --> 00:16:20.470
And we'll split it.

00:16:20.470 --> 00:16:22.610
We'll give half the address
space to the cloud, and keep

00:16:22.610 --> 00:16:25.240
half in office-net.

00:16:25.240 --> 00:16:27.410
We'll spin up some VMs to
represent those database

00:16:27.410 --> 00:16:29.890
clients, give them public
IP addresses.

00:16:29.890 --> 00:16:32.493
And well, since they need to
talk to OfficeDB, we better

00:16:32.493 --> 00:16:34.010
put that on the public
internet, too.

00:16:34.010 --> 00:16:35.940
And so now, great, everyone
can talk to each other.

00:16:35.940 --> 00:16:37.390
And we're done.

00:16:37.390 --> 00:16:39.030
Well, no.

00:16:39.030 --> 00:16:41.710
This is a nonstarter for me from
a security perspective

00:16:41.710 --> 00:16:44.640
because we've thrown away our
network layer of security.

00:16:44.640 --> 00:16:48.090
Now, anyone at any coffee shop
Wi-Fi connection can access

00:16:48.090 --> 00:16:51.280
our resources over
the internet.

00:16:51.280 --> 00:16:53.955
And so we've thrown away that
network layer of security.

00:16:56.870 --> 00:17:00.280
All right, so let's try again
and sprinkle some VPN magic on

00:17:00.280 --> 00:17:03.600
this design and see
if that helps us.

00:17:03.600 --> 00:17:05.890
We'll take OfficeDB off the
public internet, put it back

00:17:05.890 --> 00:17:06.849
in office-net.

00:17:06.849 --> 00:17:07.829
That was a bad idea.

00:17:07.829 --> 00:17:08.990
Let's not do that.

00:17:08.990 --> 00:17:13.010
Put it back in office-net
behind the firewall.

00:17:13.010 --> 00:17:16.480
And we'll keep those front end
VMs on the public network.

00:17:16.480 --> 00:17:21.010
And we'll spin up VPN tunnels
that connect them to the

00:17:21.010 --> 00:17:23.410
router of office-net.

00:17:23.410 --> 00:17:25.644
Say IPsec is your
VPN connection.

00:17:28.580 --> 00:17:30.940
By the way, this is possible
without advanced routing.

00:17:30.940 --> 00:17:32.220
You could have done
this a week ago

00:17:32.220 --> 00:17:34.180
before we launched it.

00:17:34.180 --> 00:17:37.890
But I see three problems with
this design that I want to

00:17:37.890 --> 00:17:39.200
share with you.

00:17:39.200 --> 00:17:42.050
First problem I see is that if
you have n of those front end

00:17:42.050 --> 00:17:45.360
VMs, n of those database
clients, you need n tunnels.

00:17:45.360 --> 00:17:48.000
This is more of a remote
access than a

00:17:48.000 --> 00:17:49.300
site to site VPN.

00:17:49.300 --> 00:17:51.370
And so for each of those
tunnels, that's an entry in

00:17:51.370 --> 00:17:53.000
that router's config file.

00:17:53.000 --> 00:17:55.890
And as that config file grows
larger with all those tunnels,

00:17:55.890 --> 00:17:57.230
your network administrator's
starting

00:17:57.230 --> 00:17:58.770
to get sad and grumpy.

00:17:58.770 --> 00:18:00.260
So that's a problem.

00:18:00.260 --> 00:18:02.290
n tunnels is a lot to manage.

00:18:02.290 --> 00:18:05.050
Oh, and moreover, every time you
want to scale up or down

00:18:05.050 --> 00:18:07.850
those VMs in the cloud, which
is touted as one of the

00:18:07.850 --> 00:18:10.260
benefits, you have to change
that config file to add or

00:18:10.260 --> 00:18:11.210
remove tunnels.

00:18:11.210 --> 00:18:12.550
That's kind of a management
pain.

00:18:12.550 --> 00:18:14.360
That's the first
problem I see.

00:18:14.360 --> 00:18:17.200
The second problem I see
is that those VMs

00:18:17.200 --> 00:18:18.380
have to have special--

00:18:18.380 --> 00:18:20.500
their operating system, their
guest OS-- needs to be

00:18:20.500 --> 00:18:22.430
specially configured
to use the VPN.

00:18:22.430 --> 00:18:24.910
Their local routing table needs
to know which packets go

00:18:24.910 --> 00:18:28.390
over the VPN and which
packets don't.

00:18:28.390 --> 00:18:31.990
And so that's a pain to manage
because you have a bunch of

00:18:31.990 --> 00:18:35.240
configurations spread out
over all these VMs.

00:18:35.240 --> 00:18:38.440
Oh, and you need root access to
set up those routing tables

00:18:38.440 --> 00:18:40.000
because it's a privilege
operation.

00:18:40.000 --> 00:18:43.450
So another management pain
multiplied by n.

00:18:43.450 --> 00:18:48.020
The final problem I see with
this design is that, well, how

00:18:48.020 --> 00:18:51.970
do those cloud FEVMs, those
database clients, actually

00:18:51.970 --> 00:18:54.450
authenticate when they connect
to the router?

00:18:54.450 --> 00:18:55.950
How does the router know
that they're allowed to

00:18:55.950 --> 00:18:57.340
connect to the VPN?

00:18:57.340 --> 00:19:00.940
Look, there must be some secret
key, or credential, or

00:19:00.940 --> 00:19:04.310
something also embedded on
those clouds FE VMs that

00:19:04.310 --> 00:19:06.670
allows them access
to that network.

00:19:06.670 --> 00:19:10.020
And wow, that credential is
stored in the exact same place

00:19:10.020 --> 00:19:11.930
as the application
layer credential.

00:19:11.930 --> 00:19:14.440
And so even though it seems like
we have a network layer

00:19:14.440 --> 00:19:17.760
of security and an application
layer of security, they're not

00:19:17.760 --> 00:19:19.740
really that independent because
the secrets are stored

00:19:19.740 --> 00:19:20.990
in the exact same place.

00:19:25.470 --> 00:19:30.040
So here's our final design that
I want to propose to you

00:19:30.040 --> 00:19:31.290
guys today.

00:19:33.510 --> 00:19:37.430
What we're going to do is take
the VPN logic and move it out

00:19:37.430 --> 00:19:41.060
of those client VMs and into
the network and into a new,

00:19:41.060 --> 00:19:43.550
designated, router VM that
you can see there

00:19:43.550 --> 00:19:45.660
cloud-vpn-gateway on the left.

00:19:45.660 --> 00:19:47.460
And so he's going to terminate
the tunnel that

00:19:47.460 --> 00:19:49.300
goes to office router.

00:19:49.300 --> 00:19:52.840
And we're going to use GCE
routes to direct traffic

00:19:52.840 --> 00:19:57.870
destined for the VPN to that
designated VPN gateway VM.

00:19:57.870 --> 00:20:00.690
Now, this addresses those three
problems I claim from

00:20:00.690 --> 00:20:01.830
the last slide.

00:20:01.830 --> 00:20:05.140
First of all, now a number of
VPN tunnels scales with the

00:20:05.140 --> 00:20:08.300
number of packets per second
that you want to send over it,

00:20:08.300 --> 00:20:09.590
not the number of users.

00:20:09.590 --> 00:20:12.140
So you can probably get away
with fewer tunnels.

00:20:12.140 --> 00:20:14.950
The second problem it addresses
is that now those

00:20:14.950 --> 00:20:16.900
client VMs can be
totally stock.

00:20:16.900 --> 00:20:18.350
They don't know anything
about the VPN.

00:20:18.350 --> 00:20:20.540
They can just dump packets on
the network, and the network

00:20:20.540 --> 00:20:21.910
will figure out where they're
going based on

00:20:21.910 --> 00:20:23.880
the destination address.

00:20:23.880 --> 00:20:26.720
The third problem this addresses
is that now the

00:20:26.720 --> 00:20:29.610
secrets that allow you to
authenticate and construct

00:20:29.610 --> 00:20:31.700
that VPN tunnel live in a
different place than the

00:20:31.700 --> 00:20:33.520
application layer secrets.

00:20:33.520 --> 00:20:35.920
And so you can also have some
policy to back this up and

00:20:35.920 --> 00:20:37.050
make it even more independent.

00:20:37.050 --> 00:20:40.100
So say at Office Co, maybe
there's one group of

00:20:40.100 --> 00:20:41.850
developers that work
on the application.

00:20:41.850 --> 00:20:43.530
And they have access to the
username and password.

00:20:43.530 --> 00:20:46.350
And they can log into the cloud
FE VM and the database.

00:20:46.350 --> 00:20:48.390
And maybe there's a separate
group of people, the network

00:20:48.390 --> 00:20:50.530
administrators, that can
log into routers.

00:20:50.530 --> 00:20:53.010
And now, cloud VPN gateway
is one of those routers.

00:20:53.010 --> 00:20:58.460
And so maybe no one individual
has access to both secrets.

00:20:58.460 --> 00:20:59.920
So this is what I'm going
to demo today.

00:20:59.920 --> 00:21:01.580
And we'll come back to this
picture as we go.

00:21:08.230 --> 00:21:09.430
Great.

00:21:09.430 --> 00:21:13.070
So during rehearsal, one of our
reviewers suggested that,

00:21:13.070 --> 00:21:15.330
hey, to really model office-net,
you should drag a

00:21:15.330 --> 00:21:18.930
rack full of gear up on stage,
servers and routers and

00:21:18.930 --> 00:21:21.030
everything, and that'll be the
physical network that you're

00:21:21.030 --> 00:21:22.560
going to connect to the cloud.

00:21:22.560 --> 00:21:26.430
That's great showmanship, but
I took the easy way out.

00:21:26.430 --> 00:21:30.710
And instead of doing that, we're
going to create just

00:21:30.710 --> 00:21:32.950
separate networks in GCE
that's going to model

00:21:32.950 --> 00:21:33.690
office-net.

00:21:33.690 --> 00:21:36.280
So we have two networks in
GCE, cloud-net, which

00:21:36.280 --> 00:21:38.990
represents the expansion of
office-net, which is our

00:21:38.990 --> 00:21:40.490
second network.

00:21:40.490 --> 00:21:44.800
And this is actually realistic
because two networks in GCE

00:21:44.800 --> 00:21:45.510
are totally--

00:21:45.510 --> 00:21:47.470
if they're separate networks,
they have no connectivity by

00:21:47.470 --> 00:21:48.870
default between them.

00:21:48.870 --> 00:21:51.160
So it's kind of the
same thing.

00:21:51.160 --> 00:21:55.370
What I want you to note about
this slide or this output of

00:21:55.370 --> 00:21:58.730
gcutil is that the two address
spaces of the two networks are

00:21:58.730 --> 00:21:59.730
non-overlapping.

00:21:59.730 --> 00:22:01.710
And so you can tell the
destination network for a

00:22:01.710 --> 00:22:04.950
packet just by looking
at those first two

00:22:04.950 --> 00:22:07.760
bytes of the address.

00:22:07.760 --> 00:22:12.770
OK, I've also created some
VMs to model this design.

00:22:12.770 --> 00:22:14.000
And here they are.

00:22:14.000 --> 00:22:18.550
We have cloud FE VM,
which remember is

00:22:18.550 --> 00:22:19.800
this guy in the picture.

00:22:22.290 --> 00:22:25.850
We have 2 VPN gateways, cloud
VPN gateway and office VPN

00:22:25.850 --> 00:22:30.870
gateway, that model this
guy and this guy.

00:22:30.870 --> 00:22:33.770
And finally, we have OfficeDB,
which is another VM running

00:22:33.770 --> 00:22:35.020
over here in office-net.

00:22:37.660 --> 00:22:39.890
Two things you can't see here--
unfortunately gcutil

00:22:39.890 --> 00:22:42.550
doesn't print them--
are the tags.

00:22:42.550 --> 00:22:44.010
So I've tagged both of these.

00:22:44.010 --> 00:22:47.770
I've tagged cloud FE FM and
OfficeDB with the VPN tag.

00:22:47.770 --> 00:22:50.680
And that's what we're going to
use to join routes and allow

00:22:50.680 --> 00:22:52.340
them to use the VPN.

00:22:52.340 --> 00:22:54.910
And the second thing I've done
is I've given-- remember the

00:22:54.910 --> 00:22:56.120
can_ip_forward flag?

00:22:56.120 --> 00:22:57.820
I've set that on cloud
VPN gateway

00:22:57.820 --> 00:22:58.990
and office VPN gateway.

00:22:58.990 --> 00:23:02.790
And that allows them to do their
job and forward packets.

00:23:02.790 --> 00:23:05.255
OK, so here's what's
new, list routes.

00:23:07.910 --> 00:23:10.230
This is the routes collection
for the project.

00:23:10.230 --> 00:23:12.520
And the defaults aren't
that interesting.

00:23:12.520 --> 00:23:13.580
I haven't changed those.

00:23:13.580 --> 00:23:16.640
What I want you to notice is
these two routes here that

00:23:16.640 --> 00:23:20.460
make the VPN go, gateway to
office, and gateway to cloud.

00:23:20.460 --> 00:23:22.100
Excuse me.

00:23:22.100 --> 00:23:26.040
So what this rule says is that
if you're a VM on cloud-net

00:23:26.040 --> 00:23:29.045
and you have the VPN tag, shows
you permission to access

00:23:29.045 --> 00:23:32.200
the VPN, and you send the packet
that falls in this

00:23:32.200 --> 00:23:35.270
destination range, don't
handle it normally.

00:23:35.270 --> 00:23:39.150
Instead, forward it to this
special, designated VM for

00:23:39.150 --> 00:23:40.960
processing, OK?

00:23:40.960 --> 00:23:46.910
And this address space is the
address space of the peer

00:23:46.910 --> 00:23:49.030
network on the other
side of the tunnel.

00:23:49.030 --> 00:23:50.100
So note the symmetry here.

00:23:50.100 --> 00:23:52.460
This gateway to cloud is
exactly the same in the

00:23:52.460 --> 00:23:53.200
opposite direction.

00:23:53.200 --> 00:23:56.960
If you're a VM on office-net and
you have the VPN tag and

00:23:56.960 --> 00:24:00.790
you're sending a packet to
cloud-net, then send it to

00:24:00.790 --> 00:24:02.155
this special VM for
processing.

00:24:05.310 --> 00:24:08.380
OK, so those are the resources
I've created to model this

00:24:08.380 --> 00:24:09.420
network design.

00:24:09.420 --> 00:24:11.950
Let's jump on to cloud FE VM.

00:24:11.950 --> 00:24:12.550
I'm sorry.

00:24:12.550 --> 00:24:14.220
Let's jump on to the
VPN gateway.

00:24:14.220 --> 00:24:17.440
Remember, that's this
guy right here.

00:24:17.440 --> 00:24:20.010
And what I want to show you is
that I've already installed

00:24:20.010 --> 00:24:25.320
and configured the strongSwan
one, VPN software.

00:24:25.320 --> 00:24:28.770
It's just sudo apt-get
install strongSwan.

00:24:28.770 --> 00:24:33.880
And I've already set it up
so that it's running.

00:24:33.880 --> 00:24:35.440
And the tunnel's established.

00:24:35.440 --> 00:24:38.610
And you can see that we've
joined these two halves of the

00:24:38.610 --> 00:24:39.910
address space.

00:24:39.910 --> 00:24:43.240
OK, so the VPN's
up and running.

00:24:43.240 --> 00:24:45.690
We're going to do a quick
connectivity check here.

00:24:45.690 --> 00:24:47.600
I've now logged into
cloud FE VM.

00:24:47.600 --> 00:24:48.960
That's this guy.

00:24:48.960 --> 00:24:49.980
This is our database client.

00:24:49.980 --> 00:24:54.640
What we're going to do is send
a ping request to OfficeDB to

00:24:54.640 --> 00:24:56.115
check connectivity.

00:24:56.115 --> 00:24:59.430
Now remember that normally, by
default, two GCE networks have

00:24:59.430 --> 00:25:00.950
no connectivity at all.

00:25:00.950 --> 00:25:07.000
And so the fact that we get
a response shows you that

00:25:07.000 --> 00:25:09.500
something interesting and new
and special is happening.

00:25:09.500 --> 00:25:12.160
The two networks have
connectivity to each other.

00:25:12.160 --> 00:25:14.300
But hey, how do we know that
it's really happening in the

00:25:14.300 --> 00:25:16.160
way that I'm claiming?

00:25:16.160 --> 00:25:21.360
Well, let's use the trace route
tool to find the path

00:25:21.360 --> 00:25:22.790
that that packet's taking.

00:25:22.790 --> 00:25:25.270
And as you can see, it's exactly
what we expect from

00:25:25.270 --> 00:25:26.450
the whiteboard diagram.

00:25:26.450 --> 00:25:28.160
The first hop is cloud
VPN gateway.

00:25:28.160 --> 00:25:30.180
So remember, the ping is
going here, first top.

00:25:30.180 --> 00:25:32.790
Second hop is the office
VPN gateway.

00:25:32.790 --> 00:25:35.180
And third hop is OfficeDB.

00:25:35.180 --> 00:25:36.430
They're there.

00:25:39.860 --> 00:25:41.660
OK, that's pretty cool.

00:25:41.660 --> 00:25:45.070
Let's jump on to OfficeDB and
see what it looks like from

00:25:45.070 --> 00:25:47.212
the server's perspective.

00:25:47.212 --> 00:25:48.890
OK, so I'm going to
start a TCP dump.

00:25:48.890 --> 00:25:51.650
TCP dump's a tool that captures
packets the match a

00:25:51.650 --> 00:25:56.460
certain expression in
a Unix machine and

00:25:56.460 --> 00:25:57.500
print it to the screen.

00:25:57.500 --> 00:25:58.960
So I'm going to start that up.

00:25:58.960 --> 00:26:01.890
And while that's running, I'm
going to send that same

00:26:01.890 --> 00:26:03.740
packet, that same
ping request.

00:26:03.740 --> 00:26:06.480
And so here here's what that
network flow looks like from

00:26:06.480 --> 00:26:09.230
the server's perspective.

00:26:09.230 --> 00:26:11.740
What I think is cool about this
dump is that the source

00:26:11.740 --> 00:26:13.630
address and the destination
address are

00:26:13.630 --> 00:26:15.160
just 10 space, right?

00:26:15.160 --> 00:26:18.860
You don't see the addresses
of the VPN endpoints.

00:26:18.860 --> 00:26:21.640
And this is why people
like VPN.

00:26:21.640 --> 00:26:24.000
This is why people want VPN,
because we took an existing

00:26:24.000 --> 00:26:26.620
application on one network and
we put it on two networks.

00:26:26.620 --> 00:26:28.250
And the application didn't
have to be rewritten or

00:26:28.250 --> 00:26:31.520
changed in any way because
the packets

00:26:31.520 --> 00:26:33.140
looked exactly the same.

00:26:33.140 --> 00:26:35.770
And if you've designed your VPN
right, you get some of the

00:26:35.770 --> 00:26:38.900
security benefits, too, of being
on a private network,

00:26:38.900 --> 00:26:42.790
like confidentiality
and authenticity.

00:26:42.790 --> 00:26:44.730
So that's from a server's
perspective.

00:26:44.730 --> 00:26:47.160
Now, the final thing that I want
to show you, I think is

00:26:47.160 --> 00:26:50.230
the coolest, is a
TCP dump from--

00:26:50.230 --> 00:26:52.110
let me just clear this--

00:26:52.110 --> 00:26:53.560
from the VPN gateway.

00:26:53.560 --> 00:26:56.405
So now, we're going to capture
packets on this guy.

00:26:56.405 --> 00:26:57.740
I'm going to send
that same ping.

00:26:57.740 --> 00:26:59.990
And we're going to see how
this guy handles it.

00:27:05.030 --> 00:27:06.250
OK, so wow.

00:27:06.250 --> 00:27:07.655
There's a lot going on here.

00:27:07.655 --> 00:27:11.290
I'm going to quickly step
through it for you.

00:27:11.290 --> 00:27:13.570
Oops.

00:27:13.570 --> 00:27:14.320
Very unlucky.

00:27:14.320 --> 00:27:17.250
I captured a packet
I didn't want to.

00:27:17.250 --> 00:27:20.100
Try again.

00:27:20.100 --> 00:27:23.600
All right, so this very
first packet is

00:27:23.600 --> 00:27:24.900
what's coolest to me.

00:27:24.900 --> 00:27:30.060
What's cool is that the
destination address is on a

00:27:30.060 --> 00:27:32.360
completely different network
than this VM.

00:27:32.360 --> 00:27:34.930
So if this is the first time
you've see something like

00:27:34.930 --> 00:27:37.300
this, you might ask, what is
this packet doing on my

00:27:37.300 --> 00:27:37.895
network interface?

00:27:37.895 --> 00:27:39.800
It's destined for someone
else, right?

00:27:39.800 --> 00:27:41.310
Well, that's the routes
collection working.

00:27:41.310 --> 00:27:43.860
We created a route that said,
this packet destined for this

00:27:43.860 --> 00:27:48.250
other guy should go to this
cloud VPN gateway VM instead.

00:27:48.250 --> 00:27:50.940
And it is kind of weird to
have packets destined for

00:27:50.940 --> 00:27:52.680
someone else show up on your
network interface.

00:27:52.680 --> 00:27:55.660
But that's the definition of
being a router, right?

00:27:55.660 --> 00:27:57.120
People dump things
on your doorstep.

00:27:57.120 --> 00:27:59.610
And it's your job to figure out
what to do with them next.

00:27:59.610 --> 00:28:03.050
OK, well, what does this
VM do with it next?

00:28:03.050 --> 00:28:06.060
You can see the answer to that
in the very next packet.

00:28:06.060 --> 00:28:08.540
What it does is it encrypts
that packet.

00:28:08.540 --> 00:28:09.570
You can see that.

00:28:09.570 --> 00:28:11.500
Now it's using the
IPsec protocol.

00:28:11.500 --> 00:28:12.870
It encapsulates it.

00:28:12.870 --> 00:28:15.460
So the source address has
changed to be its own.

00:28:15.460 --> 00:28:18.200
And the destination address has
changed to be the public

00:28:18.200 --> 00:28:21.140
IP of the other end
of the VPN tunnel.

00:28:21.140 --> 00:28:23.220
And so that's the encapsulation
part.

00:28:23.220 --> 00:28:25.320
It's like an envelope, taking
that original packet and

00:28:25.320 --> 00:28:27.140
putting it in a new,
larger packet.

00:28:27.140 --> 00:28:31.020
You can see it's 132 bytes
instead of 64.

00:28:31.020 --> 00:28:33.920
And sending it to a
new destination

00:28:33.920 --> 00:28:36.830
OK, the next time we hear
from this flow is a few

00:28:36.830 --> 00:28:38.030
milliseconds later.

00:28:38.030 --> 00:28:40.520
And it's actually the ICMP
reply coming back.

00:28:40.520 --> 00:28:43.540
It's coming back from the IP
address at the other end of

00:28:43.540 --> 00:28:44.280
the tunnel.

00:28:44.280 --> 00:28:45.000
It's also encrypted.

00:28:45.000 --> 00:28:46.430
It's also encapsulated.

00:28:46.430 --> 00:28:49.000
So Linux has built
in IPsec support.

00:28:49.000 --> 00:28:52.630
I've configured it to decrypt,
decapsulate that packet, and

00:28:52.630 --> 00:28:54.750
dump it back on its own local
networking stack.

00:28:54.750 --> 00:29:00.240
And so this next entry shows
you that ICMP replied,

00:29:00.240 --> 00:29:04.090
emerging from the tunnel
on this Linux machine.

00:29:04.090 --> 00:29:07.400
Well, I've configured the guest
OS, this Linux operating

00:29:07.400 --> 00:29:09.920
system, to be also-- to
think it's a router.

00:29:09.920 --> 00:29:12.580
And so it has its own IP
forward flags set.

00:29:12.580 --> 00:29:15.280
And so Linux knows that
it has access to

00:29:15.280 --> 00:29:18.550
this destination network.

00:29:18.550 --> 00:29:24.480
And so it sends it out for GCE
to deliver to the destination,

00:29:24.480 --> 00:29:27.470
which is actually the
original pinger.

00:29:27.470 --> 00:29:29.560
This last packet is super cool,
too, because look at

00:29:29.560 --> 00:29:30.850
this source address.

00:29:30.850 --> 00:29:34.210
This source address is a VM on
a totally different network.

00:29:34.210 --> 00:29:36.190
It's on office-net.

00:29:36.190 --> 00:29:38.410
And so this is why the
can_ip_forward flag is

00:29:38.410 --> 00:29:41.330
important because this gateway
is actually sending a packet

00:29:41.330 --> 00:29:43.010
where the source address
is not its own.

00:29:43.010 --> 00:29:44.450
It's like it's spoofing,
right?

00:29:44.450 --> 00:29:45.520
But it's not for evil.

00:29:45.520 --> 00:29:46.280
It's for good.

00:29:46.280 --> 00:29:48.990
It's to make this transparent
VPN work.

00:29:51.930 --> 00:29:53.760
All right, that's everything
I wanted to

00:29:53.760 --> 00:29:55.280
show you in the demo.

00:29:55.280 --> 00:29:57.660
I hope you guys think this
is as cool as I do.

00:29:57.660 --> 00:30:00.120
I'm going to send it back
to Sunil to summarize

00:30:00.120 --> 00:30:03.393
and wrap this up.

00:30:03.393 --> 00:30:04.280
SUNIL JAMES: Great.

00:30:04.280 --> 00:30:05.150
Thank you, John.

00:30:05.150 --> 00:30:07.130
So as you just said, we just
demonstrated to you guys how

00:30:07.130 --> 00:30:09.820
to move a back office
application to the cloud while

00:30:09.820 --> 00:30:11.970
retaining some of the security
properties of it being a

00:30:11.970 --> 00:30:13.360
private physical network.

00:30:13.360 --> 00:30:18.090
Just to recap, we took the Linux
built-in IPsec stack

00:30:18.090 --> 00:30:21.070
plus some open source VPN
software and GCE's advanced

00:30:21.070 --> 00:30:23.800
routing capability to connect
together these two networks

00:30:23.800 --> 00:30:26.510
and layer three so that by
specifying GCE route, that

00:30:26.510 --> 00:30:29.400
directed traffic to the
designated gateway VM.

00:30:29.400 --> 00:30:32.460
Then, we set the can_ip_forward
flag on that VM

00:30:32.460 --> 00:30:35.190
acting as the VPN gateway to
send forward packets and

00:30:35.190 --> 00:30:37.380
receive packets for
forwarding.

00:30:37.380 --> 00:30:40.170
And then finally, we used trace
route and TCP dump to

00:30:40.170 --> 00:30:43.060
show you guys packets flowing
from the origin VM through the

00:30:43.060 --> 00:30:45.070
VPN gateway.

00:30:45.070 --> 00:30:46.470
That was using routes.

00:30:46.470 --> 00:30:48.430
And then, through the VPN
tunnel across the public

00:30:48.430 --> 00:30:50.940
internet, all the while
preserving the packet source

00:30:50.940 --> 00:30:53.040
and destination IP addresses.

00:30:53.040 --> 00:30:55.830
So now, as you saw, this
was just a demo.

00:30:55.830 --> 00:30:59.460
And it's not meant to be a
comprehensive how to guide to

00:30:59.460 --> 00:31:00.920
roll your own VPN,
necessarily.

00:31:00.920 --> 00:31:05.070
So before you go off and take
this demonstration as gospel,

00:31:05.070 --> 00:31:07.560
I ask you to go talk to security
experts at your

00:31:07.560 --> 00:31:09.250
organization, figure out
what makes the most

00:31:09.250 --> 00:31:11.700
sense for your business.

00:31:11.700 --> 00:31:15.330
So with that, I'm going to
take some questions.

00:31:15.330 --> 00:31:17.210
If you're thinking about
leaving, I'd suggest sticking

00:31:17.210 --> 00:31:19.300
around for after the questions
because there's one more thing

00:31:19.300 --> 00:31:20.580
that I'm going to show you after
we're done with that.

00:31:20.580 --> 00:31:22.120
So let me open it up
for questions.

00:31:27.110 --> 00:31:28.040
Yes?

00:31:28.040 --> 00:31:28.890
AUDIENCE: Hi, I was
just wondering

00:31:28.890 --> 00:31:30.220
if it's easily possible.

00:31:30.220 --> 00:31:32.980
You were showing an example
where you have two gateways

00:31:32.980 --> 00:31:37.550
handling traffic between the
cloud environment and the

00:31:37.550 --> 00:31:38.810
internet, for example.

00:31:38.810 --> 00:31:42.250
Is it easily possible for one of
these gateways to, say, I'm

00:31:42.250 --> 00:31:44.310
serving more traffic
than I can handle.

00:31:44.310 --> 00:31:47.570
I'll spin up another instance
of myself somewhere else.

00:31:47.570 --> 00:31:51.480
And then, I either need to
reconfigure the routing tables

00:31:51.480 --> 00:31:55.330
on the router to make that
gateway available, or I need

00:31:55.330 --> 00:31:59.470
to have them pre-configured to
just see that new upcoming

00:31:59.470 --> 00:32:00.785
instance and use it?

00:32:00.785 --> 00:32:02.960
JOHN CARMIE: So that's
definitely possible.

00:32:02.960 --> 00:32:04.780
You would have to write the
code that does that.

00:32:04.780 --> 00:32:07.850
So the API to spin up a new
instance, it's an API.

00:32:07.850 --> 00:32:08.620
It can do that.

00:32:08.620 --> 00:32:11.050
And the API to control the
routing table, it can also

00:32:11.050 --> 00:32:11.850
automate that.

00:32:11.850 --> 00:32:13.260
So yeah, that's a great idea.

00:32:13.260 --> 00:32:14.480
AUDIENCE: So that could
be changed on the fly.

00:32:14.480 --> 00:32:14.890
JOHN CARMIE: Say again?

00:32:14.890 --> 00:32:16.690
AUDIENCE: So the routing table
can be updated on the fly

00:32:16.690 --> 00:32:17.460
without much latency?

00:32:17.460 --> 00:32:17.930
JOHN CARMIE: Yes, yes.

00:32:17.930 --> 00:32:20.100
And so when you create a new
route, what happens is it's

00:32:20.100 --> 00:32:21.390
kind of an async operation.

00:32:21.390 --> 00:32:23.170
You get back an operation
object.

00:32:23.170 --> 00:32:25.350
And then, you can pull that and
see when it's complete.

00:32:25.350 --> 00:32:28.150
And so once it's complete, that
means that everyone in

00:32:28.150 --> 00:32:29.530
the network has got
that new route.

00:32:29.530 --> 00:32:31.230
And it's kind of in service
and ready to go.

00:32:31.230 --> 00:32:33.180
AUDIENCE: And that runs on the
order of milliseconds, or does

00:32:33.180 --> 00:32:34.430
that take a while?

00:32:36.980 --> 00:32:39.685
JOHN CARMIE: I think it takes
a few seconds right now.

00:32:39.685 --> 00:32:40.750
That's anecdotally.

00:32:40.750 --> 00:32:43.330
AUDIENCE: Thanks.

00:32:43.330 --> 00:32:46.800
AUDIENCE: In a similar interest,
so you had your

00:32:46.800 --> 00:32:50.280
dummy load balancing
example, which was

00:32:50.280 --> 00:32:51.530
this hash based, simple.

00:32:54.150 --> 00:32:56.220
Is there a lot of ability in
there to actually have it

00:32:56.220 --> 00:32:59.610
automated and intelligent enough
to actually keep track

00:32:59.610 --> 00:33:02.380
of the amount of flows that are
remaining constant servers

00:33:02.380 --> 00:33:04.360
and do on automatic load
balancing that is actually

00:33:04.360 --> 00:33:07.850
intelligent as the amount of
traffic changes on the

00:33:07.850 --> 00:33:10.650
different servers?

00:33:10.650 --> 00:33:13.080
JOHN CARMIE: Yes, so
you could do that.

00:33:13.080 --> 00:33:14.210
But again, you would
have to write

00:33:14.210 --> 00:33:15.220
that automation yourself.

00:33:15.220 --> 00:33:18.370
So you could have counters on
your gateway VMs, monitoring

00:33:18.370 --> 00:33:20.730
CPU, monitoring how many packets
per second they're

00:33:20.730 --> 00:33:23.970
doing, and react to it by
spinning up new instances, and

00:33:23.970 --> 00:33:27.690
then adding routes to add them
to the pool of gateways.

00:33:27.690 --> 00:33:29.670
AUDIENCE: OK, the servers will
actually have to end up giving

00:33:29.670 --> 00:33:31.100
feedback to the gateway.

00:33:31.100 --> 00:33:34.980
You can't actually have the
gateway solitarily trying to

00:33:34.980 --> 00:33:37.040
figure things out?

00:33:37.040 --> 00:33:39.340
JOHN CARMIE: You could.

00:33:39.340 --> 00:33:42.990
From inside GCE, you can make
calls to the control API and

00:33:42.990 --> 00:33:45.620
add new instances and
create new routes.

00:33:45.620 --> 00:33:47.090
So yeah, that's one
possible design.

00:33:47.090 --> 00:33:49.740
Another possible would be to
monitor it from the outside

00:33:49.740 --> 00:33:51.715
and spin up new resources
as needed.

00:33:51.715 --> 00:33:53.430
AUDIENCE: Awesome, thank you.

00:33:53.430 --> 00:33:54.991
JOHN CARMIE: Thank you.

00:33:54.991 --> 00:33:55.370
AUDIENCE: Hi.

00:33:55.370 --> 00:33:59.710
I guess along the same lines,
so you said we can do this

00:33:59.710 --> 00:34:05.270
flow-based load balancing for
VPN gateways where my gateways

00:34:05.270 --> 00:34:06.680
are on a VM.

00:34:06.680 --> 00:34:08.750
What happens on the north-south
traffic where I'm

00:34:08.750 --> 00:34:11.989
using the public IPs and
going out to the world?

00:34:11.989 --> 00:34:13.010
Do I have that--

00:34:13.010 --> 00:34:15.230
will the Google infrastructure
essentially take care of

00:34:15.230 --> 00:34:18.830
spreading my flows or my load
across multiple gateways going

00:34:18.830 --> 00:34:20.050
out to the internet?

00:34:20.050 --> 00:34:21.949
And I don't have to worry about
it, or do I have to do

00:34:21.949 --> 00:34:24.670
something special myself?

00:34:24.670 --> 00:34:28.280
JOHN CARMIE: So the answer is
that the routing table doesn't

00:34:28.280 --> 00:34:29.980
know whether it's
a VPN connection

00:34:29.980 --> 00:34:31.000
or an internet gateway.

00:34:31.000 --> 00:34:32.790
It's just thinking
about packets.

00:34:32.790 --> 00:34:36.810
And so the same trick
works in both cases.

00:34:36.810 --> 00:34:37.929
Does that answer
your question?

00:34:37.929 --> 00:34:38.870
Or maybe I didn't understand.

00:34:38.870 --> 00:34:42.270
AUDIENCE: No, I was wondering
that to go out to the

00:34:42.270 --> 00:34:44.969
internet, do I need a separate
VM which is my gateway, and--

00:34:44.969 --> 00:34:45.360
JOHN CARMIE: No.

00:34:45.360 --> 00:34:46.710
Yeah, so this is
just an option.

00:34:46.710 --> 00:34:48.460
You don't need to use
a separate VM

00:34:48.460 --> 00:34:49.650
to get to the internet.

00:34:49.650 --> 00:34:52.610
By default, you get
a route which is--

00:34:52.610 --> 00:34:54.080
let me actually go back
and show you.

00:34:54.080 --> 00:34:55.010
SUNIL JAMES: So it's
implicit, right?

00:34:55.010 --> 00:34:56.305
It's one of the implicit
routes that

00:34:56.305 --> 00:34:57.232
exists within our utility.

00:34:57.232 --> 00:34:57.610
JOHN CARMIE: Yeah.

00:34:57.610 --> 00:34:58.400
AUDIENCE: Yeah, it's
an implicit route.

00:34:58.400 --> 00:35:01.820
But will the implicit route,
will whatever that gateway is

00:35:01.820 --> 00:35:03.830
going to the internet, does
that actually load balance

00:35:03.830 --> 00:35:07.420
across multiple devices if I'm
saturating the physical

00:35:07.420 --> 00:35:10.740
whatever device it is?

00:35:10.740 --> 00:35:11.460
JOHN CARMIE: Well, OK.

00:35:11.460 --> 00:35:14.190
Let me first address
the route point.

00:35:14.190 --> 00:35:17.680
So this default route is what
takes you-- you can't see it

00:35:17.680 --> 00:35:20.290
because I had to truncate to
make this fit on the screen.

00:35:20.290 --> 00:35:23.770
But the next hop is actually an
object which is called the

00:35:23.770 --> 00:35:25.300
default internet gateway.

00:35:25.300 --> 00:35:27.960
And it's not a real
physical thing.

00:35:27.960 --> 00:35:28.990
It's just something
that should be

00:35:28.990 --> 00:35:29.940
in your mental model.

00:35:29.940 --> 00:35:31.670
It's the thing that gets
you to the internet.

00:35:31.670 --> 00:35:33.220
And you don't need to worry
about scaling it.

00:35:33.220 --> 00:35:36.080
We worry about that
behind the scenes.

00:35:36.080 --> 00:35:39.430
And so it's not one
physical device.

00:35:39.430 --> 00:35:41.290
It scales up as needed.

00:35:41.290 --> 00:35:42.330
AUDIENCE: As needed, OK.

00:35:42.330 --> 00:35:44.030
JOHN CARMIE: And that's
part of the magic.

00:35:44.030 --> 00:35:45.230
So you don't need to
worry about that.

00:35:45.230 --> 00:35:48.580
If you're running your own
gateways, though, then as a

00:35:48.580 --> 00:35:50.460
question over there pointed out,
yes, you do need to worry

00:35:50.460 --> 00:35:51.710
about that.

00:35:54.180 --> 00:35:56.990
AUDIENCE: So I realize
this demo falls

00:35:56.990 --> 00:35:59.030
under just one project.

00:35:59.030 --> 00:36:02.100
But given the example you could
run, could I use that to

00:36:02.100 --> 00:36:04.590
establish connectivity between
two different projects?

00:36:04.590 --> 00:36:05.510
JOHN CARMIE: Yes, yes.

00:36:05.510 --> 00:36:09.880
Because from the VPN gateway's
perspective, it's just sending

00:36:09.880 --> 00:36:12.490
packets to an IP address
out anywhere

00:36:12.490 --> 00:36:13.780
on the public internet.

00:36:13.780 --> 00:36:17.160
So it could be an instance
in a different project.

00:36:17.160 --> 00:36:18.990
It could be an instance
running in a different

00:36:18.990 --> 00:36:19.820
provider's cloud.

00:36:19.820 --> 00:36:21.295
It could be an instance
running in

00:36:21.295 --> 00:36:22.310
your home data center.

00:36:22.310 --> 00:36:23.320
And it doesn't matter.

00:36:23.320 --> 00:36:23.570
AUDIENCE: OK.

00:36:23.570 --> 00:36:26.100
But in that case, it would
still have to transit

00:36:26.100 --> 00:36:28.460
to some public IP.

00:36:28.460 --> 00:36:31.830
I couldn't do say two different
projects, they're

00:36:31.830 --> 00:36:33.290
all Google Compute projects.

00:36:33.290 --> 00:36:36.000
But I want to establish
connectivity without

00:36:36.000 --> 00:36:38.930
necessarily hitting outside to
make it faster or better.

00:36:38.930 --> 00:36:41.000
JOHN CARMIE: OK, you're asking
whether it physically leaves

00:36:41.000 --> 00:36:42.720
the Google infrastructure?

00:36:42.720 --> 00:36:43.660
AUDIENCE: Maybe it
doesn't leave.

00:36:43.660 --> 00:36:44.500
Maybe you've handled it.

00:36:44.500 --> 00:36:45.220
I'm just curious.

00:36:45.220 --> 00:36:47.450
SUNIL JAMES: Or another way to
position it is, is there a

00:36:47.450 --> 00:36:49.737
short circuit path from
one project to

00:36:49.737 --> 00:36:51.460
another to get to networks?

00:36:51.460 --> 00:36:52.760
So I think the answer--

00:36:52.760 --> 00:36:54.330
I'll take a stab at answering
this question.

00:36:54.330 --> 00:36:55.550
There's no short circuit path.

00:36:55.550 --> 00:36:59.090
It's still going to egress to
whatever egress point that

00:36:59.090 --> 00:37:03.090
exists at the top of the tree
for the traffic that's being

00:37:03.090 --> 00:37:04.060
sent out to the internet.

00:37:04.060 --> 00:37:06.830
So you do have to have it
communicating on a public IP.

00:37:06.830 --> 00:37:08.050
But that doesn't mean that it's
egressing the network.

00:37:08.050 --> 00:37:09.465
It's just going up to the
edge of our network, and

00:37:09.465 --> 00:37:10.380
then right back down.

00:37:10.380 --> 00:37:11.390
AUDIENCE: Oh, OK.

00:37:11.390 --> 00:37:11.800
Thank you.

00:37:11.800 --> 00:37:13.050
SUNIL JAMES: OK.

00:37:14.910 --> 00:37:17.050
So we'll be around to answer a
few more questions afterwards.

00:37:17.050 --> 00:37:19.490
But I wanted to just take, with
the two minutes left,

00:37:19.490 --> 00:37:22.970
walk you through one more
thing that we're doing.

00:37:22.970 --> 00:37:26.040
So as I said before, we are part
of the Cloud Networking

00:37:26.040 --> 00:37:28.490
team at Google Cloud Platform.

00:37:28.490 --> 00:37:31.810
And so we talked a little bit
earlier about all the things

00:37:31.810 --> 00:37:34.080
that we've heard developers
asking for.

00:37:34.080 --> 00:37:35.450
This is a great starting
point.

00:37:35.450 --> 00:37:37.270
And it's only going to get
richer and better in terms of

00:37:37.270 --> 00:37:38.500
the functionality of just
advanced routing.

00:37:38.500 --> 00:37:41.480
But there are other things
that customers ask for.

00:37:41.480 --> 00:37:45.740
And so I'm really, really,
really excited to talk about

00:37:45.740 --> 00:37:46.730
load balancing.

00:37:46.730 --> 00:37:48.735
So we're going to be bringing
you load balancing as part of

00:37:48.735 --> 00:37:51.230
the native fabric for Google
Compute Engine.

00:37:51.230 --> 00:37:53.460
We're not releasing details
about the service yet.

00:37:53.460 --> 00:37:55.200
We're building it right now.

00:37:55.200 --> 00:37:57.120
If you're interested in learning
more about load

00:37:57.120 --> 00:37:58.830
balancing, come up
and find me.

00:37:58.830 --> 00:38:01.160
Or go ahead and click
on that goo.gl link.

00:38:01.160 --> 00:38:03.040
I'll leave it up for you
guys to write down.

00:38:03.040 --> 00:38:05.840
It'll take you to a forum where
you can answer some

00:38:05.840 --> 00:38:07.680
questions about what you need
out of the service.

00:38:07.680 --> 00:38:09.740
And I'll follow up with
you personally.

00:38:09.740 --> 00:38:11.540
We can sit down and talk more
about what you need.

00:38:11.540 --> 00:38:15.760
Additionally, GCE has an early
access program whereby you can

00:38:15.760 --> 00:38:18.700
get access to all the great, new
upcoming features within

00:38:18.700 --> 00:38:22.010
Compute Engine, including load
balancing when it's available.

00:38:22.010 --> 00:38:24.590
So that's what we
wanted to say.

00:38:24.590 --> 00:38:25.690
So thank you very much.

00:38:25.690 --> 00:38:26.870
JOHN CARMIE: Thank you
so much, guys.

00:38:26.870 --> 00:38:33.497
[APPLAUSE]

