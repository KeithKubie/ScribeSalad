WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:04.270
In dynamic programming, we always look
for optimal similar substructure, and

00:00:04.270 --> 00:00:06.740
try to find the recursive
solution first.

00:00:06.740 --> 00:00:10.288
We can gain some insight into
the substructure of the chain matrix

00:00:10.288 --> 00:00:13.773
multiplication problem by running
out the expression trees for

00:00:13.773 --> 00:00:15.980
a various ways of placing parentheses.

00:00:15.980 --> 00:00:21.507
For example, ((AB)C) and
then multiplying all that by D,

00:00:21.507 --> 00:00:24.331
corresponds to this tree here.

00:00:24.331 --> 00:00:29.718
(AB)(CD) corresponds to this tree here.

00:00:29.718 --> 00:00:35.810
And A((BC)D) yields this tree here.

00:00:35.810 --> 00:00:39.750
This suggests that we try all
possible binary trees and

00:00:39.750 --> 00:00:43.600
pick the one that has
the smallest computational cost.

00:00:43.600 --> 00:00:46.760
Starting from the top level,
we would consider all

00:00:46.760 --> 00:00:51.500
n minus one ways of partitioning
this into left and right subtrees.

00:00:51.500 --> 00:00:54.970
And for each one of these possible
partitions, for example this one here,

00:00:54.970 --> 00:00:58.590
we would figure out the cost
of computing the subtrees and

00:00:58.590 --> 00:01:00.570
then multiplying them together.

00:01:00.570 --> 00:01:02.720
To figure out the cost of
the subtrees themselves,

00:01:02.720 --> 00:01:06.620
we would need to consider all
possible partitions into left and

00:01:06.620 --> 00:01:09.770
right subtrees in here,
and so forth, and so on.

00:01:10.790 --> 00:01:11.730
More precisely,

00:01:11.730 --> 00:01:16.390
we'll let c(i,j) be the minimum
cost of multiplying Ai through Aj.

00:01:16.390 --> 00:01:20.850
For each way of partitioning this range,
the cost is the minimum cost of

00:01:20.850 --> 00:01:26.460
computing each subtree, plus the cost of
combining the two resulting matrices.

00:01:26.460 --> 00:01:29.529
And we just want to take the minimum
over all such partitions.

00:01:30.540 --> 00:01:35.040
The base case, is the product of just
one matrix, which doesn't cost anything.

