WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.479
[MUSIC PLAYING]

00:00:08.449 --> 00:00:10.830
ROBERT KUBIS: I'm also
a Google Cloud developer

00:00:10.830 --> 00:00:14.870
at [INAUDIBLE],, as the speakers
before me, Mete and Mark.

00:00:14.870 --> 00:00:17.950
So we understand our ourselves
as software developers

00:00:17.950 --> 00:00:19.940
with a license to speak.

00:00:19.940 --> 00:00:22.850
Or the way that I like
to introduce myself

00:00:22.850 --> 00:00:26.720
is like the bidirectional
interface between you guys, who

00:00:26.720 --> 00:00:29.540
develop on our platform,
and the software engineers

00:00:29.540 --> 00:00:32.000
inside Google that
develop the products.

00:00:32.000 --> 00:00:34.740
So please, please reach out
to us with your feedback,

00:00:34.740 --> 00:00:37.280
be it good and bad
feedback, so that we

00:00:37.280 --> 00:00:40.010
can improve our products.

00:00:40.010 --> 00:00:43.220
Let's go back a little
bit in the history.

00:00:43.220 --> 00:00:45.200
And some of you might
still remember these.

00:00:45.200 --> 00:00:46.670
I have one of those here.

00:00:46.670 --> 00:00:49.640
This little, nice, floppy disks.

00:00:49.640 --> 00:00:52.130
And that was all you pretty
much cared about in the '80s,

00:00:52.130 --> 00:00:53.760
and maybe in the
beginning of the '90s,

00:00:53.760 --> 00:00:57.800
to install an operating
system and install programs

00:00:57.800 --> 00:01:01.520
like Word Perfect or things
like that on your machines.

00:01:01.520 --> 00:01:03.740
Network wasn't such a
big thing, unless you

00:01:03.740 --> 00:01:05.900
were a bigger corporation
that could afford it.

00:01:05.900 --> 00:01:10.370
But otherwise, you basically had
your machine and your programs

00:01:10.370 --> 00:01:11.510
all on that.

00:01:11.510 --> 00:01:12.680
Now fast forward.

00:01:12.680 --> 00:01:15.290
Today, this is not
that easy anymore.

00:01:15.290 --> 00:01:17.540
We live in a mobile world.

00:01:17.540 --> 00:01:20.510
Everybody wants to have access
to anything at any time.

00:01:20.510 --> 00:01:23.360
If you develop a
really popular app,

00:01:23.360 --> 00:01:26.810
you want to scale
the demand based on,

00:01:26.810 --> 00:01:29.790
if people waking up or
playing throughout the day

00:01:29.790 --> 00:01:31.950
or the coffee or lunch break.

00:01:31.950 --> 00:01:35.060
So applications look more
like this today, right?

00:01:35.060 --> 00:01:37.070
They're quite complex,
in the sense of you

00:01:37.070 --> 00:01:40.340
have multiple services, you
need some load balancing,

00:01:40.340 --> 00:01:42.170
you need some storage,
things like that.

00:01:42.170 --> 00:01:43.970
We heard about some
of the offerings

00:01:43.970 --> 00:01:47.940
that we have on the Google Cloud
platform in the talk before.

00:01:47.940 --> 00:01:50.510
Now, as a developer
myself, I don't

00:01:50.510 --> 00:01:53.120
want to really deal
with operating that.

00:01:53.120 --> 00:01:56.800
I don't want to look at,
is my app still running?

00:01:56.800 --> 00:01:58.910
Do I have to move
my app from A to B

00:01:58.910 --> 00:02:01.130
because I do maintenance
or things like that.

00:02:01.130 --> 00:02:04.190
All I really care about
is adding more features

00:02:04.190 --> 00:02:07.220
and innovating and pushing
them out to my users as fast

00:02:07.220 --> 00:02:09.320
as possible.

00:02:09.320 --> 00:02:11.270
So how can we do that?

00:02:11.270 --> 00:02:15.770
If we look at a little bit
of the history, how apps were

00:02:15.770 --> 00:02:19.070
deployed, basically, on
machines or physical hardware

00:02:19.070 --> 00:02:21.620
back in the days,
we basically started

00:02:21.620 --> 00:02:25.520
with installing the
operating system directly

00:02:25.520 --> 00:02:27.740
on your physical
machine and adding

00:02:27.740 --> 00:02:30.800
all the apps and dependencies
of these apps to this machine.

00:02:30.800 --> 00:02:34.380
Now usually, one app might not
have exhausted that machine,

00:02:34.380 --> 00:02:37.970
so you added multiple apps next
to each other on one machine

00:02:37.970 --> 00:02:40.100
and they could
interfere each other.

00:02:40.100 --> 00:02:43.430
Now, some of you might still
know that term of never

00:02:43.430 --> 00:02:44.840
change a running system.

00:02:44.840 --> 00:02:46.670
That is from these
days, basically.

00:02:46.670 --> 00:02:49.410
When you had that running,
you don't want to touch it.

00:02:49.410 --> 00:02:52.460
So that hinders
innovation and, basically,

00:02:52.460 --> 00:02:54.540
rolling out new features.

00:02:54.540 --> 00:02:57.380
So to get a little
bit more isolation

00:02:57.380 --> 00:03:00.110
between your applications and
make it a little bit safer,

00:03:00.110 --> 00:03:03.270
in terms of iterating
through new versions,

00:03:03.270 --> 00:03:06.830
there was a new thing that
came out a decade ago, or maybe

00:03:06.830 --> 00:03:09.920
a little bit more than that,
where we looked at, OK,

00:03:09.920 --> 00:03:12.080
how can we abstract
the physical hardware

00:03:12.080 --> 00:03:16.550
and actually run your operating
system in a virtual environment

00:03:16.550 --> 00:03:19.430
and then just have multiple
on one physical machine?

00:03:19.430 --> 00:03:21.320
So that's where virtual
machines came in.

00:03:21.320 --> 00:03:24.600
We were basically sharing the
hardware through a hypervisor,

00:03:24.600 --> 00:03:27.320
but this virtual machine
still had an operating system.

00:03:27.320 --> 00:03:30.080
You still had to install
patches for security and things

00:03:30.080 --> 00:03:31.500
like that.

00:03:31.500 --> 00:03:33.920
So this still took
quite a while.

00:03:33.920 --> 00:03:37.310
If you wanted to iterate--
if you wanted to start up

00:03:37.310 --> 00:03:39.290
a new version of
your application,

00:03:39.290 --> 00:03:42.800
it still took a minute to
start up the operating systems,

00:03:42.800 --> 00:03:44.600
or it took quite
some time if you

00:03:44.600 --> 00:03:49.310
had to react to demands
in your applications.

00:03:49.310 --> 00:03:51.290
Now, the new way to
do things is actually

00:03:51.290 --> 00:03:55.010
to go another layer
above and really

00:03:55.010 --> 00:03:57.440
encapsulating only the
things that you really

00:03:57.440 --> 00:04:00.860
need for your application
and sharing even more of what

00:04:00.860 --> 00:04:01.740
you had before.

00:04:01.740 --> 00:04:05.210
So if you look now, you have the
operating system and the kernel

00:04:05.210 --> 00:04:09.210
that you actually can share,
and you have the container--

00:04:09.210 --> 00:04:11.790
we package our application
in a container.

00:04:11.790 --> 00:04:14.930
It's pretty much just running
as a process on your operating

00:04:14.930 --> 00:04:15.710
system.

00:04:15.710 --> 00:04:18.829
And with this, it's
super lightweight

00:04:18.829 --> 00:04:22.880
and can be started and
stopped within seconds.

00:04:22.880 --> 00:04:25.120
Now, I have all these
containers which

00:04:25.120 --> 00:04:28.760
enable me to innovate and to
roll out new changes quickly.

00:04:28.760 --> 00:04:31.630
But as I mentioned
before, applications

00:04:31.630 --> 00:04:33.040
are complex, right?

00:04:33.040 --> 00:04:35.230
So what I really
want to do is I want

00:04:35.230 --> 00:04:39.040
to have a system that helps me
to run all these containers.

00:04:39.040 --> 00:04:41.350
And that's where
Kubernetes comes into play.

00:04:41.350 --> 00:04:46.270
Kubernetes was inspired by
how we are running containers

00:04:46.270 --> 00:04:47.500
inside of Google.

00:04:47.500 --> 00:04:49.240
We are running
billions of containers,

00:04:49.240 --> 00:04:51.970
starting and stopping
them every week.

00:04:51.970 --> 00:04:54.460
Everything runs in containers,
pretty much, inside Google,

00:04:54.460 --> 00:04:56.649
in a system that is called Borg.

00:04:56.649 --> 00:04:58.690
Now, we didn't want to
open source directly Borg,

00:04:58.690 --> 00:05:01.010
because there is
some technical depth.

00:05:01.010 --> 00:05:05.170
But what we wanted to do
is, out of what we learned

00:05:05.170 --> 00:05:07.960
building Borg, we wanted to
build a system for everyone

00:05:07.960 --> 00:05:11.860
who can use the things that we
learned to manage containers.

00:05:11.860 --> 00:05:15.640
And Kubernetes was
started from scratch in Go

00:05:15.640 --> 00:05:18.880
and was open sourced
two years ago.

00:05:18.880 --> 00:05:21.910
And then was one
of the founding--

00:05:21.910 --> 00:05:25.180
was actually the founding
project for the Cloud Native

00:05:25.180 --> 00:05:27.370
Computing Foundation.

00:05:27.370 --> 00:05:30.980
Now, what Kubernetes does is
things like it handles failure,

00:05:30.980 --> 00:05:32.500
it manages your containers.

00:05:32.500 --> 00:05:34.510
But there are a couple
of core principles

00:05:34.510 --> 00:05:38.560
that are really important for
us when we build Kubernetes.

00:05:38.560 --> 00:05:41.050
One is we wanted to
meet the users where

00:05:41.050 --> 00:05:42.910
they are, in the
sense of we didn't

00:05:42.910 --> 00:05:46.060
want to force you to rewrite
your entire applications

00:05:46.060 --> 00:05:46.690
completely.

00:05:46.690 --> 00:05:49.000
We wanted to make it
as easy as possible

00:05:49.000 --> 00:05:51.700
to have your applications
and pour them, basically,

00:05:51.700 --> 00:05:52.790
into Kubernetes.

00:05:52.790 --> 00:05:54.830
So first step, of course,
containerize them.

00:05:54.830 --> 00:05:57.400
And once you have
them containerized,

00:05:57.400 --> 00:06:00.250
your containers don't
need to be any special

00:06:00.250 --> 00:06:03.730
from running them by themselves
with a Docker engine,

00:06:03.730 --> 00:06:05.230
for instance.

00:06:05.230 --> 00:06:09.410
Another thing is we didn't want
to couple parts in Kubernetes.

00:06:09.410 --> 00:06:11.320
So if you want to
change some things--

00:06:11.320 --> 00:06:14.050
if you want to change the
scheduler or things like that--

00:06:14.050 --> 00:06:14.770
you can do that.

00:06:14.770 --> 00:06:18.430
You can just go check out the
Kubernetes repository on GitHub

00:06:18.430 --> 00:06:21.160
and just change the
schedule as you like it.

00:06:21.160 --> 00:06:23.860
So it's really about
being open and being

00:06:23.860 --> 00:06:27.550
able to have everyone who
uses this system to modify it

00:06:27.550 --> 00:06:29.587
in the way that they want to.

00:06:29.587 --> 00:06:31.420
Now really, what's
really, really important,

00:06:31.420 --> 00:06:34.450
what I'd like to talk
about is that Kubernetes

00:06:34.450 --> 00:06:37.750
is about running applications
in a declarative way

00:06:37.750 --> 00:06:39.042
versus an imperative way.

00:06:39.042 --> 00:06:40.000
So what does that mean?

00:06:40.000 --> 00:06:43.120
It basically means you
tell how your application

00:06:43.120 --> 00:06:44.410
landscape should look like.

00:06:44.410 --> 00:06:46.280
But you don't tell
it how to get there.

00:06:46.280 --> 00:06:48.370
Kubernetes will figure
that out by themselves.

00:06:48.370 --> 00:06:50.690
And with this, with new
versions of Kubernetes,

00:06:50.690 --> 00:06:53.650
you get all the goodies of
how to make this even more

00:06:53.650 --> 00:06:55.390
efficient.

00:06:55.390 --> 00:06:59.590
Now, another important part for
Kubernetes is supportability.

00:06:59.590 --> 00:07:01.630
You can run it on
any public cloud.

00:07:01.630 --> 00:07:03.880
We have a managed service,
Google Container Engine,

00:07:03.880 --> 00:07:06.400
for it, which makes it
very easy to get started.

00:07:06.400 --> 00:07:09.940
It's actually, in my opinion,
the easiest way to get started.

00:07:09.940 --> 00:07:14.770
But you can also run
it on things like this.

00:07:14.770 --> 00:07:18.070
This is a recipe
of pie clusters.

00:07:18.070 --> 00:07:21.135
So I've basically five
recipes of pies here.

00:07:21.135 --> 00:07:24.820
I installed an Ubuntu on
this and installed Kubernetes

00:07:24.820 --> 00:07:28.600
on this, and I can pretty
much play live "Chaos Monkey"

00:07:28.600 --> 00:07:30.770
on this recipe pie cluster,
which is pretty cool.

00:07:30.770 --> 00:07:32.228
So if you want to
learn Kubernetes,

00:07:32.228 --> 00:07:34.150
this is a good way to start.

00:07:34.150 --> 00:07:36.820
Now, the core concepts
within Kubernetes

00:07:36.820 --> 00:07:39.340
to run your containers
are actually four

00:07:39.340 --> 00:07:42.440
that I want to touch
on in this session.

00:07:42.440 --> 00:07:44.830
The first one, first
and foremost, are pods.

00:07:44.830 --> 00:07:47.110
Pods is basically
your atomic unit which

00:07:47.110 --> 00:07:48.430
moves through your cluster.

00:07:48.430 --> 00:07:51.910
A pod basically bundles one or
multiple containers together,

00:07:51.910 --> 00:07:54.490
and it moves through a
cluster or gets an IP.

00:07:54.490 --> 00:07:56.170
But you should never
talk to this IP

00:07:56.170 --> 00:07:59.050
directly because a pod
is an ephemeral concept,

00:07:59.050 --> 00:08:03.110
in the sense it can start
and die at any point in time.

00:08:03.110 --> 00:08:06.190
Now, to make sure that there
are always as many pods

00:08:06.190 --> 00:08:08.830
available as you declared
in your configuration files,

00:08:08.830 --> 00:08:11.800
we have replica
sets, or deployments.

00:08:11.800 --> 00:08:13.600
And deployments help
you to basically say,

00:08:13.600 --> 00:08:16.450
I want to have five
pods of this kind.

00:08:16.450 --> 00:08:19.690
And the replica set will
watch that there are always

00:08:19.690 --> 00:08:21.790
five pods of this kind.

00:08:21.790 --> 00:08:23.860
Now, to make them
addressable, to actually

00:08:23.860 --> 00:08:25.870
be able to talk
to these pods, you

00:08:25.870 --> 00:08:28.030
use something that
is called service.

00:08:28.030 --> 00:08:31.960
Service is pretty much a
load balancer over the pods

00:08:31.960 --> 00:08:34.390
that you have available
and routes the traffic

00:08:34.390 --> 00:08:36.850
to the pods that are available.

00:08:36.850 --> 00:08:39.039
Now, the service
and the replicas

00:08:39.039 --> 00:08:42.159
both need to know what
they are managing,

00:08:42.159 --> 00:08:43.960
what they are responsible for.

00:08:43.960 --> 00:08:46.390
And that's where
labels come into play.

00:08:46.390 --> 00:08:48.760
Labels are an orthogonal
concept on top

00:08:48.760 --> 00:08:51.940
of this, which you can attach
to any kind of API objects

00:08:51.940 --> 00:08:53.290
within Kubernetes.

00:08:53.290 --> 00:08:54.970
And then you can select on this.

00:08:54.970 --> 00:09:00.190
So basically, a replica
set selects a set of labels

00:09:00.190 --> 00:09:02.710
to know which pods
it's responsible for.

00:09:02.710 --> 00:09:05.770
Or a service has
a set of labels it

00:09:05.770 --> 00:09:09.670
matches to see what kind of
pods to route traffic to.

00:09:09.670 --> 00:09:13.610
But this is a lot of words
and I like living on the edge.

00:09:13.610 --> 00:09:17.420
So I'd actually like to
show you a little live demo.

00:09:17.420 --> 00:09:21.710
Now, every live demo has
to start with some kind of,

00:09:21.710 --> 00:09:23.540
what I want to show or run.

00:09:23.540 --> 00:09:24.500
So in this case--

00:09:24.500 --> 00:09:27.050
I hope it is readable--

00:09:27.050 --> 00:09:29.540
I have a Go app, actually.

00:09:29.540 --> 00:09:31.970
My language of choice
nowadays is Go.

00:09:31.970 --> 00:09:34.640
And it's very simple and
easy to get started with it

00:09:34.640 --> 00:09:36.440
when you get a hang of it.

00:09:36.440 --> 00:09:39.560
And in this application, I
have basically two endpoints

00:09:39.560 --> 00:09:42.560
that you see down here,
where I have the host

00:09:42.560 --> 00:09:44.060
name and the hello end point.

00:09:44.060 --> 00:09:48.330
And I let this
run on port 8,000.

00:09:48.330 --> 00:09:52.140
Now, you see the implementations
of the functions here.

00:09:52.140 --> 00:09:54.440
Basically, one I'm just
returning a string,

00:09:54.440 --> 00:09:56.770
hello, from GDD Europe.

00:09:56.770 --> 00:09:59.840
And for the other one, I'm
actually just responding

00:09:59.840 --> 00:10:02.950
with the host name and the
version of the application

00:10:02.950 --> 00:10:04.690
that I'm running.

00:10:04.690 --> 00:10:07.490
Now, the first step
that I want to do

00:10:07.490 --> 00:10:09.620
is I actually want
to build a container.

00:10:09.620 --> 00:10:12.950
I want to build this app and
then put it into a container

00:10:12.950 --> 00:10:14.890
that I can run on Kubernetes.

00:10:14.890 --> 00:10:16.420
That's where Docker
file comes in.

00:10:16.420 --> 00:10:19.740
So in Kubernetes, you can
run different engines,

00:10:19.740 --> 00:10:23.210
Docker or Rocket are two
of the supported ones.

00:10:23.210 --> 00:10:25.990
There might be even more out
there that are supported.

00:10:25.990 --> 00:10:28.950
Now, since Docker is
the most popular one,

00:10:28.950 --> 00:10:31.160
I'm going to run a
Docker container.

00:10:31.160 --> 00:10:33.170
What I'm doing here is
actually something that

00:10:33.170 --> 00:10:34.870
just recently came into Docker.

00:10:34.870 --> 00:10:36.620
It's a multi-stage build.

00:10:36.620 --> 00:10:37.910
Why am I doing this?

00:10:37.910 --> 00:10:39.780
Well, if you build
your application,

00:10:39.780 --> 00:10:41.030
you need a lot of build tools.

00:10:41.030 --> 00:10:43.670
You need your compiler,
you need your linker,

00:10:43.670 --> 00:10:45.770
and all the libraries
and things like that.

00:10:45.770 --> 00:10:47.810
And your container
would be really big.

00:10:47.810 --> 00:10:50.610
But I want to have my
container as small as possible.

00:10:50.610 --> 00:10:54.470
So as you can see here in this
first step that I'm doing,

00:10:54.470 --> 00:10:56.480
I have my build container.

00:10:56.480 --> 00:10:59.660
I am loading my
source code in there.

00:10:59.660 --> 00:11:02.120
And then, in the run
command that you see there,

00:11:02.120 --> 00:11:05.570
I'm building actually my
statically-linked binary.

00:11:05.570 --> 00:11:07.220
Now in the second
step what I'm doing

00:11:07.220 --> 00:11:09.380
is I'm copying, from
that build container,

00:11:09.380 --> 00:11:12.890
my statically-linked binary
into a so-called Alpine

00:11:12.890 --> 00:11:14.540
container with version 3.6.

00:11:14.540 --> 00:11:19.790
Now Alpine, the base image
of Alpine is really small.

00:11:19.790 --> 00:11:21.050
It's, like, 8 megabytes.

00:11:21.050 --> 00:11:24.650
And so even if I would have
bad Wi-Fi at the conference,

00:11:24.650 --> 00:11:27.720
I could still do this
demo most of the times.

00:11:27.720 --> 00:11:31.050
So let's go ahead and do this.

00:11:31.050 --> 00:11:33.280
I'm going to build my
demo here and, as you see,

00:11:33.280 --> 00:11:35.030
I have it already
built. But basically, it

00:11:35.030 --> 00:11:39.540
goes through all these steps
and builds my application.

00:11:39.540 --> 00:11:42.680
Now, I have my
container built and have

00:11:42.680 --> 00:11:45.200
my container [INAUDIBLE].

00:11:45.200 --> 00:11:47.750
Now I need it to make it
available for Kubernetes

00:11:47.750 --> 00:11:49.380
on Google Cloud.

00:11:49.380 --> 00:11:51.772
So first, before I'm
going to get started,

00:11:51.772 --> 00:11:54.230
I just want to show you in the
upper left, a little command

00:11:54.230 --> 00:11:55.430
that you can see there.

00:11:55.430 --> 00:11:57.920
That is the command to get
started with Google Container

00:11:57.920 --> 00:11:59.080
Engine on Google Cloud.

00:11:59.080 --> 00:12:03.110
Key Cloud container
clusters create GDD cluster,

00:12:03.110 --> 00:12:05.300
for instance, and then
you wait three minutes

00:12:05.300 --> 00:12:08.150
and you have your cluster ready.

00:12:08.150 --> 00:12:10.340
Now, what I'm going
to do is I actually

00:12:10.340 --> 00:12:14.390
want to push this to
my private registry.

00:12:14.390 --> 00:12:15.950
So what I'm going
to do here, I'm

00:12:15.950 --> 00:12:17.750
going to push this to
my private registry.

00:12:17.750 --> 00:12:19.208
Since I have pushed
that before, it

00:12:19.208 --> 00:12:21.840
should be hopefully
pretty quick.

00:12:21.840 --> 00:12:23.670
I'm going to go through there.

00:12:23.670 --> 00:12:26.627
So now I have it pushed
on my private registry

00:12:26.627 --> 00:12:28.460
and I'm going to show
you really quick here.

00:12:28.460 --> 00:12:29.810
So this is my private registry.

00:12:29.810 --> 00:12:32.435
It shows you the containers that
were pushed, and the versions,

00:12:32.435 --> 00:12:34.430
and you can delete them
there, add other text,

00:12:34.430 --> 00:12:35.305
and things like that.

00:12:35.305 --> 00:12:36.980
So very flexible.

00:12:36.980 --> 00:12:39.200
Now, the first thing
that I want to do--

00:12:39.200 --> 00:12:44.780
and I can show you that I have
a Kubernetes cluster running--

00:12:44.780 --> 00:12:50.070
is that I have three nodes
in my Kubernetes cluster.

00:12:50.070 --> 00:12:54.470
Now, I use Cube CDL, which is
basically the magic CLI tool

00:12:54.470 --> 00:12:58.350
to interact with Kubernetes,
to run my application.

00:12:58.350 --> 00:13:00.890
So in this case, I
use Cube CDL run.

00:13:00.890 --> 00:13:02.360
I give that a name.

00:13:02.360 --> 00:13:05.270
I point to an image which
I want to run in my pod,

00:13:05.270 --> 00:13:07.640
and I want to point
to a port that I

00:13:07.640 --> 00:13:10.860
expose for this application.

00:13:10.860 --> 00:13:14.120
So now when we do this, I
want to actually show you

00:13:14.120 --> 00:13:16.980
what is happening here.

00:13:16.980 --> 00:13:18.920
So on the upper-right,
you see, actually,

00:13:18.920 --> 00:13:22.260
three API objects that
I'm going to show.

00:13:22.260 --> 00:13:25.370
And on the very first, you
have the pods that are running.

00:13:25.370 --> 00:13:28.490
And now we have our version
one of our demo app running.

00:13:28.490 --> 00:13:31.130
But the second one is all
the services that I have

00:13:31.130 --> 00:13:33.950
and the third one is all
the deployments that I have.

00:13:33.950 --> 00:13:36.770
Now, what I don't
have right now is

00:13:36.770 --> 00:13:39.310
I don't have a way, basically,
to talk to my application.

00:13:39.310 --> 00:13:42.890
So I have to make that somehow
available through the outside.

00:13:42.890 --> 00:13:45.270
And that's where
services come into play.

00:13:45.270 --> 00:13:49.520
So what I'm going to do is I
do a Cube CDL expose, which

00:13:49.520 --> 00:13:51.740
basically gives me
the chance to expose

00:13:51.740 --> 00:13:57.890
my service either inside the
cluster or even to the outside.

00:13:57.890 --> 00:14:00.310
How do I make it
exposable to the outside?

00:14:00.310 --> 00:14:03.410
That's where dash dash type
load balancer comes in,

00:14:03.410 --> 00:14:05.670
which basically tells
Google Cloud platform,

00:14:05.670 --> 00:14:08.060
please provision
a load balancer.

00:14:08.060 --> 00:14:10.790
Next to a load balancer and
make that application available

00:14:10.790 --> 00:14:11.840
outside.

00:14:11.840 --> 00:14:14.660
So you're going to see there,
I have now a service coming up,

00:14:14.660 --> 00:14:17.570
demo app, with a cluster
IP, which is my internal IP

00:14:17.570 --> 00:14:19.940
and an external IP
is pending because it

00:14:19.940 --> 00:14:21.770
takes a little bit of time.

00:14:21.770 --> 00:14:25.830
Now, you might want to
back your application.

00:14:25.830 --> 00:14:28.250
So what I'm going to
do is I can actually

00:14:28.250 --> 00:14:31.250
exec into my container.

00:14:31.250 --> 00:14:34.290
In this case, I
have to, of course,

00:14:34.290 --> 00:14:39.950
use the ID that you see in the
upper-right corner on the top.

00:14:39.950 --> 00:14:42.680
And I'm going to do
and execute bin bash.

00:14:42.680 --> 00:14:46.940
And now, in the lower one, you
see that I'm in the container.

00:14:46.940 --> 00:14:49.760
So I can do LS, I can do a
PS, and see what's running.

00:14:49.760 --> 00:14:50.870
My app is running.

00:14:50.870 --> 00:14:59.720
I can even do a wget q0 and say
HTTP slash slash local host.

00:14:59.720 --> 00:15:00.770
8,000.

00:15:00.770 --> 00:15:02.150
And say hello.

00:15:02.150 --> 00:15:04.460
And you see, OK,
hello from GDD Google.

00:15:04.460 --> 00:15:05.180
So that works.

00:15:05.180 --> 00:15:06.200
All right.

00:15:06.200 --> 00:15:08.660
So this gives you a possibility
to go back and see what's

00:15:08.660 --> 00:15:10.780
going on in the container.

00:15:10.780 --> 00:15:14.000
Now, the next thing I
want to do is-- actually

00:15:14.000 --> 00:15:15.980
what I can do with this.

00:15:15.980 --> 00:15:18.530
I want to see if it's
now externally available.

00:15:18.530 --> 00:15:20.900
And you see we have an
external IP over there

00:15:20.900 --> 00:15:22.290
on the right side.

00:15:22.290 --> 00:15:27.800
So I'm going to copy this
external IP really quick,

00:15:27.800 --> 00:15:29.930
put it in here, and run this.

00:15:29.930 --> 00:15:32.990
And this just
refreshes every second.

00:15:32.990 --> 00:15:35.600
Now what I want to do
is, with Kubernetes, it

00:15:35.600 --> 00:15:38.510
makes it very easy to
actually do rolling updates.

00:15:38.510 --> 00:15:42.330
So you push a new version
of your application.

00:15:42.330 --> 00:15:45.470
So what I want to do
here, in this case,

00:15:45.470 --> 00:15:50.840
I say, OK, you are an awesome
crowd because the audiences are

00:15:50.840 --> 00:15:52.310
always awesome.

00:15:52.310 --> 00:15:54.590
I'm going to save this.

00:15:54.590 --> 00:15:58.970
And I'm going to go back
to my shell and build this.

00:15:58.970 --> 00:16:01.850
So I do a Docker build.

00:16:01.850 --> 00:16:06.300
And in this case, I want to
have, of course, a new version.

00:16:06.300 --> 00:16:08.615
So let me go back and
do the version two.

00:16:08.615 --> 00:16:09.740
I'm going to build this.

00:16:09.740 --> 00:16:11.720
Now you see I actually
made a change so this

00:16:11.720 --> 00:16:15.590
takes a little bit longer.

00:16:15.590 --> 00:16:19.380
So you're just going to wait
for a second till that is done.

00:16:19.380 --> 00:16:21.680
And once it's done,
I can now push that

00:16:21.680 --> 00:16:23.750
to my Container Registry.

00:16:23.750 --> 00:16:27.050
So I have Key Cloud Docker.

00:16:27.050 --> 00:16:27.560
Push.

00:16:27.560 --> 00:16:29.770
And now I push version two.

00:16:29.770 --> 00:16:31.540
And now we wait
again a little bit.

00:16:31.540 --> 00:16:33.980
While we're waiting, with
Google Container Engines,

00:16:33.980 --> 00:16:36.830
you have a lot of things that
are managed for you by Google

00:16:36.830 --> 00:16:38.640
that, if you run
it somewhere else,

00:16:38.640 --> 00:16:40.130
would have to manage yourself.

00:16:40.130 --> 00:16:42.656
So things like you can
now do outer scaling,

00:16:42.656 --> 00:16:44.780
you have all the money
touring [INAUDIBLE] created.

00:16:44.780 --> 00:16:48.390
The [INAUDIBLE] is supervised
for you and things like that.

00:16:48.390 --> 00:16:50.780
Now, I want to push
out the next version.

00:16:50.780 --> 00:16:52.430
And before I want
to do this, I want

00:16:52.430 --> 00:16:54.620
to show you really quick
how easy it is, actually,

00:16:54.620 --> 00:16:56.060
to scale an application.

00:16:56.060 --> 00:17:00.140
Now, you have the Christmas
business coming up

00:17:00.140 --> 00:17:03.300
and you want to scale
out your application.

00:17:03.300 --> 00:17:05.180
So you just scale
the deployment.

00:17:05.180 --> 00:17:07.819
As you see on the upper
right, there is-- right now,

00:17:07.819 --> 00:17:09.281
I have desired one.

00:17:09.281 --> 00:17:10.280
I'm going to scale that.

00:17:10.280 --> 00:17:13.910
And you see, coming up on
the right, two new containers

00:17:13.910 --> 00:17:15.380
and we are live.

00:17:15.380 --> 00:17:18.380
And you can see that we
are live on the top-left,

00:17:18.380 --> 00:17:20.460
as the host name is changing.

00:17:20.460 --> 00:17:22.770
But we still have version 0.1.

00:17:22.770 --> 00:17:25.069
So what I want to
do really quick

00:17:25.069 --> 00:17:31.310
is actually edit my deployment
and go to my version 2.

00:17:31.310 --> 00:17:33.545
So this is the configuration
file that you see here.

00:17:33.545 --> 00:17:36.650
I just changed live, in
my configuration file,

00:17:36.650 --> 00:17:38.070
the version.

00:17:38.070 --> 00:17:40.290
And I'm crossing fingers
that it will work.

00:17:40.290 --> 00:17:43.700
And you can see it's
terminating version 0.1.

00:17:43.700 --> 00:17:47.990
Now it's running version 0.2
and, as you can see up there

00:17:47.990 --> 00:17:50.650
on the right, it actually
did the rolling update

00:17:50.650 --> 00:17:52.770
of my application.

00:17:52.770 --> 00:17:53.270
All right.

00:17:53.270 --> 00:17:55.990
So this, hopefully, gave
you a brief introduction.

00:17:55.990 --> 00:17:58.244
[APPLAUSE]

00:18:00.150 --> 00:18:01.010
Thank you very much.

00:18:01.010 --> 00:18:03.790
This gave you, hopefully, a
brief introduction in what

00:18:03.790 --> 00:18:05.810
Kubernetes is capable about.

00:18:05.810 --> 00:18:09.960
But what I'm really delighted
and excited about to have here

00:18:09.960 --> 00:18:13.880
is Steffen from Flixbus
who can actually

00:18:13.880 --> 00:18:17.460
talk about how to implement
Kubernetes in production

00:18:17.460 --> 00:18:20.270
and talking about the
experience of running Kubernetes

00:18:20.270 --> 00:18:23.450
in their company and how
it enabled them to innovate

00:18:23.450 --> 00:18:26.640
and grow really, really quick.

00:18:26.640 --> 00:18:29.008
So let's welcome Steffen.

00:18:29.008 --> 00:18:31.353
[MUSIC PLAYING]

00:18:35.110 --> 00:18:37.510
STEFFEN HANKEL: Thanks, Robert.

00:18:37.510 --> 00:18:38.150
I'm Steffen.

00:18:38.150 --> 00:18:40.030
I am an engineer at Flixbus.

00:18:40.030 --> 00:18:41.980
Let me just talk to
you about what we

00:18:41.980 --> 00:18:43.810
do with Kubernetes
at Flixbus and how

00:18:43.810 --> 00:18:45.880
we use it in production.

00:18:45.880 --> 00:18:47.380
First, who is Flixbus?

00:18:47.380 --> 00:18:52.150
So I think 200 of you actually
got some vouchers from Flixbus

00:18:52.150 --> 00:18:53.800
and traveled here by bus.

00:18:53.800 --> 00:18:54.890
So that's really cool.

00:18:54.890 --> 00:18:58.790
So we are a long distance
bus travel company.

00:18:58.790 --> 00:19:00.830
But we're actually
not a bus company.

00:19:00.830 --> 00:19:04.540
So even though we have around
1,500 buses on the streets,

00:19:04.540 --> 00:19:07.240
we don't actually own
any of those buses.

00:19:07.240 --> 00:19:09.820
So you can it compare
it to Uber model.

00:19:09.820 --> 00:19:11.500
We're just doing
all the marketing,

00:19:11.500 --> 00:19:14.862
planning, booking engine,
but we don't actually

00:19:14.862 --> 00:19:16.570
operate those buses
and we don't actually

00:19:16.570 --> 00:19:20.010
employ any of those bus drivers.

00:19:20.010 --> 00:19:22.750
So we cooperate with
small to mid-size bus

00:19:22.750 --> 00:19:24.820
operators for that.

00:19:24.820 --> 00:19:26.650
We have pretty good growth.

00:19:26.650 --> 00:19:30.370
Our first commit was
in December 2011.

00:19:30.370 --> 00:19:34.120
Now we have around 40
million passengers this year

00:19:34.120 --> 00:19:35.710
and that's an estimate.

00:19:35.710 --> 00:19:42.244
And at the bottom, you see the
graph of our stack uses an IT.

00:19:42.244 --> 00:19:43.910
When I joined the
company two years ago,

00:19:43.910 --> 00:19:46.030
we had around 50 people there.

00:19:46.030 --> 00:19:48.680
And now, altogether,
it's like 200.

00:19:48.680 --> 00:19:52.750
Not all engineers, but it's
challenging to grow that fast.

00:19:55.410 --> 00:19:58.530
So how did we start?

00:19:58.530 --> 00:20:03.870
We built a big monolith
made of all of PHP and MySQL

00:20:03.870 --> 00:20:06.420
and a bit of Memcache and all
the other external services

00:20:06.420 --> 00:20:07.290
you have.

00:20:07.290 --> 00:20:10.470
And all the developers were
working on this big monolith.

00:20:10.470 --> 00:20:13.590
This became a problem because
we want to grow the teams,

00:20:13.590 --> 00:20:17.400
we want to grow how we work,
we need more engineering power.

00:20:17.400 --> 00:20:20.850
So you cannot only work
on the single monolith.

00:20:20.850 --> 00:20:22.320
So what do you do?

00:20:22.320 --> 00:20:24.610
Well, you pick the
newest fancy solution

00:20:24.610 --> 00:20:27.030
that is called
self-contained systems.

00:20:27.030 --> 00:20:28.530
And basically, it
means you split up

00:20:28.530 --> 00:20:32.940
the teams and the code and the
code base by business domains.

00:20:32.940 --> 00:20:36.380
And every one of those
self-contained systems

00:20:36.380 --> 00:20:39.446
might be multiple micro
services that work together.

00:20:39.446 --> 00:20:41.070
But it also means,
of course, splitting

00:20:41.070 --> 00:20:42.319
the code base, the data model.

00:20:42.319 --> 00:20:44.190
You need a messaging bus.

00:20:44.190 --> 00:20:46.620
You need to handle
data migration.

00:20:46.620 --> 00:20:49.392
You need to have new teams,
new responsibilities,

00:20:49.392 --> 00:20:52.680
so there's a lot of
challenges doing that.

00:20:52.680 --> 00:20:55.660
And one of those challenges
is infrastructure.

00:20:55.660 --> 00:20:58.890
So we used to have a
two-person team managing

00:20:58.890 --> 00:21:00.510
our infrastructure.

00:21:00.510 --> 00:21:02.820
And this worked pretty fine.

00:21:02.820 --> 00:21:05.300
Over the years, it
got pretty stable,

00:21:05.300 --> 00:21:07.470
but of course, that's not
a sustainable solution,

00:21:07.470 --> 00:21:10.620
especially if we want to grow
the number of applications

00:21:10.620 --> 00:21:12.390
that we have.

00:21:12.390 --> 00:21:14.100
So the small and
simplest team resulted

00:21:14.100 --> 00:21:16.090
in that high communication
that every time you

00:21:16.090 --> 00:21:18.647
needed to do something, you
needed to talk to this team,

00:21:18.647 --> 00:21:19.980
and hey, please can you do that?

00:21:19.980 --> 00:21:22.230
Please, can you operate
PHP to this version?

00:21:22.230 --> 00:21:23.910
Please, can you
install this extension?

00:21:23.910 --> 00:21:25.240
Please, can you--

00:21:25.240 --> 00:21:28.350
I don't know, do
something else there.

00:21:28.350 --> 00:21:30.090
And we were running
on bare metal,

00:21:30.090 --> 00:21:32.660
and this makes it really
hard to do system upgrades.

00:21:32.660 --> 00:21:35.820
We were two years behind
on a deep-end release.

00:21:35.820 --> 00:21:38.334
Because there were more
important things to do.

00:21:38.334 --> 00:21:40.750
And of course, at some point,
you cannot scale your system

00:21:40.750 --> 00:21:42.070
anymore.

00:21:42.070 --> 00:21:46.140
So of all these [INAUDIBLE]
velocity of new application

00:21:46.140 --> 00:21:47.500
and services.

00:21:47.500 --> 00:21:51.330
So we need to change that if
we want to do micro services.

00:21:51.330 --> 00:21:54.480
And our goals when picking
a new infrastructure,

00:21:54.480 --> 00:21:58.740
looking for a solution there,
we had a few goals here.

00:21:58.740 --> 00:22:00.637
And one was that it
needs to be reproducible

00:22:00.637 --> 00:22:02.970
and unified [INAUDIBLE] mind
for applications, including

00:22:02.970 --> 00:22:04.080
development.

00:22:04.080 --> 00:22:06.030
So we had a lot of
different vacant boxes--

00:22:06.030 --> 00:22:08.430
people were moving around--

00:22:08.430 --> 00:22:10.722
which were not up to date
with the staging environment.

00:22:10.722 --> 00:22:12.805
And we had, of course, our
production environment,

00:22:12.805 --> 00:22:14.350
and it's hard to
keep that in sync.

00:22:14.350 --> 00:22:16.016
So containers are a
really good fit here

00:22:16.016 --> 00:22:17.500
to make them all
the same version

00:22:17.500 --> 00:22:19.862
and have them all be consistent.

00:22:19.862 --> 00:22:22.320
All the teams must be able to
demonstrate their environment

00:22:22.320 --> 00:22:24.730
quickly and independently.

00:22:24.730 --> 00:22:26.490
This is really
important so teams

00:22:26.490 --> 00:22:28.590
can-- if one team
wants to save his PHP5

00:22:28.590 --> 00:22:30.690
and the other team
wants to go with PHP7,

00:22:30.690 --> 00:22:33.054
it should be hey,
sure, no problem.

00:22:33.054 --> 00:22:34.470
And we want it to
be future proof.

00:22:34.470 --> 00:22:37.890
We don't want to redo
everything every two years.

00:22:37.890 --> 00:22:40.050
And the ease of use was
also really important

00:22:40.050 --> 00:22:42.440
and also [INAUDIBLE]
independence.

00:22:42.440 --> 00:22:45.980
So Kubernetes is a
really great fit here

00:22:45.980 --> 00:22:49.430
and I could talk about a lot
of great stuff in Kubernetes.

00:22:49.430 --> 00:22:51.160
For example, pods.

00:22:51.160 --> 00:22:56.720
They're a great model to
model entities in a cluster.

00:22:56.720 --> 00:22:59.090
Robust access control is
another really great feature

00:22:59.090 --> 00:23:01.330
to reduce overhead.

00:23:01.330 --> 00:23:04.490
The deployments are really
amazing in Kubernetes.

00:23:04.490 --> 00:23:06.710
Authentication models
are really good.

00:23:06.710 --> 00:23:10.280
But also, the strong API in the
ecosystem and the community,

00:23:10.280 --> 00:23:13.530
I think, makes
Kubernetes special.

00:23:13.530 --> 00:23:16.380
So let's talk about how you
can use the API to build

00:23:16.380 --> 00:23:18.730
your own great applications.

00:23:18.730 --> 00:23:23.190
So in February 2016, we were
dabbling around with Kubernetes

00:23:23.190 --> 00:23:25.921
and there was no
ingress controller yet.

00:23:25.921 --> 00:23:28.170
Ingress control is a way to
specify how to get traffic

00:23:28.170 --> 00:23:30.690
into your cluster.

00:23:30.690 --> 00:23:34.900
So we wrote our own, and it was
basically 100 lines of Go code.

00:23:34.900 --> 00:23:37.050
Now it's around 200
lines of Go code.

00:23:37.050 --> 00:23:38.770
And it's running
some production.

00:23:38.770 --> 00:23:41.170
We want to get rid of
it, but of course, it's

00:23:41.170 --> 00:23:44.130
always hard to get rid
of temporary solutions.

00:23:44.130 --> 00:23:48.160
And basically, this is
how the code looks like.

00:23:48.160 --> 00:23:49.920
We connect to Go.

00:23:49.920 --> 00:23:53.740
We connect to the HTTP server,
to the endpoint, and say,

00:23:53.740 --> 00:23:54.894
hey, what's true?

00:23:54.894 --> 00:23:56.310
So please give me
all the updates.

00:23:56.310 --> 00:23:58.320
Every time an endpoint
changes, please

00:23:58.320 --> 00:24:01.920
give me all the new endpoints.

00:24:01.920 --> 00:24:04.260
And we do some more of
the open reader for it

00:24:04.260 --> 00:24:06.504
and what you get
is, if you open this

00:24:06.504 --> 00:24:07.920
Go to connect to
this endpoint, is

00:24:07.920 --> 00:24:11.550
you get a JSON object
per line in this thing.

00:24:11.550 --> 00:24:14.220
So we read up to a
new line, we decode

00:24:14.220 --> 00:24:18.840
the JSON object, we put it
through a templating engine,

00:24:18.840 --> 00:24:21.970
put it to a directory
on the disk,

00:24:21.970 --> 00:24:25.080
and we basically reload Nginx.

00:24:25.080 --> 00:24:26.834
And of course,
there's not a lot of--

00:24:26.834 --> 00:24:28.500
all the error handling
is missing there,

00:24:28.500 --> 00:24:32.304
but it's actually still working,
running production for us.

00:24:32.304 --> 00:24:34.220
And this basically took
an afternoon to write.

00:24:36.830 --> 00:24:40.540
Another great part is the
community of Kubernetes.

00:24:40.540 --> 00:24:43.224
So we wanted to
incorporate Kubernetes,

00:24:43.224 --> 00:24:44.890
or the authentication
part of Kubernetes

00:24:44.890 --> 00:24:48.550
with open ended connect
to Azure Active Directory.

00:24:48.550 --> 00:24:50.290
And it seems we
[INAUDIBLE] because there

00:24:50.290 --> 00:24:52.990
was a bug in how the
validation was working.

00:24:52.990 --> 00:24:55.330
So we submitted
a buck and we did

00:24:55.330 --> 00:24:58.920
some of our own investigation
and found the corresponding pod

00:24:58.920 --> 00:25:01.980
in commiter source.

00:25:01.980 --> 00:25:04.640
There was a fix en
mass seven days later.

00:25:04.640 --> 00:25:06.910
And another six days later,
they gave us a new release

00:25:06.910 --> 00:25:08.490
with the fix included.

00:25:08.490 --> 00:25:10.690
So that's basically 14 days
from reporting the buck

00:25:10.690 --> 00:25:12.273
to getting a new
release that we could

00:25:12.273 --> 00:25:14.020
deploy in our infrastructure.

00:25:14.020 --> 00:25:17.020
And usually, you pay a lot
of money for this, I think.

00:25:17.020 --> 00:25:21.430
But with Kubernetes, you
just get it for free.

00:25:21.430 --> 00:25:25.010
Another pod,
deployments in the API.

00:25:25.010 --> 00:25:28.650
We tried various approaches
to deploy applications.

00:25:28.650 --> 00:25:32.090
Some developers use Cube CTL,
some use Jenkins, some GitLab

00:25:32.090 --> 00:25:32.650
CI.

00:25:32.650 --> 00:25:34.334
We tried a bit of Helm.

00:25:34.334 --> 00:25:36.000
But one of our
developers said, OK, this

00:25:36.000 --> 00:25:38.640
is all not working too well.

00:25:38.640 --> 00:25:40.770
I think I can do this better.

00:25:40.770 --> 00:25:43.830
And he started doing that
and he created Deployer,

00:25:43.830 --> 00:25:44.940
which we use internally.

00:25:44.940 --> 00:25:47.650
And the cool thing
about Deployer

00:25:47.650 --> 00:25:51.940
is that it creates a new staging
environment for every branch.

00:25:51.940 --> 00:25:54.150
So in the past, we
always had this problem.

00:25:54.150 --> 00:25:55.500
Hey, can I deploy my code?

00:25:55.500 --> 00:25:58.560
So we do 70-plus a day in
the old system, on average.

00:25:58.560 --> 00:26:00.109
And people want to
test their changes

00:26:00.109 --> 00:26:01.150
on a staging environment.

00:26:01.150 --> 00:26:03.774
But if there's no one
free, then you're blocked,

00:26:03.774 --> 00:26:05.190
and we don't want
to block people.

00:26:05.190 --> 00:26:08.790
So now we have one staging
environment per feature branch.

00:26:08.790 --> 00:26:11.910
And I'm going to show
a quick demo for that.

00:26:11.910 --> 00:26:13.500
So please switch to my laptop.

00:26:13.500 --> 00:26:15.210
OK, perfect.

00:26:15.210 --> 00:26:17.490
So I have a very simple
application here,

00:26:17.490 --> 00:26:21.780
a Docker file with Nginx.

00:26:21.780 --> 00:26:25.200
And we're basically just
exchanging the index HTML file

00:26:25.200 --> 00:26:27.520
there.

00:26:27.520 --> 00:26:32.130
I have a YAML file with all the
Kubernetes definitions I need.

00:26:32.130 --> 00:26:35.480
So we specify a service,
we put some stuff here,

00:26:35.480 --> 00:26:38.030
some labels that we need
for our custom [INAUDIBLE]..

00:26:38.030 --> 00:26:40.500
So you probably want to use
a ingress controller now,

00:26:40.500 --> 00:26:42.180
ingress resource.

00:26:42.180 --> 00:26:43.580
And we have a deployment.

00:26:43.580 --> 00:26:46.130
And basically, we
do some templating

00:26:46.130 --> 00:26:52.580
to get the dynamic stuff
into our YAML file.

00:26:52.580 --> 00:26:54.020
We have to deployer file.

00:26:54.020 --> 00:26:55.340
It's a bit like [INAUDIBLE] CI.

00:26:55.340 --> 00:26:58.409
We were looking into those
things as an inspiration.

00:26:58.409 --> 00:27:00.950
And [INAUDIBLE] hey, OK, what
class do you want to deploy to?

00:27:00.950 --> 00:27:02.080
What name space?

00:27:02.080 --> 00:27:04.930
What containers are there
that need to be built?

00:27:04.930 --> 00:27:08.210
And we configure GitLab CI
to build our containers,

00:27:08.210 --> 00:27:10.520
push it, and then
trigger the CI--

00:27:10.520 --> 00:27:13.850
deploy our CI pipeline.

00:27:13.850 --> 00:27:17.140
Let's make a change
here in the HTML file.

00:27:17.140 --> 00:27:18.620
I will create a new branch.

00:27:26.060 --> 00:27:36.330
And now it's 1307.

00:27:36.330 --> 00:27:41.890
I commit the file
and say, hello, GDD.

00:27:41.890 --> 00:27:42.580
We push it.

00:27:46.680 --> 00:27:50.050
So with the CD mass of
branches already employed,

00:27:50.050 --> 00:27:52.310
everything works fine
and the demo gods

00:27:52.310 --> 00:27:54.680
listened to my prayers.

00:27:54.680 --> 00:27:56.915
Then we fill a new deployment
here in your service,

00:27:56.915 --> 00:27:57.540
so there it is.

00:28:00.240 --> 00:28:02.230
So the new deployment
has a new-- basically,

00:28:02.230 --> 00:28:03.640
it's all in the same name space.

00:28:03.640 --> 00:28:04.952
They have a new prefix.

00:28:04.952 --> 00:28:07.285
I'm going to give it a few
seconds because our open lens

00:28:07.285 --> 00:28:08.835
is throttling, like reload.

00:28:08.835 --> 00:28:13.490
So we might need to give it
a bit of time so it works.

00:28:13.490 --> 00:28:16.160
This is the master
branch, which still works.

00:28:22.790 --> 00:28:24.150
OK.

00:28:24.150 --> 00:28:25.045
So I'll open it.

00:28:25.045 --> 00:28:29.030
It probably still needs
a bit of time to reload.

00:28:29.030 --> 00:28:30.890
And there it is.

00:28:30.890 --> 00:28:33.200
So you get a feature branch
for every-- or environment

00:28:33.200 --> 00:28:34.730
for every feature
branch when you're

00:28:34.730 --> 00:28:37.622
developing, automatically.

00:28:37.622 --> 00:28:40.448
[APPLAUSE]

00:28:43.460 --> 00:28:43.960
OK.

00:28:43.960 --> 00:28:47.040
Let's go back to
the presentation.

00:28:47.040 --> 00:28:49.170
So these things all
fit very well together

00:28:49.170 --> 00:28:51.091
and help us solve our
problems that we have.

00:28:51.091 --> 00:28:53.340
Because every company is
unique and sometimes you need

00:28:53.340 --> 00:28:56.880
to change things and there's
no one-size-fits-all solution.

00:28:56.880 --> 00:28:58.970
And Kubernetes really
gives you the tools

00:28:58.970 --> 00:29:02.422
to help solve your own problems.

00:29:02.422 --> 00:29:03.630
So what's the current status?

00:29:03.630 --> 00:29:05.430
How does our
infrastructure look?

00:29:05.430 --> 00:29:08.040
So not everything is
running Kubernetes yet,

00:29:08.040 --> 00:29:09.880
but we already have
around 60 names

00:29:09.880 --> 00:29:13.560
spaces for around 12 teams.

00:29:13.560 --> 00:29:18.005
At peak, that was like 800
containers running on 32 nodes.

00:29:18.005 --> 00:29:20.130
And we have mode production
services running there,

00:29:20.130 --> 00:29:22.080
including two mission
critical events, which

00:29:22.080 --> 00:29:28.430
push around a 100 megabit
of traffic at peak level.

00:29:28.430 --> 00:29:31.239
So Kubernetes really helped
us solve our problems.

00:29:31.239 --> 00:29:32.780
For me personally,
I think Kubernetes

00:29:32.780 --> 00:29:35.290
is one of the most exciting
projects, open source

00:29:35.290 --> 00:29:37.790
projects, in the infrastructure
space since the Linux kernel

00:29:37.790 --> 00:29:38.920
itself.

00:29:38.920 --> 00:29:42.620
There's so much support in the
community and just great stuff

00:29:42.620 --> 00:29:43.550
going on.

00:29:43.550 --> 00:29:45.860
You should really look into
it if you need to solve

00:29:45.860 --> 00:29:48.930
or [INAUDIBLE].

00:29:48.930 --> 00:29:50.505
So thank you.

00:29:50.505 --> 00:29:52.610
If you have any
questions or want

00:29:52.610 --> 00:29:54.530
to chat with us about
Kubernetes, the Flixbus

00:29:54.530 --> 00:29:56.154
stack, or Google
Cloud, you can find us

00:29:56.154 --> 00:29:59.240
on the third floor at the Google
Cloud Platform office hours

00:29:59.240 --> 00:30:00.657
after this talk.

00:30:00.657 --> 00:30:01.490
Thank you very much.

00:30:01.490 --> 00:30:02.390
[APPLAUSE]

00:30:02.390 --> 00:30:06.640
[MUSIC PLAYING]

