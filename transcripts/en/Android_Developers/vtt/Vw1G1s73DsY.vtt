WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.040
[MUSIC PLAYING]

00:00:03.040 --> 00:00:04.150
COLT MCANLIS: And go.

00:00:04.150 --> 00:00:04.650
[BEEP]

00:00:04.650 --> 00:00:05.941
You know what this timer means?

00:00:05.941 --> 00:00:07.540
Every quarter
second a user spends

00:00:07.540 --> 00:00:09.580
staring at a blank screen
instead of interfacing

00:00:09.580 --> 00:00:11.175
with your app is a
quarter second more

00:00:11.175 --> 00:00:12.550
they're willing
to close your app

00:00:12.550 --> 00:00:14.341
and give their attention
to something else.

00:00:14.341 --> 00:00:14.990
[BEEP]

00:00:14.990 --> 00:00:16.900
My name is Colt McAnlis,
and misunderstanding

00:00:16.900 --> 00:00:19.760
all the complex things that
happen during your app startup

00:00:19.760 --> 00:00:22.050
can lead to some serious
performance problems.

00:00:22.050 --> 00:00:23.600
Now, see, Android
is pretty smart

00:00:23.600 --> 00:00:26.230
when it comes to understanding
human performance perception.

00:00:26.230 --> 00:00:28.450
As soon as the user
launches your application,

00:00:28.450 --> 00:00:30.840
Android will immediately
display a start window, which

00:00:30.840 --> 00:00:33.420
will stay around until your
application is fully loaded,

00:00:33.420 --> 00:00:36.020
initialized, and can
draw its first frame.

00:00:36.020 --> 00:00:37.920
This behavior is
most often seen when

00:00:37.920 --> 00:00:39.760
your app is booted
for the first time,

00:00:39.760 --> 00:00:42.570
but it can easily happen
other times as well,

00:00:42.570 --> 00:00:44.954
like when the activity is
brought to the foreground,

00:00:44.954 --> 00:00:46.620
or after the user
backs out of your app,

00:00:46.620 --> 00:00:48.040
or after some
portion of your app

00:00:48.040 --> 00:00:50.380
has been purged by the
system to save memory.

00:00:50.380 --> 00:00:52.880
Basically, any time the user
moves from something else

00:00:52.880 --> 00:00:54.930
to your application,
there's a chance

00:00:54.930 --> 00:00:56.470
you can see this
type of behavior.

00:00:56.470 --> 00:00:58.640
The important
point here is this.

00:00:58.640 --> 00:01:01.130
Letting the user spend too
much time looking at the start

00:01:01.130 --> 00:01:02.620
window gives them
ample opportunity

00:01:02.620 --> 00:01:04.670
to get bored and move
on to other things.

00:01:04.670 --> 00:01:07.390
And taking too long
in general could even

00:01:07.390 --> 00:01:10.320
cause the Application Not
Responding dialog to pop up.

00:01:10.320 --> 00:01:13.030
Neither of these are very
good for user retention.

00:01:13.030 --> 00:01:15.030
So from the technical
side, the whole process

00:01:15.030 --> 00:01:16.297
works something like this.

00:01:16.297 --> 00:01:18.880
When the user launches your app,
the system does a bit of work

00:01:18.880 --> 00:01:20.380
to load your
application information

00:01:20.380 --> 00:01:22.810
and create a unique
process for your app.

00:01:22.810 --> 00:01:24.340
From there, the
system process will

00:01:24.340 --> 00:01:25.840
display the starting
window and basically

00:01:25.840 --> 00:01:27.920
hang out until the
application is up and running.

00:01:27.920 --> 00:01:29.550
Meanwhile, the
application process

00:01:29.550 --> 00:01:31.370
will create the
application object

00:01:31.370 --> 00:01:32.860
and launch the main thread.

00:01:32.860 --> 00:01:34.660
This is where your
startup activity

00:01:34.660 --> 00:01:37.860
will be initialized, created,
inflated, and finally drawn.

00:01:37.860 --> 00:01:40.140
It's only at this point,
after the application

00:01:40.140 --> 00:01:42.490
has drawn its first frame,
that the system process then

00:01:42.490 --> 00:01:45.920
goes and swaps out the start
window for the application.

00:01:45.920 --> 00:01:48.670
Now, to be clear, the majority
of that entire process

00:01:48.670 --> 00:01:49.872
happens pretty cleanly.

00:01:49.872 --> 00:01:51.830
There's not really much
chance that performance

00:01:51.830 --> 00:01:52.740
can go off the rails.

00:01:52.740 --> 00:01:54.650
However, there are
three big areas

00:01:54.650 --> 00:01:56.880
where things could
become problematic

00:01:56.880 --> 00:01:58.480
that you should keep an eye on.

00:01:58.480 --> 00:02:00.480
The first thing you should
really take a look at

00:02:00.480 --> 00:02:02.990
is all the work that goes into
creating your activity class.

00:02:02.990 --> 00:02:04.750
Most often, there's
lots of heavy lifting

00:02:04.750 --> 00:02:07.110
that occurs during this
process, but heaviest

00:02:07.110 --> 00:02:09.220
has to be the inflation
of layouts and loading

00:02:09.220 --> 00:02:11.130
of resources that
goes along with it.

00:02:11.130 --> 00:02:14.500
This is not a cheap process, and
if your layouts are too complex

00:02:14.500 --> 00:02:16.634
or you've got some
blocking logic in there,

00:02:16.634 --> 00:02:18.300
this can cause some
really big problems.

00:02:18.300 --> 00:02:21.800
On a similar note, make sure you
take a look at your application

00:02:21.800 --> 00:02:22.890
initialization.

00:02:22.890 --> 00:02:25.850
For really complex
apps, the initialization

00:02:25.850 --> 00:02:28.720
of the app object often
becomes a junk drawer

00:02:28.720 --> 00:02:30.680
for lots of global
classes that might

00:02:30.680 --> 00:02:32.460
be used between activities.

00:02:32.460 --> 00:02:34.290
So there tends to
be lots of work here

00:02:34.290 --> 00:02:36.040
that could be deferred
to later times

00:02:36.040 --> 00:02:39.040
or perhaps loaded in
a lazy-load fashion.

00:02:39.040 --> 00:02:40.930
Now, there's lots of
applications out there

00:02:40.930 --> 00:02:43.430
which provide custom
start windows.

00:02:43.430 --> 00:02:44.810
This is either
done to help brand

00:02:44.810 --> 00:02:47.410
the application or
to make a slow load

00:02:47.410 --> 00:02:49.519
look like a custom-branded
application.

00:02:49.519 --> 00:02:51.560
Now, if you're doing this
to hide bad load times,

00:02:51.560 --> 00:02:53.250
obviously, you should
fix that first.

00:02:53.250 --> 00:02:54.817
But if you're doing
it for branding,

00:02:54.817 --> 00:02:57.400
then you need to be aware that
there's a right and a wrong way

00:02:57.400 --> 00:02:59.690
to set this up, so that it
doesn't influence the user

00:02:59.690 --> 00:03:01.480
perception too negatively.

00:03:01.480 --> 00:03:03.704
But before you run
off into the weeds

00:03:03.704 --> 00:03:05.620
and try to fix these
types of common patterns,

00:03:05.620 --> 00:03:07.130
you need to sit
down and figure out

00:03:07.130 --> 00:03:09.530
if you have a problem
in the first place.

00:03:09.530 --> 00:03:12.590
Thankfully, Android has
a few tools to help.

00:03:12.590 --> 00:03:14.670
Firstly is display time.

00:03:14.670 --> 00:03:17.880
For releases after
KitKat, Logcat

00:03:17.880 --> 00:03:19.350
will include an
output line which

00:03:19.350 --> 00:03:21.683
displays the amount of time
between when the process was

00:03:21.683 --> 00:03:24.342
launched and the activity
finally drawn to the screen.

00:03:24.342 --> 00:03:26.050
This can be helpful,
because it gives you

00:03:26.050 --> 00:03:29.150
a general idea how long it takes
to occur for your application.

00:03:29.150 --> 00:03:31.090
Oh, by the way,
note, if you want

00:03:31.090 --> 00:03:33.900
to see this value inside
of Android Studio,

00:03:33.900 --> 00:03:36.790
you need to turn off filters
for the Logcat output.

00:03:36.790 --> 00:03:38.420
So keep that in mind.

00:03:38.420 --> 00:03:41.630
Secondly is
reportFullyDrawn function.

00:03:41.630 --> 00:03:44.190
The displayed metric
that's reported in Logcat

00:03:44.190 --> 00:03:46.011
is useful for most
situations where

00:03:46.011 --> 00:03:47.510
you'd like to track
down the time it

00:03:47.510 --> 00:03:49.970
takes to go from application
start to first visible.

00:03:49.970 --> 00:03:52.610
However, in modern
application development,

00:03:52.610 --> 00:03:55.170
there's often a great deal
of lazy loading-- that is,

00:03:55.170 --> 00:03:57.560
rather than blocking the
initial drawing of the window,

00:03:57.560 --> 00:04:00.540
asynchronously loading resources
and views in the background

00:04:00.540 --> 00:04:02.830
and updating the view
hierarchy accordingly.

00:04:02.830 --> 00:04:05.330
The result is that while
the initial activity may

00:04:05.330 --> 00:04:08.350
be visible, it may not yet
be fully loaded with respect

00:04:08.350 --> 00:04:10.100
to resources, which
could be considered

00:04:10.100 --> 00:04:12.380
a separate metric to use
when evaluating launch time

00:04:12.380 --> 00:04:13.250
performance.

00:04:13.250 --> 00:04:15.380
To address this concern,
you can manually

00:04:15.380 --> 00:04:18.089
call the
activity.reportFullyDrawn

00:04:18.089 --> 00:04:20.899
function to let the system know
that your activity is finished

00:04:20.899 --> 00:04:22.570
with its lazy loading.

00:04:22.570 --> 00:04:24.530
Third is method tracing.

00:04:24.530 --> 00:04:26.716
While display time
and reportFullyDrawn

00:04:26.716 --> 00:04:28.590
give a good understanding
of the overall load

00:04:28.590 --> 00:04:31.720
time of your application,
they do not provide details

00:04:31.720 --> 00:04:33.760
into what may be
causing particular parts

00:04:33.760 --> 00:04:36.500
of that pipeline to go
longer than expected.

00:04:36.500 --> 00:04:37.950
To gain more insight
in this area,

00:04:37.950 --> 00:04:39.610
you can use the
start method tracing

00:04:39.610 --> 00:04:41.870
tool inside of Android Studio.

00:04:41.870 --> 00:04:44.300
And finally is the
big one, Systrace.

00:04:44.300 --> 00:04:46.270
When you add trace
functions inside

00:04:46.270 --> 00:04:49.200
of your onCreate methods, it
will augment your logging,

00:04:49.200 --> 00:04:51.240
such that the Systrace
tool can properly

00:04:51.240 --> 00:04:53.410
discover all the
subsections and display them

00:04:53.410 --> 00:04:54.976
in its graphing process.

00:04:54.976 --> 00:04:57.350
And if you're looking for more
great performance insight,

00:04:57.350 --> 00:04:59.180
don't forget to check out
the rest of the "Android

00:04:59.180 --> 00:05:00.550
Performance Patterns" content.

00:05:00.550 --> 00:05:03.340
And be sure to join the Google+
community to ask questions from

00:05:03.340 --> 00:05:04.780
other perf gurus.

00:05:04.780 --> 00:05:07.910
So keep calm, profile your
code, and always remember,

00:05:07.910 --> 00:05:08.650
perf matters.

00:05:08.650 --> 00:05:11.700
[MUSIC PLAYING]

