WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.760
&gt;&gt;&gt; Ladies and gentlemen, please welcome vice
president of engineering for Google, Vic Gundotra.

00:00:07.760 --> 00:00:18.311
[ Applause ]
&gt;&gt;Vic Gundotra: Well, good morning.

00:00:18.311 --> 00:00:20.449
Good morning.
And hello.

00:00:20.449 --> 00:00:27.340
On behalf of Google, let me extend a very
warm welcome to all 5,000 in attendance today,

00:00:27.340 --> 00:00:33.360
as well as the many more thousands who are
watching our first-ever live streamcast of

00:00:33.360 --> 00:00:37.219
this event on YouTube.com.
Thank you.

00:00:37.219 --> 00:00:41.950
You know, it's hard to believe that this is
our third Google I/O.

00:00:41.950 --> 00:00:46.600
It's not only our largest Google I/O, it's
the one that we sold out the fastest.

00:00:46.600 --> 00:00:51.039
It even surprised us.
Within weeks of announcing this conference,

00:00:51.039 --> 00:00:55.010
we sold out of this event two and a half months
in advance.

00:00:55.010 --> 00:01:00.930
We think that speaks volumes about the level
of enthusiasm that you all have for this important

00:01:00.930 --> 00:01:05.840
community event.
And at Google, we recognize how precious and

00:01:05.840 --> 00:01:10.510
valuable your time is, and we're honored and
grateful that you have chosen to spend two

00:01:10.510 --> 00:01:14.590
days here with us.
We hope you find this conference exciting

00:01:14.590 --> 00:01:19.311
and really engaging, and we have a few surprises
for you as well.

00:01:19.311 --> 00:01:23.369
Now, some of you may wonder, how did we name
this conference?

00:01:23.369 --> 00:01:29.540
What does I/O stand for?
Three-plus years ago, when we first thought

00:01:29.540 --> 00:01:34.320
about holding a developers' conference and
we thought about naming the event, we contemplated

00:01:34.320 --> 00:01:39.049
multiple choices.
We wanted a name that, most importantly, embodied

00:01:39.049 --> 00:01:46.820
the spirit of the Web, a spirit of collaboration.
Sometimes messy, but always fun.

00:01:46.820 --> 00:01:54.020
A spirit of inclusiveness rather than exclusiveness.
A spirit of innovation and of openness.

00:01:54.020 --> 00:01:56.340
And, of course, we wanted this event to appeal
to developers.

00:01:56.340 --> 00:02:00.549
So we thought, what's the first thing a developer
learns to do when they begin to code?

00:02:00.549 --> 00:02:03.600
Well, it's input and output.
That's I/O.

00:02:03.600 --> 00:02:12.840
But I/O also stands for two of the most important
elements of our Web culture: Innovation in

00:02:12.840 --> 00:02:18.450
the open.
Make no mistake about it, the Web is the most

00:02:18.450 --> 00:02:23.379
important platform of our generation.
And because it's a platform controlled by

00:02:23.379 --> 00:02:29.129
none of us, it's the only platform that truly
belongs to all of us.

00:02:29.129 --> 00:02:32.630
And it's our job as a community to move that
Web forward.

00:02:32.630 --> 00:02:39.120
And so you can imagine how pleased we were
last year at this conference to focus the

00:02:39.120 --> 00:02:46.379
world's attention, the developer community's
attention, on an important standard, HTML5.

00:02:46.379 --> 00:02:53.300
It was at this conference in this room last
year that you can see we first started driving

00:02:53.300 --> 00:02:57.000
attention toward HTML5.
And events later on in the year continued

00:02:57.000 --> 00:03:04.629
that momentum that we, as a community, started.
That huge spike is YouTube's adoption of HTML5.

00:03:04.629 --> 00:03:09.440
That other spike is Apple's adoption.
I think it was a Steve Jobs late-night e-mail

00:03:09.440 --> 00:03:10.590
or something.
[ Laughter ]

00:03:10.590 --> 00:03:14.099
&gt;&gt;Vic Gundotra: That last spike --
[ Applause ]

00:03:14.099 --> 00:03:19.040
&gt;&gt;Vic Gundotra: Hey, we'll take support from
wherever we can get it.

00:03:19.040 --> 00:03:22.760
That last spike included Microsoft's support
for HTML5.

00:03:22.760 --> 00:03:29.000
As a community, working together, and collaboratively,
we can move the Web forward.

00:03:29.000 --> 00:03:32.540
Of course, we recognize that we are far from
done.

00:03:32.540 --> 00:03:37.310
We recognize that the Web has important challenges
that we need to address as a community.

00:03:37.310 --> 00:03:44.280
How can we make the Web faster?
How can we make Web apps as discoverable as

00:03:44.280 --> 00:03:48.910
you see, for example, in app stores?
How can we make it easier for developers to

00:03:48.910 --> 00:03:54.290
monetize those applications?
And, finally, can we make the Web extend its

00:03:54.290 --> 00:04:00.800
reach even to new form factors?
We hope to show you our proposed answers to

00:04:00.800 --> 00:04:05.220
some of these questions at this conference.
And we're very much looking forward to your

00:04:05.220 --> 00:04:09.489
feedback.
Of course, the Web is growing up.

00:04:09.489 --> 00:04:11.950
It's all happening because we're working on
it together.

00:04:11.950 --> 00:04:15.840
And we think this conference is an important
part of that process.

00:04:15.840 --> 00:04:22.440
Before I hand off to our opening keynote speaker,
let me just make two housekeeping announcements.

00:04:22.440 --> 00:04:28.210
The first announcement is, I hope you all
enjoyed the Android devices that we sent you

00:04:28.210 --> 00:04:31.930
as part of registering.
[ Applause ]

00:04:31.930 --> 00:04:36.990
[ Cheers and applause ]
&gt;&gt;Vic Gundotra: If you have not already done

00:04:36.990 --> 00:04:43.060
so, please go to the Android Marketplace and
download an application we specifically designed

00:04:43.060 --> 00:04:48.210
for you at this conference, just do a search
on Google conference or Google I/O, and you'll

00:04:48.210 --> 00:04:51.680
find this application.
This application will make it very easy for

00:04:51.680 --> 00:04:56.840
you to make the best use of your time and
to really find the sessions that interest

00:04:56.840 --> 00:05:01.020
you the most.
The second and last housekeeping note, tomorrow's

00:05:01.020 --> 00:05:07.240
keynote will not start at 9:00 a.m.
It will start at 8:30 in the morning.

00:05:07.240 --> 00:05:10.710
I know, that's early in the morning, particularly
for you developers.

00:05:10.710 --> 00:05:17.740
But I promise you, you will not be disappointed.
We have more than one surprise tomorrow morning.

00:05:17.740 --> 00:05:23.740
So have fun at the party tonight, but remember,
the fun starts at 8:30 tomorrow morning.

00:05:23.740 --> 00:05:27.300
[ Laughter ]
&gt;&gt;Vic Gundotra: All right.

00:05:27.300 --> 00:05:31.820
With that, let me hand off to our opening
keynote speaker, who will carry the banner

00:05:31.820 --> 00:05:36.229
of the open Web.
Please join me in welcoming Google vice president

00:05:36.229 --> 00:05:38.360
of product management, Sundar Pichai.
[ Applause ]

00:05:38.360 --> 00:05:50.139
&gt;&gt;Sundar Pichai:

00:05:50.139 --> 00:05:52.710
Thanks, Vic.
It's great to be here.

00:05:52.710 --> 00:05:59.060
I'm going to be talking to you today about
HTML5, the incredible momentum we have, all

00:05:59.060 --> 00:06:04.090
the new capabilities that are coming up, how
modern browsers are going to support these

00:06:04.090 --> 00:06:07.069
APIs.
We will show you real-world examples.

00:06:07.069 --> 00:06:11.389
We will invite application developers who
are building amazing experiences on top of

00:06:11.389 --> 00:06:14.580
HTML5.
And, finally, we will have a couple of important

00:06:14.580 --> 00:06:19.720
announcements on the way.
So let's get started.

00:06:19.720 --> 00:06:26.949
First, as Vic mentioned, the Web is the most
important platform of our generation.

00:06:26.949 --> 00:06:31.770
And from a user standpoint, people are spending
more of their time on the Web.

00:06:31.770 --> 00:06:36.840
Compared to every other information medium
out there, the Web is more than double in

00:06:36.840 --> 00:06:42.120
terms of the amount of time people spent in
the last five years.

00:06:42.120 --> 00:06:46.100
Every other information medium has been the
same or has declined.

00:06:46.100 --> 00:06:49.520
That's how important the Web is in users'
lives.

00:06:49.520 --> 00:06:54.479
How are developers reacting to it?
We started taking a look at how applications

00:06:54.479 --> 00:06:58.800
have been written since 1990.
Most of you are familiar with the popular

00:06:58.800 --> 00:07:05.190
desktop applications: Microsoft Office, iTunes,
Skype, Photoshop.

00:07:05.190 --> 00:07:07.980
The list goes on and on.
These are amazing applications which we all

00:07:07.980 --> 00:07:14.599
use in our day-to-day lives.
The interesting thing, though, is, since 2004,

00:07:14.599 --> 00:07:20.060
we can't come up with popular desktop applications,
outside of games and browsers, that are being

00:07:20.060 --> 00:07:24.110
used by millions of users.
What happened in 2004?

00:07:24.110 --> 00:07:29.199
It turned out it is the year in which Ajax
and the Web 2.0 revolution happened.

00:07:29.199 --> 00:07:34.500
People started writing these applications
as Web applications, applications which you're

00:07:34.500 --> 00:07:38.610
all very familiar with: GMail, Google Maps,
Twitter, Facebook, et cetera.

00:07:38.610 --> 00:07:43.470
The world changed.
The Web changed from documents to applications.

00:07:43.470 --> 00:07:48.680
And developers started reaching users by writing
Web applications instead of desktop applications.

00:07:48.680 --> 00:07:54.289
So this is a powerful change.
It's a very important trend.

00:07:54.289 --> 00:08:00.271
Given that, we need to make sure Web applications
can do everything that desktop applications

00:08:00.271 --> 00:08:02.669
can do.
You're all very familiar with this.

00:08:02.669 --> 00:08:07.400
Historically, desktop applications have had
full access to system capabilities.

00:08:07.400 --> 00:08:11.430
So they could talk to the speaker, microphone,
camera.

00:08:11.430 --> 00:08:15.710
They could access the file system, for example.
Web applications have been limited in what

00:08:15.710 --> 00:08:19.590
they can do.
This is what the HTML5 work is all about.

00:08:19.590 --> 00:08:24.690
We are working very hard as a community to
make sure all these capabilities show up in

00:08:24.690 --> 00:08:27.349
the browser.
Let me give a few examples.

00:08:27.349 --> 00:08:33.099
Most computers today ship with powerful GPUs.
How do you make sure Web applications can

00:08:33.099 --> 00:08:37.769
access these graphics capabilities?
That's what Web GL and the graphics APIs are

00:08:37.769 --> 00:08:41.951
all about.
Workers, it is about allowing Web applications

00:08:41.951 --> 00:08:45.930
to access the multi-core CPUs present on the
computers.

00:08:45.930 --> 00:08:52.700
There are APIs to access the local file system,
local storage, speaker, microphone, camera,

00:08:52.700 --> 00:08:57.360
and the list goes on.
All this matters only if browsers support

00:08:57.360 --> 00:09:02.030
these APIs.
So let's take a look at how we are doing there.

00:09:02.030 --> 00:09:06.240
About 24 months ago, this had just gotten
under way.

00:09:06.240 --> 00:09:12.010
There was pioneering work here by Firefox,
Safari, Opera, and Chrome didn't even exist

00:09:12.010 --> 00:09:15.040
then.
So this is about 24 months ago, and it had

00:09:15.040 --> 00:09:19.380
just gotten under way.
Let's fast forward to where we were last year

00:09:19.380 --> 00:09:22.990
during Google I/O.
You can see the momentum was there.

00:09:22.990 --> 00:09:28.040
Set of APIs being implemented in all modern
browsers, including Chrome.

00:09:28.040 --> 00:09:31.880
So the progress was very exciting.
So where do we expect to be by the end of

00:09:31.880 --> 00:09:36.750
this year?
As you can see, all the major APIs are going

00:09:36.750 --> 00:09:39.820
to be present in all modern browsers.
So --

00:09:39.820 --> 00:09:42.490
[ Laughter ]
[ Applause ]

00:09:42.490 --> 00:09:52.300
&gt;&gt;Sundar Pichai: So U.S. developers can bank
on these APIs being present in the browsers

00:09:52.300 --> 00:09:57.970
when users reach your applications.
Another important trend is mobile.

00:09:57.970 --> 00:10:00.640
All of you are carrying a smart phone here
today.

00:10:00.640 --> 00:10:07.110
The interesting thing there is, the smart
phones all are connected with capable browsers.

00:10:07.110 --> 00:10:10.860
This is looking at search traffic, the mobile
search traffic that hits Google.

00:10:10.860 --> 00:10:15.810
And if you look at the proportion that comes
from HTML5-capable browsers, it's far outpacing

00:10:15.810 --> 00:10:19.839
the other browsers as well.
So HTML5 is everywhere.

00:10:19.839 --> 00:10:22.310
So the question is, how do we make use of
it?

00:10:22.310 --> 00:10:26.490
How do we all make use of it to create amazing
experiences for users?

00:10:26.490 --> 00:10:32.670
So I want to show you a few examples.
I'm going to start with a demo from Google.

00:10:32.670 --> 00:10:37.630
I'm going to invite Jeff Chang, who's a product
manager on the Chrome team, to give you a

00:10:37.630 --> 00:10:44.760
demo of GMail, how GMail is has built two
simple yet powerful features on top of HTML5.

00:10:44.760 --> 00:10:50.320
So let's get started.
So Jeff is loading GMail.

00:10:50.320 --> 00:10:53.870
It turns out, one of the most popular features
in GMail is sending e-mail.

00:10:53.870 --> 00:10:57.600
[ Laughter ]
&gt;&gt;Sundar Pichai: And most people tend to attach

00:10:57.600 --> 00:11:01.350
files when they do that.
If you're using a traditional desktop application

00:11:01.350 --> 00:11:04.850
like outlook, it's very intuitive.
You just drag and drop a file.

00:11:04.850 --> 00:11:10.970
That's been hard for Web applications to do.
But now, using the HTML5 file APIs, he can

00:11:10.970 --> 00:11:14.930
drag that photo very intuitively and just
drop it in GMail.

00:11:14.930 --> 00:11:18.959
Simple, but very powerful.
What most users do in their day-to-day lives.

00:11:18.959 --> 00:11:26.351
A second such example is around notifications.
It's very common for you to be in a Web application

00:11:26.351 --> 00:11:32.220
which has notifications associated with it.
For example, Google Chat is built into GMail.

00:11:32.220 --> 00:11:36.500
The question is, how do you receive that notification
when you are not on GMail?

00:11:36.500 --> 00:11:42.500
So but now using the HTML5 notifications Gmail
 -- notifications API, Jeff can receive the

00:11:42.500 --> 00:11:46.200
e-mail from Bob, I guess, even when he is
not on GMail.

00:11:46.200 --> 00:11:51.450
So two examples.
The file API and notifications API, and GMail

00:11:51.450 --> 00:11:55.510
is implementing to deliver powerful features
to our users.

00:11:55.510 --> 00:12:00.570
So at this pointed, I would like to invite
 -- we want to show you real-world examples,

00:12:00.570 --> 00:12:05.440
people all over the community building great
applications on top of HTML5.

00:12:05.440 --> 00:12:12.439
So I would like to invite first Charles Pritchard
from MugTug, and Jim Lanzone from Clicker.com.

00:12:12.439 --> 00:12:22.019
[ Applause ]
&gt;&gt;Charles Pritchard: Hello, everyone.

00:12:22.019 --> 00:12:29.690
My name's Charles Pritchard.
I'm the CEO behind MugTug.

00:12:29.690 --> 00:12:33.529
I've come here to preview our latest software
development.

00:12:33.529 --> 00:12:39.649
It's an application we call Darkroom.
In 2006, Michael Deal and I created an HTML

00:12:39.649 --> 00:12:45.930
4 Web site called MugTug Studio.
It used cloud services to allow people to

00:12:45.930 --> 00:12:51.880
edit their images, apply effects, et cetera.
It was slow, and it used a lot of bandwidth.

00:12:51.880 --> 00:12:58.110
But now, this year, with HTML5 support growing,
we're able to bring MugTug Darkroom onto the

00:12:58.110 --> 00:13:01.770
client side.
Now, when I say "client side," I mean that

00:13:01.770 --> 00:13:05.180
we're untethered, we're not connected to the
Internet, or at least we don't need to be.

00:13:05.180 --> 00:13:11.200
I'm going to go ahead and unplug and show
you that, indeed, we are offline, unless the

00:13:11.200 --> 00:13:13.730
Wi-Fi, of course, picks up.
So we're offline.

00:13:13.730 --> 00:13:20.270
And we are still in the cache.
The way this is done is by using some HTML5

00:13:20.270 --> 00:13:23.440
APIs.
One of them is application cache.

00:13:23.440 --> 00:13:29.870
We also use local storage and the file reader.
Our GUI is in canvas 2D context.

00:13:29.870 --> 00:13:35.130
So I'm going to go ahead, and I'm going to
start using the application.

00:13:35.130 --> 00:13:37.000
You can see here, we have a few beautiful
photos.

00:13:37.000 --> 00:13:43.230
And these are all being served from the local
computer.

00:13:43.230 --> 00:13:47.329
But what I'd like to do is go ahead and work
with one that hasn't been touched up yet.

00:13:47.329 --> 00:13:52.990
That's going to be this one right here.
Experts amongst you will notice a few things

00:13:52.990 --> 00:13:55.459
wrong with this photo.
It's tilted.

00:13:55.459 --> 00:13:59.290
So I'm going to go ahead and I'm going to
apply our advanced rotate effect.

00:13:59.290 --> 00:14:02.810
Very wild, I know.
And the next thing we're going to do here

00:14:02.810 --> 00:14:06.330
is, you can tell that the camera flash has
brought out that infamous red eye effect.

00:14:06.330 --> 00:14:09.030
[ Laughter ]
&gt;&gt;Charles Pritchard: So I'm going to go ahead

00:14:09.030 --> 00:14:14.163
here, and I'm going to give him a much more
natural appearance.

00:14:14.163 --> 00:14:19.010
It's much better, much better.
Anyway, what you do see here is the next generation

00:14:19.010 --> 00:14:22.630
of application.
It's quick to load, quick to close, and quick

00:14:22.630 --> 00:14:26.570
to use.
I'm previewing it on the latest Google Chrome,

00:14:26.570 --> 00:14:32.820
which has great support for HTML5.
The application itself is using JavaScript,

00:14:32.820 --> 00:14:35.710
and it's using the canvas 2D context for its
GUI.

00:14:35.710 --> 00:14:41.230
We're going to see a lot more of these in
the future, because HTML5 support, offline

00:14:41.230 --> 00:14:46.089
applications are being actively championed
by every major browser vendor.

00:14:46.089 --> 00:14:49.680
Again, my name is Charles Pritchard.
This is MugTug Darkroom.

00:14:49.680 --> 00:14:54.500
And I invited you to visit us in the sandbox
if you'd like some more information or if

00:14:54.500 --> 00:14:59.350
you'd just like to play around with some of
the other image effects we have going on.

00:14:59.350 --> 00:15:06.050
Thank you.
[ Applause ]

00:15:06.050 --> 00:15:22.570
&gt;&gt;Jim Lanzone: So we launched Clicker.com
a few months ago, it's been called the TV

00:15:22.570 --> 00:15:25.420
guide for the Web.
It's essentially a massive database, like

00:15:25.420 --> 00:15:30.480
sites like Trip Advisor or Yelp.
But it's focused just on the premium programming

00:15:30.480 --> 00:15:36.740
available on the Web across Web originals,
broadcast television, movie, music videos.

00:15:36.740 --> 00:15:40.759
Because it's no longer about when things are
on or having a scheduled grid.

00:15:40.759 --> 00:15:46.430
It's about where they're on and whether they're
on and what you can actually get across thousands

00:15:46.430 --> 00:15:52.270
of different hosts of online video.
So we launched a few months ago, and a lot

00:15:52.270 --> 00:15:56.980
of our users are actually just broadcasting
their PC screens up to their televisions or

00:15:56.980 --> 00:16:00.660
using a Mac mini to do so.
And Clicker.com was definitely geared toward

00:16:00.660 --> 00:16:02.221
the two-foot experience.
It's a Web site.

00:16:02.221 --> 00:16:05.490
They've wanted to be able to use us in that
ten-foot experience.

00:16:05.490 --> 00:16:09.870
We're here today to launch clicker.TV, which
is our ten-foot experience.

00:16:09.870 --> 00:16:16.630
You see us kind of moving through T you'll
see it looks and feels a lot like a downloadable

00:16:16.630 --> 00:16:20.199
application or a plug-in or something you
might have to buy a box to attach to your

00:16:20.199 --> 00:16:22.171
TV.
But it's native to the browser.

00:16:22.171 --> 00:16:28.740
You go to Clicker.TV to use it.
It does this thanks in part to HTML5, using

00:16:28.740 --> 00:16:34.100
Canvas, Web worker threads, the local storage
API, and, of course, it really hums in a browser

00:16:34.100 --> 00:16:36.130
like Chrome.
Even though it works in all browsers, it really

00:16:36.130 --> 00:16:40.670
shines.
And you see the speed of this application.

00:16:40.670 --> 00:16:45.279
We'll see -- let's go into, let's say, a show.
Start with "Charlie Rose."

00:16:45.279 --> 00:16:48.420
That's an example I like to use.
And you'll see it appears, you don't have

00:16:48.420 --> 00:16:53.230
to go to the search box.
Chrome likes to show itself off.

00:16:53.230 --> 00:17:02.330
And you'll see all the Charlie Rose episodes
that have been online going back to 1994,

00:17:02.330 --> 00:17:07.049
all organized by season.
Another example, let's say with my kids I

00:17:07.049 --> 00:17:12.199
want to watch this online show called "Pigeon
Impossible," which is a Pixar-like short.

00:17:12.199 --> 00:17:21.689
I start typing "pigeon," hit it, and I get
to the actual show page.

00:17:21.689 --> 00:17:27.919
Perhaps.
Like Bill Gates.

00:17:27.919 --> 00:17:45.570
Just hit enter and I just hit play.
[ Music ]

00:17:45.570 --> 00:17:57.130
&gt;&gt;Jim Lanzone: Let's say instead I want to
watch, actually, broadcast television.

00:17:57.130 --> 00:18:00.250
We don't host all programming.
To be the TV guide of the Web, you have to

00:18:00.250 --> 00:18:06.120
be truly comprehensive and unbiased across
everything, even things you don't host.

00:18:06.120 --> 00:18:09.440
Let's maybe, for example, go back to the home
page and try the show "lost."

00:18:09.440 --> 00:18:15.270
I'm not sure how many of you were watching
that 12 hours ago, like I was, hoping finally

00:18:15.270 --> 00:18:18.990
someone would ask a follow-up question.
I'm still waiting for that after six years.

00:18:18.990 --> 00:18:23.870
Let's say we want to watch the episode that's
online.

00:18:23.870 --> 00:18:27.100
Again, just go to the show, hit enter, you
get to the show.

00:18:27.100 --> 00:18:33.490
In this case, you're being taken to ABC's
Web site and it comes up large screen to play,

00:18:33.490 --> 00:18:36.530
or you can hit full screen to get it all the
way there.

00:18:36.530 --> 00:18:40.960
But, again, very easy and on your keyboard
just hit the back space or delete button and

00:18:40.960 --> 00:18:44.190
you get back to the programming guide.
Maybe because I don't want to watch the ad,

00:18:44.190 --> 00:18:48.919
I want to add it to my play list you see on
the left-hand side I can scroll down or add

00:18:48.919 --> 00:18:55.750
to my play list and then down the left-hand
side of the page, I can go into the play list

00:18:55.750 --> 00:19:00.000
using the arrow keys or the configured remote.
You see all these shows I have saved.

00:19:00.000 --> 00:19:04.160
On our site here is "Deadliest Warrior."
If anyone has seen this show, it's ridiculous,

00:19:04.160 --> 00:19:07.450
like watching Alexander the Great square off
against Attila the Hun.

00:19:07.450 --> 00:19:12.860
So I've saved all these things.
You can also then browse 1400 categories in

00:19:12.860 --> 00:19:18.120
TV, movies, Web originals.
You can even sort by themes, kind of like

00:19:18.120 --> 00:19:21.781
Pandora, like jeans, like, quirky characters
and things like that.

00:19:21.781 --> 00:19:26.870
And you see the movie page.
You can just go straight into Netflix, if

00:19:26.870 --> 00:19:32.620
you're a subscriber, to watch.
So that's Clicker.TV, again, purely native.

00:19:32.620 --> 00:19:38.510
You just go to that Web site, and very, very
rich, thanks in large patient to HTML5 and

00:19:38.510 --> 00:19:42.150
the guys at Chrome.
We are in the sandbox, and we'd love to see

00:19:42.150 --> 00:19:43.700
you guys there.
Thanks for having us.

00:19:43.700 --> 00:19:48.730
Have a great next couple of days.
Thanks.

00:19:48.730 --> 00:19:57.000
[ Applause ]
&gt;&gt;Sundar Pichai: So it's great to see these

00:19:57.000 --> 00:19:58.789
applications.
We will have many more on the way.

00:19:58.789 --> 00:20:03.370
And these are all built on HTML5 and work
great in the browser.

00:20:03.370 --> 00:20:08.299
One of the interesting things that Clicker.com
showed is the use of video.

00:20:08.299 --> 00:20:12.820
Video is one of the most important forms of
communication on the Web.

00:20:12.820 --> 00:20:17.960
Just like images are very popular on the Web.
But as developers, when you use images on

00:20:17.960 --> 00:20:24.580
the Web, you have a plethora of choices and
formats, including open and freely implementable

00:20:24.580 --> 00:20:31.030
format like PNG.
We think video should have the great free

00:20:31.030 --> 00:20:36.260
and open alternative as well.
It's really important for the Web to have

00:20:36.260 --> 00:20:40.840
at least one alternative for video which is
high quality and open.

00:20:40.840 --> 00:20:46.350
So we've been thinking hard about this problem.
In fact, we are very, very committed to this.

00:20:46.350 --> 00:20:52.940
And we have invested over $120 million in
acquiring On2 Technologies to contribute towards

00:20:52.940 --> 00:20:59.550
this vision.
So today, we want to talk about VP8, but before

00:20:59.550 --> 00:21:03.240
that, let me tell you a little bit about On2.
We got to know this team last year.

00:21:03.240 --> 00:21:08.200
They're a set of passionate, committed engineers,
based in Clifton Park, New York, they've been

00:21:08.200 --> 00:21:14.370
working on the video space since 1992.
So when we started taking a look at VP8, we

00:21:14.370 --> 00:21:19.520
were very impressed with its quality.
The VP line of codecs has had over 2 billion

00:21:19.520 --> 00:21:25.420
installs and has been adopted by products
like Flash, Skype, et cetera.

00:21:25.420 --> 00:21:30.070
It's really suited for the Web.
To serve video on the Web, you need to deal

00:21:30.070 --> 00:21:34.680
with a lot of varying conditions, from a bandwidth
standpoint, from a client standpoint.

00:21:34.680 --> 00:21:37.840
There are many, many mobile devices which
are connecting to the Web as well.

00:21:37.840 --> 00:21:42.100
VP8 is really good at adapting to these varying
conditions.

00:21:42.100 --> 00:21:48.210
It's very efficient with bandwidth as well.
We have our 2 billion video views on YouTube.

00:21:48.210 --> 00:21:53.570
So we care about that.
VP8 is very efficient with bandwidth.

00:21:53.570 --> 00:21:59.350
In addition, we believe it's the best-in-class
codec for real-time streaming as well.

00:21:59.350 --> 00:22:04.330
So overall, we are really impressed with VP8.
So today, we would like to announce that we

00:22:04.330 --> 00:22:08.450
are fully open-sourcing VP8 under completely
royalty-free license.

00:22:08.450 --> 00:22:19.190
[ Applause ]
&gt;&gt;Sundar Pichai: We are working with many

00:22:19.190 --> 00:22:23.170
people in the community to do this.
And so there's a project called WebM which

00:22:23.170 --> 00:22:26.669
we are announcing today, in conjunction with
many partners.

00:22:26.669 --> 00:22:33.080
And it's open Web media project.
It will have VP8 as the video codec, and it

00:22:33.080 --> 00:22:38.130
will be packaged with open source audio codec
Vorbis.

00:22:38.130 --> 00:22:40.870
You can find more details about this at the
project site.

00:22:40.870 --> 00:22:43.559
But there's lots of excitement in the community
around this.

00:22:43.559 --> 00:22:48.130
And so to talk more about this, I would like
to invite two major browser vendors who are

00:22:48.130 --> 00:22:53.400
pioneering a lot of the HTML5 work.
First, let me invited Mike Shaver, from Mozilla,

00:22:53.400 --> 00:22:57.059
followed by Hakon Wium Lie, from Opera.
[ Applause ]

00:22:57.059 --> 00:23:10.090
&gt;&gt;Mike Shaver: Thank you, Sundar.
And thank you, Google, for this huge investment

00:23:10.090 --> 00:23:16.980
in open Web and open video.
We're now at a time whose idea has come, industrial-strength,

00:23:16.980 --> 00:23:22.690
royalty-free video with a high-quality open
source implementation, and, as you'll see,

00:23:22.690 --> 00:23:27.820
broad industry support.
More importantly, it will also have millions

00:23:27.820 --> 00:23:31.890
of kitten videos.
As of today, I'm very pleased to share with

00:23:31.890 --> 00:23:36.750
you, YouTube will be supporting the WebM video
format as part of its HTML5 beta.

00:23:36.750 --> 00:23:41.670
They've started converting their entire catalogue,
beginning with the higher-quality videos at

00:23:41.670 --> 00:23:45.020
720P and above and that will continue over
time.

00:23:45.020 --> 00:23:54.590
With this, you can use high-quality video
built into the stack with great performance.

00:23:54.590 --> 00:24:05.820
[ Music ]
&gt;&gt;Mike Shaver: Mozilla has been interested

00:24:05.820 --> 00:24:10.710
in open video for a long time, because we
want to see HTML5 reach its full potential.

00:24:10.710 --> 00:24:15.000
Since Firefox 3.5 almost two years ago, we
have been shipping the open source theora

00:24:15.000 --> 00:24:19.960
codec and working with those developers who
were visionaries, really, in seeing the importance

00:24:19.960 --> 00:24:23.669
of universal video very early on.
We're excited that they're joining with us

00:24:23.669 --> 00:24:28.130
as well in supporting the WebM project and
have already started working on the code and

00:24:28.130 --> 00:24:31.350
tools.
Video's key to the Web experience.

00:24:31.350 --> 00:24:35.590
And because of that, it needs to be part of
the Web, not just technically, but also in

00:24:35.590 --> 00:24:44.120
terms of -- in terms of its use.
JavaScript, CSS, HTML, SVG, HTTP, all of these

00:24:44.120 --> 00:24:48.659
technologies are usable under -- with no strings
attached, under any terms you want, to build

00:24:48.659 --> 00:24:52.760
anything you want.
We wouldn't accept that HTML was only licensed

00:24:52.760 --> 00:24:57.539
to be used for documents and not applications.
We wouldn't accept that you couldn't distribute

00:24:57.539 --> 00:25:01.530
what you do with CSS unless you signed a license.
We've seen what happens and how much disruption

00:25:01.530 --> 00:25:05.110
it can cause when the terms of a platform
change at the whim of one organization.

00:25:05.110 --> 00:25:10.861
And the Web needs to be above that.
The Web's growing important capabilities --

00:25:10.861 --> 00:25:16.840
[ Applause ]
&gt;&gt;Mike Shaver: -- to be clear, I didn't make

00:25:16.840 --> 00:25:18.159
that happen.
[ Laughter ]

00:25:18.159 --> 00:25:21.470
&gt;&gt;Mike Shaver: The Web's growing important
capabilities.

00:25:21.470 --> 00:25:25.690
As it does that, the demands on browsers increase.
We're working at Mozilla to make sure every

00:25:25.690 --> 00:25:31.289
part of the stack is ridiculously fast.
This means taking advantage of graphics on

00:25:31.289 --> 00:25:34.210
computers and mobile devices.
It means taking advantage of multiple cores

00:25:34.210 --> 00:25:42.200
and DSPs and hardware from other WebM partners.
The VP8 codec itself in taking advantage of

00:25:42.200 --> 00:25:47.850
multiple cores for low power and embedded
devices, is not only a great codec today,

00:25:47.850 --> 00:25:52.789
but it will scale in the future.
I say every year it's a great time to be a

00:25:52.789 --> 00:25:54.970
Web developer.
And every year I get to be right about at

00:25:54.970 --> 00:25:59.380
least that.
Open video's now here in high quality.

00:25:59.380 --> 00:26:06.350
Excuse me.
High quality, and it's embedded into the stack.

00:26:06.350 --> 00:26:10.919
It's part of everything you use now, like
text, like images, like CSS.

00:26:10.919 --> 00:26:14.821
Let me give you a taste of what you can do
when it's built into the stack and you can

00:26:14.821 --> 00:26:18.830
use it with all the tools that you've come
to love over the past ten years of the Web.

00:26:18.830 --> 00:26:23.520
This is something we built with two videos,
a handful of images, and about 450 lines of

00:26:23.520 --> 00:26:28.669
HTML, CSS, JavaScript, and SVG.
Anybody in the room could read through it,

00:26:28.669 --> 00:26:33.760
understand it, use it in their own space.
No external libraries, no obfuscation.

00:26:33.760 --> 00:26:37.360
It's all right there.
You get real text built into the platform.

00:26:37.360 --> 00:26:40.789
You can select it, you can localize it, you
can search index it.

00:26:40.789 --> 00:26:44.909
You can animate it.
You get robots in circles, exploding and shooting

00:26:44.909 --> 00:26:51.100
at each other.
You get high-quality video with custom controls.

00:26:51.100 --> 00:26:55.830
Scaling.
720P HD resolutions built into the platform.

00:26:55.830 --> 00:27:00.210
We give you control over the video experience
and how your users will find it.

00:27:00.210 --> 00:27:03.360
It won't surprise you to discover that Firefox
will be supporting WebM.

00:27:03.360 --> 00:27:08.700
It would surprise you to discover we weren't.
We don't -- our ambitions don't end there.

00:27:08.700 --> 00:27:11.750
We want to see this in all browsers, on all
devices.

00:27:11.750 --> 00:27:15.460
We want to see this available to every user
who is -- to take advantage of the great things

00:27:15.460 --> 00:27:18.600
you people are going to built on top of this
platform.

00:27:18.600 --> 00:27:24.410
We've got nightly builds kicked off today.
You'll be able to take them and start building

00:27:24.410 --> 00:27:28.929
your applications now.
And I want to thank you -- excuse me -- as

00:27:28.929 --> 00:27:33.140
we get this technology out to 400 million
users on Maemo and Android devices as well.

00:27:33.140 --> 00:27:36.140
I want to thank you for your time today and
I want to thank you for building a fantastic

00:27:36.140 --> 00:27:40.730
Web.
[ Applause ]

00:27:40.730 --> 00:28:14.240
&gt;&gt;Hakon Wium Lie: It's a fantastic day for
the Web. I'm very proud to be here. My name

00:28:14.240 --> 00:28:21.850
is Hakon Wium Lie. I am the CTO of Opera Software.
Three years back in February 2007, we published

00:28:21.850 --> 00:28:26.980
a proposal for the video element on the Web.
We also published a manifesto, because we

00:28:26.980 --> 00:28:30.850
wanted there to be video on the Web.
The video was missing. We had text, we had

00:28:30.850 --> 00:28:35.230
images, we had many things, but we didn't
have video.

00:28:35.230 --> 00:28:40.059
So we put forward this proposal, and we knew
it wouldn't be easy. Well, the first part

00:28:40.059 --> 00:28:46.740
was pretty easy. The syntax was easy. We could
quite easily agree on the video element.

00:28:46.740 --> 00:28:58.159
The hard part was to find a high-tech, high-quality,
open, freely usable format for a video.

00:28:58.159 --> 00:29:04.690
And the great news mere today is that WebM
has joined the list.

00:29:04.690 --> 00:29:13.049
Tim didn't patent HTML, I didn't patent CSS,
Brandon didn't patent JavaScript -- we need

00:29:13.049 --> 00:29:20.280
for there to be an open and freely usable
format for video on the Web, and, I think,

00:29:20.280 --> 00:29:30.390
WebM is it.
So I'm very proud to demo Opera here, running,

00:29:30.390 --> 00:29:35.370
showing WebM.
The video you are seeing here is -- this is

00:29:35.370 --> 00:29:39.870
from the 17th of May celebration in Oslo.
We do this every year to celebrate the video

00:29:39.870 --> 00:29:41.820
tag.
[ Applause ]

00:29:41.820 --> 00:29:55.420
&gt;&gt;Hakon Wium Lie: And you can download Opera
with WebM support in it if you go to this

00:29:55.420 --> 00:30:08.049
URL there, labs.opera.com.
Now, the video tag is not going to be alone

00:30:08.049 --> 00:30:12.419
on the screen.
Here I have added a few more things. Except

00:30:12.419 --> 00:30:16.710
from the video, though, there are no images
on this screen.

00:30:16.710 --> 00:30:25.480
The heading here is Web font, selectable font.
The graphics here is SVG. And you can see

00:30:25.480 --> 00:30:31.050
that he nods in approval for WebM here. This
is done with CSS transitions.

00:30:31.050 --> 00:30:37.390
This is also CSS transitions down here. We
can do a whole lot declaratively now without

00:30:37.390 --> 00:30:40.600
the need for JavaScript.
There is some JavaScript higher, though. You

00:30:40.600 --> 00:30:45.230
can see the national anthem has been rendered
at the bottom here and that's done in the

00:30:45.230 --> 00:30:51.260
canvas element with a little JavaScript library
to render musical notation.

00:30:51.260 --> 00:30:58.260
So all of this is coming together now.
We think video, being a first-class citizen

00:30:58.260 --> 00:31:04.980
will join the other content types we have
and we will have very rich Web pages in HTML

00:31:04.980 --> 00:31:10.289
and CSS 3.
My prediction is if we use these techniques

00:31:10.289 --> 00:31:14.580
right we can get rid of half of the images
for the Web, because they are mostly there

00:31:14.580 --> 00:31:21.090
for styling purposes, but by adding all this
video stuff, there are still going to be lots

00:31:21.090 --> 00:31:32.220
of images out there.
So to the Web community, I'd like to say start

00:31:32.220 --> 00:31:36.419
using this. We need to go out with our video
cameras. We all have video cameras in our

00:31:36.419 --> 00:31:41.529
pockets, and we should do it.
This guy in Germany just went to his local

00:31:41.529 --> 00:31:48.640
zoo and filmed the octopus, and it's fantastic
how this video really increases the educational

00:31:48.640 --> 00:31:56.289
value of Wikipedia or whatever kind of content
you are doing. The video is truly amazing.

00:31:56.289 --> 00:32:04.019
To Google, I would like to say thank you.
It's very civil of to you spend time and money

00:32:04.019 --> 00:32:11.120
getting WebM off the ground, releasing it
to the open. And I look forward to working

00:32:11.120 --> 00:32:17.170
with Google in the future to make sure that
the Web remains open, to be used for all sorts

00:32:17.170 --> 00:32:23.740
of browser, with all sorts of content.
At Opera, we put the Web into all sorts of

00:32:23.740 --> 00:32:29.890
phones. We are on hundreds of different phone
sets, reaching millions of people who would

00:32:29.890 --> 00:32:35.720
never otherwise have video access. And we
truly believe that Web access is going to

00:32:35.720 --> 00:32:38.701
be one of the human rights of the century.
Thank you.

00:32:38.701 --> 00:32:49.950
[ Applause ]
&gt;&gt;Sundar Pichai: Thanks, Mike and Hakon.

00:32:49.950 --> 00:32:55.519
So it's really exciting. One of the core tenets
which underlies the Web success is that it's

00:32:55.519 --> 00:33:02.040
based on open standards like HTML, TCP/IP,
JavaScript, et cetera and it's great to see

00:33:02.040 --> 00:33:09.840
video get that option as well.
So for an effort like this to be successful,

00:33:09.840 --> 00:33:17.440
we really need the support of the entire industry
to make this happen. So I guess I am on the

00:33:17.440 --> 00:33:18.790
wrong slide.
So we have been reaching out to many, many

00:33:18.790 --> 00:33:23.760
partners. And we have received overwhelming
support, so we are very grateful for that.

00:33:23.760 --> 00:33:28.149
I want to call out a few people.
First of all, we wouldn't be able to do this

00:33:28.149 --> 00:33:33.540
today without the support of people like the
open source efforts like Vorbis and Theora.

00:33:33.540 --> 00:33:36.570
So we are very grateful to what they have
done, and we are looking forward to working

00:33:36.570 --> 00:33:47.370
with them.
Secondly, for VP8 and WebM to succeed, it's

00:33:47.370 --> 00:33:52.220
really important that we have hardware support.
Especially given how many mobile devices are

00:33:52.220 --> 00:33:57.730
getting connected to the Web and serving videos.
So hardware is very, very important, and we

00:33:57.730 --> 00:34:01.640
are working with many, many hardware partners
and publishers. You can see the names on the

00:34:01.640 --> 00:34:08.859
list. And we are working very hard to make
a highly optimized RTL freely available soon

00:34:08.859 --> 00:34:17.320
to our hardware partners.
So we have talked about HTML5 APIs. How modern

00:34:17.320 --> 00:34:21.321
browsers are supporting these APIs and given
you examples of real-world applications.

00:34:21.321 --> 00:34:26.501
We have more examples on the way but at this
point I would like to invite Kevin Lynch,

00:34:26.501 --> 00:34:32.899
CTO of Adobe. Adobe has been doing a lot of
work to support HTML5, including providing

00:34:32.899 --> 00:34:42.379
tools which are really important for developers.
So let me invite Kevin Lynch to the stage.

00:34:42.379 --> 00:34:47.311
[ Applause ]
&gt;&gt;Kevin Lynch: It's great to be here with

00:34:47.311 --> 00:34:53.560
all of you today at Google I/O. HTML5 is great.
It's a great move forward for HTML on the

00:34:53.560 --> 00:34:57.460
Web. And seeing the examples here this morning
it was a lot of fun seeing it come along and

00:34:57.460 --> 00:35:03.310
what's possible now in HTML.
At Adobe we have been for 25 years now enabling

00:35:03.310 --> 00:35:07.579
people to express themselves using a variety
of technologies. And it's really fun to see

00:35:07.579 --> 00:35:11.619
new technologies come out like this that people
with take advantage of in expressing themselves,

00:35:11.619 --> 00:35:15.089
and we are really excited to work on enabling
that to happen.

00:35:15.089 --> 00:35:20.650
Of course we work on a variety of technologies
at Adobe, and today I want to focus on HTML5

00:35:20.650 --> 00:35:24.310
and what we are doing around that technology.
And I am going to give you three examples

00:35:24.310 --> 00:35:27.820
of some of the work we are doing in support
of HTML5.

00:35:27.820 --> 00:35:32.501
So the first thing I want to show you is what
we are doing in Dreamweaver. And Dreamweaver

00:35:32.501 --> 00:35:37.340
is the most popular pro HTML editing tool
besides Notepad.

00:35:37.340 --> 00:35:42.750
And I would like to show you some stuff we
are doing in here. This is a Web site we have

00:35:42.750 --> 00:35:47.360
mocked up, and one of the areas that we have
been really looking at here in support of

00:35:47.360 --> 00:35:52.800
HTML is how do you actually do this with HTML5
across screens? Because now, obviously, we

00:35:52.800 --> 00:35:58.000
are all start to go target multiple devices.
So we are working here with HTML5 and a new

00:35:58.000 --> 00:36:03.109
capability that we're adding to Dreamweaver
CS5, and it's called Multiscreen Preview.

00:36:03.109 --> 00:36:07.460
What this enables you to do is see a three-up
of your Web site design so you can understand

00:36:07.460 --> 00:36:11.070
how it's going to look across these devices.
You can see right now it doesn't look that

00:36:11.070 --> 00:36:15.839
good across these devices, but you can use
CSS to customize your design. So what we are

00:36:15.839 --> 00:36:20.579
doing is making it really easy to hook up
alternate CSS style sheets based on media

00:36:20.579 --> 00:36:27.599
queries. So if I want to have a phone-sized
one, a tablet-sized one, and maybe a desktop-sized

00:36:27.599 --> 00:36:31.760
one, I can set the width of each of these
different style sheets so when it hits that

00:36:31.760 --> 00:36:36.530
width, it will show that particular style
sheet with the design. And now you can see

00:36:36.530 --> 00:36:41.280
your design in three different formats. The
same HTML5 code underneath, but now you are

00:36:41.280 --> 00:36:43.880
able to see three different renditions with
CSS.

00:36:43.880 --> 00:36:47.849
In fact, doing this production right now,
it's hard to understand how your stuff is

00:36:47.849 --> 00:36:51.280
working. You have to keep trying it on all
these different devices. We support navigation

00:36:51.280 --> 00:36:54.980
here, so if I want to click, I can start playing
through my site and see where I still need

00:36:54.980 --> 00:36:58.011
to work on my site some more.
This is going to be a big productivity increase

00:36:58.011 --> 00:37:05.849
for people trying to do HTML5 across devices.
In addition to HTML5 work across devices,

00:37:05.849 --> 00:37:11.390
you can also do code editing. Code completion,
supporting things like the nav tag and other

00:37:11.390 --> 00:37:17.560
areas of HTML5, but also doing CSS things.
For example, when I am changing this page

00:37:17.560 --> 00:37:21.510
here, and you can see it changing between
the different style sheets now, even live

00:37:21.510 --> 00:37:25.380
design view. So as you are editing the code,
you can see the different views live while

00:37:25.380 --> 00:37:29.600
you are doing it. And say I want to edit this
tablet one, I can open up the CSS for it,

00:37:29.600 --> 00:37:34.720
and right now there is not much of an effect
on these, but if I want to, I can actually

00:37:34.720 --> 00:37:42.829
make this go bigger here, if I want to. Let
me get the tablet one. There you go. It's

00:37:42.829 --> 00:37:47.260
popping up right there, but it's not very
smooth. So I can add transition. Part of the

00:37:47.260 --> 00:37:51.060
new work that's going on in CSS is support
for transitions. You can see I have got code

00:37:51.060 --> 00:37:55.940
completion for all the new attributes in CSS.
So I can do a Web kit transition here. If

00:37:55.940 --> 00:38:02.500
I want to make it do maybe half a second transition,
I can go and roll over, and now you can see

00:38:02.500 --> 00:38:04.891
I get a smooth rollover rather than the jerky
one from before.

00:38:04.891 --> 00:38:09.570
That's supporting all the new transition effects
in CSS in live view inside Dreamweaver so

00:38:09.570 --> 00:38:14.180
you can start editing, and of course this
does gradual enhancement as you have browsers

00:38:14.180 --> 00:38:18.270
that support these versus ones that don't.
But it works consistently now in the authoring

00:38:18.270 --> 00:38:21.050
tool.
The other thing we have been looking at is

00:38:21.050 --> 00:38:25.810
how do we support enabling graphics inside
the authoring environment some more. Let me

00:38:25.810 --> 00:38:30.230
show you another page in the site. And this
is a table that has some availability for

00:38:30.230 --> 00:38:33.921
the one table that's in this café. And you
can see it's booked or its free. It would

00:38:33.921 --> 00:38:39.710
be better if I had a picture showing the availability
here so let's go over to illustrator. And

00:38:39.710 --> 00:38:43.720
illustrator already supports SVG.
We're working on some enhancements, though.

00:38:43.720 --> 00:38:49.060
And here is a graphic of a time clock, it's
just a bunch of shapes and colors. And I am

00:38:49.060 --> 00:38:53.230
going to actually connect this with JavaScript
and CSS and make it a dynamic clock that shows

00:38:53.230 --> 00:38:58.710
the free and busy times at the café.
And to first set the two different states,

00:38:58.710 --> 00:39:02.350
I'm going to select the fill color here in
illustrator. And from illustrator I am going

00:39:02.350 --> 00:39:06.750
to create a CSS style. And this is going to
represent the busy times, so I will name it

00:39:06.750 --> 00:39:10.440
"busy." Now I am going to select this other
one over here, the green one, and I am going

00:39:10.440 --> 00:39:15.400
to make that a CSS style that says "free."
And now my JavaScript code can use those CSS

00:39:15.400 --> 00:39:17.330
styles and apply the right color to each of
the different wedges.

00:39:17.330 --> 00:39:28.839
Let me export this as an SVG file.
Okay. Now I am going to be able to go back

00:39:28.839 --> 00:39:32.970
into Dreamweaver and I am going to be able
to insert this on the page. So here is where

00:39:32.970 --> 00:39:37.349
the table is and the JavaScript code reads
the table and updates the SVG based on that.

00:39:37.349 --> 00:39:45.970
So let's insert the SVG. Click, insert SVG,
get my image, there's the clock, import it,

00:39:45.970 --> 00:39:50.369
there's the object in SVG. And now when I
preview this inside the browser, it should

00:39:50.369 --> 00:39:55.140
show the clock. So we have the free busy times
now showing with JavaScript updating the SVG

00:39:55.140 --> 00:39:58.950
with CSS style sheets, and of course it's
showing the current time, too.

00:39:58.950 --> 00:40:02.810
So that's an example of how we are working
to smoothly integrate graphics editing and

00:40:02.810 --> 00:40:08.339
HTML5 in a really seamless way. This is something
we are working on inside illustrator.

00:40:08.339 --> 00:40:12.750
The third thing I wanted to show is you some
further out thinking we are doing about how

00:40:12.750 --> 00:40:18.119
we can do animations inside of CSS, and JavaScript
and HTML5.

00:40:18.119 --> 00:40:25.180
So here is an application that is a prototype
that we are using to experiment with CSS in

00:40:25.180 --> 00:40:29.280
JavaScript. And this is an advertisement we
are using as an example and we put this together

00:40:29.280 --> 00:40:34.040
because we like Ducati and we thought it would
be fun to show it as part of the example.

00:40:34.040 --> 00:40:38.780
This is using totally HTML and CSS and I can
transition between a couple states. So you

00:40:38.780 --> 00:40:42.329
can see I have a pre-roll state here. I've
got a bunch of layers. I can see the different

00:40:42.329 --> 00:40:46.650
items on the page. And when I go to a different
state, it animates automatically.

00:40:46.650 --> 00:40:51.980
I want a bike to come in here, so to do that
I am going to make the different shapes I

00:40:51.980 --> 00:40:57.780
have defined here with CSS appear on the stage.
And I can do that simply by editing these

00:40:57.780 --> 00:41:03.160
values, so I make this show up by changing
its left side, and then I am going to change

00:41:03.160 --> 00:41:08.490
its opacity. And then you will see the bike
will fly in from the right. It is happening

00:41:08.490 --> 00:41:13.130
live as I do this editing here and when I
change between the two states you can see

00:41:13.130 --> 00:41:16.930
the animation is working.
I want to make this nav down here work and

00:41:16.930 --> 00:41:23.540
add a second bike to come in. So I am going
to duplicate this, calling it bike 2 and that's

00:41:23.540 --> 00:41:28.069
creating another CSS animation basically around
the second state, and I want the first bike

00:41:28.069 --> 00:41:31.750
to go away and the second bike to come in.
So first let's make the first bike go away,

00:41:31.750 --> 00:41:38.060
we'll make it fly off fast and make it a thousand
pixels off the stage and there goes the bike.

00:41:38.060 --> 00:41:45.069
So now I am going to make the new bike fly
in. And I want the bike to fly in, be visible

00:41:45.069 --> 00:41:50.599
and show up on the left like we did before.
I have to type in pixels. There it is.

00:41:50.599 --> 00:41:53.329
All right. Cool.
So now I have these different states set up

00:41:53.329 --> 00:41:57.260
in my application. And I want to make it so
that when I click on the nav, go to that bike.

00:41:57.260 --> 00:42:04.920
So I am going to add a trigger. On click of
the nav bike 2, which is a CSS ID, I am going

00:42:04.920 --> 00:42:10.021
to be able to now animate to that bike. So
let's preview this in the browser. There's

00:42:10.021 --> 00:42:14.450
the ad, rolls in, thing comes up, I click
on bike 2, and it acts and bike 2 comes out.

00:42:14.450 --> 00:42:17.300
Isn't that cool?
[ Applause ]

00:42:17.300 --> 00:42:23.980
&gt;&gt;Kevin Lynch: Of course I can add other transitions
and rollover effects and things like that,

00:42:23.980 --> 00:42:28.220
but that's some of the work we are doing now
to see what's really possible in terms of

00:42:28.220 --> 00:42:33.480
enabling tooling, great tooling around CSS,
HTML5 and these other technologies.

00:42:33.480 --> 00:42:37.720
So that's some of the work we are doing.
Now, there's one more thing I wanted to talk

00:42:37.720 --> 00:42:41.950
about, which is support for video. And you
know there's been a lot of great work in video

00:42:41.950 --> 00:42:45.950
done on the Web, and it's great to see innovation
continuing, and we are really excited to see

00:42:45.950 --> 00:42:51.580
the VP8 work that's happening now. So we are
so excited, we are going to put VP8 inside

00:42:51.580 --> 00:42:55.930
a Flash player and we are going to distribute
VP8 to over a billion people in less than

00:42:55.930 --> 00:42:59.490
a year of its release.
So we are going to really help push out the

00:42:59.490 --> 00:43:02.880
VP8 CODEC.
[ Applause ]

00:43:02.880 --> 00:43:08.690
&gt;&gt;Kevin Lynch: We're really excited at what
people are going to be able to do as video

00:43:08.690 --> 00:43:13.250
keeps maturing like this and innovating. And
the other area we are working on is of course

00:43:13.250 --> 00:43:16.640
we are working with Google on a bunch of devices
with Flash, and you are going to see a lot

00:43:16.640 --> 00:43:20.540
more of that on day two.
We are really excited about it, and we are

00:43:20.540 --> 00:43:23.650
really happy with the innovation that's going
on in the Web and happy to be part of it.

00:43:23.650 --> 00:43:33.410
So thank you very much for having us here.
&gt;&gt;Sundar Pichai: Thanks, Kevin.

00:43:33.410 --> 00:43:39.100
So we have seen these great Web applications
and what you can do with HTML5.

00:43:39.100 --> 00:43:42.490
But I want to talk about a couple of problems
which remain on the Web.

00:43:42.490 --> 00:43:50.390
The first is that it is very hard for users
to find Web applications. In the earlier days,

00:43:50.390 --> 00:43:55.410
literally you could walk into a retail store
and pick software off the shelf. Then we talked

00:43:55.410 --> 00:44:00.090
about all the popular desktop applications,
and it turned out there were sites like download.com

00:44:00.090 --> 00:44:06.390
where you could go and find these applications.
Since 2004, we talked about how Web applications

00:44:06.390 --> 00:44:11.970
are the main way by which developers are writing
applications on computers. It turns out it's

00:44:11.970 --> 00:44:17.290
very hard to find these applications.
Think about this example. Let's try to find

00:44:17.290 --> 00:44:22.520
a great chess game on the Web. I have tried
do so. It turns out there are many, many great

00:44:22.520 --> 00:44:28.099
chess games on the Web, but it's very hard
to find one which is really good. There's

00:44:28.099 --> 00:44:32.710
no way for you to get ratings and reviews.
You can search for it but you can't see rating,

00:44:32.710 --> 00:44:36.740
you can't see reviews. You don't know how
many people are using this game. You can't

00:44:36.740 --> 00:44:40.410
engage in a discussion with other people who
are playing the same game.

00:44:40.410 --> 00:44:44.920
It turns out it's actually much easier on
a mobile phone to go find a chess game, whereas

00:44:44.920 --> 00:44:47.770
it is very, very hard to do the same on the
Web.

00:44:47.770 --> 00:44:53.359
So that's one problem. Photograph the second
problem is, as developers, when you write

00:44:53.359 --> 00:44:59.180
these applications, you need users to discover
and use these applications. You need reach.

00:44:59.180 --> 00:45:02.770
You need to know how many users are you going
to get for this application.

00:45:02.770 --> 00:45:07.940
The second thing developers care about is
monetization. Today, advertising is the primary

00:45:07.940 --> 00:45:12.510
form to do this and it works great in many,
many cases. So advertising has been a very

00:45:12.510 --> 00:45:16.650
important form much monetization on the Web.
But we want to create other alternatives as

00:45:16.650 --> 00:45:20.460
well.
For example, it should be easy to create and

00:45:20.460 --> 00:45:25.640
sell a premium application on the Web.
So these are the two problems we have been

00:45:25.640 --> 00:45:30.740
thinking hard about, and as part of that,
we want to give you an early preview of a

00:45:30.740 --> 00:45:35.359
product, what we call Chrome Web Store.
So I am going to introduce Kan Liu who is

00:45:35.359 --> 00:45:39.400
the product manager on the Chrome team who
is going to walk us through the Chrome Web

00:45:39.400 --> 00:45:41.940
Store.
Again, this is an early preview. We are pulling

00:45:41.940 --> 00:45:48.000
this off Chrome nightly build, so bear with
us. What you are saying is a new type age

00:45:48.000 --> 00:45:53.890
of Chrome. It's a friendly paradigm to most
users. These are applications, icons which

00:45:53.890 --> 00:45:58.300
we have installed right on the New Tab page.
One caveat though, these are Web applications.

00:45:58.300 --> 00:46:02.830
You can find them on the Web anywhere but
now you can conveniently add it onto your

00:46:02.830 --> 00:46:06.250
New Tab page.
As you can see there's Clicker. Jim Lanzone

00:46:06.250 --> 00:46:09.970
talked about the clicker.com. I love that
application. I have it installed on my new

00:46:09.970 --> 00:46:12.880
tab page.
Let's go ahead and try one application. Let's

00:46:12.880 --> 00:46:18.660
try Tweetdeck. I'm sure many of you are using
Tweetdeck right now in this audience. Tweetdeck

00:46:18.660 --> 00:46:24.060
has redone a complete HTML5 version of their
application as well, and so what you are seeing

00:46:24.060 --> 00:46:29.650
is fully in the browser. It's really slick.
You can drag and drop it. Let's go ahead and

00:46:29.650 --> 00:46:35.550
add a key word for Google so we can start
watching the tweets come in. So you can add

00:46:35.550 --> 00:46:40.120
Google. They used the notifications API to
deliver tweets to you right in the browser.

00:46:40.120 --> 00:46:45.560
They also used the Joy location API. So you
can click on it and see where all the tweets

00:46:45.560 --> 00:46:50.819
are coming from.
So this is all done using HTML5 in the browser.

00:46:50.819 --> 00:46:55.819
Let's go ahead and send a tweet, and we can
send it to the Google I/O channel, live Google

00:46:55.819 --> 00:47:00.250
I/O.
So this is an application which I have conveniently

00:47:00.250 --> 00:47:04.891
installed in the New Tab page.
Let's go back there. One icon you will see

00:47:04.891 --> 00:47:09.780
on the bottom right is what we calm the Chrome
Web Store. So you click on the Web Store icon

00:47:09.780 --> 00:47:17.800
and it takes you to a gallery full of applications.
And so you can go here, discover applications,

00:47:17.800 --> 00:47:22.730
find ratings review, find how many users are
using these applications, add comments, et

00:47:22.730 --> 00:47:26.150
cetera.
So Darkroom, you saw the demo earlier. You

00:47:26.150 --> 00:47:30.839
saw the application. It cost 4.99. I can go
ahead and buy it.

00:47:30.839 --> 00:47:36.510
We have worked very hard to simplify the process
so once you set it up, it's normally one click

00:47:36.510 --> 00:47:40.599
to buy an application.
So you can buy it and add its straight into

00:47:40.599 --> 00:47:44.970
the New Tab page of Chrome, and you can start
using it right away.

00:47:44.970 --> 00:47:49.359
So let's go back there. It turns out one of
the important class of applications on the

00:47:49.359 --> 00:47:56.780
Web is games. And people spend more time -- In
all app stores, games are the most popular

00:47:56.780 --> 00:48:02.369
form of application. So let's try a couple.
Plants &amp; Zombies. It is a very popular game

00:48:02.369 --> 00:48:08.270
on phones. Now you have it in the Chrome Web
Store. So you can click on it, and as you

00:48:08.270 --> 00:48:12.849
can see, it's a full immersive full screen
experience right in the browser the way most

00:48:12.849 --> 00:48:20.010
people want to play games. And this is built
on Flash. And applications in the Chrome Web

00:48:20.010 --> 00:48:25.349
Store can be built on standard Web technologies,
including Flash, and we will support all of

00:48:25.349 --> 00:48:29.700
them in the Chrome Web Store.
So the goal of this game is to knock zombies

00:48:29.700 --> 00:48:33.470
out, so -- we can move on.
[ Laughter ]

00:48:33.470 --> 00:48:40.400
&gt;&gt;Sundar Pichai: Let's go to the Web Store.
Another game which is a different class of

00:48:40.400 --> 00:48:47.609
game which I am excited to show, we call this
Lego Star Wars. It is a 3D game. We were wondering

00:48:47.609 --> 00:48:52.859
what game to show this audience, and we figured
as long as it has 3D, Legos and Star Wars,

00:48:52.859 --> 00:48:54.450
it's going to work well.
[ Applause ]

00:48:54.450 --> 00:49:03.819
&gt;&gt;Sundar Pichai: So we worked with this company
called Unity Technologies. They have a game

00:49:03.819 --> 00:49:07.930
engine which really simplifies the development
pipeline for game developers.

00:49:07.930 --> 00:49:13.200
We are showing it using their plug-in, but
they have a working demo in their sandbox

00:49:13.200 --> 00:49:17.730
of porting this game on top of native client
of open source technology which we will have

00:49:17.730 --> 00:49:22.460
in Chrome.
Most game engines are written in native code,

00:49:22.460 --> 00:49:26.630
and it's going to be very hard to rewrite
these in JavaScript. But now you can use something

00:49:26.630 --> 00:49:30.050
like native client to run them directly in
the browser.

00:49:30.050 --> 00:49:36.599
So the purpose of this game is to go rescue
R2D2 and kill all the bad droids out there.

00:49:36.599 --> 00:49:43.390
As you can see, it is a full 3D game. It is
very rich, and it leverages a lot of HTML5

00:49:43.390 --> 00:49:48.830
APIs.
And Unity is working to put all that you are

00:49:48.830 --> 00:49:52.490
game on top of native client to get it working
in Chrome.

00:49:52.490 --> 00:49:57.690
So these are rich, immersive 3D gaming experiences
which will be coming to the browser as well.

00:49:57.690 --> 00:50:07.869
So let's move on.
So if you go back, we talked about games.

00:50:07.869 --> 00:50:13.460
Another important class of applications is
content, newspapers, magazines.

00:50:13.460 --> 00:50:19.040
When you read a magazine, it is a really nice
experience. So how do you create that same

00:50:19.040 --> 00:50:22.930
experience on the Web?
This is an important problem, and we have

00:50:22.930 --> 00:50:27.401
reached out to magazine publishers to help
create these experiences. To show what you

00:50:27.401 --> 00:50:33.109
can do in terms of producing content on the
Web, I would like to invite Terry McDonnell

00:50:33.109 --> 00:50:36.400
who is the editor of Sports Illustrated.
[ Applause ]

00:50:36.400 --> 00:50:51.940
&gt;&gt;Terry McDonnell: Walking out here it occurred
to me that I might be the oldest person in

00:50:51.940 --> 00:50:52.940
the room.
[ Laughter ]

00:50:52.940 --> 00:50:57.150
&gt;&gt;Terry McDonnell: But this is fine with me.
In my business, still standing is a very good

00:50:57.150 --> 00:51:02.930
thing.
My brand, Sports Illustrated, is a monster

00:51:02.930 --> 00:51:15.630
traditional brand. Storied, extremely lucrative,
started from a very simple idea, self-defining,

00:51:15.630 --> 00:51:21.270
becoming more and more complicated. And now,
changing faster than it ever has.

00:51:21.270 --> 00:51:26.880
And it's not just Sports Illustrated.
In my company, Time, Inc., every single one

00:51:26.880 --> 00:51:33.230
of the iconic brands, and I am talking about
People, Fortune, Entertainment Weekly and

00:51:33.230 --> 00:51:41.880
Time, is changing very fast also.
The reason for this is that empowered engineers

00:51:41.880 --> 00:51:50.300
and developers like all of you in this room
are, in turn, empowering and helping me as

00:51:50.300 --> 00:51:54.450
an editor to create new versions of Sports
Illustrated.

00:51:54.450 --> 00:52:00.890
That's why I'm here.
I'm going to start with a video here, and

00:52:00.890 --> 00:52:04.980
then we will go live. The video hopefully
will have a little swagger to it and it will

00:52:04.980 --> 00:52:08.380
show you sort of where we are coming from
at Sports Illustrated.

00:52:08.380 --> 00:52:23.770
It starts with the first cover in 1954.
(Video Playing)

00:52:23.770 --> 00:52:39.510
&gt;&gt;Terry McDonnell: Okay. We are live now.
Driving today is the always the dangerous

00:52:39.510 --> 00:52:46.020
David Link, founder of the Wonderfactory and
S.I.'s development partner in creating this

00:52:46.020 --> 00:52:52.569
live HTML5 prototype that will hopefully show
some of the possibilities of bringing an enriched

00:52:52.569 --> 00:53:01.480
magazine to laptops, netbooks and tablets.
It's really -- he is opening it in the Chrome

00:53:01.480 --> 00:53:07.119
store.
It's really a very simple idea.

00:53:07.119 --> 00:53:13.700
It's to somehow pull together the best of
the Web, the best of the magazine. This came

00:53:13.700 --> 00:53:18.030
off fresh yesterday in Merced, our plant in
Merced.

00:53:18.030 --> 00:53:25.050
To pull out the absolute most important things
in the DNA in the magazine and translate them

00:53:25.050 --> 00:53:29.680
in a way that they are even more enjoyable,
like the photography for example. This goes

00:53:29.680 --> 00:53:34.461
very deep for us. We have staff photographers,
one of the most popular things we have.

00:53:34.461 --> 00:53:40.440
And the rest of it of course.
What I am talking about here is a tightly

00:53:40.440 --> 00:53:51.280
edited, curated, free, open, social, searchable
take on sports that you can customize for

00:53:51.280 --> 00:53:56.500
yourself by rearranging it.
It's also going to have, of course, live video

00:53:56.500 --> 00:54:02.099
feeds, live news, live scores, like we have
here.

00:54:02.099 --> 00:54:08.380
All of this built on a foundation of strong
journalism and informed opinion about the

00:54:08.380 --> 00:54:15.460
stories of the moment, like Tiger here.
And additional content that in fact will pull

00:54:15.460 --> 00:54:18.990
new further, that will allow you to participate
in this sports world.

00:54:18.990 --> 00:54:23.220
This is a poll that we are doing live right
now about how to build a baseball franchise.

00:54:23.220 --> 00:54:29.809
It's not necessarily good news for the Giants.
This is one of our sports columns. We have

00:54:29.809 --> 00:54:38.069
one of these every week. This is boxing which
is enriched by a video which happened outside

00:54:38.069 --> 00:54:41.310
the room, behind the velvet ropes in the background.
(Video Playing)

00:54:41.310 --> 00:54:46.170
&gt;&gt;Terry McDonnell: You don't want to mess
with Floyd.

00:54:46.170 --> 00:54:52.109
&gt;&gt;&gt; I believe in my skills and I believe in
my talent.

00:54:52.109 --> 00:54:59.810
&gt;&gt;Terry McDonnell: And of course here is hockey,
here is your golf, here is your NFL. Always

00:54:59.810 --> 00:55:04.190
need video there, always need highlights,
these of the number one draft choice, Sam

00:55:04.190 --> 00:55:11.119
Bradford out of Oklahoma.
Of course you might want to not watch this

00:55:11.119 --> 00:55:17.240
now, might want to save it for later which
you can do here.

00:55:17.240 --> 00:55:22.270
But most important, I think, is to always
know where you are in this magazine so you

00:55:22.270 --> 00:55:27.260
can find what you want and go directly to
it.

00:55:27.260 --> 00:55:31.240
For example, here is a piece on the end of
the road for Shaq.

00:55:31.240 --> 00:55:36.619
[ Laughter ]
&gt;&gt;Terry McDonnell: Kind of a bad call.

00:55:36.619 --> 00:55:46.609
The typography here is very, very important,
because you came here to read this story,

00:55:46.609 --> 00:55:54.330
and nothing retards reading like the formula
fonts that we are so used to online. And say

00:55:54.330 --> 00:56:01.690
here, here is a strong portrait of Shaq. We
can deliver for you the video of this photo

00:56:01.690 --> 00:56:04.770
shoot and how we put that cover together.
We can do this.

00:56:04.770 --> 00:56:21.619
(Video Playing)
&gt;&gt;Terry McDonnell: The idea also that you

00:56:21.619 --> 00:56:26.440
need to go deeper is very important because
you might want additional stories about Shaq

00:56:26.440 --> 00:56:28.470
and his future.
There they are.

00:56:28.470 --> 00:56:35.160
You might want to go wider. You might want
to go into the NBA to see about Lebron, or

00:56:35.160 --> 00:56:38.490
you might want to just see pictures of the
last time they played together and see what

00:56:38.490 --> 00:56:44.920
that was like.
And finally you probably want to share any

00:56:44.920 --> 00:56:50.829
and/or all of this with your friends or whoever,
and you have a number of choices there.

00:56:50.829 --> 00:56:54.960
And as you are running through this, you can
always keep up with what other NBA fans are

00:56:54.960 --> 00:57:00.220
thinking and saying about the league on Google
Buzz.

00:57:00.220 --> 00:57:05.330
All of this stuff works very hard for the
user. And the advertising I think has to work

00:57:05.330 --> 00:57:10.200
very hard, too.
No more image messaging, really.

00:57:10.200 --> 00:57:16.430
What we need is stuff that is actually useful.
So this advertising, I submit to you, can

00:57:16.430 --> 00:57:21.059
become so useful that it becomes content in
and of itself.

00:57:21.059 --> 00:57:27.470
This is a new idea in advertising.
Or it's not a new -- It would be new to actually

00:57:27.470 --> 00:57:28.570
deliver it.
[ Laughter ]

00:57:28.570 --> 00:57:33.359
[ Applause ]
&gt;&gt;Terry McDonnell: You can -- But as you see

00:57:33.359 --> 00:57:36.880
here, you can change the lens and see what
that's like. And then of course you want to

00:57:36.880 --> 00:57:43.109
buy it, so we can show you where to buy it.
So what you can see that we are going for

00:57:43.109 --> 00:57:54.510
here is additional content of every kind,
content that is enriched and of the moment

00:57:54.510 --> 00:58:00.420
and feels different and right, and like a
magazine experience, like nothing else that

00:58:00.420 --> 00:58:07.191
you see on the Web today.
And when it is on the point of the most important

00:58:07.191 --> 00:58:13.599
stories of the moment in sports, say like
in this case the impact of soccer on world

00:58:13.599 --> 00:58:19.589
peace coming into the World Cup, this is a
very good and interesting thing for us to

00:58:19.589 --> 00:58:22.589
be working on.
There we go.

00:58:22.589 --> 00:58:28.619
Now, like I said, this came off the press
in Merced. It is that.

00:58:28.619 --> 00:58:33.970
Some of that was a little bit different, but
it was live, but this is something that we're

00:58:33.970 --> 00:58:41.540
very, very excited about coming forward with.
And the reason for that is that in the fall

00:58:41.540 --> 00:58:49.380
of last year, not long after S.I. released
a video demo of what an enriched magazine

00:58:49.380 --> 00:58:55.660
might look like on a tablet, I found myself
in a very small conference room in Mountain

00:58:55.660 --> 00:59:07.890
View, and it hit me there that I was at the
beginning of a veritable storm of innovation

00:59:07.890 --> 00:59:15.200
that might not be so new in Mountain View,
but that was going to allow the journalism

00:59:15.200 --> 00:59:23.089
that I want and that my company Time, Inc.,
stands for to flourish and to completely reimagine,

00:59:23.089 --> 00:59:32.280
remake the business model to support it.
So I'm thinking about, you know, that quote

00:59:32.280 --> 00:59:40.500
in the sports movie "Field of Dreams" where
he says, "If you build it, they will come."

00:59:40.500 --> 00:59:48.420
I would add an addendum to that. It has to
be built open, it has to be well edited, it

00:59:48.420 --> 00:59:52.440
has to be searchable, it has to be social,
and it has to be everywhere.

00:59:52.440 --> 00:59:56.641
And if we do that, we can charge for it.
It's great to be with you.

00:59:56.641 --> 01:00:09.890
[ Applause ]
&gt;&gt;Sundar Pichai: Talking to Terry, it's been

01:00:09.890 --> 01:00:14.720
very obvious this passion for the quality
of what they want to see, and they would not

01:00:14.720 --> 01:00:18.670
do it on the Web unless they can create an
immersive experience like that.

01:00:18.670 --> 01:00:25.480
So it's really possible to do this in the
browser, using HTML5. And we really hope you

01:00:25.480 --> 01:00:30.470
and everyone watching this build showcase
applications like what we just saw.

01:00:30.470 --> 01:00:34.190
So what does it mean to build on the Chrome
Web Store?

01:00:34.190 --> 01:00:39.869
It means that you can reach over 70 million
users. These are primary users of Chrome as

01:00:39.869 --> 01:00:43.900
of today.
And in June of last year when we talked about

01:00:43.900 --> 01:00:48.760
Chrome OS, we said we had 30 million years.
As of today, we have over 70 million users

01:00:48.760 --> 01:00:54.330
and the number is growing fast. These people
will be able to have the Web Store right on

01:00:54.330 --> 01:00:59.549
their New Tab page and discover both free
and paid applications.

01:00:59.549 --> 01:01:04.550
So it's also important to remember that this
Web Store will also be there in Chrome OS

01:01:04.550 --> 01:01:09.650
as well. So the Chrome Web Store will work
on Chrome on Windows, Mac, Linux, and Chrome

01:01:09.650 --> 01:01:16.800
OS. It will support both free and paid applications.
It will work in over 40 languages and over

01:01:16.800 --> 01:01:19.990
70 countries.
We will be bringing this in the Chrome dev

01:01:19.990 --> 01:01:24.970
channel soon and we will have a whole session
at I/O to talk about this.

01:01:24.970 --> 01:01:29.690
One thing I want to add is we support standard
Web technologies, and so applications written

01:01:29.690 --> 01:01:35.650
for Chrome Web Store will also continue to
work on every other modern browser out there.

01:01:35.650 --> 01:01:41.700
So it's been really exciting to talk about
HTML5. We have always believed that the future

01:01:41.700 --> 01:01:48.619
of Web is HTML5. And over the course of the
last few months, it's been very exciting to

01:01:48.619 --> 01:01:52.530
see every major browser vendor share that
opinion as well.

01:01:52.530 --> 01:01:57.420
So with that, I am going to invite Lars Rasmussen,
who spoke to you last year about Google Wave,

01:01:57.420 --> 01:02:04.190
an amazing example of what's possible in the
browser, to give a future update on HTML5.

01:02:04.190 --> 01:02:12.141
[ Applause ]
&gt;&gt;Lars Rasmussen: Good morning.

01:02:12.141 --> 01:02:15.020
Good morning, everyone.
So, the Web has grown up.

01:02:15.020 --> 01:02:17.569
And Google Wave is starting to grow up as
well.

01:02:17.569 --> 01:02:22.140
It's been a full year since we showed you
what was really our vision for hour real-time

01:02:22.140 --> 01:02:25.281
communication and collaboration could work
on the Web.

01:02:25.281 --> 01:02:29.049
We showed you right here on this stage with
an 80-minute demo last year.

01:02:29.049 --> 01:02:33.740
And today, Google Wave is a product that people
are starting to use to get real work done

01:02:33.740 --> 01:02:36.039
all over the world.
And we're going to show you that today with

01:02:36.039 --> 01:02:38.009
a 90-minute -- I'm just kidding.
We're not going to do that.

01:02:38.009 --> 01:02:40.970
[ Laughter ]
&gt;&gt;Lars Rasmussen: What we are going to do

01:02:40.970 --> 01:02:43.900
is this: We're going to open up Wave to everyone
today.

01:02:43.900 --> 01:02:46.421
So you no longer need an invitation to use
Wave.

01:02:46.421 --> 01:02:50.950
Just go to Wave.google.com and log right in.
Thank you.

01:02:50.950 --> 01:02:53.210
[ Applause ]
&gt;&gt;Lars Rasmussen: Thank you.

01:02:53.210 --> 01:02:58.380
So we're making -- we're making Wave part
of Google Apps, where particularly ambitious,

01:02:58.380 --> 01:03:01.309
you might even say crazy services start their
life.

01:03:01.309 --> 01:03:03.960
Maps, my last project, started there five
years ago.

01:03:03.960 --> 01:03:08.049
Wave has been in an invitation-only preview
for half a year.

01:03:08.049 --> 01:03:10.690
We've gotten tons of great feedback.
Thanks so much for that.

01:03:10.690 --> 01:03:15.069
And more than anything, we've learned that
Wave really shines as a place to get work

01:03:15.069 --> 01:03:19.619
done, in particular, if you have a group or
a team of people that use Wave to collaborate

01:03:19.619 --> 01:03:23.520
on all manners of projects.
And the thing we hear a lot -- and this actually

01:03:23.520 --> 01:03:29.360
matches our own experience -- is that Wave
changes the way you work, sometimes in subtle

01:03:29.360 --> 01:03:33.130
and unexpected ways.
And we hear this in many different contexts.

01:03:33.130 --> 01:03:36.089
Of course, lots of programmers use Wave to
coordinate their work.

01:03:36.089 --> 01:03:41.359
But we hear things like a fifth-grade teacher
has her students do all the research in Wave.

01:03:41.359 --> 01:03:45.190
And the kids love the live typing.
It feels like you're talking to the other

01:03:45.190 --> 01:03:49.289
participants on the Wave.
And the teacher loves it because she can see

01:03:49.289 --> 01:03:53.309
in real time what they're doing and jump right
in and provide guidance.

01:03:53.309 --> 01:04:00.190
Brick-and-mortar businesses like this hotel
here, they use Wave exclusively to track and

01:04:00.190 --> 01:04:05.859
discuss all of their tasks during the day.
They tell us how Wave stops issues from falling

01:04:05.859 --> 01:04:10.220
through the cracks and helps keep everyone
on the same page every day.

01:04:10.220 --> 01:04:12.839
Deloitte is a good example.
They have a new project team that's spread

01:04:12.839 --> 01:04:16.720
over four or five countries.
And they use Wave to coordinate all of the

01:04:16.720 --> 01:04:21.610
work and tell us how Wave actually saves them
money in travel and VC cost.

01:04:21.610 --> 01:04:28.010
And so since Wave is about getting work done,
it's important for us to get Wave -- make

01:04:28.010 --> 01:04:33.260
Wave available at work and at schools.
So also today, we're making Wave part of Google

01:04:33.260 --> 01:04:37.270
Apps.
If you have an apps domain, you or your administrator

01:04:37.270 --> 01:04:42.509
can easily enable Wave for all of your users
at no extra cost.

01:04:42.509 --> 01:04:46.000
[ Applause ]
&gt;&gt;Lars Rasmussen: Thank you.

01:04:46.000 --> 01:04:53.180
And let me just say this: If you tried Wave
already, in particular, early on during the

01:04:53.180 --> 01:04:57.839
preview, and you found it wasn't quite ready
to get work done, now's a good time to come

01:04:57.839 --> 01:05:01.849
back and give it a second try.
Wave is a lot faster and it's a lot more stable

01:05:01.849 --> 01:05:05.950
than when we started the preview.
We put a lot of work into the basic preview

01:05:05.950 --> 01:05:08.891
things.
You can now get e-mail notifications when

01:05:08.891 --> 01:05:18.240
 -- we have found it easier to navigate the
unmet pieces of the Wave.

01:05:18.240 --> 01:05:22.280
We have added tutorials and templates to help
new users get started.

01:05:22.280 --> 01:05:26.000
You can have -- remove a participant if you
add them by mistake.

01:05:26.000 --> 01:05:30.110
If you have a group or team and you're working
on a project together, try out Wave.

01:05:30.110 --> 01:05:36.630
I think you will find it makes you more productive.
Now, this is a developer event.

01:05:36.630 --> 01:05:41.089
And I think already some of the coolest things
about Wave are things you guys are built.

01:05:41.089 --> 01:05:45.799
We really, really appreciate that.
And continuing to improve our APIs are hugely

01:05:45.799 --> 01:05:49.130
important to us.
Just a few months ago, we launched an entire

01:05:49.130 --> 01:05:55.289
new version of our robot API that lets robots
create waves and push content into waves on

01:05:55.289 --> 01:06:00.539
their own schedule.
We also made it a lot easier to embed a wave

01:06:00.539 --> 01:06:03.460
on your own Web site.
We even made it possible for a non-Wave user

01:06:03.460 --> 01:06:06.940
to see a public wave that you embedded on
your Web site.

01:06:06.940 --> 01:06:12.700
Today, we're checking off a bunch of top-requested
features or APIs.

01:06:12.700 --> 01:06:18.470
For starters, we're rolling out a change that
means that robots no longer have to live on

01:06:18.470 --> 01:06:21.420
Google App Engine.
They can live anywhere on the Web, which makes

01:06:21.420 --> 01:06:25.490
it a lot easier to integrate Wave with your
own application.

01:06:25.490 --> 01:06:31.970
We're also launching a new Wave data API designed
to let you build things like notifiers, but

01:06:31.970 --> 01:06:36.589
also lightweight clients, in particular, for
mobile devices.

01:06:36.589 --> 01:06:42.140
We're adding media and attachment features
to both our robot and gadget APIs so you can

01:06:42.140 --> 01:06:47.720
integrate with places like Picasa and Flickr
and so on and build inline viewers for media

01:06:47.720 --> 01:06:51.410
types in Wave.
We're also adding a bunch more hooks for your

01:06:51.410 --> 01:06:56.230
extensions to integrate into our client.
And if you want to see some of the cool things

01:06:56.230 --> 01:07:00.200
people have already built, join us out on
the floor in the developer sandbox.

01:07:00.200 --> 01:07:05.800
For example, Salesforce.Com is with us today,
showing how they're embedding waves into their

01:07:05.800 --> 01:07:12.430
new product, Chatter.
Also, we've always wanted Wave to be an open

01:07:12.430 --> 01:07:17.520
technology so that anyone should be able to
build their own Wave service and have it interoperate

01:07:17.520 --> 01:07:21.890
in real time with Google Wave.
And so we were super excited late last year

01:07:21.890 --> 01:07:27.289
when Novell announced their new product, Pulse
is going to support the Wave Federation protocol.

01:07:27.289 --> 01:07:32.480
And today, SAP is announcing that their new
product, StreamWork, will also support the

01:07:32.480 --> 01:07:36.440
Wave Federation protocol.
Both companies are with us today, out on the

01:07:36.440 --> 01:07:40.390
floor and at a session later, where we'll
show demos of how our different Wave services

01:07:40.390 --> 01:07:43.420
are starting to be able to talk to each other
in real time.

01:07:43.420 --> 01:07:48.740
And to make this sort of thing easier for
others to build their own Wave systems, we

01:07:48.740 --> 01:07:53.200
are today open-sourcing additional components
of our production code, in particular, the

01:07:53.200 --> 01:07:57.700
in-browser editor, which is one of the hardest
pieces to write.

01:07:57.700 --> 01:08:00.440
We're also publishing --
[ Applause ]

01:08:00.440 --> 01:08:06.890
&gt;&gt;Lars Rasmussen: Thank you.
We're also publishing -- and this is another

01:08:06.890 --> 01:08:11.690
top-requested feature -- we're publishing
the beginnings of a client/server protocol

01:08:11.690 --> 01:08:15.390
so that you guys will be able to build any
Wave client you want and put it on top of

01:08:15.390 --> 01:08:22.150
any Wave services that speaks this new protocol,
which, of course, will include Google Wave.

01:08:22.150 --> 01:08:26.049
Now, just to end off, I want to remind you
that we're using Wave at this conference here.

01:08:26.049 --> 01:08:28.670
There's a couple of waves allocated for each
session.

01:08:28.670 --> 01:08:33.502
You can use them to ask questions of the presenter.
Someone will take live notes, and you can

01:08:33.502 --> 01:08:36.940
discuss the session in there.
I really hope to see you later, either out

01:08:36.940 --> 01:08:41.731
on the floor, at one of the many sessions
that we have today and tomorrow, or, of course,

01:08:41.731 --> 01:08:47.440
on Wave.
Happy Waving, everyone.

01:08:47.440 --> 01:08:51.299
[ Applause ]
&gt;&gt;Lars Rasmussen: Thank you.

01:08:51.299 --> 01:08:56.060
And so just like Wave is getting to work,
our next speaker will talk about the Web going

01:08:56.060 --> 01:09:02.530
to work.
Please welcome Google director of engineering,

01:09:02.530 --> 01:09:09.029
David Glazer.
[ Applause ]

01:09:09.029 --> 01:09:16.400
&gt;&gt;David Glazer: All right, all right.
[ Applause ]

01:09:16.400 --> 01:09:24.489
&gt;&gt;David Glazer: So Sundar showed you how open
standards are leading to innovation in the

01:09:24.489 --> 01:09:30.279
consumer Web, with the help of people like
Terry and Kevin and Hakon, showed you how

01:09:30.279 --> 01:09:34.779
open standards have always allowed more choice,
which has always led to more innovation.

01:09:34.779 --> 01:09:37.179
Lars showed you how that's true with Google
Wave.

01:09:37.179 --> 01:09:41.210
And he showed you how Google Wave is now heading
off to work.

01:09:41.210 --> 01:09:46.279
Well, I'm going to spend the next 45 minutes
showing you more about how is the Web making

01:09:46.279 --> 01:09:50.569
work better, what are the things that we can
do to help the Web transform what we all do

01:09:50.569 --> 01:09:55.210
at work, what our customers do at work, what
our partners do at work, how can the Web help

01:09:55.210 --> 01:09:59.420
there.
The good news is, the Web is already transforming

01:09:59.420 --> 01:10:03.070
the way we work.
I can't imagine doing e-mail without GMail.

01:10:03.070 --> 01:10:08.800
I can't imagine collaborating on a presentation
or on a design document by mailing around

01:10:08.800 --> 01:10:12.480
versions of content back and forth between
people and saying, "Who's got the latest one,

01:10:12.480 --> 01:10:15.690
who's got what edit?"
And I can't imagine being tethered to one

01:10:15.690 --> 01:10:19.150
particular physical device to find my data
and my application.

01:10:19.150 --> 01:10:23.300
It would make no sense anymore.
We all know that.

01:10:23.300 --> 01:10:26.340
Companies know that.
Every company we talk to is trying to figure

01:10:26.340 --> 01:10:32.260
out how can I shift my weight to the cloud?
How can I use the Web more heavily with the

01:10:32.260 --> 01:10:36.190
applications that I use and the applications
that I build at work?

01:10:36.190 --> 01:10:40.670
The problem is, it's still hard to do that.
It's still too hard to take advantage of the

01:10:40.670 --> 01:10:42.909
Web at work.
It's hard for a few reasons.

01:10:42.909 --> 01:10:47.100
First, it's hard because it takes too long.
From the time you have a great idea or your

01:10:47.100 --> 01:10:51.730
boss has a great idea or the VP of marketing
has a great request, from the time you have

01:10:51.730 --> 01:10:55.900
the great idea and you want to create a great
application, new technology, new tools, takes

01:10:55.900 --> 01:11:02.590
too long to turn that idea into reality.
The second thing that's hard is, we don't

01:11:02.590 --> 01:11:05.710
stand in one place anymore.
That application that you're running, you

01:11:05.710 --> 01:11:08.280
might need to access it from the back of a
taxicab.

01:11:08.280 --> 01:11:12.600
Some of your users need to access it from
an airport or from the lobby of their hotel.

01:11:12.600 --> 01:11:16.880
Because people are working everywhere, they're
working all the time, the applications that

01:11:16.880 --> 01:11:22.610
you build for them need to run on all the
devices that people are using.

01:11:22.610 --> 01:11:27.960
The third thing that's hard today is, architectures
tend to trap people so that the choice you

01:11:27.960 --> 01:11:33.520
make in what tool stack do I use, how am I
building my application, that choice you make

01:11:33.520 --> 01:11:39.980
today locks you in to a deployment model for
tomorrow that you may not be ready to lock

01:11:39.980 --> 01:11:43.840
yourself into.
And then, finally, if any of you have the

01:11:43.840 --> 01:11:48.040
job that this guy has, you look at this slide
and probably say, he's only got a half dozen

01:11:48.040 --> 01:11:52.630
applications he's taking care of for his company.
The CIOs that we talk to tell us that they

01:11:52.630 --> 01:11:56.170
usually have on the order of a thousand applications
that they're trying to manage to run their

01:11:56.170 --> 01:11:58.780
business.
And they need better tools to be able to manage

01:11:58.780 --> 01:12:03.469
all those applications.
Over the next 40 minutes, we're going to show

01:12:03.469 --> 01:12:08.820
you what we've done, working with other people,
to enable fast and familiar development using

01:12:08.820 --> 01:12:13.380
tools and languages you already know to crank
out great Web applications.

01:12:13.380 --> 01:12:17.840
We're going to show you how to make those
applications mobile-ready so they can run

01:12:17.840 --> 01:12:23.360
and reach your users wherever your users are.
We're going to show you an architecture used

01:12:23.360 --> 01:12:27.630
 -- based on open standards that give you
flexible deployment so you have portability.

01:12:27.630 --> 01:12:31.110
You can choose how you want to build your
apps and you can choose where you want to

01:12:31.110 --> 01:12:34.969
deploy your apps separately.
And, finally, we'll show you some new tools

01:12:34.969 --> 01:12:38.800
that give you the ability to manage the hundreds
and thousands of apps that are being built

01:12:38.800 --> 01:12:44.600
to run businesses in the cloud.
Now, as we set out to do this, it was very

01:12:44.600 --> 01:12:48.739
important that we did this staying true to
the principles and values of the Web.

01:12:48.739 --> 01:12:52.890
The principles and values that you've heard
all morning about how open standards lead

01:12:52.890 --> 01:12:57.530
to interoperability and portability, which
leads to choice, and choice is what drives

01:12:57.530 --> 01:13:01.570
innovation.
We looked for who can we work with, who can

01:13:01.570 --> 01:13:06.590
we collaborate with that shares those values,
that understands the importance of standards

01:13:06.590 --> 01:13:11.960
enabling innovation, and that has spent years
understanding how to help enterprise developers

01:13:11.960 --> 01:13:16.150
build great apps at work.
And I'm very happy to announce that we've

01:13:16.150 --> 01:13:21.280
been working closely with VMWare to enable
exactly that, building on our complementary

01:13:21.280 --> 01:13:26.800
strengths to enable open standards to lead
to great innovation in the enterprise.

01:13:26.800 --> 01:13:32.300
I'd like to welcome to the Google I/O stage
Paul Maritz, the president and CEO of VMWare,

01:13:32.300 --> 01:13:36.219
to tell you a little bit about what we've
been doing together.

01:13:36.219 --> 01:13:43.281
[ Applause ]
&gt;&gt;Paul Maritz: Good morning.

01:13:43.281 --> 01:13:47.370
It's a great pleasure to be with you here
today.

01:13:47.370 --> 01:13:56.480
Most of you will know VMWare in terms of the
work that we've been doing in allowing existing

01:13:56.480 --> 01:14:02.170
applications to be iterated forward and take
advantage of a cloud-oriented way of doing

01:14:02.170 --> 01:14:07.100
computing.
Customers have huge investments in large bodies

01:14:07.100 --> 01:14:12.050
of existing applications that they can't walk
away from, and just about the only hope for

01:14:12.050 --> 01:14:18.610
these applications is through virtualization,
which allows you to kind of encapsulate these

01:14:18.610 --> 01:14:24.050
applications, jack them up, put them in a
black box, slide new functionality underneath

01:14:24.050 --> 01:14:27.870
them and eventually start sliding the applications
themselves around.

01:14:27.870 --> 01:14:33.150
So we've been doing a lot of work in this
world of existing applications, allowing customers

01:14:33.150 --> 01:14:39.950
and companies to become more cloud-like in
their internal operations and actually allow

01:14:39.950 --> 01:14:46.690
them to start extending their data centers
outside of their own physical premises, into

01:14:46.690 --> 01:14:51.900
infrastructure that they can rent from external
service providers.

01:14:51.900 --> 01:14:56.820
And this is all well and good.
It's very important work to be doing.

01:14:56.820 --> 01:15:01.670
But the question really becomes, what about
new applications?

01:15:01.670 --> 01:15:04.530
And it's clear that there are going to be
many clouds out there.

01:15:04.530 --> 01:15:07.330
Customers are going to build their clouds
internally.

01:15:07.330 --> 01:15:12.670
Service providers are going to build clouds,
very large companies like Google are going

01:15:12.670 --> 01:15:17.050
to build clouds.
And wouldn't it be great if we could have

01:15:17.050 --> 01:15:23.090
a way of writing applications that on the
one hand can take full advantage of a particular

01:15:23.090 --> 01:15:28.460
cloud, but also be portable across clouds.
If you think of these infrastructure-level

01:15:28.460 --> 01:15:34.820
clouds as kind of the new hardware, what is
the new operating system for the cloud?

01:15:34.820 --> 01:15:39.510
What is that layer of abstraction that's going
to allow us to write applications that can

01:15:39.510 --> 01:15:47.590
look great on a variety of clouds?
And it's our premise, as it is Google's, that

01:15:47.590 --> 01:15:52.590
the new operating system is these extended
frameworks.

01:15:52.590 --> 01:15:57.510
And as you well know, developers over the
last several years have by and large voted

01:15:57.510 --> 01:16:02.739
with their feet, and traditionally -- and
now work within frameworks that give them

01:16:02.739 --> 01:16:08.489
much higher levels of productivity.
And that's the reason last year we at VMWare

01:16:08.489 --> 01:16:14.440
acquired what we think is one of the best
of breed new-generation frameworks, the Spring

01:16:14.440 --> 01:16:20.260
framework.
This comes from work that was started 2002

01:16:20.260 --> 01:16:25.489
by Rod Johnson and others, who founded Spring,
who had been working in the Java world and

01:16:25.489 --> 01:16:32.060
had come to the conclusion it was just too
hard to write Java in EJB applications.

01:16:32.060 --> 01:16:40.170
And they evolved the Spring framework, which
is oriented around a very simple, lightweight,

01:16:40.170 --> 01:16:48.050
but extremely powerful object model.
What the result is is that more than half

01:16:48.050 --> 01:16:51.980
of the lines of new Java code being written
today are written in the context of the Spring

01:16:51.980 --> 01:16:58.179
framework.
They started that effort based on open source.

01:16:58.179 --> 01:17:01.390
And they have continued in the open and open
source tradition.

01:17:01.390 --> 01:17:08.120
And we're committed to continuing that.
And so late last year, we started in-depth

01:17:08.120 --> 01:17:14.510
conversations with Google and said, wouldn't
it be great to give the world's largest body

01:17:14.510 --> 01:17:20.670
of developers, the Java community, a way of
writing really efficient, great cloud-based

01:17:20.670 --> 01:17:25.719
applications?
And as a result, we have been working with

01:17:25.719 --> 01:17:33.780
Google to bring to bear what we know about
writing the back-end of great, high-performance,

01:17:33.780 --> 01:17:38.949
portable applications, with what Google has
developed around the front-end.

01:17:38.949 --> 01:17:46.120
A perfect marriage is to bring these two technologies
together and give the industry an open and

01:17:46.120 --> 01:17:54.130
open source layer to cloak the clouds, to
allow you to get the fullest benefit from

01:17:54.130 --> 01:17:57.270
your investments.
The one thing I have learned over the years

01:17:57.270 --> 01:18:01.560
is, the more choice you give developers, the
more promise you give to developers, that

01:18:01.560 --> 01:18:05.040
they're going to be able to get a return on
their investment by having the widest possible

01:18:05.040 --> 01:18:10.610
number of places that they can deploy this
technology, the greater the motivation, the

01:18:10.610 --> 01:18:16.770
greater the applications that result.
So we have had our two teams working together

01:18:16.770 --> 01:18:23.159
to really integrate the Spring framework and
the Google Web Toolkit, and now give a complete

01:18:23.159 --> 01:18:30.469
answer as to how to write an end-to-end application,
the back-end and the front-end, in a way that

01:18:30.469 --> 01:18:37.530
you can deliver really great, exciting apps
that work across clouds, across devices, with

01:18:37.530 --> 01:18:42.270
a deep commitment to doing this in an open
and open source fashion.

01:18:42.270 --> 01:18:47.250
So with that, I'm very happy to let you see
some of the results of this work.

01:18:47.250 --> 01:18:54.880
&gt;&gt;David Glazer: Thanks.
[ Applause ]

01:18:54.880 --> 01:19:01.070
&gt;&gt;David Glazer: Thank you, Paul.
I've been very excited to work with Paul.

01:19:01.070 --> 01:19:06.820
I've been even more excited to have our engineers
and Paul's engineers working together to deliver

01:19:06.820 --> 01:19:10.699
on exactly what he said.
The first of the promises that we made is

01:19:10.699 --> 01:19:14.810
that over the next 40 minutes, we're going
to show you how we can use familiar tools

01:19:14.810 --> 01:19:19.620
to enable fast development.
And the way we've done that is, we have -- exactly

01:19:19.620 --> 01:19:24.739
as Paul said -- integrated the Spring back-end
development tools, which let Java developers

01:19:24.739 --> 01:19:28.870
build great back-ends to their apps, with
the Google Toolkit front-end.

01:19:28.870 --> 01:19:34.710
So you get the power of HTML5 in a complete
Java stack, back-end and front-end, integrated

01:19:34.710 --> 01:19:38.150
together.
To show you how that works, I'd like to bring

01:19:38.150 --> 01:19:43.330
up Ben Alex, who's the lead engineer for Spring
Roo, and Bruce Johnson, who is the lead of

01:19:43.330 --> 01:19:47.880
the Google web Toolkit team to give you a
demo of how do these tools work together,

01:19:47.880 --> 01:19:58.519
which you will be able to try yourself after
the keynote.

01:19:58.519 --> 01:20:04.429
[ Applause ]
&gt;&gt;&gt; Thank you, David.

01:20:04.429 --> 01:20:09.730
If you've used Google Web Toolkit before,
you know GWT makes it easy to build rich Web

01:20:09.730 --> 01:20:13.020
applications completely in Java.
Not only the server-side code, which you have

01:20:13.020 --> 01:20:17.240
always been able to right in Java, but also
the client side, the Ajax code that runs in

01:20:17.240 --> 01:20:21.239
the browser.
The way we do that is, the GWT compiler takes

01:20:21.239 --> 01:20:25.840
your Java source code and cross-compiles it
into highly optimized JavaScript that downloads

01:20:25.840 --> 01:20:30.130
quickly, it runs quickly in all the popular
Web browsers that your users are likely to

01:20:30.130 --> 01:20:32.140
use.
But, of course, you know, you have seen that

01:20:32.140 --> 01:20:33.460
before.
It works great.

01:20:33.460 --> 01:20:37.080
No problem.
The question is, where do you get that Java

01:20:37.080 --> 01:20:41.260
source code in the first place?
For a really huge Java app, sometimes a lot

01:20:41.260 --> 01:20:45.969
of the code can be sort of boilerplate code,
the sort that connects your browser to the

01:20:45.969 --> 01:20:48.520
data store in the back-end.
That's the sort of code that you don't really

01:20:48.520 --> 01:20:52.460
want to have to write.
And so when we started working with VMWare,

01:20:52.460 --> 01:20:54.730
we said, hey, you know, this -- what about
this?

01:20:54.730 --> 01:20:58.080
And they said, "We have a tool that does exactly
this.

01:20:58.080 --> 01:21:01.940
It saves you a whole bunch of time writing
the code that you don't want to automatically

01:21:01.940 --> 01:21:05.680
on your behalf."
So we used Google Wave to coordinate the engineering

01:21:05.680 --> 01:21:09.590
teams between Sydney, Germany, Atlanta, Mountain
View, and San Francisco.

01:21:09.590 --> 01:21:14.639
We used it all the time, around the clock,
every day, working together.

01:21:14.639 --> 01:21:19.130
And we made GWT and Spring Roo work together.
The tool I was talking about is Roo.

01:21:19.130 --> 01:21:23.460
And we are lucky to have the father of Roo,
Ben Alex, here to tell you more about Roo

01:21:23.460 --> 01:21:26.150
and to show you Roo in action.
&gt;&gt;Ben Alex: Thanks, Bruce.

01:21:26.150 --> 01:21:31.500
As we were thinking about what to do for you,
we thought what better way than to build you

01:21:31.500 --> 01:21:35.230
an application live on stage.
It occurred to us that there's something that's

01:21:35.230 --> 01:21:39.469
very near and dear to most of our hearts in
this room: Expense reports.

01:21:39.469 --> 01:21:41.699
We're all probably going to go home and log
expense reports.

01:21:41.699 --> 01:21:45.909
We thought, let's build you an application
that stores these.

01:21:45.909 --> 01:21:51.580
We're going to build this for and you have
a GWT front-end, the back-end with Roo, with

01:21:51.580 --> 01:21:55.320
all the Spring goodness, and we're going to
do this in less than 200 keystrokes.

01:21:55.320 --> 01:22:00.380
So let's get started.
So I have here an empty directory.

01:22:00.380 --> 01:22:04.500
And we load up Roo.
Roo's an open source tool that you can go

01:22:04.500 --> 01:22:06.949
and download.
It has a text mode.

01:22:06.949 --> 01:22:10.280
There's also a graphical version which I will
show you a little bit later.

01:22:10.280 --> 01:22:11.950
But Roo loads up.
It looks like this.

01:22:11.950 --> 01:22:14.611
You can get full command help with Roo by
typing "hint" at any time.

01:22:14.611 --> 01:22:23.310
Let's start our project.
Here I specified my Java top-level package.

01:22:23.310 --> 01:22:25.659
We need some databases.
Let's go do that.

01:22:25.659 --> 01:22:27.210
Persistence setup.
Notice the tab is working.

01:22:27.210 --> 01:22:31.580
We have data nucleus, which is great if you're
going to be deploying to the Google App Engine.

01:22:31.580 --> 01:22:35.239
But we're going to deploy to hypersonic in
memory for now.

01:22:35.239 --> 01:22:38.460
So now that we have our persistence layer,
let's create entities.

01:22:38.460 --> 01:22:42.600
This database is going to have two tables
to start with, an employee table and a report

01:22:42.600 --> 01:22:45.290
table.
Let's make the tables and let's put some items

01:22:45.290 --> 01:22:55.739
into the -- put some columns into them.
So here I've used the GWT conventions of specifying

01:22:55.739 --> 01:22:59.760
that this is a server of class, so, therefore,
don't compile it down to JavaScript.

01:22:59.760 --> 01:23:05.340
Let's add some fields.
And we can use the up arrow to save a little

01:23:05.340 --> 01:23:12.860
bit of time.
Let's go and get a report.

01:23:12.860 --> 01:23:16.070
And for something different, let's add a date
field.

01:23:16.070 --> 01:23:19.300
So it's going to be the created date for our
expense report.

01:23:19.300 --> 01:23:24.860
And I think we'll take a Java date for that.
We have the Java back-end taken care of.

01:23:24.860 --> 01:23:28.610
We could run this up.
But let's get a GWT front-end.

01:23:28.610 --> 01:23:31.151
As a result of the integration work we have
been doing, it's super easy to do that.

01:23:31.151 --> 01:23:33.980
All I have to do is type "GWT," press tab
and press enter.

01:23:33.980 --> 01:23:36.870
What's happening now is Roo is going to have
a look at our domain model.

01:23:36.870 --> 01:23:42.230
It's going to turn this into a GWT application.
It looks at all of our columns, all of our

01:23:42.230 --> 01:23:45.960
entities, and does that for us very quickly.
You can run this up in the development mode,

01:23:45.960 --> 01:23:47.530
just like you normally would if you're familiar
with GWT.

01:23:47.530 --> 01:23:50.290
To save a little bit of time, I have done
that for you already.

01:23:50.290 --> 01:23:53.630
This is what the resulting scaffolded application
looks like.

01:23:53.630 --> 01:23:57.489
It's very simple at the moment.
We have the tables that we promised.

01:23:57.489 --> 01:24:05.550
We can go and create a new employee.
And it goes and stores it as we'd expect.

01:24:05.550 --> 01:24:11.320
All the normal sort of cruddy stuff.
What if we wanted a comment column?

01:24:11.320 --> 01:24:14.250
How do we do that?
The good thing is Roo supports full round-tripping.

01:24:14.250 --> 01:24:18.969
We have a tool called Springsource Tool Suite.
This is our free IDE, which you can also download.

01:24:18.969 --> 01:24:24.310
And it has comprehensive Roo integration,
as illustrated by this "Roo" logo at the bottom.

01:24:24.310 --> 01:24:29.630
In order to add an extra column to our database,
you just edit in a normal Java fashion, string

01:24:29.630 --> 01:24:31.611
comment.
And I haven't saved yet, but when I click

01:24:31.611 --> 01:24:35.670
the "save" button, I'd like you to look in
this area down at the bottom of the screen.

01:24:35.670 --> 01:24:40.139
What's happened is, Roo has automatically
detected I've changed my Java class and it's

01:24:40.139 --> 01:24:44.659
gone and updated all the necessary GWT user
bits and pieces.

01:24:44.659 --> 01:24:47.980
In order to see this in action, I go to development
mode, click refresh.

01:24:47.980 --> 01:24:51.870
It's a very fast refresh, only takes about
two seconds, which is unbelievably fast.

01:24:51.870 --> 01:24:59.429
Now if we have a look at data browser, and
we have refreshed the browser, employees,

01:24:59.429 --> 01:25:00.530
and there we have it, we now have a comment
field.

01:25:00.530 --> 01:25:11.310
Just to show you that it works,
and it persists fine.

01:25:11.310 --> 01:25:14.830
So what we've done in just a couple of minutes
is, we've gone from an empty directory, we've

01:25:14.830 --> 01:25:18.530
typed less than 200 characters, and we've
ended up with a GWT front-end scaffolded for

01:25:18.530 --> 01:25:22.670
us with full round-tripping capability.
This is a great way of saving time as you're

01:25:22.670 --> 01:25:25.330
building new GWT applications.
At this point, I am going to hand you back

01:25:25.330 --> 01:25:28.000
to Bruce, who will cover some other integrations
we have added to STS.

01:25:28.000 --> 01:25:39.429
&gt;&gt;Bruce Johnson: Thank you, Ben.
So 200 keystrokes later, we have the basics

01:25:39.429 --> 01:25:42.120
of an application, a scaffolding app that
we can build on.

01:25:42.120 --> 01:25:46.330
You saw STS, the IDE experience.
We have also integrated Google plug-in for

01:25:46.330 --> 01:25:50.320
Eclipse in GWT and (inaudible) right there
in STS so you have all the tools that you

01:25:50.320 --> 01:25:54.680
need right there at your fingertips.
We used that environment to continue iterating

01:25:54.680 --> 01:25:59.780
on the app, using GWT and Roo to continue
to add new features and so on.

01:25:59.780 --> 01:26:05.070
And after a couple of days, turned it into
a pretty real expense reporting app.

01:26:05.070 --> 01:26:11.199
So, you know, added a little bit of UI polish.
And, you know, it's a nice, rich Web application.

01:26:11.199 --> 01:26:14.650
So I keep saying "rich Web application."
What's exciting about that?

01:26:14.650 --> 01:26:18.400
Well, it's a much better user experience.
So let me point out a couple of things.

01:26:18.400 --> 01:26:23.030
First of all, it's very fast.
So I'll refresh just to show you how fast

01:26:23.030 --> 01:26:26.010
it starts.
Ready, one, two, three, refresh.

01:26:26.010 --> 01:26:27.110
Refresh.
Refresh.

01:26:27.110 --> 01:26:29.830
Refresh.
That's drawing the UI and that's getting the

01:26:29.830 --> 01:26:33.840
data, and it's up and running.
That's about 500 milliseconds.

01:26:33.840 --> 01:26:36.340
Not bad.
It's -- part of the reason for that, by the

01:26:36.340 --> 01:26:40.710
way, is that the app is only 100K.
It's optimized JavaScript, as I mentioned,

01:26:40.710 --> 01:26:46.320
that includes even the CSS and the image resources
encoded as data URLs.

01:26:46.320 --> 01:26:49.960
Another nice thing about this style of rich
Web application that runs heavily inside the

01:26:49.960 --> 01:26:55.000
browser is that you don't have that sort of
stuttery Web 1.0 click and wait kind of feel.

01:26:55.000 --> 01:26:58.600
For example, when I want to drill down on
one of these expense reports, I don't have

01:26:58.600 --> 01:27:02.400
to wait for a new page to come up.
I'm going to click this, and you'll see it

01:27:02.400 --> 01:27:07.820
animates and transitions very fluidly.
Right, one, two, three, click.

01:27:07.820 --> 01:27:11.150
And there I have the details.
So this is the way you want to work.

01:27:11.150 --> 01:27:16.590
It keeps users engaged and it helps you speed
 -- basically, speed things up.

01:27:16.590 --> 01:27:20.550
One other nice thing about a rich Web application
is, it gets exactly the data you need right

01:27:20.550 --> 01:27:24.530
when you need it.
In traditional HTML server-side applications,

01:27:24.530 --> 01:27:28.200
you tend to spit out a lot of HTML with data
intermingled, because you're not sure what

01:27:28.200 --> 01:27:31.560
the user might want to see.
But when I have an interactive application,

01:27:31.560 --> 01:27:35.130
I know what the user wants.
So, for example, if I want to see the number

01:27:35.130 --> 01:27:38.881
of people in the engineering department, I'll
click on this triangle and right when I click,

01:27:38.881 --> 01:27:43.330
it will fetch exactly the data that I need
to answer that one user action.

01:27:43.330 --> 01:27:47.889
Click, and then, actually, the network round
trip found two employees, populated the UI,

01:27:47.889 --> 01:27:50.870
and showed them.
And we think that's fantastic.

01:27:50.870 --> 01:27:55.380
It really speeds up the app and makes it feel
more responsive to what you're actually doing.

01:27:55.380 --> 01:28:00.580
Now, if you've been using GWT for a while
 -- and we hope you have -- probably nothing

01:28:00.580 --> 01:28:03.600
I'm saying here, aside from Roo, is actually
new to you.

01:28:03.600 --> 01:28:09.850
You know that you can build these sort of
rich Web applications pretty easily.

01:28:09.850 --> 01:28:13.420
What is still a problem, though, once you
get your app up and working, is how do you

01:28:13.420 --> 01:28:17.060
make sure that it performs well?
Some of these apps get really large and there

01:28:17.060 --> 01:28:21.080
can be bottlenecks inside the browser that
are hard to diagnose.

01:28:21.080 --> 01:28:25.080
So to address this, we created a tool called
Speed Tracer.

01:28:25.080 --> 01:28:28.420
We launched Speed Tracer in December as part
of GWT 2.0.

01:28:28.420 --> 01:28:32.600
And I'll turn on Speed Tracer here.
It's a Chrome extension.

01:28:32.600 --> 01:28:36.530
I'll continue to use the app.
And Speed Tracer is in the background paying

01:28:36.530 --> 01:28:40.060
attention to what I'm doing and recording
information.

01:28:40.060 --> 01:28:42.909
So here I will pause it.
I'm going to zoom out.

01:28:42.909 --> 01:28:48.100
You see this is a nice HTML5 WUSI UI, all
built in GWT, of course.

01:28:48.100 --> 01:28:50.690
I look at the sluggishness graph.
I see a peak.

01:28:50.690 --> 01:28:53.110
That's an area I could optimize if I want
to.

01:28:53.110 --> 01:28:57.159
I'll drill down, and Speed Tracer shows me
this bar which has a lot of stuff going on.

01:28:57.159 --> 01:29:00.719
It tells me down to the millisecond where
time is going.

01:29:00.719 --> 01:29:05.949
So I see that a lot of the time is script
evaluation, but it's also parsing HTML, recalculating

01:29:05.949 --> 01:29:11.610
styles due to CSS changes, doing layout, you
can even see things like garbage collection.

01:29:11.610 --> 01:29:16.290
Basically, there's not even a single millisecond
of time that happens within the browser that

01:29:16.290 --> 01:29:20.690
you cannot find out about in Speed Tracer.
It's like an x-ray machine for your browser's

01:29:20.690 --> 01:29:25.290
guts; right.
But that's not where all the time goes in

01:29:25.290 --> 01:29:28.440
an application.
Sometimes the server is what's actually slow.

01:29:28.440 --> 01:29:34.540
So we realized what we need is a tool that's
sort of like Speed Tracer, but for the server.

01:29:34.540 --> 01:29:38.500
Well, it turns out that tool exists also.
And Springsource had it.

01:29:38.500 --> 01:29:43.230
It's called Spring Insight.
And that tells you on a request-by-request

01:29:43.230 --> 01:29:46.640
basis the timings of various things in the
server.

01:29:46.640 --> 01:29:49.480
As I was using this app, I was gathering Spring
Insight data.

01:29:49.480 --> 01:29:55.900
Here you can drill in and see there was an
HTTP post that did a JDBC select, and I can

01:29:55.900 --> 01:30:00.170
drill down to see even more details.
So if you think it would be neat to combine

01:30:00.170 --> 01:30:05.940
that information with Speed Tracer, we think
alike, because that's exactly what we did.

01:30:05.940 --> 01:30:10.860
And so I'll go back to the network tab here.
And I can see a pretty traditional-looking

01:30:10.860 --> 01:30:15.250
network view, like you might have seen in
Firefox or Webkit Inspector, except now I

01:30:15.250 --> 01:30:20.340
have this nifty icons here that say, hey,
for this request, I have data about timings

01:30:20.340 --> 01:30:26.460
on the server side as well.
And so when I expand this out, I can see the

01:30:26.460 --> 01:30:30.710
HTTP post as the server viewed it and I can
see that there was a JDBC select call that

01:30:30.710 --> 01:30:34.520
happened on the server.
So what we've done, then, is combined all

01:30:34.520 --> 01:30:39.520
the sources of latency, client, network, server,
all into one view inside Speed Tracer.

01:30:39.520 --> 01:30:42.429
It helps you drill down and find any source
of latency whatsoever.

01:30:42.429 --> 01:30:48.780
So Spring Insight comes with the developer
edition of TC Server as part of Springsource

01:30:48.780 --> 01:30:52.550
tools.
And that's great for tuning performance at

01:30:52.550 --> 01:30:58.810
your desktop.
At some point, you feel like it's good enough.

01:30:58.810 --> 01:31:04.080
If you've used Google plug-in for Eclipse,
you know that deploying is really just, essentially,

01:31:04.080 --> 01:31:07.460
a one-button click.
There's an App Engine icon inside Eclipse.

01:31:07.460 --> 01:31:09.929
You click that icon.
It goes to App Engine and continues running

01:31:09.929 --> 01:31:14.050
as it did before.
So we clicked that button.

01:31:14.050 --> 01:31:18.450
And so now we have the same application running
on App Engine.

01:31:18.450 --> 01:31:28.260
And the network is a bit slow.
So this is the same application, same code,

01:31:28.260 --> 01:31:31.070
simple upload.
We've added some additional data to make it

01:31:31.070 --> 01:31:37.610
more realistic.
But if you've ever done any sort of real performance

01:31:37.610 --> 01:31:42.340
tuning, you know the way it works on your
desk is not the way it's going to work in

01:31:42.340 --> 01:31:45.260
production; right?
So you need the same sort of tools we were

01:31:45.260 --> 01:31:49.489
talking about, but you need them to work even
on your production server in the cloud.

01:31:49.489 --> 01:31:53.739
Well, it turns out App Engine introduced something
that's almost exactly like Spring Insight

01:31:53.739 --> 01:31:55.780
two months ago.
It's called app stats.

01:31:55.780 --> 01:32:00.460
And if you've seen app stats, you realize
that, wow, if you could get that data, pull

01:32:00.460 --> 01:32:05.489
that into Speed Tracer, then you could always
do diagnostics and performance tuning, even

01:32:05.489 --> 01:32:08.170
when your code is running in production on
App Engine.

01:32:08.170 --> 01:32:11.440
And, indeed, we did do that and integrated
it back into Speed Tracer.

01:32:11.440 --> 01:32:18.171
So, as you can click around here, use the
app a bit, we'll come back over to Speed Tracer,

01:32:18.171 --> 01:32:25.600
zoom out, take a look at some of the network
events here at the end.

01:32:25.600 --> 01:32:31.179
And -- well, network here is horribly slow.
But you see these icons popping in.

01:32:31.179 --> 01:32:35.770
That indicates that we have App Stats data
integrated back into Speed Tracer.

01:32:35.770 --> 01:32:42.840
Here you can see where we've hit the App Engine
data store.

01:32:42.840 --> 01:32:43.840
So --
[ Applause ]

01:32:43.840 --> 01:32:47.780
&gt;&gt;Bruce Johnson: Thank you, thank you, thank
you.

01:32:47.780 --> 01:32:52.810
That was not really -- I wasn't seeking applause,
I was just gathering my thoughts.

01:32:52.810 --> 01:32:54.900
Although, it is cool, I think.
Okay.

01:32:54.900 --> 01:32:58.520
So these are all tools; right?
We've been talking about the tools, editing,

01:32:58.520 --> 01:33:02.530
debugging, deployment, performance tuning
and so on.

01:33:02.530 --> 01:33:07.310
Tools are definitely a huge part of the story.
But, to be really productive, you also need

01:33:07.310 --> 01:33:12.639
great widget libraries and a great app framework.
Now, we've been a little deficient in the

01:33:12.639 --> 01:33:19.030
widget area in GWT in the sense that people
want easy-to-use widgets that are -- you drop

01:33:19.030 --> 01:33:23.130
them -- or you code them into your app.
It's very easy to connect those widgets to

01:33:23.130 --> 01:33:25.800
data that lives in the cloud or on the database
or so on.

01:33:25.800 --> 01:33:30.639
And they want to make it really easy to connect
widgets to each other with a minimum of glue

01:33:30.639 --> 01:33:34.210
code.
So we've taken this seriously as part of GWT

01:33:34.210 --> 01:33:37.170
2.1.
And so we've got a new set of data presentation

01:33:37.170 --> 01:33:39.270
widgets that we're really, really excited
about.

01:33:39.270 --> 01:33:46.610
Now, if you're like us, you've seen dozens
of AJAX widget demos where they show you the

01:33:46.610 --> 01:33:51.000
kitchen sink; right?
So I wouldn't presume that you'd be especially

01:33:51.000 --> 01:33:54.500
excited to see some new widgets.
So I was thinking about how I can actually

01:33:54.500 --> 01:33:59.929
make you interested in this anyway.
So I said, well, we know that these widgets

01:33:59.929 --> 01:34:04.040
have been designed to be lightweight, fast,
small, and work with massive data sets.

01:34:04.040 --> 01:34:09.480
But let me actually figure out a way to convince
you that it actually works that well.

01:34:09.480 --> 01:34:13.150
I said to the team, like, "Hey, let's do some
ridiculous amount of data, like 18 million

01:34:13.150 --> 01:34:16.180
records and show that everything still works
fast."

01:34:16.180 --> 01:34:22.239
I was joking, but they took me seriously.
So yesterday, I think the latest numbers were,

01:34:22.239 --> 01:34:31.489
we had filled this database full of 125,000
employees, 5,000 expense reports, each of

01:34:31.489 --> 01:34:35.300
which has multiple line items, for a total
of about 20 million line items.

01:34:35.300 --> 01:34:41.949
So a nontrivial amount of data, I think 125,000
employees for an expense report app is probably

01:34:41.949 --> 01:34:45.460
towards the high end.
So now I want you to take a look at the widgets

01:34:45.460 --> 01:34:49.850
and think about how this app is performing,
knowing that we're working against a database

01:34:49.850 --> 01:34:53.960
with, you know, 20 million-plus records.
Okay?

01:34:53.960 --> 01:34:58.520
So what sort of things do you want to do?
Let's see.

01:34:58.520 --> 01:35:05.510
I'll -- I'll page.
And here I'm paging through 5 million records,

01:35:05.510 --> 01:35:10.170
expense reports.
Try this yourself.

01:35:10.170 --> 01:35:15.030
Because on a noncongested wireless, you'll
find that it pages about as fast as you'd

01:35:15.030 --> 01:35:19.610
want it to.
Actually, this does sort of undermine my point,

01:35:19.610 --> 01:35:20.699
doesn't it?
[ Laughter ]

01:35:20.699 --> 01:35:36.550
&gt;&gt;Bruce Johnson: Wired.
We'll see if the wired connection kicks in.

01:35:36.550 --> 01:35:39.610
Am I brave enough to do this?
Yeah.

01:35:39.610 --> 01:35:40.850
Okay.
[ Applause ]

01:35:40.850 --> 01:35:48.639
&gt;&gt;Bruce Johnson: Much better; right?
So that was what you were supposed to get

01:35:48.639 --> 01:35:51.050
excited about.
Everybody needs to page through 5 million

01:35:51.050 --> 01:35:54.300
records.
And when you do that, you want it to be fast.

01:35:54.300 --> 01:35:57.429
Okay.
So sorting is often done.

01:35:57.429 --> 01:36:01.810
So you click on the header and you want to
sort quickly.

01:36:01.810 --> 01:36:03.830
Quickly.
Sort by date.

01:36:03.830 --> 01:36:08.310
You know, I mean, we're talking about seconds,
which seems like a long time in demos, but

01:36:08.310 --> 01:36:12.980
when you think about sorting 5 million records
inside your own company, if you have to wait

01:36:12.980 --> 01:36:15.699
a couple seconds, not too bad.
As you can see, as it warms up through more

01:36:15.699 --> 01:36:20.941
use, it gets faster and faster and faster.
Okay.

01:36:20.941 --> 01:36:25.750
So maybe I want to narrow down by department.
Right now, they're all intermingled.

01:36:25.750 --> 01:36:29.969
I click on that, and I'm looking, among the
5 million, the ones that are just in engineering,

01:36:29.969 --> 01:36:35.130
or maybe finance, or maybe marketing.
Maybe I want to drill down to an individual

01:36:35.130 --> 01:36:38.630
person, also very fast.
Right?

01:36:38.630 --> 01:36:42.679
You saw before how quickly we can jump into
the details of any person we pick among the

01:36:42.679 --> 01:36:45.600
20 million line items.
All right.

01:36:45.600 --> 01:36:51.679
Another neat feature is the ability to search
and highlight within the page.

01:36:51.679 --> 01:36:56.870
So here we see a lot of expense reports with
W slash, so I'll type on a keystroke-by-keystroke,

01:36:56.870 --> 01:37:02.830
you'll see it matching the records in the
current page, W, space, slash, Z.

01:37:02.830 --> 01:37:05.530
That keeps up with me.
That's fantastic.

01:37:05.530 --> 01:37:10.350
And now I can press enter, and it will do
an actual query that will give me back a result

01:37:10.350 --> 01:37:13.351
set that matches my search term.
So I'm going to press "enter."

01:37:13.351 --> 01:37:18.180
One, two, three, enter.
And now, among the 5 million expense reports,

01:37:18.180 --> 01:37:23.330
I am getting the ones that match my search
term and I can continue to page through those

01:37:23.330 --> 01:37:26.300
at my leisure.
[ Applause ]

01:37:26.300 --> 01:37:35.300
&gt;&gt;Bruce Johnson: Thanks.
Okay.

01:37:35.300 --> 01:37:39.679
Quick refresh of where we are.
A few minutes ago, you saw a start with a

01:37:39.679 --> 01:37:43.869
empty directory. In less than 200 keystrokes,
we had the scaffolding app.

01:37:43.869 --> 01:37:47.660
We used the tools that now are integrated
and that work really well together, spent

01:37:47.660 --> 01:37:51.400
a couple of days to create a more full-feature
application.

01:37:51.400 --> 01:37:55.929
We tuned it on the desktop, using Spring Insight
and Speed Tracer.

01:37:55.929 --> 01:38:00.191
With one click, we deployed it to App Engine.
We continue to tune it using Speed Tracer

01:38:00.191 --> 01:38:04.520
plus App Stats.
And we uploaded a massive amount of data.

01:38:04.520 --> 01:38:07.380
It literally took a couple of days to get
that much data in the database, as a matter

01:38:07.380 --> 01:38:11.420
of fact.
And the app still runs exactly like you'd

01:38:11.420 --> 01:38:14.659
want it to.
We think that's pretty cool.

01:38:14.659 --> 01:38:22.519
And we're excited for you guys to try these
tools yourself.

01:38:22.519 --> 01:38:25.719
[ Applause ]
&gt;&gt;David Glazer: Thank you, Bruce.

01:38:25.719 --> 01:38:28.429
Thank you, Ben.
If you want to learn more, there are sessions.

01:38:28.429 --> 01:38:32.161
You can find them on your Android app, you
can find them in the schedule where you can

01:38:32.161 --> 01:38:34.750
listen to the sessions and talk to the engineers
afterwards.

01:38:34.750 --> 01:38:38.780
What you just saw is not just a pretty cool
app built on stage.

01:38:38.780 --> 01:38:44.440
What you also saw is the tools to let you
build those kind of app was that kind of performance

01:38:44.440 --> 01:38:50.060
for your company, your needs, your use cases.
Well, the second promise we made is, we were

01:38:50.060 --> 01:38:55.679
going to show you how to make those apps mobile-ready.
I'm happy to say that that exact same widget

01:38:55.679 --> 01:39:01.239
library that Bruce just showed you, and showed
you how well it performs on a laptop at work,

01:39:01.239 --> 01:39:06.070
that same widget library is ready for mobile
devices, makes it much easier to take one

01:39:06.070 --> 01:39:10.719
application and say, "I want to access this
data from all the devices I'm using, from

01:39:10.719 --> 01:39:16.219
tablets, from phones," which matches the real-world
use needs for applications like this.

01:39:16.219 --> 01:39:21.110
To show you how this works, I'm going to ask
Ben and Bruce to come back up, and show you

01:39:21.110 --> 01:39:28.000
the same expense app how it runs on Mobile
devices using the same widget libraries.

01:39:28.000 --> 01:39:38.380
&gt;&gt;&gt; Hello, again.
&gt;&gt;Bruce Johnson: All the cool widgets against

01:39:38.380 --> 01:39:41.409
a massive data set.
That was all in a desktop browser.

01:39:41.409 --> 01:39:46.540
But if your companies are like Google, chances
are people are not at their desks all the

01:39:46.540 --> 01:39:49.340
time.
They have all these great new mobile devices.

01:39:49.340 --> 01:39:53.139
And you want to make sure these apps work
well and are available on the device that

01:39:53.139 --> 01:39:58.420
your users happen to actually be using.
Well, as it turns out, when we designed these

01:39:58.420 --> 01:40:01.510
news widgets that I was just bragging about,
we made sure from the beginning that they

01:40:01.510 --> 01:40:06.261
worked particularly well on mobile devices,
you know, you have to think about mobile devices

01:40:06.261 --> 01:40:11.030
are typically slower CPUs to save battery.
You have slower network connections and so

01:40:11.030 --> 01:40:15.270
on.
So to show you these widgets in action on

01:40:15.270 --> 01:40:19.960
mobile devices, we took the expense report
app that you saw, we customized it just a

01:40:19.960 --> 01:40:24.949
little bit to adapt it to each of a couple
of different devices, and so here I've got

01:40:24.949 --> 01:40:31.699
an iPad.
So this is the same app.

01:40:31.699 --> 01:40:37.070
Let me connect to the network here.
This wireless network is my friend.

01:40:37.070 --> 01:40:42.530
And it works the same way that you would expect
it to from the -- from what you saw previously.

01:40:42.530 --> 01:40:46.930
And it does all -- you know, small adaptations
so that it feels more appropriate for the

01:40:46.930 --> 01:40:49.429
device.
So, you know, finger-dragging and things like

01:40:49.429 --> 01:40:51.800
that.
But I can still page just the same way.

01:40:51.800 --> 01:40:57.110
Basically, the same app, I'm reusing almost
all the same code.

01:40:57.110 --> 01:41:02.510
So that is on an iPad.
And Ben has a version that is running on Android.

01:41:02.510 --> 01:41:04.840
&gt;&gt;Ben Alex: Indeed.
And I've run this Android version.

01:41:04.840 --> 01:41:08.239
We have the same sort of UI gestures that
you'd be expecting.

01:41:08.239 --> 01:41:10.980
And we have a nice interface.
It's very easy to use.

01:41:10.980 --> 01:41:14.590
So we thought what we'd do is show you how
it works and you'll see some of the cool features

01:41:14.590 --> 01:41:17.730
in the new widgets.
So why don't I log in an expense report.

01:41:17.730 --> 01:41:22.449
I've been here at Google I/O, actually for
a week now, but working really hard, really

01:41:22.449 --> 01:41:24.440
late hours.
So I'm going to have dinner and I think I'm

01:41:24.440 --> 01:41:43.780
going to log on an expense report and have
a good dinner.

01:41:43.780 --> 01:41:51.610
Wi-Fi.
So we type in "dinner."

01:41:51.610 --> 01:42:01.070
And I've had a good dinner.
So let's finish typing it.

01:42:01.070 --> 01:42:03.219
$150.
Excellent.

01:42:03.219 --> 01:42:10.179
So I must qualify.
I'm not sure Wi-Fi is going to work for us

01:42:10.179 --> 01:42:12.150
at the moment.
So we should see this work.

01:42:12.150 --> 01:42:15.440
But we disclaim.
So I'm going to hit the "done" key on the

01:42:15.440 --> 01:42:18.780
count of three.
One, two, three.

01:42:18.780 --> 01:42:23.210
And have a look over at Bruce's machine.
We'll see if Wi-Fi is being good to us.

01:42:23.210 --> 01:42:33.421
&gt;&gt;Bruce Johnson: Double-check the done.
Are you sure you nailed that?

01:42:33.421 --> 01:42:41.910
We probably should enlarge those buttons the
next time we do this.

01:42:41.910 --> 01:42:52.700
&gt;&gt;Ben Alex: Let's connect.
&gt;&gt;Bruce Johnson: It's worth waiting for.

01:42:52.700 --> 01:42:55.800
&gt;&gt;Ben Alex: It's worth waiting for.
It's a great demo.

01:42:55.800 --> 01:43:01.739
Back to Internet.
So let's try this again.

01:43:01.739 --> 01:43:04.159
Refresh.
[ Laughter ]

01:43:04.159 --> 01:43:08.860
&gt;&gt;Ben Alex: We can't plug Ethernet into these,
unfortunately.

01:43:08.860 --> 01:43:14.650
&gt;&gt;Bruce Johnson: If this doesn't come back
in a second, we will describe to you in extreme

01:43:14.650 --> 01:43:22.489
detail, pixel by pixel what you would be seeing,
were the network not completely overloaded

01:43:22.489 --> 01:43:25.940
right now.
In fact, maybe we should just do that.

01:43:25.940 --> 01:43:32.239
Let's do one last attempt.
&gt;&gt;Ben Alex: One last try.

01:43:32.239 --> 01:43:37.170
&gt;&gt;Bruce Johnson: We should use that HTML5
app cache feature.

01:43:37.170 --> 01:43:44.880
The whole point, actually, is that you see
two different values much the app here, and

01:43:44.880 --> 01:43:50.800
both of the apps are live.
Let's -- okay, let's see if we can pull this

01:43:50.800 --> 01:43:52.590
off.
&gt;&gt;Ben Alex: No.

01:43:52.590 --> 01:43:53.930
Hang on.
Okay.

01:43:53.930 --> 01:43:57.600
Here we go.
So delete the last two minutes.

01:43:57.600 --> 01:44:00.270
&gt;&gt;Bruce Johnson: Okay.
&gt;&gt;Ben Alex: Okay.

01:44:00.270 --> 01:44:02.810
So I've been working hard at Google I/O.
Rewind.

01:44:02.810 --> 01:44:05.119
And I've been working hard and had a nice
dinner.

01:44:05.119 --> 01:44:08.951
Let's try to add the dinner together and you
will be able to see these new widgets in action.

01:44:08.951 --> 01:44:16.820
Let's press the plus key.
And it was dinner.

01:44:16.820 --> 01:44:18.510
And as I said earlier, we've been having a
good dinner.

01:44:18.510 --> 01:44:29.170
The joys of working late.
And what we wanted to show you -- it does

01:44:29.170 --> 01:44:32.790
require Internet, so -- I'm going to press
"done" on the count of three.

01:44:32.790 --> 01:44:36.449
One, two, three.
And have a look over at Bruce's screen.

01:44:36.449 --> 01:44:41.050
[ Laughter ]
[ Applause ]

01:44:41.050 --> 01:44:54.860
&gt;&gt;Bruce Johnson: Yay!
Yay, yay, yay!

01:44:54.860 --> 01:45:00.020
Okay.
So you saw that pop in.

01:45:00.020 --> 01:45:02.130
Now, I -- and I like that.
I like that.

01:45:02.130 --> 01:45:07.940
But what I do not like, as Ben's pretend manager
here, is $150 for dinner, because I had assumed

01:45:07.940 --> 01:45:10.590
he was going to go fast food.
This is not working for me at all.

01:45:10.590 --> 01:45:17.060
So I'm going to deny this.
And I am going to say that you, Ben, are nuts.

01:45:17.060 --> 01:45:20.501
I don't know if you can read that.
It says, "You are nuts."

01:45:20.501 --> 01:45:25.790
I'm going to confirm.
And one, two, three, we should see, network

01:45:25.790 --> 01:45:30.469
willing, that Ben has been now updated in
real time, and --

01:45:30.469 --> 01:45:37.040
[ Applause ]
&gt;&gt;Bruce Johnson: So -- versus your normal

01:45:37.040 --> 01:45:40.170
expense report cycle where your boss sits
on it for six weeks.

01:45:40.170 --> 01:45:45.040
&gt;&gt;Ben Alex: Dinner was rejected?
Good thing I'm still here.

01:45:45.040 --> 01:45:48.510
So I am nuts.
Let's amend it, then.

01:45:48.510 --> 01:45:51.889
Let's go and edit.
Let's backtrack.

01:45:51.889 --> 01:45:59.980
And I'm not going to round the bill up this
time.

01:45:59.980 --> 01:46:03.860
$148.
And because I can't calculate tax here in

01:46:03.860 --> 01:46:08.050
California, because I'm from Australia -- I
don't know what the total will be, but $148.13.

01:46:08.050 --> 01:46:13.420
Done on the count of three, one, two, three.
And --

01:46:13.420 --> 01:46:24.969
&gt;&gt;Bruce Johnson: Come on.
You can do it.

01:46:24.969 --> 01:46:28.190
Yes, yes, yes, yes, yes.
That's -- oh, $148.13.

01:46:28.190 --> 01:46:32.310
Now, that is a different story.
I mean, that's nothing.

01:46:32.310 --> 01:46:34.070
That's chump change.
Sure, no problem, Ben.

01:46:34.070 --> 01:46:35.580
Ben, thank you.
That was fantastic.

01:46:35.580 --> 01:46:39.000
So, anyway, aside from the network glitches,
 --

01:46:39.000 --> 01:46:46.900
[ Applause ]
&gt;&gt;Bruce Johnson: -- let's talk about the whole

01:46:46.900 --> 01:46:52.991
arc that you have just seen; right.
We started with an empty directory, 200 keystrokes

01:46:52.991 --> 01:46:56.590
later, you have an app, you have a powerful
set of tools that helps you iterate quickly.

01:46:56.590 --> 01:47:01.860
You have a nice widget library, an app framework
to help you build apps that work very responsively,

01:47:01.860 --> 01:47:05.330
even against huge data sets that are running
in the cloud.

01:47:05.330 --> 01:47:09.739
You've got performance-tuning tools that are
great for diagnostics, both on your desktop

01:47:09.739 --> 01:47:14.530
and in the cloud.
And then you've got the knowledge that these

01:47:14.530 --> 01:47:17.310
applications that you're building with the
tools that we're talking about here can be

01:47:17.310 --> 01:47:21.170
easily adapted to all the different mobile
devices that your users are actually using.

01:47:21.170 --> 01:47:24.540
We hope you'll try these out.
We're really excited about all of these things

01:47:24.540 --> 01:47:26.840
that are coming in GWT 2.1 and Spring Roo
and STS.

01:47:26.840 --> 01:47:30.130
A lot of great stuff.
Please do download it and let us know what

01:47:30.130 --> 01:47:31.130
you think.
Thank you.

01:47:31.130 --> 01:47:34.150
&gt;&gt;Ben Alex: Thanks.
[ Applause ]

01:47:34.150 --> 01:47:39.620
&gt;&gt;David Glazer: Thanks, guys.
And, again, if you want to hear more, want

01:47:39.620 --> 01:47:43.619
to see these things in action, try them yourself,
the sessions, attend the session, talk to

01:47:43.619 --> 01:47:46.460
the engineers, download the code.
You can build apps like that.

01:47:46.460 --> 01:47:50.250
You can have your own demo fun with your own
applications that you've built on these open

01:47:50.250 --> 01:47:54.750
tools, do your own innovation.
The third thing we said we were going to show

01:47:54.750 --> 01:47:57.739
you is flexible deployment.
We've been showing you how to build these

01:47:57.739 --> 01:47:59.900
great Web apps.
But what do you do when you build them?

01:47:59.900 --> 01:48:05.320
How do you make sure you're not locked into
one architecture when you build them?

01:48:05.320 --> 01:48:08.530
The answer is, because you're building on
open standards, you're not locked in.

01:48:08.530 --> 01:48:13.139
You've actually been seeing over the last
few demos, you have been seeing cloud portability

01:48:13.139 --> 01:48:16.760
in action.
The first few demos you saw built with one

01:48:16.760 --> 01:48:22.139
tool stack, open standards, were running on
a development server right here on the development

01:48:22.139 --> 01:48:24.080
box.
You then saw some demos.

01:48:24.080 --> 01:48:28.950
When Bruce started showing you Speed Tracer
using Insight, you saw those same demos, same

01:48:28.950 --> 01:48:36.800
application, deployed to a virtual machine
running on a VMWare instance, using TC Server.

01:48:36.800 --> 01:48:42.119
And then you saw some of the same demos running
on Google App Engine, same application.

01:48:42.119 --> 01:48:45.600
Using Google App Engine, you saw Speed Tracer
tracing across that.

01:48:45.600 --> 01:48:50.310
How do you as a developer make that decision?
What do you change in your app to do these

01:48:50.310 --> 01:48:52.770
different deployments?
Well, Bruce showed you, if you want to deploy

01:48:52.770 --> 01:48:56.869
your app to Google App Engine, you're in Eclipse,
using the tool set, you click on the button.

01:48:56.869 --> 01:49:01.260
You're deployed to Google App Engine.
But because this app is built on the open

01:49:01.260 --> 01:49:07.000
standards, the Java container API, Java persistence
API, if you want to deploy to any of the other

01:49:07.000 --> 01:49:13.100
open standard-supporting environments, drag,
drop, deploy your project to any server that

01:49:13.100 --> 01:49:16.349
supports these standards behind your firewall,
in the cloud.

01:49:16.349 --> 01:49:22.540
It all just works, because open standards
lead to innovation.

01:49:22.540 --> 01:49:27.160
So we've shown you how to use familiar tools
to build apps quickly, how to have those apps

01:49:27.160 --> 01:49:31.400
work everywhere you want, both every device
you want, and deploy them on every architecture

01:49:31.400 --> 01:49:33.330
you want.
That means you're now going to have a lot

01:49:33.330 --> 01:49:36.250
of apps.
And if you have a lot of apps, you need to

01:49:36.250 --> 01:49:39.230
have tools to manage your applications in
the cloud.

01:49:39.230 --> 01:49:43.690
I'd like to welcome Kevin Gibbs, the lead
of the Google AppEngine team to show you what's

01:49:43.690 --> 01:49:49.860
happening in Google App Engine to help you
work with all the applications that you need.

01:49:49.860 --> 01:50:02.489
&gt;&gt;Kevin Gibbs: Thanks, everybody.
Now, today, you've seen some examples of Google's

01:50:02.489 --> 01:50:08.449
approach to helping with enterprise software.
Now, we don't believe in silver bullets or

01:50:08.449 --> 01:50:11.860
single solutions.
But, instead, we believe in looking at the

01:50:11.860 --> 01:50:16.469
productivity of your company as a whole and
seeing what we can do to help.

01:50:16.469 --> 01:50:21.610
Now, one area that we've noticed is a growing
productivity problem for a lot of you out

01:50:21.610 --> 01:50:26.699
there is managing all of the applications
of your company.

01:50:26.699 --> 01:50:31.060
Companies grow, engineering teams change,
servers move.

01:50:31.060 --> 01:50:35.580
As all of that happens, it becomes increasingly
difficult to manage all of the applications

01:50:35.580 --> 01:50:40.070
at your company.
As your company grows from having a few Internet

01:50:40.070 --> 01:50:46.670
apps to having hundreds, and from ten employees
to thousands, managing that whole ecosystem

01:50:46.670 --> 01:50:51.810
and keeping it healthy becomes an increasingly
large challenge for you.

01:50:51.810 --> 01:50:56.639
So at Google, we thought about this problem.
And we wanted to do something to help.

01:50:56.639 --> 01:51:01.011
Of course, since it has to do with hosting,
we looked to Google App Engine, Google's hosting

01:51:01.011 --> 01:51:06.310
offering, which already serves over 100,000
applications that are used every single week.

01:51:06.310 --> 01:51:13.070
But as we try to use App Engine to help with
enterprise software, we noticed that there

01:51:13.070 --> 01:51:19.030
were some challenges to getting started.
As Google moved over its own I.T. infrastructure

01:51:19.030 --> 01:51:25.230
to App Engine and as we talked to our employees,
our customers, and VMWare, it became increasingly

01:51:25.230 --> 01:51:29.920
clear to us that the public cloud in general,
and Google's cloud in particular had some

01:51:29.920 --> 01:51:35.619
barriers to writing enterprise software.
We heard that you needed something that was

01:51:35.619 --> 01:51:39.290
more reliable.
We heard that you needed something that came

01:51:39.290 --> 01:51:43.530
with support.
We heard you needed something with key features

01:51:43.530 --> 01:51:48.640
that your enterprise can't live without.
We heard that you needed a better way to manage

01:51:48.640 --> 01:51:53.130
all of these applications in the cloud, and
a way that would seem like the best possible

01:51:53.130 --> 01:51:59.260
solution both to the engineers at your company,
as well as the I.T. administrators.

01:51:59.260 --> 01:52:02.940
And, finally, we thought that you needed a
better way to pay for all of this.

01:52:02.940 --> 01:52:06.989
Having a single engineering team sign up with
a credit card each time you want to create

01:52:06.989 --> 01:52:12.860
an app, it's not a very scalable solution.
So we took these problems to heart, and over

01:52:12.860 --> 01:52:17.190
the past year, we made investments to try
to fix these problems.

01:52:17.190 --> 01:52:22.889
And thus, today's, I'm really excited to announce
to you a new product, Google App Engine for

01:52:22.889 --> 01:52:27.199
Business.
Google App Engine for Business represents

01:52:27.199 --> 01:52:31.340
a new version of App Engine that was built
from the ground up around solving the real

01:52:31.340 --> 01:52:36.719
problems that enterprises face.
It's composed of five features that we believe

01:52:36.719 --> 01:52:41.010
any business needs to build its infrastructure
on App Engine.

01:52:41.010 --> 01:52:47.349
Those features are, one, a new company-centric
management console which makes it easy for

01:52:47.349 --> 01:52:53.449
you to see, manage, and set security policies
across all of the applications in your domain.

01:52:53.449 --> 01:52:59.139
Two, it comes with professional support so
that when it's crunch time and you need help

01:52:59.139 --> 01:53:04.080
with your application, you know that there's
someone out there that you can reach.

01:53:04.080 --> 01:53:08.660
It also comes with a formal service-level
agreement, or SLA, for the first time with

01:53:08.660 --> 01:53:10.909
App Engine.
That means we're putting our money where our

01:53:10.909 --> 01:53:13.960
mouth is when it comes to the reliability
of your business.

01:53:13.960 --> 01:53:19.489
And, finally, it also comes with two additional
key features that we had heard almost every

01:53:19.489 --> 01:53:26.659
enterprise needs: SSL for your company's domain,
and SQL databases.

01:53:26.659 --> 01:53:27.659
That's right.
[ Applause ]

01:53:27.659 --> 01:53:32.320
&gt;&gt;Kevin Gibbs: You heard me right.
When Google App Engine for Business is completely

01:53:32.320 --> 01:53:37.060
available, you'll have the choice of using
our scalable data store, which is built on

01:53:37.060 --> 01:53:42.110
Bigtable, or a standard SQL database.
We know that these features are critical to

01:53:42.110 --> 01:53:46.719
enterprise adoption.
And, finally, Google App Engine for Business

01:53:46.719 --> 01:53:52.040
also comes with a new way to pay for App Engine,
a new pricing model that's based around something

01:53:52.040 --> 01:53:56.010
that's simple, your applications and your
users.

01:53:56.010 --> 01:54:00.780
But, you know, I actually think the greatest
thing about Google App Engine for Business

01:54:00.780 --> 01:54:05.400
is that it's based on the success that we've
already had with Google App Engine, a product

01:54:05.400 --> 01:54:10.760
that's over a half a billion daily page views
strong and still growing.

01:54:10.760 --> 01:54:15.119
It comes with all of the features that you
already know and love about Google App Engine:

01:54:15.119 --> 01:54:21.869
Its standard Python and Java programming environments;
that it's easy to use and easy to scale, including

01:54:21.869 --> 01:54:26.389
that it's free to get started.
With Google App Engine for Business, anyone

01:54:26.389 --> 01:54:31.840
in your company can create an application,
develop it and test it, all for free.

01:54:31.840 --> 01:54:37.550
When they're ready to share it with their
whole company, they just press "publish."

01:54:37.550 --> 01:54:42.820
Now, I mentioned to you that Google App Engine
for Business comes with a new pricing model.

01:54:42.820 --> 01:54:47.010
We had heard that our current pricing model
for App Engine is fairly complex, especially

01:54:47.010 --> 01:54:51.540
for the enterprise use case.
So we wanted to do something simple.

01:54:51.540 --> 01:54:56.929
We took a note from Google Apps for your domain.
The pricing for Google App Engine for Business

01:54:56.929 --> 01:55:02.800
is really easy to understand.
Your applications cost $8 per user, up to

01:55:02.800 --> 01:55:08.440
a maximum of $1,000 per application per month.
That's it.

01:55:08.440 --> 01:55:11.980
There are no other fees or charges for you
to understand.

01:55:11.980 --> 01:55:16.949
If you use your application within your domain,
your usage is unlimited and you can create

01:55:16.949 --> 01:55:21.910
as many applications as you'd like.
That means with App Engine for Business, you

01:55:21.910 --> 01:55:26.710
don't have to worry about the cost of your
data center, the cost of your management console,

01:55:26.710 --> 01:55:30.380
the cost of your licenses and usage, all of
those things.

01:55:30.380 --> 01:55:35.750
It's one simple price.
You know, we talked to a lot of CIOs when

01:55:35.750 --> 01:55:39.630
we were working on this.
And we heard from many of you were spending

01:55:39.630 --> 01:55:44.940
60% of your enterprise I.T. budget just keeping
the lights on.

01:55:44.940 --> 01:55:49.130
Well, with Google App Engine for Business,
we think we can get that down to zero.

01:55:49.130 --> 01:55:51.580
And we're putting our money where our mouth
is.

01:55:51.580 --> 01:55:58.780
If your application in App Engine for Business
has no usage, you don't pay a dime.

01:55:58.780 --> 01:56:01.880
Now, that's been a lot of me talking about
this new product.

01:56:01.880 --> 01:56:06.800
I'd like to now actually show it to you.
I'd like to show you how the management console

01:56:06.800 --> 01:56:10.909
in Google App Engine for Business makes it
easier for you to scale your company in terms

01:56:10.909 --> 01:56:15.610
of the number of applications that you have
from the point of view of an engineer, an

01:56:15.610 --> 01:56:22.170
I.T. admin, and a CIO.
So let me get started.

01:56:22.170 --> 01:56:33.230
Bruce, I might need your help to log in here.
Thanks, Bruce.

01:56:33.230 --> 01:56:39.940
All right.
So let me go ahead and open it up.

01:56:39.940 --> 01:56:43.520
I'm going to open the management console for
App Engine for Business.

01:56:43.520 --> 01:56:47.849
Now, for the purposes of this demo, we've
created an example company, The Surly Butcher

01:56:47.849 --> 01:56:54.719
Corporation.
So I'm going to go ahead and log in as a developer

01:56:54.719 --> 01:56:58.099
there.
Now, if you've used App Engine before, this

01:56:58.099 --> 01:57:00.920
screen should be familiar.
It's our normal list of the applications that

01:57:00.920 --> 01:57:05.000
you work on as an engineer at the company.
But as you go to create an application, you'll

01:57:05.000 --> 01:57:11.180
notice there are a few things that are different.
One, you'll find that it's easier to find

01:57:11.180 --> 01:57:15.920
an application identifier for the apps that
you want to create because these application

01:57:15.920 --> 01:57:17.369
identifiers are limited to being within your
business.

01:57:17.369 --> 01:57:23.310
So you no longer have to hunt around for one
in the global name space across Google.

01:57:23.310 --> 01:57:27.200
You'll also notice that we've got a little
 -- a different host name listed here, rather

01:57:27.200 --> 01:57:31.360
than appspot.com.
When you create an application on Google App

01:57:31.360 --> 01:57:35.159
Engine for Business, it's automatically mapped
into your company's domain.

01:57:35.159 --> 01:57:39.619
You don't have to do any DNS setup or do any
virtual host or anything like that.

01:57:39.619 --> 01:57:42.420
It just works with your company's domain name
and brand.

01:57:42.420 --> 01:57:46.989
Now, I'm going to step back here for a second,
and I'm going to go to an application that

01:57:46.989 --> 01:57:51.849
I deployed this morning, which is a sample
blog for The Surly Butcher Company.

01:57:51.849 --> 01:57:57.030
So I'm going to open that up for you.
But before I do, I'm going to go in the background,

01:57:57.030 --> 01:58:02.830
and I'm going to go log out of App Engine.
So I should be logged out now.

01:58:02.830 --> 01:58:04.670
Now I'm going to go ahead and open up the
blog.

01:58:04.670 --> 01:58:10.560
There we go.
And you can see it asked me to log back in.

01:58:10.560 --> 01:58:13.680
That's because Google App Engine for Business
has security default.

01:58:13.680 --> 01:58:21.949
They are set by the domain administrator,
and developers can't change them without permission.

01:58:21.949 --> 01:58:26.159
That means that you can be sure your Internet
apps are safe.

01:58:26.159 --> 01:58:29.120
So let me go ahead and log into the simple
app.

01:58:29.120 --> 01:58:34.790
So there we go.
There's the company's simple blog.

01:58:34.790 --> 01:58:39.409
You can see it's hosted on the company's domain
name, and I didn't have to set anything up.

01:58:39.409 --> 01:58:45.220
So I'm going to go back to the application
view within the admin console.

01:58:45.220 --> 01:58:47.560
Now, as I said before, this view should be
familiar to you.

01:58:47.560 --> 01:58:50.949
This is the standard view you see in App Engine.
It will be the apps you work on.

01:58:50.949 --> 01:58:55.060
But because this is a company, you'll notice
there's a new link up here which gives me

01:58:55.060 --> 01:58:58.159
a link to all of the applications for this
company.

01:58:58.159 --> 01:59:03.520
As I click on that, I can now see every application
that has been created within my company.

01:59:03.520 --> 01:59:07.761
And for each application, I can see the applications
that I have access to and the ones that I

01:59:07.761 --> 01:59:11.540
don't.
This helps your developers collaborate across

01:59:11.540 --> 01:59:16.060
your company.
Now, one application that I work on inside

01:59:16.060 --> 01:59:20.410
this company is the TechStop application.
This is one we use for our I.T. help desk

01:59:20.410 --> 01:59:24.840
for the company.
When I open up this application, though, you'll

01:59:24.840 --> 01:59:30.440
see the familiar dashboard.
But you'll notice there's a new tab under

01:59:30.440 --> 01:59:33.239
"permissions."
With App Engine for Business, you can control

01:59:33.239 --> 01:59:37.040
who has access to which application and what
level of access they have.

01:59:37.040 --> 01:59:40.340
Now, for this application, you can see I'm
listed as a developer.

01:59:40.340 --> 01:59:42.610
And that means that I have pretty much full
rights.

01:59:42.610 --> 01:59:47.260
I can view the logs of this application.
I can go and deploy a new version of the application.

01:59:47.260 --> 01:59:51.830
And I can go into the data store viewer for
the app and create new data or change data.

01:59:51.830 --> 01:59:58.219
But if I go back to a list of applications,
I can see that there are some apps that I

01:59:58.219 --> 02:00:02.750
don't have all the same level of privileges.
So if I open up our company's code review

02:00:02.750 --> 02:00:07.889
application where we audit the code that we
work on, I can see that for this application,

02:00:07.889 --> 02:00:11.770
I'm only listed as a viewer.
That means I can get to this dashboard and

02:00:11.770 --> 02:00:17.440
view logs, but if I go to the data store viewer,
I can't change any data in the app and I can't

02:00:17.440 --> 02:00:21.540
deploy a new version.
So this helps you manage within your company

02:00:21.540 --> 02:00:26.670
and manage the data that you're working on
and the safety permissions with your company.

02:00:26.670 --> 02:00:30.001
Now, if I jump back to the list of applications,
you'll see that there are some that I have

02:00:30.001 --> 02:00:33.719
no access to at all.
These applications are ones that I'm just

02:00:33.719 --> 02:00:36.760
not a developer on.
And if I click on one, you'll see I have no

02:00:36.760 --> 02:00:38.989
access.
I can request access, though.

02:00:38.989 --> 02:00:41.719
And I'll e-mail the developers to let me on
if I can.

02:00:41.719 --> 02:00:44.909
Now, I said I was going to show you one other
thing.

02:00:44.909 --> 02:00:49.989
And that was showing you that -- how a domain
administrator or CIO looks at all of this.

02:00:49.989 --> 02:00:55.260
So I'm going to sign out quickly.
And I'm going to sign back in as someone who

02:00:55.260 --> 02:01:04.369
is a domain administrator at this company.
So let me do that.

02:01:04.369 --> 02:01:08.150
Now, as a domain administrator, I don't actually
have any applications, 'cause I don't write

02:01:08.150 --> 02:01:11.929
code anymore.
But when I go to a list of all of the applications

02:01:11.929 --> 02:01:15.280
for the company, you can see I have full access
to all of them.

02:01:15.280 --> 02:01:19.550
And that means I can go to any app, grant
developer access or remove a developer who

02:01:19.550 --> 02:01:24.400
has left the company and handle situations
like that.

02:01:24.400 --> 02:01:30.280
So that's the demo of App Engine for Business.
Now I want to make one thing clear: Google

02:01:30.280 --> 02:01:33.790
App Engine for Business represents a major
new effort from Google.

02:01:33.790 --> 02:01:39.179
It's a big new thing that we're doing.
Today, I'm announcing App Engine for Business.

02:01:39.179 --> 02:01:44.480
It's not yet entirely available for everyone
to use, but we know that enterprise development

02:01:44.480 --> 02:01:48.330
schedules take time and that you need time
to plan.

02:01:48.330 --> 02:01:51.980
Thus, we wanted to tell you about this as
soon as we could.

02:01:51.980 --> 02:01:57.560
So in response to that, today, we're publishing
the road map for Google App Engine for Business.

02:01:57.560 --> 02:02:01.889
Because some of the features I told you about
today will take longer than others, some will

02:02:01.889 --> 02:02:06.130
be available sooner than others.
Our road map which is published online at

02:02:06.130 --> 02:02:11.520
code.google.com, gives you an idea of when
each of these features will be available and

02:02:11.520 --> 02:02:16.770
when you can expect to see it.
Already, a number of companies that we're

02:02:16.770 --> 02:02:22.639
working with are already testing the App Engine
management console and using it to help manage

02:02:22.639 --> 02:02:26.630
their company and all of the applications
within it.

02:02:26.630 --> 02:02:32.080
So, that's the end of my talk today.
What I've shown you is a new version of App

02:02:32.080 --> 02:02:36.710
Engine which is suited to business needs and
a new way to manage all of your applications

02:02:36.710 --> 02:02:40.139
in the cloud.
So thank you for your time.

02:02:40.139 --> 02:02:42.830
Please keep watching our road map to see how
we're doing.

02:02:42.830 --> 02:02:47.490
And if you'd like to learn more about our
toughest customer of Google App Engine for

02:02:47.490 --> 02:02:51.670
Business, please come see these talks where
you can see how Google itself is building

02:02:51.670 --> 02:02:57.030
its I.T. apps on App Engine.
Thank you.

02:02:57.030 --> 02:03:01.920
[ Applause ]
&gt;&gt;David Glazer: Thanks, Kevin.

02:03:01.920 --> 02:03:03.099
Thank you, Kevin.
Thank you, everyone.

02:03:03.099 --> 02:03:05.650
Three more slides.
What did we show you?

02:03:05.650 --> 02:03:08.790
We made four promises at the beginning.
We said we were going to show you how to build

02:03:08.790 --> 02:03:13.000
apps faster with familiar technology, showed
you how integrating Spring tools in Google

02:03:13.000 --> 02:03:16.690
Web Toolkit let that happen.
We said we were going to show you how to reach

02:03:16.690 --> 02:03:21.380
all your user on all their devices.
The new mobile-ready widgets in Google Web

02:03:21.380 --> 02:03:24.780
Toolkit make that happen.
We said we were going to show you how to stop

02:03:24.780 --> 02:03:29.130
being trapped into an architecture by a choice
you make when you write your code.

02:03:29.130 --> 02:03:33.380
The cloud portability solution we showed you,
working on VMWare on open standards made that

02:03:33.380 --> 02:03:35.860
happen.
And we said we were going to show you how

02:03:35.860 --> 02:03:40.130
to juggle a thousand applications for your
company and keep your sanity.

02:03:40.130 --> 02:03:45.590
App Engine for Business allows that to happen.
If you want to learn more, attend the sessions,

02:03:45.590 --> 02:03:53.360
you can go online at cloudportability at either
google.com or VMWare.com, get a lot more information,

02:03:53.360 --> 02:03:58.199
pointers to documentation, downloads the tools,
access the road map, sign up for early use,

02:03:58.199 --> 02:04:05.050
all of that.
We started this morning by talking about the

02:04:05.050 --> 02:04:10.599
power of open standards and how open standards
leads to innovation.

02:04:10.599 --> 02:04:14.470
Some of the people who started using the tools
that we showed you today, some of the people

02:04:14.470 --> 02:04:18.909
who started using Spring several years ago,
started using Google Web Toolkit two years

02:04:18.909 --> 02:04:23.139
ago, you're in this room.
When you started using those tools, you didn't

02:04:23.139 --> 02:04:27.139
know that you were building applications that
were ready to run on Chrome.

02:04:27.139 --> 02:04:31.510
You didn't know that you were running applications
that were ready to run on the Android browser.

02:04:31.510 --> 02:04:35.969
You didn't know that you were building for
the platform of the future, because it didn't

02:04:35.969 --> 02:04:41.550
exist when you started building your apps.
But because you chose to invest in open standards,

02:04:41.550 --> 02:04:46.210
you chose to innovate in the open, you are
ready for the future.

02:04:46.210 --> 02:04:48.360
Stay with the open standards.
Stay with the Web.

02:04:48.360 --> 02:04:51.820
Stay with HTML5.
Come with us into the future.

02:04:51.820 --> 02:04:54.410
We're excited about it.
We know you're excited.

02:04:54.410 --> 02:04:56.690
Enjoy the sessions.
Enjoy the rest of your two days here.

02:04:56.690 --> 02:04:57.280
Thank you very much.
[ Applause ]

