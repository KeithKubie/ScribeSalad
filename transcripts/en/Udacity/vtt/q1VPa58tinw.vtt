WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
How serious is this attack?

00:00:02.000 --> 00:00:06.000
If the block size is small we could guess all of these blocks.

00:00:06.000 --> 00:00:09.000
It turns out though the block size isn't that small.

00:00:09.000 --> 00:00:13.000
The parameters we saw were using RC4.

00:00:13.000 --> 00:00:16.000
RC4 is a symmetric encryption algorithm.

00:00:16.000 --> 00:00:22.000
It at least loosely stands for "Ron's Code 4." That's not what it officially stands for.

00:00:22.000 --> 00:00:27.000
But that's what most people think of it as, and this is Ron Rivest--the "R" in RSA

00:00:27.000 --> 00:00:31.000
who invented the symmetric encryption algorithm that's known as RC4.

00:00:31.000 --> 00:00:34.000
The block size typically used in TLS is 64 bits.

00:00:34.000 --> 00:00:39.000
TLS could also be using AES with a block size of 128 bits.

00:00:39.000 --> 00:00:42.000
That would mean the attack is only useful

00:00:42.000 --> 00:00:46.000
if the attacker can guess those 64 bits in a useful way

00:00:46.000 --> 00:00:49.000
and has a way to control the message.

00:00:49.000 --> 00:00:51.000
That seems like it might not be much of a threat,

00:00:51.000 --> 00:00:53.000
and this attack was actually known.

00:00:53.000 --> 00:00:58.000
It was identified by Gregory Bard in 2004 and viewed as not too serious of a problem with TLS,

00:00:58.000 --> 00:01:04.000
because it does give an attacker an advantage but these blocks are big enough

00:01:04.000 --> 00:01:07.000
that ability to do this--and if you can only guess one more message,

00:01:07.000 --> 00:01:10.000
if you can only control the server, you don't have too much power.

00:01:10.000 --> 00:01:13.000
It assumes a quite powerful attacker

00:01:13.000 --> 00:01:19.000
that has an ability to control the messages the server is going to send.

00:01:19.000 --> 00:01:23.000
It turns out that there are very serious implications of this attack.

00:01:23.000 --> 00:01:27.000
They depend on being able to inject JavaScript code,

00:01:27.000 --> 00:01:32.000
so there are ways that an attacker might be able to control the responses.

00:01:32.000 --> 00:01:37.000
Using JavaScript requests, if the attacker controls JavaScript on the page

00:01:37.000 --> 00:01:40.000
that the victim is using TLS to request,

00:01:40.000 --> 00:01:43.000
that JavaScript can make repeated requests to the root server.

00:01:43.000 --> 00:01:46.000
Those are still going to be part of the encrypted session,

00:01:46.000 --> 00:01:48.000
but the attacker can control what those requests are

00:01:48.000 --> 00:01:53.000
and perhaps can design requests that the server will respond to in a particular way,

00:01:53.000 --> 00:01:57.000
giving the attacker control over the first block in the next message.

00:01:57.000 --> 00:02:00.000
The other thing the attacker could do is figure out a way

00:02:00.000 --> 00:02:02.000
to know many of the bits.

00:02:02.000 --> 00:02:05.000
Suppose the attacker knows 58 bits, and there's one byte.

00:02:05.000 --> 00:02:10.000
But that byte contains one character of an authentication token

00:02:10.000 --> 00:02:12.000
that could be part of a cookie, say.

00:02:12.000 --> 00:02:14.000
It turns out that there is an attack that exploits this.

00:02:14.000 --> 00:02:21.000
It has the rather clever acronym B.E.A.S.T.--Browser Exploit Against SSL/TLS.

00:02:21.000 --> 00:02:24.000
This found ways to use this cryptographic weakness.

00:02:24.000 --> 00:02:27.000
It turns out if you can inject JavaScript into the page,

00:02:27.000 --> 00:02:31.000
you can control these requests enough to actually use this.

00:02:31.000 --> 00:02:34.000
This was demonstrated quite recently in 2011,

00:02:34.000 --> 00:02:37.000
showing a way that you could use this and this technique of controlling

00:02:37.000 --> 00:02:43.000
many of the bits in the first block to break an authentication token for a PayPal cookie.

00:02:43.000 --> 00:02:45.000
This is quite a powerful attacker.

00:02:45.000 --> 00:02:51.000
If you only need to guess 8 bits at a time, you expect to only need 128 guesses for each byte.

