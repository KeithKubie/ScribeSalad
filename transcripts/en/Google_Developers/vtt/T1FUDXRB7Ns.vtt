WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.960
WESLEY CHUN: Howdy, developers.

00:00:01.960 --> 00:00:03.400
Some of you are
probably wondering

00:00:03.400 --> 00:00:05.850
why I'm wearing a mask that
looks like a grassy field.

00:00:05.850 --> 00:00:09.774
Well, that's the subject of
today's video, field masks.

00:00:09.774 --> 00:00:12.190
Love the mask, but it makes
it hard for me to talk to you.

00:00:12.190 --> 00:00:13.590
Hi, I'm your host, Wesley Chun.

00:00:13.590 --> 00:00:16.280
And welcome to another episode
of the G Suite Dev show.

00:00:16.280 --> 00:00:18.660
[MUSIC PLAYING]

00:00:20.181 --> 00:00:22.180
WESLEY CHUN: While we do
look at several G Suite

00:00:22.180 --> 00:00:24.570
APIs in this video,
field masks are general

00:00:24.570 --> 00:00:27.480
and apply across Google
APIs, from YouTube

00:00:27.480 --> 00:00:29.190
to the Google Cloud Platform.

00:00:29.190 --> 00:00:30.770
So what are field masks?

00:00:30.770 --> 00:00:32.700
Well, they're not
masks that you wear.

00:00:32.700 --> 00:00:35.160
The best way to think
of them is as a filter.

00:00:35.160 --> 00:00:37.050
While they work
differently when reading

00:00:37.050 --> 00:00:40.710
data from, versus
writing data to, an API,

00:00:40.710 --> 00:00:43.480
the filter analogy is
still the most appropriate.

00:00:43.480 --> 00:00:45.425
So why discuss field masks?

00:00:45.425 --> 00:00:47.550
Well, they're not the most
straightforward feature,

00:00:47.550 --> 00:00:49.890
and can be confusing for some.

00:00:49.890 --> 00:00:51.780
Because the docs
are often terse,

00:00:51.780 --> 00:00:54.457
it may not be clear as to what
they do or how to use them.

00:00:54.457 --> 00:00:56.040
So we're going to
clear the air so you

00:00:56.040 --> 00:00:57.600
can hit the ground running.

00:00:57.600 --> 00:00:59.190
Let's start with read.

00:00:59.190 --> 00:01:01.560
When making an API call
to get information,

00:01:01.560 --> 00:01:04.230
response sizes
vary between APIs.

00:01:04.230 --> 00:01:05.970
Some return just
a trickle of data

00:01:05.970 --> 00:01:08.520
while others give you an ocean.

00:01:08.520 --> 00:01:12.600
If you're using a particularly
verbose API, this can add up.

00:01:12.600 --> 00:01:15.870
Field masks can help control the
amount of data that comes back.

00:01:15.870 --> 00:01:18.900
This is commonly referred
to as partial response

00:01:18.900 --> 00:01:20.400
in the documentation.

00:01:20.400 --> 00:01:23.050
Let's look at a few examples
from various Google APIs,

00:01:23.050 --> 00:01:24.450
starting with Gmail.

00:01:24.450 --> 00:01:26.490
In another video,
I show users how

00:01:26.490 --> 00:01:29.600
to use the Gmail API to
update email signatures.

00:01:29.600 --> 00:01:31.260
To change a user
signature, you need

00:01:31.260 --> 00:01:32.730
to loop through
all email addresses

00:01:32.730 --> 00:01:34.770
to find the ones
you want to change.

00:01:34.770 --> 00:01:36.930
If you're changing just
the primary signature,

00:01:36.930 --> 00:01:39.570
you need the isPrimary flag too.

00:01:39.570 --> 00:01:42.540
Both are part of the send
as array return in the API

00:01:42.540 --> 00:01:45.000
response you see here, along
with plenty other fields

00:01:45.000 --> 00:01:46.409
we don't need.

00:01:46.409 --> 00:01:48.450
To tell the API that those
are the only fields we

00:01:48.450 --> 00:01:51.300
want, specify them as
comma separated parent

00:01:51.300 --> 00:01:53.370
slash child fields.

00:01:53.370 --> 00:01:55.110
An alternative
shortcut is to group

00:01:55.110 --> 00:01:58.380
the children with parentheses,
making it a bit easier to read.

00:01:58.380 --> 00:02:01.920
Either way, this instructs the
API to drop all other fields.

00:02:01.920 --> 00:02:03.870
Well, to see what it
looks like in real life,

00:02:03.870 --> 00:02:05.310
here's some pseudo code.

00:02:05.310 --> 00:02:07.800
Well, OK, it's actual Python.

00:02:07.800 --> 00:02:09.900
The snippet displays all
of your email addresses

00:02:09.900 --> 00:02:12.672
and flags your primary
address with a P.

00:02:12.672 --> 00:02:16.020
We drop in the fields parameter
just like how we drew it up

00:02:16.020 --> 00:02:17.490
on the previous slide.

00:02:17.490 --> 00:02:21.180
Also see the Gmail API docs
page on partial response.

00:02:21.180 --> 00:02:21.852
Moving on.

00:02:21.852 --> 00:02:23.310
In another video,
we showed you how

00:02:23.310 --> 00:02:26.010
to display the first 100 files
and folders in your Google

00:02:26.010 --> 00:02:28.680
Drive, but didn't
filter the response.

00:02:28.680 --> 00:02:31.230
In a bit, we'll see how this
impacts performance in terms

00:02:31.230 --> 00:02:33.000
of both space and time.

00:02:33.000 --> 00:02:36.150
For now we can use these field
mask values so only the IDs,

00:02:36.150 --> 00:02:39.000
file names, and MIME types
come back in the response.

00:02:39.000 --> 00:02:42.360
As before, we can also
group with parentheses.

00:02:42.360 --> 00:02:45.240
Here's a Python code that uses
field masks to get and display

00:02:45.240 --> 00:02:48.180
these three fields for
each of the 100 files.

00:02:48.180 --> 00:02:50.130
The Drive API docs
also has a page

00:02:50.130 --> 00:02:53.262
on partial response and other
good performance practices.

00:02:53.262 --> 00:02:54.720
Before leaving this
example, I want

00:02:54.720 --> 00:02:57.240
to share the results of a
little test I ran with the Drive

00:02:57.240 --> 00:03:00.690
version to API without fields,
like the call you see here,

00:03:00.690 --> 00:03:03.090
and then run it again,
but with fields.

00:03:03.090 --> 00:03:04.080
Guess what?

00:03:04.080 --> 00:03:06.330
The payload for the
data for all 100 files

00:03:06.330 --> 00:03:10.140
comes in at 242k,
almost 16 times

00:03:10.140 --> 00:03:13.560
the 15K used when getting
just the IDs, file

00:03:13.560 --> 00:03:17.850
names, and MIME types, saving
about 94% in memory cost.

00:03:17.850 --> 00:03:20.280
Similarly, executing
the API call with fields

00:03:20.280 --> 00:03:24.030
took just 144 milliseconds,
almost three times faster

00:03:24.030 --> 00:03:27.940
than the 554 needed
for all of the data.

00:03:27.940 --> 00:03:30.540
It wasn't a rigorous study,
but gives you a rough idea

00:03:30.540 --> 00:03:32.640
as to what field masks can do.

00:03:32.640 --> 00:03:35.190
If the API payload
is small, the server

00:03:35.190 --> 00:03:38.530
doesn't have much work to do to
throw those responses together.

00:03:38.530 --> 00:03:40.990
But on the other hand, if
it has to assemble a car,

00:03:40.990 --> 00:03:43.360
you've got some extra overhead.

00:03:43.360 --> 00:03:45.750
Why should you incur
additional network costs

00:03:45.750 --> 00:03:49.470
and negatively impact latency
for data you don't need?

00:03:49.470 --> 00:03:51.000
Making some sense now?

00:03:51.000 --> 00:03:53.790
For the last demo, we'll
fetch a spreadsheet's name

00:03:53.790 --> 00:03:56.940
plus the names and IDs of
each of the individual sheets.

00:03:56.940 --> 00:03:59.707
This example is a bit more
complex than the first pair

00:03:59.707 --> 00:04:01.290
as the values are
in different fields,

00:04:01.290 --> 00:04:03.570
as you can see from
the get response.

00:04:03.570 --> 00:04:06.810
This time, the full paths down
to each field are too long.

00:04:06.810 --> 00:04:09.639
We can do some parenthetical
grouping, but in the end

00:04:09.639 --> 00:04:11.430
you're going to have
a mix and can't really

00:04:11.430 --> 00:04:13.500
get it shorter than this.

00:04:13.500 --> 00:04:15.180
Here's the corresponding
Python snippet

00:04:15.180 --> 00:04:18.269
that does what we want with
the help of field masks.

00:04:18.269 --> 00:04:20.819
There's also a partial response
page in the sheet's API docs.

00:04:20.819 --> 00:04:22.420
You got the hang of it now?

00:04:22.420 --> 00:04:24.330
Well, that was
reading from an API.

00:04:24.330 --> 00:04:27.200
In part two, we'll look at
writing data with field masks,

00:04:27.200 --> 00:04:29.490
as well as share some best
practices for both read

00:04:29.490 --> 00:04:30.750
and write.

00:04:30.750 --> 00:04:33.060
Find out more about partial
response from this page

00:04:33.060 --> 00:04:34.890
in the client library docs.

00:04:34.890 --> 00:04:37.080
The field masks guides
in the Slides API docs

00:04:37.080 --> 00:04:40.230
is the most comprehensive,
covering read and write.

00:04:40.230 --> 00:04:42.902
So check it out to get a
preview before the next video.

00:04:42.902 --> 00:04:45.360
And the last link takes you to
more episodes of the G Suite

00:04:45.360 --> 00:04:46.470
Dev Show.

00:04:46.470 --> 00:04:47.760
Well, that's it for today.

00:04:47.760 --> 00:04:50.340
Now that we took the mystery
out of using them for read API

00:04:50.340 --> 00:04:54.390
calls, it's time for you
to put on your field mask

00:04:54.390 --> 00:04:57.180
and cut down on your
API response payloads.

00:04:57.180 --> 00:04:59.400
Be sure to tune into part
two of our two-part series

00:04:59.400 --> 00:05:02.340
to learn more about using field
masks with right API calls

00:05:02.340 --> 00:05:04.170
and subscribe to our channel.

00:05:04.170 --> 00:05:06.770
This is, Wesley Chun, and we'll
see you the next time on the G

00:05:06.770 --> 00:05:07.500
Suite Dev Show.

00:05:07.500 --> 00:05:10.250
[MUSIC PLAYING]

