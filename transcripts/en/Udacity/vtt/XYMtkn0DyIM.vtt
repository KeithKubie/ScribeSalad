WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:02.770
Let us now play with this code in the browser and

00:00:02.770 --> 00:00:04.700
actually see what it's created.

00:00:04.700 --> 00:00:08.520
I'll be stepping through each line of the dimple code that I just explained and

00:00:08.520 --> 00:00:10.900
inspecting what gets created at each step of the way.

00:00:10.900 --> 00:00:15.840
I'll be using the same technique of stopping using the debugger in the middle of

00:00:15.840 --> 00:00:17.110
the draw function.

00:00:17.110 --> 00:00:19.640
So, I can run the code line by line.

00:00:19.640 --> 00:00:25.050
Just to make sure, let's open up our console here, navigate to the Console

00:00:25.050 --> 00:00:30.760
tab and then refresh our browser so that the JavaScript Debugger catches.

00:00:30.760 --> 00:00:35.940
And you can see here, again, on Line 19, the JavaScript Debugger caught.

00:00:35.940 --> 00:00:38.460
We can go back to our console.

00:00:38.460 --> 00:00:41.780
Make sure that our data has properly been loaded, and

00:00:41.780 --> 00:00:45.600
now we're ready to start diving in and creating some charts.

00:00:45.600 --> 00:00:49.440
As I just mentioned, you're going to use the dimple.chart method.

00:00:49.440 --> 00:00:52.310
To initialize a new dimple JS chart,

00:00:52.310 --> 00:00:57.180
with the svg element we want to draw the chart into and your data object.

00:00:57.180 --> 00:00:59.380
We tried running this code, it's going to break.

00:00:59.380 --> 00:01:04.660
And it's going to tell us that we cannot append to undefined.

00:01:04.660 --> 00:01:10.410
Now this might seem like a cryptic error but if you go back to our sublime text,

00:01:10.410 --> 00:01:16.140
what we can see here is that the debugger caught, before we created our SVG.

00:01:16.140 --> 00:01:18.590
Now when you're working in this interactive fashion.

00:01:18.590 --> 00:01:22.310
You have to be sure that you know exactly what's in scope and when.

00:01:22.310 --> 00:01:25.990
So simply copying this code that creates a new SVG element and

00:01:25.990 --> 00:01:26.970
append it to the body.

00:01:28.220 --> 00:01:33.645
We can paste that into the browser console and now we have an SVG element.

00:01:33.645 --> 00:01:39.560
Re-running the chart creation code, forward dimple JS.

00:01:39.560 --> 00:01:42.540
We now see undefined returned.

00:01:42.540 --> 00:01:48.010
If we inspect what myChart is, we can see a new object, dimple.chart,

00:01:48.010 --> 00:01:54.200
that has a few properties defined when it prints the console,

00:01:54.200 --> 00:01:56.920
and a whole assortment of methods here,

00:01:56.920 --> 00:02:02.580
which represents everything we can call on a chart or access from a chart.

00:02:02.580 --> 00:02:07.950
So use our methods and properties for like width X and Y.

00:02:07.950 --> 00:02:09.326
There's quite a bit here.

00:02:09.326 --> 00:02:11.540
I don't want it to get too deep into it, but

00:02:11.540 --> 00:02:15.160
I simply wanted to show you that you should not be afraid of libraries and

00:02:15.160 --> 00:02:20.020
the code that they may generate, but you should be curious and inspect anything.

00:02:20.020 --> 00:02:22.780
Especially if you're working with JavaScript.

00:02:22.780 --> 00:02:25.590
Since things are quite easy to inspect, and quite dynamic.

00:02:25.590 --> 00:02:29.580
If you're interested in knowing the specifics of what each of these methods or

00:02:29.580 --> 00:02:31.540
properties represents,

00:02:31.540 --> 00:02:35.430
I recommend reading the API documentation on the dimple.js site.

