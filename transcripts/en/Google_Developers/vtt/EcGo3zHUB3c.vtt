WEBVTT
Kind: captions
Language: en

00:00:00.880 --> 00:00:03.300
You have a great
idea for a new game.

00:00:03.300 --> 00:00:06.010
But it really needs that big
screen in your living room

00:00:06.010 --> 00:00:07.220
to come to life.

00:00:07.220 --> 00:00:09.290
You could write
for a game console.

00:00:09.290 --> 00:00:11.620
But then you'd lose all
those millions of people

00:00:11.620 --> 00:00:12.780
with mobile phones.

00:00:12.780 --> 00:00:14.790
What is a game developer to do?

00:00:14.790 --> 00:00:17.440
With the new Google Cast
Remote Display APIs,

00:00:17.440 --> 00:00:20.650
your app can now render
directly to any Cast receiver

00:00:20.650 --> 00:00:22.080
like Chromecast.

00:00:22.080 --> 00:00:25.140
Remote display is all about
combining the amazing rendering

00:00:25.140 --> 00:00:28.790
capabilities of mobile devices
with the immersive power

00:00:28.790 --> 00:00:32.900
of large TVs to create
compelling interactive content.

00:00:32.900 --> 00:00:35.690
It extends the existing
Google Cast APIs,

00:00:35.690 --> 00:00:39.280
which were previously only
focused on controlling HTML5

00:00:39.280 --> 00:00:41.810
apps running on Cast receivers.

00:00:41.810 --> 00:00:45.060
Remote display supports
both Android and iOS.

00:00:45.060 --> 00:00:46.280
The APIs are different.

00:00:46.280 --> 00:00:48.860
So I'm going to show you how
to integrate remote display

00:00:48.860 --> 00:00:50.460
for each of them.

00:00:50.460 --> 00:00:54.420
Before you start writing code,
take a step back and make sure

00:00:54.420 --> 00:00:57.950
your design will work with
two very different screens.

00:00:57.950 --> 00:00:59.850
The first screen is a remote TV.

00:00:59.850 --> 00:01:01.380
This is where you'll
want to display

00:01:01.380 --> 00:01:03.590
the main action of your game.

00:01:03.590 --> 00:01:06.740
The second screen is a
smartphone or tablet screen.

00:01:06.740 --> 00:01:08.540
Players don't spend
a lot of time looking

00:01:08.540 --> 00:01:10.830
at it, which makes
it a great option

00:01:10.830 --> 00:01:14.080
to display secondary information
like statistics, player

00:01:14.080 --> 00:01:16.320
inventories, or
an in-game store.

00:01:16.320 --> 00:01:19.210
You can also display
a virtual controller.

00:01:19.210 --> 00:01:22.340
Finally, your game can either
require a second screen

00:01:22.340 --> 00:01:24.380
or be optional.

00:01:24.380 --> 00:01:25.980
Have a clear
description of what it

00:01:25.980 --> 00:01:29.630
requires, both in the marketing
material, and in the game.

00:01:29.630 --> 00:01:30.700
But enough about design.

00:01:30.700 --> 00:01:33.180
Let's go over the Android APIs.

00:01:33.180 --> 00:01:36.190
On Android, remote display
combines and extends

00:01:36.190 --> 00:01:40.190
the media router,
presentation, and service APIs.

00:01:40.190 --> 00:01:42.790
You'll use media router
for device discovery,

00:01:42.790 --> 00:01:46.510
presentation as the container
for the first screen content,

00:01:46.510 --> 00:01:49.900
and service to separate the
life cycle of the presentation

00:01:49.900 --> 00:01:51.450
from that of your activity.

00:01:51.450 --> 00:01:53.390
Let's go through each of these.

00:01:53.390 --> 00:01:55.800
The media router
APIs let you discover

00:01:55.800 --> 00:01:57.730
available Cast receivers.

00:01:57.730 --> 00:01:59.290
Remote display
works the same way

00:01:59.290 --> 00:02:01.940
as any other Castable
app in this respect.

00:02:01.940 --> 00:02:04.430
And we have a great video
on the Google Developers

00:02:04.430 --> 00:02:05.800
channel about discovery.

00:02:05.800 --> 00:02:07.130
Check it out.

00:02:07.130 --> 00:02:10.009
The presentation APIs
is Android's gateway

00:02:10.009 --> 00:02:11.430
to other screens.

00:02:11.430 --> 00:02:14.320
The remote display APIs provide
a specialized presentation

00:02:14.320 --> 00:02:18.110
that your app must subclass
to, well, present your game

00:02:18.110 --> 00:02:19.360
on the remote screen.

00:02:19.360 --> 00:02:21.130
You can, in fact,
display any view

00:02:21.130 --> 00:02:25.830
you want from a regular Android
layout to an OpenGLES surface.

00:02:25.830 --> 00:02:30.510
Finally, the remote display APIs
provide a local Android service

00:02:30.510 --> 00:02:32.770
to keep rendering even
while your main Android

00:02:32.770 --> 00:02:34.770
activity is backgrounded.

00:02:34.770 --> 00:02:37.110
This also makes it possible
to control your game

00:02:37.110 --> 00:02:39.680
with a Bluetooth controller
while the mobile device sits

00:02:39.680 --> 00:02:41.680
on the player's coffee table.

00:02:41.680 --> 00:02:44.500
You may be asking
yourself, what about audio?

00:02:44.500 --> 00:02:46.350
Well, you don't
have to do anything.

00:02:46.350 --> 00:02:49.920
Remote display automatically
mirrors the device's audio when

00:02:49.920 --> 00:02:51.650
your game is in the foreground.

00:02:51.650 --> 00:02:54.930
All right, let's look
at the iOS APIs now.

00:02:54.930 --> 00:02:59.120
On iOS, the remote display APIs
provide low-level functionality

00:02:59.120 --> 00:03:02.780
to send video and audio to
the Cast receiver and services

00:03:02.780 --> 00:03:05.000
to start a remote
display session.

00:03:05.000 --> 00:03:07.680
There are four stages in a
life cycle of a remote display

00:03:07.680 --> 00:03:08.370
session.

00:03:08.370 --> 00:03:11.610
Connect, negotiate,
send, and stop.

00:03:11.610 --> 00:03:13.340
Let's dive into the details.

00:03:13.340 --> 00:03:15.440
The connect stage
includes discovering

00:03:15.440 --> 00:03:18.030
as suitable Cast receiver,
connecting to it,

00:03:18.030 --> 00:03:20.880
and launching your remote
display receiver app on it.

00:03:20.880 --> 00:03:23.490
Like on Android, this
works exactly the same way

00:03:23.490 --> 00:03:26.610
as for any other iOS
Cast-enabled app.

00:03:26.610 --> 00:03:28.750
And like for Android,
we have a sweet video

00:03:28.750 --> 00:03:31.890
on the Google Developers
channel about this process.

00:03:31.890 --> 00:03:35.470
In the negotiation stage, use
the remote display channel

00:03:35.470 --> 00:03:38.610
and configuration APIs to
offer session parameters

00:03:38.610 --> 00:03:39.730
to the receiver.

00:03:39.730 --> 00:03:41.910
If the receiver is
happy with the settings,

00:03:41.910 --> 00:03:44.540
you'll have established
a remote display session.

00:03:44.540 --> 00:03:47.600
It's finally time to render
it to that big screen.

00:03:47.600 --> 00:03:50.890
In the send stage, your app
renders video and audio frames

00:03:50.890 --> 00:03:52.520
to the remote display session.

00:03:52.520 --> 00:03:55.820
Each app will integrate remote
display in a different way.

00:03:55.820 --> 00:03:57.920
So I'll go over some
generic tips and tricks

00:03:57.920 --> 00:03:59.470
that should help you.

00:03:59.470 --> 00:04:03.060
For audio, the basic idea
is to redirect your game's

00:04:03.060 --> 00:04:05.700
audio stream from the
system's audio device

00:04:05.700 --> 00:04:07.470
to the remote display session.

00:04:07.470 --> 00:04:10.190
Don't forget to silence
output to the device's

00:04:10.190 --> 00:04:11.610
built-in speakers.

00:04:11.610 --> 00:04:14.050
Otherwise your players
will feel like they're

00:04:14.050 --> 00:04:15.940
in an echo chamber.

00:04:15.940 --> 00:04:18.430
For video, create a
frame input object

00:04:18.430 --> 00:04:20.279
matching you're rendering API.

00:04:20.279 --> 00:04:22.390
Frame inputs are
adapters that make

00:04:22.390 --> 00:04:24.180
it easy to integrate
your rendering

00:04:24.180 --> 00:04:26.390
code with remote display.

00:04:26.390 --> 00:04:29.890
The general flow is to render
to a texture instead of a system

00:04:29.890 --> 00:04:30.800
surface.

00:04:30.800 --> 00:04:32.430
Once you have your
remote display frame

00:04:32.430 --> 00:04:35.450
encoded, hand over the
texture to the frame input

00:04:35.450 --> 00:04:36.470
for processing.

00:04:36.470 --> 00:04:37.500
And that's it.

00:04:37.500 --> 00:04:39.990
After that you can
render a different frame

00:04:39.990 --> 00:04:42.860
for the device's screen
as you would normally do.

00:04:42.860 --> 00:04:44.600
OK, if you remembered
two minutes ago,

00:04:44.600 --> 00:04:46.120
I said there were four stages.

00:04:46.120 --> 00:04:47.610
The last one is stop.

00:04:47.610 --> 00:04:49.130
And it's pretty easy.

00:04:49.130 --> 00:04:50.840
To end a remote
display session you

00:04:50.840 --> 00:04:52.400
just kill the remote
display receiver

00:04:52.400 --> 00:04:54.440
app using the core Cast APIs.

00:04:54.440 --> 00:04:55.940
That's it.

00:04:55.940 --> 00:04:58.740
We are super excited to
see the amazing games

00:04:58.740 --> 00:05:01.510
and experiences you will
build with Google Cast Remote

00:05:01.510 --> 00:05:02.470
Display.

00:05:02.470 --> 00:05:06.070
Don't forget to check
developers.google.com/cast

00:05:06.070 --> 00:05:08.640
to get more information on
getting started with remote

00:05:08.640 --> 00:05:09.630
display.

00:05:09.630 --> 00:05:13.970
We also have complete sample
code available on GitHub.

00:05:13.970 --> 00:05:16.560
Also check out the
game manager APIs,

00:05:16.560 --> 00:05:19.430
which make writing multiplayer
games that run directly

00:05:19.430 --> 00:05:21.990
on a Cast receiver super easy.

00:05:21.990 --> 00:05:23.700
Thanks.

