WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:07.280
Network file systems has evolved over time, but the idea is still the same. You

00:00:07.280 --> 00:00:11.000
have clients that are distributed all over

00:00:11.000 --> 00:00:13.740
the local area network and you have file

00:00:13.740 --> 00:00:16.840
servers sitting on the local area network

00:00:16.840 --> 00:00:19.430
and these file servers are central, so far

00:00:19.430 --> 00:00:21.900
as each client is concerned. Of course,

00:00:21.900 --> 00:00:25.610
the system administrator may partition these servers and

00:00:25.610 --> 00:00:27.790
say that there is one server designated

00:00:27.790 --> 00:00:31.070
for a certain class of users. For instance,

00:00:31.070 --> 00:00:33.030
if you take a university setting, you

00:00:33.030 --> 00:00:36.220
might have one server serving all the faculty's

00:00:36.220 --> 00:00:43.090
needs, and maybe another server serving all the student needs, but so far as a

00:00:43.090 --> 00:00:46.910
single client is concerned, it is still a

00:00:46.910 --> 00:00:51.020
centralized view, access to a central server over

00:00:51.020 --> 00:00:53.920
a local area network. Now, since the disk

00:00:53.920 --> 00:00:58.560
being electromagnetic is slow, the server will cache the

00:00:58.560 --> 00:01:02.700
files that it retrieves from the disk in

00:01:02.700 --> 00:01:05.780
memory, so that it can serve the clients better

00:01:05.780 --> 00:01:09.520
by serving it out of the file cache that is in memory rather than going to the

00:01:09.520 --> 00:01:12.150
disk all the time. So this is a typical

00:01:12.150 --> 00:01:16.970
structure of a network file system. A centralized server,

00:01:16.970 --> 00:01:19.630
which is the model used in NFS,

00:01:19.630 --> 00:01:22.720
is a serious source of bottleneck for scalability.

00:01:22.720 --> 00:01:29.390
A single server has to field the client requests coming from the group of users

00:01:29.390 --> 00:01:36.920
that it is serving and manage all the data and metadata for all the files that

00:01:36.920 --> 00:01:42.340
are housed on this particular server. And the data and the metadata of files

00:01:42.340 --> 00:01:46.220
are persistent data structures, and therefore, the file

00:01:46.220 --> 00:01:49.830
server has to access these data structures over

00:01:49.830 --> 00:01:53.080
the IO bus, which is available for talking

00:01:53.080 --> 00:01:56.490
to the disc sub-system. So, with a centralized

00:01:56.490 --> 00:01:59.330
server like this, there is limited bandwidth that's

00:01:59.330 --> 00:02:01.830
available for the server to get the data

00:02:01.830 --> 00:02:07.460
and the metadata in and out of the disc. And the file system cache is also

00:02:07.460 --> 00:02:12.490
limited, because it is confined to the memory space that's available in a given

00:02:12.490 --> 00:02:18.660
server. So, instead of this centralized view of the file system,

00:02:18.660 --> 00:02:23.210
can we implement the file system in a distributed manner? What does that mean?

