WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So far, all the computation we've done has operated only on numbers,

00:00:04.000 --> 00:00:06.000
and in the early days of computing,

00:00:06.000 --> 00:00:12.000
people thought of computers as super-powerful calculators for doing computations

00:00:12.000 --> 00:00:16.000
like simulating nuclear weapons, computing ballistic tables,

00:00:16.000 --> 00:00:20.000
or breaking encryption, which was a little more than just arithmetic,

00:00:20.000 --> 00:00:23.000
but still was mostly about counting and doing simple arithmetic.

00:00:23.000 --> 00:00:26.000
["Nobody believed that I had a running compiler and nobody would touch it.

00:00:26.000 --> 00:00:29.000
They told me computers could only do arithmetic." Grace Hopper]

00:00:29.000 --> 00:00:32.000
We saw this quote from Grace Hopper earlier, talking about computers could only do arithmetic,

00:00:32.000 --> 00:00:34.000
and this is what people thought about computers in the 1940's and 1950's.

00:00:34.000 --> 00:00:36.000
But there's no reason to limit computers to that.

00:00:36.000 --> 00:00:38.000
They can operate on any kind of data we want,

00:00:38.000 --> 00:00:42.000
and it gets much more interesting when we operate on data besides just numbers.

00:00:42.000 --> 00:00:46.000
If we're going to build a search engine, most of the data we want to deal with is not numbers,

00:00:46.000 --> 00:00:49.000
it's the letters that are contained in web pages,

00:00:49.000 --> 00:00:52.000
and in Python that is what we call a "string."

00:00:52.000 --> 00:00:55.000
A string is just a sequence of characters surrounded by quotes.

00:00:55.000 --> 00:00:57.000
Here's an example of a string in Python.

00:00:57.000 --> 00:01:00.000
It starts with a single quote, has a sequence of characters--

00:01:00.000 --> 00:01:03.000
and anything we can type on the keyboard can be in a string--

00:01:03.000 --> 00:01:05.000
and ends with another single quote.

00:01:05.000 --> 00:01:09.000
The string is the sequence of characters between the single quotes.

00:01:09.000 --> 00:01:12.000
If we want, we can use double quotes instead.

00:01:12.000 --> 00:01:15.000
If we use double quotes, then the double quote starts the string--

00:01:15.000 --> 00:01:17.000
we can have a sequence of characters--

00:01:17.000 --> 00:01:19.000
and a double quote that ends the string.

00:01:19.000 --> 00:01:23.000
The only requirement is that if we start the string with a single quote,

00:01:23.000 --> 00:01:25.000
it has to end with a single quote.

00:01:25.000 --> 00:01:27.000
If we start the string with a double quote,

00:01:27.000 --> 00:01:29.000
it has to end with a double quote.

00:01:29.000 --> 00:01:32.000
That's actually a handy property

00:01:32.000 --> 00:01:35.000
because that means we can have the other kind of quote within our string.

00:01:35.000 --> 00:01:37.000
The string starts with a double quote--

00:01:37.000 --> 00:01:40.000
it contains a single quote inside it--

00:01:40.000 --> 00:01:43.000
--but because we started with a double quote that single doesn't end the string.

00:01:43.000 --> 00:01:46.000
That single quote is just like another character in the string--

00:01:46.000 --> 00:01:50.000
--the string continues until the closing double quote.

00:01:50.000 --> 00:01:53.000
So, let's try some things in the Python interpreter.

00:01:53.000 --> 00:01:57.000
We can print a string just like we can print a number.

00:01:57.000 --> 00:01:59.000
Here I am printing the string 'Hello.'

00:01:59.000 --> 00:02:02.000
When we run this, we see the output "Hello"--it's printing "Hello."

00:02:02.000 --> 00:02:07.000
We don't see the single quotes as it prints, but we know that it's a string that was printed.

00:02:07.000 --> 00:02:11.000
We can print a string with double quotes.

00:02:11.000 --> 00:02:15.000
One thing to notice when you enter strings in the interpreter, the color is black now--

00:02:15.000 --> 00:02:18.000
since it's an open string it hasn't been finished--

00:02:18.000 --> 00:02:23.000
--once I type the final quote, that closes the string; the color changes to blue.

00:02:23.000 --> 00:02:26.000
So now when we run this we have two prints, both that print "Hello."

00:02:26.000 --> 00:02:28.000
It looks the same both times.

00:02:28.000 --> 00:02:31.000
It doesn't matter if we use single quotes or double quotes around our string.

00:02:31.000 --> 00:02:36.000
Just to check everyone's paying attention, I'm going to try one more thing.

00:02:36.000 --> 00:02:38.000
Now I am printing "Hello" without the quotes.

00:02:38.000 --> 00:02:41.000
Try to see if you can guess what that will do--

00:02:41.000 --> 00:02:43.000
we won't make a quiz of this--

00:02:43.000 --> 00:02:46.000
but try to guess before I run it.

00:02:46.000 --> 00:02:49.000
Now that I run this, we see the result:

00:02:49.000 --> 00:02:51.000
we get a name error.

00:02:51.000 --> 00:02:53.000
The name "Hello" is not defined.

00:02:53.000 --> 00:02:57.000
Without the quotes, this [indicating Hello on screen] looks just like a variable.

00:02:57.000 --> 00:02:59.000
It's a name, but it's a variable that we didn't define.

00:02:59.000 --> 00:03:05.000
So when I try to use it, I get an error that the variable name "Hello" is not defined.

00:03:05.000 --> 00:03:09.000
If I wanted to, I could define a variable name "Hello."

00:03:09.000 --> 00:03:12.000
Let's make "Hello" refer to the string "Howdy."

00:03:12.000 --> 00:03:14.000
[Hello = "Howdy"]

00:03:14.000 --> 00:03:16.000
And now when I print "Hello" it works.

00:03:16.000 --> 00:03:19.000
I see the first two prints that printed "Hello."

00:03:19.000 --> 00:03:22.000
Now when I print the variable "Hello," that refers to the string "Howdy,"

00:03:22.000 --> 00:03:24.000
and I see "Howdy" as the result.

00:03:24.000 --> 00:03:28.000
We usually don't want our variables to start with capital letters--that's just a convention--

00:03:28.000 --> 00:03:31.000
so I'm going to change this back to a lowercase "hello"

00:03:31.000 --> 00:03:35.000
because it makes me feel uncomfortable to have a variable with a capital letter.

00:03:35.000 --> 00:03:37.000
There's no rule against that in Python,

00:03:37.000 --> 99:59:59.000
it's just a convention that we like to follow.

