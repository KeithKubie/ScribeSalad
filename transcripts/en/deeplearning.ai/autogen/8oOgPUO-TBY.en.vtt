WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:01.929
other than convolutional layers

00:00:01.929 --> 00:00:01.939
other than convolutional layers
 

00:00:01.939 --> 00:00:04.610
other than convolutional layers
confidence often also use pooling layers

00:00:04.610 --> 00:00:04.620
confidence often also use pooling layers
 

00:00:04.620 --> 00:00:07.099
confidence often also use pooling layers
to reduce the size of the representation

00:00:07.099 --> 00:00:07.109
to reduce the size of the representation
 

00:00:07.109 --> 00:00:09.320
to reduce the size of the representation
to speed the computation as well as make

00:00:09.320 --> 00:00:09.330
to speed the computation as well as make
 

00:00:09.330 --> 00:00:10.970
to speed the computation as well as make
some of the features it detects a bit

00:00:10.970 --> 00:00:10.980
some of the features it detects a bit
 

00:00:10.980 --> 00:00:14.360
some of the features it detects a bit
more robust let's take a look let's go

00:00:14.360 --> 00:00:14.370
more robust let's take a look let's go
 

00:00:14.370 --> 00:00:16.849
more robust let's take a look let's go
through an example of pooling and then

00:00:16.849 --> 00:00:16.859
through an example of pooling and then
 

00:00:16.859 --> 00:00:19.130
through an example of pooling and then
we'll talk about why you might want to

00:00:19.130 --> 00:00:19.140
we'll talk about why you might want to
 

00:00:19.140 --> 00:00:22.400
we'll talk about why you might want to
do this suppose you have a four by four

00:00:22.400 --> 00:00:22.410
do this suppose you have a four by four
 

00:00:22.410 --> 00:00:26.390
do this suppose you have a four by four
input and you want to apply a type of

00:00:26.390 --> 00:00:26.400
input and you want to apply a type of
 

00:00:26.400 --> 00:00:29.599
input and you want to apply a type of
pooling called max pooling and the

00:00:29.599 --> 00:00:29.609
pooling called max pooling and the
 

00:00:29.609 --> 00:00:31.429
pooling called max pooling and the
output of this particular implementation

00:00:31.429 --> 00:00:31.439
output of this particular implementation
 

00:00:31.439 --> 00:00:33.920
output of this particular implementation
of max pooling will be a two by two

00:00:33.920 --> 00:00:33.930
of max pooling will be a two by two
 

00:00:33.930 --> 00:00:36.620
of max pooling will be a two by two
output and the way you do that is quite

00:00:36.620 --> 00:00:36.630
output and the way you do that is quite
 

00:00:36.630 --> 00:00:38.959
output and the way you do that is quite
simple take your four by four input and

00:00:38.959 --> 00:00:38.969
simple take your four by four input and
 

00:00:38.969 --> 00:00:42.080
simple take your four by four input and
break it into different regions and I'm

00:00:42.080 --> 00:00:42.090
break it into different regions and I'm
 

00:00:42.090 --> 00:00:43.430
break it into different regions and I'm
going to cover the four regions as

00:00:43.430 --> 00:00:43.440
going to cover the four regions as
 

00:00:43.440 --> 00:00:46.340
going to cover the four regions as
follows and then in the output which is

00:00:46.340 --> 00:00:46.350
follows and then in the output which is
 

00:00:46.350 --> 00:00:48.979
follows and then in the output which is
two by two each of the outputs will just

00:00:48.979 --> 00:00:48.989
two by two each of the outputs will just
 

00:00:48.989 --> 00:00:51.139
two by two each of the outputs will just
be the mask from the correspondingly

00:00:51.139 --> 00:00:51.149
be the mask from the correspondingly
 

00:00:51.149 --> 00:00:54.380
be the mask from the correspondingly
shaded region so in the upper left

00:00:54.380 --> 00:00:54.390
shaded region so in the upper left
 

00:00:54.390 --> 00:00:56.840
shaded region so in the upper left
I guess the max of these four numbers is

00:00:56.840 --> 00:00:56.850
I guess the max of these four numbers is
 

00:00:56.850 --> 00:01:00.410
I guess the max of these four numbers is
nine upper right the max of the blue

00:01:00.410 --> 00:01:00.420
nine upper right the max of the blue
 

00:01:00.420 --> 00:01:03.139
nine upper right the max of the blue
numbers is 2 lower left the biggest

00:01:03.139 --> 00:01:03.149
numbers is 2 lower left the biggest
 

00:01:03.149 --> 00:01:05.390
numbers is 2 lower left the biggest
number is six and lower right to the

00:01:05.390 --> 00:01:05.400
number is six and lower right to the
 

00:01:05.400 --> 00:01:09.140
number is six and lower right to the
biggest number is three so to compute

00:01:09.140 --> 00:01:09.150
biggest number is three so to compute
 

00:01:09.150 --> 00:01:11.060
biggest number is three so to compute
each of the numbers on the right we took

00:01:11.060 --> 00:01:11.070
each of the numbers on the right we took
 

00:01:11.070 --> 00:01:13.640
each of the numbers on the right we took
the max over a two by two regions so

00:01:13.640 --> 00:01:13.650
the max over a two by two regions so
 

00:01:13.650 --> 00:01:16.340
the max over a two by two regions so
this is as if you're applying a filter

00:01:16.340 --> 00:01:16.350
this is as if you're applying a filter
 

00:01:16.350 --> 00:01:20.390
this is as if you're applying a filter
size of two because you're taking a two

00:01:20.390 --> 00:01:20.400
size of two because you're taking a two
 

00:01:20.400 --> 00:01:22.429
size of two because you're taking a two
by two regions and you're taking a

00:01:22.429 --> 00:01:22.439
by two regions and you're taking a
 

00:01:22.439 --> 00:01:26.600
by two regions and you're taking a
stride of two so these are actually the

00:01:26.600 --> 00:01:26.610
stride of two so these are actually the
 

00:01:26.610 --> 00:01:33.590
stride of two so these are actually the
hyper parameters of mass pooling because

00:01:33.590 --> 00:01:33.600
hyper parameters of mass pooling because
 

00:01:33.600 --> 00:01:36.740
hyper parameters of mass pooling because
we start from this filter size is like a

00:01:36.740 --> 00:01:36.750
we start from this filter size is like a
 

00:01:36.750 --> 00:01:38.810
we start from this filter size is like a
two by two region that gives you the

00:01:38.810 --> 00:01:38.820
two by two region that gives you the
 

00:01:38.820 --> 00:01:41.510
two by two region that gives you the
nine and then you step it over two steps

00:01:41.510 --> 00:01:41.520
nine and then you step it over two steps
 

00:01:41.520 --> 00:01:44.870
nine and then you step it over two steps
to look at this region to give you the

00:01:44.870 --> 00:01:44.880
to look at this region to give you the
 

00:01:44.880 --> 00:01:47.240
to look at this region to give you the
two and then for the next row you step

00:01:47.240 --> 00:01:47.250
two and then for the next row you step
 

00:01:47.250 --> 00:01:49.340
two and then for the next row you step
it down two steps to give you the six

00:01:49.340 --> 00:01:49.350
it down two steps to give you the six
 

00:01:49.350 --> 00:01:50.990
it down two steps to give you the six
and then step it to the right by two

00:01:50.990 --> 00:01:51.000
and then step it to the right by two
 

00:01:51.000 --> 00:01:53.270
and then step it to the right by two
steps to give you three so because the

00:01:53.270 --> 00:01:53.280
steps to give you three so because the
 

00:01:53.280 --> 00:01:55.639
steps to give you three so because the
squares are two by two F is equal to two

00:01:55.639 --> 00:01:55.649
squares are two by two F is equal to two
 

00:01:55.649 --> 00:01:58.219
squares are two by two F is equal to two
and because you you know stripe I to s

00:01:58.219 --> 00:01:58.229
and because you you know stripe I to s
 

00:01:58.229 --> 00:02:01.850
and because you you know stripe I to s
is equal to two so here's the intuition

00:02:01.850 --> 00:02:01.860
is equal to two so here's the intuition
 

00:02:01.860 --> 00:02:04.850
is equal to two so here's the intuition
behind what max pooling is doing if you

00:02:04.850 --> 00:02:04.860
behind what max pooling is doing if you
 

00:02:04.860 --> 00:02:08.270
behind what max pooling is doing if you
think of this four by four input as some

00:02:08.270 --> 00:02:08.280
think of this four by four input as some
 

00:02:08.280 --> 00:02:10.749
think of this four by four input as some
set of features or maybe not

00:02:10.749 --> 00:02:10.759
set of features or maybe not
 

00:02:10.759 --> 00:02:13.930
set of features or maybe not
if you think of this 4x4 region as some

00:02:13.930 --> 00:02:13.940
if you think of this 4x4 region as some
 

00:02:13.940 --> 00:02:17.259
if you think of this 4x4 region as some
sort of features deactivations in some

00:02:17.259 --> 00:02:17.269
sort of features deactivations in some
 

00:02:17.269 --> 00:02:20.020
sort of features deactivations in some
layer of the neural network then a large

00:02:20.020 --> 00:02:20.030
layer of the neural network then a large
 

00:02:20.030 --> 00:02:22.210
layer of the neural network then a large
number means that it's maybe detect to

00:02:22.210 --> 00:02:22.220
number means that it's maybe detect to
 

00:02:22.220 --> 00:02:23.979
number means that it's maybe detect to
the particular feature right so the

00:02:23.979 --> 00:02:23.989
the particular feature right so the
 

00:02:23.989 --> 00:02:25.720
the particular feature right so the
upper left-hand quadrant has this

00:02:25.720 --> 00:02:25.730
upper left-hand quadrant has this
 

00:02:25.730 --> 00:02:27.490
upper left-hand quadrant has this
particular feature maybe a vertical area

00:02:27.490 --> 00:02:27.500
particular feature maybe a vertical area
 

00:02:27.500 --> 00:02:31.059
particular feature maybe a vertical area
or maybe an eye or what's terribly

00:02:31.059 --> 00:02:31.069
or maybe an eye or what's terribly
 

00:02:31.069 --> 00:02:32.680
or maybe an eye or what's terribly
trying to detect niqab but you know the

00:02:32.680 --> 00:02:32.690
trying to detect niqab but you know the
 

00:02:32.690 --> 00:02:34.630
trying to detect niqab but you know the
clearly that feature exists in the upper

00:02:34.630 --> 00:02:34.640
clearly that feature exists in the upper
 

00:02:34.640 --> 00:02:35.530
clearly that feature exists in the upper
left-hand quadrant

00:02:35.530 --> 00:02:35.540
left-hand quadrant
 

00:02:35.540 --> 00:02:38.860
left-hand quadrant
whereas this feature maybe doesn't cat

00:02:38.860 --> 00:02:38.870
whereas this feature maybe doesn't cat
 

00:02:38.870 --> 00:02:41.110
whereas this feature maybe doesn't cat
my detector whereas this feature doesn't

00:02:41.110 --> 00:02:41.120
my detector whereas this feature doesn't
 

00:02:41.120 --> 00:02:42.910
my detector whereas this feature doesn't
really exist in the upper right-hand

00:02:42.910 --> 00:02:42.920
really exist in the upper right-hand
 

00:02:42.920 --> 00:02:45.520
really exist in the upper right-hand
quadrant so what the max operation does

00:02:45.520 --> 00:02:45.530
quadrant so what the max operation does
 

00:02:45.530 --> 00:02:47.530
quadrant so what the max operation does
is Salons the features detected anywhere

00:02:47.530 --> 00:02:47.540
is Salons the features detected anywhere
 

00:02:47.540 --> 00:02:49.630
is Salons the features detected anywhere
in one of these quadrants it then

00:02:49.630 --> 00:02:49.640
in one of these quadrants it then
 

00:02:49.640 --> 00:02:52.150
in one of these quadrants it then
remains preserved in the output of max

00:02:52.150 --> 00:02:52.160
remains preserved in the output of max
 

00:02:52.160 --> 00:02:55.270
remains preserved in the output of max
pooling so what the max operates to does

00:02:55.270 --> 00:02:55.280
pooling so what the max operates to does
 

00:02:55.280 --> 00:02:57.280
pooling so what the max operates to does
is really safe you know if this feature

00:02:57.280 --> 00:02:57.290
is really safe you know if this feature
 

00:02:57.290 --> 00:03:00.009
is really safe you know if this feature
is detected anywhere in this filter then

00:03:00.009 --> 00:03:00.019
is detected anywhere in this filter then
 

00:03:00.019 --> 00:03:02.440
is detected anywhere in this filter then
keep a high number but if this feature

00:03:02.440 --> 00:03:02.450
keep a high number but if this feature
 

00:03:02.450 --> 00:03:05.259
keep a high number but if this feature
is not detected so maybe if this feature

00:03:05.259 --> 00:03:05.269
is not detected so maybe if this feature
 

00:03:05.269 --> 00:03:07.030
is not detected so maybe if this feature
doesn't exist in the upper right hand

00:03:07.030 --> 00:03:07.040
doesn't exist in the upper right hand
 

00:03:07.040 --> 00:03:08.979
doesn't exist in the upper right hand
quadrant in the max of all those numbers

00:03:08.979 --> 00:03:08.989
quadrant in the max of all those numbers
 

00:03:08.989 --> 00:03:11.470
quadrant in the max of all those numbers
is throw itself quite small so maybe

00:03:11.470 --> 00:03:11.480
is throw itself quite small so maybe
 

00:03:11.480 --> 00:03:14.849
is throw itself quite small so maybe
that's the intuition behind max pooling

00:03:14.849 --> 00:03:14.859
that's the intuition behind max pooling
 

00:03:14.859 --> 00:03:17.830
that's the intuition behind max pooling
but I have to admit I think the main

00:03:17.830 --> 00:03:17.840
but I have to admit I think the main
 

00:03:17.840 --> 00:03:19.870
but I have to admit I think the main
reason people use max pooling is because

00:03:19.870 --> 00:03:19.880
reason people use max pooling is because
 

00:03:19.880 --> 00:03:21.190
reason people use max pooling is because
it's been found on malla

00:03:21.190 --> 00:03:21.200
it's been found on malla
 

00:03:21.200 --> 00:03:23.680
it's been found on malla
in a lot of experiments to work well and

00:03:23.680 --> 00:03:23.690
in a lot of experiments to work well and
 

00:03:23.690 --> 00:03:26.199
in a lot of experiments to work well and
the intuition I just described despite

00:03:26.199 --> 00:03:26.209
the intuition I just described despite
 

00:03:26.209 --> 00:03:28.000
the intuition I just described despite
it being often cited I don't know of

00:03:28.000 --> 00:03:28.010
it being often cited I don't know of
 

00:03:28.010 --> 00:03:29.800
it being often cited I don't know of
anyone you know fully knows if that's

00:03:29.800 --> 00:03:29.810
anyone you know fully knows if that's
 

00:03:29.810 --> 00:03:33.580
anyone you know fully knows if that's
the real underlying reason I don't have

00:03:33.580 --> 00:03:33.590
the real underlying reason I don't have
 

00:03:33.590 --> 00:03:35.470
the real underlying reason I don't have
anyone knows that that's the real

00:03:35.470 --> 00:03:35.480
anyone knows that that's the real
 

00:03:35.480 --> 00:03:37.599
anyone knows that that's the real
underlying reason that max pooling works

00:03:37.599 --> 00:03:37.609
underlying reason that max pooling works
 

00:03:37.609 --> 00:03:39.819
underlying reason that max pooling works
well in confidence um

00:03:39.819 --> 00:03:39.829
well in confidence um
 

00:03:39.829 --> 00:03:42.039
well in confidence um
one interesting property of max pooling

00:03:42.039 --> 00:03:42.049
one interesting property of max pooling
 

00:03:42.049 --> 00:03:44.710
one interesting property of max pooling
is that it has a set of hyper parameters

00:03:44.710 --> 00:03:44.720
is that it has a set of hyper parameters
 

00:03:44.720 --> 00:03:47.949
is that it has a set of hyper parameters
but it has no parameters to learn right

00:03:47.949 --> 00:03:47.959
but it has no parameters to learn right
 

00:03:47.959 --> 00:03:49.449
but it has no parameters to learn right
there's actually nothing for gradient

00:03:49.449 --> 00:03:49.459
there's actually nothing for gradient
 

00:03:49.459 --> 00:03:52.000
there's actually nothing for gradient
descent to learn once you've fixed FNS

00:03:52.000 --> 00:03:52.010
descent to learn once you've fixed FNS
 

00:03:52.010 --> 00:03:54.580
descent to learn once you've fixed FNS
is just a fixed computation and gradient

00:03:54.580 --> 00:03:54.590
is just a fixed computation and gradient
 

00:03:54.590 --> 00:03:56.490
is just a fixed computation and gradient
descent doesn't change anything

00:03:56.490 --> 00:03:56.500
descent doesn't change anything
 

00:03:56.500 --> 00:03:59.259
descent doesn't change anything
let's go through an example with some

00:03:59.259 --> 00:03:59.269
let's go through an example with some
 

00:03:59.269 --> 00:04:01.000
let's go through an example with some
different hyper parameters here I'm

00:04:01.000 --> 00:04:01.010
different hyper parameters here I'm
 

00:04:01.010 --> 00:04:04.900
different hyper parameters here I'm
going to use here you have a 5x5 input

00:04:04.900 --> 00:04:04.910
going to use here you have a 5x5 input
 

00:04:04.910 --> 00:04:07.210
going to use here you have a 5x5 input
and we're going to apply max cooling

00:04:07.210 --> 00:04:07.220
and we're going to apply max cooling
 

00:04:07.220 --> 00:04:10.210
and we're going to apply max cooling
with a filter size that's three by three

00:04:10.210 --> 00:04:10.220
with a filter size that's three by three
 

00:04:10.220 --> 00:04:12.490
with a filter size that's three by three
so f is equal to three and let's use a

00:04:12.490 --> 00:04:12.500
so f is equal to three and let's use a
 

00:04:12.500 --> 00:04:14.860
so f is equal to three and let's use a
stride of one so in this case the output

00:04:14.860 --> 00:04:14.870
stride of one so in this case the output
 

00:04:14.870 --> 00:04:18.360
stride of one so in this case the output
size is going to be three by three and

00:04:18.360 --> 00:04:18.370
size is going to be three by three and
 

00:04:18.370 --> 00:04:20.649
size is going to be three by three and
the formulas we're developed in the

00:04:20.649 --> 00:04:20.659
the formulas we're developed in the
 

00:04:20.659 --> 00:04:22.209
the formulas we're developed in the
previous videos for freaking out the

00:04:22.209 --> 00:04:22.219
previous videos for freaking out the
 

00:04:22.219 --> 00:04:24.430
previous videos for freaking out the
output size for a cons layer those

00:04:24.430 --> 00:04:24.440
output size for a cons layer those
 

00:04:24.440 --> 00:04:27.580
output size for a cons layer those
formulas also work for max pooling right

00:04:27.580 --> 00:04:27.590
formulas also work for max pooling right
 

00:04:27.590 --> 00:04:33.700
formulas also work for max pooling right
so that n plus 2p minus F over s4 plus

00:04:33.700 --> 00:04:33.710
so that n plus 2p minus F over s4 plus
 

00:04:33.710 --> 00:04:35.800
so that n plus 2p minus F over s4 plus
one that that formula also works for

00:04:35.800 --> 00:04:35.810
one that that formula also works for
 

00:04:35.810 --> 00:04:38.590
one that that formula also works for
figure out the output size of export but

00:04:38.590 --> 00:04:38.600
figure out the output size of export but
 

00:04:38.600 --> 00:04:40.810
figure out the output size of export but
in this example let's compute each of

00:04:40.810 --> 00:04:40.820
in this example let's compute each of
 

00:04:40.820 --> 00:04:43.690
in this example let's compute each of
the elements of this 3x3 output the

00:04:43.690 --> 00:04:43.700
the elements of this 3x3 output the
 

00:04:43.700 --> 00:04:45.460
the elements of this 3x3 output the
upper left-hand elements were going to

00:04:45.460 --> 00:04:45.470
upper left-hand elements were going to
 

00:04:45.470 --> 00:04:47.350
upper left-hand elements were going to
look over that region so notice this is

00:04:47.350 --> 00:04:47.360
look over that region so notice this is
 

00:04:47.360 --> 00:04:50.110
look over that region so notice this is
a 3x3 agent because the filter size is 3

00:04:50.110 --> 00:04:50.120
a 3x3 agent because the filter size is 3
 

00:04:50.120 --> 00:04:52.330
a 3x3 agent because the filter size is 3
and to the max there so that's gonna be

00:04:52.330 --> 00:04:52.340
and to the max there so that's gonna be
 

00:04:52.340 --> 00:04:55.570
and to the max there so that's gonna be
9 and they were shifted over by 1

00:04:55.570 --> 00:04:55.580
9 and they were shifted over by 1
 

00:04:55.580 --> 00:04:58.120
9 and they were shifted over by 1
because which you can stride of one so

00:04:58.120 --> 00:04:58.130
because which you can stride of one so
 

00:04:58.130 --> 00:05:01.290
because which you can stride of one so
that matter in the blue box is knowing

00:05:01.290 --> 00:05:01.300
that matter in the blue box is knowing
 

00:05:01.300 --> 00:05:04.000
that matter in the blue box is knowing
let's shift that over a game or the

00:05:04.000 --> 00:05:04.010
let's shift that over a game or the
 

00:05:04.010 --> 00:05:07.390
let's shift that over a game or the
mat-su the blue box is 5 and then let's

00:05:07.390 --> 00:05:07.400
mat-su the blue box is 5 and then let's
 

00:05:07.400 --> 00:05:09.880
mat-su the blue box is 5 and then let's
go on to the mix row astride of one so

00:05:09.880 --> 00:05:09.890
go on to the mix row astride of one so
 

00:05:09.890 --> 00:05:12.790
go on to the mix row astride of one so
we're just stepping down by one step so

00:05:12.790 --> 00:05:12.800
we're just stepping down by one step so
 

00:05:12.800 --> 00:05:16.180
we're just stepping down by one step so
max in that vision is 9 max in that

00:05:16.180 --> 00:05:16.190
max in that vision is 9 max in that
 

00:05:16.190 --> 00:05:20.590
max in that vision is 9 max in that
region is 9 max in that region so the 2

00:05:20.590 --> 00:05:20.600
region is 9 max in that region so the 2
 

00:05:20.600 --> 00:05:23.620
region is 9 max in that region so the 2
files from the max of 5 and then finally

00:05:23.620 --> 00:05:23.630
files from the max of 5 and then finally
 

00:05:23.630 --> 00:05:29.110
files from the max of 5 and then finally
max in that just eight max in that 6 and

00:05:29.110 --> 00:05:29.120
max in that just eight max in that 6 and
 

00:05:29.120 --> 00:05:31.030
max in that just eight max in that 6 and
max in that there's none in the right

00:05:31.030 --> 00:05:31.040
max in that there's none in the right
 

00:05:31.040 --> 00:05:33.730
max in that there's none in the right
hand corner okay so this will just set

00:05:33.730 --> 00:05:33.740
hand corner okay so this will just set
 

00:05:33.740 --> 00:05:35.470
hand corner okay so this will just set
the hype around to this effort of 3 s

00:05:35.470 --> 00:05:35.480
the hype around to this effort of 3 s
 

00:05:35.480 --> 00:05:38.820
the hype around to this effort of 3 s
equals 1 gives that output shown on it

00:05:38.820 --> 00:05:38.830
equals 1 gives that output shown on it
 

00:05:38.830 --> 00:05:43.000
equals 1 gives that output shown on it
now so far I've shown max pulling on a

00:05:43.000 --> 00:05:43.010
now so far I've shown max pulling on a
 

00:05:43.010 --> 00:05:48.909
now so far I've shown max pulling on a
2d input if you have a 3d input then the

00:05:48.909 --> 00:05:48.919
2d input if you have a 3d input then the
 

00:05:48.919 --> 00:05:53.560
2d input if you have a 3d input then the
output will have the same dimension so

00:05:53.560 --> 00:05:53.570
output will have the same dimension so
 

00:05:53.570 --> 00:05:57.130
output will have the same dimension so
for example if you have 5 by 5 by 2 then

00:05:57.130 --> 00:05:57.140
for example if you have 5 by 5 by 2 then
 

00:05:57.140 --> 00:06:01.450
for example if you have 5 by 5 by 2 then
the upper would be 3 by 3 by 2 and the

00:06:01.450 --> 00:06:01.460
the upper would be 3 by 3 by 2 and the
 

00:06:01.460 --> 00:06:03.730
the upper would be 3 by 3 by 2 and the
way you compute max pooling is you

00:06:03.730 --> 00:06:03.740
way you compute max pooling is you
 

00:06:03.740 --> 00:06:05.290
way you compute max pooling is you
perform the computation we just

00:06:05.290 --> 00:06:05.300
perform the computation we just
 

00:06:05.300 --> 00:06:06.850
perform the computation we just
described on each of the channels

00:06:06.850 --> 00:06:06.860
described on each of the channels
 

00:06:06.860 --> 00:06:09.880
described on each of the channels
independently so the first channel which

00:06:09.880 --> 00:06:09.890
independently so the first channel which
 

00:06:09.890 --> 00:06:11.830
independently so the first channel which
is shown here on top is still the same

00:06:11.830 --> 00:06:11.840
is shown here on top is still the same
 

00:06:11.840 --> 00:06:13.750
is shown here on top is still the same
and then for the second channel I guess

00:06:13.750 --> 00:06:13.760
and then for the second channel I guess
 

00:06:13.760 --> 00:06:16.300
and then for the second channel I guess
this one's I just drew at the bottom you

00:06:16.300 --> 00:06:16.310
this one's I just drew at the bottom you
 

00:06:16.310 --> 00:06:18.250
this one's I just drew at the bottom you
would do the same computation on that

00:06:18.250 --> 00:06:18.260
would do the same computation on that
 

00:06:18.260 --> 00:06:21.460
would do the same computation on that
slice of this volume and that gives you

00:06:21.460 --> 00:06:21.470
slice of this volume and that gives you
 

00:06:21.470 --> 00:06:25.600
slice of this volume and that gives you
you know this second slice and more

00:06:25.600 --> 00:06:25.610
you know this second slice and more
 

00:06:25.610 --> 00:06:28.390
you know this second slice and more
generally if this was 5 by 5 by some

00:06:28.390 --> 00:06:28.400
generally if this was 5 by 5 by some
 

00:06:28.400 --> 00:06:30.280
generally if this was 5 by 5 by some
number of channels the output would be 3

00:06:30.280 --> 00:06:30.290
number of channels the output would be 3
 

00:06:30.290 --> 00:06:33.440
number of channels the output would be 3
by 3 by that same number of channels

00:06:33.440 --> 00:06:33.450
by 3 by that same number of channels
 

00:06:33.450 --> 00:06:37.820
by 3 by that same number of channels
and the max cooling computation is done

00:06:37.820 --> 00:06:37.830
and the max cooling computation is done
 

00:06:37.830 --> 00:06:41.120
and the max cooling computation is done
independently on each of these n C

00:06:41.120 --> 00:06:41.130
independently on each of these n C
 

00:06:41.130 --> 00:06:46.970
independently on each of these n C
channels so that's max pooling um that's

00:06:46.970 --> 00:06:46.980
channels so that's max pooling um that's
 

00:06:46.980 --> 00:06:48.800
channels so that's max pooling um that's
one of the type of pooling that isn't

00:06:48.800 --> 00:06:48.810
one of the type of pooling that isn't
 

00:06:48.810 --> 00:06:50.330
one of the type of pooling that isn't
used very often that I'll mention

00:06:50.330 --> 00:06:50.340
used very often that I'll mention
 

00:06:50.340 --> 00:06:53.240
used very often that I'll mention
briefly which is average pooling so it

00:06:53.240 --> 00:06:53.250
briefly which is average pooling so it
 

00:06:53.250 --> 00:06:55.460
briefly which is average pooling so it
does pretty much what you'd expect which

00:06:55.460 --> 00:06:55.470
does pretty much what you'd expect which
 

00:06:55.470 --> 00:06:59.150
does pretty much what you'd expect which
is instead of taking the maxes within

00:06:59.150 --> 00:06:59.160
is instead of taking the maxes within
 

00:06:59.160 --> 00:07:02.510
is instead of taking the maxes within
each filter you take the average so in

00:07:02.510 --> 00:07:02.520
each filter you take the average so in
 

00:07:02.520 --> 00:07:04.160
each filter you take the average so in
this example the average of the numbers

00:07:04.160 --> 00:07:04.170
this example the average of the numbers
 

00:07:04.170 --> 00:07:09.620
this example the average of the numbers
in purple is 3.75 then that's one point

00:07:09.620 --> 00:07:09.630
in purple is 3.75 then that's one point
 

00:07:09.630 --> 00:07:14.060
in purple is 3.75 then that's one point
two five and four and two and so this is

00:07:14.060 --> 00:07:14.070
two five and four and two and so this is
 

00:07:14.070 --> 00:07:15.980
two five and four and two and so this is
average pooling with hyper parameters f

00:07:15.980 --> 00:07:15.990
average pooling with hyper parameters f
 

00:07:15.990 --> 00:07:18.560
average pooling with hyper parameters f
equals to s equals two you can choose

00:07:18.560 --> 00:07:18.570
equals to s equals two you can choose
 

00:07:18.570 --> 00:07:22.490
equals to s equals two you can choose
other hyper parameters as well so these

00:07:22.490 --> 00:07:22.500
other hyper parameters as well so these
 

00:07:22.500 --> 00:07:24.950
other hyper parameters as well so these
days max pooling is used much more often

00:07:24.950 --> 00:07:24.960
days max pooling is used much more often
 

00:07:24.960 --> 00:07:28.310
days max pooling is used much more often
than average pooling with one exception

00:07:28.310 --> 00:07:28.320
than average pooling with one exception
 

00:07:28.320 --> 00:07:31.310
than average pooling with one exception
which is sometimes very deep in the

00:07:31.310 --> 00:07:31.320
which is sometimes very deep in the
 

00:07:31.320 --> 00:07:32.960
which is sometimes very deep in the
neural network you might use average

00:07:32.960 --> 00:07:32.970
neural network you might use average
 

00:07:32.970 --> 00:07:35.210
neural network you might use average
pooling to collapse your representation

00:07:35.210 --> 00:07:35.220
pooling to collapse your representation
 

00:07:35.220 --> 00:07:41.480
pooling to collapse your representation
from say 7 by 7 by 1000 and average over

00:07:41.480 --> 00:07:41.490
from say 7 by 7 by 1000 and average over
 

00:07:41.490 --> 00:07:43.880
from say 7 by 7 by 1000 and average over
all the spatial extents to get 1 by 1 by

00:07:43.880 --> 00:07:43.890
all the spatial extents to get 1 by 1 by
 

00:07:43.890 --> 00:07:47.290
all the spatial extents to get 1 by 1 by
1000 we'll see an example of this later

00:07:47.290 --> 00:07:47.300
1000 we'll see an example of this later
 

00:07:47.300 --> 00:07:50.750
1000 we'll see an example of this later
but you see max pooling use much more in

00:07:50.750 --> 00:07:50.760
but you see max pooling use much more in
 

00:07:50.760 --> 00:07:53.590
but you see max pooling use much more in
the neural network than average pooling

00:07:53.590 --> 00:07:53.600
the neural network than average pooling
 

00:07:53.600 --> 00:07:57.650
the neural network than average pooling
so just to summarize the hyper

00:07:57.650 --> 00:07:57.660
so just to summarize the hyper
 

00:07:57.660 --> 00:08:00.650
so just to summarize the hyper
parameters for pulling are if the filter

00:08:00.650 --> 00:08:00.660
parameters for pulling are if the filter
 

00:08:00.660 --> 00:08:04.160
parameters for pulling are if the filter
size and s destryed and may be common

00:08:04.160 --> 00:08:04.170
size and s destryed and may be common
 

00:08:04.170 --> 00:08:06.710
size and s destryed and may be common
choices of parameters might be f equals

00:08:06.710 --> 00:08:06.720
choices of parameters might be f equals
 

00:08:06.720 --> 00:08:09.260
choices of parameters might be f equals
to s equals 2 this is used quite often

00:08:09.260 --> 00:08:09.270
to s equals 2 this is used quite often
 

00:08:09.270 --> 00:08:11.930
to s equals 2 this is used quite often
and this has the effect of roughly

00:08:11.930 --> 00:08:11.940
and this has the effect of roughly
 

00:08:11.940 --> 00:08:14.030
and this has the effect of roughly
shrinking the height and width by a

00:08:14.030 --> 00:08:14.040
shrinking the height and width by a
 

00:08:14.040 --> 00:08:17.180
shrinking the height and width by a
factor of about 2 and the common choice

00:08:17.180 --> 00:08:17.190
factor of about 2 and the common choice
 

00:08:17.190 --> 00:08:19.940
factor of about 2 and the common choice
of parameters might be f equals to s

00:08:19.940 --> 00:08:19.950
of parameters might be f equals to s
 

00:08:19.950 --> 00:08:22.610
of parameters might be f equals to s
equals 2 and this has the effect of

00:08:22.610 --> 00:08:22.620
equals 2 and this has the effect of
 

00:08:22.620 --> 00:08:25.310
equals 2 and this has the effect of
shrinking the height and width of the

00:08:25.310 --> 00:08:25.320
shrinking the height and width of the
 

00:08:25.320 --> 00:08:28.700
shrinking the height and width of the
representation by a factor of 2 have

00:08:28.700 --> 00:08:28.710
representation by a factor of 2 have
 

00:08:28.710 --> 00:08:31.430
representation by a factor of 2 have
also seen that equals 3 s equals 2 used

00:08:31.430 --> 00:08:31.440
also seen that equals 3 s equals 2 used
 

00:08:31.440 --> 00:08:34.730
also seen that equals 3 s equals 2 used
and then the other hyper parameter is

00:08:34.730 --> 00:08:34.740
and then the other hyper parameter is
 

00:08:34.740 --> 00:08:37.010
and then the other hyper parameter is
just you know the binary bit that says

00:08:37.010 --> 00:08:37.020
just you know the binary bit that says
 

00:08:37.020 --> 00:08:39.260
just you know the binary bit that says
are you using max pooling or are you

00:08:39.260 --> 00:08:39.270
are you using max pooling or are you
 

00:08:39.270 --> 00:08:42.050
are you using max pooling or are you
using average pooling if you want you

00:08:42.050 --> 00:08:42.060
using average pooling if you want you
 

00:08:42.060 --> 00:08:44.340
using average pooling if you want you
can add an extra hyper parameter

00:08:44.340 --> 00:08:44.350
can add an extra hyper parameter
 

00:08:44.350 --> 00:08:47.340
can add an extra hyper parameter
for the padding although this is very

00:08:47.340 --> 00:08:47.350
for the padding although this is very
 

00:08:47.350 --> 00:08:49.410
for the padding although this is very
very rarely used when you do max pooling

00:08:49.410 --> 00:08:49.420
very rarely used when you do max pooling
 

00:08:49.420 --> 00:08:51.480
very rarely used when you do max pooling
usually you do not use any padding

00:08:51.480 --> 00:08:51.490
usually you do not use any padding
 

00:08:51.490 --> 00:08:53.430
usually you do not use any padding
although there is one exception that

00:08:53.430 --> 00:08:53.440
although there is one exception that
 

00:08:53.440 --> 00:08:55.590
although there is one exception that
we'll see next week as well but for the

00:08:55.590 --> 00:08:55.600
we'll see next week as well but for the
 

00:08:55.600 --> 00:08:58.230
we'll see next week as well but for the
most part max pooling usually does not

00:08:58.230 --> 00:08:58.240
most part max pooling usually does not
 

00:08:58.240 --> 00:09:00.870
most part max pooling usually does not
use any padding so the most common value

00:09:00.870 --> 00:09:00.880
use any padding so the most common value
 

00:09:00.880 --> 00:09:06.690
use any padding so the most common value
of P by far is P equals zero and the

00:09:06.690 --> 00:09:06.700
of P by far is P equals zero and the
 

00:09:06.700 --> 00:09:08.880
of P by far is P equals zero and the
input of max pooling is that you input

00:09:08.880 --> 00:09:08.890
input of max pooling is that you input
 

00:09:08.890 --> 00:09:14.580
input of max pooling is that you input
the volume of size that NH by NW by NC

00:09:14.580 --> 00:09:14.590
the volume of size that NH by NW by NC
 

00:09:14.590 --> 00:09:18.440
the volume of size that NH by NW by NC
and it would output a volume of size

00:09:18.440 --> 00:09:18.450
and it would output a volume of size
 

00:09:18.450 --> 00:09:22.260
and it would output a volume of size
given by this right so assuming there's

00:09:22.260 --> 00:09:22.270
given by this right so assuming there's
 

00:09:22.270 --> 00:09:27.750
given by this right so assuming there's
no padding by and some of you minus F

00:09:27.750 --> 00:09:27.760
no padding by and some of you minus F
 

00:09:27.760 --> 00:09:32.400
no padding by and some of you minus F
over s is 1/4 by and C and so the number

00:09:32.400 --> 00:09:32.410
over s is 1/4 by and C and so the number
 

00:09:32.410 --> 00:09:34.410
over s is 1/4 by and C and so the number
of input channels is equal to the number

00:09:34.410 --> 00:09:34.420
of input channels is equal to the number
 

00:09:34.420 --> 00:09:36.750
of input channels is equal to the number
of alpha channels because pooling

00:09:36.750 --> 00:09:36.760
of alpha channels because pooling
 

00:09:36.760 --> 00:09:39.000
of alpha channels because pooling
applies to each of your channels

00:09:39.000 --> 00:09:39.010
applies to each of your channels
 

00:09:39.010 --> 00:09:42.510
applies to each of your channels
independently one thing to note about

00:09:42.510 --> 00:09:42.520
independently one thing to note about
 

00:09:42.520 --> 00:09:44.780
independently one thing to note about
pooling is that there are no parameters

00:09:44.780 --> 00:09:44.790
pooling is that there are no parameters
 

00:09:44.790 --> 00:09:49.230
pooling is that there are no parameters
to learn and so when we when you

00:09:49.230 --> 00:09:49.240
to learn and so when we when you
 

00:09:49.240 --> 00:09:51.540
to learn and so when we when you
implement back prop you find that there

00:09:51.540 --> 00:09:51.550
implement back prop you find that there
 

00:09:51.550 --> 00:09:53.580
implement back prop you find that there
are no parameters that backdrop will

00:09:53.580 --> 00:09:53.590
are no parameters that backdrop will
 

00:09:53.590 --> 00:09:55.650
are no parameters that backdrop will
adapt through max pooling instead

00:09:55.650 --> 00:09:55.660
adapt through max pooling instead
 

00:09:55.660 --> 00:09:57.570
adapt through max pooling instead
they're just these hyper parameters that

00:09:57.570 --> 00:09:57.580
they're just these hyper parameters that
 

00:09:57.580 --> 00:09:59.730
they're just these hyper parameters that
you set once maybe set once by hand or

00:09:59.730 --> 00:09:59.740
you set once maybe set once by hand or
 

00:09:59.740 --> 00:10:01.830
you set once maybe set once by hand or
set using cross-validation and then

00:10:01.830 --> 00:10:01.840
set using cross-validation and then
 

00:10:01.840 --> 00:10:03.600
set using cross-validation and then
beyond that you know you're done then

00:10:03.600 --> 00:10:03.610
beyond that you know you're done then
 

00:10:03.610 --> 00:10:05.880
beyond that you know you're done then
it's just a fixed function that the

00:10:05.880 --> 00:10:05.890
it's just a fixed function that the
 

00:10:05.890 --> 00:10:07.470
it's just a fixed function that the
neural network computes in one of the

00:10:07.470 --> 00:10:07.480
neural network computes in one of the
 

00:10:07.480 --> 00:10:09.600
neural network computes in one of the
layers and there is actually nothing to

00:10:09.600 --> 00:10:09.610
layers and there is actually nothing to
 

00:10:09.610 --> 00:10:12.630
layers and there is actually nothing to
learn it's just a fixed function so

00:10:12.630 --> 00:10:12.640
learn it's just a fixed function so
 

00:10:12.640 --> 00:10:16.680
learn it's just a fixed function so
that's it for pooling in D so that's if

00:10:16.680 --> 00:10:16.690
that's it for pooling in D so that's if
 

00:10:16.690 --> 00:10:18.510
that's it for pooling in D so that's if
a pooling you now know how to build

00:10:18.510 --> 00:10:18.520
a pooling you now know how to build
 

00:10:18.520 --> 00:10:20.580
a pooling you now know how to build
convolutional layers and pooling layers

00:10:20.580 --> 00:10:20.590
convolutional layers and pooling layers
 

00:10:20.590 --> 00:10:22.710
convolutional layers and pooling layers
in the next video let's see a more

00:10:22.710 --> 00:10:22.720
in the next video let's see a more
 

00:10:22.720 --> 00:10:25.350
in the next video let's see a more
complex example of a confident one that

00:10:25.350 --> 00:10:25.360
complex example of a confident one that
 

00:10:25.360 --> 00:10:27.240
complex example of a confident one that
will also allow us to introduce fully

00:10:27.240 --> 00:10:27.250
will also allow us to introduce fully
 

00:10:27.250 --> 00:10:29.970
will also allow us to introduce fully
connected layers

