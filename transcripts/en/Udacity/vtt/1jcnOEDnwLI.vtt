WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:04.170
Let's do a quick recap of what we have done so far.

00:00:04.170 --> 00:00:05.860
We started with the question,

00:00:05.860 --> 00:00:09.460
can we identify people based on their location patterns?

00:00:09.460 --> 00:00:14.330
Then we decided to use linear methods to do classification.

00:00:14.330 --> 00:00:18.670
We wanted to use a Euclidean distance measured over different times of

00:00:18.670 --> 00:00:21.090
the day as out features.

00:00:21.090 --> 00:00:22.430
We cleaned the data.

00:00:22.430 --> 00:00:24.300
We selected the features.

00:00:24.300 --> 00:00:28.110
And we made sure we have enough data to build our model.

00:00:28.110 --> 00:00:31.900
Let's come back to the question of using the Euclidean distance.

00:00:31.900 --> 00:00:35.770
First, let's define what this distance is.

00:00:35.770 --> 00:00:41.260
The Euclidean distance is the distance we can measure between two points.

00:00:41.260 --> 00:00:46.860
Let's say these two points are point 1 given by the coordinates x1 and y1.

00:00:46.860 --> 00:00:50.680
And a point 2, given by the coordinates x2 and y2.

00:00:50.680 --> 00:00:57.630
Our goal is to measure the distance of the line joining point 1 and point 2.

00:00:57.630 --> 00:01:02.060
This distance between point 1 and point 2 can be written as

00:01:02.060 --> 00:01:07.160
the square root of the sum of the squares of the difference of the coordinates.

00:01:07.160 --> 00:01:15.270
So in this case, it's x1 minus x2 squared plus y1 minus y2 squared.

00:01:15.270 --> 00:01:19.820
In the data, we started with x and y coordinates.

00:01:19.820 --> 00:01:25.290
&gt;From the x and y coordinates, we made the transformation to calculate a distance

00:01:25.290 --> 00:01:31.130
between the x and y coordinates for each position at a given time and

00:01:31.130 --> 00:01:36.210
some arbitrary origin point, which we denote here as 0,0.

00:01:36.210 --> 00:01:39.330
Notice we took two variables, x and

00:01:39.330 --> 00:01:44.850
y, and transformed it into 1 variable which was the distance function.

00:01:44.850 --> 00:01:47.850
We did not necessarily have to do this.

00:01:47.850 --> 00:01:49.600
We could have used x and

00:01:49.600 --> 00:01:54.080
y independently as features and still done the analysis.

00:01:54.080 --> 00:01:58.230
On the other hand we could have also used a different distance function.

00:01:58.230 --> 00:02:03.090
In the next video we will investigate using a different distance function.

00:02:03.090 --> 00:02:07.140
But before we do so, let's get back to our IPython notebooks,

00:02:07.140 --> 00:02:12.190
calculate these distances to be used as our features in our model.

00:02:12.190 --> 00:02:14.240
Getting back to the IPython notebook.

00:02:14.240 --> 00:02:17.980
Here we have the code that calculates the Euclidean distance

00:02:17.980 --> 00:02:19.410
between the two points.

00:02:19.410 --> 00:02:22.840
We do this for all the points in our dataset.

00:02:22.840 --> 00:02:26.690
Running this part of the code sets the distance metric to

00:02:26.690 --> 00:02:28.880
be our Euclidean distance.

00:02:28.880 --> 00:02:32.420
This is what we will use for the classification problem.

00:02:32.420 --> 00:02:36.630
In the next part of the code we'll calculate each person's distance from

00:02:36.630 --> 00:02:38.432
the origin at 4, 5, 6, and 7 p.m.

00:02:38.432 --> 00:02:41.689
every day.

00:02:41.689 --> 00:02:46.670
These are the four different hours we have chosen to get our locations.

00:02:46.670 --> 00:02:51.280
The people, or the driver ID, will be our classes y.

00:02:51.280 --> 00:02:56.150
We will use the values of x to learn values of y.

00:02:56.150 --> 00:03:01.280
In the function here, we're filling out two areas of x and y.

00:03:01.280 --> 00:03:04.450
In x, we append the distances.

00:03:04.450 --> 00:03:07.810
And in y, we append the person_id's.

00:03:07.810 --> 00:03:13.350
The method, in the end, returns us to areas of x and y.

00:03:13.350 --> 00:03:19.160
After running the above code we now want to check what the data holds for

00:03:19.160 --> 00:03:20.790
each of the persons.

00:03:20.790 --> 00:03:25.860
Running this part of the code should result in a list of the persons and

00:03:25.860 --> 00:03:30.230
the number of events we are left with for each of these persons.

00:03:30.230 --> 00:03:34.310
So after running this we now have a list of the name of

00:03:34.310 --> 00:03:37.410
the person with number of events.

00:03:37.410 --> 00:03:39.010
The number of data points or

00:03:39.010 --> 00:03:43.560
events have reduced significantly because we have chosen to

00:03:43.560 --> 00:03:49.440
use only four different times of day when we collect the location information.

00:03:49.440 --> 00:03:52.640
We do not use the data from the other times.

