WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.154
[MUSIC]

00:00:04.154 --> 00:00:05.570
CHET HAASE: So
we're going to talk

00:00:05.570 --> 00:00:06.580
about what's new in Android.

00:00:06.580 --> 00:00:08.330
If you recognize the
title of this talk,

00:00:08.330 --> 00:00:13.230
it may be because we gave a talk
eerily similar to this before.

00:00:13.230 --> 00:00:15.390
If you saw that
talk at Google I/O,

00:00:15.390 --> 00:00:18.150
you may find some of
the material today

00:00:18.150 --> 00:00:21.740
eerily similar to what
we said back in May.

00:00:21.740 --> 00:00:23.840
That's because we gave out
a preview release that,

00:00:23.840 --> 00:00:25.860
thankfully, was
pretty representative

00:00:25.860 --> 00:00:29.760
of the final release of M, which
finally came out very recently.

00:00:29.760 --> 00:00:32.247
We have added, we--
when I say we it's

00:00:32.247 --> 00:00:34.080
the royal we, because
there's only one of me

00:00:34.080 --> 00:00:37.297
up here-- we've added
a bit of information

00:00:37.297 --> 00:00:39.630
to talk about stuff that has
happened since that preview

00:00:39.630 --> 00:00:41.630
release, so I'll go over that.

00:00:41.630 --> 00:00:45.000
In the meantime, I would like
to introduce my co-speaker.

00:00:45.000 --> 00:00:47.750
he decided that he
couldn't join me.

00:00:47.750 --> 00:00:49.870
He actually got
really sick the night

00:00:49.870 --> 00:00:52.830
before he was gonna come out
here and bailed yesterday.

00:00:52.830 --> 00:00:54.820
So originally Dan
Sandler was going

00:00:54.820 --> 00:00:56.760
to join me for a
reprise of our talk

00:00:56.760 --> 00:01:01.420
that we did, and then Dan bailed
on me for some pathetic excuse,

00:01:01.420 --> 00:01:02.230
like work.

00:01:02.230 --> 00:01:05.110
And then Romain was gonna
join me instead as a stand in,

00:01:05.110 --> 00:01:06.960
and he was gonna
fake a Boston accent.

00:01:06.960 --> 00:01:08.430
That didn't work either.

00:01:08.430 --> 00:01:11.810
So now it's just me, pretending
that I don't have a problem

00:01:11.810 --> 00:01:14.180
and that everybody
actually wants to be here,

00:01:14.180 --> 00:01:15.300
but just couldn't.

00:01:15.300 --> 00:01:17.480
So, I love this
post on the barbecue

00:01:17.480 --> 00:01:21.810
site, where apparently I now
have like a Catholic four name

00:01:21.810 --> 00:01:22.310
name.

00:01:22.310 --> 00:01:24.540
It's Chet Haase Romain Guy.

00:01:24.540 --> 00:01:27.150
And that's the person
who won't be joining me.

00:01:27.150 --> 00:01:28.722
So, on with the show.

00:01:28.722 --> 00:01:30.930
First of all, one of the
things that's new since I/O,

00:01:30.930 --> 00:01:33.770
obviously, is some of the
new hardware that we have.

00:01:33.770 --> 00:01:37.850
So the Nexus devices just
came out, the 5X and the 6P.

00:01:37.850 --> 00:01:40.990
Actually, so has anybody
actually seen, held, bought

00:01:40.990 --> 00:01:43.300
these things yet?

00:01:43.300 --> 00:01:43.800
OK.

00:01:43.800 --> 00:01:45.508
I'm going to claim a
majority, although I

00:01:45.508 --> 00:01:46.980
think I saw seven hands.

00:01:46.980 --> 00:01:49.170
Actually the availability
was a very recent, right?

00:01:49.170 --> 00:01:50.310
You could do a pre-order.

00:01:50.310 --> 00:01:52.280
I don't know if they're
actually delivering it.

00:01:52.280 --> 00:01:53.510
AUDIENCE: [INAUDIBLE].

00:01:53.510 --> 00:01:54.150
CHET HAASE: 5X.

00:01:54.150 --> 00:01:54.850
Oh, cool.

00:01:54.850 --> 00:01:55.660
OK.

00:01:55.660 --> 00:01:56.760
See, I'm on the inside.

00:01:56.760 --> 00:01:58.810
I don't know the
details on the outside.

00:01:58.810 --> 00:02:00.972
So I was going to go over
quickly some of the specs

00:02:00.972 --> 00:02:02.680
here, some of the more
interesting stuff.

00:02:02.680 --> 00:02:03.450
Quality camera.

00:02:03.450 --> 00:02:05.810
We'll see some pictures later.

00:02:05.810 --> 00:02:08.350
I'm not a good photographer,
but I was surprised.

00:02:08.350 --> 00:02:09.626
I took a picture of a sunrise.

00:02:09.626 --> 00:02:11.750
I thought there were sort
of some interesting reds.

00:02:11.750 --> 00:02:13.916
And it actually came out
with a really crisp detail,

00:02:13.916 --> 00:02:16.290
at a fairly dark
point in the morning,

00:02:16.290 --> 00:02:18.155
so that that was sort
of my first alert

00:02:18.155 --> 00:02:19.780
that, like, the sensor
is a lot bigger.

00:02:19.780 --> 00:02:21.540
You can get a lot
more light in there

00:02:21.540 --> 00:02:23.210
and do a lot more with it.

00:02:23.210 --> 00:02:25.500
We'll talk a little bit about
fingerprint stuff that's

00:02:25.500 --> 00:02:27.080
enabled on these devices.

00:02:27.080 --> 00:02:31.520
USB type C. We'll mention
some of the specs here.

00:02:31.520 --> 00:02:34.050
So, I actually prefer
the 5X just because I

00:02:34.050 --> 00:02:35.680
like the smaller form factor.

00:02:35.680 --> 00:02:38.420
It's a little bit
taller than the Nexus 5.

00:02:38.420 --> 00:02:40.402
But in the meantime,
it's got faster hardware,

00:02:40.402 --> 00:02:41.985
so it's got the,
what do they call it?

00:02:41.985 --> 00:02:44.150
The Hexa Core.

00:02:44.150 --> 00:02:46.600
Hexa being some
language for six,

00:02:46.600 --> 00:02:49.800
so we have four little cores
and then two mega cores.

00:02:49.800 --> 00:02:52.310
So fairly good performance
on the CPU side.

00:02:52.310 --> 00:02:54.470
Upgraded GPU from the Nexus 5.

00:02:54.470 --> 00:02:56.430
Fairly substantial
battery in there.

00:02:56.430 --> 00:02:59.270
On the 6P side,
much larger display.

00:02:59.270 --> 00:03:01.860
A little bit smaller
than the Nexus 6.

00:03:01.860 --> 00:03:04.050
Which was too big for me.

00:03:04.050 --> 00:03:07.330
This is a little bit,
little bit smaller, easier

00:03:07.330 --> 00:03:09.320
to handle with one hand.

00:03:09.320 --> 00:03:12.810
Again, upgraded GPU and CPU
from what we saw before,

00:03:12.810 --> 00:03:14.230
including the Octa-Core.

00:03:14.230 --> 00:03:17.240
So we've got four little
cores and then four big cores

00:03:17.240 --> 00:03:20.960
when we need to run something
really substantial in there.

00:03:20.960 --> 00:03:24.050
So on the camera, lots of
numbers, not all of which make

00:03:24.050 --> 00:03:25.600
sense to me.

00:03:25.600 --> 00:03:27.305
So 4k video slow motion capture.

00:03:27.305 --> 00:03:28.680
I played with that
the other day.

00:03:28.680 --> 00:03:29.472
Um, interesting.

00:03:29.472 --> 00:03:31.180
Double click on-- I
don't know if anybody

00:03:31.180 --> 00:03:32.920
has seen this feature
yet in the camera app--

00:03:32.920 --> 00:03:34.750
if you double click
when the screen is off,

00:03:34.750 --> 00:03:36.720
it will automatically
launch into the camera.

00:03:36.720 --> 00:03:40.020
Or even if you're logged
into the phone, if you double

00:03:40.020 --> 00:03:42.430
click it will go to the
camera immediately as sort

00:03:42.430 --> 00:03:44.994
of a quick way to get into
kind of a common use case

00:03:44.994 --> 00:03:45.660
that people had.

00:03:45.660 --> 00:03:48.950
So you don't have to turn
the phone on and then do

00:03:48.950 --> 00:03:50.380
the thing that you want.

00:03:50.380 --> 00:03:52.420
Meanwhile, fairly
large resolution

00:03:52.420 --> 00:03:53.660
pictures that come out of it.

00:03:53.660 --> 00:03:58.130
Fairly large pixel size
and large sensor area,

00:03:58.130 --> 00:04:00.720
so we get a lot more light
coming into the camera.

00:04:00.720 --> 00:04:02.360
So here are some
sample pictures taken

00:04:02.360 --> 00:04:03.730
by a much better photographer.

00:04:03.730 --> 00:04:05.030
I asked Romain Guy.

00:04:05.030 --> 00:04:07.510
I always find when I
want to put pictures

00:04:07.510 --> 00:04:09.750
in a presentation of
mine, it's much easier

00:04:09.750 --> 00:04:13.430
to just steal them from Romain,
who knows how to take pictures.

00:04:13.430 --> 00:04:16.750
So these are some that he took
around the office and home

00:04:16.750 --> 00:04:17.510
the other day.

00:04:17.510 --> 00:04:19.980
Sort of demonstrate various
things including-- I

00:04:19.980 --> 00:04:22.185
wanted to end on an American
flag, because, Texas.

00:04:25.210 --> 00:04:25.780
Let's see.

00:04:25.780 --> 00:04:26.750
So Nexus Imprint.

00:04:26.750 --> 00:04:32.160
This is actually my favorite
feature about these devices.

00:04:32.160 --> 00:04:35.030
The really cool thing is the way
I store my phone in my pocket

00:04:35.030 --> 00:04:39.010
is usually face
down, upside down.

00:04:39.010 --> 00:04:40.580
And as I take it
out of my pocket,

00:04:40.580 --> 00:04:43.664
I put my finger in the fairly
cleverly placed location.

00:04:43.664 --> 00:04:45.580
And then by the time I'm
looking at the phone,

00:04:45.580 --> 00:04:47.430
it's actually unlocked and on.

00:04:47.430 --> 00:04:50.650
So it's just kind of a nice
sort of quick power on thing.

00:04:50.650 --> 00:04:53.690
It can also be used to
authenticate your applications

00:04:53.690 --> 00:04:56.890
that you write, and we'll
go over a little bit of that

00:04:56.890 --> 00:04:57.920
later.

00:04:57.920 --> 00:04:59.730
I haven't used those
applications yet.

00:04:59.730 --> 00:05:02.590
I'm not a pay user
right now, but it's

00:05:02.590 --> 00:05:05.330
kind of huge for me just
having the unlock feature.

00:05:05.330 --> 00:05:06.549
USB.

00:05:06.549 --> 00:05:07.590
I find this kind of cool.

00:05:07.590 --> 00:05:09.548
I don't know if anybody
else goes through this.

00:05:09.548 --> 00:05:12.320
With the normal sort
of USB, what the B,

00:05:12.320 --> 00:05:14.540
the micro USB
adapter, I always have

00:05:14.540 --> 00:05:16.901
to go through three
efforts to plug it in.

00:05:16.901 --> 00:05:17.400
Right?

00:05:17.400 --> 00:05:20.024
So you try it and that didn't
fit, so it must be upside down.

00:05:20.024 --> 00:05:21.940
And then you turned over
and you try it again.

00:05:21.940 --> 00:05:24.481
And in fact that was wrong and
you were right the first time,

00:05:24.481 --> 00:05:26.750
so then you turn it over
and then insert it correctly

00:05:26.750 --> 00:05:27.375
the third time.

00:05:27.375 --> 00:05:31.320
So USB C. Saving two
efforts on every plug-in.

00:05:31.320 --> 00:05:33.330
Thank you very much.

00:05:33.330 --> 00:05:33.830
OK.

00:05:33.830 --> 00:05:37.004
Let's talk about
Android 6, Marshmallow.

00:05:37.004 --> 00:05:38.420
Here's a picture
of the little guy

00:05:38.420 --> 00:05:39.890
outside freezing
at, I don't know,

00:05:39.890 --> 00:05:42.890
5:30 in the morning when
I got there that day.

00:05:42.890 --> 00:05:44.560
First of all,
runtime permissions.

00:05:44.560 --> 00:05:47.110
So, who's actually enabled their
app for runtime permissions

00:05:47.110 --> 00:05:48.482
so far?

00:05:48.482 --> 00:05:49.290
A few of you.

00:05:49.290 --> 00:05:50.340
Good.

00:05:50.340 --> 00:05:51.700
More would be better.

00:05:51.700 --> 00:05:54.370
So this is something that
users, as well as developers,

00:05:54.370 --> 00:05:55.590
have asked for a long time.

00:05:55.590 --> 00:05:58.700
I think the trick is that it
does mean some growing pains,

00:05:58.700 --> 00:05:59.200
right?

00:05:59.200 --> 00:06:02.600
Because now, well A, you need
to do a little bit more work

00:06:02.600 --> 00:06:04.692
to actually opt into
this thing, but also you

00:06:04.692 --> 00:06:06.650
need to handle conditions
that couldn't come up

00:06:06.650 --> 00:06:10.430
before because users may
actually deny that permission

00:06:10.430 --> 00:06:11.380
to your application.

00:06:11.380 --> 00:06:13.940
Or they may not want
that permission granted

00:06:13.940 --> 00:06:15.244
and you actually need it.

00:06:15.244 --> 00:06:17.160
So there may be a little
bit more interaction.

00:06:17.160 --> 00:06:20.139
This requires the user to
explain why this thing is

00:06:20.139 --> 00:06:21.430
needed so that they understand.

00:06:21.430 --> 00:06:23.660
On the other hand,
we now no longer

00:06:23.660 --> 00:06:25.860
have this set of
blanket permissions

00:06:25.860 --> 00:06:28.810
that the user is faced with when
they install your application.

00:06:28.810 --> 00:06:31.770
Why is it that your chat
application needs my camera?

00:06:31.770 --> 00:06:35.390
Why is it that your game
needs to know where I am?

00:06:35.390 --> 00:06:37.044
Some of these things
don't make sense

00:06:37.044 --> 00:06:39.460
and shouldn't have been there
in the first place, frankly.

00:06:39.460 --> 00:06:41.194
Some of these things
make perfect sense

00:06:41.194 --> 00:06:42.610
in the context of
the application,

00:06:42.610 --> 00:06:44.620
but it's hard to gauge
that when you're just

00:06:44.620 --> 00:06:46.570
faced with this huge
list of permissions

00:06:46.570 --> 00:06:49.450
when you want to download
and install the application.

00:06:49.450 --> 00:06:52.370
So it's much more granular
and explanatory now.

00:06:52.370 --> 00:06:54.870
So this is the traditional model
and this is still the model

00:06:54.870 --> 00:06:59.320
that people will see
on pre-M releases.

00:06:59.320 --> 00:07:02.174
So, I need the following things,
and then you have no choice.

00:07:02.174 --> 00:07:03.590
You're like, well
either I'm going

00:07:03.590 --> 00:07:05.040
to give you all
these permissions,

00:07:05.040 --> 00:07:06.831
or I'm not going to
stall your application.

00:07:06.831 --> 00:07:09.620
And if you want the application
you kind of got to do it.

00:07:09.620 --> 00:07:13.320
In the new world, instead,
you ask for permission

00:07:13.320 --> 00:07:14.190
when you need it.

00:07:14.190 --> 00:07:16.220
When a particular
permission needs

00:07:16.220 --> 00:07:21.160
to be granted in order for
you to perform some function

00:07:21.160 --> 00:07:24.390
like actually using the
camera or using the location,

00:07:24.390 --> 00:07:25.740
then you ask the user for that.

00:07:25.740 --> 00:07:27.830
Once they've granted the
permission, you have it,

00:07:27.830 --> 00:07:30.850
you do not have to
ask for it again.

00:07:30.850 --> 00:07:33.730
On the other hand, the user
can deny things at any point.

00:07:33.730 --> 00:07:36.490
You can go into settings and
look at all the permissions

00:07:36.490 --> 00:07:38.120
that are used by
all the applications

00:07:38.120 --> 00:07:40.150
and disable these selectively.

00:07:40.150 --> 00:07:43.530
Which means that your
application, especially if you

00:07:43.530 --> 00:07:45.820
wrote it pre-M and you haven't
touched the code since,

00:07:45.820 --> 00:07:48.930
maybe denied a permission that
you thought was there because,

00:07:48.930 --> 00:07:50.980
when it was installed,
that permission was there.

00:07:50.980 --> 00:07:52.360
So we have a
mechanism internally

00:07:52.360 --> 00:07:54.910
to throw an
exception or an error

00:07:54.910 --> 00:07:56.380
when you don't
get that exception

00:07:56.380 --> 00:07:59.500
and hopefully your code is
robust enough to handle that.

00:07:59.500 --> 00:08:03.591
But if you're re-attacking this
with the M runtime permissions,

00:08:03.591 --> 00:08:05.840
then you want to be able to
handle that intelligently,

00:08:05.840 --> 00:08:09.570
and you want to also be able
to give the user a little bit

00:08:09.570 --> 00:08:11.420
more information
when it's necessary.

00:08:11.420 --> 00:08:13.700
I'm not sure if I
show the flow there.

00:08:13.700 --> 00:08:14.910
Let's see.

00:08:14.910 --> 00:08:16.310
No, let me go back.

00:08:16.310 --> 00:08:21.170
So one of the things
that helps is, there's

00:08:21.170 --> 00:08:22.704
sort of a Two Ask policy.

00:08:22.704 --> 00:08:24.370
So we'll ask the user,
and if you think,

00:08:24.370 --> 00:08:26.110
well this permission
will be granted.

00:08:26.110 --> 00:08:29.320
There's no reason
why they wouldn't

00:08:29.320 --> 00:08:30.750
let me have access
to the camera,

00:08:30.750 --> 00:08:33.331
because obviously it's a
photo booth application.

00:08:33.331 --> 00:08:35.039
So you pop up the
permission and the user

00:08:35.039 --> 00:08:37.020
says no, I don't want this.

00:08:37.020 --> 00:08:37.520
OK.

00:08:37.520 --> 00:08:40.584
Well, we allow you to ask
again as the application.

00:08:40.584 --> 00:08:42.000
But that second
time we ask, we're

00:08:42.000 --> 00:08:43.640
going to also include
a check box that says,

00:08:43.640 --> 00:08:45.434
never ask me again
because otherwise, it's

00:08:45.434 --> 00:08:47.100
like you're spamming
the user every time

00:08:47.100 --> 00:08:48.150
you ask for this thing.

00:08:48.150 --> 00:08:51.690
But maybe before you pop
up that permission again,

00:08:51.690 --> 00:08:52.630
you can say, OK.

00:08:52.630 --> 00:08:54.750
We need access to
the following thing

00:08:54.750 --> 00:08:57.770
because we have this
feature called A Camera

00:08:57.770 --> 00:09:00.270
and this is an application
called A Photo Booth.

00:09:00.270 --> 00:09:02.640
So maybe you actually want
to enable this permission.

00:09:02.640 --> 00:09:04.140
And once you think
the user actually

00:09:04.140 --> 00:09:06.850
understands why you're
asking for the permission,

00:09:06.850 --> 00:09:10.360
then go ahead and tell us to
expose that dialogue again.

00:09:10.360 --> 00:09:11.040
We'll pop it up.

00:09:11.040 --> 00:09:12.414
Hopefully they do
the right thing

00:09:12.414 --> 00:09:15.120
and you can go on
about your business.

00:09:15.120 --> 00:09:17.750
So these permissions,
everything you're asked for.

00:09:17.750 --> 00:09:20.937
But the user of the app
actually has to deal with it.

00:09:20.937 --> 00:09:22.270
I went over a lot of that stuff.

00:09:22.270 --> 00:09:22.978
We'll keep going.

00:09:22.978 --> 00:09:26.670
There is a Compat API
now, so you can access

00:09:26.670 --> 00:09:27.950
this in the support library.

00:09:27.950 --> 00:09:31.020
There's a couple of resources
for more information.

00:09:31.020 --> 00:09:33.870
First of all, there was
permissions in M session

00:09:33.870 --> 00:09:37.150
at Google I/O. It followed
the What's New in Android

00:09:37.150 --> 00:09:39.000
talk that we gave back in May.

00:09:39.000 --> 00:09:41.010
That's on YouTube, so go
ahead and search for it

00:09:41.010 --> 00:09:42.570
by that title.

00:09:42.570 --> 00:09:44.360
And Ben [? Poise ?]
explains a lot more

00:09:44.360 --> 00:09:47.170
of the details of how
and why this thing works.

00:09:47.170 --> 00:09:49.170
And also we had
Ben on the podcast.

00:09:49.170 --> 00:09:50.340
Actually, I'm curious.

00:09:50.340 --> 00:09:52.850
How many people know about the
Android developers backstage

00:09:52.850 --> 00:09:54.160
podcast?

00:09:54.160 --> 00:09:56.344
Because this is like
one of those secrets

00:09:56.344 --> 00:09:58.760
you sort of do this thing and
you ship it out to the world

00:09:58.760 --> 00:10:02.272
and you have no idea how many
people, or who actually knows

00:10:02.272 --> 00:10:02.980
this thing exist.

00:10:02.980 --> 00:10:06.100
So it's a podcast that I do with
Tor Norbye from the tools team,

00:10:06.100 --> 00:10:08.400
where we interview
mostly Google people,

00:10:08.400 --> 00:10:10.570
not exclusively, it just
happens to be easier

00:10:10.570 --> 00:10:13.780
to walk down the hall than it
is to email somebody externally

00:10:13.780 --> 00:10:15.132
and organize that.

00:10:15.132 --> 00:10:16.840
So we talk to a lot
of Android developers

00:10:16.840 --> 00:10:19.760
basically about how stuff
works, either internally

00:10:19.760 --> 00:10:20.860
or externally.

00:10:20.860 --> 00:10:23.825
So we had Ben on to talk more
in depth about permissions,

00:10:23.825 --> 00:10:25.700
so you can check out
that episode if you want

00:10:25.700 --> 00:10:28.790
to know more of the internals
and how to actually interact

00:10:28.790 --> 00:10:30.190
with permissions.

00:10:30.190 --> 00:10:31.070
Voice interaction.

00:10:31.070 --> 00:10:34.490
So we had the capability already
to have an intent launched

00:10:34.490 --> 00:10:36.690
with a voice action.

00:10:36.690 --> 00:10:38.680
Now there is interaction,
so you can actually

00:10:38.680 --> 00:10:41.760
interact with the user after
they launch your intent.

00:10:41.760 --> 00:10:45.850
So, you specify this
intent, and you say,

00:10:45.850 --> 00:10:48.904
I am going to be launched
on Voice Actions.

00:10:48.904 --> 00:10:51.320
And you can already say, well
if it's a voice interaction,

00:10:51.320 --> 00:10:52.140
do the following thing.

00:10:52.140 --> 00:10:54.110
But now you can actually
go back to the user

00:10:54.110 --> 00:10:56.090
and get some
clarifying information.

00:10:56.090 --> 00:10:58.210
So you can say, OK, given
the following string,

00:10:58.210 --> 00:11:00.050
go ahead and do a
text to speech thing

00:11:00.050 --> 00:11:03.500
and say this to the user to
get some more information.

00:11:03.500 --> 00:11:05.410
And then when you've
got that information,

00:11:05.410 --> 00:11:08.210
launch my confirm
implementation.

00:11:08.210 --> 00:11:10.210
And once I've got
that, then I have

00:11:10.210 --> 00:11:12.446
the following
clarifying information.

00:11:12.446 --> 00:11:13.820
So basically, they
said something

00:11:13.820 --> 00:11:16.420
that launched your
app, you respond,

00:11:16.420 --> 00:11:18.754
asking some clarifying question,
they responded to that,

00:11:18.754 --> 00:11:20.461
then you get that
additional information.

00:11:20.461 --> 00:11:21.890
You can go on about
your business.

00:11:21.890 --> 00:11:22.870
Fingerprints.

00:11:22.870 --> 00:11:26.030
Again, my personal favorite
feature of the new devices.

00:11:26.030 --> 00:11:28.060
With that capability,
you have the ability

00:11:28.060 --> 00:11:30.800
to pop up your
own user interface

00:11:30.800 --> 00:11:32.250
for fingerprint authentication.

00:11:32.250 --> 00:11:36.060
So there's APIs, where you
can get the information

00:11:36.060 --> 00:11:39.735
from the sensor and say,
OK, have they authenticated

00:11:39.735 --> 00:11:42.110
that they are the correct user
with the fingerprints that

00:11:42.110 --> 00:11:43.990
are stored on the device.

00:11:43.990 --> 00:11:47.367
And you can have
your own UI to help

00:11:47.367 --> 00:11:48.950
the user understand
what they're doing

00:11:48.950 --> 00:11:50.530
and what the result of that was.

00:11:50.530 --> 00:11:53.040
Or you can use the
standard UI by calling

00:11:53.040 --> 00:11:54.581
createConfirmDev
iceCredentialIntent.

00:11:56.380 --> 00:11:58.955
That's a mouthful right there,
that's a lot of characters.

00:11:58.955 --> 00:12:01.580
I think you're going to wrap the
line just with the method name

00:12:01.580 --> 00:12:02.320
there.

00:12:02.320 --> 00:12:05.220
So you can have us pop
up the normal lock screen

00:12:05.220 --> 00:12:08.970
UI to ask the user to
authenticate that way as well.

00:12:08.970 --> 00:12:12.220
There's a couple of samples
that are good to check out there

00:12:12.220 --> 00:12:13.950
on the d.android.com site.

00:12:13.950 --> 00:12:16.660
The fingerprint dialogue as
well as a confirmed credential.

00:12:16.660 --> 00:12:19.990
And there's an I/O by the
fingerprint in payments APIs.

00:12:19.990 --> 00:12:22.590
This was a sandbox talk at
I/O and then they recorded it

00:12:22.590 --> 00:12:25.210
as an I/O Byte, so you can
search for that title name,

00:12:25.210 --> 00:12:28.070
and you'll find Maya
talking about this.

00:12:28.070 --> 00:12:30.400
We also-- secret for
the people in the room

00:12:30.400 --> 00:12:33.240
that nobody outside this room
knows until the video is posted

00:12:33.240 --> 00:12:35.880
in an hour, is that
we've had a conversation

00:12:35.880 --> 00:12:38.960
with some of the fingerprint
people on the podcast as well.

00:12:38.960 --> 00:12:42.470
So hopefully that will come
out sometime soon we'll see.

00:12:42.470 --> 00:12:43.700
Android back up.

00:12:43.700 --> 00:12:47.290
So you can always back
up everything-- sorry not

00:12:47.290 --> 00:12:49.290
everything-- you could
back up a bunch of stuff.

00:12:49.290 --> 00:12:51.950
We would back up things
about your accounts

00:12:51.950 --> 00:12:54.060
so that when you restored
onto a different device,

00:12:54.060 --> 00:12:56.060
or installed your account
on a different device,

00:12:56.060 --> 00:12:58.450
we would pick up some of
those, sort of, common account

00:12:58.450 --> 00:12:58.950
settings.

00:12:58.950 --> 00:13:02.590
You know, the WiFi routers you
could connect to, or whatever.

00:13:02.590 --> 00:13:04.960
But now we actually back
up basically everything,

00:13:04.960 --> 00:13:08.260
except temp and cache
directory information.

00:13:08.260 --> 00:13:13.310
So, when you target the MSDK,
we will back up all your stuff

00:13:13.310 --> 00:13:16.150
automatically, for free
and store it in the cloud.

00:13:16.150 --> 00:13:18.240
And then you can opt out
of that, if you want.

00:13:18.240 --> 00:13:20.540
So there's a simple way
of opting out, using

00:13:20.540 --> 00:13:23.590
include and exclude
tags in an XML file.

00:13:23.590 --> 00:13:26.520
So in your resource
directory, and XML directory,

00:13:26.520 --> 00:13:28.520
you would create this
backup scheme dot

00:13:28.520 --> 00:13:31.060
XML file that you refer
to in your manifest,

00:13:31.060 --> 00:13:32.980
and then you give us
include or excludes.

00:13:32.980 --> 00:13:34.720
By default,
everything's included.

00:13:34.720 --> 00:13:37.200
If you'd give us an include,
or a set of includes,

00:13:37.200 --> 00:13:38.900
then only those things
will be included.

00:13:38.900 --> 00:13:41.380
Or if you give us excludes,
then only those things

00:13:41.380 --> 00:13:44.200
will be excluded
from the full set.

00:13:44.200 --> 00:13:45.730
And then additionally,
you can just

00:13:45.730 --> 00:13:47.250
tell us to not back up anything.

00:13:47.250 --> 00:13:50.480
If that's just not something
you want to do, that's fine.

00:13:50.480 --> 00:13:51.910
Google Play services.

00:13:51.910 --> 00:13:55.185
We recently released
8.1, I believe.

00:13:55.185 --> 00:13:57.170
So back at I/O, we
talked about the thing

00:13:57.170 --> 00:13:59.170
that I think is still
pretty critical for people

00:13:59.170 --> 00:14:02.760
to key into, which is
GCM Network Manager.

00:14:02.760 --> 00:14:06.810
This is the Google Play services
equivalent of job scheduler,

00:14:06.810 --> 00:14:09.080
and in fact, when you're
running on a release that

00:14:09.080 --> 00:14:10.920
has job scheduler as
part of the framework,

00:14:10.920 --> 00:14:12.920
it'll use that internally.

00:14:12.920 --> 00:14:14.270
But it's the same idea.

00:14:14.270 --> 00:14:16.470
An API is for
basically saying, I

00:14:16.470 --> 00:14:18.735
want to do things
when it's appropriate.

00:14:18.735 --> 00:14:20.860
So I want to do this when
the device is plugged in,

00:14:20.860 --> 00:14:23.440
or when I have high
bandwidth data,

00:14:23.440 --> 00:14:27.910
or when I have WiFi,
all of these things

00:14:27.910 --> 00:14:32.029
so that you're not constantly
syncing, or syncing at times

00:14:32.029 --> 00:14:33.820
that are totally
inappropriate for the user

00:14:33.820 --> 00:14:36.880
experience, or the device
capabilities or the data plan,

00:14:36.880 --> 00:14:37.819
or whatever.

00:14:37.819 --> 00:14:39.360
There's a bunch of
other stuff that's

00:14:39.360 --> 00:14:42.450
been added also in Google
Play services 7.5, as well

00:14:42.450 --> 00:14:44.550
as the releases since then.

00:14:44.550 --> 00:14:46.290
Nearby came out over the summer.

00:14:46.290 --> 00:14:47.877
Again, we had a chat
with those folks

00:14:47.877 --> 00:14:50.460
on the podcast, if you want some
of the inner details of that,

00:14:50.460 --> 00:14:53.140
sort of, close
proximity communication

00:14:53.140 --> 00:14:56.190
between devices to set up
things, like passing tokens

00:14:56.190 --> 00:14:58.990
back and forth to get everybody
on the game dash board,

00:14:58.990 --> 00:14:59.650
or whatever.

00:14:59.650 --> 00:15:02.200
Mobile Vision, the ability
to do face detection,

00:15:02.200 --> 00:15:04.850
as well as bar code scanning.

00:15:04.850 --> 00:15:07.040
The new permissions model.

00:15:07.040 --> 00:15:10.810
There's some
marshmallow permissions.

00:15:10.810 --> 00:15:13.890
APIs in the more recent
Google Play services stuff.

00:15:13.890 --> 00:15:16.354
Maps can come up now
in ambient modes.

00:15:16.354 --> 00:15:18.520
I don't know if people have
noticed the ambient mode

00:15:18.520 --> 00:15:19.311
on the new devices.

00:15:19.311 --> 00:15:21.821
It sort of comes up with
this simple and cheaper sort

00:15:21.821 --> 00:15:24.320
of black and white screen to
give you the basic information.

00:15:24.320 --> 00:15:27.740
Then you can go launch into the
full color screen if you want.

00:15:27.740 --> 00:15:29.240
Player Stats app invites.

00:15:29.240 --> 00:15:31.420
More information
on the blogs that

00:15:31.420 --> 00:15:34.530
were posted about Google Play
services, so check those out.

00:15:34.530 --> 00:15:35.460
So battery.

00:15:35.460 --> 00:15:39.010
It turns out that battery
continues to be an issue ,

00:15:39.010 --> 00:15:43.230
and probably will continue to
be an issue after this, as well.

00:15:43.230 --> 00:15:45.360
Because basically apps
are doing more and more.

00:15:45.360 --> 00:15:48.136
The more capabilities
that a device has,

00:15:48.136 --> 00:15:50.010
the more apps want to
take advantage of that.

00:15:50.010 --> 00:15:52.580
They want their
data, all the time.

00:15:52.580 --> 00:15:54.380
Then we have a
problem on the device,

00:15:54.380 --> 00:15:56.940
because if all the applications
are doing lots of stuff

00:15:56.940 --> 00:15:59.045
all the time, then
pretty soon you're

00:15:59.045 --> 00:16:00.170
going to drain the battery.

00:16:00.170 --> 00:16:02.800
So we work really hard
at the platform level

00:16:02.800 --> 00:16:06.230
and we encourage apps to work
hard at the application level,

00:16:06.230 --> 00:16:10.127
as well, to reduce the
amount of drain overall.

00:16:10.127 --> 00:16:11.710
So there were a
couple of major things

00:16:11.710 --> 00:16:14.700
that we did in the release,
and people with M devices

00:16:14.700 --> 00:16:18.674
will notice this, especially if
you have your device not being

00:16:18.674 --> 00:16:21.090
used for a while, then it's
going to drain the battery far

00:16:21.090 --> 00:16:23.410
less than you expect
it to because we've got

00:16:23.410 --> 00:16:24.860
this thing called Doze mode.

00:16:24.860 --> 00:16:26.730
So if it detects
if it's basically

00:16:26.730 --> 00:16:28.850
sitting on a counter
somewhere not moving we're

00:16:28.850 --> 00:16:31.940
using the sensors to detect
whether the device is actually

00:16:31.940 --> 00:16:35.010
being used and if it's not
then why are we doing anything.

00:16:35.010 --> 00:16:36.500
So we'll go into
a deep sleep mode

00:16:36.500 --> 00:16:38.680
where we're not
sinking anything.

00:16:38.680 --> 00:16:41.410
We will still wake up for
the important things, if you

00:16:41.410 --> 00:16:43.670
have an alarm
scheduled or whatever,

00:16:43.670 --> 00:16:46.532
but we're not really the--
background apps aren't

00:16:46.532 --> 00:16:48.990
going out and getting a bunch
of data, which is frankly not

00:16:48.990 --> 00:16:50.980
going to be used if the
user is not actually

00:16:50.980 --> 00:16:52.652
using their device at the time.

00:16:52.652 --> 00:16:53.610
So we've got Doze mode.

00:16:53.610 --> 00:16:55.980
We've also got App
Standby mode, which

00:16:55.980 --> 00:16:59.660
is more at the application
level where we will notice

00:16:59.660 --> 00:17:02.910
that an application has not been
used for some amount of time,

00:17:02.910 --> 00:17:05.190
several days or
whatever, then why

00:17:05.190 --> 00:17:06.819
is that app continuing to sync.

00:17:06.819 --> 00:17:07.319
Right?

00:17:07.319 --> 00:17:10.380
If I haven't actually used
my reader app in four weeks,

00:17:10.380 --> 00:17:12.634
why is it going
out and retrieving,

00:17:12.634 --> 00:17:14.050
you know, sync
points in the books

00:17:14.050 --> 00:17:15.845
that I'm reading on
a different device.

00:17:15.845 --> 00:17:16.970
There's no reason for that.

00:17:16.970 --> 00:17:18.469
So we'll notice
that, and then we'll

00:17:18.469 --> 00:17:20.762
restrict the data usage
of that particular app

00:17:20.762 --> 00:17:22.720
so that it's not constantly
running and syncing

00:17:22.720 --> 00:17:25.200
in the background, draining
your battery for absolutely

00:17:25.200 --> 00:17:27.250
no reason whatsoever.

00:17:27.250 --> 00:17:29.630
We have Assistant
Support This is

00:17:29.630 --> 00:17:32.870
the Now On Tap stuff
that you may have seen

00:17:32.870 --> 00:17:36.080
at Google I/O. There's the
ability for your application

00:17:36.080 --> 00:17:39.370
to provide more information,
more contextual information.

00:17:39.370 --> 00:17:42.270
So there is some APIs that
you can opt in to here,

00:17:42.270 --> 00:17:45.760
override on provide assist
data, on provide assist content,

00:17:45.760 --> 00:17:48.320
and provide more information
back to the system

00:17:48.320 --> 00:17:52.410
so that we can give the user
even more context for how

00:17:52.410 --> 00:17:55.300
to use your application,
given the information that

00:17:55.300 --> 00:17:57.710
was on the screen at the time.

00:17:57.710 --> 00:17:58.340
Data Binding.

00:17:58.340 --> 00:18:01.500
So this is a big thing
that we did in the UI area.

00:18:01.500 --> 00:18:05.890
It's basically a way to save
the developer from writing

00:18:05.890 --> 00:18:07.550
a lot of boilerplate code.

00:18:07.550 --> 00:18:09.890
So it's not doing anything
fundamentally new,

00:18:09.890 --> 00:18:11.410
it's just doing
it in a way where

00:18:11.410 --> 00:18:13.410
we do the work instead of you.

00:18:13.410 --> 00:18:16.380
So if you imagine in a
UI there is usually a lot

00:18:16.380 --> 00:18:18.280
of listeners in the system.

00:18:18.280 --> 00:18:20.320
You're setting up, you're
creating these setters

00:18:20.320 --> 00:18:23.580
and getters and listeners, and
sending messages all around.

00:18:23.580 --> 00:18:27.730
And a lot of that is done
because basically the user did

00:18:27.730 --> 00:18:29.916
an action over here,
which needs to propagate

00:18:29.916 --> 00:18:31.040
to another item over there.

00:18:31.040 --> 00:18:32.840
You're dragging a
progress bar and you

00:18:32.840 --> 00:18:34.560
want to update a
text view somewhere,

00:18:34.560 --> 00:18:37.190
a label with the value
of that progress bar.

00:18:37.190 --> 00:18:39.760
Or the data itself
changed, and you

00:18:39.760 --> 00:18:42.910
want that information to be
displayed in the UI somehow.

00:18:42.910 --> 00:18:44.906
Well, now you can actually
connect those dots

00:18:44.906 --> 00:18:45.780
through data binding.

00:18:45.780 --> 00:18:48.590
We'll automatically
propagate that for you.

00:18:48.590 --> 00:18:52.250
So let's take a look at
a tiny little example.

00:18:52.250 --> 00:18:55.980
So you may have
a simple app, you

00:18:55.980 --> 00:18:58.440
have some image
views and text views,

00:18:58.440 --> 00:19:00.500
that are based on
information from some data

00:19:00.500 --> 00:19:03.430
that you're getting over
the network or off disk,

00:19:03.430 --> 00:19:04.770
or whatever.

00:19:04.770 --> 00:19:10.620
So we have a new kind of
layout tag called Layouts,

00:19:10.620 --> 00:19:14.210
and inside the
Layouts tag goes all

00:19:14.210 --> 00:19:17.150
of the information you used to
put for your view hierarchy.

00:19:17.150 --> 00:19:20.940
So the old layout .xml file,
or that goes in the layout

00:19:20.940 --> 00:19:23.260
resource directory, that
stuff still goes in there.

00:19:23.260 --> 00:19:26.160
And you can see this in the
slide in the frame layout tag.

00:19:26.160 --> 00:19:27.790
Normal view hierarchy stuff.

00:19:27.790 --> 00:19:29.590
But, in addition
to that, we also

00:19:29.590 --> 00:19:31.770
have a data area
of the layout where

00:19:31.770 --> 00:19:33.260
you declare the
variables that are

00:19:33.260 --> 00:19:35.870
going to be used by Data
Binding in the rest of the file.

00:19:35.870 --> 00:19:37.870
So we say, well we've got
a variable named Item,

00:19:37.870 --> 00:19:39.890
and here is the class
that it refers to,

00:19:39.890 --> 00:19:45.760
and then we have the items
below that refer to it.

00:19:45.760 --> 00:19:49.110
And say, well, we want
the source to be-- we

00:19:49.110 --> 00:19:52.590
want the source of the image
to be the value of this image

00:19:52.590 --> 00:19:54.220
field in this item.

00:19:54.220 --> 00:19:59.570
And it will go in and create
or use the getters and setters

00:19:59.570 --> 00:20:00.870
as necessary in there.

00:20:00.870 --> 00:20:03.920
And then for the text view we
want the information in there

00:20:03.920 --> 00:20:05.640
to come from the item itself.

00:20:05.640 --> 00:20:08.490
But notice it's not just
simply grabbing a field.

00:20:08.490 --> 00:20:11.440
We also have some
basic syntax in there

00:20:11.440 --> 00:20:14.290
that you can use to make
an expression in there.

00:20:14.290 --> 00:20:16.410
So here we're actually
formatting it and saying,

00:20:16.410 --> 00:20:18.992
make a string out of
the following values

00:20:18.992 --> 00:20:20.950
and then display that in
the text view instead.

00:20:20.950 --> 00:20:24.520
So then we get the dollar sign,
in dollars and cents in there.

00:20:24.520 --> 00:20:27.630
So, again, fairly
straightforward in what

00:20:27.630 --> 00:20:29.860
it's doing, but there's
a lot of stuff going

00:20:29.860 --> 00:20:33.860
on under the hood in particular
a lot of systems like this

00:20:33.860 --> 00:20:35.401
could be written
using reflection.

00:20:35.401 --> 00:20:37.400
OK, well they told us to
go look for this thing,

00:20:37.400 --> 00:20:39.407
so then at runtime, you're
going into the class

00:20:39.407 --> 00:20:41.240
and you're looking for
a field with his name

00:20:41.240 --> 00:20:43.630
or a getter and
setter with this name.

00:20:43.630 --> 00:20:45.450
But instead, we
do pre processing

00:20:45.450 --> 00:20:47.260
So we take this
layout file and we

00:20:47.260 --> 00:20:51.270
create the glue code,
all the classes that

00:20:51.270 --> 00:20:54.179
are going to be doing the
monitoring for the changes

00:20:54.179 --> 00:20:56.470
and data, and you know the
getters and setters that are

00:20:56.470 --> 00:20:57.732
necessary, and the listeners.

00:20:57.732 --> 00:21:00.560
We create that for you, so
that at runtime, we actually

00:21:00.560 --> 00:21:02.810
just send the information
through the normal mechanism

00:21:02.810 --> 00:21:05.820
that you would do if you
wrote optimal code to do this.

00:21:05.820 --> 00:21:07.520
So it's very
straightforward, there's

00:21:07.520 --> 00:21:08.980
no reflection used
in the system.

00:21:08.980 --> 00:21:10.289
It's all done at build time.

00:21:10.289 --> 00:21:11.830
Most of the
functionality is actually

00:21:11.830 --> 00:21:14.400
in the tool in Android
Studio, and then there's

00:21:14.400 --> 00:21:16.030
a little bit of
support in the support

00:21:16.030 --> 00:21:18.690
library with the
class of that you

00:21:18.690 --> 00:21:21.240
need to implement to observe
some of the information going

00:21:21.240 --> 00:21:22.000
on.

00:21:22.000 --> 00:21:25.570
There was a sandbox talk at
I/O which was not recorded,

00:21:25.570 --> 00:21:28.630
but there was recently another
talk at a meet up on data

00:21:28.630 --> 00:21:29.360
binding.

00:21:29.360 --> 00:21:31.570
And I think we're going to
have a talk in an upcoming

00:21:31.570 --> 00:21:32.403
conference, as well.

00:21:32.403 --> 00:21:34.972
So there should be some
recorded talks by the folks

00:21:34.972 --> 00:21:35.680
who work on that.

00:21:35.680 --> 00:21:37.414
Also, we had them
again-- I don't

00:21:37.414 --> 00:21:38.830
want to keep
plugging the podcast,

00:21:38.830 --> 00:21:40.070
I'm just trying to
think of the resources

00:21:40.070 --> 00:21:41.810
that we have for
this stuff-- we had

00:21:41.810 --> 00:21:45.940
Guy and George on our recent
version of the podcast,

00:21:45.940 --> 00:21:47.676
talking about that as well.

00:21:47.676 --> 00:21:49.300
So some of the UI
features that we had,

00:21:49.300 --> 00:21:50.940
in addition to data binding.

00:21:50.940 --> 00:21:52.810
We had a whole bunch
of stuff around what

00:21:52.810 --> 00:21:54.250
we call the Design Library.

00:21:54.250 --> 00:21:58.040
The Design Library was
basically us saying,

00:21:58.040 --> 00:22:00.407
well there was a whole lot
of stuff in the material spec

00:22:00.407 --> 00:22:01.990
that we asked
developers to implement,

00:22:01.990 --> 00:22:04.000
so that they could
have applications

00:22:04.000 --> 00:22:05.500
that look consistent
on the platform

00:22:05.500 --> 00:22:09.110
and we thought were good
UI practices and good UI

00:22:09.110 --> 00:22:10.540
experiences for people to have.

00:22:10.540 --> 00:22:12.739
And in the meantime,
you're on your own.

00:22:12.739 --> 00:22:14.280
So, we took a step
back and said, OK.

00:22:14.280 --> 00:22:15.520
What are some of
the common patterns

00:22:15.520 --> 00:22:17.311
that we're telling
developers to implement,

00:22:17.311 --> 00:22:19.510
which we could
help them out with.

00:22:19.510 --> 00:22:25.240
So we created a bunch of
smaller classes and UI widgets

00:22:25.240 --> 00:22:29.040
that developers can now just
use to get a consistent look

00:22:29.040 --> 00:22:31.530
and feel with everybody else
using those same widgets.

00:22:31.530 --> 00:22:33.710
At the top of that
hierarchy is Coordinate

00:22:33.710 --> 00:22:36.400
a Layout, which is-- you
wouldn't use directly,

00:22:36.400 --> 00:22:38.700
but it's basically the
Chrome that everybody plugs

00:22:38.700 --> 00:22:41.010
into for these other pieces.

00:22:41.010 --> 00:22:43.570
It's sort of the things
sitting at the top

00:22:43.570 --> 00:22:48.370
if you want to have
your Snackbar you, need

00:22:48.370 --> 00:22:50.550
to sort of plug it in at
the top of the hierarchy,

00:22:50.550 --> 00:22:52.133
not just have it
hanging out in space.

00:22:52.133 --> 00:22:54.800
Or if you want the FAB to sort
of live somewhere standard,

00:22:54.800 --> 00:22:57.390
all this stuff is plugging
into the coordinator

00:22:57.390 --> 00:23:00.120
layout, kind of the architect
of the rest of these things.

00:23:00.120 --> 00:23:01.240
We have the Snackbar.

00:23:01.240 --> 00:23:03.040
We have Tablayouts.

00:23:03.040 --> 00:23:04.970
We've got the NavigationView.

00:23:04.970 --> 00:23:07.317
Just standard UI
patterns that we've

00:23:07.317 --> 00:23:09.650
been talking about for a
while, but we encapsulated them

00:23:09.650 --> 00:23:12.260
into these standard widgets
in the Support Library

00:23:12.260 --> 00:23:13.754
so that everybody can use these.

00:23:13.754 --> 00:23:15.420
And because it's in
the Support Library,

00:23:15.420 --> 00:23:18.900
you can use those on
releases prior to M, as well.

00:23:18.900 --> 00:23:21.030
TextInputLayout, so it
gives you more information

00:23:21.030 --> 00:23:23.840
about the text that's being
expected in that field.

00:23:23.840 --> 00:23:25.470
And then the FAB.

00:23:25.470 --> 00:23:27.670
And we always thought--
the question came up

00:23:27.670 --> 00:23:30.860
while we were in development
in the L release about,

00:23:30.860 --> 00:23:32.940
well, should we
release a FAB widget.

00:23:32.940 --> 00:23:37.890
And we decided not to because,
A, it's not straightforward.

00:23:37.890 --> 00:23:40.920
It's not like you're
gonna have a fab widget

00:23:40.920 --> 00:23:42.540
and it's gonna do
everything you want.

00:23:42.540 --> 00:23:45.010
Well where do you want
that fab widget to live?

00:23:45.010 --> 00:23:47.440
Like what is the
container that it actually

00:23:47.440 --> 00:23:50.810
lives in, since it's sort of
overriding several of them?

00:23:50.810 --> 00:23:52.620
So that was a little
more complicated now

00:23:52.620 --> 00:23:54.970
solved by the
Coordinator Layout thing.

00:23:54.970 --> 00:23:57.390
But also it was like,
well, it's a circle.

00:23:57.390 --> 00:23:58.860
It's a circle with
a drop shadow.

00:23:58.860 --> 00:23:59.360
You know.

00:23:59.360 --> 00:24:00.790
How hard is this thing.

00:24:00.790 --> 00:24:03.260
Turns out it was
trickier for some people,

00:24:03.260 --> 00:24:05.290
and in particular it
was also inconsistent.

00:24:05.290 --> 00:24:07.770
People would pick different
elevations, or different ways

00:24:07.770 --> 00:24:09.361
of displaying the
shadows, or they

00:24:09.361 --> 00:24:11.360
would have circles that
were of different sizes.

00:24:11.360 --> 00:24:13.360
So we thought, maybe it's better
if we actually just come out

00:24:13.360 --> 00:24:16.060
with a standard widget so that
everybody has the same notion

00:24:16.060 --> 00:24:17.990
of what a FAB is.

00:24:17.990 --> 00:24:21.410
So there it is, the FAB.

00:24:21.410 --> 00:24:24.710
Sorry, I should say
that you work with UX,

00:24:24.710 --> 00:24:27.590
and they use a lot of
acronyms and buzzwords, which

00:24:27.590 --> 00:24:29.507
if you're not in
the design group,

00:24:29.507 --> 00:24:31.340
you have no idea what
they're talking about.

00:24:31.340 --> 00:24:33.730
So I worked with them,
like, for several months.

00:24:33.730 --> 00:24:36.270
And I kept hearing
them say FAB, FAB, FAB.

00:24:36.270 --> 00:24:38.100
And then finally I just
started saying FAB.

00:24:38.100 --> 00:24:40.550
Floating Action Button.

00:24:40.550 --> 00:24:41.060
All right.

00:24:41.060 --> 00:24:42.730
Everybody clear on that?

00:24:42.730 --> 00:24:44.070
Floating Action Button.

00:24:44.070 --> 00:24:47.120
Stop talking like a designer.

00:24:47.120 --> 00:24:47.920
All right.

00:24:47.920 --> 00:24:48.890
Other UI changes.

00:24:48.890 --> 00:24:50.300
So, RecyclerView.

00:24:50.300 --> 00:24:51.650
Swipe-to-dismiss.

00:24:51.650 --> 00:24:53.850
There's a nice
interaction point there.

00:24:53.850 --> 00:24:56.830
If anybody has tried to
make this work in list view,

00:24:56.830 --> 00:24:57.850
not straight forward.

00:24:57.850 --> 00:24:59.070
Same thing with drag &amp; drop.

00:24:59.070 --> 00:25:01.250
I know because we
did videos explaining

00:25:01.250 --> 00:25:02.730
how to do this in ListView.

00:25:02.730 --> 00:25:05.070
One of the whole goals
with RecyclerView

00:25:05.070 --> 00:25:08.500
was to give developers and users
something out of the box that

00:25:08.500 --> 00:25:11.100
just kind of did what you
wanted, as opposed to giving

00:25:11.100 --> 00:25:12.930
you the framework
in the plumbing

00:25:12.930 --> 00:25:16.374
and then you're on your own
with this fairly complex widget.

00:25:16.374 --> 00:25:18.540
Which resulted in people
doing it in different ways,

00:25:18.540 --> 00:25:20.998
or simply not doing it because
it was a complicated problem

00:25:20.998 --> 00:25:21.870
to solve.

00:25:21.870 --> 00:25:23.340
So RecyclerView came along.

00:25:23.340 --> 00:25:25.380
It's much more
plugable and flexible,

00:25:25.380 --> 00:25:27.450
with a lot of built in
behaviors, like animations

00:25:27.450 --> 00:25:29.760
for the simple
straightforward operations.

00:25:29.760 --> 00:25:31.850
And then we've been
adding things to it since.

00:25:31.850 --> 00:25:33.660
So drag &amp; drop and
swipe-to-dismiss

00:25:33.660 --> 00:25:34.540
are two of those.

00:25:34.540 --> 00:25:37.210
And then more recently
in the 23.1 release,

00:25:37.210 --> 00:25:41.450
which came out last
week, we took another run

00:25:41.450 --> 00:25:44.870
at item animations,
in particular.

00:25:44.870 --> 00:25:47.270
We got the request
from some people

00:25:47.270 --> 00:25:50.370
that it was difficult to
do a richer animation when

00:25:50.370 --> 00:25:51.419
the content was changing.

00:25:51.419 --> 00:25:53.710
There was a built in animation
where you could say, OK.

00:25:53.710 --> 00:25:54.919
The following item changed.

00:25:54.919 --> 00:25:57.210
And then we would replace
the old view with the new one

00:25:57.210 --> 00:25:59.070
and we would do a cross
fade between them.

00:25:59.070 --> 00:26:01.430
That's reasonable,
but if your views

00:26:01.430 --> 00:26:04.400
are very rich and expensive,
you didn't necessarily

00:26:04.400 --> 00:26:07.470
want to create a new
view for that thing.

00:26:07.470 --> 00:26:09.400
Additionally you might
want a richer animation

00:26:09.400 --> 00:26:12.150
to animate, you know, the
text into its new location,

00:26:12.150 --> 00:26:14.490
or a color change, or whatever.

00:26:14.490 --> 00:26:18.220
So with the new
content animations,

00:26:18.220 --> 00:26:20.957
you have the ability to
override and do something custom

00:26:20.957 --> 00:26:22.340
all on your own.

00:26:22.340 --> 00:26:25.940
And in addition to that, you
can actually use the same view,

00:26:25.940 --> 00:26:28.780
so we're not necessarily
going to replace the holder

00:26:28.780 --> 00:26:29.980
if you don't want us to.

00:26:29.980 --> 00:26:32.660
We can have you
reuse that holder

00:26:32.660 --> 00:26:36.710
and you can animate the stuff
around, however you want.

00:26:36.710 --> 00:26:39.100
In WebView, they
have the ability

00:26:39.100 --> 00:26:40.840
to now render
offscreen, which is

00:26:40.840 --> 00:26:43.070
helpful in the
particular situation of,

00:26:43.070 --> 00:26:44.820
if you want to animate
something on screen

00:26:44.820 --> 00:26:46.980
and you don't want it to
be drawing at the same time

00:26:46.980 --> 00:26:47.771
as it's doing that.

00:26:47.771 --> 00:26:50.040
So you can pre draw
it, using more memory

00:26:50.040 --> 00:26:53.200
to do that off screen
and then animate it in.

00:26:53.200 --> 00:26:54.060
Notifications.

00:26:54.060 --> 00:26:57.340
So there was a new class added
called Icon, which is basically

00:26:57.340 --> 00:27:00.250
a holder for several different
kinds of information.

00:27:00.250 --> 00:27:04.090
It can be a resource ID or
a bitmap or a byte array.

00:27:04.090 --> 00:27:07.950
This is basically about having
a more optimal way to hold

00:27:07.950 --> 00:27:11.850
the information, so that
we're not constantly

00:27:11.850 --> 00:27:13.990
recreating it along the fly.

00:27:13.990 --> 00:27:16.257
If you're passing
around a notifications,

00:27:16.257 --> 00:27:17.840
if you're passing
around a resource ID

00:27:17.840 --> 00:27:18.970
and then it needs
to get inflated

00:27:18.970 --> 00:27:20.810
by this part of the
system and then passed

00:27:20.810 --> 00:27:23.346
over this other process, it
then inflates that resource ID.

00:27:23.346 --> 00:27:25.220
Like, everybody's going
through the same work

00:27:25.220 --> 00:27:26.120
over and over again.

00:27:26.120 --> 00:27:29.770
So instead we have
this holder structure

00:27:29.770 --> 00:27:31.670
that holds whatever
representations

00:27:31.670 --> 00:27:33.370
are most optimal.

00:27:33.370 --> 00:27:35.284
So you can create
it with a resource,

00:27:35.284 --> 00:27:37.200
that's one of the ways
you can use this thing.

00:27:37.200 --> 00:27:39.020
But can also create
with a bitmap.

00:27:39.020 --> 00:27:41.430
So this could be
handy if you have

00:27:41.430 --> 00:27:43.690
resources that
indicate information

00:27:43.690 --> 00:27:45.800
that can be variable over time.

00:27:45.800 --> 00:27:49.250
So, Dan's example, when we
talked about this at I/O,

00:27:49.250 --> 00:27:51.430
was a weather application
may have different icons

00:27:51.430 --> 00:27:52.720
for different temperatures.

00:27:52.720 --> 00:27:55.270
Well since we only allowed
you to create notifications

00:27:55.270 --> 00:27:57.730
from resources before,
then you would actually

00:27:57.730 --> 00:27:59.760
have to have assets
representing all

00:27:59.760 --> 00:28:02.680
the different possible
combinations of temperatures,

00:28:02.680 --> 00:28:04.760
which could be a
lot if you don't

00:28:04.760 --> 00:28:07.020
live in California or Hawaii.

00:28:07.020 --> 00:28:09.610
And so instead, you can actually
create those dynamically.

00:28:09.610 --> 00:28:11.350
And then you can
create this icon class

00:28:11.350 --> 00:28:13.490
with a bitmap instead
of the resource ID.

00:28:13.490 --> 00:28:17.420
So you don't need to have any of
these available at build time.

00:28:17.420 --> 00:28:19.210
Instead, they can be
generated at run time

00:28:19.210 --> 00:28:21.870
whenever you need them.

00:28:21.870 --> 00:28:24.930
We had some changes in
text mostly in the UI area.

00:28:24.930 --> 00:28:27.700
So the way that you select
text is much more natural

00:28:27.700 --> 00:28:28.850
and powerful now.

00:28:28.850 --> 00:28:32.250
So you've got the text
handles as before, but now as

00:28:32.250 --> 00:28:36.450
you drag them out, they expand
by word, instead of always

00:28:36.450 --> 00:28:37.000
by character.

00:28:37.000 --> 00:28:39.720
And then as you contract,
it contracts by character.

00:28:39.720 --> 00:28:43.940
So you can still select the same
amount, the same granularity

00:28:43.940 --> 00:28:47.810
as you could before, but
common selection operations

00:28:47.810 --> 00:28:50.830
should be much easier and
more fluid to the user.

00:28:50.830 --> 00:28:53.490
In addition to that, you'll
notice the floating palette

00:28:53.490 --> 00:28:55.060
there.

00:28:55.060 --> 00:28:58.080
Prior to this change
when you selected text,

00:28:58.080 --> 00:28:59.580
we would indicate
what you could do,

00:28:59.580 --> 00:29:01.500
the actions you could
do with that text

00:29:01.500 --> 00:29:05.210
up in the action bar, which
on a phone is not a big deal.

00:29:05.210 --> 00:29:07.590
On a tablet is a much
bigger deal, right,

00:29:07.590 --> 00:29:09.880
because you may be selecting
text way down here,

00:29:09.880 --> 00:29:11.820
and the actions pop up
in a place that's not

00:29:11.820 --> 00:29:13.485
even necessarily in your view.

00:29:13.485 --> 00:29:15.610
So now we have this floating
action palette instead

00:29:15.610 --> 00:29:18.390
that pops up next to the
area that you just indicated

00:29:18.390 --> 00:29:20.360
you want to work with.

00:29:20.360 --> 00:29:22.280
We also have the ability
to process a text

00:29:22.280 --> 00:29:24.605
so you can have an
intent launched when

00:29:24.605 --> 00:29:25.980
the user indicates
that they want

00:29:25.980 --> 00:29:27.271
to do something with that text.

00:29:27.271 --> 00:29:29.300
So you could have, say
a translation service,

00:29:29.300 --> 00:29:31.312
that can take the text
that was selected,

00:29:31.312 --> 00:29:33.020
and that will be passed
into your intent.

00:29:33.020 --> 00:29:35.610
And you can change that
to whatever you want to,

00:29:35.610 --> 00:29:37.980
and pass that back to the user.

00:29:37.980 --> 00:29:41.010
So check out that API for
more information there.

00:29:41.010 --> 00:29:44.060
And we also have a higher
quality text formatting.

00:29:44.060 --> 00:29:45.750
This is sort of an
ongoing concern,

00:29:45.750 --> 00:29:48.470
how can we make our text
higher quality in general.

00:29:48.470 --> 00:29:51.530
One of those ways is by
providing better breaking.

00:29:51.530 --> 00:29:54.169
So this means, figuring out
how long all the words are

00:29:54.169 --> 00:29:55.710
and then breaking
appropriately so we

00:29:55.710 --> 00:29:58.760
don't have this really staggered
thing on the right that

00:29:58.760 --> 00:30:00.040
looks rather awkward.

00:30:00.040 --> 00:30:02.220
And a big part of that
was enabling hyphenation,

00:30:02.220 --> 00:30:05.290
which after having had many
conversations with the text

00:30:05.290 --> 00:30:07.610
people in my group, it's
a lot harder problem

00:30:07.610 --> 00:30:08.930
than you think it would be.

00:30:08.930 --> 00:30:10.831
There's like standard
data where people

00:30:10.831 --> 00:30:13.330
expose how to break different
words, and if you think about,

00:30:13.330 --> 00:30:16.310
well, you know, I kind of know
how syllables work in English.

00:30:16.310 --> 00:30:18.820
I don't know how they work in
other languages, especially

00:30:18.820 --> 00:30:20.900
languages that are
maybe left to right

00:30:20.900 --> 00:30:23.760
or have a completely different
representation of characters

00:30:23.760 --> 00:30:25.910
and ligatures, and
you know, characters

00:30:25.910 --> 00:30:29.890
that get built up together
into single characters.

00:30:29.890 --> 00:30:32.660
It's very, very complicated.

00:30:32.660 --> 00:30:34.800
So we're on our way
to solving that.

00:30:34.800 --> 00:30:37.640
There's still some other
internationalization support

00:30:37.640 --> 00:30:38.640
that we're working on.

00:30:38.640 --> 00:30:41.270
But in the meantime we may
have much higher quality text

00:30:41.270 --> 00:30:43.740
breaking in hyphenation
as part of that.

00:30:43.740 --> 00:30:47.040
We also have the ability in
static layout to set indent,

00:30:47.040 --> 00:30:50.410
so you can set it
to a shaped path.

00:30:50.410 --> 00:30:53.200
So you can see here, we've
got the nice round text.

00:30:53.200 --> 00:30:55.577
This turns out to be also
a hard problem to solve,

00:30:55.577 --> 00:30:57.910
but we've basically just got
a really simple way for you

00:30:57.910 --> 00:31:01.620
to say, this is the indents that
I want in this particular area

00:31:01.620 --> 00:31:03.270
that I have.

00:31:03.270 --> 00:31:04.290
App Linking.

00:31:04.290 --> 00:31:07.560
It's possible for you now
when the user selects a link

00:31:07.560 --> 00:31:10.280
to launch your
application, and this

00:31:10.280 --> 00:31:13.800
happens through a combination
of your application

00:31:13.800 --> 00:31:15.450
that's installed on
the device, as well

00:31:15.450 --> 00:31:18.680
as your website, your domain
out there because it's

00:31:18.680 --> 00:31:21.200
going to be a handshake
between the two of them.

00:31:21.200 --> 00:31:27.294
So you have this .json file
that has the information about

00:31:27.294 --> 00:31:28.710
the thing that
should be launched,

00:31:28.710 --> 00:31:31.840
and certificate information
so that we know, you know,

00:31:31.840 --> 00:31:34.760
all the right information is
being shared between the right

00:31:34.760 --> 00:31:35.370
parties here.

00:31:35.370 --> 00:31:38.660
So we have this asset links
.json with the information

00:31:38.660 --> 00:31:40.620
about the app that
should be launched.

00:31:40.620 --> 00:31:43.290
And then we've got something
in the manifest on the device

00:31:43.290 --> 00:31:44.520
side that says, OK.

00:31:44.520 --> 00:31:47.090
Here's the URL
that it refers to.

00:31:47.090 --> 00:31:51.510
And we have auto verify
equals true, so this handshake

00:31:51.510 --> 00:31:53.720
between the two--
your domain out there,

00:31:53.720 --> 00:31:55.130
your device over here.

00:31:55.130 --> 00:31:57.406
And then we know,
at install time,

00:31:57.406 --> 00:31:59.780
we'll go and look for that
file, look for the information

00:31:59.780 --> 00:32:02.430
and know, OK, when the user
goes to that website here's

00:32:02.430 --> 00:32:04.690
the application that I'm
going to launch instead.

00:32:04.690 --> 00:32:08.470
And then the user can change
this in settings if they want.

00:32:08.470 --> 00:32:09.840
Direct Share.

00:32:09.840 --> 00:32:12.840
This is the ability
for an application

00:32:12.840 --> 00:32:15.310
to share deeper links
within an application,

00:32:15.310 --> 00:32:17.430
instead of just the
application itself.

00:32:17.430 --> 00:32:22.570
So if you are interacting with
a particular user in a chat

00:32:22.570 --> 00:32:25.410
application, maybe
it would make sense

00:32:25.410 --> 00:32:29.550
to share information about a
chat with that particular user,

00:32:29.550 --> 00:32:32.070
instead of just a chat
application overall.

00:32:32.070 --> 00:32:34.810
So you say, well,
here's a chooser service

00:32:34.810 --> 00:32:36.070
that I'm going to implement.

00:32:36.070 --> 00:32:38.640
So when it needs to it
will launch that chooser

00:32:38.640 --> 00:32:40.710
service that you implemented,
and it'll ask you,

00:32:40.710 --> 00:32:43.920
are there other targets
that I should choose for you

00:32:43.920 --> 00:32:49.370
when they want to go into some,
let's say, the chat target.

00:32:49.370 --> 00:32:51.550
And then you can expose
different information there.

00:32:51.550 --> 00:32:54.700
So you can say, not just launch
the Hangouts application,

00:32:54.700 --> 00:32:58.150
for example, but launch it to
one of these particular users

00:32:58.150 --> 00:33:00.170
that they chat with frequently.

00:33:00.170 --> 00:33:01.480
We have stylus support.

00:33:01.480 --> 00:33:05.460
We always had stylus
support, to some extent.

00:33:05.460 --> 00:33:07.690
But it was particular
stylus devices,

00:33:07.690 --> 00:33:09.920
it was something that
was plugged in there.

00:33:09.920 --> 00:33:11.480
Now we have Bluetooth
stylus support

00:33:11.480 --> 00:33:14.060
and we have some new events
that go along with it.

00:33:14.060 --> 00:33:16.600
In particular, we
have the button

00:33:16.600 --> 00:33:18.910
stylus primary and
button stylus secondary.

00:33:18.910 --> 00:33:25.250
Button stylus primary equates
to the button secondary

00:33:25.250 --> 00:33:26.550
in earlier releases.

00:33:26.550 --> 00:33:29.060
So if you want to track
the same event prior to M,

00:33:29.060 --> 00:33:30.260
you can certainly do that.

00:33:30.260 --> 00:33:32.760
But if want to track the
stylus event directly in M,

00:33:32.760 --> 00:33:34.630
then use the stylus primary.

00:33:34.630 --> 00:33:36.100
This is because
the button press,

00:33:36.100 --> 00:33:39.610
we still want to track when
the user clicks-- presses

00:33:39.610 --> 00:33:42.090
on the screen, we want to
know that that's actually

00:33:42.090 --> 00:33:44.210
a touch event, as opposed
to a stylus event.

00:33:44.210 --> 00:33:46.860
So that's the primary event
is button press primary

00:33:46.860 --> 00:33:50.790
and then button press secondary
is an alias to the button

00:33:50.790 --> 00:33:52.640
stylus primary.

00:33:52.640 --> 00:33:55.160
And then you can have things
like the click drag gestures,

00:33:55.160 --> 00:33:57.090
so they can select
that thing and drag it

00:33:57.090 --> 00:33:59.650
on the screen with a stylus.

00:33:59.650 --> 00:34:00.150
Let's see.

00:34:00.150 --> 00:34:01.480
Graphics.

00:34:01.480 --> 00:34:02.810
Let's talk about graphics.

00:34:02.810 --> 00:34:05.060
We have something in the camera.

00:34:05.060 --> 00:34:07.910
So it used to be that if you
want to turn on the flashlight,

00:34:07.910 --> 00:34:11.770
you would grab the camera just
to enable the flashlight, which

00:34:11.770 --> 00:34:13.889
seems like a lot of
work to go through

00:34:13.889 --> 00:34:17.980
just to light up the closet
when you're in there at night.

00:34:17.980 --> 00:34:19.630
So instead, we no
longer require that.

00:34:19.630 --> 00:34:21.255
You can actually turn
on the flashlight

00:34:21.255 --> 00:34:23.190
without grabbing the
Mutex or the camera

00:34:23.190 --> 00:34:25.900
and wasting a lot of
battery in the meantime.

00:34:25.900 --> 00:34:29.989
And then there's a simple
API that you can use there.

00:34:29.989 --> 00:34:31.000
Alpha optimization.

00:34:31.000 --> 00:34:32.320
So.

00:34:32.320 --> 00:34:35.199
This gets into some of
the perfmatters stuff

00:34:35.199 --> 00:34:37.350
that Colt likes to talk about.

00:34:37.350 --> 00:34:41.719
When you are fading out of view,
or setting alpha on a view,

00:34:41.719 --> 00:34:45.810
if that view is complicated
it's usually optimal for you

00:34:45.810 --> 00:34:47.810
to create a layer for that view.

00:34:47.810 --> 00:34:50.070
So that we draw it
once to that layer,

00:34:50.070 --> 00:34:52.149
and then we simply
fade that layer.

00:34:52.149 --> 00:34:54.440
So, for instance, if you're
running a fading animation,

00:34:54.440 --> 00:34:56.639
if you're fading into
view or fading it out,

00:34:56.639 --> 00:34:59.400
it would be typical to
use the animated API.

00:34:59.400 --> 00:35:04.620
So you'd say,
view.animate.withlayer and that

00:35:04.620 --> 00:35:05.910
tells us to build a layer.

00:35:05.910 --> 00:35:09.090
And then you animate
alpha to fade it in.

00:35:09.090 --> 00:35:12.010
And then you layer gets
torn down when we're done.

00:35:12.010 --> 00:35:14.360
We basically do that
for you automatically.

00:35:14.360 --> 00:35:16.120
So when we notice
that you're setting

00:35:16.120 --> 00:35:19.100
alpha on a layer we will
create, er alpha on a view,

00:35:19.100 --> 00:35:21.290
we'll create a layer for you.

00:35:21.290 --> 00:35:23.540
And this saves us
from, if you imagine

00:35:23.540 --> 00:35:27.490
what the alpha operation
is, the way alpha has

00:35:27.490 --> 00:35:29.730
to work is that we have
to draw that view the way

00:35:29.730 --> 00:35:32.722
we normally do, so opaquely,
to an external buffer.

00:35:32.722 --> 00:35:34.430
And then when we're
done with that thing,

00:35:34.430 --> 00:35:36.250
we copy it in translucently.

00:35:36.250 --> 00:35:38.320
It's not good enough
for us to draw

00:35:38.320 --> 00:35:41.220
all of the individual
operations translucently.

00:35:41.220 --> 00:35:42.920
It's a little hard to explain.

00:35:42.920 --> 00:35:45.161
I could use a white
board and show you,

00:35:45.161 --> 00:35:47.410
but we can't do that, which
means that's the cheap way

00:35:47.410 --> 00:35:48.618
to do it and we can't use it.

00:35:48.618 --> 00:35:51.730
Instead, we create a buffer,
draw everything, copy it in,

00:35:51.730 --> 00:35:52.550
destroy the buffer.

00:35:52.550 --> 00:35:54.740
Huge wasted effort on
every single frame.

00:35:54.740 --> 00:35:57.592
It's much better to create
the buffer once, use it

00:35:57.592 --> 00:35:59.050
for all the frames
that you wanted,

00:35:59.050 --> 00:36:00.406
and then tear down the buffer.

00:36:00.406 --> 00:36:01.280
So that's what we do.

00:36:01.280 --> 00:36:03.230
When we set alpha,
we automatically

00:36:03.230 --> 00:36:06.370
create a layer for you, and
then we use that from then on.

00:36:06.370 --> 00:36:08.160
It's still better
for you to do it

00:36:08.160 --> 00:36:11.420
because you know more about
how that view is being used,

00:36:11.420 --> 00:36:14.920
how your animation is being run,
and the timing that you want.

00:36:14.920 --> 00:36:18.457
When we first notice
that alpha is non opaque,

00:36:18.457 --> 00:36:20.040
that's when we create
the layer, which

00:36:20.040 --> 00:36:22.420
means that you may take
a hit on that first frame

00:36:22.420 --> 00:36:25.120
as we're going to the effort
of creating the buffer.

00:36:25.120 --> 00:36:27.350
So you may rather take that
hit at a different time

00:36:27.350 --> 00:36:29.010
when the user is
not going to notice.

00:36:29.010 --> 00:36:33.380
So, still use the set layer type
or with layer in View Property

00:36:33.380 --> 00:36:35.580
Animator, but if
you don't we'll try

00:36:35.580 --> 00:36:37.920
to do the right thing
in the platform.

00:36:37.920 --> 00:36:40.330
In the audio area, the
big change was MIDI.

00:36:40.330 --> 00:36:42.700
So you can already do
MIDI if you wanted,

00:36:42.700 --> 00:36:44.200
but you were kind
of on your own.

00:36:44.200 --> 00:36:44.700
Right?

00:36:44.700 --> 00:36:47.536
You could receive all the
information through USB

00:36:47.536 --> 00:36:49.410
and you could do whatever
you wanted with it.

00:36:49.410 --> 00:36:51.080
But now we have classes
and capabilities

00:36:51.080 --> 00:36:54.460
that we built for you to
make this a lot easier.

00:36:54.460 --> 00:36:56.570
And we also made
it two directional.

00:36:56.570 --> 00:36:59.730
So not only do you have
the ability for someone

00:36:59.730 --> 00:37:04.220
to play a device into
the Android device

00:37:04.220 --> 00:37:06.690
and send in the
note information,

00:37:06.690 --> 00:37:09.750
and you know velocity, and
which channel they're playing,

00:37:09.750 --> 00:37:11.780
and then you can play
it from your application

00:37:11.780 --> 00:37:16.064
if you have some sample,
some sound database,

00:37:16.064 --> 00:37:17.980
then you can actually
play those samples based

00:37:17.980 --> 00:37:20.646
on the node information that was
coming into the Android device.

00:37:20.646 --> 00:37:22.552
But now you also
have the ability

00:37:22.552 --> 00:37:24.010
to send the
information out, so you

00:37:24.010 --> 00:37:26.040
can have a keyboard
on the Android device,

00:37:26.040 --> 00:37:27.900
sending the node
information out, playing

00:37:27.900 --> 00:37:31.314
those samples from the
external sample device.

00:37:31.314 --> 00:37:32.730
So both sides of
that to check out

00:37:32.730 --> 00:37:35.840
MIDI Device Manager and
MIDI Device Service to

00:37:35.840 --> 00:37:38.010
know how to interact with those.

00:37:38.010 --> 00:37:40.830
In Tools, there's been a
bunch of stuff coming up

00:37:40.830 --> 00:37:42.830
to I/O, but also since then.

00:37:42.830 --> 00:37:45.910
So, the 1.4 release
came out recently,

00:37:45.910 --> 00:37:47.870
and we have the ability
to actually do stuff

00:37:47.870 --> 00:37:48.850
with Vector Drawable.

00:37:48.850 --> 00:37:51.940
So you can visualize Vector
Drawables in the Tool now,

00:37:51.940 --> 00:37:56.430
and you can also take a look
at a lot of standard SVG files

00:37:56.430 --> 00:38:00.800
and import those, or export
those, as Vector Drawables.

00:38:00.800 --> 00:38:04.810
And I think save those as image
files, as well, so a lot more

00:38:04.810 --> 00:38:07.490
flexibility in how you
can deal with vector

00:38:07.490 --> 00:38:09.490
art in your application

00:38:09.490 --> 00:38:12.190
And also Design
Library Templates.

00:38:12.190 --> 00:38:13.860
So there's a lot more
templates in there

00:38:13.860 --> 00:38:16.260
that you can use for
standard design patterns that

00:38:16.260 --> 00:38:18.280
use some of the design
library components

00:38:18.280 --> 00:38:20.090
that I was talking
about earlier.

00:38:20.090 --> 00:38:21.150
There's a Theme Editor.

00:38:21.150 --> 00:38:23.240
Right now it currently
only handles colors,

00:38:23.240 --> 00:38:26.030
but allows you to see
the color palette that's

00:38:26.030 --> 00:38:29.230
being used and interact
with that and change that.

00:38:29.230 --> 00:38:30.540
GPU and Network Monitors.

00:38:30.540 --> 00:38:31.610
These are cool.

00:38:31.610 --> 00:38:33.740
There's a lot of
new functionality

00:38:33.740 --> 00:38:35.720
that's being integrated
into the tool that

00:38:35.720 --> 00:38:37.840
allows you to get the
kinds of information

00:38:37.840 --> 00:38:40.110
that Colt likes to talk
about in his videos.

00:38:40.110 --> 00:38:42.720
In particular, this gives
you the information,

00:38:42.720 --> 00:38:47.230
if you look up at the top one,
that is eerily similar to what

00:38:47.230 --> 00:38:48.640
you can already
get on the device

00:38:48.640 --> 00:38:51.354
if you enable GPU profile.

00:38:51.354 --> 00:38:53.020
You get these colored
bars on the screen

00:38:53.020 --> 00:38:54.820
that give you information
about how long

00:38:54.820 --> 00:38:56.920
it took us to process
the drawing commands,

00:38:56.920 --> 00:38:59.390
how long it took us to send
the information to openGL,

00:38:59.390 --> 00:39:02.190
how long it took us to get
the buffer back from openGL.

00:39:02.190 --> 00:39:05.200
That information is now
propagated back to the host

00:39:05.200 --> 00:39:07.330
and you can see it in real
time in the GPU monitor.

00:39:07.330 --> 00:39:08.920
And in the Network
Monitor you can

00:39:08.920 --> 00:39:12.350
see how much information is
going in and out of the device

00:39:12.350 --> 00:39:14.612
from your application there.

00:39:14.612 --> 00:39:16.570
We've got Firebase
integration, for people that

00:39:16.570 --> 00:39:18.260
are really into databases, yes?

00:39:18.260 --> 00:39:18.990
Yes?

00:39:18.990 --> 00:39:20.490
Not me, either.

00:39:20.490 --> 00:39:21.452
1.5.

00:39:21.452 --> 00:39:22.910
I'm sorry, it's
terribly important.

00:39:22.910 --> 00:39:25.060
It's just I'm just
not a data person.

00:39:25.060 --> 00:39:26.459
1.5.

00:39:26.459 --> 00:39:27.000
This is cool.

00:39:27.000 --> 00:39:28.100
Heap dump analysis.

00:39:28.100 --> 00:39:30.810
There's been a couple of cool
things about this recently.

00:39:30.810 --> 00:39:35.770
It used to be, if you
wanted to find leaks,

00:39:35.770 --> 00:39:39.080
important things like activity
leaks, which I may or may not

00:39:39.080 --> 00:39:44.110
admit to having introduced
at some points in my past--

00:39:44.110 --> 00:39:47.440
ask me some time
about leak hash map.

00:39:47.440 --> 00:39:51.920
So, what you would do is
you would take a heap dump.

00:39:51.920 --> 00:39:54.880
So there is something in
Android monitor or DDMS where

00:39:54.880 --> 00:39:56.250
you can say, take a heap dump.

00:39:56.250 --> 00:39:59.511
You'd typically like, GC GC
and then take a heap dump.

00:39:59.511 --> 00:40:01.260
And then you would
convert that heap dump,

00:40:01.260 --> 00:40:03.560
and then you would run
a tool like MAT which

00:40:03.560 --> 00:40:07.210
is a clips standalone or
plugin thing that you can run,

00:40:07.210 --> 00:40:09.980
and then you would get
a ton of information

00:40:09.980 --> 00:40:12.560
that you would then try
to sort of wade through.

00:40:12.560 --> 00:40:14.430
It's like systrace
for memory, right?

00:40:14.430 --> 00:40:16.680
You would wade through this
information to figure out,

00:40:16.680 --> 00:40:19.480
what existed that
I did not expect,

00:40:19.480 --> 00:40:21.920
like seven instances
of my activity.

00:40:21.920 --> 00:40:24.510
And then you'd trace it back to
the root set and say, OK why,

00:40:24.510 --> 00:40:25.180
did it exist?

00:40:25.180 --> 00:40:28.340
Who is referring to this thing
that I thought went away?

00:40:28.340 --> 00:40:30.300
Turns out that answer
is a static hash map.

00:40:33.370 --> 00:40:35.320
So, instead, there's
a couple of new tools

00:40:35.320 --> 00:40:36.060
that are worth mentioning.

00:40:36.060 --> 00:40:37.870
One is an external
tool called LeakCanary.

00:40:37.870 --> 00:40:40.570
Have people heard of this thing?

00:40:40.570 --> 00:40:45.520
Again, we talked to the guy
at square, PY, or Pierryve.

00:40:45.520 --> 00:40:48.260
He goes by PY because,
apparently, Americans

00:40:48.260 --> 00:40:52.630
can't pronounce his name, who
wrote LeakCanary and its code

00:40:52.630 --> 00:40:54.130
that you inject in
your application.

00:40:54.130 --> 00:40:55.340
Please don't ship with it.

00:40:55.340 --> 00:40:56.780
Use it for your debug version.

00:40:56.780 --> 00:40:59.710
I've seen applications ship
with it, and it's ugly.

00:40:59.710 --> 00:41:02.700
And it tells you, it
basically monitors

00:41:02.700 --> 00:41:05.800
the things that go away, and
if they don't it warns you.

00:41:05.800 --> 00:41:08.720
It pops up I think a
toast on the system

00:41:08.720 --> 00:41:11.570
and says, oh, by the way, you
just leaked your activity.

00:41:11.570 --> 00:41:12.590
That's a great tool.

00:41:12.590 --> 00:41:14.250
I would encourage
you to use that.

00:41:14.250 --> 00:41:17.250
We also have the ability
now in Android Studio

00:41:17.250 --> 00:41:20.300
to do some leak analysis
at a deeper level,

00:41:20.300 --> 00:41:22.940
and it has information
specifically about Android,

00:41:22.940 --> 00:41:25.290
like activity leaking.

00:41:25.290 --> 00:41:26.740
So go ahead and run this.

00:41:26.740 --> 00:41:29.930
So this is sort of, it's
more similar to MAT,

00:41:29.930 --> 00:41:32.047
sort of the full on,
here's all the information

00:41:32.047 --> 00:41:33.380
about references in your system.

00:41:33.380 --> 00:41:35.960
But it has information
that's specific to Android,

00:41:35.960 --> 00:41:41.650
so it's more focused and
domain specific than MAT is.

00:41:41.650 --> 00:41:42.480
Data binding.

00:41:42.480 --> 00:41:45.850
There's integration of
fairly straightforward stuff

00:41:45.850 --> 00:41:47.370
like syntax highlighting.

00:41:47.370 --> 00:41:51.720
So it knows what the language
is that data binding is using.

00:41:51.720 --> 00:41:53.730
And [INAUDIBLE] checks,
because there's always

00:41:53.730 --> 00:41:55.160
[INAUDIBLE] checks.

00:41:55.160 --> 00:41:56.670
Systrace.

00:41:56.670 --> 00:42:00.600
We saw a little bit of this
in Colt's keynote earlier.

00:42:00.600 --> 00:42:02.170
Very simple UI.

00:42:02.170 --> 00:42:03.220
One of my favorites.

00:42:03.220 --> 00:42:05.740
It's obvious what's
going on from this trace.

00:42:05.740 --> 00:42:08.242
The new thing here, so there's
a couple of new things.

00:42:08.242 --> 00:42:09.450
There's events up at the top.

00:42:09.450 --> 00:42:10.824
There's a bunch
of little circles

00:42:10.824 --> 00:42:14.450
under the green information,
like the second row up there.

00:42:14.450 --> 00:42:17.930
And also the-- I wish there
was a laser pointer in here.

00:42:17.930 --> 00:42:19.669
I'm going to point
with this anyway.

00:42:19.669 --> 00:42:21.710
So the circles right in
the middle of the screen,

00:42:21.710 --> 00:42:23.040
where there is, like,
a bunch of red ones

00:42:23.040 --> 00:42:24.164
and then a bunch of greens.

00:42:24.164 --> 00:42:25.450
Those are basically tips.

00:42:25.450 --> 00:42:28.030
So you can click on those now
if you ever looked at systrace

00:42:28.030 --> 00:42:30.510
and said, I don't know
what to do with this,

00:42:30.510 --> 00:42:32.860
nor do I know the people
that wrote Android,

00:42:32.860 --> 00:42:34.735
so I can't do anything
with this information.

00:42:34.735 --> 00:42:36.526
Now you can click on
these tips and they're

00:42:36.526 --> 00:42:39.240
going to give you a little bit
deeper information about what

00:42:39.240 --> 00:42:42.210
we actually saw that
was problematic when

00:42:42.210 --> 00:42:43.890
your application was running.

00:42:43.890 --> 00:42:47.290
So I clicked on that
tip there, and it said,

00:42:47.290 --> 00:42:50.060
list view item recycling
involved inflating views.

00:42:50.060 --> 00:42:52.450
Ensure your adapter
get view recycles

00:42:52.450 --> 00:42:54.970
the incoming view, instead
of constructing a new one.

00:42:54.970 --> 00:42:58.010
I believe this was a trace from
the I/O scheduling application

00:42:58.010 --> 00:42:58.910
last year.

00:42:58.910 --> 00:43:01.020
And they took the
frame rate down-- up

00:43:01.020 --> 00:43:04.150
from horrible to good.

00:43:04.150 --> 00:43:05.556
I think just by this.

00:43:05.556 --> 00:43:06.930
And you'll find,
actually, if you

00:43:06.930 --> 00:43:09.230
use systrace and click on
the tips, a lot of the tips

00:43:09.230 --> 00:43:12.500
are the same
because you probably

00:43:12.500 --> 00:43:14.960
have the same problem
occurring over and over again.

00:43:14.960 --> 00:43:17.420
Moreover, once you fix some
of these fundamental problems,

00:43:17.420 --> 00:43:19.690
you'll find a lot of
the overall performance

00:43:19.690 --> 00:43:21.490
goes up because
usually there is just

00:43:21.490 --> 00:43:24.460
a couple of outlier things,
like running inflation

00:43:24.460 --> 00:43:27.440
on the UI thread while
an animation is going.

00:43:27.440 --> 00:43:30.230
Or something like this, where
you actually weren't reusing

00:43:30.230 --> 00:43:31.480
the view when you should have.

00:43:31.480 --> 00:43:33.313
So there is some simple
stuff that we're now

00:43:33.313 --> 00:43:34.610
checking for internally.

00:43:34.610 --> 00:43:36.660
So I would encourage you
to go back to systrace.

00:43:36.660 --> 00:43:39.220
If you gave up because
it was just too hairy,

00:43:39.220 --> 00:43:40.720
go back to it now
and see whether it

00:43:40.720 --> 00:43:43.739
can help you understand what's
going on with the performance.

00:43:43.739 --> 00:43:46.030
And then there's also a
summary panel over on the right

00:43:46.030 --> 00:43:49.370
that sort of details all the
different kinds of problems

00:43:49.370 --> 00:43:49.870
there were.

00:43:49.870 --> 00:43:52.930
And again, there are not usually
an infinite number of problems.

00:43:52.930 --> 00:43:55.230
Instead there are probably
an infinite number

00:43:55.230 --> 00:43:58.610
of symptoms caused by a
very few number of problems.

00:43:58.610 --> 00:44:00.540
So you can sort of see
the tally of what's

00:44:00.540 --> 00:44:04.040
going on from what we could
tell from our analysis.

00:44:04.040 --> 00:44:06.569
There were improvements
in Art Basic optimization.

00:44:06.569 --> 00:44:07.860
This is what the Art team does.

00:44:07.860 --> 00:44:10.350
They keep making a run at
it, making things faster.

00:44:10.350 --> 00:44:14.330
If you go to the talk that
I'm giving tomorrow morning,

00:44:14.330 --> 00:44:17.780
I believe, Android
for Java Developers,

00:44:17.780 --> 00:44:21.270
I'm going to talk specifically
about memory concerns there,

00:44:21.270 --> 00:44:23.150
and we go into a
fair amount of detail

00:44:23.150 --> 00:44:26.344
about how the garbage collector
works both in Dalvik and art.

00:44:26.344 --> 00:44:28.760
So there's more information
about some of that side, which

00:44:28.760 --> 00:44:30.720
I find kind of interesting.

00:44:30.720 --> 00:44:32.400
There's a new API in Art.

00:44:32.400 --> 00:44:34.600
You can get some of
the runtime stats.

00:44:34.600 --> 00:44:37.455
There's a lot of documentation
in the debug class, where

00:44:37.455 --> 00:44:39.830
you can look up information
about all the information you

00:44:39.830 --> 00:44:41.860
can get there.

00:44:41.860 --> 00:44:44.500
There's some other grab bag
stuff that we wanted to mention

00:44:44.500 --> 00:44:46.000
and couldn't really categorize.

00:44:46.000 --> 00:44:48.640
You can adopt
external storage now,

00:44:48.640 --> 00:44:53.530
so you should avoid
hard coded paths

00:44:53.530 --> 00:44:56.790
because, if the user can
adopt a different location

00:44:56.790 --> 00:44:58.530
for the data, you
better not depend on it

00:44:58.530 --> 00:45:00.830
being where you thought it was.

00:45:00.830 --> 00:45:03.680
We give you all the
tools for this already

00:45:03.680 --> 00:45:07.870
to be able to query
dynamic paths at runtime.

00:45:07.870 --> 00:45:09.590
And that's what you
should use instead.

00:45:09.590 --> 00:45:12.956
Also, if you don't
have permanent storage

00:45:12.956 --> 00:45:15.580
in your device to actually test
this out with your application,

00:45:15.580 --> 00:45:17.480
we would encourage
you to test it anyway

00:45:17.480 --> 00:45:19.390
so you can plug-in
a USB drive and then

00:45:19.390 --> 00:45:21.340
use the following
A to B command,

00:45:21.340 --> 00:45:23.790
to force us to adopt
this rather non

00:45:23.790 --> 00:45:26.450
adoptable temporary storage,
just for the purposes

00:45:26.450 --> 00:45:27.880
of testing here.

00:45:27.880 --> 00:45:32.940
Also, it's important to point
out that Apache HTTP went away.

00:45:32.940 --> 00:45:35.960
We deprecate APIs, but we
generally don't remove things

00:45:35.960 --> 00:45:38.310
because it's a bit of a
growing pain for developers,

00:45:38.310 --> 00:45:40.060
and we don't want to
crash apps out there.

00:45:40.060 --> 00:45:42.450
And let's be clear-- we
still didn't actually

00:45:42.450 --> 00:45:43.800
remove it from the runtime.

00:45:43.800 --> 00:45:47.690
So if you're an old app,
still using Apache HTTP,

00:45:47.690 --> 00:45:48.850
it will still run.

00:45:48.850 --> 00:45:50.240
It's just that
the API is hidden.

00:45:50.240 --> 00:45:52.580
You could not build
against it now.

00:45:52.580 --> 00:45:55.510
But I think we said
back in 2011 that people

00:45:55.510 --> 00:45:56.890
should stop using this.

00:45:56.890 --> 00:45:59.030
And then we finally
hid the API this year.

00:45:59.030 --> 00:46:02.940
So it takes a while,
but gal we mean it.

00:46:02.940 --> 00:46:06.380
So you should use HTTP
url connection instead.

00:46:06.380 --> 00:46:09.010
Boring SSL replaces open SSL.

00:46:09.010 --> 00:46:11.610
Who in this room knows what I'm
talking about when I say that?

00:46:11.610 --> 00:46:13.990
One, two, three, four.

00:46:13.990 --> 00:46:14.810
OK, all right.

00:46:14.810 --> 00:46:16.560
I shouldn't have raised
my hand, actually.

00:46:16.560 --> 00:46:19.220
I don't really use these APIs.

00:46:19.220 --> 00:46:19.720
And

00:46:19.720 --> 00:46:23.500
Finally, I would
encourage you to check out

00:46:23.500 --> 00:46:25.960
a series of articles that
we published on Medium.com.

00:46:25.960 --> 00:46:30.040
This actually came from an
internal effort that we had.

00:46:30.040 --> 00:46:32.620
We talked to internal
app developers who said,

00:46:32.620 --> 00:46:35.854
we keep talking to
the framework team

00:46:35.854 --> 00:46:37.770
and finding out that
we're doing things wrong,

00:46:37.770 --> 00:46:40.359
like, we'll ask a question
about how to do something

00:46:40.359 --> 00:46:42.400
and the answer will be,
no, don't do it that way.

00:46:42.400 --> 00:46:44.870
Or , obviously you should
have used a layer there.

00:46:44.870 --> 00:46:47.280
Or, don't do that
on the UI thread.

00:46:47.280 --> 00:46:49.590
Or, why are you
churning garbage.

00:46:49.590 --> 00:46:51.670
So we have all these
things in our minds,

00:46:51.670 --> 00:46:53.331
and the apps teams didn't.

00:46:53.331 --> 00:46:54.830
And it turns out
one of the problems

00:46:54.830 --> 00:46:57.510
was because a lot
of the internal app

00:46:57.510 --> 00:47:00.010
developers at
Google, and probably

00:47:00.010 --> 00:47:03.000
like the rest of the world,
came from a world of developing

00:47:03.000 --> 00:47:04.750
Java that was quite different.

00:47:04.750 --> 00:47:06.612
It is the same
programming language,

00:47:06.612 --> 00:47:08.570
but it is not necessarily
the same environment.

00:47:08.570 --> 00:47:12.700
If you write Java
programs for a server,

00:47:12.700 --> 00:47:15.280
and then you try to use those
same patterns and approaches

00:47:15.280 --> 00:47:18.860
to write a mobile application,
you will suffer for it, right?

00:47:18.860 --> 00:47:21.340
Because we do not have the
same kind of constraints

00:47:21.340 --> 00:47:23.280
on mobile devices.

00:47:23.280 --> 00:47:24.690
We don't have the
same resources,

00:47:24.690 --> 00:47:25.940
we don't have the same memory.

00:47:25.940 --> 00:47:27.230
It's not the same runtime.

00:47:27.230 --> 00:47:30.440
There's a lot of things that
are very, very different, apart

00:47:30.440 --> 00:47:32.550
from the programming
language itself.

00:47:32.550 --> 00:47:34.750
So we wrote this
extremely long article

00:47:34.750 --> 00:47:36.737
that we posted
internally and said, OK,

00:47:36.737 --> 00:47:38.570
here's all the information
from the platform

00:47:38.570 --> 00:47:41.810
team about all this stuff that
we've built up over the years.

00:47:41.810 --> 00:47:43.420
The things that
you should avoid.

00:47:43.420 --> 00:47:45.580
The patterns that you
should use on Android.

00:47:45.580 --> 00:47:47.882
And then we went to
publish it externally,

00:47:47.882 --> 00:47:50.340
and it wouldn't fit anywhere,
because it was just too long.

00:47:50.340 --> 00:47:52.190
So we split it into
ten different articles

00:47:52.190 --> 00:47:54.440
that are posted on Medium.

00:47:54.440 --> 00:47:57.596
Each one of those 10 articles
are not in themselves short.

00:47:57.596 --> 00:47:59.220
The introduction is,
because it doesn't

00:47:59.220 --> 00:48:00.344
have any information in it.

00:48:00.344 --> 00:48:01.730
Everything, else fairly long.

00:48:01.730 --> 00:48:02.692
Please check it out.

00:48:02.692 --> 00:48:03.400
Go to medium.com.

00:48:03.400 --> 00:48:06.690
There's a Google Developers
publication there,

00:48:06.690 --> 00:48:09.900
or it's published under
by writing name there.

00:48:09.900 --> 00:48:12.250
It's all information
that I think all Android

00:48:12.250 --> 00:48:14.300
developers should understand.

00:48:14.300 --> 00:48:17.520
It's a little bit hard to
write rules for Android,

00:48:17.520 --> 00:48:20.980
like it is patterns for software
development, like always

00:48:20.980 --> 00:48:21.800
do this.

00:48:21.800 --> 00:48:24.400
For example, just to pick
a particularly painful one

00:48:24.400 --> 00:48:27.690
out there, there's a rule in
there saying, avoid Enums.

00:48:27.690 --> 00:48:28.190
OK.

00:48:28.190 --> 00:48:31.010
That tends to be a
trigger for some people.

00:48:31.010 --> 00:48:33.550
But that, like all of
the rules in the document

00:48:33.550 --> 00:48:35.530
are, depending on
your situation.

00:48:35.530 --> 00:48:38.552
What you need to do is
understand why they can be bad.

00:48:38.552 --> 00:48:40.010
If you're writing
a library and you

00:48:40.010 --> 00:48:42.530
have Enums scattered
within them,

00:48:42.530 --> 00:48:44.190
that may be bad
for all the users

00:48:44.190 --> 00:48:46.190
that are using their
library because they're all

00:48:46.190 --> 00:48:48.650
going to take the memory
hit of that approach.

00:48:48.650 --> 00:48:51.120
If there's a cheaper way to
do what you wanted to do.

00:48:51.120 --> 00:48:53.270
If you use an Enum
in your application,

00:48:53.270 --> 00:48:54.470
I personally don't care.

00:48:54.470 --> 00:48:56.200
I don't think it's
affecting anything.

00:48:56.200 --> 00:48:58.849
But, you should understand
when it can have impact.

00:48:58.849 --> 00:49:01.390
And you should understand the
other things in those articles,

00:49:01.390 --> 00:49:01.890
as well.

00:49:01.890 --> 00:49:04.860
They don't-- not all of the
rules apply to all developers,

00:49:04.860 --> 00:49:07.440
but it's kind of good to get
a sense for what the problems

00:49:07.440 --> 00:49:09.100
are, as well as why.

00:49:09.100 --> 00:49:11.725
And then also come to the
talk tomorrow, if you can.

00:49:11.725 --> 00:49:14.100
There may be other interesting
talks on at the same time.

00:49:14.100 --> 00:49:15.930
Though, Android
for Java Developers

00:49:15.930 --> 00:49:20.180
is basically going over
some of those rules,

00:49:20.180 --> 00:49:21.250
specifically in memory.

00:49:21.250 --> 00:49:24.270
I only have an hour, so
it's about a three hour talk

00:49:24.270 --> 00:49:25.479
where I had to do everything.

00:49:25.479 --> 00:49:26.936
So we'll just spend
an hour talking

00:49:26.936 --> 00:49:29.110
about some of the memory
concerns tomorrow morning.

00:49:29.110 --> 00:49:32.910
So, I would say go check out
information about Marshmallow.

00:49:32.910 --> 00:49:35.390
Here's a couple of
URLs to look at.

00:49:35.390 --> 00:49:40.580
And here's us, or me.

00:49:40.580 --> 00:49:41.300
And that's it.

00:49:41.300 --> 00:49:43.880
Thank you.

00:49:43.880 --> 00:49:47.230
[MUSIC]

