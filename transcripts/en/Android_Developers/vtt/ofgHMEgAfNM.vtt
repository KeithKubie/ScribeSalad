WEBVTT
Kind: captions
Language: en

00:00:00.840 --> 00:00:02.506
FRANCESCO CARUCCI:
My name is Francesco.

00:00:02.506 --> 00:00:05.260
I'm a former game developer.

00:00:05.260 --> 00:00:09.270
Been in the trenches for
a few years, about 15.

00:00:09.270 --> 00:00:15.270
And as Bill mentioned, tools
are important, as important as--

00:00:15.270 --> 00:00:18.810
at least for me, a game
is as good as the tools

00:00:18.810 --> 00:00:21.480
you use to make it.

00:00:21.480 --> 00:00:26.070
As I said, spent so many nights
waiting for tools to finish

00:00:26.070 --> 00:00:28.950
something or waiting
for a profiler

00:00:28.950 --> 00:00:38.239
to capture a frame that if
I don't get a good tool,

00:00:38.239 --> 00:00:39.780
working on a game
becomes unbearable.

00:00:39.780 --> 00:00:45.480
And the less time you
spend profiling, debugging,

00:00:45.480 --> 00:00:48.960
creating assets, the more
time you can spend at the pub,

00:00:48.960 --> 00:00:51.670
if you're from England--

00:00:51.670 --> 00:00:53.940
I work there-- or you can
spend polishing the game.

00:00:53.940 --> 00:00:55.650
It's probably a better
use of the time.

00:00:55.650 --> 00:00:57.190
We get this.

00:00:57.190 --> 00:01:01.230
That's why we're working a
lot on Tools now in Google.

00:01:01.230 --> 00:01:03.960
A lot of my time is literally
spent pacing in the office

00:01:03.960 --> 00:01:04.939
back and forth--

00:01:04.939 --> 00:01:05.730
we need good tools.

00:01:05.730 --> 00:01:06.521
We need good tools.

00:01:06.521 --> 00:01:07.410
We need good tools.

00:01:07.410 --> 00:01:09.930
People are getting
tired of this.

00:01:09.930 --> 00:01:13.280
But one of the outcomes
is that we now have--

00:01:13.280 --> 00:01:15.980
shut up-- we now have a native
profiler in Android Studio,

00:01:15.980 --> 00:01:19.282
a native C++ profiler.

00:01:19.282 --> 00:01:23.300
It's a profiler as every
profiler that you know.

00:01:23.300 --> 00:01:25.800
For now, it exists
in Android Studio.

00:01:25.800 --> 00:01:28.220
We also have System
Trace, which lets

00:01:28.220 --> 00:01:33.660
you have a more holistic view
of the entire system running.

00:01:33.660 --> 00:01:34.800
You can see the processes.

00:01:34.800 --> 00:01:36.900
We're going to see
an example of this.

00:01:36.900 --> 00:01:39.240
And now, System Trace exists.

00:01:39.240 --> 00:01:42.665
But good luck using it
from the command line.

00:01:42.665 --> 00:01:44.040
Now we have it in
Android Studio,

00:01:44.040 --> 00:01:48.950
integrated with a great UI.

00:01:48.950 --> 00:01:50.660
And that's my favorite one.

00:01:50.660 --> 00:01:51.260
We have it.

00:01:54.120 --> 00:01:56.480
Graphics API Debugger,
not Google API debugger.

00:01:56.480 --> 00:02:00.940
It's about graphics and not
about trying to live at Google.

00:02:00.940 --> 00:02:05.490
And certainly, you can see every
single draw call in OpenGL,

00:02:05.490 --> 00:02:07.180
in Vulkan, and
you can replay it.

00:02:07.180 --> 00:02:08.199
It's awesome.

00:02:08.199 --> 00:02:09.360
And it's my favorite tool.

00:02:12.430 --> 00:02:17.060
Now as I mentioned, we can
sample native C++ threads.

00:02:17.060 --> 00:02:21.037
The only limitation is it works
on API 26, which is Android 8.

00:02:21.037 --> 00:02:21.870
It's not a big deal.

00:02:25.230 --> 00:02:27.420
And that's how it works.

00:02:27.420 --> 00:02:32.480
Now, I was writing some code,
and I left some debugging log

00:02:32.480 --> 00:02:33.510
in a inner loop.

00:02:33.510 --> 00:02:36.300
Raise your hand if you have
never left debugging code

00:02:36.300 --> 00:02:38.407
in your inner loop.

00:02:38.407 --> 00:02:39.240
I don't believe you.

00:02:43.900 --> 00:02:46.500
Well, that means that, when
I clicked on the button,

00:02:46.500 --> 00:02:49.440
things got a little bit slow.

00:02:49.440 --> 00:02:51.570
Come the debugger.

00:02:51.570 --> 00:02:56.520
You can see there, something
is weird in Java code

00:02:56.520 --> 00:02:59.220
Piglet, my application
Piglet, because of my kid.

00:02:59.220 --> 00:03:00.870
And I name things after him.

00:03:00.870 --> 00:03:04.280
And you can see how I press
the button and the CPU

00:03:04.280 --> 00:03:05.690
is backed up right there.

00:03:09.230 --> 00:03:13.160
And yeah, as you would
expect, a lot of time

00:03:13.160 --> 00:03:16.420
is spent into do something
cool, which was inner loop.

00:03:20.300 --> 00:03:23.920
It's a profiler as every
other profiler that you know,

00:03:23.920 --> 00:03:25.010
but now it exists.

00:03:25.010 --> 00:03:27.870
And you can do this kind
of stuff, which takes time,

00:03:27.870 --> 00:03:30.760
instead of trying to guess.

00:03:30.760 --> 00:03:32.540
Back to System Trace.

00:03:32.540 --> 00:03:35.900
System Trace is a tool
that is event-based,

00:03:35.900 --> 00:03:39.780
so it doesn't sample
as an active profiler.

00:03:39.780 --> 00:03:42.430
It's based on events that
fired from the system.

00:03:42.430 --> 00:03:46.020
It records all these events
and then shows all these events

00:03:46.020 --> 00:03:50.340
in a common timeline, where you
can see both the application

00:03:50.340 --> 00:03:52.110
and the system process.

00:03:52.110 --> 00:03:52.680
Yes.

00:03:52.680 --> 00:03:55.780
If there's more than one.

00:03:55.780 --> 00:03:58.270
And this is very
interesting because you

00:03:58.270 --> 00:04:03.640
can see what things are running
on the system, in which core,

00:04:03.640 --> 00:04:08.980
how they are interacting
in an holistic timeline.

00:04:08.980 --> 00:04:11.555
And it lets you debug slow
frames very, very easily,

00:04:11.555 --> 00:04:12.680
because it highlights them.

00:04:12.680 --> 00:04:14.710
If a frame is running,
it's taking more than 33

00:04:14.710 --> 00:04:19.370
milliseconds to run, well,
the UI will show you.

00:04:19.370 --> 00:04:23.400
In this UI, there's a lot
of information packed here.

00:04:23.400 --> 00:04:26.040
You can see this
device dual cores--

00:04:26.040 --> 00:04:27.750
all the threads.

00:04:27.750 --> 00:04:30.600
You can reorder threads,
just to have thread

00:04:30.600 --> 00:04:33.120
that are common together.

00:04:33.120 --> 00:04:34.170
It's very useful.

00:04:34.170 --> 00:04:37.530
You can see that this thread,
too, is visually using

00:04:37.530 --> 00:04:40.720
a lot of CPU, the bright areas.

00:04:40.720 --> 00:04:44.190
And you can see there very
interesting information.

00:04:44.190 --> 00:04:46.620
Most of the CPU is
happening-- most of the CPU--

00:04:46.620 --> 00:04:50.090
time is spent on the
CPU, on the core three.

00:04:50.090 --> 00:04:54.909
The other cores are
relatively light.

00:04:54.909 --> 00:04:55.950
How use that information?

00:04:55.950 --> 00:04:58.630
Well, it depends on what
you are trying to do.

00:04:58.630 --> 00:05:00.550
But for example,
this will tell me--

00:05:00.550 --> 00:05:02.530
OK, wait a second.

00:05:02.530 --> 00:05:08.800
I might get a little better
frame rate if I take this work

00:05:08.800 --> 00:05:10.656
and it's spread across
multiple threads.

00:05:10.656 --> 00:05:12.030
But now, you don't
have to guess.

00:05:12.030 --> 00:05:12.821
This will tell you.

00:05:17.802 --> 00:05:19.260
Let's look at this
rendered thread.

00:05:22.690 --> 00:05:26.470
Again, here it's using
quite a lot of CPU.

00:05:26.470 --> 00:05:29.440
And you can see other
single tasks that

00:05:29.440 --> 00:05:32.424
are running on in parallel.

00:05:32.424 --> 00:05:34.590
This is telling you another
interesting information.

00:05:34.590 --> 00:05:36.131
You do have a rendered
thread that is

00:05:36.131 --> 00:05:37.590
separate from the main thread.

00:05:37.590 --> 00:05:38.824
Good job.

00:05:38.824 --> 00:05:40.490
Something that generally
you want to do.

00:05:47.460 --> 00:05:49.770
Now let's look at this trace.

00:05:49.770 --> 00:05:54.420
You can see that plain
bitmaps, this particular thread

00:05:54.420 --> 00:05:55.380
is using a lot of CPU.

00:05:55.380 --> 00:05:56.790
Fine, that's all right.

00:05:56.790 --> 00:05:59.050
But you can also see that
it's jumping from one core

00:05:59.050 --> 00:05:59.370
to the other.

00:05:59.370 --> 00:06:00.994
It's been scheduled
in different cores.

00:06:03.380 --> 00:06:05.390
Now, let's imagine
you're already

00:06:05.390 --> 00:06:07.050
hitting your frame rate.

00:06:07.050 --> 00:06:10.130
So you're good for
the frame rate.

00:06:10.130 --> 00:06:12.450
This information could
be used to say, OK,

00:06:12.450 --> 00:06:18.510
let's try to set affinity for
this thread to a slow core.

00:06:18.510 --> 00:06:20.640
And let's see if we
can save some battery.

00:06:20.640 --> 00:06:22.560
Or let's put it on a
fast core, and let's see

00:06:22.560 --> 00:06:24.690
if we can save some
battery there this way.

00:06:24.690 --> 00:06:27.750
Because the work is
finished earlier.

00:06:27.750 --> 00:06:29.670
So everything can
go to sleep quicker,

00:06:29.670 --> 00:06:31.530
instead of just jumping around.

00:06:31.530 --> 00:06:34.610
But the takeaway that
they want from this

00:06:34.610 --> 00:06:37.040
is you can see it visually
instead of trying to guess,

00:06:37.040 --> 00:06:38.740
which is what we
were doing before.

00:06:41.630 --> 00:06:43.580
The red bar means
this is a slow frame.

00:06:46.204 --> 00:06:47.620
And this tells you
that this frame

00:06:47.620 --> 00:06:51.730
is taking 200 milliseconds,
which is like more than 33.

00:06:51.730 --> 00:06:54.115
And something weird
is happening inflate.

00:06:57.970 --> 00:07:04.630
This might suggest that
some assets have been

00:07:04.630 --> 00:07:07.010
unpacked during this frame.

00:07:07.010 --> 00:07:08.760
Might be weird--
something going on there.

00:07:08.760 --> 00:07:10.051
But again, you see it visually.

00:07:15.350 --> 00:07:19.730
As I mentioned, this
system records events.

00:07:19.730 --> 00:07:24.270
You can insert your events
as well, and you record that.

00:07:24.270 --> 00:07:28.580
For example, let's imagine
that you have a shadow pass.

00:07:28.580 --> 00:07:31.670
You want to look at
the shadow pass--

00:07:31.670 --> 00:07:35.060
in which thread is
running and what

00:07:35.060 --> 00:07:37.340
is happening, compared to
the rest of the system.

00:07:37.340 --> 00:07:39.650
Well, you can insert
custom events.

00:07:39.650 --> 00:07:44.320
And I give you a
nice sculpt trace.

00:07:44.320 --> 00:07:47.140
Just stick it at the
beginning of a function.

00:07:47.140 --> 00:07:49.699
And there you are.

00:07:49.699 --> 00:07:50.740
Its function is recorded.

00:07:53.499 --> 00:07:55.040
In the future, we're
going to show in

00:07:55.040 --> 00:07:58.405
the main UI, also
the Vsyncs, which

00:07:58.405 --> 00:07:59.780
is very interesting
to see if you

00:07:59.780 --> 00:08:02.710
are hitting the Vsync with
your threads visually.

00:08:02.710 --> 00:08:08.260
We now support both 30
and 60 frames per second

00:08:08.260 --> 00:08:13.980
for if you're making a racing
game, don't want to run at 30.

00:08:13.980 --> 00:08:15.200
Limitations.

00:08:15.200 --> 00:08:17.672
There's a limitation on API.

00:08:17.672 --> 00:08:19.670
It's API 23 and before.

00:08:19.670 --> 00:08:21.500
It only runs on single
process for now.

00:08:21.500 --> 00:08:24.570
But that will be lifted.

00:08:24.570 --> 00:08:27.540
You can export traces.

00:08:27.540 --> 00:08:30.370
But you cannot
import traces yet.

00:08:30.370 --> 00:08:31.330
It's got to be fixed.

00:08:31.330 --> 00:08:33.304
Like, it's weird at this point.

00:08:33.304 --> 00:08:34.179
It's got to be fixed.

00:08:36.789 --> 00:08:40.659
It's work in progress,
as everything we do.

00:08:40.659 --> 00:08:42.010
My third one, GAPID.

00:08:42.010 --> 00:08:45.550
It's correctly
Graphics Debugger now.

00:08:45.550 --> 00:08:51.900
And GAPID is for the ones,
the lucky ones, who use picks.

00:08:51.900 --> 00:08:53.340
It's the beginning of picks.

00:08:53.340 --> 00:08:54.570
Getting there.

00:08:54.570 --> 00:08:57.140
It lets you trace,
capture trace,

00:08:57.140 --> 00:09:01.559
inspect the trace visually
and replay the trace

00:09:01.559 --> 00:09:02.350
on the same device.

00:09:02.350 --> 00:09:03.224
There's a limitation.

00:09:03.224 --> 00:09:08.791
It works both on
Vulkan and OpenGL.

00:09:08.791 --> 00:09:12.770
It works on Android,
and Mac, and Windows.

00:09:16.370 --> 00:09:18.290
And that's how it looks.

00:09:18.290 --> 00:09:21.470
That's awesome.

00:09:21.470 --> 00:09:24.110
That's me being
very happy about it.

00:09:24.110 --> 00:09:29.230
You can see every single
[INAUDIBLE] what is rendering.

00:09:29.230 --> 00:09:32.720
The frame buffer lets
you inspect shaders,

00:09:32.720 --> 00:09:35.130
lets you change the shader
on the fly and replay

00:09:35.130 --> 00:09:37.845
it on device.

00:09:37.845 --> 00:09:40.220
Very good if you're an artist
who likes to use GIF GAPID.

00:09:43.310 --> 00:09:47.166
As I mentioned, it works
in OpenGL and Vulkan.

00:09:47.166 --> 00:09:48.540
There are some
limitations there.

00:09:48.540 --> 00:09:50.081
For example, if I
remember correctly,

00:09:50.081 --> 00:09:53.970
OpenGL doesn't let
you capture mid-run.

00:09:53.970 --> 00:09:54.725
Vulkan does.

00:09:54.725 --> 00:09:55.850
There are some limitations.

00:09:55.850 --> 00:10:00.590
But this too is work in
progress, and thank it exists.

00:10:00.590 --> 00:10:01.820
And they're improving it.

00:10:01.820 --> 00:10:06.460
Those limitations will
be lifted eventually.

00:10:06.460 --> 00:10:08.220
Its all available.

00:10:08.220 --> 00:10:10.050
System Trace is available now.

00:10:10.050 --> 00:10:12.870
You can load it in
3.2 in the Canary.

00:10:12.870 --> 00:10:14.270
There's a link to the Canary.

00:10:14.270 --> 00:10:17.230
GAPID if being
released, it's 1.0.

00:10:17.230 --> 00:10:19.420
Please give us feedback.

00:10:19.420 --> 00:10:24.430
And now, everyone says
please give us feedback.

00:10:24.430 --> 00:10:26.770
We actually do ask for feedback.

00:10:26.770 --> 00:10:30.240
If you tell me this things
doesn't work on GAPID,

00:10:30.240 --> 00:10:34.770
I literally walk to the team,
to the leader of the team,

00:10:34.770 --> 00:10:37.470
and I start banging on the
desk until they get it fixed.

00:10:37.470 --> 00:10:39.690
And they did it, so it works.

00:10:39.690 --> 00:10:41.600
It works totally.

00:10:41.600 --> 00:10:45.944
If you have any
questions, feel free.

00:10:45.944 --> 00:10:47.441
Go ahead.

00:10:47.441 --> 00:10:52.431
AUDIENCE: Can you start and
stop on your Trace [INAUDIBLE]??

00:10:52.431 --> 00:10:54.350
FRANCESCO CARUCCI: No.

00:10:54.350 --> 00:10:54.850
Write me.

00:10:58.885 --> 00:11:01.010
AUDIENCE: I was wondering
if you can start and stop

00:11:01.010 --> 00:11:05.360
the Trace programmatically,
just because we have a big game.

00:11:05.360 --> 00:11:08.120
Sometimes we want to just
look at a particular area

00:11:08.120 --> 00:11:09.020
of the game.

00:11:09.020 --> 00:11:10.200
FRANCESCO CARUCCI: No.

00:11:10.200 --> 00:11:12.890
Write me-- my email.

00:11:12.890 --> 00:11:15.260
And I will file a bug.

00:11:15.260 --> 00:11:17.265
Can you tell me the
use case for it?

00:11:17.265 --> 00:11:17.890
AUDIENCE: Yeah.

00:11:17.890 --> 00:11:21.920
A lot of times, these
graphics systems,

00:11:21.920 --> 00:11:24.230
they run out of
memory before you're

00:11:24.230 --> 00:11:30.725
even into the area of the
game that you want to look at.

00:11:30.725 --> 00:11:32.350
FRANCESCO CARUCCI:
I see what you mean.

00:11:32.350 --> 00:11:34.264
Yes, it's a good point.

00:11:34.264 --> 00:11:34.764
Write me.

00:11:39.609 --> 00:11:41.150
AUDIENCE: What kind
of traits are you

00:11:41.150 --> 00:11:42.191
trying to start and stop?

00:11:42.191 --> 00:11:43.630
Are you trying to
start and record

00:11:43.630 --> 00:11:47.035
a CPU trace, or a memory, or--

00:11:47.035 --> 00:11:47.740
Ah.

00:11:47.740 --> 00:11:50.090
AUDIENCE: [INAUDIBLE]

00:11:51.602 --> 00:11:53.810
FRANCESCO CARUCCI: Yes, this
capture multiple frames,

00:11:53.810 --> 00:11:55.250
by the way.

00:11:55.250 --> 00:11:56.750
But it can be used to capture--

00:11:56.750 --> 00:12:00.570
personally, I'm a gigantic fan
of capturing only one frame.

00:12:00.570 --> 00:12:02.130
Not everyone agrees
with me on this.

00:12:02.130 --> 00:12:04.370
I do agree with
myself on this one.

00:12:04.370 --> 00:12:05.480
AUDIENCE: Hi.

00:12:05.480 --> 00:12:07.590
I actually beat GAPID.

00:12:07.590 --> 00:12:09.980
Currently for Vulkan, you can
do meta execution capture.

00:12:09.980 --> 00:12:13.850
So there isn't an
API in the game,

00:12:13.850 --> 00:12:15.800
or there isn't an
API that you can use

00:12:15.800 --> 00:12:17.420
to programmatically start it.

00:12:17.420 --> 00:12:19.790
But there's a button that
you can start and [INAUDIBLE]

00:12:19.790 --> 00:12:20.834
your point.

00:12:20.834 --> 00:12:23.250
There's a certain amount of
shattering that we have to do.

00:12:23.250 --> 00:12:27.440
So there is a overhead, but it's
not as much as an entire driver

00:12:27.440 --> 00:12:28.690
copy.

00:12:28.690 --> 00:12:32.120
For GLES, we're working on it.

00:12:32.120 --> 00:12:36.910
If you want a API to trigger
it, it will be very easy to add.

00:12:36.910 --> 00:12:37.410
Nice.

00:12:37.410 --> 00:12:38.310
AUDIENCE: [INAUDIBLE]

00:12:39.335 --> 00:12:40.710
FRANCESCO CARUCCI:
I didn't know.

00:12:40.710 --> 00:12:42.560
Thank you.

