WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:01.760 align:start position:0%
 
we've<00:00:00.420><c> lifted</c><00:00:00.870><c> the</c><00:00:00.989><c> lid</c><00:00:01.140><c> on</c><00:00:01.350><c> the</c><00:00:01.380><c> Android</c>

00:00:01.760 --> 00:00:01.770 align:start position:0%
we've lifted the lid on the Android
 

00:00:01.770 --> 00:00:03.770 align:start position:0%
we've lifted the lid on the Android
studio<00:00:01.949><c> box</c><00:00:02.399><c> and</c><00:00:02.669><c> pulled</c><00:00:02.850><c> out</c><00:00:02.970><c> instant</c><00:00:03.449><c> run</c><00:00:03.600><c> a</c>

00:00:03.770 --> 00:00:03.780 align:start position:0%
studio box and pulled out instant run a
 

00:00:03.780 --> 00:00:06.380 align:start position:0%
studio box and pulled out instant run a
fast<00:00:04.140><c> and</c><00:00:04.350><c> shiny</c><00:00:04.529><c> new</c><00:00:04.830><c> emulator</c><00:00:05.009><c> a</c><00:00:05.460><c> new</c><00:00:05.940><c> GPU</c>

00:00:06.380 --> 00:00:06.390 align:start position:0%
fast and shiny new emulator a new GPU
 

00:00:06.390 --> 00:00:08.480 align:start position:0%
fast and shiny new emulator a new GPU
profiler<00:00:06.899><c> and</c><00:00:07.140><c> all</c><00:00:07.680><c> the</c><00:00:07.859><c> new</c><00:00:08.040><c> features</c><00:00:08.460><c> and</c>

00:00:08.480 --> 00:00:08.490 align:start position:0%
profiler and all the new features and
 

00:00:08.490 --> 00:00:11.060 align:start position:0%
profiler and all the new features and
improvements<00:00:08.670><c> of</c><00:00:09.210><c> IntelliJ</c><00:00:09.719><c> 15</c><00:00:09.900><c> I'm</c><00:00:10.710><c> reto</c>

00:00:11.060 --> 00:00:11.070 align:start position:0%
improvements of IntelliJ 15 I'm reto
 

00:00:11.070 --> 00:00:12.980 align:start position:0%
improvements of IntelliJ 15 I'm reto
Meier<00:00:11.160><c> its</c><00:00:11.730><c> Android</c><00:00:12.059><c> tool</c><00:00:12.269><c> time</c><00:00:12.480><c> time</c><00:00:12.719><c> and</c>

00:00:12.980 --> 00:00:12.990 align:start position:0%
Meier its Android tool time time and
 

00:00:12.990 --> 00:00:19.490 align:start position:0%
Meier its Android tool time time and
this<00:00:13.530><c> is</c><00:00:13.860><c> Android</c><00:00:14.280><c> studio</c><00:00:14.509><c> 2.0</c><00:00:18.350><c> instant</c><00:00:19.350><c> run</c>

00:00:19.490 --> 00:00:19.500 align:start position:0%
this is Android studio 2.0 instant run
 

00:00:19.500 --> 00:00:21.830 align:start position:0%
this is Android studio 2.0 instant run
is<00:00:19.710><c> a</c><00:00:19.770><c> new</c><00:00:20.039><c> feature</c><00:00:20.279><c> that</c><00:00:20.760><c> once</c><00:00:21.119><c> enabled</c><00:00:21.570><c> lets</c>

00:00:21.830 --> 00:00:21.840 align:start position:0%
is a new feature that once enabled lets
 

00:00:21.840 --> 00:00:23.630 align:start position:0%
is a new feature that once enabled lets
you<00:00:21.930><c> build</c><00:00:22.140><c> and</c><00:00:22.380><c> deploy</c><00:00:22.619><c> incremental</c><00:00:23.010><c> changes</c>

00:00:23.630 --> 00:00:23.640 align:start position:0%
you build and deploy incremental changes
 

00:00:23.640 --> 00:00:25.040 align:start position:0%
you build and deploy incremental changes
your<00:00:23.880><c> app</c><00:00:24.000><c> within</c><00:00:24.359><c> a</c><00:00:24.449><c> few</c><00:00:24.600><c> seconds</c>

00:00:25.040 --> 00:00:25.050 align:start position:0%
your app within a few seconds
 

00:00:25.050 --> 00:00:26.960 align:start position:0%
your app within a few seconds
dramatically<00:00:25.830><c> improving</c><00:00:26.220><c> the</c><00:00:26.460><c> speed</c><00:00:26.760><c> of</c><00:00:26.939><c> your</c>

00:00:26.960 --> 00:00:26.970 align:start position:0%
dramatically improving the speed of your
 

00:00:26.970 --> 00:00:29.089 align:start position:0%
dramatically improving the speed of your
test<00:00:27.300><c> and</c><00:00:27.510><c> debug</c><00:00:27.630><c> cycles</c><00:00:28.230><c> once</c><00:00:28.680><c> you</c><00:00:28.800><c> have</c><00:00:28.949><c> your</c>

00:00:29.089 --> 00:00:29.099 align:start position:0%
test and debug cycles once you have your
 

00:00:29.099 --> 00:00:30.830 align:start position:0%
test and debug cycles once you have your
app<00:00:29.279><c> up</c><00:00:29.460><c> and</c><00:00:29.670><c> running</c><00:00:30.029><c> hitting</c><00:00:30.300><c> instant</c><00:00:30.689><c> run</c>

00:00:30.830 --> 00:00:30.840 align:start position:0%
app up and running hitting instant run
 

00:00:30.840 --> 00:00:32.420 align:start position:0%
app up and running hitting instant run
after<00:00:31.260><c> making</c><00:00:31.529><c> code</c><00:00:31.769><c> changes</c><00:00:32.189><c> such</c><00:00:32.399><c> as</c>

00:00:32.420 --> 00:00:32.430 align:start position:0%
after making code changes such as
 

00:00:32.430 --> 00:00:34.280 align:start position:0%
after making code changes such as
changing<00:00:33.000><c> this</c><00:00:33.120><c> chess</c><00:00:33.360><c> board</c><00:00:33.600><c> from</c><00:00:33.780><c> 2d</c><00:00:34.110><c> to</c><00:00:34.260><c> 3d</c>

00:00:34.280 --> 00:00:34.290 align:start position:0%
changing this chess board from 2d to 3d
 

00:00:34.290 --> 00:00:36.350 align:start position:0%
changing this chess board from 2d to 3d
and<00:00:34.770><c> modifying</c><00:00:35.340><c> the</c><00:00:35.489><c> size</c><00:00:35.730><c> and</c><00:00:35.940><c> color</c><00:00:36.149><c> of</c><00:00:36.270><c> the</c>

00:00:36.350 --> 00:00:36.360 align:start position:0%
and modifying the size and color of the
 

00:00:36.360 --> 00:00:39.170 align:start position:0%
and modifying the size and color of the
pieces<00:00:36.660><c> will</c><00:00:37.530><c> perform</c><00:00:37.800><c> a</c><00:00:37.950><c> hot</c><00:00:38.160><c> swap</c><00:00:38.460><c> sending</c>

00:00:39.170 --> 00:00:39.180 align:start position:0%
pieces will perform a hot swap sending
 

00:00:39.180 --> 00:00:41.690 align:start position:0%
pieces will perform a hot swap sending
only<00:00:39.629><c> the</c><00:00:39.780><c> changed</c><00:00:40.170><c> code</c><00:00:40.440><c> to</c><00:00:40.680><c> your</c><00:00:40.800><c> app</c><00:00:40.980><c> the</c>

00:00:41.690 --> 00:00:41.700 align:start position:0%
only the changed code to your app the
 

00:00:41.700 --> 00:00:43.400 align:start position:0%
only the changed code to your app the
affected<00:00:42.120><c> methods</c><00:00:42.480><c> are</c><00:00:42.600><c> overridden</c><00:00:43.020><c> and</c><00:00:43.230><c> your</c>

00:00:43.400 --> 00:00:43.410 align:start position:0%
affected methods are overridden and your
 

00:00:43.410 --> 00:00:45.380 align:start position:0%
affected methods are overridden and your
code<00:00:43.649><c> changes</c><00:00:44.070><c> are</c><00:00:44.160><c> applied</c><00:00:44.489><c> in</c><00:00:44.760><c> real</c><00:00:44.789><c> time</c>

00:00:45.380 --> 00:00:45.390 align:start position:0%
code changes are applied in real time
 

00:00:45.390 --> 00:00:47.690 align:start position:0%
code changes are applied in real time
within<00:00:45.930><c> the</c><00:00:46.140><c> running</c><00:00:46.410><c> app</c><00:00:46.559><c> instance</c><00:00:46.980><c> hot</c>

00:00:47.690 --> 00:00:47.700 align:start position:0%
within the running app instance hot
 

00:00:47.700 --> 00:00:49.670 align:start position:0%
within the running app instance hot
swapping<00:00:48.059><c> works</c><00:00:48.300><c> by</c><00:00:48.600><c> injecting</c><00:00:48.960><c> code</c><00:00:49.379><c> where</c>

00:00:49.670 --> 00:00:49.680 align:start position:0%
swapping works by injecting code where
 

00:00:49.680 --> 00:00:51.380 align:start position:0%
swapping works by injecting code where
you<00:00:49.860><c> make</c><00:00:50.010><c> changes</c><00:00:50.460><c> your</c><00:00:51.090><c> app</c><00:00:51.210><c> isn't</c>

00:00:51.380 --> 00:00:51.390 align:start position:0%
you make changes your app isn't
 

00:00:51.390 --> 00:00:53.389 align:start position:0%
you make changes your app isn't
restarted<00:00:52.050><c> so</c><00:00:52.199><c> memory</c><00:00:52.590><c> allocations</c><00:00:53.129><c> remain</c>

00:00:53.389 --> 00:00:53.399 align:start position:0%
restarted so memory allocations remain
 

00:00:53.399 --> 00:00:55.400 align:start position:0%
restarted so memory allocations remain
unchanged<00:00:54.120><c> meaning</c><00:00:54.510><c> class</c><00:00:54.719><c> initializers</c>

00:00:55.400 --> 00:00:55.410 align:start position:0%
unchanged meaning class initializers
 

00:00:55.410 --> 00:00:57.709 align:start position:0%
unchanged meaning class initializers
won't<00:00:55.620><c> be</c><00:00:55.739><c> rerun</c><00:00:56.129><c> and</c><00:00:56.309><c> static</c><00:00:57.059><c> variables</c><00:00:57.539><c> are</c>

00:00:57.709 --> 00:00:57.719 align:start position:0%
won't be rerun and static variables are
 

00:00:57.719 --> 00:01:00.020 align:start position:0%
won't be rerun and static variables are
initialized<00:00:58.399><c> existing</c><00:00:59.399><c> instances</c><00:00:59.879><c> and</c>

00:01:00.020 --> 00:01:00.030 align:start position:0%
initialized existing instances and
 

00:01:00.030 --> 00:01:02.060 align:start position:0%
initialized existing instances and
constructs<00:01:00.510><c> like</c><00:01:00.629><c> fields</c><00:01:01.289><c> and</c><00:01:01.500><c> single</c><00:01:01.829><c> syns</c>

00:01:02.060 --> 00:01:02.070 align:start position:0%
constructs like fields and single syns
 

00:01:02.070 --> 00:01:04.939 align:start position:0%
constructs like fields and single syns
are<00:01:02.280><c> left</c><00:01:02.609><c> untouched</c><00:01:03.260><c> changing</c><00:01:04.260><c> resources</c>

00:01:04.939 --> 00:01:04.949 align:start position:0%
are left untouched changing resources
 

00:01:04.949 --> 00:01:07.039 align:start position:0%
are left untouched changing resources
such<00:01:05.280><c> as</c><00:01:05.489><c> editing</c><00:01:05.790><c> colors</c><00:01:06.240><c> strings</c><00:01:06.689><c> or</c><00:01:06.840><c> even</c>

00:01:07.039 --> 00:01:07.049 align:start position:0%
such as editing colors strings or even
 

00:01:07.049 --> 00:01:09.050 align:start position:0%
such as editing colors strings or even
layouts<00:01:07.380><c> will</c><00:01:07.590><c> send</c><00:01:07.890><c> the</c><00:01:08.010><c> modified</c><00:01:08.430><c> resources</c>

00:01:09.050 --> 00:01:09.060 align:start position:0%
layouts will send the modified resources
 

00:01:09.060 --> 00:01:10.789 align:start position:0%
layouts will send the modified resources
file<00:01:09.330><c> to</c><00:01:09.540><c> the</c><00:01:09.630><c> running</c><00:01:09.900><c> app</c><00:01:10.080><c> and</c><00:01:10.380><c> you'll</c><00:01:10.740><c> be</c>

00:01:10.789 --> 00:01:10.799 align:start position:0%
file to the running app and you'll be
 

00:01:10.799 --> 00:01:12.170 align:start position:0%
file to the running app and you'll be
able<00:01:10.860><c> to</c><00:01:11.010><c> see</c><00:01:11.220><c> it</c><00:01:11.369><c> when</c><00:01:11.549><c> the</c><00:01:11.640><c> activity</c><00:01:11.880><c> is</c>

00:01:12.170 --> 00:01:12.180 align:start position:0%
able to see it when the activity is
 

00:01:12.180 --> 00:01:14.990 align:start position:0%
able to see it when the activity is
restarted<00:01:12.780><c> called</c><00:01:13.320><c> a</c><00:01:13.530><c> warm</c><00:01:13.830><c> swap</c><00:01:14.130><c> which</c><00:01:14.820><c> will</c>

00:01:14.990 --> 00:01:15.000 align:start position:0%
restarted called a warm swap which will
 

00:01:15.000 --> 00:01:16.969 align:start position:0%
restarted called a warm swap which will
do<00:01:15.150><c> for</c><00:01:15.420><c> you</c><00:01:15.570><c> automatically</c><00:01:16.229><c> if</c><00:01:16.530><c> we</c><00:01:16.680><c> detect</c>

00:01:16.969 --> 00:01:16.979 align:start position:0%
do for you automatically if we detect
 

00:01:16.979 --> 00:01:19.640 align:start position:0%
do for you automatically if we detect
that<00:01:17.130><c> it's</c><00:01:17.280><c> necessary</c><00:01:17.900><c> some</c><00:01:18.900><c> changes</c><00:01:19.409><c> such</c><00:01:19.619><c> as</c>

00:01:19.640 --> 00:01:19.650 align:start position:0%
that it's necessary some changes such as
 

00:01:19.650 --> 00:01:21.469 align:start position:0%
that it's necessary some changes such as
modifying<00:01:20.040><c> your</c><00:01:20.400><c> manifest</c><00:01:20.850><c> or</c><00:01:21.090><c> changing</c>

00:01:21.469 --> 00:01:21.479 align:start position:0%
modifying your manifest or changing
 

00:01:21.479 --> 00:01:23.660 align:start position:0%
modifying your manifest or changing
layered<00:01:21.780><c> IDs</c><00:01:22.140><c> currently</c><00:01:22.890><c> trigger</c><00:01:23.220><c> a</c><00:01:23.400><c> full</c>

00:01:23.660 --> 00:01:23.670 align:start position:0%
layered IDs currently trigger a full
 

00:01:23.670 --> 00:01:26.359 align:start position:0%
layered IDs currently trigger a full
build<00:01:23.970><c> exactly</c><00:01:24.810><c> which</c><00:01:25.500><c> changes</c><00:01:25.950><c> will</c><00:01:26.130><c> cause</c><00:01:26.340><c> a</c>

00:01:26.359 --> 00:01:26.369 align:start position:0%
build exactly which changes will cause a
 

00:01:26.369 --> 00:01:28.399 align:start position:0%
build exactly which changes will cause a
full<00:01:26.759><c> rebuild</c><00:01:27.090><c> versus</c><00:01:27.600><c> a</c><00:01:27.689><c> called</c><00:01:28.020><c> or</c><00:01:28.170><c> warm</c>

00:01:28.399 --> 00:01:28.409 align:start position:0%
full rebuild versus a called or warm
 

00:01:28.409 --> 00:01:30.679 align:start position:0%
full rebuild versus a called or warm
swap<00:01:28.710><c> will</c><00:01:28.950><c> change</c><00:01:29.310><c> as</c><00:01:29.610><c> instant</c><00:01:30.060><c> run</c><00:01:30.210><c> improves</c>

00:01:30.679 --> 00:01:30.689 align:start position:0%
swap will change as instant run improves
 

00:01:30.689 --> 00:01:32.990 align:start position:0%
swap will change as instant run improves
and<00:01:30.869><c> evolves</c><00:01:31.140><c> so</c><00:01:31.979><c> rather</c><00:01:32.369><c> than</c><00:01:32.549><c> listing</c><00:01:32.880><c> them</c>

00:01:32.990 --> 00:01:33.000 align:start position:0%
and evolves so rather than listing them
 

00:01:33.000 --> 00:01:34.640 align:start position:0%
and evolves so rather than listing them
here<00:01:33.240><c> in</c><00:01:33.329><c> detail</c><00:01:33.750><c> and</c><00:01:33.930><c> having</c><00:01:34.320><c> this</c><00:01:34.380><c> video</c>

00:01:34.640 --> 00:01:34.650 align:start position:0%
here in detail and having this video
 

00:01:34.650 --> 00:01:36.740 align:start position:0%
here in detail and having this video
become<00:01:34.979><c> quickly</c><00:01:35.310><c> updated</c><00:01:35.880><c> you</c><00:01:36.270><c> can</c><00:01:36.299><c> find</c><00:01:36.689><c> the</c>

00:01:36.740 --> 00:01:36.750 align:start position:0%
become quickly updated you can find the
 

00:01:36.750 --> 00:01:39.800 align:start position:0%
become quickly updated you can find the
details<00:01:37.170><c> in</c><00:01:37.409><c> the</c><00:01:37.680><c> docs</c><00:01:38.450><c> instant</c><00:01:39.450><c> run</c><00:01:39.570><c> works</c>

00:01:39.800 --> 00:01:39.810 align:start position:0%
details in the docs instant run works
 

00:01:39.810 --> 00:01:41.600 align:start position:0%
details in the docs instant run works
with<00:01:39.990><c> all</c><00:01:40.200><c> emulators</c><00:01:40.860><c> in</c><00:01:40.979><c> every</c><00:01:41.369><c> recent</c>

00:01:41.600 --> 00:01:41.610 align:start position:0%
with all emulators in every recent
 

00:01:41.610 --> 00:01:43.609 align:start position:0%
with all emulators in every recent
physical<00:01:41.909><c> device</c><00:01:42.390><c> in</c><00:01:42.630><c> fact</c><00:01:42.899><c> on</c><00:01:43.200><c> every</c>

00:01:43.609 --> 00:01:43.619 align:start position:0%
physical device in fact on every
 

00:01:43.619 --> 00:01:45.620 align:start position:0%
physical device in fact on every
platform<00:01:43.890><c> version</c><00:01:44.549><c> all</c><00:01:44.759><c> the</c><00:01:44.880><c> way</c><00:01:44.970><c> back</c><00:01:45.240><c> to</c><00:01:45.479><c> Ice</c>

00:01:45.620 --> 00:01:45.630 align:start position:0%
platform version all the way back to Ice
 

00:01:45.630 --> 00:01:48.710 align:start position:0%
platform version all the way back to Ice
Cream<00:01:45.960><c> Sandwich</c><00:01:46.700><c> not</c><00:01:47.700><c> content</c><00:01:48.149><c> with</c><00:01:48.210><c> instant</c>

00:01:48.710 --> 00:01:48.720 align:start position:0%
Cream Sandwich not content with instant
 

00:01:48.720 --> 00:01:51.050 align:start position:0%
Cream Sandwich not content with instant
run<00:01:48.869><c> Android</c><00:01:49.290><c> studio</c><00:01:49.439><c> 2.0</c><00:01:50.100><c> also</c><00:01:50.310><c> improves</c>

00:01:51.050 --> 00:01:51.060 align:start position:0%
run Android studio 2.0 also improves
 

00:01:51.060 --> 00:01:53.120 align:start position:0%
run Android studio 2.0 also improves
each<00:01:51.329><c> step</c><00:01:51.689><c> of</c><00:01:51.869><c> the</c><00:01:52.049><c> full</c><00:01:52.259><c> build</c><00:01:52.560><c> and</c><00:01:52.829><c> deploy</c>

00:01:53.120 --> 00:01:53.130 align:start position:0%
each step of the full build and deploy
 

00:01:53.130 --> 00:01:55.670 align:start position:0%
each step of the full build and deploy
process<00:01:53.729><c> so</c><00:01:54.119><c> even</c><00:01:54.479><c> full</c><00:01:54.780><c> builds</c><00:01:55.110><c> happen</c><00:01:55.439><c> more</c>

00:01:55.670 --> 00:01:55.680 align:start position:0%
process so even full builds happen more
 

00:01:55.680 --> 00:01:57.830 align:start position:0%
process so even full builds happen more
than<00:01:55.829><c> two</c><00:01:56.009><c> and</c><00:01:56.130><c> a</c><00:01:56.189><c> half</c><00:01:56.369><c> times</c><00:01:56.729><c> faster</c><00:01:57.060><c> the</c>

00:01:57.830 --> 00:01:57.840 align:start position:0%
than two and a half times faster the
 

00:01:57.840 --> 00:01:59.929 align:start position:0%
than two and a half times faster the
first<00:01:58.110><c> time</c><00:01:58.350><c> you</c><00:01:58.530><c> hit</c><00:01:58.770><c> run</c><00:01:59.070><c> or</c><00:01:59.280><c> debug</c><00:01:59.549><c> for</c><00:01:59.820><c> your</c>

00:01:59.929 --> 00:01:59.939 align:start position:0%
first time you hit run or debug for your
 

00:01:59.939 --> 00:02:01.880 align:start position:0%
first time you hit run or debug for your
code<00:02:00.210><c> or</c><00:02:00.479><c> each</c><00:02:00.810><c> time</c><00:02:01.049><c> you</c><00:02:01.170><c> do</c><00:02:01.259><c> a</c><00:02:01.290><c> clean</c><00:02:01.649><c> build</c>

00:02:01.880 --> 00:02:01.890 align:start position:0%
code or each time you do a clean build
 

00:02:01.890 --> 00:02:03.620 align:start position:0%
code or each time you do a clean build
the<00:02:02.130><c> code</c><00:02:02.340><c> is</c><00:02:02.520><c> compiled</c><00:02:02.969><c> and</c><00:02:03.149><c> converted</c><00:02:03.210><c> to</c>

00:02:03.620 --> 00:02:03.630 align:start position:0%
the code is compiled and converted to
 

00:02:03.630 --> 00:02:06.109 align:start position:0%
the code is compiled and converted to
Dex<00:02:03.899><c> files</c><00:02:04.140><c> is</c><00:02:04.439><c> optionally</c><00:02:05.159><c> shrunk</c><00:02:05.520><c> optimized</c>

00:02:06.109 --> 00:02:06.119 align:start position:0%
Dex files is optionally shrunk optimized
 

00:02:06.119 --> 00:02:08.119 align:start position:0%
Dex files is optionally shrunk optimized
and<00:02:06.270><c> obfuscated</c><00:02:06.869><c> with</c><00:02:06.990><c> ProGuard</c><00:02:07.439><c> and</c><00:02:07.649><c> has</c><00:02:07.920><c> its</c>

00:02:08.119 --> 00:02:08.129 align:start position:0%
and obfuscated with ProGuard and has its
 

00:02:08.129 --> 00:02:09.889 align:start position:0%
and obfuscated with ProGuard and has its
classes<00:02:08.550><c> and</c><00:02:08.700><c> resources</c><00:02:08.940><c> packaged</c><00:02:09.720><c> all</c>

00:02:09.889 --> 00:02:09.899 align:start position:0%
classes and resources packaged all
 

00:02:09.899 --> 00:02:11.690 align:start position:0%
classes and resources packaged all
before<00:02:10.140><c> it's</c><00:02:10.470><c> uploaded</c><00:02:10.950><c> to</c><00:02:11.039><c> the</c><00:02:11.099><c> device</c><00:02:11.400><c> and</c>

00:02:11.690 --> 00:02:11.700 align:start position:0%
before it's uploaded to the device and
 

00:02:11.700 --> 00:02:14.080 align:start position:0%
before it's uploaded to the device and
installed<00:02:12.319><c> Android</c><00:02:13.319><c> studio</c><00:02:13.500><c> to</c><00:02:13.830><c> point</c>

00:02:14.080 --> 00:02:14.090 align:start position:0%
installed Android studio to point
 

00:02:14.090 --> 00:02:15.670 align:start position:0%
installed Android studio to point
has<00:02:14.360><c> improved</c><00:02:14.810><c> each</c><00:02:15.050><c> of</c><00:02:15.290><c> these</c><00:02:15.410><c> steps</c>

00:02:15.670 --> 00:02:15.680 align:start position:0%
has improved each of these steps
 

00:02:15.680 --> 00:02:18.460 align:start position:0%
has improved each of these steps
starting<00:02:16.280><c> with</c><00:02:16.340><c> the</c><00:02:16.550><c> X</c><00:02:16.840><c> we've</c><00:02:17.840><c> reduced</c><00:02:18.230><c> time</c>

00:02:18.460 --> 00:02:18.470 align:start position:0%
starting with the X we've reduced time
 

00:02:18.470 --> 00:02:20.650 align:start position:0%
starting with the X we've reduced time
here<00:02:18.739><c> by</c><00:02:18.950><c> over</c><00:02:19.280><c> half</c><00:02:19.519><c> primarily</c><00:02:20.330><c> through</c>

00:02:20.650 --> 00:02:20.660 align:start position:0%
here by over half primarily through
 

00:02:20.660 --> 00:02:22.930 align:start position:0%
here by over half primarily through
improving<00:02:21.019><c> the</c><00:02:21.140><c> DX</c><00:02:21.440><c> merger</c><00:02:21.800><c> algorithm</c><00:02:22.310><c> now</c>

00:02:22.930 --> 00:02:22.940 align:start position:0%
improving the DX merger algorithm now
 

00:02:22.940 --> 00:02:25.000 align:start position:0%
improving the DX merger algorithm now
that<00:02:23.150><c> merging</c><00:02:23.480><c> Dex</c><00:02:23.720><c> dependency</c><00:02:24.410><c> modules</c><00:02:24.830><c> is</c>

00:02:25.000 --> 00:02:25.010 align:start position:0%
that merging Dex dependency modules is
 

00:02:25.010 --> 00:02:26.979 align:start position:0%
that merging Dex dependency modules is
lightning<00:02:25.459><c> fast</c><00:02:25.670><c> we</c><00:02:26.000><c> gain</c><00:02:26.150><c> significant</c><00:02:26.780><c> gains</c>

00:02:26.979 --> 00:02:26.989 align:start position:0%
lightning fast we gain significant gains
 

00:02:26.989 --> 00:02:29.259 align:start position:0%
lightning fast we gain significant gains
from<00:02:27.230><c> pre-dexing</c><00:02:27.800><c> them</c><00:02:28.099><c> and</c><00:02:28.250><c> not</c><00:02:28.670><c> read</c><00:02:28.910><c> Xing</c>

00:02:29.259 --> 00:02:29.269 align:start position:0%
from pre-dexing them and not read Xing
 

00:02:29.269 --> 00:02:31.509 align:start position:0%
from pre-dexing them and not read Xing
them<00:02:29.390><c> if</c><00:02:29.540><c> they</c><00:02:29.750><c> haven't</c><00:02:30.050><c> changed</c><00:02:30.260><c> so</c><00:02:31.129><c> if</c><00:02:31.370><c> your</c>

00:02:31.509 --> 00:02:31.519 align:start position:0%
them if they haven't changed so if your
 

00:02:31.519 --> 00:02:33.250 align:start position:0%
them if they haven't changed so if your
project<00:02:31.700><c> has</c><00:02:32.060><c> a</c><00:02:32.090><c> lot</c><00:02:32.239><c> of</c><00:02:32.420><c> modules</c><00:02:32.870><c> you'll</c><00:02:33.080><c> see</c>

00:02:33.250 --> 00:02:33.260 align:start position:0%
project has a lot of modules you'll see
 

00:02:33.260 --> 00:02:34.600 align:start position:0%
project has a lot of modules you'll see
significant<00:02:33.980><c> gains</c><00:02:34.160><c> here</c>

00:02:34.600 --> 00:02:34.610 align:start position:0%
significant gains here
 

00:02:34.610 --> 00:02:36.970 align:start position:0%
significant gains here
we've<00:02:35.239><c> also</c><00:02:35.480><c> modified</c><00:02:36.049><c> the</c><00:02:36.260><c> X</c><00:02:36.440><c> so</c><00:02:36.590><c> that</c><00:02:36.709><c> it</c><00:02:36.799><c> now</c>

00:02:36.970 --> 00:02:36.980 align:start position:0%
we've also modified the X so that it now
 

00:02:36.980 --> 00:02:38.619 align:start position:0%
we've also modified the X so that it now
runs<00:02:37.220><c> in</c><00:02:37.459><c> process</c><00:02:37.970><c> and</c><00:02:38.180><c> you</c><00:02:38.269><c> can</c><00:02:38.420><c> specify</c>

00:02:38.619 --> 00:02:38.629 align:start position:0%
runs in process and you can specify
 

00:02:38.629 --> 00:02:40.869 align:start position:0%
runs in process and you can specify
running<00:02:39.260><c> up</c><00:02:39.410><c> to</c><00:02:39.440><c> four</c><00:02:39.890><c> DX</c><00:02:40.099><c> instances</c><00:02:40.760><c> in</c>

00:02:40.869 --> 00:02:40.879 align:start position:0%
running up to four DX instances in
 

00:02:40.879 --> 00:02:43.539 align:start position:0%
running up to four DX instances in
parallel<00:02:41.500><c> this</c><00:02:42.500><c> has</c><00:02:42.739><c> significant</c><00:02:43.400><c> advantages</c>

00:02:43.539 --> 00:02:43.549 align:start position:0%
parallel this has significant advantages
 

00:02:43.549 --> 00:02:46.180 align:start position:0%
parallel this has significant advantages
as<00:02:44.239><c> we</c><00:02:44.420><c> no</c><00:02:44.599><c> longer</c><00:02:44.930><c> start</c><00:02:45.140><c> a</c><00:02:45.319><c> new</c><00:02:45.530><c> VM</c><00:02:45.830><c> for</c><00:02:46.040><c> each</c>

00:02:46.180 --> 00:02:46.190 align:start position:0%
as we no longer start a new VM for each
 

00:02:46.190 --> 00:02:48.220 align:start position:0%
as we no longer start a new VM for each
DX<00:02:46.610><c> instance</c><00:02:47.060><c> giving</c><00:02:47.450><c> the</c><00:02:47.569><c> JIT</c><00:02:47.810><c> more</c>

00:02:48.220 --> 00:02:48.230 align:start position:0%
DX instance giving the JIT more
 

00:02:48.230 --> 00:02:49.780 align:start position:0%
DX instance giving the JIT more
opportunity<00:02:48.769><c> to</c><00:02:48.799><c> optimize</c><00:02:49.099><c> code</c><00:02:49.489><c> and</c>

00:02:49.780 --> 00:02:49.790 align:start position:0%
opportunity to optimize code and
 

00:02:49.790 --> 00:02:51.490 align:start position:0%
opportunity to optimize code and
removing<00:02:50.390><c> the</c><00:02:50.480><c> overhead</c><00:02:50.840><c> of</c><00:02:50.870><c> starting</c><00:02:51.319><c> and</c>

00:02:51.490 --> 00:02:51.500 align:start position:0%
removing the overhead of starting and
 

00:02:51.500 --> 00:02:53.680 align:start position:0%
removing the overhead of starting and
running<00:02:51.650><c> multiple</c><00:02:52.130><c> parallel</c><00:02:52.640><c> VM</c><00:02:53.120><c> instances</c>

00:02:53.680 --> 00:02:53.690 align:start position:0%
running multiple parallel VM instances
 

00:02:53.690 --> 00:02:56.380 align:start position:0%
running multiple parallel VM instances
if<00:02:54.590><c> you're</c><00:02:54.860><c> using</c><00:02:54.980><c> ProGuard</c><00:02:55.670><c> it</c><00:02:55.790><c> creates</c><00:02:56.209><c> a</c>

00:02:56.380 --> 00:02:56.390 align:start position:0%
if you're using ProGuard it creates a
 

00:02:56.390 --> 00:02:58.539 align:start position:0%
if you're using ProGuard it creates a
single<00:02:56.630><c> jar</c><00:02:57.049><c> that</c><00:02:57.079><c> effectively</c><00:02:57.890><c> disables</c><00:02:58.400><c> the</c>

00:02:58.539 --> 00:02:58.549 align:start position:0%
single jar that effectively disables the
 

00:02:58.549 --> 00:03:00.100 align:start position:0%
single jar that effectively disables the
pre-dexing<00:02:58.910><c> advantages</c><00:02:59.569><c> that</c><00:02:59.750><c> we</c><00:02:59.900><c> just</c>

00:03:00.100 --> 00:03:00.110 align:start position:0%
pre-dexing advantages that we just
 

00:03:00.110 --> 00:03:02.860 align:start position:0%
pre-dexing advantages that we just
gained<00:03:00.379><c> so</c><00:03:01.160><c> we</c><00:03:01.519><c> developed</c><00:03:01.879><c> a</c><00:03:02.030><c> new</c><00:03:02.209><c> shrinker</c><00:03:02.660><c> to</c>

00:03:02.860 --> 00:03:02.870 align:start position:0%
gained so we developed a new shrinker to
 

00:03:02.870 --> 00:03:05.170 align:start position:0%
gained so we developed a new shrinker to
use<00:03:03.049><c> in</c><00:03:03.290><c> debug</c><00:03:03.739><c> builds</c><00:03:04.099><c> it</c><00:03:04.730><c> doesn't</c><00:03:05.060><c> replace</c>

00:03:05.170 --> 00:03:05.180 align:start position:0%
use in debug builds it doesn't replace
 

00:03:05.180 --> 00:03:07.270 align:start position:0%
use in debug builds it doesn't replace
ProGuard<00:03:05.900><c> it</c><00:03:06.110><c> just</c><00:03:06.410><c> replaces</c><00:03:06.860><c> it's</c><00:03:07.010><c> shrinking</c>

00:03:07.270 --> 00:03:07.280 align:start position:0%
ProGuard it just replaces it's shrinking
 

00:03:07.280 --> 00:03:09.520 align:start position:0%
ProGuard it just replaces it's shrinking
functionality<00:03:08.060><c> so</c><00:03:08.420><c> you</c><00:03:08.690><c> still</c><00:03:09.049><c> need</c><00:03:09.260><c> to</c><00:03:09.379><c> run</c>

00:03:09.520 --> 00:03:09.530 align:start position:0%
functionality so you still need to run
 

00:03:09.530 --> 00:03:11.949 align:start position:0%
functionality so you still need to run
pro<00:03:09.799><c> guard</c><00:03:10.040><c> on</c><00:03:10.190><c> release</c><00:03:10.549><c> builds</c><00:03:10.879><c> to</c><00:03:11.000><c> optimize</c>

00:03:11.949 --> 00:03:11.959 align:start position:0%
pro guard on release builds to optimize
 

00:03:11.959 --> 00:03:14.920 align:start position:0%
pro guard on release builds to optimize
and<00:03:12.230><c> obfuscate</c><00:03:12.980><c> your</c><00:03:13.010><c> code</c><00:03:13.660><c> but</c><00:03:14.660><c> for</c>

00:03:14.920 --> 00:03:14.930 align:start position:0%
and obfuscate your code but for
 

00:03:14.930 --> 00:03:16.539 align:start position:0%
and obfuscate your code but for
debugging<00:03:15.170><c> the</c><00:03:15.379><c> shrinker</c><00:03:15.680><c> isn't</c><00:03:15.920><c> much</c><00:03:16.040><c> faster</c>

00:03:16.539 --> 00:03:16.549 align:start position:0%
debugging the shrinker isn't much faster
 

00:03:16.549 --> 00:03:18.490 align:start position:0%
debugging the shrinker isn't much faster
by<00:03:16.970><c> including</c><00:03:17.390><c> some</c><00:03:17.540><c> incremental</c><00:03:18.019><c> support</c>

00:03:18.490 --> 00:03:18.500 align:start position:0%
by including some incremental support
 

00:03:18.500 --> 00:03:20.110 align:start position:0%
by including some incremental support
and<00:03:18.680><c> critically</c><00:03:19.130><c> by</c><00:03:19.280><c> not</c><00:03:19.549><c> read</c><00:03:19.790><c> Xing</c>

00:03:20.110 --> 00:03:20.120 align:start position:0%
and critically by not read Xing
 

00:03:20.120 --> 00:03:22.960 align:start position:0%
and critically by not read Xing
dependencies<00:03:20.660><c> to</c><00:03:21.280><c> improve</c><00:03:22.280><c> double</c><00:03:22.579><c> apt</c>

00:03:22.960 --> 00:03:22.970 align:start position:0%
dependencies to improve double apt
 

00:03:22.970 --> 00:03:24.879 align:start position:0%
dependencies to improve double apt
packaging<00:03:23.480><c> times</c><00:03:23.720><c> on</c><00:03:23.930><c> full</c><00:03:24.139><c> builds</c><00:03:24.560><c> we</c><00:03:24.709><c> now</c>

00:03:24.879 --> 00:03:24.889 align:start position:0%
packaging times on full builds we now
 

00:03:24.889 --> 00:03:27.280 align:start position:0%
packaging times on full builds we now
ask<00:03:25.100><c> you</c><00:03:25.400><c> to</c><00:03:25.519><c> select</c><00:03:25.910><c> a</c><00:03:26.120><c> deploy</c><00:03:26.450><c> target</c><00:03:26.900><c> before</c>

00:03:27.280 --> 00:03:27.290 align:start position:0%
ask you to select a deploy target before
 

00:03:27.290 --> 00:03:28.150 align:start position:0%
ask you to select a deploy target before
your<00:03:27.440><c> apt</c><00:03:27.560><c> is</c><00:03:27.709><c> built</c>

00:03:28.150 --> 00:03:28.160 align:start position:0%
your apt is built
 

00:03:28.160 --> 00:03:30.160 align:start position:0%
your apt is built
we'll<00:03:28.819><c> check</c><00:03:29.030><c> what</c><00:03:29.269><c> resources</c><00:03:29.540><c> are</c><00:03:29.810><c> required</c>

00:03:30.160 --> 00:03:30.170 align:start position:0%
we'll check what resources are required
 

00:03:30.170 --> 00:03:31.990 align:start position:0%
we'll check what resources are required
for<00:03:30.349><c> that</c><00:03:30.440><c> particular</c><00:03:30.560><c> device</c><00:03:31.040><c> for</c><00:03:31.910><c> example</c>

00:03:31.990 --> 00:03:32.000 align:start position:0%
for that particular device for example
 

00:03:32.000 --> 00:03:33.910 align:start position:0%
for that particular device for example
initially<00:03:32.569><c> we'll</c><00:03:32.959><c> only</c><00:03:33.230><c> package</c><00:03:33.590><c> and</c><00:03:33.769><c> push</c>

00:03:33.910 --> 00:03:33.920 align:start position:0%
initially we'll only package and push
 

00:03:33.920 --> 00:03:35.140 align:start position:0%
initially we'll only package and push
the<00:03:34.099><c> appropriate</c><00:03:34.549><c> image</c><00:03:34.790><c> resource</c>

00:03:35.140 --> 00:03:35.150 align:start position:0%
the appropriate image resource
 

00:03:35.150 --> 00:03:37.240 align:start position:0%
the appropriate image resource
resolutions<00:03:35.750><c> and</c><00:03:35.959><c> future</c><00:03:36.889><c> Android</c><00:03:37.130><c> studio</c>

00:03:37.240 --> 00:03:37.250 align:start position:0%
resolutions and future Android studio
 

00:03:37.250 --> 00:03:39.039 align:start position:0%
resolutions and future Android studio
releases<00:03:37.700><c> we'll</c><00:03:38.090><c> expand</c><00:03:38.510><c> that</c><00:03:38.660><c> to</c><00:03:38.720><c> include</c>

00:03:39.039 --> 00:03:39.049 align:start position:0%
releases we'll expand that to include
 

00:03:39.049 --> 00:03:41.680 align:start position:0%
releases we'll expand that to include
resources<00:03:39.799><c> such</c><00:03:40.099><c> as</c><00:03:40.130><c> abis</c><00:03:40.790><c> and</c><00:03:41.060><c> legacy</c><00:03:41.389><c> multi</c>

00:03:41.680 --> 00:03:41.690 align:start position:0%
resources such as abis and legacy multi
 

00:03:41.690 --> 00:03:45.129 align:start position:0%
resources such as abis and legacy multi
decks<00:03:42.130><c> to</c><00:03:43.130><c> improve</c><00:03:43.430><c> deploy</c><00:03:44.000><c> times</c><00:03:44.269><c> we</c><00:03:44.599><c> improve</c>

00:03:45.129 --> 00:03:45.139 align:start position:0%
decks to improve deploy times we improve
 

00:03:45.139 --> 00:03:47.530 align:start position:0%
decks to improve deploy times we improve
the<00:03:45.319><c> ADB</c><00:03:45.769><c> push-pull</c><00:03:46.340><c> protocol</c><00:03:46.819><c> making</c><00:03:47.419><c> it</c>

00:03:47.530 --> 00:03:47.540 align:start position:0%
the ADB push-pull protocol making it
 

00:03:47.540 --> 00:03:50.140 align:start position:0%
the ADB push-pull protocol making it
very<00:03:48.049><c> fast</c><00:03:48.380><c> a</c><00:03:48.560><c> deploy</c><00:03:48.799><c> to</c><00:03:48.950><c> an</c><00:03:49.040><c> emulator</c><00:03:49.370><c> which</c>

00:03:50.140 --> 00:03:50.150 align:start position:0%
very fast a deploy to an emulator which
 

00:03:50.150 --> 00:03:51.640 align:start position:0%
very fast a deploy to an emulator which
seems<00:03:50.359><c> like</c><00:03:50.510><c> a</c><00:03:50.540><c> really</c><00:03:50.930><c> good</c><00:03:51.200><c> reason</c><00:03:51.440><c> to</c>

00:03:51.640 --> 00:03:51.650 align:start position:0%
seems like a really good reason to
 

00:03:51.650 --> 00:03:53.409 align:start position:0%
seems like a really good reason to
improve<00:03:52.040><c> the</c><00:03:52.160><c> emulator</c><00:03:52.549><c> UX</c><00:03:52.940><c> and</c><00:03:53.150><c> make</c><00:03:53.269><c> it</c>

00:03:53.409 --> 00:03:53.419 align:start position:0%
improve the emulator UX and make it
 

00:03:53.419 --> 00:03:56.199 align:start position:0%
improve the emulator UX and make it
really<00:03:53.599><c> really</c><00:03:54.019><c> ridiculously</c><00:03:54.410><c> fast</c><00:03:54.950><c> in</c><00:03:55.340><c> fact</c>

00:03:56.199 --> 00:03:56.209 align:start position:0%
really really ridiculously fast in fact
 

00:03:56.209 --> 00:03:57.849 align:start position:0%
really really ridiculously fast in fact
running<00:03:56.540><c> the</c><00:03:56.630><c> new</c><00:03:56.750><c> emulator</c><00:03:56.959><c> are</c><00:03:57.349><c> typical</c><00:03:57.680><c> def</c>

00:03:57.849 --> 00:03:57.859 align:start position:0%
running the new emulator are typical def
 

00:03:57.859 --> 00:03:59.770 align:start position:0%
running the new emulator are typical def
hardware<00:03:58.280><c> is</c><00:03:58.430><c> faster</c><00:03:58.910><c> than</c><00:03:59.120><c> using</c><00:03:59.329><c> a</c><00:03:59.630><c> physical</c>

00:03:59.770 --> 00:03:59.780 align:start position:0%
hardware is faster than using a physical
 

00:03:59.780 --> 00:04:03.759 align:start position:0%
hardware is faster than using a physical
Android<00:04:00.380><c> device</c><00:04:02.109><c> to</c><00:04:03.109><c> achieve</c><00:04:03.349><c> this</c><00:04:03.530><c> we've</c>

00:04:03.759 --> 00:04:03.769 align:start position:0%
Android device to achieve this we've
 

00:04:03.769 --> 00:04:05.740 align:start position:0%
Android device to achieve this we've
added<00:04:03.950><c> SMP</c><00:04:04.489><c> support</c><00:04:04.880><c> to</c><00:04:05.030><c> take</c><00:04:05.209><c> advantage</c><00:04:05.630><c> of</c>

00:04:05.740 --> 00:04:05.750 align:start position:0%
added SMP support to take advantage of
 

00:04:05.750 --> 00:04:07.720 align:start position:0%
added SMP support to take advantage of
host<00:04:05.989><c> multi-core</c><00:04:06.769><c> architecture</c><00:04:07.519><c> and</c>

00:04:07.720 --> 00:04:07.730 align:start position:0%
host multi-core architecture and
 

00:04:07.730 --> 00:04:10.599 align:start position:0%
host multi-core architecture and
optimize<00:04:08.239><c> GPU</c><00:04:08.750><c> i/o</c><00:04:08.959><c> and</c><00:04:09.319><c> CPU</c><00:04:09.829><c> performance</c><00:04:10.010><c> at</c>

00:04:10.599 --> 00:04:10.609 align:start position:0%
optimize GPU i/o and CPU performance at
 

00:04:10.609 --> 00:04:13.150 align:start position:0%
optimize GPU i/o and CPU performance at
the<00:04:11.060><c> same</c><00:04:11.239><c> time</c><00:04:11.510><c> we</c><00:04:11.810><c> completely</c><00:04:12.440><c> rebuilt</c><00:04:12.889><c> the</c>

00:04:13.150 --> 00:04:13.160 align:start position:0%
the same time we completely rebuilt the
 

00:04:13.160 --> 00:04:16.089 align:start position:0%
the same time we completely rebuilt the
emulator<00:04:13.549><c> UI</c><00:04:13.790><c> it</c><00:04:14.569><c> now</c><00:04:14.840><c> includes</c><00:04:15.019><c> a</c><00:04:15.410><c> toolbar</c><00:04:15.889><c> to</c>

00:04:16.089 --> 00:04:16.099 align:start position:0%
emulator UI it now includes a toolbar to
 

00:04:16.099 --> 00:04:18.099 align:start position:0%
emulator UI it now includes a toolbar to
enable<00:04:16.430><c> actions</c><00:04:16.849><c> like</c><00:04:17.060><c> screen</c><00:04:17.389><c> rotation</c><00:04:17.930><c> and</c>

00:04:18.099 --> 00:04:18.109 align:start position:0%
enable actions like screen rotation and
 

00:04:18.109 --> 00:04:20.409 align:start position:0%
enable actions like screen rotation and
screenshots<00:04:18.919><c> and</c><00:04:19.160><c> support</c><00:04:20.030><c> for</c><00:04:20.180><c> deploying</c>

00:04:20.409 --> 00:04:20.419 align:start position:0%
screenshots and support for deploying
 

00:04:20.419 --> 00:04:22.659 align:start position:0%
screenshots and support for deploying
apks<00:04:20.989><c> through</c><00:04:21.289><c> drag</c><00:04:21.530><c> and</c><00:04:21.680><c> drop</c><00:04:21.889><c> you</c><00:04:22.640><c> can</c>

00:04:22.659 --> 00:04:22.669 align:start position:0%
apks through drag and drop you can
 

00:04:22.669 --> 00:04:24.850 align:start position:0%
apks through drag and drop you can
rescale<00:04:23.240><c> the</c><00:04:23.419><c> emulator</c><00:04:23.810><c> frame</c><00:04:24.140><c> by</c><00:04:24.349><c> dragging</c><00:04:24.770><c> a</c>

00:04:24.850 --> 00:04:24.860 align:start position:0%
rescale the emulator frame by dragging a
 

00:04:24.860 --> 00:04:27.310 align:start position:0%
rescale the emulator frame by dragging a
corner<00:04:25.060><c> modify</c><00:04:26.060><c> a</c><00:04:26.090><c> device</c><00:04:26.450><c> hardware</c><00:04:26.900><c> changes</c>

00:04:27.310 --> 00:04:27.320 align:start position:0%
corner modify a device hardware changes
 

00:04:27.320 --> 00:04:27.940 align:start position:0%
corner modify a device hardware changes
like<00:04:27.530><c> GP</c>

00:04:27.940 --> 00:04:27.950 align:start position:0%
like GP
 

00:04:27.950 --> 00:04:29.890 align:start position:0%
like GP
cellular<00:04:28.670><c> network</c><00:04:29.000><c> conditions</c><00:04:29.240><c> battery</c>

00:04:29.890 --> 00:04:29.900 align:start position:0%
cellular network conditions battery
 

00:04:29.900 --> 00:04:32.500 align:start position:0%
cellular network conditions battery
state<00:04:30.200><c> and</c><00:04:30.380><c> incoming</c><00:04:31.010><c> phone</c><00:04:31.400><c> calls</c><00:04:31.640><c> or</c><00:04:31.880><c> texts</c>

00:04:32.500 --> 00:04:32.510 align:start position:0%
state and incoming phone calls or texts
 

00:04:32.510 --> 00:04:34.690 align:start position:0%
state and incoming phone calls or texts
we've<00:04:33.320><c> also</c><00:04:33.500><c> made</c><00:04:33.740><c> it</c><00:04:33.800><c> easier</c><00:04:33.980><c> to</c><00:04:34.220><c> keep</c><00:04:34.430><c> up</c><00:04:34.640><c> to</c>

00:04:34.690 --> 00:04:34.700 align:start position:0%
we've also made it easier to keep up to
 

00:04:34.700 --> 00:04:36.850 align:start position:0%
we've also made it easier to keep up to
date<00:04:34.880><c> the</c><00:04:35.600><c> IDE</c><00:04:35.930><c> will</c><00:04:36.230><c> prompt</c><00:04:36.620><c> you</c><00:04:36.740><c> when</c>

00:04:36.850 --> 00:04:36.860 align:start position:0%
date the IDE will prompt you when
 

00:04:36.860 --> 00:04:38.530 align:start position:0%
date the IDE will prompt you when
there's<00:04:37.040><c> a</c><00:04:37.100><c> new</c><00:04:37.250><c> emulator</c><00:04:37.460><c> available</c><00:04:38.240><c> for</c><00:04:38.450><c> you</c>

00:04:38.530 --> 00:04:38.540 align:start position:0%
there's a new emulator available for you
 

00:04:38.540 --> 00:04:40.780 align:start position:0%
there's a new emulator available for you
to<00:04:38.630><c> download</c><00:04:39.310><c> if</c><00:04:40.310><c> you're</c><00:04:40.490><c> building</c><00:04:40.610><c> something</c>

00:04:40.780 --> 00:04:40.790 align:start position:0%
to download if you're building something
 

00:04:40.790 --> 00:04:43.150 align:start position:0%
to download if you're building something
graphics-intensive<00:04:41.540><c> like</c><00:04:42.230><c> a</c><00:04:42.260><c> game</c><00:04:42.560><c> you</c><00:04:42.980><c> can</c>

00:04:43.150 --> 00:04:43.160 align:start position:0%
graphics-intensive like a game you can
 

00:04:43.160 --> 00:04:45.130 align:start position:0%
graphics-intensive like a game you can
take<00:04:43.310><c> advantage</c><00:04:43.700><c> of</c><00:04:43.790><c> a</c><00:04:43.880><c> new</c><00:04:44.060><c> GPU</c><00:04:44.540><c> profiler</c><00:04:44.990><c> and</c>

00:04:45.130 --> 00:04:45.140 align:start position:0%
take advantage of a new GPU profiler and
 

00:04:45.140 --> 00:04:48.160 align:start position:0%
take advantage of a new GPU profiler and
debugger<00:04:46.240><c> it</c><00:04:47.240><c> lets</c><00:04:47.450><c> you</c><00:04:47.570><c> record</c><00:04:47.690><c> and</c><00:04:48.080><c> replay</c>

00:04:48.160 --> 00:04:48.170 align:start position:0%
debugger it lets you record and replay
 

00:04:48.170 --> 00:04:50.320 align:start position:0%
debugger it lets you record and replay
the<00:04:48.530><c> entire</c><00:04:48.620><c> GPU</c><00:04:49.430><c> stream</c><00:04:49.730><c> frame-by-frame</c>

00:04:50.320 --> 00:04:50.330 align:start position:0%
the entire GPU stream frame-by-frame
 

00:04:50.330 --> 00:04:53.080 align:start position:0%
the entire GPU stream frame-by-frame
allowing<00:04:51.320><c> you</c><00:04:51.440><c> to</c><00:04:51.530><c> inspect</c><00:04:51.890><c> the</c><00:04:52.010><c> GPU</c><00:04:52.400><c> state</c><00:04:52.670><c> at</c>

00:04:53.080 --> 00:04:53.090 align:start position:0%
allowing you to inspect the GPU state at
 

00:04:53.090 --> 00:04:55.180 align:start position:0%
allowing you to inspect the GPU state at
each<00:04:53.390><c> stage</c><00:04:53.780><c> and</c><00:04:54.050><c> help</c><00:04:54.470><c> you</c><00:04:54.560><c> understand</c><00:04:54.980><c> what</c>

00:04:55.180 --> 00:04:55.190 align:start position:0%
each stage and help you understand what
 

00:04:55.190 --> 00:05:00.660 align:start position:0%
each stage and help you understand what
caused<00:04:55.490><c> each</c><00:04:55.820><c> specific</c><00:04:56.390><c> rendering</c><00:04:56.810><c> outcome</c>

00:05:00.660 --> 00:05:00.670 align:start position:0%
 
 

00:05:00.670 --> 00:05:03.430 align:start position:0%
 
you<00:05:01.670><c> can</c><00:05:01.700><c> select</c><00:05:02.210><c> an</c><00:05:02.450><c> individual</c><00:05:02.900><c> frame</c><00:05:03.230><c> by</c>

00:05:03.430 --> 00:05:03.440 align:start position:0%
you can select an individual frame by
 

00:05:03.440 --> 00:05:05.350 align:start position:0%
you can select an individual frame by
either<00:05:03.650><c> the</c><00:05:03.890><c> top</c><00:05:04.100><c> bar</c><00:05:04.310><c> or</c><00:05:04.520><c> the</c><00:05:04.640><c> GPU</c><00:05:05.030><c> commands</c>

00:05:05.350 --> 00:05:05.360 align:start position:0%
either the top bar or the GPU commands
 

00:05:05.360 --> 00:05:07.690 align:start position:0%
either the top bar or the GPU commands
panel<00:05:05.750><c> once</c><00:05:06.470><c> you</c><00:05:06.620><c> select</c><00:05:06.890><c> a</c><00:05:06.980><c> frame</c><00:05:07.250><c> the</c><00:05:07.490><c> frame</c>

00:05:07.690 --> 00:05:07.700 align:start position:0%
panel once you select a frame the frame
 

00:05:07.700 --> 00:05:09.340 align:start position:0%
panel once you select a frame the frame
buffer<00:05:07.910><c> window</c><00:05:08.240><c> will</c><00:05:08.390><c> update</c><00:05:08.600><c> to</c><00:05:09.020><c> show</c><00:05:09.200><c> that</c>

00:05:09.340 --> 00:05:09.350 align:start position:0%
buffer window will update to show that
 

00:05:09.350 --> 00:05:11.680 align:start position:0%
buffer window will update to show that
frames<00:05:09.650><c> contents</c><00:05:10.220><c> you</c><00:05:10.970><c> can</c><00:05:11.120><c> also</c><00:05:11.240><c> see</c><00:05:11.600><c> and</c>

00:05:11.680 --> 00:05:11.690 align:start position:0%
frames contents you can also see and
 

00:05:11.690 --> 00:05:13.810 align:start position:0%
frames contents you can also see and
inspect<00:05:12.020><c> each</c><00:05:12.200><c> individual</c><00:05:12.890><c> command</c><00:05:13.280><c> +</c><00:05:13.550><c> GL</c>

00:05:13.810 --> 00:05:13.820 align:start position:0%
inspect each individual command + GL
 

00:05:13.820 --> 00:05:15.940 align:start position:0%
inspect each individual command + GL
call<00:05:14.090><c> that</c><00:05:14.270><c> was</c><00:05:14.390><c> used</c><00:05:14.660><c> you</c><00:05:15.200><c> can</c><00:05:15.350><c> also</c><00:05:15.500><c> use</c><00:05:15.800><c> the</c>

00:05:15.940 --> 00:05:15.950 align:start position:0%
call that was used you can also use the
 

00:05:15.950 --> 00:05:18.430 align:start position:0%
call that was used you can also use the
GPU<00:05:16.280><c> state</c><00:05:16.790><c> window</c><00:05:17.180><c> or</c><00:05:17.420><c> the</c><00:05:17.450><c> textures</c><00:05:17.930><c> tab</c><00:05:18.140><c> to</c>

00:05:18.430 --> 00:05:18.440 align:start position:0%
GPU state window or the textures tab to
 

00:05:18.440 --> 00:05:20.320 align:start position:0%
GPU state window or the textures tab to
explore<00:05:18.800><c> GPU</c><00:05:19.220><c> state</c><00:05:19.460><c> at</c><00:05:19.640><c> the</c><00:05:19.730><c> time</c><00:05:19.760><c> of</c><00:05:20.210><c> your</c>

00:05:20.320 --> 00:05:20.330 align:start position:0%
explore GPU state at the time of your
 

00:05:20.330 --> 00:05:22.540 align:start position:0%
explore GPU state at the time of your
selected<00:05:20.630><c> frame</c><00:05:21.050><c> or</c><00:05:21.290><c> draw</c><00:05:21.590><c> calls</c><00:05:21.830><c> enter</c><00:05:22.520><c> a</c>

00:05:22.540 --> 00:05:22.550 align:start position:0%
selected frame or draw calls enter a
 

00:05:22.550 --> 00:05:25.600 align:start position:0%
selected frame or draw calls enter a
Studio<00:05:22.910><c> 2.0</c><00:05:23.480><c> is</c><00:05:23.750><c> built</c><00:05:24.020><c> on</c><00:05:24.170><c> IntelliJ</c><00:05:24.740><c> 15</c><00:05:24.980><c> which</c>

00:05:25.600 --> 00:05:25.610 align:start position:0%
Studio 2.0 is built on IntelliJ 15 which
 

00:05:25.610 --> 00:05:27.550 align:start position:0%
Studio 2.0 is built on IntelliJ 15 which
offers<00:05:25.940><c> improved</c><00:05:26.600><c> stability</c><00:05:26.810><c> and</c><00:05:27.260><c> a</c><00:05:27.320><c> number</c>

00:05:27.550 --> 00:05:27.560 align:start position:0%
offers improved stability and a number
 

00:05:27.560 --> 00:05:30.070 align:start position:0%
offers improved stability and a number
of<00:05:27.710><c> new</c><00:05:27.890><c> features</c><00:05:28.330><c> including</c><00:05:29.330><c> improvements</c>

00:05:30.070 --> 00:05:30.080 align:start position:0%
of new features including improvements
 

00:05:30.080 --> 00:05:31.390 align:start position:0%
of new features including improvements
to<00:05:30.170><c> the</c><00:05:30.230><c> built</c><00:05:30.410><c> in</c><00:05:30.530><c> integrations</c><00:05:31.220><c> with</c>

00:05:31.390 --> 00:05:31.400 align:start position:0%
to the built in integrations with
 

00:05:31.400 --> 00:05:33.520 align:start position:0%
to the built in integrations with
version<00:05:31.640><c> control</c><00:05:31.790><c> systems</c><00:05:32.570><c> such</c><00:05:32.990><c> as</c><00:05:33.020><c> support</c>

00:05:33.520 --> 00:05:33.530 align:start position:0%
version control systems such as support
 

00:05:33.530 --> 00:05:35.950 align:start position:0%
version control systems such as support
for<00:05:33.710><c> rebase</c><00:05:34.040><c> on</c><00:05:34.250><c> git</c><00:05:34.490><c> and</c><00:05:34.730><c> cool</c><00:05:35.390><c> new</c><00:05:35.570><c> features</c>

00:05:35.950 --> 00:05:35.960 align:start position:0%
for rebase on git and cool new features
 

00:05:35.960 --> 00:05:38.230 align:start position:0%
for rebase on git and cool new features
like<00:05:35.990><c> finding</c><00:05:36.680><c> path</c><00:05:36.920><c> and</c><00:05:37.220><c> distraction</c><00:05:37.940><c> free</c>

00:05:38.230 --> 00:05:38.240 align:start position:0%
like finding path and distraction free
 

00:05:38.240 --> 00:05:40.000 align:start position:0%
like finding path and distraction free
mode<00:05:38.510><c> there's</c><00:05:39.050><c> also</c><00:05:39.230><c> a</c><00:05:39.350><c> unified</c><00:05:39.800><c> user</c>

00:05:40.000 --> 00:05:40.010 align:start position:0%
mode there's also a unified user
 

00:05:40.010 --> 00:05:41.950 align:start position:0%
mode there's also a unified user
interface<00:05:40.550><c> for</c><00:05:40.760><c> testing</c><00:05:41.240><c> that</c><00:05:41.390><c> includes</c><00:05:41.810><c> a</c>

00:05:41.950 --> 00:05:41.960 align:start position:0%
interface for testing that includes a
 

00:05:41.960 --> 00:05:43.720 align:start position:0%
interface for testing that includes a
test<00:05:42.290><c> runner</c><00:05:42.530><c> tool</c><00:05:42.770><c> window</c><00:05:43.130><c> inline</c>

00:05:43.720 --> 00:05:43.730 align:start position:0%
test runner tool window inline
 

00:05:43.730 --> 00:05:46.030 align:start position:0%
test runner tool window inline
statistics<00:05:44.390><c> and</c><00:05:44.630><c> a</c><00:05:45.080><c> test</c><00:05:45.320><c> result</c><00:05:45.620><c> history</c>

00:05:46.030 --> 00:05:46.040 align:start position:0%
statistics and a test result history
 

00:05:46.040 --> 00:05:47.650 align:start position:0%
statistics and a test result history
we've<00:05:46.400><c> built</c><00:05:46.640><c> on</c><00:05:46.820><c> top</c><00:05:47.090><c> of</c><00:05:47.210><c> those</c><00:05:47.360><c> test</c>

00:05:47.650 --> 00:05:47.660 align:start position:0%
we've built on top of those test
 

00:05:47.660 --> 00:05:49.510 align:start position:0%
we've built on top of those test
improvements<00:05:48.260><c> allowing</c><00:05:48.800><c> you</c><00:05:48.950><c> to</c><00:05:49.070><c> have</c><00:05:49.190><c> both</c>

00:05:49.510 --> 00:05:49.520 align:start position:0%
improvements allowing you to have both
 

00:05:49.520 --> 00:05:52.180 align:start position:0%
improvements allowing you to have both
Android<00:05:50.090><c> and</c><00:05:50.300><c> unit</c><00:05:50.870><c> tests</c><00:05:51.200><c> or</c><00:05:51.350><c> sets</c><00:05:51.650><c> active</c>

00:05:52.180 --> 00:05:52.190 align:start position:0%
Android and unit tests or sets active
 

00:05:52.190 --> 00:05:54.430 align:start position:0%
Android and unit tests or sets active
while<00:05:52.610><c> you</c><00:05:52.760><c> develop</c><00:05:52.880><c> enabling</c><00:05:53.810><c> refactorings</c>

00:05:54.430 --> 00:05:54.440 align:start position:0%
while you develop enabling refactorings
 

00:05:54.440 --> 00:05:56.860 align:start position:0%
while you develop enabling refactorings
across<00:05:54.830><c> those</c><00:05:55.100><c> source</c><00:05:55.370><c> sets</c><00:05:55.690><c> we've</c><00:05:56.690><c> also</c>

00:05:56.860 --> 00:05:56.870 align:start position:0%
across those source sets we've also
 

00:05:56.870 --> 00:05:58.480 align:start position:0%
across those source sets we've also
worked<00:05:57.170><c> closely</c><00:05:57.290><c> with</c><00:05:57.620><c> Google</c><00:05:58.010><c> search</c><00:05:58.280><c> to</c>

00:05:58.480 --> 00:05:58.490 align:start position:0%
worked closely with Google search to
 

00:05:58.490 --> 00:06:00.370 align:start position:0%
worked closely with Google search to
make<00:05:58.610><c> it</c><00:05:58.730><c> easy</c><00:05:59.000><c> to</c><00:05:59.120><c> create</c><00:05:59.540><c> deep</c><00:05:59.810><c> links</c><00:06:00.110><c> within</c>

00:06:00.370 --> 00:06:00.380 align:start position:0%
make it easy to create deep links within
 

00:06:00.380 --> 00:06:01.780 align:start position:0%
make it easy to create deep links within
your<00:06:00.530><c> app</c><00:06:00.650><c> including</c><00:06:01.190><c> static</c><00:06:01.580><c> code</c>

00:06:01.780 --> 00:06:01.790 align:start position:0%
your app including static code
 

00:06:01.790 --> 00:06:03.460 align:start position:0%
your app including static code
inspections<00:06:02.360><c> to</c><00:06:02.570><c> check</c><00:06:02.750><c> that</c><00:06:02.900><c> your</c><00:06:03.020><c> links</c><00:06:03.200><c> are</c>

00:06:03.460 --> 00:06:03.470 align:start position:0%
inspections to check that your links are
 

00:06:03.470 --> 00:06:05.050 align:start position:0%
inspections to check that your links are
correctly<00:06:03.800><c> configured</c><00:06:04.040><c> and</c><00:06:04.490><c> real-time</c>

00:06:05.050 --> 00:06:05.060 align:start position:0%
correctly configured and real-time
 

00:06:05.060 --> 00:06:07.330 align:start position:0%
correctly configured and real-time
testing<00:06:05.780><c> to</c><00:06:05.930><c> confirm</c><00:06:06.050><c> Google</c><00:06:06.590><c> can</c><00:06:06.740><c> index</c><00:06:06.890><c> and</c>

00:06:07.330 --> 00:06:07.340 align:start position:0%
testing to confirm Google can index and
 

00:06:07.340 --> 00:06:15.460 align:start position:0%
testing to confirm Google can index and
render<00:06:07.670><c> your</c><00:06:07.940><c> app</c><00:06:08.120><c> pages</c><00:06:08.450><c> correctly</c>

00:06:15.460 --> 00:06:15.470 align:start position:0%
 
 

00:06:15.470 --> 00:06:17.110 align:start position:0%
 
episodes<00:06:15.800><c> of</c><00:06:15.920><c> Android</c><00:06:16.250><c> tool</c><00:06:16.430><c> time</c><00:06:16.670><c> will</c><00:06:16.910><c> dive</c>

00:06:17.110 --> 00:06:17.120 align:start position:0%
episodes of Android tool time will dive
 

00:06:17.120 --> 00:06:18.970 align:start position:0%
episodes of Android tool time will dive
deeper<00:06:17.360><c> into</c><00:06:17.540><c> these</c><00:06:17.930><c> and</c><00:06:18.230><c> other</c><00:06:18.410><c> new</c><00:06:18.530><c> features</c>

00:06:18.970 --> 00:06:18.980 align:start position:0%
deeper into these and other new features
 

00:06:18.980 --> 00:06:21.040 align:start position:0%
deeper into these and other new features
from<00:06:19.220><c> Android</c><00:06:19.340><c> studio</c><00:06:19.730><c> so</c><00:06:20.450><c> subscribe</c><00:06:21.020><c> to</c>

00:06:21.040 --> 00:06:21.050 align:start position:0%
from Android studio so subscribe to
 

00:06:21.050 --> 00:06:22.570 align:start position:0%
from Android studio so subscribe to
Android<00:06:21.470><c> developers</c><00:06:21.890><c> on</c><00:06:22.010><c> youtube</c><00:06:22.130><c> and</c><00:06:22.370><c> check</c>

00:06:22.570 --> 00:06:22.580 align:start position:0%
Android developers on youtube and check
 

00:06:22.580 --> 00:06:24.730 align:start position:0%
Android developers on youtube and check
out<00:06:23.090><c> the</c><00:06:23.270><c> Android</c><00:06:23.510><c> tool</c><00:06:23.780><c> time</c><00:06:24.020><c> playlist</c><00:06:24.470><c> and</c>

00:06:24.730 --> 00:06:24.740 align:start position:0%
out the Android tool time playlist and
 

00:06:24.740 --> 00:06:26.650 align:start position:0%
out the Android tool time playlist and
remember<00:06:25.610><c> if</c><00:06:25.850><c> you've</c><00:06:26.030><c> been</c><00:06:26.240><c> taking</c><00:06:26.540><c> your</c>

00:06:26.650 --> 00:06:26.660 align:start position:0%
remember if you've been taking your
 

00:06:26.660 --> 00:06:28.090 align:start position:0%
remember if you've been taking your
breaks<00:06:26.900><c> based</c><00:06:27.230><c> on</c><00:06:27.380><c> building</c><00:06:27.560><c> and</c><00:06:27.830><c> deploying</c>

00:06:28.090 --> 00:06:28.100 align:start position:0%
breaks based on building and deploying
 

00:06:28.100 --> 00:06:30.130 align:start position:0%
breaks based on building and deploying
your<00:06:28.250><c> app</c><00:06:28.430><c> you</c><00:06:29.330><c> may</c><00:06:29.480><c> want</c><00:06:29.690><c> to</c><00:06:29.750><c> start</c><00:06:29.960><c> setting</c>

00:06:30.130 --> 00:06:30.140 align:start position:0%
your app you may want to start setting
 

00:06:30.140 --> 00:06:31.930 align:start position:0%
your app you may want to start setting
alarm<00:06:30.500><c> to</c><00:06:30.710><c> remind</c><00:06:30.770><c> you</c><00:06:31.100><c> to</c><00:06:31.220><c> eat</c><00:06:31.400><c> and</c><00:06:31.580><c> drink</c><00:06:31.610><c> at</c>

00:06:31.930 --> 00:06:31.940 align:start position:0%
alarm to remind you to eat and drink at
 

00:06:31.940 --> 00:06:32.800 align:start position:0%
alarm to remind you to eat and drink at
regular<00:06:32.270><c> intervals</c>

00:06:32.800 --> 00:06:32.810 align:start position:0%
regular intervals
 

00:06:32.810 --> 00:06:34.900 align:start position:0%
regular intervals
that's<00:06:33.080><c> Android</c><00:06:33.410><c> studio</c><00:06:33.560><c> 2.0</c><00:06:34.160><c> and</c><00:06:34.400><c> this</c><00:06:34.730><c> was</c>

00:06:34.900 --> 00:06:34.910 align:start position:0%
that's Android studio 2.0 and this was
 

00:06:34.910 --> 00:06:39.160 align:start position:0%
that's Android studio 2.0 and this was
Andrew<00:06:35.150><c> at</c><00:06:35.210><c> tool</c><00:06:35.390><c> time</c><00:06:36.160><c> time</c>

