WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:48.902
[MUSIC PLAYING]

00:00:48.902 --> 00:00:56.387
[WHOOSH]

00:00:56.387 --> 00:00:58.880
JEREMY WALKER: Welcome to
"YouTube Developers Live." We

00:00:58.880 --> 00:01:00.920
have a great show
today revolving

00:01:00.920 --> 00:01:03.270
around a new Data API.

00:01:03.270 --> 00:01:05.920
We have the PM and
the lead eng--

00:01:05.920 --> 00:01:07.930
engineer-- here to talk
a little bit about it.

00:01:07.930 --> 00:01:09.980
And we have a lot of
questions for them.

00:01:09.980 --> 00:01:12.920
But before we get started, let
me introduce everyone,

00:01:12.920 --> 00:01:14.200
including our guests.

00:01:14.200 --> 00:01:15.220
I'm Jeremy Walker.

00:01:15.220 --> 00:01:17.060
I'm part of the Developer
Relations

00:01:17.060 --> 00:01:18.470
Team here for YouTube.

00:01:18.470 --> 00:01:20.785
And we have Greg Schechner.

00:01:20.785 --> 00:01:21.870
How are you doing, Greg?

00:01:21.870 --> 00:01:22.880
GREG SCHECHTER: I'm
doing well.

00:01:22.880 --> 00:01:24.650
Don't throw any N's
in my name.

00:01:24.650 --> 00:01:24.752
It's Schechter.

00:01:24.752 --> 00:01:24.960
But that's all right.

00:01:24.960 --> 00:01:25.870
JEREMY WALKER: Schechter.

00:01:25.870 --> 00:01:28.350
OK, sorry about that.

00:01:28.350 --> 00:01:31.350
Did you stay up late for the
election or anything?

00:01:31.350 --> 00:01:33.870
GREG SCHECHTER: Well, I mean in
California it kind of ended

00:01:33.870 --> 00:01:36.040
pretty early, so I don't have to
stay up that late to watch.

00:01:36.040 --> 00:01:37.580
But, you know.

00:01:37.580 --> 00:01:38.180
JEREMY WALKER: Great.

00:01:38.180 --> 00:01:38.730
Great.

00:01:38.730 --> 00:01:41.430
Well, we have Jeff Posnick
from New York.

00:01:41.430 --> 00:01:44.020
And I suspect you probably
had to wait in line

00:01:44.020 --> 00:01:45.690
for a while to vote.

00:01:45.690 --> 00:01:48.820
JEFF POSNICK: Yeah, I tried to
time things pretty well.

00:01:48.820 --> 00:01:51.110
So I voted right after work.

00:01:51.110 --> 00:01:53.270
Actually, the line was not
too bad at that point.

00:01:53.270 --> 00:01:55.770
But did definitely stay up a
little bit past my bedtime to

00:01:55.770 --> 00:01:56.710
watch the results.

00:01:56.710 --> 00:01:58.080
JEREMY WALKER: And then
from Europe, we

00:01:58.080 --> 00:01:59.380
have our special guests.

00:01:59.380 --> 00:02:02.170
We have Raul Furnica.

00:02:02.170 --> 00:02:06.950
He's a lead engineer for
the YouTube APIs.

00:02:06.950 --> 00:02:08.270
You there, Raul?

00:02:08.270 --> 00:02:09.030
RAUL FURNICA: Hi.

00:02:09.030 --> 00:02:10.454
Yeah, I'm Raul Furnica.

00:02:10.454 --> 00:02:12.390
I'm the tech lead of the
YouTube API Team.

00:02:12.390 --> 00:02:16.620
JEREMY WALKER: And then we have
Vlad Vuskovic, who is the

00:02:16.620 --> 00:02:19.065
product manager.

00:02:19.065 --> 00:02:20.885
VLAD VUSKOVIC: Yeah, that's me.

00:02:20.885 --> 00:02:21.340
Hi.

00:02:21.340 --> 00:02:21.660
JEREMY WALKER: Great.

00:02:21.660 --> 00:02:24.140
Well, we're really excited to
have you guys on today.

00:02:24.140 --> 00:02:26.440
We have a bunch of questions.

00:02:26.440 --> 00:02:29.460
Just to talk a little bit
about the API for you.

00:02:29.460 --> 00:02:33.950
For any of you out there that
don't know, we did release a

00:02:33.950 --> 00:02:39.570
new Data API version 3 for
YouTube, and we just wanted to

00:02:39.570 --> 00:02:40.870
talk a little bit about that.

00:02:40.870 --> 00:02:44.460
So I guess our first question
revolves around, why did we

00:02:44.460 --> 00:02:46.965
rewrite the YouTube Data API?

00:02:49.745 --> 00:02:53.740
VLAD VUSKOVIC: So I'll take
this one to start.

00:02:53.740 --> 00:02:56.390
So the old API got a bit old.

00:02:56.390 --> 00:03:01.820
So after five years for v1 and
four years for v2, we kind of

00:03:01.820 --> 00:03:05.220
thought that it's time to change
it a bit and make it

00:03:05.220 --> 00:03:07.030
more modern.

00:03:07.030 --> 00:03:07.960
Introduce some new elements.

00:03:07.960 --> 00:03:13.750
So the old API was still based
on the [INAUDIBLE] responses.

00:03:13.750 --> 00:03:20.270
We thought that we needed some
efforts in compatible changes.

00:03:20.270 --> 00:03:23.740
We also then used the occasion
to launch a bunch of really

00:03:23.740 --> 00:03:28.030
new, cool features in
API like the topics

00:03:28.030 --> 00:03:30.610
API universal search.

00:03:30.610 --> 00:03:34.900
And a bunch of technical
improvements.

00:03:34.900 --> 00:03:37.225
And perhaps you can
go into them.

00:03:37.225 --> 00:03:41.530
RAUL FURNICA: So there is a
lot I had to do with the

00:03:41.530 --> 00:03:42.090
loading format.

00:03:42.090 --> 00:03:45.320
We had some XML that we didn't
like anymore in the old

00:03:45.320 --> 00:03:48.460
version, version 2
and version 1.

00:03:48.460 --> 00:03:52.810
And now we basically use
JSON by default for

00:03:52.810 --> 00:03:54.265
the response format.

00:03:54.265 --> 00:03:56.972
We also are adding new features
on the [INAUDIBLE]

00:03:56.972 --> 00:04:01.190
like partial resources, which
we're probably going to talk

00:04:01.190 --> 00:04:04.670
about it during the
meeting today.

00:04:04.670 --> 00:04:07.376
We're adding in new services
that we never had, that

00:04:07.376 --> 00:04:09.400
already Vlady discussed.

00:04:09.400 --> 00:04:12.350
So it's all about new stuff that
we couldn't do before and

00:04:12.350 --> 00:04:15.350
we feel like we [INAUDIBLE]
do now.

00:04:15.350 --> 00:04:16.969
VLAD VUSKOVIC: It's something
you learn along the way, and

00:04:16.969 --> 00:04:20.165
we thought now it's
time to use that.

00:04:20.165 --> 00:04:22.630
JEREMY WALKER: Oh, great.

00:04:22.630 --> 00:04:25.230
Would you guys mind giving a
little bit more information on

00:04:25.230 --> 00:04:26.480
the infrastructure?

00:04:29.268 --> 00:04:32.690
RAUL FURNICA: In particular, in
infrastructural API design,

00:04:32.690 --> 00:04:35.950
you can see a couple of changes
in the responses and

00:04:35.950 --> 00:04:38.830
the request format.

00:04:38.830 --> 00:04:41.680
I would like to highlight
a couple of things.

00:04:41.680 --> 00:04:44.380
One of them is the partial
responses.

00:04:44.380 --> 00:04:47.730
So from now on you basically can
say whatever you need to

00:04:47.730 --> 00:04:52.930
to request from the resources
you retrieve from the API in a

00:04:52.930 --> 00:04:55.235
parameter called part.

00:04:55.235 --> 00:04:57.024
I don't know if actually
people checked the

00:04:57.024 --> 00:05:00.320
documentation already
or not, but a video

00:05:00.320 --> 00:05:01.480
can mean many things.

00:05:01.480 --> 00:05:04.366
A video can be a lot
of information

00:05:04.366 --> 00:05:06.860
about recording location.

00:05:06.860 --> 00:05:09.430
Or it can be about [INAUDIBLE]
description.

00:05:09.430 --> 00:05:12.224
Or it can be about content
of the video.

00:05:12.224 --> 00:05:15.730
Or it can be about information
about the video being in 3D or

00:05:15.730 --> 00:05:17.270
not and so on.

00:05:17.270 --> 00:05:20.840
So a video means many things
to many people.

00:05:20.840 --> 00:05:23.650
And we added a system so now
people just say what does

00:05:23.650 --> 00:05:25.330
video mean for them?

00:05:25.330 --> 00:05:28.580
And retrieve the video parts
that are interesting.

00:05:28.580 --> 00:05:31.180
So parts are logical groups
of fields that you can

00:05:31.180 --> 00:05:31.800
[INAUDIBLE]

00:05:31.800 --> 00:05:33.505
request to retrieve.

00:05:33.505 --> 00:05:38.060
So part=snippet would retrieve
only the snippet of a video,

00:05:38.060 --> 00:05:40.780
and not the rest of the
information, which makes it

00:05:40.780 --> 00:05:45.030
good for the bandwidth and good
for the API itself in

00:05:45.030 --> 00:05:48.960
terms of design and [INAUDIBLE]
and cleanness.

00:05:48.960 --> 00:05:50.980
Another thing that
I would like to

00:05:50.980 --> 00:05:52.320
mention is the snippet.

00:05:52.320 --> 00:05:54.770
We have this approach right now
in YouTube that we didn't

00:05:54.770 --> 00:05:56.850
have in version 2,
and I wish we had

00:05:56.850 --> 00:05:59.146
there from the beginning.

00:05:59.146 --> 00:06:02.490
We think that every YouTube
resource should have a

00:06:02.490 --> 00:06:04.065
thumbnail, to put it simply.

00:06:04.065 --> 00:06:09.900
So we have five specially named
snippets, which contains

00:06:09.900 --> 00:06:12.930
the types and the description
and thumbnails.

00:06:12.930 --> 00:06:16.045
And that part is available for
any resource served by the

00:06:16.045 --> 00:06:17.612
YouTube API.

00:06:17.612 --> 00:06:20.360
So anything you would see in the
YouTube API, you should be

00:06:20.360 --> 00:06:23.805
able to easily build a graphical
interface with a

00:06:23.805 --> 00:06:26.330
image, with a thumbnail.

00:06:26.330 --> 00:06:28.910
And just some views are
what this is about.

00:06:28.910 --> 00:06:30.630
JEREMY WALKER: Yeah,
I noticed that.

00:06:30.630 --> 00:06:33.480
That really helped a lot,
especially when you're doing

00:06:33.480 --> 00:06:34.150
certain searches.

00:06:34.150 --> 00:06:37.416
It's really easy to get
it and pull it up.

00:06:37.416 --> 00:06:42.060
I noticed it has this
experimental label.

00:06:42.060 --> 00:06:43.950
Can you guys talk a little
bit about what

00:06:43.950 --> 00:06:46.424
that actually means?

00:06:46.424 --> 00:06:48.287
VLAD VUSKOVIC: "Experimental"
basically means that we are

00:06:48.287 --> 00:06:48.910
not done yet.

00:06:48.910 --> 00:06:51.340
It means that we are
still listening to

00:06:51.340 --> 00:06:52.590
feedback from the community.

00:06:55.360 --> 00:06:57.795
If that feedback tells us that
we need to change stuff, then

00:06:57.795 --> 00:07:01.220
we will consider
changing stuff.

00:07:01.220 --> 00:07:05.400
It just means that we are going
to keep adding features

00:07:05.400 --> 00:07:09.480
and developing the
API further.

00:07:09.480 --> 00:07:11.735
Once we think that we
are done, then we

00:07:11.735 --> 00:07:14.120
will remove the label.

00:07:14.120 --> 00:07:14.590
JEREMY WALKER: Great.

00:07:14.590 --> 00:07:14.830
Great.

00:07:14.830 --> 00:07:17.830
RAUL FURNICA: Before like--

00:07:17.830 --> 00:07:20.160
JEREMY WALKER: Let's say you are
on v2, which quite a few

00:07:20.160 --> 00:07:22.050
people are.

00:07:22.050 --> 00:07:25.310
When should they start thinking
about porting over?

00:07:25.310 --> 00:07:26.540
Should they port now?

00:07:26.540 --> 00:07:31.460
What would you say are the
missing features from v3, or

00:07:31.460 --> 00:07:37.730
that are in v2 that are maybe
not in v3 yet, but are coming?

00:07:37.730 --> 00:07:41.502
RAUL FURNICA: So that's what
I was going to say before.

00:07:41.502 --> 00:07:44.680
Basically, we have
a huge legacy

00:07:44.680 --> 00:07:46.466
to live up to, basically.

00:07:46.466 --> 00:07:49.760
In version 2, we have
a lot of features.

00:07:49.760 --> 00:07:52.895
And while most of it is going to
make it back into v3, into

00:07:52.895 --> 00:07:55.430
our streamlined version,
and like a very

00:07:55.430 --> 00:07:59.460
nice reworked APIs.

00:07:59.460 --> 00:08:01.230
Not all of it is going
to come back.

00:08:01.230 --> 00:08:06.205
There are certain features where
YouTube is not prepared

00:08:06.205 --> 00:08:08.150
to be [INAUDIBLE]

00:08:08.150 --> 00:08:09.285
into right now.

00:08:09.285 --> 00:08:12.330
Like inbox, for instance, and
messaging in between users is

00:08:12.330 --> 00:08:15.730
not something that we're going
to prioritize very high on the

00:08:15.730 --> 00:08:17.850
features we're going
to have in v3.

00:08:17.850 --> 00:08:18.920
VLAD VUSKOVIC: Eventually
they make it.

00:08:18.920 --> 00:08:21.400
It's just that it's, as
you say, they are low

00:08:21.400 --> 00:08:22.765
priority right now.

00:08:22.765 --> 00:08:23.980
Because someone's using them.

00:08:23.980 --> 00:08:24.840
RAUL FURNICA: Yeah.

00:08:24.840 --> 00:08:28.294
So right now, we launched v3
with the core features, so

00:08:28.294 --> 00:08:32.289
that includes videos, playlists
and channels.

00:08:32.289 --> 00:08:33.970
And we keep adding to those.

00:08:33.970 --> 00:08:38.190
All the stuff we don't have
yet, there is particular

00:08:38.190 --> 00:08:40.669
extensions we added recently--

00:08:40.669 --> 00:08:43.890
by recently, I mean the
last couple of years--

00:08:43.890 --> 00:08:47.510
to v2 about live that we don't
have yet, and we will

00:08:47.510 --> 00:08:50.140
work for adding it.

00:08:50.140 --> 00:08:53.770
We have more about content
discovery, so we have more

00:08:53.770 --> 00:08:57.990
about people's charts
and [INAUDIBLE]

00:08:57.990 --> 00:08:59.020
content.

00:08:59.020 --> 00:09:03.200
So we haven't had time
yet to add it in v3.

00:09:03.200 --> 00:09:05.690
And [INAUDIBLE]

00:09:05.690 --> 00:09:06.590
I miss anything?

00:09:06.590 --> 00:09:09.946
I think that's all
[INAUDIBLE].

00:09:09.946 --> 00:09:11.180
[INAUDIBLE]

00:09:11.180 --> 00:09:12.640
keep you out.

00:09:12.640 --> 00:09:15.170
JEFF POSNICK: One thing I wanted
to add that isn't yet

00:09:15.170 --> 00:09:18.970
in version 3 is support
for push updates

00:09:18.970 --> 00:09:21.570
or for smart polling.

00:09:21.570 --> 00:09:24.045
There are some version 2
developers who might be using

00:09:24.045 --> 00:09:29.500
PubSubHubbub or SUP for doing
kind of like smart polling or

00:09:29.500 --> 00:09:31.630
push updates.

00:09:31.630 --> 00:09:35.230
I'm saying this publicly to
encourage to the engineering

00:09:35.230 --> 00:09:38.300
team to prioritize that for
v3 because I know that's

00:09:38.300 --> 00:09:41.098
something I'm really looking
forward to seeing added.

00:09:41.098 --> 00:09:42.090
RAUL FURNICA: [INAUDIBLE].

00:09:42.090 --> 00:09:45.160
We're looking at it.

00:09:45.160 --> 00:09:46.560
JEFF POSNICK: We have
you on video.

00:09:46.560 --> 00:09:47.815
Now you're committed.

00:09:47.815 --> 00:09:48.910
RAUL FURNICA: Yeah.

00:09:48.910 --> 00:09:51.925
JEREMY WALKER: And don't forget
to keep an eye on our

00:09:51.925 --> 00:09:55.410
blog and our Google+ page as we
announce those features as

00:09:55.410 --> 00:09:57.260
they come out.

00:09:57.260 --> 00:09:59.430
You guys talked a little bit
about some of the features

00:09:59.430 --> 00:10:00.940
you're excited about.

00:10:00.940 --> 00:10:05.720
I think you mentioned topics
and partial responses.

00:10:05.720 --> 00:10:09.450
Do you guys want to give us
a little bit more, share a

00:10:09.450 --> 00:10:11.460
little bit more of
what's going on?

00:10:11.460 --> 00:10:16.006
I hear that universal searches
is pretty cool, too.

00:10:16.006 --> 00:10:16.490
VLAD VUSKOVIC: Yeah.

00:10:16.490 --> 00:10:20.336
So topics is something we are
really excited about.

00:10:20.336 --> 00:10:21.800
It's a completely new API.

00:10:21.800 --> 00:10:25.925
Basically, we are making the
link between entities and

00:10:25.925 --> 00:10:30.260
videos for the first time so
that people can do semantic

00:10:30.260 --> 00:10:33.420
searches in videos and get
videos that are related, let's

00:10:33.420 --> 00:10:35.985
say, to Sacramento the city
rather than Sacramento the

00:10:35.985 --> 00:10:38.730
basketball team.

00:10:38.730 --> 00:10:42.570
So this is something that we
really hope will help a lot of

00:10:42.570 --> 00:10:48.880
apps discover new content
in a new way.

00:10:48.880 --> 00:10:52.160
The other thing that you just
mentioned is universal search.

00:10:52.160 --> 00:10:56.180
So basically it is also a
feature that we are proud of.

00:10:56.180 --> 00:10:58.530
It is basically we are
rethinking the search from

00:10:58.530 --> 00:11:00.730
ground up here.

00:11:00.730 --> 00:11:04.890
We're allowing you to search
among all YouTube entities.

00:11:04.890 --> 00:11:10.280
So perhaps there is a channel
which is more related to a

00:11:10.280 --> 00:11:11.890
search query than some videos.

00:11:11.890 --> 00:11:16.600
So universal search means that
you will serve your results

00:11:16.600 --> 00:11:21.080
based on the search scores among
all YouTube entities.

00:11:21.080 --> 00:11:23.950
You can always restrict them
to certain-- like only to

00:11:23.950 --> 00:11:27.690
videos, or only to playlists,
or only to channels.

00:11:27.690 --> 00:11:30.640
But you can also just
search all together.

00:11:30.640 --> 00:11:34.940
That allows us to serve you
better results, and also

00:11:34.940 --> 00:11:37.070
allows you to write
applications

00:11:37.070 --> 00:11:40.960
that use this feature.

00:11:40.960 --> 00:11:44.030
So other things that Raul
already went into.

00:11:44.030 --> 00:11:48.230
We are really proud of some of
the technical improvements.

00:11:48.230 --> 00:11:49.793
You already went into it.

00:11:49.793 --> 00:11:50.860
You can say more if you want.

00:11:50.860 --> 00:11:53.330
RAUL FURNICA: Yeah, I want
to sneak in something.

00:11:53.330 --> 00:11:56.670
I know there has been a talk
feature request from external

00:11:56.670 --> 00:11:58.050
[? organizer, ?]

00:11:58.050 --> 00:11:58.970
or a [INAUDIBLE]

00:11:58.970 --> 00:12:00.440
list.

00:12:00.440 --> 00:12:04.550
We are going to have a way to
retrieve your subscribers.

00:12:04.550 --> 00:12:08.310
It's just like a simple
thing, but it's there.

00:12:08.310 --> 00:12:10.840
Then we're going to have a
uniform way to work with a

00:12:10.840 --> 00:12:14.010
list of videos which is going
to be the playlist.

00:12:14.010 --> 00:12:16.860
So you can retrieve user
uploads through a

00:12:16.860 --> 00:12:18.550
playlist right now.

00:12:18.550 --> 00:12:21.580
Anybody builds an application
that is a playlist player,

00:12:21.580 --> 00:12:23.210
it's going to be able
to handle any

00:12:23.210 --> 00:12:26.600
list of videos, basically.

00:12:26.600 --> 00:12:30.070
One more thing that we haven't
yet released, but we're

00:12:30.070 --> 00:12:33.950
looking into adding it really
soon, is something that I need

00:12:33.950 --> 00:12:36.660
to add because super geeky,
and it's like

00:12:36.660 --> 00:12:37.670
an engineering thing.

00:12:37.670 --> 00:12:41.320
We want to support protocol
buffers externally.

00:12:41.320 --> 00:12:45.230
That's something I'm looking
forward to see through and see

00:12:45.230 --> 00:12:46.775
some of our users use.

00:12:46.775 --> 00:12:49.630
And just [INAUDIBLE].

00:12:49.630 --> 00:12:52.700
It's going to be basically
binary serialized response

00:12:52.700 --> 00:12:56.590
format, which is much more
effective and efficient than

00:12:56.590 --> 00:13:01.730
any text format, even
binary JSON.

00:13:01.730 --> 00:13:03.890
JEREMY WALKER: That's
very cool,

00:13:03.890 --> 00:13:06.230
GREG SCHECHTER: I was actually
wondering, if I have an app

00:13:06.230 --> 00:13:09.750
that's using the v2 API, do I
have to worry about things

00:13:09.750 --> 00:13:13.320
getting deprecated in the future
if I don't have time to

00:13:13.320 --> 00:13:14.761
commit to the v3 yet?

00:13:17.350 --> 00:13:19.190
VLAD VUSKOVIC: So
it is like this.

00:13:19.190 --> 00:13:23.040
Certainly we're not going to
announce the deprecation of v2

00:13:23.040 --> 00:13:27.380
before removing the experimental
label.

00:13:27.380 --> 00:13:30.000
Even after that, we're going to
give a long notice so that

00:13:30.000 --> 00:13:33.230
people have a lot of time.

00:13:33.230 --> 00:13:35.980
If you have a video app, you
shouldn't be worrying about

00:13:35.980 --> 00:13:38.622
what you need until 2015.

00:13:38.622 --> 00:13:43.098
Only after that, we might
see deprecating.

00:13:43.098 --> 00:13:44.430
JEREMY WALKER: Great.

00:13:44.430 --> 00:13:45.790
I have another question.

00:13:45.790 --> 00:13:52.130
In version 2, part of the API
was the insight API, which let

00:13:52.130 --> 00:13:54.450
you pull analytics
information.

00:13:54.450 --> 00:13:57.520
And now with the new version
of the Data API, which is

00:13:57.520 --> 00:14:02.330
version 3, we now have also
a separate Analytics API.

00:14:02.330 --> 00:14:04.390
Can you talk a little bit about
the relationship now

00:14:04.390 --> 00:14:05.640
that those have split?

00:14:07.960 --> 00:14:10.611
RAUL FURNICA: You can stay
with two different APIs.

00:14:10.611 --> 00:14:13.220
You actually see them, the
developer console is two

00:14:13.220 --> 00:14:13.660
different APIs.

00:14:13.660 --> 00:14:16.891
You can register for each
of them for your app.

00:14:19.440 --> 00:14:21.750
They're actually built on the
same [INAUDIBLE] stack right

00:14:21.750 --> 00:14:24.570
now, so they integrate
very nicely.

00:14:24.570 --> 00:14:27.760
So you can use the same
client library to

00:14:27.760 --> 00:14:28.970
query either of them.

00:14:28.970 --> 00:14:33.205
So you can have a cross query
between the two APIs with the

00:14:33.205 --> 00:14:36.380
same client library without
much [INAUDIBLE].

00:14:36.380 --> 00:14:38.660
The authentication would
be the same.

00:14:38.660 --> 00:14:43.497
You would use the same user for
the Analytics API as you

00:14:43.497 --> 00:14:45.422
use for the Data API.

00:14:45.422 --> 00:14:47.895
So there isn't a lot of
integration just because

00:14:47.895 --> 00:14:49.250
they're [INAUDIBLE]

00:14:49.250 --> 00:14:51.330
on the same API interface.

00:14:51.330 --> 00:14:52.190
JEREMY WALKER: Great.

00:14:52.190 --> 00:14:58.240
Yeah, I had written a sample
in both, and once you learn

00:14:58.240 --> 00:15:01.770
one, the authentication
is the same.

00:15:01.770 --> 00:15:04.835
And also the new Analytics API,
you can get information

00:15:04.835 --> 00:15:08.380
back in JSON or CSV
format directly.

00:15:08.380 --> 00:15:12.050
We're going to talk more about
that next week at our GGL, so

00:15:12.050 --> 00:15:15.520
make sure you tune in
for that as well.

00:15:15.520 --> 00:15:17.940
JEFF POSNICK: Cool.

00:15:17.940 --> 00:15:22.530
One topic that I wanted to bring
up, and to jump in here.

00:15:22.530 --> 00:15:25.870
Anybody who's watched some of
the older episodes will know

00:15:25.870 --> 00:15:30.290
that I'm really into YouTube
API quota issues.

00:15:30.290 --> 00:15:32.535
I think I spent about 30 minutes
on one of our previous

00:15:32.535 --> 00:15:36.940
week's shows talking about
how quota applies to

00:15:36.940 --> 00:15:39.410
version 2 of the API.

00:15:39.410 --> 00:15:42.490
But version 3 of the API
is a complete rewrite.

00:15:42.490 --> 00:15:47.090
There's a different back end,
and I wanted to just see what

00:15:47.090 --> 00:15:52.770
kind of quota considerations
people should take into

00:15:52.770 --> 00:15:55.966
account when they're developing
against v3.

00:15:55.966 --> 00:15:58.180
RAUL FURNICA: Yeah.

00:15:58.180 --> 00:16:02.080
Quota has been reworked,
as well.

00:16:02.080 --> 00:16:06.200
Very, very well, or partly built
into the part partial

00:16:06.200 --> 00:16:09.220
requests and partial
resources.

00:16:09.220 --> 00:16:12.480
So the more you request about a
resource, the more parts you

00:16:12.480 --> 00:16:14.790
include in your request, the
more quota you're going to pay

00:16:14.790 --> 00:16:16.850
for that request.

00:16:16.850 --> 00:16:19.730
That's something that we want
to basically incentivize

00:16:19.730 --> 00:16:24.965
[? some ?] developers to be
careful about the size of the

00:16:24.965 --> 00:16:29.490
response and only request
data they need.

00:16:29.490 --> 00:16:32.530
So [INAUDIBLE]

00:16:32.530 --> 00:16:37.000
and actually listing out all the
parts every resource has.

00:16:37.000 --> 00:16:41.580
So you can check out that a
video has resources like I did

00:16:41.580 --> 00:16:45.520
sneak [INAUDIBLE]
details in song.

00:16:45.520 --> 00:16:47.790
The general idea is that the
more you include, the more

00:16:47.790 --> 00:16:50.020
quota costs you incur.

00:16:50.020 --> 00:16:54.390
You can say that normally you
can retrieve a video with five

00:16:54.390 --> 00:16:58.840
resources, you would pay a
quota cost of 10 out of

00:16:58.840 --> 00:16:59.330
[? uniques ?]

00:16:59.330 --> 00:17:01.180
you see in the API console.

00:17:01.180 --> 00:17:05.079
JEFF POSNICK: Yeah, I think
we're a lot more transparent

00:17:05.079 --> 00:17:08.790
in general in version 3 about
quota, which is something a

00:17:08.790 --> 00:17:10.819
lot of people have asked
about in the previous

00:17:10.819 --> 00:17:12.374
versions of the API.

00:17:12.374 --> 00:17:16.900
So we do actually include some
real numbers, and help people

00:17:16.900 --> 00:17:20.550
make some calculations about how
expensive their calls are

00:17:20.550 --> 00:17:23.480
and how many quota units they
have per day at fault, and

00:17:23.480 --> 00:17:25.139
things like that.

00:17:25.139 --> 00:17:26.160
RAUL FURNICA: Right.

00:17:26.160 --> 00:17:30.800
We're also making sure in the
documentation we're putting

00:17:30.800 --> 00:17:34.040
information about how expensive
each part is, and

00:17:34.040 --> 00:17:36.130
which are the parts that you
can really query a lot,

00:17:36.130 --> 00:17:38.430
because they release
[INAUDIBLE].

00:17:38.430 --> 00:17:41.082
Retrieve and we charge
a lot [INAUDIBLE]

00:17:41.082 --> 00:17:44.034
more expensive to retrieve.

00:17:44.034 --> 00:17:45.390
JEFF POSNICK: Cool.

00:17:45.390 --> 00:17:47.840
OK.

00:17:47.840 --> 00:17:50.470
Greg and Jeremy, if you don't
mind right now, I was going to

00:17:50.470 --> 00:17:54.630
kind of take over the
presentation a bit, and switch

00:17:54.630 --> 00:17:58.205
into doing a live demo of
showing off some concepts that

00:17:58.205 --> 00:18:02.330
are important to version
3 of the API.

00:18:02.330 --> 00:18:05.630
This is something that's going
to be driven entirely from

00:18:05.630 --> 00:18:07.750
within the documentation,
which is something I

00:18:07.750 --> 00:18:12.630
particularly like about
version 3 of the API.

00:18:12.630 --> 00:18:15.400
Let me just make sure I'm
choosing the right window.

00:18:15.400 --> 00:18:15.640
OK.

00:18:15.640 --> 00:18:19.470
So hopefully folks can see
my screen at this point.

00:18:19.470 --> 00:18:23.520
What I have open right
here is the live

00:18:23.520 --> 00:18:25.370
documentation for version 3.

00:18:25.370 --> 00:18:28.980
It's at
developers.google.com/youtube.

00:18:28.980 --> 00:18:32.720
And you can get from there
to version 3 docs.

00:18:32.720 --> 00:18:36.820
In addition to documenting all
the different parameters that

00:18:36.820 --> 00:18:40.180
specific requests take, if you'd
look down here at the

00:18:40.180 --> 00:18:43.605
bottom of the page-- let me just
reload that to make sure

00:18:43.605 --> 00:18:44.710
it's fresh--

00:18:44.710 --> 00:18:46.790
you see this Try It section.

00:18:46.790 --> 00:18:52.070
This is actually a live web
based request that you can

00:18:52.070 --> 00:18:56.290
make that will go directly
against the Production API.

00:18:56.290 --> 00:18:58.500
You'll see what your request
looks like, and you'll see

00:18:58.500 --> 00:19:01.370
what the response looks
like as JSON.

00:19:01.370 --> 00:19:04.670
Even if you plan on using
the client library--

00:19:04.670 --> 00:19:07.650
maybe you're a Python
programmer or a Java

00:19:07.650 --> 00:19:09.380
programmer--

00:19:09.380 --> 00:19:12.590
even though your actual code
won't necessarily look like

00:19:12.590 --> 00:19:16.070
this, this is a great way to try
out requests, try to see

00:19:16.070 --> 00:19:18.090
what the different parts
include, try different

00:19:18.090 --> 00:19:21.690
parameters, and get familiar
with the API before you

00:19:21.690 --> 00:19:24.400
actively have to sit down
and type out code.

00:19:24.400 --> 00:19:29.270
I think there's a common, not
very productive developer

00:19:29.270 --> 00:19:32.360
pattern where you kind of type
in some code, you run the

00:19:32.360 --> 00:19:35.205
request, you maybe sniff the
output, or you take a look at

00:19:35.205 --> 00:19:37.260
the logging details of the
output, and then you re-run

00:19:37.260 --> 00:19:38.250
the request.

00:19:38.250 --> 00:19:39.000
And that takes time.

00:19:39.000 --> 00:19:39.315
So this is really cool.

00:19:39.315 --> 00:19:40.260
JEREMY WALKER: Hey, Jeff.

00:19:40.260 --> 00:19:42.050
Jeff, can you bump up your
font a little bit?

00:19:42.050 --> 00:19:43.360
It's hard to see on the video.

00:19:43.360 --> 00:19:45.665
So if you could bump that
up, that'd be great.

00:19:45.665 --> 00:19:47.650
JEFF POSNICK: OK.

00:19:47.650 --> 00:19:49.440
I'm bumping up the size
of my screen--

00:19:49.440 --> 00:19:50.906
JEREMY WALKER: Thank you, sir.

00:19:50.906 --> 00:19:51.780
JEFF POSNICK: --a little bit.

00:19:51.780 --> 00:19:53.070
Hopefully, folks can see
that pretty well.

00:19:56.170 --> 00:19:58.550
I'm going to show--

00:19:58.550 --> 00:20:04.660
first of all, you could use
OAuth 2 from directly within

00:20:04.660 --> 00:20:06.980
this tool, which is great.

00:20:06.980 --> 00:20:09.135
So you don't have to enter your
user name or password

00:20:09.135 --> 00:20:10.300
name anywhere.

00:20:10.300 --> 00:20:13.250
You have the standard
benefits of OAuth 2.

00:20:13.250 --> 00:20:15.990
What I'm going to do is make
a Channels List call.

00:20:15.990 --> 00:20:21.110
I'm going to specify the
part, contentDetails.

00:20:21.110 --> 00:20:23.900
Over here, I'm going to specify
the parameter mine as

00:20:23.900 --> 00:20:25.495
"true."

00:20:25.495 --> 00:20:28.540
What this is going to do is it's
going to return My Own

00:20:28.540 --> 00:20:32.250
Channel, the channel of the
authenticated user.

00:20:32.250 --> 00:20:35.660
It's very similar to what the
defaults user was in version 2

00:20:35.660 --> 00:20:36.730
of the API.

00:20:36.730 --> 00:20:39.840
It's going to give me some
details about that channel.

00:20:39.840 --> 00:20:42.660
I click Execute down here.

00:20:42.660 --> 00:20:46.290
See that happen, and you
see the response.

00:20:46.290 --> 00:20:50.210
So you see both what the actual
URL is over here, and

00:20:50.210 --> 00:20:54.500
you see the response JSON in a
nice, pretty printed format.

00:20:54.500 --> 00:20:56.810
I'm going to walk you through
something that's really common

00:20:56.810 --> 00:20:58.940
to do in version 3.

00:20:58.940 --> 00:21:02.690
You kind of take playlist ideas
that you might get from

00:21:02.690 --> 00:21:05.670
either the Channels List over
here, or you might get a

00:21:05.670 --> 00:21:09.430
playlist ID from doing a
universal search, or some

00:21:09.430 --> 00:21:11.150
other method.

00:21:11.150 --> 00:21:13.760
Then you take that playlist ID,
and you plug it into the

00:21:13.760 --> 00:21:17.540
playlistitems.list method in
order to get the contents of

00:21:17.540 --> 00:21:19.520
playlist ID.

00:21:19.520 --> 00:21:24.230
This is actually really great
because everything is a

00:21:24.230 --> 00:21:26.620
playlist, as Raul mentioned.

00:21:26.620 --> 00:21:29.940
And the user uploads feed
is also just a playlist.

00:21:29.940 --> 00:21:33.510
So I'm going to get my specific
playlist ID from my

00:21:33.510 --> 00:21:35.360
uploads feed directly
from this response.

00:21:35.360 --> 00:21:38.340
I'm going to copy
it over here.

00:21:38.340 --> 00:21:45.360
And then I'm going to go back
up to PlaylistItems, list.

00:21:45.360 --> 00:21:48.220
And I get to use the live
demo again over here.

00:21:50.840 --> 00:21:53.000
Scroll down to the bottom.

00:21:53.000 --> 00:21:55.340
In this case, I'm going
to ask for the

00:21:55.340 --> 00:21:58.330
snippet for each video.

00:21:58.330 --> 00:22:00.070
I'm going to put in--

00:22:00.070 --> 00:22:03.410
I'm actually just going to put
in two results per page over

00:22:03.410 --> 00:22:06.840
here, and I'm going to put in
as a playlist ID that user

00:22:06.840 --> 00:22:09.000
identifier that I got from
my previous call.

00:22:11.580 --> 00:22:13.040
So I'm clicking Execute
over here.

00:22:16.090 --> 00:22:17.500
I can see the response.

00:22:17.500 --> 00:22:21.440
I see some kind of metadata
about the response feed.

00:22:21.440 --> 00:22:22.390
There's four results.

00:22:22.390 --> 00:22:24.920
They're showing me two results
in this response.

00:22:24.920 --> 00:22:27.660
And you see the actual, relevant
details about the

00:22:27.660 --> 00:22:31.780
items that are in my
uploads playlist.

00:22:31.780 --> 00:22:33.580
So in this case, you'll
see some thumbnails.

00:22:33.580 --> 00:22:34.960
You'll see the title.

00:22:34.960 --> 00:22:37.790
You'll see the date that
it was published, and a

00:22:37.790 --> 00:22:40.500
description for those things.

00:22:40.500 --> 00:22:42.990
So again, regardless of whether
you're dealing with a

00:22:42.990 --> 00:22:47.250
user uploads list of videos
or our traditional YouTube

00:22:47.250 --> 00:22:50.760
playlist of videos, or the feed
of all the videos that

00:22:50.760 --> 00:22:54.170
somebody has liked, all these
things are treated exactly the

00:22:54.170 --> 00:22:55.560
same in version 3.

00:22:55.560 --> 00:22:57.440
So that really simplifies
the type of code

00:22:57.440 --> 00:22:58.180
that you have to write.

00:22:58.180 --> 00:23:00.620
You don't have to write special
case code, depending

00:23:00.620 --> 00:23:04.370
upon which type of list
you're going against.

00:23:04.370 --> 00:23:04.960
So that's cool.

00:23:04.960 --> 00:23:07.890
I wanted to now also just
show you how paging

00:23:07.890 --> 00:23:10.180
works in version 3.

00:23:10.180 --> 00:23:14.630
So similar to version 1 and 2
of the API, we can't return

00:23:14.630 --> 00:23:18.400
every single video that might
match a certain query within

00:23:18.400 --> 00:23:19.960
the same response.

00:23:19.960 --> 00:23:23.510
You might have an extremely
large list of uploads, for

00:23:23.510 --> 00:23:26.830
instance, or a playlist might
have up to 200 items.

00:23:26.830 --> 00:23:30.270
It's just really not very
efficient to return all of

00:23:30.270 --> 00:23:32.720
that in the exact
same response.

00:23:32.720 --> 00:23:36.400
So the way that was done in
version 2 of the API and

00:23:36.400 --> 00:23:40.110
version 1 of the API was by
using start index parameter.

00:23:40.110 --> 00:23:45.380
You could specify kind of the
position within the list that

00:23:45.380 --> 00:23:46.840
you wanted to start up
when you retrieved

00:23:46.840 --> 00:23:48.530
the specific request.

00:23:48.530 --> 00:23:51.360
That's done away with in version
3 of the API, and

00:23:51.360 --> 00:23:56.680
instead we make use of unique
tokens, basically, that allow

00:23:56.680 --> 00:24:00.940
you to move backwards and
forwards one page of requests.

00:24:00.940 --> 00:24:03.710
So you can't just jump to an
arbitrary position within a

00:24:03.710 --> 00:24:07.360
list of videos anymore, but you
can either go to the next

00:24:07.360 --> 00:24:09.940
page or the previous page.

00:24:09.940 --> 00:24:11.770
In order to make use of that,
I'm going to take this next

00:24:11.770 --> 00:24:13.900
page token value.

00:24:13.900 --> 00:24:16.420
I'm going to scroll all
the way up here.

00:24:16.420 --> 00:24:21.420
And I'm going to put it in the
pageToken variable over here.

00:24:21.420 --> 00:24:22.870
Click Execute.

00:24:22.870 --> 00:24:25.530
You can see that the request
URL changed a

00:24:25.530 --> 00:24:27.850
bit to include pageToken.

00:24:27.850 --> 00:24:30.450
And if you look at the response,
it will be the next

00:24:30.450 --> 00:24:33.500
two videos in the feed.

00:24:33.500 --> 00:24:38.770
So that's a really important
concept to be aware of.

00:24:38.770 --> 00:24:40.770
Paging is one of the things
that differs.

00:24:43.820 --> 00:24:45.380
JEREMY WALKER: I was going to
say, one thing that I found

00:24:45.380 --> 00:24:52.510
really, really useful, too, is
the fields, the field section.

00:24:52.510 --> 00:24:54.910
What I often found is I'd run
a query with this, and then

00:24:54.910 --> 00:24:57.140
I'd figure out, OK, now
I can pare it down to

00:24:57.140 --> 00:24:59.330
just the data I need.

00:24:59.330 --> 00:25:02.360
Then you can figure that out
using that little link there.

00:25:02.360 --> 00:25:04.360
You can check off exactly
what you need.

00:25:04.360 --> 00:25:07.770
Then you can copy and paste that
with the library so that

00:25:07.770 --> 00:25:09.030
you get an exact response.

00:25:09.030 --> 00:25:11.540
JEFF POSNICK: Little daunting
trying to come with the

00:25:11.540 --> 00:25:15.210
correct syntax, but this does
a great job of automatically

00:25:15.210 --> 00:25:16.130
generating for you.

00:25:16.130 --> 00:25:18.055
If you do it from within the
docs, you use the fields

00:25:18.055 --> 00:25:20.670
editor over there.

00:25:20.670 --> 00:25:22.140
You can just get the
snippets back.

00:25:22.140 --> 00:25:27.310
In this case, you will get rid
of a few of the extra things.

00:25:27.310 --> 00:25:32.250
I also wanted to cover something
a little different.

00:25:32.250 --> 00:25:34.760
This was something that Raul
was talking about before,

00:25:34.760 --> 00:25:37.980
something he really liked,
which was the support for

00:25:37.980 --> 00:25:40.850
different parts when
making requests.

00:25:40.850 --> 00:25:42.770
I'm going to do that
by demonstrating

00:25:42.770 --> 00:25:46.400
a Videos list request.

00:25:46.400 --> 00:25:52.660
The Videos list is how you get
this metadata for one or more

00:25:52.660 --> 00:25:56.040
different videos.

00:25:56.040 --> 00:26:01.070
You could enter a whole
comma-separated list of video

00:26:01.070 --> 00:26:02.110
IDs if you want.

00:26:02.110 --> 00:26:04.200
In this case, I'm just going to
use that one video ID from

00:26:04.200 --> 00:26:07.570
my previous example.

00:26:07.570 --> 00:26:10.210
But I'm going to take a look
over here and see the part

00:26:10.210 --> 00:26:11.820
parameter for Videos list
supports all these different

00:26:11.820 --> 00:26:14.040
[INAUDIBLE].

00:26:14.040 --> 00:26:19.670
So maybe what I'm most
interested in is the player

00:26:19.670 --> 00:26:22.130
information about a
specific video.

00:26:22.130 --> 00:26:24.610
I don't care about the
statistics in my API call.

00:26:24.610 --> 00:26:28.010
I don't really care about what
the topics that are associated

00:26:28.010 --> 00:26:28.700
with the video is.

00:26:28.700 --> 00:26:31.980
All I really care about is
the player information.

00:26:31.980 --> 00:26:34.800
That's something that I can
explicitly request, and I

00:26:34.800 --> 00:26:37.200
won't get any extra data
that I don't care

00:26:37.200 --> 00:26:38.580
about in the response.

00:26:38.580 --> 00:26:40.730
That means it'll be cheaper
from a quota perspective.

00:26:40.730 --> 00:26:44.390
And it also means that there's
fewer bytes being transferred

00:26:44.390 --> 00:26:47.683
over the network, so the request
should come back a

00:26:47.683 --> 00:26:49.240
little bit faster.

00:26:49.240 --> 00:26:50.110
I do that over here.

00:26:50.110 --> 00:26:52.510
I put in part=player.

00:26:52.510 --> 00:26:54.080
You see I get--

00:26:54.080 --> 00:26:55.875
every request is going
to contain the ID.

00:26:55.875 --> 00:26:58.320
You don't explicitly have
to ask for that

00:26:58.320 --> 00:27:00.030
to get the ID back.

00:27:00.030 --> 00:27:01.240
I do see an ID.

00:27:01.240 --> 00:27:02.990
I see what the kind
of video it is.

00:27:02.990 --> 00:27:05.590
But the only extra thing
I see here is player.

00:27:05.590 --> 00:27:07.950
And I get embed HTML.

00:27:07.950 --> 00:27:11.100
If I wanted to embed the
standard YouTube player on a

00:27:11.100 --> 00:27:14.440
web page, I could use this
iframe snippet to do it.

00:27:14.440 --> 00:27:17.040
Just to show you how that
differs, if I switch this now

00:27:17.040 --> 00:27:25.250
to contentDetails and click
Execute, I get, in this

00:27:25.250 --> 00:27:27.470
particular case, the content
details for a video will give

00:27:27.470 --> 00:27:30.140
you the duration.

00:27:30.140 --> 00:27:32.230
This is a five second
long video.

00:27:32.230 --> 00:27:33.100
It's not either/or.

00:27:33.100 --> 00:27:38.250
If I know that I need both
parts, I could just put them

00:27:38.250 --> 00:27:41.550
in a comma-separated list, and
I will get both of them back.

00:27:41.550 --> 00:27:45.300
So you really have fine grain
control over the amount of

00:27:45.300 --> 00:27:46.810
data that you get back.

00:27:46.810 --> 00:27:50.450
I also know that Raul and the
engineering team is kind of

00:27:50.450 --> 00:27:55.360
happy that this makes it easy to
add new data to the API in

00:27:55.360 --> 00:27:57.300
a very backwards
compatible way.

00:27:57.300 --> 00:28:01.020
If we start exposing a whole new
type of metadata about a

00:28:01.020 --> 00:28:03.390
given video, we could
just create a new

00:28:03.390 --> 00:28:05.840
part for doing that.

00:28:05.840 --> 00:28:07.650
Nothing in the existing parts
will have to change.

00:28:07.650 --> 00:28:09.410
You could start requesting
that new part if you were

00:28:09.410 --> 00:28:10.660
really interested.

00:28:12.950 --> 00:28:17.680
Finally, I wanted
to demonstrate

00:28:17.680 --> 00:28:20.806
probably topic search.

00:28:20.806 --> 00:28:25.930
Although, we did this before in
one of our previous Google

00:28:25.930 --> 00:28:27.370
Development Live events.

00:28:27.370 --> 00:28:28.620
I wasn't able to join,
unfortunately.

00:28:33.636 --> 00:28:34.130
You know what?

00:28:34.130 --> 00:28:36.187
I'm going to consider doing
the topic search.

00:28:36.187 --> 00:28:38.910
I'm just going to show universal
search, I think.

00:28:38.910 --> 00:28:42.590
But definitely check out the
previous week's episode that

00:28:42.590 --> 00:28:46.050
we dedicated to the Topics API
because that's a really very

00:28:46.050 --> 00:28:48.770
interesting, well, topic.

00:28:48.770 --> 00:28:50.510
Pardon the pun.

00:28:50.510 --> 00:28:53.690
And I recommend folks look into
that a little bit more.

00:28:53.690 --> 00:28:55.360
I'm just going to show off
quickly how you can do a

00:28:55.360 --> 00:28:57.310
universal search.

00:28:57.310 --> 00:28:58.486
We're going to do it by
scrolling down to

00:28:58.486 --> 00:29:00.940
the bottom over here.

00:29:00.940 --> 00:29:03.524
We'll get to the sample
code in a bit.

00:29:03.524 --> 00:29:05.866
If you try it, we're going
to say we want snippet.

00:29:09.290 --> 00:29:13.910
We want the query term of,
let's say, New York.

00:29:16.670 --> 00:29:19.980
That could be put in
topic over here.

00:29:19.980 --> 00:29:24.180
Type is where we get to specify
either video, channel,

00:29:24.180 --> 00:29:24.920
or playlist.

00:29:24.920 --> 00:29:28.370
In this case, I want to return
pretty much anything.

00:29:28.370 --> 00:29:31.620
We'll let the API back
end determine

00:29:31.620 --> 00:29:34.270
how to rank the results.

00:29:34.270 --> 00:29:35.130
It might be a channel.

00:29:35.130 --> 00:29:35.590
It might be a playlist.

00:29:35.590 --> 00:29:37.250
It might be a video.

00:29:37.250 --> 00:29:39.350
I don't know what it's going
to be in advance.

00:29:39.350 --> 00:29:43.570
The API will put the most
relevant things first.

00:29:43.570 --> 00:29:44.350
[INAUDIBLE]

00:29:44.350 --> 00:29:46.980
the first thing that it ends
up returning is actually a

00:29:46.980 --> 00:29:53.190
YouTube channel for the "New
York Times." The second thing

00:29:53.190 --> 00:29:57.795
that it will end up returning is
a YouTube video for Jay-Z's

00:29:57.795 --> 00:29:59.870
"New York State of Mind."
These are all

00:29:59.870 --> 00:30:01.380
mixed in to the results.

00:30:01.380 --> 00:30:04.010
If you've ever done a search
on youtube.com, you'll know

00:30:04.010 --> 00:30:06.150
that you get something
very similar.

00:30:06.150 --> 00:30:08.600
If you search for "New York" on
YouTube, you'll get back a

00:30:08.600 --> 00:30:11.180
mix of playlists and channels
and videos.

00:30:11.180 --> 00:30:13.950
So now you could have that same
experience from within

00:30:13.950 --> 00:30:15.250
your own application.

00:30:15.250 --> 00:30:16.500
So that's pretty cool.

00:30:18.710 --> 00:30:20.710
I think those are the main
things I wanted to

00:30:20.710 --> 00:30:22.400
show for right now.

00:30:22.400 --> 00:30:25.240
But the important thing is that
anybody could go on to

00:30:25.240 --> 00:30:27.910
our documentation, read the
docs, get familiar with the

00:30:27.910 --> 00:30:31.300
API, and then just scroll down a
little bit to the bottom and

00:30:31.300 --> 00:30:34.460
instantly make their own calls
and get familiar with the

00:30:34.460 --> 00:30:35.600
actual responses.

00:30:35.600 --> 00:30:37.210
So that's a real big
improvement for

00:30:37.210 --> 00:30:40.090
developers, I think.

00:30:40.090 --> 00:30:42.750
GREG SCHECHTER: Thank you
for that demo job.

00:30:42.750 --> 00:30:43.940
That was great.

00:30:43.940 --> 00:30:46.300
I was actually wondering if I'm
like a developer, and I'm

00:30:46.300 --> 00:30:49.480
trying to use this stuff, are
there places for me to get

00:30:49.480 --> 00:30:52.190
help or maybe provide feedback,
because it still is

00:30:52.190 --> 00:30:54.075
experimental?

00:30:54.075 --> 00:30:56.040
JEFF POSNICK: Yeah,
absolutely.

00:30:56.040 --> 00:30:59.650
Our standard place to go for
questions related to any of

00:30:59.650 --> 00:31:02.900
the YouTube APIs, and that
certainly includes version 3

00:31:02.900 --> 00:31:06.090
of the API, is Stack
Overflow now.

00:31:06.090 --> 00:31:09.630
We ask that anybody who posts
questions on Stack Overflow

00:31:09.630 --> 00:31:13.860
use the tag youtube-api,
and that'll help

00:31:13.860 --> 00:31:15.840
us find their questions.

00:31:15.840 --> 00:31:20.250
We are also looking for
feedback, and bug reports, and

00:31:20.250 --> 00:31:22.940
feature requests, and things
that are not necessarily

00:31:22.940 --> 00:31:24.800
appropriate for Stack
Overflow.

00:31:24.800 --> 00:31:27.070
If you just have a general
feature request or if you

00:31:27.070 --> 00:31:30.900
found a bug, we are using the
same issue tracker that we've

00:31:30.900 --> 00:31:32.180
been using for a while now.

00:31:32.180 --> 00:31:35.850
There's links to that directly
from our documentation for

00:31:35.850 --> 00:31:40.950
both finding a feature request
or reporting a bug.

00:31:40.950 --> 00:31:44.860
It would help us a little bit
if you use, I guess, the

00:31:44.860 --> 00:31:49.350
characters "v3" somewhere in
both your Stack Overflow or

00:31:49.350 --> 00:31:52.770
your issue tracker requests,
just so we can help those

00:31:52.770 --> 00:31:54.520
things bobble up to the
top a little bit.

00:31:54.520 --> 00:31:56.375
But we'll take a look
at everything.

00:31:56.375 --> 00:32:00.166
We'll evaluate them
as best we can.

00:32:00.166 --> 00:32:00.550
GREG SCHECHTER: Cool.

00:32:00.550 --> 00:32:03.010
I think we wrote a blog post on
it, too, if somebody wanted

00:32:03.010 --> 00:32:05.250
more details on where the
links are and stuff.

00:32:05.250 --> 00:32:06.708
JEFF POSNICK: Yeah,
absolutely.

00:32:06.708 --> 00:32:09.138
That's on apiblog.youtube.com.

00:32:09.138 --> 00:32:10.726
You can find that.

00:32:10.726 --> 00:32:11.950
GREG SCHECHTER: Awesome.

00:32:11.950 --> 00:32:14.390
Are there examples available?

00:32:14.390 --> 00:32:15.955
I mean other than
the Explorer?

00:32:18.570 --> 00:32:20.470
JEFF POSNICK: Yeah,
definitely.

00:32:20.470 --> 00:32:25.390
We are doing our best to keep
up with the wide array of

00:32:25.390 --> 00:32:27.190
languages that all
the developers

00:32:27.190 --> 00:32:28.560
out there are using.

00:32:28.560 --> 00:32:31.330
We're kind of focusing on a few
specific languages that

00:32:31.330 --> 00:32:33.610
we're writing samples
for to begin with.

00:32:33.610 --> 00:32:37.510
So we have a decent number of
Python's samples right now.

00:32:37.510 --> 00:32:40.170
We have a good number of
JavaScript samples.

00:32:40.170 --> 00:32:40.646
Thank you, Greg.

00:32:40.646 --> 00:32:45.140
I know that you've been the
one primarily to do those.

00:32:45.140 --> 00:32:49.070
We're working on some Ruby
samples, some Java samples.

00:32:49.070 --> 00:32:51.950
I think Germany's going to
be adding pretty soon.

00:32:51.950 --> 00:32:54.430
One of the nice things about the
sample code is that it's

00:32:54.430 --> 00:32:59.280
also going to be inline
in the documentation.

00:32:59.280 --> 00:33:03.130
So as you're viewing the
description of a specific

00:33:03.130 --> 00:33:04.960
method, and you're viewing the
parameters, and things like

00:33:04.960 --> 00:33:10.430
that, certain pages do have
a section of the docs.

00:33:10.430 --> 00:33:13.110
Briefly, I scrolled past
it when I was doing

00:33:13.110 --> 00:33:14.780
a search list method.

00:33:14.780 --> 00:33:17.000
I think that might have actually
been a PHP example

00:33:17.000 --> 00:33:20.070
that we had in there for
doing a video search.

00:33:20.070 --> 00:33:23.055
So you can kind of see
everything within context.

00:33:23.055 --> 00:33:25.540
You know, this is the
primary definition.

00:33:25.540 --> 00:33:27.130
This is some sample
code for a variety

00:33:27.130 --> 00:33:28.030
of different languages.

00:33:28.030 --> 00:33:31.460
And down here is the live
Explorer where you can play

00:33:31.460 --> 00:33:34.640
around with the API
yourselves.

00:33:34.640 --> 00:33:38.830
In addition to those samples,
we're also working on a few

00:33:38.830 --> 00:33:42.260
kind of like standalone
applications to show people

00:33:42.260 --> 00:33:44.580
more than just a snippet
of code.

00:33:44.580 --> 00:33:46.135
This is a real world
application.

00:33:46.135 --> 00:33:50.640
It was built using v3, or in
some cases, something that was

00:33:50.640 --> 00:33:53.090
written initially against
version 1 or version 2 of the

00:33:53.090 --> 00:33:56.702
API, ported to v3, and show
you what the process of

00:33:56.702 --> 00:34:00.600
porting it to v3 entailed.

00:34:00.600 --> 00:34:03.150
One example right now, the
standalone application is a

00:34:03.150 --> 00:34:07.500
YouTube Topic Explorer, which
we covered in the previous

00:34:07.500 --> 00:34:10.540
week when we talked about
YouTube Topics.

00:34:10.540 --> 00:34:12.780
You can go out and watch
our old episode

00:34:12.780 --> 00:34:14.860
for a link to that.

00:34:14.860 --> 00:34:18.460
I'm personally working on
porting both Party Playlist

00:34:18.460 --> 00:34:20.850
Picker and YouTube Direct
Lite, which are two open

00:34:20.850 --> 00:34:24.389
source projects I wrote that are
using both version 1 and

00:34:24.389 --> 00:34:26.409
version 2 of the API.

00:34:26.409 --> 00:34:30.929
I'm working on porting that to
version 3 to try to, I guess,

00:34:30.929 --> 00:34:34.699
eat our own dog food, to some
extent, and also document what

00:34:34.699 --> 00:34:38.651
the process is for folks who
are making that migration.

00:34:38.651 --> 00:34:41.639
JEREMY WALKER: Great.

00:34:41.639 --> 00:34:43.429
Thanks for that Jeff.

00:34:43.429 --> 00:34:46.000
Vlad and Raul, we have a
couple of questions we

00:34:46.000 --> 00:34:49.280
probably want to get to before
we let you guys go, because I

00:34:49.280 --> 00:34:52.810
know it's late over
there in Europe.

00:34:52.810 --> 00:34:54.260
Let's go through a
couple questions.

00:34:54.260 --> 00:34:55.679
GREG SCHECHTER: Excellent.

00:34:55.679 --> 00:34:59.750
One of the questions I see
here is there is a switch

00:34:59.750 --> 00:35:06.180
between going from the XML
to JSON with the v3 APIs.

00:35:06.180 --> 00:35:10.620
One guy is wondering about the
libraries that are available

00:35:10.620 --> 00:35:13.300
to use that.

00:35:13.300 --> 00:35:14.760
Actually, we've got
some great tools.

00:35:14.760 --> 00:35:18.000
We have the Google Client
Libraries, which will do a lot

00:35:18.000 --> 00:35:19.300
of the API handling.

00:35:19.300 --> 00:35:22.900
They'll even deal with things
like storing some of the

00:35:22.900 --> 00:35:24.760
authentication keys.

00:35:24.760 --> 00:35:28.060
So you can find more information
about that on

00:35:28.060 --> 00:35:29.830
developers.google.com.

00:35:29.830 --> 00:35:32.090
All of the examples that we're
building are using these

00:35:32.090 --> 00:35:32.750
client libraries.

00:35:32.750 --> 00:35:36.260
So those should be able to help
you just sort of convert

00:35:36.260 --> 00:35:41.030
to using v3 and using JSON
for these responses.

00:35:41.030 --> 00:35:47.280
The other thing is, one guy
asked about the different

00:35:47.280 --> 00:35:51.360
philosophy with the design and
how v2 is doing this big data

00:35:51.360 --> 00:35:55.730
dump and v3 is just doing
like the little pieces.

00:35:55.730 --> 00:35:56.550
They wanted to know why.

00:35:56.550 --> 00:35:58.270
We covered that a little
bit earlier, but I'm

00:35:58.270 --> 00:36:00.040
just going to reiterate.

00:36:00.040 --> 00:36:02.670
Basically, you're going
to get less data.

00:36:02.670 --> 00:36:04.900
Just the data you want, which
means that the request is

00:36:04.900 --> 00:36:06.880
going to be faster, so it's
going to be a lot more

00:36:06.880 --> 00:36:09.660
performance and not use
as much bandwidth.

00:36:09.660 --> 00:36:10.840
So that's good for you.

00:36:10.840 --> 00:36:12.540
If you're building your app,
it's going to be faster.

00:36:12.540 --> 00:36:15.120
It's good for us because it's
just easier for us to handle

00:36:15.120 --> 00:36:18.980
greater loads when we're not
sending as much bytes.

00:36:18.980 --> 00:36:19.790
The other question.

00:36:19.790 --> 00:36:20.970
Best way to submit feedback.

00:36:20.970 --> 00:36:22.060
We already talked about that.

00:36:22.060 --> 00:36:24.530
There's a blog post on it
at apiblog.youtube.com.

00:36:27.410 --> 00:36:28.380
The last question--

00:36:28.380 --> 00:36:32.650
one of the other questions was
somebody was wondering if the

00:36:32.650 --> 00:36:36.660
video to topics relationship
is experimental.

00:36:36.660 --> 00:36:38.560
Not just the API, but they
wanted to know if the

00:36:38.560 --> 00:36:39.970
relationship.

00:36:39.970 --> 00:36:41.810
Or is that something that's
sort of solidified?

00:36:41.810 --> 00:36:43.530
Are these things changing?

00:36:43.530 --> 00:36:48.800
I don't know if anyone
can talk about that.

00:36:48.800 --> 00:36:51.390
VLAD VUSKOVIC: We're trying to
improve our algorithms to

00:36:51.390 --> 00:36:57.990
determine that as we go.

00:36:57.990 --> 00:37:01.360
So we expect it to get
better and better.

00:37:01.360 --> 00:37:03.515
I think it's already like
really, really good.

00:37:03.515 --> 00:37:05.140
RAUL FURNICA: Just
to add to that.

00:37:05.140 --> 00:37:08.657
The feature itself, it's nice
for us that there is going to

00:37:08.657 --> 00:37:10.820
be topics for videos.

00:37:10.820 --> 00:37:13.680
That's my intent with it.

00:37:13.680 --> 00:37:16.850
The topics particularly that we
associate with a particular

00:37:16.850 --> 00:37:21.112
video might change in time as
our algorithms get better.

00:37:21.112 --> 00:37:22.515
But the feature is
there to stay.

00:37:22.515 --> 00:37:23.800
VLAD VUSKOVIC: Actually,
we want to improve.

00:37:23.800 --> 00:37:27.830
So to improve the feature,
currently we are serving the

00:37:27.830 --> 00:37:29.295
topics for the video.

00:37:29.295 --> 00:37:31.513
But we will add it for channels
as well, and for

00:37:31.513 --> 00:37:33.010
playlists in future.

00:37:33.010 --> 00:37:35.761
So it's there to stay, yeah.

00:37:35.761 --> 00:37:36.980
GREG SCHECHTER: That's great.

00:37:36.980 --> 00:37:39.470
Thanks, guys.

00:37:39.470 --> 00:37:42.660
Then the last question, which
we see all the time is, "is

00:37:42.660 --> 00:37:45.786
YouTube and Google Developer
Relations hiring?" Jeremy,

00:37:45.786 --> 00:37:46.900
what's the answer to that one?

00:37:46.900 --> 00:37:48.860
JEREMY WALKER: Yes, we
are always hiring.

00:37:48.860 --> 00:37:51.005
So definitely check that out.

00:37:51.005 --> 00:37:55.430
If you go to
developers.google.com/jobs,

00:37:55.430 --> 00:37:58.530
you should be able to
see some listings.

00:37:58.530 --> 00:38:00.940
But we are definitely hiring,
so if you are interested,

00:38:00.940 --> 00:38:04.090
check that out.

00:38:04.090 --> 00:38:05.970
I think that covers
all the questions.

00:38:05.970 --> 00:38:06.470
GREG SCHECHTER: Yeah,
that's all the

00:38:06.470 --> 00:38:07.285
questions we had today.

00:38:07.285 --> 00:38:08.500
JEREMY WALKER: Great.

00:38:08.500 --> 00:38:12.380
So again, check out
the new versions.

00:38:12.380 --> 00:38:15.360
Vlad and Raul, thank you so much
for coming and answering

00:38:15.360 --> 00:38:17.590
some of our questions.

00:38:17.590 --> 00:38:20.525
And go out there and try it, and
give us feedback as soon

00:38:20.525 --> 00:38:21.395
as you can.

00:38:21.395 --> 00:38:23.140
Thanks.

00:38:23.140 --> 00:38:25.150
VLAD VUSKOVIC: Can I just
get last feedback, guys?

00:38:25.150 --> 00:38:27.950
We are really committed
to this API.

00:38:27.950 --> 00:38:30.480
We are going to work hard to
make it better and better.

00:38:30.480 --> 00:38:33.260
One of the good things about the
new API infrastructure is

00:38:33.260 --> 00:38:36.470
that it will allow us to deploy
new features much

00:38:36.470 --> 00:38:37.590
faster than in the past.

00:38:37.590 --> 00:38:39.572
So expect a lot of new features
coming out in

00:38:39.572 --> 00:38:40.985
[INAUDIBLE].

00:38:40.985 --> 00:38:44.590
RAUL FURNICA: Yeah, I've been on
the API team for six years,

00:38:44.590 --> 00:38:48.200
and this is the best API yet.

00:38:48.200 --> 00:38:49.270
GREG SCHECHTER: That's
great to hear.

00:38:49.270 --> 00:38:49.830
Yeah.

00:38:49.830 --> 00:38:51.610
RAUL FURNICA: [INAUDIBLE],
actually.

00:38:55.570 --> 00:38:56.000
JEREMY WALKER: Cool.

00:38:56.000 --> 00:38:56.640
Well, thanks, guys.

00:38:56.640 --> 00:38:57.626
JEFF POSNICK: OK.

00:38:57.626 --> 00:38:58.300
RAUL FURNICA: Thank you.

00:38:58.300 --> 00:38:59.550
GREG SCHECHTER: Bye,
everybody.

00:39:01.714 --> 00:39:05.207
[WHOOSH]

00:39:09.199 --> 00:40:10.433
[MUSIC PLAYING]

