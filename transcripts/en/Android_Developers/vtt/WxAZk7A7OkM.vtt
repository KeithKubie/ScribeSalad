WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.302
[MUSIC PLAYING]

00:00:09.094 --> 00:00:09.760
JAMAL EASON: Hi.

00:00:09.760 --> 00:00:12.670
Welcome to What's New in
Android Development Tools.

00:00:12.670 --> 00:00:15.342
I'm Jamal, a product manager
on the Android Dev Tools team.

00:00:15.342 --> 00:00:16.300
TOR NOBYE: And I'm Tor.

00:00:16.300 --> 00:00:19.709
I'm the tech lead
for Android Studio.

00:00:19.709 --> 00:00:21.250
JAMAL EASON: So
we're excited to show

00:00:21.250 --> 00:00:23.416
you some of the new features
that we've been working

00:00:23.416 --> 00:00:25.450
on inside of Android Studio.

00:00:25.450 --> 00:00:28.720
As you know, Android
Studio is the official IDE

00:00:28.720 --> 00:00:30.670
for developing apps for Android.

00:00:30.670 --> 00:00:32.400
Before jumping in,
I just want to spend

00:00:32.400 --> 00:00:34.900
a few moments highlighting some
things you might have missed

00:00:34.900 --> 00:00:37.700
since we last spoke with you.

00:00:37.700 --> 00:00:42.070
So last year at I/O, we
launched Android Studio 3.0.

00:00:42.070 --> 00:00:44.830
And that included things like
new performance profilers,

00:00:44.830 --> 00:00:47.680
Kotlin language
support, adaptive icons,

00:00:47.680 --> 00:00:50.950
and a new Android emulator with
Play Store integrated plus 20

00:00:50.950 --> 00:00:53.560
new features.

00:00:53.560 --> 00:00:57.320
Earlier this year, we
launched Android Studio 3.1.

00:00:57.320 --> 00:00:59.680
Let's talk about it.

00:00:59.680 --> 00:01:01.540
So Android Studio
3.1 was focused

00:01:01.540 --> 00:01:03.720
on performance and quality.

00:01:03.720 --> 00:01:07.200
We fixed over 800 bugs
and stability issues.

00:01:07.200 --> 00:01:09.130
40% of our time
was fix on issues

00:01:09.130 --> 00:01:14.029
reported by you, so thank you
for your patience and feedback.

00:01:14.029 --> 00:01:15.820
Now, we're certainly
not done with quality.

00:01:15.820 --> 00:01:17.278
We've heard loud
and clear from you

00:01:17.278 --> 00:01:20.140
that performance and
quality is essential,

00:01:20.140 --> 00:01:22.300
so we're continuing
to invest in that.

00:01:22.300 --> 00:01:26.130
But even with our focus on
quality in Android Studio 3.1,

00:01:26.130 --> 00:01:28.390
a few bugs slipped past us.

00:01:28.390 --> 00:01:30.850
And so thank you for those
who report those issues to us

00:01:30.850 --> 00:01:34.000
to allow us to fix those issues.

00:01:34.000 --> 00:01:36.000
In addition to quality,
we know that build speed

00:01:36.000 --> 00:01:37.580
is also critical for you.

00:01:37.580 --> 00:01:41.430
So inside of Android Studio
3.1, we worked on that.

00:01:41.430 --> 00:01:44.500
So for example, when using
D8 with the Sugar integrated,

00:01:44.500 --> 00:01:47.730
we drove upwards of 60%
build speed improvements

00:01:47.730 --> 00:01:49.590
on full builds without caching.

00:01:49.590 --> 00:01:53.230
So that's a great improvement.

00:01:53.230 --> 00:01:56.310
So in addition to build speed
and quality in Android Studio

00:01:56.310 --> 00:01:59.470
3.1, we worked on a
few different features,

00:01:59.470 --> 00:02:01.750
including SQL code
editing support.

00:02:01.750 --> 00:02:04.870
So this has code completion
and project navigation.

00:02:04.870 --> 00:02:07.090
So if you're using any
of the room database APIs

00:02:07.090 --> 00:02:10.150
or any of the SQL Lite APIs,
this would be a plus for you.

00:02:13.010 --> 00:02:15.110
So last year, we
announced Kotlin

00:02:15.110 --> 00:02:17.540
as a first class language
on the platform inside

00:02:17.540 --> 00:02:19.066
of Android Studio.

00:02:19.066 --> 00:02:20.690
Since that point,
we've been continuing

00:02:20.690 --> 00:02:22.490
to invest in to Kotlin.

00:02:22.490 --> 00:02:24.820
So inside of Android
Studio 3.1, you

00:02:24.820 --> 00:02:27.740
can not only do Kotlin
checks in the ID

00:02:27.740 --> 00:02:29.550
but also on the command line.

00:02:29.550 --> 00:02:31.700
So if you do a lot of
automation tests with Kotlin,

00:02:31.700 --> 00:02:34.310
now you have that support built
in inside of Android Studio.

00:02:36.920 --> 00:02:39.240
Now, for those of you
who have C or C++ code,

00:02:39.240 --> 00:02:40.830
here's also a treat for you.

00:02:40.830 --> 00:02:43.670
We added a C++ CPU profiler.

00:02:43.670 --> 00:02:46.190
And again, it allows you
to drill into your C++ code

00:02:46.190 --> 00:02:49.190
and understand the performance
impact of your C++ code.

00:02:49.190 --> 00:02:51.970
And of course, that's on
the unified timeline inside

00:02:51.970 --> 00:02:54.477
of performance profilers.

00:02:54.477 --> 00:02:56.060
And speaking of
performance profilers,

00:02:56.060 --> 00:02:58.330
we also updated the
network profiler.

00:02:58.330 --> 00:03:00.890
So we know that many of you
have multi-threaded network

00:03:00.890 --> 00:03:02.460
threads in your app.

00:03:02.460 --> 00:03:04.730
So now you can look at
each individual thread

00:03:04.730 --> 00:03:06.710
and see the performance
of that aspect,

00:03:06.710 --> 00:03:08.710
and of course, you can
drill into the call stack

00:03:08.710 --> 00:03:13.360
and see, down to your source
code, what's happening.

00:03:13.360 --> 00:03:15.840
And of course, with each
version of Android Studio

00:03:15.840 --> 00:03:19.150
we tried to include the latest
version of IntelliJ in there.

00:03:19.150 --> 00:03:21.630
So one of my favorite features
in this version of IntelliJ

00:03:21.630 --> 00:03:24.360
is actually this new feature
called an SVG previewer.

00:03:24.360 --> 00:03:27.060
And why that's cool is that
as I'm importing and managing

00:03:27.060 --> 00:03:29.964
my SVG assets and converting
those to vector drawables,

00:03:29.964 --> 00:03:32.130
it's very convenient to be
able to double click back

00:03:32.130 --> 00:03:34.810
into the source asset
to see the SVG file.

00:03:34.810 --> 00:03:38.970
So that comes along with
the IntelliJ update.

00:03:38.970 --> 00:03:41.580
And of course, with
Android Studio 3.1

00:03:41.580 --> 00:03:44.750
we also worked on some updates
to the Android emulator.

00:03:44.750 --> 00:03:46.710
One of the pain points
we heard from you

00:03:46.710 --> 00:03:49.280
is that the emulator
is too slow to boot up.

00:03:49.280 --> 00:03:51.630
So as we saw this morning
from [? staff's ?] keynote,

00:03:51.630 --> 00:03:53.171
we enabled quick boot.

00:03:53.171 --> 00:03:55.170
And quick boot allows you
to launch the emulator

00:03:55.170 --> 00:03:56.585
in under three seconds.

00:03:56.585 --> 00:03:58.710
So if you have a chance to
try that out, please do.

00:04:02.230 --> 00:04:05.250
All right, so that brings us to
today, the talk about Android

00:04:05.250 --> 00:04:08.970
Studio 3.2.

00:04:08.970 --> 00:04:11.517
So our team works closely
with the Android framework

00:04:11.517 --> 00:04:14.100
and the Google engineering teams
to ensure that all the latest

00:04:14.100 --> 00:04:17.000
Android technologies and
APIs are tightly integrated

00:04:17.000 --> 00:04:20.320
to accelerate your
development flow.

00:04:20.320 --> 00:04:23.760
So for example, with
Android Studio 3.2,

00:04:23.760 --> 00:04:27.030
you can test and validate
and integrate all the latest

00:04:27.030 --> 00:04:29.820
Android APIs from the
P developer preview.

00:04:32.232 --> 00:04:33.690
And as announced
this afternoon, we

00:04:33.690 --> 00:04:37.270
have a brand new format
called the Android app bundle.

00:04:37.270 --> 00:04:40.370
So with Android Studio 3.2
you can build this bundle,

00:04:40.370 --> 00:04:43.730
and in a course of time you
can deploy a customized APK

00:04:43.730 --> 00:04:49.060
to users using Google Play's
dynamic delivery system.

00:04:49.060 --> 00:04:51.570
And lastly, Android Studio
is a major component

00:04:51.570 --> 00:04:52.770
of Android Jetpack.

00:04:52.770 --> 00:04:54.880
And again, Android
Jetpack is a set

00:04:54.880 --> 00:04:57.360
of libraries, developer
tools, and a set

00:04:57.360 --> 00:05:00.750
of opinionated guidance to help
you quickly and easily scale

00:05:00.750 --> 00:05:03.900
to make great apps for Android.

00:05:03.900 --> 00:05:06.960
Now, for Android Studio 3.2, we
worked on a range of features

00:05:06.960 --> 00:05:09.319
across each development
flow in your process.

00:05:09.319 --> 00:05:11.610
So instead of me talking
about each individual feature,

00:05:11.610 --> 00:05:13.140
I'll actually have
Tor give us a demo

00:05:13.140 --> 00:05:15.556
and tour all the cool features
of things you can do inside

00:05:15.556 --> 00:05:16.290
of Android 3.2.

00:05:16.290 --> 00:05:18.290
And I'll come back and
talk with you afterwards.

00:05:18.290 --> 00:05:20.012
With that, Tor.

00:05:20.012 --> 00:05:21.720
TOR NOBYE: All right,
so it's my pleasure

00:05:21.720 --> 00:05:24.000
to show you all the
new features that we

00:05:24.000 --> 00:05:26.680
have built over the last year.

00:05:26.680 --> 00:05:28.470
So the first thing
you'll notice is

00:05:28.470 --> 00:05:30.840
that we have this new
window on the right.

00:05:30.840 --> 00:05:32.790
It's the What's New Window.

00:05:32.790 --> 00:05:34.950
So in this window, we'll
be showing it to you once

00:05:34.950 --> 00:05:37.039
per release, and we're
sort of highlighting

00:05:37.039 --> 00:05:38.580
the important things
for you to know,

00:05:38.580 --> 00:05:41.637
changes and new features
in that release.

00:05:41.637 --> 00:05:43.470
And if you look at 3.2,
the number one thing

00:05:43.470 --> 00:05:47.050
that we're profiling is the
new Android app bundle support.

00:05:47.050 --> 00:05:49.950
So let's get right into that.

00:05:49.950 --> 00:05:52.020
So the key takeaway
about app bundles

00:05:52.020 --> 00:05:54.840
is that it lets you package and
upload your app in such a way

00:05:54.840 --> 00:05:57.090
that the Play Store can
create many different versions

00:05:57.090 --> 00:05:59.970
of your app for each combination
of chip architecture, screen

00:05:59.970 --> 00:06:02.460
size, and even locale.

00:06:02.460 --> 00:06:04.920
And that makes the
downloads smaller, right?

00:06:04.920 --> 00:06:09.000
So in studio, all you have
to do is rebuild your app.

00:06:09.000 --> 00:06:12.750
So if I go to our generate
signed APK wizard,

00:06:12.750 --> 00:06:14.250
you can see there's
a new option now

00:06:14.250 --> 00:06:16.260
for generating an app bundle.

00:06:19.170 --> 00:06:20.310
And here I can sign it.

00:06:20.310 --> 00:06:22.810
And it's really important to
understand that for Google Play

00:06:22.810 --> 00:06:25.150
to do this it has
to sign your app.

00:06:25.150 --> 00:06:28.440
So you have to give it your
encryption key to do that.

00:06:28.440 --> 00:06:31.650
So I'm going to choose to
export the encryption key.

00:06:31.650 --> 00:06:36.110
Note also that it's not
exporting it into the bundle,

00:06:36.110 --> 00:06:36.780
OK?

00:06:36.780 --> 00:06:38.488
So if you look at the
little notification

00:06:38.488 --> 00:06:39.990
here in the bottom
right, there's

00:06:39.990 --> 00:06:42.870
a little link that we added
so you can see where we stored

00:06:42.870 --> 00:06:44.680
that key so you can upload it.

00:06:44.680 --> 00:06:48.090
The UI needs a little
work, so we'll tweak that.

00:06:48.090 --> 00:06:50.340
So now that we've
created this bundle file,

00:06:50.340 --> 00:06:51.490
we can take a look at it.

00:06:51.490 --> 00:06:56.100
So the key analyzer also works
on bundle files, naturally.

00:06:56.100 --> 00:06:59.680
And if you look at this, it
should look pretty familiar.

00:06:59.680 --> 00:07:03.220
So dynamic delivery is
really, really easy to do.

00:07:03.220 --> 00:07:07.410
It's basically, you know,
upload your key and rebuild.

00:07:07.410 --> 00:07:09.300
And that's in production today.

00:07:09.300 --> 00:07:12.480
We also are previewing
dynamic feature modules.

00:07:12.480 --> 00:07:14.820
And so if you look
carefully at my bundle file,

00:07:14.820 --> 00:07:18.090
there's actually this other
thing called Article Composer.

00:07:18.090 --> 00:07:21.330
That just happens to be a name
I chose for a dynamic feature

00:07:21.330 --> 00:07:24.480
in this app that can
compose articles, right?

00:07:24.480 --> 00:07:25.990
So how did I do that?

00:07:25.990 --> 00:07:29.290
I went to the new module menu.

00:07:29.290 --> 00:07:32.920
We have a dynamic feature
module module type.

00:07:32.920 --> 00:07:37.540
And here-- it
doesn't want to go.

00:07:37.540 --> 00:07:39.270
JAMAL EASON: Select.

00:07:39.270 --> 00:07:41.190
TOR NOBYE: Oh, OK.

00:07:41.190 --> 00:07:44.580
Here I basically get to
choose the name of the feature

00:07:44.580 --> 00:07:46.649
and also--

00:07:46.649 --> 00:07:47.190
enter target.

00:07:47.190 --> 00:07:48.231
I see that's the problem.

00:07:48.231 --> 00:07:50.727
I have network issues.

00:07:50.727 --> 00:07:52.560
I've already created
this module, obviously,

00:07:52.560 --> 00:07:54.018
since you see it
in my bundle file,

00:07:54.018 --> 00:07:56.560
so let me show you how
it's all wired together.

00:07:56.560 --> 00:07:58.770
So first, I have
a new module where

00:07:58.770 --> 00:08:04.440
we apply this new special Gradle
plug-in for dynamic features.

00:08:04.440 --> 00:08:08.010
We have a manifest in that
module where I can basically

00:08:08.010 --> 00:08:09.679
say that I want this
to be on demand,

00:08:09.679 --> 00:08:11.220
and we want the Play
Store to fuse it

00:08:11.220 --> 00:08:13.980
so that it can build APK
case for older devices that

00:08:13.980 --> 00:08:15.510
don't support this.

00:08:15.510 --> 00:08:20.680
And in our main app module, we
link to these dynamic features.

00:08:20.680 --> 00:08:23.160
So creating a dynamic
feature module

00:08:23.160 --> 00:08:24.872
is a lot more work for you.

00:08:24.872 --> 00:08:26.580
You're going to have
to use the Play core

00:08:26.580 --> 00:08:30.000
library to react to download
and installation events.

00:08:30.000 --> 00:08:32.669
But it's really useful if you
have some large functionality

00:08:32.669 --> 00:08:35.330
in your app that not every
user is going to want.

00:08:35.330 --> 00:08:38.549
So you can have your base
app be small and then do

00:08:38.549 --> 00:08:42.220
the on demand installation
of these other features.

00:08:42.220 --> 00:08:45.540
One other thing we've added
to the run config dialog

00:08:45.540 --> 00:08:50.490
is the ability for you to choose
which features are included

00:08:50.490 --> 00:08:52.370
when you are testing locally.

00:08:52.370 --> 00:08:54.510
Now, to test download
and installation stuff,

00:08:54.510 --> 00:08:58.530
you'll need to use the
Play console testing track.

00:08:58.530 --> 00:09:00.010
All right, so
that's dynamic apps.

00:09:00.010 --> 00:09:03.310
Let's take a look
at the profiler.

00:09:03.310 --> 00:09:06.570
So we have several new
features in the profiler.

00:09:06.570 --> 00:09:08.940
I'm going to open it up.

00:09:08.940 --> 00:09:10.470
And I have an app running.

00:09:10.470 --> 00:09:11.952
This is the Plaid app.

00:09:11.952 --> 00:09:14.160
So the first thing you notice
in the bottom left here

00:09:14.160 --> 00:09:15.990
is we have a session's view.

00:09:15.990 --> 00:09:19.590
So you can record multiple
profiling sessions,

00:09:19.590 --> 00:09:23.470
and then you can go in and
sort of compare results.

00:09:23.470 --> 00:09:26.430
One thing I've already
recorded earlier

00:09:26.430 --> 00:09:29.460
is a new feature we've
added, which is systrace.

00:09:29.460 --> 00:09:32.610
So systrace is this
really powerful profiler.

00:09:32.610 --> 00:09:35.700
It looks at data from the
kernel so I can see what's

00:09:35.700 --> 00:09:37.754
going on on different CPUs.

00:09:37.754 --> 00:09:40.170
There's thousands of tracing
events from the kernel that's

00:09:40.170 --> 00:09:40.951
being recorded.

00:09:40.951 --> 00:09:42.700
That's probably hard
to see on the screen.

00:09:42.700 --> 00:09:45.360
There's some faint
graduation of colors

00:09:45.360 --> 00:09:48.420
here to show you
all these events.

00:09:48.420 --> 00:09:50.330
So that's the CPU tracer.

00:09:50.330 --> 00:09:52.680
I'm sorry, that's systrace.

00:09:52.680 --> 00:09:55.440
Let's go back into our CPU view.

00:09:55.440 --> 00:09:58.190
Now, let's assume--
actually, let me start.

00:09:58.190 --> 00:09:59.690
These were all
prerecorded sessions,

00:09:59.690 --> 00:10:02.340
so let me now attach to the
current running session.

00:10:02.340 --> 00:10:04.140
So here's our telemetry view.

00:10:04.140 --> 00:10:06.960
So now I'm going to go
into the CPU profiler.

00:10:06.960 --> 00:10:09.270
And let's say I'm
interested in recording

00:10:09.270 --> 00:10:11.850
why my UI is so
slow when I click

00:10:11.850 --> 00:10:14.910
on this thumbnail on the right.

00:10:14.910 --> 00:10:17.640
Until now what I would do is
click on this record method

00:10:17.640 --> 00:10:21.900
trace button on the left, and
I would try to quickly press it

00:10:21.900 --> 00:10:23.710
after doing the action.

00:10:23.710 --> 00:10:27.390
Well, what I can do now is
actually trigger it from code.

00:10:27.390 --> 00:10:32.310
So in 3.2, we have
this ability for you

00:10:32.310 --> 00:10:33.570
to call the debug method.

00:10:33.570 --> 00:10:36.880
This is a standard SDK method,
Android dot OS dot debug.

00:10:36.880 --> 00:10:39.090
So I'm telling it I want to
start method tracing here

00:10:39.090 --> 00:10:41.250
at the beginning on create.

00:10:41.250 --> 00:10:44.121
At the end, I'm going to
say stop at the tracing.

00:10:44.121 --> 00:10:44.620
Right?

00:10:44.620 --> 00:10:46.830
So now, then I'm going
to click on the UI.

00:10:46.830 --> 00:10:52.000
Take a look at what
happens in the CPU view.

00:10:52.000 --> 00:10:54.919
So you can see it captured
exactly the range of code

00:10:54.919 --> 00:10:56.460
that I'm interested
in, and I can now

00:10:56.460 --> 00:11:01.210
drill in and figure out what's
wrong with my layout inflation.

00:11:01.210 --> 00:11:03.030
So that's the CPU profiler.

00:11:03.030 --> 00:11:06.690
Let's move on to the
network profiler.

00:11:06.690 --> 00:11:09.600
So let me scroll out a bit.

00:11:09.600 --> 00:11:12.420
So as Jamal mentioned, we
have two new features here.

00:11:12.420 --> 00:11:14.430
We have a threads
view so you can see

00:11:14.430 --> 00:11:17.040
which thread is doing what--

00:11:17.040 --> 00:11:19.340
some random picture
from this app.

00:11:19.340 --> 00:11:22.860
We are also showing
requests and responses

00:11:22.860 --> 00:11:24.690
for the network profiler.

00:11:24.690 --> 00:11:27.930
In the memory profiler,
our biggest new feature

00:11:27.930 --> 00:11:31.770
is the ability to show you JNI
references and the allocation

00:11:31.770 --> 00:11:34.350
trace from the JNI references.

00:11:34.350 --> 00:11:40.630
And last but not least is
our new energy profiler.

00:11:40.630 --> 00:11:42.330
Let me zoom out a bit.

00:11:42.330 --> 00:11:45.540
So the energy profiler
helps me figure out what's

00:11:45.540 --> 00:11:47.410
going on with my battery life.

00:11:47.410 --> 00:11:50.850
So if I take a look
earlier in the app here,

00:11:50.850 --> 00:11:53.700
you can see we have
this legend on top.

00:11:53.700 --> 00:11:56.550
And this is showing me that I
have fairly light CPU usage.

00:11:56.550 --> 00:11:59.220
But it's telling me if I'm
touching the network, if I'm

00:11:59.220 --> 00:12:03.150
getting location requests,
if I'm running alarms,

00:12:03.150 --> 00:12:04.320
and if I have wake locks.

00:12:04.320 --> 00:12:07.050
And if you see there's this
big red bar on the bottom,

00:12:07.050 --> 00:12:09.070
that's showing there's
a wake lock in effect.

00:12:09.070 --> 00:12:11.800
A wake lock means that the
device cannot go to sleep.

00:12:11.800 --> 00:12:14.490
This is obviously really
bad for battery life, right?

00:12:14.490 --> 00:12:18.360
So let's look at this range.

00:12:18.360 --> 00:12:21.990
And here it actually shows
me the real wake lock names.

00:12:21.990 --> 00:12:23.910
We can see our
first wake lock was

00:12:23.910 --> 00:12:25.470
alive for about four seconds.

00:12:25.470 --> 00:12:26.730
That's normal.

00:12:26.730 --> 00:12:28.560
But the second wake lock--

00:12:28.560 --> 00:12:30.660
still unreleased and
going for 50 seconds.

00:12:30.660 --> 00:12:32.080
That's not good.

00:12:32.080 --> 00:12:34.860
So what I can do is
click on that wake lock,

00:12:34.860 --> 00:12:39.330
and we drill down to where
the wake lock was acquired.

00:12:39.330 --> 00:12:41.430
You can see obviously
this is a bug I added.

00:12:41.430 --> 00:12:43.200
This is not the
Plaid app's fault.

00:12:43.200 --> 00:12:44.760
This is just to
show the wake lock.

00:12:44.760 --> 00:12:49.320
So the wake lock detector
and the whole energy profiler

00:12:49.320 --> 00:12:52.320
is new in 3.2 and hopefully
very useful to you.

00:12:52.320 --> 00:12:54.330
All right, so that's
it for the profiler.

00:12:54.330 --> 00:12:57.210
Let's talk about the
emulator for a bit.

00:12:57.210 --> 00:13:01.230
Let me stop profiling.

00:13:01.230 --> 00:13:03.960
All right, so here we
are in the emulator.

00:13:03.960 --> 00:13:06.210
We have the new snapshots
that you saw earlier,

00:13:06.210 --> 00:13:09.150
and we actually have
a whole UI for this.

00:13:09.150 --> 00:13:13.020
So I can see here that my
quick boot obviously looks

00:13:13.020 --> 00:13:14.880
like the lock screen, right?

00:13:14.880 --> 00:13:17.220
But I've also recorded
a session in the middle

00:13:17.220 --> 00:13:18.990
of searching a Google Maps.

00:13:18.990 --> 00:13:21.560
So I can just click the
snapshot, press play,

00:13:21.560 --> 00:13:24.720
and my emulator's instantly
in that exact state.

00:13:24.720 --> 00:13:28.224
I also recorded a snapshot
while running the clock.

00:13:28.224 --> 00:13:29.640
So again, if I
press play, you can

00:13:29.640 --> 00:13:32.130
see it's instantly in
that state, 15 seconds

00:13:32.130 --> 00:13:34.410
into recording the snapshot.

00:13:34.410 --> 00:13:37.180
And recording a snapshot is
as simple as clicking the take

00:13:37.180 --> 00:13:40.020
snapshot while you're
running your emulator.

00:13:40.020 --> 00:13:42.000
And then you can bring it back.

00:13:42.000 --> 00:13:45.420
You can see there's also
a special quick boot

00:13:45.420 --> 00:13:46.487
snapshot, right?

00:13:46.487 --> 00:13:48.570
That's the one that emulator
is going to come back

00:13:48.570 --> 00:13:50.160
into when you restart it.

00:13:50.160 --> 00:13:56.140
So if I exit the emulator
right now and bring it back up,

00:13:56.140 --> 00:13:57.030
you should see that--

00:13:57.030 --> 00:13:57.530
yes.

00:13:57.530 --> 00:14:00.150
You know it comes
back really quickly.

00:14:00.150 --> 00:14:02.280
We've added a few other
features to the emulator.

00:14:02.280 --> 00:14:05.160
So by popular demand--

00:14:05.160 --> 00:14:06.294
screen recording.

00:14:06.294 --> 00:14:07.335
A lot of you wanted this.

00:14:07.335 --> 00:14:08.918
This lets you record
a video of what's

00:14:08.918 --> 00:14:11.490
happening along with audio.

00:14:11.490 --> 00:14:13.770
And we've also
enhanced the camera.

00:14:13.770 --> 00:14:15.480
So let me start the camera.

00:14:20.430 --> 00:14:23.250
Yes, yes.

00:14:23.250 --> 00:14:24.840
All right, so what
we've done here

00:14:24.840 --> 00:14:28.290
is we are now feeding the
camera and the emulator

00:14:28.290 --> 00:14:33.630
sensors the fiction that
you're in this 3D world here.

00:14:33.630 --> 00:14:35.500
Actually, I don't
have to hold Alt key.

00:14:35.500 --> 00:14:37.830
So I can move around
in this 3D scene,

00:14:37.830 --> 00:14:39.330
and this is really,
really important

00:14:39.330 --> 00:14:43.230
when you're building AR apps.

00:14:43.230 --> 00:14:46.530
And speaking of AR, we
have some support back

00:14:46.530 --> 00:14:48.570
in the IDE for that.

00:14:48.570 --> 00:14:51.570
So let's see.

00:14:51.570 --> 00:14:56.470
This is a GLTF file,
and we have a plug-in--

00:14:56.470 --> 00:15:00.240
let me see, settings.

00:15:00.240 --> 00:15:01.768
We have this scene form plugin.

00:15:01.768 --> 00:15:03.976
So you've heard about the
scene form in the keynote--

00:15:03.976 --> 00:15:07.830
a scene form plugin which helps
you preview your 3D models.

00:15:07.830 --> 00:15:09.390
So here's this GLTF file.

00:15:09.390 --> 00:15:13.140
I can go in and import
this as a scene form asset.

00:15:13.140 --> 00:15:14.730
We support GLTF files.

00:15:14.730 --> 00:15:15.680
We support OBJ.

00:15:15.680 --> 00:15:17.970
We support FBX files.

00:15:17.970 --> 00:15:20.460
And so when I run
this import, it's

00:15:20.460 --> 00:15:26.310
going to create a Gradle
task for me, which is

00:15:26.310 --> 00:15:28.470
creating these SFA SFB files.

00:15:28.470 --> 00:15:30.630
That is core to scene form.

00:15:30.630 --> 00:15:33.540
And then I can open my SFA file,
and the important part here

00:15:33.540 --> 00:15:35.820
is that we have a viewer.

00:15:35.820 --> 00:15:37.230
Ta-da!

00:15:37.230 --> 00:15:42.390
So now I can explore what's
going on, in a 3D sense, what

00:15:42.390 --> 00:15:44.720
this model is doing.

00:15:44.720 --> 00:15:46.590
All right, so that's scene form.

00:15:46.590 --> 00:15:49.600
Let's switch gears a bit
and talk about Jetpack.

00:15:52.650 --> 00:15:55.860
So if you look at the package
names in the editor here,

00:15:55.860 --> 00:15:57.780
you can see that we have
Android dot Support.

00:15:57.780 --> 00:16:00.270
We have some V4, some V7.

00:16:00.270 --> 00:16:03.420
These are super misleading
version numbers, right?

00:16:03.420 --> 00:16:06.250
And so we decided we need to
clean up our legacy a bit,

00:16:06.250 --> 00:16:08.250
and so we are
repackaging everything

00:16:08.250 --> 00:16:12.180
from Android Support
over to Android X.

00:16:12.180 --> 00:16:14.160
And to help with
that migration, we're

00:16:14.160 --> 00:16:17.220
providing all of our libraries
in both the old namespace

00:16:17.220 --> 00:16:19.820
and the new namespace
for now, as well as

00:16:19.820 --> 00:16:22.170
a automated refactoring tool.

00:16:22.170 --> 00:16:23.670
Let me show you how that works.

00:16:23.670 --> 00:16:26.580
And by the way, this
also applies to XML files

00:16:26.580 --> 00:16:29.790
where you have these class
names, and even Gradle files,

00:16:29.790 --> 00:16:33.270
because we are also repackaging
the group IDs and artifact

00:16:33.270 --> 00:16:36.510
IDs for these libraries.

00:16:36.510 --> 00:16:40.460
So I go to refactor,
refactor Android X.

00:16:40.460 --> 00:16:42.540
It's going to look
through the code.

00:16:42.540 --> 00:16:44.730
Then it's going to offer
to preview the changes.

00:16:44.730 --> 00:16:45.600
I'm feeling lucky.

00:16:48.750 --> 00:16:51.960
So you can see here-- actually,
let me open up the git view.

00:16:51.960 --> 00:16:53.970
And I highly, highly,
highly recommend

00:16:53.970 --> 00:16:56.820
that you all make backups
and use version control,

00:16:56.820 --> 00:17:00.039
both preferably,
before you do this.

00:17:00.039 --> 00:17:01.830
So you can see that
we've actually replaced

00:17:01.830 --> 00:17:04.130
a bunch of the code here.

00:17:04.130 --> 00:17:07.770
And it should work, but
we are aware of some bugs

00:17:07.770 --> 00:17:10.835
already in Canary
14 and in Canary 15.

00:17:10.835 --> 00:17:12.960
So we would really like
you to try this and give us

00:17:12.960 --> 00:17:14.579
feedback on what's
broken so that we

00:17:14.579 --> 00:17:18.810
can make this working smoothly
for everyone before 3.2 goes

00:17:18.810 --> 00:17:20.730
to stable.

00:17:20.730 --> 00:17:24.599
All right, so Jetpack
is about a lot more

00:17:24.599 --> 00:17:26.880
than cleaning up legacy code.

00:17:26.880 --> 00:17:29.730
We are adding a number
of new libraries.

00:17:29.730 --> 00:17:33.510
And one of the most important
ones, for the tools anyway,

00:17:33.510 --> 00:17:36.180
is the navigation library.

00:17:36.180 --> 00:17:40.200
So the new navigation
library does

00:17:40.200 --> 00:17:43.230
require you to architect your
app for the navigation library

00:17:43.230 --> 00:17:44.200
from the beginning.

00:17:44.200 --> 00:17:47.625
So this is not magically machine
learn intelligence figuring out

00:17:47.625 --> 00:17:48.750
what your app is doing, OK?

00:17:48.750 --> 00:17:52.480
This is a navigation graph
we have created for this app.

00:17:52.480 --> 00:17:55.050
So let me show you how the
navigation library works,

00:17:55.050 --> 00:17:57.450
the plumbing
underneath it, first.

00:17:57.450 --> 00:18:01.500
So I have a launcher activity.

00:18:01.500 --> 00:18:06.750
I point that launcher activity
to a sort of root layout.

00:18:06.750 --> 00:18:09.270
And in that layout, all I do
is I put a navigation host

00:18:09.270 --> 00:18:10.770
fragment.

00:18:10.770 --> 00:18:13.020
And this navigational
host fragment

00:18:13.020 --> 00:18:15.720
will do the dynamic
dispatching at runtime.

00:18:15.720 --> 00:18:17.880
And then we put the
navhost fragment

00:18:17.880 --> 00:18:20.190
to this navigation
resource file.

00:18:20.190 --> 00:18:22.320
That's a new resource
type that we've added

00:18:22.320 --> 00:18:24.224
for this specific library.

00:18:24.224 --> 00:18:26.640
So now we're looking back at
the navigation resource file.

00:18:26.640 --> 00:18:30.090
It's just an XML file, but we
have a nice visualizer for it.

00:18:30.090 --> 00:18:33.340
Let me actually go
ahead and run the app.

00:18:33.340 --> 00:18:36.240
So if you look
carefully, you can

00:18:36.240 --> 00:18:40.770
see that near my mouse pointer
there's a little Home icon.

00:18:40.770 --> 00:18:44.580
That tells me that
this page is the start

00:18:44.580 --> 00:18:47.160
destination in the app.

00:18:47.160 --> 00:18:48.870
I can just go to
the title screen

00:18:48.870 --> 00:18:51.960
instead and click on
set start destination.

00:18:51.960 --> 00:18:56.580
And when I run it again, you'll
see that now the app instead

00:18:56.580 --> 00:18:58.980
starts on the title screen.

00:18:58.980 --> 00:19:01.590
I didn't change the launcher
activity or anything else.

00:19:01.590 --> 00:19:03.330
All I changed was
the navigation graph.

00:19:03.330 --> 00:19:07.090
So that tells the nav
fragment where to begin.

00:19:07.090 --> 00:19:09.930
All right, so next I'm going
to click the Play button,

00:19:09.930 --> 00:19:11.610
and it does nothing.

00:19:11.610 --> 00:19:12.660
Why is that?

00:19:12.660 --> 00:19:15.961
Well, the Play button is just
a button in this layout, right?

00:19:15.961 --> 00:19:17.460
So if you look at
this layout, there

00:19:17.460 --> 00:19:20.550
are two arrows coming
out of it, right?

00:19:20.550 --> 00:19:24.135
The first one, on top
here, has the action, play.

00:19:24.135 --> 00:19:26.010
That's one of the things
we want to navigate.

00:19:26.010 --> 00:19:29.010
When the action play happens,
we want it to go to this page.

00:19:29.010 --> 00:19:30.570
When the action
leaderboard happens,

00:19:30.570 --> 00:19:31.846
we want to go over here.

00:19:31.846 --> 00:19:33.220
Let's go take a
look at the code.

00:19:33.220 --> 00:19:36.120
So I'm going to drill into the
layout by just double clicking.

00:19:36.120 --> 00:19:38.190
So here's our
button, and I'm going

00:19:38.190 --> 00:19:41.550
to jump to the onclick
handler for that button.

00:19:41.550 --> 00:19:43.350
It's called onPlay.

00:19:43.350 --> 00:19:45.690
And I'm going to
uncomment this code.

00:19:45.690 --> 00:19:47.310
So what we're
doing here is we're

00:19:47.310 --> 00:19:48.720
finding the nav controller.

00:19:48.720 --> 00:19:50.259
That's from the
navigation library.

00:19:50.259 --> 00:19:52.800
And this is Kotlin so we have
an extension method right there

00:19:52.800 --> 00:19:53.330
on the view.

00:19:53.330 --> 00:19:56.642
But in Java you could just
call the navigation helper.

00:19:56.642 --> 00:19:58.350
So we get the nav
controller, and we say,

00:19:58.350 --> 00:20:01.200
navigate to the action play.

00:20:01.200 --> 00:20:03.490
All right, so now I'm going
to deploy that to the app.

00:20:06.550 --> 00:20:08.880
And once that gets there,
I can now press play.

00:20:08.880 --> 00:20:11.260
And you can see it
goes where we want.

00:20:11.260 --> 00:20:16.110
So I can now go back into
the navigation screen.

00:20:16.110 --> 00:20:18.392
And instead of jumping
when I press play,

00:20:18.392 --> 00:20:20.100
instead of jumping to
the register thing,

00:20:20.100 --> 00:20:25.650
I'm going to have it jump over
to our in-game screen instead.

00:20:25.650 --> 00:20:27.449
So I'll just make that change.

00:20:27.449 --> 00:20:28.740
Notice the code doesn't change.

00:20:28.740 --> 00:20:31.920
The code just says,
take the play action.

00:20:31.920 --> 00:20:32.830
All right?

00:20:32.830 --> 00:20:35.130
So now when I press
play, instead we

00:20:35.130 --> 00:20:36.990
go right into the game.

00:20:36.990 --> 00:20:38.730
So the routing table is here.

00:20:41.310 --> 00:20:45.150
Another thing we can do is to
select this transition and say,

00:20:45.150 --> 00:20:45.750
you know what?

00:20:45.750 --> 00:20:47.800
I'd like an animation
on this transition.

00:20:47.800 --> 00:20:51.700
So I'm going to choose the
rotate cross to tick animation.

00:20:51.700 --> 00:20:54.880
And again, I'm going to
deploy that to the device.

00:20:54.880 --> 00:20:56.970
And when I press play
now, look at the screen.

00:20:56.970 --> 00:20:59.490
You can see it rotates.

00:20:59.490 --> 00:21:02.247
So there's a lot of
features in the Nav Editor

00:21:02.247 --> 00:21:03.330
that I'm not getting into.

00:21:03.330 --> 00:21:06.300
For example, passing arguments
in a safe way from one

00:21:06.300 --> 00:21:08.910
screen to another,
or nesting graphs.

00:21:08.910 --> 00:21:11.360
I'll just show one last thing--

00:21:11.360 --> 00:21:12.380
deep links.

00:21:12.380 --> 00:21:14.130
So I'm going to press
the plus button here

00:21:14.130 --> 00:21:16.170
to create a deep link.

00:21:16.170 --> 00:21:18.570
And let's pretend for a moment
that I own the Google.com

00:21:18.570 --> 00:21:20.850
domain.

00:21:20.850 --> 00:21:24.810
So if I look at the
manifest file here,

00:21:24.810 --> 00:21:27.960
all I've done in the manifest
is register my activity

00:21:27.960 --> 00:21:29.490
with the launcher intent.

00:21:29.490 --> 00:21:32.090
And also I reference
a nav graph.

00:21:32.090 --> 00:21:34.440
But now let's take a look at
the merged manifest, right?

00:21:34.440 --> 00:21:36.317
This is what we
compute on the fly

00:21:36.317 --> 00:21:38.400
when you build, and we
also compute it in the IDE,

00:21:38.400 --> 00:21:39.360
obviously.

00:21:39.360 --> 00:21:41.010
If you look at the
bottom here, we

00:21:41.010 --> 00:21:43.170
create intent filters
for you that are

00:21:43.170 --> 00:21:45.190
handling this deep link, right?

00:21:45.190 --> 00:21:47.190
So you just put that deep
link in your app file,

00:21:47.190 --> 00:21:50.460
and now your app will
respond to deep links.

00:21:50.460 --> 00:21:54.390
So that's the Nav Editor,
which is new in 3.2.

00:21:54.390 --> 00:21:58.710
Let's talk about the
Layout Editor for a bit.

00:21:58.710 --> 00:22:06.204
So as you can see, you get this
nice graphical view of the app.

00:22:06.204 --> 00:22:08.370
Well, the reason that works
is that we have a highly

00:22:08.370 --> 00:22:09.780
visual app here, right?

00:22:09.780 --> 00:22:13.270
So you can sort of see from
the outline what it looks like.

00:22:13.270 --> 00:22:14.790
Sometimes you're not that lucky.

00:22:14.790 --> 00:22:19.020
But what really helps is you
can sample data to your app.

00:22:19.020 --> 00:22:21.630
We've had the plumbing for
sample data for quite a while,

00:22:21.630 --> 00:22:23.940
but in this release we made
it a lot easier to use.

00:22:23.940 --> 00:22:26.250
So first of all, I can go
over in the property sheet.

00:22:26.250 --> 00:22:29.700
And you can see next to the text
property we have this design

00:22:29.700 --> 00:22:31.080
time property.

00:22:31.080 --> 00:22:33.450
I'm going to bring
up the customizer.

00:22:33.450 --> 00:22:36.390
And here I can explore all
the different sample data

00:22:36.390 --> 00:22:38.530
types we have.

00:22:38.530 --> 00:22:41.370
So for this one, I'm going
to choose a full name.

00:22:44.190 --> 00:22:47.620
I can also select a widget
in the design surface.

00:22:47.620 --> 00:22:50.130
And if you look carefully,
whenever you select something,

00:22:50.130 --> 00:22:52.230
there are four buttons under it.

00:22:52.230 --> 00:22:53.070
Right?

00:22:53.070 --> 00:22:55.830
The fourth icon is a wrench.

00:22:55.830 --> 00:22:58.800
That means design
time attributes.

00:22:58.800 --> 00:23:01.650
So I can click on that, and
I can also set design time

00:23:01.650 --> 00:23:03.030
attributes from here.

00:23:03.030 --> 00:23:05.430
And the reason it's important
to know about that trick

00:23:05.430 --> 00:23:08.460
is that it's particularly
useful with lists.

00:23:08.460 --> 00:23:16.010
So let me open up a blank layout
and drag in a Recycler View.

00:23:16.010 --> 00:23:17.760
And that looks really
unimpressive, right?

00:23:17.760 --> 00:23:19.593
This is what you get
with the Recycler View.

00:23:19.593 --> 00:23:21.830
But now notice that
below the Recycler View

00:23:21.830 --> 00:23:23.160
we have our wrench again.

00:23:23.160 --> 00:23:24.910
So I'm going to press it.

00:23:24.910 --> 00:23:26.700
This is our design time helper.

00:23:26.700 --> 00:23:29.010
And for list views
and Recycler Views,

00:23:29.010 --> 00:23:32.710
we offer to customize the
item list layouts for you.

00:23:32.710 --> 00:23:36.480
So if I press next, I can
cycle through various list item

00:23:36.480 --> 00:23:37.180
layouts here.

00:23:37.180 --> 00:23:40.080
So we create one that looks
sort of email list like,

00:23:40.080 --> 00:23:45.420
one liners, two liners, three
liners, we even have a grid.

00:23:45.420 --> 00:23:49.050
So the design time
helpers should

00:23:49.050 --> 00:23:51.390
help you make your
layouts look better

00:23:51.390 --> 00:23:53.730
from the Nav Editor at least.

00:23:53.730 --> 00:23:57.090
The last thing I'll mention
on the Layout Editor

00:23:57.090 --> 00:24:00.870
is that we also have some
support for material theming.

00:24:00.870 --> 00:24:04.920
So here's a pretend composed
window in an email app.

00:24:04.920 --> 00:24:06.966
So we have the new chip widgets.

00:24:06.966 --> 00:24:08.340
We have the bottom
nav layout you

00:24:08.340 --> 00:24:12.480
can see with this
sort of rounded curve.

00:24:12.480 --> 00:24:17.830
And everything I've shown you
so far is in Android Studio 3.2.

00:24:17.830 --> 00:24:19.920
Now, I'm going to give
you a sneak preview

00:24:19.920 --> 00:24:22.800
of a feature for an upcoming
release-- might not even

00:24:22.800 --> 00:24:26.894
be 3.3.

00:24:26.894 --> 00:24:28.810
So I'm going to open up
a new layout for that.

00:24:31.730 --> 00:24:33.940
And the problem
we're trying to solve

00:24:33.940 --> 00:24:36.940
is making animation easier.

00:24:36.940 --> 00:24:41.020
So what I have
here is a subclass,

00:24:41.020 --> 00:24:42.560
I think, of constraint layout.

00:24:42.560 --> 00:24:45.160
It's sort of next generation
constraint layout,

00:24:45.160 --> 00:24:47.080
which lets you do motion.

00:24:47.080 --> 00:24:51.700
So I can select my widget, and
it has two constraint sets.

00:24:51.700 --> 00:24:55.300
So in the beginning, it's
attached to bottom left.

00:24:55.300 --> 00:24:59.200
At the end, it's
attached top right.

00:24:59.200 --> 00:25:01.210
So I can play,
and you can see we

00:25:01.210 --> 00:25:03.970
can animate between these
two constraint sets.

00:25:03.970 --> 00:25:07.330
Let me actually go and
turn on motion paths

00:25:07.330 --> 00:25:10.130
so we can see what's going on.

00:25:10.130 --> 00:25:12.880
So now we can see where
this thing is going to go.

00:25:12.880 --> 00:25:18.200
Now, the important part is I
can go in and add keyframes.

00:25:18.200 --> 00:25:25.130
So I'll add a Cartesian
position keyframe, and I will--

00:25:25.130 --> 00:25:27.790
we can drag it over
here, for example.

00:25:27.790 --> 00:25:31.180
And I'll add one more
keyframe to rotate.

00:25:31.180 --> 00:25:34.900
So we'll set a random attribute.

00:25:34.900 --> 00:25:37.780
Actually, I want to
do it somewhere else

00:25:37.780 --> 00:25:38.890
so that it's more obvious.

00:25:38.890 --> 00:25:44.810
So I'll add a new
keyframe over here.

00:25:44.810 --> 00:25:49.660
So let's see-- new attributes.

00:25:49.660 --> 00:25:51.880
And I have to select it.

00:25:51.880 --> 00:25:54.500
And then we will say
rotation should be-- yeah.

00:25:54.500 --> 00:25:56.800
45 is a good default.
So you can see

00:25:56.800 --> 00:25:59.560
now, when I'm
dragging through, you

00:25:59.560 --> 00:26:05.090
can see we both rotate and
shift the x and y-coordinates.

00:26:05.090 --> 00:26:09.520
And the real power here is
when we start combining these.

00:26:09.520 --> 00:26:14.050
So here is a more
complicated animation demo.

00:26:14.050 --> 00:26:17.020
You can see here-- let me make
the time line a bit bigger.

00:26:17.020 --> 00:26:19.640
Here we have a number
of things happening.

00:26:19.640 --> 00:26:23.230
So at the beginning, we
have a number of widgets.

00:26:23.230 --> 00:26:25.780
At the end, you can see we
moved the motion layout.

00:26:25.780 --> 00:26:29.350
We've faded out the
Google Cast icon,

00:26:29.350 --> 00:26:30.910
and we made the header smaller.

00:26:30.910 --> 00:26:34.900
So you can see as I'm
pulling through we

00:26:34.900 --> 00:26:36.520
get pretty fancy effects.

00:26:36.520 --> 00:26:38.860
And this library
also lets you respond

00:26:38.860 --> 00:26:43.840
to touch events, which makes
it a lot easier to use.

00:26:43.840 --> 00:26:45.820
So that's Motion Layout.

00:26:45.820 --> 00:26:47.380
No promises on when
it will be done,

00:26:47.380 --> 00:26:49.660
but you know we're
very excited about this

00:26:49.660 --> 00:26:51.860
and working hard on it.

00:26:51.860 --> 00:26:53.700
So now, thank you.

00:26:59.380 --> 00:27:01.120
So now, if we switch
to the other demo

00:27:01.120 --> 00:27:04.210
machine for a second?

00:27:04.210 --> 00:27:06.880
All right, so what
you're looking at here

00:27:06.880 --> 00:27:11.050
is a Pixel Chromebook.

00:27:11.050 --> 00:27:13.060
And the really
exciting part for us

00:27:13.060 --> 00:27:16.030
is that if I click on
this button down here,

00:27:16.030 --> 00:27:19.110
you can see we have Android
Studio running on it.

00:27:19.110 --> 00:27:19.610
Yeah.

00:27:24.610 --> 00:27:27.970
So we have Layout Editor.

00:27:27.970 --> 00:27:32.472
We have Kotlin code, building
works, a lot of stuff works.

00:27:32.472 --> 00:27:34.430
But there's a couple of
things that don't work.

00:27:34.430 --> 00:27:37.210
So there's no ADB yet.

00:27:37.210 --> 00:27:39.740
So you can't run, deploy, debug.

00:27:39.740 --> 00:27:43.632
You know, some of you
don't need to debug.

00:27:43.632 --> 00:27:45.340
You can upload straight
to the Play Store

00:27:45.340 --> 00:27:47.950
and hope for the best.

00:27:47.950 --> 00:27:49.840
Anyway, so I think at
this point you still

00:27:49.840 --> 00:27:51.880
need to sort of tinker and be
very comfortable with Linux,

00:27:51.880 --> 00:27:53.820
but it's a very exciting
development I think.

00:27:53.820 --> 00:27:56.920
So you know, I look forward
to that getting done.

00:27:56.920 --> 00:28:00.033
And with that, I'm going
to turn it back to Jamal.

00:28:00.033 --> 00:28:00.779
JAMAL EASON: Yep.

00:28:00.779 --> 00:28:01.570
So that's exciting?

00:28:01.570 --> 00:28:02.565
Good work, right?

00:28:02.565 --> 00:28:03.190
Exciting stuff.

00:28:10.860 --> 00:28:13.550
All right, so Tor touched
upon all the visual changes

00:28:13.550 --> 00:28:15.140
we're making to Android Studio.

00:28:15.140 --> 00:28:16.520
I also want to spend
a little bit of time

00:28:16.520 --> 00:28:18.440
talking about some changes
to the build system

00:28:18.440 --> 00:28:21.180
that you might want to be aware
of inside of Android Studio

00:28:21.180 --> 00:28:22.952
3.2.

00:28:22.952 --> 00:28:24.410
Now, the biggest
change you've made

00:28:24.410 --> 00:28:27.230
is supporting the Android App
Bundle, which you heard about

00:28:27.230 --> 00:28:29.084
earlier this afternoon.

00:28:29.084 --> 00:28:31.250
Now, you saw in Tor's demo
we have a new little drop

00:28:31.250 --> 00:28:33.350
menu in the IDE where
you can create a bundle

00:28:33.350 --> 00:28:34.449
and sign a bundle.

00:28:34.449 --> 00:28:36.240
Now, if you want a
little bit more control,

00:28:36.240 --> 00:28:38.365
we actually added some
additional flags inside your

00:28:38.365 --> 00:28:39.800
build dot Gradle file.

00:28:39.800 --> 00:28:43.360
And so in this example you have
on the screen here, I have--

00:28:43.360 --> 00:28:43.860
slides?

00:28:43.860 --> 00:28:44.770
Do I have slides?

00:28:50.480 --> 00:28:51.040
Slides.

00:28:51.040 --> 00:28:52.020
Great, all right.

00:28:52.020 --> 00:28:54.170
All right, so for
example here, I've

00:28:54.170 --> 00:28:57.082
got a new bundle section in
your build dot Gradle file.

00:28:57.082 --> 00:28:58.540
And so for instance,
I have a split

00:28:58.540 --> 00:29:01.605
on density, screen
density, ABI, and language.

00:29:01.605 --> 00:29:02.980
So these are a
few flags that you

00:29:02.980 --> 00:29:05.350
can configure to have some
control of what's actually

00:29:05.350 --> 00:29:08.590
inside your bundle.

00:29:08.590 --> 00:29:11.110
All right, so next is
AndroidX refactoring.

00:29:11.110 --> 00:29:13.870
So Tor gave you an example of
how it works inside the IDE.

00:29:13.870 --> 00:29:16.453
And again, what happens from the
build system's perspective is

00:29:16.453 --> 00:29:18.710
that we will
convert your legacy,

00:29:18.710 --> 00:29:21.290
Maven dependencies, and convert
those to the new AndroidX

00:29:21.290 --> 00:29:22.060
namespace.

00:29:22.060 --> 00:29:25.464
We'll cache those and use
those for subsequent builds.

00:29:25.464 --> 00:29:27.505
Now, again, if you want
a little bit more control

00:29:27.505 --> 00:29:29.970
of what happens to
your Gradle properties,

00:29:29.970 --> 00:29:32.516
we have a few things we added
to your Gradle properties file.

00:29:32.516 --> 00:29:34.390
And so in this example,
I have the enable dot

00:29:34.390 --> 00:29:36.360
enable Jetifier set to true.

00:29:36.360 --> 00:29:38.279
This is actually the
default behavior.

00:29:38.279 --> 00:29:40.570
And again, what that does is
it takes your legacy Maven

00:29:40.570 --> 00:29:43.210
artifacts and converts
those to the new AndroidX

00:29:43.210 --> 00:29:45.797
namespace and caches
those for new builds.

00:29:45.797 --> 00:29:47.630
Now, let's say you have
a brand new project.

00:29:47.630 --> 00:29:50.005
Or perhaps you say, hey, look,
I have all my dependencies

00:29:50.005 --> 00:29:51.340
already converted to AndroidX.

00:29:51.340 --> 00:29:52.510
I don't need this step.

00:29:52.510 --> 00:29:53.968
So in that case,
you could actually

00:29:53.968 --> 00:29:56.260
change this flag to false,
and we can skip this step.

00:29:56.260 --> 00:29:57.330
And what that would
do is actually

00:29:57.330 --> 00:29:58.916
enable you to have
faster build speeds

00:29:58.916 --> 00:30:00.040
than working with AndroidX.

00:30:02.900 --> 00:30:05.810
All right, lastly,
D8 and R8-- so D8

00:30:05.810 --> 00:30:09.080
is our new default Dexer
inside of Android Studio.

00:30:09.080 --> 00:30:11.990
We actually launched D8 last
year in Android Studio 3.0.

00:30:11.990 --> 00:30:14.330
We've been iterating on that,
and now it's the default,

00:30:14.330 --> 00:30:16.450
and it's the
replacement for Dex.

00:30:16.450 --> 00:30:17.720
R8 is new.

00:30:17.720 --> 00:30:19.940
It is a new optimizer
and shrinker

00:30:19.940 --> 00:30:21.460
inside the builds toolchain.

00:30:21.460 --> 00:30:24.525
And it's a long term strategy
to replace Proguard with R8.

00:30:24.525 --> 00:30:26.150
So it might be exciting
for some folks.

00:30:31.360 --> 00:30:33.970
So again, to try it
out, all you have to do

00:30:33.970 --> 00:30:35.050
is go to your builder--

00:30:35.050 --> 00:30:37.090
sorry, your Gradle
properties file and go

00:30:37.090 --> 00:30:39.820
to enable R8, set to true.

00:30:39.820 --> 00:30:41.920
Again, this is
experimental, so we do not

00:30:41.920 --> 00:30:44.961
recommend you actually publish
out to the Play Store just yet.

00:30:44.961 --> 00:30:46.960
However, please give us
your feedback and let us

00:30:46.960 --> 00:30:48.520
know how it's working
for you, and we'll

00:30:48.520 --> 00:30:50.300
let you know when it becomes
stable inside of Android

00:30:50.300 --> 00:30:50.800
Studio.

00:30:53.650 --> 00:30:55.900
All right, so that was just
a few things to talk about

00:30:55.900 --> 00:30:57.270
in the Android build system.

00:30:57.270 --> 00:30:59.020
If you want an even
more in-depth session,

00:30:59.020 --> 00:31:00.520
we have a whole
session for tomorrow

00:31:00.520 --> 00:31:03.130
called What's new with
the Android built system,

00:31:03.130 --> 00:31:05.770
presented by Jerome and Xav.

00:31:05.770 --> 00:31:08.820
I would also check
out Best practices

00:31:08.820 --> 00:31:13.642
when using compilers in Android
Studio, presented by Jefferey.

00:31:13.642 --> 00:31:15.850
We have a few more classes
as well on Android Studio.

00:31:15.850 --> 00:31:19.894
We have one more called
Improve app performance

00:31:19.894 --> 00:31:22.060
with Android Studio profilers,
presented by Esteban.

00:31:22.060 --> 00:31:23.470
That's also this week.

00:31:23.470 --> 00:31:25.607
And lastly we have
a class on What's

00:31:25.607 --> 00:31:27.940
new with Constraint Layout
and the Android Studio design

00:31:27.940 --> 00:31:30.523
tools, presented by Nicolas and
the Android Studio Engineering

00:31:30.523 --> 00:31:34.096
Design Tools team.

00:31:34.096 --> 00:31:35.470
All right, so
before we conclude,

00:31:35.470 --> 00:31:36.970
I want to talk about
one last topic.

00:31:36.970 --> 00:31:39.360
It's about feedback
for Android Studio.

00:31:39.360 --> 00:31:41.390
As many of you know, we
release Android Studio

00:31:41.390 --> 00:31:44.880
on a series of release channels
ranging from Canary, Beta,

00:31:44.880 --> 00:31:46.320
and Stable.

00:31:46.320 --> 00:31:48.480
Now, Canary is our bleeding
edge release channel

00:31:48.480 --> 00:31:51.030
where we have most
of the new work,

00:31:51.030 --> 00:31:53.280
but a little bit of testing
before it goes out to you.

00:31:53.280 --> 00:31:54.655
And then at the
other end we have

00:31:54.655 --> 00:31:57.240
stable, which receives the most
amount of feedback and testing

00:31:57.240 --> 00:31:59.394
on our end before
it goes out to you.

00:31:59.394 --> 00:32:01.560
Now, you may say, hey, look,
I can't rely on Canary.

00:32:01.560 --> 00:32:03.840
I need to tab my
production curve on Stable.

00:32:03.840 --> 00:32:05.340
If you didn't know,
you can actually

00:32:05.340 --> 00:32:09.240
run Canary and Stable at the
same time in your app project.

00:32:09.240 --> 00:32:11.310
Now, I want to highlight
one important detail.

00:32:11.310 --> 00:32:12.309
It's about feedback.

00:32:12.309 --> 00:32:14.850
So the thing is the earlier we
receive feedback on the Canary

00:32:14.850 --> 00:32:17.816
channel, the higher chance there
is actually for us to fix it.

00:32:17.816 --> 00:32:20.190
So the thing is once we reach
stable with Android Studio,

00:32:20.190 --> 00:32:21.940
it's almost too late
for us to fix things.

00:32:21.940 --> 00:32:24.640
We're only going to fix
very, very critical issues.

00:32:24.640 --> 00:32:27.180
Honestly, even if you wait
until the very end of the Betas,

00:32:27.180 --> 00:32:29.010
that's almost too late as well.

00:32:29.010 --> 00:32:31.650
So we really encourage
you to download

00:32:31.650 --> 00:32:33.510
Android Studio on
the Canary channel

00:32:33.510 --> 00:32:37.650
and give feedback
sooner than later.

00:32:37.650 --> 00:32:39.270
All right, to recap--

00:32:39.270 --> 00:32:41.280
Android Studio has a
range of cool features

00:32:41.280 --> 00:32:43.920
across multiple flows
and development flow.

00:32:43.920 --> 00:32:45.900
From onboarding with
Android Jetpack,

00:32:45.900 --> 00:32:47.850
building your first
Android App Bundle,

00:32:47.850 --> 00:32:50.160
testing emulator snapshots,
and understanding

00:32:50.160 --> 00:32:55.156
the battery impact of your app
with the new Energy Profiler.

00:32:55.156 --> 00:32:57.030
In our course today, we
gave you a sneak peek

00:32:57.030 --> 00:32:59.880
of the new mushed editor,
and some cool tools

00:32:59.880 --> 00:33:03.410
around AR development, and
also some cool demos of promo

00:33:03.410 --> 00:33:05.590
as support for Android Studio.

00:33:05.590 --> 00:33:07.590
We hope you enjoy this
version of Android Studio

00:33:07.590 --> 00:33:09.600
as much as we do.

00:33:09.600 --> 00:33:12.100
All right, we want a little bit
of feedback on this session,

00:33:12.100 --> 00:33:15.252
so please go to
Google.com/IOschedule to give

00:33:15.252 --> 00:33:15.960
us some feedback.

00:33:18.570 --> 00:33:19.590
All right, that's it.

00:33:19.590 --> 00:33:21.120
Again, I'm Jamal,
and this is Tor.

00:33:21.120 --> 00:33:22.995
Thank you for attending
our session on what's

00:33:22.995 --> 00:33:25.575
new in Android Studio.

00:33:25.575 --> 00:33:30.260
[MUSIC PLAYING]

