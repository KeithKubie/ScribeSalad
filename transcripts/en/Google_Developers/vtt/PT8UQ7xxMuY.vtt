WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:01.090
ANKUR KOTWAL: Hi.

00:00:01.090 --> 00:00:02.940
Welcome to this
series on Geocasts,

00:00:02.940 --> 00:00:05.160
where you can walk your
way through what you

00:00:05.160 --> 00:00:07.185
can do with Google Maps APIs.

00:00:07.185 --> 00:00:10.508
[MUSIC PLAYING]

00:00:15.000 --> 00:00:18.060
In part one, we saw how you
could delegate your mapping

00:00:18.060 --> 00:00:20.040
work to the Google Maps app.

00:00:20.040 --> 00:00:22.800
In part two, we saw how
you could go further

00:00:22.800 --> 00:00:24.870
by incorporating Google
Maps functionality

00:00:24.870 --> 00:00:26.650
right into your app.

00:00:26.650 --> 00:00:28.170
And then in part
three, we looked

00:00:28.170 --> 00:00:31.410
at integrating Maps, and some
of the smarts behind Maps,

00:00:31.410 --> 00:00:32.940
into your apps.

00:00:32.940 --> 00:00:35.700
In this video, we'll
go deeper still,

00:00:35.700 --> 00:00:38.820
and we'll talk about getting
raw data from Google so you can

00:00:38.820 --> 00:00:41.550
orchestrate it in your apps.

00:00:41.550 --> 00:00:44.290
Let's start with
the Directions API.

00:00:44.290 --> 00:00:46.290
This is a web
service that provides

00:00:46.290 --> 00:00:49.800
smart content about
directions and times,

00:00:49.800 --> 00:00:52.620
including predictive
travel times.

00:00:52.620 --> 00:00:54.990
We can forecast what
traffic conditions

00:00:54.990 --> 00:00:58.810
are likely to be based
on historic data.

00:00:58.810 --> 00:01:01.380
Now, directions aren't
just for driving.

00:01:01.380 --> 00:01:03.360
The web service
provides walking,

00:01:03.360 --> 00:01:07.440
biking, and public
transport directions, too.

00:01:07.440 --> 00:01:11.110
You can get all this
information in JSON or XML,

00:01:11.110 --> 00:01:13.620
parse it, and use it.

00:01:13.620 --> 00:01:16.620
The Places API you saw
in an earlier video

00:01:16.620 --> 00:01:18.820
also has a web service.

00:01:18.820 --> 00:01:21.420
So you can query to
get lots of information

00:01:21.420 --> 00:01:24.160
about a particular place.

00:01:24.160 --> 00:01:29.100
So here you can see me searching
for Moscone in San Francisco,

00:01:29.100 --> 00:01:32.930
and then finding a number of
places that match that name.

00:01:32.930 --> 00:01:36.180
And, for example, if I look
for restaurants in Sydney,

00:01:36.180 --> 00:01:39.150
I'll get a payload like
this, with great information

00:01:39.150 --> 00:01:41.040
about these places.

00:01:41.040 --> 00:01:43.830
Now, as people, we don't
think of locations in terms

00:01:43.830 --> 00:01:45.600
of latitude and longitude.

00:01:45.600 --> 00:01:49.080
We rarely even think of
a location by address.

00:01:49.080 --> 00:01:52.740
We like to think of locations by
name, such as, my house, where

00:01:52.740 --> 00:01:56.190
I work, my favorite
restaurant by name.

00:01:56.190 --> 00:02:00.790
The Places API helps us find
places based on their names.

00:02:00.790 --> 00:02:03.900
And once we have that place, we
can get some excellent metadata

00:02:03.900 --> 00:02:05.430
about it.

00:02:05.430 --> 00:02:08.610
You can use these tools to
provide that user friendliness

00:02:08.610 --> 00:02:10.660
to your users.

00:02:10.660 --> 00:02:15.570
We also have native Places
API calls for Android and iOS.

00:02:15.570 --> 00:02:18.000
And with these, you
can incorporate them

00:02:18.000 --> 00:02:22.170
into real world
places into your apps.

00:02:22.170 --> 00:02:25.020
Based on the readings about
your device's location,

00:02:25.020 --> 00:02:27.540
for example, latitude,
longitude, or Bluetooth

00:02:27.540 --> 00:02:31.740
beacons, the Places API
can figure out real places

00:02:31.740 --> 00:02:34.740
that you are likely
in as a result.

00:02:34.740 --> 00:02:37.340
So instead of being
at a lat/long,

00:02:37.340 --> 00:02:40.440
your users can know that they
are at a particular real world

00:02:40.440 --> 00:02:42.990
place, like a coffee shop.

00:02:42.990 --> 00:02:46.590
It calculates a likelihood
for a particular location

00:02:46.590 --> 00:02:48.930
based on a variety
of factors, including

00:02:48.930 --> 00:02:51.720
things like opening hours.

00:02:51.720 --> 00:02:54.210
I now want to talk
about the Roads API.

00:02:54.210 --> 00:02:58.860
And it's used for when you
use your GPS on your phone.

00:02:58.860 --> 00:03:03.000
Often, that signal can be
quite noisy, the GPS location.

00:03:03.000 --> 00:03:05.880
And with this API, we
can snap the locations

00:03:05.880 --> 00:03:10.290
that our phone gives us to
actual roads in the real world.

00:03:10.290 --> 00:03:14.070
This can also make for a
really nice user experience.

00:03:14.070 --> 00:03:17.790
So these are a few examples
of some of the web services

00:03:17.790 --> 00:03:19.780
that are available.

00:03:19.780 --> 00:03:23.520
We also provide Libraries
for these web services

00:03:23.520 --> 00:03:25.980
for lots of popular languages.

00:03:25.980 --> 00:03:29.130
Now, do note that these
Libraries are designed

00:03:29.130 --> 00:03:31.140
to be consumed server-side.

00:03:31.140 --> 00:03:34.170
They're protected
by API keys, so you

00:03:34.170 --> 00:03:37.290
should consider running
this code on your server

00:03:37.290 --> 00:03:39.510
and then talking to your
server with your app

00:03:39.510 --> 00:03:42.270
rather than having those
Libraries run locally

00:03:42.270 --> 00:03:45.030
in your apps on
the mobile device.

00:03:45.030 --> 00:03:46.140
So that's it.

00:03:46.140 --> 00:03:48.310
I can't wait to
see what you build.

00:03:48.310 --> 00:03:51.000
And if you have any questions,
please reach out on Twitter

00:03:51.000 --> 00:03:52.250
or Google .

00:03:52.250 --> 00:03:53.670
Thanks for watching.

00:03:53.670 --> 00:03:57.020
[MUSIC PLAYING]

