WEBVTT
Kind: captions
Language: en

00:00:06.874 --> 00:00:08.480
MIHAI IONESCU: Hi there.

00:00:08.480 --> 00:00:09.910
My name is Mihai Ionescu.

00:00:09.910 --> 00:00:13.300
And I'm a Developer Advocate
at Google, working on the

00:00:13.300 --> 00:00:14.820
Google Wallet team.

00:00:14.820 --> 00:00:19.500
Today, I'll cover two APIs, the
Digital Goods API and the

00:00:19.500 --> 00:00:20.300
Instant Buy API.

00:00:20.300 --> 00:00:23.740
And we'll look at various ways
to integrate them into your

00:00:23.740 --> 00:00:27.740
applications or online store.

00:00:27.740 --> 00:00:29.860
First, what is use
Google Wallet?

00:00:29.860 --> 00:00:34.770
Conceptually, Google Wallet is
an effort to digitize all the

00:00:34.770 --> 00:00:37.770
physical information available
in your wallet, stuff like

00:00:37.770 --> 00:00:41.520
credit cards, coupons,
loyalty cards--

00:00:41.520 --> 00:00:45.220
it could even be movie tickets,
airline tickets--

00:00:45.220 --> 00:00:48.630
and take all that information
in digital form and put it

00:00:48.630 --> 00:00:49.940
into the cloud.

00:00:49.940 --> 00:00:52.690
The benefit of having it into
the cloud is that it will be

00:00:52.690 --> 00:00:55.210
available anywhere,
on any device.

00:00:55.210 --> 00:00:58.130
So that is a very powerful
concept.

00:00:58.130 --> 00:01:04.069
Once a customer has access to
that information, anywhere and

00:01:04.069 --> 00:01:07.870
on any device, then the online
purchasing experience, for

00:01:07.870 --> 00:01:10.480
example, can be dramatically
improved.

00:01:10.480 --> 00:01:13.590
And with an improved experience,
you will see a

00:01:13.590 --> 00:01:17.160
dramatic rise in conversion
rates and sales.

00:01:17.160 --> 00:01:20.330
So that is all great news for
merchants and developers.

00:01:20.330 --> 00:01:22.770
Who doesn't want to
make more money?

00:01:22.770 --> 00:01:27.410
And that is where the two Google
Wallet APIs I'm going

00:01:27.410 --> 00:01:30.190
to talk about are focusing.

00:01:30.190 --> 00:01:32.230
So let's start with the
Digital Goods API.

00:01:32.230 --> 00:01:35.330
The Digital Goods API is
the simpler of the two.

00:01:35.330 --> 00:01:38.740
But a lot of the principles
and concepts

00:01:38.740 --> 00:01:40.630
apply to both of them.

00:01:40.630 --> 00:01:43.850
So I'll make sure, if there's
something completely

00:01:43.850 --> 00:01:46.530
different, I will
point it out.

00:01:46.530 --> 00:01:48.360
So what is the Digital
Goods API?

00:01:48.360 --> 00:01:53.190
Well, it's a buy flow that is
optimized for digital content.

00:01:53.190 --> 00:01:58.880
And that means that you won't
have to worry about

00:01:58.880 --> 00:02:04.750
implementing your own buy flow
with the risk engine or having

00:02:04.750 --> 00:02:06.710
PCI compliance.

00:02:06.710 --> 00:02:12.490
The entire API should be very
simple to integrate and let

00:02:12.490 --> 00:02:16.570
you focus on your core
competency in developing your

00:02:16.570 --> 00:02:20.410
game or your online store.

00:02:20.410 --> 00:02:23.780
So I pointed out some of the
principles behind our APIs.

00:02:23.780 --> 00:02:26.190
And I want to emphasize
them now.

00:02:26.190 --> 00:02:30.220
One of them is to build
a very streamlined

00:02:30.220 --> 00:02:34.200
experience for the customer.

00:02:34.200 --> 00:02:39.840
And we've noticed that, the more
you optimize the number

00:02:39.840 --> 00:02:43.290
of clicks and you reduce the
number of clicks, the higher

00:02:43.290 --> 00:02:45.280
the conversion rates are.

00:02:45.280 --> 00:02:49.850
People will tend to finish a
purchase, if you make it

00:02:49.850 --> 00:02:52.830
simple for them, if you don't
take them to different

00:02:52.830 --> 00:02:57.170
websites and make them click
a lot of buttons.

00:02:57.170 --> 00:03:01.570
So both the Digital Goods API
and the Instant Buy API are

00:03:01.570 --> 00:03:02.740
following these principles.

00:03:02.740 --> 00:03:07.370
And they are trying to keep the
customer engaged, either

00:03:07.370 --> 00:03:10.530
in the game or stay on your
store and complete the

00:03:10.530 --> 00:03:14.760
transaction in as few
steps as possible.

00:03:14.760 --> 00:03:18.840
One of the second principles
was to make it dead simple.

00:03:18.840 --> 00:03:25.150
The integration should be as
easy as adapting, copy-pasting

00:03:25.150 --> 00:03:29.390
one of our samples and making
just a few modifications on

00:03:29.390 --> 00:03:33.380
your site and being ready
to place a transaction.

00:03:33.380 --> 00:03:39.750
And here I have a very simple
snippet from the Digital Goods

00:03:39.750 --> 00:03:45.360
API, which is not
that different

00:03:45.360 --> 00:03:47.140
than a final version.

00:03:47.140 --> 00:03:50.930
You could literally use some
of the snippets in this

00:03:50.930 --> 00:03:54.890
presentation later on and
have a functional,

00:03:54.890 --> 00:03:56.685
working payment system.

00:03:59.250 --> 00:04:03.560
Another important principle
was to keep it affordable.

00:04:03.560 --> 00:04:08.490
And in the Digital Goods API,
the pricing structure is one

00:04:08.490 --> 00:04:11.250
of the most aggressive
in the industry, with

00:04:11.250 --> 00:04:13.210
fees as low as 1.9%.

00:04:15.710 --> 00:04:17.839
The Instant Buy API,
on the other hand,

00:04:17.839 --> 00:04:18.930
is absolutely free.

00:04:18.930 --> 00:04:23.220
And you will see why,
later in the talk.

00:04:23.220 --> 00:04:26.160
Let's have a quick look at
the Instant Buy API.

00:04:26.160 --> 00:04:30.040
So why is it different than
the Digital Goods API?

00:04:30.040 --> 00:04:34.550
Well, it offers you more control
over the buy flow.

00:04:34.550 --> 00:04:38.500
The Digital Goods API has the
simplest buy flow possible.

00:04:38.500 --> 00:04:41.070
All you had to do was add
the Buy with Google

00:04:41.070 --> 00:04:42.440
button to your page.

00:04:42.440 --> 00:04:45.370
And once the customer clicked
on the button, you knew you

00:04:45.370 --> 00:04:46.880
would get your money.

00:04:46.880 --> 00:04:50.030
There was nothing else for you
to do it than acknowledge that

00:04:50.030 --> 00:04:52.660
you received the money.

00:04:52.660 --> 00:04:55.460
The Instant Buy API goes
a step further.

00:04:55.460 --> 00:05:01.900
And for merchants who have
a more complex in-house

00:05:01.900 --> 00:05:07.360
inventory management system or
purchasing system, allows them

00:05:07.360 --> 00:05:12.040
to use their own payment
processors.

00:05:12.040 --> 00:05:15.910
So it will provide you with a
virtual one-time card, with a

00:05:15.910 --> 00:05:18.250
proxy card that can
be used only for

00:05:18.250 --> 00:05:20.100
that particular purchase.

00:05:20.100 --> 00:05:25.810
And then, you will charge the
card and do all the necessary

00:05:25.810 --> 00:05:31.450
post-transaction processings
in-house, thus giving you more

00:05:31.450 --> 00:05:37.330
control over managing your
entire post-processing system.

00:05:37.330 --> 00:05:41.160
Similarly, as the Digital
Goods API, we strive to

00:05:41.160 --> 00:05:45.330
provide a very streamlined
customer experience.

00:05:45.330 --> 00:05:47.710
So the buy flow should
be frictionless.

00:05:47.710 --> 00:05:51.360
And in this case, it's
just two clicks

00:05:51.360 --> 00:05:53.036
to complete an order.

00:05:53.036 --> 00:05:55.090
Put the item in your
shopping cart, then

00:05:55.090 --> 00:05:58.040
select to buy with Google.

00:05:58.040 --> 00:05:59.680
Then you would confirm
the order.

00:05:59.680 --> 00:06:04.310
And we provide the merchant with
shipping information and

00:06:04.310 --> 00:06:07.220
the virtual card information.

00:06:07.220 --> 00:06:10.880
And then, with an extra click,
you complete the order.

00:06:10.880 --> 00:06:13.800
Now, let's look at how we
integrate the Digital Goods

00:06:13.800 --> 00:06:16.530
API and the Instant Buy API.

00:06:16.530 --> 00:06:18.970
And let's start with the Digital
Goods API, the simpler

00:06:18.970 --> 00:06:20.220
of the two.

00:06:24.020 --> 00:06:28.800
An important concept that is
applicable to both APIs is the

00:06:28.800 --> 00:06:33.170
JSON Web Token, short
form of JWT.

00:06:33.170 --> 00:06:36.160
Or it's pronounced jot.

00:06:36.160 --> 00:06:37.560
And what is a JWT?

00:06:37.560 --> 00:06:40.990
It's a compact representation
of a message.

00:06:40.990 --> 00:06:44.480
It's a very nice way to
communicate between your

00:06:44.480 --> 00:06:48.120
application and Google server
and transfer payment

00:06:48.120 --> 00:06:50.510
information back and forth.

00:06:50.510 --> 00:06:53.260
And how does JSON Web
Token look like?

00:06:53.260 --> 00:06:58.540
Well, it starts with a JSON data
structure, like we see

00:06:58.540 --> 00:07:00.370
here on the left side.

00:07:00.370 --> 00:07:09.460
And then, URL encodes it and
cryptographically signs the

00:07:09.460 --> 00:07:10.900
JSON structure.

00:07:10.900 --> 00:07:16.110
And you end up with a string
of weird looking

00:07:16.110 --> 00:07:18.150
characters, like here.

00:07:18.150 --> 00:07:25.850
But conceptually, the JWT is
composed of a Header, the

00:07:25.850 --> 00:07:29.390
Content that we see here,
and the Signature.

00:07:29.390 --> 00:07:35.810
And the Signature, you use it
along the way, to verify that

00:07:35.810 --> 00:07:40.110
the information you receive
matches the origin.

00:07:40.110 --> 00:07:43.610
So only you know the secret
that you use to

00:07:43.610 --> 00:07:47.820
sign the JSON content.

00:07:47.820 --> 00:07:50.900
And then, at the origin, you
verify that it has not been

00:07:50.900 --> 00:07:52.150
tampered with along the way.

00:07:55.300 --> 00:08:01.300
I can show you briefly
one of our tools on

00:08:01.300 --> 00:08:02.870
our Developers site.

00:08:02.870 --> 00:08:05.430
We have a JWT decoder.

00:08:05.430 --> 00:08:11.910
You can use it to decode any
kind of JWT, value JWT.

00:08:11.910 --> 00:08:13.850
I have some random JWT here.

00:08:13.850 --> 00:08:18.420
If you click on the Decode
button, you will see that it

00:08:18.420 --> 00:08:20.370
nicely shows you
the Header, the

00:08:20.370 --> 00:08:22.530
Content, and the Signature.

00:08:22.530 --> 00:08:24.850
The Header contains just some
information about the

00:08:24.850 --> 00:08:27.260
algorithm used to encode it.

00:08:27.260 --> 00:08:30.540
And then the Content
of the claims is

00:08:30.540 --> 00:08:34.830
the usual JSON structure.

00:08:34.830 --> 00:08:39.679
And then, the Signature is what
you will later use to

00:08:39.679 --> 00:08:44.570
verify that your JWT
has been signed

00:08:44.570 --> 00:08:47.950
with the correct secret.

00:08:47.950 --> 00:08:49.710
We'll come back to
this one later.

00:08:49.710 --> 00:08:55.140
Let's see how a single order JWT
looks like, for a Digital

00:08:55.140 --> 00:08:56.920
Goods order.

00:08:56.920 --> 00:09:00.540
So in this example, you see a
very nice JSON with a lot of

00:09:00.540 --> 00:09:07.860
field stuff, like who is the
merchant, the type of payment.

00:09:07.860 --> 00:09:09.840
In this case, it's just
a single item

00:09:09.840 --> 00:09:12.330
that you will sell.

00:09:12.330 --> 00:09:18.250
We have fields, such as issue
at and an expiring time for

00:09:18.250 --> 00:09:26.420
the JWT and then a request
structure with all the item

00:09:26.420 --> 00:09:28.070
information-- in this
case, name,

00:09:28.070 --> 00:09:31.300
description, price, and currency.

00:09:31.300 --> 00:09:35.310
The API is available in 18
countries and in nine

00:09:35.310 --> 00:09:37.150
currencies.

00:09:37.150 --> 00:09:40.920
So this field, the currency
code could be

00:09:40.920 --> 00:09:44.540
anything other than USD.

00:09:44.540 --> 00:09:47.930
And we've got an extra field
here of seller data, which is

00:09:47.930 --> 00:09:49.610
quite important.

00:09:49.610 --> 00:09:54.850
You can place, in this field,
any information, any merchant

00:09:54.850 --> 00:09:58.880
information that you could
later use to identify the

00:09:58.880 --> 00:10:02.850
transaction, either a user
ID or a time stamp.

00:10:02.850 --> 00:10:06.610
And all this information will be
later mirrored back to you,

00:10:06.610 --> 00:10:07.980
when the transaction is over.

00:10:07.980 --> 00:10:12.710
So you know exactly what
happened when the transaction

00:10:12.710 --> 00:10:16.070
was placed, under what
circumstances.

00:10:16.070 --> 00:10:20.450
So all of this JSON information,
as you see it

00:10:20.450 --> 00:10:23.990
here, we'll pass it to
an encode function.

00:10:23.990 --> 00:10:27.540
There are a lot of JWT libraries
out there, that can

00:10:27.540 --> 00:10:32.300
encode and decode
JSON Web Tokens.

00:10:32.300 --> 00:10:35.750
And we'll sign it with
a Seller Secret.

00:10:35.750 --> 00:10:38.740
You will get a Seller Secret
when you sign up for a

00:10:38.740 --> 00:10:40.620
merchant account.

00:10:40.620 --> 00:10:47.790
And keep that Seller Secret in
a safe place, literally on

00:10:47.790 --> 00:10:55.030
your server, because it's used
to verify that the information

00:10:55.030 --> 00:10:55.610
is correct.

00:10:55.610 --> 00:10:59.820
And you don't want someone
else to tamper with your

00:10:59.820 --> 00:11:03.270
transaction data.

00:11:03.270 --> 00:11:06.010
Let's have a look at another
type of JWT.

00:11:06.010 --> 00:11:09.790
In this case, it's a
subscription JWT.

00:11:09.790 --> 00:11:13.150
And I've highlighted some of the
fields that are different.

00:11:13.150 --> 00:11:18.650
It's a little bit bigger but
not that much bigger.

00:11:18.650 --> 00:11:23.270
So what changed was the type
of transaction in the JWT.

00:11:23.270 --> 00:11:28.530
And then we added an extra
structure called Recurrence,

00:11:28.530 --> 00:11:34.420
which specifies how often the
subscription should look recur

00:11:34.420 --> 00:11:36.430
and at what price.

00:11:36.430 --> 00:11:41.750
So you see in the JSON structure
is maintained.

00:11:41.750 --> 00:11:46.840
And the encoding takes place.

00:11:46.840 --> 00:11:50.930
There's the same strategy
to encode the JSON.

00:11:50.930 --> 00:11:53.100
As I mentioned earlier,
you could literally

00:11:53.100 --> 00:11:55.130
copy-paste this code.

00:11:55.130 --> 00:11:58.650
And with very few modifications,
you'll be able

00:11:58.650 --> 00:12:02.540
to have a working
digital payment

00:12:02.540 --> 00:12:03.630
system on your website.

00:12:03.630 --> 00:12:06.310
It's that simple.

00:12:06.310 --> 00:12:12.680
So once you have created the
JWTs and encoded them on your

00:12:12.680 --> 00:12:16.980
server, then you're
ready to send the

00:12:16.980 --> 00:12:18.680
transaction to Google.

00:12:18.680 --> 00:12:21.530
And that is one of the simplest
ways I've ever seen

00:12:21.530 --> 00:12:27.240
to send transaction
information over.

00:12:27.240 --> 00:12:30.780
So this API is basically
just one function call.

00:12:30.780 --> 00:12:33.580
It doesn't get any simpler
than that.

00:12:33.580 --> 00:12:35.180
And the function call is
google.payments.inapp.buy.

00:12:38.230 --> 00:12:43.070
And to this function, you will
pass your generated JWT that

00:12:43.070 --> 00:12:44.780
we've seen earlier.

00:12:44.780 --> 00:12:49.400
And two handlers, one for
success, one for failure, that

00:12:49.400 --> 00:12:54.220
will be called on your client
when the transaction is over.

00:12:54.220 --> 00:13:00.660
And you link this handler
with a button.

00:13:00.660 --> 00:13:05.010
Once the button is pressed,
then the transaction

00:13:05.010 --> 00:13:09.010
information would be sent
over to Google.

00:13:09.010 --> 00:13:12.110
And let's have a look
at how this would

00:13:12.110 --> 00:13:15.500
actually work in practice.

00:13:15.500 --> 00:13:23.360
So first, on our Developers
site, we have a nice demo, a

00:13:23.360 --> 00:13:28.140
nice way for you to play with
various JSON Web Tokens.

00:13:28.140 --> 00:13:30.030
In this form here,
it's editable.

00:13:30.030 --> 00:13:32.500
And let's say we want
to change the item

00:13:32.500 --> 00:13:35.550
price to $30 from $20.

00:13:35.550 --> 00:13:38.610
And if you click on Generate,
you will notice that, on the

00:13:38.610 --> 00:13:41.400
right side, the JSON here
will change slightly.

00:13:44.260 --> 00:13:45.490
See, it changed.

00:13:45.490 --> 00:13:50.300
Something changed here because
we have a different field now.

00:13:50.300 --> 00:13:54.920
So this is literally the entire
code that you could

00:13:54.920 --> 00:14:02.100
copy-paste and put on your
website, to add a Buy with

00:14:02.100 --> 00:14:04.590
Google Digital Goods button.

00:14:04.590 --> 00:14:06.550
And the button is here.

00:14:06.550 --> 00:14:11.250
And it calls this function
here, which in turn calls

00:14:11.250 --> 00:14:15.790
payments.inapp.buy and passes
it the JSON Web

00:14:15.790 --> 00:14:19.550
Token and two handlers.

00:14:19.550 --> 00:14:24.150
So let's try this in practice,
so a simple code like this in

00:14:24.150 --> 00:14:26.580
a very simple web page.

00:14:26.580 --> 00:14:32.240
So on our Developers site, we
also have a nice list of

00:14:32.240 --> 00:14:37.280
samples that you could use as
a starting point for your

00:14:37.280 --> 00:14:38.980
implementation.

00:14:38.980 --> 00:14:41.290
And let's try a purchase
that is a very

00:14:41.290 --> 00:14:43.660
simple digital purchase.

00:14:43.660 --> 00:14:46.920
I click the Buy button.

00:14:46.920 --> 00:14:48.690
And the dialogue shows up.

00:14:48.690 --> 00:14:53.370
I can change my payment
information if I want to.

00:14:53.370 --> 00:14:56.035
But generally, everything
is all set up.

00:14:56.035 --> 00:14:58.420
I can just click Buy.

00:14:58.420 --> 00:15:04.140
My JSON, my encoded JWT
now goes to Google.

00:15:04.140 --> 00:15:08.470
Google processes the transaction
and sends back a

00:15:08.470 --> 00:15:09.240
confirmation.

00:15:09.240 --> 00:15:12.500
So my entire transaction
is now complete.

00:15:12.500 --> 00:15:15.240
Is there anything left to do?

00:15:15.240 --> 00:15:16.620
Well, yes.

00:15:19.920 --> 00:15:22.690
You have success and failure
handlers here

00:15:22.690 --> 00:15:24.210
on the client side.

00:15:24.210 --> 00:15:27.840
But generally, they are not
enough to ensure that the

00:15:27.840 --> 00:15:31.410
transaction is secure, because
anyone with a debugger, such

00:15:31.410 --> 00:15:37.750
as Firefox or Chrome Developer
Tools, can issue a success

00:15:37.750 --> 00:15:42.430
code and try to get your
digital item for free.

00:15:42.430 --> 00:15:46.010
So because of that, there is
another way to make sure that

00:15:46.010 --> 00:15:47.650
a transaction is secure.

00:15:47.650 --> 00:15:50.860
And that is to acknowledge the
purchase notification on the

00:15:50.860 --> 00:15:52.450
server site.

00:15:52.450 --> 00:15:56.750
And that is done through a
callback that Google sends you

00:15:56.750 --> 00:15:58.890
after the transaction is over.

00:15:58.890 --> 00:16:02.570
So on you server, where you
prepare your JSON, you can

00:16:02.570 --> 00:16:10.390
also set up a Post Back Handler
that will receive the

00:16:10.390 --> 00:16:12.080
transaction notification
from Google.

00:16:12.080 --> 00:16:14.500
And here I have an example.

00:16:14.500 --> 00:16:23.250
It is Python, but you can
adapt it to Java or PHP.

00:16:23.250 --> 00:16:26.930
And it shows how simple it
is to acknowledge the

00:16:26.930 --> 00:16:30.480
notification from Google.

00:16:30.480 --> 00:16:32.690
The notification comes
back as a post.

00:16:32.690 --> 00:16:36.000
And it will be another JWT.

00:16:36.000 --> 00:16:39.280
You will decoded it with your
Seller Secret and make sure

00:16:39.280 --> 00:16:41.120
everything looks OK.

00:16:41.120 --> 00:16:44.200
And as I mentioned earlier,
it'll be the original

00:16:44.200 --> 00:16:50.020
transaction JWT plus
an Order ID.

00:16:50.020 --> 00:16:53.160
You will look at the JWT,
make sure it's correct.

00:16:53.160 --> 00:16:54.610
You will get the Order ID.

00:16:54.610 --> 00:16:59.010
And you will have to respond
back to Google with the Order

00:16:59.010 --> 00:17:01.140
ID to complete the payment.

00:17:01.140 --> 00:17:04.420
You will have 10 seconds to do
that, which is more than

00:17:04.420 --> 00:17:09.119
enough, in the vast
majority of cases.

00:17:09.119 --> 00:17:12.630
And once you respond with the
Order ID, the transaction will

00:17:12.630 --> 00:17:13.609
be complete.

00:17:13.609 --> 00:17:17.310
And then, Google will call
your client handlers.

00:17:17.310 --> 00:17:20.530
And in that case, you
know that the

00:17:20.530 --> 00:17:21.750
transaction is secure.

00:17:21.750 --> 00:17:22.920
You have the money.

00:17:22.920 --> 00:17:26.940
And you can give the item
to the customer.

00:17:26.940 --> 00:17:33.640
So it is always recommended
that you use both types of

00:17:33.640 --> 00:17:35.780
handlers, the Server Site
Handler and the Client

00:17:35.780 --> 00:17:40.810
Handler, to conform the
transaction and update your

00:17:40.810 --> 00:17:46.570
internal game or application
state.

00:17:46.570 --> 00:17:50.290
And that's it, a very
simple to use API.

00:17:50.290 --> 00:17:53.910
It took me probably less than
10 minutes to explain it.

00:17:53.910 --> 00:17:55.970
You can copy-paste the
code from the slides.

00:17:55.970 --> 00:18:00.420
But the best is if you go on our
Developers site and look

00:18:00.420 --> 00:18:01.840
at the Samples page.

00:18:01.840 --> 00:18:04.980
We have examples in
Java and Python.

00:18:04.980 --> 00:18:08.720
And you can take them and very
easily adapt them to your

00:18:08.720 --> 00:18:09.970
special case.

00:18:13.590 --> 00:18:19.340
Now, let's have a look at a
slightly more complicated API.

00:18:19.340 --> 00:18:21.482
And that is the Instant
Buy API.

00:18:24.860 --> 00:18:30.680
So first, I want to go over a
very important concept here.

00:18:30.680 --> 00:18:37.010
The Instant Buy API allows you
to use your existing payment

00:18:37.010 --> 00:18:39.940
processor to complete
a transaction.

00:18:39.940 --> 00:18:43.130
So the buy flow is slightly
different.

00:18:43.130 --> 00:18:45.790
It's not an end-to-end buy flow,
like the Digital Goods

00:18:45.790 --> 00:18:49.120
API, where everything
was done by Google.

00:18:49.120 --> 00:18:53.810
In this case, you will initiate
the buy flow using

00:18:53.810 --> 00:18:55.050
the customer's wallet.

00:18:55.050 --> 00:19:01.840
But you will end up processing
the transaction yourself.

00:19:01.840 --> 00:19:04.340
This is done using
a proxy card.

00:19:04.340 --> 00:19:08.690
It is a one-time, virtual card,
a MasterCard branded

00:19:08.690 --> 00:19:11.990
card, that Google
will send you.

00:19:11.990 --> 00:19:14.740
And you can charge this only
for this particular

00:19:14.740 --> 00:19:17.270
transaction.

00:19:17.270 --> 00:19:22.570
So in order to get that one-time
card, you have to go

00:19:22.570 --> 00:19:24.900
through several steps.

00:19:24.900 --> 00:19:31.240
And the first step is to get
what we call a Masked Wallet.

00:19:31.240 --> 00:19:36.300
A Masked Wallet contains masked
payment credentials

00:19:36.300 --> 00:19:39.070
that you can use in
your application.

00:19:39.070 --> 00:19:44.110
And that is a masked credit card
number or partial credit

00:19:44.110 --> 00:19:48.310
card number that you can display
to the customer and

00:19:48.310 --> 00:19:51.200
shipping information.

00:19:51.200 --> 00:19:54.180
You can use the shipping
information to compute tax and

00:19:54.180 --> 00:19:55.610
shipping costs.

00:19:55.610 --> 00:20:00.110
And the masked payment
information can be used by the

00:20:00.110 --> 00:20:05.690
customer to select which card,
which payment instrument, they

00:20:05.690 --> 00:20:07.830
want to use for the
transaction.

00:20:07.830 --> 00:20:14.250
So before you set up anything,
you need to create a JWT, like

00:20:14.250 --> 00:20:18.140
in the other cases, where you'll
communicate with Google

00:20:18.140 --> 00:20:20.730
the information you
are requested

00:20:20.730 --> 00:20:23.440
in the Masked Wallet.

00:20:23.440 --> 00:20:27.160
Once you set up that
information, you can create

00:20:27.160 --> 00:20:31.390
your Shopping Cart page, where
you will have a Buy with

00:20:31.390 --> 00:20:32.780
Google page.

00:20:32.780 --> 00:20:37.220
And clicking that Buy with
Google page will send your

00:20:37.220 --> 00:20:40.770
Masked Wallet request
to Google.

00:20:40.770 --> 00:20:43.910
And you will receive back the
Masked Wallet information.

00:20:43.910 --> 00:20:48.630
So a very important concept
to notice here--

00:20:48.630 --> 00:20:52.570
you will have to have that
information ready, before

00:20:52.570 --> 00:20:55.610
rendering the Buy with
Google button.

00:20:55.610 --> 00:20:57.360
Now, rendering the Buy
with Google button

00:20:57.360 --> 00:20:59.050
is also very simple.

00:20:59.050 --> 00:21:02.650
You can do it statically
or dynamically.

00:21:02.650 --> 00:21:08.190
Statically, we have a special
g:wallet element that you can

00:21:08.190 --> 00:21:10.420
insert into your web page.

00:21:10.420 --> 00:21:15.510
Or you can do it dynamically
through JavaScript tool and a

00:21:15.510 --> 00:21:16.940
library function call.

00:21:16.940 --> 00:21:22.790
And note that, in both cases,
you have a request JWT for

00:21:22.790 --> 00:21:25.340
that Masked Wallet
information.

00:21:25.340 --> 00:21:28.390
That will be passed on to
Google, once the customer

00:21:28.390 --> 00:21:31.910
clicks on the Buy with
Google button.

00:21:31.910 --> 00:21:34.300
So at this point, you're
all set up.

00:21:34.300 --> 00:21:36.840
You have created your Buy
with Google button.

00:21:36.840 --> 00:21:39.920
You are requesting particular

00:21:39.920 --> 00:21:41.970
information about that customer.

00:21:41.970 --> 00:21:46.150
And that could be shipping
address, if you're

00:21:46.150 --> 00:21:47.730
shipping a real good.

00:21:47.730 --> 00:21:50.630
You can skip the shipping
address, if you're-- let's

00:21:50.630 --> 00:21:55.730
say-- just providing
a digital service.

00:21:55.730 --> 00:22:00.370
And you would need to get back
to the partial credit card

00:22:00.370 --> 00:22:03.830
number, the masked credit card
number, so that the customer

00:22:03.830 --> 00:22:08.170
selects and acknowledge that
they want to pay with that

00:22:08.170 --> 00:22:10.610
particular instrument.

00:22:10.610 --> 00:22:14.550
So now, once that information
goes to Google, Google will

00:22:14.550 --> 00:22:17.550
send you back the
Masked Wallet.

00:22:17.550 --> 00:22:23.040
And in this case, you will see
it in visual form here.

00:22:23.040 --> 00:22:25.610
So now you have shipping
information.

00:22:25.610 --> 00:22:30.950
And you have a partial credit
card number or more.

00:22:30.950 --> 00:22:34.600
The customer can use the change
buttons to select

00:22:34.600 --> 00:22:39.850
different shipping addresses, if
they are available in their

00:22:39.850 --> 00:22:42.720
Google Wallet Account or
different instruments,

00:22:42.720 --> 00:22:48.000
different credit cards, again,
if they are available.

00:22:48.000 --> 00:22:52.340
Once the customer has settled
on a particular shipping

00:22:52.340 --> 00:22:57.690
information and payment
information, you can compute

00:22:57.690 --> 00:23:03.560
the exact shipping charges
and tax and provide a

00:23:03.560 --> 00:23:05.780
total charge amount.

00:23:05.780 --> 00:23:08.920
In the case of a Masked Wallet
request, the charge amount was

00:23:08.920 --> 00:23:10.330
just an estimate.

00:23:10.330 --> 00:23:14.090
Generally, it would exclude
shipping and tax, because you

00:23:14.090 --> 00:23:16.910
don't know at that point
what the tax or

00:23:16.910 --> 00:23:19.810
shipping charges are.

00:23:19.810 --> 00:23:26.210
So once you get in this state,
you have a Place Order button,

00:23:26.210 --> 00:23:29.380
where the customer confirms
the purchase.

00:23:29.380 --> 00:23:34.530
Once that Place Order button
is pressed, then you will

00:23:34.530 --> 00:23:37.220
request what we call
a Full Wallet.

00:23:37.220 --> 00:23:41.300
A Full Wallet returns back
to you the credit card

00:23:41.300 --> 00:23:45.740
information needed to actually
charged the purchase.

00:23:45.740 --> 00:23:50.130
That will be the proxy card,
the one-time use card.

00:23:50.130 --> 00:23:52.650
And you'll have all the
information you need to

00:23:52.650 --> 00:23:57.000
actually process it with your
preferred payment processor.

00:23:59.510 --> 00:24:04.550
So once we go to the Full
Wallet, as I said, it has the

00:24:04.550 --> 00:24:09.020
exact amount that you
need to charge, that

00:24:09.020 --> 00:24:11.380
includes tax and shipping.

00:24:11.380 --> 00:24:17.550
And all the details you call
back include the billing

00:24:17.550 --> 00:24:22.060
address and the card number,
which will allow you to make

00:24:22.060 --> 00:24:24.610
the exact charge.

00:24:24.610 --> 00:24:29.110
So this is very powerful,
especially for merchants who

00:24:29.110 --> 00:24:32.240
have their own in-house
payment processing.

00:24:32.240 --> 00:24:38.530
Or they have a very customized
and sophisticated

00:24:38.530 --> 00:24:42.620
post-transaction system
or inventory system.

00:24:42.620 --> 00:24:46.120
In that case, the Digital Goods
solution probably was

00:24:46.120 --> 00:24:47.120
not enough.

00:24:47.120 --> 00:24:48.810
It's a very simple solution.

00:24:48.810 --> 00:24:52.570
And they would have had to build
on top of it, anyway.

00:24:52.570 --> 00:24:57.840
So in this way, the merchants
have access to a very powerful

00:24:57.840 --> 00:25:03.240
API, which gives them more
control over the entire

00:25:03.240 --> 00:25:05.740
transaction flow.

00:25:05.740 --> 00:25:10.940
So with that, I think we covered
all the important

00:25:10.940 --> 00:25:14.440
aspects of the two APIs.

00:25:14.440 --> 00:25:17.430
How do you get started?

00:25:17.430 --> 00:25:19.240
It's very easy.

00:25:19.240 --> 00:25:22.480
I pointed out the documentation
earlier.

00:25:22.480 --> 00:25:24.090
I'm going to say it again.

00:25:24.090 --> 00:25:27.390
It's at
developers.google.com/commerce,

00:25:27.390 --> 00:25:30.580
where you'll find separate
documentation for the Digital

00:25:30.580 --> 00:25:34.610
Goods API and the
Instant Buy API.

00:25:34.610 --> 00:25:36.680
With that, we have tutorials.

00:25:36.680 --> 00:25:40.370
We have sample code, that you
can very easily reuse.

00:25:40.370 --> 00:25:42.320
We have demo codes.

00:25:42.320 --> 00:25:47.390
We have Sandbox, where you can
actually test your entire

00:25:47.390 --> 00:25:51.430
integration with test
credit cards.

00:25:51.430 --> 00:25:55.685
So everything will look the same
as in reality, as in a

00:25:55.685 --> 00:25:59.045
production environment, except
that no money exchanges hands.

00:25:59.045 --> 00:26:04.640
The test credit cards will not
involve a real transaction.

00:26:04.640 --> 00:26:08.192
You can create a merchant
account also.

00:26:08.192 --> 00:26:11.810
We have steps how to do that
from the documentation.

00:26:11.810 --> 00:26:14.790
Once you do that, you
can start testing.

00:26:14.790 --> 00:26:16.120
You can start implementing.

00:26:16.120 --> 00:26:17.680
And you can start selling.

00:26:17.680 --> 00:26:19.750
And with that, you can
start making money.

00:26:19.750 --> 00:26:25.640
And that's what we want everyone
to do, to be happy

00:26:25.640 --> 00:26:27.670
and profit.

00:26:27.670 --> 00:26:32.810
And if you have questions,
you have suggestions.

00:26:32.810 --> 00:26:37.620
We have links on our page
to our blog to our

00:26:37.620 --> 00:26:39.510
social media accounts.

00:26:39.510 --> 00:26:45.060
And we have regular sessions
on Google Developers Live.

00:26:45.060 --> 00:26:48.790
We will see you then,
and until then, bye.

