WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.924
[MUSIC]

00:00:05.772 --> 00:00:07.940
DAVID WANG: Hi, my name's Dave.

00:00:07.940 --> 00:00:09.584
I'm a product manager
here at Google,

00:00:09.584 --> 00:00:11.250
and I'm really excited
to be here today.

00:00:11.250 --> 00:00:13.750
So today, Jeff Archer
and I are going

00:00:13.750 --> 00:00:18.230
to show you how transactions
work on the Google Assistant.

00:00:18.230 --> 00:00:20.530
So we were super excited
to launch Actions on Google

00:00:20.530 --> 00:00:22.820
last December, opening
the door for developers

00:00:22.820 --> 00:00:25.590
like you to create great
experiences for the Google

00:00:25.590 --> 00:00:26.580
Assistant.

00:00:26.580 --> 00:00:28.850
However, there were
a couple of gaps.

00:00:28.850 --> 00:00:32.630
So first, actions on Google
only worked on the Google Home.

00:00:32.630 --> 00:00:35.180
So as we announced this
week, that's changed.

00:00:35.180 --> 00:00:37.710
Actions on Google is
now available on phones,

00:00:37.710 --> 00:00:40.820
and now any developer can build
great multimodal experiences

00:00:40.820 --> 00:00:42.580
for the Google Assistant.

00:00:42.580 --> 00:00:45.255
Second, Actions on Google
didn't support transactions,

00:00:45.255 --> 00:00:48.921
and that's what we're
here to discuss today.

00:00:48.921 --> 00:00:49.920
Let's see one in action.

00:00:58.580 --> 00:01:01.904
Order delivery from Panera.

00:01:01.904 --> 00:01:04.060
AUDIO PLAYBACK:
Hi, this is Panera.

00:01:04.060 --> 00:01:06.650
For delivery, I'll
just need the address.

00:01:06.650 --> 00:01:08.140
Which one can I get from Google?

00:01:11.850 --> 00:01:13.924
What can I get you started with?

00:01:13.924 --> 00:01:15.840
DAVID WANG: I need
something with bacon in it.

00:01:19.784 --> 00:01:20.920
AUDIO PLAYBACK: Got it.

00:01:20.920 --> 00:01:22.475
How about one of
these cold drinks?

00:01:25.332 --> 00:01:27.402
DAVID WANG: Power smoothie.

00:01:27.402 --> 00:01:30.244
AUDIO PLAYBACK: Great, are
you ready to check out?

00:01:30.244 --> 00:01:30.910
DAVID WANG: Yes.

00:01:34.151 --> 00:01:35.900
AUDIO PLAYBACK: Here's
your order summary.

00:01:35.900 --> 00:01:38.290
Your total is $17.74.

00:01:38.290 --> 00:01:39.790
Ready to place the order?

00:01:39.790 --> 00:01:40.630
DAVID WANG: Yes.

00:01:49.807 --> 00:01:52.120
AUDIO PLAYBACK:
Thanks, you're all set.

00:01:52.120 --> 00:01:55.680
By the way, I can sign you up
today for a MyPanera account.

00:01:55.680 --> 00:01:57.126
Are you interested?

00:01:57.126 --> 00:01:58.500
DAVID WANG: I
heard they give you

00:01:58.500 --> 00:02:00.605
free pastries with every
account creation, so yes.

00:02:07.574 --> 00:02:08.990
One more tap to
create my account.

00:02:16.590 --> 00:02:17.710
AUDIO PLAYBACK: Congrats.

00:02:17.710 --> 00:02:19.430
You're now our newest member.

00:02:19.430 --> 00:02:20.530
See you next time.

00:02:20.530 --> 00:02:22.950
DAVID WANG: And look, I
already have a notification

00:02:22.950 --> 00:02:23.570
from Panera.

00:02:23.570 --> 00:02:25.054
[APPLAUSE]

00:02:25.554 --> 00:02:28.040
Thanks.

00:02:28.040 --> 00:02:30.060
And they're super quick,
so my delivery is going

00:02:30.060 --> 00:02:31.700
to arrive in just 20 minutes.

00:02:31.700 --> 00:02:35.600
I tap into that, and look,
here's my full receipt

00:02:35.600 --> 00:02:38.320
with some follow-up
actions on the bottom.

00:02:38.320 --> 00:02:39.710
Pretty cool, right?

00:02:39.710 --> 00:02:42.250
So let's review
what just happened.

00:02:42.250 --> 00:02:45.520
I was a customer who never
interacted with Panera before.

00:02:45.520 --> 00:02:47.540
I was able to share my
payment and my address

00:02:47.540 --> 00:02:49.140
with a single tap.

00:02:49.140 --> 00:02:52.210
I created a new Panera
account with just two taps.

00:02:52.210 --> 00:02:55.960
Panera updated me on the status
of my order via notification.

00:02:55.960 --> 00:02:57.560
And finally, I was
able to pull up

00:02:57.560 --> 00:03:00.240
all of the details of the order,
including follow-up actions,

00:03:00.240 --> 00:03:04.240
from my assistant order history.

00:03:04.240 --> 00:03:05.690
So let's back up.

00:03:05.690 --> 00:03:07.500
The way that users
interact with technology

00:03:07.500 --> 00:03:08.680
is fundamentally changing.

00:03:08.680 --> 00:03:10.388
This has been the
theme for the past year

00:03:10.388 --> 00:03:11.360
with Google Assistant.

00:03:11.360 --> 00:03:13.540
So we're in the middle
of a shift from web

00:03:13.540 --> 00:03:15.210
to app to assistants.

00:03:15.210 --> 00:03:19.840
So from clicks to
swipes to voice.

00:03:19.840 --> 00:03:22.110
And good assistants,
human assistants,

00:03:22.110 --> 00:03:24.090
are useful for a number reasons.

00:03:24.090 --> 00:03:25.340
They know who you are.

00:03:25.340 --> 00:03:27.100
They know your
payment information.

00:03:27.100 --> 00:03:29.190
They know your friends
and your contacts.

00:03:29.190 --> 00:03:31.280
They know your
preferences, like if you

00:03:31.280 --> 00:03:33.300
like skim milk in your
coffee, or if you like

00:03:33.300 --> 00:03:35.210
the aisle seat on the airline.

00:03:35.210 --> 00:03:36.210
They're always with you.

00:03:36.210 --> 00:03:39.310
They're accessible 24 hours
a day, from your home,

00:03:39.310 --> 00:03:41.710
in your car, in
your living room,

00:03:41.710 --> 00:03:44.695
when you're out and about,
and they're easy to use.

00:03:44.695 --> 00:03:49.020
You just talk to them, and
they do all the hard work.

00:03:49.020 --> 00:03:51.350
But assistants
can't do everything.

00:03:51.350 --> 00:03:52.790
They can't make you pizzas.

00:03:52.790 --> 00:03:54.870
They can't drive
you to the airport.

00:03:54.870 --> 00:03:57.890
A real assistant has more
than just information.

00:03:57.890 --> 00:04:00.450
They help you get things
done in the real world,

00:04:00.450 --> 00:04:03.400
and the Google Assistant
needs an ecosystem of partners

00:04:03.400 --> 00:04:06.150
to help us do that.

00:04:06.150 --> 00:04:09.110
Good ecosystems need three
things to be successful.

00:04:09.110 --> 00:04:11.500
So over the long
term, users are only

00:04:11.500 --> 00:04:13.630
going to use the Google
Assistant if it's powerful,

00:04:13.630 --> 00:04:16.800
if it's actually the easiest
way to get things done.

00:04:16.800 --> 00:04:18.839
It can't just be a novelty.

00:04:18.839 --> 00:04:20.317
And over the long
term, developers

00:04:20.317 --> 00:04:22.650
are only going to invest in
building apps for the Google

00:04:22.650 --> 00:04:25.700
Assistant if there's a
return on that investment.

00:04:25.700 --> 00:04:27.690
You have to be able
to monetize it.

00:04:27.690 --> 00:04:29.870
So to create this
virtuous cycle,

00:04:29.870 --> 00:04:31.900
Assistant really
needs to provide value

00:04:31.900 --> 00:04:35.180
to both users and developers.

00:04:35.180 --> 00:04:38.130
One way we're addressing
this is with distribution.

00:04:38.130 --> 00:04:40.810
We're bringing Assistant
and Actions on Google

00:04:40.810 --> 00:04:43.870
to lots of users and services,
starting with Google Home back

00:04:43.870 --> 00:04:44.670
in December.

00:04:44.670 --> 00:04:47.570
Now it's available on Android
and iOS, and in the future

00:04:47.570 --> 00:04:51.440
we're going to support
Android TV Allo, wear, auto,

00:04:51.440 --> 00:04:55.760
and even non-Google devices via
the Assistant SDK, assistants

00:04:55.760 --> 00:04:58.395
built into a drink-mixing
machine right outside.

00:04:58.395 --> 00:05:00.270
So we're going to have
the audience, hundreds

00:05:00.270 --> 00:05:01.480
of millions of users.

00:05:01.480 --> 00:05:04.750
How do transactions fit in?

00:05:04.750 --> 00:05:07.250
So first, what are transactions
in the Google Assistant

00:05:07.250 --> 00:05:08.310
context?

00:05:08.310 --> 00:05:10.840
They could be purchases,
like food delivery or concert

00:05:10.840 --> 00:05:14.060
tickets, or they could be
reservations and appointments,

00:05:14.060 --> 00:05:18.330
so for example, a haircut,
a restaurant, or yoga class.

00:05:18.330 --> 00:05:22.260
And why do transactions
matter to our ecosystem?

00:05:22.260 --> 00:05:24.020
One, it's good for users.

00:05:24.020 --> 00:05:27.270
It bridges the gap between
information and action,

00:05:27.270 --> 00:05:29.640
between the assistant knowing
things and the assistant

00:05:29.640 --> 00:05:32.530
doing things that helps
users in the real world

00:05:32.530 --> 00:05:35.220
and makes our lives easier.

00:05:35.220 --> 00:05:36.620
It's also good for developers.

00:05:36.620 --> 00:05:40.240
You can find new users, you
can re-engage existing users,

00:05:40.240 --> 00:05:43.110
and more importantly, you
can monetize your actions

00:05:43.110 --> 00:05:44.460
on Google app.

00:05:44.460 --> 00:05:49.420
So if transactions are good for
everybody, what's the problem?

00:05:49.420 --> 00:05:50.360
Simple.

00:05:50.360 --> 00:05:52.060
Buying stuff can be
really hard, right?

00:05:52.060 --> 00:05:53.160
There's a lot of friction.

00:05:53.160 --> 00:05:55.490
There's a lot of places
for people to drop off,

00:05:55.490 --> 00:05:56.910
and two of the
biggest pain points

00:05:56.910 --> 00:06:00.210
are with payments and identity.

00:06:00.210 --> 00:06:01.830
So let's say you're
in real life.

00:06:01.830 --> 00:06:03.992
You go to the store, take
an item off the shelf,

00:06:03.992 --> 00:06:05.700
you go to the cashier
and you pay for it.

00:06:05.700 --> 00:06:07.260
So it's pretty simple.

00:06:07.260 --> 00:06:09.010
It's just not very convenient.

00:06:09.010 --> 00:06:10.980
What if what you
wanted was sold out,

00:06:10.980 --> 00:06:13.950
or how did you know what was
on sale before you got there?

00:06:13.950 --> 00:06:17.740
What if what you want is
cheaper somewhere else?

00:06:17.740 --> 00:06:20.354
With apps, you have
to download the app,

00:06:20.354 --> 00:06:21.770
you enter your
payment information

00:06:21.770 --> 00:06:24.930
and your personal details like
your address and your phone,

00:06:24.930 --> 00:06:27.400
and then finally, you build
your cart and you pay.

00:06:27.400 --> 00:06:30.460
OK, it's not too bad,
but this gets really old

00:06:30.460 --> 00:06:33.610
if you have to do this for
every single app, and worse,

00:06:33.610 --> 00:06:35.117
every time you
switch a device, you

00:06:35.117 --> 00:06:36.950
have to download the
app again, and then you

00:06:36.950 --> 00:06:39.510
have to sign in again.

00:06:39.510 --> 00:06:42.090
On top of that, a lot of
assistant transactions

00:06:42.090 --> 00:06:44.776
today require all
that, and you also

00:06:44.776 --> 00:06:46.400
have to create an
account with the app,

00:06:46.400 --> 00:06:48.233
and then link that
account to the assistant,

00:06:48.233 --> 00:06:49.870
and then finally you can pay.

00:06:49.870 --> 00:06:53.390
It's just not really that easy.

00:06:53.390 --> 00:06:56.330
So Google already has
users' payment and identity

00:06:56.330 --> 00:06:59.000
information, and, like
a human assistant,

00:06:59.000 --> 00:07:01.720
Google Assistant can
facilitate transactions

00:07:01.720 --> 00:07:04.800
on the user's behalf by passing
that information to you.

00:07:04.800 --> 00:07:07.990
So less friction means more
purchases, happier users

00:07:07.990 --> 00:07:11.060
and happier developers.

00:07:11.060 --> 00:07:12.960
So let's recap.

00:07:12.960 --> 00:07:14.980
Transactions on
Actions on Google

00:07:14.980 --> 00:07:16.987
has three major
platform features.

00:07:16.987 --> 00:07:18.820
We already talked about
the first two, which

00:07:18.820 --> 00:07:20.490
are payments and identity.

00:07:20.490 --> 00:07:22.250
The third is
re-engagement, which

00:07:22.250 --> 00:07:24.240
we'll discuss in a little bit.

00:07:24.240 --> 00:07:26.709
These features are
implemented independently.

00:07:26.709 --> 00:07:29.000
You don't need to implement
Google-facilitated payments

00:07:29.000 --> 00:07:31.820
to get streamlined
identity and vice versa,

00:07:31.820 --> 00:07:35.570
but good flows really do
incorporate all three.

00:07:35.570 --> 00:07:39.620
Let's go into a bit more
detail, starting with payments.

00:07:39.620 --> 00:07:42.050
Did you know up to
a third of users

00:07:42.050 --> 00:07:44.280
are going to abandon a
checkout flow if they

00:07:44.280 --> 00:07:46.280
have to enter a credit card?

00:07:46.280 --> 00:07:47.770
So here's the thing--

00:07:47.770 --> 00:07:50.720
anyone who's ever
purchased an Android app

00:07:50.720 --> 00:07:52.680
or rented a movie
from Google Play

00:07:52.680 --> 00:07:55.380
already has a card
on file with Google.

00:07:55.380 --> 00:07:57.810
Users have already
saved hundreds

00:07:57.810 --> 00:08:01.220
of millions of debit and credit
cards to their Google accounts,

00:08:01.220 --> 00:08:04.360
and Google can securely pass
that payment information to you

00:08:04.360 --> 00:08:06.550
during an Assistant transaction.

00:08:06.550 --> 00:08:09.190
Here's how it works.

00:08:09.190 --> 00:08:11.860
First, you tell Google you
need to charge a certain amount

00:08:11.860 --> 00:08:14.500
to a certain user.

00:08:14.500 --> 00:08:17.270
Google then encrypts the raw
credit card information with

00:08:17.270 --> 00:08:20.700
your payment possessor's key--
and this is specific to you--

00:08:20.700 --> 00:08:25.030
and then it generates an
encrypted payment credential.

00:08:25.030 --> 00:08:26.910
Google then passes
you that credential,

00:08:26.910 --> 00:08:29.160
and then you charge it like
you would any normal debit

00:08:29.160 --> 00:08:30.200
or credit card.

00:08:30.200 --> 00:08:32.760
That's it.

00:08:32.760 --> 00:08:35.120
Google-facilitated
payments are convenient.

00:08:35.120 --> 00:08:38.030
For users, it's a
single tap to pay.

00:08:38.030 --> 00:08:38.868
It's free.

00:08:38.868 --> 00:08:40.409
Google doesn't charge
a fee for this.

00:08:40.409 --> 00:08:42.117
You just pay the
standard processing fees

00:08:42.117 --> 00:08:45.051
to your payment processor,
and it's lightweight.

00:08:45.051 --> 00:08:47.550
Just indicate at runtime that
you need a payment credential,

00:08:47.550 --> 00:08:48.720
and we'll figure it out.

00:08:48.720 --> 00:08:50.803
You charge it like you
would a normal credit card.

00:08:53.170 --> 00:08:55.680
These are the payment
processors we support today,

00:08:55.680 --> 00:08:59.950
and we have more coming online
in the next several months.

00:08:59.950 --> 00:09:03.360
And of course, using
Google-facilitated payments

00:09:03.360 --> 00:09:05.240
is completely optional.

00:09:05.240 --> 00:09:07.810
If your customers already have
a payment method with you--

00:09:07.810 --> 00:09:10.360
for example, a loyalty
card or points--

00:09:10.360 --> 00:09:11.800
you can use that, too.

00:09:11.800 --> 00:09:16.210
So that said, let's talk about
the second platform feature--

00:09:16.210 --> 00:09:19.750
seamless identity.

00:09:19.750 --> 00:09:23.670
So half of all users are going
to abandon a flow if they have

00:09:23.670 --> 00:09:29.330
to create a new account,
and up to 90% of users

00:09:29.330 --> 00:09:31.930
will leave, abandon
the flow altogether,

00:09:31.930 --> 00:09:36.160
if they forget their password
or login information.

00:09:36.160 --> 00:09:39.760
So imagine you're interacting
with the user on the Assistant,

00:09:39.760 --> 00:09:42.067
and you'd like the user to
either sign in or create

00:09:42.067 --> 00:09:42.650
a new account.

00:09:45.061 --> 00:09:47.560
There's a really good chance
you're going to lose that user.

00:09:47.560 --> 00:09:50.400
Over half of users are going
to drop out at this point,

00:09:50.400 --> 00:09:53.410
and this gets even worse if
the user has to switch devices.

00:09:53.410 --> 00:09:55.230
So for example, a
Google Home user

00:09:55.230 --> 00:09:59.420
has to enter their user name
and password on a phone,

00:09:59.420 --> 00:10:02.600
but since every Google
Assistant user has an identity

00:10:02.600 --> 00:10:05.720
to find with Google, Google can
share that identity with you

00:10:05.720 --> 00:10:09.420
to create or link an
account on your system.

00:10:09.420 --> 00:10:12.710
These identity assertion
flows make linking seamless.

00:10:12.710 --> 00:10:16.200
Just two taps, and you're done.

00:10:16.200 --> 00:10:19.990
And this could even work in
eyes-free hands-free scenarios,

00:10:19.990 --> 00:10:21.740
so users can link
to existing accounts

00:10:21.740 --> 00:10:24.390
or create new accounts with
you without ever picking up

00:10:24.390 --> 00:10:27.020
their phone.

00:10:27.020 --> 00:10:28.720
Here's how it works.

00:10:28.720 --> 00:10:31.280
When the user taps their account
chip in this [INAUDIBLE],

00:10:31.280 --> 00:10:33.990
Google sends you
an identity token.

00:10:33.990 --> 00:10:36.610
That token contains information
such as the user's name

00:10:36.610 --> 00:10:38.180
and email address.

00:10:38.180 --> 00:10:40.040
You use the contents
of that token

00:10:40.040 --> 00:10:43.869
to look up the user
in your system.

00:10:43.869 --> 00:10:45.660
If they don't have an
account with you yet,

00:10:45.660 --> 00:10:48.560
you can create one using
the user's Google identity.

00:10:48.560 --> 00:10:52.160
This works similarly
to Google sign in.

00:10:52.160 --> 00:10:54.110
If they do already have
an account with you,

00:10:54.110 --> 00:10:56.940
you can optionally ask the user
to accept additional OAuth 2

00:10:56.940 --> 00:10:59.070
scripts to complete the
account-making process.

00:11:01.860 --> 00:11:04.290
These assertion flows are
easy to implement on top

00:11:04.290 --> 00:11:05.914
of existing OAuth 2 flows.

00:11:05.914 --> 00:11:07.830
So we've already got
some really good feedback

00:11:07.830 --> 00:11:10.150
from our early access
partners about this.

00:11:10.150 --> 00:11:12.520
With relatively
incremental investment,

00:11:12.520 --> 00:11:15.236
you can minimize that huge
drop-off on account linking

00:11:15.236 --> 00:11:16.110
and account creation.

00:11:18.585 --> 00:11:20.460
Let's move on to the
third platform feature--

00:11:20.460 --> 00:11:21.800
re-engagement.

00:11:21.800 --> 00:11:26.200
Transactions don't stop
when the user pays.

00:11:26.200 --> 00:11:28.000
Users may have questions
about the order.

00:11:28.000 --> 00:11:30.250
So for example, where is it?

00:11:30.250 --> 00:11:32.020
What's the status of my return?

00:11:32.020 --> 00:11:35.610
Can I add something to
the order before it ships?

00:11:35.610 --> 00:11:37.580
Or maybe they want to
take action against it.

00:11:37.580 --> 00:11:39.130
They want to move
the appointment,

00:11:39.130 --> 00:11:41.290
or maybe upgrade their
seat to first class,

00:11:41.290 --> 00:11:44.600
or refill a prescription.

00:11:44.600 --> 00:11:47.780
Google Assistant maintains
all that transaction history

00:11:47.780 --> 00:11:49.990
in a single place,
makes it really

00:11:49.990 --> 00:11:52.640
easy for users to find an
order and re-engage with it.

00:11:55.350 --> 00:11:57.894
Users can easily initiate
these follow-up actions

00:11:57.894 --> 00:12:00.310
that you define for your orders,
both from the transaction

00:12:00.310 --> 00:12:03.431
history or simply by
asking the assistant.

00:12:07.006 --> 00:12:08.880
You can also reach back
out to your customers

00:12:08.880 --> 00:12:11.330
by providing order
updates, because users

00:12:11.330 --> 00:12:13.160
care when their
Uber is arriving,

00:12:13.160 --> 00:12:15.740
or if the salon needs
to cancel the haircut.

00:12:15.740 --> 00:12:18.720
Users can stay up to date
about their orders with you

00:12:18.720 --> 00:12:20.490
without having to
download your app

00:12:20.490 --> 00:12:23.780
or search through their email.

00:12:23.780 --> 00:12:26.890
So that wraps up our overview
of the main platform features.

00:12:26.890 --> 00:12:29.320
Now Jeff is going to walk
us through how to integrate

00:12:29.320 --> 00:12:32.167
transactions into your app.

00:12:32.167 --> 00:12:33.604
[APPLAUSE]

00:12:38.009 --> 00:12:40.300
JEFF CAESAR: Well, we're
super excited to be opening up

00:12:40.300 --> 00:12:42.060
the developer
preview for Assistant

00:12:42.060 --> 00:12:43.840
transactions this week.

00:12:43.840 --> 00:12:46.290
The transactions API
is part of the Actions

00:12:46.290 --> 00:12:48.360
on Google framework,
so before we

00:12:48.360 --> 00:12:50.840
get into this new
API, let's first start

00:12:50.840 --> 00:12:53.390
with a brief review
of how you use Actions

00:12:53.390 --> 00:12:55.150
to build Assistant apps.

00:12:55.150 --> 00:12:57.530
For more detailed instructions
on getting started with

00:12:57.530 --> 00:13:02.240
Assistant apps, go to
developers.google.com/actions,

00:13:02.240 --> 00:13:05.030
and you can also check out
yesterday's IO talk on building

00:13:05.030 --> 00:13:07.370
apps for the Google Assistant,
which is now available

00:13:07.370 --> 00:13:07.870
on YouTube.

00:13:10.420 --> 00:13:14.310
So an assistant app is simply
a set of web hook endpoints

00:13:14.310 --> 00:13:16.160
that receive a request
from the assistant

00:13:16.160 --> 00:13:19.080
for each turn of a
conversation with the user.

00:13:19.080 --> 00:13:20.540
So when a user
talks to your app,

00:13:20.540 --> 00:13:23.470
the Google Assistant
transcribes the user's input

00:13:23.470 --> 00:13:26.000
and sends it to
your app as text.

00:13:26.000 --> 00:13:28.730
So you can use whatever
web server and language

00:13:28.730 --> 00:13:31.030
you like for your
web hook, though we

00:13:31.030 --> 00:13:33.600
like to use Node.js
for its simplicity,

00:13:33.600 --> 00:13:36.150
and we also provide a client
library to make it easier

00:13:36.150 --> 00:13:39.790
to work with the request
and response formats.

00:13:39.790 --> 00:13:41.720
You can get the client
library within an NPM

00:13:41.720 --> 00:13:44.150
install actions on Google.

00:13:44.150 --> 00:13:47.340
So you work with the raw
text input in your web hook,

00:13:47.340 --> 00:13:49.580
or you can use a natural
language understanding

00:13:49.580 --> 00:13:54.110
tools such as api.ai, which will
convert this text into a higher

00:13:54.110 --> 00:13:57.850
level parametrized user intent.

00:13:57.850 --> 00:14:01.630
So we'll use apa.ai and
Node.js for all the examples

00:14:01.630 --> 00:14:03.770
in our talk today.

00:14:03.770 --> 00:14:05.660
So in the example
here, a user would

00:14:05.660 --> 00:14:07.680
like to order a classic burger.

00:14:07.680 --> 00:14:12.160
Api.ai matches this to an add
item intent in a classic burger

00:14:12.160 --> 00:14:14.060
entity that you would
have already defined

00:14:14.060 --> 00:14:18.950
in the api.ai tool, and then
sends us along to your web hook

00:14:18.950 --> 00:14:20.400
as part of the JSON payload.

00:14:23.310 --> 00:14:26.190
So you can respond to the
user in a number of ways,

00:14:26.190 --> 00:14:28.190
including a simple
response, which

00:14:28.190 --> 00:14:32.010
takes the form of either a
chat bubble or text to speech,

00:14:32.010 --> 00:14:34.830
or you can also send
rich responses, which,

00:14:34.830 --> 00:14:37.400
in addition to the
simple response,

00:14:37.400 --> 00:14:40.490
can include other
components such as cards

00:14:40.490 --> 00:14:42.940
and lists or suggestion chips.

00:14:42.940 --> 00:14:46.730
So in this example, we're using
the Node.js client library

00:14:46.730 --> 00:14:49.070
to build a card as the response.

00:14:49.070 --> 00:14:52.650
The card contains an image, some
suggestion chips for the user,

00:14:52.650 --> 00:14:55.030
and other information.

00:14:55.030 --> 00:14:58.110
We typically respond
with app.ask,

00:14:58.110 --> 00:15:00.200
which will open the
mic to accept the user

00:15:00.200 --> 00:15:03.990
input for the next turn
of the conversation.

00:15:03.990 --> 00:15:06.120
So that's simple
in rich responses.

00:15:06.120 --> 00:15:09.550
The third type of response
is to call a helper.

00:15:09.550 --> 00:15:13.730
So when you respond to
an assistant request

00:15:13.730 --> 00:15:16.640
by invoking a helper,
this tells the assistant

00:15:16.640 --> 00:15:19.350
to momentarily take
over the conversation

00:15:19.350 --> 00:15:22.620
to obtain some specific
information for your app.

00:15:22.620 --> 00:15:24.260
This is done in a
standardized way

00:15:24.260 --> 00:15:26.820
but still using the
voice of your app.

00:15:26.820 --> 00:15:28.760
So for example,
a helper could be

00:15:28.760 --> 00:15:31.350
used to get a confirmation
from the user,

00:15:31.350 --> 00:15:34.170
meaning a yes or no
response to a question,

00:15:34.170 --> 00:15:37.040
and then return
this to your app.

00:15:37.040 --> 00:15:39.650
So you can think of this
from your app's perspective

00:15:39.650 --> 00:15:41.530
as a two-step process.

00:15:41.530 --> 00:15:43.840
So you tell the assistant
what information

00:15:43.840 --> 00:15:46.740
you need from the user, and
then that information is then

00:15:46.740 --> 00:15:48.410
passed back to you
on the next request.

00:15:55.370 --> 00:15:57.140
So it's these
helpers that we use

00:15:57.140 --> 00:15:59.800
to handle the transactional
part of your conversation

00:15:59.800 --> 00:16:00.725
with the user.

00:16:00.725 --> 00:16:03.350
So let's take a typical
e-commerce scenario

00:16:03.350 --> 00:16:05.850
where you have one or more
dialogue turns with the user

00:16:05.850 --> 00:16:08.200
to construct their
basket of goods.

00:16:08.200 --> 00:16:11.640
So you might have a
simple single-item basket

00:16:11.640 --> 00:16:14.340
that you might be able to
satisfy with a single dialogue

00:16:14.340 --> 00:16:16.820
turn, or maybe you have
something more complicated,

00:16:16.820 --> 00:16:18.665
like our food ordering
example, where

00:16:18.665 --> 00:16:22.990
you can have lots of items
and add-ons and adjustments.

00:16:22.990 --> 00:16:26.720
So you use a combination of
the simple and rich responses,

00:16:26.720 --> 00:16:28.950
such as the carousel
that we see here,

00:16:28.950 --> 00:16:32.430
to build this basket
of goods with the user.

00:16:32.430 --> 00:16:34.635
Once this basket's
established, then you

00:16:34.635 --> 00:16:36.570
use the transaction
helpers to take

00:16:36.570 --> 00:16:38.700
the user through the checkout.

00:16:38.700 --> 00:16:41.460
So therefore, transaction
helper's available.

00:16:41.460 --> 00:16:43.850
The first is ask for
delivery address.

00:16:43.850 --> 00:16:46.730
So this gets a delivery
address from the user,

00:16:46.730 --> 00:16:49.620
allowing them to select from
their stored address book,

00:16:49.620 --> 00:16:52.050
and then sent back to you.

00:16:52.050 --> 00:16:54.640
The second is the-- is
to propose or present

00:16:54.640 --> 00:16:56.277
the order to the user.

00:16:56.277 --> 00:16:57.860
So here, you indicate
to the user what

00:16:57.860 --> 00:17:00.800
it is that they're buying, and
you receive their acceptance

00:17:00.800 --> 00:17:05.470
back on the next turn, often
with their payment credentials.

00:17:05.470 --> 00:17:08.490
Next is the confirmation
of the order step.

00:17:08.490 --> 00:17:12.079
So upon receiving the user's
acceptance of the order

00:17:12.079 --> 00:17:14.660
from your app, you then
confirm back to the user

00:17:14.660 --> 00:17:17.609
that you received it
and it's a good order.

00:17:17.609 --> 00:17:21.000
As part of this
turn, you'll also

00:17:21.000 --> 00:17:24.500
show a summary of the
order to the user.

00:17:24.500 --> 00:17:26.359
And finally, Google
account-linking.

00:17:26.359 --> 00:17:28.300
So as Dave mentioned,
this allows the user

00:17:28.300 --> 00:17:31.930
to sign in or create an
account with your service using

00:17:31.930 --> 00:17:35.490
your OAuth 2 server, or,
if you support the OAuth 2

00:17:35.490 --> 00:17:38.120
assertion flows, users can
sign in or create accounts

00:17:38.120 --> 00:17:41.640
using just a couple of taps.

00:17:41.640 --> 00:17:44.240
So this might be the typical
e-commerce flow, where

00:17:44.240 --> 00:17:46.532
the user first builds
their basket of goods,

00:17:46.532 --> 00:17:48.240
picks the delivery
address, and then they

00:17:48.240 --> 00:17:50.310
go through the checkout
flow and can optionally

00:17:50.310 --> 00:17:52.010
create an account.

00:17:52.010 --> 00:17:54.340
But it could also be
the case, for example,

00:17:54.340 --> 00:17:57.160
that you need an address
first, for example,

00:17:57.160 --> 00:18:00.270
to determine inventory
availability, or pricing,

00:18:00.270 --> 00:18:01.590
or service area.

00:18:01.590 --> 00:18:04.000
So you can certainly
sequence the steps as needed

00:18:04.000 --> 00:18:06.920
for your use case, or you
could skip steps entirely.

00:18:06.920 --> 00:18:09.130
So for example,
you might not have

00:18:09.130 --> 00:18:11.262
an OAuth 2 endpoint, or you--

00:18:11.262 --> 00:18:12.970
you're fine with the
guest checkout flow,

00:18:12.970 --> 00:18:18.070
so you don't need to
ask the user to sign in.

00:18:18.070 --> 00:18:19.935
And even with your
best-laid plans,

00:18:19.935 --> 00:18:22.060
users manage to keep things
interesting when you're

00:18:22.060 --> 00:18:23.720
building conversation apps.

00:18:23.720 --> 00:18:25.320
So for example, the
user could decide

00:18:25.320 --> 00:18:26.890
to add something to
their basket when

00:18:26.890 --> 00:18:30.070
they're at the checkout step,
or maybe change their address.

00:18:30.070 --> 00:18:33.410
So in this case, you might
need to modify or recalculate

00:18:33.410 --> 00:18:35.280
the order, and then
present it to the user

00:18:35.280 --> 00:18:36.480
again for their acceptance.

00:18:36.480 --> 00:18:38.700
So the transaction
helpers can help

00:18:38.700 --> 00:18:41.590
handle these different
responses from the user

00:18:41.590 --> 00:18:45.760
and send them back to your
app as text or intents.

00:18:45.760 --> 00:18:47.810
The only two required
steps in the flow

00:18:47.810 --> 00:18:49.610
are to propose the
order so the user

00:18:49.610 --> 00:18:52.090
can see exactly what it is
that they're purchasing,

00:18:52.090 --> 00:18:53.950
then, again, the
assistant will collect

00:18:53.950 --> 00:18:56.980
the user's authorization
for that order,

00:18:56.980 --> 00:18:59.090
and then to confirm
the order with user

00:18:59.090 --> 00:19:01.170
after it's been placed.

00:19:01.170 --> 00:19:03.340
You should also send
updates about the order

00:19:03.340 --> 00:19:04.190
as it's fulfilled.

00:19:04.190 --> 00:19:06.190
And we'll talk more about
that in a few minutes.

00:19:09.120 --> 00:19:12.920
So the basic data structure for
every transaction is an order.

00:19:12.920 --> 00:19:16.270
Each order has a cart where you
specify line items, sub line

00:19:16.270 --> 00:19:17.970
items, and notes.

00:19:17.970 --> 00:19:20.730
And so for example,
in our burger example,

00:19:20.730 --> 00:19:23.020
a hamburger might
be a line item,

00:19:23.020 --> 00:19:25.740
and a bacon add-on
would be a sub line,

00:19:25.740 --> 00:19:28.770
and you might have
medium rare in the notes.

00:19:28.770 --> 00:19:31.270
So item versus sub item
really only affects

00:19:31.270 --> 00:19:34.270
the presentation of the
receipt that the user sees.

00:19:34.270 --> 00:19:35.770
So it's really your
choice as to how

00:19:35.770 --> 00:19:40.240
you structure the cart in a
way that the user can clearly

00:19:40.240 --> 00:19:42.940
understand what it is
that they're purchasing.

00:19:42.940 --> 00:19:44.450
And then on the
order itself, you'll

00:19:44.450 --> 00:19:49.200
set fees and other adjustments,
total price, delivery address,

00:19:49.200 --> 00:19:50.760
and overall image for the order.

00:19:54.100 --> 00:19:56.680
So once you propose the order,
once you present the order

00:19:56.680 --> 00:19:59.120
to the user and the
user authorizes it,

00:19:59.120 --> 00:20:01.710
the assistant then sends
the order back to your app

00:20:01.710 --> 00:20:03.840
with some additional
data added to it.

00:20:03.840 --> 00:20:05.580
So this includes
an initial status,

00:20:05.580 --> 00:20:09.510
so this will typically be the
value created that we set.

00:20:09.510 --> 00:20:11.820
You'll also receive the
payment method for this order

00:20:11.820 --> 00:20:14.750
if you're using a
Google-facilitated payment.

00:20:14.750 --> 00:20:17.340
We'll set a creation time
on the order, as well as

00:20:17.340 --> 00:20:19.120
a Google-generated order ID.

00:20:22.470 --> 00:20:25.850
So those are the common
flows and data structure

00:20:25.850 --> 00:20:27.100
that we use for transactions.

00:20:27.100 --> 00:20:28.970
So now that we have
that, let's take a look

00:20:28.970 --> 00:20:32.330
at how this works in the code.

00:20:32.330 --> 00:20:34.255
So we first define the function.

00:20:34.255 --> 00:20:36.630
I'm going to define the function
here that creates a cart

00:20:36.630 --> 00:20:40.000
and stores it in the
app data session state.

00:20:40.000 --> 00:20:45.360
So to create our cart, we call
app.buildCart, [? inset ?]

00:20:45.360 --> 00:20:47.170
some merchant metadata--
again, that's just

00:20:47.170 --> 00:20:49.150
going to appear in the receipt.

00:20:49.150 --> 00:20:50.930
Next we define the
structure of the cart

00:20:50.930 --> 00:20:53.150
through line items
and sub lines.

00:20:53.150 --> 00:20:56.220
So for this example, I've
hard coded items for the cart,

00:20:56.220 --> 00:20:59.420
but of course, in a real app,
you would determine these--

00:20:59.420 --> 00:21:04.290
the set of items over of your
dialogue turns with the user.

00:21:04.290 --> 00:21:07.300
So here we're adding
our burger with bacon,

00:21:07.300 --> 00:21:09.590
and also specifying
unique IDs, which

00:21:09.590 --> 00:21:11.680
are required for each
item in the order,

00:21:11.680 --> 00:21:13.360
as well as the
price and quantity

00:21:13.360 --> 00:21:17.710
and other standard information.

00:21:17.710 --> 00:21:19.840
So now, if you require
a delivery address,

00:21:19.840 --> 00:21:23.180
you call the ask for
delivery address helper.

00:21:23.180 --> 00:21:24.680
You should-- when
you call this, you

00:21:24.680 --> 00:21:28.600
should also provide some
additional context for the user

00:21:28.600 --> 00:21:32.680
so they understand why they're
giving their address to you.

00:21:32.680 --> 00:21:35.550
The user's response comes
back as the delivery address

00:21:35.550 --> 00:21:38.680
complete intent in the
subsequent request, which

00:21:38.680 --> 00:21:42.320
I've mapped to a function of
the same name in this example.

00:21:42.320 --> 00:21:45.410
Here, we check that the
delivery address was sent back

00:21:45.410 --> 00:21:49.700
by the user, and if so,
we store it in app.data.

00:21:49.700 --> 00:21:51.950
Then we'll ask the user if
they're ready to check out,

00:21:51.950 --> 00:21:57.090
and then we'll check out on the
next turn of the conversation.

00:21:57.090 --> 00:21:59.590
So if the user chose not
to provide an address

00:21:59.590 --> 00:22:02.890
in this example, as we
see in the else condition,

00:22:02.890 --> 00:22:05.150
well, we can prompt them
again, possibly giving them

00:22:05.150 --> 00:22:07.930
an alternative, or maybe
just an escape hatch,

00:22:07.930 --> 00:22:11.560
or ending the conversation.

00:22:11.560 --> 00:22:13.710
Great, so the user's
given us an address,

00:22:13.710 --> 00:22:15.440
and they're ready
to check out, so

00:22:15.440 --> 00:22:18.710
let's define a method
to create our order.

00:22:18.710 --> 00:22:21.530
So first, we call
app.buildOrder,

00:22:21.530 --> 00:22:25.180
we set the cart that we created
and stored in our session

00:22:25.180 --> 00:22:28.740
previously, and then we set
the image for the order,

00:22:28.740 --> 00:22:31.152
we add tax and other
items for the order,

00:22:31.152 --> 00:22:32.360
and finally, the total price.

00:22:35.230 --> 00:22:37.029
So now we have our
cart and our order,

00:22:37.029 --> 00:22:39.070
and we're going to propose
the order to the user,

00:22:39.070 --> 00:22:40.630
present it to the user.

00:22:40.630 --> 00:22:45.810
So first we define our payment
configuration parameters.

00:22:45.810 --> 00:22:48.950
So in this case, I want Google
to provide a payment instrument

00:22:48.950 --> 00:22:49.620
for the user.

00:22:49.620 --> 00:22:52.600
This is using
Google-facilitated payments.

00:22:52.600 --> 00:22:54.930
So as Dave talked
about earlier, this

00:22:54.930 --> 00:22:57.660
allows the user to select
their card on file with Google.

00:22:57.660 --> 00:23:01.530
So if I set this input to
the proposed order method,

00:23:01.530 --> 00:23:03.840
the user will get a list
of their credit cards

00:23:03.840 --> 00:23:06.880
that match the set of filter
criteria that I set up.

00:23:06.880 --> 00:23:08.920
So here I'm
specifying that I only

00:23:08.920 --> 00:23:12.290
support Visa and
MasterCard, and I'm also

00:23:12.290 --> 00:23:15.320
setting the
tokenization parameters

00:23:15.320 --> 00:23:17.270
specific to my
payment processor.

00:23:17.270 --> 00:23:19.690
In this case, I'm using Stripe.

00:23:19.690 --> 00:23:22.270
Next, I call apps for
transaction decision

00:23:22.270 --> 00:23:25.470
with this order and
payment configuration.

00:23:25.470 --> 00:23:27.390
The order is then
presented to the user,

00:23:27.390 --> 00:23:29.520
as you see on the
left, and the assistant

00:23:29.520 --> 00:23:32.700
handles all the details of
collecting the user's response,

00:23:32.700 --> 00:23:35.120
getting the user's
authorization for the purchase,

00:23:35.120 --> 00:23:38.860
and then passes all of the
agreed-upon order and payment

00:23:38.860 --> 00:23:40.306
information back to me.

00:23:43.645 --> 00:23:45.020
And if-- again,
if you don't want

00:23:45.020 --> 00:23:49.300
to use facilitated
payments with this,

00:23:49.300 --> 00:23:51.830
you're also free to use your
own app-provided payments

00:23:51.830 --> 00:23:52.410
instrument.

00:23:52.410 --> 00:23:54.780
So in this example,
I'm simply describing

00:23:54.780 --> 00:23:57.470
the form of payment being used
so that the user can actually

00:23:57.470 --> 00:23:59.050
see this in the receipt.

00:23:59.050 --> 00:24:01.170
And so for example, we
could set the last four

00:24:01.170 --> 00:24:05.020
digits of the payment
instrument or loyalty program,

00:24:05.020 --> 00:24:07.882
and then this will be displayed
for the user during checkout.

00:24:07.882 --> 00:24:10.430
And of course, this
typically requires

00:24:10.430 --> 00:24:12.335
that you have the user
signed in and they

00:24:12.335 --> 00:24:13.960
have a card on file
with you already

00:24:13.960 --> 00:24:16.330
so you know what to charge.

00:24:16.330 --> 00:24:18.330
So the benefit of this
is that you still get

00:24:18.330 --> 00:24:22.080
to use the same checkout flow
dialogues, user authorization,

00:24:22.080 --> 00:24:24.250
and other benefits, but
have the flexibility

00:24:24.250 --> 00:24:27.420
of using your own payment
instruments if you choose.

00:24:27.420 --> 00:24:30.000
And finally, you can drop a
payment config altogether.

00:24:30.000 --> 00:24:31.790
So you can have an
order that doesn't

00:24:31.790 --> 00:24:33.260
require any payment at all.

00:24:33.260 --> 00:24:36.490
So if you have a reservation
that has no cost,

00:24:36.490 --> 00:24:38.490
you can use that, but
still get all the benefits

00:24:38.490 --> 00:24:39.400
of the checkout flow.

00:24:43.160 --> 00:24:45.920
OK, so the order is
presented by the assistant.

00:24:45.920 --> 00:24:49.230
It looks good to the user, and
they authorize the transaction.

00:24:49.230 --> 00:24:51.220
Their response is
sent back to your app

00:24:51.220 --> 00:24:55.970
as part of the transaction
decision complete intent.

00:24:55.970 --> 00:24:58.720
So here you get the
user's decision,

00:24:58.720 --> 00:25:02.640
and if the user's accepted, then
you likely call your back end

00:25:02.640 --> 00:25:05.410
to create or persist
the order, and likely

00:25:05.410 --> 00:25:07.980
call your payment processor
to authorize the card

00:25:07.980 --> 00:25:10.520
or charge the card.

00:25:10.520 --> 00:25:12.960
Finally, you need to send a
response back to the user,

00:25:12.960 --> 00:25:15.440
again, confirming that the
order's been successfully

00:25:15.440 --> 00:25:18.380
received by your app, and you
give them the current state

00:25:18.380 --> 00:25:19.630
of that order.

00:25:19.630 --> 00:25:21.470
So first, you obtain
the Google order

00:25:21.470 --> 00:25:24.320
ID so we know which
order you're confirming,

00:25:24.320 --> 00:25:26.190
then you create
the rich response.

00:25:26.190 --> 00:25:27.830
This time you create
an order update

00:25:27.830 --> 00:25:31.340
object, which indicates
initial states, you specify

00:25:31.340 --> 00:25:34.840
a final order ID, if it's
changed, and set some text

00:25:34.840 --> 00:25:36.890
to include in the response.

00:25:36.890 --> 00:25:38.990
This results in the final
receipt confirmation

00:25:38.990 --> 00:25:41.400
presented to the user
as you see on the left,

00:25:41.400 --> 00:25:44.690
and then the conversation
continues from there.

00:25:44.690 --> 00:25:47.040
On this last line with
the else condition,

00:25:47.040 --> 00:25:50.860
we have an example of handling
alternate user decisions.

00:25:50.860 --> 00:25:52.940
So here the user's chosen
to change their address

00:25:52.940 --> 00:25:56.430
during checkout, so
instead of course

00:25:56.430 --> 00:26:00.060
being able to charge that card,
we'll send this response back

00:26:00.060 --> 00:26:02.770
to you, and you'll have the
option of creating a new order

00:26:02.770 --> 00:26:04.270
and presenting it
to the user again.

00:26:07.440 --> 00:26:09.840
So this covers the
order creation APIs.

00:26:09.840 --> 00:26:14.023
Now I'll hand off to Archita to
talk about follow-up actions.

00:26:14.023 --> 00:26:15.496
[APPLAUSE]

00:26:20.406 --> 00:26:24.200
ARCHITA VADALI: Now let us talk
about how a system facilitates

00:26:24.200 --> 00:26:26.760
the follow-up interactions
between the app

00:26:26.760 --> 00:26:31.100
developers and the users
after the conversation ends.

00:26:31.100 --> 00:26:33.210
After the order is
placed, you should

00:26:33.210 --> 00:26:36.550
send order updates for
all meaningful changes

00:26:36.550 --> 00:26:37.760
to the order.

00:26:37.760 --> 00:26:41.960
For example, a ride sharing
app might send updates

00:26:41.960 --> 00:26:43.680
when the car has arrived.

00:26:43.680 --> 00:26:46.780
A food delivery app
might send updates

00:26:46.780 --> 00:26:49.120
when the food is delivered.

00:26:49.120 --> 00:26:52.720
A restaurant reservation
app might send updates

00:26:52.720 --> 00:26:55.690
if the reservation is canceled.

00:26:55.690 --> 00:26:59.810
Important updates will trigger
a notification to the user.

00:26:59.810 --> 00:27:05.480
All order updates are also
visible in the order history.

00:27:05.480 --> 00:27:10.340
You can also attach follow-up
actions to each order update.

00:27:10.340 --> 00:27:12.980
In a food delivery
scenario, while the food

00:27:12.980 --> 00:27:15.350
is being prepared,
you could have

00:27:15.350 --> 00:27:19.520
follow-up actions
like track order,

00:27:19.520 --> 00:27:22.460
call restaurant, or cancel.

00:27:22.460 --> 00:27:24.690
After the food has
been delivered,

00:27:24.690 --> 00:27:28.740
the follow-up actions could be
rate restaurant and re-order.

00:27:31.990 --> 00:27:35.440
There are four types
of follow-up actions.

00:27:35.440 --> 00:27:38.560
Email and phone are
straightforward.

00:27:38.560 --> 00:27:42.570
You might use these for
customer service contacts.

00:27:42.570 --> 00:27:47.210
URLs can be deep links
to websites or apps.

00:27:47.210 --> 00:27:50.020
For example, you
might want to link

00:27:50.020 --> 00:27:55.030
to a live tracker for the
delivery or image of a QR code

00:27:55.030 --> 00:27:57.350
for concert tickets.

00:27:57.350 --> 00:28:01.070
Intents launch the user
back into a conversation

00:28:01.070 --> 00:28:03.460
with your assistant app.

00:28:03.460 --> 00:28:05.320
You specify the
intent that should

00:28:05.320 --> 00:28:09.230
be triggered, and pre-fill
any arguments, for example,

00:28:09.230 --> 00:28:10.880
the order ID.

00:28:10.880 --> 00:28:15.550
Your assistant app might let the
users check your return policy,

00:28:15.550 --> 00:28:18.690
re-schedule an appointment,
or quickly re-order.

00:28:21.830 --> 00:28:25.220
Order updates are
simply POST requests

00:28:25.220 --> 00:28:28.080
to an Actions on
Google endpoint.

00:28:28.080 --> 00:28:31.365
The following code snippet shows
how to build an order update.

00:28:34.500 --> 00:28:37.260
First, populate
the updated state,

00:28:37.260 --> 00:28:40.160
along with required
supporting information.

00:28:40.160 --> 00:28:45.400
In this example, the
order is in transit.

00:28:45.400 --> 00:28:49.060
Next, set the content of
the system notification,

00:28:49.060 --> 00:28:53.750
like "your food shop
order is on its way".

00:28:53.750 --> 00:28:58.270
Last, add any follow-up
actions to the order update.

00:28:58.270 --> 00:29:00.880
These are displayed,
along with the receipt,

00:29:00.880 --> 00:29:02.540
in the order of history.

00:29:02.540 --> 00:29:07.190
In this example, we have added
a follow-up action of type URLS

00:29:07.190 --> 00:29:08.530
to contact the customer service.

00:29:11.580 --> 00:29:14.250
Finally, let's
talk about account

00:29:14.250 --> 00:29:17.000
linking and account creation.

00:29:17.000 --> 00:29:21.130
First, register your OAuth
2 configuration in Actions

00:29:21.130 --> 00:29:24.020
on Google Console.

00:29:24.020 --> 00:29:27.470
At runtime, check whether
the user has already

00:29:27.470 --> 00:29:28.950
linked accounts.

00:29:28.950 --> 00:29:32.510
You can do so by verifying
if an OAuth 2 access

00:29:32.510 --> 00:29:38.630
token is included in
assistance request to your app.

00:29:38.630 --> 00:29:40.570
To start the account
linking flow,

00:29:40.570 --> 00:29:44.370
simply call askforSignIn
helper method.

00:29:44.370 --> 00:29:48.970
What happens next depends on
the configuration you define

00:29:48.970 --> 00:29:52.520
and whether the user already
has an account in your system.

00:29:55.790 --> 00:29:58.480
If you support OAuth
assertion flows,

00:29:58.480 --> 00:30:01.700
we will send you
a JSON web token.

00:30:01.700 --> 00:30:04.820
You can use the contents of
this token to look up the user

00:30:04.820 --> 00:30:07.830
it in your system.

00:30:07.830 --> 00:30:11.640
If they don't already have an
account, create a new account,

00:30:11.640 --> 00:30:13.680
and return the OAuth
2 refresh token.

00:30:16.910 --> 00:30:19.400
If they already
have an account, you

00:30:19.400 --> 00:30:23.450
may optionally ask the user
to accept additional OAuth 2

00:30:23.450 --> 00:30:25.590
scopes to complete the
account-linking flow.

00:30:28.140 --> 00:30:31.000
If you don't support
JWT assertion flow,

00:30:31.000 --> 00:30:34.740
we will trigger a standard
OAuth 2 account-linking flow

00:30:34.740 --> 00:30:36.450
in a web browser.

00:30:36.450 --> 00:30:40.140
After the user signs them,
return an OAuth 2 refresh

00:30:40.140 --> 00:30:41.170
token.

00:30:41.170 --> 00:30:44.212
Now, back to Dave.

00:30:44.212 --> 00:30:46.124
[APPLAUSE]

00:30:49.948 --> 00:30:52.900
DAVID WANG: So we have a great
set of early access partners

00:30:52.900 --> 00:30:56.110
already developing transactional
apps for the Google Assistant.

00:30:56.110 --> 00:30:59.470
Soon, you'll be able to
send flowers, or buy dinner,

00:30:59.470 --> 00:31:01.270
or order concert tickets.

00:31:01.270 --> 00:31:03.200
These are just some
initial examples

00:31:03.200 --> 00:31:05.360
of how the Actions
on Google ecosystem

00:31:05.360 --> 00:31:08.090
is extending the Google
Assistant to help users

00:31:08.090 --> 00:31:10.900
in the real world, and to bridge
the gap between it knowing

00:31:10.900 --> 00:31:13.980
things and doing things.

00:31:13.980 --> 00:31:16.320
Transactions is currently
in developer preview.

00:31:16.320 --> 00:31:18.480
You can start adding
transactions into your Actions

00:31:18.480 --> 00:31:20.440
on Google apps today.

00:31:20.440 --> 00:31:22.630
Please visit the link
here for more details

00:31:22.630 --> 00:31:26.480
about our EPIs, documentation,
and helpful libraries.

00:31:26.480 --> 00:31:29.330
Actions on Google is also
running a developer challenge,

00:31:29.330 --> 00:31:32.690
with prizes including
a trip to I/O 2018.

00:31:32.690 --> 00:31:35.710
The consumer experience is
going to launch on phone soon,

00:31:35.710 --> 00:31:38.150
and then expand to other
surfaces such as Home, wear,

00:31:38.150 --> 00:31:39.350
and more.

00:31:39.350 --> 00:31:41.990
We're really excited to see
what you're going to build.

00:31:41.990 --> 00:31:44.140
[MUSIC]

