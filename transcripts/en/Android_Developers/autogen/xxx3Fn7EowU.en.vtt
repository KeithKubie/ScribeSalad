WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:01.760
 
we've lifted the lid on the Android

00:00:01.760 --> 00:00:01.770
we've lifted the lid on the Android
 

00:00:01.770 --> 00:00:03.770
we've lifted the lid on the Android
studio box and pulled out instant run a

00:00:03.770 --> 00:00:03.780
studio box and pulled out instant run a
 

00:00:03.780 --> 00:00:06.380
studio box and pulled out instant run a
fast and shiny new emulator a new GPU

00:00:06.380 --> 00:00:06.390
fast and shiny new emulator a new GPU
 

00:00:06.390 --> 00:00:08.480
fast and shiny new emulator a new GPU
profiler and all the new features and

00:00:08.480 --> 00:00:08.490
profiler and all the new features and
 

00:00:08.490 --> 00:00:11.060
profiler and all the new features and
improvements of IntelliJ 15 I'm reto

00:00:11.060 --> 00:00:11.070
improvements of IntelliJ 15 I'm reto
 

00:00:11.070 --> 00:00:12.980
improvements of IntelliJ 15 I'm reto
Meier its Android tool time time and

00:00:12.980 --> 00:00:12.990
Meier its Android tool time time and
 

00:00:12.990 --> 00:00:19.490
Meier its Android tool time time and
this is Android studio 2.0 instant run

00:00:19.490 --> 00:00:19.500
this is Android studio 2.0 instant run
 

00:00:19.500 --> 00:00:21.830
this is Android studio 2.0 instant run
is a new feature that once enabled lets

00:00:21.830 --> 00:00:21.840
is a new feature that once enabled lets
 

00:00:21.840 --> 00:00:23.630
is a new feature that once enabled lets
you build and deploy incremental changes

00:00:23.630 --> 00:00:23.640
you build and deploy incremental changes
 

00:00:23.640 --> 00:00:25.040
you build and deploy incremental changes
your app within a few seconds

00:00:25.040 --> 00:00:25.050
your app within a few seconds
 

00:00:25.050 --> 00:00:26.960
your app within a few seconds
dramatically improving the speed of your

00:00:26.960 --> 00:00:26.970
dramatically improving the speed of your
 

00:00:26.970 --> 00:00:29.089
dramatically improving the speed of your
test and debug cycles once you have your

00:00:29.089 --> 00:00:29.099
test and debug cycles once you have your
 

00:00:29.099 --> 00:00:30.830
test and debug cycles once you have your
app up and running hitting instant run

00:00:30.830 --> 00:00:30.840
app up and running hitting instant run
 

00:00:30.840 --> 00:00:32.420
app up and running hitting instant run
after making code changes such as

00:00:32.420 --> 00:00:32.430
after making code changes such as
 

00:00:32.430 --> 00:00:34.280
after making code changes such as
changing this chess board from 2d to 3d

00:00:34.280 --> 00:00:34.290
changing this chess board from 2d to 3d
 

00:00:34.290 --> 00:00:36.350
changing this chess board from 2d to 3d
and modifying the size and color of the

00:00:36.350 --> 00:00:36.360
and modifying the size and color of the
 

00:00:36.360 --> 00:00:39.170
and modifying the size and color of the
pieces will perform a hot swap sending

00:00:39.170 --> 00:00:39.180
pieces will perform a hot swap sending
 

00:00:39.180 --> 00:00:41.690
pieces will perform a hot swap sending
only the changed code to your app the

00:00:41.690 --> 00:00:41.700
only the changed code to your app the
 

00:00:41.700 --> 00:00:43.400
only the changed code to your app the
affected methods are overridden and your

00:00:43.400 --> 00:00:43.410
affected methods are overridden and your
 

00:00:43.410 --> 00:00:45.380
affected methods are overridden and your
code changes are applied in real time

00:00:45.380 --> 00:00:45.390
code changes are applied in real time
 

00:00:45.390 --> 00:00:47.690
code changes are applied in real time
within the running app instance hot

00:00:47.690 --> 00:00:47.700
within the running app instance hot
 

00:00:47.700 --> 00:00:49.670
within the running app instance hot
swapping works by injecting code where

00:00:49.670 --> 00:00:49.680
swapping works by injecting code where
 

00:00:49.680 --> 00:00:51.380
swapping works by injecting code where
you make changes your app isn't

00:00:51.380 --> 00:00:51.390
you make changes your app isn't
 

00:00:51.390 --> 00:00:53.389
you make changes your app isn't
restarted so memory allocations remain

00:00:53.389 --> 00:00:53.399
restarted so memory allocations remain
 

00:00:53.399 --> 00:00:55.400
restarted so memory allocations remain
unchanged meaning class initializers

00:00:55.400 --> 00:00:55.410
unchanged meaning class initializers
 

00:00:55.410 --> 00:00:57.709
unchanged meaning class initializers
won't be rerun and static variables are

00:00:57.709 --> 00:00:57.719
won't be rerun and static variables are
 

00:00:57.719 --> 00:01:00.020
won't be rerun and static variables are
initialized existing instances and

00:01:00.020 --> 00:01:00.030
initialized existing instances and
 

00:01:00.030 --> 00:01:02.060
initialized existing instances and
constructs like fields and single syns

00:01:02.060 --> 00:01:02.070
constructs like fields and single syns
 

00:01:02.070 --> 00:01:04.939
constructs like fields and single syns
are left untouched changing resources

00:01:04.939 --> 00:01:04.949
are left untouched changing resources
 

00:01:04.949 --> 00:01:07.039
are left untouched changing resources
such as editing colors strings or even

00:01:07.039 --> 00:01:07.049
such as editing colors strings or even
 

00:01:07.049 --> 00:01:09.050
such as editing colors strings or even
layouts will send the modified resources

00:01:09.050 --> 00:01:09.060
layouts will send the modified resources
 

00:01:09.060 --> 00:01:10.789
layouts will send the modified resources
file to the running app and you'll be

00:01:10.789 --> 00:01:10.799
file to the running app and you'll be
 

00:01:10.799 --> 00:01:12.170
file to the running app and you'll be
able to see it when the activity is

00:01:12.170 --> 00:01:12.180
able to see it when the activity is
 

00:01:12.180 --> 00:01:14.990
able to see it when the activity is
restarted called a warm swap which will

00:01:14.990 --> 00:01:15.000
restarted called a warm swap which will
 

00:01:15.000 --> 00:01:16.969
restarted called a warm swap which will
do for you automatically if we detect

00:01:16.969 --> 00:01:16.979
do for you automatically if we detect
 

00:01:16.979 --> 00:01:19.640
do for you automatically if we detect
that it's necessary some changes such as

00:01:19.640 --> 00:01:19.650
that it's necessary some changes such as
 

00:01:19.650 --> 00:01:21.469
that it's necessary some changes such as
modifying your manifest or changing

00:01:21.469 --> 00:01:21.479
modifying your manifest or changing
 

00:01:21.479 --> 00:01:23.660
modifying your manifest or changing
layered IDs currently trigger a full

00:01:23.660 --> 00:01:23.670
layered IDs currently trigger a full
 

00:01:23.670 --> 00:01:26.359
layered IDs currently trigger a full
build exactly which changes will cause a

00:01:26.359 --> 00:01:26.369
build exactly which changes will cause a
 

00:01:26.369 --> 00:01:28.399
build exactly which changes will cause a
full rebuild versus a called or warm

00:01:28.399 --> 00:01:28.409
full rebuild versus a called or warm
 

00:01:28.409 --> 00:01:30.679
full rebuild versus a called or warm
swap will change as instant run improves

00:01:30.679 --> 00:01:30.689
swap will change as instant run improves
 

00:01:30.689 --> 00:01:32.990
swap will change as instant run improves
and evolves so rather than listing them

00:01:32.990 --> 00:01:33.000
and evolves so rather than listing them
 

00:01:33.000 --> 00:01:34.640
and evolves so rather than listing them
here in detail and having this video

00:01:34.640 --> 00:01:34.650
here in detail and having this video
 

00:01:34.650 --> 00:01:36.740
here in detail and having this video
become quickly updated you can find the

00:01:36.740 --> 00:01:36.750
become quickly updated you can find the
 

00:01:36.750 --> 00:01:39.800
become quickly updated you can find the
details in the docs instant run works

00:01:39.800 --> 00:01:39.810
details in the docs instant run works
 

00:01:39.810 --> 00:01:41.600
details in the docs instant run works
with all emulators in every recent

00:01:41.600 --> 00:01:41.610
with all emulators in every recent
 

00:01:41.610 --> 00:01:43.609
with all emulators in every recent
physical device in fact on every

00:01:43.609 --> 00:01:43.619
physical device in fact on every
 

00:01:43.619 --> 00:01:45.620
physical device in fact on every
platform version all the way back to Ice

00:01:45.620 --> 00:01:45.630
platform version all the way back to Ice
 

00:01:45.630 --> 00:01:48.710
platform version all the way back to Ice
Cream Sandwich not content with instant

00:01:48.710 --> 00:01:48.720
Cream Sandwich not content with instant
 

00:01:48.720 --> 00:01:51.050
Cream Sandwich not content with instant
run Android studio 2.0 also improves

00:01:51.050 --> 00:01:51.060
run Android studio 2.0 also improves
 

00:01:51.060 --> 00:01:53.120
run Android studio 2.0 also improves
each step of the full build and deploy

00:01:53.120 --> 00:01:53.130
each step of the full build and deploy
 

00:01:53.130 --> 00:01:55.670
each step of the full build and deploy
process so even full builds happen more

00:01:55.670 --> 00:01:55.680
process so even full builds happen more
 

00:01:55.680 --> 00:01:57.830
process so even full builds happen more
than two and a half times faster the

00:01:57.830 --> 00:01:57.840
than two and a half times faster the
 

00:01:57.840 --> 00:01:59.929
than two and a half times faster the
first time you hit run or debug for your

00:01:59.929 --> 00:01:59.939
first time you hit run or debug for your
 

00:01:59.939 --> 00:02:01.880
first time you hit run or debug for your
code or each time you do a clean build

00:02:01.880 --> 00:02:01.890
code or each time you do a clean build
 

00:02:01.890 --> 00:02:03.620
code or each time you do a clean build
the code is compiled and converted to

00:02:03.620 --> 00:02:03.630
the code is compiled and converted to
 

00:02:03.630 --> 00:02:06.109
the code is compiled and converted to
Dex files is optionally shrunk optimized

00:02:06.109 --> 00:02:06.119
Dex files is optionally shrunk optimized
 

00:02:06.119 --> 00:02:08.119
Dex files is optionally shrunk optimized
and obfuscated with ProGuard and has its

00:02:08.119 --> 00:02:08.129
and obfuscated with ProGuard and has its
 

00:02:08.129 --> 00:02:09.889
and obfuscated with ProGuard and has its
classes and resources packaged all

00:02:09.889 --> 00:02:09.899
classes and resources packaged all
 

00:02:09.899 --> 00:02:11.690
classes and resources packaged all
before it's uploaded to the device and

00:02:11.690 --> 00:02:11.700
before it's uploaded to the device and
 

00:02:11.700 --> 00:02:14.080
before it's uploaded to the device and
installed Android studio to point

00:02:14.080 --> 00:02:14.090
installed Android studio to point
 

00:02:14.090 --> 00:02:15.670
installed Android studio to point
has improved each of these steps

00:02:15.670 --> 00:02:15.680
has improved each of these steps
 

00:02:15.680 --> 00:02:18.460
has improved each of these steps
starting with the X we've reduced time

00:02:18.460 --> 00:02:18.470
starting with the X we've reduced time
 

00:02:18.470 --> 00:02:20.650
starting with the X we've reduced time
here by over half primarily through

00:02:20.650 --> 00:02:20.660
here by over half primarily through
 

00:02:20.660 --> 00:02:22.930
here by over half primarily through
improving the DX merger algorithm now

00:02:22.930 --> 00:02:22.940
improving the DX merger algorithm now
 

00:02:22.940 --> 00:02:25.000
improving the DX merger algorithm now
that merging Dex dependency modules is

00:02:25.000 --> 00:02:25.010
that merging Dex dependency modules is
 

00:02:25.010 --> 00:02:26.979
that merging Dex dependency modules is
lightning fast we gain significant gains

00:02:26.979 --> 00:02:26.989
lightning fast we gain significant gains
 

00:02:26.989 --> 00:02:29.259
lightning fast we gain significant gains
from pre-dexing them and not read Xing

00:02:29.259 --> 00:02:29.269
from pre-dexing them and not read Xing
 

00:02:29.269 --> 00:02:31.509
from pre-dexing them and not read Xing
them if they haven't changed so if your

00:02:31.509 --> 00:02:31.519
them if they haven't changed so if your
 

00:02:31.519 --> 00:02:33.250
them if they haven't changed so if your
project has a lot of modules you'll see

00:02:33.250 --> 00:02:33.260
project has a lot of modules you'll see
 

00:02:33.260 --> 00:02:34.600
project has a lot of modules you'll see
significant gains here

00:02:34.600 --> 00:02:34.610
significant gains here
 

00:02:34.610 --> 00:02:36.970
significant gains here
we've also modified the X so that it now

00:02:36.970 --> 00:02:36.980
we've also modified the X so that it now
 

00:02:36.980 --> 00:02:38.619
we've also modified the X so that it now
runs in process and you can specify

00:02:38.619 --> 00:02:38.629
runs in process and you can specify
 

00:02:38.629 --> 00:02:40.869
runs in process and you can specify
running up to four DX instances in

00:02:40.869 --> 00:02:40.879
running up to four DX instances in
 

00:02:40.879 --> 00:02:43.539
running up to four DX instances in
parallel this has significant advantages

00:02:43.539 --> 00:02:43.549
parallel this has significant advantages
 

00:02:43.549 --> 00:02:46.180
parallel this has significant advantages
as we no longer start a new VM for each

00:02:46.180 --> 00:02:46.190
as we no longer start a new VM for each
 

00:02:46.190 --> 00:02:48.220
as we no longer start a new VM for each
DX instance giving the JIT more

00:02:48.220 --> 00:02:48.230
DX instance giving the JIT more
 

00:02:48.230 --> 00:02:49.780
DX instance giving the JIT more
opportunity to optimize code and

00:02:49.780 --> 00:02:49.790
opportunity to optimize code and
 

00:02:49.790 --> 00:02:51.490
opportunity to optimize code and
removing the overhead of starting and

00:02:51.490 --> 00:02:51.500
removing the overhead of starting and
 

00:02:51.500 --> 00:02:53.680
removing the overhead of starting and
running multiple parallel VM instances

00:02:53.680 --> 00:02:53.690
running multiple parallel VM instances
 

00:02:53.690 --> 00:02:56.380
running multiple parallel VM instances
if you're using ProGuard it creates a

00:02:56.380 --> 00:02:56.390
if you're using ProGuard it creates a
 

00:02:56.390 --> 00:02:58.539
if you're using ProGuard it creates a
single jar that effectively disables the

00:02:58.539 --> 00:02:58.549
single jar that effectively disables the
 

00:02:58.549 --> 00:03:00.100
single jar that effectively disables the
pre-dexing advantages that we just

00:03:00.100 --> 00:03:00.110
pre-dexing advantages that we just
 

00:03:00.110 --> 00:03:02.860
pre-dexing advantages that we just
gained so we developed a new shrinker to

00:03:02.860 --> 00:03:02.870
gained so we developed a new shrinker to
 

00:03:02.870 --> 00:03:05.170
gained so we developed a new shrinker to
use in debug builds it doesn't replace

00:03:05.170 --> 00:03:05.180
use in debug builds it doesn't replace
 

00:03:05.180 --> 00:03:07.270
use in debug builds it doesn't replace
ProGuard it just replaces it's shrinking

00:03:07.270 --> 00:03:07.280
ProGuard it just replaces it's shrinking
 

00:03:07.280 --> 00:03:09.520
ProGuard it just replaces it's shrinking
functionality so you still need to run

00:03:09.520 --> 00:03:09.530
functionality so you still need to run
 

00:03:09.530 --> 00:03:11.949
functionality so you still need to run
pro guard on release builds to optimize

00:03:11.949 --> 00:03:11.959
pro guard on release builds to optimize
 

00:03:11.959 --> 00:03:14.920
pro guard on release builds to optimize
and obfuscate your code but for

00:03:14.920 --> 00:03:14.930
and obfuscate your code but for
 

00:03:14.930 --> 00:03:16.539
and obfuscate your code but for
debugging the shrinker isn't much faster

00:03:16.539 --> 00:03:16.549
debugging the shrinker isn't much faster
 

00:03:16.549 --> 00:03:18.490
debugging the shrinker isn't much faster
by including some incremental support

00:03:18.490 --> 00:03:18.500
by including some incremental support
 

00:03:18.500 --> 00:03:20.110
by including some incremental support
and critically by not read Xing

00:03:20.110 --> 00:03:20.120
and critically by not read Xing
 

00:03:20.120 --> 00:03:22.960
and critically by not read Xing
dependencies to improve double apt

00:03:22.960 --> 00:03:22.970
dependencies to improve double apt
 

00:03:22.970 --> 00:03:24.879
dependencies to improve double apt
packaging times on full builds we now

00:03:24.879 --> 00:03:24.889
packaging times on full builds we now
 

00:03:24.889 --> 00:03:27.280
packaging times on full builds we now
ask you to select a deploy target before

00:03:27.280 --> 00:03:27.290
ask you to select a deploy target before
 

00:03:27.290 --> 00:03:28.150
ask you to select a deploy target before
your apt is built

00:03:28.150 --> 00:03:28.160
your apt is built
 

00:03:28.160 --> 00:03:30.160
your apt is built
we'll check what resources are required

00:03:30.160 --> 00:03:30.170
we'll check what resources are required
 

00:03:30.170 --> 00:03:31.990
we'll check what resources are required
for that particular device for example

00:03:31.990 --> 00:03:32.000
for that particular device for example
 

00:03:32.000 --> 00:03:33.910
for that particular device for example
initially we'll only package and push

00:03:33.910 --> 00:03:33.920
initially we'll only package and push
 

00:03:33.920 --> 00:03:35.140
initially we'll only package and push
the appropriate image resource

00:03:35.140 --> 00:03:35.150
the appropriate image resource
 

00:03:35.150 --> 00:03:37.240
the appropriate image resource
resolutions and future Android studio

00:03:37.240 --> 00:03:37.250
resolutions and future Android studio
 

00:03:37.250 --> 00:03:39.039
resolutions and future Android studio
releases we'll expand that to include

00:03:39.039 --> 00:03:39.049
releases we'll expand that to include
 

00:03:39.049 --> 00:03:41.680
releases we'll expand that to include
resources such as abis and legacy multi

00:03:41.680 --> 00:03:41.690
resources such as abis and legacy multi
 

00:03:41.690 --> 00:03:45.129
resources such as abis and legacy multi
decks to improve deploy times we improve

00:03:45.129 --> 00:03:45.139
decks to improve deploy times we improve
 

00:03:45.139 --> 00:03:47.530
decks to improve deploy times we improve
the ADB push-pull protocol making it

00:03:47.530 --> 00:03:47.540
the ADB push-pull protocol making it
 

00:03:47.540 --> 00:03:50.140
the ADB push-pull protocol making it
very fast a deploy to an emulator which

00:03:50.140 --> 00:03:50.150
very fast a deploy to an emulator which
 

00:03:50.150 --> 00:03:51.640
very fast a deploy to an emulator which
seems like a really good reason to

00:03:51.640 --> 00:03:51.650
seems like a really good reason to
 

00:03:51.650 --> 00:03:53.409
seems like a really good reason to
improve the emulator UX and make it

00:03:53.409 --> 00:03:53.419
improve the emulator UX and make it
 

00:03:53.419 --> 00:03:56.199
improve the emulator UX and make it
really really ridiculously fast in fact

00:03:56.199 --> 00:03:56.209
really really ridiculously fast in fact
 

00:03:56.209 --> 00:03:57.849
really really ridiculously fast in fact
running the new emulator are typical def

00:03:57.849 --> 00:03:57.859
running the new emulator are typical def
 

00:03:57.859 --> 00:03:59.770
running the new emulator are typical def
hardware is faster than using a physical

00:03:59.770 --> 00:03:59.780
hardware is faster than using a physical
 

00:03:59.780 --> 00:04:03.759
hardware is faster than using a physical
Android device to achieve this we've

00:04:03.759 --> 00:04:03.769
Android device to achieve this we've
 

00:04:03.769 --> 00:04:05.740
Android device to achieve this we've
added SMP support to take advantage of

00:04:05.740 --> 00:04:05.750
added SMP support to take advantage of
 

00:04:05.750 --> 00:04:07.720
added SMP support to take advantage of
host multi-core architecture and

00:04:07.720 --> 00:04:07.730
host multi-core architecture and
 

00:04:07.730 --> 00:04:10.599
host multi-core architecture and
optimize GPU i/o and CPU performance at

00:04:10.599 --> 00:04:10.609
optimize GPU i/o and CPU performance at
 

00:04:10.609 --> 00:04:13.150
optimize GPU i/o and CPU performance at
the same time we completely rebuilt the

00:04:13.150 --> 00:04:13.160
the same time we completely rebuilt the
 

00:04:13.160 --> 00:04:16.089
the same time we completely rebuilt the
emulator UI it now includes a toolbar to

00:04:16.089 --> 00:04:16.099
emulator UI it now includes a toolbar to
 

00:04:16.099 --> 00:04:18.099
emulator UI it now includes a toolbar to
enable actions like screen rotation and

00:04:18.099 --> 00:04:18.109
enable actions like screen rotation and
 

00:04:18.109 --> 00:04:20.409
enable actions like screen rotation and
screenshots and support for deploying

00:04:20.409 --> 00:04:20.419
screenshots and support for deploying
 

00:04:20.419 --> 00:04:22.659
screenshots and support for deploying
apks through drag and drop you can

00:04:22.659 --> 00:04:22.669
apks through drag and drop you can
 

00:04:22.669 --> 00:04:24.850
apks through drag and drop you can
rescale the emulator frame by dragging a

00:04:24.850 --> 00:04:24.860
rescale the emulator frame by dragging a
 

00:04:24.860 --> 00:04:27.310
rescale the emulator frame by dragging a
corner modify a device hardware changes

00:04:27.310 --> 00:04:27.320
corner modify a device hardware changes
 

00:04:27.320 --> 00:04:27.940
corner modify a device hardware changes
like GP

00:04:27.940 --> 00:04:27.950
like GP
 

00:04:27.950 --> 00:04:29.890
like GP
cellular network conditions battery

00:04:29.890 --> 00:04:29.900
cellular network conditions battery
 

00:04:29.900 --> 00:04:32.500
cellular network conditions battery
state and incoming phone calls or texts

00:04:32.500 --> 00:04:32.510
state and incoming phone calls or texts
 

00:04:32.510 --> 00:04:34.690
state and incoming phone calls or texts
we've also made it easier to keep up to

00:04:34.690 --> 00:04:34.700
we've also made it easier to keep up to
 

00:04:34.700 --> 00:04:36.850
we've also made it easier to keep up to
date the IDE will prompt you when

00:04:36.850 --> 00:04:36.860
date the IDE will prompt you when
 

00:04:36.860 --> 00:04:38.530
date the IDE will prompt you when
there's a new emulator available for you

00:04:38.530 --> 00:04:38.540
there's a new emulator available for you
 

00:04:38.540 --> 00:04:40.780
there's a new emulator available for you
to download if you're building something

00:04:40.780 --> 00:04:40.790
to download if you're building something
 

00:04:40.790 --> 00:04:43.150
to download if you're building something
graphics-intensive like a game you can

00:04:43.150 --> 00:04:43.160
graphics-intensive like a game you can
 

00:04:43.160 --> 00:04:45.130
graphics-intensive like a game you can
take advantage of a new GPU profiler and

00:04:45.130 --> 00:04:45.140
take advantage of a new GPU profiler and
 

00:04:45.140 --> 00:04:48.160
take advantage of a new GPU profiler and
debugger it lets you record and replay

00:04:48.160 --> 00:04:48.170
debugger it lets you record and replay
 

00:04:48.170 --> 00:04:50.320
debugger it lets you record and replay
the entire GPU stream frame-by-frame

00:04:50.320 --> 00:04:50.330
the entire GPU stream frame-by-frame
 

00:04:50.330 --> 00:04:53.080
the entire GPU stream frame-by-frame
allowing you to inspect the GPU state at

00:04:53.080 --> 00:04:53.090
allowing you to inspect the GPU state at
 

00:04:53.090 --> 00:04:55.180
allowing you to inspect the GPU state at
each stage and help you understand what

00:04:55.180 --> 00:04:55.190
each stage and help you understand what
 

00:04:55.190 --> 00:05:00.660
each stage and help you understand what
caused each specific rendering outcome

00:05:00.660 --> 00:05:00.670
 
 

00:05:00.670 --> 00:05:03.430
 
you can select an individual frame by

00:05:03.430 --> 00:05:03.440
you can select an individual frame by
 

00:05:03.440 --> 00:05:05.350
you can select an individual frame by
either the top bar or the GPU commands

00:05:05.350 --> 00:05:05.360
either the top bar or the GPU commands
 

00:05:05.360 --> 00:05:07.690
either the top bar or the GPU commands
panel once you select a frame the frame

00:05:07.690 --> 00:05:07.700
panel once you select a frame the frame
 

00:05:07.700 --> 00:05:09.340
panel once you select a frame the frame
buffer window will update to show that

00:05:09.340 --> 00:05:09.350
buffer window will update to show that
 

00:05:09.350 --> 00:05:11.680
buffer window will update to show that
frames contents you can also see and

00:05:11.680 --> 00:05:11.690
frames contents you can also see and
 

00:05:11.690 --> 00:05:13.810
frames contents you can also see and
inspect each individual command + GL

00:05:13.810 --> 00:05:13.820
inspect each individual command + GL
 

00:05:13.820 --> 00:05:15.940
inspect each individual command + GL
call that was used you can also use the

00:05:15.940 --> 00:05:15.950
call that was used you can also use the
 

00:05:15.950 --> 00:05:18.430
call that was used you can also use the
GPU state window or the textures tab to

00:05:18.430 --> 00:05:18.440
GPU state window or the textures tab to
 

00:05:18.440 --> 00:05:20.320
GPU state window or the textures tab to
explore GPU state at the time of your

00:05:20.320 --> 00:05:20.330
explore GPU state at the time of your
 

00:05:20.330 --> 00:05:22.540
explore GPU state at the time of your
selected frame or draw calls enter a

00:05:22.540 --> 00:05:22.550
selected frame or draw calls enter a
 

00:05:22.550 --> 00:05:25.600
selected frame or draw calls enter a
Studio 2.0 is built on IntelliJ 15 which

00:05:25.600 --> 00:05:25.610
Studio 2.0 is built on IntelliJ 15 which
 

00:05:25.610 --> 00:05:27.550
Studio 2.0 is built on IntelliJ 15 which
offers improved stability and a number

00:05:27.550 --> 00:05:27.560
offers improved stability and a number
 

00:05:27.560 --> 00:05:30.070
offers improved stability and a number
of new features including improvements

00:05:30.070 --> 00:05:30.080
of new features including improvements
 

00:05:30.080 --> 00:05:31.390
of new features including improvements
to the built in integrations with

00:05:31.390 --> 00:05:31.400
to the built in integrations with
 

00:05:31.400 --> 00:05:33.520
to the built in integrations with
version control systems such as support

00:05:33.520 --> 00:05:33.530
version control systems such as support
 

00:05:33.530 --> 00:05:35.950
version control systems such as support
for rebase on git and cool new features

00:05:35.950 --> 00:05:35.960
for rebase on git and cool new features
 

00:05:35.960 --> 00:05:38.230
for rebase on git and cool new features
like finding path and distraction free

00:05:38.230 --> 00:05:38.240
like finding path and distraction free
 

00:05:38.240 --> 00:05:40.000
like finding path and distraction free
mode there's also a unified user

00:05:40.000 --> 00:05:40.010
mode there's also a unified user
 

00:05:40.010 --> 00:05:41.950
mode there's also a unified user
interface for testing that includes a

00:05:41.950 --> 00:05:41.960
interface for testing that includes a
 

00:05:41.960 --> 00:05:43.720
interface for testing that includes a
test runner tool window inline

00:05:43.720 --> 00:05:43.730
test runner tool window inline
 

00:05:43.730 --> 00:05:46.030
test runner tool window inline
statistics and a test result history

00:05:46.030 --> 00:05:46.040
statistics and a test result history
 

00:05:46.040 --> 00:05:47.650
statistics and a test result history
we've built on top of those test

00:05:47.650 --> 00:05:47.660
we've built on top of those test
 

00:05:47.660 --> 00:05:49.510
we've built on top of those test
improvements allowing you to have both

00:05:49.510 --> 00:05:49.520
improvements allowing you to have both
 

00:05:49.520 --> 00:05:52.180
improvements allowing you to have both
Android and unit tests or sets active

00:05:52.180 --> 00:05:52.190
Android and unit tests or sets active
 

00:05:52.190 --> 00:05:54.430
Android and unit tests or sets active
while you develop enabling refactorings

00:05:54.430 --> 00:05:54.440
while you develop enabling refactorings
 

00:05:54.440 --> 00:05:56.860
while you develop enabling refactorings
across those source sets we've also

00:05:56.860 --> 00:05:56.870
across those source sets we've also
 

00:05:56.870 --> 00:05:58.480
across those source sets we've also
worked closely with Google search to

00:05:58.480 --> 00:05:58.490
worked closely with Google search to
 

00:05:58.490 --> 00:06:00.370
worked closely with Google search to
make it easy to create deep links within

00:06:00.370 --> 00:06:00.380
make it easy to create deep links within
 

00:06:00.380 --> 00:06:01.780
make it easy to create deep links within
your app including static code

00:06:01.780 --> 00:06:01.790
your app including static code
 

00:06:01.790 --> 00:06:03.460
your app including static code
inspections to check that your links are

00:06:03.460 --> 00:06:03.470
inspections to check that your links are
 

00:06:03.470 --> 00:06:05.050
inspections to check that your links are
correctly configured and real-time

00:06:05.050 --> 00:06:05.060
correctly configured and real-time
 

00:06:05.060 --> 00:06:07.330
correctly configured and real-time
testing to confirm Google can index and

00:06:07.330 --> 00:06:07.340
testing to confirm Google can index and
 

00:06:07.340 --> 00:06:15.460
testing to confirm Google can index and
render your app pages correctly

00:06:15.460 --> 00:06:15.470
 
 

00:06:15.470 --> 00:06:17.110
 
episodes of Android tool time will dive

00:06:17.110 --> 00:06:17.120
episodes of Android tool time will dive
 

00:06:17.120 --> 00:06:18.970
episodes of Android tool time will dive
deeper into these and other new features

00:06:18.970 --> 00:06:18.980
deeper into these and other new features
 

00:06:18.980 --> 00:06:21.040
deeper into these and other new features
from Android studio so subscribe to

00:06:21.040 --> 00:06:21.050
from Android studio so subscribe to
 

00:06:21.050 --> 00:06:22.570
from Android studio so subscribe to
Android developers on youtube and check

00:06:22.570 --> 00:06:22.580
Android developers on youtube and check
 

00:06:22.580 --> 00:06:24.730
Android developers on youtube and check
out the Android tool time playlist and

00:06:24.730 --> 00:06:24.740
out the Android tool time playlist and
 

00:06:24.740 --> 00:06:26.650
out the Android tool time playlist and
remember if you've been taking your

00:06:26.650 --> 00:06:26.660
remember if you've been taking your
 

00:06:26.660 --> 00:06:28.090
remember if you've been taking your
breaks based on building and deploying

00:06:28.090 --> 00:06:28.100
breaks based on building and deploying
 

00:06:28.100 --> 00:06:30.130
breaks based on building and deploying
your app you may want to start setting

00:06:30.130 --> 00:06:30.140
your app you may want to start setting
 

00:06:30.140 --> 00:06:31.930
your app you may want to start setting
alarm to remind you to eat and drink at

00:06:31.930 --> 00:06:31.940
alarm to remind you to eat and drink at
 

00:06:31.940 --> 00:06:32.800
alarm to remind you to eat and drink at
regular intervals

00:06:32.800 --> 00:06:32.810
regular intervals
 

00:06:32.810 --> 00:06:34.900
regular intervals
that's Android studio 2.0 and this was

00:06:34.900 --> 00:06:34.910
that's Android studio 2.0 and this was
 

00:06:34.910 --> 00:06:39.160
that's Android studio 2.0 and this was
Andrew at tool time time

