WEBVTT
Kind: captions
Language: en

00:00:00.020 --> 00:00:03.460
And a graphics processor is a specialist processor

00:00:04.020 --> 00:00:08.380
that is designed to make processing of three-dimensional images

00:00:08.380 --> 00:00:10.600
more efficient than other forms of processor.

00:00:10.820 --> 00:00:14.580
It is a digital world. It's all 1s and 0s, adds and minuses.

00:00:14.580 --> 00:00:18.340
And if you do lots of adds, you can turn it into a multiply.

00:00:18.660 --> 00:00:23.300
But actually, a graphics processor takes a very specialist workload

00:00:23.420 --> 00:00:25.740
and does it much more efficiently.

00:00:26.820 --> 00:00:30.580
What are the fundamental differences between a central processing unit

00:00:30.740 --> 00:00:32.520
and a graphics processing unit?

00:00:32.520 --> 00:00:35.460
Well, fundamentally, we're here to put pixels on screens.

00:00:35.700 --> 00:00:43.740
So, at the end of the day, we are here to execute some commands whose purpose is

00:00:43.740 --> 00:00:46.780
to say that pixel on that screen is that color.

00:00:47.320 --> 00:00:51.300
And usually that's presented to us as: Here's some data.

00:00:51.300 --> 00:00:54.580
So, usually there's a three-dimensional model.

00:00:54.880 --> 00:01:00.000
So, in front of us is a table. There's a circle which is a few feet off the ground

00:01:00.000 --> 00:01:04.560
and it's X thickness and it's got some legs and it's at this position.

00:01:04.560 --> 00:01:07.480
There's some chairs in the room. There's me, there's the walls all around.

00:01:07.480 --> 00:01:11.440
There's a three-dimensional model. So, first of all, you get given a bunch of coordinates

00:01:11.440 --> 00:01:13.720
and say the following things are at the following places.

00:01:13.740 --> 00:01:18.580
And then you say give them some more data, which is the chair's a lilac

00:01:18.580 --> 00:01:22.000
and the table's a sort of sludgy grey, and so it's fine.

00:01:22.000 --> 00:01:26.520
And so you get given some color information, which is what we call textures.

00:01:26.520 --> 00:01:30.600
The geometry of the scene is usually broken up into triangles

00:01:30.600 --> 00:01:34.940
because triangles is nice and simple. We're very simple people. We can't cope with complicated stuff.

00:01:34.940 --> 00:01:41.180
A triangle, three points, always has to be flat. You've never seen a triangle that isn't flat.

00:01:41.460 --> 00:01:48.760
And so you divide complex surfaces up into triangles and then you have some information

00:01:48.760 --> 00:01:50.360
about what colors those triangles are.

00:01:50.440 --> 00:01:54.840
So you say, right, okay, I've got the geometry. I've got the color.

00:01:54.840 --> 00:01:57.840
What do we do next? Well, you put some lights in the scene.

00:01:57.840 --> 00:02:02.360
So there's some lights in the ceiling which are shedding some light in certain directions.

00:02:02.380 --> 00:02:06.920
And then you need a camera. So you say the camera is here.

00:02:06.920 --> 00:02:09.900
So now you have to do some three-dimensional geometry to say

00:02:09.900 --> 00:02:14.940
well, what does it look like in the camera? And the first thing you observe is

00:02:14.940 --> 00:02:18.680
well, about half the room, you can't see. Phew, that's good.

00:02:18.680 --> 00:02:21.500
So, I don't have to calculate everything that's behind you.

00:02:21.500 --> 00:02:23.740
The only thing that I have to calculate are the bits you can see.

00:02:23.740 --> 00:02:27.360
And you project it so that it goes into the two-dimensional screen

00:02:27.360 --> 00:02:29.080
And this it what it looks like.

00:02:29.180 --> 00:02:35.120
And then you move the camera around, usually, to get sort of a real impression

00:02:35.120 --> 00:02:40.480
of moving through the scene. So, there's a lot of different types of calculation

00:02:40.480 --> 00:02:45.320
involved in that. First is loads and loads and loads of three-dimensional matrix arithmetic.

00:02:45.320 --> 00:02:49.400
You know, XYZ coordinates, sometimes four-dimensional arrays with

00:02:49.440 --> 00:02:57.780
XYZ and transparency information. And lots and lots of RGB, red, green, blue, color.

00:02:57.780 --> 00:03:02.680
So, a device that's really, really good at matrix arithmetic is a good start.

00:03:02.680 --> 00:03:08.300
Floating point, because the position of all of these things are usually expressed as floating point.

00:03:08.300 --> 00:03:13.180
And then finally, you've got this unit in the back which says, oh well, I've got lots and lots of pixels

00:03:13.180 --> 00:03:17.660
to deal with, so we need to run through that and get them all into a buffer in memory.

00:03:17.660 --> 00:03:24.660
So, some of that's really quite different from a CPU. A lot of three-dimensional plane equations have to be solved.

00:03:24.660 --> 00:03:30.600
So, for example, here's the table, here's the floor. Well, which bits of the floor and which bits of the table

00:03:30.600 --> 00:03:35.160
can I see? So you have to do a lot of matrix solving to work that one out.

00:03:35.560 --> 00:03:40.200
And that's the difference in the problem that gets given to us, right?

00:03:40.460 --> 00:03:46.380
The difference in the design is: We say, well actually, I can do loads of this in parallel

00:03:48.340 --> 00:03:54.160
Actually, I can do a lot of these quick calculations in parallel because they don't depend on each other.

00:03:54.680 --> 00:04:01.300
So, every time you hear the phrase, "For every vertex in the geometry, do blah."

00:04:01.780 --> 00:04:09.140
"For every pixel in the screen, do foo." You can actually say, well actually, that's a million pixels.

00:04:09.140 --> 00:04:13.860
I can actually calculate them in batches of 256 or something like that.

00:04:14.240 --> 00:04:21.340
So, we extract the parallelism out of the algorithm, and we design a processor that

00:04:21.340 --> 00:04:26.080
is actually very good at parallel processing. So the difference between a CPU and a GPU

00:04:26.080 --> 00:04:31.400
predominately is, yes, there's some really, really fixed function blocks which we do very, very efficiently

00:04:31.540 --> 00:04:38.340
compared to a CPU, which does everything itself. But also, we are very, very good at extracting parallelism.

00:04:38.340 --> 00:04:44.820
So, if I want to multiply three floating point numbers together, I'll do it more slowly than a CPU.

00:04:45.300 --> 00:04:50.960
But if you ask me to multiply a million three floating point numbers together,

00:04:51.340 --> 00:04:58.660
then the length of time it takes me to do a million will be a lot shorter than the time it takes a CPU to do a million.

00:04:58.920 --> 00:05:03.380
So, we don't care so much about how long anything individually takes.

00:05:03.380 --> 00:05:08.180
What we work on is the bulk throughput, and it's a different end to the problem.

00:05:08.400 --> 00:05:13.580
And of course, there are blurred areas, and some people are now saying

00:05:13.580 --> 00:05:19.180
Well, actually there's some sort of computing I could do that would do better on a GPU

00:05:19.380 --> 00:05:24.840
than on a CPU. And so you get this whole thing called GPU computing coming along

00:05:24.840 --> 00:05:30.160
where people are not actually doing graphics, but they're doing throughput computing.

00:05:30.160 --> 00:05:33.120
And actually, that's been quite interesting hearing.

00:05:33.120 --> 00:05:38.540
I think one of the ones that somebody suggested was people doing Bitcoin mining with GPUs

00:05:38.680 --> 00:05:40.560
because it's just lots and lots of maths.

00:05:40.720 --> 00:05:52.580
Yes. But also, image processing. So, in modern devices, you tend to have quite a poor lens,

00:05:52.600 --> 00:05:58.760
or a poor sensor, and you're trying to take pictures that are as good as that camera you're holding

00:05:58.760 --> 00:06:03.920
in your hand that costs thousands. And actually, that takes an awful lot of image cleanup

00:06:03.920 --> 00:06:09.260
So, there's an awful lot of computing that's taking place on those digital images.

00:06:09.320 --> 00:06:14.600
And it turns out that actually a lot of those go quite well when executed on GPUs,

00:06:14.720 --> 00:06:16.320
not executed on CPUs.

00:06:16.320 --> 00:06:18.560
Can it fix my bad focusing as well?

00:06:18.840 --> 00:06:20.920
That is coming, that is coming.

