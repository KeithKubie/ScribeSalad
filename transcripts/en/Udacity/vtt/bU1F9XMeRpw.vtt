WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:03.562
It wasn't so bad that the program crashed in this case. I can just add the

00:00:03.562 --> 00:00:08.278
condition back, compile, and run again. And this only cost me a couple of

00:00:08.278 --> 00:00:12.025
minutes. But if I had been running this program for a whole day or something,

00:00:12.025 --> 00:00:16.322
and it had crashed and lost all my data. Or my website went down and I had to

00:00:16.322 --> 00:00:20.070
rush to my computer and run the program again to get it up and running. I would

00:00:20.070 --> 00:00:23.227
be pretty sad. If you find yourself casting something to an interface type and

00:00:23.227 --> 00:00:27.360
checking whether things are instances of other things. It's often a sign that

00:00:27.360 --> 00:00:30.496
you could design your code better, so that you could make the Java compiler do

00:00:30.496 --> 00:00:35.751
more work for you, and find errors at compile time instead of run time. So,

00:00:35.751 --> 00:00:39.863
what could we have done in this case? Maybe what we really wanted instead of a

00:00:39.863 --> 00:00:44.950
Moveable and a Drawable interface was some other interface, like Animated.

00:00:44.950 --> 00:00:49.127
Maybe Animated would have void draw As well as void move. And when houses

00:00:49.127 --> 00:00:52.391
implemented the move method, they could return immediately instead of actually

00:00:52.391 --> 00:00:56.623
moving. That way we could ask all of the animated elements to move And not

00:00:56.623 --> 00:01:02.152
worry about run-time errors. Or maybe we should accept that one ArrayList isn't

00:01:02.152 --> 00:01:07.530
enough here. Maybe we wanted two ArrayLists one Drawable and one Movable. There

00:01:07.530 --> 00:01:11.622
are lots of possibilities here, finding the best ones is something that you'll

00:01:11.622 --> 00:01:15.305
find by trying more things, keep practicing.

