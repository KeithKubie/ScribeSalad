WEBVTT
Kind: captions
Language: en

00:00:02.630 --> 00:00:05.160
It's no secret that in order
for your app to be successful,

00:00:05.160 --> 00:00:08.550
the user has to run it, and for
it continue to provide value,

00:00:08.550 --> 00:00:10.225
sometimes it needs
to keep running.

00:00:10.225 --> 00:00:12.100
This is tough to do when
the phone is asleep.

00:00:12.100 --> 00:00:13.590
I mean, what are you going
to do, wake up the phone

00:00:13.590 --> 00:00:15.673
and do the work even though
it's already sleeping?

00:00:15.673 --> 00:00:18.180
Well yes, of course, but be
careful here because there's

00:00:18.180 --> 00:00:20.682
a large battery problem
waiting to happen.

00:00:20.682 --> 00:00:23.140
My name is Colt McAnlis, and
disturbing your phone's beauty

00:00:23.140 --> 00:00:25.390
sleep is one of the biggest
causes of unneeded battery

00:00:25.390 --> 00:00:27.829
drain on Android, but
with a few simple changes

00:00:27.829 --> 00:00:30.120
to how you're working, you
can achieve the same results

00:00:30.120 --> 00:00:31.830
with less battery problems.

00:00:31.830 --> 00:00:34.630
To illustrate this point, let's
talk about my good friend Rado.

00:00:34.630 --> 00:00:37.070
He's an avid social
user and a game player,

00:00:37.070 --> 00:00:39.490
which means his running
applications are constantly

00:00:39.490 --> 00:00:42.100
checking scoreboards, uploading
photos, and pulling down

00:00:42.100 --> 00:00:44.800
the latest hashtag
crazes, but they

00:00:44.800 --> 00:00:47.770
do this even when Rado has
put his phone to sleep, which

00:00:47.770 --> 00:00:50.300
means by lunch, his phone
is already out of battery.

00:00:50.300 --> 00:00:52.630
Rado has to constantly
recharge his phone

00:00:52.630 --> 00:00:54.817
because it suffers
from sleep deprivation.

00:00:54.817 --> 00:00:56.900
That is, because these
applications are constantly

00:00:56.900 --> 00:00:59.080
waking up the phone, they're
eating up battery life

00:00:59.080 --> 00:01:02.751
instead of letting his phone
sleep, and sleep is important.

00:01:02.751 --> 00:01:04.209
Remember that
Android will turn off

00:01:04.209 --> 00:01:05.970
various parts of your
hardware in order

00:01:05.970 --> 00:01:07.500
to prolong battery life.

00:01:07.500 --> 00:01:09.840
First, the screen will dim,
followed by it eventually

00:01:09.840 --> 00:01:11.570
turning off, and
finally, the CPU

00:01:11.570 --> 00:01:14.860
will go to sleep, all in an
attempt to save precious,

00:01:14.860 --> 00:01:16.210
precious battery.

00:01:16.210 --> 00:01:19.140
But even in this inactive state,
most apps will try to do work,

00:01:19.140 --> 00:01:21.712
and they will have to wake
up the phone to do so.

00:01:21.712 --> 00:01:23.920
Now, the easiest way for an
app to wake up your phone

00:01:23.920 --> 00:01:27.580
to do work is with the
PowerManager.Wakelock API,

00:01:27.580 --> 00:01:29.270
which is used to
keep the CPU running

00:01:29.270 --> 00:01:31.615
and prevent the screen from
dimming or turning off.

00:01:31.615 --> 00:01:33.490
This allows your phone
to do things like wake

00:01:33.490 --> 00:01:35.370
up at some future
point, do some work,

00:01:35.370 --> 00:01:37.195
and then let the phone
go back to sleep.

00:01:37.195 --> 00:01:39.320
But see, it's that last
part that's the tricky one.

00:01:39.320 --> 00:01:41.660
See, acquiring Wakelock
is actually really easy,

00:01:41.660 --> 00:01:44.430
but knowing how to release
it is more problematic.

00:01:44.430 --> 00:01:47.220
There's lots of ways that
this can go horribly wrong.

00:01:47.220 --> 00:01:50.360
What if your application
takes 60 minutes instead

00:01:50.360 --> 00:01:52.180
of the expected 10
seconds it takes

00:01:52.180 --> 00:01:54.810
to analyze some image before
uploading it to the server?

00:01:54.810 --> 00:01:56.840
Or what if the server
crashes and you never

00:01:56.840 --> 00:01:59.030
get a response from
your social media ping,

00:01:59.030 --> 00:02:01.620
and you end up waiting
forever for a result?

00:02:01.620 --> 00:02:03.947
The end result is the phone
never sleeps and chews

00:02:03.947 --> 00:02:06.530
through your battery, which is
exactly why you should be using

00:02:06.530 --> 00:02:10.229
the version of wakelock.acquire
that takes a timeout parameter.

00:02:10.229 --> 00:02:12.020
This will force the
Wakelock to be released

00:02:12.020 --> 00:02:14.840
after a certain amount of time
just in case one of these edge

00:02:14.840 --> 00:02:16.771
cases actually happens.

00:02:16.771 --> 00:02:18.770
But this won't actually
solve the problem fully.

00:02:18.770 --> 00:02:20.936
I mean, what should you set
the timeout value to be,

00:02:20.936 --> 00:02:23.960
or how long should you wait
before trying to do it again

00:02:23.960 --> 00:02:25.920
in case you actually
fail the first time?

00:02:25.920 --> 00:02:29.290
The right solution to this
might be to use inexact timers.

00:02:29.290 --> 00:02:31.760
See, normally, you set some
future date for your event

00:02:31.760 --> 00:02:33.370
to kick off and
wake up the phone,

00:02:33.370 --> 00:02:35.500
but it might be better
to change that timing

00:02:35.500 --> 00:02:37.170
in order to conserve battery.

00:02:37.170 --> 00:02:39.170
For example, if there's
another application that

00:02:39.170 --> 00:02:42.590
needs to wake up five minutes
after yours has requested to,

00:02:42.590 --> 00:02:44.130
it's optimal to
wait for that one

00:02:44.130 --> 00:02:46.950
to happen so that you can
bundle the work together.

00:02:46.950 --> 00:02:49.370
This is at the core of
what inexact timers do.

00:02:49.370 --> 00:02:51.120
You can schedule some
work for the future,

00:02:51.120 --> 00:02:53.328
but if the system detects
that there's a better time,

00:02:53.328 --> 00:02:55.620
it can delay your work
in order to save battery.

00:02:55.620 --> 00:02:59.180
And in reality, there's a
whole group of other situations

00:02:59.180 --> 00:03:02.030
that might be better to
do battery intensive work,

00:03:02.030 --> 00:03:04.580
for example, when the phone is
charging or connected to Wi-Fi

00:03:04.580 --> 00:03:06.710
or already woken up
by another process.

00:03:06.710 --> 00:03:09.790
If any of your work can be
deferred to a future date

00:03:09.790 --> 00:03:11.650
when these conditions
might be ideal,

00:03:11.650 --> 00:03:14.930
then you can help improve
battery life significantly.

00:03:14.930 --> 00:03:18.290
This is exactly what the
JobScheduler API is for.

00:03:18.290 --> 00:03:21.100
See, this API is perfect to
schedule some future work

00:03:21.100 --> 00:03:23.757
to wait for various combinations
of these better conditions,

00:03:23.757 --> 00:03:25.840
for example, waiting until
the unit is plugged in,

00:03:25.840 --> 00:03:28.010
waiting until you're
on Wi-Fi, or batching

00:03:28.010 --> 00:03:29.760
a bunch of these tasks
together at once.

00:03:29.760 --> 00:03:31.820
Basically, with
one simple API, you

00:03:31.820 --> 00:03:33.450
get all that
scheduling for free.

00:03:33.450 --> 00:03:36.340
And don't forget with the new
revamped battery usage details

00:03:36.340 --> 00:03:38.250
on the phone, users
now have the ability

00:03:38.250 --> 00:03:41.550
to see how long your app is
keeping their phone awake for

00:03:41.550 --> 00:03:43.710
and even have the
ability to uninstall it

00:03:43.710 --> 00:03:46.660
right from the same screen,
which means you should probably

00:03:46.660 --> 00:03:48.660
take a few extra
minutes and make sure

00:03:48.660 --> 00:03:51.790
that all of your wakelock logic
is in order using the Battery

00:03:51.790 --> 00:03:53.040
Historian tool.

00:03:53.040 --> 00:03:55.280
This tool rolled out with
the L release of Android

00:03:55.280 --> 00:03:58.130
and can help you understand
how often wakes are kicked off,

00:03:58.130 --> 00:04:00.480
who initialized them,
and how long they lasted,

00:04:00.480 --> 00:04:03.000
all in a nice visual package.

00:04:03.000 --> 00:04:06.030
With these new tools and APIs,
you can finally give that sleep

00:04:06.030 --> 00:04:08.440
deprived phone some
well deserved rest.

00:04:08.440 --> 00:04:11.222
But of course, if you would
like to avoid sleeping,

00:04:11.222 --> 00:04:13.680
then check out the rest of the
Android Performance Patterns

00:04:13.680 --> 00:04:16.160
resources and don't forget
to join our Google+ community

00:04:16.160 --> 00:04:17.339
as well.

00:04:17.339 --> 00:04:19.929
So keep calm, profile your
code, and always remember

00:04:19.929 --> 00:04:21.429
perf matters.

00:04:21.429 --> 00:04:25.079
[MUSIC PLAYING]

