WEBVTT
Kind: captions
Language: en

00:00:00.950 --> 00:00:04.140
Structural queries are still a
big need for modern web apps.

00:00:04.140 --> 00:00:07.240
And with Web SQL deprecated,
IndexedDB not having

00:00:07.240 --> 00:00:09.270
structural queries,
web developers

00:00:09.270 --> 00:00:12.670
need a tool to satisfy their
structural query needs.

00:00:12.670 --> 00:00:13.390
Hi.

00:00:13.390 --> 00:00:15.030
My name is Arthur
Hsu, and I'm here

00:00:15.030 --> 00:00:16.790
to talk about the
Lovefield project that

00:00:16.790 --> 00:00:18.160
solves the problem.

00:00:18.160 --> 00:00:21.760
Lovefield is a relational
database for web apps.

00:00:21.760 --> 00:00:23.960
Web app developers
need structural queries

00:00:23.960 --> 00:00:25.370
that work in the mobile world.

00:00:25.370 --> 00:00:29.200
Our users need the web app to
work either online or offline.

00:00:29.200 --> 00:00:30.540
How can we build such apps?

00:00:30.540 --> 00:00:33.550
This seems to be the
reason IndexedDB was built.

00:00:33.550 --> 00:00:36.680
But even with offline support,
there is a steep learning curve

00:00:36.680 --> 00:00:38.480
to make it useful for your app.

00:00:38.480 --> 00:00:41.970
Moreover, IndexedDB does not
provide structural queries,

00:00:41.970 --> 00:00:45.300
so many of us just write domain
specific query functions that

00:00:45.300 --> 00:00:49.450
works only for the apps
that we were working on.

00:00:49.450 --> 00:00:52.970
To address these problems, I
built Lovefield, a JavaScript

00:00:52.970 --> 00:00:57.620
driven relational database
that runs inside your browser.

00:00:57.620 --> 00:01:00.130
Lovefield improves on
the concept of IndexedDB

00:01:00.130 --> 00:01:01.950
with simpler APIs
and more control

00:01:01.950 --> 00:01:03.980
over persistent storage.

00:01:03.980 --> 00:01:06.340
It is build for
structural query needs.

00:01:06.340 --> 00:01:08.840
IndexedDB does not offer
structural query features

00:01:08.840 --> 00:01:10.720
such as sorting by
multiple columns

00:01:10.720 --> 00:01:13.470
or joining the results
of multiple tables.

00:01:13.470 --> 00:01:16.000
These can be easy
done with Lovefield.

00:01:16.000 --> 00:01:18.270
Lovefield also makes
data persistence way

00:01:18.270 --> 00:01:20.090
easier in two ways.

00:01:20.090 --> 00:01:23.050
First, the APIs are
much easier to use.

00:01:23.050 --> 00:01:25.690
And secondly, Lovefield
offers transactions

00:01:25.690 --> 00:01:28.950
which provide you full
control on when to flush data

00:01:28.950 --> 00:01:30.980
to persistent stores.

00:01:30.980 --> 00:01:33.110
The last and most
important part is

00:01:33.110 --> 00:01:35.730
Lovefield is designed
with developers in mind.

00:01:35.730 --> 00:01:39.570
It is open source, easy to use,
cross browser-- yes you hear me

00:01:39.570 --> 00:01:40.430
correctly.

00:01:40.430 --> 00:01:43.900
Lovefield works on IE,
Chrome, Firefox, and Safari.

00:01:43.900 --> 00:01:45.830
Even better,
Lovefield is designed

00:01:45.830 --> 00:01:49.130
to work with existing
JavaScript frameworks.

00:01:49.130 --> 00:01:52.350
And we've tested with
jQuery, Angular, and Polymer

00:01:52.350 --> 00:01:54.030
with no problem.

00:01:54.030 --> 00:01:58.130
Let's move to a quick example
to see what Lovefield can do.

00:01:58.130 --> 00:02:00.550
Assume we have two
different type of objects.

00:02:00.550 --> 00:02:04.420
One is called Task that
stores a task to be finished.

00:02:04.420 --> 00:02:06.740
And the other is called
Person which stores

00:02:06.740 --> 00:02:08.990
data about a person in our app.

00:02:08.990 --> 00:02:10.729
In the good old days,
we list all tasks

00:02:10.729 --> 00:02:12.580
that are in the works
with their owners

00:02:12.580 --> 00:02:15.120
using this simple SQL statement.

00:02:15.120 --> 00:02:17.080
Select from task
and person where

00:02:17.080 --> 00:02:22.790
task state equals to working and
task owner equals to person.id.

00:02:22.790 --> 00:02:26.450
How shall we do this shiny
new JavaScript web app?

00:02:26.450 --> 00:02:29.780
Let's forget about the code
that reads data out of index db.

00:02:29.780 --> 00:02:32.570
Let's just concentrate
on the select logic.

00:02:32.570 --> 00:02:36.130
Say we have an array of tasks
objects, a hash table that maps

00:02:36.130 --> 00:02:38.100
person ID to person objects.

00:02:38.100 --> 00:02:41.070
To do the select, we
need this wall code.

00:02:41.070 --> 00:02:43.180
This code's problem
is not only the size,

00:02:43.180 --> 00:02:47.310
but also how much effort needed
to maintain or change it.

00:02:47.310 --> 00:02:51.340
Lovefield is designed to make
the simple SELECT simple again.

00:02:51.340 --> 00:02:54.850
In Lovefield, we describe
data type of table in schema

00:02:54.850 --> 00:02:57.700
To construct a query, we
first retrieve the schema

00:02:57.700 --> 00:03:00.330
by calling the getSchema
function of the database

00:03:00.330 --> 00:03:01.620
connection.

00:03:01.620 --> 00:03:04.640
Then we construct our query
using the builder pattern,

00:03:04.640 --> 00:03:07.700
which is very similar
to SQL SELECT statement

00:03:07.700 --> 00:03:09.490
and easy to learn.

00:03:09.490 --> 00:03:12.140
Lovefield's queries are
JavaScript functions.

00:03:12.140 --> 00:03:14.390
After minifying
and uglifying, it

00:03:14.390 --> 00:03:17.240
makes SQL injection
next to impossible.

00:03:17.240 --> 00:03:19.390
This is very good
for security reasons.

00:03:19.390 --> 00:03:22.210
It also has positive
impacts on performance.

00:03:22.210 --> 00:03:23.890
You're writing
JavaScript functions

00:03:23.890 --> 00:03:25.440
that cascade together.

00:03:25.440 --> 00:03:30.160
There's no need for a SQL
parser, and it just works.

00:03:30.160 --> 00:03:32.480
Lovefield can do more
than just simple queries.

00:03:32.480 --> 00:03:35.510
It has some great
functionality such as grew by,

00:03:35.510 --> 00:03:39.670
event sorting, pagination using
LIMIT and SKIP, and so on.

00:03:39.670 --> 00:03:41.570
The code snippet
here demonstrates how

00:03:41.570 --> 00:03:44.900
to group results, sort the
results by multiple columns,

00:03:44.900 --> 00:03:48.600
and implement pagination
using LIMIT and SKIP.

00:03:48.600 --> 00:03:50.300
Lovefield's relational
query engine

00:03:50.300 --> 00:03:54.190
provides SQL-like functions--
fundamental functions, SELECT,

00:03:54.190 --> 00:03:57.760
INSERT, UPDATE, and DELETE,
and also atomic transactions

00:03:57.760 --> 00:04:01.880
that you have to control
to commit or roll back.

00:04:01.880 --> 00:04:04.730
I've shown events sorting,
LIMIT, and SKIP, and GROUP

00:04:04.730 --> 00:04:06.730
BY in previous slides.

00:04:06.730 --> 00:04:10.980
Moreover, Lovefield has common
aggregators, inner table join,

00:04:10.980 --> 00:04:14.410
self table join, left
outer join, and aliases.

00:04:14.410 --> 00:04:17.730
These features empower you to
perform very complex queries

00:04:17.730 --> 00:04:20.620
in very few lines of code.

00:04:20.620 --> 00:04:22.810
Lovefield provides
parameterized queries.

00:04:22.810 --> 00:04:25.130
And the idea is
to prepare a query

00:04:25.130 --> 00:04:27.150
and bind the variables
to that query

00:04:27.150 --> 00:04:29.940
so that the runtime values
of the bound variables

00:04:29.940 --> 00:04:31.970
will be used to run the query.

00:04:31.970 --> 00:04:33.800
One super cool
feature that Lovefield

00:04:33.800 --> 00:04:36.050
has is observable query.

00:04:36.050 --> 00:04:40.250
Lovefield allows observation of
the results of a SELECT query.

00:04:40.250 --> 00:04:42.080
Say another
asynchronous function

00:04:42.080 --> 00:04:44.670
in the code updates
table of contents

00:04:44.670 --> 00:04:47.150
or the values of the
parameterized query findings

00:04:47.150 --> 00:04:48.240
change.

00:04:48.240 --> 00:04:51.000
The updated query results
will be propagated

00:04:51.000 --> 00:04:53.040
to the handler of the observer.

00:04:53.040 --> 00:04:56.380
This offers a clean way
of updating UI contents

00:04:56.380 --> 00:04:59.510
in an event driven fashion.

00:04:59.510 --> 00:05:03.860
Behavior wise, Lovefield has
integrity constraint checks,

00:05:03.860 --> 00:05:08.700
B+-Tree for indices, a query
optimizer to ensure that

00:05:08.700 --> 00:05:12.440
the best indices are used and
the queries are run as fast

00:05:12.440 --> 00:05:16.340
as possible, a query analyzer
to display to the user how

00:05:16.340 --> 00:05:19.395
the query is executed so
that developers can tune

00:05:19.395 --> 00:05:21.690
their database and queries.

00:05:21.690 --> 00:05:23.850
Lovefield is all
about performance.

00:05:23.850 --> 00:05:26.720
The team created a
performance dashboard

00:05:26.720 --> 00:05:29.990
to detail any performance
regressions for daily changes.

00:05:29.990 --> 00:05:33.250
A lot of time has spent on
optimizing the query engine.

00:05:33.250 --> 00:05:35.460
If you do find any
query or execution

00:05:35.460 --> 00:05:38.340
pass that seems to be
slower than expected,

00:05:38.340 --> 00:05:40.600
please report on GitHub,
and someone in the team

00:05:40.600 --> 00:05:42.610
will look into it.

00:05:42.610 --> 00:05:45.920
Lovefield makes persisting data
inside the browser much easier.

00:05:45.920 --> 00:05:48.260
Persisting data
inside the browser

00:05:48.260 --> 00:05:51.240
is useful when the user
go offline and want

00:05:51.240 --> 00:05:53.690
to use the app, or to
improve the app loading

00:05:53.690 --> 00:05:57.680
experience by using local cache
before the server data returns.

00:05:57.680 --> 00:06:00.025
Lovefield by default
uses IndexedDB

00:06:00.025 --> 00:06:03.050
as persistent storage.

00:06:03.050 --> 00:06:05.790
If you're only interested in
using Lovefield's query engine

00:06:05.790 --> 00:06:08.210
but not really wanted to
persist sensitive data

00:06:08.210 --> 00:06:11.200
inside the browser, then
Memory DB is for you.

00:06:11.200 --> 00:06:14.160
Lovefield cab be used as
a pure in memory cache.

00:06:14.160 --> 00:06:16.850
Data come from some
database sources--

00:06:16.850 --> 00:06:19.120
say service in the
cloud-- and the app

00:06:19.120 --> 00:06:22.680
uses Lovefield's query engine to
store the least data in memory

00:06:22.680 --> 00:06:24.820
and performs query locally.

00:06:24.820 --> 00:06:27.240
Another exciting data
persistence layer Lovefield

00:06:27.240 --> 00:06:29.450
has is based on Firebase.

00:06:29.450 --> 00:06:31.680
Firebase is a cloud
based database.

00:06:31.680 --> 00:06:35.390
Using Lovefield on top of it
makes the best of both worlds,

00:06:35.390 --> 00:06:37.730
a fully synchronized
cloud database

00:06:37.730 --> 00:06:40.340
and the powerful relational
query engine running on browser

00:06:40.340 --> 00:06:42.730
provided Lovefield.

00:06:42.730 --> 00:06:46.240
So if your web app is looking
for a simpler relational

00:06:46.240 --> 00:06:48.810
database with the
power of SQL, Lovefield

00:06:48.810 --> 00:06:50.710
is a perfect match for you.

00:06:50.710 --> 00:06:54.080
For more information, check out
web based code lab from Google

00:06:54.080 --> 00:06:58.490
I/O, or browse over to out
GitHub page and grab the code

00:06:58.490 --> 00:07:00.090
and play around.

00:07:00.090 --> 00:07:01.860
Feel free to leave
us some feedback.

00:07:01.860 --> 00:07:03.910
And if you find a
problem, we're more than

00:07:03.910 --> 00:07:05.960
happy to accept contributions.

00:07:05.960 --> 00:07:08.160
Anyhow, check out the
Lovefield project,

00:07:08.160 --> 00:07:09.320
and thanks for watching.

00:07:09.320 --> 00:07:12.970
[MUSIC PLAYING]

