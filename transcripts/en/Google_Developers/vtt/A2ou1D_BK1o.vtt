WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.060
MIKE WOLFSON: Thank
you for coming, guys.

00:00:07.060 --> 00:00:09.410
My name's Mike
Wolfson I am going

00:00:09.410 --> 00:00:12.520
to talk about Android
developer tools.

00:00:12.520 --> 00:00:16.940
I recently-- we'll
get into it-- just

00:00:16.940 --> 00:00:19.570
wanted to give you a quick
concept of what the agenda is

00:00:19.570 --> 00:00:22.370
so you guys have an idea of what
we're going to be doing today

00:00:22.370 --> 00:00:24.161
I'm going to start off
with an introduction

00:00:24.161 --> 00:00:26.930
both about myself
and about the tools.

00:00:26.930 --> 00:00:30.545
We're going to talk about
ADT and Command line tools,

00:00:30.545 --> 00:00:36.320
Emulator, talk about
some shortcuts for coding

00:00:36.320 --> 00:00:38.710
and then we'll talk about
performance monitoring

00:00:38.710 --> 00:00:40.690
and things like that.

00:00:40.690 --> 00:00:42.350
I just want to give you an idea.

00:00:42.350 --> 00:00:45.800
I've given this talk previously,
I've given it a few times,

00:00:45.800 --> 00:00:51.180
but this particular slide
deck came from OSCON.

00:00:51.180 --> 00:00:54.760
Their presentations are
targeting 40 minutes which

00:00:54.760 --> 00:00:57.890
is not a lot of time
so I've expanded it

00:00:57.890 --> 00:00:59.370
quite a bit for
this presentation

00:00:59.370 --> 00:01:03.340
but I think it'll go about, I'm
targeting just about a little

00:01:03.340 --> 00:01:06.310
over an hour, hour
and 15 minutes.

00:01:06.310 --> 00:01:08.190
If you want to ask
questions, go ahead

00:01:08.190 --> 00:01:10.910
and raise your
hand and interrupt.

00:01:10.910 --> 00:01:13.739
Obviously if I can't
answer it or if it's

00:01:13.739 --> 00:01:15.530
too much of a digression
we'll just move on

00:01:15.530 --> 00:01:18.540
and I'll answer afterwards.

00:01:18.540 --> 00:01:21.170
I mentioned I've given this
talk a few times at OSCON

00:01:21.170 --> 00:01:23.170
and DevCon, and a
few other places.

00:01:23.170 --> 00:01:27.370
Generally, I have had live
demos in the presentation.

00:01:27.370 --> 00:01:30.360
When I did this talk for
OSCON I put all the demos,

00:01:30.360 --> 00:01:32.480
kind of as slides,
and everything

00:01:32.480 --> 00:01:33.440
went so much smoother.

00:01:33.440 --> 00:01:35.790
So there won't be
a lot of demos,

00:01:35.790 --> 00:01:40.190
but if there's something that,
in particular you want to see

00:01:40.190 --> 00:01:41.470
we can do that afterwards.

00:01:41.470 --> 00:01:44.120
I'd be happy to show you
how to run any of the tools,

00:01:44.120 --> 00:01:46.605
specifically, how to
run any of the demos,

00:01:46.605 --> 00:01:47.790
or any sort of questions.

00:01:47.790 --> 00:01:53.110
So we will tackle
that afterwards.

00:01:53.110 --> 00:01:57.300
OK, so just a
little bit about me.

00:01:57.300 --> 00:01:59.590
I guess the most
important thing about me,

00:01:59.590 --> 00:02:03.380
is I run the Phoenix chapter
of the Google Developer group.

00:02:03.380 --> 00:02:07.595
I founded it, I've
run it for I don't

00:02:07.595 --> 00:02:10.870
know how many years, but
anyway I run a Google Developer

00:02:10.870 --> 00:02:12.200
group in Phoenix.

00:02:12.200 --> 00:02:17.400
I love the community and I love
just getting people together

00:02:17.400 --> 00:02:20.780
to talk about tools and stuff.

00:02:20.780 --> 00:02:24.220
I'm also a full time
Android developer.

00:02:24.220 --> 00:02:27.190
I currently work, I live in
Phoenix, I work for a company

00:02:27.190 --> 00:02:31.070
here in Silicon Valley, in
San Mateo, named Epocrates,

00:02:31.070 --> 00:02:34.000
they're a healthcare
point of service app.

00:02:34.000 --> 00:02:36.540
Some people, maybe,
have heard of them.

00:02:36.540 --> 00:02:39.280
And I am a full time
Android developer.

00:02:39.280 --> 00:02:41.180
That's what I do in
my day job, and that's

00:02:41.180 --> 00:02:42.990
also what I do for fun.

00:02:42.990 --> 00:02:46.020
So I've been lucky
enough to find

00:02:46.020 --> 00:02:49.210
a job that allows me
to do my hobby for fun.

00:02:49.210 --> 00:02:52.550
Previous to that, I have about
15 years of experience, mostly,

00:02:52.550 --> 00:02:56.440
in Enterprise Java Development.

00:02:56.440 --> 00:02:58.000
So for the first
book, can anybody

00:02:58.000 --> 00:03:00.725
tell me what's unusual
about this picture?

00:03:00.725 --> 00:03:01.600
AUDIENCE: [INAUDIBLE]

00:03:05.680 --> 00:03:08.783
AUDIENCE: Why is there,
there's like some piece

00:03:08.783 --> 00:03:10.090
of paper [INAUDIBLE]

00:03:10.090 --> 00:03:11.560
AUDIENCE: [INAUDIBLE]

00:03:11.560 --> 00:03:14.010
AUDIENCE: You have
a cheat sheet?

00:03:14.010 --> 00:03:15.480
AUDIENCE: [INAUDIBLE]

00:03:15.480 --> 00:03:18.420
AUDIENCE: I see a KitKat.

00:03:18.420 --> 00:03:20.401
MIKE WOLFSON: No, that's
an ice cream sandwich.

00:03:20.401 --> 00:03:21.276
AUDIENCE: [INAUDIBLE]

00:03:23.970 --> 00:03:25.860
MIKE WOLFSON: OK, well
actually the statute

00:03:25.860 --> 00:03:27.880
is not correct anymore.

00:03:27.880 --> 00:03:29.977
The Jelly Bean
statue was changed.

00:03:29.977 --> 00:03:32.060
This picture was taken the
day that the Jelly Bean

00:03:32.060 --> 00:03:33.700
statue was unveiled.

00:03:33.700 --> 00:03:35.460
And they changed
the top of that.

00:03:35.460 --> 00:03:37.240
It doesn't have a
clear dome anymore.

00:03:37.240 --> 00:03:39.520
Now it's got a bit
of green thing on it.

00:03:39.520 --> 00:03:44.370
So, there'll be other
chances to get books.

00:03:44.370 --> 00:03:49.530
I also want to mention, if
you guys don't particularly

00:03:49.530 --> 00:03:52.360
want a hard copy
of the book, I'm

00:03:52.360 --> 00:03:55.200
more than happy to make the
soft copy available for download

00:03:55.200 --> 00:03:55.700
for free.

00:03:55.700 --> 00:03:58.164
So just keep that--

00:03:58.164 --> 00:03:59.519
[APPLAUSE]

00:03:59.519 --> 00:04:00.060
That's great.

00:04:00.060 --> 00:04:02.680
So obviously that's
between you, and me,

00:04:02.680 --> 00:04:05.630
and not O'Reilly, but anyway.

00:04:05.630 --> 00:04:07.710
[LAUGHTER]

00:04:07.710 --> 00:04:09.947
But I do want you guys to
know that if you really

00:04:09.947 --> 00:04:12.530
are interested in the book, come
up and talk to me afterwards.

00:04:12.530 --> 00:04:14.770
I'll give the URL, where
you can go download.

00:04:14.770 --> 00:04:19.649
I have all four different
types of DRM-free books

00:04:19.649 --> 00:04:20.500
in my Dropbox.

00:04:20.500 --> 00:04:23.080
So I'll share that link.

00:04:23.080 --> 00:04:27.490
So I just want you
guys filled out.

00:04:27.490 --> 00:04:29.450
OK, we talked enough about this.

00:04:29.450 --> 00:04:31.380
I just published this
book for O'Reilly.

00:04:31.380 --> 00:04:34.360
It's been out about
four or five months.

00:04:34.360 --> 00:04:38.140
So I've always been passionate
about the Android Developer

00:04:38.140 --> 00:04:39.000
Tools.

00:04:39.000 --> 00:04:41.310
They sometimes have
some challenges

00:04:41.310 --> 00:04:43.960
in understanding how to use
them, and how to run them.

00:04:43.960 --> 00:04:45.710
So I figured it
would be a good topic

00:04:45.710 --> 00:04:48.850
to share because I think
it's really important.

00:04:48.850 --> 00:04:51.300
I think the tools
are really fantastic

00:04:51.300 --> 00:04:54.390
and that the project, and
the team are really great.

00:04:54.390 --> 00:04:57.480
I think the discovery and
usability of the tools, not

00:04:57.480 --> 00:04:59.860
usability, but the discoveries
can be challenging.

00:04:59.860 --> 00:05:05.270
So that's why I wrote the book.

00:05:05.270 --> 00:05:08.680
The other thing is I
am an active developer,

00:05:08.680 --> 00:05:12.320
and for fun I have a app in the
market called Droid of the Day.

00:05:12.320 --> 00:05:15.490
It is a App of the Day app.

00:05:15.490 --> 00:05:18.751
Basically, everyday you'll get
a notification of a new app.

00:05:18.751 --> 00:05:20.500
It's been in the market
for quite a while.

00:05:20.500 --> 00:05:23.530
It's got a decent number
of downloads and it's free.

00:05:23.530 --> 00:05:27.984
So if you're interested
in apps, check it out.

00:05:27.984 --> 00:05:30.400
The other thing I'll mention
is if you're an app developer

00:05:30.400 --> 00:05:32.160
and you'd like to see
your app featured,

00:05:32.160 --> 00:05:34.600
this is a good way
to get visibility.

00:05:34.600 --> 00:05:36.480
And part of the
reason that I run

00:05:36.480 --> 00:05:39.410
this app is because I like to
help independent developers

00:05:39.410 --> 00:05:43.110
find an audience, which can be
challenging in the Play Store.

00:05:43.110 --> 00:05:46.090
If you're a developer,
let me know,

00:05:46.090 --> 00:05:49.260
and I'll see about
featuring your app.

00:05:49.260 --> 00:05:51.570
OK, real quick, I just
wanted to tell you

00:05:51.570 --> 00:05:54.830
a little bit about some
presentation resources.

00:05:54.830 --> 00:05:58.270
These slides are all
available up on SlideShare.

00:05:58.270 --> 00:06:00.470
So they're available.

00:06:00.470 --> 00:06:02.090
There's an old copy there now.

00:06:02.090 --> 00:06:04.450
After this
presentation I'll make

00:06:04.450 --> 00:06:06.320
sure I upload the newest copy.

00:06:06.320 --> 00:06:08.442
But that's what the
URL will be there.

00:06:08.442 --> 00:06:09.900
The other thing I
wanted to mention

00:06:09.900 --> 00:06:14.020
is, when writing the book
and for this presentation

00:06:14.020 --> 00:06:17.630
I did generate a project,
an Android project that

00:06:17.630 --> 00:06:24.110
is designed to help run the
demos and generate examples.

00:06:24.110 --> 00:06:26.350
So it's a pure GitHub.

00:06:26.350 --> 00:06:28.150
So if you want to
download that, that

00:06:28.150 --> 00:06:29.620
should help you
run all the demos

00:06:29.620 --> 00:06:32.260
and you'll see throughout
the presentation

00:06:32.260 --> 00:06:35.780
there are certain times
where I might reference that.

00:06:35.780 --> 00:06:40.040
So in regards to that any time
that you see a gray box down

00:06:40.040 --> 00:06:45.150
at the bottom in that style
that's going to infer it's

00:06:45.150 --> 00:06:47.130
a tool, it's something
for you to try

00:06:47.130 --> 00:06:49.440
at home, or a
Command to type in.

00:06:49.440 --> 00:06:51.430
So when you see
that box that should

00:06:51.430 --> 00:06:53.375
key you in to know
that you have homework.

00:06:57.290 --> 00:06:58.806
OK, so that's enough about me.

00:06:58.806 --> 00:07:00.430
Let's talk a little
bit about the tools

00:07:00.430 --> 00:07:03.010
and then we'll get into the
nitty gritty of actually using

00:07:03.010 --> 00:07:04.370
the tools.

00:07:04.370 --> 00:07:06.620
So the first thing I want
to mention about the Android

00:07:06.620 --> 00:07:11.410
Developer Tools is that they
are free and Open Source.

00:07:11.410 --> 00:07:14.440
So I don't want to make
a political statement

00:07:14.440 --> 00:07:19.130
about Android, but the Android
AOSP is realistically not

00:07:19.130 --> 00:07:21.310
Open Source.

00:07:21.310 --> 00:07:24.732
They don't take
submissions and it's not

00:07:24.732 --> 00:07:25.940
developed in the Open Source.

00:07:25.940 --> 00:07:27.880
They give it to the
Open Source community

00:07:27.880 --> 00:07:29.860
after it's been developed.

00:07:29.860 --> 00:07:33.410
The difference is the
Android Developer Tools

00:07:33.410 --> 00:07:35.920
are developed
completely in the open.

00:07:35.920 --> 00:07:38.660
There is a open branch
that you can go check out

00:07:38.660 --> 00:07:40.290
the latest revisions
of the code,

00:07:40.290 --> 00:07:44.410
and they do take submissions
if you have a fix or something.

00:07:44.410 --> 00:07:46.330
They do accept submissions.

00:07:46.330 --> 00:07:50.320
So it's a much different
sort of project than Android.

00:07:50.320 --> 00:07:52.660
And the other thing that's
important to mention

00:07:52.660 --> 00:07:56.095
is it's run
independent of Android.

00:07:56.095 --> 00:07:58.220
They are not necessarily
the same team,

00:07:58.220 --> 00:08:00.650
they're run differently, they
have different schedules,

00:08:00.650 --> 00:08:05.255
and they have different
kind of ways of operations.

00:08:05.255 --> 00:08:10.110
So they're very, very different.

00:08:10.110 --> 00:08:12.240
Tools on Android.com
is the location

00:08:12.240 --> 00:08:14.840
where you can get all
the information you

00:08:14.840 --> 00:08:18.450
need about the tools.

00:08:18.450 --> 00:08:21.990
I will also say this about
the Tools Development Team,

00:08:21.990 --> 00:08:25.890
is they're very open,
and very available.

00:08:25.890 --> 00:08:28.250
You'll see that they're
answering questions

00:08:28.250 --> 00:08:32.354
in the group chat, they're
not very secretive,

00:08:32.354 --> 00:08:33.270
and they're very open.

00:08:33.270 --> 00:08:34.894
So it's a really a
great team, and they

00:08:34.894 --> 00:08:36.750
seem to be run
really well, and I

00:08:36.750 --> 00:08:39.130
think they've done a great job.

00:08:39.130 --> 00:08:42.809
OK, so let's talk about
the tools a little bit.

00:08:42.809 --> 00:08:44.340
I think you guys
are probably all

00:08:44.340 --> 00:08:47.520
familiar with the
Eclipse-based ADT.

00:08:47.520 --> 00:08:51.970
That's basically the tools that
we've been using for many years

00:08:51.970 --> 00:08:55.870
now, very, very stable,
very rock solid.

00:08:55.870 --> 00:09:00.890
At Google I/O this year they
introduced the Android Studio.

00:09:00.890 --> 00:09:05.790
Android Studio is a new
flavor of Android IDE

00:09:05.790 --> 00:09:11.330
and it lives along side of the
ADT, Android Developer Tools.

00:09:11.330 --> 00:09:14.120
Now I do want to say
something very important,

00:09:14.120 --> 00:09:17.650
and I have verified
this, this doesn't

00:09:17.650 --> 00:09:21.030
mean that the Eclipse
based tools are going away.

00:09:21.030 --> 00:09:25.150
It just means that there's
a new flavor involved.

00:09:25.150 --> 00:09:27.490
We can talk about why they're
doing this, if you'd like,

00:09:27.490 --> 00:09:28.540
after the presentation.

00:09:30.862 --> 00:09:32.570
When this first came
out, a lot of people

00:09:32.570 --> 00:09:35.790
thought, "Oh man, now I
got to learn a new tool,

00:09:35.790 --> 00:09:37.487
Eclipse is going away."

00:09:37.487 --> 00:09:39.395
AUDIENCE: So is
[? Tulle Norve ?] a member

00:09:39.395 --> 00:09:41.310
of this tools group? [INAUDIBLE]

00:09:41.310 --> 00:09:43.351
MIKE WOLFSON: Yes,
absolutely, [? Tulle Norve ?],

00:09:43.351 --> 00:09:47.190
[? Javier ?] [? De Roshe ?]
those are the two big names

00:09:47.190 --> 00:09:49.350
that I think are the
most representative.

00:09:52.320 --> 00:09:56.090
So it's important to know that
just because they introduced

00:09:56.090 --> 00:09:58.590
Android Studio, doesn't
mean that Android Developer

00:09:58.590 --> 00:09:59.810
Tools are going away.

00:09:59.810 --> 00:10:03.190
The Eclipse based tools
are extremely stable,

00:10:03.190 --> 00:10:06.840
they're very feature rich, and
they have a huge user base.

00:10:06.840 --> 00:10:09.330
There would be no reason
for them to abandon that,

00:10:09.330 --> 00:10:11.870
and just to drive
this point home,

00:10:11.870 --> 00:10:15.760
they're not abandoning Eclipse.

00:10:15.760 --> 00:10:21.110
So let's give it a little
analogy of the difference here

00:10:21.110 --> 00:10:22.430
between the two tools.

00:10:22.430 --> 00:10:27.845
So I kind of consider Eclipse
like a gold Camry station

00:10:27.845 --> 00:10:32.760
wagon, really
reliable, rock solid,

00:10:32.760 --> 00:10:34.750
is going to get you
where you need to go,

00:10:34.750 --> 00:10:37.600
but you may not look
that great getting there,

00:10:37.600 --> 00:10:40.290
and it may not be that
much fun to drive.

00:10:40.290 --> 00:10:44.430
Whereas, the Android Studio is
much like this Ferrari F430,

00:10:44.430 --> 00:10:48.644
that is rockin' fast,
and handles great,

00:10:48.644 --> 00:10:50.310
but if you don't know
what you're doing,

00:10:50.310 --> 00:10:53.034
you're going to wrap
yourself around a tree.

00:10:53.034 --> 00:10:54.950
AUDIENCE: It's mightier
than the Eclipse then.

00:10:54.950 --> 00:10:56.830
MIKE WOLFSON: Yeah.

00:10:56.830 --> 00:11:01.480
Android Studio is definitely
the sexy hotness, quick,

00:11:01.480 --> 00:11:04.707
but if you don't know
what you're doing,

00:11:04.707 --> 00:11:06.290
or you don't necessarily
have a reason

00:11:06.290 --> 00:11:09.410
to be using Android
Studio, I would strongly

00:11:09.410 --> 00:11:13.560
suggest that you stick with the
Eclipse-based tools for now.

00:11:13.560 --> 00:11:16.070
They're stable, there's a
huge community of support

00:11:16.070 --> 00:11:20.060
around them, and all the
questions are answered,

00:11:20.060 --> 00:11:21.640
things like that.

00:11:21.640 --> 00:11:23.820
And we'll talk just
a little bit more

00:11:23.820 --> 00:11:27.670
about what Android Studio is.

00:11:27.670 --> 00:11:28.946
Did you have a question?

00:11:28.946 --> 00:11:30.930
AUDIENCE: So how
much of the code

00:11:30.930 --> 00:11:34.124
is the Android's
common [INAUDIBLE]?

00:11:34.124 --> 00:11:36.040
MIKE WOLFSON: I don't
know about a percentage.

00:11:36.040 --> 00:11:39.700
I do think some of
the tools are common,

00:11:39.700 --> 00:11:44.050
but I don't think they
share a lot together.

00:11:44.050 --> 00:11:46.582
But I would have no way
to know the percentage.

00:11:46.582 --> 00:11:48.040
AUDIENCE: Can you
repeat questions?

00:11:48.040 --> 00:11:49.052
MIKE WOLFSON: Oh sure.

00:11:49.052 --> 00:11:49.760
Sorry about that.

00:11:49.760 --> 00:11:51.860
The question was,
how much code is

00:11:51.860 --> 00:11:56.390
shared between Android
Studio and ADT?

00:11:56.390 --> 00:11:59.510
And the answer is I don't know.

00:11:59.510 --> 00:12:02.140
OK, so let's talk a little
bit about Android Studio, what

00:12:02.140 --> 00:12:03.640
it is, so that you
kind of know some

00:12:03.640 --> 00:12:05.570
of the key differences
between that

00:12:05.570 --> 00:12:07.750
and the Eclipse-based tools.

00:12:07.750 --> 00:12:09.910
So Android Studio is
based on the intelliJ

00:12:09.910 --> 00:12:12.870
IDE, so a completely
different IDE,

00:12:12.870 --> 00:12:18.310
has different key commands, a
different way of doing things.

00:12:18.310 --> 00:12:20.060
It also implements
under the covers,

00:12:20.060 --> 00:12:24.040
the new Gradle-based
build system.

00:12:24.040 --> 00:12:28.050
Now I just want to mention about
the Gradle-based build system

00:12:28.050 --> 00:12:32.310
you don't have to use
Android Studio for Gradle.

00:12:32.310 --> 00:12:35.180
You could also run
your builds, your clips

00:12:35.180 --> 00:12:37.170
builds, using the Gradle build.

00:12:37.170 --> 00:12:41.980
And if you look in the
export, file export,

00:12:41.980 --> 00:12:43.626
you can actually
export out of Eclipse,

00:12:43.626 --> 00:12:45.250
you can export your
Gradle build files.

00:12:45.250 --> 00:12:50.079
So if you want to play
with Gradle, which

00:12:50.079 --> 00:12:52.620
is a whole other discussion that
we're not going to get into,

00:12:52.620 --> 00:12:54.380
what Gradle is.

00:12:54.380 --> 00:12:56.180
I would strongly
suggest that you

00:12:56.180 --> 00:12:57.490
start thinking about Gradle.

00:12:57.490 --> 00:13:03.170
I mentioned that Android
Studio is not replacing ADT.

00:13:03.170 --> 00:13:05.840
Gradle is replacing ANT.

00:13:05.840 --> 00:13:10.150
So they have said that Gradle
is their future build system,

00:13:10.150 --> 00:13:11.870
and is deprecated.

00:13:11.870 --> 00:13:13.790
So you want to
start using Gradle.

00:13:13.790 --> 00:13:17.510
And Gradle is really well
designed for Android.

00:13:17.510 --> 00:13:20.790
It allows you to generate all
sorts of different builds,

00:13:20.790 --> 00:13:23.210
just right from the build
tool, things like that.

00:13:23.210 --> 00:13:27.890
So, again, I'm not sure I'd
suggest using Android Studio.

00:13:27.890 --> 00:13:31.084
I would suggest checking
out Gradle and trying

00:13:31.084 --> 00:13:32.250
to come up to speed on that.

00:13:32.250 --> 00:13:35.980
I think that will benefit you.

00:13:35.980 --> 00:13:38.170
One really great thing
about Android Studio

00:13:38.170 --> 00:13:40.500
is they have a really
rich visual editor.

00:13:40.500 --> 00:13:44.180
So they have a real
time visual editor

00:13:44.180 --> 00:13:46.650
that will allow you to
make changes in your code

00:13:46.650 --> 00:13:49.380
and look at the
changes as they'd

00:13:49.380 --> 00:13:52.700
be represented in
your UI directly.

00:13:52.700 --> 00:13:58.510
So they also have a really
rich drag and drop UI builder.

00:13:58.510 --> 00:14:01.240
It's clear that,
that's like something

00:14:01.240 --> 00:14:04.672
that you get, really good,
out of Android Studio.

00:14:04.672 --> 00:14:06.880
The other thing, is they
have really good integration

00:14:06.880 --> 00:14:08.930
with Google Cloud services.

00:14:08.930 --> 00:14:12.030
I haven't done this myself,
but what they demoed at I/O

00:14:12.030 --> 00:14:16.110
was you could look at your
data model, right mouse

00:14:16.110 --> 00:14:18.910
click on the data model,
and generate a code that

00:14:18.910 --> 00:14:23.250
would allow you to create a sync
to the Google Cloud services.

00:14:23.250 --> 00:14:26.130
So pretty cool stuff.

00:14:26.130 --> 00:14:28.890
And no doubt Android
Studio is going

00:14:28.890 --> 00:14:30.530
to really keep innovating.

00:14:30.530 --> 00:14:33.140
And we're going to see a lot of
movement with Android studio,

00:14:33.140 --> 00:14:36.420
and not as much as
ADT, but for now.

00:14:36.420 --> 00:14:38.930
And this is the last bullet.

00:14:38.930 --> 00:14:40.840
It's still an early
access preview,

00:14:40.840 --> 00:14:44.090
which means it's alpha,
for the most part,

00:14:44.090 --> 00:14:48.970
not even beta, is buggy,
it is certainly influx,

00:14:48.970 --> 00:14:51.100
and it is not for
the weak of heart.

00:14:53.830 --> 00:14:56.944
So, I think statement made.

00:14:56.944 --> 00:14:58.932
AUDIENCE: How stable
is Gradle Build System?

00:14:58.932 --> 00:15:01.920
[INAUDIBLE]

00:15:01.920 --> 00:15:05.910
MIKE WOLFSON: I would suggest
using Gradle now, yes.

00:15:05.910 --> 00:15:08.160
It is stable, yes.

00:15:08.160 --> 00:15:11.570
It's still, also
pretty dynamic, but I

00:15:11.570 --> 00:15:13.120
would suggest using
Gradle now and I

00:15:13.120 --> 00:15:19.142
do think it is stable enough
to be production quality.

00:15:19.142 --> 00:15:21.100
There's probably going
to be some features that

00:15:21.100 --> 00:15:22.740
aren't implemented yet.

00:15:22.740 --> 00:15:24.820
But maybe if you're
an early adopter

00:15:24.820 --> 00:15:26.450
you can help drive
some of those things

00:15:26.450 --> 00:15:29.000
by communicating those
needs and things.

00:15:32.590 --> 00:15:35.185
I should have done
this earlier, can I

00:15:35.185 --> 00:15:38.590
just see a show of hands of how
many people are active Android

00:15:38.590 --> 00:15:39.350
developers now.

00:15:42.050 --> 00:15:44.230
Great, and how
many of you people

00:15:44.230 --> 00:15:45.870
are really comfortable
with the tools

00:15:45.870 --> 00:15:49.600
and think you really
know how they work?

00:15:49.600 --> 00:15:53.840
[LAUGHTER]

00:15:53.840 --> 00:15:59.410
OK, well I do cover
a lot of the basics

00:15:59.410 --> 00:16:02.880
and I added some more advanced
stuff to this presentation.

00:16:02.880 --> 00:16:07.714
So hopefully I will have some
stuff of interest to everybody.

00:16:07.714 --> 00:16:09.642
AUDIENCE: So the nice
thing about Eclipse

00:16:09.642 --> 00:16:12.402
is that it clones
Java and sync so it's

00:16:12.402 --> 00:16:14.066
easy to create [INAUDIBLE]

00:16:23.040 --> 00:16:28.360
MIKE WOLFSON: Well, yes IntelliJ
is an IDE just like Eclipse.

00:16:28.360 --> 00:16:31.650
So you can do different projects
of all different flavors,

00:16:31.650 --> 00:16:33.610
web projects, C++ projects.

00:16:36.920 --> 00:16:38.378
AUDIENCE: Just [INAUDIBLE].

00:16:46.640 --> 00:16:52.890
MIKE WOLFSON: Yeah
OK, so historically,

00:16:52.890 --> 00:16:55.410
if you wanted to install
the Android Developer Tool,

00:16:55.410 --> 00:16:58.750
you had to download a bunch
of different components,

00:16:58.750 --> 00:17:02.660
the plug-in, the IDE,
the Java, et cetera,

00:17:02.660 --> 00:17:04.710
and then wire them all together.

00:17:04.710 --> 00:17:07.560
Fortunately, this
is all gone away.

00:17:07.560 --> 00:17:12.710
And now, for both Android
Studio and Eclipse,

00:17:12.710 --> 00:17:14.390
there is a downloadable bundle.

00:17:14.390 --> 00:17:15.890
And this allows you
to just download

00:17:15.890 --> 00:17:20.190
one platform specific
zip file, install it

00:17:20.190 --> 00:17:22.349
on your system, and
everything works.

00:17:22.349 --> 00:17:26.590
So the reason I included
this in the slides

00:17:26.590 --> 00:17:28.319
is because it's
really important.

00:17:28.319 --> 00:17:32.700
If you're working with an
old Android installation

00:17:32.700 --> 00:17:35.200
and you're scared to touch it
and every time you upgrade it,

00:17:35.200 --> 00:17:37.830
it's fickle, and
you have issues,

00:17:37.830 --> 00:17:40.470
wipe it away, delete
that completely,

00:17:40.470 --> 00:17:43.950
and start with a bundle,
because it is so easy.

00:17:43.950 --> 00:17:46.740
In fact, frequently, if
I do have those problems

00:17:46.740 --> 00:17:49.470
that I can't get an upgrade
to work, or whatever,

00:17:49.470 --> 00:17:52.060
I wipe away my Android
installation completely,

00:17:52.060 --> 00:17:53.720
download a brand
new bundle, which

00:17:53.720 --> 00:17:59.230
is going to have all the current
latest code already in there

00:17:59.230 --> 00:17:59.760
and working.

00:17:59.760 --> 00:18:04.750
So don't be afraid of
the bundle and if you

00:18:04.750 --> 00:18:09.370
are having any
challenges don't be

00:18:09.370 --> 00:18:12.760
afraid to just wipe your
system and start fresh.

00:18:12.760 --> 00:18:15.215
The only challenge
with the bundle

00:18:15.215 --> 00:18:18.830
is it's about 400
megabytes a download.

00:18:18.830 --> 00:18:22.280
So the biggest problem is
getting that big download

00:18:22.280 --> 00:18:27.410
the first time, after that
it's as easy as could be.

00:18:27.410 --> 00:18:32.930
OK, so I'm going to move on
to the Android Debug Bridge.

00:18:32.930 --> 00:18:36.550
Android Debug Bridge is
kind of what the name says,

00:18:36.550 --> 00:18:40.170
it is a bridge that allows
you to debug your Android

00:18:40.170 --> 00:18:42.520
device from your computer.

00:18:42.520 --> 00:18:45.510
So this is basically a
command line tool and also

00:18:45.510 --> 00:18:47.820
a communication
tool that allows us

00:18:47.820 --> 00:18:50.940
to interact with
our Android devices.

00:18:50.940 --> 00:18:55.390
The important thing to note
here is an Android test

00:18:55.390 --> 00:18:58.630
device can be an emulator or it
can be actual physical device,

00:18:58.630 --> 00:19:00.986
and for the most
part, there's not

00:19:00.986 --> 00:19:03.110
a whole lot of difference
between those two things.

00:19:06.430 --> 00:19:09.360
So this is one of those cases
where you see a gray box that

00:19:09.360 --> 00:19:11.620
allows you to, these
are some commands

00:19:11.620 --> 00:19:16.320
I would encourage you to
try on your own later.

00:19:16.320 --> 00:19:18.370
Obviously, ADB Help
is super simple,

00:19:18.370 --> 00:19:19.830
but you can see
the kind of things

00:19:19.830 --> 00:19:21.360
that you can do with ADB.

00:19:21.360 --> 00:19:23.400
You can push files
from your device,

00:19:23.400 --> 00:19:28.347
you could pull files, you can
install an APK, and run an APK.

00:19:28.347 --> 00:19:30.430
There's a lot of more
advanced stuff you could do.

00:19:30.430 --> 00:19:34.940
You can actually install an
APK, and run a single activity,

00:19:34.940 --> 00:19:37.760
and that activity doesn't
have to be the main activity

00:19:37.760 --> 00:19:40.520
in your manifest,
the one that is

00:19:40.520 --> 00:19:43.970
marked as your main activity,
a ton of flexibility.

00:19:43.970 --> 00:19:46.280
Now the cool thing is because
these are Command Line

00:19:46.280 --> 00:19:48.830
tools that flexibility
is available to you

00:19:48.830 --> 00:19:53.790
to script, or without
any sort of rich UI.

00:19:53.790 --> 00:19:56.260
I assume most of you
guys had used ADB.

00:19:56.260 --> 00:19:59.120
The other really
common use for ADB

00:19:59.120 --> 00:20:01.210
is if you're ROMing
and rooting your phone.

00:20:01.210 --> 00:20:05.020
Obviously, ADB is
the main tool you

00:20:05.020 --> 00:20:08.280
use to do that, to unlock
your bootloader, to push files

00:20:08.280 --> 00:20:12.291
onto the phone,
things like that.

00:20:12.291 --> 00:20:13.790
There are a ton of
stuff you can do.

00:20:13.790 --> 00:20:15.980
I'm sorry, the one last
thing I wanted to point out

00:20:15.980 --> 00:20:20.050
was this one at the bottom
which actually allows you to,

00:20:20.050 --> 00:20:21.460
well there's two things.

00:20:21.460 --> 00:20:22.980
There's two last bullets.

00:20:22.980 --> 00:20:25.000
The first bullet
ADB shell allows

00:20:25.000 --> 00:20:28.290
you to open a shell command
on your Android device

00:20:28.290 --> 00:20:31.700
and operate any of
the commands that

00:20:31.700 --> 00:20:36.050
are involved in a shell, LS,
NV, et cetera, et cetera.

00:20:36.050 --> 00:20:37.640
Now the shell that
comes with Android

00:20:37.640 --> 00:20:40.550
isn't a complete Linux shell,
it doesn't have all the commands

00:20:40.550 --> 00:20:45.310
that a regular Linux shell has,
but you could do a whole lot,

00:20:45.310 --> 00:20:47.730
and ADB shell allows
you to actually remote

00:20:47.730 --> 00:20:51.500
into your device and do any
sort of things that you want,

00:20:51.500 --> 00:20:55.340
look at the system, inspect
files, et cetera, et cetera.

00:20:55.340 --> 00:20:57.730
But the really cool thing
it also allows you to do

00:20:57.730 --> 00:21:01.500
is, you can open
a SQLlite command

00:21:01.500 --> 00:21:03.210
and intraspect your databases.

00:21:03.210 --> 00:21:05.300
So if you are doing
database command

00:21:05.300 --> 00:21:08.017
and you want to figure
out what's in your tables,

00:21:08.017 --> 00:21:09.850
your table structures,
et cetera, et cetera.

00:21:09.850 --> 00:21:12.390
There's a SQLlite's
command that allows you

00:21:12.390 --> 00:21:15.535
just as if you were using
SQLlite on any other system.

00:21:19.600 --> 00:21:23.280
The other really important thing
that we do with ADB is Logcat.

00:21:23.280 --> 00:21:26.390
I'm sure you guys are
all familiar with Logcat,

00:21:26.390 --> 00:21:27.960
but I would guess
that you're not

00:21:27.960 --> 00:21:29.850
familiar with all the
things that it can do.

00:21:29.850 --> 00:21:32.420
So I just want to run through
a really quick example

00:21:32.420 --> 00:21:35.570
of some simple stuff in
Logcat, explain how it works,

00:21:35.570 --> 00:21:37.997
and explain some advanced stuff.

00:21:37.997 --> 00:21:39.830
So the first thing you
could do with Logcat.

00:21:39.830 --> 00:21:42.260
Logcat has two sort of concepts.

00:21:42.260 --> 00:21:45.550
The first concept is
a verbosity level.

00:21:45.550 --> 00:21:48.370
Just like you guys, I assume,
you guys have used Log4j,

00:21:48.370 --> 00:21:50.190
where you can set
the debug level

00:21:50.190 --> 00:21:54.210
to verbose, debug, et
cetera, [? bug warn. ?]

00:21:54.210 --> 00:21:56.010
That same concept
exists in Android,

00:21:56.010 --> 00:21:59.280
so when you create
a log statement,

00:21:59.280 --> 00:22:01.910
so like this one
in my Java class,

00:22:01.910 --> 00:22:05.330
you can set a verbosity level.

00:22:05.330 --> 00:22:08.760
In this case, I have
D set, so debug.

00:22:08.760 --> 00:22:10.880
But the cool thing
about Logcat is

00:22:10.880 --> 00:22:14.440
you can also associate a
tag with your log message.

00:22:14.440 --> 00:22:19.100
So in this case I have this
myTAG tag and then the log

00:22:19.100 --> 00:22:20.340
message.

00:22:20.340 --> 00:22:22.390
What this allows
you to do is, you

00:22:22.390 --> 00:22:25.970
can filter based on the tags
that you create in your code.

00:22:25.970 --> 00:22:29.900
So generally what you do is,
when you're writing your code,

00:22:29.900 --> 00:22:33.380
you create tags that are
specific to functional areas

00:22:33.380 --> 00:22:34.780
that you want to test.

00:22:34.780 --> 00:22:37.120
Then you can filter
based on those tags

00:22:37.120 --> 00:22:39.320
and see how your code
progresses through

00:22:39.320 --> 00:22:40.930
that particular functional area.

00:22:43.720 --> 00:22:47.080
So a quick example,
this is a Logcat,

00:22:47.080 --> 00:22:52.190
where I have not performed any
sort of filtering based on it.

00:22:52.190 --> 00:22:55.500
Again, I'm sure you guys have
looked at Logcat messages.

00:22:55.500 --> 00:22:58.490
There's a ton of stuff that goes
through, especially if you're

00:22:58.490 --> 00:23:00.660
using a real physical
device, there's

00:23:00.660 --> 00:23:04.120
all sorts of system
events happening.

00:23:04.120 --> 00:23:06.222
If you want to see what
you're looking at you've

00:23:06.222 --> 00:23:08.680
got to look real closely, and
you got to look real careful.

00:23:08.680 --> 00:23:10.690
So you can see, I
have those tags,

00:23:10.690 --> 00:23:12.940
but if I didn't have
them highlighted here

00:23:12.940 --> 00:23:16.990
they'd be pretty hard to
figure out where they were.

00:23:16.990 --> 00:23:23.950
So all you'll do is if you
do want to see Logcat related

00:23:23.950 --> 00:23:29.540
to your particular tags you just
issue a command, Add Logcat,

00:23:29.540 --> 00:23:34.650
MyTAG:0, then the important
second part of that command is

00:23:34.650 --> 00:23:42.880
the not colon so
tag, colon, star.

00:23:42.880 --> 00:23:47.320
Before the colon, is the
tag, the part after the tag,

00:23:47.320 --> 00:23:49.940
is what verbosity
level you want seen.

00:23:49.940 --> 00:23:53.950
So in this case I say I want
all verbosity levels for tag

00:23:53.950 --> 00:23:59.400
and the second
important thing is,

00:23:59.400 --> 00:24:01.620
I want to silence
everything else.

00:24:01.620 --> 00:24:04.010
So that's what the
star, colon, S means.

00:24:04.010 --> 00:24:07.670
And when I do that, you can see
that now I can very clearly see

00:24:07.670 --> 00:24:10.765
exactly what I'm looking for
and all the fluff is gone.

00:24:13.490 --> 00:24:14.860
Now that's pretty cool.

00:24:14.860 --> 00:24:16.800
You can filter based
on a single tag,

00:24:16.800 --> 00:24:18.690
but the important
thing is you can

00:24:18.690 --> 00:24:20.760
filter based on multiple tags.

00:24:20.760 --> 00:24:23.670
So in this case,
this example shows

00:24:23.670 --> 00:24:27.550
I'm filtering based
on my own unique tag.

00:24:27.550 --> 00:24:28.710
I want to see my tag.

00:24:28.710 --> 00:24:30.690
But I'm also
interested in seeing

00:24:30.690 --> 00:24:34.180
how my tag relates
to PackageManager.

00:24:34.180 --> 00:24:38.340
So, basically you create
that command, myTAG, colon,

00:24:38.340 --> 00:24:42.310
asterisk, PackageManager, colon,
asterisk, and then don't forget

00:24:42.310 --> 00:24:45.060
the asterisk, colon, S
to silence everything

00:24:45.060 --> 00:24:47.690
else, and you'll see now I
have just the information

00:24:47.690 --> 00:24:50.090
about the two tags
that I'm interested in,

00:24:50.090 --> 00:24:52.660
and you can create as
many different filter sets

00:24:52.660 --> 00:24:53.800
as you want.

00:24:53.800 --> 00:24:56.910
You can string multiple sets,
and of course you could also

00:24:56.910 --> 00:25:01.030
filter based on a tag, and
a verbosity level combined.

00:25:01.030 --> 00:25:06.310
So there's a ton of flexibility
and if you design your log

00:25:06.310 --> 00:25:07.980
messages with
these tags in mind,

00:25:07.980 --> 00:25:11.460
it is a indispensable tool
when you're trying to debug.

00:25:11.460 --> 00:25:12.880
It allows you to
really drill down

00:25:12.880 --> 00:25:14.800
to see just the
stuff you care about

00:25:14.800 --> 00:25:16.350
and remove all the other fluff.

00:25:19.300 --> 00:25:21.040
So that's just basic Logcat.

00:25:21.040 --> 00:25:24.420
Did somebody have a question?

00:25:24.420 --> 00:25:26.170
So that's just basic
Logcat, but you

00:25:26.170 --> 00:25:28.610
can do a whole bunch of
other stuff with Logcat

00:25:28.610 --> 00:25:32.005
and I leave this
slide for you guys

00:25:32.005 --> 00:25:33.130
to try when you're at home.

00:25:33.130 --> 00:25:35.780
You could also, if
you're interested in only

00:25:35.780 --> 00:25:40.130
a particular buffer, like the
radio buffer, or the events

00:25:40.130 --> 00:25:42.630
buffer, or the
main buffer, which

00:25:42.630 --> 00:25:45.306
is the default in this case, you
can specify a particular buffer

00:25:45.306 --> 00:25:46.180
that you want to see.

00:25:46.180 --> 00:25:49.040
So you can filter, so you're
only seeing the radio buffer.

00:25:49.040 --> 00:25:51.200
That's the only
messages you care about.

00:25:51.200 --> 00:25:54.540
Obviously, that depends on the
type of code you're writing.

00:25:54.540 --> 00:25:57.910
There's also a variety of
pre-defined output formats.

00:25:57.910 --> 00:26:03.250
So brief, is the
default and that

00:26:03.250 --> 00:26:06.940
specifies different parameters
that will be output,

00:26:06.940 --> 00:26:09.250
but time is a really
useful one that

00:26:09.250 --> 00:26:15.160
appends the time, which isn't
in the basic log functionality,

00:26:15.160 --> 00:26:19.700
and again you can add these
command lines, these command

00:26:19.700 --> 00:26:21.870
line arguments, in
addition to the tags.

00:26:21.870 --> 00:26:26.700
So you can see there's a
really rich, rich set of Logcat

00:26:26.700 --> 00:26:29.072
functionality.

00:26:29.072 --> 00:26:30.655
The last thing, I'm
not going to demo,

00:26:30.655 --> 00:26:36.730
but is really worth exploring,
is the Logcat tab in Eclipse.

00:26:36.730 --> 00:26:41.510
This allows you to save a bunch
of filter sets, and tag sets,

00:26:41.510 --> 00:26:43.340
so you don't have to
type them every time.

00:26:43.340 --> 00:26:46.680
You can actually, save a
tag set, and click on it,

00:26:46.680 --> 00:26:49.440
and it will filter
based on that.

00:26:49.440 --> 00:26:53.040
And the other really cool
thing that the Logcat viewer

00:26:53.040 --> 00:26:55.690
and Eclipse has
is a regex editor.

00:26:55.690 --> 00:26:58.710
So you can actually
search your logs

00:26:58.710 --> 00:27:04.020
using regular expressions,
which again is really rich.

00:27:04.020 --> 00:27:07.220
So as developers I'm
sure you guys all

00:27:07.220 --> 00:27:11.580
realize that logs are
really important, especially

00:27:11.580 --> 00:27:14.810
when you're in the midst of
trying to figure something out

00:27:14.810 --> 00:27:17.620
and Logcat really
allows you to get

00:27:17.620 --> 00:27:19.580
at exactly what you want to see.

00:27:22.201 --> 00:27:22.700
Good.

00:27:25.820 --> 00:27:26.750
OK, so that's Logcat.

00:27:26.750 --> 00:27:31.100
Let's now talk a little
bit about emulators.

00:27:31.100 --> 00:27:32.800
I want to address,
first of all, some

00:27:32.800 --> 00:27:36.110
of the capabilities
of emulators,

00:27:36.110 --> 00:27:38.860
and then we'll talk about
some of the limitations.

00:27:38.860 --> 00:27:40.630
First thing you can
do with an emulator,

00:27:40.630 --> 00:27:42.190
is you can simulate telephony.

00:27:42.190 --> 00:27:46.090
So you can simulate
latency, or connectivity,

00:27:46.090 --> 00:27:50.109
or simulate events, as
in SMS, or a phone call.

00:27:50.109 --> 00:27:51.650
You can't actually
make a phone call,

00:27:51.650 --> 00:27:54.580
but you can simulate
a phone call.

00:27:54.580 --> 00:27:59.570
You could simulate location,
including KML, or a path.

00:27:59.570 --> 00:28:02.620
You can specify
a single location

00:28:02.620 --> 00:28:07.000
that your emulator is
supposed to emulate.

00:28:07.000 --> 00:28:09.279
You can emulate a variety
of different hardware.

00:28:09.279 --> 00:28:11.320
Now that's the important
thing and the reason why

00:28:11.320 --> 00:28:16.140
we want to use an emulator,
is there's a lot of Android

00:28:16.140 --> 00:28:17.090
devices in this world.

00:28:17.090 --> 00:28:21.020
I think, the last time I looked
at my Droid of the Day console,

00:28:21.020 --> 00:28:27.430
that my app currently supports
like 3,000 different devices.

00:28:27.430 --> 00:28:29.400
Even if I was
really, really rich

00:28:29.400 --> 00:28:31.930
I wouldn't be able to purchase
all 3,000 of those devices

00:28:31.930 --> 00:28:36.360
to test with so using
emulator allows me to simulate

00:28:36.360 --> 00:28:39.070
a variety of different
hardware configurations

00:28:39.070 --> 00:28:42.430
so that I can at least get
close and know for the most part

00:28:42.430 --> 00:28:45.450
now there are some limitations
I guess which we'll get you

00:28:45.450 --> 00:28:48.570
in a second on emulators.

00:28:48.570 --> 00:28:51.593
AUDIENCE: Does it emulate
all the different resolutions

00:28:51.593 --> 00:28:52.634
of the different devices?

00:28:52.634 --> 00:28:53.444
Can you do that?

00:28:53.444 --> 00:28:55.675
How accurate is it?

00:28:55.675 --> 00:28:57.050
MIKE WOLFSON: So
the question was

00:28:57.050 --> 00:29:01.150
if you want to emulate different
resolutions of devices,

00:29:01.150 --> 00:29:04.040
can you do that and
how accurate is it?

00:29:04.040 --> 00:29:06.230
That you absolutely
can do you can

00:29:06.230 --> 00:29:09.360
actually I'll show in a
second when I show you

00:29:09.360 --> 00:29:15.620
how you set up an ABD you could
specify a preset resolutions

00:29:15.620 --> 00:29:18.660
or you could actually
create your own.

00:29:18.660 --> 00:29:21.020
So for resolution,
you absolutely

00:29:21.020 --> 00:29:25.590
can emulate it, exactly right.

00:29:25.590 --> 00:29:27.530
What you can't do, we'll
get to in a second.

00:29:27.530 --> 00:29:29.670
What you can't do
is emulate the skins

00:29:29.670 --> 00:29:32.170
that the manufacturers
put on their devices.

00:29:32.170 --> 00:29:35.100
So Touchwiz is
MotoBlur, I guess,

00:29:35.100 --> 00:29:38.160
I don't know if that exists
anymore but TouchWiz or LG

00:29:38.160 --> 00:29:43.160
skin, those you cannot
emulate in a emulator.

00:29:43.160 --> 00:29:47.854
AUDIENCE: Is it better than
like [INAUDIBLE] Nexus10

00:29:47.854 --> 00:29:49.270
MIKE WOLFSON: Well
actually that's

00:29:49.270 --> 00:29:50.950
now a little different things.

00:29:50.950 --> 00:29:54.280
So the question was
there's a process

00:29:54.280 --> 00:29:56.450
that you can use
with the Nexus 10.

00:29:56.450 --> 00:30:00.620
Using adb, you can
actually have the Nexus 10

00:30:00.620 --> 00:30:05.860
emulate different
resolution sizes

00:30:05.860 --> 00:30:08.210
using [? netsome ?] commands.

00:30:08.210 --> 00:30:10.450
So the question was, is
that a better approach,

00:30:10.450 --> 00:30:12.766
or is using an emulator
a better approach?

00:30:12.766 --> 00:30:14.015
And the answer is, it depends.

00:30:16.651 --> 00:30:17.150
Go ahead.

00:30:17.150 --> 00:30:18.691
AUDIENCE: [INAUDIBLE]
locations, what

00:30:18.691 --> 00:30:21.932
are the different options?
[INAUDIBLE] GPS, [INAUDIBLE]

00:30:25.360 --> 00:30:28.240
MIKE WOLFSON: It is LatLng.

00:30:28.240 --> 00:30:35.880
It takes LatLng, [? KML, ?] and
one other type of format of-- I

00:30:35.880 --> 00:30:38.950
can't think of the third.

00:30:38.950 --> 00:30:40.380
GPX?

00:30:40.380 --> 00:30:41.030
Is that a--

00:30:41.030 --> 00:30:41.905
AUDIENCE: [INAUDIBLE]

00:30:45.779 --> 00:30:46.820
MIKE WOLFSON: What is it?

00:30:49.850 --> 00:30:51.403
OK, well there's three types.

00:30:51.403 --> 00:30:52.486
I'm not sure of the third.

00:30:56.440 --> 00:30:56.940
Yes?

00:30:56.940 --> 00:31:00.780
AUDIENCE: [INAUDIBLE] arm
emulation emulate [? all ?]

00:31:00.780 --> 00:31:03.670
counters that are available
in some [INAUDIBLE]

00:31:03.670 --> 00:31:08.210
MIKE WOLFSON: The question
is, does the arm emulation,

00:31:08.210 --> 00:31:13.304
basically does it perform
the same as a real arm phone?

00:31:13.304 --> 00:31:14.220
Is that your question?

00:31:14.220 --> 00:31:14.845
AUDIENCE: Yeah.

00:31:14.845 --> 00:31:17.484
Some new arms come with
performance counters

00:31:17.484 --> 00:31:20.388
so you can figure
out [INAUDIBLE]

00:31:23.300 --> 00:31:26.600
MIKE WOLFSON: So the question
is, does the emulator

00:31:26.600 --> 00:31:30.320
perform the same as a device?

00:31:33.440 --> 00:31:35.010
The answer is no,
definitely not.

00:31:35.010 --> 00:31:38.630
If you're doing really
performance testing,

00:31:38.630 --> 00:31:40.600
you probably want to
use a real device.

00:31:40.600 --> 00:31:43.810
There's so many variables in
an emulator, both the device,

00:31:43.810 --> 00:31:46.747
the physical device
it's on, your computer,

00:31:46.747 --> 00:31:48.330
how many other things
it's working on,

00:31:48.330 --> 00:31:50.150
et cetera, et cetera,
the performance

00:31:50.150 --> 00:31:52.430
is not going to be
accurate to what

00:31:52.430 --> 00:31:54.276
you would see on a real device.

00:31:54.276 --> 00:31:57.192
AUDIENCE: So intelligent
testing on the Android market

00:31:57.192 --> 00:32:01.566
[INAUDIBLE] I think it
would be a good idea

00:32:01.566 --> 00:32:05.940
to use a x86
emulator just to test

00:32:05.940 --> 00:32:09.340
[INAUDIBLE] x86 [INAUDIBLE]

00:32:09.340 --> 00:32:12.810
MIKE WOLFSON: So the comment
is, in addition to AMD,

00:32:12.810 --> 00:32:17.130
you also may want to test
using the Intel chipset,

00:32:17.130 --> 00:32:18.780
because there are
Intel phones around.

00:32:18.780 --> 00:32:21.100
And I'm actually going to
discuss that in a second,

00:32:21.100 --> 00:32:23.290
because there's other
advantages in addition

00:32:23.290 --> 00:32:26.740
to just emulating Intel chipset.

00:32:26.740 --> 00:32:30.630
So I am actually going to
touch that in a second.

00:32:30.630 --> 00:32:32.940
Last thing you can
do with the emulator

00:32:32.940 --> 00:32:37.820
is you can do media actions,
but only audio, not video.

00:32:37.820 --> 00:32:40.370
You cannot do video
on a emulator.

00:32:40.370 --> 00:32:43.310
Some of the limitations
of things you cannot do

00:32:43.310 --> 00:32:47.375
on a emulator include
Google services like Gmail,

00:32:47.375 --> 00:32:51.500
or the PlayStore,
things like that.

00:32:51.500 --> 00:32:54.960
Now there are ways to hack
that on to your emulator,

00:32:54.960 --> 00:32:59.100
so there are ways to
work around this issue.

00:32:59.100 --> 00:33:03.210
But out of the box, it is not
designed to run Play services.

00:33:03.210 --> 00:33:06.870
And I think there's
obstacles, and there

00:33:06.870 --> 00:33:08.140
will continue to be obstacles.

00:33:08.140 --> 00:33:11.697
They don't want that
on the emulator.

00:33:11.697 --> 00:33:13.030
You can't make real phone calls.

00:33:13.030 --> 00:33:16.000
I think we already
kind of discussed that.

00:33:16.000 --> 00:33:17.760
Certain graphic
support, again, this

00:33:17.760 --> 00:33:20.270
is getting back to kind of
what we were discussing before.

00:33:20.270 --> 00:33:22.240
The performance is not
the same, so if you're

00:33:22.240 --> 00:33:25.790
doing a game or
something that requires

00:33:25.790 --> 00:33:28.740
very precise
graphics performance,

00:33:28.740 --> 00:33:30.820
the emulator is probably
not the right place

00:33:30.820 --> 00:33:35.790
for you to be testing
your functionality.

00:33:35.790 --> 00:33:40.030
The other thing that's limited
on a emulator is touch events.

00:33:40.030 --> 00:33:42.160
You have a mouse to
interact with your device,

00:33:42.160 --> 00:33:48.640
so multi-touch or certain
other operations are limited.

00:33:48.640 --> 00:33:51.460
You just can't do that.

00:33:51.460 --> 00:33:56.430
AUDIENCE: So for multi-touch
[? on a laptop ?],

00:33:56.430 --> 00:33:59.412
[? a ?] touch screen
laptop, [? do you think ?]

00:33:59.412 --> 00:34:01.720
they're going to support
that in the future?

00:34:01.720 --> 00:34:02.760
[INAUDIBLE]

00:34:02.760 --> 00:34:04.218
MIKE WOLFSON: Yeah,
so the question

00:34:04.218 --> 00:34:10.590
is, using either a touch screen
monitor or a computer that

00:34:10.590 --> 00:34:12.840
has a multi-touch
keypad, will they

00:34:12.840 --> 00:34:15.315
support multi-touch
in the future?

00:34:15.315 --> 00:34:16.940
I don't know the
answer to what they're

00:34:16.940 --> 00:34:18.560
going to support in the future.

00:34:18.560 --> 00:34:21.610
There is a ADB
bridge that allows

00:34:21.610 --> 00:34:26.920
you to use your device as a
touch sensor for your emulator.

00:34:26.920 --> 00:34:31.050
So again, as I'm sure
everybody in the room

00:34:31.050 --> 00:34:34.290
knows, and anybody that's
done professional Android

00:34:34.290 --> 00:34:37.710
knows, when the question
is, does Android do it?

00:34:37.710 --> 00:34:39.239
The answer's always yes.

00:34:39.239 --> 00:34:40.960
Because it's such
an open platform,

00:34:40.960 --> 00:34:43.929
there's always some way
to get what you want done.

00:34:43.929 --> 00:34:46.880
If you have enough time,
money, and resources,

00:34:46.880 --> 00:34:49.820
you can do pretty much anything
you want with these things.

00:34:49.820 --> 00:34:56.000
But out of the box,
it's not supported.

00:34:56.000 --> 00:34:58.330
There is limited
accessory integration.

00:34:58.330 --> 00:34:59.925
You can use USB and headphones.

00:35:03.410 --> 00:35:06.410
And the other big
limitation of emulators

00:35:06.410 --> 00:35:07.780
is they're really slow.

00:35:07.780 --> 00:35:10.800
Slow to start, they can
be slow to deploy to,

00:35:10.800 --> 00:35:12.770
and they can be slow to run.

00:35:12.770 --> 00:35:16.810
So I am going to show you some
tips on how you speed it up,

00:35:16.810 --> 00:35:19.530
but again, I'm sure
everybody in here

00:35:19.530 --> 00:35:22.520
knows when you start
your emulator, it's

00:35:22.520 --> 00:35:26.490
time to go grab a cup of
coffee, or go check out Facebook

00:35:26.490 --> 00:35:29.250
or whatever, because
you're going to be waiting.

00:35:29.250 --> 00:35:32.380
It can take three minutes
for an emulator to start up.

00:35:35.350 --> 00:35:36.165
OK.

00:35:36.165 --> 00:35:36.880
Yeah, go ahead.

00:35:36.880 --> 00:35:37.755
AUDIENCE: [INAUDIBLE]

00:35:41.010 --> 00:35:42.710
MIKE WOLFSON: So the
question is, is it

00:35:42.710 --> 00:35:44.810
possible to emulate Bluetooth?

00:35:44.810 --> 00:35:47.350
I don't know the answer to that.

00:35:47.350 --> 00:35:53.690
I would suspect not,
because that-- I don't know.

00:35:53.690 --> 00:35:56.380
I was going to say because
the computer hardware would

00:35:56.380 --> 00:35:57.135
require Bluetooth.

00:35:57.135 --> 00:35:59.710
Of course, most computers
now have Bluetooth.

00:35:59.710 --> 00:36:01.740
So I don't know if you
can emulate Bluetooth.

00:36:01.740 --> 00:36:03.296
That's a good question.

00:36:03.296 --> 00:36:06.306
In fact, you get the first book.

00:36:11.940 --> 00:36:14.840
All right, so as I
mentioned, there's

00:36:14.840 --> 00:36:18.550
lots and lots of Android
devices in this world.

00:36:18.550 --> 00:36:23.270
Every device on this screen
runs Android, or at least

00:36:23.270 --> 00:36:24.790
interfaces with Android.

00:36:24.790 --> 00:36:28.880
So it's really important
that you understand emulators

00:36:28.880 --> 00:36:30.550
and understand how
you can use them

00:36:30.550 --> 00:36:34.820
so that you can be able
to test on the biggest

00:36:34.820 --> 00:36:37.329
variety of devices possible.

00:36:37.329 --> 00:36:38.870
I think in a
professional world, this

00:36:38.870 --> 00:36:42.760
doesn't excuse you not having
a variety of actual devices

00:36:42.760 --> 00:36:44.100
to test on.

00:36:44.100 --> 00:36:48.280
But emulators will get you
a good distance of the way.

00:36:51.370 --> 00:36:54.550
So let's talk for real quick,
we'll take a quick diversion.

00:36:54.550 --> 00:36:57.370
Let's say that you don't
want to use an emulator.

00:36:57.370 --> 00:37:03.170
You can use almost any Android
device as a test device.

00:37:03.170 --> 00:37:04.880
There may be very
few exceptions,

00:37:04.880 --> 00:37:07.320
but for the most part,
any Android device

00:37:07.320 --> 00:37:09.120
works as a test device.

00:37:09.120 --> 00:37:13.020
The only thing you need to
do is enable this check box

00:37:13.020 --> 00:37:15.140
in your device settings app.

00:37:15.140 --> 00:37:18.890
So basically, you just
need to allow your device

00:37:18.890 --> 00:37:23.250
to run applications from
outside of the Play Store,

00:37:23.250 --> 00:37:27.240
and you can run any app you
want on your Android device.

00:37:27.240 --> 00:37:29.650
I'm sure there
are some, maybe, I

00:37:29.650 --> 00:37:32.290
assume probably the
Kindle Fire doesn't

00:37:32.290 --> 00:37:34.100
allow you to do that,
some other things.

00:37:34.100 --> 00:37:38.740
But for the most part, any
device that's available now.

00:37:38.740 --> 00:37:44.520
The challenge is, after OS
4.1, they hid-- I'm sorry,

00:37:44.520 --> 00:37:48.750
so that particular
function, actually, I'm

00:37:48.750 --> 00:37:51.000
not sure if that function
is hidden in developer tools

00:37:51.000 --> 00:37:52.130
or not.

00:37:52.130 --> 00:37:53.717
But that's the step one.

00:37:53.717 --> 00:37:56.050
Step two that you're probably
also going to want to do--

00:37:56.050 --> 00:37:56.620
AUDIENCE: It's not.

00:37:56.620 --> 00:37:56.875
MIKE WOLFSON: Good.

00:37:56.875 --> 00:37:58.320
AUDIENCE: It's in the main area.

00:37:58.320 --> 00:37:59.278
MIKE WOLFSON: OK great.

00:37:59.278 --> 00:38:02.200
So allowing apps
from non Play Store

00:38:02.200 --> 00:38:04.190
is not hidden in
the developer tools.

00:38:04.190 --> 00:38:07.180
But, you're going to want to
access the developer tools,

00:38:07.180 --> 00:38:09.470
enable the developer
tools on your device,

00:38:09.470 --> 00:38:13.220
so that you can debug directly
into the device, hook up a USB,

00:38:13.220 --> 00:38:15.940
things like that, in addition
to some other things.

00:38:15.940 --> 00:38:20.230
Now the challenge is, in
OS 4.1, they hid that.

00:38:20.230 --> 00:38:22.260
So this used to be
an item that was

00:38:22.260 --> 00:38:23.680
available in your settings app.

00:38:23.680 --> 00:38:25.940
You just had to go
find it and enable it.

00:38:25.940 --> 00:38:26.920
Now, it's hidden.

00:38:26.920 --> 00:38:30.750
So the way to get there now
is you click on the About

00:38:30.750 --> 00:38:34.356
Phone button seven times, and
at the end of the seventh time,

00:38:34.356 --> 00:38:35.730
you get a nice
message that says,

00:38:35.730 --> 00:38:37.810
congratulations,
you're now a developer.

00:38:37.810 --> 00:38:41.573
And that shows up in your list.

00:38:41.573 --> 00:38:43.656
AUDIENCE: Really, it will
even count down for you.

00:38:43.656 --> 00:38:45.970
You will start hitting and
it will go like, 4, 3, 2, 1.

00:38:45.970 --> 00:38:46.420
MIKE WOLFSON: Yeah.

00:38:46.420 --> 00:38:48.610
So the comment is, once
you start hitting it,

00:38:48.610 --> 00:38:52.900
you'll see click seven
times, six times, five times,

00:38:52.900 --> 00:38:54.260
four times.

00:38:54.260 --> 00:38:57.060
I'm not sure, but I think
that might move, actually,

00:38:57.060 --> 00:39:00.450
what you have to click.

00:39:00.450 --> 00:39:04.750
I thought I might have had to
click the build for KitKat.

00:39:04.750 --> 00:39:06.370
AUDIENCE: It was
About Phone when

00:39:06.370 --> 00:39:10.100
I rooted my Seven, so,
that was for KitKat, so.

00:39:10.100 --> 00:39:11.316
MIKE WOLFSON: OK.

00:39:11.316 --> 00:39:13.110
OK, good.

00:39:13.110 --> 00:39:15.770
So anyway, that's what
you want to do now.

00:39:15.770 --> 00:39:18.450
The cool thing is,
basically what I just

00:39:18.450 --> 00:39:21.080
told you is how you can use
your phone as a test device.

00:39:21.080 --> 00:39:25.610
But the developer options that
I just showed you how to enable

00:39:25.610 --> 00:39:30.150
have a ton of really great
functionality in them.

00:39:30.150 --> 00:39:34.300
And it's all based on testing
on your device, itself.

00:39:34.300 --> 00:39:36.650
Obviously, USB
debugging allows you

00:39:36.650 --> 00:39:39.470
to hook a USB device
into your phone.

00:39:39.470 --> 00:39:40.850
That's pretty normal.

00:39:40.850 --> 00:39:42.780
But the other things
you can do in there,

00:39:42.780 --> 00:39:46.120
and I really encourage you guys
to go look in the developer

00:39:46.120 --> 00:39:48.760
options and just start
playing with these things,

00:39:48.760 --> 00:39:51.140
are allowing mock
location, so that

00:39:51.140 --> 00:39:53.930
allows you to specify
some of the locations

00:39:53.930 --> 00:39:55.230
we were just talking about.

00:39:55.230 --> 00:39:58.460
Strict Mode allows you
to flash your phone,

00:39:58.460 --> 00:40:01.630
it flashes your phone red
when you're doing operations

00:40:01.630 --> 00:40:02.960
on the main UI thread.

00:40:02.960 --> 00:40:05.260
Which, as good
Android developers,

00:40:05.260 --> 00:40:07.560
you never want to do
long running operations

00:40:07.560 --> 00:40:08.700
on the UI thread.

00:40:08.700 --> 00:40:10.560
So there's just
a check box there

00:40:10.560 --> 00:40:13.740
that allows you to quickly
see, and it's really obvious.

00:40:13.740 --> 00:40:15.120
In fact, I run
this all the time.

00:40:15.120 --> 00:40:17.880
I have strict mode enabled
on my device all the time,

00:40:17.880 --> 00:40:22.190
and it's interesting to see
how many apps are being bad.

00:40:22.190 --> 00:40:24.600
But as a developer, it's
really great for you

00:40:24.600 --> 00:40:26.710
to be able to see when
your app is being bad.

00:40:26.710 --> 00:40:28.820
And it's really in your face.

00:40:28.820 --> 00:40:32.140
You could show touches, so if
you're doing a presentation

00:40:32.140 --> 00:40:34.720
or something, it will
highlight the touch points

00:40:34.720 --> 00:40:36.980
you're pressing on your device.

00:40:36.980 --> 00:40:39.390
You can change the animation
and transition scales

00:40:39.390 --> 00:40:43.470
so that you can get a closer
look at the animations

00:40:43.470 --> 00:40:46.560
that you're using, and
if your debugging those.

00:40:46.560 --> 00:40:50.460
You could also select-- and
this is just a small list.

00:40:50.460 --> 00:40:52.800
There's a lot of stuff in there.

00:40:52.800 --> 00:40:55.380
You could also, one,
don't keep activity.

00:40:55.380 --> 00:40:58.940
So this will kill
the activity as soon

00:40:58.940 --> 00:41:01.960
as it closes, which allows
you to mess with state

00:41:01.960 --> 00:41:05.490
if you're doing
particular operations.

00:41:05.490 --> 00:41:09.670
So the developer options
that are on the phone

00:41:09.670 --> 00:41:12.520
are really, really
rich, and something

00:41:12.520 --> 00:41:15.690
that most people don't use,
but something that you should.

00:41:15.690 --> 00:41:17.470
And they're really
low risk to play with.

00:41:17.470 --> 00:41:20.100
Just go enable your
phone, go start playing

00:41:20.100 --> 00:41:20.876
with those things.

00:41:20.876 --> 00:41:22.750
I mean, you're not going
to mess anything up.

00:41:22.750 --> 00:41:25.560
Basically, these are just
visual cues and things.

00:41:25.560 --> 00:41:28.660
But I think you'll learn
a lot running your app

00:41:28.660 --> 00:41:33.130
and enabling some of these
different developer options.

00:41:33.130 --> 00:41:35.720
OK, so remember
all these devices,

00:41:35.720 --> 00:41:39.390
and remember that
we can't possibly

00:41:39.390 --> 00:41:41.850
afford to buy them all.

00:41:41.850 --> 00:41:43.600
Let's say that we just
want to concentrate

00:41:43.600 --> 00:41:47.269
on that top little area,
the phones and tablets.

00:41:47.269 --> 00:41:48.810
That's where you
really want to start

00:41:48.810 --> 00:41:51.950
talking about using
emulators to emulate some

00:41:51.950 --> 00:41:53.620
of these different
physical devices.

00:41:53.620 --> 00:41:57.520
And so I want to go ahead and
talk a little bit about how

00:41:57.520 --> 00:41:59.890
you set up an emulator, some
of the different options

00:41:59.890 --> 00:42:04.520
you have, and also how we go
about speeding up emulator,

00:42:04.520 --> 00:42:07.110
things like that.

00:42:07.110 --> 00:42:09.400
OK, so the first step you
want to do when you're

00:42:09.400 --> 00:42:12.340
creating an emulator
is you're going

00:42:12.340 --> 00:42:15.220
to create something called
an Android virtual device.

00:42:15.220 --> 00:42:20.030
So this is basically
just a representation

00:42:20.030 --> 00:42:21.890
of the physical
device that allows

00:42:21.890 --> 00:42:24.550
you to specify a variety
of different things

00:42:24.550 --> 00:42:27.710
that you want your particular
emulator to look like.

00:42:27.710 --> 00:42:31.400
So you'll notice,
in this case I have

00:42:31.400 --> 00:42:34.340
it emulating a Galaxy Nexus.

00:42:34.340 --> 00:42:39.140
I can specify which particular
OS I want to target.

00:42:39.140 --> 00:42:43.680
I can specify which particular
CPU I want to target.

00:42:43.680 --> 00:42:47.240
Currently, you can select
between ARM, Intel,

00:42:47.240 --> 00:42:49.420
and a third.

00:42:49.420 --> 00:42:52.784
AUDIENCE: NIPS?
[INAUDIBLE] NIPS?

00:42:52.784 --> 00:42:53.575
MIKE WOLFSON: NIPS.

00:42:57.330 --> 00:43:01.020
You can specify hardware,
keyboard, things like that.

00:43:01.020 --> 00:43:04.270
If it has a camera, if it
doesn't have a camera, memory

00:43:04.270 --> 00:43:11.030
footprint, and you can
also specify SD card,

00:43:11.030 --> 00:43:11.860
things like that.

00:43:11.860 --> 00:43:15.750
Now there's a couple
options at the bottom

00:43:15.750 --> 00:43:17.732
that I want to
particularly call out,

00:43:17.732 --> 00:43:19.940
because they are particularly
useful and particularly

00:43:19.940 --> 00:43:20.830
functional.

00:43:20.830 --> 00:43:23.130
The first one is Use Host GPU.

00:43:23.130 --> 00:43:27.730
So this allows you to, if
your computer has a GPU,

00:43:27.730 --> 00:43:30.326
it allows you to
leverage that to improve

00:43:30.326 --> 00:43:31.700
the performance
of your emulator.

00:43:31.700 --> 00:43:35.310
So it will attach that CPU.

00:43:35.310 --> 00:43:37.440
I think that that's
only available

00:43:37.440 --> 00:43:40.994
if you're using the HAXM
emulator, the Intel.

00:43:40.994 --> 00:43:41.660
Is that correct?

00:43:44.252 --> 00:43:45.864
I think you can
only the host GPU

00:43:45.864 --> 00:43:47.530
if you're using an
Intel emulator, which

00:43:47.530 --> 00:43:50.490
we'll get to in a second.

00:43:50.490 --> 00:43:53.420
But the other really
great thing is Snapshot.

00:43:53.420 --> 00:43:59.280
So if you guys have ever used
any virtual machine, VMware,

00:43:59.280 --> 00:44:02.860
et cetera, when you close
the virtual machine,

00:44:02.860 --> 00:44:04.350
there is functionality
that allows

00:44:04.350 --> 00:44:07.590
you to save a snapshot
of that virtual machine

00:44:07.590 --> 00:44:09.640
so the next time
you bring it up,

00:44:09.640 --> 00:44:13.690
it brings it up to
that same place.

00:44:13.690 --> 00:44:16.830
That's exactly what this
Snapshot functionality

00:44:16.830 --> 00:44:19.270
does, because these are
basically virtual machines,

00:44:19.270 --> 00:44:22.130
anyway, these emulator images.

00:44:22.130 --> 00:44:24.990
So when you're
creating your AVD,

00:44:24.990 --> 00:44:27.590
if you check that
snapshot button,

00:44:27.590 --> 00:44:31.130
it allows you to enable
the snapshot functionality.

00:44:31.130 --> 00:44:34.950
Then, when you're
launching your AVD,

00:44:34.950 --> 00:44:38.740
you can select these
three buttons here

00:44:38.740 --> 00:44:42.350
at the bottom, which allow
you to use the snapshot.

00:44:42.350 --> 00:44:44.780
So the first time you
bring up your emulator,

00:44:44.780 --> 00:44:46.970
you will Wipe User
Data, and then

00:44:46.970 --> 00:44:50.290
have this Save To
Snapshot button enabled.

00:44:50.290 --> 00:44:52.210
So generally what
I do is, I bring up

00:44:52.210 --> 00:44:57.830
an emulator from scratch, I
go through the various startup

00:44:57.830 --> 00:45:03.820
options that it presents
you, like there's the Android

00:45:03.820 --> 00:45:09.430
overlays that say press OK to
put apps here, or whatever.

00:45:09.430 --> 00:45:11.580
I go through all
those startup options,

00:45:11.580 --> 00:45:13.870
so I have a fresh emulator
that has been started up,

00:45:13.870 --> 00:45:16.240
and I've gotten through
all these startup dialogs,

00:45:16.240 --> 00:45:18.400
and then I kill
it right there so

00:45:18.400 --> 00:45:22.110
that I have a pristine emulator
that has been started up

00:45:22.110 --> 00:45:25.720
and is in brand spanking
new fresh state.

00:45:25.720 --> 00:45:29.200
Next time, when I start
my AVD, my emulator,

00:45:29.200 --> 00:45:31.870
instead of having Wipe
User Data selected,

00:45:31.870 --> 00:45:35.790
I have Launch From
Snapshot selected,

00:45:35.790 --> 00:45:38.080
and not Save To Snapshot.

00:45:38.080 --> 00:45:40.760
So next time, when I
start up this emulator,

00:45:40.760 --> 00:45:44.130
it's going to start it up using
the snapshot that I just took.

00:45:44.130 --> 00:45:47.820
And the great thing is it
changes the start up time

00:45:47.820 --> 00:45:52.600
from, like I said, three,
four minutes, to seconds.

00:45:52.600 --> 00:45:55.090
Maybe 10 seconds, 20 seconds.

00:45:55.090 --> 00:45:58.550
If you're not using snapshots,
this will-- in fact,

00:45:58.550 --> 00:46:02.220
if you leave here now, you just
learned something really good.

00:46:02.220 --> 00:46:05.237
Snapshots will save
you a lot of time.

00:46:05.237 --> 00:46:07.070
The other thing you
could do using snapshots

00:46:07.070 --> 00:46:10.080
is if you do have a
particular state in your app

00:46:10.080 --> 00:46:12.140
that you want to
test repeatedly,

00:46:12.140 --> 00:46:14.150
you can bring your
app up to that state,

00:46:14.150 --> 00:46:17.220
and then save that
state as your snapshot.

00:46:17.220 --> 00:46:20.190
So you can always bring
up your fresh emulator

00:46:20.190 --> 00:46:23.095
to exactly the point in the
code that you need to test.

00:46:26.750 --> 00:46:29.390
OK, so we kind of touched on
some of these things before,

00:46:29.390 --> 00:46:33.610
but there are alternatives to
using the Android emulators.

00:46:33.610 --> 00:46:36.500
First one is Intel's HAXM.

00:46:36.500 --> 00:46:40.920
So this allows you to create
emulators using the Intel

00:46:40.920 --> 00:46:41.520
chipset.

00:46:41.520 --> 00:46:45.800
So if your computer is running
an Intel chip instead of an AMD

00:46:45.800 --> 00:46:50.540
chip, this is a
great thing to do.

00:46:50.540 --> 00:46:55.160
Now, performance
wise, it's fine.

00:46:55.160 --> 00:46:59.060
But the Intel HAXM emulator
is much faster to start up,

00:46:59.060 --> 00:47:01.350
and much faster to deploy to.

00:47:01.350 --> 00:47:03.825
So, right there
in and of itself,

00:47:03.825 --> 00:47:08.460
it is a much faster experience
to be using the Intel HAXM

00:47:08.460 --> 00:47:09.810
emulator.

00:47:09.810 --> 00:47:16.200
Big giant limitation of HAXM
is that it doesn't support

00:47:16.200 --> 00:47:21.830
the Google APIs, it only
supports the Android APIs.

00:47:21.830 --> 00:47:25.600
So if you're doing anything
that requires Google APIs, GCM

00:47:25.600 --> 00:47:29.680
or some of the other options
available to Android,

00:47:29.680 --> 00:47:33.170
Intel HAXM is, unfortunately,
not available to use.

00:47:33.170 --> 00:47:36.530
So if you're not
using the Google APIs,

00:47:36.530 --> 00:47:38.070
Intel HAXM's really great.

00:47:38.070 --> 00:47:39.990
I would really strongly
suggest you use it.

00:47:39.990 --> 00:47:45.960
It supports snapshots just the
same as the standard emulator.

00:47:45.960 --> 00:47:48.270
So there is also
another newcomer

00:47:48.270 --> 00:47:50.030
on the block, called Genymotion.

00:47:50.030 --> 00:47:55.640
And they provide,
basically, turnkey options

00:47:55.640 --> 00:47:58.090
for generating emulators.

00:47:58.090 --> 00:48:02.680
So instead of with HAXM or
the standard Android emulator,

00:48:02.680 --> 00:48:08.110
I have to go through create
the emulator AVD that I think

00:48:08.110 --> 00:48:10.790
is appropriate to my
needs, start it up,

00:48:10.790 --> 00:48:11.710
et cetera, et cetera.

00:48:11.710 --> 00:48:14.300
Genymotion provides
a really rich GUI

00:48:14.300 --> 00:48:17.270
that allows you to
start from a variety

00:48:17.270 --> 00:48:21.370
of pre-configured
emulator images.

00:48:21.370 --> 00:48:24.170
The cool thing about previous
version of Genymotion,

00:48:24.170 --> 00:48:26.760
and this has just changed
with their new release,

00:48:26.760 --> 00:48:28.660
is the last version
of Genymotion

00:48:28.660 --> 00:48:31.820
actually did support
full Play Services.

00:48:31.820 --> 00:48:34.600
So it supported the Play store,
you could create a Google

00:48:34.600 --> 00:48:37.750
account on a Genymotion
emulator, all those things.

00:48:37.750 --> 00:48:40.970
Unfortunately, that
didn't last long,

00:48:40.970 --> 00:48:44.270
because they just announced
in their next release

00:48:44.270 --> 00:48:46.840
that that's going away.

00:48:46.840 --> 00:48:48.920
I'm pretty sure, and of
course, we don't know,

00:48:48.920 --> 00:48:51.050
because Genymotion
is a closed project,

00:48:51.050 --> 00:48:53.480
I'm pretty sure
they use Intel HAXM.

00:48:53.480 --> 00:48:54.840
It's really fast.

00:48:54.840 --> 00:48:56.770
It's really robust.

00:48:56.770 --> 00:48:59.510
The cool thing about both
Intel HAXM and Genymotion,

00:48:59.510 --> 00:49:02.370
and this is one of those things
you might not key in on early,

00:49:02.370 --> 00:49:05.500
but really makes a difference
in the development process,

00:49:05.500 --> 00:49:07.720
is the deployment speed.

00:49:07.720 --> 00:49:10.262
So it takes a little
bit of time to deploy

00:49:10.262 --> 00:49:11.220
to an Android emulator.

00:49:11.220 --> 00:49:14.150
Both HAXM and Genymotion,
the deployment time

00:49:14.150 --> 00:49:16.030
is much more rapid.

00:49:16.030 --> 00:49:22.570
So those are some things that
you might not key in on early,

00:49:22.570 --> 00:49:24.570
but it makes a big
difference, especially

00:49:24.570 --> 00:49:27.210
in your daily development
cycle that you're

00:49:27.210 --> 00:49:31.130
deploying, deploying, deploying.

00:49:31.130 --> 00:49:32.273
One sec, this guy.

00:49:32.273 --> 00:49:34.588
AUDIENCE: You said
AMD several times.,

00:49:34.588 --> 00:49:36.910
but you actually
meant ARM, right?

00:49:36.910 --> 00:49:37.730
MIKE WOLFSON: Yeah.

00:49:37.730 --> 00:49:38.945
ARM, sorry.

00:49:38.945 --> 00:49:42.185
The question is, I've been
saying AMD, do I mean ARM?

00:49:42.185 --> 00:49:43.361
The answer is yes.

00:49:43.361 --> 00:49:44.236
AUDIENCE: [INAUDIBLE]

00:49:50.160 --> 00:49:53.290
MIKE WOLFSON: Android Studio
uses the same emulators.

00:49:53.290 --> 00:49:58.130
And I'm pretty sure you can use
Genymotion or HAXM, as well,

00:49:58.130 --> 00:49:58.935
on Android Studio.

00:50:02.730 --> 00:50:06.260
OK, so that's
enough of the tools.

00:50:06.260 --> 00:50:07.260
Let's talk about coding.

00:50:10.170 --> 00:50:15.250
There are a ton of really
great tools built into the ADT

00:50:15.250 --> 00:50:18.120
that if you use them, will
save you a lot of time

00:50:18.120 --> 00:50:19.370
and a lot of mistakes.

00:50:19.370 --> 00:50:21.630
Android, as again,
you guys all know,

00:50:21.630 --> 00:50:22.880
can be pretty challenging.

00:50:22.880 --> 00:50:24.129
There's a lot of moving parts.

00:50:24.129 --> 00:50:26.250
You have your XML
file, your Java file,

00:50:26.250 --> 00:50:30.570
you have other external
configuration files,

00:50:30.570 --> 00:50:35.030
for certain operations that
you're using a fragment,

00:50:35.030 --> 00:50:37.482
you have multiple Java
files all connected.

00:50:37.482 --> 00:50:38.690
It can be really challenging.

00:50:38.690 --> 00:50:42.080
And if you mess up one piece,
one attribute in that XML file,

00:50:42.080 --> 00:50:46.340
it can be a bear to
try to debug that.

00:50:46.340 --> 00:50:49.600
There are a ton of automated
code generation tools,

00:50:49.600 --> 00:50:53.220
that I'll show you in a moment,
that at least allow you to stub

00:50:53.220 --> 00:50:57.060
out your initial code, so
that you're not fighting

00:50:57.060 --> 00:50:59.610
the basic stuff, and you can
concentrate on the business

00:50:59.610 --> 00:51:02.410
logic and the important
stuff, as opposed

00:51:02.410 --> 00:51:06.025
to creating these foundations.

00:51:06.025 --> 00:51:10.465
AUDIENCE: So, Gradle
made that easy.

00:51:10.465 --> 00:51:11.340
MIKE WOLFSON: Gradle?

00:51:11.340 --> 00:51:12.220
AUDIENCE: Yeah.

00:51:12.220 --> 00:51:14.210
MIKE WOLFSON: How so?

00:51:14.210 --> 00:51:16.180
The comment is,
Gradle made this easy.

00:51:16.180 --> 00:51:19.450
AUDIENCE: There's not
too many moving parts.

00:51:19.450 --> 00:51:20.340
[INAUDIBLE]

00:51:20.340 --> 00:51:21.350
MIKE WOLFSON: Right.

00:51:21.350 --> 00:51:24.140
Yeah, Gradle does make some
of these configuration things

00:51:24.140 --> 00:51:28.290
easier, because of the
nature of their resource.

00:51:28.290 --> 00:51:33.185
You can build multiple APKs
from different resources within.

00:51:33.185 --> 00:51:33.685
Yeah.

00:51:36.310 --> 00:51:40.360
So there's really great support
for Java and XML editing

00:51:40.360 --> 00:51:42.830
that you can take advantage
of, and there's also

00:51:42.830 --> 00:51:45.950
a really rich robust
visual editor that most

00:51:45.950 --> 00:51:47.650
people probably
don't use, because it

00:51:47.650 --> 00:51:52.230
used to kind of suck, basically.

00:51:52.230 --> 00:51:54.740
OK, so let's talk a little
bit about some of the code

00:51:54.740 --> 00:51:57.670
generation wizards
that you can use,

00:51:57.670 --> 00:52:01.130
and why you really should
be using these things.

00:52:01.130 --> 00:52:05.760
So to access any
of these wizards,

00:52:05.760 --> 00:52:08.700
you can hit File,
New at the top,

00:52:08.700 --> 00:52:11.970
or Control, or Command on Apple.

00:52:11.970 --> 00:52:14.829
And that will bring up
this wizard selection.

00:52:14.829 --> 00:52:16.870
You can see there's a
variety of different things

00:52:16.870 --> 00:52:17.703
you can do in there.

00:52:17.703 --> 00:52:21.180
You can create an icon set, you
can create a simple activity,

00:52:21.180 --> 00:52:23.050
you can create an
Android XML file,

00:52:23.050 --> 00:52:26.000
a variety of different things.

00:52:26.000 --> 00:52:29.970
These are really
robust tools that

00:52:29.970 --> 00:52:33.670
will allow you to just create
a simple code that you can then

00:52:33.670 --> 00:52:35.740
go in and fill out
yourself later.

00:52:35.740 --> 00:52:39.940
So let's start with
the first example,

00:52:39.940 --> 00:52:41.540
and that's Android Icon Set.

00:52:41.540 --> 00:52:44.440
So again, you guys
all know what a hassle

00:52:44.440 --> 00:52:47.110
it is to come up with all
the different versions

00:52:47.110 --> 00:52:49.250
of your icons.

00:52:49.250 --> 00:52:51.210
You need to, first of
all, figure out what

00:52:51.210 --> 00:52:53.580
size they need to
be, what folder

00:52:53.580 --> 00:52:54.630
do they need to go in to?

00:52:54.630 --> 00:52:59.574
Do I have XXHDPI for this
one, et cetera, et cetera.

00:52:59.574 --> 00:53:00.490
It's a real challenge.

00:53:00.490 --> 00:53:02.670
Not to mention, trying
to communicate that

00:53:02.670 --> 00:53:07.840
to your graphic designer or
someone else on your team.

00:53:07.840 --> 00:53:09.840
This Android Icon Set,
and the other thing

00:53:09.840 --> 00:53:12.490
I will mention about
this particular tool

00:53:12.490 --> 00:53:14.850
is there's a really--
in fact, this tools

00:53:14.850 --> 00:53:16.900
good, that's built into Eclipse.

00:53:16.900 --> 00:53:21.950
But this tool is based on a web
project called Android Asset

00:53:21.950 --> 00:53:23.390
Studio.

00:53:23.390 --> 00:53:26.530
Android Asset Studio,
remember that.

00:53:26.530 --> 00:53:28.290
It's a website
that not only will

00:53:28.290 --> 00:53:31.550
allow you to create your
different resolution images,

00:53:31.550 --> 00:53:33.960
but Android Asset
Studio, the website,

00:53:33.960 --> 00:53:37.380
allows you to create frames
for your screenshots,

00:53:37.380 --> 00:53:39.770
or a variety of other
different really great things.

00:53:39.770 --> 00:53:43.780
So this is just a subset
of what is on that website,

00:53:43.780 --> 00:53:48.060
but let me just show you what
this particular thing allows

00:53:48.060 --> 00:53:49.030
you to do.

00:53:49.030 --> 00:53:53.380
So once you've selected
Create an Icon Set,

00:53:53.380 --> 00:53:55.536
it's going to bring
up this wizard.

00:53:55.536 --> 00:53:56.910
Basically what
this wizard allows

00:53:56.910 --> 00:53:59.590
you to do is, you could
select an image that's

00:53:59.590 --> 00:54:02.240
your own icon that you can
go select from anywhere

00:54:02.240 --> 00:54:06.570
on your system, clip art, this
is the Android standard clip

00:54:06.570 --> 00:54:07.070
art.

00:54:07.070 --> 00:54:12.910
So if you want to make sure that
your settings icon matches what

00:54:12.910 --> 00:54:15.580
the Android settings icon
is, it's all there for you,

00:54:15.580 --> 00:54:16.590
and it's built right in.

00:54:16.590 --> 00:54:18.430
Or you could create
a text one, which

00:54:18.430 --> 00:54:23.030
is what is shown
here in this example.

00:54:23.030 --> 00:54:26.550
So you can select
your different icon,

00:54:26.550 --> 00:54:28.730
what you want your
icon to look like.

00:54:28.730 --> 00:54:31.990
You can specify colors, change
all sorts of different things,

00:54:31.990 --> 00:54:33.320
change the padding.

00:54:33.320 --> 00:54:38.760
When you press Finish, it
actually will create the icons

00:54:38.760 --> 00:54:41.130
and place them
within your project,

00:54:41.130 --> 00:54:42.970
in the folders they're
supposed to go.

00:54:42.970 --> 00:54:48.350
So it's going to create a
LDPI, HDPI, et cetera, image

00:54:48.350 --> 00:54:50.150
in the proper resolution.

00:54:50.150 --> 00:54:53.620
And also, it's going to put
those in the proper folders

00:54:53.620 --> 00:54:54.900
with the proper name.

00:54:54.900 --> 00:55:02.340
So the best way to import
images into your system,

00:55:02.340 --> 00:55:05.220
even if your designer
has given it to you,

00:55:05.220 --> 00:55:10.160
is bring up the image
using that image option,

00:55:10.160 --> 00:55:14.760
and then allow Asset
Studio, or Asset,

00:55:14.760 --> 00:55:18.150
to put that into
your project for you.

00:55:18.150 --> 00:55:22.540
This saves a whole lot of
time, and just another workflow

00:55:22.540 --> 00:55:26.820
thing that I use that has
been very successful for me.

00:55:26.820 --> 00:55:29.480
When I'm creating my
graphics, I generally

00:55:29.480 --> 00:55:32.170
know what name I want to use
and what graphics I need.

00:55:32.170 --> 00:55:34.350
So what I'll do is, I'll
create a stubbed out

00:55:34.350 --> 00:55:38.250
graphic just like this, maybe
AA or something red and ugly,

00:55:38.250 --> 00:55:42.550
name it the proper thing,
put it in my resource folder.

00:55:42.550 --> 00:55:45.000
Then, I actually
give that resource

00:55:45.000 --> 00:55:48.950
folder to my graphic designer
and say, here's what I need.

00:55:48.950 --> 00:55:51.470
And they know exactly what
size images they need to do,

00:55:51.470 --> 00:55:53.240
and they know exactly the names.

00:55:53.240 --> 00:55:57.530
So they can then put all those
images into that resource zip,

00:55:57.530 --> 00:56:00.710
give it back to me, I copy it
into my project, and I'm done.

00:56:00.710 --> 00:56:03.355
There's no imports,
and all the names match

00:56:03.355 --> 00:56:04.390
and all the sizes match.

00:56:04.390 --> 00:56:09.120
So that's something that has
taken me a long time to come up

00:56:09.120 --> 00:56:11.010
with, but saves a
whole lot of time.

00:56:11.010 --> 00:56:12.650
It's really challenging
to communicate

00:56:12.650 --> 00:56:15.710
all the different resolutions.

00:56:15.710 --> 00:56:17.490
OK, so that's Android
Asset Studio--

00:56:17.490 --> 00:56:20.640
that's creating an asset, and
that's really, really useful.

00:56:20.640 --> 00:56:23.390
I suggest everybody use that.

00:56:23.390 --> 00:56:28.100
You can also generate great
code with these wizards.

00:56:28.100 --> 00:56:30.410
And here's one of the
more complicated ones,

00:56:30.410 --> 00:56:34.780
and it's a very common
use case, and that's

00:56:34.780 --> 00:56:37.760
multiple fragments with
a list view on one side

00:56:37.760 --> 00:56:40.450
and a detail view
on the other side.

00:56:40.450 --> 00:56:42.990
And if you guys know
about Android development,

00:56:42.990 --> 00:56:47.140
there's an adapter
involved, there's

00:56:47.140 --> 00:56:49.930
an activity, two
fragments, and then

00:56:49.930 --> 00:56:52.670
all the wiring that goes
between those things.

00:56:52.670 --> 00:56:56.350
Some XML files, there's
a lot going on here.

00:56:56.350 --> 00:56:58.940
This wizard allows you to walk
through a couple different

00:56:58.940 --> 00:57:02.570
questions, specify the
names of the items you want

00:57:02.570 --> 00:57:05.410
and the activities
that you're creating,

00:57:05.410 --> 00:57:09.380
and it will generate
the stubs for the code

00:57:09.380 --> 00:57:12.256
that you want to generate
and place that directly

00:57:12.256 --> 00:57:13.005
into your project.

00:57:16.480 --> 00:57:19.760
It's just a great first step
to allow you to stub out

00:57:19.760 --> 00:57:23.420
all the things, the
wiring and the hard stuff.

00:57:23.420 --> 00:57:26.420
And get down to the
nitty-gritty of writing code.

00:57:28.970 --> 00:57:33.730
Ton of stuff to explore
in these code wizards.

00:57:33.730 --> 00:57:37.480
The other thing I just want
to mention-- if you're not

00:57:37.480 --> 00:57:39.520
happy with the code
wizards that they provide,

00:57:39.520 --> 00:57:41.150
you can actually
create your own.

00:57:41.150 --> 00:57:44.440
So frequently, in the
development process,

00:57:44.440 --> 00:57:48.160
we create our own
frameworks and components

00:57:48.160 --> 00:57:50.930
that fit our particular
business case.

00:57:50.930 --> 00:57:57.010
You can actually create
your own template

00:57:57.010 --> 00:58:00.820
and allow your developers
to just use the template

00:58:00.820 --> 00:58:03.240
to stub out these foundations.

00:58:03.240 --> 00:58:05.690
So really useful.

00:58:05.690 --> 00:58:07.810
And it's these sort
of automation things

00:58:07.810 --> 00:58:10.560
that just make the development
process so much more

00:58:10.560 --> 00:58:13.760
efficient and so
much more effective.

00:58:13.760 --> 00:58:16.450
The last thing I might
mention about generating

00:58:16.450 --> 00:58:20.710
code this way-- because it's
all generated code compliant

00:58:20.710 --> 00:58:22.970
Android design patterns.

00:58:22.970 --> 00:58:26.110
So the naming
standards are matched.

00:58:26.110 --> 00:58:30.600
The division of
workload, et cetera.

00:58:30.600 --> 00:58:34.830
So it's a really great
way to get started.

00:58:34.830 --> 00:58:39.930
I wanted to highlight six of
the most important keystrokes I

00:58:39.930 --> 00:58:40.860
use in Eclipse.

00:58:40.860 --> 00:58:44.420
And these are ones that
I use all the time.

00:58:44.420 --> 00:58:46.290
The first one you guys
probably know about.

00:58:46.290 --> 00:58:48.430
And that's code completion.

00:58:48.430 --> 00:58:50.080
Control or Command, Space.

00:58:50.080 --> 00:58:53.450
This works in both Java and XML.

00:58:53.450 --> 00:58:54.950
So if you're trying
to figure out

00:58:54.950 --> 00:58:57.450
what attributes you
need in your XML file--

00:58:57.450 --> 00:59:01.050
was that wrap content or
fill parent or match parent?

00:59:01.050 --> 00:59:03.050
I don't forget.

00:59:03.050 --> 00:59:06.360
Android clone width
equals Control Space.

00:59:06.360 --> 00:59:09.230
And it'll give you the list
of all your different options

00:59:09.230 --> 00:59:11.280
that you can put in there.

00:59:11.280 --> 00:59:13.940
That works in both Java and XML.

00:59:13.940 --> 00:59:15.930
I'm sure you guys already
know about that one.

00:59:15.930 --> 00:59:21.270
If you don't, that will
probably change your life.

00:59:21.270 --> 00:59:25.140
One that you probably don't
know about that's also extremely

00:59:25.140 --> 00:59:30.390
useful and that's kind of
universal is Control Command 1.

00:59:30.390 --> 00:59:34.200
So if you highlight
anywhere in XML or Java,

00:59:34.200 --> 00:59:37.830
you highlight a particular
component and hit Command 1,

00:59:37.830 --> 00:59:40.530
it's going to provide
context-sensitive help based

00:59:40.530 --> 00:59:42.180
on what it is that
you've selected.

00:59:42.180 --> 00:59:44.770
So in some cases,
it may allow you

00:59:44.770 --> 00:59:49.250
to extract that string
to the strings file.

00:59:49.250 --> 00:59:51.100
We don't want to leave
hard-coded strings

00:59:51.100 --> 00:59:52.770
in our Android files.

00:59:52.770 --> 00:59:55.990
We want to extract
those to strings.XML.

00:59:55.990 --> 00:59:58.030
That's something
this'll allow you to do.

00:59:58.030 --> 01:00:00.360
But depending on what it
is that you've selected,

01:00:00.360 --> 01:00:02.770
it will provide
context-specific things.

01:00:02.770 --> 01:00:05.520
So there may be
refactoring help.

01:00:05.520 --> 01:00:10.260
If you're on a layout parent, or
depending on what you're doing.

01:00:10.260 --> 01:00:14.480
So if you need help, highlight
something, Command 1.

01:00:14.480 --> 01:00:17.510
And it will provide you a lot
of different functionality.

01:00:20.880 --> 01:00:22.370
And then the last one.

01:00:22.370 --> 01:00:25.990
This page is Command
Shift F. This

01:00:25.990 --> 01:00:31.790
allows you to reformat your code
to change indentation or change

01:00:31.790 --> 01:00:33.080
the formatting.

01:00:33.080 --> 01:00:38.880
The cool thing is this has
specific functionality for XML.

01:00:38.880 --> 01:00:41.600
It will change your
formatting, change

01:00:41.600 --> 01:00:44.710
your tabs, et cetera,
so everything lines up.

01:00:44.710 --> 01:00:47.830
It will also re-order
your XML attributes.

01:00:47.830 --> 01:00:56.180
So if generally
you want ID, width,

01:00:56.180 --> 01:00:58.700
height to be the top attributes,
et cetera, et cetera.

01:00:58.700 --> 01:01:01.530
There's an order that you
want your attributes in.

01:01:01.530 --> 01:01:04.150
And if the coder's not
careful, the attributes

01:01:04.150 --> 01:01:05.180
are all out of order.

01:01:05.180 --> 01:01:07.830
Control shift f will actually
reorder all the attributes so

01:01:07.830 --> 01:01:09.650
that they are in
exactly the order

01:01:09.650 --> 01:01:12.990
that the Android design
standards specify.

01:01:12.990 --> 01:01:14.740
And, if you don't
like that order,

01:01:14.740 --> 01:01:17.500
you can specify your own.

01:01:17.500 --> 01:01:20.890
So Command Shift F is really
useful, both in Java and XML,

01:01:20.890 --> 01:01:27.400
to ensure that your
formatting is consistent.

01:01:27.400 --> 01:01:29.330
Consistent with Android
and also consistent

01:01:29.330 --> 01:01:30.860
across all your entire project.

01:01:33.990 --> 01:01:35.340
Great, navigation.

01:01:35.340 --> 01:01:38.670
So these items were
key combinations

01:01:38.670 --> 01:01:42.280
that will allow you to create
code and speed through some

01:01:42.280 --> 01:01:43.300
of these things.

01:01:43.300 --> 01:01:47.550
This page covers
navigation commands.

01:01:47.550 --> 01:01:49.600
So the first one I
wanted to talk about

01:01:49.600 --> 01:01:54.040
is Command O. So anywhere
within an XML file or Java file,

01:01:54.040 --> 01:01:56.760
if you hit Command
O, it will show you

01:01:56.760 --> 01:02:02.440
a outline view of your code
with the methods highlighted,

01:02:02.440 --> 01:02:07.304
so you can quickly just
navigate with your arrow key

01:02:07.304 --> 01:02:08.470
to the method that you want.

01:02:08.470 --> 01:02:10.650
Rather than trying to
search through your code,

01:02:10.650 --> 01:02:12.300
and scrolling up and down.

01:02:12.300 --> 01:02:14.050
Command O, quickly
look for the method

01:02:14.050 --> 01:02:19.110
you want to go to, click
on it, and you're there.

01:02:19.110 --> 01:02:23.230
Another great way to
navigate around a project

01:02:23.230 --> 01:02:28.030
is Command Shift
R or T, actually.

01:02:28.030 --> 01:02:32.580
Command Shift T has a
more robust filter set.

01:02:32.580 --> 01:02:34.540
Command Shift R, from
anywhere in your system

01:02:34.540 --> 01:02:38.430
you can start typing the name
of a file you're looking for.

01:02:38.430 --> 01:02:43.590
And if you're using camel case,
you just use the first letter.

01:02:43.590 --> 01:02:49.890
So camel case means
uppercase C-O-D-E uppercase

01:02:49.890 --> 01:02:54.710
P-R-O-J-E-C-T. You can type
CP, and it will find that code

01:02:54.710 --> 01:02:56.980
project file.

01:02:56.980 --> 01:02:58.900
Command Shift R is
a really great way

01:02:58.900 --> 01:03:04.480
to quickly find different
files that you're looking for.

01:03:04.480 --> 01:03:06.790
And then the last one
that's really useful

01:03:06.790 --> 01:03:10.800
is Alt Shift A. This allows
you to quickly run or debug

01:03:10.800 --> 01:03:14.220
your app without having to right
mouse click on the project,

01:03:14.220 --> 01:03:15.282
Run As.

01:03:15.282 --> 01:03:17.490
Or, I don't know if you guys
ever notice, but there's

01:03:17.490 --> 01:03:20.960
a little Play symbol up
in the Eclipse toolbar

01:03:20.960 --> 01:03:23.240
that allows you to
also run really quick.

01:03:23.240 --> 01:03:25.320
That's another
quick way to do it.

01:03:25.320 --> 01:03:28.510
Alt Shift A allows
you to quickly run

01:03:28.510 --> 01:03:29.940
your app from anywhere.

01:03:34.450 --> 01:03:37.190
So that's commands, shortcuts.

01:03:37.190 --> 01:03:41.140
I now want to talk a little
bit about the Visual Editor.

01:03:41.140 --> 01:03:43.540
My guess is-- and
this was the case

01:03:43.540 --> 01:03:48.010
with me-- anybody who that
the Visual Editor years ago

01:03:48.010 --> 01:03:50.810
decided that it's
just not very good.

01:03:50.810 --> 01:03:52.310
It puts a bunch of code.

01:03:52.310 --> 01:03:54.520
It doesn't really work.

01:03:54.520 --> 01:03:56.070
You're going to
struggle with trying

01:03:56.070 --> 01:03:58.195
to get things lined up the
way you want them to be,

01:03:58.195 --> 01:04:00.080
et cetera, et cetera.

01:04:00.080 --> 01:04:02.790
The tool is much,
much better now.

01:04:02.790 --> 01:04:05.620
Basically, it allows
you to drag and drop

01:04:05.620 --> 01:04:12.430
components from the left-hand
drawer right onto your palate.

01:04:12.430 --> 01:04:16.140
And you can arrange all
your components as you want.

01:04:16.140 --> 01:04:18.020
It also allows, on
the right-hand side,

01:04:18.020 --> 01:04:21.630
these property editors allow
you to very quickly select

01:04:21.630 --> 01:04:23.550
different properties
on different components

01:04:23.550 --> 01:04:25.885
within your UI.

01:04:25.885 --> 01:04:30.320
So if you have a button
and you select it,

01:04:30.320 --> 01:04:34.930
the properties will allow you to
specify gravity or width or any

01:04:34.930 --> 01:04:36.180
of those things.

01:04:36.180 --> 01:04:37.920
Instead of needing
to type them, you

01:04:37.920 --> 01:04:40.060
can go through the
selection criteria

01:04:40.060 --> 01:04:44.295
and quickly select whatever
it is that you want.

01:04:46.960 --> 01:04:50.536
But the one thing that I
really want to highlight.

01:04:50.536 --> 01:04:52.410
All right, Mike, that
all sounds pretty cool.

01:04:52.410 --> 01:04:53.600
But I'm a coder.

01:04:53.600 --> 01:04:55.490
I like to do stuff by hand.

01:04:55.490 --> 01:04:57.590
You still really
should be checking

01:04:57.590 --> 01:05:00.460
out this Visual Editor
for this bar here.

01:05:00.460 --> 01:05:04.830
Because what this bar allows
you to do is within the IDE,

01:05:04.830 --> 01:05:08.470
it allows you to change the
visual style representative

01:05:08.470 --> 01:05:10.790
of what you're looking at.

01:05:10.790 --> 01:05:15.560
In addition to, as I have set
up here now, and now you'll see,

01:05:15.560 --> 01:05:20.700
actually you can look
at how your app will

01:05:20.700 --> 01:05:22.050
look on multiple devices.

01:05:22.050 --> 01:05:28.340
So if you'll see, in this
screen I have a 3.2 HVGA image.

01:05:28.340 --> 01:05:30.660
A 5.1 WVGA.

01:05:30.660 --> 01:05:34.170
A 10.1 WXGA image.

01:05:34.170 --> 01:05:37.730
And I can quickly
look at exactly how

01:05:37.730 --> 01:05:42.800
my app is going to render on all
of those devices in one place.

01:05:42.800 --> 01:05:47.920
So the way that you get there is
where it's selected Nexus One,

01:05:47.920 --> 01:05:50.350
you can go into
that menu, and it

01:05:50.350 --> 01:05:53.340
will allow you to select
which of the different images

01:05:53.340 --> 01:05:57.250
you want to preview your app on.

01:05:57.250 --> 01:06:00.820
In theory, you can actually
make changes in real time

01:06:00.820 --> 01:06:05.040
and see how that's
going to lay out

01:06:05.040 --> 01:06:09.570
in all of those
different image sizes.

01:06:09.570 --> 01:06:11.055
AUDIENCE: So [INAUDIBLE]

01:06:22.305 --> 01:06:24.430
MIKE WOLFSON: So the question
is, years ago, people

01:06:24.430 --> 01:06:28.750
used tools like Droid Draw
or some other different tools

01:06:28.750 --> 01:06:32.627
to stub out their visual UI.

01:06:32.627 --> 01:06:34.960
Is this good enough now that
you don't need to use that?

01:06:34.960 --> 01:06:36.043
I think the answer is yes.

01:06:39.560 --> 01:06:43.170
There's a really robust
set of things you can do.

01:06:45.810 --> 01:06:47.760
The other thing I
will mention on this

01:06:47.760 --> 01:06:52.580
is, in addition to specifying
different resolution screens

01:06:52.580 --> 01:06:54.360
that you want to
look at, you can also

01:06:54.360 --> 01:07:01.490
specify API levels
using this selection.

01:07:01.490 --> 01:07:04.380
Or you can use this
one to actually look

01:07:04.380 --> 01:07:05.970
at your internationalization.

01:07:05.970 --> 01:07:09.590
So if you have enabled German
language, French language,

01:07:09.590 --> 01:07:12.120
et cetera on your
app, you can actually

01:07:12.120 --> 01:07:16.530
select those from this drop down
and see how your app lines up

01:07:16.530 --> 01:07:18.755
when you're using German
characters or something.

01:07:18.755 --> 01:07:20.380
And obviously, that's
really important,

01:07:20.380 --> 01:07:22.760
because certain
language character

01:07:22.760 --> 01:07:25.040
sets are bigger than others.

01:07:25.040 --> 01:07:27.870
And this allows you very
quickly to modify your UI

01:07:27.870 --> 01:07:33.560
and understand exactly how
it's going to look right here,

01:07:33.560 --> 01:07:34.160
really quick.

01:07:34.160 --> 01:07:35.750
There's no deploy cycle.

01:07:35.750 --> 01:07:39.150
There's no fiddling with your
phone to change the locale.

01:07:39.150 --> 01:07:40.370
It's all just right here.

01:07:40.370 --> 01:07:43.140
So even if you're not going to
use the Visual Editor to drag

01:07:43.140 --> 01:07:46.450
and drop components
and select properties,

01:07:46.450 --> 01:07:47.890
I would really
highly suggest that

01:07:47.890 --> 01:07:50.100
at least when you're
testing, that you bring

01:07:50.100 --> 01:07:53.110
your app in this
visual editor and play

01:07:53.110 --> 01:07:55.010
with the different
resolutions and things.

01:07:58.930 --> 01:08:00.670
So we're coming up
to the last section.

01:08:00.670 --> 01:08:03.350
And that's performance testing
and performance monitoring.

01:08:06.020 --> 01:08:09.360
So the first thing that
I wanted to make everyone

01:08:09.360 --> 01:08:12.360
aware of that you
might not know is

01:08:12.360 --> 01:08:14.920
there's something called
the Tools Monitor.

01:08:14.920 --> 01:08:19.439
So if you type "Tools
Monitor" from your--

01:08:19.439 --> 01:08:23.720
if you have Android home set,
you don't need to put the path.

01:08:23.720 --> 01:08:25.390
Do you guys know what DDMS is?

01:08:25.390 --> 01:08:29.700
The different tools
that allow you to--

01:08:29.700 --> 01:08:32.870
Monitor actually allows
you to run all the DDMS

01:08:32.870 --> 01:08:35.377
tools external to Eclipse.

01:08:35.377 --> 01:08:36.960
I'm going to show
you that, and you'll

01:08:36.960 --> 01:08:39.399
see that it's exactly
the same as DDMS.

01:08:39.399 --> 01:08:41.340
The cool thing is,
this would allow

01:08:41.340 --> 01:08:46.979
you to tell people that
don't have the IDE installed,

01:08:46.979 --> 01:08:49.520
it allows them to run some
of these performance tools

01:08:49.520 --> 01:08:52.370
and introspect some
of the functionality

01:08:52.370 --> 01:08:58.240
without requiring the full IDE
install, or importing a project

01:08:58.240 --> 01:09:02.609
and doing all those tough things
that maybe a tester might not

01:09:02.609 --> 01:09:04.600
want to do, or a
project manager.

01:09:07.640 --> 01:09:09.390
So you can bring up
the performance tools

01:09:09.390 --> 01:09:12.529
using Monitor, like this
Android device monitor.

01:09:12.529 --> 01:09:17.930
Or if you're in Eclipse, you
can show open perspective DDMS.

01:09:20.460 --> 01:09:20.960
OK.

01:09:20.960 --> 01:09:25.590
So this is what the DDMS or
Monitor window looks like.

01:09:25.590 --> 01:09:27.970
You'll notice on the
left, it has a list

01:09:27.970 --> 01:09:30.109
of devices you
currently have running,

01:09:30.109 --> 01:09:34.569
which allows you to select from
all those different devices.

01:09:34.569 --> 01:09:36.979
On the top right,
there's all sorts

01:09:36.979 --> 01:09:38.655
of different
functionality that allows

01:09:38.655 --> 01:09:42.370
you to introspect different
things within your app.

01:09:42.370 --> 01:09:47.350
Now, DDMS is really designed
for in-depth performance

01:09:47.350 --> 01:09:48.200
monitoring.

01:09:48.200 --> 01:09:50.529
So this is where
you're going to want

01:09:50.529 --> 01:09:56.600
to inspect how your threads are
running, if you have threads

01:09:56.600 --> 01:09:58.580
that aren't being
closed properly,

01:09:58.580 --> 01:10:03.100
or your heap allocation,
if you're getting Out

01:10:03.100 --> 01:10:05.430
of Memory errors.

01:10:05.430 --> 01:10:06.530
Allocation tracker.

01:10:06.530 --> 01:10:11.760
Where your objects are being
allocated within your heap.

01:10:11.760 --> 01:10:14.610
Network statistics get
really in-depth information

01:10:14.610 --> 01:10:17.060
about what calls
are being made when,

01:10:17.060 --> 01:10:21.790
and what kind of data throughput
is going through those.

01:10:21.790 --> 01:10:25.590
File Explorer, it's
a GUI that allows

01:10:25.590 --> 01:10:30.640
you to look on your phone
using-- introspect your file

01:10:30.640 --> 01:10:31.200
system.

01:10:31.200 --> 01:10:34.550
You can then pull or
push files to the file

01:10:34.550 --> 01:10:37.180
system on your phone using that.

01:10:37.180 --> 01:10:40.440
Then the emulator is
the tab I have exposed.

01:10:40.440 --> 01:10:43.930
This allows you to set--
if you want to send latency

01:10:43.930 --> 01:10:48.910
on your device, simulate a
phone call, simulate a location,

01:10:48.910 --> 01:10:50.645
this is where you would do that.

01:10:55.720 --> 01:10:58.550
So some important
things that I want

01:10:58.550 --> 01:11:02.174
to make sure everybody--
well, I guess

01:11:02.174 --> 01:11:03.840
we already covered
most of these things.

01:11:03.840 --> 01:11:08.380
But the one thing that most
people can really use out

01:11:08.380 --> 01:11:09.880
of this screen--
and by most people,

01:11:09.880 --> 01:11:14.630
this is not even developers--
is this little icon right here.

01:11:14.630 --> 01:11:17.820
This allows you to
select a device,

01:11:17.820 --> 01:11:19.364
bring your app up
on that device.

01:11:19.364 --> 01:11:20.780
You press that
button, and it will

01:11:20.780 --> 01:11:24.750
take a screen shot of whatever's
being shown on your device.

01:11:24.750 --> 01:11:27.900
So that's super useful,
because obviously,

01:11:27.900 --> 01:11:30.400
we all need to take
screenshots for demos

01:11:30.400 --> 01:11:32.560
or promotional materials.

01:11:32.560 --> 01:11:36.260
Upload pictures to the
Play Market, whatever.

01:11:36.260 --> 01:11:39.520
This is much easier than
trying to press up and power

01:11:39.520 --> 01:11:42.870
on the phone at
just the right time,

01:11:42.870 --> 01:11:45.680
and then trying to
get that file off.

01:11:45.680 --> 01:11:51.410
So that's a really
useful aspect of DDMS,

01:11:51.410 --> 01:11:52.480
is taking a screenshot.

01:11:55.670 --> 01:11:56.170
OK.

01:11:56.170 --> 01:11:59.720
So I think we already
covered those things.

01:11:59.720 --> 01:12:02.350
The last tool that I
really want to talk about

01:12:02.350 --> 01:12:06.300
that I think people might not
be aware of but is super useful,

01:12:06.300 --> 01:12:11.040
especially for
performance optimization,

01:12:11.040 --> 01:12:13.190
is Hierarchy Viewer.

01:12:13.190 --> 01:12:15.240
So what this allows
you to do is this

01:12:15.240 --> 01:12:20.280
allows you to inspect the
visual hierarchy of your UI,

01:12:20.280 --> 01:12:26.140
and see where you might
have extra layouts.

01:12:26.140 --> 01:12:28.990
In Android, the fewer
layouts the better.

01:12:28.990 --> 01:12:31.770
If you have a bunch
of nested layouts

01:12:31.770 --> 01:12:35.560
due to the way that the
view is measured and drawn,

01:12:35.560 --> 01:12:41.430
the more layouts you have,
the longer it takes to render.

01:12:41.430 --> 01:12:42.700
And that's obviously bad.

01:12:42.700 --> 01:12:44.560
That causes
performance problems.

01:12:44.560 --> 01:12:46.870
So this very quickly
allows you to look

01:12:46.870 --> 01:12:52.220
at your UI on a visual level and
see what your hierarchy looks

01:12:52.220 --> 01:12:57.140
like, and try to determine any
places where you can optimize.

01:12:57.140 --> 01:13:02.990
A optimal layout is
flat and shallow.

01:13:02.990 --> 01:13:05.345
This is not as optimal a layout.

01:13:05.345 --> 01:13:06.840
It's got lots of
different levels.

01:13:10.140 --> 01:13:11.950
So this really allows
you very quickly

01:13:11.950 --> 01:13:15.820
to see exactly how
your UI's laid out

01:13:15.820 --> 01:13:17.070
and how it's performing.

01:13:17.070 --> 01:13:19.530
In addition-- and
unfortunately, you can't really

01:13:19.530 --> 01:13:22.380
see in this
screenshot-- it actually

01:13:22.380 --> 01:13:26.440
shows you measurement
times in that pop-up.

01:13:26.440 --> 01:13:34.220
So you can very quickly run the
Hierarchy Viewer on your UI,

01:13:34.220 --> 01:13:38.630
see how long it took to
render, make optimizations,

01:13:38.630 --> 01:13:40.520
run Hierarchy Viewer
again, and see

01:13:40.520 --> 01:13:45.250
how your optimizations
affected the layout times.

01:13:45.250 --> 01:13:49.310
In that project that I
referenced previously,

01:13:49.310 --> 01:13:50.280
I have two layouts.

01:13:50.280 --> 01:13:53.550
One's called Bad Layout and
one's called Good Layout.

01:13:53.550 --> 01:13:56.090
When you look at them
on the device itself,

01:13:56.090 --> 01:13:57.410
they look exactly the same.

01:13:57.410 --> 01:14:00.120
The buttons are all placed
in exactly the same place.

01:14:00.120 --> 01:14:02.350
The UI does exactly
the same thing.

01:14:02.350 --> 01:14:06.310
However, one of them was
written with a relative layout,

01:14:06.310 --> 01:14:10.280
so it's all very flat and
not a lot of nested layouts.

01:14:10.280 --> 01:14:13.040
The other is written using
a bunch of nested layouts,

01:14:13.040 --> 01:14:15.310
a bunch of linear
layout of horizontal

01:14:15.310 --> 01:14:20.510
and vertical orientation
all mashed together.

01:14:20.510 --> 01:14:25.220
I encourage you guys to actually
run those two side by side

01:14:25.220 --> 01:14:27.830
and inspect what a
good layout looks like

01:14:27.830 --> 01:14:29.850
and what a bad
layout looks like.

01:14:29.850 --> 01:14:32.190
The same exact layout
in that example

01:14:32.190 --> 01:14:35.850
runs 20% faster using
the relative layout.

01:14:35.850 --> 01:14:38.790
So again, it looks
exactly the same,

01:14:38.790 --> 01:14:45.720
but as an optimized version
it runs almost a fifth faster.

01:14:45.720 --> 01:14:52.590
AUDIENCE: How many layers
is considered optimal?

01:14:52.590 --> 01:14:56.570
MIKE WOLFSON: So the question
is, how many layers of layout

01:14:56.570 --> 01:14:59.625
is considered optimal?

01:14:59.625 --> 01:15:01.760
And the answer is it depends.

01:15:01.760 --> 01:15:04.850
There's no hard and fast rules.

01:15:04.850 --> 01:15:06.830
Layouts can be complicated,
and sometimes they

01:15:06.830 --> 01:15:09.865
require a bunch of
different nested layouts.

01:15:09.865 --> 01:15:11.365
Sometimes that's
the only way to get

01:15:11.365 --> 01:15:15.440
it done, dealing with
weights or other things.

01:15:15.440 --> 01:15:16.640
The answer is it depends.

01:15:16.640 --> 01:15:18.790
But the real answer
to that is as few

01:15:18.790 --> 01:15:20.296
as you can get away with.

01:15:20.296 --> 01:15:24.091
AUDIENCE: Better user
experience with less levels?

01:15:24.091 --> 01:15:24.840
MIKE WOLFSON: Yes.

01:15:24.840 --> 01:15:29.320
These fewer levels of
layouts that you have,

01:15:29.320 --> 01:15:31.750
the better user experience,
the faster your UI

01:15:31.750 --> 01:15:34.874
is going to render, and the
less resources-- well, it

01:15:34.874 --> 01:15:36.290
probably takes the
same resources.

01:15:36.290 --> 01:15:39.570
But fewer layouts, more better.

01:15:43.611 --> 01:15:44.110
OK.

01:15:44.110 --> 01:15:47.890
I wanted to just touch on
some other performance tools.

01:15:47.890 --> 01:15:51.340
We're almost done here, just
to let you guys know that.

01:15:51.340 --> 01:15:53.520
Some other tools that I'm
not able to demo here,

01:15:53.520 --> 01:15:58.090
but I want you guys to be aware
of so you know that they exist.

01:15:58.090 --> 01:15:59.740
First one is OpenGL Tracer.

01:15:59.740 --> 01:16:02.400
So if you're using
OpenGL within your app,

01:16:02.400 --> 01:16:06.220
this allows you to
trace very specifically

01:16:06.220 --> 01:16:08.760
through all of your
GL calls, so that you

01:16:08.760 --> 01:16:16.380
can see exactly what's happening
throughout your code rendering.

01:16:16.380 --> 01:16:18.540
I don't do a lot
of OpenGL myself.

01:16:18.540 --> 01:16:21.790
I don't do that sort
of graphic stuff.

01:16:21.790 --> 01:16:25.045
But really, really useful
if you're doing OpenGL.

01:16:25.045 --> 01:16:26.670
Really, really useful
to be able to see

01:16:26.670 --> 01:16:28.500
exactly what it is
that you're doing.

01:16:28.500 --> 01:16:30.100
So again, all these
tools are just

01:16:30.100 --> 01:16:34.730
allowing us to get a closer look
at how our code is operating

01:16:34.730 --> 01:16:36.600
so that we really
understand and that we

01:16:36.600 --> 01:16:40.170
can optimize where
it's most effective.

01:16:40.170 --> 01:16:42.010
Pixel Perfect Viewer
allows you to look

01:16:42.010 --> 01:16:46.750
at very close
renditions of your UI

01:16:46.750 --> 01:16:52.860
so that you can isolate
shadow problems or any sort

01:16:52.860 --> 01:16:58.150
of dithering or other issues
that you might have in your UI.

01:16:58.150 --> 01:16:59.960
Network Statistics we
already talked about.

01:16:59.960 --> 01:17:03.080
That allows you very,
very close understanding

01:17:03.080 --> 01:17:06.460
of exactly what's happening
with your network calls.

01:17:06.460 --> 01:17:09.820
You can trace the size of
the calls, the duration,

01:17:09.820 --> 01:17:11.500
et cetera, et cetera.

01:17:11.500 --> 01:17:13.770
System Information gives
you a really good overview

01:17:13.770 --> 01:17:17.050
of your device.

01:17:17.050 --> 01:17:19.955
The memory it's
used, the memory it

01:17:19.955 --> 01:17:24.390
has available, space on the
device, things like that.

01:17:24.390 --> 01:17:28.310
It shows you that in
some really nice charts.

01:17:28.310 --> 01:17:35.100
So it's a really clear visual
representation of exactly

01:17:35.100 --> 01:17:37.240
and what resources are
available to your device.

01:17:37.240 --> 01:17:41.659
AUDIENCE: [INAUDIBLE]
app that runs

01:17:41.659 --> 01:17:47.551
for a long duration of time or
a background service [INAUDIBLE]

01:17:47.551 --> 01:17:50.497
battery doesn't get
drained within two hours.

01:17:50.497 --> 01:17:53.950
And if they [INAUDIBLE].

01:17:53.950 --> 01:17:55.420
MIKE WOLFSON: So
the question is,

01:17:55.420 --> 01:18:00.480
if you're dealing with an
app that might suck battery

01:18:00.480 --> 01:18:04.280
or might use a lot of power,
does the system information

01:18:04.280 --> 01:18:05.730
provide that?

01:18:05.730 --> 01:18:06.640
I don't know.

01:18:06.640 --> 01:18:09.310
I'll look at that in a second.

01:18:09.310 --> 01:18:13.695
I don't know of a good
tool to track that.

01:18:13.695 --> 01:18:14.570
AUDIENCE: [INAUDIBLE]

01:18:16.735 --> 01:18:19.110
MIKE WOLFSON: There is a
company in India that does that?

01:18:19.110 --> 01:18:19.735
AUDIENCE: Yeah.

01:18:19.735 --> 01:18:22.100
Facebook isn't going to buy it.

01:18:22.100 --> 01:18:23.591
Does anyone remember?

01:18:23.591 --> 01:18:25.576
Something [INAUDIBLE].

01:18:25.576 --> 01:18:26.076
[INAUDIBLE]

01:18:29.058 --> 01:18:30.762
MIKE WOLFSON: Yeah.

01:18:30.762 --> 01:18:32.720
So real quick we'll go
through these last ones.

01:18:32.720 --> 01:18:35.690
And then I think we're
good to close this out.

01:18:35.690 --> 01:18:40.660
So Lint is a automated
testing tool, basically.

01:18:40.660 --> 01:18:43.740
It's going to, in your
code as it's live,

01:18:43.740 --> 01:18:49.250
it will flag certain things in
your code that are either wrong

01:18:49.250 --> 01:18:51.520
or that are just bad.

01:18:51.520 --> 01:18:54.280
So for instance, like we
talked about before, if you're

01:18:54.280 --> 01:18:57.930
using a hard-coded
string within your code,

01:18:57.930 --> 01:19:00.210
Lint will go through
automatically

01:19:00.210 --> 01:19:03.210
and it'll put a little flag
next to that says, hey,

01:19:03.210 --> 01:19:06.170
you probably don't want to be
using a hard-coded string here.

01:19:06.170 --> 01:19:08.370
And then, when you
mouse over that,

01:19:08.370 --> 01:19:10.760
it will give you
remediation strategies.

01:19:10.760 --> 01:19:13.590
And in some cases, will actually
go ahead and fix those for you.

01:19:13.590 --> 01:19:18.250
So in this case, Lint
will highlight that.

01:19:18.250 --> 01:19:21.230
You will click on that
particular string.

01:19:21.230 --> 01:19:26.260
And then it will provide you
the button that says Export this

01:19:26.260 --> 01:19:28.890
String to strings.XML..

01:19:28.890 --> 01:19:30.440
So Lint is run automatically.

01:19:30.440 --> 01:19:34.270
It can also be run as part
of your build to flag things.

01:19:34.270 --> 01:19:39.700
It's much like PMD or Find
Bugs in the Java world.

01:19:39.700 --> 01:19:42.990
Basically, an
automated testing tool

01:19:42.990 --> 01:19:48.460
to highlight patterns and
not functional problems,

01:19:48.460 --> 01:19:50.465
but code problems.

01:19:50.465 --> 01:19:51.840
AUDIENCE: So is
there a tool that

01:19:51.840 --> 01:19:55.720
will tell you what the
minimal Android version is

01:19:55.720 --> 01:19:58.310
that you should
target your app to?

01:19:58.310 --> 01:20:00.060
MIKE WOLFSON: So the
question is, is there

01:20:00.060 --> 01:20:02.970
a tool that will tell you
what the minimum Android

01:20:02.970 --> 01:20:04.570
OS is to target.

01:20:04.570 --> 01:20:08.192
And the answer is no, because
that's fully dependent on you.

01:20:08.192 --> 01:20:12.280
You need to decide who
you want to support.

01:20:15.021 --> 01:20:16.770
So there's no tool
that can tell you that.

01:20:16.770 --> 01:20:20.870
Now, it obviously depends on
the APIs you need to support

01:20:20.870 --> 01:20:24.450
and your customer base.

01:20:24.450 --> 01:20:27.350
But there's no rules for that.

01:20:27.350 --> 01:20:29.085
That's completely subjective.

01:20:29.085 --> 01:20:33.350
AUDIENCE: [INAUDIBLE] you might
write code and it could say,

01:20:33.350 --> 01:20:35.725
if you want to target
an older version,

01:20:35.725 --> 01:20:37.630
you shouldn't be using--

01:20:37.630 --> 01:20:41.670
MIKE WOLFSON: It will tell
you if you have API issues.

01:20:41.670 --> 01:20:45.200
It will tell you if you're using
an API that's not supported

01:20:45.200 --> 01:20:48.060
in the version of the OS
you're targeting, actually.

01:20:48.060 --> 01:20:50.310
So that is one of the things
that it will tell you.

01:20:53.530 --> 01:20:58.380
Monkey is basically a tool
that is designed to be,

01:20:58.380 --> 01:21:00.795
if 1,000 tiny monkeys
were using your app,

01:21:00.795 --> 01:21:02.170
pressing it all
at the same time.

01:21:02.170 --> 01:21:04.740
This is basically
chaos testing, to see

01:21:04.740 --> 01:21:06.750
if a bunch of different
presses happen

01:21:06.750 --> 01:21:08.530
on your app, what would happen?

01:21:08.530 --> 01:21:11.950
If it'll crash, if
it'll cause issues.

01:21:11.950 --> 01:21:14.900
Monkey Runner, not at
all the same thing.

01:21:14.900 --> 01:21:17.820
Monkey Runner is
a scripting tool

01:21:17.820 --> 01:21:21.330
that basically uses Perl scripts
to allow you to do automated UI

01:21:21.330 --> 01:21:25.820
tests using this monkey
runner scripting tool.

01:21:25.820 --> 01:21:27.990
Really useful.

01:21:27.990 --> 01:21:29.210
Memory Allocation Tracker.

01:21:29.210 --> 01:21:31.610
Now, this is an
Eclipse tool, but it's

01:21:31.610 --> 01:21:34.720
built directly into
the ADT and allows you

01:21:34.720 --> 01:21:38.930
to-- the tools are built
directly into the ADT.

01:21:38.930 --> 01:21:43.490
You can I dump a a [? mat ?]
profile directly from DDMS.

01:21:43.490 --> 01:21:46.480
This allows you very,
very good inspection

01:21:46.480 --> 01:21:49.190
into the memory of your app.

01:21:49.190 --> 01:21:53.790
So provides all sorts
of options to determine

01:21:53.790 --> 01:21:55.720
how your heap's being allocated.

01:21:55.720 --> 01:21:58.080
And it will also provide a
bunch of different options

01:21:58.080 --> 01:22:00.320
for how to improve your memory.

01:22:00.320 --> 01:22:02.430
So that's an Eclipse
tool, but it's

01:22:02.430 --> 01:22:04.515
built directly into
the ADT and is really

01:22:04.515 --> 01:22:07.190
a valuable tool to use.

01:22:07.190 --> 01:22:08.940
The last one that I
just want to mention--

01:22:08.940 --> 01:22:12.540
and we have addressed this on a
high level a little bit later.

01:22:12.540 --> 01:22:15.330
This is a external project,
an open source project

01:22:15.330 --> 01:22:17.340
called Sensor Simulator Project.

01:22:17.340 --> 01:22:19.680
So we mentioned with
emulators, there's

01:22:19.680 --> 01:22:21.660
certain things that
you can't emulate.

01:22:21.660 --> 01:22:27.840
Sensors being for one, motion
sensors or touch, other things.

01:22:27.840 --> 01:22:29.510
This sensor simulator
project actually

01:22:29.510 --> 01:22:35.520
allows you to both
record sensor operations

01:22:35.520 --> 01:22:38.660
and play them back in
an automated fashion.

01:22:38.660 --> 01:22:45.321
Or, if you just want to simulate
sensor operations, meaning

01:22:45.321 --> 01:22:47.090
again, motion
sensors or whatever,

01:22:47.090 --> 01:22:51.480
it'll allow you to simulate
those on the emulator.

01:22:51.480 --> 01:22:57.370
So if you're needing
to write functionality

01:22:57.370 --> 01:23:00.330
that the emulator can't
support using sensors,

01:23:00.330 --> 01:23:04.480
that's a really great project
and a really great way

01:23:04.480 --> 01:23:07.470
to make that happen.

01:23:07.470 --> 01:23:08.120
OK.

01:23:08.120 --> 01:23:09.850
I think we're done.

01:23:09.850 --> 01:23:13.510
I did want to make sure that
I put some reference points up

01:23:13.510 --> 01:23:16.080
on the screen for
where you can go

01:23:16.080 --> 01:23:18.730
to learn more about the tools.

01:23:18.730 --> 01:23:20.870
First one we
already put up there

01:23:20.870 --> 01:23:25.760
is the Android Developer
Tools official project site.

01:23:25.760 --> 01:23:27.570
Tons of useful
information there.

01:23:27.570 --> 01:23:30.080
Lots of help articles.

01:23:30.080 --> 01:23:35.460
And more importantly, they
also have their project plan.

01:23:35.460 --> 01:23:37.772
What they plan on doing,
what they plan on supporting.

01:23:37.772 --> 01:23:39.230
You can put help
requests in there.

01:23:39.230 --> 01:23:41.390
You can put bug
requests in there.

01:23:41.390 --> 01:23:43.620
They're very open about
what they're working on

01:23:43.620 --> 01:23:46.130
and what their plans
are, and it's all

01:23:46.130 --> 01:23:48.370
contained on that website.

01:23:48.370 --> 01:23:50.360
Really, really useful.

01:23:50.360 --> 01:23:51.200
Stack Overflow.

01:23:51.200 --> 01:23:53.200
I hope most of the
people in this room

01:23:53.200 --> 01:23:54.540
already know about it.

01:23:54.540 --> 01:23:56.254
If you have a question--

01:23:56.254 --> 01:23:57.496
AUDIENCE: [INAUDIBLE]

01:23:57.496 --> 01:23:58.710
MIKE WOLFSON: Yeah.

01:23:58.710 --> 01:24:00.810
Someone has already asked
it on Stack Overflow,

01:24:00.810 --> 01:24:03.720
and hopefully has answered it.

01:24:03.720 --> 01:24:06.480
Really useful.

01:24:06.480 --> 01:24:10.040
There is a Google group
specifically for Android

01:24:10.040 --> 01:24:12.250
Developer Tools developers.

01:24:12.250 --> 01:24:13.960
And there's the link for that.

01:24:13.960 --> 01:24:18.411
Right now there's a lot of noise
about Android Studio and Gradle

01:24:18.411 --> 01:24:18.910
in there.

01:24:18.910 --> 01:24:22.470
So if you're working on
either of those two tools,

01:24:22.470 --> 01:24:27.630
that seems to be consuming most
of the messages in that group.

01:24:27.630 --> 01:24:31.330
But the Tools
guys, the guys that

01:24:31.330 --> 01:24:33.290
work for Google on
the Tools project,

01:24:33.290 --> 01:24:37.000
they're actively in that
group answering questions

01:24:37.000 --> 01:24:38.200
and helping people.

01:24:38.200 --> 01:24:43.010
So it's a great resource
for researching things

01:24:43.010 --> 01:24:45.970
if you don't have the answer.

01:24:45.970 --> 01:24:49.040
Last really great resource is
the Android Developer Tools

01:24:49.040 --> 01:24:52.166
Essentials Book, available now
from O'Reilly on Amazon.com.

01:24:55.477 --> 01:24:56.220
OK.

01:24:56.220 --> 01:24:56.790
That's it.

01:24:56.790 --> 01:24:59.977
I think we already
answered all the questions.

01:24:59.977 --> 01:25:02.060
I just wanted to make sure
that people have access

01:25:02.060 --> 01:25:04.900
to the GitHub repo slide share.

01:25:04.900 --> 01:25:10.675
And then if you'd like to follow
me on Twitter or circle me

01:25:10.675 --> 01:25:16.080
on Google+, I would
love to connect.

01:25:16.080 --> 01:25:17.750
So thanks very much.

01:25:17.750 --> 01:25:29.612
[APPLAUSE]

