WEBVTT
Kind: captions
Language: en

00:00:01.736 --> 00:00:03.910
MALE SPEAKER: Shanghai
GDG is a very

00:00:03.910 --> 00:00:05.700
interesting developer community.

00:00:05.700 --> 00:00:06.820
FEMALE SPEAKER: I'm
glad somebody

00:00:06.820 --> 00:00:07.840
has asked this question.

00:00:07.840 --> 00:00:09.526
MALE SPEAKER: This is where
the magic happens.

00:00:09.526 --> 00:00:10.550
FEMALE SPEAKER: This is
primarily a question and

00:00:10.550 --> 00:00:12.518
answer show, so if any
of you out there

00:00:12.518 --> 00:00:13.768
would like to ask questions.

00:00:19.168 --> 00:00:20.830
JAREK WILKIEWICZ: Good
morning, everyone.

00:00:20.830 --> 00:00:25.960
This is Jarek Wilkiewicz,
Google Developer Live.

00:00:25.960 --> 00:00:28.430
We have in the studio
Jeremy Walker.

00:00:28.430 --> 00:00:29.460
JEREMY WALKER: Yes, hello.

00:00:29.460 --> 00:00:30.400
JAREK WILKIEWICZ: How are
you doing, Jeremy?

00:00:30.400 --> 00:00:31.286
JEREMY WALKER: Pretty good.

00:00:31.286 --> 00:00:31.641
How are you doing?

00:00:31.641 --> 00:00:32.880
JAREK WILKIEWICZ:
I'm doing good.

00:00:32.880 --> 00:00:34.100
Trying to wake up
this morning.

00:00:34.100 --> 00:00:36.570
It's still a little early.

00:00:36.570 --> 00:00:39.670
On the Hangout, we have Jeffrey
Posnick joining us

00:00:39.670 --> 00:00:41.330
live from New York City.

00:00:41.330 --> 00:00:43.178
How's life in New York, Jeff?

00:00:43.178 --> 00:00:45.010
JEFFREY POSNICK: [INAUDIBLE]

00:00:45.010 --> 00:00:49.150
three hours late here, so I'm
fully woken up and post-lunch

00:00:49.150 --> 00:00:50.345
and ready to go.

00:00:50.345 --> 00:00:51.330
JAREK WILKIEWICZ: All
right, great.

00:00:51.330 --> 00:00:56.440
And today JJ Behrens, our
fearless host, decided to take

00:00:56.440 --> 00:00:58.630
a step back and enjoy the
view from the couch.

00:00:58.630 --> 00:01:02.780
So you guys can't see him, but
he's in the studio in person

00:01:02.780 --> 00:01:06.110
with us laughing right now.

00:01:06.110 --> 00:01:10.170
OK, so we have an exciting
program for you today.

00:01:10.170 --> 00:01:14.100
We'll be talking about a
not so secret but not

00:01:14.100 --> 00:01:16.320
released set of APIs.

00:01:16.320 --> 00:01:19.830
We have discussed them briefly
at Google I/O previously.

00:01:19.830 --> 00:01:24.190
So if you were at Google I/O,
you might have participated in

00:01:24.190 --> 00:01:28.740
a code lab that Jeff and a
couple of API developers have

00:01:28.740 --> 00:01:30.860
run over there.

00:01:30.860 --> 00:01:35.140
We'll be talking about YouTube
API v3 as well as our new

00:01:35.140 --> 00:01:37.110
Analytics API.

00:01:37.110 --> 00:01:41.845
As we mentioned in previous
episodes of this show, these

00:01:41.845 --> 00:01:44.130
are right now in developer
preview.

00:01:44.130 --> 00:01:48.290
So if you would like to use
them, you have to apply using

00:01:48.290 --> 00:01:49.470
the developer console.

00:01:49.470 --> 00:01:53.590
And some of you might actually
get to use them.

00:01:53.590 --> 00:01:56.610
We are still a little selective
about the use cases

00:01:56.610 --> 00:02:00.170
that we want to test out before
we launch the APIs, but

00:02:00.170 --> 00:02:02.900
hopefully, it's not going
to be that much longer.

00:02:02.900 --> 00:02:07.660
I know Jeremy is eagerly
awaiting API v3 because I

00:02:07.660 --> 00:02:09.460
think he thinks v2
is kind of old.

00:02:09.460 --> 00:02:10.130
Is it?

00:02:10.130 --> 00:02:10.730
JEREMY WALKER: Yeah.

00:02:10.730 --> 00:02:13.710
Yeah, I've started playing
around with v3, and I do like

00:02:13.710 --> 00:02:14.370
it a bit more.

00:02:14.370 --> 00:02:15.580
JAREK WILKIEWICZ: Cool.

00:02:15.580 --> 00:02:18.330
And then I think what we
should do now is just

00:02:18.330 --> 00:02:21.670
transition over to Jeff, who
is going to walk us through

00:02:21.670 --> 00:02:26.430
the intricacies of v3, using
client APIs, and getting the

00:02:26.430 --> 00:02:28.200
most out of the Analytics API.

00:02:28.200 --> 00:02:29.290
So over to you, Jeff.

00:02:29.290 --> 00:02:30.560
JEFFREY POSNICK: Absolutely.

00:02:30.560 --> 00:02:32.120
Thanks, guys.

00:02:32.120 --> 00:02:34.010
Yeah, so it'll be interesting to
see how this goes, because

00:02:34.010 --> 00:02:36.890
I think we could probably spend
a couple hours talking

00:02:36.890 --> 00:02:38.830
about these new APIs.

00:02:38.830 --> 00:02:40.700
And I don't know if anybody
really wants to hear me talk

00:02:40.700 --> 00:02:41.380
for a few hours.

00:02:41.380 --> 00:02:44.630
So I'm going to try to touch on
some of the highlights and

00:02:44.630 --> 00:02:47.360
start by talking a bit about
the background of these new

00:02:47.360 --> 00:02:50.470
APIs and what makes them so
different than what we've

00:02:50.470 --> 00:02:52.590
offered before.

00:02:52.590 --> 00:02:56.120
So first of all, in the case
of YouTube Analytics, we

00:02:56.120 --> 00:02:59.150
haven't really offered the
same sort of API before.

00:02:59.150 --> 00:03:04.250
We've added YouTube Insights
API, which did provide ways of

00:03:04.250 --> 00:03:08.230
getting data related to your
YouTube account performance,

00:03:08.230 --> 00:03:14.550
but that was a very limited API
in that we only exported a

00:03:14.550 --> 00:03:17.980
zip file that contains a bunch
of comma-separated values

00:03:17.980 --> 00:03:19.190
documents within it.

00:03:19.190 --> 00:03:21.830
It's very hard to parse that
information and to use it in a

00:03:21.830 --> 00:03:22.460
meaningful way.

00:03:22.460 --> 00:03:25.560
So what we're going to be
rolling out when we release

00:03:25.560 --> 00:03:30.830
the YouTube Analytics API is a
real full-featured, RESTful

00:03:30.830 --> 00:03:34.900
JSON API for retrieving all
sorts of different types of

00:03:34.900 --> 00:03:37.570
YouTube reports.

00:03:37.570 --> 00:03:40.890
It's going to be similar in some
senses to the existing

00:03:40.890 --> 00:03:43.340
Google Analytics API.

00:03:43.340 --> 00:03:45.280
Some of the report definitions
look very similar.

00:03:45.280 --> 00:03:49.190
So if you've used that before,
or if you've written code

00:03:49.190 --> 00:03:52.780
that's gone against it, some of
that will also apply to the

00:03:52.780 --> 00:03:55.320
Analytics API.

00:03:55.320 --> 00:03:59.610
On the other hand, we have
the v3 of the Data API.

00:03:59.610 --> 00:04:03.405
And as the name implies, we've
also had a v1 and a v2, so

00:04:03.405 --> 00:04:07.270
this isn't something brand new
in terms of the type of things

00:04:07.270 --> 00:04:07.900
that if offers.

00:04:07.900 --> 00:04:11.660
But we are going to be very
happy to roll out some new

00:04:11.660 --> 00:04:15.770
features that are only going
to be part of the V3 API.

00:04:15.770 --> 00:04:19.279
But the real way to think
about it is that this is

00:04:19.279 --> 00:04:23.840
rewriting APIs on a more
solid foundation.

00:04:23.840 --> 00:04:27.550
These APIs are all going to be
built on top of Google's new

00:04:27.550 --> 00:04:29.540
common API infrastructure.

00:04:29.540 --> 00:04:33.190
You know, our previous
infrastructure is referred to

00:04:33.190 --> 00:04:35.600
pretty much as Google
Data, or G Data.

00:04:35.600 --> 00:04:40.390
And those APIs that were written
against that were all

00:04:40.390 --> 00:04:45.050
RESTful, but they used Atom
XML as their native

00:04:45.050 --> 00:04:46.890
interchange format.

00:04:46.890 --> 00:04:48.830
And there were a certain set
of client libraries that

00:04:48.830 --> 00:04:51.880
weren't particularly well
maintained that went against

00:04:51.880 --> 00:04:54.070
those older APIs.

00:04:54.070 --> 00:04:56.900
But because we're building on
top of this new beautiful

00:04:56.900 --> 00:04:59.490
infrastructure, we're going to
be able to take advantage of

00:04:59.490 --> 00:05:01.010
everything else that--

00:05:01.010 --> 00:05:03.460
all the effort that Google is
putting into their APIs across

00:05:03.460 --> 00:05:04.740
all platforms.

00:05:04.740 --> 00:05:09.340
So if you've used Google+'s
APIs before, if you used

00:05:09.340 --> 00:05:12.055
things like Google Latitudes, if
you've used the new Google

00:05:12.055 --> 00:05:15.290
Drive APIs, then you've already
built on top of this

00:05:15.290 --> 00:05:19.480
infrastructure, and you are
already will be familiar with

00:05:19.480 --> 00:05:21.100
a lot of things when you
get started with

00:05:21.100 --> 00:05:23.800
the new YouTube APIs.

00:05:23.800 --> 00:05:28.470
And as I mentioned before, these
are all RESTful APIs.

00:05:28.470 --> 00:05:33.000
So if you are familiar with
making URL requests and

00:05:33.000 --> 00:05:36.580
getting back data, if you get
that, this all should be very

00:05:36.580 --> 00:05:41.000
similar to what you've done
in the past, except JSON--

00:05:41.000 --> 00:05:42.490
JavaScript Object Notation--

00:05:42.490 --> 00:05:43.680
is the native format.

00:05:43.680 --> 00:05:47.880
So you don't have to worry
about parsing XML.

00:05:47.880 --> 00:05:49.610
As far as I know, we're not even
going to be offering any

00:05:49.610 --> 00:05:52.710
sort of XML-based options.

00:05:52.710 --> 00:05:55.740
It really is JSON all the way.

00:05:55.740 --> 00:05:57.890
And I think a lot of
people are going to

00:05:57.890 --> 00:05:58.780
be happy about that.

00:05:58.780 --> 00:06:03.430
We have a lot of folks who've
previously used Version 2 of

00:06:03.430 --> 00:06:06.470
the Data API and had to manually
specify that they

00:06:06.470 --> 00:06:10.220
wanted to get JSON back, but
it wasn't the default.

00:06:10.220 --> 00:06:14.250
And I think that this was the
right choice moving forward in

00:06:14.250 --> 00:06:16.950
terms of making it easier
for folks to

00:06:16.950 --> 00:06:19.320
interact with the APIs.

00:06:19.320 --> 00:06:22.740
So I'm going to start this
screen-sharing session now and

00:06:22.740 --> 00:06:25.740
start showing off a few things
related to new API

00:06:25.740 --> 00:06:26.710
infrastructure.

00:06:26.710 --> 00:06:30.610
And hopefully, this will be
visible for everybody out

00:06:30.610 --> 00:06:32.760
there who's watching
after the fact.

00:06:32.760 --> 00:06:37.010
But if it's not, we're going
to share the links to all

00:06:37.010 --> 00:06:39.030
these things I'm covering--

00:06:39.030 --> 00:06:41.830
well, most of the public
things I'm covering--

00:06:41.830 --> 00:06:42.570
after the fact.

00:06:42.570 --> 00:06:45.190
And we'll probably post that on
our YouTube for Developers

00:06:45.190 --> 00:06:47.790
Google+ page.

00:06:47.790 --> 00:06:51.630
So the first thing I wanted to
point out is we have this

00:06:51.630 --> 00:06:54.350
really nice web page--

00:06:54.350 --> 00:06:55.430
developers.google.com--

00:06:55.430 --> 00:06:59.700
and this is the home for all
our APIs now, including

00:06:59.700 --> 00:07:00.515
YouTube APIs.

00:07:00.515 --> 00:07:03.260
And one of the things on there
is a list of all the client

00:07:03.260 --> 00:07:06.610
libraries that we support
with the new Google APIs

00:07:06.610 --> 00:07:07.300
infrastructure.

00:07:07.300 --> 00:07:11.190
So you'll see it's a
pretty nice list.

00:07:11.190 --> 00:07:16.650
There are nine officially
supported client libraries for

00:07:16.650 --> 00:07:18.180
various languages.

00:07:18.180 --> 00:07:20.270
And I was actually
poking around.

00:07:20.270 --> 00:07:23.850
I saw that somebody is doing I
guess an unofficial version of

00:07:23.850 --> 00:07:28.140
these client libraries for
PEARL, which maybe isn't as

00:07:28.140 --> 00:07:30.130
relevant today as it
was 10 years ago.

00:07:30.130 --> 00:07:32.610
But it's still kind of cool that
there are some folks--

00:07:32.610 --> 00:07:36.080
even if it's not an official
client library, there are some

00:07:36.080 --> 00:07:39.670
folks who are taking it upon
themselves to try to implement

00:07:39.670 --> 00:07:42.350
something that works
against our APIs.

00:07:42.350 --> 00:07:46.575
But many of the major languages
that everybody out

00:07:46.575 --> 00:07:50.290
there is probably programming
against are covered here.

00:07:50.290 --> 00:07:54.970
I know that folks who are, for
instance, Python programmers--

00:07:54.970 --> 00:07:58.230
this just came up a little bit
earlier today in a Google

00:07:58.230 --> 00:08:01.300
group, people saying, hey, why
isn't there Python client

00:08:01.300 --> 00:08:05.020
library support for Version
2 of the API?

00:08:05.020 --> 00:08:08.610
Python folks have been kind of
left out in the dust for a

00:08:08.610 --> 00:08:12.312
while, unfortunately, and I'm
happy to say that we're going

00:08:12.312 --> 00:08:16.175
to have full-featured rich
support for Python developers

00:08:16.175 --> 00:08:20.720
in Version 3 of the API.

00:08:20.720 --> 00:08:22.480
One of the things that's
actually nice about the way

00:08:22.480 --> 00:08:27.440
the client libraries are set up,
not just for the YouTube

00:08:27.440 --> 00:08:29.790
API, but for anything built
on top of the Google APIs

00:08:29.790 --> 00:08:34.380
infrastructure, is that many of
them dynamically generates

00:08:34.380 --> 00:08:39.299
the classes that are necessary
to interact with the relevant

00:08:39.299 --> 00:08:45.190
APIs at run time rather than
having to pre-compile the

00:08:45.190 --> 00:08:47.890
classes ahead of time, and you
have to make sure that your

00:08:47.890 --> 00:08:50.480
library is always up to date and
that we didn't release new

00:08:50.480 --> 00:08:55.320
definitions of what the API will
look like two weeks ago,

00:08:55.320 --> 00:08:58.580
and you just never updated your
local copy of the client

00:08:58.580 --> 00:09:00.640
library to match that.

00:09:00.640 --> 00:09:03.170
The ones that I know for sure
that are doing this at run

00:09:03.170 --> 00:09:06.740
time are JavaScript,
Python, and Ruby.

00:09:06.740 --> 00:09:11.560
And the way that works is that
they will contact our servers.

00:09:11.560 --> 00:09:14.840
We have this central definition
document for--

00:09:14.840 --> 00:09:16.000
I guess we're calling
it a discovery

00:09:16.000 --> 00:09:17.570
document for the API.

00:09:17.570 --> 00:09:20.490
That just details all the
methods and data types that

00:09:20.490 --> 00:09:22.640
the API supports.

00:09:22.640 --> 00:09:25.410
So when you run your code, the
first thing it does is it'll

00:09:25.410 --> 00:09:26.550
download that document.

00:09:26.550 --> 00:09:27.880
It'll build up all the client

00:09:27.880 --> 00:09:29.810
descriptions that are necessary.

00:09:29.810 --> 00:09:33.195
And you never have to worry
about your code being out of

00:09:33.195 --> 00:09:36.820
date or not matching the
API definition again.

00:09:36.820 --> 00:09:40.530
So that's going to be a real
benefit for folks who have

00:09:40.530 --> 00:09:43.400
struggled in the past with
client libraries that have

00:09:43.400 --> 00:09:45.230
been out of date.

00:09:45.230 --> 00:09:47.600
And like I said, that's
not the case for

00:09:47.600 --> 00:09:48.470
every single language.

00:09:48.470 --> 00:09:49.980
I think for Java, for
instance, we need to

00:09:49.980 --> 00:09:51.430
pre-generate some of
those classes.

00:09:51.430 --> 00:09:54.840
But I think you'll see that
we're a lot better about

00:09:54.840 --> 00:10:00.390
getting fresh copies of those
class definitions pushed out

00:10:00.390 --> 00:10:01.660
when v3 is released.

00:10:05.080 --> 00:10:07.150
One other thing to note about
this new client library,

00:10:07.150 --> 00:10:11.190
especially for the Java version,
is that is fully

00:10:11.190 --> 00:10:13.640
compatible with Android.

00:10:13.640 --> 00:10:18.390
And this has been a bit of a
pain point for developers who

00:10:18.390 --> 00:10:21.515
have in the past tried to use
Version 2 of the Data API on

00:10:21.515 --> 00:10:23.920
the Android platform.

00:10:23.920 --> 00:10:27.340
The existing G Data client
library wasn't really a good

00:10:27.340 --> 00:10:28.770
fit for an Android
environment.

00:10:28.770 --> 00:10:31.740
I think there might have been
some folks who've found ways

00:10:31.740 --> 00:10:33.630
to get the G Data client
library to work.

00:10:33.630 --> 00:10:39.190
But really, you have to end up
just writing your own, making

00:10:39.190 --> 00:10:43.890
your own HTTP calls and parsing
adjacent data yourself

00:10:43.890 --> 00:10:48.640
if you wanted to use a Version
2 of the API on Android.

00:10:48.640 --> 00:10:53.750
So once Version 3 is available
and once the Analytics API--

00:10:53.750 --> 00:10:57.740
everything I say here also
applies to Analytics API.

00:10:57.740 --> 00:11:00.830
Once those are available, you'll
be able to use the

00:11:00.830 --> 00:11:03.610
official client library for
Java, and there's going to be

00:11:03.610 --> 00:11:06.780
plenty of examples out there
of how you could do that on

00:11:06.780 --> 00:11:08.030
the Android environments.

00:11:10.670 --> 00:11:13.770
So that's a little bit about
the infrastructure.

00:11:13.770 --> 00:11:17.780
And one of the things that I
feel bad about is that folks

00:11:17.780 --> 00:11:25.010
can't really play around with
the APIs themselves quite yet.

00:11:25.010 --> 00:11:28.350
So as Jareck mentioned at the
top, we're still in kind of a

00:11:28.350 --> 00:11:35.370
closed beta, or in some cases
alpha release of these APIs.

00:11:35.370 --> 00:11:39.940
So I'm going to show you the
steps that you will be able to

00:11:39.940 --> 00:11:42.100
go through soon--

00:11:42.100 --> 00:11:45.930
for some definition of soon--
to get started building

00:11:45.930 --> 00:11:46.990
against the APIs.

00:11:46.990 --> 00:11:49.853
And file this video away.

00:11:49.853 --> 00:11:52.730
You can go back and
look at it later.

00:11:52.730 --> 00:11:54.930
There's actually some other good
video resources out there

00:11:54.930 --> 00:12:00.250
that explain these steps from
the context of other APIs.

00:12:00.250 --> 00:12:02.550
Not necessarily YouTube API, but
a lot of these steps are

00:12:02.550 --> 00:12:05.730
common regardless of what
API you're using.

00:12:05.730 --> 00:12:09.830
So I'll just walk you through
that a little bit here.

00:12:09.830 --> 00:12:13.580
So what I'm at right now is what
we're calling our Google

00:12:13.580 --> 00:12:15.020
APIs Console.

00:12:15.020 --> 00:12:17.482
You can get through
it by going to

00:12:17.482 --> 00:12:22.140
code.google.com/apis/console.

00:12:22.140 --> 00:12:25.630
And I have an existing project
over here, and I'm going to

00:12:25.630 --> 00:12:27.760
walk you through the steps
of creating a new one.

00:12:27.760 --> 00:12:30.120
So whenever you're building
against a new Google APIs

00:12:30.120 --> 00:12:34.930
platform, you need to first
to register a project.

00:12:34.930 --> 00:12:40.280
And this concept is different
for folks who might be--

00:12:40.280 --> 00:12:42.290
shoot, try a new one.

00:12:42.290 --> 00:12:44.060
It's different for folks who
might be used to just, for

00:12:44.060 --> 00:12:46.340
instance, registering
a developer key.

00:12:46.340 --> 00:12:49.870
If you are a Version 2
developer, you probably are

00:12:49.870 --> 00:12:51.740
familiar with the process of
registering YouTube API

00:12:51.740 --> 00:12:53.420
developer keys.

00:12:53.420 --> 00:12:56.820
This API console replaces
the need to do that.

00:12:56.820 --> 00:13:00.310
And it's nice because it applies
to all Google APIs, as

00:13:00.310 --> 00:13:04.160
you're not just registering a
YouTube API developer key.

00:13:04.160 --> 00:13:07.040
You're registering one project
identity that's common

00:13:07.040 --> 00:13:09.710
throughout all the APIs
you're using.

00:13:09.710 --> 00:13:13.830
So if you're using the YouTube
API, and the YouTube Analytics

00:13:13.830 --> 00:13:17.576
API, and maybe the Google
Analytics API, and maybe the

00:13:17.576 --> 00:13:21.100
Google Drive API all within the
same project, you have one

00:13:21.100 --> 00:13:25.320
central place to manage
all the things

00:13:25.320 --> 00:13:26.930
specific to that project.

00:13:26.930 --> 00:13:30.580
And that's the API Console.

00:13:30.580 --> 00:13:35.260
Let's say GGL Test Project.

00:13:35.260 --> 00:13:35.980
Just create that.

00:13:35.980 --> 00:13:37.870
So the first step is creating
a new project if you don't

00:13:37.870 --> 00:13:39.640
already have one.

00:13:39.640 --> 00:13:44.000
And you're then taken to this
list of different APIs that

00:13:44.000 --> 00:13:45.150
you could enable.

00:13:45.150 --> 00:13:49.800
So before you could use any API,
you just have to click on

00:13:49.800 --> 00:13:50.870
Enable over here.

00:13:50.870 --> 00:13:55.630
And we're over here going to
see just a Request Access.

00:13:55.630 --> 00:14:00.730
That's the link that folks are
going to see if they are not

00:14:00.730 --> 00:14:01.555
yet permissioned.

00:14:01.555 --> 00:14:03.880
And I'm afraid most folks are
going to be in that state

00:14:03.880 --> 00:14:07.950
right now because I'm the one
who controls the permission

00:14:07.950 --> 00:14:09.320
things to some extent.

00:14:09.320 --> 00:14:12.890
I was able to turn on YouTube
Analytics API and YouTube Data

00:14:12.890 --> 00:14:14.495
API for my specific project.

00:14:14.495 --> 00:14:18.090
So sorry about that, but again,
folks are not always

00:14:18.090 --> 00:14:20.120
going to be in that boat.

00:14:20.120 --> 00:14:25.360
But it is something that we
are turning on for select

00:14:25.360 --> 00:14:27.750
users right now.

00:14:27.750 --> 00:14:29.990
Once it's fully available,
you'll be able to just flip

00:14:29.990 --> 00:14:33.270
the switch and enable that
for your project.

00:14:33.270 --> 00:14:37.320
And once you have the project
set up, you can

00:14:37.320 --> 00:14:38.980
do a number of things.

00:14:38.980 --> 00:14:42.240
The relevant stuff that you want
to think about is under

00:14:42.240 --> 00:14:44.410
the API Access tab.

00:14:44.410 --> 00:14:48.880
And this is where you get some
of the identifiers that you're

00:14:48.880 --> 00:14:53.570
going to need to use if you
want to talk to either the

00:14:53.570 --> 00:14:56.215
YouTube API or really any of the
APIs that you've enabled

00:14:56.215 --> 00:14:58.430
for your project.

00:14:58.430 --> 00:15:03.695
So we have a concept of
both authenticated and

00:15:03.695 --> 00:15:10.540
unauthenticated requests against
the YouTube API.

00:15:10.540 --> 00:15:14.730
Unauthenticated requests are
just requests made without the

00:15:14.730 --> 00:15:16.790
credentials of any given user.

00:15:16.790 --> 00:15:19.485
There are many types of requests
that you can make

00:15:19.485 --> 00:15:22.200
unauthenticated, such as
search requests-- for

00:15:22.200 --> 00:15:26.743
instance, searching for videos
or getting the contents of a

00:15:26.743 --> 00:15:29.200
given playlist things
like that.

00:15:29.200 --> 00:15:33.960
For those types of calls, you
can look in the Simple API

00:15:33.960 --> 00:15:38.405
Access section on this web page,
and you can get your API

00:15:38.405 --> 00:15:40.780
key directly from there.

00:15:40.780 --> 00:15:44.410
So that is just a piece
of identification.

00:15:44.410 --> 00:15:47.790
That doesn't actually
authenticate you or have any

00:15:47.790 --> 00:15:51.640
authorization, but it just
associates your API calls with

00:15:51.640 --> 00:15:55.800
this given API Console
project.

00:15:55.800 --> 00:15:57.800
So it's slightly different for
folks who are used to being

00:15:57.800 --> 00:16:01.030
able to make completely
anonymous calls against v2,

00:16:01.030 --> 00:16:04.210
where you didn't even have to
specify a developer key.

00:16:04.210 --> 00:16:08.820
But it's not really that much
of a burden to take that

00:16:08.820 --> 00:16:12.780
particular key and use that
in your application.

00:16:12.780 --> 00:16:16.920
So that's where you get the
unauthenticated API key from.

00:16:16.920 --> 00:16:21.060
But all the interesting stuff
nowadays happens with OAuth 2

00:16:21.060 --> 00:16:22.530
and authenticator requests.

00:16:22.530 --> 00:16:28.110
So this is also where you set up
your OAuth 2 app for this.

00:16:28.110 --> 00:16:31.940
For folks who are not familiar
with OAuth 2 and maybe not

00:16:31.940 --> 00:16:36.856
familiar with the rather
interesting legacy that we

00:16:36.856 --> 00:16:43.040
have of various older and
currently deprecated forms of

00:16:43.040 --> 00:16:47.820
authentication authorization
that the YouTube API supported

00:16:47.820 --> 00:16:51.610
at one time, OAuth 2 is what
we're recommending everybody

00:16:51.610 --> 00:16:52.740
use nowadays.

00:16:52.740 --> 00:16:53.660
Even with our older APIs.

00:16:53.660 --> 00:16:59.080
But it's the only form of
authorization that's supported

00:16:59.080 --> 00:17:03.470
with both the v3 API,
Data API, and the

00:17:03.470 --> 00:17:05.020
YouTube analytics API.

00:17:05.020 --> 00:17:06.810
Everybody needs to
use OAuth 2.

00:17:06.810 --> 00:17:09.099
There's no more client login.

00:17:09.099 --> 00:17:10.960
There's no more Auth sub.

00:17:10.960 --> 00:17:14.589
And even OAuth 1 isn't something
that we support.

00:17:14.589 --> 00:17:18.280
So I will post some links to
some great getting started

00:17:18.280 --> 00:17:22.560
resources with regards to OAuth
2 on our YouTube for

00:17:22.560 --> 00:17:27.079
Developers G+ page because it's
a rather large topic.

00:17:27.079 --> 00:17:30.210
I've given talks about it in
the past where I've spent

00:17:30.210 --> 00:17:32.820
about 40 minutes going
over everything.

00:17:32.820 --> 00:17:35.090
There's even a book about now
written by one of our

00:17:35.090 --> 00:17:37.210
colleagues at Google Developer
Relations.

00:17:37.210 --> 00:17:40.580
So there's lots of ways to get
started about that, but the

00:17:40.580 --> 00:17:44.910
important thing is that when
you're setting up your OAuth 2

00:17:44.910 --> 00:17:48.330
access, you need to generate
things like a client ID, and

00:17:48.330 --> 00:17:50.950
in some cases, a
client secret.

00:17:50.950 --> 00:17:54.130
You can get that information
from here.

00:17:54.130 --> 00:17:57.240
And I'm going to hand over
regenerating all these key

00:17:57.240 --> 00:18:00.730
values as soon as we're done
since they're not particularly

00:18:00.730 --> 00:18:02.900
secret anymore now that they're
being broadcast out

00:18:02.900 --> 00:18:04.090
there, which is actually nice.

00:18:04.090 --> 00:18:08.050
So you can go and reset these
things rather than having to

00:18:08.050 --> 00:18:10.950
be stuck with your information
being public.

00:18:10.950 --> 00:18:14.020
So I'll show you a little bit
later where these values end

00:18:14.020 --> 00:18:16.910
up getting plugged in when
you're writing real code that

00:18:16.910 --> 00:18:18.800
talks to the new APIs.

00:18:18.800 --> 00:18:22.500
But just keep in the
back of your head--

00:18:22.500 --> 00:18:26.250
the API Access tab and the API
Console is where you go to

00:18:26.250 --> 00:18:29.170
generate that information.

00:18:29.170 --> 00:18:31.740
I can just show you right now
what that interface looks like

00:18:31.740 --> 00:18:34.390
where you generate
a new client ID.

00:18:34.390 --> 00:18:37.560
You choose whether your
application is a web

00:18:37.560 --> 00:18:41.120
application, an installed
application, or a service

00:18:41.120 --> 00:18:43.380
account, which is actually a
fairly new concept that we

00:18:43.380 --> 00:18:45.700
just recently rolled out.

00:18:45.700 --> 00:18:47.530
For most YouTube API developers,
I think it's going

00:18:47.530 --> 00:18:50.240
to be either a web application,
which is pretty

00:18:50.240 --> 00:18:55.630
much anything that's run in a
web browser, really, or an

00:18:55.630 --> 00:18:58.540
installed application, which
could be things that are

00:18:58.540 --> 00:19:02.170
either command line scripts,
or if you're writing code

00:19:02.170 --> 00:19:05.710
that's being run on a specific
type of console or device that

00:19:05.710 --> 00:19:09.160
doesn't have a web browser,
that would be another case

00:19:09.160 --> 00:19:10.730
where you would use
the installed

00:19:10.730 --> 00:19:13.270
application for that.

00:19:13.270 --> 00:19:17.040
So that's just how
you create that.

00:19:17.040 --> 00:19:20.160
So I showed you how you
can create a project.

00:19:20.160 --> 00:19:22.580
It's a little bit of a tease
because you can't actually use

00:19:22.580 --> 00:19:24.820
those APIs yet in your
own project.

00:19:24.820 --> 00:19:29.370
But where we can play around
with those APIs is on this

00:19:29.370 --> 00:19:32.600
web-based interface to
old Google APIs.

00:19:32.600 --> 00:19:35.040
So we call it the
APIs Explorer.

00:19:35.040 --> 00:19:36.435
And you get there by going
to developers.googl

00:19:36.435 --> 00:19:41.960
e.com/apis-explorer.

00:19:41.960 --> 00:19:45.860
And I think that's all you
need to go to, yeah.

00:19:45.860 --> 00:19:52.000
And you'll get to see a full
list of APIs that we have.

00:19:52.000 --> 00:19:56.020
And for our purposes, we could
play around with either the

00:19:56.020 --> 00:19:58.170
YouTube Analytics API
or the YouTube API

00:19:58.170 --> 00:20:00.260
directly in a browser.

00:20:00.260 --> 00:20:03.830
So again, this won't let you
write your own code that will

00:20:03.830 --> 00:20:05.450
interact with the APIs.

00:20:05.450 --> 00:20:09.795
But it will let you make sample
calls against the APIs

00:20:09.795 --> 00:20:12.910
and get the results back
in a web browser.

00:20:12.910 --> 00:20:14.610
And you can do this yourself.

00:20:14.610 --> 00:20:17.270
You don't have to be
permissioned ahead of time.

00:20:17.270 --> 00:20:19.330
One of the nice things is that
it will also take care of

00:20:19.330 --> 00:20:21.550
doing OAuth 2 for us.

00:20:21.550 --> 00:20:23.893
So flipping the switch
over here--

00:20:23.893 --> 00:20:25.906
authorize request
using OAuth 2.

00:20:25.906 --> 00:20:29.590
I'm going to just click
that, and I'm

00:20:29.590 --> 00:20:32.470
going to click Authorize.

00:20:32.470 --> 00:20:37.370
And now I've gone through the
OAuth 2 flow, basically.

00:20:37.370 --> 00:20:39.890
Because I was already logged
in to my Google account, I

00:20:39.890 --> 00:20:44.310
didn't have to type in my
username and password again.

00:20:44.310 --> 00:20:47.060
So it was just the authorization
stuff.

00:20:47.060 --> 00:20:50.540
But now I've authorized the
Google APIs Explorer to make

00:20:50.540 --> 00:20:52.140
requests on my behalf.

00:20:52.140 --> 00:20:54.950
And let's try some here.

00:20:54.950 --> 00:20:57.410
So first of all, you could
do some universal search.

00:21:00.180 --> 00:21:01.720
This is truly universal
search.

00:21:01.720 --> 00:21:06.680
If you were previously doing
searches against the Version 2

00:21:06.680 --> 00:21:08.110
API, you might know
that you only got

00:21:08.110 --> 00:21:11.660
back videos by default.

00:21:11.660 --> 00:21:14.130
There were ways of doing channel
searches and playlist

00:21:14.130 --> 00:21:16.260
searches, but they would
be at different points.

00:21:16.260 --> 00:21:19.625
So you couldn't really just do
one search that would return

00:21:19.625 --> 00:21:23.390
the most relevant videos and
channels and play lists.

00:21:23.390 --> 00:21:26.100
In Version 3, you can.

00:21:26.100 --> 00:21:28.370
So let's try it out
to start with.

00:21:28.370 --> 00:21:32.731
So let's put in YouTube API.

00:21:32.731 --> 00:21:34.220
That'll be our search string.

00:21:34.220 --> 00:21:36.550
There's a couple of other fields
that you could fill out

00:21:36.550 --> 00:21:40.620
if you want to, but we'll just
leave them as default for now.

00:21:40.620 --> 00:21:44.420
And let's click Execute.

00:21:44.420 --> 00:21:46.010
And we get an error.

00:21:46.010 --> 00:21:49.100
So this is one of the reasons
why we don't have things

00:21:49.100 --> 00:21:51.300
opened up to everybody
right yet.

00:21:51.300 --> 00:21:54.230
There are people doing active
development pretty much as we

00:21:54.230 --> 00:21:56.240
speak on the API.

00:21:56.240 --> 00:21:59.610
And I had heard there was an
issue this morning with doing

00:21:59.610 --> 00:22:03.540
unauthorized requests for
searches, just due to some

00:22:03.540 --> 00:22:04.340
random bug.

00:22:04.340 --> 00:22:06.375
And I thought that an authorized
request would work,

00:22:06.375 --> 00:22:08.210
but as it turns out,
it doesn't.

00:22:08.210 --> 00:22:10.670
So play around with this
maybe tomorrow or

00:22:10.670 --> 00:22:13.180
in a couple of days.

00:22:13.180 --> 00:22:16.460
That's specific to this
search list, though.

00:22:16.460 --> 00:22:18.660
But there are a few other things
that should work, such

00:22:18.660 --> 00:22:22.160
as doing a channels list.

00:22:22.160 --> 00:22:30.680
So I'm in this case going
to try to retrieve this.

00:22:30.680 --> 00:22:34.700
This is the typical one that you
make to get a list of your

00:22:34.700 --> 00:22:37.130
YouTube channel, basically.

00:22:37.130 --> 00:22:40.180
So you can see this is doing
a request against

00:22:40.180 --> 00:22:41.430
googleapis.com/y
outube/v3alpha/channels.

00:22:45.490 --> 00:22:47.650
I'm saying that this is mine.

00:22:47.650 --> 00:22:51.520
And here's a key, or API key.

00:22:51.520 --> 00:22:54.380
The Google APIs Explorer
automatically fills

00:22:54.380 --> 00:22:56.070
in the key for you.

00:22:56.070 --> 00:22:58.410
So you don't have to register
your own key, as we talked

00:22:58.410 --> 00:22:58.950
about before.

00:22:58.950 --> 00:23:02.740
So don't worry about
that part.

00:23:02.740 --> 00:23:04.250
So you'll see the response.

00:23:04.250 --> 00:23:07.050
This is a very basic response.

00:23:07.050 --> 00:23:11.210
It shows me that I have this
identifier for my channel.

00:23:11.210 --> 00:23:13.355
And pretty much just saying
this is the ID.

00:23:13.355 --> 00:23:15.940
It happens to be a channel.

00:23:15.940 --> 00:23:20.380
And that's something that is due
to the fact that I've only

00:23:20.380 --> 00:23:25.440
specified ID as the part that
I want when I get a response

00:23:25.440 --> 00:23:28.030
back from the API.

00:23:28.030 --> 00:23:31.740
So this is actually a very
important concept that's

00:23:31.740 --> 00:23:34.390
probably going to take
developers some time to get

00:23:34.390 --> 00:23:38.880
used to when they start
working with v3 API.

00:23:38.880 --> 00:23:42.080
If you've done any development
against the v2 API, you know

00:23:42.080 --> 00:23:45.150
that by default we give
you everything.

00:23:45.150 --> 00:23:49.070
If you request a video entry,
for instance or if you request

00:23:49.070 --> 00:23:53.300
your YouTube channel entry,
you'll get every piece of

00:23:53.300 --> 00:23:58.420
metadata that is within
the API by default.

00:23:58.420 --> 00:24:02.430
And it is possible to filter
out some of that metadata.

00:24:02.430 --> 00:24:07.800
And a lot of people do that
because they don't need to get

00:24:07.800 --> 00:24:12.030
a couple of kilobytes maybe or
several hundred bytes worth of

00:24:12.030 --> 00:24:14.220
data back when all they
care about is a

00:24:14.220 --> 00:24:16.080
channel ID, for instance.

00:24:16.080 --> 00:24:20.080
So in order to save
speed, save--

00:24:20.080 --> 00:24:20.450
sorry--

00:24:20.450 --> 00:24:22.670
transmission time, and just
optimize things, they'll say--

00:24:22.670 --> 00:24:23.160
[SNEEZE]

00:24:23.160 --> 00:24:26.370
JEFFREY POSNICK: Bless you.

00:24:26.370 --> 00:24:29.990
They'll say, hey, I'll use the
filter parameter and say that

00:24:29.990 --> 00:24:32.690
I only want the ID back.

00:24:32.690 --> 00:24:35.260
So that was how things
are done in v2.

00:24:35.260 --> 00:24:38.160
We've kind of rethought things
in v3, and we've said, OK,

00:24:38.160 --> 00:24:40.760
well, instead of people having
to specifically tell us what

00:24:40.760 --> 00:24:43.780
they don't want and by default
giving them everything, how

00:24:43.780 --> 00:24:47.570
about we make people
specifically say that they do

00:24:47.570 --> 00:24:50.080
want certain parts
of the response.

00:24:50.080 --> 00:24:53.470
And if they don't ask for it,
we don't give it to them.

00:24:53.470 --> 00:24:56.480
So this does mean that there's
a little bit of work that

00:24:56.480 --> 00:25:00.170
needs to be done on your
part in order--

00:25:00.170 --> 00:25:01.650
no pun intended--

00:25:01.650 --> 00:25:05.060
in order to determine
which parts you want

00:25:05.060 --> 00:25:07.100
to get back in response.

00:25:07.100 --> 00:25:11.880
But once you do that, you'll
realize that hey, you're

00:25:11.880 --> 00:25:15.010
getting back a lot more
optimized responses

00:25:15.010 --> 00:25:16.330
than you used to.

00:25:16.330 --> 00:25:19.990
So if I put ID, which is a very
basic part, I will only

00:25:19.990 --> 00:25:24.900
get back this identifier over
here for my channel.

00:25:24.900 --> 00:25:28.600
I could also put in the
content details.

00:25:28.600 --> 00:25:30.980
That's another relevant one.

00:25:30.980 --> 00:25:34.630
And these are all in our
documentation right now.

00:25:34.630 --> 00:25:39.930
So I'm trying to remember a few
relevant ones, but I can

00:25:39.930 --> 00:25:42.830
actually just pop over to the
dots and take a look.

00:25:42.830 --> 00:25:45.800
But it's just adding in that
content details, though.

00:25:45.800 --> 00:25:49.140
That created an extra
subsection

00:25:49.140 --> 00:25:50.240
within the JSON response.

00:25:50.240 --> 00:25:51.740
It has all the content
details.

00:25:51.740 --> 00:25:55.360
And in this case, it has the
identifier of my uploads list,

00:25:55.360 --> 00:26:00.790
and the fact that this is
a public list of videos.

00:26:00.790 --> 00:26:05.100
So let me just pull up
our docs real quick.

00:26:05.100 --> 00:26:11.050
See the big Experimental
next to Version 3.

00:26:11.050 --> 00:26:13.680
And I'm going to be doing
a channels list.

00:26:13.680 --> 00:26:18.380
So I'm going to go to Reference,
Channels, List.

00:26:18.380 --> 00:26:19.325
And I'm going to
look over here.

00:26:19.325 --> 00:26:20.980
It says Parts.

00:26:20.980 --> 00:26:23.520
And you can see a definition
of types of

00:26:23.520 --> 00:26:24.700
supported values for parts.

00:26:24.700 --> 00:26:26.780
So we have ID, Content
Details, Snippet, and

00:26:26.780 --> 00:26:28.380
Statistics.

00:26:28.380 --> 00:26:31.060
So let me actually include all
that and just show you the

00:26:31.060 --> 00:26:33.220
full response I could
get back.

00:26:42.094 --> 00:26:43.920
And just comma separate
a string.

00:26:47.748 --> 00:26:50.560
Click Execute.

00:26:50.560 --> 00:26:51.960
So you see a bunch more data.

00:26:51.960 --> 00:26:57.490
And this should be more familiar
for folks who have

00:26:57.490 --> 00:27:00.040
done v2 type responses, and
they're used to getting back

00:27:00.040 --> 00:27:03.020
things like the number of views
for all the videos in

00:27:03.020 --> 00:27:03.700
your channel.

00:27:03.700 --> 00:27:07.060
The total number of public
videos, your subscribers, a

00:27:07.060 --> 00:27:10.318
thumbnail for my account
and its title

00:27:10.318 --> 00:27:12.410
and things like that.

00:27:12.410 --> 00:27:15.740
One of the interesting things
is the part that

00:27:15.740 --> 00:27:17.820
was entitled Snippet.

00:27:17.820 --> 00:27:26.150
Most of our API endpoints do
support the snippet part.

00:27:26.150 --> 00:27:29.130
And this is kind of a shorthand
that we've come up

00:27:29.130 --> 00:27:34.900
with to say that you want to
get back the most relevant

00:27:34.900 --> 00:27:37.240
information in a response that
would be useful when

00:27:37.240 --> 00:27:41.180
displaying that response
visually somewhere.

00:27:41.180 --> 00:27:43.460
So the type of things that you
need when displaying something

00:27:43.460 --> 00:27:45.690
visually are usually a
title, description,

00:27:45.690 --> 00:27:48.600
some sort of thumbnail.

00:27:48.600 --> 00:27:52.000
That's usually enough in order
to give you a very basic

00:27:52.000 --> 00:27:53.450
visual representation
of something.

00:27:53.450 --> 00:27:55.640
So that's the type of things
you get back in Snippet.

00:27:55.640 --> 00:27:56.555
You get back the title.

00:27:56.555 --> 00:27:58.220
You get back a thumbnail.

00:27:58.220 --> 00:28:00.230
My channel doesn't happen to
have a description so there's

00:28:00.230 --> 00:28:01.550
nothing there.

00:28:01.550 --> 00:28:04.050
But you'll see the same sort of
thing if we, for instance,

00:28:04.050 --> 00:28:07.750
do a video query.

00:28:07.750 --> 00:28:12.375
So let's just pick a video
ID real quick.

00:28:12.375 --> 00:28:18.996
And I'll just grab one from
our Player API demo page.

00:28:18.996 --> 00:28:21.343
That's always a good place
to go to get a video ID.

00:28:24.450 --> 00:28:25.690
So we have that ID.

00:28:25.690 --> 00:28:29.640
And we're just going to go back
over here to Videos List,

00:28:29.640 --> 00:28:30.320
look for an ID.

00:28:30.320 --> 00:28:32.620
That, or you put in
Parts, Snippet.

00:28:36.308 --> 00:28:41.650
We'll do an Execute, and here
w get back something very

00:28:41.650 --> 00:28:45.210
similar to the folks who are
familiar with Version 2.

00:28:45.210 --> 00:28:47.270
You have title description.

00:28:47.270 --> 00:28:48.650
Tags are useful.

00:28:48.650 --> 00:28:49.770
You have this back
in the snippet.

00:28:49.770 --> 00:28:52.610
You have video category
in various thumbnails.

00:28:56.200 --> 00:28:59.310
I know this is a little bit
specific to folks who have

00:28:59.310 --> 00:29:04.660
written code, especially doing
JavaScript parsing of Version

00:29:04.660 --> 00:29:05.430
2 responses.

00:29:05.430 --> 00:29:08.290
But you'll know that it's very
difficult, for instance, to

00:29:08.290 --> 00:29:10.560
figure out what the high-quality
thumbnail is for

00:29:10.560 --> 00:29:13.640
when you're parsing
the v2 response.

00:29:13.640 --> 00:29:15.690
You kind of have to iterate
through all the items and

00:29:15.690 --> 00:29:18.820
check one of the JSON
attributes.

00:29:18.820 --> 00:29:20.850
And it's quite annoying.

00:29:20.850 --> 00:29:24.384
So one of the nice things that
we've done is we've made it so

00:29:24.384 --> 00:29:28.000
you can just do Thumbnails, and
then do a few things that

00:29:28.000 --> 00:29:30.990
has the property value high
within that, and then get the

00:29:30.990 --> 00:29:33.080
property of the URL.

00:29:33.080 --> 00:29:36.050
And it makes things a
little bit easier.

00:29:36.050 --> 00:29:38.670
So we've tried to make those
types of little changes

00:29:38.670 --> 00:29:39.920
through the API.

00:29:42.190 --> 00:29:45.330
So those are a few examples.

00:29:45.330 --> 00:29:48.630
And try a little bit
more on your own.

00:29:48.630 --> 00:29:53.040
I'm not going to show off the
Analytics API right this

00:29:53.040 --> 00:29:55.090
second, meaning I don't
have very useful

00:29:55.090 --> 00:29:56.760
information in my accounts.

00:29:56.760 --> 00:30:02.010
But you could do the same sort
of requests over here.

00:30:02.010 --> 00:30:06.800
It's a little trickier to format
the proper values for

00:30:06.800 --> 00:30:10.090
the IDs field, for instance,
which needs to be set to

00:30:10.090 --> 00:30:15.920
content to channel equals the
channel identifier string,

00:30:15.920 --> 00:30:19.700
which is something distinct
from your username.

00:30:19.700 --> 00:30:21.225
You're going to have to spend a
little time looking through

00:30:21.225 --> 00:30:23.640
the Docs if you want to
get started on this

00:30:23.640 --> 00:30:25.190
completely on your own.

00:30:25.190 --> 00:30:27.340
Otherwise, you can wait until
we release some sample code.

00:30:27.340 --> 00:30:30.150
That makes it a little
easier for folks to

00:30:30.150 --> 00:30:32.680
use these new APIs.

00:30:32.680 --> 00:30:35.380
But I just wanted to throw the
fact that people can play

00:30:35.380 --> 00:30:37.204
around with Analytics
API now, too.

00:30:40.110 --> 00:30:43.430
So one thing that I just want
to go back for a second and

00:30:43.430 --> 00:30:47.050
talk about, because it's another
thing that's important

00:30:47.050 --> 00:30:51.470
when thinking about the API,
is the fact that--

00:30:51.470 --> 00:31:01.810
let me put in Content,
Details, and no.

00:31:04.890 --> 00:31:06.140
Edit Picture.

00:31:10.410 --> 00:31:11.820
All right.

00:31:11.820 --> 00:31:13.590
There we go.

00:31:13.590 --> 00:31:21.790
So you'll notice that we have
returned to the uploads this

00:31:21.790 --> 00:31:27.490
uu, and then a pretty long
string of characters

00:31:27.490 --> 00:31:30.100
identifiers.

00:31:30.100 --> 00:31:36.370
This is our way of moving
towards a universal name space

00:31:36.370 --> 00:31:39.400
for different types of video
lists and making it possible

00:31:39.400 --> 00:31:43.980
to retrieve any type of list of
videos using a single API

00:31:43.980 --> 00:31:47.720
method, regardless of whether
it's a list of videos that

00:31:47.720 --> 00:31:50.170
somebody has uploaded, or
it's a list of videos

00:31:50.170 --> 00:31:51.580
somebody has favorited.

00:31:51.580 --> 00:31:55.520
Or it's a list of videos that
belong in a given play list.

00:31:55.520 --> 00:31:58.190
Or if it's a list of videos that
a user has Liked in the

00:31:58.190 --> 00:31:59.450
past, which is something
new that we're going

00:31:59.450 --> 00:32:01.720
to be rolling out.

00:32:01.720 --> 00:32:09.230
All those things correspond to
specific list identifiers that

00:32:09.230 --> 00:32:11.250
have different prefixes.

00:32:11.250 --> 00:32:15.020
So uu is the prefix being
used for the uploads

00:32:15.020 --> 00:32:16.470
feed, more or less.

00:32:16.470 --> 00:32:20.190
And pl, many people have seen
the pl prefix used on list

00:32:20.190 --> 00:32:23.270
identifiers on the website
in the past.

00:32:23.270 --> 00:32:27.790
So the same pl identifiers can
now be passed directly into

00:32:27.790 --> 00:32:31.120
Methods in the API.

00:32:31.120 --> 00:32:32.550
So I just copied that.

00:32:32.550 --> 00:32:34.800
I'm going to show you
how that's done.

00:32:34.800 --> 00:32:38.140
If you do play list
items list.

00:32:38.140 --> 00:32:42.239
I'm going to put
in Snippet ID.

00:32:42.239 --> 00:32:47.410
And I'm going to put in the
ID of my group section.

00:32:47.410 --> 00:32:50.982
And I'm going to put in the ID
of my uploads list and then

00:32:50.982 --> 00:32:53.410
click Execute.

00:32:53.410 --> 00:32:54.530
This should work.

00:32:54.530 --> 00:32:57.920
And this will show me all
the videos that are

00:32:57.920 --> 00:33:01.390
uploaded in my account.

00:33:01.390 --> 00:33:03.830
So again, this would have worked
equally well if I had

00:33:03.830 --> 00:33:10.640
put in a PL ID over here, if I
had an actual playlist ID.

00:33:10.640 --> 00:33:13.140
So we're treating lists of
videos as if they were just

00:33:13.140 --> 00:33:17.410
lists of videos, regardless
of what their origin is.

00:33:17.410 --> 00:33:19.770
And that should make things
easier from your end in terms

00:33:19.770 --> 00:33:21.790
of implementing code.

00:33:21.790 --> 00:33:23.040
So just one other thing
I wanted to point out.

00:33:26.100 --> 00:33:30.520
So I've showed you a bunch of
demos that are done in the web

00:33:30.520 --> 00:33:31.100
interface now.

00:33:31.100 --> 00:33:33.150
I've talked about
the API Console.

00:33:33.150 --> 00:33:36.810
I did want to show some very
preliminary Python code, in

00:33:36.810 --> 00:33:39.370
this case, where we're doing
some of the same things we've

00:33:39.370 --> 00:33:42.970
done before via the
web interface.

00:33:42.970 --> 00:33:46.230
So in this particular case, I'm
going to show you a Python

00:33:46.230 --> 00:33:49.310
example that's used within
Google APIs Python library

00:33:49.310 --> 00:33:55.100
that will make an authenticator
request to

00:33:55.100 --> 00:33:58.760
Channels List to get the uploads
list identifier, the

00:33:58.760 --> 00:34:01.300
same identifier we were just
talking about previously.

00:34:01.300 --> 00:34:04.300
And then it will take that
identifier and make a playlist

00:34:04.300 --> 00:34:08.690
items list call to get all the
videos in my uploads feed.

00:34:08.690 --> 00:34:12.429
So it's pretty much exactly what
we just saw in the web

00:34:12.429 --> 00:34:15.489
interface, except some Python
code to do that.

00:34:15.489 --> 00:34:19.230
So before I run through the
code, let me show you what it

00:34:19.230 --> 00:34:23.159
actually looks like because I
always like doing that first.

00:34:23.159 --> 00:34:24.602
So I can run my uploads.py.

00:34:27.130 --> 00:34:29.159
And you'll notice that it
immediately will take me to

00:34:29.159 --> 00:34:33.080
this page where I can quick
Allow Access, and complete the

00:34:33.080 --> 00:34:34.250
OAuth 2 flow.

00:34:34.250 --> 00:34:38.000
So this is [INAUDIBLE], and
you'll see the list of all the

00:34:38.000 --> 00:34:41.160
videos in my account, including
a bunch of videos

00:34:41.160 --> 00:34:42.239
from my site.

00:34:42.239 --> 00:34:49.730
So this is possible because we
are using Google APIs Python

00:34:49.730 --> 00:34:52.560
client library, and that has a
really good support for OAuth

00:34:52.560 --> 00:34:54.560
that's already built into it.

00:34:54.560 --> 00:34:59.800
So we don't have to worry about
the details of actually

00:34:59.800 --> 00:35:02.360
handling the redirects, for
instance, or even persisting

00:35:02.360 --> 00:35:05.910
the credentials after we've
authorized for the first time.

00:35:05.910 --> 00:35:07.885
The client library will take
care of all that for us, and

00:35:07.885 --> 00:35:09.770
I'll show you how--

00:35:09.770 --> 00:35:10.060
excuse me--

00:35:10.060 --> 00:35:11.310
from looking at the code.

00:35:13.400 --> 00:35:16.660
And one other thing to note is
that the second we run it, I

00:35:16.660 --> 00:35:20.560
don't have to go through the
OAuth 2 authorization again.

00:35:20.560 --> 00:35:23.390
It'll persist those tokens for
us and it'll reduce them.

00:35:23.390 --> 00:35:27.060
So while it might seem a little
bit weird, hey, why do

00:35:27.060 --> 00:35:29.670
I have to open up a web browser
when I have a command

00:35:29.670 --> 00:35:32.360
line installed application?

00:35:32.360 --> 00:35:35.120
Yeah, that's not ideal for
automated processes, but you

00:35:35.120 --> 00:35:37.180
only have to do it once.

00:35:37.180 --> 00:35:39.420
And as long as you don't
revoke your OAuth 2

00:35:39.420 --> 00:35:42.730
credentials, you can reuse
those cached credentials

00:35:42.730 --> 00:35:44.310
pretty much indefinitely.

00:35:44.310 --> 00:35:47.210
So in that respect, you don't
have to store your username or

00:35:47.210 --> 00:35:50.850
password anywhere on the
local file system.

00:35:50.850 --> 00:35:55.490
You're storing these opaque
credentials in a file that

00:35:55.490 --> 00:35:58.240
only your user has access to.

00:35:58.240 --> 00:36:02.230
So it really is a win from a
security perspective, and it's

00:36:02.230 --> 00:36:06.110
really, really not that much
harder than doing something

00:36:06.110 --> 00:36:07.655
like client login with a
username and password.

00:36:13.780 --> 00:36:16.120
I can't talk about all the
details of how the Python

00:36:16.120 --> 00:36:18.930
client library handles things.

00:36:18.930 --> 00:36:20.410
There's a lot of magic
that's going on.

00:36:20.410 --> 00:36:24.090
And Jared Gregorio, who's on our
team and wrote this, did a

00:36:24.090 --> 00:36:25.560
wonderful job of that.

00:36:25.560 --> 00:36:27.090
And he's made it so that you
have to just put in a couple

00:36:27.090 --> 00:36:30.730
lines of code and it'll take
care, of instance, the OAuth 2

00:36:30.730 --> 00:36:32.150
flow for you

00:36:32.150 --> 00:36:37.960
So this literally is all you
need to do to do OAuth 2 from

00:36:37.960 --> 00:36:40.590
within your Python
application.

00:36:40.590 --> 00:36:44.340
You have to initialize
this flow object.

00:36:44.340 --> 00:36:46.580
And you're saying you're loading
the flow from a client

00:36:46.580 --> 00:36:48.020
secrets file.

00:36:48.020 --> 00:36:54.780
A client secrets file is a
JSON-formatted file that

00:36:54.780 --> 00:36:58.580
contains the client ID, and the
client's secret, and the

00:36:58.580 --> 00:37:02.140
redirect scopes, and few other
things that came from the API

00:37:02.140 --> 00:37:04.140
Console in a previous call.

00:37:04.140 --> 00:37:06.660
So you just store that
somewhere locally.

00:37:06.660 --> 00:37:08.540
There's some spec for
how you create that

00:37:08.540 --> 00:37:09.190
client secrets file.

00:37:09.190 --> 00:37:12.180
I don't want to go into it right
now, but there's spec

00:37:12.180 --> 00:37:14.050
for how to do that
link-to from the

00:37:14.050 --> 00:37:16.340
Python client library.

00:37:16.340 --> 00:37:18.750
And we always said that
we wanted to do the

00:37:18.750 --> 00:37:22.710
scope off the YouTube.

00:37:22.710 --> 00:37:25.860
And we're saying the next line,
that we want to use this

00:37:25.860 --> 00:37:27.490
particular file for storage.

00:37:27.490 --> 00:37:29.025
So just hold on one second.

00:37:31.990 --> 00:37:33.355
You can hear some pings
in the background--

00:37:33.355 --> 00:37:34.605
I'm sorry.

00:37:36.970 --> 00:37:40.960
So we're saying that we want
to use this particular file

00:37:40.960 --> 00:37:43.540
for storage.

00:37:43.540 --> 00:37:44.660
And I'm sorry--

00:37:44.660 --> 00:37:48.730
Jareck or Jeremy, interrupt me
if there's something I should

00:37:48.730 --> 00:37:49.540
be doing there.

00:37:49.540 --> 00:37:50.930
JAREK WILKIEWICZ: I think
we are mesmerized

00:37:50.930 --> 00:37:52.620
by your code, Jeff.

00:37:52.620 --> 00:37:53.240
JEFFREY POSNICK: Pardon?

00:37:53.240 --> 00:37:55.812
JAREK WILKIEWICZ: We are
mesmerized by your code, so

00:37:55.812 --> 00:37:58.280
we're in a trance right
now, salivating

00:37:58.280 --> 00:37:59.270
over that Python code.

00:37:59.270 --> 00:38:00.733
JEFFREY POSNICK:
You know what?

00:38:00.733 --> 00:38:03.795
I am always embarrassed showing
off my Python code in

00:38:03.795 --> 00:38:06.170
front of JJ, in particular,
because he's

00:38:06.170 --> 00:38:08.190
a true Python guru.

00:38:08.190 --> 00:38:13.540
So JJ, mercifully, is not
on the camera today.

00:38:13.540 --> 00:38:17.190
Otherwise he'd probably be
talking about my indentation,

00:38:17.190 --> 00:38:20.400
for instance, which is the
worst thing you could get

00:38:20.400 --> 00:38:22.980
reprimanded for if you're
a Python programmer.

00:38:22.980 --> 00:38:27.640
In any case, though, we have
the definition of where the

00:38:27.640 --> 00:38:30.100
local file is for storing
your credentials.

00:38:30.100 --> 00:38:32.020
And we try to reuse the
credentials over here.

00:38:32.020 --> 00:38:34.620
So we see if the credentials
are valid.

00:38:34.620 --> 00:38:36.270
If they are, we'll reuse them.

00:38:36.270 --> 00:38:38.620
If they're not, then we'll
just go through the whole

00:38:38.620 --> 00:38:42.290
flow, which opens up the web
browser for us automatically.

00:38:42.290 --> 00:38:45.010
It'll actually run local
web server for us.

00:38:45.010 --> 00:38:48.530
So the web browser will
end up redirecting to

00:38:48.530 --> 00:38:51.040
a local host URL.

00:38:51.040 --> 00:38:55.300
And that Python lone server
that's running will listen for

00:38:55.300 --> 00:38:55.790
the response.

00:38:55.790 --> 00:38:58.540
And once it gets the response,
it'll complete the OAuth 2

00:38:58.540 --> 00:39:01.800
flow for us without us really
having intervene at all.

00:39:01.800 --> 00:39:04.510
So it's super nifty.

00:39:04.510 --> 00:39:08.820
And at that point, we create
this YouTube object.

00:39:08.820 --> 00:39:11.635
And over here, we are doing what
I mentioned before, where

00:39:11.635 --> 00:39:14.470
it generates the client
bindings on the

00:39:14.470 --> 00:39:15.810
fly, more or less.

00:39:15.810 --> 00:39:18.680
So what we do is we call the
build method, and we say I'm

00:39:18.680 --> 00:39:22.040
using the YouTube service in the
v3 alpha version, and it's

00:39:22.040 --> 00:39:24.830
going to go and download the
discovery document for us.

00:39:24.830 --> 00:39:28.570
And it's going to build all the
necessary bindings that we

00:39:28.570 --> 00:39:32.220
need without us having to have
that precompiled or stored

00:39:32.220 --> 00:39:33.150
anywhere ahead of time.

00:39:33.150 --> 00:39:35.210
So it's always going
to be fresh.

00:39:35.210 --> 00:39:38.950
And at this point, we're doing
a channels list call on that

00:39:38.950 --> 00:39:44.295
YouTube object, specifying the
same sort of frameworks we saw

00:39:44.295 --> 00:39:46.250
in the web UI.

00:39:46.250 --> 00:39:49.040
And we're going to then iterate
over the response.

00:39:49.040 --> 00:39:51.636
So we get back a list
of channels.

00:39:51.636 --> 00:39:52.900
We iterate over that.

00:39:52.900 --> 00:39:56.200
And I only have one channel,
which most

00:39:56.200 --> 00:39:57.870
people certainly would.

00:39:57.870 --> 00:40:02.040
And it's the content details
upload list ID that we want to

00:40:02.040 --> 00:40:03.740
grab over here.

00:40:03.740 --> 00:40:05.910
And we're then going to
pass that to this

00:40:05.910 --> 00:40:09.280
youtube.playlistitems.list
call.

00:40:09.280 --> 00:40:11.410
Very similar, again, to
the web interface.

00:40:11.410 --> 00:40:16.940
This playlistid.list_id and the
part is Snippet, and we

00:40:16.940 --> 00:40:18.520
can then iterate our
other response.

00:40:18.520 --> 00:40:22.760
So again, this is all JSON data
that you get back, and it

00:40:22.760 --> 00:40:27.570
gets deserialized into Python
objects that you can then

00:40:27.570 --> 00:40:29.580
interact with.

00:40:29.580 --> 00:40:30.790
So we're grabbing the
title, and we're

00:40:30.790 --> 00:40:31.960
grabbing the video ID.

00:40:31.960 --> 00:40:34.200
And I end up printing that
out in a user interface.

00:40:34.200 --> 00:40:36.410
We can write that.

00:40:36.410 --> 00:40:39.270
So that's a really
simple example.

00:40:39.270 --> 00:40:42.640
We're going to release some
examples for doing Analytics

00:40:42.640 --> 00:40:44.290
reports in the near future.

00:40:44.290 --> 00:40:45.170
We're going to list--

00:40:45.170 --> 00:40:46.710
I would show you the Search
example right now, but the

00:40:46.710 --> 00:40:50.180
search service isn't currently
working the way it should, so

00:40:50.180 --> 00:40:51.900
it wouldn't be a good demo.

00:40:51.900 --> 00:40:57.340
And we're going to be trying to
get out as much sample code

00:40:57.340 --> 00:41:03.570
as we can as soon as we can,
perhaps even before the public

00:41:03.570 --> 00:41:06.426
release of the both v3 and
the Analytics API.

00:41:06.426 --> 00:41:11.070
Because we know that sample code
is really what a lot of

00:41:11.070 --> 00:41:15.212
developers go on when they're
getting started with any sort

00:41:15.212 --> 00:41:16.560
of new API.

00:41:16.560 --> 00:41:19.520
So if you don't hear too much
from me in the Google

00:41:19.520 --> 00:41:23.820
Developer forums, it's because
I'm head down writing sample

00:41:23.820 --> 00:41:25.070
code for everybody.

00:41:27.710 --> 00:41:31.660
And I think that's pretty much
what I wanted to show for now.

00:41:31.660 --> 00:41:33.160
I've used a nice
chunk of time.

00:41:33.160 --> 00:41:37.130
As I mentioned, I probably
could end up using a lot.

00:41:37.130 --> 00:41:37.520
more.

00:41:37.520 --> 00:41:40.540
So if you ever see me on the
street in New York City, feel

00:41:40.540 --> 00:41:44.600
free to corner me
and ask me about

00:41:44.600 --> 00:41:46.820
any sort of API questions.

00:41:46.820 --> 00:41:50.320
I get that so much, paparazzi
just following me around and

00:41:50.320 --> 00:41:54.410
wanting to get early access to
v3 or wanting to know random

00:41:54.410 --> 00:41:55.880
things about v2.

00:41:55.880 --> 00:41:58.175
So feel free to do so.

00:41:58.175 --> 00:42:00.910
JAREK WILKIEWICZ: Actually, I
think JJ, if he were live, he

00:42:00.910 --> 00:42:02.780
would have said that you
actually predict what

00:42:02.780 --> 00:42:06.130
questions people are likely to
ask, then you follow them and

00:42:06.130 --> 00:42:08.600
answer before they have
a chance to ask them.

00:42:08.600 --> 00:42:09.645
Is that right, JJ?

00:42:09.645 --> 00:42:10.170
JJ BEHRENS: That's right.

00:42:10.170 --> 00:42:10.660
JAREK WILKIEWICZ: All right.

00:42:10.660 --> 00:42:11.850
JJ is nodding his head.

00:42:11.850 --> 00:42:14.055
JEFFREY POSNICK: Well, that's
using the Google Prediction

00:42:14.055 --> 00:42:16.361
API, which is one of the
APIs we didn't cover.

00:42:16.361 --> 00:42:18.628
But yeah, add the Google
Prediction API to your own

00:42:18.628 --> 00:42:19.275
code, and you can do the same.

00:42:19.275 --> 00:42:21.290
JAREK WILKIEWICZ: So you're
training the algorithm while

00:42:21.290 --> 00:42:22.370
people ask you questions?

00:42:22.370 --> 00:42:22.850
JEFFREY POSNICK: Yes,
that's right.

00:42:22.850 --> 00:42:24.310
JAREK WILKIEWICZ: Ah,
this is your secret.

00:42:24.310 --> 00:42:24.700
All right.

00:42:24.700 --> 00:42:26.980
So we have a few questions.

00:42:26.980 --> 00:42:29.910
There were actually questions
on the live stream in the

00:42:29.910 --> 00:42:32.500
comments section as well
as in the Moderator.

00:42:32.500 --> 00:42:35.310
So let's take a few.

00:42:35.310 --> 00:42:36.900
So let's start with
the Moderator.

00:42:36.900 --> 00:42:42.110
The top-ranked question is
about obtaining video

00:42:42.110 --> 00:42:45.000
thumbnails that look
like a storyboard.

00:42:45.000 --> 00:42:51.470
So there's a question whether
our existing Version 2 API

00:42:51.470 --> 00:42:54.160
provides that in the
API responses.

00:42:54.160 --> 00:42:59.830
And I think the answer is not
this moment, right, Jeff?

00:42:59.830 --> 00:43:01.180
JEFFREY POSNICK: Yeah.

00:43:01.180 --> 00:43:05.590
So we do expose three different
thumbnails from

00:43:05.590 --> 00:43:08.760
those videos that are tagged
with, I think,

00:43:08.760 --> 00:43:11.880
start, middle, and end.

00:43:11.880 --> 00:43:14.580
That is different than what I
think the person is asking

00:43:14.580 --> 00:43:17.100
about, which is they've noticed
that the YouTube

00:43:17.100 --> 00:43:19.020
player for a lot of videos--

00:43:19.020 --> 00:43:20.520
I don't know what percentage
of videos nowadays,

00:43:20.520 --> 00:43:21.990
but a lot of them--

00:43:21.990 --> 00:43:25.280
lets you move over the scrub
bar with your mouse.

00:43:25.280 --> 00:43:28.880
And you see a thumbnail of that
given point in the video.

00:43:28.880 --> 00:43:30.590
So that's something new that
we've started doing.

00:43:30.590 --> 00:43:36.062
We're not exposing that level of
thumbnail data via the API.

00:43:36.062 --> 00:43:38.290
I kind of doubt that
we ever will.

00:43:38.290 --> 00:43:41.000
I'm not going to say that for
sure, but I'm not aware of any

00:43:41.000 --> 00:43:42.955
plans for us to do anything
more than the beginning,

00:43:42.955 --> 00:43:45.276
middle, and end.

00:43:45.276 --> 00:43:46.490
JAREK WILKIEWICZ: Cool.

00:43:46.490 --> 00:43:46.980
Thanks, Jeff.

00:43:46.980 --> 00:43:52.230
Again, if this is something that
is important and you guys

00:43:52.230 --> 00:43:55.860
feel like we should, then please
file that in our issue

00:43:55.860 --> 00:43:59.780
tracker on the public side--

00:43:59.780 --> 00:44:02.880
it's linked from
youtube.com/dev--

00:44:02.880 --> 00:44:06.750
and we will push on your
behalf to see if

00:44:06.750 --> 00:44:07.660
we can make it happen.

00:44:07.660 --> 00:44:10.930
But as Jeff mentioned,
right now no plans.

00:44:10.930 --> 00:44:14.300
Next question is about
retrieving

00:44:14.300 --> 00:44:16.570
multiple parts of a response.

00:44:16.570 --> 00:44:21.150
So as Jeff mentioned, there's
a convenient way to obtain,

00:44:21.150 --> 00:44:23.140
for example, snippets that will
give you a set of data

00:44:23.140 --> 00:44:25.480
elements relevant for display.

00:44:25.480 --> 00:44:28.070
Now, what does response
look like if you

00:44:28.070 --> 00:44:29.160
actually ask for more?

00:44:29.160 --> 00:44:32.490
Can you do that, first, and then
what does it look like?

00:44:32.490 --> 00:44:34.600
JEFFREY POSNICK: Yeah,
you definitely can.

00:44:34.600 --> 00:44:37.380
So I'll just pull that up
again via screenshare.

00:44:37.380 --> 00:44:41.616
That would be the easiest
way to do that.

00:44:41.616 --> 00:44:45.560
Let me try to share just
the window this time.

00:44:45.560 --> 00:44:49.630
So if you go to the Google
APIs Explorer.

00:44:49.630 --> 00:44:55.740
And I guess the most relevant
way to do it is for the

00:44:55.740 --> 00:44:57.850
example where we do
the videos list.

00:44:57.850 --> 00:45:02.550
So let me just pull
up that video ID.

00:45:02.550 --> 00:45:08.895
So prat is just a
comma-separated list of parts.

00:45:08.895 --> 00:45:13.700
And if you specify multiple
ones, it'll be the union of

00:45:13.700 --> 00:45:14.950
all those parts.

00:45:17.640 --> 00:45:20.930
And if I go over here, Reference
and take Videos

00:45:20.930 --> 00:45:24.680
List, and then take
a look over here.

00:45:24.680 --> 00:45:27.410
Actually, one thing to note is
that instead of just going to

00:45:27.410 --> 00:45:32.160
the APIs Explorer, we do have
an embedded version of the

00:45:32.160 --> 00:45:37.770
APIs Explorer that is tied to
the specific service that

00:45:37.770 --> 00:45:39.430
you're looking at in the Docs.

00:45:39.430 --> 00:45:43.140
So right now I'm looking
at Videos List.

00:45:43.140 --> 00:45:45.990
And if you go over here, you'll
see pretty much the

00:45:45.990 --> 00:45:46.960
same user interface.

00:45:46.960 --> 00:45:52.730
It's really just a tiny subset
of it, but it's already on the

00:45:52.730 --> 00:45:54.500
user's list method.

00:45:54.500 --> 00:45:58.874
So I can just put it over
here equally well.

00:45:58.874 --> 00:46:02.220
So let me do that instead.

00:46:02.220 --> 00:46:05.684
So let's just get the
list of parts.

00:46:05.684 --> 00:46:08.080
Copy that over here.

00:46:08.080 --> 00:46:14.510
Whole bunch of different
parts, like for this.

00:46:14.510 --> 00:46:17.330
I'm pretty sure--

00:46:17.330 --> 00:46:20.130
well, let's actually try to see
if we have spaces in there

00:46:20.130 --> 00:46:22.432
whether it likes it.

00:46:22.432 --> 00:46:27.290
OK, so it's happy enough
even with spaces.

00:46:27.290 --> 00:46:31.860
So this just shows you-- and
here if I take a look at

00:46:31.860 --> 00:46:37.280
minimizing some things, which is
a nice thing to do, you'll

00:46:37.280 --> 00:46:42.350
see you have this parent
element, parent container

00:46:42.350 --> 00:46:46.820
element, whose value is actually
the same as the ID.

00:46:46.820 --> 00:46:49.410
So this makes is easy if you're
looking at multiple

00:46:49.410 --> 00:46:52.350
video IDs at once, for instance,
you can specify

00:46:52.350 --> 00:46:56.440
three or four or whatever video
IDs, you'll know what

00:46:56.440 --> 00:46:58.650
part of the response corresponds
to the specific

00:46:58.650 --> 00:47:02.125
video you're interested
in just by using

00:47:02.125 --> 00:47:04.610
that ID as a key.

00:47:04.610 --> 00:47:06.430
So in this case, we're
only looking at one.

00:47:06.430 --> 00:47:08.713
But within here you'll see
there's a snippet item.

00:47:08.713 --> 00:47:09.720
There's a constant details,

00:47:09.720 --> 00:47:12.210
statistics, status, and player.

00:47:12.210 --> 00:47:17.300
And those each have their
own subsections with

00:47:17.300 --> 00:47:18.500
information within it.

00:47:18.500 --> 00:47:22.965
So you can definitely specify as
many as you like, or as few

00:47:22.965 --> 00:47:23.390
as you like.

00:47:23.390 --> 00:47:25.810
If you only want to know what
the view count is for a given

00:47:25.810 --> 00:47:29.540
video, then all you need to do
is put down statistics and

00:47:29.540 --> 00:47:30.550
forget all that other
information

00:47:30.550 --> 00:47:33.700
that you don't want.

00:47:33.700 --> 00:47:34.600
JAREK WILKIEWICZ: Cool.

00:47:34.600 --> 00:47:34.970
Great.

00:47:34.970 --> 00:47:37.050
Thanks, Jeff.

00:47:37.050 --> 00:47:39.520
There is one more comment
in the Moderator.

00:47:39.520 --> 00:47:43.830
It's in English and in
Mandarin, I suppose.

00:47:43.830 --> 00:47:45.530
It's Like.

00:47:45.530 --> 00:47:48.270
So my response to that is
thank you very much.

00:47:48.270 --> 00:47:53.440
And I'm not really that good
with Mandarin, but I will

00:47:53.440 --> 00:47:54.520
answer in Polish.

00:47:54.520 --> 00:47:55.852
[SPEAKING POLISH].

00:47:55.852 --> 00:47:58.623
But let's transition to a couple
of the questions that I

00:47:58.623 --> 00:48:02.350
saw popping up in the live
feed in the comments.

00:48:02.350 --> 00:48:10.500
So one question was about
YouTube iOS as far the API is

00:48:10.500 --> 00:48:13.250
concerned, is there a
new YouTube iOS API?

00:48:13.250 --> 00:48:16.440
And I think, Jeff, you were
talking about the different

00:48:16.440 --> 00:48:17.190
client libraries.

00:48:17.190 --> 00:48:21.100
So I think the question really
is, what about the iOS?

00:48:21.100 --> 00:48:23.620
Is the v3 actually helping
developers in any way?

00:48:26.130 --> 00:48:29.410
JEFFREY POSNICK: There
definitely is a client library

00:48:29.410 --> 00:48:33.050
for Objective-C that will be
available for use in both

00:48:33.050 --> 00:48:35.380
version three of the API and
the YouTube Analytics API.

00:48:38.710 --> 00:48:42.830
It will help developers, but
it's actually, interesting for

00:48:42.830 --> 00:48:46.100
Objective-C because we didn't
really have quite the same

00:48:46.100 --> 00:48:49.570
problem with the Objective-C
client library in v2 as we did

00:48:49.570 --> 00:48:53.410
with maybe Java, for instance,
or Python, where either the

00:48:53.410 --> 00:48:57.160
bindings were pretty out of date
or there was no really

00:48:57.160 --> 00:49:00.200
good support for OAuth 2.

00:49:00.200 --> 00:49:03.120
That really hasn't been the case
with Objective-C. We have

00:49:03.120 --> 00:49:07.655
a fantastic maintainer of the
Objective-C library, Greg

00:49:07.655 --> 00:49:09.950
Robbins, who's been really
good about adding

00:49:09.950 --> 00:49:10.706
new things to it.

00:49:10.706 --> 00:49:13.490
So it's not like you're in very
bad shape if you wanted

00:49:13.490 --> 00:49:16.410
to use the Objective-C client
library with v2.

00:49:16.410 --> 00:49:19.240
That being said, it'll
strictly be a better

00:49:19.240 --> 00:49:23.400
experience I think I could say
with some degree of certainty

00:49:23.400 --> 00:49:26.090
if you're doing v3 programming
using the

00:49:26.090 --> 00:49:27.540
Objective-C client library.

00:49:27.540 --> 00:49:27.970
And you know, it's definitely
something

00:49:27.970 --> 00:49:29.340
that should be supported.

00:49:29.340 --> 00:49:30.360
JAREK WILKIEWICZ: Great.

00:49:30.360 --> 00:49:31.530
And eight other languages,
right?

00:49:31.530 --> 00:49:33.347
JEFFREY POSNICK: And eight
other languages, yes.

00:49:33.347 --> 00:49:35.260
JAREK WILKIEWICZ: Sounds good.

00:49:35.260 --> 00:49:36.960
Couple of final questions
since we

00:49:36.960 --> 00:49:38.060
have a few more minutes.

00:49:38.060 --> 00:49:41.750
So there was one question about
embedding videos on one

00:49:41.750 --> 00:49:43.700
side from a YouTube channel.

00:49:43.700 --> 00:49:46.880
So if someone has a bunch of
videos uploaded, how can they

00:49:46.880 --> 00:49:48.340
easily embed them
on the channel?

00:49:48.340 --> 00:49:51.700
And then can they actually
decide how

00:49:51.700 --> 00:49:52.850
the videos are presented?

00:49:52.850 --> 00:49:56.800
There was a specific question
about determining the order by

00:49:56.800 --> 00:50:03.490
sorting based on tag values or
maybe any part of metadata.

00:50:03.490 --> 00:50:05.230
Any hints of how that
can be done?

00:50:05.230 --> 00:50:08.438
What are the possibilities
there?

00:50:08.438 --> 00:50:09.230
JEFFREY POSNICK: OK.

00:50:09.230 --> 00:50:13.740
So I want to make sure I fully
understand the question.

00:50:13.740 --> 00:50:16.990
I'm not sure you're the person
to clarify it or not.

00:50:16.990 --> 00:50:21.700
So let me answer the assumption
that the person has

00:50:21.700 --> 00:50:24.740
a list of videos, either already
in a playlist or

00:50:24.740 --> 00:50:27.460
already in their account or
maybe just a list of arbitrary

00:50:27.460 --> 00:50:30.840
video IDs, and their goal
is to display them in an

00:50:30.840 --> 00:50:35.950
intelligent fashion on a web
page in some sort of player.

00:50:35.950 --> 00:50:39.460
Does that kind of sound
like what--

00:50:39.460 --> 00:50:39.890
JAREK WILKIEWICZ: Sure.

00:50:39.890 --> 00:50:41.070
That's the general case.

00:50:41.070 --> 00:50:45.050
I think the uploads case was
another one, the simple case.

00:50:45.050 --> 00:50:46.385
So maybe we could cover both.

00:50:46.385 --> 00:50:47.340
JEFFREY POSNICK: Sure.

00:50:47.340 --> 00:50:52.820
So what you would want to do in
that particular case is use

00:50:52.820 --> 00:50:56.620
our standard embedded player
but make use of its list

00:50:56.620 --> 00:50:59.320
playback capabilities.

00:50:59.320 --> 00:51:02.630
So we talked about that a little
bit in a blog post.

00:51:02.630 --> 00:51:04.940
And here, since I'm in the
screen-sharing mode, let me

00:51:04.940 --> 00:51:07.660
just pull up that particular
post and try and make it a

00:51:07.660 --> 00:51:08.910
little bit bigger.

00:51:12.490 --> 00:51:15.030
Just so folks know what I'm
talking about here.

00:51:15.030 --> 00:51:19.830
So if you go to our
blog, which is at

00:51:19.830 --> 00:51:24.210
apiblog.youtube.com, you can
just search for list, just

00:51:24.210 --> 00:51:27.210
like I just did, and you'll
find this blog post.

00:51:27.210 --> 00:51:29.520
And we talk about how you
could use our standard

00:51:29.520 --> 00:51:35.270
icon-embedded player, but use
some parameters over here that

00:51:35.270 --> 00:51:39.450
let you say, OK, I would like
the player to be populated

00:51:39.450 --> 00:51:45.010
with all the uploads within
this user name, Google

00:51:45.010 --> 00:51:47.915
Developer, in this case.

00:51:47.915 --> 00:51:50.830
The other types of values that
you can do is say, I would

00:51:50.830 --> 00:51:54.500
like this to be populated
with all the

00:51:54.500 --> 00:51:56.360
videos in a given playlist.

00:51:56.360 --> 00:51:59.240
So you say playlist over here
and you put in playlist ID

00:51:59.240 --> 00:52:00.070
right over there.

00:52:00.070 --> 00:52:03.600
And you'll automatically get
a player that will load up

00:52:03.600 --> 00:52:08.030
everything in the playlist and
play those back to your users.

00:52:08.030 --> 00:52:10.660
It is actually kind of nice
because you get these little

00:52:10.660 --> 00:52:15.011
thumbnails on the bottom when
you zoom in even more, so you

00:52:15.011 --> 00:52:17.220
can see these thumbnails
that I'm talking about.

00:52:17.220 --> 00:52:19.230
So you can get these thumbnails
of all the

00:52:19.230 --> 00:52:23.140
different past videos so users
could just jump to the

00:52:23.140 --> 00:52:25.572
specific one that they
want to go to.

00:52:25.572 --> 00:52:29.660
Let me start with Google Git
engine in this case.

00:52:29.660 --> 00:52:33.510
So that's kind of our
recommended way of doing it

00:52:33.510 --> 00:52:36.580
without having to write too
much code of your own.

00:52:36.580 --> 00:52:40.240
If you did want to write more
code, feel free to do so.

00:52:40.240 --> 00:52:43.820
And you can use our Data API,
for instance, to get the

00:52:43.820 --> 00:52:46.980
contents of a given playlist or
the contents of user upload

00:52:46.980 --> 00:52:51.300
speed, and then take all those
video IDs and represent them

00:52:51.300 --> 00:52:54.660
in any fashion that makes
sense to you.

00:52:54.660 --> 00:52:56.456
That's kind of really
up to the developer.

00:52:56.456 --> 00:52:57.100
JAREK WILKIEWICZ: Great.

00:52:57.100 --> 00:52:57.680
Thanks, Jeff.

00:52:57.680 --> 00:53:02.280
There was one question asked by
someone on the live stream.

00:53:02.280 --> 00:53:04.930
Where can they find more
information about the API?

00:53:04.930 --> 00:53:08.530
Jeremy, since I know you've been
right in the middle of

00:53:08.530 --> 00:53:11.640
trying to figure out all the
intricacies of the API, where

00:53:11.640 --> 00:53:12.400
would one start?

00:53:12.400 --> 00:53:14.225
From your experience, what's
a good starting point?

00:53:14.225 --> 00:53:17.110
JEREMY WALKER: Well, if you look
on the site where you'd

00:53:17.110 --> 00:53:21.270
normally get the Version 2,
there's actually a Version 3

00:53:21.270 --> 00:53:23.390
link right above it that
says experimental.

00:53:23.390 --> 00:53:24.940
And you can go into that.

00:53:24.940 --> 00:53:27.940
There's some good examples in
there that I, in fact, started

00:53:27.940 --> 00:53:29.520
playing around with.

00:53:29.520 --> 00:53:33.700
And also great documentation
that breaks down all the parts

00:53:33.700 --> 00:53:36.710
that Jeff went over and how to
get different parts of that

00:53:36.710 --> 00:53:38.380
back in your responses.

00:53:38.380 --> 00:53:41.790
So if you just go to the main
YouTube API page, you'll see

00:53:41.790 --> 00:53:46.365
it under the Data API section
as Version 3, Experimental.

00:53:46.365 --> 00:53:48.240
JAREK WILKIEWICZ:
Thanks, Jeremy.

00:53:48.240 --> 00:53:51.500
I know you've been studying
it very carefully.

00:53:51.500 --> 00:53:51.870
All right.

00:53:51.870 --> 00:53:53.400
So we're almost out of time.

00:53:53.400 --> 00:53:56.790
There's one final note that
I wanted to make.

00:53:56.790 --> 00:54:03.980
If you guys would like to help
us with developer activities,

00:54:03.980 --> 00:54:05.320
we are hiring.

00:54:05.320 --> 00:54:09.670
If you go to
developers.google.com/jobs,

00:54:09.670 --> 00:54:11.410
you will see some of
the positions that

00:54:11.410 --> 00:54:13.880
we have on our team.

00:54:13.880 --> 00:54:17.020
It is a lot of fun, and as you
can tell, there's a lot of new

00:54:17.020 --> 00:54:18.400
APIs coming out.

00:54:18.400 --> 00:54:20.920
We work with a lot of
developers, entrepreneurs,

00:54:20.920 --> 00:54:22.710
large, small companies.

00:54:22.710 --> 00:54:27.660
We engage in the community
online, live Hangouts.

00:54:27.660 --> 00:54:30.290
So a lot of different types of
things that you might find

00:54:30.290 --> 00:54:31.100
interesting.

00:54:31.100 --> 00:54:35.100
So if you would like to check
it out, please do so.

00:54:35.100 --> 00:54:41.740
And I think this wraps it up for
today's episode of Google

00:54:41.740 --> 00:54:44.420
Developers Live and YouTube
Developers Live.

00:54:44.420 --> 00:54:45.700
Thank you very much
for your time.

00:54:45.700 --> 00:54:47.370
And we'll see you next week.

00:54:47.370 --> 00:54:52.071
10 o'clock AM, Wednesday,
Pacific.

00:54:52.071 --> 00:54:53.350
JEREMY WALKER: Thanks.

00:54:53.350 --> 00:54:54.250
JEFFREY POSNICK:
Bye, everybody.

00:54:54.250 --> 00:54:56.650
JAREK WILKIEWICZ: Bye.

00:54:56.650 --> 00:55:13.175
[MUSIC PLAYING]

