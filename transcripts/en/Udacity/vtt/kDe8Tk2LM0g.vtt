WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Okay. I hope you enjoyed that quite a bit.

00:00:02.000 --> 00:00:07.000
I hope there's a lot of great discussion going on in the forums over your solutions,

00:00:07.000 --> 00:00:12.000
and we can go ahead and take a look at mine real quick, which feel free to break this apart.

00:00:12.000 --> 00:00:14.000
There are issues with it and I invite you to find them.

00:00:14.000 --> 00:00:17.000
This is a very non-clever solution.

00:00:17.000 --> 00:00:20.000
First, it checks the type of the grid to make sure that it is a list

00:00:20.000 --> 00:00:25.000
and that the length of the list of list is 9.

00:00:25.000 --> 00:00:31.000
And for each row, we check the type of that and we check the length for that as well,

00:00:31.000 --> 00:00:33.000
and again, for all of these.

00:00:33.000 --> 00:00:38.000
This is basically just type checking and length checking over and over and over again

00:00:38.000 --> 00:00:42.000
for each different part that we need to make sure about first off.

00:00:42.000 --> 00:00:46.000
Now, check each piece of the sudoku puzzle separately,

00:00:46.000 --> 00:00:50.000
we don't try to check them all once in any kind of clever way.

00:00:50.000 --> 00:00:52.000
If you did that, then congratulations.

00:00:52.000 --> 00:00:57.000
First, we check the rows from 0 to 9 and we instantiate a dictionary

00:00:57.000 --> 00:00:59.000
and we check all the values.

00:00:59.000 --> 00:01:06.000
If the value isn't 0 and the value is already in d, in the dictionary,

00:01:06.000 --> 00:01:09.000
then we return false immediately because we've already found this in the row,

00:01:09.000 --> 00:01:14.000
so it shouldn't be there, we should only have this in there once,

00:01:14.000 --> 00:01:22.000
and then, we put the value in d if we don't return and move on.

00:01:22.000 --> 00:01:24.000
And we do the same thing for the columns.

00:01:24.000 --> 00:01:28.000
Okay, for checking the subgrids, we basically just do additional 4 loops.

00:01:28.000 --> 00:01:32.000
We do the same dictionary checking as we did for the rows and the columns,

00:01:32.000 --> 00:01:43.000
but now, we use i j, i i and j j, as a shifter to check the row and column spot for each of these,

00:01:43.000 --> 00:01:51.000
3 * i + i i shifts over to the appropriate subgrid and similarly for the columns with j and j j,

00:01:51.000 --> 00:01:55.000
and after that, the code is essentially identical.

00:01:55.000 --> 00:02:02.000
We just check the dictionary to see if we already have the relevant value in that subgrid.

00:02:02.000 --> 00:02:07.000
If we passed through all this without returning false, then we return true.

00:02:07.000 --> 00:02:11.000
Okay, and when we run the solution, we see that we get the same output

00:02:11.000 --> 00:02:15.000
that we're suppose to get for the five test cases that were given.

00:02:15.000 --> 00:02:18.000
So, go ahead and look at that.

00:02:18.000 --> 00:02:26.000
Like I said, there are issues with this code and I invite you to check it out on the forums

00:02:26.000 --> 00:02:34.000
and discuss how you would break this, particularly how you would break this

00:02:34.000 --> 00:02:38.000
with a random buzzer and what kind of problems a Sudoku checker

00:02:38.000 --> 00:02:42.000
might be vulnerable to with a good buzzing test.

00:02:42.000 --> 00:02:47.000
So, okay, great! See you in the forums.

