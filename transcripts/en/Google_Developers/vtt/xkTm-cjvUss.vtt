WEBVTT
Kind: captions
Language: en

00:00:04.170 --> 00:00:05.910
BILL LUAN: Shanghai
GDG is a very

00:00:05.910 --> 00:00:08.280
interesting developer community.

00:00:08.280 --> 00:00:08.810
FEMALE SPEAKER 1: I'm
glad somebody

00:00:08.810 --> 00:00:10.090
has asked this question.

00:00:10.090 --> 00:00:11.296
MALE SPEAKER 1: This is where
the magic happens.

00:00:11.296 --> 00:00:12.642
FEMALE SPEAKER 2: This is
primarily a question and

00:00:12.642 --> 00:00:12.947
answer show.

00:00:12.947 --> 00:00:15.410
So if any of you out there would
like to ask questions--

00:00:20.460 --> 00:00:21.890
MICHAEL MANOOCHEHRI:
All right.

00:00:21.890 --> 00:00:22.800
Hey, Google Developers.

00:00:22.800 --> 00:00:24.400
Welcome to The Michael
and Ryan Show.

00:00:24.400 --> 00:00:25.780
I'm Michael Manoochehri.

00:00:25.780 --> 00:00:26.870
RYAN BOYD: And I'm Ryan Boyd.

00:00:26.870 --> 00:00:27.960
MICHAEL MANOOCHEHRI: And we're
here to talk about some new

00:00:27.960 --> 00:00:30.080
features of Google BigQuery
as well as answer

00:00:30.080 --> 00:00:31.300
some of your questions.

00:00:31.300 --> 00:00:33.730
So if you have some questions
for us, visit us at our Google

00:00:33.730 --> 00:00:35.200
Developers Live page--

00:00:35.200 --> 00:00:37.750
that's
developers.google.com/live--

00:00:37.750 --> 00:00:40.230
and leave your question on
the Moderator link below.

00:00:40.230 --> 00:00:41.700
RYAN BOYD: And if you're seeing
a recording of this

00:00:41.700 --> 00:00:43.120
later, you can feel
free to ask your

00:00:43.120 --> 00:00:44.750
questions on Stack Overflow.

00:00:44.750 --> 00:00:46.580
Michael was just answering
some questions here--

00:00:46.580 --> 00:00:47.440
MICHAEL MANOOCHEHRI:
As I always am.

00:00:47.440 --> 00:00:48.720
RYAN BOYD: --as we were
preparing, so--

00:00:48.720 --> 00:00:50.970
MICHAEL MANOOCHEHRI: Use the
Google-BigQuery tag for that.

00:00:50.970 --> 00:00:51.370
Great.

00:00:51.370 --> 00:00:53.500
So if you've been following
our recent Google BigQuery

00:00:53.500 --> 00:00:56.120
blog posts, you know the theme
for this week is making

00:00:56.120 --> 00:00:57.290
BigQuery more flexible.

00:00:57.290 --> 00:00:59.360
So today we're going to start
by talking about some new

00:00:59.360 --> 00:01:02.040
features that we've just
recently launched to help make

00:01:02.040 --> 00:01:03.150
BigQuery more flexible.

00:01:03.150 --> 00:01:06.390
The first is the batch
processing for BigQuery, which

00:01:06.390 --> 00:01:09.620
allows a more flexible pricing
model for your queries.

00:01:09.620 --> 00:01:12.410
And the second is the Google
BigQuery connector for Excel,

00:01:12.410 --> 00:01:14.810
which will allow you to use it
in a more flexible environment

00:01:14.810 --> 00:01:15.550
such as spreadsheets.

00:01:15.550 --> 00:01:17.040
So we'll talk about
that later.

00:01:17.040 --> 00:01:18.290
So let's talk about the batch

00:01:18.290 --> 00:01:21.080
processing for Google BigQuery.

00:01:21.080 --> 00:01:23.870
So, you know, Google BigQuery
is great for interactive

00:01:23.870 --> 00:01:25.760
queries, so queries over
large data sets

00:01:25.760 --> 00:01:28.050
that return very fast.

00:01:28.050 --> 00:01:30.630
We found some customers using
Google BigQuery for batch

00:01:30.630 --> 00:01:34.230
processing as well, so queries
run overnight, queries that

00:01:34.230 --> 00:01:37.270
cache data for later use,
where interactivity is

00:01:37.270 --> 00:01:38.770
not the main goal.

00:01:38.770 --> 00:01:42.110
So we've introduced a new
feature for this use case at a

00:01:42.110 --> 00:01:45.080
much reduced price, which
is Google BigQuery Batch

00:01:45.080 --> 00:01:45.870
Processing.

00:01:45.870 --> 00:01:49.200
This allows you to set the
priority of a query to batch

00:01:49.200 --> 00:01:51.980
mode, which allows the
query to run later.

00:01:51.980 --> 00:01:54.510
So the query will be run
somewhere between 30 minutes

00:01:54.510 --> 00:01:58.920
and three hours after you
actually insert the query at a

00:01:58.920 --> 00:02:00.260
much reduced cost.

00:02:00.260 --> 00:02:04.050
This is great for applications
that have a data set and

00:02:04.050 --> 00:02:06.510
allows you to run queries either
interactively or in a

00:02:06.510 --> 00:02:10.139
batch mode, letting you build
much better applications for

00:02:10.139 --> 00:02:12.060
this kind of a use case.

00:02:12.060 --> 00:02:13.710
RYAN BOYD: Yeah, and it's
really easy to do.

00:02:13.710 --> 00:02:17.260
It's a simple new property in
your JSON configuration.

00:02:17.260 --> 00:02:20.520
You just specify the priority
mode as Batch, and our client

00:02:20.520 --> 00:02:22.560
libraries already support
this as well.

00:02:22.560 --> 00:02:24.480
So try it out.

00:02:24.480 --> 00:02:29.140
And I wanted to actually stop
over to our computer here and

00:02:29.140 --> 00:02:31.480
show you an example
of a dashboard.

00:02:31.480 --> 00:02:34.580
This is the BIME dashboard,
which shows some retail

00:02:34.580 --> 00:02:35.550
statistics.

00:02:35.550 --> 00:02:37.750
And this is the type of thing
that you might want to have

00:02:37.750 --> 00:02:41.330
some of the queries running in
batch mode while other of the

00:02:41.330 --> 00:02:44.920
queries run in sort of an
interactive manner.

00:02:44.920 --> 00:02:50.820
So this is a dashboard showing
the retail statistics, sales

00:02:50.820 --> 00:02:52.280
from a retail outlet.

00:02:52.280 --> 00:02:56.490
And a lot of different graphs
here going over--

00:02:56.490 --> 00:02:57.070
what do we have?

00:02:57.070 --> 00:02:59.230
Like 500,000 rows--

00:02:59.230 --> 00:02:59.860
whoops.

00:02:59.860 --> 00:03:01.060
Sorry for that.

00:03:01.060 --> 00:03:06.540
But going over a large number
of rows here, but overall--

00:03:06.540 --> 00:03:09.300
oh sorry, 500 million rows.

00:03:09.300 --> 00:03:12.910
And we have profit and discount
per category, top

00:03:12.910 --> 00:03:16.310
products per category, profit
in various ways.

00:03:16.310 --> 00:03:18.490
So these types of things you
might be able to calculate on

00:03:18.490 --> 00:03:20.870
a nightly basis in
this batch mode.

00:03:20.870 --> 00:03:25.240
Whereas maybe if you want to
allow users to drill down on

00:03:25.240 --> 00:03:28.840
certain bits of data, for
instance, the sales just over

00:03:28.840 --> 00:03:31.190
the last week or something like
that, you might want to

00:03:31.190 --> 00:03:36.170
have that running more live
against the live data set and

00:03:36.170 --> 00:03:39.110
allow people to drill down into
particular categories or

00:03:39.110 --> 00:03:41.520
drill down into particular
types of products

00:03:41.520 --> 00:03:42.360
and things like that.

00:03:42.360 --> 00:03:45.930
So this is one of those use
cases where you might want

00:03:45.930 --> 00:03:49.340
some things in batch and really
caching those query

00:03:49.340 --> 00:03:51.650
results and then other things
you want to perform live.

00:03:51.650 --> 00:03:53.120
MICHAEL MANOOCHEHRI: And on the
flip side, it's easy to

00:03:53.120 --> 00:03:54.300
make an application
that's actually

00:03:54.300 --> 00:03:55.370
doing more batch queries.

00:03:55.370 --> 00:03:57.390
And when you need that
interactive query immediately

00:03:57.390 --> 00:04:00.090
for a presentation or for some
kind of analysis, you can run

00:04:00.090 --> 00:04:01.060
them when you need them.

00:04:01.060 --> 00:04:03.570
So it really expands the types
of applications you can build

00:04:03.570 --> 00:04:05.040
with Google BigQuery.

00:04:05.040 --> 00:04:06.150
RYAN BOYD: Exactly.

00:04:06.150 --> 00:04:09.020
Now, I'm going to start talking
a little bit about the

00:04:09.020 --> 00:04:12.200
other feature that we launched,
which is the Google

00:04:12.200 --> 00:04:15.420
BigQuery connector for Excel.

00:04:15.420 --> 00:04:19.700
The BigQuery connector for
Excel is basically a tool

00:04:19.700 --> 00:04:21.380
which allows you to--

00:04:21.380 --> 00:04:23.480
let me hop over to it here.

00:04:23.480 --> 00:04:28.310
It allows you to basically pull
in your data into Excel

00:04:28.310 --> 00:04:29.720
from BigQuery.

00:04:29.720 --> 00:04:32.450
So you could run queries off
of hundreds of millions or

00:04:32.450 --> 00:04:36.730
billions of rows of data and
pull your aggregate results

00:04:36.730 --> 00:04:39.720
down into Excel for
further analysis.

00:04:39.720 --> 00:04:41.830
And this is very useful if
you're spending a lot of your

00:04:41.830 --> 00:04:45.220
time running data in Excel.

00:04:45.220 --> 00:04:49.460
We actually have had a feature
for a while now which allows

00:04:49.460 --> 00:04:53.350
you to do this type of thing
with Google Spreadsheets, with

00:04:53.350 --> 00:04:55.550
Google Apps Script and
Google Spreadsheets.

00:04:55.550 --> 00:04:57.970
And I'll show you that here
quickly before we dive too

00:04:57.970 --> 00:04:59.680
much into the Excel version.

00:04:59.680 --> 00:05:03.880
This is a dashboard I built
using Google Spreadsheets and

00:05:03.880 --> 00:05:06.070
Google Apps Script that
basically I can hit here.

00:05:06.070 --> 00:05:07.940
I can run the query.

00:05:07.940 --> 00:05:12.950
It dumps the results in from
BigQuery and then does a graph

00:05:12.950 --> 00:05:14.560
right here within Google
Spreadsheets.

00:05:14.560 --> 00:05:17.510
Well, we wanted to bring the
same capability to Excel

00:05:17.510 --> 00:05:21.170
users, and we've done that with
this BigQuery connector.

00:05:21.170 --> 00:05:22.420
You can find it at
bigquery-connector.appspot.com.

00:05:25.700 --> 00:05:28.660
And essentially what it is, is a
proxy server for your query.

00:05:28.660 --> 00:05:31.650
So when you run your queries
in Excel, it makes HTTP

00:05:31.650 --> 00:05:34.770
requests to the BigQuery
connector for Excel.

00:05:34.770 --> 00:05:38.240
And those HTTP requests then
gets translated into API calls

00:05:38.240 --> 00:05:39.870
to the BigQuery REST API.

00:05:39.870 --> 00:05:42.850
But it all happens seamlessly
for you as a user.

00:05:42.850 --> 00:05:44.850
There's just a few
setup processes,

00:05:44.850 --> 00:05:46.310
and it's really simple.

00:05:46.310 --> 00:05:49.660
So the first thing that you need
to do here is actually

00:05:49.660 --> 00:05:52.630
authorize the connector
for Excel.

00:05:52.630 --> 00:05:54.980
I've already granted OAuth
permission here, but if you

00:05:54.980 --> 00:05:56.670
haven't, you'll just
be prompted to

00:05:56.670 --> 00:05:58.110
approve OAuth request.

00:05:58.110 --> 00:06:01.310
And then you create this key.

00:06:01.310 --> 00:06:03.700
And this key is a value that
you'll just need to copy and

00:06:03.700 --> 00:06:06.050
paste into Excel.

00:06:06.050 --> 00:06:07.310
So we going to do that
here in a second.

00:06:07.310 --> 00:06:08.620
But the other thing
you want to do is

00:06:08.620 --> 00:06:10.720
download this IQY file.

00:06:10.720 --> 00:06:14.630
And the IQY file is really just
a configuration file that

00:06:14.630 --> 00:06:17.970
tells Excel the information
that it needs in order to

00:06:17.970 --> 00:06:20.690
query against the BigQuery
connector.

00:06:20.690 --> 00:06:24.970
So we're going to hop over into
Excel here a second and

00:06:24.970 --> 00:06:27.330
show you how some of
this stuff is used.

00:06:27.330 --> 00:06:30.640
So I'm going to actually
run a query here.

00:06:30.640 --> 00:06:34.540
The query is going to be
against the US birth

00:06:34.540 --> 00:06:38.950
statistics data, so all the
births since 1969 in the

00:06:38.950 --> 00:06:40.300
United States.

00:06:40.300 --> 00:06:42.770
It's, I think, 137
million rows.

00:06:42.770 --> 00:06:43.590
MICHAEL MANOOCHEHRI: It's
a pretty big data set.

00:06:43.590 --> 00:06:44.730
RYAN BOYD: Yeah, it's
pretty big.

00:06:44.730 --> 00:06:47.510
It's still small by BigQuery
standards, but it's a great

00:06:47.510 --> 00:06:48.820
demonstration data set.

00:06:48.820 --> 00:06:51.210
So I'm going to run
that query.

00:06:51.210 --> 00:06:55.520
And I've actually templatized
that query a little bit in a

00:06:55.520 --> 00:06:58.610
similar way to what you
could do in Excel.

00:06:58.610 --> 00:07:00.770
And I've put in here additional
fields, average

00:07:00.770 --> 00:07:04.030
mother age, and then I have
this full query here.

00:07:04.030 --> 00:07:08.830
So let's show you how we
would run the query.

00:07:08.830 --> 00:07:11.970
We're going to need a few
bits of data for setup.

00:07:11.970 --> 00:07:15.270
But I'm going to go to the Data
menu here and say Get

00:07:15.270 --> 00:07:20.290
External Data and say
Run Saved Query.

00:07:20.290 --> 00:07:23.260
And then I'm going to select
that IQY file that is in my

00:07:23.260 --> 00:07:25.140
Downloads folder.

00:07:25.140 --> 00:07:29.470
So the IQY file is right
here, connector.iqy.

00:07:29.470 --> 00:07:31.890
And I'm going to say Get Data.

00:07:31.890 --> 00:07:33.720
And it's going to ask where I
want to put the data, and I

00:07:33.720 --> 00:07:36.210
want to put the data
into a new sheet.

00:07:36.210 --> 00:07:38.840
And I want to set up the
parameters that are required

00:07:38.840 --> 00:07:40.960
to connect to the connector.

00:07:40.960 --> 00:07:44.090
The parameters are the query
itself, which I'm going to get

00:07:44.090 --> 00:07:47.320
the value from this cell.

00:07:47.320 --> 00:07:49.870
Then the Project ID, and
the Project ID is also

00:07:49.870 --> 00:07:50.760
pretty easy to get.

00:07:50.760 --> 00:07:55.260
We can get that from the
BigQuery UI here.

00:07:55.260 --> 00:07:56.620
So I have the Project ID.

00:07:56.620 --> 00:08:01.920
It comes up in a hover, and I
can copy and paste that, and

00:08:01.920 --> 00:08:04.760
enter in the value
in this box here.

00:08:04.760 --> 00:08:10.820
And then the key is that
generated key that we use to

00:08:10.820 --> 00:08:14.240
pass our authorization over to
the BigQuery connector, sort

00:08:14.240 --> 00:08:15.900
of copy that in.

00:08:18.540 --> 00:08:20.660
And I'm going to hit OK.

00:08:20.660 --> 00:08:23.210
And again, we are saying
populate the data into the new

00:08:23.210 --> 00:08:24.710
sheet, run that query.

00:08:24.710 --> 00:08:31.190
So this query is going to get us
the state and year of every

00:08:31.190 --> 00:08:39.289
birth, but aggregated, based off
of the average age of the

00:08:39.289 --> 00:08:41.799
mother when the child
was born.

00:08:41.799 --> 00:08:43.110
MICHAEL MANOOCHEHRI:And this is
doing a table scan of how

00:08:43.110 --> 00:08:44.200
many records, did you say?

00:08:44.200 --> 00:08:45.410
RYAN BOYD: I think it
was 137 million.

00:08:45.410 --> 00:08:46.990
MICHAEL MANOOCHEHRI: 137
million records.

00:08:46.990 --> 00:08:48.450
RYAN BOYD: We'll actually show
you running the query in the

00:08:48.450 --> 00:08:50.410
BigQuery UI here a second.

00:08:50.410 --> 00:08:52.550
You'll see some more
statistics data.

00:08:52.550 --> 00:08:58.680
But let's make this a little
bit larger for you here.

00:08:58.680 --> 00:08:59.760
So here's the data.

00:08:59.760 --> 00:09:05.710
And it's basically every state
and the year, and then what

00:09:05.710 --> 00:09:09.250
the average age of the mother's
birth in that state

00:09:09.250 --> 00:09:10.310
in that year.

00:09:10.310 --> 00:09:11.690
So that's really simple.

00:09:11.690 --> 00:09:13.540
Now let's just say we wanted
to change this because I

00:09:13.540 --> 00:09:16.300
actually want the average weight
of the babies rather

00:09:16.300 --> 00:09:18.180
than the average age
of the mother.

00:09:18.180 --> 00:09:21.240
So I'm going to hop over to
this first sheet here.

00:09:21.240 --> 00:09:23.440
And I'm going to change
this to, say,

00:09:23.440 --> 00:09:26.620
average weight pounds.

00:09:26.620 --> 00:09:29.140
And you could, of course, get
these values, build these

00:09:29.140 --> 00:09:32.660
values up from a--

00:09:32.660 --> 00:09:36.980
you can build these
values up from a--

00:09:36.980 --> 00:09:37.450
sorry.

00:09:37.450 --> 00:09:39.110
It looks like we had a little
bit of a glitch

00:09:39.110 --> 00:09:40.700
here with my sharing.

00:09:40.700 --> 00:09:48.220
So you could build these values
up from other fields

00:09:48.220 --> 00:09:49.650
within your Excel spreadsheet.

00:09:49.650 --> 00:09:50.170
So--

00:09:50.170 --> 00:09:51.570
MICHAEL MANOOCHEHRI: So using
some of the features of your

00:09:51.570 --> 00:09:54.460
Excel spreadsheet, you can
actually incorporate that into

00:09:54.460 --> 00:09:55.810
the query that you're
running now.

00:09:55.810 --> 00:09:56.630
RYAN BOYD: Exactly.

00:09:56.630 --> 00:10:00.090
So I'm going to hop over here,
and I need to reshare my

00:10:00.090 --> 00:10:01.120
presentation window.

00:10:01.120 --> 00:10:03.170
It looks like we had a little
bit of a glitch here, but let

00:10:03.170 --> 00:10:05.400
me do that.

00:10:05.400 --> 00:10:06.310
MICHAEL MANOOCHEHRI: So while
we're doing that-- yeah, I

00:10:06.310 --> 00:10:08.420
think it's great that for both
of these applications with

00:10:08.420 --> 00:10:11.210
Google Spreadsheets or Excel,
it lets you use what you're

00:10:11.210 --> 00:10:13.690
used to for analysis with
Google BigQuery.

00:10:25.110 --> 00:10:27.290
RYAN BOYD: So, for example, like
in there, I built up the

00:10:27.290 --> 00:10:30.320
formula, and I just did a simple
Replace on the fields

00:10:30.320 --> 00:10:33.510
that I was trying to substitute
in the formula.

00:10:33.510 --> 00:10:34.950
And that was pretty easy.

00:10:34.950 --> 00:10:38.700
But you might want to actually
do something more complicated,

00:10:38.700 --> 00:10:42.130
where you're using the built-in
Excel functions and

00:10:42.130 --> 00:10:44.970
accepting the analyst input
because not all analysts will

00:10:44.970 --> 00:10:50.370
necessarily know
how to use SQL.

00:10:50.370 --> 00:10:53.210
But as long as you can set up
this initial spreadsheet for

00:10:53.210 --> 00:10:59.360
them with SQL, it's fairly
easy for you to do then.

00:10:59.360 --> 00:11:01.030
And I'm hoping I can--

00:11:01.030 --> 00:11:01.800
yeah, here we go.

00:11:01.800 --> 00:11:07.960
So I'm going to reshare
my screen here.

00:11:07.960 --> 00:11:09.210
MICHAEL MANOOCHEHRI: All
right, looks good.

00:11:14.420 --> 00:11:15.670
RYAN BOYD: There we go.

00:11:15.670 --> 00:11:17.460
I've reshared my screen,
and let's hop

00:11:17.460 --> 00:11:20.880
back over into Excel.

00:11:20.880 --> 00:11:22.980
Sorry about that little
glitch here.

00:11:22.980 --> 00:11:23.980
So here's my query.

00:11:23.980 --> 00:11:27.000
So I wanted to modify this to
say the average weight in

00:11:27.000 --> 00:11:29.650
pounds instead of the average
mother's age.

00:11:29.650 --> 00:11:33.970
So I've modified just this
field here quickly.

00:11:33.970 --> 00:11:37.780
And you could specify any
the other fields that

00:11:37.780 --> 00:11:39.350
are part of the table.

00:11:39.350 --> 00:11:40.310
But I modified that.

00:11:40.310 --> 00:11:45.050
And then I'm just going to go
over to the Data tab here and

00:11:45.050 --> 00:11:46.530
just say Refresh.

00:11:46.530 --> 00:11:54.590
And if we hop over to our sheet,
we can see we had the

00:11:54.590 --> 00:11:58.000
mother's age when they
gave birth broken

00:11:58.000 --> 00:11:59.570
down by year and state.

00:11:59.570 --> 00:12:04.870
And when this refreshes here,
instead of the mother's age,

00:12:04.870 --> 00:12:06.030
we're going to get
the birth weight.

00:12:06.030 --> 00:12:09.810
So we'll see here-- and it's a
little small again for you, so

00:12:09.810 --> 00:12:11.060
I'll enlarge it.

00:12:13.860 --> 00:12:16.810
And let's see here.

00:12:16.810 --> 00:12:19.530
So we can see that refreshed
it in really easy.

00:12:19.530 --> 00:12:22.540
All I had to do was press one
button to refresh that

00:12:22.540 --> 00:12:23.650
information.

00:12:23.650 --> 00:12:25.350
That was very simple.

00:12:25.350 --> 00:12:28.690
If you're actually using the
Windows version of Excel, you

00:12:28.690 --> 00:12:30.620
can actually set up
dependent fields.

00:12:30.620 --> 00:12:34.100
So you can basically say, if the
fields that were used to

00:12:34.100 --> 00:12:37.480
build up the query change at
all, you can ask it to

00:12:37.480 --> 00:12:38.685
automatically refresh.

00:12:38.685 --> 00:12:40.100
So there's none of that
manual refreshing.

00:12:40.100 --> 00:12:41.280
MICHAEL MANOOCHEHRI: So that
was the same data set, the

00:12:41.280 --> 00:12:43.140
same original 100 and something

00:12:43.140 --> 00:12:44.490
million record data set.

00:12:44.490 --> 00:12:47.670
You just changed one parameter
and re-run the query.

00:12:47.670 --> 00:12:48.240
RYAN BOYD: Exactly.

00:12:48.240 --> 00:12:50.170
And it was really easy
for us to do.

00:12:50.170 --> 00:12:53.750
But, you know, we can run this
type of query directly in the

00:12:53.750 --> 00:12:55.050
BigQuery UI, right?

00:12:55.050 --> 00:12:57.470
You know, just getting this
data, and you can see

00:12:57.470 --> 00:12:58.530
I ran it over here.

00:12:58.530 --> 00:13:01.240
It took about seven seconds,
processed 2 and 1/2

00:13:01.240 --> 00:13:03.840
gigabytes of data.

00:13:03.840 --> 00:13:07.310
So that was pretty simple to
run within the BigQuery UI.

00:13:07.310 --> 00:13:10.650
But the advantage of Excel is
the analysis that you could do

00:13:10.650 --> 00:13:11.820
after you run the query.

00:13:11.820 --> 00:13:16.580
So let's say that I want to take
this data and I want to

00:13:16.580 --> 00:13:19.070
go over and do a pivot table.

00:13:19.070 --> 00:13:21.980
So I just say Pivot Table.

00:13:21.980 --> 00:13:25.210
And it creates the
pivot table here.

00:13:25.210 --> 00:13:29.060
And then what I can do is,
this is just the count to

00:13:29.060 --> 00:13:29.560
start with.

00:13:29.560 --> 00:13:31.680
Let's just change this
to be the average

00:13:31.680 --> 00:13:33.480
instead of the count.

00:13:33.480 --> 00:13:37.620
And so now we can see here for
every single state, this

00:13:37.620 --> 00:13:44.040
massive table that shows you
what the weight of the babies

00:13:44.040 --> 00:13:46.990
were in that state broken
down by year.

00:13:46.990 --> 00:13:49.680
But if we want to take this from
a pivot table and take it

00:13:49.680 --> 00:13:53.840
into a chart, a chart might be
more easy for some people to

00:13:53.840 --> 00:13:56.210
read although I don't want
to chart out every state.

00:13:56.210 --> 00:14:00.890
So let's limit here to just
pick a few states.

00:14:00.890 --> 00:14:06.050
So we'll pick California,
Colorado, Alaska.

00:14:06.050 --> 00:14:07.460
Let's pick Alaska.

00:14:07.460 --> 00:14:09.270
MICHAEL MANOOCHEHRI: That
sounds pretty good.

00:14:09.270 --> 00:14:11.760
RYAN BOYD: And so just
a few states here.

00:14:11.760 --> 00:14:14.420
And I don't know--

00:14:14.420 --> 00:14:15.120
Louisiana.

00:14:15.120 --> 00:14:16.930
And we'll pick a few
states here.

00:14:16.930 --> 00:14:19.630
And now we're going to take this
and make it into a graph.

00:14:19.630 --> 00:14:24.440
So I have that data, and now
let's take here, and we'll

00:14:24.440 --> 00:14:27.825
just say Charts, and we'll
say Align Charts.

00:14:30.890 --> 00:14:33.830
And it looks like I actually
selected a value here, so that

00:14:33.830 --> 00:14:35.360
didn't quite work out.

00:14:35.360 --> 00:14:44.150
So let me recreate this
here without me

00:14:44.150 --> 00:14:45.450
having selected a value.

00:14:45.450 --> 00:14:48.016
So we just say Line Chart.

00:14:48.016 --> 00:14:49.165
This is going to work.

00:14:49.165 --> 00:14:49.460
MICHAEL MANOOCHEHRI:
There it is.

00:14:49.460 --> 00:14:50.010
RYAN BOYD: All right.

00:14:50.010 --> 00:14:51.380
There we go.

00:14:51.380 --> 00:14:53.040
So here we have our graph.

00:14:53.040 --> 00:14:58.430
And these are aggregate results,
but the source data

00:14:58.430 --> 00:15:01.160
is over 100 million
rows of data.

00:15:01.160 --> 00:15:02.300
So it's pretty fantastic.

00:15:02.300 --> 00:15:03.280
MICHAEL MANOOCHEHRI:
So with very little

00:15:03.280 --> 00:15:05.470
SQL, actually no SQL.

00:15:05.470 --> 00:15:06.220
No SQL is coming out.

00:15:06.220 --> 00:15:08.450
You've actually been able to
pull all the data from

00:15:08.450 --> 00:15:11.630
BigQuery into a pivot table and
chart it, just using what

00:15:11.630 --> 00:15:12.870
you normally are used
to in these

00:15:12.870 --> 00:15:14.120
spreadsheet tools like Excel.

00:15:14.120 --> 00:15:16.400
RYAN BOYD: Yeah, I mean, I did
create that initial SQL, but

00:15:16.400 --> 00:15:19.280
for the analyst, you know, the
IT person can create the SQL

00:15:19.280 --> 00:15:21.070
and the analyst can just
plug-in the fields that

00:15:21.070 --> 00:15:21.910
they're interested in.

00:15:21.910 --> 00:15:23.360
And it's really easy.

00:15:23.360 --> 00:15:28.710
And we can then look down and
see hey, we have 7.6 or so

00:15:28.710 --> 00:15:32.490
pounds per baby in Alaska.

00:15:32.490 --> 00:15:34.310
But then if we go down
and see Colorado, it

00:15:34.310 --> 00:15:36.190
looks like about 7.1.

00:15:36.190 --> 00:15:37.065
So--

00:15:37.065 --> 00:15:37.895
MICHAEL MANOOCHEHRI: You know
what I'm about to say.

00:15:37.895 --> 00:15:38.640
Is that statistically
significant?

00:15:38.640 --> 00:15:39.945
RYAN BOYD: Yeah, it's not
statistically significant.

00:15:39.945 --> 00:15:41.100
MICHAEL MANOOCHEHRI:
We don't know.

00:15:41.100 --> 00:15:41.970
RYAN BOYD: I don't know.

00:15:41.970 --> 00:15:44.650
So you could talk to the CDC or
talk to Michael if you're

00:15:44.650 --> 00:15:45.490
trying to figure out
whether this is--

00:15:45.490 --> 00:15:46.965
MICHAEL MANOOCHEHRI: Export your
data and run it in R. You

00:15:46.965 --> 00:15:47.810
can do all kinds of stuff
with this data.

00:15:47.810 --> 00:15:49.600
RYAN BOYD: Yeah, exactly.

00:15:49.600 --> 00:15:52.710
So we can see here, we are able
to really easily pull in

00:15:52.710 --> 00:15:56.260
data, run data, run huge
queries on large

00:15:56.260 --> 00:15:57.780
data sets in BigQuery--

00:15:57.780 --> 00:16:01.860
pull the results into Excel,
throw them into pivot tables,

00:16:01.860 --> 00:16:02.950
throw them into graphs.

00:16:02.950 --> 00:16:04.970
It's a really powerful
feature.

00:16:04.970 --> 00:16:05.360
MICHAEL MANOOCHEHRI: Right.

00:16:05.360 --> 00:16:07.740
I love this idea of using the
workflows you're used to and

00:16:07.740 --> 00:16:08.890
using the power of
BigQuery for what

00:16:08.890 --> 00:16:10.300
it's good at, so great.

00:16:10.300 --> 00:16:12.780
We'd love to get your feedback
on some of these new features.

00:16:12.780 --> 00:16:15.530
And a great way to get the
feedback to us is to join our

00:16:15.530 --> 00:16:17.610
circle, our new Google
Cloud Platform

00:16:17.610 --> 00:16:19.560
Developers Google+ page.

00:16:19.560 --> 00:16:21.870
So if you search now for Google
Platform Developers in

00:16:21.870 --> 00:16:23.350
Google+, you'll find our page.

00:16:23.350 --> 00:16:25.080
Please add us to your circles.

00:16:25.080 --> 00:16:27.900
You can actually comment
on our threads.

00:16:27.900 --> 00:16:30.510
We post a lot of things that
are coming up, for example,

00:16:30.510 --> 00:16:33.000
some new events that we're
going to be at and some

00:16:33.000 --> 00:16:34.440
upcoming conferences.

00:16:34.440 --> 00:16:36.140
So let's talk about
some of those.

00:16:36.140 --> 00:16:38.280
So Ryan, can you talk about some
of the conferences you've

00:16:38.280 --> 00:16:40.740
been to or you're going to
be at in the near future.

00:16:40.740 --> 00:16:41.080
RYAN BOYD: Yeah.

00:16:41.080 --> 00:16:44.690
I recently just did a conference
or actually a local

00:16:44.690 --> 00:16:47.010
meetup last weekend
on Saturday.

00:16:47.010 --> 00:16:48.450
It was a great event.

00:16:48.450 --> 00:16:49.930
It went a lot of the
day on Saturday.

00:16:49.930 --> 00:16:55.450
But it was a big data science
meetup, and it was in Fremont,

00:16:55.450 --> 00:16:59.270
But at the SGI building in
Fremont, and it was fantastic.

00:16:59.270 --> 00:17:02.370
We had three separate speakers,
and those three

00:17:02.370 --> 00:17:06.390
speakers were myself, as well
as some folks from Zementis

00:17:06.390 --> 00:17:09.030
and Pervasive, all talking
about some big data

00:17:09.030 --> 00:17:12.940
technologies everywhere, from
kind of predictive modeling to

00:17:12.940 --> 00:17:18.000
ETL to running queries using
a tool like BigQuery.

00:17:18.000 --> 00:17:20.640
And it was a fantastic event.

00:17:20.640 --> 00:17:21.770
The meetup has only
been going--

00:17:21.770 --> 00:17:24.310
I think this was the sixth
session of the meetup, but

00:17:24.310 --> 00:17:27.160
very well organized, and
they had over 60

00:17:27.160 --> 00:17:28.099
people at the event.

00:17:28.099 --> 00:17:30.610
So it's great to go to
these local meetups.

00:17:30.610 --> 00:17:32.160
Let us know if you're
an organizer.

00:17:32.160 --> 00:17:34.390
Let us know what types of
meetups you're having.

00:17:34.390 --> 00:17:35.200
Reach out to us.

00:17:35.200 --> 00:17:39.360
It's possible we may
be able to attend.

00:17:39.360 --> 00:17:40.570
So that's just one
of the meetups.

00:17:40.570 --> 00:17:40.980
But then--

00:17:40.980 --> 00:17:41.090
MICHAEL MANOOCHEHRI:
We'll definitey

00:17:41.090 --> 00:17:41.980
see that group again.

00:17:41.980 --> 00:17:42.820
RYAN BOYD: Yeah, exactly.

00:17:42.820 --> 00:17:44.920
And coming up, we have a
couple other events.

00:17:44.920 --> 00:17:48.060
So I think next week,
we have the--

00:17:48.060 --> 00:17:51.600
I believe it's on the fifth--
the Google Developer Groups in

00:17:51.600 --> 00:17:54.730
Silicon Valley, and the Google
Developer Group in Silicon

00:17:54.730 --> 00:17:59.790
Valley is hosting myself to talk
about BigQuery and answer

00:17:59.790 --> 00:18:02.280
questions that you have
as developers.

00:18:02.280 --> 00:18:05.060
And fortunately, it's turned
into a rather popular event,

00:18:05.060 --> 00:18:06.500
fortunately or unfortunately,
however you

00:18:06.500 --> 00:18:07.560
want to look at it.

00:18:07.560 --> 00:18:11.190
So it's fully booked, but get
on the wait list and maybe

00:18:11.190 --> 00:18:13.110
you'll be able to get in.

00:18:13.110 --> 00:18:13.960
But that should be great.

00:18:13.960 --> 00:18:17.290
And then after that, the
following week we have the

00:18:17.290 --> 00:18:19.970
XLDB Conference in Stanford.

00:18:19.970 --> 00:18:24.590
And I'll be speaking there about
BigQuery to a group of

00:18:24.590 --> 00:18:26.680
hardcore scientists.

00:18:26.680 --> 00:18:29.610
So hopefully I don't disappoint
them, but--

00:18:29.610 --> 00:18:31.900
anyway, Michael, I guess we have
some other events coming

00:18:31.900 --> 00:18:32.910
up in the fall too, right?

00:18:32.910 --> 00:18:33.470
MICHAEL MANOOCHEHRI: I was just
about to say we're both

00:18:33.470 --> 00:18:35.670
going to be at the upcoming
Strata conferences.

00:18:35.670 --> 00:18:37.890
One is in London at the
beginning of October, October

00:18:37.890 --> 00:18:40.010
first and second, and there's
a Strata Conference in New

00:18:40.010 --> 00:18:41.920
York at the end of October.

00:18:41.920 --> 00:18:44.010
So at Strata London,
Ryan's going to be

00:18:44.010 --> 00:18:45.370
talking about BigQuery.

00:18:45.370 --> 00:18:47.480
And we're going to have Kathryn
Brisbin, another one

00:18:47.480 --> 00:18:49.330
of our teammates, talk about
data journalism and data

00:18:49.330 --> 00:18:49.970
gathering there.

00:18:49.970 --> 00:18:51.220
So that'll be really exciting.

00:18:51.220 --> 00:18:53.290
We're also planning on some
community events around that

00:18:53.290 --> 00:18:56.390
time with the London GDG group
and some other groups.

00:18:56.390 --> 00:18:59.270
So follow our Cloud Platform
Developers page for more

00:18:59.270 --> 00:19:00.540
information about that.

00:19:00.540 --> 00:19:02.460
And I will be speaking
at Strata New

00:19:02.460 --> 00:19:03.820
York along with Kathryn.

00:19:03.820 --> 00:19:06.140
We'll also have a talk about
using BigQuery with GitHub

00:19:06.140 --> 00:19:08.100
data, which is very exciting.

00:19:08.100 --> 00:19:10.940
And Ryan, you have some
community events around the

00:19:10.940 --> 00:19:12.340
time on the East
coast as well.

00:19:12.340 --> 00:19:12.950
RYAN BOYD: Yeah, exactly.

00:19:12.950 --> 00:19:16.770
So we've worked with some of
the community organizers to

00:19:16.770 --> 00:19:23.860
plan some events over in both
Boston and New York, so local

00:19:23.860 --> 00:19:28.230
Google developer groups in
Boston and New York, and that

00:19:28.230 --> 00:19:29.530
should be fantastic as well.

00:19:29.530 --> 00:19:32.190
So let us know if you have other
opportunities for us.

00:19:32.190 --> 00:19:36.630
We're happy to look at our
travel schedule and see if we

00:19:36.630 --> 00:19:37.500
can fit those in.

00:19:37.500 --> 00:19:39.510
But there should be
some great events.

00:19:39.510 --> 00:19:42.500
MICHAEL MANOOCHEHRI: We'd love
to see you guys there.

00:19:42.500 --> 00:19:44.520
RYAN BOYD: So this has
been fantastic.

00:19:44.520 --> 00:19:48.090
I hope you have enjoyed some of
our new features that we've

00:19:48.090 --> 00:19:51.280
been launching in BigQuery.

00:19:51.280 --> 00:19:53.980
Let's actually jump over.

00:19:53.980 --> 00:19:55.840
We actually do have
some questions

00:19:55.840 --> 00:19:58.850
over here on our Moderator.

00:19:58.850 --> 00:20:01.390
So if you're trying to get into
the Moderator, you can

00:20:01.390 --> 00:20:05.550
look at Google Developers Live
page, and you can click on our

00:20:05.550 --> 00:20:07.320
event on the Google Developers
Live page if you're not

00:20:07.320 --> 00:20:09.550
already on that page.

00:20:09.550 --> 00:20:11.430
And you can see the
Moderator below.

00:20:11.430 --> 00:20:13.380
And we have a couple
questions here.

00:20:13.380 --> 00:20:18.240
The top question coming in here
is, "Could you also point

00:20:18.240 --> 00:20:22.900
out scale-wise where you will
use BigQuery versus Google

00:20:22.900 --> 00:20:27.270
Cloud SQL?" So we're happy
to talk about that.

00:20:27.270 --> 00:20:31.560
Google Cloud SQL is our
MySQL-based solution that runs

00:20:31.560 --> 00:20:32.880
in the cloud.

00:20:32.880 --> 00:20:36.140
It's a really simple kind of
database offered as a service

00:20:36.140 --> 00:20:40.190
that you can use from App Engine
and maybe even from

00:20:40.190 --> 00:20:41.680
some other environments.

00:20:41.680 --> 00:20:44.240
But basically, it's
a MySQL database.

00:20:44.240 --> 00:20:46.660
It's a relational database.

00:20:46.660 --> 00:20:49.400
So from a scale perspective,
it's not going to have the

00:20:49.400 --> 00:20:52.020
same scaling properties as
something like BigQuery.

00:20:52.020 --> 00:20:55.140
So let's just give you some
basic properties of these

00:20:55.140 --> 00:20:57.920
different types of databases.

00:20:57.920 --> 00:21:03.720
Your standard relational
databases use indexes to find

00:21:03.720 --> 00:21:05.350
results quickly.

00:21:05.350 --> 00:21:08.500
And indexes are fantastic if
what you're looking for is

00:21:08.500 --> 00:21:10.450
available in that index.

00:21:10.450 --> 00:21:13.270
You can get fairly
quick results.

00:21:13.270 --> 00:21:16.050
But indexes have two properties
which aren't so

00:21:16.050 --> 00:21:17.730
good, and one is that
it takes a while to

00:21:17.730 --> 00:21:19.080
build up the indexes.

00:21:19.080 --> 00:21:21.030
So as you ingest the data,
it takes a while

00:21:21.030 --> 00:21:22.500
to build those up.

00:21:22.500 --> 00:21:24.630
But then secondly, if you're
trying to do large-scale

00:21:24.630 --> 00:21:29.700
aggregate data in an ad hoc
fashion, you don't necessarily

00:21:29.700 --> 00:21:31.800
know what columns you're trying
to query against or

00:21:31.800 --> 00:21:34.180
what sort of aggregates
you're looking for.

00:21:34.180 --> 00:21:36.770
And the aggregates oftentimes
are kind of impossible to

00:21:36.770 --> 00:21:38.800
really include in the indexes.

00:21:38.800 --> 00:21:39.930
MICHAEL MANOOCHEHRI: You end
up running table scans for

00:21:39.930 --> 00:21:42.060
some of these things, over
enormous amounts of tables

00:21:42.060 --> 00:21:43.080
with lots of links.

00:21:43.080 --> 00:21:43.960
RYAN BOYD: Yeah, exactly.

00:21:43.960 --> 00:21:47.250
So full table scans used to be
considered kind of the devil.

00:21:47.250 --> 00:21:49.240
MICHAEL MANOOCHEHRI: Right.

00:21:49.240 --> 00:21:52.830
RYAN BOYD: We have this quote
from our Google I/O

00:21:52.830 --> 00:21:55.270
presentations, one of our
colleagues, Jordan, who

00:21:55.270 --> 00:22:00.190
basically said a quote from a
16th century French-Italian

00:22:00.190 --> 00:22:03.820
philosopher or something like
that, where he's like, if

00:22:03.820 --> 00:22:07.150
you're running over a full table
scan over hundreds of

00:22:07.150 --> 00:22:10.070
millions of rows, you're going
to have a bad time.

00:22:10.070 --> 00:22:12.030
And typically that's
how it is.

00:22:12.030 --> 00:22:16.070
But BigQuery actually does full
table scans, and it's

00:22:16.070 --> 00:22:17.840
designed to do full
table scans.

00:22:17.840 --> 00:22:20.540
Pretty much every query you run
against BigQuery does a

00:22:20.540 --> 00:22:25.250
full table scan, but since we
can distribute that over tens,

00:22:25.250 --> 00:22:29.020
hundreds of machines around the
world, those queries can

00:22:29.020 --> 00:22:31.680
still run really quickly even
though they're doing a full

00:22:31.680 --> 00:22:32.220
table scan.

00:22:32.220 --> 00:22:34.790
Each machine is only processing
a very small chunk

00:22:34.790 --> 00:22:38.230
of data, so it allows us to do
the full table scans quickly.

00:22:38.230 --> 00:22:42.090
So I would say use Google Cloud
SQL if you're trying to

00:22:42.090 --> 00:22:48.520
power your web application
for just sort of--

00:22:48.520 --> 00:22:50.965
let's say you have an online
forum or something like that

00:22:50.965 --> 00:22:52.170
and you want to power that.

00:22:52.170 --> 00:22:54.040
You need a lot of write
capabilities.

00:22:54.040 --> 00:22:55.910
You need to update data.

00:22:55.910 --> 00:22:59.230
You need to insert new data,
add and delete columns.

00:22:59.230 --> 00:23:01.420
Cloud SQL would be really
good for that.

00:23:01.420 --> 00:23:04.800
But if you really need to do the
performance of large-scale

00:23:04.800 --> 00:23:07.270
analytics, that's where
BigQuery comes in.

00:23:07.270 --> 00:23:11.370
BigQuery doesn't allow you
to modify the data.

00:23:11.370 --> 00:23:13.990
It allows you to insert
new data.

00:23:13.990 --> 00:23:17.980
But then you can run queries
over it much, much faster.

00:23:17.980 --> 00:23:19.690
MICHAEL MANOOCHEHRI: And I think
of it that way, too.

00:23:19.690 --> 00:23:22.700
Cloud SQL or SQL in general is
great for transactional data,

00:23:22.700 --> 00:23:24.640
maintaining state about
a database.

00:23:24.640 --> 00:23:26.980
BigQuery is really great for
asking questions about large

00:23:26.980 --> 00:23:27.840
data sets, right?

00:23:27.840 --> 00:23:29.920
So it's really great as
an analysis tool.

00:23:29.920 --> 00:23:32.390
It's not designed to be
a relational database.

00:23:32.390 --> 00:23:35.230
It's designed for aggregate
queries, asking questions, and

00:23:35.230 --> 00:23:37.910
dealing with data sizes that
are massive, that a SQL

00:23:37.910 --> 00:23:39.820
database just can't
handle very well.

00:23:39.820 --> 00:23:41.450
RYAN BOYD: Yeah, and I mean,
typically, you actually

00:23:41.450 --> 00:23:44.050
denormalize your data for
BigQuery just to get that

00:23:44.050 --> 00:23:46.950
additional performance gained
by not having to scan over

00:23:46.950 --> 00:23:47.675
multiple tables.

00:23:47.675 --> 00:23:49.050
MICHAEL MANOOCHEHRI: Right.

00:23:49.050 --> 00:23:51.870
And it seems like it leads well
into the next question,

00:23:51.870 --> 00:23:53.250
which is a very similar
question.

00:23:53.250 --> 00:23:53.830
So the question there--

00:23:53.830 --> 00:23:54.360
RYAN BOYD: Yeah.

00:23:54.360 --> 00:23:55.100
Sorry, one second.

00:23:55.100 --> 00:23:59.000
But I just wanted to address
with MySQL that usually you

00:23:59.000 --> 00:24:00.480
can use these technologies
together.

00:24:00.480 --> 00:24:03.140
So don't think of it as you have
to use one or the other.

00:24:03.140 --> 00:24:04.675
You really think about
using them together.

00:24:04.675 --> 00:24:07.170
And we have a lot of our
customers that dump data out

00:24:07.170 --> 00:24:10.800
of relational databases into
BigQuery before analysis.

00:24:10.800 --> 00:24:11.440
MICHAEL MANOOCHEHRI: Right.

00:24:11.440 --> 00:24:12.670
So let's take a look at
the next question.

00:24:12.670 --> 00:24:14.670
So the next question is just
what Ryan was talking about.

00:24:14.670 --> 00:24:16.880
"Can this sit on top of a MySQL
database, and can it

00:24:16.880 --> 00:24:19.350
replace Lucene for querying?"
So yes, I've used all these

00:24:19.350 --> 00:24:20.270
technologies together, too.

00:24:20.270 --> 00:24:22.580
So just as Ryan said, typically
in a workflow like

00:24:22.580 --> 00:24:24.690
this where you're using a MySQL
database for things like

00:24:24.690 --> 00:24:26.710
transactional data and the
kind of things you would

00:24:26.710 --> 00:24:29.480
normally use a SQL-style
database for, you would

00:24:29.480 --> 00:24:33.320
actually export the data into
cloud storage and then ingest

00:24:33.320 --> 00:24:34.080
that into BigQuery.

00:24:34.080 --> 00:24:37.600
And sometimes this does take a
denormalization step since

00:24:37.600 --> 00:24:41.150
BigQuery is often, at times,
used for large tables rather

00:24:41.150 --> 00:24:42.570
than relational table design.

00:24:42.570 --> 00:24:44.270
But basically, you can
use them together.

00:24:44.270 --> 00:24:46.730
So I would take the data out
of MySQL and place it into

00:24:46.730 --> 00:24:48.650
BigQuery for some of these
kind of analysis tools.

00:24:48.650 --> 00:24:50.960
Now, you mentioned Lucene
in this question.

00:24:50.960 --> 00:24:53.110
Lucene is great for things
like searching.

00:24:53.110 --> 00:24:55.290
It's kind of a search tool.

00:24:55.290 --> 00:24:58.050
And App Engine has a full-text
search API

00:24:58.050 --> 00:24:58.830
for stuff like that.

00:24:58.830 --> 00:25:02.370
However, you can use BigQuery
for some types of search.

00:25:02.370 --> 00:25:05.040
One thing that may be difficult
for a full-text type

00:25:05.040 --> 00:25:09.600
search is that we have
64-kilobyte record size.

00:25:09.600 --> 00:25:12.900
So if you have unlimited text,
it's hard to dump megabytes

00:25:12.900 --> 00:25:14.880
into a single BigQuery record.

00:25:14.880 --> 00:25:18.280
You can break that text up and
have an index sort of type

00:25:18.280 --> 00:25:19.560
situation in BigQuery.

00:25:19.560 --> 00:25:21.920
But in general, for a full-text
search kind of

00:25:21.920 --> 00:25:25.700
application, I might use App
Engine's Full Text Search API.

00:25:25.700 --> 00:25:27.850
BigQuery is great for things
like word counts, right?

00:25:27.850 --> 00:25:31.250
So things like we have a
Wikipedia data set, which we

00:25:31.250 --> 00:25:32.730
have and we're going to
have revision history.

00:25:32.730 --> 00:25:38.260
You could do word counts, word
statistics, things like that.

00:25:38.260 --> 00:25:40.320
That be a great use case for
BigQuery because the data in

00:25:40.320 --> 00:25:43.290
those situations can be very big
if you have a lot of text.

00:25:43.290 --> 00:25:44.770
RYAN BOYD: So one thing that
were actually powerful,

00:25:44.770 --> 00:25:47.570
though, in terms of text
searching with BigQuery is our

00:25:47.570 --> 00:25:49.170
regular expressions
capabilities.

00:25:49.170 --> 00:25:53.580
So although the row size is a
little limited, for the text

00:25:53.580 --> 00:25:55.890
that you do have stored in
those rows, you could run

00:25:55.890 --> 00:25:56.980
regular expressions on it.

00:25:56.980 --> 00:26:00.200
And you might think running
regular expressions on

00:26:00.200 --> 00:26:02.680
hundreds of millions or billions
of rows would take a

00:26:02.680 --> 00:26:06.040
long time, but BigQuery can
actually do that in seconds

00:26:06.040 --> 00:26:08.740
simply because it's distributed
to such a wide

00:26:08.740 --> 00:26:10.690
number of machines.

00:26:10.690 --> 00:26:13.280
So try out the regular
expressions search if you're

00:26:13.280 --> 00:26:16.200
trying to just search, for
instance, titles or abstracts

00:26:16.200 --> 00:26:19.200
or something like that as
opposed to a full document.

00:26:19.200 --> 00:26:21.660
BigQuery might be good for some
of those use cases with

00:26:21.660 --> 00:26:22.110
big data sets.

00:26:22.110 --> 00:26:22.595
MICHAEL MANOOCHEHRI: And we have
that public data set in

00:26:22.595 --> 00:26:23.670
BigQuery now, the
Ngrams data set.

00:26:23.670 --> 00:26:25.330
So we have a selection
of Ngrams from the

00:26:25.330 --> 00:26:26.530
Google Books project.

00:26:26.530 --> 00:26:29.440
We can see how we've used Ngram
data as sort of a way

00:26:29.440 --> 00:26:30.260
you can do searches.

00:26:30.260 --> 00:26:32.600
You can search for phrases and
search for particular Ngrams.

00:26:32.600 --> 00:26:34.480
And so check out how
we're doing that.

00:26:34.480 --> 00:26:36.030
I guess the short answer is
you can use all of these.

00:26:36.030 --> 00:26:38.030
These are all complementary
technologies.

00:26:38.030 --> 00:26:41.140
And real big data workflow, you
can use them all together.

00:26:41.140 --> 00:26:42.320
RYAN BOYD: And there's actually
one other thing we

00:26:42.320 --> 00:26:44.580
want to talk with you about is
just kind of share a little

00:26:44.580 --> 00:26:47.230
bit with you guys about
what we've been up to

00:26:47.230 --> 00:26:48.260
over the last week.

00:26:48.260 --> 00:26:51.450
So we've been having a lot of
fun over the last week,

00:26:51.450 --> 00:26:52.310
pulling late nights.

00:26:52.310 --> 00:26:56.150
I think I was up to 2:00 or 3:00
AM a couple times playing

00:26:56.150 --> 00:26:58.320
with some of the Wikipedia
data that we found.

00:26:58.320 --> 00:27:02.180
We actually found it at
dumps.wikimedia.org.

00:27:02.180 --> 00:27:06.860
They actually have the number
of page views by hour for

00:27:06.860 --> 00:27:09.710
every page in Wikipedia
going back for about

00:27:09.710 --> 00:27:11.880
five years, I believe.

00:27:11.880 --> 00:27:15.150
And so we've been crunching
along this data and trying to

00:27:15.150 --> 00:27:19.420
use some of the other Google
Cloud technologies just to get

00:27:19.420 --> 00:27:20.990
familiar with some of the
other Google cloud

00:27:20.990 --> 00:27:23.390
technologies like the Pipelines
API on App Engine.

00:27:23.390 --> 00:27:25.270
Michael, do you want to talk
a little more about that?

00:27:25.270 --> 00:27:25.430
MICHAEL MANOOCHEHRI:
Yeah, sure.

00:27:25.430 --> 00:27:26.880
So we're building a
complete pipeline.

00:27:26.880 --> 00:27:29.300
We're extracting the data from
the Wikipedia dumps page.

00:27:29.300 --> 00:27:32.220
We're transforming it into CSV
data, into Google cloud

00:27:32.220 --> 00:27:34.630
storage, and we're ingesting
that into Google BigQuery

00:27:34.630 --> 00:27:37.130
using 100% Google Cloud
Platform technologies,

00:27:37.130 --> 00:27:39.310
basically App Engine and
the Pipelines API

00:27:39.310 --> 00:27:40.960
to build the workflow.

00:27:40.960 --> 00:27:44.000
So for each step, we have a
pipelines API class that we're

00:27:44.000 --> 00:27:45.530
using to build this workflow.

00:27:45.530 --> 00:27:46.470
RYAN BOYD: Yeah, and it's--

00:27:46.470 --> 00:27:49.800
I think it's 2 terabytes
of raw source data.

00:27:49.800 --> 00:27:51.820
That's actually gzipped data.

00:27:51.820 --> 00:27:54.790
We haven't uncompressed all of
it, but I'm guessing from what

00:27:54.790 --> 00:27:58.120
we've seen, somewhere between
6 and 10 terabytes of

00:27:58.120 --> 00:27:59.170
uncompressed data.

00:27:59.170 --> 00:28:02.910
So it's a pretty fantastic size
of data, and it's really

00:28:02.910 --> 00:28:05.860
great to play around with
that data in BigQuery.

00:28:05.860 --> 00:28:08.270
Like I said, we've been having a
lot of fun, pulling a lot of

00:28:08.270 --> 00:28:08.590
late nights.

00:28:08.590 --> 00:28:09.530
MICHAEL MANOOCHEHRI: It's been
fun, and eventually we'll

00:28:09.530 --> 00:28:11.390
share the code from some of
these projects so you can

00:28:11.390 --> 00:28:14.280
actually check out what
we're doing yourself.

00:28:14.280 --> 00:28:16.430
RYAN BOYD: And I don't think
we actually have any more

00:28:16.430 --> 00:28:20.790
questions from the audience on
our Moderator, so we'll wrap

00:28:20.790 --> 00:28:21.860
it up for this week.

00:28:21.860 --> 00:28:26.980
But we wanted to thank you all
for joining us and invite you

00:28:26.980 --> 00:28:29.410
to come out to some of the
upcoming community events that

00:28:29.410 --> 00:28:32.930
we're doing, whether you're in
the Bay Area, whether you're

00:28:32.930 --> 00:28:36.740
in Boston, or New
York, or London.

00:28:36.740 --> 00:28:39.370
We may actually even
be out to Sydney--

00:28:39.370 --> 00:28:39.830
MICHAEL MANOOCHEHRI: Yep.

00:28:39.830 --> 00:28:40.650
RYAN BOYD: --in the fall.

00:28:40.650 --> 00:28:44.480
So let us know where you're
going to be and join us where

00:28:44.480 --> 00:28:45.050
we're going to be.

00:28:45.050 --> 00:28:48.590
We'd love to talk with you about
the big data challenges

00:28:48.590 --> 00:28:52.110
that you're having and see
which of the Google Cloud

00:28:52.110 --> 00:28:54.040
Platform technologies
are a good fit.

00:28:54.040 --> 00:28:54.960
I love the questions.

00:28:54.960 --> 00:28:56.060
MICHAEL MANOOCHEHRI: Don't
forget to add to the Google

00:28:56.060 --> 00:28:58.530
Cloud Platform Developers page
to your circle so you can find

00:28:58.530 --> 00:29:00.070
out about all these
upcoming events.

00:29:00.070 --> 00:29:00.430
RYAN BOYD: Great.

00:29:00.430 --> 00:29:02.750
That's it for the Michael
and Ryan show.

00:29:02.750 --> 00:29:02.990
MICHAEL MANOOCHEHRI:
We'll see ya.

00:29:02.990 --> 00:29:04.240
RYAN BOYD: Take care.

00:29:12.410 --> 00:29:28.867
[MUSIC PLAYING]

