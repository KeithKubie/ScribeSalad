WEBVTT
Kind: captions
Language: en

00:00:00.770 --> 00:00:03.520
Of course, if you can simply use less memory,

00:00:03.520 --> 00:00:05.660
that's great. But of course, your goal is to

00:00:05.660 --> 00:00:10.150
minimize the dynamic object allocation and de-allocation. Freeing up

00:00:10.150 --> 00:00:12.910
those dynamic objects is what the garbage collector is cleaning

00:00:12.910 --> 00:00:15.680
up after. So you really want to try to

00:00:15.680 --> 00:00:19.190
minimize dynamic object allocation. One way to that of

00:00:19.190 --> 00:00:22.330
course, is to manage your own static object pools,

00:00:22.330 --> 00:00:25.910
implement your own memory management. For example, you can allocate

00:00:25.910 --> 00:00:28.020
an array of objects and hang on to that

00:00:28.020 --> 00:00:30.710
whole array and just swap out which ones of those

00:00:30.710 --> 00:00:33.113
you're actually using. Of course you need to be

00:00:33.113 --> 00:00:36.240
sure that you're not actually allocating more than you need.

00:00:36.240 --> 00:00:40.375
But the key to reducing the impact of garbage collection lies in eliminating

00:00:40.375 --> 00:00:45.660
excessive object churn, not just memory size. Finally of course, you need to

00:00:45.660 --> 00:00:51.550
test your code very carefully for memory leaks. Since memory is so constrained,

00:00:51.550 --> 00:00:54.290
it's doubly important that you don't leak memory. And you

00:00:54.290 --> 00:00:57.540
don't want to keep increasing your static memory pool. There

00:00:57.540 --> 00:01:00.290
are whole books and discussions on best practices to avoid

00:01:00.290 --> 00:01:03.440
memory leaks, so we won't go into this in depth here.

