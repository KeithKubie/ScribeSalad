WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
In this problem, we have a bit of a challenge, and I've accordingly labeled it with

00:00:04.000 --> 00:00:07.000
2 gold stars, but what we want to do here,

00:00:07.000 --> 00:00:10.000
is optimize a finite state machine.

00:00:10.000 --> 00:00:15.000
So to go through an example, let's say we have this finite state machine.

00:00:15.000 --> 00:00:21.000
There's 1 accepting state at state 1, and then we have these few others.

00:00:21.000 --> 00:00:23.000
If you quickly look at it and think about what's going on,

00:00:23.000 --> 00:00:27.000
once you take a path down the b to state 2,

00:00:27.000 --> 00:00:28.000
you can never get to the accepting state.

00:00:28.000 --> 00:00:32.000
From state 2, 3, or 4, there's no way to get to state 1.

00:00:32.000 --> 00:00:36.000
So any string that goes down this path is always going to fail.

00:00:36.000 --> 00:00:40.000
This state machine is equivalent to the one that doesn't include any of these states.

00:00:40.000 --> 00:00:42.000
So we can make it a lot simpler.

00:00:42.000 --> 00:00:44.000
Why would we want to do this?

00:00:44.000 --> 00:00:47.000
Well, if you haven't noticed we've been using a lot of regular expressions

00:00:47.000 --> 00:00:49.000
in building our web browser.

00:00:49.000 --> 00:00:53.000
Those regular expressions are represented as finite state machines,

00:00:53.000 --> 00:00:55.000
and that's how they're processed.

00:00:55.000 --> 00:01:00.000
In order to make our web browser faster, it turns out we want as small finite state machines

00:01:00.000 --> 00:01:01.000
as possible.

00:01:01.000 --> 00:01:03.000
So what we're going to do is write code.

00:01:03.000 --> 00:01:07.000
Given a definition of finite state machine like the that we have here,

00:01:07.000 --> 00:01:11.000
we're going to identify states that don't matter towards the execution,

00:01:11.000 --> 00:01:15.000
and we call those dead states and remove them from the definition,

00:01:15.000 --> 00:01:22.000
while maintaining the exact same language, while recognizing the exact same strings

00:01:22.000 --> 00:01:25.000
that our finite state machine did before.

00:01:25.000 --> 00:01:28.000
So how are we going to this? Let's come up with a plan.

00:01:28.000 --> 00:01:31.000
So here we have "The Plan."

00:01:31.000 --> 00:01:37.000
Step 1--Let's find the live states and the dead states.

00:01:37.000 --> 00:01:41.000
We're going to do this by just finding the live states and assuming everything else is dead.

00:01:41.000 --> 00:01:43.000
So how are we going to do that?

00:01:43.000 --> 00:01:48.000
Well, we're going to find all the states, and we can do that by iterating through our dictionary,

00:01:48.000 --> 00:01:53.000
and with each state, we're going to run nfsmaccepts,

00:01:53.000 --> 00:01:58.000
which is from homework 1, and it's a procedure that given a definition

00:01:58.000 --> 00:02:03.000
for a finite state machine, a starting state, and the accepting states,

00:02:03.000 --> 00:02:09.000
it sees if it's possible to get from that state to any accepting state--

00:02:09.000 --> 00:02:11.000
if it's possible to succeed from where we're at.

00:02:11.000 --> 00:02:17.000
So if I give this definition in state 3, it's going to tell me, no, we can't get to state 1

00:02:17.000 --> 00:02:19.000
or any accepting state for that matter.

00:02:19.000 --> 00:02:22.000
If I give a 1, it's going to say, yep, this is all good.

00:02:22.000 --> 00:02:25.000
So that's actually going to be your definition for live versus dead.

00:02:25.000 --> 00:02:30.000
It can actually find a live state versus a dead state, which is awesome.

00:02:30.000 --> 00:02:35.000
Step 2--We're going to create a new finite state machine that doesn't have any

00:02:35.000 --> 00:02:37.000
of the dead states.

00:02:37.000 --> 00:02:43.000
In order to make it a really good, kind of clean, definition, we have to take some care.

00:02:43.000 --> 00:02:46.000
We don't want to include any transitions that lead to dead states.

00:02:46.000 --> 00:02:49.000
We want to remove all of the dead states,

00:02:49.000 --> 00:02:55.000
and we also want to remove states that no longer point to any live states.

00:02:55.000 --> 00:02:57.000
So here I have a bunch of little subparts.

00:02:57.000 --> 00:03:01.000
We're going to go through each edge state, each entry in our dictionary.

00:03:01.000 --> 00:03:06.000
If the current state is dead, we're not going to copy it into our new finite state machine.

00:03:06.000 --> 00:03:09.000
Otherwise, we're going to go through all of the destinations it had in the original

00:03:09.000 --> 00:03:15.000
finite state machine and prepare to copy over any that are still alive.

00:03:15.000 --> 00:03:18.000
If there are none that are still alive, we're going to remove that edge completely.

00:03:18.000 --> 00:03:20.000
We're not going to copy it into a new one.

00:03:20.000 --> 00:03:25.000
Once we have repeated that process in every state edge thing in the graph,

00:03:25.000 --> 00:03:29.000
we're going to update our accepting state list accordingly.

00:03:29.000 --> 00:03:33.000
We don't want to have any accepting states that are dead.

00:03:33.000 --> 00:03:35.000
So let's go to the solution.

00:03:35.000 --> 00:03:40.000
One of the first things I did is I copied in nondeterministic finite state machine accepts

00:03:40.000 --> 00:03:42.000
directly from unit 1 homework.

00:03:42.000 --> 00:03:45.000
It hasn't changed a bit.

00:03:45.000 --> 00:03:49.000
Now I'm going to do my trimming of my finite state machine.

00:03:49.000 --> 00:03:52.000
So like I said in my outline, I'm going to find all the states,

00:03:52.000 --> 00:03:55.000
just so I have a record of them, and it doesn't really matter if I have duplicates.

00:03:55.000 --> 00:03:59.000
It might slow down the trimming a bit, but I'm doing this to save time

00:03:59.000 --> 00:04:04.000
when I'm running the execution, not for the trimming so much.

00:04:04.000 --> 00:04:11.000
For each state, if it's live, I can tell by running nfsmaccepts,

00:04:11.000 --> 00:04:14.000
and if it is live, I'm going to add it to a list of live states.

00:04:14.000 --> 00:04:18.000
Now I'm going to create a new dictionary of edges--my new representation,

00:04:18.000 --> 00:04:24.000
and go through all of the old ones to see if they're still live and update them accordingly.

00:04:24.000 --> 00:04:29.000
So for each edge in the old dictionary, if that state is live,

00:04:29.000 --> 00:04:32.000
then I'm going to calculate the new destinations, meaning I'm going to remove the destinations

00:04:32.000 --> 00:04:34.000
that are now dead.

00:04:34.000 --> 00:04:38.000
So if that destination is live, I'm going to append it to the list.

00:04:38.000 --> 00:04:45.000
But I only want to set this new edge to my new finite state machine dictionary

00:04:45.000 --> 00:04:48.000
if the destinations are not empty.

00:04:48.000 --> 00:04:51.000
There's really no point in having an edge that goes to nowhere,

00:04:51.000 --> 00:04:52.000
that goes to fail.

00:04:52.000 --> 00:04:56.000
We just kind of always assume that if the edge doesn't exist, then we're going to fail.

00:04:56.000 --> 00:05:02.000
Lastly, I want to update my accepting states to only those that are live.

00:05:02.000 --> 00:05:08.000
I'm going to return the tuple of the new edges and the new accepting states.

00:05:08.000 --> 00:05:11.000
And that's it.

00:05:11.000 --> 00:05:15.000
Look! It's true! So much true!

00:05:15.000 --> 09:59:59.000
True means good. It means meaning and greatness.

