WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:04.500
The idea of cache obliviousness is
one of those great frontiers of HPC.

00:00:04.500 --> 00:00:07.354
And it's a terrific starting point for
new research.

00:00:07.354 --> 00:00:10.910
In particular, there's a lot of
solid theory but in my opinion there

00:00:10.910 --> 00:00:14.531
haven't been quite as many successful
practical implementations or

00:00:14.531 --> 00:00:17.200
evaluations of these algorithms.

00:00:17.200 --> 00:00:18.060
Now if that's the case,

00:00:18.060 --> 00:00:22.250
you might ask yourself, why bother
with cache oblivious approaches?

00:00:22.250 --> 00:00:26.080
Well, there's at least one argument
that I find especially compelling.

00:00:27.170 --> 00:00:30.807
Before I say it,
you should pause the video, and

00:00:30.807 --> 00:00:34.726
see if you can think of
an argument on your own first.

00:00:34.726 --> 00:00:41.434
[SOUND] Okay so,
what did you come up with?

00:00:41.434 --> 00:00:43.534
Here's the one I like a lot.

00:00:43.534 --> 00:00:45.846
The present and
future is about virtualized or

00:00:45.846 --> 00:00:48.600
shared environments, like the cloud.

00:00:48.600 --> 00:00:52.630
So, your program might have to fight for
resources, like caches or

00:00:52.630 --> 00:00:54.180
network bandwidth, and do so

00:00:54.180 --> 00:00:57.700
in an unpredictable way as other jobs
try to push yours out of the way.

00:00:58.700 --> 00:01:02.940
In such cases, you might not have
a better choice than to try to be as

00:01:02.940 --> 00:01:04.890
resource oblivious as possible.

