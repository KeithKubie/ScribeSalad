WEBVTT
Kind: captions
Language: en

00:00:05.690 --> 00:00:08.470
MICHELLE CHEUNG: Thanks everyone
for attending our topic.

00:00:08.470 --> 00:00:11.660
Today, we're going to be
talking about Cyanogen themes,

00:00:11.660 --> 00:00:15.520
your phone your canvas.

00:00:15.520 --> 00:00:20.270
So we have three speakers
here today, obviously.

00:00:20.270 --> 00:00:24.610
So I'm Michelle, the senior
product manager for themes.

00:00:24.610 --> 00:00:26.790
Before that, I actually
was working at Xiaomi,

00:00:26.790 --> 00:00:28.750
also working a
bit around themes,

00:00:28.750 --> 00:00:33.510
and helping the
company expand abroad.

00:00:33.510 --> 00:00:40.000
We have Clark, who officially
has been hacking on Android

00:00:40.000 --> 00:00:42.710
since the release of the G1.

00:00:42.710 --> 00:00:46.350
Prior to Cyanogen, he
worked on Chameleon OS,

00:00:46.350 --> 00:00:49.150
which is a Cyanogen
mod based ROM,

00:00:49.150 --> 00:00:51.790
which supports the MIUI themes.

00:00:51.790 --> 00:00:56.310
Unofficially, he is
our theme wizard.

00:00:56.310 --> 00:00:59.010
And then we have Dave,
who is the product

00:00:59.010 --> 00:01:00.400
designer in our team.

00:01:00.400 --> 00:01:06.090
And prior to that, he
was working in kovdev.

00:01:06.090 --> 00:01:11.350
Unofficially, he's actually
our in-house theme design guru.

00:01:11.350 --> 00:01:13.690
And one we haven't added.

00:01:13.690 --> 00:01:15.190
We have, over there, Andy.

00:01:15.190 --> 00:01:17.930
He's one of the original
members of themes.

00:01:17.930 --> 00:01:21.390
He works on our theme store
and a lot of service stuff.

00:01:21.390 --> 00:01:24.250
But he actually built
out the theme store too.

00:01:24.250 --> 00:01:25.780
So yeah, he's right over there.

00:01:28.881 --> 00:01:29.380
OK.

00:01:32.160 --> 00:01:36.390
So we have one of the
most awesome teams.

00:01:36.390 --> 00:01:38.630
But we're here today
to talk about themes

00:01:38.630 --> 00:01:41.470
and personalisation.

00:01:41.470 --> 00:01:43.030
So we're going to
talk about, what

00:01:43.030 --> 00:01:46.800
are themes, how themes
work, designing themes,

00:01:46.800 --> 00:01:50.610
and we're going to preview
one of our next big things

00:01:50.610 --> 00:01:53.210
we've been working on.

00:01:53.210 --> 00:01:55.700
So what are themes?

00:01:55.700 --> 00:01:57.460
At Cyanogen, we
believe you should

00:01:57.460 --> 00:02:01.360
be able to make your phone
as unique as you are.

00:02:01.360 --> 00:02:03.640
After all, everyone's different.

00:02:03.640 --> 00:02:06.830
Everyone has their own
style, their own passions,

00:02:06.830 --> 00:02:08.130
their own interests.

00:02:08.130 --> 00:02:11.320
So theme was the
solution to this.

00:02:11.320 --> 00:02:14.260
It allows the end user
to easily change the look

00:02:14.260 --> 00:02:17.530
and feel of their device.

00:02:17.530 --> 00:02:19.060
You have the ability
to change out

00:02:19.060 --> 00:02:24.080
the lock screen, boot animation,
icons, fonts, ringtones.

00:02:24.080 --> 00:02:26.170
Pretty much anything,
you name it.

00:02:30.050 --> 00:02:32.470
So we actually take
themes quite seriously,

00:02:32.470 --> 00:02:35.340
and we're glad the media
also recognizes it as well.

00:02:37.970 --> 00:02:40.770
I'm going to talk a little bit
more about the theme products.

00:02:40.770 --> 00:02:45.280
So for the end users, we have
Theme Store, Theme Chooser,

00:02:45.280 --> 00:02:46.742
and App Themer.

00:02:46.742 --> 00:02:49.815
For developers, we
have the Theme Studio.

00:02:52.570 --> 00:02:55.960
The Theme Store houses
Cyanogen themes.

00:02:55.960 --> 00:02:58.480
It streamlines the
discovery process

00:02:58.480 --> 00:03:03.250
and optimizes search results
so that you can easily

00:03:03.250 --> 00:03:07.130
search just icons, controls,
wallpapers, and fonts.

00:03:07.130 --> 00:03:10.820
All of the content
in the store is all

00:03:10.820 --> 00:03:13.680
created by the community.

00:03:13.680 --> 00:03:18.600
The Theme Store offers users a
deeper level of customization.

00:03:18.600 --> 00:03:23.620
So users can select a theme,
separate it into components,

00:03:23.620 --> 00:03:26.800
then swap the components
with another theme.

00:03:26.800 --> 00:03:29.450
So like mix and
match, so to speak.

00:03:29.450 --> 00:03:32.510
This allows the users to
create endless combinations

00:03:32.510 --> 00:03:35.325
of themes that is completely
unique to the individual.

00:03:38.670 --> 00:03:43.640
Then we have App Themer,
which takes it even further.

00:03:43.640 --> 00:03:48.640
So this allows the end user
to just customize one app

00:03:48.640 --> 00:03:54.460
and the rest of the device
remains in its original theme.

00:03:54.460 --> 00:03:57.740
Lastly, we have
the Theme Studio.

00:03:57.740 --> 00:03:59.560
It's a platform where
theme developers

00:03:59.560 --> 00:04:02.060
can upload their
theme to the store,

00:04:02.060 --> 00:04:03.910
and allows them to
track the downloads

00:04:03.910 --> 00:04:05.040
and manage their themes.

00:04:07.630 --> 00:04:10.240
So the products I just
talked about-- this

00:04:10.240 --> 00:04:14.870
is like a framework
that ties everything in.

00:04:14.870 --> 00:04:17.510
So it starts off,
if you can see here,

00:04:17.510 --> 00:04:25.760
on the Theme Studio end, where
the theme developers upload

00:04:25.760 --> 00:04:26.600
their theme.

00:04:26.600 --> 00:04:29.770
Then it gets published
onto the Theme Store

00:04:29.770 --> 00:04:34.820
where then it gets
reflected by the end user,

00:04:34.820 --> 00:04:36.160
and then it gets applied.

00:04:36.160 --> 00:04:38.730
And Clark will talk
a little bit more

00:04:38.730 --> 00:04:42.290
specifically in
detail about that.

00:04:42.290 --> 00:04:46.380
So the Theme Store,
actually, we've

00:04:46.380 --> 00:04:50.180
launched in about a little
less than a year ago.

00:04:50.180 --> 00:04:52.980
And I want to share with
you some general statistics.

00:04:52.980 --> 00:04:57.140
Majority of the themes right
now we have are all paid.

00:04:57.140 --> 00:05:01.940
So about 85% are paid
and 15% are free.

00:05:01.940 --> 00:05:06.810
It's all community driven and we
have about a 5.5% weekly growth

00:05:06.810 --> 00:05:07.310
rate.

00:05:10.060 --> 00:05:15.100
So which components do
users like to customize?

00:05:15.100 --> 00:05:18.420
We have a lot of different
components, and a lot of people

00:05:18.420 --> 00:05:20.990
actually tend to
think wallpapers

00:05:20.990 --> 00:05:24.580
might be the most often that
people like to customize.

00:05:24.580 --> 00:05:29.370
But surprisingly, it's actually
boot animation and fonts--

00:05:29.370 --> 00:05:32.430
I mean, fonts is actually
the most popular,

00:05:32.430 --> 00:05:37.050
followed by icons, and
then it's boot animation.

00:05:37.050 --> 00:05:37.860
OK.

00:05:37.860 --> 00:05:40.920
Now I'll pass it to Clark
to explain how themes work.

00:05:44.241 --> 00:05:45.490
CLARK SCHEFF: Guys hear me OK?

00:05:45.490 --> 00:05:46.810
All right.

00:05:46.810 --> 00:05:51.166
So being an engineer, I like
to know how things work.

00:05:51.166 --> 00:05:52.540
Any engineers out
here right now?

00:05:52.540 --> 00:05:53.331
Software engineers?

00:05:53.331 --> 00:05:54.642
Any of you guys?

00:05:54.642 --> 00:05:56.100
All right, well
we've got a couple.

00:05:56.100 --> 00:05:58.225
So hopefully you guys, I'm
here to at least explain

00:05:58.225 --> 00:06:01.270
a little bit how themes works on
the backside in our framework.

00:06:01.270 --> 00:06:02.867
So let's get started.

00:06:02.867 --> 00:06:04.200
How exactly does the theme work?

00:06:04.200 --> 00:06:06.330
When you actually
are using a theme,

00:06:06.330 --> 00:06:08.790
what happens in the backend
that actually makes it change

00:06:08.790 --> 00:06:10.060
the visual look and feel?

00:06:10.060 --> 00:06:12.225
Well, as my boy Shy would say?

00:06:12.225 --> 00:06:14.047
It's magic.

00:06:14.047 --> 00:06:15.880
While I would love to
say this, because that

00:06:15.880 --> 00:06:18.720
would be the easy way out,
I'm not going to do that.

00:06:18.720 --> 00:06:21.590
So let's take a look
at it a little bit.

00:06:21.590 --> 00:06:23.770
So we leverage a thing
called the Runtime Resource

00:06:23.770 --> 00:06:25.516
Overlay, or RRO for short.

00:06:25.516 --> 00:06:27.890
This was something introduced
by Sony a couple years ago,

00:06:27.890 --> 00:06:29.846
and it's actually
in AOSP right now.

00:06:29.846 --> 00:06:32.220
So Andy Mast-- actually, I'm
going to put him on the spot

00:06:32.220 --> 00:06:32.430
again.

00:06:32.430 --> 00:06:34.030
This guy started the foundation
before I started here.

00:06:34.030 --> 00:06:35.738
So he actually started
working on the RRO

00:06:35.738 --> 00:06:37.117
before I ever had a chance.

00:06:37.117 --> 00:06:39.200
But we leveraged something
that's already in AOSP.

00:06:39.200 --> 00:06:40.120
It made sense, right?

00:06:40.120 --> 00:06:41.619
We don't want to
reinvent the wheel.

00:06:41.619 --> 00:06:43.660
So we took that and went
a little step further

00:06:43.660 --> 00:06:46.200
to make it work with
our theme engine.

00:06:46.200 --> 00:06:48.100
So what does RRO do?

00:06:48.100 --> 00:06:52.380
Well, it replaces resources
at runtime, hence the name.

00:06:52.380 --> 00:06:53.810
It does that by
mapping resources

00:06:53.810 --> 00:06:55.180
from a theme to the application.

00:06:55.180 --> 00:06:58.070
So whenever we want to get a
resource from an application,

00:06:58.070 --> 00:07:00.900
it'll be find the themed version
and give that back to us.

00:07:00.900 --> 00:07:03.010
And so this magic is
really happening down

00:07:03.010 --> 00:07:05.210
at the native layer,
where doing this

00:07:05.210 --> 00:07:06.640
is in the order of microseconds.

00:07:06.640 --> 00:07:08.900
So we can fetch these themes
resources really quick,

00:07:08.900 --> 00:07:13.192
so we don't see an
impact to the user.

00:07:13.192 --> 00:07:14.650
To understand what's
going on here,

00:07:14.650 --> 00:07:16.108
we have to have a
little background

00:07:16.108 --> 00:07:17.240
on what resources are.

00:07:17.240 --> 00:07:19.785
So what are resources
in an application?

00:07:23.910 --> 00:07:25.687
They're not these
resources, sorry.

00:07:25.687 --> 00:07:26.820
Hit the wrong slide.

00:07:26.820 --> 00:07:28.450
What they are--
resources are just

00:07:28.450 --> 00:07:30.120
assets the application
can access.

00:07:30.120 --> 00:07:31.670
Besides the code,
it's got access

00:07:31.670 --> 00:07:33.790
to things like what
are called drawables.

00:07:33.790 --> 00:07:36.630
These can be bitmaps, they
can be vector drawables, which

00:07:36.630 --> 00:07:37.850
were introduced in lollipop.

00:07:37.850 --> 00:07:39.231
They can be shapes.

00:07:39.231 --> 00:07:39.980
Colored drawables.

00:07:39.980 --> 00:07:41.646
There's a plethora
of drawables that are

00:07:41.646 --> 00:07:43.070
accessible to an application.

00:07:43.070 --> 00:07:46.180
And themes can also
interchange these drawables.

00:07:46.180 --> 00:07:47.740
So it could be a
lot more flexible.

00:07:47.740 --> 00:07:49.892
If a drawable was a
bitmap, we can turn it

00:07:49.892 --> 00:07:50.850
into a vector drawable.

00:07:50.850 --> 00:07:53.150
We can turn into an
animated drawable.

00:07:53.150 --> 00:07:56.610
So it becomes something much
more than it originally was.

00:07:56.610 --> 00:07:57.390
There's layouts.

00:07:57.390 --> 00:08:00.590
Layouts define the UI
for the application.

00:08:00.590 --> 00:08:02.280
So this tells
where the views are

00:08:02.280 --> 00:08:05.850
in the layout, where buttons
are, and stuff like that.

00:08:05.850 --> 00:08:08.134
There's XML, which is usually
just generic XML that's

00:08:08.134 --> 00:08:09.300
specific to the application.

00:08:09.300 --> 00:08:10.920
There's no set format for it.

00:08:10.920 --> 00:08:13.700
It usually can define certain
information, maybe stays

00:08:13.700 --> 00:08:17.307
or configs and stuff like that,
specific to an application.

00:08:17.307 --> 00:08:18.890
And then some of the
meat and potatoes

00:08:18.890 --> 00:08:20.410
is in an area called values.

00:08:20.410 --> 00:08:23.320
These are XML, which define
various types of values

00:08:23.320 --> 00:08:26.670
like arrays, colors,
dimensions that

00:08:26.670 --> 00:08:30.420
can be used for padding, text
sizes, and stuff like that.

00:08:30.420 --> 00:08:32.750
The strings, the text that
you see on your buttons

00:08:32.750 --> 00:08:36.549
and in the UI is usually defined
in this XML values, as well

00:08:36.549 --> 00:08:37.850
as styles.

00:08:37.850 --> 00:08:39.799
Now styles is--
basically think of it

00:08:39.799 --> 00:08:41.669
as a collection
of attributes that

00:08:41.669 --> 00:08:45.820
determine how an application
looks, or a UI element looks.

00:08:45.820 --> 00:08:47.752
So we've got this
thing called a bag that

00:08:47.752 --> 00:08:49.710
takes all these attributes,
puts them together,

00:08:49.710 --> 00:08:53.710
and then displays
those to the user.

00:08:53.710 --> 00:08:55.930
So while we have access
to all these resources,

00:08:55.930 --> 00:08:58.130
there's a few that we
do not allow to theme.

00:08:58.130 --> 00:09:00.240
And there's good
reason for that.

00:09:00.240 --> 00:09:02.770
Layouts we don't allow to
theme, because applications

00:09:02.770 --> 00:09:04.010
update all the time.

00:09:04.010 --> 00:09:05.840
And if an application
gets updated,

00:09:05.840 --> 00:09:08.240
and they add a new view, or
they change their layout--

00:09:08.240 --> 00:09:10.100
if we theme that,
they're going to now try

00:09:10.100 --> 00:09:12.910
to get that part of
the UI that's not there

00:09:12.910 --> 00:09:14.210
now because it's been themed.

00:09:14.210 --> 00:09:15.300
The app's going to crash.

00:09:15.300 --> 00:09:16.400
So it looks bad.

00:09:16.400 --> 00:09:18.890
And usually the user doesn't
see the theme as the culprit,

00:09:18.890 --> 00:09:21.210
they see the app as the culprit.

00:09:21.210 --> 00:09:23.340
So we don't want
application developers

00:09:23.340 --> 00:09:25.840
to be blamed for stuff that our
theme engine could be doing.

00:09:25.840 --> 00:09:27.310
So that's off limits.

00:09:27.310 --> 00:09:30.400
XML just doesn't make
sense because that's

00:09:30.400 --> 00:09:33.090
specific to the application,
so there's no need to do that.

00:09:33.090 --> 00:09:33.800
Arrays.

00:09:33.800 --> 00:09:35.550
Arrays are usually a
collection of values,

00:09:35.550 --> 00:09:38.850
and those values can be
other resources like color.

00:09:38.850 --> 00:09:40.270
So those can be
themed elsewhere,

00:09:40.270 --> 00:09:41.972
so we don't touch arrays.

00:09:41.972 --> 00:09:43.430
We don't touch
things like booleans

00:09:43.430 --> 00:09:45.510
because booleans can change
values true or false.

00:09:45.510 --> 00:09:47.710
And a theme could
potentially enable something

00:09:47.710 --> 00:09:49.709
the developer didn't want
to enable because they

00:09:49.709 --> 00:09:50.952
were using a boolean value.

00:09:50.952 --> 00:09:51.660
And then strings.

00:09:51.660 --> 00:09:54.770
Strings, we shouldn't be
changing text anyways.

00:09:54.770 --> 00:09:57.760
A theme could be malicious, and
maybe phish, and change text,

00:09:57.760 --> 00:09:59.440
and they change
the icon of an app,

00:09:59.440 --> 00:10:01.600
and now they change the text to
make it look like a banking app

00:10:01.600 --> 00:10:02.590
or something like that.

00:10:02.590 --> 00:10:03.964
And then there's
the whole aspect

00:10:03.964 --> 00:10:05.270
of translations and locales.

00:10:05.270 --> 00:10:06.260
I mean, if your
theme is stringed,

00:10:06.260 --> 00:10:07.820
you're basically going
to have to provide all

00:10:07.820 --> 00:10:08.986
the translations for it too.

00:10:08.986 --> 00:10:10.910
It's poor user experience.

00:10:10.910 --> 00:10:13.590
So those types of
things are off-limits.

00:10:13.590 --> 00:10:16.132
So now that we understand
what resources are,

00:10:16.132 --> 00:10:18.340
there's a couple of ways
that an application actually

00:10:18.340 --> 00:10:20.510
accesses the resources.

00:10:20.510 --> 00:10:21.810
One of those is via XML.

00:10:21.810 --> 00:10:23.726
So here I've got an
example-- this is actually

00:10:23.726 --> 00:10:26.080
a vector drawable that was
introduced in Lollipop.

00:10:26.080 --> 00:10:29.934
This one happens to be of
our CyanogenMod mascot, Sid.

00:10:29.934 --> 00:10:32.600
And if you look here in the red,
there's a reference here called

00:10:32.600 --> 00:10:33.759
@color/cyan.

00:10:33.759 --> 00:10:36.050
That's a color we defined
elsewhere in our application.

00:10:36.050 --> 00:10:37.091
It's one those resources.

00:10:37.091 --> 00:10:38.845
And so now, whenever
this icon is drawn,

00:10:38.845 --> 00:10:40.470
it's going to fetch
that color and it's

00:10:40.470 --> 00:10:41.670
going to be drawn in that.

00:10:41.670 --> 00:10:43.770
Now a theme could now
change that color,

00:10:43.770 --> 00:10:45.420
and so Sid could
be instead of cyan,

00:10:45.420 --> 00:10:48.060
he's now purple, or maybe pink.

00:10:48.060 --> 00:10:50.770
Depends on what themer wants.

00:10:50.770 --> 00:10:52.970
The other way we can access
resources is via code.

00:10:52.970 --> 00:10:54.730
So an application
developer might want

00:10:54.730 --> 00:10:57.310
to access certain resources.

00:10:57.310 --> 00:10:58.230
So they can do that.

00:10:58.230 --> 00:11:03.450
One important thing is a need
to import this R. Java class.

00:11:03.450 --> 00:11:05.560
To let Java know what
classes and stuff you're

00:11:05.560 --> 00:11:07.850
going to be using in your
code, you have to import it.

00:11:07.850 --> 00:11:10.349
This is a specific classic that
gets generated at build time

00:11:10.349 --> 00:11:11.460
for the developer.

00:11:11.460 --> 00:11:13.172
So a lot of this is
extracted to them,

00:11:13.172 --> 00:11:15.380
they don't really see what's
going on under the hood.

00:11:15.380 --> 00:11:17.500
So I'm actually going to
provide a little details

00:11:17.500 --> 00:11:18.208
for that for you.

00:11:18.208 --> 00:11:19.800
But in this case,
we're trying to get

00:11:19.800 --> 00:11:21.540
a string and a
drawable via code,

00:11:21.540 --> 00:11:23.850
and we're accessing
them using that R.class.

00:11:23.850 --> 00:11:25.950
And for strings,
we're using R.string,

00:11:25.950 --> 00:11:27.890
and for drawables,
we're using R.drawable.

00:11:27.890 --> 00:11:31.690
So it's an easy way to get
those resources, both in XML

00:11:31.690 --> 00:11:33.834
and to the application in code.

00:11:33.834 --> 00:11:35.750
So now we're going to
talk about resource IDs.

00:11:35.750 --> 00:11:38.840
And we did have a problem
here earlier getting access,

00:11:38.840 --> 00:11:41.900
but Sid is helping us
out, so we've got our ID

00:11:41.900 --> 00:11:44.310
and we can get past this now.

00:11:44.310 --> 00:11:45.680
So resource IDs.

00:11:45.680 --> 00:11:50.320
This is the meat and potatoes
of how resources are provided

00:11:50.320 --> 00:11:52.836
to an application at runtime.

00:11:52.836 --> 00:11:54.460
Now, as I mentioned,
these resource IDs

00:11:54.460 --> 00:11:58.480
are generated at build time
from a tool called AAPT.

00:11:58.480 --> 00:12:01.370
And that's Android
Asset Packaging Tool.

00:12:01.370 --> 00:12:04.490
This tool will look
at your resources,

00:12:04.490 --> 00:12:07.530
generate the R.Java for you so
you can access that via code,

00:12:07.530 --> 00:12:10.140
and it also creates this thing
called a resource table that

00:12:10.140 --> 00:12:12.730
has all those IDS
stored in a format

00:12:12.730 --> 00:12:14.440
that it can quickly
access at runtime.

00:12:14.440 --> 00:12:17.290
So it's a very efficient system.

00:12:17.290 --> 00:12:19.810
The resource IDs are
unique to the application,

00:12:19.810 --> 00:12:21.560
but they're not
always the same IDs

00:12:21.560 --> 00:12:22.810
across different applications.

00:12:22.810 --> 00:12:25.120
It can vary.

00:12:25.120 --> 00:12:26.680
So resource ID, it's
just an integer.

00:12:26.680 --> 00:12:28.850
It's a value that
tells the system

00:12:28.850 --> 00:12:30.660
a few bits of information.

00:12:30.660 --> 00:12:32.960
The first one on the
left is the Package ID.

00:12:32.960 --> 00:12:36.270
Now Android's got this concept
of packages for resources.

00:12:36.270 --> 00:12:38.880
Every application gets the
Android framework resources,

00:12:38.880 --> 00:12:41.200
which is package ID 0x01.

00:12:41.200 --> 00:12:44.555
Application, third party
apps, end up getting 0x7f,

00:12:44.555 --> 00:12:46.180
which is at the bottom
of the spectrum.

00:12:46.180 --> 00:12:48.190
And then everything in
between there's libraries,

00:12:48.190 --> 00:12:49.565
and other types
of resources that

00:12:49.565 --> 00:12:52.720
can be loaded in with their own
resource ID that get tagged on.

00:12:52.720 --> 00:12:56.280
So you got a package ID
that tells the system, OK,

00:12:56.280 --> 00:12:58.700
which group am I going to
grab this resource from?

00:12:58.700 --> 00:13:00.320
Now the next value
is a resource type.

00:13:00.320 --> 00:13:02.611
This is a value that was
generated runtime as well that

00:13:02.611 --> 00:13:06.667
says, OK, it's a drawable,
it's an integer, it's a string,

00:13:06.667 --> 00:13:07.250
it's whatever.

00:13:07.250 --> 00:13:10.554
This number tells it exactly
where to go in this table.

00:13:10.554 --> 00:13:12.970
And then last, once it's found
that area where those types

00:13:12.970 --> 00:13:14.440
are, it's got an entry index.

00:13:14.440 --> 00:13:16.231
And that just tells it
really quickly where

00:13:16.231 --> 00:13:18.340
to go in memory to fetch
that resource for you.

00:13:18.340 --> 00:13:20.870
So using these three
values, it can quickly

00:13:20.870 --> 00:13:22.922
grab a resource at
runtime and bring it

00:13:22.922 --> 00:13:24.630
right back to the
application to be used,

00:13:24.630 --> 00:13:28.070
whether it's in layouts, code.

00:13:28.070 --> 00:13:29.060
We've got resource IDs.

00:13:29.060 --> 00:13:30.310
We've got resources.

00:13:30.310 --> 00:13:34.230
Now how do we get the theme
to work with all this, right?

00:13:34.230 --> 00:13:35.760
So there's a tool called IDMAP.

00:13:35.760 --> 00:13:37.780
This is built in
with Android system.

00:13:37.780 --> 00:13:41.120
It's a binary that runs
when the app's installed,

00:13:41.120 --> 00:13:42.590
when the theme's installed.

00:13:42.590 --> 00:13:44.820
And basically what it does,
is it creates a mapping

00:13:44.820 --> 00:13:48.250
from the application
to resources that

00:13:48.250 --> 00:13:51.166
map it to that one in a theme.

00:13:51.166 --> 00:13:52.540
So it's using
those resource IDs,

00:13:52.540 --> 00:13:53.980
it basically goes
through the theme

00:13:53.980 --> 00:13:55.813
looks at all the different
resources it has,

00:13:55.813 --> 00:13:58.520
and first it looks at the type.

00:13:58.520 --> 00:13:59.540
The type needs to match.

00:13:59.540 --> 00:14:01.350
So a drawable needs to
match to a drawable,

00:14:01.350 --> 00:14:02.470
a string to a string, so forth.

00:14:02.470 --> 00:14:03.469
You can't mix and match.

00:14:03.469 --> 00:14:06.120
You can't have a dimension
being mapped to a color.

00:14:06.120 --> 00:14:07.689
So that's the first constraint.

00:14:07.689 --> 00:14:10.230
The second one, is the name of
those resources have to match.

00:14:10.230 --> 00:14:13.067
So before, you saw in my
example I had my app icon,

00:14:13.067 --> 00:14:13.900
and stuff like that.

00:14:13.900 --> 00:14:15.776
So those names need to match.

00:14:15.776 --> 00:14:18.150
And once it finds that matching
between those two values,

00:14:18.150 --> 00:14:20.910
it'll say, OK, the application's
resource ID is this,

00:14:20.910 --> 00:14:22.310
the theme's resource ID is this.

00:14:22.310 --> 00:14:24.487
So now it knows that
whenever I ask for this guy,

00:14:24.487 --> 00:14:26.070
it can just point
directly to this one

00:14:26.070 --> 00:14:28.940
and fetch that resource instead
of the original application.

00:14:28.940 --> 00:14:33.167
And the way this is stored,
just like the resource table,

00:14:33.167 --> 00:14:35.250
it's in a efficient structure
where we can quickly

00:14:35.250 --> 00:14:39.390
grab these mappings and fetch
the resource as if it was never

00:14:39.390 --> 00:14:39.890
themed.

00:14:39.890 --> 00:14:42.300
I mean, it's really quick.

00:14:42.300 --> 00:14:44.889
So how's this work once
we've got all this in place?

00:14:44.889 --> 00:14:46.430
Our application is
going to say, hey,

00:14:46.430 --> 00:14:48.860
I want to get this
drawable called app_icon.

00:14:48.860 --> 00:14:51.560
OK, so we ask the system, hey,
can you fetch me this drawable?

00:14:51.560 --> 00:14:53.725
So it goes down, and there's a
thing called an asset manager,

00:14:53.725 --> 00:14:56.250
and it will actually try to
grab that resource for you.

00:14:56.250 --> 00:14:58.764
It's taken that ID that
we've provided to it,

00:14:58.764 --> 00:15:00.680
it's going to say, OK,
which package is it in?

00:15:00.680 --> 00:15:01.970
It's in 0x7f, all right.

00:15:01.970 --> 00:15:03.290
We're going to look it up.

00:15:03.290 --> 00:15:05.510
We find the resource,
but we see that it's

00:15:05.510 --> 00:15:06.810
got an ID mapped to it.

00:15:06.810 --> 00:15:07.550
So what do we do?

00:15:07.550 --> 00:15:10.710
Well, we're now going to point
to the themes resource table.

00:15:10.710 --> 00:15:13.461
And ultimately,
the system's going

00:15:13.461 --> 00:15:14.710
to return the themed resource.

00:15:14.710 --> 00:15:17.124
So even though we were asking
for this app_icon, what

00:15:17.124 --> 00:15:18.790
we get back is the
themed version, which

00:15:18.790 --> 00:15:22.590
happens to be this foo.png.

00:15:22.590 --> 00:15:24.660
So we've got
everything in place,

00:15:24.660 --> 00:15:27.075
we've got these resources
being mapped and stuff.

00:15:27.075 --> 00:15:29.760
So what's it look like
once we start doing this?

00:15:29.760 --> 00:15:32.960
On the left here, we've
got the quick setting tiles

00:15:32.960 --> 00:15:33.544
from Lollipop.

00:15:33.544 --> 00:15:35.210
This is what everybody's
used to seeing.

00:15:35.210 --> 00:15:37.410
Like an AOSP, this is the
standard look and feel.

00:15:37.410 --> 00:15:40.244
But let's apply one theme.

00:15:40.244 --> 00:15:41.410
So we've got the same thing.

00:15:41.410 --> 00:15:42.620
We still got our
quick setting tiles.

00:15:42.620 --> 00:15:43.610
Nothing changed there.

00:15:43.610 --> 00:15:45.193
But now we've got
some different look.

00:15:45.193 --> 00:15:47.826
We've got some different colors,
some different iconography.

00:15:47.826 --> 00:15:50.200
Even some of the dimensions
can change within there, just

00:15:50.200 --> 00:15:51.616
to give it a better
different look

00:15:51.616 --> 00:15:53.800
and feel for that
particular user.

00:15:53.800 --> 00:15:56.892
And if we do it one
more time, once again,

00:15:56.892 --> 00:15:58.600
everything's still
laid out the same way,

00:15:58.600 --> 00:16:02.460
but we get a visually
different look.

00:16:02.460 --> 00:16:05.610
So if the demo gods are
going to play nicely with me,

00:16:05.610 --> 00:16:07.240
I'm going to actually
just show you

00:16:07.240 --> 00:16:10.480
guys real time a
couple theme changes.

00:16:10.480 --> 00:16:13.140
So you can just see that
we are doing this runtime,

00:16:13.140 --> 00:16:15.960
and it's really quick.

00:16:21.610 --> 00:16:22.706
Sorry.

00:16:22.706 --> 00:16:24.080
You see that for the most part.

00:16:24.080 --> 00:16:26.230
So I'm going to go from
our settings application,

00:16:26.230 --> 00:16:28.810
we can go right to
our theme chooser.

00:16:28.810 --> 00:16:31.606
And like Michelle said, we
can mix and match themes.

00:16:31.606 --> 00:16:33.480
So we don't have to
apply a theme whole sale.

00:16:33.480 --> 00:16:35.780
So right now, here's what
my Status Bar looks like

00:16:35.780 --> 00:16:38.792
and the Quick Settings Drawer.

00:16:38.792 --> 00:16:40.500
So I'm just going to
change my system UI.

00:16:40.500 --> 00:16:43.590
I'm going to go to one of our
other themes here called HEXO.

00:16:43.590 --> 00:16:44.874
I'm just going to hit Apply.

00:16:47.720 --> 00:16:49.817
And now I've got a different
look and feel there.

00:16:49.817 --> 00:16:51.650
Another cool thing that
I love to play with,

00:16:51.650 --> 00:16:52.420
is our App Themer.

00:16:52.420 --> 00:16:53.836
So, I'm going to
use this instead.

00:16:53.836 --> 00:16:54.645
We're in Settings.

00:16:54.645 --> 00:16:56.020
I just want to
change settings, I

00:16:56.020 --> 00:16:57.478
don't want to change
anything else.

00:16:57.478 --> 00:16:59.947
And this is where App Themer
is really awesome for that.

00:16:59.947 --> 00:17:02.280
Now that I'm in Settings, I
can click on this little fab

00:17:02.280 --> 00:17:03.446
up here, and I get a button.

00:17:03.446 --> 00:17:06.119
So let's go back to System.

00:17:06.119 --> 00:17:08.640
So there you see, we're right
back at the system theme,

00:17:08.640 --> 00:17:10.014
just like that runtime.

00:17:10.014 --> 00:17:10.680
Don't like that?

00:17:10.680 --> 00:17:13.770
Here's our new ZUK, Z-1 theme.

00:17:13.770 --> 00:17:16.259
So again, it's settings,
but visually, it's

00:17:16.259 --> 00:17:17.050
slightly different.

00:17:17.050 --> 00:17:19.319
You can see that we can
change a lot of the elements

00:17:19.319 --> 00:17:21.200
to give you a look and feel.

00:17:21.200 --> 00:17:22.575
But we're not
reorganizing stuff.

00:17:22.575 --> 00:17:24.408
Because like I said,
we don't change layout.

00:17:24.408 --> 00:17:26.940
So the user's still going to
be comfortable with the UI.

00:17:26.940 --> 00:17:28.040
They just get a
different look and feel.

00:17:28.040 --> 00:17:28.740
They make it their own.

00:17:28.740 --> 00:17:30.340
And that's what
themes is all about.

00:17:30.340 --> 00:17:32.990
So now that we see how
themes works, and we

00:17:32.990 --> 00:17:35.070
know how to apply theme
and see how it goes,

00:17:35.070 --> 00:17:37.570
Kover here is going to let you
guys know how to make a theme

00:17:37.570 --> 00:17:39.874
and actually get it published.

00:17:39.874 --> 00:17:40.790
DAVE KOVER: All right.

00:17:40.790 --> 00:17:44.680
So Clark just told you about
how themes actually work,

00:17:44.680 --> 00:17:48.790
and now we're going to talk
about how to design themes.

00:17:48.790 --> 00:17:50.750
So what goes into a theme?

00:17:50.750 --> 00:17:52.160
We have nine
different components

00:17:52.160 --> 00:17:55.150
that you're able to include
inside a theme on Cyanogen.

00:17:55.150 --> 00:17:57.740
So we have lock screen, boot
animation, notifications,

00:17:57.740 --> 00:18:00.210
ringtones, alarms,
fonts, overlays, icons,

00:18:00.210 --> 00:18:01.319
and wallpapers.

00:18:01.319 --> 00:18:03.860
Some of those are really simple
swaps, where it's one-to-one.

00:18:03.860 --> 00:18:05.230
So something like
the lock screen.

00:18:05.230 --> 00:18:07.426
Right now, we currently allow
you to change the wallpaper

00:18:07.426 --> 00:18:08.250
on a lock screen.

00:18:08.250 --> 00:18:11.360
So it's as simple as including a
new wallpaper within the theme,

00:18:11.360 --> 00:18:12.900
and when the user
applies the theme,

00:18:12.900 --> 00:18:14.270
you'll have that wallpaper.

00:18:14.270 --> 00:18:15.690
That same type of
one-to-one swap

00:18:15.690 --> 00:18:18.140
happens with the boot
animation, notification sound,

00:18:18.140 --> 00:18:19.810
ringtone sound, alarms.

00:18:19.810 --> 00:18:21.450
Fonts, it can a little fun.

00:18:21.450 --> 00:18:24.190
So you can include a
completely different font

00:18:24.190 --> 00:18:26.070
and have that work
throughout the system.

00:18:26.070 --> 00:18:27.560
But the cool thing
about fonts now

00:18:27.560 --> 00:18:30.110
is that you can actually
change the font per weight.

00:18:30.110 --> 00:18:33.280
So for your bold
characters you might want

00:18:33.280 --> 00:18:34.754
to have like a different font?

00:18:34.754 --> 00:18:35.420
You can do that.

00:18:35.420 --> 00:18:37.350
You can include a font and
have that one called out

00:18:37.350 --> 00:18:37.891
specifically.

00:18:37.891 --> 00:18:40.650
Maybe for italics, you want
to get a nice script font?

00:18:40.650 --> 00:18:41.650
You could have that too.

00:18:41.650 --> 00:18:43.316
So you could have
that kind of diversity

00:18:43.316 --> 00:18:45.860
within the system that will
work throughout the entirety.

00:18:45.860 --> 00:18:49.550
So if an app says, hey, I
want this italic weight,

00:18:49.550 --> 00:18:51.000
your font will be
provided there.

00:18:51.000 --> 00:18:54.720
So that's a really cool
thing that we offer.

00:18:54.720 --> 00:18:56.590
Of all of these
components, the ones

00:18:56.590 --> 00:18:58.800
that have the biggest
visual impact for users

00:18:58.800 --> 00:19:01.210
are the overlays, the
icons, and the wallpapers.

00:19:01.210 --> 00:19:03.990
So wallpapers, pretty simple
just like the lock screen.

00:19:03.990 --> 00:19:06.189
If you include a wallpaper
within your theme,

00:19:06.189 --> 00:19:06.730
it will work.

00:19:06.730 --> 00:19:10.100
And actually, in our latest
12.1 release of CyanogenOS,

00:19:10.100 --> 00:19:12.240
you can actually include
multiple wallpapers now

00:19:12.240 --> 00:19:14.531
that a user will be able to
choose through in the Theme

00:19:14.531 --> 00:19:16.440
Chooser that we saw earlier.

00:19:16.440 --> 00:19:17.594
So let's talk about icons.

00:19:17.594 --> 00:19:19.010
Now we all know
that's how we have

00:19:19.010 --> 00:19:21.290
to interact with the
applications on our device.

00:19:21.290 --> 00:19:23.790
If you want to get into Twitter,
you got to click that icon.

00:19:23.790 --> 00:19:26.190
You want to get into
Facebook, you click the icon.

00:19:26.190 --> 00:19:29.030
So that's a really big piece
of the visual landscape

00:19:29.030 --> 00:19:31.120
when a user is interacting
on your device.

00:19:31.120 --> 00:19:35.860
So with themes, you can actually
create unique icon sets that

00:19:35.860 --> 00:19:37.320
work to match the
rest of the look

00:19:37.320 --> 00:19:40.320
and feel that you're going,
and it's literally however

00:19:40.320 --> 00:19:41.960
your imagination wants to be.

00:19:41.960 --> 00:19:43.710
You can sit there
and go and create

00:19:43.710 --> 00:19:45.540
just a whole different
look for each one,

00:19:45.540 --> 00:19:49.710
and craft each one individually
to have that unique feel.

00:19:49.710 --> 00:19:53.720
Now, let's say you don't want
to have to make 1,000 icons,

00:19:53.720 --> 00:19:55.810
because that's
just a lot of work.

00:19:55.810 --> 00:19:59.610
We offer the ability to compose
icons using a couple images,

00:19:59.610 --> 00:20:04.050
and they'll be able to cover
an unlimited amount of icons.

00:20:04.050 --> 00:20:05.960
So what you see
here is essentially

00:20:05.960 --> 00:20:07.574
a sandwich of layers, right?

00:20:07.574 --> 00:20:09.740
So we start at the bottom
with our little back plate

00:20:09.740 --> 00:20:10.365
down here.

00:20:10.365 --> 00:20:12.490
And what happens is you
can create this back plate.

00:20:12.490 --> 00:20:14.281
And that's going to be
the first thing that

00:20:14.281 --> 00:20:15.354
gets put into the canvas.

00:20:15.354 --> 00:20:16.770
The next thing
you're going to see

00:20:16.770 --> 00:20:19.620
would be the icon
that is provided

00:20:19.620 --> 00:20:21.190
by the separate application.

00:20:21.190 --> 00:20:23.770
So again like Facebook,
that's the icon from Facebook.

00:20:23.770 --> 00:20:26.040
And then you can create
this masking layer.

00:20:26.040 --> 00:20:29.510
So what a mask does is it
allows you to essentially create

00:20:29.510 --> 00:20:31.920
a space that you
only want to show.

00:20:31.920 --> 00:20:35.070
So if you wanted like a star,
you could create the star,

00:20:35.070 --> 00:20:37.947
and the star inside is the
only bit that's going to show,

00:20:37.947 --> 00:20:40.030
and then it's like you
scissor out the rest of it.

00:20:40.030 --> 00:20:41.515
So from this one, it
looks like a fingerprint,

00:20:41.515 --> 00:20:42.610
and that's what's
going to see, and I'll

00:20:42.610 --> 00:20:43.880
show you that in a second.

00:20:43.880 --> 00:20:46.090
And then on the top bit
would be an overlay.

00:20:46.090 --> 00:20:47.965
So maybe you could do
something like you want

00:20:47.965 --> 00:20:49.580
to create a diver's helmet.

00:20:49.580 --> 00:20:51.940
So you could have the background
of the diver's helmet,

00:20:51.940 --> 00:20:53.810
have that icon on
the center part,

00:20:53.810 --> 00:20:56.410
and then you could actually
stamp the visor over it

00:20:56.410 --> 00:20:57.900
and have this kind
of glassy look

00:20:57.900 --> 00:21:00.820
that would cover the top of it,
giving this really cool look.

00:21:00.820 --> 00:21:04.310
So you've made all those
layers, how do those work?

00:21:04.310 --> 00:21:05.760
It's really, really simple.

00:21:05.760 --> 00:21:07.670
Within the Icons
component, there's

00:21:07.670 --> 00:21:09.390
a file called the App Filter.

00:21:09.390 --> 00:21:11.400
And with just these
four lines right here,

00:21:11.400 --> 00:21:14.350
we can create this system
where we have the icon back

00:21:14.350 --> 00:21:17.570
plate that we made earlier, the
mask, as well as the overlay.

00:21:17.570 --> 00:21:19.640
And then there's an
additional attribute

00:21:19.640 --> 00:21:21.110
called the scale factor.

00:21:21.110 --> 00:21:24.950
So you can actually scale
the stock icons up or down

00:21:24.950 --> 00:21:26.380
to fit your needs.

00:21:26.380 --> 00:21:28.740
So if you want them to be
up to fill out the space

00:21:28.740 --> 00:21:30.320
that you're going to be
cutting out with the mask,

00:21:30.320 --> 00:21:32.403
you can scale them up a
bit, like we've done here,

00:21:32.403 --> 00:21:34.040
to make sure that
some of the edges

00:21:34.040 --> 00:21:36.286
are still within the masking.

00:21:36.286 --> 00:21:37.910
So what would that
look like on device?

00:21:37.910 --> 00:21:40.301
Well, those layers that we
just had two slides ago,

00:21:40.301 --> 00:21:42.800
this is what they look like
when they get composed together.

00:21:42.800 --> 00:21:47.210
So for four images, you're able
to get a unique icon set that

00:21:47.210 --> 00:21:49.780
will scale up to
however many apps

00:21:49.780 --> 00:21:51.920
that a user has installed
on their device.

00:21:51.920 --> 00:21:55.380
So it's just a really simple
way to get maximum coverage

00:21:55.380 --> 00:21:59.250
and still have a themed
look on your device.

00:21:59.250 --> 00:22:01.140
So we talked about icons.

00:22:01.140 --> 00:22:02.650
Let's talk about overlays.

00:22:02.650 --> 00:22:03.870
What's an overlay?

00:22:03.870 --> 00:22:06.510
Well, so for every package
on the user's device,

00:22:06.510 --> 00:22:09.250
there's going to
be resources that

00:22:09.250 --> 00:22:11.020
are specific to that package.

00:22:11.020 --> 00:22:12.729
So the theme is able
to break these down.

00:22:12.729 --> 00:22:14.644
So you'll have your tree
structure, which will

00:22:14.644 --> 00:22:16.030
have the assets, your overlays.

00:22:16.030 --> 00:22:17.905
And then you're going
to be able to call out.

00:22:17.905 --> 00:22:19.700
So every app has a package name.

00:22:19.700 --> 00:22:22.990
So if it was the system UI,
which is your Pulldown Bars,

00:22:22.990 --> 00:22:25.360
com.android.systemui.

00:22:25.360 --> 00:22:27.680
And the same thing for the
Phone and for Settings.

00:22:27.680 --> 00:22:29.930
Each one of those is going
to be a separate overlay

00:22:29.930 --> 00:22:33.330
directory where you'll be able
to house the specific resources

00:22:33.330 --> 00:22:34.390
for that one.

00:22:34.390 --> 00:22:36.760
So we'll dive into that just
a little further right now.

00:22:36.760 --> 00:22:39.410
But, I want to talk
about Common first.

00:22:39.410 --> 00:22:44.230
Now Common is a unique
feature to our theme engine

00:22:44.230 --> 00:22:46.470
that allows you to have
a central location that's

00:22:46.470 --> 00:22:49.220
accessible to all of
the other application

00:22:49.220 --> 00:22:51.110
overlays within the theme.

00:22:51.110 --> 00:22:54.442
So if you're going to
be using a single color

00:22:54.442 --> 00:22:56.900
throughout your theme, maybe
you want to make a blue theme.

00:22:56.900 --> 00:22:59.000
What you can do is you
can include the blue color

00:22:59.000 --> 00:23:03.299
within your Common overlay,
and then reference that value

00:23:03.299 --> 00:23:04.340
in all of the other ones.

00:23:04.340 --> 00:23:07.880
So instead of having to say,
like your hex code is whatever

00:23:07.880 --> 00:23:10.440
it is, you don't have to put
that in every specific overlay.

00:23:10.440 --> 00:23:12.034
You could put it
in one location,

00:23:12.034 --> 00:23:13.450
and then tweak
that in the future.

00:23:13.450 --> 00:23:16.160
So you've been working on
this for a couple weeks,

00:23:16.160 --> 00:23:19.560
and you realize that blue
is just not saturated right.

00:23:19.560 --> 00:23:22.730
So all you have to do is
update in the one location,

00:23:22.730 --> 00:23:25.040
and it'll populate throughout
the rest of the theme,

00:23:25.040 --> 00:23:27.040
and you won't have to
worry about it after that.

00:23:27.040 --> 00:23:30.400
And again this common
folder is magical.

00:23:30.400 --> 00:23:33.530
It works with everything--
drawables, styles, colors,

00:23:33.530 --> 00:23:34.120
dimensions.

00:23:34.120 --> 00:23:36.612
You could put anything that
the theme engine can cover,

00:23:36.612 --> 00:23:37.570
you could put in there.

00:23:37.570 --> 00:23:40.090
And that's going to allow you
to save space in your theme,

00:23:40.090 --> 00:23:41.964
because you're not going
to have to duplicate

00:23:41.964 --> 00:23:43.640
the same thing over and over.

00:23:43.640 --> 00:23:46.990
So let's look at how an
overlay might get put together.

00:23:46.990 --> 00:23:49.730
So here we have Settings.

00:23:49.730 --> 00:23:51.870
So what are some of
the items on here?

00:23:51.870 --> 00:23:53.682
Well, we have the ActionBar.

00:23:53.682 --> 00:23:55.390
In particular, this
ActionBar is actually

00:23:55.390 --> 00:23:59.060
going to be controlled by
a style within the app.

00:23:59.060 --> 00:24:03.030
So we look here, and so a
big part of creating a theme

00:24:03.030 --> 00:24:05.040
is actually having to
dive in and look how

00:24:05.040 --> 00:24:07.460
each application is made up.

00:24:07.460 --> 00:24:10.680
And luckily enough,
most of the source

00:24:10.680 --> 00:24:12.180
is available right
on GitHub, so you

00:24:12.180 --> 00:24:15.170
can go in and see how Settings
is made, how Dialer is made,

00:24:15.170 --> 00:24:15.850
and so forth.

00:24:15.850 --> 00:24:17.683
So for this, one for
the ActionBar, to theme

00:24:17.683 --> 00:24:20.510
this one, what we're going to
do is the pre-existing style,

00:24:20.510 --> 00:24:23.310
Theme.ActionBar is
part of the settings.

00:24:23.310 --> 00:24:25.830
Because we want to have a
reusable ActionBar that we

00:24:25.830 --> 00:24:27.470
can use in some other
different styles,

00:24:27.470 --> 00:24:29.570
were actually going to
create our own style

00:24:29.570 --> 00:24:31.009
called Cyngn.ActionBar.

00:24:31.009 --> 00:24:32.550
And that's going to
allow us to cover

00:24:32.550 --> 00:24:34.890
all the different
visual aspects of this.

00:24:34.890 --> 00:24:37.410
So we'll be able to
change the background,

00:24:37.410 --> 00:24:39.930
normally this is an
elevated ActionBar,

00:24:39.930 --> 00:24:42.225
but you can set that
elevation value to zero,

00:24:42.225 --> 00:24:43.600
and be able to
get that back down

00:24:43.600 --> 00:24:46.180
on the same plane as the rest
of the settings, and so forth.

00:24:46.180 --> 00:24:50.030
And you'll even see we make use
the common styles over here.

00:24:50.030 --> 00:24:53.064
So that's for the
text right up here.

00:24:53.064 --> 00:24:54.730
We actually have that
put in the Common,

00:24:54.730 --> 00:24:57.890
so if I want to go into
like the Messaging app,

00:24:57.890 --> 00:24:59.590
I can reference that
same style and I'll

00:24:59.590 --> 00:25:01.210
know that my title
text is going to be

00:25:01.210 --> 00:25:04.329
the same across every
single app that I'm theming.

00:25:04.329 --> 00:25:06.120
What are some other
aspects that we can do?

00:25:06.120 --> 00:25:08.690
Well, so we have all of
these icons right here.

00:25:08.690 --> 00:25:11.380
So in this case, these are
actually vector drawables.

00:25:11.380 --> 00:25:12.360
And we have those.

00:25:12.360 --> 00:25:13.818
So each one of
these is going to be

00:25:13.818 --> 00:25:16.930
a file that has all of the point
data that makes up the shape.

00:25:16.930 --> 00:25:18.550
And again, you'll
see that we actually

00:25:18.550 --> 00:25:19.960
have that common folder, again.

00:25:19.960 --> 00:25:20.987
So we have a color.

00:25:20.987 --> 00:25:23.070
So each one of these is
going to be using a color,

00:25:23.070 --> 00:25:25.070
and we just reference
that in the common folder.

00:25:25.070 --> 00:25:27.403
And again, so if you don't
like the way that green looks

00:25:27.403 --> 00:25:29.105
anymore, you can
change it one time

00:25:29.105 --> 00:25:31.160
and it's going to work
in all of those files.

00:25:31.160 --> 00:25:34.080
You don't have to go through
30 different image vector

00:25:34.080 --> 00:25:35.999
drawables, and be
like, I didn't like

00:25:35.999 --> 00:25:38.040
that one, let me change
the hex code again, Nope.

00:25:38.040 --> 00:25:40.205
Nice and easy and simple
with the common folder.

00:25:40.205 --> 00:25:41.330
What are some other things?

00:25:41.330 --> 00:25:43.780
Well, let's look at how
this is really composed.

00:25:43.780 --> 00:25:47.170
So this entire screen is going
to be using this style called

00:25:47.170 --> 00:25:49.586
Theme.SettingsBase.

00:25:49.586 --> 00:25:50.960
There's a lot of
different things

00:25:50.960 --> 00:25:52.970
here, so I know it looks
a little-- but, once you

00:25:52.970 --> 00:25:55.000
start doing it a lot, it
actually starts to make sense.

00:25:55.000 --> 00:25:56.541
So there's different
effects that you

00:25:56.541 --> 00:25:58.930
can control like the
color background, right?

00:25:58.930 --> 00:26:01.460
So I'm pointing that to a common
value, theme background, so

00:26:01.460 --> 00:26:04.270
that way in every app,
I can make my background

00:26:04.270 --> 00:26:07.590
color the same, because again,
I'm using that common folder.

00:26:07.590 --> 00:26:10.112
I think you're going to
start to see the theme here.

00:26:10.112 --> 00:26:12.320
Same thing with everything
else, like the theme edge.

00:26:12.320 --> 00:26:13.830
So that's like when
you do the overscroll,

00:26:13.830 --> 00:26:15.454
it does a little bit
of a color, that's

00:26:15.454 --> 00:26:17.200
something you can also control.

00:26:17.200 --> 00:26:20.640
It's pretty much every
aspect on the screen

00:26:20.640 --> 00:26:22.820
is tweakable within a
theme, and you can really

00:26:22.820 --> 00:26:26.286
create this custom look that
just really just is different.

00:26:26.286 --> 00:26:27.660
So there's some
other stuff, too.

00:26:27.660 --> 00:26:29.070
We've been talking about colors.

00:26:29.070 --> 00:26:30.330
What about dimensions?

00:26:30.330 --> 00:26:32.600
So you can do things
like the elevation.

00:26:32.600 --> 00:26:35.600
So normally, in
the Lollipop theme,

00:26:35.600 --> 00:26:38.530
all those categories are
actually lifted up as cards.

00:26:38.530 --> 00:26:40.030
But for this one,
we've actually set

00:26:40.030 --> 00:26:41.350
those against the background.

00:26:41.350 --> 00:26:43.870
So we did that by changing
the elevation value.

00:26:43.870 --> 00:26:46.920
There's other things
like padding and margins.

00:26:46.920 --> 00:26:48.900
And you just tweak each
one just a little bit

00:26:48.900 --> 00:26:50.775
and it allows you to
get this different look.

00:26:50.775 --> 00:26:53.602
So we go from this
look, back to the stock,

00:26:53.602 --> 00:26:54.810
and then back to what we did.

00:26:54.810 --> 00:26:57.260
So you can see, it's
actually really different.

00:26:57.260 --> 00:26:59.510
You can see we compressed
each of the line items.

00:26:59.510 --> 00:27:01.190
We've got different colors.

00:27:01.190 --> 00:27:02.575
All the spacing is different.

00:27:02.575 --> 00:27:04.950
And it really gives you this
is a unique look that you're

00:27:04.950 --> 00:27:08.377
able to achieve that if
you don't like it anymore,

00:27:08.377 --> 00:27:09.210
you can turn it off.

00:27:09.210 --> 00:27:11.555
And you don't have to, run
anything like a new ROM.

00:27:11.555 --> 00:27:13.420
You don't have to
reset any settings.

00:27:13.420 --> 00:27:16.130
It's easy as just
switching it off.

00:27:16.130 --> 00:27:20.670
And so sometimes, there's going
to be some cross-pollination

00:27:20.670 --> 00:27:22.280
when it comes to
elements that are

00:27:22.280 --> 00:27:23.446
something you have to theme.

00:27:23.446 --> 00:27:25.976
So in this instance, majority
of what's on the screen

00:27:25.976 --> 00:27:27.600
is going to be within
the Settings app.

00:27:27.600 --> 00:27:30.450
But there are a few things,
such as these switches

00:27:30.450 --> 00:27:32.260
and that search icon
which aren't going

00:27:32.260 --> 00:27:33.860
to be within the Settings app.

00:27:33.860 --> 00:27:35.735
For something like that,
you're going to also

00:27:35.735 --> 00:27:36.930
have to theme framework.

00:27:36.930 --> 00:27:39.420
Because controls
like radio buttons,

00:27:39.420 --> 00:27:42.410
check boxes, all originate
within the Android framework.

00:27:42.410 --> 00:27:44.995
So you don't always get
to do just one overlay

00:27:44.995 --> 00:27:46.620
to get the whole
entire look, sometimes

00:27:46.620 --> 00:27:49.224
you're going to have to go
outside the box and say,

00:27:49.224 --> 00:27:50.390
well I also have frameworks.

00:27:50.390 --> 00:27:51.973
So you need to
consider how it's going

00:27:51.973 --> 00:27:56.200
to look in all the different
ones that you're theming.

00:27:56.200 --> 00:27:59.830
So that was just really
a big brief overview

00:27:59.830 --> 00:28:02.250
of what goes into
creating a theme.

00:28:02.250 --> 00:28:07.020
There's a ton of
styles and colors

00:28:07.020 --> 00:28:09.120
and values that are out
there for you to tweak.

00:28:09.120 --> 00:28:11.270
And it's really just about
diving in and seeing all those.

00:28:11.270 --> 00:28:13.730
So, here's a couple things to
keep in mind, should you want

00:28:13.730 --> 00:28:14.982
to get started and do this.

00:28:14.982 --> 00:28:16.940
You want to try to reuse
your styles and colors

00:28:16.940 --> 00:28:18.120
via that common folder.

00:28:18.120 --> 00:28:20.150
Again, this is unique
to our theme engine,

00:28:20.150 --> 00:28:21.910
and it's really
useful for making sure

00:28:21.910 --> 00:28:23.580
that you don't have to do
more work in the future

00:28:23.580 --> 00:28:25.040
when it comes to
tweaking things.

00:28:25.040 --> 00:28:27.670
And this even allows you to
create variants of a theme.

00:28:27.670 --> 00:28:30.099
Maybe you want to do a red
version, you really liked it.

00:28:30.099 --> 00:28:31.640
So if you set
everything up correctly

00:28:31.640 --> 00:28:33.820
using this common
folder, you can just

00:28:33.820 --> 00:28:35.600
go in, tweak everything
within there,

00:28:35.600 --> 00:28:39.480
and have like a different color
available, just like that.

00:28:39.480 --> 00:28:40.240
Vector drawables.

00:28:40.240 --> 00:28:44.260
These were recently introduced
with Lollipop API 21,

00:28:44.260 --> 00:28:46.130
and they are fantastic.

00:28:46.130 --> 00:28:47.950
If you're not familiar
with how Android

00:28:47.950 --> 00:28:49.610
handles different
resolutions, it

00:28:49.610 --> 00:28:51.110
creates these different buckets.

00:28:51.110 --> 00:28:52.740
So you'll have
like drawable-hdpi.

00:28:52.740 --> 00:28:54.710
That'll be for
like an HD screen.

00:28:54.710 --> 00:28:56.560
You'll have drawable-xxhdpi.

00:28:56.560 --> 00:28:58.170
That'll be for like a QHD.

00:28:58.170 --> 00:29:00.160
And so what vector
drawables do, they

00:29:00.160 --> 00:29:01.957
allow you to create
a single image

00:29:01.957 --> 00:29:03.540
that you place in
drawable, and that's

00:29:03.540 --> 00:29:07.210
going to scale up and down
based on your resolution needs,

00:29:07.210 --> 00:29:10.340
allowing you to create
only one drawable,

00:29:10.340 --> 00:29:13.942
and then have it look like
pixel-perfect on every device.

00:29:13.942 --> 00:29:16.150
Otherwise, you're going to
have to sit there and make

00:29:16.150 --> 00:29:17.899
each version, if you
want it to look good.

00:29:17.899 --> 00:29:20.510
You could opt to go for a larger
one and have it scale down,

00:29:20.510 --> 00:29:24.180
but this will give you
the most crisp results.

00:29:24.180 --> 00:29:25.080
Framework styles.

00:29:25.080 --> 00:29:27.840
Now, I did mention that you have
to do some things in framework.

00:29:27.840 --> 00:29:30.030
Your controls, there's
no other way to do that.

00:29:30.030 --> 00:29:31.760
But there are
styles in frameworks

00:29:31.760 --> 00:29:34.121
such as like Theme.Material,
Theme.Material.Light--

00:29:34.121 --> 00:29:36.120
you don't want to mess
with those, because those

00:29:36.120 --> 00:29:38.530
can cause conflict in apps
that you're not specifically

00:29:38.530 --> 00:29:39.250
theming.

00:29:39.250 --> 00:29:43.030
So maybe you had Settings, which
was using Theme.Material.Light,

00:29:43.030 --> 00:29:45.350
and you're like, oh, I want
this text to be white here,

00:29:45.350 --> 00:29:47.207
and you go and change
it in the framework.

00:29:47.207 --> 00:29:49.790
What will happen is, you may get
like a Reddit app that's also

00:29:49.790 --> 00:29:50.800
using that, and
then you're going

00:29:50.800 --> 00:29:52.960
to end up with white text
on a white background.

00:29:52.960 --> 00:29:54.670
And that's not going to
look good for the user.

00:29:54.670 --> 00:29:56.920
So you want to try to avoid
messing with the framework

00:29:56.920 --> 00:29:59.030
styles, and handle
everything within an app.

00:29:59.030 --> 00:30:00.947
You can still point to
those framework styles,

00:30:00.947 --> 00:30:03.530
but you want to make sure that
you're doing most of your edits

00:30:03.530 --> 00:30:05.200
within each one so
that way you don't

00:30:05.200 --> 00:30:07.630
do any conflicts with apps
that you're not specifically

00:30:07.630 --> 00:30:08.370
covering.

00:30:08.370 --> 00:30:10.310
And if anybody's an app
developer out there,

00:30:10.310 --> 00:30:14.340
you can help themers by not
putting your resources directly

00:30:14.340 --> 00:30:15.250
within a layout.

00:30:15.250 --> 00:30:16.560
So if you have a text view?

00:30:16.560 --> 00:30:20.290
Don't just put a hex color right
there inside your layout file,

00:30:20.290 --> 00:30:23.030
or point to like a
framework color that you

00:30:23.030 --> 00:30:24.620
don't want them to change.

00:30:24.620 --> 00:30:27.930
Point it into a colors XML,
or dimensions, or something

00:30:27.930 --> 00:30:30.340
like that because otherwise,
themers can't touch it,

00:30:30.340 --> 00:30:32.500
and that makes everybody sad.

00:30:32.500 --> 00:30:35.290
So seriously, keep
it out of layouts.

00:30:35.290 --> 00:30:37.910
But so yeah, so that's pretty
much a basic overview themes.

00:30:37.910 --> 00:30:39.740
There's a lot to
dive into in and see.

00:30:39.740 --> 00:30:42.323
And basically, the best way to
get started is just to dive in.

00:30:42.323 --> 00:30:44.150
So we have a template
available on GitHub.

00:30:44.150 --> 00:30:48.059
That's github.com/cyngn,
android packages teams template.

00:30:48.059 --> 00:30:49.850
If you just search
Cyanogen theme template,

00:30:49.850 --> 00:30:53.910
it'll come up in Google
search, first result.

00:30:53.910 --> 00:30:54.852
But yeah, that's it.

00:30:54.852 --> 00:30:56.310
I'm going to turn
it over to Clark,

00:30:56.310 --> 00:30:58.840
who's going to tell you about
the next big thing coming

00:30:58.840 --> 00:30:59.952
to CyanogenOS.

00:30:59.952 --> 00:31:02.410
CLARK SCHEFF: Those of you that
are here, just want to say,

00:31:02.410 --> 00:31:04.743
this is the first time that
we're showing this publicly,

00:31:04.743 --> 00:31:06.200
so you guys are
privy to something

00:31:06.200 --> 00:31:09.830
that hasn't been seen outside
Cyanogen, our offices itself.

00:31:09.830 --> 00:31:11.250
So I'm really excited.

00:31:11.250 --> 00:31:13.470
I'm humbled to be able to
be the one to present this,

00:31:13.470 --> 00:31:15.740
because I love this feature.

00:31:15.740 --> 00:31:16.480
It's really cool.

00:31:16.480 --> 00:31:17.980
I hope you guys are
going to feel the same.

00:31:17.980 --> 00:31:19.646
So let me just go
ahead and get started.

00:31:19.646 --> 00:31:23.430
And let me start by saying,
there's one part of the OS

00:31:23.430 --> 00:31:27.280
we saw that users interact
with all the time.

00:31:27.280 --> 00:31:31.780
You see this screen, this
layout on a regular basis.

00:31:31.780 --> 00:31:33.750
I don't have statistics,
but you're probably

00:31:33.750 --> 00:31:36.120
doing it at least once an
hour, if not almost every five

00:31:36.120 --> 00:31:37.420
minutes or so.

00:31:37.420 --> 00:31:41.180
So that is the lock screen.

00:31:41.180 --> 00:31:44.070
So what we've
proposing is a project

00:31:44.070 --> 00:31:46.030
called Live Lock Screen.

00:31:46.030 --> 00:31:49.260
Now we took a look at the
standard lock screen and said,

00:31:49.260 --> 00:31:50.432
well what can we do with it?

00:31:50.432 --> 00:31:52.140
Well, we need to
understand how it works,

00:31:52.140 --> 00:31:56.540
and what's the problems
with it, and so forth.

00:31:56.540 --> 00:31:57.990
So first thing, it's functional.

00:31:57.990 --> 00:31:59.327
So that's not a downside.

00:31:59.327 --> 00:31:59.910
That's a plus.

00:31:59.910 --> 00:32:00.630
It's functional.

00:32:00.630 --> 00:32:01.680
It serves a purpose.

00:32:01.680 --> 00:32:02.940
You've got your time.

00:32:02.940 --> 00:32:04.010
You've got notifications.

00:32:04.010 --> 00:32:05.718
You've got stuff that's
important to you.

00:32:05.718 --> 00:32:07.690
So it has that for it.

00:32:07.690 --> 00:32:08.930
But it's static, right?

00:32:08.930 --> 00:32:11.700
You turn it on, you see
the same screen every time.

00:32:11.700 --> 00:32:12.600
You see your clock.

00:32:12.600 --> 00:32:15.270
You see the same image.

00:32:15.270 --> 00:32:16.920
With CyanogenMod, we
did allow the user

00:32:16.920 --> 00:32:18.420
to change the lock
screen wallpaper.

00:32:18.420 --> 00:32:20.840
But again, you're seeing that
same lock screen wallpaper

00:32:20.840 --> 00:32:22.923
every time you turn your
screen on until you go in

00:32:22.923 --> 00:32:25.810
and change that, so
it's always the same.

00:32:25.810 --> 00:32:27.477
And to us, that's boring.

00:32:27.477 --> 00:32:29.560
We're all about customization
and personalization,

00:32:29.560 --> 00:32:31.520
and we want to bring
that tto the lock screen.

00:32:31.520 --> 00:32:32.660
When you turn that
phone on, we want

00:32:32.660 --> 00:32:33.785
you to at least enjoy that.

00:32:33.785 --> 00:32:36.060
Even if it's for brief
moment, it should be fun,

00:32:36.060 --> 00:32:38.580
it should be entertaining,
it should be lively.

00:32:38.580 --> 00:32:41.791
So this is where we come up
with the Live Lock Screen.

00:32:41.791 --> 00:32:43.040
It still has to be functional.

00:32:43.040 --> 00:32:44.620
There's no doubt
about that, right?

00:32:44.620 --> 00:32:46.250
We still have to provide
a lot of the information

00:32:46.250 --> 00:32:47.916
that you see on your
normal lock screen.

00:32:47.916 --> 00:32:49.280
We're accustomed to that.

00:32:49.280 --> 00:32:51.450
But it doesn't have to
just stay at that point.

00:32:51.450 --> 00:32:52.590
We want it to be dynamic.

00:32:52.590 --> 00:32:53.710
It can be lively.

00:32:53.710 --> 00:32:57.230
The idea is a lock
screen comes to life.

00:32:57.230 --> 00:32:59.210
It becomes something
more than just

00:32:59.210 --> 00:33:02.500
that screen that you see
when you turn your phone on.

00:33:02.500 --> 00:33:04.210
And with this,
the customization,

00:33:04.210 --> 00:33:07.310
it's really limited by the
theme designer's imagination.

00:33:07.310 --> 00:33:10.900
We're trying to make this so
that it's as open as possible,

00:33:10.900 --> 00:33:14.380
so that these guys can
create some awesome content.

00:33:14.380 --> 00:33:16.549
And so every time you
yutn your screen on,

00:33:16.549 --> 00:33:17.840
we want it to be fresh and fun.

00:33:17.840 --> 00:33:21.235
And, depending on how they
implement their lock screens,

00:33:21.235 --> 00:33:23.360
it can be different every
time that you turn it on.

00:33:23.360 --> 00:33:26.060
It doesn't have
to stay the same.

00:33:26.060 --> 00:33:28.530
So we're trying to go
from what's on the left

00:33:28.530 --> 00:33:30.860
here to something
that's on the right.

00:33:30.860 --> 00:33:33.604
Where we've got vivid colors,
we're going to have animations,

00:33:33.604 --> 00:33:35.770
we've got time, we've got
stuff that we need to see,

00:33:35.770 --> 00:33:40.702
but it's going to be in a way
that we enjoy looking at it.

00:33:40.702 --> 00:33:42.410
When we're looking at
a Live Lock Screen,

00:33:42.410 --> 00:33:44.060
we were looking at a lot
of different technologies.

00:33:44.060 --> 00:33:44.851
How can we do this?

00:33:44.851 --> 00:33:47.690
And we needed to keep in mind
who's our user, in this case,

00:33:47.690 --> 00:33:48.940
for making a Live Lock Screen.

00:33:48.940 --> 00:33:50.148
Well, that's theme designers.

00:33:50.148 --> 00:33:52.300
That's guys that have
done stuff like this,

00:33:52.300 --> 00:33:53.780
but they're not
necessarily coders.

00:33:53.780 --> 00:33:55.434
They don't write
code, but they might

00:33:55.434 --> 00:33:57.350
have done something
that's similar to coding--

00:33:57.350 --> 00:34:00.680
or, it is coding, that is
Flash and ActionScript.

00:34:00.680 --> 00:34:03.290
So a lot of the stuff we did,
we actually went with a WebView.

00:34:03.290 --> 00:34:05.700
And we're using a lot of
frameworks and projects

00:34:05.700 --> 00:34:09.009
that have been
standardized and provide

00:34:09.009 --> 00:34:10.300
syntax similar to ActionScript.

00:34:10.300 --> 00:34:13.489
So we want guys that are
doing maybe Flash animations

00:34:13.489 --> 00:34:16.030
and stuff like that on webs to
be able to just jump right in.

00:34:16.030 --> 00:34:20.409
The barrier to entry, we
wanted it to be very small.

00:34:20.409 --> 00:34:22.150
The reason we went
with a WebView,

00:34:22.150 --> 00:34:23.520
is because we can use WebGL.

00:34:23.520 --> 00:34:25.320
We can use a canvas WebGL bat.

00:34:25.320 --> 00:34:27.850
We can use all these existing
libraries that are Flash-like,

00:34:27.850 --> 00:34:31.269
but not Flash,
because Flash is dead.

00:34:31.269 --> 00:34:33.310
And just in case the
hardware doesn't support it,

00:34:33.310 --> 00:34:37.473
this is also going
to use HTML5 canvas.

00:34:37.473 --> 00:34:39.889
So it's a normal canvas, if
the device doesn't support it.

00:34:39.889 --> 00:34:42.100
But if it does, it's going to be
hardware accelerated, and most

00:34:42.100 --> 00:34:44.016
of our demos we're doing
60 frames per second.

00:34:44.016 --> 00:34:47.741
And once I show it, it's pretty
awesome that we can do that.

00:34:47.741 --> 00:34:49.699
One thing is, though, it
needs to be sandboxed.

00:34:49.699 --> 00:34:50.650
It's a lock screen, right?

00:34:50.650 --> 00:34:52.344
We don't want to open
up a security hole

00:34:52.344 --> 00:34:54.239
where somebody can
access your information

00:34:54.239 --> 00:34:56.280
or they can access the internet.

00:34:56.280 --> 00:34:58.120
So even though it's
a WebView, there's

00:34:58.120 --> 00:34:59.120
no internet permissions.

00:34:59.120 --> 00:35:01.380
We've kept the permissions
down to the bare minimum

00:35:01.380 --> 00:35:03.720
to facilitate what we need
to do for a lock screen

00:35:03.720 --> 00:35:07.370
without compromising
the security.

00:35:07.370 --> 00:35:11.916
So we were able to
achieve this because newer

00:35:11.916 --> 00:35:14.040
versions of Android, they
introduced the JavaScript

00:35:14.040 --> 00:35:15.550
interface API.

00:35:15.550 --> 00:35:17.130
This basically allows
us to say, hey,

00:35:17.130 --> 00:35:19.820
we want to allow these methods
to have access in JavaScript,

00:35:19.820 --> 00:35:20.655
but nothing else.

00:35:20.655 --> 00:35:22.030
So we can actually
lock this down

00:35:22.030 --> 00:35:24.570
and say, give them the APIs
that we want them to have,

00:35:24.570 --> 00:35:25.866
and just that.

00:35:25.866 --> 00:35:28.240
There was a time in Android
where somebody could actually

00:35:28.240 --> 00:35:29.750
cleverly do some
JavaScript and get

00:35:29.750 --> 00:35:32.522
into any other class in Android
that they wanted access to,

00:35:32.522 --> 00:35:33.230
and that was bad.

00:35:33.230 --> 00:35:35.605
So that's where the JavaScript
interface came into place.

00:35:35.605 --> 00:35:37.500
So we make use of that.

00:35:37.500 --> 00:35:40.374
And we use it for things
like creating unlock methods.

00:35:40.374 --> 00:35:42.790
So it's a lock screen, they're
going to have to unlock it,

00:35:42.790 --> 00:35:45.810
but the way they unlock it is
still up to the theme designer.

00:35:45.810 --> 00:35:48.810
So it could be swipe left
to right, draw a circle,

00:35:48.810 --> 00:35:49.532
push a button.

00:35:49.532 --> 00:35:50.490
Who knows what that is.

00:35:50.490 --> 00:35:53.190
And so once the user
performs that action,

00:35:53.190 --> 00:35:54.000
they can unlock it.

00:35:54.000 --> 00:35:56.997
That could also unlock the
common apps like MMS, Browser,

00:35:56.997 --> 00:35:58.580
Phone, your Camera,
things that you're

00:35:58.580 --> 00:36:01.650
used to getting to you
from your lock screen.

00:36:01.650 --> 00:36:03.990
In addition to that, we
provide some of the basic data

00:36:03.990 --> 00:36:06.320
to the JavaScript side.

00:36:06.320 --> 00:36:07.560
We have the time, the date.

00:36:07.560 --> 00:36:08.870
Now, the time and
date they're formatted

00:36:08.870 --> 00:36:10.210
in the locale for
the user, so we

00:36:10.210 --> 00:36:12.520
return a string that's already
in the format that they need.

00:36:12.520 --> 00:36:13.978
If you have a 24
hour clock, you're

00:36:13.978 --> 00:36:15.820
going to see a 24 hour
clock on your screen,

00:36:15.820 --> 00:36:17.260
even if it's the
Live Lock Screen.

00:36:17.260 --> 00:36:19.593
And if you're in a different
locale, different language,

00:36:19.593 --> 00:36:21.405
it's going to be
formatted in that format.

00:36:21.405 --> 00:36:23.530
And then we have things
like battery level, battery

00:36:23.530 --> 00:36:25.238
charging, so you can
get stats like that.

00:36:25.238 --> 00:36:27.720
So the theme can show
different animations

00:36:27.720 --> 00:36:29.287
based on battery level.

00:36:29.287 --> 00:36:30.870
They can get things
like missed calls,

00:36:30.870 --> 00:36:32.180
and so it lets you
code different text,

00:36:32.180 --> 00:36:34.638
maybe a little bird flies and
says, you have missed tweets,

00:36:34.638 --> 00:36:36.700
something like.

00:36:36.700 --> 00:36:38.360
So because it's a
dynamic lock screen,

00:36:38.360 --> 00:36:40.400
we need to have
data that's dynamic.

00:36:40.400 --> 00:36:44.230
It needs to have some
way to be able to create

00:36:44.230 --> 00:36:45.680
this different
contact on the fly

00:36:45.680 --> 00:36:50.384
that changes with
time, date, weather.

00:36:50.384 --> 00:36:51.800
Some of those
things, like I said,

00:36:51.800 --> 00:36:53.629
there's battery state and level.

00:36:53.629 --> 00:36:55.170
But there's also,
we provide weather.

00:36:55.170 --> 00:36:57.810
So we can give the
JavaScript side,

00:36:57.810 --> 00:36:59.430
here's the weather
formatted in text,

00:36:59.430 --> 00:37:02.320
gives them the condition,
the city they're in.

00:37:02.320 --> 00:37:04.150
But we also have some
constants to find.

00:37:04.150 --> 00:37:06.239
We're using a Yahoo API
right now for the weather.

00:37:06.239 --> 00:37:08.280
And so there's all these
different constants that

00:37:08.280 --> 00:37:09.571
say what type of weather it is.

00:37:09.571 --> 00:37:11.480
It's a thunderstorm,
it's snowing outside.

00:37:11.480 --> 00:37:13.500
The theme could potentially
use that information

00:37:13.500 --> 00:37:15.687
and change what they're
showing you on the screen.

00:37:15.687 --> 00:37:17.270
So if it's thunderstorm
and lightning,

00:37:17.270 --> 00:37:19.436
you could have some animation
of lightning going on,

00:37:19.436 --> 00:37:21.842
and maybe you have to swipe
the lightning bolt away,

00:37:21.842 --> 00:37:22.800
or something like that.

00:37:22.800 --> 00:37:27.150
But I mean it provides a
lot more dynamic interface.

00:37:27.150 --> 00:37:31.440
Time of day-- one thing we added
in, we actually found this gem.

00:37:31.440 --> 00:37:33.816
Steve, our CTO, found this in
one of his projects he did.

00:37:33.816 --> 00:37:35.773
There's this thing called
the Twilight Service.

00:37:35.773 --> 00:37:38.660
Now, it's unfortunately not open
up to application developers.

00:37:38.660 --> 00:37:42.130
But what this does, it takes
the user's geolocation and time

00:37:42.130 --> 00:37:44.910
of day, and it can tell
us when the sunset is,

00:37:44.910 --> 00:37:46.910
when tomorrow's sunrise
is, and stuff like that.

00:37:46.910 --> 00:37:49.950
So we provided APIs that the
lock screen can use that stuff.

00:37:49.950 --> 00:37:52.420
So you can know when the
sun's going to be setting,

00:37:52.420 --> 00:37:54.130
so if you want to show a
night scene, you will know,

00:37:54.130 --> 00:37:56.270
hey, it's past sunset, so I
can go ahead and show the night

00:37:56.270 --> 00:37:56.730
scene.

00:37:56.730 --> 00:37:58.450
If sun is rising, you
can show an animation.

00:37:58.450 --> 00:38:00.533
Maybe the sun's starting
to come up on your screen

00:38:00.533 --> 00:38:02.390
as you turn it on,
stuff like that.

00:38:02.390 --> 00:38:03.570
We also have location.

00:38:03.570 --> 00:38:04.150
It's generic.

00:38:04.150 --> 00:38:05.410
It's just geolocation.

00:38:05.410 --> 00:38:08.280
So if somebody wanted act
on a specific lat/long

00:38:08.280 --> 00:38:09.872
to show something,
we provide that.

00:38:09.872 --> 00:38:12.080
And in addition to that,
since it's your lock screen,

00:38:12.080 --> 00:38:16.170
we want to show things like
missed calls, unread text

00:38:16.170 --> 00:38:17.190
messages, unread emails.

00:38:17.190 --> 00:38:18.319
So we have APIs for that.

00:38:18.319 --> 00:38:19.610
They can't read those messages.

00:38:19.610 --> 00:38:20.600
They can't read the
emails or anything.

00:38:20.600 --> 00:38:22.200
We're just providing
those numbers

00:38:22.200 --> 00:38:25.260
to let them know, hey, this is
how many unread emails this guy

00:38:25.260 --> 00:38:29.990
has, so if you want to display
some UI with that, go ahead.

00:38:29.990 --> 00:38:31.880
So one of things we
didn't want to do,

00:38:31.880 --> 00:38:33.460
we didn't want to
reinvent the wheel.

00:38:33.460 --> 00:38:34.960
We wanted to use things
that were already

00:38:34.960 --> 00:38:36.918
out there in the industry
that have been proven

00:38:36.918 --> 00:38:39.340
and they're very
popular, robust,

00:38:39.340 --> 00:38:42.380
and that also fit the
criteria we wanted-- something

00:38:42.380 --> 00:38:45.600
that was Flash or
ActionScript-esque so people

00:38:45.600 --> 00:38:47.310
would be able to use it quickly.

00:38:47.310 --> 00:38:50.990
Some of the technology we
ended up implementing-- we

00:38:50.990 --> 00:38:53.000
have pixi.js, which is
a graphic frameworks.

00:38:53.000 --> 00:38:54.833
It's supposed to be the
fastest kid in town,

00:38:54.833 --> 00:38:56.790
so we went with that one.

00:38:56.790 --> 00:38:58.720
There's a couple APIs
from this GreenSock

00:38:58.720 --> 00:39:00.250
that provide animation.

00:39:00.250 --> 00:39:03.590
So we have a TweenLight
library, and an EasePack that

00:39:03.590 --> 00:39:05.420
provide smooth animations,
and it can also

00:39:05.420 --> 00:39:07.878
change the rate of animations
to make them nice and smooth,

00:39:07.878 --> 00:39:11.190
and provide a much
better visual experience.

00:39:11.190 --> 00:39:13.585
And then because some lock
screens may want to do sounds,

00:39:13.585 --> 00:39:14.960
we brought in this
Buzz! library,

00:39:14.960 --> 00:39:17.460
which also facilitates
plain HTML sounds

00:39:17.460 --> 00:39:19.480
without them having to
do the work of adding

00:39:19.480 --> 00:39:21.610
an HTML5 audio element.

00:39:21.610 --> 00:39:24.822
So it's all been abstracted
and real easy to use.

00:39:24.822 --> 00:39:26.780
Real quick, I'm going to
go over some of these.

00:39:26.780 --> 00:39:29.440
So pixi.js, like I said, they
say they have the fastest

00:39:29.440 --> 00:39:31.420
kid in town, and so
far from the stuff

00:39:31.420 --> 00:39:33.870
that we've been doing with
these Live Lock Screens,

00:39:33.870 --> 00:39:35.390
we're getting 60
frames per second.

00:39:35.390 --> 00:39:37.211
So these things are
really fast, and it's

00:39:37.211 --> 00:39:38.710
being rendered on
OpenGL, so there's

00:39:38.710 --> 00:39:41.586
a lot you could do on the GPU.

00:39:41.586 --> 00:39:43.210
They provide multi-touch,
so all that's

00:39:43.210 --> 00:39:44.418
available via the JavaScript.

00:39:44.418 --> 00:39:45.640
So you can do touch events.

00:39:45.640 --> 00:39:49.620
You'll be able to do single,
multi, whatever you want to do.

00:39:49.620 --> 00:39:51.720
They also have a thing
called WebGL filters.

00:39:51.720 --> 00:39:54.210
These are basically what
are known as GPU shaders.

00:39:54.210 --> 00:39:56.540
So they can change
the way the images are

00:39:56.540 --> 00:39:57.640
being drawn on the screen.

00:39:57.640 --> 00:39:59.120
Maybe make something
look pixelated,

00:39:59.120 --> 00:40:00.100
they have filters for that.

00:40:00.100 --> 00:40:02.320
They have one that makes it
look like newspaper print.

00:40:02.320 --> 00:40:03.986
So you can apply these
right on the fly,

00:40:03.986 --> 00:40:06.854
with just a couple lines
of code and make it change.

00:40:06.854 --> 00:40:08.270
They provide tinting
and blending.

00:40:08.270 --> 00:40:09.460
So you can do all
the things you're

00:40:09.460 --> 00:40:11.540
used to with graphics,
fading stuff in and out,

00:40:11.540 --> 00:40:14.640
blending things together with
different colors, tinting them.

00:40:14.640 --> 00:40:16.240
There's sprite sheet support.

00:40:16.240 --> 00:40:18.610
So not everyone is
familiar with sprites,

00:40:18.610 --> 00:40:20.374
but it's common
in 2D video games

00:40:20.374 --> 00:40:22.290
where you could have a
whole set of animations

00:40:22.290 --> 00:40:24.730
that define the different
cells for that animation.

00:40:24.730 --> 00:40:27.464
So maybe a character running
across the screen, that's

00:40:27.464 --> 00:40:29.380
all loaded in one image
called a sprite sheet,

00:40:29.380 --> 00:40:31.590
and pixi allows you to
load that kind of stuff up.

00:40:31.590 --> 00:40:33.560
It does it via this asset
loader, which does it

00:40:33.560 --> 00:40:35.250
in the background,
so the lock screen

00:40:35.250 --> 00:40:36.660
can do other code while
images are loading,

00:40:36.660 --> 00:40:38.284
so they don't have
to waste cycles just

00:40:38.284 --> 00:40:39.810
spinning around
waiting for stuff.

00:40:39.810 --> 00:40:41.150
And of course, it supports text.

00:40:41.150 --> 00:40:45.380
And text can be your own fonts,
system fonts, and bitmap fonts.

00:40:45.380 --> 00:40:49.450
So sometimes you may not want
a font to just be flatter,

00:40:49.450 --> 00:40:52.380
just colored, or maybe shaded--
you want more texture to it.

00:40:52.380 --> 00:40:54.640
So you could provide
a whole bitmap

00:40:54.640 --> 00:40:56.490
that's got all the
different letters in it,

00:40:56.490 --> 00:40:58.300
and pixi will actually
draw your text

00:40:58.300 --> 00:41:00.270
using that mapping of letters.

00:41:02.880 --> 00:41:05.230
So like I said, we have a
couple APIs from GreenSocks.

00:41:05.230 --> 00:41:06.730
We use TweenLite and
EasePack, and this

00:41:06.730 --> 00:41:08.590
provides nice smooth
animations, similar to what

00:41:08.590 --> 00:41:10.006
Android does, as
well, when you're

00:41:10.006 --> 00:41:11.490
doing application development.

00:41:11.490 --> 00:41:14.895
TweenLite, it basically
takes a couple properties

00:41:14.895 --> 00:41:16.660
and it'll tween
them from an object.

00:41:16.660 --> 00:41:18.504
So say you have an
object, xy, it'll

00:41:18.504 --> 00:41:20.795
move it to this new position,
and you'd give it a time,

00:41:20.795 --> 00:41:22.337
and it'll do that
transition for you.

00:41:22.337 --> 00:41:24.294
All you do is say, hey,
I want you go from here

00:41:24.294 --> 00:41:26.460
to here in this time, and
it performs the animation

00:41:26.460 --> 00:41:30.000
without you having
to do any other work.

00:41:30.000 --> 00:41:31.650
This works in
conjunction with EasePack

00:41:31.650 --> 00:41:35.000
which actually provides ways for
that animation to be smoothed

00:41:35.000 --> 00:41:35.729
out a lot better.

00:41:35.729 --> 00:41:37.520
So instead of being
linear and just quickly

00:41:37.520 --> 00:41:38.980
moving from one
spot to the other,

00:41:38.980 --> 00:41:42.022
it can ramp up its speed, it
can bounce, it can stretch,

00:41:42.022 --> 00:41:44.480
it can do stuff that makes the
animation a lot more lively,

00:41:44.480 --> 00:41:46.060
and stuff that we're
used to in real life.

00:41:46.060 --> 00:41:48.601
Because things don't just move
and then stop at the position,

00:41:48.601 --> 00:41:49.720
they usually slow down.

00:41:49.720 --> 00:41:55.340
So EasePack helps make that
easier for the theme designer.

00:41:55.340 --> 00:41:56.090
And then Buzz!.

00:41:56.090 --> 00:41:57.420
Like I said, that plays sounds.

00:41:57.420 --> 00:41:59.770
It's a real easy API to use.

00:41:59.770 --> 00:42:02.810
I was reviewing a
couple other ones,

00:42:02.810 --> 00:42:04.950
and this one was like the
simplest out of all them.

00:42:04.950 --> 00:42:06.750
It provides basic functionality.

00:42:06.750 --> 00:42:11.324
You can load OGGs, WAVs, MP3s,
AACs, and as well as control

00:42:11.324 --> 00:42:12.240
all the playing of it.

00:42:12.240 --> 00:42:14.980
So you can loop it, you
can pause it, you can stop,

00:42:14.980 --> 00:42:17.697
you can mute it, you can
fade in the volume, set it

00:42:17.697 --> 00:42:18.530
to a specific value.

00:42:18.530 --> 00:42:19.845
So it provides a
lot of the stuff

00:42:19.845 --> 00:42:21.928
that you're going to need
for something like this,

00:42:21.928 --> 00:42:24.140
and it's easy to use.

00:42:24.140 --> 00:42:27.989
So with that said, this
is in early stages,

00:42:27.989 --> 00:42:29.655
but I'm going to go
ahead and demo this.

00:42:29.655 --> 00:42:33.390
This is the first time
we get to show this off.

00:42:33.390 --> 00:42:37.010
This is really what Live Lock
Screens shines, because slides

00:42:37.010 --> 00:42:38.120
can only say so much.

00:42:43.014 --> 00:42:44.430
If the visor will
come back again.

00:42:49.490 --> 00:42:51.162
OK.

00:42:51.162 --> 00:42:53.120
So I've got a few little
Live Lock Screens here

00:42:53.120 --> 00:42:54.700
that I've done.

00:42:54.700 --> 00:42:57.030
When I was trying to do a
proof of concept for this,

00:42:57.030 --> 00:42:58.380
I came up with a little demo.

00:42:58.380 --> 00:42:59.680
I'm not Dave Kover.

00:42:59.680 --> 00:43:00.960
I can't draw.

00:43:00.960 --> 00:43:01.659
I'm an engineer.

00:43:01.659 --> 00:43:02.200
I write code.

00:43:02.200 --> 00:43:03.040
I can't do anything.

00:43:03.040 --> 00:43:05.135
But I realize I
can do rectangles.

00:43:05.135 --> 00:43:08.745
And I can do rectangles
really, really good.

00:43:08.745 --> 00:43:10.620
And not only can I do
rectangles really good,

00:43:10.620 --> 00:43:14.060
but I realized if I put these
rectangles in a certain way,

00:43:14.060 --> 00:43:16.184
I can make it look like a city.

00:43:16.184 --> 00:43:18.100
So I've got this little
cityscape lock screen,

00:43:18.100 --> 00:43:19.558
and I can swipe on
it and it moves.

00:43:19.558 --> 00:43:22.169
It's got like this little
pop-up book look and feel.

00:43:22.169 --> 00:43:23.585
I can swipe and
it'll animate back

00:43:23.585 --> 00:43:24.710
on when I let my finger go.

00:43:24.710 --> 00:43:26.950
That's using TweenLite.

00:43:26.950 --> 00:43:27.950
So this is a first demo.

00:43:27.950 --> 00:43:28.616
So this is mine.

00:43:28.616 --> 00:43:30.940
This looks really like
an engineer did it,

00:43:30.940 --> 00:43:32.240
what can I say.

00:43:32.240 --> 00:43:35.670
And then I can unlock, just
like a normal lock screen.

00:43:35.670 --> 00:43:37.970
The next demo I came
up with-- pixi.js

00:43:37.970 --> 00:43:40.190
actually had a demo of
using those WebGL filters

00:43:40.190 --> 00:43:41.970
that I mentioned in
the tinting and stuff,

00:43:41.970 --> 00:43:44.620
so I took their concept and
turned it into a Live Lock

00:43:44.620 --> 00:43:45.120
Screen.

00:43:45.120 --> 00:43:46.786
Their concept was
this little fish pond.

00:43:46.786 --> 00:43:48.540
It was like a cartoonish
little fish pond.

00:43:48.540 --> 00:43:52.250
I think I had that slide
of it for you guys.

00:43:52.250 --> 00:43:53.369
I made it a lock screen.

00:43:53.369 --> 00:43:54.160
And so we get this.

00:43:54.160 --> 00:43:57.770
So now we have something that's
vibrant and actually animating.

00:43:57.770 --> 00:43:59.900
So you see a lot
of motion on there,

00:43:59.900 --> 00:44:01.650
but you still get some
information, right?

00:44:01.650 --> 00:44:03.899
So I've still got my clock,
but it's fun to play with.

00:44:03.899 --> 00:44:06.792
And as I swipe my finger down,
it'll actually distort more,

00:44:06.792 --> 00:44:08.750
so you get that little
distortion effect going.

00:44:08.750 --> 00:44:10.110
When I was using
their WebGL filters,

00:44:10.110 --> 00:44:11.443
there was a displacement effect.

00:44:11.443 --> 00:44:13.230
So I could play
around with that,

00:44:13.230 --> 00:44:17.520
and tweak it, and then
when I unlock it'll go out.

00:44:17.520 --> 00:44:18.436
So there's that one.

00:44:18.436 --> 00:44:20.310
Now, we've been playing
with this internally.

00:44:20.310 --> 00:44:21.540
A couple weeks ago,
we've actually put

00:44:21.540 --> 00:44:23.390
this in our internal
dog food builds,

00:44:23.390 --> 00:44:24.897
where we test our
stuff internally.

00:44:24.897 --> 00:44:27.480
And a lot of the engineers, they
are getting excited about it,

00:44:27.480 --> 00:44:29.355
and they're trying to
come up with stuff too.

00:44:29.355 --> 00:44:31.890
And one of our
engineers, Dinesh, he

00:44:31.890 --> 00:44:33.500
found one that was
actually a demo

00:44:33.500 --> 00:44:35.140
by the guy the wrote pixi.js.

00:44:35.140 --> 00:44:36.750
And it was done a
couple years ago,

00:44:36.750 --> 00:44:38.958
so it was actually using an
older version of pixi.js,

00:44:38.958 --> 00:44:41.790
but he ended up getting it
running on a Live Lock Screen.

00:44:41.790 --> 00:44:44.604
And this one's
actually really fun.

00:44:44.604 --> 00:44:46.520
So what we have is one
of those party poppers,

00:44:46.520 --> 00:44:48.300
you know, where you
actually pull them apart

00:44:48.300 --> 00:44:49.380
and you get confetti
blowing out.

00:44:49.380 --> 00:44:50.850
And so he found
this, and then as I

00:44:50.850 --> 00:44:53.810
move my finger you
can see it'll stretch,

00:44:53.810 --> 00:44:56.370
it's got the rope effect
and stuff like that.

00:44:56.370 --> 00:45:00.500
Now, when I swipe all
the way away-- man.

00:45:00.500 --> 00:45:02.500
It's just one of those
things that it's fun.

00:45:02.500 --> 00:45:03.450
You're interacting
with your phone,

00:45:03.450 --> 00:45:05.130
you might as well
have some fun with it

00:45:05.130 --> 00:45:08.929
since that's the part you're
going to see every day.

00:45:08.929 --> 00:45:10.970
So the last demo is a
little bit of a two-parter.

00:45:10.970 --> 00:45:13.344
This is something that I cooked
up a couple weekends ago.

00:45:16.380 --> 00:45:19.030
So this is a social media,
where we're playing around

00:45:19.030 --> 00:45:22.160
with maybe providing a way,
API to get social media images

00:45:22.160 --> 00:45:24.830
and stuff like that
onto your lock screen.

00:45:24.830 --> 00:45:27.124
So this demo's actually
going to use Instagram.

00:45:27.124 --> 00:45:29.540
So what I'm going to do is I'm
going to type in a hashtag,

00:45:29.540 --> 00:45:33.540
and I'm going to go-- I think
it's on my tag, BABBQ15.

00:45:36.780 --> 00:45:39.682
So I'm going to enter BABBQ15.

00:45:39.682 --> 00:45:41.800
I'm going to say Fetch.

00:45:41.800 --> 00:45:44.557
Hopefully, my
internet's working.

00:45:44.557 --> 00:45:46.890
Now I'm going to switch over
to the Social Media Gallery

00:45:46.890 --> 00:45:47.389
lock screen.

00:45:51.244 --> 00:45:58.570
And if all goes well--
hey, is that you?

00:45:58.570 --> 00:45:59.507
No, OK.

00:45:59.507 --> 00:46:00.465
I thought that was Ray.

00:46:04.640 --> 00:46:07.530
So as we go, it
pulls in the most

00:46:07.530 --> 00:46:09.955
20 recent hashtags for that
particular tag that I entered,

00:46:09.955 --> 00:46:12.330
and you'll be able to see
those images actually flashing.

00:46:12.330 --> 00:46:16.240
And I can swipe
this up, let it go.

00:46:16.240 --> 00:46:20.710
There's that bounce, so that's
using those animations again.

00:46:20.710 --> 00:46:21.870
This one's still early.

00:46:21.870 --> 00:46:23.286
We're still playing
with this one.

00:46:23.286 --> 00:46:26.030
But it shows the potential of
how you can have a lock screen.

00:46:26.030 --> 00:46:28.560
So now, not only do
you have animations,

00:46:28.560 --> 00:46:30.470
but you have different
backgrounds every time

00:46:30.470 --> 00:46:33.535
you turn your screen on, and it
can change throughout the day.

00:46:33.535 --> 00:46:35.852
Hey, I know that guy.

00:46:35.852 --> 00:46:36.352
Awesome.

00:46:39.536 --> 00:46:46.950
I do believe the demo gods
are with us this time.

00:46:46.950 --> 00:46:49.210
That concludes our presentation.

00:46:49.210 --> 00:46:52.210
We have some time, so if anybody
has any questions, feel free.

00:46:52.210 --> 00:46:53.410
[APPLAUSE]

00:46:54.310 --> 00:46:57.360
[MUSIC PLAYING]

