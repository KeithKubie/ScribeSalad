WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.808
[MUSIC PLAYING]

00:00:05.979 --> 00:00:07.020
NICOLAS ROARD: All right.

00:00:07.020 --> 00:00:09.190
So good afternoon, everyone.

00:00:09.190 --> 00:00:11.255
I'm Nicolas.

00:00:11.255 --> 00:00:13.660
I'm the tech lead for
Android Studio Design

00:00:13.660 --> 00:00:16.540
tools and the
ConstraintLayout library.

00:00:16.540 --> 00:00:19.790
And that's what we're
going to talk about today.

00:00:19.790 --> 00:00:23.530
So you might have noticed,
we released a really cool

00:00:23.530 --> 00:00:24.730
navigation editor.

00:00:24.730 --> 00:00:26.819
We are not going to
talk about that today.

00:00:26.819 --> 00:00:28.360
But there was a
session this morning.

00:00:28.360 --> 00:00:29.380
It's on YouTube.

00:00:29.380 --> 00:00:30.290
Check it out.

00:00:30.290 --> 00:00:31.210
There's code labs.

00:00:31.210 --> 00:00:32.950
It's really cool.

00:00:32.950 --> 00:00:38.010
So we are going to
talk about the layout

00:00:38.010 --> 00:00:39.960
editor, the work
we've been working on,

00:00:39.960 --> 00:00:43.860
the entire team this past
year, the improvements we made.

00:00:43.860 --> 00:00:47.820
Specifically we will focus on
sample data, which is something

00:00:47.820 --> 00:00:50.190
really cool we shipped in 3.2.

00:00:50.190 --> 00:00:53.010
And we'll also talk about
ConstraintLayout 2.0

00:00:53.010 --> 00:00:55.490
and what's coming up
with these libraries.

00:00:55.490 --> 00:00:59.000
For first, for the section
on the layout editor,

00:00:59.000 --> 00:01:02.820
Vadim and Diego are
going to present you.

00:01:02.820 --> 00:01:03.890
VADIM CAEN: Thank you.

00:01:03.890 --> 00:01:05.280
Hi, everyone.

00:01:05.280 --> 00:01:07.670
So, to start with, we're
going to talk about the layout

00:01:07.670 --> 00:01:08.760
editor.

00:01:08.760 --> 00:01:11.010
Most of you are probably
quite familiar with the tool.

00:01:11.010 --> 00:01:12.930
So it's a graphical
tool that enables

00:01:12.930 --> 00:01:17.610
you to build your layout
without having to write any XML.

00:01:17.610 --> 00:01:20.040
And it's supposed to
make you more productive.

00:01:20.040 --> 00:01:23.070
So what is nice with
the layout editor

00:01:23.070 --> 00:01:27.650
is that it also works
with your custom views.

00:01:27.650 --> 00:01:30.620
So if in your code,
you have a custom view,

00:01:30.620 --> 00:01:33.180
it will render in
the layout editor.

00:01:33.180 --> 00:01:36.410
And the nice thing is that any
custom view from your project

00:01:36.410 --> 00:01:39.420
will appear in the palette.

00:01:39.420 --> 00:01:42.800
So our goal is really to
make you more productive.

00:01:42.800 --> 00:01:46.010
So we've added some nice
features this year to do so.

00:01:51.040 --> 00:01:54.260
The first one I want to talk
about is the conversion.

00:01:54.260 --> 00:01:56.140
So if you right
click on a view, you

00:01:56.140 --> 00:01:59.530
will see the Convert View option
that will make this pop up

00:01:59.530 --> 00:02:00.640
appear.

00:02:00.640 --> 00:02:04.630
And you will be able to select
one of the pre-set components,

00:02:04.630 --> 00:02:07.810
or you can use
the edit text just

00:02:07.810 --> 00:02:12.160
to pick any view
from your project.

00:02:12.160 --> 00:02:14.780
And this view is contextual.

00:02:14.780 --> 00:02:17.210
So if you right click on a
view which is not a view group,

00:02:17.210 --> 00:02:20.410
we will show some pre-set
of non-view group views.

00:02:23.280 --> 00:02:24.780
The next thing I
want to talk about

00:02:24.780 --> 00:02:28.840
is a navigation between include
layout and their parent.

00:02:28.840 --> 00:02:31.560
So in the component
tree or in the preview,

00:02:31.560 --> 00:02:35.100
if you double click on a
component on an include tag,

00:02:35.100 --> 00:02:37.590
it will jump automatically
to the children.

00:02:37.590 --> 00:02:41.100
And if you click on the arrow on
the top of the component tree,

00:02:41.100 --> 00:02:42.550
it will jump back to the parent.

00:02:42.550 --> 00:02:44.780
This is quite handy to go
fast between two layouts.

00:02:47.980 --> 00:02:50.520
The layout editor
is really powerful

00:02:50.520 --> 00:02:52.270
used with ConstraintLayout.

00:02:52.270 --> 00:02:55.540
And ConstraintLayout
is a great layout

00:02:55.540 --> 00:02:57.070
because it's very powerful.

00:02:57.070 --> 00:02:59.230
But it's very verbose, right?

00:02:59.230 --> 00:03:02.660
So you might not want to
write all your XML by hand.

00:03:02.660 --> 00:03:04.510
So what you should
do instead is take

00:03:04.510 --> 00:03:08.490
advantage of all the menus
we have in the layout editor

00:03:08.490 --> 00:03:11.120
to generate this XML for you.

00:03:11.120 --> 00:03:13.210
So again, right click on a view.

00:03:13.210 --> 00:03:15.670
And then you can use the align--

00:03:15.670 --> 00:03:18.970
any of the top option
to choose your option.

00:03:18.970 --> 00:03:20.240
And we have many of them.

00:03:20.240 --> 00:03:22.930
So feel free to check
them after this session.

00:03:22.930 --> 00:03:26.880
And really it's going to
make you more productive.

00:03:26.880 --> 00:03:30.780
But most of you are probably
populating your layout

00:03:30.780 --> 00:03:31.410
at runtime.

00:03:31.410 --> 00:03:35.050
You have data from the internet
and you want to pre-play them.

00:03:35.050 --> 00:03:38.647
So they are not rendering
in the layout editor all.

00:03:38.647 --> 00:03:40.230
So to solve this
issue, Diego is going

00:03:40.230 --> 00:03:43.400
to come here and talk
about the sample data.

00:03:43.400 --> 00:03:45.150
DIEGO PEREZ: Thanks, Vadim.

00:03:45.150 --> 00:03:49.060
So before we talk about sample
data, let's talk about tools

00:03:49.060 --> 00:03:49.660
attributes.

00:03:49.660 --> 00:03:53.510
So the tools attributes
are the XML attributes.

00:03:53.510 --> 00:03:56.250
Now, you actually used to
give additional information

00:03:56.250 --> 00:03:59.530
to the Android studio
under the layout editor.

00:03:59.530 --> 00:04:01.640
You are probably familiar
with many of them.

00:04:01.640 --> 00:04:03.930
We are not going to
talk about all of them.

00:04:03.930 --> 00:04:07.660
Let's cover one example
just to be clear on this.

00:04:07.660 --> 00:04:09.370
So you probably have seen this.

00:04:09.370 --> 00:04:12.670
So in your strings file,
you get a lead warning

00:04:12.670 --> 00:04:16.630
saying that you haven't
translated a particular string.

00:04:16.630 --> 00:04:19.029
Usually what you want to
do is to fix this error,

00:04:19.029 --> 00:04:20.800
you translate it.

00:04:20.800 --> 00:04:22.200
That's it.

00:04:22.200 --> 00:04:23.051
The error is gone.

00:04:23.051 --> 00:04:24.550
But there might be
valid reasons why

00:04:24.550 --> 00:04:27.200
you don't want to translate
actually this string.

00:04:27.200 --> 00:04:29.200
It could be, that is the
name of the application

00:04:29.200 --> 00:04:31.699
and you don't want to translate
it in every single language.

00:04:31.699 --> 00:04:33.410
Only in certain languages.

00:04:33.410 --> 00:04:36.040
So what you can do
here is you basically

00:04:36.040 --> 00:04:39.760
can tell Android Studio,
look, I know about this error.

00:04:39.760 --> 00:04:44.860
But I don't want you to tell
me about it because it's fine.

00:04:44.860 --> 00:04:47.170
So that is one example.

00:04:47.170 --> 00:04:48.850
There are many others.

00:04:48.850 --> 00:04:51.250
But what we want
to talk about now

00:04:51.250 --> 00:04:54.070
is actually design
time attributes.

00:04:54.070 --> 00:04:56.490
This is just a
subset of the tools

00:04:56.490 --> 00:04:58.650
attributes that I talked about.

00:04:58.650 --> 00:05:01.840
They are giving additional
information and context

00:05:01.840 --> 00:05:03.940
to the layout editor.

00:05:03.940 --> 00:05:06.470
So let's see with one example.

00:05:06.470 --> 00:05:11.020
So in this case, what we have
is, we created our toolbar.

00:05:11.020 --> 00:05:13.190
We had to keep the
lay out on its own.

00:05:13.190 --> 00:05:14.450
So we use ConstraintLayout.

00:05:14.450 --> 00:05:15.370
We created it.

00:05:15.370 --> 00:05:17.960
And this is how it will
look in the layout editor.

00:05:17.960 --> 00:05:22.234
So what you can see is the
toolbar without any context.

00:05:22.234 --> 00:05:23.650
So you can see the
layout, but you

00:05:23.650 --> 00:05:25.024
don't know how
it's going to look

00:05:25.024 --> 00:05:27.050
at runtime in your application.

00:05:27.050 --> 00:05:29.530
So there is something
that we can do.

00:05:29.530 --> 00:05:32.440
You can again tell
the layout editor,

00:05:32.440 --> 00:05:36.550
this layout is going to be
included in this other layout

00:05:36.550 --> 00:05:37.670
that I'm hinting here.

00:05:37.670 --> 00:05:41.140
So using these
attribute tools showing,

00:05:41.140 --> 00:05:43.540
we are letting the
layout editor know

00:05:43.540 --> 00:05:47.920
that we want to embed this
heather into the main layout.

00:05:47.920 --> 00:05:50.180
And that way, we can
see it in context.

00:05:50.180 --> 00:05:53.530
So now when we are editing,
we know if the colors match.

00:05:53.530 --> 00:05:57.340
We can actually tweak our
design and see how every change

00:05:57.340 --> 00:06:01.980
impacts our layout.

00:06:01.980 --> 00:06:04.450
And the best thing is,
again, you can do it.

00:06:04.450 --> 00:06:05.980
You can edit it right there.

00:06:05.980 --> 00:06:08.440
You don't have to sit
with a blank space

00:06:08.440 --> 00:06:10.070
or anything like that.

00:06:10.070 --> 00:06:13.750
So let's see another interesting
use of design time attributes.

00:06:13.750 --> 00:06:16.180
When you have a text view,
this is usually what you get.

00:06:16.180 --> 00:06:18.070
So you have hello world.

00:06:18.070 --> 00:06:20.050
And that's it.

00:06:20.050 --> 00:06:22.360
But you can tell to
the layout editor

00:06:22.360 --> 00:06:24.910
that you know that this text
view is going to look slightly

00:06:24.910 --> 00:06:26.740
different at runtime.

00:06:26.740 --> 00:06:29.930
And you do that by again
using the tools namespace.

00:06:29.930 --> 00:06:31.750
So in this case,
what we are doing is

00:06:31.750 --> 00:06:35.180
we are replacing both the
text and the text color.

00:06:35.180 --> 00:06:37.730
And we are telling the
layout editor, at runtime,

00:06:37.730 --> 00:06:39.660
this is going to look different.

00:06:39.660 --> 00:06:43.160
And we are about to see
how this is very useful.

00:06:43.160 --> 00:06:46.120
Let's go with a slightly
more complicated example.

00:06:46.120 --> 00:06:47.830
When you have a
recycler view, this

00:06:47.830 --> 00:06:51.770
is what you get by default.
It takes the space.

00:06:51.770 --> 00:06:55.200
You can see how the recycler
view is going to be laid out.

00:06:55.200 --> 00:06:56.256
But it's not very useful.

00:06:56.256 --> 00:06:57.880
It doesn't help you
to actually come up

00:06:57.880 --> 00:06:59.990
with a good design for it.

00:06:59.990 --> 00:07:03.160
It's just a list of elements
with a lot of empty space.

00:07:03.160 --> 00:07:07.780
So again, we can use the tools
attributes to basically let

00:07:07.780 --> 00:07:11.134
the layout editor know,
this is that the layout

00:07:11.134 --> 00:07:12.050
that I'm going to use.

00:07:12.050 --> 00:07:15.100
So you have probably seen
already list item many times.

00:07:15.100 --> 00:07:15.914
Very simple.

00:07:15.914 --> 00:07:16.580
You just say it.

00:07:16.580 --> 00:07:17.704
But we can do other things.

00:07:17.704 --> 00:07:19.720
We can tell the
layout editor, OK,

00:07:19.720 --> 00:07:23.620
how is this going to
look with five elements?

00:07:23.620 --> 00:07:26.365
All these things, you usually
cannot do them in the layout

00:07:26.365 --> 00:07:29.750
editor, because these are
things that happen at runtime.

00:07:29.750 --> 00:07:32.040
So usually the source of
information for our recycler

00:07:32.040 --> 00:07:33.860
view is an adapter.

00:07:33.860 --> 00:07:36.610
So the adapter might depend
on network, on database,

00:07:36.610 --> 00:07:39.310
on many things that we don't
have available at design time.

00:07:39.310 --> 00:07:41.770
So doing this, you
give us context.

00:07:41.770 --> 00:07:44.800
And then the layout editor
will render correctly,

00:07:44.800 --> 00:07:47.900
similar to what you
have at runtime.

00:07:47.900 --> 00:07:50.530
So let's now go
into sample data.

00:07:50.530 --> 00:07:55.150
So sample data is a feature
that we introduced in 3.0.

00:07:55.150 --> 00:07:58.390
And what it does is it helps
you to actually populate

00:07:58.390 --> 00:08:01.820
data that is not
available at design time.

00:08:01.820 --> 00:08:03.340
So in this case,
what we are doing

00:08:03.340 --> 00:08:06.070
is telling the
layout editor that I

00:08:06.070 --> 00:08:08.349
want to use the tint property.

00:08:08.349 --> 00:08:10.390
And I want to get the data
from this data source,

00:08:10.390 --> 00:08:14.230
which we call
@sample/material_colors.

00:08:14.230 --> 00:08:17.680
And that data source is
simply a file, a plain file,

00:08:17.680 --> 00:08:19.730
with a list of colors
that you see there.

00:08:19.730 --> 00:08:24.080
So what happens at design
time is the layout editor

00:08:24.080 --> 00:08:26.500
will get a different
color for every item.

00:08:26.500 --> 00:08:28.490
So that looks better.

00:08:28.490 --> 00:08:30.680
But we can do more.

00:08:30.680 --> 00:08:33.460
So let's see how you
create that file.

00:08:33.460 --> 00:08:36.970
You got to your project,
new, sample data directory.

00:08:36.970 --> 00:08:39.909
And that is how we create
the directory where

00:08:39.909 --> 00:08:43.390
we are going to put every
data source that we have.

00:08:43.390 --> 00:08:45.520
In our case, we want to
create material colors.

00:08:45.520 --> 00:08:47.650
So new file.

00:08:47.650 --> 00:08:52.270
And then we name
it material_colors.

00:08:52.270 --> 00:08:55.907
And we put the list of colors.

00:08:55.907 --> 00:08:56.490
And that's it.

00:08:56.490 --> 00:08:58.330
It's that simple.

00:08:58.330 --> 00:09:00.230
Now you can use it
in any property.

00:09:00.230 --> 00:09:02.710
In this case, tint.

00:09:02.710 --> 00:09:05.040
So this is one of the
types of data sources

00:09:05.040 --> 00:09:07.600
that you can use in sample data.

00:09:07.600 --> 00:09:09.130
So it's basically
a list of colors.

00:09:09.130 --> 00:09:11.640
You can have lists
of any kind that you

00:09:11.640 --> 00:09:13.590
want, like regular text.

00:09:13.590 --> 00:09:15.667
And you just replace
it in your text field.

00:09:15.667 --> 00:09:17.625
But you can have other
things more interesting.

00:09:17.625 --> 00:09:20.080
Like you can have dimensions.

00:09:20.080 --> 00:09:22.650
So if you have dimensions,
using the tools attributes,

00:09:22.650 --> 00:09:26.300
you can tell the layout editor,
I want to use this dimension.

00:09:26.300 --> 00:09:28.530
And I want it to be
different for every item.

00:09:28.530 --> 00:09:32.000
And you can do that
using sample data.

00:09:32.000 --> 00:09:35.170
We also have other
types of data sources.

00:09:35.170 --> 00:09:36.530
You can have images.

00:09:36.530 --> 00:09:38.440
You create them in
a very similar way.

00:09:38.440 --> 00:09:40.750
What you do is, you
create, instead of a file,

00:09:40.750 --> 00:09:41.980
you create a directory.

00:09:41.980 --> 00:09:44.600
And then you drop all
your images in there.

00:09:44.600 --> 00:09:47.620
And then recycler view
will get a different image

00:09:47.620 --> 00:09:49.120
for every item.

00:09:49.120 --> 00:09:51.244
So it's very simple.

00:09:51.244 --> 00:09:53.410
And the last type that I
want to tell you about this

00:09:53.410 --> 00:09:55.120
is JSON files.

00:09:55.120 --> 00:09:57.880
So JSON files is a
similar way to the list

00:09:57.880 --> 00:09:59.140
that we have before.

00:09:59.140 --> 00:10:01.780
But it allows you to do
something that you cannot do

00:10:01.780 --> 00:10:02.440
with lists.

00:10:02.440 --> 00:10:05.980
You can have all your data
together in one place.

00:10:05.980 --> 00:10:08.080
You can add, maybe,
context about why

00:10:08.080 --> 00:10:10.810
a particular item is like that.

00:10:10.810 --> 00:10:14.980
Or you can even get a
sample from your dead API

00:10:14.980 --> 00:10:17.500
and put it into the sample data.

00:10:17.500 --> 00:10:21.190
In this case, what we
have is a list of notes.

00:10:21.190 --> 00:10:25.170
So what you can see is we have
a title and we have [INAUDIBLE]

00:10:25.170 --> 00:10:28.600
And the way that you
use this in sample data,

00:10:28.600 --> 00:10:32.320
is you can reference any
of those leaf elements.

00:10:32.320 --> 00:10:34.300
Let's see how to do that.

00:10:34.300 --> 00:10:37.450
So in this case, what we are
telling the layout editor is,

00:10:37.450 --> 00:10:40.660
I want you to replace
text at design time.

00:10:40.660 --> 00:10:44.360
And I want you to do it with
@sample/ the name of the JSON

00:10:44.360 --> 00:10:47.660
file, and then the note
that we saw before.

00:10:47.660 --> 00:10:51.010
So in this case, we are doing
it with title and author.

00:10:51.010 --> 00:10:52.720
Remember that this
will change depending

00:10:52.720 --> 00:10:54.220
on the name of the JSON file.

00:10:54.220 --> 00:10:57.460
It doesn't even need
to be called JSON.

00:10:57.460 --> 00:11:00.500
If you don't want to provide
your own data sources,

00:11:00.500 --> 00:11:03.160
Android Studio
will also provide.

00:11:03.160 --> 00:11:05.560
It already comes with a
set of predefined ones.

00:11:05.560 --> 00:11:07.510
So you don't have
to create your own.

00:11:07.510 --> 00:11:09.250
We give you a set of them.

00:11:09.250 --> 00:11:10.810
We give you names.

00:11:10.810 --> 00:11:13.150
We give you lorem
ipsum, obviously.

00:11:13.150 --> 00:11:15.310
And we also give
you a set of images.

00:11:15.310 --> 00:11:17.440
For example, you
can use avatars.

00:11:17.440 --> 00:11:19.570
And you don't even
need to create images.

00:11:19.570 --> 00:11:23.260
You can just use the
ones that we give you.

00:11:23.260 --> 00:11:25.962
And again, how to use
that is very similar.

00:11:25.962 --> 00:11:27.670
The only difference
that you can see here

00:11:27.670 --> 00:11:31.900
is we added tools as the
namespace of the data source.

00:11:31.900 --> 00:11:36.060
So instead of being @sample,
now it's @tools:sample.

00:11:36.060 --> 00:11:39.455
So using syntax completion, you
can see all the different data

00:11:39.455 --> 00:11:40.330
sources that we have.

00:11:43.240 --> 00:11:46.810
But in 3.2., we added
new features in order

00:11:46.810 --> 00:11:48.460
to help you to use this.

00:11:48.460 --> 00:11:51.599
So everything that we saw
was already available in 3.0.

00:11:51.599 --> 00:11:53.140
And in 3.2 we are
adding a few things

00:11:53.140 --> 00:11:54.723
that Vadim is going
to tell you about,

00:11:54.723 --> 00:11:56.190
to help you using sample data.

00:11:59.820 --> 00:12:02.190
VADIM CAEN: Sample
data is a great tool.

00:12:02.190 --> 00:12:03.080
But we love tools.

00:12:03.080 --> 00:12:06.990
And so we decided to
put a UI on top of it.

00:12:06.990 --> 00:12:08.690
So what does it look like?

00:12:08.690 --> 00:12:11.000
I'm sure most of you
already did that.

00:12:11.000 --> 00:12:13.310
So you have an image view.

00:12:13.310 --> 00:12:15.170
You're taking it
from the palette.

00:12:15.170 --> 00:12:18.449
And the resource
picker will pop up.

00:12:18.449 --> 00:12:20.240
And since you've just
started your project,

00:12:20.240 --> 00:12:22.220
you have only the
launcher icon available.

00:12:22.220 --> 00:12:24.020
So you use it.

00:12:24.020 --> 00:12:27.200
And your preview doesn't
look really great.

00:12:27.200 --> 00:12:30.930
So what you can do instead
now, in the resource picker,

00:12:30.930 --> 00:12:33.180
you have the simple
data category,

00:12:33.180 --> 00:12:34.830
and you can pick
any resource data

00:12:34.830 --> 00:12:38.040
from your project or
the pre-defined one.

00:12:38.040 --> 00:12:39.810
So now our image
view looks better.

00:12:39.810 --> 00:12:43.780
And we can see every instance
of it in our recycler view.

00:12:43.780 --> 00:12:47.220
But if you want to make some
change to this sample data?

00:12:47.220 --> 00:12:50.880
What if I just want to use
one single image from my set?

00:12:50.880 --> 00:12:54.360
So we've introduced in Android
Studio 3.2, the new design time

00:12:54.360 --> 00:12:57.480
helper that you can access
by clicking the wrench icon

00:12:57.480 --> 00:13:00.550
right below the image view.

00:13:00.550 --> 00:13:03.940
So here, I'm going to
uncheck view as a set.

00:13:03.940 --> 00:13:06.010
And this will give
me the ability

00:13:06.010 --> 00:13:09.340
to select only one
image from my set.

00:13:09.340 --> 00:13:13.360
And I can try it out with
any image from the set.

00:13:13.360 --> 00:13:16.510
But now, let's say that we do
want to give it another look.

00:13:16.510 --> 00:13:19.900
And we want to pick images
from another data set.

00:13:19.900 --> 00:13:21.940
So we can just use
the drop down button

00:13:21.940 --> 00:13:23.830
and select another data set.

00:13:23.830 --> 00:13:24.546
And here we go.

00:13:24.546 --> 00:13:26.170
Our recycler view
has a brand new look.

00:13:26.170 --> 00:13:27.490
So it's very nice
to preview what

00:13:27.490 --> 00:13:29.573
it would look like with
different kinds of images.

00:13:32.240 --> 00:13:34.870
So you can always jump
back to the resource picker

00:13:34.870 --> 00:13:36.340
and have the full
set of resources

00:13:36.340 --> 00:13:39.815
available by clicking the browse
button on the bottom of the pop

00:13:39.815 --> 00:13:40.900
up.

00:13:40.900 --> 00:13:44.340
And the same options
are available.

00:13:44.340 --> 00:13:48.120
And also I wanted to mention
that if you select a sample

00:13:48.120 --> 00:13:50.390
data on the resource
picker, it will populate

00:13:50.390 --> 00:13:52.170
the design time attributes.

00:13:52.170 --> 00:13:53.520
It will be removed at runtime.

00:13:56.750 --> 00:13:59.710
We have the same design
time helper for text view.

00:13:59.710 --> 00:14:02.950
So here for example, I'm just
selecting a different set

00:14:02.950 --> 00:14:05.320
for each text view.

00:14:05.320 --> 00:14:07.240
And as you can see
on the recycler view,

00:14:07.240 --> 00:14:14.780
each item is taking one instance
of its own set for each item.

00:14:14.780 --> 00:14:19.940
And finally, we've also added
this feature for recycler view.

00:14:19.940 --> 00:14:21.080
And this is quite nice.

00:14:21.080 --> 00:14:24.740
You can browse between all the
templates we provide for you.

00:14:24.740 --> 00:14:27.120
And the file will be
automatically created.

00:14:27.120 --> 00:14:29.270
So you can just jump
back to the credit file

00:14:29.270 --> 00:14:30.810
and preview your changes.

00:14:30.810 --> 00:14:32.600
And all the design
time attributes

00:14:32.600 --> 00:14:34.410
are automatically populated.

00:14:34.410 --> 00:14:36.710
So you don't have to do
anything to preview it and take

00:14:36.710 --> 00:14:39.860
full advantage of sample data.

00:14:39.860 --> 00:14:42.950
But the layout editor
is even more powerful

00:14:42.950 --> 00:14:44.960
if you use it with
ConstraintLayout.

00:14:44.960 --> 00:14:46.610
So Nicolas is going
to come on stage

00:14:46.610 --> 00:14:49.064
and do a deep dive
into ConstraintLayout.

00:14:54.280 --> 00:14:57.960
NICOLAS ROARD: We released
ConstraintLayout officially

00:14:57.960 --> 00:15:00.247
from the stable
version last year.

00:15:00.247 --> 00:15:01.830
We announced it a
couple of years ago.

00:15:01.830 --> 00:15:03.288
So if you don't
know about it, it's

00:15:03.288 --> 00:15:07.700
a library that allows you to
easily create user interfaces.

00:15:07.700 --> 00:15:09.890
And we tried to
encourage you to use

00:15:09.890 --> 00:15:14.300
flat hierarchies, which come
in very handy for animations.

00:15:14.300 --> 00:15:15.410
It's a support library.

00:15:15.410 --> 00:15:18.200
It's compatible
essentially everywhere.

00:15:18.200 --> 00:15:19.130
It's small.

00:15:19.130 --> 00:15:21.110
And you're in full
control on when you ship

00:15:21.110 --> 00:15:23.540
with a specific versoin or not.

00:15:23.540 --> 00:15:27.680
It comes with a great UI builder
that we have in Android Studio.

00:15:27.680 --> 00:15:31.450
And essentially,
please try to use it.

00:15:31.450 --> 00:15:34.760
It's something we're
working really hard on

00:15:34.760 --> 00:15:37.050
to make your life easier.

00:15:37.050 --> 00:15:40.250
So we released
ConstraintLayout 1.0 last year

00:15:40.250 --> 00:15:43.700
with a bunch of capabilities.

00:15:43.700 --> 00:15:46.910
You can set up
your UI by creating

00:15:46.910 --> 00:15:49.830
relations between elements.

00:15:49.830 --> 00:15:52.100
There is a lot of
capabilities here--

00:15:52.100 --> 00:15:55.070
related positioning, center,
et cetera, et cetera.

00:15:55.070 --> 00:15:57.710
And there is some helper
objects like guidelines

00:15:57.710 --> 00:16:00.860
to help you set up your screen.

00:16:00.860 --> 00:16:04.960
So it's already a very
full set of features

00:16:04.960 --> 00:16:08.330
But a month ago, we released
ConstraintLayout 1.1,

00:16:08.330 --> 00:16:10.850
which added a lot of
bug fixes, performance

00:16:10.850 --> 00:16:15.560
improvements, new features, new
ways of expressing your layout.

00:16:15.560 --> 00:16:18.380
And I'm just going to
highlight one that you actually

00:16:18.380 --> 00:16:20.450
see on the slides,
the barrier, which

00:16:20.450 --> 00:16:22.280
allows you to
position an element

00:16:22.280 --> 00:16:24.840
relative to a set of elements.

00:16:24.840 --> 00:16:30.050
So whatever the position and
dimension of those elements,

00:16:30.050 --> 00:16:32.810
that element on the right is
going to position correctly.

00:16:32.810 --> 00:16:34.970
So essentially, with
ConstraintLayout 1.1,

00:16:34.970 --> 00:16:38.180
we have a really
flexible layout,

00:16:38.180 --> 00:16:40.490
something that
should essentially

00:16:40.490 --> 00:16:43.760
let you express any UI.

00:16:43.760 --> 00:16:46.160
And you can just add
it to your project

00:16:46.160 --> 00:16:49.490
by using normal
gradual dependency.

00:16:49.490 --> 00:16:51.440
We are now shipping
on Maven so it

00:16:51.440 --> 00:16:53.550
should be very easy
for you to use it

00:16:53.550 --> 00:16:55.910
in your build server, et cetera.

00:16:55.910 --> 00:16:59.120
But I think a lot
of you here are

00:16:59.120 --> 00:17:03.180
in this room to hear me talk
about ConstraintLayout 2.0.

00:17:03.180 --> 00:17:07.099
So with ConstraintLayout
2.0, we are starting

00:17:07.099 --> 00:17:08.270
with ConstraintLayout 1.

00:17:08.270 --> 00:17:10.710
And ConstraintLayout
1 is a great base.

00:17:10.710 --> 00:17:13.670
As I said, it gives
the entire flexibility

00:17:13.670 --> 00:17:15.530
that you need to create your UI.

00:17:15.530 --> 00:17:19.040
And it comes with
the UI builder.

00:17:19.040 --> 00:17:22.550
And one of the concepts
that we introduced

00:17:22.550 --> 00:17:25.430
in ConstraintLayout 1 was the
concept of helper objects--

00:17:25.430 --> 00:17:29.830
objects that, even though
you can manipulate them

00:17:29.830 --> 00:17:33.920
in the UI builder, they do
not appear on your screen

00:17:33.920 --> 00:17:36.710
when you run the application,
but essentially they

00:17:36.710 --> 00:17:38.330
help you create your UI.

00:17:38.330 --> 00:17:40.400
So one of them is
the guideline object.

00:17:40.400 --> 00:17:42.620
You know, if your
designer typically

00:17:42.620 --> 00:17:46.820
specifies a UI with
horizontal lines,

00:17:46.820 --> 00:17:52.070
et cetera, well, you can simply
replicate those in your UI.

00:17:52.070 --> 00:17:54.800
So it's a lot easier for
you to set up your screen.

00:17:54.800 --> 00:17:59.000
Similarly, with 1.1, we have
the barrier I just talked about.

00:17:59.000 --> 00:18:01.370
And what's nice with
those helper objects,

00:18:01.370 --> 00:18:05.360
is that we do have some support
for them in the UI builder.

00:18:05.360 --> 00:18:09.050
So you can simply manipulate
them and add the elements

00:18:09.050 --> 00:18:11.750
to those helper objects
in the component tree

00:18:11.750 --> 00:18:14.940
by dragging elements into them.

00:18:14.940 --> 00:18:19.490
Something you might not realize
is that those objects are not

00:18:19.490 --> 00:18:20.830
view groups.

00:18:20.830 --> 00:18:23.390
They only keep a
reference to the views.

00:18:23.390 --> 00:18:28.760
So we still keep the
entire view tree very flat.

00:18:28.760 --> 00:18:30.470
But because they
are just references,

00:18:30.470 --> 00:18:36.470
we can have one object being
referenced in multiple helpers.

00:18:36.470 --> 00:18:39.380
And that's starting to be
very interesting for us.

00:18:39.380 --> 00:18:41.010
And you can think
about the helpers

00:18:41.010 --> 00:18:46.550
as a way of keeping a
reference to a bunch of views.

00:18:46.550 --> 00:18:49.670
You can still get
a flat hierarchy.

00:18:49.670 --> 00:18:54.290
And the way we think about
it is that a helper gives you

00:18:54.290 --> 00:18:59.480
a way of encapsulating
a behavior.

00:18:59.480 --> 00:19:04.050
In 2.0, we are going to expose
those helpers as a constraint

00:19:04.050 --> 00:19:04.940
[INAUDIBLE] class.

00:19:04.940 --> 00:19:08.000
So you would be able to
create your own helpers.

00:19:08.000 --> 00:19:10.610
And if you have your own
helpers in your project,

00:19:10.610 --> 00:19:13.240
similar to what we
have with custom views,

00:19:13.240 --> 00:19:15.620
they will be present
in Android Studio.

00:19:15.620 --> 00:19:18.910
So you'll be able to
manipulate your own objects.

00:19:18.910 --> 00:19:22.190
We kind of highlighted
three broad categories

00:19:22.190 --> 00:19:24.300
for the helpers in 2.0.

00:19:24.300 --> 00:19:27.530
One category is layout
manipulation-- helpers

00:19:27.530 --> 00:19:30.220
that are going to help
you create a layout.

00:19:30.220 --> 00:19:34.730
Another one is helpers
that will apply something

00:19:34.730 --> 00:19:37.610
after the layout has been done.

00:19:37.610 --> 00:19:39.660
So kind of post-layout.

00:19:39.660 --> 00:19:41.720
And finally, we
have some helpers--

00:19:41.720 --> 00:19:45.120
because helpers are views,
can be views as well--

00:19:45.120 --> 00:19:49.570
helpers that we can use to
do some specific rendering,

00:19:49.570 --> 00:19:51.880
specific display.

00:19:51.880 --> 00:19:55.890
For the virtual layouts,
this is one of the concepts

00:19:55.890 --> 00:19:58.080
that we are really keen on.

00:19:58.080 --> 00:20:00.690
The idea is that
the helper is going

00:20:00.690 --> 00:20:02.820
to set the constraints for you.

00:20:02.820 --> 00:20:06.330
The simplest example I can
think of is a linear helper.

00:20:06.330 --> 00:20:10.049
You know, if you created a chain
in ConstraintLayout 1, well,

00:20:10.049 --> 00:20:12.090
that will allow you to do
exactly the same thing.

00:20:12.090 --> 00:20:15.720
But you will manipulate it a
little bit like linear lay out,

00:20:15.720 --> 00:20:17.160
for instance.

00:20:17.160 --> 00:20:20.370
The only difference is that
you have all the features

00:20:20.370 --> 00:20:22.170
that chain provides you.

00:20:22.170 --> 00:20:25.360
And the way you use
them, it's very easy.

00:20:25.360 --> 00:20:26.610
It's a normal view.

00:20:26.610 --> 00:20:29.020
You can constrain
that view itself.

00:20:29.020 --> 00:20:33.450
But the only thing you need to
care here is that list of IDs

00:20:33.450 --> 00:20:34.920
that you reference.

00:20:34.920 --> 00:20:38.070
We have another virtual
layout that we launched

00:20:38.070 --> 00:20:42.570
with 2.0, which essentially
implements the FlexboxLayout

00:20:42.570 --> 00:20:44.490
semantics.

00:20:44.490 --> 00:20:47.310
So those objects
are pretty useful.

00:20:47.310 --> 00:20:51.370
But at the same time, I
think, pretty expected.

00:20:51.370 --> 00:20:53.280
But while we were
developing those helpers

00:20:53.280 --> 00:20:57.840
we came up with
additional use cases.

00:20:57.840 --> 00:21:01.910
So one example of a post layout
object is a flying object.

00:21:01.910 --> 00:21:04.710
Let's say that you want your
objects on the first layout

00:21:04.710 --> 00:21:06.090
to fly in.

00:21:06.090 --> 00:21:09.340
Well, you could simply reference
this object with the flying

00:21:09.340 --> 00:21:11.700
decorator and that's all.

00:21:11.700 --> 00:21:13.470
So no code.

00:21:13.470 --> 00:21:14.670
It's purely declarative.

00:21:14.670 --> 00:21:18.420
You just add that to your XML
file, reference that object,

00:21:18.420 --> 00:21:21.720
and it will animate
on first launch.

00:21:21.720 --> 00:21:26.250
We have another object
that's very powerful.

00:21:26.250 --> 00:21:29.950
Layers allows you
essentially a lot of things.

00:21:29.950 --> 00:21:34.890
It kind of allows you to
consider a set of views

00:21:34.890 --> 00:21:37.630
and apply operation to them.

00:21:37.630 --> 00:21:41.640
So there's a bunch of graphical
operation that you can apply.

00:21:41.640 --> 00:21:43.440
And we will do the
math behind the scenes

00:21:43.440 --> 00:21:45.390
to apply them correctly.

00:21:45.390 --> 00:21:46.830
You can also set
it up so that it

00:21:46.830 --> 00:21:51.420
takes by default the bounds of
the views that it references.

00:21:51.420 --> 00:21:54.720
And you can use it to set
up a background very easily

00:21:54.720 --> 00:21:55.980
in that way.

00:21:55.980 --> 00:21:58.470
And those are use
cases that we will

00:21:58.470 --> 00:22:02.490
expose is, you could use the
layer a little bit like you

00:22:02.490 --> 00:22:06.640
would use layers in
graphical photo editors

00:22:06.640 --> 00:22:10.390
to have a bunch of layers
to specify your elements.

00:22:10.390 --> 00:22:14.130
And when you are OK with
those elements' constraints,

00:22:14.130 --> 00:22:17.220
you could lock that
layer and be sure to not

00:22:17.220 --> 00:22:19.030
inadvertently modify them.

00:22:19.030 --> 00:22:21.660
So it's a very powerful helper.

00:22:21.660 --> 00:22:23.430
Here's a quick example
on how it would

00:22:23.430 --> 00:22:26.370
look like by drawing a
background around a bunch

00:22:26.370 --> 00:22:28.710
of buttons being referenced.

00:22:28.710 --> 00:22:31.440
And without having to set
up the constraints manually,

00:22:31.440 --> 00:22:36.720
I can easily surround those
objects with a background.

00:22:36.720 --> 00:22:39.750
And just to prove you that
we are still with a flat view

00:22:39.750 --> 00:22:43.510
tree, we can apply
this operation

00:22:43.510 --> 00:22:46.350
that I'm talking about and
everything will just follow.

00:22:46.350 --> 00:22:48.150
But the background
will stay where it is.

00:22:48.150 --> 00:22:49.410
So it's a silly example.

00:22:49.410 --> 00:22:53.670
It's just to show you the
potential of those objects.

00:22:53.670 --> 00:22:58.800
Another useful decorator
is a circular reveal.

00:22:58.800 --> 00:23:00.810
And it actually
does what it says.

00:23:00.810 --> 00:23:02.460
And it's the typical
effect that you've

00:23:02.460 --> 00:23:07.110
been familiar with
with material design.

00:23:07.110 --> 00:23:09.240
And if I press the
button that's better.

00:23:09.240 --> 00:23:11.190
The interesting thing
here is that you'll

00:23:11.190 --> 00:23:14.520
notice that it only applies
to the element referenced.

00:23:14.520 --> 00:23:18.480
So we have this row of buttons
that are not referenced.

00:23:18.480 --> 00:23:22.600
And so the circular reveal
did not apply to them.

00:23:22.600 --> 00:23:24.890
And if you played
with circular reveal,

00:23:24.890 --> 00:23:27.654
you'd see that it's actually
a bit tricky to do that.

00:23:27.654 --> 00:23:29.070
The interesting
thing here as well

00:23:29.070 --> 00:23:31.890
is that we are not creating
our own circular reveal.

00:23:31.890 --> 00:23:35.250
We are just using the
normal circular reveal.

00:23:35.250 --> 00:23:37.290
But essentially, we
package it in a way

00:23:37.290 --> 00:23:40.694
that makes it a lot easier
for you to play with and use

00:23:40.694 --> 00:23:41.360
in your layouts.

00:23:44.380 --> 00:23:49.030
So on that same idea,
we have decorators

00:23:49.030 --> 00:23:52.390
that are helpers that
are here to draw things.

00:23:52.390 --> 00:23:56.050
And same things with
reference views.

00:23:56.050 --> 00:23:59.540
And you can draw
something with it.

00:23:59.540 --> 00:24:01.450
So that's probably
a little confusing

00:24:01.450 --> 00:24:04.300
in terms of what type of
effect you can get with that.

00:24:04.300 --> 00:24:06.490
So let me show you.

00:24:06.490 --> 00:24:08.840
So you may want an
effect like that.

00:24:08.840 --> 00:24:11.020
You know, kind of
a lava lamp effect

00:24:11.020 --> 00:24:13.960
with those blobs moving around.

00:24:13.960 --> 00:24:18.340
And what you'll see is that
the result of that effect

00:24:18.340 --> 00:24:21.160
will depend on the
position of those blobs.

00:24:21.160 --> 00:24:25.197
But the final rendering has to
take in account all of them.

00:24:25.197 --> 00:24:27.280
And that would normally
be a very difficult effect

00:24:27.280 --> 00:24:28.126
to achieve.

00:24:28.126 --> 00:24:29.500
So the way it
works with helpers,

00:24:29.500 --> 00:24:31.208
so that you can think
about it that way--

00:24:31.208 --> 00:24:34.180
you have a canvas, right,
like what you paint on.

00:24:34.180 --> 00:24:37.810
You'll have,
actually, some image

00:24:37.810 --> 00:24:40.917
views that are essentially
sitting on top of that.

00:24:40.917 --> 00:24:42.250
And they are normal image views.

00:24:42.250 --> 00:24:43.734
So you lose nothing here.

00:24:43.734 --> 00:24:44.650
They are normal views.

00:24:44.650 --> 00:24:45.820
Normal widgets.

00:24:45.820 --> 00:24:48.370
You can apply the usual things.

00:24:48.370 --> 00:24:50.980
But we put their background
to be transparent.

00:24:50.980 --> 00:24:54.160
And then we use a decorator
to draw the background.

00:24:54.160 --> 00:24:56.572
And you can easily get
an effect like that.

00:24:56.572 --> 00:24:57.530
You know, for instance.

00:24:57.530 --> 00:24:58.196
A little slower.

00:25:01.509 --> 00:25:02.050
There you go.

00:25:05.800 --> 00:25:09.200
And just to show you
the bounds are correct,

00:25:09.200 --> 00:25:11.350
we still have our image views.

00:25:11.350 --> 00:25:14.570
Another type of decorator that
you can use in your project

00:25:14.570 --> 00:25:17.090
is the bottom panel decorator.

00:25:17.090 --> 00:25:19.820
So let's say that you have
a layout like that you may

00:25:19.820 --> 00:25:22.430
have created by using a chain.

00:25:22.430 --> 00:25:23.420
Very easy.

00:25:23.420 --> 00:25:26.960
But if you'd like to set a
background on those objects,

00:25:26.960 --> 00:25:29.130
and maybe change the colors.

00:25:29.130 --> 00:25:31.220
So you can simply
apply this decorator,

00:25:31.220 --> 00:25:34.430
reference those elements, and
we'll do the rest of the work.

00:25:34.430 --> 00:25:37.430
And because, well, we can do a
little more interesting stuff

00:25:37.430 --> 00:25:40.640
here, I can show you what
it may look like when

00:25:40.640 --> 00:25:41.775
you click on those buttons.

00:25:44.500 --> 00:25:48.550
So just to give you an
idea of the type of effects

00:25:48.550 --> 00:25:50.080
you can get with decorators.

00:25:56.610 --> 00:25:58.110
So I'm clicking on this.

00:25:58.110 --> 00:25:59.550
My menu comes in.

00:25:59.550 --> 00:26:00.770
I can press that.

00:26:00.770 --> 00:26:02.730
Some other menu comes in.

00:26:02.730 --> 00:26:03.390
I press it.

00:26:03.390 --> 00:26:05.330
And there's a circular reveal.

00:26:05.330 --> 00:26:07.260
It's of course a very silly UI.

00:26:07.260 --> 00:26:11.700
But it's just to give you
an idea of what you can do.

00:26:11.700 --> 00:26:15.540
What's very interesting here
is that if you look at it

00:26:15.540 --> 00:26:20.220
in studio, and you know, if
I zoom on the component tree,

00:26:20.220 --> 00:26:25.320
you'll notice that actually,
we mostly have just views.

00:26:25.320 --> 00:26:26.820
And just a bunch of helpers.

00:26:26.820 --> 00:26:29.560
There's actually no code here.

00:26:29.560 --> 00:26:33.270
So I think it's really a
useful addition to your toolset

00:26:33.270 --> 00:26:37.184
as a programmer to
try to really separate

00:26:37.184 --> 00:26:45.870
the fill with the actual
data and your actual behavior

00:26:45.870 --> 00:26:47.490
on your application.

00:26:47.490 --> 00:26:49.710
So to summarize
with the helpers,

00:26:49.710 --> 00:26:52.320
you can tag your own views
with those, essentially.

00:26:52.320 --> 00:26:54.390
You can encapsulate
and reuse the behavior,

00:26:54.390 --> 00:26:57.240
and it's all declarative.

00:26:57.240 --> 00:27:00.190
Let me talk briefly
about layout management.

00:27:00.190 --> 00:27:04.170
So you've been probably
playing with constraint sets

00:27:04.170 --> 00:27:07.860
on the ConstraintLayout 1.1,
which is a way of encapsulating

00:27:07.860 --> 00:27:10.230
an entire state for a layout.

00:27:10.230 --> 00:27:13.290
And if you switch between
two of those states,

00:27:13.290 --> 00:27:15.250
you can animate them.

00:27:15.250 --> 00:27:16.470
So that's very nice.

00:27:16.470 --> 00:27:20.950
But you know, initializing those
things is a little cumbersome.

00:27:20.950 --> 00:27:25.050
You have to create your layout,
load those layouts manually,

00:27:25.050 --> 00:27:26.160
et cetera.

00:27:26.160 --> 00:27:29.160
So in 2.0, we'll have
a separate XML file

00:27:29.160 --> 00:27:31.260
that lets you specify states.

00:27:31.260 --> 00:27:33.780
Because essentially
that's what they are.

00:27:33.780 --> 00:27:35.370
I have a layout.

00:27:35.370 --> 00:27:38.460
That layout has different
representations,

00:27:38.460 --> 00:27:39.600
different states.

00:27:39.600 --> 00:27:43.590
And you can associate that
with different layouts.

00:27:43.590 --> 00:27:46.290
So the way you would
use them is simply

00:27:46.290 --> 00:27:48.180
by coding [INAUDIBLE]
description

00:27:48.180 --> 00:27:50.190
and we'll do the
rest of the job.

00:27:50.190 --> 00:27:51.900
You can then switch
states simply

00:27:51.900 --> 00:27:55.260
by coding set states
with the state ID.

00:27:55.260 --> 00:27:56.550
And that's it.

00:27:56.550 --> 00:28:00.130
One nice thing is that
you can specify a region

00:28:00.130 --> 00:28:04.190
on when a specific constraint
set is going to be applied.

00:28:04.190 --> 00:28:07.590
And by plugging that into
onConfigurationChanged--

00:28:07.590 --> 00:28:10.334
and I'm showing that
on a Chromebook--

00:28:10.334 --> 00:28:12.000
you'll see that
automatically, depending

00:28:12.000 --> 00:28:14.610
on the size of the window,
we'll switch layouts.

00:28:14.610 --> 00:28:17.720
So it's a very easy
way for you to have

00:28:17.720 --> 00:28:19.380
different behavior for layouts.

00:28:19.380 --> 00:28:22.650
If you want a little
more fancy, you

00:28:22.650 --> 00:28:26.070
can, on the preLayoutChange,
plug a TransitionManager,

00:28:26.070 --> 00:28:29.650
and then we will animate
the layout transition.

00:28:29.650 --> 00:28:32.130
So I think with devices
like Chromebooks,

00:28:32.130 --> 00:28:34.650
that's the type of
use case that's going

00:28:34.650 --> 00:28:36.060
to be more and more useful.

00:28:39.060 --> 00:28:42.240
And that's essentially
Layout Management.

00:28:42.240 --> 00:28:46.260
So to quickly recap on
ConstraintLayout 2 so far,

00:28:46.260 --> 00:28:47.640
we have the helpers API.

00:28:47.640 --> 00:28:50.580
We have those virtual
layouts and decorators.

00:28:50.580 --> 00:28:52.961
We have the resize API.

00:28:52.961 --> 00:28:54.960
We also have other stuff
I haven't talked about,

00:28:54.960 --> 00:28:56.751
like a new [INAUDIBLE]
API for manipulating

00:28:56.751 --> 00:28:59.130
the constraints directly.

00:28:59.130 --> 00:29:01.140
And we have motion layouts.

00:29:01.140 --> 00:29:03.120
And to talk about
motion layouts,

00:29:03.120 --> 00:29:06.670
I'm really happy
to introduce John.

00:29:06.670 --> 00:29:08.170
JOHN HOFORD: Thanks.

00:29:08.170 --> 00:29:10.670
[APPLAUSE]

00:29:14.170 --> 00:29:18.220
Now, I'm really excited to
show you guys MotionLayout.

00:29:18.220 --> 00:29:21.790
It's a brand new layout
that we're introducing

00:29:21.790 --> 00:29:24.440
with ConstraintLayout 2.2.

00:29:24.440 --> 00:29:27.370
So let's kind of get into it.

00:29:27.370 --> 00:29:31.420
It starts off with a
subclass of ConstraintLayout

00:29:31.420 --> 00:29:32.650
called MotionLayout.

00:29:32.650 --> 00:29:34.290
It's a layout.

00:29:34.290 --> 00:29:38.770
It has all the properties
of ConstraintLayout.

00:29:38.770 --> 00:29:42.790
But the whole trick
with animating

00:29:42.790 --> 00:29:45.340
between two constraint sets--

00:29:45.340 --> 00:29:49.270
that will be done for
you by MotionLayout.

00:29:49.270 --> 00:29:52.510
So if you have two
constraint sets,

00:29:52.510 --> 00:29:59.860
it will switch between them and
animate between them by itself.

00:29:59.860 --> 00:30:04.570
But you'll notice, because
it's a ConstraintLayout,

00:30:04.570 --> 00:30:11.140
you can actually use the
helpers that were shown there.

00:30:11.140 --> 00:30:14.830
But it also provides
you with the ability

00:30:14.830 --> 00:30:20.090
to edit the custom
attributes of the system.

00:30:20.090 --> 00:30:23.590
So you'll notice the
blue light there.

00:30:23.590 --> 00:30:28.360
It's changing because it's a
custom attribute in the system.

00:30:28.360 --> 00:30:31.210
So constrained sets now can
handle custom attributes.

00:30:31.210 --> 00:30:33.745
It allows you to
animate anything.

00:30:37.780 --> 00:30:41.100
One of the other
things that it does

00:30:41.100 --> 00:30:45.900
is it allows you to
control on touch directly.

00:30:45.900 --> 00:30:49.020
So it'll manage
your touch events

00:30:49.020 --> 00:30:52.430
by tracking your
velocity of your finger

00:30:52.430 --> 00:30:57.060
and matching it to the velocity
of views in the system,

00:30:57.060 --> 00:31:00.770
and naturally give you a
smooth transition between them

00:31:00.770 --> 00:31:01.690
via touch.

00:31:04.530 --> 00:31:08.680
We also support helpers because
it's just a ConstraintLayout.

00:31:08.680 --> 00:31:10.540
So the helpers
Nicolas just showed--

00:31:10.540 --> 00:31:12.810
they're there too.

00:31:12.810 --> 00:31:16.210
And they can work
together and apart.

00:31:19.800 --> 00:31:22.910
Now let's change the
transition a little bit.

00:31:22.910 --> 00:31:26.510
We want to move the i into
the middle of the screen.

00:31:26.510 --> 00:31:30.290
But if we look closely, there's
a bit of a problem here.

00:31:30.290 --> 00:31:35.150
You see the arrow
clashes with the i.

00:31:35.150 --> 00:31:37.420
We'll have to fix that.

00:31:37.420 --> 00:31:41.130
And the way we do that is a
feature we call keyframes.

00:31:41.130 --> 00:31:46.340
Essentially, if we have a
beginning and an end of a path,

00:31:46.340 --> 00:31:50.450
we can distort the path
by adding a keyframe.

00:31:50.450 --> 00:31:54.620
And once we add the
keyframe, it will avoid

00:31:54.620 --> 00:32:00.180
the path, which is pretty cool.

00:32:00.180 --> 00:32:02.610
So now we have a motion scene.

00:32:02.610 --> 00:32:05.460
It has constraint sets.

00:32:05.460 --> 00:32:09.390
It has on touch keyframes,
custom attributes.

00:32:13.310 --> 00:32:16.200
With a little flag
on your device,

00:32:16.200 --> 00:32:20.090
you can see the path of all
the objects you've set in it.

00:32:20.090 --> 00:32:22.760
So you can understand
what all your views

00:32:22.760 --> 00:32:24.840
are doing on the device.

00:32:28.810 --> 00:32:32.480
So one of the nice things
that we've supported in it

00:32:32.480 --> 00:32:36.910
is nesting of constrained
sets of MotionLayouts.

00:32:36.910 --> 00:32:40.930
So in this particular
example, we

00:32:40.930 --> 00:32:50.110
have two views being
animated by a third view.

00:32:50.110 --> 00:32:52.700
They're both constraint
MotionLayouts.

00:32:52.700 --> 00:32:54.140
Layouts.

00:32:54.140 --> 00:32:59.630
And they're both being driven
by a third MotionLayout.

00:32:59.630 --> 00:33:03.350
The top view is just
doing a fade to black.

00:33:03.350 --> 00:33:06.410
But you'll notice something
else in that view.

00:33:06.410 --> 00:33:12.500
This is an animated view that
was custom written by Nicolas

00:33:12.500 --> 00:33:17.270
that is being driven by
MotionLayout because it

00:33:17.270 --> 00:33:21.380
implements an
on-progress method.

00:33:21.380 --> 00:33:25.520
So you can drive your own
custom animations directly

00:33:25.520 --> 00:33:27.037
from MotionLayout.

00:33:29.660 --> 00:33:31.720
So one of the things
it's really good at

00:33:31.720 --> 00:33:35.750
is synchronizing motions.

00:33:35.750 --> 00:33:39.470
Anything that's very complex,
sequences of many things moving

00:33:39.470 --> 00:33:42.260
on the screen, it
will handle it,

00:33:42.260 --> 00:33:45.440
and will also allow you to
interact with the touch.

00:33:48.160 --> 00:33:50.860
So we added one more
thing to the system,

00:33:50.860 --> 00:33:53.560
something we call cycles.

00:33:53.560 --> 00:33:58.720
This is the ability to build
into the keyframes oscillatory

00:33:58.720 --> 00:33:59.920
behaviors.

00:33:59.920 --> 00:34:03.520
It can vibrate and
shake in various ways.

00:34:03.520 --> 00:34:09.840
And you might wonder, OK, what
do we do with these KeyCycles?

00:34:09.840 --> 00:34:13.070
So in this particular
example, first,

00:34:13.070 --> 00:34:16.159
let me just unfold them
with a staggered effect.

00:34:16.159 --> 00:34:18.710
But now I can take
one and have it

00:34:18.710 --> 00:34:21.440
roll because it's oscillated.

00:34:21.440 --> 00:34:23.600
Or I can do a different effect.

00:34:23.600 --> 00:34:27.230
I could have it sort of
bounce along the edge.

00:34:27.230 --> 00:34:33.290
I got bored and I just had
that one flying around.

00:34:33.290 --> 00:34:35.690
Another typical
example, is you put it

00:34:35.690 --> 00:34:37.340
like doing a little
shake at the end.

00:34:39.850 --> 00:34:44.159
So now one of the cool
things is, we build editors.

00:34:44.159 --> 00:34:48.090
So we're building an
editor for that thing.

00:34:48.090 --> 00:34:50.340
And we call it
the Motion Editor.

00:34:50.340 --> 00:34:54.989
It's part of the design surface.

00:34:54.989 --> 00:34:59.550
But now, you'll be able
to do those edits directly

00:34:59.550 --> 00:35:00.825
in the design surface.

00:35:04.510 --> 00:35:07.120
So kind of, to take
you through how

00:35:07.120 --> 00:35:11.770
you would do that in
the design surface,

00:35:11.770 --> 00:35:14.350
based on
ConstraintLayout, you just

00:35:14.350 --> 00:35:17.950
create your constraints for
your first constraint set,

00:35:17.950 --> 00:35:20.830
switch to the second,
edit the constraints

00:35:20.830 --> 00:35:23.520
for the second constraint set.

00:35:23.520 --> 00:35:27.050
And then once you do
that, if you hit play,

00:35:27.050 --> 00:35:30.100
it will show you the animation
between those two constraint

00:35:30.100 --> 00:35:32.440
sets.

00:35:32.440 --> 00:35:36.710
There's a checkbox to
enable showing you the path.

00:35:36.710 --> 00:35:38.470
So now you could see the path.

00:35:38.470 --> 00:35:41.350
But how would you
add a KeyFrame?

00:35:41.350 --> 00:35:45.730
Well, you just position the
cursor where you want it.

00:35:45.730 --> 00:35:50.960
You add the type of KeyFrame
that you want to add.

00:35:50.960 --> 00:35:53.840
And you can just
distort the position

00:35:53.840 --> 00:35:57.440
by selecting the KeyFrame and
moving it around on the screen.

00:36:00.350 --> 00:36:05.460
And let's just do that one
more time so you can see it.

00:36:05.460 --> 00:36:08.900
Just select a position--
any position--

00:36:08.900 --> 00:36:09.905
create a KeyFrame.

00:36:13.770 --> 00:36:15.010
And then we just move it.

00:36:22.030 --> 00:36:25.840
So here is much more
complex motions.

00:36:25.840 --> 00:36:27.730
They're all being animated.

00:36:27.730 --> 00:36:30.370
This one has quite a
few KeyFrames in it,

00:36:30.370 --> 00:36:34.870
just designed to allow
you to set transparency

00:36:34.870 --> 00:36:38.290
on some things, change
the size of other things,

00:36:38.290 --> 00:36:39.610
move them around.

00:36:39.610 --> 00:36:41.495
But it all works in the IDE.

00:36:44.910 --> 00:36:45.787
Thank you.

00:36:45.787 --> 00:36:48.222
[APPLAUSE]

00:37:00.410 --> 00:37:02.090
NICOLAS ROARD: So
one last thing.

00:37:02.090 --> 00:37:06.240
You probably are eager
to try all those things.

00:37:06.240 --> 00:37:09.170
So, a lot of that
is actually in 3.2.

00:37:09.170 --> 00:37:10.920
All the sample data
we have showed you,

00:37:10.920 --> 00:37:14.480
are the current integration
with ConstraintLayout 1.1.

00:37:14.480 --> 00:37:16.190
Go, download 3.2.

00:37:16.190 --> 00:37:17.060
Try it out.

00:37:17.060 --> 00:37:22.900
We release the [INAUDIBLE]
13 this Tuesday.

00:37:22.900 --> 00:37:24.320
So please give it a try.

00:37:24.320 --> 00:37:27.740
ConstraintLayout 2, the
library with MotionLayout--

00:37:27.740 --> 00:37:31.650
we are talking about releasing
it in a few days, hopefully.

00:37:31.650 --> 00:37:34.370
And Motion Editor--
it's an ongoing work.

00:37:34.370 --> 00:37:36.470
But we are really
excited about it.

00:37:36.470 --> 00:37:40.526
So think about it.

00:37:40.526 --> 00:37:42.400
There are code labs for
the navigation editor

00:37:42.400 --> 00:37:47.780
as well, for the Chrome
resize API we showed you.

00:37:47.780 --> 00:37:49.970
We also want to hear
from you in general.

00:37:49.970 --> 00:37:52.970
We are easily reachable,
the four of us.

00:37:52.970 --> 00:37:54.660
But for this particular
session, there

00:37:54.660 --> 00:37:56.210
is a feedback you can fill.

00:37:56.210 --> 00:37:58.784
We also are going to
have an office hour

00:37:58.784 --> 00:38:00.200
this afternoon
after this session.

00:38:00.200 --> 00:38:02.320
So please come see us.

00:38:02.320 --> 00:38:03.920
And that completes our talk.

00:38:03.920 --> 00:38:05.070
Thank you very much.

00:38:05.070 --> 00:38:06.050
[APPLAUSE]

00:38:06.050 --> 00:38:10.240
[MUSIC PLAYING]

