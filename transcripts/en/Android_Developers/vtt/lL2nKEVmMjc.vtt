WEBVTT
Kind: captions
Language: en

00:00:07.690 --> 00:00:10.825
YAHAN ZHOU: Welcome to the
Android Emulator Deep Time.

00:00:10.825 --> 00:00:11.960
I am Yahan.

00:00:11.960 --> 00:00:14.040
And this is Frank.

00:00:14.040 --> 00:00:18.830
We are software engineers from
the Android Emulator team.

00:00:18.830 --> 00:00:24.770
So back in the days, in 2015,
in the previous Android Dev

00:00:24.770 --> 00:00:29.020
Summit, we announced Android
Emulator [INAUDIBLE]..

00:00:29.020 --> 00:00:35.360
So if you remember, here is
what it looks like in 2015.

00:00:35.360 --> 00:00:42.280
And it is 2018 now, so things
have progressed quite quickly,

00:00:42.280 --> 00:00:43.240
fast.

00:00:43.240 --> 00:00:48.620
And we've got a newer
emulator with a newer look.

00:00:48.620 --> 00:00:51.250
So if you look at
the details, there

00:00:51.250 --> 00:00:55.030
are a few differences
you might have noticed.

00:00:55.030 --> 00:00:58.025
Firstly, there is
frameless skin support

00:00:58.025 --> 00:01:01.540
in the 2018 emulator,
which doesn't

00:01:01.540 --> 00:01:04.980
have the window frame for
you and gives you a better UI

00:01:04.980 --> 00:01:07.180
experience.

00:01:07.180 --> 00:01:10.630
And secondly, you
might have noticed

00:01:10.630 --> 00:01:15.010
that in the expanded panel
there is a much longer feature

00:01:15.010 --> 00:01:20.380
list, which we have new features
such as screen recording

00:01:20.380 --> 00:01:25.940
and virtual scene support,
snapshot, and Google Play

00:01:25.940 --> 00:01:26.440
Store.

00:01:26.440 --> 00:01:29.870
So I will go over all those
features in this talk one

00:01:29.870 --> 00:01:30.370
by one.

00:01:34.186 --> 00:01:39.530
From 2015 to 2018 we have
developed quite a lot of stuff

00:01:39.530 --> 00:01:41.050
in the Android Emulators.

00:01:41.050 --> 00:01:44.100
And we are mainly
focusing on two areas.

00:01:44.100 --> 00:01:47.300
One is the performance
improvement of the emulator,

00:01:47.300 --> 00:01:49.890
the other is new features.

00:01:49.890 --> 00:01:55.190
And we are focusing on improving
your day-to-day developing

00:01:55.190 --> 00:02:02.040
experience, as well as CI
server testing use cases.

00:02:02.040 --> 00:02:04.220
So first things first.

00:02:04.220 --> 00:02:07.060
Let's get into performance.

00:02:07.060 --> 00:02:10.669
The first thing we want to
focus on about performance

00:02:10.669 --> 00:02:12.950
is Hypervisor support.

00:02:12.950 --> 00:02:18.090
So just a little bit of
background about Hypervisors,

00:02:18.090 --> 00:02:22.070
if you are running the Android
Emulator, at the lowest level

00:02:22.070 --> 00:02:24.710
you have your computer hardware.

00:02:24.710 --> 00:02:27.490
On top of this you have
your operating system.

00:02:27.490 --> 00:02:32.110
And the highest level there
is the emulated Android OS.

00:02:32.110 --> 00:02:36.690
Between the emulated Android
OS and your operating system,

00:02:36.690 --> 00:02:41.330
there lies the Hypervisor,
which translates the Android CPU

00:02:41.330 --> 00:02:46.040
commands into your
OS CPU commands.

00:02:46.040 --> 00:02:51.420
So that's the part that we
do the CPU acceleration.

00:02:51.420 --> 00:02:55.610
If you don't have a Hypervisor,
you can still run the emulator,

00:02:55.610 --> 00:02:58.220
but everything
will go pretty slow

00:02:58.220 --> 00:03:01.880
and the emulator
becomes super sluggish.

00:03:01.880 --> 00:03:08.212
So in 2015, here is the list
of the Hypervisors we support.

00:03:08.212 --> 00:03:10.910
On Linux we have KVM.

00:03:10.910 --> 00:03:16.880
And on Windows and Mac we
support HAXM with Intel CPU.

00:03:16.880 --> 00:03:20.270
So unfortunately,
back in those days,

00:03:20.270 --> 00:03:24.000
if you are using an AMD
CPU on Windows machine,

00:03:24.000 --> 00:03:27.210
we have no support
for this combination,

00:03:27.210 --> 00:03:30.480
so we got a lot of
request from AMD users

00:03:30.480 --> 00:03:33.020
to add support for them.

00:03:33.020 --> 00:03:35.970
So it's 2018 now.

00:03:35.970 --> 00:03:38.130
Things progressed pretty fast.

00:03:38.130 --> 00:03:41.820
And obviously we have
new Hypervisor support.

00:03:41.820 --> 00:03:44.030
So firstly, we support
a newer version

00:03:44.030 --> 00:03:48.060
of HAXM, HAXM 7.3.2,
which is stabler

00:03:48.060 --> 00:03:50.190
than the previous
version, and it also

00:03:50.190 --> 00:03:52.730
gives you better performance.

00:03:52.730 --> 00:03:56.690
Then we added Hypervisor
framework support

00:03:56.690 --> 00:04:00.470
for Mac users, which
in most situation

00:04:00.470 --> 00:04:05.500
is faster than the HAXM on Mac.

00:04:05.500 --> 00:04:10.040
And at last, we support
Hypervisor framework,

00:04:10.040 --> 00:04:15.800
also known as HyperV on
Windows, which can emulate AMD.

00:04:15.800 --> 00:04:20.279
So finally the combination of
AMD and Intel is supported.

00:04:20.279 --> 00:04:24.490
And yeah, this also
gives Docker support.

00:04:24.490 --> 00:04:28.780
All right, so here is the
Hypervisor performance.

00:04:28.780 --> 00:04:31.830
The next thing we
want to go into

00:04:31.830 --> 00:04:34.770
will be the ADB performance.

00:04:34.770 --> 00:04:37.490
So a little bit background.

00:04:37.490 --> 00:04:42.180
If you try to push an app from
your computer onto your device

00:04:42.180 --> 00:04:44.910
when you are debugging
or deploying,

00:04:44.910 --> 00:04:48.960
you are going to do this
ADB push command, which copy

00:04:48.960 --> 00:04:53.770
and transfer the app from
one entry at the other.

00:04:53.770 --> 00:04:58.140
So here we are sharing the
chart for ADB push time

00:04:58.140 --> 00:05:01.950
on a physical device
on two different Google

00:05:01.950 --> 00:05:05.990
apps, the Google Photo app
and Google Santa Tracker app.

00:05:05.990 --> 00:05:08.630
And they are both
on physical devices.

00:05:08.630 --> 00:05:13.410
And you can see what the first
thing was that if you are using

00:05:13.410 --> 00:05:17.490
an USB cable and if you are
pushing the Google Photo app,

00:05:17.490 --> 00:05:22.140
it takes you approximately
eight seconds.

00:05:22.140 --> 00:05:24.450
If you are using an USB--

00:05:24.450 --> 00:05:28.200
an USB 3 cable, things
goes a lot faster

00:05:28.200 --> 00:05:31.380
and it takes you
approximately four seconds.

00:05:31.380 --> 00:05:34.170
So you can observe
similar phenomenon

00:05:34.170 --> 00:05:38.490
when pushing different app,
like the Google Santa Tracker.

00:05:38.490 --> 00:05:43.260
USB 3 cable is in general a
lot faster than USB 2 cable,

00:05:43.260 --> 00:05:45.580
but those are for
a physical device.

00:05:45.580 --> 00:05:49.581
So how about a performance
on the emulator?

00:05:49.581 --> 00:05:51.820
So here is a chart.

00:05:51.820 --> 00:05:55.630
If you do app push on
emulator, the Google Photo apps

00:05:55.630 --> 00:06:00.670
takes approximately 0.5
seconds, which is a lot faster

00:06:00.670 --> 00:06:02.530
than USB 2 or USB 3.

00:06:06.107 --> 00:06:11.230
And this other chart is
on an Android Oreo device.

00:06:11.230 --> 00:06:15.600
And it turns out that the
OS version matters a lot

00:06:15.600 --> 00:06:18.300
as well when you are
doing the app push.

00:06:18.300 --> 00:06:23.350
So we've got a chart on the
newer Android Pie device.

00:06:23.350 --> 00:06:26.460
And if you working
on a physical device,

00:06:26.460 --> 00:06:32.391
the ADB push is a lot
faster on either USB 2 or 3.

00:06:32.391 --> 00:06:36.270
And emulator still gives
you a very [INAUDIBLE]

00:06:36.270 --> 00:06:40.675
and very constant performance.

00:06:40.675 --> 00:06:46.800
So in short, if you are doing
the [INAUDIBLE] deployment

00:06:46.800 --> 00:06:49.230
onto at the emulator,
you're not going

00:06:49.230 --> 00:06:54.210
to have any worries about either
USB cables or Android versions.

00:06:54.210 --> 00:06:55.410
We have you covered.

00:06:55.410 --> 00:07:00.215
You always get the best
and consistent performance.

00:07:00.215 --> 00:07:02.690
All right, the next
topic we are going

00:07:02.690 --> 00:07:04.720
to Quick Boot and Snapshots.

00:07:04.720 --> 00:07:06.710
So we're going to
be showing demos.

00:07:06.710 --> 00:07:11.130
So with that, let's
hand it to Frank.

00:07:11.130 --> 00:07:13.360
FRANK YANG: Thank you, Yahan.

00:07:13.360 --> 00:07:18.940
So a top concern of
Android Studio users

00:07:18.940 --> 00:07:21.680
is the time taken
to deploy their app,

00:07:21.680 --> 00:07:25.586
whether it be to a physical
device or emulator.

00:07:25.586 --> 00:07:29.700
And previously, people are
used to this workflow where

00:07:29.700 --> 00:07:33.360
they're inside Studio and
they want to deploy their app

00:07:33.360 --> 00:07:37.040
and they need to wait for the
emulator to boot up again.

00:07:37.040 --> 00:07:42.525
So we tried to address
this in 2017 and 2018.

00:07:42.525 --> 00:07:45.180
The first way we
tried to address this

00:07:45.180 --> 00:07:47.076
is through Snapshots.

00:07:47.076 --> 00:07:49.730
We call this Quick Boot.

00:07:49.730 --> 00:07:53.360
With Quick Boot the
device state is completely

00:07:53.360 --> 00:07:55.830
saved when you take a snapshot.

00:07:55.830 --> 00:07:58.880
And when you take a snapshot
when you exit the emulator

00:07:58.880 --> 00:08:00.980
and you resume from
that snapshot, when

00:08:00.980 --> 00:08:03.660
you start the emulator again.

00:08:03.660 --> 00:08:07.790
So in a sense it's kind of
like sleeping and resuming

00:08:07.790 --> 00:08:09.440
a real device.

00:08:09.440 --> 00:08:12.800
And we've also made improvements
in recent emulator canary

00:08:12.800 --> 00:08:15.920
versions to make it
even closer to that.

00:08:15.920 --> 00:08:19.210
So the demo I'm going
to show you here is--

00:08:19.210 --> 00:08:23.350
I have two AVD setup
in the AVD Manager.

00:08:23.350 --> 00:08:25.220
One of them is called API 28.

00:08:25.220 --> 00:08:27.780
And we're going to be
using Quick Boot with that.

00:08:27.780 --> 00:08:31.120
And the second one is
called API 28 cold boot.

00:08:31.120 --> 00:08:33.249
And we're going
to cold boot that.

00:08:33.249 --> 00:08:36.559
And so for the benefit of people
who haven't seen this already,

00:08:36.559 --> 00:08:41.260
I'm going to cold boot
one of these AVDs.

00:08:41.260 --> 00:08:44.240
You'll see that it starts
out with a black screen,

00:08:44.240 --> 00:08:48.080
takes a while to
show the Google logo.

00:08:48.080 --> 00:08:52.890
But with Quick Boot the emulator
just pops up right here.

00:08:52.890 --> 00:08:55.590
You'll notice that Logcat
has already started up.

00:08:55.590 --> 00:09:00.026
And we can interact
with it immediately,

00:09:00.026 --> 00:09:04.272
just as the cold boot
emulator has just started up.

00:09:04.272 --> 00:09:05.980
All right, so we're
just going to get rid

00:09:05.980 --> 00:09:08.440
of the cold boot
emulator for now

00:09:08.440 --> 00:09:10.310
and move on to the
next part of the demo.

00:09:10.310 --> 00:09:15.880
So in addition to Quick
Boot, in July of 2018,

00:09:15.880 --> 00:09:19.410
we've extended the snapshots
feature to be more general.

00:09:19.410 --> 00:09:23.230
So with Quick Boot you can only
have one snapshot being saved

00:09:23.230 --> 00:09:24.900
and loaded at any one time.

00:09:24.900 --> 00:09:27.730
And that can be useful,
but maybe sometimes you

00:09:27.730 --> 00:09:30.850
want to test different
device configurations,

00:09:30.850 --> 00:09:34.030
different device
states and so forth.

00:09:34.030 --> 00:09:39.005
And before now, we didn't really
have a good way to do that.

00:09:39.005 --> 00:09:45.750
But in the latest emulator
stable version, 27.3.10,

00:09:45.750 --> 00:09:48.090
which was released
July 2018, we're

00:09:48.090 --> 00:09:51.370
now giving you the
generic snapshot's UI.

00:09:51.370 --> 00:09:55.770
In this generic snapshot's UI
you can save and load snapshots

00:09:55.770 --> 00:09:57.080
arbitrarily.

00:09:57.080 --> 00:09:59.760
So for example,
I can immediately

00:09:59.760 --> 00:10:03.290
resume one of these snapshots
to stopwatch running.

00:10:03.290 --> 00:10:05.640
And a stopwatch is running.

00:10:08.180 --> 00:10:11.860
I can also edit each one of
these snapshots and add notes.

00:10:18.430 --> 00:10:21.610
And the description is saved
and is also displayed over here.

00:10:24.605 --> 00:10:28.620
I can also take new snapshots
with the Take Snapshot button.

00:10:32.652 --> 00:10:35.570
So these are some
examples of what

00:10:35.570 --> 00:10:37.430
we have been doing
with snapshots,

00:10:37.430 --> 00:10:40.280
and trying to make your life
easier when you're deploying

00:10:40.280 --> 00:10:43.130
apps and testing them.

00:10:43.130 --> 00:10:46.120
I would also like
to at this point

00:10:46.120 --> 00:10:48.220
go over some
improvements we made

00:10:48.220 --> 00:10:50.950
to the Quick Boot
mechanism itself

00:10:50.950 --> 00:10:53.156
in recent emulator canaries.

00:10:53.156 --> 00:10:58.450
The version of the emulator
running right now is 28015.

00:10:58.450 --> 00:11:01.160
In a recent emulator
canaries we've

00:11:01.160 --> 00:11:05.990
tried to listen to your concerns
about extremely long saving

00:11:05.990 --> 00:11:08.640
time for the emulator
when you're closing it.

00:11:08.640 --> 00:11:10.886
Now if you want to
save the emulator--

00:11:10.886 --> 00:11:11.510
actually, wait.

00:11:11.510 --> 00:11:16.331
Let's just set up
the stopwatch again.

00:11:16.331 --> 00:11:17.410
It's saved.

00:11:17.410 --> 00:11:17.910
Trust me.

00:11:17.910 --> 00:11:18.409
It is.

00:11:21.868 --> 00:11:24.080
Yes, it was saved.

00:11:24.080 --> 00:11:28.270
So we've employed
new technologies

00:11:28.270 --> 00:11:30.760
like file backing of
the guest RAM in order

00:11:30.760 --> 00:11:31.890
to speed this process up.

00:11:35.730 --> 00:11:39.130
In addition, we've also
added some console commands

00:11:39.130 --> 00:11:43.830
that are useful for CI
users when using snapshots.

00:11:43.830 --> 00:11:47.640
One very common workflow
is to reset the device

00:11:47.640 --> 00:11:50.670
to a particular previous
state and then run your test

00:11:50.670 --> 00:11:53.880
and then reset the
device state again.

00:11:53.880 --> 00:11:59.310
To that end, we've added
this command called--

00:11:59.310 --> 00:12:05.000
in the console it's called
AVD Snapshot Remap zero.

00:12:05.000 --> 00:12:08.500
So assuming you're using
the default settings,

00:12:08.500 --> 00:12:10.690
it's like you're auto-saving
the current device

00:12:10.690 --> 00:12:12.120
state all the time.

00:12:12.120 --> 00:12:13.780
So right now we're
on the second--

00:12:13.780 --> 00:12:15.610
we're at 40 seconds.

00:12:15.610 --> 00:12:19.000
So the first time you run this
it'll save it around then.

00:12:19.000 --> 00:12:24.000
But the next time you run it, it
will very quickly rewind there.

00:12:24.000 --> 00:12:28.660
So this happens quite
quickly, because all

00:12:28.660 --> 00:12:30.250
the rest of the
emulator UI and all

00:12:30.250 --> 00:12:31.874
that has already been
set up, it's just

00:12:31.874 --> 00:12:33.760
a device state that's changing.

00:12:33.760 --> 00:12:38.730
So we can just keep doing this,
like rewinding very quickly.

00:12:38.730 --> 00:12:41.860
And you can be in any
state of the device.

00:12:41.860 --> 00:12:43.899
And just keep going back
through that one state

00:12:43.899 --> 00:12:45.190
very quickly with this command.

00:12:48.958 --> 00:12:52.120
Another feature that we've been
working on in recent emulator

00:12:52.120 --> 00:12:57.171
canaries is launching multiple
instances of the same AVD.

00:12:57.171 --> 00:13:03.250
So let me just
set this up again.

00:13:06.520 --> 00:13:07.420
Zero seconds.

00:13:07.420 --> 00:13:08.110
All right.

00:13:08.110 --> 00:13:12.870
So before, when you're
using the emulator,

00:13:12.870 --> 00:13:15.760
if you want to test multiple
different device states

00:13:15.760 --> 00:13:18.640
and launch them all at
the same time in parallel,

00:13:18.640 --> 00:13:20.670
your options are pretty limited.

00:13:20.670 --> 00:13:23.530
You first had to create a
whole bunch of AVDs that

00:13:23.530 --> 00:13:25.060
reflected different
device settings

00:13:25.060 --> 00:13:26.620
and launched them
all in parallel,

00:13:26.620 --> 00:13:30.160
or and you couldn't even start
two instances of the same AVD

00:13:30.160 --> 00:13:34.480
because you got this error
message saying that the AVD was

00:13:34.480 --> 00:13:36.080
already in use.

00:13:36.080 --> 00:13:39.370
Well, we have a new
command for that now.

00:13:39.370 --> 00:13:42.100
It's called read only.

00:13:42.100 --> 00:13:43.660
I will show you
the command here.

00:13:49.490 --> 00:13:53.040
Actually, it's missing,
but I'll type it again.

00:13:55.570 --> 00:13:59.196
So it is called -read-only.

00:13:59.196 --> 00:14:00.570
And so when you
run this command,

00:14:00.570 --> 00:14:03.930
the emulator will start
but discard all changes.

00:14:03.930 --> 00:14:06.650
I am starting it
in the background

00:14:06.650 --> 00:14:09.520
just to make it easy
to start many of them.

00:14:09.520 --> 00:14:13.370
So I've just started
a second one.

00:14:13.370 --> 00:14:15.996
It's actually
overlapped on the first.

00:14:15.996 --> 00:14:17.165
A third one.

00:14:17.165 --> 00:14:20.191
A fourth one.

00:14:20.191 --> 00:14:25.300
And so you have these AVDs that
are all running independently,

00:14:25.300 --> 00:14:27.280
but they're off
the same AVD name

00:14:27.280 --> 00:14:30.300
because I just used API
28 for each of them.

00:14:30.300 --> 00:14:33.130
And notice here I'm printing
out the FPS and memory stats.

00:14:33.130 --> 00:14:39.100
And why are some of these only
around 200 or 300 megabytes

00:14:39.100 --> 00:14:40.800
of resonant memory?

00:14:40.800 --> 00:14:45.160
Well, that goes back to using a
file mapping for the guest RAM.

00:14:45.160 --> 00:14:48.370
In this case, the parts
of the guest memory

00:14:48.370 --> 00:14:51.700
that they share in common, that
they have not modified yet,

00:14:51.700 --> 00:14:54.940
will be shared and
will not occupy

00:14:54.940 --> 00:14:56.740
proportional set size
of resident memory

00:14:56.740 --> 00:14:59.735
or what have you.

00:14:59.735 --> 00:15:03.110
So this is called
copy and write.

00:15:03.110 --> 00:15:07.350
And we hope that this
makes your experience

00:15:07.350 --> 00:15:12.470
developing apps and testing
them more streamlined.

00:15:12.470 --> 00:15:12.970
Thank you.

00:15:12.970 --> 00:15:14.900
Now back to Yahan.

00:15:14.900 --> 00:15:15.920
Back to the slides.

00:15:15.920 --> 00:15:17.520
YAHAN ZHOU: That's nice.

00:15:17.520 --> 00:15:20.790
So I think it's kind
of obvious to see,

00:15:20.790 --> 00:15:23.890
but here is a comparison
of the boot time

00:15:23.890 --> 00:15:27.990
if you are using the Quick
Boot feature versus if you

00:15:27.990 --> 00:15:29.790
are doing the Cold Boot.

00:15:29.790 --> 00:15:34.530
So and Cold Boot, it takes
you more than 20 seconds

00:15:34.530 --> 00:15:38.400
to do the snapshot safe
on our Mapper Pro Machine

00:15:38.400 --> 00:15:41.050
as we are demoing it today.

00:15:41.050 --> 00:15:46.045
And on Quick Boot it is
usually about one second.

00:15:46.045 --> 00:15:49.211
So back to the frame
for the next demo.

00:15:49.211 --> 00:15:49.710
Yep.

00:15:49.710 --> 00:15:52.490
Back to the demo.

00:15:52.490 --> 00:15:56.120
FRANK YANG: So the next
part starts out with--

00:15:56.120 --> 00:15:59.580
we've also improved the GPU
performance of the emulator

00:15:59.580 --> 00:16:03.300
in recent versions
and in recent years.

00:16:03.300 --> 00:16:08.230
We worked a lot to bring OpenGL
ES 2 support very conformant,

00:16:08.230 --> 00:16:11.740
and to support OpenGL ES 3.

00:16:11.740 --> 00:16:15.690
To this end, we've created
some benchmark demo

00:16:15.690 --> 00:16:20.420
apps that showcase what
the emulator is capable of.

00:16:20.420 --> 00:16:23.640
So I'm just starting
this test over here.

00:16:23.640 --> 00:16:28.020
And so you can run pretty
like real-time 3D applications

00:16:28.020 --> 00:16:34.545
like this that are competitive
with real device performance.

00:16:34.545 --> 00:16:38.390
But before we go any further,
I'd like to go back to Yahan

00:16:38.390 --> 00:16:41.520
in the slides to go over
another interesting feature.

00:16:46.600 --> 00:16:51.090
YAHAN ZHOU: So coming back
to the Snapshot support,

00:16:51.090 --> 00:16:55.020
if you remember in
2010, the emulator--

00:16:55.020 --> 00:16:57.300
like even before
Emulator [INAUDIBLE],,

00:16:57.300 --> 00:17:01.130
we have our Quick Boot
feature and Snapshot support.

00:17:01.130 --> 00:17:03.660
And back in those
times, the emulator

00:17:03.660 --> 00:17:08.940
only supports snapshots
for RAM, Disk, and CPU.

00:17:08.940 --> 00:17:13.930
The big missing part here
was GPU based snapshot.

00:17:13.930 --> 00:17:17.670
So this eventually
falls our users

00:17:17.670 --> 00:17:22.829
to choose between a hardware
GPU emulation and the Quick Boot

00:17:22.829 --> 00:17:24.180
feature.

00:17:24.180 --> 00:17:26.760
If you choose the
hardware GPU emulation,

00:17:26.760 --> 00:17:30.060
you get a pretty nice
runtime performance,

00:17:30.060 --> 00:17:31.980
but your boot time will suffer.

00:17:31.980 --> 00:17:34.832
And you indeed are a slow boot.

00:17:34.832 --> 00:17:37.470
If you choose the
Quick Boot feature,

00:17:37.470 --> 00:17:39.300
your boot time will
be fast, but you'll

00:17:39.300 --> 00:17:42.160
have no runtime
hardware GPU support,

00:17:42.160 --> 00:17:46.210
which means the runtime
performance will suffer.

00:17:46.210 --> 00:17:48.510
So this is in 2010.

00:17:48.510 --> 00:17:51.930
And people have always
chose one between the two.

00:17:51.930 --> 00:17:53.910
And it is 2018 now.

00:17:53.910 --> 00:17:56.140
We have better
version of everything,

00:17:56.140 --> 00:18:00.450
including the hardware
GPU snapshot support.

00:18:00.450 --> 00:18:04.650
This allows our users to
choose both the Quick Boot

00:18:04.650 --> 00:18:09.772
feature as well as hardware
GPU emulation simultaneously.

00:18:09.772 --> 00:18:12.170
So if you look at
what was happening

00:18:12.170 --> 00:18:18.190
behind the scene for this
hardware GPU snapshot support,

00:18:18.190 --> 00:18:22.240
here is the emulator GPU stack.

00:18:22.240 --> 00:18:25.490
At the highest level, you've
got the emulated Android

00:18:25.490 --> 00:18:30.570
OS, which issue GPU commands.

00:18:30.570 --> 00:18:34.830
At the lowest level, you've got
your hardware graphics card,

00:18:34.830 --> 00:18:40.414
which accept and
execute GPU commands.

00:18:40.414 --> 00:18:44.560
In between them we have the
emulator layer, which we call,

00:18:44.560 --> 00:18:46.690
then, translator.

00:18:46.690 --> 00:18:51.110
So the translator will translate
GPU commands from the emulated

00:18:51.110 --> 00:18:55.210
Android into your hardware GPU.

00:18:55.210 --> 00:18:57.820
When we are doing the
GPU snapshot support,

00:18:57.820 --> 00:19:01.440
we put all our snapshot logic
into the translator layer,

00:19:01.440 --> 00:19:04.540
such that if you
serialize its own space

00:19:04.540 --> 00:19:08.630
and dump them into your
snapshot saved file.

00:19:08.630 --> 00:19:12.680
So one big question here
was the hardware state,

00:19:12.680 --> 00:19:16.450
which is eventually [INAUDIBLE]
through the emulator

00:19:16.450 --> 00:19:20.550
and different renders
implemented differently.

00:19:20.550 --> 00:19:22.680
So to save and load
hardware states,

00:19:22.680 --> 00:19:29.930
we use standard GL [? APIs ?]
to fetch all the hardware states

00:19:29.930 --> 00:19:32.490
from your hardware-- what is
calleed into the translator

00:19:32.490 --> 00:19:33.420
layer.

00:19:33.420 --> 00:19:36.300
Then the translator layer
will serialize all of them

00:19:36.300 --> 00:19:38.720
and write them into
your snapshot file.

00:19:38.720 --> 00:19:43.520
In this way we can save and
recover your whole emulated

00:19:43.520 --> 00:19:45.020
hardware GPU states.

00:19:49.960 --> 00:19:51.284
Frank, you want to talk about--

00:19:51.284 --> 00:19:52.200
FRANK YANG: All right.

00:19:52.200 --> 00:19:53.860
Thank you, Yahan.

00:19:53.860 --> 00:19:57.000
Now, in this demo, I'd
like to demonstrate

00:19:57.000 --> 00:20:01.450
that the GPU state is being
snapshotted in its entirety.

00:20:01.450 --> 00:20:05.390
We didn't just do something
special case for Android UI.

00:20:05.390 --> 00:20:09.870
It can resume 3D apps like
this almost immediately

00:20:09.870 --> 00:20:13.605
with the Snapshot Load feature.

00:20:13.605 --> 00:20:15.100
All right.

00:20:15.100 --> 00:20:17.590
And you can-- for those of you
who don't know already, you

00:20:17.590 --> 00:20:19.840
can rotate the
emulator orientation

00:20:19.840 --> 00:20:23.070
using these rotate buttons.

00:20:23.070 --> 00:20:24.840
So back to the slides.

00:20:24.840 --> 00:20:28.776
I'd like to show a
brief presentation.

00:20:28.776 --> 00:20:29.920
All right.

00:20:29.920 --> 00:20:32.020
So I know that many of
you know this already,

00:20:32.020 --> 00:20:34.840
but for the benefit of
people in the audience who

00:20:34.840 --> 00:20:39.400
don't know yet, I would like to
recap on some of the basic ways

00:20:39.400 --> 00:20:42.190
to use the command line to
launch the emulator, which

00:20:42.190 --> 00:20:45.100
can include some useful
options if you're running a CI

00:20:45.100 --> 00:20:48.380
server or otherwise power user.

00:20:48.380 --> 00:20:52.330
So the emulator resides in
your Android SDK folder,

00:20:52.330 --> 00:20:55.450
Android SDK root slash emulator.

00:20:55.450 --> 00:20:57.610
And once you're
in that directory,

00:20:57.610 --> 00:21:01.240
you have to give the AVD name
using the dash AVD command line

00:21:01.240 --> 00:21:02.990
option.

00:21:02.990 --> 00:21:05.500
Note that this name
may differ from what's

00:21:05.500 --> 00:21:07.270
displayed in the AVD manager.

00:21:07.270 --> 00:21:11.800
So if you want to know what the
exact sequence of characters

00:21:11.800 --> 00:21:13.810
that you need to
input there, then you

00:21:13.810 --> 00:21:15.630
run emulator dash list AVDs.

00:21:18.320 --> 00:21:20.780
Second, how do you
control Quick Boot?

00:21:20.780 --> 00:21:22.940
Sometimes you don't
want to use snapshots

00:21:22.940 --> 00:21:26.120
or you don't want to save
your changes on exit.

00:21:26.120 --> 00:21:28.100
Well, we've got you covered.

00:21:28.100 --> 00:21:31.960
So the first one,
No Snapshot Load

00:21:31.960 --> 00:21:35.180
is to perform a cold
boot without attempting

00:21:35.180 --> 00:21:39.492
to load the current state
that is on the device.

00:21:39.492 --> 00:21:44.170
The second one, Quick Boot
discard changes to snapshot,

00:21:44.170 --> 00:21:48.370
is good for some CI use
cases and for people

00:21:48.370 --> 00:21:51.610
who just want the consistent
startup experience

00:21:51.610 --> 00:21:55.315
and want to wipe it clean
when they're done with it.

00:21:55.315 --> 00:22:00.560
In this you entered No Snapshot
Save on the command line.

00:22:00.560 --> 00:22:02.950
And all of the changes
to the snapshot

00:22:02.950 --> 00:22:06.020
will be discarded when
you exit the emulator.

00:22:06.020 --> 00:22:09.560
Finally, if snapshots
are just not your thing,

00:22:09.560 --> 00:22:12.870
you can add No Snapshot
to the command line,

00:22:12.870 --> 00:22:16.620
and that will bring the emulator
back to the way it was before.

00:22:20.460 --> 00:22:23.820
And to recap, in the
demo I gave earlier,

00:22:23.820 --> 00:22:27.020
when I was launching multiple
instances of the same AVD,

00:22:27.020 --> 00:22:30.690
well, that is the
read only option.

00:22:30.690 --> 00:22:32.760
That option will
control whether you're

00:22:32.760 --> 00:22:35.280
allowed to run multiple
instances of the same AVD

00:22:35.280 --> 00:22:35.780
or not.

00:22:35.780 --> 00:22:38.820
And when you're running in
that mode, all of the changes

00:22:38.820 --> 00:22:42.720
to both the guest virtual disk
and to the snapshot, whatever

00:22:42.720 --> 00:22:46.330
you do, it'll be
discarded when you exit.

00:22:46.330 --> 00:22:49.650
To invoke this you would
run emulator dash AVD,

00:22:49.650 --> 00:22:54.250
the AVD name, followed
by dash read dash only.

00:22:54.250 --> 00:22:55.920
And I put an
ampersand at the end--

00:22:55.920 --> 00:22:58.740
you don't have to-- to
launch it in background.

00:22:58.740 --> 00:23:01.320
It's just convenient
for demo purposes here.

00:23:04.660 --> 00:23:05.590
All right.

00:23:05.590 --> 00:23:09.310
Now I'd like to
also talk about some

00:23:09.310 --> 00:23:12.010
of the command line options
for some of the features

00:23:12.010 --> 00:23:15.850
that we have introduced
recently to the emulator.

00:23:15.850 --> 00:23:18.100
In particular, screen record.

00:23:18.100 --> 00:23:20.500
Screen record is a
feature where you

00:23:20.500 --> 00:23:23.930
can record the contents of
the emulator to a video file

00:23:23.930 --> 00:23:26.930
and then play them back
using your favorite app.

00:23:26.930 --> 00:23:29.530
This is great for
CI users who want

00:23:29.530 --> 00:23:32.680
to be able to easily record
what's going on when running

00:23:32.680 --> 00:23:36.640
tests on their app, and to
easily send reproductions

00:23:36.640 --> 00:23:39.210
of bugs to stakeholders.

00:23:39.210 --> 00:23:44.490
So the first set of commands
concerns how to start and stop

00:23:44.490 --> 00:23:46.520
the screen recording.

00:23:46.520 --> 00:23:52.030
ADB emu screenrecord
start, followed by the path

00:23:52.030 --> 00:23:56.570
to the file, will
start the recording.

00:23:56.570 --> 00:24:00.730
And it is important that you
provide the absolute path.

00:24:00.730 --> 00:24:03.760
Otherwise, you might
not get it saved.

00:24:03.760 --> 00:24:04.760
It's a little confusing.

00:24:04.760 --> 00:24:05.259
Sorry.

00:24:05.259 --> 00:24:06.512
We're working on it.

00:24:06.512 --> 00:24:10.730
The second command, ADB
emu screenrecord stop,

00:24:10.730 --> 00:24:13.962
stops the recording, and is
a signal to save the file.

00:24:13.962 --> 00:24:18.180
So after you're done with
that, you can access the file.

00:24:18.180 --> 00:24:20.760
The second one concerns
if you don't really

00:24:20.760 --> 00:24:23.640
want the full video
recording part,

00:24:23.640 --> 00:24:26.250
you can instead just
take a screenshot.

00:24:26.250 --> 00:24:29.840
In this use case,
the console command

00:24:29.840 --> 00:24:32.840
is screenrecord screenshot
followed by path

00:24:32.840 --> 00:24:38.090
to the directory where you want
the screenshots to be saved.

00:24:38.090 --> 00:24:42.590
Now, let's go to the demo, where
I will demonstrate the screen

00:24:42.590 --> 00:24:45.360
recording commands.

00:24:45.360 --> 00:24:47.980
So we're on the
emulator right now.

00:24:47.980 --> 00:24:57.816
And let's try to find a
different app to record.

00:24:57.816 --> 00:25:00.894
Why don't we start
up the camera?

00:25:00.894 --> 00:25:02.100
All right.

00:25:02.100 --> 00:25:03.190
So we're here.

00:25:03.190 --> 00:25:05.585
So that's going on.

00:25:05.585 --> 00:25:09.110
And I'm going to run this.

00:25:09.110 --> 00:25:18.210
So AB emu AVD screenrecord
start users [INAUDIBLE],,

00:25:18.210 --> 00:25:25.922
it's my username, documents,
Dev Summit, demo.webm.

00:25:25.922 --> 00:25:29.030
So while it's recording,
let's just move around in here

00:25:29.030 --> 00:25:35.409
a little bit to make something
happen and stop the recording.

00:25:40.100 --> 00:25:42.070
OK, that's weird, kind of.

00:25:45.080 --> 00:25:49.470
Oh, sorry, I accidentally
typed AVD there.

00:25:49.470 --> 00:25:52.885
Yeah, so let's do
another recording.

00:25:57.160 --> 00:26:00.680
All right, so the
video is saved.

00:26:00.680 --> 00:26:03.680
And you can open it in
your favorite web browser.

00:26:08.430 --> 00:26:08.930
OK.

00:26:08.930 --> 00:26:10.740
Let's see.

00:26:10.740 --> 00:26:11.240
Yeah.

00:26:11.240 --> 00:26:11.740
There we go.

00:26:14.514 --> 00:26:15.910
So it's a webm file.

00:26:15.910 --> 00:26:20.050
It will work in
most major browsers.

00:26:20.050 --> 00:26:25.920
Second, there is also a UI
for recording these screens.

00:26:25.920 --> 00:26:29.990
It is in the extended controls
under the Screen Record tab.

00:26:29.990 --> 00:26:32.060
So in the Screen Record
tab, it starts out

00:26:32.060 --> 00:26:34.550
with a single button,
Start Recording.

00:26:34.550 --> 00:26:38.270
So once we're starting recording
I'll move around a little bit.

00:26:38.270 --> 00:26:44.670
Maybe go to recents, swipe
away those apps, and stop.

00:26:44.670 --> 00:26:46.170
Now, once you're
done recording, you

00:26:46.170 --> 00:26:47.580
don't have to save it to a file.

00:26:47.580 --> 00:26:52.180
You can preview it directly
in the extended controls UI.

00:26:52.180 --> 00:26:56.060
So this is just a video
of what we just did.

00:26:56.060 --> 00:26:58.210
Go to recents, swipe away
the apps, go back to it

00:26:58.210 --> 00:26:59.850
on the screen.

00:26:59.850 --> 00:27:03.020
But you can still save
it in wherever you want.

00:27:03.020 --> 00:27:06.690
So let's just save
this as demo two.

00:27:06.690 --> 00:27:11.940
And that similarly
works in the browser.

00:27:15.090 --> 00:27:15.990
OK.

00:27:15.990 --> 00:27:18.410
So that's one of the
features that we've

00:27:18.410 --> 00:27:23.000
added in 2017 and 2018,
is screen recording,

00:27:23.000 --> 00:27:27.680
to make your CI
use cases better.

00:27:27.680 --> 00:27:33.290
Another feature that we've
been doing a lot of work on,

00:27:33.290 --> 00:27:36.040
and is pretty exciting,
is AR core support.

00:27:36.040 --> 00:27:41.470
Now, AR core support consists
of a few main components.

00:27:41.470 --> 00:27:43.890
The first one, which you
may have seen already,

00:27:43.890 --> 00:27:46.350
is the virtual scene camera.

00:27:46.350 --> 00:27:51.580
With the virtual scene camera
we render a virtual environment,

00:27:51.580 --> 00:27:56.590
which is suitable to image
recognition and model

00:27:56.590 --> 00:27:59.200
placement in AR apps.

00:27:59.200 --> 00:28:03.120
So I will demonstrate
a few of them here.

00:28:03.120 --> 00:28:05.710
In the background,
in Android Studio,

00:28:05.710 --> 00:28:10.740
I've opened the augmented
image AR core sample.

00:28:10.740 --> 00:28:17.190
This is available in Sceneform
Android SDK from GitHub.

00:28:17.190 --> 00:28:21.120
And what AR core
provides in it--

00:28:21.120 --> 00:28:23.910
it's not just for the emulator,
but there is also integrations

00:28:23.910 --> 00:28:25.992
in studio as well.

00:28:25.992 --> 00:28:32.000
So for example, there
is this Sceneform plugin

00:28:32.000 --> 00:28:35.810
for Android Studio where
we can view models that are

00:28:35.810 --> 00:28:39.140
meant for use in AR core apps.

00:28:39.140 --> 00:28:42.070
In addition, we can change
all the material properties

00:28:42.070 --> 00:28:44.720
we want directly in studio.

00:28:44.720 --> 00:28:46.930
So this is the lower left frame.

00:28:46.930 --> 00:28:53.110
And I might just say
lower the red tint a bit.

00:28:57.610 --> 00:29:00.400
OK, I guess that didn't really
change the color very much.

00:29:00.400 --> 00:29:04.290
So I'm going to change
blue to zero as well.

00:29:04.290 --> 00:29:10.490
So once you save these files,
the models should get reloaded,

00:29:10.490 --> 00:29:15.250
and you'll see that it's
mostly pure green now.

00:29:15.250 --> 00:29:20.990
And we can-- the workflow,
we can just edit this model

00:29:20.990 --> 00:29:25.390
and deploy it to the
device while we wait--

00:29:25.390 --> 00:29:25.890
I guess.

00:29:30.770 --> 00:29:31.410
Right.

00:29:31.410 --> 00:29:37.700
And so in this app, we
are looking for images

00:29:37.700 --> 00:29:39.570
to recognize.

00:29:39.570 --> 00:29:42.290
Another feature that we've added
to the emulator for AR core

00:29:42.290 --> 00:29:45.560
support is the ability
to load augmented images.

00:29:45.560 --> 00:29:49.850
This is in the extended controls
panel under the Camera tab.

00:29:49.850 --> 00:29:53.420
Now we can choose
different posters

00:29:53.420 --> 00:29:55.450
to appear inside
the virtual scene.

00:29:55.450 --> 00:29:58.610
And I've set this
JPEG of the Earth

00:29:58.610 --> 00:30:02.404
to appear both on the
table and the wall.

00:30:02.404 --> 00:30:05.676
So once you travel inside
the scene with this,

00:30:05.676 --> 00:30:10.350
and turn, face the wall, we're
starting to detect the image.

00:30:10.350 --> 00:30:12.785
And it shows up there.

00:30:12.785 --> 00:30:15.120
So this shows that we can--

00:30:15.120 --> 00:30:17.250
if you're a
developer of AR apps,

00:30:17.250 --> 00:30:18.750
you have this
end-to-end workflow

00:30:18.750 --> 00:30:21.397
where we can start
in Studio and do it

00:30:21.397 --> 00:30:23.480
all in the emulator with
the virtual scene camera.

00:30:26.246 --> 00:30:28.715
So that's pretty cool.

00:30:28.715 --> 00:30:33.480
Finally, another feature
that I would like to mention,

00:30:33.480 --> 00:30:36.870
I'd like to call out-- unless,
if you haven't seen it before,

00:30:36.870 --> 00:30:41.310
is improved support for updating
GMS core and Google Play

00:30:41.310 --> 00:30:42.440
services.

00:30:42.440 --> 00:30:44.430
This is very important
to app developers

00:30:44.430 --> 00:30:46.740
because they need to test
how the app will actually

00:30:46.740 --> 00:30:50.450
run with different
versions of GMS core.

00:30:50.450 --> 00:30:53.630
If you are using a Google Play
Store image, in the extended

00:30:53.630 --> 00:30:57.050
controls panel there is
a tab called Google Play,

00:30:57.050 --> 00:30:58.940
and inside it there
is this button

00:30:58.940 --> 00:31:03.170
that shows, both your current
GMS core version and a button

00:31:03.170 --> 00:31:04.550
to update it.

00:31:04.550 --> 00:31:07.850
Once you press Update, you'll
be taken to the Play Store

00:31:07.850 --> 00:31:10.400
and be given the
option to update it.

00:31:10.400 --> 00:31:12.170
I happen to have
updated already.

00:31:12.170 --> 00:31:14.630
And this is the latest
version, so it does not give me

00:31:14.630 --> 00:31:15.950
a prompt to update here.

00:31:15.950 --> 00:31:20.720
But if a new version does
come out, it would say Update.

00:31:20.720 --> 00:31:23.430
I would also like to talk about
the integration of the Play

00:31:23.430 --> 00:31:25.790
Store and the
emulator in general.

00:31:25.790 --> 00:31:31.790
So this can be useful
for app developers who

00:31:31.790 --> 00:31:36.180
would like to test their app
in more end-to-end scenarios.

00:31:36.180 --> 00:31:38.030
For example, if
your app requires

00:31:38.030 --> 00:31:40.280
other apps to be installed
in order to work,

00:31:40.280 --> 00:31:42.860
you can download them from
the Play Store directly.

00:31:42.860 --> 00:31:46.010
Also, you can look at your
app in the marketplace

00:31:46.010 --> 00:31:48.140
and see how users are
reacting to it right

00:31:48.140 --> 00:31:53.440
there, and from different
device sizes and form factors.

00:31:53.440 --> 00:31:56.240
And so that concludes
the feature demos.

00:31:56.240 --> 00:31:58.610
So back to Yahan and the slides.

00:32:01.694 --> 00:32:02.610
YAHAN ZHOU: All right.

00:32:02.610 --> 00:32:08.280
So here you saw a summary of the
features we talk about today.

00:32:08.280 --> 00:32:11.670
If you might have noticed,
there are two channels

00:32:11.670 --> 00:32:13.810
of the emulator out there.

00:32:13.810 --> 00:32:16.410
So the first one is the
stable channel, which

00:32:16.410 --> 00:32:18.150
is the one you normally get.

00:32:18.150 --> 00:32:22.380
The latest update
was from July, 2018.

00:32:22.380 --> 00:32:24.810
And the second channel
is the canary channel,

00:32:24.810 --> 00:32:28.860
which is less stable, but it has
all the cutting-edge features

00:32:28.860 --> 00:32:30.810
we have in the emulator.

00:32:30.810 --> 00:32:32.460
And it is released weekly.

00:32:32.460 --> 00:32:34.640
So feel free to try it out.

00:32:34.640 --> 00:32:37.620
And in the stable
channel, we have

00:32:37.620 --> 00:32:42.180
this list of features
already released, including

00:32:42.180 --> 00:32:46.950
more Hypervisor supports, Quick
Boot feature, Generic Snapshot

00:32:46.950 --> 00:32:51.210
feature, the Play Stores,
and screen recording,

00:32:51.210 --> 00:32:56.280
and the AR Core and
Virtual Sensor supports.

00:32:56.280 --> 00:32:59.590
If you are trying out the
canary channel emulator,

00:32:59.590 --> 00:33:03.660
you have a few more stuff,
including the faster Quick

00:33:03.660 --> 00:33:07.660
Boot, feature as we have
shown in today's demo.

00:33:07.660 --> 00:33:12.006
As far as the multi
instance support.

00:33:12.006 --> 00:33:15.110
And for those of you who
are curious about how

00:33:15.110 --> 00:33:19.040
to switch the channel,
here is a instruction.

00:33:19.040 --> 00:33:23.330
In the Android Studio you can
turn on your preference page,

00:33:23.330 --> 00:33:28.090
and in the updates you have
your channel switch right there.

00:33:28.090 --> 00:33:31.250
After that you go to the
emulator download page

00:33:31.250 --> 00:33:33.500
and you will see the
newer version of it

00:33:33.500 --> 00:33:36.190
available for download.

00:33:36.190 --> 00:33:39.660
So I believe that
concludes our talk.

00:33:39.660 --> 00:33:43.340
So we'll be QA'ing
in the [? laundry. ?]

00:33:43.340 --> 00:33:46.184
So thanks for attending.

00:33:46.184 --> 00:33:47.100
FRANK YANG: Thank you.

00:33:47.100 --> 00:33:49.200
[APPLAUSE]

00:33:49.200 --> 00:33:52.250
[MUSIC PLAYING]

