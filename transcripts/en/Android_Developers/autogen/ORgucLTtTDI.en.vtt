WEBVTT
Kind: captions
Language: en

00:00:02.353 --> 00:00:06.950
 Optimizing the performance of your Android app is about how you manage your memory. 

00:00:06.950 --> 00:00:10.664
 More often than not, problems here can arise from the use of groups 

00:00:10.665 --> 00:00:13.280
 Which may not be economical when it comes to the source. 

00:00:13.280 --> 00:00:14.365
 My name is Colt McCannless 

00:00:14.365 --> 00:00:16.490
 To help you write better-performing apps, 

00:00:16.491 --> 00:00:21.050
 The Android system provides a list of groups designed specifically for mobile phone development. 

00:00:21.580 --> 00:00:24.040
 Consider the commonly used HashMap object. 

00:00:24.040 --> 00:00:28.545
 It is quite useful from a language perspective, but it is also a major obstacle to memory. 

00:00:28.580 --> 00:00:31.485
 As you see, the typical HashMap system works a bit like this. 

00:00:31.571 --> 00:00:34.223
 You take a basic object and apply it hash, 

00:00:34.223 --> 00:00:36.140
 Which gives you an index in a large matrix. 

00:00:36.150 --> 00:00:39.358
 In the position of that index, you can place the value of the object, 

00:00:39.462 --> 00:00:42.715
 Which means that the biggest problem you have to avoid in design are clashes, 

00:00:42.874 --> 00:00:47.074
 Or alternatively, when multiple keys are split into the same place in that array. 

00:00:47.074 --> 00:00:48.463
 Now, small matrices mean 

00:00:48.463 --> 00:00:50.861
 It will end up with a lot of hash collisions. 

00:00:50.861 --> 00:00:54.633
 I mean, when you plan 20,000 objects in 10 locations, by definition, 

00:00:54.673 --> 00:00:56.433
 Will lead to little chaos. 

00:00:56.433 --> 00:01:00.180
 As such, most HashMap will eventually allocate a large matrix 

00:01:00.180 --> 00:01:02.240
 In order to reduce the likelihood of collisions, 

00:01:02.240 --> 00:01:05.666
 Then go to add a little crazy logic in the event that these things happened, 

00:01:05.682 --> 00:01:07.664
 Such as sequence algorithms and others. 

00:01:07.664 --> 00:01:11.430
 So it is clear that this entire matrix contains a small number of objects 

00:01:11.430 --> 00:01:14.654
 Not really ideal for the minimum hand of machine memory, 

00:01:14.726 --> 00:01:18.381
 This is why the Android environment provides an alternative container category 

00:01:18.429 --> 00:01:20.930
 Which are more efficient than memory, ArrayMap. 

00:01:20.930 --> 00:01:25.540
 ArrayMap provides HashMap matching function, but avoids all overheads overhead 

00:01:25.540 --> 00:01:28.394
 Using two small matrices instead of a large matrix. 

00:01:28.394 --> 00:01:32.711
 The first array contains hashes for the given keys in their order of the workbook. 

00:01:32.720 --> 00:01:37.085
 The second matrix stores the key and the value of objects that are inserted into the group, 

00:01:37.085 --> 00:01:41.235
 Are intertwined according to a hierarchical matrix arrangement. 

00:01:41.690 --> 00:01:44.500
 When you want to bring value, we will create a hash to get the key 

00:01:44.500 --> 00:01:47.612
 Then we do a binary search of the hash matrix to find the index. 

00:01:47.644 --> 00:01:51.766
 We can use this index immediately afterwards to find the location in the key value pair 

00:01:51.805 --> 00:01:53.648
 In the interlocking matrix. 

00:01:53.659 --> 00:01:57.795
 Now, if the key in the second array is not equal to the key 

00:01:57.804 --> 00:02:00.043
 Which we delivered when we were looking for things, 

00:02:00.043 --> 00:02:01.991
 Then we assumed that there was a collision. 

00:02:01.991 --> 00:02:05.555
 To solve this problem, we'll follow the keys in both directions, 

00:02:05.556 --> 00:02:07.593
 To try to find the right match. 

00:02:07.600 --> 00:02:11.482
 These mean that the more objects in the container, 

00:02:11.483 --> 00:02:14.330
 Time is also needed to access a single object. 

00:02:14.383 --> 00:02:19.500
 Basically, you're balancing the smaller memory costs for the most expensive time of arrival. 

00:02:19.500 --> 00:02:21.906
 Now, as long as these arrays are contiguous in memory, 

00:02:21.921 --> 00:02:24.681
 There are some things you should remember about using them. 

00:02:24.681 --> 00:02:27.921
 Mainly understand how delete and add to containers. 

00:02:27.980 --> 00:02:30.090
 Deleting items can occur in two paths. 

00:02:30.090 --> 00:02:32.673
 Either be lucky and need to do just pressure step, 

00:02:32.673 --> 00:02:35.033
 This means moving the deleted items to the end 

00:02:35.034 --> 00:02:37.177
 Then move all other values ​​forward. 

00:02:37.180 --> 00:02:39.223
 Or you could end up in the slowest path 

00:02:39.223 --> 00:02:43.783
 Which in fact requires changing the size and copying of the elements to remove the value in demand. 

00:02:44.190 --> 00:02:46.450
 Inserting is in the flip side of this currency. 

00:02:46.450 --> 00:02:48.069
 If the matrix is ​​compressed, 

00:02:48.116 --> 00:02:50.409
 After that we can reuse those custom blocks, 

00:02:50.409 --> 00:02:53.180
 Then move everything to keep our workbook arranged. 

00:02:53.180 --> 00:02:57.072
 However, the slow path requires a full resize of the adjacent array 

00:02:57.073 --> 00:03:01.050
 In order to create space, as well as copy and move everything. 

00:03:01.162 --> 00:03:03.862
 In general, this means that the insertion and deletion of the ArrayMap 

00:03:03.892 --> 00:03:06.569
 It will cost a little more in terms of performance. 

00:03:06.577 --> 00:03:10.099
 But if you leave the number of objects in them small, such as hundreds of objects, 

00:03:10.130 --> 00:03:12.110
 This is not really something to worry about. 

00:03:12.110 --> 00:03:13.970
 Note that these arrays are small contiguous 

00:03:13.970 --> 00:03:16.050
 Means that when the number of values ​​is very low 

00:03:16.050 --> 00:03:18.556
 You will have a lot of savings compared to the standard HashMap. 

00:03:18.556 --> 00:03:21.411
 For blank maps, there are no existing allocations to occupy the area. 

00:03:21.411 --> 00:03:24.890
 For a small number of objects, it is the perfect choice for memory. 

00:03:24.890 --> 00:03:27.952
 By the way, there is another wonderful feature for these containers 

00:03:27.953 --> 00:03:30.251
 Is that you can repeat using indexing on them. 

00:03:30.326 --> 00:03:35.058
 Compare this with the HashMap container, which requires you to use the refined form, 

00:03:35.098 --> 00:03:39.308
 This, of course, is much slower and requires more memory to accomplish. 

00:03:39.360 --> 00:03:44.010
 But obviously, it is not wise to use these improved containers in each case. 

00:03:44.010 --> 00:03:47.012
 But there are some optimal situations to consider. 

00:03:47.020 --> 00:03:50.256
 First, in cases where you have a few items, 

00:03:50.256 --> 00:03:51.995
 Where they number in hundreds or so, 

00:03:51.996 --> 00:03:55.870
 Of many accessions, or insertions and deletions that are rarely repeated 

00:03:55.870 --> 00:03:58.429
 The cost of doing so is not really remarkable. 

00:03:58.640 --> 00:04:03.131
 Secondly, in cases where we have maps containers such as map maps, 

00:04:03.131 --> 00:04:05.608
 Sub-maps tend to have few elements 

00:04:05.609 --> 00:04:08.336
 They will often be repeated several times. 

00:04:08.336 --> 00:04:11.085
 If your use is not in any of these situations, 

00:04:11.085 --> 00:04:13.791
 It may be better to stick to the HashMap class, 

00:04:13.897 --> 00:04:16.756
 Which in fact highlight a very interesting point. 

00:04:16.836 --> 00:04:19.050
 Performance improvement is an ongoing tradeoff 

00:04:19.051 --> 00:04:23.650
 Between finding the right container for the correct usage pattern for the correct memory pattern. 

00:04:23.930 --> 00:04:26.050
 As one of them said, there is no magic solution, 

00:04:26.050 --> 00:04:29.434
 That's why you need to check out the rest of Android's performance patterns 

00:04:29.435 --> 00:04:32.190
 For more information on these types of swaps. 

00:04:32.190 --> 00:04:34.654
 Do not forget to join our community on Google+ as well 

00:04:34.654 --> 00:04:38.818
 To hear other war stories from developers who have faced similar situations. 

00:04:39.180 --> 00:04:43.277
 So stay calm and type your code, and always remember, performance is important. 

