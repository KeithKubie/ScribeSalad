WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:04.390
So let's first look at the methods
that try to reduce hit time.

00:00:04.390 --> 00:00:09.360
Some of the methods are pretty obvious,
like reduce the cache size.

00:00:09.360 --> 00:00:13.750
That's going to improve the hit time,
but this is bad for the miss rate.

00:00:13.750 --> 00:00:18.255
So the overall aim at might not actually
be improved, because we are going to

00:00:18.255 --> 00:00:22.689
Improve the hit time, but we're going to
increase the miss rate and thus,

00:00:22.689 --> 00:00:26.770
pay more of those miss
penalties that are quite large.

00:00:26.770 --> 00:00:31.422
So we can do this, but we have to do it
carefully to balance the miss rate and

00:00:31.422 --> 00:00:32.336
the hit time.

00:00:32.336 --> 00:00:35.878
The next simple method is to
use the cache associativity.

00:00:35.878 --> 00:00:38.558
This is going to make the cache faster,

00:00:38.558 --> 00:00:43.572
because we need to search in only one or
few places for a block on a hit,

00:00:43.572 --> 00:00:47.566
but this is also bad for
miss rate for similar reasons.

00:00:47.566 --> 00:00:52.760
When we reduce associativity,
we are creating more messes.

00:00:52.760 --> 00:00:56.180
Because blocks is going to start having
conflicts and start kicking each other

00:00:56.180 --> 00:01:02.140
out, even though they might coexist
peacefully in a more associative cache.

00:01:02.140 --> 00:01:04.000
So the less simple methods for

00:01:04.000 --> 00:01:09.240
a use in hit time involve overlapping
the cache hit with another hit.

00:01:09.240 --> 00:01:12.551
Overlapping the cache
hit with the TLB axis.

00:01:12.551 --> 00:01:14.128
Optimizing the lookups,

00:01:14.128 --> 00:01:18.860
so that common cases get faster without
sacrificing the uncommon case too much

00:01:18.860 --> 00:01:23.480
and maintaining the replacement
state in the cache more quickly.

00:01:23.480 --> 00:01:27.495
So on hits, we need to update some
state that we will need later for

00:01:27.495 --> 00:01:30.637
replacements and
we can make this more efficient.

00:01:30.637 --> 00:01:35.292
So we will look at four methods
that are trying to achieve these

00:01:35.292 --> 00:01:36.730
four things here.

