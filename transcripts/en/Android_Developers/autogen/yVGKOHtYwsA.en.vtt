WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.659
 
long lasting battery is the most

00:00:02.659 --> 00:00:02.669
long lasting battery is the most
 

00:00:02.669 --> 00:00:05.090
long lasting battery is the most
important factor for Android users and

00:00:05.090 --> 00:00:05.100
important factor for Android users and
 

00:00:05.100 --> 00:00:07.160
important factor for Android users and
by extension developers should care

00:00:07.160 --> 00:00:07.170
by extension developers should care
 

00:00:07.170 --> 00:00:09.890
by extension developers should care
about it too while we want to achieve

00:00:09.890 --> 00:00:09.900
about it too while we want to achieve
 

00:00:09.900 --> 00:00:12.350
about it too while we want to achieve
reliable battery life or Android apps

00:00:12.350 --> 00:00:12.360
reliable battery life or Android apps
 

00:00:12.360 --> 00:00:14.870
reliable battery life or Android apps
should have some flexibility to run in

00:00:14.870 --> 00:00:14.880
should have some flexibility to run in
 

00:00:14.880 --> 00:00:17.390
should have some flexibility to run in
the background the platform needs to

00:00:17.390 --> 00:00:17.400
the background the platform needs to
 

00:00:17.400 --> 00:00:19.429
the background the platform needs to
provide consistent restrictions as Scott

00:00:19.429 --> 00:00:19.439
provide consistent restrictions as Scott
 

00:00:19.439 --> 00:00:21.830
provide consistent restrictions as Scott
Reil to prevent a few misbehaving apps

00:00:21.830 --> 00:00:21.840
Reil to prevent a few misbehaving apps
 

00:00:21.840 --> 00:00:24.109
Reil to prevent a few misbehaving apps
from draining the battery this is

00:00:24.109 --> 00:00:24.119
from draining the battery this is
 

00:00:24.119 --> 00:00:25.820
from draining the battery this is
important such that you can design your

00:00:25.820 --> 00:00:25.830
important such that you can design your
 

00:00:25.830 --> 00:00:28.450
important such that you can design your
apps to run consistently across devices

00:00:28.450 --> 00:00:28.460
apps to run consistently across devices
 

00:00:28.460 --> 00:00:31.880
apps to run consistently across devices
at the same time users should have some

00:00:31.880 --> 00:00:31.890
at the same time users should have some
 

00:00:31.890 --> 00:00:33.979
at the same time users should have some
control and visibility to app battery

00:00:33.979 --> 00:00:33.989
control and visibility to app battery
 

00:00:33.989 --> 00:00:36.530
control and visibility to app battery
usage how does Android balance these

00:00:36.530 --> 00:00:36.540
usage how does Android balance these
 

00:00:36.540 --> 00:00:39.500
usage how does Android balance these
considerations from Android lollipop to

00:00:39.500 --> 00:00:39.510
considerations from Android lollipop to
 

00:00:39.510 --> 00:00:42.049
considerations from Android lollipop to
pee the platform has introduced a series

00:00:42.049 --> 00:00:42.059
pee the platform has introduced a series
 

00:00:42.059 --> 00:00:44.810
pee the platform has introduced a series
of features that aim to offer power

00:00:44.810 --> 00:00:44.820
of features that aim to offer power
 

00:00:44.820 --> 00:00:46.459
of features that aim to offer power
management based on three main

00:00:46.459 --> 00:00:46.469
management based on three main
 

00:00:46.469 --> 00:00:50.450
management based on three main
dimensions firstly device idle state or

00:00:50.450 --> 00:00:50.460
dimensions firstly device idle state or
 

00:00:50.460 --> 00:00:52.459
dimensions firstly device idle state or
how long the device has been unplugged

00:00:52.459 --> 00:00:52.469
how long the device has been unplugged
 

00:00:52.469 --> 00:00:54.920
how long the device has been unplugged
and with screen off the device could

00:00:54.920 --> 00:00:54.930
and with screen off the device could
 

00:00:54.930 --> 00:00:57.920
and with screen off the device could
enter DOS where all apps cannot acquire

00:00:57.920 --> 00:00:57.930
enter DOS where all apps cannot acquire
 

00:00:57.930 --> 00:01:00.619
enter DOS where all apps cannot acquire
way clocks no job services and sync

00:01:00.619 --> 00:01:00.629
way clocks no job services and sync
 

00:01:00.629 --> 00:01:02.750
way clocks no job services and sync
adapters can be run you are likely

00:01:02.750 --> 00:01:02.760
adapters can be run you are likely
 

00:01:02.760 --> 00:01:05.450
adapters can be run you are likely
familiar with this already the second

00:01:05.450 --> 00:01:05.460
familiar with this already the second
 

00:01:05.460 --> 00:01:08.179
familiar with this already the second
one is based on giving users control and

00:01:08.179 --> 00:01:08.189
one is based on giving users control and
 

00:01:08.189 --> 00:01:10.250
one is based on giving users control and
visibility there are a couple of

00:01:10.250 --> 00:01:10.260
visibility there are a couple of
 

00:01:10.260 --> 00:01:13.520
visibility there are a couple of
relevant features in Android pea battery

00:01:13.520 --> 00:01:13.530
relevant features in Android pea battery
 

00:01:13.530 --> 00:01:15.590
relevant features in Android pea battery
saver has been enhanced for users who

00:01:15.590 --> 00:01:15.600
saver has been enhanced for users who
 

00:01:15.600 --> 00:01:18.080
saver has been enhanced for users who
want to have extended battery life over

00:01:18.080 --> 00:01:18.090
want to have extended battery life over
 

00:01:18.090 --> 00:01:20.600
want to have extended battery life over
everything else possibly at the expense

00:01:20.600 --> 00:01:20.610
everything else possibly at the expense
 

00:01:20.610 --> 00:01:23.210
everything else possibly at the expense
of some feature degradation such as

00:01:23.210 --> 00:01:23.220
of some feature degradation such as
 

00:01:23.220 --> 00:01:25.280
of some feature degradation such as
restricted location services during

00:01:25.280 --> 00:01:25.290
restricted location services during
 

00:01:25.290 --> 00:01:28.340
restricted location services during
screen off users can turn this on any

00:01:28.340 --> 00:01:28.350
screen off users can turn this on any
 

00:01:28.350 --> 00:01:30.649
screen off users can turn this on any
time or set it to turn on automatically

00:01:30.649 --> 00:01:30.659
time or set it to turn on automatically
 

00:01:30.659 --> 00:01:32.660
time or set it to turn on automatically
when the device drops below a certain

00:01:32.660 --> 00:01:32.670
when the device drops below a certain
 

00:01:32.670 --> 00:01:35.420
when the device drops below a certain
threshold so developers should account

00:01:35.420 --> 00:01:35.430
threshold so developers should account
 

00:01:35.430 --> 00:01:37.580
threshold so developers should account
for these restrictions and test against

00:01:37.580 --> 00:01:37.590
for these restrictions and test against
 

00:01:37.590 --> 00:01:40.490
for these restrictions and test against
them there are times when apps might be

00:01:40.490 --> 00:01:40.500
them there are times when apps might be
 

00:01:40.500 --> 00:01:42.649
them there are times when apps might be
too aggressive in acquiring wakelocks

00:01:42.649 --> 00:01:42.659
too aggressive in acquiring wakelocks
 

00:01:42.659 --> 00:01:44.330
too aggressive in acquiring wakelocks
or in general during things that are

00:01:44.330 --> 00:01:44.340
or in general during things that are
 

00:01:44.340 --> 00:01:46.999
or in general during things that are
considered bad for battery during new in

00:01:46.999 --> 00:01:47.009
considered bad for battery during new in
 

00:01:47.009 --> 00:01:49.550
considered bad for battery during new in
P there's the background restrictions

00:01:49.550 --> 00:01:49.560
P there's the background restrictions
 

00:01:49.560 --> 00:01:52.700
P there's the background restrictions
feature based on Android vetoes the

00:01:52.700 --> 00:01:52.710
feature based on Android vetoes the
 

00:01:52.710 --> 00:01:55.520
feature based on Android vetoes the
device monitors and detects apps that

00:01:55.520 --> 00:01:55.530
device monitors and detects apps that
 

00:01:55.530 --> 00:01:57.649
device monitors and detects apps that
demonstrate known bad behaviors and

00:01:57.649 --> 00:01:57.659
demonstrate known bad behaviors and
 

00:01:57.659 --> 00:02:00.350
demonstrate known bad behaviors and
flags to the users who can then choose

00:02:00.350 --> 00:02:00.360
flags to the users who can then choose
 

00:02:00.360 --> 00:02:02.389
flags to the users who can then choose
to restrict these apps from running jobs

00:02:02.389 --> 00:02:02.399
to restrict these apps from running jobs
 

00:02:02.399 --> 00:02:05.080
to restrict these apps from running jobs
alarms background services and so on

00:02:05.080 --> 00:02:05.090
alarms background services and so on
 

00:02:05.090 --> 00:02:08.359
alarms background services and so on
most users only use a small number of

00:02:08.359 --> 00:02:08.369
most users only use a small number of
 

00:02:08.369 --> 00:02:10.790
most users only use a small number of
installed apps regularly when you think

00:02:10.790 --> 00:02:10.800
installed apps regularly when you think
 

00:02:10.800 --> 00:02:12.680
installed apps regularly when you think
about it the total number of installed

00:02:12.680 --> 00:02:12.690
about it the total number of installed
 

00:02:12.690 --> 00:02:13.400
about it the total number of installed
apps

00:02:13.400 --> 00:02:13.410
apps
 

00:02:13.410 --> 00:02:15.020
apps
the device really should have no

00:02:15.020 --> 00:02:15.030
the device really should have no
 

00:02:15.030 --> 00:02:18.050
the device really should have no
correlation to battery life the third

00:02:18.050 --> 00:02:18.060
correlation to battery life the third
 

00:02:18.060 --> 00:02:19.820
correlation to battery life the third
dimension aims to tackle this issue

00:02:19.820 --> 00:02:19.830
dimension aims to tackle this issue
 

00:02:19.830 --> 00:02:23.750
dimension aims to tackle this issue
based on app usage patterns in Android P

00:02:23.750 --> 00:02:23.760
based on app usage patterns in Android P
 

00:02:23.760 --> 00:02:26.570
based on app usage patterns in Android P
the system can in a fine-grained way

00:02:26.570 --> 00:02:26.580
the system can in a fine-grained way
 

00:02:26.580 --> 00:02:28.850
the system can in a fine-grained way
apply restrictions to apps that haven't

00:02:28.850 --> 00:02:28.860
apply restrictions to apps that haven't
 

00:02:28.860 --> 00:02:31.670
apply restrictions to apps that haven't
been used recently apps are classified

00:02:31.670 --> 00:02:31.680
been used recently apps are classified
 

00:02:31.680 --> 00:02:35.390
been used recently apps are classified
into five buckets ranging from active to

00:02:35.390 --> 00:02:35.400
into five buckets ranging from active to
 

00:02:35.400 --> 00:02:36.980
into five buckets ranging from active to
never we call them

00:02:36.980 --> 00:02:36.990
never we call them
 

00:02:36.990 --> 00:02:40.220
never we call them
app standby buckets apps that haven't

00:02:40.220 --> 00:02:40.230
app standby buckets apps that haven't
 

00:02:40.230 --> 00:02:42.380
app standby buckets apps that haven't
been actively used for a certain time

00:02:42.380 --> 00:02:42.390
been actively used for a certain time
 

00:02:42.390 --> 00:02:45.050
been actively used for a certain time
would be put into an appropriate lower

00:02:45.050 --> 00:02:45.060
would be put into an appropriate lower
 

00:02:45.060 --> 00:02:47.980
would be put into an appropriate lower
bucket accordingly the system would

00:02:47.980 --> 00:02:47.990
bucket accordingly the system would
 

00:02:47.990 --> 00:02:50.750
bucket accordingly the system would
progressively defer app tasks such as

00:02:50.750 --> 00:02:50.760
progressively defer app tasks such as
 

00:02:50.760 --> 00:02:54.770
progressively defer app tasks such as
alarms jobs and network access further

00:02:54.770 --> 00:02:54.780
alarms jobs and network access further
 

00:02:54.780 --> 00:02:56.870
alarms jobs and network access further
the system uses machine learning

00:02:56.870 --> 00:02:56.880
the system uses machine learning
 

00:02:56.880 --> 00:02:58.670
the system uses machine learning
techniques from deep mind to

00:02:58.670 --> 00:02:58.680
techniques from deep mind to
 

00:02:58.680 --> 00:03:00.980
techniques from deep mind to
intelligently move apps between buckets

00:03:00.980 --> 00:03:00.990
intelligently move apps between buckets
 

00:03:00.990 --> 00:03:02.630
intelligently move apps between buckets
in order to achieve the highest

00:03:02.630 --> 00:03:02.640
in order to achieve the highest
 

00:03:02.640 --> 00:03:05.230
in order to achieve the highest
efficiency and it gets better over time

00:03:05.230 --> 00:03:05.240
efficiency and it gets better over time
 

00:03:05.240 --> 00:03:08.210
efficiency and it gets better over time
device manufacturers can adopt this ML

00:03:08.210 --> 00:03:08.220
device manufacturers can adopt this ML
 

00:03:08.220 --> 00:03:10.820
device manufacturers can adopt this ML
model implements their own or use the

00:03:10.820 --> 00:03:10.830
model implements their own or use the
 

00:03:10.830 --> 00:03:14.240
model implements their own or use the
AOSP algorithm various battery

00:03:14.240 --> 00:03:14.250
AOSP algorithm various battery
 

00:03:14.250 --> 00:03:16.100
AOSP algorithm various battery
management features spoil down to

00:03:16.100 --> 00:03:16.110
management features spoil down to
 

00:03:16.110 --> 00:03:18.470
management features spoil down to
restrictions and deferred access to some

00:03:18.470 --> 00:03:18.480
restrictions and deferred access to some
 

00:03:18.480 --> 00:03:20.870
restrictions and deferred access to some
combination of background tasks for

00:03:20.870 --> 00:03:20.880
combination of background tasks for
 

00:03:20.880 --> 00:03:22.940
combination of background tasks for
developers therefore it's important to

00:03:22.940 --> 00:03:22.950
developers therefore it's important to
 

00:03:22.950 --> 00:03:25.010
developers therefore it's important to
test against these restricted scenarios

00:03:25.010 --> 00:03:25.020
test against these restricted scenarios
 

00:03:25.020 --> 00:03:27.620
test against these restricted scenarios
let's go over some design and testing

00:03:27.620 --> 00:03:27.630
let's go over some design and testing
 

00:03:27.630 --> 00:03:30.890
let's go over some design and testing
best practices ensure proper testing

00:03:30.890 --> 00:03:30.900
best practices ensure proper testing
 

00:03:30.900 --> 00:03:33.430
best practices ensure proper testing
over a range of increasing restrictions

00:03:33.430 --> 00:03:33.440
over a range of increasing restrictions
 

00:03:33.440 --> 00:03:36.110
over a range of increasing restrictions
adb commands are available to simulate

00:03:36.110 --> 00:03:36.120
adb commands are available to simulate
 

00:03:36.120 --> 00:03:38.420
adb commands are available to simulate
the conditions you can simulate those

00:03:38.420 --> 00:03:38.430
the conditions you can simulate those
 

00:03:38.430 --> 00:03:41.300
the conditions you can simulate those
using these commands you can also exit

00:03:41.300 --> 00:03:41.310
using these commands you can also exit
 

00:03:41.310 --> 00:03:43.040
using these commands you can also exit
these States through similar commands

00:03:43.040 --> 00:03:43.050
these States through similar commands
 

00:03:43.050 --> 00:03:45.680
these States through similar commands
available in the developer Docs how do

00:03:45.680 --> 00:03:45.690
available in the developer Docs how do
 

00:03:45.690 --> 00:03:47.540
available in the developer Docs how do
you test against app standby buckets

00:03:47.540 --> 00:03:47.550
you test against app standby buckets
 

00:03:47.550 --> 00:03:50.270
you test against app standby buckets
since it's based on user behaviors which

00:03:50.270 --> 00:03:50.280
since it's based on user behaviors which
 

00:03:50.280 --> 00:03:52.729
since it's based on user behaviors which
can vary expect your apps be moved

00:03:52.729 --> 00:03:52.739
can vary expect your apps be moved
 

00:03:52.739 --> 00:03:55.970
can vary expect your apps be moved
between buckets always assume that your

00:03:55.970 --> 00:03:55.980
between buckets always assume that your
 

00:03:55.980 --> 00:03:57.949
between buckets always assume that your
jobs and alarms will be deferred and

00:03:57.949 --> 00:03:57.959
jobs and alarms will be deferred and
 

00:03:57.959 --> 00:04:00.410
jobs and alarms will be deferred and
ensure that your design can work under

00:04:00.410 --> 00:04:00.420
ensure that your design can work under
 

00:04:00.420 --> 00:04:02.750
ensure that your design can work under
those restrictions the good thing is

00:04:02.750 --> 00:04:02.760
those restrictions the good thing is
 

00:04:02.760 --> 00:04:05.510
those restrictions the good thing is
that most apps would be fine if they are

00:04:05.510 --> 00:04:05.520
that most apps would be fine if they are
 

00:04:05.520 --> 00:04:07.640
that most apps would be fine if they are
already following best practices such as

00:04:07.640 --> 00:04:07.650
already following best practices such as
 

00:04:07.650 --> 00:04:10.340
already following best practices such as
using jobs or targeting at least API

00:04:10.340 --> 00:04:10.350
using jobs or targeting at least API
 

00:04:10.350 --> 00:04:14.660
using jobs or targeting at least API
level 26 also note that in the frequent

00:04:14.660 --> 00:04:14.670
level 26 also note that in the frequent
 

00:04:14.670 --> 00:04:17.000
level 26 also note that in the frequent
and rare app standby buckets high

00:04:17.000 --> 00:04:17.010
and rare app standby buckets high
 

00:04:17.010 --> 00:04:19.400
and rare app standby buckets high
priority firebase cloud messages are

00:04:19.400 --> 00:04:19.410
priority firebase cloud messages are
 

00:04:19.410 --> 00:04:22.039
priority firebase cloud messages are
kept and any messages beyond a threshold

00:04:22.039 --> 00:04:22.049
kept and any messages beyond a threshold
 

00:04:22.049 --> 00:04:24.860
kept and any messages beyond a threshold
will be treated as normal priority which

00:04:24.860 --> 00:04:24.870
will be treated as normal priority which
 

00:04:24.870 --> 00:04:26.460
will be treated as normal priority which
could be delayed when the device

00:04:26.460 --> 00:04:26.470
could be delayed when the device
 

00:04:26.470 --> 00:04:29.820
could be delayed when the device
and her Stowe's again test against these

00:04:29.820 --> 00:04:29.830
and her Stowe's again test against these
 

00:04:29.830 --> 00:04:32.550
and her Stowe's again test against these
conditions thoroughly you can use a

00:04:32.550 --> 00:04:32.560
conditions thoroughly you can use a
 

00:04:32.560 --> 00:04:34.800
conditions thoroughly you can use a
couple of adb commands to to set and

00:04:34.800 --> 00:04:34.810
couple of adb commands to to set and
 

00:04:34.810 --> 00:04:37.350
couple of adb commands to to set and
retrieve buckets for your package before

00:04:37.350 --> 00:04:37.360
retrieve buckets for your package before
 

00:04:37.360 --> 00:04:39.570
retrieve buckets for your package before
running them make sure your device is

00:04:39.570 --> 00:04:39.580
running them make sure your device is
 

00:04:39.580 --> 00:04:42.480
running them make sure your device is
unplugged there's also framework api's

00:04:42.480 --> 00:04:42.490
unplugged there's also framework api's
 

00:04:42.490 --> 00:04:46.110
unplugged there's also framework api's
to get an app's current bucket or you

00:04:46.110 --> 00:04:46.120
to get an app's current bucket or you
 

00:04:46.120 --> 00:04:48.990
to get an app's current bucket or you
can use usage stats manager to create

00:04:48.990 --> 00:04:49.000
can use usage stats manager to create
 

00:04:49.000 --> 00:04:51.390
can use usage stats manager to create
the list of events associated with your

00:04:51.390 --> 00:04:51.400
the list of events associated with your
 

00:04:51.400 --> 00:04:54.690
the list of events associated with your
app which includes bucket changes want

00:04:54.690 --> 00:04:54.700
app which includes bucket changes want
 

00:04:54.700 --> 00:04:56.700
app which includes bucket changes want
to test under battery saver conditions

00:04:56.700 --> 00:04:56.710
to test under battery saver conditions
 

00:04:56.710 --> 00:04:59.730
to test under battery saver conditions
yep there are adb commands for that if

00:04:59.730 --> 00:04:59.740
yep there are adb commands for that if
 

00:04:59.740 --> 00:05:02.670
yep there are adb commands for that if
your app uses location for example you

00:05:02.670 --> 00:05:02.680
your app uses location for example you
 

00:05:02.680 --> 00:05:04.710
your app uses location for example you
can use this method to verify how your

00:05:04.710 --> 00:05:04.720
can use this method to verify how your
 

00:05:04.720 --> 00:05:06.960
can use this method to verify how your
app behaves when it loses location

00:05:06.960 --> 00:05:06.970
app behaves when it loses location
 

00:05:06.970 --> 00:05:10.170
app behaves when it loses location
services during screen off when battery

00:05:10.170 --> 00:05:10.180
services during screen off when battery
 

00:05:10.180 --> 00:05:12.750
services during screen off when battery
saver is turned on you can further save

00:05:12.750 --> 00:05:12.760
saver is turned on you can further save
 

00:05:12.760 --> 00:05:15.300
saver is turned on you can further save
battery by entering your you eyes dark

00:05:15.300 --> 00:05:15.310
battery by entering your you eyes dark
 

00:05:15.310 --> 00:05:18.090
battery by entering your you eyes dark
theme if available you can either check

00:05:18.090 --> 00:05:18.100
theme if available you can either check
 

00:05:18.100 --> 00:05:20.430
theme if available you can either check
for this mode explicitly or respond to a

00:05:20.430 --> 00:05:20.440
for this mode explicitly or respond to a
 

00:05:20.440 --> 00:05:23.610
for this mode explicitly or respond to a
broadcast in the event you need to

00:05:23.610 --> 00:05:23.620
broadcast in the event you need to
 

00:05:23.620 --> 00:05:25.890
broadcast in the event you need to
reflect our existing background services

00:05:25.890 --> 00:05:25.900
reflect our existing background services
 

00:05:25.900 --> 00:05:29.280
reflect our existing background services
in most cases the new work manager API

00:05:29.280 --> 00:05:29.290
in most cases the new work manager API
 

00:05:29.290 --> 00:05:32.270
in most cases the new work manager API
can be used to fulfill many use cases

00:05:32.270 --> 00:05:32.280
can be used to fulfill many use cases
 

00:05:32.280 --> 00:05:35.550
can be used to fulfill many use cases
use only foreground services for user

00:05:35.550 --> 00:05:35.560
use only foreground services for user
 

00:05:35.560 --> 00:05:38.310
use only foreground services for user
triggered actions and that users expect

00:05:38.310 --> 00:05:38.320
triggered actions and that users expect
 

00:05:38.320 --> 00:05:40.470
triggered actions and that users expect
them to run immediately such as music

00:05:40.470 --> 00:05:40.480
them to run immediately such as music
 

00:05:40.480 --> 00:05:43.590
them to run immediately such as music
playback by the way it's good practice

00:05:43.590 --> 00:05:43.600
playback by the way it's good practice
 

00:05:43.600 --> 00:05:46.170
playback by the way it's good practice
to also include a stop affordance inste

00:05:46.170 --> 00:05:46.180
to also include a stop affordance inste
 

00:05:46.180 --> 00:05:49.560
to also include a stop affordance inste
in the notification we've talked about

00:05:49.560 --> 00:05:49.570
in the notification we've talked about
 

00:05:49.570 --> 00:05:52.440
in the notification we've talked about
some design and testing best practices

00:05:52.440 --> 00:05:52.450
some design and testing best practices
 

00:05:52.450 --> 00:05:54.480
some design and testing best practices
during development and post launch

00:05:54.480 --> 00:05:54.490
during development and post launch
 

00:05:54.490 --> 00:05:57.870
during development and post launch
there's a couple of related tools the

00:05:57.870 --> 00:05:57.880
there's a couple of related tools the
 

00:05:57.880 --> 00:05:59.730
there's a couple of related tools the
energy profiler is a new feature

00:05:59.730 --> 00:05:59.740
energy profiler is a new feature
 

00:05:59.740 --> 00:06:02.070
energy profiler is a new feature
available in Android studio 302

00:06:02.070 --> 00:06:02.080
available in Android studio 302
 

00:06:02.080 --> 00:06:05.219
available in Android studio 302
currently on the canary channel after

00:06:05.219 --> 00:06:05.229
currently on the canary channel after
 

00:06:05.229 --> 00:06:07.170
currently on the canary channel after
you deploy your app to a connected

00:06:07.170 --> 00:06:07.180
you deploy your app to a connected
 

00:06:07.180 --> 00:06:09.420
you deploy your app to a connected
device the profiler shows a live

00:06:09.420 --> 00:06:09.430
device the profiler shows a live
 

00:06:09.430 --> 00:06:12.150
device the profiler shows a live
timeline of how your app uses system

00:06:12.150 --> 00:06:12.160
timeline of how your app uses system
 

00:06:12.160 --> 00:06:14.400
timeline of how your app uses system
resources such as partial wakelocks

00:06:14.400 --> 00:06:14.410
resources such as partial wakelocks
 

00:06:14.410 --> 00:06:17.520
resources such as partial wakelocks
wake-up alarms jobs and location

00:06:17.520 --> 00:06:17.530
wake-up alarms jobs and location
 

00:06:17.530 --> 00:06:20.520
wake-up alarms jobs and location
requests the profiler also estimates

00:06:20.520 --> 00:06:20.530
requests the profiler also estimates
 

00:06:20.530 --> 00:06:23.610
requests the profiler also estimates
your apps energy usage of CPU network

00:06:23.610 --> 00:06:23.620
your apps energy usage of CPU network
 

00:06:23.620 --> 00:06:26.610
your apps energy usage of CPU network
and location resources refer to energy

00:06:26.610 --> 00:06:26.620
and location resources refer to energy
 

00:06:26.620 --> 00:06:28.500
and location resources refer to energy
profiler documentation for more details

00:06:28.500 --> 00:06:28.510
profiler documentation for more details
 

00:06:28.510 --> 00:06:32.370
profiler documentation for more details
in the Play Developer console Android

00:06:32.370 --> 00:06:32.380
in the Play Developer console Android
 

00:06:32.380 --> 00:06:34.830
in the Play Developer console Android
vidoes exposes performance metrics that

00:06:34.830 --> 00:06:34.840
vidoes exposes performance metrics that
 

00:06:34.840 --> 00:06:36.630
vidoes exposes performance metrics that
are tightly associated with battery

00:06:36.630 --> 00:06:36.640
are tightly associated with battery
 

00:06:36.640 --> 00:06:39.360
are tightly associated with battery
usage which includes excessive wake up's

00:06:39.360 --> 00:06:39.370
usage which includes excessive wake up's
 

00:06:39.370 --> 00:06:40.230
usage which includes excessive wake up's
start

00:06:40.230 --> 00:06:40.240
start
 

00:06:40.240 --> 00:06:42.480
start
we clocks and background network to

00:06:42.480 --> 00:06:42.490
we clocks and background network to
 

00:06:42.490 --> 00:06:45.540
we clocks and background network to
access refer to Vytas documentation for

00:06:45.540 --> 00:06:45.550
access refer to Vytas documentation for
 

00:06:45.550 --> 00:06:48.839
access refer to Vytas documentation for
more detail with standard ways to manage

00:06:48.839 --> 00:06:48.849
more detail with standard ways to manage
 

00:06:48.849 --> 00:06:51.450
more detail with standard ways to manage
power intensive tasks and with proper

00:06:51.450 --> 00:06:51.460
power intensive tasks and with proper
 

00:06:51.460 --> 00:06:54.120
power intensive tasks and with proper
testing developers can create apps that

00:06:54.120 --> 00:06:54.130
testing developers can create apps that
 

00:06:54.130 --> 00:06:56.249
testing developers can create apps that
work consistently across devices and

00:06:56.249 --> 00:06:56.259
work consistently across devices and
 

00:06:56.259 --> 00:06:58.770
work consistently across devices and
collectively can achieve good battery

00:06:58.770 --> 00:06:58.780
collectively can achieve good battery
 

00:06:58.780 --> 00:07:01.409
collectively can achieve good battery
life for users to learn more about these

00:07:01.409 --> 00:07:01.419
life for users to learn more about these
 

00:07:01.419 --> 00:07:03.870
life for users to learn more about these
features and tools check out links below

00:07:03.870 --> 00:07:03.880
features and tools check out links below
 

00:07:03.880 --> 00:07:05.810
features and tools check out links below
thanks for watching

00:07:05.810 --> 00:07:05.820
thanks for watching
 

00:07:05.820 --> 00:07:15.319
thanks for watching
[Music]

