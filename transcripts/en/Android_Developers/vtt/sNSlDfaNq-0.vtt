WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.170
[MUSIC PLAYING]

00:00:08.272 --> 00:00:09.480
ALAN VIVERETTE: Hi, everyone.

00:00:09.480 --> 00:00:11.880
Thank you for joining us at
Best Practices for Themes

00:00:11.880 --> 00:00:12.510
and Styles.

00:00:12.510 --> 00:00:13.332
I'm Alan.

00:00:13.332 --> 00:00:14.040
NICK BUTCHER: Hi.

00:00:14.040 --> 00:00:15.510
My name is Nick Butcher.

00:00:15.510 --> 00:00:18.270
ALAN VIVERETTE: And we're going
to be talking about some ways

00:00:18.270 --> 00:00:20.550
to think about themes and
styles at a high level

00:00:20.550 --> 00:00:22.500
and how to apply
those when you're

00:00:22.500 --> 00:00:25.230
designing themes and styles
for your application.

00:00:25.230 --> 00:00:27.440
So first, let's start
at a high level--

00:00:27.440 --> 00:00:30.000
the way that designers
create mocks and the way

00:00:30.000 --> 00:00:32.229
that developers are
interpreting them.

00:00:32.229 --> 00:00:34.590
So here's the latest iteration
of the Material Design

00:00:34.590 --> 00:00:35.760
theme palettes.

00:00:35.760 --> 00:00:37.860
So if you're not using
MaterialDesignComponents

00:00:37.860 --> 00:00:41.910
for Android yet, you may
recognize Primary as the Color

00:00:41.910 --> 00:00:43.860
Primary attribute from
the Material theme

00:00:43.860 --> 00:00:46.380
in the platform, Primary
Variant as something

00:00:46.380 --> 00:00:47.970
like Color Primary Dark.

00:00:50.730 --> 00:00:52.840
And when you get a mock
from your designer,

00:00:52.840 --> 00:00:55.240
you may be doing a mental
mapping of, oh, well, this

00:00:55.240 --> 00:00:58.010
is going to be my primary
dark color in my theme.

00:00:58.010 --> 00:01:01.690
This is going to be
the primary color--

00:01:01.690 --> 00:01:03.400
embedding those
directly in your theme.

00:01:03.400 --> 00:01:05.983
But it's important to make sure
that your designer understands

00:01:05.983 --> 00:01:09.440
that there are these
canonical attributes.

00:01:09.440 --> 00:01:13.360
So if you're getting a mock that
just has a hex color specified,

00:01:13.360 --> 00:01:15.910
it can be helpful to maybe
push back a little bit

00:01:15.910 --> 00:01:18.940
and say, let's call this
the Primary Variants.

00:01:18.940 --> 00:01:21.620
Or let's call this
the Primary color.

00:01:21.620 --> 00:01:24.430
And it's great that we have
all of these predefined theme

00:01:24.430 --> 00:01:28.720
colors with meaningful names and
meaningful contrast ratios that

00:01:28.720 --> 00:01:31.360
have to exist between
foreground and background

00:01:31.360 --> 00:01:34.150
and additional colors
in the Material palette.

00:01:34.150 --> 00:01:36.790
Occasionally, you will
get a brand new color that

00:01:36.790 --> 00:01:40.270
doesn't exist anywhere, and
finding a name for this may

00:01:40.270 --> 00:01:43.450
be difficult. So here
we have purple color

00:01:43.450 --> 00:01:46.480
that's a little bit lighter
than our Primary Variants.

00:01:46.480 --> 00:01:48.730
And it has contrast
against white,

00:01:48.730 --> 00:01:52.019
so we're going to be displaying
white text on top of it.

00:01:52.019 --> 00:01:53.810
If we want to come up
with a name for this,

00:01:53.810 --> 00:01:55.934
we should find something
that can generalize but is

00:01:55.934 --> 00:01:58.750
self-documenting and
captures these constraints

00:01:58.750 --> 00:02:01.700
so that if we decide, well,
we had a purple theme,

00:02:01.700 --> 00:02:05.050
now we need a blue theme, we
can reuse the name of that color

00:02:05.050 --> 00:02:06.940
and reuse those
constraints, so you

00:02:06.940 --> 00:02:09.960
could move from purple
to blue very smoothly.

00:02:09.960 --> 00:02:12.220
So what are we
going to call that?

00:02:12.220 --> 00:02:14.290
Well, over in the
Material palette,

00:02:14.290 --> 00:02:16.570
we have these On colors.

00:02:16.570 --> 00:02:19.540
On Primary means this is a
foreground color displayed

00:02:19.540 --> 00:02:21.850
on a primary background,
and we ensure

00:02:21.850 --> 00:02:24.910
that it's going to meet certain
accessibility-related contrast

00:02:24.910 --> 00:02:25.736
ratios.

00:02:25.736 --> 00:02:27.610
So you'll be able to
read the foreground text

00:02:27.610 --> 00:02:29.327
color against the background.

00:02:29.327 --> 00:02:31.910
We have On Secondary, which does
the same thing for Secondary.

00:02:31.910 --> 00:02:34.420
So if we're displaying something
on that light blue color,

00:02:34.420 --> 00:02:35.680
it would be black text.

00:02:35.680 --> 00:02:37.900
If we're displaying something
on this purple color,

00:02:37.900 --> 00:02:39.280
it would be white text.

00:02:39.280 --> 00:02:42.670
So we can use these to generate
the new name for this lighter

00:02:42.670 --> 00:02:44.379
Primary color.

00:02:44.379 --> 00:02:45.420
What should we call that?

00:02:45.420 --> 00:02:48.120
Well, we're going
to use On Primary,

00:02:48.120 --> 00:02:51.705
so that determines the
foreground color protection.

00:02:51.705 --> 00:02:53.460
For background
color protection, we

00:02:53.460 --> 00:02:54.990
want to make sure
that it contrasts

00:02:54.990 --> 00:02:56.499
a little bit with Primary.

00:02:56.499 --> 00:02:58.290
So we'll include both
of these in the name.

00:02:58.290 --> 00:03:01.290
We can call it something
like Primary Light, which

00:03:01.290 --> 00:03:04.640
seems incredibly
straightforward, and it is.

00:03:04.640 --> 00:03:06.730
So you can tell
your designer, hey.

00:03:06.730 --> 00:03:09.060
Every time we're talking
about this lighter

00:03:09.060 --> 00:03:11.280
version of our Primary
color, let's refer

00:03:11.280 --> 00:03:12.480
to that as Primary Light.

00:03:12.480 --> 00:03:14.340
And it's going to
have these constraints

00:03:14.340 --> 00:03:18.400
for foreground colors and
background color protection.

00:03:18.400 --> 00:03:20.100
So if your designer
decides, well,

00:03:20.100 --> 00:03:22.800
in this next screen we want it
to be blue instead of purple,

00:03:22.800 --> 00:03:25.800
we can continue to use the
same constraints on this color

00:03:25.800 --> 00:03:29.040
and use our semantically-defined
color name in our theme

00:03:29.040 --> 00:03:30.752
as well.

00:03:30.752 --> 00:03:31.620
All right.

00:03:31.620 --> 00:03:35.640
Similarly, we provide common
patterns for text appearances.

00:03:35.640 --> 00:03:39.530
So here you see on the left
we have Headline, Overline.

00:03:39.530 --> 00:03:40.280
Body.

00:03:40.280 --> 00:03:42.320
These are
semantically-defined terms.

00:03:42.320 --> 00:03:45.200
They're meaningful names for
where these appearances are

00:03:45.200 --> 00:03:48.410
going to be used, and that
determines the pixel size.

00:03:48.410 --> 00:03:49.790
That determines
the font weights.

00:03:49.790 --> 00:03:51.520
That can determine
the font itself,

00:03:51.520 --> 00:03:53.820
and that's going to
determine the color.

00:03:53.820 --> 00:03:56.990
On the right, we see what
these values actually map to.

00:03:56.990 --> 00:03:59.540
So in this case, Headline
is going to be Roboto.

00:03:59.540 --> 00:04:02.420
And in fact, we're using Roboto
throughout our entire app.

00:04:02.420 --> 00:04:05.450
However, if we decided that
instead we wanted to use,

00:04:05.450 --> 00:04:09.620
let's say, Comic Sans, we
could make our Headline map

00:04:09.620 --> 00:04:10.430
to Comic Sans.

00:04:10.430 --> 00:04:13.520
We wouldn't have to go
through and create a new style

00:04:13.520 --> 00:04:15.530
everywhere in our
application because we

00:04:15.530 --> 00:04:19.230
do have these names that
imply how they're used.

00:04:19.230 --> 00:04:21.800
So always make sure to use
meaningful names when you're

00:04:21.800 --> 00:04:23.960
extracting patterns
from your mocks

00:04:23.960 --> 00:04:26.936
and applying those in
your implementation.

00:04:26.936 --> 00:04:28.950
So learn the Material
Design attributes.

00:04:28.950 --> 00:04:32.148
They're documented
at material.io.

00:04:32.148 --> 00:04:33.810
Make sure your
designers learn them too

00:04:33.810 --> 00:04:35.400
and use this as
a common language

00:04:35.400 --> 00:04:36.612
when you're looking at mocks.

00:04:36.612 --> 00:04:38.070
And when you get
something new that

00:04:38.070 --> 00:04:40.372
may have a random
gray color in it

00:04:40.372 --> 00:04:42.330
that you're going to see
throughout your mocks,

00:04:42.330 --> 00:04:45.574
make sure it has a name that
you can use over and over again.

00:04:45.574 --> 00:04:47.490
And if you happen to be
implementing dark mode

00:04:47.490 --> 00:04:50.170
for anybody who attended
that talk earlier today,

00:04:50.170 --> 00:04:53.310
you'll know that this gray
needs to turn into a light white

00:04:53.310 --> 00:04:55.770
because it needs contrast
against a certain text

00:04:55.770 --> 00:04:59.310
color or a certain
other background color.

00:04:59.310 --> 00:05:00.780
Use meaningful attribute names.

00:05:00.780 --> 00:05:03.690
They should be more or
less self-documenting.

00:05:03.690 --> 00:05:05.760
Something like
Primary Light is going

00:05:05.760 --> 00:05:07.710
to have more
constraints than just it

00:05:07.710 --> 00:05:09.420
looks sort of like
the Primary color,

00:05:09.420 --> 00:05:12.362
and the text color should be
consistent with Other Primary.

00:05:12.362 --> 00:05:14.070
So go ahead and document
these somewhere.

00:05:14.070 --> 00:05:16.055
Start a doc that
you share or start

00:05:16.055 --> 00:05:18.180
an internal site that you
share with your designers

00:05:18.180 --> 00:05:20.670
to make sure you're always
using a common language

00:05:20.670 --> 00:05:23.160
when talking about the
components, the colors,

00:05:23.160 --> 00:05:25.710
the reusable text
styles in your designs.

00:05:25.710 --> 00:05:28.260
You'll expand beyond what's
available in Material,

00:05:28.260 --> 00:05:29.125
I'm sure.

00:05:29.125 --> 00:05:30.750
But that's a good
starting place to get

00:05:30.750 --> 00:05:34.350
a sense of how to name them
and how to talk about them.

00:05:34.350 --> 00:05:36.560
And part of that is
avoid hard-coding values.

00:05:36.560 --> 00:05:38.530
So when you get a
mock that just says,

00:05:38.530 --> 00:05:43.420
this is the hex color
4A36EF, make sure

00:05:43.420 --> 00:05:45.220
that you push back
on that and say, no.

00:05:45.220 --> 00:05:46.270
This isn't the hex color.

00:05:46.270 --> 00:05:48.340
This color has some
sort of meaning,

00:05:48.340 --> 00:05:50.950
and we need to be able
to smoothly transition

00:05:50.950 --> 00:05:56.120
from this hex color to a hex
color with similar constraints.

00:05:56.120 --> 00:05:56.620
All right.

00:05:56.620 --> 00:05:58.800
So now Nick is going to
talk a little bit more

00:05:58.800 --> 00:06:01.830
about what this means
in implementation.

00:06:01.830 --> 00:06:04.480
NICK BUTCHER: Thank you.

00:06:04.480 --> 00:06:04.980
Right.

00:06:04.980 --> 00:06:08.190
So we talked a lot
about about supporting

00:06:08.190 --> 00:06:12.990
different semantically-named
values in your applications.

00:06:12.990 --> 00:06:14.580
And what that
means on Android is

00:06:14.580 --> 00:06:15.960
essentially it
can be implemented

00:06:15.960 --> 00:06:16.932
as theme attributes.

00:06:16.932 --> 00:06:18.890
And Alan said something
very interesting there.

00:06:18.890 --> 00:06:20.765
He said, what happens
if your design changes,

00:06:20.765 --> 00:06:22.681
and all of a sudden
instead of a purple theme,

00:06:22.681 --> 00:06:23.780
you have a blue theme?

00:06:23.780 --> 00:06:24.990
And how do you apply that?

00:06:24.990 --> 00:06:27.000
These semantic names
protect you, almost,

00:06:27.000 --> 00:06:28.270
against these cases.

00:06:28.270 --> 00:06:30.120
And it's actually
more widespread

00:06:30.120 --> 00:06:32.980
than you might realize, and
I'll dig into that a little bit.

00:06:32.980 --> 00:06:35.400
So if you want to have
areas of your app or screens

00:06:35.400 --> 00:06:37.290
which can support
this kind of theming,

00:06:37.290 --> 00:06:39.480
there are different ways
you could achieve this.

00:06:39.480 --> 00:06:42.760
One way might be that you just
say, define different styles.

00:06:42.760 --> 00:06:44.915
So in this one
scenario, I'm going

00:06:44.915 --> 00:06:47.040
to set up a style, so give
it a certain appearance.

00:06:47.040 --> 00:06:48.150
We'll call that style 1.

00:06:48.150 --> 00:06:49.430
And in another
scenario, I'll want

00:06:49.430 --> 00:06:51.888
it to look different, so I'll
give it another style-- style

00:06:51.888 --> 00:06:52.410
2.

00:06:52.410 --> 00:06:54.470
The problem with this approach
is that there's probably

00:06:54.470 --> 00:06:56.220
going to end up being
a lot of duplication

00:06:56.220 --> 00:06:57.950
between style 1 and style 2.

00:06:57.950 --> 00:07:00.570
And there's now two places
for you to maintain,

00:07:00.570 --> 00:07:04.470
or bug fix, or maybe
refactor at some point.

00:07:04.470 --> 00:07:08.100
Using these semantical
pointers to describe what

00:07:08.100 --> 00:07:09.603
the appearance should be like--

00:07:09.603 --> 00:07:11.760
or in coding terms,
it's going to end up

00:07:11.760 --> 00:07:13.110
as a theme attribute--

00:07:13.110 --> 00:07:14.790
protects you against this.

00:07:14.790 --> 00:07:18.180
So while it might be more work
to establish this language

00:07:18.180 --> 00:07:20.130
and to set up your
styles to refer back

00:07:20.130 --> 00:07:22.590
to theme attributes,
what it does

00:07:22.590 --> 00:07:26.110
is it actually ends up with just
a single place, a single style,

00:07:26.110 --> 00:07:28.800
that will refer back to the
theme attributes defined

00:07:28.800 --> 00:07:30.607
for a given theme.

00:07:30.607 --> 00:07:32.190
And the benefits of
this is it's going

00:07:32.190 --> 00:07:33.314
to reduce that duplication.

00:07:33.314 --> 00:07:35.880
You don't end up with two
styles which are 80% the same

00:07:35.880 --> 00:07:37.680
but have the
potential to diverge

00:07:37.680 --> 00:07:40.131
in the future, which they will.

00:07:40.131 --> 00:07:42.570
It also localizes
the modifications.

00:07:42.570 --> 00:07:45.490
So that means that if you
need to change an attribute,

00:07:45.490 --> 00:07:47.490
you just go to that one
place where it's defined

00:07:47.490 --> 00:07:49.080
and change that rather than
having to track it down

00:07:49.080 --> 00:07:51.390
where it's leaked out into
all the variety of styles

00:07:51.390 --> 00:07:53.745
you have across your code base.

00:07:53.745 --> 00:07:56.310
It also has the benefit,
I think, of consolidation.

00:07:56.310 --> 00:07:58.590
How many times have you
opened your colors.xml file

00:07:58.590 --> 00:08:01.682
and found 50 different shades
of very similar-looking colors?

00:08:01.682 --> 00:08:04.140
And then you see a mock, and
it's not quite the same color.

00:08:04.140 --> 00:08:05.360
And you go, I don't know.

00:08:05.360 --> 00:08:07.050
I'll just create
another color resource.

00:08:07.050 --> 00:08:08.530
Or is it just me that does that?

00:08:08.530 --> 00:08:10.264
It's protects you against this.

00:08:10.264 --> 00:08:12.180
You really, really,
really want to condense it

00:08:12.180 --> 00:08:15.507
down to this small palette
which is used consistently

00:08:15.507 --> 00:08:18.090
throughout the applications, so
you have a nice look and feel.

00:08:18.090 --> 00:08:20.650
So to sum up, basically
this approach really,

00:08:20.650 --> 00:08:22.900
really helps you with the
maintainability of your app.

00:08:22.900 --> 00:08:25.770
And so as such, I really urge
you to prefer theme attributes

00:08:25.770 --> 00:08:27.350
where possible.

00:08:27.350 --> 00:08:29.850
By which I mean, if you find
yourself writing code like this

00:08:29.850 --> 00:08:32.850
top line-- so here it's saying
the text color should be this

00:08:32.850 --> 00:08:34.590
color resource--

00:08:34.590 --> 00:08:36.289
almost think of that
as a code smell.

00:08:36.289 --> 00:08:37.289
Just think for a second.

00:08:37.289 --> 00:08:37.950
Hang on.

00:08:37.950 --> 00:08:40.320
Is this layout-- is
there a chance this might

00:08:40.320 --> 00:08:41.789
appear in a different theme?

00:08:41.789 --> 00:08:44.430
Could this be included
in a different area

00:08:44.430 --> 00:08:45.440
of the application?

00:08:45.440 --> 00:08:49.260
And if so, should I instead be
looking at this bottom form,

00:08:49.260 --> 00:08:52.530
using the ?android:attr syntax,
which is how you refer to these

00:08:52.530 --> 00:08:55.600
theme attributes.

00:08:55.600 --> 00:08:58.140
So we talked about
the importance

00:08:58.140 --> 00:08:59.640
of having these
semantical pointers.

00:08:59.640 --> 00:09:01.710
But how might your theme vary?

00:09:01.710 --> 00:09:03.300
So hopefully,
everyone's familiar

00:09:03.300 --> 00:09:05.890
that you can set a theme
directly on an activity.

00:09:05.890 --> 00:09:07.410
So in this example,
two activities

00:09:07.410 --> 00:09:10.560
are using MaterialComponents,
which is a dark theme and then

00:09:10.560 --> 00:09:12.060
a light variant.

00:09:12.060 --> 00:09:14.910
Or perhaps you're
using Night Mode,

00:09:14.910 --> 00:09:17.280
like Alan mentioned
before, and was also

00:09:17.280 --> 00:09:20.582
talked about in the course of
the Pixel talk earlier today.

00:09:20.582 --> 00:09:23.040
So this is a theme which will
change between dark and light

00:09:23.040 --> 00:09:26.092
depending on the time of day.

00:09:26.092 --> 00:09:27.830
But what happens if
you have a screen

00:09:27.830 --> 00:09:29.184
like this, which is from--

00:09:29.184 --> 00:09:30.350
this is the Google I/O App--

00:09:30.350 --> 00:09:32.360
where we have largely
similar content?

00:09:32.360 --> 00:09:34.647
So most of these list
items are the same,

00:09:34.647 --> 00:09:36.230
but the design called
for some of them

00:09:36.230 --> 00:09:39.420
to be light on dark and
some to be dark on light.

00:09:39.420 --> 00:09:41.690
I mean, you can think of
ways you might implement this

00:09:41.690 --> 00:09:45.512
as separate layouts or perhaps
setting text colors on bind

00:09:45.512 --> 00:09:46.470
or something like that.

00:09:46.470 --> 00:09:48.470
But both of those
basically either leak out

00:09:48.470 --> 00:09:49.970
the sliding information
beyond where

00:09:49.970 --> 00:09:53.529
you want it or lead to an
explosion of more maintenance.

00:09:53.529 --> 00:09:55.070
Instead, what you
properly want to do

00:09:55.070 --> 00:09:58.250
is look at applying
themes at the View level

00:09:58.250 --> 00:10:00.590
rather than the
whole Activity level.

00:10:00.590 --> 00:10:03.650
So the Theme attribute was
added-- not Theme attributes,

00:10:03.650 --> 00:10:08.180
the attribute android:theme--
was added in API 21 but also

00:10:08.180 --> 00:10:10.490
back-ported through
Android X. So in this,

00:10:10.490 --> 00:10:14.754
you can set a theme on a View
or a View Group and apply

00:10:14.754 --> 00:10:16.670
a different theme to a
subsection of your View

00:10:16.670 --> 00:10:18.170
hierarchy.

00:10:18.170 --> 00:10:19.670
So in these examples
here, you might

00:10:19.670 --> 00:10:22.400
say you have a light theme and
then apply a dark portion of it

00:10:22.400 --> 00:10:24.520
or vice versa.

00:10:24.520 --> 00:10:26.080
You can do the
same thing in code

00:10:26.080 --> 00:10:28.450
if need be by using the
ContextThemeWrapper, which

00:10:28.450 --> 00:10:30.670
takes an existing
context which has a theme

00:10:30.670 --> 00:10:34.490
and overlays a
style on top of it.

00:10:34.490 --> 00:10:36.670
I think it's really important
to emphasize that fact

00:10:36.670 --> 00:10:38.170
that it is overlaid.

00:10:38.170 --> 00:10:41.740
That means that you
have an existing theme,

00:10:41.740 --> 00:10:43.990
and any values from the
theme you set on top of it

00:10:43.990 --> 00:10:45.640
are going to be applied on top.

00:10:45.640 --> 00:10:50.200
So you need to be a little
bit conscious of this fact.

00:10:50.200 --> 00:10:52.720
You don't want to
overlay a theme which

00:10:52.720 --> 00:10:54.019
supplies too many values.

00:10:54.019 --> 00:10:56.560
So for example, if I was using
just MaterialComponents.Light,

00:10:56.560 --> 00:10:58.790
and I overlaid
MaterialComponents.Dark,

00:10:58.790 --> 00:11:00.520
they define a lot of
the same attributes.

00:11:00.520 --> 00:11:02.862
And you might be relying
on some of the attributes

00:11:02.862 --> 00:11:04.820
you set in the first
theme to still be present,

00:11:04.820 --> 00:11:06.496
so you might overwrite too much.

00:11:06.496 --> 00:11:07.870
Conversely, you
want to make sure

00:11:07.870 --> 00:11:11.297
the theme you are overwriting
sets the things you need.

00:11:11.297 --> 00:11:13.630
So as such, you might want
to take a look at these theme

00:11:13.630 --> 00:11:15.640
overlays, of which there
are some in AppCompat

00:11:15.640 --> 00:11:17.800
or MaterialComponents,
or create your own theme

00:11:17.800 --> 00:11:20.566
overlays extending from them
just to theme the attributes

00:11:20.566 --> 00:11:21.940
that you want such
that when it's

00:11:21.940 --> 00:11:24.100
overlaid on top of
the existing theme,

00:11:24.100 --> 00:11:28.329
you get the resulting
combination of themes.

00:11:28.329 --> 00:11:29.870
One thing to be
noted as well is that

00:11:29.870 --> 00:11:33.770
while the ContextThemeWrapper
approach looks tantalizingly

00:11:33.770 --> 00:11:36.440
close to dynamic
theming, it's not--

00:11:36.440 --> 00:11:39.050
by which I mean that you
have to apply a theme which

00:11:39.050 --> 00:11:40.490
you've defined at compile time.

00:11:40.490 --> 00:11:42.260
You can't use this
technique to, say,

00:11:42.260 --> 00:11:44.540
take some server derived
color values or whatever

00:11:44.540 --> 00:11:46.070
and create a dynamic theme.

00:11:46.070 --> 00:11:50.400
This is all about this
ahead-of-time thinking.

00:11:50.400 --> 00:11:50.900
OK.

00:11:50.900 --> 00:11:51.983
ALAN VIVERETTE: All right.

00:11:51.983 --> 00:11:54.320
So before you start setting
a bunch of theme attributes,

00:11:54.320 --> 00:11:56.360
it's important to understand
how those are applied

00:11:56.360 --> 00:11:57.360
throughout the platform.

00:11:57.360 --> 00:11:59.480
So we're going to
do a whirlwind tour

00:11:59.480 --> 00:12:01.040
of the layers of
indirection that

00:12:01.040 --> 00:12:03.530
occur between what
you see on screen,

00:12:03.530 --> 00:12:05.060
and what's defined
by the platform,

00:12:05.060 --> 00:12:07.640
and what you're setting in
your application themes.

00:12:07.640 --> 00:12:10.310
So at any point in
your application,

00:12:10.310 --> 00:12:12.470
it's good to have a
background understanding

00:12:12.470 --> 00:12:15.020
that you can point
at something onscreen

00:12:15.020 --> 00:12:17.480
and understand all of the
layers of indirection,

00:12:17.480 --> 00:12:20.330
all of the theme attributes
and styles that were applied,

00:12:20.330 --> 00:12:22.160
to render it this way onscreen.

00:12:22.160 --> 00:12:25.820
So if we want to set this
color for a single button,

00:12:25.820 --> 00:12:27.360
how would we do that?

00:12:27.360 --> 00:12:31.400
Well, let's dive into
the way that this

00:12:31.400 --> 00:12:33.240
gets resolved at runtime.

00:12:33.240 --> 00:12:35.690
So we have Button
defined in layout.xml.

00:12:35.690 --> 00:12:38.630
That gets inflated
in the Button class.

00:12:38.630 --> 00:12:41.600
If you watch the Demystifying
Themes and Styles talk

00:12:41.600 --> 00:12:43.766
that Chris Baines and
I gave two years ago,

00:12:43.766 --> 00:12:45.140
you have a complete
understanding

00:12:45.140 --> 00:12:46.260
of how this works.

00:12:46.260 --> 00:12:48.270
If you haven't watched
that, go watch it.

00:12:48.270 --> 00:12:51.050
The important part is that the
Button style that you see here

00:12:51.050 --> 00:12:56.450
is pulled from the theme of the
context in which the button is

00:12:56.450 --> 00:12:57.260
inflated.

00:12:57.260 --> 00:12:59.750
So relevant buttonStyle
attribute here

00:12:59.750 --> 00:13:01.500
at the bottom of the screen.

00:13:01.500 --> 00:13:04.070
Next, where is that
buttonStyle defined?

00:13:04.070 --> 00:13:06.380
It is defined on
the Material theme

00:13:06.380 --> 00:13:08.600
if we have not
redefined it otherwise.

00:13:08.600 --> 00:13:10.610
So the default value
there that you'll see

00:13:10.610 --> 00:13:15.140
in themes_material.xml is
Widget.Material.Button.

00:13:15.140 --> 00:13:18.010
Where do we find the definition
for Widget.Material.Button?

00:13:18.010 --> 00:13:19.580
Over in styles_material.xml.

00:13:19.580 --> 00:13:21.200
So we can see here
the background

00:13:21.200 --> 00:13:25.040
is defined to be this
btn_default_material drawable.

00:13:25.040 --> 00:13:28.040
We'll also notice that right
below that bordered ink button

00:13:28.040 --> 00:13:31.730
style, we have a colored
bordered ink button style.

00:13:31.730 --> 00:13:33.920
Which, if we've looked
over the Material spec,

00:13:33.920 --> 00:13:35.336
we realize is
probably going to be

00:13:35.336 --> 00:13:39.090
a little bit closer because it
provides a color in the button.

00:13:39.090 --> 00:13:40.850
So let's dive into
the background that's

00:13:40.850 --> 00:13:43.850
used there to see what
gets pulled from our theme

00:13:43.850 --> 00:13:45.910
and what we might
be able to change.

00:13:45.910 --> 00:13:49.430
In the btn_colored_material.xml,
you'll notice the XML file

00:13:49.430 --> 00:13:52.160
names match up exactly
with the drawable names.

00:13:52.160 --> 00:13:54.290
So there's an easy chain
that you can follow.

00:13:54.290 --> 00:13:55.340
We have a shape.

00:13:55.340 --> 00:13:56.450
It's a rectangle.

00:13:56.450 --> 00:13:58.370
It is colored with
a tints, which

00:13:58.370 --> 00:14:00.800
is our
btn_colored_background_material.

00:14:00.800 --> 00:14:04.190
This gets applied to the
white color of the shape,

00:14:04.190 --> 00:14:06.480
so it's got a solid
white fill here.

00:14:06.480 --> 00:14:08.480
So let's dig into
that tint and see

00:14:08.480 --> 00:14:11.656
what's going to be applied
on top of that white color.

00:14:11.656 --> 00:14:13.320
It is our colorAccent.

00:14:13.320 --> 00:14:14.805
So this is a color state list.

00:14:14.805 --> 00:14:18.330
It is named btn colored
background material.xml,

00:14:18.330 --> 00:14:20.580
which is the exact name of
the color that we were just

00:14:20.580 --> 00:14:24.730
looking at-- again, a very
clear line of indirection.

00:14:24.730 --> 00:14:27.060
So where does this
color accent come from?

00:14:27.060 --> 00:14:28.920
Well, because it's
a theme attribute,

00:14:28.920 --> 00:14:32.010
it's going to come from whatever
exists in our application

00:14:32.010 --> 00:14:32.700
theme.

00:14:32.700 --> 00:14:34.770
As I mentioned, that
inherits from Material.

00:14:34.770 --> 00:14:36.780
And if we haven't
redefined colorAccent to be

00:14:36.780 --> 00:14:39.972
anything else, it will
be the default teal.

00:14:39.972 --> 00:14:41.690
So here are all the
levels of indirection

00:14:41.690 --> 00:14:43.080
that we've just looked at.

00:14:43.080 --> 00:14:44.990
Some of the important
ones are, if we

00:14:44.990 --> 00:14:48.350
want to change the style for
all buttons that get inflated,

00:14:48.350 --> 00:14:51.410
that's our buttonStyle in
the theme that we could set.

00:14:51.410 --> 00:14:54.500
The buttonStyle that
we're getting by default

00:14:54.500 --> 00:14:56.210
is Widget.Material.Button.

00:14:56.210 --> 00:14:58.910
We can change that to something
else like Button.Colored

00:14:58.910 --> 00:15:02.760
in our theme if we wanted
colored buttons everywhere.

00:15:02.760 --> 00:15:04.680
We can also change
our colored accent,

00:15:04.680 --> 00:15:07.295
which is what gets loaded
by the Colored Button style.

00:15:07.295 --> 00:15:10.590
So if we set that in our theme,
that gets used everywhere.

00:15:10.590 --> 00:15:12.800
We'll see that color everywhere.

00:15:12.800 --> 00:15:16.020
But what we want to
do is one button.

00:15:16.020 --> 00:15:17.990
So what would happen
if we sent buttonStyle

00:15:17.990 --> 00:15:19.430
on our Activity theme?

00:15:19.430 --> 00:15:21.320
We would see colored
buttons everywhere.

00:15:21.320 --> 00:15:23.042
We don't want to do that.

00:15:23.042 --> 00:15:25.250
What would happen if we set
it in the style attribute

00:15:25.250 --> 00:15:27.099
on our Button in XML?

00:15:27.099 --> 00:15:28.890
We would see it only
on that single button,

00:15:28.890 --> 00:15:29.990
which is what we want.

00:15:29.990 --> 00:15:31.790
But now we're getting
the default teal

00:15:31.790 --> 00:15:35.370
color from our theme,
so how can we fix that?

00:15:35.370 --> 00:15:38.400
Well, what if we set colorAccent
on our Activity theme?

00:15:38.400 --> 00:15:40.430
Now we're getting
that blue button,

00:15:40.430 --> 00:15:43.220
but we're also getting blue
switches and blue everything

00:15:43.220 --> 00:15:44.980
else that inherits colorAccent.

00:15:44.980 --> 00:15:47.600
And if you just do a search
over the platform.xml files

00:15:47.600 --> 00:15:50.580
for colorAccent, you'll
see it in a lot of places.

00:15:50.580 --> 00:15:53.210
So instead, we can set it in--

00:15:53.210 --> 00:15:55.031
we could try setting
it in layout.xml.

00:15:55.031 --> 00:15:57.530
You'll notice that this does
absolutely nothing because it's

00:15:57.530 --> 00:15:59.030
a theme attribute,
and you shouldn't

00:15:59.030 --> 00:16:01.440
try to set these attributes
directly in layout.xml.

00:16:01.440 --> 00:16:04.441
Theme attributes get
set in your theme.

00:16:04.441 --> 00:16:07.240
So what we'll actually do
is create a theme overlay,

00:16:07.240 --> 00:16:10.660
as Nick was just talking about,
that sets just that color

00:16:10.660 --> 00:16:12.184
and contains nothing else.

00:16:12.184 --> 00:16:14.350
We will apply that to the
button using android:theme

00:16:14.350 --> 00:16:17.290
in layout.xml, and we'll
get what we wanted.

00:16:17.290 --> 00:16:19.780
So back to Nick for
more implementation.

00:16:19.780 --> 00:16:21.340
NICK BUTCHER: Cheers.

00:16:21.340 --> 00:16:24.570
So I said you should prefer
theme attributes where you can.

00:16:24.570 --> 00:16:27.674
But to do so, you need to know
what is out there, what exists.

00:16:27.674 --> 00:16:30.090
And honestly, I don't have a
great answer for this for you

00:16:30.090 --> 00:16:33.650
other than looking
through the attrs of--

00:16:33.650 --> 00:16:35.250
this is from the
Android platform--

00:16:35.250 --> 00:16:37.870
or from AppCompat or
MaterialComponents.

00:16:37.870 --> 00:16:39.870
So looking through these,
they're not that long.

00:16:39.870 --> 00:16:41.411
You can see what is
available for you

00:16:41.411 --> 00:16:43.424
that you can reference
rather than hard-coding.

00:16:43.424 --> 00:16:45.840
Conversely, you can look at
some of the common themes like

00:16:45.840 --> 00:16:49.890
themes.Material and see which
theme attributes they set--

00:16:49.890 --> 00:16:53.340
and as such, you are able to
reference or override yourself.

00:16:53.340 --> 00:16:55.260
So it's good to have
a look through these

00:16:55.260 --> 00:16:57.380
and get an idea of
what's out there.

00:16:57.380 --> 00:17:00.380
One note is it you might see
that some theme attributes

00:17:00.380 --> 00:17:01.440
are double defined.

00:17:01.440 --> 00:17:04.890
So the platform defines a
Android colorControlHighlight,

00:17:04.890 --> 00:17:06.690
and then an AppCompat
defines its own

00:17:06.690 --> 00:17:09.150
in order to provide backward
compatible functionality.

00:17:09.150 --> 00:17:10.322
So which do you use?

00:17:10.322 --> 00:17:12.030
Basically, the answer
is always, if there

00:17:12.030 --> 00:17:14.472
is one defined in the
libraries like AppCompat

00:17:14.472 --> 00:17:16.430
or MaterialComponents,
prefer that because they

00:17:16.430 --> 00:17:18.420
will tend to set the
platform one for you

00:17:18.420 --> 00:17:20.970
and then be available for
backwards compatibility and so

00:17:20.970 --> 00:17:22.032
on.

00:17:22.032 --> 00:17:24.490
You can, of course, refer to
these theme attributes in code

00:17:24.490 --> 00:17:25.589
using something like
this where we're

00:17:25.589 --> 00:17:27.569
obtainStyleAttributes
to get hold of it

00:17:27.569 --> 00:17:29.310
and then using KTX's
getColorOrThrow

00:17:29.310 --> 00:17:31.650
to make it a little
bit more convenient.

00:17:31.650 --> 00:17:34.260
So so far, we've talked
about using platform theme

00:17:34.260 --> 00:17:36.180
attributes, and you
absolutely should.

00:17:36.180 --> 00:17:37.590
But you can also
create your own,

00:17:37.590 --> 00:17:40.131
and you should do that as well
to make your applications more

00:17:40.131 --> 00:17:40.726
themeable.

00:17:40.726 --> 00:17:42.975
Let's walk through an example
of what this looks like.

00:17:42.975 --> 00:17:45.030
So here from the Dev
Summit application,

00:17:45.030 --> 00:17:48.050
we have two screens which
display very similar layouts--

00:17:48.050 --> 00:17:49.860
a list of sessions
in both schedule

00:17:49.860 --> 00:17:51.300
and on the speaker details.

00:17:51.300 --> 00:17:53.640
They only differ
in basically how

00:17:53.640 --> 00:17:56.040
far some space on the left
and the keyline, essentially,

00:17:56.040 --> 00:17:57.600
that we want to align it to.

00:17:57.600 --> 00:18:00.590
One needs to leave room for
the sticky header time things.

00:18:00.590 --> 00:18:03.881
So to accomplish this,
we defined our own theme

00:18:03.881 --> 00:18:04.380
attribute.

00:18:04.380 --> 00:18:08.080
So here this is in our attrs
called sessionListKeyline.

00:18:08.080 --> 00:18:11.610
And then in the different
activity themes for those two

00:18:11.610 --> 00:18:14.550
screens, we can provide
different dimension values

00:18:14.550 --> 00:18:16.230
for that keyline.

00:18:16.230 --> 00:18:19.560
And then we just have to have a
single layout which references

00:18:19.560 --> 00:18:23.430
that theme actually built
using the ?attr syntax in order

00:18:23.430 --> 00:18:26.340
to vary it without having to
create separate layouts which

00:18:26.340 --> 00:18:29.070
you then have to
maintain, et cetera.

00:18:29.070 --> 00:18:31.990
Another place that theming comes
in absolute massive handedness

00:18:31.990 --> 00:18:33.590
is theming drawables.

00:18:33.590 --> 00:18:35.590
So we looked an example
from the platform button

00:18:35.590 --> 00:18:39.320
about how from API 21 onwards,
all platform drawables

00:18:39.320 --> 00:18:40.900
support tints and tint modes.

00:18:40.900 --> 00:18:43.990
So here we're applying
the colorButtonNormal.

00:18:43.990 --> 00:18:46.510
You can also do this in
vectors where they support

00:18:46.510 --> 00:18:50.380
and theme attributes
both for tints as well as

00:18:50.380 --> 00:18:51.790
for fills and strokes.

00:18:51.790 --> 00:18:54.140
So you can use this not
just from 21 onwards

00:18:54.140 --> 00:18:56.530
but in the backwards
compatible library as well.

00:18:56.530 --> 00:18:58.990
And if you need to apply tints
in a backward compatible way

00:18:58.990 --> 00:19:02.110
to exist on prior to 21,
you can use DrawableCompat

00:19:02.110 --> 00:19:06.190
like this in order to set some
tints on an existing drawable.

00:19:06.190 --> 00:19:08.680
DrawableCompat also
offers an override which

00:19:08.680 --> 00:19:11.664
lets you set a tint list, a
color state list to be applied,

00:19:11.664 --> 00:19:13.080
which is something
we have learned

00:19:13.080 --> 00:19:14.320
is to be extremely handy.

00:19:14.320 --> 00:19:15.736
So like the example
we will let up

00:19:15.736 --> 00:19:17.712
before, you can define
a single color state

00:19:17.712 --> 00:19:19.420
list which provides
these different tints

00:19:19.420 --> 00:19:22.000
or colors for different states.

00:19:22.000 --> 00:19:24.910
So this example is
taken from Text Primary.

00:19:24.910 --> 00:19:27.114
And one of the things I
love about class state lists

00:19:27.114 --> 00:19:28.780
is some of the
improvements that arrived

00:19:28.780 --> 00:19:31.990
in Marshmallow 23, which
allowed you to separate out

00:19:31.990 --> 00:19:34.492
the color and an
alpha component.

00:19:34.492 --> 00:19:36.700
Why this is great is because
this really protects you

00:19:36.700 --> 00:19:40.300
against that explosion of 20
different opacities of black

00:19:40.300 --> 00:19:42.070
you might have in
your colors file.

00:19:42.070 --> 00:19:46.240
By actually separating
out the color information

00:19:46.240 --> 00:19:47.740
from the alpha
information, allows

00:19:47.740 --> 00:19:50.232
you to define more
specifically what you want.

00:19:50.232 --> 00:19:52.690
So here we're saying-- say this
is a light screen, so Color

00:19:52.690 --> 00:19:54.989
Foreground will be dark.

00:19:54.989 --> 00:19:56.530
You can say the text
should be black,

00:19:56.530 --> 00:19:59.140
and it should have these
different alphas depending

00:19:59.140 --> 00:20:01.679
if it's enabled or disabled
in these two examples here.

00:20:01.679 --> 00:20:03.220
So you don't have
to have to find all

00:20:03.220 --> 00:20:04.428
these different combinations.

00:20:04.428 --> 00:20:06.730
You define specifically the
semantically-named things

00:20:06.730 --> 00:20:08.984
like Disabled Alpha,
Primary Content Alpha,

00:20:08.984 --> 00:20:10.900
and Foreground Color
separately, and then they

00:20:10.900 --> 00:20:13.534
get combined by the color
state list at runtime.

00:20:13.534 --> 00:20:14.950
One thing to note
is I've actually

00:20:14.950 --> 00:20:17.860
cheated here and changed the
Android Alpha to App Alpha

00:20:17.860 --> 00:20:21.970
because AppCompat back-ports
this new function,

00:20:21.970 --> 00:20:24.130
new features added
to color state list.

00:20:24.130 --> 00:20:27.340
But it requires you
to use App Alpha.

00:20:27.340 --> 00:20:31.572
One thing to note is that the
alpha channel of the color

00:20:31.572 --> 00:20:32.530
and the alpha combined.

00:20:32.530 --> 00:20:33.700
They're and multiplied.

00:20:33.700 --> 00:20:34.520
So be careful.

00:20:34.520 --> 00:20:35.890
Don't do this, essentially.

00:20:35.890 --> 00:20:40.030
If you specify this is, say
a 50% white text if you don't

00:20:40.030 --> 00:20:42.430
speak hex, and a
50% alpha, you'll

00:20:42.430 --> 00:20:44.890
end up with a 25% alphaed white.

00:20:44.890 --> 00:20:47.620
So you probably want to refer
to colors which have full alpha

00:20:47.620 --> 00:20:51.160
and then only supply variable
alphas via the alpha channel

00:20:51.160 --> 00:20:51.935
separately.

00:20:51.935 --> 00:20:53.950
And like I said,
AppCompat back-ports

00:20:53.950 --> 00:20:56.235
this, so use AppCompat.Resources
to inflate that

00:20:56.235 --> 00:20:58.360
in order to get this
backwards compatible behavior.

00:20:58.360 --> 00:21:01.090
And then you can apply
those to drawables.

00:21:01.090 --> 00:21:05.250
So overall, if you
apply this theming,

00:21:05.250 --> 00:21:07.134
you can get to a
state like this.

00:21:07.134 --> 00:21:09.550
So on the left-- these look
quite similar, but on the left

00:21:09.550 --> 00:21:11.140
we have the Google
I/O app, which

00:21:11.140 --> 00:21:14.110
we forked to create the
Android Dev Summit application.

00:21:14.110 --> 00:21:17.200
And to retheme it to
fit in with the look

00:21:17.200 --> 00:21:19.530
and feel of this
conference rather than I/O,

00:21:19.530 --> 00:21:21.274
this is basically the diff.

00:21:21.274 --> 00:21:22.690
Essentially, we
just had to change

00:21:22.690 --> 00:21:24.730
a few of these
semantically-named colors.

00:21:24.730 --> 00:21:26.534
And if we go back, it
just ripples outwards

00:21:26.534 --> 00:21:27.450
to all the components.

00:21:27.450 --> 00:21:28.270
So the fab changes.

00:21:28.270 --> 00:21:29.260
The bottom nav changes.

00:21:29.260 --> 00:21:30.970
Some of the tints on
drawables changes.

00:21:30.970 --> 00:21:32.914
The star color changes.

00:21:32.914 --> 00:21:35.330
Think about if your product
manager comes to you and says,

00:21:35.330 --> 00:21:35.510
hey.

00:21:35.510 --> 00:21:37.930
The company's had a rebrand, and
we're changing all the colors.

00:21:37.930 --> 00:21:40.510
Wouldn't you rather just have
a diff that looked like this

00:21:40.510 --> 00:21:44.989
rather than trying to go through
every layout.xml or colors file

00:21:44.989 --> 00:21:47.280
and work out which color is
which, and where it's used,

00:21:47.280 --> 00:21:49.571
and can I change this, and
where is it going to affect?

00:21:49.571 --> 00:21:51.130
You really want to
limit the changes

00:21:51.130 --> 00:21:54.290
to these semantic names.

00:21:54.290 --> 00:21:57.970
So as a summary of this,
really, really theme

00:21:57.970 --> 00:22:00.100
attribute all the
things, essentially.

00:22:00.100 --> 00:22:01.950
Use them as protection.

00:22:01.950 --> 00:22:04.750
And you should probably push
that kind of semantic system

00:22:04.750 --> 00:22:07.810
back upwards to your designers
so that they are giving you

00:22:07.810 --> 00:22:09.580
values that work with this.

00:22:09.580 --> 00:22:12.370
In your layout.xmls, prefer
that theme attribute syntax--

00:22:12.370 --> 00:22:14.080
the ?attr syntax.

00:22:14.080 --> 00:22:15.909
Or be careful when
you're not writing

00:22:15.909 --> 00:22:17.200
that, thinking is this a smell?

00:22:17.200 --> 00:22:18.745
Should I be doing
something else?

00:22:18.745 --> 00:22:21.940
And with your drawables,
think about using tints

00:22:21.940 --> 00:22:24.520
to protect yourself against
these changes down the line.

00:22:24.520 --> 00:22:27.560
Just think if all those
drawables had been PNGs

00:22:27.560 --> 00:22:29.557
instead, and we had a rebrand.

00:22:29.557 --> 00:22:32.140
Am I going to have to completely
generate all these PNGs again

00:22:32.140 --> 00:22:34.960
with a new color which
is already baked into it?

00:22:34.960 --> 00:22:35.470
Ignore that.

00:22:35.470 --> 00:22:36.250
Don't do that.

00:22:36.250 --> 00:22:38.170
Use tints instead.

00:22:38.170 --> 00:22:41.230
Basically, if every
time you use a PNG,

00:22:41.230 --> 00:22:42.490
think, should this be a PNG?

00:22:42.490 --> 00:22:45.370
Is it going to be usable
or tintable later?

00:22:45.370 --> 00:22:46.300
Maybe prefer a vector.

00:22:46.300 --> 00:22:47.860
Do prefer vectors.

00:22:47.860 --> 00:22:49.360
Pretty much the
only time you should

00:22:49.360 --> 00:22:51.500
be using PNGs is for 9-patches.

00:22:51.500 --> 00:22:52.510
So that's the summary.

00:22:52.510 --> 00:22:55.420
Protect yourself using semantic
names and theme attributes,

00:22:55.420 --> 00:22:57.440
and have fun with
themes and styles.

00:22:57.440 --> 00:22:58.340
Cheers.

00:22:58.340 --> 00:22:58.940
[APPLAUSE]

00:22:58.940 --> 00:23:09.190
[MUSIC PLAYING]

