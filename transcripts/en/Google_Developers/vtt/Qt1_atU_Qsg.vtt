WEBVTT
Kind: captions
Language: en

00:00:02.450 --> 00:00:05.500
ANDREW JESSUP: OK, let's
get started.

00:00:05.500 --> 00:00:07.010
So, good afternoon, everyone.

00:00:07.010 --> 00:00:09.110
Thank you for coming
down today.

00:00:09.110 --> 00:00:12.920
When we manage to pull a crowd
on the afternoon session of

00:00:12.920 --> 00:00:15.380
the second day of a technology
conference, I think that means

00:00:15.380 --> 00:00:16.520
we're doing pretty well.

00:00:16.520 --> 00:00:17.610
So thank you for coming down.

00:00:17.610 --> 00:00:20.800
Thank you to everyone on the
live stream, as well.

00:00:20.800 --> 00:00:23.310
I know some of you've gotten up
very early in the morning

00:00:23.310 --> 00:00:25.800
or stayed up very late in the
evening to watch this.

00:00:25.800 --> 00:00:27.470
It's really exciting to see
you all here, either

00:00:27.470 --> 00:00:28.720
physically or virtually.

00:00:28.720 --> 00:00:30.770
We've got some really cool
stuff to show you.

00:00:30.770 --> 00:00:33.000
So, my name's Andrew.

00:00:33.000 --> 00:00:35.380
I'm a product manager on the
Google App Engine team.

00:00:35.380 --> 00:00:39.100
I work with the runtimes teams
here in San Francisco.

00:00:39.100 --> 00:00:42.640
I'm going to be your, I guess,
"cabin assistant" for the next

00:00:42.640 --> 00:00:43.930
30 minutes or so.

00:00:43.930 --> 00:00:48.190
And at the controls here at the
front, up on stage, is our

00:00:48.190 --> 00:00:51.690
highly-experienced pilot for
this session, who's also the

00:00:51.690 --> 00:00:53.640
lead engineer on what we're
going to show you today, Mr.

00:00:53.640 --> 00:00:56.010
Stuart Langley.

00:00:56.010 --> 00:00:56.680
STUART LANGLEY: Thank you
very much, Andrew.

00:00:56.680 --> 00:00:58.630
It's great to see so many
people come down who are

00:00:58.630 --> 00:01:00.690
interested in PHP.

00:01:00.690 --> 00:01:03.610
Obviously this session was
formerly known as the new

00:01:03.610 --> 00:01:05.400
language for App Engine.

00:01:05.400 --> 00:01:10.320
And as [INAUDIBLE], excuse me,
announced yesterday, we've

00:01:10.320 --> 00:01:14.050
actually launched PHP
for App Engine.

00:01:14.050 --> 00:01:17.330
It was a very exciting
time for us.

00:01:17.330 --> 00:01:19.230
And it's good to see so many
people interested.

00:01:19.230 --> 00:01:22.750
But before we can really get
started on the topic of the

00:01:22.750 --> 00:01:25.780
presentation, there's one final
thing that we'd like to

00:01:25.780 --> 00:01:29.370
do before we get into it, which
is actually mark the bug

00:01:29.370 --> 00:01:31.860
in the issue tracker as
officially started.

00:01:31.860 --> 00:01:36.230
As engineers, we like to measure
our milestones as

00:01:36.230 --> 00:01:38.530
"acknowledge," "track", and then
"finish." Unfortunately

00:01:38.530 --> 00:01:40.900
we can't say "finished" but we
can definitely say "started."

00:01:40.900 --> 00:01:42.810
While Andrew gets us on the way,
I'm just going to jump

00:01:42.810 --> 00:01:45.990
into the issue tracker, here,
and let the people that I know

00:01:45.990 --> 00:01:50.625
at I/O and perhaps haven't been
watching the news for the

00:01:50.625 --> 00:01:53.680
last 24 hours or so, the most
popular feature, or the most

00:01:53.680 --> 00:01:57.110
requested feature ever in the
history of App Engine has been

00:01:57.110 --> 00:02:00.130
delivered, and progress
is on the way.

00:02:00.130 --> 00:02:01.380
So, Andrew.

00:02:05.980 --> 00:02:08.250
ANDREW JESSUP: This is a big
moment for us, guys.

00:02:08.250 --> 00:02:14.410
OK, so 3,300 people, I think,
started that feature.

00:02:14.410 --> 00:02:18.960
PHP is now available on
Google App Engine.

00:02:18.960 --> 00:02:23.500
So PHP is the most popular
language, by many accounts,

00:02:23.500 --> 00:02:26.220
for writing software
for the web today.

00:02:26.220 --> 00:02:28.710
And that's perhaps not
particularly surprising.

00:02:28.710 --> 00:02:31.170
It's a language that, from
day one, was designed

00:02:31.170 --> 00:02:31.920
with the web in mind.

00:02:31.920 --> 00:02:34.510
It was designed to make it easy
to stand up anything from

00:02:34.510 --> 00:02:37.970
a web form to rich complex
applications, things like

00:02:37.970 --> 00:02:41.320
content management systems or
e-commerce sites, or even

00:02:41.320 --> 00:02:44.110
back-end enterprise
office software.

00:02:44.110 --> 00:02:46.820
And Google App Engine, of
course, is a platform that

00:02:46.820 --> 00:02:49.180
allows you to take your code in
whatever language it might

00:02:49.180 --> 00:02:52.510
be written in and bring it
to the web with Google's

00:02:52.510 --> 00:02:54.590
infrastructure, the same
infrastructure that we use for

00:02:54.590 --> 00:02:58.110
products like Gmail, and
Maps, and Picasa,

00:02:58.110 --> 00:03:00.170
and many other services.

00:03:00.170 --> 00:03:02.700
And what we're going to show you
a little bit of today, at

00:03:02.700 --> 00:03:06.210
least give you a taste of, is
how you can use some of that

00:03:06.210 --> 00:03:09.550
same power, some of the same
phenomenal elastic bursting

00:03:09.550 --> 00:03:11.340
capability that App Engine
gives you, some of the

00:03:11.340 --> 00:03:13.500
phenomenal availability and
reliability that App Engine

00:03:13.500 --> 00:03:16.450
gives you, as developers,
with PHP, with your own

00:03:16.450 --> 00:03:17.880
applications.

00:03:17.880 --> 00:03:21.410
So I can stand up here
sermonizing for awhile, but

00:03:21.410 --> 00:03:23.090
why don't we just get
into the meat of it?

00:03:23.090 --> 00:03:26.040
Why don't we get into a real
dilemma on PHP, Stuart.

00:03:28.980 --> 00:03:30.100
STUART LANGLEY: Actually, before
we get to the demos,

00:03:30.100 --> 00:03:33.560
why don't we try and answer the
question that most people

00:03:33.560 --> 00:03:35.310
probably on the tips of their
minds, which is how have we

00:03:35.310 --> 00:03:38.250
gone about bringing
PHP to App Engine?

00:03:38.250 --> 00:03:39.860
Are we using something
like HipHop?

00:03:39.860 --> 00:03:41.050
Are we running an App Engine?

00:03:41.050 --> 00:03:44.670
Are we running something like
PHP in a JVM on top of Java in

00:03:44.670 --> 00:03:45.470
an App Engine?

00:03:45.470 --> 00:03:47.680
Or even something more
exotic than that.

00:03:47.680 --> 00:03:50.970
And quite often, the
simplest answer is

00:03:50.970 --> 00:03:52.040
often the most correct.

00:03:52.040 --> 00:03:55.250
And what we've actually done is
taken the open source PHP

00:03:55.250 --> 00:03:59.080
5.4 interpreter that you would
get from PHP.net, downloaded

00:03:59.080 --> 00:04:02.310
that and hardened it to running
in the App Engine

00:04:02.310 --> 00:04:03.150
environment.

00:04:03.150 --> 00:04:06.220
So the good news there is, if
you have an existing PHP 5.4

00:04:06.220 --> 00:04:09.570
application running somewhere,
it will be very

00:04:09.570 --> 00:04:11.950
straightforward for you to
actually forklift that

00:04:11.950 --> 00:04:14.680
application into the App Engine
environment, to take

00:04:14.680 --> 00:04:17.670
advantage of App Engine
services, and the Google Cloud

00:04:17.670 --> 00:04:19.829
Platform as a whole.

00:04:19.829 --> 00:04:24.040
So now that we know it's open
source PHP 5.4, the next

00:04:24.040 --> 00:04:26.820
question that we can answer is,
what extensions have we

00:04:26.820 --> 00:04:28.860
compiled into the interpreter?

00:04:28.860 --> 00:04:31.480
What's available for you as
application authors to use

00:04:31.480 --> 00:04:34.020
when you're running your
applications for App Engine?

00:04:34.020 --> 00:04:35.500
So at this point we
can probably jump

00:04:35.500 --> 00:04:37.470
into a quick demo.

00:04:37.470 --> 00:04:40.780
Looks like we actually updated
the bug, which is good news.

00:04:40.780 --> 00:04:45.470
So what we have to demonstrate
this to you is a really simple

00:04:45.470 --> 00:04:47.960
web shell application
running--

00:04:47.960 --> 00:04:50.010
look over this way--

00:04:50.010 --> 00:04:52.860
PHP 5.4 in Google App
Engine 1.8, which is

00:04:52.860 --> 00:04:54.510
what we just released.

00:04:54.510 --> 00:04:58.950
And what I can do here is ask
it to tell me the extensions

00:04:58.950 --> 00:05:00.050
that are available.

00:05:00.050 --> 00:05:05.420
So because my live coding skills
are somewhat sub-par,

00:05:05.420 --> 00:05:07.820
I'm going to do a cut
and paste here.

00:05:07.820 --> 00:05:09.415
But essentially we're just going
to get what extensions

00:05:09.415 --> 00:05:12.420
have been loaded, sort them so
it's easy for us to have a

00:05:12.420 --> 00:05:14.980
look what's there, and then
print them on the screen.

00:05:14.980 --> 00:05:18.660
And if you're actually hitting
this application now, which is

00:05:18.660 --> 00:05:22.425
running on appspot.com, you
might be getting an error or

00:05:22.425 --> 00:05:25.520
two, basically because I've
locked it down so only I can

00:05:25.520 --> 00:05:26.870
access it at the moment.

00:05:26.870 --> 00:05:28.980
But I will fix that shortly.

00:05:28.980 --> 00:05:32.510
And this application will be
available to everybody.

00:05:32.510 --> 00:05:35.510
So now we see what extensions
we've got available here.

00:05:35.510 --> 00:05:38.550
We think we've sort of captured
a reasonable set of

00:05:38.550 --> 00:05:40.910
extensions for the most common
peer-to-peer applications that

00:05:40.910 --> 00:05:42.330
are being written today.

00:05:42.330 --> 00:05:45.910
We have APC, so you have opcode
caching available, GD

00:05:45.910 --> 00:05:49.090
for graphics, with JPEG,
PNG, and free type.

00:05:49.090 --> 00:05:53.090
And for application
interoperability, we have XML,

00:05:53.090 --> 00:05:55.560
SOAP, and Opus, Open SSL.

00:05:55.560 --> 00:05:58.370
And obviously for SQL, we
have the three variants

00:05:58.370 --> 00:06:01.280
of the MySQL API.

00:06:01.280 --> 00:06:04.606
So I figure there's probably
an easier way that I could

00:06:04.606 --> 00:06:06.710
have shown you this information
because PHP comes

00:06:06.710 --> 00:06:09.550
with a built-in function which
will actually show you a lot

00:06:09.550 --> 00:06:12.790
more about the interpreter than
I could ever hope to say

00:06:12.790 --> 00:06:15.630
standing up here in half an
hour, which is obviously PHP

00:06:15.630 --> 00:06:19.240
info, which is probably the
first script that anybody ever

00:06:19.240 --> 00:06:20.820
using PHP would write.

00:06:20.820 --> 00:06:23.170
But running it in the shell
here, with the output going

00:06:23.170 --> 00:06:26.430
into our terminal windows,
not very informative.

00:06:26.430 --> 00:06:29.310
So what I was thinking we might
do to illustrate how

00:06:29.310 --> 00:06:31.860
easy it is to develop
applications for App Engine

00:06:31.860 --> 00:06:34.570
and to test them locally and
to push them up, is to

00:06:34.570 --> 00:06:36.970
actually add a page to our app,
here, which will run PHP

00:06:36.970 --> 00:06:42.200
info and push it up, let people
hit that page, and see

00:06:42.200 --> 00:06:43.680
what's there for themselves.

00:06:43.680 --> 00:06:47.500
So if you're familiar with
developing apps for App Engine

00:06:47.500 --> 00:06:49.940
using Python and Java, you're
going to be very familiar with

00:06:49.940 --> 00:06:52.160
the next steps I'm going
to show you.

00:06:52.160 --> 00:06:54.985
But I'm hoping there's a bunch
of devs in the audience, who

00:06:54.985 --> 00:07:03.020
are watching online, that have
never tried App Engine before.

00:07:03.020 --> 00:07:08.220
So I'll take three minutes of
your time to add a new page to

00:07:08.220 --> 00:07:12.390
my App, test the App locally,
and push the App up to

00:07:12.390 --> 00:07:13.710
production, make it available.

00:07:13.710 --> 00:07:15.700
And while I'm at it, I'll remove
the restriction that I

00:07:15.700 --> 00:07:18.940
had before so that anybody
can use the application.

00:07:18.940 --> 00:07:22.060
So this is basically the
listing of files

00:07:22.060 --> 00:07:22.735
that are in my App.

00:07:22.735 --> 00:07:27.110
We have a few PHP files and some
static resources that we

00:07:27.110 --> 00:07:28.630
use, as well.

00:07:28.630 --> 00:07:30.930
The interesting file that you
might never have seen before

00:07:30.930 --> 00:07:32.660
if you've never developed
for App Engine is

00:07:32.660 --> 00:07:33.860
the app.yaml file.

00:07:33.860 --> 00:07:36.830
So we can quickly have
look inside of there.

00:07:36.830 --> 00:07:39.150
And essentially, what this is
is the configuration of your

00:07:39.150 --> 00:07:42.330
application so that we know
how to host your App.

00:07:42.330 --> 00:07:46.810
For a simple application like
the web shell App, essentially

00:07:46.810 --> 00:07:49.260
it's the metadata at the top
which is describing the name

00:07:49.260 --> 00:07:52.090
of the App and the runtime
that this application is

00:07:52.090 --> 00:07:55.380
using, in this case
the shiny new PHP.

00:07:55.380 --> 00:07:57.290
And the bottom section is
essentially the handler

00:07:57.290 --> 00:08:00.960
mapping, which we used to map
incoming URLs to either static

00:08:00.960 --> 00:08:03.690
resources in your App or to
the scripts that should be

00:08:03.690 --> 00:08:07.370
executed when those
URLs are accessed.

00:08:07.370 --> 00:08:13.036
So what we'll do, we'll quickly
add a new script.

00:08:13.036 --> 00:08:15.600
And this is where talking is
going to be interesting.

00:08:15.600 --> 00:08:18.030
So quickly add a new
script to call PHP

00:08:18.030 --> 00:08:22.380
info when it's accessed.

00:08:22.380 --> 00:08:24.650
Could not be simpler.

00:08:24.650 --> 00:08:27.360
And now what I need to do to
get this to work with my

00:08:27.360 --> 00:08:31.510
application is actually add a
new section to the handle, the

00:08:31.510 --> 00:08:34.120
section at the bottom here,
which will map an incoming

00:08:34.120 --> 00:08:37.630
request to that script that
I've just created.

00:08:37.630 --> 00:08:41.440
So let me just go down.

00:08:41.440 --> 00:08:43.039
Looks like I can't cut and
paste for some reason.

00:08:43.039 --> 00:08:44.289
So we're going to type.

00:08:47.810 --> 00:08:51.720
So what I'm going to do is
create a mapping from a URL

00:08:51.720 --> 00:08:58.500
PHP info to execute the script
PHPinfo.php that I just wrote.

00:08:58.500 --> 00:09:02.120
And I promised you that I'd
remove the restrictions that I

00:09:02.120 --> 00:09:04.980
placed in this application from
anybody using it, which

00:09:04.980 --> 00:09:08.210
is actually the bottom line in
the app.yaml file here, where

00:09:08.210 --> 00:09:11.610
I've said that only
administrators are able to

00:09:11.610 --> 00:09:15.315
access the last URL, the
front page of the app.

00:09:17.940 --> 00:09:19.030
I'll just go ahead
and delete that.

00:09:19.030 --> 00:09:20.850
And save my app.yaml.

00:09:20.850 --> 00:09:22.970
So I think my app's ready to go
but I don't want to push on

00:09:22.970 --> 00:09:24.800
production what I
haven't tested.

00:09:24.800 --> 00:09:29.290
So what I'm going to do is use
the dev app server tool that

00:09:29.290 --> 00:09:32.770
comes as part of the SDK that
you download to write Apps for

00:09:32.770 --> 00:09:34.710
App Engine.

00:09:34.710 --> 00:09:37.920
And what dev app server is is
a complete simulation of the

00:09:37.920 --> 00:09:40.710
entire production environment
that runs on your machine

00:09:40.710 --> 00:09:42.620
without you having to have
gone and configured any

00:09:42.620 --> 00:09:44.630
services that we might
have running.

00:09:44.630 --> 00:09:48.480
So for example, Memcache or
task queues or Chrome or

00:09:48.480 --> 00:09:51.440
things like that all work on
your development box and you

00:09:51.440 --> 00:09:55.170
can debug PHP apps without you
having to actually retrieve

00:09:55.170 --> 00:09:57.980
the services yourself or set
the binaries up yourself.

00:09:57.980 --> 00:09:59.450
So my development
service started.

00:09:59.450 --> 00:10:01.810
And the most important line is
the second-to-last one at the

00:10:01.810 --> 00:10:05.020
bottom, which is it saying it's
waiting on 8080 on local

00:10:05.020 --> 00:10:08.720
host for request for
this application.

00:10:08.720 --> 00:10:10.820
So what I'm going to do is just
jump over and go to local

00:10:10.820 --> 00:10:19.860
host and we can see the same web
shall that you saw running

00:10:19.860 --> 00:10:22.210
in production, running
on my local machine.

00:10:22.210 --> 00:10:24.880
I've got a slightly more recent
version of a PHP on my

00:10:24.880 --> 00:10:25.440
local machine.

00:10:25.440 --> 00:10:29.050
But the host has now changed
to Development 2.0.

00:10:29.050 --> 00:10:32.930
The app works, as you would
expect it to do in production,

00:10:32.930 --> 00:10:36.010
on my local machine, here.

00:10:36.010 --> 00:10:37.680
So what I didn't mention
before is this

00:10:37.680 --> 00:10:39.480
app's actually stateful.

00:10:39.480 --> 00:10:43.350
And between requests, we can
assign values to variables and

00:10:43.350 --> 00:10:45.290
then get them on
later requests.

00:10:45.290 --> 00:10:49.590
And we do that using Sessions,
PHP developers are obviously

00:10:49.590 --> 00:10:50.620
very familiar with sessions.

00:10:50.620 --> 00:10:54.530
But in this case, it's backed
by Memcache And so I have

00:10:54.530 --> 00:10:57.260
Memcache running in my local
environment, here.

00:10:57.260 --> 00:10:59.880
Everything's working fine
without me setting it up.

00:10:59.880 --> 00:11:01.350
But we're not testing
the show.

00:11:01.350 --> 00:11:02.595
We're testing that the
new script that

00:11:02.595 --> 00:11:04.530
I added works correctly.

00:11:04.530 --> 00:11:06.040
So let's hit PHPinfo,
and you can see it's

00:11:06.040 --> 00:11:06.900
going to call my script.

00:11:06.900 --> 00:11:09.380
And it's actually showing you
PHPinfo for PHP that's running

00:11:09.380 --> 00:11:11.650
on my local machine.

00:11:11.650 --> 00:11:14.440
So I think that I've
successfully added my script

00:11:14.440 --> 00:11:16.770
and I've set up the
handle for it.

00:11:16.770 --> 00:11:19.670
So let's push it up
to production.

00:11:19.670 --> 00:11:20.770
The way that you push
to production--

00:11:20.770 --> 00:11:23.500
I'll sort of type and talk
at the same time.

00:11:23.500 --> 00:11:24.720
Here's another tool that
you get with the

00:11:24.720 --> 00:11:25.970
SDK, which is AppCfg.

00:11:28.520 --> 00:11:31.150
And the AppCfg looks at the
app.yaml file that I showed

00:11:31.150 --> 00:11:34.150
you before to understand the
structure of your application

00:11:34.150 --> 00:11:36.390
and how we should deploy
that up to production.

00:11:36.390 --> 00:11:38.370
And to make sure that you put
your study cases in the right

00:11:38.370 --> 00:11:42.200
places and your [INAUDIBLE]
in the right places.

00:11:42.200 --> 00:11:42.840
Well, that was quick.

00:11:42.840 --> 00:11:45.080
So it's pushed my App up
to production already.

00:11:45.080 --> 00:11:48.150
It's actually even already
checked if that vision that I

00:11:48.150 --> 00:11:50.580
pushed up is serving
back to me.

00:11:50.580 --> 00:11:54.450
So what I should be able to do
now is go back to my instance

00:11:54.450 --> 00:11:57.080
that I have at appspot.com,
and hit PHPinfo.

00:12:01.730 --> 00:12:02.770
And there we have it.

00:12:02.770 --> 00:12:05.710
So I've successfully deployed
a new page to my App, tested

00:12:05.710 --> 00:12:08.960
it locally and pushed it up to
production in hopefully three

00:12:08.960 --> 00:12:10.100
minutes or so.

00:12:10.100 --> 00:12:12.800
And as I mentioned, this should
now be freely available

00:12:12.800 --> 00:12:15.810
to anybody to go and try out the
interpreter and actually

00:12:15.810 --> 00:12:18.470
have a look at the PHPinfo for
themselves to see what we've

00:12:18.470 --> 00:12:22.150
actually provided in
the interpreter.

00:12:22.150 --> 00:12:25.580
ANDREW JESSUP: So that's
a great demo.

00:12:25.580 --> 00:12:27.450
But I mean, let's be honest.

00:12:27.450 --> 00:12:29.350
There's probably not that many
people in the room who make a

00:12:29.350 --> 00:12:33.070
living out of pushing minishell
applications up.

00:12:33.070 --> 00:12:35.960
And we did promise everyone
a real application here.

00:12:35.960 --> 00:12:36.490
Have you got--

00:12:36.490 --> 00:12:37.570
I don't know--

00:12:37.570 --> 00:12:39.830
have you got Wordpress or
something like that

00:12:39.830 --> 00:12:40.570
that you can show?

00:12:40.570 --> 00:12:42.030
STUART LANGLEY: Funnily enough,
Andrew, I thought you

00:12:42.030 --> 00:12:43.950
might ask if I had Wordpress.

00:12:43.950 --> 00:12:46.190
And as it turns out, I do.

00:12:46.190 --> 00:12:47.400
Let's just have a quick look.

00:12:47.400 --> 00:12:48.340
We'll do this really quickly.

00:12:48.340 --> 00:12:50.080
This is not a Wordpress
demonstration.

00:12:50.080 --> 00:12:52.160
It's an App Engine
demonstration.

00:12:52.160 --> 00:12:53.670
So what we have here is
Wordpress running on

00:12:53.670 --> 00:12:54.060
appspot.com.

00:12:54.060 --> 00:12:55.600
This is already public.

00:12:55.600 --> 00:12:57.075
You can go and have a look at
gaeforphp-blog.appspot.com.

00:13:00.190 --> 00:13:02.910
But that people that have
deployed Wordpress sites

00:13:02.910 --> 00:13:06.510
before would recognize this is
basically what you would see

00:13:06.510 --> 00:13:09.000
when you first deploy a fresh
site and you haven't

00:13:09.000 --> 00:13:10.240
configured it or haven't
changed the

00:13:10.240 --> 00:13:12.950
themes or the styling.

00:13:12.950 --> 00:13:15.390
And so we're using basically
the theme that

00:13:15.390 --> 00:13:16.890
comes out the box.

00:13:16.890 --> 00:13:18.640
And we haven't made
a post, yet.

00:13:18.640 --> 00:13:21.780
But a blog without a post is
a pretty lonely old place.

00:13:21.780 --> 00:13:24.020
So let's quickly just jump
in and make a post.

00:13:26.740 --> 00:13:28.640
Once again, if you've used
Wordpress before, you'd be

00:13:28.640 --> 00:13:31.170
familiar with the Administration
Console, which

00:13:31.170 --> 00:13:33.560
is where you go and configure
everything and do your posting

00:13:33.560 --> 00:13:35.780
from configure your plug-ins.

00:13:35.780 --> 00:13:36.870
And we're going to do a post.

00:13:36.870 --> 00:13:38.740
So we'll jump in the
post-tabs here.

00:13:38.740 --> 00:13:41.710
And luckily enough, I've already
pre-canned something

00:13:41.710 --> 00:13:43.860
and have it ready to go for
the purposes of the

00:13:43.860 --> 00:13:46.930
demonstration, which
is a new page.

00:13:46.930 --> 00:13:48.690
Andrew checked this
out before.

00:13:48.690 --> 00:13:50.110
And he's happy with
the content of it.

00:13:50.110 --> 00:13:52.470
And what I'm actually going to
do, as well, is use jet pack

00:13:52.470 --> 00:13:55.700
to make a tweak when we
do the post, too.

00:13:55.700 --> 00:13:58.850
And so on the side, here, I've
got my Twitter settings.

00:13:58.850 --> 00:14:00.680
I'm pretty happy with the
hashtags but I just remembered

00:14:00.680 --> 00:14:04.130
that I forgot to add Andrew and
his legions of followers

00:14:04.130 --> 00:14:06.080
to the post, here.

00:14:06.080 --> 00:14:09.940
So let me just add that in.

00:14:09.940 --> 00:14:12.520
And hit "Publish".

00:14:12.520 --> 00:14:14.630
And Wordpress will go off and
do what Wordpress does best.

00:14:17.510 --> 00:14:18.900
And publish our post.

00:14:18.900 --> 00:14:20.460
We can see at the top, there,
it's saying "Post Published,"

00:14:20.460 --> 00:14:21.120
"View Post".

00:14:21.120 --> 00:14:24.300
Let's quickly jump in the front
there and look at our

00:14:24.300 --> 00:14:28.572
front page and hopefully we'll
see our shiny new post.

00:14:28.572 --> 00:14:29.700
There we have it.

00:14:29.700 --> 00:14:32.650
Wordpress post working.

00:14:32.650 --> 00:14:39.100
[APPLAUSE]

00:14:39.100 --> 00:14:40.640
ANDREW JESSUP: So this
is Wordpress

00:14:40.640 --> 00:14:43.180
running on App Engine.

00:14:43.180 --> 00:14:44.870
And by the way, these sites
are both live that we've

00:14:44.870 --> 00:14:45.630
demonstrated to you.

00:14:45.630 --> 00:14:50.530
So both the blog,
gaeforphp-blog.appspot.com and

00:14:50.530 --> 00:14:51.980
php-minishell.appspot.com.

00:14:51.980 --> 00:14:54.770
They're both live now, if you
could get through the Wi-Fi.

00:14:54.770 --> 00:14:57.880
They're both live now, if you
want to go check them out.

00:14:57.880 --> 00:15:00.120
Now when Stuart showed me
this demo a few weeks

00:15:00.120 --> 00:15:01.320
ago, it blew me away.

00:15:01.320 --> 00:15:02.910
And the reason why--

00:15:02.910 --> 00:15:05.520
and if you've ever tried to
stand up something like

00:15:05.520 --> 00:15:07.010
Wordpress, then you'll
know this--

00:15:07.010 --> 00:15:08.300
to run something
like Wordpress,

00:15:08.300 --> 00:15:10.150
actually, it takes PHP.

00:15:10.150 --> 00:15:12.490
But it takes a lot more
than just PHP.

00:15:12.490 --> 00:15:15.230
It really takes a full
stack of services.

00:15:15.230 --> 00:15:17.900
In fact, it takes what you
might call a platform to

00:15:17.900 --> 00:15:21.390
really pull an application
like this together.

00:15:21.390 --> 00:15:23.340
For one thing, you
need a database.

00:15:23.340 --> 00:15:25.590
And not just any database,
but you need a

00:15:25.590 --> 00:15:26.960
fully-relational database.

00:15:26.960 --> 00:15:30.170
And one that understands a
pretty sizable subset, if not

00:15:30.170 --> 00:15:32.940
the full subset of SQL commands
that these kinds of

00:15:32.940 --> 00:15:34.930
applications have
come to expect.

00:15:34.930 --> 00:15:37.930
Fortunately, we have that in the
form of a product called

00:15:37.930 --> 00:15:39.000
Google Cloud SQL.

00:15:39.000 --> 00:15:40.800
We'll talk a little bit about
that in a second and some of

00:15:40.800 --> 00:15:43.450
the optimizations that we've
made for Cloud Sequel and App

00:15:43.450 --> 00:15:45.910
Engine and PHP in particular.

00:15:45.910 --> 00:15:47.150
Another thing you need to
do when you're running

00:15:47.150 --> 00:15:49.790
applications, very frequently,
is write to some

00:15:49.790 --> 00:15:51.280
kind of file system.

00:15:51.280 --> 00:15:53.310
And historically, if you've
worked with App Engine then

00:15:53.310 --> 00:15:54.440
you'll know that's
been a challenge.

00:15:54.440 --> 00:15:56.760
We don't allow rights to the
local file system that your

00:15:56.760 --> 00:15:58.000
application's deployed on.

00:15:58.000 --> 00:16:00.760
We do that for reasons of
security as well as reasons of

00:16:00.760 --> 00:16:02.300
scalability.

00:16:02.300 --> 00:16:03.740
But we do need somewhere
to write files.

00:16:03.740 --> 00:16:05.410
If we wanted to upload an image
as part of the blog

00:16:05.410 --> 00:16:07.850
post, for example, we'd need
somewhere to put the image.

00:16:07.850 --> 00:16:10.350
We'd need somewhere to serve it
so our users could see it.

00:16:10.350 --> 00:16:11.970
So we need a scalable
distributed file storage

00:16:11.970 --> 00:16:14.550
system and we have this, of
course, in the form of Google

00:16:14.550 --> 00:16:15.520
Cloud Storage.

00:16:15.520 --> 00:16:17.410
Again, we've made some
optimization so that it works

00:16:17.410 --> 00:16:18.600
well with PHP.

00:16:18.600 --> 00:16:20.910
We'll talk about that
in a second, too.

00:16:20.910 --> 00:16:23.620
And then finally, when setting
up any application there's a

00:16:23.620 --> 00:16:25.830
ton of other services that tend
to come in pretty handy.

00:16:25.830 --> 00:16:27.540
Things like Memcache for adding
efficiency to your

00:16:27.540 --> 00:16:28.130
application.

00:16:28.130 --> 00:16:31.100
Things like a mail service that
can send mail reliably

00:16:31.100 --> 00:16:32.340
and efficiently.

00:16:32.340 --> 00:16:34.850
Things like task queues that
allow you to dispatch and

00:16:34.850 --> 00:16:38.180
asynchronously run long-running
processes.

00:16:38.180 --> 00:16:40.210
Again, we'll-- very briefly,
because I know we want to get

00:16:40.210 --> 00:16:40.900
to questions--

00:16:40.900 --> 00:16:43.340
we'll very briefly cover
some of these, as well.

00:16:43.340 --> 00:16:44.850
So let's start with
Cloud Sequel.

00:16:44.850 --> 00:16:47.700
So CloudSQL is our fully-managed
MySQL

00:16:47.700 --> 00:16:49.300
5.5-compatible database
service.

00:16:49.300 --> 00:16:52.140
And the key phrase in there
is "fully-managed".

00:16:52.140 --> 00:16:55.780
You don't need to shell into an
instance and set up a MySQL

00:16:55.780 --> 00:16:58.520
server and configure it and then
write a backup script and

00:16:58.520 --> 00:17:00.820
then set up read replicas and
all that sort of thing that

00:17:00.820 --> 00:17:04.300
you would normally need to do
for a reliable MySQL cluster.

00:17:04.300 --> 00:17:04.730
This is fully-managed.

00:17:04.730 --> 00:17:06.109
You go into the Cloud Console.

00:17:06.109 --> 00:17:06.849
And you turn it on.

00:17:06.849 --> 00:17:08.589
It's really simple.

00:17:08.589 --> 00:17:09.650
It's also highly durable.

00:17:09.650 --> 00:17:11.960
What that means is when you
write to Cloud Sequel, we

00:17:11.960 --> 00:17:15.030
actually propagate that right
out to multiple data centers.

00:17:15.030 --> 00:17:17.596
And that gives you what I, being
a product manager, like

00:17:17.596 --> 00:17:20.839
to call "meteorite-level
reliability." In other words,

00:17:20.839 --> 00:17:22.950
if a meteorite happened to hit
a data center that your app

00:17:22.950 --> 00:17:24.579
happened to be serving
out of, you wouldn't

00:17:24.579 --> 00:17:25.930
necessarily lose any data.

00:17:25.930 --> 00:17:28.740
And in fact, your app would
still keep serving.

00:17:28.740 --> 00:17:30.800
We provide automatic backup and
one-click restore, which

00:17:30.800 --> 00:17:32.600
if you've ever tried to roll
your own backup system, you'll

00:17:32.600 --> 00:17:34.280
come to appreciate
very quickly.

00:17:34.280 --> 00:17:35.490
We also have a really
interesting

00:17:35.490 --> 00:17:36.700
pricing model with CloudSQL.

00:17:36.700 --> 00:17:40.340
With CloudSQL, you can price it
on a per-hour basis in the

00:17:40.340 --> 00:17:42.650
same way that you would
do with many other

00:17:42.650 --> 00:17:44.610
hosted Sequel services.

00:17:44.610 --> 00:17:47.450
But we also have a pricing model
that allows you to pay

00:17:47.450 --> 00:17:50.530
for CloudSQL only for the
increments of time that you

00:17:50.530 --> 00:17:51.410
actually use it.

00:17:51.410 --> 00:17:53.940
That is, the increments of time
that you read and write

00:17:53.940 --> 00:17:54.940
to the database.

00:17:54.940 --> 00:17:58.200
And if you have staging
databases and QA databases and

00:17:58.200 --> 00:18:00.420
maybe even development databases
floating around that

00:18:00.420 --> 00:18:02.800
you don't actually use very
often-- maybe only a couple of

00:18:02.800 --> 00:18:04.380
hours a week, or a few
hours a month--

00:18:04.380 --> 00:18:05.430
that's actually really
economical.

00:18:05.430 --> 00:18:08.250
You could save a ton of money
by using CloudSQL and using

00:18:08.250 --> 00:18:10.250
that pricing model.

00:18:10.250 --> 00:18:12.220
But most importantly, I think,
for this audience and this

00:18:12.220 --> 00:18:15.130
talk, we've optimized it for
use with Google App Engine.

00:18:15.130 --> 00:18:16.320
We've done that in
a couple of ways.

00:18:16.320 --> 00:18:17.790
We've optimized the security.

00:18:17.790 --> 00:18:21.170
You specifically bind a CloudSQL
application to an App

00:18:21.170 --> 00:18:23.080
Engine app, which gives you an
extra level of security over

00:18:23.080 --> 00:18:25.600
and above what MySQL
itself gives you.

00:18:25.600 --> 00:18:27.760
We also optimize it
for performance.

00:18:27.760 --> 00:18:31.220
And we do that by co-locating
the CloudSQL instance along

00:18:31.220 --> 00:18:32.460
with your application.

00:18:32.460 --> 00:18:35.450
So that the application you're
running in and the database

00:18:35.450 --> 00:18:38.060
you're using are physically
proximal to each other so that

00:18:38.060 --> 00:18:40.650
connections between them
are very fast.

00:18:40.650 --> 00:18:41.590
So that's CloudSQL.

00:18:41.590 --> 00:18:44.140
But let's look at what it
looks like inside PHP.

00:18:44.140 --> 00:18:46.490
Now, if you've ever worked with
MySQL in PHP before--

00:18:46.490 --> 00:18:47.620
I'm sure many of you have--

00:18:47.620 --> 00:18:51.220
then you'll know, first of all,
that PHP makes it easy.

00:18:51.220 --> 00:18:53.670
But second of all, that PHP
makes it easy with three

00:18:53.670 --> 00:18:54.840
different libraries.

00:18:54.840 --> 00:18:59.320
There's the MySQL library, the
mysqli library, and PDO_MySQL

00:18:59.320 --> 00:19:01.550
library, and possibly others.

00:19:01.550 --> 00:19:04.820
And the good news is, with App
Engine and CloudSQL, we've

00:19:04.820 --> 00:19:06.770
optimized it to work with
all three of them.

00:19:06.770 --> 00:19:08.930
And in fact, there's not really
much to say about this,

00:19:08.930 --> 00:19:11.070
except that it works exactly
the same way that you would

00:19:11.070 --> 00:19:13.840
expect with a MySQL database
that you might have running on

00:19:13.840 --> 00:19:16.100
your own instance or running
on your own box somewhere.

00:19:16.100 --> 00:19:18.280
The only real difference is
that, rather than specifying

00:19:18.280 --> 00:19:21.090
the main server or an IP address
of a MySQL server

00:19:21.090 --> 00:19:23.640
somewhere, instead, you specify
the project name and

00:19:23.640 --> 00:19:25.570
the instance name
of the CloudSQL

00:19:25.570 --> 00:19:26.690
instance that you've created.

00:19:26.690 --> 00:19:29.350
And this socket CloudSQL
identifier, here.

00:19:29.350 --> 00:19:30.200
Everything else--

00:19:30.200 --> 00:19:31.660
querying, selecting
a database--

00:19:31.660 --> 00:19:33.880
is exactly the same.

00:19:33.880 --> 00:19:35.720
So that's CloudSQL
in a nutshell.

00:19:35.720 --> 00:19:37.330
Let's talk about file storage.

00:19:37.330 --> 00:19:40.570
So again, with file storage,
we wanted to file an

00:19:40.570 --> 00:19:44.180
object-store system that was as
scalable and efficient and

00:19:44.180 --> 00:19:46.800
performant as App Engine
itself was.

00:19:46.800 --> 00:19:48.950
And Cloud Storage
gives us this.

00:19:48.950 --> 00:19:51.360
It has a couple of pretty
interesting features, one of

00:19:51.360 --> 00:19:52.970
them being fine-grained
access control.

00:19:52.970 --> 00:19:57.580
So like any file system, really,
it gives you the

00:19:57.580 --> 00:20:00.220
ability to be able to control
exactly who can read and write

00:20:00.220 --> 00:20:03.130
to what files and what
collections of files.

00:20:03.130 --> 00:20:06.050
It also allows you to publicly
publish content to the web if

00:20:06.050 --> 00:20:06.570
you choose.

00:20:06.570 --> 00:20:09.030
If you set the bit on a
collection of files or on a

00:20:09.030 --> 00:20:12.280
specific file, you can publicly
serve that image to

00:20:12.280 --> 00:20:15.440
the web from a HTTP address
that you've been given.

00:20:15.440 --> 00:20:18.070
So it's actually great for
storing content that might get

00:20:18.070 --> 00:20:20.720
uploaded as part of your
application or generated as

00:20:20.720 --> 00:20:22.140
part of your application.

00:20:22.140 --> 00:20:23.620
And then there's many different
ways that you can

00:20:23.620 --> 00:20:25.590
get to those files once
you've created them.

00:20:25.590 --> 00:20:27.770
There's a web-based GUI, if
that's what you like to use.

00:20:27.770 --> 00:20:30.690
There's any number of RESTful
APIs that the Cloud Storage

00:20:30.690 --> 00:20:31.710
service gives you.

00:20:31.710 --> 00:20:33.400
And then, of course,
you can get to it

00:20:33.400 --> 00:20:34.460
from Google App Engine.

00:20:34.460 --> 00:20:38.215
Now let's look at some code for
getting to Cloud Storage

00:20:38.215 --> 00:20:40.590
from PHP in Google App Engine.

00:20:40.590 --> 00:20:43.810
So PHP has a number of functions
that support a

00:20:43.810 --> 00:20:45.560
streaming API.

00:20:45.560 --> 00:20:48.690
Within the streaming API, you
can specify what resource you

00:20:48.690 --> 00:20:50.900
want to access by the
URL you provide.

00:20:50.900 --> 00:20:53.000
And you've probably used
these functions before

00:20:53.000 --> 00:20:53.900
if you're PHP developer.

00:20:53.900 --> 00:20:56.530
These things like fwrite
and file put contents.

00:20:56.530 --> 00:20:59.830
And you might have used them
with URLs like a file path or

00:20:59.830 --> 00:21:03.230
possibly an actual URL,
like HTTP URL.

00:21:03.230 --> 00:21:07.320
What we've done with Google
Cloud Storage is include Cloud

00:21:07.320 --> 00:21:10.670
Storage as a first class
citizen in the streams

00:21:10.670 --> 00:21:13.110
interface, which means,
effectively, that you could

00:21:13.110 --> 00:21:16.720
specify a Cloud Storage object
or a Cloud Storage bucket with

00:21:16.720 --> 00:21:17.620
these calls.

00:21:17.620 --> 00:21:22.810
So to write to a file is as
simple as if opening a Cloud

00:21:22.810 --> 00:21:26.050
Storage bucket that's been
set to be able to

00:21:26.050 --> 00:21:27.570
talk to your app.

00:21:27.570 --> 00:21:29.790
You can then write data into it
just like you would write

00:21:29.790 --> 00:21:30.920
data into a normal file.

00:21:30.920 --> 00:21:33.460
And you close it just like you
would close a normal file.

00:21:33.460 --> 00:21:36.410
Similarly, functions like file
put contents and file put

00:21:36.410 --> 00:21:39.050
contents work much the same way
as if you're working with

00:21:39.050 --> 00:21:40.820
files on a local file system.

00:21:40.820 --> 00:21:42.530
And the good new thing about
that is it makes it really

00:21:42.530 --> 00:21:46.130
easy to put content and retrieve
content from this

00:21:46.130 --> 00:21:49.350
high-performance storage
system that we have.

00:21:49.350 --> 00:21:52.130
So that's a couple of ways that
we've talked about to

00:21:52.130 --> 00:21:53.120
store data.

00:21:53.120 --> 00:21:55.240
Let's very quickly talk about a
couple of ways to make your

00:21:55.240 --> 00:21:57.160
application more efficient.

00:21:57.160 --> 00:21:59.330
And again, for those of you who
might not have used App

00:21:59.330 --> 00:22:04.000
Engine before, or you have but
maybe it's been awhile, both

00:22:04.000 --> 00:22:05.860
of the features that we're
about to talk about are

00:22:05.860 --> 00:22:08.370
fully-emulated, not just inside
App Engine itself when

00:22:08.370 --> 00:22:10.110
you push your applications
to production.

00:22:10.110 --> 00:22:11.940
But they're also fully-emulated
inside the

00:22:11.940 --> 00:22:13.180
development server itself.

00:22:13.180 --> 00:22:16.280
So you don't need to set
anything up on your laptop or

00:22:16.280 --> 00:22:17.390
on your development
box in order to be

00:22:17.390 --> 00:22:18.500
able to use this stuff.

00:22:18.500 --> 00:22:21.470
It's automatically there with
a development server.

00:22:21.470 --> 00:22:22.750
So the first thing I want to
talk about is Memcache.

00:22:22.750 --> 00:22:25.890
Memcache is a great way to
store content you need to

00:22:25.890 --> 00:22:28.900
access frequently and you
need to access quickly.

00:22:28.900 --> 00:22:30.880
Session data is something, for
example, that you might want

00:22:30.880 --> 00:22:34.280
to store inside Memcache.

00:22:34.280 --> 00:22:36.140
Something that's computationally
expensive to

00:22:36.140 --> 00:22:38.400
produce, maybe something that
involved a few database calls

00:22:38.400 --> 00:22:41.730
or a few CPU cycles is something
to you may well want

00:22:41.730 --> 00:22:43.170
to store inside Memcache
between

00:22:43.170 --> 00:22:45.350
requests or between sessions.

00:22:45.350 --> 00:22:47.370
One example, actually, the we
showed you before we didn't

00:22:47.370 --> 00:22:51.510
tell you was the blog we set
up was using a Memcache

00:22:51.510 --> 00:22:56.600
plug-in called back cache
to cache the pages

00:22:56.600 --> 00:22:58.320
that have been generated.

00:22:58.320 --> 00:23:00.630
And that actually worked,
interestingly, out of the box.

00:23:00.630 --> 00:23:03.370
We didn't need to
modify any code.

00:23:03.370 --> 00:23:07.180
And in fact, PHP provides
two libraries

00:23:07.180 --> 00:23:07.790
to work with Memcache.

00:23:07.790 --> 00:23:09.380
It provides the Memcache
library and

00:23:09.380 --> 00:23:11.410
the Memcached library.

00:23:11.410 --> 00:23:13.150
They're similar but different.

00:23:13.150 --> 00:23:16.710
And all you really need to know
about how they're treated

00:23:16.710 --> 00:23:18.940
inside PHP on App Engine
is they work

00:23:18.940 --> 00:23:20.380
exactly like you'd expect.

00:23:20.380 --> 00:23:23.460
And again, we've found a lot of
code that we've worked with

00:23:23.460 --> 00:23:26.030
generally works by simply
dropping it in.

00:23:26.030 --> 00:23:29.150
We don't need to make any
modifications to it.

00:23:29.150 --> 00:23:30.610
So another way you can add
efficiency to your

00:23:30.610 --> 00:23:33.360
applications, as well as some
scalability and some

00:23:33.360 --> 00:23:35.510
reliability is using
task queues.

00:23:35.510 --> 00:23:37.610
Task queues are possibly
my favorite

00:23:37.610 --> 00:23:38.730
feature of App Engine.

00:23:38.730 --> 00:23:40.750
And in a nutshell, what a task
queue is, if you haven't used

00:23:40.750 --> 00:23:43.650
it before, it's a way of taking
a long-running piece of

00:23:43.650 --> 00:23:45.740
work-- let's call it a task--

00:23:45.740 --> 00:23:48.990
that you would have otherwise
running inside the

00:23:48.990 --> 00:23:51.270
request-response cycle
of your application.

00:23:51.270 --> 00:23:54.240
And it might delay the response
to your users while

00:23:54.240 --> 00:23:56.130
you're waiting for this
task to complete.

00:23:56.130 --> 00:23:58.860
And task queues allow you to
take that unit of work and run

00:23:58.860 --> 00:24:01.990
it asynchronously outside of
the request-response cycle.

00:24:01.990 --> 00:24:03.630
And what that means is,
instead of waiting for

00:24:03.630 --> 00:24:05.910
long-running processes to
complete, your application

00:24:05.910 --> 00:24:07.940
could respond much more
quickly-- it can respond,

00:24:07.940 --> 00:24:09.860
effectively, immediately--
to your end users.

00:24:09.860 --> 00:24:11.530
So they get a snappy response.

00:24:11.530 --> 00:24:14.320
And they get a much better
experience using your service.

00:24:14.320 --> 00:24:17.540
So again, just a little bit
of context in here.

00:24:17.540 --> 00:24:21.270
An example of that might be when
Stuart published his post

00:24:21.270 --> 00:24:23.670
on Wordpress before, we actually
had a little plug-in

00:24:23.670 --> 00:24:27.700
there called jet pack which
allowed us to tweet to our

00:24:27.700 --> 00:24:29.530
legions of followers.

00:24:29.530 --> 00:24:31.780
And you might've noticed, when
he pressed "publish," it

00:24:31.780 --> 00:24:33.190
actually took a short
amount of time.

00:24:33.190 --> 00:24:34.560
It took about a second or so.

00:24:34.560 --> 00:24:36.090
Which is pretty fast.

00:24:36.090 --> 00:24:40.400
But the reason that it took so
long, a large amount of that

00:24:40.400 --> 00:24:43.620
time that we were waiting was
actually waiting to go out to

00:24:43.620 --> 00:24:46.990
the Twitter API, send a tweet,
get a response back.

00:24:46.990 --> 00:24:47.790
Twitter has a great API.

00:24:47.790 --> 00:24:48.500
It's pretty fast.

00:24:48.500 --> 00:24:50.630
But calling any third-party
service takes time.

00:24:50.630 --> 00:24:55.310
So something like that is an
ideal thing to wrap into a

00:24:55.310 --> 00:24:57.400
task and to run asynchronously.

00:24:57.400 --> 00:25:00.090
Let's quickly look at some
code that does that.

00:25:00.090 --> 00:25:02.820
And this is rather contrived
code because we wanted to fit

00:25:02.820 --> 00:25:03.390
on the slide.

00:25:03.390 --> 00:25:05.335
But I think we can
get the idea.

00:25:05.335 --> 00:25:07.610
There's really only two steps.

00:25:07.610 --> 00:25:10.450
The first step is to create
a task handler.

00:25:10.450 --> 00:25:12.100
This is just a normal
PHP file.

00:25:12.100 --> 00:25:15.430
And all we've done inside this
task handler is put the code

00:25:15.430 --> 00:25:18.080
we would like to have executed
asynchronously.

00:25:18.080 --> 00:25:20.820
In this case, it's the code
that send a tweet.

00:25:20.820 --> 00:25:24.160
And we want this task handler,
we don't want to send just one

00:25:24.160 --> 00:25:24.910
particular tweet.

00:25:24.910 --> 00:25:27.660
We want to be able to
parametrize it so it can send

00:25:27.660 --> 00:25:28.750
many tweets.

00:25:28.750 --> 00:25:31.820
And so what we've done here as
you can see, is that the text

00:25:31.820 --> 00:25:36.060
of the tweet is specified
by a post variable.

00:25:36.060 --> 00:25:40.390
And then, back in the original
code that was publishing,

00:25:40.390 --> 00:25:43.360
publishing a blog post-- here
we've called it post.php--

00:25:43.360 --> 00:25:46.970
what we've done is take the
original code that was sending

00:25:46.970 --> 00:25:50.550
a tweet and replace it with
this new push task object.

00:25:50.550 --> 00:25:53.120
So we include the push
task library.

00:25:53.120 --> 00:25:55.230
We instantiate this
push task object.

00:25:55.230 --> 00:26:00.220
We initialize that object with
the path to be handler that

00:26:00.220 --> 00:26:01.330
we've just created.

00:26:01.330 --> 00:26:03.440
And we set at any parameters
we think are important.

00:26:03.440 --> 00:26:05.630
Again, in this case, the
text of the tweet.

00:26:05.630 --> 00:26:07.270
And we call this add
method on it.

00:26:07.270 --> 00:26:09.180
And that add method will then
execute very quickly.

00:26:09.180 --> 00:26:11.410
It will asynchronously dispatch
the tweet task.

00:26:11.410 --> 00:26:14.320
It will run outside of the
request-response cycle.

00:26:14.320 --> 00:26:15.586
And your application can
get back to your

00:26:15.586 --> 00:26:16.680
users really quickly.

00:26:16.680 --> 00:26:18.590
So it's a really nice way of
improving performance.

00:26:18.590 --> 00:26:21.090
You can also take advantage of
things like retry in the case

00:26:21.090 --> 00:26:24.590
the tweet call happened to
fail for some reason.

00:26:24.590 --> 00:26:27.660
Now, there's a ton of other
stuff that I was hoping to

00:26:27.660 --> 00:26:29.740
have time to talk about today.

00:26:29.740 --> 00:26:33.110
There's things like our page
service, which automatically

00:26:33.110 --> 00:26:36.140
rewrites your JavaScript and
CSS and HTML so it renders

00:26:36.140 --> 00:26:37.570
quickly for your users.

00:26:37.570 --> 00:26:39.730
There's things like a URL fetch
service which actually

00:26:39.730 --> 00:26:42.300
takes the same infrastructure
that we've been using for

00:26:42.300 --> 00:26:43.840
years to crawl the web--

00:26:43.840 --> 00:26:45.060
Google does a lot of that--

00:26:45.060 --> 00:26:48.010
and makes it available to your
application for pitching and

00:26:48.010 --> 00:26:51.080
posting HTTP content.

00:26:51.080 --> 00:26:54.730
There's services like
our users API.

00:26:54.730 --> 00:26:56.730
There's services like our mail
API that allows us to send

00:26:56.730 --> 00:26:58.510
content really quickly
and efficiently.

00:26:58.510 --> 00:27:00.340
I really would love to talk
about them, but we are running

00:27:00.340 --> 00:27:01.100
out of time.

00:27:01.100 --> 00:27:04.740
So what I'd like to do instead
is give you a bit of a taste

00:27:04.740 --> 00:27:09.040
of how this runtime works in
the real world with real

00:27:09.040 --> 00:27:12.740
deadlines, real clients,
and even really users.

00:27:12.740 --> 00:27:15.030
So in order to do that, I'd like
to hand it over to Jason

00:27:15.030 --> 00:27:15.610
from Potato.

00:27:15.610 --> 00:27:17.950
Potato are a wonderful agency.

00:27:17.950 --> 00:27:20.820
They've been working with App
Engine for quite a few years

00:27:20.820 --> 00:27:21.880
now, I think.

00:27:21.880 --> 00:27:25.160
And they were one of the first
people to get access to the

00:27:25.160 --> 00:27:27.070
PHP runtime when
we were running

00:27:27.070 --> 00:27:28.330
privately on Trusted Tester.

00:27:28.330 --> 00:27:32.036
So, Jason we'd love to
hear your experience.

00:27:32.036 --> 00:27:32.400
JASON CARTWRIGHT: Cheers.

00:27:32.400 --> 00:27:35.700
Thanks very much for
inviting me along.

00:27:35.700 --> 00:27:37.870
So hey, I'm Jason from Potato.

00:27:37.870 --> 00:27:40.820
We're a web development agency
with a very silly name.

00:27:40.820 --> 00:27:41.360
Based out of London.

00:27:41.360 --> 00:27:43.040
We've got people in North

00:27:43.040 --> 00:27:45.300
America, Europe, and Australia.

00:27:45.300 --> 00:27:48.410
There's about 70 of US and we're
almost all developers.

00:27:48.410 --> 00:27:51.840
So we build marketing-based web
applications, often for

00:27:51.840 --> 00:27:53.300
marketing departments.

00:27:53.300 --> 00:27:56.330
These are applications that
live and die around the

00:27:56.330 --> 00:28:00.360
campaign, usually around
a media spend or

00:28:00.360 --> 00:28:02.510
an event or a launch.

00:28:02.510 --> 00:28:06.760
And we love using Google Cloud
Platform because it allows us

00:28:06.760 --> 00:28:11.190
to scale up to thousands of
simultaneous users and

00:28:11.190 --> 00:28:14.210
thousands, many thousands,
of requests a second.

00:28:14.210 --> 00:28:20.220
But also, less glamorously, it
also scales down, as well,

00:28:20.220 --> 00:28:23.340
after the initial deluge of
users, which is a lot less

00:28:23.340 --> 00:28:26.430
glamorous but important
for costs.

00:28:26.430 --> 00:28:30.980
We do this with almost 70
developers but no sys admins.

00:28:30.980 --> 00:28:34.110
And nobody carries a pager.

00:28:34.110 --> 00:28:39.800
So let's have a look at an
existing Drupal website that

00:28:39.800 --> 00:28:43.130
we got up and running
on App Engine.

00:28:43.130 --> 00:28:45.650
So this is
databasechallenge.org.

00:28:45.650 --> 00:28:49.170
And it's a site that hosts
a competition that allows

00:28:49.170 --> 00:28:53.200
developers and artists to
visualize how US tax dollars

00:28:53.200 --> 00:28:57.670
are spent in interesting
and informative ways.

00:28:57.670 --> 00:29:00.890
And it and it's all built
using Drupal.

00:29:00.890 --> 00:29:04.440
But what isn't so cool is it
was previously hosted on a

00:29:04.440 --> 00:29:07.410
single server in a single data
center that was about to be

00:29:07.410 --> 00:29:08.500
decommissioned.

00:29:08.500 --> 00:29:10.220
But I think we've
just heard of a

00:29:10.220 --> 00:29:11.770
platform the can fix that.

00:29:11.770 --> 00:29:13.640
So let's see how our
developers, John

00:29:13.640 --> 00:29:15.890
and Asim, did it.

00:29:15.890 --> 00:29:18.390
So the first stage was to get it
running on the development

00:29:18.390 --> 00:29:19.180
app server.

00:29:19.180 --> 00:29:21.065
And as Stuart showed you before,
you're going to need

00:29:21.065 --> 00:29:22.820
an app.yaml file for that.

00:29:22.820 --> 00:29:25.240
This is really familiar if
you've used App Engine before

00:29:25.240 --> 00:29:26.910
and very straightforward
if you haven't.

00:29:26.910 --> 00:29:29.640
You've got your application
metadata and then some

00:29:29.640 --> 00:29:34.490
[INAUDIBLE] at the bottom
that read the script.

00:29:34.490 --> 00:29:39.280
So previously, we got
it up and running.

00:29:39.280 --> 00:29:42.660
And then we found out that the
previous installation using

00:29:42.660 --> 00:29:47.530
Apache was using htaccess files
to redirect the URLs so

00:29:47.530 --> 00:29:50.630
that the Drupal permalinks
worked.

00:29:50.630 --> 00:29:52.630
That was really easy to solve.

00:29:52.630 --> 00:29:57.200
We just put a router script at
the top of the application to

00:29:57.200 --> 00:30:02.750
give Drupal the information
it was expecting in

00:30:02.750 --> 00:30:05.180
the place it expected.

00:30:05.180 --> 00:30:09.640
From there, we took a standard
MySQL backup dump, just a big

00:30:09.640 --> 00:30:14.760
fat SQL file, from the live
production database.

00:30:14.760 --> 00:30:18.420
We then uploaded that to Google
Cloud Storage, very

00:30:18.420 --> 00:30:21.420
straightforward, and then from
there, it's one click to get

00:30:21.420 --> 00:30:24.920
that into Google Cloud Sequel.

00:30:24.920 --> 00:30:27.230
Then we change the connection
string.

00:30:27.230 --> 00:30:31.600
So, just Stuart showed you, very
straightforward if you've

00:30:31.600 --> 00:30:34.080
used PHP before or other
scripting languages.

00:30:34.080 --> 00:30:39.210
Just a string that tells the
script where the data is.

00:30:39.210 --> 00:30:41.420
And then, it's just one command,
like any other App

00:30:41.420 --> 00:30:45.410
Engine application, just one
command to hand off your code

00:30:45.410 --> 00:30:48.440
to Google and for them to run
it across as many server

00:30:48.440 --> 00:30:50.510
instances as is required.

00:30:50.510 --> 00:30:53.840
So we gave the site a bit of a
load test just to see what

00:30:53.840 --> 00:30:54.770
would happen.

00:30:54.770 --> 00:30:57.450
And we gave up trying
to break it at about

00:30:57.450 --> 00:30:59.980
800 requests a second.

00:30:59.980 --> 00:31:02.340
It didn't go down.

00:31:02.340 --> 00:31:04.740
And also today, I just found
out it's using Memcache.

00:31:04.740 --> 00:31:06.990
We did nothing to set that up.

00:31:06.990 --> 00:31:09.910
It just works right out the
box without us even

00:31:09.910 --> 00:31:10.890
knowing about it.

00:31:10.890 --> 00:31:11.920
Which is really cool.

00:31:11.920 --> 00:31:14.040
Overall, we're really impressed

00:31:14.040 --> 00:31:17.160
by how a young platform--

00:31:17.160 --> 00:31:18.970
and we were using before
it was released--

00:31:18.970 --> 00:31:23.040
was able to take this relatively
complicated content

00:31:23.040 --> 00:31:28.790
management system with
customizations on top and

00:31:28.790 --> 00:31:30.040
scale it up.

00:31:38.160 --> 00:31:39.650
ANDREW JESSUP: So now you've
seen Wordpress, now you've

00:31:39.650 --> 00:31:40.830
seen Drupal running on
App Engine, too.

00:31:40.830 --> 00:31:42.460
That's pretty cool.

00:31:42.460 --> 00:31:46.190
So this week at Google I/O we've
announced App Engine

00:31:46.190 --> 00:31:48.130
into limited preview.

00:31:48.130 --> 00:31:49.310
So what does that mean?

00:31:49.310 --> 00:31:52.460
Well, first of all, it means
that both the documentation

00:31:52.460 --> 00:31:56.460
and an early version of the SDK
are available today from

00:31:56.460 --> 00:31:57.300
our developer site.

00:31:57.300 --> 00:31:57.870
That's--

00:31:57.870 --> 00:31:59.267
can't quite read it there-- but
that's developers.googl

00:31:59.267 --> 00:32:01.980
e.com/AppEngine.

00:32:01.980 --> 00:32:03.480
So you get both of
them right now.

00:32:03.480 --> 00:32:05.510
And you could use that to start
developing stuff locally

00:32:05.510 --> 00:32:06.710
on your own machine.

00:32:06.710 --> 00:32:09.410
For a limited time, to
actually deploy an

00:32:09.410 --> 00:32:11.650
application, you will need
to be white-listed.

00:32:11.650 --> 00:32:13.010
To do that is very,
very simple.

00:32:13.010 --> 00:32:17.490
Just head on to
cloud.google.com/AppEngine/PHP.

00:32:17.490 --> 00:32:19.110
There's a self-service
site to get set up.

00:32:19.110 --> 00:32:22.160
And we'll be white-listing
you as soon as we can.

00:32:22.160 --> 00:32:25.820
If you're actually physically
at Google I/O today, then

00:32:25.820 --> 00:32:27.170
there's some great
stuff going on.

00:32:27.170 --> 00:32:29.480
You can find both Stuart and
myself in the Developer

00:32:29.480 --> 00:32:31.180
Sandbox after this event.

00:32:31.180 --> 00:32:33.190
We'd love to have a chat to
you and answer any PHP

00:32:33.190 --> 00:32:35.610
questions we don't
get to right now.

00:32:35.610 --> 00:32:37.820
And also, for those who are
sticking around tomorrow, we

00:32:37.820 --> 00:32:39.390
have a code lab.

00:32:39.390 --> 00:32:42.040
And again, both Stuart and
myself will be there.

00:32:42.040 --> 00:32:44.630
And we'll be going through a lot
of the techniques and all

00:32:44.630 --> 00:32:47.950
of the libraries we talked about
today in more depth.

00:32:47.950 --> 00:32:51.120
And again, we'll be
able to questions.

00:32:51.120 --> 00:32:53.550
So now we would like to take
it over to questions.

00:32:53.550 --> 00:32:55.460
So we've got-- again, for those
in the audience-- we've

00:32:55.460 --> 00:32:58.150
got a couple microphones up
here, which if you come up to

00:32:58.150 --> 00:33:00.886
I believe will be turned on
and you can ask questions.

00:33:00.886 --> 00:33:02.920
Do we have any online
questions?

00:33:02.920 --> 00:33:03.970
STUART LANGLEY: We
don't, Andrew.

00:33:03.970 --> 00:33:04.560
ANDREW JESSUP: Beautiful.

00:33:04.560 --> 00:33:05.810
So it's open to the floor.

00:33:09.100 --> 00:33:11.920
AUDIENCE: When you run Wordpress
on any server,

00:33:11.920 --> 00:33:15.090
typically there are
many plug-ins.

00:33:15.090 --> 00:33:16.760
And Wordpress itself
gets updated

00:33:16.760 --> 00:33:18.270
automatically these days.

00:33:18.270 --> 00:33:20.800
So when you just see the web
console, it says there is an

00:33:20.800 --> 00:33:24.030
update, click to update, and it
automatically downloads and

00:33:24.030 --> 00:33:25.410
just updates itself.

00:33:25.410 --> 00:33:27.980
So how does it work in
App Engine context?

00:33:27.980 --> 00:33:31.160
Because in App Engine, there
is no file system.

00:33:31.160 --> 00:33:33.720
So does the same functionality
work?

00:33:33.720 --> 00:33:37.520
Or do I have to go back to the
old SVN method of downloading

00:33:37.520 --> 00:33:40.080
updates on the back channel and
pushing updates into the

00:33:40.080 --> 00:33:41.660
App Engine?

00:33:41.660 --> 00:33:42.370
STUART LANGLEY: Essentially, an

00:33:42.370 --> 00:33:43.350
engineering question, there.

00:33:43.350 --> 00:33:46.950
So my understanding is does the
update feature that's part

00:33:46.950 --> 00:33:49.570
of Wordpress, where you can just
point it at the zipfile

00:33:49.570 --> 00:33:53.100
for plug-in, for example, and
have it upload and install the

00:33:53.100 --> 00:33:55.770
plug-in in your environment
work on App Engine?

00:33:55.770 --> 00:33:56.880
AUDIENCE: That's part of it.

00:33:56.880 --> 00:33:58.790
But the second one
is, let's say--

00:33:58.790 --> 00:34:02.450
my primary question was, if
Wordpress gets updated, say

00:34:02.450 --> 00:34:06.740
from 3.3.1 3.3.2, we don't
need to manually push the

00:34:06.740 --> 00:34:08.600
updates [INAUDIBLE].

00:34:08.600 --> 00:34:12.620
Wordpress can automatically
download it by itself.

00:34:12.620 --> 00:34:12.960
STUART LANGLEY: Sure.

00:34:12.960 --> 00:34:13.150
OK.

00:34:13.150 --> 00:34:14.560
I think so.

00:34:14.560 --> 00:34:16.100
I believe I understand
you question.

00:34:16.100 --> 00:34:19.550
So the answer for bothm as
Andrew already mentioned, in

00:34:19.550 --> 00:34:21.949
App Engine environment, you
can't write to the local file

00:34:21.949 --> 00:34:24.360
system where we serve your
application from.

00:34:24.360 --> 00:34:27.980
And as it stands at the moment,
we will not let you

00:34:27.980 --> 00:34:30.080
execute files that you put
in Google Cloud Storage.

00:34:30.080 --> 00:34:32.120
We treat them as URLs.

00:34:32.120 --> 00:34:34.030
And we don't let you
include them.

00:34:34.030 --> 00:34:37.275
So to update the plug-ins that
you may have, or to add new

00:34:37.275 --> 00:34:39.520
plug-ins to your runtime would
mean re-pushing your

00:34:39.520 --> 00:34:41.980
app, much like FTP.

00:34:41.980 --> 00:34:45.770
And the same thing for migrating
from one version of

00:34:45.770 --> 00:34:47.340
Wordpress to the other.

00:34:47.340 --> 00:34:48.664
You would need to re-push
your application.

00:34:51.550 --> 00:34:54.080
Before you sit down, I believe
we have some swag for question

00:34:54.080 --> 00:34:55.050
answerers at the front.

00:34:55.050 --> 00:34:57.460
Please come and collect.

00:34:57.460 --> 00:34:59.310
ANDREW JESSUP: Next question.

00:34:59.310 --> 00:35:04.360
AUDIENCE: Thank you for
presenting PHP on App Engine.

00:35:04.360 --> 00:35:09.060
I have a question about
using Framework.

00:35:09.060 --> 00:35:15.680
I make application with PHP
and so many frameworks.

00:35:19.430 --> 00:35:22.550
For example, Symphony
or CakePHP.

00:35:22.550 --> 00:35:30.390
If you tried it, please tell me
what happens if I use some

00:35:30.390 --> 00:35:33.810
frameworks in App Engine.

00:35:33.810 --> 00:35:36.000
ANDREW JESSUP: So we haven't
spent a lot of time

00:35:36.000 --> 00:35:38.700
experimenting with frameworks
on this, yet.

00:35:38.700 --> 00:35:40.310
STUART LANGLEY: We haven't.

00:35:40.310 --> 00:35:44.430
But a few trusted testers
have taken things

00:35:44.430 --> 00:35:45.580
like Drupal, for example--

00:35:45.580 --> 00:35:47.680
there was a blog post last
night, and actually had a

00:35:47.680 --> 00:35:49.130
stand up Drupal.

00:35:49.130 --> 00:35:53.200
And people have started looking
into Symphony, Cake,

00:35:53.200 --> 00:35:55.570
and so on and so forth.

00:35:55.570 --> 00:35:59.260
But personally, we haven't
tested them a great deal.

00:35:59.260 --> 00:36:03.420
And I think part of this project
is working closely

00:36:03.420 --> 00:36:05.995
with the communities that write
these frameworks and use

00:36:05.995 --> 00:36:09.660
these frameworks to understand
what needs to happen on our

00:36:09.660 --> 00:36:13.200
side for them to work and also
to help them make their

00:36:13.200 --> 00:36:15.116
frameworks run well
on App Engine.

00:36:15.116 --> 00:36:15.470
AUDIENCE: OK.

00:36:15.470 --> 00:36:18.660
Thank you very much.

00:36:18.660 --> 00:36:20.130
ANDREW JESSUP: And just
a quick public service

00:36:20.130 --> 00:36:20.425
announcement.

00:36:20.425 --> 00:36:22.900
If there's anyone who would
really like to be

00:36:22.900 --> 00:36:24.130
white-listed early.

00:36:24.130 --> 00:36:28.290
We have a very small, limited,
I think 10, invites that we

00:36:28.290 --> 00:36:29.400
can give out.

00:36:29.400 --> 00:36:31.605
STUART LANGLEY: I believe
that we were going to--

00:36:31.605 --> 00:36:34.310
the question askers were
automatically going to get

00:36:34.310 --> 00:36:37.070
white-listed.

00:36:37.070 --> 00:36:39.950
So you're doing the right thing
in the line, there.

00:36:39.950 --> 00:36:44.180
If we don't get more than 10
question askers, come and find

00:36:44.180 --> 00:36:46.450
us and we'll do our best.

00:36:46.450 --> 00:36:47.530
To the left.

00:36:47.530 --> 00:36:51.120
AUDIENCE: So you showed an
example of Drupal and showed

00:36:51.120 --> 00:36:53.030
an example of Wordpress.

00:36:53.030 --> 00:36:55.710
And you said that it was
next to no changes

00:36:55.710 --> 00:36:56.570
that you had to do.

00:36:56.570 --> 00:37:01.340
One of the big things on both
of those is they have file

00:37:01.340 --> 00:37:04.520
uploads and I know you've done
a good job of just having URL

00:37:04.520 --> 00:37:08.510
handlers for that, but both
Drupal and Wordpress require

00:37:08.510 --> 00:37:11.565
you to then say what the
URL path to those are.

00:37:11.565 --> 00:37:12.900
And if it's on Google
Cloud Storage

00:37:12.900 --> 00:37:14.890
it's going to be elsewhere.

00:37:14.890 --> 00:37:17.870
And if I'm not mistaken, the
default for Google Cloud

00:37:17.870 --> 00:37:19.780
Storage is not to be
publicly readable.

00:37:19.780 --> 00:37:22.540
So wouldn't you have had to make
changes to that in order

00:37:22.540 --> 00:37:25.230
for file uploads, even though
they'll be going into Google

00:37:25.230 --> 00:37:28.130
Cloud Storage to work?

00:37:28.130 --> 00:37:30.250
ANDREW JESSUP: So we're
actually, certainly in the

00:37:30.250 --> 00:37:32.070
case of Wordpress, and hopefully
in the case of

00:37:32.070 --> 00:37:33.920
Drupal, we're looking
into plug-ins that

00:37:33.920 --> 00:37:35.320
can help with that.

00:37:35.320 --> 00:37:38.810
So there are, for uploading
media, for example and

00:37:38.810 --> 00:37:41.660
uploading other types of files
to Google Cloud Storage,

00:37:41.660 --> 00:37:44.530
that's something that, while
the Wordpress itself won't

00:37:44.530 --> 00:37:46.260
necessarily do out of the box,
it's something that could

00:37:46.260 --> 00:37:48.550
quite easily be solved
with a plug-in.

00:37:48.550 --> 00:37:50.830
In the case of Wordpress, that's
something that we're

00:37:50.830 --> 00:37:52.960
working with a few people in the
Wordpress community to try

00:37:52.960 --> 00:37:54.260
and bring to bear.

00:37:54.260 --> 00:37:55.670
And we would like to
see the same thing

00:37:55.670 --> 00:37:56.920
with Drupal, as well.

00:37:59.840 --> 00:38:02.690
STUART LANGLEY: From
the right.

00:38:02.690 --> 00:38:04.390
AUDIENCE: Hi, I'm
a PHP developer.

00:38:04.390 --> 00:38:06.420
I'm also a Ruby on
Rails developer.

00:38:06.420 --> 00:38:08.190
I was just wondering--

00:38:08.190 --> 00:38:13.090
I use various platforms, such
as Heroku and Cloud Foundry.

00:38:13.090 --> 00:38:17.820
I was wondering, when will you
guys support Ruby on Rails?

00:38:17.820 --> 00:38:22.850
ANDREW JESSUP: So that's
a great question.

00:38:22.850 --> 00:38:25.200
AUDIENCE: The thing is with
PHP, there's so many

00:38:25.200 --> 00:38:25.690
frameworks.

00:38:25.690 --> 00:38:28.590
You have [INAUDIBLE], Wordpress,
and all these other

00:38:28.590 --> 00:38:30.680
frameworks.

00:38:30.680 --> 00:38:34.590
But with Ruby on Rails, you
have Sinatra and Rails.

00:38:34.590 --> 00:38:38.040
ANDREW JESSUP: Rails
is a great runtime.

00:38:38.040 --> 00:38:40.590
The work for us doesn't stop at
PHP, just as it didn't stop

00:38:40.590 --> 00:38:41.580
with Python or Java.

00:38:41.580 --> 00:38:43.230
We're always working on more.

00:38:43.230 --> 00:38:46.090
And we're always looking
into new runtimes.

00:38:46.090 --> 00:38:47.920
So expect more from
this space.

00:38:47.920 --> 00:38:49.660
I can't, unfortunately, talk
about things that we haven't

00:38:49.660 --> 00:38:50.250
announced yet.

00:38:50.250 --> 00:38:52.280
But expect more to come.

00:38:52.280 --> 00:38:54.330
AUDIENCE: Where can I follow
for news regarding

00:38:54.330 --> 00:38:55.870
development?

00:38:55.870 --> 00:38:57.370
ANDREW JESSUP: So there's a
couple places, actually.

00:38:57.370 --> 00:38:59.550
The Cloud Platform blog that
we announced recently is a

00:38:59.550 --> 00:39:00.710
great place to start.

00:39:00.710 --> 00:39:03.530
We have a Google+ profile,
as well.

00:39:03.530 --> 00:39:06.040
And then on top of that, the
forums, as well are a great

00:39:06.040 --> 00:39:06.680
place to find out.

00:39:06.680 --> 00:39:10.790
The forums, actually, there were
some people on the App

00:39:10.790 --> 00:39:13.260
Engine forums that found out
about the PHP runtime before

00:39:13.260 --> 00:39:14.790
we'd even announced it.

00:39:14.790 --> 00:39:17.930
So if you want to find the real
early news, I'd recommend

00:39:17.930 --> 00:39:19.570
that as a place to start.

00:39:19.570 --> 00:39:20.120
AUDIENCE: Thank you.

00:39:20.120 --> 00:39:21.210
STUART LANGLEY: So I believe,
unfortunately,

00:39:21.210 --> 00:39:22.350
we've out of time.

00:39:22.350 --> 00:39:24.840
I understand a lot of people
will want to ask questions and

00:39:24.840 --> 00:39:27.060
get white-listed.

00:39:27.060 --> 00:39:28.310
Please don't think that
we're trying to stop

00:39:28.310 --> 00:39:28.920
you from doing that.

00:39:28.920 --> 00:39:30.470
Come and find us outside.

00:39:30.470 --> 00:39:32.490
And we'll do our best
to get that done.

00:39:32.490 --> 00:39:33.880
So thank you all for
coming today.

00:39:33.880 --> 00:39:40.115
[APPLAUSE]

