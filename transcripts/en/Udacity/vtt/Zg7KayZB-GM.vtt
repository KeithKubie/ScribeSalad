WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:03.880
To facilitate the bookkeeping needed for the

00:00:03.880 --> 00:00:06.689
different types of program discontinuities that I

00:00:06.689 --> 00:00:11.460
mentioned, exokernel maintains the PE data structure

00:00:11.460 --> 00:00:14.410
on behalf of each library operating systems.

00:00:14.410 --> 00:00:17.240
So for example, this PE data structure

00:00:17.240 --> 00:00:20.180
corresponds to this library operating system. This

00:00:20.180 --> 00:00:22.570
B data structure corresponds to this library

00:00:22.570 --> 00:00:26.420
operating system. And the PE data structure contains

00:00:26.420 --> 00:00:32.060
the entry points in the library operating system for dealing with the different

00:00:32.060 --> 00:00:34.860
kinds of program discontinuities. For example,

00:00:34.860 --> 00:00:38.390
exceptions that are thrown by the currently

00:00:38.390 --> 00:00:41.670
executing process has a specific entry

00:00:41.670 --> 00:00:44.630
point in the library operating system. And

00:00:44.630 --> 00:00:47.970
similarly, external interrupts are going to be

00:00:47.970 --> 00:00:51.520
handled by interrupt handlers that have specific

00:00:51.520 --> 00:00:54.610
entry points in the library operating system.

00:00:54.610 --> 00:00:57.290
And a process may make system calls and

00:00:57.290 --> 00:00:59.940
if it makes system calls, there is a

00:00:59.940 --> 00:01:04.230
protected entry context, which is the entry point

00:01:04.230 --> 00:01:07.400
in a library operating system for system

00:01:07.400 --> 00:01:10.070
calls that are made by the currently running

00:01:10.070 --> 00:01:13.580
process that belongs to that specific library operating

00:01:13.580 --> 00:01:16.625
system. This last entry may correspond to the

00:01:16.625 --> 00:01:20.500
addressing context that is the location of

00:01:20.500 --> 00:01:23.540
the handler for page fault service the,

00:01:23.540 --> 00:01:25.540
in the library operating system. So in

00:01:25.540 --> 00:01:28.990
a nutshell, this PE data structure that is

00:01:28.990 --> 00:01:32.420
unique for every library operating system, contains

00:01:32.420 --> 00:01:35.640
the handler entry points for different types

00:01:35.640 --> 00:01:37.990
of events that are fielded by exokernel.

00:01:37.990 --> 00:01:42.315
In this sense, the PE and the associated

00:01:42.315 --> 00:01:46.780
exokernel action of calling the appropriated handler

00:01:46.780 --> 00:01:49.510
entry point, when a particular event is

00:01:49.510 --> 00:01:52.170
triggered, is very similar to the event

00:01:52.170 --> 00:01:55.110
handler mechanism that we discussed in the spin

00:01:55.110 --> 00:01:57.510
operating system. In addition to the PE

00:01:57.510 --> 00:02:00.360
data structure, we already mentioned the software

00:02:00.360 --> 00:02:05.290
TLB, that exokernel maintains on behalf of

00:02:05.290 --> 00:02:07.690
every operating system. So this is in software

00:02:07.690 --> 00:02:13.090
TLB for OS1, software TLB for OS2 and

00:02:13.090 --> 00:02:18.139
these are what are called a guaranteed mappings. In other words, I mentioned

00:02:18.139 --> 00:02:22.870
that on a context switch exokernel when it goes from one operating system to

00:02:22.870 --> 00:02:28.440
another, it saves the current TLB in the hardware,

00:02:28.440 --> 00:02:32.910
the hardware TLB in the software TLB that is associated with

00:02:32.910 --> 00:02:35.440
this particular operating system. And here is

00:02:35.440 --> 00:02:39.768
where this entry point is important. This

00:02:39.768 --> 00:02:42.802
actually is specifying to exokernel the set

00:02:42.802 --> 00:02:46.246
of guaranteed mappings that a particular library

00:02:46.246 --> 00:02:49.608
operating system wants exokernel to maintain on

00:02:49.608 --> 00:02:52.499
its behalf, every time it is scheduled.

00:02:52.499 --> 00:02:58.045
And that's the set of TLB entries that are dumped into the software TLB

00:02:58.045 --> 00:03:01.147
data structure at the point of a context

00:03:01.147 --> 00:03:04.595
switch. Not all of the hardware TLB entries, but

00:03:04.595 --> 00:03:07.521
only the entries that have been guaranteed to

00:03:07.521 --> 00:03:10.755
be kept on behalf of a particular operating system

00:03:10.755 --> 00:03:13.915
are dumped into a software TLB data structure.

00:03:13.915 --> 00:03:16.762
And those are the ones that will be repopulated

00:03:16.762 --> 00:03:19.536
into the hardware TLB when the same operating

00:03:19.536 --> 00:03:23.116
system is scheduled on the hardware. I mentioned an

00:03:23.116 --> 00:03:26.077
external interrupt is another source of discontinuity

00:03:26.077 --> 00:03:29.339
for the currently executing process. Well, note that

00:03:29.339 --> 00:03:31.913
an external interrupt may not always be

00:03:31.913 --> 00:03:36.050
for the currently scheduled operating system. It may

00:03:36.050 --> 00:03:38.330
be for some other operating system, maybe

00:03:38.330 --> 00:03:41.660
this operating system scheduled a disk IO. And

00:03:41.660 --> 00:03:44.460
the disk IO got complete. And that interrupt

00:03:44.460 --> 00:03:48.520
that came into exokernel is on behalf of

00:03:48.520 --> 00:03:54.830
this operating system and not the process that is currently executing on the CPU

00:03:54.830 --> 00:03:58.120
for this operating system. Exokernel has to

00:03:58.120 --> 00:04:02.170
have a way of associating the interrupt

00:04:02.170 --> 00:04:04.150
that is coming in with a correct

00:04:04.150 --> 00:04:07.830
operating system which is expecting it. Downloading

00:04:07.830 --> 00:04:10.155
code into the kernel, which I mentioned

00:04:10.155 --> 00:04:13.440
as one of the mechanism that exokernel provides,

00:04:13.440 --> 00:04:18.290
allows first level interrupt handling on behalf of a library operating system.

