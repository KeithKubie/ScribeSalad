WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.330
&gt;&gt; NORTH: ...going back to complete his master's
degree next week, give or take. And now--now

00:00:07.330 --> 00:00:11.440
my stalling time is over, so over the limit.
&gt;&gt; Oh, thanks for this wonderful introduction.

00:00:11.440 --> 00:00:17.580
I guess I don't have to do any. So--oh, let's
dive right in. I'm going to talk about open

00:00:17.580 --> 00:00:22.539
sourcing, the Robot API, basically my experiences
from the last month. So before I get started,

00:00:22.539 --> 00:00:28.119
who of you here ever wrote a Robot for Wave,
or used a data API? Okay, good. Not everybody.

00:00:28.119 --> 00:00:32.899
So, yeah, I'm going to talk a bit first about
what the Robot API actually is. Basically,

00:00:32.899 --> 00:00:37.620
there are three components. There's the Passive
Robot API, the Active Robot API, and the Data

00:00:37.620 --> 00:00:43.370
API. I'm going to talk a bit about what kind
of--what code--which code we used from production,

00:00:43.370 --> 00:00:49.960
the challenges we had to make it work for
the open source server. I'm going to talk

00:00:49.960 --> 00:00:54.539
a bit about the implementation, not too much
code details. I'll be here all week, so if

00:00:54.539 --> 00:00:58.449
you really want to get into the code and you're
of the people who signed up for the coding

00:00:58.449 --> 00:01:05.390
sessions on Thursday and Friday, feel free
to ask me any time. Let me hook up my power

00:01:05.390 --> 00:01:10.729
before my screen turns off. There you go.
Now, I'm going to give a demo of all the three

00:01:10.729 --> 00:01:16.600
different parts of the API. I'm going to talk
a bit about the work that's left to be done.

00:01:16.600 --> 00:01:23.400
So let's dive right in. Oh, it's the Passive
Robot API. On the left side we have--we have

00:01:23.400 --> 00:01:32.140
a Wave on which a user does something, like
add a robot to it. The server gets this operation

00:01:32.140 --> 00:01:40.270
from the user, and then it notes the address
[INDISTINCT] to robot so it sends this event,

00:01:40.270 --> 00:01:47.119
encode it in a JSON as a POST request to the
URL of the robot. The robot then does some

00:01:47.119 --> 00:01:54.219
processing. It wants to--it wants to do something
to do Wave. The things that it--things that

00:01:54.219 --> 00:01:57.260
it wants to do, it will encode it in JSON
again. It will send it back to a server. A

00:01:57.260 --> 00:02:01.439
server will make operations from these JSONs,
and will apply to the Wave, and you too will

00:02:01.439 --> 00:02:07.200
see that the Robot has done something. And
this is called passive because the robot itself

00:02:07.200 --> 00:02:12.060
is not instigating this operation. It's the
server who is calling the robot. So if you

00:02:12.060 --> 00:02:16.470
take a look at the Active Robot APIs, it's
actually the robot--it's just sending us the

00:02:16.470 --> 00:02:22.730
JSON to the server, and then the server will
apply these operations. But someone who is

00:02:22.730 --> 00:02:30.000
quick might have figured out like how do we
prevent someone from just cheating and pretending

00:02:30.000 --> 00:02:36.620
you're someone else? Well, we use something
called OAuth. So during registration, we'll

00:02:36.620 --> 00:02:42.330
hand out a security token to the robot, and
the robot will use this to authenticate to

00:02:42.330 --> 00:02:47.710
our server. And--so we know it is actually
the robot that's trying to send this operation

00:02:47.710 --> 00:02:53.540
and we can simply apply it as being this robot
participant. And then there is a third part

00:02:53.540 --> 00:02:58.900
of the API work which is called the Data API.
Well, robots are actually considered real

00:02:58.900 --> 00:03:07.260
participants. The data API is actually something
that allows you to apply operations as someone

00:03:07.260 --> 00:03:16.170
else. So, basically, I can log in. I can have
any program logged in as me and act as me

00:03:16.170 --> 00:03:23.570
on the way. We use three-legged OAuth for
this. Now that we--I've given a quick overview

00:03:23.570 --> 00:03:29.200
of what the APIs actually are, I'm wondering
if there are any questions about it. Okay.

00:03:29.200 --> 00:03:39.420
It seems like we're good. So I'm going to
talk a bit about--there's one question in

00:03:39.420 --> 00:03:43.500
the back.
&gt;&gt; Are you planning to add live editing of

00:03:43.500 --> 00:03:44.500
the Data API and also playback?
&gt;&gt; What--can you repeat that question?

00:03:44.500 --> 00:03:48.610
&gt;&gt; Are you planning to add live editing of
the Data API or the playback?

00:03:48.610 --> 00:03:53.760
&gt;&gt; So the question was, if there is any work
going on to add live editing or playback to

00:03:53.760 --> 00:03:59.400
the data API? Currently, there are no plans
for that. However, we're just trying to port

00:03:59.400 --> 00:04:04.460
the existing functionality we have in production
now. And then later on, we might be able to

00:04:04.460 --> 00:04:10.100
refine and add new operations to it. You're
welcome to contribute on how it should actually

00:04:10.100 --> 00:04:14.930
work. I believe the playback is actually not
working in the client at the moment. But it

00:04:14.930 --> 00:04:17.930
is also something we might add later on. Is
that correct?

00:04:17.930 --> 00:04:20.329
&gt;&gt; Yeah.
&gt;&gt; Yeah.

00:04:20.329 --> 00:04:24.070
&gt;&gt; INDISTINCT] spoke to it?
&gt;&gt; Not yet, but it's--yeah, there's a lot

00:04:24.070 --> 00:04:30.930
of work to be done. Okay, let me talk a bit
about what kind of code do we use from production?

00:04:30.930 --> 00:04:35.470
Well, our production server service scale
pretty well, so there is some code we cannot--of

00:04:35.470 --> 00:04:41.740
course, cannot use. But important code we
reuse is the service add synchronization code

00:04:41.740 --> 00:04:46.151
which is pushed out to the open source. It's
this thing that takes the JSON that comes

00:04:46.151 --> 00:04:55.260
from the robot and transforms it into objects
that we can use too, well, create operations

00:04:55.260 --> 00:05:02.900
in deltas. Also, there are--in the code itself,
I found a lot of--tons of ideas of how it--how

00:05:02.900 --> 00:05:09.640
it works. And I tried to improve upon these
ideas during my design of the Robot API. Something

00:05:09.640 --> 00:05:14.930
that we could not reuse, because we have a
slightly different view on Waves, internally,

00:05:14.930 --> 00:05:19.250
is the event generations. So we have to write
that from scratch. That's why not every event

00:05:19.250 --> 00:05:25.090
is yet supported. Also, we're phasing out
the blip-submitted event because that's something

00:05:25.090 --> 00:05:29.910
that was basically hacked on through our production
servers. I had a question about that early

00:05:29.910 --> 00:05:35.340
today, and I'm happy to discuss with anyone
who wants--really wants something like blips

00:05:35.340 --> 00:05:43.750
submitted, but it's--it's kind of tricky.
And also, something that I've learned while

00:05:43.750 --> 00:05:48.040
making the Robot API work is actually that
something that server engineers here might

00:05:48.040 --> 00:05:52.180
take home with them is that if you want your
code to be usable, you should think about

00:05:52.180 --> 00:05:56.990
what types you pass around. I found that the
code that we were using was actually passing

00:05:56.990 --> 00:06:02.860
around the internal view of our Wave, like
the special glass we have and, well, it actually

00:06:02.860 --> 00:06:08.919
did not need any of the functionality that
it offered. So, do not just use the deepest

00:06:08.919 --> 00:06:13.669
type in your hierarchy when you're--when you're
writing code. Think about whether you actually

00:06:13.669 --> 00:06:18.260
need it or not. So now let's talk a bit about
data. I'm going to talk a bit about the challenges

00:06:18.260 --> 00:06:23.990
I faced, and I think the most interesting
ones lie in the Passive API because if you

00:06:23.990 --> 00:06:29.080
have the Passive API covered, you can--you'll
also have a large part of the Active API and

00:06:29.080 --> 00:06:35.370
any of the API there, except for the OAuth
part. So, I'm--I'm going to talk a bit about

00:06:35.370 --> 00:06:40.410
how and when to generate events for robots.
Should we treat all robots equally? And what

00:06:40.410 --> 00:06:44.980
kind of guarantees can we give to robots?
Also, some interesting questions came up when

00:06:44.980 --> 00:06:53.230
we tried to figure out how a server will know
who's your robot, since in production we actually--and

00:06:53.230 --> 00:06:59.340
all of the robot addresses where apps product
come, so that gave it away to us. But in this

00:06:59.340 --> 00:07:05.020
case, we find that robot should be able to
be hosted anywhere. So when Wave was first

00:07:05.020 --> 00:07:11.290
launched, robots could only run on App Engine,
and since we're out in the open source now

00:07:11.290 --> 00:07:16.090
and robots have been liberated actually during
the last [INDISTINCT], we really want to retain

00:07:16.090 --> 00:07:23.860
that capability of just being able to host
it in any web server that can speak HTP. Also,

00:07:23.860 --> 00:07:27.490
robots shouldn't have to be registered at
every public server. We have a federation

00:07:27.490 --> 00:07:35.449
for a reason. So, we came up with the following
ID that robots--robots will register for an

00:07:35.449 --> 00:07:42.230
address at the--on the domain the Wave server
is serving on, like the example.com domain.

00:07:42.230 --> 00:07:48.699
So if I register a robot at example.com, and
I add a robot--and I add this robot to my

00:07:48.699 --> 00:07:53.820
Wave on example.com, the server just handles
it locally, which makes sense. And also, adding

00:07:53.820 --> 00:08:00.070
robot at example.com to acmewave.com, if acmewave
is federating with example.com, should basically

00:08:00.070 --> 00:08:06.510
be handled by the federation protocol. And
so, in allowing this, we actually have enabled

00:08:06.510 --> 00:08:12.870
federated robots, and it's actually working.
So I'm quite pleased about that. So now that

00:08:12.870 --> 00:08:17.370
I've talked a bit about robot registration,
I'm going to dive into how [INDISTINCT] Passive

00:08:17.370 --> 00:08:22.960
API works. We've seen--we've heard a bit about
the Wave bus before. It sends the snapshot

00:08:22.960 --> 00:08:29.260
of the latest version and the deltas that
had been applied to it recently down the Wave

00:08:29.260 --> 00:08:34.990
bus. It makes sense for the robot to--well,
anything that works with the Passive API,

00:08:34.990 --> 00:08:39.509
to hook up onto this because, well, we need
to generate events that come down this Wave

00:08:39.509 --> 00:08:49.209
bus. So we call this component the robot's
gateway, and its task is basically to generate

00:08:49.209 --> 00:08:57.339
events for robots and process their responses.
Well, if you would be quick in thinking, well,

00:08:57.339 --> 00:09:02.399
we might just hook it up like this, we have
the delta coming in from the Wave bus to the

00:09:02.399 --> 00:09:09.330
robot gateway, and we just generate events,
send out to one robot, get back, apply operations.

00:09:09.330 --> 00:09:14.680
It's actually not going to work that well
because, first of all, if you do it like this,

00:09:14.680 --> 00:09:18.639
well, you're serving HT--when you're calling
out to a robot, you're actually installing

00:09:18.639 --> 00:09:23.290
a Wave bus in this way. So I--and the other
subscribers to the Wave bus have to wait until

00:09:23.290 --> 00:09:27.889
the robots are done, which is not a good thing.
We want to keep the Wave bus pretty fast,

00:09:27.889 --> 00:09:33.930
so we have to do this, well, basically in
[INDISTINCT]. Also, multiple robots on the

00:09:33.930 --> 00:09:39.009
same Wave have to wait for each other in this
way. So if a robot is slow and there's another

00:09:39.009 --> 00:09:44.110
robot on the Wave, you have to wait until
that slow robot is done if you are next. And

00:09:44.110 --> 00:09:51.540
also, because if you do it like this and robot
A sends operations back that are applied to

00:09:51.540 --> 00:09:58.149
the Wave, robot B will not see them when robot
B gets called at this time because that will

00:09:58.149 --> 00:10:01.550
be another call to the Wave bus because it's
a new set of deltas that have been applied

00:10:01.550 --> 00:10:05.990
to it, which leads to stale information going
through the robots, which is not really a

00:10:05.990 --> 00:10:13.079
good thing. We don't want that. So, when we--we
thought a bit about that, and we came up with

00:10:13.079 --> 00:10:20.089
somewhat more advance implementation here
where we pass along the delta to something

00:10:20.089 --> 00:10:26.410
that is like a delayed proxy to a robot. We
schedule--we schedule the robot for execution

00:10:26.410 --> 00:10:36.189
in another thread. We do this for every robot
on the Wave so they run independently. And

00:10:36.189 --> 00:10:41.529
then on the execution, we send all the deltas
that have been collected for a single robot,

00:10:41.529 --> 00:10:48.069
for a single wavelet, to it. So if a robot
was doing a lot of work on Wave A and events

00:10:48.069 --> 00:10:52.870
came in multiple times to Wave B, when it's
time to for Wave B to be updated for that

00:10:52.870 --> 00:10:58.889
robot, we will send everything that's happened
to Wave B so won't have that--a problem with

00:10:58.889 --> 00:11:05.740
stale--really stale Waves anymore. I'm not
going to go too deep into code as I said before.

00:11:05.740 --> 00:11:12.399
If you really want to know how it works, what
the components are--yeah, what the code looks

00:11:12.399 --> 00:11:20.980
like, feel free to ask me. So I'm going to
go into a little demo now, show you every

00:11:20.980 --> 00:11:27.140
aspect of it. Let's hope everything is working.
The Wave client is actually up. Let me register

00:11:27.140 --> 00:11:39.120
my account quickly. Here we go. Let's see.
Hello, people. Well, here we go. So let me

00:11:39.120 --> 00:11:48.819
add a robot I've registered before. It should
say, hi. Right. So this is basically a passive

00:11:48.819 --> 00:11:53.749
API at work. The robot gets told that it has
been added to this Wave and it will send a

00:11:53.749 --> 00:12:00.019
response back to me. I can also do the active
API with this robot. I just have to call a

00:12:00.019 --> 00:12:05.759
URL to tell it to actually do something because--but
you can also have it do--run in an upfront

00:12:05.759 --> 00:12:10.389
con job or whatever you want. It's just a
matter of how to tell the robot that it's

00:12:10.389 --> 00:12:14.899
time to do something. And we could see here
that it's telling me that someone visited

00:12:14.899 --> 00:12:22.160
that link. So that's nice. I'm running an
old version now so the names are wrong, but

00:12:22.160 --> 00:12:32.439
that has been fixed. And now, I will show
a bit of the--well, actually, I'm going to

00:12:32.439 --> 00:12:37.639
show another robot. I'm going to let--let
it call out to App Engine, a registered robot

00:12:37.639 --> 00:12:47.300
which is running on App Engine right now.
Oh, here we go, robot. It's running on Wave-echo[INDISTINCT].com.

00:12:47.300 --> 00:12:53.989
It's actually, it actually echoes whatever
you type, which is kind of nice. You can actually--if

00:12:53.989 --> 00:13:00.610
you want to attach your survey, you can have--basically
add everyone and you can just see how it actually

00:13:00.610 --> 00:13:08.259
works. This works, so it's kind of nice. Well,
time to dive into the data API using Splash.

00:13:08.259 --> 00:13:13.170
Oh, yes. Sure.
&gt;&gt; Can you show the--the demo how you register?

00:13:13.170 --> 00:13:20.389
&gt;&gt; I will do that in a second after this.
Is it good? So, I'm--started up Splash now.

00:13:20.389 --> 00:13:27.019
Splash is doing a three-legged OAuth [INDISTINCT],
so it sends us back to the Wave in a Box server--servlet

00:13:27.019 --> 00:13:33.559
which asks whether or not you want to give
that program permission to have access to

00:13:33.559 --> 00:13:38.029
your data. So, I will click agree and then
it will send me back to Splash. And you will

00:13:38.029 --> 00:13:43.100
actually see that our ways will show up. So
this is Splash. And it has been mentioned

00:13:43.100 --> 00:13:49.929
before, it currently doesn't have the ability
to edit Wave, so that is something that might

00:13:49.929 --> 00:13:55.089
be added in the future. It's basically because
Wave got cancelled right when we wanted to

00:13:55.089 --> 00:14:01.649
launch all of this, so. It--the nice thing
about this, it runs purely on the data API

00:14:01.649 --> 00:14:10.970
and is also pretty fast. Well, I had a request
from the public to show registrations. So

00:14:10.970 --> 00:14:20.579
I should be able to do that. There we go.
It's--page still needs to be beautified, but

00:14:20.579 --> 00:14:32.860
it's as easy as just registering any address
on your server, typing in the URL of your

00:14:32.860 --> 00:14:40.009
robot without the "/_wave". And then your
robot has been registered. We hand out a token

00:14:40.009 --> 00:14:46.459
and a token secret, which you would need if
you want to use the active API. If you download

00:14:46.459 --> 00:14:50.369
the latest version of the Client Library,
you can actually change the server which it's

00:14:50.369 --> 00:14:58.179
calling to now properly, so you can use this
for your own servers now. Let me switch back

00:14:58.179 --> 00:15:01.220
to my slides.
&gt;&gt; A quick question.

00:15:01.220 --> 00:15:06.230
&gt;&gt; Yes.
&gt;&gt; Is that why the same robot could be registered

00:15:06.230 --> 00:15:10.889
under different addresses with different servers?
&gt;&gt; Yes. We might need to take a look at what

00:15:10.889 --> 00:15:15.610
actually it does to the code, but it should
definitely be possible.

00:15:15.610 --> 00:15:18.990
&gt;&gt; Do you remember what's--do you remember
what that [INDISTINCT] out when, like, your

00:15:18.990 --> 00:15:24.959
server is calling them and using them, like,
what their address is, [INDISTINCT]?

00:15:24.959 --> 00:15:28.179
&gt;&gt; So the question was whether robots find
out where--which server is calling them. You

00:15:28.179 --> 00:15:33.429
can definitely see the wavelet ID, so you
can find out which domain it's on.

00:15:33.429 --> 00:15:36.129
&gt;&gt; You can get it [INDISTINCT]
&gt;&gt; Wouldn't that--wouldn't that sort of detection

00:15:36.129 --> 00:15:40.589
be on the robot code itself rather than being
on the server's side? So, you [INDISTINCT]

00:15:40.589 --> 00:15:47.149
&gt;&gt; Yeah, the robot can figure out which domain
it's being called from. And maybe some extra

00:15:47.149 --> 00:15:53.670
code can be added to actually figure out which--well,
which URL is calling it, where it's being

00:15:53.670 --> 00:16:00.720
called from. Anyway, that code is also--the
robot Client Library is also open source and

00:16:00.720 --> 00:16:07.410
we actually encourage you to come up with
good ideas because we're basically out in

00:16:07.410 --> 00:16:14.319
the open now so we can make it better. So,
I want to spend another minute on what's the

00:16:14.319 --> 00:16:19.329
future work. So there is--normally when you
register robots for use in production, we

00:16:19.329 --> 00:16:25.079
have an extra step which actually calls out
the robot to check whether it's actually you

00:16:25.079 --> 00:16:29.759
that's adding it to the server. So that still
needs to be added. So we actually know whether

00:16:29.759 --> 00:16:37.210
there's a robot running on that address. Support
for gadgets inside robots. Currently, robots

00:16:37.210 --> 00:16:43.689
can't really act on gadgets. And I've also
been asked to point out that we are working

00:16:43.689 --> 00:16:50.019
on gadgets to get--to get into the client.
We have another patch outstanding which, when

00:16:50.019 --> 00:16:56.079
hooked up, makes it show up in a client and
then another patch is needed to persist the

00:16:56.079 --> 00:17:03.519
data for gadgets. We hope to do that this
week during the coding session. But I can't

00:17:03.519 --> 00:17:07.361
really guarantee that. You never know what
pops up, but there has been a lot of work

00:17:07.361 --> 00:17:12.539
going on in gadgets and it's getting there.
Yeah, if you check out the code now, you will

00:17:12.539 --> 00:17:21.269
see a gadget button actually in the Wave panel
if you update the libraries. We want to support

00:17:21.269 --> 00:17:26.579
more operations and events. Some of the operations
and events we have in production are not supported

00:17:26.579 --> 00:17:33.410
yet because they had to be re-written to work
with Wave in a Box. Most notably, we need

00:17:33.410 --> 00:17:39.960
to make an implementation for the robot notify
operation which allows the events to be reset.

00:17:39.960 --> 00:17:43.340
And there are some metadata fixes that need
to take place because the Wave bus doesn't

00:17:43.340 --> 00:17:50.610
currently tell us about the--about the right--the
correct time stamp when an event has occurred,

00:17:50.610 --> 00:17:56.240
when an event has occurred. So, yeah, I thank
you for your attention and if there are any

00:17:56.240 --> 00:18:12.070
questions, feel free to ask them now. Yeah.
&gt;&gt; Do you have any documentation for setting

00:18:12.070 --> 00:18:13.559
up robots on external servers?
&gt;&gt; What do you mean by external servers?

00:18:13.559 --> 00:18:22.300
&gt;&gt; Well, say, I'm going to host robots on
my server and [INDISTINCT] me up to one of

00:18:22.300 --> 00:18:23.300
the--how do I go about actually setting up
the robot on my server or do I need to do

00:18:23.300 --> 00:18:24.300
it?
&gt;&gt; Well, the question was whether--is there

00:18:24.300 --> 00:18:27.660
any documentation on setting up robots on
your own server. I believed that we have an

00:18:27.660 --> 00:18:31.640
API page for that on code.google.com.
&gt;&gt; Right.

00:18:31.640 --> 00:18:36.030
&gt;&gt; So, the original documentation which is
used for connection server should also work

00:18:36.030 --> 00:18:41.350
for your normal robots. You just need to change
the URL that it needs to call to for the active

00:18:41.350 --> 00:18:46.270
API. That's basically it. Any other--I saw
a question right there.

00:18:46.270 --> 00:18:51.500
&gt;&gt; I have a question regarding the [INDISTINCT]
in robots.

00:18:51.500 --> 00:19:04.720
&gt;&gt; Yes.
&gt;&gt; So, if I am using a robot which is on a

00:19:04.720 --> 00:19:06.230
different Wave server that means that my Wave
server and this different Wave server that

00:19:06.230 --> 00:19:07.549
federate, that means they're exchanging all
their tasks and to federate [INDISTINCT] to

00:19:07.549 --> 00:19:09.500
keep the state of the state, correct?
&gt;&gt; What do you mean by--the federated server?

00:19:09.500 --> 00:19:13.620
&gt;&gt; Yeah.
&gt;&gt; We have an acme com and example com. If

00:19:13.620 --> 00:19:18.559
my robot is on example com and I'm using acme
[INDISTINCT]...

00:19:18.559 --> 00:19:20.830
&gt;&gt; And those servers are federating, okay.
&gt;&gt; That means example com must hold the stays

00:19:20.830 --> 00:19:21.830
of the entire base.
&gt;&gt; Yeah.

00:19:21.830 --> 00:19:23.400
&gt;&gt; Now, when I'm using the, let's say, translation
robot, it would show my base of [INDISTINCT]

00:19:23.400 --> 00:19:24.400
translation robot could be used by many persons
around the world, but all of the base, all

00:19:24.400 --> 00:19:25.400
of the history has to be stored on my server
that runs the translation robot.

00:19:25.400 --> 00:19:28.139
&gt;&gt; All right. Yeah.
&gt;&gt; So, right. But if you're just using the

00:19:28.139 --> 00:19:35.790
robot, why wouldn't you register it on your
own server as opposed to using it through

00:19:35.790 --> 00:19:45.789
a federated server?
&gt;&gt; Well, that was the point, that I registered

00:19:45.789 --> 00:19:54.109
from there and instead everybody can use it
from there.

00:19:54.109 --> 00:19:56.389
&gt;&gt; But the [INDISTINCT]
&gt;&gt; If--if the servers are federating, yes.

00:19:56.389 --> 00:19:57.780
&gt;&gt; Yeah.
&gt;&gt; But you can register robots and not the

00:19:57.780 --> 00:20:01.419
servers.
&gt;&gt; But nobody will do that. So, under--typically

00:20:01.419 --> 00:20:07.870
[INDISTINCT] run--so I have translation servers,
it translate an [INDISTINCT]

00:20:07.870 --> 00:20:11.580
&gt;&gt; You can program your robot to actually
block out Waves from other domains, basically.

00:20:11.580 --> 00:20:17.389
If you--you just take the Wave ID you got
when the events come in and if it's not under

00:20:17.389 --> 00:20:20.110
the domain you want to serve on, you just
don't do anything.

00:20:20.110 --> 00:20:22.220
&gt;&gt; Okay, you can deny it.
&gt;&gt; That's safe sometimes.

00:20:22.220 --> 00:20:26.460
&gt;&gt; But [INDISTINCT] to robot API was--is the
stateless solution, for you, you get the operation

00:20:26.460 --> 00:20:30.090
then you make the decision with that operation
[INDISTINCT]

00:20:30.090 --> 00:20:34.529
&gt;&gt; That's the robot, yes. And then we--and
the federated Waves will actually be stored

00:20:34.529 --> 00:20:41.250
on the Wave server not in the robot.
&gt;&gt; Yeah. But my [INDISTINCT] full point is,

00:20:41.250 --> 00:20:47.869
you cannot really offer the robot service
to others because it makes the others frightful.

00:20:47.869 --> 00:20:51.669
&gt;&gt; No. But I think you're getting it.
&gt;&gt; I think we want to--this--we could take

00:20:51.669 --> 00:20:57.299
this discussion off this presentation because
it's, for me, dragging along. So we--I'm happy

00:20:57.299 --> 00:21:02.230
to talk about that. It sounds like something
that might be a problem. Any other questions?

00:21:02.230 --> 00:21:09.010
I guess not. That's--I think it's time for
a break now, am I right?

00:21:09.010 --> 00:21:13.690
&gt;&gt; I guess it's because--so you've been [INDISTINCT]
through the content which has been really

00:21:13.690 --> 00:21:15.372
good.
&gt;&gt; Are there any questions on the Wave, by

00:21:15.372 --> 00:21:16.372
the way?
&gt;&gt; Not that I saw.

00:21:16.372 --> 00:21:17.372
&gt;&gt; Okay.
&gt;&gt; I almost put up with, you know, set up

00:21:17.372 --> 00:21:18.372
your robot...
s discussion off this presentation because

00:21:18.372 --> 00:21:19.372
it's, for me, dragging along. So we--I'm happy
to talk about that. It sounds like something

00:21:19.372 --> 00:21:20.372
that might be a problem. Any other questions?
I guess not. That's--I think it's time for

00:21:20.372 --> 00:21:21.372
a break now, am I right?
&gt;&gt; I guess it's because--so you've been [INDISTINCT]

00:21:21.372 --> 00:21:23.440
through the content which has been really
good.

00:21:23.440 --> 00:21:24.079
&gt;&gt; Are t

