WEBVTT
Kind: captions
Language: en

00:00:07.840 --> 00:00:09.750
Welcome to Google I/O 2013.

00:00:09.750 --> 00:00:12.920
I am Prashant Labhane from
the Google APIs team.

00:00:12.920 --> 00:00:16.030
And today we'll be learning
about getting started with

00:00:16.030 --> 00:00:19.600
Google APIs in App Engine
using Python.

00:00:19.600 --> 00:00:23.750
In Google APIs' team, we try
really hard to make tools so

00:00:23.750 --> 00:00:26.610
that your application
development is easier and you

00:00:26.610 --> 00:00:29.150
can use the APIs very easily.

00:00:29.150 --> 00:00:32.140
In today's session, we'll be
covering about running a

00:00:32.140 --> 00:00:35.540
Quickstart application
locally.

00:00:35.540 --> 00:00:38.650
We'll deep-dive into the
Quickstart application.

00:00:38.650 --> 00:00:42.140
We'll do application development
using an API.

00:00:42.140 --> 00:00:44.130
We'll deploy the application
to App Engine.

00:00:44.130 --> 00:00:47.170
And at the end, I'll provide
some reference.

00:00:47.170 --> 00:00:50.400
But before getting started,
the first question I ask

00:00:50.400 --> 00:00:53.930
before writing any application
is to see what is

00:00:53.930 --> 00:00:55.920
provided in the APIs.

00:00:55.920 --> 00:00:59.950
You can do that without writing
a single line of code

00:00:59.950 --> 00:01:03.580
with a tool called
APIs Explorer.

00:01:03.580 --> 00:01:06.351
You can go to that tool
at developers.googl

00:01:06.351 --> 00:01:17.150
e.com/apis-explorer.

00:01:17.150 --> 00:01:20.340
And as you can see, Google
provides a lot of APIs, some

00:01:20.340 --> 00:01:23.640
of them very product-specific
like Blogger and Books.

00:01:23.640 --> 00:01:26.790
But we also provide a lot of
infrastructure APIs like Cloud

00:01:26.790 --> 00:01:28.880
Storage and Compute Engine.

00:01:28.880 --> 00:01:31.900
For today's session, I'm going
to be using one of my favorite

00:01:31.900 --> 00:01:33.170
APIs, Google+.

00:01:33.170 --> 00:01:36.590
But I would encourage you to try
out this exercise with any

00:01:36.590 --> 00:01:39.780
API of your liking.

00:01:39.780 --> 00:01:43.640
So as you can see, Google+
provides resources like

00:01:43.640 --> 00:01:48.590
activities, comments, and people
information in the API.

00:01:48.590 --> 00:01:54.430
So there's a method called a
Search in which you can query

00:01:54.430 --> 00:01:58.470
anything, and you will get
results for the activities

00:01:58.470 --> 00:02:00.450
that are relevant
to that query.

00:02:00.450 --> 00:02:04.260
So as you can see here, it
gives a bunch of items--

00:02:04.260 --> 00:02:08.000
the title, the URL, which
is basically a

00:02:08.000 --> 00:02:10.009
list of activity resources.

00:02:10.009 --> 00:02:14.260
What you can also do with the
Google+ API is to get

00:02:14.260 --> 00:02:19.000
information about a particular
users list of activities.

00:02:19.000 --> 00:02:20.515
And you can do that using
plus.activities.list.

00:02:23.480 --> 00:02:27.120
But before we get into that,
we need to authorize the

00:02:27.120 --> 00:02:32.240
application to get access
to the user's data.

00:02:32.240 --> 00:02:35.230
We do that using OAuth 2.

00:02:35.230 --> 00:02:39.600
So I'm going to turn on
OAuth 2 and allow

00:02:39.600 --> 00:02:41.735
access for Google+ API.

00:02:44.590 --> 00:02:46.990
And this presents me a
user content screen.

00:02:46.990 --> 00:02:49.360
During the course of this
session, you'll find the

00:02:49.360 --> 00:02:51.790
screen come up again.

00:02:51.790 --> 00:02:57.480
What this is trying to do is
trying to authorize the

00:02:57.480 --> 00:03:03.040
application Google APIs Explorer
to access user

00:03:03.040 --> 00:03:07.930
Prashant Labhane's data
for the Google+ API.

00:03:07.930 --> 00:03:09.240
I'm going to give it access.

00:03:13.370 --> 00:03:17.040
And then I can use
my user ID here.

00:03:17.040 --> 00:03:22.480
For brevity, you can use Me as
the code word for user ID.

00:03:22.480 --> 00:03:26.880
And it will pick up the user
from your browser.

00:03:26.880 --> 00:03:31.550
And I want to see whatever
I have shared publicly.

00:03:31.550 --> 00:03:35.610
Now, as you do that, you will
see, again, the same list of

00:03:35.610 --> 00:03:36.380
activities.

00:03:36.380 --> 00:03:40.440
But this one is particular to
the activities that are shared

00:03:40.440 --> 00:03:42.250
by the user.

00:03:42.250 --> 00:03:45.650
Looking at this API, I have a
good sense of what application

00:03:45.650 --> 00:03:47.790
I want to build.

00:03:47.790 --> 00:03:51.760
So I will be building an
application which displays the

00:03:51.760 --> 00:03:57.270
URLs of all the activities
for a particular user.

00:03:57.270 --> 00:04:02.210
So we can now get started with
the first section, which is

00:04:02.210 --> 00:04:04.790
running your Quickstart
application.

00:04:04.790 --> 00:04:08.240
For the purpose of this
exercise, I'm using a brand

00:04:08.240 --> 00:04:10.920
new Google account
called Google

00:04:10.920 --> 00:04:14.540
I/O 13 Python [? dev ?].

00:04:14.540 --> 00:04:18.660
So all the flows you'll be
seeing in today's session will

00:04:18.660 --> 00:04:19.730
be first-time session.

00:04:19.730 --> 00:04:22.870
If you already have registered
with App Engine or APIs

00:04:22.870 --> 00:04:27.380
Console, your flow might look
a little bit different.

00:04:27.380 --> 00:04:28.550
So let's get started.

00:04:28.550 --> 00:04:32.660
The first thing you need
to do is to register a

00:04:32.660 --> 00:04:34.970
Google Cloud Project.

00:04:34.970 --> 00:04:39.100
And you can get an instance
of Google Cloud Project at

00:04:39.100 --> 00:04:41.500
cloud.google.com.

00:04:41.500 --> 00:04:45.030
Since this is the first time
it's going to ask me for a

00:04:45.030 --> 00:04:46.280
verification--

00:04:53.320 --> 00:04:55.510
and I'm going to go ahead
and complete the

00:04:55.510 --> 00:04:58.630
verification flow.

00:04:58.630 --> 00:05:01.850
So as you can see in the
previous screen, I had to get

00:05:01.850 --> 00:05:02.900
a verification code.

00:05:02.900 --> 00:05:06.270
You can get that via a phone
call or a text message.

00:05:06.270 --> 00:05:08.810
I just got my verification
code, which

00:05:08.810 --> 00:05:11.510
I'm going to verify.

00:05:11.510 --> 00:05:15.780
And that brings me into the
Google Cloud Console.

00:05:15.780 --> 00:05:20.250
I'm going to agree to the
terms of service.

00:05:20.250 --> 00:05:24.320
And I'm going to create
a new Cloud Project.

00:05:24.320 --> 00:05:29.160
I'm going to call it Google
APIs Quickstart.

00:05:29.160 --> 00:05:34.170
By default, the Cloud Project
comes with a project ID.

00:05:34.170 --> 00:05:37.920
But you can also choose
something that you like.

00:05:37.920 --> 00:05:41.690
I'll try to see if I can get
something of my liking.

00:05:41.690 --> 00:05:44.960
So I'll try Google APIs
Quickstart, which already

00:05:44.960 --> 00:05:53.770
exists, so I'm going to say,
Google I/O 13 Quickstart.

00:05:53.770 --> 00:05:56.170
And that would be the
name of the project

00:05:56.170 --> 00:05:57.420
that we'll be using.

00:06:03.330 --> 00:06:07.740
So it's going to create a new
Cloud Project at this point.

00:06:07.740 --> 00:06:11.640
While we are doing that, let's
also download the App Engine

00:06:11.640 --> 00:06:15.510
SDK, which we'll be using
later in this session.

00:06:15.510 --> 00:06:18.250
You can download the
App Engine SDK from

00:06:18.250 --> 00:06:21.360
developers.googl
e.com/appengine/download.

00:06:21.360 --> 00:06:22.800
You can also find
the link in the

00:06:22.800 --> 00:06:24.420
presentation for this video.

00:06:27.800 --> 00:06:29.930
I'm using a MacBook.

00:06:29.930 --> 00:06:33.050
And it already has
Python installed.

00:06:33.050 --> 00:06:35.360
I am going to use Hands,
the App Engine SDK.

00:06:41.970 --> 00:06:45.920
In the meantime, the Cloud
Project has been created.

00:06:45.920 --> 00:06:48.680
The name of the project is
Google APIs Quickstart.

00:06:48.680 --> 00:06:52.630
And the project ID is Goog
I/O 13 Quickstart.

00:06:52.630 --> 00:06:57.510
The Google Cloud Project is the
home for a lot of other

00:06:57.510 --> 00:07:00.460
Google technologies like Google
Cloud Storage, Cloud

00:07:00.460 --> 00:07:05.160
SQL, Bit Query, which I would
encourage you to try after

00:07:05.160 --> 00:07:06.410
this session.

00:07:10.310 --> 00:07:14.260
Now my Google App Engine
SDK is downloaded.

00:07:14.260 --> 00:07:17.200
I am going to extract
the file.

00:07:21.260 --> 00:07:24.410
And I am going to move it to
my Applications folder.

00:07:34.930 --> 00:07:38.830
When you install the Google App
Engine Launcher, you also

00:07:38.830 --> 00:07:40.080
want to make sure--

00:07:43.250 --> 00:07:45.390
let me change my system
preferences.

00:08:03.120 --> 00:08:04.370
OK.

00:08:08.750 --> 00:08:11.520
When you use Google App Engine
Launcher, you also want to

00:08:11.520 --> 00:08:14.540
make sure that you create the
right symlinks so that you'll

00:08:14.540 --> 00:08:18.830
be able to use the SDK tool
from command line.

00:08:18.830 --> 00:08:22.370
So this is what it does the
first time it starts up.

00:08:26.410 --> 00:08:29.400
If you happen to miss the step,
you can always go back

00:08:29.400 --> 00:08:33.250
to Google App Engine Launcher
to make symlinks, and it'll

00:08:33.250 --> 00:08:34.995
create the links for you.

00:08:44.080 --> 00:08:45.330
OK.

00:08:47.170 --> 00:08:51.710
Now we can get started
with the next step.

00:08:51.710 --> 00:08:55.930
Google provides a set of client
libraries to make it

00:08:55.930 --> 00:08:59.500
easy for you to use APIs, though
most of the APIs are

00:08:59.500 --> 00:09:04.450
resource-oriented and you can
always write your libraries

00:09:04.450 --> 00:09:06.152
around the protocol.

00:09:06.152 --> 00:09:09.870
And we encourage people to use
the client libraries, because

00:09:09.870 --> 00:09:13.060
they are easier to use and they
also encompass a lot of

00:09:13.060 --> 00:09:14.830
functions that you will see.

00:09:14.830 --> 00:09:17.197
You can access the client
libraries at developers.googl

00:09:17.197 --> 00:09:27.430
e.com/api-client-library.

00:09:27.430 --> 00:09:30.730
As you can see, Google provides
libraries in very

00:09:30.730 --> 00:09:32.180
many languages.

00:09:32.180 --> 00:09:36.370
For today's session, we'll
be using Python.

00:09:36.370 --> 00:09:40.500
Google Client libraries make it
very easy to take care of a

00:09:40.500 --> 00:09:44.370
lot of your application tasks
like authentication batching,

00:09:44.370 --> 00:09:48.260
logging, et cetera, so that you
can focus more on writing

00:09:48.260 --> 00:09:52.590
the code for the API, as you
will see in the next sections.

00:09:52.590 --> 00:09:55.500
What we also provide, in
addition to the client

00:09:55.500 --> 00:09:58.960
library, is a way to get you
started quickly on your

00:09:58.960 --> 00:10:02.800
project with the Quickstart
widget.

00:10:02.800 --> 00:10:05.450
So in this case, as we
discussed, I'm going to be

00:10:05.450 --> 00:10:09.050
using the Google+ API.

00:10:09.050 --> 00:10:12.580
I'm going to be deploying
it on Google App Engine.

00:10:12.580 --> 00:10:14.610
And I'm going to configure
my Cloud

00:10:14.610 --> 00:10:18.810
Project with this project.

00:10:18.810 --> 00:10:23.000
So as you see, it's already
pre-populated with Google APIs

00:10:23.000 --> 00:10:25.290
Quickstart, which is the Cloud
Project we just created.

00:10:28.620 --> 00:10:32.230
Please make sure you read
the terms of service.

00:10:32.230 --> 00:10:35.215
This one is the terms of service
for the Google+ API.

00:10:40.470 --> 00:10:42.670
And it's going to finish
the widget.

00:10:42.670 --> 00:10:46.790
What you get at the end of
Quickstart is your starter

00:10:46.790 --> 00:10:50.720
application as well as the
client credentials

00:10:50.720 --> 00:10:52.250
that go with it.

00:10:52.250 --> 00:10:54.110
So I'm going to download
both of these.

00:11:00.550 --> 00:11:04.250
And as you can see, in my
Downloads folder I have the

00:11:04.250 --> 00:11:07.290
Client Secrets file as well
as the App Engine Project.

00:11:21.010 --> 00:11:26.270
So let's take a look at the
App Engine Project.

00:11:26.270 --> 00:11:29.715
The App Engine Project comes
with a default Client Secrets.

00:11:32.900 --> 00:11:34.810
And if you take a closer
look, the Client

00:11:34.810 --> 00:11:36.170
Secrets file is empty.

00:11:36.170 --> 00:11:39.050
It doesn't have the client
ID or the Client Secret.

00:11:39.050 --> 00:11:43.030
What you could do is, from the
developer's console, paste in

00:11:43.030 --> 00:11:45.420
the client ID and the
Client Secret.

00:11:45.420 --> 00:11:51.160
But the method I prefer to use
is to just drop the file into

00:11:51.160 --> 00:11:52.160
the folder.

00:11:52.160 --> 00:11:55.340
And now, to make it easy for
this session, I'm going to

00:11:55.340 --> 00:12:00.090
rename this folder to be called
My App Engine Project

00:12:00.090 --> 00:12:02.280
so that we can refer
to it more easily.

00:12:06.640 --> 00:12:07.890
OK.

00:12:09.540 --> 00:12:12.740
Now that I have the new Client
Secrets into the folder, let's

00:12:12.740 --> 00:12:16.190
go to the next step, which
is to run this Quickstart

00:12:16.190 --> 00:12:19.590
application locally.

00:12:19.590 --> 00:12:22.640
As you can see, we have
downloaded the App Engine SDK

00:12:22.640 --> 00:12:24.720
and we have created symlinks.

00:12:24.720 --> 00:12:27.810
And the App Engine SDK comes
with a lot of handy tools to

00:12:27.810 --> 00:12:29.180
run application.

00:12:29.180 --> 00:12:38.330
One of them is called the
Absorber that lets you run an

00:12:38.330 --> 00:12:42.140
App Engine application locally
on your machine.

00:12:42.140 --> 00:12:46.340
So I'm going to go to the
Downloads folder, and it has

00:12:46.340 --> 00:12:47.930
my App Engine Project.

00:12:47.930 --> 00:12:52.320
I am going to run dev
app server against

00:12:52.320 --> 00:12:53.570
my App Engine Project.

00:12:59.970 --> 00:13:04.910
And it's going to start up a
server that you can access on

00:13:04.910 --> 00:13:14.900
local host 8080.

00:13:14.900 --> 00:13:18.610
So this is your application
running locally.

00:13:18.610 --> 00:13:25.350
The first screen that you see
here is asking for the user

00:13:25.350 --> 00:13:27.230
authentication to
the application.

00:13:27.230 --> 00:13:31.030
Since this is a locally-running
application,

00:13:31.030 --> 00:13:32.720
it does not require
any log-in.

00:13:32.720 --> 00:13:35.680
So it's a test log-in screen.

00:13:35.680 --> 00:13:39.830
The next screen that you see
is the OAuth screen that we

00:13:39.830 --> 00:13:40.680
previously saw.

00:13:40.680 --> 00:13:46.040
But in this case, the service
account for the project is

00:13:46.040 --> 00:13:51.840
asking to authorize that
application to get the data

00:13:51.840 --> 00:13:54.280
for Prashant Labhane
for Google+ APIs.

00:13:54.280 --> 00:13:55.750
I'm going to say, Accept.

00:14:01.160 --> 00:14:03.260
And it's going to
take a while.

00:14:03.260 --> 00:14:06.550
And with that, we have a
locally-running application.

00:14:06.550 --> 00:14:08.820
As you can see, the application
doesn't do much

00:14:08.820 --> 00:14:11.130
but render HTML.

00:14:11.130 --> 00:14:13.960
It gives you handy links
on how to use the

00:14:13.960 --> 00:14:17.330
Google+ API in Python.

00:14:17.330 --> 00:14:21.540
With that, we have our
application running locally.

00:14:21.540 --> 00:14:25.650
Let's move to the next section,
where we'll do a

00:14:25.650 --> 00:14:28.140
deep-dive of the Quickstart
application

00:14:28.140 --> 00:14:29.970
code, what it does.

00:14:29.970 --> 00:14:32.710
And we'll do a bit of
application development later.

00:14:32.710 --> 00:14:38.590
So let's get into the deep-dive
of the code.

00:14:38.590 --> 00:14:43.060
As you can see, the
project is here.

00:14:43.060 --> 00:14:47.370
You can use an ID of any choice
to import this project.

00:14:47.370 --> 00:14:50.150
In my case, I'm going to just
use my text editor.

00:15:01.170 --> 00:15:04.230
So the main file that controls
your application in the

00:15:04.230 --> 00:15:06.200
Quickstart project is main.pi.

00:15:09.940 --> 00:15:12.870
And let's do a code walk-through
of what that

00:15:12.870 --> 00:15:15.200
application does.

00:15:15.200 --> 00:15:18.930
The first thing you would notice
that it imports the

00:15:18.930 --> 00:15:23.570
Client Secrets file that we
put in the same folder.

00:15:23.570 --> 00:15:26.720
It's creating a service
for your API.

00:15:26.720 --> 00:15:30.170
And this is the service that
you can use to invoke

00:15:30.170 --> 00:15:33.720
resources and methods upon.

00:15:33.720 --> 00:15:37.060
It creates an OAuth-decorated
blazed on the

00:15:37.060 --> 00:15:39.390
Client Secret file.

00:15:39.390 --> 00:15:45.640
And it has a main handler and
Get method, which is decorated

00:15:45.640 --> 00:15:47.470
with OAuth Required.

00:15:47.470 --> 00:15:53.340
The decoration OAuth Required
makes sure that the OAuth flow

00:15:53.340 --> 00:15:57.515
is called before the Get
method is called.

00:15:57.515 --> 00:16:00.090
Since this is a simple
application, we will be using

00:16:00.090 --> 00:16:01.350
OAuth Required.

00:16:01.350 --> 00:16:03.710
However, when you're developing
your complex

00:16:03.710 --> 00:16:06.870
application, you want to make
sure that the content screen

00:16:06.870 --> 00:16:11.110
shows up at the right time, in
which case I would encourage

00:16:11.110 --> 00:16:14.580
you to try OAuth Aware, which
lets the application take

00:16:14.580 --> 00:16:17.200
control of when the
OAuth credential

00:16:17.200 --> 00:16:20.310
gets checked and called.

00:16:20.310 --> 00:16:22.610
And as you can see, the
application is writing out a

00:16:22.610 --> 00:16:25.050
simple HTML.

00:16:25.050 --> 00:16:29.380
What you will also notice is
the application is a WSGI

00:16:29.380 --> 00:16:32.180
application, which comes
with Main Handler.

00:16:32.180 --> 00:16:35.580
But it also comes with the OAuth
2 callback handlers,

00:16:35.580 --> 00:16:39.780
which take care of OAuth flow
on behalf of you in the

00:16:39.780 --> 00:16:40.860
application.

00:16:40.860 --> 00:16:44.880
You can also register other
handlers as and when needed

00:16:44.880 --> 00:16:47.900
for this WSGI application.

00:16:47.900 --> 00:16:54.540
Now that we have a good sense of
what the Quickstart code is

00:16:54.540 --> 00:17:00.710
doing, we can now get started
with coding our application.

00:17:00.710 --> 00:17:05.550
So I already walked you through
the OAuth flow.

00:17:05.550 --> 00:17:08.599
And we did a code
walk-through.

00:17:08.599 --> 00:17:11.140
Let's get to the next section,
which is application

00:17:11.140 --> 00:17:12.760
development.

00:17:12.760 --> 00:17:15.690
What you can see is the
locally-running application

00:17:15.690 --> 00:17:20.240
gives you a handy link to
the Python Google+ API.

00:17:20.240 --> 00:17:23.550
So let's take a look.

00:17:23.550 --> 00:17:28.290
As you can see, the same
resources that we saw at the

00:17:28.290 --> 00:17:34.100
start of this session for APIs
Explorer are now exposed as

00:17:34.100 --> 00:17:36.610
Python methods that can
be called upon.

00:17:36.610 --> 00:17:38.640
So let's take a look
at Activities.

00:17:38.640 --> 00:17:42.040
And you can see the same methods
like Search and List

00:17:42.040 --> 00:17:44.670
can be called upon
in this API.

00:17:44.670 --> 00:17:47.090
So let's go ahead and
write some code.

00:17:49.870 --> 00:17:53.430
So what I'm going to do is I
mirrored the same activities

00:17:53.430 --> 00:17:57.640
that we did earlier with the
APIs Explorer in Python code.

00:17:57.640 --> 00:18:01.710
So I'm going to get Activities
results.

00:18:01.710 --> 00:18:05.260
I'm going to do it using
the service.

00:18:05.260 --> 00:18:07.890
And as you can see, the service
is created here for

00:18:07.890 --> 00:18:09.220
the Google+ API.

00:18:09.220 --> 00:18:12.940
If you're using a different API,
then you can invoke the

00:18:12.940 --> 00:18:15.880
methods relevant to that API.

00:18:15.880 --> 00:18:17.395
So I'm going to call
service.activities.

00:18:22.260 --> 00:18:24.430
And as you can see,
the Activities

00:18:24.430 --> 00:18:27.510
has a search method.

00:18:27.510 --> 00:18:35.800
So I'm going to call Search
using the query, Google.

00:18:35.800 --> 00:18:39.850
And now I'm going to execute
this command.

00:18:39.850 --> 00:18:45.720
Another thing to notice is for
executing any API call, you

00:18:45.720 --> 00:18:50.230
need to make sure you get an
authenticated HTTP object to

00:18:50.230 --> 00:18:52.680
carry that API call over.

00:18:52.680 --> 00:18:55.210
So in this case, it's
already decorated.

00:18:55.210 --> 00:19:00.730
I'm going to use the HTTP object
from the Decorator.

00:19:00.730 --> 00:19:04.520
So it's going to be
decorator.http, which is the

00:19:04.520 --> 00:19:06.170
authenticated HTTP connection.

00:19:08.940 --> 00:19:12.140
And the next thing I'm going
to do is I'm going to write

00:19:12.140 --> 00:19:17.263
out Activities Result
in the HTML.

00:19:21.740 --> 00:19:23.570
And remove all this code.

00:19:33.540 --> 00:19:34.980
OK.

00:19:34.980 --> 00:19:38.370
And now I'll make sure
I save the file,

00:19:38.370 --> 00:19:40.660
because that's important.

00:19:40.660 --> 00:19:43.880
One of the good things about
developing with dev app server

00:19:43.880 --> 00:19:48.030
is it automatically takes care
of any code changes you make.

00:19:48.030 --> 00:19:51.890
So you don't have to go and
kill your application and

00:19:51.890 --> 00:19:52.780
restart it.

00:19:52.780 --> 00:19:55.470
But you can keep you dev app
server running, keep

00:19:55.470 --> 00:19:56.640
developing.

00:19:56.640 --> 00:20:01.200
And you will be able to see the
changes without having to

00:20:01.200 --> 00:20:04.800
restart dev app server.

00:20:04.800 --> 00:20:08.220
So in this case, as you can see,
I modified my code and

00:20:08.220 --> 00:20:14.070
it's giving me a list of Python
objects relevant to the

00:20:14.070 --> 00:20:16.810
query, Google.

00:20:16.810 --> 00:20:21.080
What I'm also going to do next
is to get a list of activities

00:20:21.080 --> 00:20:22.940
for my user account.

00:20:22.940 --> 00:20:25.690
As you can recall, in APIs
Explorer we had to

00:20:25.690 --> 00:20:27.480
turn on OAuth 2.

00:20:27.480 --> 00:20:32.300
But this application is already
decorated with OAuth 2

00:20:32.300 --> 00:20:37.990
Required, which means you can
call the List method for the

00:20:37.990 --> 00:20:44.010
Activities in my account, and
the Decorator OAuth 2 Required

00:20:44.010 --> 00:20:46.980
will take care of running
OAuth 2 on your behalf.

00:20:46.980 --> 00:20:48.945
So I'm going to use List.

00:20:56.830 --> 00:21:04.410
User ID equals Me, and
Collection is public.

00:21:04.410 --> 00:21:08.370
And I'm going to execute it the
same way I executed the

00:21:08.370 --> 00:21:15.230
Search, using the Decorator's
authenticated HTTP object.

00:21:15.230 --> 00:21:19.840
If you ever find yourself not
knowing what the parameters

00:21:19.840 --> 00:21:24.250
are, you can always go to the
documentation for the API and

00:21:24.250 --> 00:21:28.620
check out what the query
parameters are.

00:21:28.620 --> 00:21:33.440
Now, again, as I said earlier,
when you change your code,

00:21:33.440 --> 00:21:35.820
just make sure you save your
file, and you'll be able to

00:21:35.820 --> 00:21:38.100
see the changes quickly.

00:21:38.100 --> 00:21:43.030
So this is the list of
activities that is shared by

00:21:43.030 --> 00:21:46.230
my user account.

00:21:46.230 --> 00:21:51.930
What you can also do in App
Engine Python is to use

00:21:51.930 --> 00:21:55.180
templates to render the
HTML in a nice way.

00:21:55.180 --> 00:21:58.450
As I said earlier, we'll be
creating links for the various

00:21:58.450 --> 00:21:59.700
sets of activities.

00:22:01.870 --> 00:22:06.630
The Quickstart application comes
with a built-in template

00:22:06.630 --> 00:22:09.950
that you can use to
render these.

00:22:09.950 --> 00:22:13.240
In Python 2.5, it does
Django templates.

00:22:13.240 --> 00:22:16.570
But if you are using Python
2.7, that would be

00:22:16.570 --> 00:22:17.820
[? Django. ?]

00:22:19.740 --> 00:22:22.870
So let's write a small
template file

00:22:22.870 --> 00:22:25.720
to render the results.

00:22:33.570 --> 00:22:36.085
So let's create an HTML file.

00:22:39.280 --> 00:22:41.920
And I'm going to write
a Django template.

00:22:44.860 --> 00:22:50.930
And I know that I'm going to
be getting items in this

00:22:50.930 --> 00:22:54.150
object, as you have seen
in the APIs Explorer.

00:22:54.150 --> 00:22:58.500
And also, you can inspect this
code, which tells you that

00:22:58.500 --> 00:23:03.150
it's a list of items and each
of the items has a URL and a

00:23:03.150 --> 00:23:05.230
title, which is relevant
to the activities.

00:23:05.230 --> 00:23:08.230
So this is what my template
is going to do.

00:23:18.470 --> 00:23:22.295
So I'm going to get the
link from Items URL.

00:23:29.310 --> 00:23:32.090
And I'm going to be getting
the item's title.

00:23:37.910 --> 00:23:40.105
And I'm going to put
some line breaks.

00:23:48.760 --> 00:24:02.310
And that is a very simple
template that I'm going to be

00:24:02.310 --> 00:24:03.560
calling activities.html.

00:24:07.730 --> 00:24:12.160
And now that I have the
template, I can go to my code.

00:24:12.160 --> 00:24:16.540
And I'm going to invoke the
template and render my

00:24:16.540 --> 00:24:20.844
Activities result object
using this template.

00:24:20.844 --> 00:24:23.155
So I'm first going to declare
the template path.

00:24:27.460 --> 00:24:30.800
And as you can see, the
activities.html file is in the

00:24:30.800 --> 00:24:33.910
same folder, so I'm going to be
using the directory name.

00:24:41.490 --> 00:24:42.875
And joining with
activities.html.

00:24:50.850 --> 00:24:59.200
And next up, I'm going to be
rendering the template path,

00:24:59.200 --> 00:25:02.790
which is the template that
it just wrote with

00:25:02.790 --> 00:25:04.040
the Activities result.

00:25:06.680 --> 00:25:10.200
If you are wondering where the
template model came from, you

00:25:10.200 --> 00:25:14.020
can see, as I told earlier,
the Quickstart application

00:25:14.020 --> 00:25:17.620
comes with the default
template.

00:25:17.620 --> 00:25:19.630
And with that, I'm going
to save my file.

00:25:24.030 --> 00:25:28.790
And as you can see, it now
renders a link to the

00:25:28.790 --> 00:25:31.870
activities that are shared
by my user account.

00:25:31.870 --> 00:25:35.460
And if you click on them, you
will go to the specific

00:25:35.460 --> 00:25:39.360
activity post that
is relevant.

00:25:39.360 --> 00:25:44.100
Now, with that, I am pretty
happy with my application.

00:25:44.100 --> 00:25:47.910
And I want to deploy
it to App Engine.

00:25:47.910 --> 00:25:52.640
So we can get started with the
next section, which is deploy

00:25:52.640 --> 00:25:54.240
to App Engine.

00:25:54.240 --> 00:25:58.390
Before we do that, let's
understand a little bit about

00:25:58.390 --> 00:25:59.920
client credentials.

00:25:59.920 --> 00:26:03.700
The client credential file,
which I downloaded earlier,

00:26:03.700 --> 00:26:09.180
client_secrets.json, was to run
the application locally.

00:26:09.180 --> 00:26:13.450
To deploy the application on App
Engine, we need to get the

00:26:13.450 --> 00:26:16.770
credentials for a web
application on App Engine.

00:26:16.770 --> 00:26:26.560
You can do that by visiting
developers.google.com/console.

00:26:26.560 --> 00:26:29.890
And go to API access.

00:26:29.890 --> 00:26:33.410
And just create a
new client ID.

00:26:33.410 --> 00:26:34.883
In this case, it's a
web application.

00:26:38.140 --> 00:26:43.110
The site name is your Cloud
Project ID name.

00:26:43.110 --> 00:26:48.400
And that is also the name of
your App Engine application.

00:26:48.400 --> 00:26:51.040
And it will be hosted
on appspot.com.

00:26:51.040 --> 00:27:00.220
So your site name would be
Goog I/O 13 Quickstart.

00:27:00.220 --> 00:27:03.360
I'm going to go to my Cloud
Project and check it again.

00:27:03.360 --> 00:27:05.060
It's Goog I/O 13 Quickstart.

00:27:05.060 --> 00:27:08.760
So the application
name is correct.

00:27:08.760 --> 00:27:11.046
And it's going to be hosted
on appspot.com.

00:27:14.340 --> 00:27:21.570
And like that, you create
a new client credential.

00:27:21.570 --> 00:27:24.390
What you also want to do is
once you've created this

00:27:24.390 --> 00:27:27.250
client credential, you want to
make sure that the application

00:27:27.250 --> 00:27:29.640
still continues to
run locally.

00:27:29.640 --> 00:27:37.210
To do that, you can edit your
settings and add Local Host to

00:27:37.210 --> 00:27:40.290
the redirect URIs, which make
sure that the application

00:27:40.290 --> 00:27:41.660
continues to run locally.

00:27:41.660 --> 00:27:45.320
However, when you are finally
deploying your application, I

00:27:45.320 --> 00:27:49.895
would recommend moving this
out so that it's safer.

00:27:52.900 --> 00:27:55.770
What I'm going to do, now that
I have created a client

00:27:55.770 --> 00:27:57.620
credential, I'm going
to download the

00:27:57.620 --> 00:27:58.870
Client Secrets JSON.

00:28:01.970 --> 00:28:03.700
And as you can see here,
I have a new

00:28:03.700 --> 00:28:04.700
Client Secrets file.

00:28:04.700 --> 00:28:10.840
So I'm going to remove the old
one and move the new Client

00:28:10.840 --> 00:28:12.090
Secrets into the project.

00:28:18.160 --> 00:28:22.660
The second thing that you want
to do is to configure your

00:28:22.660 --> 00:28:27.850
application on how the code
is deployed to App Engine.

00:28:27.850 --> 00:28:31.530
In Python, that's controlled
by a file called ab.yamal,

00:28:31.530 --> 00:28:34.850
which comes in your Quickstart
project.

00:28:34.850 --> 00:28:41.700
You want to enter your
application ID, which is Goog

00:28:41.700 --> 00:28:45.160
I/O 13 Quickstart in our case.

00:28:45.160 --> 00:28:49.760
What you also want to do is I
prefer to be secure and always

00:28:49.760 --> 00:28:53.120
use HTTPS for my applications.

00:28:53.120 --> 00:28:57.380
And you can do that using the
parameter Secure Always.

00:28:57.380 --> 00:29:01.260
If your Quickstart application
code doesn't come with Secure

00:29:01.260 --> 00:29:03.285
Always, I would recommend
you adding this.

00:29:06.890 --> 00:29:09.400
And I'm going to
save this file.

00:29:09.400 --> 00:29:12.360
And now we are ready
to deploy this

00:29:12.360 --> 00:29:15.440
application to App Engine.

00:29:15.440 --> 00:29:21.530
As I said earlier, I'm going to
stop my local application.

00:29:21.530 --> 00:29:26.810
The App Engine SDK comes with
a variety of handy tools.

00:29:26.810 --> 00:29:31.230
One such tool is AppConfig,
which lets you upload your

00:29:31.230 --> 00:29:34.050
application to App Engine.

00:29:34.050 --> 00:29:37.210
So I'm going to update, and
I'm going to give it the

00:29:37.210 --> 00:29:40.330
location of my App
Engine project.

00:29:44.950 --> 00:29:47.440
And the first time it runs, it's
going to ask you about

00:29:47.440 --> 00:29:51.540
the account with which you have
your Cloud Projects and

00:29:51.540 --> 00:29:52.340
things like that.

00:29:52.340 --> 00:29:55.623
So I'm just going to
enter my password.

00:30:06.650 --> 00:30:09.730
And with that, this
is the first run.

00:30:09.730 --> 00:30:13.960
It's going to take some time to
deploy the application that

00:30:13.960 --> 00:30:18.530
I just wrote locally
into App Engine.

00:30:18.530 --> 00:30:21.450
And it seems like
it's completed.

00:30:21.450 --> 00:30:24.060
So I'm going to go to
my browser and go to

00:30:24.060 --> 00:30:34.485
googio13quickstart.appspot.com.

00:30:34.485 --> 00:30:39.010
And it's going to ask
me to log in.

00:30:39.010 --> 00:30:43.790
So this is the part where the
user is authenticating to the

00:30:43.790 --> 00:30:45.040
App Engine application.

00:30:51.910 --> 00:30:55.450
This is the second screen, which
is the OAuth screen.

00:30:55.450 --> 00:30:58.280
Now, as you can see, this
is showing up again.

00:30:58.280 --> 00:31:01.440
This is because this time the
application is different.

00:31:01.440 --> 00:31:03.850
In the previous case, you were
running your application

00:31:03.850 --> 00:31:06.950
locally, and that's the
application you authorized.

00:31:06.950 --> 00:31:09.430
Now that you have deployed it
to App Engine, you want to

00:31:09.430 --> 00:31:13.130
authorize the App Engine
application and the

00:31:13.130 --> 00:31:16.200
authorization to access the
data for Prashant Labhane.

00:31:16.200 --> 00:31:19.270
I'm going to go and
accept that.

00:31:24.150 --> 00:31:26.920
And with that, you have the same
application that you just

00:31:26.920 --> 00:31:30.080
developed locally and deployed
onto App Engine.

00:31:30.080 --> 00:31:33.460
Now, with that, we come to
the end of this session.

00:31:33.460 --> 00:31:38.550
But I wanted to give you some
handy references and things

00:31:38.550 --> 00:31:41.760
that are happening
in Google APIs.

00:31:41.760 --> 00:31:45.710
If you are more interested, I
would definitely recommend you

00:31:45.710 --> 00:31:49.510
to check out Google Cloud
Endpoints, which enables third

00:31:49.510 --> 00:31:53.390
parties to host APIs
on Google.

00:31:53.390 --> 00:31:55.930
Now, this is a very
powerful concept.

00:31:55.930 --> 00:31:58.640
And we are trying to bring
the client libraries and

00:31:58.640 --> 00:32:01.480
authentication and all the good
stuff that you just saw

00:32:01.480 --> 00:32:05.160
in this session to third-party
APIs as well, so that as an

00:32:05.160 --> 00:32:08.920
application developer, you can
use Google APIs as well as you

00:32:08.920 --> 00:32:12.550
can use third-party APIs to
create really powerful

00:32:12.550 --> 00:32:14.980
applications on App Engine.

00:32:14.980 --> 00:32:18.890
If you are interested in the
Java version of this talk, I

00:32:18.890 --> 00:32:22.230
would recommend you watching
[INAUDIBLE]

00:32:22.230 --> 00:32:26.990
on getting started with Google
APIs in Java on App Engine.

00:32:26.990 --> 00:32:30.640
And I would also recommend you
to going to some of the

00:32:30.640 --> 00:32:34.150
reference, more specifically
developers.google.com and

00:32:34.150 --> 00:32:37.930
cloud.google.com to check out
all the different technologies

00:32:37.930 --> 00:32:40.300
that are offered in
Google Cloud.

00:32:40.300 --> 00:32:43.090
With that, we come to the
end of this session.

00:32:43.090 --> 00:32:45.710
Thanks for watching, and have
a good time coding.

