WEBVTT
Kind: captions
Language: en

00:00:09.650 --> 00:00:12.490
If you're a web developer,
you've almost certainly

00:00:12.490 --> 00:00:15.460
used XMLHttpRequest.

00:00:15.460 --> 00:00:19.700
But without a library wrapping
XHR, it's a pain in the butt.

00:00:19.700 --> 00:00:21.820
It requires a bunch
of setup, needs

00:00:21.820 --> 00:00:25.980
calls to both open and send,
and worst of all, the name.

00:00:25.980 --> 00:00:28.430
Why does it even
have XML in the name?

00:00:28.430 --> 00:00:32.119
Chances are, you didn't
use it to transfer XML.

00:00:32.119 --> 00:00:35.830
So now we have a new
modern design API

00:00:35.830 --> 00:00:38.240
for network requests, Fetch.

00:00:38.240 --> 00:00:41.810
[BALL  BOUNCING]

00:00:41.810 --> 00:00:44.930
The new Fetch API
makes this much easier

00:00:44.930 --> 00:00:48.240
with a simple, cleaner
API that separates

00:00:48.240 --> 00:00:50.860
the request from the
response and uses

00:00:50.860 --> 00:00:54.430
Promises to avoid the
hassles of callbacks.

00:00:54.430 --> 00:00:57.420
So let's go Fetch some data.

00:00:57.420 --> 00:01:00.500
The Fetch API is
pretty easy to use.

00:01:00.500 --> 00:01:04.220
Simply call Fetch and provide
the URL that you want to Fetch

00:01:04.220 --> 00:01:09.020
and optionally any parameters
that you need to provide.

00:01:09.020 --> 00:01:12.600
Fetch then returns a Promise
with the response object

00:01:12.600 --> 00:01:15.540
that contains details
about the response,

00:01:15.540 --> 00:01:19.560
such as the status code,
headers, and other metadata.

00:01:19.560 --> 00:01:22.790
Plus, it provides access
to the response stream

00:01:22.790 --> 00:01:26.420
with an understanding of
what type of data it is.

00:01:26.420 --> 00:01:29.170
For example, since
my data is JSON,

00:01:29.170 --> 00:01:32.295
I'll ask for response.json,
which returns

00:01:32.295 --> 00:01:35.800
a Promise to get that data.

00:01:35.800 --> 00:01:38.200
If you haven't guessed
by now, Promises

00:01:38.200 --> 00:01:41.400
are integral to the
way that Fetch works.

00:01:41.400 --> 00:01:43.630
If you're unfamiliar
with Promises,

00:01:43.630 --> 00:01:47.370
check out this post
on HTML5 Rocks.

00:01:47.370 --> 00:01:50.200
One of the neat things that
you can do with Promises

00:01:50.200 --> 00:01:51.850
is to chain them.

00:01:51.850 --> 00:01:54.810
For Fetch, this means
that you can share logic

00:01:54.810 --> 00:01:57.410
across different Fetch requests.

00:01:57.410 --> 00:02:00.260
Instead of checking the
status of a response

00:02:00.260 --> 00:02:04.550
with an inline function, I'll
create a separate function

00:02:04.550 --> 00:02:08.500
that checks the status
code and returns a Promise.

00:02:08.500 --> 00:02:11.560
I'll do the same thing
to get the JSON object

00:02:11.560 --> 00:02:13.750
from the response stream.

00:02:13.750 --> 00:02:17.770
Now, I can simplify the
Fetch request quite a bit.

00:02:17.770 --> 00:02:21.130
I'll make the Fetch,
check the status code

00:02:21.130 --> 00:02:25.130
to make sure I got a
200 OK, get the JSON,

00:02:25.130 --> 00:02:28.760
and then handle the
result. If anything

00:02:28.760 --> 00:02:32.000
goes wrong along the way, I
can catch the error and deal

00:02:32.000 --> 00:02:33.560
with it.

00:02:33.560 --> 00:02:36.420
In addition to the
request URL, you can also

00:02:36.420 --> 00:02:39.200
pass Fetch a set of options.

00:02:39.200 --> 00:02:42.870
With the options object,
I can set the method used,

00:02:42.870 --> 00:02:46.800
add HTTP headers, set
the body of the request,

00:02:46.800 --> 00:02:51.030
add credentials, even control
how cross-domain requests are

00:02:51.030 --> 00:02:52.250
handled.

00:02:52.250 --> 00:02:55.990
For example, to use Fetch to
post the results of some user

00:02:55.990 --> 00:02:58.530
input along with
an OAuth token, I

00:02:58.530 --> 00:03:01.960
would use "method" colon
"post," "headers" colon

00:03:01.960 --> 00:03:05.140
"Authorization," followed
by some ugly string,

00:03:05.140 --> 00:03:09.540
and "body" colon the
data that I want to post.

00:03:09.540 --> 00:03:12.150
Making cross-domain
requests with Fetch

00:03:12.150 --> 00:03:16.370
uses the same policies
as XMLHttpRequest,

00:03:16.370 --> 00:03:18.780
verifying that the
correct CORS headers are

00:03:18.780 --> 00:03:21.700
present before
returning the Promise.

00:03:21.700 --> 00:03:25.050
It sets the response
dot type to CORS,

00:03:25.050 --> 00:03:28.940
indicating it was a successful
cross-domain request.

00:03:28.940 --> 00:03:31.300
But if the correct
headers aren't set,

00:03:31.300 --> 00:03:32.800
then the Fetch
will fail, and you

00:03:32.800 --> 00:03:34.890
won't be able to
access the status

00:03:34.890 --> 00:03:37.410
or read the data returned.

00:03:37.410 --> 00:03:39.640
I can also tell the
browser specifically

00:03:39.640 --> 00:03:43.120
how I want it to handle
cross-domain requests with one

00:03:43.120 --> 00:03:45.980
of four mode options.

00:03:45.980 --> 00:03:49.100
I can set mode colon
same-origin to ensure

00:03:49.100 --> 00:03:52.860
that only requests made to
the same origin are possible.

00:03:52.860 --> 00:03:55.730
Anything else is rejected.

00:03:55.730 --> 00:03:59.290
I can set mode colon
cors to allow requests

00:03:59.290 --> 00:04:03.610
for assets on the same origin
and on other origins, which

00:04:03.610 --> 00:04:06.820
return the appropriate headers.

00:04:06.820 --> 00:04:10.930
I can force preflight checks
to always occur with mode colon

00:04:10.930 --> 00:04:12.055
cors-with-forced-preflight.

00:04:14.600 --> 00:04:19.970
But there's also a mode no-cors
to get data from a server that

00:04:19.970 --> 00:04:21.950
doesn't support CORS.

00:04:21.950 --> 00:04:24.850
But this results in
an opaque response.

00:04:24.850 --> 00:04:27.550
You won't be able to
read the data returned

00:04:27.550 --> 00:04:30.930
or view the status
of the request.

00:04:30.930 --> 00:04:32.210
This might seem odd.

00:04:32.210 --> 00:04:34.980
But when caching results
in a service worker,

00:04:34.980 --> 00:04:38.110
this is a very helpful feature.

00:04:38.110 --> 00:04:39.320
There you go.

00:04:39.320 --> 00:04:41.930
Fetch is pretty easy to use.

00:04:41.930 --> 00:04:43.570
There are still a
few gotchas, though,

00:04:43.570 --> 00:04:45.480
that you need to be aware of.

00:04:45.480 --> 00:04:48.710
Like all new features, it's
not available everywhere yet,

00:04:48.710 --> 00:04:50.870
but support is growing quickly.

00:04:50.870 --> 00:04:54.080
So be sure to use feature
detection to see if it's there.

00:04:54.080 --> 00:04:56.840
If not, you can
use the polyfill.

00:04:56.840 --> 00:05:00.900
The other big gotcha is that you
can't cancel a Fetch request.

00:05:00.900 --> 00:05:03.030
But it is in the spec,
so it should land

00:05:03.030 --> 00:05:05.040
at some point in the future.

00:05:05.040 --> 00:05:09.941
So go give Fetch a shot, and
save yourself a few callbacks.

00:05:09.941 --> 00:05:14.879
[MUSIC PLAYING]

