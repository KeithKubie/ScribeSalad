WEBVTT
Kind: captions
Language: en

00:00:00.400 --> 00:00:03.990
So far, we've learned to declare
optionals using question marks and

00:00:03.990 --> 00:00:07.550
we've focused on safe ways to unwrap
optionals using question marks and

00:00:07.550 --> 00:00:08.920
if let statements.

00:00:08.920 --> 00:00:10.790
Now it's time to get
a little reckless and

00:00:10.790 --> 00:00:13.000
start working with exclamation points.

00:00:13.000 --> 00:00:16.369
Unwrapping optionals with explanation
requires a lot more confidence in

00:00:16.369 --> 00:00:16.918
your code.

00:00:16.918 --> 00:00:23.260
If you try to unwrap a nil value
with an exclamation point, yikes.

00:00:23.260 --> 00:00:27.190
To unwrap an optional in this care
free manner place an exclamation point

00:00:27.190 --> 00:00:31.690
after the variable, but
if the value inside is nil it explodes.

00:00:31.690 --> 00:00:35.380
Okay, nothing explodes but
it does throw a fatal error.

00:00:35.380 --> 00:00:38.460
There's no safe way to unwrap
with an exclamation point.

00:00:38.460 --> 00:00:40.950
When you choose to unwrap
with an exclamation point,

00:00:40.950 --> 00:00:45.120
you're saying that you want the program
to crash if the value inside is null.

00:00:45.120 --> 00:00:48.470
It communicates to your code readers
that you're confident there will not

00:00:48.470 --> 00:00:50.690
be a null value in the optional.

00:00:50.690 --> 00:00:53.980
You can also declare optionals
with an exclamation point

00:00:53.980 --> 00:00:56.220
much the way we did with question marks.

00:00:56.220 --> 00:00:58.170
But this optional is different.

00:00:58.170 --> 00:01:00.230
It's implicitly unwrapped.

00:01:00.230 --> 00:01:03.210
That means that when this
obstacle is used in an expression

00:01:03.210 --> 00:01:05.310
it will automatically unwrap.

00:01:05.310 --> 00:01:10.010
It is an optional so it can store a
value or nil but it's as if it's a very

00:01:10.010 --> 00:01:14.120
fragile wrapped package that immediately
falls open when it's picked up.

00:01:14.120 --> 00:01:17.740
Because we don't unwrap it carefully
if there's a nil value inside

00:01:17.740 --> 00:01:19.100
bad things can happen.

00:01:19.100 --> 00:01:20.760
A fatal error can be thrown.

00:01:20.760 --> 00:01:23.930
So in what scenarios would
it be appropriate to

00:01:23.930 --> 00:01:26.380
use such a volatile optional?

00:01:26.380 --> 00:01:27.670
Let's look at a couple examples.

