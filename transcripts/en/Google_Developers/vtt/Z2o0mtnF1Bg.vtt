WEBVTT
Kind: captions
Language: en

00:00:03.370 --> 00:00:05.570
KATHRYN HURLEY: Hey everyone.

00:00:05.570 --> 00:00:07.240
Welcome to I/O.

00:00:07.240 --> 00:00:09.420
I'm so excited to be here.

00:00:09.420 --> 00:00:11.930
I hope you are too.

00:00:11.930 --> 00:00:13.180
My name's Kathryn Hurley.

00:00:13.180 --> 00:00:15.710
I'm a developer programs
engineer at Google.

00:00:15.710 --> 00:00:18.220
Specifically, I work
on Fusion Tables.

00:00:18.220 --> 00:00:22.150
And I'm here today along with
James McGill, an engineer on

00:00:22.150 --> 00:00:27.400
the Maps API team, and Simon
Rogers, from the UK

00:00:27.400 --> 00:00:28.600
Guardian data blog.

00:00:28.600 --> 00:00:31.170
And today we're going to be
talking to you about to how to

00:00:31.170 --> 00:00:36.740
use Fusion Tables to manage and
visualize geospatial data.

00:00:36.740 --> 00:00:38.810
So this is the agenda
for the talk.

00:00:38.810 --> 00:00:42.480
I'm going to give you an
introduction to Fusion Tables.

00:00:42.480 --> 00:00:44.330
Then I'll run through
a quick demo of how

00:00:44.330 --> 00:00:45.615
to use Fusion tables.

00:00:45.615 --> 00:00:47.880
Then I'll talk to you about
how you can build an

00:00:47.880 --> 00:00:51.250
application using the
Fusion Tables API.

00:00:51.250 --> 00:00:55.010
Then James is going to talk
about Google Maps API and how

00:00:55.010 --> 00:00:58.990
you can you Google Maps API to
display your Fusion Table data

00:00:58.990 --> 00:01:00.340
on a Google Map.

00:01:00.340 --> 00:01:03.130
And finally, Simon Rogers is
going to show you some

00:01:03.130 --> 00:01:07.770
real-world examples of how the
Guardian is using Fusion

00:01:07.770 --> 00:01:09.960
Tables to display their
data on Google Maps.

00:01:09.960 --> 00:01:12.310
And we're really excited to see
how journalists are using

00:01:12.310 --> 00:01:14.580
Fusion Tables.

00:01:14.580 --> 00:01:18.000
All right, so intro
to Fusion Tables.

00:01:18.000 --> 00:01:21.106
When people ask me what is
Google Fusion Tables, I like

00:01:21.106 --> 00:01:24.440
to say that it's a database in
the cloud that you can use to

00:01:24.440 --> 00:01:29.190
store, host, collaborate on,
and visualize your data.

00:01:29.190 --> 00:01:32.400
Here's a nice example of a
visualization that you can

00:01:32.400 --> 00:01:33.870
create using Fusion Tables.

00:01:33.870 --> 00:01:34.890
This is a map.

00:01:34.890 --> 00:01:38.390
And this map was actually
created by Simon Rogers.

00:01:38.390 --> 00:01:41.430
It's showing deprivation
in England.

00:01:41.430 --> 00:01:45.480
You can see he did some
nice styling of the

00:01:45.480 --> 00:01:46.350
polygons on the map.

00:01:46.350 --> 00:01:49.953
You can also see that the info
windows were customized and

00:01:49.953 --> 00:01:54.110
this was all built using
Fusion Tables.

00:01:54.110 --> 00:01:56.940
All right, here's another
example of a visualization you

00:01:56.940 --> 00:01:59.370
can create using
Fusion Tables.

00:01:59.370 --> 00:02:02.010
This is a bar chart created
using the Google

00:02:02.010 --> 00:02:04.580
Visualization API.

00:02:04.580 --> 00:02:06.340
Fusion Tables acts as
a data source in the

00:02:06.340 --> 00:02:08.090
Visualization API.

00:02:08.090 --> 00:02:11.310
I'm not going to go into too
much detail here about how to

00:02:11.310 --> 00:02:14.100
use the Visualization API, but
I encourage you go to the

00:02:14.100 --> 00:02:18.270
session "Using Chart Tools to
Create Interactive Dashboards"

00:02:18.270 --> 00:02:21.130
that's occurring right after
this one in room one.

00:02:21.130 --> 00:02:26.000
And you can learn more about the
Visualization API there.

00:02:26.000 --> 00:02:28.895
So now I just want to actually
jump into a quick demo of how

00:02:28.895 --> 00:02:30.250
to use Fusion Tables.

00:02:30.250 --> 00:02:33.070
I can show you a lot of screen
shots of what the product

00:02:33.070 --> 00:02:35.790
looks like, but I think it's
more interesting if I actually

00:02:35.790 --> 00:02:38.730
show you a real-life demo
of the product.

00:02:38.730 --> 00:02:41.930
And there's also some really
cool things that you can do in

00:02:41.930 --> 00:02:45.220
the Fusion Tables web
application that I just wanted

00:02:45.220 --> 00:02:46.590
to show you how to do.

00:02:46.590 --> 00:02:50.160
And so, for example, you can
merge two tables together in

00:02:50.160 --> 00:02:52.190
the Fusion Tables
web application.

00:02:52.190 --> 00:02:55.230
Merging is basically a left out
or join if you're familiar

00:02:55.230 --> 00:02:56.320
with databases.

00:02:56.320 --> 00:02:59.680
You can also manage the
permissions and visibility of

00:02:59.680 --> 00:03:02.670
the tables that you own in
Fusion Tables using the web

00:03:02.670 --> 00:03:03.600
application.

00:03:03.600 --> 00:03:07.015
And you can also create a map
and customize that map with

00:03:07.015 --> 00:03:10.126
custom info windows
and map styles.

00:03:10.126 --> 00:03:12.550
So I'm just going to get out of
full-screen mode right now

00:03:12.550 --> 00:03:14.910
and go to Fusion Tables.

00:03:14.910 --> 00:03:17.260
And this is probably a little
bit small, so I'm going to

00:03:17.260 --> 00:03:19.070
increase outside here.

00:03:19.070 --> 00:03:22.590
All right, so I go to
google.com/Fusiontables, I've

00:03:22.590 --> 00:03:26.240
signed in with my gmail account,
and I'll see a list

00:03:26.240 --> 00:03:27.810
of the tables that I own.

00:03:27.810 --> 00:03:30.610
I'm going to work with these
two tables down here at the

00:03:30.610 --> 00:03:34.325
bottom: Ecoregion Boundaries
and Ecoregion Attributes.

00:03:34.325 --> 00:03:38.760
So let's look at the Ecoregion
Boundaries table.

00:03:38.760 --> 00:03:42.830
So this table contains the
boundaries of various

00:03:42.830 --> 00:03:43.790
ecoregions around the world.

00:03:43.790 --> 00:03:47.950
Ecoregions are basically areas
that have the same climate and

00:03:47.950 --> 00:03:51.000
plant and animal species
within them.

00:03:51.000 --> 00:03:54.280
So we got this data from
The Nature Conservancy.

00:03:54.280 --> 00:03:55.980
They were very nice and
shared this data

00:03:55.980 --> 00:03:57.550
with us for this demo.

00:03:57.550 --> 00:04:01.150
The Nature Conservancy is
concerned with preserving

00:04:01.150 --> 00:04:04.260
Earth's natural resources, so
they have a lot of data about

00:04:04.260 --> 00:04:06.160
the ecoregions around
the world.

00:04:06.160 --> 00:04:11.360
And this table was created from
a KML file that they had

00:04:11.360 --> 00:04:13.090
containing all the ecoregion
boundaries

00:04:13.090 --> 00:04:13.860
throughout the world.

00:04:13.860 --> 00:04:17.519
And this is just a subset of
that data, it's the ecoregions

00:04:17.519 --> 00:04:18.680
in Australia.

00:04:18.680 --> 00:04:21.339
So let's take a look and
see what this table

00:04:21.339 --> 00:04:22.675
looks like on a map.

00:04:22.675 --> 00:04:26.430
So Fusion Tables maps all the
polygons that were in that KML

00:04:26.430 --> 00:04:28.860
file and places it on
it a Google Map.

00:04:28.860 --> 00:04:32.150
When you click on one of these
features, you can see what's

00:04:32.150 --> 00:04:33.770
displayed in the info window.

00:04:33.770 --> 00:04:37.020
You can see that the data from
the table is displayed in the

00:04:37.020 --> 00:04:40.050
info window.

00:04:40.050 --> 00:04:43.130
OK, let me go over to the other
table that I have the

00:04:43.130 --> 00:04:44.450
ecoregion attributes.

00:04:44.450 --> 00:04:47.990
Now this data was also donated
to us from The Nature

00:04:47.990 --> 00:04:49.080
Conservancy.

00:04:49.080 --> 00:04:50.980
And the cool thing about The
Nature Conservancy is that

00:04:50.980 --> 00:04:54.150
they work with a lot of
different organizations.

00:04:54.150 --> 00:04:56.520
So, for example, they work
with the World Wildlife

00:04:56.520 --> 00:04:57.490
Foundation.

00:04:57.490 --> 00:05:02.050
And all these organizations have
specific data about the

00:05:02.050 --> 00:05:03.360
ecoregions around the world.

00:05:03.360 --> 00:05:06.260
So, for example, The Nature
Conservancy has information

00:05:06.260 --> 00:05:09.980
about the percent forest area
in ecoregions, and the World

00:05:09.980 --> 00:05:13.180
Wildlife Foundation has
information about maybe the

00:05:13.180 --> 00:05:16.420
number of lizards and snakes in
each of these ecoregions.

00:05:16.420 --> 00:05:19.470
So Fusion Tables allow a lot of
these organizations to work

00:05:19.470 --> 00:05:21.380
together to collaborate
on this data.

00:05:21.380 --> 00:05:24.580
So The Nature Conservancy can
upload their own table with

00:05:24.580 --> 00:05:30.060
their own data so that the WWF
can upload their table and

00:05:30.060 --> 00:05:31.610
have their own data up
in Fusion Tables.

00:05:31.610 --> 00:05:35.230
And then they can merge these
tables together to create one

00:05:35.230 --> 00:05:37.710
huge Table or merge Table.

00:05:37.710 --> 00:05:40.410
So I'm going to show you
how to merge two tables

00:05:40.410 --> 00:05:41.380
together right now.

00:05:41.380 --> 00:05:44.160
I'm going to merge the attribute
table with the

00:05:44.160 --> 00:05:45.970
boundary table.

00:05:45.970 --> 00:05:49.510
So I just copied the URL from
the attribute table.

00:05:49.510 --> 00:05:53.710
I'll go back to the boundary
table and select Merge.

00:05:53.710 --> 00:05:56.860
I'll paste in the URL from the
other Table, click that.

00:05:56.860 --> 00:05:59.060
Now at this point I want to
select the two columns that

00:05:59.060 --> 00:06:00.670
have the same values in it.

00:06:00.670 --> 00:06:04.530
So this is similar to keys and
databases, both columns have

00:06:04.530 --> 00:06:05.470
to have the same value.

00:06:05.470 --> 00:06:08.690
And the two columns in my
table are the object ID

00:06:08.690 --> 00:06:12.990
column, so I'll select both of
those, and I'll called this

00:06:12.990 --> 00:06:16.970
new merged table that I'm
creating Ecoregions Merged.

00:06:16.970 --> 00:06:21.150
When I'm done here, I click
Merge Tables, and Fusion

00:06:21.150 --> 00:06:24.810
Tables will work and it creates
this new merged table.

00:06:24.810 --> 00:06:27.550
And you can see that the data
from both tables are in this

00:06:27.550 --> 00:06:29.400
merged table.

00:06:29.400 --> 00:06:33.550
So I'll scroll over so you can
see more columns here.

00:06:33.550 --> 00:06:37.280
And the nice thing about this
merged table is that if any of

00:06:37.280 --> 00:06:40.450
the data in the base tables that
were used to create the

00:06:40.450 --> 00:06:42.820
merged table are updated, then
those updates are immediately

00:06:42.820 --> 00:06:44.600
reflected in the merged table.

00:06:44.600 --> 00:06:48.940
So let's say that the WWF finds
a new lizard species,

00:06:48.940 --> 00:06:52.380
they can go ahead and update
that data in their table and

00:06:52.380 --> 00:06:55.870
it'll be reflected in
this merged table.

00:06:55.870 --> 00:06:58.436
Now let's see what this
looks like on the map.

00:06:58.436 --> 00:07:01.710
Select visualized map and
occasionally might see a

00:07:01.710 --> 00:07:02.410
loading message.

00:07:02.410 --> 00:07:05.990
It takes a little bit of time
for the data to load.

00:07:05.990 --> 00:07:08.410
I'll just refresh the
page and let's see

00:07:08.410 --> 00:07:11.190
that on the map again.

00:07:11.190 --> 00:07:14.680
And there you can see our nice
boundaries on the map.

00:07:14.680 --> 00:07:18.500
And I'll click on one of these
polygons so you can see the

00:07:18.500 --> 00:07:21.120
information that's being
displayed in the info window

00:07:21.120 --> 00:07:23.730
and you can see it displaying
all the information from my

00:07:23.730 --> 00:07:26.120
table in this info window.

00:07:26.120 --> 00:07:28.950
But maybe I don't want to show
all this information.

00:07:28.950 --> 00:07:32.800
Maybe I just want to show the
name of the ecoregion and the

00:07:32.800 --> 00:07:36.240
forest area, so I'm going to
update the contents of the

00:07:36.240 --> 00:07:38.710
info to just show the
information that I want.

00:07:38.710 --> 00:07:41.970
In order to do that, I can click
Configure Info Window

00:07:41.970 --> 00:07:46.080
and I can select and deselect
which columns I want displayed

00:07:46.080 --> 00:07:47.260
in the Info window.

00:07:47.260 --> 00:07:51.620
Or I can also go to Custom
and edit the HTML.

00:07:51.620 --> 00:07:53.710
So I can really customize
the contents of the

00:07:53.710 --> 00:07:55.490
Info window even more.

00:07:55.490 --> 00:08:00.890
So I'm going to delete that
label, maybe give this nice

00:08:00.890 --> 00:08:08.540
color blue, and add the
closing tag here.

00:08:08.540 --> 00:08:13.210
And save. And let's see what
happened to our info.

00:08:13.210 --> 00:08:17.020
There you can see now the name
of the ecoregion is bold and

00:08:17.020 --> 00:08:20.940
blue and shows just the percent
forest area in the

00:08:20.940 --> 00:08:21.940
Info window.

00:08:21.940 --> 00:08:24.800
So an all-red map maybe
not that useful.

00:08:24.800 --> 00:08:27.350
Let's actually change the
styles of these features

00:08:27.350 --> 00:08:30.220
according to the information
that's showing in my Info

00:08:30.220 --> 00:08:32.789
window, basically the
percent forest area.

00:08:32.789 --> 00:08:34.720
So in order to do that,
I can configure the

00:08:34.720 --> 00:08:35.799
styles for the table.

00:08:35.799 --> 00:08:37.779
And you can see there are
several options for changing

00:08:37.779 --> 00:08:39.694
the style of the features
on the map.

00:08:39.694 --> 00:08:42.150
If you have points, you can
change the marker icon.

00:08:42.150 --> 00:08:43.795
Or you can change the
fill color of the

00:08:43.795 --> 00:08:45.070
polygons, et cetera.

00:08:45.070 --> 00:08:47.410
Since my data is polygons,
I'm going to

00:08:47.410 --> 00:08:49.320
change the fill color.

00:08:49.320 --> 00:08:51.550
And again, you can see there's
several options for changing

00:08:51.550 --> 00:08:53.420
the fill color of
the polygons.

00:08:53.420 --> 00:08:56.440
I'm going to go ahead and
select a gradient.

00:08:56.440 --> 00:08:59.410
I'm going to show a gradient
on percent forest area--

00:08:59.410 --> 00:09:02.560
that's the data I'm showing
in my Info window.

00:09:02.560 --> 00:09:05.350
And I can customize the colors
of the gradient.

00:09:05.350 --> 00:09:08.820
I'll make it a nice
teal color.

00:09:08.820 --> 00:09:15.130
And I'll set the min and max for
the range of the data in

00:09:15.130 --> 00:09:16.720
the Percent Forest
Area column.

00:09:16.720 --> 00:09:20.450
I'll click Save. And you can
see our map is immediately

00:09:20.450 --> 00:09:22.490
updated with the new styles.

00:09:22.490 --> 00:09:25.420
And I'll click on one of these
regions and you can see that

00:09:25.420 --> 00:09:28.240
the Info window content
is the same.

00:09:28.240 --> 00:09:30.000
All right, this is
really awesome.

00:09:30.000 --> 00:09:33.930
And at this point, I'll show
you how to share the table

00:09:33.930 --> 00:09:35.800
with others, because after
you've put all this hard work

00:09:35.800 --> 00:09:37.180
into your map, you probably
want to share

00:09:37.180 --> 00:09:38.320
it with other people.

00:09:38.320 --> 00:09:41.920
So these permissions are
similar to Google Docs

00:09:41.920 --> 00:09:42.970
permissions.

00:09:42.970 --> 00:09:47.640
You can invite specific people
to view or edit the table, or

00:09:47.640 --> 00:09:50.330
you can set the visibility of
the entire table to public,

00:09:50.330 --> 00:09:51.480
unlisted, or private.

00:09:51.480 --> 00:09:54.940
I will set this as unlisted
so people that have the

00:09:54.940 --> 00:09:56.980
link can view it.

00:09:56.980 --> 00:09:58.830
And at this point,
I could be done.

00:09:58.830 --> 00:10:01.270
I could click Get an
Embeddable Link.

00:10:01.270 --> 00:10:04.540
I grab this HTML, I'll copy it,
paste it in my own HTML

00:10:04.540 --> 00:10:08.090
page, and I'll have this map
directly in my website.

00:10:08.090 --> 00:10:11.660
So it's how I styled it in
Fusion Tables, how I set the

00:10:11.660 --> 00:10:14.405
Info window contents, that'll
be available in my website.

00:10:14.405 --> 00:10:19.695
So you can do a lot of cool
things in the UI.

00:10:19.695 --> 00:10:21.390
All right, go back.

00:10:21.390 --> 00:10:23.820
So I showed you how to merge two
tables, I showed you how

00:10:23.820 --> 00:10:26.830
to manage the permissions and
the ability of the table, I

00:10:26.830 --> 00:10:30.590
showed you how to create a map
and customize that map.

00:10:30.590 --> 00:10:33.320
Now how might you build
an application

00:10:33.320 --> 00:10:35.870
using Fusion Tables?

00:10:35.870 --> 00:10:36.970
Here are a couple
of application

00:10:36.970 --> 00:10:38.560
ideas I came up with.

00:10:38.560 --> 00:10:41.560
Some of these are actually being
developed right now.

00:10:41.560 --> 00:10:44.945
One developer is mapping out
newspapers around the world.

00:10:44.945 --> 00:10:46.820
It's a really cool
application.

00:10:46.820 --> 00:10:49.560
He's styling the markers
according to the language of

00:10:49.560 --> 00:10:50.670
the newspaper.

00:10:50.670 --> 00:10:53.670
He's updated the contents of
the Info windows to provide

00:10:53.670 --> 00:10:56.810
links to the online content
for these newspapers in

00:10:56.810 --> 00:10:59.010
various translations
so you can read it

00:10:59.010 --> 00:11:01.130
in English or Spanish.

00:11:01.130 --> 00:11:04.910
And he's allowing his users to
search for newspapers around

00:11:04.910 --> 00:11:06.650
their area.

00:11:06.650 --> 00:11:09.860
Another cool application I've
heard of Fusion Tables is a

00:11:09.860 --> 00:11:13.450
popular game manufacturer was
interested in finding out

00:11:13.450 --> 00:11:15.900
which servers their users
were connecting to.

00:11:15.900 --> 00:11:18.250
And using Fusion Tables,
they were easily

00:11:18.250 --> 00:11:19.350
able to map this out.

00:11:19.350 --> 00:11:22.250
And they were surprised to find
that a lot of their users

00:11:22.250 --> 00:11:23.980
in North America
were connecting

00:11:23.980 --> 00:11:25.360
to servers in Europe.

00:11:25.360 --> 00:11:28.640
And they really wanted those
users to connect to servers in

00:11:28.640 --> 00:11:29.550
North America.

00:11:29.550 --> 00:11:31.720
And they were easily able
to figure that out

00:11:31.720 --> 00:11:33.660
using Fusion Tables.

00:11:33.660 --> 00:11:36.820
So they uploaded the data and
they could immediately map it

00:11:36.820 --> 00:11:38.900
out on a map.

00:11:38.900 --> 00:11:42.300
So let's just go through a work
flow of what one of these

00:11:42.300 --> 00:11:43.940
applications might look like.

00:11:43.940 --> 00:11:46.770
So let's go through the mapping
newspapers around the

00:11:46.770 --> 00:11:48.410
world application.

00:11:48.410 --> 00:11:51.670
So let's say you wanted to
create this application and

00:11:51.670 --> 00:11:56.790
you want users to be able to use
your application and enter

00:11:56.790 --> 00:11:59.950
information about their own
local newspapers into your

00:11:59.950 --> 00:12:00.310
application.

00:12:00.310 --> 00:12:04.540
So you could create a web form
and or Android or mobile

00:12:04.540 --> 00:12:08.940
application, and this
application would enter data

00:12:08.940 --> 00:12:11.160
directly into Fusion Tables.

00:12:11.160 --> 00:12:15.360
And at this point, it's really
easy to create a visualization

00:12:15.360 --> 00:12:18.820
of the information that's being
submitted to your table.

00:12:18.820 --> 00:12:21.790
You just simply visualize
it on a map.

00:12:21.790 --> 00:12:24.070
And here's an example of
a map that you can

00:12:24.070 --> 00:12:27.470
create with this data.

00:12:27.470 --> 00:12:30.550
You can color the markers
according to the language or

00:12:30.550 --> 00:12:32.870
some other attribute
of the newspaper.

00:12:32.870 --> 00:12:33.820
I'll click on one of these.

00:12:33.820 --> 00:12:36.600
You can see that it has name of
newspaper-- and these are

00:12:36.600 --> 00:12:38.840
all just fake newspapers
I made up--

00:12:38.840 --> 00:12:41.010
and you can provide a link
directly to the newspaper.

00:12:44.410 --> 00:12:48.140
Alright, so now let's go through
the details of the API

00:12:48.140 --> 00:12:50.270
so you know how to use
the API to build an

00:12:50.270 --> 00:12:53.460
application like this.

00:12:53.460 --> 00:12:56.630
The API is a REST API, so
basically that means you can

00:12:56.630 --> 00:12:59.540
make HTTP requests
to Fusion Tables.

00:12:59.540 --> 00:13:03.050
With these requests, you
send SQL-like queries.

00:13:03.050 --> 00:13:05.905
In order to create table
inserts, collect to update

00:13:05.905 --> 00:13:08.160
data, et cetera.

00:13:08.160 --> 00:13:10.050
And here's just a few examples
of the queries

00:13:10.050 --> 00:13:10.800
that you can send.

00:13:10.800 --> 00:13:14.650
You can see where creating a
new newspaper table with

00:13:14.650 --> 00:13:17.800
columns for the name of the
newspaper, location of the

00:13:17.800 --> 00:13:20.320
newspaper, and a link
to the newspaper.

00:13:20.320 --> 00:13:23.320
And we're inserting data,
selecting, et cetera.

00:13:23.320 --> 00:13:27.250
And OAuth is used for
authorization.

00:13:27.250 --> 00:13:29.450
And here's just some
sample code.

00:13:29.450 --> 00:13:32.350
This is written in Thai Puan,
but you can write your code in

00:13:32.350 --> 00:13:34.190
any language that you
want as long as it

00:13:34.190 --> 00:13:36.130
can make HTTP requests.

00:13:36.130 --> 00:13:39.670
So you can see I'm creating a
query that's creating a new

00:13:39.670 --> 00:13:42.320
table under the newspaper
table.

00:13:42.320 --> 00:13:46.600
And it's sending the query along
with the request. And

00:13:46.600 --> 00:13:49.520
depending on the query that
I'm sending, you'll get

00:13:49.520 --> 00:13:50.920
different data back.

00:13:50.920 --> 00:13:53.640
So if I send the Create Table
query, then I'll get this

00:13:53.640 --> 00:14:00.120
Table ID back if the create
was successful.

00:14:00.120 --> 00:14:03.760
OK, so now I just want to jump
over to a demo of the API.

00:14:03.760 --> 00:14:12.920
So let me just go over to
a terminal real quick.

00:14:12.920 --> 00:14:15.142
And this looks a little
bit small.

00:14:21.070 --> 00:14:23.720
And something happened to
my [UNINTELLIGIBLE].

00:14:23.720 --> 00:14:28.450
Sorry, let me just find where
it is real quick.

00:14:37.930 --> 00:14:39.460
Sorry about this.

00:14:39.460 --> 00:14:40.930
I should have prepared this
a little bit better.

00:14:51.530 --> 00:14:55.060
OK, so I have a Python file.

00:14:55.060 --> 00:14:59.380
And let me just initiate
Python here.

00:14:59.380 --> 00:15:00.800
And it's a little bit small.

00:15:00.800 --> 00:15:04.725
Let me increase the font so
I can see this better and

00:15:04.725 --> 00:15:06.390
increase the window.

00:15:06.390 --> 00:15:07.040
OK.

00:15:07.040 --> 00:15:09.320
So I have a Python file
and exchange a

00:15:09.320 --> 00:15:10.340
Fusion Tables class.

00:15:10.340 --> 00:15:15.190
And in this class, I can make
requests to Fusion Tables and

00:15:15.190 --> 00:15:18.210
I'll send various queries
to Fusion Tables.

00:15:18.210 --> 00:15:22.940
So I have a Show Table query,
Create Table query, et cetera.

00:15:22.940 --> 00:15:26.580
And so I'm just going to go
ahead and import that Fusion

00:15:26.580 --> 00:15:27.830
Tables class.

00:15:31.200 --> 00:15:34.850
And I'll create a new
instance of that.

00:15:34.850 --> 00:15:38.630
And I'll run the Show
Tables query.

00:15:38.630 --> 00:15:42.290
And you can see the
tables that I own.

00:15:42.290 --> 00:15:44.380
You might recognize some of
these tables from earlier.

00:15:44.380 --> 00:15:48.020
It has the Ecoregion table.

00:15:48.020 --> 00:15:51.410
And let me go ahead and
create a new table.

00:15:51.410 --> 00:15:54.080
So I'm running the Create
Table query.

00:15:54.080 --> 00:15:59.150
I'm creating a new newspapers
table and initializing the

00:15:59.150 --> 00:16:02.320
three columns, the name,
location, and link.

00:16:02.320 --> 00:16:08.340
OK, so let's just run
a describe on this.

00:16:08.340 --> 00:16:11.015
And you can see the results
of the describe.

00:16:11.015 --> 00:16:13.100
It's describing the table,
showing the columns and the

00:16:13.100 --> 00:16:15.246
data types for each
of these columns.

00:16:15.246 --> 00:16:16.050
OK.

00:16:16.050 --> 00:16:19.030
And this is sort of mimicking
the stuff that you would do if

00:16:19.030 --> 00:16:21.920
you wanted to write your
newspapers application using

00:16:21.920 --> 00:16:23.260
Fusion Tables.

00:16:23.260 --> 00:16:28.260
So let's enter some data into
this table because right now

00:16:28.260 --> 00:16:29.630
it's just an empty table.

00:16:29.630 --> 00:16:33.820
And so this step is going to
mimic how your users would be

00:16:33.820 --> 00:16:36.370
able to submit information
to a Fusion Table.

00:16:36.370 --> 00:16:39.670
So you run insert statements
when somebody submitted a form

00:16:39.670 --> 00:16:42.230
on your web application or
in your Android app.

00:16:42.230 --> 00:16:46.000
And so we're inserting
information about various

00:16:46.000 --> 00:16:49.890
newspapers around Bay Area:
San Jose Mercury News,

00:16:49.890 --> 00:16:52.750
Mountain View Voice,
et cetera.

00:16:52.750 --> 00:16:56.110
So let's run a Select
query on the table.

00:16:56.110 --> 00:16:58.170
And now you can see that the
data is in my table.

00:16:58.170 --> 00:17:01.500
We have information about San
Jose Mercury News, et cetera,

00:17:01.500 --> 00:17:04.460
and it might be hard to see--

00:17:04.460 --> 00:17:07.150
maybe I'll increase this one
more time-- but the link at

00:17:07.150 --> 00:17:08.670
the bottom is actually
incorrect.

00:17:08.670 --> 00:17:12.859
The San Francisco Chronicle's
URL is not SGATE, it's SFGATE,

00:17:12.859 --> 00:17:15.710
and this is pretty common if
you're writing an application

00:17:15.710 --> 00:17:16.780
that does crowd sourcing.

00:17:16.780 --> 00:17:19.869
Maybe your users are submitting
erroneous data, or

00:17:19.869 --> 00:17:21.660
maybe changes to the
data are occurring.

00:17:21.660 --> 00:17:25.359
Maybe the San Francisco
Chronicle has changed the URL

00:17:25.359 --> 00:17:26.319
to their website.

00:17:26.319 --> 00:17:29.660
So you want to be able
to update that data.

00:17:29.660 --> 00:17:31.510
And so we have an Update
Statements.

00:17:34.940 --> 00:17:37.480
We've sent the Update Statement,
we've set the new

00:17:37.480 --> 00:17:40.960
link to the new value and
specified the row ID that we

00:17:40.960 --> 00:17:41.510
want to update.

00:17:41.510 --> 00:17:42.680
And you can see that.

00:17:42.680 --> 00:17:47.970
Now our data is being updated
and let's run a Select one

00:17:47.970 --> 00:17:49.390
more time so you can
see the results.

00:17:49.390 --> 00:17:53.230
Now the URL for SFGATE
has been updated.

00:17:53.230 --> 00:17:56.960
Also an interesting addition
to this might be adding a

00:17:56.960 --> 00:17:58.310
Spatial query.

00:17:58.310 --> 00:18:01.360
So Fusion Tables for
Spatial queries.

00:18:01.360 --> 00:18:05.860
This will allow your users
to find newspapers

00:18:05.860 --> 00:18:07.330
that are near them.

00:18:07.330 --> 00:18:11.350
So you can find the N nearest
features or you can find all

00:18:11.350 --> 00:18:14.800
the features that fall within
a circle or a bounding box.

00:18:14.800 --> 00:18:19.901
So you can find the closest
newspapers to your user.

00:18:19.901 --> 00:18:23.070
All right, so that's the API
demo just showing you how you

00:18:23.070 --> 00:18:28.960
might use Fusion Tables to build
a newspaper application.

00:18:28.960 --> 00:18:31.000
All right, so now I just wanted
to announce a couple

00:18:31.000 --> 00:18:31.902
new features.

00:18:31.902 --> 00:18:35.880
We're very excited about
these new features.

00:18:35.880 --> 00:18:39.670
We are now releasing to trusted
testers map feature

00:18:39.670 --> 00:18:43.480
styling and Info window
customization, all available

00:18:43.480 --> 00:18:44.520
in the API.

00:18:44.520 --> 00:18:49.350
So I showed you how to do these
steps in the UI earlier.

00:18:49.350 --> 00:18:52.710
I showed you how to style the
features is on the map of the

00:18:52.710 --> 00:18:56.380
ecoregions and also update
the Info windows.

00:18:56.380 --> 00:18:58.390
Now you can do this
in the API.

00:18:58.390 --> 00:19:00.510
So this is really exciting.

00:19:00.510 --> 00:19:02.400
I just want to mention
real quick how to

00:19:02.400 --> 00:19:03.940
become a trusted tester.

00:19:03.940 --> 00:19:07.370
Just send an email to this
mailing list. This email will

00:19:07.370 --> 00:19:10.250
show up later in the
presentation, so don't worry

00:19:10.250 --> 00:19:11.840
if you don't copy it
down right now.

00:19:11.840 --> 00:19:13.810
We'll show it again.

00:19:13.810 --> 00:19:16.320
And how do these new
features work?

00:19:16.320 --> 00:19:19.930
This is a rest API similar
to the S2L API that

00:19:19.930 --> 00:19:22.380
I showed you earlier.

00:19:22.380 --> 00:19:26.910
So you can make HTP requests to
insert, delete, update the

00:19:26.910 --> 00:19:29.490
styles and Info window
templates.

00:19:29.490 --> 00:19:33.310
JSON objects represent the
styles and the Info window

00:19:33.310 --> 00:19:35.600
template for your table.

00:19:35.600 --> 00:19:39.470
This is an example a JSON object
representing the styles

00:19:39.470 --> 00:19:41.590
of table one, two, three,
four, five.

00:19:41.590 --> 00:19:44.415
It's setting all the markers
to small blue icons.

00:19:47.280 --> 00:19:49.090
And so why is this awesome?

00:19:49.090 --> 00:19:52.490
This is really great if you're
creating lots of tables.

00:19:52.490 --> 00:19:56.150
So I was recently working with
the census data, and there's a

00:19:56.150 --> 00:19:57.970
ton of census data.

00:19:57.970 --> 00:20:00.970
I think I created around
200 different tables.

00:20:00.970 --> 00:20:04.610
And if I wanted to go into the
UI and update the styles for

00:20:04.610 --> 00:20:07.610
all these tables, it would take
a very, very long time.

00:20:07.610 --> 00:20:11.650
So what I can do instead now is
use the API to create the

00:20:11.650 --> 00:20:15.190
table and then immediately apply
a style or custom Info

00:20:15.190 --> 00:20:16.720
window to this table.

00:20:16.720 --> 00:20:17.570
Why?

00:20:17.570 --> 00:20:19.760
It's just in the code,
so it saves a lot of

00:20:19.760 --> 00:20:21.010
time in these cases.

00:20:23.970 --> 00:20:26.080
These new features are also
really cool because you can

00:20:26.080 --> 00:20:28.610
find out how public cables
are being styled.

00:20:28.610 --> 00:20:32.570
So if you really like how the
Guardian styled their

00:20:32.570 --> 00:20:36.255
deprivation map, you can use the
API to find out the style

00:20:36.255 --> 00:20:40.770
of that table and potentially
reuse it for your own table.

00:20:40.770 --> 00:20:44.560
Also a cool new feature of these
new features of the API

00:20:44.560 --> 00:20:48.450
is that it's part of the Google
API console, and with

00:20:48.450 --> 00:20:51.640
the API console you get
a lot of nice things.

00:20:51.640 --> 00:20:54.470
For example, you see your quote
and you can also get

00:20:54.470 --> 00:20:57.190
analytics about your
API usage.

00:20:57.190 --> 00:21:00.150
So if you're getting close to
your quota, then you can

00:21:00.150 --> 00:21:02.860
adjust your code.

00:21:02.860 --> 00:21:06.900
Also, these new features are
ported in the Google client

00:21:06.900 --> 00:21:10.890
libraries, and that makes
requests to the APIs much

00:21:10.890 --> 00:21:14.940
easier and it makes it
much easier as well.

00:21:14.940 --> 00:21:17.730
And again, I just want to
reiterate that trusted testers

00:21:17.730 --> 00:21:18.170
are needed.

00:21:18.170 --> 00:21:21.370
Here's the email list. And we'll
show this later in the

00:21:21.370 --> 00:21:23.540
presentation as well.

00:21:23.540 --> 00:21:24.110
OK.

00:21:24.110 --> 00:21:28.150
Now, at this point, I've shown
you how to do the back end of

00:21:28.150 --> 00:21:29.330
Fusion Tables.

00:21:29.330 --> 00:21:32.060
James is going to take it away
and show you how to use map

00:21:32.060 --> 00:21:35.950
API to show your Fusion
Table data on a map.

00:21:35.950 --> 00:21:38.430
And he's flown all the way from
Sydney, by the way, to

00:21:38.430 --> 00:21:39.105
talk to you guys.

00:21:39.105 --> 00:21:40.355
He's excited to be here.

00:21:45.370 --> 00:21:46.940
JAMES MCGILL: Good afternoon,
everybody.

00:21:46.940 --> 00:21:49.510
Thank you very much for coming
to our presentation today, as

00:21:49.510 --> 00:21:51.300
Kathryn mentioned, I have flown
in all the way from

00:21:51.300 --> 00:21:53.724
Sydney, but it's been absolutely
worth it, I'm

00:21:53.724 --> 00:21:55.330
having just a great day.

00:21:55.330 --> 00:21:58.250
And I'm excited to be talking to
you today because what I'm

00:21:58.250 --> 00:22:01.780
really interested in as an API
programmer is making it easy

00:22:01.780 --> 00:22:04.420
for developers to show large
amounts of geographic

00:22:04.420 --> 00:22:08.190
information on a map in their
own websites in a way to easy

00:22:08.190 --> 00:22:10.880
for them and useful to the
people visiting their website.

00:22:10.880 --> 00:22:14.030
And I'm really excited about
Fusion Tables, because Fusion

00:22:14.030 --> 00:22:17.470
Tables makes this very simple.

00:22:17.470 --> 00:22:20.090
As I mentioned before, I'll be
talking about the Google Maps

00:22:20.090 --> 00:22:21.590
JavaScript API.

00:22:21.590 --> 00:22:24.520
Now this is a JavaScript API
used by developers all over

00:22:24.520 --> 00:22:25.180
the internet.

00:22:25.180 --> 00:22:28.760
It makes it simple to add an
interactive SlippyMap like you

00:22:28.760 --> 00:22:31.060
might have seen on
maps.google.com to any

00:22:31.060 --> 00:22:34.150
third-party site with just a
few lines of JavaScript.

00:22:34.150 --> 00:22:37.080
But what developers may struggle
with a little bit

00:22:37.080 --> 00:22:40.520
more is getting their
data onto that map.

00:22:40.520 --> 00:22:44.010
Now, I'm kind of a crime buff,
and I happen to have some data

00:22:44.010 --> 00:22:46.720
that shows the locations of
crimes all over Chicago.

00:22:46.720 --> 00:22:48.540
And I have a map of Chicago.

00:22:48.540 --> 00:22:51.420
Using Fusion Tables, I can
combine these two things with

00:22:51.420 --> 00:22:54.010
only five lines of code.

00:22:54.010 --> 00:22:57.110
All I need is the name of a
column in a Fusion Table that

00:22:57.110 --> 00:22:58.880
represents my geographic data.

00:22:58.880 --> 00:23:01.390
Now this column should contain
features like latitude and

00:23:01.390 --> 00:23:05.310
longitude points or polygons
or polylines.

00:23:05.310 --> 00:23:07.530
I also need the ID
of the title.

00:23:07.530 --> 00:23:09.670
If you're not sure how to get
the ID, that's contained

00:23:09.670 --> 00:23:10.580
within the URL.

00:23:10.580 --> 00:23:13.060
So you can just copy that out
of the URL, highlighted in

00:23:13.060 --> 00:23:15.980
blue in these slides, and
paste it in the layout.

00:23:15.980 --> 00:23:19.020
And with those five lines
of code, I get a map

00:23:19.020 --> 00:23:20.280
that looks like this.

00:23:20.280 --> 00:23:20.730
Right?

00:23:20.730 --> 00:23:21.405
Very simple.

00:23:21.405 --> 00:23:24.100
And I can convey a large amount
of information to the

00:23:24.100 --> 00:23:25.950
people who view my site.

00:23:25.950 --> 00:23:29.040
Now of course I can also filter
that information.

00:23:29.040 --> 00:23:32.110
So, for example, I may only want
to display crimes that

00:23:32.110 --> 00:23:37.320
have occurred where the victim
was over 50 years old.

00:23:37.320 --> 00:23:40.750
I use those same five lines as
before, but I dynamically,

00:23:40.750 --> 00:23:44.100
when I click this button, add
an additional property to

00:23:44.100 --> 00:23:44.770
filter them out.

00:23:44.770 --> 00:23:46.120
And the map updates instantly.

00:23:46.120 --> 00:23:49.270
And now we're only showing the
subset of the information that

00:23:49.270 --> 00:23:51.470
the person viewing our site
is interested in.

00:23:51.470 --> 00:23:54.010
Of course, you can set this
programmatically as well.

00:23:54.010 --> 00:23:56.540
So you can let the people
visiting your site decide

00:23:56.540 --> 00:23:58.810
exactly what subset
of data they're

00:23:58.810 --> 00:24:00.060
interested in looking at.

00:24:04.700 --> 00:24:06.690
So why use Fusion
Tables Layer?

00:24:06.690 --> 00:24:08.940
Both of the things I just showed
you are possible using

00:24:08.940 --> 00:24:10.470
the Fusion Tables UI.

00:24:10.470 --> 00:24:13.940
Kathryn demonstrated before that
you can extract an Embed

00:24:13.940 --> 00:24:16.760
link that you can use to embed
an interactive map in your

00:24:16.760 --> 00:24:19.760
site without having to
write any JavaScript.

00:24:19.760 --> 00:24:22.640
But as developers, we often want
to customize the behavior

00:24:22.640 --> 00:24:23.800
of the sites that we build.

00:24:23.800 --> 00:24:26.040
We want them to stand apart
from the crowd.

00:24:26.040 --> 00:24:29.710
And a Google Maps API allows
you to do this.

00:24:29.710 --> 00:24:31.670
In the next couple of examples,
I'm going to use a

00:24:31.670 --> 00:24:34.530
table I found publicly available
in Fusion Tables

00:24:34.530 --> 00:24:37.230
about coffee production around
the world for various

00:24:37.230 --> 00:24:40.270
countries over the
last five years.

00:24:40.270 --> 00:24:43.110
Using that code I showed you
before, it's very simple to I

00:24:43.110 --> 00:24:44.740
add this data to a map.

00:24:44.740 --> 00:24:47.520
By default, if you click one of
these features, what will

00:24:47.520 --> 00:24:50.170
happen is that the default
Google Maps Info window is

00:24:50.170 --> 00:24:53.260
displayed and it's filled with
whatever Info window content

00:24:53.260 --> 00:24:55.190
was configured through the UI.

00:24:55.190 --> 00:24:56.960
However, through the UI
you're effectively

00:24:56.960 --> 00:24:59.980
limited to static HTML.

00:24:59.980 --> 00:25:02.480
Now if we want to do something
just a little bit more fancy,

00:25:02.480 --> 00:25:04.840
because the Maps API has
additional options on the

00:25:04.840 --> 00:25:07.760
Layer and allows us to customize
behavior, we can

00:25:07.760 --> 00:25:08.900
achieve that.

00:25:08.900 --> 00:25:12.100
So in this example, I set
Suppress Info Windows to true,

00:25:12.100 --> 00:25:14.790
which tells the API to no longer
display the default

00:25:14.790 --> 00:25:15.600
Info window.

00:25:15.600 --> 00:25:17.400
And I also add a Click Handle.

00:25:17.400 --> 00:25:20.370
Now the Click Handle function
will be called whenever a user

00:25:20.370 --> 00:25:21.940
clicks on a feature
in the map.

00:25:21.940 --> 00:25:25.020
And this allows me to inject my
own customized code to deal

00:25:25.020 --> 00:25:27.150
with this event.

00:25:27.150 --> 00:25:32.058
So let's see what happens
when we click this time.

00:25:32.058 --> 00:25:33.790
It's just a little
bit different.

00:25:33.790 --> 00:25:36.320
And what's particularly cool
here is that when you click on

00:25:36.320 --> 00:25:39.180
a feature, it not only gives you
back the location of that

00:25:39.180 --> 00:25:42.085
feature, but it also gives you
back the contents of the row

00:25:42.085 --> 00:25:44.870
in the table associated
with that feature.

00:25:44.870 --> 00:25:47.540
In this case, I get back an
array containing integer

00:25:47.540 --> 00:25:49.170
values about coffee
production.

00:25:49.170 --> 00:25:51.710
And I can process that in
JavaScript, pass it off to the

00:25:51.710 --> 00:25:54.720
Google Charts API, and create
my dynamic chart.

00:25:54.720 --> 00:25:57.285
Which makes it easier for people
viewing this site to

00:25:57.285 --> 00:25:58.535
interpret this data.

00:26:01.130 --> 00:26:03.040
Of course, you can also combine
this with other

00:26:03.040 --> 00:26:04.480
features in the Maps API.

00:26:04.480 --> 00:26:06.870
For example, Styled Maps, which
I've used to here to

00:26:06.870 --> 00:26:09.590
customize the appearance of the
base map, remove a lot of

00:26:09.590 --> 00:26:12.630
the saturation, make it all very
simple, and make the data

00:26:12.630 --> 00:26:17.190
that I'm showing to the
user really stand out.

00:26:17.190 --> 00:26:19.310
Let's flip things around a
little bit and talk about why

00:26:19.310 --> 00:26:22.400
you would use Fusion Tables in
the Maps API instead of some

00:26:22.400 --> 00:26:24.190
of the all the built-in
functionality.

00:26:24.190 --> 00:26:26.970
Now, if you've used the Google
Maps API before, you'd know

00:26:26.970 --> 00:26:29.255
that you can use JavaScript
to create markers.

00:26:29.255 --> 00:26:32.240
And markers can be placed on
the surface of the Earth to

00:26:32.240 --> 00:26:33.640
annotate a point.

00:26:33.640 --> 00:26:36.380
However, there's one problem
with markers.

00:26:36.380 --> 00:26:39.150
Even though we've worked
extremely hard to ensure that

00:26:39.150 --> 00:26:42.250
you can display between 100 and
1,000 markers very, very

00:26:42.250 --> 00:26:45.190
quickly, they still must
be created in a client.

00:26:45.190 --> 00:26:48.850
This means creating JavaScript
objects and the responsibility

00:26:48.850 --> 00:26:50.650
of rendering these
markers most be

00:26:50.650 --> 00:26:52.410
performed by a browser.

00:26:52.410 --> 00:26:54.100
Now these are some measurements
I've taken using

00:26:54.100 --> 00:26:56.800
a relatively modern machine and
a modern browser sometime

00:26:56.800 --> 00:26:58.240
in the last week.

00:26:58.240 --> 00:27:02.850
As you go from 1,000 to
100,000 markers, the

00:27:02.850 --> 00:27:05.330
performance of the client-side
marker degrades significantly.

00:27:05.330 --> 00:27:08.310
And it can take up to 40 seconds
to display all those

00:27:08.310 --> 00:27:09.650
markers on a map.

00:27:09.650 --> 00:27:12.320
Now, if you use Fusion Tables
Layer, you can display the

00:27:12.320 --> 00:27:15.660
same number of markers
in under a second.

00:27:15.660 --> 00:27:18.720
And that's really compelling,
especially on mobile devices

00:27:18.720 --> 00:27:21.620
with slower APUs and less RAM.

00:27:21.620 --> 00:27:24.480
The user of your site is going
to notice the performance

00:27:24.480 --> 00:27:26.330
difference.

00:27:26.330 --> 00:27:28.650
This is achieved with
tiled rendering.

00:27:28.650 --> 00:27:31.650
The data in the Fusion Tables
database is rendered in the

00:27:31.650 --> 00:27:33.500
cloud by Google servers.

00:27:33.500 --> 00:27:36.560
It renders transparent image
overlays, which is sent down

00:27:36.560 --> 00:27:38.450
and put on the top
of your map.

00:27:38.450 --> 00:27:42.160
The net result is that we need
only 40 tiles or so to display

00:27:42.160 --> 00:27:45.610
any map regardless of the number
of features shown.

00:27:45.610 --> 00:27:49.240
So your map can scale from 100
features to 1,000 features to

00:27:49.240 --> 00:27:52.190
100,000 features without you
needing to think through the

00:27:52.190 --> 00:27:53.540
performance implications.

00:27:53.540 --> 00:27:55.670
And this is, I think,
particularly compelling for

00:27:55.670 --> 00:27:56.920
developers.

00:27:58.850 --> 00:28:00.820
Now there's one more thing
I want to talk about.

00:28:00.820 --> 00:28:02.300
I want to talk about adding
a little bit of

00:28:02.300 --> 00:28:03.580
style to your map.

00:28:03.580 --> 00:28:06.540
Now this is something Kathryn
touched on before.

00:28:06.540 --> 00:28:09.260
Adding styling information to
your map is not only important

00:28:09.260 --> 00:28:12.190
to make your map look good but
also to convey important

00:28:12.190 --> 00:28:17.130
semantic information about the
data represented on your map.

00:28:17.130 --> 00:28:19.860
Here's a map where I've gone
into the Fusion Tables UI and

00:28:19.860 --> 00:28:22.690
I've styled the map to show
areas within Australia that

00:28:22.690 --> 00:28:26.570
have fewer than 250 unique
species of birds in green and

00:28:26.570 --> 00:28:30.300
areas with more than 250
unique species in blue.

00:28:30.300 --> 00:28:32.880
But as a developer, I know that
I'm not always in the

00:28:32.880 --> 00:28:36.100
best position to decide what
people visiting my site are

00:28:36.100 --> 00:28:37.260
interested in.

00:28:37.260 --> 00:28:39.790
The next person to view my site
may not care about the

00:28:39.790 --> 00:28:43.370
difference between 250 species
but maybe the split between

00:28:43.370 --> 00:28:48.650
300 species or 350 species,
which is why I'm excited today

00:28:48.650 --> 00:28:51.890
to announce that you can now
dynamically update the styles

00:28:51.890 --> 00:28:55.340
on a Fusion Tables Layer using
the JavaScript API.

00:28:55.340 --> 00:28:59.700
So if I drag the slider here
to 300, and that will be

00:28:59.700 --> 00:29:02.290
restyled to represent
this information.

00:29:02.290 --> 00:29:04.870
Now this is great, because you
can now have users interact

00:29:04.870 --> 00:29:08.040
with your site, tell you what
they're interested in knowing

00:29:08.040 --> 00:29:11.140
about your map, and restyle
your map to convey that

00:29:11.140 --> 00:29:15.560
information in a way that's
very easy for them to see.

00:29:15.560 --> 00:29:16.740
So how is this done?

00:29:16.740 --> 00:29:17.900
It's very basic.

00:29:17.900 --> 00:29:20.375
We've added a style property
to the Fusion Tables Layer.

00:29:20.375 --> 00:29:22.900
This takes in an array of
styling objects which can be

00:29:22.900 --> 00:29:25.150
used to customize the appearance
of your map.

00:29:25.150 --> 00:29:27.040
We'll start with a
simple example.

00:29:27.040 --> 00:29:31.470
This one is a simple styling
object that sets all polygons

00:29:31.470 --> 00:29:33.520
to have a green fill.

00:29:33.520 --> 00:29:35.730
If you put this on your
map, you get something

00:29:35.730 --> 00:29:37.286
that looks like this.

00:29:37.286 --> 00:29:40.140
But we can combine this with
other styling objects.

00:29:40.140 --> 00:29:42.970
So let's add another element
to our array.

00:29:42.970 --> 00:29:44.470
This one is a restricted
style.

00:29:44.470 --> 00:29:46.860
We've added a Where clause,
which means that this style

00:29:46.860 --> 00:29:50.010
will only apply to elements that
match the condition of

00:29:50.010 --> 00:29:52.680
having more than 300 unique
species of birds

00:29:52.680 --> 00:29:54.360
associated with them.

00:29:54.360 --> 00:29:57.120
In this case, we're going to
set the fill color to blue.

00:29:57.120 --> 00:30:00.260
Now if we combine this in the
array with our previous style,

00:30:00.260 --> 00:30:03.510
both styles will be applied in
order with later styles taking

00:30:03.510 --> 00:30:05.080
precedence where
they conflict.

00:30:05.080 --> 00:30:07.050
In this case, on the definition
of the fill color

00:30:07.050 --> 00:30:08.640
for a polygon.

00:30:08.640 --> 00:30:11.880
So now we get something like
what I showed you before.

00:30:11.880 --> 00:30:14.370
But we can do something
even cooler.

00:30:14.370 --> 00:30:16.150
Styles cascade in the same
way that you would

00:30:16.150 --> 00:30:18.200
expect CSS styles to.

00:30:18.200 --> 00:30:20.895
So if you don't provide a full
definition for a style, it

00:30:20.895 --> 00:30:23.640
will inherit elements
of that style from

00:30:23.640 --> 00:30:25.770
previously matched features.

00:30:25.770 --> 00:30:28.220
So let's restrict this to
features that have a

00:30:28.220 --> 00:30:31.410
population of more than five
people per square kilometer.

00:30:31.410 --> 00:30:33.810
And in this case we're going
to set the full opacity to

00:30:33.810 --> 00:30:37.110
one, where it previously
was about half.

00:30:37.110 --> 00:30:39.730
Now this is going to cascade
with our previous style, so

00:30:39.730 --> 00:30:43.630
we're going to see a couple of
distinct types of features.

00:30:43.630 --> 00:30:47.250
Some features are green with 50
percent opacity, these are

00:30:47.250 --> 00:30:49.020
where there are fewer than
five people per square

00:30:49.020 --> 00:30:52.830
kilometer and also fewer than
250 species of birds.

00:30:52.830 --> 00:30:56.030
Some features are blue with
full opacity, and this is

00:30:56.030 --> 00:30:58.300
where there are more than five
people per square kilometer

00:30:58.300 --> 00:31:00.590
and more than 300 unique
species of birds.

00:31:00.590 --> 00:31:02.500
And already this map
is conveying useful

00:31:02.500 --> 00:31:03.810
information to me.

00:31:03.810 --> 00:31:07.720
Everybody loves the east coast
of Australia, right?

00:31:07.720 --> 00:31:10.380
Just by glancing at this map,
we can tell the highest

00:31:10.380 --> 00:31:14.280
concentrations of both people
and unique species of birds is

00:31:14.280 --> 00:31:16.390
along the east coast
of Australia.

00:31:16.390 --> 00:31:18.850
So by combining these styles,
we can represent multiple

00:31:18.850 --> 00:31:21.770
different strata of information
on a single map.

00:31:21.770 --> 00:31:23.200
I think that's really cool.

00:31:25.760 --> 00:31:27.282
And the final point
is that this can

00:31:27.282 --> 00:31:28.780
be dynamically updated.

00:31:28.780 --> 00:31:31.660
The styles, arrays, and NDC
property, which means in the

00:31:31.660 --> 00:31:34.600
Maps API JavaScript, if you
update that property at any

00:31:34.600 --> 00:31:37.360
time, the map will automatically
update to

00:31:37.360 --> 00:31:39.180
represent the new state.

00:31:39.180 --> 00:31:40.930
So let's have a look at
a little example.

00:31:40.930 --> 00:31:43.440
Maybe I'm a little bit over
birds now; I'm more

00:31:43.440 --> 00:31:44.770
interested in plants.

00:31:44.770 --> 00:31:47.540
So we'll create a new style that
colors the map red where

00:31:47.540 --> 00:31:50.890
we have more than 1,000 unique
species of plants.

00:31:50.890 --> 00:31:53.670
We're also going to create a
function called Update Style,

00:31:53.670 --> 00:31:56.350
which is going to read back our
previous definition of the

00:31:56.350 --> 00:31:58.840
style, which is this
array we parsed in.

00:31:58.840 --> 00:32:01.620
It's going to override the first
style and array with

00:32:01.620 --> 00:32:03.680
this new style about coloring
the map red

00:32:03.680 --> 00:32:06.610
where we have plants.

00:32:06.610 --> 00:32:08.080
And we're just going to
hook that up to a

00:32:08.080 --> 00:32:09.800
Button on our map.

00:32:09.800 --> 00:32:11.890
Every time someone clicks that
button, this code is going to

00:32:11.890 --> 00:32:14.680
run, the property will be
updated, and the map will

00:32:14.680 --> 00:32:16.495
automatically update to
reflect this change.

00:32:19.260 --> 00:32:22.890
So click this button,
three colors.

00:32:22.890 --> 00:32:25.260
Right?

00:32:25.260 --> 00:32:27.690
This is great, because as I
said before, you're now no

00:32:27.690 --> 00:32:29.870
longer limited to deciding
exactly what you're going to

00:32:29.870 --> 00:32:33.180
show your users in advance, but
instead allow them to sift

00:32:33.180 --> 00:32:35.480
through the information that
you can make available

00:32:35.480 --> 00:32:38.560
publicly on your website and
extract exactly what they're

00:32:38.560 --> 00:32:39.810
interested in.

00:32:43.380 --> 00:32:44.850
Couple of pitfalls.

00:32:44.850 --> 00:32:47.880
As I showed you before, you
can restrict what data is

00:32:47.880 --> 00:32:49.800
shown by parsing in
a Where clause as

00:32:49.800 --> 00:32:51.790
part of a query object.

00:32:51.790 --> 00:32:54.220
In this example, I've restricted
the data to only

00:32:54.220 --> 00:32:56.980
show elements that have
fewer than 100

00:32:56.980 --> 00:32:58.540
unique species of birds.

00:32:58.540 --> 00:33:01.330
But I've also very cleverly
decided to add a style that

00:33:01.330 --> 00:33:03.670
only applies when there's more
than 100 hundred unique

00:33:03.670 --> 00:33:04.760
species of birds.

00:33:04.760 --> 00:33:08.310
Obviously that style isn't
going to take effect.

00:33:08.310 --> 00:33:11.480
Just something to
watch out for.

00:33:11.480 --> 00:33:14.820
Of course, in all these demos,
I've shown polygon styles.

00:33:14.820 --> 00:33:17.970
You can also style other
elements of the map.

00:33:17.970 --> 00:33:21.280
You can control the border
thickness, color, and opacity

00:33:21.280 --> 00:33:22.180
for polygons.

00:33:22.180 --> 00:33:24.890
You can control the thickness,
color, and opacity for

00:33:24.890 --> 00:33:27.660
polylines, which you could use,
for example, to represent

00:33:27.660 --> 00:33:29.170
routes, so driving routes.

00:33:29.170 --> 00:33:31.760
And you can also control the
appearance of markers or

00:33:31.760 --> 00:33:34.020
points by selecting from
the set of icons

00:33:34.020 --> 00:33:37.270
offered by Fusion Tables.

00:33:37.270 --> 00:33:38.830
Couple of things
worth knowing.

00:33:38.830 --> 00:33:41.100
Styles can be applied
to any table, not

00:33:41.100 --> 00:33:42.330
just tables you own.

00:33:42.330 --> 00:33:45.130
So you can take someone else's
data and, without owning that

00:33:45.130 --> 00:33:48.190
table and Fusion Tables or
needing to clone it, restyle

00:33:48.190 --> 00:33:50.240
it on your own website to
represent what you're

00:33:50.240 --> 00:33:51.150
interested in.

00:33:51.150 --> 00:33:53.350
And you don't have to worry
about the styles on that

00:33:53.350 --> 00:33:56.060
changing underneath you because
you can always ensure

00:33:56.060 --> 00:33:58.630
that you control the
default appearance.

00:33:58.630 --> 00:34:00.800
With Fusion Tables Layer,
you can have up to

00:34:00.800 --> 00:34:02.110
five styles per layer.

00:34:02.110 --> 00:34:05.260
And you can have up to five
different layers per map, one

00:34:05.260 --> 00:34:07.710
of which can contains
styling information.

00:34:07.710 --> 00:34:09.370
And this is still part
of the Maps API

00:34:09.370 --> 00:34:10.560
experimental features.

00:34:10.560 --> 00:34:13.340
We wanted to push this out so
that you as developers can get

00:34:13.340 --> 00:34:14.810
started playing with it.

00:34:14.810 --> 00:34:17.150
There might be a few bumps in
the road, but we're working

00:34:17.150 --> 00:34:19.900
hard to ensure that this works
as stably as possible.

00:34:19.900 --> 00:34:22.920
And even more exciting,
this is live today.

00:34:22.920 --> 00:34:24.440
The reference should have
gone out sometime

00:34:24.440 --> 00:34:25.560
in the lost 10 minutes.

00:34:25.560 --> 00:34:28.420
So you can start building
website that use this feature

00:34:28.420 --> 00:34:30.558
as soon as you leave
this room.

00:34:30.558 --> 00:34:31.808
[APPLAUSE]

00:34:36.790 --> 00:34:39.170
And now I'm going to pass over
to our guest, Simon, from the

00:34:39.170 --> 00:34:40.340
Guardian data blog.

00:34:40.340 --> 00:34:43.130
He's going to talk about how
he's been using Fusion Tables

00:34:43.130 --> 00:34:47.328
out there in the real world
to help build his sites.

00:34:47.328 --> 00:34:48.578
[APPLAUSE]

00:34:52.690 --> 00:34:53.429
SIMON ROGERS: Hi.

00:34:53.429 --> 00:34:56.730
I feel a bit of a fraud here
because all you people here

00:34:56.730 --> 00:34:58.770
actually make things, and I'm
not one of the people that

00:34:58.770 --> 00:35:00.820
makes things, I just take
advantage of things that other

00:35:00.820 --> 00:35:03.200
people make.

00:35:03.200 --> 00:35:08.730
But we do use Fusion Tables
quite a lot, and we're just

00:35:08.730 --> 00:35:10.360
scratching the surface
of what's possible.

00:35:10.360 --> 00:35:11.310
I'm personally aware of that.

00:35:11.310 --> 00:35:14.210
I'll explain a bit about what we
do and then how we use it.

00:35:14.210 --> 00:35:16.405
So I edit something called the
Datablog and the Datastore,

00:35:16.405 --> 00:35:18.670
and what we do is every day
we just publish raw

00:35:18.670 --> 00:35:21.040
data around the news.

00:35:21.040 --> 00:35:24.360
So, for instance, this is the
site today, so we just had

00:35:24.360 --> 00:35:29.700
this UN report that projects
the population to 2100.

00:35:29.700 --> 00:35:31.950
And we'll take that data, we'll
make it more accessible.

00:35:31.950 --> 00:35:34.240
We publish it using Google
spreadsheets because that's

00:35:34.240 --> 00:35:38.330
such a good way to share data.

00:35:38.330 --> 00:35:41.400
And we'll show visualizations,
we use Fusion Tables quite a

00:35:41.400 --> 00:35:43.330
lot for that.

00:35:43.330 --> 00:35:48.750
And these guys did this
stuff for us.

00:35:48.750 --> 00:35:50.370
So we put our data out there.

00:35:50.370 --> 00:35:52.220
And we put it out there so other
people can then do stuff

00:35:52.220 --> 00:35:56.000
with it and give
it back to us.

00:35:56.000 --> 00:35:59.630
And I suppose the reason for
that is because nowadays

00:35:59.630 --> 00:36:01.630
nobody trusts journalists.

00:36:01.630 --> 00:36:03.640
And they rarely trust what
we're telling them.

00:36:03.640 --> 00:36:05.590
So we can say, well, this is
the data behind the story.

00:36:05.590 --> 00:36:09.760
We can make that story real and
we can bring it to life.

00:36:09.760 --> 00:36:11.310
I suppose it came out of the
fact that we were just

00:36:11.310 --> 00:36:12.580
accumulating all this data.

00:36:12.580 --> 00:36:15.390
And there's so much data, raw
information out there.

00:36:15.390 --> 00:36:19.120
So much of it is available in
totally inaccessible formats:

00:36:19.120 --> 00:36:22.460
in PDFs or badly formatted
documents.

00:36:22.460 --> 00:36:24.170
We've got something called the
Office of National Statistics

00:36:24.170 --> 00:36:26.970
in the UK, which publishes tons
of data, but they're used

00:36:26.970 --> 00:36:28.110
to publishing books.

00:36:28.110 --> 00:36:30.410
So the published data as it
was in the book was all

00:36:30.410 --> 00:36:33.460
formatted preferably with lots
of lines and merged cells and

00:36:33.460 --> 00:36:34.950
stuff, which is no good if
you actually want to do

00:36:34.950 --> 00:36:36.310
anything with it.

00:36:36.310 --> 00:36:39.750
So I guess the reason we came
across Fusion Tables was

00:36:39.750 --> 00:36:42.800
because like a lot of places,
we have a real

00:36:42.800 --> 00:36:45.410
kind of time famine.

00:36:45.410 --> 00:36:47.530
We have a lot of developers
who are really busy on

00:36:47.530 --> 00:36:48.590
creating enormous things.

00:36:48.590 --> 00:36:49.980
Actually, if you want something
built, you have to

00:36:49.980 --> 00:36:50.960
really justify it.

00:36:50.960 --> 00:36:55.010
And I can't really justify my
getting my map built compared

00:36:55.010 --> 00:36:59.380
so building the iPad for the
Guardian, or whatever.

00:36:59.380 --> 00:37:00.330
So you've got to justify
maps, then.

00:37:00.330 --> 00:37:02.540
So we just came across
Fusion Tables.

00:37:02.540 --> 00:37:04.720
And at first, when somebody told
me about Fusion Tables, I

00:37:04.720 --> 00:37:06.090
didn't really get it.

00:37:06.090 --> 00:37:07.810
I didn't understand whether
it was a spreadsheet.

00:37:07.810 --> 00:37:11.620
It wasn't really a spreadsheet
and it wasn't really--

00:37:11.620 --> 00:37:13.565
so I didn't understand it until
somebody said, oh it's a

00:37:13.565 --> 00:37:14.880
really good way for
making maps.

00:37:14.880 --> 00:37:16.660
And that's how we got into it.

00:37:16.660 --> 00:37:19.990
And this is one of the
first things we did,

00:37:19.990 --> 00:37:23.060
which was the blitzes.

00:37:23.060 --> 00:37:26.410
people and you code that's with
the Second World War some

00:37:26.410 --> 00:37:28.990
in general in the blitzes, in
particular, was a big attack

00:37:28.990 --> 00:37:30.800
on London in the year of 1940.

00:37:30.800 --> 00:37:34.180
And it turns out that basically
the London fire

00:37:34.180 --> 00:37:36.800
brigades kept these records
during the blitz, which are

00:37:36.800 --> 00:37:38.740
all kept in the London
Metropolitan Archives in a

00:37:38.740 --> 00:37:39.605
great big book, obviously.

00:37:39.605 --> 00:37:41.270
Neatly tied records.

00:37:41.270 --> 00:37:44.290
Every time the fire brigade
was called out to a bomb,

00:37:44.290 --> 00:37:46.150
somebody would go back and
tie a record after.

00:37:46.150 --> 00:37:47.630
It was pretty amazing,
considering what were were

00:37:47.630 --> 00:37:48.470
going through at the time.

00:37:48.470 --> 00:37:51.430
And we thought well, we should
just take our data--

00:37:51.430 --> 00:37:54.690
and there was too much data
to record for every day.

00:37:54.690 --> 00:37:57.290
There was 800 days of this.

00:37:57.290 --> 00:38:00.100
But what there was was we
thought, let's take the first

00:38:00.100 --> 00:38:03.350
night of the blitz and we
created this list here.

00:38:03.350 --> 00:38:06.540
And all we had for this list
was we had a time, we had a

00:38:06.540 --> 00:38:08.815
location with a street
address.

00:38:08.815 --> 00:38:13.000
And that street address would be
a street address that might

00:38:13.000 --> 00:38:15.950
not exist anymore or would
be a partial post code.

00:38:15.950 --> 00:38:17.900
Every street, you have
zip codes here.

00:38:17.900 --> 00:38:19.530
Every street has a post
code in the UK.

00:38:19.530 --> 00:38:21.420
And you might just get
a partial address.

00:38:21.420 --> 00:38:24.690
That street there, Suffolk
Street, that might not exist.

00:38:24.690 --> 00:38:27.580
So what we did was we did this
table, we put it in, then we

00:38:27.580 --> 00:38:30.090
thought let's try a Fusion
Table, and see what it does.

00:38:30.090 --> 00:38:33.490
And because it works like
Google Maps works, it

00:38:33.490 --> 00:38:37.360
basically found 95 percent of
those addresses just by having

00:38:37.360 --> 00:38:39.670
the first name of the address,
and we added London, UK

00:38:39.670 --> 00:38:44.570
because it seemed to just
default to America otherwise.

00:38:44.570 --> 00:38:47.210
And it would collect 95 percent
of the addresses and

00:38:47.210 --> 00:38:49.320
then we could correct the
ones that were missing.

00:38:49.320 --> 00:38:52.620
So of the 300 places, you could
then find the other ones

00:38:52.620 --> 00:38:54.570
that were missing and
easily adjust them.

00:38:54.570 --> 00:38:55.170
The fact that we
could do that.

00:38:55.170 --> 00:38:57.630
And you create something,
then, which brings

00:38:57.630 --> 00:38:58.580
that data to life.

00:38:58.580 --> 00:39:00.560
And it means that you can
see what happened.

00:39:00.560 --> 00:39:02.625
And people were going on there
and exploring the data and

00:39:02.625 --> 00:39:03.970
saying that's why there's
a new building at

00:39:03.970 --> 00:39:05.000
the end of my street.

00:39:05.000 --> 00:39:06.260
That's what happened there.

00:39:06.260 --> 00:39:08.980
It's a really nice way for us
to be able to display that

00:39:08.980 --> 00:39:10.750
data and make it real
for people.

00:39:10.750 --> 00:39:12.620
And do something online that
takes advantage of the

00:39:12.620 --> 00:39:15.160
features that you've
got there.

00:39:15.160 --> 00:39:18.850
This is something else where
we've got a lot of data.

00:39:18.850 --> 00:39:22.790
The other thing that we'll
discuss in the UK are school

00:39:22.790 --> 00:39:26.910
results, especially on parents
obsessed with where my

00:39:26.910 --> 00:39:29.670
daughter is going to go
in five years' time.

00:39:29.670 --> 00:39:32.750
And the government every
year releases

00:39:32.750 --> 00:39:33.620
secondary school results.

00:39:33.620 --> 00:39:36.510
And they release it with the
school name and a post code

00:39:36.510 --> 00:39:38.640
and an ID for that school.

00:39:38.640 --> 00:39:41.490
So if she's got an ID for that
school, something we can start

00:39:41.490 --> 00:39:44.130
mashing that data together and
bring it in with other data.

00:39:44.130 --> 00:39:47.390
And they also release data on
how much you spend for each

00:39:47.390 --> 00:39:50.100
pupil in each school with the
same ID codes on separate

00:39:50.100 --> 00:39:51.885
sheets So we can bring
that stuff together.

00:39:51.885 --> 00:39:54.560
And we can do stuff like this,
which it what goes in the

00:39:54.560 --> 00:39:57.960
paper which shows the spread by
local authority across the

00:39:57.960 --> 00:40:00.460
UK of how much is spent
on these pupils.

00:40:00.460 --> 00:40:03.750
But the really cool thing about
bringing all of those

00:40:03.750 --> 00:40:08.010
schools into a Fusion Table it
really brings it to life to

00:40:08.010 --> 00:40:08.740
people online.

00:40:08.740 --> 00:40:11.942
Again in a way that--

00:40:11.942 --> 00:40:14.120
I could do that--

00:40:14.120 --> 00:40:16.140
in a way that we wouldn't
be able to do otherwise.

00:40:16.140 --> 00:40:18.400
To be able to have each of these
schools that you can

00:40:18.400 --> 00:40:20.710
then click on and you can
find your school.

00:40:20.710 --> 00:40:23.400
And we started zooming
into where I live,

00:40:23.400 --> 00:40:26.282
which is down here.

00:40:26.282 --> 00:40:28.090
Let's see if I can
zoom in to that.

00:40:32.500 --> 00:40:34.360
So each of these dots is
a secondary school.

00:40:34.360 --> 00:40:38.490
And secondary school in the UK
is where you go to from 10 to

00:40:38.490 --> 00:40:43.134
18, and you do A levels
there and so on.

00:40:43.134 --> 00:40:45.666
And the fact that you can get
really close there-- let me

00:40:45.666 --> 00:40:48.254
just find our school.

00:40:52.190 --> 00:40:53.800
And for each school you've got,
you can pull all that

00:40:53.800 --> 00:40:56.860
stuff up and you can say how
much-- so that school there is

00:40:56.860 --> 00:40:59.520
8,000 pounds per pupil.

00:40:59.520 --> 00:41:01.462
And you've got the results there
and you can start to

00:41:01.462 --> 00:41:04.640
compare real-life data and
actually tell you something in

00:41:04.640 --> 00:41:07.940
a useful way for us to be able
to make that data come alive

00:41:07.940 --> 00:41:10.400
for people.

00:41:10.400 --> 00:41:13.160
But then to just use it in a
standard way every day is

00:41:13.160 --> 00:41:13.980
really useful too.

00:41:13.980 --> 00:41:16.820
So when they had the Fukushima
accident in Japan, being able

00:41:16.820 --> 00:41:18.240
to pair our data and
then use it.

00:41:18.240 --> 00:41:21.833
To So you can highlight
different events-- let's just

00:41:21.833 --> 00:41:24.650
go to the full-screen one,
but that's too small--

00:41:24.650 --> 00:41:28.080
but the fact that they store
this stuff up and they pick on

00:41:28.080 --> 00:41:30.370
different places is just a
really useful thing for us.

00:41:30.370 --> 00:41:32.506
And we can update this
and add to it and it

00:41:32.506 --> 00:41:33.040
will display on it.

00:41:33.040 --> 00:41:34.190
Because traditionally--

00:41:34.190 --> 00:41:36.640
and this might sound what
you guys want--

00:41:36.640 --> 00:41:39.190
every time we've done a map
online, has meant somebody in

00:41:39.190 --> 00:41:44.220
Flash manually drawing each
place or drawing each border.

00:41:44.220 --> 00:41:46.600
So it's quite new for us to be
able to have stuff ready on

00:41:46.600 --> 00:41:48.690
spreadsheets and to be able
to do it without involving

00:41:48.690 --> 00:41:50.800
developer time is just
a really good thing.

00:41:53.980 --> 00:41:55.920
And then here's another
example of big data.

00:41:55.920 --> 00:41:57.530
So this is every--

00:41:57.530 --> 00:42:00.430
the government in the UK is
obsessed with open data mode

00:42:00.430 --> 00:42:02.880
because it's a very easy way
to appear transparent.

00:42:02.880 --> 00:42:04.880
And so what they start doing
is publishing things like

00:42:04.880 --> 00:42:08.510
every public building in England
and Wales and what its

00:42:08.510 --> 00:42:09.580
carbon emissions are.

00:42:09.580 --> 00:42:11.730
The problem was, they wouldn't
release the full data.

00:42:11.730 --> 00:42:13.730
So somebody put in a free
information request and they

00:42:13.730 --> 00:42:15.900
got this and then they
sent us the data.

00:42:15.900 --> 00:42:18.390
And we use Fusion Tables
to map that.

00:42:18.390 --> 00:42:19.400
And what you've e there
is you've got

00:42:19.400 --> 00:42:21.550
thousands of public buildings.

00:42:21.550 --> 00:42:23.240
And the fact that we
can show those all.

00:42:23.240 --> 00:42:24.830
We can color code
them all up by

00:42:24.830 --> 00:42:27.610
different types of emissions.

00:42:27.610 --> 00:42:29.090
And you can see by how much.

00:42:29.090 --> 00:42:31.270
You've got a lot of
buildings there.

00:42:31.270 --> 00:42:33.970
The red are the worst
ones, of course.

00:42:33.970 --> 00:42:38.687
So let's see if we can go
into some of these.

00:42:38.687 --> 00:42:41.180
And you can see where all the
public buildings are as well.

00:42:41.180 --> 00:42:45.420
So the type of building
is on the side.

00:42:45.420 --> 00:42:47.580
And you can show the information
quite quickly, and

00:42:47.580 --> 00:42:49.990
creating something like that
took about 20 minutes.

00:42:49.990 --> 00:42:53.200
And again, that's really,
really useful for us.

00:42:53.200 --> 00:42:56.040
And then we've got the
Wikileaks data.

00:42:56.040 --> 00:42:59.650
Now obviously, Wikileaks was
a lot, a lot of data.

00:42:59.650 --> 00:43:00.460
There were three releases.

00:43:00.460 --> 00:43:03.250
There was Afghanistan, Iraq,
and the big cables

00:43:03.250 --> 00:43:05.470
release at the end.

00:43:05.470 --> 00:43:07.940
With the Afghanistan
data, that was

00:43:07.940 --> 00:43:09.140
about 90,000 instances.

00:43:09.140 --> 00:43:13.930
The Iraq data was 391,000
instances, which makes the

00:43:13.930 --> 00:43:15.530
Iraq war the most documented
war in history.

00:43:15.530 --> 00:43:17.840
It was in the Pentagon papers,
which came out about Vietnam

00:43:17.840 --> 00:43:19.400
was 7,000 documents.

00:43:19.400 --> 00:43:21.690
So I think 400,000 documents, we
know everything there is to

00:43:21.690 --> 00:43:22.350
know about that war.

00:43:22.350 --> 00:43:25.780
And it became obvious quite
quickly the big story was this

00:43:25.780 --> 00:43:27.290
huge numbers of people
that died.

00:43:27.290 --> 00:43:30.880
Even in this database, where
109,000 people died.

00:43:30.880 --> 00:43:34.640
That covers everything from
coalition troops through to

00:43:34.640 --> 00:43:35.865
Iraqi civilians.

00:43:35.865 --> 00:43:37.360
And we did two things
for this.

00:43:37.360 --> 00:43:40.480
We did this thing here, which
is quite beautiful.

00:43:40.480 --> 00:43:42.430
Took a lot of technical
time up.

00:43:42.430 --> 00:43:44.260
It's basically just presenting
one day in

00:43:44.260 --> 00:43:45.240
the life of the war.

00:43:45.240 --> 00:43:48.230
We had a Guardian correspondent
writing this

00:43:48.230 --> 00:43:49.640
lovely piece to go with it.

00:43:49.640 --> 00:43:51.680
You could click on different
events and you could walk

00:43:51.680 --> 00:43:52.880
through it and so on.

00:43:52.880 --> 00:43:55.640
And we did that.

00:43:55.640 --> 00:43:57.890
And then I had this dataset,
which I've been using to do

00:43:57.890 --> 00:43:59.580
some analysis on, which was
basically every instance in

00:43:59.580 --> 00:44:00.950
which somebody had died.

00:44:00.950 --> 00:44:03.510
And there was 66,000 instances
in which at

00:44:03.510 --> 00:44:04.850
least one person died.

00:44:04.850 --> 00:44:06.510
And we thought, maybe we should
just put that on a

00:44:06.510 --> 00:44:08.280
Fusion Table to see
what it shows us.

00:44:08.280 --> 00:44:10.530
It might give us something
we can show on the site.

00:44:10.530 --> 00:44:15.560
It wasn't something, to be
honest, we spent much time on.

00:44:15.560 --> 00:44:18.860
And this is what we got back.

00:44:18.860 --> 00:44:21.160
And this is the most
popular interactive

00:44:21.160 --> 00:44:22.610
map we've ever done.

00:44:22.610 --> 00:44:25.810
Basically, each of these dots
here is an instance where at

00:44:25.810 --> 00:44:26.850
least one person died.

00:44:26.850 --> 00:44:28.790
And because there are so many,
it gives you a real

00:44:28.790 --> 00:44:29.995
sense of the war.

00:44:29.995 --> 00:44:34.520
And it tells you more than you
could write 15,000 words on

00:44:34.520 --> 00:44:35.890
how many people died in Iraq.

00:44:35.890 --> 00:44:37.750
But to actually see them
like that totally

00:44:37.750 --> 00:44:39.135
brings it to life.

00:44:39.135 --> 00:44:41.490
Now anybody got any thoughts on
which was the most popular

00:44:41.490 --> 00:44:44.116
out of those two interactives?

00:44:44.116 --> 00:44:45.770
It was this one.

00:44:45.770 --> 00:44:47.675
And I think the reason is was
this one, the one that we

00:44:47.675 --> 00:44:51.120
haven't spent all that technical
time on, was because

00:44:51.120 --> 00:44:53.900
it allows people to explore
the data for themselves.

00:44:53.900 --> 00:44:57.150
A lot of the interest in data at
the moment is about people

00:44:57.150 --> 00:45:00.840
feeling empowered by data, of
being able to find out about

00:45:00.840 --> 00:45:02.250
things they didn't understand
about before

00:45:02.250 --> 00:45:03.130
and to discover things.

00:45:03.130 --> 00:45:05.480
And that's exactly what
this allows us to do.

00:45:05.480 --> 00:45:07.085
It gives you a way to explore
the data yourself.

00:45:07.085 --> 00:45:08.700
And you can zoom in and out.

00:45:08.700 --> 00:45:11.560
But the great thing about
zooming out is it gives you a

00:45:11.560 --> 00:45:13.440
sense of the war in
terms of patterns.

00:45:13.440 --> 00:45:15.150
And you see, you're already
starting to get these

00:45:15.150 --> 00:45:16.500
groupings as you pull out.

00:45:16.500 --> 00:45:18.400
See these roads along
here where there

00:45:18.400 --> 00:45:20.576
were lots of IED attacks.

00:45:20.576 --> 00:45:22.470
And you get a real
sense of what's

00:45:22.470 --> 00:45:23.600
happening across the country.

00:45:23.600 --> 00:45:25.360
Now, if you're driving down that
road every day, you might

00:45:25.360 --> 00:45:28.670
feel a little bit nervous,
for instance.

00:45:28.670 --> 00:45:32.170
And that tells you the story
of the war in a way that

00:45:32.170 --> 00:45:34.535
thousands of words wouldn't
necessarily do.

00:45:34.535 --> 00:45:36.800
And then one thing we've been
experimenting a lot with

00:45:36.800 --> 00:45:39.626
recently is the auto-map
countries.

00:45:39.626 --> 00:45:45.410
Now again, for us to draw a map,
traditionally it's been

00:45:45.410 --> 00:45:49.150
our Flash guy drawing it, or we
have some stuff where our

00:45:49.150 --> 00:45:50.830
developers have done stuff,
but for me to be able to

00:45:50.830 --> 00:45:53.010
create a map like this
is a new thing.

00:45:53.010 --> 00:45:55.135
And what this is is that our
Foreign Commerce Office, which

00:45:55.135 --> 00:45:58.040
is the equivalent of the State
Department here, they issue

00:45:58.040 --> 00:46:00.355
travel warnings about
countries that

00:46:00.355 --> 00:46:01.880
are safe to go to.

00:46:01.880 --> 00:46:07.990
And we thought well, this is
just after Egypt and Libya

00:46:07.990 --> 00:46:09.930
kicked off and so on.

00:46:09.930 --> 00:46:12.820
We thought, why don't we just
take snapshots of the Foreign

00:46:12.820 --> 00:46:14.405
Commerce Office's
travel warnings?

00:46:14.405 --> 00:46:16.980
So we scraped the site and we
graded the travel warnings

00:46:16.980 --> 00:46:21.210
from don't go here at all to
you can go here, it's fine.

00:46:21.210 --> 00:46:23.026
And this is what we got.

00:46:23.026 --> 00:46:26.080
And the great thing, actually,
in terms of our style, besides

00:46:26.080 --> 00:46:27.770
being a million miles away from
how we would start all

00:46:27.770 --> 00:46:30.275
that math anyway, we would use
those kind of borders, we

00:46:30.275 --> 00:46:32.595
would use 100 percent
opacity anyway.

00:46:32.595 --> 00:46:35.000
And the great thing is you click
on that and you convert

00:46:35.000 --> 00:46:38.730
the HTML and that tells
you don't go to Libya.

00:46:38.730 --> 00:46:43.870
Or maybe don't go to Afghanistan
either, but you

00:46:43.870 --> 00:46:47.376
can go to Iraq or Pakistan
partial.

00:46:51.620 --> 00:46:52.650
And so it just gives you--

00:46:52.650 --> 00:46:54.200
it's just a useful,
yeah, it's all

00:46:54.200 --> 00:46:55.970
troubled, don't go to Iraq.

00:46:55.970 --> 00:46:57.880
Just ignore the what's
on the map.

00:46:57.880 --> 00:47:00.620
So for us to be able to create
something like that and to put

00:47:00.620 --> 00:47:03.500
a story up quite quickly is just
really, really good thing

00:47:03.500 --> 00:47:06.010
and this is really
what we're about.

00:47:06.010 --> 00:47:11.010
And then there's this
one here, which

00:47:11.010 --> 00:47:11.980
Kathryn mentioned earlier.

00:47:11.980 --> 00:47:14.640
Now what happens is, the
government every four years

00:47:14.640 --> 00:47:16.330
they do this thing called
deprivation indices.

00:47:16.330 --> 00:47:19.810
And they're really important in
the UK because they're how

00:47:19.810 --> 00:47:22.660
the government hands out
all its funding.

00:47:22.660 --> 00:47:25.750
So it's basically a measure
of how poor people are in

00:47:25.750 --> 00:47:26.515
different parts of
the country.

00:47:26.515 --> 00:47:29.400
But of course they don't use a
boundary that's recognized in

00:47:29.400 --> 00:47:32.480
any other way possible.

00:47:32.480 --> 00:47:37.000
In the UK we have counties,
which are quite big.

00:47:37.000 --> 00:47:38.970
They're a lot bigger than the
counties that you have here.

00:47:38.970 --> 00:47:41.707
We also have wards, which may be
similar to the counties you

00:47:41.707 --> 00:47:43.140
have here in the States.

00:47:43.140 --> 00:47:44.460
Our counties are more
like states,

00:47:44.460 --> 00:47:45.270
just to confuse things.

00:47:45.270 --> 00:47:48.300
But they also have these little
areas, which are only

00:47:48.300 --> 00:47:50.540
used for the states, they're
called lowest input-output

00:47:50.540 --> 00:47:53.190
areas, which are basically
small things that maybe

00:47:53.190 --> 00:47:55.060
10,000 people go.

00:47:55.060 --> 00:47:57.700
So for us to manually map that
would be impossible.

00:47:57.700 --> 00:47:59.620
But it's not that we can embed
the official version.

00:47:59.620 --> 00:48:01.470
This is the official website.

00:48:01.470 --> 00:48:05.600
And if you want to find out
about any of these places,

00:48:05.600 --> 00:48:08.810
it's slow, it's clunky,
you don't know what

00:48:08.810 --> 00:48:10.040
these places are like.

00:48:10.040 --> 00:48:11.720
It's trying to load here.

00:48:11.720 --> 00:48:13.380
It's pretty poor.

00:48:13.380 --> 00:48:16.990
And it doesn't give you a
picture of the whole country

00:48:16.990 --> 00:48:18.530
as a whole, you can't see the
whole country at all.

00:48:18.530 --> 00:48:20.550
It doesn't rank it.

00:48:20.550 --> 00:48:24.100
It just allows you to zoom down
eventually, see how slow

00:48:24.100 --> 00:48:25.370
it is there.

00:48:25.370 --> 00:48:27.220
OK, we're getting somewhere.

00:48:27.220 --> 00:48:29.250
Anyway, it's pretty poor.

00:48:29.250 --> 00:48:31.840
So we thought, we've
got all that data.

00:48:31.840 --> 00:48:33.400
It'd be great if we could
do something with it.

00:48:33.400 --> 00:48:36.780
So firstly, we had to find the
polygon data, which is a bit

00:48:36.780 --> 00:48:37.430
of a pain there.

00:48:37.430 --> 00:48:39.910
Eventually we found
an academic.

00:48:39.910 --> 00:48:43.390
So each of those little areas
is super out there, but

00:48:43.390 --> 00:48:45.690
imagine having data
at that granular

00:48:45.690 --> 00:48:47.270
level is really useful.

00:48:47.270 --> 00:48:50.010
But we had to get the polygon
data, which was difficult, but

00:48:50.010 --> 00:48:53.170
once we had that data, it
meant we could create

00:48:53.170 --> 00:48:56.690
something like this.

00:48:56.690 --> 00:48:59.640
Click on it and go
to full screen.

00:48:59.640 --> 00:49:02.435
So basically, that's everywhere
in England and

00:49:02.435 --> 00:49:06.780
Wales, and the deeper the reds
get, the poorer it is and the

00:49:06.780 --> 00:49:11.100
deeper the blue get,
the richer it is.

00:49:11.100 --> 00:49:13.970
So that's London, it's kicking
off of London, and

00:49:13.970 --> 00:49:14.830
[UNINTELLIGIBLE]

00:49:14.830 --> 00:49:16.155
is the poorest place
in Britain.

00:49:16.155 --> 00:49:19.215
At least now I know
where it is.

00:49:19.215 --> 00:49:22.650
But you see, these areas out
here are quite wealthy.

00:49:22.650 --> 00:49:25.210
And here you got the
score that was

00:49:25.210 --> 00:49:26.230
covered up by the school.

00:49:26.230 --> 00:49:28.800
You've got very explanatory data
there, and see over here,

00:49:28.800 --> 00:49:30.050
it's quite wealthy at all.

00:49:33.665 --> 00:49:36.990
So the great thing is to be able
to show that kind of data

00:49:36.990 --> 00:49:39.390
and be able to illustrate
it is really, really a

00:49:39.390 --> 00:49:40.690
new thing for us.

00:49:40.690 --> 00:49:43.485
And it gives you a picture of
the country you can't get in

00:49:43.485 --> 00:49:43.940
any other way.

00:49:43.940 --> 00:49:46.300
And it's better than the
official site, so what's not

00:49:46.300 --> 00:49:47.370
to like about that?

00:49:47.370 --> 00:49:49.550
I'm going to show you one last
thing we did last week.

00:49:49.550 --> 00:49:52.110
We're running out of
time, aren't we?

00:49:52.110 --> 00:49:52.570
OK.

00:49:52.570 --> 00:49:55.950
So last week, we had three
major elections

00:49:55.950 --> 00:49:57.900
in the UK on Thursday.

00:49:57.900 --> 00:50:01.270
There were two devolved
parliaments, and Wales and

00:50:01.270 --> 00:50:02.160
Scotland elected
their members.

00:50:02.160 --> 00:50:04.630
But we had to vote in
our voting system.

00:50:04.630 --> 00:50:06.640
At the moment in the UK, we
vote first past the post,

00:50:06.640 --> 00:50:09.490
which basically the person who
wins the most votes in the

00:50:09.490 --> 00:50:11.340
seat wins, that's
how it works.

00:50:11.340 --> 00:50:14.620
And but they wanted to change
to a more proportional

00:50:14.620 --> 00:50:16.070
system called AV.

00:50:16.070 --> 00:50:19.620
It didn't win, it was a disaster
for the campaigners.

00:50:19.620 --> 00:50:23.020
But basically we wanted to
create a live results map.

00:50:23.020 --> 00:50:24.630
We don't have much time,
so we thought how are

00:50:24.630 --> 00:50:25.710
we going to do this?

00:50:25.710 --> 00:50:27.760
So we basically created
a merged table.

00:50:27.760 --> 00:50:31.080
We merged together one map which
showed-- and the problem

00:50:31.080 --> 00:50:34.620
with this, the tricky thing
about it is that in England we

00:50:34.620 --> 00:50:37.660
had local authorities, and in
Scotland we had Parliament

00:50:37.660 --> 00:50:39.820
seats, and in Wales we all
had Parliament seats.

00:50:39.820 --> 00:50:41.920
So we managed to put this all
together using the Fusion

00:50:41.920 --> 00:50:43.340
Tables merge thing.

00:50:43.340 --> 00:50:46.170
And then we had the data in
separate sheets, merge that

00:50:46.170 --> 00:50:47.090
together too.

00:50:47.090 --> 00:50:49.790
And basically all we had to do
to change this map, to make it

00:50:49.790 --> 00:50:53.030
live, was every 10 minutes just
update the data on the

00:50:53.030 --> 00:50:53.450
data sheets.

00:50:53.450 --> 00:50:56.310
And that's all we had to do,
just load a new spreadsheet.

00:50:56.310 --> 00:50:59.650
We were getting a spreadsheet
download of the results.

00:50:59.650 --> 00:51:00.880
Just had to upload that.

00:51:00.880 --> 00:51:02.710
And so to turn that map
into a live map.

00:51:02.710 --> 00:51:04.120
And people were using
it during the night.

00:51:04.120 --> 00:51:07.510
Every time it was like
a 30-second job.

00:51:07.510 --> 00:51:11.590
So for us to update that, the
great thing about the

00:51:11.590 --> 00:51:14.200
turnaround quite quickly.

00:51:14.200 --> 00:51:18.160
And we used the same colors and
styles for the newspaper.

00:51:18.160 --> 00:51:19.270
It just made it consistent.

00:51:19.270 --> 00:51:21.890
And you can do this
nice stuff.

00:51:21.890 --> 00:51:26.430
Everybody voted no apart
from Glasgow.

00:51:26.430 --> 00:51:27.440
There you go.

00:51:27.440 --> 00:51:32.720
These purples were the only
places that voted yes.

00:51:32.720 --> 00:51:35.210
Edinburgh and Glasgow and a
couple of places in London.

00:51:35.210 --> 00:51:36.320
There you go.

00:51:36.320 --> 00:51:39.000
I suppose I should say that
what we're about as

00:51:39.000 --> 00:51:41.920
journalists is that telling
stories and making

00:51:41.920 --> 00:51:43.530
data come to life.

00:51:43.530 --> 00:51:45.940
And all Fusion Tables
have done is give us

00:51:45.940 --> 00:51:46.825
a tool to do that.

00:51:46.825 --> 00:51:49.454
Thanks a lot.

00:51:49.454 --> 00:51:50.704
[APPLAUSE]

00:52:00.150 --> 00:52:00.600
KATHRYN HURLEY: All right.

00:52:00.600 --> 00:52:04.150
So just want to go through a
quick summary of what we

00:52:04.150 --> 00:52:05.470
showed you today.

00:52:05.470 --> 00:52:08.660
So I talked about new features
for trusted testers in the

00:52:08.660 --> 00:52:10.510
Fusion Tables API.

00:52:10.510 --> 00:52:13.470
These include map feature
styling and Info window

00:52:13.470 --> 00:52:14.590
customization.

00:52:14.590 --> 00:52:18.500
And James McGill talked about
the new feature in the Google

00:52:18.500 --> 00:52:22.300
Maps API and its dynamic
styling.

00:52:22.300 --> 00:52:26.270
And I just want to provide
a few links for everyone.

00:52:26.270 --> 00:52:30.100
Links to Fusion Tables, Fusion
Table APIs, et cetera.

00:52:30.100 --> 00:52:35.040
I'll leave this screen up here
while we take some questions.

00:52:35.040 --> 00:52:39.944
So James McGill, if you
want to come up.

00:52:39.944 --> 00:52:43.630
And so we have a few minutes
for questions.

00:52:43.630 --> 00:52:47.840
And you can also ask questions
of Roger as well.

00:52:47.840 --> 00:52:51.560
AUDIENCE MEMBER 1: Just want
confirm the map is generated

00:52:51.560 --> 00:52:58.640
through the styling of
the cached tiles?

00:52:58.640 --> 00:52:59.730
JAMES MCGILL: Yes, through
the dynamic styling.

00:52:59.730 --> 00:53:02.200
AUDIENCE MEMBER 1: So if you do
the dynamic styling, you'd

00:53:02.200 --> 00:53:03.795
also generate the tiles.

00:53:03.795 --> 00:53:04.680
JAMES MCGILL: Yes,
that's correct.

00:53:04.680 --> 00:53:06.920
So you still get that
performance gain, even with

00:53:06.920 --> 00:53:07.920
the dynamic styles.

00:53:07.920 --> 00:53:10.900
AUDIENCE MEMBER 1: In terms of
tiles size of dimension, we

00:53:10.900 --> 00:53:15.720
still only have 128x128 or--

00:53:15.720 --> 00:53:17.990
JAMES MCGILL: It's 256x256,
but it's just an

00:53:17.990 --> 00:53:18.410
implementation.

00:53:18.410 --> 00:53:20.520
it's not something that you
need to worry about.

00:53:20.520 --> 00:53:24.030
AUDIENCE MEMBER 1: OK, what if
I want to push to the mobile.

00:53:24.030 --> 00:53:29.420
Would you allow us
to do 64x64 or--

00:53:29.420 --> 00:53:31.510
JAMES MCGILL: We've found that
the current tiles work really

00:53:31.510 --> 00:53:33.430
well on mobile.

00:53:33.430 --> 00:53:36.450
They come down relatively
fast and you get that--

00:53:36.450 --> 00:53:38.600
because you're not dealing
with having the number of

00:53:38.600 --> 00:53:39.185
client-side objects--

00:53:39.185 --> 00:53:41.610
the performance is going
to be better on mobile.

00:53:41.610 --> 00:53:44.300
AUDIENCE MEMBER 1: Second
really quick question.

00:53:44.300 --> 00:53:46.080
The Fusion Tables, the
geometry type you

00:53:46.080 --> 00:53:47.860
mentioned is KML.

00:53:47.860 --> 00:53:51.620
Any other geometry types
you support?

00:53:51.620 --> 00:53:56.420
KATHRYN HURLEY: So you can enter
street addresses if you

00:53:56.420 --> 00:53:58.950
have location data street
addresses or

00:53:58.950 --> 00:54:03.200
lat-longs or points.

00:54:03.200 --> 00:54:04.500
What else?

00:54:04.500 --> 00:54:06.720
What was that?

00:54:06.720 --> 00:54:07.420
Oh, other tools.

00:54:07.420 --> 00:54:12.120
And if you have shape files, you
can import shape files to

00:54:12.120 --> 00:54:14.420
Fusion Tables using a tool
called Shape Escape.

00:54:14.420 --> 00:54:16.720
So it's shpescape.com.

00:54:16.720 --> 00:54:16.920
AUDIENCE MEMBER 1: All right.

00:54:16.920 --> 00:54:19.680
Thanks.

00:54:19.680 --> 00:54:20.420
KATHRYN HURLEY: I think
over there.

00:54:20.420 --> 00:54:21.715
AUDIENCE MEMBER 2: Yeah,
I just have a question.

00:54:21.715 --> 00:54:25.440
You showed in the API on how
to enter data one at a time

00:54:25.440 --> 00:54:27.380
into the Fusion Tables.

00:54:27.380 --> 00:54:29.280
Is there a bulk API for loading

00:54:29.280 --> 00:54:30.940
gigabytes worth of data?

00:54:30.940 --> 00:54:34.170
KATHRYN HURLEY: You can send up
to 500 inserts at the same

00:54:34.170 --> 00:54:36.050
time, just separate them
with semicolons.

00:54:36.050 --> 00:54:38.490
AUDIENCE MEMBER 2: Do you
have to then check

00:54:38.490 --> 00:54:39.970
and resend the 500?

00:54:39.970 --> 00:54:43.980
I can obviously see network
timeout or success-failure.

00:54:43.980 --> 00:54:48.450
That being if you had to insert,
let's say, 10,000 data

00:54:48.450 --> 00:54:54.105
points into a Fusion Table,
so 500 at a time.

00:54:54.105 --> 00:54:56.530
Something times out, check
for a response,

00:54:56.530 --> 00:54:58.230
have to resend those?

00:54:58.230 --> 00:55:02.400
Is there just a bulk upload type
of facility available?

00:55:02.400 --> 00:55:05.390
KATHRYN HURLEY: So if the
request is successful, it

00:55:05.390 --> 00:55:06.090
returns the row IDs.

00:55:06.090 --> 00:55:09.860
If not, then the inserts did
fail and you have to resend

00:55:09.860 --> 00:55:10.680
all those inserts.

00:55:10.680 --> 00:55:11.070
AUDIENCE MEMBER 2: Right.

00:55:11.070 --> 00:55:13.860
But 500 is the maximum at a
time that you can upload.

00:55:13.860 --> 00:55:14.490
KATHRYN HURLEY: At this point.

00:55:14.490 --> 00:55:17.250
But It would make a great
feature request to be able to

00:55:17.250 --> 00:55:18.360
allow more.

00:55:18.360 --> 00:55:20.610
Yes.

00:55:20.610 --> 00:55:22.495
AUDIENCE MEMBER 3: Question
to James.

00:55:22.495 --> 00:55:27.430
In Fusion Tables Layer, if you
have point data, and lots of

00:55:27.430 --> 00:55:31.300
it, and you're using tiling, how
do you manage to generate

00:55:31.300 --> 00:55:36.220
tiles that don't split the
points and are able to show

00:55:36.220 --> 00:55:38.860
them as whole.

00:55:38.860 --> 00:55:39.960
JAMES MCGILL: Across
tile boundaries?

00:55:39.960 --> 00:55:40.720
AUDIENCE MEMBER 3: Yeah.

00:55:40.720 --> 00:55:44.020
JAMES MCGILL: So we use a method
that ensure that if a

00:55:44.020 --> 00:55:47.560
point is selected in one tile,
it's also selected in all

00:55:47.560 --> 00:55:48.980
other tiles.

00:55:48.980 --> 00:55:51.360
So that guarantees that if that
point crosses the border

00:55:51.360 --> 00:55:54.370
of multiple tiles because it
would be present in both tiles

00:55:54.370 --> 00:55:56.950
or all four tiles, it'll
render correctly.

00:55:56.950 --> 00:56:00.980
So people viewing your site,
with the exception of the fact

00:56:00.980 --> 00:56:03.010
that Fusion Tables Layer doesn't
let you drag your

00:56:03.010 --> 00:56:05.340
markers, for example, they
shouldn't be able to tell the

00:56:05.340 --> 00:56:07.890
difference between Fusion Tables
Layer and you having

00:56:07.890 --> 00:56:10.950
created these points manually.

00:56:10.950 --> 00:56:11.670
AUDIENCE MEMBER 4: Hi.

00:56:11.670 --> 00:56:16.020
I have KML that is using the
time line feature, modeling

00:56:16.020 --> 00:56:20.070
311 data, pot holes, graffiti,
abandoned cars,

00:56:20.070 --> 00:56:20.670
that type of stuff.

00:56:20.670 --> 00:56:22.840
I have about 10 years
of that model for

00:56:22.840 --> 00:56:24.210
showing in Google Earth.

00:56:24.210 --> 00:56:27.240
Can I upload that to Fusion
Tables and still have the time

00:56:27.240 --> 00:56:29.720
line feature?

00:56:29.720 --> 00:56:32.050
KATHRYN HURLEY: We do have
a story line, but is this

00:56:32.050 --> 00:56:33.820
something that you want
to show on a map?

00:56:33.820 --> 00:56:35.950
AUDIENCE MEMBER 4: Yeah, I want
them just like they do in

00:56:35.950 --> 00:56:36.780
Google Earth.

00:56:36.780 --> 00:56:39.850
I want to be able to throw all
those 10 years and close and

00:56:39.850 --> 00:56:43.440
open up when the things were
going on, abandoned cars,

00:56:43.440 --> 00:56:45.530
graffiti, where they were at
and all the rest of that.

00:56:45.530 --> 00:56:47.790
Is Fusion Tables supporting
the time line?

00:56:47.790 --> 00:56:50.100
KATHRYN HURLEY: No, you can't
do anything like that in

00:56:50.100 --> 00:56:51.410
Fusion Tables.

00:56:51.410 --> 00:56:53.480
JAMES MCGILL: But you could
use, for example, some

00:56:53.480 --> 00:56:56.400
JavaScript Maps API
to achieve, I

00:56:56.400 --> 00:56:59.400
think, the same effect.

00:56:59.400 --> 00:57:00.960
AUDIENCE MEMBER 5: The political
boundaries you

00:57:00.960 --> 00:57:04.660
showed, is it something that
Google offers for all the

00:57:04.660 --> 00:57:07.460
countries or something you
expect the user to create

00:57:07.460 --> 00:57:09.230
those political boundaries,
different

00:57:09.230 --> 00:57:12.180
states for each country?

00:57:12.180 --> 00:57:15.300
JAMES MCGILL: So Google provides
Fusion Tables, but

00:57:15.300 --> 00:57:18.400
the data is generally
uploaded by users.

00:57:18.400 --> 00:57:21.580
The advantage is that you can
mark that as public, so you

00:57:21.580 --> 00:57:24.070
could upload some political
boundaries and allow other

00:57:24.070 --> 00:57:26.660
people to fuse that data
with their own data.

00:57:26.660 --> 00:57:30.300
And we've seen a lot of people
have uploaded their state

00:57:30.300 --> 00:57:32.670
borders, country borders,
political borders and other

00:57:32.670 --> 00:57:35.300
people making good use of this,
combining it with other

00:57:35.300 --> 00:57:37.270
information they have
to make these maps.

00:57:37.270 --> 00:57:38.020
AUDIENCE MEMBER 5: I see.

00:57:38.020 --> 00:57:40.550
And one more question.

00:57:40.550 --> 00:57:43.780
If our Fusion Table, let's say I
have it on 1 million rows of

00:57:43.780 --> 00:57:47.090
data, is there a way the person
who's using it, they

00:57:47.090 --> 00:57:48.980
can only see a subset
of the data?

00:57:48.980 --> 00:57:51.330
Like I'm logging in from
northeast, I can only see

00:57:51.330 --> 00:57:52.600
northeast data.

00:57:52.600 --> 00:57:54.800
Somebody's logging in from
southeast, they can only see

00:57:54.800 --> 00:57:55.870
southeast data.

00:57:55.870 --> 00:57:59.900
But the data that's is the table
has all the data I need.

00:57:59.900 --> 00:58:01.980
JAMES MCGILL: So you could use
the example I gave where I

00:58:01.980 --> 00:58:06.330
restricted it only show points
where age was greater than 50.

00:58:06.330 --> 00:58:09.500
You can of course use spatial
queries as well, so you can

00:58:09.500 --> 00:58:12.000
get the current location of the
user and filter it to show

00:58:12.000 --> 00:58:14.640
only points within
a certain radius.

00:58:14.640 --> 00:58:16.430
Or if you had a bounding box
for the area in which you

00:58:16.430 --> 00:58:18.310
wanted, you could filter to
only show those points, so

00:58:18.310 --> 00:58:19.990
yeah, I think that's possible.

00:58:19.990 --> 00:58:20.425
AUDIENCE MEMBER 5: Thank you.

00:58:20.425 --> 00:58:21.840
Good presentation.

00:58:21.840 --> 00:58:23.531
JAMES MCGILL: Thank you.

00:58:23.531 --> 00:58:26.125
AUDIENCE MEMBER 6: Does
Fusion Tables--

00:58:26.125 --> 00:58:31.885
can I optimize any KML
that I put into it?

00:58:31.885 --> 00:58:33.540
Let me rephrase.

00:58:33.540 --> 00:58:37.950
If I have highly detailed KML,
normally huge files, if I put

00:58:37.950 --> 00:58:40.210
them into Fusion Tables, will
that be optimized when I try

00:58:40.210 --> 00:58:41.370
to build a map?

00:58:41.370 --> 00:58:44.430
Or do I need to strip that
KML and simplify it?

00:58:44.430 --> 00:58:46.590
JAMES MCGILL: So we're talking
about simplifying polygons?

00:58:46.590 --> 00:58:46.850
AUDIENCE MEMBER 6: Correct.

00:58:46.850 --> 00:58:47.320
JAMES MCGILL: Yes.

00:58:47.320 --> 00:58:50.060
So, the idea is that when that
data is uploaded to Fusion

00:58:50.060 --> 00:58:53.580
Tables, we do offline
simplification to make sure

00:58:53.580 --> 00:58:55.870
that it shows efficiently
on a map.

00:58:55.870 --> 00:58:57.570
So you don't need to worry about
that as long as you can

00:58:57.570 --> 00:59:00.736
keep the KML within
a size that can be

00:59:00.736 --> 00:59:01.820
uploaded to Fusion Tables.

00:59:01.820 --> 00:59:03.966
AUDIENCE MEMBER 6: Yeah, I'm
not sure I can, but that's

00:59:03.966 --> 00:59:04.980
outstanding either way.

00:59:04.980 --> 00:59:06.530
JAMES MCGILL: Or consider
splitting it into multiple

00:59:06.530 --> 00:59:09.230
files, adding multiple layers,
and that's another way to

00:59:09.230 --> 00:59:09.810
aggregate that.

00:59:09.810 --> 00:59:11.302
AUDIENCE MEMBER 6: But
still, that sounds

00:59:11.302 --> 00:59:12.655
like a great feature.

00:59:16.190 --> 00:59:19.710
AUDIENCE MEMBER 7: So for
rendering point data using the

00:59:19.710 --> 00:59:23.430
Fusion Table Layer, do you have
any plans to allow for

00:59:23.430 --> 00:59:26.130
custom images like custom
marker images?

00:59:26.130 --> 00:59:29.090
Because currently you can show
dots of different colors and

00:59:29.090 --> 00:59:31.850
different sizes, but if
we could upload--

00:59:31.850 --> 00:59:33.750
JAMES MCGILL: I think that would
be compelling to file a

00:59:33.750 --> 00:59:36.860
feature request. And if that's
something enough people are

00:59:36.860 --> 00:59:39.770
interested in, then maybe it's
something we'll look at.

00:59:39.770 --> 00:59:42.930
We're actually out of time, but
think Kathryn and I will

00:59:42.930 --> 00:59:43.900
be hanging around I/O.

00:59:43.900 --> 00:59:44.870
We'll be at the party tonight.

00:59:44.870 --> 00:59:47.620
So if you have any more
questions, come up to us after

00:59:47.620 --> 00:59:49.135
and feel free to ask
those questions.

00:59:49.135 --> 00:59:50.385
Thank you.

