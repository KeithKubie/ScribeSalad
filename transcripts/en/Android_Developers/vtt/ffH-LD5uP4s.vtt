WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.464
[MUSIC PLAYING]

00:00:07.450 --> 00:00:09.110
MATTHEW GHARRITY:
Let's get started.

00:00:09.110 --> 00:00:10.029
My name is Matthew.

00:00:10.029 --> 00:00:12.070
I'm actually on the Android
Studio Platform team.

00:00:12.070 --> 00:00:15.100
That means I work on things like
product stability, [INAUDIBLE]

00:00:15.100 --> 00:00:16.822
integration.

00:00:16.822 --> 00:00:19.030
And one of the most exciting
things I get to work on,

00:00:19.030 --> 00:00:21.430
besides product stability, is
something called Android Lint.

00:00:21.430 --> 00:00:23.638
So that's what I'm here to
talk about with you today.

00:00:23.638 --> 00:00:26.209
So Android Lint is actually
a very powerful tool.

00:00:26.209 --> 00:00:28.000
I think a lot of you
already know about it.

00:00:28.000 --> 00:00:30.416
But you might not know all the
cool things that it can do.

00:00:30.416 --> 00:00:34.180
So despite the name, it's
not just a linting tool.

00:00:34.180 --> 00:00:36.180
It's actually like a full
fledged stack analysis

00:00:36.180 --> 00:00:36.899
framework.

00:00:36.899 --> 00:00:37.940
And it's really powerful.

00:00:37.940 --> 00:00:38.760
You can write your own checks.

00:00:38.760 --> 00:00:40.384
And I'm going to talk
about that today.

00:00:40.384 --> 00:00:42.600
This talk is really
for anyone really

00:00:42.600 --> 00:00:44.900
interested in programming
languages, compilers,

00:00:44.900 --> 00:00:46.190
stack analysis.

00:00:46.190 --> 00:00:48.330
It's also for anyone
who has had to deal

00:00:48.330 --> 00:00:49.376
with bugs in the project.

00:00:49.376 --> 00:00:51.000
So I think that covers
the rest of you.

00:00:51.000 --> 00:00:53.150
Oh yeah, one last thing,
I only have 20 minutes.

00:00:53.150 --> 00:00:54.400
But there's a lot of material.

00:00:54.400 --> 00:00:56.941
So I'm going to go kind of fast
through some of these slides.

00:00:56.941 --> 00:00:57.970
Try to keep up.

00:00:57.970 --> 00:00:59.860
The good news is that at the
end of the day, you can go home,

00:00:59.860 --> 00:01:01.443
you can watch on
half speed on YouTube

00:01:01.443 --> 00:01:04.081
and you should be able to
understand some of it then.

00:01:04.081 --> 00:01:04.970
All right.

00:01:04.970 --> 00:01:05.720
Let's get started.

00:01:05.720 --> 00:01:07.070
I'm going to go extra fast now.

00:01:07.070 --> 00:01:07.778
So let's keep up.

00:01:07.778 --> 00:01:08.940
[CHUCKLES]

00:01:08.940 --> 00:01:09.440
All right.

00:01:09.440 --> 00:01:11.150
So what is Android Lints?

00:01:11.150 --> 00:01:13.506
Like I said, a lot of you
probably already know.

00:01:13.506 --> 00:01:15.380
Even if you don't know
the name, you actually

00:01:15.380 --> 00:01:16.490
do know what Android Lint is.

00:01:16.490 --> 00:01:17.820
Because it's the
thing that shows up

00:01:17.820 --> 00:01:19.278
warning messages
in your ID saying,

00:01:19.278 --> 00:01:21.442
hey, you're doing
something wrong.

00:01:21.442 --> 00:01:23.400
And so in some cases,
this is like telling you,

00:01:23.400 --> 00:01:24.774
hey, Gradle might
be out of date.

00:01:24.774 --> 00:01:26.480
Do you want to update it?

00:01:26.480 --> 00:01:28.640
Or maybe you're not
calling a super method

00:01:28.640 --> 00:01:30.230
in a method that
expects you to do so.

00:01:30.230 --> 00:01:32.317
And right in Android Studio
in the ID it will say,

00:01:32.317 --> 00:01:34.400
hey, there's some code
here that looks suspicious,

00:01:34.400 --> 00:01:35.837
maybe you want to take a look.

00:01:35.837 --> 00:01:37.420
And sometimes it's
warnings, sometimes

00:01:37.420 --> 00:01:41.090
it's errors that will
actually fail the build.

00:01:41.090 --> 00:01:44.297
So some of you might not
know but there's actually

00:01:44.297 --> 00:01:46.130
a lot of different ways
to use Android Lint.

00:01:46.130 --> 00:01:48.410
The first one is on the fly,
which is what I just mentioned,

00:01:48.410 --> 00:01:50.326
where it's kind of in
the ID as you're typing.

00:01:50.326 --> 00:01:52.440
It shows error
messages right away.

00:01:52.440 --> 00:01:54.190
You also do something
called Inspect Code.

00:01:54.190 --> 00:01:55.700
This is an action
in Android Studio

00:01:55.700 --> 00:01:57.260
where you can run
a batch analysis

00:01:57.260 --> 00:01:58.840
of your entire project.

00:01:58.840 --> 00:02:02.850
It's a really great way to audit
your project for common errors.

00:02:02.850 --> 00:02:05.250
And a related action called
Run Inspection by Name.

00:02:05.250 --> 00:02:08.139
So if you have a
particular bug in mind,

00:02:08.139 --> 00:02:12.710
say you want to find a lot of
thread annotation violations,

00:02:12.710 --> 00:02:14.540
you can run that
Inspection by Name,

00:02:14.540 --> 00:02:17.420
audit your entire projects
in one batch analysis

00:02:17.420 --> 00:02:19.229
and look at those one-by-one.

00:02:19.229 --> 00:02:21.020
Some of you might not
know actually though,

00:02:21.020 --> 00:02:23.540
that you can also run Lint at
the command line with Gradle.

00:02:23.540 --> 00:02:25.820
So you do something like
./gradlew lintDebug.

00:02:25.820 --> 00:02:27.427
That's one of the
tasks that we have.

00:02:27.427 --> 00:02:28.760
And it's kind of the same thing.

00:02:28.760 --> 00:02:31.160
It will just do a batch analysis
for your entire project.

00:02:31.160 --> 00:02:32.951
And the really great
thing about that is it

00:02:32.951 --> 00:02:35.037
will make a HTML and XML report.

00:02:35.037 --> 00:02:36.620
So you can parse the
XML report if you

00:02:36.620 --> 00:02:38.300
want to do something
fancy with the results.

00:02:38.300 --> 00:02:40.216
Or you can just take a
look at the HTML report

00:02:40.216 --> 00:02:44.720
and go through your warnings.

00:02:44.720 --> 00:02:47.160
So even if you know
what Android Lint is,

00:02:47.160 --> 00:02:49.370
I really want to do a deep
dive into the advanced use

00:02:49.370 --> 00:02:52.024
cases for Lint because
it's a very powerful tool.

00:02:52.024 --> 00:02:54.190
So first I'm just going to
talk about configuration,

00:02:54.190 --> 00:02:55.430
kind of sounds boring,
but it's actually

00:02:55.430 --> 00:02:56.870
really important
for big projects

00:02:56.870 --> 00:02:58.411
you want to make
sure Android Lint is

00:02:58.411 --> 00:03:01.076
working for your project
and for your needs.

00:03:01.076 --> 00:03:02.840
I'm also going to talk
about annotations.

00:03:02.840 --> 00:03:05.000
It's a really powerful
way to mark up

00:03:05.000 --> 00:03:07.430
your code to help Lint
help you even more.

00:03:07.430 --> 00:03:09.470
So Lint automatically
does as much

00:03:09.470 --> 00:03:12.180
as it can but sometimes
you need to tell it, hey--

00:03:12.180 --> 00:03:14.474
you need to give it hints
to help you even more.

00:03:14.474 --> 00:03:16.140
Also going to talk
about Lint internals.

00:03:16.140 --> 00:03:17.060
I'm really excited
about this part

00:03:17.060 --> 00:03:19.850
because I really want to give
you a good mental model for how

00:03:19.850 --> 00:03:21.570
Lint works under the hood.

00:03:21.570 --> 00:03:24.710
This will get you
set up for realizing

00:03:24.710 --> 00:03:26.504
how powerful of a
tool it is and also

00:03:26.504 --> 00:03:28.170
for writing your own
custom Lint checks,

00:03:28.170 --> 00:03:29.503
which is actually the last step.

00:03:29.503 --> 00:03:31.900
And that's the fun demo part.

00:03:31.900 --> 00:03:32.410
All right.

00:03:32.410 --> 00:03:35.500
So let's talk about
configuration.

00:03:35.500 --> 00:03:38.200
The easiest way to see
what Lint is capable of

00:03:38.200 --> 00:03:40.930
is to go in to Android
Studio, open up Preferences,

00:03:40.930 --> 00:03:43.640
go to the Inspections window.

00:03:43.640 --> 00:03:45.370
You'll find a heading
that says Lint.

00:03:45.370 --> 00:03:47.500
And under there you can
see all of the inspections

00:03:47.500 --> 00:03:49.110
that Lint has.

00:03:49.110 --> 00:03:50.360
There's actually hundreds.

00:03:50.360 --> 00:03:52.384
And most of them are
enabled by default.

00:03:52.384 --> 00:03:54.800
But there's actually some that
are not checked by default.

00:03:54.800 --> 00:03:56.380
And I encourage
you to just explore

00:03:56.380 --> 00:03:57.505
these, take a look at them.

00:03:57.505 --> 00:03:59.921
Because some of these might
actually apply to your project

00:03:59.921 --> 00:04:01.780
even though we don't
enable them by default.

00:04:01.780 --> 00:04:03.529
A really good example
of this is something

00:04:03.529 --> 00:04:05.430
called Kotlin interoperability.

00:04:05.430 --> 00:04:07.180
This is just a set
of checks that we

00:04:07.180 --> 00:04:11.890
created so that you can call
Java code from Kotlin code

00:04:11.890 --> 00:04:13.189
and vise versa.

00:04:13.189 --> 00:04:15.730
And if you do things that makes
that difficult then Lint will

00:04:15.730 --> 00:04:17.490
actually warn you right
in the ID, like hey,

00:04:17.490 --> 00:04:19.899
you might want to rename this
function so that it's easier

00:04:19.899 --> 00:04:21.232
to call from the other language.

00:04:23.022 --> 00:04:24.730
There's actually
another way to configure

00:04:24.730 --> 00:04:26.980
Lint, which is with Gradle.

00:04:26.980 --> 00:04:30.490
So if you go into your
build.gradle file,

00:04:30.490 --> 00:04:32.990
you have this Android
block, as you know.

00:04:32.990 --> 00:04:35.460
But you can also add
a Lint options block.

00:04:35.460 --> 00:04:37.610
And there's some really
powerful options here.

00:04:37.610 --> 00:04:40.536
So this first option--

00:04:40.536 --> 00:04:42.410
I'm just going to go
through a few examples--

00:04:42.410 --> 00:04:44.930
this first option here is
a really powerful tool.

00:04:44.930 --> 00:04:46.712
Anyone with a
really big project,

00:04:46.712 --> 00:04:48.420
you really want to
pay attention to this.

00:04:48.420 --> 00:04:52.540
So a Lint baseline
is just like--

00:04:52.540 --> 00:04:54.320
when you add this
to your options,

00:04:54.320 --> 00:04:57.080
Lint will take a snapshot of all
of the warnings and errors you

00:04:57.080 --> 00:04:58.857
currently have in your project.

00:04:58.857 --> 00:05:01.190
And what this will do is it
will give you a clean slate.

00:05:01.190 --> 00:05:03.273
So you'll say like, hey,
I want to take a baseline

00:05:03.273 --> 00:05:04.610
at this point of the project.

00:05:04.610 --> 00:05:07.640
And forget about all of
the thousands of warnings

00:05:07.640 --> 00:05:08.735
that I already have.

00:05:08.735 --> 00:05:12.050
And then I only want to look at
new warnings and errors coming

00:05:12.050 --> 00:05:14.420
in and new code that
my team checks in.

00:05:14.420 --> 00:05:17.370
And this helps you get a handle
on the massive amount of code

00:05:17.370 --> 00:05:19.160
that you have and
still be able to have

00:05:19.160 --> 00:05:20.906
clean code going forward.

00:05:20.906 --> 00:05:22.280
And then when you
have more time,

00:05:22.280 --> 00:05:25.280
free time, you can go back and
look at all the baseline issues

00:05:25.280 --> 00:05:29.326
that Lint has stashed away.

00:05:29.326 --> 00:05:31.450
Once you do that-- so once
you have a clean slate--

00:05:31.450 --> 00:05:33.820
either through Lint's baseline
or because you have a new

00:05:33.820 --> 00:05:35.630
project and you just
want to say, hey,

00:05:35.630 --> 00:05:38.950
I want to have clean code
forever starting now--

00:05:38.950 --> 00:05:40.780
you can turn on
warnings as errors.

00:05:40.780 --> 00:05:42.520
I really encourage
you to try this out.

00:05:42.520 --> 00:05:43.760
It may not be for everyone.

00:05:43.760 --> 00:05:45.340
But if you care
about clean code,

00:05:45.340 --> 00:05:48.470
definitely try to get
this to work for you.

00:05:48.470 --> 00:05:50.230
And then, like in
the last slide,

00:05:50.230 --> 00:05:54.040
you can enable specific checks
that are not on by defaults,

00:05:54.040 --> 00:05:56.305
like interoperability.

00:05:56.305 --> 00:06:01.130
So some of you already have
this Lint options block set up.

00:06:01.130 --> 00:06:04.530
And some more advanced
things I want to talk about

00:06:04.530 --> 00:06:05.740
is performance issues.

00:06:05.740 --> 00:06:08.990
So one of the reasons we
have this Lint options

00:06:08.990 --> 00:06:10.740
block in Gradle is
because a lot of people

00:06:10.740 --> 00:06:13.490
run Lint on their continuous
integration server.

00:06:13.490 --> 00:06:15.009
And so they're
constantly checking

00:06:15.009 --> 00:06:16.800
their entire application
for Lint warnings,

00:06:16.800 --> 00:06:19.080
Lint errors, maybe they
even block pre-submit,

00:06:19.080 --> 00:06:22.191
if you have a new warning
that someone just checked in.

00:06:22.191 --> 00:06:24.190
But some people are
concerned about performance.

00:06:24.190 --> 00:06:27.660
So just a few tips
here real quick.

00:06:27.660 --> 00:06:30.304
Try to avoid the
checkAllWarnings option.

00:06:30.304 --> 00:06:31.470
I know it's really tempting.

00:06:31.470 --> 00:06:33.790
I just told you how
to enable more checks.

00:06:33.790 --> 00:06:36.349
But actually some of the
checks are off by default

00:06:36.349 --> 00:06:37.890
for performance
reasons, for example.

00:06:37.890 --> 00:06:40.000
So if you check all
warnings-- like you

00:06:40.000 --> 00:06:42.462
could say, oh man, my
time to check the project

00:06:42.462 --> 00:06:43.170
has just doubled.

00:06:43.170 --> 00:06:45.420
But be a little bit more
selective in the checks

00:06:45.420 --> 00:06:48.390
that you turn on.

00:06:48.390 --> 00:06:52.602
Also try to avoid the
./gradlew lint tasks.

00:06:52.602 --> 00:06:54.060
There-- it's actually
a parent task

00:06:54.060 --> 00:06:56.130
of multiple sub-tasks,
one of which

00:06:56.130 --> 00:06:58.080
is lintDebug or lintRelease.

00:06:58.080 --> 00:06:59.760
The parent Lint
task will actually

00:06:59.760 --> 00:07:01.775
run Lint multiple
times on a project

00:07:01.775 --> 00:07:02.972
for each build variance.

00:07:02.972 --> 00:07:04.680
And so that's just a
really simple gotcha

00:07:04.680 --> 00:07:07.960
that you should try to avoid.

00:07:07.960 --> 00:07:11.490
Also if you can, use the
ignore test sources option.

00:07:11.490 --> 00:07:14.830
So by default we already don't
look at your test sources

00:07:14.830 --> 00:07:17.352
for warnings or errors.

00:07:17.352 --> 00:07:19.810
The theory being that you don't
really care about how clean

00:07:19.810 --> 00:07:21.880
your tests are.

00:07:21.880 --> 00:07:24.940
But this option will actually
make it so we don't even

00:07:24.940 --> 00:07:27.010
parse your test sources at all.

00:07:27.010 --> 00:07:29.770
And so, presumably all of
you have really, really well

00:07:29.770 --> 00:07:32.800
tested code, so this
option will help with that

00:07:32.800 --> 00:07:36.140
and make things go faster.

00:07:36.140 --> 00:07:36.640
All right.

00:07:36.640 --> 00:07:37.681
Let's switch gears a bit.

00:07:37.681 --> 00:07:39.593
I want to talk
about annotations.

00:07:39.593 --> 00:07:41.480
Annotations are a
really powerful way

00:07:41.480 --> 00:07:46.520
to just give Lint hints
for specific issues

00:07:46.520 --> 00:07:48.719
that you want to look for.

00:07:48.719 --> 00:07:50.510
So I'm just going to
go for a few examples.

00:07:50.510 --> 00:07:53.010
A lot of you already know about
the nullability annotations.

00:07:53.010 --> 00:07:54.940
Hopefully you've used
this a lot in Java.

00:07:54.940 --> 00:07:57.023
In Kotlin you don't need
them because it's kind of

00:07:57.023 --> 00:07:59.294
built into the language.

00:07:59.294 --> 00:08:01.985
But we also have really
Android specific annotations,

00:08:01.985 --> 00:08:03.110
which you should check out.

00:08:03.110 --> 00:08:05.370
So there's one called
RequiresPermission.

00:08:05.370 --> 00:08:06.911
You probably know
about this one too.

00:08:06.911 --> 00:08:09.340
But it's just an
example where we

00:08:09.340 --> 00:08:13.360
kind of annotate certain Android
APIs with RequiresPermission,

00:08:13.360 --> 00:08:15.330
maybe like the
SET_WALLPAPER permission.

00:08:15.330 --> 00:08:17.920
And then Lint will
actually do some analysis

00:08:17.920 --> 00:08:20.860
on the code that calls
into this API and say, hey,

00:08:20.860 --> 00:08:23.710
is the program actually checking
that they have this permission?

00:08:23.710 --> 00:08:25.210
If they don't, then
we can warn you,

00:08:25.210 --> 00:08:27.111
like hey, it looks like
you haven't checked

00:08:27.111 --> 00:08:28.360
that you have this permission.

00:08:28.360 --> 00:08:29.970
This might crash your runtime.

00:08:29.970 --> 00:08:34.200
And this impacts
users quite a bit.

00:08:34.200 --> 00:08:37.870
There is also one
of my favorite kind

00:08:37.870 --> 00:08:40.440
of annotations, which is
UiThread and WorkerThread

00:08:40.440 --> 00:08:41.169
annotations.

00:08:41.169 --> 00:08:44.619
I think there just called
thread annotations in general.

00:08:44.619 --> 00:08:46.160
These are really
important, actually.

00:08:46.160 --> 00:08:51.100
So a big problem with
application development

00:08:51.100 --> 00:08:54.130
is a lot of UI
frameworks require

00:08:54.130 --> 00:08:56.800
that you only update the UI on
a single thread called the UI

00:08:56.800 --> 00:08:57.470
thread.

00:08:57.470 --> 00:08:59.020
And everything else has to be
done on the background threads.

00:08:59.020 --> 00:09:00.840
If you do a network
request, you have

00:09:00.840 --> 00:09:03.006
to do it on a background
thread because if you do it

00:09:03.006 --> 00:09:05.230
on the UI thread, the
network request might block.

00:09:05.230 --> 00:09:06.280
You'll freeze the UI.

00:09:06.280 --> 00:09:07.510
User will be frustrated.

00:09:07.510 --> 00:09:10.101
You might not even
see a crash report.

00:09:10.101 --> 00:09:12.100
And it's really hard to
track down these issues.

00:09:12.100 --> 00:09:13.558
So we have these
thread annotations

00:09:13.558 --> 00:09:17.110
where you can say, hey,
this method should only

00:09:17.110 --> 00:09:18.820
be called on the
UiThread or should only

00:09:18.820 --> 00:09:20.830
be called on the WorkerThread.

00:09:20.830 --> 00:09:24.430
And we have some analyses
to track that down.

00:09:24.430 --> 00:09:27.910
So I'm actually going to do
a demo of these analyses.

00:09:27.910 --> 00:09:29.375
Hopefully that's set up.

00:09:29.375 --> 00:09:30.340
So let's switch over.

00:09:36.232 --> 00:09:37.730
Could we switch
over to the demo?

00:09:37.730 --> 00:09:38.290
Perfect.

00:09:38.290 --> 00:09:39.150
Awesome.

00:09:39.150 --> 00:09:43.130
So use your
imagination a bit here.

00:09:43.130 --> 00:09:45.150
I'm going to go
through an example.

00:09:45.150 --> 00:09:46.090
This is just Kotlin.

00:09:46.090 --> 00:09:48.130
Let's say we have a function.

00:09:48.130 --> 00:09:49.504
SPEAKER 1: [INAUDIBLE]

00:09:49.504 --> 00:09:51.660
MATTHEW GHARRITY: Oh,
the screen is black.

00:09:51.660 --> 00:09:52.536
You're right.

00:09:52.536 --> 00:09:53.490
SPEAKER 1: [INAUDIBLE]

00:09:53.490 --> 00:09:54.270
MATTHEW GHARRITY: Awesome.

00:09:54.270 --> 00:09:55.180
Let's get started.

00:09:55.180 --> 00:09:58.445
So let's say we have a
function called updateUI.

00:09:58.445 --> 00:10:00.570
Obviously we expect this
to be run on the UiThread.

00:10:00.570 --> 00:10:02.444
So maybe this is updating
the user interface,

00:10:02.444 --> 00:10:03.540
whatever you want.

00:10:03.540 --> 00:10:06.180
And then let's say we also a
function called networkRequest.

00:10:06.180 --> 00:10:07.638
So just a really
contrived example.

00:10:11.272 --> 00:10:15.326
And this does some stuff.

00:10:15.326 --> 00:10:16.300
All right.

00:10:16.300 --> 00:10:21.750
And unfortunately,
someone decided

00:10:21.750 --> 00:10:23.860
to call a networkRequest
from the updateUi method.

00:10:23.860 --> 00:10:25.420
So this is the problem, right?

00:10:25.420 --> 00:10:27.660
As you can see, there's
no errors or warnings.

00:10:27.660 --> 00:10:29.285
Threading issues like
this are actually

00:10:29.285 --> 00:10:31.244
really hard to track
down in general.

00:10:31.244 --> 00:10:33.160
But if you know about
these thread annotations

00:10:33.160 --> 00:10:35.280
you can add the UiThread here.

00:10:35.280 --> 00:10:37.660
You can add the WorkerThread
annotation here.

00:10:37.660 --> 00:10:39.511
And instantly,
Lint will say, hey,

00:10:39.511 --> 00:10:41.760
you're trying to make a
network request on a UiThread.

00:10:41.760 --> 00:10:43.350
That can freeze the UI.

00:10:43.350 --> 00:10:44.840
You don't want to do that.

00:10:44.840 --> 00:10:46.360
So that's really,
really powerful.

00:10:46.360 --> 00:10:48.380
I really encourage
you to use these.

00:10:48.380 --> 00:10:49.894
Now you might be
thinking, hey, this

00:10:49.894 --> 00:10:51.060
is really contrived example.

00:10:51.060 --> 00:10:52.110
This is too simple.

00:10:52.110 --> 00:10:54.480
Actually, what we have
in our application

00:10:54.480 --> 00:10:58.920
is this Ui method that
calls a function foo maybe.

00:10:58.920 --> 00:11:01.680
And then that function
calls something called bar.

00:11:01.680 --> 00:11:04.959
And then that bar function
calls the networkRequest.

00:11:04.959 --> 00:11:07.000
There's just multiple
layers of indirection here.

00:11:07.000 --> 00:11:08.910
You're thinking, oh,
Lint can't help us here.

00:11:08.910 --> 00:11:11.610
And as you can see,
it can't right by

00:11:11.610 --> 00:11:13.840
default because for
performance reasons,

00:11:13.840 --> 00:11:16.150
we don't try to do
these advanced analyses.

00:11:16.150 --> 00:11:18.870
But actually, we do have
an analysis for this.

00:11:18.870 --> 00:11:23.210
So I'm going to show
you an example of that.

00:11:23.210 --> 00:11:26.760
You could do Run
Inspection by Name.

00:11:26.760 --> 00:11:29.580
The name of the inspection is
called wrong Thread and then

00:11:29.580 --> 00:11:30.690
interprocedural.

00:11:30.690 --> 00:11:33.030
If you select that,
select the scope--

00:11:33.030 --> 00:11:35.460
I'll just say module scope--

00:11:35.460 --> 00:11:36.260
and bam.

00:11:36.260 --> 00:11:42.024
It will find the call path from
foo to bar to networkRequest.

00:11:42.024 --> 00:11:44.190
And I know you can't see
this error message on here.

00:11:44.190 --> 00:11:47.020
So let me copy it for you.

00:11:47.020 --> 00:11:49.872
And I'll remove the class names.

00:11:49.872 --> 00:11:51.830
And so you can see the
error message shows you,

00:11:51.830 --> 00:11:54.089
hey, you're starting
updateUI, you're going to foo,

00:11:54.089 --> 00:11:56.630
you're going to bar, and then
you're going to networkRequest.

00:11:56.630 --> 00:11:58.296
And that's annotating
with WorkerThread.

00:11:58.296 --> 00:12:00.346
And that's an issue.

00:12:00.346 --> 00:12:01.120
All right.

00:12:01.120 --> 00:12:03.738
Let's go back to the slides.

00:12:03.738 --> 00:12:05.230
So please check those out.

00:12:05.230 --> 00:12:08.890
That analysis is off by
default for the main reason,

00:12:08.890 --> 00:12:09.640
being performance.

00:12:09.640 --> 00:12:11.431
It's trying to do a
whole program analysis.

00:12:11.431 --> 00:12:12.460
It's pretty expensive.

00:12:12.460 --> 00:12:14.152
So just use it when you can.

00:12:14.152 --> 00:12:15.610
Just try it out
and see if it finds

00:12:15.610 --> 00:12:19.010
any bugs in your application.

00:12:19.010 --> 00:12:21.270
All right.

00:12:21.270 --> 00:12:24.700
So next, I'm going to
talk about Lint internals.

00:12:24.700 --> 00:12:25.700
This part's really cool.

00:12:25.700 --> 00:12:32.092
So the way Lint works
is it starts out

00:12:32.092 --> 00:12:33.300
by parsing your source files.

00:12:33.300 --> 00:12:36.140
So maybe you have some
Java, Kotlin lying around.

00:12:36.140 --> 00:12:38.244
It builds the
abstract [INAUDIBLE]..

00:12:38.244 --> 00:12:40.660
And the first thing we do with
that is we actually wrap it

00:12:40.660 --> 00:12:42.490
in something called UAST.

00:12:42.490 --> 00:12:44.574
It just stands for universal
abstract syntax tree.

00:12:44.574 --> 00:12:46.615
If you've dealt with these
kind of things before,

00:12:46.615 --> 00:12:48.320
that might sound
pretty familiar.

00:12:48.320 --> 00:12:51.430
But this step is
really important

00:12:51.430 --> 00:12:54.549
because it means that
when you write a check,

00:12:54.549 --> 00:12:56.090
you only have to
write it once and it

00:12:56.090 --> 00:12:58.860
works on both Java and Kotlin.

00:12:58.860 --> 00:13:01.250
That's really
convenient actually.

00:13:01.250 --> 00:13:03.100
And then when you
write a Lint analysis,

00:13:03.100 --> 00:13:05.800
you're actually just
operating directly on UAST.

00:13:05.800 --> 00:13:07.570
So when you write a
Lint check, you're

00:13:07.570 --> 00:13:10.524
just scanning the UAST
for your source code.

00:13:10.524 --> 00:13:12.940
You're looking for method calls
that you're interested in.

00:13:12.940 --> 00:13:15.470
You're looking in expressions
that you're interested in.

00:13:15.470 --> 00:13:16.890
And that's how it works.

00:13:16.890 --> 00:13:19.540
It's also important to point
out Lint actually works also

00:13:19.540 --> 00:13:20.830
on all types of files.

00:13:20.830 --> 00:13:22.780
So you can look at gradle files.

00:13:22.780 --> 00:13:24.900
You can look at XML
files and resources.

00:13:24.900 --> 00:13:27.400
This is actually really powerful
because it kind of gives us

00:13:27.400 --> 00:13:29.560
a holistic view of your
entire application.

00:13:29.560 --> 00:13:31.320
And we can provide
a lot more helpful

00:13:31.320 --> 00:13:33.877
warning messages with that.

00:13:33.877 --> 00:13:34.960
A couple more points here.

00:13:34.960 --> 00:13:37.391
So type information
is available.

00:13:37.391 --> 00:13:39.390
It's not just-- you're
not just looking at text.

00:13:39.390 --> 00:13:41.912
You actually have the whole
AST with type information.

00:13:41.912 --> 00:13:43.620
You can do things like
method resolution.

00:13:43.620 --> 00:13:47.430
You can do things like
examining the class hierarchy

00:13:47.430 --> 00:13:49.621
of the class you're looking at.

00:13:49.621 --> 00:13:51.870
That's really important for
preventing false positives

00:13:51.870 --> 00:13:53.703
and just having really
powerful Lint checks.

00:13:53.703 --> 00:13:57.027
That's kind of what
makes Lint so useful.

00:13:57.027 --> 00:13:59.110
We also have really tight
integration with the ID.

00:13:59.110 --> 00:14:01.260
So one of my favorite
parts about Lint

00:14:01.260 --> 00:14:04.110
is that it actually does
show you the warning messages

00:14:04.110 --> 00:14:05.009
right in the ID.

00:14:05.009 --> 00:14:07.300
I think that's critical
because if you don't have that,

00:14:07.300 --> 00:14:08.758
then a lot of your
warning messages

00:14:08.758 --> 00:14:10.830
will just be lost in
some buildup somewhere.

00:14:10.830 --> 00:14:13.904
And it wouldn't be
useful to most people.

00:14:13.904 --> 00:14:16.320
So with that, we're going to
move into writing custom Lint

00:14:16.320 --> 00:14:16.819
checks.

00:14:16.819 --> 00:14:18.400
And what this means is that--

00:14:18.400 --> 00:14:20.210
Android Lint is
actually a framework--

00:14:20.210 --> 00:14:21.677
you can write your
own Lint checks.

00:14:21.677 --> 00:14:23.260
If you have something
that annoys you,

00:14:23.260 --> 00:14:27.480
like either a common bug that
you run into on your team,

00:14:27.480 --> 00:14:29.996
or just something that you want
your colleagues to watch out

00:14:29.996 --> 00:14:31.620
for, you can write
your own Lint check.

00:14:31.620 --> 00:14:33.150
You can upload it
to your code base.

00:14:33.150 --> 00:14:35.640
And all your colleagues
will see it in the ID,

00:14:35.640 --> 00:14:37.770
things highlighted.

00:14:37.770 --> 00:14:40.410
Quick note here, Lint
actually has an unstable API.

00:14:40.410 --> 00:14:43.320
All this means is
that we don't promise

00:14:43.320 --> 00:14:47.420
that we keep it the same
from release to release.

00:14:47.420 --> 00:14:49.980
The good news is that it's
not changing too often.

00:14:49.980 --> 00:14:51.204
But no promises.

00:14:51.204 --> 00:14:53.370
The other good news is that
unstable APIs are really

00:14:53.370 --> 00:14:54.078
fun to play with.

00:14:54.078 --> 00:14:56.626
So all right.

00:14:56.626 --> 00:14:58.626
And with that we're going
to move into the demo.

00:14:58.626 --> 00:15:00.370
So let's switch over.

00:15:00.370 --> 00:15:03.290
Awesome, much faster this time.

00:15:03.290 --> 00:15:04.060
All right.

00:15:04.060 --> 00:15:07.650
So don't bother
reading code too much.

00:15:07.650 --> 00:15:09.490
The example I want
to set up here

00:15:09.490 --> 00:15:12.520
is that you see that your
colleagues are maybe calling

00:15:12.520 --> 00:15:14.080
thread.yields pretty often.

00:15:14.080 --> 00:15:16.330
And if you look at the
documentation for thread.yield,

00:15:16.330 --> 00:15:18.552
there's actually not
a very useful method.

00:15:18.552 --> 00:15:21.010
If you're writing very advanced
concurrent data structures,

00:15:21.010 --> 00:15:22.984
maybe it's useful
but in other cases

00:15:22.984 --> 00:15:24.150
you really want to avoid it.

00:15:24.150 --> 00:15:26.272
It usually doesn't do
what you think it does.

00:15:26.272 --> 00:15:28.480
So let's say we want to
write our own Lint check that

00:15:28.480 --> 00:15:32.350
actually catches, calls the
thread.yields, and warns people

00:15:32.350 --> 00:15:34.174
that they're doing that.

00:15:34.174 --> 00:15:35.590
So right now it's
not highlighted.

00:15:35.590 --> 00:15:37.990
There's no Lint checks yet.

00:15:37.990 --> 00:15:40.910
I want to show you how
I have this set up.

00:15:40.910 --> 00:15:43.180
So you already have some
kind of Android application

00:15:43.180 --> 00:15:44.080
module here.

00:15:44.080 --> 00:15:45.520
Here it's just called app.

00:15:45.520 --> 00:15:47.410
The way you're going to write
your own Lint checks is all

00:15:47.410 --> 00:15:47.990
you're going to
do is you're going

00:15:47.990 --> 00:15:50.281
to make a Java module, maybe
called checks for example.

00:15:53.710 --> 00:15:58.120
You're going to add a dependency
from your Android application

00:15:58.120 --> 00:16:02.330
to the checks module.

00:16:02.330 --> 00:16:04.240
And we have this nice
Lint checks block here,

00:16:04.240 --> 00:16:06.670
which will make it
really easy to do that.

00:16:06.670 --> 00:16:08.020
Once you have that set up--

00:16:08.020 --> 00:16:10.810
and I know I'm skipping over
some of the details here.

00:16:10.810 --> 00:16:14.290
But I'm going to have
some links at the end

00:16:14.290 --> 00:16:16.105
that you can look
at sample projects--

00:16:16.105 --> 00:16:17.980
so once you have that
set up, we can actually

00:16:17.980 --> 00:16:20.460
go right to the
Lint check itself.

00:16:20.460 --> 00:16:22.360
So here I have a class
called yield detector.

00:16:22.360 --> 00:16:23.943
As you can imagine,
this is a detector

00:16:23.943 --> 00:16:25.790
for calls to threat.yields.

00:16:25.790 --> 00:16:28.730
It extends some classes
in the Lint framework.

00:16:28.730 --> 00:16:32.320
And I already have typed up some
of the metadata for this check

00:16:32.320 --> 00:16:33.850
that we want to have.

00:16:33.850 --> 00:16:34.480
There's a name.

00:16:34.480 --> 00:16:35.980
There's a brief description.

00:16:35.980 --> 00:16:39.070
And there's an explanation
for how to fix the issue.

00:16:39.070 --> 00:16:41.020
Maybe there's a
severity, whether it

00:16:41.020 --> 00:16:44.840
breaks the build, et cetera.

00:16:44.840 --> 00:16:46.720
So once you have
that metadata, I'm

00:16:46.720 --> 00:16:51.782
actually going to start
typing some code here.

00:16:51.782 --> 00:16:54.460
So one method to be
aware of is called

00:16:54.460 --> 00:16:58.280
getApplicableMethodNames.

00:16:58.280 --> 00:17:01.880
So the way Lint works is--

00:17:01.880 --> 00:17:03.180
there's a couple options.

00:17:03.180 --> 00:17:07.190
You can either make your own AST
scanner, which just gives you

00:17:07.190 --> 00:17:07.900
total control.

00:17:07.900 --> 00:17:09.520
You can scan the
entire source file,

00:17:09.520 --> 00:17:11.105
look for whatever you want.

00:17:11.105 --> 00:17:13.460
But for performance reasons,
we have these hooks where

00:17:13.460 --> 00:17:15.180
you can register with
Lint for like, hey,

00:17:15.180 --> 00:17:17.150
I'm only interested
in method calls

00:17:17.150 --> 00:17:18.940
that have this particular name.

00:17:18.940 --> 00:17:21.500
And so here, we're actually
only interested in method calls

00:17:21.500 --> 00:17:22.895
with name yield.

00:17:25.141 --> 00:17:27.099
And if I have any typos
it's not going to work.

00:17:27.099 --> 00:17:28.559
So let me know.

00:17:28.559 --> 00:17:30.360
[CHUCKLES]

00:17:30.360 --> 00:17:32.086
Once you've have
that hook in place,

00:17:32.086 --> 00:17:33.460
we have to write
the hook itself.

00:17:33.460 --> 00:17:38.280
So here we can
say, visit method.

00:17:38.280 --> 00:17:44.970
And I'm going to make sure
that's readable for all of you.

00:17:44.970 --> 00:17:46.520
So this method
should really only

00:17:46.520 --> 00:17:50.150
be called when we come
across a yield function

00:17:50.150 --> 00:17:51.159
call in the source code.

00:17:51.159 --> 00:17:52.700
So we can say, like,
OK, let's assert

00:17:52.700 --> 00:17:56.190
that the method name we're
looking at is actually a yield.

00:17:56.190 --> 00:17:58.910
So this should
always be the case.

00:17:58.910 --> 00:18:00.970
And then because we
have type information,

00:18:00.970 --> 00:18:03.792
we can do due
diligence and make sure

00:18:03.792 --> 00:18:05.500
that we don't have a
false positive here.

00:18:05.500 --> 00:18:06.790
Because maybe there
is another class

00:18:06.790 --> 00:18:08.160
with the function called yield.

00:18:08.160 --> 00:18:09.951
And we want to make
sure that it's actually

00:18:09.951 --> 00:18:12.280
the Java.ling.thread.yield.

00:18:12.280 --> 00:18:14.690
So here we're going to check--

00:18:14.690 --> 00:18:15.940
we have some helper methods.

00:18:15.940 --> 00:18:17.430
I'll type it out.

00:18:17.430 --> 00:18:20.600
If you look at the evaluator
you can say, is member in class.

00:18:20.600 --> 00:18:23.612
We're going to pass it
the ResolvesMethod node.

00:18:23.612 --> 00:18:25.570
And then we're going to
give it the class name.

00:18:25.570 --> 00:18:27.200
So Java.ling.thread.

00:18:29.800 --> 00:18:32.790
This just means, if this
method that they're calling

00:18:32.790 --> 00:18:35.460
is actually part of
this exact class,

00:18:35.460 --> 00:18:36.990
then we can report the error.

00:18:36.990 --> 00:18:39.840
And then I'll say,
contacts that report.

00:18:39.840 --> 00:18:41.760
I'll give it the
issue that we hold

00:18:41.760 --> 00:18:43.620
the metadata we have above.

00:18:43.620 --> 00:18:45.210
I'll give it the node.

00:18:45.210 --> 00:18:48.212
I'll give it the location.

00:18:48.212 --> 00:18:50.670
So we're telling Lint like,
hey, here's where the error is.

00:18:50.670 --> 00:18:53.490
This is what you
should highlight.

00:18:53.490 --> 00:18:55.930
And I think I have
to give it a message.

00:18:55.930 --> 00:19:00.730
So let's say, please
don't use this.

00:19:00.730 --> 00:19:03.791
Oh, see, you should use a
more hopeful error message.

00:19:03.791 --> 00:19:05.380
All right.

00:19:05.380 --> 00:19:07.110
That's all it takes.

00:19:07.110 --> 00:19:09.445
If I have no typos I'm
going to make the project.

00:19:15.358 --> 00:19:16.710
Looks like it's done.

00:19:16.710 --> 00:19:20.852
And if I go back
to our application,

00:19:20.852 --> 00:19:22.895
bam, Lint has already
scanned your source code.

00:19:22.895 --> 00:19:24.520
It's already picked
up your Lint check.

00:19:24.520 --> 00:19:27.080
Right in the ID it says,
please don't use this.

00:19:27.080 --> 00:19:28.290
And that's really powerful.

00:19:28.290 --> 00:19:30.831
You can make this pop out for
your colleagues and everything.

00:19:30.831 --> 00:19:31.610
So awesome.

00:19:31.610 --> 00:19:32.950
Let's go back to the slides.

00:19:38.831 --> 00:19:39.330
All right.

00:19:39.330 --> 00:19:40.300
50 seconds left.

00:19:40.300 --> 00:19:43.350
I'm pretty happy
with the timing here.

00:19:43.350 --> 00:19:44.100
Here's some links.

00:19:44.100 --> 00:19:45.641
I really want you
to check these out.

00:19:45.641 --> 00:19:48.870
So if you've never read the Lint
overview on our developer page,

00:19:48.870 --> 00:19:49.650
please go there.

00:19:49.650 --> 00:19:52.770
It's got a lot of information,
both from this talk

00:19:52.770 --> 00:19:54.550
and a little bit more.

00:19:54.550 --> 00:19:56.160
Please check out the
annotations page.

00:19:56.160 --> 00:19:58.184
I just touched on
three random examples.

00:19:58.184 --> 00:19:59.850
But there are so many
useful annotations

00:19:59.850 --> 00:20:02.190
that can really prevent a
lot of bugs ahead of time

00:20:02.190 --> 00:20:04.750
before users ever see them.

00:20:04.750 --> 00:20:08.310
If you are really excited
about this demo I just

00:20:08.310 --> 00:20:11.040
gave at the end here, check
out the sample project

00:20:11.040 --> 00:20:14.100
we have on GitHub where you can
actually write your own custom

00:20:14.100 --> 00:20:14.890
Lint checks.

00:20:14.890 --> 00:20:16.634
And it will kind of
get you up to speed.

00:20:16.634 --> 00:20:18.300
And finally, if you
run into any issues,

00:20:18.300 --> 00:20:20.896
we have a Lint mailing list
where you can go to for help.

00:20:20.896 --> 00:20:22.020
Many of you might know Tor.

00:20:22.020 --> 00:20:23.560
He's pretty active
on the mailing list.

00:20:23.560 --> 00:20:25.310
I'm pretty active on
the mailing list too.

00:20:25.310 --> 00:20:28.350
We answer all the questions
that get asked there.

00:20:28.350 --> 00:20:29.080
All right.

00:20:29.080 --> 00:20:31.170
And with that,
thank you so much.

00:20:31.170 --> 00:20:33.400
If you have any questions,
don't ask them now.

00:20:33.400 --> 00:20:35.550
But I'll be out in the
sandbox area afterward.

00:20:35.550 --> 00:20:37.300
And I'll be happy to
answer any questions.

00:20:37.300 --> 00:20:40.240
So please check out
custom Lint checks.

00:20:40.240 --> 00:20:41.140
Thanks.

00:20:41.140 --> 00:20:42.340
[APPLAUSE]

00:20:42.340 --> 00:20:44.490
[MUSIC PLAYING]

