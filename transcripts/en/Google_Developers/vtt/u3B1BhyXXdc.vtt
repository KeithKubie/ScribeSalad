WEBVTT
Kind: captions
Language: en

00:00:12.440 --> 00:00:12.940
ANDREW: So.

00:00:12.940 --> 00:00:13.840
Hi, everyone.

00:00:13.840 --> 00:00:14.720
I'm Andrew.

00:00:14.720 --> 00:00:18.590
This is Johann, and we
work on Google App Engine.

00:00:18.590 --> 00:00:22.380
And Johann and I, and in
fact the App Engine team,

00:00:22.380 --> 00:00:26.220
are really excited about today's
launch of Managed VMs, which

00:00:26.220 --> 00:00:29.870
combine the turnkey simplicity
and ease of use of Google App

00:00:29.870 --> 00:00:33.670
Engine with the raw power and
flexibility of Google Compute

00:00:33.670 --> 00:00:35.160
Engine.

00:00:35.160 --> 00:00:37.830
Now, you might have
seen a few demos today

00:00:37.830 --> 00:00:40.600
where we showed you how Managed
VMs allow a developer to build

00:00:40.600 --> 00:00:46.460
really complex, rich
applications using the existing

00:00:46.460 --> 00:00:48.320
runtimes of Google App Engine.

00:00:48.320 --> 00:00:52.850
That's Python,
Java, PHP, and Go.

00:00:52.850 --> 00:00:55.290
And what we want to
do today is both dive

00:00:55.290 --> 00:00:57.210
into that in a little
bit more detail,

00:00:57.210 --> 00:00:58.640
but also answer
the question, what

00:00:58.640 --> 00:01:01.290
if we were able to bring our own
runtimes to Google App Engine?

00:01:01.290 --> 00:01:04.147
What if we could customize
the language and the serving

00:01:04.147 --> 00:01:05.230
stack that we want to use?

00:01:08.780 --> 00:01:10.280
Just before we get
into that, I just

00:01:10.280 --> 00:01:12.300
want to recap Google App
Engine really quickly,

00:01:12.300 --> 00:01:14.640
in case you're not
familiar with it.

00:01:14.640 --> 00:01:17.260
So Google App Engine is our
platform as a service product.

00:01:17.260 --> 00:01:19.570
It's been phenomenally
successful for us.

00:01:19.570 --> 00:01:22.230
Every day, we get
tens of billions

00:01:22.230 --> 00:01:24.780
of hits across our service.

00:01:24.780 --> 00:01:28.440
And when we look back
and we ask our customers,

00:01:28.440 --> 00:01:29.490
why do they like it?

00:01:29.490 --> 00:01:31.240
What's the reason
for its success?

00:01:31.240 --> 00:01:34.940
Time and time again, what
we hear is, simplicity.

00:01:34.940 --> 00:01:38.640
Simplicity is things like
turnkey application deployment.

00:01:38.640 --> 00:01:41.250
It's things like automatic
provisioning, and health

00:01:41.250 --> 00:01:44.230
checking, and logging,
and monitoring.

00:01:44.230 --> 00:01:45.630
It's things like
deep integration

00:01:45.630 --> 00:01:49.490
into our core services, like
data store and cloud storage.

00:01:49.490 --> 00:01:52.220
And last, but by no
means least, it's

00:01:52.220 --> 00:01:54.800
having a complete local
development environment

00:01:54.800 --> 00:01:57.720
ready for you so you can code no
matter where you happen to be.

00:02:00.800 --> 00:02:04.130
So what Managed VMs
bring to this picture

00:02:04.130 --> 00:02:07.390
is the same power,
the same simplicity,

00:02:07.390 --> 00:02:10.120
but with far more flexibility
than you've ever had before.

00:02:10.120 --> 00:02:12.210
Managed VMs really
take App Engine

00:02:12.210 --> 00:02:13.919
to another level in
terms of flexibility.

00:02:13.919 --> 00:02:16.168
We're going to demonstrate
a little bit of that today.

00:02:16.168 --> 00:02:17.880
What we're going
to do in this talk

00:02:17.880 --> 00:02:22.530
is build an application that
uses Managed VMs extensively.

00:02:22.530 --> 00:02:25.360
It's going to have two
large components to it.

00:02:25.360 --> 00:02:28.180
One of those components is
going to be a Go application.

00:02:28.180 --> 00:02:31.189
We're going to run that Go
application inside Managed VMs.

00:02:31.189 --> 00:02:32.730
Because it's running
in a Managed VM,

00:02:32.730 --> 00:02:34.320
we're going to do things
on that Go application

00:02:34.320 --> 00:02:35.580
we couldn't do before.

00:02:35.580 --> 00:02:40.470
Like call outs to a
separate process that's

00:02:40.470 --> 00:02:43.301
been installed
separately, written in C.

00:02:43.301 --> 00:02:45.050
And then we're going
to go a step further,

00:02:45.050 --> 00:02:47.180
and we're going
to show how we can

00:02:47.180 --> 00:02:49.300
take some of those
same abilities

00:02:49.300 --> 00:02:51.890
and run them in an
entirely new runtime, one

00:02:51.890 --> 00:02:53.540
that we've customized ourselves.

00:02:53.540 --> 00:02:55.440
In this case, we're
going to use Node.js.

00:02:55.440 --> 00:02:59.280
We're going to show Node.js
running on App Engine.

00:02:59.280 --> 00:03:00.880
And then finally
for a kicker, we're

00:03:00.880 --> 00:03:05.086
going to show how in gaining
all of this flexibility,

00:03:05.086 --> 00:03:07.210
you haven't lost any of
the benefits of App Engine.

00:03:07.210 --> 00:03:09.780
You still get local
emulation, you still

00:03:09.780 --> 00:03:13.080
get great integration, you still
get the same rich App Engine

00:03:13.080 --> 00:03:13.610
experience.

00:03:13.610 --> 00:03:17.200
And in fact, you have the same
experience for your Go App,

00:03:17.200 --> 00:03:18.420
and for your Node.js App.

00:03:18.420 --> 00:03:22.114
Both of those components run
within the same application

00:03:22.114 --> 00:03:23.530
and have access
to the same shared

00:03:23.530 --> 00:03:26.614
data using App Engine modules.

00:03:26.614 --> 00:03:28.030
So let's start at
the end and talk

00:03:28.030 --> 00:03:31.130
about the application
we're going to build here.

00:03:31.130 --> 00:03:33.800
We wanted to build something
that was inspiring,

00:03:33.800 --> 00:03:36.920
and something that was
innovative and energetic.

00:03:36.920 --> 00:03:38.940
Something really Google-y.

00:03:38.940 --> 00:03:40.820
But we also wanted to
build something fun.

00:03:40.820 --> 00:03:42.020
And at the end of
the day, we realized

00:03:42.020 --> 00:03:44.436
that building something fun
was a lot better than building

00:03:44.436 --> 00:03:47.470
something that was inspiring
or-- God forbid-- practical.

00:03:47.470 --> 00:03:50.540
So what we've come up here--
I really like this demo.

00:03:50.540 --> 00:03:53.310
It's called Cacophon, it's
a collaborative cacophony

00:03:53.310 --> 00:03:54.369
machine.

00:03:54.369 --> 00:03:56.410
And we are not going to
show you the URL just yet

00:03:56.410 --> 00:03:58.130
because we don't to get trolled.

00:03:58.130 --> 00:04:00.650
But Johan is going to
give us a quick demo now.

00:04:04.760 --> 00:04:07.470
JOHAN: So it's a
very simple app that

00:04:07.470 --> 00:04:09.410
has a few [? knobs ?] on it.

00:04:09.410 --> 00:04:12.420
It all started with some
work from Andrew Gerrand

00:04:12.420 --> 00:04:15.070
from the senior office
with engineer work on Go.

00:04:15.070 --> 00:04:18.079
And he did like this
synthesizer enginer within Go.

00:04:18.079 --> 00:04:21.470
And we decided to write
an HTML5 front end for it.

00:04:21.470 --> 00:04:24.110
So here you have the
knobs, I can turn them.

00:04:24.110 --> 00:04:27.150
It will generate a new sound,
depending on the parameter.

00:04:29.420 --> 00:04:30.420
It can get pretty noisy.

00:04:36.520 --> 00:04:37.610
I'm going to stop here.

00:04:37.610 --> 00:04:38.109
What

00:04:38.109 --> 00:04:42.480
Is interesting though, is
that if I hit the Share

00:04:42.480 --> 00:04:48.080
button-- [BEEPING] it is
broadcasting this song

00:04:48.080 --> 00:04:51.280
to all the people who are
connected to this page.

00:04:51.280 --> 00:04:53.777
And we have someone
in the room who

00:04:53.777 --> 00:04:55.610
is trying to connect
to this page right now,

00:04:55.610 --> 00:04:57.910
and is sharing a song with us.

00:04:57.910 --> 00:05:00.540
So we can somehow
play together and look

00:05:00.540 --> 00:05:03.790
at who is generating the
song that is the weirdest.

00:05:08.460 --> 00:05:10.610
I think it's served
its purpose well.

00:05:10.610 --> 00:05:12.300
It's really a
cacophony generator.

00:05:12.300 --> 00:05:14.704
So if we could go
back to the slide.

00:05:14.704 --> 00:05:16.370
ANDREW: I swear there's
a knob on there.

00:05:16.370 --> 00:05:18.275
They don't call it this, but
it's the Chalkboard Scratching

00:05:18.275 --> 00:05:18.775
Knob.

00:05:22.240 --> 00:05:24.930
So let's take a quick look at
what it takes to actually build

00:05:24.930 --> 00:05:26.787
a collaborative
application like this.

00:05:26.787 --> 00:05:29.370
And there's really three moving
parts when you think about it.

00:05:29.370 --> 00:05:31.860
The first part is the
HTML and JavaScript

00:05:31.860 --> 00:05:33.770
that's actually running
in the web browser.

00:05:33.770 --> 00:05:36.905
This is what's giving us that
nice HTML5 UI that you saw.

00:05:36.905 --> 00:05:38.780
And it's also what
ultimately plays the sound

00:05:38.780 --> 00:05:40.580
through some speakers.

00:05:40.580 --> 00:05:42.505
Because this is a
collaborative application,

00:05:42.505 --> 00:05:44.880
we actually have multiple
copies of these things running.

00:05:44.880 --> 00:05:46.850
Every time someone
visits the app, then,

00:05:46.850 --> 00:05:48.308
they're going to
end up with a copy

00:05:48.308 --> 00:05:51.800
of this part of the application
running inside their browser.

00:05:51.800 --> 00:05:54.660
Behind that then, we
have the web server.

00:05:54.660 --> 00:05:56.910
This is where Node.js
comes into the picture.

00:05:56.910 --> 00:05:59.750
And the web server is
really responsible for doing

00:05:59.750 --> 00:06:00.700
two things.

00:06:00.700 --> 00:06:02.990
It needs to serve
HTML5 and JavaScript

00:06:02.990 --> 00:06:04.960
so it can get into
somebody's browser.

00:06:04.960 --> 00:06:07.009
And then we also
need to provide a way

00:06:07.009 --> 00:06:08.800
for connecting all of
those browser clients

00:06:08.800 --> 00:06:11.420
back to each other, so that
when one person shares a sound,

00:06:11.420 --> 00:06:13.640
that sound is then
distributed across everybody.

00:06:13.640 --> 00:06:15.820
So to do that, we're
going to use WebSockets.

00:06:15.820 --> 00:06:18.010
And we're going to rely on
our web server component

00:06:18.010 --> 00:06:21.640
to be able to connect
all of those clients

00:06:21.640 --> 00:06:24.060
together and act as the broker.

00:06:24.060 --> 00:06:25.560
And then behind
that, we have what's

00:06:25.560 --> 00:06:27.180
really the meat of
the application.

00:06:27.180 --> 00:06:29.270
This is the audio
generation component.

00:06:29.270 --> 00:06:31.210
This is the part of
the application that

00:06:31.210 --> 00:06:34.310
is able to take as
parameters all the knobs--

00:06:34.310 --> 00:06:37.270
Chalkboard Scratching
or no-- and from that,

00:06:37.270 --> 00:06:38.720
first create a waveform.

00:06:38.720 --> 00:06:41.270
And then from that,
create an MP3 file.

00:06:41.270 --> 00:06:43.320
And then we pass that
back to the browser.

00:06:43.320 --> 00:06:46.470
So for this we're going to
rely on some open-source code

00:06:46.470 --> 00:06:48.390
that our team in Sydney
came up with that

00:06:48.390 --> 00:06:53.502
allows for waveform
generation and MP3 generation.

00:06:53.502 --> 00:06:55.960
Why don't we cut to Johan, and
you can take us through how?

00:06:55.960 --> 00:06:58.560
JOHAN: Do you want to
talk about how that works?

00:06:58.560 --> 00:06:59.060
ANDREW: Oh.

00:06:59.060 --> 00:07:02.980
Let me give you a quick summary
of how this component actually

00:07:02.980 --> 00:07:05.180
works.

00:07:05.180 --> 00:07:08.260
Because we want to talk between
our node app and our Go app,

00:07:08.260 --> 00:07:10.720
we want to have some kind of
easy mechanism for the two

00:07:10.720 --> 00:07:11.710
to communicate.

00:07:11.710 --> 00:07:15.340
So this Go app is
going to use HTTP.

00:07:15.340 --> 00:07:18.770
So we're going to send an HTTP
request-- it's a get request--

00:07:18.770 --> 00:07:20.890
and that contains the
values of all the knobs

00:07:20.890 --> 00:07:22.030
that were on screen.

00:07:22.030 --> 00:07:23.470
It's going to
create the waveform.

00:07:23.470 --> 00:07:26.930
And then in the HTTP response,
we're going to get as a payload

00:07:26.930 --> 00:07:31.920
the MP3 file that contains the
audio we want to play back.

00:07:31.920 --> 00:07:32.420
JOHAN: OK.

00:07:32.420 --> 00:07:34.204
So if we could go
back to the demo.

00:07:37.545 --> 00:07:38.420
ANDREW: Cut to Johan.

00:07:42.780 --> 00:07:44.560
JOHAN: So here I
am in my terminal.

00:07:44.560 --> 00:07:47.020
And I'm in the demo directory.

00:07:47.020 --> 00:07:49.710
As Andrew mentioned, there is
an HTML component to our app.

00:07:49.710 --> 00:07:51.210
There is a front
end and a back end.

00:07:51.210 --> 00:07:53.430
We're going to take a look
at the back end first.

00:07:53.430 --> 00:07:55.680
So we're going to
open backend.go.

00:07:55.680 --> 00:07:57.550
That's where the meat
of our application is.

00:07:57.550 --> 00:07:59.890
It's like a regular
Go HTTP application.

00:07:59.890 --> 00:08:02.150
You can see the
handler in there.

00:08:02.150 --> 00:08:05.372
We have an handler for Flash
audio that Andrew mentioned.

00:08:05.372 --> 00:08:06.830
And the interesting
part, the thing

00:08:06.830 --> 00:08:08.496
that we couldn't do
on App Engine before

00:08:08.496 --> 00:08:10.560
and we can do now
with Managed VM,

00:08:10.560 --> 00:08:12.586
is that we could use
the exact package that

00:08:12.586 --> 00:08:14.530
is from the Go standard
library and execute

00:08:14.530 --> 00:08:15.950
in that chief binary.

00:08:15.950 --> 00:08:19.930
And here we are going to execute
Lame, which is an MP3 encoder.

00:08:19.930 --> 00:08:23.845
We're going to stream the
waveform in and get the back

00:08:23.845 --> 00:08:25.310
from its standard
output, and just

00:08:25.310 --> 00:08:28.820
trim it back to
the HTTP response.

00:08:28.820 --> 00:08:32.870
So in order to deploy
that to App Engine,

00:08:32.870 --> 00:08:35.530
I'm just creating the HTML file.

00:08:35.530 --> 00:08:38.200
It's really looking like
your regular HTML file.

00:08:38.200 --> 00:08:40.339
There is runtime Go in there.

00:08:40.339 --> 00:08:41.880
One thing that is
different is that I

00:08:41.880 --> 00:08:43.876
have a flag that
is called VM-True.

00:08:43.876 --> 00:08:45.500
And another thing
that I have is that I

00:08:45.500 --> 00:08:47.485
have this apt_get_install
[INAUDIBLE] that

00:08:47.485 --> 00:08:50.294
says that I want
to install Lame.

00:08:50.294 --> 00:08:51.710
So let's take a
look at how we can

00:08:51.710 --> 00:08:54.467
run this application
on a laptop.

00:08:54.467 --> 00:08:55.800
So I'm back to the command line.

00:08:55.800 --> 00:08:59.120
I'm going to run
GCloud App Run Backend.

00:08:59.120 --> 00:09:03.040
So first it will
build my application.

00:09:03.040 --> 00:09:04.840
Then it will build my
application container

00:09:04.840 --> 00:09:08.540
because it's not my
regular app engine here.

00:09:08.540 --> 00:09:10.580
I have more than
only my Go binary.

00:09:10.580 --> 00:09:12.150
I also have
[? this part of the ?]

00:09:12.150 --> 00:09:13.860
executive order that
I want to install.

00:09:13.860 --> 00:09:16.900
So for that, I need to package
my application as a container.

00:09:16.900 --> 00:09:20.630
And then it will run my
container locally on my laptop.

00:09:20.630 --> 00:09:24.475
So now I could go to my
browser and open local host.

00:09:24.475 --> 00:09:25.850
And here I have
a series of links

00:09:25.850 --> 00:09:28.290
that I could open that is
the super-site that I set up

00:09:28.290 --> 00:09:31.640
before the demo to generate
some example sounds.

00:09:31.640 --> 00:09:34.293
The first one is a different
one than you heard before.

00:09:34.293 --> 00:09:35.140
[BEEPING]

00:09:35.140 --> 00:09:36.462
Can I get some more, Joe?

00:09:36.462 --> 00:09:40.160
[BEEPING MELODY] It was
just a regular sound.

00:09:42.760 --> 00:09:45.034
Another one more.

00:09:45.034 --> 00:09:47.174
[SCRATCHING SOUND]

00:09:47.174 --> 00:09:47.840
And [INAUDIBLE].

00:09:52.250 --> 00:09:56.411
So we're going to go back to
Andrew and stop the noise.

00:09:56.411 --> 00:09:58.160
ANDREW: Cool, so back
to the slides, guys.

00:10:00.820 --> 00:10:01.600
OK.

00:10:01.600 --> 00:10:02.500
So now this is cool.

00:10:02.500 --> 00:10:04.410
Now we can make some noise.

00:10:04.410 --> 00:10:07.817
So now what we want
to do is take this

00:10:07.817 --> 00:10:08.900
and make it collaborative.

00:10:08.900 --> 00:10:12.410
So we want to add
a rich front end

00:10:12.410 --> 00:10:15.122
and we want to add bidirectional
communications to this.

00:10:15.122 --> 00:10:17.330
And as we mentioned, we're
going to use Node in order

00:10:17.330 --> 00:10:18.220
to do this.

00:10:18.220 --> 00:10:19.970
And fortunately,
although you might

00:10:19.970 --> 00:10:23.340
think that rendering a lot of
HTML, creating a web server,

00:10:23.340 --> 00:10:25.490
handling a lot of back
end WebSocket connections

00:10:25.490 --> 00:10:27.120
might be complicated,
the good news

00:10:27.120 --> 00:10:28.790
is there's a ton
of great frameworks

00:10:28.790 --> 00:10:30.890
that actually help us do this.

00:10:30.890 --> 00:10:33.145
One that Johan and I
happen to be big fans of

00:10:33.145 --> 00:10:35.340
is called SalesJS.

00:10:35.340 --> 00:10:38.300
But SalesJS relies on Node.js.

00:10:38.300 --> 00:10:39.790
So the question
now is, how do we

00:10:39.790 --> 00:10:43.370
get Node.js, which is a
popular JavaScript server,

00:10:43.370 --> 00:10:45.460
into App Engine?

00:10:45.460 --> 00:10:48.310
So to talk about
that, let's first

00:10:48.310 --> 00:10:51.560
have a think about
what happened when

00:10:51.560 --> 00:10:54.680
Johan ran the Go
application before.

00:10:54.680 --> 00:10:58.060
So in the Go application,
he told App Engine

00:10:58.060 --> 00:11:01.370
that this was going to be a
Go application by specifying

00:11:01.370 --> 00:11:04.670
Go in the runtime
flag of app.yaml.

00:11:04.670 --> 00:11:07.070
And what that tells
App Engine is basically

00:11:07.070 --> 00:11:09.160
three steps that need to happen.

00:11:09.160 --> 00:11:12.380
First, it tells App Engine
to define an environment.

00:11:12.380 --> 00:11:14.480
Now here, when we say
define an environment,

00:11:14.480 --> 00:11:17.970
we mean bringing in any
dependencies, any executables,

00:11:17.970 --> 00:11:20.240
any code, anything
that's necessary to run

00:11:20.240 --> 00:11:23.405
your application outside
of the application itself.

00:11:23.405 --> 00:11:24.780
In the case of
the Go application

00:11:24.780 --> 00:11:27.690
that we saw before, really
this is pretty simple.

00:11:27.690 --> 00:11:30.560
This is just bringing
in that Lame executable

00:11:30.560 --> 00:11:33.890
that we saw earlier that's
creating the MP3 file.

00:11:33.890 --> 00:11:35.890
For something like,
say, a Java application,

00:11:35.890 --> 00:11:37.640
we might do something
more ambitious here.

00:11:37.640 --> 00:11:40.220
We might need to bring in a
servlet container like Jetty,

00:11:40.220 --> 00:11:42.170
for example.

00:11:42.170 --> 00:11:44.910
The second step, then,
is building the code.

00:11:44.910 --> 00:11:47.250
Now this is things
like compiling,

00:11:47.250 --> 00:11:49.330
things like
asset-packaging, things

00:11:49.330 --> 00:11:51.250
like bringing in
packages that might

00:11:51.250 --> 00:11:52.650
be dependent on your code.

00:11:52.650 --> 00:11:55.160
It's the sort of step
that still requires

00:11:55.160 --> 00:11:56.250
some build and install.

00:11:56.250 --> 00:11:58.980
But this is the sort of thing
that you want to happen,

00:11:58.980 --> 00:12:01.020
and you might want to
kick off every time you

00:12:01.020 --> 00:12:03.420
make a change to your code.

00:12:03.420 --> 00:12:06.060
So in the case of our build
step for our Go application,

00:12:06.060 --> 00:12:09.970
we were taking our Go code, and
we were actually compiling it.

00:12:09.970 --> 00:12:11.820
And then finally, we
have the run step.

00:12:11.820 --> 00:12:13.820
What the run step is doing
is saying that now we

00:12:13.820 --> 00:12:15.980
have all of our
resources and assets

00:12:15.980 --> 00:12:18.010
running in our
compute container,

00:12:18.010 --> 00:12:19.380
go and execute something.

00:12:19.380 --> 00:12:22.020
Go and make it happen.

00:12:22.020 --> 00:12:24.110
So what we're doing
with App Engine

00:12:24.110 --> 00:12:26.160
is introducing a
new value of runtime

00:12:26.160 --> 00:12:28.540
which is simply runtime custom.

00:12:28.540 --> 00:12:31.720
What runtime custom does is,
it removes any assumptions

00:12:31.720 --> 00:12:34.280
that App Engine makes about
the language or the development

00:12:34.280 --> 00:12:35.790
environment that
you happen to be

00:12:35.790 --> 00:12:37.470
implementing inside App Engine.

00:12:37.470 --> 00:12:40.159
And instead, it replaces
it with three shell scripts

00:12:40.159 --> 00:12:41.200
that you define yourself.

00:12:41.200 --> 00:12:44.120
So this are just straight
up Unix shell scripts.

00:12:44.120 --> 00:12:46.640
And these three scripts
correspond to the three phases

00:12:46.640 --> 00:12:47.830
that we saw before.

00:12:47.830 --> 00:12:49.210
So there's one
for bootstrapping,

00:12:49.210 --> 00:12:52.210
one for building,
and one for running.

00:12:52.210 --> 00:12:54.610
So once you have this,
it's easy to start

00:12:54.610 --> 00:12:56.380
thinking about how
you might use this

00:12:56.380 --> 00:12:59.440
to set up a Node application.

00:12:59.440 --> 00:13:04.500
So now Johan is going to
show us how this works.

00:13:04.500 --> 00:13:07.330
JOHAN: So now I'm back
into my demo directory.

00:13:07.330 --> 00:13:09.880
So Andrew mentioned that we
have one more component, which

00:13:09.880 --> 00:13:11.096
is a front end.

00:13:11.096 --> 00:13:12.970
And I'm going to show
you that in one moment.

00:13:12.970 --> 00:13:15.011
So our application has
two components, a back end

00:13:15.011 --> 00:13:15.654
and front end.

00:13:15.654 --> 00:13:18.070
And we need to somehow dispatch
a request between the two.

00:13:18.070 --> 00:13:22.950
So for that we have
a dispatch.yaml file,

00:13:22.950 --> 00:13:25.280
which is just something
that maps URL to modules.

00:13:25.280 --> 00:13:28.480
So here we say everything that's
audio goes to the back end,

00:13:28.480 --> 00:13:30.470
and everything else
goes to the front end.

00:13:30.470 --> 00:13:32.540
So I'm going to open
the front end now.

00:13:32.540 --> 00:13:34.790
I'm going to show you that
it's just a regular Node.js

00:13:34.790 --> 00:13:35.660
application.

00:13:35.660 --> 00:13:39.030
I have a package.json
to define my dependency.

00:13:39.030 --> 00:13:41.340
I have a server.js
that jumps right

00:13:41.340 --> 00:13:44.210
into cells, which is a
framework we are using.

00:13:44.210 --> 00:13:46.060
And then I have
my app.yaml file,

00:13:46.060 --> 00:13:48.142
which is what Andrew
just mentioned.

00:13:48.142 --> 00:13:50.600
Here, you can see that I don't
have Node.js for my runtime.

00:13:50.600 --> 00:13:51.090
I don't have Go.

00:13:51.090 --> 00:13:51.840
I don't have Java.

00:13:51.840 --> 00:13:53.300
I have runtime custom.

00:13:53.300 --> 00:13:55.170
And I still have VM-True.

00:13:55.170 --> 00:13:58.240
And I have those three scripts
sitting in my app directory.

00:13:58.240 --> 00:13:59.419
The first one is bootstrap.

00:13:59.419 --> 00:14:00.960
Bootstrap is really
for bootstrapping

00:14:00.960 --> 00:14:02.130
my runtime environment.

00:14:02.130 --> 00:14:05.770
That's something that I will
share for all my Node.js app.

00:14:05.770 --> 00:14:08.590
And here, what we
are doing is just

00:14:08.590 --> 00:14:10.820
mainly doing a few
apt-get install,

00:14:10.820 --> 00:14:13.460
and getting the Node.js
binary distribution

00:14:13.460 --> 00:14:15.490
from the Nodejs.org website.

00:14:15.490 --> 00:14:16.900
And we are also
installing Bower,

00:14:16.900 --> 00:14:18.691
which is a tool that
we will use to package

00:14:18.691 --> 00:14:19.770
our front-end dependency.

00:14:19.770 --> 00:14:21.710
What is interesting
to see here is

00:14:21.710 --> 00:14:24.484
that, even if we
change our application,

00:14:24.484 --> 00:14:26.400
we are not going to
rebuild this from scratch.

00:14:26.400 --> 00:14:29.467
It will be cached by the system.

00:14:29.467 --> 00:14:31.300
Then there is my build
step, which is really

00:14:31.300 --> 00:14:35.680
about building my
Node.js application.

00:14:35.680 --> 00:14:37.950
So in the case of Node.js,
where you don't really

00:14:37.950 --> 00:14:40.760
have a compile step,
building is more about

00:14:40.760 --> 00:14:43.390
installing your application's
specific dependency.

00:14:43.390 --> 00:14:46.320
Here I will run npm install
to install the dependency I

00:14:46.320 --> 00:14:48.480
configure in my
package.json, And just Bower

00:14:48.480 --> 00:14:52.010
install to install my
front-end dependency.

00:14:52.010 --> 00:14:54.610
Again, this will only
get run each time

00:14:54.610 --> 00:14:57.470
that I change my application.

00:14:57.470 --> 00:15:00.060
And the last step
is run Node.js,

00:15:00.060 --> 00:15:01.810
which is just running
my Node.js app.

00:15:01.810 --> 00:15:04.870
In that case, I just go node.

00:15:04.870 --> 00:15:08.000
So that's a pretty
flexible way to describe

00:15:08.000 --> 00:15:09.340
how you build your application.

00:15:09.340 --> 00:15:11.450
But today, in the
open-source source world,

00:15:11.450 --> 00:15:14.014
there are also new ways that
people are adopting in order

00:15:14.014 --> 00:15:15.430
to build an
application container.

00:15:18.395 --> 00:15:21.250
And we are very interested by
what is happening right now.

00:15:21.250 --> 00:15:24.610
And we decide to add, as an
experimental feature, support

00:15:24.610 --> 00:15:27.410
for Dockerfile inside
the App Engine SDK.

00:15:27.410 --> 00:15:29.450
So here, you basically
have the same content

00:15:29.450 --> 00:15:31.890
that you had before in
your three shell script,

00:15:31.890 --> 00:15:34.510
but used in a Dockerfile.

00:15:34.510 --> 00:15:36.610
So the difference
is that it gives me

00:15:36.610 --> 00:15:39.810
more flexibility on each of the
operations that I want to do,

00:15:39.810 --> 00:15:42.510
because each of one
is in the same file.

00:15:42.510 --> 00:15:44.667
And also I could leverage
caching better, meaning

00:15:44.667 --> 00:15:46.500
that, for example, I
don't have to reinstall

00:15:46.500 --> 00:15:48.650
my dependency if
I'm changing my app.

00:15:48.650 --> 00:15:53.400
Because I could add the
package.json to my container

00:15:53.400 --> 00:15:55.444
image before adding the
rest of my application.

00:15:55.444 --> 00:15:57.110
There is also a few
additional metadatas

00:15:57.110 --> 00:15:59.235
that I could define because
I'm in a new container,

00:15:59.235 --> 00:16:01.170
I could define the
port I'm listening to.

00:16:01.170 --> 00:16:02.544
And then I can
define the command

00:16:02.544 --> 00:16:05.620
that we use to run
my application.

00:16:05.620 --> 00:16:07.790
So it lets you know how
to run this application.

00:16:07.790 --> 00:16:10.050
So not only the
Node.js, not only the Go

00:16:10.050 --> 00:16:13.530
back end, but also the Node.js
front end on my laptop.

00:16:13.530 --> 00:16:17.020
So for that, I'm going
to call GCloud App Run.

00:16:17.020 --> 00:16:19.205
I'm going to pass three
modules that I want to run.

00:16:19.205 --> 00:16:20.830
My dispatch modules
that I've shown you

00:16:20.830 --> 00:16:24.370
over here, my front
end, and my back end.

00:16:24.370 --> 00:16:28.360
So node first is starting to
build my Node.js front end

00:16:28.360 --> 00:16:29.150
container images.

00:16:29.150 --> 00:16:31.155
So using the Dockerfile
or the bootstrap

00:16:31.155 --> 00:16:34.671
script that we defined before.

00:16:34.671 --> 00:16:35.920
It's now building my back end.

00:16:38.846 --> 00:16:40.470
Building the container
for my back end.

00:16:45.340 --> 00:16:47.720
And soon the application will
be serving from my laptop.

00:16:47.720 --> 00:16:49.330
So here, I know the
dispatch shell, which

00:16:49.330 --> 00:16:51.788
is a thing that will always
request [INAUDIBLE] to the pass

00:16:51.788 --> 00:16:54.560
to either the Node.js front
end or the Go back end,

00:16:54.560 --> 00:16:56.420
is running on port 8080.

00:16:56.420 --> 00:16:59.470
So I'm going to go back
here and open port 8080.

00:16:59.470 --> 00:17:03.070
And here, I have the same
app that I have in production

00:17:03.070 --> 00:17:04.087
running on my laptop.

00:17:04.087 --> 00:17:06.170
And I can continue to make
sound that I know you--

00:17:06.170 --> 00:17:11.061
[BEEPING]

00:17:11.061 --> 00:17:12.060
Now what we want to do--

00:17:12.060 --> 00:17:15.636
[WHIRRING]

00:17:15.636 --> 00:17:17.460
Turn that knob!

00:17:17.460 --> 00:17:19.530
So now, what we
are going to do is

00:17:19.530 --> 00:17:27.244
we're going to take this
application that is running--

00:17:27.244 --> 00:17:29.410
We're going to take this
application that is running

00:17:29.410 --> 00:17:31.826
on our laptop, and we're going
to [INAUDIBLE] the channel.

00:17:31.826 --> 00:17:34.150
So instead of doing
GCloud App Run,

00:17:34.150 --> 00:17:36.780
we're going to do
GCloud App Update.

00:17:41.842 --> 00:17:43.300
And now it's building
our container

00:17:43.300 --> 00:17:45.080
and then putting
it into production.

00:17:45.080 --> 00:17:47.900
So we have a few moments
before Andrew takes it back.

00:17:47.900 --> 00:17:50.910
So you can all go to
cacophon-demo.appspot.com.

00:17:50.910 --> 00:17:52.965
And start making noise.

00:17:52.965 --> 00:17:57.774
[BEEPING MELODY]

00:18:04.080 --> 00:18:07.090
We can go back to the slide.

00:18:07.090 --> 00:18:08.340
ANDREW: So jump on that, guys.

00:18:08.340 --> 00:18:09.230
That's live.

00:18:09.230 --> 00:18:10.313
cacophon-demo.appspot.com.

00:18:12.350 --> 00:18:13.540
And this is pretty cool.

00:18:13.540 --> 00:18:15.800
This is Node.js
running an App Engine.

00:18:15.800 --> 00:18:17.450
This is Go running
an App Engine.

00:18:17.450 --> 00:18:19.530
Together.

00:18:19.530 --> 00:18:23.050
So we're pretty excited by this.

00:18:23.050 --> 00:18:25.262
There's a few things that
we've shown you here.

00:18:25.262 --> 00:18:27.470
One of the things that we
perhaps didn't elaborate on

00:18:27.470 --> 00:18:31.600
before was worry-free coding.

00:18:31.600 --> 00:18:34.220
So first of all, we make
available several services

00:18:34.220 --> 00:18:36.290
to every App Engine
app by default.

00:18:36.290 --> 00:18:38.000
Every App Engine
app gets a default

00:18:38.000 --> 00:18:41.430
Cloud DataStore data set.

00:18:41.430 --> 00:18:44.040
And it can get access to that
through the Cloud DataStore

00:18:44.040 --> 00:18:44.570
API.

00:18:44.570 --> 00:18:46.849
It's a great API, it's
RESTful OAuth 2.0,

00:18:46.849 --> 00:18:49.140
and we have clients in a
number of different languages.

00:18:49.140 --> 00:18:50.980
And of course, you
can roll your own.

00:18:50.980 --> 00:18:54.260
Likewise, we also make we also
provide access to Google Cloud

00:18:54.260 --> 00:18:57.470
Storage, also through a
RESTful OAuth 2.0-based API.

00:18:57.470 --> 00:19:00.600
And every app get a defaults
Cloud Storage bucket.

00:19:00.600 --> 00:19:03.700
And then we also have App
Engine shared Memcache service.

00:19:03.700 --> 00:19:05.640
So this is actually free.

00:19:05.640 --> 00:19:08.580
And it's available through
the Memcache D protocol.

00:19:08.580 --> 00:19:09.580
And this is pretty cool.

00:19:09.580 --> 00:19:12.050
If you speak to a particular
IP address in port,

00:19:12.050 --> 00:19:14.660
we will automatically
segment your application.

00:19:14.660 --> 00:19:17.450
Sorry, segment your Memcache
to your application.

00:19:17.450 --> 00:19:19.950
And so you get access to your
shared Memcache automatically.

00:19:19.950 --> 00:19:22.199
And that's shared between
instances and, in fact, even

00:19:22.199 --> 00:19:24.210
between modules.

00:19:24.210 --> 00:19:26.810
And then finally, we take care
of something that is always

00:19:26.810 --> 00:19:29.040
a hassle with distributed
systems, which is logging

00:19:29.040 --> 00:19:30.480
and log aggregation.

00:19:30.480 --> 00:19:32.900
If you just write in a
variant of the syslog

00:19:32.900 --> 00:19:34.690
format to a
particular directory,

00:19:34.690 --> 00:19:38.139
then the Managed VM
infrastructure will capture

00:19:38.139 --> 00:19:39.680
those logs, it will
tail them, and it

00:19:39.680 --> 00:19:42.220
will ingest them into
the Google Cloud Platform

00:19:42.220 --> 00:19:45.380
and make them available to you.

00:19:45.380 --> 00:19:47.400
And finally, one thing
we should harp on

00:19:47.400 --> 00:19:48.840
is seamless local development.

00:19:48.840 --> 00:19:51.150
Everything that you saw
there that Johan was doing

00:19:51.150 --> 00:19:53.720
was in his local environment.

00:19:53.720 --> 00:19:55.960
And that involved not only
emulating the App Engine

00:19:55.960 --> 00:19:59.610
infrastructure, request
serving and packaging,

00:19:59.610 --> 00:20:02.650
but it also involved
emulating some

00:20:02.650 --> 00:20:04.610
of the services of the
Cloud Platform itself.

00:20:04.610 --> 00:20:06.100
We emulated DataStore for you.

00:20:06.100 --> 00:20:08.010
We emulated Cloud
Storage for you.

00:20:08.010 --> 00:20:10.250
We emulated Memcache
and logging for you.

00:20:10.250 --> 00:20:14.240
Even for runtimes that
we don't know about.

00:20:14.240 --> 00:20:16.600
And then of course, to get
that up into the Cloud,

00:20:16.600 --> 00:20:17.520
it's really simple.

00:20:17.520 --> 00:20:19.150
GCloud App Update.

00:20:19.150 --> 00:20:21.740
And you're done.

00:20:21.740 --> 00:20:24.450
So now that we've
got these up live,

00:20:24.450 --> 00:20:27.040
now is a good time to
talk quickly about events.

00:20:27.040 --> 00:20:30.050
Because this is a
managed environment,

00:20:30.050 --> 00:20:33.500
App Engine will be, in
Managed VM infrastructure,

00:20:33.500 --> 00:20:36.330
provisioning your application,
possibly onto one VM,

00:20:36.330 --> 00:20:37.250
or one instance.

00:20:37.250 --> 00:20:38.500
Possibly onto many.

00:20:38.500 --> 00:20:40.140
And it might even
spin up new instances

00:20:40.140 --> 00:20:43.550
and turn old ones down and
balance traffic across them.

00:20:43.550 --> 00:20:46.550
Because of this, we might be
ramping up and ramping down

00:20:46.550 --> 00:20:48.350
your application
from time to time.

00:20:48.350 --> 00:20:50.830
And it's useful to be able
to signal events to you

00:20:50.830 --> 00:20:51.792
that this is happening.

00:20:51.792 --> 00:20:53.500
We also mentioned
health checking before.

00:20:53.500 --> 00:20:55.390
This is really important.

00:20:55.390 --> 00:20:59.070
As your application is
running, we-- the Managed VM

00:20:59.070 --> 00:21:02.832
infrastructure-- need to know
that your instance is healthy,

00:21:02.832 --> 00:21:04.290
that your serving
stack is healthy,

00:21:04.290 --> 00:21:05.620
and that your app is healthy.

00:21:05.620 --> 00:21:08.460
So we will check
periodically to do that.

00:21:08.460 --> 00:21:11.980
So the way we signal all of
these events is using HTTP.

00:21:11.980 --> 00:21:15.590
We make a HTTP request
to a particular URL

00:21:15.590 --> 00:21:17.565
on a particular port
on your instance.

00:21:17.565 --> 00:21:19.190
And we leave it up
to you to figure out

00:21:19.190 --> 00:21:20.480
how to respond to that.

00:21:20.480 --> 00:21:21.870
For our managed
runtimes-- that's

00:21:21.870 --> 00:21:25.240
Python, Java, PHP, and Go--
we built all this in for you,

00:21:25.240 --> 00:21:27.210
although you could override it.

00:21:27.210 --> 00:21:29.600
For custom runtimes, it's
necessary to implement

00:21:29.600 --> 00:21:31.070
some of this stuff yourself.

00:21:31.070 --> 00:21:34.220
So one event is the start event.

00:21:34.220 --> 00:21:38.430
We usually call this right
after your run.sh script is run.

00:21:38.430 --> 00:21:40.585
And this basically
signals to your app

00:21:40.585 --> 00:21:42.239
that it's ready to
receive traffic.

00:21:42.239 --> 00:21:43.780
It's actually optional
whether or not

00:21:43.780 --> 00:21:45.238
you want to respond
to this or not,

00:21:45.238 --> 00:21:47.080
but it can be a useful signal.

00:21:47.080 --> 00:21:49.820
The next one, health
checking, is really important.

00:21:49.820 --> 00:21:51.070
We will health check your app.

00:21:51.070 --> 00:21:52.870
We will call this at
regular intervals.

00:21:52.870 --> 00:21:57.520
And what we expect back from
our HTTP request is a 200 OK

00:21:57.520 --> 00:21:59.977
HTTP response within a
reasonable time frame.

00:21:59.977 --> 00:22:02.060
If the Managed VM
infrastructure doesn't get this,

00:22:02.060 --> 00:22:03.785
then after a while
it's going to assume

00:22:03.785 --> 00:22:05.160
that your application
has entered

00:22:05.160 --> 00:22:06.770
some kind of pathological state.

00:22:06.770 --> 00:22:07.880
And it's not healthy.

00:22:07.880 --> 00:22:09.255
And so what we
might do there is,

00:22:09.255 --> 00:22:11.760
we might restart it, or even
possibly completely rebuilt it,

00:22:11.760 --> 00:22:13.560
and migrate traffic
from a backup instance,

00:22:13.560 --> 00:22:15.690
or to a back up instance.

00:22:15.690 --> 00:22:17.351
And then there's the stop event.

00:22:17.351 --> 00:22:18.850
This is kind of a
best-effort effort

00:22:18.850 --> 00:22:21.224
on one part of the
Managed VM infrastructure.

00:22:21.224 --> 00:22:22.640
But what we're
trying to do there,

00:22:22.640 --> 00:22:24.550
if we can do a
graceful shutdown,

00:22:24.550 --> 00:22:26.130
is give your
application a signal

00:22:26.130 --> 00:22:28.750
that it should be thinking about
wrapping up and terminating

00:22:28.750 --> 00:22:30.770
any loose ends and
any loose processes.

00:22:30.770 --> 00:22:34.810
So we try and give you a signal
there that can happen, too.

00:22:34.810 --> 00:22:38.900
So we're really excited about
where all this is going.

00:22:38.900 --> 00:22:40.570
This really is the
beginning for us

00:22:40.570 --> 00:22:43.840
in the Managed VM story and
the managed runtime story.

00:22:43.840 --> 00:22:45.700
We're actually really
excited about this,

00:22:45.700 --> 00:22:48.220
not only to see what
runtimes that you're

00:22:48.220 --> 00:22:50.270
able to bring to
App Engine, but also

00:22:50.270 --> 00:22:52.110
for what other
teams inside Google

00:22:52.110 --> 00:22:54.270
can build on top of
this infrastructure.

00:22:54.270 --> 00:22:57.060
You've already seen Go running
inside App Engine today.

00:22:57.060 --> 00:23:00.030
That's a language developed
entirely internally at Google.

00:23:00.030 --> 00:23:02.140
We're working now
with the Dart JS team

00:23:02.140 --> 00:23:03.790
to bring Dart to
App Engine as well.

00:23:03.790 --> 00:23:05.930
So expect to see that
in a few months time.

00:23:05.930 --> 00:23:08.980
And we would love to see
more innovation happening

00:23:08.980 --> 00:23:11.510
on our platform over
the coming months.

00:23:11.510 --> 00:23:14.999
So again, we're really excited
to be able to talk about this.

00:23:14.999 --> 00:23:17.290
We would love to see what
you're going to come up with.

00:23:17.290 --> 00:23:20.945
And we'd love to hear feedback
and hear where this is going.

00:23:20.945 --> 00:23:22.070
So thank you for your time.

00:23:22.070 --> 00:23:22.986
I know we're running--

00:23:22.986 --> 00:23:28.377
[APPLAUSE]

00:23:28.377 --> 00:23:29.960
So I know we're
running a little late.

00:23:29.960 --> 00:23:31.850
And I know you guys
are all getting hungry.

00:23:31.850 --> 00:23:33.740
So we might just take
one or two questions.

00:23:33.740 --> 00:23:35.870
And then, for any
follow up, feel

00:23:35.870 --> 00:23:38.510
free to talk to Johan or myself.

00:23:38.510 --> 00:23:39.010
Oh, great.

00:23:39.010 --> 00:23:41.086
There's a microphone
right there.

00:23:41.086 --> 00:23:42.420
AUDIENCE: Great demo.

00:23:42.420 --> 00:23:44.860
Is the dedicated Memcache
available or-- sorry,

00:23:44.860 --> 00:23:47.640
is the Memcache API available
within the Managed VMs?

00:23:47.640 --> 00:23:50.307
Or is it only available
from App Engine instances?

00:23:50.307 --> 00:23:51.890
ANDREW: It's available
within the VMs.

00:23:51.890 --> 00:23:54.040
So you could talk to
Memcache DY protocol

00:23:54.040 --> 00:23:56.750
to a particular
port, an IP address.

00:23:56.750 --> 00:23:58.670
What that ends up
doing is bridging back

00:23:58.670 --> 00:24:01.921
to the shared and dedicated
Memcache service of App Engine.

00:24:01.921 --> 00:24:03.670
And then whether it's
shared or dedicated,

00:24:03.670 --> 00:24:05.140
that's really just a
configuration option

00:24:05.140 --> 00:24:05.750
on your app.

00:24:05.750 --> 00:24:09.480
And like with regular instances,
you can swap over at any time.

00:24:09.480 --> 00:24:12.820
AUDIENCE: The local SDK.

00:24:12.820 --> 00:24:13.880
Is that running a VM?

00:24:13.880 --> 00:24:15.507
So it's actually--

00:24:15.507 --> 00:24:17.090
ANDREW: Behind the
scenes it's running

00:24:17.090 --> 00:24:18.740
an actual VM in a VM Player.

00:24:18.740 --> 00:24:21.114
AUDIENCE: It runs on Windows,
Mac, and Linux right now?

00:24:21.114 --> 00:24:22.030
ANDREW: Yeah, it does.

00:24:35.445 --> 00:24:37.070
AUDIENCE: I'm definitely
excited to see

00:24:37.070 --> 00:24:38.780
the Dart VM being pushed.

00:24:38.780 --> 00:24:40.990
I'm excited about
that personally.

00:24:40.990 --> 00:24:43.150
So, a question about
local development.

00:24:43.150 --> 00:24:46.260
So, if I want to use
the Managed VM system,

00:24:46.260 --> 00:24:47.980
is this going to
work on Mac OS X?

00:24:47.980 --> 00:24:50.060
Because in the past I've
seen some weird oddities

00:24:50.060 --> 00:24:51.690
where it really
works well on Linux

00:24:51.690 --> 00:24:52.930
and it doesn't work on Mac.

00:24:52.930 --> 00:24:55.510
And the other question
is related to it.

00:24:55.510 --> 00:24:57.760
Do I need to manage
my own Dockerfile

00:24:57.760 --> 00:25:00.386
to run in a container when
I'm doing local development?

00:25:00.386 --> 00:25:02.260
And this is all related
to local development.

00:25:02.260 --> 00:25:05.190
I can get that same
exact experience locally

00:25:05.190 --> 00:25:08.350
developing versus once
I push it or upload it?

00:25:08.350 --> 00:25:09.320
ANDREW: Got it.

00:25:09.320 --> 00:25:12.065
So to your first point, Mac
versus Windows versus Linux.

00:25:15.432 --> 00:25:17.640
An artifact of wanting to
be able to properly emulate

00:25:17.640 --> 00:25:19.270
a Managed VM means
that we actually

00:25:19.270 --> 00:25:20.936
want to move the
development environment

00:25:20.936 --> 00:25:22.294
to a virtual machine as well.

00:25:22.294 --> 00:25:24.210
And that has a nice side
effect of introducing

00:25:24.210 --> 00:25:26.560
a lot of consistency
between the-- It

00:25:26.560 --> 00:25:28.184
moves a lot of the
logic up to the VM,

00:25:28.184 --> 00:25:30.600
which we can then easily keep
consistent across platforms.

00:25:30.600 --> 00:25:32.650
So hopefully that
will help address

00:25:32.650 --> 00:25:34.655
a lot of the
environment-specific issues

00:25:34.655 --> 00:25:36.260
that you see.

00:25:36.260 --> 00:25:38.180
And so the second
question is actually

00:25:38.180 --> 00:25:41.110
the docker file support is
very experimental right now.

00:25:41.110 --> 00:25:42.970
So we're trying to
see if we can get that

00:25:42.970 --> 00:25:44.261
into the product at the moment.

00:25:46.886 --> 00:25:48.260
Whether or not
you'll need to use

00:25:48.260 --> 00:25:52.120
the SDK to build packages
and push them up locally,

00:25:52.120 --> 00:25:53.550
we're also still working on.

00:25:53.550 --> 00:25:59.140
Actually, right now you can push
all of this up to App Engine

00:25:59.140 --> 00:26:01.000
just as a set of
scripts, and we'll

00:26:01.000 --> 00:26:03.350
host the building for you.

00:26:03.350 --> 00:26:04.604
That may change in the future.

00:26:04.604 --> 00:26:05.770
We're still working on that.

00:26:05.770 --> 00:26:07.686
JOHAN: But you'll stiil
have those three files

00:26:07.686 --> 00:26:10.970
that you could define
yourself, which is like a bit

00:26:10.970 --> 00:26:11.614
more simple.

00:26:11.614 --> 00:26:13.030
But you also have
less flexibility

00:26:13.030 --> 00:26:14.770
than the Dockerfile,
where you could just

00:26:14.770 --> 00:26:17.329
say how you bootstrap your
own environment from a JS,

00:26:17.329 --> 00:26:19.120
how you build your
application from the JS,

00:26:19.120 --> 00:26:20.265
and how you run it.

00:26:20.265 --> 00:26:21.890
ANDREW: We want to
support both models.

00:26:21.890 --> 00:26:24.785
Either give us your source
and we'll build it, or give us

00:26:24.785 --> 00:26:25.910
something and we'll run it.

00:26:29.070 --> 00:26:30.980
AUDIENCE: So for
the Managed VMs,

00:26:30.980 --> 00:26:33.140
at least if the VM
is an App Engine one,

00:26:33.140 --> 00:26:37.200
my understanding is it's going
to get rebooted once a week,

00:26:37.200 --> 00:26:38.580
I guess, to apply patches.

00:26:38.580 --> 00:26:40.910
So is that still the case?

00:26:40.910 --> 00:26:43.170
Is that handled through
the stop events?

00:26:43.170 --> 00:26:45.710
And if you have 10
servers running,

00:26:45.710 --> 00:26:49.500
it's going to hit them with
a Stop and a Rolling Window

00:26:49.500 --> 00:26:51.556
so you can still have up time?

00:26:51.556 --> 00:26:52.430
ANDREW: That's right.

00:26:52.430 --> 00:26:54.410
So we will definitely be
rebooting your machine

00:26:54.410 --> 00:26:56.370
from time to time.

00:26:56.370 --> 00:26:58.000
How frequently it
happens will vary,

00:26:58.000 --> 00:27:00.550
but we want to make sure
that-- the VM gives you

00:27:00.550 --> 00:27:01.440
a lot of flexibility.

00:27:01.440 --> 00:27:05.209
But it's not really a
place for state, as such.

00:27:05.209 --> 00:27:07.250
Anything beyond, say,
temporary files or anything

00:27:07.250 --> 00:27:09.490
like that, it's probably
not a good spot for.

00:27:09.490 --> 00:27:10.620
And then, yes.

00:27:10.620 --> 00:27:12.150
We'll send a
warning signal where

00:27:12.150 --> 00:27:16.190
we can to give you
some options if you

00:27:16.190 --> 00:27:17.786
need to migrate
state to do that.

00:27:22.746 --> 00:27:24.234
OK.

00:27:24.234 --> 00:27:25.230
Cool.

00:27:25.230 --> 00:27:28.370
I will let you guys get some
food, but thank you very much.

