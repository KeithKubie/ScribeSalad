WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Here is my answer.

00:00:02.000 --> 00:00:04.000
If it's integer, we do what we did before.

00:00:04.000 --> 00:00:09.000
Otherwise, we go into a loop until the sum of the times is greater than or equal

00:00:09.000 --> 00:00:12.000
to the floating point number that passed in.

00:00:12.000 --> 00:00:15.000
Now I think we've got a pretty good handle on timing our functions.

00:00:15.000 --> 00:00:18.000
Another interesting question would be how many assignments

00:00:18.000 --> 00:00:21.000
did we take along the way, not just how long did they take?

00:00:21.000 --> 00:00:26.000
Now, if our program had been structured using for statements

00:00:26.000 --> 00:00:29.000
rather than using the big generator expression,

00:00:29.000 --> 00:00:31.000
we could do it something like this.

00:00:31.000 --> 00:00:33.000
We could say we're going to count the number of assignments.

00:00:33.000 --> 00:00:37.000
We're going to start the count at 0, and then every time we go through an ordering

00:00:37.000 --> 00:00:39.000
we're going to increment the count by 1.

00:00:39.000 --> 00:00:41.000
You might say we want to increment the count by 5,

00:00:41.000 --> 00:00:44.000
because we've assigned each of the 5 houses one of the colors,

00:00:44.000 --> 00:00:48.000
but I'm counting that as 1. You can choose which one you want to go on.

00:00:48.000 --> 00:00:52.000
Then we just have a structure like that, and we can keep track of the counts.

00:00:52.000 --> 00:00:56.000
That will work fine, and it's not too bad, but it bothers me a little bit

00:00:56.000 --> 00:00:59.000
that we had to do such violence to this program.

00:00:59.000 --> 00:01:03.000
We had this program, and we had to go in in so many places,

00:01:03.000 --> 00:01:05.000
interrupt it, and put in so many statements.

00:01:05.000 --> 09:59:59.000
I wanted to see can we separate that out a little bit?

