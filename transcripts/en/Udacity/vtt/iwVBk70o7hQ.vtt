WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:02.490
We've defined P as a set of languages,
but

00:00:02.490 --> 00:00:05.910
ultimately we want to talk
about it as a set of problems.

00:00:05.910 --> 00:00:09.060
Unfortunately, this isn't
as easy as it might seem.

00:00:09.060 --> 00:00:13.180
The encoding rules we use for turning
an abstract problem into a string

00:00:13.180 --> 00:00:16.230
can effect whether or
not the language is in P.

00:00:16.230 --> 00:00:17.910
Let's see how this might happen.

00:00:17.910 --> 00:00:22.510
&gt;&gt; Consider the question, does a graph,
G, have a Hamiltonian cycle?

00:00:22.510 --> 00:00:25.560
That is, a cycle that visits
all the vertices exactly once.

00:00:27.300 --> 00:00:30.770
Here's a graph, and
here's it's adjacency matrix.

00:00:30.770 --> 00:00:33.340
A natural way to represent
the graph as a string,

00:00:33.340 --> 00:00:37.270
is to write out it's adjacency
matrix in scan line order.

00:00:37.270 --> 00:00:38.930
First a 0, then a 1, then a 0.

00:00:38.930 --> 00:00:41.880
Then a 1, then a 0, then a 1.

00:00:41.880 --> 00:00:44.830
Then a 0, then a 1, then a 0.

00:00:44.830 --> 00:00:48.700
But this isn't the only
way to encode the graph.

00:00:48.700 --> 00:00:51.070
We might do something
rather inefficient.

00:00:51.070 --> 00:00:54.740
The scan line encoding for this graph
represents the number 170 in binary.

00:00:54.740 --> 00:01:00.150
We could choose to represent
the graph essentially in unary.

00:01:00.150 --> 00:01:07.376
We might represent the graph as
342 zeros, followed by 170 ones.

00:01:07.376 --> 00:01:12.089
The fact that there are two to
the ninth equals five 12 symbols total

00:01:12.089 --> 00:01:15.999
indicates that it's a three
by three adjacency matrix.

00:01:15.999 --> 00:01:20.472
And converting the 170 back into
binary gives us the entries of

00:01:20.472 --> 00:01:22.110
the adjacency matrix.

00:01:23.440 --> 00:01:27.120
This is a very silly encoding, but
there's nothing invalid about it.

00:01:27.120 --> 00:01:29.950
This language, it turns out, is in P.

00:01:29.950 --> 00:01:33.450
Not because it allows the algorithm
to exploit any extra information, or

00:01:33.450 --> 00:01:37.470
anything like that, but
just because the input is so long.

00:01:37.470 --> 00:01:41.550
The more sensible, concise encoding,
isn't known to be in P.

00:01:41.550 --> 00:01:42.750
And it probably isn't,

00:01:42.750 --> 00:01:45.300
by an overwhelming consensus
of complexity theorists.

00:01:46.410 --> 00:01:50.450
Thus a change in the encoding,
can affect whether a problem is in P.

00:01:51.635 --> 00:01:54.285
Yet it's ultimately problems
that we're interested in,

00:01:54.285 --> 00:01:56.885
independent of the particulars
of the encoding.

00:01:56.885 --> 00:01:59.545
We deal with this problem
essentially by ignoring

00:01:59.545 --> 00:02:01.435
unreasonable representations
like this one.

00:02:02.525 --> 00:02:06.515
As long as we consider any reasonable
encoding, think about what XML or

00:02:06.515 --> 00:02:10.310
JSON would produce from how you
would store it in computer memory.

00:02:10.310 --> 00:02:14.830
Then the particulars won't change
the membership of a language in P, and

00:02:14.830 --> 00:02:19.180
hence we can talk, at least informally,
about problems being NP or not.

