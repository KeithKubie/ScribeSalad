WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.250
TAO DONG: My name is Tao Dong.

00:00:01.250 --> 00:00:03.750
I'm a UX researcher
on the Flutter team.

00:00:03.750 --> 00:00:07.950
So today, I will talk about
API usability and some lessons

00:00:07.950 --> 00:00:12.660
I have learned from doing API
usability studies on Flutter

00:00:12.660 --> 00:00:16.350
and through observing how people
actually use the API that we're

00:00:16.350 --> 00:00:19.130
providing the SDK.

00:00:19.130 --> 00:00:21.920
So why is API
usability important?

00:00:21.920 --> 00:00:23.960
It's because API
usability issues

00:00:23.960 --> 00:00:28.160
can lead to bugs in your
code, and some of those bugs

00:00:28.160 --> 00:00:29.930
can be mission-critical.

00:00:29.930 --> 00:00:33.740
And it also makes programming
less efficient and less

00:00:33.740 --> 00:00:36.500
enjoyable for other people.

00:00:36.500 --> 00:00:38.180
But when we talk
about API usability,

00:00:38.180 --> 00:00:40.620
it's actually not
just one thing.

00:00:40.620 --> 00:00:44.290
And we need to care about
three complementary areas.

00:00:44.290 --> 00:00:47.180
And they're API
design, tools that

00:00:47.180 --> 00:00:50.840
make APIs discoverable
and usable,

00:00:50.840 --> 00:00:53.360
as well as documentation,
which explains

00:00:53.360 --> 00:00:55.940
how to use APIs and libraries.

00:00:55.940 --> 00:00:58.690
And often, you can find
that one API usability

00:00:58.690 --> 00:01:02.810
issue can be solved
in many different ways

00:01:02.810 --> 00:01:05.160
within this space.

00:01:05.160 --> 00:01:07.030
So how can we make
APIs more usable?

00:01:07.030 --> 00:01:10.100
Here, I share some lessons we
have learned from UX research

00:01:10.100 --> 00:01:12.800
on Flutter.

00:01:12.800 --> 00:01:15.185
The first lesson
is reducing context

00:01:15.185 --> 00:01:17.190
switching during programming.

00:01:17.190 --> 00:01:20.120
And here, I specifically
mean programmers

00:01:20.120 --> 00:01:23.420
can move much faster if they
don't have to leave their code

00:01:23.420 --> 00:01:25.400
editor to look for
the information they

00:01:25.400 --> 00:01:29.330
need for a problem they
encounter during programming.

00:01:29.330 --> 00:01:32.900
That's why it's pretty
common to see programmers

00:01:32.900 --> 00:01:37.310
where they look for information
in the source code of thr ID,

00:01:37.310 --> 00:01:39.410
instead of going to
their web browser

00:01:39.410 --> 00:01:43.460
and look for online references.

00:01:43.460 --> 00:01:47.300
So having a lot of documentation
is obviously a great thing

00:01:47.300 --> 00:01:48.600
to have.

00:01:48.600 --> 00:01:53.300
But what matters more is how
and where the user of the API

00:01:53.300 --> 00:01:58.730
is going to access most relevant
information during programming.

00:01:58.730 --> 00:02:02.880
I'm a strong believer in
high-quality API documentation

00:02:02.880 --> 00:02:06.260
in the source code
itself, because that way,

00:02:06.260 --> 00:02:09.440
you don't require
the user of your API

00:02:09.440 --> 00:02:14.960
to switch a context to somewhere
else and risk not getting back

00:02:14.960 --> 00:02:18.020
to the original task.

00:02:18.020 --> 00:02:22.310
The second lesson is
that, as API designers,

00:02:22.310 --> 00:02:26.150
we should help users build a
clear mental model when they're

00:02:26.150 --> 00:02:28.070
dealing with complex APIs.

00:02:28.070 --> 00:02:31.100
So in a recent UX
study we ran, we

00:02:31.100 --> 00:02:34.640
observed that participants
had trouble understanding

00:02:34.640 --> 00:02:37.550
how different building
blocks in Flutter animations

00:02:37.550 --> 00:02:39.450
were related to one other.

00:02:39.450 --> 00:02:43.500
And you can see that you have
to really digest these concepts.

00:02:43.500 --> 00:02:46.490
So one potential way
to address this issue

00:02:46.490 --> 00:02:52.100
is to visualize the conceptual
model of such a complex API

00:02:52.100 --> 00:02:55.970
using a visual
representation, like this one,

00:02:55.970 --> 00:03:01.010
and then map different APIs to
draw in the parts of this model

00:03:01.010 --> 00:03:04.220
and also leverage some
familiar mental models

00:03:04.220 --> 00:03:07.170
that the user may already have.

00:03:07.170 --> 00:03:11.560
The third lesson is speaking
your users' language.

00:03:11.560 --> 00:03:15.470
Anyone knows what the Block
widget does in Flutter?

00:03:18.330 --> 00:03:20.670
It's OK if you don't have a
clue, because nobody really

00:03:20.670 --> 00:03:21.180
knows.

00:03:21.180 --> 00:03:23.190
[LAUGHTER]

00:03:23.190 --> 00:03:25.910
But if I ask you about
this widget instead,

00:03:25.910 --> 00:03:28.740
who knows what ListView does?

00:03:28.740 --> 00:03:31.330
I bet many of you do.

00:03:31.330 --> 00:03:34.350
But you probably didn't know
that Block was the old name

00:03:34.350 --> 00:03:38.730
of ListView until early 2017.

00:03:38.730 --> 00:03:42.780
So very early on, we found
that users really could not

00:03:42.780 --> 00:03:47.040
find Block when they were
trying to find a widget that

00:03:47.040 --> 00:03:49.410
can scroll a list of things.

00:03:49.410 --> 00:03:52.980
And then we changed the name
and made the widget much easier

00:03:52.980 --> 00:03:54.930
to discover.

00:03:54.930 --> 00:03:58.800
And the next lesson is enable
programming by example.

00:03:58.800 --> 00:04:00.780
Everyone loves
examples, but that

00:04:00.780 --> 00:04:04.980
does not mean having a
bunch of examples somewhere

00:04:04.980 --> 00:04:06.490
is good enough.

00:04:06.490 --> 00:04:09.300
We used to have a feature
that we thought was clever.

00:04:09.300 --> 00:04:13.440
We had a link on our website,
which will allow the user

00:04:13.440 --> 00:04:19.209
to search for all the usage of
an API inside of the Flutter

00:04:19.209 --> 00:04:20.345
repository.

00:04:20.345 --> 00:04:20.970
But the result?

00:04:20.970 --> 00:04:24.030
That it only
overwhelmed our users,

00:04:24.030 --> 00:04:26.220
because there were so
many, and none of those

00:04:26.220 --> 00:04:30.157
had screenshots to tell
you which one is the one

00:04:30.157 --> 00:04:30.990
you are looking for.

00:04:30.990 --> 00:04:33.420
As this study
participant pointed out,

00:04:33.420 --> 00:04:35.560
it's kind of overwhelming.

00:04:35.560 --> 00:04:37.260
So what did we realize?

00:04:37.260 --> 00:04:42.720
That having a curated and
focused simple code in the API

00:04:42.720 --> 00:04:45.750
documentation itself
and in the same time

00:04:45.750 --> 00:04:48.720
provide screenshots,
illustrations, to show

00:04:48.720 --> 00:04:52.590
the output of that piece
of code is really important

00:04:52.590 --> 00:04:55.950
to guide the user and to help
them quickly understand what

00:04:55.950 --> 00:04:59.760
an API does and decide
whether this sample code is

00:04:59.760 --> 00:05:03.660
relevant to their task or not.

00:05:03.660 --> 00:05:05.760
The last lesson I'd
like to share today

00:05:05.760 --> 00:05:09.360
is that the API and
tooling should really

00:05:09.360 --> 00:05:13.080
promote recognition,
rather than recall.

00:05:13.080 --> 00:05:18.300
As an example, probably a lot of
you have used this Colors API.

00:05:18.300 --> 00:05:21.240
But this API used
to require the user

00:05:21.240 --> 00:05:25.290
to remember specific values for
different shades of the color,

00:05:25.290 --> 00:05:28.230
and it also used a map
to store these colors,

00:05:28.230 --> 00:05:29.750
store these values.

00:05:29.750 --> 00:05:32.550
So you kind of need to
remember the specific number

00:05:32.550 --> 00:05:34.020
to use this API.

00:05:34.020 --> 00:05:36.570
And it also does not
autocomplete well,

00:05:36.570 --> 00:05:40.130
because the map keys
don't autocomplete.

00:05:40.130 --> 00:05:45.030
After realizing there was
a problem with this API,

00:05:45.030 --> 00:05:48.960
we redesigned this API and
made sure all the shades

00:05:48.960 --> 00:05:52.890
of a particular color would
show up in the autocomplete box

00:05:52.890 --> 00:05:56.250
and also added a little preview
on the sidebar of the Code

00:05:56.250 --> 00:06:02.600
Editor to tell you which exact
shade that you have selected.

00:06:02.600 --> 00:06:07.920
So these changes have turned
a pretty expensive recall

00:06:07.920 --> 00:06:12.360
operation in the user's head
to a less expensive recognition

00:06:12.360 --> 00:06:14.190
operation in the user's head.

00:06:14.190 --> 00:06:17.880
And this is also a case
where API redesign can really

00:06:17.880 --> 00:06:20.310
enable tooling.

00:06:20.310 --> 00:06:23.280
So these are the five lessons I
wanted to share with you today.

00:06:23.280 --> 00:06:25.800
And you, as our
community, can really

00:06:25.800 --> 00:06:29.700
help us make a difference by
reporting issues in usability

00:06:29.700 --> 00:06:33.240
from your own experience,
and give us your ideas,

00:06:33.240 --> 00:06:36.990
and potentially submit PRs
to fix some of the issues.

00:06:36.990 --> 00:06:41.220
And there is an unconference
session tomorrow on this topic,

00:06:41.220 --> 00:06:43.440
if you are interested
in further discussions.

00:06:43.440 --> 00:06:43.940
Please come.

00:06:43.940 --> 00:06:46.030
I think it's at 2:30.

00:06:46.030 --> 00:06:47.600
And thank you very much.

00:06:47.600 --> 00:06:49.680
Looking forward to
further discussions.

00:06:49.680 --> 00:06:52.730
[APPLAUSE]

