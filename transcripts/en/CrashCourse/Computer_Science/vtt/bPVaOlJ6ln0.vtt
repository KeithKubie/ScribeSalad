WEBVTT
Kind: captions
Language: en

00:00:03.120 --> 00:00:05.819
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:05.819 --> 00:00:10.339
Over the last three episodes, we’ve talked
about how computers have become interconnected,

00:00:10.339 --> 00:00:12.850
allowing us to communicate near-instantly
across the globe.

00:00:12.850 --> 00:00:17.010
But, not everyone who uses these networks
is going to play by the rules, or have our

00:00:17.010 --> 00:00:18.130
best interests at heart.

00:00:18.130 --> 00:00:22.590
Just as how we have physical security like
locks, fences and police officers to minimize

00:00:22.590 --> 00:00:27.260
crime in the real world, we need cybersecurity
to minimize crime and harm in the virtual

00:00:27.260 --> 00:00:27.780
world.

00:00:27.780 --> 00:00:29.260
Computers don’t have ethics.

00:00:29.260 --> 00:00:33.200
Give them a formally specified problem and
they’ll happily pump out an answer at lightning

00:00:33.200 --> 00:00:34.020
speed.

00:00:34.020 --> 00:00:36.880
Running code that takes down a hospital’s
computer systems until a ransom is paid is

00:00:36.880 --> 00:00:40.190
no different to a computer than code that
keeps a patient's heart beating.

00:00:40.190 --> 00:00:44.180
Like the Force, computers can be pulled to
the light side or the dark side.

00:00:44.240 --> 00:00:48.760
Cybersecurity is like the Jedi Order, trying
to bring peace and justice to the cyber-verse.

00:00:48.760 --> 00:00:57.920
INTRO

00:00:57.920 --> 00:01:02.450
The scope of cybersecurity evolves as fast
as the capabilities of computing, but we can

00:01:02.450 --> 00:01:06.940
think of it as a set of techniques to protect
the secrecy, integrity and availability of

00:01:06.940 --> 00:01:09.300
computer systems and data against threats.

00:01:09.300 --> 00:01:11.280
Let’s unpack those three goals:

00:01:11.280 --> 00:01:15.540
Secrecy, or confidentiality, means that only
authorized people should be able to access

00:01:15.540 --> 00:01:18.220
or read specific computer systems and data.

00:01:18.220 --> 00:01:22.800
Data breaches, where hackers reveal people’s
credit card information, is an attack on secrecy.

00:01:22.800 --> 00:01:27.420
Integrity means that only authorized people
should have the ability to use or modify systems

00:01:27.420 --> 00:01:28.460
and data.

00:01:28.460 --> 00:01:32.940
Hackers who learn your password and send e-mails
masquerading as you, is an integrity attack.

00:01:32.940 --> 00:01:36.740
And availability means that authorized people
should always have access to their systems

00:01:36.740 --> 00:01:37.930
and data.

00:01:37.930 --> 00:01:42.050
Think of Denial of Service Attacks, where
hackers overload a website with fake requests

00:01:42.050 --> 00:01:44.480
to make it slow or unreachable for others.

00:01:44.480 --> 00:01:46.530
That’s attacking the service’s availability.

00:01:46.530 --> 00:01:50.670
To achieve these three general goals, security
experts start with a specification of who

00:01:50.670 --> 00:01:54.260
your “enemy” is, at an abstract level,
called a threat model.

00:01:54.260 --> 00:01:58.380
This profiles attackers: their capabilities,
goals, and probable means of attack – what’s

00:01:58.380 --> 00:02:01.270
called, awesomely enough, an attack vector.

00:02:01.270 --> 00:02:04.810
Threat models let you prepare against specific
threats, rather than being overwhelmed by

00:02:04.810 --> 00:02:07.680
all the ways hackers could get to your systems
and data.

00:02:07.680 --> 00:02:08.859
And there are many, many ways.

00:02:08.859 --> 00:02:12.170
Let’s say you want to “secure” physical
access to your laptop.

00:02:12.170 --> 00:02:14.299
Your threat model is a nosy roommate.

00:02:14.299 --> 00:02:18.819
To preserve the secrecy, integrity and availability
of your laptop, you could keep it hidden in

00:02:18.819 --> 00:02:20.349
your dirty laundry hamper.

00:02:20.349 --> 00:02:24.870
But, if your threat model is a mischievous
younger sibling who knows your hiding spots,

00:02:24.870 --> 00:02:27.540
then you’ll need to do more: maybe lock
it in a safe.

00:02:27.540 --> 00:02:31.959
In other words, how a system is secured depends
heavily on who it’s being secured against.

00:02:31.959 --> 00:02:36.200
Of course, threat models are typically a bit
more formally defined than just “nosy roommate”.

00:02:36.200 --> 00:02:40.450
Often you’ll see threat models specified
in terms of technical capabilities.

00:02:40.450 --> 00:02:44.569
For example, “someone who has physical access
to your laptop along with unlimited time”.

00:02:44.569 --> 00:02:48.300
With a given threat model, security architects
need to come up with a solution that keeps

00:02:48.300 --> 00:02:52.719
a system secure – as long as certain assumptions
are met, like no one reveals their password

00:02:52.719 --> 00:02:53.719
to the attacker.

00:02:53.719 --> 00:02:56.890
There are many methods for protecting computer
systems, networks and data.

00:02:56.890 --> 00:03:02.400
A lot of security boils down to two questions: who are you, and what should you have access to?

00:03:02.400 --> 00:03:06.220
Clearly, access should be given to the right
people, but refused to the wrong people.

00:03:06.240 --> 00:03:10.660
Like, bank employees should be able to open
ATMs to restock them, but not me… because

00:03:10.660 --> 00:03:12.349
I’d take it all... all of it!

00:03:12.349 --> 00:03:14.349
That ceramic cat collection doesn’t buy
itself!

00:03:14.349 --> 00:03:18.840
So, to differentiate between right and wrong
people, we use authentication - the process

00:03:18.840 --> 00:03:22.080
by which a computer understands who it’s
interacting with.

00:03:22.080 --> 00:03:25.180
Generally, there are three types, each with
their own pros and cons:

00:03:25.180 --> 00:03:26.000
What you know.

00:03:26.000 --> 00:03:26.800
What you have.

00:03:26.800 --> 00:03:27.460
And what you are.

00:03:27.460 --> 00:03:31.160
What you know authentication is based on knowledge
of a secret that should be known only by the

00:03:31.160 --> 00:03:35.260
real user and the computer, for example, a
username and password.

00:03:35.279 --> 00:03:38.280
This is the most widely used today because
it’s the easiest to implement.

00:03:38.280 --> 00:03:42.700
But, it can be compromised if hackers guess
or otherwise come to know your secret.

00:03:42.700 --> 00:03:48.140
Some passwords are easy for humans to figure
out, like 12356 or q-w-e-r-t-y.

00:03:48.140 --> 00:03:51.650
But, there are also ones that are easy for
computers.

00:03:51.650 --> 00:03:53.930
Consider the PIN: 2580.

00:03:53.930 --> 00:03:56.769
This seems pretty difficult to guess – and
it is – for a human.

00:03:56.769 --> 00:04:00.359
But there are only ten thousand possible combinations
of 4-digit PINs.

00:04:00.359 --> 00:04:08.280
A computer can try entering 0000, then try
0001, and then 0002, all the way up to 9999...

00:04:08.280 --> 00:04:10.989
in a fraction of a second.

00:04:10.989 --> 00:04:14.169
This is called a brute force attack, because
it just tries everything.

00:04:14.169 --> 00:04:16.380
There’s nothing clever to the algorithm.

00:04:16.380 --> 00:04:20.630
Some computer systems lock you out, or have
you wait a little, after say three wrong attempts.

00:04:20.630 --> 00:04:25.180
That’s a common and reasonable strategy,
and it does make it harder for less sophisticated

00:04:25.180 --> 00:04:25.680
attackers.

00:04:25.680 --> 00:04:29.560
But think about what happens if hackers have
already taken over tens of thousands of computers,

00:04:29.560 --> 00:04:30.580
forming a botnet.

00:04:30.580 --> 00:04:35.500
Using all these computers, the same pin – 2580
– can be tried on many tens of thousands

00:04:35.500 --> 00:04:37.420
of bank accounts simultaneously.

00:04:37.420 --> 00:04:41.260
Even with just a single attempt per account,
they’ll very likely get into one or more

00:04:41.270 --> 00:04:43.140
that just happen to use that PIN.

00:04:43.150 --> 00:04:46.060
In fact, we’ve probably guessed the pin
of someone watching this video!

00:04:46.060 --> 00:04:50.680
Increasing the length of PINs and passwords
can help, but even 8 digit PINs are pretty

00:04:50.680 --> 00:04:51.680
easily cracked.

00:04:51.680 --> 00:04:55.449
This is why so many websites now require you
to use a mix of upper and lowercase letters,

00:04:55.449 --> 00:05:00.080
special symbols, and so on – it explodes
the number of possible password combinations.

00:05:00.080 --> 00:05:04.740
An 8-digit numerical PIN only has a hundred
million combinations – computers eat that

00:05:04.740 --> 00:05:05.740
for breakfast!

00:05:05.740 --> 00:05:10.710
But an 8-character password with all those
funky things mixed in has more than 600 trillion

00:05:10.710 --> 00:05:11.710
combinations.

00:05:11.710 --> 00:05:15.900
Of course, these passwords are hard for us
mere humans to remember, so a better approach

00:05:15.900 --> 00:05:19.879
is for websites to let us pick something more
memorable, like three words joined together:

00:05:19.879 --> 00:05:22.550
“green brothers rock” or “pizza tasty
yum”.

00:05:22.550 --> 00:05:27.150
English has around 100,000 words in use, so
putting three together would give you roughly

00:05:27.150 --> 00:05:31.050
1 quadrillion possible passwords. Good luck trying to guess that!

00:05:31.050 --> 00:05:35.220
I should also note here that using non-dictionary
words is even better against more sophisticated

00:05:35.220 --> 00:05:38.479
kinds of attacks, but we don’t have time
to get into that here.

00:05:38.479 --> 00:05:42.069
Computerphile has a great video on choosing
a password - link in the dooblydoo.

00:05:42.069 --> 00:05:45.810
What you have authentication, on the other
hand, is based on possession of a secret token

00:05:45.810 --> 00:05:47.699
that only the real user has.

00:05:47.699 --> 00:05:49.659
An example is a physical key and lock.

00:05:49.659 --> 00:05:52.509
You can only unlock the door if you have the
key.

00:05:52.509 --> 00:05:54.639
This escapes this problem of being “guessable”.

00:05:54.639 --> 00:05:58.199
And they typically require physical presence,
so it’s much harder for remote attackers

00:05:58.200 --> 00:05:59.220
to gain access.

00:05:59.220 --> 00:06:02.920
Someone in another country can’t gain access
to your front door in Florida without getting

00:06:02.920 --> 00:06:03.949
to Florida first.

00:06:03.949 --> 00:06:08.639
But, what you have authentication can be compromised
if an attacker is physically close.

00:06:08.639 --> 00:06:11.610
Keys can be copied, smartphones stolen, and
locks picked.

00:06:11.610 --> 00:06:14.660
Finally, what you are authentication is based
on... you!

00:06:14.660 --> 00:06:17.780
You authenticate by presenting yourself to
the computer.

00:06:17.780 --> 00:06:22.600
Biometric authenticators, like fingerprint
readers and iris scanners are classic examples.

00:06:22.600 --> 00:06:26.700
These can be very secure, but the best technologies
are still quite expensive.

00:06:26.700 --> 00:06:29.620
Furthermore, data from sensors varies over
time.

00:06:29.620 --> 00:06:33.560
What you know and what you have authentication
have the nice property of being deterministic

00:06:33.560 --> 00:06:35.620
– either correct or incorrect.

00:06:35.620 --> 00:06:40.280
If you know the secret, or have the key, you’re
granted access 100% of the time.

00:06:40.280 --> 00:06:42.880
If you don’t, you get access zero percent
of the time.

00:06:42.880 --> 00:06:48.340
Biometric authentication, however, is probabilistic.There’s some chance the system won’t recognize you…

00:06:48.349 --> 00:06:50.319
maybe you’re wearing a hat or the lighting
is bad.

00:06:50.319 --> 00:06:54.200
Worse, there’s some chance the system will
recognize the wrong person as you – like

00:06:54.200 --> 00:06:55.389
your evil twin!

00:06:55.389 --> 00:06:59.310
Of course, in production systems, these chances
are low, but not zero.

00:06:59.310 --> 00:07:02.500
Another issue with biometric authentication
is it can’t be reset.

00:07:02.500 --> 00:07:07.320
You only have so many fingers, so what happens if an attacker compromises your fingerprint data?

00:07:07.320 --> 00:07:09.240
This could be a big problem for life.

00:07:09.240 --> 00:07:13.740
And, recently, researchers showed it’s possible
to forge your iris just by capturing a photo

00:07:13.759 --> 00:07:15.949
of you, so that’s not promising either.

00:07:15.949 --> 00:07:20.340
Basically, all forms of authentication have
strengths and weaknesses, and all can be compromised

00:07:20.340 --> 00:07:21.789
in one way or another.

00:07:21.789 --> 00:07:26.000
So, security experts suggest using two or
more forms of authentication for important

00:07:26.000 --> 00:07:27.000
accounts.

00:07:27.000 --> 00:07:29.620
This is known as two-factor or multi-factor
authentication.

00:07:29.620 --> 00:07:33.840
An attacker may be able to guess your password
or steal your phone: but it’s much harder

00:07:33.840 --> 00:07:34.660
to do both.

00:07:34.660 --> 00:07:36.640
After authentication comes Access Control.

00:07:36.640 --> 00:07:40.740
Once a system knows who you are, it needs
to know what you should be able to access,

00:07:40.740 --> 00:07:45.220
and for that there’s a specification of
who should be able to see, modify and use what.

00:07:45.220 --> 00:07:49.000
This is done through Permissions or Access
Control Lists (ACL), which describe what access

00:07:49.000 --> 00:07:52.720
each user has for every file, folder and program
on a computer.

00:07:52.729 --> 00:07:57.120
“Read” permission allows a user to see
the contents of a file, “write” permission

00:07:57.120 --> 00:08:00.870
allows a user to modify the contents, and
“execute” permission allows a user to

00:08:00.870 --> 00:08:02.469
run a file, like a program.

00:08:02.469 --> 00:08:05.939
For organizations with users at different
levels of access privilege – like a spy

00:08:05.940 --> 00:08:10.090
agency – it’s especially important for
Access Control Lists to be configured correctly

00:08:10.090 --> 00:08:13.140
to ensure secrecy, integrity and availability.

00:08:13.140 --> 00:08:17.180
Let’s say we have three levels of access:
public, secret and top secret.

00:08:17.199 --> 00:08:20.840
The first general rule of thumb is that people
shouldn’t be able to “read up”.

00:08:20.840 --> 00:08:24.919
If a user is only cleared to read secret files,
they shouldn’t be able to read top secret

00:08:24.919 --> 00:08:28.060
files, but should be able to access secret
and public ones.

00:08:28.060 --> 00:08:31.729
The second general rule of thumb is that people
shouldn’t be able to “write down”.

00:08:31.729 --> 00:08:35.310
If a member has top secret clearance, then
they should be able to write or modify top

00:08:35.310 --> 00:08:38.320
secret files, but not secret or public files.

00:08:38.340 --> 00:08:42.780
It may seem weird that even with the highest clearance, you can’t modify less secret files.

00:08:42.780 --> 00:08:47.940
But, it guarantees that there’s no accidental
leakage of top secret information into secret

00:08:47.950 --> 00:08:48.940
or public files.

00:08:48.950 --> 00:08:52.870
This “no read up, no write down” approach
is called the Bell-LaPadula model.

00:08:52.870 --> 00:08:57.260
It was formulated for the U.S. Department
of Defense’s Multi-Level Security policy.

00:08:57.260 --> 00:09:01.730
There are many other models for access control
– like the Chinese Wall model and Biba model.

00:09:01.730 --> 00:09:03.990
Which model is best depends on your use-case.

00:09:03.990 --> 00:09:08.540
Authentication and access control help a computer
determine who you are and what you should

00:09:08.540 --> 00:09:12.660
access, but depend on being able to trust
the hardware and software that run the authentication

00:09:12.660 --> 00:09:14.110
and access control programs.

00:09:14.110 --> 00:09:15.750
That’s a big dependence.

00:09:15.750 --> 00:09:20.010
If an attacker installs malicious software
– called malware – compromising the host

00:09:20.010 --> 00:09:24.320
computer’s operating system, how can we
be sure security programs don’t have a backdoor

00:09:24.320 --> 00:09:25.649
that let attackers in?

00:09:25.649 --> 00:09:27.360
The short answer is… we can’t.

00:09:27.360 --> 00:09:31.370
We still have no way to guarantee the security
of a program or computing system.

00:09:31.370 --> 00:09:35.670
That’s because even while security software
might be “secure” in theory, implementation

00:09:35.670 --> 00:09:37.560
bugs can still result in vulnerabilities.

00:09:37.560 --> 00:09:42.790
But, we do have techniques to reduce the likelihood
of bugs, quickly find and patch bugs when

00:09:42.790 --> 00:09:46.560
they do occur, and mitigate damage when a
program is compromised.

00:09:46.560 --> 00:09:49.300
Most security errors come from implementation
error.

00:09:49.300 --> 00:09:52.540
To reduce implementation error, reduce implementation.

00:09:52.540 --> 00:09:57.320
One of the holy grails of system level security
is a “security kernel” or a “trusted

00:09:57.320 --> 00:10:02.420
computing base”: a minimal set of operating system software that’s close to provably secure.

00:10:02.420 --> 00:10:06.660
A challenge in constructing these security
kernels is deciding what should go into it.

00:10:06.660 --> 00:10:08.630
Remember, the less code, the better!

00:10:08.630 --> 00:10:12.150
Even after minimizing code bloat, it would
be great to “guarantee” that code as written

00:10:12.150 --> 00:10:13.120
is secure.

00:10:13.120 --> 00:10:17.400
Formally verifying the security of code is
an active area of research.

00:10:17.400 --> 00:10:22.079
The best we have right now is a process called
Independent Verification and Validation.

00:10:22.079 --> 00:10:26.100
This works by having code audited by a crowd
of security-minded developers.

00:10:26.100 --> 00:10:28.490
This is why security code is almost always
open-sourced.

00:10:28.490 --> 00:10:32.889
It’s often difficult for people who wrote
the original code to find bugs, but external

00:10:32.889 --> 00:10:36.150
developers, with fresh eyes and different
expertise, can spot problems.

00:10:36.150 --> 00:10:40.120
There are also conferences where like-minded
hackers and security experts can mingle and

00:10:40.120 --> 00:10:44.440
share ideas, the biggest of which is DEF CON,
held annually in Las Vegas.

00:10:44.440 --> 00:10:48.720
Finally, even after reducing code and auditing
it, clever attackers are bound to find tricks

00:10:48.730 --> 00:10:49.880
that let them in.

00:10:49.880 --> 00:10:53.380
With this in mind, good developers should
take the approach that, not if, but when their

00:10:53.380 --> 00:10:57.800
programs are compromised, the damage should
be limited and contained, and not let it compromise

00:10:57.800 --> 00:11:00.000
other things running on the computer.

00:11:00.000 --> 00:11:01.829
This principle is called isolation.

00:11:01.829 --> 00:11:04.940
To achieve isolation, we can “sandbox”
applications.

00:11:04.940 --> 00:11:09.490
This is like placing an angry kid in a sandbox;
when the kid goes ballistic, they only destroy

00:11:09.490 --> 00:11:14.060
the sandcastle in their own box, but other
kids in the playground continue having fun.

00:11:14.060 --> 00:11:19.140
Operating Systems attempt to sandbox applications
by giving each their own block of memory that

00:11:19.140 --> 00:11:20.209
others programs can’t touch.

00:11:20.209 --> 00:11:24.490
It’s also possible for a single computer
to run multiple Virtual Machines, essentially

00:11:24.490 --> 00:11:27.620
simulated computers, that each live in their
own sandbox.

00:11:27.620 --> 00:11:31.800
If a program goes awry, worst case is that
it crashes or compromises only the virtual

00:11:31.800 --> 00:11:33.430
machine on which it’s running.

00:11:33.430 --> 00:11:37.460
All other Virtual Machines running on the
computer are isolated and unaffected.

00:11:37.460 --> 00:11:41.280
Ok, that’s a broad overview of some key
computer security topics.

00:11:41.280 --> 00:11:43.560
And I didn’t even get to network security,
like firewalls.

00:11:43.560 --> 00:11:46.580
Next episode, we’ll discuss some specific
example methods hackers use to get into computer

00:11:46.589 --> 00:11:47.580
systems.

00:11:47.589 --> 00:11:49.570
After that, we’ll touch on encryption.

00:11:49.570 --> 00:11:53.899
Until then, make your passwords stronger,
turn on 2-factor authentication, and NEVER

00:11:53.900 --> 00:11:55.960
click links in unsolicited emails!

00:11:56.000 --> 00:11:57.520
I’ll see you next week.

