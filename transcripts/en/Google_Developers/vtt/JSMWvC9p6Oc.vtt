WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.558
IAN LEWIS: Hi there.

00:00:10.558 --> 00:00:10.798
Alright.

00:00:10.798 --> 00:00:11.798
Well's let's go ahead
and get started.

00:00:11.798 --> 00:00:14.818
Welcome to Programming the
Web With Native Code.

00:00:14.818 --> 00:00:15.878
I'm Ian Lewis.

00:00:15.878 --> 00:00:17.018
This is David Springer.

00:00:18.380 --> 00:00:20.900
Just to give you an idea
of our backgrounds.

00:00:20.680 --> 00:00:23.860
I spent several years
working at Microsoft.

00:00:23.720 --> 00:00:25.238
Dave spent several years
working at Apple.

00:00:25.238 --> 00:00:28.520
And we're coming together
at Google to make the

00:00:28.520 --> 00:00:33.540
world a better place.

00:00:33.540 --> 00:00:33.680
DAVID SPRINGER: We're
all just getting along.

00:00:33.680 --> 00:00:35.340
IAN LEWIS: Before we begin, we
want to remind you that you

00:00:35.340 --> 00:00:37.980
can follow along on Wave.

00:00:37.980 --> 00:00:39.460
If you'd like to be sitting
there typing instead of

00:00:39.460 --> 00:00:41.120
listening, that's fine.

00:00:41.120 --> 00:00:46.560
This URL is what
you need to go to.

00:00:46.560 --> 00:00:48.500
So what are we going
to talk about today?

00:00:48.500 --> 00:00:51.300
Well first we are going to
start with an overview of

00:00:51.300 --> 00:00:55.000
Native Client-- what it
is and why is it cool.

00:00:55.000 --> 00:00:59.740
Then we're going to talk about
our new Native Client SDK,

00:00:59.740 --> 00:01:03.000
which make it easier to develop
applications for Native Client.

00:01:03.000 --> 00:01:05.700
And to show you how to
use the SDK, Dave's put

00:01:05.700 --> 00:01:06.260
together a tutorial.

00:01:07.540 --> 00:01:11.700
He'll build a simple app using
Native Client, and JavaScript,

00:01:11.700 --> 00:01:13.140
and web technologies.

00:01:13.140 --> 00:01:16.740
And then finally we're going to
show you a little bit about

00:01:16.740 --> 00:01:20.840
what's in the pipeline for
the Native Client team.

00:01:20.840 --> 00:01:24.180
Now there's a few things we're
not going to talk about today.

00:01:24.180 --> 00:01:27.100
We're not going to talk about
the nitty-gritty internals of

00:01:27.100 --> 00:01:31.560
our security model or
our runtime system.

00:01:32.420 --> 00:01:34.680
We talked about that last year.

00:01:34.680 --> 00:01:37.800
And to be honest, it hasn't
really changed all that much.

00:01:37.800 --> 00:01:40.880
What's new this year is that we
now have an implementation the

00:01:40.880 --> 00:01:44.200
you can actually use to write
real world applications.

00:01:44.200 --> 00:01:46.660
So this year what we'd like
to do is focus a little bit

00:01:46.660 --> 00:01:48.938
more on the developer story.

00:01:48.938 --> 00:01:50.898
Although if you do have
questions about our security

00:01:50.898 --> 00:01:54.100
model, or you want to shoot
holes in it, we'd love you to.

00:01:54.100 --> 00:01:57.020
And we'll give you some
URLs to go to at the end

00:01:57.020 --> 00:02:01.640
of the presentation.

00:02:01.640 --> 00:02:04.400
And before we get too far into
this there's one thing we do

00:02:04.400 --> 00:02:05.420
need to get out of the way.

00:02:05.420 --> 00:02:06.080
We're developers.

00:02:06.080 --> 00:02:07.580
And developers like
short identifiers.

00:02:09.458 --> 00:02:13.278
So even though the project name
is Native Client, we're going

00:02:13.278 --> 00:02:15.218
to shorten that to NaCl.

00:02:15.318 --> 00:02:17.398
We pronounce it nackel.

00:02:17.398 --> 00:02:22.018
It's a source of all sorts of
sodium chloride related puns.

00:02:22.018 --> 00:02:24.098
When you hear us say
nackle, that's what

00:02:24.098 --> 00:02:25.080
we're talking about.

00:02:25.080 --> 00:02:27.838
So what is NaCl?

00:02:27.838 --> 00:02:31.098
And why should you care?

00:02:31.098 --> 00:02:33.278
Well NaCl is two things.

00:02:33.278 --> 00:02:36.778
First it's a portable system
for verifying and executing

00:02:36.778 --> 00:02:40.078
untrusted code-- native
code-- inside the browser.

00:02:40.078 --> 00:02:43.278
There are some terms there that
can be a little bit confusing.

00:02:43.278 --> 00:02:45.818
So let's define those
before we go any further.

00:02:45.818 --> 00:02:48.538
When we say native code, we're
talking about the actual

00:02:48.538 --> 00:02:52.318
machine language of the CPU
that your client is running.

00:02:52.318 --> 00:02:56.698
That is raw machine code bites.

00:02:56.698 --> 00:02:59.918
Untrusted is a word that
has specific meaning

00:02:59.918 --> 00:03:01.038
to security geeks.

00:03:01.698 --> 00:03:05.618
To layman I think it sounds
a little bit scary.

00:03:05.618 --> 00:03:08.978
But in this context what it
means is code that you don't

00:03:08.978 --> 00:03:11.398
have to trust, because you
haven't given it

00:03:11.398 --> 00:03:13.620
any privileges.

00:03:13.620 --> 00:03:18.898
Of course when you put together
untrusted and native code,

00:03:18.898 --> 00:03:21.998
things can get a little scary
because there's all sorts of

00:03:21.998 --> 00:03:25.458
tricks that you can use in
native code to get privileges

00:03:25.458 --> 00:03:27.858
even though you haven't
been given them, right?

00:03:27.858 --> 00:03:30.158
So that's where
verification comes in.

00:03:30.158 --> 00:03:36.360
When we say verify, what we
mean is we dissemble the code

00:03:36.360 --> 00:03:39.360
and run it through a special
algorithm that's going to prove

00:03:39.360 --> 00:03:43.478
whether or not the code has the
ability to exit its sandbox.

00:03:43.478 --> 00:03:47.520
And if it has any possibility
of exiting the sandbox,

00:03:47.520 --> 00:03:49.558
we don't run it.

00:03:49.558 --> 00:03:52.738
That's our security model.

00:03:52.738 --> 00:03:55.038
And to understand why this is
interesting, think about the

00:03:55.038 --> 00:03:57.958
two ways that are most popular
for running code in

00:03:57.958 --> 00:03:59.098
the browser today.

00:03:59.098 --> 00:04:02.458
You can write code in
JavaScript which is portable.

00:04:02.458 --> 00:04:02.918
And it's safe.

00:04:02.918 --> 00:04:03.338
And it's awesome.

00:04:04.018 --> 00:04:06.360
And you're going to hear a lot
about it at this conference.

00:04:06.360 --> 00:04:10.278
But you do give up a little
performance when you do that.

00:04:10.278 --> 00:04:13.218
Well if you want that
performance you can write in a

00:04:13.218 --> 00:04:14.598
compiled language like C or C

00:04:14.598 --> 00:04:14.758
.

00:04:14.498 --> 00:04:18.478
You generate you know, an MPI
plugin, or an ActiveX plugin.

00:04:21.338 --> 00:04:23.198
That'll give you
your performance.

00:04:23.198 --> 00:04:28.278
But say goodbye to
safety and portability.

00:04:28.278 --> 00:04:30.658
The goal of Native Client
is to give you both.

00:04:30.658 --> 00:04:33.564
The safety of JavaScript
with the performance of C

00:04:33.564 --> 00:04:33.858
.

00:04:33.858 --> 00:04:37.698
And we feel like we've
gotten pretty close.

00:04:37.698 --> 00:04:40.518
Native Client is also
a runtime sandbox.

00:04:42.160 --> 00:04:45.898
So I like to think of this
as a sort of mini OS

00:04:45.898 --> 00:04:46.200
inside your browser.

00:04:46.200 --> 00:04:48.780
And it's got all the things
that a normal OS has, except

00:04:48.780 --> 00:04:51.320
they're all webified.

00:04:51.320 --> 00:04:54.880
So it's got a POSIX API.

00:04:54.880 --> 00:04:58.540
It's got a kernel, what
it basically Chrome.

00:04:58.540 --> 00:05:00.018
It's got a Windows
manager which is HTML5.

00:05:00.878 --> 00:05:03.078
And it's got a
multimedia layer.

00:05:03.078 --> 00:05:05.498
And that's something called
Pepper that we're going to

00:05:05.498 --> 00:05:07.998
talk about in a few minutes.

00:05:07.998 --> 00:05:12.668
Because we're running in this
virtual mini OS, the code that

00:05:12.668 --> 00:05:16.258
you write in NaCl is 100%
portable across Mac and

00:05:16.258 --> 00:05:17.778
Windows and Linux.

00:05:17.778 --> 00:05:19.040
You don't have to rewrite it.

00:05:19.040 --> 00:05:24.200
You don't have to recompile
it in most cases.

00:05:24.200 --> 00:05:28.498
What do you do with
something like this?

00:05:28.498 --> 00:05:30.220
Well so you've got a desktop
application and you want

00:05:30.220 --> 00:05:32.458
to import it to the web.

00:05:32.458 --> 00:05:38.420
If you recompile your code for
inside Native Client, you lose

00:05:38.420 --> 00:05:41.658
the install and you get all the
performance that you're used

00:05:41.658 --> 00:05:42.938
to getting on the desktop.

00:05:42.938 --> 00:05:45.028
Or maybe you've got a web app
already, and you just want

00:05:45.028 --> 00:05:46.758
to turbo charge it a bit.

00:05:46.758 --> 00:05:49.440
This actually happened to a
team we've got in Boulder

00:05:49.440 --> 00:05:53.858
that's making sort of a
sketch-up for the web

00:05:53.858 --> 00:05:55.160
type of application.

00:05:55.160 --> 00:05:58.698
And they wanted to use this
gargantuan, computational

00:05:58.698 --> 00:06:00.038
geometry library called CGAL.

00:06:00.818 --> 00:06:02.480
It's a huge, huge library.

00:06:02.480 --> 00:06:05.720
It's taken man, you know,
huge centuries to write.

00:06:05.720 --> 00:06:07.700
There's no way you're going
to port that to JavaScript.

00:06:08.360 --> 00:06:11.778
There's no way that you're
going to get equivalent

00:06:11.778 --> 00:06:12.058
functionality in JavaScript.

00:06:12.898 --> 00:06:16.060
But by recompiling it for
Native Client, we're able to

00:06:16.060 --> 00:06:21.420
hook to that from JavaScript
and keep the same performance

00:06:21.420 --> 00:06:24.778
and functionality
that we had in C.

00:06:24.778 --> 00:06:28.638
So if you've got functionality
that's been compiled in C

00:06:28.638 --> 00:06:36.820
already, you can use that
in your web applications.

00:06:36.820 --> 00:06:38.560
And another way that you might
use Native Client is if you've

00:06:38.560 --> 00:06:43.458
already got a plugin, but you'd
like to move from the sort of

00:06:43.458 --> 00:06:47.278
unsafe, insecure model
of Raw, C and C

00:06:47.278 --> 00:06:52.240
, ActiveX, NPAPI and what
have you, into a more

00:06:52.240 --> 00:06:54.440
safe sandbox model.

00:06:54.440 --> 00:06:58.078
The Native Client allows you to
just recompile that plugin, run

00:06:58.078 --> 00:07:02.920
it inside of our sandbox, and
you get all of the safety of

00:07:02.920 --> 00:07:05.680
Native Client without having
to give up the power

00:07:05.680 --> 00:07:10.898
of Native plugins.

00:07:10.898 --> 00:07:11.838
So at this point you're
probably thinking

00:07:11.838 --> 00:07:13.680
wow, that's great.

00:07:13.680 --> 00:07:16.778
What's the catch, right?

00:07:16.778 --> 00:07:18.118
There are some pain points.

00:07:18.118 --> 00:07:22.398
The first pain point is that in
order for us to verify the

00:07:22.398 --> 00:07:27.238
code, you need to compile
code that is verifiable.

00:07:27.238 --> 00:07:28.798
That's not too difficult.

00:07:28.798 --> 00:07:31.318
What it means is it has
to follow a certain set

00:07:31.318 --> 00:07:34.838
of rules that make it
reliably disassemble-able.

00:07:35.138 --> 00:07:40.918
We need to be able to reliably
disassemble your code.

00:07:40.918 --> 00:07:43.560
That means that it's going
to be slightly larger.

00:07:43.560 --> 00:07:46.558
And in many cases run
slightly slower.

00:07:46.558 --> 00:07:49.740
But the performance
difference is very minor.

00:07:49.740 --> 00:07:54.040
Another thing that is less than
optimal is that you don't get

00:07:54.040 --> 00:07:55.480
all of your UNIX sys calls.

00:07:55.480 --> 00:07:59.060
But on the other hand, they're
sort of the same sys calls that

00:07:59.060 --> 00:08:02.238
you wouldn't expect to get in a
sandboxed environment anyway.

00:08:02.238 --> 00:08:04.658
So you don't get to play
with the user's file

00:08:04.658 --> 00:08:05.258
system directly.

00:08:05.258 --> 00:08:09.958
You don't get to create sockets
or processes willy-nilly.

00:08:09.958 --> 00:08:11.360
But you can create threads.

00:08:11.360 --> 00:08:13.380
You can create web sockets.

00:08:13.380 --> 00:08:18.998
And you can talk to your server
the same way JavaScript can.

00:08:18.998 --> 00:08:22.558
Finally, although we've been
putting a lot of work into

00:08:22.558 --> 00:08:24.978
our STK, there are still a
bunch of rough edges that

00:08:24.978 --> 00:08:26.220
we're polishing off.

00:08:26.220 --> 00:08:28.860
I wouldn't expect it to run
perfectly right out of a box

00:08:28.860 --> 00:08:31.920
for every case right now.

00:08:31.920 --> 00:08:36.360
But as Dave will show you, it's
actually quite easy to use.

00:08:36.360 --> 00:08:39.240
And we're working on
making it easier.

00:08:39.240 --> 00:08:43.560
So to recap, how does Native
Client make your life better?

00:08:43.560 --> 00:08:46.220
Well first it gives you
the performance of

00:08:46.220 --> 00:08:49.480
native compiled code.

00:08:49.480 --> 00:08:54.960
It gives you a platform
independent multimedia layer.

00:08:54.960 --> 00:08:56.460
It gives you the ability
to write in your

00:08:56.460 --> 00:08:57.240
choice of language.

00:08:57.240 --> 00:09:01.620
Because we look at machine
code, not interpreted

00:09:01.620 --> 00:09:05.380
code like JavaScript.

00:09:05.380 --> 00:09:07.600
It gives you the ability to do
things like create threads

00:09:07.600 --> 00:09:09.220
and talk to web sockets.

00:09:09.220 --> 00:09:12.660
And finally, best of all from
my point of view, you're never

00:09:12.660 --> 00:09:15.240
going to see this dialog again.

00:09:15.240 --> 00:09:17.520
This is sort of my artist
impression of the dialog you'd

00:09:17.520 --> 00:09:20.798
see on let's say a certain
operating system, if you're

00:09:20.798 --> 00:09:22.600
going to install let's
say an NPAPI plugin.

00:09:24.380 --> 00:09:26.320
I've always felt-- I don't know
how you feel-- but I've always

00:09:26.320 --> 00:09:30.960
felt like this dialog is making
me make an impossible

00:09:30.960 --> 00:09:32.800
choice, right?

00:09:32.800 --> 00:09:35.520
I might trust your company.

00:09:35.520 --> 00:09:37.020
At least I might trust your
company not to be evil.

00:09:38.340 --> 00:09:41.440
But I don't trust you
not to make a mistake.

00:09:41.440 --> 00:09:43.000
I don't trust you to not
have a bug that turns into

00:09:43.000 --> 00:09:45.060
a huge security flaw.

00:09:45.060 --> 00:09:50.260
So how can I really say yes
or no to this client, right?

00:09:50.260 --> 00:09:53.920
Native Client is the end
of the, do you trust

00:09:53.920 --> 00:09:54.918
this publisher dialog.

00:09:54.918 --> 00:10:00.780
And that's probably the
coolest thing about it.

00:10:00.780 --> 00:10:03.920
So just to give you an example
of the kind of applications

00:10:03.920 --> 00:10:05.620
that you can write
in Native Client.

00:10:05.620 --> 00:10:09.800
You probably saw this if
you went to the keynote.

00:10:09.800 --> 00:10:16.420
But the Unity game, Lego Star
Wars, this was a project that

00:10:16.420 --> 00:10:23.220
we got the opportunity to
port about five weeks ago.

00:10:23.220 --> 00:10:25.700
It was about four weeks
of effort by a team

00:10:25.700 --> 00:10:28.580
of about four guys.

00:10:28.580 --> 00:10:33.340
Not only porting the game and
the runtime engine, but also

00:10:33.340 --> 00:10:34.580
the Mono compiler and runtime.

00:10:35.580 --> 00:10:38.920
They're doing all of that--
porting it to Native Client

00:10:38.920 --> 00:10:39.920
with four guys in four weeks.

00:10:39.920 --> 00:10:42.980
So you can see that this
isn't a really super

00:10:42.980 --> 00:10:52.940
difficult thing to do.

00:10:52.940 --> 00:10:55.280
So let's look at why this is
getting easier all the time,

00:10:55.280 --> 00:10:56.000
the Native Client SDK.

00:10:58.620 --> 00:11:02.600
If you download the Native
Client SDK, you're going to

00:11:02.600 --> 00:11:05.420
find a tool chain that looks
very familiar if you've worked

00:11:05.420 --> 00:11:07.320
with Linux or Mac or Cygwin.

00:11:08.120 --> 00:11:12.360
It's a standard new tool
chain, has all the libraries

00:11:12.360 --> 00:11:16.820
you'd expect, and it has
something called Pepper.

00:11:16.820 --> 00:11:22.720
A Pepper is a platform
independent multimedia API

00:11:22.720 --> 00:11:25.480
and implementation of NPAPI.

00:11:27.420 --> 00:11:30.120
What this means is if you've
ever written an NPAPI plugin,

00:11:30.120 --> 00:11:33.240
you know you've always got to
do a little bit of fiddling and

00:11:33.240 --> 00:11:36.440
some ifdefs here and there
to sort of paper over the

00:11:36.440 --> 00:11:38.780
differences between platforms.

00:11:38.780 --> 00:11:44.760
Pepper gets rid of those
differences and adds audio,

00:11:44.760 --> 00:11:50.040
video, and OpenGLES and the
ability to talk directly

00:11:50.040 --> 00:11:50.700
to JavaScript.

00:11:52.140 --> 00:11:53.826
So you can be writing C, or C

00:11:53.826 --> 00:11:59.100
, or Python or Ruby, or Go, or
any language that you want,

00:11:59.100 --> 00:12:01.780
as long as it has a
compiler for NaCl.

00:12:01.780 --> 00:12:08.560
And you can talk to the
JavaScript, the HTML DOM, and

00:12:08.560 --> 00:12:10.720
the audio, and video, and
OpenGL that we provide through

00:12:10.720 --> 00:12:12.960
Pepper in your Native
Client executable.

00:12:14.920 --> 00:12:16.920
And there's also some sample
code, and some scripts, and

00:12:16.920 --> 00:12:21.420
some things that will hopefully
make your life a little easier.

00:12:21.420 --> 00:12:26.420
As I mentioned, if you want to
use the SDK, if you've used new

00:12:26.420 --> 00:12:30.360
toolchain before, things will
look very familiar to you.

00:12:30.360 --> 00:12:33.300
You should be able to get off
the ground very quickly.

00:12:33.300 --> 00:12:36.100
One little quirk is that you do
need to run in a web browser.

00:12:36.100 --> 00:12:38.720
Which means that you need
to have a web server.

00:12:38.720 --> 00:12:41.900
So we actually bundle
one of those with the

00:12:41.900 --> 00:12:42.860
Native Client SDK.

00:12:42.160 --> 00:12:48.000
We've got a little Python
HTTPD that you can run.

00:12:48.000 --> 00:12:51.940
And our debugging story quite
honestly is not fully baked.

00:12:51.940 --> 00:12:55.740
But at this point you
can debug with GDB.

00:12:55.740 --> 00:12:58.760
And we'll talk a little bit
later about our upcoming plans

00:12:58.760 --> 00:13:01.980
for more debugging support.

00:13:01.980 --> 00:13:04.060
Alright so now we've talked
about what NaCl is, and a

00:13:04.060 --> 00:13:06.138
little bit about how
we've tried to make

00:13:06.138 --> 00:13:08.380
it easier to program.

00:13:08.380 --> 00:13:11.560
Now David Springer is going to
show you how you can use the

00:13:11.560 --> 00:13:15.398
NaCl SDK to turbo charge a
web app with Native Client.

00:13:18.060 --> 00:13:22.300
DAVID SPRINGER: Thanks Ian.

00:13:22.300 --> 00:13:25.020
My plan is to write a little
application in front of

00:13:25.020 --> 00:13:29.240
you so this demo can be
really, really short.

00:13:30.460 --> 00:13:33.260
Because all this
stuff is really new.

00:13:33.260 --> 00:13:35.220
So hang on to your
pocket protectors.

00:13:35.220 --> 00:13:37.160
Here we go.

00:13:37.160 --> 00:13:41.660
Let me talk about a NaCl
web application a little

00:13:41.660 --> 00:13:45.380
bit first-- how this
thing gets set up.

00:13:45.380 --> 00:13:49.020
A lot of you probably know
about the Model-View-Controller

00:13:49.020 --> 00:13:50.020
design pattern.

00:13:50.020 --> 00:13:52.620
This is very similar.

00:13:52.620 --> 00:13:58.240
You really are building
a web application.

00:13:58.240 --> 00:14:00.360
And we're going to
add this kind of C

00:14:00.260 --> 00:14:02.420
back end to it.

00:14:02.420 --> 00:14:04.760
So this is the web application
we're going to attempt to

00:14:04.760 --> 00:14:06.540
build here, is this
little calculator.

00:14:06.540 --> 00:14:08.780
This is obviously
very contrived.

00:14:09.320 --> 00:14:11.732
You wouldn't normally just
do a calculator with C
276
00:14:12,98 --&gt; 00:14:12,54
code.

00:14:12.540 --> 00:14:15.400
But the idea is to kind
of show you how this

00:14:15.400 --> 00:14:17.620
all works together.

00:14:17.620 --> 00:14:22.880
So under the hood of this
there are these basic parts.

00:14:23.680 --> 00:14:24.040
The first one is of
course the JavaScript.

00:14:25.758 --> 00:14:27.178
So that's where all your
user interface and a lot

00:14:27.178 --> 00:14:32.260
of that kind of model and
controller logic sits.

00:14:32.260 --> 00:14:35.340
And in your markup,
and your CSS, etc.

00:14:36.640 --> 00:14:39.480
And in our world, in the Native
Client web app world, that

00:14:39.480 --> 00:14:42.920
talks through an interop
bridge which we call Pepper.

00:14:42.920 --> 00:14:48.760
So back to the bad puns,
we have salt and pepper.

00:14:49.060 --> 00:14:51.460
Anyway so that's the
interop bridge.

00:14:51.460 --> 00:14:55.560
And that's the stuff that glues
the JavaScript to the C

00:14:55.560 --> 00:14:55.800
.

00:14:55.800 --> 00:15:00.920
And that then speaks through
this sandbox layer that

00:15:00.920 --> 00:15:02.800
Ian talked about earlier.

00:15:02.800 --> 00:15:03.586
So we don't want your C

00:15:03.720 --> 00:15:08.378
code getting out of this
sandbox to our validaters

00:15:08.378 --> 00:15:09.558
and stuff like that.

00:15:09.558 --> 00:15:11.760
You're not to do that.

00:15:11.760 --> 00:15:13.112
And then your actual C

00:15:13.900 --> 00:15:16.638
module, which we call
nexe, Native Client

00:15:16.638 --> 00:15:17.058
executables of course.

00:15:17.058 --> 00:15:21.340
They sit inside that sandbox.

00:15:21.340 --> 00:15:26.240
So let's do this.

00:15:26.240 --> 00:15:28.778
First thing you have to do if
you're going to write a web

00:15:28.778 --> 00:15:30.538
app with Native Client is
get an SDK and install it.

00:15:30.538 --> 00:15:33.720
That's a normal step
and everything.

00:15:33.720 --> 00:15:35.220
But there is an
SDK that you get.

00:15:35.140 --> 00:15:38.860
There's URLs at the end of the
talk of where to go to get

00:15:38.860 --> 00:15:41.820
all that kind of stuff.

00:15:41.820 --> 00:15:44.900
I'm going to organize this
tutorial in three parts, which

00:15:44.900 --> 00:15:47.760
kind of reflect the three basic
pieces of the architecture.

00:15:47.760 --> 00:15:50.298
There is the application
which is all done in

00:15:50.298 --> 00:15:51.798
HTML, CSS and JavaScript.

00:15:52.440 --> 00:15:54.740
So it's primarily a web app.

00:15:54.740 --> 00:15:56.660
That's what we're writing here.

00:15:56.660 --> 00:16:00.500
And if you were in the talk
previous to this one, which is

00:16:00.500 --> 00:16:04.700
the Chrome developer tools, you
saw that we have all these

00:16:04.700 --> 00:16:08.980
amazing developer tools to help
you build web apps, debug the

00:16:08.980 --> 00:16:10.398
JavaScript, and so
on and so forth.

00:16:10.398 --> 00:16:16.160
You can use all those
properties to build the

00:16:16.160 --> 00:16:18.140
application section
of your web app.

00:16:18.580 --> 00:16:22.092
The second piece is the NaCl
module itself, which is the C

00:16:22.092 --> 00:16:22.260
.

00:16:23.100 --> 00:16:27.178
And that's where I'm going to
build all the meat of the

00:16:27.178 --> 00:16:28.898
computation engine,
if you will.

00:16:28.898 --> 00:16:31.518
And this computation in this
example is really, really tiny.

00:16:32.080 --> 00:16:34.080
But you can imagine
larger ones.

00:16:34.080 --> 00:16:38.440
And then the third piece is
this experimental object layer

00:16:38.440 --> 00:16:40.220
that we're building which
handles all the interop.

00:16:41.220 --> 00:16:45.240
And we're calling it sea salt,
just to continue the bad puns.

00:16:45.240 --> 00:16:51.320
The idea of sea salt is that it
simplifies the interop between

00:16:51.320 --> 00:16:52.766
the JavaScript and your C

00:16:53.420 --> 00:16:54.300
code.

00:16:54.300 --> 00:16:56.580
So that's kind of what
we're actively working on.

00:16:57.738 --> 00:17:00.080
I lead a team out in
Boulder-- beautiful Boulder,

00:17:00.080 --> 00:17:09.920
Colorado-- that is building
this SDK right now.

00:17:09.920 --> 00:17:12.540
OK, let's start
with the UI stuff.

00:17:12.540 --> 00:17:15.980
So now we're going to actually
program the application.

00:17:15.980 --> 00:17:18.820
This is HTML and CSS.

00:17:18.820 --> 00:17:21.500
It's absolutely stuff
you've all seen.

00:17:21.500 --> 00:17:25.980
There's nothing really magical
about it, except for the

00:17:25.980 --> 00:17:26.378
magical parts of HTML.

00:17:27.300 --> 00:17:30.718
So you know, we've got a
div with the calculator.

00:17:30.718 --> 00:17:33.000
We've got this little form
that's going to show the

00:17:33.000 --> 00:17:35.080
result, and buttons.

00:17:35.080 --> 00:17:43.080
And this is the CSS behind
the button, nothing

00:17:43.080 --> 00:17:45.520
amazingly special there.

00:17:45.520 --> 00:17:48.606
And what I'm going to do
also, in this part of

00:17:48.606 --> 00:17:50.900
the application, is add
some functional stuff.

00:17:50.900 --> 00:17:53.120
So when you click the
equals button it'll call

00:17:53.120 --> 00:17:54.100
this start calculate.

00:17:54.100 --> 00:17:56.900
So I just wire up start
calculate to the on-click.

00:17:57.100 --> 00:17:59.660
And here's the JavaScript
now to do that.

00:17:59.660 --> 00:18:06.380
So again all very
straightforward web application

00:18:06.380 --> 00:18:07.200
programming, right?

00:18:07.200 --> 00:18:12.960
A couple things to point out in
this function are that the

00:18:12.960 --> 00:18:16.600
calculated way that I've kinda
architected this-- if you can

00:18:16.600 --> 00:18:22.140
call it that-- is that you type
in an infix notation

00:18:22.140 --> 00:18:22.420
expression.

00:18:22.420 --> 00:18:24.740
And then I'm going to
turn it into a postfix.

00:18:24.740 --> 00:18:28.980
And then feed that into a
calculator object to produce a

00:18:28.980 --> 00:18:30.160
result to evaluate the postfix.

00:18:30.160 --> 00:18:34.760
Well the infix to postfix
conversion is actually a lot of

00:18:34.760 --> 00:18:37.880
string processing which is way
easier for me to do in

00:18:37.880 --> 00:18:39.172
JavaScript then in C

00:18:39.172 --> 00:18:39.680
.

00:18:39.680 --> 00:18:45.220
So I actually just coded
all that in JavaScript.

00:18:45.220 --> 00:18:49.560
The point being that when
you're writing these web apps,

00:18:49.560 --> 00:18:53.160
write in the language and the
environment that makes

00:18:53.160 --> 00:18:54.860
most sense to you.

00:18:54.860 --> 00:18:56.760
If it makes a lot of sense
to you to do this kind

00:18:56.760 --> 00:18:57.906
of conversion in C

00:18:57.906 --> 00:18:59.098
, then it's fine to
do it there too.

00:18:59.978 --> 00:19:01.198
This is just how I happened
to do it because it

00:19:01.198 --> 00:19:02.200
was easier for me.

00:19:03.680 --> 00:19:07.420
Another thing to point out is
that the nexe module, that

00:19:07.420 --> 00:19:09.318
we're going to build in the
next stage of this, just looks

00:19:09.318 --> 00:19:12.040
like a JavaScript object.

00:19:12.040 --> 00:19:14.220
According to the JavaScript,
it's just another object.

00:19:14.120 --> 00:19:17.160
There's nothing special about
it, or anything really

00:19:17.160 --> 00:19:19.358
special that you have to do.

00:19:19.720 --> 00:19:23.000
And you can see here
that it's an object.

00:19:23.000 --> 00:19:25.760
And it has this
calculate method.

00:19:25.760 --> 00:19:28.660
The calculate method on that
object gets two parameters.

00:19:28.860 --> 00:19:31.640
It gets the postfix expression
as an array of course.

00:19:31.640 --> 00:19:33.800
And it also takes
a closure object.

00:19:33.800 --> 00:19:38.100
So the idea is that the
calculator figures out the

00:19:38.100 --> 00:19:41.780
answer and then calls the
closure with the result.

00:19:41.780 --> 00:19:45.560
And then there's that binding.

00:19:45.560 --> 00:19:47.580
So again, very straightforward
JavaScript stuff.

00:19:47.580 --> 00:19:48.552
If you're familiar with
JavaScript, this is going

00:19:48.552 --> 00:19:52.260
to be nothing new to you.

00:19:52.260 --> 00:19:56.240
OK, so let's take a look
at what that looks like.

00:19:56.240 --> 00:20:02.080
I have everything live here
so hopefully this works.

00:20:02.080 --> 00:20:05.240
So first thing I want to
do is point out that this

00:20:05.240 --> 00:20:07.238
is a web app, right?

00:20:07.238 --> 00:20:09.980
So I have to start this
little local server.

00:20:09.980 --> 00:20:11.558
And I'm going to do
that right now.

00:20:13.100 --> 00:20:18.540
So here we go with out
little local server.

00:20:18.540 --> 00:20:22.780
And that comes with the SDK.

00:20:22.780 --> 00:20:25.300
If you have your own web server
that you normally publish to,

00:20:25.300 --> 00:20:27.704
you can put your nexes there.

00:20:27.704 --> 00:20:29.820
This is just something that
makes my life a little easier.

00:20:31.940 --> 00:20:35.040
So the other thing I want to
point out is that I am using

00:20:35.040 --> 00:20:36.860
the idea I am most
comfortable with.

00:20:36.860 --> 00:20:39.420
I happen to write a lot of
stuff in Xcode because I worked

00:20:39.420 --> 00:20:40.760
at Apple for a long time.

00:20:40.760 --> 00:20:45.460
So I built this whole
application inside of

00:20:45.460 --> 00:20:46.020
Xcode which you can do.

00:20:50.160 --> 00:20:53.618
I hooked this all up so
that I should be able to

00:20:53.618 --> 00:20:56.320
just say build and run.

00:20:56.320 --> 00:21:03.180
And it will of hopefully launch
Chrome with the calculator.

00:21:03.180 --> 00:21:05.540
So there it is.

00:21:05.540 --> 00:21:07.540
Again so I don't
have any nexe yet.

00:21:07.540 --> 00:21:10.578
So this is all just
HTML, CSS, JavaScript.

00:21:11.400 --> 00:21:14.338
It's a pure web app at
this point with no Native

00:21:14.338 --> 00:21:15.900
Client module yet.

00:21:15.900 --> 00:21:18.200
And here's what it does:
we can click buttons.

00:21:18.200 --> 00:21:20.520
Hopefully you can see that.

00:21:20.520 --> 00:21:23.420
So I can say 8 plus 3.

00:21:23.420 --> 00:21:24.260
And it's doing things.

00:21:24.260 --> 00:21:28.598
And then when I hit equals,
of course, there is no nexe.

00:21:28.598 --> 00:21:34.880
So I wrapped all that inside
of a try/catch block.

00:21:34.880 --> 00:21:36.920
And because the calculator
object doesn't exist, it hits

00:21:36.920 --> 00:21:41.000
the catch clause which just
says the answer must be

00:21:41.000 --> 00:21:46.880
42 because that's the
answer to everything.

00:21:46.880 --> 00:21:49.260
OK, so that was step one.

00:21:49.260 --> 00:21:52.538
Moving on the step two, let's
build up the nexe now.

00:21:52.538 --> 00:21:54.870
So now I'm going to add some C

00:21:54.914 --> 00:21:56.780
code and actually make this
do a little bit more.

00:21:57.300 --> 00:21:58.886
Here is some C

00:21:58.080 --> 00:21:58.440
code.

00:21:58.440 --> 00:22:01.046
To those of you who
have written C

00:22:01.046 --> 00:22:03.900
, this should look
fairly familiar.

00:22:03.900 --> 00:22:07.140
And what we do with this sea
salt-- again this is the

00:22:07.140 --> 00:22:10.420
experimental object layer--
is that we say OK you're

00:22:10.420 --> 00:22:11.720
building a module.

00:22:11.720 --> 00:22:12.446
So in C

00:22:12.160 --> 00:22:14.020
we create this module.

00:22:14.020 --> 00:22:21.200
And part of that initialization
process is the sea salt layer

00:22:21.200 --> 00:22:26.620
asks you, what methods
does your module have?

00:22:26.620 --> 00:22:32.960
So it calls this initialized
method on your object.

00:22:32.960 --> 00:22:37.326
And what we're going to do is
bind it to the calculate C

00:22:37.140 --> 00:22:39.560
method.

00:22:39.560 --> 00:22:41.160
So the idea is that we have
this calculated method in

00:22:41.160 --> 00:22:44.300
JavaScript that is going to
eventually flow into this

00:22:44.300 --> 00:22:46.012
calculate method in C

00:22:46.012 --> 00:22:46.160
.

00:22:47.560 --> 00:22:56.098
And how that works is that we
make a little binder thing and

00:22:56.098 --> 00:22:58.700
then say add method
name calculate.

00:22:58.700 --> 00:23:01.680
And then that goes out
into the JavaScript.

00:23:01.680 --> 00:23:04.740
And this is what it looks
like in JavaScript.

00:23:04.740 --> 00:23:06.480
So no surprises.

00:23:06.480 --> 00:23:09.538
So the JavaScript calculate and
the sea salt bridging layer

00:23:09.538 --> 00:23:11.278
works through Pepper and
through the sandbox and all

00:23:11.278 --> 00:23:14.718
that stuff, to make this
JavaScript call eventually

00:23:14.718 --> 00:23:15.726
go into the C

00:23:15.726 --> 00:23:15.940
.

00:23:18.920 --> 00:23:21.586
OK, so back in the C

00:23:22.860 --> 00:23:27.720
now, we'll continue
with what happens.

00:23:27.720 --> 00:23:28.160
We're going to write
little Pepper stuff.

00:23:28.160 --> 00:23:31.538
So now I'm filling out the
actual calculate method.

00:23:31.538 --> 00:23:33.358
And you can see here the first
thing I do is grab that array.

00:23:34.200 --> 00:23:38.080
So the expression array is
create array from NP variant.

00:23:39.580 --> 00:23:40.160
That's just Pepper stuff.

00:23:41.118 --> 00:23:43.838
And like I say, the sea salt
thing is very experimental.

00:23:43.838 --> 00:23:46.280
We're still working out
all the details fo this.

00:23:46.280 --> 00:23:50.480
But then what I do is I say,
all right, call evaluate

00:23:50.480 --> 00:23:51.440
expression which is my C

00:23:51.620 --> 00:23:52.986
it's the guts of my C

00:23:53.620 --> 00:23:56.318
stuff, and give me
a double result.

00:23:56.318 --> 00:23:57.838
And here's what the evaluated
expression looks like.

00:23:58.338 --> 00:23:59.618
It's a really, really
simple postfix.

00:23:59.998 --> 00:24:01.798
It doesn't even work that well.

00:24:02.298 --> 00:24:04.780
But it's a demo.

00:24:04.780 --> 00:24:08.080
And then it produces a result.

00:24:08.080 --> 00:24:11.220
Now we're going to write a
little bit more Pepper stuff to

00:24:11.220 --> 00:24:14.400
push that result back over the
bridge and call that

00:24:14.400 --> 00:24:15.540
closure object.

00:24:15.540 --> 00:24:18.520
So that's what this, in right
below that if statement, all

00:24:18.520 --> 00:24:21.918
that if clause, is you can see
it's pulling out the result,

00:24:21.918 --> 00:24:24.358
turning it into a thing that's
digestible by JavaScript.

00:24:25.258 --> 00:24:30.598
And then it just says this en
vogue default, which is the

00:24:30.598 --> 00:24:34.640
wait from within your nexe to
call back out to the

00:24:34.640 --> 00:24:36.680
JavaScript function.

00:24:36.680 --> 00:24:39.720
And now back into the
JavaScript, here's

00:24:39.720 --> 00:24:41.140
what that looks like.

00:24:41.140 --> 00:24:45.480
This closure will get called
with the double result.

00:24:45.480 --> 00:24:48.500
OK, so let's see what
that looks like.

00:24:48.500 --> 00:24:53.160
We had such good luck
with the first run.

00:24:53.160 --> 00:24:58.940
Just let me go to calculator
two-- again Xcode project.

00:24:58.940 --> 00:25:04.460
One thing I do want to point
out here is that what I did

00:25:04.460 --> 00:25:09.960
was, in Xcode you can glue
a custom executable to it,

00:25:09.960 --> 00:25:10.858
which I just made chromium.

00:25:11.660 --> 00:25:16.000
But one of the things-- and
this is explained in the SDK

00:25:16.000 --> 00:25:19.320
documents-- is that you have to
add this dash, dash, enable

00:25:19.320 --> 00:25:22.780
NaCl flag when you're going
to do Native Client modules.

00:25:22.780 --> 00:25:26.780
Because we are still kind
of experimental, we

00:25:26.780 --> 00:25:28.120
are behind a flag.

00:25:28.120 --> 00:25:30.600
Last year we were kind
of a research project.

00:25:30.600 --> 00:25:32.858
This year we are becoming
a real project.

00:25:32.858 --> 00:25:39.880
So this is getting the full
force of Google behind it.

00:25:39.880 --> 00:25:44.620
So I should be able to
build and run this.

00:25:44.620 --> 00:25:47.680
Now we have basically
the same thing.

00:25:47.680 --> 00:25:51.020
It's going to look the same as
what you just saw because the

00:25:51.020 --> 00:25:53.520
whole basic, the whole web app
was already written

00:25:53.520 --> 00:25:56.060
in the markup.

00:25:56.060 --> 00:25:59.220
And one of the first things
that you notice is different,

00:25:59.220 --> 00:26:02.020
is that it says, oh I loaded
the calculator module.

00:26:02.500 --> 00:26:04.840
Because the nexe
actually exists now.

00:26:04.840 --> 00:26:06.520
So is says, oh you
know I found it.

00:26:06.520 --> 00:26:09.186
And I just have a little alert
in there that let's me know

00:26:09.186 --> 00:26:11.920
that and let's me know that
my demo's actually working.

00:26:11.920 --> 00:26:18.358
So if I say, you know,
7 plus 6 equals 13.

00:26:18.358 --> 00:26:21.112
So now it's actually doing the
computations through the C

00:26:21.112 --> 00:26:21.220
.

00:26:23.300 --> 00:26:26.700
So that's all now
glued together.

00:26:26.700 --> 00:26:27.820
OK.

00:26:27.820 --> 00:26:33.900
Thank you.

00:26:33.900 --> 00:26:34.538
OK one more step.

00:26:35.220 --> 00:26:38.740
Let's do more with Pepper and
the kind of the fun stuff

00:26:38.740 --> 00:26:39.672
you can do in the C

00:26:39.760 --> 00:26:40.780
code.

00:26:40.780 --> 00:26:41.364
So we go back to C

00:26:42.280 --> 00:26:46.840
again and we will add sound.

00:26:46.840 --> 00:26:51.000
So step one of adding sound
is I'm going to expose

00:26:51.000 --> 00:26:51.840
this click method.

00:26:51.840 --> 00:26:54.420
So again as I explained
before, where you can

00:26:54.420 --> 00:26:55.920
say OK, add methods.

00:26:55.580 --> 00:26:57.460
Sea salt says, what
are your methods?

00:26:57.460 --> 00:26:59.840
I'm going to expose
one called click.

00:26:59.840 --> 00:27:01.520
And wire it up to
calculator click.

00:27:01.520 --> 00:27:04.960
And then I'm also going
to expose a property

00:27:04.960 --> 00:27:05.200
on the object too.

00:27:05.200 --> 00:27:08.980
So you know in JavaScript you
can have the functions which

00:27:08.980 --> 00:27:11.200
are really just also properties
and scalar properties.

00:27:11.200 --> 00:27:17.160
So here sea salt is saying
what are your properties?

00:27:17.160 --> 00:27:22.680
And I say OK, I'm going to
make an accessor for my

00:27:22.680 --> 00:27:24.680
property and a mutator.

00:27:24.680 --> 00:27:28.000
Because I can get
it and set it.

00:27:28.000 --> 00:27:31.400
And then I'm going to add this
property named button sound

00:27:31.400 --> 00:27:35.300
wired up to the accessor
and mutator there.

00:27:35.300 --> 00:27:38.478
So over in the JavaScript
here's what that looks like.

00:27:38.478 --> 00:27:40.440
There's the click
method getting called.

00:27:40.440 --> 00:27:43.518
So we already went through
that with the calculate.

00:27:43.518 --> 00:27:45.518
And here's setting that
property button sound.

00:27:45.140 --> 00:27:46.958
It just looks like JavaScript.

00:27:46.958 --> 00:27:51.900
There's nothing
special about it.

00:27:51.900 --> 00:27:52.560
It should be all very familiar.

00:27:52.560 --> 00:27:53.320
OK.

00:27:53.320 --> 00:27:54.046
So back into the C

00:27:54.180 --> 00:27:54.720
code now.

00:27:55.680 --> 00:27:59.120
There's a little bit more work
that we have to do which is

00:27:59.120 --> 00:28:01.580
some kind of Pepper stuff.

00:28:01.580 --> 00:28:04.380
And that is to actually
implement the accessor

00:28:04.380 --> 00:28:05.240
and the mutator.

00:28:05.640 --> 00:28:07.060
So here's the accessor,
get button sounds.

00:28:07.060 --> 00:28:10.460
And you see all it's doing is
it's just taking an internal

00:28:10.460 --> 00:28:13.058
variable inside my object--
that play button sound-- and

00:28:13.058 --> 00:28:16.140
sticking it into a variable
that can be digested

00:28:16.140 --> 00:28:17.678
by JavaScript.

00:28:17.518 --> 00:28:19.358
And here's the mutator.

00:28:19.358 --> 00:28:25.558
So I'm grabbing that variable
and using sea salt to do all

00:28:25.558 --> 00:28:26.140
the variable marshaling.

00:28:26.140 --> 00:28:28.978
Because as you know,
JavaScript variables can

00:28:28.978 --> 00:28:30.278
be just about anything.

00:28:30.698 --> 00:28:34.978
There's no strong typing,
which is kind of a really

00:28:34.978 --> 00:28:35.258
difficult thing for C

00:28:36.880 --> 00:28:37.938
programs to get their
head around sometimes.

00:28:37.938 --> 00:28:41.460
But the idea is that we get
this thing from JavaScript.

00:28:41.460 --> 00:28:44.080
And sea salt says OK, I'm going
to figure out what it is

00:28:44.080 --> 00:28:47.400
and then return the most
appropriate boolean value.

00:28:47.400 --> 00:28:49.180
If it already is a boolean,
it's just what you get.

00:28:49.180 --> 00:28:52.860
But if it's a string, or if
it's a double, or an int, or

00:28:52.860 --> 00:28:56.880
whatever else, do some attempts
to make a boolean value

00:28:56.880 --> 00:28:57.480
out of that and set it.

00:28:57.480 --> 00:29:00.460
So that's what this is doing.

00:29:00.460 --> 00:29:02.780
So now let's add
the actual audio.

00:29:02.780 --> 00:29:04.140
So that was the set up for it.

00:29:04.140 --> 00:29:08.440
And here's the part where we're
going to really set the audio.

00:29:08.440 --> 00:29:11.260
When your module actually gets
loaded and then all the devices

00:29:11.260 --> 00:29:14.460
are ready for use-- so there's
2-D devices, 3-D devices, these

00:29:14.460 --> 00:29:18.338
are all in the SDK examples,
and there's audio-- you

00:29:18.338 --> 00:29:20.920
get this call, this
said window call.

00:29:20.920 --> 00:29:22.660
It says OK, now you're
live in the browser.

00:29:22.660 --> 00:29:23.500
The devices are ready.

00:29:23.500 --> 00:29:25.780
You can go to town.

00:29:25.780 --> 00:29:27.488
So what I'm going to do is I'm
going to say, all right, I want

00:29:27.488 --> 00:29:29.320
to create an audio device.

00:29:29.320 --> 00:29:30.800
So I just simply ask Pepper.

00:29:30.800 --> 00:29:32.920
I say I want a Pepper
audio device.

00:29:32.920 --> 00:29:34.560
And then I configure it.

00:29:34.560 --> 00:29:36.000
You just use a whole bunch of
stuff in there to configure

00:29:36.000 --> 00:29:39.460
the sound sample type
and everything else.

00:29:39.460 --> 00:29:41.572
And then I have this callback
that I give it which we'll

00:29:41.572 --> 00:29:42.920
look at a little bit later.

00:29:42.920 --> 00:29:46.538
And what's happening is that
a thread gets started in

00:29:46.538 --> 00:29:49.140
your Native Client module
that plays the sound.

00:29:49.140 --> 00:29:52.360
And that thread continuously
calls this callback saying, I

00:29:52.360 --> 00:29:55.780
want more samples for
the buffer to play.

00:29:55.780 --> 00:29:57.060
Then I just simply say,
initialize the context.

00:29:57.060 --> 00:29:58.900
And I'm ready to go.

00:29:58.900 --> 00:30:00.824
So now I have an audio
context in there.

00:30:01.920 --> 00:30:03.920
So here's what that audio
callback looks like.

00:30:03.920 --> 00:30:08.520
It's really just a very, very
thin wrapper on top of the

00:30:08.520 --> 00:30:12.340
synthesize button-click
method inside my object.

00:30:12.340 --> 00:30:16.480
So here is the synthesize
button-click method in the

00:30:16.480 --> 00:30:18.018
object-- very, very simple.

00:30:18.018 --> 00:30:21.978
All it's doing is copying
samples from the button click

00:30:21.978 --> 00:30:24.100
sample into the play buffers.

00:30:25.180 --> 00:30:27.240
I have a little click pending
piece of state in there to

00:30:27.240 --> 00:30:31.498
tell me whether the click
has finished playing or not.

00:30:31.498 --> 00:30:36.680
Because Pepper's upward buffers
can be smaller then the wave

00:30:36.680 --> 00:30:38.960
sample that I originally have.

00:30:38.960 --> 00:30:41.698
I mean wave samples can be very
large and the Pepper buffers

00:30:41.698 --> 00:30:43.258
are generally a K or so.

00:30:43.258 --> 00:30:45.880
So that's all that is.

00:30:45.880 --> 00:30:48.580
It's really, really
simple stuff.

00:30:48.580 --> 00:30:53.780
So let's see what
that looks like.

00:30:53.780 --> 00:30:57.120
And back to here.

00:30:57.120 --> 00:30:58.560
Let me minimize two.

00:30:58.560 --> 00:31:02.880
I have three.

00:31:02.880 --> 00:31:07.340
It should just be able
to say build and run.

00:31:07.340 --> 00:31:09.060
And so by the way, that build
and run stuff, what it's doing

00:31:09.060 --> 00:31:12.880
is it's running all the Native
Client compilers, and producing

00:31:12.880 --> 00:31:18.740
validated code, and writing out
a nexe for me which I then

00:31:18.740 --> 00:31:21.858
load in via my page.

00:31:21.440 --> 00:31:22.700
OK, got it.

00:31:22.700 --> 00:31:30.702
So now let's see if
this works, sound.

00:31:32.698 --> 00:31:33.696
All right.

00:31:37.684 --> 00:31:39.680
OK, that's it.

00:31:39.680 --> 00:31:43.298
We did it, back to Ian.

00:31:43.298 --> 00:31:43.338
IAN LEWIS: Thanks Dave.

00:31:49.020 --> 00:31:51.300
So we're still hard at
work at this stuff.

00:31:51.300 --> 00:31:52.640
I wanted to let you know
a little bit about

00:31:52.640 --> 00:31:54.600
what we're working on.

00:31:54.600 --> 00:31:58.220
The first thing that-- it's
actually my team doing this--

00:31:58.220 --> 00:32:01.180
is full support for
debugging, not just GDB, but

00:32:01.180 --> 00:32:03.540
also Visual Studio.

00:32:03.540 --> 00:32:06.858
So that's been a party and a
half getting that to work.

00:32:07.280 --> 00:32:09.420
If you have any question
about that, you can ask me.

00:32:09.420 --> 00:32:13.940
We're also doing plugins to
support all the popular,

00:32:13.940 --> 00:32:14.720
integrated development
environments.

00:32:14.720 --> 00:32:17.858
So you'll be able to develop
an Apple code just as

00:32:17.858 --> 00:32:21.044
easily as you develop
any other kind of code.

00:32:21.140 --> 00:32:24.900
We're working on this interop
library-- the sea salt library

00:32:24.900 --> 00:32:26.460
that Dave showed you.

00:32:26.460 --> 00:32:30.740
We'd like to make that much
more easy to use so that it

00:32:30.740 --> 00:32:35.720
feels more natural, like you're
just programming in your native

00:32:35.720 --> 00:32:38.200
language instead of having to
do a lot of marshaling back and

00:32:38.200 --> 00:32:39.940
forth between Pepper
and JavaScript.

00:32:40.700 --> 00:32:43.300
And finally, probably the most
exciting thing we're working on

00:32:43.300 --> 00:32:45.980
is something called
portable NaCl, which we

00:32:45.980 --> 00:32:48.060
pronounce pinnacle.

00:32:48.060 --> 00:32:52.400
Now portable NaCl is an
LLVM-based bite code

00:32:52.400 --> 00:32:54.980
representation of
your native code.

00:32:54.980 --> 00:32:59.280
So what that gives you is the
ability to have a portable

00:32:59.280 --> 00:33:04.380
representation that can then
be downloaded and compiled on

00:33:04.380 --> 00:33:09.200
the client to match the
client's architecture.

00:33:09.200 --> 00:33:11.008
Or you could compile it
on the server to match a

00:33:11.008 --> 00:33:14.900
client's architecture.

00:33:14.900 --> 00:33:19.320
So that's interesting to us
because at this point, although

00:33:19.320 --> 00:33:21.900
NaCl has completely crossed
platform with regards to

00:33:21.900 --> 00:33:25.338
operating system, it does still
need to be compiled for 32-bit

00:33:25.338 --> 00:33:30.058
Intel, and 64-bit Intel,
and ARM as separate nexes.

00:33:30.058 --> 00:33:34.118
And what pinnacle allows us
to do is have one nexe that

00:33:34.118 --> 00:33:35.780
is completely portable.

00:33:35.780 --> 00:33:39.540
And we think that's what
the web is all about.

00:33:39.540 --> 00:33:44.200
If this interests you as much
as it interests us, we'd love

00:33:44.200 --> 00:33:47.858
to have your contributions
and your comments.

00:33:47.858 --> 00:33:49.400
We'd like to hear about your
problems or your triumphs

00:33:49.400 --> 00:33:51.520
with this software.

00:33:51.520 --> 00:33:53.180
So you can go to
nativeclient.googlecode.com.

00:33:54.058 --> 00:33:56.238
You can get the SDK
at nativeclient-sdk

00:33:56.238 --> 00:33:56.598
.googlecode.com.

00:33:59.180 --> 00:34:02.780
And if you have anything at
all to say about it, please

00:34:02.780 --> 00:34:06.180
visit our Native Client
discuss Google group.

00:34:06.180 --> 00:34:09.588
If you'd like to see more
demos, we're going to have a

00:34:09.588 --> 00:34:13.838
ton of them at our booth in the
developer sandbox, which is

00:34:13.838 --> 00:34:15.918
just right around the corner
underneath the big

00:34:15.918 --> 00:34:16.178
chrome balloon.

00:34:16.178 --> 00:34:19.218
And Dave and I will be
there all afternoon.

00:34:19.218 --> 00:34:21.938
And we'll have people from
the Native Client team there

00:34:21.938 --> 00:34:24.418
all day tomorrow as well.

00:34:24.418 --> 00:34:27.498
So come see us there.

00:34:27.498 --> 00:34:29.678
Now to finish up before we take
questions, we actually have a

00:34:29.678 --> 00:34:34.380
special guest, out developer
from the Unity team.

00:34:34.380 --> 00:34:39.798
Jonas has been able to sneak
in under the nose of the

00:34:39.798 --> 00:34:40.258
fire marshal, I guess.

00:34:40.258 --> 00:34:44.478
And he's here to talk a
little bit about the Unity

00:34:44.478 --> 00:34:45.458
experience on Native Client.

00:34:48.038 --> 00:34:52.798
JONAS ECHTERHOFF: So hello.

00:34:52.798 --> 00:34:54.218
My name Jonas Echterhoff.

00:34:54.218 --> 00:34:57.658
I'm working for
Unity Technologies.

00:34:58.058 --> 00:35:02.998
We're developing the Unity game
engine, which is the technology

00:35:02.998 --> 00:35:06.718
driving the Star Wars
game you saw before.

00:35:06.718 --> 00:35:12.460
So I want to give you a brief
demo of how Unity works,

00:35:12.460 --> 00:35:14.298
what is it about.

00:35:14.298 --> 00:35:16.458
And then talk about our
motivation for porting it

00:35:16.458 --> 00:35:22.138
to Native Client, and my
experience in getting

00:35:22.138 --> 00:35:24.418
the port to work.

00:35:24.418 --> 00:35:27.740
Now it seems we have a
little problem with the

00:35:27.740 --> 00:35:28.820
display connector here.

00:35:28.820 --> 00:35:32.066
I'm just going to pluck out
this one and try if that works.

00:36:09.538 --> 00:36:10.698
Yeah it did something here.

00:36:13.438 --> 00:36:15.598
There we are, great.

00:36:15.598 --> 00:36:23.440
So what you're seeing here is
the Unity editor which people

00:36:23.440 --> 00:36:24.658
use to develop content.

00:36:24.658 --> 00:36:27.660
So Unity is an engine people
use to develop games

00:36:27.660 --> 00:36:32.778
or any other kinds of
interactive 3-D content.

00:36:32.778 --> 00:36:35.478
People are using it for other
kinds of fence projects

00:36:35.478 --> 00:36:38.558
actually, like architectural
visualization or

00:36:38.558 --> 00:36:40.438
scientific stuff.

00:36:40.758 --> 00:36:45.418
I'm going to give you brief
overflow of some workflows.

00:36:45.698 --> 00:36:50.678
So what you see here
is the scene view.

00:36:51.658 --> 00:36:54.218
anybody who's using 3-D
modelling tools should

00:36:54.218 --> 00:36:55.838
be familiar was the
look and feel of it.

00:37:05.378 --> 00:37:07.618
So you can move around your
scene, which is typically

00:37:07.618 --> 00:37:09.738
a level in the game.

00:37:09.738 --> 00:37:10.678
You can click on anything.

00:37:10.678 --> 00:37:12.998
And then it will show up here
in the hierarchy, which is a

00:37:12.998 --> 00:37:14.158
list of objects in the scene.

00:37:14.158 --> 00:37:17.878
And you can add it
as properties here

00:37:17.878 --> 00:37:18.194
in the inspector.

00:37:26.458 --> 00:37:28.678
Some objects may have scripts
attached to it which can be

00:37:28.678 --> 00:37:32.000
written in C-SHOP or JavaScript
to define behaviors, which is a

00:37:32.000 --> 00:37:35.078
way which would set
up your game play.

00:37:35.078 --> 00:37:38.618
So down here you have the game
view which is where you can

00:37:38.618 --> 00:37:40.918
actually try out what
you're working on.

00:37:40.918 --> 00:37:44.298
So any time you can just
hit the play button.

00:37:44.298 --> 00:37:47.360
And you can test
your game in here.

00:37:47.360 --> 00:37:48.534
So let me just expand that.

00:37:59.480 --> 00:38:02.538
And we don't have audio now
because we're using the

00:38:02.538 --> 00:38:04.120
different connector.

00:38:04.120 --> 00:38:06.780
But this isn't much
of a game really.

00:38:06.780 --> 00:38:10.638
I just picked this scene
because it looks so nice.

00:38:11.118 --> 00:38:13.518
But one thing we care a
lot about is when people

00:38:13.518 --> 00:38:16.358
develop content like this.

00:38:16.358 --> 00:38:18.958
They want very fast iteration
times to try out ideas.

00:38:18.958 --> 00:38:23.498
Like with traditional game
engines, people might test

00:38:23.498 --> 00:38:26.438
their game then decide they're
not quite happy with the look

00:38:26.438 --> 00:38:31.678
of something and then re-export
it in their modelling tool,

00:38:31.678 --> 00:38:32.880
[UNINTELLIGIBLE PHRASE]

00:38:32.880 --> 00:38:34.420
make a new bullet of the game
and start over in testing.

00:38:34.420 --> 00:38:39.758
And so, I'll show you
how you do it in Unity.

00:38:39.758 --> 00:38:43.360
So say we don't like the
look of the zebra crossing.

00:38:43.360 --> 00:38:46.426
We just go to the scene
view, find it here.

00:39:08.838 --> 00:39:09.158
There we have it.

00:39:09.158 --> 00:39:12.678
So we pick it up here
in the inspector.

00:39:12.678 --> 00:39:13.898
Here's our texture.

00:39:14.298 --> 00:39:17.018
This is the asset view which
contains all the assets

00:39:17.018 --> 00:39:19.000
making the project.

00:39:20.760 --> 00:39:22.558
We just open the texture
file up in Photoshop,

00:39:22.558 --> 00:39:26.738
do some changes to it.

00:39:26.738 --> 00:39:30.478
I think this looks nice
so I just save it.

00:39:30.478 --> 00:39:33.958
And at the moment you save it,
the editor detects that the

00:39:33.958 --> 00:39:35.238
file has been changed on disk
and automatically

00:39:35.238 --> 00:39:35.978
re-imports it.

00:39:35.978 --> 00:39:37.978
So now you can see the
texture has changed

00:39:37.978 --> 00:39:38.298
the end of the game.

00:39:39.178 --> 00:39:42.418
I can resume testing right
where I stopped and

00:39:42.418 --> 00:39:44.938
resume playing.

00:39:44.938 --> 00:39:47.998
We think this is a very fast
process to develop content.

00:39:47.998 --> 00:39:49.098
And it works for any
kind of assets.

00:39:49.098 --> 00:39:52.518
You can do the same thing
with your 3-D model and

00:39:52.518 --> 00:39:53.780
anything you're using.

00:39:53.780 --> 00:39:57.858
So you can always test your
game exactly how it would

00:39:57.858 --> 00:39:58.338
look in the editor.

00:39:58.338 --> 00:40:02.098
But once you want to try it on
the actually bit platform,

00:40:02.098 --> 00:40:03.958
you can make a build here.

00:40:03.958 --> 00:40:06.938
So as you'll see, we support
lots of different platforms.

00:40:07.258 --> 00:40:09.158
We support the common
game consoles.

00:40:09.158 --> 00:40:11.438
We have support for Android,
which is new for us.

00:40:11.438 --> 00:40:16.038
So we have a small booth with
the developer sandbox where we

00:40:16.038 --> 00:40:17.738
showcase that, in case
you're interested.

00:40:17.738 --> 00:40:20.638
We support iPhone, standalone's
for mac and PC and we

00:40:20.638 --> 00:40:22.578
have the web player.

00:40:22.578 --> 00:40:26.380
The Web Player allows you to
embed Unity content in web

00:40:26.380 --> 00:40:30.798
pages for rich interactive
experiences people are using

00:40:30.798 --> 00:40:35.998
for having games embedded
in Facebook pages.

00:40:35.998 --> 00:40:39.538
So far we implemented this
using a custom plugin.

00:40:39.538 --> 00:40:41.218
Well it works pretty
well for us.

00:40:41.218 --> 00:40:44.138
And lots of people
are installing it.

00:40:44.138 --> 00:40:46.340
We have 30 million installs.

00:40:46.340 --> 00:40:50.018
That's actually a very
insignificant percentage of

00:40:50.018 --> 00:40:51.618
the internet population.

00:40:51.618 --> 00:40:56.340
So what we really like is to be
able to have people run our

00:40:56.340 --> 00:40:58.118
content without installing
a plugin first.

00:40:58.518 --> 00:41:01.938
That's why we're really
excited about Native Client.

00:41:01.938 --> 00:41:04.518
Because Native Client will
allow us to run on Chrome

00:41:04.518 --> 00:41:05.538
browsers, Chrome OS.

00:41:06.118 --> 00:41:08.678
And hopefully at some point,
other browsers will adapt

00:41:08.678 --> 00:41:11.018
it as well without any
hurdles for the users.

00:41:11.018 --> 00:41:14.058
So right now it runs on
Mac, Windows, and Linux.

00:41:14.058 --> 00:41:16.938
This is very cool for us
actually, because we never

00:41:16.938 --> 00:41:17.618
had a Linux plugin.

00:41:17.618 --> 00:41:24.258
We're always too afraid of
having various different

00:41:24.258 --> 00:41:25.338
distribution and driver issues.

00:41:25.338 --> 00:41:27.618
Now we have the problem taken
away from us by Google,

00:41:27.618 --> 00:41:30.238
which is nice for us.

00:41:30.238 --> 00:41:34.518
I guess they can take the pain.

00:41:34.518 --> 00:41:39.118
So we just decided to port to
native client very recently.

00:41:39.118 --> 00:41:41.718
I heard about it
first a month ago.

00:41:41.718 --> 00:41:45.658
So on very short notice I got
on a plane to Mountain View to

00:41:45.658 --> 00:41:48.998
work along Google engineers to
get this running to have a

00:41:48.998 --> 00:41:52.218
demo for the conference.

00:41:52.218 --> 00:41:54.400
Now let me tell you
how it worked for us.

00:41:54.400 --> 00:41:59.940
Now getting our code to compile
in [UNINTELLIGIBLE PHRASE]

00:41:59.940 --> 00:42:00.578
wasn't a big problem.

00:42:00.578 --> 00:42:03.478
We were already using POSIX
API, since we were running

00:42:03.478 --> 00:42:08.858
on the Mac and other
platforms which used them.

00:42:08.858 --> 00:42:10.378
Some things we can't do
which we're normally

00:42:10.378 --> 00:42:10.598
doing on the web plugin.

00:42:11.438 --> 00:42:13.998
We don't have file access,
which we're using for

00:42:13.998 --> 00:42:14.698
permanent storage.

00:42:14.698 --> 00:42:16.398
We don't have network sockets.

00:42:17.260 --> 00:42:20.440
I believe there are plans to
expose some functionality and

00:42:20.440 --> 00:42:23.958
the Pepper APIs to have this.

00:42:23.978 --> 00:42:28.478
And the Pepper APIs which we
have to use for all hardware

00:42:28.478 --> 00:42:29.498
and browser interactions.

00:42:29.498 --> 00:42:33.678
So we had to port all
our code to use that.

00:42:33.678 --> 00:42:36.738
Like input was very
straightforward.

00:42:36.738 --> 00:42:39.698
Audio wasn't a big problem
since fmod the audio library we

00:42:39.698 --> 00:42:47.218
use has the ability to mix down
all the 3-D position of the

00:42:47.218 --> 00:42:47.778
audio into samples buffers.

00:42:48.158 --> 00:42:50.338
Which we can just than
give to the Pepper APIs

00:42:50.338 --> 00:42:52.298
David just showed you.

00:42:52.298 --> 00:42:54.958
Graphics was a bit more
difficult for us because it

00:42:54.958 --> 00:42:58.698
uses OpenGLES 2.0 which can
do pretty much everything

00:42:58.698 --> 00:42:59.958
you'd want to do.

00:42:59.398 --> 00:43:02.098
It's normally open GL, but
it only has a subset of

00:43:02.098 --> 00:43:03.958
the functions you have.

00:43:03.958 --> 00:43:06.158
So you have to implement
some things differently.

00:43:06.158 --> 00:43:08.798
Like all the rendering
is done using shaders.

00:43:09.058 --> 00:43:15.298
So we had to write some code to
convert like non-shader

00:43:15.298 --> 00:43:18.058
rendering code, which was like
using the normal vertex

00:43:18.058 --> 00:43:22.198
pipeline, to dynamically
generate shaders for us.

00:43:22.118 --> 00:43:25.632
We had to do this because we
want of support all of our

00:43:25.632 --> 00:43:28.738
content which has deployed
for other platforms as well.

00:43:29.418 --> 00:43:32.498
Luckily some of that work was
already done because we're

00:43:32.498 --> 00:43:35.438
targeting OpenGLES on the
Android and other

00:43:35.438 --> 00:43:36.198
platforms too.

00:43:36.198 --> 00:43:40.818
So for us, by far the most
difficult part, was getting the

00:43:40.818 --> 00:43:44.658
Mono runtime to work, which
we're using for scripting.

00:43:44.658 --> 00:43:47.358
So people write code in
C-SHOP and JavaScript.

00:43:47.358 --> 00:43:49.498
This is where we got
help from Google.

00:43:49.538 --> 00:43:51.738
Thanks to Brad, and
Nicholas, and Elijah.

00:43:51.738 --> 00:43:53.738
Without them this
wouldn't be possible.

00:43:53.738 --> 00:43:55.718
They were working on this.

00:43:55.918 --> 00:43:59.238
They got the Mono compilers
to actually output Native

00:43:59.238 --> 00:44:00.280
Client [UNINTELLIGIBLE]

00:44:00.280 --> 00:44:05.798
machine code from the C-SHOP
code, which is great.

00:44:05.798 --> 00:44:11.358
So yeah, I mean overall I'm
very happy with the results.

00:44:11.358 --> 00:44:12.358
There were some rough edges.

00:44:12.318 --> 00:44:14.738
I would certainly have liked
better debugging tools.

00:44:14.738 --> 00:44:17.038
We did a lot of
print of debugging.

00:44:17.138 --> 00:44:24.080
I mean, this is a product which
is in very active development.

00:44:24.080 --> 00:44:25.098
So this should
become much better.

00:44:25.098 --> 00:44:28.658
And I encourage anybody who's
interested to download the

00:44:28.658 --> 00:44:31.338
NaCl SDK and just try it out.

00:44:31.338 --> 00:44:36.298
Or it that sounds too complex
for you, or if you want the

00:44:36.298 --> 00:44:37.578
target other platforms, you
might want to give

00:44:37.578 --> 00:44:38.718
Unity a chance.

00:44:38.718 --> 00:44:41.238
You can download a free version
from our website, unity3d.com.

00:44:44.078 --> 00:44:45.598
So that's it from me.

00:44:45.598 --> 00:44:48.094
If you have any questions,
I'll be around for a while.

00:44:56.358 --> 00:44:56.778
AUDIENCE: Applause.

00:44:56.778 --> 00:44:57.780
IAN LEWIS: OK, Thanks so much.

00:44:57.780 --> 00:45:01.520
I think we do have a little
bit of time for questions.

00:45:01.520 --> 00:45:04.360
I know that some of you
probably have other a

00:45:04.360 --> 00:45:04.400
sessions to get to.

00:45:04.400 --> 00:45:06.340
So we won't feel too
bad if you walk out.

00:45:06.340 --> 00:45:09.198
But Dave and I, or Jonas
can take questions right

00:45:09.198 --> 00:45:15.998
now if there are any.
886
00:45:15,998 --&gt; 00:45:15,984
Yeah?

00:45:18.902 --> 00:45:19.888
AUDEINCE:

00:45:19.888 --> 00:45:26.780
[UNINTELLIGIBLE]

00:45:26.780 --> 00:45:28.358
on the Chrome browser,
when will you no longer

00:45:28.358 --> 00:45:30.300
need to pass the flag?

00:45:30.300 --> 00:45:34.018
IAN LEWIS: Do we have a
definitive response for that?

00:45:34.018 --> 00:45:35.318
DAVID SPRINGER: Chrome 6.

00:45:35.318 --> 00:45:39.458
IAN LEWIS: So we're shooting
for Chrome 6 on that.

00:45:39.458 --> 00:45:42.518
Oh, the question was, when do
we get to turn the flag off.

00:45:42.518 --> 00:45:45.418
And the answer is Chrome
6 at this point.

00:45:46.260 --> 00:45:48.958
We're trying to synchronize
with Chrome releases.

00:45:49.098 --> 00:45:51.458
I don't think that we've
issued any guarantees.

00:45:51.458 --> 00:45:56.178
AUDIENCE: The other question
is, it sounds like you did a

00:45:56.178 --> 00:45:58.518
lot of work to port Mono over.

00:45:58.518 --> 00:46:00.492
Is that work going to
be contributed back

00:46:00.492 --> 00:46:01.198
to open source?

00:46:01.780 --> 00:46:04.178
Is there going to be any
way to get at that code?

00:46:04.178 --> 00:46:10.398
IAN LEWIS: I believe
that's open source.

00:46:10.398 --> 00:46:18.118
JONAS ECHTERHOFF:
[UNINTELLIGIBLE]

00:46:18.118 --> 00:46:21.858
IAN LEWIS: The question was if
we're going to port Mono, or if

00:46:21.858 --> 00:46:23.260
we're going to contribute
the Mono port back.

00:46:23.880 --> 00:46:25.020
The Mono port is just 32-bit.

00:46:25.360 --> 00:46:27.600
So we still need to
do the 64-bit port.

00:46:27.600 --> 00:46:31.338
But the idea is to go ahead
and get all that done.

00:46:31.338 --> 00:46:36.978
Any other questions?

00:46:36.978 --> 00:46:39.058
OK, like I said, we'll be at
the developer sandbox all day.

00:46:39.058 --> 00:46:42.222
So if you have anything else
you want to say to us or

00:46:42.222 --> 00:46:43.060
ask us, please stop by.

00:46:43.060 --> 00:46:48.060
Thanks a lot.

