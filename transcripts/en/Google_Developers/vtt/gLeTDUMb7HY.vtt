WEBVTT
Kind: captions
Language: en

00:00:08.072 --> 00:00:09.280
FELIPE HOFFA: Hello everyone.

00:00:09.280 --> 00:00:12.400
I'm Felipe Hoffa from the
Google Cloud platform team,

00:00:12.400 --> 00:00:15.510
and today's show is about
BigQuery Python Panda

00:00:15.510 --> 00:00:17.820
and how to tie
everything together.

00:00:17.820 --> 00:00:21.600
I have with me Collin Sellman
from Pearson, the big education

00:00:21.600 --> 00:00:26.370
company, and he has some
very good news about BigQuery

00:00:26.370 --> 00:00:29.070
and how it's getting
connected now to Pandas.

00:00:29.070 --> 00:00:30.790
We'll have some demos.

00:00:30.790 --> 00:00:32.621
So welcome Collin,
thank you for coming.

00:00:32.621 --> 00:00:34.620
COLLIN SELLMAN: Thank you
for having me, Felipe.

00:00:34.620 --> 00:00:35.370
FELIPE HOFFA: Yes.

00:00:35.370 --> 00:00:37.640
You are the director of
data science at Pearson.

00:00:37.640 --> 00:00:38.570
COLLIN SELLMAN: I am.

00:00:38.570 --> 00:00:40.160
FELIPE HOFFA: Pearson
is not a start up.

00:00:40.160 --> 00:00:41.701
COLLIN SELLMAN: It
is not a start up.

00:00:41.701 --> 00:00:45.460
It actually started in 1844, and
today we are a global education

00:00:45.460 --> 00:00:47.490
company, but we also own
the "Financial Times".

00:00:47.490 --> 00:00:49.015
A lot of people don't
know that about us.

00:00:49.015 --> 00:00:50.290
FELIPE HOFFA: Oh,
that's pretty big.

00:00:50.290 --> 00:00:50.990
COLLIN SELLMAN: It is.

00:00:50.990 --> 00:00:51.990
It is a big company.

00:00:51.990 --> 00:00:53.323
FELIPE HOFFA: You're everywhere.

00:00:53.323 --> 00:00:55.062
And you are the director
of data science.

00:00:55.062 --> 00:00:56.770
COLLIN SELLMAN: Data
science, yes indeed.

00:00:56.770 --> 00:00:59.990
And what that is
is specifically I'm

00:00:59.990 --> 00:01:02.900
tasked with trying to make our
products better, specifically

00:01:02.900 --> 00:01:03.800
for student outcomes.

00:01:03.800 --> 00:01:08.070
And so the group that I work
in is the K-12 education group,

00:01:08.070 --> 00:01:09.954
and specifically
what we look at is

00:01:09.954 --> 00:01:11.620
products that are
used in the classroom.

00:01:11.620 --> 00:01:13.800
So it could be a
product that is used

00:01:13.800 --> 00:01:15.870
throughout the course
of a year or a semester

00:01:15.870 --> 00:01:17.470
by a student that
needs to catch up.

00:01:17.470 --> 00:01:18.886
It could be a
product that they're

00:01:18.886 --> 00:01:21.450
using just a part of their
normal classroom activities.

00:01:21.450 --> 00:01:24.220
And as a data
scientist, my job is

00:01:24.220 --> 00:01:26.690
to try to figure out how to
use the data that we collect

00:01:26.690 --> 00:01:29.360
from a lot of our users
that use our products,

00:01:29.360 --> 00:01:32.050
and both prove that our
products are effective-- so

00:01:32.050 --> 00:01:34.380
when a student uses it,
that it's going to give them

00:01:34.380 --> 00:01:36.540
some better learning
outcome-- and also

00:01:36.540 --> 00:01:37.750
to try to make them better.

00:01:37.750 --> 00:01:39.210
And so that's a
very exciting time

00:01:39.210 --> 00:01:40.880
to be in education,
because there's

00:01:40.880 --> 00:01:43.682
lots of really cool things
that we're able to collect now

00:01:43.682 --> 00:01:45.640
that we weren't able to
collect five years ago.

00:01:45.640 --> 00:01:48.179
So you can imagine when
it was just textbooks,

00:01:48.179 --> 00:01:49.720
textbooks didn't
collect data, and so

00:01:49.720 --> 00:01:52.110
you couldn't look at how
students used textbooks

00:01:52.110 --> 00:01:53.910
or what pages they focused on.

00:01:53.910 --> 00:01:56.300
Now with digital products,
we can do a lot of that.

00:01:56.300 --> 00:01:57.425
FELIPE HOFFA: That's great.

00:01:57.425 --> 00:01:59.240
So you have sixth
graders everywhere using

00:01:59.240 --> 00:02:02.340
different products and they
are interacting with them,

00:02:02.340 --> 00:02:05.900
you are collecting data,
you are able to tell

00:02:05.900 --> 00:02:08.168
how they're using it,
when the tests are--

00:02:08.168 --> 00:02:09.984
COLLIN SELLMAN: Yep,
and our whole job

00:02:09.984 --> 00:02:11.650
is to try to make
those products better.

00:02:11.650 --> 00:02:13.970
So all the data collected
is all anonymous,

00:02:13.970 --> 00:02:15.810
but basically we look
at things like that,

00:02:15.810 --> 00:02:19.610
like what do students use,
what do they use in some cases

00:02:19.610 --> 00:02:21.140
more than other times.

00:02:21.140 --> 00:02:23.230
And in a lot of
cases, we try to look

00:02:23.230 --> 00:02:25.870
at how we can sort of prove
that that use is leading

00:02:25.870 --> 00:02:26.980
to a good student outcome.

00:02:26.980 --> 00:02:30.400
So how can we look at what
a student knew, let's say,

00:02:30.400 --> 00:02:32.430
before they start using
one of our products

00:02:32.430 --> 00:02:34.300
to what they knew
after they started

00:02:34.300 --> 00:02:36.860
using one of our products, and
hopefully we can statistically

00:02:36.860 --> 00:02:38.990
show that we're making
a positive impact

00:02:38.990 --> 00:02:41.840
to what we call student
efficacy, or the efficacy

00:02:41.840 --> 00:02:43.865
of learners and
teachers as well.

00:02:43.865 --> 00:02:46.903
FELIPE HOFFA: That's amazing,
helping our students.

00:02:46.903 --> 00:02:47.920
And what are your tools?

00:02:47.920 --> 00:02:49.232
How do you do this?

00:02:49.232 --> 00:02:50.690
COLLIN SELLMAN: So
me personally, I

00:02:50.690 --> 00:02:52.980
happen to really
like Python, and I

00:02:52.980 --> 00:02:56.660
was introduced to a library
within Python called Pandas

00:02:56.660 --> 00:02:58.620
a few years ago,
which has been great,

00:02:58.620 --> 00:03:01.830
because a lot of the problems
that I have as a data scientist

00:03:01.830 --> 00:03:05.250
is not sort of doing
the end analysis,

00:03:05.250 --> 00:03:08.020
but it's in taking all the data
and putting it into a format

00:03:08.020 --> 00:03:08.910
that I need to see.

00:03:08.910 --> 00:03:13.600
So how do I group these types
of data by different parameters?

00:03:13.600 --> 00:03:16.060
And Python, and
Pandas in particular,

00:03:16.060 --> 00:03:18.490
is a really great way
to take source data

00:03:18.490 --> 00:03:22.640
from different databases--
sometimes from APIs, sometimes

00:03:22.640 --> 00:03:25.500
from CSVs, all sorts
of different ways--

00:03:25.500 --> 00:03:27.310
put it into--
traditionally what I

00:03:27.310 --> 00:03:30.560
do is look at sort of
a denormalized table

00:03:30.560 --> 00:03:33.300
of anonymous students
by some variables,

00:03:33.300 --> 00:03:34.340
and then do analysis.

00:03:34.340 --> 00:03:37.520
So a lot of group
bys, using Boolean

00:03:37.520 --> 00:03:39.360
vectors to sort of
filter out and look

00:03:39.360 --> 00:03:40.800
at different
aspects of the data.

00:03:40.800 --> 00:03:42.774
FELIPE HOFFA: And
BigQuery is your database?

00:03:42.774 --> 00:03:43.690
COLLIN SELLMAN: It is.

00:03:43.690 --> 00:03:46.600
And so one of the things
that we were fortunate enough

00:03:46.600 --> 00:03:50.440
to do this past summer is
we reached out to the Pandas

00:03:50.440 --> 00:03:52.380
community and asked
them if they would

00:03:52.380 --> 00:03:55.640
like us to try to contribute
a connector from Pandas

00:03:55.640 --> 00:03:56.980
directly to BigQuery.

00:03:56.980 --> 00:03:59.890
And so because I had
already been using BigQuery,

00:03:59.890 --> 00:04:04.600
and sometimes using the base
API, especially on a desktop,

00:04:04.600 --> 00:04:09.080
was a little bit problematic
compared to like a Pandas MySQL

00:04:09.080 --> 00:04:11.440
connector, which is
really easy, we decided,

00:04:11.440 --> 00:04:12.880
hey, let's try to do this.

00:04:12.880 --> 00:04:15.730
And my two sort of
coworkers Jacob and Sean

00:04:15.730 --> 00:04:18.298
and I during the summer sort
of worked on this open source

00:04:18.298 --> 00:04:20.589
project, which is really
great because the community is

00:04:20.589 --> 00:04:21.769
really great, really active.

00:04:21.769 --> 00:04:23.750
And in so far, it
seems like people

00:04:23.750 --> 00:04:27.230
are interested in seeing how
our sub-module within Pandas

00:04:27.230 --> 00:04:29.120
can actually enable
them to connect directly

00:04:29.120 --> 00:04:31.010
to BigQuery for both
reads and writes.

00:04:31.010 --> 00:04:36.070
FELIPE HOFFA: Yeah, so for now
on from version 0.13 Pandas

00:04:36.070 --> 00:04:38.020
has native BigQuery support?

00:04:38.020 --> 00:04:39.414
COLLIN SELLMAN: It does indeed.

00:04:39.414 --> 00:04:40.830
It is an experimental
feature now,

00:04:40.830 --> 00:04:43.413
because we're still looking at
sort of proving out some things

00:04:43.413 --> 00:04:45.410
and really looking
perhaps in the future

00:04:45.410 --> 00:04:47.500
to add some more things
in, but it's definitely

00:04:47.500 --> 00:04:48.899
in the 0.13 release.

00:04:48.899 --> 00:04:50.440
FELIPE HOFFA: I'm
so glad you started

00:04:50.440 --> 00:04:53.140
with this project, the
community [INAUDIBLE].

00:04:53.140 --> 00:04:56.315
Can you tell me a little about
why you are using BigQuery?

00:04:56.315 --> 00:04:57.690
COLLIN SELLMAN:
Well, it actually

00:04:57.690 --> 00:05:00.130
started the history
of how I found out

00:05:00.130 --> 00:05:01.610
about BigQuery in
the first place

00:05:01.610 --> 00:05:05.070
is I was actually on Twitter
and I was following someone that

00:05:05.070 --> 00:05:07.300
was talking about sort of
new database technologies--

00:05:07.300 --> 00:05:10.040
and this was several years
ago-- and they tweeted a link

00:05:10.040 --> 00:05:12.450
to the Dremel
technical white paper.

00:05:12.450 --> 00:05:16.760
And so I started to read
that, and the user persona

00:05:16.760 --> 00:05:19.160
that whoever wrote that
used, her name was Alice,

00:05:19.160 --> 00:05:22.010
and it was talking about Alice
internally working inside

00:05:22.010 --> 00:05:24.740
of Google, and looking
at sort of analyses that

00:05:24.740 --> 00:05:27.170
weren't necessarily a
good fit for MapReduce,

00:05:27.170 --> 00:05:29.054
or sort of traditional
relational databases.

00:05:29.054 --> 00:05:30.720
And when I was reading
that, I was like,

00:05:30.720 --> 00:05:33.220
Alice is me, because I'm very
much having this problem,

00:05:33.220 --> 00:05:35.780
because I was, at that
time, and still continue

00:05:35.780 --> 00:05:38.175
to use Amazon, and MySQL,
and some other things.

00:05:38.175 --> 00:05:39.800
But some of the types
of queries that I

00:05:39.800 --> 00:05:42.320
was doing with these
big denormalized tables

00:05:42.320 --> 00:05:44.970
were in some cases
taking 10 or 15 minutes.

00:05:44.970 --> 00:05:47.380
And so that could
take a lot of my time,

00:05:47.380 --> 00:05:49.680
especially if I'm doing
exploratory analysis.

00:05:49.680 --> 00:05:54.190
And so right after that,
I can't remember exactly

00:05:54.190 --> 00:05:56.910
after reading the paper, I heard
that BigQuery was coming out

00:05:56.910 --> 00:05:59.820
as sort of productized version
of that Dremel technology.

00:05:59.820 --> 00:06:01.640
And so as soon as it
came out, I signed up,

00:06:01.640 --> 00:06:04.650
I started playing around
with the first data sets,

00:06:04.650 --> 00:06:06.150
and then uploading
some of our data,

00:06:06.150 --> 00:06:08.602
and that's sort of where
I started with BigQuery.

00:06:08.602 --> 00:06:09.810
FELIPE HOFFA: That's awesome.

00:06:09.810 --> 00:06:13.030
So right now your workflow,
instead of waiting 15 minutes,

00:06:13.030 --> 00:06:15.675
20 minutes to get answers,
you're able to get it--

00:06:15.675 --> 00:06:17.050
COLLIN SELLMAN:
Well, in seconds,

00:06:17.050 --> 00:06:18.060
depending on the query.

00:06:18.060 --> 00:06:22.660
But in some cases, I'd
see like a 50 to 100 times

00:06:22.660 --> 00:06:25.490
speed up in some of the
queries that I was doing.

00:06:25.490 --> 00:06:30.050
I think it's also a
lot less overhead,

00:06:30.050 --> 00:06:32.940
in terms of managing the
type of instance I have,

00:06:32.940 --> 00:06:36.002
and the size of the disk
and all those sort of things

00:06:36.002 --> 00:06:37.960
that I would traditionally
had to do in Amazon.

00:06:37.960 --> 00:06:40.570
And so it was simpler from
a lot of different reasons.

00:06:40.570 --> 00:06:43.320
And also one of the things
I also like about it is it

00:06:43.320 --> 00:06:44.503
has the web UI.

00:06:44.503 --> 00:06:47.680
So although there's some
great client for MySQL,

00:06:47.680 --> 00:06:50.040
having the web UI makes
it really sort of easy

00:06:50.040 --> 00:06:53.070
for me to do work at home,
do work in the office,

00:06:53.070 --> 00:06:54.940
on different computers,
and take it and do

00:06:54.940 --> 00:06:56.480
whatever I need to do anywhere.

00:06:56.480 --> 00:06:58.604
FELIPE HOFFA: By the way,
a small trick for the web

00:06:58.604 --> 00:07:01.350
UI if you have been using it
have you used auto complete?

00:07:01.350 --> 00:07:02.850
COLLIN SELLMAN: Oh,
I just saw that.

00:07:02.850 --> 00:07:05.150
I just saw that recently, and so
that was a very exciting thing,

00:07:05.150 --> 00:07:07.250
because when I first started
using it, it didn't have that,

00:07:07.250 --> 00:07:09.090
and I kept hitting tab
and nothing would happen.

00:07:09.090 --> 00:07:11.070
And so now that that it has
it, it's really exciting.

00:07:11.070 --> 00:07:12.980
FELIPE HOFFA: If you are
writing queries on the web UI,

00:07:12.980 --> 00:07:14.509
you can press tab
and it will auto

00:07:14.509 --> 00:07:16.050
complete the function
names, the data

00:07:16.050 --> 00:07:18.610
set names, whatever
you need, you

00:07:18.610 --> 00:07:20.180
will have right
there in your hands.

00:07:20.180 --> 00:07:21.690
Try it out.

00:07:21.690 --> 00:07:24.320
But going back to the
Pandas world-- statistics,

00:07:24.320 --> 00:07:26.350
we are doing high
level analyses,

00:07:26.350 --> 00:07:30.330
we are learning how to
make the product better.

00:07:30.330 --> 00:07:31.840
Can you show me a demo of this?

00:07:31.840 --> 00:07:32.490
COLLIN SELLMAN:
Actually, I'm going

00:07:32.490 --> 00:07:35.240
to have two of my coworkers,
who are here with me today,

00:07:35.240 --> 00:07:39.429
who helped us and really
wrote most of the contribution

00:07:39.429 --> 00:07:41.470
that we tried to make to
the community of Pandas,

00:07:41.470 --> 00:07:43.070
they're going to give
you two different demos.

00:07:43.070 --> 00:07:44.870
One's going to be
more of what we would

00:07:44.870 --> 00:07:47.020
call a confirmatory
analysis, and one

00:07:47.020 --> 00:07:49.890
is going to be an exploratory
analysis both using Pandas,

00:07:49.890 --> 00:07:54.460
using our new read GBQ
method and BigQuery.

00:07:54.460 --> 00:07:56.027
FELIPE HOFFA: I'm very excited.

00:07:56.027 --> 00:07:56.860
Let's get to a demo.

00:07:56.860 --> 00:07:59.970
We'll have a minute or
less with the studio magic

00:07:59.970 --> 00:08:01.740
to prepare the demo.

00:08:01.740 --> 00:08:03.437
So are you ready now?

00:08:03.437 --> 00:08:04.520
COLLIN SELLMAN: I'm ready.

00:08:04.520 --> 00:08:05.650
FELIPE HOFFA: Let's go.

00:08:05.650 --> 00:08:07.210
OK so we are back.

00:08:07.210 --> 00:08:08.920
We called in
someone from Pearson

00:08:08.920 --> 00:08:11.760
and now with Jacob Schaer
we are going for demo

00:08:11.760 --> 00:08:15.090
how they are doing data
science at Pearson.

00:08:15.090 --> 00:08:15.591
Hi Jacob.

00:08:15.591 --> 00:08:17.215
JACOB SCHAER: Hi,
thanks for having us.

00:08:17.215 --> 00:08:19.020
FELIPE HOFFA: Thank
you for being here.

00:08:19.020 --> 00:08:21.860
You will work with Python,
we'll be working with Pandas,

00:08:21.860 --> 00:08:24.160
you have some data
science to show us.

00:08:24.160 --> 00:08:25.890
What are you doing?

00:08:25.890 --> 00:08:26.909
What are we doing today?

00:08:26.909 --> 00:08:28.950
JACOB SCHAER: Correct, so
as Collin said earlier,

00:08:28.950 --> 00:08:32.059
we're planning on demoing a bit
of a confirmatory analysis--

00:08:32.059 --> 00:08:35.890
that is, using a specific method
to answer a specific question.

00:08:35.890 --> 00:08:38.240
And by doing so, we
hope to demonstrate

00:08:38.240 --> 00:08:39.851
how we use BigQuery
in our analytics.

00:08:39.851 --> 00:08:41.059
FELIPE HOFFA: That's awesome.

00:08:41.059 --> 00:08:44.091
And what's the question that
we want confirmation for today?

00:08:44.091 --> 00:08:45.590
JACOB SCHAER: So
today we're looking

00:08:45.590 --> 00:08:48.350
at student use of
practice assessments.

00:08:48.350 --> 00:08:50.180
We're hoping to see
if the questions are

00:08:50.180 --> 00:08:53.394
too difficult or too
easy for the students.

00:08:53.394 --> 00:08:55.810
FELIPE HOFFA: So have students
everywhere in America, they

00:08:55.810 --> 00:08:58.905
are answering questions
on an interactive test?

00:08:58.905 --> 00:09:01.030
JACOB SCHAER: Correct, one
of our online platforms.

00:09:01.030 --> 00:09:02.380
FELIPE HOFFA: That's awesome.

00:09:02.380 --> 00:09:05.210
And now we are able to tell
if the questions are hard,

00:09:05.210 --> 00:09:07.047
if they're fair,
if they're easy?

00:09:07.047 --> 00:09:07.880
JACOB SCHAER: Right.

00:09:07.880 --> 00:09:10.110
So the goal is to
look at the difficulty

00:09:10.110 --> 00:09:13.367
and assess whether the tests
are meeting the original goals.

00:09:13.367 --> 00:09:15.200
FELIPE HOFFA: How are
you able to tell that?

00:09:15.200 --> 00:09:17.460
JACOB SCHAER: So we have
the raw item responses

00:09:17.460 --> 00:09:20.180
given by each student,
and we're going

00:09:20.180 --> 00:09:23.250
to run a Rasch item
analysis, which

00:09:23.250 --> 00:09:27.120
is a simple model for students
taking tests that accounts

00:09:27.120 --> 00:09:29.190
for their ability, as
well as the difficulty

00:09:29.190 --> 00:09:30.400
of the questions.

00:09:30.400 --> 00:09:31.150
FELIPE HOFFA: Can
you show me more?

00:09:31.150 --> 00:09:31.986
JACOB SCHAER: Sure.

00:09:31.986 --> 00:09:33.273
FELIPE HOFFA: Awesome.

00:09:33.273 --> 00:09:35.810
JACOB SCHAER: So we're
going to start off

00:09:35.810 --> 00:09:38.010
by importing our sub-module.

00:09:38.010 --> 00:09:39.520
As we mentioned
before, there's now

00:09:39.520 --> 00:09:42.980
the GBQ in version 13 of Pandas.

00:09:42.980 --> 00:09:46.620
So typical boilerplate,
we're going to import it

00:09:46.620 --> 00:09:50.540
and now we get to start
our query preparation.

00:09:50.540 --> 00:09:52.850
The key requirements
for this query

00:09:52.850 --> 00:09:55.980
was that we have to have
the first time a student has

00:09:55.980 --> 00:09:57.330
seen a question.

00:09:57.330 --> 00:09:59.990
This is challenging, because
some students can retake

00:09:59.990 --> 00:10:01.820
the test, can
retake the question,

00:10:01.820 --> 00:10:03.490
or could even have
seen the question

00:10:03.490 --> 00:10:05.060
in a different context.

00:10:05.060 --> 00:10:06.560
FELIPE HOFFA: So
you have a big data

00:10:06.560 --> 00:10:08.840
set of every time students
have answered the question?

00:10:08.840 --> 00:10:09.420
JACOB SCHAER: Correct.

00:10:09.420 --> 00:10:10.878
FELIPE HOFFA: And
with BigQuery you

00:10:10.878 --> 00:10:13.914
are filtering out only the first
time they saw that question?

00:10:13.914 --> 00:10:15.580
JACOB SCHAER: Where
possible, and that's

00:10:15.580 --> 00:10:17.560
where Pandas will come
to help clean this up.

00:10:17.560 --> 00:10:18.476
FELIPE HOFFA: Awesome.

00:10:18.476 --> 00:10:20.620
JACOB SCHAER: So
what we do is we

00:10:20.620 --> 00:10:22.520
select basically the
raw data we need,

00:10:22.520 --> 00:10:24.650
the student's anonymous
ID, the question's

00:10:24.650 --> 00:10:28.520
ID, if they got it right or
wrong, when it was created,

00:10:28.520 --> 00:10:30.760
and when they last
updated the score.

00:10:30.760 --> 00:10:34.430
This is coming from a
set of 14 questions that

00:10:34.430 --> 00:10:37.300
were part of an assessment
in one of our products--

00:10:37.300 --> 00:10:41.350
specifically, this was a
writing for seventh graders.

00:10:41.350 --> 00:10:45.110
And we're filtering on whether
it was the first time they'd

00:10:45.110 --> 00:10:48.140
seen it within that
assessment and if it

00:10:48.140 --> 00:10:51.917
had valid time stamps
and valid status.

00:10:51.917 --> 00:10:53.750
FELIPE HOFFA: So that
query runs in seconds.

00:10:53.750 --> 00:10:54.944
You get data into Pandas?

00:10:54.944 --> 00:10:55.860
JACOB SCHAER: Correct.

00:10:55.860 --> 00:11:00.030
So if we save this query in
here and we run it using Pandas,

00:11:00.030 --> 00:11:01.420
new read_gbq method.

00:11:03.280 --> 00:11:05.030
FELIPE HOFFA: Let's
see how long it takes.

00:11:05.030 --> 00:11:05.907
JACOB SCHAER: Yes.

00:11:05.907 --> 00:11:07.740
FELIPE HOFFA: Are you
connected to internet?

00:11:07.740 --> 00:11:08.490
JACOB SCHAER: Yes.

00:11:08.490 --> 00:11:10.060
FELIPE HOFFA: Awesome.

00:11:10.060 --> 00:11:11.810
JACOB SCHAER: So it
took around 10 seconds

00:11:11.810 --> 00:11:15.310
to run the entire query
against our data set.

00:11:15.310 --> 00:11:19.930
So we have the data, we still
have the issue of potentially

00:11:19.930 --> 00:11:22.487
retaking the entire
assessment to deal with,

00:11:22.487 --> 00:11:23.820
and we can do that using Pandas.

00:11:23.820 --> 00:11:26.290
So Pandas has a method,
drop duplicates,

00:11:26.290 --> 00:11:30.440
which keeps the first
occurrence of any pair or n

00:11:30.440 --> 00:11:32.267
number of columns.

00:11:32.267 --> 00:11:33.350
So we're going to do that.

00:11:33.350 --> 00:11:35.430
We want to take only
the first occurrence

00:11:35.430 --> 00:11:39.310
of any pair of student
IDs and item IDs.

00:11:39.310 --> 00:11:41.820
So we drop the
duplicates, and this

00:11:41.820 --> 00:11:44.032
is the subset of
what the data is.

00:11:44.032 --> 00:11:45.740
Where you can see we
have the student ID,

00:11:45.740 --> 00:11:47.406
the question they
took, and whether they

00:11:47.406 --> 00:11:49.670
got it right or wrong.

00:11:49.670 --> 00:11:51.080
Now we need to pivot the data.

00:11:51.080 --> 00:11:54.200
The goal is to have
it in a matrix format.

00:11:54.200 --> 00:11:56.610
So the goal is to have
it in a data structure

00:11:56.610 --> 00:11:58.880
where the student's
ID is on the rows,

00:11:58.880 --> 00:12:01.230
the columns are the question
ID, and whether they

00:12:01.230 --> 00:12:02.705
got it right or
wrong is the cells.

00:12:02.705 --> 00:12:03.538
FELIPE HOFFA: I see.

00:12:03.538 --> 00:12:05.480
And you are going to
do that with Pandas?

00:12:05.480 --> 00:12:06.030
JACOB SCHAER: Correct.

00:12:06.030 --> 00:12:07.613
There is a way to
do it with BigQuery,

00:12:07.613 --> 00:12:09.320
and that is in
the documentation,

00:12:09.320 --> 00:12:12.490
but we're going the
demo it with Pandas.

00:12:12.490 --> 00:12:14.416
So we can do that with
the pivot method that

00:12:14.416 --> 00:12:16.330
comes in Pandas on data frames.

00:12:16.330 --> 00:12:18.920
We specify the
index, the item ID,

00:12:18.920 --> 00:12:22.860
and the value we'd like
in the cells, we run that,

00:12:22.860 --> 00:12:26.130
and we take a preview at it.

00:12:26.130 --> 00:12:28.860
So we can see it's generally
in the form we want it now.

00:12:28.860 --> 00:12:31.830
As we described, we have
it students as rows,

00:12:31.830 --> 00:12:34.310
questions, et cetera, but
there's a problem still,

00:12:34.310 --> 00:12:36.030
we still have missing data.

00:12:36.030 --> 00:12:38.960
This make sense in this
context, because students

00:12:38.960 --> 00:12:40.624
didn't have to finish the tests.

00:12:40.624 --> 00:12:42.040
They could have
dropped out early,

00:12:42.040 --> 00:12:43.959
they could've had
a session problem.

00:12:43.959 --> 00:12:46.542
FELIPE HOFFA: So there are a lot
of blank spaces in the matrix

00:12:46.542 --> 00:12:47.120
right now.

00:12:47.120 --> 00:12:47.810
JACOB SCHAER: Right.

00:12:47.810 --> 00:12:48.950
FELIPE HOFFA: How do
you filter that out?

00:12:48.950 --> 00:12:50.510
JACOB SCHAER: Right,
so Pandas again

00:12:50.510 --> 00:12:55.070
has a drop N/A method, which
takes out any missing data.

00:12:55.070 --> 00:12:57.460
So we basically take
out any students

00:12:57.460 --> 00:12:58.920
that didn't complete the test.

00:12:58.920 --> 00:13:01.590
FELIPE HOFFA: Let's do that.

00:13:01.590 --> 00:13:04.140
JACOB SCHAER: And
as you can see,

00:13:04.140 --> 00:13:06.790
and all the rows with the
missing data are gone.

00:13:06.790 --> 00:13:09.000
FELIPE HOFFA: So now you
have your whole data set,

00:13:09.000 --> 00:13:10.510
you filtered it
out with BigQuery,

00:13:10.510 --> 00:13:13.760
now you've cleaned
it up with Pandas.

00:13:13.760 --> 00:13:15.570
Are you able to
tell me if it was

00:13:15.570 --> 00:13:17.629
a hard question or
an easy question?

00:13:17.629 --> 00:13:18.420
JACOB SCHAER: Sure.

00:13:18.420 --> 00:13:21.330
So for that, we're
going to turn to R.

00:13:21.330 --> 00:13:22.090
FELIPE HOFFA: R?

00:13:22.090 --> 00:13:25.940
JACOB SCHAER: Yes, new R. It has
a very handy method for this,

00:13:25.940 --> 00:13:28.860
the LTM package, for
doing item analysis.

00:13:28.860 --> 00:13:32.280
And with the help of the
Rpi 2 Python package,

00:13:32.280 --> 00:13:34.772
we can work directly with
R straight from Python.

00:13:34.772 --> 00:13:35.980
FELIPE HOFFA: That's so cool.

00:13:35.980 --> 00:13:38.595
So right now we are combining
BigQuery, Pandas, R.

00:13:38.595 --> 00:13:41.220
JACOB SCHAER: Right, and that's
sort of what Python's good for,

00:13:41.220 --> 00:13:42.740
is combining a lot of things.

00:13:42.740 --> 00:13:45.640
So what we're going to do is
we're going to import Rpi 2,

00:13:45.640 --> 00:13:47.890
and we're going to
load the LTM library.

00:13:47.890 --> 00:13:49.950
We're going to perform
the Rasch method that's

00:13:49.950 --> 00:13:53.690
contained within the library.

00:13:53.690 --> 00:13:55.300
FELIPE HOFFA: Let's
see what we get.

00:13:55.300 --> 00:13:57.750
JACOB SCHAER: So it's
loading the R library,

00:13:57.750 --> 00:14:00.200
and we've printed out a few
of the interesting statistics

00:14:00.200 --> 00:14:02.330
that it gives us, the
numerical statistics,

00:14:02.330 --> 00:14:04.560
such as the
frequency of students

00:14:04.560 --> 00:14:06.860
who got a certain number
of questions correct,

00:14:06.860 --> 00:14:10.500
the alpha values
for each question,

00:14:10.500 --> 00:14:13.200
and the various coefficients
associated with the assessment.

00:14:13.200 --> 00:14:15.355
FELIPE HOFFA: Can we get
a visualization of it?

00:14:15.355 --> 00:14:17.521
JACOB SCHAER: Right, so
another cool feature about R

00:14:17.521 --> 00:14:19.370
is it's really great
graphing functions,

00:14:19.370 --> 00:14:22.980
and we can take that
analysis and plot it

00:14:22.980 --> 00:14:25.760
very simply in the same way
using the plot methods built

00:14:25.760 --> 00:14:31.490
in, and we get a graph that
looks a little bit like this.

00:14:31.490 --> 00:14:34.060
FELIPE HOFFA: And what
does that graph mean?

00:14:34.060 --> 00:14:36.310
JACOB SCHAER: So this
graph is a comparison

00:14:36.310 --> 00:14:38.070
between the students'
ability levels

00:14:38.070 --> 00:14:41.480
and their probability of getting
a given question correct.

00:14:41.480 --> 00:14:43.620
As you can see, all 14
questions are represented

00:14:43.620 --> 00:14:47.600
by line on the graph, and the
key thing to look for here

00:14:47.600 --> 00:14:49.580
is the ability level.

00:14:49.580 --> 00:14:52.120
So a student with a zero
ability level, in this case,

00:14:52.120 --> 00:14:54.570
would be the average
student in the class.

00:14:54.570 --> 00:14:57.280
And for that, the
average student

00:14:57.280 --> 00:15:01.207
got at least every question
right with 80% probability.

00:15:01.207 --> 00:15:03.040
FELIPE HOFFA: That's
an amazing [INAUDIBLE],

00:15:03.040 --> 00:15:04.516
but I have a
question for Collin.

00:15:04.516 --> 00:15:05.230
COLLIN SELLMAN: Sure.

00:15:05.230 --> 00:15:06.688
FELIPE HOFFA: A
big question we all

00:15:06.688 --> 00:15:08.900
have in data science--
how do we transform

00:15:08.900 --> 00:15:11.305
these insights into action?

00:15:11.305 --> 00:15:13.430
COLLIN SELLMAN: Well, it's
an interesting question.

00:15:13.430 --> 00:15:16.710
I think that's really what makes
data science different maybe

00:15:16.710 --> 00:15:19.040
from analytics, is that
our goal in data science

00:15:19.040 --> 00:15:21.740
is to take an analysis and
build knowledge, and then

00:15:21.740 --> 00:15:22.980
do something with it.

00:15:22.980 --> 00:15:25.660
And so in this particular case,
when we wrote these items,

00:15:25.660 --> 00:15:29.300
we were trying to target a
range of different difficulties.

00:15:29.300 --> 00:15:32.190
So you think about a
practice test for students.

00:15:32.190 --> 00:15:34.940
You want some items that some
students are sort of earlier

00:15:34.940 --> 00:15:36.560
on in their
knowledge can answer,

00:15:36.560 --> 00:15:39.440
and some students
that are further along

00:15:39.440 --> 00:15:41.080
can answer these
more difficult items.

00:15:41.080 --> 00:15:43.900
So ideally, a practice
sort of product like this

00:15:43.900 --> 00:15:45.526
has some items that
are more difficult,

00:15:45.526 --> 00:15:47.233
some that are sort of
middle of the road,

00:15:47.233 --> 00:15:49.482
and some that are easier,
so that every student can

00:15:49.482 --> 00:15:50.690
see a little bit of progress.

00:15:50.690 --> 00:15:52.460
And so, specifically,
for something

00:15:52.460 --> 00:15:55.030
like this, what we've done
is worked with our curriculum

00:15:55.030 --> 00:15:58.760
teams, so the teams that are
actually writing these items,

00:15:58.760 --> 00:16:01.260
and trying to target
these difficulty levels,

00:16:01.260 --> 00:16:03.920
and we loop back with them
and say, here's what we see.

00:16:03.920 --> 00:16:07.220
So in this particular case, you
can see that all of the lines

00:16:07.220 --> 00:16:08.960
are sort of shifted to the left.

00:16:08.960 --> 00:16:11.090
We'd rather see a
distribution of those lines

00:16:11.090 --> 00:16:13.510
sort of going between
negative 2 and 2.

00:16:13.510 --> 00:16:15.260
And so we're feeding
that information back

00:16:15.260 --> 00:16:18.060
into the curriculum team
to say, OK, in this case,

00:16:18.060 --> 00:16:20.630
this is what we're actually
seen empirically with this data,

00:16:20.630 --> 00:16:22.922
and that's the specific
question that we answered,

00:16:22.922 --> 00:16:24.880
and that's how we sort
of improve our products.

00:16:24.880 --> 00:16:28.170
And you can imagine if we
didn't do that, we would have,

00:16:28.170 --> 00:16:30.780
in this case, a practice
exercise that students

00:16:30.780 --> 00:16:33.270
are going through that they
all find very, very easy.

00:16:33.270 --> 00:16:36.110
And it wouldn't be accomplishing
our goal, which is basically

00:16:36.110 --> 00:16:40.050
to make this practice product
to help them grow and mature

00:16:40.050 --> 00:16:41.690
in terms of, in this
particular case,

00:16:41.690 --> 00:16:44.050
I think looking at reading
for seventh graders.

00:16:44.050 --> 00:16:45.425
FELIPE HOFFA: OK,
that's awesome.

00:16:45.425 --> 00:16:47.630
So the curriculum team
is getting real feedback

00:16:47.630 --> 00:16:51.740
and real data, all thanks to
the analysis you are doing.

00:16:51.740 --> 00:16:52.850
That's amazing.

00:16:52.850 --> 00:16:55.100
JACOB SCHAER: Yeah, it was
really useful for the team.

00:16:55.100 --> 00:16:56.690
FELIPE HOFFA: Thank you, Jacob.

00:16:56.690 --> 00:16:58.270
Do we have another
demo coming up?

00:16:58.270 --> 00:16:58.660
JACOB SCHAER: Correct.

00:16:58.660 --> 00:17:00.410
So Sean is going
to come on and do

00:17:00.410 --> 00:17:02.560
a bit of an exploratory
demo for you.

00:17:02.560 --> 00:17:04.599
FELIPE HOFFA: OK, let's
have Sean here, then.

00:17:04.599 --> 00:17:06.945
Give me a minute, and
we'll be right back.

00:17:06.945 --> 00:17:11.789
And we are back with a second
demo, now with Sean Schaefer?

00:17:11.789 --> 00:17:13.339
SEAN SCHAEFER:
Yes, hello Felipe.

00:17:13.339 --> 00:17:14.619
FELIPE HOFFA: Hello,
thank you for being here.

00:17:14.619 --> 00:17:15.700
SEAN SCHAEFER: Hello,
thank you for having me.

00:17:15.700 --> 00:17:16.750
FELIPE HOFFA: Yes.

00:17:16.750 --> 00:17:18.359
What do you have
to show us today?

00:17:18.359 --> 00:17:19.775
SEAN SCHAEFER:
Right, so today I'm

00:17:19.775 --> 00:17:22.342
going to be going through a
bit of an exploratory analysis.

00:17:22.342 --> 00:17:23.800
FELIPE HOFFA:
Exploratory analysis?

00:17:23.800 --> 00:17:25.300
SEAN SCHAEFER:
Exploratory analysis.

00:17:25.300 --> 00:17:28.135
So before, Jacob showed more
of a confirmatory analysis,

00:17:28.135 --> 00:17:30.010
and that's where he had
a specific hypothesis

00:17:30.010 --> 00:17:32.417
that he wanted to see if
his data supported it.

00:17:32.417 --> 00:17:34.000
So what I'm going
to do is we're going

00:17:34.000 --> 00:17:35.750
to kind of look at the
data without having

00:17:35.750 --> 00:17:39.400
any prior assumptions, and
see what kind of conclusions

00:17:39.400 --> 00:17:42.720
we can come up with based on
visualization of the data,

00:17:42.720 --> 00:17:43.650
in this case.

00:17:43.650 --> 00:17:44.930
FELIPE HOFFA: And what's
the data we are looking at?

00:17:44.930 --> 00:17:46.429
SEAN SCHAEFER: So
this data is going

00:17:46.429 --> 00:17:50.310
to be student answers to
questions on assessments.

00:17:50.310 --> 00:17:52.410
So what we're
looking at initially

00:17:52.410 --> 00:17:54.820
is just the students
and the questions

00:17:54.820 --> 00:17:56.170
that they ended up taking.

00:17:56.170 --> 00:17:58.850
And so we're going to visualize
that and see what kind

00:17:58.850 --> 00:18:01.740
of relationships we can
see, but the key point here

00:18:01.740 --> 00:18:03.430
is that the students
were given choice

00:18:03.430 --> 00:18:06.190
in that which questions
they wanted to select.

00:18:06.190 --> 00:18:08.640
And so what we're really
trying to look for to see

00:18:08.640 --> 00:18:11.750
is there any trends or
any kind of relationships

00:18:11.750 --> 00:18:14.110
between the items that
the students selected,

00:18:14.110 --> 00:18:17.620
those questions that they
wished to take, and see maybe

00:18:17.620 --> 00:18:19.360
what we can take
away from there.

00:18:19.360 --> 00:18:20.860
FELIPE HOFFA: So
students today are

00:18:20.860 --> 00:18:22.625
able to choose which
questions to answer?

00:18:22.625 --> 00:18:24.500
SEAN SCHAEFER: These
are practice tests, yes.

00:18:24.500 --> 00:18:26.920
So they, in this specific
case for this product,

00:18:26.920 --> 00:18:29.020
they have the choice
of which questions they

00:18:29.020 --> 00:18:31.171
feel they would want
to practice the most.

00:18:31.171 --> 00:18:32.920
FELIPE HOFFA: Oh, let's
see what they did.

00:18:32.920 --> 00:18:33.670
SEAN SCHAEFER: OK.

00:18:33.670 --> 00:18:35.410
So what we're actually
going to use here

00:18:35.410 --> 00:18:37.930
is we already have our data
stored in Google BigQuery,

00:18:37.930 --> 00:18:39.950
so we're going to use
our GBQ module pull

00:18:39.950 --> 00:18:42.500
that data into a
Pandas data frame.

00:18:42.500 --> 00:18:46.490
And then we're also going to
utilize another Python library

00:18:46.490 --> 00:18:50.490
called Networks, which is going
to allow us to create a network

00:18:50.490 --> 00:18:53.550
data structure, which
is just essentially

00:18:53.550 --> 00:18:55.330
connections between objects.

00:18:55.330 --> 00:18:56.757
So I'll go ahead
and actually run

00:18:56.757 --> 00:18:58.590
the code that shows the
network, and then we

00:18:58.590 --> 00:19:00.010
can go in and have
a look and see

00:19:00.010 --> 00:19:01.200
what it actually looks like.

00:19:01.200 --> 00:19:02.254
FELIPE HOFFA: Let's
see how it works.

00:19:02.254 --> 00:19:03.004
SEAN SCHAEFER: OK.

00:19:06.520 --> 00:19:09.989
So right now, we have Google
BigQuery actually pulling

00:19:09.989 --> 00:19:11.780
the data, and we're
going to be able to see

00:19:11.780 --> 00:19:14.240
about how much time that takes
to pull into a Pandas data

00:19:14.240 --> 00:19:14.840
frame.

00:19:14.840 --> 00:19:17.550
Looks like it took us
about eight seconds.

00:19:17.550 --> 00:19:19.810
And now we're going to
have networks take our data

00:19:19.810 --> 00:19:21.974
and create a network
graph out of that.

00:19:26.180 --> 00:19:28.480
FELIPE HOFFA: So
what's happening now?

00:19:28.480 --> 00:19:30.700
SEAN SCHAEFER: So we are
still waiting on the network

00:19:30.700 --> 00:19:31.199
to come up.

00:19:31.199 --> 00:19:34.590
It actually is a little bit
of computationally expensive,

00:19:34.590 --> 00:19:37.134
but we'll be able to visualize
it in just a second here.

00:19:37.134 --> 00:19:39.800
FELIPE HOFFA: So you got all the
data from BigQuery filtered out

00:19:39.800 --> 00:19:43.002
and now you are processing
everything in your computer?

00:19:43.002 --> 00:19:43.960
SEAN SCHAEFER: Correct.

00:19:43.960 --> 00:19:45.700
FELIPE HOFFA: With network,
you are getting a--

00:19:45.700 --> 00:19:47.330
SEAN SCHAEFER: So now we
have a network graph here.

00:19:47.330 --> 00:19:47.730
FELIPE HOFFA: OK.

00:19:47.730 --> 00:19:49.355
SEAN SCHAEFER: And
so basically, you'll

00:19:49.355 --> 00:19:52.140
see that there are really three
main components to this graph.

00:19:52.140 --> 00:19:55.600
We have red circles,
we have blue circles,

00:19:55.600 --> 00:19:58.190
and then we seem to have these
black lines between them.

00:19:58.190 --> 00:20:00.970
So what the red circles
indicate are students,

00:20:00.970 --> 00:20:03.440
and then the blue circles are
the questions that they had

00:20:03.440 --> 00:20:06.370
taken , and the lines indicate
the connections between them,

00:20:06.370 --> 00:20:09.870
which means that a student chose
to take this specific question.

00:20:09.870 --> 00:20:12.929
FELIPE HOFFA: So here we can
see clusters of students.

00:20:12.929 --> 00:20:13.720
SEAN SCHAEFER: Yes.

00:20:13.720 --> 00:20:15.085
So if you're looking
at this, that's

00:20:15.085 --> 00:20:16.210
what stands out most to me.

00:20:16.210 --> 00:20:18.780
We have these certain
clusters, and right now we

00:20:18.780 --> 00:20:21.550
may not be entirely
sure what that means.

00:20:21.550 --> 00:20:25.870
It could be specific
subjects that those students

00:20:25.870 --> 00:20:27.300
are trying to study.

00:20:27.300 --> 00:20:29.830
What we'll probably want to
do is drill down a little bit

00:20:29.830 --> 00:20:33.770
further and see if we can
make any other meaningful

00:20:33.770 --> 00:20:36.130
conclusions based on
filtering with the data

00:20:36.130 --> 00:20:37.160
that we know we have.

00:20:37.160 --> 00:20:38.618
FELIPE HOFFA: So
you have a cluster

00:20:38.618 --> 00:20:41.675
of students that like
chemistry, some focus on maths--

00:20:41.675 --> 00:20:42.980
SEAN SCHAEFER: Possibly, yes.

00:20:42.980 --> 00:20:44.580
FELIPE HOFFA: How can
you go deeper into this?

00:20:44.580 --> 00:20:45.750
SEAN SCHAEFER:
Well, we know based

00:20:45.750 --> 00:20:47.920
on our data that we have other
things that we've collected.

00:20:47.920 --> 00:20:49.060
So another thing
that we've collected

00:20:49.060 --> 00:20:50.559
is the time that
it took the student

00:20:50.559 --> 00:20:52.300
to answer a specific question.

00:20:52.300 --> 00:20:54.170
And so we may want
to look and see

00:20:54.170 --> 00:20:56.180
how time is related
to these clusters

00:20:56.180 --> 00:20:58.480
and see if we still see
these kind of clusters

00:20:58.480 --> 00:21:01.768
if we filter out
for a specific time.

00:21:01.768 --> 00:21:03.684
FELIPE HOFFA: OK, let's
add another dimension.

00:21:03.684 --> 00:21:04.240
SEAN SCHAEFER: OK, excellent.

00:21:04.240 --> 00:21:05.280
FELIPE HOFFA: What do we find?

00:21:05.280 --> 00:21:07.571
SEAN SCHAEFER: So first thing
we're going to have to do

00:21:07.571 --> 00:21:09.310
is, since in our
initial query we only

00:21:09.310 --> 00:21:12.670
were looking at the student
IDs and the questions,

00:21:12.670 --> 00:21:14.996
we want to also poll
the time it took

00:21:14.996 --> 00:21:16.620
for them to answer
a specific question.

00:21:16.620 --> 00:21:19.665
So I'll go ahead and pull
that data from BigQuery

00:21:19.665 --> 00:21:21.230
into Pandas using
our GBQ module.

00:21:21.230 --> 00:21:23.730
COLLIN SELLMAN: And you asked
me about data science earlier,

00:21:23.730 --> 00:21:25.971
this is on the
exploratory side, I've

00:21:25.971 --> 00:21:27.470
found that it's
very much like this.

00:21:27.470 --> 00:21:30.362
So you start looking at the
data, you see something,

00:21:30.362 --> 00:21:32.320
and then it sort of raises
some other questions

00:21:32.320 --> 00:21:33.486
that you didn't have before.

00:21:33.486 --> 00:21:36.052
And so then you need to re-run
it, add another component

00:21:36.052 --> 00:21:37.760
or another feature so
you can look at it.

00:21:37.760 --> 00:21:40.230
And so this is where
that being able to do it

00:21:40.230 --> 00:21:43.034
very quickly in BigQuery
is a big improvement

00:21:43.034 --> 00:21:44.450
in my overall
workflow, especially

00:21:44.450 --> 00:21:46.351
dealing with large data sets.

00:21:46.351 --> 00:21:48.350
FELIPE HOFFA: You can fit
so many more questions

00:21:48.350 --> 00:21:49.055
in one hour.

00:21:49.055 --> 00:21:49.930
COLLIN SELLMAN: Yeah.

00:21:49.930 --> 00:21:51.340
SEAN SCHAEFER: Exactly.

00:21:51.340 --> 00:21:54.620
So it looks like we got our
data into our Pandas data frame,

00:21:54.620 --> 00:21:58.884
and let's first just have a look
at the distribution of the time

00:21:58.884 --> 00:22:00.300
that we have, so
that maybe we can

00:22:00.300 --> 00:22:03.610
see what a good filter would be
based on how long students are,

00:22:03.610 --> 00:22:05.720
on average, taking
for these questions.

00:22:05.720 --> 00:22:08.140
So one cool thing we can
do with a Pandas data frame

00:22:08.140 --> 00:22:09.970
is we can pull one
specific call amount

00:22:09.970 --> 00:22:11.970
and plot a histogram
of the values

00:22:11.970 --> 00:22:14.220
in that with a very
simple function call.

00:22:14.220 --> 00:22:17.070
And so I'll go ahead and
run the code that does that,

00:22:17.070 --> 00:22:21.190
and we'll see visually
the different counts

00:22:21.190 --> 00:22:24.330
of our distribution of values.

00:22:24.330 --> 00:22:26.960
So it looks here like
we have the majority

00:22:26.960 --> 00:22:29.780
of the students answering
in under 20 seconds or so.

00:22:29.780 --> 00:22:31.100
But we have--

00:22:31.100 --> 00:22:31.610
FELIPE HOFFA: Those
are fast students.

00:22:31.610 --> 00:22:32.900
SEAN SCHAEFER:
Yeah, so 20 seconds,

00:22:32.900 --> 00:22:35.170
you could think maybe an
average amount for a question,

00:22:35.170 --> 00:22:36.586
but it actually
looks like we have

00:22:36.586 --> 00:22:39.470
a lot of students that are
taking them very quickly.

00:22:39.470 --> 00:22:41.190
So in this first
bin, we have students

00:22:41.190 --> 00:22:43.260
that are taking
about five seconds.

00:22:43.260 --> 00:22:45.090
So that's something
that we might

00:22:45.090 --> 00:22:47.131
want to investigate further,
because five seconds

00:22:47.131 --> 00:22:49.390
is actually very quick to
answer a specific question.

00:22:49.390 --> 00:22:49.990
COLLIN SELLMAN:
Especially the first time

00:22:49.990 --> 00:22:50.820
you've seen it, right.

00:22:50.820 --> 00:22:50.930
SEAN SCHAEFER: Exactly.

00:22:50.930 --> 00:22:52.345
COLLIN SELLMAN: So you take
some time for the question

00:22:52.345 --> 00:22:54.011
to come up, for you
to read it, and then

00:22:54.011 --> 00:22:55.499
come up with a response.

00:22:55.499 --> 00:22:57.290
SEAN SCHAEFER: Right,
so what we can do now

00:22:57.290 --> 00:23:01.620
is plot our network once
again, and this time we'll

00:23:01.620 --> 00:23:03.537
try and look at what's
going on in those cases

00:23:03.537 --> 00:23:05.620
where the students are
taking five seconds or less

00:23:05.620 --> 00:23:06.579
to answer the question.

00:23:06.579 --> 00:23:08.328
FELIPE HOFFA: The
special kind of student.

00:23:08.328 --> 00:23:09.130
SEAN SCHAEFER: Yes.

00:23:09.130 --> 00:23:09.629
Maybe.

00:23:09.629 --> 00:23:12.040
We aren't quite sure what's
going on yet at this point.

00:23:12.040 --> 00:23:15.400
So we can go ahead and
run that query again,

00:23:15.400 --> 00:23:19.610
and this time we will add
the filter for five seconds

00:23:19.610 --> 00:23:23.500
or less, and we'll build out
our network graph once again.

00:23:23.500 --> 00:23:24.977
FELIPE HOFFA: I
love network graph.

00:23:24.977 --> 00:23:26.560
Even if I don't
really understand what

00:23:26.560 --> 00:23:27.680
this one is doing.

00:23:27.680 --> 00:23:29.180
SEAN SCHAEFER: It's
an excellent way

00:23:29.180 --> 00:23:31.845
to visualize the relationships
between two specific components

00:23:31.845 --> 00:23:33.005
that you have, yes.

00:23:33.005 --> 00:23:34.800
Especially if you're
not quite sure what

00:23:34.800 --> 00:23:36.842
those relationships
might be yet.

00:23:36.842 --> 00:23:38.300
FELIPE HOFFA: And
once you discover

00:23:38.300 --> 00:23:41.840
what's happening behind-- how do
you turn this into actionable?

00:23:41.840 --> 00:23:44.290
COLLIN SELLMAN: Well, I think
in this particular case,

00:23:44.290 --> 00:23:47.910
we're looking at-- I think as
we look at the visualization,

00:23:47.910 --> 00:23:49.410
one of things that
we're focused on

00:23:49.410 --> 00:23:51.770
is how to make our
programs more effective.

00:23:51.770 --> 00:23:54.920
And so when we're looking at
this particular case of looking

00:23:54.920 --> 00:23:57.240
at students that took
less than five seconds,

00:23:57.240 --> 00:23:58.920
it could be that
they're guessing.

00:23:58.920 --> 00:24:02.010
And so the interesting thing
that networks does in addition

00:24:02.010 --> 00:24:05.130
to sort of visualizing it
is think about it like sort

00:24:05.130 --> 00:24:07.870
of a dictionary or like
a JSON format, where

00:24:07.870 --> 00:24:10.977
you can take basically students
and questions are nodes,

00:24:10.977 --> 00:24:12.560
and then there's an
edge between them.

00:24:12.560 --> 00:24:14.950
So if the student has
taken this question,

00:24:14.950 --> 00:24:17.190
there's an edge, we can
add things of that edge,

00:24:17.190 --> 00:24:19.840
for example-- did they get it
right, did they get it wrong?

00:24:19.840 --> 00:24:22.750
And so if we wanted to look
at the network of students

00:24:22.750 --> 00:24:26.450
and items that were taken in
less than five seconds, what

00:24:26.450 --> 00:24:28.520
was the proportion that
were correct in that

00:24:28.520 --> 00:24:31.040
versus maybe the
students and items that

00:24:31.040 --> 00:24:33.190
were taken five to 10 seconds.

00:24:33.190 --> 00:24:35.210
So you could imagine
that we can think

00:24:35.210 --> 00:24:36.800
about how students
are taking it,

00:24:36.800 --> 00:24:40.080
and potentially we could make
our products identify perhaps

00:24:40.080 --> 00:24:43.220
when students are guessing,
or maybe change the UI

00:24:43.220 --> 00:24:44.992
to talk to students
about, hey, maybe

00:24:44.992 --> 00:24:46.950
you should spend a little
bit more time looking

00:24:46.950 --> 00:24:49.366
at this question, because
you're more likely to get right.

00:24:49.366 --> 00:24:50.741
But the network's
sort of concept

00:24:50.741 --> 00:24:52.157
is really interesting,
because you

00:24:52.157 --> 00:24:54.533
can add whatever sorts of
attributes that you would like.

00:24:54.533 --> 00:24:56.657
So you could add things
like did they get it right,

00:24:56.657 --> 00:24:58.290
did they get wrong,
what was the order

00:24:58.290 --> 00:24:59.581
that they took those questions?

00:24:59.581 --> 00:25:02.700
So again, in this case,
students are allowed choice,

00:25:02.700 --> 00:25:06.330
so do they start with the
harder problems in the algebra

00:25:06.330 --> 00:25:09.380
section, or do they start with
sort of the more basic skills?

00:25:09.380 --> 00:25:12.230
Because our program is sort of
designed around that, and so

00:25:12.230 --> 00:25:14.090
we can visualize all
those different things.

00:25:14.090 --> 00:25:15.680
In this particular
case, there's not

00:25:15.680 --> 00:25:17.620
a specific answer
we're coming up with,

00:25:17.620 --> 00:25:20.925
but we're really exploring,
and as we actually did this

00:25:20.925 --> 00:25:24.200
this past summer, we found some
very interesting things that

00:25:24.200 --> 00:25:27.000
definitely informed the
design of our products

00:25:27.000 --> 00:25:29.180
in terms of how we
presented questions

00:25:29.180 --> 00:25:31.900
and how we sort of
gauge students feedback

00:25:31.900 --> 00:25:34.170
when they got questions
right and wrong.

00:25:34.170 --> 00:25:35.378
FELIPE HOFFA: That's so cool.

00:25:35.378 --> 00:25:38.260
I'm so excited about this, how
you are collecting data, that's

00:25:38.260 --> 00:25:43.770
a completely new
face for education.

00:25:43.770 --> 00:25:45.330
You are not having
[INAUDIBLE] books

00:25:45.330 --> 00:25:47.720
or having interactive data.

00:25:47.720 --> 00:25:49.630
I know you would be
able to collect data

00:25:49.630 --> 00:25:51.200
with Google Analytics soon.

00:25:51.200 --> 00:25:52.360
COLLIN SELLMAN: That
is one of the things

00:25:52.360 --> 00:25:53.430
that we're also looking at.

00:25:53.430 --> 00:25:55.555
So we use Google Analytics
quite a bit differently,

00:25:55.555 --> 00:25:58.530
because we don't use it for
marketing or sales conversions,

00:25:58.530 --> 00:26:02.740
but we use it in some cases to
track usage of our products.

00:26:02.740 --> 00:26:05.760
And previous to having
things like Google Analytics,

00:26:05.760 --> 00:26:07.370
we might have done
a field study where

00:26:07.370 --> 00:26:09.990
we partner with the school
and we have researchers

00:26:09.990 --> 00:26:11.960
in the field, in the
school, observing

00:26:11.960 --> 00:26:13.970
how teachers and
students use that.

00:26:13.970 --> 00:26:15.890
And so we continue to
do that, but imagine

00:26:15.890 --> 00:26:19.470
taking Google Analytics usage
data for those same products

00:26:19.470 --> 00:26:22.000
and overlaying it on top
of that research method.

00:26:22.000 --> 00:26:23.910
So now we have a
multi-method design,

00:26:23.910 --> 00:26:27.030
where we're both doing sort
of interviews, observations,

00:26:27.030 --> 00:26:30.240
but we can look at objective
data trends for usage

00:26:30.240 --> 00:26:33.160
across the entire time that
we're doing that field studies.

00:26:33.160 --> 00:26:35.885
And so that's a very exciting
thing for us, not only

00:26:35.885 --> 00:26:37.830
at Pearson, but I think
in education overall.

00:26:37.830 --> 00:26:39.486
There's all these
new types of data

00:26:39.486 --> 00:26:40.860
that we've never
had in the past,

00:26:40.860 --> 00:26:45.050
and you can imagine what happens
to usage of a particular,

00:26:45.050 --> 00:26:48.190
let's say product or asset
or interactive thing,

00:26:48.190 --> 00:26:50.561
across an entire semester
of a school year, right?

00:26:50.561 --> 00:26:52.060
It's very difficult
to get that when

00:26:52.060 --> 00:26:54.670
you're observing for a week,
but if we can collect that data

00:26:54.670 --> 00:26:56.980
across a whole semester,
across a whole year,

00:26:56.980 --> 00:26:59.757
it gives us insights again
to improve our products,

00:26:59.757 --> 00:27:02.340
to make them more effective, and
make them better for students

00:27:02.340 --> 00:27:03.530
and better for teachers.

00:27:03.530 --> 00:27:04.738
FELIPE HOFFA: That's awesome.

00:27:04.738 --> 00:27:07.974
I'm so happy that you're
sharing your methods with us,

00:27:07.974 --> 00:27:12.500
that Pandas now has
a BigQuery connector.

00:27:12.500 --> 00:27:15.190
I know you're just
getting started with it.

00:27:15.190 --> 00:27:17.850
The community will
grow around it.

00:27:17.850 --> 00:27:20.361
You will stay part of
the Pandas community?

00:27:20.361 --> 00:27:22.110
SEAN SCHAEFER: Yes,
we definitely will be.

00:27:22.110 --> 00:27:23.484
COLLIN SELLMAN:
Yeah, we hope so.

00:27:23.484 --> 00:27:25.560
And for those that maybe
haven't heard of Pandas,

00:27:25.560 --> 00:27:28.976
there's a great book called
"Python for Data and Analytics"

00:27:28.976 --> 00:27:31.350
that West McKinney, who was
one of the major contributors

00:27:31.350 --> 00:27:33.940
to Pandas, has written,
and I really recommend it.

00:27:33.940 --> 00:27:35.899
It's a really great,
accessible book

00:27:35.899 --> 00:27:37.190
to get you started with Pandas.

00:27:37.190 --> 00:27:39.467
It doesn't have the
read_gbq method yet,

00:27:39.467 --> 00:27:41.300
but you can learn about
that on the website.

00:27:41.300 --> 00:27:44.060
But it really gives you a lot of
the great things the Pandas can

00:27:44.060 --> 00:27:46.650
do with time series data, a
lot of really powerful things

00:27:46.650 --> 00:27:49.220
there, and all the
different types of ways

00:27:49.220 --> 00:27:51.820
that you can analyze data
using Python and Pandas.

00:27:51.820 --> 00:27:53.028
FELIPE HOFFA: That's awesome.

00:27:53.028 --> 00:27:54.810
Thank you for coming today.

00:27:54.810 --> 00:27:58.560
Thank you Jacob, thank you
Sean, thank you Collin.

00:27:58.560 --> 00:28:00.040
I hope to stay working with you.

00:28:00.040 --> 00:28:01.790
COLLIN SELLMAN: Likewise,
it's been great.

00:28:01.790 --> 00:28:03.080
Thanks for having us.

00:28:03.080 --> 00:28:05.550
FELIPE HOFFA: Thank you
everybody for tuning in.

00:28:05.550 --> 00:28:08.600
Try BigQuery out, try
these methods out.

00:28:08.600 --> 00:28:10.390
There are really some
amazing questions

00:28:10.390 --> 00:28:14.240
that no one has asked before
and you are able to ask now.

00:28:14.240 --> 00:28:16.290
Until the next time.

