WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:04.290
&gt;&gt;Matt Mastracci: Hi everyone.
My name is Matt Mastracci.

00:00:04.290 --> 00:00:10.630
You're in GWT Linkers.
I am the CTO of Dotspots.

00:00:10.630 --> 00:00:18.350
We are a company that uses GWT extensively.
Our product involves a Chrome extension, a

00:00:18.350 --> 00:00:23.080
Firefox extension.
We have a website.

00:00:23.080 --> 00:00:29.039
All of these things are built using GWT.
And because all of these forms are so different

00:00:29.039 --> 00:00:36.640
from each other, we actually make heavy use
of a GWT feature called Linkers.

00:00:36.640 --> 00:00:40.870
Okay. So I don't know what the state of the
wireless is right now.

00:00:40.870 --> 00:00:46.870
It's been going up and down.
If – is everyone here on wireless?

00:00:46.870 --> 00:00:52.129
Do you have access to the Wave?
I'll be taking questions at the mic or on

00:00:52.129 --> 00:00:54.989
Wave.
We'll just – we'll see if the network stays

00:00:54.989 --> 00:00:57.899
up.
If not, I'll just – I'll take them at the

00:00:57.899 --> 00:01:06.359
mic at the end of the presentation.
I/O 2010 dash GWT 4.

00:01:06.359 --> 00:01:07.359
Okay.

00:01:07.359 --> 00:01:12.649
So let's go over the agenda.
I'm going to start off the talk just briefly

00:01:12.649 --> 00:01:17.929
recapping how GWT loads code.
You might have seen this in Joel's talk earlier

00:01:17.929 --> 00:01:21.020
today.
They had a similar diagram.

00:01:21.020 --> 00:01:24.509
But just in case you haven't been there, we'll
go over it again.

00:01:24.509 --> 00:01:31.209
We'll move in to what Linkers are.
We'll talk about artifacts and how artifacts

00:01:31.209 --> 00:01:36.349
propagate through Linker chains.
We'll move on to the SelectionScriptLinker

00:01:36.349 --> 00:01:41.799
and I'll talk about the Web Worker Linker
from speed tracer.

00:01:41.799 --> 00:01:45.669
We're gonna go through a demo where we'll
actually build a linker here.

00:01:45.669 --> 00:01:51.171
And depending on how we are doing for time
at the end of the presentation, I'll go over

00:01:51.171 --> 00:01:58.270
some advanced linking concepts, developer
guided code splitting, development mode, some

00:01:58.270 --> 00:02:02.340
upcoming features you might want to be aware
of.

00:02:02.340 --> 00:02:07.509
Okay.
So we're just going to start off talking about

00:02:07.509 --> 00:02:12.760
how GWT loads code.
I mentioned before – you may have seen this

00:02:12.760 --> 00:02:19.979
in, in Joel's presentation here.
The first step of GWT's code loading process

00:02:19.979 --> 00:02:24.519
 – we load the host page.
This is the host – the host page is the

00:02:24.519 --> 00:02:30.219
page specified in the URL.
It's just a regular HTML file, possibly generated

00:02:30.219 --> 00:02:34.569
by your server.
It has a reference to something called the

00:02:34.569 --> 00:02:38.100
selection script.
The selection script is a bit of Java script

00:02:38.100 --> 00:02:42.890
responsible for determining the current environment
of your GWT applications.

00:02:42.890 --> 00:02:47.510
So this is the current browser you're running
in.

00:02:47.510 --> 00:02:53.040
This is the – if you're using internationalization
 -- which language you're running in.

00:02:53.040 --> 00:02:58.579
Possibly any of your personally defined properties
that you might want to switch.

00:02:58.579 --> 00:03:05.489
So it determines which permutation of these
properties is running and then it loads the

00:03:05.489 --> 00:03:09.920
permutation script.
The permutation script basically contains

00:03:09.920 --> 00:03:16.319
all the information required to start your
GWT, your GWT module, start its entry point.

00:03:16.319 --> 00:03:19.040
And once this finishes loading, your module
is up and running.

00:03:19.040 --> 00:03:25.639
GWT 2.0 introduced something new, though.
I'll talk about this a bit later and how this

00:03:25.639 --> 00:03:31.849
relates to Linkers but basically you can add
these RunAsync statements in your GWT code

00:03:31.849 --> 00:03:36.859
 – you can sprinkle them.
And this will tell your compiler you want,

00:03:36.859 --> 00:03:41.560
you want to load the code later on rather
than right away.

00:03:41.560 --> 00:03:46.800
If you are running certain kinds of Linkers,
you'll have to be aware of how this code gets

00:03:46.800 --> 00:03:50.280
generated so you'll have to put some support
into your Linker to actually make these things

00:03:50.280 --> 00:03:55.579
work.
We'll get into that kind of later on in the

00:03:55.579 --> 00:03:56.840
talk.
Okay.

00:03:56.840 --> 00:04:04.330
So what exactly is a Linker?
The – everybody's deployment story is different.

00:04:04.330 --> 00:04:12.420
Just – we have a certain form of web application
at Dotspots.

00:04:12.420 --> 00:04:18.959
We use a CDN, we use Amazon CloudFront for
storing all of our static files including

00:04:18.959 --> 00:04:24.400
the files we generate in GWT.
So we have a certain layout that we have to

00:04:24.400 --> 00:04:28.020
maintain before we do our, before we actually
push out our deployment.

00:04:28.020 --> 00:04:32.360
And every one of you here is probably going
to have subtly different requirements in your

00:04:32.360 --> 00:04:34.930
deployment.
I mean, they're all going to be very close

00:04:34.930 --> 00:04:39.380
to one theme – the standard web application
theme.

00:04:39.380 --> 00:04:43.780
But there's going to be subtle differences
everywhere.

00:04:43.780 --> 00:04:48.699
You may also have subtle differences in how
you bootstrap your GWT application.

00:04:48.699 --> 00:04:55.720
You may, you might want to generate certain
 – basically put in certain values into

00:04:55.720 --> 00:05:00.590
your Java script global environment.
You might want to pre-generate some data in

00:05:00.590 --> 00:05:05.300
just a little blob.
There's tons of little tweaks you might want

00:05:05.300 --> 00:05:10.150
to have on your environment.
Now the GWT team, when they, they came up

00:05:10.150 --> 00:05:15.900
with the idea of this Linker stack at the
end of the compile, instead of saying, 'Okay.

00:05:15.900 --> 00:05:23.330
Let's try to write a bunch of Linkers that
support every one of these use cases out there."

00:05:23.330 --> 00:05:28.410
Instead, what they did is they took a step
back; they said, 'Okay. What are the most

00:05:28.410 --> 00:05:33.530
common ways you're gonna want to deploy a
web application and let's support these out

00:05:33.530 --> 00:05:43.770
of the box. But then let's build a big pluggable
stack that anybody can extend, replace, augment."

00:05:43.770 --> 00:05:47.229
Basically, it's something that you can plug
into to customize it, to make it actually

00:05:47.229 --> 00:05:52.240
do what you want, something where it doesn't
take a lot of work to do.

00:05:52.240 --> 00:05:56.919
So the idea behind the GWT Linker stack is
that it makes GWT really flexible.

00:05:56.919 --> 00:06:03.530
So you can now take something that's a Java
to Java script compiler, like the GWT compiler

00:06:03.530 --> 00:06:08.810
parts, and then you can take that output Java
script and you can put it wherever you want.

00:06:08.810 --> 00:06:15.150
In our case, we take a GWT module; we turn
it into a Firefox extension.

00:06:15.150 --> 00:06:17.741
We take a GWT module; we turn it into a Chrome
extension.

00:06:17.741 --> 00:06:21.800
We generate our website from another module

00:06:21.800 --> 00:06:27.240
We've even got a module that publishers can
just include on their site with just a little

00:06:27.240 --> 00:06:28.240
script tag.

00:06:28.240 --> 00:06:35.310
So all of these things are generated from
GWT and what we do is we use Linkers to basically

00:06:35.310 --> 00:06:38.659
shape how this output looks on disk.

00:06:38.659 --> 00:06:44.990
So one thing to note about Linkers is that
every piece of information that ends up on

00:06:44.990 --> 00:06:51.770
disk goes through the Linker stack so ultimately
you have full control over what's on disk

00:06:51.770 --> 00:06:52.770
at the end of the compile.

00:06:52.770 --> 00:07:00.860
Nothing is written that you don't have the
ability to tweak or change or throw away of

00:07:00.860 --> 00:07:04.120
you wanted to.

00:07:04.120 --> 00:07:07.180
Linkers give you full control.

00:07:07.180 --> 00:07:13.960
So I'm just going to quickly talk about the
built-in Linkers of GWT because these are

00:07:13.960 --> 00:07:16.510
the things that ship with GWT right away.

00:07:16.510 --> 00:07:21.340
You can use these to customize your deployment
story to a small degree.

00:07:21.340 --> 00:07:27.500
So the Iframe linker – if you don't do anything
in your module configuration file, this is

00:07:27.500 --> 00:07:29.300
the Linker that you'll get.

00:07:29.300 --> 00:07:35.240
What this does is that it generates dot-cache-dot-html
files that are loaded from the same domain

00:07:35.240 --> 00:07:37.300
as your host page.

00:07:37.300 --> 00:07:44.389
Because they live in Iframes – because of
the browser same origin policy – you can't

00:07:44.389 --> 00:07:46.620
actually serve these from another domain.

00:07:46.620 --> 00:07:50.069
They have to be served from the same domain
as the host page.

00:07:50.069 --> 00:07:56.080
So for deployments that require loading scripts
from another place, there's the XS Linker

00:07:56.080 --> 00:08:01.200
or the Cross Site Linker.
This generates dot-cache-dot-js files which

00:08:01.200 --> 00:08:05.790
are loaded using script tags and because they
use script tags, they're not subject to the

00:08:05.790 --> 00:08:10.600
same origin policy and now you can load your
scripts from another domain – say a content

00:08:10.600 --> 00:08:19.350
distribution network or you can turn your
GWT application into a gadget in some places.

00:08:19.350 --> 00:08:24.979
Finally the last, the last Linker that ships
with GWT here is the SingleScriptLinker.

00:08:24.979 --> 00:08:32.550
SingleScriptLinker is a special linker that
basically in-lines one permutation that's

00:08:32.550 --> 00:08:38.760
output from the compiler into your selection
script and this, this linker is useful in

00:08:38.760 --> 00:08:45.460
a small number of cases where you might be
writing a library that only has one permutation.

00:08:45.460 --> 00:08:47.570
You're not really interacting with the browser
dom.

00:08:47.570 --> 00:08:54.340
You're just writing something that the CPU
 – basically just does some processing.

00:08:54.340 --> 00:08:58.570
In this case, the linker will actually fail
if you actually try to pass more than one

00:08:58.570 --> 00:08:59.810
permutation to it.

00:08:59.810 --> 00:09:06.510
The important thing to remember here is that
each one of these Linkers uses the same linker

00:09:06.510 --> 00:09:10.010
stack that you have access to when you are
writing your application.

00:09:10.010 --> 00:09:15.540
So if you wanted, you could duplicate the
functionality of these, these Linkers exactly

00:09:15.540 --> 00:09:21.640
without having to use any special GWT API's
or special knowledge of how GWT works.

00:09:21.640 --> 00:09:30.760
Basically this is, these are just some pre-,
pre-compiled recipes for you that you can

00:09:30.760 --> 00:09:33.220
use if you want to.

00:09:33.220 --> 00:09:36.830
Okay, so I'm just going to briefly talk about
switching linkers.

00:09:36.830 --> 00:09:42.030
If you've ever changed from the Iframe linker
to the CrossSite linker, you'll know what

00:09:42.030 --> 00:09:43.030
I'm talking about here.

00:09:43.030 --> 00:09:44.650
Just quickly talk about it.

00:09:44.650 --> 00:09:48.970
The add-linker declaration in your module
XML file is used for this.

00:09:48.970 --> 00:09:55.920
I've got a small example here where I've taken
the default GWT web application.

00:09:55.920 --> 00:09:57.640
I've compiled it.

00:09:57.640 --> 00:10:02.311
As I mentioned before, I'm not actually specifying
a linker so by default, I get the Iframe linker.

00:10:02.311 --> 00:10:07.830
I put in an 'Add-Linker' declaration and now
I get dot-cache-dot-js files.

00:10:07.830 --> 00:10:13.630
And what you'll notice is that I'm not actually
getting dot-cache-dot-html files any more.

00:10:13.630 --> 00:10:19.240
And the reason is that both XSLlinker and
Iframe linker are primary linkers.

00:10:19.240 --> 00:10:24.200
And I'm going to talk a bit more about primary
linkers later and exactly what they are but

00:10:24.200 --> 00:10:29.810
there can only be one because they, these
types of linkers control the shape of your

00:10:29.810 --> 00:10:38.790
Java script so much that only one can actually
run at any time –it doesn't really make

00:10:38.790 --> 00:10:44.500
sense because you're either generating a Firefox
XPI or a Chrome extension – you're not generating

00:10:44.500 --> 00:10:47.660
both at the same time.

00:10:47.660 --> 00:10:48.660
Okay.

00:10:48.660 --> 00:10:54.940
I'm going to move on to artifacts here which
are kind of like a fundamental part of Linkers

00:10:54.940 --> 00:10:56.200
and how they work.

00:10:56.200 --> 00:11:02.820
So if you, if you're writing GWT code, you
might wonder why you really need to move into

00:11:02.820 --> 00:11:07.070
writing Linkers to get your output finalized.

00:11:07.070 --> 00:11:13.500
You might be familiar with Ant or Bash, Python,
whatever – all these scripting languages

00:11:13.500 --> 00:11:20.760
which you normally use to manipulate files,
to aggregate them, zip them up, et cetera.

00:11:20.760 --> 00:11:27.870
The reason you don't want to use Ant to finish
up your deployment is that all of the metadata

00:11:27.870 --> 00:11:31.880
about the compile is thrown away at the end
of the compile.

00:11:31.880 --> 00:11:36.790
What happens at the end of the compile is
you end up with some raw Java script on disk

00:11:36.790 --> 00:11:43.290
and there's no information about where that
Java script came from.

00:11:43.290 --> 00:11:47.620
The – you have a hard time telling the Java
script that's compiled for Internet Explorer

00:11:47.620 --> 00:11:51.380
from the Java script that's compiled for Firefox.

00:11:51.380 --> 00:11:55.880
It's – basically, they just look like Java
script files to you.

00:11:55.880 --> 00:12:00.510
You really – you don't have access to all
the rich information that's available in the

00:12:00.510 --> 00:12:05.250
compiler after everything's been written to
disk.

00:12:05.250 --> 00:12:08.010
An artifact is the answer here.

00:12:08.010 --> 00:12:14.830
So an artifact comes from the compile process
but it also contains information about where

00:12:14.830 --> 00:12:16.190
it came from.

00:12:16.190 --> 00:12:24.000
So basically, an artifact says, 'Okay. I was
compiled for Internet Explorer. I was compiled

00:12:24.000 --> 00:12:31.610
for Firefox. I contain the English language
version of the application or the French language'

00:12:31.610 --> 00:12:34.660
or other properties.

00:12:34.660 --> 00:12:38.930
Artifacts also – depending on the type of
artifact – may contain other information

00:12:38.930 --> 00:12:42.950
about which Linker they came from -- any special
information there.

00:12:42.950 --> 00:12:51.310
So really an artifact is just a piece of information
passed through the GWT compile process and

00:12:51.310 --> 00:12:56.130
then through the linker chain and then finally,
potentially written to disk.

00:12:56.130 --> 00:13:03.340
And artifacts are really just Java objects
 – the name 'artifact' of course just comes

00:13:03.340 --> 00:13:07.121
from the base class that all these artifacts
implement.

00:13:07.121 --> 00:13:10.140
Artifacts in your compile – they come from
a number of places.

00:13:10.140 --> 00:13:17.521
So your module XML – if you specify script
or style references – those become artifacts

00:13:17.521 --> 00:13:18.521
in the compile.

00:13:18.521 --> 00:13:25.600
If you use the public path for a module, files
in the module's public path become artifacts.

00:13:25.600 --> 00:13:30.160
The compiler generates artifacts after the
compile is done – they're called compilation

00:13:30.160 --> 00:13:31.320
results.

00:13:31.320 --> 00:13:36.410
The generators that run during the compile
have the opportunity to emit artifacts.

00:13:36.410 --> 00:13:42.660
An example of course is the image bundle stuff
that's – you might be using right now.

00:13:42.660 --> 00:13:49.120
Those – the generator for the image bundler
emits the PNG files – the bundled PNG files

00:13:49.120 --> 00:13:56.680
at the end of the generator run and those
are later found in the application's output.

00:13:56.680 --> 00:14:03.450
And another cool thing about generators and
 – sorry – artifacts – is that once

00:14:03.450 --> 00:14:09.030
you get into writing really advanced linkers
and generators, you can actually start using

00:14:09.030 --> 00:14:16.760
artifacts as a way to pass messages from your
generator to your linker because every, every

00:14:16.760 --> 00:14:21.571
artifact that your generator creates is passed
down from the compiler through the linker

00:14:21.571 --> 00:14:24.380
chain and every linker has a chance to look
at it.

00:14:24.380 --> 00:14:30.500
So you can, you can basically create some
information at compile time that uses the

00:14:30.500 --> 00:14:34.890
rich type information of the compiler and
then have access to that after the compile

00:14:34.890 --> 00:14:38.400
is completed and all that type information
is thrown away – you may still have information

00:14:38.400 --> 00:14:41.450
that you may wanna take a look at.

00:14:41.450 --> 00:14:47.910
We'll talk a bit about this later – an example
of where this is actually used.

00:14:47.910 --> 00:14:52.050
The important thing to note about artifacts
is that they travel around in something called

00:14:52.050 --> 00:14:57.630
an ArtifactSet and this isn't anything really
fancy – it's just basically a Java sorted

00:14:57.630 --> 00:15:02.200
set that contains artifacts.

00:15:02.200 --> 00:15:07.490
The ArtifactSet though has an interesting
set of methods which make it type aware.

00:15:07.490 --> 00:15:14.320
You can ask an ArtifactSet to give you all
the artifacts of a given type so you may have

00:15:14.320 --> 00:15:18.660
a certain subclass of artifact that you put
in there – you can ask for all artifacts

00:15:18.660 --> 00:15:21.110
of that type and all their subclasses.

00:15:21.110 --> 00:15:25.070
You can use the ArtifactSet as just a bag
of information that you can query at all these

00:15:25.070 --> 00:15:29.240
different points in the compile process or
you may be able to ask for types that GWT

00:15:29.240 --> 00:15:31.530
itself has – types of artifacts that GWT
itself has put in there.

00:15:31.530 --> 00:15:44.660
So of course, the big example of using this
type where property of ArtifactSets – every

00:15:44.660 --> 00:15:51.510
piece of information that ends up on disk
as part of your compile comes from an artifact

00:15:51.510 --> 00:15:54.250
that is a subclass of EmittedArtifact.

00:15:54.250 --> 00:16:01.240
This is a special base class for an artifact
that just tells GWT that this file is going

00:16:01.240 --> 00:16:07.370
to end up on disk and any artifact that isn't
a subclass of this special class is just thrown

00:16:07.370 --> 00:16:09.090
away at the end of the compile.

00:16:09.090 --> 00:16:13.100
It just kind of disappears, gets garbage collected,
et cetera.

00:16:13.100 --> 00:16:19.000
You have to remember if you want it to end
up on disk, create, create a subclass of EmittedArtifact

00:16:19.000 --> 00:16:24.980
and your file will then end up at disk, on
disk at the end of the compile process.

00:16:24.980 --> 00:16:30.660
An important thing of course to note is that
even if you might not be a subclass of EmittedArtifact,

00:16:30.660 --> 00:16:35.440
you can still actually access all these artifacts
all throughout the chain – they're still

00:16:35.440 --> 00:16:38.610
available.

00:16:38.610 --> 00:16:43.230
You only have to be a subclass of EmittedArtifact
if you want to retain this artifact after

00:16:43.230 --> 00:16:45.190
the compile is finished.

00:16:45.190 --> 00:16:50.840
So let's just quickly recap this just so it's
clear exactly what artifacts are and how they

00:16:50.840 --> 00:16:51.840
flow.

00:16:51.840 --> 00:17:01.220
The, the final output of your web application
is basically EmittedArtifacts from the ArtifactSet;

00:17:01.220 --> 00:17:06.959
the source code itself generates artifacts
directly from files in the public path; the

00:17:06.959 --> 00:17:13.629
compiler when it runs outputs compilation
results into the ArtifactSet; and any generators

00:17:13.629 --> 00:17:19.539
that the compiler runs may emit their own
artifacts; and finally, after the compiler

00:17:19.539 --> 00:17:26.039
runs the linkers run and linkers both read
and write artifacts and whatever's left basically

00:17:26.039 --> 00:17:31.539
at the end of this process is your web application.

00:17:31.539 --> 00:17:32.539
Okay.

00:17:32.539 --> 00:17:40.320
So, let's actually get into the meat of the
presentation – what linkers are.

00:17:40.320 --> 00:17:47.110
Linkers are basically a bunch of code that
you write that runs somewhere inside GWT's

00:17:47.110 --> 00:17:48.870
linker chain.

00:17:48.870 --> 00:17:56.450
The linker chain is -- it's kind of a fancy
word for just a bunch of linkers that happen

00:17:56.450 --> 00:18:01.389
to be run in sequence using the output of
the previous linker.

00:18:01.389 --> 00:18:02.710
It's, it's really simple.

00:18:02.710 --> 00:18:05.940
You can actually – you can dig through all
the GWT code to see how this works but it's

00:18:05.940 --> 00:18:12.019
really just running the linkers in order,
passing the ArtifactSet from linker to linker,

00:18:12.019 --> 00:18:15.220
and then writing the output.

00:18:15.220 --> 00:18:18.129
Every linker has what's called an order.

00:18:18.129 --> 00:18:24.571
It's either pre-, post-, or primary linker
and this just tells GWT where in the linker

00:18:24.571 --> 00:18:28.559
chain your linker runs.

00:18:28.559 --> 00:18:32.929
The – as you can probably, as you can imagine
from the name – pre-linkers run first, the

00:18:32.929 --> 00:18:39.679
primary linker then runs, then all your post-linkers
run and at the end of that post-link is where

00:18:39.679 --> 00:18:42.210
your application is written.

00:18:42.210 --> 00:18:46.090
Every one of these linkers in this linker
chain – they are connected as I mentioned

00:18:46.090 --> 00:18:53.570
before by ArtifactSets – every linker gets
an ArtifactSet as a parameter to its link

00:18:53.570 --> 00:18:54.570
method.

00:18:54.570 --> 00:19:00.010
It then creates a copy of that ArtifactSet,
makes any changes it needs and then returns

00:19:00.010 --> 00:19:03.490
that ArtifactSet where it's then passed on
to the next linker.

00:19:03.490 --> 00:19:10.450
It's, it's fairly straightforward – just
a bunch of ArtifactSets getting passed around.

00:19:10.450 --> 00:19:18.580
The linker that runs in the primary order
is basically the most important linker that

00:19:18.580 --> 00:19:21.730
runs during the GWT compile process.

00:19:21.730 --> 00:19:26.990
It's really ultimately responsible for how
the application looks at the end of the compile

00:19:26.990 --> 00:19:33.990
 – like the general idea – sorry – the
general layout of the application -- so small

00:19:33.990 --> 00:19:39.889
differences between cross-site and the Iframe
linker versus –maybe your application is

00:19:39.889 --> 00:19:45.179
ending up as a Firefox extension zipped up
or a Chrome extension zipped up.

00:19:45.179 --> 00:19:51.299
These big differences – they basically come
from the choice of primary linker.

00:19:51.299 --> 00:19:54.629
The primary linker's responsible for a number
of things.

00:19:54.629 --> 00:20:00.669
The primary linker is basically responsible
for bootstrapping your GWT application which

00:20:00.669 --> 00:20:07.679
means figuring out the correct permutations,
loading – loading whatever permutation is

00:20:07.679 --> 00:20:09.840
active, et cetera.

00:20:09.840 --> 00:20:16.570
They control the deferred fragment loading
as well so they –

00:20:16.570 --> 00:20:21.379
Writing a primary linker is definitely a much
bigger job than writing the pre- or post-

00:20:21.379 --> 00:20:24.629
linkers – I'll just mention those in a couple
seconds here.

00:20:24.629 --> 00:20:27.460
So a couple of examples of primary linkers.

00:20:27.460 --> 00:20:32.990
The Iframe and cross-site linkers – all
the GWT built-in ones you may be familiar

00:20:32.990 --> 00:20:33.990
with.

00:20:33.990 --> 00:20:36.309
The browser extension linkers.

00:20:36.309 --> 00:20:42.539
Speed Tracer has actually written the, the
best primary linkers that you can actually

00:20:42.539 --> 00:20:44.360
take a look at right now today.

00:20:44.360 --> 00:20:49.320
They actually have an HTML5 Web Worker Linker
which I am going to talk about in a little

00:20:49.320 --> 00:20:51.889
more detail in a few minutes here.

00:20:51.889 --> 00:20:56.960
This is actually available in the Speed Tracer
source code so you can take a look at this

00:20:56.960 --> 00:21:04.029
during or after the talk and see how it actually
works and play with it if you wanted to.

00:21:04.029 --> 00:21:08.809
And as well, the Speed Tracer team actually
has a Chrome extension linker in there.

00:21:08.809 --> 00:21:16.440
They -- it's rolled into the Speed Tracer
source but it's, it's something you can use

00:21:16.440 --> 00:21:24.799
if you wanted to – if you wanted to compile
your own web modules to Chrome extensions.

00:21:24.799 --> 00:21:30.649
If you are writing a primary linker, I mentioned
that primary linkers are responsible for so

00:21:30.649 --> 00:21:37.159
much – you, when you write a primary linker,
you are actually responsible for making sure

00:21:37.159 --> 00:21:44.580
that you keep track of changes to how GWT
actually bootstraps its modules internally.

00:21:44.580 --> 00:21:50.820
The—if you are writing primary linkers,
this is – it's kind of a big responsibility

00:21:50.820 --> 00:21:56.159
because the way that the compiler generates
this Java script changes subtly from version

00:21:56.159 --> 00:21:57.159
to version.

00:21:57.159 --> 00:22:03.429
It may have new requirements for variables
that you have to provide before your GWT module

00:22:03.429 --> 00:22:04.730
is bootstrapped.

00:22:04.730 --> 00:22:11.539
There's a – you actually have to get your
module up and running.

00:22:11.539 --> 00:22:16.440
These are all things you're going to have
to keep track of – and you'll want to keep

00:22:16.440 --> 00:22:21.020
an eye on the release notes of GWT from version
to version just to make sure that nothing

00:22:21.020 --> 00:22:23.480
major has changed.

00:22:23.480 --> 00:22:30.429
It's – small changes will come down from
time to time so if a new version of GWT comes

00:22:30.429 --> 00:22:34.740
out, you'll definitely want to be testing
right away because it's possible that something

00:22:34.740 --> 00:22:36.110
may have changed.

00:22:36.110 --> 00:22:39.760
Just an example – there's something called
'Soft Permutations' which I'll talk about

00:22:39.760 --> 00:22:42.169
later in the talk.

00:22:42.169 --> 00:22:44.840
This is going to be coming down in a future
GWT version.

00:22:44.840 --> 00:22:49.500
I'm not actually sure what the plan is for
it but if you are running a primary linker,

00:22:49.500 --> 00:22:53.929
this will actually change how your primary
linker has to work so someone keep an eye

00:22:53.929 --> 00:22:56.639
on it.

00:22:56.639 --> 00:23:02.740
Pre-order linkers – they run before the
primary linker so they actually have a chance

00:23:02.740 --> 00:23:06.580
to take a look at all the artifacts before
the primary linker gets them.

00:23:06.580 --> 00:23:12.370
They can potentially modify these artifacts,
swap them out for something else.

00:23:12.370 --> 00:23:18.370
They're also a really good place –as I mentioned
early in the presentation, you can, you can

00:23:18.370 --> 00:23:23.640
send messages from the generators that run
during the compile to linkers that run after

00:23:23.640 --> 00:23:24.840
the compile.

00:23:24.840 --> 00:23:30.850
If you're writing a pre-order linker, this
is the best place for you to actually examine

00:23:30.850 --> 00:23:35.400
those messages that you sent from your generator
and turn them into something concrete that's

00:23:35.400 --> 00:23:38.210
emitted to disk at the end of the compile.

00:23:38.210 --> 00:23:44.000
An example here -- GWT actually has something
called an RpcPolicyManifestLinker.

00:23:44.000 --> 00:23:49.500
This is a special internal linker in GWT that
takes a look at all the remote services that

00:23:49.500 --> 00:23:55.990
you've implemented in your code and it, it
generates a serialization white list from

00:23:55.990 --> 00:23:56.990
it.

00:23:56.990 --> 00:24:03.309
The – what happens is every time you create
a remote service in your code, one of these

00:24:03.309 --> 00:24:08.509
RpcPolicyFileArtifacts is emitted into the
ArtifactSet.

00:24:08.509 --> 00:24:11.909
This, this isn't actually an EmittedArtifact
that ends up on disk.

00:24:11.909 --> 00:24:18.970
This is just a piece of information that sits
in, sits in this ArtifactSet until the linker's

00:24:18.970 --> 00:24:19.970
run.

00:24:19.970 --> 00:24:25.110
And then when the linker runs after the compile's
done, it takes a look and can see all the

00:24:25.110 --> 00:24:29.679
types that are used in serialization, turns
them into a file which you put on the server

00:24:29.679 --> 00:24:33.909
and that file will then white list all the
types used for all of the remote services

00:24:33.909 --> 00:24:37.379
in your web application.

00:24:37.379 --> 00:24:40.669
And then, finally of course, there's the post-order
linkers.

00:24:40.669 --> 00:24:45.179
These run after the primary linkers so you
have a chance to take a look at every file

00:24:45.179 --> 00:24:51.169
that's been generated by the primary linker,
make changes there.

00:24:51.169 --> 00:24:57.210
It, it is important to note that if you, if
you don't really want to maintain a primary

00:24:57.210 --> 00:25:02.149
linker, you might have some subtle differences
in how you want your web application to work

00:25:02.149 --> 00:25:03.769
from a primary linker.

00:25:03.769 --> 00:25:08.710
You could actually – instead of writing
a full primary linker, just write a post-ordered

00:25:08.710 --> 00:25:14.940
linker that is responsible for tweaking the
output of that primary linker just enough

00:25:14.940 --> 00:25:17.590
to actually make it work for your situation.

00:25:17.590 --> 00:25:23.180
So this way, it's the primary ordered linker's
job to keep up with GWT changes but you can

00:25:23.180 --> 00:25:27.940
just tweak it and tweak your deployment the
way you want it – renaming files or moving

00:25:27.940 --> 00:25:28.940
files around.

00:25:28.940 --> 00:25:33.610
If it's just a subtle change, you probably
will just want to write a post-order linker.

00:25:33.610 --> 00:25:38.359
One example, of course, of a post-order linker
is the off line application Manifest Linker

00:25:38.359 --> 00:25:42.769
 -- we'll talk about that in a demo in a few
minutes here.

00:25:42.769 --> 00:25:46.899
We'll actually build this one from scratch.

00:25:46.899 --> 00:25:47.899
Okay.

00:25:47.899 --> 00:25:57.190
So SelectionScriptLinker is something you're
gonna need to know if you ever actually start

00:25:57.190 --> 00:26:00.210
writing a primary linker.

00:26:00.210 --> 00:26:04.490
This is most likely gonna be the subclass
that you're gonna use.

00:26:04.490 --> 00:26:08.320
Because there are so many things you're responsible
for if you were writing a primary linker,

00:26:08.320 --> 00:26:15.200
the GWT team wrote SelectionScriptLinker as
something that does all the heavy lifting

00:26:15.200 --> 00:26:17.379
for you.

00:26:17.379 --> 00:26:19.720
Every primary linker basically has to do the
same things.

00:26:19.720 --> 00:26:26.039
It has to deal with bootstrapping, your GWT
module; it has to deal with determining the

00:26:26.039 --> 00:26:32.730
current permutation you're running; it has
to deal with this developer guided code splitting.

00:26:32.730 --> 00:26:38.619
SelectionScriptLinker is something already
written for you that understands all these

00:26:38.619 --> 00:26:43.679
things that has to be done and can do them
for most primary linkers.

00:26:43.679 --> 00:26:48.169
It just needs a little bit of additional input
to tell it how to work.

00:26:48.169 --> 00:26:54.480
And I'm gonna explain it a little more in
detail using the Web Worker Linker.

00:26:54.480 --> 00:26:59.700
The Web Worker Linker is a primary linker
that the Speed Tracer team wrote.

00:26:59.700 --> 00:27:03.799
It is a subclass of SelectionScriptLinker,
as you'd expect.

00:27:03.799 --> 00:27:10.879
And just a quick summary of what it does – it
takes a GWT module and lets you load it as

00:27:10.879 --> 00:27:12.940
an HTML5 Web Worker.

00:27:12.940 --> 00:27:19.499
So by saying 'web worker' and the name of
your module, you, you basically bring up another

00:27:19.499 --> 00:27:27.419
thread running your GWT module in the browser
 – like a virtual browser thread.

00:27:27.419 --> 00:27:34.150
It's actually so simple I've in-lined it into
my slides here.

00:27:34.150 --> 00:27:41.850
This dedicated Web Worker Linker is – it's
actually amazing that the linker stack is

00:27:41.850 --> 00:27:45.960
so powerful that you can create a Web Worker
Linker in so few lines of code.

00:27:45.960 --> 00:27:50.399
And you'll see – I've got one more slide
but the amount of code actually required here

00:27:50.399 --> 00:27:54.080
is pretty miniscule.

00:27:54.080 --> 00:27:57.600
There are 5 methods that this linker implements.

00:27:57.600 --> 00:28:01.129
And none of these methods are actually that
complicated.

00:28:01.129 --> 00:28:04.330
The getDescription is of course required by
all linkers.

00:28:04.330 --> 00:28:10.029
It's just a human readable string of what
your linker is.

00:28:10.029 --> 00:28:15.549
The next 4 methods are actually – the methods
I talked about before that are required for

00:28:15.549 --> 00:28:18.950
you to implement if you were a subclass of
SelectionScriptLinker.

00:28:18.950 --> 00:28:25.190
getCompilationExtension just tells SelectionScriptLinker
what the file extension should be for the

00:28:25.190 --> 00:28:27.399
permutations it generates.

00:28:27.399 --> 00:28:34.999
getModulePrefix and Suffix are methods that
tell the SelectionScriptLinker what the Java

00:28:34.999 --> 00:28:44.009
script – it should put above and below the
generated Java script from your Java code.

00:28:44.009 --> 00:28:49.360
The compiler, when it runs, outputs something
called a compilation result.

00:28:49.360 --> 00:28:55.840
It's a special type of artifact which is,
basically, raw Java script, the raw Java script

00:28:55.840 --> 00:28:58.940
equivalent of the Java code you put in it.

00:28:58.940 --> 00:29:02.869
But it's missing all the important information
needed to bootstrap it.

00:29:02.869 --> 00:29:08.950
It's just the raw information, the raw code
for your web app.

00:29:08.950 --> 00:29:15.049
Now ModulePrefix and Suffix let you actually
surround that with whatever you need to bootstrap

00:29:15.049 --> 00:29:16.259
this application.

00:29:16.259 --> 00:29:19.010
You may have special global variables that
are important.

00:29:19.010 --> 00:29:24.280
You might have –you may want to wrap it
in a Java script function so you don't pollute

00:29:24.280 --> 00:29:27.529
the global name space when you load your module
 – things like that.

00:29:27.529 --> 00:29:33.139
But in this case, the Web Worker Linker – because
it's running in its own isolated sandbox,

00:29:33.139 --> 00:29:36.029
it just – it returns empty strings here.

00:29:36.029 --> 00:29:41.340
It writes the Java script naked to disk and
loads that directly.

00:29:41.340 --> 00:29:45.789
Finally the last method here is getSelectionScriptTemplate.

00:29:45.789 --> 00:29:50.379
This just tells SelectionScriptLinker the
name of a Java resource that it's going to

00:29:50.379 --> 00:29:52.440
use to create your selection script.

00:29:52.440 --> 00:29:57.049
This is just a standard Java resource that
lives next to your class file – in this

00:29:57.049 --> 00:30:02.999
case, DedicatedWorkerTemplate.js which I've
got on the next slide here.

00:30:02.999 --> 00:30:11.220
The, the selection script template, SelectionScriptLinker
basically takes a selection script template

00:30:11.220 --> 00:30:17.429
and turns it into your, your module selection
script effectively.

00:30:17.429 --> 00:30:26.169
It, the template contains the number of places
that are used to customize – sorry -- the

00:30:26.169 --> 00:30:30.059
SelectionScriptLinker will actually replace
these special place holders with the appropriate

00:30:30.059 --> 00:30:31.059
module functions.

00:30:31.059 --> 00:30:35.570
So in this case here, you can see there's
a number of placeholders – first one is

00:30:35.570 --> 00:30:41.629
MODULE_FUNC – this is just a Java script
compatible version of your module name.

00:30:41.629 --> 00:30:47.090
PERMUTATIONS_BEGIN and _END are just block
markers that tell SelectionScriptLinker where

00:30:47.090 --> 00:30:55.799
to, where to start in replacing the selection
script logic, et cetera.

00:30:55.799 --> 00:31:03.499
The, the Permutation logic is actually where
the selection script is gonna figure out which

00:31:03.499 --> 00:31:08.480
browser it's running on and which language
is currently selected.

00:31:08.480 --> 00:31:15.820
So what happens in the permutation logic is
a number of browser checks.

00:31:15.820 --> 00:31:20.999
It'll check the user agent to see if it's
running on Firefox, it's running on Webkit

00:31:20.999 --> 00:31:25.809
–it'll run any other property checks that
it might have, and at the end of the permutation

00:31:25.809 --> 00:31:30.759
logic, the – at the very top you can see
the variable name 'strongName'.

00:31:30.759 --> 00:31:35.940
That variable 'strongName' will be populated
with the strong name of the permutation that

00:31:35.940 --> 00:31:43.129
should run given all these properties that
have been detected in this permutation logic.

00:31:43.129 --> 00:31:48.109
So then the 'strongName' is passed into the
import scripts function.

00:31:48.109 --> 00:31:53.309
Import scripts has a, is a special function
in the web worker context.

00:31:53.309 --> 00:31:58.570
What this does is it loads the file, the script
file that you referenced from the network

00:31:58.570 --> 00:32:05.049
or from file et cetera and it'll block the
web worker until that script is actually loaded,

00:32:05.049 --> 00:32:07.119
initialized and then returned.

00:32:07.119 --> 00:32:10.159
So at this point, our permutation is loaded.

00:32:10.159 --> 00:32:14.460
We then call gwtOnLoad – 'G-W-T OnLoad'.

00:32:14.460 --> 00:32:20.470
This is a special function that the G-W-T
compiler specifies that actually bootstraps

00:32:20.470 --> 00:32:21.850
your GWT application.

00:32:21.850 --> 00:32:25.470
This is part of the compilation result that
the compiler output.

00:32:25.470 --> 00:32:32.929
As soon as you call this function, this effectively
calls into the entry point of your module.

00:32:32.929 --> 00:32:40.039
This gwtOnLoad – you call it and your GWT
module is up and running.

00:32:40.039 --> 00:32:42.760
So, as I mentioned before, this is such a
simple linker.

00:32:42.760 --> 00:32:52.609
Just these few dozen lines of code are enough,
basically, to turn a GWT module into a full

00:32:52.609 --> 00:32:53.609
HTML5 Web Worker.

00:32:53.609 --> 00:32:59.919
And most primary linkers – even though it
does sound ominous – there is a lot of stuff

00:32:59.919 --> 00:33:04.619
you're responsible for – in the end most
of these GWT linkers are actually fairly simple.

00:33:04.619 --> 00:33:10.470
They – a lot of – in the cases where you
are responsible for a lot of things, the GWT

00:33:10.470 --> 00:33:15.879
team has actually provided a lot of interesting
classes that do a lot of the work for you

00:33:15.879 --> 00:33:23.129
so you don't even have to – in the end,
you're only writing a few lines of code anyways.

00:33:23.129 --> 00:33:27.970
You should be taking a look at Iframe linker
and access linker in the GWT source too if

00:33:27.970 --> 00:33:30.429
you are interested in writing primary linkers.

00:33:30.429 --> 00:33:35.940
Those will kind of go through what other responsibilities
you have as a primary order linker just to

00:33:35.940 --> 00:33:40.929
give you an idea of what you need to do.

00:33:40.929 --> 00:33:46.140
Okay, so this is the exciting part where we
actually build a linker.

00:33:46.140 --> 00:33:51.539
Just a bit of background about this demo we're
actually gonna run here.

00:33:51.539 --> 00:33:58.100
The – HTML 5 specifies something called
an Offline Manifest.

00:33:58.100 --> 00:34:06.690
An Offline Manifest allows your HTML 5 application
to run without a network connection.

00:34:06.690 --> 00:34:09.360
So you specify manifest.

00:34:09.360 --> 00:34:14.730
The browser is now responsible for grabbing
files in this manifest, making sure that they're

00:34:14.730 --> 00:34:20.669
available while the browser's offline and
then, when you hit this, hit this website

00:34:20.669 --> 00:34:25.500
and there is no network connection available,
the browser then goes to the manifest rather

00:34:25.500 --> 00:34:28.850
than the network to pull your application
up.

00:34:28.850 --> 00:34:33.190
And I'm not going to go through the entire
specification.

00:34:33.190 --> 00:34:35.260
You can grab it off the W3 site.

00:34:35.260 --> 00:34:39.610
They have an offline web app specification
you can look at.

00:34:39.610 --> 00:34:45.370
You, you specify that your web app is offline
capable by adding a manifest attribute to

00:34:45.370 --> 00:34:47.840
your HTML element.

00:34:47.840 --> 00:34:51.880
And the manifest itself, again, is very straightforward.

00:34:51.880 --> 00:34:56.940
You add a cache manifest header, then you
list out all the files you want to be available

00:34:56.940 --> 00:35:00.160
offline for your application.

00:35:00.160 --> 00:35:02.850
It's, it's pretty straightforward.

00:35:02.850 --> 00:35:08.940
It's just a very simple file listing the files
that need to be available.

00:35:08.940 --> 00:35:15.070
So let me actually switch over to Eclipse
here.

00:35:15.070 --> 00:35:16.350
[pause]

00:35:16.350 --> 00:35:17.350
Okay.

00:35:17.350 --> 00:35:23.940
So in Eclipse here, I've just got the standard
GWT sample application that you can create

00:35:23.940 --> 00:35:30.050
yourself – just a very simple demo that
has a button, connects to a network service,

00:35:30.050 --> 00:35:33.300
et cetera.

00:35:33.300 --> 00:35:39.610
What we want, we want is a -- we want to create
an Offline Manifest for this web application

00:35:39.610 --> 00:35:44.180
so that when the user's not connected, they
can still run our app.

00:35:44.180 --> 00:35:50.260
The first thing we're gonna do, of course
 – we have to open up our host page and

00:35:50.260 --> 00:35:51.610
we're going to add this manifest.

00:35:51.610 --> 00:35:56.140
I've already added here just to save some
time

00:35:56.140 --> 00:36:00.450
We say 'HTML manifest equals Linker Demo Offline
Manifest'.

00:36:00.450 --> 00:36:04.050
Linker demo of course is this directory here.

00:36:04.050 --> 00:36:08.660
This directory is just the output directory
of my web application.

00:36:08.660 --> 00:36:14.130
So we want to generate a file named 'offline
dot manifest' that's output in the standard

00:36:14.130 --> 00:36:19.630
GWT application output directory at the end
of the compile to make this application offline

00:36:19.630 --> 00:36:20.630
capable.

00:36:20.630 --> 00:36:25.120
Okay, so why don't we start?

00:36:25.120 --> 00:36:31.280
Before I start, I'm just going to reduce the
number of permutations I have to compile because

00:36:31.280 --> 00:36:37.110
when you're writing a linker, you actually
want to debug the GWT compiler.

00:36:37.110 --> 00:36:44.240
The – if you, if you've been compiling your
GWT application using the compile project

00:36:44.240 --> 00:36:51.390
button in Eclipse, this runs your – this
fires up a JVM and runs a compile but it doesn't

00:36:51.390 --> 00:36:54.370
actually run it in debug mode.

00:36:54.370 --> 00:36:59.180
What you can do though because the GWT compiler
is written in Java, you can actually create

00:36:59.180 --> 00:37:03.730
your own launch target to debug the Java compiler.

00:37:03.730 --> 00:37:07.390
So before – let me just quickly do this.

00:37:07.390 --> 00:37:16.660
I'm gonna set property – name equals user
agent – value equals safari.

00:37:16.660 --> 00:37:18.950
So I'm just reducing the number of permutations
we're gonna compile.

00:37:18.950 --> 00:37:25.850
Just cause this is a demo, I'm going to rapidly
iterate, compile as quick as possible.

00:37:25.850 --> 00:37:28.180
I'm gonna create a new launch target.

00:37:28.180 --> 00:37:33.970
Okay, so we create a new Java application
launch target.

00:37:33.970 --> 00:37:37.190
I'm gonna call it 'compiler'.

00:37:37.190 --> 00:37:42.660
And I pick the project that we've got.

00:37:42.660 --> 00:37:51.010
The main class is actually going to be the
GWT – G-W-T compiler.

00:37:51.010 --> 00:37:54.860
So we're going to, we're actually gonna debug
the compiler here.

00:37:54.860 --> 00:37:58.990
So under program arguments, another thing
that's useful when you're gen – when you're

00:37:58.990 --> 00:38:04.470
writing your own linkers – there's a flag
you can pass – draft compile and this just

00:38:04.470 --> 00:38:08.820
reduces the amount of optimization that happens
during the GWT compile process.

00:38:08.820 --> 00:38:13.390
So cuts a few seconds off and this of course
is really useful when you're writing something

00:38:13.390 --> 00:38:16.710
that happens after the GWT compile.

00:38:16.710 --> 00:38:21.870
And of course, the next argument to the compiler
is always the module you're compiling and

00:38:21.870 --> 00:38:31.480
 – just so I don't mess this up – it's
'com Google I O linker demo dot linker demo'.

00:38:31.480 --> 00:38:39.510
Finally, because GWT actually resolves the
Java files that it compiles from your class

00:38:39.510 --> 00:38:50.460
path, we actually have to add the source directory
of our project as a folder on the class path

00:38:50.460 --> 00:38:51.590
[pause]

00:38:51.590 --> 00:38:53.540
Before we can successfully compile.

00:38:53.540 --> 00:38:54.540
Okay.

00:38:54.540 --> 00:39:01.630
So let me just hit the debug button and just
make sure I got all this stuff right here.

00:39:01.630 --> 00:39:06.960
Okay, so while this waits – sorry, while
this is compiling, we'll just leave this running.

00:39:06.960 --> 00:39:08.230
Let's actually start writing our linker.

00:39:08.230 --> 00:39:09.230
Okay.

00:39:09.230 --> 00:39:15.720
So I'm gonna call our linker the 'offline
 ' oops – the 'offline linker' and it's

00:39:15.720 --> 00:39:24.510
going to live in the 'com Google I O linker
dem' – oops – 'Google I O linker demo

00:39:24.510 --> 00:39:25.510
dot linker package'.

00:39:25.510 --> 00:39:26.510
Okay.

00:39:26.510 --> 00:39:27.800
Our compile succeeded in the background there.

00:39:27.800 --> 00:39:33.780
And you'll actually see that after I added
that set property, I'm only getting one permutation

00:39:33.780 --> 00:39:39.610
compiled and it took significantly less time
to compile.

00:39:39.610 --> 00:39:45.540
So, okay, so the offline linker that we're
writing, the Offline Manifest requires the

00:39:45.540 --> 00:39:49.770
name of all of the files in the output of
your web application.

00:39:49.770 --> 00:39:53.710
This thing is going to have to run after the
primary linker so we can actually see what

00:39:53.710 --> 00:39:54.710
files were generated.

00:39:54.710 --> 00:39:59.860
We're going to set the order of this linker
then to 'post'.

00:39:59.860 --> 00:40:01.100
All right.

00:40:01.100 --> 00:40:08.400
So the base class of our off line linker – every
linker that you create in GWT has to be a

00:40:08.400 --> 00:40:14.340
subclass of linker basically an abstract class
that GWT has defined.

00:40:14.340 --> 00:40:22.160
But there is actually another subclass of
linker called abstractlinker and abstractlinker

00:40:22.160 --> 00:40:29.740
is just – it's basically linker with a few
extra helper methods that are useful if you're

00:40:29.740 --> 00:40:32.800
emitting artifacts that end up in your web
app.

00:40:32.800 --> 00:40:39.040
So if you are writing something like this,
you'll probably just want to subclass abstractlinker.

00:40:39.040 --> 00:40:42.750
Then you get access to these helper methods
which we'll be using in a few minutes here.

00:40:42.750 --> 00:40:45.760
So 'extend abstract linker'.

00:40:45.760 --> 00:40:52.740
Okay, let's just add the unimplemented methods.

00:40:52.740 --> 00:40:56.240
I mentioned before 'getDescription' is just
a human readable string.

00:40:56.240 --> 00:41:05.040
We're going to call this the 'HTML 5 Offline
Linker' and the link method, of course, is

00:41:05.040 --> 00:41:06.060
the most important method.

00:41:06.060 --> 00:41:10.740
This is, this is what runs during the linker
chain of the GWT compile.

00:41:10.740 --> 00:41:16.250
The – you can see here, I mentioned before,
the linker chain is constructed by passing

00:41:16.250 --> 00:41:18.840
the output of one linker to the input of another
linker.

00:41:18.840 --> 00:41:23.520
This is the, this is the input here – artifacts.

00:41:23.520 --> 00:41:25.970
We're going to create a new ArtifactSet from
that.

00:41:25.970 --> 00:41:32.890
Now it's important to note that the ArtifactSet
passed into your linker is actually immutable.

00:41:32.890 --> 00:41:34.590
You actually can't make changes to it.

00:41:34.590 --> 00:41:36.860
You have to create a brand new ArtifactSet
every time.

00:41:36.860 --> 00:41:38.760
So we're going to create a new ArtifactSet
from it.

00:41:38.760 --> 00:41:39.760
Oops.

00:41:39.760 --> 00:41:40.760
[pause]

00:41:40.760 --> 00:41:41.760
'From artifacts'

00:41:41.760 --> 00:41:42.760
[pause]

00:41:42.760 --> 00:41:52.890
And I'm just going to return that from the
linker directly.

00:41:52.890 --> 00:41:57.290
And what I've done here is actually create
a pass through linker.

00:41:57.290 --> 00:42:00.050
This is kind of the simplest example of a
no op linker.

00:42:00.050 --> 00:42:01.900
It runs.

00:42:01.900 --> 00:42:06.640
It takes input from the previous linker, passes
it out, and that's it.

00:42:06.640 --> 00:42:10.890
It's just a very simple no op linker.

00:42:10.890 --> 00:42:17.420
Before we actually flesh this out, let's do
some, let's do some GWT bookkeeping and actually

00:42:17.420 --> 00:42:23.060
define our linker and tell G-W-T that we want
to use this linker during the compile.

00:42:23.060 --> 00:42:28.810
So we have to add a new attribute – define
linker.

00:42:28.810 --> 00:42:37.710
We have to tell G-W-T which linker we're going
to be defining so I'm just copying the full

00:42:37.710 --> 00:42:39.220
name – oops.

00:42:39.220 --> 00:42:40.720
'Full name'.

00:42:40.720 --> 00:42:43.850
And I'm gonna name it the 'Offline Linker'.

00:42:43.850 --> 00:42:51.270
Okay so this name here is the same name that
you use in your 'Add linker' directive.

00:42:51.270 --> 00:42:54.810
'Head linker name equals Offline'.

00:42:54.810 --> 00:42:57.690
You can, you can actually define linkers without
using them.

00:42:57.690 --> 00:43:03.030
This of course is useful – you might have
a utility linker in a library.

00:43:03.030 --> 00:43:05.470
You may not – it might be optional for people
to use.

00:43:05.470 --> 00:43:10.470
They'll actually have to use 'add linker'
before that linker is active.

00:43:10.470 --> 00:43:17.100
Okay, so let's, let's set a breakpoint in
the offline linker.

00:43:17.100 --> 00:43:19.960
And let's fire up the compiler here.

00:43:19.960 --> 00:43:20.960
[pause]

00:43:20.960 --> 00:43:21.960
Okay.

00:43:21.960 --> 00:43:29.050
So this is gonna take a few seconds to get
to our breakpoint.

00:43:29.050 --> 00:43:30.050
Okay.

00:43:30.050 --> 00:43:35.760
So of course linkers run after the compiler
so we’re just waiting for the compiler to

00:43:35.760 --> 00:43:43.161
spit out the compilation results so we can
take a look at them.

00:43:43.161 --> 00:43:44.161
This is going to take a few seconds here.

00:43:44.161 --> 00:43:45.440
Thankfully we only have one permutation so
we're not waiting too long.

00:43:45.440 --> 00:43:46.710
Okay, there we go.

00:43:46.710 --> 00:43:53.970
So I've actually set a breakpoint in the GWT
compiler at the point where it's invoking

00:43:53.970 --> 00:43:54.970
my linker.

00:43:54.970 --> 00:44:03.100
You can see here the stack trace is full of
GWT code, compiler, the link, standard linking

00:44:03.100 --> 00:44:05.170
contacts and finally, the offline linker.

00:44:05.170 --> 00:44:11.700
Now, if I take a quick look at this ArtifactSet
that's actually been generated – sorry,

00:44:11.700 --> 00:44:17.270
the ArtifactSet that's passed in, you can
see it's full of basically all the different

00:44:17.270 --> 00:44:20.180
artifacts that come out of GWT.

00:44:20.180 --> 00:44:21.180
Ooops.

00:44:21.180 --> 00:44:27.510
Some – you'll see some files here that came
from module public paths, you'll see the compilation

00:44:27.510 --> 00:44:33.140
results, you'll see the HTML files that were
generated by – sorry, the dot cache dot

00:44:33.140 --> 00:44:39.490
HTML files that were generated by the Iframe
linker – things like that.

00:44:39.490 --> 00:44:43.990
Okay so let's start actually building our
Offline Manifest.

00:44:43.990 --> 00:44:55.240
If you recall, the Offline Manifest basically
starts with 'CACHE MANIFEST' followed by a

00:44:55.240 --> 00:44:56.240
new line.

00:44:56.240 --> 00:45:02.120
And now we actually have to fill this, this
manifest with the files that are available

00:45:02.120 --> 00:45:03.970
in the output of the web app.

00:45:03.970 --> 00:45:18.100
So let's take, let's iterate over all the
EmittedArtifacts in the input ArtifactSet.

00:45:18.100 --> 00:45:21.640
So 'define method' is just a way to query
the ArtifactSet.

00:45:21.640 --> 00:45:24.290
'EmittedArtifact'

00:45:24.290 --> 00:45:26.940
Okay.

00:45:26.940 --> 00:45:32.420
So we're just looping over all these artifacts
that the compiler will be emitting.

00:45:32.420 --> 00:45:38.030
Now they're – I'm just adding a check here
for a flag 'is private'.

00:45:38.030 --> 00:45:41.530
This is something I didn't mention before
but an EmittedArtifact can be private.

00:45:41.530 --> 00:45:45.880
This just means that this artifact, while
it's emitted, is not actually part of your

00:45:45.880 --> 00:45:46.880
web application.

00:45:46.880 --> 00:45:51.080
This is private developer data that isn't
deployed as part of your application.

00:45:51.080 --> 00:45:56.640
So if the artifact is private, we're just
going to continue.

00:45:56.640 --> 00:46:00.401
Otherwise, we're going to add it to our manifest.

00:46:00.401 --> 00:46:04.640
We're going to emit the partial path.

00:46:04.640 --> 00:46:11.080
Partial path is basically just the relative
path of an artifact within your web apps application

00:46:11.080 --> 00:46:12.080
directory.

00:46:12.080 --> 00:46:17.550
And finally, we'll append a new line.

00:46:17.550 --> 00:46:24.120
So thankfully we're running in Eclipse so
as soon as I save that, I can actually just

00:46:24.120 --> 00:46:27.040
continue and Eclipse will pick up that new
code.

00:46:27.040 --> 00:46:28.561
So there you go.

00:46:28.561 --> 00:46:34.451
You can see that I am generating now this
manifest – basically I've got this string

00:46:34.451 --> 00:46:38.180
in memory that represents this manifest that
we're gonna write to disk.

00:46:38.180 --> 00:46:43.720
So we actually have to emit this now to disk
because if I don't emit this, it's just going

00:46:43.720 --> 00:46:46.150
to get lost at the end of the compile.

00:46:46.150 --> 00:46:52.380
So we can create a new EmittedArtifact and
let's call it 'manifest'.

00:46:52.380 --> 00:46:57.410
And I was mentioning before that AbstractLinker
had a bunch of helper classes that help you

00:46:57.410 --> 00:46:59.160
to emit artifacts.

00:46:59.160 --> 00:47:03.350
One of the helpers is 'emit string'.

00:47:03.350 --> 00:47:08.280
'Emit string' basically takes a string that
you pass it and turns it into a file on disk.

00:47:08.280 --> 00:47:18.740
So the parameter 'what' is our manifest – let's
get it from our string builder.

00:47:18.740 --> 00:47:24.350
And the file name is going to be 'offline
dot manifest'.

00:47:24.350 --> 00:47:28.300
Okay and this is actually just an EmittedArtifact.

00:47:28.300 --> 00:47:31.710
This artifact isn't actually linked to anything.

00:47:31.710 --> 00:47:37.760
Before we can actually create it on disk,
we have to add it to our ArtifactSet.

00:47:37.760 --> 00:47:44.450
So let's, we add it to our ArtifactSet and
now when this method returns, it's going to

00:47:44.450 --> 00:47:49.910
be in the output ArtifactSet and G-W-T is
going to see it and write it to disk.

00:47:49.910 --> 00:47:52.550
So I'm going to run the code to the end here.

00:47:52.550 --> 00:47:57.800
Unfortunately, the ArtifactSet is too big
so it's fairly hard to find it.

00:47:57.800 --> 00:47:59.310
Just gonna complete the compilation.

00:47:59.310 --> 00:48:06.680
Gonna go down here to the linker demo and
you can see the file we just created in that

00:48:06.680 --> 00:48:09.240
linker -- offline dot manifest -- is there.

00:48:09.240 --> 00:48:14.400
And the contents of the file are basically
what we put into the string.

00:48:14.400 --> 00:48:22.070
So – you can see here – to write any sort
of linker is really just a matter of a few

00:48:22.070 --> 00:48:23.070
lines of code.

00:48:23.070 --> 00:48:28.620
And it does seem really daunting to write
a linker but in the end, doing almost anything

00:48:28.620 --> 00:48:35.250
in the linker is – it just comes down to
some simple manipulation of artifacts and

00:48:35.250 --> 00:48:36.580
emitting artifacts in the right place.

00:48:36.580 --> 00:48:40.720
So the Web Worker Linker is really simple.

00:48:40.720 --> 00:48:46.480
I mean this HTML 5 Offline Linker is extremely
simple.

00:48:46.480 --> 00:48:51.370
The Firefox extension linker that we wrote
for Dotspots – it's pretty simple overall.

00:48:51.370 --> 00:48:58.390
It's not a lot of work to do this sort of
thing and it's definitely, definitely something

00:48:58.390 --> 00:49:03.690
you should look into if you have to do any
sort of customization of your web app.

00:49:03.690 --> 00:49:10.310
Okay so I'm not gonna – I'm just gonna kind
of leave the demo there because I can demonstrate

00:49:10.310 --> 00:49:13.690
a web app running offline but it's not entirely
exciting.

00:49:13.690 --> 00:49:22.060
Let's just – we can move on to the last
few advanced notes here since we've got a

00:49:22.060 --> 00:49:24.030
little bit of time.

00:49:24.030 --> 00:49:26.400
Okay so some Advanced Linker notes.

00:49:26.400 --> 00:49:29.500
I'm not going to deep dive into any of this
stuff.

00:49:29.500 --> 00:49:36.620
If you have any questions, I guess we can
kind of visit them after the discussion or

00:49:36.620 --> 00:49:42.610
you can always visit them on the GWT users
group where there's, the GWT developers are

00:49:42.610 --> 00:49:44.880
available – things like that.

00:49:44.880 --> 00:49:49.670
Okay, I'm going to talk briefly here about
developer guided code splitting.

00:49:49.670 --> 00:49:52.560
You've probably seen this in a number of talks
already.

00:49:52.560 --> 00:49:57.450
The compiler splits fragments across GWT RunAsync
calls.

00:49:57.450 --> 00:50:03.130
What you may not have seen in those presentations
is that in web mode, the RunAsync call is

00:50:03.130 --> 00:50:06.920
basically delegated to something called a
loading strategy.

00:50:06.920 --> 00:50:13.090
And these loading strategies are basically
just a way for you to load the deferred fragments.

00:50:13.090 --> 00:50:19.470
So however you're – wherever you put your
deferred fragments, you just need a loading

00:50:19.470 --> 00:50:22.730
strategy that's able to bring those back.

00:50:22.730 --> 00:50:29.070
There is a default loading strategy – XHR
loading strategy – source is available in

00:50:29.070 --> 00:50:36.600
AsyncFragmentLoader if you're interested and
this XHR loading strategy – it's actually

00:50:36.600 --> 00:50:41.750
a bit of a misnomer because it actually handles
more than just XML HTTP requests.

00:50:41.750 --> 00:50:45.770
It can actually delegate back to you to do
your own requests.

00:50:45.770 --> 00:50:49.900
I recommend taking a look at this class and
just seeing how it works.

00:50:49.900 --> 00:50:55.970
The contract is actually very simple if you
need to do it – if you need to do any sort

00:50:55.970 --> 00:50:57.610
of deferred fragment loading.

00:50:57.610 --> 00:51:03.930
So if you're writing a primary linker and
you need to load deferred fragments, take

00:51:03.930 --> 00:51:10.300
a look here in AsyncFragmentLoader – the
information should be available.

00:51:10.300 --> 00:51:12.650
Development mode is new in GWT 2.0.

00:51:12.650 --> 00:51:18.230
The development mode is fairly difficult to
support if you're writing a primary linker.

00:51:18.230 --> 00:51:20.290
It's not impossible.

00:51:20.290 --> 00:51:24.810
We do actually support it in our Firefox linker.

00:51:24.810 --> 00:51:30.120
We had to do a fair bit of work and it's not,
it's not something trivial to support.

00:51:30.120 --> 00:51:34.920
If you writing a pre- or post-linker though,
it's not the primary linker's job to deal

00:51:34.920 --> 00:51:39.170
with development mode so you definitely can
 – you don't really have to worry too much

00:51:39.170 --> 00:51:40.590
about supporting it.

00:51:40.590 --> 00:51:42.230
It's fairly simple.

00:51:42.230 --> 00:51:49.550
The real differences are basically that a
re-link method is also a called linker linker

00:51:49.550 --> 00:51:51.660
as well as a link method.

00:51:51.660 --> 00:51:58.270
You can – your best bet for this is just
to kind of try it out and when you run into

00:51:58.270 --> 00:52:04.510
problems, just come onto the GWT user list
or contributors' list and just ask questions

00:52:04.510 --> 00:52:12.400
there because the people who are knowledge,
knowledgeable about this sort of linker are

00:52:12.400 --> 00:52:16.630
always there to answer questions.

00:52:16.630 --> 00:52:22.940
And of course some upcoming linker features
 – in an upcoming version of GWT, your linkers

00:52:22.940 --> 00:52:27.610
will be shardable and able to distribute in
your distributable compiles.

00:52:27.610 --> 00:52:32.680
I don't know how many of you out there are
actually distributing your GWT compiles to

00:52:32.680 --> 00:52:38.190
speed them up but your linkers will basically
be able to participate in this as well.

00:52:38.190 --> 00:52:43.930
And soft permutations which are actually pretty
exciting – I don't know when they're gonna

00:52:43.930 --> 00:52:49.540
ship but basically this is – Bruce is shrugging
over there.

00:52:49.540 --> 00:52:55.810
But it's – basically what this is going
to do – instead of having a hard permutation

00:52:55.810 --> 00:53:03.770
 – like one permutation file per combination
of properties, you can actually ship multiple

00:53:03.770 --> 00:53:09.880
combinations of properties inside a single
file and switch between them at run time.

00:53:09.880 --> 00:53:14.980
So if your permutations aren't that different,
instead of generating 2 files which are 99%

00:53:14.980 --> 00:53:20.560
the same, you just ship one file and you pay
a small run time cost to switch between them.

00:53:20.560 --> 00:53:26.640
And this is only really applicable if you're
writing a primary linker as well.

00:53:26.640 --> 00:53:31.410
This is going to change the bootstrap sequence
for a GWT module and again, keep an eye on

00:53:31.410 --> 00:53:37.780
the release notes, user group definitely if
you have any questions.

00:53:37.780 --> 00:53:38.780
Okay.

00:53:38.780 --> 00:53:43.220
So just wrapping this up quickly so we can
leave some time for questions.

00:53:43.220 --> 00:53:48.290
Linkers package, analyze, decorate your compiled
scripts.

00:53:48.290 --> 00:53:52.610
They give you a much more structured approach
to your output versus Ant scripts or shell

00:53:52.610 --> 00:53:53.610
scripts.

00:53:53.610 --> 00:53:55.680
They are really easy to write.

00:53:55.680 --> 00:54:01.490
They might look daunting but once you get
into it, the concepts are simple.

00:54:01.490 --> 00:54:02.510
It's simple to write them.

00:54:02.510 --> 00:54:07.360
I hope I've given you enough information from
this talk to go in and write your first linker

00:54:07.360 --> 00:54:11.520
in a few minutes.

00:54:11.520 --> 00:54:17.280
And basically they make GWT more powerful
than just a simple web application compiler.

00:54:17.280 --> 00:54:23.940
It's now a Firefox extension compiler, a Chrome
extension compiler, a Web Worker Linker compiler,

00:54:23.940 --> 00:54:26.200
a Google gadget compiler.

00:54:26.200 --> 00:54:32.230
It could be an OSX dashboard gadget compiler.

00:54:32.230 --> 00:54:33.860
It just adds power to GWT.

00:54:33.860 --> 00:54:39.060
I've got a link to the user discussion group
here and I think it'll be in the Wave as well

00:54:39.060 --> 00:54:44.690
 – and a presentation on the web afterwards.

00:54:44.690 --> 00:54:48.650
So I don't know if the network has stayed
up during the whole presentation.

00:54:48.650 --> 00:54:53.220
I can head over to the Wave here.

00:54:53.220 --> 00:55:00.360
If you have any questions, I guess just step
up to the mike and we can go through as many

00:55:00.360 --> 00:55:04.010
as we can, as we have time.

00:55:04.010 --> 00:55:05.010
[pause]

00:55:05.010 --> 00:55:06.010
Oops.

00:55:06.010 --> 00:55:07.010
[pause]

00:55:07.010 --> 00:55:08.010
Sure.

00:55:08.010 --> 00:55:09.010
Go ahead.

00:55:09.010 --> 00:55:11.300
&gt;&gt;Male audience member #1: Is there any documentation
for this?

00:55:11.300 --> 00:55:16.430
&gt;&gt;Matt: I believe the linker documentation
is all in Java doc.

00:55:16.430 --> 00:55:24.200
It's – I don't believe that there are currently
specific documents written that go through

00:55:24.200 --> 00:55:30.400
linkers and everything you – basically start
from the Java doc for the linker class in

00:55:30.400 --> 00:55:34.680
GWT and work your way up from there unfortunately.

00:55:34.680 --> 00:55:39.780
That – I can look this up a little bit more.

00:55:39.780 --> 00:55:42.410
I can put some more information into the Wave
if I find any.

00:55:42.410 --> 00:55:46.560
But as far as I know, I believe it's just
in the Java doc.

00:55:46.560 --> 00:55:47.560
Go ahead.

00:55:47.560 --> 00:55:53.790
&gt;&gt;Male audience member #2: In the example
of the manifest linker, at one point – 'cause

00:55:53.790 --> 00:55:57.820
it's a pass through linker -- you take the
artifact in and you construct a new artifact

00:55:57.820 --> 00:55:58.820
and return that.

00:55:58.820 --> 00:56:00.470
So the artifacts are immutable.

00:56:00.470 --> 00:56:06.190
Is it necessary to, to construct a new one
and if so, why?

00:56:06.190 --> 00:56:11.430
&gt;&gt;Matt: It is necessary to create a new ArtifactSet
because – you can actually take a look at

00:56:11.430 --> 00:56:16.670
the ArtifactSet source code but the ArtifactSet
passed into your linker is frozen and all

00:56:16.670 --> 00:56:20.040
of the mutation methods will basically throw
an exception.

00:56:20.040 --> 00:56:26.560
So if you called add on the ArtifactSet, it
would throw – so you just create a new artifact

00:56:26.560 --> 00:56:27.880
exception.

00:56:27.880 --> 00:56:33.200
The reason for that is actually – it makes
the linker stack a little more flexible for

00:56:33.200 --> 00:56:34.200
the GWT team.

00:56:34.200 --> 00:56:38.680
They can make some changes in the future that
they couldn't if the ArtifactSets were mutable

00:56:38.680 --> 00:56:45.050
so it's – it's not really hard to work around
so they just made them immutable so in the

00:56:45.050 --> 00:56:49.730
future, they may take advantage of it and
not actually have to break everybody's linkers

00:56:49.730 --> 00:56:51.230
at the time.

00:56:51.230 --> 00:56:57.640
I did notice that there is one question in
the Wave here.

00:56:57.640 --> 00:57:01.590
I think this is actually out of scope, unfortunately,
for this presentation.

00:57:01.590 --> 00:57:03.030
GWT and WebSockets.

00:57:03.030 --> 00:57:10.330
The, this might be something you probably
would want to bring up on the user group and

00:57:10.330 --> 00:57:17.400
I actually don't know what the GWT plan is
for WebSockets at this time.

00:57:17.400 --> 00:57:19.130
Go ahead sir.

00:57:19.130 --> 00:57:21.440
&gt;&gt;Male audience member#3: Yes.

00:57:21.440 --> 00:57:22.440
Hi.

00:57:22.440 --> 00:57:27.820
The artifacts list was basically a list of
the files, right?

00:57:27.820 --> 00:57:40.400
So if we wanted to gain access to functions
in those files or things that were declared

00:57:40.400 --> 00:57:55.250
in the source code, is there a way to get
to that information provided we know that

00:57:55.250 --> 00:58:04.590
the GWT compiler has changed all that – has
done its optimization work?

00:58:04.590 --> 00:58:05.590
&gt;&gt;Matt: Okay.

00:58:05.590 --> 00:58:07.720
So that's a good question.

00:58:07.720 --> 00:58:14.300
The question is basically do we have access
to the type system – basically the dom of

00:58:14.300 --> 00:58:17.970
your program in memory after the compile finishes.

00:58:17.970 --> 00:58:19.850
The answer to that is unfortunately no.

00:58:19.850 --> 00:58:26.010
The – but you can write a generator that
runs at GWT time which has access to some

00:58:26.010 --> 00:58:29.810
of the type and member information.

00:58:29.810 --> 00:58:37.220
I don't believe – there is no real public
API for the compiler right now like at the

00:58:37.220 --> 00:58:42.340
statement expression level but there is – if
you write a generator, you have access to

00:58:42.340 --> 00:58:48.790
the type hierarchy, all the methods, the return
types, generics, things like that.

00:58:48.790 --> 00:58:53.770
So what you'll probably want to do is write
a generator and pass that information into

00:58:53.770 --> 00:58:56.580
your linker if you need that.

00:58:56.580 --> 00:59:00.630
Unfortunately, if you need source level information,
that's just not available.

00:59:00.630 --> 00:59:01.630
Go ahead.

00:59:01.630 --> 00:59:04.470
&gt;&gt;Male audience member #4: Thanks for your
talk.

00:59:04.470 --> 00:59:07.520
You mentioned several times your Firefox extension
link.

00:59:07.520 --> 00:59:09.680
Is that something Dotspots gonna make available?

00:59:09.680 --> 00:59:13.270
&gt;&gt;Matt: I'm – actually that is available.

00:59:13.270 --> 00:59:21.440
You can grab that – I believe it's GWT Firefox
extension on Google code and there's an example

00:59:21.440 --> 00:59:25.720
extension there if you wanted to play with
it.

00:59:25.720 --> 00:59:33.040
I haven't tested this with the latest releases
of GWT but you can grab this, compile it and

00:59:33.040 --> 00:59:35.620
you should be able to get an extension up
and running.

00:59:35.620 --> 00:59:41.210
You can – there's a Dotspots open source
link on here if you have any questions about

00:59:41.210 --> 00:59:42.210
that.

00:59:42.210 --> 00:59:44.310
And I can definitely help you through that
if you want to play around with it.

00:59:44.310 --> 00:59:47.530
&gt;&gt;Male audience member #4: Thank you very
much.

00:59:47.530 --> 00:59:48.530
&gt;&gt;Matt: Thanks.

00:59:48.530 --> 00:59:49.530
Okay.

00:59:49.530 --> 00:59:51.150
That's pretty much all the time I have.

00:59:51.150 --> 00:59:52.360
Thanks a lot for coming.

00:59:52.360 --> 00:59:52.610
[applause]

