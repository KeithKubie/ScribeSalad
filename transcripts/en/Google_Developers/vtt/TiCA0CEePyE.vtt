WEBVTT
Kind: captions
Language: en

00:00:07.170 --> 00:00:09.495
ANDREW: Hey, welcome
back to the Boring Show,

00:00:09.495 --> 00:00:12.380
the roughly an hour-long
show in which you

00:00:12.380 --> 00:00:16.070
get to see two engineers coding
an app basically from scratch,

00:00:16.070 --> 00:00:19.940
making mistakes, looking things
up, arguing about what to do,

00:00:19.940 --> 00:00:21.042
and so forth.

00:00:21.042 --> 00:00:22.250
This is our development show.

00:00:22.250 --> 00:00:24.710
It's not actually a
Flutter tutorial per se.

00:00:24.710 --> 00:00:26.840
We do have a bunch of
those, and you can find them

00:00:26.840 --> 00:00:30.110
on the Google Developer channel,
and also some at flutter.io.

00:00:30.110 --> 00:00:32.570
So if that's your jam,
you can find those there.

00:00:32.570 --> 00:00:35.290
FILIP: Also there's a
bunch of community ones.

00:00:35.290 --> 00:00:38.240
So if you just search YouTube
for a Flutter tutorial,

00:00:38.240 --> 00:00:40.625
you'll find a lot of
amazing tutorials.

00:00:40.625 --> 00:00:41.870
ANDREW: Also true.

00:00:41.870 --> 00:00:44.480
All right, so this is
our second episode.

00:00:44.480 --> 00:00:47.900
In our first episode, we kind of
did that as an experiment just

00:00:47.900 --> 00:00:52.070
to see if anybody would want
to watch us code for an hour.

00:00:52.070 --> 00:00:54.760
And we got about 12,000
views as of right now.

00:00:54.760 --> 00:00:56.392
We got a bunch of comments.

00:00:56.392 --> 00:00:58.100
It seemed to be some
good interest there.

00:00:58.100 --> 00:01:00.360
So we're going to do
some more of these.

00:01:00.360 --> 00:01:03.090
So this is our second episode.

00:01:03.090 --> 00:01:05.090
And one other thing to mention--

00:01:05.090 --> 00:01:07.430
we read through the
comments on the first one.

00:01:07.430 --> 00:01:09.359
We got almost 100
something comments

00:01:09.359 --> 00:01:10.400
I think on the first one.

00:01:10.400 --> 00:01:12.233
We actually read through
them, and we wanted

00:01:12.233 --> 00:01:15.030
to call one out right now.

00:01:15.030 --> 00:01:17.390
FILIP: Yeah, someone
actually found a bug.

00:01:17.390 --> 00:01:20.000
So-- I forgot the name--

00:01:20.000 --> 00:01:26.280
Mihai, Mihai Minola
found a bug in our code.

00:01:26.280 --> 00:01:28.100
So we want to
address that first.

00:01:28.100 --> 00:01:31.220
And then obviously there's
been a lot of other comments,

00:01:31.220 --> 00:01:34.419
mostly pushing us to the
more advanced topics.

00:01:34.419 --> 00:01:36.710
ANDREW: Oh, that's something
else we should talk about.

00:01:36.710 --> 00:01:39.260
FILIP: But first
let's fix the bug.

00:01:39.260 --> 00:01:42.960
So the bug was about this.

00:01:42.960 --> 00:01:46.370
If you look at the app-- so this
is exactly the state of the app

00:01:46.370 --> 00:01:51.570
that we left it when we
stopped developing last time.

00:01:51.570 --> 00:01:53.190
And so we had this app.

00:01:53.190 --> 00:01:57.050
You can open the tile and
then you know click on stuff

00:01:57.050 --> 00:01:59.130
and get somewhere.

00:01:59.130 --> 00:02:02.960
And we also implemented
the fake reloading--

00:02:02.960 --> 00:02:04.580
so if you drag to reload.

00:02:07.770 --> 00:02:09.590
So first of all,
if you reload, it

00:02:09.590 --> 00:02:14.960
will just remove the first
article from the top.

00:02:14.960 --> 00:02:18.450
So where's the code for that?

00:02:18.450 --> 00:02:19.250
Here.

00:02:19.250 --> 00:02:22.034
So article stream of add zero.

00:02:22.034 --> 00:02:22.700
So that's great.

00:02:22.700 --> 00:02:28.460
But watch what the tiles
that are open would they do.

00:02:28.460 --> 00:02:36.300
So when I reload again, the
opened is the next one in the--

00:02:36.300 --> 00:02:40.880
so basically the list
view only remembers

00:02:40.880 --> 00:02:44.780
which number was opened.

00:02:44.780 --> 00:02:49.130
And it still has
that number open,

00:02:49.130 --> 00:02:51.230
which is not what you want.

00:02:51.230 --> 00:02:54.680
You probably want to, if
someone actually reloads things,

00:02:54.680 --> 00:02:57.200
you want to collapse
these things

00:02:57.200 --> 00:03:02.360
or maybe keep the one open
that you had open before.

00:03:05.150 --> 00:03:07.310
So thank you, Mihai,
for putting it this out.

00:03:07.310 --> 00:03:12.260
I didn't see that
until he put it out.

00:03:12.260 --> 00:03:14.620
The fix is simple.

00:03:14.620 --> 00:03:21.680
It's basically you have to
tell the list view the identity

00:03:21.680 --> 00:03:24.620
of each of its children.

00:03:24.620 --> 00:03:28.430
So normally you don't care or
the list view you doesn't care.

00:03:28.430 --> 00:03:33.620
But if you somehow mutate
the items of the list,

00:03:33.620 --> 00:03:38.720
then you want to say,
OK, so this item is x.

00:03:38.720 --> 00:03:42.140
And even if you put
it somewhere else,

00:03:42.140 --> 00:03:44.840
it's still that same item.

00:03:44.840 --> 00:03:48.320
Otherwise, it will just say,
OK, so this item number three

00:03:48.320 --> 00:03:51.960
is item number three even
though we changed the view.

00:03:51.960 --> 00:03:55.430
So anyway so that's why
most widgets, or probably

00:03:55.430 --> 00:03:58.530
all widgets, have
the key argument.

00:03:58.530 --> 00:04:02.180
And you can add a key to it.

00:04:02.180 --> 00:04:06.800
Now the key takes
a string, which

00:04:06.800 --> 00:04:12.140
should be something that is
unique to this particular list

00:04:12.140 --> 00:04:13.250
view.

00:04:13.250 --> 00:04:15.660
So in our case,
it's pretty simple.

00:04:15.660 --> 00:04:21.000
We can do article URL, which
we don't have at this time.

00:04:21.000 --> 00:04:22.070
We'll get to this.

00:04:22.070 --> 00:04:23.930
But let's just use stacks.

00:04:23.930 --> 00:04:27.080
Let's assume that
all the articles

00:04:27.080 --> 00:04:30.690
are unique by the
text of the article.

00:04:30.690 --> 00:04:35.660
And so now if we do
this and we open that,

00:04:35.660 --> 00:04:40.240
it should just clear
the opened thing.

00:04:40.240 --> 00:04:42.950
And that's probably
what you want.

00:04:42.950 --> 00:04:45.440
If you wanted this
to be open, then we

00:04:45.440 --> 00:04:48.370
would need to do
some other stuff.

00:04:48.370 --> 00:04:50.200
But we don't have the time.

00:04:50.200 --> 00:04:52.850
And I think we don't
want to do that.

00:04:52.850 --> 00:04:57.390
This show is about
JSON and JSON--

00:04:57.390 --> 00:04:58.100
JSON.

00:04:58.100 --> 00:05:01.714
ANDREW: Yes, so that's what
we're going to cover today.

00:05:01.714 --> 00:05:03.380
We got a lot of
requests in the comments

00:05:03.380 --> 00:05:05.480
to do something a little
bit more advanced.

00:05:05.480 --> 00:05:08.947
And so we thought JSON
parsing is on the way

00:05:08.947 --> 00:05:10.530
to advanced but still
something you're

00:05:10.530 --> 00:05:13.540
going to see in almost every
app that's using real data.

00:05:13.540 --> 00:05:17.800
Everybody uses JSON these
days to pass things around.

00:05:17.800 --> 00:05:20.626
And so we are also going to talk
about testing a little bit--

00:05:20.626 --> 00:05:22.500
also something that
almost everybody is going

00:05:22.500 --> 00:05:23.799
to run into at some point.

00:05:23.799 --> 00:05:26.340
I don't know a lot about testing
because I just do everything

00:05:26.340 --> 00:05:27.420
perfect the first time.

00:05:27.420 --> 00:05:28.697
FILIP: That's right.

00:05:28.697 --> 00:05:30.530
ANDREW: But Filip knows
a good bit about it.

00:05:30.530 --> 00:05:31.020
FILIP: Yeah, yeah.

00:05:31.020 --> 00:05:32.640
I have to test every--
as you can see,

00:05:32.640 --> 00:05:36.210
I do a lot of [INAUDIBLE],,
so I have to test everything.

00:05:36.210 --> 00:05:40.555
So fortunately for me, as a
pretty good testing framework--

00:05:40.555 --> 00:05:42.930
ANDREW: There's like three
different ways to test, right?

00:05:42.930 --> 00:05:43.763
FILIP: That's right.

00:05:43.763 --> 00:05:49.110
So I mean, Dart itself has
a testing framework called

00:05:49.110 --> 00:05:53.040
package test, which I
think is pretty sweet.

00:05:53.040 --> 00:05:58.470
And then Flutter builds on
that with Flutter test testing

00:05:58.470 --> 00:06:01.050
framework, which
lets you basically

00:06:01.050 --> 00:06:04.500
do kind of headless Flutter.

00:06:04.500 --> 00:06:07.320
And I'll show you
that in a moment.

00:06:07.320 --> 00:06:10.630
And then it has a
Flutter driver thing.

00:06:10.630 --> 00:06:12.750
ANDREW: It's like
full on UI test.

00:06:12.750 --> 00:06:13.740
FILIP: Yes, yes.

00:06:13.740 --> 00:06:16.490
So if you're like familiar
with Selenium on the web,

00:06:16.490 --> 00:06:17.490
that is basically that.

00:06:17.490 --> 00:06:19.030
ANDREW: Do you want to pull up
a testing guide real quick just

00:06:19.030 --> 00:06:20.440
to show it to them, right?

00:06:23.010 --> 00:06:25.200
We have a doc on
flutter.io that actually

00:06:25.200 --> 00:06:27.840
goes into a lot of
these details as well.

00:06:27.840 --> 00:06:28.830
So that's a resource.

00:06:28.830 --> 00:06:33.600
That's flutter.io/testing.

00:06:33.600 --> 00:06:35.100
FILIP: Yeah, I
forgot about this,

00:06:35.100 --> 00:06:39.060
but they even have units versus
widget versus [INAUDIBLE]..

00:06:39.060 --> 00:06:42.600
So here's a widget test.

00:06:42.600 --> 00:06:44.640
And basically this
is a smoke test.

00:06:44.640 --> 00:06:46.860
And the fun thing about this--

00:06:46.860 --> 00:06:50.590
this gets included whenever
you create a new app.

00:06:50.590 --> 00:06:52.950
You have this test with it.

00:06:52.950 --> 00:06:54.850
Since then, we totally
changed the app.

00:06:54.850 --> 00:06:58.290
So this should fail.

00:06:58.290 --> 00:06:59.614
So let's try it.

00:06:59.614 --> 00:07:01.530
ANDREW: Is this built
for the counter example?

00:07:01.530 --> 00:07:02.260
FILIP: Yes.

00:07:02.260 --> 00:07:07.200
So this basically
says, oh, pump widget--

00:07:07.200 --> 00:07:10.330
so everything in
Flutter is a widget.

00:07:10.330 --> 00:07:12.040
So even your app is a widget.

00:07:12.040 --> 00:07:16.260
So you say to the
tester, add this widget.

00:07:16.260 --> 00:07:22.210
And then I expect to find
one widget that says zero

00:07:22.210 --> 00:07:24.180
and no widget that says one.

00:07:24.180 --> 00:07:30.870
And then I want to tap the
thing, which has an icon, which

00:07:30.870 --> 00:07:33.720
is this one, the @ icon.

00:07:33.720 --> 00:07:37.650
And if you know that app,
you know what I mean.

00:07:37.650 --> 00:07:42.460
There is an [INAUDIBLE] that
lets you tap it, or FAB--

00:07:42.460 --> 00:07:43.390
how is it called?

00:07:43.390 --> 00:07:45.060
ANDREW: The Floating
Action Button?

00:07:45.060 --> 00:07:47.560
This is the default app that
we're talking about if you just

00:07:47.560 --> 00:07:48.700
go new project and Flutter.

00:07:48.700 --> 00:07:50.850
FILIP: And then so you
tap it and then you

00:07:50.850 --> 00:07:57.150
say tester pump, which tells
to the testing framework, hey,

00:07:57.150 --> 00:07:59.069
do things.

00:07:59.069 --> 00:07:59.860
ANDREW: Run a loop.

00:07:59.860 --> 00:08:01.010
Run a cycle.

00:08:01.010 --> 00:08:06.540
FILIP: Yeah, and then
it expects one widget

00:08:06.540 --> 00:08:09.630
to say one and zero
which is to say zero.

00:08:09.630 --> 00:08:13.780
And so that already has five.

00:08:13.780 --> 00:08:16.470
So this failed very soon.

00:08:16.470 --> 00:08:19.890
It failed on number
18, which is the very

00:08:19.890 --> 00:08:24.090
first expect because there's
no widget anywhere here that

00:08:24.090 --> 00:08:26.070
says just zero.

00:08:26.070 --> 00:08:30.300
So we want to change this test.

00:08:30.300 --> 00:08:33.799
We still want to do my app.

00:08:33.799 --> 00:08:35.090
We don't need new now.

00:08:35.090 --> 00:08:40.500
And what I'm going to
test is simply just

00:08:40.500 --> 00:08:44.650
that, if I click on
the tile, it will open.

00:08:44.650 --> 00:08:49.595
And how I'm going to-- so
clicking a tile opens it.

00:08:49.595 --> 00:08:51.720
ANDREW: I don't think I've
ever done a widget test.

00:08:51.720 --> 00:08:54.170
This is actually
good for me as well.

00:08:54.170 --> 00:08:58.830
FILIP: So it's all
asynchronous, obviously.

00:08:58.830 --> 00:09:01.140
So you want to
do-- so first let's

00:09:01.140 --> 00:09:06.030
expect that you get
this nice object that

00:09:06.030 --> 00:09:07.690
lets you find things.

00:09:07.690 --> 00:09:16.540
So find by type, and that's
going to be an expansion tile.

00:09:16.540 --> 00:09:19.680
And that should be--

00:09:19.680 --> 00:09:20.280
wait, what?

00:09:20.280 --> 00:09:21.210
No.

00:09:21.210 --> 00:09:22.020
No, no, no.

00:09:22.020 --> 00:09:23.370
What I want to do--

00:09:23.370 --> 00:09:28.050
so let me walk you through
what I have in mind.

00:09:28.050 --> 00:09:34.710
We expect that there is
no launcher icon here.

00:09:34.710 --> 00:09:38.730
First we need to make sure
that we are not actually having

00:09:38.730 --> 00:09:43.170
a false positive.

00:09:43.170 --> 00:09:46.830
So we want to know that there
is none of these at first,

00:09:46.830 --> 00:09:48.185
which there isn't.

00:09:48.185 --> 00:09:49.470
ANDREW: Ah, I see.

00:09:49.470 --> 00:09:53.820
FILIP: And then we click, and
then we find out that there is.

00:09:53.820 --> 00:09:54.570
ANDREW: Hopefully.

00:09:54.570 --> 00:09:55.111
FILIP: Right.

00:09:58.560 --> 00:10:01.140
So we want to find
by icon, I guess.

00:10:01.140 --> 00:10:08.730
So find by icon, and it should
be the launch icon, which

00:10:08.730 --> 00:10:10.190
is helpful [INAUDIBLE].

00:10:10.190 --> 00:10:11.503
ANDREW: Yeah, it's so
nice to get those previews

00:10:11.503 --> 00:10:12.669
in the icons and the colors.

00:10:12.669 --> 00:10:16.140
FILIP: And finds nothing.

00:10:16.140 --> 00:10:22.470
And then we do a
way to tester tap,

00:10:22.470 --> 00:10:27.920
and again we find
by type this time.

00:10:27.920 --> 00:10:29.710
And it's going to be
the expansion tile.

00:10:29.710 --> 00:10:32.320
That's what I was
going to do next.

00:10:32.320 --> 00:10:34.410
And this will find many things.

00:10:37.140 --> 00:10:42.240
So we want to say either
just click on the first one.

00:10:42.240 --> 00:10:44.230
Let's just click
on the first one.

00:10:44.230 --> 00:10:47.130
And yeah, that's it.

00:10:47.130 --> 00:10:52.050
And then we need
to do tester pump.

00:10:52.050 --> 00:10:54.480
I'll get to pump
[INAUDIBLE] soon.

00:10:54.480 --> 00:11:04.690
And then we want to expect that
this finds exactly one widget.

00:11:04.690 --> 00:11:06.900
And now we can run it.

00:11:06.900 --> 00:11:10.980
And so you'll see this doesn't
run this on the emulator.

00:11:10.980 --> 00:11:14.060
It just creates its own
kind of Flutter framework

00:11:14.060 --> 00:11:14.790
and this passed.

00:11:17.930 --> 00:11:19.940
And that Flutter
framework kind of

00:11:19.940 --> 00:11:22.370
like-- so it has
everything in it.

00:11:22.370 --> 00:11:25.400
It should be the
exact same thing

00:11:25.400 --> 00:11:31.070
as what you run in the emulator
or in an actual device.

00:11:31.070 --> 00:11:35.420
What I'm going to do is we
can actually-- so you can do

00:11:35.420 --> 00:11:37.550
Flutter test, which I just did.

00:11:37.550 --> 00:11:40.160
And so most of
this, this is just

00:11:40.160 --> 00:11:42.380
waiting for the testing
framework to go on.

00:11:42.380 --> 00:11:46.745
And then the actual test
runs in milliseconds.

00:11:46.745 --> 00:11:48.530
ANDREW: We should up that font.

00:11:48.530 --> 00:11:50.026
FILIP: Oh, yes.

00:11:50.026 --> 00:11:51.259
ANDREW: There we go.

00:11:51.259 --> 00:11:52.800
FILIP: Oh, maybe
not so [INAUDIBLE]..

00:11:52.800 --> 00:11:53.240
ANDREW: That's all right.

00:11:53.240 --> 00:11:54.823
We're just looking
at this bit anyway.

00:11:58.160 --> 00:12:02.910
FILIP: But you can do
Flutter run test, which it

00:12:02.910 --> 00:12:05.950
tests, and look what happens.

00:12:05.950 --> 00:12:09.480
A whole-- well,
another thing here.

00:12:09.480 --> 00:12:10.980
So I don't want--

00:12:10.980 --> 00:12:11.587
we'll see.

00:12:11.587 --> 00:12:13.670
ANDREW: So it's actually
running it on device now.

00:12:13.670 --> 00:12:15.030
Before it was not.

00:12:15.030 --> 00:12:16.110
FILIP: Yes.

00:12:16.110 --> 00:12:18.180
So this is syncing files.

00:12:18.180 --> 00:12:22.250
And look what happens when I--

00:12:22.250 --> 00:12:25.500
I really need to do this.

00:12:25.500 --> 00:12:29.159
Now I'll halt reload
or halt restart

00:12:29.159 --> 00:12:30.367
and it's going to do [SOUND].

00:12:34.330 --> 00:12:36.540
It made the test.

00:12:36.540 --> 00:12:39.376
Well, let me show it again.

00:12:39.376 --> 00:12:41.299
[SOUND]

00:12:41.299 --> 00:12:43.340
ANDREW: That's Filip making
the noise by the way.

00:12:43.340 --> 00:12:44.550
That is not part of Flutter.

00:12:44.550 --> 00:12:46.780
FILIP: Yeah, that's not
part of Flutter, yeah.

00:12:46.780 --> 00:12:48.610
ANDREW: I'm enjoying
these unescaped color

00:12:48.610 --> 00:12:50.000
codes in the input.

00:12:50.000 --> 00:12:51.110
That's interesting.

00:12:51.110 --> 00:12:55.410
FILIP: So that's not
what you normally run.

00:12:55.410 --> 00:12:59.050
This is for you to make sure
that this does what exactly

00:12:59.050 --> 00:13:00.590
you want this to be.

00:13:00.590 --> 00:13:03.490
So one thing that
why it's so fast

00:13:03.490 --> 00:13:10.540
is that it's a tap,
and then Flutter

00:13:10.540 --> 00:13:12.760
runs one frame, basically.

00:13:12.760 --> 00:13:15.760
And then by that
time, because we

00:13:15.760 --> 00:13:17.440
don't have any
fancy animation that

00:13:17.440 --> 00:13:22.960
will create the state that we
want to see after sometime,

00:13:22.960 --> 00:13:25.120
but it will instantly
create the state

00:13:25.120 --> 00:13:27.160
and then it will animate to it.

00:13:27.160 --> 00:13:29.710
So we can use pump,
and it's very fast.

00:13:29.710 --> 00:13:32.590
If you have, and
you will often have,

00:13:32.590 --> 00:13:36.640
something like, oh, I click here
and then there's an animation,

00:13:36.640 --> 00:13:40.600
and then after that animation
something gets created

00:13:40.600 --> 00:13:43.990
and I want to do that,
you do pump and settle,

00:13:43.990 --> 00:13:48.440
which will run more fluidly.

00:13:48.440 --> 00:13:51.070
ANDREW: So Flutter has-- it's
a single threaded, Dart single

00:13:51.070 --> 00:13:51.890
threaded, right?

00:13:51.890 --> 00:13:53.473
Let me make sure
I've got all of this.

00:13:53.473 --> 00:13:54.700
So you run your Flutter app.

00:13:54.700 --> 00:13:56.940
You have one thread that's
doing an event loop,

00:13:56.940 --> 00:13:58.440
waiting for events
from the outside.

00:13:58.440 --> 00:14:00.460
Then you also have a
microtask queue, I think,

00:14:00.460 --> 00:14:01.630
which I sort of understand.

00:14:01.630 --> 00:14:03.340
But you mainly have one thread.

00:14:03.340 --> 00:14:05.410
So every time you
hit pump, it's going

00:14:05.410 --> 00:14:09.801
to do one go round and process
the top most events, I guess.

00:14:09.801 --> 00:14:10.300
FILIP: Yes.

00:14:10.300 --> 00:14:12.670
ANDREW: But if you do pump
and settle, it will start

00:14:12.670 --> 00:14:15.280
and then it keeps going until
there is no more events to go

00:14:15.280 --> 00:14:16.810
through, and then it'll stop.

00:14:16.810 --> 00:14:17.890
FILIP: Yes.

00:14:17.890 --> 00:14:22.270
Let me show you
how that-- so now

00:14:22.270 --> 00:14:28.390
our test still runs and should
just finish with a success.

00:14:31.440 --> 00:14:33.610
If it was a lot of
pump and settles,

00:14:33.610 --> 00:14:38.890
it might take a little more time
because it does these things.

00:14:38.890 --> 00:14:41.300
So for our testing,
we don't need this.

00:14:41.300 --> 00:14:47.500
But for our you to see what's
actually happening now if I

00:14:47.500 --> 00:14:49.780
perform [INAUDIBLE],,
you should see the--

00:14:49.780 --> 00:14:50.770
did you see it?

00:14:50.770 --> 00:14:53.500
You should see the
whole interaction

00:14:53.500 --> 00:14:57.520
because it actually waits
for this to complete.

00:14:57.520 --> 00:15:01.390
And you can even, if
you're very good at this,

00:15:01.390 --> 00:15:06.060
you can see a little
target where it's tapped.

00:15:06.060 --> 00:15:12.420
[SOUND] So anyway,
our tests are passing.

00:15:12.420 --> 00:15:19.350
So let me go back to here,
and I don't need this.

00:15:19.350 --> 00:15:21.750
Oh, and by the way, you
can do things like--

00:15:21.750 --> 00:15:28.170
I want to wait for a duration
of nine days for this to finish,

00:15:28.170 --> 00:15:31.290
and it will still
finish in milliseconds

00:15:31.290 --> 00:15:35.690
because it's all fake.

00:15:35.690 --> 00:15:37.300
ANDREW: It'll fake
a clock too, right?

00:15:37.300 --> 00:15:38.550
When you're doing these tests.

00:15:38.550 --> 00:15:40.080
FILIP: Yes.

00:15:40.080 --> 00:15:42.840
But yeah, as I said,
we only need this.

00:15:42.840 --> 00:15:46.085
And we have our widget test.

00:15:46.085 --> 00:15:46.710
So that's cool.

00:15:47.896 --> 00:15:51.360
And now obviously we would
test it on development.

00:15:51.360 --> 00:15:57.230
So what we want to do is, if
we're going to focus on JSON

00:15:57.230 --> 00:15:59.870
and parsing in general and
getting things from network--

00:15:59.870 --> 00:16:01.920
but this comes later--

00:16:01.920 --> 00:16:03.720
we want to start with a test.

00:16:03.720 --> 00:16:07.885
And then it will fail, and
then you will implement that.

00:16:07.885 --> 00:16:09.510
ANDREW: And then we
can do some coding.

00:16:09.510 --> 00:16:10.680
FILIP: And we can
do some coding.

00:16:10.680 --> 00:16:12.090
ANDREW: Because we're
very responsible people,

00:16:12.090 --> 00:16:13.350
and we always code this way.

00:16:13.350 --> 00:16:15.310
FILIP: Yes, always, of course.

00:16:15.310 --> 00:16:25.350
So JSON test-- this is
going to be I think--

00:16:25.350 --> 00:16:28.237
because this has nothing
to do with Flutter.

00:16:28.237 --> 00:16:29.070
We're just passing--

00:16:29.070 --> 00:16:29.870
ANDREW: Yeah, this is
just straight up Dart.

00:16:29.870 --> 00:16:31.494
It's supposed to be
a unit test, right?

00:16:31.494 --> 00:16:38.265
FILIP: So, this is going
to be a test, a unit test.

00:16:42.010 --> 00:16:47.840
And so parse this--

00:16:47.840 --> 00:16:50.182
do we want to talk about
the Hacker News API?

00:16:50.182 --> 00:16:50.890
ANDREW: Oh, yeah.

00:16:50.890 --> 00:16:52.050
You want to pull it up?

00:16:52.050 --> 00:16:53.290
FILIP: Yup.

00:16:53.290 --> 00:16:56.970
ANDREW: So the fine folks
at Hacker News and Firebase,

00:16:56.970 --> 00:16:58.600
this is their API.

00:16:58.600 --> 00:17:01.980
And so there are two calls here
that we're mostly concerned

00:17:01.980 --> 00:17:02.480
with.

00:17:02.480 --> 00:17:04.630
So there's the way that
Hacker News does their API.

00:17:04.630 --> 00:17:06.140
They basically just
take all their f

00:17:06.140 --> 00:17:07.806
objects, which I
assume are just sitting

00:17:07.806 --> 00:17:10.119
in a hash table, a distributed
hash table somewhere.

00:17:10.119 --> 00:17:13.089
And they just sort of dump
them into this API as is.

00:17:13.089 --> 00:17:15.700
So there are two calls
that we're concerned about.

00:17:15.700 --> 00:17:19.349
There's one that gets you
the top stories by ID.

00:17:19.349 --> 00:17:21.026
FILIP: Yes, so
something like this.

00:17:21.026 --> 00:17:23.109
ANDREW: And actually click
it, and we can actually

00:17:23.109 --> 00:17:25.140
see exactly what it is.

00:17:25.140 --> 00:17:25.880
There we go.

00:17:25.880 --> 00:17:27.960
So right now those are
the IDs of the top,

00:17:27.960 --> 00:17:31.150
I think, 500 or so
stories on Hacker News.

00:17:31.150 --> 00:17:33.430
So we would want to
get that because that's

00:17:33.430 --> 00:17:34.480
what we're displaying.

00:17:34.480 --> 00:17:36.760
So we get those IDs, and
then there's a second call,

00:17:36.760 --> 00:17:38.980
if we back up one.

00:17:38.980 --> 00:17:41.740
And I think you had it up above.

00:17:41.740 --> 00:17:44.320
There's get a story by ID.

00:17:44.320 --> 00:17:45.640
FILIP: Right, like this.

00:17:45.640 --> 00:17:47.852
ANDREW: And so this
is a single story,

00:17:47.852 --> 00:17:49.060
and you can fetch that by ID.

00:17:49.060 --> 00:17:52.360
You can see, I
think, it's 8863 is

00:17:52.360 --> 00:17:53.750
the ID for this one and the URL.

00:17:53.750 --> 00:17:55.625
And of course, this is
the famous Hacker News

00:17:55.625 --> 00:17:56.800
post that announced Dropbox.

00:18:00.640 --> 00:18:02.860
And so we need to
get a list of ints.

00:18:02.860 --> 00:18:03.750
That's the first one.

00:18:03.750 --> 00:18:08.175
And then we need to be able to
get this object multiple times,

00:18:08.175 --> 00:18:09.550
multiple different
ones of these,

00:18:09.550 --> 00:18:14.380
and then deserialize that
data into off the wire

00:18:14.380 --> 00:18:16.420
into one of our
article objects that we

00:18:16.420 --> 00:18:17.560
made in the first episode.

00:18:17.560 --> 00:18:19.780
So we'll be focusing
on that work,

00:18:19.780 --> 00:18:22.107
I think, for the most of
the rest of this episode.

00:18:22.107 --> 00:18:23.690
And so those are the
two things we do.

00:18:23.690 --> 00:18:28.210
So we'll need a function to
take a string representation

00:18:28.210 --> 00:18:30.340
of a JSON list of ints.

00:18:30.340 --> 00:18:34.650
FILIP: So parses--
how do they call it?

00:18:34.650 --> 00:18:36.999
They call this top stories?

00:18:36.999 --> 00:18:37.540
ANDREW: Yeah.

00:18:37.540 --> 00:18:42.900
FILIP: Top stories, JSON.

00:18:42.900 --> 00:18:47.370
So testing framework--
it just takes

00:18:47.370 --> 00:18:51.090
a bunch of tests that
are done by this,

00:18:51.090 --> 00:18:53.110
and then it has expects in that.

00:18:53.110 --> 00:18:58.350
So we want to have
something like--

00:18:58.350 --> 00:19:03.770
let me actually take this.

00:19:03.770 --> 00:19:06.360
Maybe I don't want
to [INAUDIBLE]..

00:19:06.360 --> 00:19:15.240
So we have JSON string.

00:19:15.240 --> 00:19:17.470
ANDREW: Yeah, just a
giant string constant.

00:19:21.230 --> 00:19:22.340
FILIP: So that's that.

00:19:22.340 --> 00:19:29.040
And then we want to expect.

00:19:29.040 --> 00:19:30.010
Let's just say--

00:19:30.010 --> 00:19:30.800
OK.

00:19:30.800 --> 00:19:33.050
ANDREW: We're going to have
to put a method somewhere.

00:19:33.050 --> 00:19:37.970
FILIP: Yes, so
parse top stories is

00:19:37.970 --> 00:19:40.460
going to be a method
that we don't have yet,

00:19:40.460 --> 00:19:42.680
that takes that string.

00:19:42.680 --> 00:19:47.261
And we want to expect that the--

00:19:47.261 --> 00:19:47.760
oh.

00:19:50.990 --> 00:19:53.920
ANDREW: What are we
actually testing?

00:19:53.920 --> 00:19:56.260
FILIP: We are hopefully
testing that it--

00:19:56.260 --> 00:19:59.140
for example, the
first one of these--

00:19:59.140 --> 00:20:04.460
OK, so first is this.

00:20:04.460 --> 00:20:07.000
I know it's not the perfect,
best test, but you know.

00:20:11.010 --> 00:20:12.490
So now we need to
implement this.

00:20:15.010 --> 00:20:16.544
I'm going to add it here.

00:20:16.544 --> 00:20:18.460
ANDREW: Well, do you
want to go ahead the test

00:20:18.460 --> 00:20:19.960
for the second case?

00:20:19.960 --> 00:20:21.430
Then we can do
them both at once.

00:20:24.080 --> 00:20:25.670
FILIP: You're
feeling adventurous.

00:20:25.670 --> 00:20:26.800
ANDREW: Oh, that way
we have the test done,

00:20:26.800 --> 00:20:28.180
and then we can go
to our other file.

00:20:28.180 --> 00:20:29.290
FILIP: Yeah, that's true.

00:20:29.290 --> 00:20:43.450
So item looks like
something like this.

00:20:43.450 --> 00:20:44.640
And again, I don't--

00:20:44.640 --> 00:20:46.431
ANDREW: Yeah, take the
pretty printing off.

00:20:50.350 --> 00:20:52.660
FILIP: And so the JSON
string is going to be--

00:20:56.930 --> 00:21:01.690
this is broken because
we are [INAUDIBLE] this.

00:21:01.690 --> 00:21:03.622
ANDREW: The joy
of single quotes.

00:21:03.622 --> 00:21:05.080
FILIP: Are there
any single quotes?

00:21:05.080 --> 00:21:06.220
Because if so--

00:21:06.220 --> 00:21:08.800
ANDREW: No, there shouldn't be.

00:21:08.800 --> 00:21:12.609
FILIP: So another trick is
just to do something like--

00:21:12.609 --> 00:21:13.650
ANDREW: Oh, that's right.

00:21:13.650 --> 00:21:16.730
You can do the triple quote.

00:21:16.730 --> 00:21:20.670
FILIP: And for
the sake of space,

00:21:20.670 --> 00:21:22.724
I'm going to do [INAUDIBLE].

00:21:27.400 --> 00:21:29.632
And this should be parse item.

00:21:29.632 --> 00:21:31.840
ANDREW: Yeah, they're for
[INAUDIBLE] items, I think.

00:21:31.840 --> 00:21:35.030
Because in this API, everything
is one of these objects--

00:21:35.030 --> 00:21:37.720
like comments and polls
and stories, they're all--

00:21:37.720 --> 00:21:41.950
FILIP: I wonder if like,
if in this function,

00:21:41.950 --> 00:21:44.530
we're going to assume that
this is an article and not

00:21:44.530 --> 00:21:49.630
a comment, we should call it
parse article and not item.

00:21:49.630 --> 00:21:51.950
So like this.

00:21:51.950 --> 00:21:56.590
And this should say
something like, oh--

00:21:56.590 --> 00:21:59.150
ANDREW: Does not
generate exception.

00:21:59.150 --> 00:22:01.750
FILIP: That's one,
but let's assume

00:22:01.750 --> 00:22:06.790
that we will have a by,
maybe, field on that.

00:22:06.790 --> 00:22:11.180
So this will give us an
article, and the by field

00:22:11.180 --> 00:22:13.125
it should be D. Houston.

00:22:19.370 --> 00:22:27.030
So now on to a new
class, I guess.

00:22:27.030 --> 00:22:29.280
ANDREW: Yes, where do
you want to put these?

00:22:29.280 --> 00:22:31.580
FILIP: So I was
thinking we'll just lip.

00:22:31.580 --> 00:22:33.322
But we could do-- well, yeah--

00:22:33.322 --> 00:22:35.780
ANDREW: I mean, if we're just
if we're just working out how

00:22:35.780 --> 00:22:38.071
to do the JSON-- we're not
really touching on app state

00:22:38.071 --> 00:22:40.040
stuff yet--

00:22:40.040 --> 00:22:42.560
we could just put these as top
level functions in some file.

00:22:42.560 --> 00:22:43.268
FILIP: Sure, yes.

00:22:43.268 --> 00:22:44.582
Yes.

00:22:44.582 --> 00:22:47.300
But, oh, yeah.

00:22:47.300 --> 00:22:48.670
So JSON parsing?

00:22:48.670 --> 00:22:51.180
ANDREW: Yeah, I mean, this is
going to be a short-lived file

00:22:51.180 --> 00:22:51.680
anyway.

00:22:51.680 --> 00:22:56.870
We'll rip this out once we
move on to something more--

00:22:56.870 --> 00:22:59.510
FILIP: And I just want
to make sure of that--

00:22:59.510 --> 00:23:05.632
so this should give you
[INAUDIBLE] list of end.

00:23:05.632 --> 00:23:11.026
It's called top stories,
and it's a string of JSON.

00:23:11.026 --> 00:23:13.267
And this should [INAUDIBLE].

00:23:13.267 --> 00:23:14.600
ANDREW: Is there an unimplement?

00:23:14.600 --> 00:23:15.140
There is.

00:23:19.590 --> 00:23:23.390
FILIP: And the next one
should have an article.

00:23:23.390 --> 00:23:26.600
ANDREW: Which we're going
to need an import for that--

00:23:26.600 --> 00:23:27.612
article.dart.

00:23:31.550 --> 00:23:35.210
FILIP: So parse article,
again, string of JSON,

00:23:35.210 --> 00:23:40.005
and throw an
unimplemented error.

00:23:43.400 --> 00:23:48.540
And we need to import this.

00:23:48.540 --> 00:23:49.040
Cool.

00:23:49.040 --> 00:23:49.850
ANDREW: Boom.

00:23:49.850 --> 00:23:54.151
FILIP: So now I just
want to run this test.

00:23:54.151 --> 00:23:55.400
ANDREW: And so this will fail.

00:23:55.400 --> 00:23:57.141
FILIP: This will fail miserably.

00:23:57.141 --> 00:23:59.140
ANDREW: How do you catch
an exception on a test,

00:23:59.140 --> 00:24:00.848
like if you know it's
going to throw one?

00:24:00.848 --> 00:24:01.810
FILIP: Oh, yeah, it's--

00:24:01.810 --> 00:24:03.810
ANDREW: It's like except
exception or something?

00:24:03.810 --> 00:24:05.410
FILIP: Yes, throws.

00:24:05.410 --> 00:24:08.230
And you could say,
throws something,

00:24:08.230 --> 00:24:11.320
like throw at whatever error.

00:24:11.320 --> 00:24:13.960
ANDREW: I often throw
cyclic initialization errors

00:24:13.960 --> 00:24:14.630
in my code.

00:24:14.630 --> 00:24:15.820
So that's cool.

00:24:15.820 --> 00:24:16.900
I do that all the time.

00:24:16.900 --> 00:24:18.640
FILIP: Yes, that's a feature?

00:24:18.640 --> 00:24:22.310
So do you want to take over?

00:24:22.310 --> 00:24:23.560
ANDREW: Yeah, we could switch.

00:24:23.560 --> 00:24:24.790
Do you want to do an effect?

00:24:24.790 --> 00:24:27.420
We can just like switch?

00:24:27.420 --> 00:24:28.562
FILIP: That was it?

00:24:28.562 --> 00:24:30.020
ANDREW: They can
cut this part out.

00:24:30.020 --> 00:24:30.670
It'll look awesome.

00:24:30.670 --> 00:24:31.170
FILIP: Yeah.

00:24:34.135 --> 00:24:35.260
ANDREW: And we're switched.

00:24:38.920 --> 00:24:41.440
So now my job is to go
back to JSON parsing here,

00:24:41.440 --> 00:24:42.550
and parse some JSON.

00:24:42.550 --> 00:24:43.510
FILIP: Yes.

00:24:43.510 --> 00:24:46.530
ANDREW: OK, so let's start
with the list of ints.

00:24:46.530 --> 00:24:48.610
So let's get rid of this.

00:24:48.610 --> 00:24:52.120
And the first thing I need
to do is take the string

00:24:52.120 --> 00:24:54.100
and parse it as JSON.

00:24:54.100 --> 00:24:57.544
For that, we need
the handy-dandy Dart

00:24:57.544 --> 00:24:58.210
convert library.

00:25:01.276 --> 00:25:04.730
Thank god that's the
first result. There we go.

00:25:04.730 --> 00:25:07.120
So the Dart convert
library can do this for me.

00:25:07.120 --> 00:25:09.329
And this is built in.

00:25:09.329 --> 00:25:11.370
This is not a package I
have to go get it, right?

00:25:11.370 --> 00:25:12.500
FILIP: Yup.

00:25:12.500 --> 00:25:19.160
ANDREW: So let me go back in
here, import Dart convert.

00:25:19.160 --> 00:25:21.371
There we go.

00:25:21.371 --> 00:25:21.870
Cool.

00:25:21.870 --> 00:25:25.040
So now we can
convert some stuff.

00:25:25.040 --> 00:25:27.150
And so what I'm going
to use Dart convert for

00:25:27.150 --> 00:25:32.910
is just to take the string and
generate that map of strings

00:25:32.910 --> 00:25:33.655
to dynamics.

00:25:33.655 --> 00:25:36.030
It's a pretty popular pattern
in a lot of languages where

00:25:36.030 --> 00:25:39.632
you take a string of JSON,
give me a map with all

00:25:39.632 --> 00:25:40.340
the fields in it.

00:25:43.710 --> 00:25:49.280
FILIP: So yeah, so while
Andrew is working on this,

00:25:49.280 --> 00:25:52.470
I think what we want to do is
first show you the most basic

00:25:52.470 --> 00:25:53.775
way to parse these.

00:25:53.775 --> 00:25:55.650
ANDREW: Oh, that's a good point.

00:25:55.650 --> 00:26:01.580
FILIP: And so that's the one
that you get with Dart itself.

00:26:01.580 --> 00:26:04.710
And then, if we
have time, we want

00:26:04.710 --> 00:26:08.179
to show how to do this
in a more robust way.

00:26:08.179 --> 00:26:09.720
ANDREW: Yeah, so
that's a good point.

00:26:09.720 --> 00:26:13.380
So yeah, this is sort of
the quick and easy roll

00:26:13.380 --> 00:26:17.340
your own conversion logic
way of parsing JSON and Dart.

00:26:17.340 --> 00:26:18.520
Once we get this done--

00:26:18.520 --> 00:26:19.380
and we should have--

00:26:19.380 --> 00:26:21.889
I think we're about 20 minutes
in now, a little bit more--

00:26:21.889 --> 00:26:23.430
we should have time
to at least go on

00:26:23.430 --> 00:26:28.770
to talk about built value, which
is a package that a guy named

00:26:28.770 --> 00:26:31.550
David Morgan, I think, is
the chief contributor on.

00:26:31.550 --> 00:26:33.450
It's obviously open
source Dart package.

00:26:33.450 --> 00:26:36.690
You can find it on GitHub
and the Package Manager Pub.

00:26:36.690 --> 00:26:38.910
And that provides
a couple of things.

00:26:38.910 --> 00:26:41.280
It provides immutable
objects that use builders,

00:26:41.280 --> 00:26:46.830
and it provides a very flexible
plugin-based serialization

00:26:46.830 --> 00:26:51.540
and deserialization
architecture.

00:26:51.540 --> 00:26:53.239
But it is much more
complicated to talk

00:26:53.239 --> 00:26:54.780
about than this one,
which is pretty,

00:26:54.780 --> 00:26:57.000
like, I'll just write
six lines of code

00:26:57.000 --> 00:26:59.242
and it's done kind of a deal.

00:26:59.242 --> 00:27:01.700
While we're stopped, do you
want to talk about our hashtag?

00:27:01.700 --> 00:27:03.780
Now might be a good time
because we didn't do that yet.

00:27:03.780 --> 00:27:04.279
FILIP: Yeah.

00:27:04.279 --> 00:27:07.428
ANDREW: We have a hashtag.

00:27:07.428 --> 00:27:10.050
This is our hashtag--
#BoringShow.

00:27:10.050 --> 00:27:13.132
Since this is a little bit about
having ongoing communication

00:27:13.132 --> 00:27:14.590
with you guys out
in the community,

00:27:14.590 --> 00:27:18.094
we wanted to make sure
that you can put comments

00:27:18.094 --> 00:27:18.760
on these videos.

00:27:18.760 --> 00:27:20.070
We do look at the comments.

00:27:20.070 --> 00:27:23.420
You can tweet about us
using #BoringShow and things

00:27:23.420 --> 00:27:23.920
like that.

00:27:23.920 --> 00:27:25.380
If you have questions
about Flutter

00:27:25.380 --> 00:27:27.750
or things you'd
like to us cover,

00:27:27.750 --> 00:27:29.550
let us know and we can
look through these.

00:27:29.550 --> 00:27:31.210
And like if we see a
question, we're like,

00:27:31.210 --> 00:27:32.751
oh, we know how to
answer that and it

00:27:32.751 --> 00:27:35.760
would be good to talk
about on the Boring Show,

00:27:35.760 --> 00:27:37.725
if we have time, we'll
answer it right here.

00:27:37.725 --> 00:27:40.431
So this is a good way for us to
have a little back and forth.

00:27:40.431 --> 00:27:40.930
FILIP: Yes.

00:27:40.930 --> 00:27:43.530
ANDREW: So #BoringShow.

00:27:43.530 --> 00:27:46.159
All right, so
first things first.

00:27:46.159 --> 00:27:47.700
I'm going to use
Dart convert to take

00:27:47.700 --> 00:27:51.300
the string that got the JSON
in it and get it into a map.

00:27:51.300 --> 00:27:54.240
So do I'll final parsed equals,
and then I'll do, I think,

00:27:54.240 --> 00:27:55.260
it's JSON.decode.

00:27:58.300 --> 00:28:00.630
It'll give it that.

00:28:00.630 --> 00:28:01.130
FILIP: Ooh.

00:28:01.130 --> 00:28:02.740
ANDREW: Oh, already messed up.

00:28:02.740 --> 00:28:07.240
FILIP: No, just that
we have a thing here.

00:28:07.240 --> 00:28:11.470
So either you import the
convert with as something--

00:28:11.470 --> 00:28:12.350
ANDREW: There we go.

00:28:12.350 --> 00:28:13.392
That's [INAUDIBLE].

00:28:13.392 --> 00:28:14.600
I'm not going to rename this.

00:28:20.110 --> 00:28:22.480
Hold on.

00:28:22.480 --> 00:28:23.170
JSON decode.

00:28:23.170 --> 00:28:25.588
There we go.

00:28:25.588 --> 00:28:27.420
Oh, I'm still not used
to importing things

00:28:27.420 --> 00:28:29.340
by name like that.

00:28:29.340 --> 00:28:31.040
FILIP: No, this is great.

00:28:31.040 --> 00:28:34.760
So there's going
to be times when--

00:28:34.760 --> 00:28:36.140
this happens to
me all the time--

00:28:36.140 --> 00:28:37.930
when we have things that--

00:28:37.930 --> 00:28:38.780
how do you call it?

00:28:38.780 --> 00:28:39.800
Naming conflicts.

00:28:39.800 --> 00:28:42.150
So that's how you do this.

00:28:42.150 --> 00:28:47.975
In Dart, you just
import with a prefix.

00:28:47.975 --> 00:28:51.040
Cool, so we're done?

00:28:51.040 --> 00:28:51.650
ANDREW: No.

00:28:51.650 --> 00:28:56.701
So we parse it into-- this
should be a map at this point,

00:28:56.701 --> 00:28:57.200
I believe.

00:28:57.200 --> 00:28:59.060
We can look in here.

00:28:59.060 --> 00:29:00.270
That gives me a dynamic.

00:29:00.270 --> 00:29:02.164
It will contain my--

00:29:02.164 --> 00:29:03.955
or actually this will
be a list because I'm

00:29:03.955 --> 00:29:05.390
deconstructing a list.

00:29:05.390 --> 00:29:08.080
FILIP: But you need to tell--

00:29:08.080 --> 00:29:09.042
oh, yeah.

00:29:09.042 --> 00:29:11.500
ANDREW: Oh, you don't have your
scrolling redone like I do.

00:29:11.500 --> 00:29:12.000
There we go.

00:29:15.250 --> 00:29:19.097
And so now that we have a
list of ints at this point

00:29:19.097 --> 00:29:20.930
that we've parsed out,
we need to convert it

00:29:20.930 --> 00:29:24.380
into a typed list of
ints, which we can do as--

00:29:27.290 --> 00:29:28.576
you OK?

00:29:28.576 --> 00:29:34.250
FILIP: No, I'm just realizing
how many custom things I

00:29:34.250 --> 00:29:37.620
have on my ID that will now
have to fight, and I'm sorry.

00:29:37.620 --> 00:29:38.370
ANDREW: That's OK.

00:29:41.011 --> 00:29:43.010
So also I misspoke earlier
when I said that we'd

00:29:43.010 --> 00:29:44.330
be decoding into a map.

00:29:44.330 --> 00:29:47.700
If the JSON decoder
sees a list of items,

00:29:47.700 --> 00:29:51.225
you will get a list
back rather than a map.

00:29:51.225 --> 00:29:52.850
And so I'm going to
get a dynamic here,

00:29:52.850 --> 00:29:56.200
and in that, which means not
considered strongly typed.

00:29:56.200 --> 00:29:58.280
I'm going to convert
that dynamic, which

00:29:58.280 --> 00:30:01.160
is holding a list of ints into
a strongly typed list of ints

00:30:01.160 --> 00:30:02.480
so that I can use it as one.

00:30:02.480 --> 00:30:05.752
And that's what I'm doing here.

00:30:05.752 --> 00:30:08.622
So let's call list
of IDs equals--

00:30:08.622 --> 00:30:09.830
and I'm going to make a copy.

00:30:09.830 --> 00:30:10.860
That's how I'm going to do that.

00:30:10.860 --> 00:30:11.930
So I'm going to do list--

00:30:11.930 --> 00:30:13.530
so int.

00:30:13.530 --> 00:30:19.560
I'm going to say from my
parsed dynamic list, like that.

00:30:19.560 --> 00:30:23.570
And so now I'm taking that list
that I got from Dart convert,

00:30:23.570 --> 00:30:25.690
and I made a copy of it
that is strongly typed

00:30:25.690 --> 00:30:28.240
and that I can treat
as a list of integers.

00:30:28.240 --> 00:30:31.360
And this is a bit verbose,
but I'm going to return it.

00:30:31.360 --> 00:30:33.940
FILIP: [? SharePoint. ?]

00:30:33.940 --> 00:30:35.021
ANDREW: Just like that.

00:30:35.021 --> 00:30:36.520
And so let's put a
breakpoint in it.

00:30:36.520 --> 00:30:37.620
Can we put breakpoints in tests?

00:30:37.620 --> 00:30:38.550
We can do that, right?

00:30:38.550 --> 00:30:39.300
FILIP: I think so.

00:30:39.300 --> 00:30:40.440
Yeah.

00:30:40.440 --> 00:30:41.411
Oh, yeah.

00:30:41.411 --> 00:30:41.910
Sure.

00:30:41.910 --> 00:30:42.868
ANDREW: We'll find out.

00:30:45.930 --> 00:30:46.680
FILIP: Well, yeah.

00:30:46.680 --> 00:30:48.240
Let's just run it first.

00:30:48.240 --> 00:30:50.830
I think if you run it, it
won't hit the break point.

00:30:50.830 --> 00:30:51.790
But that's OK.

00:30:51.790 --> 00:30:54.670
I think you should
parse the one.

00:30:54.670 --> 00:30:55.710
Yes.

00:30:55.710 --> 00:30:56.670
Cool.

00:30:56.670 --> 00:30:58.760
So do you still
want to [INAUDIBLE]??

00:30:58.760 --> 00:30:59.140
ANDREW: Oh, there we go.

00:30:59.140 --> 00:30:59.639
Debugging.

00:30:59.639 --> 00:31:01.970
FILIP: Yeah.

00:31:01.970 --> 00:31:02.894
ANDREW: In theory.

00:31:05.670 --> 00:31:06.180
Connected.

00:31:06.180 --> 00:31:08.339
Yay, there we go.

00:31:08.339 --> 00:31:09.880
So just step through
this real quick.

00:31:09.880 --> 00:31:11.520
I've got my JSON string up here.

00:31:11.520 --> 00:31:13.810
Let's make this bigger.

00:31:13.810 --> 00:31:14.820
There we go.

00:31:14.820 --> 00:31:16.740
And I'll step.

00:31:16.740 --> 00:31:21.380
So parsed now is a growable
list with 347 integers in it.

00:31:21.380 --> 00:31:22.880
But because this
is a dynamic, we

00:31:22.880 --> 00:31:26.790
can't really treat it as
one in a reliable way.

00:31:26.790 --> 00:31:31.115
So I step over that, and I
get parsed and list of IDs.

00:31:31.115 --> 00:31:34.044
So this is a copy that
is strongly typed,

00:31:34.044 --> 00:31:35.210
and then that gets returned.

00:31:41.060 --> 00:31:45.360
FILIP: Basically so JSON,
untyped, very dynamic--

00:31:45.360 --> 00:31:49.760
we want to consume
basically a string of things

00:31:49.760 --> 00:31:54.440
and this kind of dynamic blob
into something very much typed.

00:31:54.440 --> 00:32:00.320
And what you're doing here is
you're saying to the compiler

00:32:00.320 --> 00:32:07.100
and to Dart, I'm sure this
is a list of integers.

00:32:07.100 --> 00:32:09.980
This will fail if there's
something in the string.

00:32:09.980 --> 00:32:13.350
If we put something in the
string that's not an integer,

00:32:13.350 --> 00:32:14.810
this will fail miserably.

00:32:14.810 --> 00:32:18.200
ANDREW: Let's watch
it fail, actually.

00:32:18.200 --> 00:32:21.630
FILIP: Yeah, we could
even have a-- yes.

00:32:24.609 --> 00:32:25.109
Yes.

00:32:31.570 --> 00:32:34.550
ANDREW: Let's save that.

00:32:34.550 --> 00:32:36.832
Let's go in here.

00:32:36.832 --> 00:32:37.790
Let's debug that again.

00:32:37.790 --> 00:32:40.332
I think there was a button
for that, and I missed it.

00:32:40.332 --> 00:32:41.040
This should work.

00:32:41.040 --> 00:32:42.541
FILIP: Yeah, I have
never used this.

00:32:42.541 --> 00:32:44.623
ANDREW: So we'll pass
parsed, because this is just

00:32:44.623 --> 00:32:45.590
parsing to a dynamic.

00:32:45.590 --> 00:32:47.530
So this will work, right?

00:32:47.530 --> 00:32:50.339
And then we get a growable
lists with a string in it.

00:32:50.339 --> 00:32:51.880
But then when we
try to do this copy,

00:32:51.880 --> 00:32:56.130
this should just choke
and die right here, right?

00:32:56.130 --> 00:32:56.730
Yes.

00:32:56.730 --> 00:33:00.670
So now we ended up
deeply in the Dart code.

00:33:00.670 --> 00:33:03.490
That's never good.

00:33:03.490 --> 00:33:04.740
FILIP: So that's what happens.

00:33:04.740 --> 00:33:08.850
If you just played it
and not debug it and not

00:33:08.850 --> 00:33:10.380
having break
points, it will just

00:33:10.380 --> 00:33:15.030
throw I think argument error.

00:33:15.030 --> 00:33:18.840
If you do the debugging
thing and you actually

00:33:18.840 --> 00:33:21.930
have a breakpoint, you
will go very deeply

00:33:21.930 --> 00:33:26.110
into Dart [? core ?] and
see all the things that--

00:33:26.110 --> 00:33:28.770
yeah, and the type string
is not [INAUDIBLE]..

00:33:28.770 --> 00:33:31.450
ANDREW: There we go.

00:33:31.450 --> 00:33:33.440
FILIP: So cool.

00:33:33.440 --> 00:33:38.130
So I mean, we would probably
want to test for that as well,

00:33:38.130 --> 00:33:40.530
but we won't do that now.

00:33:40.530 --> 00:33:44.220
Let's fix this
now, and let's go--

00:33:44.220 --> 00:33:47.640
I think, actually,
why don't we keep this

00:33:47.640 --> 00:33:52.890
like just using the
primitive parsing of JSON

00:33:52.890 --> 00:33:56.210
and go to parse article
and do this the hard way?

00:33:59.179 --> 00:34:00.970
ANDREW: So go ahead
and keep doing this one

00:34:00.970 --> 00:34:02.680
with Dart convert, you mean?

00:34:02.680 --> 00:34:03.490
FILIP: No, no, no.

00:34:03.490 --> 00:34:07.720
I meant, let's just keep
this as it is, because it's

00:34:07.720 --> 00:34:09.429
three lines of code.

00:34:09.429 --> 00:34:11.440
It works.

00:34:11.440 --> 00:34:12.340
Or do you want to--

00:34:12.340 --> 00:34:14.048
ANDREW: Well, because
we haven't actually

00:34:14.048 --> 00:34:15.980
showed how to do Dart
convert with an object.

00:34:15.980 --> 00:34:17.080
So we just used it for a list.

00:34:17.080 --> 00:34:18.389
We haven't done an object yet.

00:34:18.389 --> 00:34:19.560
So that might be a
good thing to show,

00:34:19.560 --> 00:34:21.900
and then we can comment these
out and try something else.

00:34:21.900 --> 00:34:22.400
FILIP: Yeah.

00:34:22.400 --> 00:34:25.104
ANDREW: We're also going to
have to have a new article.dart.

00:34:25.104 --> 00:34:26.770
This is going to have
some changes in it

00:34:26.770 --> 00:34:29.139
too if we're going to use
[? bill ?] value with it.

00:34:29.139 --> 00:34:31.420
FILIP: Yes, yes, you're right.

00:34:31.420 --> 00:34:33.400
ANDREW: So in parsing
articles-- so we're going

00:34:33.400 --> 00:34:36.947
to take the article string.

00:34:36.947 --> 00:34:38.530
And we'll have to
rename this one too.

00:34:38.530 --> 00:34:40.270
So we have the same
name collision there.

00:34:40.270 --> 00:34:45.699
So now if we go back to our
test, we've got this bit here.

00:34:45.699 --> 00:34:47.469
That's the entire
string for the article

00:34:47.469 --> 00:34:49.659
that we're going
to need to parse.

00:34:49.659 --> 00:34:52.030
So step one is going
to be the same.

00:34:52.030 --> 00:34:59.520
So we're going to do this and
say JSON.JSONdecode, and JSON

00:34:59.520 --> 00:35:01.765
string.

00:35:01.765 --> 00:35:04.140
And in this case, this actually
is going to get me a map.

00:35:04.140 --> 00:35:06.510
So this will be a map
of string to dynamic,

00:35:06.510 --> 00:35:08.970
because we're parsing
a single object.

00:35:08.970 --> 00:35:14.250
And then I could new up an
instance of article and then

00:35:14.250 --> 00:35:16.800
just start trying to jam
individual fields into it,

00:35:16.800 --> 00:35:18.930
but that's a bad idea.

00:35:18.930 --> 00:35:22.800
So what I would normally
do here is go into article,

00:35:22.800 --> 00:35:25.080
and I would make
a new constructor.

00:35:25.080 --> 00:35:26.760
FILIP: Can you just use one?

00:35:26.760 --> 00:35:32.200
ANDREW: I actually am going
to use that one in a second.

00:35:32.200 --> 00:35:35.114
Yeah, so I'm going to make
a factory constructor.

00:35:38.830 --> 00:35:39.607
FILIP: Fancy.

00:35:39.607 --> 00:35:42.190
ANDREW: [INAUDIBLE] we've been
touching on all kinds of things

00:35:42.190 --> 00:35:43.450
that I almost know how to do.

00:35:43.450 --> 00:35:46.227
So this will be
fun for all of us.

00:35:46.227 --> 00:35:48.560
So you want to talk about
named constructors real quick?

00:35:48.560 --> 00:35:49.310
FILIP: Yeah, yeah.

00:35:49.310 --> 00:35:51.420
ANDREW: Because that's
fairly Dart-specific.

00:35:51.420 --> 00:35:55.800
FILIP: So Dart let's you do
not just one constructor,

00:35:55.800 --> 00:35:58.630
but many constuctors,
which are named,

00:35:58.630 --> 00:36:04.930
that are like article dot
from JSON, or article.empty.

00:36:04.930 --> 00:36:08.080
And that's convenient.

00:36:08.080 --> 00:36:11.050
What Andrew is
doing is that, not

00:36:11.050 --> 00:36:14.320
only is it a named constructor,
it's a factory constructor.

00:36:14.320 --> 00:36:17.190
And factory constructor
is basically a function.

00:36:17.190 --> 00:36:23.330
But it seems from the caller's
perspective as a constructor.

00:36:23.330 --> 00:36:27.200
And that function will just
do whatever it needs to do

00:36:27.200 --> 00:36:31.780
and then will use another
constructor in that same class

00:36:31.780 --> 00:36:34.340
and return a value.

00:36:34.340 --> 00:36:38.500
So with this, you can do
things like singletons.

00:36:38.500 --> 00:36:42.910
You can do things like
caching and a bunch

00:36:42.910 --> 00:36:44.990
of other cool stuff.

00:36:44.990 --> 00:36:46.346
So are you showing it in--

00:36:46.346 --> 00:36:47.470
ANDREW: I'm looking for it.

00:36:47.470 --> 00:36:49.162
I know the factory
keyword's there.

00:36:53.230 --> 00:36:54.840
FILIP: Yeah, I'm not sure if--

00:37:04.059 --> 00:37:05.350
ANDREW: Let's go back out here.

00:37:05.350 --> 00:37:07.530
So yeah, what the
key word factor

00:37:07.530 --> 00:37:09.810
gets you is that you can
return, and you're not

00:37:09.810 --> 00:37:12.150
going to make a new instance
by default. Up here,

00:37:12.150 --> 00:37:13.476
if you do article like--

00:37:13.476 --> 00:37:14.850
there's a new
instance of article

00:37:14.850 --> 00:37:17.740
that's made for your
execution of the constructor

00:37:17.740 --> 00:37:19.670
and that you use as this.

00:37:19.670 --> 00:37:21.150
In a factory, you
don't have that.

00:37:21.150 --> 00:37:23.520
It's just a method
that can be used

00:37:23.520 --> 00:37:27.047
as a constructor and can
new up an instance itself

00:37:27.047 --> 00:37:27.630
and return it.

00:37:27.630 --> 00:37:30.270
Or if you're doing object
pooling behind the scenes,

00:37:30.270 --> 00:37:32.740
it can go get an instance out
of a pool and return that.

00:37:32.740 --> 00:37:36.160
It can even return null, which
I'm going to do right now.

00:37:36.160 --> 00:37:39.420
So I'm going to say,
if JSON equals null--

00:37:39.420 --> 00:37:42.128
just to show how to do this--

00:37:42.128 --> 00:37:45.840
return null, deal with that.

00:37:45.840 --> 00:37:47.460
That's a thing that you can do.

00:37:47.460 --> 00:37:51.220
FILIP: By the way, as you
see the yellow thing, that's

00:37:51.220 --> 00:37:54.140
our ID telling us, hey,
you have this constructor.

00:37:54.140 --> 00:37:56.070
It doesn't return--
in some cases,

00:37:56.070 --> 00:37:58.301
it doesn't return anything.

00:37:58.301 --> 00:37:58.800
That's bad.

00:37:58.800 --> 00:38:00.780
ANDREW: That's a problem.

00:38:00.780 --> 00:38:02.400
So let's make it
return something.

00:38:02.400 --> 00:38:05.220
So let's make a new
article, and we'll

00:38:05.220 --> 00:38:07.800
fill it as we're making
it with this information

00:38:07.800 --> 00:38:09.508
that we're going to
pull out of the JSON.

00:38:11.570 --> 00:38:15.304
So let's say return article.

00:38:15.304 --> 00:38:16.970
And I'm not going to
use the new keyword

00:38:16.970 --> 00:38:19.590
because this is Dart 2.0.

00:38:19.590 --> 00:38:22.520
So we don't have to use new
anymore if you don't want to.

00:38:22.520 --> 00:38:23.180
Just like that.

00:38:23.180 --> 00:38:24.800
And let's put some
properties in here.

00:38:24.800 --> 00:38:27.200
So let's see, text--

00:38:27.200 --> 00:38:30.233
I could pull right out of--

00:38:34.986 --> 00:38:36.110
this could be null, though.

00:38:36.110 --> 00:38:37.344
So do we want--

00:38:37.344 --> 00:38:39.260
in theory-- I don't think
it ever actually is.

00:38:39.260 --> 00:38:41.410
But do you want to
have a backup text?

00:38:41.410 --> 00:38:43.310
Should we do it like that?

00:38:43.310 --> 00:38:46.880
FILIP: Yeah, that's
always nice to see.

00:38:46.880 --> 00:38:49.010
Yes, sure.

00:38:49.010 --> 00:38:51.660
ANDREW: And then we have domain.

00:38:51.660 --> 00:38:53.930
That's also a text field, right?

00:38:53.930 --> 00:38:57.195
Let's refer back to the API.

00:38:57.195 --> 00:39:00.170
FILIP: Oh, domain is
something I created

00:39:00.170 --> 00:39:04.850
just because I was lazy to
actually parse anything.

00:39:04.850 --> 00:39:06.860
So yeah, it doesn't have domain.

00:39:06.860 --> 00:39:08.220
It has URL.

00:39:08.220 --> 00:39:10.834
ANDREW: URL, should
we go back to URL?

00:39:10.834 --> 00:39:11.750
FILIP: We should, yes.

00:39:11.750 --> 00:39:12.664
Absolutely.

00:39:12.664 --> 00:39:14.330
ANDREW: So we're going
to probably break

00:39:14.330 --> 00:39:15.310
some other stuff then.

00:39:15.310 --> 00:39:18.210
FILIP: [INAUDIBLE]

00:39:19.910 --> 00:39:23.360
ANDREW: Oh, you have
real function keys.

00:39:23.360 --> 00:39:25.180
Boop.

00:39:25.180 --> 00:39:28.190
So the URL will be JSON--

00:39:28.190 --> 00:39:29.510
URL.

00:39:29.510 --> 00:39:33.750
And you want an empty
string or leave it as null ?

00:39:33.750 --> 00:39:35.580
FILIP: Let's just
leave things at null.

00:39:35.580 --> 00:39:40.770
We've shown that you can do, if
the null operator, if this is

00:39:40.770 --> 00:39:43.750
null, then have something else.

00:39:43.750 --> 00:39:48.310
But we probably,
at this point, we'd

00:39:48.310 --> 00:39:52.270
rather this to break
spectacularly then

00:39:52.270 --> 00:39:54.300
not break and show
null somewhere

00:39:54.300 --> 00:39:57.120
that we wouldn't expect.

00:39:57.120 --> 00:39:59.640
ANDREW: Yeah, I'm not putting
any sophisticated checking

00:39:59.640 --> 00:40:00.160
in here.

00:40:00.160 --> 00:40:03.750
I'm just sort of trusting
that this data will be roughly

00:40:03.750 --> 00:40:04.950
what I think it is.

00:40:04.950 --> 00:40:06.110
Score will be JSON.

00:40:09.162 --> 00:40:12.600
Score-- actually these I
am going to put as zero.

00:40:12.600 --> 00:40:14.920
And having a null for--

00:40:14.920 --> 00:40:18.400
FILIP: Well, I'm not sure if
it even shows age, by the way.

00:40:18.400 --> 00:40:20.740
I think it shows just datestamp.

00:40:20.740 --> 00:40:25.000
So that's why-- I'm
really sorry about this,

00:40:25.000 --> 00:40:27.100
because this class
was basically just

00:40:27.100 --> 00:40:32.620
me copy-pasting Hackers News
and then creating something

00:40:32.620 --> 00:40:33.841
from that.

00:40:33.841 --> 00:40:34.840
ANDREW: Well, that's OK.

00:40:34.840 --> 00:40:36.100
So let's look at our
actual data that we're

00:40:36.100 --> 00:40:37.210
going to [INAUDIBLE] marked up.

00:40:37.210 --> 00:40:38.668
So there isn't even
an age in here.

00:40:38.668 --> 00:40:39.820
There is a score.

00:40:39.820 --> 00:40:41.200
FILIP: And a time.

00:40:41.200 --> 00:40:44.757
ANDREW: What is-- oh,
there is no age, OK.

00:40:44.757 --> 00:40:45.340
FILIP: No, no.

00:40:45.340 --> 00:40:47.610
That was just me.

00:40:47.610 --> 00:40:48.380
We want--

00:40:48.380 --> 00:40:49.631
ANDREW: I'm back with you now.

00:40:49.631 --> 00:40:50.130
Nope.

00:40:50.130 --> 00:40:50.690
Wrong file.

00:40:50.690 --> 00:40:52.630
There we go.

00:40:52.630 --> 00:40:55.109
So you want-- let's just
take this out for now

00:40:55.109 --> 00:40:55.900
and put it back in.

00:40:55.900 --> 00:40:58.350
Or you want to put
the time stamp in?

00:40:58.350 --> 00:41:00.100
Bear in mind, if we
put the time stamp in,

00:41:00.100 --> 00:41:01.724
I have to go figure
how to parse dates.

00:41:03.850 --> 00:41:07.070
FILIP: Let's just use
it as an end for now.

00:41:07.070 --> 00:41:08.277
And that's OK.

00:41:08.277 --> 00:41:08.860
You know what?

00:41:08.860 --> 00:41:14.240
Maybe instead of trying
to change all this,

00:41:14.240 --> 00:41:18.730
let's create a new article
class with the JSON parsing

00:41:18.730 --> 00:41:21.710
and just, at some point,
we'll just switch it around.

00:41:21.710 --> 00:41:23.960
And it's probably going
to be easier because now

00:41:23.960 --> 00:41:27.627
like there's going to be a bunch
of static errors everywhere.

00:41:35.920 --> 00:41:38.780
ANDREW: What you
want to call it?

00:41:38.780 --> 00:41:41.030
Because we'll have a name
collision if we use that.

00:41:41.030 --> 00:41:44.000
FILIP: Yeah, what I meant was
just like go to [INAUDIBLE]

00:41:44.000 --> 00:41:44.770
parsing--

00:41:44.770 --> 00:41:47.330
ANDREW: Oh, you mean have
a new article in here.

00:41:47.330 --> 00:41:48.880
FILIP: And then
we'll figure out--

00:41:48.880 --> 00:41:50.980
ANDREW: Now I'm with you.

00:41:50.980 --> 00:41:55.660
OK, so let's take all this out.

00:41:55.660 --> 00:41:56.980
The magic of the undo stack.

00:42:03.670 --> 00:42:05.560
FILIP: Yup, that
was probably it.

00:42:05.560 --> 00:42:06.060
Wasn't it?

00:42:08.117 --> 00:42:10.200
ANDREW: That would be my
first thing that I added.

00:42:10.200 --> 00:42:13.260
So let's pull that out,
go back to JSON parsing,

00:42:13.260 --> 00:42:15.810
and blort a bunch of this in.

00:42:18.540 --> 00:42:19.920
FILIP: Right, this is my fake--

00:42:19.920 --> 00:42:20.630
ANDREW: I'm going
to use the mouse.

00:42:20.630 --> 00:42:21.213
Yeah, this is.

00:42:24.270 --> 00:42:25.560
Oh, these are your fake lists.

00:42:25.560 --> 00:42:26.060
FILIP: Yes.

00:42:28.956 --> 00:42:32.274
ANDREW: Oh my lord.

00:42:32.274 --> 00:42:33.690
We're going to
edit all this down.

00:42:33.690 --> 00:42:34.773
So nobody has to watch it.

00:42:34.773 --> 00:42:35.350
Don't worry.

00:42:38.970 --> 00:42:40.330
FILIP: I think you're--

00:42:40.330 --> 00:42:42.960
Oh, wow, what?

00:42:42.960 --> 00:42:51.062
ANDREW: So let me parse this--

00:42:51.062 --> 00:42:51.770
comment that out.

00:42:51.770 --> 00:42:54.820
See if I can format this now.

00:42:54.820 --> 00:42:56.900
FILIP: I think you have
[INAUDIBLE] something.

00:42:56.900 --> 00:42:58.775
ANDREW: We confused the
format at this point.

00:42:58.775 --> 00:43:00.700
FILIP: If you go
back up, I think

00:43:00.700 --> 00:43:05.560
you were just doing
this dot something,

00:43:05.560 --> 00:43:07.710
and that's what threw it away.

00:43:07.710 --> 00:43:10.717
So this is a text.

00:43:10.717 --> 00:43:11.300
This is a URL.

00:43:14.570 --> 00:43:15.545
And if you go--

00:43:15.545 --> 00:43:17.420
ANDREW: I'm just going
to redo it real quick.

00:43:22.624 --> 00:43:24.290
FILIP: Yeah, that's
probably way faster.

00:43:43.935 --> 00:43:45.817
ANDREW: I'm waking
up your laptop here.

00:43:45.817 --> 00:43:47.847
FILIP: Yeah.

00:43:47.847 --> 00:43:48.680
ANDREW: There we go.

00:43:54.610 --> 00:43:57.160
So now I can go in
here and screw around,

00:43:57.160 --> 00:43:58.060
messing with these.

00:43:58.060 --> 00:44:02.785
So this will be an ints,
which is the time stamp.

00:44:02.785 --> 00:44:03.660
What do they call it?

00:44:03.660 --> 00:44:03.930
FILIP: Time.

00:44:03.930 --> 00:44:04.679
ANDREW: Just time.

00:44:07.902 --> 00:44:09.960
Time, score, URL.

00:44:09.960 --> 00:44:11.110
We got comments count.

00:44:11.110 --> 00:44:12.910
We don't.

00:44:12.910 --> 00:44:15.640
So that's actually kind of
difficult to get, I think.

00:44:15.640 --> 00:44:16.270
FILIP: Yes.

00:44:16.270 --> 00:44:17.915
ANDREW: You have to
do a little work.

00:44:17.915 --> 00:44:19.270
So let's pull that out then.

00:44:23.761 --> 00:44:25.962
And this dot age, just
making this dot time.

00:44:28.914 --> 00:44:31.870
Age equals time.

00:44:31.870 --> 00:44:33.160
Everything should have a time.

00:44:36.220 --> 00:44:38.310
FILIP: I used the
[INAUDIBLE] age.

00:44:38.310 --> 00:44:40.300
ANDREW: Oh, thanks.

00:44:40.300 --> 00:44:42.990
And score subtext URL
by time and score.

00:44:42.990 --> 00:44:44.530
FILIP: Yeah, I
think that's good.

00:44:47.452 --> 00:44:50.080
ANDREW: And magic of format.

00:44:50.080 --> 00:44:51.690
FILIP: I think
maybe you are still

00:44:51.690 --> 00:44:54.370
importing the article from--

00:44:54.370 --> 00:44:54.900
ANDREW: Yes.

00:44:54.900 --> 00:44:57.510
[INAUDIBLE]

00:44:57.510 --> 00:44:58.860
FILIP: You can just-- yeah.

00:44:58.860 --> 00:45:00.030
ANDREW: Cool.

00:45:00.030 --> 00:45:02.250
So we're back on track.

00:45:02.250 --> 00:45:04.511
And then I can go back to--

00:45:04.511 --> 00:45:05.010
let's see.

00:45:05.010 --> 00:45:06.666
So do I need something here?

00:45:06.666 --> 00:45:07.290
What do we got?

00:45:11.538 --> 00:45:12.850
It doesn't actually return one.

00:45:12.850 --> 00:45:13.350
Perfect.

00:45:13.350 --> 00:45:14.310
OK.

00:45:14.310 --> 00:45:16.500
So now I can get back to--

00:45:16.500 --> 00:45:17.920
we're back in parse article now.

00:45:17.920 --> 00:45:23.197
So I'm going to now take the
map that I got from JSON decode.

00:45:23.197 --> 00:45:25.780
I'm going to stick it in as the
parameter to this constructor,

00:45:25.780 --> 00:45:28.670
and I'll get an article
object in return.

00:45:28.670 --> 00:45:30.172
So I can say return--

00:45:30.172 --> 00:45:30.672
actually.

00:45:35.540 --> 00:45:38.610
Article-- this way I can
step through and see it--

00:45:38.610 --> 00:45:42.630
equals article from JSON.

00:45:48.870 --> 00:45:54.270
And I'll just give it the
JSON parsed, just like that.

00:45:54.270 --> 00:45:58.200
And then I can return
that article there,

00:45:58.200 --> 00:46:00.064
and I can put a little
breakpoint in here.

00:46:00.064 --> 00:46:01.230
So we can step through this.

00:46:01.230 --> 00:46:04.260
But that should be good.

00:46:04.260 --> 00:46:05.670
[INAUDIBLE] point.

00:46:05.670 --> 00:46:08.377
Am I missing anything
back here in my test?

00:46:08.377 --> 00:46:09.210
FILIP: Let's try it.

00:46:09.210 --> 00:46:10.350
Let's see.

00:46:10.350 --> 00:46:12.210
If it crashes, then
we're going to--

00:46:12.210 --> 00:46:15.804
ANDREW: Now what was the command
you used to actually launch

00:46:15.804 --> 00:46:16.720
the test a second ago?

00:46:20.010 --> 00:46:21.620
FILIP: I did this.

00:46:21.620 --> 00:46:22.870
Oh, it's just the top stories.

00:46:22.870 --> 00:46:26.730
So I just right-click on the--

00:46:26.730 --> 00:46:28.314
ANDREW: Test, the JSON test?

00:46:28.314 --> 00:46:29.641
FILIP: Yeah.

00:46:29.641 --> 00:46:30.182
ANDREW: Cool.

00:46:32.984 --> 00:46:35.551
Can you also click over here?

00:46:35.551 --> 00:46:37.860
Ah, yeah, you can.

00:46:37.860 --> 00:46:39.970
So I'm going to
hit my break point.

00:46:39.970 --> 00:46:42.900
So this is decoding the JSON
string into that map for me.

00:46:42.900 --> 00:46:44.220
So I'll step here.

00:46:44.220 --> 00:46:47.994
And then, if I look at variables
now, we've got JSON string.

00:46:47.994 --> 00:46:48.660
Where is parsed?

00:46:53.152 --> 00:46:55.128
I should be able to look at you.

00:47:02.550 --> 00:47:04.900
FILIP: That's weird.

00:47:04.900 --> 00:47:07.260
ANDREW: Interesting.

00:47:07.260 --> 00:47:09.810
FILIP: Are we below
that line already?

00:47:09.810 --> 00:47:13.056
ANDREW: Oh, there we go.

00:47:13.056 --> 00:47:15.450
Parsed.

00:47:15.450 --> 00:47:17.920
What in the world have I done?

00:47:17.920 --> 00:47:19.616
All right, stop.

00:47:19.616 --> 00:47:20.115
Hold on.

00:47:23.370 --> 00:47:26.190
FILIP: See this is what
the Boring Show is about--

00:47:26.190 --> 00:47:28.705
looking, puzzling.

00:47:28.705 --> 00:47:30.287
Can you just run it instead?

00:47:30.287 --> 00:47:32.120
ANDREW: Yeah, and
actually see what happens.

00:47:35.250 --> 00:47:37.460
What are we missing?

00:47:37.460 --> 00:47:39.720
FILIP: Why is it so--

00:47:39.720 --> 00:47:41.020
ANDREW: Of course it did.

00:47:41.020 --> 00:47:44.250
FILIP: OK, can we
can we try again?

00:47:44.250 --> 00:47:47.570
Can we debug again?

00:47:51.362 --> 00:47:52.320
I just step through it.

00:47:55.980 --> 00:47:57.694
So that was something
with the watcher?

00:47:57.694 --> 00:47:59.777
ANDREW: I think that was
just temporary weirdness.

00:48:02.400 --> 00:48:04.040
Sometimes turning
it off and on--

00:48:04.040 --> 00:48:04.831
FILIP: Interesting.

00:48:04.831 --> 00:48:06.130
No, no, no.

00:48:06.130 --> 00:48:08.940
I want to get to
the bottom of this.

00:48:08.940 --> 00:48:10.140
Can you run it again?

00:48:10.140 --> 00:48:11.070
ANDREW: All right.

00:48:11.070 --> 00:48:13.230
So stop, full stop.

00:48:13.230 --> 00:48:14.350
FILIP: And debug.

00:48:14.350 --> 00:48:16.177
ANDREW: Debug.

00:48:16.177 --> 00:48:18.760
And correct me if I'm wrong, we
didn't change the code, right?

00:48:18.760 --> 00:48:21.840
FILIP: We did not, but
we added a watcher.

00:48:21.840 --> 00:48:23.122
So add the thing.

00:48:23.122 --> 00:48:24.830
ANDREW: Do you want
take the watcher off?

00:48:27.520 --> 00:48:28.652
FILIP: How did you add it?

00:48:28.652 --> 00:48:29.860
ANDREW: I right-clicked here.

00:48:29.860 --> 00:48:31.179
I said add to watches.

00:48:31.179 --> 00:48:31.720
FILIP: Right.

00:48:31.720 --> 00:48:33.970
You know what probably--

00:48:33.970 --> 00:48:37.980
that's interesting,
but I bet that--

00:48:37.980 --> 00:48:40.840
add a watcher for article now.

00:48:40.840 --> 00:48:43.565
ANDREW: This one here?

00:48:43.565 --> 00:48:44.565
FILIP: It will complain.

00:48:47.360 --> 00:48:53.200
And if you step
through it, yeah.

00:48:56.260 --> 00:48:58.500
What?

00:48:58.500 --> 00:48:59.000
Is it done?

00:48:59.000 --> 00:48:59.958
ANDREW: It worked fine.

00:49:02.870 --> 00:49:06.140
FILIP: So the theory was that,
if you add it to watcher,

00:49:06.140 --> 00:49:08.310
it will try to create a thing--

00:49:08.310 --> 00:49:09.740
ANDREW: But by
observing it, we're

00:49:09.740 --> 00:49:12.394
changing the outcome kind of
a deal, some Heisenberg stuff?

00:49:12.394 --> 00:49:14.060
FILIP: Well, it
definitely is like that.

00:49:14.060 --> 00:49:16.700
But anyway, so our tests pass.

00:49:16.700 --> 00:49:20.300
ANDREW: I think somehow
we got the IDE confused

00:49:20.300 --> 00:49:22.826
about which version of
the file it was running.

00:49:22.826 --> 00:49:25.200
I think we were looking at a
more recent copy of the file

00:49:25.200 --> 00:49:27.060
than the test suite
was actually executing.

00:49:27.060 --> 00:49:30.450
And once we stopped and
started again, we were good.

00:49:30.450 --> 00:49:32.900
FILIP: Well, so I'll get
to the bottom of this one

00:49:32.900 --> 00:49:35.100
way or another.

00:49:35.100 --> 00:49:37.790
And we'll report back
in the next episode.

00:49:37.790 --> 00:49:38.720
This is interesting.

00:49:38.720 --> 00:49:43.970
Anyway, so the bottom line is,
don't use watcher and just run

00:49:43.970 --> 00:49:45.050
your tests, please.

00:49:48.600 --> 00:49:49.100
OK, good.

00:49:49.100 --> 00:49:50.630
So you implemented this?

00:49:50.630 --> 00:49:52.040
ANDREW: Yes.

00:49:52.040 --> 00:49:52.850
That's took what?

00:49:52.850 --> 00:49:53.600
20, 15?

00:49:53.600 --> 00:49:54.600
20 minutes or something?

00:49:54.600 --> 00:49:56.300
FILIP: Yeah, with
a bunch of things.

00:49:56.300 --> 00:49:58.940
But what do we want to do now?

00:49:58.940 --> 00:50:00.830
So this is great.

00:50:00.830 --> 00:50:04.400
You can do this, and
it's pretty simple.

00:50:04.400 --> 00:50:08.030
But imagine that the
structure that you're

00:50:08.030 --> 00:50:12.800
getting from your API is way
larger and it changes a lot.

00:50:12.800 --> 00:50:14.930
And you know what?

00:50:14.930 --> 00:50:20.060
So you probably don't want to
write these things by hand.

00:50:20.060 --> 00:50:23.210
We even show this
by example when

00:50:23.210 --> 00:50:26.810
you were trying to take the JSON
of age, which doesn't exist.

00:50:26.810 --> 00:50:30.840
And I saw that, but
normally I don't see it.

00:50:30.840 --> 00:50:35.540
So it's probably better
to generate these things.

00:50:35.540 --> 00:50:39.104
So therefore we have source
generation and built value.

00:50:39.104 --> 00:50:40.770
ANDREW: Do you want
to talk about source

00:50:40.770 --> 00:50:41.580
generation a little bit?

00:50:41.580 --> 00:50:42.920
Because that sort of leads in.

00:50:42.920 --> 00:50:48.890
So built value has a library
that uses the source generation

00:50:48.890 --> 00:50:53.810
tech that's available
in Dart to generate

00:50:53.810 --> 00:50:56.880
some code on your behalf in
what's called a part file.

00:50:56.880 --> 00:50:58.800
So you'll have a main
file that you use,

00:50:58.800 --> 00:51:02.622
and that will reference
this other file.

00:51:02.622 --> 00:51:04.580
And you probably have
more sophisticated things

00:51:04.580 --> 00:51:05.470
to talk about.

00:51:05.470 --> 00:51:07.880
FILIP: Yeah, why
source generation

00:51:07.880 --> 00:51:09.200
and not something else?

00:51:09.200 --> 00:51:12.260
So I mean, this is
my personal opinion.

00:51:12.260 --> 00:51:14.760
But I like source generation.

00:51:14.760 --> 00:51:17.240
And source generation
means that you're saying,

00:51:17.240 --> 00:51:20.690
OK, I just write
this kind of code,

00:51:20.690 --> 00:51:24.380
and you'll see in the little
bit what it looks like.

00:51:24.380 --> 00:51:29.300
It's basically like I want
a class that kind of wraps

00:51:29.300 --> 00:51:31.850
around the article,
and that class

00:51:31.850 --> 00:51:35.470
should serialize to JSON
and deserialize from JSON.

00:51:35.470 --> 00:51:40.250
And then the source
generation will

00:51:40.250 --> 00:51:43.490
create that implementation
of that class, which

00:51:43.490 --> 00:51:45.320
will do that work for you.

00:51:45.320 --> 00:51:51.410
And in your case, you just
write that abstract class

00:51:51.410 --> 00:51:54.830
that is just saying
what I want this to do.

00:51:54.830 --> 00:51:58.830
And then you leave the rest
to the source generation.

00:51:58.830 --> 00:52:00.590
What's cool about that,
that you can still

00:52:00.590 --> 00:52:03.920
look at the generated source.

00:52:03.920 --> 00:52:06.680
So you can step through it.

00:52:06.680 --> 00:52:12.050
It's always code that
you're going to look at,

00:52:12.050 --> 00:52:15.380
whereas if there is kind
of some kind of magic thing

00:52:15.380 --> 00:52:19.160
that will somehow
[? burst ?] your app--

00:52:19.160 --> 00:52:23.600
I remember this from other
technologies where things kind

00:52:23.600 --> 00:52:26.180
of just worked
until they didn't.

00:52:26.180 --> 00:52:27.780
ANDREW: Yeah, and
then good luck.

00:52:27.780 --> 00:52:28.780
FILIP: And yes, exactly.

00:52:28.780 --> 00:52:31.280
You don't know what's happening.

00:52:31.280 --> 00:52:34.330
Here it's just like
it's still Dart code.

00:52:34.330 --> 00:52:38.570
It's still the same thing
that you would probably write.

00:52:38.570 --> 00:52:42.890
It's you just don't
need to write it.

00:52:42.890 --> 00:52:46.650
So similar to Dagger in
Java, as far as I know,

00:52:46.650 --> 00:52:51.800
where its dependence injection
framework, it's source

00:52:51.800 --> 00:52:52.790
generated.

00:52:52.790 --> 00:52:56.539
And so you can, again,
look at the code.

00:52:56.539 --> 00:52:58.830
ANDREW: And one of the things
I don't-- did you mention

00:52:58.830 --> 00:53:00.370
the word reflection at all?

00:53:00.370 --> 00:53:01.370
FILIP: No.

00:53:01.370 --> 00:53:03.869
ANDREW: And the reason he didn't
mention the word reflection

00:53:03.869 --> 00:53:05.690
is there is no
reflection in Flutter

00:53:05.690 --> 00:53:10.460
because Flutter compiles to a
completely native arm binary.

00:53:10.460 --> 00:53:12.611
And so I don't think you
have the ability to do--

00:53:12.611 --> 00:53:14.360
even if they wanted
to code in reflection,

00:53:14.360 --> 00:53:16.990
I don't think that that
really works that way.

00:53:16.990 --> 00:53:18.439
FILIP: Yeah, I don't know that.

00:53:18.439 --> 00:53:20.480
ANDREW: I know there is
no reflection in Flutter.

00:53:20.480 --> 00:53:21.146
It's disallowed.

00:53:21.146 --> 00:53:23.030
There is a Dart
mirror library, and I

00:53:23.030 --> 00:53:26.190
believe that's the reason.

00:53:26.190 --> 00:53:27.860
So there we go.

00:53:27.860 --> 00:53:30.320
So built value uses
source gen. Built

00:53:30.320 --> 00:53:32.930
value is itself a package.

00:53:32.930 --> 00:53:34.820
FILIP: So, yeah before
you go to built value.

00:53:34.820 --> 00:53:39.470
So using source gen,
you can actually

00:53:39.470 --> 00:53:44.210
write your own source
generation code, which is great.

00:53:44.210 --> 00:53:48.660
And our friend David
Morgan did just that.

00:53:48.660 --> 00:53:50.990
He created built
source generated

00:53:50.990 --> 00:53:53.360
library for built values.

00:53:53.360 --> 00:53:55.040
And what is built value?

00:53:55.040 --> 00:54:00.650
ANDREW: So a built value is
a class that is immutable

00:54:00.650 --> 00:54:03.940
once it's built. You build
it using a builder function.

00:54:03.940 --> 00:54:05.900
So you say, make me
a new built value.

00:54:05.900 --> 00:54:08.772
Here is this method to
populate it full of data

00:54:08.772 --> 00:54:09.480
when you make it.

00:54:09.480 --> 00:54:11.563
And then once you do that,
you can't mess with it.

00:54:11.563 --> 00:54:13.940
It's immutable.

00:54:13.940 --> 00:54:16.040
You can use getters to
get the data out of it,

00:54:16.040 --> 00:54:19.280
but you can't
change the content.

00:54:19.280 --> 00:54:22.280
FILIP: It's like data class or
like value class, basically.

00:54:22.280 --> 00:54:23.540
Yes.

00:54:23.540 --> 00:54:25.700
ANDREW: And a lot of
language have immutable map,

00:54:25.700 --> 00:54:27.860
immutable list,
immutable this and that--

00:54:27.860 --> 00:54:30.830
this is an immutable
value type for Dart.

00:54:30.830 --> 00:54:32.660
FILIP: Why is it
called built value?

00:54:32.660 --> 00:54:34.320
ANDREW: Because of
the builder methods.

00:54:34.320 --> 00:54:36.410
Yeah.

00:54:36.410 --> 00:54:38.817
So this is the package on pub.

00:54:38.817 --> 00:54:40.400
You can see it's
already in version 5.

00:54:40.400 --> 00:54:45.014
This is a pretty popular package
that a lot of people use.

00:54:45.014 --> 00:54:47.180
David has also written a
bunch of articles about it,

00:54:47.180 --> 00:54:49.388
which are really great if
you want to check this out.

00:54:49.388 --> 00:54:50.390
I highly recommend them.

00:54:50.390 --> 00:54:54.510
I've read through them both,
at least a couple of times.

00:54:54.510 --> 00:55:00.079
So let's go look at his
example and get this going.

00:55:00.079 --> 00:55:01.870
I think we're going to
run out of time here

00:55:01.870 --> 00:55:04.620
in about 10 minutes, but we
can probably get it integrated,

00:55:04.620 --> 00:55:06.230
at least the package itself.

00:55:06.230 --> 00:55:08.180
FILIP: Yeah.

00:55:08.180 --> 00:55:11.600
ANDREW: And there's a
read me here that I think

00:55:11.600 --> 00:55:13.850
will give me the imports now.

00:55:13.850 --> 00:55:16.670
Let's go look at his example.

00:55:16.670 --> 00:55:18.337
[SOUND]

00:55:18.337 --> 00:55:19.420
FILIP: That's [INAUDIBLE].

00:55:23.660 --> 00:55:24.881
So we did dependency for--

00:55:24.881 --> 00:55:26.630
ANDREW: So there's
some dependencies here.

00:55:26.630 --> 00:55:29.250
And we have dependencies
for running it

00:55:29.250 --> 00:55:31.250
and dependencies for the
development environment

00:55:31.250 --> 00:55:34.220
itself for when you're building
it because there's actually

00:55:34.220 --> 00:55:37.380
Dart code that's going to be
used to generate the source.

00:55:37.380 --> 00:55:40.040
So source gen itself is Dart.

00:55:40.040 --> 00:55:41.750
And so I'm going
to basically copy

00:55:41.750 --> 00:55:43.940
these wholesale
out of his example

00:55:43.940 --> 00:55:47.070
and stick them in our example.

00:55:47.070 --> 00:55:50.090
FILIP: So maybe a good
point for me to talk about--

00:55:50.090 --> 00:55:53.030
so dependencies
versus dependencies--

00:55:53.030 --> 00:55:57.736
sorry, development
of dependencies.

00:55:57.736 --> 00:55:58.405
Oh, you're--

00:55:58.405 --> 00:56:00.530
ANDREW: I'm just taking
out some of these comments.

00:56:00.530 --> 00:56:05.720
FILIP: So dependencies are
the things that your code uses

00:56:05.720 --> 00:56:11.380
and the libraries that
will maybe use your package

00:56:11.380 --> 00:56:12.746
will want to use.

00:56:12.746 --> 00:56:14.370
Development dependencies
are the things

00:56:14.370 --> 00:56:16.060
that you will need
for development.

00:56:16.060 --> 00:56:18.780
So in this case, we
need the built value

00:56:18.780 --> 00:56:26.400
and built for even the Flutter
app to work because the built--

00:56:26.400 --> 00:56:32.100
our article will
implement built value.

00:56:32.100 --> 00:56:38.580
And we want the built
[? runner ?] and built value

00:56:38.580 --> 00:56:41.010
generator dev
dependencies because, A,

00:56:41.010 --> 00:56:43.350
we want to run the built
[? runner, ?] which we will

00:56:43.350 --> 00:56:44.860
show you in a second.

00:56:44.860 --> 00:56:48.480
And then we will
also need to generate

00:56:48.480 --> 00:56:52.510
that source code, which is
the built value generated.

00:56:52.510 --> 00:56:55.154
ANDREW: Let's see if I
can do a packages get.

00:56:55.154 --> 00:56:57.560
So hopefully, it'll
grab all these.

00:56:57.560 --> 00:56:58.080
Excellent.

00:56:58.080 --> 00:57:01.950
So now if I were to go down into
my external libraries, which

00:57:01.950 --> 00:57:05.100
are open here, I should start--
there is built collection.

00:57:05.100 --> 00:57:06.810
Built collection
is the built value

00:57:06.810 --> 00:57:08.520
for collections like lists.

00:57:08.520 --> 00:57:11.260
So you can have a built
list that is also immutable.

00:57:11.260 --> 00:57:14.290
Built value is down there.

00:57:14.290 --> 00:57:17.062
FILIP: So this should be--

00:57:17.062 --> 00:57:18.270
ANDREW: Indented like proper?

00:57:18.270 --> 00:57:18.769
FILIP: Yes.

00:57:18.769 --> 00:57:20.255
ANDREW: Yes, probably.

00:57:20.255 --> 00:57:23.310
We'll just check on that.

00:57:23.310 --> 00:57:23.970
Whoops.

00:57:23.970 --> 00:57:24.472
There we go.

00:57:24.472 --> 00:57:25.180
FILIP: I'm sorry.

00:57:25.180 --> 00:57:26.710
Did I break it?

00:57:26.710 --> 00:57:27.690
ANDREW: Analyzer.

00:57:34.530 --> 00:57:37.970
FILIP: By the way,
this is a really--

00:57:37.970 --> 00:57:40.720
ANDREW: Do we have a bleeding
edge of Flutter here?

00:57:40.720 --> 00:57:42.470
FILIP: I don't think so.

00:57:42.470 --> 00:57:44.070
ANDREW: Flutter test.

00:57:44.070 --> 00:57:46.000
FILIP: Flutter test
from SDK Flutter.

00:57:52.750 --> 00:57:54.020
Can we just do--

00:57:54.020 --> 00:58:00.410
so can we just remove that line?

00:58:00.410 --> 00:58:03.096
I don't know why there is--

00:58:03.096 --> 00:58:04.637
ANDREW: Well, I
mean, we're not going

00:58:04.637 --> 00:58:05.905
to be able to run tests
with this anymore.

00:58:05.905 --> 00:58:06.488
FILIP: No, no.

00:58:06.488 --> 00:58:08.219
SDK Flutter.

00:58:08.219 --> 00:58:09.760
ANDREW: I don't know
if it will help.

00:58:09.760 --> 00:58:11.998
FILIP: I [INAUDIBLE]
or something.

00:58:11.998 --> 00:58:15.591
ANDREW: Let's try it again.

00:58:15.591 --> 00:58:17.340
FILIP: It depends on
Flutter [INAUDIBLE],,

00:58:17.340 --> 00:58:20.000
which doesn't exist.

00:58:20.000 --> 00:58:22.910
Interesting.

00:58:22.910 --> 00:58:26.374
ANDREW: OK, so we have
a dependency issue here.

00:58:26.374 --> 00:58:27.790
How do we solve
dependency issues?

00:58:30.710 --> 00:58:32.845
That's not going to get
me where I want to go.

00:58:36.650 --> 00:58:41.286
So let's look at the pub
spec for built value itself.

00:58:41.286 --> 00:58:42.274
Where are you?

00:58:42.274 --> 00:58:45.732
You're up here.

00:58:45.732 --> 00:58:47.708
So that's five days ago.

00:58:54.850 --> 00:58:57.380
FILIP: Can I look at what
[INAUDIBLE] tells us?

00:58:57.380 --> 00:58:58.630
ANDREW: [INAUDIBLE] generator.

00:58:58.630 --> 00:58:59.629
Look at the wrong thing.

00:59:08.730 --> 00:59:10.064
FILIP: What did it actually say?

00:59:10.064 --> 00:59:12.271
ANDREW: So it's complaining
that we have a dependency

00:59:12.271 --> 00:59:13.400
from the analyzer here.

00:59:13.400 --> 00:59:17.400
It's 0.32.1, and
Flutter test itself--

00:59:20.791 --> 00:59:21.290
let's see.

00:59:21.290 --> 00:59:22.415
I'm guessing that's GitHub.

00:59:28.277 --> 00:59:30.110
If we go look at the
pub spec for this one--

00:59:32.670 --> 00:59:39.310
analyzer alpha two,
which is pinned.

00:59:39.310 --> 00:59:42.340
This is not [INAUDIBLE].

00:59:42.340 --> 00:59:43.600
So.

00:59:43.600 --> 00:59:47.770
FILIP: We may need to go
back a version maybe of--

00:59:47.770 --> 00:59:49.902
I mean, built value.

00:59:49.902 --> 00:59:51.360
ANDREW: What's the
history of this?

00:59:51.360 --> 00:59:52.443
When did this last change?

00:59:52.443 --> 00:59:54.670
Is this 25 days ago?

00:59:54.670 --> 00:59:55.930
FILIP: So quick hack.

00:59:55.930 --> 00:59:57.610
I have a quick hack.

00:59:57.610 --> 00:59:58.220
Can we?

00:59:58.220 --> 00:59:59.050
ANDREW: Yeah, sure.

00:59:59.050 --> 01:00:01.840
FILIP: Go to pop spec
yaml of our class

01:00:01.840 --> 01:00:04.444
and just do any everywhere--

01:00:04.444 --> 01:00:07.170
no, no, in the ones
that we want to pull in.

01:00:07.170 --> 01:00:09.030
So this, this.

01:00:09.030 --> 01:00:12.090
So any says, hey, I don't
really care about the exact--

01:00:12.090 --> 01:00:13.637
ANDREW: Just give me something.

01:00:13.637 --> 01:00:15.470
Is this going to pull
in the most recent one

01:00:15.470 --> 01:00:16.761
and then still have a conflict?

01:00:16.761 --> 01:00:19.140
FILIP: Yes, yes.

01:00:19.140 --> 01:00:22.840
So that means that we probably--

01:00:22.840 --> 01:00:26.342
ANDREW: 5.5.0, so
one version back.

01:00:26.342 --> 01:00:28.330
FILIP: It might work.

01:00:28.330 --> 01:00:31.930
You actually write--
like I like to write any,

01:00:31.930 --> 01:00:33.520
because you shouldn't have that.

01:00:33.520 --> 01:00:36.730
We already have it
in URL launcher.

01:00:36.730 --> 01:00:44.860
One quick hack is to just say,
hey, give me any, and then

01:00:44.860 --> 01:00:49.720
look at pop spec lock and
see what exactly you got

01:00:49.720 --> 01:00:52.100
and then pin it on that version.

01:00:52.100 --> 01:00:55.390
So you can see, it
actually got me--

01:01:01.080 --> 01:01:02.880
built value like 551.

01:01:02.880 --> 01:01:03.380
That's fine.

01:01:03.380 --> 01:01:06.840
ANDREW: So we got
551 here and 550.

01:01:06.840 --> 01:01:09.430
OK, so now go back and pin them?

01:01:09.430 --> 01:01:09.930
FILIP: Yes.

01:01:14.080 --> 01:01:15.840
But you can start
with the carat.

01:01:15.840 --> 01:01:18.650
The carat says,
anything [INAUDIBLE]

01:01:18.650 --> 01:01:24.660
still send [? they're ?]
compatible to 551 is allowed.

01:01:24.660 --> 01:01:29.829
So 55x and maybe even 56x and--

01:01:29.829 --> 01:01:31.370
ANDREW: These are
the kinds of things

01:01:31.370 --> 01:01:33.340
you know when you've been on a
team for more than two months

01:01:33.340 --> 01:01:35.630
I guess, because I look
forward one day to having

01:01:35.630 --> 01:01:37.500
these Yoda-like capabilities.

01:01:37.500 --> 01:01:39.529
FILIP: Well, we
shouldn't know this.

01:01:39.529 --> 01:01:40.820
We shouldn't have to know this.

01:01:40.820 --> 01:01:42.629
But anyway.

01:01:42.629 --> 01:01:44.670
ANDREW: We should point
out, this will get fixed.

01:01:44.670 --> 01:01:48.710
This is just a dependency
compatibility issue.

01:01:48.710 --> 01:01:50.330
This will get fixed.

01:01:50.330 --> 01:01:53.619
It probably is fixed in master,
actually, in Flutter test.

01:01:53.619 --> 01:01:54.160
FILIP: Right.

01:01:57.640 --> 01:01:59.990
So we have this now.

01:01:59.990 --> 01:02:02.510
We have the packages.

01:02:02.510 --> 01:02:03.860
Let's go.

01:02:03.860 --> 01:02:06.200
ANDREW: So now we
do the package.get.

01:02:06.200 --> 01:02:10.520
Now we can go look at how
to actually do something.

01:02:10.520 --> 01:02:15.800
So let's go back to his example,
because I like using examples,

01:02:15.800 --> 01:02:17.040
and look at built value.

01:02:20.530 --> 01:02:23.640
Example-- so let's take
a look at some code that

01:02:23.640 --> 01:02:25.490
already exists.

01:02:25.490 --> 01:02:26.880
So we have some values here.

01:02:29.759 --> 01:02:31.800
So each of these classes
in built value, actually

01:02:31.800 --> 01:02:35.940
write them as an abstract class.

01:02:35.940 --> 01:02:39.270
And then the part file up here--

01:02:39.270 --> 01:02:41.430
this is the part-- you
see the G for generated.

01:02:41.430 --> 01:02:43.350
That's the naming convention.

01:02:43.350 --> 01:02:46.260
That's going to contain an
implementation of this class,

01:02:46.260 --> 01:02:48.690
if I'm not mistaken,
that has a whole bunch

01:02:48.690 --> 01:02:51.981
of generated stuff in there
for making it a built value.

01:02:51.981 --> 01:02:53.480
So let's go look
at that real quick.

01:02:58.190 --> 01:03:00.740
So it's got the
serializers in it.

01:03:00.740 --> 01:03:04.154
[INAUDIBLE]

01:03:07.458 --> 01:03:12.680
So there's a very simple value
builder, which is going to--

01:03:12.680 --> 01:03:15.660
FILIP: Right, so all
this code is something

01:03:15.660 --> 01:03:17.190
that you don't need to write.

01:03:17.190 --> 01:03:22.210
That will be generated
by the source generator.

01:03:22.210 --> 01:03:23.120
ANDREW: Source gen.

01:03:23.120 --> 01:03:27.032
FILIP: Source gen. But you
can still look at this.

01:03:27.032 --> 01:03:27.990
ANDREW: So let me see--

01:03:27.990 --> 01:03:30.340
I'm going to go
back to the docs--

01:03:30.340 --> 01:03:32.270
That's not the docs--

01:03:32.270 --> 01:03:32.770
real quick.

01:03:37.400 --> 01:03:41.100
And just want to get
another tap open here.

01:03:41.100 --> 01:03:42.840
So I think he as
an example for what

01:03:42.840 --> 01:03:45.620
your class should look like.

01:03:45.620 --> 01:03:46.560
Yeah, here's the live.

01:03:46.560 --> 01:03:49.510
Yeah, I actually have the
live template for IntelliJ.

01:03:49.510 --> 01:03:51.630
So I actually have
this on my IntelliJ ID.

01:03:51.630 --> 01:03:53.790
You can put it in
Android Studio as well.

01:03:53.790 --> 01:03:55.860
Actually, why don't I
just do that right now?

01:03:55.860 --> 01:03:57.230
FILIP: Yeah, let's add it.

01:03:57.230 --> 01:03:59.565
ANDREW: Android
Studio, Preferences,

01:03:59.565 --> 01:04:02.920
and it's called Live Templates.

01:04:02.920 --> 01:04:05.550
FILIP: Yup, I have a
bunch of live templates.

01:04:05.550 --> 01:04:06.960
ANDREW: Oh, yeah you do.

01:04:06.960 --> 01:04:09.810
FILIP: Yup, can you put it
to Dart actually, instead

01:04:09.810 --> 01:04:10.663
of Flutter?

01:04:10.663 --> 01:04:12.338
ANDREW: Yeah, sure.

01:04:12.338 --> 01:04:15.697
I can do plus, live template.

01:04:15.697 --> 01:04:17.280
Built I think is
what I've been using.

01:04:23.320 --> 01:04:23.860
FILIP: Nice.

01:04:23.860 --> 01:04:25.526
ANDREW: And then we'll
define a context.

01:04:25.526 --> 01:04:27.225
This would be in Dart.

01:04:27.225 --> 01:04:29.010
Does it need to be
top level I think?

01:04:29.010 --> 01:04:29.760
FILIP: I think so.

01:04:32.020 --> 01:04:33.020
ANDREW: And [INAUDIBLE].

01:04:33.020 --> 01:04:34.850
Now we'll go back
into our JSON parsing.

01:04:37.490 --> 01:04:40.340
And let's just comment
this out for now.

01:04:40.340 --> 01:04:42.370
You go away for now.

01:04:42.370 --> 01:04:45.628
Get rid of that for now as well.

01:04:45.628 --> 01:04:50.815
And you can return null just to
get rid of that error message.

01:04:53.946 --> 01:04:55.570
I'm getting rid of
all this [INAUDIBLE]

01:04:55.570 --> 01:04:56.772
so I can replace it.

01:05:01.200 --> 01:05:02.184
There we go.

01:05:07.600 --> 01:05:10.966
FILIP: Fun fact, just
so that you know.

01:05:10.966 --> 01:05:12.340
You can just do this.

01:05:15.000 --> 01:05:15.965
And it will--

01:05:15.965 --> 01:05:17.370
ANDREW: Oh, it will help it
cast it for me, won't it?

01:05:17.370 --> 01:05:18.870
FILIP: Yes, it will
cast it for you

01:05:18.870 --> 01:05:21.530
because it knows that
you're meaning [INAUDIBLE]..

01:05:21.530 --> 01:05:22.400
ANDREW: There we go.

01:05:22.400 --> 01:05:28.100
OK, so let me go back up
here, and I'll use my built.

01:05:28.100 --> 01:05:28.600
There we go.

01:05:28.600 --> 01:05:30.164
FILIP: Oh, love it.

01:05:30.164 --> 01:05:31.830
ANDREW: So I'll call
this article still.

01:05:34.860 --> 01:05:39.990
And so that is
giving me the basics.

01:05:39.990 --> 01:05:43.640
Now I'll import
package built value.

01:05:47.660 --> 01:05:50.047
And then I need to
do my part file.

01:05:50.047 --> 01:05:51.630
So this is something
you would put in.

01:05:51.630 --> 01:05:55.208
So JSON parse.

01:05:58.975 --> 01:06:01.350
We should really move this
into its own file in a second.

01:06:01.350 --> 01:06:02.610
FILIP: Yeah, that's fine.

01:06:02.610 --> 01:06:03.870
ANDREW: Just like that.

01:06:03.870 --> 01:06:04.810
FILIP: I think you--

01:06:04.810 --> 01:06:08.072
ANDREW: Oh, and the G. Thanks.

01:06:08.072 --> 01:06:09.060
There we go.

01:06:09.060 --> 01:06:10.920
FILIP: So which
doesn't exist yet.

01:06:10.920 --> 01:06:14.430
Also I think the life
template failed here.

01:06:14.430 --> 01:06:20.110
You want underscore, dollar
sign, and then article, yes.

01:06:20.110 --> 01:06:23.102
And maybe not this one.

01:06:23.102 --> 01:06:23.810
ANDREW: This guy.

01:06:23.810 --> 01:06:24.200
There we go.

01:06:24.200 --> 01:06:25.616
Oh, we keep that
one [INAUDIBLE]??

01:06:25.616 --> 01:06:27.230
FILIP: I think it's
the first one is--

01:06:27.230 --> 01:06:28.030
I don't know.

01:06:28.030 --> 01:06:29.110
It'll complain anyway.

01:06:29.110 --> 01:06:31.040
So we'll find out.

01:06:31.040 --> 01:06:36.146
ANDREW: OK, now we need
to run source gen. So

01:06:36.146 --> 01:06:37.770
built value also
gives you a little tip

01:06:37.770 --> 01:06:40.455
for this if I go back to it.

01:06:43.130 --> 01:06:44.980
There we go.

01:06:44.980 --> 01:06:46.830
So if you're using
Flutter-- and here's

01:06:46.830 --> 01:06:48.360
the exact command,
which I can just

01:06:48.360 --> 01:06:51.470
run from the root
directory of this project.

01:06:51.470 --> 01:06:52.590
Can I kill this?

01:06:52.590 --> 01:06:55.400
FILIP: Absolutely, yes.

01:06:55.400 --> 01:06:57.936
ANDREW: And this
is our app, right?

01:06:57.936 --> 01:06:59.560
So let's see what
happens if I do that.

01:07:02.562 --> 01:07:04.520
I think it will give you
an error about Dart UI

01:07:04.520 --> 01:07:07.090
that it gives you every time.

01:07:07.090 --> 01:07:07.630
There we go.

01:07:07.630 --> 01:07:08.980
FILIP: Severe.

01:07:08.980 --> 01:07:10.990
Error in built value generator.

01:07:10.990 --> 01:07:15.720
So we did not do
it, which we know.

01:07:15.720 --> 01:07:19.192
So that's missing.

01:07:19.192 --> 01:07:20.650
So the cool thing
about built value

01:07:20.650 --> 01:07:24.850
is it will actually tell you,
hey, you are missing this.

01:07:24.850 --> 01:07:27.340
Please add it like that.

01:07:27.340 --> 01:07:29.650
And it actually will also--

01:07:29.650 --> 01:07:30.999
ANDREW: There it is.

01:07:30.999 --> 01:07:31.540
You're right.

01:07:31.540 --> 01:07:33.040
We need that dollar
sign in there.

01:07:33.040 --> 01:07:35.190
That's what it's
complaining about.

01:07:35.190 --> 01:07:36.760
FILIP: Is it that though?

01:07:36.760 --> 01:07:38.005
I would be surprised.

01:07:38.005 --> 01:07:38.849
But let's see.

01:07:38.849 --> 01:07:40.140
ANDREW: Oh, ye of little faith.

01:07:43.770 --> 01:07:46.810
So I think we'll still
get the Dart UI error.

01:07:46.810 --> 01:07:48.790
Yeah, one of the nice
things about built value

01:07:48.790 --> 01:07:50.950
being on version
5 point whatever

01:07:50.950 --> 01:07:53.590
it is that they've really worked
out a lot of the common errors

01:07:53.590 --> 01:07:55.950
and produced nice
error messages.

01:07:55.950 --> 01:07:58.450
That's something I like about
working on Flutter in general,

01:07:58.450 --> 01:07:59.920
like [INAUDIBLE] team.

01:07:59.920 --> 01:08:00.880
You screw up something.

01:08:00.880 --> 01:08:04.300
In your code, you get this
paragraph-long error message

01:08:04.300 --> 01:08:05.500
saying, here's what's wrong.

01:08:05.500 --> 01:08:08.030
You probably did one
of these three things.

01:08:08.030 --> 01:08:08.860
Here's an article.

01:08:08.860 --> 01:08:10.526
FILIP: So here's what
I like about this.

01:08:10.526 --> 01:08:12.460
So it worked.

01:08:12.460 --> 01:08:14.650
It knows that it's
always the same thing.

01:08:14.650 --> 01:08:17.410
So it actually
created a hashcode

01:08:17.410 --> 01:08:23.380
that is an actual constant,
which I just laugh.

01:08:23.380 --> 01:08:29.109
And it has all these things
that we don't use yet

01:08:29.109 --> 01:08:32.229
because we don't have anything
on the article class yet.

01:08:32.229 --> 01:08:35.140
So how about we go back
to the command line

01:08:35.140 --> 01:08:39.340
and do built runner
watch instead of built?

01:08:39.340 --> 01:08:41.680
So you can see the
iterative process.

01:08:41.680 --> 01:08:44.710
So you can just go back
to the command line.

01:08:44.710 --> 01:08:46.580
Do watch instead of build.

01:08:46.580 --> 01:08:48.080
So build run a watch.

01:08:48.080 --> 01:08:49.460
ANDREW: So it's going to
watch the file system now.

01:08:49.460 --> 01:08:51.001
FILIP: It will watch
the file system.

01:08:51.001 --> 01:08:53.979
It will still take
its time to start.

01:08:53.979 --> 01:09:01.992
But from now on, changes
get there very fast.

01:09:01.992 --> 01:09:05.380
ANDREW: So now let's
go back and add--

01:09:05.380 --> 01:09:08.229
so, question, how do we add
the fields on here, right?

01:09:08.229 --> 01:09:09.729
Because they're
going to be getters.

01:09:09.729 --> 01:09:13.540
They have to be getters because
this is now an immutable class.

01:09:13.540 --> 01:09:15.310
So we can add--

01:09:15.310 --> 01:09:15.810
What is it?

01:09:15.810 --> 01:09:19.020
Is it [INAUDIBLE]
get ID like that?

01:09:19.020 --> 01:09:19.840
Or is it a final?

01:09:19.840 --> 01:09:22.104
Let's go [INAUDIBLE].

01:09:22.104 --> 01:09:23.145
FILIP: Yeah, [INAUDIBLE].

01:09:23.145 --> 01:09:24.186
ANDREW: Oh, that's right.

01:09:24.186 --> 01:09:24.950
FILIP: Yes, yes.

01:09:24.950 --> 01:09:30.910
So you're saying, on the main
class, you're just saying,

01:09:30.910 --> 01:09:34.670
I want to be able to access
ID of something like that.

01:09:34.670 --> 01:09:36.980
And so, did it update already?

01:09:36.980 --> 01:09:38.790
ANDREW: Oh, let's find out.

01:09:38.790 --> 01:09:39.540
It did.

01:09:39.540 --> 01:09:47.080
FILIP: OK, so the source
generator for built value

01:09:47.080 --> 01:09:52.330
knows that, OK, it
wants an ID class.

01:09:52.330 --> 01:09:56.494
And also if you go
to article builder,

01:09:56.494 --> 01:09:57.910
that's the class
that you will use

01:09:57.910 --> 01:10:01.870
for changing things, which
you will probably not actually

01:10:01.870 --> 01:10:02.840
be using.

01:10:02.840 --> 01:10:05.190
But if you scroll down
to article builder,

01:10:05.190 --> 01:10:09.340
the article builder has a
getter and setter for ID.

01:10:09.340 --> 01:10:16.670
So if you provide the article
class itself, that's immutable,

01:10:16.670 --> 01:10:17.770
You can't change it.

01:10:17.770 --> 01:10:21.910
But the article has
something called,

01:10:21.910 --> 01:10:24.970
I think, tool builder,
which will give you

01:10:24.970 --> 01:10:26.650
the builder class.

01:10:26.650 --> 01:10:28.840
And then you can change
anything about that.

01:10:28.840 --> 01:10:31.450
So that's really
nice because, if you

01:10:31.450 --> 01:10:34.720
want to provide just
immutable class,

01:10:34.720 --> 01:10:36.460
you will just provide article.

01:10:36.460 --> 01:10:38.950
And in our case, we
will just do that.

01:10:38.950 --> 01:10:42.820
But sometimes you want
to modify the class

01:10:42.820 --> 01:10:48.355
and provide another immutable
article that is different but--

01:10:48.355 --> 01:10:52.000
ANDREW: Based on the one
that you came with, right?

01:10:52.000 --> 01:10:54.460
So we are now at like
an hour and 10 minutes.

01:10:54.460 --> 01:10:55.239
FILIP: Oh, wow.

01:10:55.239 --> 01:10:56.655
ANDREW: Do you
want to call it now

01:10:56.655 --> 01:10:59.350
and we can finish this
up in the next one?

01:10:59.350 --> 01:10:59.850
FILIP: Sure.

01:10:59.850 --> 01:11:01.030
ANDREW: Because I'm
worried that this

01:11:01.030 --> 01:11:02.720
will take 10 minutes
instead of two

01:11:02.720 --> 01:11:04.900
to just get the
serialization stuff working.

01:11:04.900 --> 01:11:06.490
FILIP: Yes, yes.

01:11:06.490 --> 01:11:09.160
So we've covered
a bunch of things.

01:11:09.160 --> 01:11:10.560
ANDREW: Yeah, we should recap.

01:11:10.560 --> 01:11:11.060
Recap.

01:11:14.266 --> 01:11:15.640
They're waiting
to listen to you.

01:11:15.640 --> 01:11:18.130
FILIP: All right, so recap--

01:11:18.130 --> 01:11:19.840
we started with the bug.

01:11:19.840 --> 01:11:20.980
We fixed the bug.

01:11:20.980 --> 01:11:23.830
We looked at widget test.

01:11:23.830 --> 01:11:27.550
We showed you how to run your
widget test in an emulator

01:11:27.550 --> 01:11:29.500
so that you can see
that it's working.

01:11:29.500 --> 01:11:32.680
ANDREW: Yeah, it
was really cool.

01:11:32.680 --> 01:11:33.610
FILIP: Did we just--

01:11:33.610 --> 01:11:38.800
oh, we wrote some failing unit
tests for the JSON parsing.

01:11:38.800 --> 01:11:42.120
Then we went straight
to implementing

01:11:42.120 --> 01:11:47.260
get into the manual.convert
way, which worked.

01:11:47.260 --> 01:11:51.520
Then we found a bug,
a weird IDE thing.

01:11:51.520 --> 01:11:55.300
And then we started playing
around with built value,

01:11:55.300 --> 01:12:00.610
and we showed you the starts
of having a built value

01:12:00.610 --> 01:12:04.860
thing, which is immutable
and stuff like this.

01:12:04.860 --> 01:12:06.205
And that's where we--

01:12:06.205 --> 01:12:08.580
ANDREW: Yeah, we were talking
about getting communication

01:12:08.580 --> 01:12:09.060
going back [INAUDIBLE].

01:12:09.060 --> 01:12:09.750
This would be a good thing.

01:12:09.750 --> 01:12:11.208
If there's any part
of what we just

01:12:11.208 --> 01:12:13.980
showed that you feel we skipped
over or went too fast on

01:12:13.980 --> 01:12:15.690
and would like more
information, we

01:12:15.690 --> 01:12:17.190
can start with that
next time and go

01:12:17.190 --> 01:12:18.273
into a little more detail.

01:12:18.273 --> 01:12:20.445
So comment on that,
that would be great.

01:12:20.445 --> 01:12:22.320
If you'd like some more
detail about anything

01:12:22.320 --> 01:12:24.000
that you just saw
us sort of attempt

01:12:24.000 --> 01:12:27.060
to cram into about 65 minutes.

01:12:27.060 --> 01:12:27.810
FILIP: Yeah, yeah.

01:12:27.810 --> 01:12:31.890
And also if a lot of people
feel like this is just

01:12:31.890 --> 01:12:38.190
going too slow and we should
skip over things or maybe just,

01:12:38.190 --> 01:12:41.110
for the next time, we
already have this built

01:12:41.110 --> 01:12:44.400
and we just show you things,
that's also fine because it

01:12:44.400 --> 01:12:46.950
takes time to do this.

01:12:46.950 --> 01:12:49.259
ANDREW: You want to
the hashtag again?

01:12:49.259 --> 01:12:49.800
Don't forget.

01:12:49.800 --> 01:12:52.216
If you have questions about
Flutter in general or the show

01:12:52.216 --> 01:12:56.820
or whatever, #BoringShow,
and we'll look for them.

01:12:56.820 --> 01:12:58.800
FILIP: Or just comment
under the YouTube video.

01:12:58.800 --> 01:12:58.950
That's also fine.

01:12:58.950 --> 01:13:00.283
ANDREW: Or comment on the video.

01:13:00.283 --> 01:13:02.635
We responded to a bunch of
them, as hopefully y'all saw.

01:13:02.635 --> 01:13:03.720
OK, anything else?

01:13:03.720 --> 01:13:04.220
We good?

01:13:04.220 --> 01:13:04.719
FILIP: Yeah.

01:13:04.719 --> 01:13:05.580
ANDREW: All right.

01:13:05.580 --> 01:13:06.288
FILIP: Thank you.

01:13:06.288 --> 01:13:08.090
ANDREW: See you
next time, y'all.

