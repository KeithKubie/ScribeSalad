WEBVTT
Kind: captions
Language: en

00:00:01.167 --> 00:00:03.767
Don Schwarz:
I'm gonna hang out back here.

00:00:07.234 --> 00:00:09.634
Toby Reyelts: Well, looks like
everybody's settled.

00:00:09.634 --> 00:00:13.033
Hi. I'm Toby Reyelts,
and this is Don Schwarz with me.

00:00:13.033 --> 00:00:14.734
And we'd like to talk to you

00:00:14.734 --> 00:00:17.501
about Java support
on Google App Engine.

00:00:17.501 --> 00:00:19.000
First what we're gonna do

00:00:19.000 --> 00:00:20.701
is we're gonna give you
an overview

00:00:20.701 --> 00:00:22.400
of Google App Engine itself,

00:00:22.400 --> 00:00:24.400
and then we're gonna talk
specifically about

00:00:24.400 --> 00:00:26.234
Java support and detail.

00:00:26.234 --> 00:00:28.200
And then we're gonna do
a quick demo,

00:00:28.200 --> 00:00:32.634
and then we'll give you guys
a chance to ask us questions.

00:00:32.634 --> 00:00:34.400
So you're probably
asking yourself

00:00:34.400 --> 00:00:36.133
what is Google App Engine?

00:00:36.133 --> 00:00:37.734
Well, the obvious answer is

00:00:37.734 --> 00:00:39.400
we're a cloud-computing
platform.

00:00:39.400 --> 00:00:42.434
But that's kind of vague.
What does that really mean?

00:00:42.434 --> 00:00:45.200
It means you get to run
your applications

00:00:45.200 --> 00:00:48.167
on top of Google's
infrastructure.

00:00:48.167 --> 00:00:51.033
This really means
that we provide the container

00:00:51.033 --> 00:00:52.634
and the services.

00:00:52.634 --> 00:00:54.567
And there are basically

00:00:54.567 --> 00:00:58.100
two kinds of cloud-computing
technologies out there.

00:00:58.100 --> 00:01:01.033
People refer to them as either
infrastructure as a service

00:01:01.033 --> 00:01:02.868
or platform as a service.

00:01:02.868 --> 00:01:05.534
And what we provide
is platform as a service.

00:01:05.534 --> 00:01:08.734
That means hardware,
connectivity, networking,

00:01:08.734 --> 00:01:11.701
the operating system,
the JVM you run on top of,

00:01:11.701 --> 00:01:13.834
the servlet container
on top of that,

00:01:13.834 --> 00:01:16.467
and even Google's own
software services.

00:01:16.467 --> 00:01:19.200
We provide
all of that for you.

00:01:19.200 --> 00:01:21.534
The key features
of Google App Engine

00:01:21.534 --> 00:01:23.334
are that you don't need
to install or maintain

00:01:23.334 --> 00:01:24.734
your own stack.

00:01:24.734 --> 00:01:26.501
So everything that we just
talked about in the last slide,

00:01:26.501 --> 00:01:28.267
all of those points--

00:01:28.267 --> 00:01:30.868
if your hardware fails,
for example,

00:01:30.868 --> 00:01:32.901
we'll bring in new machines
automatically.

00:01:32.901 --> 00:01:36.501
If your operating system
needs upgrading,

00:01:36.501 --> 00:01:39.501
we'll install--we'll upgrade
the operating system for you.

00:01:39.501 --> 00:01:42.901
If there are security patches
that are needed for your JVM,

00:01:42.901 --> 00:01:44.701
we'll install those
security patches for you,

00:01:44.701 --> 00:01:46.701
all transparently.

00:01:46.701 --> 00:01:48.501
We do the scaling for you.

00:01:48.501 --> 00:01:52.300
So we'll dynamically allocate
resources to your application

00:01:52.300 --> 00:01:53.701
as it gets more load.

00:01:53.701 --> 00:01:57.701
So we'll just transparently
bring in more resources

00:01:57.701 --> 00:01:59.601
to scale it up.

00:01:59.601 --> 00:02:01.767
You get to use Google
scalable services.

00:02:01.767 --> 00:02:05.767
Google has a lot
of well-proven software,

00:02:05.767 --> 00:02:08.367
and we really scale
with that software.

00:02:08.367 --> 00:02:10.934
So what we're doing for you
with Google App Engine

00:02:10.934 --> 00:02:12.968
is we're giving you
that software to use

00:02:12.968 --> 00:02:18.033
via proven standard APIs
that you're familiar with

00:02:18.033 --> 00:02:23.167
and are even portable
to other Java platforms.

00:02:23.167 --> 00:02:25.400
You only get charged
for what you use.

00:02:25.400 --> 00:02:27.801
Because we're able
to dynamically scale

00:02:27.801 --> 00:02:30.968
the amount of resources that
we apply to your application,

00:02:30.968 --> 00:02:32.467
that means we don't have to

00:02:32.467 --> 00:02:34.868
dedicate a bunch
of hardware, right?

00:02:34.868 --> 00:02:37.300
So that means we also
don't have to charge you

00:02:37.300 --> 00:02:39.067
for all that dedicated hardware,

00:02:39.067 --> 00:02:40.868
especially
for peak usage, right?

00:02:40.868 --> 00:02:42.367
And peak use
looks a lot different

00:02:42.367 --> 00:02:44.467
than normal use might look like.

00:02:44.467 --> 00:02:45.968
And for this very same reason,

00:02:45.968 --> 00:02:47.767
this means that it's always
gonna be free

00:02:47.767 --> 00:02:50.467
to get started
with Google App Engine.

00:02:50.467 --> 00:02:51.868
And finally, we provide you

00:02:51.868 --> 00:02:53.767
with a built-in
application console.

00:02:53.767 --> 00:02:56.601
And with this console,
you're able to get an overview

00:02:56.601 --> 00:02:58.000
of how your app's doing.

00:02:58.000 --> 00:03:01.033
You can control
certain aspects of your app.

00:03:01.033 --> 00:03:03.901
You can monitor...like it
provides graphs for it,

00:03:03.901 --> 00:03:05.334
and you can even
diagnose problems

00:03:05.334 --> 00:03:08.834
that are occurring with it.

00:03:08.834 --> 00:03:10.434
Schwarz: So let's talk
a little bit about

00:03:10.434 --> 00:03:12.367
the architecture
of App Engine.

00:03:12.367 --> 00:03:14.334
At the top level, of course,
we have clients.

00:03:14.334 --> 00:03:16.033
So typically,
these will be web browsers.

00:03:16.033 --> 00:03:18.767
They may also be mobile clients
such as iPhone Applications

00:03:18.767 --> 00:03:21.934
or some other programmatic
HTTP client.

00:03:21.934 --> 00:03:24.968
These clients communicate with
a set of front end processes.

00:03:24.968 --> 00:03:26.834
These processes
know very little

00:03:26.834 --> 00:03:28.467
about individual
App Engine Applications.

00:03:28.467 --> 00:03:29.868
They're designed more
to provide

00:03:29.868 --> 00:03:31.934
application independent
functionality

00:03:31.934 --> 00:03:34.200
such as serving as
SSL endpoints.

00:03:34.200 --> 00:03:36.767
But their primary responsibility
is to forward requests

00:03:36.767 --> 00:03:38.767
on to a set of AppServers.

00:03:38.767 --> 00:03:41.033
At any given time, your
application will be loaded onto

00:03:41.033 --> 00:03:43.167
at least three AppServer
processes,

00:03:43.167 --> 00:03:46.534
and the front ends know how to
dispatch requests appropriately.

00:03:46.534 --> 00:03:47.901
There was also a load balancer

00:03:47.901 --> 00:03:50.133
that is not directly
in the serving path

00:03:50.133 --> 00:03:51.968
but essentially,
it monitors the load

00:03:51.968 --> 00:03:53.467
on the individual AppServers

00:03:53.467 --> 00:03:55.000
and is able
to reschedule applications

00:03:55.000 --> 00:03:56.601
based on incoming demand.

00:03:56.601 --> 00:03:58.300
Let's take a closer look

00:03:58.300 --> 00:03:59.767
at one of these AppServer
processes.

00:03:59.767 --> 00:04:01.667
There are a number of
applications

00:04:01.667 --> 00:04:03.000
loaded onto this AppServer,

00:04:03.000 --> 00:04:04.868
including all of the resource
files and code necessary

00:04:04.868 --> 00:04:06.300
to execute requests.

00:04:06.300 --> 00:04:07.801
There's also an API layer

00:04:07.801 --> 00:04:10.667
which allows those applications
to access the outside world

00:04:10.667 --> 00:04:14.067
or other pieces
of Google infrastructure.

00:04:14.067 --> 00:04:16.234
So now let's talk about when
you would use Google App Engine.

00:04:16.234 --> 00:04:18.534
When is App Engine
a good fit for you?

00:04:18.534 --> 00:04:20.567
Primarily, we're targeting
web applications.

00:04:20.567 --> 00:04:22.968
This means that incoming
requests need to be HTTP

00:04:22.968 --> 00:04:25.567
or HTTPS,
and individual requests

00:04:25.567 --> 00:04:27.534
are limited
to 30 seconds of runtime.

00:04:27.534 --> 00:04:29.367
At the moment,
we have no support

00:04:29.367 --> 00:04:31.000
for long-running background
processes,

00:04:31.000 --> 00:04:32.234
So you may, for example,

00:04:32.234 --> 00:04:34.100
be used to spinning up
a background thread

00:04:34.100 --> 00:04:36.501
that waits for some condition
and notifies clients

00:04:36.501 --> 00:04:38.734
or performs some task.

00:04:38.734 --> 00:04:41.467
What we provide instead of that
is cron functionality

00:04:41.467 --> 00:04:43.467
where you can periodically
schedule tasks,

00:04:43.467 --> 00:04:44.868
and you receive a callback

00:04:44.868 --> 00:04:46.868
when it's time to execute
that feature.

00:04:46.868 --> 00:04:48.801
We also have no support
for server push right now,

00:04:48.801 --> 00:04:50.501
so hanging gets or Comet,

00:04:50.501 --> 00:04:53.067
those techniques
are not currently supported.

00:04:53.067 --> 00:04:57.267
But we hope to allow that
sort of thing in the future.

00:04:57.267 --> 00:04:59.300
We also run your requests
in a sandboxed environment.

00:04:59.300 --> 00:05:00.601
Now, for Java, that means

00:05:00.601 --> 00:05:02.567
that there's a Java
SecurityManager installed

00:05:02.567 --> 00:05:07.501
which limits your access
to some features of the JVM.

00:05:07.501 --> 00:05:09.167
There's some additional
security restrictions

00:05:09.167 --> 00:05:15.267
which we'll talk about a little
bit later in this talk.

00:05:15.267 --> 00:05:16.801
Reyelts: So now we've reached

00:05:16.801 --> 00:05:19.400
the Java support section
of our slides,

00:05:19.400 --> 00:05:21.367
and these are the topics
that we're gonna cover.

00:05:21.367 --> 00:05:23.000
First we're gonna talk about
servlets

00:05:23.000 --> 00:05:24.968
and how you work with those
on App Engine.

00:05:24.968 --> 00:05:27.100
Then we're gonna talk about
the Google software services

00:05:27.100 --> 00:05:29.968
that we provide for you,
the APIs.

00:05:29.968 --> 00:05:31.567
Then we're gonna talk about
sandboxing,

00:05:31.567 --> 00:05:33.834
which is the restricted
environment

00:05:33.834 --> 00:05:36.234
that you run
your application in.

00:05:36.234 --> 00:05:38.267
Then we're gonna talk about
the Development App Server.

00:05:38.267 --> 00:05:40.467
That's actually a local version
of the app server

00:05:40.467 --> 00:05:42.501
that you run
on your own desktop.

00:05:42.501 --> 00:05:45.000
We're gonna talk about
deploying to Google servers

00:05:45.000 --> 00:05:47.133
and how you get your application
up into the cloud.

00:05:47.133 --> 00:05:48.968
And then we're gonna talk
about tooling,

00:05:48.968 --> 00:05:50.734
which is all of the tools
that we provide

00:05:50.734 --> 00:05:53.834
in the STK for you.

00:05:53.834 --> 00:05:55.934
So for the Servlet API
for App Engine,

00:05:55.934 --> 00:05:58.701
we give you a full Servlet
2.5 container,

00:05:58.701 --> 00:06:00.467
and that includes
the kind of things you'd expect

00:06:00.467 --> 00:06:01.934
with a container.

00:06:01.934 --> 00:06:03.801
It gives you
HTTP Session support.

00:06:03.801 --> 00:06:05.133
It gives you JSP support.

00:06:05.133 --> 00:06:07.968
The Session support
for App Engine out of the box

00:06:07.968 --> 00:06:10.701
is both persistent
and distributed.

00:06:10.701 --> 00:06:12.267
And what that means,
for example,

00:06:12.267 --> 00:06:13.534
is that if you have...

00:06:13.534 --> 00:06:17.734
if in one JVM you put
a value into the session,

00:06:17.734 --> 00:06:19.868
you'll be able to retrieve
that same value

00:06:19.868 --> 00:06:21.834
in a different JVM
out of the session.

00:06:21.834 --> 00:06:23.601
It also means that those values
are gonna persist

00:06:23.601 --> 00:06:26.801
across machine failures.

00:06:26.801 --> 00:06:29.000
We use Jetty and Jasper
in App Engine,

00:06:29.000 --> 00:06:30.868
and we're really happy
with them.

00:06:30.868 --> 00:06:33.100
But what really happens
on the production server

00:06:33.100 --> 00:06:36.834
is that we're powered by
Google's internal HTTP stack,

00:06:36.834 --> 00:06:39.067
so what's receiving
connections there

00:06:39.067 --> 00:06:40.868
is all of Google's software.

00:06:40.868 --> 00:06:45.100
And then by the time
it reaches the Java runtime,

00:06:45.100 --> 00:06:47.300
we have Jetty involved,

00:06:47.300 --> 00:06:49.601
and Jetty is actually
acting as an adaptor

00:06:49.601 --> 00:06:54.467
between Google's HTTP
serving stack

00:06:54.467 --> 00:06:57.567
and the Servlet 2.5 API.

00:06:57.567 --> 00:06:58.901
And because of that,

00:06:58.901 --> 00:07:00.434
that means that there
really is no support

00:07:00.434 --> 00:07:01.934
for Jetty's specific features,

00:07:01.934 --> 00:07:04.801
because Jetty is not
the workhorse here.

00:07:04.801 --> 00:07:07.267
It's not actually
providing a functionality.

00:07:07.267 --> 00:07:09.667
So that means no jetty-web.xml,

00:07:09.667 --> 00:07:12.167
it means no Jetty continuations.

00:07:12.167 --> 00:07:14.701
And because of this, also,

00:07:14.701 --> 00:07:17.868
our choice of Servlet container
is subject to change.

00:07:17.868 --> 00:07:20.467
So you shouldn't be programming
to that in general.

00:07:20.467 --> 00:07:22.100
For example, if we find

00:07:22.100 --> 00:07:24.701
some other container
that we're happy with

00:07:24.701 --> 00:07:28.100
and does more functionality
for us,

00:07:28.100 --> 00:07:31.033
we'll switch over to that.

00:07:31.033 --> 00:07:33.367
So like other
Servlet containers,

00:07:33.367 --> 00:07:37.501
you configure your application
using a web.xml file, right?

00:07:37.501 --> 00:07:39.100
A serweb.xml file.

00:07:39.100 --> 00:07:41.734
But for App Engine we add
an additional configuration file

00:07:41.734 --> 00:07:43.234
into the mix.

00:07:43.234 --> 00:07:44.934
It's called an App Engine
web XML file.

00:07:44.934 --> 00:07:48.534
And this is the simplest example
of that configuration file.

00:07:48.534 --> 00:07:51.100
There are two elements here.
One is the application element.

00:07:51.100 --> 00:07:52.834
The second is a version element.

00:07:52.834 --> 00:07:54.801
So App Engine
supports versioning,

00:07:54.801 --> 00:07:56.033
which is really cool.

00:07:56.033 --> 00:07:58.033
You can have two different
versions of your app

00:07:58.033 --> 00:07:59.501
running at the same time.

00:07:59.501 --> 00:08:00.667
Actually, multiple versions
of your app

00:08:00.667 --> 00:08:02.067
running at the same time.

00:08:02.067 --> 00:08:04.434
An example
of where you might use this

00:08:04.434 --> 00:08:06.734
is you might have both
a production version

00:08:06.734 --> 00:08:11.000
and a QA version concurrently
up on App Engine.

00:08:11.000 --> 00:08:13.834
Here's a more complex version
of the configuration file.

00:08:13.834 --> 00:08:15.567
We introduce
two more elements.

00:08:15.567 --> 00:08:17.701
One's a static files.
One's resource files.

00:08:17.701 --> 00:08:21.868
We allow you
to distinguish between

00:08:21.868 --> 00:08:24.267
static content
and between dynamic content.

00:08:24.267 --> 00:08:25.767
And we do this because

00:08:25.767 --> 00:08:28.968
we're able to really optimally
serve static content.

00:08:28.968 --> 00:08:31.567
And because we can
optimally serve that,

00:08:31.567 --> 00:08:32.934
that means, in the end,

00:08:32.934 --> 00:08:34.534
you're gonna be charged
less money

00:08:34.534 --> 00:08:35.968
because we don't
have to dedicate

00:08:35.968 --> 00:08:37.267
as much resources to it.

00:08:37.267 --> 00:08:38.834
It also means
that your response times

00:08:38.834 --> 00:08:40.501
are gonna be lower,
because we serve these

00:08:40.501 --> 00:08:44.100
out of like caching servers
and things like that.

00:08:44.100 --> 00:08:47.234
In this version,
we added system properties.

00:08:47.234 --> 00:08:50.334
You're able to both configure
system properties

00:08:50.334 --> 00:08:52.534
and environment variables
for your JVM

00:08:52.534 --> 00:08:56.367
so you can get at those
via your application.

00:08:56.367 --> 00:08:58.367
And finally,
you're able to both

00:08:58.367 --> 00:09:01.801
optionally enable SSL
and HTTP sessions.

00:09:01.801 --> 00:09:04.601
The reason we do this is because
there's a performance hit

00:09:04.601 --> 00:09:06.667
associated
with these two features.

00:09:06.667 --> 00:09:09.234
And by default, we don't want
every single application

00:09:09.234 --> 00:09:12.834
paying for features that
they don't have to actually...

00:09:12.834 --> 00:09:14.868
that they don't actually
take advantage of.

00:09:14.868 --> 00:09:17.601
So you're able to turn those off
as you need.

00:09:17.601 --> 00:09:21.334
Don is going to talk some
about software services here.

00:09:21.334 --> 00:09:24.434
Schwarz: All right, so we don't
only provide a Servlet Engine.

00:09:24.434 --> 00:09:26.434
We also provide a number
of software services

00:09:26.434 --> 00:09:29.067
which allow you to
leverage Google's infrastructure

00:09:29.067 --> 00:09:31.968
or to perform tasks that would
otherwise be difficult to do

00:09:31.968 --> 00:09:33.767
within our sandboxed
environment.

00:09:33.767 --> 00:09:36.067
For example, we provide
an Authentication API

00:09:36.067 --> 00:09:38.000
which allows users
to log into your applications

00:09:38.000 --> 00:09:40.100
using their existing
Google Account.

00:09:40.100 --> 00:09:41.434
We also provide a datastore,

00:09:41.434 --> 00:09:43.534
which allows you to store data
in Bigtable,

00:09:43.534 --> 00:09:45.133
Google's scaleable database,

00:09:45.133 --> 00:09:47.300
which is used in virtually
every Google product.

00:09:47.300 --> 00:09:48.901
In terms of caching,

00:09:48.901 --> 00:09:50.634
we provide a custom version
of memcache

00:09:50.634 --> 00:09:53.434
which has been optimized
to run on Google servers.

00:09:53.434 --> 00:09:55.634
And we allow you
to send outbound emails,

00:09:55.634 --> 00:09:57.367
and we use the same
mail gateway for that

00:09:57.367 --> 00:09:58.968
that's used to send
Gmail messages.

00:09:58.968 --> 00:10:01.834
So obviously, there won't be any
scalability concerns with it.

00:10:01.834 --> 00:10:04.901
And we also provide what we call
the URLFetch service,

00:10:04.901 --> 00:10:08.234
which is a way to send HTTP
requests out of your application

00:10:08.234 --> 00:10:11.801
so you can access web services
or retrieve RSS feeds

00:10:11.801 --> 00:10:14.033
or scrape web pages--
anything like that.

00:10:14.033 --> 00:10:17.300
And that uses a caching proxy
which is shared

00:10:17.300 --> 00:10:19.400
not only amongst
all App Engine Applications

00:10:19.400 --> 00:10:21.334
but certain other Google
services as well

00:10:21.334 --> 00:10:24.000
so you get the benefit
of a large cache.

00:10:24.000 --> 00:10:25.501
Let's talk a little bit more

00:10:25.501 --> 00:10:28.033
about how you use
these services.

00:10:28.033 --> 00:10:30.234
The top level--we try to have
a standard interface

00:10:30.234 --> 00:10:31.801
on top of each of our services.

00:10:31.801 --> 00:10:34.634
So for example,
JDO, JPA, JCache, JavaMail--

00:10:34.634 --> 00:10:36.067
these are existing standards

00:10:36.067 --> 00:10:37.734
which we've provided
adaptors for

00:10:37.734 --> 00:10:40.334
so that they will use our
services behind the scenes.

00:10:40.334 --> 00:10:42.100
These are entirely optional.

00:10:42.100 --> 00:10:43.367
You're free not to use

00:10:43.367 --> 00:10:44.434
the standard interfaces
if you'd like.

00:10:44.434 --> 00:10:46.300
however,
they serve two purposes.

00:10:46.300 --> 00:10:48.300
They allow you to more easily
take applications

00:10:48.300 --> 00:10:50.601
which were written
with these services in mind

00:10:50.601 --> 00:10:52.601
and port them
to the App Engine environment.

00:10:52.601 --> 00:10:54.133
Now, I'm not gonna say that's
always gonna work perfectly

00:10:54.133 --> 00:10:55.534
out of the box in all cases.

00:10:55.534 --> 00:10:58.567
In some cases we only provide
a subset of the standard.

00:10:58.567 --> 00:11:00.200
But at least it's the same
technology and the same class,

00:11:00.200 --> 00:11:01.567
and it should make it
much more easy

00:11:01.567 --> 00:11:03.400
to port your application
to App Engine.

00:11:03.400 --> 00:11:05.400
It also allows you
to take your application,

00:11:05.400 --> 00:11:07.968
which was written for App Engine
using these services,

00:11:07.968 --> 00:11:09.667
and put it on
another hosting provider,

00:11:09.667 --> 00:11:12.200
should you choose to do so.

00:11:12.200 --> 00:11:14.734
Below that we have a set
of proprietary interfaces.

00:11:14.734 --> 00:11:17.334
These were written by us
in Java,

00:11:17.334 --> 00:11:19.033
so these common Java idioms

00:11:19.033 --> 00:11:21.300
should be very simple
and straightforward to use,

00:11:21.300 --> 00:11:24.501
and they provide just the
minimal subset of functionality

00:11:24.501 --> 00:11:26.234
that the underlying
service supports

00:11:26.234 --> 00:11:29.734
so there's no cruft
or unsupported features.

00:11:29.734 --> 00:11:32.634
Below that, we have
a language-neutral interface.

00:11:32.634 --> 00:11:35.901
So this is built
using Protocol Buffers,

00:11:35.901 --> 00:11:38.267
which are a language-neutral
data serialization format

00:11:38.267 --> 00:11:41.467
created at Google
and since open-sourced.

00:11:41.467 --> 00:11:43.467
And this allows us to have
one definition of each service

00:11:43.467 --> 00:11:45.667
that's shared amongst both
the Python and Java runtimes

00:11:45.667 --> 00:11:49.467
of App Engine,
as well as any future runtimes.

00:11:49.467 --> 00:11:50.701
And below that, of course,

00:11:50.701 --> 00:11:52.701
we have the implementation
of the service.

00:11:52.701 --> 00:11:54.701
So when you're running your
application on Google servers,

00:11:54.701 --> 00:11:56.167
this simply dispatches requests

00:11:56.167 --> 00:11:58.534
to the underlying
piece of Google technology

00:11:58.534 --> 00:12:00.267
which actually
implements the service.

00:12:00.267 --> 00:12:02.167
However, if you're running
your application locally,

00:12:02.167 --> 00:12:03.567
we actually provide
stub implementations

00:12:03.567 --> 00:12:05.000
of each of these services

00:12:05.000 --> 00:12:09.901
which lets you run everything
on your local work station.

00:12:09.901 --> 00:12:13.100
So...why do we have all these
layers of indirection?

00:12:13.100 --> 00:12:15.701
Well, it's for two reasons.
It facilitates evolution.

00:12:15.701 --> 00:12:17.801
It allows us to basically
change each of these layers

00:12:17.801 --> 00:12:20.000
while having a minimal impact
on the layer above it

00:12:20.000 --> 00:12:23.000
and ultimately, a minimal impact
on your own application code.

00:12:23.000 --> 00:12:24.901
It also provides consistency,

00:12:24.901 --> 00:12:27.634
so any validation that we
enforce at each of these layers

00:12:27.634 --> 00:12:29.501
will be consistently
validated--

00:12:29.501 --> 00:12:31.367
consistently implemented,

00:12:31.367 --> 00:12:32.767
whether you're running
on Google servers

00:12:32.767 --> 00:12:35.634
or testing your application
locally.

00:12:35.634 --> 00:12:37.767
So when you actually want
to use one of these services,

00:12:37.767 --> 00:12:39.934
you'll use something called
the App Engine API jar.

00:12:39.934 --> 00:12:42.200
This is a jar that we provide
which contains

00:12:42.200 --> 00:12:44.367
all the proprietary APIs
I just talked about

00:12:44.367 --> 00:12:47.701
as well as a full implementation
of JCache and JavaMail

00:12:47.701 --> 00:12:49.234
and our adapters for them.

00:12:49.234 --> 00:12:53.167
Our GPA and JDO interfaces
are provided in separate jars

00:12:53.167 --> 00:12:56.100
which depend on
App Engine API jar.

00:12:56.100 --> 00:12:58.200
An App Engine API jar
has a release cycle

00:12:58.200 --> 00:12:59.400
that's somewhat different

00:12:59.400 --> 00:13:01.834
from the wider App Engine
release cycle.

00:13:01.834 --> 00:13:03.834
Major releases
are reserved for

00:13:03.834 --> 00:13:05.400
breaking API changes.

00:13:05.400 --> 00:13:07.067
So for example,
if we remove a method

00:13:07.067 --> 00:13:10.634
or remove a class or change Java
serialization compatibility,

00:13:10.634 --> 00:13:13.200
we would reserve that
for a major release.

00:13:13.200 --> 00:13:14.634
And in order to pick up
a major release,

00:13:14.634 --> 00:13:16.567
you would need to actually
get the new jar from us,

00:13:16.567 --> 00:13:20.801
recompile your application,
and redeploy it.

00:13:20.801 --> 00:13:22.567
Patch releases,
on the other hand,

00:13:22.567 --> 00:13:24.100
we would use for bug fixes

00:13:24.100 --> 00:13:26.434
and new functionality
which won't break existing Apps.

00:13:26.434 --> 00:13:27.868
These happen
much more frequently.

00:13:27.868 --> 00:13:29.267
And it's important to note

00:13:29.267 --> 00:13:31.934
that upgrades
to the latest patch release

00:13:31.934 --> 00:13:33.200
happen automatically.

00:13:33.200 --> 00:13:34.834
You don't have to redeploy
your application.

00:13:34.834 --> 00:13:39.234
You always get the benefit
of the latest patch release.

00:13:39.234 --> 00:13:41.734
Now let's talk
a little bit more about

00:13:41.734 --> 00:13:43.033
where your user code

00:13:43.033 --> 00:13:45.300
interfaces with the actual
service implementation.

00:13:45.300 --> 00:13:47.667
We call this point
the ApiProxy.

00:13:47.667 --> 00:13:49.033
The ApiProxy is something

00:13:49.033 --> 00:13:51.701
that's invoked internally
by the proprietary APIs,

00:13:51.701 --> 00:13:53.767
and it deals purely
with byte arrays,

00:13:53.767 --> 00:13:55.634
which are serialized
Protocol Buffers,

00:13:55.634 --> 00:13:58.567
so it doesn't know anything
about individual services.

00:13:58.567 --> 00:14:01.734
The ApiProxy stores
a singleton delegate instance

00:14:01.734 --> 00:14:04.367
which knows how to dispatch
service calls.

00:14:04.367 --> 00:14:06.701
And it also stores
some per-request information

00:14:06.701 --> 00:14:09.267
in an environment object
that's stored per thread.

00:14:09.267 --> 00:14:11.033
So if you want to use
the API stack

00:14:11.033 --> 00:14:12.400
that we've been talking about

00:14:12.400 --> 00:14:13.968
outside of the App Engine
environment,

00:14:13.968 --> 00:14:15.868
there's two things
you need to do

00:14:15.868 --> 00:14:17.601
to configure the ApiProxy.

00:14:17.601 --> 00:14:19.100
One is to set
a custom delegate

00:14:19.100 --> 00:14:21.000
so that it knows what to do
with service calls.

00:14:21.000 --> 00:14:22.067
And the other is to set
an environment

00:14:22.067 --> 00:14:24.167
for the current thread.

00:14:24.167 --> 00:14:25.334
So to make this easier,
we provide a class

00:14:25.334 --> 00:14:27.767
called
the APIProxyLocalFactory

00:14:27.767 --> 00:14:30.634
which has a custom
ApiProxy delegate

00:14:30.634 --> 00:14:32.601
that simply locates
service implementations

00:14:32.601 --> 00:14:35.067
on the class path
and dispatches requests to them.

00:14:35.067 --> 00:14:37.701
So this is very useful,
for example, in unit testing

00:14:37.701 --> 00:14:39.701
where you may want to
unit test your code

00:14:39.701 --> 00:14:42.734
that depends on the datastore
either directly

00:14:42.734 --> 00:14:45.167
or indirectly via JDO and JPA.

00:14:45.167 --> 00:14:47.234
You may want to unit test
this in-process

00:14:47.234 --> 00:14:48.634
so you can use this to find

00:14:48.634 --> 00:14:51.067
the in-memory based
implementation of the datastore

00:14:51.067 --> 00:14:54.000
that we provide.

00:14:54.000 --> 00:14:56.000
So why am I telling you about
the ApiProxy?

00:14:56.000 --> 00:14:57.934
It seems like kind of
a low-level detail

00:14:57.934 --> 00:14:59.567
of our API stack.

00:14:59.567 --> 00:15:01.434
Well, you can do some very
interesting things

00:15:01.434 --> 00:15:03.067
if you know about
the ApiProxy.

00:15:03.067 --> 00:15:05.133
You can essentially intercept
any service call.

00:15:05.133 --> 00:15:07.200
This allows for a form
of aspect-oriented programming

00:15:07.200 --> 00:15:08.634
across our service stack

00:15:08.634 --> 00:15:12.000
where you basically can
intercept individual API calls,

00:15:12.000 --> 00:15:14.868
do some logic before
or after them,

00:15:14.868 --> 00:15:17.467
then continue on
with the original logic.

00:15:17.467 --> 00:15:19.901
This allows you to do some
profiling and debugging

00:15:19.901 --> 00:15:21.267
within the production
environment,

00:15:21.267 --> 00:15:23.100
which you might not
otherwise be able to do

00:15:23.100 --> 00:15:27.133
by, say, attaching a debugger
or a profiler to Google servers.

00:15:27.133 --> 00:15:29.133
So here's an example
of doing exactly that.

00:15:29.133 --> 00:15:31.868
This is basically a custom
ApiProxy delegate

00:15:31.868 --> 00:15:34.133
which wraps around
the default delegate

00:15:34.133 --> 00:15:36.334
and provides a little bit
of functionality

00:15:36.334 --> 00:15:38.200
before and after
each service call

00:15:38.200 --> 00:15:39.834
to record the time
of that service call

00:15:39.834 --> 00:15:43.133
and log it
for future reference.

00:15:46.701 --> 00:15:48.968
Reyelts: So now I'm gonna
talk some about sandboxing.

00:15:48.968 --> 00:15:52.367
So the kind of thing we do
in sandboxing in App Engine

00:15:52.367 --> 00:15:54.734
is that we restrict
dangerous JVM permissions

00:15:54.734 --> 00:15:56.133
and we whiteList classes.

00:15:56.133 --> 00:15:58.534
Now, the kind of JVM permissions
we restrict

00:15:58.534 --> 00:16:00.901
are things like file permission.

00:16:00.901 --> 00:16:03.400
File permission,
your network permissions--

00:16:03.400 --> 00:16:05.400
things along those lines.

00:16:05.400 --> 00:16:08.400
The way whitelisting works
in the sandbox

00:16:08.400 --> 00:16:10.601
is that we take a subset
of the JRE

00:16:10.601 --> 00:16:13.601
that we determined is safe
and that we've audited for that,

00:16:13.601 --> 00:16:15.801
and we make that available
to applications.

00:16:15.801 --> 00:16:19.067
If an application
tries to load a class

00:16:19.067 --> 00:16:20.601
that's not on the whitelist,

00:16:20.601 --> 00:16:23.901
they end up getting
a no class def found error.

00:16:23.901 --> 00:16:26.367
Why do we do this?
Well, for a few reasons.

00:16:26.367 --> 00:16:27.767
The first is that

00:16:27.767 --> 00:16:29.400
many of the restrictions
that we have in place

00:16:29.400 --> 00:16:31.400
just don't make sense
under clustering.

00:16:31.400 --> 00:16:34.033
JVMs kind of spin up,
and they go away

00:16:34.033 --> 00:16:36.834
as your application
gets more load or less load.

00:16:36.834 --> 00:16:39.000
In fact, if you compare
a lot of the restrictions

00:16:39.000 --> 00:16:40.667
that we have in App Engine,

00:16:40.667 --> 00:16:43.167
you'll see that there's a huge
similarity to, like, EJB

00:16:43.167 --> 00:16:45.100
in terms of the restrictions
it has.

00:16:45.100 --> 00:16:48.133
Second reason is to protect
applications from each other.

00:16:48.133 --> 00:16:50.801
We don't want, like,
Joe's evil application

00:16:50.801 --> 00:16:53.601
attacking your application
and reading your data

00:16:53.601 --> 00:16:55.801
and doing bad things
in general.

00:16:55.801 --> 00:16:58.434
So by having a protective
sandbox around that,

00:16:58.434 --> 00:17:00.601
we keep that kind of stuff
from happening.

00:17:00.601 --> 00:17:02.267
The third
is quality of service.

00:17:02.267 --> 00:17:04.467
We don't want things
actively preventing us

00:17:04.467 --> 00:17:07.067
from being able
to scale your app

00:17:07.067 --> 00:17:10.667
and provide more resources
to it.

00:17:10.667 --> 00:17:12.601
The kinds of restrictions
under sandboxing

00:17:12.601 --> 00:17:14.601
are threads, networking,
file system,

00:17:14.601 --> 00:17:16.501
Java2D and native code.

00:17:16.501 --> 00:17:19.601
And let's talk a little bit
about each of those in detail.

00:17:19.601 --> 00:17:22.033
For threads, you can't create
a new thread under App Engine.

00:17:22.033 --> 00:17:23.367
What you can do

00:17:23.367 --> 00:17:25.801
is you can modify
the state of your current thread

00:17:25.801 --> 00:17:27.968
or otherwise inspect it.

00:17:27.968 --> 00:17:30.634
Something that we're working on
and we'll hope to have soon

00:17:30.634 --> 00:17:32.400
is an asynchronous API.

00:17:32.400 --> 00:17:34.534
And the way the asynchronous API
would work

00:17:34.534 --> 00:17:37.000
is that you'd be able
to make multiple API calls,

00:17:37.000 --> 00:17:40.467
let's say to the datastore
or to our fetch service

00:17:40.467 --> 00:17:44.434
or something along those lines,
all concurrently in parallel,

00:17:44.434 --> 00:17:47.100
even though it's happening
on a single thread.

00:17:47.100 --> 00:17:49.033
For network connections,

00:17:49.033 --> 00:17:51.734
we don't allow you to establish
a server socket

00:17:51.734 --> 00:17:54.901
or arbitrary, outgoing
network-bound connections.

00:17:54.901 --> 00:17:57.234
Instead, we do let you
establish HTB connections,

00:17:57.234 --> 00:17:58.634
and we'll let you do that

00:17:58.634 --> 00:18:01.634
via any of the
java.net.url-based classes,

00:18:01.634 --> 00:18:04.734
like HTB URLConnection
Java.net.url,

00:18:04.734 --> 00:18:06.434
so on and so forth.

00:18:06.434 --> 00:18:08.701
The third has to do
with the file system.

00:18:08.701 --> 00:18:11.968
We don't let you write
directly to the file system.

00:18:11.968 --> 00:18:13.501
We'll let you read anything

00:18:13.501 --> 00:18:15.534
that you upload with
your application, however.

00:18:15.534 --> 00:18:17.467
If you do need to store data,

00:18:17.467 --> 00:18:19.968
there are roughly three places
you can do that.

00:18:19.968 --> 00:18:22.234
You can either do it
in your JVM's local memory,

00:18:22.234 --> 00:18:26.501
in which case it will neither
be distributed nor persistent.

00:18:26.501 --> 00:18:28.133
You can do it in memcache,

00:18:28.133 --> 00:18:30.267
in which case
it will be distributed,

00:18:30.267 --> 00:18:32.267
but there'll be
no guarantees about it,

00:18:32.267 --> 00:18:33.701
and it won't be persistent,

00:18:33.701 --> 00:18:35.200
or the datastore,
in which case

00:18:35.200 --> 00:18:37.567
it'll both be persistent
and distributed,

00:18:37.567 --> 00:18:40.534
and you can even wrap
transactions around it.

00:18:40.534 --> 00:18:44.767
Java2D...Java2D is kind of
notoriously hard to secure.

00:18:44.767 --> 00:18:47.267
There's a lot of native code
potentially involved with it.

00:18:47.267 --> 00:18:50.000
There are drivers
for graphic subsystems,

00:18:50.000 --> 00:18:51.367
things like that.

00:18:51.367 --> 00:18:52.634
And so for right now,

00:18:52.634 --> 00:18:54.434
we can't allow that
in App Engine.

00:18:54.434 --> 00:18:56.133
What we do offer up
as alternatives

00:18:56.133 --> 00:18:58.067
are an imaging API
which allows you to provide

00:18:58.067 --> 00:19:00.467
various transforms
like compositing

00:19:00.467 --> 00:19:02.634
or resizing or things like that.

00:19:02.634 --> 00:19:06.634
and if you're able to get a hold
of a software rendering library,

00:19:06.634 --> 00:19:09.234
those should generally work
under App Engine okay.

00:19:09.234 --> 00:19:11.801
And finally,
you can't obviously upload

00:19:11.801 --> 00:19:14.200
arbitrary native code
to App Engine.

00:19:14.200 --> 00:19:17.801
Instead, you're just gonna
have to stick to pure Java.

00:19:17.801 --> 00:19:20.601
So...we really want
App Engine to be

00:19:20.601 --> 00:19:22.601
as flexible as possible,

00:19:22.601 --> 00:19:25.801
and so we try our best to make
the sandboxing very flexible.

00:19:25.801 --> 00:19:27.267
But a problem with this

00:19:27.267 --> 00:19:29.434
is that we can't just implement
it with JVM permissions.

00:19:29.434 --> 00:19:32.067
They end up being really coarse
most of the time.

00:19:32.067 --> 00:19:35.033
They give you this little
tiny cramped sandbox

00:19:35.033 --> 00:19:36.801
to work in, right?

00:19:36.801 --> 00:19:41.133
Or they let you blow up
the world, and, uh...

00:19:41.133 --> 00:19:42.934
so we try to give you
a happy medium

00:19:42.934 --> 00:19:45.434
between these two worlds.

00:19:45.434 --> 00:19:47.601
Let's talk about reflection
as an example.

00:19:47.601 --> 00:19:50.033
There are two JVM permissions
surrounding reflection.

00:19:50.033 --> 00:19:51.968
The first is
suppressAccessChecks.

00:19:51.968 --> 00:19:54.501
The second is
accessDeclaredMembers.

00:19:54.501 --> 00:19:56.334
And what these permissions
allow you to do

00:19:56.334 --> 00:19:58.567
are to get at the private
fields of objects

00:19:58.567 --> 00:20:00.968
or even call private methods.

00:20:00.968 --> 00:20:04.434
Here's an example
of very bad, evil code.

00:20:04.434 --> 00:20:06.534
What it's doing
is it's getting a hold of

00:20:06.534 --> 00:20:09.834
the private account field
of the string class,

00:20:09.834 --> 00:20:12.267
and it's changing the value
of the string object

00:20:12.267 --> 00:20:14.300
from 11 to 2.

00:20:14.300 --> 00:20:16.801
Now, you could see
how this could be bad

00:20:16.801 --> 00:20:18.200
in all sorts of ways.

00:20:18.200 --> 00:20:19.834
We don't allow this kind
of use of reflection

00:20:19.834 --> 00:20:21.667
under App Engine.

00:20:21.667 --> 00:20:24.267
However, this code right here,
this is nice code.

00:20:24.267 --> 00:20:26.000
We do allow this
to run under App Engine.

00:20:26.000 --> 00:20:27.467
What it's doing

00:20:27.467 --> 00:20:29.901
is also inspecting the private
field of an object,

00:20:29.901 --> 00:20:31.400
but it's doing this
on an object

00:20:31.400 --> 00:20:33.534
that's been uploaded
with the application.

00:20:33.534 --> 00:20:35.200
So it's the application's
own code.

00:20:35.200 --> 00:20:37.067
This kind of abstraction
breaking

00:20:37.067 --> 00:20:38.767
is used all the time
in libraries

00:20:38.767 --> 00:20:42.400
like for serialization
and RPC, for example.

00:20:42.400 --> 00:20:45.200
Let's talk about another
example--class loading.

00:20:45.200 --> 00:20:48.200
There's a single JVM permission
around class loading,

00:20:48.200 --> 00:20:49.834
and it's createClassLoader.

00:20:49.834 --> 00:20:52.067
And if you have this permission,
you're able to create

00:20:52.067 --> 00:20:53.767
your own user-controlled
ClassLoader,

00:20:53.767 --> 00:20:56.868
and if you don't,
you're just out of luck.

00:20:56.868 --> 00:20:58.334
Well, here's an example
of bad code

00:20:58.334 --> 00:20:59.934
that doesn't work
in App Engine.

00:20:59.934 --> 00:21:02.167
You can try to create
a ClassLoader,

00:21:02.167 --> 00:21:03.801
and if you could,

00:21:03.801 --> 00:21:06.434
you'd be able to assign
arbitrary permissions to it.

00:21:06.434 --> 00:21:08.234
So any code you loaded
with that ClassLoader

00:21:08.234 --> 00:21:11.467
would be able to do anything
in the world that it wanted to.

00:21:11.467 --> 00:21:15.501
So you can see how that
would be a bad thing.

00:21:15.501 --> 00:21:16.834
On the other hand,

00:21:16.834 --> 00:21:18.501
what we do allow you
to do in App Engine

00:21:18.501 --> 00:21:20.000
is create a ClassLoader

00:21:20.000 --> 00:21:22.601
which allows you to dynamically
load byte code.

00:21:22.601 --> 00:21:24.534
So the differences between
these two ClassLoaders

00:21:24.534 --> 00:21:26.501
is one is assigning
arbitrary permissions,

00:21:26.501 --> 00:21:29.567
and one is just defining
new byte code.

00:21:29.567 --> 00:21:31.467
And there are many, many,
many libraries

00:21:31.467 --> 00:21:35.067
that will define new byte code
on the fly.

00:21:35.067 --> 00:21:38.667
So in the end,
what we see is that...

00:21:38.667 --> 00:21:42.200
a flexible sandbox means
that you have high compatibility

00:21:42.200 --> 00:21:44.534
with existing libraries to--
for example,

00:21:44.534 --> 00:21:47.133
dependency injection frameworks
like Guice and Spring...

00:21:47.133 --> 00:21:49.834
these libraries
work under App Engine.

00:21:49.834 --> 00:21:54.200
Aspect-oriented programming
like AspectJ, Spring AOP,

00:21:54.200 --> 00:21:55.801
these libraries work.

00:21:55.801 --> 00:21:58.701
Web frameworks...
Google Web Toolkit, Tapestry,

00:21:58.701 --> 00:22:01.200
BlazeDS,
which is a Flex library,

00:22:01.200 --> 00:22:04.701
and Grails were happy
to just announce that

00:22:04.701 --> 00:22:07.334
that is now working
under App Engine.

00:22:07.334 --> 00:22:09.667
And finally, one of
the really exciting things

00:22:09.667 --> 00:22:11.968
is that we have alternate
JVM languages

00:22:11.968 --> 00:22:13.467
all working on App Engine.

00:22:13.467 --> 00:22:15.868
Scala, Rhino--
the whole list goes on.

00:22:15.868 --> 00:22:17.534
And some of these languages

00:22:17.534 --> 00:22:19.934
compile directly down
to byte code, like Scala.

00:22:19.934 --> 00:22:22.534
Other languages on this list
like JRuby

00:22:22.534 --> 00:22:26.067
generate byte code
on the fly.

00:22:28.334 --> 00:22:30.634
Schwarz: So we've hinted
a number of times in this talk

00:22:30.634 --> 00:22:32.767
that we have a local
development environment

00:22:32.767 --> 00:22:34.734
that allows you to test
your application locally

00:22:34.734 --> 00:22:35.934
on your workstation

00:22:35.934 --> 00:22:38.067
before you deploy it
to Google servers.

00:22:38.067 --> 00:22:39.934
We call this
the DevAppServer.

00:22:39.934 --> 00:22:42.000
It's essentially
a custom version of Jetty

00:22:42.000 --> 00:22:43.834
which tries to emulate
our production environment

00:22:43.834 --> 00:22:45.434
as much as possible.

00:22:45.434 --> 00:22:46.968
And one way it does that

00:22:46.968 --> 00:22:48.367
is by providing
a local implementation

00:22:48.367 --> 00:22:49.901
of each of the software
services.

00:22:49.901 --> 00:22:51.467
So for example,
there's an in-process version

00:22:51.467 --> 00:22:52.934
of memcache.

00:22:52.934 --> 00:22:55.467
There's also a disk-backed
version of the datastore

00:22:55.467 --> 00:22:57.100
which has different
performance characteristics

00:22:57.100 --> 00:22:58.434
to the production server,

00:22:58.434 --> 00:23:00.367
but logically, it provides
the same functionality.

00:23:00.367 --> 00:23:02.834
There's also a version
of the URLFetch service

00:23:02.834 --> 00:23:07.267
which uses Apache HttpClient
to make outgoing HTTP requests.

00:23:07.267 --> 00:23:08.801
It's important to note

00:23:08.801 --> 00:23:12.434
that you're always using
the entire software stack here.

00:23:12.434 --> 00:23:13.901
So even in the DevAppServer,

00:23:13.901 --> 00:23:16.834
when you call a method like
url.openConnection,

00:23:16.834 --> 00:23:19.434
we could simply let
the JVM do its default behavior

00:23:19.434 --> 00:23:20.567
in that case.

00:23:20.567 --> 00:23:21.701
However, that wouldn't provide

00:23:21.701 --> 00:23:23.367
quite the same level
of validation

00:23:23.367 --> 00:23:25.067
and wouldn't set quite
the same headers

00:23:25.067 --> 00:23:26.467
as our production environment.

00:23:26.467 --> 00:23:30.934
So instead, we actually
re-implement url.openConnection

00:23:30.934 --> 00:23:32.868
in terms of
the URLFetch service,

00:23:32.868 --> 00:23:36.434
both in the DevAppServer and
in the production environment,

00:23:36.434 --> 00:23:38.167
so they behave consistently.

00:23:38.167 --> 00:23:39.634
We also try to emulate

00:23:39.634 --> 00:23:41.601
as many of
the security restrictions

00:23:41.601 --> 00:23:44.200
of the production environment
as possible in the DevAppServer.

00:23:44.200 --> 00:23:46.000
There are some restrictions
that are very difficult to do.

00:23:46.000 --> 00:23:48.000
For example, some of the things
Toby just talked about

00:23:48.000 --> 00:23:50.501
with class filtering
or flexible sandboxing

00:23:50.501 --> 00:23:52.601
we don't perfectly emulate
in the DevAppServer.

00:23:52.601 --> 00:23:53.968
But we're constantly
working on that

00:23:53.968 --> 00:23:57.133
and trying to make it more
like our production environment.

00:23:57.133 --> 00:23:59.033
So now you've tested
your application locally,

00:23:59.033 --> 00:24:01.033
and it's time to deploy it
to Google servers.

00:24:01.033 --> 00:24:03.434
There are two places
that your application can live.

00:24:03.434 --> 00:24:06.033
It can either live on a custom
sub-domain of .appspot.com

00:24:06.033 --> 00:24:08.834
or you can run it
on a custom domain

00:24:08.834 --> 00:24:10.834
which you've either
registered through Google

00:24:10.834 --> 00:24:13.267
or another DNS provider,

00:24:13.267 --> 00:24:15.667
and you can point your
IP address at Google servers

00:24:15.667 --> 00:24:19.334
and serve your application
on that custom domain.

00:24:19.334 --> 00:24:22.133
We provide command line
and IDE-based tools

00:24:22.133 --> 00:24:23.467
to deploy your application,

00:24:23.467 --> 00:24:25.467
which consists of uploading
your static files

00:24:25.467 --> 00:24:27.667
and resource files,
as we talked about,

00:24:27.667 --> 00:24:29.434
as well as some other
metadata.

00:24:29.434 --> 00:24:32.667
So, for example,
to efficiently...

00:24:32.667 --> 00:24:35.067
handle your datastore queries
on our servers,

00:24:35.067 --> 00:24:37.601
we need some idea of what sort
of queries you're gonna make,

00:24:37.601 --> 00:24:39.634
and we need to build indexes
based on that information.

00:24:39.634 --> 00:24:40.868
So there's some metadata

00:24:40.868 --> 00:24:42.601
that's uploaded
at deployment time.

00:24:42.601 --> 00:24:44.067
Also cron job descriptors

00:24:44.067 --> 00:24:46.033
and a few other
configuration pieces.

00:24:46.033 --> 00:24:47.367
And after that,

00:24:47.367 --> 00:24:49.367
you're going to want to go
to the Admin Console

00:24:49.367 --> 00:24:51.367
which is a web-based
management console we provide.

00:24:51.367 --> 00:24:53.868
It allows you to see dashboards
of your application

00:24:53.868 --> 00:24:55.934
as well as to view
its log files.

00:24:55.934 --> 00:24:58.868
We have integration with
the java.util.logging package.

00:24:58.868 --> 00:25:00.868
So if you have log statements
in your code

00:25:00.868 --> 00:25:02.334
or in libraries
that you depend on,

00:25:02.334 --> 00:25:05.300
all of your log statements
will automatically be indexed

00:25:05.300 --> 00:25:07.133
and imported
into the Admin Console

00:25:07.133 --> 00:25:10.334
for later viewing
or downloading.

00:25:10.334 --> 00:25:12.567
So now you've deployed
your application.

00:25:12.567 --> 00:25:14.901
It's ready to serve requests
within minutes--

00:25:14.901 --> 00:25:16.334
or seconds, I should say.

00:25:16.334 --> 00:25:21.067
And now it's time to actually
get some users.

00:25:21.067 --> 00:25:24.801
So App Engine is always
free to get started.

00:25:24.801 --> 00:25:26.667
We provide some number
of resources to you

00:25:26.667 --> 00:25:28.334
on a daily basis for free.

00:25:28.334 --> 00:25:31.367
For example,
6.5 core hours of CPU time,

00:25:31.367 --> 00:25:33.767
a gigabyte of both
inbound and outbound bandwidth,

00:25:33.767 --> 00:25:36.567
the ability to store 1 gigabyte
of data in our datastore

00:25:36.567 --> 00:25:38.767
and to send 2,000 emails
a day.

00:25:38.767 --> 00:25:40.734
If you need to go
beyond these limits--

00:25:40.734 --> 00:25:42.734
hopefully your application
will be wildly successful

00:25:42.734 --> 00:25:44.100
and you'll need to--

00:25:44.100 --> 00:25:46.334
you can just purchase
additional resources from us.

00:25:46.334 --> 00:25:47.734
And the way that that works

00:25:47.734 --> 00:25:49.734
is you simply provide a credit
card via Google checkout

00:25:49.734 --> 00:25:51.234
and set a daily budget,

00:25:51.234 --> 00:25:53.334
which you can break down
across these categories.

00:25:53.334 --> 00:25:55.133
And we guarantee
that on any given day

00:25:55.133 --> 00:25:56.801
you'll be charged
only for what you use

00:25:56.801 --> 00:25:59.367
but no more
than your daily budget.

00:25:59.367 --> 00:26:02.601
There's also an additional limit
we should discuss here

00:26:02.601 --> 00:26:04.200
which is that non-billing
applications

00:26:04.200 --> 00:26:06.300
are limited to approximately
100 hits per second,

00:26:06.300 --> 00:26:07.801
and that's actually
a lot of traffic.

00:26:07.801 --> 00:26:09.801
But as soon as you sign up
for billing,

00:26:09.801 --> 00:26:11.000
that jumps to 500 hits
per second.

00:26:11.000 --> 00:26:12.400
And if you need
to go above that,

00:26:12.400 --> 00:26:14.601
we simply ask that you give us
some advance notice

00:26:14.601 --> 00:26:16.601
by filling out a form

00:26:16.601 --> 00:26:18.567
so that we can go above
that level.

00:26:18.567 --> 00:26:22.133
We just need to know
that you expect it.

00:26:25.200 --> 00:26:26.901
Reyelts: So now we're gonna
talk some about tooling.

00:26:26.901 --> 00:26:28.601
What we've just introduced

00:26:28.601 --> 00:26:30.567
in our last release
of App Engine

00:26:30.567 --> 00:26:32.734
is what's called
the SDK Tools API.

00:26:32.734 --> 00:26:34.067
And this is an open API

00:26:34.067 --> 00:26:37.133
that provides support
for command line tools,

00:26:37.133 --> 00:26:40.400
Ant-based tools,
and IDE plugins.

00:26:40.400 --> 00:26:43.801
The kind of features
that we provide in the tools API

00:26:43.801 --> 00:26:45.868
are deployment.

00:26:45.868 --> 00:26:48.133
This means that
there's an API

00:26:48.133 --> 00:26:52.067
to get your app up into
Google's App Servers.

00:26:52.067 --> 00:26:55.667
There's an API for launching
the Development App Server,

00:26:55.667 --> 00:26:57.567
and otherwise controlling it.

00:26:57.567 --> 00:27:00.767
There's an API that provides
the WhiteList for you,

00:27:00.767 --> 00:27:05.267
and this allows things like
IDE plugins

00:27:05.267 --> 00:27:08.067
to provide compile-time
checks across your code.

00:27:08.067 --> 00:27:11.100
So, for example, as
you're developing your new code,

00:27:11.100 --> 00:27:12.601
you're able to see that

00:27:12.601 --> 00:27:15.667
you're using classes that
the sandbox doesn't support.

00:27:15.667 --> 00:27:17.868
And it also provides
XML validation

00:27:17.868 --> 00:27:22.067
for things like your
appengine-web.xml files.

00:27:22.067 --> 00:27:24.968
Google Eclipse Plugin
is a great example of this.

00:27:24.968 --> 00:27:28.400
We have that available
on our download site,

00:27:28.400 --> 00:27:30.267
and if you get the
Google Eclipse Plugin,

00:27:30.267 --> 00:27:33.067
it'll provide almost
all of these features.

00:27:33.067 --> 00:27:34.467
And it's available

00:27:34.467 --> 00:27:38.067
on the download link
with the STK.

00:27:38.067 --> 00:27:40.501
And Intellij just recently
announced

00:27:40.501 --> 00:27:43.367
a plugin that supports
these kinds of features too,

00:27:43.367 --> 00:27:49.100
which is awesome for you guys
who like JetBrains.

00:27:49.100 --> 00:27:51.567
So I guess that brings us
to our demo now,

00:27:51.567 --> 00:27:53.267
and I'm going to have to
take a second

00:27:53.267 --> 00:27:56.400
to bring that up
on the laptop over here.

00:28:00.267 --> 00:28:04.734
Schwarz: Wanna give
the slides first?

00:28:04.734 --> 00:28:06.934
Reyelts: So before we go
through the actual demo,

00:28:06.934 --> 00:28:09.033
we're gonna show a few slides

00:28:09.033 --> 00:28:11.467
and talk about it
just a little bit.

00:28:11.467 --> 00:28:15.267
The whole point of this demo
is that it's a game,

00:28:15.267 --> 00:28:18.734
and it's based on
the Translate APIs that...

00:28:18.734 --> 00:28:20.968
the translate service
that Google provides.

00:28:20.968 --> 00:28:23.868
And if you were to play
this demo,

00:28:23.868 --> 00:28:26.868
the first screen you'd be shown
is this login screen

00:28:26.868 --> 00:28:28.734
where you'd enter your name...

00:28:28.734 --> 00:28:30.467
like, let's say off your badge.

00:28:30.467 --> 00:28:31.467
And, uh...oh.

00:28:31.467 --> 00:28:34.067
I should back up
just a little bit.

00:28:34.067 --> 00:28:35.667
This demo was built,

00:28:35.667 --> 00:28:37.968
and it's powered by
Google App Engine on the back,

00:28:37.968 --> 00:28:40.934
and it's powered by Google
Web ToolKit on the front end.

00:28:40.934 --> 00:28:43.667
And this is something that Don
and I just threw together

00:28:43.667 --> 00:28:47.968
in like a couple days
just really quickly.

00:28:47.968 --> 00:28:50.601
The second screen
you'd be presented with

00:28:50.601 --> 00:28:52.734
is a screen
with a set of questions.

00:28:52.734 --> 00:28:57.200
The top part of the screen
has an English phrase,

00:28:57.200 --> 00:28:59.100
in this case,
"more than one way."

00:28:59.100 --> 00:29:00.534
And underneath it,

00:29:00.534 --> 00:29:02.033
it has several different
possible translations

00:29:02.033 --> 00:29:04.367
for that phrase
in different languages.

00:29:04.367 --> 00:29:07.100
And your job
playing this game would be

00:29:07.100 --> 00:29:09.000
to determine
which of these phrases

00:29:09.000 --> 00:29:13.400
is actually
the correct phrase.

00:29:13.400 --> 00:29:17.167
And then after you make
an attempt at guessing,

00:29:17.167 --> 00:29:19.834
it either tells you, you know,
hey, you got that right,

00:29:19.834 --> 00:29:24.267
or, in this case,
no such luck.

00:29:24.267 --> 00:29:28.901
While users are doing that
on their own local machines,

00:29:28.901 --> 00:29:31.834
you can also have a scoreboard
up and running

00:29:31.834 --> 00:29:34.300
which displays the total amount
of time running in the game--

00:29:34.300 --> 00:29:36.267
it is a timed game--

00:29:36.267 --> 00:29:39.701
and gives a list
of the top leaders

00:29:39.701 --> 00:29:41.968
and their points.

00:29:41.968 --> 00:29:43.968
And the way the points
are determined

00:29:43.968 --> 00:29:46.100
is both in terms
of correct answers

00:29:46.100 --> 00:29:49.000
and how quickly
those answers are corrected.

00:29:49.000 --> 00:29:51.033
We're actually gonna
have you guys

00:29:51.033 --> 00:29:55.434
help us test out
our demo live here.

00:29:55.434 --> 00:29:57.767
But before we do that,

00:29:57.767 --> 00:29:59.400
we're now going
to come over here

00:29:59.400 --> 00:30:03.133
and talk just a little bit
about the code for the demo.

00:30:09.400 --> 00:30:11.434
So like I said before,
this is based

00:30:11.434 --> 00:30:14.000
both on App Engine
and GWT.

00:30:14.000 --> 00:30:16.400
And if you're familiar
with GWT,

00:30:16.400 --> 00:30:18.400
the way it works
is that...

00:30:18.400 --> 00:30:20.601
if you wanna talk
to a backend server,

00:30:20.601 --> 00:30:22.200
one of the common ways
of doing that

00:30:22.200 --> 00:30:23.501
is using GWT RPC,

00:30:23.501 --> 00:30:26.601
which is what we took
advantage of in the game.

00:30:26.601 --> 00:30:29.200
We have two services,
one called the TranslateService

00:30:29.200 --> 00:30:31.000
and another called
the AdminService,

00:30:31.000 --> 00:30:34.734
And the translate service
is used for

00:30:34.734 --> 00:30:38.601
the user side of the app where
people are playing the game.

00:30:38.601 --> 00:30:41.934
So if we walk
through that some

00:30:41.934 --> 00:30:44.200
and see some of the API,

00:30:44.200 --> 00:30:46.801
or some of the function calls
we make available in this API,

00:30:46.801 --> 00:30:48.601
there are things like
a login,

00:30:48.601 --> 00:30:50.601
being able to see
if you're logged in,

00:30:50.601 --> 00:30:57.400
retrieving information
about the current game...

00:30:57.400 --> 00:30:59.801
the set of questions
that you would answer--

00:30:59.801 --> 00:31:03.067
things along those lines.

00:31:03.067 --> 00:31:08.000
And for the admin service,
for that scoreboard...

00:31:12.267 --> 00:31:13.467
You're able to, again,

00:31:13.467 --> 00:31:15.067
get information
about the current game,

00:31:15.067 --> 00:31:16.667
you're able to start
a new game,

00:31:16.667 --> 00:31:19.067
and you're also able
to finish the game.

00:31:19.067 --> 00:31:21.467
So those are the interfaces
for the services.

00:31:21.467 --> 00:31:23.667
And if we go and look
at the server side

00:31:23.667 --> 00:31:25.267
of the application,

00:31:25.267 --> 00:31:27.067
we see that those
are implemented

00:31:27.067 --> 00:31:29.467
both in
two different services.

00:31:29.467 --> 00:31:32.667
One is TranslateService.impl
and AdminService.impl.

00:31:32.667 --> 00:31:35.267
And these are servlets
themselves.

00:31:35.267 --> 00:31:38.901
So if we take a look through
TranslateService.impl,

00:31:38.901 --> 00:31:41.868
we see that extends GWT's
remoteserviceservlet,

00:31:41.868 --> 00:31:44.067
and it implements that
TranslateService interface

00:31:44.067 --> 00:31:48.868
we just went through
and...

00:31:48.868 --> 00:31:52.467
we see that there are bunch of
implementations of those APIs,

00:31:52.467 --> 00:31:55.067
like the Login API
and the isLoggedIn

00:31:55.067 --> 00:31:58.067
and getCurrentGame
and so on.

00:31:58.067 --> 00:32:01.934
And if we look a little closer
at these APIs,

00:32:01.934 --> 00:32:03.934
for example, getQuestions,

00:32:03.934 --> 00:32:06.534
we can see that
they use these store objects,

00:32:06.534 --> 00:32:08.567
like GameStore.

00:32:08.567 --> 00:32:13.934
And if we go look
at GameStore...

00:32:13.934 --> 00:32:16.934
we can see the purpose
of these store-based classes

00:32:16.934 --> 00:32:19.334
is to wrap up the JDO logic.

00:32:19.334 --> 00:32:21.934
So we're using the backend
datastore here

00:32:21.934 --> 00:32:24.968
to store the questions
and so on.

00:32:30.934 --> 00:32:33.734
I think that brings us
to the GWT client side of this

00:32:33.734 --> 00:32:35.734
which Don is gonna talk about.

00:32:35.734 --> 00:32:37.234
Schwarz: Um, sure.

00:32:37.234 --> 00:32:38.534
So the...if you look at

00:32:38.534 --> 00:32:40.934
the client part
of our infrastructure,

00:32:40.934 --> 00:32:42.534
there's basically
two GWT modules.

00:32:42.534 --> 00:32:44.334
One is the user view,

00:32:44.334 --> 00:32:45.934
which is what
you're going to be seeing

00:32:45.934 --> 00:32:47.133
when you play the game,

00:32:47.133 --> 00:32:50.534
and the other
is an admin module,

00:32:50.534 --> 00:32:52.000
which is what the scoreboard

00:32:52.000 --> 00:32:53.467
that we're gonna have
up on the screen,

00:32:53.467 --> 00:32:55.734
showing high scores
throughout the game,

00:32:55.734 --> 00:32:57.334
that's how that's implemented.

00:32:57.334 --> 00:32:59.133
So let's talk more about
the user view.

00:32:59.133 --> 00:33:00.534
We used a simple

00:33:00.534 --> 00:33:03.400
model view presenter type
implementation here

00:33:03.400 --> 00:33:05.200
where we have
a presenter class

00:33:05.200 --> 00:33:07.601
that contains all of our
actual control logic.

00:33:07.601 --> 00:33:09.868
so each state change in the game

00:33:09.868 --> 00:33:11.801
is represented here
as a method,

00:33:11.801 --> 00:33:14.601
and it does things
like switch the current screen

00:33:14.601 --> 00:33:16.601
and it fills out data.

00:33:16.601 --> 00:33:19.000
And it does those using
view objects.

00:33:19.000 --> 00:33:21.000
So each one of
the different screens

00:33:21.000 --> 00:33:23.000
is presented as a view here.

00:33:23.000 --> 00:33:26.601
And there's a GWT widget which
actually implements that view

00:33:26.601 --> 00:33:28.601
and provides
all the display logic.

00:33:28.601 --> 00:33:31.000
And then that brings us
to the model part

00:33:31.000 --> 00:33:35.200
of the model view presenter...
paradigm

00:33:35.200 --> 00:33:36.601
which is our model objects
up here.

00:33:36.601 --> 00:33:38.801
And these model objects
are shared

00:33:38.801 --> 00:33:42.000
not only inside of the client
to store data,

00:33:42.000 --> 00:33:45.000
but they're also used
within the GWT RPC

00:33:45.000 --> 00:33:49.801
as the transmit data between
the client and the server.

00:33:49.801 --> 00:33:53.033
Reyelts: I guess that brings us
to the actual demo.

00:33:53.033 --> 00:33:57.033
I hope--let's switch
machines here for a moment.

00:33:57.033 --> 00:33:59.968
What we have here is a URL

00:33:59.968 --> 00:34:01.968
that everybody can hit,
hopefully,

00:34:01.968 --> 00:34:03.300
if you brought your laptops,

00:34:03.300 --> 00:34:05.767
or even your mobile phones
hopefully should work.

00:34:05.767 --> 00:34:08.634
If you hit
java-demo.appspot.com,

00:34:08.634 --> 00:34:10.567
that should bring up
the application

00:34:10.567 --> 00:34:12.133
we were just talking about.

00:34:12.133 --> 00:34:14.968
We're gonna give you all
like 60 seconds or whatever

00:34:14.968 --> 00:34:16.834
to pull it up.

00:34:16.834 --> 00:34:18.834
Schwarz: And please log in
with your full name

00:34:18.834 --> 00:34:23.067
as it's on your badge so we
can verify later the winners.

00:34:53.267 --> 00:34:54.868
Schwarz: We can probably
get started.

00:34:54.868 --> 00:34:58.667
People can always jump in
after we start.

00:34:58.667 --> 00:35:00.267
Reyelts: All right,
so what we're gonna do

00:35:00.267 --> 00:35:03.000
is we're gonna pull up
the scoreboard...

00:35:03.000 --> 00:35:05.567
and we're gonna get
a game started.

00:35:05.567 --> 00:35:08.300
When I click new game here,
what it's actually going--

00:35:08.300 --> 00:35:10.834
it's going live to Google's
backend servers

00:35:10.834 --> 00:35:13.601
and getting translations
for a bunch of English phrases

00:35:13.601 --> 00:35:15.434
that we saw before.

00:35:15.434 --> 00:35:17.300
So there we go.

00:35:17.300 --> 00:35:20.467
So the game's just started
and you guys have...

00:35:20.467 --> 00:35:24.100
4 minutes and 45 seconds
to finish.

00:35:26.934 --> 00:35:29.267
Wow. That was quick.

00:35:32.534 --> 00:35:35.534
Some people must
really know their Japanese.

00:35:35.534 --> 00:35:36.868
[Schwarz laughs]

00:35:45.534 --> 00:35:47.334
Reyelts: So you can see
in real-time

00:35:47.334 --> 00:35:48.734
that what's happening here

00:35:48.734 --> 00:35:51.334
is we're actually reading
from the datastore,

00:35:51.334 --> 00:35:52.834
pulling these scores,

00:35:52.834 --> 00:35:57.734
and we're actually limiting
the number of top scores.

00:35:57.734 --> 00:36:01.601
Otherwise, we'd have a list
of 400 scores in the browser,

00:36:01.601 --> 00:36:04.000
and those might be
hard to see.

00:36:04.000 --> 00:36:08.033
And the GWT App is running
an active timer here too.

00:36:08.033 --> 00:36:11.000
So the scores are being updated

00:36:11.000 --> 00:36:14.534
once every ten seconds
or so.

00:36:24.000 --> 00:36:26.033
I guess I should have
also mentioned--

00:36:26.033 --> 00:36:27.167
or I may have already--

00:36:27.167 --> 00:36:29.801
the quicker you answer
a question,

00:36:29.801 --> 00:36:33.400
the more points
you're given for that question.

00:36:33.400 --> 00:36:36.400
And so the server's actually
synchronized with the client.

00:36:36.400 --> 00:36:38.367
The server determines
how many points

00:36:38.367 --> 00:36:41.000
are assigned for a question.

00:36:48.801 --> 00:36:50.400
Schwarz: [whispering]
Top three.

00:36:50.400 --> 00:36:53.334
Reyelts: [whispering] What?
Schwarz: Top three.

00:37:20.267 --> 00:37:21.868
Schwarz: We should
probably mention

00:37:21.868 --> 00:37:23.868
that this demo's also using
HTTP sessions

00:37:23.868 --> 00:37:25.200
to track, for example,

00:37:25.200 --> 00:37:27.667
whether you've already
answered a question or not

00:37:27.667 --> 00:37:29.467
and things like that.

00:37:29.467 --> 00:37:31.667
And it's also using
a little bit of memcache to--

00:37:31.667 --> 00:37:33.300
there's some polling going on

00:37:33.300 --> 00:37:34.667
to figure out if the game
is done.

00:37:34.667 --> 00:37:38.033
We're using memcache
to make that more efficient.

00:37:38.033 --> 00:37:40.467
Reyelts: And in fact,
we have an implementation

00:37:40.467 --> 00:37:44.467
of ApiProxy--
the profiling ApiProxy running,

00:37:44.467 --> 00:37:47.868
which helped us determine
how much time we were spending

00:37:47.868 --> 00:37:49.868
like in memcache
or the datastore calls

00:37:49.868 --> 00:37:52.801
so we could optimize
as appropriate.

00:37:57.367 --> 00:37:59.467
Schwarz: Should we pull up
the Admin?

00:37:59.467 --> 00:38:01.868
Reyelts: If you want.

00:38:05.167 --> 00:38:07.133
Schwarz:
I can get the log in here.

00:38:07.133 --> 00:38:08.767
Reyelts: So what Don's
doing here

00:38:08.767 --> 00:38:11.467
is he's pulling up
the Admin Console

00:38:11.467 --> 00:38:12.868
for our application.

00:38:12.868 --> 00:38:15.133
So earlier, at close to
the beginning of the talk,

00:38:15.133 --> 00:38:16.934
I talked about
the Admin Console.

00:38:16.934 --> 00:38:19.734
And it lists your applications,
and John just picks--

00:38:19.734 --> 00:38:22.601
John. Don just picked the demo.

00:38:22.601 --> 00:38:24.767
And, uh...so we can kind of
see a graph

00:38:24.767 --> 00:38:27.367
of all the requests
we're seeing live

00:38:27.367 --> 00:38:29.334
as we're running.

00:38:29.334 --> 00:38:30.667
And you can kind of see that

00:38:30.667 --> 00:38:32.734
like before, we were getting
very little traffic

00:38:32.734 --> 00:38:36.033
because nobody was using
our app except for Don and I.

00:38:36.033 --> 00:38:39.434
And now we're getting a much
higher amount of traffic.

00:38:39.434 --> 00:38:40.734
Schwarz: And if you go

00:38:40.734 --> 00:38:42.133
and look at the log files
for our application,

00:38:42.133 --> 00:38:45.634
we should actually
be able to see...

00:38:45.634 --> 00:38:46.934
those ApiProxy logging
statements

00:38:46.934 --> 00:38:48.734
that Toby was talking about.

00:38:48.734 --> 00:38:52.133
Just a few errors.
Those were earlier.

00:38:52.133 --> 00:38:55.534
They're in info?
Reyelts: Yeah. They're warning.

00:38:55.534 --> 00:38:58.734
Schwarz: So let's just
pick an arbitrary request here.

00:38:58.734 --> 00:39:01.801
So you get some standard
information about the request

00:39:01.801 --> 00:39:04.200
such as the incoming
IP address, etcetera.

00:39:04.200 --> 00:39:06.601
And then these are
the individual API calls,

00:39:06.601 --> 00:39:10.400
the login calls which are made
for each API service call.

00:39:10.400 --> 00:39:13.734
So you can see approximately
how long each call took.

00:39:16.167 --> 00:39:18.734
Let's go back to the scoreboard.

00:39:36.133 --> 00:39:37.601
Reyelts: I was gonna say

00:39:37.601 --> 00:39:39.400
it looks like
most people are finished.

00:39:39.400 --> 00:39:40.801
Schwarz: I was gonna
ask that, yeah.

00:39:40.801 --> 00:39:42.400
Reyelts: I think we can
cut if off now.

00:39:42.400 --> 00:39:45.601
So, uh...so we'll just
do this...

00:39:45.601 --> 00:39:48.200
which finishes the game now.

00:39:48.200 --> 00:39:50.834
And we can see that
our top winners were

00:39:50.834 --> 00:39:53.200
Joe, Dave, and Felicia.

00:39:53.200 --> 00:39:55.000
If you guys wanna come up,

00:39:55.000 --> 00:39:59.400
we actually have some T-shirts
for the top three winners.

00:39:59.400 --> 00:40:05.734
[applause]

00:40:11.000 --> 00:40:13.000
Schwarz: What size would you--
This is extra-large.

00:40:13.000 --> 00:40:15.667
That's small.
Felicia: Okay.

00:40:22.400 --> 00:40:25.000
Schwarz: So...yeah.
man: Thanks.

00:40:25.000 --> 00:40:26.000
Reyelts: Congratulation, guys.

00:40:26.000 --> 00:40:30.934
[applause]

00:40:33.801 --> 00:40:35.534
Schwarz: Okay,
and we'll just end

00:40:35.534 --> 00:40:37.200
by plugging a few features

00:40:37.200 --> 00:40:39.467
that are upcoming
in App Engine.

00:40:39.467 --> 00:40:41.434
Some of these features
actually have talks about them

00:40:41.434 --> 00:40:42.734
at Google I/O,

00:40:42.734 --> 00:40:44.467
so you definitely
want to check that out.

00:40:44.467 --> 00:40:46.033
The first one
is task queues.

00:40:46.033 --> 00:40:48.634
This is basically a way
to defer some work

00:40:48.634 --> 00:40:50.934
that you want to do
during a request

00:40:50.934 --> 00:40:52.467
to a future request.

00:40:52.467 --> 00:40:55.000
So, for example,
if you run a social network

00:40:55.000 --> 00:40:57.367
and someone chooses
to delete their profile,

00:40:57.367 --> 00:40:59.501
there may be some expensive
cleanup that you need to do

00:40:59.501 --> 00:41:01.000
to recover from that.

00:41:01.000 --> 00:41:02.968
So with a task queue,
you can basically persist a task

00:41:02.968 --> 00:41:04.934
and then return immediately
to the user

00:41:04.934 --> 00:41:06.968
and then asynchronously
clean up all their data

00:41:06.968 --> 00:41:08.334
and remove them
from social graphs,

00:41:08.334 --> 00:41:10.701
perform other
responsive computations.

00:41:10.701 --> 00:41:12.968
A full text search
is something that, being Google,

00:41:12.968 --> 00:41:14.400
we're very interested in.

00:41:14.400 --> 00:41:16.267
We'd also like to provide
incoming e-mail,

00:41:16.267 --> 00:41:17.868
so you would essentially
get a callback

00:41:17.868 --> 00:41:21.200
every time an e-mail
comes into your application...

00:41:21.200 --> 00:41:24.467
as well as both inbound
and outbound XMPP support.

00:41:24.467 --> 00:41:27.400
This will allow you to write
custom IM clients.

00:41:27.400 --> 00:41:30.033
They're bots, basically.

00:41:30.033 --> 00:41:32.000
Request and responses
are limited

00:41:32.000 --> 00:41:33.501
to 10 megabytes right now,

00:41:33.501 --> 00:41:35.801
but we'd like to support
large file storage

00:41:35.801 --> 00:41:38.567
which basically lets users
stream larger files in

00:41:38.567 --> 00:41:41.734
and for you to serve those files
back to users dynamically.

00:41:41.734 --> 00:41:42.934
And then finally,

00:41:42.934 --> 00:41:45.567
we know that datastore
import and export tools

00:41:45.567 --> 00:41:47.267
are very important,

00:41:47.267 --> 00:41:49.601
so we're constantly working
on improving those.

00:41:52.133 --> 00:41:54.467
Reyelts: So what we'd like
to do at this point in time

00:41:54.467 --> 00:41:56.434
is take questions from people.

00:41:56.434 --> 00:41:59.434
If you have a question to ask,

00:41:59.434 --> 00:42:02.334
we have microphones over here
and over here,

00:42:02.334 --> 00:42:03.767
and that's important for us

00:42:03.767 --> 00:42:07.300
so that we can record
the questions...

00:42:07.300 --> 00:42:10.634
for you too.

00:42:10.634 --> 00:42:13.634
Feel free to raise your hands.

00:42:13.634 --> 00:42:15.367
man: Me?
Reyelts: Right there.

00:42:15.367 --> 00:42:16.801
man: Does it work? Yes.

00:42:16.801 --> 00:42:21.567
What would be the best place
to start services?

00:42:21.567 --> 00:42:26.734
Something
that I have to start...when...

00:42:26.734 --> 00:42:31.934
servlets...where servlets
take calls too.

00:42:31.934 --> 00:42:34.133
Maybe little bit hard
to understand.

00:42:34.133 --> 00:42:36.133
Let me phrase it
a little bit different.

00:42:36.133 --> 00:42:39.734
So I have software calls
and they have calls

00:42:39.734 --> 00:42:41.934
to other parts of my software

00:42:41.934 --> 00:42:44.734
that need to be start up
in advance.

00:42:44.734 --> 00:42:46.968
So where do I do that?

00:42:46.968 --> 00:42:48.934
Best...
Reyelts: So...

00:42:48.934 --> 00:42:52.234
so one thing you can do
is you can have work done

00:42:52.234 --> 00:42:55.334
upon initialization
for a servlet.

00:42:55.334 --> 00:43:00.501
Like the standard...
an ID on startup in a web.xml

00:43:00.501 --> 00:43:02.100
will have code--
man: So that works.

00:43:02.100 --> 00:43:03.868
Reyelts: Yeah, that will
work correctly.

00:43:03.868 --> 00:43:05.801
And that doesn't mean
you can have

00:43:05.801 --> 00:43:07.200
background running tasks,

00:43:07.200 --> 00:43:08.801
but it does mean
that you can ensure

00:43:08.801 --> 00:43:11.534
that code will run immediately.

00:43:11.534 --> 00:43:13.801
And you can also use,
like Don mentioned,

00:43:13.801 --> 00:43:17.400
you can use cron jobs to
continuously have work going on,

00:43:17.400 --> 00:43:18.801
so you can schedule those

00:43:18.801 --> 00:43:21.334
for like fairly
short periods of time.

00:43:21.334 --> 00:43:24.133
And that can continuously
be running

00:43:24.133 --> 00:43:27.300
like a background process too,
if that helps.

00:43:27.300 --> 00:43:28.834
man: And if it takes
pretty long,

00:43:28.834 --> 00:43:33.734
if it takes like 10, 20 seconds
to initialize certain services,

00:43:33.734 --> 00:43:39.367
so every time a new server
comes into play...

00:43:39.367 --> 00:43:42.200
there might be delay
of 10 or 20 seconds.

00:43:42.200 --> 00:43:44.133
Is that correct?

00:43:44.133 --> 00:43:45.734
Schwarz: This is a case
where task queues

00:43:45.734 --> 00:43:47.100
may be very beneficial
to you.

00:43:47.100 --> 00:43:49.434
So if you can do these
things asynchronously,

00:43:49.434 --> 00:43:52.000
you could, for example, persist
something in the task queue

00:43:52.000 --> 00:43:53.434
and then have something

00:43:53.434 --> 00:43:55.000
constantly pulling
in the background

00:43:55.000 --> 00:43:56.400
to pull things off
of the task queue

00:43:56.400 --> 00:43:59.000
and implement the requests
in process.

00:43:59.000 --> 00:44:01.601
I don't know if that directly
will solve your problem,

00:44:01.601 --> 00:44:04.467
but that's sort of the direction
that we're going in.

00:44:04.467 --> 00:44:06.667
man: Thanks.
Reyelts: Thank you.

00:44:06.667 --> 00:44:09.868
We'll take one
from over here.

00:44:09.868 --> 00:44:13.033
man: So I've been using
the early release of this

00:44:13.033 --> 00:44:15.267
for a while now,
and one thing I've noticed

00:44:15.267 --> 00:44:19.501
is it's really centric towards
using JDO as a datastore.

00:44:19.501 --> 00:44:21.467
And I've typically
always used JPA,

00:44:21.467 --> 00:44:22.868
at least recently.

00:44:22.868 --> 00:44:26.868
Is there any plan to enhance
the capability of JPA,

00:44:26.868 --> 00:44:28.467
or even best-case scenario,

00:44:28.467 --> 00:44:30.467
adding some sort of
relational data model

00:44:30.467 --> 00:44:33.067
to the datastore?

00:44:33.067 --> 00:44:36.734
Reyelts: So JPA support
is definitely gonna be improved.

00:44:36.734 --> 00:44:41.067
We wanted to get App Engine
support out as soon as possible,

00:44:41.067 --> 00:44:44.000
and so JPA
is lagging a little bit.

00:44:44.000 --> 00:44:46.267
But since it's through
the same middleware,

00:44:46.267 --> 00:44:48.000
it's through DataNucleus,

00:44:48.000 --> 00:44:49.868
in general,
most of that is done,

00:44:49.868 --> 00:44:51.634
and we just...

00:44:51.634 --> 00:44:54.300
and it ought to be
catching up shortly.

00:44:54.300 --> 00:44:56.467
As far as the relational
support goes,

00:44:56.467 --> 00:44:57.734
what we really want to do

00:44:57.734 --> 00:45:00.701
is we want to help users
write apps

00:45:00.701 --> 00:45:04.000
that will really perform
well on top of App Engine.

00:45:04.000 --> 00:45:09.067
And unfortunately...
like the SQL you would use

00:45:09.067 --> 00:45:10.534
in a lot of relational-style
stuff

00:45:10.534 --> 00:45:13.067
does a lot of things
like joins

00:45:13.067 --> 00:45:17.167
and stuff that you could do
on top of...

00:45:17.167 --> 00:45:20.367
on top of our datastore,
but won't perform very well.

00:45:20.367 --> 00:45:23.000
On the other hand, there are
people that are working

00:45:23.000 --> 00:45:25.534
in the community,
on their own,

00:45:25.534 --> 00:45:28.667
in order to support
relational, you know,

00:45:28.667 --> 00:45:30.667
SQL-style programming.

00:45:30.667 --> 00:45:33.067
In fact, I think like
the author of H2

00:45:33.067 --> 00:45:34.901
is working
on something like that.

00:45:34.901 --> 00:45:36.133
So you may see something
soon from them.

00:45:36.133 --> 00:45:38.501
man: Great. Thank you.

00:45:38.501 --> 00:45:40.133
man #2: I'm curious
how long it takes

00:45:40.133 --> 00:45:42.000
to spin up a new JVM

00:45:42.000 --> 00:45:44.334
when you need more JVMs
to handle requests,

00:45:44.334 --> 00:45:49.734
and does that cause
a big hit to response time?

00:45:49.734 --> 00:45:51.234
Schwarz: I would say
that it does cause

00:45:51.234 --> 00:45:53.501
a noticeable hit to
response time at the moment.

00:45:53.501 --> 00:45:56.067
We have some optimizations
in the pipeline

00:45:56.067 --> 00:45:57.567
that would help improve that.

00:45:57.567 --> 00:45:59.000
But I wouldn't say
it's something

00:45:59.000 --> 00:46:00.534
that's a problem right now.

00:46:00.534 --> 00:46:02.167
It's on the order of--

00:46:02.167 --> 00:46:03.467
depending on how much
code you have

00:46:03.467 --> 00:46:06.501
that actually needs
to be loaded and everything--

00:46:06.501 --> 00:46:08.801
it's on the order of
anywhere between

00:46:08.801 --> 00:46:12.067
several hundred milliseconds
to a second or two.

00:46:12.067 --> 00:46:14.267
If you have a very,
very large library,

00:46:14.267 --> 00:46:16.133
some of them are very
expensive to start up,

00:46:16.133 --> 00:46:18.033
and it may be longer than that.

00:46:18.033 --> 00:46:19.667
Reyelts: Yeah, so to talk
a little bit more

00:46:19.667 --> 00:46:21.000
to what Don said,

00:46:21.000 --> 00:46:23.801
there's time that it takes
to spin up a JVM,

00:46:23.801 --> 00:46:25.567
and then there's time
that it takes

00:46:25.567 --> 00:46:27.734
to actually initialize
your application.

00:46:27.734 --> 00:46:29.567
So there's like
a decent amount of that

00:46:29.567 --> 00:46:31.200
that's actually
under your control.

00:46:31.200 --> 00:46:32.868
Like if you can delay a bit--

00:46:32.868 --> 00:46:34.567
instead of like initializing

00:46:34.567 --> 00:46:37.200
every part of your application
possible...

00:46:37.200 --> 00:46:39.000
like let's say
on a servlet load,

00:46:39.000 --> 00:46:41.200
if you can delay
parts of that application,

00:46:41.200 --> 00:46:44.868
then the, you know, your
application will respond faster

00:46:44.868 --> 00:46:47.968
on a new JVM
that has just been brought up.

00:46:47.968 --> 00:46:49.100
But, yes, we're working on

00:46:49.100 --> 00:46:51.100
faster initialization
of your code

00:46:51.100 --> 00:46:56.467
and faster initialization
on the JVMs too as they spin up.

00:46:58.701 --> 00:47:00.434
man: So how do the Python
and Java Engines

00:47:00.434 --> 00:47:03.667
compare in performance
on their every load?

00:47:03.667 --> 00:47:05.167
Schwarz:
That's a good question.

00:47:05.167 --> 00:47:07.267
To be honest, we haven't
really done much profiling.

00:47:07.267 --> 00:47:09.701
I'm seeing some
pathological cases

00:47:09.701 --> 00:47:13.234
where Java performs
much, much better.

00:47:13.234 --> 00:47:18.400
However, I would say overall,
the difference seems to be,

00:47:18.400 --> 00:47:20.567
you know, what you would
expect intuitively

00:47:20.567 --> 00:47:22.467
from Python versus Java.

00:47:22.467 --> 00:47:25.834
I wouldn't say that
it's across the board...

00:47:25.834 --> 00:47:27.734
many times faster
or anything to that extent.

00:47:27.734 --> 00:47:29.167
There are just some cases

00:47:29.167 --> 00:47:31.868
that Java does an extremely
good job of optimizing.

00:47:31.868 --> 00:47:33.901
Reyelts: Yeah, and I would
say, in general,

00:47:33.901 --> 00:47:35.501
for performance
on an App Engine,

00:47:35.501 --> 00:47:37.067
you could expect to see
your Java code

00:47:37.067 --> 00:47:40.267
run on roughly
the same order of magnitude,

00:47:40.267 --> 00:47:42.968
the same expense as it would
off of App Engine.

00:47:42.968 --> 00:47:44.501
So for example,

00:47:44.501 --> 00:47:47.067
if you looked at Java versus
Python benchmarks, you know,

00:47:47.067 --> 00:47:48.534
off of App Engine,

00:47:48.534 --> 00:47:50.868
you should see about the same
relative performance

00:47:50.868 --> 00:47:52.267
on App Engine.

00:47:52.267 --> 00:47:54.133
Schwarz: We should probably
also say that Java Applications

00:47:54.133 --> 00:47:55.601
tend to use a lot more code.

00:47:55.601 --> 00:47:57.868
So there's a lot more
to actually...

00:47:57.868 --> 00:47:59.834
there's a lot more
infrastructure involved,

00:47:59.834 --> 00:48:01.300
whereas Python Applications
tend to be,

00:48:01.300 --> 00:48:02.934
at least the ones written
with App Engine in mind,

00:48:02.934 --> 00:48:04.267
tend to be much more
streamlined,

00:48:04.267 --> 00:48:07.467
so that comes into it as well.

00:48:09.734 --> 00:48:13.901
man: The demo you showed
used an HTML Application

00:48:13.901 --> 00:48:16.267
as most App Engines demos are.

00:48:16.267 --> 00:48:18.634
Does App Engine,
the Java App Engine

00:48:18.634 --> 00:48:20.734
support anything like a remote
procedure call or anything

00:48:20.734 --> 00:48:22.901
from outside Java land,

00:48:22.901 --> 00:48:25.467
for example,
from an Android phone?

00:48:25.467 --> 00:48:26.968
Reyelts: For example
for Android?

00:48:26.968 --> 00:48:28.868
man: From a phone or some
other application

00:48:28.868 --> 00:48:30.467
not sitting on your server?

00:48:30.467 --> 00:48:32.601
Reyelts: Well, it accepts
HTTP requests,

00:48:32.601 --> 00:48:34.601
so if you can formulate
whatever you're doing

00:48:34.601 --> 00:48:37.200
in the term of an HTTP request,
like--

00:48:37.200 --> 00:48:40.367
So for example,
you said we built an HTML App.

00:48:40.367 --> 00:48:43.033
Yes. Yes, technically,
that's what it is,

00:48:43.033 --> 00:48:44.567
but there's like GWT RPC,
right?

00:48:44.567 --> 00:48:48.133
And GWT RPC
actually is interesting

00:48:48.133 --> 00:48:49.734
because it's actually

00:48:49.734 --> 00:48:52.734
a bi-mode kind of version
of communication.

00:48:52.734 --> 00:48:56.567
It's, um...I forgot
the term we use exactly.

00:48:56.567 --> 00:48:58.734
Asymmetric, I think.

00:48:58.734 --> 00:49:01.067
And so, yeah,
like for example,

00:49:01.067 --> 00:49:03.567
you could send serialized
Java objects, right,

00:49:03.567 --> 00:49:05.734
over an HTTP request,

00:49:05.734 --> 00:49:08.367
and that would work perfectly
fine under App Engine.

00:49:08.367 --> 00:49:11.200
man: But it's all limited
to HTTP requests,

00:49:11.200 --> 00:49:12.601
is that correct?

00:49:12.601 --> 00:49:14.734
Reyelts: Right now. Yes.
man: Okay, thanks.

00:49:16.801 --> 00:49:20.200
man: So my app needs
long-polling

00:49:20.200 --> 00:49:22.000
Comet-like support.

00:49:22.000 --> 00:49:24.601
Do you have any ideas
how I could do it?

00:49:24.601 --> 00:49:27.067
Or if it's coming soon?

00:49:27.067 --> 00:49:29.901
Schwarz: Um...do you want to...

00:49:29.901 --> 00:49:31.300
This is Kevin Gibbs.

00:49:31.300 --> 00:49:33.400
He's the Tech Lead
for App Engine, so...

00:49:33.400 --> 00:49:34.801
Gibbs: That's all right.

00:49:34.801 --> 00:49:37.601
Yeah, I know, we do hear
from time to time--

00:49:37.601 --> 00:49:38.868
Probably
can people can hear me.

00:49:38.868 --> 00:49:40.200
We do hear from time to time,

00:49:40.200 --> 00:49:42.200
you know, people are
interested in Comet support...

00:49:42.200 --> 00:49:44.267
[microphone background noise]

00:49:44.267 --> 00:49:47.434
Right now, responses in
App Engine are not streaming...

00:49:47.434 --> 00:49:49.400
man: Can you use
a microphone, please?

00:49:49.400 --> 00:49:51.400
Schwarz: Sorry.
Gibbs: Does anyone...have one?

00:49:51.400 --> 00:49:53.033
Schwarz: Here you go.
Gibbs: Oh, that's all right.

00:49:53.033 --> 00:49:56.801
Schwarz: Oh. Got it? Okay.

00:49:56.801 --> 00:50:00.000
Gibbs: Um...you know,
certainly, from time to time,

00:50:00.000 --> 00:50:01.801
we do hear requests
from people,

00:50:01.801 --> 00:50:03.801
they would like Comet support,
and Comet's great.

00:50:03.801 --> 00:50:05.200
It's something
that's really exciting,

00:50:05.200 --> 00:50:08.000
and I would love to see it added
to App Engine at some point.

00:50:08.000 --> 00:50:11.133
You know, right now,
I think the...

00:50:11.133 --> 00:50:13.400
the number of applications
that have Comet built into them

00:50:13.400 --> 00:50:16.601
overall as a percentage
of applications is somewhat low,

00:50:16.601 --> 00:50:19.000
and given that we have
finite resources for the team,

00:50:19.000 --> 00:50:21.033
we're trying to tackle the tasks

00:50:21.033 --> 00:50:23.601
that will help the most people
the most quickly.

00:50:23.601 --> 00:50:26.667
So we are certainly interested
in providing it at some point.

00:50:26.667 --> 00:50:28.400
It's not on the roadmap
right now,

00:50:28.400 --> 00:50:30.000
but it's something
that we're looking into.

00:50:30.000 --> 00:50:32.000
And I think that we do hope
at some point

00:50:32.000 --> 00:50:34.200
for there to be some interesting
ways to accomplish this.

00:50:34.200 --> 00:50:37.601
For instance, XMPP Support
is on our roadmap,

00:50:37.601 --> 00:50:39.400
which you guys
might have seen.

00:50:39.400 --> 00:50:41.801
And that will provide a way
of doing instant messages.

00:50:41.801 --> 00:50:44.000
There may become a way for you
to use that with a browser

00:50:44.000 --> 00:50:45.501
to do sort of more
push and pull.

00:50:45.501 --> 00:50:48.200
But for straight-up Comet,
that isn't planned at this time

00:50:48.200 --> 00:50:50.400
though it's something
we would be interested in doing

00:50:50.400 --> 00:50:53.334
at some point in the future.

00:50:55.200 --> 00:50:56.601
man: Hi there.

00:50:56.601 --> 00:50:59.601
Does the JVM support
a HotSpot optimizer,

00:50:59.601 --> 00:51:03.868
and if so, is it as advanced
as Sun's and IBM'S?

00:51:03.868 --> 00:51:05.667
Schwarz: Go ahead.
Reyelts: I'm sorry.

00:51:05.667 --> 00:51:07.067
Is it what IBM'S?

00:51:07.067 --> 00:51:09.267
man: Well, I guess
two questions.

00:51:09.267 --> 00:51:14.067
The first one is does
the JVM use a HotSpot optimizer?

00:51:14.067 --> 00:51:17.200
Reyelts: Yeah, so the answer
to that is yes, we do right now.

00:51:17.200 --> 00:51:20.667
And if you look at--
if you were to dig deep,

00:51:20.667 --> 00:51:22.067
you would see right now

00:51:22.067 --> 00:51:25.167
we're running
in the client compiler

00:51:25.167 --> 00:51:26.968
and...

00:51:26.968 --> 00:51:29.100
that is partially
to help make sure

00:51:29.100 --> 00:51:31.067
that applications
load quicker.

00:51:31.067 --> 00:51:34.467
Schwarz: Right, so specifically
we're using Sun's JVM,

00:51:34.467 --> 00:51:39.267
out of the box, 1.6. with
the client HotSpot compiler.

00:51:39.267 --> 00:51:40.868
man: Okay. So will you be
keeping up with

00:51:40.868 --> 00:51:43.267
Sun's releases of the 1.6?

00:51:43.267 --> 00:51:46.267
You know, I think they're at
13 now or something like that.

00:51:46.267 --> 00:51:48.467
Reyelts: Yeah, absolutely.
We're really on top of that.

00:51:48.467 --> 00:51:50.667
And we're always
looking at ways--

00:51:50.667 --> 00:51:52.467
like for example,
there's tiered compilation

00:51:52.467 --> 00:51:57.167
that would help
both speed up initial loading

00:51:57.167 --> 00:52:00.100
and make code faster
as it's running.

00:52:00.100 --> 00:52:03.801
And while we talk about
spinning JVMs up and down,

00:52:03.801 --> 00:52:05.968
if your application
is getting hits,

00:52:05.968 --> 00:52:07.534
that won't happen, right?

00:52:07.534 --> 00:52:10.434
We won't arbitrarily
bring a JVM down for no reason.

00:52:10.434 --> 00:52:13.033
So those are important
optimizations too.

00:52:13.033 --> 00:52:14.601
man: And one final question.

00:52:14.601 --> 00:52:18.334
Do you plan on supporting
the server of HotSpot optimizer?

00:52:18.334 --> 00:52:19.534
Reyelts: Maybe.

00:52:19.534 --> 00:52:21.934
We'll support
whatever turns out to be

00:52:21.934 --> 00:52:24.734
the best optimizing compiler

00:52:24.734 --> 00:52:27.934
across the entire set of load
that we see for applications.

00:52:27.934 --> 00:52:30.734
man: Great. Thank you.

00:52:30.734 --> 00:52:32.133
man: Yeah, I have two questions.

00:52:32.133 --> 00:52:34.968
First, do we have plan
to support

00:52:34.968 --> 00:52:37.667
the Admin Console
for the DAP Application Server

00:52:37.667 --> 00:52:40.133
which is very useful
for the password.

00:52:40.133 --> 00:52:41.534
Schwarz: Uh, yes, yes, we do.

00:52:41.534 --> 00:52:43.534
The last release
was supposed to include

00:52:43.534 --> 00:52:44.734
support for the dataviewer,

00:52:44.734 --> 00:52:46.334
but it didn't quite
make it in in time.

00:52:46.334 --> 00:52:48.334
But that will be available
the next release.

00:52:48.334 --> 00:52:50.534
The other parts
of the Admin Console

00:52:50.534 --> 00:52:53.334
are things that we have
on our roadmap.

00:52:53.334 --> 00:52:55.534
I don't think we've spent
any time working on them yet

00:52:55.534 --> 00:52:57.734
but definitely plan
to do so.

00:52:57.734 --> 00:52:59.334
man: Okay. And my second
question is

00:52:59.334 --> 00:53:03.834
can I deploy both Python
and Java into a same server?

00:53:03.834 --> 00:53:06.801
Schwarz: So...you can have
an application

00:53:06.801 --> 00:53:08.634
that runs both Java and Python.

00:53:08.634 --> 00:53:10.000
What that means is that

00:53:10.000 --> 00:53:13.734
you can take an existing
Python application

00:53:13.734 --> 00:53:16.200
and deploy a separate
version of it on Java

00:53:16.200 --> 00:53:18.200
and share the datastore
between them.

00:53:18.200 --> 00:53:20.200
You cannot have a single
application version

00:53:20.200 --> 00:53:21.868
that is both Java and Python.

00:53:21.868 --> 00:53:25.367
Does that make sense?
man: Yeah. Thanks.

00:53:27.200 --> 00:53:28.801
man: Are there
internal safeguards

00:53:28.801 --> 00:53:30.334
put in place at Google

00:53:30.334 --> 00:53:33.767
that restricts access
by Google employees to the data?

00:53:33.767 --> 00:53:37.033
And if so, is there like
a white paper

00:53:37.033 --> 00:53:40.834
or some published document
that shows that

00:53:40.834 --> 00:53:44.601
so like for applications
that involve confidential data,

00:53:44.601 --> 00:53:48.501
we could show that to the people
that are storing the data?

00:53:48.501 --> 00:53:50.801
Schwarz: There are definitely
internal safeguards, yes.

00:53:50.801 --> 00:53:52.801
In terms of do we have
anything published,

00:53:52.801 --> 00:53:55.200
nothing I'm aware of.

00:53:55.200 --> 00:53:58.701
So the question is are there
safeguards that prevent

00:53:58.701 --> 00:54:02.067
Google employees
from seeing data,

00:54:02.067 --> 00:54:04.033
and do we have anything
published

00:54:04.033 --> 00:54:05.667
that expresses how we do that?

00:54:05.667 --> 00:54:06.701
Gibbs: That's a good question.

00:54:06.701 --> 00:54:08.267
Yes, there are safeguards

00:54:08.267 --> 00:54:10.467
that prevent Google employees
from seeing the data.

00:54:10.467 --> 00:54:12.868
And in general,
we apply the same policies

00:54:12.868 --> 00:54:14.834
that we apply for
all of our other products

00:54:14.834 --> 00:54:15.868
in our data center.

00:54:15.868 --> 00:54:17.400
Things like Gmail, you know.

00:54:17.400 --> 00:54:19.667
If you think about
the security concerns

00:54:19.667 --> 00:54:21.267
with Google employees
in Gmail,

00:54:21.267 --> 00:54:23.267
you know, those are
pretty important too.

00:54:23.267 --> 00:54:25.267
And we do have
internal policies and ways

00:54:25.267 --> 00:54:26.667
of dealing with that.

00:54:26.667 --> 00:54:28.267
And we model those policies

00:54:28.267 --> 00:54:30.267
and work in the same way
with App Engine.

00:54:30.267 --> 00:54:33.400
There is actually a document--
I don't have a URL for you,

00:54:33.400 --> 00:54:35.467
but is a white paper,
I believe,

00:54:35.467 --> 00:54:37.467
about security
within Google Apps

00:54:37.467 --> 00:54:39.467
and how we do security
and how that works

00:54:39.467 --> 00:54:40.901
and how our policies work.

00:54:40.901 --> 00:54:42.133
And that paper, generally

00:54:42.133 --> 00:54:43.667
almost all of it applies
to App Engine.

00:54:43.667 --> 00:54:45.167
I don't have a link
handy for you,

00:54:45.167 --> 00:54:46.334
but I think if you Google
for it,

00:54:46.334 --> 00:54:49.067
you might be able to find it.

00:54:49.067 --> 00:54:52.067
Reyelts: All right,
are there any more questions?

00:54:52.067 --> 00:54:53.868
Otherwise,
it looks like we're done.

00:54:53.868 --> 00:54:57.067
Well, thank you, everybody,
for coming to our presentation.

00:54:57.067 --> 00:54:59.200
[applause]

