WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:01.630
So now we can describe to you the

00:00:01.630 --> 00:00:06.220
lock algorithm. Basically the lock algorithm takes to arguments.

00:00:06.220 --> 00:00:09.513
One is, this name domino that is associated

00:00:09.513 --> 00:00:14.200
with this particular lock. And, and it's also taking

00:00:14.200 --> 00:00:18.450
my queue node, the one that I am providing, to say that this is my queue node,

00:00:18.450 --> 00:00:22.790
please queue me into this lock request queue. And

00:00:22.790 --> 00:00:25.920
when I make this call it could be that

00:00:25.920 --> 00:00:28.460
I'm in this happy state, in which case, I don't

00:00:28.460 --> 00:00:33.000
have any lock requesters ahead of me. But if it turns

00:00:33.000 --> 00:00:35.520
out that, when I come in there is somebody is

00:00:35.520 --> 00:00:38.400
using this lock, then I'm going to join this que. And has

00:00:38.400 --> 00:00:40.870
to be done atomically. There are two things going on

00:00:40.870 --> 00:00:44.340
here in joining this queue atomically. What I do is, I

00:00:44.340 --> 00:00:47.790
set the last pointer. This list is always pointing to

00:00:47.790 --> 00:00:50.970
the last requester. So, it used to point to this guy,

00:00:50.970 --> 00:00:54.130
he was the only requester. I came along, so

00:00:54.130 --> 00:00:56.610
we had to fix up this list so that this,

00:00:56.610 --> 00:00:59.030
and pointer is going to point to me, the last

00:00:59.030 --> 00:01:02.210
requester. And I also had to fix up, the current

00:01:02.210 --> 00:01:05.170
requestor point to me. And once I have done

00:01:05.170 --> 00:01:09.390
that, then I can await the predecessor, namely this guy,

00:01:09.390 --> 00:01:12.930
to signal me, by spinning on the got-it variable that

00:01:12.930 --> 00:01:15.990
is associated with my data structure. And the other thing

00:01:15.990 --> 00:01:18.260
that I would do as part of joining this

00:01:18.260 --> 00:01:20.190
queue is to set my next point at null, because

00:01:20.190 --> 00:01:21.760
there is nobody after me, I just made the

00:01:21.760 --> 00:01:27.020
lock call. Notice that when I'm joining this queue, I'm

00:01:27.020 --> 00:01:31.240
doing two things simultaneously. One is, I'm taking the

00:01:31.240 --> 00:01:34.270
pointer that was pointing to him and making it point

00:01:34.270 --> 00:01:38.370
to me. And I also need the coordinates of

00:01:38.370 --> 00:01:41.420
the previous guy so that I can set his next

00:01:41.420 --> 00:01:43.490
pointer to point to me. So I have to do

00:01:43.490 --> 00:01:46.020
this double act. So this has to be done atomically

00:01:46.020 --> 00:01:48.550
as well. So joining the queue, essentially, is a double

00:01:48.550 --> 00:01:51.930
act of breaking a link that used to exist here, make

00:01:51.930 --> 00:01:54.190
it point to me, and get the coordinates of this

00:01:54.190 --> 00:01:56.780
guy, so that I can fix him up. And remember that

00:01:56.780 --> 00:02:02.360
this is happening simultaneously. Perhaps with other guys trying to do

00:02:02.360 --> 00:02:07.160
the same thing, joining this queue. And therefore, this operation

00:02:07.160 --> 00:02:09.930
of breaking the queue and getting the coordinate

00:02:09.930 --> 00:02:12.680
of my predecessor has to be done atomically. And

00:02:12.680 --> 00:02:16.260
in order to facilitate that, we will propose having

00:02:16.260 --> 00:02:19.960
a primitive operation called fetch and store. And atomic

00:02:19.960 --> 00:02:23.030
operation, and the semantics of this fetch and store

00:02:23.030 --> 00:02:26.840
operation is that when you make this call and

00:02:26.840 --> 00:02:30.370
give it two arguments, L and Me. What this

00:02:30.370 --> 00:02:32.300
fetch and store is going to do is, it's going to

00:02:32.300 --> 00:02:36.260
return to me what used to be contained in

00:02:36.260 --> 00:02:39.540
L, so what used to be contained in L is

00:02:39.540 --> 00:02:43.040
my predecessor. So I'll get that, and I'll get

00:02:43.040 --> 00:02:45.990
the coordinates of this guy. And at the same time

00:02:45.990 --> 00:02:49.760
it's also storing into L a new node that

00:02:49.760 --> 00:02:51.970
is the pointer to the new node that is me.

00:02:51.970 --> 00:02:54.330
And so that is what is being accomplished by this.

00:02:54.330 --> 00:02:57.430
The double act that I mentioned of getting my predecessors

00:02:57.430 --> 00:03:00.520
coordinates and setting this guy to point to me is

00:03:00.520 --> 00:03:02.770
accomplished using this fetch-and-store operation.

00:03:02.770 --> 00:03:05.080
It's an atomic operation. And clearly

00:03:05.080 --> 00:03:08.980
the architecture is not having this fetch and store instruction

00:03:08.980 --> 00:03:11.810
you have to simulate that with a test and set instruction.

