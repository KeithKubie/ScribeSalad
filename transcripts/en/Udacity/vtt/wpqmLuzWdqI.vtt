WEBVTT
Kind: captions
Language: en

00:00:00.780 --> 00:00:03.170
Now let's focus on the hardware implementing cache

00:00:03.170 --> 00:00:07.280
coherence entirely in addition to giving the shared

00:00:07.280 --> 00:00:10.180
address space. There are two possibilities if the

00:00:10.180 --> 00:00:12.860
hardware is going to maintain the cache coherence. One

00:00:12.860 --> 00:00:16.740
possibility is what is called write invalidate scheme.

00:00:16.740 --> 00:00:19.500
And here the idea is, if a particular

00:00:19.500 --> 00:00:23.060
memory location is contained in all the caches,

00:00:23.060 --> 00:00:26.190
all these processes have fetched this particular memory location

00:00:26.190 --> 00:00:28.690
Y, and it's been sitting in the private

00:00:28.690 --> 00:00:32.380
caches of all these processes. And if now,

00:00:32.380 --> 00:00:34.770
process of P one, decides to write to

00:00:34.770 --> 00:00:39.490
this particular memory location it changes to from y

00:00:39.490 --> 00:00:42.600
to y prime. When that happens, what we're

00:00:42.600 --> 00:00:46.050
going to do is, the hardware is going to ensure that

00:00:46.050 --> 00:00:48.980
all of these caches are invalidated. So, the

00:00:48.980 --> 00:00:51.240
way it's done is that the hardware, as soon

00:00:51.240 --> 00:00:54.170
as this change happens, is going to broadcast a

00:00:54.170 --> 00:00:58.560
signal on the bus. Called invaldidate memeory location Y.

00:00:58.560 --> 00:01:01.700
So that's something that propagates on the system bus,

00:01:01.700 --> 00:01:04.300
and all these process of caches, are observing the

00:01:04.300 --> 00:01:06.850
caches, and this is sometimes referred to as snoopy

00:01:06.850 --> 00:01:10.530
caches, in a, in a lighter vein, these caches

00:01:10.530 --> 00:01:12.710
are snooping on the bus to see if there's

00:01:12.710 --> 00:01:17.000
any change to memory locations that are cached locally.

00:01:17.000 --> 00:01:19.760
And in this case, if an invalidation signal goes out

00:01:19.760 --> 00:01:23.380
for a particular memory location y, then each of these caches

00:01:23.380 --> 00:01:25.360
are going to say do I have that particular memory

00:01:25.360 --> 00:01:29.220
location? If I do, let me invalidate it. So, that particular

00:01:29.220 --> 00:01:32.570
memory location gets invalidated. So the idea is if you

00:01:32.570 --> 00:01:36.280
have that particular memory location, invalidate it. If you don't have

00:01:36.280 --> 00:01:39.420
that memory location, ignore it. Right? So if you don't

00:01:39.420 --> 00:01:43.050
have it, you don't have to bother, but if you particularly

00:01:43.050 --> 00:01:46.720
happen to have this memory location cached in your

00:01:46.720 --> 00:01:50.100
private cache, and if you observe an invalidation for

00:01:50.100 --> 00:01:53.410
that particular memory location, you go ahead and invalidate

00:01:53.410 --> 00:01:56.460
it. That's what is called write invalidate cache coherence

00:01:56.460 --> 00:01:58.550
scheme. You may already be one step ahead of

00:01:58.550 --> 00:02:00.570
me, and you may be thinking what would be

00:02:00.570 --> 00:02:04.710
an alternative to doing this invalidation? And, and you

00:02:04.710 --> 00:02:08.930
may be, you may be right. You thought of perhaps

00:02:08.930 --> 00:02:12.190
updating the caches. That's what is called write update

00:02:12.190 --> 00:02:16.110
scheme. The idea here is, if this guy is going to

00:02:16.110 --> 00:02:18.980
write to this particular memory location, modify to y

00:02:18.980 --> 00:02:22.310
prime, what we do is, instead of invalidating it on

00:02:22.310 --> 00:02:25.140
the bus, if there is a capability in hardware

00:02:25.140 --> 00:02:28.490
to send an update for this particular memory location on,

00:02:28.490 --> 00:02:31.550
on the bus. You send it out saying that

00:02:31.550 --> 00:02:34.120
I modified this particular memory location, this is a new

00:02:34.120 --> 00:02:37.710
value, and if these caches happen to have the same

00:02:37.710 --> 00:02:41.450
memory location, they all modify it from y to y prime.

00:02:41.450 --> 00:02:44.380
And now, all of these caches have the new value

00:02:44.380 --> 00:02:48.290
of y and the old values disappear from the system. So

00:02:48.290 --> 00:02:50.460
in this case, what we are doing is, if you

00:02:50.460 --> 00:02:53.820
have it, update it. Once again, you're snooping on the bus.

00:02:53.820 --> 00:02:56.700
Each of these process of caches is snooping on the bus

00:02:56.700 --> 00:02:59.410
and if they see an update for a particular memory location,

00:02:59.410 --> 00:03:01.620
they're saying, well, let me modify it so that

00:03:01.620 --> 00:03:04.590
future accesses by my CPU will get the most

00:03:04.590 --> 00:03:08.020
recent value that had been written into this particular

00:03:08.020 --> 00:03:12.300
cache line. That's the idea behind write update scheme.

00:03:13.550 --> 00:03:16.350
Now whether we're talking about write update scheme or

00:03:16.350 --> 00:03:19.590
the earlier write invalidate scheme, one thing should become

00:03:19.590 --> 00:03:21.970
very clear in your mind and that is there

00:03:21.970 --> 00:03:24.550
is work to be done whenever you change some

00:03:24.550 --> 00:03:28.850
memory location that could conceivably be cached in the

00:03:28.850 --> 00:03:32.580
other private caches of the CPUs. And the invalidate

00:03:32.580 --> 00:03:34.710
scheme has sent out an invalidate message. If it's

00:03:34.710 --> 00:03:37.310
an update scheme, it sends out an update message. And

00:03:37.310 --> 00:03:40.980
that kind of transaction that's going on is, is

00:03:40.980 --> 00:03:44.510
an overhead. And as, as a system designer, one

00:03:44.510 --> 00:03:47.130
of the thing that we've been emphasizing all along

00:03:47.130 --> 00:03:50.130
is that we want to keep the overhead to a minimum.

00:03:50.130 --> 00:03:55.130
But you can also see immediately that the overhead is going to be something

00:03:55.130 --> 00:03:57.030
that grows as you increase the number

00:03:57.030 --> 00:04:00.630
of processors. As you change this inter-connection

00:04:00.630 --> 00:04:08.070
network from a simple bus to a more exotic network. And also depending on

00:04:08.070 --> 00:04:11.200
the amount of sharing that is happening for a particular shared memory location.

