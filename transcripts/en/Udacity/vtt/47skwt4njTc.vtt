WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:02.500
So a few notes on implementation.

00:00:02.500 --> 00:00:05.115
The real benefits of this particular formulation of hashing

00:00:05.115 --> 00:00:08.044
are that our look-ups are again constant time,

00:00:08.044 --> 00:00:12.083
and that's terrific for parallelism for a machine like the GPU,

00:00:12.083 --> 00:00:14.338
because we keep all of our threads busy.

00:00:14.338 --> 00:00:19.101
There's no thread divergence at all, and the construction algorithm is actually pretty simple and pretty fast.

00:00:19.101 --> 00:00:24.584
It's actually a very efficient hash table construction when it's done in shared memory with a small of item to hash,

00:00:24.584 --> 00:00:27.198
but it turns out that it actually works fairly well with large data sets

00:00:27.198 --> 00:00:29.800
when the hash table needs to be constructed in main memory.

00:00:29.800 --> 00:00:32.103
The really important thing to keep in mind there

00:00:32.103 --> 00:00:39.276
is that the operation of write my item into the hash table and kick the other item out needs to be an atomic operation--

00:00:39.276 --> 00:00:41.511
in our implementation we used atomic exchange

00:00:41.511 --> 00:00:46.277
to make sure the 2 competing threads don't have any possibility of stomping on top of each other.

00:00:46.278 --> 00:00:52.188
And a final note, there's more than one way we might solve this general problem of check if an element is in a set.

00:00:52.188 --> 00:00:56.650
Instead of using hash tables, we could choose a fairly brute force way to do this.

00:00:56.650 --> 00:01:00.553
We could choose to sort all the elements in the set as a construction step,

00:01:00.553 --> 00:01:04.367
and then, for the look-up step, we could do binary into the set

00:01:04.367 --> 00:01:06.667
to see if that particular element is present.

00:01:06.667 --> 00:01:09.201
So for instance, we might have 5 keys here in a set.

00:01:09.201 --> 00:01:13.353
To construct this particular data structure, we sort these in order of the key,

00:01:13.353 --> 00:01:16.147
and to do look-up we just do binary search within this set.

00:01:16.147 --> 00:01:19.294
So for instance, if we're looking up value k6 with one thread,

00:01:19.294 --> 00:01:21.965
we'd go see k5--my keys bigger than that.

00:01:21.965 --> 00:01:24.301
I'd then pop this way and so on until I get to k6.

00:01:24.301 --> 00:01:27.186
I might have another thread that's looking up k3.

00:01:27.186 --> 00:01:30.261
It would start in the middle at k5 and then do binary search until it finds k3.

00:01:30.261 --> 00:01:36.032
Now sorting is quite fast on GPUs, and even though hash tables are faster for this particular computation,

00:01:36.032 --> 00:01:40.004
they're not so much faster that should never consider a sort to be a good idea.

00:01:40.004 --> 00:01:43.037
Often on the GPU, sometimes a brute force approach,

00:01:43.037 --> 00:01:46.743
like sort and binary search, might be your best option.

