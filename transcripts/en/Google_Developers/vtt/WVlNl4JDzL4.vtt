WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.826
[MUSIC PLAYING]

00:00:05.190 --> 00:00:06.750
Hey there, iOS developers.

00:00:06.750 --> 00:00:08.529
If you watched our
previous quick tip,

00:00:08.529 --> 00:00:11.070
you learned that you don't have
to give up your fancy UI View

00:00:11.070 --> 00:00:14.050
Animations just because
you're using constraints.

00:00:14.050 --> 00:00:16.160
The trick is that, instead
of directly animating

00:00:16.160 --> 00:00:17.910
your views'
positions themselves,

00:00:17.910 --> 00:00:20.470
you can animate their
constraints either by animating

00:00:20.470 --> 00:00:22.450
the constant associated
with those constraints,

00:00:22.450 --> 00:00:24.950
or by enabling and disabling
completely different sets

00:00:24.950 --> 00:00:27.282
of constraints to make your
views do different things,

00:00:27.282 --> 00:00:28.740
and then calling
layout, if needed,

00:00:28.740 --> 00:00:30.160
within the animation block.

00:00:30.160 --> 00:00:32.340
But this came with a
couple of extra quick tips

00:00:32.340 --> 00:00:35.630
from one of Google's very own
engineers, Jessica Horowitz.

00:00:35.630 --> 00:00:38.290
Jessica is an engineer working
on some cool new native iOS

00:00:38.290 --> 00:00:39.096
search features.

00:00:39.096 --> 00:00:41.345
And she had a few notes on
how you could best optimize

00:00:41.345 --> 00:00:43.350
your constraint animation.

00:00:43.350 --> 00:00:44.976
So in our previous
video, you'll recall

00:00:44.976 --> 00:00:46.433
that I could make
these three views

00:00:46.433 --> 00:00:48.440
switch from being
left-aligned to right-aligned

00:00:48.440 --> 00:00:50.800
simply by removing
and then adding

00:00:50.800 --> 00:00:52.822
different sets of constraints.

00:00:52.822 --> 00:00:55.280
It turns out, however, that
adding and removing constraints

00:00:55.280 --> 00:00:57.390
from your layout requires
quite a bit of work

00:00:57.390 --> 00:01:00.380
from the auto layout engine and
can be pretty CPU intensive.

00:01:00.380 --> 00:01:02.560
And as some folks around
here are fond of saying,

00:01:02.560 --> 00:01:03.530
performance matters.

00:01:03.530 --> 00:01:04.690
Ah!

00:01:04.690 --> 00:01:05.610
Don't do that.

00:01:05.610 --> 00:01:06.930
Shoo.

00:01:06.930 --> 00:01:09.160
So instead of
enabling and disabling

00:01:09.160 --> 00:01:10.840
different sets of
constraints, Jessica

00:01:10.840 --> 00:01:13.570
recommends you enable all the
constraints at design time.

00:01:13.570 --> 00:01:15.362
Let me show you.

00:01:15.362 --> 00:01:17.320
So here, I'm going back
into Interface Builder.

00:01:17.320 --> 00:01:18.945
And I'm going to
enable the constraints

00:01:18.945 --> 00:01:21.074
that both left align and
right align my views.

00:01:21.074 --> 00:01:22.490
Of course, when
you do that, Xcode

00:01:22.490 --> 00:01:23.830
will once again
complain that you

00:01:23.830 --> 00:01:25.038
have conflicting constraints.

00:01:25.038 --> 00:01:26.280
But don't freak out.

00:01:26.280 --> 00:01:27.190
Are you freaking out?

00:01:27.190 --> 00:01:28.150
Stop it.

00:01:28.150 --> 00:01:29.930
Instead, go into
your inspector here,

00:01:29.930 --> 00:01:32.344
and change the priorities
of your constraints.

00:01:32.344 --> 00:01:33.760
In my example, I'm
going to change

00:01:33.760 --> 00:01:35.134
the priorities of
the ones I want

00:01:35.134 --> 00:01:37.040
Xcode to ignore for now to 1.

00:01:37.040 --> 00:01:38.790
And I'll change the
priorities of the ones

00:01:38.790 --> 00:01:41.250
I want to keep to 999.

00:01:41.250 --> 00:01:42.770
Now, we can go
back into our code.

00:01:42.770 --> 00:01:44.630
And instead of
enabling or disabling

00:01:44.630 --> 00:01:47.300
our two sets of constraints, we
can just change the priorities

00:01:47.300 --> 00:01:49.650
back and forth
between 999 and 1,

00:01:49.650 --> 00:01:50.860
a little something like this.

00:01:54.220 --> 00:01:55.920
I have the same
behavior as before.

00:01:55.920 --> 00:01:57.350
But this kind of
priority chaining

00:01:57.350 --> 00:01:59.570
is much more efficient
than enabling and disabling

00:01:59.570 --> 00:02:00.941
constraints entirely.

00:02:00.941 --> 00:02:02.440
By the way, in case
you're wondering

00:02:02.440 --> 00:02:05.400
why I had to change my high
priority constraints to 999

00:02:05.400 --> 00:02:08.520
instead of leaving them at
the default value of 1,000,

00:02:08.520 --> 00:02:10.385
it's because iOS
interprets constraints

00:02:10.385 --> 00:02:13.290
set at 1,000 as
required constraints,

00:02:13.290 --> 00:02:15.920
meaning that I can't set
them later to anything lower.

00:02:15.920 --> 00:02:18.920
Setting it to 999 means
it'll probably take priority,

00:02:18.920 --> 00:02:19.880
but it's also optional.

00:02:19.880 --> 00:02:22.215
So I'm able to
lower it later on.

00:02:22.215 --> 00:02:24.699
Now, in addition, Jessica
had a second tip for you.

00:02:24.699 --> 00:02:26.240
You'll notice that
in my samples I've

00:02:26.240 --> 00:02:28.960
been calling layout if
needed on self.view right

00:02:28.960 --> 00:02:30.430
there in the view controller.

00:02:30.430 --> 00:02:33.130
Now, in many cases, particularly
little examples like this,

00:02:33.130 --> 00:02:34.370
it'll work just fine.

00:02:34.370 --> 00:02:37.270
But in some more complex
cases, it will not.

00:02:37.270 --> 00:02:39.012
Let's take a look at
this example here.

00:02:39.012 --> 00:02:40.470
You can see I have
a container view

00:02:40.470 --> 00:02:42.410
controller-- this
red and blue thing--

00:02:42.410 --> 00:02:44.960
placed inside another
view controller, where

00:02:44.960 --> 00:02:47.897
I've added these gray bars
here at the top and the bottom.

00:02:47.897 --> 00:02:50.230
Now, watch what happens when
I animate a few constraints

00:02:50.230 --> 00:02:52.390
within the container view
controller and then call

00:02:52.390 --> 00:02:54.830
self.view.layoutifneeded.

00:02:54.830 --> 00:02:57.280
You can see that this container
itself animates smoothly.

00:02:57.280 --> 00:02:59.480
But these bars at the top
and bottom, as well as

00:02:59.480 --> 00:03:02.010
the placement of the container
pops, which kind of ruins

00:03:02.010 --> 00:03:05.000
that whole smooth transition
look I was going for.

00:03:05.000 --> 00:03:07.810
So the trick here, and our
second quick tip of the day,

00:03:07.810 --> 00:03:09.600
is that you really
need to call layout

00:03:09.600 --> 00:03:12.750
if needed on the deepest
view whose size or position

00:03:12.750 --> 00:03:15.640
won't be affected by the
constraints you're animating.

00:03:15.640 --> 00:03:17.220
So in this example,
I found that I

00:03:17.220 --> 00:03:19.720
was able to get a smooth
animation by calling layout

00:03:19.720 --> 00:03:22.070
if needed not on my
view controller's view

00:03:22.070 --> 00:03:25.770
but on my view controller's
view's super view's super view.

00:03:25.770 --> 00:03:27.970
So that's much better.

00:03:27.970 --> 00:03:29.470
But how did I figure that out?

00:03:29.470 --> 00:03:30.530
Well, I would love
to tell you it's

00:03:30.530 --> 00:03:32.600
because I logically
analyzed my view's hierarchy

00:03:32.600 --> 00:03:34.770
and calculated the
appropriate level from there.

00:03:34.770 --> 00:03:37.970
But honestly, I just kept
adding super views until I

00:03:37.970 --> 00:03:39.090
got something that worked.

00:03:39.090 --> 00:03:40.940
Trial and error, it's great.

00:03:40.940 --> 00:03:43.340
So that said, you could
always break out the big guns

00:03:43.340 --> 00:03:45.400
and call layout if needed
on your view's window--

00:03:45.400 --> 00:03:47.330
this thing here--
which basically

00:03:47.330 --> 00:03:49.030
forces auto layout
to recalculate

00:03:49.030 --> 00:03:50.510
your entire hierarchy.

00:03:50.510 --> 00:03:52.940
But that, as you can imagine,
gets pretty expensive

00:03:52.940 --> 00:03:55.180
and is probably
excessive in most cases.

00:03:55.180 --> 00:03:56.650
Remember, perf matters.

00:03:56.650 --> 00:03:57.150
Oh.

00:03:57.150 --> 00:03:57.750
Go away.

00:03:57.750 --> 00:03:58.970
You've got your own show.

00:03:58.970 --> 00:04:00.730
Leave mine alone.

00:04:00.730 --> 00:04:03.017
So thank you, once again,
to Jessica for the tips.

00:04:03.017 --> 00:04:05.350
Jessica, I know you work here,
but you've totally earned

00:04:05.350 --> 00:04:07.060
yourself a Google T-shirt too.

00:04:07.060 --> 00:04:07.720
What about you?

00:04:07.720 --> 00:04:08.552
Got a quick tip?

00:04:08.552 --> 00:04:10.010
Send it to me at
this address here,

00:04:10.010 --> 00:04:11.640
and you can be
just like Jessica.

00:04:11.640 --> 00:04:14.050
Well, I mean, in the fact
that you'll get a T-shirt.

00:04:14.050 --> 00:04:15.120
I can't guarantee
you'll get to be

00:04:15.120 --> 00:04:16.430
an engineer here or anything.

00:04:16.430 --> 00:04:18.390
But you know, we are hiring.

00:04:18.390 --> 00:04:19.541
Just saying.

00:04:19.541 --> 00:04:21.040
So thanks, once
again, for watching.

00:04:21.040 --> 00:04:23.590
And I will see you
soon on Route 85.

00:04:23.590 --> 00:04:26.640
[MUSIC PLAYING]

