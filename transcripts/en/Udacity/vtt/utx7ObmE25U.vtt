WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:01.760
The last thing that I want to quickly

00:00:01.760 --> 00:00:04.900
discuss ,are some functions that usually exist in query

00:00:04.900 --> 00:00:07.732
languages like SQL. Such as ,group bys and

00:00:07.732 --> 00:00:11.250
aggregate functions. So let's say that I wanted to

00:00:11.250 --> 00:00:14.500
create some transformed version of my data. For

00:00:14.500 --> 00:00:17.590
example, what are the total number of enrollments per

00:00:17.590 --> 00:00:21.710
district? . I could write something like this. Select

00:00:21.710 --> 00:00:25.970
district,. Sum (aadhaar - generated) from aadhaar - data,

00:00:25.970 --> 00:00:29.200
group by district. Let's talk about this

00:00:29.200 --> 00:00:32.119
a little bit more. What's happening exactly?

00:00:32.119 --> 00:00:38.010
. Sum is what we call an aggregate function. An aggregate function takes some

00:00:38.010 --> 00:00:40.960
set of values, usually numbers and performs

00:00:40.960 --> 00:00:44.040
a mathematical operation on them. We've used

00:00:44.040 --> 00:00:47.420
sum ,but other aggregate functions include count.

00:00:47.420 --> 00:00:51.290
Min, mean, max. You get the idea.

00:00:51.290 --> 00:00:53.830
Operations that one could perform on a collection

00:00:53.830 --> 00:00:58.360
of numbers. But wait. Every single row is

00:00:58.360 --> 00:01:01.060
only one number. So how do we get

00:01:01.060 --> 00:01:04.420
to collections of numbers? What we basically say here

00:01:04.420 --> 00:01:07.480
is take each distinct district. And then for

00:01:07.480 --> 00:01:10.190
all of the different values of aadhaar_generated corresponding

00:01:10.190 --> 00:01:12.950
to a row ,for that district. Sum them

00:01:12.950 --> 00:01:16.960
up. So, we start with our aadhaar data table.

00:01:16.960 --> 00:01:19.920
Take each district ,and sum up the count aadhaar

00:01:19.920 --> 00:01:23.110
generated. Now in order for our results to make

00:01:23.110 --> 00:01:25.570
sense, we are only going to want one row

00:01:25.570 --> 00:01:28.970
in our output for each district. So we throw in

00:01:28.970 --> 00:01:32.310
this group by clause on the end, which essentially

00:01:32.310 --> 00:01:35.320
says. Let's only have one row per district in

00:01:35.320 --> 00:01:38.340
our results. There can be numerous clauses in a

00:01:38.340 --> 00:01:42.910
group buy. So we could also say this, select district,

00:01:42.910 --> 00:01:47.410
subdistrict, sum aadhaar generated, from aadhaar data, group

00:01:47.410 --> 00:01:51.330
by district, subdistrict. Note that whatever columns we

00:01:51.330 --> 00:01:53.820
select, that we don't aggregate, we need to

00:01:53.820 --> 00:01:57.380
group by. In this case, district and sub-district. We

00:01:57.380 --> 00:01:59.840
could also put a where clause here, so

00:01:59.840 --> 00:02:02.160
in order to sum up aadhaar generated for people

00:02:02.160 --> 00:02:07.880
over 60 in each district, I can just add a where clause in after the table name,

00:02:07.880 --> 00:02:12.850
as we discussed earlier. If we were to run this query. Giving us select

00:02:12.850 --> 00:02:17.870
district, sub-district, sum aadhaar generated, from aadhaar data,

00:02:17.870 --> 00:02:23.000
where age greater than 60, group by district, sub-district. If we

00:02:23.000 --> 00:02:24.900
were to run this query, we would have

00:02:24.900 --> 00:02:27.285
a row for every combination of district and

00:02:27.285 --> 00:02:29.910
subdistrict. And we would also have for each

00:02:29.910 --> 00:02:33.030
row, account of how many aadhaar were generated ,for

00:02:33.030 --> 00:02:34.925
people over the age of 60.

