WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.410
Web components enable you
to build great websites

00:00:03.410 --> 00:00:05.925
through they use of
reusable components.

00:00:05.925 --> 00:00:09.580
But what does it take to
build a web component?

00:00:09.580 --> 00:00:11.800
My name is Ejii,
and today I'm going

00:00:11.800 --> 00:00:16.329
to give you an overview
of HTML imports.

00:00:16.329 --> 00:00:18.810
If you have worked
with UI libraries

00:00:18.810 --> 00:00:21.880
like jQuery UI or
bootstrap, you know

00:00:21.880 --> 00:00:25.840
that they require multiple tags
for loading all of the required

00:00:25.840 --> 00:00:31.210
resources, such as scripts,
stylesheets, or web fonts.

00:00:31.210 --> 00:00:33.660
Wouldn't it be nice
if you could load them

00:00:33.660 --> 00:00:37.370
as a component with a
single tag because they

00:00:37.370 --> 00:00:40.610
provide a single
set of features?

00:00:40.610 --> 00:00:44.190
HTML imports allow you to
import an HTML file that

00:00:44.190 --> 00:00:47.070
includes those required
resources in line,

00:00:47.070 --> 00:00:52.740
or as a script tag or
link tag, in one place.

00:00:52.740 --> 00:00:55.200
At the time of this
recording, HTML imports

00:00:55.200 --> 00:00:57.940
have landed in Chrome and Opera.

00:00:57.940 --> 00:01:01.130
Firefox supports it in
Nightly behind a flag.

00:01:01.130 --> 00:01:04.160
But support for web
components is changing weekly,

00:01:04.160 --> 00:01:06.200
so be sure to check
chromestatus.com

00:01:06.200 --> 00:01:10.260
for an up to date
browser support table.

00:01:10.260 --> 00:01:13.170
To detect the availability
of HTML imports,

00:01:13.170 --> 00:01:17.270
check if link tag has
an imports property.

00:01:17.270 --> 00:01:20.830
For unsupported browsers,
you can use platform.js,

00:01:20.830 --> 00:01:23.370
a collection of web
components polyfills

00:01:23.370 --> 00:01:26.600
made available as
polymer library.

00:01:26.600 --> 00:01:30.390
This will automatically detect
the availability of the HTML

00:01:30.390 --> 00:01:34.930
imports and populate
if necessary.

00:01:34.930 --> 00:01:38.070
Using HTML imports is simple.

00:01:38.070 --> 00:01:43.980
Just add link tag with rel
equals import to the HTML.

00:01:43.980 --> 00:01:48.680
Instead linked HTML, you can add
any HTML markups as you wish,

00:01:48.680 --> 00:01:51.620
including ones that load,
additional resources

00:01:51.620 --> 00:01:56.180
such as scripts, links,
styles, and so on.

00:01:56.180 --> 00:02:02.260
You don't need doc type HTML
head or body on imported HTML.

00:02:02.260 --> 00:02:08.229
HTML markups will be parsed
and executed on load.

00:02:08.229 --> 00:02:10.430
You may wonder how
browsers manage

00:02:10.430 --> 00:02:14.730
loading multiple resources
using HTML imports.

00:02:14.730 --> 00:02:20.420
HTML imports behave just like
defer attribute on script tag.

00:02:20.420 --> 00:02:23.450
On loading HTML
following script tags,

00:02:23.450 --> 00:02:27.230
we'll wait for all the
scripts in the imported HTML

00:02:27.230 --> 00:02:28.635
to be loaded and executed.

00:02:31.150 --> 00:02:35.430
This is a visualization
of how it works.

00:02:35.430 --> 00:02:38.770
First, start loading index HTML.

00:02:38.770 --> 00:02:42.440
As soon as the browser
finds the import,

00:02:42.440 --> 00:02:46.710
it starts parsing imported HTML.

00:02:46.710 --> 00:02:52.070
Meanwhile, parsing index
HTML continues to move on

00:02:52.070 --> 00:02:56.620
but blocked on the
next script tag,

00:02:56.620 --> 00:03:01.170
because the browser waits for
all script tags inside imported

00:03:01.170 --> 00:03:05.640
HTML to be loaded and executed.

00:03:05.640 --> 00:03:10.770
script1.js will be loaded and
executed, then script2.js.

00:03:13.610 --> 00:03:17.590
Now the control comes
back to index HTML.

00:03:17.590 --> 00:03:19.390
Load and execute script3.js.

00:03:22.180 --> 00:03:26.710
Note that if you add async
attribute to HTML import,

00:03:26.710 --> 00:03:30.820
it won't wait for the imported
HTML to be loaded and executed.

00:03:34.110 --> 00:03:37.150
The reason async
is not default is

00:03:37.150 --> 00:03:40.900
for ease of use for developers.

00:03:40.900 --> 00:03:44.160
If you care about performance,
please bear in mind

00:03:44.160 --> 00:03:47.890
that there's always an option
to use async attribute.

00:03:50.680 --> 00:03:54.340
One important thing you should
keep in mind when using HTML

00:03:54.340 --> 00:03:58.580
imports is that you basically
cannot import files from

00:03:58.580 --> 00:04:01.570
outside of your origin.

00:04:01.570 --> 00:04:05.070
If you wish to import
resources from other origins,

00:04:05.070 --> 00:04:09.860
the server needs to
support CORS, Cross Origin

00:04:09.860 --> 00:04:11.540
Resource Sharing.

00:04:11.540 --> 00:04:16.980
To learn more about CORS, please
take out HTML5 Rocks article,

00:04:16.980 --> 00:04:21.440
"Using CORS."

00:04:21.440 --> 00:04:26.500
HTML imports execute scripts,
load styles and fonts right

00:04:26.500 --> 00:04:30.090
when imported HTML is loaded.

00:04:30.090 --> 00:04:34.710
But sometimes you want to access
those resources and objects

00:04:34.710 --> 00:04:37.600
using JavaScript.

00:04:37.600 --> 00:04:40.910
Actually, the window object
and the document object

00:04:40.910 --> 00:04:46.710
in an imported document are
identical to the main document.

00:04:46.710 --> 00:04:50.190
So how do we access
resources inside import HTML

00:04:50.190 --> 00:04:51.840
from index HTML?

00:04:51.840 --> 00:04:55.350
And how do we access
resources inside index HTML

00:04:55.350 --> 00:04:58.300
from import HTML?

00:04:58.300 --> 00:05:00.940
In order to access
the document object

00:05:00.940 --> 00:05:04.750
of imported HTML from
the main document,

00:05:04.750 --> 00:05:08.600
use import property
of the link element.

00:05:08.600 --> 00:05:11.710
Note that you can use
onload event to make sure

00:05:11.710 --> 00:05:15.400
that that content is already
loaded before accessing

00:05:15.400 --> 00:05:19.050
its content, just
like other link text.

00:05:19.050 --> 00:05:22.500
In order to access the document
object or the main HTML

00:05:22.500 --> 00:05:26.890
from the imported document, you
can use document currentScript

00:05:26.890 --> 00:05:28.720
ownerDocument.

00:05:28.720 --> 00:05:31.540
If you are using
platform.js, you

00:05:31.540 --> 00:05:35.640
need to insert an underscore
before currentScript

00:05:35.640 --> 00:05:39.500
due to polyfill restrictions.

00:05:39.500 --> 00:05:42.400
If you are already familiar
with web components

00:05:42.400 --> 00:05:45.690
and actively using
a lot of components,

00:05:45.690 --> 00:05:49.660
your HTML could look
something like this.

00:05:49.660 --> 00:05:51.740
Wow, so many imports.

00:05:51.740 --> 00:05:54.170
This doesn't look the best.

00:05:54.170 --> 00:05:58.580
Loading many resources mean
that there are same or even more

00:05:58.580 --> 00:06:02.210
network connections
when loading the page.

00:06:02.210 --> 00:06:06.720
There are a couple of
things to note here.

00:06:06.720 --> 00:06:11.410
Solving dependency on web
components is kind of tricky.

00:06:11.410 --> 00:06:16.200
It can import same resources
multiple times, like this.

00:06:16.200 --> 00:06:20.950
But don't worry, HTML
imports take care of it.

00:06:20.950 --> 00:06:24.730
Documents from same URL will
be fetched and processed

00:06:24.730 --> 00:06:25.230
only once.

00:06:28.850 --> 00:06:31.470
If you care about
performance, you

00:06:31.470 --> 00:06:36.590
will want to reduce the number
of connections to the server.

00:06:36.590 --> 00:06:41.420
There's a library called
Vulcanize to solve the problem.

00:06:41.420 --> 00:06:45.200
Vulcanize recursively
pulls in all your imports,

00:06:45.200 --> 00:06:48.500
flattens their
dependencies, and spits out

00:06:48.500 --> 00:06:51.920
something that can potentially
reduce the number of network

00:06:51.920 --> 00:06:53.620
requests your app makes.

00:06:56.520 --> 00:06:59.730
Now let me show you
how HTML import works

00:06:59.730 --> 00:07:04.690
by extending the example code
we used in the previous videos.

00:07:04.690 --> 00:07:07.260
I'm not going to explain
how templates, Shadow

00:07:07.260 --> 00:07:09.670
DOM, and custom elements work.

00:07:09.670 --> 00:07:12.310
But if you're curious
and haven't watched

00:07:12.310 --> 00:07:16.430
the previous videos,
please do so.

00:07:16.430 --> 00:07:19.060
One of the benefits of
using web components

00:07:19.060 --> 00:07:24.150
is that you can isolate
and reuse components.

00:07:24.150 --> 00:07:27.800
HTML imports help that
by moving components code

00:07:27.800 --> 00:07:29.950
to a separate file.

00:07:29.950 --> 00:07:34.340
In this case, x-component
HTML, which uses template,

00:07:34.340 --> 00:07:37.400
custom elements, and Shadow DOM.

00:07:37.400 --> 00:07:40.645
This file will be loaded
autonomously when imported.

00:07:43.700 --> 00:07:46.760
Once you have a separate
HTML file that builds a web

00:07:46.760 --> 00:07:52.090
component, you can simply
import it by using HTML imports,

00:07:52.090 --> 00:07:54.550
and the result will
look the same as before.

00:07:57.870 --> 00:08:00.120
So this is HTML imports.

00:08:00.120 --> 00:08:02.850
To learn more
about HTML imports,

00:08:02.850 --> 00:08:05.410
be sure to read the
HTML5 Rocks article

00:08:05.410 --> 00:08:08.100
written by Eric Bidelman.

00:08:08.100 --> 00:08:10.090
Thank you for watching.

