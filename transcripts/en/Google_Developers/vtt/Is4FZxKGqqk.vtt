WEBVTT
Kind: captions
Language: en

00:00:00.010 --> 00:00:01.510
ELJI KITAMURA: Web
components enable

00:00:01.510 --> 00:00:04.000
you to do build great
websites through the use

00:00:04.000 --> 00:00:05.050
of reusable components.

00:00:06.170 --> 00:00:08.340
But what does it take to
build a web component?

00:00:09.540 --> 00:00:11.570
My name is Elji,
and today I'm going

00:00:11.570 --> 00:00:13.570
to give you an
overview of Shadow DOM.

00:00:15.330 --> 00:00:19.290
Shadow DOM provides you a way to
add local DOM tree inside a DOM

00:00:19.290 --> 00:00:22.110
element with local
styles and markup

00:00:22.110 --> 00:00:25.890
that are decoupled from
the rest of the web page.

00:00:25.890 --> 00:00:27.890
It's just like the
built in elements

00:00:27.890 --> 00:00:30.220
created by the
browser [? vendors ?].

00:00:30.220 --> 00:00:31.345
Let me show you an example.

00:00:32.840 --> 00:00:36.260
Here is a video rendered in the
browser using the HTML video

00:00:36.260 --> 00:00:36.760
tag.

00:00:37.960 --> 00:00:41.350
As you can see, the video
element not only provides

00:00:41.350 --> 00:00:43.470
video, it also
provides its controls.

00:00:44.780 --> 00:00:48.780
Notice that we did not have to
write any HTML to make those

00:00:48.780 --> 00:00:50.330
controls up here.

00:00:50.330 --> 00:00:52.945
They're just built into
the video element itself.

00:00:55.270 --> 00:00:59.440
If we open up the DevTools and
turn on Show User Agent Shadow

00:00:59.440 --> 00:01:03.780
DOM, we can actually look at the
source for the video controls.

00:01:05.930 --> 00:01:08.740
And you see that they're
actually made of HTML.

00:01:10.240 --> 00:01:12.740
This is an example of
using the Shadow DOM.

00:01:14.440 --> 00:01:17.600
The nice thing about Shadow
DOM is that you can actually

00:01:17.600 --> 00:01:19.870
use this feature in
you own components.

00:01:22.040 --> 00:01:24.470
At the time of this
recording, Shadow DOM

00:01:24.470 --> 00:01:26.840
has landed in Chrome and Opera.

00:01:28.040 --> 00:01:31.330
Firefox supports it in Nightly.

00:01:31.330 --> 00:01:34.390
But support for web
components is changing weekly,

00:01:34.390 --> 00:01:37.870
so be sure to check
chromestatus.com

00:01:37.870 --> 00:01:40.720
for up-to-date
browser support table.

00:01:42.360 --> 00:01:44.810
To detect the availability
of the Shadow DOM,

00:01:44.810 --> 00:01:47.885
check if document body
createShadowRoot is available.

00:01:49.020 --> 00:01:52.670
For unsupported browsers,
you can use platform.js,

00:01:52.670 --> 00:01:55.100
a collection of a web
components polyfills

00:01:55.100 --> 00:01:57.615
made available as part
of the Polymer library.

00:01:58.940 --> 00:02:01.610
This will automatically detect
the availability of the Shadow

00:02:01.610 --> 00:02:03.800
DOM and polyfill
it if necessary.

00:02:06.070 --> 00:02:08.560
With Shadow DOM, elements
can get a new kind

00:02:08.560 --> 00:02:12.512
of node associated with
them called shadow root.

00:02:12.512 --> 00:02:16.040
An element that has a shadow
root associated with it

00:02:16.040 --> 00:02:18.170
is called shadow host.

00:02:19.270 --> 00:02:22.480
The shadow root can be
treated as an ordinary DOM

00:02:22.480 --> 00:02:25.040
element so you can
append it [INAUDIBLE].

00:02:27.770 --> 00:02:33.260
With Shadow DOM, all markups and
CSS are scoped to the element.

00:02:33.260 --> 00:02:36.440
This means that CSS defined
inside of the shadow root

00:02:36.440 --> 00:02:40.160
will not leak out to
affect a parent document.

00:02:40.160 --> 00:02:42.680
And it also prevents
the parent document

00:02:42.680 --> 00:02:45.530
from accidentally [? styling ?]
the contents of the shadow

00:02:45.530 --> 00:02:46.030
root.

00:02:47.759 --> 00:02:49.800
To create the shadow root,
call createShadowRoot.

00:02:51.190 --> 00:02:54.580
Add any DOM element you wish
to at that Shadow DOM too.

00:02:55.660 --> 00:02:57.800
It will return
shadow root object,

00:02:57.800 --> 00:02:59.720
which you can then
append contents to.

00:03:01.150 --> 00:03:03.990
The resulting DOM structure
will look something

00:03:03.990 --> 00:03:05.180
like this in DevTools.

00:03:06.420 --> 00:03:09.670
As you can see, there is
a node called shadow root

00:03:09.670 --> 00:03:12.735
underneath shadow host, followed
by the appended contents.

00:03:14.970 --> 00:03:17.560
You may wish to render
children of your shadow host

00:03:17.560 --> 00:03:18.840
inside the Shadow DOM.

00:03:20.350 --> 00:03:22.800
This is especially useful
for dynamic content.

00:03:24.670 --> 00:03:27.610
For example, a name tag
that is styled in the Shadow

00:03:27.610 --> 00:03:30.950
DOM, but needs to pull
in the user's name

00:03:30.950 --> 00:03:32.755
from an external input.

00:03:34.300 --> 00:03:36.715
You can do so by using
the content element.

00:03:38.600 --> 00:03:42.270
By giving content tag a select
attribute with CSS selector

00:03:42.270 --> 00:03:45.450
as a value, you can
distribute host content

00:03:45.450 --> 00:03:46.590
to wherever you want.

00:03:47.630 --> 00:03:50.080
Note that select
attributes can only

00:03:50.080 --> 00:03:52.705
take direct children
of the host element.

00:03:54.830 --> 00:03:57.000
Because adding
content in [INAUDIBLE]

00:03:57.000 --> 00:03:59.130
isn't that efficient,
you may wish

00:03:59.130 --> 00:04:00.950
to use a more
[? declarative ?] approach.

00:04:02.160 --> 00:04:05.410
You can actually do so by
combining template elements

00:04:05.410 --> 00:04:06.570
with Shadow DOM.

00:04:06.570 --> 00:04:09.330
In a previous
episode, I explained

00:04:09.330 --> 00:04:11.025
how to work with the
template elements.

00:04:13.110 --> 00:04:15.320
Here's an example
code I used there.

00:04:15.320 --> 00:04:17.284
I'm going to combine
this with Shadow DOM.

00:04:19.519 --> 00:04:21.950
In this template,
let's add content tag

00:04:21.950 --> 00:04:25.750
so that H1 tag inside Shadow
host will be projected here.

00:04:26.970 --> 00:04:29.610
And using JavaScript,
create Shadow root,

00:04:29.610 --> 00:04:32.500
then stamp out the
template using import node.

00:04:33.550 --> 00:04:35.810
And the result will look
something like this.

00:04:39.950 --> 00:04:42.080
So that is a very basic
of the Shadow DOM.

00:04:43.210 --> 00:04:47.260
But remember, this is
only a tip of the iceberg.

00:04:47.260 --> 00:04:49.490
There are tons of
interesting things

00:04:49.490 --> 00:04:54.050
to learn around Shadow DOM,
such an styling, event handling,

00:04:54.050 --> 00:04:56.445
and working with
multiple Shadow roots.

00:04:58.180 --> 00:05:00.860
The best place to learn
more about Shadow DOM

00:05:00.860 --> 00:05:02.170
is HTML5 Rocks.

00:05:03.470 --> 00:05:08.250
You can start from 101, but
there are also 201 and 301,

00:05:08.250 --> 00:05:10.450
so make sure to
check them all out.

00:05:11.612 --> 00:05:12.570
Thank you for watching.

00:05:13.660 --> 00:05:15.840
See you in the next episode.

