WEBVTT
Kind: captions
Language: en

00:00:04.000 --> 00:00:06.501
Zhang: So
before we get started,

00:00:06.501 --> 00:00:09.467
can I just get a show of hands
for how many people here

00:00:09.467 --> 00:00:13.300
work with workflows
on a daily basis?

00:00:13.300 --> 00:00:16.968
So most of you, and that's
probably why you're here.

00:00:16.968 --> 00:00:18.400
So you know,
by our definition,

00:00:18.400 --> 00:00:20.100
the workflow
is just the management

00:00:20.100 --> 00:00:23.000
of a sequence of steps
in a business process,

00:00:23.000 --> 00:00:26.567
and that can be anything
from a vacation request approval

00:00:26.567 --> 00:00:29.434
to a document approval,
to an expenses report.

00:00:29.434 --> 00:00:33.400
And so workflows really are,
you know, relevant to everybody.

00:00:33.400 --> 00:00:36.567
And again, by a show of hands,
how many people here

00:00:36.567 --> 00:00:39.667
are familiar
with Google Sites?

00:00:39.667 --> 00:00:41.501
So most of you, as well.

00:00:41.501 --> 00:00:45.200
And how many of you were at
the Apps Script talk yesterday?

00:00:45.200 --> 00:00:48.434
Okay, so about half of you.
So great.

00:00:48.434 --> 00:00:50.634
Just for those
that aren't familiar,

00:00:50.634 --> 00:00:53.234
Google Sites
is just an easy way

00:00:53.234 --> 00:00:56.868
to create and share
web pages and websites.

00:00:56.868 --> 00:00:58.501
You can embed documents.

00:00:58.501 --> 00:01:00.934
You can share them
with your co-workers,

00:01:00.934 --> 00:01:03.400
and you can even publish them
on the web.

00:01:03.400 --> 00:01:06.167
Apps Script is our cloud
scripting service.

00:01:06.167 --> 00:01:10.400
It's a service side
JavaScript language,

00:01:10.400 --> 00:01:14.601
and you can use it to extend
and automate Google Apps.

00:01:14.601 --> 00:01:16.634
So here's the agenda
for today.

00:01:16.634 --> 00:01:20.267
I'm going to go over the basics
of Scripts and Sites,

00:01:20.267 --> 00:01:22.133
then I'll talk about
a simple workflow,

00:01:22.133 --> 00:01:25.267
which is posting comments
to a site owner.

00:01:25.267 --> 00:01:27.267
Then I'm going to go over
a slightly more complex

00:01:27.267 --> 00:01:29.767
document approval workflow,
and then Evin's going to

00:01:29.767 --> 00:01:33.534
talk to you about
advanced document approval.

00:01:33.534 --> 00:01:36.734
So let's go ahead and start
with Script insights.

00:01:36.734 --> 00:01:38.400
So if you're familiar
with Apps Scripts,

00:01:38.400 --> 00:01:41.534
you know that they are available
in spreadsheets,

00:01:41.534 --> 00:01:45.467
and you can use them to interact
with all sorts of Google Apps.

00:01:45.467 --> 00:01:47.801
But ultimately, I think
Sites really serve

00:01:47.801 --> 00:01:49.133
as the hub for workflows.

00:01:49.133 --> 00:01:52.300
If you think of your HR site,
or your team site,

00:01:52.300 --> 00:01:54.767
or your expenses application,
these are all sites

00:01:54.767 --> 00:01:57.367
in which these workflows live,
and so we're happy to say

00:01:57.367 --> 00:01:59.100
that since the beginning
of this year,

00:01:59.100 --> 00:02:02.767
Google Apps Script
is available in Google Sites.

00:02:02.767 --> 00:02:04.501
With it, you can
now write scripts

00:02:04.501 --> 00:02:06.634
that interact with a site
directly,

00:02:06.634 --> 00:02:09.300
and you can create
these Script Gadgets

00:02:09.300 --> 00:02:14.067
that let you render dynamic
content on a site's page.

00:02:14.067 --> 00:02:16.534
If you use Sites,
it's actually really easy.

00:02:16.534 --> 00:02:19.267
You can use Scripts
to create pages,

00:02:19.267 --> 00:02:21.501
to share the site
to other people,

00:02:21.501 --> 00:02:24.334
to apply themes and templates,
to search.

00:02:24.334 --> 00:02:26.801
Pretty much anything you can do
through the site's UI,

00:02:26.801 --> 00:02:29.634
you can do
with Apps Scripts.

00:02:29.634 --> 00:02:32.801
So now, there's this top-level
Sites App class with it.

00:02:32.801 --> 00:02:37.367
You can grab a site object
by domain name and site name.

00:02:37.367 --> 00:02:40.167
Once you have a site object,
you can interact

00:02:40.167 --> 00:02:41.767
with the four basic
page types,

00:02:41.767 --> 00:02:44.033
which are WebPage,
ListPage,

00:02:44.033 --> 00:02:47.501
AnnouncementPage,
and FileCabinetPage.

00:02:47.501 --> 00:02:50.601
Themes can be applied
to pages or templates,

00:02:50.601 --> 00:02:52.634
and pages are mostly
standard HTML,

00:02:52.634 --> 00:02:56.601
so they're really easy to create
and edit with Apps Scripts.

00:02:56.601 --> 00:02:59.567
You can also share
at the site level very easily.

00:02:59.567 --> 00:03:05.300
You can add and get each
of the roles, the user roles.

00:03:05.300 --> 00:03:07.701
So there's Viewer,
Collaborator, and Owner.

00:03:07.701 --> 00:03:10.133
When you add somebody,
you add them by email address.

00:03:10.133 --> 00:03:12.601
And when you get
the users for a role,

00:03:12.601 --> 00:03:17.434
you get an array of email
addresses, so really simple.

00:03:17.434 --> 00:03:19.000
How do you use it?

00:03:19.000 --> 00:03:21.100
In the Insert menu,
you can see here

00:03:21.100 --> 00:03:24.868
there's a new Apps Script Gadget
menu item,

00:03:24.868 --> 00:03:27.534
and that's available
in the page Edit mode.

00:03:27.534 --> 00:03:29.367
That lets you insert
the Script Gadgets

00:03:29.367 --> 00:03:31.534
that dynamically
render content.

00:03:31.534 --> 00:03:33.501
They work just like
any other Sites Gadget.

00:03:33.501 --> 00:03:34.968
A lot of the properties
are the same,

00:03:34.968 --> 00:03:36.467
and there's
some additional things

00:03:36.467 --> 00:03:40.000
that let you change
the behavior of Script Gadgets.

00:03:40.000 --> 00:03:42.100
In addition,
in the Manage Site pages,

00:03:42.100 --> 00:03:45.400
there's a new Apps Script tab
that lets you see the scripts

00:03:45.400 --> 00:03:48.968
that you have in the site,
and you can launch the editor,

00:03:48.968 --> 00:03:50.801
which you're probably
already familiar with,

00:03:50.801 --> 00:03:53.434
if you want to write
new scripts.

00:03:53.434 --> 00:03:57.567
So let's go ahead and talk
about a simple workflow.

00:03:57.567 --> 00:03:59.367
So one thing that's been
requested in Sites

00:03:59.367 --> 00:04:02.534
that still isn't available
is the ability

00:04:02.534 --> 00:04:06.434
to email a site owner without
revealing their email address,

00:04:06.434 --> 00:04:08.968
and it turns out this is
actually really easy to do

00:04:08.968 --> 00:04:10.501
with App Scripts.

00:04:10.501 --> 00:04:12.234
There's two parts
to this problem.

00:04:12.234 --> 00:04:16.868
The first part is
the rendering of this form.

00:04:16.868 --> 00:04:19.834
You can see what that might
look like on this screenshot.

00:04:19.834 --> 00:04:22.133
And the second part is
to actually grab the owners

00:04:22.133 --> 00:04:24.300
and send them an email.

00:04:24.300 --> 00:04:26.067
This is the code to do
that second part,

00:04:26.067 --> 00:04:28.234
which I would say
is the most important part,

00:04:28.234 --> 00:04:31.334
and it's really
only two lines long.

00:04:31.334 --> 00:04:32.634
This is the
"sendEmail" function.

00:04:32.634 --> 00:04:34.934
That underscore means
it's a hidden function.

00:04:34.934 --> 00:04:36.467
We're not going to go
into that here.

00:04:36.467 --> 00:04:38.434
It's not really relevant.

00:04:38.434 --> 00:04:40.400
But in the first line
of the function,

00:04:40.400 --> 00:04:42.567
we use SitesApp.getSite.

00:04:42.567 --> 00:04:45.234
We grab our site
by domain and name.

00:04:45.234 --> 00:04:46.934
We call getOwners
on that site object,

00:04:46.934 --> 00:04:50.000
which gives us an array,
and then in the second line,

00:04:50.000 --> 00:04:53.501
we join that array
into a comma-separated string.

00:04:53.501 --> 00:04:55.901
We pass it to
MailApp.sendEmail.

00:04:55.901 --> 00:04:59.367
We'll set the subject line
to "hello"

00:04:59.367 --> 00:05:03.067
and the body of the email
to e.parameter.email,

00:05:03.067 --> 00:05:05.200
and I'll show you where
that comes from later on.

00:05:05.200 --> 00:05:06.367
But that's pretty much it.

00:05:06.367 --> 00:05:09.567
That will send an email
to the site owners.

00:05:09.567 --> 00:05:11.734
So let's talk about where
we actually get that email from,

00:05:11.734 --> 00:05:15.434
and this is the code
to render that form.

00:05:15.434 --> 00:05:18.634
We use the built-in doGet
function in Apps Script,

00:05:18.634 --> 00:05:20.400
and that means that we're
going to be publishing

00:05:20.400 --> 00:05:22.400
this script as a service,

00:05:22.400 --> 00:05:26.634
which lets us render content
in the Script Gadget.

00:05:26.634 --> 00:05:29.167
In the first few lines,
we will use UiApp,

00:05:29.167 --> 00:05:31.167
and I hope, you know,
at least some of you guys

00:05:31.167 --> 00:05:32.701
are familiar with this.

00:05:32.701 --> 00:05:36.534
UiApp.createApplication
will create a UI application,

00:05:36.534 --> 00:05:39.033
obviously, that will let you
render content.

00:05:39.033 --> 00:05:41.467
We'll set its title
to "Contact owners,"

00:05:41.467 --> 00:05:44.701
we'll create a vertical panel
that lets you arrange things

00:05:44.701 --> 00:05:47.434
vertically on the screen,
set its ID to mainPanel,

00:05:47.434 --> 00:05:50.400
which lets us refer to it
later on,

00:05:50.400 --> 00:05:51.767
set its spacing.

00:05:51.767 --> 00:05:53.934
And obviously, you can make it
arbitrarily beautiful,

00:05:53.934 --> 00:05:55.901
but we're going to keep things
simple here.

00:05:55.901 --> 00:05:59.501
Then we're going to add it
to the app, so pretty basic.

00:05:59.501 --> 00:06:02.334
Then we're going to call
Session.getActiveUser.

00:06:02.334 --> 00:06:05.667
That gets the user that's
currently viewing the form.

00:06:05.667 --> 00:06:08.300
We get their email address,
and we will add a label

00:06:08.300 --> 00:06:10.334
to show who the email
is coming from,

00:06:10.334 --> 00:06:12.400
as the first element
in the mainPanel.

00:06:12.400 --> 00:06:15.834
Then we will create a text area,
set its height and width,

00:06:15.834 --> 00:06:17.234
and set its name to Email,

00:06:17.234 --> 00:06:21.601
and this is where that
e.parameter.email came from.

00:06:21.601 --> 00:06:24.767
Finally, we're going to
create a submitButton.

00:06:24.767 --> 00:06:26.467
We'll create
a server clickHandler

00:06:26.467 --> 00:06:29.934
that points to that sendEmail
function I just showed you.

00:06:29.934 --> 00:06:32.267
We will add the mainPanel
as a CallbackElement,

00:06:32.267 --> 00:06:34.667
and that lets us get
the content of the mainPanel

00:06:34.667 --> 00:06:36.234
in our handler.

00:06:36.234 --> 00:06:38.133
We'll add the handler
to the submitButton,

00:06:38.133 --> 00:06:40.968
add the submitButton
to the mainPanel,

00:06:40.968 --> 00:06:43.000
and we'll return the app
to render it,

00:06:43.000 --> 00:06:44.434
and that's pretty much it.

00:06:44.434 --> 00:06:46.367
And for those of you that were
at yesterday's talk,

00:06:46.367 --> 00:06:50.133
you'll know that we know have
this Apps Script GUI builder,

00:06:50.133 --> 00:06:51.734
and that's also usable here,

00:06:51.734 --> 00:06:53.200
but we wanted to
keep the code simple

00:06:53.200 --> 00:06:55.567
and make sure people knew
where things were coming from,

00:06:55.567 --> 00:06:57.901
so we went with code here.

00:06:57.901 --> 00:07:02.167
So let's see that in action.
This is our Acme Corp. website.

00:07:02.167 --> 00:07:05.467
We're going to create
a new Contact Us page,

00:07:05.467 --> 00:07:08.067
so that people can go there
to send us email,

00:07:08.067 --> 00:07:11.601
and this is just
standard Sites UI

00:07:11.601 --> 00:07:13.634
that you're probably
familiar with.

00:07:13.634 --> 00:07:14.834
So this is our
Contact Us page.

00:07:14.834 --> 00:07:16.334
It'll drop us
in the Edit view.

00:07:16.334 --> 00:07:18.501
We don't have our Gadget yet,
so we'll just save it.

00:07:18.501 --> 00:07:21.767
Now, if we go to More actions,
Manage site,

00:07:21.767 --> 00:07:23.634
which is at the bottom,

00:07:23.634 --> 00:07:26.767
we can see
that in our Admin pages,

00:07:26.767 --> 00:07:30.234
there's now this
Apps Script item.

00:07:30.234 --> 00:07:33.100
Going there shows us the scripts
that are already there.

00:07:33.100 --> 00:07:34.968
We'll launch the editor
and paste in the code

00:07:34.968 --> 00:07:37.901
I just showed you.

00:07:37.901 --> 00:07:40.033
And I think
that all looks right,

00:07:40.033 --> 00:07:42.100
so we're going to save it,

00:07:42.100 --> 00:07:47.634
and we will call it
Contact Owners.

00:07:47.634 --> 00:07:49.901
So okay, so that's it.

00:07:49.901 --> 00:07:51.934
So let's go back
to the site.

00:07:51.934 --> 00:07:54.434
And on this Admin page,
if we refresh it,

00:07:54.434 --> 00:07:58.234
you can see that the Contact
Owners is now available.

00:07:58.234 --> 00:08:01.033
So going back to our
Contact Us page,

00:08:01.033 --> 00:08:02.667
we can now edit that page

00:08:02.667 --> 00:08:06.234
and add that Gadget
we just created.

00:08:06.234 --> 00:08:10.000
From the Insert menu,
we'll go to Apps Script Gadget,

00:08:10.000 --> 00:08:12.767
and you see the Contact Owners
is now available.

00:08:12.767 --> 00:08:15.834
We'll select that, and we get
a properties dialog.

00:08:15.834 --> 00:08:17.267
Now, this is actually
important.

00:08:17.267 --> 00:08:21.200
Because we want to allow
anybody who views the site

00:08:21.200 --> 00:08:22.567
to be able to send email,

00:08:22.567 --> 00:08:25.033
we're going to allow anyone
to invoke this service.

00:08:25.033 --> 00:08:27.234
And you could have just
the members of your domain,

00:08:27.234 --> 00:08:30.367
or you even just yourself.

00:08:30.367 --> 00:08:31.667
At the bottom,
those are the standard

00:08:31.667 --> 00:08:34.167
Sites Gadget properties.

00:08:34.167 --> 00:08:37.200
We'll set it to Contact Us,
and save it.

00:08:37.200 --> 00:08:41.133
Once we save it, you'll see
that our form now renders.

00:08:41.133 --> 00:08:42.300
So it looks pretty good.

00:08:42.300 --> 00:08:44.701
The email is coming
from Evin@breakapps.

00:08:44.701 --> 00:08:46.734
Let's go ahead
and type a short message

00:08:46.734 --> 00:08:51.000
to see if this works.

00:08:51.000 --> 00:08:52.400
So we're typing.

00:08:52.400 --> 00:08:53.667
So it looks like--

00:08:53.667 --> 00:08:54.901
I don't know if you guys
are paying attention,

00:08:54.901 --> 00:08:56.901
but the front page
was actually all in Latin.

00:08:56.901 --> 00:08:58.667
So we don't know
how to read Latin.

00:08:58.667 --> 00:09:00.801
We're going to
ask for some help.

00:09:00.801 --> 00:09:03.300
So let's go ahead
and click Submit.

00:09:03.300 --> 00:09:05.000
And we click it
a few times.

00:09:05.000 --> 00:09:09.934
Nothing seems to really happen;
however, if we go to the Mail,

00:09:11.968 --> 00:09:14.167
we see that we actually
did get email,

00:09:14.167 --> 00:09:15.701
and we got it
multiple times.

00:09:15.701 --> 00:09:19.133
So it's sort of working.
So what happened there?

00:09:19.133 --> 00:09:22.667
The problem is that we didn't
give the user any feedback.

00:09:22.667 --> 00:09:24.133
And obviously
we need to tell them

00:09:24.133 --> 00:09:26.501
that we actually sent the email,
so that they know

00:09:26.501 --> 00:09:28.934
not to constantly
click that button.

00:09:28.934 --> 00:09:31.400
Here's that sendEmail function
I just showed you.

00:09:31.400 --> 00:09:32.901
The first two lines
are the same,

00:09:32.901 --> 00:09:37.167
but now we have this extra code
that will update the UI.

00:09:37.167 --> 00:09:40.033
We call
UiApp.getActiveApplication.

00:09:40.033 --> 00:09:43.868
We get the mainPanel by ID.
That's why we set it earlier.

00:09:43.868 --> 00:09:45.267
We'll set it to notVisible,

00:09:45.267 --> 00:09:47.767
so that the user can no longer
click on that button,

00:09:47.767 --> 00:09:49.434
and then we'll add
another label that says

00:09:49.434 --> 00:09:50.968
"Thanks for your feedback."

00:09:50.968 --> 00:09:54.100
Once we add that to the app,
we can return it to render it,

00:09:54.100 --> 00:09:57.033
and let's give it a shot.

00:09:57.033 --> 00:10:00.701
So we'll go back
to our Contact Us page.

00:10:00.701 --> 00:10:02.467
We type the same message,

00:10:02.467 --> 00:10:04.534
because we still
can't read Latin,

00:10:04.534 --> 00:10:08.100
and the site
is still in Latin.

00:10:08.100 --> 00:10:10.901
So this time
when we click Submit,

00:10:10.901 --> 00:10:13.467
we say, "Thank you
for your feedback."

00:10:13.467 --> 00:10:16.000
All right,
so that was pretty easy,

00:10:16.000 --> 00:10:17.868
things fairly basic
to the people

00:10:17.868 --> 00:10:19.934
who are familiar
with Apps Script.

00:10:19.934 --> 00:10:22.400
It should be
pretty familiar.

00:10:22.400 --> 00:10:24.534
So let's talk about
complex document approvals.

00:10:24.534 --> 00:10:28.834
Now, document approvals can get
really, really complicated,

00:10:28.834 --> 00:10:30.767
and we're going to start
with a simple example

00:10:30.767 --> 00:10:32.033
and move on from there.

00:10:32.033 --> 00:10:34.634
So in our simple document
approval workflow,

00:10:34.634 --> 00:10:35.934
there is essentially
three steps.

00:10:35.934 --> 00:10:37.334
In the first step,

00:10:37.334 --> 00:10:40.367
the requestor will submit
a doc for publication.

00:10:40.367 --> 00:10:42.868
In the second step,
the approver will review

00:10:42.868 --> 00:10:45.968
and hopefully
approve the document.

00:10:45.968 --> 00:10:47.634
And once the document
is approved,

00:10:47.634 --> 00:10:50.234
we can then publish that.

00:10:50.234 --> 00:10:52.234
And this is actually
really easy to build

00:10:52.234 --> 00:10:54.267
on top of Contact Owners.

00:10:54.267 --> 00:10:56.167
This is the form
that we just created.

00:10:56.167 --> 00:10:58.601
We're going to change the title
to write an article,

00:10:58.601 --> 00:11:01.467
change the button to
Submit for Publication,

00:11:01.467 --> 00:11:06.334
and the text area will just be
for the document itself.

00:11:06.334 --> 00:11:08.033
So here's what
that's going to look like.

00:11:08.033 --> 00:11:09.701
We've made the text area
a little bit bigger,

00:11:09.701 --> 00:11:11.701
so you can actually see
what you're typing;

00:11:11.701 --> 00:11:13.734
and when you click
Submit for Publication,

00:11:13.734 --> 00:11:16.934
that's just going to send
an email to the approver.

00:11:16.934 --> 00:11:18.267
But what does this mean?

00:11:18.267 --> 00:11:21.234
Well, it means that documents
now live in emails,

00:11:21.234 --> 00:11:23.801
and as we all know,
emails get deleted.

00:11:23.801 --> 00:11:25.534
They get overlooked.
They get forgotten.

00:11:25.534 --> 00:11:28.200
It's just not a very good
situation to be in.

00:11:28.200 --> 00:11:32.667
So what we really need is to
push this data to a Datastore.

00:11:32.667 --> 00:11:34.567
For simplicity, we're
going to use a spreadsheet

00:11:34.567 --> 00:11:36.334
in this example.

00:11:36.334 --> 00:11:38.868
Apps Script also supports
a JDBC connection,

00:11:38.868 --> 00:11:42.701
so you can push this data to
a real database, if you like.

00:11:42.701 --> 00:11:44.200
We're not going
to get into this here.

00:11:44.200 --> 00:11:46.000
The documentation
for that is all online,

00:11:46.000 --> 00:11:49.567
so you can review it,
if you're interested in that.

00:11:49.567 --> 00:11:52.868
So here's the approval flow
that I've shown you so far.

00:11:52.868 --> 00:11:55.467
In the first step,
the user goes to the site,

00:11:55.467 --> 00:11:58.167
either types or pastes
their document

00:11:58.167 --> 00:12:00.400
into the form
that we created.

00:12:00.400 --> 00:12:02.634
When they submit
that document,

00:12:02.634 --> 00:12:05.267
it will send an email
to the approver,

00:12:05.267 --> 00:12:09.334
and it will also send that
document to our spreadsheet.

00:12:09.334 --> 00:12:12.467
From the spreadsheet, we can
then publish that document

00:12:12.467 --> 00:12:16.400
either back to the same site
or to a new site.

00:12:16.400 --> 00:12:18.934
So here's a spreadsheet
that we think has the columns

00:12:18.934 --> 00:12:20.634
that are going to be relevant.

00:12:20.634 --> 00:12:22.734
You can see
that we have a column

00:12:22.734 --> 00:12:25.467
for who the document's from,
when it was submitted,

00:12:25.467 --> 00:12:29.100
when it should be published,
the title, the approver,

00:12:29.100 --> 00:12:33.501
the status, and the content
of the document itself.

00:12:33.501 --> 00:12:34.634
So how do we update that?

00:12:34.634 --> 00:12:37.000
So again, this is
the sendEmail function.

00:12:37.000 --> 00:12:38.801
The first two lines
are still the same,

00:12:38.801 --> 00:12:41.400
but this time we're also
going to post that data

00:12:41.400 --> 00:12:43.434
to a spreadsheet.

00:12:43.434 --> 00:12:47.501
In the first line, we will say
SpreadsheetApp.openById,

00:12:47.501 --> 00:12:49.834
and that ID is that funky
string of characters

00:12:49.834 --> 00:12:52.267
that you see
in the spreadsheet URL.

00:12:52.267 --> 00:12:53.634
We'll get the active sheet,

00:12:53.634 --> 00:12:56.601
because there's only one sheet
in the workbook.

00:12:56.601 --> 00:12:58.868
We will call
sheet.getRange,

00:12:58.868 --> 00:13:02.300
and we want to get the first
empty row in the sheet.

00:13:02.300 --> 00:13:04.734
So to do that,
we call sheet.getLastRow,

00:13:04.734 --> 00:13:08.067
which gets the last filled row,
and we add one to it.

00:13:08.067 --> 00:13:10.234
Once we have the range,
we can set the values

00:13:10.234 --> 00:13:12.467
that we're interested in,
which is the user's email,

00:13:12.467 --> 00:13:14.801
the date, the fact
that it's not been approved yet,

00:13:14.801 --> 00:13:16.667
and the body of the email,

00:13:16.667 --> 00:13:19.567
which is the content
of the document.

00:13:19.567 --> 00:13:21.167
So let's see that
in action.

00:13:21.167 --> 00:13:25.033
We've added this
Get Published page,

00:13:25.033 --> 00:13:27.801
where we've already added
our Gadget.

00:13:27.801 --> 00:13:30.300
We're going to start
typing our document.

00:13:30.300 --> 00:13:32.767
And in the interest of
keeping people awake,

00:13:32.767 --> 00:13:35.267
we're going to actually paste
that document in.

00:13:35.267 --> 00:13:37.734
From there, we can actually
just go down to the bottom

00:13:37.734 --> 00:13:41.033
and submit it
for publication.

00:13:41.033 --> 00:13:43.200
So this time,
we actually get feedback,

00:13:43.200 --> 00:13:44.501
so that's good.

00:13:44.501 --> 00:13:46.868
And if we go to
our approvals spreadsheet,

00:13:46.868 --> 00:13:48.968
we see that our document
is now here.

00:13:48.968 --> 00:13:50.367
Its status is Unapproved,

00:13:50.367 --> 00:13:54.467
and the content
is in that column.

00:13:54.467 --> 00:13:57.968
So great.
That looks good.

00:13:57.968 --> 00:13:59.501
Now, from that spreadsheet,

00:13:59.501 --> 00:14:02.367
how do we publish that
back out to a site?

00:14:02.367 --> 00:14:05.934
This is our publishRow function.
So it takes one parameter.

00:14:05.934 --> 00:14:09.567
The (r) variable is going
to be the index of the row

00:14:09.567 --> 00:14:11.367
that you want published.

00:14:11.367 --> 00:14:16.067
So in the first line, again,
we get the sheet by ID.

00:14:16.067 --> 00:14:17.767
We will grab the range,

00:14:17.767 --> 00:14:19.868
and that's the range
that we're interested in.

00:14:19.868 --> 00:14:22.234
We call getValues to get
the values of that range

00:14:22.234 --> 00:14:25.200
as a two-dimensional array,
and then we get the site

00:14:25.200 --> 00:14:27.033
that we want to publish to:

00:14:27.033 --> 00:14:30.167
SitesApp.getSite domain
and name.

00:14:30.167 --> 00:14:32.734
Once we have the site object,
we can call createWebPage

00:14:32.734 --> 00:14:38.167
with the title and the body
values from the array,

00:14:38.167 --> 00:14:41.767
and that will actually go ahead
and create a web page directly.

00:14:41.767 --> 00:14:44.267
If we wanted, we could use
an announcements page

00:14:44.267 --> 00:14:45.868
or an announcements post here.

00:14:45.868 --> 00:14:47.734
We're going to keep things
simple

00:14:47.734 --> 00:14:49.868
and create just a web page.

00:14:49.868 --> 00:14:51.767
From there,
we're actually done.

00:14:51.767 --> 00:14:54.100
We've already
published the document,

00:14:54.100 --> 00:14:55.834
but we want to do
a few cleanup tasks,

00:14:55.834 --> 00:14:58.567
so we will send an email
to the author saying,

00:14:58.567 --> 00:15:00.734
"The post is live.
Here's the URL."

00:15:00.734 --> 00:15:05.834
And we can update the Sheets
Status column to be published.

00:15:05.834 --> 00:15:07.534
Let's try that out.

00:15:07.534 --> 00:15:08.701
We're going to
set a title here,

00:15:08.701 --> 00:15:11.767
because we didn't
do that earlier,

00:15:11.767 --> 00:15:15.300
and this time
we'll go the site.

00:15:15.300 --> 00:15:16.767
And we don't have
a Gadget this time,

00:15:16.767 --> 00:15:18.834
so we're just going to
test that function

00:15:18.834 --> 00:15:20.934
from the editor directly.

00:15:20.934 --> 00:15:22.701
We're going to go
to Apps Script,

00:15:22.701 --> 00:15:25.834
and you see that we have
our Publishing workflow script.

00:15:25.834 --> 00:15:28.000
This is the publishRow function
I just showed you,

00:15:28.000 --> 00:15:31.133
and there's this test function
here that calls publishRow

00:15:31.133 --> 00:15:33.801
just on row 2
of this spreadsheet.

00:15:33.801 --> 00:15:36.934
When we run that, it looks like
there were no errors.

00:15:36.934 --> 00:15:39.100
Something red would've popped up
if there were.

00:15:39.100 --> 00:15:41.400
And if we go back to our site,
you see that there's now

00:15:41.400 --> 00:15:44.868
a Lorem Ipsum page
in the site.

00:15:44.868 --> 00:15:47.534
So that has all the content
that we're interested in.

00:15:47.534 --> 00:15:49.367
If we go to our email,

00:15:49.367 --> 00:15:52.133
we see that we got
the Article published email.

00:15:52.133 --> 00:15:54.100
Clicking on the link
will obviously bring us

00:15:54.100 --> 00:15:56.567
back to that page.

00:15:56.567 --> 00:15:59.300
Okay, so that was
pretty cool.

00:15:59.300 --> 00:16:00.634
So the user
went to the site,

00:16:00.634 --> 00:16:03.267
submitted their document
for publication.

00:16:03.267 --> 00:16:05.267
We sent an email
to the approver.

00:16:05.267 --> 00:16:08.734
We saved it in the spreadsheet,
and from the spreadsheet,

00:16:08.734 --> 00:16:10.400
we've published it
to the site.

00:16:10.400 --> 00:16:11.868
Now, for those of you
that are paying attention,

00:16:11.868 --> 00:16:13.400
you might've noticed
there we're missing

00:16:13.400 --> 00:16:15.701
a kind of critical part
of this workflow, right?

00:16:15.701 --> 00:16:18.267
In all the approval flows
that I've worked with,

00:16:18.267 --> 00:16:21.100
there's usually
an actual approval Step.

00:16:21.100 --> 00:16:22.367
The problem is

00:16:22.367 --> 00:16:25.434
that there's a whole lot
of ways to do approvals,

00:16:25.434 --> 00:16:27.701
and so I'm going to
hand it over now to Evin

00:16:27.701 --> 00:16:30.133
to talk to you about
all the different ways

00:16:30.133 --> 00:16:34.601
you can complete this workflow.

00:16:34.601 --> 00:16:36.067
Levey:
Thanks, Eric.

00:16:36.067 --> 00:16:38.100
So as Eric said, we're
going to focus a little bit

00:16:38.100 --> 00:16:41.400
on the approval Step,
and there's quite a few

00:16:41.400 --> 00:16:43.534
different ways
that we can do this.

00:16:43.534 --> 00:16:46.701
The document is now safely
into our spreadsheet,

00:16:46.701 --> 00:16:48.367
so we're not too worried
about the email.

00:16:48.367 --> 00:16:50.701
The approver knows
about the email

00:16:50.701 --> 00:16:52.634
and can head back
to the control panel.

00:16:52.634 --> 00:16:54.634
So let's look
at using that spreadsheet

00:16:54.634 --> 00:16:59.367
as a Control Panel for
this whole publishing process.

00:16:59.367 --> 00:17:01.434
We can write a simple
publish function

00:17:01.434 --> 00:17:04.167
that will simply get the active
row of the spreadsheet,

00:17:04.167 --> 00:17:07.367
the row that the publisher
is looking at,

00:17:07.367 --> 00:17:11.267
and then invoke Eric's
publishRow function.

00:17:11.267 --> 00:17:12.634
What we really want, though,

00:17:12.634 --> 00:17:14.934
is not to have to run that
from the script editor,

00:17:14.934 --> 00:17:16.300
but perhaps to be able
to run it

00:17:16.300 --> 00:17:19.801
from a spreadsheet menu
or something convenient.

00:17:19.801 --> 00:17:21.801
So we can add
an unopened function;

00:17:21.801 --> 00:17:23.000
and this, like doGet,

00:17:23.000 --> 00:17:24.601
is another one of those
special functions

00:17:24.601 --> 00:17:26.934
inside App Script
that has a special meaning.

00:17:26.934 --> 00:17:29.501
And any time a spreadsheet
document is opened,

00:17:29.501 --> 00:17:31.501
we automatically run
this function.

00:17:31.501 --> 00:17:34.000
So in here, we're just going
to add a little bit of code

00:17:34.000 --> 00:17:37.133
that adds an approval menu
onto our control sheet.

00:17:37.133 --> 00:17:40.200
So let's see that
in action.

00:17:40.200 --> 00:17:43.834
We've got a second article
in here about gravity probe B.

00:17:43.834 --> 00:17:47.667
We can go to our script editor
inside the spreadsheet this time

00:17:47.667 --> 00:17:49.334
and paste in all the code
we've shown you,

00:17:49.334 --> 00:17:55.067
including Eric's
publishRow function.

00:17:55.067 --> 00:17:58.067
We'll save that, and now
what we're going to do

00:17:58.067 --> 00:18:02.501
is reload the spreadsheet
to simulate an unopened event

00:18:02.501 --> 00:18:07.200
happening, and you'll see
that a new menu pops up,

00:18:07.200 --> 00:18:08.701
a Publish menu.

00:18:08.701 --> 00:18:14.701
So we'll select a row,
and we'll click Approve.

00:18:14.701 --> 00:18:17.367
You see the script is running
in the background,

00:18:17.367 --> 00:18:19.734
and the status updated
to Published.

00:18:19.734 --> 00:18:23.300
And now when we go back to
our Sites page and refresh that,

00:18:23.300 --> 00:18:24.934
you see now
we have a new article

00:18:24.934 --> 00:18:28.434
listed in the left hand panel.
Okay.

00:18:28.434 --> 00:18:30.634
And, obviously, it's
the same publishRow function

00:18:30.634 --> 00:18:31.968
that Eric showed us,

00:18:31.968 --> 00:18:34.701
so that the author will get
an email telling them

00:18:34.701 --> 00:18:37.434
that their article went out.

00:18:37.434 --> 00:18:38.467
So it's all well and good.

00:18:38.467 --> 00:18:39.667
But going to a spreadsheet

00:18:39.667 --> 00:18:40.968
every time you need
to approve something

00:18:40.968 --> 00:18:42.334
is a little bit cumbersome,

00:18:42.334 --> 00:18:44.434
so let's talk about
approving from email,

00:18:44.434 --> 00:18:45.767
which is maybe
a little bit nicer,

00:18:45.767 --> 00:18:47.234
a little bit slicker.

00:18:47.234 --> 00:18:50.467
It's far more efficient
for the approver.

00:18:50.467 --> 00:18:52.801
And what we're going to do
is send a message

00:18:52.801 --> 00:18:55.100
with an embedded HTML form.

00:18:55.100 --> 00:18:58.367
The process just becomes
a one-click.

00:18:58.367 --> 00:18:59.968
So we're going to have
a little digression here

00:18:59.968 --> 00:19:01.601
and talk a bit
about HTML forms.

00:19:01.601 --> 00:19:03.334
How many folks
are really comfortable

00:19:03.334 --> 00:19:07.334
and familiar
with HTML forms?

00:19:07.334 --> 00:19:08.901
Okay, so maybe only 50%,

00:19:08.901 --> 00:19:12.367
so this is probably
a good digression.

00:19:12.367 --> 00:19:14.167
Any time you log
into a website,

00:19:14.167 --> 00:19:16.601
chances are you're using
an HTML form.

00:19:16.601 --> 00:19:18.367
You put in your user name
and your password,

00:19:18.367 --> 00:19:21.067
and you hit a Submit button.

00:19:21.067 --> 00:19:24.968
And here's the actual HTML code
that you'd use to do that.

00:19:24.968 --> 00:19:27.167
You see the first line
defines it

00:19:27.167 --> 00:19:29.200
as a form with
a particular action.

00:19:29.200 --> 00:19:32.300
I've truncated the URL there,
and the details from the form

00:19:32.300 --> 00:19:35.467
are going to be posted back,
so it's a post method.

00:19:35.467 --> 00:19:37.734
And we ask
for the user name,

00:19:37.734 --> 00:19:41.300
and then we have
this input type field,

00:19:41.300 --> 00:19:44.934
and the first one is a text
field called user name

00:19:44.934 --> 00:19:48.000
and then, the second one
is a password field,

00:19:48.000 --> 00:19:49.834
which means that we don't
display the content,

00:19:49.834 --> 00:19:51.634
and it's called password.

00:19:51.634 --> 00:19:54.567
And then the third input type
is actually a submit,

00:19:54.567 --> 00:19:56.067
and that's the action.

00:19:56.067 --> 00:20:00.267
And in this case,
it's called submit too.

00:20:00.267 --> 00:20:03.667
So we can mimic this
inside Script,

00:20:03.667 --> 00:20:06.434
and we're going to write
a little test function

00:20:06.434 --> 00:20:08.434
called sendEmail,

00:20:08.434 --> 00:20:11.334
and we're going to set
a variable called HTML

00:20:11.334 --> 00:20:13.501
to be a form,

00:20:13.501 --> 00:20:15.834
and then we're going to send
that variable

00:20:15.834 --> 00:20:21.767
as a payload in an email
and basically see what happens.

00:20:26.467 --> 00:20:28.467
Okay.
So that's my little form.

00:20:28.467 --> 00:20:30.234
It asks a question.

00:20:30.234 --> 00:20:32.534
"What is the name
of the Lone Ranger's horse?"

00:20:32.534 --> 00:20:34.667
It gives me an input box
to fill in the answer,

00:20:34.667 --> 00:20:38.534
and it takes a Submit button
to do an action.

00:20:38.534 --> 00:20:43.234
So next, we want to figure out
how we capture that action.

00:20:43.234 --> 00:20:45.834
So if we look back at
the original example

00:20:45.834 --> 00:20:48.067
of the login page,

00:20:48.067 --> 00:20:50.501
you'll see that first line
is the critical line,

00:20:50.501 --> 00:20:55.100
and it's going to tell
the email client, in fact,

00:20:55.100 --> 00:20:57.601
what to do with the content
that's entered in the form,

00:20:57.601 --> 00:21:00.033
once this Submit action
is chosen.

00:21:00.033 --> 00:21:03.968
And so we're going to have
to publish something at a URL

00:21:03.968 --> 00:21:08.033
to receive that feedback.

00:21:08.033 --> 00:21:10.934
So we've talked about unopened,
and we've talked about doGet.

00:21:10.934 --> 00:21:12.501
Now, we're going to talk
about doPost.

00:21:12.501 --> 00:21:14.200
It's another
magic function.

00:21:14.200 --> 00:21:18.434
And when we have a post
back to Apps Script,

00:21:18.434 --> 00:21:21.067
it's going to ask this function
to handle the payload,

00:21:21.067 --> 00:21:23.033
which is (e), the event.

00:21:23.033 --> 00:21:25.100
So you can see
in my example here,

00:21:25.100 --> 00:21:27.567
I'm going to create
a little UI application.

00:21:27.567 --> 00:21:29.834
I'm going to add a panel,
and into that panel,

00:21:29.834 --> 00:21:32.234
I'm going to put a label
for every parameter

00:21:32.234 --> 00:21:35.133
that was passed to me.
Okay?

00:21:35.133 --> 00:21:37.400
So I don't know what's
going to come in the post.

00:21:37.400 --> 00:21:40.434
Anybody can post anything
to this handler.

00:21:40.434 --> 00:21:44.133
So let's see where
we go with this.

00:21:44.133 --> 00:21:46.267
Eric showed you earlier
how to publish into a site.

00:21:46.267 --> 00:21:48.567
This is very similar.
You can publish as a service,

00:21:48.567 --> 00:21:51.100
and then you get back
a URL to use.

00:21:51.100 --> 00:21:52.634
So let's watch
that in action.

00:21:52.634 --> 00:21:56.834
I've added my doPost code
into my script.

00:21:56.834 --> 00:21:58.734
You can see it all there.

00:21:58.734 --> 00:22:01.601
I'm going to go to Share
and Publish as Service.

00:22:01.601 --> 00:22:03.667
And I get the same three
familiar options:

00:22:03.667 --> 00:22:07.801
allow only me, only members
of my domain or organization,

00:22:07.801 --> 00:22:11.133
or anybody at all
to invoke the service.

00:22:11.133 --> 00:22:15.133
And that's the critical URL.
That's now live on the web.

00:22:15.133 --> 00:22:18.567
And what I want to do is
go back to my email payload

00:22:18.567 --> 00:22:21.801
and use that action,
and in the payload,

00:22:21.801 --> 00:22:27.567
so that the email client
knows where to send the click.

00:22:27.567 --> 00:22:28.767
It's a little bit convoluted,

00:22:28.767 --> 00:22:31.167
but I hope everybody
is following along.

00:22:31.167 --> 00:22:36.434
Now, when I send it, my email
comes down to the email client.

00:22:36.434 --> 00:22:38.200
I get the question.

00:22:38.200 --> 00:22:41.267
I fill in the answer.

00:22:41.267 --> 00:22:42.734
And this time,
when I hit Submit,

00:22:42.734 --> 00:22:45.000
we actually are going to post
all the content of the form

00:22:45.000 --> 00:22:49.734
back to our script.

00:22:49.734 --> 00:22:51.434
Our script is going to
handle the payload

00:22:51.434 --> 00:22:52.834
and print it out
on the screen

00:22:52.834 --> 00:22:55.467
with a little UI app,
very, very basic.

00:22:55.467 --> 00:22:58.033
It's going to give us
the service that's been invoked,

00:22:58.033 --> 00:23:00.100
which is actually
the ID of the URL,

00:23:00.100 --> 00:23:01.467
and it gives me
back the answer,

00:23:01.467 --> 00:23:02.934
and that's the really
important part.

00:23:02.934 --> 00:23:04.767
So that field
that I named answer,

00:23:04.767 --> 00:23:07.601
that was a text box,
is now coming back to my server,

00:23:07.601 --> 00:23:10.067
back to my script.

00:23:10.067 --> 00:23:11.968
So to approve from an email,

00:23:11.968 --> 00:23:14.801
we're going to use
that HTML form capability.

00:23:14.801 --> 00:23:17.367
We're going to embed the article
and the approval button

00:23:17.367 --> 00:23:18.601
into the email.

00:23:18.601 --> 00:23:20.567
That's actually
not sufficient.

00:23:20.567 --> 00:23:22.334
We also need a hidden field
that tells us

00:23:22.334 --> 00:23:25.968
which row of the spreadsheet
we're going to approve.

00:23:25.968 --> 00:23:27.467
And then lastly,
we want to ensure

00:23:27.467 --> 00:23:31.234
that our doPost is checking
which user is posting.

00:23:31.234 --> 00:23:34.400
We don't want to let just any
user run the approval function.

00:23:34.400 --> 00:23:36.934
We might find
we're under attack.

00:23:36.934 --> 00:23:40.367
So our approval flow
that Eric showed us

00:23:40.367 --> 00:23:44.767
then becomes an author,
goes to a site,

00:23:44.767 --> 00:23:47.200
submits an article
for publication.

00:23:47.200 --> 00:23:49.767
It gets written to our
spreadsheet Datastore,

00:23:49.767 --> 00:23:52.968
and it gets emailed
out to the approver,

00:23:52.968 --> 00:23:54.501
and then the approver
in the email

00:23:54.501 --> 00:23:56.133
can just click a button
to approve,

00:23:56.133 --> 00:24:00.934
and it'll get posted back
to the site for publication.

00:24:00.934 --> 00:24:03.868
So let's look at the first
part of that, the request.

00:24:03.868 --> 00:24:06.567
This is almost identical
to before.

00:24:06.567 --> 00:24:10.100
We send the body of the email
out in the message,

00:24:10.100 --> 00:24:12.934
but we also include
a little HTML form,

00:24:12.934 --> 00:24:15.234
and it's exactly
as I mentioned before,

00:24:15.234 --> 00:24:18.367
a form action that's going to
point back to our script server,

00:24:18.367 --> 00:24:20.968
a hidden value called row
that's going to reference

00:24:20.968 --> 00:24:23.167
the spreadsheet row,
and then a submit button

00:24:23.167 --> 00:24:26.033
that we're going to call
Approve, in this case,

00:24:26.033 --> 00:24:31.968
and then we send it.
So let's see that happening.

00:24:35.234 --> 00:24:37.033
We're going to write yet
another article to send,

00:24:37.033 --> 00:24:40.334
maybe Google I/O,
an appropriate topic.

00:24:40.334 --> 00:24:43.968
And when we submit that,

00:24:43.968 --> 00:24:48.601
you'll see when we go
to the email,

00:24:48.601 --> 00:24:49.901
it goes into
the spreadsheet,

00:24:49.901 --> 00:24:51.200
and then when we go
to the email,

00:24:51.200 --> 00:24:55.667
you'll see that we get
the full article,

00:24:55.667 --> 00:24:58.334
along with the Approve button.

00:24:58.334 --> 00:25:02.767
So now we just need to wire up
the Approve button.

00:25:02.767 --> 00:25:04.601
We have a simple doPost,
and now this time,

00:25:04.601 --> 00:25:06.334
instead of throwing up
the content

00:25:06.334 --> 00:25:08.968
that was posted onto the screen
for the approver,

00:25:08.968 --> 00:25:12.501
we're going to call Eric's
very, very simple publishRow,

00:25:12.501 --> 00:25:15.033
and invoke
that part of the workflow,

00:25:15.033 --> 00:25:16.868
and we're also going to
let the user know,

00:25:16.868 --> 00:25:20.567
the approving user,
know that it worked.

00:25:20.567 --> 00:25:26.501
So we click Approve--

00:25:28.801 --> 00:25:30.834
and we have a very simple
acknowledgment page

00:25:30.834 --> 00:25:32.234
that just says Published.

00:25:32.234 --> 00:25:34.133
You could obviously make this
as fancy as you like,

00:25:34.133 --> 00:25:35.467
but then when we go back
to the site,

00:25:35.467 --> 00:25:37.801
we now have an article
about Google I/O.

00:25:37.801 --> 00:25:38.968
All right.

00:25:38.968 --> 00:25:40.501
So this is all getting
a little bit better.

00:25:40.501 --> 00:25:42.734
One thing, though,
that I didn't talk about yet

00:25:42.734 --> 00:25:44.834
is the security of this.

00:25:44.834 --> 00:25:46.901
How do we know
who clicked the Approve button?

00:25:46.901 --> 00:25:48.400
And this is
obviously critical.

00:25:48.400 --> 00:25:50.968
What happens if the approver
accidentally forwarded the email

00:25:50.968 --> 00:25:52.367
to somebody else?

00:25:52.367 --> 00:25:55.300
Could they just click this
button, and would it work?

00:25:55.300 --> 00:25:56.934
Well, we showed you
that the service itself

00:25:56.934 --> 00:26:00.734
is restricted to the domain
or organization,

00:26:00.734 --> 00:26:03.834
but we really need
a user level check.

00:26:03.834 --> 00:26:08.133
So inside our doPost function,
let's--

00:26:08.133 --> 00:26:11.200
this is a good example
of what we could do.

00:26:11.200 --> 00:26:13.601
We could set the message
to be "Access Denied!"

00:26:13.601 --> 00:26:18.334
and then only if the active user
is the approving user

00:26:18.334 --> 00:26:20.667
would we actually call
the publish function

00:26:20.667 --> 00:26:22.968
and update the message
to be published;

00:26:22.968 --> 00:26:25.200
otherwise, we'd just
throw up whatever message

00:26:25.200 --> 00:26:27.100
we have on the screen
for the approver,

00:26:27.100 --> 00:26:29.267
be it "Access Denied!"
or published.

00:26:29.267 --> 00:26:32.400
Now, obviously, we're not
advocating hard coding approvers

00:26:32.400 --> 00:26:34.934
into your script,
but for clarity,

00:26:34.934 --> 00:26:36.467
this is the easiest way
to show it.

00:26:36.467 --> 00:26:39.267
We'll talk a little bit
later on about roles

00:26:39.267 --> 00:26:43.467
and how we can handle
that more gracefully.

00:26:43.467 --> 00:26:46.000
So to get a little deeper
into the security model--

00:26:46.000 --> 00:26:49.000
and there's two user concepts
inside Apps Script,

00:26:49.000 --> 00:26:51.267
when it's used as a service.

00:26:51.267 --> 00:26:53.634
There's the Effective User,
and that's the account

00:26:53.634 --> 00:26:57.467
running the script
and the publisher, in this case.

00:26:57.467 --> 00:26:59.367
And there's an Active User,
and that's the user

00:26:59.367 --> 00:27:03.200
whose fingers are
at the keyboard.

00:27:03.200 --> 00:27:05.701
Script can only figure out
who the Active User is

00:27:05.701 --> 00:27:07.200
in special cases.

00:27:07.200 --> 00:27:09.367
Obviously, we don't want these
public on the Internet,

00:27:09.367 --> 00:27:13.100
and publishers then scraping
identities of all kinds of users

00:27:13.100 --> 00:27:15.100
who happen to visit a page.

00:27:15.100 --> 00:27:18.133
So it's only when both users
are part of the same domain

00:27:18.133 --> 00:27:21.467
or organization we let you
identify the user,

00:27:21.467 --> 00:27:24.567
and the domain must not be
a special domain.

00:27:24.567 --> 00:27:27.334
We don't allow this
in partner or edu domains,

00:27:27.334 --> 00:27:29.667
so it's mostly
Google Apps Premier,

00:27:29.667 --> 00:27:33.033
Google Apps Standard.

00:27:33.033 --> 00:27:35.968
So that was
document approval.

00:27:35.968 --> 00:27:38.868
That was the entire workflow,
end-to-end.

00:27:38.868 --> 00:27:41.200
This next section of the talk
is a little bit different.

00:27:41.200 --> 00:27:43.400
We're going to go into
pretty advanced topics.

00:27:43.400 --> 00:27:45.434
I know this is
a 101 level course.

00:27:45.434 --> 00:27:47.934
We're not going to go through
detailed work examples.

00:27:47.934 --> 00:27:49.934
We're going to talk more about
theoretical ways

00:27:49.934 --> 00:27:53.467
that you can manage the
complexity and add a few more--

00:27:53.467 --> 00:27:55.868
I won't say bells and whistles,
because that kind of implies

00:27:55.868 --> 00:27:56.934
they're unnecessary--

00:27:56.934 --> 00:27:59.968
but a few more
little advanced tweaks

00:27:59.968 --> 00:28:03.400
to your workflow
to make them more usable.

00:28:03.400 --> 00:28:06.601
The first thing,
multiple approvers.

00:28:06.601 --> 00:28:10.100
The real value of a workflow
is to codify a complex process.

00:28:10.100 --> 00:28:11.868
Our process is
ridiculously simple.

00:28:11.868 --> 00:28:13.601
It's just one
marketing person

00:28:13.601 --> 00:28:16.000
approving a post
to a sites page.

00:28:16.000 --> 00:28:17.567
We generally need
more than marketing.

00:28:17.567 --> 00:28:20.501
We probably need legal, and PR,
and managerial approvals.

00:28:20.501 --> 00:28:24.200
And big companies, probably
an awful lot of people involved.

00:28:24.200 --> 00:28:27.000
So how do we handle
this explosion of complexity?

00:28:27.000 --> 00:28:29.434
And that's really what this
section of the talk is about.

00:28:29.434 --> 00:28:30.901
So what we want to do
is introduce

00:28:30.901 --> 00:28:34.167
a better representation
for this state of the approval

00:28:34.167 --> 00:28:37.033
at any point in time.

00:28:37.033 --> 00:28:40.200
I'm going to use a simple
diagram to illustrate this.

00:28:40.200 --> 00:28:44.033
The original workflow
was a submit by anybody

00:28:44.033 --> 00:28:45.701
that would go to
our marketing person,

00:28:45.701 --> 00:28:48.634
who could then approve an email
or in the spreadsheet.

00:28:48.634 --> 00:28:51.934
But, realistically, it would
then go, once approved,

00:28:51.934 --> 00:28:54.467
to the PR person,
and then maybe to legal,

00:28:54.467 --> 00:28:55.868
and then to the manager,

00:28:55.868 --> 00:28:58.133
and then get published,
if we're lucky.

00:28:58.133 --> 00:29:00.234
And more often than not,
something's going to go wrong,

00:29:00.234 --> 00:29:02.934
and you're going to get rejected
and go back to step one.

00:29:02.934 --> 00:29:05.200
To get even more realistic,

00:29:05.200 --> 00:29:08.801
it would get submitted to PR
and marketing at the same time.

00:29:08.801 --> 00:29:10.767
And then only when
it's approved by both,

00:29:10.767 --> 00:29:12.868
a kind of
a synchronization point,

00:29:12.868 --> 00:29:15.334
then it might go to legal,
and then to the manager,

00:29:15.334 --> 00:29:16.667
and then to publish.

00:29:16.667 --> 00:29:18.734
And these are still
probably very basic examples,

00:29:18.734 --> 00:29:21.868
compared to what most of you
deal with day-to-day,

00:29:21.868 --> 00:29:24.167
but even at this level, we're
not going to include rejection,

00:29:24.167 --> 00:29:28.167
because it's just getting
too difficult to draw.

00:29:28.167 --> 00:29:33.000
So let's model this
inside our process.

00:29:33.000 --> 00:29:35.367
This process
is a sequence of steps.

00:29:35.367 --> 00:29:38.133
There's always
one approver per step,

00:29:38.133 --> 00:29:40.934
and in the first step, there are
actually multiple approvers.

00:29:40.934 --> 00:29:45.534
The approval state is going to
be maintained inside the Step,

00:29:45.534 --> 00:29:48.067
and I'm using Step
with a capital "S" here,

00:29:48.067 --> 00:29:51.701
because it's an object type that
we'll talk about in a moment.

00:29:51.701 --> 00:29:53.801
We're going to use
a JavaScript object

00:29:53.801 --> 00:29:55.367
to represent that Step,

00:29:55.367 --> 00:29:58.267
and then our process
is simply an array of Steps.

00:29:58.267 --> 00:30:01.934
Now, I've given you
a sequential process.

00:30:01.934 --> 00:30:05.033
There's definitely
more advanced things we can do,

00:30:05.033 --> 00:30:08.467
maybe in a 201-level course
some other time.

00:30:08.467 --> 00:30:09.767
So just think
about it that way.

00:30:09.767 --> 00:30:13.901
It's sequential,
and so it's an array.

00:30:13.901 --> 00:30:15.934
So we're going
to create a Step.

00:30:15.934 --> 00:30:19.667
It's going to take a list
of approvers for the Step.

00:30:19.667 --> 00:30:21.567
We're going to create
a JavaScript object

00:30:21.567 --> 00:30:23.234
in the first row.

00:30:23.234 --> 00:30:25.934
We're going to set the number
of approvers in the Step

00:30:25.934 --> 00:30:29.334
to be the number of elements
passed in, in our array.

00:30:29.334 --> 00:30:32.534
We're going to copy
that array.

00:30:32.534 --> 00:30:34.701
Just a little quirk
of JavaScript,

00:30:34.701 --> 00:30:36.033
that we don't want to reference
to an array.

00:30:36.033 --> 00:30:37.334
We want an actual copy,

00:30:37.334 --> 00:30:39.934
so we'll use
the shorthand approver's slice.

00:30:39.934 --> 00:30:41.167
And then we're
going to set the status

00:30:41.167 --> 00:30:45.968
for the overall Step
to be pending. Okay?

00:30:45.968 --> 00:30:48.167
Then we're going to iterate
through all the approvers

00:30:48.167 --> 00:30:51.033
that we've been given
and put a field into this object

00:30:51.033 --> 00:30:55.467
for each approver, indicating
that approver's specific status.

00:30:55.467 --> 00:30:59.701
So on the right hand side,
if you're familiar with JSON,

00:30:59.701 --> 00:31:03.501
you'll see that if I create Step
with Evin and Bob,

00:31:03.501 --> 00:31:05.467
then I get the object beneath.

00:31:05.467 --> 00:31:06.634
Status is set to pending.

00:31:06.634 --> 00:31:07.968
Two approvers.

00:31:07.968 --> 00:31:11.567
The approvers are Evin or Bob--
Evin and Bob--excuse me.

00:31:11.567 --> 00:31:16.834
And then both Evin and Bob have
their status set to pending.

00:31:16.834 --> 00:31:18.634
All right,
so pretty straightforward.

00:31:18.634 --> 00:31:20.100
Then we're going
to create the process,

00:31:20.100 --> 00:31:22.400
and we've got the little diagram
of the example process

00:31:22.400 --> 00:31:23.767
in the top right,

00:31:23.767 --> 00:31:26.868
and it's going to be an array,
as we mentioned,

00:31:26.868 --> 00:31:31.234
so that the first Step in
the array is marketing and PR.

00:31:31.234 --> 00:31:34.868
So we just simply push back
that newly-created Step

00:31:34.868 --> 00:31:36.000
onto the array.

00:31:36.000 --> 00:31:37.534
The second Step is legal.

00:31:37.534 --> 00:31:39.868
The third Step is the manager,

00:31:39.868 --> 00:31:41.701
and then we return
the process object.

00:31:41.701 --> 00:31:46.100
So it's just a slightly
more complex JSONObject.

00:31:46.100 --> 00:31:47.834
So now we've got
a state representation

00:31:47.834 --> 00:31:50.634
for each Step
and for the entire process,

00:31:50.634 --> 00:31:53.667
and we want to be able
to load and save that at will.

00:31:53.667 --> 00:31:55.934
So saving the process,
I'm going to show you saving

00:31:55.934 --> 00:31:58.400
that to a spreadsheet,
because it's very easy to see.

00:31:58.400 --> 00:31:59.868
But as Eric said,

00:31:59.868 --> 00:32:04.067
you could use that ideally
in some kind of SQL database.

00:32:04.067 --> 00:32:07.434
So I'm going to have a function
that can save my process

00:32:07.434 --> 00:32:10.667
to a particular row
inside a sheet.

00:32:10.667 --> 00:32:14.567
So I pulled back a status cell
to put this into,

00:32:14.567 --> 00:32:17.234
and then I set the value
of that cell

00:32:17.234 --> 00:32:20.467
to the JSON stringify
of the process.

00:32:20.467 --> 00:32:22.067
Now, if you're not really
familiar with JavaScript,

00:32:22.067 --> 00:32:24.167
this isn't that
much magic at all.

00:32:24.167 --> 00:32:27.434
It just serializes
that JavaScript process

00:32:27.434 --> 00:32:29.434
into something that's
actually human readable.

00:32:29.434 --> 00:32:31.567
We'll see that
in a moment.

00:32:31.567 --> 00:32:34.200
To load, I just want
to do the exact reverse.

00:32:34.200 --> 00:32:39.133
Given a sheet and a row,
I want to pull back that cell

00:32:39.133 --> 00:32:42.200
and then turn it back into
a real live JavaScript array

00:32:42.200 --> 00:32:46.000
and sub objects,
and all I do is call eval

00:32:46.000 --> 00:32:47.300
on the text I get back.

00:32:47.300 --> 00:32:49.033
So let's see that working.

00:32:49.033 --> 00:32:55.033
It's far easier when you see it
than when I try and explain it.

00:32:55.033 --> 00:32:59.100
So we're going to
run our example,

00:32:59.100 --> 00:33:02.434
and you'll see that it's very,
very straightforward.

00:33:02.434 --> 00:33:04.634
We now have an array of Steps

00:33:04.634 --> 00:33:07.901
that's been saved
to the status row.

00:33:07.901 --> 00:33:09.067
And as we update that,

00:33:09.067 --> 00:33:12.400
we can load it
and save it trivially.

00:33:12.400 --> 00:33:15.534
Okay, so now we've got a handle
on how to manage the state.

00:33:15.534 --> 00:33:17.667
The algorithm breaks down
to be something

00:33:17.667 --> 00:33:19.801
very, very straightforward.

00:33:19.801 --> 00:33:22.701
When we get something submitted
into our workflow,

00:33:22.701 --> 00:33:26.234
we create an appropriate
approval process. Okay?

00:33:26.234 --> 00:33:28.200
We write it back
to our Datastore,

00:33:28.200 --> 00:33:29.934
and then we start
the first step,

00:33:29.934 --> 00:33:33.300
and we do that by, in our case,
emailing the approvers.

00:33:33.300 --> 00:33:35.000
You can just
grab the first step,

00:33:35.000 --> 00:33:36.300
iterate through the approvers,

00:33:36.300 --> 00:33:38.367
and send each of them
an email.

00:33:38.367 --> 00:33:40.100
Then when we get
an approval event,

00:33:40.100 --> 00:33:42.200
because somebody has clicked
the approval button or approved

00:33:42.200 --> 00:33:45.534
in some other manner,
our script is going to wake up.

00:33:45.534 --> 00:33:47.634
It's going to go back
and get the active Step

00:33:47.634 --> 00:33:50.834
from our Datastore
and update the status.

00:33:50.834 --> 00:33:53.801
Somebody just approved.
I need to update the status.

00:33:53.801 --> 00:33:56.634
If the Step now
is fully approved,

00:33:56.634 --> 00:33:58.400
I'm going to start
the next Step,

00:33:58.400 --> 00:34:00.133
naturally send out
more emails.

00:34:00.133 --> 00:34:01.801
And if all the Steps
are approved,

00:34:01.801 --> 00:34:03.100
I'm going to go
to the final state,

00:34:03.100 --> 00:34:05.300
and in our case,
that's publish.

00:34:05.300 --> 00:34:06.968
And this is
pretty generic.

00:34:06.968 --> 00:34:10.067
You can use this for almost
any level of complexity

00:34:10.067 --> 00:34:13.601
for a sequential workflow.

00:34:13.601 --> 00:34:16.300
So let's talk about
dynamic approvals.

00:34:16.300 --> 00:34:19.300
Our process structure
is very flexible.

00:34:19.300 --> 00:34:21.701
Steps can be added
and removed trivially.

00:34:21.701 --> 00:34:23.834
We're just manipulating
a JavaScript array,

00:34:23.834 --> 00:34:26.767
and I think everybody knows
how to do that.

00:34:26.767 --> 00:34:28.434
So some of the things
we could do is

00:34:28.434 --> 00:34:31.467
we could automatically
add a legal Step, perhaps,

00:34:31.467 --> 00:34:35.701
if a post contained profanity
or restricted keywords,

00:34:35.701 --> 00:34:38.534
or any kind of odd content
that we're able to detect

00:34:38.534 --> 00:34:40.667
inside our script.

00:34:40.667 --> 00:34:43.467
Another thing we could do is,
along with an approval button,

00:34:43.467 --> 00:34:46.100
we could also have
a bunch of reference buttons

00:34:46.100 --> 00:34:48.033
or refer buttons.

00:34:48.033 --> 00:34:51.234
So if one of the approvers
is concerned about the content,

00:34:51.234 --> 00:34:53.334
they could add a Step
by clicking,

00:34:53.334 --> 00:34:55.801
not the Approve button,
but the Refer to Legal button,

00:34:55.801 --> 00:34:57.267
for example.

00:34:57.267 --> 00:35:01.767
So it really is
quite a flexible system.

00:35:01.767 --> 00:35:02.934
So from here,
let's look at

00:35:02.934 --> 00:35:06.634
another kind of advanced feature
and reminders.

00:35:06.634 --> 00:35:09.234
As Eric pointed out,
when we were writing things

00:35:09.234 --> 00:35:11.667
to the Datastore,
we can't just rely on emails.

00:35:11.667 --> 00:35:14.000
Emails often get overlooked
and ignored.

00:35:14.000 --> 00:35:16.767
So the delays that that cause
are annoying

00:35:16.767 --> 00:35:19.334
and potentially costly.

00:35:19.334 --> 00:35:20.601
We're going to show a way

00:35:20.601 --> 00:35:23.901
to issue a daily reminder
of pending approvals,

00:35:23.901 --> 00:35:26.868
and this is basically
a nag email.

00:35:26.868 --> 00:35:28.334
So the first thing
we're going to do

00:35:28.334 --> 00:35:31.601
is figure out
who needs to be reminded.

00:35:31.601 --> 00:35:33.534
So we're going to get
the pending approvers

00:35:33.534 --> 00:35:35.434
from our process.

00:35:35.434 --> 00:35:36.968
The pending approvers
are going to be the approvers

00:35:36.968 --> 00:35:38.634
on the active Step.

00:35:38.634 --> 00:35:40.934
So we're not really concerned
about spamming everybody

00:35:40.934 --> 00:35:42.033
who's in the process;

00:35:42.033 --> 00:35:44.334
just those people
who are pending.

00:35:44.334 --> 00:35:46.534
The first thing we do
is we get the active Step,

00:35:46.534 --> 00:35:48.267
and I'll show you
that code in a moment,

00:35:48.267 --> 00:35:50.801
and then we're going to set up
an array of pending approvers.

00:35:50.801 --> 00:35:52.300
So we don't want to
spam the people

00:35:52.300 --> 00:35:53.701
who have already approved.

00:35:53.701 --> 00:35:57.234
We just want those in the Step
who are set to pending.

00:35:57.234 --> 00:36:00.501
So for every user
in the list of approvers,

00:36:00.501 --> 00:36:04.267
in the active Step, we're
going to check their status.

00:36:04.267 --> 00:36:09.067
So active Step
for user X is pending.

00:36:09.067 --> 00:36:13.567
Then we push that user back
onto the pending approvers.

00:36:13.567 --> 00:36:17.167
Let's have a look at
the getActiveStep function.

00:36:17.167 --> 00:36:19.334
We're going to just iterate
through the array of Steps

00:36:19.334 --> 00:36:20.734
in the process,
and we're going to find

00:36:20.734 --> 00:36:24.501
the first Step that hasn't
been fully approved.

00:36:24.501 --> 00:36:27.067
So the first Step
that's pending.

00:36:27.067 --> 00:36:30.534
So relatively straightforward,
relatively simple.

00:36:30.534 --> 00:36:32.367
Then to send the reminders,

00:36:32.367 --> 00:36:35.400
our function is going to
grab open our Datastore,

00:36:35.400 --> 00:36:36.801
our spreadsheet.

00:36:36.801 --> 00:36:40.834
It's going to pull all the data
from the spreadsheet,

00:36:40.834 --> 00:36:44.200
and then it's going to iterate
through every single row

00:36:44.200 --> 00:36:46.400
and get the pending approvers
on each row

00:36:46.400 --> 00:36:48.868
and send them a reminder email.
Okay?

00:36:48.868 --> 00:36:51.601
So in one step,
we're going to iterate

00:36:51.601 --> 00:36:56.267
through the entire Datastore
for every article that's pending

00:36:56.267 --> 00:36:59.100
and send reminders
to everybody.

00:36:59.100 --> 00:37:01.367
And then we need a way
to run this automatically.

00:37:01.367 --> 00:37:03.167
This is pretty important.

00:37:03.167 --> 00:37:06.701
Inside the spreadsheet editor,
inside the script editor,

00:37:06.701 --> 00:37:09.968
you can set a function--
in this case,

00:37:09.968 --> 00:37:14.334
send reminders--
to run automatically every day

00:37:14.334 --> 00:37:16.634
at a particular time,
and so we're going to do it

00:37:16.634 --> 00:37:19.033
every morning
between 8:00 and 9:00 a.m.

00:37:19.033 --> 00:37:20.868
So now, when folks
get in to work,

00:37:20.868 --> 00:37:23.534
they'll have a bright
shiny email nagging them

00:37:23.534 --> 00:37:25.667
about approving
whatever is on their plate.

00:37:25.667 --> 00:37:28.400
Okay.

00:37:28.400 --> 00:37:30.367
So that's a very basic
reminder strategy.

00:37:30.367 --> 00:37:34.701
I think, before you know it,
you'll be getting nasty emails

00:37:34.701 --> 00:37:36.100
telling you to back off,

00:37:36.100 --> 00:37:38.934
that it's only been 24 hours,
et cetera, et cetera

00:37:38.934 --> 00:37:40.934
but it's very easy to extend
and customize.

00:37:40.934 --> 00:37:42.801
You could, for example,

00:37:42.801 --> 00:37:46.467
store the last date of nagging
in the Step

00:37:46.467 --> 00:37:50.234
and then check how long
it's been since you sent a nag,

00:37:50.234 --> 00:37:52.667
so that you're only sending
a nag every few days.

00:37:52.667 --> 00:37:56.734
It really is a very solid
foundation for Escalations.

00:37:56.734 --> 00:37:58.300
If you're going to escalate
something, though,

00:37:58.300 --> 00:38:01.501
you really need to know about
the organizational hierarchy,

00:38:01.501 --> 00:38:03.434
and that's what we're
going to talk about next.

00:38:03.434 --> 00:38:06.934
This is one of the most
important pieces of workflow,

00:38:06.934 --> 00:38:08.534
and I think it's something
that traditionally,

00:38:08.534 --> 00:38:10.934
we haven't had
a great solution for.

00:38:10.934 --> 00:38:15.767
You typically do need
to know a user's manager.

00:38:15.767 --> 00:38:18.801
You need to know
who fills the PR role,

00:38:18.801 --> 00:38:23.133
who fills the marketing role,
who fills the legal role.

00:38:23.133 --> 00:38:24.834
We need to be able to find
the users responsible

00:38:24.834 --> 00:38:26.267
for the approval,

00:38:26.267 --> 00:38:28.801
and we don't want to hard code
these things into script

00:38:28.801 --> 00:38:31.834
that has to be updated every
time there's an org change.

00:38:31.834 --> 00:38:33.300
We'd go crazy.

00:38:33.300 --> 00:38:35.100
So it is very important
that a script be able

00:38:35.100 --> 00:38:39.234
to get access to an
organization hierarchy.

00:38:39.234 --> 00:38:42.033
So at Google, we've got these
things called Google Profiles,

00:38:42.033 --> 00:38:47.434
and I guess--has everybody here
seen their own Google Profile?

00:38:47.434 --> 00:38:49.434
No, blank stares.

00:38:49.434 --> 00:38:51.367
Okay, one or two people.

00:38:51.367 --> 00:38:54.634
It really isn't all that useful
in an enterprise setting.

00:38:54.634 --> 00:38:56.968
You go there, and you see
some security settings,

00:38:56.968 --> 00:38:59.734
you see your dashboard,
you see your own email address,

00:38:59.734 --> 00:39:02.267
all things that you already
know about,

00:39:02.267 --> 00:39:04.634
and generally
not all that helpful.

00:39:04.634 --> 00:39:07.434
But behind that, there is
an incredible Datastore

00:39:07.434 --> 00:39:09.801
that has a huge amount
of information,

00:39:09.801 --> 00:39:11.434
and that's all thanks
to a thing called

00:39:11.434 --> 00:39:14.267
Google Apps Directory Sync.

00:39:14.267 --> 00:39:19.000
Directory Sync allows you
to take an LDAP server's content

00:39:19.000 --> 00:39:21.734
and synchronize it out
to Google Profiles

00:39:21.734 --> 00:39:23.934
or maybe even an active
directory server.

00:39:23.934 --> 00:39:28.234
This Apps Directory Sync
runs inside your organization,

00:39:28.234 --> 00:39:30.801
periodically scraping
all that data

00:39:30.801 --> 00:39:32.400
and pushing it out
into the cloud,

00:39:32.400 --> 00:39:34.767
so then anything
that's running inside the--

00:39:34.767 --> 00:39:37.067
running outside your firewall
and in the cloud

00:39:37.067 --> 00:39:39.133
still has access
to all that information

00:39:39.133 --> 00:39:42.033
that's centrally managed
inside your organization

00:39:42.033 --> 00:39:45.434
by LDAP, or Active Directory,
or whatever system you're using.

00:39:45.434 --> 00:39:47.167
And you can see
in this screenshot

00:39:47.167 --> 00:39:50.667
that there's all kinds of
attributes like manager,

00:39:50.667 --> 00:39:53.167
Assistant, Division,
so it's a wealth of information,

00:39:53.167 --> 00:39:57.434
and it's exactly
what we need for workflow.

00:39:57.434 --> 00:40:01.767
Along with the Directory Sync
and the Profiles,

00:40:01.767 --> 00:40:04.334
there's a directory service
that's going to be announced.

00:40:04.334 --> 00:40:05.868
I guess I'm
announcing it now.

00:40:05.868 --> 00:40:08.968
It's going to be released
in the next couple of weeks.

00:40:08.968 --> 00:40:11.667
So we can use this
to look up managers.

00:40:11.667 --> 00:40:14.868
So how do we call
these APIs from App Script?

00:40:14.868 --> 00:40:18.167
So App Script has a beautiful
range of very easy-to-use APIs,

00:40:18.167 --> 00:40:20.701
but obviously there's a lot more
APIs that are available

00:40:20.701 --> 00:40:22.434
that aren't yet available
in Apps Script.

00:40:22.434 --> 00:40:23.767
So we're going to walk
through an example

00:40:23.767 --> 00:40:29.634
of how to call these APIs
from script.

00:40:29.634 --> 00:40:33.400
So I've thrown a big monster
chunk of code onscreen here,

00:40:33.400 --> 00:40:34.868
and I think you'll all
be relieved to know

00:40:34.868 --> 00:40:36.767
that most of it
is boilerplate.

00:40:36.767 --> 00:40:38.534
And also, I should highlight
that in this case,

00:40:38.534 --> 00:40:40.968
we're going to call
the Profiles API,

00:40:40.968 --> 00:40:43.434
and we're going to access
the Datastore directly.

00:40:43.434 --> 00:40:45.801
The Profiles API
has a weird characteristic

00:40:45.801 --> 00:40:50.434
in that it's admin access only,
and the API that we're releasing

00:40:50.434 --> 00:40:52.934
in a couple of weeks
is called a Directory Service,

00:40:52.934 --> 00:40:54.601
and that's available
to everybody,

00:40:54.601 --> 00:40:58.334
and the main difference is that
the Profiles API is read/write,

00:40:58.334 --> 00:41:01.234
and the Directory Service API
is read-only.

00:41:01.234 --> 00:41:04.167
Our example is read-only,
and so you'll be able

00:41:04.167 --> 00:41:07.234
to use this code
pretty much exactly

00:41:07.234 --> 00:41:08.567
to call the Directory Service

00:41:08.567 --> 00:41:09.767
when it's released
in a few weeks,

00:41:09.767 --> 00:41:13.400
and you won't need to be
a domain administrator.

00:41:13.400 --> 00:41:16.701
All right, so the first
part of the code here,

00:41:16.701 --> 00:41:19.634
what it does is--
as I said, boilerplate--

00:41:19.634 --> 00:41:21.934
you tell it which service
you're accessing,

00:41:21.934 --> 00:41:24.467
and then the documentation
for that service gives you

00:41:24.467 --> 00:41:27.868
the access token URL,
the request token URL,

00:41:27.868 --> 00:41:29.968
and the authorization URL.

00:41:29.968 --> 00:41:33.300
You then also set a consumer key
and a consumer secret.

00:41:33.300 --> 00:41:38.067
And for every Google service,
they're anonymous. Okay?

00:41:38.067 --> 00:41:39.934
It confuses everybody.

00:41:39.934 --> 00:41:41.567
Why would your key and secret
be anonymous?

00:41:41.567 --> 00:41:45.334
But they are.
And then we can set options.

00:41:45.334 --> 00:41:48.701
In this case, we're just going
to give it a name--Directory.

00:41:48.701 --> 00:41:51.734
We're going to say
to use this OAuthToken.

00:41:51.734 --> 00:41:52.767
That's actually
what we're creating

00:41:52.767 --> 00:41:53.901
in the boilerplate code.

00:41:53.901 --> 00:41:55.667
We're creating
an OAuthToken,

00:41:55.667 --> 00:41:56.834
and then we're going to
set the headers

00:41:56.834 --> 00:41:59.300
to tell it which version
of GData to use.

00:41:59.300 --> 00:42:01.300
And really,
the only important code here

00:42:01.300 --> 00:42:03.267
is at the very bottom
of the screen,

00:42:03.267 --> 00:42:06.334
where we construct a URL
to hit this service.

00:42:06.334 --> 00:42:09.000
And again, it's a URL
from the documentation.

00:42:09.000 --> 00:42:11.467
And then, on the very
second last line,

00:42:11.467 --> 00:42:12.868
we're going to add
the user name

00:42:12.868 --> 00:42:15.400
that we're looking up
and the options,

00:42:15.400 --> 00:42:20.200
and then we're going to return
the content text. Okay?

00:42:20.200 --> 00:42:23.534
It's a mouthful,
but, trust me, it works.

00:42:23.534 --> 00:42:25.734
Actually, and this is just
a larger version of what

00:42:25.734 --> 00:42:29.067
I was talking about--
we're going to fetch that URL,

00:42:29.067 --> 00:42:30.968
and the user name
we took in as a parameter

00:42:30.968 --> 00:42:33.100
is just going to be
appended at the end,

00:42:33.100 --> 00:42:35.200
and then we're going to
return the result.

00:42:35.200 --> 00:42:38.501
So when I call that function
on myself inside Google,

00:42:38.501 --> 00:42:40.434
this is actually
what I get back,

00:42:40.434 --> 00:42:42.968
and I know it's very small
for you to read,

00:42:42.968 --> 00:42:44.067
and that's intentional.

00:42:44.067 --> 00:42:45.067
There's nothing
all that interesting

00:42:45.067 --> 00:42:47.901
about what my entry is,

00:42:47.901 --> 00:42:50.133
but there's all kinds of
stuff in there

00:42:50.133 --> 00:42:53.701
like my telephone numbers,
my email address,

00:42:53.701 --> 00:42:56.767
my manager's email address,
my manager's name,

00:42:56.767 --> 00:43:00.467
the projects that I work on,
the OUs that I'm a part of.

00:43:00.467 --> 00:43:02.334
Okay? So this is kind of
a gold mine,

00:43:02.334 --> 00:43:06.934
when it comes to process
and workflow.

00:43:06.934 --> 00:43:09.000
So we now have
a single source of truth

00:43:09.000 --> 00:43:10.734
for our org structure,

00:43:10.734 --> 00:43:13.467
and it's available today
in the Profiles API,

00:43:13.467 --> 00:43:15.434
if you're a domain
administrator.

00:43:15.434 --> 00:43:17.467
and if you're not,
it'll be available to you

00:43:17.467 --> 00:43:22.501
in the Directory API
in the next few weeks.

00:43:22.501 --> 00:43:24.901
So that's pretty much
what we have for you today,

00:43:24.901 --> 00:43:27.701
and I'm going to do a quick
recap of what both Eric and I

00:43:27.701 --> 00:43:30.567
have talked about, and then
we'll take some questions.

00:43:30.567 --> 00:43:32.467
We started with Script
in Sites,

00:43:32.467 --> 00:43:35.067
and Sites is the hub
for workflow, we believe.

00:43:35.067 --> 00:43:36.534
Actions on a Site,

00:43:36.534 --> 00:43:38.767
embedding Scripts
into a Site's page.

00:43:38.767 --> 00:43:41.267
Then Eric told you
all about simple workflow,

00:43:41.267 --> 00:43:43.100
private comments
to a site owner,

00:43:43.100 --> 00:43:44.400
very straightforward,

00:43:44.400 --> 00:43:46.601
and then we went into
document approval

00:43:46.601 --> 00:43:50.100
and the simple publishing
workflow with a single approver,

00:43:50.100 --> 00:43:53.200
and then we talked about
approval mechanisms,

00:43:53.200 --> 00:43:55.834
how we can actually capture
that approval action

00:43:55.834 --> 00:43:58.868
and translate it
into motion.

00:43:58.868 --> 00:44:01.434
We talked about approving
from a spreadsheet

00:44:01.434 --> 00:44:05.367
and approving from an email,
using HTML forms.

00:44:05.367 --> 00:44:07.501
Then we talked about
multi-step approvals,

00:44:07.501 --> 00:44:09.901
and this is really where
workflow gets realistic,

00:44:09.901 --> 00:44:12.400
and saving the state of
the approval is the key thing.

00:44:12.400 --> 00:44:14.167
It helps you
manage the complexity,

00:44:14.167 --> 00:44:16.133
if you have a good
representation of the state.

00:44:16.133 --> 00:44:17.934
And I can't emphasize
that enough.

00:44:17.934 --> 00:44:21.033
It may be a dry topic,
but it'll save you weeks

00:44:21.033 --> 00:44:22.801
and weeks of frustration
in the future,

00:44:22.801 --> 00:44:25.300
if you do it nicely.

00:44:25.300 --> 00:44:27.367
We talked about dynamically
altering the process,

00:44:27.367 --> 00:44:30.601
which is often essential,
and then we talked about

00:44:30.601 --> 00:44:34.400
the additional features
that are going to be essential:

00:44:34.400 --> 00:44:37.100
reminders, escalation,
and figuring out

00:44:37.100 --> 00:44:40.968
how to navigate your org's
hierarchy from Script

00:44:40.968 --> 00:44:43.334
and from the cloud.

00:44:43.334 --> 00:44:45.667
All right, so that's what
we have today.

00:44:45.667 --> 00:44:48.601
Maybe we'll hold it there
for questions.

00:44:48.601 --> 00:44:54.534
[applause]

00:45:03.167 --> 00:45:04.734
man: I have a question.
Levey: Yes.

00:45:04.734 --> 00:45:08.167
man: It's more something
I thought about

00:45:08.167 --> 00:45:10.033
when you were talking about
the reminders,

00:45:10.033 --> 00:45:13.467
and you can set those scripts
to run as a service.

00:45:13.467 --> 00:45:16.567
Levey: Mm-hm.
man: So you know,

00:45:16.567 --> 00:45:18.334
there's turnaround
in companies,

00:45:18.334 --> 00:45:21.634
and maybe the person who wrote
that service is gone,

00:45:21.634 --> 00:45:24.100
and somebody is getting
this constant reminder,

00:45:24.100 --> 00:45:25.367
and we don't know
where it's coming from.

00:45:25.367 --> 00:45:28.367
Is there a way to see
what services are running,

00:45:28.367 --> 00:45:33.367
or, better still,
running out there in the cloud?

00:45:33.367 --> 00:45:34.667
Levey:
Yes, absolutely.

00:45:34.667 --> 00:45:38.501
So I think the question is,
with all these different

00:45:38.501 --> 00:45:40.300
services
that you may be running,

00:45:40.300 --> 00:45:42.801
and all these different triggers
that you may have set up,

00:45:42.801 --> 00:45:45.000
is there any central place
to see what you've got?

00:45:45.000 --> 00:45:46.133
man:
Right.

00:45:46.133 --> 00:45:47.701
Levey: For triggers,
the answer is yes.

00:45:47.701 --> 00:45:49.167
Inside the script editor,

00:45:49.167 --> 00:45:50.667
when you go to
the triggers menu,

00:45:50.667 --> 00:45:52.868
you can look at the triggers
for the current script,

00:45:52.868 --> 00:45:54.300
or you can look at
all your triggers.

00:45:54.300 --> 00:45:55.701
man: Okay.

00:45:55.701 --> 00:45:58.634
Levey: And so you can get
a central view of everything

00:45:58.634 --> 00:46:00.868
that you've set up to run
and respond to an event.

00:46:00.868 --> 00:46:02.767
man: So at an administrative
level,

00:46:02.767 --> 00:46:05.167
we could see it across
maybe all the scripts

00:46:05.167 --> 00:46:07.634
that other people have created
within the organization?

00:46:07.634 --> 00:46:08.968
Levey:
No, it's on a per user basis.

00:46:08.968 --> 00:46:10.334
man:
Per user basis?

00:46:10.334 --> 00:46:12.033
Levey: And so it's intended
to be user granularity,

00:46:12.033 --> 00:46:13.267
absolutely.
man: Okay, great.

00:46:13.267 --> 00:46:18.200
Thank you.

00:46:22.601 --> 00:46:25.300
man: Hi. So you mentioned
saving a state to a database.

00:46:25.300 --> 00:46:26.734
Levey:
Mm-hm.

00:46:26.734 --> 00:46:29.501
man: And so I know that hosted
SQLs and Trusted Tester--

00:46:29.501 --> 00:46:32.634
are you going to be able
to write from Apps Script

00:46:32.634 --> 00:46:35.767
to hosted SQL?
Levey: Yes, absolutely.

00:46:35.767 --> 00:46:37.501
That's one of the most
exciting things

00:46:37.501 --> 00:46:39.467
that we'll be able to do
shortly.

00:46:39.467 --> 00:46:44.000
And for any folks who are on
the hosted SQL Trusted Tester,

00:46:44.000 --> 00:46:46.400
feel free to come by,
and I think I can hook you up

00:46:46.400 --> 00:46:51.334
with something that'll
do that for you.

00:46:53.000 --> 00:46:54.767
Okay, I guess
that's all the questions.

00:46:54.767 --> 00:46:57.167
Thank you very much, everybody.

00:46:57.167 --> 00:46:58.934
[applause]

