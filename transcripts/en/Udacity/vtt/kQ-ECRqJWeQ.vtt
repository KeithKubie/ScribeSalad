WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:04.230
&gt;From this point onward, we will consider
linear programs in their standard form,

00:00:04.230 --> 00:00:07.440
where the constraints
are expressed as e qualities.

00:00:08.500 --> 00:00:11.910
We will have an underdetermined
system of equations, that has lots of

00:00:11.910 --> 00:00:16.440
solutions, and we'll try to find the one
that maximizes the objective function.

00:00:17.760 --> 00:00:21.220
Now, if you've ever had to come up with
solution to an underdetermined system on

00:00:21.220 --> 00:00:25.590
your own, you'll have noticed that it's
easiest to find one by simply setting

00:00:25.590 --> 00:00:28.870
some of the coefficients to 0,
so as to create a square system,

00:00:28.870 --> 00:00:32.049
and then solving for
the rest of the coefficients.

00:00:32.049 --> 00:00:34.470
In effect, this is what solvers
like MATLAB do, as well.

00:00:35.610 --> 00:00:37.830
These solutions are called
basic solutions.

00:00:37.830 --> 00:00:40.350
And it turns out that to
solve linear programs,

00:00:40.350 --> 00:00:43.030
basic solutions are the only ones
that we will need to consider.

00:00:44.150 --> 00:00:49.065
The trick however, is figuring out
which coefficients need to be set to 0.

00:00:49.065 --> 00:00:52.650
With that intuition in mind,
let's dive into the details.

00:00:52.650 --> 00:00:55.900
Switching over now entirely to
considering linear programs in

00:00:55.900 --> 00:00:57.380
standard form.

00:00:57.380 --> 00:01:01.090
I want to define some vocabulary
that will be useful going forward.

00:01:01.090 --> 00:01:07.232
First, we say that a vector x is
a solution if and only if Ax = b.

00:01:07.232 --> 00:01:10.970
A basic solution is one
generated as follows.

00:01:10.970 --> 00:01:15.280
We'll pick an increasing
sequence of m column numbers so

00:01:15.280 --> 00:01:19.510
that the corresponding columns
are linearly independent.

00:01:19.510 --> 00:01:23.240
And we'll call the resulting matrix B.

00:01:23.240 --> 00:01:27.080
This is easiest to see when
the chosen columns are the first m.

00:01:27.080 --> 00:01:30.540
And we'll use this convention for
most of our treatment.

00:01:30.540 --> 00:01:36.330
We define XB to be B
inverse times this B here,

00:01:36.330 --> 00:01:39.740
and then embed this
in a longer vector x.

00:01:39.740 --> 00:01:46.010
Putting the value from XB for
columns in the sequence and 0 otherwise.

00:01:46.010 --> 00:01:48.990
This x is a basic solution.

00:01:48.990 --> 00:01:53.180
Really, all that we're trying to
accomplish here is to let XB get

00:01:53.180 --> 00:01:59.580
multiplied with the columns of B and 0
to get multiplied with the columns of D.

00:02:00.680 --> 00:02:05.390
Remember that post multiplication
corresponds to column operations.

00:02:05.390 --> 00:02:07.500
So that then is a basic solution and

00:02:07.500 --> 00:02:12.100
we call it basic because it came
from our choice of this linearly

00:02:12.100 --> 00:02:17.370
independent set of columns which
forms a basis for the column space.

00:02:17.370 --> 00:02:20.750
&gt;From this basis we get a basic solution.

00:02:20.750 --> 00:02:25.720
It is possible for more than one basis
to yield the same basic solution

00:02:25.720 --> 00:02:29.280
if some of the entries of this XB are 0.

00:02:29.280 --> 00:02:31.820
Such a solution is called degenerate.

00:02:31.820 --> 00:02:36.150
This corresponds to the case where
our vertex is at the intersection

00:02:36.150 --> 00:02:39.990
of more than n hyperplanes
in the symmetric form.

00:02:39.990 --> 00:02:44.700
So far this vocabulary only
addresses the equality constraints.

00:02:44.700 --> 00:02:47.750
Adding in the non-negativity
constraints in the variables,

00:02:47.750 --> 00:02:49.900
we use the word feasible,

00:02:49.900 --> 00:02:55.450
thus a feasibly solution is a solution
that has all nonnegative entries.

00:02:55.450 --> 00:02:59.730
And a basic feasible solution
is one that comes from a basis

00:02:59.730 --> 00:03:03.277
as described above and
has all nonnegative entries.

