WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:05.520
So, let's try this. I would put all of this functionality in a method, give me

00:00:05.520 --> 00:00:09.760
a minute to arrange that and then I'll show you. As promised, here is my method.

00:00:13.070 --> 00:00:16.219
This method keeps reading an integer until it finds

00:00:16.219 --> 00:00:19.250
one that is within the desired range and then it

00:00:19.250 --> 00:00:22.060
returns it. The exact code isn't really important right

00:00:22.060 --> 00:00:24.180
now. You can have a look at it in the

00:00:24.180 --> 00:00:27.740
code distribution, if you want to. And, out here,

00:00:27.740 --> 00:00:31.700
I'm calling it. But, there's a problem. When I compile

00:00:31.700 --> 00:00:35.040
it, I get an error message. And, that error

00:00:35.040 --> 00:00:38.820
message, right now, must truly appear like gibberish to you.

00:00:38.820 --> 00:00:41.530
It talks about non-static methods and static methods.

00:00:41.530 --> 00:00:44.190
So let me explain what's happening and why the

00:00:44.190 --> 00:00:48.470
compiler is unhappy. Normally, we call a method on

00:00:48.470 --> 00:00:51.080
an object and I didn't do that here because

00:00:51.080 --> 00:00:54.850
I figured, well I'm in elevator demo. So I

00:00:54.850 --> 00:00:57.450
should be able to call any elevator demo method

00:00:57.450 --> 00:00:59.830
as well. But the trouble is I'm calling from

00:00:59.830 --> 00:01:04.470
main. So there are no elevator demo objects and

00:01:04.470 --> 00:01:09.590
the compiler complains. So going back here, that is

00:01:09.590 --> 00:01:12.470
the crux of the problem. ReadBetween is not called

00:01:12.470 --> 00:01:15.400
on an object And there really isn't a great

00:01:15.400 --> 00:01:17.430
object to call it on. it would have been nice

00:01:17.430 --> 00:01:19.380
to call it on the scanner, but like I

00:01:19.380 --> 00:01:23.100
already said, we can't do that. Whenever you're in this

00:01:23.100 --> 00:01:25.760
kind of situation where you have a method that

00:01:25.760 --> 00:01:30.010
can't really be called in an object, then you make

00:01:30.010 --> 00:01:35.120
a static method. The static method is a method that's not called in any

00:01:35.120 --> 00:01:40.760
object. So, one remedy is, simply, to go back into elevator

00:01:40.760 --> 00:01:48.160
demo. And, declare the helper method static. Like this. Now, all

00:01:48.160 --> 00:01:54.970
will be well. And the syntax error is gone. So to answer our original question,

00:01:54.970 --> 00:01:57.680
it is perfectly legitimate to put read between

00:01:57.680 --> 00:02:01.810
intra ElevatorDemo as a static method but maybe

00:02:01.810 --> 00:02:05.940
it's not optimal. Because what if I want

00:02:05.940 --> 00:02:08.780
to use that perfectly nifty method in another

00:02:08.780 --> 00:02:14.060
class? So really, read between is a method that seems it would be useful in any

00:02:14.060 --> 00:02:17.020
situation that you want to read a value from

00:02:17.020 --> 00:02:20.170
some range. So we, we might really want to put

00:02:20.170 --> 00:02:23.390
this somewhere else, and the dos that I'm going

00:02:23.390 --> 00:02:27.690
to put it on I'll call IO Helper. I've

00:02:27.690 --> 00:02:29.254
prepared that class for you, let me show you.

00:02:29.254 --> 00:02:30.570
Here is the IO Helper class. Here is the

00:02:32.790 --> 00:02:35.900
read between method. And again, that is a static

00:02:35.900 --> 00:02:39.190
method because I'm not going to actually make any

00:02:39.190 --> 00:02:42.750
objects off the IO Helper class. I just want

00:02:42.750 --> 00:02:45.860
it to be the home for this method. That means

00:02:45.860 --> 00:02:48.530
when I call the method, I have to specify

00:02:48.530 --> 00:02:51.890
the name of the class like this. Here you

00:02:51.890 --> 00:02:54.160
see the name of the class, IOHelper, the name

00:02:54.160 --> 00:02:58.536
of the method. Static methods are not incredibly common because,

00:02:58.536 --> 00:03:03.620
like I said,most of the time, an actual object

00:03:03.620 --> 00:03:06.570
is responsible for carrying out a method, but they do

00:03:06.570 --> 00:03:08.930
happen. In fact, you've seen a few of them. In

00:03:08.930 --> 00:03:11.670
lesson four, you saw a good number of static methods

00:03:11.670 --> 00:03:15.130
in the math class. Again, the syntax is the name

00:03:15.130 --> 00:03:17.800
of the class, a period, and then the name of

00:03:17.800 --> 00:03:20.630
the method. And once again there is no object of

00:03:20.630 --> 00:03:23.810
the math class. We simply call the square root method

00:03:23.810 --> 00:03:26.850
directly on the class. Now, you may wonder, why

00:03:26.850 --> 00:03:28.370
did we have to use a static method? Why

00:03:28.370 --> 00:03:32.467
couldn't we just call the method on the number

00:03:32.467 --> 00:03:35.670
2? Well, that's what it's like in Java. In

00:03:35.670 --> 00:03:38.330
Java, numbers are not objects so you can never

00:03:38.330 --> 00:03:41.600
call a method on an object. A call such

00:03:42.610 --> 00:03:45.470
as 2. square root might be more logical, but

00:03:45.470 --> 00:03:48.550
it's an error. So to summarize the static method.

00:03:48.550 --> 00:03:53.130
Belongs to a class. It's not called in an object and they're not actually all

00:03:53.130 --> 00:03:54.940
that common. Why do you call them

00:03:54.940 --> 00:03:58.430
static methods? There's no good reason actually. That's

00:03:58.430 --> 00:04:01.090
a holdover from another much more ancient

00:04:01.090 --> 00:04:04.860
programming language. There's nothing particularly static about them.

00:04:04.860 --> 00:04:07.160
In addition to static methods, there are static

00:04:07.160 --> 00:04:09.470
variables. Let's have a look at them next.

