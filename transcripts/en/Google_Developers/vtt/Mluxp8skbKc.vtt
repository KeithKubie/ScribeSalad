WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.458
[MUSIC PLAYING]

00:00:04.859 --> 00:00:06.150
ANDREW BROGDON: Hey, everybody.

00:00:06.150 --> 00:00:09.070
I'm Andrew Brogdon, and welcome
back to the Mobile Ads Garage.

00:00:09.070 --> 00:00:13.420
Today, with the help of my
partner, Gary the graphics guy,

00:00:13.420 --> 00:00:15.400
we get to cover
something awesome--

00:00:15.400 --> 00:00:16.610
Kotlin.

00:00:16.610 --> 00:00:18.792
One of the biggest cheers
at Google I/O this year

00:00:18.792 --> 00:00:20.500
came when Stephanie
Cuthbertson announced

00:00:20.500 --> 00:00:23.050
that Android Studio
3.0 would include

00:00:23.050 --> 00:00:24.940
built-in support for Kotlin.

00:00:24.940 --> 00:00:26.440
And it was for good reason.

00:00:26.440 --> 00:00:29.320
Kotlin compiles to good
old-fashioned JVM bytecode,

00:00:29.320 --> 00:00:30.940
but as a modern
language it includes

00:00:30.940 --> 00:00:32.740
a ton of features
that could help

00:00:32.740 --> 00:00:34.600
you code faster and better.

00:00:34.600 --> 00:00:37.690
Things like single abstract
method conversions,

00:00:37.690 --> 00:00:43.700
explicit nullability, default
parameters, the Elvis operator,

00:00:43.700 --> 00:00:45.230
and a bunch more.

00:00:45.230 --> 00:00:47.960
Plus, because everything's
still running on the JVM,

00:00:47.960 --> 00:00:50.210
Kotlin inneroperates with Java.

00:00:50.210 --> 00:00:52.110
That means the
same Mobile Ads SDK

00:00:52.110 --> 00:00:54.740
you've been using to display
ads from AdMob and DoubleClick

00:00:54.740 --> 00:00:56.720
and your Android
apps works right out

00:00:56.720 --> 00:00:58.370
of the box with Kotlin.

00:00:58.370 --> 00:01:03.010
Now, Gary and I are part
of Developer Relations.

00:01:03.010 --> 00:01:05.459
Our end of things is
creating developer resources.

00:01:05.459 --> 00:01:07.140
So the big
announcement for us is

00:01:07.140 --> 00:01:09.470
that we've updated our
stuff to support Kotlin,

00:01:09.470 --> 00:01:11.250
and the changes are live.

00:01:11.250 --> 00:01:13.770
Our developer site now
features Kotlin code snippets

00:01:13.770 --> 00:01:16.086
alongside Java for
its publisher guides.

00:01:16.086 --> 00:01:17.460
You can just click
back and forth

00:01:17.460 --> 00:01:19.126
to see what a particular
technique looks

00:01:19.126 --> 00:01:22.020
like in either language, and
you can cut and paste code right

00:01:22.020 --> 00:01:23.790
into your own integrations.

00:01:23.790 --> 00:01:26.849
We also created Kotlin versions
of our open source samples,

00:01:26.849 --> 00:01:28.890
not only to show you how
the code works, but also

00:01:28.890 --> 00:01:32.340
because I wanted to write
a bunch of stuff in Kotlin.

00:01:32.340 --> 00:01:34.200
Seriously, it's
a great language.

00:01:34.200 --> 00:01:38.040
All the code got
smaller and tighter.

00:01:38.040 --> 00:01:39.540
Actually, you don't have to.

00:01:39.540 --> 00:01:42.120
Let's dive right in with a
simple banner implementation

00:01:42.120 --> 00:01:44.269
in Android Studio.

00:01:44.269 --> 00:01:45.810
OK, so here's what
I'm starting with.

00:01:45.810 --> 00:01:48.090
Just a simple hello
world app in Kotlin.

00:01:48.090 --> 00:01:50.890
And I'm going to put a
banner across the bottom.

00:01:50.890 --> 00:01:53.919
So step one, let's get the
Mobile Ads SDK imported.

00:01:53.919 --> 00:01:56.460
Now, there is nothing different
here between Java and Kotlin.

00:01:56.460 --> 00:01:57.660
It's the same SDK.

00:01:57.660 --> 00:02:01.555
So it's the same dependency
in your build dot Gradle file.

00:02:01.555 --> 00:02:04.710
There we go.

00:02:04.710 --> 00:02:06.710
And now I can come into
my activity class, which

00:02:06.710 --> 00:02:09.320
is in Kotlin, and call
the initialize method

00:02:09.320 --> 00:02:10.220
for Mobile Ads.

00:02:10.220 --> 00:02:12.800
And the only difference here is
that I don't put a semi-colon

00:02:12.800 --> 00:02:14.390
on the end of the line, really.

00:02:14.390 --> 00:02:17.180
Now, I do need an app ID
for the second parameter.

00:02:17.180 --> 00:02:20.210
And since I haven't
registered this little sample,

00:02:20.210 --> 00:02:23.060
I'm going to use the sample app
ID from our quickstart guide,

00:02:23.060 --> 00:02:25.139
which you can use, too.

00:02:25.139 --> 00:02:26.930
This is great if you're
just experimenting.

00:02:26.930 --> 00:02:30.362
You can cut and paste it
just like I'm doing here.

00:02:30.362 --> 00:02:32.880
There we go.

00:02:32.880 --> 00:02:35.520
OK, so the SDK is
imported and initialized.

00:02:35.520 --> 00:02:38.050
Let's get a banner
into the layout.

00:02:38.050 --> 00:02:40.260
This is the XML layout
file for my activity.

00:02:40.260 --> 00:02:42.450
And I'm just going to
drop in an ad view tag

00:02:42.450 --> 00:02:46.176
and put wrap content on
both the height and width.

00:02:46.176 --> 00:02:48.490
There we go.

00:02:48.490 --> 00:02:51.580
Next up, I need an ID so
I can reference it later.

00:02:51.580 --> 00:02:55.490
And I'm just going
to call it ad view.

00:02:55.490 --> 00:02:57.370
There we go.

00:02:57.370 --> 00:02:59.060
And now for some
layout constraints

00:02:59.060 --> 00:03:02.180
that'll put my banner centered
at the bottom of the screen.

00:03:02.180 --> 00:03:04.340
As you can see, I'm using
constraint layout, which

00:03:04.340 --> 00:03:07.460
is the new hotness, and it uses
these individual constraints

00:03:07.460 --> 00:03:09.360
to get everything
locked in place.

00:03:09.360 --> 00:03:12.050
So I'm locking start to
the beginning of my parent,

00:03:12.050 --> 00:03:15.548
and to the end of my
parent, and so on.

00:03:15.548 --> 00:03:18.860
And there we go.

00:03:18.860 --> 00:03:22.020
All right, let's get the
ad size attribute in place.

00:03:22.020 --> 00:03:23.480
And as you can
see, Android Studio

00:03:23.480 --> 00:03:25.700
isn't giving me any
intelligence on that attribute,

00:03:25.700 --> 00:03:27.116
and that's because
I haven't added

00:03:27.116 --> 00:03:29.540
the XML namespace for ads.

00:03:29.540 --> 00:03:31.360
So let me pop up
here and add it.

00:03:35.860 --> 00:03:38.590
And I'm going to copy
the URL from app up here.

00:03:38.590 --> 00:03:41.110
And this res-auto URL
you see, that just

00:03:41.110 --> 00:03:43.540
tells the system it can find
the namespace definition

00:03:43.540 --> 00:03:45.520
inside the final APK.

00:03:45.520 --> 00:03:47.524
The Google Mobile Ads
SDK actually includes it.

00:03:47.524 --> 00:03:49.690
So the namespaces attributes
are built into your app

00:03:49.690 --> 00:03:52.051
automatically.

00:03:52.051 --> 00:03:52.550
Cool.

00:03:52.550 --> 00:03:55.280
Now we can come back down and
put in an ad size or banner.

00:03:57.870 --> 00:04:00.040
And also, let's get
the ad unit in place.

00:04:00.040 --> 00:04:02.027
And here, again, I haven't
registered this out,

00:04:02.027 --> 00:04:03.360
because I'm just messing around.

00:04:03.360 --> 00:04:07.080
So I'll use the test ad unit
from our banner guide, which

00:04:07.080 --> 00:04:08.340
again, you can use this, too.

00:04:08.340 --> 00:04:09.710
It'll always return test ads.

00:04:09.710 --> 00:04:12.084
So you can bang away on it
without worrying about loading

00:04:12.084 --> 00:04:14.130
a live production ad.

00:04:14.130 --> 00:04:15.420
Cool.

00:04:15.420 --> 00:04:17.710
Now it's back to the activity.

00:04:17.710 --> 00:04:21.440
All right, now in Java, to use
a UI element from your layout,

00:04:21.440 --> 00:04:24.790
you have to go find it with a
fine view by ID call like this.

00:04:29.290 --> 00:04:31.630
But with Kotlin come
these really handy Android

00:04:31.630 --> 00:04:32.390
extensions.

00:04:32.390 --> 00:04:35.170
They're generated automatically,
and you can import them

00:04:35.170 --> 00:04:36.970
with a statement like this one.

00:04:36.970 --> 00:04:40.550
So Kotlin x Android,
and then synthetic,

00:04:40.550 --> 00:04:43.910
and then main for my source set,
and the name of my activity.

00:04:47.160 --> 00:04:49.380
Once that set of
classes is imported,

00:04:49.380 --> 00:04:51.780
I get these automatically
populated properties

00:04:51.780 --> 00:04:53.760
in the activity
class that correspond

00:04:53.760 --> 00:04:55.320
to the elements of my layout.

00:04:55.320 --> 00:04:57.510
So I could just call
load ad right here

00:04:57.510 --> 00:05:00.341
and give it a request object.

00:05:00.341 --> 00:05:02.340
I know there are a bunch
of open source projects

00:05:02.340 --> 00:05:05.010
that produce a similar effect,
many using annotations,

00:05:05.010 --> 00:05:07.020
but this one runs through
a Gradle plugin, which

00:05:07.020 --> 00:05:09.600
means it can really encapsulate
away a lot of the wiring

00:05:09.600 --> 00:05:12.940
and produce a great result.
All right, with my banner

00:05:12.940 --> 00:05:17.270
in place and a call to load
ad, let's run this sucker.

00:05:17.270 --> 00:05:18.410
And there's my banner.

00:05:18.410 --> 00:05:19.940
Job done.

00:05:19.940 --> 00:05:21.920
All right, so there's
a banner in Kotlin.

00:05:21.920 --> 00:05:26.290
I think the Android extensions
alone make it easier.

00:05:26.290 --> 00:05:27.460
Exactly.

00:05:27.460 --> 00:05:29.710
All right, let's step it
up and do an interstitial.

00:05:29.710 --> 00:05:31.126
That will give me
a chance to talk

00:05:31.126 --> 00:05:32.440
about Kotlin's null safety.

00:05:32.440 --> 00:05:34.720
Back into Android Studio.

00:05:34.720 --> 00:05:35.530
So here's my app.

00:05:35.530 --> 00:05:36.460
It's dead simple.

00:05:36.460 --> 00:05:38.770
Just two buttons, one for
loading an interstitial,

00:05:38.770 --> 00:05:41.060
and one for showing it.

00:05:41.060 --> 00:05:42.530
To save time, as
you can see, I've

00:05:42.530 --> 00:05:44.790
already got the SDK imported.

00:05:44.790 --> 00:05:46.964
I'm already calling initialize.

00:05:46.964 --> 00:05:49.505
And my buttons, of course, are
right here in the layout file.

00:05:49.505 --> 00:05:52.130
So all that's setup to go.

00:05:52.130 --> 00:05:53.630
All right, first
things first, let's

00:05:53.630 --> 00:05:56.450
get an interstitial ad property
to hold a reference to my ad

00:05:56.450 --> 00:05:56.950
object.

00:06:00.340 --> 00:06:02.190
Now, you'll notice that
question mark, which

00:06:02.190 --> 00:06:04.050
declares this is a
nullable property,

00:06:04.050 --> 00:06:06.180
and I'm required to
explicitly initialize it,

00:06:06.180 --> 00:06:07.572
which I'll do with a null.

00:06:07.572 --> 00:06:09.780
I could actually call the
interstitial ad constructor

00:06:09.780 --> 00:06:11.363
right there in the
property definition

00:06:11.363 --> 00:06:13.295
rather than using null
and doing it later.

00:06:13.295 --> 00:06:15.420
But after so many years of
instantiating everything

00:06:15.420 --> 00:06:17.280
in onCreate, that just
feels wrong to me,

00:06:17.280 --> 00:06:19.281
like it would
somehow be bad luck.

00:06:19.281 --> 00:06:20.280
It totally works though.

00:06:20.280 --> 00:06:23.450
So feel free to try
it in your own apps.

00:06:23.450 --> 00:06:25.520
So like I said, I'm
going to instantiate it

00:06:25.520 --> 00:06:26.720
down here in onCreate.

00:06:30.740 --> 00:06:33.260
And I need to set the
add unit ID property.

00:06:33.260 --> 00:06:35.600
But since this is just an
app I'm fooling around with

00:06:35.600 --> 00:06:37.710
and I haven't
registered it, I'll

00:06:37.710 --> 00:06:39.930
cut and paste the one from
our interstitial guide.

00:06:39.930 --> 00:06:42.240
And just like banners, you
can use this ad unit as well

00:06:42.240 --> 00:06:43.239
in your own experiments.

00:06:43.239 --> 00:06:44.437
It always returns test ads.

00:06:44.437 --> 00:06:46.020
So you won't get
yourself into trouble

00:06:46.020 --> 00:06:48.560
by loading and
showing ads with it.

00:06:48.560 --> 00:06:49.256
And there we go.

00:06:49.256 --> 00:06:51.380
Now, there's a couple of
other things of note here.

00:06:51.380 --> 00:06:54.200
First, this is the
safe call operator,

00:06:54.200 --> 00:06:56.376
and it ensures that if
this variable were null,

00:06:56.376 --> 00:06:58.250
rather than getting a
null pointer exception,

00:06:58.250 --> 00:07:01.080
the call to set the property
would just be ignored instead.

00:07:01.080 --> 00:07:02.930
So it's a built-in null check.

00:07:02.930 --> 00:07:05.630
Also, you can see I'm setting
a property called ad unit

00:07:05.630 --> 00:07:06.500
ID here.

00:07:06.500 --> 00:07:09.454
Fun fact-- that
property does not exist.

00:07:09.454 --> 00:07:11.870
If you looked at the class
definition for interstitial ad,

00:07:11.870 --> 00:07:14.930
there's no field or
property called ad unit ID.

00:07:14.930 --> 00:07:18.590
There are two methods called
get ad unit ID and set ad unit

00:07:18.590 --> 00:07:21.030
ID, though, which
Kotlin synthesizes

00:07:21.030 --> 00:07:22.730
into this property for you.

00:07:22.730 --> 00:07:25.610
When you assign to it, you're
really calling set ad unit ID

00:07:25.610 --> 00:07:26.520
under the hood.

00:07:26.520 --> 00:07:29.000
And when you read it, you're
calling get ad unit ID.

00:07:29.000 --> 00:07:32.590
But your actual
code is simplified.

00:07:32.590 --> 00:07:34.490
So with the object in
place and the ad unit

00:07:34.490 --> 00:07:36.477
set, let's get the
buttons in play.

00:07:36.477 --> 00:07:38.810
For that, I'm going to use
the Android extensions again.

00:07:41.410 --> 00:07:43.690
There we go.

00:07:43.690 --> 00:07:47.040
Now I can come down here and put
it OnClickListener on the Load

00:07:47.040 --> 00:07:47.710
button.

00:07:47.710 --> 00:07:49.950
And this is another
cool Kotlin feature.

00:07:49.950 --> 00:07:52.530
OnClickListener is a
single method interface,

00:07:52.530 --> 00:07:55.770
and Kotlin will automatically
convert this lambda

00:07:55.770 --> 00:07:58.860
into an anonymous class
implementing the interface.

00:07:58.860 --> 00:08:02.780
Plus, you can use these cool
braces instead of parentheses.

00:08:02.780 --> 00:08:07.198
So in here, I'll drop
a safe call to load ad.

00:08:07.198 --> 00:08:08.180
There we go.

00:08:12.490 --> 00:08:16.060
Then I'll scroll down and
I'll put an OnClickListener

00:08:16.060 --> 00:08:17.110
on the Show button.

00:08:17.110 --> 00:08:20.442
And inside, I'll call the show
method on my interstitial.

00:08:24.780 --> 00:08:26.160
Now there's just one piece left.

00:08:26.160 --> 00:08:29.680
If you recall, the Show
button starts off disabled.

00:08:29.680 --> 00:08:32.280
So I need to enable
it when an ad loads.

00:08:32.280 --> 00:08:35.070
For that, I need to assign
an ad listener implementation

00:08:35.070 --> 00:08:37.716
to the ad listener property
on my interstitial ad.

00:08:37.716 --> 00:08:40.049
And this is another one of
those synthesized properties.

00:08:40.049 --> 00:08:43.610
In Java, you'd call
set ad lister instead.

00:08:43.610 --> 00:08:45.710
And I'm just going to do
a basic implementation

00:08:45.710 --> 00:08:47.630
that just overrides
on ad loaded,

00:08:47.630 --> 00:08:49.680
and sets is enabled
on the Show button.

00:08:52.630 --> 00:08:54.940
And that's another
synthesized property.

00:08:54.940 --> 00:08:56.272
There we go.

00:08:56.272 --> 00:08:57.730
And up here, I do
need the question

00:08:57.730 --> 00:09:00.940
mark that makes the assignment
a safe call, but that's it.

00:09:00.940 --> 00:09:03.980
Let's run it.

00:09:03.980 --> 00:09:06.800
All right, I'm
going to click Load.

00:09:06.800 --> 00:09:10.090
And when the ad loads,
there goes my Show button.

00:09:10.090 --> 00:09:11.160
And there's my test ad.

00:09:14.560 --> 00:09:16.760
OK, I have one last
trick to show you.

00:09:16.760 --> 00:09:18.260
I've been using a
nullable variable

00:09:18.260 --> 00:09:20.150
to hold the reference
to my interstitial ad,

00:09:20.150 --> 00:09:22.820
but I can get around that by
calling the interstitial ad

00:09:22.820 --> 00:09:25.970
constructor in the
declaration, or I can use

00:09:25.970 --> 00:09:29.160
this cool late inti keyword.

00:09:29.160 --> 00:09:32.100
This tells Kotlin, hey, I'm
marking this as non-nullable,

00:09:32.100 --> 00:09:34.260
but I'm not going to
assign a value just yet.

00:09:34.260 --> 00:09:36.240
Just trust me that
I'll assign one

00:09:36.240 --> 00:09:39.240
before I try to read this value.

00:09:39.240 --> 00:09:42.330
With that in place, I can get
rid of the save call operators

00:09:42.330 --> 00:09:45.450
and just do the normal
non-null save calls.

00:09:45.450 --> 00:09:48.210
Because I know I'm
instantiating the ad in OnCreate

00:09:48.210 --> 00:09:50.040
before I do any of
this other stuff,

00:09:50.040 --> 00:09:52.800
I'm still safe from null
reference exceptions.

00:09:52.800 --> 00:09:54.567
So you've got a couple
of different ways

00:09:54.567 --> 00:09:56.400
to structure the code,
and either way, we've

00:09:56.400 --> 00:09:57.340
got our ad showing.

00:09:57.340 --> 00:09:59.550
So job done.

00:09:59.550 --> 00:10:00.720
So there's an interstitial.

00:10:00.720 --> 00:10:02.610
That's two ad
formats in one video.

00:10:02.610 --> 00:10:03.955
Can't beat that.

00:10:03.955 --> 00:10:05.580
Hopefully this has
inspired you to mess

00:10:05.580 --> 00:10:06.930
around with Kotlin a little bit.

00:10:06.930 --> 00:10:09.250
It really is a great language.

00:10:09.250 --> 00:10:10.770
And as always,
I've got some links

00:10:10.770 --> 00:10:13.830
to resources for you down in
the description for this video.

00:10:13.830 --> 00:10:15.990
First up are a couple of
good videos about Kotlin

00:10:15.990 --> 00:10:18.210
from Google I/O 2017.

00:10:18.210 --> 00:10:20.280
I've also got links to
our guides for banners,

00:10:20.280 --> 00:10:22.080
interstitials, and
the other formats,

00:10:22.080 --> 00:10:24.240
which have those Kotlin
updates I mentioned.

00:10:24.240 --> 00:10:26.190
Plus, a link to our
GitHub repo where you

00:10:26.190 --> 00:10:28.590
can see all our Kotlin samples.

00:10:28.590 --> 00:10:31.140
As always, if you've got a
question about this episode

00:10:31.140 --> 00:10:33.220
or an idea for something
you'd like us to cover,

00:10:33.220 --> 00:10:36.780
leave a comment below, and Gary
and I will see you next time.

00:10:36.780 --> 00:10:40.130
[MUSIC PLAYING]

