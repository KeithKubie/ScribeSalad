WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
The only problem with delta debugging is that the test function is somewhat elaborate.

00:00:04.000 --> 00:00:12.000
It first must apply the patches to the code, then build the code, then run the test, and this again

00:00:12.000 --> 00:00:19.000
and again and again, which implies that your build facility must be automatic and of course,

00:00:19.000 --> 00:00:23.000
your version control system should also be able to produce

00:00:23.000 --> 00:00:26.000
exact and small differences between versions.

00:00:26.000 --> 00:00:30.000
There's even a version control system where such a scheme is already built-in.

00:00:30.000 --> 00:00:37.000
This is called git and the command git bisect will give you the exact change between two versions

00:00:37.000 --> 00:00:43.000
stored in git such that the old version will not have the failure and the new version will have the failure.

00:00:43.000 --> 00:00:48.000
So this does something very similar to delta debugging--pointing out the culprit,

00:00:48.000 --> 00:00:51.000
which has been changed such that the failure occurs.

00:00:51.000 --> 00:00:57.000
And now, for a quiz, assume that delta debugging gives you a failure-inducing change

00:00:57.000 --> 00:01:02.000
and you now go and undo the change that is revert to the previous version

00:01:02.000 --> 00:01:05.000
for these locations as returned by delta debugging.

00:01:05.000 --> 00:01:12.000
What is the effect--is it that the program builds normally, the failure no longer occurs,

00:01:12.000 --> 00:01:15.000
or is it that the problem is properly fixed.

00:01:15.000 --> 00:01:17.000
Check all that apply.

