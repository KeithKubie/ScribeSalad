WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:06.160
So in this case, first question
to ask is if we are trying to

00:00:06.160 --> 00:00:10.600
come up with a constraint for
this operation, what's its context?

00:00:11.990 --> 00:00:13.770
&gt;&gt; It is the patron class.

00:00:13.770 --> 00:00:20.390
&gt;&gt; So it's in the patron class with
constraints that talk about operations.

00:00:20.390 --> 00:00:23.380
We can go a step further and
say which operations.

00:00:24.490 --> 00:00:28.590
So, we're going to essentially
have Patron, and in this case,

00:00:28.590 --> 00:00:30.060
there's going to be double colon,

00:00:30.060 --> 00:00:34.900
separating Patron from the name
of the particular operation.

00:00:36.180 --> 00:00:39.850
And we're allowed to go one step further
and actually have the signature there.

00:00:41.060 --> 00:00:47.210
Now the signature was expressed within
just the UML diagram part of things.

00:00:47.210 --> 00:00:52.890
So to fill in this part of the
constraint, we're going to say context.

00:00:52.890 --> 00:00:55.570
We're going to have a patron colon,
colon.

00:00:55.570 --> 00:00:58.290
And then the items
currently checked out.

00:00:58.290 --> 00:01:03.990
And in this case there's no arguments or
at least there's no explicit argument.

00:01:03.990 --> 00:01:08.274
In object-oriented languages there's
always an implicit argument of

00:01:08.274 --> 00:01:10.390
the object receiving the request.

00:01:10.390 --> 00:01:12.020
&gt;&gt; So the Patron itself.

00:01:12.020 --> 00:01:14.539
&gt;&gt; So
the Patron itself is an argument and

00:01:14.539 --> 00:01:17.460
we're going to qualify
with respect to it.

00:01:19.180 --> 00:01:22.070
And so there's no explicit
argument listed in the signature,

00:01:22.070 --> 00:01:24.430
however there is a return value.

00:01:24.430 --> 00:01:28.640
Given the diagram,
what do you think would be the type

00:01:28.640 --> 00:01:32.010
of the return value of
this CheckedOut operation?

00:01:32.010 --> 00:01:35.220
&gt;&gt; It would be a LoanableItem.

00:01:35.220 --> 00:01:41.840
&gt;&gt; Okay, but the requirement
says the LoanableItems, plural.

00:01:41.840 --> 00:01:46.510
&gt;&gt; Well, okay, yeah, so a list or
some group of some LoanableItems.

00:01:46.510 --> 00:01:50.336
&gt;&gt; Okay.
&gt;&gt; Where that association becomes,

00:01:50.336 --> 00:01:53.920
when you actually program it in.

00:01:53.920 --> 00:01:57.100
&gt;&gt; Okay, in this case because there's
a plural in the expression of things,

00:01:57.100 --> 00:01:59.850
we know there's going
to be more than one.

00:01:59.850 --> 00:02:04.940
And OCL provides us various,
what it calls collection classes,

00:02:04.940 --> 00:02:07.060
ways of organizing things.

00:02:07.060 --> 00:02:11.790
And it's important in deciding
exactly which collection class to use,

00:02:11.790 --> 00:02:16.060
to think about the properties
that are required.

00:02:16.060 --> 00:02:20.940
So I use the word list and
list tends to have an order.

00:02:20.940 --> 00:02:22.470
In this case do we care about the order?

00:02:24.220 --> 00:02:25.440
&gt;&gt; Not particularly, I don't think.

00:02:25.440 --> 00:02:27.840
&gt;&gt; Okay, so what other data structure

00:02:29.380 --> 00:02:32.390
is a collection class but
doesn't care about order?

00:02:34.010 --> 00:02:37.390
&gt;&gt; A set or an array or?

00:02:37.390 --> 00:02:42.610
&gt;&gt; So OCL does have a set operation,
so in this case the return value for

00:02:42.610 --> 00:02:45.280
this operation is a set
of loanable items.

00:02:46.570 --> 00:02:48.305
&gt;&gt; Is it okay,
because when you use the word set,

00:02:48.305 --> 00:02:51.430
it makes me think that you're implying
we can only check out one of a certain

00:02:51.430 --> 00:02:53.265
type of book which may be a requirement,
but

00:02:53.265 --> 00:02:56.020
I don't think that was explicit
in the requirements statement.

00:02:56.020 --> 00:03:01.410
You can check out multiple copies
of the same book, couldn't you?

00:03:01.410 --> 00:03:08.090
&gt;&gt; There's nothing about either
the requirements or this

00:03:08.090 --> 00:03:14.745
OCL that prevents you from checking
out multiple copies of the same book,

00:03:14.745 --> 00:03:17.219
because each of those is going
to be a separate loanable item.

00:03:18.450 --> 00:03:19.215
&gt;&gt; Okay so-
&gt;&gt; But

00:03:19.215 --> 00:03:22.710
what it is preventing you from
doing is checking out the same book

00:03:22.710 --> 00:03:23.680
twice at the same time.

00:03:23.680 --> 00:03:25.190
&gt;&gt; Right, that's what I mean.

00:03:25.190 --> 00:03:25.850
&gt;&gt; Right.

00:03:25.850 --> 00:03:28.340
&gt;&gt; So we can't do that, even.

00:03:28.340 --> 00:03:30.997
Is that specified in the requirements,
or is that just something we're now

00:03:30.997 --> 00:03:32.850
implying-
&gt;&gt; Okay, so great point.

00:03:34.350 --> 00:03:39.470
So we call one of the subtleties of
the original requirements analysis had

00:03:39.470 --> 00:03:44.710
to do with what happens if you
check out a book, hold it overdue,

00:03:44.710 --> 00:03:49.740
you have money due on it, you return
it so it's not accruing any extra

00:03:51.040 --> 00:03:55.120
as far as the fine is concerned, but
the system has to remember that, right?

00:03:55.120 --> 00:03:59.500
So in a sense that CheckedOut
record has to still be there

00:03:59.500 --> 00:04:00.980
to hold that information.

00:04:00.980 --> 00:04:04.520
Now what happens if you
try to check it out again?

00:04:04.520 --> 00:04:05.760
If we use a set here

00:04:07.460 --> 00:04:12.350
we run the risk of clobbering
the record and breaking things.

00:04:12.350 --> 00:04:18.600
So I think you've pointed out
a place where we have to be very,

00:04:18.600 --> 00:04:21.660
very careful about doing this right.

00:04:21.660 --> 00:04:23.690
And in this case it looks like yes,

00:04:23.690 --> 00:04:25.830
we would clobber things in
that particular situation.

00:04:27.410 --> 00:04:29.970
For operations that we're
trying to model in OCL,

00:04:29.970 --> 00:04:33.290
the next question typically is
what are the preconditions.

00:04:33.290 --> 00:04:36.320
And that means the circumstances
under which it is meaningful for

00:04:36.320 --> 00:04:38.570
the operation to execute.

00:04:38.570 --> 00:04:40.740
In the case of items
currently checked out,

00:04:40.740 --> 00:04:43.530
as with most operations
that provide a value

00:04:44.840 --> 00:04:49.850
without affecting any change in
state there are no preconditions.

00:04:49.850 --> 00:04:53.910
In OCL we have two ways
of dealing with that.

00:04:53.910 --> 00:04:58.310
We could have a precondition
which has the Boolean value

00:04:58.310 --> 00:05:03.480
true which says it always is the case
that it's okay to run this operation.

00:05:03.480 --> 00:05:06.610
Or we can leave out
the precondition entirely

00:05:06.610 --> 00:05:09.960
which has the same implications.

00:05:09.960 --> 00:05:13.980
And so for readability purposes
you may want to do that to make

00:05:13.980 --> 00:05:16.139
the overall constraint a little shorter.

00:05:17.390 --> 00:05:20.980
The third part in specifying
operations is to specify

00:05:20.980 --> 00:05:24.100
which value is returned
by the operation.

00:05:24.100 --> 00:05:28.370
To compute the items that are currently
checked out, we merely navigate along

00:05:28.370 --> 00:05:32.650
the CheckedOut association to
the corresponding loanable items.

00:05:32.650 --> 00:05:36.000
So here's what the overall
constraint looks like.

00:05:36.000 --> 00:05:38.930
We have the context which
had our signature, and

00:05:38.930 --> 00:05:41.420
then we had a post condition.

00:05:41.420 --> 00:05:47.090
And now the post condition lists
another OCL keyword, which is result.

00:05:47.090 --> 00:05:51.920
And that stands in for whatever it is
that's computed by that operation.

00:05:51.920 --> 00:05:56.789
And what needs to be computed
in this case is those

00:05:58.240 --> 00:06:03.249
links in the CheckedOut association

00:06:03.249 --> 00:06:08.046
which correspond to items checked
out by this particular patron.

00:06:08.046 --> 00:06:13.290
Now we already are restricted by

00:06:13.290 --> 00:06:18.749
our context to just the patron
of interest for the query.

00:06:20.000 --> 00:06:24.826
And that patron is then
going to be a partner in

00:06:24.826 --> 00:06:29.220
certain of the links in the association
and we want to get the partners at

00:06:29.220 --> 00:06:32.880
the other end, the loanable items
that belong to that patron.

00:06:32.880 --> 00:06:36.780
So we navigate from Patron,
which is our context,

00:06:36.780 --> 00:06:41.770
through CheckedOut to LoanableItem,
and that will be the set of loanable

00:06:41.770 --> 00:06:46.620
items that are currently
associated with that patron.

00:06:46.620 --> 00:06:51.950
It once again leave us in the situation,
what does checked out mean?

00:06:51.950 --> 00:06:57.170
It means either you currently have them
checked out, and haven't returned them.

00:06:57.170 --> 00:07:01.130
Or you checked them out, you held
them too long, you returned them, and

00:07:01.130 --> 00:07:05.200
the system is remembering that
you still owe something on them.

