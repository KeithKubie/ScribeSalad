WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.957
[APPLAUSE]

00:00:03.957 --> 00:00:05.290
All right, thank you, everybody.

00:00:05.290 --> 00:00:06.331
Sorry for the slow start.

00:00:06.331 --> 00:00:08.910
I have to have to say it's very
exciting to be back in Korea

00:00:08.910 --> 00:00:09.409
again.

00:00:09.409 --> 00:00:12.910
I was here in October, and
lots of developers we spoke to

00:00:12.910 --> 00:00:15.030
were just waiting
for a Chrome WebView,

00:00:15.030 --> 00:00:16.880
so I'm glad to be able
to bring it to you,

00:00:16.880 --> 00:00:20.330
and show you what
this is all about.

00:00:20.330 --> 00:00:22.900
OK, so what we
have now is we have

00:00:22.900 --> 00:00:25.080
a new WebView in Android KitKat.

00:00:25.080 --> 00:00:28.050
Of course, this WebView
is now built on Chrome,

00:00:28.050 --> 00:00:29.940
or built on the
Chromium codebase,

00:00:29.940 --> 00:00:32.530
and so today I'm going to cover
what the WebView is about,

00:00:32.530 --> 00:00:34.609
what it means to
you as a developer,

00:00:34.609 --> 00:00:36.400
explain some of the
debugging features that

00:00:36.400 --> 00:00:38.690
are in the WebView,
and go through a few

00:00:38.690 --> 00:00:41.385
of the differences
between the new WebView

00:00:41.385 --> 00:00:43.130
and the old WebView.

00:00:43.130 --> 00:00:46.730
So a very, very short kind of
summary is all these points.

00:00:46.730 --> 00:00:47.920
What does it actually mean?

00:00:47.920 --> 00:00:50.550
What does it mean to
you as a developer?

00:00:50.550 --> 00:00:52.050
Not that many people
put their hands

00:00:52.050 --> 00:00:54.961
up about using the
WebView here so,

00:00:54.961 --> 00:00:56.460
can I have a show
of hands of people

00:00:56.460 --> 00:00:58.040
who know what the
WebView is for?

00:01:00.880 --> 00:01:03.530
You don't know what
the WebView is for?

00:01:03.530 --> 00:01:06.020
All right, if you are building
an Android application,

00:01:06.020 --> 00:01:09.900
the WebView is a component
that lets you use HTML, CSS,

00:01:09.900 --> 00:01:11.860
and JavaScript as part
of your application.

00:01:11.860 --> 00:01:15.440
So the idea being that you
can use web technology skills,

00:01:15.440 --> 00:01:18.060
but in an application that
looks like a native Android

00:01:18.060 --> 00:01:18.870
application.

00:01:18.870 --> 00:01:21.770
And I'll slow down
at that point.

00:01:21.770 --> 00:01:23.620
So what that means
is, if you want

00:01:23.620 --> 00:01:26.070
to do cross-device
development-- if you want

00:01:26.070 --> 00:01:28.070
to develop for other
operating systems

00:01:28.070 --> 00:01:30.970
as well as Android-- you
can write your logic,

00:01:30.970 --> 00:01:33.990
if it's a game or something
like that, in JavaScript.

00:01:33.990 --> 00:01:37.220
And then you pull a
WebView in, and the WebView

00:01:37.220 --> 00:01:40.450
takes care of rendering
to the screen.

00:01:40.450 --> 00:01:45.100
So the actual browser that ships
in Android, the normal browser,

00:01:45.100 --> 00:01:46.790
uses the WebView internally.

00:01:46.790 --> 00:01:51.010
So Android, prior to KitKat,
relied on all the old WebView

00:01:51.010 --> 00:01:52.780
for displaying web content.

00:01:52.780 --> 00:01:55.140
So anytime you
went to a web page,

00:01:55.140 --> 00:01:58.360
it was the WebView embedded
in that application displaying

00:01:58.360 --> 00:02:00.530
there on the screen.

00:02:00.530 --> 00:02:05.340
So what this means is
that from KitKat forward,

00:02:05.340 --> 00:02:07.920
every single browser
that uses the WebView

00:02:07.920 --> 00:02:10.350
uses the Chromium codebase.

00:02:10.350 --> 00:02:13.330
And so what we
currently have in KitKat

00:02:13.330 --> 00:02:17.010
is a snapshot of Chrome 30, OK?

00:02:17.010 --> 00:02:20.750
So the WebView actually ships
with Android for every release,

00:02:20.750 --> 00:02:22.420
and the current release is 30.

00:02:22.420 --> 00:02:25.380
So the features in
Chromium version 30

00:02:25.380 --> 00:02:29.270
are what you'll see
reflected in the WebView.

00:02:29.270 --> 00:02:34.040
The difference between Chrome,
the browser, and Chrome WebView

00:02:34.040 --> 00:02:36.900
is mainly in the
graphics back end.

00:02:36.900 --> 00:02:40.290
It's all invisible to you
as an application developer,

00:02:40.290 --> 00:02:43.470
but what has had to
be done is chop out

00:02:43.470 --> 00:02:46.980
the back end of Chrome, the
browser, throw it in the bin,

00:02:46.980 --> 00:02:49.015
replace it with a
graphics stack that

00:02:49.015 --> 00:02:52.220
is compatible with the
Android operating system.

00:02:52.220 --> 00:02:56.910
So Android developers here-- who
knows what SurfaceFlinger is?

00:02:56.910 --> 00:02:58.890
Anyone?

00:02:58.890 --> 00:03:00.600
One person, no people, OK.

00:03:00.600 --> 00:03:04.150
Android graphic subsystem has a
whole lot of things internally.

00:03:04.150 --> 00:03:05.300
There's SurfaceFlinger.

00:03:05.300 --> 00:03:08.010
There's
hardware-accelerated layers.

00:03:08.010 --> 00:03:10.370
There's a whole-view hierarchy.

00:03:10.370 --> 00:03:12.790
And so we've taken
the Chrome codebase

00:03:12.790 --> 00:03:15.580
and modified that
back end of drawing

00:03:15.580 --> 00:03:18.570
to be compatible with
the Android hierarchy.

00:03:18.570 --> 00:03:21.270
But as a web
developer, you probably

00:03:21.270 --> 00:03:23.140
say, why does this even matter?

00:03:23.140 --> 00:03:27.990
Well, in the olden days, this
is what we had in the WebView.

00:03:27.990 --> 00:03:32.910
So the original WebView, from
Android 4.3, 4.2, backwards

00:03:32.910 --> 00:03:35.980
all the way to 2.3,
scored very badly

00:03:35.980 --> 00:03:39.000
on HTML5 features and testing.

00:03:39.000 --> 00:03:44.810
So it's got 284 out of
555, so not very good.

00:03:44.810 --> 00:03:47.090
In the last two to
three years, there's

00:03:47.090 --> 00:03:51.300
been a huge, huge acceleration
in HTML5 technology,

00:03:51.300 --> 00:03:54.280
in both APIs and features.

00:03:54.280 --> 00:03:56.420
And the result is that
web developers who

00:03:56.420 --> 00:03:57.860
want to use these
features in apps

00:03:57.860 --> 00:04:00.640
are asking for
new functionality.

00:04:00.640 --> 00:04:03.800
So now with the
KitKat WebView, we

00:04:03.800 --> 00:04:07.660
do a much more respectable 424.

00:04:07.660 --> 00:04:09.750
So what this means is
that it's very easy

00:04:09.750 --> 00:04:13.480
to take logic that might
be in a mobile website

00:04:13.480 --> 00:04:16.380
and translate it across
into a native application

00:04:16.380 --> 00:04:18.540
that you can then
publish on the Play Store

00:04:18.540 --> 00:04:22.114
and make money, which
is always important.

00:04:22.114 --> 00:04:23.780
All right, so what
are the new features?

00:04:23.780 --> 00:04:25.840
So here are some of the
features that we actually

00:04:25.840 --> 00:04:28.600
have in the WebView that
weren't there in the old days.

00:04:28.600 --> 00:04:32.830
So IndexedDB-- that's a
very important technology

00:04:32.830 --> 00:04:35.240
to store data on the device.

00:04:35.240 --> 00:04:39.490
Now, IndexedDB provides a really
powerful database primitive.

00:04:39.490 --> 00:04:43.170
It runs asynchronously, so
it's a non-blocking API.

00:04:43.170 --> 00:04:46.870
So for example, if you
build an HTML5 game,

00:04:46.870 --> 00:04:49.120
you may want to
store lots of gaming

00:04:49.120 --> 00:04:51.020
levels in your application.

00:04:51.020 --> 00:04:53.170
So you can actually
use IndexedDB

00:04:53.170 --> 00:04:56.280
as the storage mechanism
for those games.

00:04:56.280 --> 00:04:58.430
WebSockets is a really,
really good one.

00:04:58.430 --> 00:05:03.230
WebSockets allows a client
application to talk directly

00:05:03.230 --> 00:05:06.780
to a server over a socket,
very similar to a TCP

00:05:06.780 --> 00:05:09.520
socket in normal networking.

00:05:09.520 --> 00:05:12.700
So this means, instead of
having to do the whole response

00:05:12.700 --> 00:05:16.130
type of thing, you can actually
push messages both directions--

00:05:16.130 --> 00:05:19.330
from client to
server, and reverse.

00:05:19.330 --> 00:05:21.570
Very, very important technology.

00:05:21.570 --> 00:05:25.680
RequestAnimationFrame is
a very, very new-- well,

00:05:25.680 --> 00:05:27.040
newish-- technology.

00:05:27.040 --> 00:05:29.800
What requestAnimationFrame
is is,

00:05:29.800 --> 00:05:32.390
it's a callback into JavaScript.

00:05:32.390 --> 00:05:36.040
And what happens there is
that every time the browser,

00:05:36.040 --> 00:05:39.670
or in this case, the WebView,
wants to redraw a frame,

00:05:39.670 --> 00:05:43.010
it calls back into
requestAnimationFrame.

00:05:43.010 --> 00:05:46.290
Now, the reason this is
useful is for animations.

00:05:46.290 --> 00:05:48.000
So you can synchronize
your animations

00:05:48.000 --> 00:05:52.930
on screen exactly to the
refresh rate of the application,

00:05:52.930 --> 00:05:54.310
so you don't waste time.

00:05:54.310 --> 00:05:56.860
So in JavaScript,
it's very common

00:05:56.860 --> 00:06:01.150
to animate by just setting a
timer, and redrawing every time

00:06:01.150 --> 00:06:02.880
the timer ticks.

00:06:02.880 --> 00:06:05.950
The problem with doing
that is that you either

00:06:05.950 --> 00:06:07.980
draw too little or too
much, because you're not

00:06:07.980 --> 00:06:10.150
synchronized to
the actual screen.

00:06:10.150 --> 00:06:11.910
So requestAnimationFrame
does that.

00:06:11.910 --> 00:06:14.650
It synchronizes for you.

00:06:14.650 --> 00:06:16.640
Also, there are SVG
filters and effects.

00:06:16.640 --> 00:06:19.320
So with the new WebView,
we have a whole lot

00:06:19.320 --> 00:06:24.760
of different filters, like
sepia, convolution blurs,

00:06:24.760 --> 00:06:27.100
all sorts of different
filters that you can then

00:06:27.100 --> 00:06:30.900
apply to any HTML content.

00:06:30.900 --> 00:06:33.540
And probably the
single-most important one

00:06:33.540 --> 00:06:36.850
in the Chrome WebView is
the hardware acceleration.

00:06:36.850 --> 00:06:39.650
So the WebView itself is
now hardware-accelerated.

00:06:39.650 --> 00:06:42.790
The rendering in the
view goes a lot faster

00:06:42.790 --> 00:06:43.790
than the old WebView.

00:06:43.790 --> 00:06:45.940
There are compatibility
differences,

00:06:45.940 --> 00:06:49.570
which I'll talk about soon,
but the most important thing

00:06:49.570 --> 00:06:52.090
is that Android is
shifting to hardware

00:06:52.090 --> 00:06:53.480
acceleration for everything.

00:06:53.480 --> 00:06:55.910
So the default for
all new applications

00:06:55.910 --> 00:06:58.690
is hardware-accelerated
on, and the WebView

00:06:58.690 --> 00:07:00.020
takes advantage of that.

00:07:00.020 --> 00:07:03.200
So if you turn hardware
acceleration off,

00:07:03.200 --> 00:07:06.390
you will have a very badly
degraded performance.

00:07:06.390 --> 00:07:08.140
So there are a lot
more features in HTML5,

00:07:08.140 --> 00:07:12.190
but probably the most
important feature of all

00:07:12.190 --> 00:07:14.500
is the debugging features.

00:07:14.500 --> 00:07:17.660
Now, in the old days
of the old WebView,

00:07:17.660 --> 00:07:20.490
it was very, very
difficult to debug content.

00:07:20.490 --> 00:07:24.440
And the new Chromium WebView
brings in the ability

00:07:24.440 --> 00:07:27.400
to use Chrome and all of
Chrome's DevTools to debug.

00:07:27.400 --> 00:07:29.970
And so we see this
little bit of code.

00:07:29.970 --> 00:07:32.320
That's all the code you need
to add to your application

00:07:32.320 --> 00:07:34.150
to enable debugging.

00:07:34.150 --> 00:07:37.495
So I just want to do a quick
demo of what this means.

00:07:41.880 --> 00:07:42.880
OK, I have a phone here.

00:07:42.880 --> 00:07:47.740
And so as you can see, I've
got some applications running.

00:07:47.740 --> 00:07:51.020
So I've got this application
here that I've built.

00:07:51.020 --> 00:07:54.610
Now, this application is
written using a WebView.

00:07:54.610 --> 00:07:56.940
It's a little rolling ball game.

00:07:56.940 --> 00:08:00.320
You can see the little chrome
ball rolling around there.

00:08:00.320 --> 00:08:04.791
So if we go back to my
browser, wherever it's gone.

00:08:04.791 --> 00:08:05.540
Where has it gone?

00:08:12.980 --> 00:08:15.970
Right, so if I just
open up a new tab,

00:08:15.970 --> 00:08:25.010
if I type in this
address, Chrome:inspect,

00:08:25.010 --> 00:08:32.350
and plug my phone in via
USB, what I find is that all

00:08:32.350 --> 00:08:35.655
of a sudden, the browser has
actually seen my phone that

00:08:35.655 --> 00:08:37.539
it's plugged in to the laptop.

00:08:37.539 --> 00:08:42.640
So this is just simply a USB
cable connected to my phone.

00:08:42.640 --> 00:08:45.480
To do this, we don't have to
install any special software.

00:08:45.480 --> 00:08:47.370
There's no development
kit or anything.

00:08:47.370 --> 00:08:49.670
It's a standard
part of Chrome now.

00:08:49.670 --> 00:08:52.750
If you'll see, I have
this little inspect link,

00:08:52.750 --> 00:08:55.470
and that little rectangle
there, the gray rectangle,

00:08:55.470 --> 00:08:57.490
is the WebView
running on my phone.

00:08:57.490 --> 00:09:02.263
So if I just click on inspect,
it pulls up Chrome DevTools.

00:09:07.550 --> 00:09:10.320
So just [INAUDIBLE].

00:09:10.320 --> 00:09:12.190
So if I go out of
projection mode,

00:09:12.190 --> 00:09:15.814
and I'll try and find
my little window here,

00:09:15.814 --> 00:09:17.480
you'll see that what
we actually have is

00:09:17.480 --> 00:09:21.676
we have the Chrome DevTools
actually showing me

00:09:21.676 --> 00:09:23.300
the content that's
running in the view.

00:09:23.300 --> 00:09:28.900
So for example, if I mouse
over things in the HTML here,

00:09:28.900 --> 00:09:31.210
you actually see
that it's displaying

00:09:31.210 --> 00:09:34.230
what's actually on the phone.

00:09:34.230 --> 00:09:38.360
All right, so as I hover
over, see the wall there

00:09:38.360 --> 00:09:39.550
that's gone blue at the top?

00:09:39.550 --> 00:09:42.700
That's actually a
div in HTML markup,

00:09:42.700 --> 00:09:46.030
so all of these different walls
in the game are actually divs.

00:09:48.690 --> 00:09:51.300
So you'll see as we roll over
them, we can actually see them.

00:09:51.300 --> 00:09:54.940
Now, what's interesting
about this particular example

00:09:54.940 --> 00:09:57.470
is that it's using some
of the new HTML5 APIs.

00:09:57.470 --> 00:10:00.940
So it's using
device orientation,

00:10:00.940 --> 00:10:03.080
and that means it's
using the accelerometer.

00:10:03.080 --> 00:10:06.430
So if I grab my
phone and I tip it,

00:10:06.430 --> 00:10:08.180
you'll see the ball
starts rolling around.

00:10:08.180 --> 00:10:10.740
So that's actually
using the accelerometer.

00:10:10.740 --> 00:10:13.255
But you'll notice that when
I do that, down the bottom

00:10:13.255 --> 00:10:15.610
here-- I'll just
zoom in for that,

00:10:15.610 --> 00:10:20.730
so you can actually see it a
bit better-- where's it gone?

00:10:20.730 --> 00:10:21.980
Oh, I fell into a hole, sorry.

00:10:21.980 --> 00:10:23.855
So my content's actually
dynamically changed,

00:10:23.855 --> 00:10:26.061
so I have to start
the game again.

00:10:26.061 --> 00:10:29.380
All right.

00:10:29.380 --> 00:10:31.800
So if I go down to the bottom
where the actual ball is,

00:10:31.800 --> 00:10:37.530
which is here, you'll see that
as the ball is rolling around,

00:10:37.530 --> 00:10:39.930
you can see the DOM
updating dynamically.

00:10:39.930 --> 00:10:41.850
So it's actually
a full, live view

00:10:41.850 --> 00:10:44.550
into the WebView content,
which is really, really

00:10:44.550 --> 00:10:45.454
handy for debugging.

00:10:45.454 --> 00:10:46.370
So we can do anything.

00:10:46.370 --> 00:10:47.630
We can even edit this stuff.

00:10:47.630 --> 00:10:50.420
So if I wanted to, I
can just come along here

00:10:50.420 --> 00:10:52.810
and change the color
if I wanted to.

00:10:52.810 --> 00:10:55.910
So we have black
and gray, and we

00:10:55.910 --> 00:11:00.050
could change this to red, say.

00:11:00.050 --> 00:11:02.745
And then all of a sudden, all
of the balls, the holes that

00:11:02.745 --> 00:11:04.630
are in the game, change to red.

00:11:04.630 --> 00:11:09.390
So you can do real-time, live
editing of your application

00:11:09.390 --> 00:11:11.240
if you're using the WebView.

00:11:11.240 --> 00:11:13.610
Now, what's really
interesting about this

00:11:13.610 --> 00:11:17.680
is that the protocol between
the phone and the browser

00:11:17.680 --> 00:11:20.230
is identical to desktop Chrome.

00:11:20.230 --> 00:11:21.930
What that means is
that anything you

00:11:21.930 --> 00:11:24.060
can do on the
desktop Chrome tools

00:11:24.060 --> 00:11:25.680
you can do with a WebView.

00:11:25.680 --> 00:11:28.340
So that includes
analyzing network traffic,

00:11:28.340 --> 00:11:32.100
looking at paint times,
modifying the DOM on the fly,

00:11:32.100 --> 00:11:33.200
all these kinds of things.

00:11:33.200 --> 00:11:36.342
So it's a
super-powerful feature,

00:11:36.342 --> 00:11:38.550
and I know a lot of people
have been asking for that.

00:11:44.370 --> 00:11:47.140
OK, let's just get
rid of that one.

00:11:52.948 --> 00:11:55.380
Ooh, all right.

00:11:55.380 --> 00:11:59.970
Now, who here writes
Android applications?

00:11:59.970 --> 00:12:01.130
Anybody?

00:12:01.130 --> 00:12:02.350
I do.

00:12:02.350 --> 00:12:04.092
No one else?

00:12:04.092 --> 00:12:05.550
You're just here
to watch the show.

00:12:05.550 --> 00:12:06.610
Is that right?

00:12:06.610 --> 00:12:08.460
All right, so what
WebViews are all about

00:12:08.460 --> 00:12:10.680
are about this new
breed of application,

00:12:10.680 --> 00:12:12.010
like a hybrid application.

00:12:12.010 --> 00:12:14.920
So rather than building
a mobile website,

00:12:14.920 --> 00:12:17.780
we're building a real
Android application,

00:12:17.780 --> 00:12:20.730
but using web technology
inside, and that's

00:12:20.730 --> 00:12:21.730
why we call them hybrid.

00:12:21.730 --> 00:12:24.680
But one of the things that
is really important I'd

00:12:24.680 --> 00:12:27.930
like to point out-- if you
decide to use the Chrome

00:12:27.930 --> 00:12:30.960
WebView in an application,
what you should do

00:12:30.960 --> 00:12:34.310
is integrate with the
native components as well.

00:12:34.310 --> 00:12:38.290
So before we heard all about
the ActionBar and the Navigation

00:12:38.290 --> 00:12:41.100
Drawer and all of
these components.

00:12:41.100 --> 00:12:44.260
We highly recommend you use
those in your application.

00:12:44.260 --> 00:12:47.225
Now, the reason to do that
is that every time there

00:12:47.225 --> 00:12:50.780
is a new release of Android,
they will automatically update.

00:12:50.780 --> 00:12:52.960
So your application
won't go stale,

00:12:52.960 --> 00:12:56.630
so it keeps in synchronization
with the platform.

00:12:56.630 --> 00:13:00.520
You should keep the WebView
just for your custom content.

00:13:00.520 --> 00:13:02.950
So if you're doing a
full page HTML5 game,

00:13:02.950 --> 00:13:05.520
sure, just use
the WebView alone.

00:13:05.520 --> 00:13:08.550
But if you're doing something
like a new social network

00:13:08.550 --> 00:13:13.090
called Line App-- instead of
"what's app," "line app"--

00:13:13.090 --> 00:13:18.490
and you want to basically sell
that to Yahoo for $40 billion,

00:13:18.490 --> 00:13:21.190
what you do to build all
the framework and the menus

00:13:21.190 --> 00:13:24.450
and everything using
native Android controls,

00:13:24.450 --> 00:13:27.560
and in the center, where you
have your content rectangle,

00:13:27.560 --> 00:13:29.330
use the Chrome WebView for that.

00:13:29.330 --> 00:13:31.715
So that's the way we like to
go about using the WebView.

00:13:34.660 --> 00:13:38.860
So when you are actually
building a hybrid application,

00:13:38.860 --> 00:13:41.640
times you need to talk
to the native code,

00:13:41.640 --> 00:13:43.560
and the native
code needs to talk

00:13:43.560 --> 00:13:46.660
to JavaScript and
the WebView model.

00:13:46.660 --> 00:13:50.150
So we have a few
methods of doing that.

00:13:50.150 --> 00:13:51.880
If you wanted to
talk from the WebView

00:13:51.880 --> 00:13:53.790
out into the
native-code side, you

00:13:53.790 --> 00:13:55.930
can add a JavaScript interface.

00:13:55.930 --> 00:13:57.980
So there's actually
a method that

00:13:57.980 --> 00:14:03.460
lets you put a new-method
definition in JavaScript, which

00:14:03.460 --> 00:14:07.860
calls out into Java and
talks to the native code.

00:14:07.860 --> 00:14:11.950
Similarly, if you want to run
JavaScript from the native side

00:14:11.950 --> 00:14:15.760
into your WebView, you
use evaluateJavaScript.

00:14:15.760 --> 00:14:17.680
So I'll just show you
a couple of examples

00:14:17.680 --> 00:14:19.075
of that kind of code.

00:14:21.610 --> 00:14:25.956
So here's an example where
we've added a new JavaScript

00:14:25.956 --> 00:14:26.630
interface.

00:14:26.630 --> 00:14:29.780
Can everybody read
that OK at the back?

00:14:29.780 --> 00:14:32.370
No, yes?

00:14:32.370 --> 00:14:38.450
I'll just-- this method.

00:14:38.450 --> 00:14:43.570
So this addJavaScript interface
basically takes two arguments.

00:14:43.570 --> 00:14:47.590
One is an object that defines
the methods inside it,

00:14:47.590 --> 00:14:50.744
and the second is string, which
has been cut off on my slide,

00:14:50.744 --> 00:14:52.660
but it's the string which
names the interface.

00:14:52.660 --> 00:14:57.080
So that's what you will
see in the JavaScript side.

00:14:57.080 --> 00:14:58.580
So we have samples.

00:14:58.580 --> 00:15:00.760
If you want to
actually go online,

00:15:00.760 --> 00:15:03.270
if you go to this
particular repository,

00:15:03.270 --> 00:15:06.962
we have examples of code that
you can just take and copy.

00:15:06.962 --> 00:15:09.170
So if you want to experiment
with the Chrome WebView,

00:15:09.170 --> 00:15:13.445
just go to this GitHub
repository, grab it, modify it.

00:15:13.445 --> 00:15:15.450
I encourage you to do that.

00:15:15.450 --> 00:15:18.040
That's what's so good
about open-source.

00:15:18.040 --> 00:15:21.390
OK, so that lets you
call from JavaScript

00:15:21.390 --> 00:15:23.040
back into native code.

00:15:23.040 --> 00:15:24.990
Now, there were a
few people over here

00:15:24.990 --> 00:15:28.310
that use the old WebView.

00:15:28.310 --> 00:15:31.460
One thing we did find--
building the Chrome WebView was

00:15:31.460 --> 00:15:33.860
a very large
engineering project.

00:15:33.860 --> 00:15:35.990
And one of the biggest
problems that we had

00:15:35.990 --> 00:15:39.456
was the fact that
HTML has changed

00:15:39.456 --> 00:15:40.830
in the time since
the old WebView

00:15:40.830 --> 00:15:43.830
and now, and so there
are a lot of behaviors

00:15:43.830 --> 00:15:49.830
in the old WebView that are
undesirable, and don't conform

00:15:49.830 --> 00:15:51.180
to current standards.

00:15:51.180 --> 00:15:55.880
So the WebView contains
a compatibility mode.

00:15:55.880 --> 00:15:59.310
If you build your application
with this manifest that says,

00:15:59.310 --> 00:16:02.480
target SDK version
19 or higher, it

00:16:02.480 --> 00:16:05.630
will run in modern
standards mode.

00:16:05.630 --> 00:16:11.440
If you build your application
with SDK version 18 or lower,

00:16:11.440 --> 00:16:13.970
the WebView turns on
a lot of behaviors

00:16:13.970 --> 00:16:17.830
that are meant to be more
compatible with older

00:16:17.830 --> 00:16:22.530
applications, and this is purely
for backwards compatibility.

00:16:22.530 --> 00:16:25.660
These two things that I've
singled out you should know

00:16:25.660 --> 00:16:29.070
are not supported in any mode
currently on the WebView,

00:16:29.070 --> 00:16:30.770
and probably never will be.

00:16:30.770 --> 00:16:34.960
So be aware, if you use narrow
columns and single column

00:16:34.960 --> 00:16:40.210
for controlling the layout in
your application, that's gone.

00:16:40.210 --> 00:16:42.822
What you can do now is
use text autosizing,

00:16:42.822 --> 00:16:44.530
which is a feature in
the Chrome WebView,

00:16:44.530 --> 00:16:47.760
so there are
workarounds to fix this.

00:16:47.760 --> 00:16:51.310
The other thing is, the get
default zoom and set default

00:16:51.310 --> 00:16:52.950
zoom doesn't do
anything anymore.

00:16:52.950 --> 00:16:54.450
So they're just stubbed out.

00:16:54.450 --> 00:16:58.280
So if you're using
those, don't use them.

00:16:58.280 --> 00:17:00.550
OK, so let's move
forward, and we'll

00:17:00.550 --> 00:17:05.619
assume that you're using SDK
19 to compile your application.

00:17:05.619 --> 00:17:07.800
This is the behavior
you're going to see.

00:17:07.800 --> 00:17:09.970
You're going to see
a user-agent change.

00:17:09.970 --> 00:17:13.520
So the string that your
server sees will be completely

00:17:13.520 --> 00:17:18.550
different, and it's different
right here, right there,

00:17:18.550 --> 00:17:21.680
where it says,
Chrome/30.0.0.0, right?

00:17:21.680 --> 00:17:24.780
So now we actually have Chrome
in the user-agent stream.

00:17:24.780 --> 00:17:28.490
So that means you can actually
detect from server side,

00:17:28.490 --> 00:17:31.890
or try to detect,
what kind of WebView

00:17:31.890 --> 00:17:33.740
is connecting to
your server, so you

00:17:33.740 --> 00:17:36.700
can send different content back.

00:17:36.700 --> 00:17:38.470
If you don't like the
user-agent string,

00:17:38.470 --> 00:17:39.830
you can actually change it.

00:17:39.830 --> 00:17:42.920
So if you want to get the
user-agent string, the default

00:17:42.920 --> 00:17:45.040
user agent, it will
return this, and that's

00:17:45.040 --> 00:17:47.990
this method-- get
default user agent.

00:17:47.990 --> 00:17:50.360
If you would like to
change it to emulate

00:17:50.360 --> 00:17:53.082
some different behavior, or to
try and get different content

00:17:53.082 --> 00:17:54.540
back from the
server, you can do it

00:17:54.540 --> 00:17:59.160
with the set user
agent string method.

00:17:59.160 --> 00:18:01.697
Another change here--
these multi-threading

00:18:01.697 --> 00:18:02.530
and thread-blocking.

00:18:02.530 --> 00:18:04.760
This is a hugely important one.

00:18:04.760 --> 00:18:06.550
Anybody that's currently
using the WebView

00:18:06.550 --> 00:18:10.160
and wants to switch, you need
to pay attention right now.

00:18:10.160 --> 00:18:13.710
OK, the current version
of the Chrome WebView

00:18:13.710 --> 00:18:15.900
has to run on the UI
thread, all right?

00:18:15.900 --> 00:18:19.340
So the old WebView--
it was possible to run

00:18:19.340 --> 00:18:21.790
WebViews in background threads.

00:18:21.790 --> 00:18:24.110
Unfortunately, that's
currently not supported.

00:18:24.110 --> 00:18:26.935
And what will happen is, if you
switch over to the new WebView

00:18:26.935 --> 00:18:30.710
and try to do that, your app
will do very strange things,

00:18:30.710 --> 00:18:32.320
and be nearly
impossible to debug.

00:18:32.320 --> 00:18:36.490
So you just cannot use it
off the main UI thread.

00:18:36.490 --> 00:18:41.050
But if you really do want to
run things from side threads,

00:18:41.050 --> 00:18:44.345
you can still execute into that
WebView by using this method.

00:18:44.345 --> 00:18:48.490
There's that little code
that you run on UI thread.

00:18:48.490 --> 00:18:50.820
So if you have a bit of a
closer look at that one,

00:18:50.820 --> 00:18:56.750
this will actually just let
you run code in the WebView.

00:18:56.750 --> 00:19:00.450
So from a background thread, I
can put the application logic

00:19:00.450 --> 00:19:02.815
in that method, and it
will send it over, take

00:19:02.815 --> 00:19:05.064
care of synchronization, and
do all the magic for you,

00:19:05.064 --> 00:19:06.840
and it will work.

00:19:06.840 --> 00:19:10.330
And so because of this and
the new structure of the way

00:19:10.330 --> 00:19:13.160
WebView works on
the UI thread, you

00:19:13.160 --> 00:19:17.320
have to take extra-special care
not to block the UI thread.

00:19:17.320 --> 00:19:19.890
So if you send off
something in JavaScript

00:19:19.890 --> 00:19:23.650
and decide to sleep and wait,
that's a very bad thing to do,

00:19:23.650 --> 00:19:26.670
because your application
will become unresponsive,

00:19:26.670 --> 00:19:30.540
and Android will
try and kill it.

00:19:30.540 --> 00:19:34.290
Now, if you want to actually
run JavaScript off the main UI

00:19:34.290 --> 00:19:37.430
thread, rather than just
trying to execute it,

00:19:37.430 --> 00:19:39.820
you can call
evaluateJavaScript, and that

00:19:39.820 --> 00:19:41.290
will run it asynchronously.

00:19:41.290 --> 00:19:44.570
So again, that won't
block the main UI thread.

00:19:44.570 --> 00:19:47.960
So internally, the way the
graphics work in the Chrome

00:19:47.960 --> 00:19:50.335
WebView, there's a
compositing thread,

00:19:50.335 --> 00:19:52.050
and there's the main UI thread.

00:19:52.050 --> 00:19:53.640
And so the
compositing thread can

00:19:53.640 --> 00:19:56.050
be running in the
background, doing animations,

00:19:56.050 --> 00:19:58.310
while logic is happening
on the UI thread.

00:19:58.310 --> 00:20:00.716
So the view itself
is multi-threaded.

00:20:04.394 --> 00:20:07.830
OK, another thing that's
changed most people probably

00:20:07.830 --> 00:20:09.570
don't need to worry
about too much,

00:20:09.570 --> 00:20:13.950
but the way that URLs
are handled has changed.

00:20:13.950 --> 00:20:16.770
When you're using
custom URL schemes,

00:20:16.770 --> 00:20:19.990
you normally register
a callback that gets

00:20:19.990 --> 00:20:22.640
triggered off every time
it sees the custom URL,

00:20:22.640 --> 00:20:24.120
to try and handle it.

00:20:24.120 --> 00:20:25.660
Now, the behavior
in the old WebView

00:20:25.660 --> 00:20:30.043
was very loose, so it
didn't work very well

00:20:30.043 --> 00:20:32.180
from a security point of view.

00:20:32.180 --> 00:20:35.050
So now what happens is that
it's much stricter, which

00:20:35.050 --> 00:20:38.390
means that all of your URLs
have to conform exactly

00:20:38.390 --> 00:20:42.320
to the RFC, the RFC
3986, which specifies

00:20:42.320 --> 00:20:43.650
the syntax of the URL.

00:20:43.650 --> 00:20:48.050
And as long you use that, you'll
be able to use custom URLs.

00:20:48.050 --> 00:20:51.570
So here's an example
of a URL handler.

00:20:51.570 --> 00:20:54.280
So this should
override URL loading.

00:20:54.280 --> 00:20:58.300
That method there, that's
called as a callback,

00:20:58.300 --> 00:21:00.480
so every time you
click on a link

00:21:00.480 --> 00:21:03.620
or try and load a resource,
this callback will be fired,

00:21:03.620 --> 00:21:05.650
and that gives you
the opportunity

00:21:05.650 --> 00:21:08.021
to handle your custom
URL scheme and what

00:21:08.021 --> 00:21:09.645
it is you're trying
to achieve with it.

00:21:13.436 --> 00:21:15.560
There are changes in the
Viewport handling as well.

00:21:15.560 --> 00:21:19.400
A lot of people used to use
this target density DPI,

00:21:19.400 --> 00:21:22.810
and that density DPI was
something that would tell you

00:21:22.810 --> 00:21:24.630
what kind of screen you were on.

00:21:24.630 --> 00:21:29.010
This is completely deprecated,
because in the modern world,

00:21:29.010 --> 00:21:30.930
as we saw with the
other presentations,

00:21:30.930 --> 00:21:33.820
we're dealing like
design pixels,

00:21:33.820 --> 00:21:36.030
not in actual device pixels.

00:21:36.030 --> 00:21:40.810
PX is not really
used, so a CSS pixel

00:21:40.810 --> 00:21:43.096
corresponds to one
or two or maybe one

00:21:43.096 --> 00:21:45.310
and a half or four
actual, real pixels.

00:21:45.310 --> 00:21:50.910
So that's why the target density
DPI is not there anymore.

00:21:50.910 --> 00:21:52.300
The Viewport zooms in.

00:21:52.300 --> 00:21:53.700
This is a new behavior.

00:21:53.700 --> 00:21:58.270
So if you said, my content is
only 100 pixels by 200 pixels,

00:21:58.270 --> 00:21:59.870
the Chrome WebView
will automatically

00:21:59.870 --> 00:22:02.090
scale it to fill the
screen, so that you

00:22:02.090 --> 00:22:06.130
don't have black borders
around the edge, or something.

00:22:06.130 --> 00:22:08.420
Multiple Viewport tags
are not supported,

00:22:08.420 --> 00:22:12.666
so people who are web developers
use this meta Viewport equals

00:22:12.666 --> 00:22:14.040
blah, blah, blah
with this device

00:22:14.040 --> 00:22:16.165
with-- there's a
whole lot of tags

00:22:16.165 --> 00:22:20.400
to control how the Viewport
behaves, whether zooming works.

00:22:20.400 --> 00:22:23.090
In the old WebView, way you
could put two or three of these

00:22:23.090 --> 00:22:25.910
in with different values,
and they would concatenate--

00:22:25.910 --> 00:22:30.690
put all the values together,
and use the union of them.

00:22:30.690 --> 00:22:32.930
In the new WebView,
it's only the last one

00:22:32.930 --> 00:22:34.960
that is actually used,
so be careful if you

00:22:34.960 --> 00:22:37.430
have existing content.

00:22:37.430 --> 00:22:41.280
And the default zoom, as I
said before, is deprecated.

00:22:41.280 --> 00:22:42.590
So let's just see.

00:22:42.590 --> 00:22:44.650
Oh, styling-- this is
an important one, too.

00:22:44.650 --> 00:22:50.710
So the way CSS works-- there's
a minor change in that shorthand

00:22:50.710 --> 00:22:53.920
CSS can override explicit CSS.

00:22:53.920 --> 00:22:56.130
So if you see this
top example, we're

00:22:56.130 --> 00:23:00.190
setting the background
size to contain, and then

00:23:00.190 --> 00:23:03.770
the background to a URL of
an image with no-repeat.

00:23:03.770 --> 00:23:05.300
Now, that second
lined background

00:23:05.300 --> 00:23:08.330
is using CSS shorthand,
which is a way

00:23:08.330 --> 00:23:11.470
to combine multiple
things in one line.

00:23:11.470 --> 00:23:14.400
The problem is, that
overrides the initial setting

00:23:14.400 --> 00:23:16.400
of background size above it.

00:23:16.400 --> 00:23:17.950
So it's a very
simple workaround is

00:23:17.950 --> 00:23:20.086
to flip those two lines around.

00:23:20.086 --> 00:23:21.710
So these are only
minor, little tweaks,

00:23:21.710 --> 00:23:25.920
but you need to
be aware of them.

00:23:25.920 --> 00:23:27.810
Now, this is probably
the biggest change,

00:23:27.810 --> 00:23:29.230
and I think this
is just generally

00:23:29.230 --> 00:23:31.390
how Android and
the world is going.

00:23:31.390 --> 00:23:34.280
But pixel densities on
screens are increasing,

00:23:34.280 --> 00:23:38.200
so as designers,
people want to actually

00:23:38.200 --> 00:23:41.590
design to a physical
look not to shrink.

00:23:41.590 --> 00:23:43.690
If you have a super-high-res
screen, and then

00:23:43.690 --> 00:23:47.170
your tap targets are
impossible to touch.

00:23:47.170 --> 00:23:53.010
So in the old view, window outer
width and window outer height

00:23:53.010 --> 00:23:55.010
were actual device pixels.

00:23:55.010 --> 00:23:57.680
Now they're CSS pixels.

00:23:57.680 --> 00:23:59.657
And if you really want
to know how many pixels

00:23:59.657 --> 00:24:01.990
per physical pixel, you can
use window.devicepixelratio.

00:24:05.120 --> 00:24:08.330
If you don't want to do it from
your actual extra HTML content,

00:24:08.330 --> 00:24:10.522
you can do it from
JavaScript, or you

00:24:10.522 --> 00:24:11.830
can do it from Java even.

00:24:11.830 --> 00:24:13.850
You can create
something like this.

00:24:13.850 --> 00:24:17.960
You can create an interface
that you register.

00:24:17.960 --> 00:24:20.840
If you registered
this interface, then

00:24:20.840 --> 00:24:22.340
from JavaScript,
you could implement

00:24:22.340 --> 00:24:25.780
your own get-scale method in
native code that would then

00:24:25.780 --> 00:24:29.335
go off and probe the WebView
object and return the scaling.

00:24:33.090 --> 00:24:34.750
OK, so that's most
of what I wanted

00:24:34.750 --> 00:24:38.166
to cover as far as how things
are going with the WebView

00:24:38.166 --> 00:24:39.290
and how you need to use it.

00:24:39.290 --> 00:24:42.235
There's a lot of
documentation online.

00:24:42.235 --> 00:24:44.890
But there are three
key takeaways here.

00:24:44.890 --> 00:24:48.770
If you want to build a
really great web-based hybrid

00:24:48.770 --> 00:24:53.225
application, number one, always
set your SDK version to 19.

00:24:53.225 --> 00:24:56.580
But I think that that's become
a general Android thing now.

00:24:56.580 --> 00:25:00.100
We're seeing rapid
adoption of KitKat.

00:25:00.100 --> 00:25:03.140
And also, one thing I don't
know if any of the sessions

00:25:03.140 --> 00:25:05.410
will be covering it
here, but we spent

00:25:05.410 --> 00:25:08.060
a lot of time, when
we developed Android

00:25:08.060 --> 00:25:11.370
4.4, to reduce the
memory footprint.

00:25:11.370 --> 00:25:13.320
Now, the reason we did
that is so that we'll

00:25:13.320 --> 00:25:15.390
run on phones with less memory.

00:25:15.390 --> 00:25:18.970
So we expect that
over the longer term,

00:25:18.970 --> 00:25:22.100
Android 2.3 will just
disappear, because that category

00:25:22.100 --> 00:25:25.850
of phone with low memory is
now capable of running KitKat.

00:25:25.850 --> 00:25:30.150
So moving forward,
definitely use SDK 19.

00:25:30.150 --> 00:25:31.580
Turn on hardware acceleration.

00:25:31.580 --> 00:25:35.000
It's become crucial to a
smooth user experience.

00:25:35.000 --> 00:25:37.770
So that applies for general
Android applications

00:25:37.770 --> 00:25:39.930
as well, especially
on the Chrome WebView.

00:25:39.930 --> 00:25:42.810
In fact, I think there's
approximately a factor

00:25:42.810 --> 00:25:45.255
of 10 difference
in render speed.

00:25:45.255 --> 00:25:48.200
If you turn off hardware
acceleration on the Chrome

00:25:48.200 --> 00:25:50.765
WebView, and you have
graphics-intensive stuff

00:25:50.765 --> 00:25:52.470
or Canvas or anything
like that, you'll

00:25:52.470 --> 00:25:56.790
see that factor of 10 times
difference in performance.

00:25:56.790 --> 00:25:58.800
And of course, enable debugging.

00:25:58.800 --> 00:26:01.980
It's crucially important to
make sure that you can actually

00:26:01.980 --> 00:26:05.724
debug the content that you have,
because if you can't debug it,

00:26:05.724 --> 00:26:07.890
it's a pain in the neck,
and you waste lots of time.

00:26:07.890 --> 00:26:12.017
So one of the best new features
we have is this debugging.

00:26:12.017 --> 00:26:14.100
And if you want to, you
can make that conditional.

00:26:14.100 --> 00:26:16.255
Turn it off in your
released application,

00:26:16.255 --> 00:26:18.740
or have it as a
setting that you can

00:26:18.740 --> 00:26:21.270
change if someone wants to debug
something out in the field.

00:26:21.270 --> 00:26:25.370
But highly encourage you
to turn debugging on.

00:26:25.370 --> 00:26:27.720
And so, of course,
since that's about it,

00:26:27.720 --> 00:26:30.490
we always have to
talk about tomorrow.

00:26:30.490 --> 00:26:31.980
And what's tomorrow?

00:26:31.980 --> 00:26:34.820
I can confirm today that
WebRTC is definitely

00:26:34.820 --> 00:26:37.300
coming to the next version
of the Chrome WebView.

00:26:37.300 --> 00:26:41.040
So if you are building
WebRTC-enabled applications,

00:26:41.040 --> 00:26:43.910
we see this as a
real game changer.

00:26:43.910 --> 00:26:46.630
It's just democratizing
communication.

00:26:46.630 --> 00:26:49.130
It's proper peer-to-peer
video conferencing,

00:26:49.130 --> 00:26:50.260
data channels, everything.

00:26:50.260 --> 00:26:54.000
It's just been turned on for
the current, in-development

00:26:54.000 --> 00:26:56.260
WebView, and it will
be coming very soon.

00:26:56.260 --> 00:27:00.347
So the next release of Android,
you can expect to see WebRTC.

00:27:00.347 --> 00:27:02.680
I think last time we were
here, and probably everybody I

00:27:02.680 --> 00:27:05.100
talk to about the
WebView is, why no WebGL?

00:27:05.100 --> 00:27:07.510
Why no WebGL?

00:27:07.510 --> 00:27:09.680
I don't have a good answer.

00:27:09.680 --> 00:27:13.960
The simplest answer is simply
a graphics-architecture issue.

00:27:13.960 --> 00:27:17.850
So as I said before, we pulled
the whole graphics back end out

00:27:17.850 --> 00:27:20.420
of Chrome, and replaced
it with interface

00:27:20.420 --> 00:27:22.770
directly into the
Android subsystem.

00:27:22.770 --> 00:27:24.980
So there are design and
engineering challenges

00:27:24.980 --> 00:27:28.140
to actually make WebGL work
with decent performance

00:27:28.140 --> 00:27:28.810
in the WebView.

00:27:28.810 --> 00:27:31.852
But we're certainly thinking
about it quite a lot.

00:27:31.852 --> 00:27:34.310
And the other thing that we
have been talking about doing--

00:27:34.310 --> 00:27:37.110
and we're still trying to
work out how we could maybe

00:27:37.110 --> 00:27:40.860
do this-- is the idea of making
the WebView automatically

00:27:40.860 --> 00:27:42.270
update.

00:27:42.270 --> 00:27:44.320
So the current
WebView, as I said,

00:27:44.320 --> 00:27:46.814
is Chrome 30, effectively.

00:27:46.814 --> 00:27:48.230
We would like to
be able to update

00:27:48.230 --> 00:27:51.220
the WebView in synchronization
with Chrome, so we have

00:27:51.220 --> 00:27:53.722
an automatic-update
mechanism, but there

00:27:53.722 --> 00:27:55.180
are a lot of
engineering challenges

00:27:55.180 --> 00:27:56.970
to making that
work successfully.

00:27:56.970 --> 00:28:00.010
So keep tuned, and come
to the next summit,

00:28:00.010 --> 00:28:02.595
and we'll talk all about what
comes between now and then.

00:28:02.595 --> 00:28:07.070
So anyway, on that note, I open
the floor to some questions.

00:28:07.070 --> 00:28:10.100
Here are some resources,
so those two short links.

00:28:10.100 --> 00:28:13.230
There's documentation on
the WebView on the left,

00:28:13.230 --> 00:28:17.020
on the new WebView, and a
migration guide on the right.

00:28:17.020 --> 00:28:19.470
So if you're a
current WebView user,

00:28:19.470 --> 00:28:21.596
open the one on the right.

00:28:21.596 --> 00:28:23.220
The samples that are
on GitHub-- here's

00:28:23.220 --> 00:28:25.080
just a convenient,
short link to them

00:28:25.080 --> 00:28:27.244
if you want to get to them.

00:28:27.244 --> 00:28:28.660
In that case, thank
you very much.

00:28:28.660 --> 00:28:29.220
Thanks for listening.

00:28:29.220 --> 00:28:30.800
Thanks for having
me back in Seoul.

00:28:30.800 --> 00:28:32.445
It's great to be
here, and I hope

00:28:32.445 --> 00:28:34.750
to talk to you during the day.

00:28:34.750 --> 00:28:36.300
[APPLAUSE]

