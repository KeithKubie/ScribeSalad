WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:01.190
[APPLAUSE]

00:00:01.190 --> 00:00:03.260
KEVIN MOORE: So whoever
is slicing and dicing

00:00:03.260 --> 00:00:06.192
for publishing to YouTube, I
want to start not with my talk,

00:00:06.192 --> 00:00:08.150
but with something that
Slava didn't point out.

00:00:08.150 --> 00:00:09.710
I mean, his talk
was really funny.

00:00:09.710 --> 00:00:11.390
You guys remember this slide?

00:00:11.390 --> 00:00:13.431
I know we talked about,
this is not a pig's nose.

00:00:13.431 --> 00:00:15.830
This is an outlet.

00:00:15.830 --> 00:00:19.450
I was like, please,
he has to show--

00:00:19.450 --> 00:00:22.290
it would have been so perfect.

00:00:22.290 --> 00:00:24.290
This, of course, is the
problem with duck typing

00:00:24.290 --> 00:00:28.550
and why we like strong types,
because not a good idea.

00:00:28.550 --> 00:00:29.330
OK.

00:00:29.330 --> 00:00:30.871
Now this is the
beginning of my talk.

00:00:32.930 --> 00:00:33.500
Hello.

00:00:33.500 --> 00:00:34.880
AUDIENCE: Hello.

00:00:34.880 --> 00:00:36.920
KEVIN MOORE: My
name is Kevin Moore,

00:00:36.920 --> 00:00:38.756
proud resident of Seattle.

00:00:38.756 --> 00:00:39.467
AUDIENCE: Woo.

00:00:39.467 --> 00:00:41.300
KEVIN MOORE: And you
tell the Seattle people

00:00:41.300 --> 00:00:43.369
by their muted statements.

00:00:43.369 --> 00:00:45.410
Most of them are just
blinded by the sun outside,

00:00:45.410 --> 00:00:47.534
so they're unable to
see that I'm talking.

00:00:47.534 --> 00:00:48.200
You can find me.

00:00:48.200 --> 00:00:49.220
I'm kevmoo everywhere.

00:00:49.220 --> 00:00:51.350
I'm a product manager
on the Dart team,

00:00:51.350 --> 00:00:54.172
and I help out with
the Angular packages

00:00:54.172 --> 00:00:55.880
and the build packages
and generally just

00:00:55.880 --> 00:00:56.810
the package ecosystem.

00:00:56.810 --> 00:00:58.710
I care a lot about it.

00:00:58.710 --> 00:01:00.820
Talk to Martin from
Denmark about how often I

00:01:00.820 --> 00:01:02.820
send him random pull
requests for little things.

00:01:02.820 --> 00:01:03.560
He's like, really?

00:01:03.560 --> 00:01:05.060
Don't you have
anything better to do

00:01:05.060 --> 00:01:07.855
than to fix the formatting
on Google API's off?

00:01:07.855 --> 00:01:08.480
I was like, no!

00:01:08.480 --> 00:01:09.271
It's not formatted!

00:01:09.271 --> 00:01:10.580
It must be formatted.

00:01:10.580 --> 00:01:13.910
So I care a lot about packages
and building good packages,

00:01:13.910 --> 00:01:16.857
and that's the talk today.

00:01:16.857 --> 00:01:17.565
This is the quiz.

00:01:22.400 --> 00:01:26.350
So I want you guys all to
build amazing packages.

00:01:26.350 --> 00:01:29.120
From the beginning,
Dart was open sourced.

00:01:29.120 --> 00:01:31.100
We're an ECMA standard,
as Tim pointed out.

00:01:31.100 --> 00:01:33.340
All of our code is on
GitHub, which we love.

00:01:33.340 --> 00:01:36.850
And we want everyone else
to join us doing this.

00:01:36.850 --> 00:01:39.160
We've done a bunch of work
to improve the package site.

00:01:39.160 --> 00:01:42.010
We just launched the package
site December of last year.

00:01:42.010 --> 00:01:44.330
Has anyone noticed that
we've updated the pub site?

00:01:44.330 --> 00:01:45.580
Are you liking the new design?

00:01:48.366 --> 00:01:50.240
Shout out to [? Isvan, ?]
if you're watching.

00:01:50.240 --> 00:01:52.310
He did a bunch of great
work on the package site.

00:01:52.310 --> 00:01:54.410
No, and the reason we
invest so much in this

00:01:54.410 --> 00:01:57.012
is because we care
about community.

00:01:57.012 --> 00:01:58.970
We realize we can't build
everything ourselves.

00:01:58.970 --> 00:02:01.970
We want your help and people
watching at home-- your help

00:02:01.970 --> 00:02:03.750
to build a great Dart ecosystem.

00:02:03.750 --> 00:02:06.500
And so we need you
to go build packages.

00:02:06.500 --> 00:02:09.030
And ideally, they'll
be amazing packages.

00:02:09.030 --> 00:02:11.310
And so I'm here to
help you with that.

00:02:11.310 --> 00:02:13.970
So this talk is three easy to
remember rules for perfect Dart

00:02:13.970 --> 00:02:15.635
packages, which, of course--

00:02:20.540 --> 00:02:22.610
now you might be
asking why I did this.

00:02:22.610 --> 00:02:25.510
And the reason is there
is no bull emoticon.

00:02:25.510 --> 00:02:27.210
There's a cow
emoticon, but I knew

00:02:27.210 --> 00:02:29.650
there's the guys from
Iowa here, and they

00:02:29.650 --> 00:02:31.070
can tell the difference.

00:02:31.070 --> 00:02:33.282
So I went with an alternative.

00:02:33.282 --> 00:02:35.740
I could have been classy and
done the cargo cult reference.

00:02:35.740 --> 00:02:38.624
But I thought this is
more from where I'm from.

00:02:38.624 --> 00:02:40.165
It's really difficult.
You know, it's

00:02:40.165 --> 00:02:42.820
not simple-- there's no
simple three easy rules.

00:02:42.820 --> 00:02:44.464
It's a lot of complex things.

00:02:44.464 --> 00:02:46.630
But thankfully, we have a
lot of good documentation.

00:02:46.630 --> 00:02:48.220
We have a lot of great tools.

00:02:48.220 --> 00:02:50.870
And today, I'm here to tell
you about some of those.

00:02:50.870 --> 00:02:53.731
So let's start with the basics.

00:02:53.731 --> 00:02:57.040
And obviously, the first
one is, don't panic.

00:02:57.040 --> 00:02:59.740
You know, there are a lot of
things to think about here.

00:02:59.740 --> 00:03:01.000
It's like writing good code.

00:03:01.000 --> 00:03:03.070
There's no simple recipe.

00:03:03.070 --> 00:03:05.500
But we try to hold your hand
through a lot of the things.

00:03:05.500 --> 00:03:08.830
Just spend some time reading the
documentation, using the tools

00:03:08.830 --> 00:03:11.514
we've given you, and you'll
have a lot of success.

00:03:11.514 --> 00:03:13.430
In fact, if you go into
IntelliJ or, I'm sure,

00:03:13.430 --> 00:03:17.817
VS Code and you go, New Dart
Project or New Flutter Project,

00:03:17.817 --> 00:03:19.900
we do a very good job of
making sure we set you up

00:03:19.900 --> 00:03:23.740
with a canonical package with
things in the right directories

00:03:23.740 --> 00:03:25.090
and the right files you need--

00:03:25.090 --> 00:03:26.950
the right entries
in your pubspec.

00:03:26.950 --> 00:03:29.310
In some cases, you need to
go and uncomment the line.

00:03:29.310 --> 00:03:32.950
But we try to set you up for
success from the beginning.

00:03:32.950 --> 00:03:35.450
The second piece of
advice is, find a friend.

00:03:35.450 --> 00:03:36.950
Bob made a comment
earlier that it's

00:03:36.950 --> 00:03:39.610
so much easier emceeing
with someone else on stage,

00:03:39.610 --> 00:03:40.955
and I totally agree.

00:03:40.955 --> 00:03:41.830
AUDIENCE: [INAUDIBLE]

00:03:41.830 --> 00:03:43.670
KEVIN MOORE: Ah.

00:03:43.670 --> 00:03:46.840
You can ask him
later what he said.

00:03:46.840 --> 00:03:49.030
So having someone to
work with you on anything

00:03:49.030 --> 00:03:52.630
is really nice,
especially with a package.

00:03:52.630 --> 00:03:54.650
You know, I occasionally
will write a bug,

00:03:54.650 --> 00:03:56.900
and so having someone review
the code is kind of nice,

00:03:56.900 --> 00:03:59.530
to make sure I catch
myself with bad formatting.

00:03:59.530 --> 00:04:01.600
And obviously, as a
package gets more popular,

00:04:01.600 --> 00:04:03.550
you get to deal with
issues and pull requests.

00:04:03.550 --> 00:04:05.216
Like, people find
things that are broken

00:04:05.216 --> 00:04:06.850
or people want new features.

00:04:06.850 --> 00:04:09.280
And so having someone to work
with to handle the issues

00:04:09.280 --> 00:04:11.560
and the pull requests is
a great way to make sure

00:04:11.560 --> 00:04:12.689
you find success.

00:04:12.689 --> 00:04:13.730
And so don't go it alone.

00:04:13.730 --> 00:04:16.329
Find a friend, if you can.

00:04:16.329 --> 00:04:17.733
And use best practices.

00:04:17.733 --> 00:04:19.149
We spent a lot of
time-- actually,

00:04:19.149 --> 00:04:20.940
Bob has done a bunch
of work on this.

00:04:20.940 --> 00:04:22.330
Cathy and a number of others--

00:04:22.330 --> 00:04:24.610
creating a good set of
really good guidelines

00:04:24.610 --> 00:04:27.790
and documentation around just
good ways to write Dart code.

00:04:27.790 --> 00:04:28.900
Go read them.

00:04:28.900 --> 00:04:31.450
We have an effective Dart guide.

00:04:31.450 --> 00:04:32.950
And the two rules
here are actually,

00:04:32.950 --> 00:04:34.630
you know, great
things to start with.

00:04:34.630 --> 00:04:37.390
Consistent and brief, in
general, is really good.

00:04:37.390 --> 00:04:38.657
This is an amazing document.

00:04:38.657 --> 00:04:40.240
It's actually a
relatively quick read,

00:04:40.240 --> 00:04:41.920
and just gives you good things
to think about, in terms

00:04:41.920 --> 00:04:43.044
of how do you name classes?

00:04:43.044 --> 00:04:44.590
How do you name methods?

00:04:44.590 --> 00:04:46.870
Those coming from C Sharp--
where is Tim sitting?

00:04:46.870 --> 00:04:48.814
You know, methods
are capital cased,

00:04:48.814 --> 00:04:51.230
and so how do you make sure
you do those things correctly?

00:04:51.230 --> 00:04:52.150
We cover all of that.

00:04:52.150 --> 00:04:53.733
When should I use
positional arguments

00:04:53.733 --> 00:04:54.920
versus named arguments?

00:04:54.920 --> 00:04:56.711
These are just good
things to keep in mind,

00:04:56.711 --> 00:04:59.554
and we have really good dockets
to go through a lot of it.

00:04:59.554 --> 00:05:01.470
We also have conventions
about package layout.

00:05:01.470 --> 00:05:03.220
So when you're thinking
about publishing a package,

00:05:03.220 --> 00:05:04.511
where do I put my library code?

00:05:04.511 --> 00:05:06.427
Where do I put my tests?

00:05:06.427 --> 00:05:07.510
We have it all documented.

00:05:07.510 --> 00:05:08.749
It's really accessible.

00:05:08.749 --> 00:05:10.040
This is a great place to start.

00:05:10.040 --> 00:05:11.920
And so, as I said,
the tools we give you

00:05:11.920 --> 00:05:13.870
in IntelliJ and VS
Code and other places

00:05:13.870 --> 00:05:15.700
will set you up
with good defaults.

00:05:15.700 --> 00:05:18.820
But we also have
great docs here.

00:05:18.820 --> 00:05:21.310
And finally, follow
framework conventions.

00:05:21.310 --> 00:05:22.810
So a simple example here--

00:05:22.810 --> 00:05:24.914
in Angular, we
generally say you name

00:05:24.914 --> 00:05:26.080
whatever your component is--

00:05:26.080 --> 00:05:27.820
XYZ component.

00:05:27.820 --> 00:05:29.120
In Flutter, you don't.

00:05:29.120 --> 00:05:30.744
So even though you're
extending widget,

00:05:30.744 --> 00:05:32.800
you don't call yourself
the XYZ widget.

00:05:32.800 --> 00:05:34.425
And so this is a little thing.

00:05:34.425 --> 00:05:35.800
You know, the only
recommendation

00:05:35.800 --> 00:05:38.830
here is spend time
reading the code

00:05:38.830 --> 00:05:40.180
of the thing you're extending.

00:05:40.180 --> 00:05:42.220
Kind of get an idea
for the conventions

00:05:42.220 --> 00:05:44.560
there on how you name
methods-- how you name classes.

00:05:44.560 --> 00:05:46.210
This will help all of
your users because really,

00:05:46.210 --> 00:05:48.380
when you build an application
or build a package,

00:05:48.380 --> 00:05:50.088
you want to make sure
that it fits nicely

00:05:50.088 --> 00:05:51.460
in to the existing ecosystem.

00:05:51.460 --> 00:05:54.680
So follow any framework
conventions that exist.

00:05:54.680 --> 00:05:56.560
And that's the basics.

00:05:56.560 --> 00:05:57.295
Tying your shoes.

00:05:59.950 --> 00:06:02.470
So, once you have a
package all put together,

00:06:02.470 --> 00:06:03.850
let's talk about publishing.

00:06:07.450 --> 00:06:08.440
Again, guess what?

00:06:08.440 --> 00:06:10.940
We have a guide on this that
tells you what you need.

00:06:10.940 --> 00:06:13.390
So read the docs.

00:06:13.390 --> 00:06:15.970
It's good before you create a
package and name 1,000 files

00:06:15.970 --> 00:06:17.680
and put imports and everything
that you actually make

00:06:17.680 --> 00:06:19.120
sure your package is available.

00:06:19.120 --> 00:06:22.780
We have this amazing online
tool to help you figure out

00:06:22.780 --> 00:06:24.520
if a package is available.

00:06:24.520 --> 00:06:26.749
It's called a 404.

00:06:26.749 --> 00:06:29.290
We should really file an issue--
this is a good pull request,

00:06:29.290 --> 00:06:30.760
if someone wants to contribute.

00:06:30.760 --> 00:06:34.240
Make a funnier 404 if a
package isn't available.

00:06:34.240 --> 00:06:36.610
But we can see that the
package isn't available there,

00:06:36.610 --> 00:06:38.290
so I can go publish.

00:06:38.290 --> 00:06:39.887
And again, if we
do a Pub publish,

00:06:39.887 --> 00:06:41.470
we give you a lot
of good advice here.

00:06:41.470 --> 00:06:43.330
So pay attention to
what Pub tells you

00:06:43.330 --> 00:06:45.256
if publish doesn't
immediately work.

00:06:45.256 --> 00:06:47.630
And then there are actually
some cases where it will say,

00:06:47.630 --> 00:06:48.430
are you sure you
want to publish?

00:06:48.430 --> 00:06:50.130
It'll actually give you a
bunch of warnings and errors.

00:06:50.130 --> 00:06:52.390
It'll tell you if you're missing
an import or if you have too--

00:06:52.390 --> 00:06:54.550
I think it won't tell you if
you have too many imports,

00:06:54.550 --> 00:06:56.620
but at least it will tell you
if you have a missing import.

00:06:56.620 --> 00:06:58.180
So pay attention to
this information.

00:06:58.180 --> 00:06:59.580
It's really useful.

00:06:59.580 --> 00:07:01.340
And it will tell
you what's required.

00:07:01.340 --> 00:07:02.530
And again, what you realize
is you should have read

00:07:02.530 --> 00:07:03.940
the docs in the first place.

00:07:03.940 --> 00:07:05.273
You'd have been much better off.

00:07:07.520 --> 00:07:11.544
The next thing is versioning,
and this gets a little tricky.

00:07:11.544 --> 00:07:13.210
What's great about
Dart-- at least, what

00:07:13.210 --> 00:07:14.710
I find really
great about Dart is

00:07:14.710 --> 00:07:17.050
if I'm using
someone's data type--

00:07:17.050 --> 00:07:19.360
let's say there's actually
a semver package here.

00:07:19.360 --> 00:07:21.250
So I'm using the
version type from that.

00:07:21.250 --> 00:07:22.840
I know that the
version I'm using--

00:07:22.840 --> 00:07:24.310
if I'm using 15
other packages that

00:07:24.310 --> 00:07:25.809
have to be used in
the version type,

00:07:25.809 --> 00:07:27.750
they're all the
same version type.

00:07:27.750 --> 00:07:29.920
In other platforms that
will remain unnamed,

00:07:29.920 --> 00:07:31.490
you don't have that certainty.

00:07:31.490 --> 00:07:33.739
So the fact that you have
one version of these classes

00:07:33.739 --> 00:07:34.460
is really useful.

00:07:34.460 --> 00:07:35.980
But that means you have
to think about versioning

00:07:35.980 --> 00:07:37.290
and how this all works.

00:07:37.290 --> 00:07:39.539
And so if I were to give you
any advice about thinking

00:07:39.539 --> 00:07:41.710
about versioning versus
for the things you use,

00:07:41.710 --> 00:07:44.547
make sure you specify a version
range for everything you use.

00:07:44.547 --> 00:07:46.130
And I'm pretty sure
Pub-- is Natalie--

00:07:46.130 --> 00:07:47.150
Natalie is here, right?

00:07:47.150 --> 00:07:49.108
Pub won't let you publish
unless you have lower

00:07:49.108 --> 00:07:50.926
and upper constraints, right?

00:07:50.926 --> 00:07:52.300
You must specify
a range and say,

00:07:52.300 --> 00:07:54.904
these are the range
of things I use.

00:07:54.904 --> 00:07:56.570
AUDIENCE: It'll just
give you a warning.

00:07:56.570 --> 00:07:58.070
KEVIN MOORE: Oh,
give you a warning.

00:07:58.070 --> 00:07:59.657
We should make that an error.

00:07:59.657 --> 00:08:01.990
Yeah, because if you say, oh,
I support anything greater

00:08:01.990 --> 00:08:03.130
than 2, it's like, sure?

00:08:03.130 --> 00:08:04.792
Are you sure that
version 3, version 4

00:08:04.792 --> 00:08:06.250
that have never
been invented-- you

00:08:06.250 --> 00:08:07.550
will be compatible with those?

00:08:07.550 --> 00:08:08.384
You don't know.

00:08:08.384 --> 00:08:10.050
So make sure you do
a full range-- lower

00:08:10.050 --> 00:08:11.440
and upper constraint.

00:08:11.440 --> 00:08:13.630
Be conservative about these.

00:08:13.630 --> 00:08:16.000
Unless you've used
that version before,

00:08:16.000 --> 00:08:17.830
make sure you
constrain it and you

00:08:17.830 --> 00:08:20.590
don't claim to support every
version of a package that

00:08:20.590 --> 00:08:22.760
ever has been or ever will be.

00:08:22.760 --> 00:08:25.870
And finally, be careful when
you update your version string.

00:08:25.870 --> 00:08:27.620
This is really
important, and we'll

00:08:27.620 --> 00:08:29.370
talk about maintenance
a little bit later.

00:08:29.370 --> 00:08:30.910
But it can cause
a lot of problems.

00:08:30.910 --> 00:08:33.633
If you release a breaking
change and you call it a plus 1,

00:08:33.633 --> 00:08:35.049
anyone who uses
your package might

00:08:35.049 --> 00:08:37.120
do Pub upgrade and
get that version,

00:08:37.120 --> 00:08:38.364
and cause lots of issues.

00:08:38.364 --> 00:08:40.030
I think even the Dart
team, on occasion,

00:08:40.030 --> 00:08:41.650
has been guilty of this.

00:08:41.650 --> 00:08:42.789
It's a tricky thing to do.

00:08:42.789 --> 00:08:46.027
The only thing I can say
is, going back to the point

00:08:46.027 --> 00:08:47.860
about having a friend,
these are good things

00:08:47.860 --> 00:08:50.820
to be sanity checked
before you hit Publish.

00:08:50.820 --> 00:08:53.060
So let's do a quiz quick.

00:08:53.060 --> 00:08:55.440
We have a lot of people who
have used Dart for a while.

00:08:55.440 --> 00:08:57.731
Natalie, you're not allowed
to answer these because she

00:08:57.731 --> 00:08:59.050
wrote the version solver.

00:08:59.050 --> 00:09:00.010
That's cheating.

00:09:00.010 --> 00:09:01.690
OK, so I have a version
constraint here.

00:09:01.690 --> 00:09:03.150
Hat, 1.1.0.

00:09:03.150 --> 00:09:06.130
Now don't yell out,
but think to yourself,

00:09:06.130 --> 00:09:10.240
which versions are contained
in that version range?

00:09:10.240 --> 00:09:11.184
All right?

00:09:11.184 --> 00:09:12.850
I stumped someone
yesterday-- a Googler.

00:09:12.850 --> 00:09:14.830
It was funny.

00:09:14.830 --> 00:09:17.370
Is that what you got?

00:09:17.370 --> 00:09:18.730
Oh!

00:09:18.730 --> 00:09:21.250
So hat, 1.1.0 means
anything greater than

00:09:21.250 --> 00:09:25.550
or equal to 1.1.0 and
anything less than 2.0.

00:09:25.550 --> 00:09:26.865
So this is a great shorthand.

00:09:26.865 --> 00:09:29.471
And again, once you want to
support many breaking change

00:09:29.471 --> 00:09:31.720
versions of a package, it's
actually a nice shorthand.

00:09:31.720 --> 00:09:33.850
You know that once you
move beyond hat syntax

00:09:33.850 --> 00:09:35.320
and you have to do
greater than or equal to,

00:09:35.320 --> 00:09:37.060
you're in a little
bit of scary territory

00:09:37.060 --> 00:09:38.476
because that means
you're actually

00:09:38.476 --> 00:09:40.690
defining a range that
spans major versions-- that

00:09:40.690 --> 00:09:42.010
might span breaks.

00:09:42.010 --> 00:09:44.694
And so now you know you
need to be extra careful.

00:09:44.694 --> 00:09:47.110
And I knew Natalie was going
to be here, and I was scared.

00:09:47.110 --> 00:09:48.750
So I actually wrote
the code to make sure

00:09:48.750 --> 00:09:51.416
that the answer was correct, for
fear that she would call me out

00:09:51.416 --> 00:09:53.174
later.

00:09:53.174 --> 00:09:54.340
So here's the next question.

00:09:54.340 --> 00:09:56.980
Let's say I depend on
the foo package, at that.

00:09:56.980 --> 00:09:58.420
And I do Pub upgrade.

00:09:58.420 --> 00:10:00.280
And Now, no asterisk here.

00:10:00.280 --> 00:10:02.980
There's no other package that
depends on foo-- just this one

00:10:02.980 --> 00:10:03.640
package.

00:10:03.640 --> 00:10:04.570
What version do I get?

00:10:04.570 --> 00:10:06.738
And here's one answer,
so yell it out.

00:10:06.738 --> 00:10:08.100
AUDIENCE: 1.2.

00:10:08.100 --> 00:10:11.140
KEVIN MOORE: 1.2.

00:10:11.140 --> 00:10:14.140
By default, when you're
using the Pub client,

00:10:14.140 --> 00:10:17.920
we won't get non-full released
versions of a package.

00:10:17.920 --> 00:10:22.840
So even though this, in theory,
would go get 1.3.0, full stop,

00:10:22.840 --> 00:10:24.580
it won't get the
pre-release version.

00:10:24.580 --> 00:10:26.710
This way, we make sure that
when we go get packages for you,

00:10:26.710 --> 00:10:28.584
we get you stable versions
of those packages.

00:10:28.584 --> 00:10:31.180
And of course, you could always
use a dependency override

00:10:31.180 --> 00:10:34.870
or be explicit and say, I
want 1.3.0 beta or whatever,

00:10:34.870 --> 00:10:36.130
if you're testing.

00:10:36.130 --> 00:10:37.630
We're doing some
of these tricks now

00:10:37.630 --> 00:10:40.431
with the Angular packages
because we're pre-release.

00:10:40.431 --> 00:10:42.430
But in general, you'll
only get stable versions.

00:10:42.430 --> 00:10:45.190
So if you do Pub upgrade and
you see that, oh, there's

00:10:45.190 --> 00:10:47.530
a version available and
it's dash alpha something,

00:10:47.530 --> 00:10:48.207
you know why.

00:10:50.452 --> 00:10:52.910
So if you want to understand
more about versioning in Dart,

00:10:52.910 --> 00:10:55.690
and again, if you're
new to it, semver

00:10:55.690 --> 00:10:59.502
is a great spec
we try to follow.

00:10:59.502 --> 00:11:01.740
I will say there's one to
do in semantic versioning.

00:11:01.740 --> 00:11:03.656
We had an email exchange
about this yesterday,

00:11:03.656 --> 00:11:06.670
which is they're vague about
ordering, intentionally.

00:11:06.670 --> 00:11:10.700
There are flavors of versions
that the semver spec says,

00:11:10.700 --> 00:11:13.030
there is no known
or no approved way

00:11:13.030 --> 00:11:14.410
to think about versioning these.

00:11:14.410 --> 00:11:15.660
We think that's really broken.

00:11:15.660 --> 00:11:18.040
We actually think that
determinism is kind of nice,

00:11:18.040 --> 00:11:21.730
so the way Pub implements
version ranking and ordering,

00:11:21.730 --> 00:11:22.660
we are deterministic.

00:11:22.660 --> 00:11:25.780
So we're a little bit
off the semver spec.

00:11:25.780 --> 00:11:27.550
But every place in
the Dart ecosystem

00:11:27.550 --> 00:11:29.740
where we handle versions--
version solving,

00:11:29.740 --> 00:11:32.456
version ranges, all the ordering
is handled by this package.

00:11:32.456 --> 00:11:34.330
And so if you're curious
about how that works

00:11:34.330 --> 00:11:36.880
or how we-- the small
deltas we have from semver,

00:11:36.880 --> 00:11:39.520
you can look at Pub semver.

00:11:39.520 --> 00:11:41.460
So that's the stuff
in your Pub spec.

00:11:41.460 --> 00:11:42.604
What about other files?

00:11:42.604 --> 00:11:44.020
There's a number
of files we want.

00:11:44.020 --> 00:11:45.926
A lot of them are
markdown files.

00:11:45.926 --> 00:11:47.050
You have to have a read me.

00:11:47.050 --> 00:11:47.820
You can make it look pretty.

00:11:47.820 --> 00:11:49.070
I'll give an example in a bit.

00:11:49.070 --> 00:11:50.530
Please have a change log.

00:11:50.530 --> 00:11:52.690
It helps people
keep track of what

00:11:52.690 --> 00:11:54.460
you've done in your release.

00:11:54.460 --> 00:11:56.620
Even if you do a
minor release for,

00:11:56.620 --> 00:11:58.780
like, internal plumbing
reasons, just put

00:11:58.780 --> 00:12:01.639
a change log entry that says,
changed internal plumbing.

00:12:01.639 --> 00:12:03.430
It's really helpful
for folks to understand

00:12:03.430 --> 00:12:05.200
how things have changed.

00:12:05.200 --> 00:12:07.720
If your code is on GitHub,
please use a contributing .md

00:12:07.720 --> 00:12:08.630
file.

00:12:08.630 --> 00:12:10.921
This file will actually be
linked any time anyone opens

00:12:10.921 --> 00:12:13.150
an issue or a pull request,
and it will tell them

00:12:13.150 --> 00:12:15.640
how to file an issue, what
should be included in issues,

00:12:15.640 --> 00:12:17.110
what process should they go
through when they do a pull

00:12:17.110 --> 00:12:17.680
request.

00:12:17.680 --> 00:12:22.090
Just a great kind of thing to
do to encourage contributions.

00:12:22.090 --> 00:12:23.620
And recently, with
the new Pub role,

00:12:23.620 --> 00:12:25.327
we actually now
support example files.

00:12:25.327 --> 00:12:27.160
So this is the simplest
example, and there's

00:12:27.160 --> 00:12:29.260
a few other formats we support.

00:12:29.260 --> 00:12:30.970
But if you actually
add an example file

00:12:30.970 --> 00:12:33.760
to the approved, conventional
example directory,

00:12:33.760 --> 00:12:35.267
we actually render
that in a tab.

00:12:35.267 --> 00:12:36.850
So let me show you
an example of that.

00:12:40.930 --> 00:12:46.864
So here is the video player
Flutter plug-in slash package.

00:12:46.864 --> 00:12:49.030
A few things-- you notice
it has a great change log.

00:12:49.030 --> 00:12:50.350
Well done.

00:12:50.350 --> 00:12:53.110
It does not have a gratuitous
and redundant change log

00:12:53.110 --> 00:12:55.120
title in the top of
the change log file

00:12:55.120 --> 00:12:57.050
because we know
it's the change log.

00:12:57.050 --> 00:12:59.650
Yes, I'm digging at people who
consistently add the change log

00:12:59.650 --> 00:13:01.660
header to change log files.

00:13:01.660 --> 00:13:03.759
You'll notice that
in the Versions tab,

00:13:03.759 --> 00:13:05.800
we show all the versions
that have been uploaded.

00:13:05.800 --> 00:13:07.440
And look.

00:13:07.440 --> 00:13:09.350
They actually have
perfect correlation.

00:13:09.350 --> 00:13:11.433
They've done the work to
make sure that everything

00:13:11.433 --> 00:13:14.210
is lined up here, except wait.

00:13:14.210 --> 00:13:15.290
Are they missing one?

00:13:15.290 --> 00:13:16.580
No, it looks pretty good.

00:13:16.580 --> 00:13:18.080
I think they did a good job.

00:13:18.080 --> 00:13:20.870
You'll see that the example
file was rendered here

00:13:20.870 --> 00:13:23.840
with pretty code
coloring, which is great.

00:13:23.840 --> 00:13:26.600
And really quick, let me
just go to the GitHub source,

00:13:26.600 --> 00:13:29.385
and let's look at
the raw read me file.

00:13:29.385 --> 00:13:30.760
And these are a
few little things

00:13:30.760 --> 00:13:34.870
that aren't discussed a
lot, so use markdown syntax.

00:13:34.870 --> 00:13:36.694
Really try to use the
triple tick syntax.

00:13:36.694 --> 00:13:38.360
Let me even zoom in
a little bit bigger.

00:13:40.714 --> 00:13:42.130
For some reason,
people still like

00:13:42.130 --> 00:13:45.050
to use the four space
indentation for code.

00:13:45.050 --> 00:13:46.840
One, keeping track
of the indentation

00:13:46.840 --> 00:13:48.214
and if you have
code blocks, it's

00:13:48.214 --> 00:13:49.550
just a miserable thing to do.

00:13:49.550 --> 00:13:51.216
And then you can't
specify the language.

00:13:51.216 --> 00:13:54.340
So if you actually do triple
tick XML or triple tick Dart,

00:13:54.340 --> 00:14:01.910
you get pretty formatting,
not only on GitHub, but also

00:14:01.910 --> 00:14:03.080
on the package site.

00:14:05.364 --> 00:14:06.530
So use triple ticks, please.

00:14:12.450 --> 00:14:16.942
So read the friendly manuals
on how to publish packages.

00:14:16.942 --> 00:14:18.650
Spend some time
understanding versioning.

00:14:18.650 --> 00:14:21.540
Format your markdown,
and use examples.

00:14:21.540 --> 00:14:24.310
Now, maintaining a package.

00:14:24.310 --> 00:14:28.410
Let's go look at the video
player one more time.

00:14:28.410 --> 00:14:29.670
Oops.

00:14:29.670 --> 00:14:31.770
Click on the link.

00:14:31.770 --> 00:14:33.860
There we go.

00:14:33.860 --> 00:14:35.950
So this is a new feature
of the package site.

00:14:35.950 --> 00:14:37.800
I don't know if people
have noticed this.

00:14:37.800 --> 00:14:39.610
Packages now have a score.

00:14:39.610 --> 00:14:42.090
Dun, dun, dun.

00:14:42.090 --> 00:14:45.100
So your score is comprised
of three things--

00:14:45.100 --> 00:14:47.507
your popularity, your
health, and your maintenance.

00:14:47.507 --> 00:14:49.090
Popularity-- I'm not
going to tell you

00:14:49.090 --> 00:14:52.547
how we do it because
any system can be gamed.

00:14:52.547 --> 00:14:54.130
The only thing you
should keep in mind

00:14:54.130 --> 00:14:55.897
is the more people
that use your package

00:14:55.897 --> 00:14:57.730
and depend on your
package, the more popular

00:14:57.730 --> 00:14:59.350
your package will be.

00:14:59.350 --> 00:15:02.836
Health is basically a measure
of mostly static analysis.

00:15:02.836 --> 00:15:04.710
So if you run Dart
Analyze over your package,

00:15:04.710 --> 00:15:08.130
if Dart Analyze comes back with
few or no warnings and errors,

00:15:08.130 --> 00:15:09.520
you have a higher health.

00:15:09.520 --> 00:15:11.879
We do run Analyzer
in Strong Mode,

00:15:11.879 --> 00:15:13.420
and so if you haven't
already enabled

00:15:13.420 --> 00:15:14.709
Strong Mode in your package--

00:15:14.709 --> 00:15:16.750
added analysis options--
you should because we're

00:15:16.750 --> 00:15:17.860
judging you on this.

00:15:17.860 --> 00:15:20.740
We want to encourage people
to move to the future--

00:15:20.740 --> 00:15:22.980
move to Dart 2 and Strong Mode.

00:15:22.980 --> 00:15:25.720
And the maintenance is a
number of other things around.

00:15:25.720 --> 00:15:27.610
Do you have a change log?

00:15:27.610 --> 00:15:29.080
Let's see what else is in there.

00:15:29.080 --> 00:15:30.334
Change log is what I remember.

00:15:30.334 --> 00:15:32.000
How often have you
updated your package?

00:15:32.000 --> 00:15:33.682
And actually, this
is mostly around

00:15:33.682 --> 00:15:35.140
if your package
hasn't been updated

00:15:35.140 --> 00:15:37.630
or any package hasn't been
updated in over a year,

00:15:37.630 --> 00:15:40.804
you start losing points, and
it descends to 0 at two years.

00:15:40.804 --> 00:15:42.970
So if you haven't touched
your package in two years,

00:15:42.970 --> 00:15:44.470
it will have a maintenance of 0.

00:15:44.470 --> 00:15:46.120
So if you're looking
to use packages,

00:15:46.120 --> 00:15:48.340
you should go look
at these scores.

00:15:48.340 --> 00:15:50.224
Obviously, a package
that is brand new

00:15:50.224 --> 00:15:51.890
might have-- and make
sure you highlight

00:15:51.890 --> 00:15:54.700
if it's been less than 30
days since it's been created.

00:15:54.700 --> 00:15:56.620
It might not have
a lot of users.

00:15:56.620 --> 00:15:59.119
But you can also differentiate
between a package that hasn't

00:15:59.119 --> 00:16:00.550
been updated in a year or two.

00:16:00.550 --> 00:16:02.170
We've been around
for a long time.

00:16:02.170 --> 00:16:04.212
Every packaged ecosystem
has a little bit of rot.

00:16:04.212 --> 00:16:06.378
We try to make sure that
we keep you away from that.

00:16:06.378 --> 00:16:08.590
And obviously, when you
search in the package site,

00:16:08.590 --> 00:16:11.090
we make sure that we basically
rank, not only by your search

00:16:11.090 --> 00:16:13.679
results, but also by a
combination of these factors,

00:16:13.679 --> 00:16:15.220
so that we try to
give you the best--

00:16:15.220 --> 00:16:16.930
not only a good match
for what you gave,

00:16:16.930 --> 00:16:18.730
but a package that's
high quality, popular,

00:16:18.730 --> 00:16:21.850
and has been maintained.

00:16:21.850 --> 00:16:25.330
And one final note I wanted
to bring up here is pana.

00:16:25.330 --> 00:16:28.020
So we actually have a package
that we publish called pana.

00:16:28.020 --> 00:16:29.990
It's short for package analyzer.

00:16:29.990 --> 00:16:32.537
This is what happens
when I name a package.

00:16:32.537 --> 00:16:34.120
But it's the underlying
infrastructure

00:16:34.120 --> 00:16:39.550
for how we measure health and
some aspects of maintenance.

00:16:39.550 --> 00:16:43.940
So one second here.

00:16:43.940 --> 00:16:45.700
You can install pana.

00:16:45.700 --> 00:16:48.390
So if you go to Pub,
global activate, pana,

00:16:48.390 --> 00:16:50.100
it'll install the pana package.

00:16:50.100 --> 00:16:53.430
And then you can run pana over
a package you get to publish,

00:16:53.430 --> 00:16:55.320
and figure out its score.

00:16:55.320 --> 00:16:56.850
There might be a
few little nuances

00:16:56.850 --> 00:16:58.019
around Flutter packages.

00:16:58.019 --> 00:16:59.310
Try it out on Flutter packages.

00:16:59.310 --> 00:17:01.560
If you have issues, let me know.

00:17:01.560 --> 00:17:04.650
One little interesting caveat
is that we actually go in

00:17:04.650 --> 00:17:07.550
and we modify the Pub spec
file and your analysis file--

00:17:07.550 --> 00:17:10.124
just your Pub spec file on disk.

00:17:10.124 --> 00:17:11.790
The reason we do that
is we want to do--

00:17:11.790 --> 00:17:12.829
when we do a version
solving, we want

00:17:12.829 --> 00:17:14.609
to make sure that
we don't factor

00:17:14.609 --> 00:17:18.650
in your dev dependencies, in
terms of what you depend on.

00:17:18.650 --> 00:17:20.460
So you can turn off
the no warning thing.

00:17:20.460 --> 00:17:23.220
Make sure your code is committed
into Git before you do this.

00:17:23.220 --> 00:17:25.980
We'll clean up the file when
we're done, but just FYI.

00:17:25.980 --> 00:17:28.230
But this is a great way,
before you publish a package,

00:17:28.230 --> 00:17:29.901
to see what would my health be.

00:17:29.901 --> 00:17:32.400
And again, if you're already
using our tools-- you're using,

00:17:32.400 --> 00:17:37.279
you know, VS Code, IntelliJ,
you're running the formatter,

00:17:37.279 --> 00:17:39.070
you should be in pretty
good shape already.

00:17:39.070 --> 00:17:42.600
But this will give you
kind of a very long JSON

00:17:42.600 --> 00:17:44.250
output explaining
exactly how we think

00:17:44.250 --> 00:17:47.470
about the health
of your package.

00:17:47.470 --> 00:17:51.040
So beyond just general
code maintenance, you know,

00:17:51.040 --> 00:17:52.400
everyone makes mistakes.

00:17:52.400 --> 00:17:54.100
This is one of the reasons
I love working in software

00:17:54.100 --> 00:17:56.080
is because issues like
this-- you get used to,

00:17:56.080 --> 00:17:57.420
OK, get, reset head.

00:17:57.420 --> 00:17:59.920
And you can go back.

00:17:59.920 --> 00:18:02.932
Your boss doesn't need to
know unless you published.

00:18:02.932 --> 00:18:05.680
But aside from, obviously,
having your friend--

00:18:05.680 --> 00:18:07.810
someone to help you with
code reviews and things,

00:18:07.810 --> 00:18:08.800
use the tools.

00:18:08.800 --> 00:18:10.680
Test your stuff.

00:18:10.680 --> 00:18:12.950
Again, Natalie here--
really, just the whole talk

00:18:12.950 --> 00:18:13.870
is owed to Natalie.

00:18:13.870 --> 00:18:15.570
She did so much work here.

00:18:15.570 --> 00:18:16.951
We have a great test package.

00:18:16.951 --> 00:18:17.950
We recommend you use it.

00:18:17.950 --> 00:18:20.500
It's the same test package
we use for, you know,

00:18:20.500 --> 00:18:23.830
low level shared libraries
and the web and on Flutter.

00:18:23.830 --> 00:18:25.035
It works really great.

00:18:25.035 --> 00:18:27.550
You use Pub run test
on the test package.

00:18:27.550 --> 00:18:29.710
We have static analysis
tools that work great.

00:18:29.710 --> 00:18:30.840
Use the analyzer.

00:18:30.840 --> 00:18:31.930
We have a great formatter.

00:18:31.930 --> 00:18:32.720
You can run it in line.

00:18:32.720 --> 00:18:34.136
You can run it
inside the editors.

00:18:34.136 --> 00:18:36.090
It works great.

00:18:36.090 --> 00:18:38.410
Well, I know we talked about
conventions a little bit.

00:18:38.410 --> 00:18:40.789
Just, like, agreeing on
formatting is so useful.

00:18:40.789 --> 00:18:43.330
I have yet to see anyone give
me an example of a line of code

00:18:43.330 --> 00:18:45.790
that was, like, a
bespoke formatting that

00:18:45.790 --> 00:18:47.950
was worth not being
able to just not think

00:18:47.950 --> 00:18:49.930
about whitespace arguments
and code reviews.

00:18:49.930 --> 00:18:52.060
Right?

00:18:52.060 --> 00:18:54.090
No?

00:18:54.090 --> 00:18:54.921
Really?

00:18:54.921 --> 00:18:55.420
Come on.

00:18:55.420 --> 00:18:56.961
Like, no arguments
about whitespace--

00:18:56.961 --> 00:18:59.410
like, the times I spent arguing
about whitespace and code

00:18:59.410 --> 00:18:59.910
reviews.

00:18:59.910 --> 00:19:02.410
Like, just use the
formatter, please.

00:19:02.410 --> 00:19:05.172
Bob has better style
than anybody here.

00:19:05.172 --> 00:19:06.880
And once you have all
those things gold--

00:19:06.880 --> 00:19:08.580
you have-- you're
analyzing your test,

00:19:08.580 --> 00:19:10.090
then use continuous integration.

00:19:10.090 --> 00:19:12.700
We use a lot of Travis
for Linux testing,

00:19:12.700 --> 00:19:14.030
and it supports some Mac.

00:19:14.030 --> 00:19:16.960
AppVeyor is available
for Windows testing.

00:19:16.960 --> 00:19:19.646
It's really simple.

00:19:19.646 --> 00:19:22.000
Put that in the .Travis file.

00:19:22.000 --> 00:19:24.400
You're good to go.

00:19:24.400 --> 00:19:28.070
And in fact, let me give
you a demo real quick.

00:19:28.070 --> 00:19:30.995
So I have a package
here called peanut.

00:19:33.700 --> 00:19:34.760
The trick is really fun.

00:19:34.760 --> 00:19:38.530
I think it will run
Pub build or Pub build

00:19:38.530 --> 00:19:41.200
against a package on
your system on your disk,

00:19:41.200 --> 00:19:43.620
And it'll do the work to
check out your GH Pages branch

00:19:43.620 --> 00:19:45.225
and commit everything
to GH Pages.

00:19:45.225 --> 00:19:47.350
But you don't have to,
like, check it out yourself.

00:19:47.350 --> 00:19:49.724
And then you can just push
your GH Pages branch to GitHub

00:19:49.724 --> 00:19:51.569
and you have your GH Page thing.

00:19:51.569 --> 00:19:53.610
There are three people
here who've done GH Pages,

00:19:53.610 --> 00:19:55.160
and everyone else is like,
what are you talking about?

00:19:55.160 --> 00:19:55.420
It's cool.

00:19:55.420 --> 00:19:55.919
Trust me.

00:19:55.919 --> 00:19:56.990
Ask me afterwards.

00:19:56.990 --> 00:19:58.780
But I get to enable
testing on this--

00:19:58.780 --> 00:19:59.950
Travis.

00:19:59.950 --> 00:20:02.050
So let's do that quick.

00:20:02.050 --> 00:20:04.330
So you see I have
source code here.

00:20:04.330 --> 00:20:08.020
I didn't increase my font
size before giving a talk.

00:20:08.020 --> 00:20:10.060
Actually, even better
to go to the console.

00:20:10.060 --> 00:20:10.660
That's better.

00:20:13.440 --> 00:20:17.039
Here is a Travis file I'm
just going to add to my repo.

00:20:17.039 --> 00:20:18.580
Before I add it to
my repo, though, I

00:20:18.580 --> 00:20:21.270
want to enable
Travis on the site.

00:20:21.270 --> 00:20:23.610
So basically, it's
a find and replace.

00:20:23.610 --> 00:20:24.570
Travis-ci.org.

00:20:29.137 --> 00:20:31.720
You'll see Travis has not been
activated yet for this package,

00:20:31.720 --> 00:20:34.580
so let's do that.

00:20:34.580 --> 00:20:36.440
Travis is enabled.

00:20:36.440 --> 00:20:39.090
A couple little tricks
here that I really like--

00:20:39.090 --> 00:20:41.090
you can say only build
if there's a Travis file.

00:20:41.090 --> 00:20:42.350
Whatever.

00:20:42.350 --> 00:20:45.110
This is something I've really
pushed on the Dart team a lot,

00:20:45.110 --> 00:20:46.610
and I encourage you to do it.

00:20:46.610 --> 00:20:48.720
Travis now supports cron jobs.

00:20:48.720 --> 00:20:53.270
So it'll rerun the tests on the
last master branch or whatever

00:20:53.270 --> 00:20:54.720
as often as you want.

00:20:54.720 --> 00:20:57.080
I generally do once a week.

00:20:57.080 --> 00:21:00.197
What's great about this
is now, if you have--

00:21:00.197 --> 00:21:02.280
obviously, you guys have
dependencies on packages.

00:21:02.280 --> 00:21:03.080
Likely.

00:21:03.080 --> 00:21:04.850
Those packages might be revving.

00:21:04.850 --> 00:21:07.720
You might say, I want to depend
on the stable of the dev, SDK.

00:21:07.720 --> 00:21:10.005
You know, that Google
is revving Dart often.

00:21:10.005 --> 00:21:11.630
And what this makes
sure is even if you

00:21:11.630 --> 00:21:14.451
haven't touched the package in
a while, the test will be rerun.

00:21:14.451 --> 00:21:15.950
And if the Dart SDK
has been updated

00:21:15.950 --> 00:21:17.658
or any of your
dependencies have updated,

00:21:17.658 --> 00:21:19.040
your test will still be rerun.

00:21:19.040 --> 00:21:21.140
And it's amazing, even
those e-mails-- like, oh.

00:21:21.140 --> 00:21:24.230
Someone else you depend on has
broken the version constraint

00:21:24.230 --> 00:21:26.887
contract, and now you
know who to go blame.

00:21:26.887 --> 00:21:28.970
But this actually tracks
well what your users will

00:21:28.970 --> 00:21:29.900
go through, as well.

00:21:29.900 --> 00:21:31.330
So use cron jobs in Travis.

00:21:31.330 --> 00:21:33.260
It's really nice.

00:21:33.260 --> 00:21:35.887
Then I can just go into
here and go get push.

00:21:35.887 --> 00:21:37.470
In theory, I should
do a pull request.

00:21:37.470 --> 00:21:38.720
But again, I have no one
helping me with peanut.

00:21:38.720 --> 00:21:39.560
If someone wants
to help me and be

00:21:39.560 --> 00:21:42.018
my friend on the peanut package,
that would be much easier.

00:21:47.810 --> 00:21:48.720
And let's push.

00:21:52.200 --> 00:21:53.280
Drum roll.

00:21:53.280 --> 00:22:00.412
Now if I go into Travis and I
hit reload and I hit reload,

00:22:00.412 --> 00:22:01.520
ah.

00:22:01.520 --> 00:22:04.180
And there's the first build--

00:22:04.180 --> 00:22:07.150
running the test for peanut
on Dart stable and Dart dev.

00:22:07.150 --> 00:22:08.504
This is another great trick.

00:22:08.504 --> 00:22:10.670
If you care about supporting
older versions of Dart,

00:22:10.670 --> 00:22:11.960
you can specify
the version ranges.

00:22:11.960 --> 00:22:12.751
Works really great.

00:22:16.260 --> 00:22:17.410
So that's Travis support.

00:22:17.410 --> 00:22:18.951
Again, there's great
docs for Travis.

00:22:18.951 --> 00:22:21.010
If you just search for,
like, Travis docs Dart,

00:22:21.010 --> 00:22:23.481
there's great documentation
about how that all works.

00:22:23.481 --> 00:22:23.980
[COUGHING]

00:22:23.980 --> 00:22:26.090
Excuse me.

00:22:26.090 --> 00:22:29.110
And besides that, we just have
a great collection of tools.

00:22:29.110 --> 00:22:33.590
So our analysis also supports
a number of customizable Lints.

00:22:33.590 --> 00:22:35.830
There's the website
for the Linter.

00:22:35.830 --> 00:22:39.357
Phil's done a bunch of
work on the Linter package,

00:22:39.357 --> 00:22:40.190
and these are great.

00:22:40.190 --> 00:22:43.270
This is like Dart formatting
in my world, which is like, oh.

00:22:43.270 --> 00:22:45.340
You know, we care about
if you order, you know,

00:22:45.340 --> 00:22:46.330
the import directives.

00:22:46.330 --> 00:22:47.410
You have some argument
in the code review.

00:22:47.410 --> 00:22:49.534
Please order the-- no, just
have that Linter do it.

00:22:49.534 --> 00:22:51.250
You know, no, you're
using single space

00:22:51.250 --> 00:22:52.610
and really it should be double--

00:22:52.610 --> 00:22:53.290
single quotes.

00:22:53.290 --> 00:22:53.980
You should be using
double quotes.

00:22:53.980 --> 00:22:54.730
Like, no, no, no.

00:22:54.730 --> 00:22:56.660
Like, we'll just
use single quotes.

00:22:56.660 --> 00:22:59.200
That's the way we're doing
it and it'll just work.

00:22:59.200 --> 00:23:01.764
And so it really gets rid of a
lot of those kind of arguments

00:23:01.764 --> 00:23:03.680
and also just makes your
code more consistent,

00:23:03.680 --> 00:23:04.450
and it helps you find bugs.

00:23:04.450 --> 00:23:06.200
Like, we'll actually
statically figure out

00:23:06.200 --> 00:23:09.460
if the regex you put in a
string is a valid regex.

00:23:09.460 --> 00:23:11.560
So you don't find
out at runtime.

00:23:11.560 --> 00:23:12.730
There are dozens of Lints.

00:23:12.730 --> 00:23:14.165
They're being
added all the time.

00:23:14.165 --> 00:23:15.040
Check out the Linter.

00:23:17.790 --> 00:23:20.490
Isn't this the most fun error
you get when you do Pub?

00:23:20.490 --> 00:23:22.281
You don't get the latest
version of Quiver,

00:23:22.281 --> 00:23:23.790
and you don't know why.

00:23:23.790 --> 00:23:25.660
This drove me completely insane.

00:23:25.660 --> 00:23:28.690
And so I made a little
tool to help with it.

00:23:28.690 --> 00:23:31.560
It's called PubViz.

00:23:31.560 --> 00:23:33.762
Basically visualizes
your Pub dependencies.

00:23:33.762 --> 00:23:35.220
It's also played
to graphviz, which

00:23:35.220 --> 00:23:40.210
is the technology I use here,
and you get this crazy thing.

00:23:40.210 --> 00:23:42.250
This is why you
get a 4 K monitor.

00:23:42.250 --> 00:23:43.550
You can see it all.

00:23:43.550 --> 00:23:44.924
It works really nicely.

00:23:44.924 --> 00:23:46.840
So again, I talked about--
there's trade offs.

00:23:46.840 --> 00:23:49.030
You know, inside Google, there's
many articles discussing that.

00:23:49.030 --> 00:23:50.571
We have one version
of every package,

00:23:50.571 --> 00:23:53.140
and it makes a lot of things
easy and a lot of things

00:23:53.140 --> 00:23:53.897
really hard.

00:23:53.897 --> 00:23:55.730
And so, obviously, in
the open source world,

00:23:55.730 --> 00:23:57.896
you get to think about how
version constraints work.

00:23:57.896 --> 00:23:59.030
It can be a problem.

00:23:59.030 --> 00:24:00.790
I think it's great because
it enables an ecosystem that

00:24:00.790 --> 00:24:03.280
actually is based on knowing
the dependencies you're using

00:24:03.280 --> 00:24:05.749
and having consistent
dependencies.

00:24:05.749 --> 00:24:06.790
But you can zoom in here.

00:24:06.790 --> 00:24:08.410
There's a Zoom In
button so you can

00:24:08.410 --> 00:24:09.944
look to see how things work.

00:24:09.944 --> 00:24:12.360
You can actually hover over
on a package to see, oh, like,

00:24:12.360 --> 00:24:13.450
who's using that?

00:24:13.450 --> 00:24:15.370
I print out in the console
dump in the Chrome.

00:24:15.370 --> 00:24:17.850
You can actually go look
and see the output there.

00:24:17.850 --> 00:24:19.810
So you can figure
out what's used what

00:24:19.810 --> 00:24:22.650
and figure out why Quiver's not
being updated to the latest.

00:24:22.650 --> 00:24:25.230
It works really nice.

00:24:25.230 --> 00:24:26.860
A final idea for a tool--

00:24:26.860 --> 00:24:30.460
often we have
constellations of packages,

00:24:30.460 --> 00:24:32.325
and so examples here
are the build tool.

00:24:32.325 --> 00:24:34.700
We have a number of packages
we want to work on together.

00:24:34.700 --> 00:24:38.615
We tend to rev them and
work on them as one chunk.

00:24:38.615 --> 00:24:39.740
Angular is another example.

00:24:39.740 --> 00:24:42.890
We have the Angular compiler and
forms and routing and the AST

00:24:42.890 --> 00:24:43.730
package.

00:24:43.730 --> 00:24:45.052
We bring these all in together.

00:24:45.052 --> 00:24:46.760
We want to manage
these as one repository

00:24:46.760 --> 00:24:49.460
with one set of tests.

00:24:49.460 --> 00:24:51.000
It makes things much easier.

00:24:51.000 --> 00:24:55.190
So again, we have a
tool Called mono repo.

00:24:55.190 --> 00:24:57.020
And what this helps
to do is manage

00:24:57.020 --> 00:24:58.510
that set of or
that constellation

00:24:58.510 --> 00:25:00.190
of packages in one repo.

00:25:00.190 --> 00:25:02.854
And so an example of a command
you can run is mono Travis.

00:25:02.854 --> 00:25:05.270
And what you do is you actually
put a .Travis file in each

00:25:05.270 --> 00:25:07.510
sub-repo, and you use the
format I described earlier.

00:25:07.510 --> 00:25:08.420
Analyze tests.

00:25:08.420 --> 00:25:10.100
You can customize
it if you want,

00:25:10.100 --> 00:25:12.650
and then mono repo will go
through in each sub-directory--

00:25:12.650 --> 00:25:15.350
the .Travis files,
and create a global,

00:25:15.350 --> 00:25:18.430
top-level Travis file
and a shell script.

00:25:18.430 --> 00:25:19.910
So it will run
all those packages

00:25:19.910 --> 00:25:22.214
as though they're each
individually configured.

00:25:22.214 --> 00:25:23.630
So you don't have
to become a bash

00:25:23.630 --> 00:25:27.310
expert to configure multiple
packages in one Git repo.

00:25:27.310 --> 00:25:28.170
And it just works.

00:25:28.170 --> 00:25:30.296
And so we use this across
a number of our packages.

00:25:30.296 --> 00:25:32.836
If you want to [? bait ?] a mono
repo and put a bunch of code

00:25:32.836 --> 00:25:34.610
in one repo, but have
separate packages,

00:25:34.610 --> 00:25:37.120
mono repo is a good helper.

00:25:37.120 --> 00:25:38.864
So that's maintaining, you know.

00:25:38.864 --> 00:25:40.780
You can look at your
score on the package site

00:25:40.780 --> 00:25:44.009
and run pana locally
before you publish.

00:25:44.009 --> 00:25:44.800
Make sure you test.

00:25:44.800 --> 00:25:46.490
We have a great test
package for that.

00:25:46.490 --> 00:25:48.340
And Travis and
other CI solutions

00:25:48.340 --> 00:25:51.610
are a great way to make
sure you maintain quality.

00:25:51.610 --> 00:25:53.890
And also, it's a great
way to help contributions

00:25:53.890 --> 00:25:55.582
because when they
send pull requests,

00:25:55.582 --> 00:25:57.040
they get tested
before they're run.

00:25:57.040 --> 00:25:58.780
So like, I'm not going to
tell you what you did wrong.

00:25:58.780 --> 00:25:59.740
But go look at Travis.

00:25:59.740 --> 00:26:01.177
Get Travis green,
then we'll talk.

00:26:01.177 --> 00:26:03.010
And of course, we have
a bunch of tools that

00:26:03.010 --> 00:26:04.880
will help you along the way.

00:26:04.880 --> 00:26:08.410
So I want you all to go build
Dart packages and Flutter

00:26:08.410 --> 00:26:09.310
packages.

00:26:09.310 --> 00:26:10.650
But build them great.

00:26:10.650 --> 00:26:13.150
And we give you a bunch of docs
and tools to help with that.

00:26:13.150 --> 00:26:14.530
I know I've gone through
a lot of content here.

00:26:14.530 --> 00:26:15.030
Don't worry.

00:26:15.030 --> 00:26:16.510
This video will be on YouTube.

00:26:16.510 --> 00:26:18.310
I will put a link
in the description

00:26:18.310 --> 00:26:21.990
below, if you want to see links
to the things I discussed--

00:26:21.990 --> 00:26:23.770
the tools I discussed here.

00:26:23.770 --> 00:26:26.020
And go build great
Dart packages.

00:26:26.020 --> 00:26:26.800
Thank you.

00:26:26.800 --> 00:26:30.150
[APPLAUSE]

