WEBVTT
Kind: captions
Language: en

00:00:01.719 --> 00:00:06.759
&gt;&gt;Jeff Chang: Hello, everybody. Thanks a lot
for coming. This is the Chrome Fireside Chat,

00:00:06.759 --> 00:00:09.460
and we're looking forward to answering some
of your questions.

00:00:09.460 --> 00:00:14.350
As you can see, there's a URL up there on
the screen. You can go there to submit and

00:00:14.350 --> 00:00:19.179
vote on the questions that people have already
submitted. So we're going through those questions

00:00:19.179 --> 00:00:22.369
and then of course we'll be taking audience
questions at the microphone, too, so don't

00:00:22.369 --> 00:00:24.599
be shy. Please come up to the microphones
if you have a question.

00:00:24.599 --> 00:00:29.920
But first, let's do a round of introductions
and I'll let everybody here introduce themselves.

00:00:29.920 --> 00:00:35.700
&gt;&gt;Ian Ellison-Taylor: Thanks. Yeah, my name
is Ian Ellison-Taylor. I'm the director of

00:00:35.700 --> 00:00:44.140
product management for the web platform pieces
and other related stuff-ish. Pretty vague.

00:00:44.140 --> 00:00:49.320
&gt;&gt;Jeff Chang: My name is Jeff Chang. I'm a
product manager on the Chrome browser team

00:00:49.320 --> 00:00:54.090
focusing on a couple of areas such as UI features,
plug-ins, and privacy.

00:00:54.090 --> 00:01:01.670
&gt;&gt;Erik Kay: My name is Erik Kay. I'm the engineering
manager for apps, extensions, and native client.

00:01:01.670 --> 00:01:07.430
&gt;&gt;Alex Russell: I'm Alex Russell. I'm a software
engineer. I work on Chrome Frame and the Chrome

00:01:07.430 --> 00:01:11.670
web platform more generally.
&gt;&gt;Pavel Feldman: I'm Pavel Feldman, software

00:01:11.670 --> 00:01:17.900
engineer working on Chrome developer tools
and Webkit web inspector.

00:01:17.900 --> 00:01:24.350
&gt;&gt;Jeff Chang: Okay. I'm going to switch it
over to the questions now, so -- and I should

00:01:24.350 --> 00:01:28.330
mention we have one other person from the
Chrome OS team who is running a bit late but

00:01:28.330 --> 00:01:34.180
he should be here really soon.
So it looks like the first question is actually

00:01:34.180 --> 00:01:38.150
about Chrome OS. "When are you showing the
ARM powered Chromebooks? Are ARM cortex-A9

00:01:38.150 --> 00:01:43.229
processors with lots of RAM fast enough today?
What is the status of Chrome OS on ARM?"

00:01:43.229 --> 00:01:46.880
I unfortunately don't know the answer to that
so I think we should wait until our Chrome

00:01:46.880 --> 00:01:49.710
OS team member comes here and he will happily
answer that question.

00:01:49.710 --> 00:01:58.110
And again, just to remind you guys, feel free
to come up to the microphones. Don't be shy.

00:01:58.110 --> 00:02:01.550
Kan, just in time.
I'll go ahead and move on to the second question

00:02:01.550 --> 00:02:06.170
while he's getting settled in. "Google Chrome
browser is already available for PC, Mac,

00:02:06.170 --> 00:02:10.400
Chrome OS, and Google TV. Will Google Chrome
be available for Android devices in the future?"

00:02:10.400 --> 00:02:20.300
One of you guys want to handle this?
&gt;&gt;Ian Ellison-Taylor: I don't know how to

00:02:20.300 --> 00:02:25.081
answer that. I don't -- we're not -- it's
not something we're talking about right now.

00:02:25.081 --> 00:02:31.730
&gt;&gt;Jeff Chang: I mean, I think the important
thing to remember at the end of the day is,

00:02:31.730 --> 00:02:35.360
you know, what we're trying to accomplish
with Chrome is to make the web better -- right?

00:02:35.360 --> 00:02:39.500
-- to make web browsers better, so obviously
there's a web browser on Android and, you

00:02:39.500 --> 00:02:44.150
know, we'd like to work with them to make
that as compelling and as good of a web browsing

00:02:44.150 --> 00:02:47.840
experience as possible.
&gt;&gt;Erik Kay: One thing I'll toss out is that

00:02:47.840 --> 00:02:53.370
while it's not strictly Chrome, we share an
awful lot of code with the Android team. We

00:02:53.370 --> 00:02:59.200
share Webkit, of course. We share V8. We share
our networking stack. And we're working on

00:02:59.200 --> 00:03:03.400
sharing even more over time.
&gt;&gt;Alex Russell: It's also worth commenting

00:03:03.400 --> 00:03:07.150
that mobile has a lot of separate challenges,
specifically on constrained memory footprint

00:03:07.150 --> 00:03:13.520
devices where the multiprocess model poses
new and interesting impositions where on the

00:03:13.520 --> 00:03:16.989
desktop world, where would you have got a
couple of gig of memory just laying around,

00:03:16.989 --> 00:03:23.090
things are different. So...
&gt;&gt;Jeff Chang: Sorry. I wanted to get back

00:03:23.090 --> 00:03:30.200
to the first question I skipped over.
So Kan, you want to handle that one?

00:03:30.200 --> 00:03:34.790
&gt;&gt;Kan Lai: Okay. So as we've announced before,
we are definitely working on ARM, and we think

00:03:34.790 --> 00:03:41.140
it's actually a really interesting platform
for us to be able to get some of the low-power

00:03:41.140 --> 00:03:46.090
attributes you get with ARM devices and be
able to get thinner devices as well.

00:03:46.090 --> 00:03:50.050
It's something the team is continuing to work
on. We're obviously right now focused on getting

00:03:50.050 --> 00:03:55.010
sort of the Samsung Acer devices out the door,
but these are hot on the trails.

00:03:55.010 --> 00:04:01.280
&gt;&gt;Jeff Chang: Cool. Now we'll take a question
from the audience.

00:04:01.280 --> 00:04:02.550
&gt;&gt; I have a question about Google Chrome Frame.
I'm a big fan of Google Chrome Frame.

00:04:02.550 --> 00:04:03.550
On our site, we've -- any IE6 user who comes
to the site, we put up a little dialogue that

00:04:03.550 --> 00:04:04.550
says, "Hey, you should get Google Chrome Frame."
We've got a big button. And underneath it,

00:04:04.550 --> 00:04:06.319
we have a little link that says, "Or you can
continue at your peril."

00:04:06.319 --> 00:04:10.760
And we put analytics up and we find that 95%
plus of people are clicking on the link and

00:04:10.760 --> 00:04:13.436
continuing at their peril. They are just not
clicking on that button. And I wonder if there's

00:04:13.436 --> 00:04:20.040
any best practices we could use to try to
make it a little more inviting for people

00:04:20.040 --> 00:04:27.050
to click on the button. They're getting a
terrible experience when they click on that

00:04:27.050 --> 00:04:28.050
link.
The only thing they're getting out of it is

00:04:28.050 --> 00:04:37.090
they're not installing Google Chrome Frame,
which is not good for them or us.

00:04:37.090 --> 00:04:41.780
What could we do?
&gt;&gt;Alex Russell: Don't give them the option.

00:04:41.780 --> 00:04:43.400
[Laughter]
&gt;&gt; I...

00:04:43.400 --> 00:04:49.400
&gt;&gt;Alex Russell: Seriously. I don't mean that
to be flip. I'd say that if your site has

00:04:49.400 --> 00:04:54.080
such a wide chasm in experience between, you
know, "You're going to get a terrible experience

00:04:54.080 --> 00:04:57.280
here" or "You could get a modern browser"
-- right? -- like that's --

00:04:57.280 --> 00:04:59.290
&gt;&gt; "Terrible" is such a strong word. It's
merely bad.

00:04:59.290 --> 00:05:02.971
&gt;&gt;Alex Russell: Well, okay. And this is actually
an interesting question because there is a

00:05:02.971 --> 00:05:05.020
gradient of experience that you can deliver,
right?

00:05:05.020 --> 00:05:10.270
Some features are going to never work on a
terrible old browser, whatever that browser

00:05:10.270 --> 00:05:12.830
might be.
You know, it's not like IE is unique here.

00:05:12.830 --> 00:05:18.580
Netscape4 isn't going to support WebGL either.
And so we have this problem where there's

00:05:18.580 --> 00:05:22.150
some set of features which you can shim in,
you can probably fill in, and for those, if

00:05:22.150 --> 00:05:25.449
that's what your site is mostly composed of,
I think it does make sense to do the incremental

00:05:25.449 --> 00:05:30.960
engineering effort to go, you know, say, "Hey,
here's a link to deliver an alternative experience."

00:05:30.960 --> 00:05:35.730
If on the other hand you sort of want to lay
off those shackles and deliver the best experience

00:05:35.730 --> 00:05:40.710
you can, I think it's maybe in your interest,
then, to not offer the option. Just say, you

00:05:40.710 --> 00:05:44.650
know, "Here's a set of good options and our
site requires one of them."

00:05:44.650 --> 00:05:49.440
&gt;&gt;Ian Ellison-Taylor: (Speaker is off microphone)
&gt;&gt;Alex Russell: So the install -- you're saying

00:05:49.440 --> 00:05:52.259
that they're not even clicking on the link.
The install experience is getting better.

00:05:52.259 --> 00:05:54.910
&gt;&gt; Yeah. They have no idea how good or bad
the install experience might be.

00:05:54.910 --> 00:05:59.520
&gt;&gt;Alex Russell: That's right. Yeah. So I think
that's a question of UI for you to test. I

00:05:59.520 --> 00:06:03.289
wish I had a better answer than -- other than
don't give them the option.

00:06:03.289 --> 00:06:07.970
&gt;&gt;Erik Kay: Just on the flip side, though,
I mean, a number of Google properties have

00:06:07.970 --> 00:06:13.160
stopped supporting IE6 at this point. It's
certainly not unprecedented to stop -- you

00:06:13.160 --> 00:06:21.330
know, stop supporting older browsers.
&gt;&gt; I mean, we'd like to do that. I mean, of

00:06:21.330 --> 00:06:22.350
course we want to extend the strategy to IE7,
and, you know, if this button-plus-link strategy

00:06:22.350 --> 00:06:26.960
had worked really well for IE6, I think we
would be pushing it much harder, maybe even

00:06:26.960 --> 00:06:30.400
up to IE8, today.
But we don't want to annoy people if they're

00:06:30.400 --> 00:06:33.310
just going to -- if they're all just going
to click the link, then, you know, what have

00:06:33.310 --> 00:06:35.690
I done?
&gt;&gt;Alex Russell: So what we have seen for Google

00:06:35.690 --> 00:06:41.400
properties is that when we do say "Please
get Chrome Frame or a modern browser and those

00:06:41.400 --> 00:06:46.259
are the only choices," that's what they do.
They do go and install the plug-in. So --

00:06:46.259 --> 00:06:47.669
&gt;&gt; That's good to hear.
I also wanted to offer a suggestion. "Google

00:06:47.669 --> 00:06:49.430
Chrome Frame" is a pretty odd-sounding name,
and I know you've heard this before. Have

00:06:49.430 --> 00:06:58.419
we considered like Chrome Light?
&gt;&gt;Alex Russell: Do you have a --

00:06:58.419 --> 00:07:03.220
Chrome Light?
&gt;&gt; Light. It's a light version of Chrome.

00:07:03.220 --> 00:07:05.200
It's not the full version; it's light.
&gt;&gt;Alex Russell: Interesting.

00:07:05.200 --> 00:07:06.200
[Laughter]
&gt;&gt;Alex Russell: I'm not a huge fan of the

00:07:06.200 --> 00:07:11.000
name either so, noted.
&gt;&gt; Thank you.

00:07:11.000 --> 00:07:15.930
&gt;&gt;Jeff Chang: Thank you. I'm going to jump
to the Moderator questions now.

00:07:15.930 --> 00:07:20.639
So "What is the status of SPDY adoption outside
of Google and for what applications or use

00:07:20.639 --> 00:07:22.520
cases do you think it is a particularly good
fit?"

00:07:22.520 --> 00:07:34.600
&gt;&gt;Erik Kay: Yeah. We don't have the expert
in the field here, but I used to sit next

00:07:34.600 --> 00:07:43.370
to him so I'll try.
Anyway, we're working with a number of partners

00:07:43.370 --> 00:07:47.840
on this front, and we're getting a lot of
interest. The sort of people who are most

00:07:47.840 --> 00:07:55.120
interested are large website providers who
really want to optimize the experience for,

00:07:55.120 --> 00:08:01.160
you know, as many of their users as they can.
Also, for content accelerators, you know,

00:08:01.160 --> 00:08:06.740
edge hosting, that sort of thing.
As you know, we've -- we've got a module to

00:08:06.740 --> 00:08:12.990
make it supported in Apache. It's built into
Chrome. It's now supported on all -- I think

00:08:12.990 --> 00:08:17.310
all Google properties. So if you're using
Chrome and Google properties, you're automatically

00:08:17.310 --> 00:08:22.440
benefitting from it right now, and we're out
pushing it and advocating others to adopt

00:08:22.440 --> 00:08:24.919
it.
So really there are no barriers. It's all

00:08:24.919 --> 00:08:31.599
open source, and we're -- we're just -- we're
trying to push it out there as best we can.

00:08:31.599 --> 00:08:34.830
&gt;&gt;Jeff Chang: How about let's take another
microphone question.

00:08:34.830 --> 00:08:43.339
Oh, from the back microphone.
&gt;&gt; So I remember when a couple of our lab

00:08:43.339 --> 00:08:45.670
students got CR48s and we went ahead and started
hacking them and noticed that they ran a flavor

00:08:45.670 --> 00:08:49.019
of gen 2 Linux.
This morning during the keynote, I noticed

00:08:49.019 --> 00:08:57.829
that neither gen 2 nor Linux nor any of the
open source contributions that made up the

00:08:57.829 --> 00:09:06.820
original CR48 stack were talked about.
Have you guys ditched that in favor of some

00:09:06.820 --> 00:09:13.160
BIOS-less, OS-less approach to Chrome OS or
did you guys just forget to mention Linux?

00:09:13.160 --> 00:09:18.370
&gt;&gt;Kan Lai: So absolutely we're still using
Linux. It's definitely at the core of what

00:09:18.370 --> 00:09:22.170
we're building on top of.
The Linux -- the kernel team has done an amazing

00:09:22.170 --> 00:09:25.569
job helping us, and we've been working closely
with them as well.

00:09:25.569 --> 00:09:31.231
We definitely do credit them in the -- if
you go through our "about" menus and all that

00:09:31.231 --> 00:09:34.939
kind of stuff, and our documentation and our
code, all the credits are there.

00:09:34.939 --> 00:09:40.300
You're right, we definitely didn't mention
it during the keynote itself. That might have

00:09:40.300 --> 00:09:46.709
been an oversight or also given sort of the
more consumer-focused messaging that we were

00:09:46.709 --> 00:09:48.819
trying to --
&gt;&gt; Does marketing have a Linux allergy?

00:09:48.819 --> 00:09:53.790
[Laughter]
&gt;&gt;Kan Lai: I'll leave that for you to decide.

00:09:53.790 --> 00:09:59.980
&gt;&gt; Thank you.
&gt;&gt;Jeff Chang: Okay. Let me take a question

00:09:59.980 --> 00:10:02.169
from the front microphone and then we'll jump
back to the Moderator.

00:10:02.169 --> 00:10:03.169
&gt;&gt; Sure. So I was really excited this morning
to hear about the Chromebook program for education

00:10:03.169 --> 00:10:06.319
in schools. It seems like an amazing price,
and it would be really wonderful.

00:10:06.319 --> 00:10:13.179
So I spent a lot of the last year working
in a school just teaching some kids how to

00:10:13.179 --> 00:10:15.220
do HTML and CSS, some elementary school kids,
and so we were using some blah Windows 7 laptops,

00:10:15.220 --> 00:10:20.369
but it did have NotePad and it did have, you
know, the ability to play around with things

00:10:20.369 --> 00:10:30.889
in a file and reload them in a browser and,
you know, we could go into JavaScript or we

00:10:30.889 --> 00:10:35.670
could mess around with RGB color codes or
whatever, and something that's a little more

00:10:35.670 --> 00:10:40.339
flexible than like the Chrome developer tools.
So how -- if you were going to use a Chromebook

00:10:40.339 --> 00:10:49.029
for such a thing, how would you go about doing
that? What should I be looking for?

00:10:49.029 --> 00:10:54.290
&gt;&gt;Kan Lai: So it's a great question. In fact,
that's a question that we actually on the

00:10:54.290 --> 00:10:57.629
team ask a lot, because we have developers
who want to be able to code completely in

00:10:57.629 --> 00:11:00.670
Chrome OS as well.
And I think that's something we want to shoot

00:11:00.670 --> 00:11:03.420
for in the future. It's definitely one of
the goals that we have.

00:11:03.420 --> 00:11:08.079
In fact, you're seeing some of this already
today with a lot of cloud-based IDEs, right?

00:11:08.079 --> 00:11:13.190
Cloud 9 was one of the ones that recently
came out that does a really good job of this.

00:11:13.190 --> 00:11:17.490
And our hope is more and more products like
that will come out so that developers will

00:11:17.490 --> 00:11:26.790
be able to, you know, code directly in a browser
and have basically the app run live and update

00:11:26.790 --> 00:11:30.249
and all that kind of stuff instantaneously.
So that's definitely a use case we're looking

00:11:30.249 --> 00:11:31.689
forward for.
&gt;&gt; So I guess a quick follow-up, then.

00:11:31.689 --> 00:11:37.540
Do you see that as something that requires
integration into Chrome OS as a system or

00:11:37.540 --> 00:11:44.309
is it that we just need some awesome website,
Web app, to come along that will help people

00:11:44.309 --> 00:11:47.550
do that?
&gt;&gt;Pavel Feldman: So it's kind of both. We're

00:11:47.550 --> 00:11:53.439
currently working with both Cloud 9 and Orion
on the integration with the Chrome environment.

00:11:53.439 --> 00:11:59.600
Everything that you can see in the Chrome
dev tools, we now expose via the remove debugging

00:11:59.600 --> 00:12:05.139
product code and you can attach to it at via
socket or Chrome Extension. So we allow websites,

00:12:05.139 --> 00:12:11.339
specific websites, that are cloud IDEs, per
se, or stand-alone web IDEs, be them Java-based

00:12:11.339 --> 00:12:16.549
or any other kind of IDEs, to connect to Chrome
instrumentation and replace developer tools

00:12:16.549 --> 00:12:21.970
and do an integration seamless experience
for debugging and exploring code and such.

00:12:21.970 --> 00:12:27.989
So you should just be -- just stay with us
and you'll see it happening.

00:12:27.989 --> 00:12:32.559
&gt;&gt; Thanks very much.
&gt;&gt;Jeff Chang: Okay. Let's take a question

00:12:32.559 --> 00:12:35.889
from the Google Moderator page.
"What upcoming features to Chrome are each

00:12:35.889 --> 00:12:41.160
of you most excited about?"
I'll go first. I can take this.

00:12:41.160 --> 00:12:44.910
So one of the things that we're working on
in Chrome that I'm most excited about doesn't

00:12:44.910 --> 00:12:49.959
necessarily have a name, per se, but it's
just kind of the increasingly personalized

00:12:49.959 --> 00:12:53.899
versions of Chrome that you can run.
And so what I mean by that is, currently if

00:12:53.899 --> 00:12:59.179
you're using the Chrome synchronization feature,
you can back up all your data to the cloud,

00:12:59.179 --> 00:13:04.579
including bookmarks, apps, extensions, auto-fill,
passwords, et cetera, et cetera, and then

00:13:04.579 --> 00:13:07.779
you can take that data and you can sync it
across all your devices where you're running

00:13:07.779 --> 00:13:12.170
Chrome. Laptops, computers, et cetera.
And so that's great because it enables you

00:13:12.170 --> 00:13:16.410
to sync all that -- those personalizations
and customizations across all your installs

00:13:16.410 --> 00:13:19.049
of Chrome.
But also in the future, we're working on a

00:13:19.049 --> 00:13:23.803
feature where if you happen to share one computer
with multiple people -- suppose you and your

00:13:23.803 --> 00:13:28.100
girlfriend or you and your spouse share one
computer -- then obviously you each have your

00:13:28.100 --> 00:13:32.620
own personalized Chrome running, your own
tastes, your own preferences, and so it's

00:13:32.620 --> 00:13:36.019
kind of hard to switch back and forth.
However, we're working on a feature which

00:13:36.019 --> 00:13:40.519
we're internally calling "profiles" which
will allow you to run multiple Chrome windows

00:13:40.519 --> 00:13:45.169
side by side, even at the same time, which
each run within their own, you know, kind

00:13:45.169 --> 00:13:50.410
of bucket or segment where all the personalized
features, all the sync'd data types, are siloed.

00:13:50.410 --> 00:13:55.309
And so that will help you run Chrome side
by side with your spouse on a shared computer

00:13:55.309 --> 00:14:00.189
and you can switch back and forth easily and
you can choose which Chrome you want to run.

00:14:00.189 --> 00:14:06.379
So I'm pretty excited about that feature.
&gt;&gt;Ian Ellison-Taylor: Well, I got to talk

00:14:06.379 --> 00:14:11.100
about some of mine this morning.
The -- probably the one that's coming out

00:14:11.100 --> 00:14:14.300
the soonest that I'm most excited about, of
course, is the GPU work. You know, that's

00:14:14.300 --> 00:14:18.889
in beta and it's really enabled some amazing
scenarios.

00:14:18.889 --> 00:14:26.049
A little bit further out, it's not any specific
feature, it's just the sort of continual improvement

00:14:26.049 --> 00:14:32.439
that you're seeing to CSS and to HTML to enable
sort of this more programming in the large,

00:14:32.439 --> 00:14:40.999
so that you can write more and more complicated
Web applications. So CSS calc, the shadow

00:14:40.999 --> 00:14:46.449
DOM work. There's a ton of stuff in a similar
vein that I think really helps developer productivity,

00:14:46.449 --> 00:14:53.060
and so I'm very excited to see how that matures,
you know, over the weeks and months ahead.

00:14:53.060 --> 00:14:58.669
&gt;&gt;Kan Liu: I've got lots of features I'm actually
really excited about in Chrome. Everything

00:14:58.669 --> 00:15:07.119
from speed itself to file manager work and
a bunch of the new sync types we're going

00:15:07.119 --> 00:15:11.919
to add as well. Maybe the one that I'm most
excited about is where we're actually working

00:15:11.919 --> 00:15:17.129
on being able to sync your tabs. So I don't
know if any of you use multiple computers.

00:15:17.129 --> 00:15:22.980
But I definitely do. And I've got tons and
tons of tabs open all the time and on my laptops

00:15:22.980 --> 00:15:27.579
and desktops. And going back and forth is
such a pain just because I always have different

00:15:27.579 --> 00:15:33.699
tabs open. And I'm trying to remember which
tab I have open on that machine. So I think

00:15:33.699 --> 00:15:43.379
this is going to be a feature that's going
to be really helpful for me personally. So

00:15:43.379 --> 00:15:45.519
that's the one I'm most excited about.
&gt;&gt;Erik Kay: I'll just pick two. So, coming

00:15:45.519 --> 00:15:51.910
from extensions land, jumping on the sync
front, we're going to allow you to sync data

00:15:51.910 --> 00:15:56.729
from within your extensions. So, exporting
an API that allows you to set your -- send

00:15:56.729 --> 00:16:02.249
your preferences from computer to computer.
So we think that will enable some really interesting

00:16:02.249 --> 00:16:06.949
scenarios. And then, of course, Native Client
will be a lot of fun. And, hopefully, you'll

00:16:06.949 --> 00:16:15.240
start seeing that later this year.
&gt;&gt;Jeff Chang: Okay. I think I started with

00:16:15.240 --> 00:16:17.520
the front microphone last time, so let me
jump to the back microphone.

00:16:17.520 --> 00:16:28.130
&gt;&gt;&gt; Will Chrome OS eventually replace Android?
&gt;&gt;Ian Ellison-Taylor: You want to answer that?

00:16:28.130 --> 00:16:40.720
&gt;&gt;Kan Liu: So -- so I think what you saw today
was -- what Chrome was trying to do is paint

00:16:40.720 --> 00:16:46.259
a vision of the future that we believe most
users are going to be taking advantage of,

00:16:46.259 --> 00:16:48.679
which is the web. The web is the platform
that we believe is really going to win out

00:16:48.679 --> 00:16:54.459
in the long term. So we're trying to create
a computing experience that's optimized for

00:16:54.459 --> 00:17:01.729
users of the web. And even other platforms
like Windows and Mac and Android itself. I

00:17:01.729 --> 00:17:09.509
think more people are going to be using apps
as well. Access to your information from anywhere,

00:17:09.509 --> 00:17:14.549
being able to share easily and all those kind
of things. So I don't know whether -- what

00:17:14.549 --> 00:17:17.799
the future of Android looks like or any of
that. I can't speak for them. But one thing

00:17:17.799 --> 00:17:22.480
I do know for sure is web is going to continue
to improve. It's going to get better, and

00:17:22.480 --> 00:17:25.339
there's going to be more users of it even
on platforms like Android.

00:17:25.339 --> 00:17:30.720
&gt;&gt;Ian Ellison-Taylor: I was going to add,
the web is going to get better on Android

00:17:30.720 --> 00:17:36.930
as well as the browser improves there, too.
So it's kind of a little bit of an odd question.

00:17:36.930 --> 00:17:41.789
I mean, who knows what the future holds? But
that's certainly not the short-term plans

00:17:41.789 --> 00:17:45.970
or near-term plans. We're coming at things,
I think you saw this morning, from very different

00:17:45.970 --> 00:17:51.919
directions. So there's plenty of room in this
ecosystem for lots of different innovation.

00:17:51.919 --> 00:17:56.659
Obviously, we're focusing on the web side
of things. And Android, as you saw yesterday,

00:17:56.659 --> 00:18:01.130
is focusing on a whole ton of equally amazing
scenarios as well. So I think you'll see that

00:18:01.130 --> 00:18:05.730
continue.
&gt;&gt;Jeff Chang: Cool. I'll come to the front

00:18:05.730 --> 00:18:07.500
microphone and then back to Moderator and
keep circling like that.

00:18:07.500 --> 00:18:08.500
&gt;&gt;&gt; Okay. Basically, with the different devices
everyone's carrying around now, interaction

00:18:08.500 --> 00:18:09.500
between devices -- home devices, mobile devices
is huge. I've been a huge fan, even when it

00:18:09.500 --> 00:18:10.500
was in lab and when it was released as a full
product of Chrome to phone. I wonder if the

00:18:10.500 --> 00:18:14.429
framework is there to have Chrome to phone.
I know there are some third-party apps. But

00:18:14.429 --> 00:18:25.680
they're clunky and slow and don't work half
the time. But is there any plan for a Google-sanctioned

00:18:25.680 --> 00:18:34.570
app that will allow to you go phone to Chrome?
So, if you're browsing something on your phone,

00:18:34.570 --> 00:18:49.950
you can toss it to your browser. Like, say,
you wanted to print off a map or something,

00:18:49.950 --> 00:18:59.610
you got the navigation on your phone, throw
it to Chrome, and print it from your computer.

00:18:59.610 --> 00:19:01.820
Right?
Anything like that?

00:19:01.820 --> 00:19:04.470
&gt;&gt;Jeff Chang: That's a pretty interesting
use case. And I've thought about the -- I've

00:19:04.470 --> 00:19:08.730
seen Chrome to phone. I've thought about that
use case. But not the one that you described.

00:19:08.730 --> 00:19:11.259
That's very interesting though. We'll definitely
be thinking about that.

00:19:11.259 --> 00:19:15.070
&gt;&gt;&gt; Are the frameworks there for pushing notification
to Chrome?

00:19:15.070 --> 00:19:23.380
&gt;&gt;Erik Kay: Yeah, sync is a mechanism to communicate
back and forth to multiple instances. We continue

00:19:23.380 --> 00:19:27.890
to work very closely with the Android team
on a number of things. Right now we don't

00:19:27.890 --> 00:19:32.820
have anything on this front. But, you know,
you never know what the future will bring.

00:19:32.820 --> 00:19:39.289
&gt;&gt;&gt; Thanks a lot.
&gt;&gt;Jeff Chang: Thank you. We already answered

00:19:39.289 --> 00:19:44.010
that one. What hardware requirements do you
enforce for manufacturers to get access to

00:19:44.010 --> 00:19:46.820
the Chrome OS source code?
Can anyone use Chromium OS today with the

00:19:46.820 --> 00:19:49.880
full Chrome Web Store on any hardware without
asking Google for permission?

00:19:49.880 --> 00:20:00.490
&gt;&gt;Trond Wuellner: So today we're working very
tight collaboration with the manufacturers

00:20:00.490 --> 00:20:05.580
that we're working with to build Chrome OS.
The hardware requirements that are in place

00:20:05.580 --> 00:20:10.980
today are something that we work very carefully
on in order to develop that, develop and deliver

00:20:10.980 --> 00:20:16.909
the best experience possible on Chromebooks.
As you look at the Chromium OS source, obviously,

00:20:16.909 --> 00:20:18.510
somebody can take that source and build something
they can deliver. I don't see a reason we

00:20:18.510 --> 00:20:26.570
would stand in the way of that. As far as
the first Chromebooks, we want to work closely

00:20:26.570 --> 00:20:30.950
with the manufacturers to make sure the experience
is as good as possible with the users. We're

00:20:30.950 --> 00:20:37.120
excited about continuing to extend that in
the future.

00:20:37.120 --> 00:20:47.889
&gt;&gt;Erik Kay: Just one last addition to that
is asking about the web store. And we don't

00:20:47.889 --> 00:20:51.690
have any restrictions on who can visit the
web store. It's just a Web site.

00:20:51.690 --> 00:20:53.110
&gt;&gt;Jeff Chang: Microphone in the back now.
&gt;&gt;&gt; Hi. I'm really concerned about privacy

00:20:53.110 --> 00:20:55.830
and security. And I was wanting to hear some
reassurance about the way that you install

00:20:55.830 --> 00:21:13.660
extensions and web apps. Particularly, when
I see a weather-type app asking for access

00:21:13.660 --> 00:21:23.580
to my entire web history or my entire file
system data. That sounds kind of scary. And,

00:21:23.580 --> 00:21:32.130
even in the help system, it says that you
should be concerned about an app asking for

00:21:32.130 --> 00:21:42.659
that much permissions. Will you look to giving
more granular permissions to the user to have

00:21:42.659 --> 00:21:56.000
more control over what the app has access
to rather than me having to make a tradeoff

00:21:56.000 --> 00:21:57.000
of giving my entire history to an app that's,
basically, for example, providing me weather?

00:21:57.000 --> 00:22:01.340
&gt;&gt;Erik Kay: Sure. So, you know, this is something
we care an awful lot about. So in the extensions

00:22:01.340 --> 00:22:06.809
team, this year, in particular, you know,
when we first started and designed it, we

00:22:06.809 --> 00:22:12.409
really spent an awful lot of time thinking
about security. And we really feel that we

00:22:12.409 --> 00:22:16.710
advanced the state-of-the-art. It went from
an all-or-nothing thing where it's, effectively,

00:22:16.710 --> 00:22:20.830
an extension is executable where it had full
access to your computer and anything it can

00:22:20.830 --> 00:22:27.200
do to something that was more granular. And
it is possible for developers to write something

00:22:27.200 --> 00:22:34.240
that is more granular, doesn't need all the
scary permissions in the world. That said,

00:22:34.240 --> 00:22:39.019
we're not content to rest there. And we have
many innovations that we're working on that

00:22:39.019 --> 00:22:45.169
we think are going to improve things in the
next year. Things like, for example, some

00:22:45.169 --> 00:22:51.129
of the reasons why extension authors ask for
all these permissions are, actually, sometimes

00:22:51.129 --> 00:22:56.879
for power user features within their extension.
And a feature that only 5% of their users

00:22:56.879 --> 00:23:02.740
use, yet it requires all of their users to
say yes to that permission.

00:23:02.740 --> 00:23:05.740
So one thing that we're going to be adding
in the near future is something we're calling

00:23:05.740 --> 00:23:09.790
an optional permission where it can sort of
split up its permissions into a set of here

00:23:09.790 --> 00:23:15.980
are the ones required for use, here are the
ones we can enable on-demand so that most

00:23:15.980 --> 00:23:20.909
users don't even need to see that or be bothered
by that. Other things we're looking at are

00:23:20.909 --> 00:23:28.690
ways to allow users and enterprise admins
to exclude access to certain Web sites for

00:23:28.690 --> 00:23:33.659
extensions. So, for example, maybe you say
you trust this extension in general; but you

00:23:33.659 --> 00:23:39.610
don't want any extension to ever access your
bank. And, you know, that kind of thing.

00:23:39.610 --> 00:23:44.370
There's a lot more that we're thinking about
on this front. And so, yes, don't expect us

00:23:44.370 --> 00:23:48.010
to rest. Expect to see a series of improvements
on this front from us.

00:23:48.010 --> 00:23:53.799
&gt;&gt;&gt; Can I add to that?
From your answer, it sounded like it was more

00:23:53.799 --> 00:23:59.090
developer-centric rather than user-centric.
I was wondering if -- it sounded like you

00:23:59.090 --> 00:24:04.350
were saying you would give the developer the
option of making optional security versus

00:24:04.350 --> 00:24:10.860
giving the power to the user in having that
choice rather than solely on the developer

00:24:10.860 --> 00:24:13.340
side.
&gt;&gt;Erik Kay: Well, the power -- there's a couple

00:24:13.340 --> 00:24:19.190
of issues here. And one is the -- we're relying
on the web store to act as a dampening factor

00:24:19.190 --> 00:24:24.820
for stuff. When users don't like what an extension
is doing and an author is doing, one of the

00:24:24.820 --> 00:24:28.749
things that works is people give negative
reviews and give feedback saying they don't

00:24:28.749 --> 00:24:34.470
want it to do what it's doing. They want it
to act in a more constrained fashion.

00:24:34.470 --> 00:24:41.499
The more general question what you're asking
is for users to be able to block certain permissions

00:24:41.499 --> 00:24:46.629
selectively to be able to pick and choose
which of the permissions an extension can

00:24:46.629 --> 00:24:53.320
or can't do. And this is a conscious choice
by us to not do that. The reason being it's

00:24:53.320 --> 00:24:59.150
a question of testing and stability for the
developers. The developer builds an app with

00:24:59.150 --> 00:25:04.730
the expectation that it's going to work a
certain way; that having certain things, you

00:25:04.730 --> 00:25:09.720
know, sort of, you know, arbitrary permutations
of the capabilities disabled out from under

00:25:09.720 --> 00:25:14.379
it is sort of an untenable quality situation
for developers to be put into.

00:25:14.379 --> 00:25:20.130
So, yes, at the end of the day, that part
is a developer choice. However, you know,

00:25:20.130 --> 00:25:26.309
like I said, the -- we think that the feedback
and the reputation in the store feeds back

00:25:26.309 --> 00:25:33.269
on itself quite positively on that front and
that, as we roll out these features, you know,

00:25:33.269 --> 00:25:37.120
that more and more developers are going to
adopt it. Now, just one clarification, there

00:25:37.120 --> 00:25:44.620
are a couple features where the user is in
control in places where, you know, it doesn't,

00:25:44.620 --> 00:25:49.330
you know, affect the overall functionality,
for example. You know, an extension will never

00:25:49.330 --> 00:25:55.340
have access to incognito or file URLs without
your explicit permission. And the other example

00:25:55.340 --> 00:25:59.539
I used about blocking access to specific sites
would be something that would be totally in

00:25:59.539 --> 00:26:05.750
your control. Okay. Why don't we -- I spent
a lot of time on that one.

00:26:05.750 --> 00:26:08.700
&gt;&gt;Jeff Chang: Microphone in the front.
&gt;&gt;&gt; There's a question about Chrome Frame

00:26:08.700 --> 00:26:11.820
deployment. As a web developer, I can't wait
to not having to worry about IE6. But, as

00:26:11.820 --> 00:26:16.980
the previous question talked about, it's awful
hard to get people to install it. And, if

00:26:16.980 --> 00:26:21.890
people haven't, you still have this problem.
I'm surprised that more Google apps haven't

00:26:21.890 --> 00:26:26.840
prompted people to install. And I'm sure they
could be a big champion for this. I'm thinking

00:26:26.840 --> 00:26:31.409
developers hate IE6 as much as anybody else.
I'm thinking of GMail or apps where it really

00:26:31.409 --> 00:26:35.289
would be a more improved experience if you
were on a more modern browser. Do you know

00:26:35.289 --> 00:26:38.269
why haven't prompted it yet?
Is Chrome Frame not ready yet or they're lazy

00:26:38.269 --> 00:26:44.070
or have trouble getting people to install
it? Or what can we do to help them help us?

00:26:44.070 --> 00:26:48.720
&gt;&gt;Alex Russell: Great question. I want to
defend my colleagues on the apps teams. They're

00:26:48.720 --> 00:26:55.029
not lazy. In fact, they work very hard on
the user experience. This is a question of

00:26:55.029 --> 00:26:59.909
helping them liberate themselves from those
constraints. Application teams in Google also

00:26:59.909 --> 00:27:07.200
live under the edict of "thou shalt be fast."
We do too. If they can't say we're not going

00:27:07.200 --> 00:27:12.159
to regress your latency or performance, it's
not a viable option for them. Because of the

00:27:12.159 --> 00:27:17.210
complicated performance picture for Chrome
Frame, until very recently it's been a little

00:27:17.210 --> 00:27:22.419
bit of a tossup to try to do testing because
there's cold start versus warm start. There's

00:27:22.419 --> 00:27:25.409
low latency connections versus high latency
connections. You have to run an experiment.

00:27:25.409 --> 00:27:30.779
It takes a lot of time to sort of figure that
out. Luckily Pat and the test.org guys have

00:27:30.779 --> 00:27:35.350
put together support for Chrome Frame on the
pagetest.org that is helping us prove that

00:27:35.350 --> 00:27:40.120
on most sites Chrome Frame is a net win. It's
not going to degrade your performance. That's

00:27:40.120 --> 00:27:45.619
the sort of data that helps us make a credible
argument that both internally and externally

00:27:45.619 --> 00:27:49.379
that Chrome Frame isn't just a good idea in
terms of liberating you from your current

00:27:49.379 --> 00:27:54.700
constraints about the sorts of features you
can deliver, but it's also a viable way to

00:27:54.700 --> 00:28:02.570
help you meet your latency goals and, certainly,
at a minimum, not regress. So that is maybe

00:28:02.570 --> 00:28:06.700
the largest predicate for why they haven't
been prompting so far. And I'm hopeful that

00:28:06.700 --> 00:28:10.029
we'll see a lot more of that both externally
and internally at Google, because a lot of

00:28:10.029 --> 00:28:15.470
sites can benefit.
&gt;&gt;Jeff Chang: Okay. We have a Google Moderator

00:28:15.470 --> 00:28:17.460
question. What's the next step for Chrome
from the UI standpoint?

00:28:17.460 --> 00:28:23.179
So I previously mentioned that we're continuing
to work on sync, so you can sync your browser

00:28:23.179 --> 00:28:27.820
settings and preferences and data to the cloud
across all your devices. As Kan mentioned,

00:28:27.820 --> 00:28:33.499
we're working on adding new data types such
as new tabs. So that will be exciting. And

00:28:33.499 --> 00:28:38.129
of course user profiles, as I mentioned, so
you'll be able to run multiple personalized

00:28:38.129 --> 00:28:44.850
versions of Chrome on the same machine. But
there's other areas of the UI that we're working

00:28:44.850 --> 00:28:49.000
on. We recently started working on revamping
the new tab page. We're always kind of constantly

00:28:49.000 --> 00:28:53.330
thinking how we can make that as useful as
possible for our users. We're trying to think

00:28:53.330 --> 00:28:59.110
through the right balance in terms of how
customizable it is versus, you know, what

00:28:59.110 --> 00:29:03.549
kind of magic formulas we use to show you
content on your tab page, whether that be

00:29:03.549 --> 00:29:08.580
your bookmarks or the apps you installed from
the web store or the pages you visit the most

00:29:08.580 --> 00:29:12.549
or the recent pages you visited or recent
tabs you have open on any of your devices.

00:29:12.549 --> 00:29:21.200
So definitely looking forward to continuing
to work on the new tab page from a UI standpoint.

00:29:21.200 --> 00:29:29.129
Okay. So I think it's back microphone now.
&gt;&gt;&gt; With the Chrome OS and Android all being

00:29:29.129 --> 00:29:33.140
open source, one of the biggest challenges
for Google seems to be digital rights management.

00:29:33.140 --> 00:29:34.679
What is the team doing as a whole to improve
that?

00:29:34.679 --> 00:29:40.249
We still don't have applications like Netflix,
which has been on the iPhone for a very long

00:29:40.249 --> 00:29:48.899
time. You know, when and what is the Chrome
team doing to improve DRM for, you know, providers

00:29:48.899 --> 00:29:58.039
of it, so that way we can get more content
on the devices?

00:29:58.039 --> 00:30:02.889
&gt;&gt;Kan Liu: Good question. So today we already
support Flash DRM. So, obviously, YouTube

00:30:02.889 --> 00:30:07.399
movie rentals and all that stuff work already.
We've been working closely with Netflix as

00:30:07.399 --> 00:30:12.249
well. In fact, we announced today that out
of the box, when you get your Chrome OS device,

00:30:12.249 --> 00:30:16.159
Netflix will work. So we've been working with
them on that as well.

00:30:16.159 --> 00:30:18.840
I don't know, generally, on other platforms
Chrome has done anything unique or special,

00:30:18.840 --> 00:30:19.840
though.
&gt;&gt;Ian Ellison-Taylor: No.

00:30:19.840 --> 00:30:30.039
&gt;&gt;Jeff Chang: Microphone in the front.
&gt;&gt;&gt; Kind of taking it from the reverse angle,

00:30:30.039 --> 00:30:39.470
I'm a great Chrome fan. And I'd love to get
rid of all the other browsers on my machine.

00:30:39.470 --> 00:30:42.080
But, every once in a while, once a month I
have to do reports using FedEx. And I have

00:30:42.080 --> 00:30:47.840
to do plane bookings. And I do some real estate
stuff with various MLSs, all programmed in

00:30:47.840 --> 00:30:54.269
wonderfully rich, ancient frameworks. And
they don't work on Chrome.

00:30:54.269 --> 00:31:05.129
Are you guys continuing to figure out what
to do with those huge legacy, heavy-duty apps

00:31:05.129 --> 00:31:07.900
that are all over the place?
&gt;&gt;Ian Ellison-Taylor: Yeah. It's -- obviously,

00:31:07.900 --> 00:31:15.019
it's a huge problem sort of dealing with legacy.
And there's no easy answer. I mean, obviously,

00:31:15.019 --> 00:31:19.980
we look at Chrome Frame and other solutions
like that to provide us an escape valve.

00:31:19.980 --> 00:31:24.739
So you can continue to run old applications
until they, frankly, just die off. And that,

00:31:24.739 --> 00:31:30.460
I know, can take, you know, a decade or more.
I think we've been helped recently just -- there's

00:31:30.460 --> 00:31:37.009
something of a perfect storm going on right
now with HTML5 with IE, with Firefox and Chrome

00:31:37.009 --> 00:31:43.049
really focusing heavily on HTML5 features.
And it's creating this pull now for apps to

00:31:43.049 --> 00:31:47.869
get updated and rewritten to be sort of more
modern. And that's helping accelerate the

00:31:47.869 --> 00:31:54.059
demise of some of the older browsers and with
it some of the older applications. So it's

00:31:54.059 --> 00:32:02.210
a huge challenge, and we look at ways to help
mitigate the issue on both sides to try to

00:32:02.210 --> 00:32:08.880
find ways to help developers migrate to HTML5
modern browsers, modern era browsers, and

00:32:08.880 --> 00:32:14.679
also to create demand. That the experience
is so much better on a more modern platform.

00:32:14.679 --> 00:32:20.139
The developers are motivated. And users and
IT departments are motivated to move to something

00:32:20.139 --> 00:32:26.040
else. And time will take care of these things.
But we will try and accelerate them as much

00:32:26.040 --> 00:32:30.139
as possible. I wish there was a magic bullet
that we could just sort of rewrite history.

00:32:30.139 --> 00:32:35.070
Unfortunately, we don't have anything quite
that magical yet. Maybe we'll -- I don't know,

00:32:35.070 --> 00:32:40.649
we have to go one at a time and go kidnap
the people that wrote those apps. And I don't

00:32:40.649 --> 00:32:45.120
know. We'll find some magical solution, maybe.
&gt;&gt;Erik Kay: One other thing I'll toss out

00:32:45.120 --> 00:32:50.480
is in the web kit community, compatibility
issues are treated very seriously. They're

00:32:50.480 --> 00:32:57.029
high priority things when they can get nailed
down. That said, there are a class of compatibility

00:32:57.029 --> 00:33:02.330
bugs that, for a variety of reasons, have
been deemed hard to fix in a way that doesn't

00:33:02.330 --> 00:33:08.120
cause other problems. And, if you think compatibility
problems are bad with legacy stuff here, you

00:33:08.120 --> 00:33:16.580
should just go to China or Korea where some
of the dependency on IE is an -- old features

00:33:16.580 --> 00:33:22.919
of IE is pretty, you know, endemic. And within
their -- in addition to fixing web kit bugs,

00:33:22.919 --> 00:33:27.470
we've spent, actually, a fair amount of time
building tools to help Web site authors track

00:33:27.470 --> 00:33:32.879
down the compatibility issues that they've
got. So, for example, the China team has put

00:33:32.879 --> 00:33:37.309
together a tool that you can point at your
Web site. And it just highlights all the things

00:33:37.309 --> 00:33:41.610
and says this is an IE dependency. This is
an IE dependency. It's a very important issue

00:33:41.610 --> 00:33:48.989
to us and one that we continue to push on.
&gt;&gt;Jeff Chang: Will Google Chrome on Linux

00:33:48.989 --> 00:33:52.999
Ubuntu support WebGL?
&gt;&gt;Ian Ellison-Taylor: Actually, I thought

00:33:52.999 --> 00:34:00.050
that was an obvious "yes." But now I'm panicked
that there's a question. I'm going to look

00:34:00.050 --> 00:34:10.690
at the front row. (off mic) I'm hearing from
Ian that with new drivers you should be okay.

00:34:10.690 --> 00:34:15.179
But let us check offline and double-check
if we're giving you the correct information

00:34:15.179 --> 00:34:19.190
there. I don't know off the top of my head.
So let us find out and we'll get back to you.

00:34:19.190 --> 00:34:23.270
Thanks.
&gt;&gt;Jeff Chang: Now I think it's to the back.

00:34:23.270 --> 00:34:30.619
&gt;&gt;&gt; Yeah. I had questions about Chrome OS
and the native client support. Will that enable

00:34:30.619 --> 00:34:37.240
me to do things like, if I wanted to implement
a new video or audio streaming protocol, would

00:34:37.240 --> 00:34:44.390
that allow me to support that on Chrome OS,
or how would I do something like that?

00:34:44.390 --> 00:34:50.700
&gt;&gt;Erik Kay: Sure. The point of Native Client
is, you know, to allow you to take your expertise

00:34:50.700 --> 00:35:00.089
and your history with native code and be able
to port it safely. Chrome OS is one of those.

00:35:00.089 --> 00:35:04.869
Without knowing more about your specific use
case, I can't tell you whether you're porting

00:35:04.869 --> 00:35:10.770
job will be harder or easier than other porting
cases. If, for example, you're talking about

00:35:10.770 --> 00:35:17.549
building a video codec, that would be really
easy. Usually, they're just operating in memory

00:35:17.549 --> 00:35:23.630
bytes and that sort of thing. If you're talking
about you want specific low-level access to

00:35:23.630 --> 00:35:27.940
the network stack, well, that one might be
a little harder because, you know, there are

00:35:27.940 --> 00:35:31.380
security issues involved there. And Native
Client, kind of the whole -- the other point

00:35:31.380 --> 00:35:35.770
of this is because we're trying to deliver
this securely, you know, it's only through

00:35:35.770 --> 00:35:40.559
the set of APIs that we expose. And that will
be -- you know, we need to lock down some

00:35:40.559 --> 00:35:43.690
of the things to prevent people from doing,
you know, bad things with that.

00:35:43.690 --> 00:35:50.940
&gt;&gt;&gt; Okay, Thank you.
&gt;&gt;Jeff Chang: Okay. In the front.

00:35:50.940 --> 00:36:01.180
&gt;&gt;&gt; Two questions. One, really excited about
Chromebook and the way you guys are approaching

00:36:01.180 --> 00:36:04.730
Chrome OS as well as a browser.
As part of the sync protocol, is there any

00:36:04.730 --> 00:36:05.730
plans on making available a co-browsing type
of a capability which allows administrators

00:36:05.730 --> 00:36:10.690
or whomever to -- or app administrators to
figure out what issues their apps are having

00:36:10.690 --> 00:36:19.560
where they can see side by side what the user
is seeing within Chrome for their specific

00:36:19.560 --> 00:36:23.940
app?
Second question: Excited about Chromebook.

00:36:23.940 --> 00:36:30.692
And trying to find out when's Canada going
to get one.

00:36:30.692 --> 00:36:38.869
[ Laughter ]
We seem to be left behind in a lot of things

00:36:38.869 --> 00:36:43.609
from Google. So...
&gt;&gt;Trond Wuellner: So while we don't have any

00:36:43.609 --> 00:36:47.890
explicit date for Canada, one of the things
we are really pushing pretty aggressively

00:36:47.890 --> 00:36:52.099
on is to try to get as much international
support as we absolutely can as quickly as

00:36:52.099 --> 00:36:59.230
possible. It is on our short list of really
important places to get to quickly.

00:36:59.230 --> 00:37:03.880
&gt;&gt;Erik Kay: So with regard to the first question,
it is something we've looked at but I don't

00:37:03.880 --> 00:37:04.880
think we have anything to announce at this
time.

00:37:04.880 --> 00:37:09.630
&gt;&gt;&gt; Do you know if the capability is there,
or is that something that would have to be

00:37:09.630 --> 00:37:12.840
built? I have a specific use case, and that's
why I'm asking.

00:37:12.840 --> 00:37:18.420
&gt;&gt;Erik Kay: Well, you have seen probably work
on us being able to do some remote desktop

00:37:18.420 --> 00:37:25.280
type of stuff. So it is in theory possible.
But, again, I don't think there is much that

00:37:25.280 --> 00:37:27.771
we can talk about in detail here.
&gt;&gt;&gt; Okay, thank you.

00:37:27.771 --> 00:37:35.650
&gt;&gt;Jeff Chang: Okay.
Is it Google Moderator now? Chrome was revolutionary

00:37:35.650 --> 00:37:42.869
when it came out. Thanks. Well, actually I
can't take credit. But now it's a mature platform

00:37:42.869 --> 00:37:46.280
that evolves and iterates. What's your vision
of the next revolutionary thing coming to

00:37:46.280 --> 00:37:51.522
the browser market?
I have said this a number of times already.

00:37:51.522 --> 00:37:57.099
But I really think this notion of synchronizing
your browsing experience across all your devices

00:37:57.099 --> 00:38:02.869
is very compelling. I think -- and I hope
that the browser market continues to think

00:38:02.869 --> 00:38:07.531
about what kinds of things make up a personalized
browsing experience and what kind of things

00:38:07.531 --> 00:38:14.770
can be synced. For example, recent tabs is
one example. We should be able to basically

00:38:14.770 --> 00:38:19.220
think of the browser as our window into the
computing experience that we want no matter

00:38:19.220 --> 00:38:22.369
where we are and what machine or what device
we're using.

00:38:22.369 --> 00:38:30.030
&gt;&gt;Erik Kay: So, you know, one way of thinking
about this is that we tackled, you know -- we

00:38:30.030 --> 00:38:35.500
had four core principles with Chrome, right:
Speed, security, simplicity, security, right?

00:38:35.500 --> 00:38:40.910
And we -- oops, did I repeat one? Sorry. I
said security twice.

00:38:40.910 --> 00:38:45.270
&gt;&gt;Ian Ellison-Taylor: It matters that much.
&gt;&gt;Erik Kay: Security is that important to

00:38:45.270 --> 00:38:49.930
us.
Stability was the other one that I left off,

00:38:49.930 --> 00:38:53.440
sorry.
So, anyway, we think that focusing on these

00:38:53.440 --> 00:38:59.750
four issues and really, you know, putting
a lot of weight behind all of them led to

00:38:59.750 --> 00:39:04.390
a lot of the revolutionary aspects.
And the thing is that once we got there, these

00:39:04.390 --> 00:39:09.541
principles didn't go away in importance. They're
still there. And we think that there's a lot

00:39:09.541 --> 00:39:14.260
of room to go in all of them.
So on the security front, you know, we're,

00:39:14.260 --> 00:39:19.460
you know, working to get, you know, all of
our plug-ins fully Sandboxed. And Chrome OS

00:39:19.460 --> 00:39:23.920
is pushing -- pushing the boundaries there.
And on the simplicity front, you know, we're

00:39:23.920 --> 00:39:29.520
continuing to streamline RUI and make more
interesting features just available without

00:39:29.520 --> 00:39:34.440
users even thinking. Complicated use cases
like Jeff was talking about about a shared

00:39:34.440 --> 00:39:40.559
computer, you know, how easy can we make that?
Or synchronization of data, can we make that

00:39:40.559 --> 00:39:45.750
seamless? How much faster can we make things?
I think there are a lot of things we can continue

00:39:45.750 --> 00:39:50.000
to make faster.
So, you know -- I don't know. Maybe focusing

00:39:50.000 --> 00:39:54.530
on the same core things doesn't sound revolutionary.
But to us, we think that these are the things

00:39:54.530 --> 00:40:02.010
that unlock those sort of next level of uses.
&gt;&gt;Alex Russell: From the Web developer perspective,

00:40:02.010 --> 00:40:07.410
Chrome was revolutionary in terms of speed.
I think the next thing that I'm excited about

00:40:07.410 --> 00:40:12.569
there is that we have so much that we've been
pouring into the platform over the past couple

00:40:12.569 --> 00:40:17.150
of years, that's not evenly distributed yet.
It is not clear today that you can start your

00:40:17.150 --> 00:40:21.049
next project and target the features that
are just in Chrome now.

00:40:21.049 --> 00:40:25.200
And when that becomes reality for developers,
it is going to change the way you build applications.

00:40:25.200 --> 00:40:29.780
It is going to change the kinds of applications
you build. And we just haven't seen the full

00:40:29.780 --> 00:40:34.650
impact of that yet. So I think as we continue
to simplify what it means to build an app,

00:40:34.650 --> 00:40:38.790
that's going to happen concurrently with us
sort of having that moment like it was with

00:40:38.790 --> 00:40:43.640
Ajax where we go, Whoa, you can do that in
a browser? And that's just going to take some

00:40:43.640 --> 00:40:49.349
time. I'm really excited to see that pass.
&gt;&gt;Jeff Chang: Okay. To the back again.

00:40:49.349 --> 00:40:54.910
&gt;&gt;&gt; Yeah, I just have an example scenario.
So let's say we have screens all over the

00:40:54.910 --> 00:41:00.619
building here that are all showing some sort
of Web app. Is there any way like on the browser

00:41:00.619 --> 00:41:06.750
level as opposed to, like, doing it from a
Web app standpoint of synchronizing all of

00:41:06.750 --> 00:41:12.809
those screens together? Are you guys working
at all on something to not only sync the browsing

00:41:12.809 --> 00:41:18.549
experience for a personal user but to synchronize
the browsing experience for some sort of digital

00:41:18.549 --> 00:41:22.900
display type of thing?
&gt;&gt;Alex Russell: So I think from the platform

00:41:22.900 --> 00:41:27.910
perspective, WebSockets are the next closest
thing. So you can have a reflector server

00:41:27.910 --> 00:41:32.400
which you can send events to and folks who
listen in on those events. Those can drive

00:41:32.400 --> 00:41:37.109
a shared Web app experience.
Some of the folks who were showing apps in

00:41:37.109 --> 00:41:41.630
the Sandbox are doing exactly that with WebSockets.
They are getting really low latency collaborative

00:41:41.630 --> 00:41:46.380
games to happen. You need to share a data
model. So working in the data space is important.

00:41:46.380 --> 00:41:48.880
And then you need to share a low-level latency
channel for that.

00:41:48.880 --> 00:41:56.740
It is up to the app to do that, but those
are the bits of the stack that you need to

00:41:56.740 --> 00:41:57.740
deliver that sort of experience.
&gt;&gt;&gt; Okay. Thank you very much.

00:41:57.740 --> 00:42:01.569
&gt;&gt;Jeff Chang: And to the front.
&gt;&gt;&gt; Yeah, my question is about developer tools.

00:42:01.569 --> 00:42:09.220
Are there any plans to make dev tools more
extendable? Like, if I want to write an extension

00:42:09.220 --> 00:42:12.970
for my own company for the project I'm working
on?

00:42:12.970 --> 00:42:17.600
&gt;&gt;Pavel Feldman: We have just announced the
extensibility for Chrome dev tools on the

00:42:17.600 --> 00:42:23.410
session today at 1:00 p.m or something. So
check out our site at code.google.com/chrome/devtools

00:42:23.410 --> 00:42:25.000
and you can find info there.
&gt;&gt;&gt; That's great.

00:42:25.000 --> 00:42:28.960
And second question, which is not a follow-up,
but anyway, with Traceur, if I am pronounced

00:42:28.960 --> 00:42:36.079
that correctly, is it going to be more native
to Chrome and to developer tools at some point

00:42:36.079 --> 00:42:42.440
where I can actually debug it with developer
tools and not to debug the compiled JavaScript?

00:42:42.440 --> 00:42:46.722
&gt;&gt;Alex Russell: So the way for that to happen
is for those features to get through get through

00:42:46.722 --> 00:42:50.730
the standards process and into V8, at which
point that will be the next experience.

00:42:50.730 --> 00:42:53.610
&gt;&gt;&gt; Only through the standards process?
&gt;&gt;Alex Russell: I think that's maybe the easiest

00:42:53.610 --> 00:43:00.010
way. I know that there is line-for-line debugging
from source to compiled stuff happening in

00:43:00.010 --> 00:43:02.849
other browsers. I don't know where that's
at.

00:43:02.849 --> 00:43:08.690
&gt;&gt;Pavel Feldman: We kind of have generic schema
for debugging compiled languages, but we should

00:43:08.690 --> 00:43:14.160
wait for the platform to get there in this
work case. But we will have support for compiled

00:43:14.160 --> 00:43:18.341
languages for (inaudible) and closure and
get them debugged on the dev tools.

00:43:18.341 --> 00:43:26.599
&gt;&gt;&gt; Okay, thanks.
&gt;&gt;Jeff Chang: Okay. So will we be able to

00:43:26.599 --> 00:43:31.800
download and install Chrome OS when it comes
out?

00:43:31.800 --> 00:43:37.050
&gt;&gt;Trond Wuellner: So anybody today can go
to chromium.org and download virtually every

00:43:37.050 --> 00:43:42.030
bit of source code that's involved in Chrome
OS. There is a handful of things we don't

00:43:42.030 --> 00:43:45.170
have the license to publish in that place,
but everything else is there.

00:43:45.170 --> 00:43:50.600
So you can go install Get, pull it down, build
it, install it today on a wide variety of

00:43:50.600 --> 00:43:55.290
different systems.
A number of developers have taken that chromium.org

00:43:55.290 --> 00:44:01.109
source code and delivered flavors of this.
One of my personal favorites is one that Hexa

00:44:01.109 --> 00:44:06.109
delivered that can put on a number of different
books today. Phenomenal experience.

00:44:06.109 --> 00:44:09.700
That's the route we are going to go with for
people downloading themselves.

00:44:09.700 --> 00:44:17.059
As far as official Chrome OS going on to as
a downloadable and installable application,

00:44:17.059 --> 00:44:20.380
that's unlikely to happen. We are working
very closely with our hardware partners to

00:44:20.380 --> 00:44:23.829
deliver the best possible user experience,
and there are a number of things that going

00:44:23.829 --> 00:44:30.900
into doing that well. And that's what we are
going to focus on there.

00:44:30.900 --> 00:44:37.869
&gt;&gt;Kan Liu: Just add to that a little bit,
one of the reasons why we have to work very

00:44:37.869 --> 00:44:42.660
closely with hardware partners and get very
specific bits for that is because we actually

00:44:42.660 --> 00:44:50.030
integrate all the way down to the firmware.
So there's very hardware specific pieces of

00:44:50.030 --> 00:44:54.559
code that you won't just be able to download
and run on any machine because of the way

00:44:54.559 --> 00:45:00.520
that we actually do verified boot, for example.
So a lot of the security relies on this. So

00:45:00.520 --> 00:45:04.520
we could make that available for download,
but it wouldn't really run on any other system

00:45:04.520 --> 00:45:07.950
and you wouldn't get the same benefits of
security and performance and so forth.

00:45:07.950 --> 00:45:11.160
So that's actually why it wouldn't make sense
for us to just put partner code on a server

00:45:11.160 --> 00:45:14.460
somewhere for everyone to download.
&gt;&gt;Jeff Chang: Okay. Microphone in the back.

00:45:14.460 --> 00:45:28.289
&gt;&gt;&gt; I just had a question about: Have you
guys thought about supporting Google Go for

00:45:28.289 --> 00:45:34.460
the Native Client?
&gt;&gt;Erik Kay: So, let's see. Last year we did

00:45:34.460 --> 00:45:39.390
a preview release, sort of an experimental
release of Native Client. And as part of that,

00:45:39.390 --> 00:45:43.099
the Go team had done a port that ran on top
of it.

00:45:43.099 --> 00:45:48.730
Now, they have since -- We went through a
bunch of big changes last year, changed the

00:45:48.730 --> 00:45:53.440
whole browser integration API that we used.
So the Go team stepped back from that to wait

00:45:53.440 --> 00:45:55.940
for us to stabilize and finish before they
came back.

00:45:55.940 --> 00:46:03.589
But my understanding was that it wasn't a
particularly challenging port, so I don't

00:46:03.589 --> 00:46:07.250
expect a problem coming forward.
There are a number of people doing other languages

00:46:07.250 --> 00:46:12.680
to Native Client. In general, the rule is,
you know, if it can be compiled, we can put

00:46:12.680 --> 00:46:19.251
it into Native Client.
&gt;&gt;Jeff Chang: Okay. To the front.

00:46:19.251 --> 00:46:27.200
&gt;&gt;&gt; Yeah. Just a quick question. Any ETA on
bringing Canary to Linux?

00:46:27.200 --> 00:46:38.380
&gt;&gt;Jeff Chang: So I think in general -- So
I'm not sure. But for Linux users, we -- I

00:46:38.380 --> 00:46:43.640
guess we tend to assume they're a bit savvier.
And it is pretty easy to run a nightly build.

00:46:43.640 --> 00:46:46.570
I don't know. I don't know the answer to that
question. Sorry.

00:46:46.570 --> 00:46:51.960
&gt;&gt;Erik Kay: So I know that somebody is -- outside
of Google is maintaining -- I think it is

00:46:51.960 --> 00:47:00.240
Popcorn, is like this -- a distro tool for
Ubuntu that somebody is using to maintain

00:47:00.240 --> 00:47:06.760
like a dev -- sort of an equivalent to dev,
beta, stable and canary builds of Chrome.

00:47:06.760 --> 00:47:10.339
So we're not doing it.
One of the challenges of doing this sort of

00:47:10.339 --> 00:47:16.000
thing for Linux is just all the different
distros and configurations we need to support.

00:47:16.000 --> 00:47:26.752
But we might do it ourselves in the future
for Canary, but I don't know what the plans

00:47:26.752 --> 00:47:27.752
are on that front.
&gt;&gt;&gt; Okay, thanks.

00:47:27.752 --> 00:47:29.250
&gt;&gt;Jeff Chang: Okay. What do you think about
the interaction between tabbed browsers and

00:47:29.250 --> 00:47:31.809
tiling window managers? What is the future
of tabbed browsing?

00:47:31.809 --> 00:47:39.089
Well, I think in general, you know, we're
very happy to see that tabbed browsing is

00:47:39.089 --> 00:47:44.700
definitely making its way into the rest of
the browser market and users, I believe, find

00:47:44.700 --> 00:47:51.710
that to be, you know, a compelling experience.
On Chrome specifically, we are experimenting

00:47:51.710 --> 00:47:55.881
around with a few different ways to present
tabs and some window management stuff as well.

00:47:55.881 --> 00:48:00.880
But we haven't made any decision on that front
yet. In general, we've actually found that

00:48:00.880 --> 00:48:06.430
our data shows that the majority of users
are for -- the vast majority of page loads,

00:48:06.430 --> 00:48:10.329
most users don't have that many tabs open.
And so it is a very good question whether

00:48:10.329 --> 00:48:19.380
that's because -- So, basically, we are thinking
hard about the problem of having lots and

00:48:19.380 --> 00:48:22.859
lots of tabs open. But we really haven't made
a decision how to proceed yet, but it is definitely

00:48:22.859 --> 00:48:25.390
an area that we are open to experimenting
with.

00:48:25.390 --> 00:48:32.200
&gt;&gt;Kan Liu: I will quickly add to that. I do
think the current window manager system on

00:48:32.200 --> 00:48:35.010
most operating systems today is kind of broken,
all right?

00:48:35.010 --> 00:48:40.920
The fact that I'm constantly having to go
and manage my windows myself, I always have

00:48:40.920 --> 00:48:44.869
these overlapping windows. I'm trying to find
content behind something. I'm rearranging

00:48:44.869 --> 00:48:48.900
things to get something out of the way of
something else.

00:48:48.900 --> 00:48:54.380
It's way more cognitive load as a user for
me than I really want to -- care about. I

00:48:54.380 --> 00:49:00.279
just basically want my content when I want
it. I want to be able to pace between things,

00:49:00.279 --> 00:49:04.359
compare things and all of that kind of stuff.
The window manager should really take care

00:49:04.359 --> 00:49:07.640
of most of this for me.
I think this is an area, like Jeff was saying,

00:49:07.640 --> 00:49:11.859
that we're going to do a lot more investigation
on. And stay tuned because I think we have

00:49:11.859 --> 00:49:17.119
some interesting ideas here that we are going
to be showing soon.

00:49:17.119 --> 00:49:18.119
&gt;&gt;Jeff Chang: Okay. In the front?
&gt;&gt;&gt; Hey. So I hear you have been talking a

00:49:18.119 --> 00:49:30.319
lot about syncing the tabs. And I was wondering
if you were planning on doing that in a realtime

00:49:30.319 --> 00:49:33.301
kind of syncing or maybe on opening the window?
&gt;&gt;Jeff Chang: That's a good question. As you

00:49:33.301 --> 00:49:37.690
can imagine, if you have a bunch of tabs open
here and then you close one here and all of

00:49:37.690 --> 00:49:41.420
a sudden it immediately closed on the other
machine and someone else is there, it is going

00:49:41.420 --> 00:49:42.980
to be like what the...
We have been thinking hard about that. We

00:49:42.980 --> 00:49:46.180
are not currently not assuming that we will
just sync everything everywhere exactly the

00:49:46.180 --> 00:49:50.299
same but rather present some sort of view
of recent tabs. That might be recent tabs

00:49:50.299 --> 00:49:54.990
you have interacted with on other machines
or recent tabs that you have closed.

00:49:54.990 --> 00:49:58.109
We are just in the initial stages, but we
are going to be trying it ourselves to see

00:49:58.109 --> 00:50:01.850
what kind of magical formula works or not.
And we will definitely be iterating on that.

00:50:01.850 --> 00:50:12.099
&gt;&gt;&gt; That makes a lot of sense. Also, what's
with the new flat icon? Why?

00:50:12.099 --> 00:50:16.529
&gt;&gt;Erik Kay: So it turned out that, I don't
know, none of us actually really loved the

00:50:16.529 --> 00:50:22.690
early icon, it turned out. It was a compromise
between not being able to find a better one.

00:50:22.690 --> 00:50:27.460
And one of the things -- we grew to love it
over time; but, you know, early on it was

00:50:27.460 --> 00:50:32.839
kind of a love-hate thing.
What we found, though, is as time went on

00:50:32.839 --> 00:50:37.809
and we kept putting the logo in different
places, that every sort of -- every artist,

00:50:37.809 --> 00:50:44.319
every place we put it put a slightly different
take on it. And it was getting morphed around

00:50:44.319 --> 00:50:49.630
partly because that 3D-rendered look wasn't
very flexible for being put in different form

00:50:49.630 --> 00:50:56.130
factors, like put on a T-shirt or put on a
Frisbee or put on a poster or -- or different

00:50:56.130 --> 00:51:00.780
art styles and whatever.
And so at the end of the day, it just found

00:51:00.780 --> 00:51:05.790
-- turned out that having a flatter style
was more adaptable to a bunch of different

00:51:05.790 --> 00:51:07.810
places we wanted to do it.
&gt;&gt;&gt; Okay, thank you.

00:51:07.810 --> 00:51:11.859
&gt;&gt;Jeff Chang: Personally I really like the
icon. I think it is more symmetrical and it

00:51:11.859 --> 00:51:15.279
spins better. So like on Frisbees and stuff
like that it looks better.

00:51:15.279 --> 00:51:19.020
I tried to get Frisbees for you guys for the
conference, but it didn't work out.

00:51:19.020 --> 00:51:22.940
Let's go to the back microphone, and then
I'll go back to the Moderator.

00:51:22.940 --> 00:51:34.450
&gt;&gt;&gt; So the HTML5 video formats, the effort
to standardize those was spoiled by a couple

00:51:34.450 --> 00:51:40.000
of bad apples.
And is the Chrome team planning on being a

00:51:40.000 --> 00:51:46.890
little bit more insistent on audio and image
formats? Or have you guys just decided to

00:51:46.890 --> 00:51:52.240
let the market sort it out and support whatever
becomes de facto standard?

00:51:52.240 --> 00:51:57.990
&gt;&gt;Ian Ellison-Taylor: Well, we've obviously
gotten very prescriptive for Chrome and with

00:51:57.990 --> 00:52:04.940
the support for WebM. I don't see that changing.
You know, we support other formats through

00:52:04.940 --> 00:52:12.010
plug-ins, and I think that will continue.
But if you are going to have a format that

00:52:12.010 --> 00:52:16.599
can be used as part of the Web standards,
specifically I'm talking about the video tag,

00:52:16.599 --> 00:52:24.549
then it needs to be a royalty-free, open standard.
And right now WebM is that. If there is more

00:52:24.549 --> 00:52:29.190
to come down the line, fantastic.
&gt;&gt;&gt; Theora already came. You guys could support

00:52:29.190 --> 00:52:31.921
that, and that would give you the three out
of five majority required to make Theora a

00:52:31.921 --> 00:52:35.990
standard format.
&gt;&gt;Ian Ellison-Taylor: I'm told that Theora

00:52:35.990 --> 00:52:41.430
is supported.
&gt;&gt;&gt; Not as a plug-in but in core?

00:52:41.430 --> 00:52:43.510
&gt;&gt;Ian Ellison-Taylor: In core. Yeah, yeah.
&gt;&gt;&gt; Fantastic.

00:52:43.510 --> 00:52:45.529
&gt;&gt;Ian Ellison-Taylor: Thanks.
&gt;&gt;&gt; Thank you.

00:52:45.529 --> 00:52:55.210
&gt;&gt;Jeff Chang: Let's do microphone in the front.
&gt;&gt;&gt; With all the browser integration and syncing

00:52:55.210 --> 00:53:00.599
between multiple browsers, is there any thoughts
or ideas on how to differentiate where the

00:53:00.599 --> 00:53:04.349
information was synced from?
So say I put a bookmark in on the mobile device,

00:53:04.349 --> 00:53:10.240
is there a way to -- on my Chrome at home,
to be able to see that, Hey, I was looking

00:53:10.240 --> 00:53:17.349
for a link that I remember I put it in on
my phone and see that it was actually brought

00:53:17.349 --> 00:53:22.020
in from my mobile device as opposed to just
a random link stuck in all the rest of them?

00:53:22.020 --> 00:53:23.020
That kind of thing, if that makes sense.
&gt;&gt;Jeff Chang: That's a very good point. We'll

00:53:23.020 --> 00:53:24.380
definitely be thinking about for which use
cases that makes sense for.

00:53:24.380 --> 00:53:27.690
For example, for recent tabs you obviously
do want to see which device the recent tab

00:53:27.690 --> 00:53:32.040
came from. We are thinking about the best
way to present that information, how to specify

00:53:32.040 --> 00:53:34.069
the device that it came from. So yes.
&gt;&gt;&gt; Thank you.

00:53:34.069 --> 00:53:40.520
&gt;&gt;Jeff Chang: We are running out of time.
Let's get through a couple more. Can you explain

00:53:40.520 --> 00:53:44.079
which parts of the browser are shared or not
shared between Webkit, Safari and Chrome?

00:53:44.079 --> 00:53:49.220
Also, which all of those bodies should I submit
a bug when I find one?

00:53:49.220 --> 00:53:57.170
&gt;&gt;Alex Russell: So Webkit is a kernel for
a browser. It is not the whole thing. The

00:53:57.170 --> 00:54:03.480
way Webkit works is you say, Hey, Webkit,
I'm navigating to this URL or Webkit maybe

00:54:03.480 --> 00:54:08.010
asks you, Please navigate to this URL. You
respond with content. And Webkit asks a whole

00:54:08.010 --> 00:54:12.119
series of follow-up questions to you to help
service the requests for everything from low-level

00:54:12.119 --> 00:54:17.069
network access to storage access to rendering.
And all those bits are things that people

00:54:17.069 --> 00:54:21.930
who port Webkit wind up plugging in their
own solutions for or, in some cases, using

00:54:21.930 --> 00:54:25.809
one of the default solutions that's in Webkit
to the extent that they exist.

00:54:25.809 --> 00:54:37.069
So we share sort of all the layout and rendering
guts that Webkit asks -- that form the engine

00:54:37.069 --> 00:54:41.310
that causes Webkit to ask us questions back
in response for. And then we plug in our own

00:54:41.310 --> 00:54:44.470
pieces where you would otherwise need to plug
in your own pieces. There are some things

00:54:44.470 --> 00:54:49.049
like V8 versus JavaScript core where we've
decided to go our own way. But generally speaking,

00:54:49.049 --> 00:54:53.839
we are plugging into the parts of Webkit where
any porter would have to do exactly the same

00:54:53.839 --> 00:54:58.250
thing.
&gt;&gt;Erik Kay: So I think the one -- this is

00:54:58.250 --> 00:55:03.420
a common problem people have, is that actually
knowing where to file the bug is kind of tricky.

00:55:03.420 --> 00:55:08.579
And if you're a browser engineer like we are,
it is obvious. Oh, of course, that is in the

00:55:08.579 --> 00:55:11.300
networking layer so that must be Chrome's
bug.

00:55:11.300 --> 00:55:15.829
You know, but in reality, it takes practice
to sort of figure out, tease out which layer

00:55:15.829 --> 00:55:19.860
the problem is at.
So the best thing I can suggest is to save

00:55:19.860 --> 00:55:25.450
yourself some time. You know, don't bother
trying to file it separately in all three

00:55:25.450 --> 00:55:32.720
places. Just pick one, take a guess. And what
will happen is if you are wrong, you know,

00:55:32.720 --> 00:55:36.170
the people who are triaging the bugs will
guide you to the right place.

00:55:36.170 --> 00:55:40.630
&gt;&gt;Ian Ellison-Taylor: I was just going to
add that, I mean, this happens to me all the

00:55:40.630 --> 00:55:46.330
time because I'm the new guy, and all I typically
do is I'll just do a search in one of them

00:55:46.330 --> 00:55:51.660
to sort of just see, you know, (a) if that
bug has already been reported or (b) if there's

00:55:51.660 --> 00:55:57.500
an area. And often you can quickly find, "Oh,
look, here's the technology area and here's,

00:55:57.500 --> 00:56:02.680
you know, how to classify the bug," and also
kind of like what kind of information you

00:56:02.680 --> 00:56:06.890
should add to the bug report, so that, you
know, people can track it down, whether it's

00:56:06.890 --> 00:56:10.779
in Chromium or Webkit.
And, you know, it only takes like 30 seconds

00:56:10.779 --> 00:56:12.779
to do it, to do a search, and that helps narrow
it down.

00:56:12.779 --> 00:56:17.900
If in doubt, just enter the bug somewhere,
because it's better to enter a bug than not.

00:56:17.900 --> 00:56:22.950
&gt;&gt;Pavel Feldman: So the rule I use is, when
I don't know where to file the bug, you have

00:56:22.950 --> 00:56:29.240
the best chances if you are filing it as -- against
yourbug.com. Just file it against Chrome and

00:56:29.240 --> 00:56:34.329
it will make its way to Webkit or not. If
it is, in fact, a Webkit bug, developers,

00:56:34.329 --> 00:56:40.170
engineers, are going to submit a bug in Webkit,
handle it, and then triage it back to Chrome

00:56:40.170 --> 00:56:46.799
to make sure it's marked as fixed.
&gt;&gt;Jeff Chang: Okay. We're over time now so

00:56:46.799 --> 00:56:49.499
let me just get the last question from the
audience and then we'll wrap it up.

00:56:49.499 --> 00:56:58.460
&gt;&gt; Hello. Since there is native plug-ins,
like the NP API, we can use to create any

00:56:58.460 --> 00:57:03.930
plug-ins we want, how can NaCl, since it's
sandbox, access what we could do before?

00:57:03.930 --> 00:57:04.930
Because if I want to access a desktop API
in Windows or Linux or Mac, we cannot do that

00:57:04.930 --> 00:57:11.390
right now.
Are you planning to -- like what are we limited

00:57:11.390 --> 00:57:18.059
in with Native Client or Pepper 2, since it's
sandbox right now?

00:57:18.059 --> 00:57:23.549
&gt;&gt;Erik Kay: Sure. There's some use cases that
Native Client just isn't going to be able

00:57:23.549 --> 00:57:29.500
to address, and if you're looking for something
which is going to access directly some low-level

00:57:29.500 --> 00:57:33.539
OS feature, you know, Native Client isn't
going to do that for you.

00:57:33.539 --> 00:57:39.240
You're going to have to use, you know, NP
API and, you know, older technologies for

00:57:39.240 --> 00:57:42.680
that, you know, and come with all the security
pitfalls that go along with that.

00:57:42.680 --> 00:57:46.839
In general, if you're accessing the low-level
interfaces, you're bypassing all the security

00:57:46.839 --> 00:57:50.510
checks, so, you know, putting it in Native
Client wouldn't help.

00:57:50.510 --> 00:57:55.880
Now, that said, we are, you know, going to
be continuing to grow and expand the pepper

00:57:55.880 --> 00:58:00.099
APIs, and essentially anything that we're
going to expose in the web browser in some

00:58:00.099 --> 00:58:05.619
form or another, we'll expose to Native Client.
So for example, if we add access to a webcam

00:58:05.619 --> 00:58:11.750
and microphone in the web browser, we would
add access to that in Native Client as well.

00:58:11.750 --> 00:58:17.549
But access to, you know, a particular, you
know, kernel interface or, you know, the Windows

00:58:17.549 --> 00:58:22.030
Explorer plug-in or whatever else, you're
unlikely to find that from us.

00:58:22.030 --> 00:58:27.309
&gt;&gt;Jeff Chang: Okay. Thanks, everyone, for
coming, and enjoy the rest of the conference.

