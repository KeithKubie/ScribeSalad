WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:03.610
Now we'll discuss the primitives provided by the

00:00:03.610 --> 00:00:07.410
lab of virtual memory for the app developer. Recall

00:00:07.410 --> 00:00:09.670
what I said earlier and that is we

00:00:09.670 --> 00:00:12.800
do not want the in memory data structures when

00:00:12.800 --> 00:00:17.340
modified to immediately start writing to the corresponding

00:00:17.340 --> 00:00:20.990
on disk version in the external data segments, because

00:00:20.990 --> 00:00:22.855
that would result in a lot of random

00:00:22.855 --> 00:00:25.670
rights. And therefore we suggested that what we want

00:00:25.670 --> 00:00:32.280
to do is use a log segment aggregate changes that we're making to the portions

00:00:32.280 --> 00:00:34.200
of the virtual address space so that the

00:00:34.200 --> 00:00:37.030
log segment can then be committed to the

00:00:37.030 --> 00:00:40.820
disk to record the changes that we're making to the virtual memory and so the

00:00:40.820 --> 00:00:46.410
first set of primitives that RVM provides is initialization.

00:00:46.410 --> 00:00:50.900
And in particular, this initialize primitive identifies

00:00:50.900 --> 00:00:53.120
the log segment to be used by the

00:00:53.120 --> 00:00:56.500
server process for recording changes to the persistent

00:00:56.500 --> 00:00:59.820
data structures of this process. And every process

00:00:59.820 --> 00:01:03.260
can declare its own log segment data structure

00:01:03.260 --> 00:01:08.830
for use in managing its persistence. So if I have a file system, it has it's

00:01:08.830 --> 00:01:12.370
own data structures. Because remember that RVM is

00:01:12.370 --> 00:01:16.970
not inside the operating system, but RVM is provided

00:01:16.970 --> 00:01:20.300
as a run time library in support of

00:01:20.300 --> 00:01:23.170
applications that lives on top of the operating

00:01:23.170 --> 00:01:26.380
system. So the library provides it's primitives and

00:01:26.380 --> 00:01:29.700
so initialize is allowing the process that is

00:01:29.700 --> 00:01:32.950
using this library to declare a log segment

00:01:32.950 --> 00:01:35.420
data structure, which will be the data structure

00:01:35.420 --> 00:01:38.280
into which RVM, in the course of execution

00:01:38.280 --> 00:01:42.060
of the process, will aggregate changes that this process

00:01:42.060 --> 00:01:44.490
is making to persistent data structures, so

00:01:44.490 --> 00:01:46.570
that later on those changes in the log

00:01:46.570 --> 00:01:50.080
segment can be committed to the desk. And

00:01:50.080 --> 00:01:53.830
even further, those changes can eventually be deflected

00:01:53.830 --> 00:01:56.980
in the data segments that those in memory

00:01:56.980 --> 00:02:00.380
versions of persistent data structures that present. The

00:02:00.380 --> 00:02:04.300
map primitive is the primitive that allows the

00:02:04.300 --> 00:02:07.320
application to say, what is the region of

00:02:07.320 --> 00:02:09.758
the virtual address space that I want mapped

00:02:09.758 --> 00:02:12.550
to an external data segment. I mentioned that there

00:02:12.550 --> 00:02:15.670
is a one to one correspondence between an address

00:02:15.670 --> 00:02:18.420
range and the virtual address space and the external

00:02:18.420 --> 00:02:22.170
data segments. So if I need to map different

00:02:22.170 --> 00:02:25.640
portions of the address space of the process to

00:02:25.640 --> 00:02:29.380
different data segments. I would execute multiple map calls

00:02:29.380 --> 00:02:32.740
to map different regions of my virtual address space

00:02:32.740 --> 00:02:35.140
to different external data segments. So this

00:02:35.140 --> 00:02:38.540
regional descriptor can contains both the address range

00:02:38.540 --> 00:02:44.140
that I want to be mapped as well as it names the external data segment. That

00:02:44.140 --> 00:02:47.035
corresponds to this particular address range. In

00:02:47.035 --> 00:02:51.300
unmap, thus delivers mainly it decouples the address

00:02:51.300 --> 00:02:54.800
range from the external data segment that it

00:02:54.800 --> 00:02:58.040
is associated with up. So in the body

00:02:58.040 --> 00:03:03.910
of the server code These are calls that an app developer would make. The

00:03:03.910 --> 00:03:06.740
begin transaction and the end transaction alerts

00:03:06.740 --> 00:03:10.980
the RVM run time that the application is

00:03:10.980 --> 00:03:13.140
about to make changes to persistent data

00:03:13.140 --> 00:03:16.550
structures between these begin and end transaction

00:03:16.550 --> 00:03:23.080
calls to the RVM library. And in fact, signals to the RVM library that the

00:03:23.080 --> 00:03:26.220
transaction has committed, meaning that all the

00:03:26.220 --> 00:03:30.610
changes that the application made in between begin

00:03:30.610 --> 00:03:36.780
and end to data structures that are persistent have to be flushed to the disk.

00:03:36.780 --> 00:03:41.090
That is, they have to be made persistent. On the other hand, a begin transaction

00:03:41.090 --> 00:03:44.120
could also end in an abort transaction which

00:03:44.120 --> 00:03:48.300
essentially signals to the RVM library that all

00:03:48.300 --> 00:03:51.430
the changes that the application made bound

00:03:51.430 --> 00:03:55.030
between begin transaction and abort transaction. Have to

00:03:55.030 --> 00:04:00.190
be thrown away by the RVM library and should not be committed to the disk, that

00:04:00.190 --> 00:04:02.620
is they should not be persistent. So the

00:04:02.620 --> 00:04:05.560
idea then is, between begin transaction and end

00:04:05.560 --> 00:04:09.720
transaction, the application developer is modifying the in-memory

00:04:09.720 --> 00:04:13.630
version of the persistent data structures And committing

00:04:13.630 --> 00:04:16.870
them to the persistency storage by calling this

00:04:16.870 --> 00:04:20.130
n transaction which is saying, commit my changes

00:04:20.130 --> 00:04:23.380
to the in memory versions to the persistent

00:04:23.380 --> 00:04:26.340
version on the disc. On the other hand, if

00:04:26.340 --> 00:04:28.940
the developer calls an abort transaction after a

00:04:28.940 --> 00:04:31.960
begin transaction then all the changes that he

00:04:31.960 --> 00:04:35.040
or she made to persistent data structures should

00:04:35.040 --> 00:04:38.990
be thrown by the RVM library and not persistent

00:04:38.990 --> 00:04:44.190
on the disc. The set range call is the very first thing that an app developer

00:04:44.190 --> 00:04:47.930
will do inside a begin transaction end transaction

00:04:47.930 --> 00:04:50.720
sequence. You can think of this code between begin

00:04:50.720 --> 00:04:53.930
transaction and end transaction like a critical section

00:04:53.930 --> 00:04:57.930
of the app developer's code base. And the first

00:04:57.930 --> 00:05:01.820
thing that happens within that critical section is

00:05:01.820 --> 00:05:04.140
a call to set range. What the set range

00:05:04.140 --> 00:05:07.930
is saying is even though an address region

00:05:07.930 --> 00:05:10.680
may be mapped to an external data segments, in

00:05:10.680 --> 00:05:13.920
this particular critical section by begin and end

00:05:13.920 --> 00:05:17.460
transaction, I'm going to modify only a portion of that

00:05:17.460 --> 00:05:19.850
address range, and that portion of the address

00:05:19.850 --> 00:05:22.610
range that I'm going to modify Is specified by

00:05:22.610 --> 00:05:26.760
the starting address and the size of that block

00:05:26.760 --> 00:05:29.185
that I'm going to modify. That's the purpose of the

00:05:29.185 --> 00:05:31.780
set-range call, which says, for this particular

00:05:31.780 --> 00:05:35.200
transaction, which I started here, for which RVM

00:05:35.200 --> 00:05:40.440
will return a unique transaction ID to me, when i make this call I'm going

00:05:40.440 --> 00:05:43.250
to use this transaction ID and tell

00:05:43.250 --> 00:05:46.830
RVM that for this particular transaction, I'm going

00:05:46.830 --> 00:05:51.590
modify only a block of memory starting

00:05:51.590 --> 00:05:54.460
at this address and bound by this address.

00:05:54.460 --> 00:05:57.290
That's the purpose of the set change code. So,

00:05:57.290 --> 00:05:59.300
it is only this portion of it that you are

00:05:59.300 --> 00:06:02.590
going to modify. And we will see how all of

00:06:02.590 --> 00:06:05.380
what I said is used by the RVM library in

00:06:05.380 --> 00:06:08.930
its implementation in a minute. But from the user's

00:06:08.930 --> 00:06:11.510
point of view, from the developer's point of view, this

00:06:11.510 --> 00:06:15.120
is all that developer needs to know and use in

00:06:15.120 --> 00:06:19.870
order to write his application that has persistent data structures.

00:06:19.870 --> 00:06:23.120
As simple as that. All the heavy lifting that is

00:06:23.120 --> 00:06:28.690
needed to accomplish the developers intent for persistence that are

00:06:28.690 --> 00:06:32.080
enshrined in these primitives is taken care of by the

00:06:32.080 --> 00:06:34.620
RVM run time which we will see in a minute.

