WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:01.810
 
in the previous video I mentioned that

00:00:01.810 --> 00:00:01.820
in the previous video I mentioned that
 

00:00:01.820 --> 00:00:04.039
in the previous video I mentioned that
broadcasting is another technique that

00:00:04.039 --> 00:00:04.049
broadcasting is another technique that
 

00:00:04.049 --> 00:00:05.930
broadcasting is another technique that
you can use to make your Python code run

00:00:05.930 --> 00:00:05.940
you can use to make your Python code run
 

00:00:05.940 --> 00:00:08.570
you can use to make your Python code run
faster in this video let's delve into

00:00:08.570 --> 00:00:08.580
faster in this video let's delve into
 

00:00:08.580 --> 00:00:10.669
faster in this video let's delve into
how broadcasting in Python actually

00:00:10.669 --> 00:00:10.679
how broadcasting in Python actually
 

00:00:10.679 --> 00:00:13.310
how broadcasting in Python actually
works let's motivate broadcasting with

00:00:13.310 --> 00:00:13.320
works let's motivate broadcasting with
 

00:00:13.320 --> 00:00:15.680
works let's motivate broadcasting with
an example in this matrix I've shown the

00:00:15.680 --> 00:00:15.690
an example in this matrix I've shown the
 

00:00:15.690 --> 00:00:18.529
an example in this matrix I've shown the
number of calories from carbohydrates

00:00:18.529 --> 00:00:18.539
number of calories from carbohydrates
 

00:00:18.539 --> 00:00:20.900
number of calories from carbohydrates
proteins and fats in hundred grams of

00:00:20.900 --> 00:00:20.910
proteins and fats in hundred grams of
 

00:00:20.910 --> 00:00:22.910
proteins and fats in hundred grams of
four different foods so for example

00:00:22.910 --> 00:00:22.920
four different foods so for example
 

00:00:22.920 --> 00:00:26.450
four different foods so for example
under grams of apples turns out has 56

00:00:26.450 --> 00:00:26.460
under grams of apples turns out has 56
 

00:00:26.460 --> 00:00:28.580
under grams of apples turns out has 56
calories from carbs and much less from

00:00:28.580 --> 00:00:28.590
calories from carbs and much less from
 

00:00:28.590 --> 00:00:30.080
calories from carbs and much less from
proteins and fats whereas in contrast

00:00:30.080 --> 00:00:30.090
proteins and fats whereas in contrast
 

00:00:30.090 --> 00:00:34.250
proteins and fats whereas in contrast
100 grams of beef has 104 calories from

00:00:34.250 --> 00:00:34.260
100 grams of beef has 104 calories from
 

00:00:34.260 --> 00:00:38.030
100 grams of beef has 104 calories from
protein 135 calories from that now let's

00:00:38.030 --> 00:00:38.040
protein 135 calories from that now let's
 

00:00:38.040 --> 00:00:40.940
protein 135 calories from that now let's
say your goal is to calculate the

00:00:40.940 --> 00:00:40.950
say your goal is to calculate the
 

00:00:40.950 --> 00:00:44.479
say your goal is to calculate the
percentage of calories from carbs

00:00:44.479 --> 00:00:44.489
percentage of calories from carbs
 

00:00:44.489 --> 00:00:47.720
percentage of calories from carbs
proteins and fats for each of the four

00:00:47.720 --> 00:00:47.730
proteins and fats for each of the four
 

00:00:47.730 --> 00:00:50.119
proteins and fats for each of the four
foods so for example if you look at this

00:00:50.119 --> 00:00:50.129
foods so for example if you look at this
 

00:00:50.129 --> 00:00:52.549
foods so for example if you look at this
column and add up the numbers in that

00:00:52.549 --> 00:00:52.559
column and add up the numbers in that
 

00:00:52.559 --> 00:00:55.340
column and add up the numbers in that
column you get that 100 grams of apple

00:00:55.340 --> 00:00:55.350
column you get that 100 grams of apple
 

00:00:55.350 --> 00:00:57.889
column you get that 100 grams of apple
has 26 plus one point two plus one point

00:00:57.889 --> 00:00:57.899
has 26 plus one point two plus one point
 

00:00:57.899 --> 00:01:03.410
has 26 plus one point two plus one point
eight so that's 59 calories and so as a

00:01:03.410 --> 00:01:03.420
eight so that's 59 calories and so as a
 

00:01:03.420 --> 00:01:06.140
eight so that's 59 calories and so as a
percentage the percentage of calories

00:01:06.140 --> 00:01:06.150
percentage the percentage of calories
 

00:01:06.150 --> 00:01:10.000
percentage the percentage of calories
from carbohydrates in an apple would be

00:01:10.000 --> 00:01:10.010
from carbohydrates in an apple would be
 

00:01:10.010 --> 00:01:17.660
from carbohydrates in an apple would be
56,000 59s Delta 94.9% so most of the

00:01:17.660 --> 00:01:17.670
56,000 59s Delta 94.9% so most of the
 

00:01:17.670 --> 00:01:21.020
56,000 59s Delta 94.9% so most of the
calories in an apple on come from comps

00:01:21.020 --> 00:01:21.030
calories in an apple on come from comps
 

00:01:21.030 --> 00:01:23.450
calories in an apple on come from comps
whereas in contrast mostly calories of

00:01:23.450 --> 00:01:23.460
whereas in contrast mostly calories of
 

00:01:23.460 --> 00:01:27.020
whereas in contrast mostly calories of
eve come from protein and fat and so on

00:01:27.020 --> 00:01:27.030
eve come from protein and fat and so on
 

00:01:27.030 --> 00:01:29.749
eve come from protein and fat and so on
so the calculation you want is really to

00:01:29.749 --> 00:01:29.759
so the calculation you want is really to
 

00:01:29.759 --> 00:01:33.740
so the calculation you want is really to
sum up each of the four columns of this

00:01:33.740 --> 00:01:33.750
sum up each of the four columns of this
 

00:01:33.750 --> 00:01:35.719
sum up each of the four columns of this
matrix to get the total number of

00:01:35.719 --> 00:01:35.729
matrix to get the total number of
 

00:01:35.729 --> 00:01:39.140
matrix to get the total number of
calories in 100 grams of apple beef eggs

00:01:39.140 --> 00:01:39.150
calories in 100 grams of apple beef eggs
 

00:01:39.150 --> 00:01:43.249
calories in 100 grams of apple beef eggs
or potatoes and then to divide

00:01:43.249 --> 00:01:43.259
or potatoes and then to divide
 

00:01:43.259 --> 00:01:47.870
or potatoes and then to divide
throughout the matrix so as to get the

00:01:47.870 --> 00:01:47.880
throughout the matrix so as to get the
 

00:01:47.880 --> 00:01:50.569
throughout the matrix so as to get the
percentage of calories from carbs

00:01:50.569 --> 00:01:50.579
percentage of calories from carbs
 

00:01:50.579 --> 00:01:53.120
percentage of calories from carbs
proteins and fats for each of the four

00:01:53.120 --> 00:01:53.130
proteins and fats for each of the four
 

00:01:53.130 --> 00:01:57.380
proteins and fats for each of the four
foods so the question is can you do this

00:01:57.380 --> 00:01:57.390
foods so the question is can you do this
 

00:01:57.390 --> 00:02:01.580
foods so the question is can you do this
without an explicit for loop let's take

00:02:01.580 --> 00:02:01.590
without an explicit for loop let's take
 

00:02:01.590 --> 00:02:04.550
without an explicit for loop let's take
a look at how you could do that what I'm

00:02:04.550 --> 00:02:04.560
a look at how you could do that what I'm
 

00:02:04.560 --> 00:02:07.260
a look at how you could do that what I'm
going to do is show you how you can set

00:02:07.260 --> 00:02:07.270
going to do is show you how you can set
 

00:02:07.270 --> 00:02:10.970
going to do is show you how you can set
say this matrix equal to a 3 by 4 matrix

00:02:10.970 --> 00:02:10.980
say this matrix equal to a 3 by 4 matrix
 

00:02:10.980 --> 00:02:15.120
say this matrix equal to a 3 by 4 matrix
a and then with one buying a Python code

00:02:15.120 --> 00:02:15.130
a and then with one buying a Python code
 

00:02:15.130 --> 00:02:18.540
a and then with one buying a Python code
we're going to sum down the columns so

00:02:18.540 --> 00:02:18.550
we're going to sum down the columns so
 

00:02:18.550 --> 00:02:19.620
we're going to sum down the columns so
we're going to get four numbers

00:02:19.620 --> 00:02:19.630
we're going to get four numbers
 

00:02:19.630 --> 00:02:22.589
we're going to get four numbers
corresponding to the total number of

00:02:22.589 --> 00:02:22.599
corresponding to the total number of
 

00:02:22.599 --> 00:02:24.990
corresponding to the total number of
calories in these four different types

00:02:24.990 --> 00:02:25.000
calories in these four different types
 

00:02:25.000 --> 00:02:27.089
calories in these four different types
of food 100 grams of these 4 different

00:02:27.089 --> 00:02:27.099
of food 100 grams of these 4 different
 

00:02:27.099 --> 00:02:28.890
of food 100 grams of these 4 different
types of food and I'm going to use a

00:02:28.890 --> 00:02:28.900
types of food and I'm going to use a
 

00:02:28.900 --> 00:02:31.800
types of food and I'm going to use a
second line of Python code to divide

00:02:31.800 --> 00:02:31.810
second line of Python code to divide
 

00:02:31.810 --> 00:02:34.020
second line of Python code to divide
each of the 4 columns by their

00:02:34.020 --> 00:02:34.030
each of the 4 columns by their
 

00:02:34.030 --> 00:02:36.030
each of the 4 columns by their
corresponding sum if that verbal

00:02:36.030 --> 00:02:36.040
corresponding sum if that verbal
 

00:02:36.040 --> 00:02:37.620
corresponding sum if that verbal
description wasn't very clear hopefully

00:02:37.620 --> 00:02:37.630
description wasn't very clear hopefully
 

00:02:37.630 --> 00:02:39.150
description wasn't very clear hopefully
you'll be clearer in a second when we

00:02:39.150 --> 00:02:39.160
you'll be clearer in a second when we
 

00:02:39.160 --> 00:02:41.220
you'll be clearer in a second when we
look at the Python code so here we are

00:02:41.220 --> 00:02:41.230
look at the Python code so here we are
 

00:02:41.230 --> 00:02:42.630
look at the Python code so here we are
in the jupiter notebook i've already

00:02:42.630 --> 00:02:42.640
in the jupiter notebook i've already
 

00:02:42.640 --> 00:02:44.729
in the jupiter notebook i've already
written this first piece of code to

00:02:44.729 --> 00:02:44.739
written this first piece of code to
 

00:02:44.739 --> 00:02:47.340
written this first piece of code to
pre-populate the matrix a with the

00:02:47.340 --> 00:02:47.350
pre-populate the matrix a with the
 

00:02:47.350 --> 00:02:48.990
pre-populate the matrix a with the
numbers we had just now so let me hit

00:02:48.990 --> 00:02:49.000
numbers we had just now so let me hit
 

00:02:49.000 --> 00:02:50.729
numbers we had just now so let me hit
shift enter and just run that so let the

00:02:50.729 --> 00:02:50.739
shift enter and just run that so let the
 

00:02:50.739 --> 00:02:53.039
shift enter and just run that so let the
meter gray and now here are the two

00:02:53.039 --> 00:02:53.049
meter gray and now here are the two
 

00:02:53.049 --> 00:02:55.680
meter gray and now here are the two
lines of Python code first we compute

00:02:55.680 --> 00:02:55.690
lines of Python code first we compute
 

00:02:55.690 --> 00:03:01.050
lines of Python code first we compute
Cal equals a dot sum and X is equal zero

00:03:01.050 --> 00:03:01.060
Cal equals a dot sum and X is equal zero
 

00:03:01.060 --> 00:03:02.670
Cal equals a dot sum and X is equal zero
means the Sun vertical you say more

00:03:02.670 --> 00:03:02.680
means the Sun vertical you say more
 

00:03:02.680 --> 00:03:04.949
means the Sun vertical you say more
about that a little bit and then just

00:03:04.949 --> 00:03:04.959
about that a little bit and then just
 

00:03:04.959 --> 00:03:08.160
about that a little bit and then just
print Cal so so if some vertically

00:03:08.160 --> 00:03:08.170
print Cal so so if some vertically
 

00:03:08.170 --> 00:03:11.370
print Cal so so if some vertically
serves we say just now 59 is the total

00:03:11.370 --> 00:03:11.380
serves we say just now 59 is the total
 

00:03:11.380 --> 00:03:14.580
serves we say just now 59 is the total
number of calories in the apple 239 with

00:03:14.580 --> 00:03:14.590
number of calories in the apple 239 with
 

00:03:14.590 --> 00:03:16.199
number of calories in the apple 239 with
the toe number calorie to the beef and

00:03:16.199 --> 00:03:16.209
the toe number calorie to the beef and
 

00:03:16.209 --> 00:03:20.009
the toe number calorie to the beef and
eggs and potato and so on and then going

00:03:20.009 --> 00:03:20.019
eggs and potato and so on and then going
 

00:03:20.019 --> 00:03:25.250
eggs and potato and so on and then going
to compute percentage equals a over Rho

00:03:25.250 --> 00:03:25.260
to compute percentage equals a over Rho
 

00:03:25.260 --> 00:03:31.440
to compute percentage equals a over Rho
cow dot reshape 1 by 4 actually we want

00:03:31.440 --> 00:03:31.450
cow dot reshape 1 by 4 actually we want
 

00:03:31.450 --> 00:03:35.390
cow dot reshape 1 by 4 actually we want
percentages multiply by 100 year and

00:03:35.390 --> 00:03:35.400
percentages multiply by 100 year and
 

00:03:35.400 --> 00:03:40.979
percentages multiply by 100 year and
then let's print percentage let's run

00:03:40.979 --> 00:03:40.989
then let's print percentage let's run
 

00:03:40.989 --> 00:03:42.870
then let's print percentage let's run
that and so that command

00:03:42.870 --> 00:03:42.880
that and so that command
 

00:03:42.880 --> 00:03:46.949
that and so that command
we've taken the matrix a and divided it

00:03:46.949 --> 00:03:46.959
we've taken the matrix a and divided it
 

00:03:46.959 --> 00:03:51.390
we've taken the matrix a and divided it
by this 1 by 4 matrix and this gives us

00:03:51.390 --> 00:03:51.400
by this 1 by 4 matrix and this gives us
 

00:03:51.400 --> 00:03:53.280
by this 1 by 4 matrix and this gives us
the matrix of percentages so as we

00:03:53.280 --> 00:03:53.290
the matrix of percentages so as we
 

00:03:53.290 --> 00:03:55.830
the matrix of percentages so as we
worked out kind of by hand just now you

00:03:55.830 --> 00:03:55.840
worked out kind of by hand just now you
 

00:03:55.840 --> 00:03:57.809
worked out kind of by hand just now you
know in the in the Apple that was the

00:03:57.809 --> 00:03:57.819
know in the in the Apple that was the
 

00:03:57.819 --> 00:03:59.819
know in the in the Apple that was the
first column ninety four point nine

00:03:59.819 --> 00:03:59.829
first column ninety four point nine
 

00:03:59.829 --> 00:04:02.039
first column ninety four point nine
percent of the calories off from carbs

00:04:02.039 --> 00:04:02.049
percent of the calories off from carbs
 

00:04:02.049 --> 00:04:03.539
percent of the calories off from carbs
let's go back to the slice

00:04:03.539 --> 00:04:03.549
let's go back to the slice
 

00:04:03.549 --> 00:04:05.729
let's go back to the slice
so just to repeat the two lines of code

00:04:05.729 --> 00:04:05.739
so just to repeat the two lines of code
 

00:04:05.739 --> 00:04:07.440
so just to repeat the two lines of code
we had this is what we have written out

00:04:07.440 --> 00:04:07.450
we had this is what we have written out
 

00:04:07.450 --> 00:04:10.620
we had this is what we have written out
in the Jupiter notebook so as a bit of

00:04:10.620 --> 00:04:10.630
in the Jupiter notebook so as a bit of
 

00:04:10.630 --> 00:04:14.729
in the Jupiter notebook so as a bit of
detail this parameter axis equal zero

00:04:14.729 --> 00:04:14.739
detail this parameter axis equal zero
 

00:04:14.739 --> 00:04:17.759
detail this parameter axis equal zero
means that you want Python to some

00:04:17.759 --> 00:04:17.769
means that you want Python to some
 

00:04:17.769 --> 00:04:20.470
means that you want Python to some
vertically so this is x is zero

00:04:20.470 --> 00:04:20.480
vertically so this is x is zero
 

00:04:20.480 --> 00:04:23.140
vertically so this is x is zero
vertically whereas the horizontal axis

00:04:23.140 --> 00:04:23.150
vertically whereas the horizontal axis
 

00:04:23.150 --> 00:04:25.360
vertically whereas the horizontal axis
is X this one saluton right axis one or

00:04:25.360 --> 00:04:25.370
is X this one saluton right axis one or
 

00:04:25.370 --> 00:04:27.400
is X this one saluton right axis one or
some horizontal uses on birth degree and

00:04:27.400 --> 00:04:27.410
some horizontal uses on birth degree and
 

00:04:27.410 --> 00:04:31.030
some horizontal uses on birth degree and
then this command here this is an

00:04:31.030 --> 00:04:31.040
then this command here this is an
 

00:04:31.040 --> 00:04:33.490
then this command here this is an
example of pipes and broadcasting where

00:04:33.490 --> 00:04:33.500
example of pipes and broadcasting where
 

00:04:33.500 --> 00:04:36.580
example of pipes and broadcasting where
you take a matrix a so this is a 3 by 4

00:04:36.580 --> 00:04:36.590
you take a matrix a so this is a 3 by 4
 

00:04:36.590 --> 00:04:41.220
you take a matrix a so this is a 3 by 4
matrix and you divide it by a 1 by 4

00:04:41.220 --> 00:04:41.230
matrix and you divide it by a 1 by 4
 

00:04:41.230 --> 00:04:44.710
matrix and you divide it by a 1 by 4
matrix and technically after this first

00:04:44.710 --> 00:04:44.720
matrix and technically after this first
 

00:04:44.720 --> 00:04:47.380
matrix and technically after this first
line of code Cal the variable count is

00:04:47.380 --> 00:04:47.390
line of code Cal the variable count is
 

00:04:47.390 --> 00:04:50.020
line of code Cal the variable count is
already a 1 by 4 matrix so technically

00:04:50.020 --> 00:04:50.030
already a 1 by 4 matrix so technically
 

00:04:50.030 --> 00:04:52.540
already a 1 by 4 matrix so technically
you don't need to call reshape here

00:04:52.540 --> 00:04:52.550
you don't need to call reshape here
 

00:04:52.550 --> 00:04:54.280
you don't need to call reshape here
again so that's a little bit redundant

00:04:54.280 --> 00:04:54.290
again so that's a little bit redundant
 

00:04:54.290 --> 00:04:58.000
again so that's a little bit redundant
but when I'm writing typing codes if I'm

00:04:58.000 --> 00:04:58.010
but when I'm writing typing codes if I'm
 

00:04:58.010 --> 00:05:00.670
but when I'm writing typing codes if I'm
not entirely sure what matrix what are

00:05:00.670 --> 00:05:00.680
not entirely sure what matrix what are
 

00:05:00.680 --> 00:05:02.830
not entirely sure what matrix what are
the dimensions of a matrix I often will

00:05:02.830 --> 00:05:02.840
the dimensions of a matrix I often will
 

00:05:02.840 --> 00:05:04.510
the dimensions of a matrix I often will
just call a reshape come on just to make

00:05:04.510 --> 00:05:04.520
just call a reshape come on just to make
 

00:05:04.520 --> 00:05:07.150
just call a reshape come on just to make
sure that is you know the right column

00:05:07.150 --> 00:05:07.160
sure that is you know the right column
 

00:05:07.160 --> 00:05:08.560
sure that is you know the right column
vector with a row vector or whatever you

00:05:08.560 --> 00:05:08.570
vector with a row vector or whatever you
 

00:05:08.570 --> 00:05:10.840
vector with a row vector or whatever you
want it to be the reshape command is a

00:05:10.840 --> 00:05:10.850
want it to be the reshape command is a
 

00:05:10.850 --> 00:05:13.090
want it to be the reshape command is a
constant times order one operation this

00:05:13.090 --> 00:05:13.100
constant times order one operation this
 

00:05:13.100 --> 00:05:15.700
constant times order one operation this
is very cheap at all so don't be shy

00:05:15.700 --> 00:05:15.710
is very cheap at all so don't be shy
 

00:05:15.710 --> 00:05:17.470
is very cheap at all so don't be shy
about using the reshape c'mon to make

00:05:17.470 --> 00:05:17.480
about using the reshape c'mon to make
 

00:05:17.480 --> 00:05:20.140
about using the reshape c'mon to make
sure that your matrices are the size you

00:05:20.140 --> 00:05:20.150
sure that your matrices are the size you
 

00:05:20.150 --> 00:05:23.170
sure that your matrices are the size you
needed to be now let's explain in

00:05:23.170 --> 00:05:23.180
needed to be now let's explain in
 

00:05:23.180 --> 00:05:25.930
needed to be now let's explain in
greater detail how this type of

00:05:25.930 --> 00:05:25.940
greater detail how this type of
 

00:05:25.940 --> 00:05:28.420
greater detail how this type of
operation works right we have a 3 by 4

00:05:28.420 --> 00:05:28.430
operation works right we have a 3 by 4
 

00:05:28.430 --> 00:05:32.830
operation works right we have a 3 by 4
matrix and we divided it by a 1 by 4

00:05:32.830 --> 00:05:32.840
matrix and we divided it by a 1 by 4
 

00:05:32.840 --> 00:05:35.380
matrix and we divided it by a 1 by 4
matrix so how can you divide a 3 by 4

00:05:35.380 --> 00:05:35.390
matrix so how can you divide a 3 by 4
 

00:05:35.390 --> 00:05:37.990
matrix so how can you divide a 3 by 4
matrix by ax by a 1 by 4 matrix about 1

00:05:37.990 --> 00:05:38.000
matrix by ax by a 1 by 4 matrix about 1
 

00:05:38.000 --> 00:05:40.990
matrix by ax by a 1 by 4 matrix about 1
by 4 vector let's go through a few more

00:05:40.990 --> 00:05:41.000
by 4 vector let's go through a few more
 

00:05:41.000 --> 00:05:43.900
by 4 vector let's go through a few more
examples of Broadcasting if you take a 4

00:05:43.900 --> 00:05:43.910
examples of Broadcasting if you take a 4
 

00:05:43.910 --> 00:05:47.140
examples of Broadcasting if you take a 4
by 1 vector and add it to number what

00:05:47.140 --> 00:05:47.150
by 1 vector and add it to number what
 

00:05:47.150 --> 00:05:50.140
by 1 vector and add it to number what
Python will do is take this number and

00:05:50.140 --> 00:05:50.150
Python will do is take this number and
 

00:05:50.150 --> 00:05:55.870
Python will do is take this number and
also expand it into a 4 by 1 vector as

00:05:55.870 --> 00:05:55.880
also expand it into a 4 by 1 vector as
 

00:05:55.880 --> 00:05:59.320
also expand it into a 4 by 1 vector as
well as follows and so the vector 1 2 3

00:05:59.320 --> 00:05:59.330
well as follows and so the vector 1 2 3
 

00:05:59.330 --> 00:06:01.780
well as follows and so the vector 1 2 3
4 plus the number 100 and ends up with

00:06:01.780 --> 00:06:01.790
4 plus the number 100 and ends up with
 

00:06:01.790 --> 00:06:04.840
4 plus the number 100 and ends up with
that vector on the right you're adding

00:06:04.840 --> 00:06:04.850
that vector on the right you're adding
 

00:06:04.850 --> 00:06:07.240
that vector on the right you're adding
100 to every element so in fact we use

00:06:07.240 --> 00:06:07.250
100 to every element so in fact we use
 

00:06:07.250 --> 00:06:09.190
100 to every element so in fact we use
this form of broadcasting where that

00:06:09.190 --> 00:06:09.200
this form of broadcasting where that
 

00:06:09.200 --> 00:06:12.490
this form of broadcasting where that
constants was on the parameter B in an

00:06:12.490 --> 00:06:12.500
constants was on the parameter B in an
 

00:06:12.500 --> 00:06:15.300
constants was on the parameter B in an
earlier video and this type of

00:06:15.300 --> 00:06:15.310
earlier video and this type of
 

00:06:15.310 --> 00:06:17.770
earlier video and this type of
Broadcasting were also both column

00:06:17.770 --> 00:06:17.780
Broadcasting were also both column
 

00:06:17.780 --> 00:06:20.200
Broadcasting were also both column
vectors and row vectors and in fact we

00:06:20.200 --> 00:06:20.210
vectors and row vectors and in fact we
 

00:06:20.210 --> 00:06:21.700
vectors and row vectors and in fact we
use a similar form of broadcasting

00:06:21.700 --> 00:06:21.710
use a similar form of broadcasting
 

00:06:21.710 --> 00:06:24.790
use a similar form of broadcasting
earlier with the constant we're adding

00:06:24.790 --> 00:06:24.800
earlier with the constant we're adding
 

00:06:24.800 --> 00:06:27.370
earlier with the constant we're adding
to a vector being the parameter B in

00:06:27.370 --> 00:06:27.380
to a vector being the parameter B in
 

00:06:27.380 --> 00:06:29.720
to a vector being the parameter B in
logistic regression

00:06:29.720 --> 00:06:29.730
logistic regression
 

00:06:29.730 --> 00:06:31.910
logistic regression
here's another example let's say you

00:06:31.910 --> 00:06:31.920
here's another example let's say you
 

00:06:31.920 --> 00:06:36.650
here's another example let's say you
have a 2 by 3 matrix and you add it to

00:06:36.650 --> 00:06:36.660
have a 2 by 3 matrix and you add it to
 

00:06:36.660 --> 00:06:41.660
have a 2 by 3 matrix and you add it to
this 1 by n matrix so the general case

00:06:41.660 --> 00:06:41.670
this 1 by n matrix so the general case
 

00:06:41.670 --> 00:06:46.250
this 1 by n matrix so the general case
would be if you have some m by n matrix

00:06:46.250 --> 00:06:46.260
would be if you have some m by n matrix
 

00:06:46.260 --> 00:06:54.370
would be if you have some m by n matrix
here and you add it to a 1 by n matrix

00:06:54.370 --> 00:06:54.380
here and you add it to a 1 by n matrix
 

00:06:54.380 --> 00:06:58.280
here and you add it to a 1 by n matrix
what python will do is copy the matrix M

00:06:58.280 --> 00:06:58.290
what python will do is copy the matrix M
 

00:06:58.290 --> 00:07:00.770
what python will do is copy the matrix M
times to turn this into an M by n matrix

00:07:00.770 --> 00:07:00.780
times to turn this into an M by n matrix
 

00:07:00.780 --> 00:07:05.780
times to turn this into an M by n matrix
so instead of this 1 by 3 matrix will

00:07:05.780 --> 00:07:05.790
so instead of this 1 by 3 matrix will
 

00:07:05.790 --> 00:07:08.570
so instead of this 1 by 3 matrix will
copy it twice in this example to turn it

00:07:08.570 --> 00:07:08.580
copy it twice in this example to turn it
 

00:07:08.580 --> 00:07:14.210
copy it twice in this example to turn it
into this also 2 by 3 matrix and they'll

00:07:14.210 --> 00:07:14.220
into this also 2 by 3 matrix and they'll
 

00:07:14.220 --> 00:07:16.730
into this also 2 by 3 matrix and they'll
add these so you end up with this sum on

00:07:16.730 --> 00:07:16.740
add these so you end up with this sum on
 

00:07:16.740 --> 00:07:19.910
add these so you end up with this sum on
the right ok so you've taken your added

00:07:19.910 --> 00:07:19.920
the right ok so you've taken your added
 

00:07:19.920 --> 00:07:21.680
the right ok so you've taken your added
100 to the first column and the two

00:07:21.680 --> 00:07:21.690
100 to the first column and the two
 

00:07:21.690 --> 00:07:24.350
100 to the first column and the two
inches to the second column added 300 to

00:07:24.350 --> 00:07:24.360
inches to the second column added 300 to
 

00:07:24.360 --> 00:07:26.630
inches to the second column added 300 to
the third column and this is basically

00:07:26.630 --> 00:07:26.640
the third column and this is basically
 

00:07:26.640 --> 00:07:28.910
the third column and this is basically
what we did on the previous slide except

00:07:28.910 --> 00:07:28.920
what we did on the previous slide except
 

00:07:28.920 --> 00:07:31.520
what we did on the previous slide except
that we use a division operation instead

00:07:31.520 --> 00:07:31.530
that we use a division operation instead
 

00:07:31.530 --> 00:07:34.460
that we use a division operation instead
of an addition operation just one last

00:07:34.460 --> 00:07:34.470
of an addition operation just one last
 

00:07:34.470 --> 00:07:39.860
of an addition operation just one last
example one of you have a M by n matrix

00:07:39.860 --> 00:07:39.870
example one of you have a M by n matrix
 

00:07:39.870 --> 00:07:44.750
example one of you have a M by n matrix
and your hand is to an M by 1 vector an

00:07:44.750 --> 00:07:44.760
and your hand is to an M by 1 vector an
 

00:07:44.760 --> 00:07:48.500
and your hand is to an M by 1 vector an
M by 1 matrix then just copy this n

00:07:48.500 --> 00:07:48.510
M by 1 matrix then just copy this n
 

00:07:48.510 --> 00:07:51.380
M by 1 matrix then just copy this n
times horizontally so you end up with an

00:07:51.380 --> 00:07:51.390
times horizontally so you end up with an
 

00:07:51.390 --> 00:07:54.320
times horizontally so you end up with an
M by n matrix so as you can imagine the

00:07:54.320 --> 00:07:54.330
M by n matrix so as you can imagine the
 

00:07:54.330 --> 00:07:56.870
M by n matrix so as you can imagine the
copy and horizontally three times and

00:07:56.870 --> 00:07:56.880
copy and horizontally three times and
 

00:07:56.880 --> 00:08:00.080
copy and horizontally three times and
nando's so we add them you end up with

00:08:00.080 --> 00:08:00.090
nando's so we add them you end up with
 

00:08:00.090 --> 00:08:03.590
nando's so we add them you end up with
this so we've added 100 to the first row

00:08:03.590 --> 00:08:03.600
this so we've added 100 to the first row
 

00:08:03.600 --> 00:08:08.330
this so we've added 100 to the first row
and add it 200 to the second row here's

00:08:08.330 --> 00:08:08.340
and add it 200 to the second row here's
 

00:08:08.340 --> 00:08:09.860
and add it 200 to the second row here's
the more general principle of

00:08:09.860 --> 00:08:09.870
the more general principle of
 

00:08:09.870 --> 00:08:13.360
the more general principle of
broadcasting in Eisen if you have an M

00:08:13.360 --> 00:08:13.370
broadcasting in Eisen if you have an M
 

00:08:13.370 --> 00:08:18.350
broadcasting in Eisen if you have an M
by n matrix and you add or subtract or

00:08:18.350 --> 00:08:18.360
by n matrix and you add or subtract or
 

00:08:18.360 --> 00:08:23.570
by n matrix and you add or subtract or
multiply or divide or they 1 by n matrix

00:08:23.570 --> 00:08:23.580
multiply or divide or they 1 by n matrix
 

00:08:23.580 --> 00:08:28.840
multiply or divide or they 1 by n matrix
then this will copy it n times into an M

00:08:28.840 --> 00:08:28.850
then this will copy it n times into an M
 

00:08:28.850 --> 00:08:33.020
then this will copy it n times into an M
by n matrix and then apply the addition

00:08:33.020 --> 00:08:33.030
by n matrix and then apply the addition
 

00:08:33.030 --> 00:08:34.750
by n matrix and then apply the addition
subtraction multiplication or division

00:08:34.750 --> 00:08:34.760
subtraction multiplication or division
 

00:08:34.760 --> 00:08:37.390
subtraction multiplication or division
element-wise

00:08:37.390 --> 00:08:37.400
element-wise
 

00:08:37.400 --> 00:08:40.150
element-wise
conversely you were to take the n by n

00:08:40.150 --> 00:08:40.160
conversely you were to take the n by n
 

00:08:40.160 --> 00:08:42.130
conversely you were to take the n by n
matrix and add subtract multiply divide

00:08:42.130 --> 00:08:42.140
matrix and add subtract multiply divide
 

00:08:42.140 --> 00:08:46.540
matrix and add subtract multiply divide
by an M by 1 matrix then also this will

00:08:46.540 --> 00:08:46.550
by an M by 1 matrix then also this will
 

00:08:46.550 --> 00:08:49.690
by an M by 1 matrix then also this will
copy it now n times and turn that into

00:08:49.690 --> 00:08:49.700
copy it now n times and turn that into
 

00:08:49.700 --> 00:08:52.390
copy it now n times and turn that into
an M by n matrix and then apply the

00:08:52.390 --> 00:08:52.400
an M by n matrix and then apply the
 

00:08:52.400 --> 00:08:55.180
an M by n matrix and then apply the
operation element-wise just 1 on the

00:08:55.180 --> 00:08:55.190
operation element-wise just 1 on the
 

00:08:55.190 --> 00:08:56.740
operation element-wise just 1 on the
phone forecasting which is if you have

00:08:56.740 --> 00:08:56.750
phone forecasting which is if you have
 

00:08:56.750 --> 00:09:00.340
phone forecasting which is if you have
an M by 1 matrix so that's really a

00:09:00.340 --> 00:09:00.350
an M by 1 matrix so that's really a
 

00:09:00.350 --> 00:09:04.380
an M by 1 matrix so that's really a
column vector like 1 2 3 and you add

00:09:04.380 --> 00:09:04.390
column vector like 1 2 3 and you add
 

00:09:04.390 --> 00:09:07.600
column vector like 1 2 3 and you add
subtract multiply or divide by a real

00:09:07.600 --> 00:09:07.610
subtract multiply or divide by a real
 

00:09:07.610 --> 00:09:11.350
subtract multiply or divide by a real
number so we get 1 by 1 matrix so such

00:09:11.350 --> 00:09:11.360
number so we get 1 by 1 matrix so such
 

00:09:11.360 --> 00:09:15.610
number so we get 1 by 1 matrix so such
that was 100 then you end up copying

00:09:15.610 --> 00:09:15.620
that was 100 then you end up copying
 

00:09:15.620 --> 00:09:20.680
that was 100 then you end up copying
this real number n times until you also

00:09:20.680 --> 00:09:20.690
this real number n times until you also
 

00:09:20.690 --> 00:09:24.490
this real number n times until you also
get another n by 1 matrix and then you

00:09:24.490 --> 00:09:24.500
get another n by 1 matrix and then you
 

00:09:24.500 --> 00:09:26.920
get another n by 1 matrix and then you
perform the operation which is addition

00:09:26.920 --> 00:09:26.930
perform the operation which is addition
 

00:09:26.930 --> 00:09:29.200
perform the operation which is addition
on this example element twice and

00:09:29.200 --> 00:09:29.210
on this example element twice and
 

00:09:29.210 --> 00:09:34.900
on this example element twice and
something similar also works for row

00:09:34.900 --> 00:09:34.910
something similar also works for row
 

00:09:34.910 --> 00:09:39.820
something similar also works for row
vectors the fully general version of

00:09:39.820 --> 00:09:39.830
vectors the fully general version of
 

00:09:39.830 --> 00:09:42.310
vectors the fully general version of
Broadcasting can do even a little bit

00:09:42.310 --> 00:09:42.320
Broadcasting can do even a little bit
 

00:09:42.320 --> 00:09:44.560
Broadcasting can do even a little bit
more than this if you're interested you

00:09:44.560 --> 00:09:44.570
more than this if you're interested you
 

00:09:44.570 --> 00:09:49.360
more than this if you're interested you
can read the documentation of a numpy

00:09:49.360 --> 00:09:49.370
can read the documentation of a numpy
 

00:09:49.370 --> 00:09:50.950
can read the documentation of a numpy
and look at broadcasting that

00:09:50.950 --> 00:09:50.960
and look at broadcasting that
 

00:09:50.960 --> 00:09:53.380
and look at broadcasting that
documentation that gives an even funny

00:09:53.380 --> 00:09:53.390
documentation that gives an even funny
 

00:09:53.390 --> 00:09:55.750
documentation that gives an even funny
more general definition of broadcasting

00:09:55.750 --> 00:09:55.760
more general definition of broadcasting
 

00:09:55.760 --> 00:09:58.180
more general definition of broadcasting
but the ones on this slide are the main

00:09:58.180 --> 00:09:58.190
but the ones on this slide are the main
 

00:09:58.190 --> 00:09:59.890
but the ones on this slide are the main
forms of broadcasting being ended up

00:09:59.890 --> 00:09:59.900
forms of broadcasting being ended up
 

00:09:59.900 --> 00:10:01.870
forms of broadcasting being ended up
needing to use when you implement in

00:10:01.870 --> 00:10:01.880
needing to use when you implement in
 

00:10:01.880 --> 00:10:05.170
needing to use when you implement in
your network before we wrap up just one

00:10:05.170 --> 00:10:05.180
your network before we wrap up just one
 

00:10:05.180 --> 00:10:07.210
your network before we wrap up just one
last comment which is for those of you

00:10:07.210 --> 00:10:07.220
last comment which is for those of you
 

00:10:07.220 --> 00:10:08.830
last comment which is for those of you
that are used to programming in either

00:10:08.830 --> 00:10:08.840
that are used to programming in either
 

00:10:08.840 --> 00:10:12.100
that are used to programming in either
MATLAB or octave if you've ever used the

00:10:12.100 --> 00:10:12.110
MATLAB or octave if you've ever used the
 

00:10:12.110 --> 00:10:15.400
MATLAB or octave if you've ever used the
malleable octave function bsx fun in

00:10:15.400 --> 00:10:15.410
malleable octave function bsx fun in
 

00:10:15.410 --> 00:10:18.820
malleable octave function bsx fun in
neonatal programing bsx fun does

00:10:18.820 --> 00:10:18.830
neonatal programing bsx fun does
 

00:10:18.830 --> 00:10:20.560
neonatal programing bsx fun does
something similar not quite the same but

00:10:20.560 --> 00:10:20.570
something similar not quite the same but
 

00:10:20.570 --> 00:10:22.930
something similar not quite the same but
is often use for a similar purpose as

00:10:22.930 --> 00:10:22.940
is often use for a similar purpose as
 

00:10:22.940 --> 00:10:24.810
is often use for a similar purpose as
what we use broadcasting in Python for

00:10:24.810 --> 00:10:24.820
what we use broadcasting in Python for
 

00:10:24.820 --> 00:10:27.460
what we use broadcasting in Python for
but this is really only for very

00:10:27.460 --> 00:10:27.470
but this is really only for very
 

00:10:27.470 --> 00:10:28.030
but this is really only for very
advanced

00:10:28.030 --> 00:10:28.040
advanced
 

00:10:28.040 --> 00:10:29.830
advanced
malim in octave users if you've not

00:10:29.830 --> 00:10:29.840
malim in octave users if you've not
 

00:10:29.840 --> 00:10:31.810
malim in octave users if you've not
heard of this don't worry about it you

00:10:31.810 --> 00:10:31.820
heard of this don't worry about it you
 

00:10:31.820 --> 00:10:33.310
heard of this don't worry about it you
don't need to know it when you're coding

00:10:33.310 --> 00:10:33.320
don't need to know it when you're coding
 

00:10:33.320 --> 00:10:36.670
don't need to know it when you're coding
up neural networks in Python so that was

00:10:36.670 --> 00:10:36.680
up neural networks in Python so that was
 

00:10:36.680 --> 00:10:39.280
up neural networks in Python so that was
broadcasting in Tison I hope that when

00:10:39.280 --> 00:10:39.290
broadcasting in Tison I hope that when
 

00:10:39.290 --> 00:10:40.930
broadcasting in Tison I hope that when
you do the program homework there

00:10:40.930 --> 00:10:40.940
you do the program homework there
 

00:10:40.940 --> 00:10:43.030
you do the program homework there
broadcasting will allow you to not only

00:10:43.030 --> 00:10:43.040
broadcasting will allow you to not only
 

00:10:43.040 --> 00:10:45.670
broadcasting will allow you to not only
make your code run faster but also help

00:10:45.670 --> 00:10:45.680
make your code run faster but also help
 

00:10:45.680 --> 00:10:48.040
make your code run faster but also help
you get what you want done with fewer

00:10:48.040 --> 00:10:48.050
you get what you want done with fewer
 

00:10:48.050 --> 00:10:49.600
you get what you want done with fewer
lines of code

00:10:49.600 --> 00:10:49.610
lines of code
 

00:10:49.610 --> 00:10:52.340
lines of code
before you dive into the pro-- exercise

00:10:52.340 --> 00:10:52.350
before you dive into the pro-- exercise
 

00:10:52.350 --> 00:10:53.840
before you dive into the pro-- exercise
I want to share with you just one more

00:10:53.840 --> 00:10:53.850
I want to share with you just one more
 

00:10:53.850 --> 00:10:55.580
I want to share with you just one more
set of ideas which is that there are

00:10:55.580 --> 00:10:55.590
set of ideas which is that there are
 

00:10:55.590 --> 00:10:57.800
set of ideas which is that there are
some tips and tricks that are found and

00:10:57.800 --> 00:10:57.810
some tips and tricks that are found and
 

00:10:57.810 --> 00:10:59.870
some tips and tricks that are found and
reduces the number of bugs in my Python

00:10:59.870 --> 00:10:59.880
reduces the number of bugs in my Python
 

00:10:59.880 --> 00:11:02.030
reduces the number of bugs in my Python
code and then I hope will help you too

00:11:02.030 --> 00:11:02.040
code and then I hope will help you too
 

00:11:02.040 --> 00:11:04.910
code and then I hope will help you too
so that let's talk about that in the

00:11:04.910 --> 00:11:04.920
so that let's talk about that in the
 

00:11:04.920 --> 00:11:07.250
so that let's talk about that in the
next video

