WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.600
[MUSIC PLAYING]

00:00:08.600 --> 00:00:11.110
Hi, my name is Reto Meier, and
I'm a tech lead for Google's

00:00:11.110 --> 00:00:13.330
Android Developer
Relations team.

00:00:13.330 --> 00:00:15.510
One of the most effective ways
you have at your disposal for

00:00:15.510 --> 00:00:17.960
optimizing the efficiency of
your data transfers is

00:00:17.960 --> 00:00:20.590
eliminating user-driven
updates.

00:00:20.590 --> 00:00:22.670
That means doing everything
you can to eliminate the

00:00:22.670 --> 00:00:24.200
Refresh button within
your app.

00:00:24.200 --> 00:00:26.650
The most common reason people
hit Refresh is because they

00:00:26.650 --> 00:00:28.670
don't believe your app is
displaying up-to-date

00:00:28.670 --> 00:00:29.540
information.

00:00:29.540 --> 00:00:32.119
If you're using some form of
client side polling, they're

00:00:32.119 --> 00:00:33.520
probably right.

00:00:33.520 --> 00:00:36.040
In fact, every time you create
a repeating alarm to pin your

00:00:36.040 --> 00:00:39.700
server to check for updates,
Sundar kills a Bug Droid.

00:00:39.700 --> 00:00:42.460
Stop the slaughter and use
Google Cloud Messaging to have

00:00:42.460 --> 00:00:45.390
your server notify your app when
there is data ready to be

00:00:45.390 --> 00:00:48.230
downloaded, or even include the
new data in the message

00:00:48.230 --> 00:00:49.790
payload itself.

00:00:49.790 --> 00:00:52.180
If you're using polling, you're
forced to balance data

00:00:52.180 --> 00:00:53.990
freshness with the resulting
battery drain.

00:00:53.990 --> 00:00:56.230
The more often you poll for
updates, the lower latency

00:00:56.230 --> 00:00:58.720
between the data changing on
the server and your app

00:00:58.720 --> 00:01:00.330
displaying those updates.

00:01:00.330 --> 00:01:02.310
But turning on the radio to
check for those updates, also

00:01:02.310 --> 00:01:03.680
drains the battery.

00:01:03.680 --> 00:01:05.760
That's the worst of both worlds,
when what you actually

00:01:05.760 --> 00:01:07.660
want is no latency
and as little

00:01:07.660 --> 00:01:09.320
battery drain as possible.

00:01:09.320 --> 00:01:11.650
Google Cloud Messaging helps you
do this by offering a way

00:01:11.650 --> 00:01:14.270
to send messages from your
server to any installed

00:01:14.270 --> 00:01:15.840
instance of your app.

00:01:15.840 --> 00:01:19.170
As a result, you can stop
polling, which will improve

00:01:19.170 --> 00:01:22.530
battery life and also improve
the freshness of your app.

00:01:22.530 --> 00:01:25.510
Once configured, you can
transmit messages to a

00:01:25.510 --> 00:01:28.920
specific app installation or
multicast messages to multiple

00:01:28.920 --> 00:01:30.200
recipients.

00:01:30.200 --> 00:01:32.540
These messages can be simple
tickles notifying your app

00:01:32.540 --> 00:01:34.930
that there's new data ready to
download, or it can include

00:01:34.930 --> 00:01:36.970
the new data within the
message payload.

00:01:36.970 --> 00:01:39.480
In this Dev.Byte, I focus on
how to use Google Cloud

00:01:39.480 --> 00:01:41.860
Messaging to perform more
efficient data transfers.

00:01:41.860 --> 00:01:45.540
The details for setting up your
GCM client and server are

00:01:45.540 --> 00:01:48.020
detailed comprehensively
in the documentation.

00:01:48.020 --> 00:01:51.250
That said, it helps to
understand the GCM data flow.

00:01:51.250 --> 00:01:53.790
It starts with your app on each
device registering itself

00:01:53.790 --> 00:01:55.970
by sending a registration
message to the GCM

00:01:55.970 --> 00:01:57.040
infrastructure.

00:01:57.040 --> 00:01:59.610
In return, it will be sent a
registration ID, which will

00:01:59.610 --> 00:02:02.080
uniquely identify that instance
of your app running

00:02:02.080 --> 00:02:03.890
on that particular device.

00:02:03.890 --> 00:02:06.230
You actually send this
identifier to your server,

00:02:06.230 --> 00:02:08.509
typically along with a separate
identifier that you

00:02:08.509 --> 00:02:10.560
can use to identify a
particular user or

00:02:10.560 --> 00:02:12.090
installation.

00:02:12.090 --> 00:02:14.370
Your sever now has a way to send
messages to a specific

00:02:14.370 --> 00:02:17.220
app or a specific user via the
Google Cloud Messaging

00:02:17.220 --> 00:02:18.350
infrastructure.

00:02:18.350 --> 00:02:20.852
Anything from breaking news,
updated sports scores, and

00:02:20.852 --> 00:02:24.580
your email messages, or an
updated list of news articles.

00:02:24.580 --> 00:02:26.420
This is enough to eliminate
the need for polling and

00:02:26.420 --> 00:02:28.860
ensures you never turn on the
radio to communicate with the

00:02:28.860 --> 00:02:30.870
server that has nothing
new to download.

00:02:30.870 --> 00:02:34.220
So your information architecture
now needs to

00:02:34.220 --> 00:02:37.160
determine the urgency of
reflecting each server change

00:02:37.160 --> 00:02:38.630
in your app.

00:02:38.630 --> 00:02:41.710
You can set up your server using
either HTTP or CCS using

00:02:41.710 --> 00:02:46.870
XMPP, and it captures payloads
as JSON or plaintext.

00:02:46.870 --> 00:02:49.480
Here we're using JSON to create
a message starting with

00:02:49.480 --> 00:02:51.170
the registration IDs
to which we want to

00:02:51.170 --> 00:02:52.690
transmit our message.

00:02:52.690 --> 00:02:55.430
By default, your app will
receive GCM messages, even if

00:02:55.430 --> 00:02:57.780
it's not running and the
phone is on standby.

00:02:57.780 --> 00:02:59.910
You can help minimize battery
drain by setting

00:02:59.910 --> 00:03:02.370
delay_while_idle to true,
indicating that your message

00:03:02.370 --> 00:03:04.730
doesn't need to be sent
immediately, if the device is

00:03:04.730 --> 00:03:05.820
on standby.

00:03:05.820 --> 00:03:07.890
Instead, these messages will
be queued until the device

00:03:07.890 --> 00:03:08.690
becomes active.

00:03:08.690 --> 00:03:11.990
In fact, if you also set a
collapse key, only one message

00:03:11.990 --> 00:03:14.540
will be sent when the device
does become active.

00:03:14.540 --> 00:03:16.920
The collapse key is any
arbitrary string that the GCM

00:03:16.920 --> 00:03:19.400
service can use to collapse a
queue of messages addressed to

00:03:19.400 --> 00:03:20.750
the same device.

00:03:20.750 --> 00:03:22.740
So when the device comes online
or becomes active, it

00:03:22.740 --> 00:03:24.750
receives only one message.

00:03:24.750 --> 00:03:26.960
There's no guarantee that the
message the queue collapses to

00:03:26.960 --> 00:03:29.340
will be the most recent one you
sent, so these messages

00:03:29.340 --> 00:03:32.310
are known as send-to-sync and
are best suited to update

00:03:32.310 --> 00:03:34.640
tickles that tell your app
simply that there is new data

00:03:34.640 --> 00:03:36.420
ready to download.

00:03:36.420 --> 00:03:38.870
You can go a step further and
set a time loop before queued

00:03:38.870 --> 00:03:42.080
messages expire using the
time-to-live parameter.

00:03:42.080 --> 00:03:44.440
This determines how many seconds
the GCM service should

00:03:44.440 --> 00:03:46.370
keep your message before
canceling it.

00:03:46.370 --> 00:03:48.480
By default, this is set to
four weeks, but you can

00:03:48.480 --> 00:03:51.100
dramatically reduce this for
messages you know will be out

00:03:51.100 --> 00:03:54.290
of date or replaced over a
shorter time period, which is

00:03:54.290 --> 00:03:56.590
a particularly useful feature
for messages with payload

00:03:56.590 --> 00:03:59.930
data, included in the form of an
optional JSON object, whose

00:03:59.930 --> 00:04:02.710
fields represent key value
pairs of data.

00:04:02.710 --> 00:04:06.660
Each message can store up to
4K of data, which will be

00:04:06.660 --> 00:04:09.090
delivered as strings within the
intent bundle of received

00:04:09.090 --> 00:04:12.210
GCM messages as you
can see here.

00:04:12.210 --> 00:04:15.780
These non-collapsible or
message-with-payload messages

00:04:15.780 --> 00:04:17.180
are more than a synced tickle.

00:04:17.180 --> 00:04:20.000
They're used when you need to
deliver every message, because

00:04:20.000 --> 00:04:22.290
every message has different
content.

00:04:22.290 --> 00:04:25.010
Notifications are a great
example of how you may use

00:04:25.010 --> 00:04:26.410
these payload messages.

00:04:26.410 --> 00:04:28.620
By including the current weather
details, commentary

00:04:28.620 --> 00:04:31.210
and score after a touchdown
pass, or breaking news

00:04:31.210 --> 00:04:34.390
headlines and summaries within
the payload of the GCM message

00:04:34.390 --> 00:04:37.580
itself, you're able to update
your users immediately with

00:04:37.580 --> 00:04:39.750
nominal incremental
battery impact.

00:04:39.750 --> 00:04:42.490
It is possible to use these
collapsed keys with payload

00:04:42.490 --> 00:04:44.360
messages, but because the
delivery of order isn't

00:04:44.360 --> 00:04:46.620
guaranteed and the collapsed
message isn't guaranteed to be

00:04:46.620 --> 00:04:49.160
the last one received, you
need to be careful not to

00:04:49.160 --> 00:04:51.250
display outdated information.

00:04:51.250 --> 00:04:54.260
If non-collapsible messages with
payloads aren't going to

00:04:54.260 --> 00:04:56.840
provide a specific improvement
to the user experience,

00:04:56.840 --> 00:04:59.470
send-to-sync messages are a
better option, as they put

00:04:59.470 --> 00:05:01.650
less of a burden on the
device battery.

00:05:01.650 --> 00:05:04.140
For example, if your server
notifies your app every time

00:05:04.140 --> 00:05:06.340
there is a new article or
message, it only needs to

00:05:06.340 --> 00:05:09.170
receive one message telling it
that it's time to sync up,

00:05:09.170 --> 00:05:12.380
which you can do using a sync
adaptor to initiate the sync,

00:05:12.380 --> 00:05:14.930
preferably bundling a number of
batch transfers together,

00:05:14.930 --> 00:05:17.360
as described in my Dev.Byte on
batching, bundling, and using

00:05:17.360 --> 00:05:18.840
the sync adaptor.

00:05:18.840 --> 00:05:20.820
Using Google Cloud Messaging
allows you to totally

00:05:20.820 --> 00:05:24.160
eliminate client-side polling
from your applications.

00:05:24.160 --> 00:05:26.540
Implemented correctly, you can
configure the messages

00:05:26.540 --> 00:05:28.590
transmitted to have as little
impact on the battery as

00:05:28.590 --> 00:05:31.690
possible, using techniques
like short-time-to-live

00:05:31.690 --> 00:05:35.080
parameters, collapse keys, and
the delay-while-idle parameter

00:05:35.080 --> 00:05:37.060
to limit the number of messages
which are actually

00:05:37.060 --> 00:05:38.860
transmitted to your app.

00:05:38.860 --> 00:05:40.920
By keeping your apps constantly
up to date, you can

00:05:40.920 --> 00:05:43.720
minimize latency and help
eliminate the Refresh button.

00:05:43.720 --> 00:05:45.630
Used with sync adaptors and
pre-fetching, you can

00:05:45.630 --> 00:05:47.190
dramatically improve
the battery

00:05:47.190 --> 00:05:48.570
efficiency of your apps.

