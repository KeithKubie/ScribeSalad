WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:02.835
WOJTEK KALICINSKI: We know
developers don't like standing

00:00:02.835 --> 00:00:05.600
still and want access to the
latest and greatest features

00:00:05.600 --> 00:00:09.590
in the tools they use, and that
includes programming languages.

00:00:09.590 --> 00:00:11.840
With Android Studio
3.0, we're not only

00:00:11.840 --> 00:00:15.110
shipping Kotlin as an official
new language for Android,

00:00:15.110 --> 00:00:16.790
but we're also
making life easier

00:00:16.790 --> 00:00:20.240
for those of you who prefer
to code in Java by introducing

00:00:20.240 --> 00:00:22.580
support for Java 8 language
features in the default

00:00:22.580 --> 00:00:23.800
toolchain.

00:00:23.800 --> 00:00:26.630
Starting with the Android
Gradle plugin version 3,

00:00:26.630 --> 00:00:29.630
you can freely use
lambdas, method references,

00:00:29.630 --> 00:00:33.350
default and static interface
methods, try-with resources,

00:00:33.350 --> 00:00:37.580
and repeating annotations
on all Android API levels.

00:00:37.580 --> 00:00:40.160
If you previously switched to
using the experimental Jack

00:00:40.160 --> 00:00:43.290
compiler to be able
to use these features,

00:00:43.290 --> 00:00:44.780
please note that
there are now many

00:00:44.780 --> 00:00:47.450
benefits when using
the default toolchain.

00:00:47.450 --> 00:00:49.130
Jack offered more
restricted Java

00:00:49.130 --> 00:00:53.300
8 support that worked
only for API 24 and above.

00:00:53.300 --> 00:00:55.580
It wasn't as fast
when compiling code.

00:00:55.580 --> 00:00:58.610
And it created problems for
developers using tools that

00:00:58.610 --> 00:01:00.890
depend on the class format.

00:01:00.890 --> 00:01:04.040
That's why we deprecated Jack
and will no longer support it

00:01:04.040 --> 00:01:06.320
in Android Studio and tools.

00:01:06.320 --> 00:01:09.680
The good news is that
switching back is very simple.

00:01:09.680 --> 00:01:12.560
Just delete these lines
from your build file.

00:01:12.560 --> 00:01:15.200
If you're using one of the
popular third-party solutions

00:01:15.200 --> 00:01:17.360
for Java 8 language
features, you

00:01:17.360 --> 00:01:19.940
might find that they lack
some of the functionality

00:01:19.940 --> 00:01:22.040
of the default
toolchain, such as being

00:01:22.040 --> 00:01:25.760
able to seamlessly process
libraries that use Java 8 code.

00:01:25.760 --> 00:01:27.470
If you want to make
the switch, you'll

00:01:27.470 --> 00:01:30.710
have to remove Retrolambda
or DexGuard from your build.

00:01:30.710 --> 00:01:33.740
Otherwise, the built-in
support will remain disabled.

00:01:33.740 --> 00:01:36.360
Other than that, make sure
you have the following lines

00:01:36.360 --> 00:01:39.590
in build Gradle and that you are
using at least Android Gradle

00:01:39.590 --> 00:01:41.400
plugin version 3.

00:01:41.400 --> 00:01:44.120
For important plugin
migration instructions,

00:01:44.120 --> 00:01:46.760
refer to our other video
or the documentation

00:01:46.760 --> 00:01:49.110
linked in the description.

00:01:49.110 --> 00:01:51.200
So now that you have
everything set up,

00:01:51.200 --> 00:01:53.960
what can you actually do
with the new features?

00:01:53.960 --> 00:01:56.540
Lambdas are a really
nice shorthand notation

00:01:56.540 --> 00:02:00.380
for implementing functional
interfaces, or in other words,

00:02:00.380 --> 00:02:03.740
interfaces that have
only one abstract method.

00:02:03.740 --> 00:02:06.260
Many times when you pass
a Runnable or a listener

00:02:06.260 --> 00:02:09.500
to another method, you need
all this boilerplate just

00:02:09.500 --> 00:02:13.330
to run a few lines of code, when
all you could write is this.

00:02:13.330 --> 00:02:15.200
Android Studio lets
you easily convert

00:02:15.200 --> 00:02:17.480
between lambdas and
anonymous classes

00:02:17.480 --> 00:02:19.700
so you can learn
the syntax quickly.

00:02:19.700 --> 00:02:21.920
With method references
you can sometimes

00:02:21.920 --> 00:02:24.410
even avoid creating
a lambda by directly

00:02:24.410 --> 00:02:27.740
passing a method with a correct
signature as a parameter.

00:02:27.740 --> 00:02:30.800
Use the double colon
syntax like this.

00:02:30.800 --> 00:02:33.860
If you want to put utility
methods in your interfaces,

00:02:33.860 --> 00:02:36.290
you can now do it
with a static keyword.

00:02:36.290 --> 00:02:39.740
Moreover, you can have methods
with default implementations

00:02:39.740 --> 00:02:42.770
that will not require you to
change any subclasses when you

00:02:42.770 --> 00:02:44.770
add them to the base interface.

00:02:44.770 --> 00:02:46.460
Try-with resources
is a great way

00:02:46.460 --> 00:02:49.730
to deal with closable
resources, such as files.

00:02:49.730 --> 00:02:52.040
Previously you had to be
extra careful to catch

00:02:52.040 --> 00:02:55.700
exceptions and close any open
streams in a finally block.

00:02:55.700 --> 00:02:58.130
Now when you declare a resource
in that try block opening

00:02:58.130 --> 00:03:00.710
statement, it will be
automatically cleaned up

00:03:00.710 --> 00:03:02.787
for you after that block exits.

00:03:02.787 --> 00:03:04.370
The new language
features are provided

00:03:04.370 --> 00:03:06.860
by transforming bytecode
into a representation

00:03:06.860 --> 00:03:09.740
compatible with other
platforms, a step which

00:03:09.740 --> 00:03:11.540
we called desugaring.

00:03:11.540 --> 00:03:14.870
This is not a backport of
Java 8 packages, and as such,

00:03:14.870 --> 00:03:18.530
many SDK restrictions still
apply for using newer APIs,

00:03:18.530 --> 00:03:21.080
like java.lang.string,
in your code.

00:03:21.080 --> 00:03:23.660
One last thing-- as part of
our continuing investment

00:03:23.660 --> 00:03:26.420
into the toolchain
with Android Studio 3,

00:03:26.420 --> 00:03:28.160
we're introducing
a new dexer called

00:03:28.160 --> 00:03:31.450
D8 that is available
for you to preview.

00:03:31.450 --> 00:03:33.200
Add this line in your
Gradle properties

00:03:33.200 --> 00:03:35.600
file, and the build
process will use D8

00:03:35.600 --> 00:03:38.750
for converting class
files to dex bytecode.

00:03:38.750 --> 00:03:41.060
In our tests, D8
compiles faster,

00:03:41.060 --> 00:03:43.430
and produces smaller
files, and can even

00:03:43.430 --> 00:03:45.980
improve runtime performance.

00:03:45.980 --> 00:03:47.690
As an app developer,
you shouldn't

00:03:47.690 --> 00:03:51.590
have to make any changes to your
usual workflow when using D8.

00:03:51.590 --> 00:03:54.080
However, tool developers
need to be aware

00:03:54.080 --> 00:03:57.470
that D8 moves that desugar
step after any custom bytecode

00:03:57.470 --> 00:03:58.800
transforms.

00:03:58.800 --> 00:04:00.680
As such, your
transformation tools

00:04:00.680 --> 00:04:04.040
might begin to see Java
8 bytecodes when using D8

00:04:04.040 --> 00:04:06.170
and have to be made compatible.

00:04:06.170 --> 00:04:08.450
So have fun writing
more expressive code.

00:04:08.450 --> 00:04:10.212
And please let us know
on the bug tracker

00:04:10.212 --> 00:04:12.420
if you run into any issues
when trying the new dexer.

00:04:12.420 --> 00:04:16.820
And check out your videos about
Android Studio 3.0 features.

00:04:16.820 --> 00:04:20.170
[MUSIC PLAYING]

