WEBVTT
Kind: captions
Language: en

00:00:00.131 --> 00:00:01.380
WAYNE PIEKARSKI: Hi, everyone.

00:00:01.380 --> 00:00:02.880
How are y'all doing?

00:00:02.880 --> 00:00:05.596
We're having a good I/O.
So thanks for coming here.

00:00:05.596 --> 00:00:07.220
So let's get started
with this session.

00:00:07.220 --> 00:00:11.430
So our session, today, is all
about bringing Android apps

00:00:11.430 --> 00:00:13.200
over to Android TV.

00:00:13.200 --> 00:00:14.820
So my name's Wayne Piekarski.

00:00:14.820 --> 00:00:16.710
And I'm a Developer
Advocate at Google.

00:00:16.710 --> 00:00:19.380
And I work in areas like
TV and Cast in the living

00:00:19.380 --> 00:00:20.650
room and wearables.

00:00:20.650 --> 00:00:24.100
And my goal is to
communicate information

00:00:24.100 --> 00:00:25.590
about these products
to developers,

00:00:25.590 --> 00:00:27.726
but also to talk to
you more, and find out

00:00:27.726 --> 00:00:29.600
about what your needs
are, and feed them back

00:00:29.600 --> 00:00:30.832
to the product teams.

00:00:30.832 --> 00:00:31.790
RYAN SEYS: So I'm Ryan.

00:00:31.790 --> 00:00:34.200
I'm a Developer Programs
Engineer at Google.

00:00:34.200 --> 00:00:35.940
And I build things
for you guys, you

00:00:35.940 --> 00:00:39.470
developers-- things like
tools, API client libraries,

00:00:39.470 --> 00:00:42.086
and samples, just to make
your lives more productive.

00:00:43.702 --> 00:00:45.160
WAYNE PIEKARSKI:
Today, we're going

00:00:45.160 --> 00:00:46.940
to assume that you have
some knowledge about Android

00:00:46.940 --> 00:00:49.273
development because the goal
is we're going to teach you

00:00:49.273 --> 00:00:52.780
how to take your apps and how to
get them working on Android TV.

00:00:52.780 --> 00:00:54.860
So what's the motivation
for this talk?

00:00:54.860 --> 00:00:57.860
Well, I've been talking to
lots of developers out there.

00:00:57.860 --> 00:01:00.260
And I say, hey, have you
done an app for TV before.

00:01:00.260 --> 00:01:01.160
And they're like,
oh, you know, I

00:01:01.160 --> 00:01:02.784
don't think this is
something I can do.

00:01:02.784 --> 00:01:04.379
It's too much work, or whatever.

00:01:04.379 --> 00:01:06.110
And it turns out
that most developers

00:01:06.110 --> 00:01:08.800
aren't fully aware of
how similar Android

00:01:08.800 --> 00:01:11.080
TV is to Android itself.

00:01:11.080 --> 00:01:14.480
So I thought, wouldn't be great
if we did a talk about this

00:01:14.480 --> 00:01:16.140
and to show you the
small steps that

00:01:16.140 --> 00:01:19.160
are needed to get your
app on to the big screen?

00:01:19.160 --> 00:01:23.450
So if developers aren't doing
this, why is this a problem?

00:01:23.450 --> 00:01:26.920
Well, right now, there are
millions of Android TV devices

00:01:26.920 --> 00:01:28.640
that are activated
out there right now.

00:01:28.640 --> 00:01:30.360
And the number keeps
going up every day.

00:01:30.360 --> 00:01:33.350
You can buy TVs with
Android TV included.

00:01:33.350 --> 00:01:35.510
You can buy little
set-top boxes that

00:01:35.510 --> 00:01:36.894
include Android TV, as well.

00:01:36.894 --> 00:01:38.560
And they're really
cheap and affordable.

00:01:38.560 --> 00:01:40.840
And a lot of people have these
devices in their living rooms,

00:01:40.840 --> 00:01:41.344
now.

00:01:41.344 --> 00:01:43.010
And these customers
are looking for apps

00:01:43.010 --> 00:01:44.660
to use on their devices.

00:01:44.660 --> 00:01:47.140
So the important thing
here is that, if you

00:01:47.140 --> 00:01:50.800
go to an Android TV device
and start up Google Play,

00:01:50.800 --> 00:01:54.060
not every app in the Play Store
will appear on your device

00:01:54.060 --> 00:01:54.810
immediately.

00:01:54.810 --> 00:01:56.790
It turns out, as a
developer, you actually

00:01:56.790 --> 00:01:59.980
need to take a few small
steps and tell Google Play

00:01:59.980 --> 00:02:01.820
that your app is ready for TV.

00:02:01.820 --> 00:02:03.892
And then, it will make
your app available.

00:02:03.892 --> 00:02:05.850
So that's what we're
going to talk about today.

00:02:05.850 --> 00:02:07.490
We're going to show
you how to do this.

00:02:07.490 --> 00:02:09.789
And the good news
is that Android TV

00:02:09.789 --> 00:02:11.750
is really easy to develop for.

00:02:11.750 --> 00:02:15.200
And so to quote my very
famous colleague Ryan, here,

00:02:15.200 --> 00:02:16.670
"it's just Android."

00:02:16.670 --> 00:02:21.060
And so it uses the same SDKs,
the same tools that you're

00:02:21.060 --> 00:02:24.300
familiar with, same Android
Studio, and the same emulator

00:02:24.300 --> 00:02:24.900
tools.

00:02:24.900 --> 00:02:26.850
So you can get
started really easy,

00:02:26.850 --> 00:02:29.150
if you're familiar with
Android, right now.

00:02:29.150 --> 00:02:32.510
And so the basics are you got to
tweak your manifest file, check

00:02:32.510 --> 00:02:34.880
a box in Google Play, and
then your app's ready.

00:02:34.880 --> 00:02:36.779
So that's the really
cool thing about it.

00:02:36.779 --> 00:02:38.820
And that's what we're
going to talk about, today.

00:02:38.820 --> 00:02:41.620
So the other thing is
that you can actually

00:02:41.620 --> 00:02:44.890
make a single APK that you
upload to Google Play that

00:02:44.890 --> 00:02:46.970
supports both TV and phone.

00:02:46.970 --> 00:02:49.100
That's how similar
these things are.

00:02:49.100 --> 00:02:52.800
So the first thing with this
talk that I wanted to point out

00:02:52.800 --> 00:02:54.640
is that a lot of
people think, well,

00:02:54.640 --> 00:02:58.750
Android TV is only useful for
watching TV shows and movies.

00:02:58.750 --> 00:03:00.220
But I really think
there's so much

00:03:00.220 --> 00:03:02.600
more possibilities
for what you can do

00:03:02.600 --> 00:03:04.020
rather than just those things.

00:03:04.020 --> 00:03:07.110
So imagine you could
browse photos and artwork,

00:03:07.110 --> 00:03:09.410
you could look at
restaurant menus, or houses

00:03:09.410 --> 00:03:12.940
that you're looking to buy, or
exploring maps, or 3D models,

00:03:12.940 --> 00:03:14.260
or playing computer games.

00:03:14.260 --> 00:03:16.750
So there's a whole bunch of
possibilities that really

00:03:16.750 --> 00:03:18.790
make the possibilities endless.

00:03:18.790 --> 00:03:21.530
And so Android TV
really breaks down

00:03:21.530 --> 00:03:23.460
the possibilities
of what we thought

00:03:23.460 --> 00:03:26.560
TV could be used for into
so much more other things.

00:03:26.560 --> 00:03:29.680
And the other thing is that
Android TV is the largest

00:03:29.680 --> 00:03:30.810
screen in your house.

00:03:30.810 --> 00:03:32.850
Every house has
this massive screen

00:03:32.850 --> 00:03:35.590
that's in the living room,
in the center of the house.

00:03:35.590 --> 00:03:38.554
And so it has huge possibilities
for what you can do with it.

00:03:38.554 --> 00:03:40.720
And so that's what we're
trying to encourage today--

00:03:40.720 --> 00:03:44.210
is for developers to think
of new platforms and new ways

00:03:44.210 --> 00:03:46.420
of taking their apps
and getting them out

00:03:46.420 --> 00:03:47.680
to consumers out there.

00:03:47.680 --> 00:03:51.150
So today, we're going to help
you redefine what a living room

00:03:51.150 --> 00:03:54.374
experience could be and
really create amazing apps.

00:03:57.100 --> 00:03:58.700
So I'll hand it
off to Ryan, now,

00:03:58.700 --> 00:04:01.116
and he's going to go through
some more of the steps of how

00:04:01.116 --> 00:04:01.830
to do this.

00:04:01.830 --> 00:04:02.930
RYAN SEYS: Thanks.

00:04:02.930 --> 00:04:07.180
So the first step in bringing
your app to Android TV

00:04:07.180 --> 00:04:09.929
is you're going to need
to add a TV banner.

00:04:09.929 --> 00:04:12.470
This banner is going to provide
the launch point for your app

00:04:12.470 --> 00:04:14.590
on the Android TV launch screen.

00:04:14.590 --> 00:04:17.029
So here's an example
banner that I've

00:04:17.029 --> 00:04:19.220
taken directly from
our sample app, which

00:04:19.220 --> 00:04:22.170
is available on GitHub.

00:04:22.170 --> 00:04:26.220
Here is our sample banner
alongside some official Android

00:04:26.220 --> 00:04:27.280
TV apps.

00:04:27.280 --> 00:04:30.150
This is what it would appear
like on the Android TV launcher

00:04:30.150 --> 00:04:32.104
itself.

00:04:32.104 --> 00:04:33.520
So there are a
couple requirements

00:04:33.520 --> 00:04:35.760
that we would like
you to follow when

00:04:35.760 --> 00:04:37.670
you're creating your TV banner.

00:04:37.670 --> 00:04:41.860
The first is that the banner
should be 320 by 180 pixels.

00:04:41.860 --> 00:04:44.702
That's because Android TV--
this is the size that it's

00:04:44.702 --> 00:04:45.660
going to display it at.

00:04:45.660 --> 00:04:47.717
And if you make your
banner any other size,

00:04:47.717 --> 00:04:49.800
it's just going to stretch
it and skew it in a way

00:04:49.800 --> 00:04:52.100
that you wouldn't really like.

00:04:52.100 --> 00:04:56.180
The second is that your app
name should appear readable

00:04:56.180 --> 00:04:57.620
in the banner itself.

00:04:57.620 --> 00:05:00.440
And the reason for
this is, on Android TV,

00:05:00.440 --> 00:05:02.690
the name of your
app doesn't actually

00:05:02.690 --> 00:05:04.570
appear below the banner.

00:05:04.570 --> 00:05:06.820
And so we ask that you
put it inside the banner

00:05:06.820 --> 00:05:09.680
itself so that your
users can understand

00:05:09.680 --> 00:05:12.530
what app they're clicking
on when they open yours.

00:05:12.530 --> 00:05:14.490
So it's super simple to add.

00:05:14.490 --> 00:05:16.360
It takes a single
line in your manifest.

00:05:16.360 --> 00:05:17.840
I'm sure you're
familiar with this.

00:05:17.840 --> 00:05:21.460
In your application tag, just
add android:banner attribute

00:05:21.460 --> 00:05:24.060
and point it at your
drawable resource.

00:05:24.060 --> 00:05:26.552
Super easy, right?

00:05:26.552 --> 00:05:28.760
So if you did all this and
you tried to run your app,

00:05:28.760 --> 00:05:30.730
nothing would actually happen.

00:05:30.730 --> 00:05:33.270
Just setting this banner
doesn't get your app

00:05:33.270 --> 00:05:35.000
running on Android TV.

00:05:35.000 --> 00:05:36.650
And so, next, I'm
just going to talk

00:05:36.650 --> 00:05:40.022
about how you would declare
the activity to launch

00:05:40.022 --> 00:05:41.230
when you click on the banner.

00:05:41.230 --> 00:05:43.570
So let's jump into it.

00:05:43.570 --> 00:05:45.150
So here's an activity.

00:05:45.150 --> 00:05:48.370
This may be your main activity
in your Android manifest.

00:05:48.370 --> 00:05:50.090
And you have an
existing intent-filter

00:05:50.090 --> 00:05:54.130
there with the action, MAIN,
and the category, LAUNCHER.

00:05:54.130 --> 00:05:57.240
So here we're just going to
add a second intent-filter

00:05:57.240 --> 00:05:59.730
to your existing activity
with the category,

00:05:59.730 --> 00:06:01.580
LEANBACK_LAUNCHER.

00:06:01.580 --> 00:06:03.510
The reason that we
actually separate

00:06:03.510 --> 00:06:07.170
LAUNCHER and LEANBACK_LAUNCHER
is because our best practices

00:06:07.170 --> 00:06:10.360
is that you're going to
create your own TV specific UI

00:06:10.360 --> 00:06:11.800
and layouts, eventually.

00:06:11.800 --> 00:06:16.260
However, for the purpose of this
talk, we're just going to say,

00:06:16.260 --> 00:06:19.220
why not get started, throw
it in your existing activity,

00:06:19.220 --> 00:06:20.710
and see how much it works.

00:06:20.710 --> 00:06:22.616
Like I said earlier,
it's just Android,

00:06:22.616 --> 00:06:24.240
so you'd be surprised
by how much works

00:06:24.240 --> 00:06:26.720
right out of the box.

00:06:26.720 --> 00:06:28.730
The next big difference
on Android TV

00:06:28.730 --> 00:06:31.070
is the TV hardware itself.

00:06:31.070 --> 00:06:33.970
So mobile devices-- they
can make phone calls.

00:06:33.970 --> 00:06:35.000
They can take photos.

00:06:35.000 --> 00:06:35.970
They use NFC.

00:06:35.970 --> 00:06:37.400
They have touch screens.

00:06:37.400 --> 00:06:39.640
TVs don't have any of
these things-- at least

00:06:39.640 --> 00:06:42.070
my TV doesn't have
a touch screen.

00:06:42.070 --> 00:06:43.930
And so for these
reasons, we actually

00:06:43.930 --> 00:06:46.610
need to tell Android that
these features that we

00:06:46.610 --> 00:06:50.650
may have come to
expect on a phone

00:06:50.650 --> 00:06:53.930
will not be available on a TV.

00:06:53.930 --> 00:06:57.660
So the way that we do this is
through our uses-feature tag.

00:06:57.660 --> 00:07:00.150
And you guys, I'm sure,
are all familiar with this.

00:07:00.150 --> 00:07:03.150
You declare the hardware
features that you would like

00:07:03.150 --> 00:07:05.240
to use in your app manifest.

00:07:05.240 --> 00:07:08.645
And this is probably fine.

00:07:08.645 --> 00:07:10.770
For phones and tablets,
it's going to automatically

00:07:10.770 --> 00:07:12.800
set required to true.

00:07:12.800 --> 00:07:16.740
However, for Android TV and
for TV hardware specifically,

00:07:16.740 --> 00:07:19.090
this hardware might not
be available on TVs.

00:07:19.090 --> 00:07:25.850
And so we need to update
that to required="false"

00:07:25.850 --> 00:07:29.830
so that the TV itself
knows that, hey,

00:07:29.830 --> 00:07:33.490
I can still operate without
this hardware requirement.

00:07:33.490 --> 00:07:36.850
So one gotcha, actually, is
that the touchscreen hardware

00:07:36.850 --> 00:07:39.630
requirement is, by
default, required="true"

00:07:39.630 --> 00:07:41.810
even if you don't
declare that you need it.

00:07:41.810 --> 00:07:46.370
And so we actually need to take
this snippet that you see here

00:07:46.370 --> 00:07:50.290
and add it directly right
into your Android manifest.

00:07:53.920 --> 00:07:58.340
So another gotcha is that
some permissions, actually--

00:07:58.340 --> 00:08:02.430
if you asked for, say, a
RECORD_AUDIO permission.

00:08:02.430 --> 00:08:05.240
It's actually going to imply
this hardware requirement

00:08:05.240 --> 00:08:08.230
for a microphone.

00:08:08.230 --> 00:08:09.840
And this makes sense, right?

00:08:09.840 --> 00:08:12.200
You want to be able to
record some audio so you're

00:08:12.200 --> 00:08:14.690
going to need a microphone.

00:08:14.690 --> 00:08:18.880
But you might not
actually declare

00:08:18.880 --> 00:08:20.470
the uses-feature itself.

00:08:20.470 --> 00:08:24.520
And so what we have to
do to get around this

00:08:24.520 --> 00:08:27.110
is just go into your
Android manifest,

00:08:27.110 --> 00:08:30.280
declare uses-feature tag,
and set required to false.

00:08:33.090 --> 00:08:35.419
So this is the
most important part

00:08:35.419 --> 00:08:37.870
about bringing your
app to Android TV.

00:08:37.870 --> 00:08:40.360
This is the UI
navigation and controls.

00:08:40.360 --> 00:08:43.179
So with no touch screen
available on TVs,

00:08:43.179 --> 00:08:45.750
we have to rely on
these minimal controls.

00:08:45.750 --> 00:08:48.820
And this is what
brings us to the d-pad.

00:08:48.820 --> 00:08:51.830
So the d-pad, which also
stands for directional pad,

00:08:51.830 --> 00:08:54.860
is the de facto way to
navigate on Android TV.

00:08:54.860 --> 00:08:57.425
Now, this d-pad is not
an entirely new idea.

00:08:57.425 --> 00:08:58.800
Some of the first
phones actually

00:08:58.800 --> 00:09:00.440
used d-pad for navigation.

00:09:00.440 --> 00:09:03.040
And when we say navigation,
what we're really talking about,

00:09:03.040 --> 00:09:06.450
here, is this intuitive
change of focus.

00:09:06.450 --> 00:09:08.990
Touch screens have
revolutionized our ability

00:09:08.990 --> 00:09:12.270
to tell our
interfaces, when I tap,

00:09:12.270 --> 00:09:14.950
here, I want you to
focus and take action

00:09:14.950 --> 00:09:16.440
at that specific point.

00:09:16.440 --> 00:09:18.980
However, on TVs we don't
have this same luxury

00:09:18.980 --> 00:09:21.180
because there's no
touch screen available.

00:09:21.180 --> 00:09:23.150
So in order to focus,
what we need to do

00:09:23.150 --> 00:09:26.230
is progressively shift our
focus from element to element

00:09:26.230 --> 00:09:29.214
through our UI until we get
to the one that we want.

00:09:29.214 --> 00:09:31.380
And on Android, there are
a number of different ways

00:09:31.380 --> 00:09:33.390
that focus is handled
and manipulated.

00:09:33.390 --> 00:09:37.790
And so I'm going to discuss
each one of these briefly.

00:09:37.790 --> 00:09:41.800
So the first thing that you need
to know about focus on Android

00:09:41.800 --> 00:09:44.549
is this attribute
called focusable.

00:09:44.549 --> 00:09:46.340
And I'm sure you're
all familiar with this.

00:09:46.340 --> 00:09:48.960
In simple terms,
though, on Android TV,

00:09:48.960 --> 00:09:51.010
your users are going
to be using a remote.

00:09:51.010 --> 00:09:56.210
So with any element that you
want them to interact with,

00:09:56.210 --> 00:09:59.190
the element itself
should be focusable.

00:09:59.190 --> 00:10:02.340
And to do that, all we do is
we set this focusable attribute

00:10:02.340 --> 00:10:03.860
to be true.

00:10:03.860 --> 00:10:06.380
So as an example
use case here, where

00:10:06.380 --> 00:10:10.630
you may be creating some
custom playback layout,

00:10:10.630 --> 00:10:13.200
and it has a
play/pause button here,

00:10:13.200 --> 00:10:15.552
which we've represented
with an ImageView.

00:10:15.552 --> 00:10:17.510
And you're going to want
to be able to navigate

00:10:17.510 --> 00:10:19.676
to that play/pause button
so that you can eventually

00:10:19.676 --> 00:10:21.080
click it.

00:10:21.080 --> 00:10:24.199
So all we do is we just
set focusable to true.

00:10:24.199 --> 00:10:25.740
Now, one thing to
keep in mind here--

00:10:25.740 --> 00:10:27.660
a little bit of a
gotcha-- is that some

00:10:27.660 --> 00:10:31.880
views-- they don't set
focusable to be true by default.

00:10:31.880 --> 00:10:33.520
ImageView is one of these.

00:10:33.520 --> 00:10:37.610
So in this case, we have to
set it explicitly to true.

00:10:37.610 --> 00:10:38.110
Great.

00:10:38.110 --> 00:10:40.930
So now, we can focus and
select our play button.

00:10:40.930 --> 00:10:45.590
But what if we want to, say,
press right on the d-pad

00:10:45.590 --> 00:10:48.790
and have it focus on
the fast forward button

00:10:48.790 --> 00:10:52.990
or press left and have it
focus on the rewind button?

00:10:52.990 --> 00:10:54.800
So we use these two
other attributes,

00:10:54.800 --> 00:10:57.270
nextFocusRight
and nextFocusLeft.

00:10:57.270 --> 00:11:00.090
So by setting these two
attributes as shown here, now,

00:11:00.090 --> 00:11:02.660
Android is going to switch
the focus automatically

00:11:02.660 --> 00:11:05.870
when you press those
buttons on the d-pad.

00:11:05.870 --> 00:11:07.360
So there may be
other times where

00:11:07.360 --> 00:11:10.810
you want to create your
views directly in Java code.

00:11:10.810 --> 00:11:13.430
And so specifying
this focus in the XML

00:11:13.430 --> 00:11:15.580
is not going to be
available to you.

00:11:15.580 --> 00:11:17.840
For example, you may be
generating a lot of views,

00:11:17.840 --> 00:11:20.390
like a grid shown here.

00:11:20.390 --> 00:11:22.100
And you're not
going to necessarily

00:11:22.100 --> 00:11:25.850
be able to declare exactly
what I should be focusing on

00:11:25.850 --> 00:11:27.740
at that specific point.

00:11:27.740 --> 00:11:32.730
So we need some way to ask
Android to change this focus.

00:11:32.730 --> 00:11:36.300
And we do that through this
requestFocus method, which

00:11:36.300 --> 00:11:39.210
is available on the View class.

00:11:39.210 --> 00:11:42.210
So requestFocus just
does exactly that.

00:11:42.210 --> 00:11:46.530
It requests-- it asks Android
to bring that view into focus,

00:11:46.530 --> 00:11:48.190
if it is focusable.

00:11:48.190 --> 00:11:52.152
And that's a key point,
if it's focusable.

00:11:52.152 --> 00:11:54.900
Make sure that that
View is focusable

00:11:54.900 --> 00:11:57.750
set to true before you
requestFocus or else

00:11:57.750 --> 00:12:00.550
it won't do anything.

00:12:00.550 --> 00:12:03.870
So the last thing that I'd like
to discuss here about the d-pad

00:12:03.870 --> 00:12:06.600
is what if you want to take
some arbitrary actions when

00:12:06.600 --> 00:12:08.130
any key is pressed.

00:12:08.130 --> 00:12:10.380
So to do this, we're going
to override the activity's

00:12:10.380 --> 00:12:11.810
onKeyDown method.

00:12:11.810 --> 00:12:13.330
This method fires
when any key is

00:12:13.330 --> 00:12:16.720
pressed that isn't already
handled by one of these views

00:12:16.720 --> 00:12:18.880
inside of your activity.

00:12:18.880 --> 00:12:20.910
So an example here
is that you could

00:12:20.910 --> 00:12:25.090
combine this onKeyDown
with requestFocus

00:12:25.090 --> 00:12:27.240
to change focus when
any key is pressed.

00:12:27.240 --> 00:12:31.240
Or, a really common use case
is, if I press play/pause button

00:12:31.240 --> 00:12:34.180
on the remote, it's going
to play-- I'm going to play

00:12:34.180 --> 00:12:36.270
or pause my video.

00:12:36.270 --> 00:12:39.460
Or, if you're making a
game, like I'm showing here,

00:12:39.460 --> 00:12:42.360
maybe when you press
the right d-pad button,

00:12:42.360 --> 00:12:44.380
you're going to move
your player to the right.

00:12:47.357 --> 00:12:49.690
WAYNE PIEKARSKI: So Ryan
talked you through a little bit

00:12:49.690 --> 00:12:52.190
about focus, and moving
things around, and so forth.

00:12:52.190 --> 00:12:54.640
Now we're going to talk
a bit about the screen.

00:12:54.640 --> 00:12:58.240
So it turns out, with
televisions nowadays, they

00:12:58.240 --> 00:13:00.910
don't operate in the same
way that we would expect.

00:13:00.910 --> 00:13:03.690
You would think that if
you've got a 1080 HDMI signal

00:13:03.690 --> 00:13:05.320
and you feed it
through to a screen

00:13:05.320 --> 00:13:06.670
that you would get a
one-to-one mapping.

00:13:06.670 --> 00:13:08.060
It turns out that's
not quite the case.

00:13:08.060 --> 00:13:10.150
So I'm going to talk a
little bit about something

00:13:10.150 --> 00:13:12.410
called overscan protection.

00:13:12.410 --> 00:13:14.370
So if we actually
go back in time,

00:13:14.370 --> 00:13:16.420
back in the days
of analog TV, there

00:13:16.420 --> 00:13:19.400
were these edges on the
screen that were not used.

00:13:19.400 --> 00:13:23.410
And TV stations actually used to
embed little signaling and bits

00:13:23.410 --> 00:13:26.190
of data and things like that in
that area that wasn't displayed

00:13:26.190 --> 00:13:27.210
with the television.

00:13:27.210 --> 00:13:29.160
It turns out that,
when we moved to HD,

00:13:29.160 --> 00:13:30.590
that stuff still happened.

00:13:30.590 --> 00:13:34.300
And so a lot of TV manufacturers
will actually take a TV image,

00:13:34.300 --> 00:13:37.230
and they'll chop off the edges,
and then stretch the image

00:13:37.230 --> 00:13:38.980
slightly so it fits the screen.

00:13:38.980 --> 00:13:42.560
So what this means is that you
don't get a one-to-one mapping.

00:13:42.560 --> 00:13:46.170
And some of the pixels on the
edge actually get chopped off.

00:13:46.170 --> 00:13:48.930
So you can disable
this on some TVs.

00:13:48.930 --> 00:13:51.250
There's overscan or some
other feature like that

00:13:51.250 --> 00:13:53.610
that you can remove
with the remote.

00:13:53.610 --> 00:13:55.590
But a lot of users
don't know how to do it.

00:13:55.590 --> 00:13:57.050
So you need to be
aware of the fact

00:13:57.050 --> 00:13:58.716
that there are some
people out there who

00:13:58.716 --> 00:14:01.200
are not going to see the edges
of the screen of your app.

00:14:01.200 --> 00:14:04.040
And so we need to go about
dealing with that somehow.

00:14:04.040 --> 00:14:07.120
And so, if we look
at this diagram here,

00:14:07.120 --> 00:14:10.690
you can see that we have
our 1080p overall display.

00:14:10.690 --> 00:14:14.890
And we've also shown it in terms
of dps, which is device pixels.

00:14:14.890 --> 00:14:18.276
And then, you can show the
areas that are not included.

00:14:18.276 --> 00:14:19.650
And we have a
guideline, which is

00:14:19.650 --> 00:14:23.220
that you should roughly
stick to not using

00:14:23.220 --> 00:14:24.960
the outer 5% of the image.

00:14:24.960 --> 00:14:26.590
And that's usually a safe thing.

00:14:26.590 --> 00:14:30.310
So if we look here, you can
see we've got some UI elements

00:14:30.310 --> 00:14:32.000
and we've got the
edges protected

00:14:32.000 --> 00:14:33.170
so that we don't use them.

00:14:33.170 --> 00:14:36.920
So once again, a 5%
outer area is something

00:14:36.920 --> 00:14:39.190
that you should reserve
that your app shouldn't

00:14:39.190 --> 00:14:40.690
put anything important in.

00:14:40.690 --> 00:14:42.770
Now, if you have a
background image, that's

00:14:42.770 --> 00:14:45.480
OK if that gets cropped
because it's just-- probably

00:14:45.480 --> 00:14:47.660
the interesting part is in
the center of the screen.

00:14:47.660 --> 00:14:49.430
So background images
can get cropped,

00:14:49.430 --> 00:14:52.780
but important pieces of text,
labels, any kind of import

00:14:52.780 --> 00:14:54.320
information like
that-- you've got

00:14:54.320 --> 00:14:57.260
to make sure that you keep
it out of that region.

00:14:57.260 --> 00:15:00.310
And so here, we have a custom
layout XML that we're showing.

00:15:00.310 --> 00:15:02.100
We've got two relative layouts.

00:15:02.100 --> 00:15:04.710
And the inner relative
layout, if you look at it,

00:15:04.710 --> 00:15:06.730
is padded with a 5% margin.

00:15:06.730 --> 00:15:09.750
So you can see we're setting
margin top, bottom, left

00:15:09.750 --> 00:15:10.510
and right.

00:15:10.510 --> 00:15:13.450
And we've set dp values
that represent that margin.

00:15:13.450 --> 00:15:17.140
And anything we put inside
that inner relative layout

00:15:17.140 --> 00:15:20.744
will not be cropped off by
the television for any reason.

00:15:20.744 --> 00:15:22.410
Anything else that
you don't care about,

00:15:22.410 --> 00:15:24.493
like the background image
we talked about earlier,

00:15:24.493 --> 00:15:27.680
you can put that in the outer
relative layout at the top.

00:15:27.680 --> 00:15:30.870
And that will possibly be
cropped by the television.

00:15:30.870 --> 00:15:32.660
So this is pretty
easy to implement.

00:15:32.660 --> 00:15:34.075
And it's not really a huge deal.

00:15:34.075 --> 00:15:35.700
But it's just something
you got to keep

00:15:35.700 --> 00:15:39.820
in mind so that you make
sure it works for all users.

00:15:39.820 --> 00:15:42.750
Next, not everyone
programs their Android TV

00:15:42.750 --> 00:15:45.520
apps using Android
APIs directly.

00:15:45.520 --> 00:15:48.150
So there's actually a
cross-platform gaming engine

00:15:48.150 --> 00:15:50.260
called Unity that's quite
popular amongst game

00:15:50.260 --> 00:15:51.290
developers.

00:15:51.290 --> 00:15:54.180
And so the good news
for Unity developers

00:15:54.180 --> 00:15:56.810
is that it actually supports
Android TV out of the box.

00:15:56.810 --> 00:15:59.280
So Unity has support
for the d-pad.

00:15:59.280 --> 00:16:00.740
So all that stuff
Ryan talked about

00:16:00.740 --> 00:16:02.440
with handling the
controls, that's

00:16:02.440 --> 00:16:03.940
already dealt with for you.

00:16:03.940 --> 00:16:06.350
And it deals with all
the manifest tweaks,

00:16:06.350 --> 00:16:07.830
and overscanning,
and making sure

00:16:07.830 --> 00:16:09.130
that everything's done right.

00:16:09.130 --> 00:16:12.840
So there's actually a Codelab
we've prepared for Android TV.

00:16:12.840 --> 00:16:16.240
So if you go behind
this auditorium,

00:16:16.240 --> 00:16:18.250
there is a Codelab
area where you

00:16:18.250 --> 00:16:20.830
can go, and sit down, and try
out code, and mess around.

00:16:20.830 --> 00:16:22.630
We have a Codelab for
Unity there as well

00:16:22.630 --> 00:16:23.890
that you can give a try.

00:16:23.890 --> 00:16:26.180
So that's the nice
thing-- is that a lot

00:16:26.180 --> 00:16:28.490
of these extra tools
and so forth support

00:16:28.490 --> 00:16:30.290
Android TV out of
the box, as well.

00:16:30.290 --> 00:16:32.730
So if you've got a game that
does 3D and OpenGL and all

00:16:32.730 --> 00:16:34.410
that, it just works.

00:16:34.410 --> 00:16:36.540
So now, we'll go to
Ryan to talk more

00:16:36.540 --> 00:16:38.260
about the Leanback
Library, which

00:16:38.260 --> 00:16:41.170
is a very popular way of
implementing really nice TV

00:16:41.170 --> 00:16:41.760
UIs.

00:16:41.760 --> 00:16:42.880
RYAN SEYS: Thanks, Wayne.

00:16:42.880 --> 00:16:45.630
So at Google, were trying
to make your lives easier

00:16:45.630 --> 00:16:46.560
as developers.

00:16:46.560 --> 00:16:48.030
And we know that
you don't really

00:16:48.030 --> 00:16:50.190
want to implement all
this stuff yourself.

00:16:50.190 --> 00:16:53.390
And so to help out, we
created that Leanback Library.

00:16:53.390 --> 00:16:55.270
It has a great selection
of UI components

00:16:55.270 --> 00:16:57.830
that are specifically
designed for Android TV.

00:16:57.830 --> 00:16:59.460
And these components
come with support

00:16:59.460 --> 00:17:02.030
for d-pad as well as
overscan protection

00:17:02.030 --> 00:17:03.467
already baked right in.

00:17:03.467 --> 00:17:05.050
So now, I'm going
to step through some

00:17:05.050 --> 00:17:07.800
of these components
and explain why you may

00:17:07.800 --> 00:17:10.319
consider using this library.

00:17:10.319 --> 00:17:12.670
So the first component
here that I want to discuss

00:17:12.670 --> 00:17:14.480
is this BrowseFragment.

00:17:14.480 --> 00:17:19.010
The BrowseFragment is good
for-- well, browsing, right?

00:17:19.010 --> 00:17:22.550
It allows you to showcase all
of your content in one place.

00:17:22.550 --> 00:17:25.839
And so one of the best places
to use the BrowseFragment

00:17:25.839 --> 00:17:30.050
is immediately when the
user opens this app.

00:17:30.050 --> 00:17:33.410
So here's an example of
it being used in practice.

00:17:33.410 --> 00:17:38.270
This is what it looks like being
run in our Leanback sample app,

00:17:38.270 --> 00:17:39.860
available on GitHub.

00:17:39.860 --> 00:17:41.400
And you can see
here that there's

00:17:41.400 --> 00:17:46.500
a sidebar with some header rows
and a main grid of content.

00:17:46.500 --> 00:17:50.680
So if you jump into a category
by pressing right on the d-pad,

00:17:50.680 --> 00:17:53.400
you can see a more detailed
view of this content.

00:17:53.400 --> 00:17:56.350
Here, we show some
thumbnail images, and title,

00:17:56.350 --> 00:17:57.310
and category.

00:17:57.310 --> 00:17:59.060
These can be basically
whatever you want.

00:17:59.060 --> 00:18:01.180
You could display a
rating for your content.

00:18:01.180 --> 00:18:05.660
You could display a price--
anything that you can imagine.

00:18:05.660 --> 00:18:08.200
So if you select on
one of these cards,

00:18:08.200 --> 00:18:10.280
then that brings us
into another fragment

00:18:10.280 --> 00:18:12.800
that we call the
DetailsFragment.

00:18:12.800 --> 00:18:15.620
So the DetailsFragment
presents all

00:18:15.620 --> 00:18:18.520
of the details for a
specific piece of content.

00:18:18.520 --> 00:18:21.900
It allows your users to take
certain actions-- anything

00:18:21.900 --> 00:18:23.820
that you can imagine
like watching renting,

00:18:23.820 --> 00:18:27.080
buying, this piece of content.

00:18:27.080 --> 00:18:28.970
So again, here it
is in practice.

00:18:28.970 --> 00:18:32.210
And you can customize, of
course, all of these colors,

00:18:32.210 --> 00:18:35.960
text, buttons, to provide
a personalized experience

00:18:35.960 --> 00:18:38.110
specific to that
piece of content.

00:18:38.110 --> 00:18:42.270
So in this case, with
our New Dad video,

00:18:42.270 --> 00:18:44.210
we can click WATCH TRAILER.

00:18:44.210 --> 00:18:46.090
And then, we get
into another fragment

00:18:46.090 --> 00:18:48.930
that we call the
PlaybackOverlayFragment.

00:18:48.930 --> 00:18:51.880
So this provides a large,
customized controls

00:18:51.880 --> 00:18:55.910
that overlay on top
of the media itself.

00:18:55.910 --> 00:18:57.650
It also provides
an at a glance view

00:18:57.650 --> 00:18:59.530
of what's currently playing.

00:18:59.530 --> 00:19:01.360
So again, here it
is in practice.

00:19:01.360 --> 00:19:03.520
It has a primary row,
which provides things

00:19:03.520 --> 00:19:07.100
like play, pause,
rewind fast forward,

00:19:07.100 --> 00:19:10.640
next video, previous video,
as well as a secondary row,

00:19:10.640 --> 00:19:13.130
such as closed captioning,
picture-in-picture.

00:19:13.130 --> 00:19:14.980
Here, I'm showing
some thumbs up,

00:19:14.980 --> 00:19:20.030
thumbs down, and some
repeat functionality.

00:19:20.030 --> 00:19:24.510
And then hidden at the bottom
there is a related videos row.

00:19:24.510 --> 00:19:26.340
This is just a
place that you can

00:19:26.340 --> 00:19:29.660
place related content to
whatever is currently playing.

00:19:29.660 --> 00:19:33.430
And so this could be where
you recommend the next video

00:19:33.430 --> 00:19:36.240
to play for your user.

00:19:36.240 --> 00:19:40.680
So if the users can't find this
next great piece of content

00:19:40.680 --> 00:19:44.090
to absorb in this
related video list,

00:19:44.090 --> 00:19:47.060
then maybe search is
the next best thing.

00:19:47.060 --> 00:19:49.900
And being Google, we want
to provide a great search

00:19:49.900 --> 00:19:50.790
experience.

00:19:50.790 --> 00:19:52.840
And so we've added
the SearchFragment

00:19:52.840 --> 00:19:54.460
to the Leanback Library.

00:19:54.460 --> 00:19:58.130
And so here again
is it in practice.

00:19:58.130 --> 00:20:00.540
And we're searching
for the word "search."

00:20:00.540 --> 00:20:03.820
And I think the best feature
of this whole SearchFragment

00:20:03.820 --> 00:20:06.530
is speech recognition
capability.

00:20:06.530 --> 00:20:09.510
So you can use the
microphone, which

00:20:09.510 --> 00:20:12.030
is baked right into the
Nexus Player remote,

00:20:12.030 --> 00:20:16.620
to speak whatever you want
and have it immediately fill

00:20:16.620 --> 00:20:19.020
in the field.

00:20:19.020 --> 00:20:21.940
So in addition to
in-app search, you

00:20:21.940 --> 00:20:24.810
can also integrate with
this Universal Search.

00:20:24.810 --> 00:20:28.900
So this is when a user searches
from the main TV launcher

00:20:28.900 --> 00:20:30.879
for some related content.

00:20:30.879 --> 00:20:32.670
And that will get
[INAUDIBLE] automatically

00:20:32.670 --> 00:20:34.880
by the Android system.

00:20:34.880 --> 00:20:37.790
So you can imagine you get
home, you turn on the TV,

00:20:37.790 --> 00:20:39.540
and you search "funny movies."

00:20:39.540 --> 00:20:41.290
If your app has
some funny movies,

00:20:41.290 --> 00:20:43.600
you're going to want to
surface that to the user.

00:20:43.600 --> 00:20:45.280
And so, to integrate
with search,

00:20:45.280 --> 00:20:47.890
there's just a few things
that you need to do.

00:20:47.890 --> 00:20:50.224
The first is implementing
a ContentProvider.

00:20:50.224 --> 00:20:51.890
And you might already
have one of these.

00:20:51.890 --> 00:20:54.330
Maybe you're already using
one for your in-app search.

00:20:54.330 --> 00:20:57.070
And so, you can see
our documentation

00:20:57.070 --> 00:20:59.310
for all the specific
rows that we support.

00:20:59.310 --> 00:21:03.160
But the key thing here is that
the provider that you create--

00:21:03.160 --> 00:21:05.400
you should set this
attribute exported="true"

00:21:05.400 --> 00:21:09.580
so that Android has access
to it and can query it when

00:21:09.580 --> 00:21:12.690
a universal search is made.

00:21:12.690 --> 00:21:15.235
And then the next thing
is this searchable XML.

00:21:15.235 --> 00:21:16.610
And again, you
might already have

00:21:16.610 --> 00:21:18.820
one of these implemented
in your app already.

00:21:18.820 --> 00:21:21.610
And so what you need
to do here is just set

00:21:21.610 --> 00:21:24.220
this includeInGlobalSearch
attribute to true

00:21:24.220 --> 00:21:28.110
so that Android, again,
can access this content.

00:21:28.110 --> 00:21:31.190
So even before search,
your app might actually

00:21:31.190 --> 00:21:35.150
have a good idea of what
the user wants to see next.

00:21:35.150 --> 00:21:40.910
And so Android TV has this
powerful way that we can help,

00:21:40.910 --> 00:21:43.480
which we call Recommendations.

00:21:43.480 --> 00:21:46.700
So this Recommendations Bar
is featured front and center

00:21:46.700 --> 00:21:49.450
as soon as the user opens
up their Android TV.

00:21:49.450 --> 00:21:52.350
Android goes through
each app and asks,

00:21:52.350 --> 00:21:55.090
hey do you have any
recommendations that you'd

00:21:55.090 --> 00:21:57.490
like me to present to the user?

00:21:57.490 --> 00:21:59.510
And so it takes all of
these from each app.

00:21:59.510 --> 00:22:01.150
And it merges them together.

00:22:01.150 --> 00:22:04.090
And so when a user clicks
on a recommendation, which

00:22:04.090 --> 00:22:09.720
would appear in this bar, it
will immediately open your app

00:22:09.720 --> 00:22:12.320
to that piece of content.

00:22:12.320 --> 00:22:14.050
So here are a few
recommendations

00:22:14.050 --> 00:22:19.130
on what you may want to
recommend to your users.

00:22:19.130 --> 00:22:21.810
The first is
continuation content.

00:22:21.810 --> 00:22:26.230
A good example is the
next episode in a series,

00:22:26.230 --> 00:22:28.990
as well as new content--
things like new episodes

00:22:28.990 --> 00:22:31.840
or a new series
altogether, as well as

00:22:31.840 --> 00:22:34.180
popular or trending content.

00:22:34.180 --> 00:22:35.710
And then, related content.

00:22:35.710 --> 00:22:38.900
This is things like based
off the user's viewing

00:22:38.900 --> 00:22:41.560
history or behavior.

00:22:41.560 --> 00:22:43.370
And so all of these
UI and fragments

00:22:43.370 --> 00:22:45.360
that we've shown
you today-- they're

00:22:45.360 --> 00:22:48.010
available through the Leanback
and Recommendation Support

00:22:48.010 --> 00:22:51.030
Libraries, which, if you're
using Android Studio, which

00:22:51.030 --> 00:22:54.010
we highly recommend, you
might be familiar with Gradle.

00:22:54.010 --> 00:22:57.230
Of course, we support
these Gradle dependencies.

00:22:57.230 --> 00:23:01.000
And so you just you
drop these two lines

00:23:01.000 --> 00:23:03.520
into your build.grade.

00:23:03.520 --> 00:23:06.446
And Gradle will handle
everything else.

00:23:06.446 --> 00:23:08.701
Wayne?

00:23:08.701 --> 00:23:10.200
WAYNE PIEKARSKI:
So one common thing

00:23:10.200 --> 00:23:11.920
I hear from developers
when they're

00:23:11.920 --> 00:23:13.964
asking about Android TV
is they're like, oh, hey,

00:23:13.964 --> 00:23:15.630
I can't develop for
Android TV because I

00:23:15.630 --> 00:23:17.330
don't have a device on my desk.

00:23:17.330 --> 00:23:19.660
And so while it's
nice to have a device,

00:23:19.660 --> 00:23:22.540
you don't actually need
one because the emulator

00:23:22.540 --> 00:23:25.010
is actually available to
help you do your testing.

00:23:25.010 --> 00:23:26.840
So a lot of people
think the emulator also

00:23:26.840 --> 00:23:27.590
isn't good enough.

00:23:27.590 --> 00:23:29.756
But it turns out that the
emulator in Android Studio

00:23:29.756 --> 00:23:30.772
is actually really good.

00:23:30.772 --> 00:23:32.730
And so for Android TV,
we've done a lot of work

00:23:32.730 --> 00:23:34.260
in improving its performance.

00:23:34.260 --> 00:23:37.540
And so it's actually really nice
to use this for development.

00:23:37.540 --> 00:23:39.210
And so what we're
going to do now

00:23:39.210 --> 00:23:41.320
is we're going to show
you a quick little demo.

00:23:41.320 --> 00:23:43.486
So they're going to bring
it up on the screen there.

00:23:43.486 --> 00:23:46.480
This is Ryan's laptop running
the emulator, right now.

00:23:46.480 --> 00:23:49.452
And so this emulator
here is the x86 variant.

00:23:49.452 --> 00:23:50.910
So it's very
important that you run

00:23:50.910 --> 00:23:54.430
x86 when your on
an x86 laptop so

00:23:54.430 --> 00:23:56.750
that it doesn't have to
emulate everything completely.

00:23:56.750 --> 00:23:59.390
And it's also important that you
have the HAXM driver, as well.

00:23:59.390 --> 00:24:02.420
So we can see here is Ryan's
running the sample that I'll

00:24:02.420 --> 00:24:04.080
give you the link to later.

00:24:04.080 --> 00:24:06.390
But the sample has a
series of video clips

00:24:06.390 --> 00:24:08.340
and he's browsing
around fragments.

00:24:08.340 --> 00:24:12.210
And so do you want to
fire up a video, Ryan?

00:24:12.210 --> 00:24:14.520
So this here shows video
playback happening.

00:24:14.520 --> 00:24:16.050
So it's streaming the video.

00:24:16.050 --> 00:24:19.060
It's decoding it, playing
it back within the emulator.

00:24:19.060 --> 00:24:21.560
So as you can see here,
it's very performant.

00:24:21.560 --> 00:24:23.860
It's decoding the video in
real-time on his laptop.

00:24:23.860 --> 00:24:26.230
And so the emulator
is quite useful.

00:24:26.230 --> 00:24:28.520
Also if you look on the
right of the screen,

00:24:28.520 --> 00:24:30.430
there is the extended controls.

00:24:30.430 --> 00:24:34.220
So an Android TV has its
own remote with left,

00:24:34.220 --> 00:24:37.870
right, up, down, but it
also has back, pause, play,

00:24:37.870 --> 00:24:38.760
and so forth.

00:24:38.760 --> 00:24:41.650
All of those controls are
available on the emulator,

00:24:41.650 --> 00:24:42.150
as well.

00:24:42.150 --> 00:24:44.560
So you can simulate
every single button press

00:24:44.560 --> 00:24:47.790
and check that your code has
all the right d-pad support

00:24:47.790 --> 00:24:50.600
and things like that because
not every button necessarily

00:24:50.600 --> 00:24:52.040
is mapped to the keys.

00:24:52.040 --> 00:24:56.060
So the great thing is
that this simulator does

00:24:56.060 --> 00:24:59.380
all of the buttons that are
available on regular devices

00:24:59.380 --> 00:25:03.320
and you don't need to purchase
a physical Android TV device.

00:25:03.320 --> 00:25:05.780
So this is pretty cool.

00:25:05.780 --> 00:25:07.270
If you're interested
in doing this,

00:25:07.270 --> 00:25:10.350
you should grab the sample, fire
up the emulator, try it out.

00:25:10.350 --> 00:25:12.620
And then, when you're
ready, you can publish it.

00:25:12.620 --> 00:25:16.350
And your app will works really
well on real devices, too.

00:25:16.350 --> 00:25:18.997
So once you've built
your app-- so we've

00:25:18.997 --> 00:25:21.580
gone through all the different
little manifest tags and things

00:25:21.580 --> 00:25:22.081
like that.

00:25:22.081 --> 00:25:23.580
We're now at the
point where we need

00:25:23.580 --> 00:25:26.370
to talk about publishing
you app to Google Play.

00:25:26.370 --> 00:25:28.295
So we have the--

00:25:28.295 --> 00:25:30.170
RYAN SEYS: If we could
go back to the slides.

00:25:30.170 --> 00:25:30.240
WAYNE PIEKARSKI: Oh, yeah.

00:25:30.240 --> 00:25:32.090
If we could flip
back from the-- OK.

00:25:32.090 --> 00:25:32.590
Great.

00:25:32.590 --> 00:25:33.452
Thanks.

00:25:33.452 --> 00:25:35.660
So now, we're going to talk
about how to get your app

00:25:35.660 --> 00:25:37.300
and publish it to the console.

00:25:37.300 --> 00:25:39.650
So if we go to this
slide here, you

00:25:39.650 --> 00:25:42.190
can see a screenshot
showing what the developer

00:25:42.190 --> 00:25:43.190
console looks like.

00:25:43.190 --> 00:25:46.540
So this is the same place where
you upload your regular APKs

00:25:46.540 --> 00:25:48.650
that you're uploading
from mobile.

00:25:48.650 --> 00:25:52.540
And there is an option in
device categories where it says,

00:25:52.540 --> 00:25:53.351
Android TV.

00:25:53.351 --> 00:25:55.100
And if you look right
at the bottom there,

00:25:55.100 --> 00:25:56.724
there's a checkbox
that says distribute

00:25:56.724 --> 00:25:58.100
your app to Android TV.

00:25:58.100 --> 00:26:01.120
So by default, that
box is not checked.

00:26:01.120 --> 00:26:04.190
So if you want your app to
be visible on TV devices,

00:26:04.190 --> 00:26:06.540
you have to check
that box, as well.

00:26:06.540 --> 00:26:11.110
That then declares to the Play
that your app is ready for TV.

00:26:11.110 --> 00:26:13.210
And there is a few
little conditions there.

00:26:13.210 --> 00:26:15.050
And you can click on
that Learn more link

00:26:15.050 --> 00:26:17.410
to find out more about
what the requirements are.

00:26:17.410 --> 00:26:19.910
So you submit your app.

00:26:19.910 --> 00:26:21.110
It gets approved.

00:26:21.110 --> 00:26:23.520
And then after that, it will
then be available for people

00:26:23.520 --> 00:26:25.220
to find on Android TV devices.

00:26:25.220 --> 00:26:27.540
And then, they can
go to the Play.

00:26:27.540 --> 00:26:29.240
And then, they can
search for your app

00:26:29.240 --> 00:26:31.422
by speaking or typing it in.

00:26:31.422 --> 00:26:32.880
And then, they can
install it, just

00:26:32.880 --> 00:26:34.004
like they would on a phone.

00:26:34.004 --> 00:26:36.570
And updates are rolled out in
the same way, and everything

00:26:36.570 --> 00:26:37.070
like that.

00:26:37.070 --> 00:26:39.530
So it's a pretty easy
and painless experience.

00:26:39.530 --> 00:26:41.600
And as I said earlier,
you can either

00:26:41.600 --> 00:26:44.490
have a single APK
that contains all

00:26:44.490 --> 00:26:48.040
of the resources and activities
for both phone and TV.

00:26:48.040 --> 00:26:50.520
Or, you can have
separate APKs where

00:26:50.520 --> 00:26:53.110
one has the resources
and everything for TV

00:26:53.110 --> 00:26:54.590
and the other one has for phone.

00:26:54.590 --> 00:26:57.010
What you do is going to be
dependent on who your target

00:26:57.010 --> 00:27:00.240
market is and how concerned
you are about download sizes

00:27:00.240 --> 00:27:02.311
and, also, how much
difference there

00:27:02.311 --> 00:27:03.810
is between the TV
and the phone app.

00:27:03.810 --> 00:27:05.680
If there's no differences
in the resources,

00:27:05.680 --> 00:27:07.800
you can just do a single APK.

00:27:07.800 --> 00:27:12.370
So we've gone through some
guidelines in this talk.

00:27:12.370 --> 00:27:14.170
The guidelines are
actually referenced

00:27:14.170 --> 00:27:15.260
in the documentation.

00:27:15.260 --> 00:27:16.760
And there's actually
a link here,

00:27:16.760 --> 00:27:20.790
on developer.android.com, which
has a complete checklist of all

00:27:20.790 --> 00:27:24.000
of the things that are important
to get your app approved to be

00:27:24.000 --> 00:27:26.139
distributed on Google Play.

00:27:26.139 --> 00:27:28.180
Now it's important that
you get your app approved

00:27:28.180 --> 00:27:30.220
because, if it's rejected,
it won't be visible.

00:27:30.220 --> 00:27:31.886
So it's very important
that you actually

00:27:31.886 --> 00:27:33.860
think carefully about
each of the guidelines

00:27:33.860 --> 00:27:36.235
to minimize the amount of time
it takes for you to get it

00:27:36.235 --> 00:27:37.400
on Google Play.

00:27:37.400 --> 00:27:40.020
So let's quickly walk through
them and summarize quickly

00:27:40.020 --> 00:27:40.820
what they are.

00:27:40.820 --> 00:27:42.970
So Ryan mentioned
earlier, you need

00:27:42.970 --> 00:27:45.570
to have a LEANBACK_LAUNCHER
in your Android manifest.

00:27:45.570 --> 00:27:48.060
This declares that your
app is ready for TV.

00:27:48.060 --> 00:27:49.770
And it says what the
activity is going

00:27:49.770 --> 00:27:53.030
to be when someone clicks
on your app to start it up.

00:27:53.030 --> 00:27:57.480
You need a banner image that's
320 by 180 at xhdpi resolution.

00:27:57.480 --> 00:27:59.130
If you don't use
that resolution,

00:27:59.130 --> 00:28:01.300
it'll be resized for you.

00:28:01.300 --> 00:28:03.030
You need to eliminate
requirements

00:28:03.030 --> 00:28:04.770
for any unsupported hardware.

00:28:04.770 --> 00:28:06.890
Remember, TVs don't
have touch screens,

00:28:06.890 --> 00:28:08.990
so you need to have
touchscreen="false".

00:28:08.990 --> 00:28:11.000
And any other
requirements you have,

00:28:11.000 --> 00:28:13.020
like if your app
uses GPS, you're

00:28:13.020 --> 00:28:15.010
going to have to set
that to false, as well.

00:28:15.010 --> 00:28:18.110
And make sure that, if your
code is doing something

00:28:18.110 --> 00:28:20.690
like grabbing a location,
check for errors

00:28:20.690 --> 00:28:23.260
to make sure that you don't
accidentally fail and throw

00:28:23.260 --> 00:28:24.150
an exception.

00:28:24.150 --> 00:28:27.740
So as part of the new transition
to the new permission model,

00:28:27.740 --> 00:28:29.900
apps have to check a lot
more for these things.

00:28:29.900 --> 00:28:31.100
The same kind of thing here.

00:28:31.100 --> 00:28:33.680
You got to make sure you
don't expect a device

00:28:33.680 --> 00:28:35.900
to be available when it's not.

00:28:35.900 --> 00:28:37.410
Next thing.

00:28:37.410 --> 00:28:39.920
Ensure any permissions
you add don't add

00:28:39.920 --> 00:28:41.550
hardware requirements, as well.

00:28:41.550 --> 00:28:43.870
Certain permissions, like
RECORD_AUDIO that Ryan showed

00:28:43.870 --> 00:28:47.480
earlier, also have requirements
that you have to manually set

00:28:47.480 --> 00:28:49.540
to required="false".

00:28:49.540 --> 00:28:52.950
Next, you can't assume that your
app is running on a portrait

00:28:52.950 --> 00:28:57.430
device-- like a phone runs
as a portrait orientation.

00:28:57.430 --> 00:28:59.180
And some apps lock
themselves so that they

00:28:59.180 --> 00:29:00.720
don't run in landscape mode.

00:29:00.720 --> 00:29:03.330
It's very important, because
the TV is a landscape device,

00:29:03.330 --> 00:29:05.430
that your resources are
configured correctly

00:29:05.430 --> 00:29:07.330
for screens like that.

00:29:07.330 --> 00:29:09.990
Next, you really need to
think about viewing everything

00:29:09.990 --> 00:29:11.040
from a distance.

00:29:11.040 --> 00:29:13.220
So this is no longer
something that you're running

00:29:13.220 --> 00:29:14.580
very close to your face.

00:29:14.580 --> 00:29:15.750
It's running on a screen.

00:29:15.750 --> 00:29:17.900
It's very far away in
someone's living room.

00:29:17.900 --> 00:29:20.060
So you really need to
think of large fonts,

00:29:20.060 --> 00:29:23.422
and easy to read text,
and large images.

00:29:23.422 --> 00:29:24.380
And you should test it.

00:29:24.380 --> 00:29:26.100
So try to step back
from the screen

00:29:26.100 --> 00:29:28.460
and check that it's actually
readable from a distance

00:29:28.460 --> 00:29:29.000
like that.

00:29:29.000 --> 00:29:30.480
Some people have poor vision.

00:29:30.480 --> 00:29:34.630
They're not going to read
super tiny writing like that.

00:29:34.630 --> 00:29:36.700
Next, make sure you
think about overscan.

00:29:36.700 --> 00:29:38.020
We talked about that before.

00:29:38.020 --> 00:29:41.600
Make sure you don't put anything
important within the outer 5%

00:29:41.600 --> 00:29:42.900
of your screen.

00:29:42.900 --> 00:29:46.150
And so, lastly, think about
implementing the Leanback user

00:29:46.150 --> 00:29:46.659
interface.

00:29:46.659 --> 00:29:48.450
So if you've got an
app that's like a game,

00:29:48.450 --> 00:29:49.770
you probably don't need to.

00:29:49.770 --> 00:29:52.070
But if you're building
some kind of browsing,

00:29:52.070 --> 00:29:54.430
something that goes through
media, or food, or pictures,

00:29:54.430 --> 00:29:57.140
or photos, make
sure that, if you

00:29:57.140 --> 00:30:00.750
want to really make it integrate
into the Android TV experience,

00:30:00.750 --> 00:30:03.350
that you use the Leanback
Library because the Leanback

00:30:03.350 --> 00:30:05.870
gives a consistent UI
across the whole device

00:30:05.870 --> 00:30:08.090
that it will look the
same between other apps

00:30:08.090 --> 00:30:10.880
and also with the
Android TV system itself.

00:30:10.880 --> 00:30:12.280
So those are the guidelines.

00:30:12.280 --> 00:30:15.085
And that link up there is
available in the documentation.

00:30:15.085 --> 00:30:16.710
You should definitely
look through them

00:30:16.710 --> 00:30:19.080
when you're getting ready
to publish your app.

00:30:19.080 --> 00:30:21.840
So that was a really
quick overview

00:30:21.840 --> 00:30:24.670
of how to bring your
app over to Android TV.

00:30:24.670 --> 00:30:27.080
So I hope you found it
inspiring and it gave you

00:30:27.080 --> 00:30:30.570
some ideas as to how to
think about taking your app

00:30:30.570 --> 00:30:32.780
and what would be involved
in making the change.

00:30:32.780 --> 00:30:34.110
It's not really hard to do.

00:30:34.110 --> 00:30:35.670
It's just a few little things.

00:30:35.670 --> 00:30:37.326
So how do we get
started with this?

00:30:37.326 --> 00:30:39.450
Well, the first thing is
the talk's being recorded.

00:30:39.450 --> 00:30:41.790
So if you want to review
everything later on,

00:30:41.790 --> 00:30:43.970
you'll be able to go back
and go through everything.

00:30:43.970 --> 00:30:46.220
But we also have a lot of
other great resources, which

00:30:46.220 --> 00:30:47.850
are shown on the slide here.

00:30:47.850 --> 00:30:50.260
So the first thing we have
is the documentation site.

00:30:50.260 --> 00:30:52.000
So on
developer.android.com, we've

00:30:52.000 --> 00:30:54.550
got training guides
that give an overview

00:30:54.550 --> 00:30:57.640
and summarize some of the
things we've said today.

00:30:57.640 --> 00:30:59.850
And we also have
the Leanback sample.

00:30:59.850 --> 00:31:01.190
So it's on GitHub.

00:31:01.190 --> 00:31:02.340
In the Google Samples.

00:31:02.340 --> 00:31:04.150
It's called Android TV Leanback.

00:31:04.150 --> 00:31:07.910
And that demo that Ryan showed
earlier is that sample there.

00:31:07.910 --> 00:31:10.420
So you can play with it,
see how the videos stream.

00:31:10.420 --> 00:31:11.870
See how it works for you.

00:31:11.870 --> 00:31:15.870
And it's a really great way to
see how a well-built app works.

00:31:15.870 --> 00:31:18.840
And you could probably tear
it apart and put your own code

00:31:18.840 --> 00:31:20.470
in there and so forth.

00:31:20.470 --> 00:31:22.750
The next thing I mentioned,
we have the Codelabs

00:31:22.750 --> 00:31:24.770
in the other area, where
you can go over there

00:31:24.770 --> 00:31:25.670
and you can try out.

00:31:25.670 --> 00:31:27.452
You can sit down, play
with some devices.

00:31:27.452 --> 00:31:29.410
And there are actually
engineers on staff there

00:31:29.410 --> 00:31:31.510
who can help answer
your questions, as well.

00:31:31.510 --> 00:31:33.110
And we also have the sandbox.

00:31:33.110 --> 00:31:36.200
So there is an area over there
with these large metal box

00:31:36.200 --> 00:31:39.410
crate things that we have
an area showing TV and Cast

00:31:39.410 --> 00:31:40.330
devices.

00:31:40.330 --> 00:31:41.770
Feel free to come by there.

00:31:41.770 --> 00:31:44.310
And we have people who work
on the actual Android TV

00:31:44.310 --> 00:31:46.802
team ready to answer
questions there, as well.

00:31:46.802 --> 00:31:49.010
And also, people like me
and Ryan will be there, too.

00:31:49.010 --> 00:31:50.470
So we're getting to
the end of the day.

00:31:50.470 --> 00:31:51.989
So there's not too
much time left.

00:31:51.989 --> 00:31:53.530
But please, do come
by after the talk

00:31:53.530 --> 00:31:56.110
and come have a chat with
us because the whole point

00:31:56.110 --> 00:31:58.820
of Google I/O is we want to
share information with people

00:31:58.820 --> 00:32:00.507
and get information
from developers.

00:32:00.507 --> 00:32:03.090
If you've tried to do Android
TV and something didn't work out

00:32:03.090 --> 00:32:04.620
for you, come and
tell us what happened

00:32:04.620 --> 00:32:06.328
so that we can think
about it and, maybe,

00:32:06.328 --> 00:32:07.750
come up with a solution for you.

00:32:07.750 --> 00:32:10.510
And finally, for people who
can't come here or for later,

00:32:10.510 --> 00:32:13.250
we have a great developer
community on Google+.

00:32:13.250 --> 00:32:16.570
So the link is
g.co/androidtvdev.

00:32:16.570 --> 00:32:19.710
And it's a great place where
we post articles about what's

00:32:19.710 --> 00:32:21.042
coming up, what's new.

00:32:21.042 --> 00:32:23.500
And also, it's a place where
you can ask questions and chat

00:32:23.500 --> 00:32:25.010
with other developers.

00:32:25.010 --> 00:32:26.930
And definitely, I
recommend you follow us

00:32:26.930 --> 00:32:29.390
because I post a lot
of articles about TV.

00:32:29.390 --> 00:32:31.130
But also, I do
wearables, and auto,

00:32:31.130 --> 00:32:32.370
and all these other things.

00:32:32.370 --> 00:32:34.950
And there's a lot of commonality
between the platforms

00:32:34.950 --> 00:32:35.760
that Google offers.

00:32:35.760 --> 00:32:37.590
And so, if you've
got a phone app,

00:32:37.590 --> 00:32:39.880
you should consider
TV, and auto,

00:32:39.880 --> 00:32:43.130
and wearables because these
are all new, exciting platforms

00:32:43.130 --> 00:32:45.770
where users are waiting for
really cool and exciting apps.

00:32:45.770 --> 00:32:46.495
Thank you very much for coming.

00:32:46.495 --> 00:32:46.720
And we'll see you later.

00:32:46.830 --> 00:32:47.520
RYAN SEYS: Thank you.

00:32:47.520 --> 00:32:48.320
WAYNE PIEKARSKI: Thanks a lot.

00:32:48.320 --> 00:32:49.220
[APPLAUSE]

00:32:49.220 --> 00:32:52.270
[MUSIC PLAYING]

