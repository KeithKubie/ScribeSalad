WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:02.423
MALE SPEAKER: So back in
the dark days of the web,

00:00:02.423 --> 00:00:04.570
doing anything even
remotely fun with

00:00:04.570 --> 00:00:07.510
audio, video, real-time
communication,

00:00:07.510 --> 00:00:09.820
that was the domain of plug-ins.

00:00:09.820 --> 00:00:11.860
And we don't really
like plug-ins.

00:00:11.860 --> 00:00:13.180
This is no longer true.

00:00:13.180 --> 00:00:16.410
We have a fantastic mix of
low- and high-level APIs

00:00:16.410 --> 00:00:18.160
that we can sort of
manipulate this stuff,

00:00:18.160 --> 00:00:21.900
send data between machines,
and manipulate audio and video.

00:00:21.900 --> 00:00:22.990
It's great stuff.

00:00:22.990 --> 00:00:25.690
To show us how to get the
most out of those APIs,

00:00:25.690 --> 00:00:28.610
I'll introduce our next
speakers, Sam Dutton

00:00:28.610 --> 00:00:30.590
and Jan Linden, everyone.

00:00:30.590 --> 00:00:33.050
[APPLAUSE]

00:00:33.050 --> 00:00:35.510
SAM DUTTON: Thank you.

00:00:35.510 --> 00:00:37.570
Thank you very much, Jake.

00:00:37.570 --> 00:00:39.480
I've never been
called that before.

00:00:39.480 --> 00:00:42.440
Yeah, I am Sam Dutton.

00:00:42.440 --> 00:00:45.895
I'm a developer advocate
for Chrome based in London.

00:00:45.895 --> 00:00:47.186
JAN LINDEN: And I'm Jan Linden.

00:00:47.186 --> 00:00:49.240
I'm a product manager
on the Chrome media

00:00:49.240 --> 00:00:51.820
team with a special
focus on audio.

00:00:51.820 --> 00:00:54.260
SAM DUTTON: And everyone
knows Chris Wilson,

00:00:54.260 --> 00:00:58.590
who is going to be performing
for us a bit later.

00:00:58.590 --> 00:01:03.370
So if I can get my
clicker to work.

00:01:03.370 --> 00:01:06.140
There's going to be quite a lot
of links in these slides, which

00:01:06.140 --> 00:01:09.000
might work better online
than on the screen here.

00:01:09.000 --> 00:01:11.860
So if you want to follow
along, these slides are up

00:01:11.860 --> 00:01:16.340
at simpl.info/media.

00:01:16.340 --> 00:01:20.660
So I think we've seen two
big changes on the web.

00:01:20.660 --> 00:01:24.590
And these have happened
really suddenly.

00:01:24.590 --> 00:01:28.370
The first is the stuff that
Linus was talking about,

00:01:28.370 --> 00:01:30.660
the rise of this
multi-device web.

00:01:30.660 --> 00:01:33.140
You know, we've got
more mobile phones than,

00:01:33.140 --> 00:01:36.090
like, toothbrushes
or pencils and so on.

00:01:36.090 --> 00:01:40.370
There's this
commoditzation of computing

00:01:40.370 --> 00:01:43.560
on a scale we haven't seen
since the PC boom of the '80s

00:01:43.560 --> 00:01:46.050
and '90s.

00:01:46.050 --> 00:01:48.290
But the thing is
that it's not just

00:01:48.290 --> 00:01:51.590
kind of the same thing
with more computers.

00:01:51.590 --> 00:01:54.010
The change of
devices is actually

00:01:54.010 --> 00:01:57.460
changing what we're
doing on the web.

00:01:57.460 --> 00:02:01.250
And in particular, like
Jake was referring to,

00:02:01.250 --> 00:02:04.820
we're seeing things the
rise of audio and video

00:02:04.820 --> 00:02:07.790
and real-time
communication on the web.

00:02:07.790 --> 00:02:11.910
And this is, in a sense,
I think a lot of it

00:02:11.910 --> 00:02:14.450
is to do with the fact that
we're using these devices now

00:02:14.450 --> 00:02:19.800
which are naturally
oriented to consuming media

00:02:19.800 --> 00:02:20.615
and communicating.

00:02:20.615 --> 00:02:24.550
You know, phones and
tablets and so on.

00:02:24.550 --> 00:02:27.290
This is actually having a
knock-on effect elsewhere.

00:02:27.290 --> 00:02:30.130
I mean, a lot of us, when
we watch television now,

00:02:30.130 --> 00:02:32.750
we do other stuff
with mobile devices.

00:02:32.750 --> 00:02:36.530
We access other media while
we're watching television.

00:02:36.530 --> 00:02:40.700
And in a lot of countries,
in fact, TV viewing is down.

00:02:40.700 --> 00:02:43.680
Online viewing is up.

00:02:43.680 --> 00:02:45.950
I just read actually in
"The Economist" about China,

00:02:45.950 --> 00:02:51.620
that in Beijing, like only 30%
of people now use a television.

00:02:51.620 --> 00:02:55.420
And that's down from like
70% percent of households

00:02:55.420 --> 00:02:57.640
three years ago.

00:02:57.640 --> 00:02:59.740
I mean, popular
online shows in China,

00:02:59.740 --> 00:03:04.540
they get audiences
of like 250 million.

00:03:04.540 --> 00:03:10.070
And so the predictions are that
within a few years, something

00:03:10.070 --> 00:03:13.440
like maybe 90% of
the bits that cross

00:03:13.440 --> 00:03:16.000
the internet will
actually be video.

00:03:16.000 --> 00:03:20.210
This translates to something
like a million minutes of video

00:03:20.210 --> 00:03:23.274
a second, which is incredible.

00:03:23.274 --> 00:03:24.690
So I mean, it's
not that we're all

00:03:24.690 --> 00:03:28.190
going to build the next
YouTube or whatever.

00:03:28.190 --> 00:03:30.400
But we're coming
to expect this kind

00:03:30.400 --> 00:03:33.460
of seamless audio, video,
real-time communication

00:03:33.460 --> 00:03:34.180
in our apps.

00:03:34.180 --> 00:03:38.540
And we're expecting
that on all our devices.

00:03:38.540 --> 00:03:40.670
So what have we got?

00:03:40.670 --> 00:03:45.780
Well, we have these media
APIs for the open web,

00:03:45.780 --> 00:03:51.390
and we have these interoperable
standardized technologies

00:03:51.390 --> 00:03:55.270
working across a huge
range of devices.

00:03:55.270 --> 00:03:59.140
So in the next 25 minutes, we're
going to just try and touch

00:03:59.140 --> 00:04:02.940
on some of the things we can
do with those APIs on the web.

00:04:06.030 --> 00:04:08.360
Perhaps the best place to
start-- I just [INAUDIBLE]

00:04:08.360 --> 00:04:11.590
any more feedback-- is WebRTC.

00:04:11.590 --> 00:04:15.107
This is perhaps the
most ambitious-- kind

00:04:15.107 --> 00:04:18.339
of odious word-- but
disruptive, really, disruptive

00:04:18.339 --> 00:04:19.529
projects on the web.

00:04:19.529 --> 00:04:23.580
This is real-time communication
built into the browser.

00:04:23.580 --> 00:04:27.590
Open source, plug-in
free, free for end users,

00:04:27.590 --> 00:04:28.970
free for developers.

00:04:28.970 --> 00:04:34.780
And this has been like a missing
piece of the web platform.

00:04:34.780 --> 00:04:39.180
And this is kind of crucial for
building web apps on devices

00:04:39.180 --> 00:04:42.460
which are oriented
to communication.

00:04:42.460 --> 00:04:45.300
So maybe the best way
to show this in action

00:04:45.300 --> 00:04:48.570
is let's have a chat.

00:04:48.570 --> 00:04:54.920
We have-- well, I'm going to use
Opera, actually, on the desktop

00:04:54.920 --> 00:04:56.350
here to get to that address.

00:04:56.350 --> 00:04:57.600
JAN LINDEN: --Android tablets.

00:04:57.600 --> 00:04:58.170
I think that's best.

00:04:58.170 --> 00:05:00.086
SAM DUTTON: I can see
someone else has already

00:05:00.086 --> 00:05:01.530
joined us there.

00:05:01.530 --> 00:05:06.570
We've got Firefox running
over there on the Nexus,

00:05:06.570 --> 00:05:09.920
and then Chrome for
Android on the Nexus 7.

00:05:09.920 --> 00:05:12.790
And you can see that's
working pretty well.

00:05:12.790 --> 00:05:14.550
And this is like
a full mesh setup,

00:05:14.550 --> 00:05:16.020
everyone connected to everyone.

00:05:16.020 --> 00:05:20.744
So it's not actually
particularly efficient.

00:05:20.744 --> 00:05:21.285
Hello, Brian.

00:05:25.420 --> 00:05:27.380
So, I mean, this is great.

00:05:27.380 --> 00:05:30.510
We're seeing great stuff
coming through with WebRTC.

00:05:30.510 --> 00:05:32.850
We've got really great adoption.

00:05:32.850 --> 00:05:37.700
Firefox, Chrome, and now Opera
on desktop and on Android,

00:05:37.700 --> 00:05:42.550
bindings for Java, Objective
C. And yeah, pretty recently,

00:05:42.550 --> 00:05:45.260
Qt framework started using
Chromium, which gives us access

00:05:45.260 --> 00:05:48.100
to loads of stuff,
including WebRTC.

00:05:48.100 --> 00:05:52.540
So we have well over
now a billion endpoints

00:05:52.540 --> 00:05:57.450
and a lot more predicted
for the near future.

00:05:57.450 --> 00:06:00.910
So I guess the obvious
use case for WebRTC

00:06:00.910 --> 00:06:03.360
is video chat like
we were just showing.

00:06:03.360 --> 00:06:07.300
But there have been some really
innovative apps coming through.

00:06:07.300 --> 00:06:09.950
Just back in August,
kind of helped

00:06:09.950 --> 00:06:15.300
out a company called vLine,
Sky did live interview

00:06:15.300 --> 00:06:17.940
in South London where I live.

00:06:17.940 --> 00:06:20.129
And they did that
all with WebRTC.

00:06:20.129 --> 00:06:22.170
You know, in the old days,
to do stuff like this,

00:06:22.170 --> 00:06:25.000
you needed all this kit, all
these people, these trucks,

00:06:25.000 --> 00:06:26.320
all this stuff.

00:06:26.320 --> 00:06:28.700
And they did it with
this really simple setup,

00:06:28.700 --> 00:06:31.420
using a camera
like I've got here

00:06:31.420 --> 00:06:34.280
and one of these $100 Yeti mics.

00:06:34.280 --> 00:06:36.040
And I think this is amazing.

00:06:36.040 --> 00:06:39.800
This is like the
democratization of broadcast.

00:06:39.800 --> 00:06:42.870
I love this stuff.

00:06:42.870 --> 00:06:47.580
So in the old days,
real-time communication

00:06:47.580 --> 00:06:52.210
involved something like this,
this highly simplified diagram.

00:06:52.210 --> 00:06:54.710
But you were required
to go through some kind

00:06:54.710 --> 00:06:56.130
of centralized service.

00:06:56.130 --> 00:06:58.100
And essentially, that
box in the middle

00:06:58.100 --> 00:07:00.410
was acting like a
relay service, which

00:07:00.410 --> 00:07:03.470
is just inherently inefficient.

00:07:03.470 --> 00:07:05.580
Perhaps the most radical
thing about WebRTC

00:07:05.580 --> 00:07:09.650
is that its architecture
is inherently peer to peer.

00:07:09.650 --> 00:07:12.410
So in other words, wherever
you're calling from,

00:07:12.410 --> 00:07:15.630
so to speak, whether you're
on Wi-Fi or on a cell,

00:07:15.630 --> 00:07:19.200
fixed, whatever, the idea
is that you can communicate,

00:07:19.200 --> 00:07:22.530
be streaming data
directly between peers.

00:07:22.530 --> 00:07:26.670
And this is, of course, far
more efficient and better

00:07:26.670 --> 00:07:28.892
for performance.

00:07:28.892 --> 00:07:30.850
So what do we need for
real-time communication?

00:07:30.850 --> 00:07:33.880
Well, obviously, we need to
be able to get audio and video

00:07:33.880 --> 00:07:36.110
from our camera and our mic.

00:07:36.110 --> 00:07:38.800
And then we need
to be able to make

00:07:38.800 --> 00:07:41.210
a connection between the
two peers, the caller

00:07:41.210 --> 00:07:42.260
and the callee.

00:07:42.260 --> 00:07:44.200
And that needs to
be able to cope

00:07:44.200 --> 00:07:48.470
with the real world of NATs
and firewalls and so on.

00:07:48.470 --> 00:07:51.690
Once we've made that connection,
we need to be able, then,

00:07:51.690 --> 00:07:54.640
have really high
performance streaming

00:07:54.640 --> 00:07:59.750
that works in this modern
world of multiple device.

00:07:59.750 --> 00:08:03.420
So audio without
jittering and video

00:08:03.420 --> 00:08:06.100
that's smooth and so
on and so on and so on.

00:08:06.100 --> 00:08:10.160
And I guess the
other part of WebRTC

00:08:10.160 --> 00:08:13.830
has also always been decided
that we could communicate

00:08:13.830 --> 00:08:15.060
arbitrary data as well.

00:08:15.060 --> 00:08:18.670
So not just audio and video,
but all types of data,

00:08:18.670 --> 00:08:20.960
binary data, text, and so on.

00:08:20.960 --> 00:08:23.380
And we're seeing some
really interesting use

00:08:23.380 --> 00:08:24.650
cases for that coming through.

00:08:24.650 --> 00:08:29.630
So for this, we have three APIs.

00:08:29.630 --> 00:08:30.950
MediaStreams.

00:08:30.950 --> 00:08:33.039
People may know it
better as getUserMedia.

00:08:33.039 --> 00:08:37.182
Has anyone here built an
app using getUserMedia?

00:08:37.182 --> 00:08:37.890
Oh, that's great.

00:08:37.890 --> 00:08:40.280
That's like the most
I've seen in an audience.

00:08:40.280 --> 00:08:42.230
That's fantastic.

00:08:42.230 --> 00:08:45.010
And then, of course, we
have RTCPeerConnection

00:08:45.010 --> 00:08:47.930
and RTCDataChannel, which
I'll talk about a bit.

00:08:47.930 --> 00:08:52.840
So on one level, this is
kind of a simple concept.

00:08:52.840 --> 00:08:56.050
You get some media,
and then you plumb that

00:08:56.050 --> 00:09:00.480
into RTCPeerConnection to
get it to the other side.

00:09:00.480 --> 00:09:02.110
Once you get it
to the other side,

00:09:02.110 --> 00:09:03.860
you've got your media
stream, and then you

00:09:03.860 --> 00:09:08.940
can do something like plug
that into a video element.

00:09:08.940 --> 00:09:12.080
Of course, it's not that simple.

00:09:12.080 --> 00:09:15.430
RTCPeerConnection, the bit
in the middle, so to speak,

00:09:15.430 --> 00:09:18.040
needs to cope with
the real world,

00:09:18.040 --> 00:09:20.630
like I said, of NATs and
firewalls, and so on.

00:09:20.630 --> 00:09:23.930
And also to be able to do
clever stuff to make sure

00:09:23.930 --> 00:09:26.190
that video and audio
work really, really

00:09:26.190 --> 00:09:29.726
well across a range of devices
and a range of contexts.

00:09:29.726 --> 00:09:32.100
JAN LINDEN: Yeah, and echo
cancellation, all these things

00:09:32.100 --> 00:09:34.310
that make for a good experience.

00:09:34.310 --> 00:09:36.340
SAM DUTTON: Yeah,
there's a stack of stuff

00:09:36.340 --> 00:09:42.290
that goes on in incredible
detail in the design there.

00:09:42.290 --> 00:09:45.000
And RTCPeerConnection,
the whole of WebRTC

00:09:45.000 --> 00:09:49.070
is also designed with
security in mind.

00:09:49.070 --> 00:09:55.420
So at every stage, everything
is encrypted within the code

00:09:55.420 --> 00:09:58.150
and when you're communicating
between peers, which

00:09:58.150 --> 00:10:01.160
is kind of crucial
to this project.

00:10:01.160 --> 00:10:03.750
So if you want to have a look
at WebRTC, check this out.

00:10:03.750 --> 00:10:05.980
This is kind of the
absolute basics.

00:10:05.980 --> 00:10:08.840
We also have a kind of
full fat video chat app

00:10:08.840 --> 00:10:11.300
which is maintained by
Google, which kind of does

00:10:11.300 --> 00:10:14.180
everything and has
really verbose logging.

00:10:14.180 --> 00:10:18.250
So it's a good place to
work out what's going on.

00:10:18.250 --> 00:10:20.060
The thing about
RTCDataChannel, like I say,

00:10:20.060 --> 00:10:23.916
this is the API for other
kinds of data, arbitrary data.

00:10:23.916 --> 00:10:25.165
Imagine you're playing a game.

00:10:25.165 --> 00:10:26.748
And this is highly
simplified, but you

00:10:26.748 --> 00:10:30.840
know, you want to exchange
player positions, for example,

00:10:30.840 --> 00:10:33.960
and do that with low
latency and effectively

00:10:33.960 --> 00:10:35.170
trying for real-time.

00:10:35.170 --> 00:10:35.970
[PHONE RINGING]

00:10:35.970 --> 00:10:39.480
SAM DUTTON: Well, we have
RTCDataChannel for that.

00:10:39.480 --> 00:10:44.740
And this has exactly-- I
don't know who is ringing.

00:10:44.740 --> 00:10:46.780
Someone.

00:10:46.780 --> 00:10:50.550
So this has exactly the
same API as WebSocket.

00:10:50.550 --> 00:10:54.110
But what we're aiming for
here is really low latency,

00:10:54.110 --> 00:10:57.440
firstly because the idea is that
you're communicating directly

00:10:57.440 --> 00:10:59.370
between peers.

00:10:59.370 --> 00:11:03.170
And using the SETP
protocol means

00:11:03.170 --> 00:11:05.230
we have a lot of the
advantages of UDP.

00:11:05.230 --> 00:11:08.710
So what we can do is
optionally specify

00:11:08.710 --> 00:11:13.720
that we don't need the
connection to be reliable.

00:11:13.720 --> 00:11:16.140
In other words, if you're
exchanging player positions,

00:11:16.140 --> 00:11:19.040
it doesn't matter if you lose
some packets along the way.

00:11:19.040 --> 00:11:21.100
What you really want
is high performance.

00:11:21.100 --> 00:11:24.609
Whereas, say, for file-sharing,
you can't lose any bits.

00:11:24.609 --> 00:11:25.650
That's not going to work.

00:11:25.650 --> 00:11:28.380
So you might take a
slight hit on performance

00:11:28.380 --> 00:11:32.964
to make sure that the
transport is reliable.

00:11:32.964 --> 00:11:34.630
So again, if you want
to check this out,

00:11:34.630 --> 00:11:36.840
this is a good place to start.

00:11:36.840 --> 00:11:42.059
Just wanted to show you a really
nice app I've seen using this.

00:11:42.059 --> 00:11:43.850
I don't know if people
have seen Sharefest,

00:11:43.850 --> 00:11:46.630
but what this gives
is the ability

00:11:46.630 --> 00:11:52.637
to share files using
RTCDataChannel without having

00:11:52.637 --> 00:11:54.220
to go through an
intermediary service.

00:11:54.220 --> 00:11:57.110
So what I've done is I've
selected a file there,

00:11:57.110 --> 00:11:58.860
Sharefest gives me
a URL, and then I

00:11:58.860 --> 00:12:02.960
can do something like
post that URL to someone.

00:12:02.960 --> 00:12:07.130
And then they can open
that file at the other end.

00:12:07.130 --> 00:12:09.460
So when they come
to open a file,

00:12:09.460 --> 00:12:12.130
a peer connection will be
established between the two

00:12:12.130 --> 00:12:13.540
browsers, so to speak.

00:12:13.540 --> 00:12:16.120
And then data
transfer of the file

00:12:16.120 --> 00:12:18.590
will happen directly
between the two

00:12:18.590 --> 00:12:21.430
without, like I say, going
through an intermediary server.

00:12:21.430 --> 00:12:26.010
It's kind of interesting
stuff going on there.

00:12:26.010 --> 00:12:29.979
Perhaps a more radical project,
have people seen peerCDN?

00:12:29.979 --> 00:12:30.770
This blows me away.

00:12:30.770 --> 00:12:34.730
This is this idea of
peer-to-peer content

00:12:34.730 --> 00:12:37.390
distribution using
RTCDataChannel.

00:12:37.390 --> 00:12:39.880
So the way it works
is that you put a link

00:12:39.880 --> 00:12:43.750
to peerCDN's JavaScript at
the top of your web page.

00:12:43.750 --> 00:12:47.740
And then the way it works
is that it will try then

00:12:47.740 --> 00:12:52.140
to get assets on the
page from local peers

00:12:52.140 --> 00:12:55.140
rather than defaulting
to downloading them

00:12:55.140 --> 00:12:56.590
from the server.

00:12:56.590 --> 00:12:58.850
So yeah, it's a
kind of prototype,

00:12:58.850 --> 00:13:03.790
but it's this kind of vision for
a really different way of doing

00:13:03.790 --> 00:13:06.230
things on the web.

00:13:06.230 --> 00:13:08.770
So I kind of skipped
over getUserMedia.

00:13:08.770 --> 00:13:11.290
I just wanted to
sort of go into that

00:13:11.290 --> 00:13:13.570
in a little bit more detail.

00:13:13.570 --> 00:13:16.330
GetUserMedia is pretty
straightforward.

00:13:16.330 --> 00:13:17.060
You can see here.

00:13:17.060 --> 00:13:21.270
I mean, you call getUserMedia
on the navigator object,

00:13:21.270 --> 00:13:24.726
and you pass it a
constraints object.

00:13:24.726 --> 00:13:26.100
This is actually
really powerful.

00:13:26.100 --> 00:13:28.630
This is defining what
kind of media we want.

00:13:28.630 --> 00:13:31.240
In this example, all I'm
saying is, give me video.

00:13:31.240 --> 00:13:32.630
Just give me the default video.

00:13:32.630 --> 00:13:37.960
And then the success callback is
passed a string, which then you

00:13:37.960 --> 00:13:39.760
can do what you want with.

00:13:39.760 --> 00:13:42.460
Let's see that in
action, in fact.

00:13:42.460 --> 00:13:46.440
So yeah, I'm going to page
this call in getUserMedia.

00:13:46.440 --> 00:13:51.200
Notice that I have to explicitly
allow access to my camera

00:13:51.200 --> 00:13:51.770
there.

00:13:51.770 --> 00:13:53.040
And then, bang.

00:13:53.040 --> 00:13:55.485
We're getting video
from the-- I've

00:13:55.485 --> 00:14:00.030
got a USB camera plugged
in there, you can see.

00:14:00.030 --> 00:14:03.400
Hello, everyone.

00:14:03.400 --> 00:14:05.220
What's nice about
this, though, is

00:14:05.220 --> 00:14:06.754
when you see these--
I don't know,

00:14:06.754 --> 00:14:08.420
these APIs coming up
against each other.

00:14:08.420 --> 00:14:12.640
So in this example, we're
getting video from the camera.

00:14:12.640 --> 00:14:15.310
And let me turn around this
way, and you can actually

00:14:15.310 --> 00:14:16.296
see something.

00:14:16.296 --> 00:14:17.920
What's happening is
we're getting frame

00:14:17.920 --> 00:14:22.270
grabs from the camera, plumbing
those into a canvas elements,

00:14:22.270 --> 00:14:25.820
and then analyzing that
canvas element pixel by pixel

00:14:25.820 --> 00:14:28.550
to give us ASCII art.

00:14:28.550 --> 00:14:31.730
Which is, it's just
nice when these APIs

00:14:31.730 --> 00:14:34.710
can interact like this.

00:14:34.710 --> 00:14:37.580
Thinking about working
with constraints,

00:14:37.580 --> 00:14:40.120
we can also use
constraints to select

00:14:40.120 --> 00:14:42.700
the resolution of our camera.

00:14:42.700 --> 00:14:46.200
So-- wow, that's slow.

00:14:46.200 --> 00:14:52.410
If we go to this web
page, there we go.

00:14:52.410 --> 00:14:54.840
In fact, let's look at the
source for this on GitHub,

00:14:54.840 --> 00:14:56.580
if that'll open.

00:14:56.580 --> 00:14:58.502
You'll see, if you
can see here, I'll

00:14:58.502 --> 00:14:59.960
just bump up the
size a little bit,

00:14:59.960 --> 00:15:03.160
we've got three different
constraints objects.

00:15:03.160 --> 00:15:05.640
These are like each represent
kind of low, medium,

00:15:05.640 --> 00:15:07.480
and high res, so to speak.

00:15:07.480 --> 00:15:12.030
So when we click the button
here, we're getting 640 by 360

00:15:12.030 --> 00:15:15.365
right up to HD here,
which is-- oh, sorry, I've

00:15:15.365 --> 00:15:17.110
still got the other
one open here.

00:15:17.110 --> 00:15:20.000
So let me just close that.

00:15:20.000 --> 00:15:24.040
And then, hang on, just
pull that through again.

00:15:24.040 --> 00:15:28.170
So basically, we've got the
ability to choose resolutions.

00:15:28.170 --> 00:15:28.670
There we go.

00:15:28.670 --> 00:15:34.140
You can see I'm getting
the full HD from-- hello.

00:15:34.140 --> 00:15:35.850
Wave to the camera.

00:15:35.850 --> 00:15:37.400
This is kind of
crucial, of course,

00:15:37.400 --> 00:15:41.140
also when we're thinking
about getting media

00:15:41.140 --> 00:15:44.680
from a mobile device
and making sure

00:15:44.680 --> 00:15:49.200
that we're not overdoing
it in terms of bandwidth.

00:15:49.200 --> 00:15:52.810
We can also use constraints
to select camera sources.

00:15:52.810 --> 00:15:55.620
So let's do that now.

00:15:55.620 --> 00:16:02.390
I'm going to go for
this on the device here.

00:16:02.390 --> 00:16:06.230
In fact, let's show it on
mobile device, I think.

00:16:06.230 --> 00:16:09.810
I can actually, if we look
at-- you can come over here,

00:16:09.810 --> 00:16:10.810
and I'll show it to you.

00:16:10.810 --> 00:16:11.030
JAN LINDEN: OK.

00:16:11.030 --> 00:16:11.530
Sure.

00:16:11.530 --> 00:16:13.540
SAM DUTTON: So
basically, we can get

00:16:13.540 --> 00:16:17.730
the ID for the different
devices attached to the machine.

00:16:17.730 --> 00:16:21.205
And then we can select
different cameras,

00:16:21.205 --> 00:16:22.330
depending on which we want.

00:16:22.330 --> 00:16:25.940
And as you can imagine,
this it is kind of bizarre.

00:16:29.430 --> 00:16:33.770
This is crucial, again, for
devices like phones and slates

00:16:33.770 --> 00:16:36.010
where we obviously want to
be able to do selfie mode

00:16:36.010 --> 00:16:38.600
or kind of crowd mode.

00:16:38.600 --> 00:16:40.585
So there we go there, yeah.

00:16:40.585 --> 00:16:41.960
They're just about,
just about---

00:16:41.960 --> 00:16:43.770
JAN LINDEN: I prefer selfie.

00:16:43.770 --> 00:16:47.400
SAM DUTTON: Selfie is good.

00:16:47.400 --> 00:16:50.120
And again, this is all
done with constraints.

00:16:50.120 --> 00:16:52.090
Same with screen capture.

00:16:52.090 --> 00:16:53.890
We can do the same thing.

00:16:53.890 --> 00:16:58.580
So I'll just go out
of full-screen mode.

00:16:58.580 --> 00:17:00.770
So we've specified
in the constraints

00:17:00.770 --> 00:17:04.270
that we actually want to get
video from a screen capture.

00:17:04.270 --> 00:17:06.510
Which is slightly
ridiculous, because we're

00:17:06.510 --> 00:17:08.920
getting a screen cast of
a screen cast, but anyway.

00:17:08.920 --> 00:17:16.900
You can imagine there are
lots good use cases for that.

00:17:16.900 --> 00:17:18.150
People ask about recording.

00:17:18.150 --> 00:17:21.630
We have an API for
this coming through,

00:17:21.630 --> 00:17:23.359
being specified and implemented.

00:17:23.359 --> 00:17:26.670
MediaStream Recording for
recording audio and video.

00:17:26.670 --> 00:17:30.670
There's also the MediaStream
Image Capture API,

00:17:30.670 --> 00:17:34.410
which is kind of a
taking photos API.

00:17:34.410 --> 00:17:36.780
You can do that with
getUserMedia and Canvas.

00:17:36.780 --> 00:17:39.770
But this gives us
access-- well, is proposed

00:17:39.770 --> 00:17:42.910
to give access to stuff
like camera autofocus

00:17:42.910 --> 00:17:44.234
and zoom and so on.

00:17:44.234 --> 00:17:45.400
So I think that'll be great.

00:17:45.400 --> 00:17:49.470
Again, really good
for mobile devices.

00:17:49.470 --> 00:17:52.537
So there's a lot
about video, and I

00:17:52.537 --> 00:17:54.110
was wondering if
Jan could tell us

00:17:54.110 --> 00:17:55.694
a little bit about
the world of audio.

00:17:55.694 --> 00:17:57.776
JAN LINDEN: Yeah, what's
the deal with that audio?

00:17:57.776 --> 00:17:59.380
It's pretty much
nothing, isn't it?

00:17:59.380 --> 00:18:02.520
So let's focus on
audio a little bit.

00:18:02.520 --> 00:18:05.490
So we have a great
thing that's been around

00:18:05.490 --> 00:18:08.300
for quite a while,
the audio tag.

00:18:08.300 --> 00:18:09.857
Well supported,
very easy to use,

00:18:09.857 --> 00:18:11.190
and it takes care of everything.

00:18:11.190 --> 00:18:16.320
Loads, decodes, buffers,
and plays out your audio,

00:18:16.320 --> 00:18:17.446
and even includes a player.

00:18:17.446 --> 00:18:19.653
So you don't have to do
anything more than that line,

00:18:19.653 --> 00:18:21.030
and you can play an audio file.

00:18:21.030 --> 00:18:22.390
That's great.

00:18:22.390 --> 00:18:27.140
But there are applications
where that is just not enough.

00:18:27.140 --> 00:18:31.054
For example, precise timing
is super important in gaming

00:18:31.054 --> 00:18:32.970
and being able to handle
many different sounds

00:18:32.970 --> 00:18:36.240
at the same time and
music creation, et cetera.

00:18:36.240 --> 00:18:39.080
So we came up with
the Web Audio API.

00:18:39.080 --> 00:18:45.480
And the Web Audio API is really
just a pro audio environment

00:18:45.480 --> 00:18:46.800
in the browser.

00:18:46.800 --> 00:18:49.550
And it involves a lot of stuff.

00:18:49.550 --> 00:18:54.754
So let's start with just
a look at what you can do.

00:18:54.754 --> 00:18:56.670
As I said, you can do
timing, but you can also

00:18:56.670 --> 00:18:59.140
do cool things
like create audio.

00:18:59.140 --> 00:19:02.950
So Chris here has
built a synthesizer.

00:19:02.950 --> 00:19:07.670
And all this, the audio
is created by Web Audio.

00:19:07.670 --> 00:19:10.820
And with all the controls,
you can switch things

00:19:10.820 --> 00:19:15.320
on with perfect timing
at any time you want.

00:19:15.320 --> 00:19:20.710
And some of the
things-- there you go.

00:19:20.710 --> 00:19:23.430
[INAUDIBLE]

00:19:23.430 --> 00:19:25.740
CHRIS WILSON: I'm not
going to stay up here.

00:19:25.740 --> 00:19:27.510
JAN LINDEN: All right.

00:19:27.510 --> 00:19:28.740
So Web Audio can do that.

00:19:28.740 --> 00:19:32.490
So we just saw an example
of creating audio.

00:19:32.490 --> 00:19:33.730
We can do timing.

00:19:33.730 --> 00:19:35.570
We can also analyze audio data.

00:19:35.570 --> 00:19:40.480
Super nice in applications
are, for example,

00:19:40.480 --> 00:19:42.340
visualizers and things.

00:19:42.340 --> 00:19:45.165
And even if you still
want that old-- that

00:19:45.165 --> 00:19:47.290
long file that you want to
download with audio tag,

00:19:47.290 --> 00:19:49.150
then you can just plumb
that into Web Audio,

00:19:49.150 --> 00:19:53.130
and you get the ability to add
visualizers, effect, et cetera

00:19:53.130 --> 00:19:54.030
on top of that.

00:19:54.030 --> 00:19:58.900
So audio tag can come as
a way of loading audio

00:19:58.900 --> 00:20:01.200
into web audio.

00:20:01.200 --> 00:20:03.790
So I'm not going to go into all
the details about Web Audio.

00:20:03.790 --> 00:20:05.334
It's just such a powerful tool.

00:20:05.334 --> 00:20:07.000
And what's really
nice, all these things

00:20:07.000 --> 00:20:11.170
are implemented in native
code in the browser.

00:20:11.170 --> 00:20:13.400
So you don't have to
do this in JavaScript.

00:20:13.400 --> 00:20:16.900
In JavaScript, you have a
nice, node-based pipeline

00:20:16.900 --> 00:20:21.790
where you just plug in things
and easily put it together.

00:20:21.790 --> 00:20:23.480
But it's really pro audio.

00:20:23.480 --> 00:20:25.050
So for example,
a good example is

00:20:25.050 --> 00:20:29.540
that we can have input to
output in five milliseconds.

00:20:29.540 --> 00:20:34.310
And I'll give an example of
how that matters in a second.

00:20:34.310 --> 00:20:37.190
The support for Web Audio
is also really great.

00:20:37.190 --> 00:20:43.060
It's really a pleasure to note
that Firefox just two weeks ago

00:20:43.060 --> 00:20:46.580
released Web Audio on
both desktop and Android.

00:20:46.580 --> 00:20:51.370
This means that we have Web
Audio in Chrome, Safari,

00:20:51.370 --> 00:20:57.350
Firefox, on desktop, all desktop
platforms, on Android, and iOS.

00:20:57.350 --> 00:21:00.840
So-- and Opera, sorry, sorry.

00:21:00.840 --> 00:21:04.940
Yeah, that's so new that
it's not even in my mind.

00:21:04.940 --> 00:21:07.890
And it's not even on our slides.

00:21:07.890 --> 00:21:10.810
It's your fault.

00:21:10.810 --> 00:21:13.390
OK, so one thing that's
really, really exciting,

00:21:13.390 --> 00:21:15.765
and we started with this, is
that we have all these media

00:21:15.765 --> 00:21:17.450
APIs and that they
work together.

00:21:17.450 --> 00:21:20.180
And we can do really,
really cool things together.

00:21:20.180 --> 00:21:23.380
And one example is how
you hook up getUserMedia

00:21:23.380 --> 00:21:26.160
that Sam talked about and
showed video examples.

00:21:26.160 --> 00:21:29.080
But you can obviously use that
to hook up your microphone

00:21:29.080 --> 00:21:32.100
and get an audio stream
and do something with it.

00:21:32.100 --> 00:21:34.960
And a great thing you
can do is you can plug it

00:21:34.960 --> 00:21:36.820
in as a source in Web Audio.

00:21:36.820 --> 00:21:39.882
So you get your
microphone input.

00:21:39.882 --> 00:21:41.090
That's a source in Web Audio.

00:21:41.090 --> 00:21:43.410
Then you can apply anything
you want in Web Audio.

00:21:43.410 --> 00:21:45.970
For example, one
great example would

00:21:45.970 --> 00:21:48.820
be you plug in your guitar,
you plug it in here.

00:21:48.820 --> 00:21:51.130
And the audio that
comes into Web Audio,

00:21:51.130 --> 00:21:53.170
you can apply
filters and effects.

00:21:53.170 --> 00:21:55.450
And then you play it out
five milliseconds later.

00:21:55.450 --> 00:22:00.470
So basically, you have an
effects box in your browser.

00:22:00.470 --> 00:22:02.960
But let's not only
talk about this.

00:22:02.960 --> 00:22:06.910
Let's show something and
listen to something here.

00:22:06.910 --> 00:22:08.730
Many of you have probably
seen this before.

00:22:08.730 --> 00:22:13.512
Chris here, he built a vocoder,
which is a great instrument,

00:22:13.512 --> 00:22:16.370
for I/O last year.

00:22:16.370 --> 00:22:18.100
And since then, he-- oh, sorry.

00:22:18.100 --> 00:22:20.652
I should-- since then, he has--

00:22:20.652 --> 00:22:26.620
[VOCODER PLAYS]

00:22:26.620 --> 00:22:32.560
So anyway, so since then,
he has added live input.

00:22:32.560 --> 00:22:34.560
That's what I was talking
about in getUserMedia.

00:22:34.560 --> 00:22:37.227
But also now, this
works on mobile.

00:22:37.227 --> 00:22:38.810
CHRIS WILSON: Can
you hold the camera?

00:22:38.810 --> 00:22:40.518
JAN LINDEN: See if we
can get the camera.

00:22:45.405 --> 00:22:47.030
CHRIS WILSON: Hello,
Chrome Dev Summit.

00:22:47.030 --> 00:22:47.738
JAN LINDEN: Oops.

00:22:50.200 --> 00:22:51.950
CHRIS WILSON: [VOCODER
VOICE] There we go.

00:22:51.950 --> 00:22:53.902
Hello, Chrome Dev Summit.

00:23:00.884 --> 00:23:02.300
JAN LINDEN: Live
from the Nexus 5.

00:23:02.300 --> 00:23:04.740
CHRIS WILSON: I did also want
to say the synthesizer also

00:23:04.740 --> 00:23:07.150
works quite well even on iOS.

00:23:07.150 --> 00:23:09.530
There are a couple of issues
I'm still working through

00:23:09.530 --> 00:23:10.340
with Firefox.

00:23:10.340 --> 00:23:12.270
But it really shows
that these things

00:23:12.270 --> 00:23:14.240
work across mobile and desktop.

00:23:14.240 --> 00:23:17.300
It's not just on the desktop.

00:23:17.300 --> 00:23:18.950
JAN LINDEN: Cool.

00:23:18.950 --> 00:23:21.710
We are not in the right place.

00:23:27.510 --> 00:23:29.570
OK.

00:23:29.570 --> 00:23:32.220
Next thing, when you have the
audio in through getUserMedia

00:23:32.220 --> 00:23:36.730
to Web Audio, then you want to
plug it into PeerConnection.

00:23:36.730 --> 00:23:39.450
And then you can talk to
someone on the other side

00:23:39.450 --> 00:23:42.050
through a WebRTC call
and apply the effects.

00:23:42.050 --> 00:23:45.780
Next thing you want to do
there is apply these effects

00:23:45.780 --> 00:23:48.150
on the output as well.

00:23:48.150 --> 00:23:49.690
That's in the works.

00:23:49.690 --> 00:23:52.160
So you can, for example, do
specialization of the output

00:23:52.160 --> 00:23:53.480
from a WebRTC call.

00:23:57.330 --> 00:23:59.640
OK, Chris.

00:23:59.640 --> 00:24:02.280
Another great thing
that we need for audio

00:24:02.280 --> 00:24:05.530
is being able to not only use
the keyboard and stuff here,

00:24:05.530 --> 00:24:10.890
actually be able to connect
media devices, like a synth.

00:24:10.890 --> 00:24:13.477
Or let's look at--

00:24:13.477 --> 00:24:15.060
CHRIS WILSON: You
did notice before, I

00:24:15.060 --> 00:24:18.690
was playing this keyboard that's
connected through the Web MIDI

00:24:18.690 --> 00:24:20.230
API.

00:24:20.230 --> 00:24:24.122
But we also have a couple
other apps that we've-- oh.

00:24:24.122 --> 00:24:25.900
JAN LINDEN: Oh, the audio?

00:24:25.900 --> 00:24:28.140
CHRIS WILSON: Plug
the audio back in.

00:24:28.140 --> 00:24:32.200
I knew we had
something else coming.

00:24:32.200 --> 00:24:33.625
There we go.

00:24:33.625 --> 00:24:35.680
[MUSIC PLAYING}

00:24:35.680 --> 00:24:38.672
JAN LINDEN: OK, dance.

00:24:38.672 --> 00:24:39.255
I won't dance.

00:24:42.330 --> 00:24:44.830
CHRIS WILSON: All right, they
said they were going to dance.

00:24:47.490 --> 00:24:48.740
I just kind of looked--

00:24:48.740 --> 00:24:50.312
JAN LINDEN: OK,
where's the music?

00:24:50.312 --> 00:24:51.635
That was the deal.

00:24:51.635 --> 00:24:52.593
CHRIS WILSON: The key--

00:24:52.593 --> 00:24:54.134
JAN LINDEN: He believed this.

00:24:54.134 --> 00:24:56.050
CHRIS WILSON: It's
probably better they don't.

00:24:56.050 --> 00:24:57.780
The real key here,
though, is that you really

00:24:57.780 --> 00:24:59.460
need-- for a lot of
audio applications,

00:24:59.460 --> 00:25:02.380
you need this very hands-on
controller experience.

00:25:02.380 --> 00:25:05.020
And I could do things like,
you know, shuttle through here

00:25:05.020 --> 00:25:08.035
and find a particular
point, and set a queue.

00:25:10.780 --> 00:25:14.112
That kind of stuff.

00:25:14.112 --> 00:25:16.030
There you go.

00:25:16.030 --> 00:25:17.380
SAM DUTTON: You got your dance.

00:25:17.380 --> 00:25:19.120
JAN LINDEN: OK.

00:25:19.120 --> 00:25:20.830
We are quickly running
out of time here.

00:25:20.830 --> 00:25:25.620
So let's skip to some
other important things

00:25:25.620 --> 00:25:28.670
for the web and
media on the web.

00:25:28.670 --> 00:25:31.210
One thing that we really think
is super important for this

00:25:31.210 --> 00:25:35.090
to really work for the open web
is open and free video codecs.

00:25:35.090 --> 00:25:37.310
So we have developed
VP8, and that's

00:25:37.310 --> 00:25:39.550
been out for several
years, that really

00:25:39.550 --> 00:25:41.080
address what you need today.

00:25:41.080 --> 00:25:42.380
But we didn't stop there.

00:25:42.380 --> 00:25:45.790
Now we also have VP9, which
is the next generation that

00:25:45.790 --> 00:25:49.212
saves more bits at a
really good quality.

00:25:49.212 --> 00:25:51.170
So you can look here at
the bars in the middle.

00:25:51.170 --> 00:25:53.820
So we compare H.264 and VP9.

00:25:53.820 --> 00:25:55.570
And you see the bar
is the bit rate,

00:25:55.570 --> 00:25:58.460
how much we save all the
time for the same quality.

00:25:58.460 --> 00:26:02.240
This one's from Google
I/O. So really a great job

00:26:02.240 --> 00:26:03.490
from our engineers to do this.

00:26:03.490 --> 00:26:04.864
And this is open
and free and can

00:26:04.864 --> 00:26:09.710
be used by anyone at no cost.

00:26:09.710 --> 00:26:12.850
And the tools.

00:26:12.850 --> 00:26:15.170
Other important things for
a full media experience

00:26:15.170 --> 00:26:18.150
is being able to, for example,
do adaptive streaming.

00:26:18.150 --> 00:26:20.140
Your bandwidth is
not always the same.

00:26:20.140 --> 00:26:22.950
You need to be able to handle
changes in your bandwidth.

00:26:22.950 --> 00:26:24.770
And the media source extensions.

00:26:24.770 --> 00:26:27.560
One of things they
do is allow for that.

00:26:27.560 --> 00:26:30.900
We also have encrypted
media extensions

00:26:30.900 --> 00:26:35.910
that make it possible to
handle content protection.

00:26:35.910 --> 00:26:39.750
And then I leave for
you for things like--

00:26:39.750 --> 00:26:40.660
SAM DUTTON: Yeah.

00:26:40.660 --> 00:26:41.310
So I've got--

00:26:41.310 --> 00:26:42.268
JAN LINDEN: One minute.

00:26:42.268 --> 00:26:43.980
SAM DUTTON: A few minutes left.

00:26:43.980 --> 00:26:46.270
Anyway, we've got
a little bit extra.

00:26:46.270 --> 00:26:49.056
So yeah, we've got great
support for audio and video

00:26:49.056 --> 00:26:51.250
on a range of platforms.

00:26:51.250 --> 00:26:54.300
Also thinking about, like,
captions and subtitles and

00:26:54.300 --> 00:26:56.170
accessibility.

00:26:56.170 --> 00:26:58.531
And we've got great
support for this as well.

00:26:58.531 --> 00:27:00.030
Just looking, I
don't know if people

00:27:00.030 --> 00:27:01.860
have seen the track element.

00:27:01.860 --> 00:27:07.190
This is kind of a simple way
of adding subtitles or captions

00:27:07.190 --> 00:27:10.500
to your applications.

00:27:10.500 --> 00:27:12.911
Chug, chug, chug, OK.

00:27:12.911 --> 00:27:13.410
There we go.

00:27:13.410 --> 00:27:13.810
[VIDEO PLAYBACK]

00:27:13.810 --> 00:27:14.630
-The web is always changing.

00:27:14.630 --> 00:27:15.320
[END VIDEO PLAYBACK]

00:27:15.320 --> 00:27:16.944
SAM DUTTON: Yeah,
and you can see there

00:27:16.944 --> 00:27:20.294
that we've got track subtitles
rendered over the video.

00:27:20.294 --> 00:27:22.460
And then I'm listening out
for the cue change events

00:27:22.460 --> 00:27:26.260
and then plunking that
stuff in a div there.

00:27:26.260 --> 00:27:30.790
So just a really simple way to
make your video more accessible

00:27:30.790 --> 00:27:32.580
and to add that stuff.

00:27:32.580 --> 00:27:34.920
The way you do it is
that you add a track

00:27:34.920 --> 00:27:37.800
element as a child
of the video element.

00:27:37.800 --> 00:27:40.510
And then you point
that to a file

00:27:40.510 --> 00:27:43.430
that looks like this,
which is just essentially

00:27:43.430 --> 00:27:45.390
some information
about timing, and then

00:27:45.390 --> 00:27:49.390
the text of, in this
case, the subtitles.

00:27:49.390 --> 00:27:53.610
There's also some information
about the way the subtitles,

00:27:53.610 --> 00:27:56.350
kind of hints about how they
might be rendered there.

00:27:56.350 --> 00:27:57.940
This little link
down the bottom here,

00:27:57.940 --> 00:28:00.210
actually, I think
this is amazing.

00:28:00.210 --> 00:28:02.440
Now implemented in
Chrome is the ability

00:28:02.440 --> 00:28:04.590
to do what's called
in-band WebVT.

00:28:04.590 --> 00:28:06.540
This gives us the
ability to bundle

00:28:06.540 --> 00:28:10.080
a track file with a
video file in order

00:28:10.080 --> 00:28:13.360
to be able to distribute
one file that contains

00:28:13.360 --> 00:28:21.520
the video and the whole thing
in one package, in one file.

00:28:21.520 --> 00:28:23.800
So we've kind of run
out of time here.

00:28:23.800 --> 00:28:28.830
But I'd just like to go just
to one more demo that I think

00:28:28.830 --> 00:28:31.630
that really, for me,
sums up how far we've

00:28:31.630 --> 00:28:34.100
come with audio and
video on the web.

00:28:34.100 --> 00:28:37.190
JAN LINDEN: And here,
you'll get the real dance.

00:28:37.190 --> 00:28:41.780
SAM DUTTON: Yeah, this
slightly weird video shows--

00:28:41.780 --> 00:28:43.650
what we've got
here is two videos

00:28:43.650 --> 00:28:47.120
encoded with alpha
transparency information.

00:28:47.120 --> 00:28:49.680
And you know, these are
just video elements.

00:28:49.680 --> 00:28:52.210
So-- that is weird.

00:28:52.210 --> 00:28:54.690
So we have the ability to do,
you know, like CSS filters.

00:28:54.690 --> 00:28:55.867
These are just elements.

00:28:55.867 --> 00:28:57.450
We can double-click
on these, and I've

00:28:57.450 --> 00:29:00.865
got a little CSS animation.

00:29:00.865 --> 00:29:02.480
Double-click the background.

00:29:02.480 --> 00:29:05.299
You know, we have a video
playing in the background.

00:29:05.299 --> 00:29:07.840
Actually, these are, like, basic
sort of green screen videos.

00:29:07.840 --> 00:29:12.450
But actually, the rendering
is really stunning.

00:29:12.450 --> 00:29:14.280
So yeah, I'm just,
I don't know, really

00:29:14.280 --> 00:29:16.090
pleased to see that stuff.

00:29:16.090 --> 00:29:17.840
So, yeah, please.

00:29:17.840 --> 00:29:21.180
We really, really
look forward to seeing

00:29:21.180 --> 00:29:23.070
what everyone makes
of these APIs.

00:29:23.070 --> 00:29:25.990
Because I think they are a
great feat of engineering

00:29:25.990 --> 00:29:27.900
and incredibly powerful
across platforms.

00:29:27.900 --> 00:29:30.150
JAN LINDEN: We only got to
touch on a few things here,

00:29:30.150 --> 00:29:31.620
but there's much more, so--

00:29:31.620 --> 00:29:33.120
SAM DUTTON: OK,
thank you very much.

00:29:33.120 --> 00:29:37.440
[APPLAUSE]

