WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.460
[Music]

00:00:06.460 --> 00:00:06.470
[Music]
 

00:00:06.470 --> 00:00:09.560
[Music]
my name is dawn I work in the Android

00:00:09.560 --> 00:00:09.570
my name is dawn I work in the Android
 

00:00:09.570 --> 00:00:12.110
my name is dawn I work in the Android
dev rel team and I'm here today to talk

00:00:12.110 --> 00:00:12.120
dev rel team and I'm here today to talk
 

00:00:12.120 --> 00:00:14.089
dev rel team and I'm here today to talk
to you about low latency audio on

00:00:14.089 --> 00:00:14.099
to you about low latency audio on
 

00:00:14.099 --> 00:00:19.189
to you about low latency audio on
Android so why is auto latency important

00:00:19.189 --> 00:00:19.199
Android so why is auto latency important
 

00:00:19.199 --> 00:00:22.429
Android so why is auto latency important
well there are a whole raft of use cases

00:00:22.429 --> 00:00:22.439
well there are a whole raft of use cases
 

00:00:22.439 --> 00:00:26.029
well there are a whole raft of use cases
where the audio latency is directly

00:00:26.029 --> 00:00:26.039
where the audio latency is directly
 

00:00:26.039 --> 00:00:29.529
where the audio latency is directly
proportional to the user experience so

00:00:29.529 --> 00:00:29.539
proportional to the user experience so
 

00:00:29.539 --> 00:00:33.500
proportional to the user experience so
this can be in games where you tap on

00:00:33.500 --> 00:00:33.510
this can be in games where you tap on
 

00:00:33.510 --> 00:00:35.799
this can be in games where you tap on
the screen and you hear a sound

00:00:35.799 --> 00:00:35.809
the screen and you hear a sound
 

00:00:35.809 --> 00:00:38.869
the screen and you hear a sound
particularly in rhythm games like Guitar

00:00:38.869 --> 00:00:38.879
particularly in rhythm games like Guitar
 

00:00:38.879 --> 00:00:41.270
particularly in rhythm games like Guitar
Hero style games where you're tapping in

00:00:41.270 --> 00:00:41.280
Hero style games where you're tapping in
 

00:00:41.280 --> 00:00:44.150
Hero style games where you're tapping in
response to some rhythmic event and you

00:00:44.150 --> 00:00:44.160
response to some rhythmic event and you
 

00:00:44.160 --> 00:00:46.549
response to some rhythmic event and you
need to have audible feedback as quickly

00:00:46.549 --> 00:00:46.559
need to have audible feedback as quickly
 

00:00:46.559 --> 00:00:48.560
need to have audible feedback as quickly
as possible like the longer the delay

00:00:48.560 --> 00:00:48.570
as possible like the longer the delay
 

00:00:48.570 --> 00:00:50.479
as possible like the longer the delay
between tapping on the screen and

00:00:50.479 --> 00:00:50.489
between tapping on the screen and
 

00:00:50.489 --> 00:00:52.220
between tapping on the screen and
hearing a sound the worse the user

00:00:52.220 --> 00:00:52.230
hearing a sound the worse the user
 

00:00:52.230 --> 00:00:56.479
hearing a sound the worse the user
experience also in DJing apps you're

00:00:56.479 --> 00:00:56.489
experience also in DJing apps you're
 

00:00:56.489 --> 00:00:58.010
experience also in DJing apps you're
you're tapping on the screen and

00:00:58.010 --> 00:00:58.020
you're tapping on the screen and
 

00:00:58.020 --> 00:01:00.290
you're tapping on the screen and
manipulating audio and you expect that

00:01:00.290 --> 00:01:00.300
manipulating audio and you expect that
 

00:01:00.300 --> 00:01:02.689
manipulating audio and you expect that
audio manipulation to happen in real

00:01:02.689 --> 00:01:02.699
audio manipulation to happen in real
 

00:01:02.699 --> 00:01:05.750
audio manipulation to happen in real
time karaoke

00:01:05.750 --> 00:01:05.760
time karaoke
 

00:01:05.760 --> 00:01:08.450
time karaoke
where you've got an input which is your

00:01:08.450 --> 00:01:08.460
where you've got an input which is your
 

00:01:08.460 --> 00:01:10.640
where you've got an input which is your
voice and generally you're listening to

00:01:10.640 --> 00:01:10.650
voice and generally you're listening to
 

00:01:10.650 --> 00:01:13.789
voice and generally you're listening to
a backing track and also your own voice

00:01:13.789 --> 00:01:13.799
a backing track and also your own voice
 

00:01:13.799 --> 00:01:16.490
a backing track and also your own voice
so if the delay between you singing and

00:01:16.490 --> 00:01:16.500
so if the delay between you singing and
 

00:01:16.500 --> 00:01:19.070
so if the delay between you singing and
hearing your own voice is too long then

00:01:19.070 --> 00:01:19.080
hearing your own voice is too long then
 

00:01:19.080 --> 00:01:21.469
hearing your own voice is too long then
it sounds awful

00:01:21.469 --> 00:01:21.479
it sounds awful
 

00:01:21.479 --> 00:01:25.730
it sounds awful
also in VR we have objects which make

00:01:25.730 --> 00:01:25.740
also in VR we have objects which make
 

00:01:25.740 --> 00:01:28.520
also in VR we have objects which make
sound in a virtual world and if that

00:01:28.520 --> 00:01:28.530
sound in a virtual world and if that
 

00:01:28.530 --> 00:01:30.469
sound in a virtual world and if that
sound doesn't follow you around as your

00:01:30.469 --> 00:01:30.479
sound doesn't follow you around as your
 

00:01:30.479 --> 00:01:32.899
sound doesn't follow you around as your
your head moves in this environment then

00:01:32.899 --> 00:01:32.909
your head moves in this environment then
 

00:01:32.909 --> 00:01:36.649
your head moves in this environment then
it kind of distorts the the reality and

00:01:36.649 --> 00:01:36.659
it kind of distorts the the reality and
 

00:01:36.659 --> 00:01:38.510
it kind of distorts the the reality and
lastly of course there's a whole load of

00:01:38.510 --> 00:01:38.520
lastly of course there's a whole load of
 

00:01:38.520 --> 00:01:41.300
lastly of course there's a whole load of
apps for live performance synthesizers

00:01:41.300 --> 00:01:41.310
apps for live performance synthesizers
 

00:01:41.310 --> 00:01:44.539
apps for live performance synthesizers
drum machines looping apps you know

00:01:44.539 --> 00:01:44.549
drum machines looping apps you know
 

00:01:44.549 --> 00:01:47.990
drum machines looping apps you know
anything which you you press a key and

00:01:47.990 --> 00:01:48.000
anything which you you press a key and
 

00:01:48.000 --> 00:01:51.550
anything which you you press a key and
make a sound you need low latency audio

00:01:51.550 --> 00:01:51.560
make a sound you need low latency audio
 

00:01:51.560 --> 00:01:54.950
make a sound you need low latency audio
so with this in mind we built a library

00:01:54.950 --> 00:01:54.960
so with this in mind we built a library
 

00:01:54.960 --> 00:01:56.959
so with this in mind we built a library
to help developers build these kind of

00:01:56.959 --> 00:01:56.969
to help developers build these kind of
 

00:01:56.969 --> 00:02:00.080
to help developers build these kind of
apps is called oboe and it's available

00:02:00.080 --> 00:02:00.090
apps is called oboe and it's available
 

00:02:00.090 --> 00:02:02.810
apps is called oboe and it's available
on github now we just launched version 1

00:02:02.810 --> 00:02:02.820
on github now we just launched version 1
 

00:02:02.820 --> 00:02:05.899
on github now we just launched version 1
so its production ready able to be

00:02:05.899 --> 00:02:05.909
so its production ready able to be
 

00:02:05.909 --> 00:02:10.040
so its production ready able to be
included in your apps today and the way

00:02:10.040 --> 00:02:10.050
included in your apps today and the way
 

00:02:10.050 --> 00:02:12.979
included in your apps today and the way
it works is under the hood it uses the a

00:02:12.979 --> 00:02:12.989
it works is under the hood it uses the a
 

00:02:12.989 --> 00:02:13.670
it works is under the hood it uses the a
audio

00:02:13.670 --> 00:02:13.680
audio
 

00:02:13.680 --> 00:02:17.479
audio
API on API 27 and above which is the new

00:02:17.479 --> 00:02:17.489
API on API 27 and above which is the new
 

00:02:17.489 --> 00:02:20.179
API on API 27 and above which is the new
high performance low latency audio

00:02:20.179 --> 00:02:20.189
high performance low latency audio
 

00:02:20.189 --> 00:02:24.110
high performance low latency audio
introduced in Oreo and on all the

00:02:24.110 --> 00:02:24.120
introduced in Oreo and on all the
 

00:02:24.120 --> 00:02:27.559
introduced in Oreo and on all the
devices it uses opensl es so basically

00:02:27.559 --> 00:02:27.569
devices it uses opensl es so basically
 

00:02:27.569 --> 00:02:30.229
devices it uses opensl es so basically
the idea is provide a simple easy to use

00:02:30.229 --> 00:02:30.239
the idea is provide a simple easy to use
 

00:02:30.239 --> 00:02:33.500
the idea is provide a simple easy to use
API which works across the widest range

00:02:33.500 --> 00:02:33.510
API which works across the widest range
 

00:02:33.510 --> 00:02:39.830
API which works across the widest range
of devices so rather than we talk about

00:02:39.830 --> 00:02:39.840
of devices so rather than we talk about
 

00:02:39.840 --> 00:02:41.509
of devices so rather than we talk about
this API I thought it'd be fun to try

00:02:41.509 --> 00:02:41.519
this API I thought it'd be fun to try
 

00:02:41.519 --> 00:02:44.869
this API I thought it'd be fun to try
and build a musical instrument in 17

00:02:44.869 --> 00:02:44.879
and build a musical instrument in 17
 

00:02:44.879 --> 00:02:48.800
and build a musical instrument in 17
minutes and 23 seconds so before I start

00:02:48.800 --> 00:02:48.810
minutes and 23 seconds so before I start
 

00:02:48.810 --> 00:02:50.119
minutes and 23 seconds so before I start
that I'm just going to explain the

00:02:50.119 --> 00:02:50.129
that I'm just going to explain the
 

00:02:50.129 --> 00:02:51.470
that I'm just going to explain the
architecture so it kind of makes sense

00:02:51.470 --> 00:02:51.480
architecture so it kind of makes sense
 

00:02:51.480 --> 00:02:53.929
architecture so it kind of makes sense
when I'm in the code so we have an app

00:02:53.929 --> 00:02:53.939
when I'm in the code so we have an app
 

00:02:53.939 --> 00:02:57.500
when I'm in the code so we have an app
and I'm gonna build the audio engine

00:02:57.500 --> 00:02:57.510
and I'm gonna build the audio engine
 

00:02:57.510 --> 00:03:00.259
and I'm gonna build the audio engine
part of this app this audio engine is

00:03:00.259 --> 00:03:00.269
part of this app this audio engine is
 

00:03:00.269 --> 00:03:02.179
part of this app this audio engine is
going to be responsible for creating an

00:03:02.179 --> 00:03:02.189
going to be responsible for creating an
 

00:03:02.189 --> 00:03:04.670
going to be responsible for creating an
audio stream that's provided by the oboe

00:03:04.670 --> 00:03:04.680
audio stream that's provided by the oboe
 

00:03:04.680 --> 00:03:06.890
audio stream that's provided by the oboe
library and we're going to be passing

00:03:06.890 --> 00:03:06.900
library and we're going to be passing
 

00:03:06.900 --> 00:03:08.780
library and we're going to be passing
audio frames of data into this audio

00:03:08.780 --> 00:03:08.790
audio frames of data into this audio
 

00:03:08.790 --> 00:03:11.869
audio frames of data into this audio
stream ultimately this stream is

00:03:11.869 --> 00:03:11.879
stream ultimately this stream is
 

00:03:11.879 --> 00:03:15.020
stream ultimately this stream is
responsible for putting data out of the

00:03:15.020 --> 00:03:15.030
responsible for putting data out of the
 

00:03:15.030 --> 00:03:18.949
responsible for putting data out of the
audio device in this case it will be the

00:03:18.949 --> 00:03:18.959
audio device in this case it will be the
 

00:03:18.959 --> 00:03:21.710
audio device in this case it will be the
three and a half mil jack on this pixel

00:03:21.710 --> 00:03:21.720
three and a half mil jack on this pixel
 

00:03:21.720 --> 00:03:26.599
three and a half mil jack on this pixel
excel phone now every time the audio

00:03:26.599 --> 00:03:26.609
excel phone now every time the audio
 

00:03:26.609 --> 00:03:29.629
excel phone now every time the audio
device needs more information it's going

00:03:29.629 --> 00:03:29.639
device needs more information it's going
 

00:03:29.639 --> 00:03:31.309
device needs more information it's going
to give us a call back so we get this

00:03:31.309 --> 00:03:31.319
to give us a call back so we get this
 

00:03:31.319 --> 00:03:34.129
to give us a call back so we get this
call back loop of hey I need more more

00:03:34.129 --> 00:03:34.139
call back loop of hey I need more more
 

00:03:34.139 --> 00:03:36.319
call back loop of hey I need more more
audio data and our audio engine is going

00:03:36.319 --> 00:03:36.329
audio data and our audio engine is going
 

00:03:36.329 --> 00:03:39.409
audio data and our audio engine is going
to be passing frames of audio data into

00:03:39.409 --> 00:03:39.419
to be passing frames of audio data into
 

00:03:39.419 --> 00:03:43.610
to be passing frames of audio data into
the audio stream for some form of

00:03:43.610 --> 00:03:43.620
the audio stream for some form of
 

00:03:43.620 --> 00:03:47.749
the audio stream for some form of
control we're going to monitor tap

00:03:47.749 --> 00:03:47.759
control we're going to monitor tap
 

00:03:47.759 --> 00:03:49.460
control we're going to monitor tap
events on the screen so when you tap

00:03:49.460 --> 00:03:49.470
events on the screen so when you tap
 

00:03:49.470 --> 00:03:51.110
events on the screen so when you tap
down the sound will come on when you

00:03:51.110 --> 00:03:51.120
down the sound will come on when you
 

00:03:51.120 --> 00:03:54.619
down the sound will come on when you
lift up sound will go off okay this

00:03:54.619 --> 00:03:54.629
lift up sound will go off okay this
 

00:03:54.629 --> 00:03:56.629
lift up sound will go off okay this
works about 50% at the time of rehearsal

00:03:56.629 --> 00:03:56.639
works about 50% at the time of rehearsal
 

00:03:56.639 --> 00:04:01.249
works about 50% at the time of rehearsal
so you know the see what happens okay

00:04:01.249 --> 00:04:01.259
so you know the see what happens okay
 

00:04:01.259 --> 00:04:07.369
so you know the see what happens okay
first problem I need to log in okay can

00:04:07.369 --> 00:04:07.379
first problem I need to log in okay can
 

00:04:07.379 --> 00:04:15.800
first problem I need to log in okay can
you see my screen fantastic

00:04:15.800 --> 00:04:15.810
you see my screen fantastic
 

00:04:15.810 --> 00:04:20.539
you see my screen fantastic
okay so I'm just gonna run the app so

00:04:20.539 --> 00:04:20.549
okay so I'm just gonna run the app so
 

00:04:20.549 --> 00:04:23.810
okay so I'm just gonna run the app so
I've kind of got a very simple shell of

00:04:23.810 --> 00:04:23.820
I've kind of got a very simple shell of
 

00:04:23.820 --> 00:04:25.370
I've kind of got a very simple shell of
an app it doesn't really do anything at

00:04:25.370 --> 00:04:25.380
an app it doesn't really do anything at
 

00:04:25.380 --> 00:04:26.629
an app it doesn't really do anything at
the moment but it just has a few little

00:04:26.629 --> 00:04:26.639
the moment but it just has a few little
 

00:04:26.639 --> 00:04:28.400
the moment but it just has a few little
shortcuts that make it possible for me

00:04:28.400 --> 00:04:28.410
shortcuts that make it possible for me
 

00:04:28.410 --> 00:04:30.350
shortcuts that make it possible for me
to do this in a very short short amount

00:04:30.350 --> 00:04:30.360
to do this in a very short short amount
 

00:04:30.360 --> 00:04:33.440
to do this in a very short short amount
of time so I will just run the app on

00:04:33.440 --> 00:04:33.450
of time so I will just run the app on
 

00:04:33.450 --> 00:04:36.710
of time so I will just run the app on
this pixel excel and hopefully you'll be

00:04:36.710 --> 00:04:36.720
this pixel excel and hopefully you'll be
 

00:04:36.720 --> 00:04:41.270
this pixel excel and hopefully you'll be
able to see that it does nothing so here

00:04:41.270 --> 00:04:41.280
able to see that it does nothing so here
 

00:04:41.280 --> 00:04:41.720
able to see that it does nothing so here
we go

00:04:41.720 --> 00:04:41.730
we go
 

00:04:41.730 --> 00:04:44.300
we go
here's the app and when I tap on the

00:04:44.300 --> 00:04:44.310
here's the app and when I tap on the
 

00:04:44.310 --> 00:04:46.580
here's the app and when I tap on the
screen nothing happens no sound comes

00:04:46.580 --> 00:04:46.590
screen nothing happens no sound comes
 

00:04:46.590 --> 00:04:48.920
screen nothing happens no sound comes
out you know it's it's non-functional I

00:04:48.920 --> 00:04:48.930
out you know it's it's non-functional I
 

00:04:48.930 --> 00:04:50.330
out you know it's it's non-functional I
just want you to know that there's no

00:04:50.330 --> 00:04:50.340
just want you to know that there's no
 

00:04:50.340 --> 00:04:54.520
just want you to know that there's no
smoke and mirrors it is genuinely live

00:04:54.520 --> 00:04:54.530
 

00:04:54.530 --> 00:04:59.150
Thank You Glenn okay so we're in our

00:04:59.150 --> 00:04:59.160
Thank You Glenn okay so we're in our
 

00:04:59.160 --> 00:05:01.340
Thank You Glenn okay so we're in our
main activity here and we're going to

00:05:01.340 --> 00:05:01.350
main activity here and we're going to
 

00:05:01.350 --> 00:05:03.550
main activity here and we're going to
talk to the oboe library via Jay and I

00:05:03.550 --> 00:05:03.560
talk to the oboe library via Jay and I
 

00:05:03.560 --> 00:05:05.870
talk to the oboe library via Jay and I
so I have a couple of native methods

00:05:05.870 --> 00:05:05.880
so I have a couple of native methods
 

00:05:05.880 --> 00:05:08.780
so I have a couple of native methods
here which I'm going to use and I'll

00:05:08.780 --> 00:05:08.790
here which I'm going to use and I'll
 

00:05:08.790 --> 00:05:10.870
here which I'm going to use and I'll
implement those methods in a second but

00:05:10.870 --> 00:05:10.880
implement those methods in a second but
 

00:05:10.880 --> 00:05:14.030
implement those methods in a second but
so we're gonna create an audio engine

00:05:14.030 --> 00:05:14.040
so we're gonna create an audio engine
 

00:05:14.040 --> 00:05:16.550
so we're gonna create an audio engine
and we'll start by calling start engine

00:05:16.550 --> 00:05:16.560
and we'll start by calling start engine
 

00:05:16.560 --> 00:05:22.700
and we'll start by calling start engine
so let's just jump into our j'ni code so

00:05:22.700 --> 00:05:22.710
so let's just jump into our j'ni code so
 

00:05:22.710 --> 00:05:28.040
so let's just jump into our j'ni code so
this is in native Lib cpp here so i'm

00:05:28.040 --> 00:05:28.050
this is in native Lib cpp here so i'm
 

00:05:28.050 --> 00:05:32.620
this is in native Lib cpp here so i'm
going to define an audio engine up here

00:05:32.620 --> 00:05:32.630
going to define an audio engine up here
 

00:05:32.630 --> 00:05:37.250
going to define an audio engine up here
just call it engine and then i'm gonna

00:05:37.250 --> 00:05:37.260
just call it engine and then i'm gonna
 

00:05:37.260 --> 00:05:40.960
just call it engine and then i'm gonna
call a method on my engine called start

00:05:40.960 --> 00:05:40.970
call a method on my engine called start
 

00:05:40.970 --> 00:05:44.390
call a method on my engine called start
now i've already created the header and

00:05:44.390 --> 00:05:44.400
now i've already created the header and
 

00:05:44.400 --> 00:05:46.610
now i've already created the header and
implementation files just the blank

00:05:46.610 --> 00:05:46.620
implementation files just the blank
 

00:05:46.620 --> 00:05:49.430
implementation files just the blank
files for this audio engine class so

00:05:49.430 --> 00:05:49.440
files for this audio engine class so
 

00:05:49.440 --> 00:05:52.790
files for this audio engine class so
i'll go ahead now and write the class so

00:05:52.790 --> 00:05:52.800
i'll go ahead now and write the class so
 

00:05:52.800 --> 00:05:58.909
i'll go ahead now and write the class so
audio engine and i'm going to have one

00:05:58.909 --> 00:05:58.919
audio engine and i'm going to have one
 

00:05:58.919 --> 00:06:02.750
audio engine and i'm going to have one
method called start ok now i can use

00:06:02.750 --> 00:06:02.760
method called start ok now i can use
 

00:06:02.760 --> 00:06:04.820
method called start ok now i can use
option enter to generate the definition

00:06:04.820 --> 00:06:04.830
option enter to generate the definition
 

00:06:04.830 --> 00:06:06.880
option enter to generate the definition
for this i'm in my implementation and

00:06:06.880 --> 00:06:06.890
for this i'm in my implementation and
 

00:06:06.890 --> 00:06:11.840
for this i'm in my implementation and
i'm in the start method before i can

00:06:11.840 --> 00:06:11.850
i'm in the start method before i can
 

00:06:11.850 --> 00:06:13.700
i'm in the start method before i can
start using the OBO library i need to do

00:06:13.700 --> 00:06:13.710
start using the OBO library i need to do
 

00:06:13.710 --> 00:06:16.610
start using the OBO library i need to do
two things number one i need to include

00:06:16.610 --> 00:06:16.620
two things number one i need to include
 

00:06:16.620 --> 00:06:22.680
two things number one i need to include
the oboe header

00:06:22.680 --> 00:06:22.690
 

00:06:22.690 --> 00:06:25.930
and the other thing I need to do is wear

00:06:25.930 --> 00:06:25.940
and the other thing I need to do is wear
 

00:06:25.940 --> 00:06:28.210
and the other thing I need to do is wear
this kind of just makes it easier for me

00:06:28.210 --> 00:06:28.220
this kind of just makes it easier for me
 

00:06:28.220 --> 00:06:30.580
this kind of just makes it easier for me
which is to use the oboe namespace and

00:06:30.580 --> 00:06:30.590
which is to use the oboe namespace and
 

00:06:30.590 --> 00:06:32.980
which is to use the oboe namespace and
this just avoids me having to prefix all

00:06:32.980 --> 00:06:32.990
this just avoids me having to prefix all
 

00:06:32.990 --> 00:06:36.030
this just avoids me having to prefix all
of the over objects with the word oboe

00:06:36.030 --> 00:06:36.040
of the over objects with the word oboe
 

00:06:36.040 --> 00:06:40.450
of the over objects with the word oboe
so in our start method we want to create

00:06:40.450 --> 00:06:40.460
so in our start method we want to create
 

00:06:40.460 --> 00:06:43.450
so in our start method we want to create
an audio stream to do that we use an

00:06:43.450 --> 00:06:43.460
an audio stream to do that we use an
 

00:06:43.460 --> 00:06:47.110
an audio stream to do that we use an
audio stream builder that B and the

00:06:47.110 --> 00:06:47.120
audio stream builder that B and the
 

00:06:47.120 --> 00:06:48.790
audio stream builder that B and the
Builder allows us to set properties on

00:06:48.790 --> 00:06:48.800
Builder allows us to set properties on
 

00:06:48.800 --> 00:06:51.670
Builder allows us to set properties on
the stream so that's things like the

00:06:51.670 --> 00:06:51.680
the stream so that's things like the
 

00:06:51.680 --> 00:06:55.420
the stream so that's things like the
format of the stream now when I set the

00:06:55.420 --> 00:06:55.430
format of the stream now when I set the
 

00:06:55.430 --> 00:06:57.040
format of the stream now when I set the
format there are two choices

00:06:57.040 --> 00:06:57.050
format there are two choices
 

00:06:57.050 --> 00:06:59.860
format there are two choices
I can I can choose from either 16-bit

00:06:59.860 --> 00:06:59.870
I can I can choose from either 16-bit
 

00:06:59.870 --> 00:07:02.880
I can I can choose from either 16-bit
integers or floats I will use floats I

00:07:02.880 --> 00:07:02.890
integers or floats I will use floats I
 

00:07:02.890 --> 00:07:07.030
integers or floats I will use floats I
can also set the number of channels so

00:07:07.030 --> 00:07:07.040
can also set the number of channels so
 

00:07:07.040 --> 00:07:08.650
can also set the number of channels so
that would be two for stereo or one for

00:07:08.650 --> 00:07:08.660
that would be two for stereo or one for
 

00:07:08.660 --> 00:07:14.260
that would be two for stereo or one for
mono and I can also set properties which

00:07:14.260 --> 00:07:14.270
mono and I can also set properties which
 

00:07:14.270 --> 00:07:16.420
mono and I can also set properties which
inform the stream of my latency

00:07:16.420 --> 00:07:16.430
inform the stream of my latency
 

00:07:16.430 --> 00:07:18.850
inform the stream of my latency
requirements so the most important one

00:07:18.850 --> 00:07:18.860
requirements so the most important one
 

00:07:18.860 --> 00:07:24.160
requirements so the most important one
here is set performance mode and there

00:07:24.160 --> 00:07:24.170
here is set performance mode and there
 

00:07:24.170 --> 00:07:25.270
here is set performance mode and there
are a number of options but the one I

00:07:25.270 --> 00:07:25.280
are a number of options but the one I
 

00:07:25.280 --> 00:07:28.050
are a number of options but the one I
want is obviously the low latency one

00:07:28.050 --> 00:07:28.060
want is obviously the low latency one
 

00:07:28.060 --> 00:07:30.430
want is obviously the low latency one
the second thing I can do is set the

00:07:30.430 --> 00:07:30.440
the second thing I can do is set the
 

00:07:30.440 --> 00:07:33.910
the second thing I can do is set the
sharing mode on the stream so let's just

00:07:33.910 --> 00:07:33.920
sharing mode on the stream so let's just
 

00:07:33.920 --> 00:07:37.060
sharing mode on the stream so let's just
set that so I'm going to set this to an

00:07:37.060 --> 00:07:37.070
set that so I'm going to set this to an
 

00:07:37.070 --> 00:07:38.800
set that so I'm going to set this to an
exclusive sharing mode and what that

00:07:38.800 --> 00:07:38.810
exclusive sharing mode and what that
 

00:07:38.810 --> 00:07:40.840
exclusive sharing mode and what that
means is that I'm requesting that the

00:07:40.840 --> 00:07:40.850
means is that I'm requesting that the
 

00:07:40.850 --> 00:07:43.660
means is that I'm requesting that the
audio device give me an exclusive stream

00:07:43.660 --> 00:07:43.670
audio device give me an exclusive stream
 

00:07:43.670 --> 00:07:46.810
audio device give me an exclusive stream
that means that my apps audio won't be

00:07:46.810 --> 00:07:46.820
that means that my apps audio won't be
 

00:07:46.820 --> 00:07:49.060
that means that my apps audio won't be
mixed with any other audio on the system

00:07:49.060 --> 00:07:49.070
mixed with any other audio on the system
 

00:07:49.070 --> 00:07:52.330
mixed with any other audio on the system
so if the device supports it I can avoid

00:07:52.330 --> 00:07:52.340
so if the device supports it I can avoid
 

00:07:52.340 --> 00:07:56.320
so if the device supports it I can avoid
having my audio mixed with with anything

00:07:56.320 --> 00:07:56.330
having my audio mixed with with anything
 

00:07:56.330 --> 00:07:58.540
having my audio mixed with with anything
else before it goes through through the

00:07:58.540 --> 00:07:58.550
else before it goes through through the
 

00:07:58.550 --> 00:08:00.790
else before it goes through through the
speaker or headphones and by doing this

00:08:00.790 --> 00:08:00.800
speaker or headphones and by doing this
 

00:08:00.800 --> 00:08:03.100
speaker or headphones and by doing this
I can cut a few milliseconds of latency

00:08:03.100 --> 00:08:03.110
I can cut a few milliseconds of latency
 

00:08:03.110 --> 00:08:07.510
I can cut a few milliseconds of latency
off the output so that's all I need to

00:08:07.510 --> 00:08:07.520
off the output so that's all I need to
 

00:08:07.520 --> 00:08:10.120
off the output so that's all I need to
do to open the stream so I can go ahead

00:08:10.120 --> 00:08:10.130
do to open the stream so I can go ahead
 

00:08:10.130 --> 00:08:13.180
do to open the stream so I can go ahead
now and call open stream this takes a

00:08:13.180 --> 00:08:13.190
now and call open stream this takes a
 

00:08:13.190 --> 00:08:16.180
now and call open stream this takes a
reference to an audio stream pointer

00:08:16.180 --> 00:08:16.190
reference to an audio stream pointer
 

00:08:16.190 --> 00:08:19.210
reference to an audio stream pointer
again I can use option enter to create a

00:08:19.210 --> 00:08:19.220
again I can use option enter to create a
 

00:08:19.220 --> 00:08:22.600
again I can use option enter to create a
new field called stream so in back in

00:08:22.600 --> 00:08:22.610
new field called stream so in back in
 

00:08:22.610 --> 00:08:24.280
new field called stream so in back in
our head oh it's done this automatically

00:08:24.280 --> 00:08:24.290
our head oh it's done this automatically
 

00:08:24.290 --> 00:08:28.090
our head oh it's done this automatically
for me okay once the stream is open

00:08:28.090 --> 00:08:28.100
for me okay once the stream is open
 

00:08:28.100 --> 00:08:30.250
for me okay once the stream is open
there's one final step I need to take

00:08:30.250 --> 00:08:30.260
there's one final step I need to take
 

00:08:30.260 --> 00:08:32.020
there's one final step I need to take
which is to set the buffer size on the

00:08:32.020 --> 00:08:32.030
which is to set the buffer size on the
 

00:08:32.030 --> 00:08:34.900
which is to set the buffer size on the
stream so I can do this by doing set

00:08:34.900 --> 00:08:34.910
stream so I can do this by doing set
 

00:08:34.910 --> 00:08:36.310
stream so I can do this by doing set
buffer size in frames

00:08:36.310 --> 00:08:36.320
buffer size in frames
 

00:08:36.320 --> 00:08:41.350
buffer size in frames
now to get the smallest possible buffer

00:08:41.350 --> 00:08:41.360
now to get the smallest possible buffer
 

00:08:41.360 --> 00:08:44.949
now to get the smallest possible buffer
size we have to interrogate the audio

00:08:44.949 --> 00:08:44.959
size we have to interrogate the audio
 

00:08:44.959 --> 00:08:48.370
size we have to interrogate the audio
device for the minimum amount of data

00:08:48.370 --> 00:08:48.380
device for the minimum amount of data
 

00:08:48.380 --> 00:08:52.170
device for the minimum amount of data
that it will read in one operation so a

00:08:52.170 --> 00:08:52.180
that it will read in one operation so a
 

00:08:52.180 --> 00:08:55.090
that it will read in one operation so a
discreet chunk of audio data and we call

00:08:55.090 --> 00:08:55.100
discreet chunk of audio data and we call
 

00:08:55.100 --> 00:08:57.939
discreet chunk of audio data and we call
this a burst so we want to obtain the

00:08:57.939 --> 00:08:57.949
this a burst so we want to obtain the
 

00:08:57.949 --> 00:09:00.519
this a burst so we want to obtain the
burst size from the audio device we can

00:09:00.519 --> 00:09:00.529
burst size from the audio device we can
 

00:09:00.529 --> 00:09:03.730
burst size from the audio device we can
do this using stream get frames per

00:09:03.730 --> 00:09:03.740
do this using stream get frames per
 

00:09:03.740 --> 00:09:06.129
do this using stream get frames per
burst and that's the minimum possible

00:09:06.129 --> 00:09:06.139
burst and that's the minimum possible
 

00:09:06.139 --> 00:09:08.530
burst and that's the minimum possible
buffer size that we can we can set our

00:09:08.530 --> 00:09:08.540
buffer size that we can we can set our
 

00:09:08.540 --> 00:09:10.540
buffer size that we can we can set our
our stream to have but we actually don't

00:09:10.540 --> 00:09:10.550
our stream to have but we actually don't
 

00:09:10.550 --> 00:09:12.009
our stream to have but we actually don't
recommend that you use this this

00:09:12.009 --> 00:09:12.019
recommend that you use this this
 

00:09:12.019 --> 00:09:14.860
recommend that you use this this
absolute minimum we recommend that you

00:09:14.860 --> 00:09:14.870
absolute minimum we recommend that you
 

00:09:14.870 --> 00:09:19.059
absolute minimum we recommend that you
use double this because it provides a

00:09:19.059 --> 00:09:19.069
use double this because it provides a
 

00:09:19.069 --> 00:09:22.360
use double this because it provides a
good protection against under runs it's

00:09:22.360 --> 00:09:22.370
good protection against under runs it's
 

00:09:22.370 --> 00:09:25.620
good protection against under runs it's
a good trade-off with latency and andand

00:09:25.620 --> 00:09:25.630
a good trade-off with latency and andand
 

00:09:25.630 --> 00:09:28.449
a good trade-off with latency and andand
ok so that's all I need to do to create

00:09:28.449 --> 00:09:28.459
ok so that's all I need to do to create
 

00:09:28.459 --> 00:09:30.430
ok so that's all I need to do to create
a low latency stream so now I can go

00:09:30.430 --> 00:09:30.440
a low latency stream so now I can go
 

00:09:30.440 --> 00:09:36.370
a low latency stream so now I can go
ahead and start the stream which will do

00:09:36.370 --> 00:09:36.380
ahead and start the stream which will do
 

00:09:36.380 --> 00:09:38.470
ahead and start the stream which will do
nothing because we haven't found any way

00:09:38.470 --> 00:09:38.480
nothing because we haven't found any way
 

00:09:38.480 --> 00:09:42.100
nothing because we haven't found any way
of putting data into the stream so to

00:09:42.100 --> 00:09:42.110
of putting data into the stream so to
 

00:09:42.110 --> 00:09:44.530
of putting data into the stream so to
get data into the stream we use a

00:09:44.530 --> 00:09:44.540
get data into the stream we use a
 

00:09:44.540 --> 00:09:46.900
get data into the stream we use a
callback so I'm back in the Builder and

00:09:46.900 --> 00:09:46.910
callback so I'm back in the Builder and
 

00:09:46.910 --> 00:09:49.990
callback so I'm back in the Builder and
I'll set or use the set callback method

00:09:49.990 --> 00:09:50.000
I'll set or use the set callback method
 

00:09:50.000 --> 00:09:52.300
I'll set or use the set callback method
this is this wants to take an audio

00:09:52.300 --> 00:09:52.310
this is this wants to take an audio
 

00:09:52.310 --> 00:09:54.579
this is this wants to take an audio
stream callback object and to make this

00:09:54.579 --> 00:09:54.589
stream callback object and to make this
 

00:09:54.589 --> 00:09:57.250
stream callback object and to make this
simple I'll just use my this object

00:09:57.250 --> 00:09:57.260
simple I'll just use my this object
 

00:09:57.260 --> 00:09:59.980
simple I'll just use my this object
which means that my audio engine needs

00:09:59.980 --> 00:09:59.990
which means that my audio engine needs
 

00:09:59.990 --> 00:10:04.000
which means that my audio engine needs
to implement this interface so we'll

00:10:04.000 --> 00:10:04.010
to implement this interface so we'll
 

00:10:04.010 --> 00:10:07.600
to implement this interface so we'll
have it do this now I can use control o

00:10:07.600 --> 00:10:07.610
have it do this now I can use control o
 

00:10:07.610 --> 00:10:09.730
have it do this now I can use control o
to show me the methods that I can

00:10:09.730 --> 00:10:09.740
to show me the methods that I can
 

00:10:09.740 --> 00:10:12.009
to show me the methods that I can
override in this interface the one I

00:10:12.009 --> 00:10:12.019
override in this interface the one I
 

00:10:12.019 --> 00:10:13.990
override in this interface the one I
want is on audio ready this is the

00:10:13.990 --> 00:10:14.000
want is on audio ready this is the
 

00:10:14.000 --> 00:10:16.269
want is on audio ready this is the
method that will be called every time

00:10:16.269 --> 00:10:16.279
method that will be called every time
 

00:10:16.279 --> 00:10:23.069
method that will be called every time
the audio device needs more data so

00:10:23.069 --> 00:10:23.079
the audio device needs more data so
 

00:10:23.079 --> 00:10:26.170
the audio device needs more data so
inside here just take a quick look at

00:10:26.170 --> 00:10:26.180
inside here just take a quick look at
 

00:10:26.180 --> 00:10:28.420
inside here just take a quick look at
what this method signature is so on

00:10:28.420 --> 00:10:28.430
what this method signature is so on
 

00:10:28.430 --> 00:10:30.370
what this method signature is so on
audio ready is is called

00:10:30.370 --> 00:10:30.380
audio ready is is called
 

00:10:30.380 --> 00:10:31.900
audio ready is is called
it tells me the stream that wants more

00:10:31.900 --> 00:10:31.910
it tells me the stream that wants more
 

00:10:31.910 --> 00:10:35.769
it tells me the stream that wants more
data and it also gives me a container

00:10:35.769 --> 00:10:35.779
data and it also gives me a container
 

00:10:35.779 --> 00:10:39.040
data and it also gives me a container
array so this container array which is

00:10:39.040 --> 00:10:39.050
array so this container array which is
 

00:10:39.050 --> 00:10:42.429
array so this container array which is
of type void star because it can be

00:10:42.429 --> 00:10:42.439
of type void star because it can be
 

00:10:42.439 --> 00:10:46.110
of type void star because it can be
either 16-bit integers or floating-point

00:10:46.110 --> 00:10:46.120
either 16-bit integers or floating-point
 

00:10:46.120 --> 00:10:50.110
either 16-bit integers or floating-point
samples is something that I'm

00:10:50.110 --> 00:10:50.120
samples is something that I'm
 

00:10:50.120 --> 00:10:52.750
samples is something that I'm
to write my audio data into so I write

00:10:52.750 --> 00:10:52.760
to write my audio data into so I write
 

00:10:52.760 --> 00:10:54.519
to write my audio data into so I write
it into it and then that's passed out to

00:10:54.519 --> 00:10:54.529
it into it and then that's passed out to
 

00:10:54.529 --> 00:10:57.100
it into it and then that's passed out to
the audio device lastly we have num

00:10:57.100 --> 00:10:57.110
the audio device lastly we have num
 

00:10:57.110 --> 00:10:58.510
the audio device lastly we have num
frames which tells me the number of

00:10:58.510 --> 00:10:58.520
frames which tells me the number of
 

00:10:58.520 --> 00:11:02.079
frames which tells me the number of
audio frames which need to be centered

00:11:02.079 --> 00:11:02.089
audio frames which need to be centered
 

00:11:02.089 --> 00:11:05.170
audio frames which need to be centered
populated in this container array so I

00:11:05.170 --> 00:11:05.180
populated in this container array so I
 

00:11:05.180 --> 00:11:07.480
populated in this container array so I
need an audio source and I'm gonna cheat

00:11:07.480 --> 00:11:07.490
need an audio source and I'm gonna cheat
 

00:11:07.490 --> 00:11:10.090
need an audio source and I'm gonna cheat
a little bit here I have created an

00:11:10.090 --> 00:11:10.100
a little bit here I have created an
 

00:11:10.100 --> 00:11:13.120
a little bit here I have created an
oscillator in advance and let's just

00:11:13.120 --> 00:11:13.130
oscillator in advance and let's just
 

00:11:13.130 --> 00:11:15.100
oscillator in advance and let's just
take a quick look at it and it's just

00:11:15.100 --> 00:11:15.110
take a quick look at it and it's just
 

00:11:15.110 --> 00:11:17.530
take a quick look at it and it's just
going to generate a square wave here so

00:11:17.530 --> 00:11:17.540
going to generate a square wave here so
 

00:11:17.540 --> 00:11:21.600
going to generate a square wave here so
that's a periodic signal varying between

00:11:21.600 --> 00:11:21.610
that's a periodic signal varying between
 

00:11:21.610 --> 00:11:24.430
that's a periodic signal varying between
two points to create a square wave

00:11:24.430 --> 00:11:24.440
two points to create a square wave
 

00:11:24.440 --> 00:11:31.360
two points to create a square wave
so let's now create an oscillator I'll

00:11:31.360 --> 00:11:31.370
so let's now create an oscillator I'll
 

00:11:31.370 --> 00:11:36.100
so let's now create an oscillator I'll
just do so later after it's a temp

00:11:36.100 --> 00:11:36.110
just do so later after it's a temp
 

00:11:36.110 --> 00:11:37.720
just do so later after it's a temp
templated object so i need to tell it

00:11:37.720 --> 00:11:37.730
templated object so i need to tell it
 

00:11:37.730 --> 00:11:41.650
templated object so i need to tell it
what type and I'll just include the

00:11:41.650 --> 00:11:41.660
what type and I'll just include the
 

00:11:41.660 --> 00:11:45.700
what type and I'll just include the
oscillator header so now that I have an

00:11:45.700 --> 00:11:45.710
oscillator header so now that I have an
 

00:11:45.710 --> 00:11:50.970
oscillator header so now that I have an
oscillator I can do ask render okay

00:11:50.970 --> 00:11:50.980
oscillator I can do ask render okay
 

00:11:50.980 --> 00:11:53.230
oscillator I can do ask render okay
so Android studio is complaining about

00:11:53.230 --> 00:11:53.240
so Android studio is complaining about
 

00:11:53.240 --> 00:11:55.060
so Android studio is complaining about
this method signature here that's why

00:11:55.060 --> 00:11:55.070
this method signature here that's why
 

00:11:55.070 --> 00:11:56.949
this method signature here that's why
it's got a red underline here I'm just

00:11:56.949 --> 00:11:56.959
it's got a red underline here I'm just
 

00:11:56.959 --> 00:11:59.079
it's got a red underline here I'm just
gonna go ahead and build and that

00:11:59.079 --> 00:11:59.089
gonna go ahead and build and that
 

00:11:59.089 --> 00:12:04.050
gonna go ahead and build and that
normally sorts it out yeah there we go

00:12:04.050 --> 00:12:04.060
normally sorts it out yeah there we go
 

00:12:04.060 --> 00:12:05.610
normally sorts it out yeah there we go
okay

00:12:05.610 --> 00:12:05.620
okay
 

00:12:05.620 --> 00:12:09.519
okay
ignore the errors okay so on my

00:12:09.519 --> 00:12:09.529
ignore the errors okay so on my
 

00:12:09.529 --> 00:12:11.829
ignore the errors okay so on my
oscillator I have a render audio method

00:12:11.829 --> 00:12:11.839
oscillator I have a render audio method
 

00:12:11.839 --> 00:12:14.800
oscillator I have a render audio method
which is going to put the audio frames

00:12:14.800 --> 00:12:14.810
which is going to put the audio frames
 

00:12:14.810 --> 00:12:17.440
which is going to put the audio frames
from the oscillator into this audio data

00:12:17.440 --> 00:12:17.450
from the oscillator into this audio data
 

00:12:17.450 --> 00:12:19.780
from the oscillator into this audio data
array so first thing I need to do is

00:12:19.780 --> 00:12:19.790
array so first thing I need to do is
 

00:12:19.790 --> 00:12:25.540
array so first thing I need to do is
cast it to this an array of floats data

00:12:25.540 --> 00:12:25.550
cast it to this an array of floats data
 

00:12:25.550 --> 00:12:33.160
cast it to this an array of floats data
and passing the number of frames so the

00:12:33.160 --> 00:12:33.170
and passing the number of frames so the
 

00:12:33.170 --> 00:12:35.199
and passing the number of frames so the
last thing I need to do in an audio

00:12:35.199 --> 00:12:35.209
last thing I need to do in an audio
 

00:12:35.209 --> 00:12:37.300
last thing I need to do in an audio
ready is return a result and this can be

00:12:37.300 --> 00:12:37.310
ready is return a result and this can be
 

00:12:37.310 --> 00:12:38.860
ready is return a result and this can be
either to continue where the callbacks

00:12:38.860 --> 00:12:38.870
either to continue where the callbacks
 

00:12:38.870 --> 00:12:40.480
either to continue where the callbacks
will continue or it can be stopped and

00:12:40.480 --> 00:12:40.490
will continue or it can be stopped and
 

00:12:40.490 --> 00:12:44.460
will continue or it can be stopped and
the callbacks will stop so in my case

00:12:44.460 --> 00:12:44.470
the callbacks will stop so in my case
 

00:12:44.470 --> 00:12:49.329
the callbacks will stop so in my case
I'm going to continue right the final

00:12:49.329 --> 00:12:49.339
I'm going to continue right the final
 

00:12:49.339 --> 00:12:52.449
I'm going to continue right the final
thing I want to do is set some things up

00:12:52.449 --> 00:12:52.459
thing I want to do is set some things up
 

00:12:52.459 --> 00:12:57.160
thing I want to do is set some things up
on my oscillator so I'm going to set the

00:12:57.160 --> 00:12:57.170
on my oscillator so I'm going to set the
 

00:12:57.170 --> 00:13:01.230
on my oscillator so I'm going to set the
amplitude which is kind of the volume

00:13:01.230 --> 00:13:01.240
amplitude which is kind of the volume
 

00:13:01.240 --> 00:13:03.600
amplitude which is kind of the volume
I'm also going to set the frequent

00:13:03.600 --> 00:13:03.610
I'm also going to set the frequent
 

00:13:03.610 --> 00:13:08.220
I'm also going to set the frequent
see set that at about 80 Hertz nice bass

00:13:08.220 --> 00:13:08.230
see set that at about 80 Hertz nice bass
 

00:13:08.230 --> 00:13:11.490
see set that at about 80 Hertz nice bass
frequency and I also need to set the

00:13:11.490 --> 00:13:11.500
frequency and I also need to set the
 

00:13:11.500 --> 00:13:13.319
frequency and I also need to set the
sample rate which tells me it tells the

00:13:13.319 --> 00:13:13.329
sample rate which tells me it tells the
 

00:13:13.329 --> 00:13:15.750
sample rate which tells me it tells the
oscillator how frequently these samples

00:13:15.750 --> 00:13:15.760
oscillator how frequently these samples
 

00:13:15.760 --> 00:13:18.810
oscillator how frequently these samples
should be produced and I can get that

00:13:18.810 --> 00:13:18.820
should be produced and I can get that
 

00:13:18.820 --> 00:13:22.550
should be produced and I can get that
from the stream get sample rate there

00:13:22.550 --> 00:13:22.560
from the stream get sample rate there
 

00:13:22.560 --> 00:13:23.699
from the stream get sample rate there
okay

00:13:23.699 --> 00:13:23.709
okay
 

00:13:23.709 --> 00:13:24.990
okay
I know you're all desperate to hear a

00:13:24.990 --> 00:13:25.000
I know you're all desperate to hear a
 

00:13:25.000 --> 00:13:28.019
I know you're all desperate to hear a
sound there is one very very final thing

00:13:28.019 --> 00:13:28.029
sound there is one very very final thing
 

00:13:28.029 --> 00:13:30.630
sound there is one very very final thing
I need to do here which is I need to

00:13:30.630 --> 00:13:30.640
I need to do here which is I need to
 

00:13:30.640 --> 00:13:33.000
I need to do here which is I need to
respond to tap events so I'll just go

00:13:33.000 --> 00:13:33.010
respond to tap events so I'll just go
 

00:13:33.010 --> 00:13:37.350
respond to tap events so I'll just go
back into main activity and I'm going to

00:13:37.350 --> 00:13:37.360
back into main activity and I'm going to
 

00:13:37.360 --> 00:13:43.579
back into main activity and I'm going to
override the on touch event so that if

00:13:43.579 --> 00:13:43.589
override the on touch event so that if
 

00:13:43.589 --> 00:13:50.310
override the on touch event so that if
the event is down then I'm going to call

00:13:50.310 --> 00:13:50.320
the event is down then I'm going to call
 

00:13:50.320 --> 00:13:55.280
the event is down then I'm going to call
this native method tap make that true

00:13:55.280 --> 00:13:55.290
this native method tap make that true
 

00:13:55.290 --> 00:14:00.900
this native method tap make that true
else otherwise if the event is up I'm

00:14:00.900 --> 00:14:00.910
else otherwise if the event is up I'm
 

00:14:00.910 --> 00:14:04.290
else otherwise if the event is up I'm
lifting my finger off the screen then

00:14:04.290 --> 00:14:04.300
lifting my finger off the screen then
 

00:14:04.300 --> 00:14:09.090
lifting my finger off the screen then
I'll pass in false okay let's just have

00:14:09.090 --> 00:14:09.100
I'll pass in false okay let's just have
 

00:14:09.100 --> 00:14:12.600
I'll pass in false okay let's just have
a look at this tap method

00:14:12.600 --> 00:14:12.610
 

00:14:12.610 --> 00:14:16.920
this needs implementing so I'll just

00:14:16.920 --> 00:14:16.930
this needs implementing so I'll just
 

00:14:16.930 --> 00:14:19.860
this needs implementing so I'll just
pass in this true or false value create

00:14:19.860 --> 00:14:19.870
pass in this true or false value create
 

00:14:19.870 --> 00:14:27.720
pass in this true or false value create
the new method and I just call ask set

00:14:27.720 --> 00:14:27.730
the new method and I just call ask set
 

00:14:27.730 --> 00:14:31.350
the new method and I just call ask set
wave on and that's going to pass that in

00:14:31.350 --> 00:14:31.360
wave on and that's going to pass that in
 

00:14:31.360 --> 00:14:36.509
wave on and that's going to pass that in
there now moment of truth okay I'm going

00:14:36.509 --> 00:14:36.519
there now moment of truth okay I'm going
 

00:14:36.519 --> 00:14:40.769
there now moment of truth okay I'm going
to run this and in theory you should

00:14:40.769 --> 00:14:40.779
to run this and in theory you should
 

00:14:40.779 --> 00:14:51.140
to run this and in theory you should
hear a sound

00:14:51.140 --> 00:14:51.150
 

00:14:51.150 --> 00:14:52.519
so when I tap on the screen we should

00:14:52.519 --> 00:14:52.529
so when I tap on the screen we should
 

00:14:52.529 --> 00:14:56.210
so when I tap on the screen we should
hear an 80 Hertz square wave the

00:14:56.210 --> 00:14:56.220
hear an 80 Hertz square wave the
 

00:14:56.220 --> 00:15:08.990
hear an 80 Hertz square wave the
pressure there we go so you can see it's

00:15:08.990 --> 00:15:09.000
pressure there we go so you can see it's
 

00:15:09.000 --> 00:15:11.540
pressure there we go so you can see it's
the lowest possible latency here and

00:15:11.540 --> 00:15:11.550
the lowest possible latency here and
 

00:15:11.550 --> 00:15:15.980
the lowest possible latency here and
it's actually pretty responsive which is

00:15:15.980 --> 00:15:15.990
it's actually pretty responsive which is
 

00:15:15.990 --> 00:15:18.280
it's actually pretty responsive which is
so so we have a musical instrument

00:15:18.280 --> 00:15:18.290
so so we have a musical instrument
 

00:15:18.290 --> 00:15:20.720
so so we have a musical instrument
admittedly it's not the best musical

00:15:20.720 --> 00:15:20.730
admittedly it's not the best musical
 

00:15:20.730 --> 00:15:24.350
admittedly it's not the best musical
instrument in the world yeah a little

00:15:24.350 --> 00:15:24.360
instrument in the world yeah a little
 

00:15:24.360 --> 00:15:26.030
instrument in the world yeah a little
bit to be desired on that on the sound

00:15:26.030 --> 00:15:26.040
bit to be desired on that on the sound
 

00:15:26.040 --> 00:15:27.650
bit to be desired on that on the sound
and control front so what I actually

00:15:27.650 --> 00:15:27.660
and control front so what I actually
 

00:15:27.660 --> 00:15:29.300
and control front so what I actually
thought it would be nice is if we could

00:15:29.300 --> 00:15:29.310
thought it would be nice is if we could
 

00:15:29.310 --> 00:15:32.570
thought it would be nice is if we could
add a little bit more control so for the

00:15:32.570 --> 00:15:32.580
add a little bit more control so for the
 

00:15:32.580 --> 00:15:35.600
add a little bit more control so for the
last four minutes and thirty seconds I'm

00:15:35.600 --> 00:15:35.610
last four minutes and thirty seconds I'm
 

00:15:35.610 --> 00:15:38.660
last four minutes and thirty seconds I'm
going to tie the motion sensor to the

00:15:38.660 --> 00:15:38.670
going to tie the motion sensor to the
 

00:15:38.670 --> 00:15:43.220
going to tie the motion sensor to the
pitch of the oscillator so to do this

00:15:43.220 --> 00:15:43.230
pitch of the oscillator so to do this
 

00:15:43.230 --> 00:15:45.980
pitch of the oscillator so to do this
I'm gonna cheat uncomment some code that

00:15:45.980 --> 00:15:45.990
I'm gonna cheat uncomment some code that
 

00:15:45.990 --> 00:15:50.200
I'm gonna cheat uncomment some code that
I wrote earlier and what this does is

00:15:50.200 --> 00:15:50.210
I wrote earlier and what this does is
 

00:15:50.210 --> 00:15:53.200
I wrote earlier and what this does is
register a listener which will listen to

00:15:53.200 --> 00:15:53.210
register a listener which will listen to
 

00:15:53.210 --> 00:15:59.329
register a listener which will listen to
the rotation vector sensor so to listen

00:15:59.329 --> 00:15:59.339
the rotation vector sensor so to listen
 

00:15:59.339 --> 00:16:02.449
the rotation vector sensor so to listen
to these events I need to implement the

00:16:02.449 --> 00:16:02.459
to these events I need to implement the
 

00:16:02.459 --> 00:16:07.210
to these events I need to implement the
sensor event listener interface

00:16:07.210 --> 00:16:07.220
sensor event listener interface
 

00:16:07.220 --> 00:16:10.930
sensor event listener interface
implement the methods on sensor change

00:16:10.930 --> 00:16:10.940
implement the methods on sensor change
 

00:16:10.940 --> 00:16:16.579
implement the methods on sensor change
so what I want to do is set the

00:16:16.579 --> 00:16:16.589
so what I want to do is set the
 

00:16:16.589 --> 00:16:21.050
so what I want to do is set the
frequency based on the event values of

00:16:21.050 --> 00:16:21.060
frequency based on the event values of
 

00:16:21.060 --> 00:16:24.590
frequency based on the event values of
the x-axis and I also need to scale this

00:16:24.590 --> 00:16:24.600
the x-axis and I also need to scale this
 

00:16:24.600 --> 00:16:28.910
the x-axis and I also need to scale this
value so I want to have it from let's

00:16:28.910 --> 00:16:28.920
value so I want to have it from let's
 

00:16:28.920 --> 00:16:31.640
value so I want to have it from let's
say from 20 Hertz the limit of human

00:16:31.640 --> 00:16:31.650
say from 20 Hertz the limit of human
 

00:16:31.650 --> 00:16:40.550
say from 20 Hertz the limit of human
hearing and let's go up to like so this

00:16:40.550 --> 00:16:40.560
hearing and let's go up to like so this
 

00:16:40.560 --> 00:16:43.040
hearing and let's go up to like so this
this should give me around up to around

00:16:43.040 --> 00:16:43.050
this should give me around up to around
 

00:16:43.050 --> 00:16:48.190
this should give me around up to around
100 Hertz so yep that looks good

00:16:48.190 --> 00:16:48.200
100 Hertz so yep that looks good
 

00:16:48.200 --> 00:16:53.050
100 Hertz so yep that looks good
so again I just need to implement this

00:16:53.050 --> 00:16:53.060
so again I just need to implement this
 

00:16:53.060 --> 00:17:02.229
so again I just need to implement this
frequency

00:17:02.229 --> 00:17:02.239
 

00:17:02.239 --> 00:17:05.149
okay so we'll just go ask set of

00:17:05.149 --> 00:17:05.159
okay so we'll just go ask set of
 

00:17:05.159 --> 00:17:10.340
okay so we'll just go ask set of
frequency and there we go okay so we're

00:17:10.340 --> 00:17:10.350
frequency and there we go okay so we're
 

00:17:10.350 --> 00:17:13.699
frequency and there we go okay so we're
good to go on that brief interlude very

00:17:13.699 --> 00:17:13.709
good to go on that brief interlude very
 

00:17:13.709 --> 00:17:16.880
good to go on that brief interlude very
brief in fact um has anyone heard of the

00:17:16.880 --> 00:17:16.890
brief in fact um has anyone heard of the
 

00:17:16.890 --> 00:17:21.799
brief in fact um has anyone heard of the
are men break okay one person yes

00:17:21.799 --> 00:17:21.809
are men break okay one person yes
 

00:17:21.809 --> 00:17:26.179
are men break okay one person yes
so the are men break comes from a song

00:17:26.179 --> 00:17:26.189
so the are men break comes from a song
 

00:17:26.189 --> 00:17:27.889
so the are men break comes from a song
in the 60s by the Winston brothers

00:17:27.889 --> 00:17:27.899
in the 60s by the Winston brothers
 

00:17:27.899 --> 00:17:28.669
in the 60s by the Winston brothers
called

00:17:28.669 --> 00:17:28.679
called
 

00:17:28.679 --> 00:17:30.950
called
are men brother and it's four bars of

00:17:30.950 --> 00:17:30.960
are men brother and it's four bars of
 

00:17:30.960 --> 00:17:34.039
are men brother and it's four bars of
the most incredible drum solo and it's

00:17:34.039 --> 00:17:34.049
the most incredible drum solo and it's
 

00:17:34.049 --> 00:17:38.539
the most incredible drum solo and it's
the most sampled loop in history but no

00:17:38.539 --> 00:17:38.549
the most sampled loop in history but no
 

00:17:38.549 --> 00:17:41.090
the most sampled loop in history but no
one's heard of it evidently apart from

00:17:41.090 --> 00:17:41.100
one's heard of it evidently apart from
 

00:17:41.100 --> 00:17:45.139
one's heard of it evidently apart from
one guy so I thought it'd be nice if I

00:17:45.139 --> 00:17:45.149
one guy so I thought it'd be nice if I
 

00:17:45.149 --> 00:17:46.549
one guy so I thought it'd be nice if I
could play my new musical instrument

00:17:46.549 --> 00:17:46.559
could play my new musical instrument
 

00:17:46.559 --> 00:17:53.810
could play my new musical instrument
over this loop so here's the loop I need

00:17:53.810 --> 00:17:53.820
over this loop so here's the loop I need
 

00:17:53.820 --> 00:18:00.289
over this loop so here's the loop I need
to run the app let's give it a go just

00:18:00.289 --> 00:18:00.299
to run the app let's give it a go just
 

00:18:00.299 --> 00:18:07.970
to run the app let's give it a go just
make sure it's here okay so with a bit

00:18:07.970 --> 00:18:07.980
make sure it's here okay so with a bit
 

00:18:07.980 --> 00:18:14.400
make sure it's here okay so with a bit
of luck we go

00:18:14.400 --> 00:18:14.410
of luck we go
 

00:18:14.410 --> 00:18:32.580
of luck we go
[Music]

00:18:32.580 --> 00:18:32.590
 

00:18:32.590 --> 00:18:46.630
okay right okay so that's that's about

00:18:46.630 --> 00:18:46.640
okay right okay so that's that's about
 

00:18:46.640 --> 00:18:47.290
okay right okay so that's that's about
it from me

00:18:47.290 --> 00:18:47.300
it from me
 

00:18:47.300 --> 00:18:54.240
it from me
if we can just go back to the slides and

00:18:54.240 --> 00:18:54.250
if we can just go back to the slides and
 

00:18:54.250 --> 00:18:56.260
if we can just go back to the slides and
yes so the library is available on

00:18:56.260 --> 00:18:56.270
yes so the library is available on
 

00:18:56.270 --> 00:18:59.080
yes so the library is available on
github there's documentation code labs

00:18:59.080 --> 00:18:59.090
github there's documentation code labs
 

00:18:59.090 --> 00:19:00.850
github there's documentation code labs
all sorts of good stuff on there we'd

00:19:00.850 --> 00:19:00.860
all sorts of good stuff on there we'd
 

00:19:00.860 --> 00:19:02.260
all sorts of good stuff on there we'd
love you to start using it start

00:19:02.260 --> 00:19:02.270
love you to start using it start
 

00:19:02.270 --> 00:19:04.390
love you to start using it start
building amazing audio experiences on

00:19:04.390 --> 00:19:04.400
building amazing audio experiences on
 

00:19:04.400 --> 00:19:06.520
building amazing audio experiences on
Android yeah and I'll be around

00:19:06.520 --> 00:19:06.530
Android yeah and I'll be around
 

00:19:06.530 --> 00:19:08.410
Android yeah and I'll be around
afterwards if you have any questions so

00:19:08.410 --> 00:19:08.420
afterwards if you have any questions so
 

00:19:08.420 --> 00:19:10.430
afterwards if you have any questions so
thank you all very much

00:19:10.430 --> 00:19:10.440
thank you all very much
 

00:19:10.440 --> 00:19:12.640
thank you all very much
[Applause]

00:19:12.640 --> 00:19:12.650
[Applause]
 

00:19:12.650 --> 00:19:25.600
[Applause]
[Music]

00:19:25.600 --> 00:19:25.610
 

00:19:25.610 --> 00:19:28.760
[Music]

