WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.560
ERIC KOLEDA: Our team's job is
to make sure people that are

00:00:02.560 --> 00:00:04.360
using Google Developer products
are happy and

00:00:04.360 --> 00:00:05.300
successful.

00:00:05.300 --> 00:00:06.860
And this show is all
about Apps Script.

00:00:06.860 --> 00:00:10.650
Our main purpose here is to
answer your questions.

00:00:10.650 --> 00:00:13.070
If you're watching live, you
can either join the Live

00:00:13.070 --> 00:00:17.050
Hangout, come join me, and we'll
answer some questions.

00:00:17.050 --> 00:00:18.930
Or if you don't feel like
joining, if you're a little

00:00:18.930 --> 00:00:22.450
shy, you can go to the embedded
Moderator page, which

00:00:22.450 --> 00:00:26.210
is inside of this event,
and start typing

00:00:26.210 --> 00:00:26.770
your questions there.

00:00:26.770 --> 00:00:29.750
And I'll go through them
during the show.

00:00:29.750 --> 00:00:32.240
Before we get started with
questions and answers, I

00:00:32.240 --> 00:00:37.110
wanted to just cover a little
bit of some news that's

00:00:37.110 --> 00:00:39.520
happened recently in the
Apps Script community.

00:00:39.520 --> 00:00:44.030
One thing is that we recently
published a blog post early

00:00:44.030 --> 00:00:47.265
this week on Monday about
how the-- it's

00:00:47.265 --> 00:00:48.360
very exciting, actually--

00:00:48.360 --> 00:00:52.150
the UK, their cabinet office,
the ministers in that office,

00:00:52.150 --> 00:00:54.420
are actually using-- well, not
the ministers programming

00:00:54.420 --> 00:00:57.260
themselves, but the more
techie members of their

00:00:57.260 --> 00:01:00.740
office-- actually have been
putting together a solution to

00:01:00.740 --> 00:01:04.069
create custom reports on their
Google Analytics data.

00:01:04.069 --> 00:01:06.790
So they have a number of
different web properties that

00:01:06.790 --> 00:01:09.100
they're trying to monitor
analytics on.

00:01:09.100 --> 00:01:12.020
And the ministers need their
information in a certain

00:01:12.020 --> 00:01:15.560
format on a daily basis so they
can easily digest and get

00:01:15.560 --> 00:01:17.330
some information about it.

00:01:17.330 --> 00:01:20.000
And so for that purpose, they
put together some Apps Script

00:01:20.000 --> 00:01:23.950
code that pulls a report
directly from Google Analytics

00:01:23.950 --> 00:01:27.080
using the integration that's in
Apps Script, puts that into

00:01:27.080 --> 00:01:30.140
some spreadsheets, does
some formatting and

00:01:30.140 --> 00:01:32.010
manipulation of the data.

00:01:32.010 --> 00:01:34.500
And then from there, they output
that into a Design tool

00:01:34.500 --> 00:01:37.150
that produces the final
stylized report.

00:01:37.150 --> 00:01:38.200
So go check it out.

00:01:38.200 --> 00:01:39.710
It's on our blog.

00:01:39.710 --> 00:01:42.270
You can search for the Google
Apps Developer Blog, that's

00:01:42.270 --> 00:01:43.570
probably the easy
way to find it.

00:01:43.570 --> 00:01:46.700
But it's also
Googleappsdeveloper.blogs.com.

00:01:46.700 --> 00:01:47.300
Just go take a look.

00:01:47.300 --> 00:01:48.170
It's actually really exciting.

00:01:48.170 --> 00:01:52.100
And we've seen a lot of people
recently get success by using

00:01:52.100 --> 00:01:55.790
Apps Script to pull data
from Google Analytics.

00:01:55.790 --> 00:01:59.120
I think people who use Google
Analytics, power users, they

00:01:59.120 --> 00:02:01.110
love data, they love
number crunching.

00:02:01.110 --> 00:02:04.560
And Spreadsheets in Apps Script
is the perfect tool set

00:02:04.560 --> 00:02:07.340
to kind of comb through that
data, refine it, and pull out

00:02:07.340 --> 00:02:08.220
interesting metrics.

00:02:08.220 --> 00:02:10.470
So do check that out.

00:02:10.470 --> 00:02:13.300
And some other things, if you're
new to some of these

00:02:13.300 --> 00:02:15.380
Google Developer Live episodes
we've been doing.

00:02:15.380 --> 00:02:18.520
We've done one just this week
which was an introduction to

00:02:18.520 --> 00:02:20.000
Apps Script triggers.

00:02:20.000 --> 00:02:23.040
So triggers are a method by
which your Apps Script code

00:02:23.040 --> 00:02:27.180
can, rather than run when you
tell it to, react to an event.

00:02:27.180 --> 00:02:29.470
Either react to something
happening in a spreadsheet or

00:02:29.470 --> 00:02:32.830
a form being submitted or even
just every once in awhile.

00:02:32.830 --> 00:02:35.080
So kind of like on
a regular timer.

00:02:35.080 --> 00:02:38.220
This is a great way that you
can take a task, let's say,

00:02:38.220 --> 00:02:40.470
that you want to check something
or manipulate

00:02:40.470 --> 00:02:42.780
something on a set
period of time.

00:02:42.780 --> 00:02:44.810
Rather than having to go into
some interface and click a

00:02:44.810 --> 00:02:47.960
button, triggers allow you
to do it automatically.

00:02:47.960 --> 00:02:50.470
My colleague, Ikai, did a really
great episode about how

00:02:50.470 --> 00:02:51.280
to use triggers.

00:02:51.280 --> 00:02:53.010
He showed off some cool demos.

00:02:53.010 --> 00:02:55.550
So you can check that out on the
Google Developers YouTube

00:02:55.550 --> 00:02:58.750
channel, just search for
Apps Script triggers.

00:02:58.750 --> 00:03:01.440
And along those lines, we have
two other special GDLs like

00:03:01.440 --> 00:03:05.450
this coming up in the next
couple of weeks.

00:03:05.450 --> 00:03:08.630
Next week we're doing one about
integrating Google Apps

00:03:08.630 --> 00:03:10.210
Script with Twilio.

00:03:10.210 --> 00:03:12.860
If you haven't used Twilio,
it's not a Google product,

00:03:12.860 --> 00:03:16.190
it's another company altogether,
that makes a

00:03:16.190 --> 00:03:20.230
really developer-friendly
API for interacting

00:03:20.230 --> 00:03:21.810
with SMS and Voice.

00:03:21.810 --> 00:03:25.820
So it's kind like a bridge you
can use to send messages to

00:03:25.820 --> 00:03:29.130
phones, receive phone calls,
receive text messages.

00:03:29.130 --> 00:03:31.620
It's really powerful and allows
for a lot of cool

00:03:31.620 --> 00:03:32.160
integrations.

00:03:32.160 --> 00:03:34.880
It's no longer just that your
script can be stuck in a

00:03:34.880 --> 00:03:35.790
spreadsheet.

00:03:35.790 --> 00:03:39.370
It's now accessible on your
phone and beyond.

00:03:39.370 --> 00:03:41.030
So it's really kind
of a neat thing.

00:03:41.030 --> 00:03:42.720
And so my colleague, Arun,
is going to be

00:03:42.720 --> 00:03:43.440
presenting on that.

00:03:43.440 --> 00:03:48.130
And you could find that on the
Google Developers Live page,

00:03:48.130 --> 00:03:48.800
which you can search for.

00:03:48.800 --> 00:03:52.350
This one is called Adding Voice
and SMS to Google Apps

00:03:52.350 --> 00:03:54.660
using Twilio in Apps Script.

00:03:54.660 --> 00:03:56.770
And then one more of those that
we have, this is a little

00:03:56.770 --> 00:03:57.370
bit in the future now.

00:03:57.370 --> 00:03:59.040
I think it's about
two weeks out.

00:03:59.040 --> 00:04:01.840
We're doing one on using Charts

00:04:01.840 --> 00:04:03.420
Dashboards with Apps Script.

00:04:03.420 --> 00:04:06.000
So as we mentioned, it's usually
the people who love

00:04:06.000 --> 00:04:08.160
data that are doing things
in Apps Script.

00:04:08.160 --> 00:04:11.130
And one of the best things you
can do with data is display

00:04:11.130 --> 00:04:12.030
some charts.

00:04:12.030 --> 00:04:14.570
It's a great way to visually,
in an instant, see

00:04:14.570 --> 00:04:16.380
trends in the data.

00:04:16.380 --> 00:04:19.779
And so along those lines, Apps
Script supports some

00:04:19.779 --> 00:04:23.110
capabilities of the
Google Charts API.

00:04:23.110 --> 00:04:26.510
And one of those that we do
support is Dashboards.

00:04:26.510 --> 00:04:28.810
Dashboards are really great in
that they allow you to take

00:04:28.810 --> 00:04:32.750
your data set and display one
data set in a number of charts

00:04:32.750 --> 00:04:35.350
and then add controls that
allow you to dynamically

00:04:35.350 --> 00:04:38.020
filter which data is
being displayed.

00:04:38.020 --> 00:04:40.530
And so that was something we
added to Google Apps Script a

00:04:40.530 --> 00:04:41.570
couple of months ago.

00:04:41.570 --> 00:04:43.460
And we've seen some people
really excited about it.

00:04:43.460 --> 00:04:45.500
So we're going to do an episode
just dedicated to

00:04:45.500 --> 00:04:48.330
Charts and Dashboards by
my colleague Kalyan.

00:04:48.330 --> 00:04:49.930
And that will be coming to
you in couple weeks.

00:04:49.930 --> 00:04:50.950
So stay tuned.

00:04:50.950 --> 00:04:52.340
All of this, like I said,
is on the Google

00:04:52.340 --> 00:04:53.800
Developers Live page.

00:04:53.800 --> 00:04:58.870
You can go there and look for
our Apps Script GDLs.

00:04:58.870 --> 00:05:01.060
So that's about it
on the news.

00:05:01.060 --> 00:05:02.030
Let's go to your questions.

00:05:02.030 --> 00:05:03.840
Let's see if we have anybody
in the Hangout that has any

00:05:03.840 --> 00:05:05.090
questions today.

00:05:08.090 --> 00:05:10.083
Welcome, does anybody in the
Hangout have any questions.

00:05:14.940 --> 00:05:18.540
Well, if you do have questions,
feel free to chime

00:05:18.540 --> 00:05:19.870
in in a little bit.

00:05:19.870 --> 00:05:21.480
We'll keep your audio
on there.

00:05:21.480 --> 00:05:22.240
So just chime in.

00:05:22.240 --> 00:05:23.890
And if you have any questions,
we'll answer them.

00:05:23.890 --> 00:05:26.720
But until then, feel free
to tune in and listen to

00:05:26.720 --> 00:05:28.090
what's going on.

00:05:28.090 --> 00:05:30.650
We do have some questions in the
Google Moderator asked by

00:05:30.650 --> 00:05:33.900
some of our users
ahead of time.

00:05:33.900 --> 00:05:36.100
There's actually some really
great ones about scriptdb.

00:05:36.100 --> 00:05:37.610
We have two questions
about scriptdb.

00:05:37.610 --> 00:05:41.395
So scriptdb is a built-in data
store to Apps Script.

00:05:41.395 --> 00:05:43.780
It's a JavaScript object
data store.

00:05:43.780 --> 00:05:46.380
So it's kind of putting objects
in, and then querying

00:05:46.380 --> 00:05:47.190
for them later.

00:05:47.190 --> 00:05:49.610
It's not very similar to SQL.

00:05:49.610 --> 00:05:50.740
It works a little
bit differently.

00:05:50.740 --> 00:05:54.600
But the same basic pattern,
store something, get it back.

00:05:54.600 --> 00:05:57.730
And so the questions we have
here, the first one is in

00:05:57.730 --> 00:06:01.685
scriptdb if I store an object
containing functions, let's

00:06:01.685 --> 00:06:05.370
say, like to find in the
constructor of an object, the

00:06:05.370 --> 00:06:07.760
user here noticed that they're
lost when you store it and

00:06:07.760 --> 00:06:10.020
then later retrieve
it from scriptdb.

00:06:10.020 --> 00:06:11.880
He sees that the functions
come back as just plain

00:06:11.880 --> 00:06:13.100
strings sometimes.

00:06:13.100 --> 00:06:14.630
He's like is that inevitable?

00:06:14.630 --> 00:06:17.460
Is there no way to do class
definitions and store those

00:06:17.460 --> 00:06:18.850
into scriptdb?

00:06:18.850 --> 00:06:22.910
And unfortunately, the short
answer there is, yes.

00:06:22.910 --> 00:06:25.600
In JavaScript you can create
objects that have both data

00:06:25.600 --> 00:06:27.710
and functions just
like you can in

00:06:27.710 --> 00:06:29.210
other programming languages.

00:06:29.210 --> 00:06:32.820
However, when you convert a
JavaScript object to JSON, the

00:06:32.820 --> 00:06:36.090
JavaScript Object Notation,
functions are not preserved.

00:06:36.090 --> 00:06:37.460
Only data is preserved.

00:06:37.460 --> 00:06:40.790
And this is the underlying
technology of scriptdb.

00:06:40.790 --> 00:06:42.850
And so what it means is if you
have an object that has some

00:06:42.850 --> 00:06:45.940
data and some functions and
you stored it in scriptdb,

00:06:45.940 --> 00:06:47.265
that function, those
functions, are

00:06:47.265 --> 00:06:48.580
all going to be lost.

00:06:48.580 --> 00:06:52.610
It's just the nature of how JSON
works is that functional

00:06:52.610 --> 00:06:55.240
code exists when it's in memory,
but it can't persist

00:06:55.240 --> 00:06:56.490
when you go JSON.

00:06:56.490 --> 00:06:58.480
So that is a limitation.

00:06:58.480 --> 00:07:00.230
I think if you wanted to work
with that, if you wanted to

00:07:00.230 --> 00:07:03.380
have complex objects, store
them, and bring them up later,

00:07:03.380 --> 00:07:05.220
you'd have to do a little
bit of extra work.

00:07:05.220 --> 00:07:08.990
Like, for instance, have the
constructor for an object take

00:07:08.990 --> 00:07:13.560
in all the data that was their
previously, put that into the

00:07:13.560 --> 00:07:15.380
right places, and then
have the rest of

00:07:15.380 --> 00:07:16.190
the functions there.

00:07:16.190 --> 00:07:18.090
So there are probably some
workarounds if you're skilled

00:07:18.090 --> 00:07:20.730
at JavaScript and
object-oriented programming in

00:07:20.730 --> 00:07:24.220
JavaScript that you could put
the data into scriptdb, pull

00:07:24.220 --> 00:07:26.520
it out, and then merge it back
in with the functions later.

00:07:26.520 --> 00:07:29.380
It's going to take a little
bit of work though.

00:07:29.380 --> 00:07:32.360
And then another question here
about scriptdb is they want to

00:07:32.360 --> 00:07:35.570
know is it possible to store
an object that references

00:07:35.570 --> 00:07:38.870
another one that's already been
stored without having to

00:07:38.870 --> 00:07:40.500
store it once again as a copy.

00:07:40.500 --> 00:07:42.460
So I guess what they're talking
about here is you have

00:07:42.460 --> 00:07:46.090
some sort of upper-level object
that has then maybe an

00:07:46.090 --> 00:07:49.250
array of children objects
inside of it.

00:07:49.250 --> 00:07:52.240
And those children objects, he
said, are already in scriptdb,

00:07:52.240 --> 00:07:54.760
but he wants to maintain this
linkage that the parent object

00:07:54.760 --> 00:07:56.700
has some children.

00:07:56.700 --> 00:07:58.790
And there is no way for
scriptdb to do this

00:07:58.790 --> 00:08:02.530
automatically where you could
just tell it that this is in

00:08:02.530 --> 00:08:04.690
there, and then when you pull
it out, it will all link up

00:08:04.690 --> 00:08:05.880
again magically.

00:08:05.880 --> 00:08:07.400
Unfortunately, that's not
going to happen today,

00:08:07.400 --> 00:08:08.320
scriptdb is very

00:08:08.320 --> 00:08:10.210
straightforward in that regard.

00:08:10.210 --> 00:08:13.660
So I think your best bet would
be rather than to store a copy

00:08:13.660 --> 00:08:16.320
of these objects or to hope
for some linking,

00:08:16.320 --> 00:08:18.430
rather store the IDs.

00:08:18.430 --> 00:08:21.480
So if you already have stored
the child objects, you got an

00:08:21.480 --> 00:08:23.130
ID at the time that
you stored them.

00:08:23.130 --> 00:08:26.960
Use those IDs as keys, and store
the keys inside of your

00:08:26.960 --> 00:08:28.000
parent object.

00:08:28.000 --> 00:08:30.850
So when you retrieve the parent,
when you look into the

00:08:30.850 --> 00:08:32.159
array of children, you'll
see there's a whole

00:08:32.159 --> 00:08:33.000
bunch of keys there.

00:08:33.000 --> 00:08:35.190
You'll then need to make a
second call to scriptdb to

00:08:35.190 --> 00:08:36.409
fetch all the children out

00:08:36.409 --> 00:08:40.110
So when you're working with
a more complex objects

00:08:40.110 --> 00:08:42.169
structure, it's going to take
some additional requests to

00:08:42.169 --> 00:08:44.590
scriptdb, but it's certainly
possible to

00:08:44.590 --> 00:08:47.980
achieve the end result.

00:08:47.980 --> 00:08:49.080
And so the last one--

00:08:49.080 --> 00:08:52.910
I'll share another one we have
here in the Moderator is

00:08:52.910 --> 00:08:55.470
somebody who's creating a
script for a number of

00:08:55.470 --> 00:08:58.170
different Google Sites or
creating a script that creates

00:08:58.170 --> 00:09:01.450
Google Sites using the Sites
app that we have built into

00:09:01.450 --> 00:09:02.340
Apps Script.

00:09:02.340 --> 00:09:05.220
And they're wondering
how can I test if a

00:09:05.220 --> 00:09:07.910
site already exists?

00:09:07.910 --> 00:09:10.640
What they're using today is
they're using a URLfetch,

00:09:10.640 --> 00:09:14.170
which is our service for just
making basic HTTP requests, to

00:09:14.170 --> 00:09:17.350
actually fetch the site and see
if there's anything there.

00:09:17.350 --> 00:09:20.120
So they know what the URL should
be if the site exists,

00:09:20.120 --> 00:09:21.930
but they just don't know if it
actually was created yet, and

00:09:21.930 --> 00:09:23.180
so they're fetching it
to see if it's there.

00:09:23.180 --> 00:09:25.400
They're wondering is
there a better way.

00:09:25.400 --> 00:09:27.740
I think that's actually
not a terrible way.

00:09:27.740 --> 00:09:29.760
Making one HTTP request to
determine if something is

00:09:29.760 --> 00:09:31.280
there is not that bad.

00:09:31.280 --> 00:09:33.000
It may be possible
using Sites app.

00:09:33.000 --> 00:09:35.770
You could fetch a list of all
your sites, comb through that

00:09:35.770 --> 00:09:37.810
list and see if this site
is there or not.

00:09:37.810 --> 00:09:39.340
That's another thing
you could do.

00:09:39.340 --> 00:09:41.460
But as far as which is
better, I think you

00:09:41.460 --> 00:09:42.190
could go either route.

00:09:42.190 --> 00:09:44.340
Probably sticking with Sites
app is going to be the most

00:09:44.340 --> 00:09:45.480
straightforward if someone
is reading

00:09:45.480 --> 00:09:46.680
your code in the future.

00:09:46.680 --> 00:09:50.660
But it's really up to your own
decision making there.

00:09:50.660 --> 00:09:51.850
So there was a couple
from the Moderator.

00:09:51.850 --> 00:09:53.980
Just to make sure people in
the Hangout don't have any

00:09:53.980 --> 00:09:56.000
questions, I'm going to
throw it back to them.

00:09:56.000 --> 00:09:57.730
You guys in the Hangout have
any questions for me today?

00:10:00.290 --> 00:10:03.665
Any Apps Script problems
bugging you?

00:10:03.665 --> 00:10:06.050
All right, that's good news then
if there's no problems.

00:10:06.050 --> 00:10:08.180
All right, so we do have one
more question here in the

00:10:08.180 --> 00:10:09.900
Moderator which I'll field.

00:10:09.900 --> 00:10:11.960
And feel free to jump in guys in
the Hangout if you have any

00:10:11.960 --> 00:10:14.060
additional questions.

00:10:14.060 --> 00:10:16.330
So the question here was are
there any plans to add

00:10:16.330 --> 00:10:19.790
services like Voice or Payment
into Apps Script?

00:10:19.790 --> 00:10:22.180
So, yeah, I mean, certainly what
we love about Apps Script

00:10:22.180 --> 00:10:24.140
is it's a great way to integrate
a whole bunch of

00:10:24.140 --> 00:10:27.200
Google services really easily.

00:10:27.200 --> 00:10:31.460
Built in, and with no additional
work required, you

00:10:31.460 --> 00:10:35.740
can access Gmail, you can access
Calendar, Sites, your

00:10:35.740 --> 00:10:39.770
Docs, your Drive, Spreadsheets,
it's all there.

00:10:39.770 --> 00:10:42.370
But by all, it's not everything
that Google offers.

00:10:42.370 --> 00:10:44.960
So we do have some other
services at Google, like

00:10:44.960 --> 00:10:47.480
Voice, like Payments that aren't
right now built into

00:10:47.480 --> 00:10:49.140
Apps Script.

00:10:49.140 --> 00:10:52.920
And it's really, I think, part
of our goal to make sure that

00:10:52.920 --> 00:10:55.290
Apps Script continues to be a
great place to integrate,

00:10:55.290 --> 00:10:56.720
continues to be a great
place to work with

00:10:56.720 --> 00:10:57.480
these different services.

00:10:57.480 --> 00:10:59.550
So I don't think we're ever
going to shut the door on

00:10:59.550 --> 00:11:02.090
bringing more services on board,
but at this time I

00:11:02.090 --> 00:11:05.030
really don't have any specific
plans about when you could

00:11:05.030 --> 00:11:08.160
expect to see those
in Apps Script.

00:11:08.160 --> 00:11:10.360
I'd say there's one thing that's
probably going to--

00:11:10.360 --> 00:11:12.790
if you want a guideline for when
you could expect to see

00:11:12.790 --> 00:11:15.870
some in Apps Script, if they're
already is an API for

00:11:15.870 --> 00:11:18.870
it that exists outside of Apps
Script, it's certainly going

00:11:18.870 --> 00:11:21.430
to be a lot easier for
the team to bring

00:11:21.430 --> 00:11:22.100
it into Apps Script.

00:11:22.100 --> 00:11:25.410
So if you see an API that Google
already produces and

00:11:25.410 --> 00:11:28.630
you want to access that same
functionality in Apps Script,

00:11:28.630 --> 00:11:30.810
you're probably going to have a
better chance of requesting

00:11:30.810 --> 00:11:32.810
that one and seeing some action
than if there never was

00:11:32.810 --> 00:11:35.240
an API in the first place just
because of how things are

00:11:35.240 --> 00:11:37.300
implemented on our side.

00:11:37.300 --> 00:11:38.600
But that was a good question.

00:11:38.600 --> 00:11:44.200
And I think as the Twilio GDL
that we're doing next week

00:11:44.200 --> 00:11:47.800
indicates, integrating with
Voice and Text is obviously an

00:11:47.800 --> 00:11:49.080
important use case for
some people and

00:11:49.080 --> 00:11:49.880
really opens some doors.

00:11:49.880 --> 00:11:53.220
So it would be great if you
could access Google Voice,

00:11:53.220 --> 00:11:55.570
which does some of those same
functionalities, but today

00:11:55.570 --> 00:11:56.820
that's just not there.

00:11:58.990 --> 00:12:01.410
So that is all the questions
that I have here in the

00:12:01.410 --> 00:12:04.895
Moderator One last chance
for the Hangout folks.

00:12:04.895 --> 00:12:07.180
If you have any questions,
feel free to jump in now.

00:12:10.060 --> 00:12:13.110
AUDIENCE: I want to
ask a question.

00:12:13.110 --> 00:12:20.286
What is the best practice to
disable all the components in

00:12:20.286 --> 00:12:25.900
a vertical panel or a form
panel right now?

00:12:25.900 --> 00:12:31.630
Because there isn't a
functionality to disable all

00:12:31.630 --> 00:12:38.100
the Widgets of the [INAUDIBLE],
for example.

00:12:38.100 --> 00:12:42.170
I mean, one cord to disable all
the same Widget of, for

00:12:42.170 --> 00:12:43.420
example, a particular panel
in a full panel.

00:12:47.190 --> 00:12:49.913
ERIC KOLEDA: I'm sorry, my ear
piece was a little low.

00:12:49.913 --> 00:12:50.700
I had trouble hearing you.

00:12:50.700 --> 00:12:52.330
So you wanted to disable
certain functionality?

00:12:52.330 --> 00:12:53.990
Can you say again which
functionality you were

00:12:53.990 --> 00:12:55.720
interested in?

00:12:55.720 --> 00:12:58.390
AUDIENCE: A functionality to
disable all the chart region

00:12:58.390 --> 00:12:59.660
of a full panel.

00:12:59.660 --> 00:13:07.250
For example, I have two text
boxes in a full panel and a

00:13:07.250 --> 00:13:08.040
Submit button.

00:13:08.040 --> 00:13:14.335
When I click the Submit button,
I want all the Widget,

00:13:14.335 --> 00:13:18.550
the chart of the component, for
example, with the one to

00:13:18.550 --> 00:13:20.254
be disabled.

00:13:20.254 --> 00:13:20.656
ERIC KOLEDA: I see.

00:13:20.656 --> 00:13:23.430
So I guess the situation,
if I'm guessing--

00:13:23.430 --> 00:13:27.410
AUDIENCE: Right now, I'm able to
store all video of the Chat

00:13:27.410 --> 00:13:34.740
Widget and disable them with,
for example, our full cycle.

00:13:34.740 --> 00:13:34.860
ERIC KOLEDA: Right.

00:13:34.860 --> 00:13:36.620
Yeah, I guess you have to do it
individually and remember

00:13:36.620 --> 00:13:38.160
which Widgets are in there.

00:13:38.160 --> 00:13:39.380
Yeah, I can see what
you're saying.

00:13:39.380 --> 00:13:42.570
So is the use case that when
someone clicks that button,

00:13:42.570 --> 00:13:44.740
there's going to be a little
bit of a delay in the

00:13:44.740 --> 00:13:46.350
processing and you don't
want people to

00:13:46.350 --> 00:13:47.600
change the form values?

00:13:51.080 --> 00:13:52.720
AUDIENCE: Sorry?

00:13:52.720 --> 00:13:53.380
ERIC KOLEDA: What
is the purpose

00:13:53.380 --> 00:13:56.690
of doing the disabling?

00:13:56.690 --> 00:13:59.150
Why is that a good thing?

00:13:59.150 --> 00:14:05.700
AUDIENCE: For example, I use to
disable all the component

00:14:05.700 --> 00:14:10.950
in a user insert case where I
have to show all this pull out

00:14:10.950 --> 00:14:13.870
of the full panel.

00:14:13.870 --> 00:14:17.410
Because some people have to see
a part of the full panel

00:14:17.410 --> 00:14:20.700
and other people have all
the [INAUDIBLE] to them.

00:14:20.700 --> 00:14:26.975
So I have a different front
panel and each of the front

00:14:26.975 --> 00:14:39.410
panel based on if the app user
is a part of a group, I

00:14:39.410 --> 00:14:41.550
disable or enable
a full panel.

00:14:41.550 --> 00:14:42.950
ERIC KOLEDA: I see.

00:14:42.950 --> 00:14:45.590
OK, yeah, I guess I can
see that is a little

00:14:45.590 --> 00:14:47.565
bit of extra work.

00:14:47.565 --> 00:14:50.300
You can't just disable a whole
panel at once, you have to do

00:14:50.300 --> 00:14:52.500
it on widget-by-widget basis.

00:14:52.500 --> 00:14:54.010
That's something we can
look into as far

00:14:54.010 --> 00:14:56.580
as requesting that.

00:14:56.580 --> 00:15:00.840
I'd say that for some of the
feature requests, where if

00:15:00.840 --> 00:15:03.000
it's possible to do it and it
just requires a little of

00:15:03.000 --> 00:15:06.280
extra code, those usually aren't
as high priority when

00:15:06.280 --> 00:15:07.970
there's something that people
really want to do and it's

00:15:07.970 --> 00:15:09.120
just impossible to do.

00:15:09.120 --> 00:15:11.400
So for something like this, it's
still a good idea, and

00:15:11.400 --> 00:15:14.510
it's still something
we can definitely

00:15:14.510 --> 00:15:15.340
talk to the team about.

00:15:15.340 --> 00:15:18.250
But I would say for the time
being, you're probably going

00:15:18.250 --> 00:15:20.220
to have to work with
what's there.

00:15:20.220 --> 00:15:23.400
But that said, about feature
requests just in case we have

00:15:23.400 --> 00:15:27.970
some people new on the episode
today, if you use Apps Script

00:15:27.970 --> 00:15:30.400
a lot, and there's a feature
that's really missing or that

00:15:30.400 --> 00:15:32.280
you think would be really great
to have, we have an

00:15:32.280 --> 00:15:34.990
issue tracker which is for
logging both bugs with the

00:15:34.990 --> 00:15:36.580
product and also features.

00:15:36.580 --> 00:15:38.600
So if there's a feature
you'd like to see, go

00:15:38.600 --> 00:15:39.450
to our issue tracker.

00:15:39.450 --> 00:15:42.480
You can get to it from our
documentation, and just fill

00:15:42.480 --> 00:15:45.460
in what the feature is that
you'd like to see and why you

00:15:45.460 --> 00:15:46.640
think it's really important.

00:15:46.640 --> 00:15:49.590
And then we'll continue to
monitor that and see if

00:15:49.590 --> 00:15:52.380
there's enough interest
and if it's possible.

00:15:52.380 --> 00:15:52.770
AUDIENCE: OK.

00:15:52.770 --> 00:15:56.790
No, I have already reported
this enhancement.

00:15:56.790 --> 00:15:57.680
ERIC KOLEDA: Fantastic.

00:15:57.680 --> 00:16:00.100
Yeah, we're a little behind on
coming through some of those,

00:16:00.100 --> 00:16:01.460
but we're catching
up this week.

00:16:01.460 --> 00:16:03.690
So hopefully, we'll get to that
one in just a little bit.

00:16:06.790 --> 00:16:09.560
All right, great.

00:16:09.560 --> 00:16:11.720
Let me just check the moderator
one more time.

00:16:11.720 --> 00:16:13.650
It's looks like there are
no new questions.

00:16:13.650 --> 00:16:14.900
One last chance on
the Hangout.

00:16:18.259 --> 00:16:18.750
No.

00:16:18.750 --> 00:16:19.900
Sounds like we're all good.

00:16:19.900 --> 00:16:20.130
All right.

00:16:20.130 --> 00:16:22.350
Well, thanks everyone for
joining me today.

00:16:22.350 --> 00:16:23.593
We'll be back--

00:16:23.593 --> 00:16:25.740
I don't know if we'll
be back next week.

00:16:25.740 --> 00:16:27.200
Probably not next week.

00:16:27.200 --> 00:16:29.590
But certainly after
the holidays.

00:16:29.590 --> 00:16:30.930
Obviously, during the holidays
things get a little

00:16:30.930 --> 00:16:31.380
complicated.

00:16:31.380 --> 00:16:33.100
But certainly after the
holidays, we'll back in the

00:16:33.100 --> 00:16:36.220
New Year with a whole bunch more
episodes of Office Hours.

00:16:36.220 --> 00:16:38.360
And as we mentioned, in the
coming weeks we'll also have

00:16:38.360 --> 00:16:43.040
some special additions of our
Apps Script episodes focused

00:16:43.040 --> 00:16:44.620
on particular topics.

00:16:44.620 --> 00:16:46.710
So in the meantime, if you have
questions about how to

00:16:46.710 --> 00:16:49.840
use Apps Script, me and the rest
of the team, we're all on

00:16:49.840 --> 00:16:54.120
the Stack Overflow monitoring
the Google-apps-script tag.

00:16:54.120 --> 00:16:55.730
So tag your questions
with that.

00:16:55.730 --> 00:16:57.750
There's a whole great community
out there of other

00:16:57.750 --> 00:16:59.400
users who will be able
to help you.

00:16:59.400 --> 00:17:01.900
And we'll chime in if nobody
else knows the answer.

00:17:01.900 --> 00:17:04.839
So until then, thank you very
much for joining me, and I'll

00:17:04.839 --> 00:17:06.089
see you later.

