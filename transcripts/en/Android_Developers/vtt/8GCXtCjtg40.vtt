WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.892
[MUSIC PLAYING]

00:00:06.630 --> 00:00:08.260
LUKAS BERGSTROM: Good morning.

00:00:08.260 --> 00:00:11.610
Thanks for getting up early
to be here with us even

00:00:11.610 --> 00:00:13.530
despite the fact that
some of our thunder

00:00:13.530 --> 00:00:17.790
might have been stolen by the
three or four presentations

00:00:17.790 --> 00:00:21.420
before this that demoed
the Navigation Editor.

00:00:21.420 --> 00:00:24.900
Luckily, we have time to go
into a little bit more detail

00:00:24.900 --> 00:00:27.130
than any of the
previous presentations.

00:00:27.130 --> 00:00:29.640
So there's a lot of
good material here.

00:00:29.640 --> 00:00:33.000
And I'm Lukas, Product Manager
for Architecture Components,

00:00:33.000 --> 00:00:37.050
and with me, I have
Ian and Sergey, who

00:00:37.050 --> 00:00:40.170
built the navigation component.

00:00:40.170 --> 00:00:42.860
And navigation, if
you think about it,

00:00:42.860 --> 00:00:46.350
is a problem that pretty
much every app on Android

00:00:46.350 --> 00:00:48.240
has to solve.

00:00:48.240 --> 00:00:50.580
But until now, we
haven't really given you

00:00:50.580 --> 00:00:53.700
anything to do that with other
than Start Activity, which,

00:00:53.700 --> 00:00:56.910
for various reasons, is not
the best way to go about that.

00:00:59.670 --> 00:01:01.670
So if you think about
our job of making

00:01:01.670 --> 00:01:04.370
Android development
easier, navigation

00:01:04.370 --> 00:01:10.430
was a common problem
with no real solution.

00:01:10.430 --> 00:01:12.890
And that means that there
are a lot of things that you

00:01:12.890 --> 00:01:15.200
have to solve on your own.

00:01:15.200 --> 00:01:19.430
And those ranged from how to
commit fragment transactions,

00:01:19.430 --> 00:01:23.400
hopefully without
throwing an exception,

00:01:23.400 --> 00:01:26.250
how to test that navigation is
happening correctly and that

00:01:26.250 --> 00:01:31.310
the right things are happening
when navigation occurs,

00:01:31.310 --> 00:01:34.350
how to map deep links to
various places in your app,

00:01:34.350 --> 00:01:39.000
and how to keep those deep link
schemes up-to-date as your app

00:01:39.000 --> 00:01:43.740
navigational structure changes,
passing arguments from place

00:01:43.740 --> 00:01:45.360
to place--

00:01:45.360 --> 00:01:50.350
again, we don't give you a type
safe way to do that today--

00:01:50.350 --> 00:01:53.140
how to make sure that Up and
Back take users to the right

00:01:53.140 --> 00:01:57.490
places, particularly in
more difficult situations

00:01:57.490 --> 00:02:00.610
like someone deep linking deep
into your app's navigation

00:02:00.610 --> 00:02:03.380
hierarchy.

00:02:03.380 --> 00:02:05.960
And so what this means
is by the time you finish

00:02:05.960 --> 00:02:08.539
solving these problems,
you've typically

00:02:08.539 --> 00:02:10.039
gone one of two directions.

00:02:10.039 --> 00:02:13.820
You've either written 60%
of a navigation framework

00:02:13.820 --> 00:02:16.900
or you've got a lot of
error-prone boilerplate

00:02:16.900 --> 00:02:19.640
everywhere navigation needs
to happen in your app.

00:02:19.640 --> 00:02:21.980
So you've got a bunch of
parallel lines of code

00:02:21.980 --> 00:02:24.620
solving these various problems,
and the whole structure

00:02:24.620 --> 00:02:25.440
is fairly brittle.

00:02:30.030 --> 00:02:35.370
And individually, these
problems are pretty tractable,

00:02:35.370 --> 00:02:38.619
but if you look at a
real world example,

00:02:38.619 --> 00:02:40.410
you can see that they
can get pretty hairy.

00:02:40.410 --> 00:02:43.560
So say that I have an
item screen in my app,

00:02:43.560 --> 00:02:46.960
and it's accessible
via deep link.

00:02:46.960 --> 00:02:48.760
So far so good.

00:02:48.760 --> 00:02:53.320
But if someone had navigated
to the screen via opening

00:02:53.320 --> 00:02:55.510
the app from the
home screen, they

00:02:55.510 --> 00:02:58.630
would have a couple other
screens on the back stack.

00:02:58.630 --> 00:03:01.420
And so hitting it
up, we want them

00:03:01.420 --> 00:03:04.840
to take that not out of the
app from the item screen.

00:03:04.840 --> 00:03:07.330
We want them to go to the
category screen and then

00:03:07.330 --> 00:03:08.980
the home screen.

00:03:08.980 --> 00:03:11.380
And that means that if someone
deep links into the app,

00:03:11.380 --> 00:03:13.570
we need to synthesize
these screens

00:03:13.570 --> 00:03:18.490
and add them to the up stack
before showing the item screen.

00:03:18.490 --> 00:03:20.560
And talking to a
third-party developer,

00:03:20.560 --> 00:03:23.530
he told me it's when you're in
the middle of writing the code

00:03:23.530 --> 00:03:26.110
to do this, to
synthesize these screens

00:03:26.110 --> 00:03:29.080
and add them to the
up and back stack

00:03:29.080 --> 00:03:32.470
but only on a deep link,
that's when you start

00:03:32.470 --> 00:03:34.180
to feel like maybe
you're solving

00:03:34.180 --> 00:03:35.947
a failure of the framework.

00:03:38.750 --> 00:03:40.930
So it's to help solve
problems like that that we're

00:03:40.930 --> 00:03:42.310
launching Navigation.

00:03:42.310 --> 00:03:46.750
And what we're giving
you is a visual tool

00:03:46.750 --> 00:03:49.670
that lets you edit the
navigation graph of your app,

00:03:49.670 --> 00:03:52.530
which is represented in XML.

00:03:52.530 --> 00:03:55.890
And that lets you define a
set of available navigation

00:03:55.890 --> 00:03:59.040
actions, arguments you can
pass from place to place,

00:03:59.040 --> 00:04:01.410
things like visual transitions.

00:04:01.410 --> 00:04:04.020
And then a single
Navigate call activates

00:04:04.020 --> 00:04:06.540
all of that at runtime.

00:04:06.540 --> 00:04:10.290
And so last but not least,
that means one thing you never

00:04:10.290 --> 00:04:13.110
have to worry about again is
touching a fragment transaction

00:04:13.110 --> 00:04:15.558
with your bare hands.

00:04:15.558 --> 00:04:17.502
[APPLAUSE]

00:04:22.362 --> 00:04:27.100
So what the navigation
graph is essentially

00:04:27.100 --> 00:04:29.910
just a set of what are
the possible destinations

00:04:29.910 --> 00:04:32.310
people can reach in my app.

00:04:32.310 --> 00:04:36.480
And those usually correspond
to screens, but not always.

00:04:36.480 --> 00:04:40.170
So you can have the
navigation control

00:04:40.170 --> 00:04:45.420
or just changing the contents
of a smaller part of the screen,

00:04:45.420 --> 00:04:47.400
but it's a set of
navigation destinations

00:04:47.400 --> 00:04:49.050
and the actions that link them.

00:04:49.050 --> 00:04:51.390
And the actions really
represent how you

00:04:51.390 --> 00:04:53.370
can get from place to place.

00:04:53.370 --> 00:04:58.200
So to actually navigate from
point A to point B in an app,

00:04:58.200 --> 00:05:00.510
you're just going to call
the correct navigation

00:05:00.510 --> 00:05:03.100
action at runtime.

00:05:03.100 --> 00:05:06.054
So let's take a look at
what this looks like.

00:05:06.054 --> 00:05:07.470
And let's switch
over to the demo.

00:05:11.040 --> 00:05:11.560
OK.

00:05:11.560 --> 00:05:15.910
So what we see here is a set
of navigation destinations,

00:05:15.910 --> 00:05:18.070
and these are
fragment destinations,

00:05:18.070 --> 00:05:21.100
although other
options are possible.

00:05:21.100 --> 00:05:24.130
And the lines connecting
them with the arrowheads

00:05:24.130 --> 00:05:26.540
are actions.

00:05:26.540 --> 00:05:29.150
And those actions
actually generate methods

00:05:29.150 --> 00:05:32.460
that you can call at runtime.

00:05:32.460 --> 00:05:35.740
This whole thing is backed by
XML, as you all know and love.

00:05:39.110 --> 00:05:41.660
And the XML and the
Navigation Editor

00:05:41.660 --> 00:05:43.700
have the same set
of capabilities,

00:05:43.700 --> 00:05:46.610
so you can use either one.

00:05:46.610 --> 00:05:49.350
We're going to
add a screen here.

00:05:49.350 --> 00:05:52.100
And what you're seeing is a
set of available activities

00:05:52.100 --> 00:05:55.160
and fragments in my app.

00:05:55.160 --> 00:05:58.110
OK, so we just added
an option for them

00:05:58.110 --> 00:06:02.140
to actually answer this question
successfully and win the game.

00:06:02.140 --> 00:06:04.240
So now we're going
to add an action

00:06:04.240 --> 00:06:05.790
to navigate to that screen.

00:06:10.340 --> 00:06:11.120
Great.

00:06:11.120 --> 00:06:13.880
And so that
navigation action has

00:06:13.880 --> 00:06:16.550
a bunch of options that
you can set, obviously.

00:06:16.550 --> 00:06:18.635
We're going to talk about
those a little bit more.

00:06:21.290 --> 00:06:23.600
For now, we're going
to do one thing.

00:06:23.600 --> 00:06:25.490
So we're going to
say, if they've

00:06:25.490 --> 00:06:28.370
gotten to this
Congratulations screen, that

00:06:28.370 --> 00:06:30.020
means the game is over.

00:06:30.020 --> 00:06:32.240
So hitting Back
shouldn't take them back

00:06:32.240 --> 00:06:35.490
into a game that
no longer exists.

00:06:35.490 --> 00:06:39.080
So what that means is we
want to, on that action,

00:06:39.080 --> 00:06:44.854
say, let's pop to
the Match screen.

00:06:44.854 --> 00:06:46.770
And that means I'm going
to pop off everything

00:06:46.770 --> 00:06:50.520
on the back stack in between
this destination and the match

00:06:50.520 --> 00:06:51.510
screen.

00:06:51.510 --> 00:06:55.260
So when the user gets to
the Congratulations screen,

00:06:55.260 --> 00:06:57.690
when they hit Back, they're
just going to go straight

00:06:57.690 --> 00:07:00.070
to the Match screen.

00:07:00.070 --> 00:07:02.110
So a lot of other
options I can set,

00:07:02.110 --> 00:07:05.170
but we'll just talk
about that for now.

00:07:05.170 --> 00:07:09.640
Let's go back and look at the
Congratulations screen again.

00:07:09.640 --> 00:07:14.350
One other thing to mention,
the key thing that is set here,

00:07:14.350 --> 00:07:16.540
is the fragment class.

00:07:16.540 --> 00:07:20.620
And that's what's actually
instantiated at runtime.

00:07:20.620 --> 00:07:25.540
And we see layout previews here
because the Navigation Editor

00:07:25.540 --> 00:07:29.020
knows what layout is associated
with that navigation graph.

00:07:29.020 --> 00:07:30.940
And because it knows
what layout is associated

00:07:30.940 --> 00:07:33.100
with that navigation
graph, I can double

00:07:33.100 --> 00:07:35.170
click on that
fragment destination

00:07:35.170 --> 00:07:36.950
to get here into
the Layout Editor.

00:07:41.710 --> 00:07:42.280
Great.

00:07:42.280 --> 00:07:44.650
And everything that
I've just done here,

00:07:44.650 --> 00:07:47.230
adding this new destination
to the navigation

00:07:47.230 --> 00:07:50.740
graph, an action, changing
what that pop behavior

00:07:50.740 --> 00:07:53.110
of that action is, all
this stuff I can also

00:07:53.110 --> 00:07:55.700
do programmatically at runtime.

00:07:55.700 --> 00:07:59.860
So Navigation Editor,
XML or programmatic,

00:07:59.860 --> 00:08:00.820
all work just fine.

00:08:04.580 --> 00:08:05.691
Great.

00:08:05.691 --> 00:08:07.440
And now, I'm going to
hand this off to Ian

00:08:07.440 --> 00:08:11.349
to walk you through
some more detail.

00:08:11.349 --> 00:08:13.640
IAN LAKE: So the first question
that might come to mind

00:08:13.640 --> 00:08:16.010
is, wow, this is
a totally new way

00:08:16.010 --> 00:08:18.740
of structuring the
UI of your app.

00:08:18.740 --> 00:08:21.490
And kind of brings up
this question immediately

00:08:21.490 --> 00:08:25.351
like, OK, so what is my
activity actually meant to do.

00:08:25.351 --> 00:08:25.850
Right?

00:08:25.850 --> 00:08:29.690
So every kind of app has a
very different starting point

00:08:29.690 --> 00:08:32.419
from where you guys
are right now--

00:08:32.419 --> 00:08:35.600
or maybe as of two days ago--

00:08:35.600 --> 00:08:38.960
on how you've structured
the UI of your app.

00:08:38.960 --> 00:08:42.470
Some may be very activity-heavy,
very fragment-heavy, very much

00:08:42.470 --> 00:08:43.970
in a different system.

00:08:43.970 --> 00:08:47.040
All those are certainly
very valid places to be,

00:08:47.040 --> 00:08:50.960
but we're moving towards a model
where the activity is more just

00:08:50.960 --> 00:08:53.480
an entry point into your app.

00:08:53.480 --> 00:08:56.510
Rather than the
activity being the owner

00:08:56.510 --> 00:09:00.350
of the content of your
app, it's actually just

00:09:00.350 --> 00:09:03.530
what's going to store
that global state.

00:09:03.530 --> 00:09:05.660
So the global
navigations, so if you

00:09:05.660 --> 00:09:08.420
have bottom nav,
navigation drawers,

00:09:08.420 --> 00:09:10.520
you're still using
an action bar,

00:09:10.520 --> 00:09:13.630
those are the kind of things
that Activities manage,

00:09:13.630 --> 00:09:19.000
but it delegates to what we
call a NavHost for content.

00:09:19.000 --> 00:09:21.810
So our nice super
simple activity here.

00:09:21.810 --> 00:09:23.280
We have an action
bar on the top,

00:09:23.280 --> 00:09:26.520
a bottom nav on the bottom,
and this big white box

00:09:26.520 --> 00:09:27.220
in the middle.

00:09:27.220 --> 00:09:29.290
That's our NavHost.

00:09:29.290 --> 00:09:31.980
So in the world of
navigation, when

00:09:31.980 --> 00:09:34.556
you navigate between
different destinations

00:09:34.556 --> 00:09:36.180
in your app, what
you're actually doing

00:09:36.180 --> 00:09:38.970
is just replacing
everything inside that box.

00:09:38.970 --> 00:09:39.470
Right?

00:09:39.470 --> 00:09:43.470
So you have that global
navigation outside of that,

00:09:43.470 --> 00:09:45.540
and we have hooks that
you can hook that up

00:09:45.540 --> 00:09:50.370
to stay in sync with
the actual NavHost.

00:09:50.370 --> 00:09:53.920
So what is a super simple
version of this look like?

00:09:53.920 --> 00:09:57.870
Well, if you're using
fragments for destinations,

00:09:57.870 --> 00:10:01.200
you would want to use
our NavHost fragment.

00:10:01.200 --> 00:10:03.300
So here, we just have
a activity layout

00:10:03.300 --> 00:10:06.540
that is literally
just our one fragment.

00:10:06.540 --> 00:10:10.750
So you do this by including the
navigation fragment dependency

00:10:10.750 --> 00:10:12.690
as you might expect.

00:10:12.690 --> 00:10:15.270
If you're using a totally
different kind of destination,

00:10:15.270 --> 00:10:18.600
it would probably also have
a different kind of NavHost

00:10:18.600 --> 00:10:21.570
that you add here, whether
it's a custom view or whatever

00:10:21.570 --> 00:10:23.880
other item that they need.

00:10:23.880 --> 00:10:26.820
But for NavHost fragment,
we've set up a few convenience

00:10:26.820 --> 00:10:27.870
methods.

00:10:27.870 --> 00:10:30.330
The ability to set
what navigation

00:10:30.330 --> 00:10:32.940
graph you're using
in XML, so you

00:10:32.940 --> 00:10:35.490
don't need to do anything
programmatically to set it up.

00:10:35.490 --> 00:10:39.210
It'll just go to the start
destination of your graph

00:10:39.210 --> 00:10:41.190
by default.

00:10:41.190 --> 00:10:42.990
And then for fragments,
we can actually

00:10:42.990 --> 00:10:45.820
hook this up to the
system Back button.

00:10:45.820 --> 00:10:49.240
So we offer a method
to do exactly that.

00:10:49.240 --> 00:10:51.960
So you don't have to override
on Back pressed specifically

00:10:51.960 --> 00:10:53.280
for navigation.

00:10:53.280 --> 00:10:58.410
We'll hook up all that stuff
using the magic of fragments

00:10:58.410 --> 00:11:02.230
through this default
NavHost option.

00:11:02.230 --> 00:11:04.890
So that means that
our activity actually

00:11:04.890 --> 00:11:07.650
gets to be two lines of code.

00:11:07.650 --> 00:11:11.490
It would be two lines, but
it doesn't fit horizontally

00:11:11.490 --> 00:11:13.200
on a slide.

00:11:13.200 --> 00:11:15.690
But all we need to
do is just inflate

00:11:15.690 --> 00:11:19.650
our layouts, that content view,
and then hook up the Up button.

00:11:19.650 --> 00:11:23.070
Now normally, this
is a large operation,

00:11:23.070 --> 00:11:27.760
but because you've told us about
the structure of your graph,

00:11:27.760 --> 00:11:29.220
what we can do
is-- in this case,

00:11:29.220 --> 00:11:32.420
we're using a Kotlin
extension method on activity.

00:11:32.420 --> 00:11:37.200
It'll just be a static
method for Java users

00:11:37.200 --> 00:11:39.540
that allows us to
find the navigation

00:11:39.540 --> 00:11:42.000
controller by passing
in the ID, in this case,

00:11:42.000 --> 00:11:44.760
the ID of our NavHost fragment.

00:11:44.760 --> 00:11:47.430
And that just gives us
access to navigate up.

00:11:47.430 --> 00:11:50.220
And navigate up is going
to do the right thing

00:11:50.220 --> 00:11:52.410
based on your navigation graph.

00:11:52.410 --> 00:11:55.500
You don't need to actually
do a lot of extra work here.

00:11:55.500 --> 00:12:00.520
By giving us your graph, we
are able to do this for you.

00:12:00.520 --> 00:12:05.370
But for most apps, just
having a single thing

00:12:05.370 --> 00:12:07.380
is not actually what you have.

00:12:07.380 --> 00:12:10.120
Maybe you have something
a little bit more.

00:12:10.120 --> 00:12:15.460
So we've kind of set up a second
dependency, navigation-ui,

00:12:15.460 --> 00:12:18.180
which is really just a
set of static methods

00:12:18.180 --> 00:12:20.880
that connect your navigation
component with some

00:12:20.880 --> 00:12:23.440
of the material
design components,

00:12:23.440 --> 00:12:25.440
some of these things like
bottom nav and things

00:12:25.440 --> 00:12:28.830
like that that are very much in
that kind of global navigation

00:12:28.830 --> 00:12:29.970
space.

00:12:29.970 --> 00:12:34.030
But of course, it's
2018 so we have

00:12:34.030 --> 00:12:38.100
KTX, one that changes those
static methods into extension

00:12:38.100 --> 00:12:40.230
methods on the classes
that they operate on.

00:12:40.230 --> 00:12:42.570
So this is really
easy for Kotlin users

00:12:42.570 --> 00:12:45.090
to integrate into your
app and have navigation

00:12:45.090 --> 00:12:47.250
feel like it's
just something that

00:12:47.250 --> 00:12:51.520
exists in all of the
components that are out there.

00:12:51.520 --> 00:12:54.090
So what does this look like?

00:12:54.090 --> 00:13:00.240
If we, again, make our activity
a little bit more complicated,

00:13:00.240 --> 00:13:02.250
we'll add a tool bar
on the top, and we'll

00:13:02.250 --> 00:13:04.630
add a bottom navigation view.

00:13:04.630 --> 00:13:07.800
And in this case, we still
have the same kind of app menu

00:13:07.800 --> 00:13:10.680
that you had before on a
bottom navigation view.

00:13:10.680 --> 00:13:14.910
But what we do to hook those
things up, it takes two parts.

00:13:14.910 --> 00:13:18.450
One, your menu here
is actually going

00:13:18.450 --> 00:13:23.590
to be using the same IDs that
you've had on each destination.

00:13:23.590 --> 00:13:25.870
So each destination
has a unique ID.

00:13:25.870 --> 00:13:29.530
And we can actually use those
same IDs on your menu items.

00:13:29.530 --> 00:13:32.340
So that kind of builds
this implicit link of, oh,

00:13:32.340 --> 00:13:35.310
well if you click
the Home menu item,

00:13:35.310 --> 00:13:39.770
you're going to go to the
home destination of your app.

00:13:39.770 --> 00:13:43.660
So in code, we're just going
to set up our action bar

00:13:43.660 --> 00:13:45.730
using our toolbar.

00:13:45.730 --> 00:13:48.490
And then we can do the
same findNavController

00:13:48.490 --> 00:13:52.150
to get our access to the
NavController object.

00:13:52.150 --> 00:13:55.510
And then we just have a call
and extension for activity

00:13:55.510 --> 00:13:59.320
that allows you to say, set up
action bar with NavController.

00:13:59.320 --> 00:14:02.380
And this does quite
a bit of magic.

00:14:02.380 --> 00:14:03.880
But what it's doing
is it's actually

00:14:03.880 --> 00:14:08.730
going to be receiving events
on when you've navigated

00:14:08.730 --> 00:14:13.330
in your NavController and using
the labels that you've set up

00:14:13.330 --> 00:14:17.170
in your navigation graph to
update the title of your action

00:14:17.170 --> 00:14:18.100
bar.

00:14:18.100 --> 00:14:19.750
And we also have
another helper method

00:14:19.750 --> 00:14:23.080
if you're using a drawer layout
to automatically change it

00:14:23.080 --> 00:14:26.410
from a hamburger button
into a back arrow,

00:14:26.410 --> 00:14:28.360
based on what
destination you're on.

00:14:28.360 --> 00:14:30.310
So really just those
helpful patterns

00:14:30.310 --> 00:14:33.460
to make sure that those
things stay in sync.

00:14:33.460 --> 00:14:38.550
Similarly, for the bottom
nav, you just call setup.

00:14:38.550 --> 00:14:40.870
You call setup
with NavController

00:14:40.870 --> 00:14:43.190
and redo the two-way
syncing here.

00:14:43.190 --> 00:14:45.740
So as you click on
things in the bottom nav,

00:14:45.740 --> 00:14:50.290
it'll change the graph and
do the correct transition

00:14:50.290 --> 00:14:52.340
based on the
material guidelines,

00:14:52.340 --> 00:14:55.150
as well as as you
navigate between your app,

00:14:55.150 --> 00:14:56.890
if you have separate
buttons, it'll

00:14:56.890 --> 00:15:02.250
actually update the selected
item in the bottom navigation.

00:15:02.250 --> 00:15:06.360
So this gives us a lot of
power, but not everyone

00:15:06.360 --> 00:15:08.600
is just using
pre-built components

00:15:08.600 --> 00:15:10.320
that another team has provided.

00:15:10.320 --> 00:15:12.520
You have all your own custom UI.

00:15:12.520 --> 00:15:14.460
So at that point,
we really need to go

00:15:14.460 --> 00:15:18.960
deeper into what NavController
actually gives you.

00:15:18.960 --> 00:15:22.020
And for the super simple
case, you have a button.

00:15:22.020 --> 00:15:24.600
You want it to go somewhere.

00:15:24.600 --> 00:15:26.790
We have a convenience
method, create

00:15:26.790 --> 00:15:28.510
navigate OnClickListener.

00:15:28.510 --> 00:15:31.240
You give it the ID of
where you want to go,

00:15:31.240 --> 00:15:33.870
what destination, what
action you want to trigger,

00:15:33.870 --> 00:15:36.130
and we'll do all
the work for you.

00:15:36.130 --> 00:15:39.720
Now, this is, perhaps, a
little bit too magical.

00:15:39.720 --> 00:15:43.920
So you can unroll it
just a little bit.

00:15:43.920 --> 00:15:46.920
In this case, we're using
another extension method

00:15:46.920 --> 00:15:47.920
on view.

00:15:47.920 --> 00:15:53.100
So from any view that's been
created by NavController,

00:15:53.100 --> 00:15:57.330
you can actually get a reference
to your nav controller,

00:15:57.330 --> 00:15:59.400
just by calling
findNavController,

00:15:59.400 --> 00:16:02.400
as you might expect, and
use that nav controller

00:16:02.400 --> 00:16:03.960
to call Navigate.

00:16:03.960 --> 00:16:08.520
And just navigate to
an ID of a destination

00:16:08.520 --> 00:16:11.830
or an action in your graph.

00:16:11.830 --> 00:16:12.680
That's it.

00:16:12.680 --> 00:16:14.480
Under the covers, this
Navigate is actually

00:16:14.480 --> 00:16:16.380
doing a lot of work.

00:16:16.380 --> 00:16:20.300
So the NavController is talking
to, what we call, a navigator.

00:16:20.300 --> 00:16:23.240
And so for fragments, we were
talking to a fragment navigator

00:16:23.240 --> 00:16:24.450
that we provide.

00:16:24.450 --> 00:16:27.560
And that navigator knows
everything about, oh, you

00:16:27.560 --> 00:16:28.677
called Navigate.

00:16:28.677 --> 00:16:31.010
I know what fragment you're
going to because you gave us

00:16:31.010 --> 00:16:32.150
your class name.

00:16:32.150 --> 00:16:34.590
And it's going to build all
of the fragment transaction

00:16:34.590 --> 00:16:35.090
for you.

00:16:35.090 --> 00:16:37.024
It's going to call
Add to Back Stack.

00:16:37.024 --> 00:16:38.690
It's going to do all
the things that you

00:16:38.690 --> 00:16:43.130
told us to do by putting that
information in your navigation

00:16:43.130 --> 00:16:43.680
graph.

00:16:43.680 --> 00:16:45.650
So if you had Pop
Up To, it's going

00:16:45.650 --> 00:16:47.120
to do all that sort of stuff.

00:16:47.120 --> 00:16:51.440
Transitions, all of that,
is in this one line of code.

00:16:51.440 --> 00:16:54.920
And all of it can be determined
either programmatically--

00:16:54.920 --> 00:16:57.830
we can add additional
options to this method--

00:16:57.830 --> 00:17:00.680
or something that you
determine ahead of time

00:17:00.680 --> 00:17:03.580
as part of your
navigation graph.

00:17:03.580 --> 00:17:06.520
But for a lot of
these places, it's

00:17:06.520 --> 00:17:09.079
not actually just a Navigate.

00:17:09.079 --> 00:17:09.579
Right?

00:17:09.579 --> 00:17:13.060
You have some information
to pass to the next source.

00:17:13.060 --> 00:17:16.670
So for this, you need to
pass a bundle of information.

00:17:16.670 --> 00:17:19.990
So here, we're passing
a string and an int,

00:17:19.990 --> 00:17:25.030
and we're using our nice helpful
bundle of from Android KTX.

00:17:25.030 --> 00:17:26.869
And it works.

00:17:26.869 --> 00:17:27.670
It's fine.

00:17:27.670 --> 00:17:31.450
This is really useful
for a lot of things.

00:17:31.450 --> 00:17:34.930
But at the same point,
it's not very safe.

00:17:34.930 --> 00:17:37.870
If you do a mistype here,
what are you going to do?

00:17:37.870 --> 00:17:40.770
So we really want to
make this a lot easier.

00:17:40.770 --> 00:17:42.970
Sergey's going to talk
about what we did here.

00:17:42.970 --> 00:17:44.345
SERGEY VASILINETC:
Yeah, we built

00:17:44.345 --> 00:17:47.696
something called Safe
Args Gradle Plugin

00:17:47.696 --> 00:17:49.970
and it will help
you a little bit.

00:17:49.970 --> 00:17:53.480
But first of all, let's see
what we are trying to resolve.

00:17:53.480 --> 00:17:55.880
And let's go back
to our example.

00:17:55.880 --> 00:18:01.060
Our help fragment where we
try to navigate actually

00:18:01.060 --> 00:18:04.300
requires us to pass
screen name argument.

00:18:04.300 --> 00:18:07.510
And optionally, you
can pass category

00:18:07.510 --> 00:18:09.590
which has integer type.

00:18:09.590 --> 00:18:12.320
And let's go back
to the calling site.

00:18:12.320 --> 00:18:15.220
Well, in our slice, we
made everything correctly.

00:18:15.220 --> 00:18:17.450
We passed screen, and
it has proper type.

00:18:17.450 --> 00:18:18.480
We passed category.

00:18:18.480 --> 00:18:20.250
It has proper type as well.

00:18:20.250 --> 00:18:24.170
But actually, during [INAUDIBLE]
some other [INAUDIBLE],,

00:18:24.170 --> 00:18:26.450
you can forget to
pass screen name.

00:18:26.450 --> 00:18:28.720
It will result in
runtime exception.

00:18:28.720 --> 00:18:31.264
And don't me wrong,
it's super easy to fix.

00:18:31.264 --> 00:18:32.180
But it feels annoying.

00:18:32.180 --> 00:18:34.720
It feels like, what am I,
a Java Script developer?

00:18:34.720 --> 00:18:37.570
Why does this
compile time check?

00:18:37.570 --> 00:18:38.590
Like, I don't know.

00:18:38.590 --> 00:18:43.840
So yeah, we decide, OK, now
we have this navigation graph.

00:18:43.840 --> 00:18:47.150
Let's put all about
navigation there,

00:18:47.150 --> 00:18:51.017
including the arguments
of your destinations.

00:18:51.017 --> 00:18:52.600
So let's see how it
looks like in XML.

00:18:56.150 --> 00:18:58.290
And it's super simple.

00:18:58.290 --> 00:19:02.860
We just specify our argument
name, s-type, additionally

00:19:02.860 --> 00:19:04.120
as specified default value.

00:19:04.120 --> 00:19:08.330
It means that your
argument is optional.

00:19:08.330 --> 00:19:10.840
And this allows us
to build tooling

00:19:10.840 --> 00:19:13.240
that once you have
an action that

00:19:13.240 --> 00:19:20.380
leads to this fragment or
other action or activities,

00:19:20.380 --> 00:19:25.490
we can check and make you
pass proper arguments.

00:19:25.490 --> 00:19:27.460
So let's take a
look how it looks

00:19:27.460 --> 00:19:29.910
like with our Gradle plugin.

00:19:29.910 --> 00:19:34.360
Now, to navigate, we
use this special object,

00:19:34.360 --> 00:19:38.950
which instead of passing ID in
a bundle, of course internally

00:19:38.950 --> 00:19:42.900
the subject incorporates the
same ID and same arguments.

00:19:42.900 --> 00:19:49.300
But to get that object we use
HomeFragmentDirection class.

00:19:49.300 --> 00:19:52.480
It's generated for you.

00:19:52.480 --> 00:19:55.570
It suggests a fragment name
plus suffix Directions.

00:19:55.570 --> 00:19:57.940
And this class
has static methods

00:19:57.940 --> 00:20:02.650
for every action defined
for this destination.

00:20:02.650 --> 00:20:07.780
And those static methods make
it pass required arguments.

00:20:07.780 --> 00:20:12.520
So in our case, it makes us
to pass home argument there.

00:20:12.520 --> 00:20:15.790
And yeah, optionally
can later set up

00:20:15.790 --> 00:20:20.300
your other additional arguments.

00:20:20.300 --> 00:20:22.540
And everything is type safe.

00:20:22.540 --> 00:20:27.380
And receiving side after
that is super simple.

00:20:27.380 --> 00:20:31.540
You have this [INAUDIBLE]
that they generate for you.

00:20:31.540 --> 00:20:33.130
It's args class.

00:20:33.130 --> 00:20:36.400
So for our case, it's
HelpfragmentArgs.

00:20:36.400 --> 00:20:38.800
And it just has all
of your arguments

00:20:38.800 --> 00:20:42.880
that you defined in
a typeset manner.

00:20:42.880 --> 00:20:45.730
And from this relatively
small life improvement,

00:20:45.730 --> 00:20:50.050
we go to the bigger one,
which is deep links.

00:20:50.050 --> 00:20:51.160
IAN LAKE: Yes.

00:20:51.160 --> 00:20:54.280
So deep links are
traditionally something

00:20:54.280 --> 00:20:56.860
that Android has supported
for the longest time.

00:20:56.860 --> 00:20:59.950
So you can add intent
filters to activities

00:20:59.950 --> 00:21:04.750
and take over a web URL,
as well as deep linking

00:21:04.750 --> 00:21:07.240
is super useful for
notifications and things

00:21:07.240 --> 00:21:09.890
like that to link
back into your app.

00:21:09.890 --> 00:21:12.790
But this gets a lot
more complicated

00:21:12.790 --> 00:21:15.070
as you get a more
complicated app.

00:21:15.070 --> 00:21:18.160
Like how you structure these
things and how you say,

00:21:18.160 --> 00:21:21.430
all right, I need to
build a notification.

00:21:21.430 --> 00:21:24.100
What is all of the code
that's needed to actually get

00:21:24.100 --> 00:21:27.130
into the correct place in my
app and pass the right kind

00:21:27.130 --> 00:21:28.520
of information here?

00:21:28.520 --> 00:21:30.890
So for navigation,
we really made

00:21:30.890 --> 00:21:33.570
deep linking kind of
a first-class citizen

00:21:33.570 --> 00:21:35.940
in our structure.

00:21:35.940 --> 00:21:42.440
So there's really two kinds of
deep links, the explicit kind--

00:21:42.440 --> 00:21:45.980
so these are things like for
notifications, app shortcuts,

00:21:45.980 --> 00:21:49.040
app widgets, and the
new actions and slices,

00:21:49.040 --> 00:21:52.700
things that are things that
you create and are usually

00:21:52.700 --> 00:21:54.100
pending intent based.

00:21:54.100 --> 00:21:56.660
These are all things that
you're passing to another app

00:21:56.660 --> 00:22:01.340
or to the system to say, I want
to go to this specific place

00:22:01.340 --> 00:22:03.170
in my app.

00:22:03.170 --> 00:22:07.640
The implicit side of things
are more around the web URLs

00:22:07.640 --> 00:22:08.950
and custom scheme URLS.

00:22:08.950 --> 00:22:14.260
So these would be other apps
triggering your app to launch.

00:22:14.260 --> 00:22:17.250
And we handle both of
these for Navigation.

00:22:17.250 --> 00:22:20.030
For explicit deep links,
we have a specific class

00:22:20.030 --> 00:22:22.460
called NavDeepLinkBuilder.

00:22:22.460 --> 00:22:26.060
And it's sole goal in
life is to deep link

00:22:26.060 --> 00:22:29.450
to a specific destination
in your navigation graph

00:22:29.450 --> 00:22:30.900
by its ID.

00:22:30.900 --> 00:22:34.130
But it's going to
do all of that work.

00:22:34.130 --> 00:22:36.530
It's easy to say, but
it's a little bit harder

00:22:36.530 --> 00:22:39.870
to actually make sure that
all works in the system.

00:22:39.870 --> 00:22:42.320
But if we create a
NavDeepLinkBuilder,

00:22:42.320 --> 00:22:44.120
you create it with
context, you give it

00:22:44.120 --> 00:22:47.780
your graph, your destination,
any arguments you have.

00:22:47.780 --> 00:22:50.900
And then you can just call
Create Pending Intent.

00:22:50.900 --> 00:22:53.210
And we're doing all
of the work here

00:22:53.210 --> 00:22:56.060
to create the right
synthetic back stack,

00:22:56.060 --> 00:22:58.550
both within your
graph and if you're

00:22:58.550 --> 00:23:02.990
using multiple activities,
your parent activities as well.

00:23:02.990 --> 00:23:05.300
And we're going to pass
that along and create

00:23:05.300 --> 00:23:09.050
the correct intent that gives
you to the right place when

00:23:09.050 --> 00:23:10.310
you trigger this intent.

00:23:10.310 --> 00:23:13.190
And then you just pass it
through to your notification.

00:23:13.190 --> 00:23:16.010
You don't actually need to
do more than this to get

00:23:16.010 --> 00:23:19.630
all the correct behavior.

00:23:19.630 --> 00:23:21.920
For implicit deep links--

00:23:21.920 --> 00:23:25.780
these are, again,
links to web URLs.

00:23:25.780 --> 00:23:26.650
Right?

00:23:26.650 --> 00:23:29.020
In this case, instead
of it being something

00:23:29.020 --> 00:23:30.870
that you create
programmatically,

00:23:30.870 --> 00:23:34.640
it's information you include
in your navigation graph.

00:23:34.640 --> 00:23:37.450
So here, we're adding
a deep link element.

00:23:37.450 --> 00:23:41.650
Just like we added the arguments
and actions to our graph,

00:23:41.650 --> 00:23:42.790
these are just a deep link.

00:23:42.790 --> 00:23:45.550
And of course, you could do
all of us in the Visual Editor

00:23:45.550 --> 00:23:48.820
as part of the properties
for a destination.

00:23:48.820 --> 00:23:52.060
And it's really just as
simple as an app:uri.

00:23:52.060 --> 00:23:55.000
And you pass in a uri.

00:23:55.000 --> 00:23:58.840
Now, this is a static uri,
which is boring and dumb.

00:23:58.840 --> 00:24:03.500
And there's only so many apps
that have just one uri they do.

00:24:03.500 --> 00:24:06.560
So we, of course,
support some wild cards.

00:24:06.560 --> 00:24:12.130
So if you want to do a .* for
a wild card, totally supported.

00:24:12.130 --> 00:24:17.530
If you want to fill in the
arguments for your destination,

00:24:17.530 --> 00:24:19.570
you can actually
use curly braces.

00:24:19.570 --> 00:24:24.670
And we'll parse the URL for
you and extract those values

00:24:24.670 --> 00:24:26.620
and give them to
you for your args.

00:24:26.620 --> 00:24:28.765
So again, kind of
in that same type

00:24:28.765 --> 00:24:34.510
safe args, now you can get
those directly from URL

00:24:34.510 --> 00:24:37.030
and not have to reparse things.

00:24:37.030 --> 00:24:40.690
You already know what
this is supposed to be.

00:24:40.690 --> 00:24:43.180
Similarly, you can
combine the two.

00:24:43.180 --> 00:24:45.910
If you want to make more
complicated patterns,

00:24:45.910 --> 00:24:47.170
totally can.

00:24:47.170 --> 00:24:49.420
We also have support
for auto verify

00:24:49.420 --> 00:24:52.720
if you're using app links
to skip that disambiguation

00:24:52.720 --> 00:24:53.410
screen.

00:24:53.410 --> 00:24:56.080
We wanted to make sure that you
could do the same kind of thing

00:24:56.080 --> 00:24:58.780
if you're using
Navigation as well.

00:24:58.780 --> 00:25:04.030
And you'll note here that
we left off the HTTP, HTTPS.

00:25:04.030 --> 00:25:07.750
So what we're doing here
is actually doing both.

00:25:07.750 --> 00:25:10.230
We're saying HTTP, HTTPS.

00:25:10.230 --> 00:25:13.390
Now, I assume your
servers are all HTTPS.

00:25:13.390 --> 00:25:15.850
But you can't really
control the URLs

00:25:15.850 --> 00:25:18.160
that other apps are
including throughout.

00:25:18.160 --> 00:25:22.336
Maybe they accidentally
took the S off of your URL.

00:25:22.336 --> 00:25:23.960
We still want to
support both of those.

00:25:23.960 --> 00:25:25.970
So we use this just as
a convenience method

00:25:25.970 --> 00:25:30.420
instead of having two
lines instead of one.

00:25:30.420 --> 00:25:32.970
And of course, it also
works with custom schemes.

00:25:32.970 --> 00:25:36.180
So if you have your own scheme
that you've set up specifically

00:25:36.180 --> 00:25:39.300
for your app, you can also
attach those to deep links.

00:25:42.730 --> 00:25:45.430
Now the best part
is we've kind of

00:25:45.430 --> 00:25:47.440
worked across the tool space.

00:25:47.440 --> 00:25:49.750
So besides just the
Navigation Editor,

00:25:49.750 --> 00:25:52.420
we've also worked with
the manifest merger team.

00:25:52.420 --> 00:25:55.810
So you can add just a
single nav graph element

00:25:55.810 --> 00:26:00.190
to an activity in your manifest
pointing to your graph,

00:26:00.190 --> 00:26:03.150
and all of the deep
links in that graph

00:26:03.150 --> 00:26:07.530
will then get expanded out to
be the correct intent filter.

00:26:07.530 --> 00:26:09.430
We'll build all those for you.

00:26:09.430 --> 00:26:13.270
And if you go to the Manifest
Merger view in Android Studio,

00:26:13.270 --> 00:26:17.800
you actually see the exact line
from your navigation file that

00:26:17.800 --> 00:26:20.470
generated that intent filter.

00:26:20.470 --> 00:26:24.310
So this means that we now
have a single source of truth

00:26:24.310 --> 00:26:27.332
in your navigation
graph that you

00:26:27.332 --> 00:26:29.440
know this is not
going to get out

00:26:29.440 --> 00:26:32.540
of sync with what you expect.

00:26:32.540 --> 00:26:35.140
It's not going to get out of
sync as you change argument

00:26:35.140 --> 00:26:37.240
names in your XML file.

00:26:37.240 --> 00:26:41.160
All of this is one central
place to do things,

00:26:41.160 --> 00:26:43.180
and we think this
is a lot easier

00:26:43.180 --> 00:26:45.700
for basically all of
the implicit deep link

00:26:45.700 --> 00:26:47.380
kind of cases.

00:26:47.380 --> 00:26:52.810
Of course, we do do things where
this is all ActionView URLs

00:26:52.810 --> 00:26:57.180
as they would be for web URLs.

00:26:57.180 --> 00:26:59.626
So you can see it's added
directly to the line.

00:26:59.626 --> 00:27:01.000
And if you have
multiple of them,

00:27:01.000 --> 00:27:03.580
it'll actually tell
you exactly what line.

00:27:03.580 --> 00:27:06.130
If you have multiple
graphs associated

00:27:06.130 --> 00:27:08.920
with different activities,
those will all work just fine.

00:27:11.655 --> 00:27:13.030
So one of the
other subjects that

00:27:13.030 --> 00:27:17.320
is really important to all
of architecture components

00:27:17.320 --> 00:27:18.610
is testing.

00:27:18.610 --> 00:27:23.350
And testing of
navigation is very hard.

00:27:23.350 --> 00:27:25.690
And this is something
that we're going

00:27:25.690 --> 00:27:28.300
to continue to look at
over the alpha period.

00:27:28.300 --> 00:27:30.790
And we really want all
of your feedback as well.

00:27:30.790 --> 00:27:35.830
But I wanted to discuss what we
think testing in a navigation

00:27:35.830 --> 00:27:38.880
world should look like.

00:27:38.880 --> 00:27:45.920
So a lot of it is if all of the
links between your destinations

00:27:45.920 --> 00:27:51.980
are through navigation, then
it's a lot easier to test

00:27:51.980 --> 00:27:54.600
a destination in isolation.

00:27:54.600 --> 00:27:55.100
Right?

00:27:55.100 --> 00:27:59.580
You can test each
destination by itself

00:27:59.580 --> 00:28:02.240
and then test just the
outgoing edges or just

00:28:02.240 --> 00:28:05.780
the incoming arguments and
not have to deal with, oh,

00:28:05.780 --> 00:28:09.530
did it actually do u right
fragment transaction?

00:28:09.530 --> 00:28:12.470
Because we can test that just
at the Navigation Controller

00:28:12.470 --> 00:28:14.060
level.

00:28:14.060 --> 00:28:16.120
So this is something
that we are going

00:28:16.120 --> 00:28:17.620
to spend a lot more time on.

00:28:17.620 --> 00:28:20.410
And in the fragment talk
yesterday, we actually

00:28:20.410 --> 00:28:23.020
talked about really trying
to make fragments themselves

00:28:23.020 --> 00:28:25.810
much more testable in isolation.

00:28:25.810 --> 00:28:28.390
So it's kind of a
package deal where

00:28:28.390 --> 00:28:31.630
we are trying to build testing
into Navigation Controller

00:28:31.630 --> 00:28:36.910
but then also trying to build
testable destinations as well.

00:28:36.910 --> 00:28:40.680
So you might be interested
to do something right now.

00:28:40.680 --> 00:28:43.800
So if you ran an
Espresso test and you

00:28:43.800 --> 00:28:47.190
want to test, oh, when
I navigate to something,

00:28:47.190 --> 00:28:49.170
does it go to the right place.

00:28:49.170 --> 00:28:53.790
Well, we actually have an add-on
Navigator navigated listener.

00:28:53.790 --> 00:28:59.010
So you can actually hook it
up to the NavController's

00:28:59.010 --> 00:29:02.730
navigator and get
a callback of, oh,

00:29:02.730 --> 00:29:05.980
did you go to the right place
when I click this button.

00:29:05.980 --> 00:29:09.420
So this is one method that
we found pretty successful

00:29:09.420 --> 00:29:14.190
in testing things completely
black box outside of things.

00:29:14.190 --> 00:29:17.160
Obviously, if you want
to inject a NavController

00:29:17.160 --> 00:29:21.840
or use any other method, those
are also perfectly valid ways

00:29:21.840 --> 00:29:23.220
of setting things up.

00:29:26.100 --> 00:29:28.310
So what can you play with today?

00:29:28.310 --> 00:29:30.740
And what could you play
with-- you had two days.

00:29:30.740 --> 00:29:32.390
You must have looked at it.

00:29:32.390 --> 00:29:33.710
Right?

00:29:33.710 --> 00:29:39.410
So it is in alpha right
now, 1.0.0-alpha01.

00:29:39.410 --> 00:29:44.030
We're giving ourselves a
long runway of bug fixes

00:29:44.030 --> 00:29:46.130
and improvements here.

00:29:46.130 --> 00:29:50.930
And it really comes down to two
main artifact, the navigation

00:29:50.930 --> 00:29:55.100
fragment, which includes the
navigation runtime dependency

00:29:55.100 --> 00:29:57.140
as a transitive
dependency and also

00:29:57.140 --> 00:29:59.960
the NavHost fragment and
the fragment navigator

00:29:59.960 --> 00:30:03.280
that you need to use
fragment destinations.

00:30:03.280 --> 00:30:06.160
As well as the
navigation UI dependency,

00:30:06.160 --> 00:30:08.120
which has those static methods.

00:30:08.120 --> 00:30:12.260
And for every one of the
dependencies for navigation,

00:30:12.260 --> 00:30:16.580
we have a dash KTX version of
them if you're using Kotlin.

00:30:16.580 --> 00:30:18.140
So we really tried
to make Kotlin

00:30:18.140 --> 00:30:21.350
a first-class citizen
in the navigation world,

00:30:21.350 --> 00:30:22.740
especially for
some of the things

00:30:22.740 --> 00:30:27.050
like if you are doing
programmatic graph

00:30:27.050 --> 00:30:27.890
construction.

00:30:27.890 --> 00:30:30.140
Like say you're reading
your whole navigation

00:30:30.140 --> 00:30:33.080
graph from a server,
we have a Kotlin DSL

00:30:33.080 --> 00:30:36.860
as part of our Kotlin extensions
to make that a lot easier

00:30:36.860 --> 00:30:39.670
if you're using Kotlin.

00:30:39.670 --> 00:30:42.920
So there is more to do,
and I'll have Lukas talk

00:30:42.920 --> 00:30:44.524
about where we're going.

00:30:44.524 --> 00:30:45.440
LUKAS BERGSTROM: Yeah.

00:30:45.440 --> 00:30:50.360
One note, you are going to
need Android Studio 3.2 Preview

00:30:50.360 --> 00:30:53.310
Canary 14 to use this.

00:30:53.310 --> 00:30:56.670
And please do download
it and try it out.

00:30:56.670 --> 00:30:59.620
There's a lot of
great stuff there.

00:30:59.620 --> 00:31:01.990
So this is obviously
going to become

00:31:01.990 --> 00:31:04.750
a really core part of not
just architecture components

00:31:04.750 --> 00:31:06.800
but JetPack overall.

00:31:06.800 --> 00:31:09.910
So with JetPack, we're going to
take the same approach we took

00:31:09.910 --> 00:31:11.820
with architecture components.

00:31:11.820 --> 00:31:13.580
Like a sort of a
blank sheet of paper,

00:31:13.580 --> 00:31:16.870
what do we want the Android
developer experience to be?

00:31:16.870 --> 00:31:18.460
And apply that
much more broadly.

00:31:18.460 --> 00:31:21.040
And navigation will
be eventually part

00:31:21.040 --> 00:31:22.490
of the default experience.

00:31:22.490 --> 00:31:25.660
So when we get to stable,
then creating a new project

00:31:25.660 --> 00:31:28.840
in Android Studio is
going to, by default,

00:31:28.840 --> 00:31:31.219
start you up in the
Nav Editor, and it

00:31:31.219 --> 00:31:32.510
should be a pretty great world.

00:31:35.840 --> 00:31:41.280
And JetPack is available
for you to try right now.

00:31:41.280 --> 00:31:45.990
Right now, it's sort of got
a much nicer introduction

00:31:45.990 --> 00:31:49.890
to what all the key pieces
of Android development are.

00:31:49.890 --> 00:31:51.930
So it's a much easier on ramp.

00:31:51.930 --> 00:31:54.910
And we're looking forward to
expanding the story over time.

00:31:59.080 --> 00:32:03.100
There are more talks for you
to go to, a lot more detail

00:32:03.100 --> 00:32:06.250
on Android KTX and paging.

00:32:06.250 --> 00:32:10.780
Paging, in particular, is
a really cool deep library

00:32:10.780 --> 00:32:13.480
that does a lot for
you by tying together

00:32:13.480 --> 00:32:16.330
different pieces of architecture
components in JetPack.

00:32:16.330 --> 00:32:19.000
So I encourage you,
if you ever have

00:32:19.000 --> 00:32:21.520
a list view with
more stuff than you

00:32:21.520 --> 00:32:24.160
can hold in memory
at any given time,

00:32:24.160 --> 00:32:25.990
you really want to go
to this paging talk.

00:32:29.550 --> 00:32:31.464
And we want your feedback.

00:32:31.464 --> 00:32:33.630
We want your feedback on
this session, first of all.

00:32:33.630 --> 00:32:35.790
But more importantly,
we want your feedback

00:32:35.790 --> 00:32:37.620
on the navigation component.

00:32:37.620 --> 00:32:40.290
The reason that we're
launching to alpha

00:32:40.290 --> 00:32:42.510
is not because we
think that this

00:32:42.510 --> 00:32:45.860
is really untested and untried.

00:32:45.860 --> 00:32:49.176
We've actually done a lot of
pre-release testing of this.

00:32:49.176 --> 00:32:50.550
But we were
launching it to alpha

00:32:50.550 --> 00:32:52.216
because we want to
get a lot of feedback

00:32:52.216 --> 00:32:55.890
from the community on it
before we locked down the API

00:32:55.890 --> 00:32:57.750
and switch over to beta.

00:32:57.750 --> 00:33:00.780
So this is a great time
for you to try it out.

00:33:00.780 --> 00:33:01.950
Tell us what works for you.

00:33:01.950 --> 00:33:06.030
Tell us what doesn't, and either
communicate with us directly

00:33:06.030 --> 00:33:08.190
or on our public issue tracker.

00:33:08.190 --> 00:33:09.960
We would love to hear from you.

00:33:09.960 --> 00:33:12.090
Your feedback has
been really critical

00:33:12.090 --> 00:33:16.470
in every point of this
journey in making sure

00:33:16.470 --> 00:33:18.180
that we're attacking
the right problems

00:33:18.180 --> 00:33:19.830
with the right solutions.

00:33:19.830 --> 00:33:24.648
So please do try it out,
and tell us what you think.

00:33:24.648 --> 00:33:25.602
And thank you.

00:33:25.602 --> 00:33:27.510
[APPLAUSE]

00:33:29.418 --> 00:33:33.073
[MUSIC PLAYING]

