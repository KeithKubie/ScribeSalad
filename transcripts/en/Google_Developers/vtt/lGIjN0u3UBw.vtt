WEBVTT
Kind: captions
Language: en

00:00:06.890 --> 00:00:09.260
MODERATOR: We'd like to welcome
Chris Elliott, solutions

00:00:09.260 --> 00:00:11.100
architect, to talk
about Google Cloud.

00:00:11.100 --> 00:00:13.230
CHRIS ELLIOTT: Thanks.

00:00:13.230 --> 00:00:14.750
Glad to be here.

00:00:14.750 --> 00:00:16.870
So, fun story, when you
get really close to time,

00:00:16.870 --> 00:00:19.600
there's an entire Google posse
that stands up in the corner

00:00:19.600 --> 00:00:21.530
and starts going like
this and walking closer.

00:00:21.530 --> 00:00:23.737
So that's a great counter.

00:00:23.737 --> 00:00:25.820
So we're going to talk
about Google Cloud Platform

00:00:25.820 --> 00:00:29.200
and how you can build games that
are scalable and will really

00:00:29.200 --> 00:00:31.820
be able to handle the
load when you launch.

00:00:31.820 --> 00:00:33.440
So my name is Chris Elliott.

00:00:33.440 --> 00:00:37.030
I always like to start
with a terrible picture.

00:00:37.030 --> 00:00:39.420
And this one is actually
one of my favorites,

00:00:39.420 --> 00:00:41.610
because it's in publications
that are commonly

00:00:41.610 --> 00:00:44.010
found in restrooms
all over the world.

00:00:44.010 --> 00:00:45.930
So on my resume
literally is a bullet

00:00:45.930 --> 00:00:48.330
that says "found on toilets
all over the world."

00:00:48.330 --> 00:00:50.360
And it's a terrible photo.

00:00:50.360 --> 00:00:55.070
But as an architect, I work
and help tidy up the platform

00:00:55.070 --> 00:00:57.020
to solve a lot of the
real world use cases

00:00:57.020 --> 00:01:00.890
that people are tackling--
game developers specifically.

00:01:00.890 --> 00:01:03.840
So about that, basically
four sections here broken

00:01:03.840 --> 00:01:06.076
down into-- first just an
overview of the platform,

00:01:06.076 --> 00:01:08.200
make sure we're all on the
exact same page in terms

00:01:08.200 --> 00:01:10.880
of the core fundamental
building blocks there.

00:01:10.880 --> 00:01:13.180
And then really the
meat and potatoes

00:01:13.180 --> 00:01:15.760
of diving into some example,
real world implementation

00:01:15.760 --> 00:01:18.130
the developers have
built, and also

00:01:18.130 --> 00:01:23.100
talk about in an ideal
world, what you could build.

00:01:23.100 --> 00:01:24.900
So you can mix and
match and choose

00:01:24.900 --> 00:01:27.840
what works best for
your use case here.

00:01:27.840 --> 00:01:30.370
So when looking at the
Google Cloud Platform,

00:01:30.370 --> 00:01:34.300
we provide a variety of compute
platforms, storage services,

00:01:34.300 --> 00:01:37.800
and additional services
to layer on top of that.

00:01:37.800 --> 00:01:39.700
And really, it's a
little bit confusing,

00:01:39.700 --> 00:01:40.900
because there are a
lot of moving parts.

00:01:40.900 --> 00:01:41.990
And you're not
quite sure which one

00:01:41.990 --> 00:01:43.700
is the best one to
use for your use case.

00:01:43.700 --> 00:01:45.408
And so I hope by the
end of this session,

00:01:45.408 --> 00:01:48.150
everyone here will understand
some potential ways

00:01:48.150 --> 00:01:49.955
of combining these
technologies to solve

00:01:49.955 --> 00:01:53.300
the really challenging
problems we face.

00:01:53.300 --> 00:01:55.640
And rest assured,
you're not alone.

00:01:55.640 --> 00:01:58.220
We have a lot of customers
who are very happy in the game

00:01:58.220 --> 00:01:59.820
industry building
on our platform.

00:01:59.820 --> 00:02:01.525
And it's amazing,
because usually you

00:02:01.525 --> 00:02:04.240
see a couple developers
build something on it that

00:02:04.240 --> 00:02:06.234
scales and goes
and doesn't crash.

00:02:06.234 --> 00:02:07.650
Everyone kind of
picks up on that,

00:02:07.650 --> 00:02:09.970
and you see Google Cloud
Platform adoption just growing

00:02:09.970 --> 00:02:10.814
within companies.

00:02:10.814 --> 00:02:12.230
And here are a
couple of examples.

00:02:12.230 --> 00:02:14.780
And you'll notice it goes
everywhere from small indie

00:02:14.780 --> 00:02:16.740
studios all the way up
to AAA game studios.

00:02:16.740 --> 00:02:18.940
We see everyone across
the board benefiting

00:02:18.940 --> 00:02:21.690
from the value and
power of the platform.

00:02:21.690 --> 00:02:24.190
And a couple examples, for
example, Electronic Arts,

00:02:24.190 --> 00:02:26.190
initially started with
just one mobile title.

00:02:26.190 --> 00:02:28.390
But its scaled-- it didn't
go down, it didn't crash.

00:02:28.390 --> 00:02:29.389
It was a small dev team.

00:02:29.389 --> 00:02:31.900
It was ideal, and it made
everyone else envious

00:02:31.900 --> 00:02:34.265
who was hammering away and
managing our infrastructure.

00:02:34.265 --> 00:02:35.890
And then now they're
using it for a lot

00:02:35.890 --> 00:02:38.181
of their mobile applications
that they're building out,

00:02:38.181 --> 00:02:40.302
and you may recognize
a few from here.

00:02:40.302 --> 00:02:41.260
Another one-- actually.

00:02:41.260 --> 00:02:44.760
I found this out last GDC when
just talking to Epic Games--

00:02:44.760 --> 00:02:49.180
that they actually used App
Engine for "Infinity Blade II,"

00:02:49.180 --> 00:02:50.924
and the compelling
social features there.

00:02:50.924 --> 00:02:52.340
It was really cool
too, because it

00:02:52.340 --> 00:02:55.890
was done by just one
guy in about six weeks.

00:02:55.890 --> 00:03:00.290
And that is a really
compelling note,

00:03:00.290 --> 00:03:02.880
because if I was a developer
and I had six weeks to build

00:03:02.880 --> 00:03:04.120
something I knew
millions of people

00:03:04.120 --> 00:03:05.560
were going to be
hammering, I would

00:03:05.560 --> 00:03:06.643
be on the edge of my seat.

00:03:06.643 --> 00:03:08.960
And luckily, it scaled
up, and it handled.

00:03:08.960 --> 00:03:09.820
And it just worked.

00:03:09.820 --> 00:03:12.744
And it's just another one
of those example use cases

00:03:12.744 --> 00:03:14.160
where people are
really harnessing

00:03:14.160 --> 00:03:15.618
the power of the
platform and using

00:03:15.618 --> 00:03:18.060
the right tool
for the right job.

00:03:18.060 --> 00:03:21.520
And so to look at a few of
the few building blocks,

00:03:21.520 --> 00:03:24.825
really when building on
the Google Cloud platform,

00:03:24.825 --> 00:03:26.450
the two things you
have to choose about

00:03:26.450 --> 00:03:29.180
are whether you want to use
Compute Engine, App Engine, how

00:03:29.180 --> 00:03:30.650
do I mix and match,
and really what

00:03:30.650 --> 00:03:32.339
is the best tool
for my use case.

00:03:32.339 --> 00:03:34.380
So we'll start with Compute
Engine, which there's

00:03:34.380 --> 00:03:36.580
been a lot of excitement
around recently since we

00:03:36.580 --> 00:03:38.550
went GA in December.

00:03:38.550 --> 00:03:42.210
And with that, the core way
to describe the platform

00:03:42.210 --> 00:03:44.520
is it's virtual machines--
open and flexible

00:03:44.520 --> 00:03:47.430
virtual machines that you can
bring whatever software stack

00:03:47.430 --> 00:03:49.810
you want, and run that
on a Linux machine

00:03:49.810 --> 00:03:51.490
and be good to go.

00:03:51.490 --> 00:03:54.216
And so bring your
dedicated game servers,

00:03:54.216 --> 00:03:56.590
anything that you want that
doesn't quite necessarily fit

00:03:56.590 --> 00:03:58.950
within the App Engine
containerized environment.

00:03:58.950 --> 00:04:01.315
It's a great fit
on Compute Engine.

00:04:01.315 --> 00:04:02.870
And the next couple
of slides, there

00:04:02.870 --> 00:04:04.660
are really two
points that I've seen

00:04:04.660 --> 00:04:06.890
be very compelling
for game developers.

00:04:06.890 --> 00:04:08.730
The first one is
the global network

00:04:08.730 --> 00:04:10.430
and the performance
of the network

00:04:10.430 --> 00:04:12.100
opens up new
opportunities with respect

00:04:12.100 --> 00:04:16.534
to cloud gaming, and also
the consistent performance.

00:04:16.534 --> 00:04:18.450
Not only is it a very
high performance system,

00:04:18.450 --> 00:04:20.700
every machine performs
at a high level,

00:04:20.700 --> 00:04:26.160
so you can design depending
on those consistent benchmarks

00:04:26.160 --> 00:04:27.990
in the back end.

00:04:27.990 --> 00:04:30.820
And so with that,
the first network--

00:04:30.820 --> 00:04:34.040
the first point is really the
network that spans the globe.

00:04:34.040 --> 00:04:36.620
We have our own
private fiber network,

00:04:36.620 --> 00:04:38.110
and Compute Engine
taps into that.

00:04:38.110 --> 00:04:39.710
It's built on
Google data centers.

00:04:39.710 --> 00:04:41.819
And it really allows
you to do things

00:04:41.819 --> 00:04:43.985
that you can't and have
never been able to do before

00:04:43.985 --> 00:04:46.750
on previous cloud platforms,
just because you're

00:04:46.750 --> 00:04:48.984
running over Google's
private fiber.

00:04:48.984 --> 00:04:50.900
One of the fun parts
about being inside Google

00:04:50.900 --> 00:04:53.167
is you get to see
behind the scenes.

00:04:53.167 --> 00:04:55.000
There's a really classic
video of inspecting

00:04:55.000 --> 00:04:57.320
one of our transatlantic
fiber lines.

00:04:57.320 --> 00:04:59.110
And out of nowhere,
a shark comes out,

00:04:59.110 --> 00:05:00.070
bites onto the cable.

00:05:00.070 --> 00:05:02.200
And luckily, the cable
is wrapped in Kevlar

00:05:02.200 --> 00:05:04.072
and designed to
withstand shark attacks.

00:05:04.072 --> 00:05:05.530
And it's really
cool to actually be

00:05:05.530 --> 00:05:08.620
able to go and see shark
attacks happening and knowing

00:05:08.620 --> 00:05:10.360
that your app's
still going to go.

00:05:10.360 --> 00:05:13.420
Although the fiber can withstand
that, if I was developer

00:05:13.420 --> 00:05:15.830
and I had a small little
outage for 1% and it was due

00:05:15.830 --> 00:05:18.700
a shark attack, I would actually
be much more comfortable

00:05:18.700 --> 00:05:21.290
than, say, a go-to
fail statement issue.

00:05:21.290 --> 00:05:25.590
I would much rather have
a shark attack happening.

00:05:25.590 --> 00:05:29.482
But anyways, we get a
lot of press on platform.

00:05:29.482 --> 00:05:31.690
And people are really picking
up on what we're doing.

00:05:31.690 --> 00:05:33.480
This one quote in "Wired"
I absolutely love,

00:05:33.480 --> 00:05:35.313
because it summarize
everything we're doing,

00:05:35.313 --> 00:05:37.265
and how we're exposing
Google's history

00:05:37.265 --> 00:05:38.940
and experience
with infrastructure

00:05:38.940 --> 00:05:41.610
to external developers to get
in and harness that power.

00:05:41.610 --> 00:05:45.210
And it really sums up as
the mother of all clouds.

00:05:45.210 --> 00:05:49.359
And yes, our data centers
really do look like that.

00:05:49.359 --> 00:05:51.150
There are some really
great pictures there.

00:05:51.150 --> 00:05:52.500
In one of them, you might
have seen the Easter egg

00:05:52.500 --> 00:05:53.780
with a stormtrooper in it.

00:05:53.780 --> 00:05:57.040
And I'm pretty sure that
exists there as well.

00:05:57.040 --> 00:05:59.860
But people are noticing this.

00:05:59.860 --> 00:06:01.570
I worked with Ed
over at PA Consulting

00:06:01.570 --> 00:06:03.270
on a bunch of
Chrome Jam projects.

00:06:03.270 --> 00:06:05.570
One of them was-- actually,
one was called Chrome Jam.

00:06:05.570 --> 00:06:07.440
And these are projects
by the Chrome team.

00:06:07.440 --> 00:06:09.270
And this one was
basically required

00:06:09.270 --> 00:06:11.940
very low latency
connections so they

00:06:11.940 --> 00:06:13.720
could stream audio
between four clients,

00:06:13.720 --> 00:06:16.785
and friends could just jam on,
log in, choose an instrument,

00:06:16.785 --> 00:06:18.410
and just start jamming
with each other.

00:06:18.410 --> 00:06:20.719
And this quote was
straight from them.

00:06:20.719 --> 00:06:23.010
They absolutely love the
latency that they were seeing.

00:06:23.010 --> 00:06:25.300
It was low, much lower than they
were designing for elsewhere.

00:06:25.300 --> 00:06:27.425
And it actually allowed
them to launch successfully

00:06:27.425 --> 00:06:30.404
instead of having to scrap the
project because of latency.

00:06:30.404 --> 00:06:32.070
What does that actually
mean in numbers?

00:06:32.070 --> 00:06:34.990
Well, here's a study that,
although it's over a year old,

00:06:34.990 --> 00:06:37.030
these numbers just get
even better and better

00:06:37.030 --> 00:06:38.230
from this point on.

00:06:38.230 --> 00:06:42.840
And the coloring is
accidental of other,

00:06:42.840 --> 00:06:46.160
but it's fairly accurate per se.

00:06:46.160 --> 00:06:49.470
But this is between two
regions, and what you can see--

00:06:49.470 --> 00:06:51.476
and the really key thing
is trying to highlight,

00:06:51.476 --> 00:06:53.350
as game developers, what
are the key metrics?

00:06:53.350 --> 00:06:55.608
Latency-- we're looking at
significantly lower latency

00:06:55.608 --> 00:06:57.733
that enables you to do
things that you haven't been

00:06:57.733 --> 00:07:00.140
able to do before across
regional deployments,

00:07:00.140 --> 00:07:01.730
and also bandwidth.

00:07:01.730 --> 00:07:03.460
Every instance
within Compute Engine

00:07:03.460 --> 00:07:05.080
exists on a project
private network

00:07:05.080 --> 00:07:07.020
and can communicate over
an internal network.

00:07:07.020 --> 00:07:09.910
So you can literally
create an instance in EU,

00:07:09.910 --> 00:07:12.680
create an instance in US, and
say, ping my European instance.

00:07:12.680 --> 00:07:14.940
And that's all over
internal private network.

00:07:14.940 --> 00:07:16.550
Of course, you have to have
firewall ports open and all

00:07:16.550 --> 00:07:18.008
that, and we walk
you through that.

00:07:18.008 --> 00:07:20.370
But it's one of the
powerful features.

00:07:20.370 --> 00:07:24.320
And even instance creation--
although it doesn't necessarily

00:07:24.320 --> 00:07:26.650
involve having a
faster-performing instance,

00:07:26.650 --> 00:07:29.180
the fact you can create an
instance and go to SSH into it,

00:07:29.180 --> 00:07:32.504
and it's almost always there,
that is very compelling.

00:07:32.504 --> 00:07:34.920
I'm no longer just sitting
around waiting for my instances

00:07:34.920 --> 00:07:35.750
to be created.

00:07:35.750 --> 00:07:38.110
And it's great when you're
spinning up 1,000 instances

00:07:38.110 --> 00:07:42.200
to meet with an unexpected
surge in demand.

00:07:42.200 --> 00:07:44.902
And one last benchmark,
just to kind of give you

00:07:44.902 --> 00:07:47.360
a sense and validate what we're
talking about here in terms

00:07:47.360 --> 00:07:50.550
of performance, is this
MapR terasort record.

00:07:50.550 --> 00:07:52.980
And there are two reasons I
really love this for gaming.

00:07:52.980 --> 00:07:54.770
One is the previous
record was held

00:07:54.770 --> 00:07:59.390
on dedicated hardware in
their own data center.

00:07:59.390 --> 00:08:01.850
And we smashed
that record sorting

00:08:01.850 --> 00:08:04.540
a terabyte of data on a
cloud-based deployment.

00:08:04.540 --> 00:08:06.440
Nobody would have
expected cloud performance

00:08:06.440 --> 00:08:10.410
to exceed that of what they
had on dedicated hardware.

00:08:10.410 --> 00:08:13.680
And you'll see that we used a
third of the number of cores.

00:08:13.680 --> 00:08:16.180
And the other aspect is-- and
the reason this was possible--

00:08:16.180 --> 00:08:18.370
is because of that
consistent performance.

00:08:18.370 --> 00:08:20.510
You don't have a couple
of MapReduce nodes hanging

00:08:20.510 --> 00:08:23.940
around being slow, dragging
the entire job back down.

00:08:23.940 --> 00:08:26.840
Everything spins up quickly,
computes, shuts down.

00:08:26.840 --> 00:08:28.939
And that's why they're
able to smash that record.

00:08:28.939 --> 00:08:30.230
And for gaming, it's important.

00:08:30.230 --> 00:08:32.980
If you have 2%, 3%, 5% of
your servers not performing

00:08:32.980 --> 00:08:35.750
correctly, you're going to have
5% of your user base having

00:08:35.750 --> 00:08:36.570
a bad experience.

00:08:36.570 --> 00:08:40.346
And this is one of the ways we
can help avoid that problem.

00:08:40.346 --> 00:08:42.679
So the other aspect-- and I'm
not spending a lot of time

00:08:42.679 --> 00:08:44.980
on it in this overview, because
a lot of people I talk to

00:08:44.980 --> 00:08:46.938
are already intimately
familiar with App Engine

00:08:46.938 --> 00:08:48.370
and understand what it provides.

00:08:48.370 --> 00:08:49.953
They may love it,
or they may have not

00:08:49.953 --> 00:08:52.030
used it for other
reasons, such as wanting

00:08:52.030 --> 00:08:55.490
to run their own dedicated
game server that doesn't work

00:08:55.490 --> 00:08:56.920
within the App Engine container.

00:08:56.920 --> 00:08:58.860
But I absolutely
love App Engine.

00:08:58.860 --> 00:09:00.722
It scales to
unbelievable heights.

00:09:00.722 --> 00:09:02.930
The developers I've worked
with that have built on it

00:09:02.930 --> 00:09:06.122
have been doing amazing things
with extremely small teams--

00:09:06.122 --> 00:09:07.330
easy to build, easy to scale.

00:09:07.330 --> 00:09:10.594
And if you're running in
PHP, Go, Java, or Python,

00:09:10.594 --> 00:09:13.260
it's always great to evaluate if
it's a right tool for your job,

00:09:13.260 --> 00:09:14.885
or whether you need
to leverage and add

00:09:14.885 --> 00:09:17.440
on other things such
as Compute Engine.

00:09:17.440 --> 00:09:19.371
So that's really the
high level overview, just

00:09:19.371 --> 00:09:20.370
trying to keep it brief.

00:09:20.370 --> 00:09:21.720
And I'll be around
afterwards if you

00:09:21.720 --> 00:09:23.650
have more questions
about those components.

00:09:23.650 --> 00:09:25.050
But really, I wanted to
jump into some things

00:09:25.050 --> 00:09:26.466
that people are
actually building,

00:09:26.466 --> 00:09:28.060
and what did it look like.

00:09:28.060 --> 00:09:29.711
So the first one is "Song Pop."

00:09:29.711 --> 00:09:31.210
How many people in
the audience have

00:09:31.210 --> 00:09:33.327
played this game,
out of curiosity?

00:09:33.327 --> 00:09:34.910
A few hands, so about
80 million users

00:09:34.910 --> 00:09:38.600
played this game-- fairly
successful by app standards.

00:09:38.600 --> 00:09:41.580
And basically it's
you go in, and you

00:09:41.580 --> 00:09:44.214
compete against your friend for
who is the best at song trivia,

00:09:44.214 --> 00:09:46.380
do recognize this song, do
you recognize this title,

00:09:46.380 --> 00:09:48.540
do you recognize this artist?

00:09:48.540 --> 00:09:51.430
And so with that, this is
their daily active users.

00:09:51.430 --> 00:09:55.340
And I remember being involved
at about near the very beginning

00:09:55.340 --> 00:09:57.530
of that hockey stick, and
hearing about this app

00:09:57.530 --> 00:09:59.310
and how it was
growing massively.

00:09:59.310 --> 00:10:01.770
And then it just
kept going and going,

00:10:01.770 --> 00:10:04.470
up until about 300 million
requests per day-- and this

00:10:04.470 --> 00:10:07.800
is all backed by App Engine--
and three billion data

00:10:07.800 --> 00:10:09.790
store operations per day.

00:10:09.790 --> 00:10:11.420
And the most amazing
thing about this

00:10:11.420 --> 00:10:14.890
is there's one back end
developer for this game.

00:10:14.890 --> 00:10:17.840
And he actually got to enjoy
his weekends off and sleep

00:10:17.840 --> 00:10:18.590
at night.

00:10:18.590 --> 00:10:21.190
And they actually
attribute App Engine

00:10:21.190 --> 00:10:23.550
to be one of the reasons
why they're successful,

00:10:23.550 --> 00:10:26.690
because instead of worrying
about their system scaling,

00:10:26.690 --> 00:10:29.330
having to maintain a NoSQL
database that is doing three

00:10:29.330 --> 00:10:32.666
billion rows, three
billion operations per day,

00:10:32.666 --> 00:10:35.290
instead they're able to focus on
adding the features people are

00:10:35.290 --> 00:10:37.600
asking in order to keep
that hockey stick growing.

00:10:37.600 --> 00:10:38.950
And they absolutely
love the platform,

00:10:38.950 --> 00:10:40.700
and have released their
newest title on it

00:10:40.700 --> 00:10:43.170
as well called "Movie Pop"--
which you can probably

00:10:43.170 --> 00:10:46.810
guess the spin on that,
but it's also really cool.

00:10:46.810 --> 00:10:48.550
And so what does
the architecture

00:10:48.550 --> 00:10:49.560
look like behind this?

00:10:49.560 --> 00:10:51.440
Well, here's what it looks like.

00:10:51.440 --> 00:10:53.190
It's actually pretty
straightforward.

00:10:53.190 --> 00:10:56.260
It's efficient, and it gets
the job done, and scales.

00:10:56.260 --> 00:11:00.190
And you'll notice I say
scale a lot during this talk,

00:11:00.190 --> 00:11:02.130
but scaling really is
the heart of everything

00:11:02.130 --> 00:11:04.610
we try and do at Google and
expose to all developers

00:11:04.610 --> 00:11:06.080
out there.

00:11:06.080 --> 00:11:10.070
And so the key aspect of
this is the core game logic

00:11:10.070 --> 00:11:12.060
running on App Engine instances.

00:11:12.060 --> 00:11:16.090
They're using Python and
having all those mobile device

00:11:16.090 --> 00:11:19.160
syncing into App Engine, have
all the game logic there.

00:11:19.160 --> 00:11:20.709
For example, all
the user profiles

00:11:20.709 --> 00:11:21.750
are stored in data store.

00:11:21.750 --> 00:11:23.340
All their songs,
all their scores,

00:11:23.340 --> 00:11:24.420
all the playlists
they've played,

00:11:24.420 --> 00:11:26.230
all their friends stored
in the data store.

00:11:26.230 --> 00:11:27.460
And so when you have
80 million users,

00:11:27.460 --> 00:11:29.400
you need a NoSQL
database that scales up

00:11:29.400 --> 00:11:31.540
and can handle that load.

00:11:31.540 --> 00:11:33.510
And similarly,
all of their songs

00:11:33.510 --> 00:11:35.260
are stored in cloud storage.

00:11:35.260 --> 00:11:37.072
So what happens
is you'll request

00:11:37.072 --> 00:11:38.280
to play a game with a friend.

00:11:38.280 --> 00:11:39.725
They'll get a push notification.

00:11:39.725 --> 00:11:41.350
And then you'll both
retrieve that data

00:11:41.350 --> 00:11:43.391
from cloud storage of all
the song samples, play,

00:11:43.391 --> 00:11:45.820
and then push the results
back into App Engine.

00:11:45.820 --> 00:11:47.280
And so it's fairly
straightforward,

00:11:47.280 --> 00:11:49.430
but it scales when you
use components right.

00:11:49.430 --> 00:11:51.422
And they're designed
for scalability in mind.

00:11:51.422 --> 00:11:53.880
And I'll talk a little bit more
about the actual components

00:11:53.880 --> 00:11:57.550
here in other
architectures as well.

00:11:57.550 --> 00:11:59.180
And another one that
I was lucky enough

00:11:59.180 --> 00:12:01.080
to be involved with
at the very beginning

00:12:01.080 --> 00:12:02.640
is "Motorola Spotlight Stories."

00:12:02.640 --> 00:12:04.150
Out of curiosity,
how many people

00:12:04.150 --> 00:12:05.810
have Moto X in the audience?

00:12:05.810 --> 00:12:08.240
And how many of you have
played the spotlight stories?

00:12:08.240 --> 00:12:09.760
And they're awesome, right?

00:12:09.760 --> 00:12:12.424
Yeah, they're
absolutely awesome.

00:12:12.424 --> 00:12:14.465
A friend of mine reached
out at Motorola an asked

00:12:14.465 --> 00:12:17.130
if I'd be interested in helping
out with some 20% project work.

00:12:17.130 --> 00:12:18.890
So I went over and talked
to the team at Motorola,

00:12:18.890 --> 00:12:19.850
and I was blown away.

00:12:19.850 --> 00:12:22.010
Because behind this door
was this creative team

00:12:22.010 --> 00:12:24.350
that worked on so many of
my favorite Pixar movies.

00:12:24.350 --> 00:12:25.850
You had Oscar-winning
directors, you

00:12:25.850 --> 00:12:28.209
had the animator who animated
Woody in "Toy Story."

00:12:28.209 --> 00:12:29.750
Everyone was there
in the room, and I

00:12:29.750 --> 00:12:31.500
had no idea what to
expect when I was just

00:12:31.500 --> 00:12:33.430
asked to come and
help out with 20%.

00:12:33.430 --> 00:12:35.880
Ironically, I had Glass on,
and it was still fairly new.

00:12:35.880 --> 00:12:38.690
And so I was both in shock,
and they were both in shock,

00:12:38.690 --> 00:12:40.430
and we kind of had a moment.

00:12:40.430 --> 00:12:43.540
But they got an amazing creative
team, spent a ton of time

00:12:43.540 --> 00:12:45.370
building their own
custom game engine

00:12:45.370 --> 00:12:47.190
and hiring amazing animators.

00:12:47.190 --> 00:12:49.959
Everything here is
hand-animated frame by frame.

00:12:49.959 --> 00:12:52.500
And if you have a Moto X, or
you know a friend with a Moto X,

00:12:52.500 --> 00:12:53.810
just ask to borrow it.

00:12:53.810 --> 00:12:55.370
I'll always remember
in the office,

00:12:55.370 --> 00:12:56.890
we have a lot of
Moto X's at Google.

00:12:56.890 --> 00:12:58.640
And everyone there is
just looking around,

00:12:58.640 --> 00:12:59.560
interacting in the world.

00:12:59.560 --> 00:13:01.018
And it's just an
amazing experience

00:13:01.018 --> 00:13:03.390
and really cool stuff they did.

00:13:03.390 --> 00:13:05.690
But what does it
actually look like?

00:13:05.690 --> 00:13:07.630
Well, here's the
core architecture.

00:13:07.630 --> 00:13:11.670
So on the Moto X itself, they
wrote their own native engine,

00:13:11.670 --> 00:13:13.790
OpenGL 3.0.

00:13:13.790 --> 00:13:16.160
Some really great stuff
there to power the in-game,

00:13:16.160 --> 00:13:18.840
and it runs on
Android 4.4 Kit Kat.

00:13:18.840 --> 00:13:22.250
What's interesting there
is the actual Java services

00:13:22.250 --> 00:13:23.220
they've implemented.

00:13:23.220 --> 00:13:26.120
And so all of the story
scripts and art assets

00:13:26.120 --> 00:13:27.700
are kept within Cloud Storage.

00:13:27.700 --> 00:13:29.980
So what happens is your
device, about once a day,

00:13:29.980 --> 00:13:31.984
just checks in with
App Engine, check

00:13:31.984 --> 00:13:33.400
and see if there's
any new content

00:13:33.400 --> 00:13:34.900
stories, anything at all.

00:13:34.900 --> 00:13:37.710
And if there is, it gets that
information from the datastore.

00:13:37.710 --> 00:13:41.790
And then App Engine will return
a signed URL to the device

00:13:41.790 --> 00:13:45.622
that it can then download all
of those assets to the phone.

00:13:45.622 --> 00:13:47.830
And similarly, on the cloud,
you have the Admin panel

00:13:47.830 --> 00:13:50.110
for adding new assets,
adding new stories.

00:13:50.110 --> 00:13:52.137
And that's the cloud
platform aspect.

00:13:52.137 --> 00:13:54.220
And the other interesting
thing they're doing here

00:13:54.220 --> 00:13:55.260
is their engine service.

00:13:55.260 --> 00:13:58.124
I mean, this is perfectly timed
after the Analytics session.

00:13:58.124 --> 00:14:00.290
And so they're using Google
Analytics for everything

00:14:00.290 --> 00:14:02.460
to see how users are
playing, how many times are

00:14:02.460 --> 00:14:04.210
people playing it.

00:14:04.210 --> 00:14:07.190
If you actually play
one of the movies,

00:14:07.190 --> 00:14:09.150
like "Windy Day"
or "Buggy Night,"

00:14:09.150 --> 00:14:11.650
you can follow along the story
and kind of interact with it.

00:14:11.650 --> 00:14:13.232
But if you just
detour off, there's

00:14:13.232 --> 00:14:15.190
all these really funny
things you wouldn't even

00:14:15.190 --> 00:14:17.150
notice are happening
unless you take your time.

00:14:17.150 --> 00:14:19.260
And you can get a sense for
what people are looking at,

00:14:19.260 --> 00:14:21.551
what really excites people,
what do they look at a lot.

00:14:21.551 --> 00:14:24.586
So that's the
architecture behind that.

00:14:24.586 --> 00:14:26.710
And more than willing to
talk about these later on,

00:14:26.710 --> 00:14:28.126
and there's lots
of architectures.

00:14:28.126 --> 00:14:29.790
But we have 30
minutes, so this is

00:14:29.790 --> 00:14:32.349
a whirlwind tour of
everything great in cloud.

00:14:32.349 --> 00:14:34.890
So now we're going to talk about
some reference architectures

00:14:34.890 --> 00:14:35.480
here.

00:14:35.480 --> 00:14:37.180
And these really are,
in an ideal world,

00:14:37.180 --> 00:14:38.930
what would the perfect
implementation look

00:14:38.930 --> 00:14:40.470
like on Google Cloud platform.

00:14:40.470 --> 00:14:42.879
And feel free to mix and
match and choose whatever

00:14:42.879 --> 00:14:45.420
is best for your implementation,
because there's no wrong way

00:14:45.420 --> 00:14:47.660
to build when you use the
tools you're familiar with

00:14:47.660 --> 00:14:49.493
and sprinkle in the
technology that you know

00:14:49.493 --> 00:14:52.166
is going to be there for
you when your game grows.

00:14:52.166 --> 00:14:53.540
So the first one
we're looking at

00:14:53.540 --> 00:14:56.210
is Gaming Reference
Architecture, specifically

00:14:56.210 --> 00:14:59.130
with player versus player,
intense multiplaying,

00:14:59.130 --> 00:15:01.970
low latency dedicated
game servers.

00:15:01.970 --> 00:15:04.210
So the past two we talked
about were more mobile

00:15:04.210 --> 00:15:05.730
focused, mobile device focused.

00:15:05.730 --> 00:15:08.220
This is what I do when I
get home for five hours

00:15:08.220 --> 00:15:09.970
until I can't stay
awake anymore.

00:15:09.970 --> 00:15:12.390
And it's really about building
a full-featured gameplay

00:15:12.390 --> 00:15:14.220
experience.

00:15:14.220 --> 00:15:17.060
So with these reference
architectures,

00:15:17.060 --> 00:15:19.140
we like to pack up a
sample application as well,

00:15:19.140 --> 00:15:21.265
to show you that it's fairly
straightforward to get

00:15:21.265 --> 00:15:23.110
the bare bones
implementation up and running

00:15:23.110 --> 00:15:25.560
so you can start
sprinkling in custom logic.

00:15:25.560 --> 00:15:29.420
And for that, about two years
ago at Google I/O, we-- Colt,

00:15:29.420 --> 00:15:31.530
actually-- developed
this game called "GRITS."

00:15:31.530 --> 00:15:33.422
And it was meant to
show HTML5, and having

00:15:33.422 --> 00:15:35.005
a whole bunch of
robots running around

00:15:35.005 --> 00:15:37.370
on screen shooting each other.

00:15:37.370 --> 00:15:39.420
We took that as the
core gameplay element

00:15:39.420 --> 00:15:42.070
and sprinkled in the
auto-scaling game cluster

00:15:42.070 --> 00:15:42.770
aspect.

00:15:42.770 --> 00:15:46.090
So essentially, what you have is
this core fun gameplay mechanic

00:15:46.090 --> 00:15:47.665
requiring dedicated servers.

00:15:47.665 --> 00:15:50.290
And what we've added to it is a
whole bunch of App Engine logic

00:15:50.290 --> 00:15:52.800
for scaling up, scaling
down, maintaining status

00:15:52.800 --> 00:15:55.240
of all the clusters, and doing
some of the straightforward

00:15:55.240 --> 00:15:57.310
matchmaking logic.

00:15:57.310 --> 00:15:59.730
So what does this
actually look like?

00:15:59.730 --> 00:16:04.610
Well, I apologize for the big
architecture diagrams to start.

00:16:04.610 --> 00:16:06.212
Typically, I like
to reveal these.

00:16:06.212 --> 00:16:08.420
But then I feel bad, because
everyone in the audience

00:16:08.420 --> 00:16:10.711
takes a picture, and the next
slide, ooh, there's more,

00:16:10.711 --> 00:16:11.830
takes a picture.

00:16:11.830 --> 00:16:14.580
And about eight slides
later, it's finally revealed.

00:16:14.580 --> 00:16:17.560
And so with this one--
and the thing I really

00:16:17.560 --> 00:16:19.790
want you to focus on
is down in the bottom,

00:16:19.790 --> 00:16:21.540
you'll see Compute
Engine instances

00:16:21.540 --> 00:16:22.910
connected to mobile devices.

00:16:22.910 --> 00:16:25.610
And that is where the majority
of the gameplay of the player

00:16:25.610 --> 00:16:26.430
is going to happen.

00:16:26.430 --> 00:16:29.162
It's just directly connecting
to those instances,

00:16:29.162 --> 00:16:30.620
running the dedicated
game servers,

00:16:30.620 --> 00:16:33.240
handling all those connections.

00:16:33.240 --> 00:16:35.846
But as you know,
there's a lot more

00:16:35.846 --> 00:16:38.345
that it takes to actually make
a game that players are going

00:16:38.345 --> 00:16:39.928
to come back to and
that they're going

00:16:39.928 --> 00:16:41.020
to have a great time with.

00:16:41.020 --> 00:16:42.820
And that's really
where App Engine comes

00:16:42.820 --> 00:16:46.310
in as the brains of
building a game type like,

00:16:46.310 --> 00:16:47.400
a game like this.

00:16:47.400 --> 00:16:49.100
And Compute Engine
is really the brawn

00:16:49.100 --> 00:16:51.700
of just running the
dedicated game servers.

00:16:51.700 --> 00:16:54.270
So with respect to
server matchmaking,

00:16:54.270 --> 00:16:57.510
Memcache is low latency,
in-memory caching.

00:16:57.510 --> 00:16:59.460
And you want to think
about, for example,

00:16:59.460 --> 00:17:00.950
keeping a list of
all your servers

00:17:00.950 --> 00:17:02.452
and their current
stats in Memcache,

00:17:02.452 --> 00:17:04.910
so every single person who
looks for a server can instantly

00:17:04.910 --> 00:17:08.730
get that back, and you're not
taking the cost of extra data

00:17:08.730 --> 00:17:12.300
center reads with respect to
latency and monetary value

00:17:12.300 --> 00:17:13.555
as well.

00:17:13.555 --> 00:17:16.180
Another important thing as well
is processing in-game requests.

00:17:16.180 --> 00:17:17.836
If players have
custom configuration,

00:17:17.836 --> 00:17:19.960
they want to download that
down to the game server.

00:17:19.960 --> 00:17:21.418
Or if they want to
purchase things,

00:17:21.418 --> 00:17:23.560
or if you want to keep
track of kill/death ratios

00:17:23.560 --> 00:17:24.589
at the end of a match.

00:17:24.589 --> 00:17:26.601
All of that can be
sent into App Engine

00:17:26.601 --> 00:17:29.100
and stored within data store,
and all of the player profiles

00:17:29.100 --> 00:17:31.840
that can be built up there,
by relying on the data

00:17:31.840 --> 00:17:34.240
store and that
scalable technology.

00:17:34.240 --> 00:17:35.770
And you'll notice
that everything's

00:17:35.770 --> 00:17:37.400
going through this
Cloud Endpoints.

00:17:37.400 --> 00:17:40.170
And this is a
fantastic technology

00:17:40.170 --> 00:17:43.100
that provides RESTful APIs,
strongly-typed libraries,

00:17:43.100 --> 00:17:44.219
and authentication.

00:17:44.219 --> 00:17:46.760
I had to do all of this before
Cloud Endpoints was available.

00:17:46.760 --> 00:17:50.040
And you kids these days,
just have it so lucky.

00:17:50.040 --> 00:17:52.540
And Cloud Endpoints abstracts
away a lot of the complexities

00:17:52.540 --> 00:17:53.039
there.

00:17:53.039 --> 00:17:55.590
But if you want to use your
own authentication RESTful API

00:17:55.590 --> 00:17:59.660
system, feel free to sprinkle
that in there as well.

00:17:59.660 --> 00:18:02.320
And the last aspect is the
virtual machine orchestration.

00:18:02.320 --> 00:18:04.010
And that really is
scaling the cluster

00:18:04.010 --> 00:18:06.760
up and down with respect
to demand and player load.

00:18:06.760 --> 00:18:08.260
And there's actually
two things that

00:18:08.260 --> 00:18:09.676
make that great
on Compute Engine.

00:18:09.676 --> 00:18:11.410
One is we do minute billing.

00:18:11.410 --> 00:18:14.054
So if you need to
spin up and burst

00:18:14.054 --> 00:18:15.470
and then terminate
down instances,

00:18:15.470 --> 00:18:16.650
you don't have to
worry about, oh, I'm

00:18:16.650 --> 00:18:17.820
getting billed by the hour.

00:18:17.820 --> 00:18:19.630
How does my logic take
into account that?

00:18:19.630 --> 00:18:21.088
You can just
terminate an instance,

00:18:21.088 --> 00:18:23.090
and you're only charged
for what you used there.

00:18:23.090 --> 00:18:24.800
Similarly, the
consistent performance

00:18:24.800 --> 00:18:27.661
that you're not going to have
keep an eye on your instances

00:18:27.661 --> 00:18:29.410
and find the ones that
are underperforming

00:18:29.410 --> 00:18:32.100
so you can go in and
terminate those out.

00:18:32.100 --> 00:18:35.200
And so the final last aspect
of this architecture, I swear,

00:18:35.200 --> 00:18:36.427
is the big data aspect of it.

00:18:36.427 --> 00:18:38.010
I know that's a
really fuzzy term that

00:18:38.010 --> 00:18:39.930
has a lot different
ways of looking at that

00:18:39.930 --> 00:18:41.360
and slicing and dicing it.

00:18:41.360 --> 00:18:45.070
And just one example here is you
have all the game server logs,

00:18:45.070 --> 00:18:47.431
every single player action,
everything people are doing,

00:18:47.431 --> 00:18:49.680
dumping that into a permanent
storage in cloud storage

00:18:49.680 --> 00:18:50.200
is easy.

00:18:50.200 --> 00:18:52.500
And it's really cheap to
keep it there long-term.

00:18:52.500 --> 00:18:54.930
And then you can start to do
things like MapReduce jobs

00:18:54.930 --> 00:18:58.070
over that to aggregate down
to player actions per day,

00:18:58.070 --> 00:19:00.080
instead of every
single player action.

00:19:00.080 --> 00:19:02.590
And from there, you can pipe
into tools like BigQuery

00:19:02.590 --> 00:19:04.800
that can do ad hoc, real-time
analysis on billions

00:19:04.800 --> 00:19:05.467
of rows of data.

00:19:05.467 --> 00:19:06.841
And so there are
these tools that

00:19:06.841 --> 00:19:08.499
allow you to get
really great insights.

00:19:08.499 --> 00:19:10.290
And typically, what we
find is people start

00:19:10.290 --> 00:19:12.360
building on the left, get
the core gameplay working.

00:19:12.360 --> 00:19:13.820
And as they scale
and as they grow,

00:19:13.820 --> 00:19:15.260
they start to sprinkle
in more features.

00:19:15.260 --> 00:19:16.670
And eventually,
they're into BigQuery,

00:19:16.670 --> 00:19:18.370
to actually understand
and get insight

00:19:18.370 --> 00:19:21.960
into what's happening
with their applications.

00:19:21.960 --> 00:19:24.140
And so one more reference
architecture for you

00:19:24.140 --> 00:19:27.640
here-- and this is along the
mobile gaming one as well.

00:19:27.640 --> 00:19:29.790
And this is your typical
mobile gaming application

00:19:29.790 --> 00:19:32.200
with a complex back
end, where you're

00:19:32.200 --> 00:19:33.662
supporting multiple
devices, you're

00:19:33.662 --> 00:19:35.620
scalable to millions of
players, and you really

00:19:35.620 --> 00:19:38.960
want to sprinkle in the
engaging social aspects.

00:19:38.960 --> 00:19:41.210
And with that, we have an
awesome sample application--

00:19:41.210 --> 00:19:43.600
which, if you want to just
throw something out there

00:19:43.600 --> 00:19:45.630
in the app store, you
can download this, put it

00:19:45.630 --> 00:19:47.980
in the App Store
or the Play Store,

00:19:47.980 --> 00:19:50.295
and see if you can get any
revenue driving from it.

00:19:50.295 --> 00:19:52.380
It's actually full-featured,
and pretty awesome

00:19:52.380 --> 00:19:54.399
to add more riddles
to it, et cetera.

00:19:54.399 --> 00:19:56.440
And so what this game is,
it's called "Griddler."

00:19:56.440 --> 00:19:58.660
And essentially, it's kind
of a player versus player,

00:19:58.660 --> 00:20:01.600
asynchronous game, where
you get a riddle such as,

00:20:01.600 --> 00:20:03.610
what has to be broken
before it can be used?

00:20:03.610 --> 00:20:05.829
And you highlight, oh, egg.

00:20:05.829 --> 00:20:06.870
And so you highlight egg.

00:20:06.870 --> 00:20:08.130
And you're competing
against your friend

00:20:08.130 --> 00:20:09.500
to go through all of
these different riddles

00:20:09.500 --> 00:20:11.060
and get a score at the end.

00:20:11.060 --> 00:20:14.140
And so that asynchronous
game works really well

00:20:14.140 --> 00:20:14.810
on App Engine.

00:20:14.810 --> 00:20:16.643
We see a lot of people
being very successful

00:20:16.643 --> 00:20:18.780
with that architecture
and game type.

00:20:18.780 --> 00:20:20.640
And now you have a
great starting point

00:20:20.640 --> 00:20:23.500
available on both Android
and iOS to move quickly there

00:20:23.500 --> 00:20:27.202
and have a base implementation
to start building on.

00:20:27.202 --> 00:20:28.410
And what does that look like?

00:20:28.410 --> 00:20:32.937
Well, similar to what you saw
for "Song Pop," except we've

00:20:32.937 --> 00:20:34.770
added a little bit more
in here with respect

00:20:34.770 --> 00:20:37.330
to other components
that can drive value.

00:20:37.330 --> 00:20:39.420
And so we have our
iOS, Android devices,

00:20:39.420 --> 00:20:41.200
through Cloud Endpoints
to App Engine.

00:20:41.200 --> 00:20:43.700
And one of the interesting
things we'll actually point out

00:20:43.700 --> 00:20:46.250
here is the task queues
and scheduled tasks

00:20:46.250 --> 00:20:48.210
and App Engine back ends.

00:20:48.210 --> 00:20:50.337
If you've used iOS Push
notifications, for example,

00:20:50.337 --> 00:20:52.420
you know they like you to
maintain sockets and not

00:20:52.420 --> 00:20:54.330
just open and close
a million sockets.

00:20:54.330 --> 00:20:56.070
So what you can do
is have a back end--

00:20:56.070 --> 00:20:58.500
a few back ends on App
Engine running continuously.

00:20:58.500 --> 00:21:00.800
And what they do is
a pull/push request

00:21:00.800 --> 00:21:02.650
from the task cube,
batch those together,

00:21:02.650 --> 00:21:05.040
and then push those over
Apple push notification,

00:21:05.040 --> 00:21:08.430
just so you can tap into
what Apple expects you

00:21:08.430 --> 00:21:10.410
to do with respect to
push notifications,

00:21:10.410 --> 00:21:11.900
and harness the
scalable components

00:21:11.900 --> 00:21:15.057
within App Engine and the
task queues, et cetera.

00:21:15.057 --> 00:21:16.390
And that's just one of the ways.

00:21:16.390 --> 00:21:17.973
And we actually have
a sample for that

00:21:17.973 --> 00:21:20.590
as well, if you're
interested in doing that.

00:21:20.590 --> 00:21:23.000
And the other aspect here
that's worth calling out

00:21:23.000 --> 00:21:24.930
is cloud storage, once again.

00:21:24.930 --> 00:21:28.081
And you don't have to choose
between App Engine or Compute

00:21:28.081 --> 00:21:28.580
Engine.

00:21:28.580 --> 00:21:29.996
It's really about
picking the best

00:21:29.996 --> 00:21:31.270
tool for what you're doing.

00:21:31.270 --> 00:21:33.670
And so say you have an
application where people upload

00:21:33.670 --> 00:21:36.336
pictures and video, and you want
to do some transcoding or image

00:21:36.336 --> 00:21:37.316
manipulation on that.

00:21:37.316 --> 00:21:38.940
You can upload that
through App Engine,

00:21:38.940 --> 00:21:40.300
dump that into cloud storage.

00:21:40.300 --> 00:21:42.180
And then using task
queues, you can actually

00:21:42.180 --> 00:21:44.550
orchestrate the
processing of those videos

00:21:44.550 --> 00:21:46.600
with Compute Engine,
whatever custom software

00:21:46.600 --> 00:21:48.360
you want to run
on that, and then

00:21:48.360 --> 00:21:51.040
put it back in cloud storage
and send notifications back.

00:21:51.040 --> 00:21:52.610
There's lots of
flexibility here,

00:21:52.610 --> 00:21:55.040
and a million different ways
to combine these components

00:21:55.040 --> 00:21:57.315
and really pick what works
best for your use case

00:21:57.315 --> 00:21:59.750
and application.

00:21:59.750 --> 00:22:03.480
And so just to quickly wrap
it up here, what we've seen

00:22:03.480 --> 00:22:06.912
is really-- sorry for the
cropping at the very top,

00:22:06.912 --> 00:22:08.370
not quite sure what
happened there.

00:22:08.370 --> 00:22:11.190
But we've seen Google is the
best place for developers.

00:22:11.190 --> 00:22:13.410
From AAA to indie
studios, we love

00:22:13.410 --> 00:22:15.410
seeing what people are
building on the platform.

00:22:15.410 --> 00:22:17.180
If you have anything great
or you're thinking about it,

00:22:17.180 --> 00:22:17.930
please talk to us.

00:22:17.930 --> 00:22:19.059
We'd love to hear from you.

00:22:19.059 --> 00:22:20.600
You'll see there's
a couple of Google

00:22:20.600 --> 00:22:22.220
employees in the audience.

00:22:22.220 --> 00:22:23.917
And they may be heads
down on laptops.

00:22:23.917 --> 00:22:25.750
Apologies for that--
it's performance review

00:22:25.750 --> 00:22:27.120
season at Google, and
everyone's a little bit

00:22:27.120 --> 00:22:28.120
stressed out about that.

00:22:28.120 --> 00:22:30.010
But we're more than
happy to talk to you

00:22:30.010 --> 00:22:32.240
and put our laptops away.

00:22:32.240 --> 00:22:34.450
And with that as
well, we have papers

00:22:34.450 --> 00:22:36.200
talking about the
reference architectures.

00:22:36.200 --> 00:22:38.906
And we also have those
sample applications.

00:22:38.906 --> 00:22:41.030
If you just Google any
words that come to your mind

00:22:41.030 --> 00:22:42.904
from this session, you'll
probably find them.

00:22:42.904 --> 00:22:45.200
Otherwise,
cloud.google.com, the papers

00:22:45.200 --> 00:22:46.710
are all there to
go in and look at.

00:22:46.710 --> 00:22:50.120
Otherwise, our GitHub account
has the samples on it.

00:22:50.120 --> 00:22:52.500
And this link here is to
a prettier GitHub version

00:22:52.500 --> 00:22:54.110
that has a little
bit more readable.

00:22:54.110 --> 00:22:58.125
But you'll also find everything
on the cloud GitHub account.

00:22:58.125 --> 00:22:59.750
I guess I'll leave
that up for one more

00:22:59.750 --> 00:23:01.225
minute, given the pictures here.

00:23:01.225 --> 00:23:03.350
But if you just search for
whatever's on your mind,

00:23:03.350 --> 00:23:03.975
you'll find it.

00:23:03.975 --> 00:23:06.245
I've done it a million times.

00:23:06.245 --> 00:23:07.870
And so lastly, this
one you'll actually

00:23:07.870 --> 00:23:09.244
really want to
take a picture of.

00:23:09.244 --> 00:23:10.810
And this is a really cool deal.

00:23:10.810 --> 00:23:13.660
It is $2,000 in Cloud Credits.

00:23:13.660 --> 00:23:16.640
Basically, go to--
wow, that QR code

00:23:16.640 --> 00:23:18.930
became giant on that screen.

00:23:18.930 --> 00:23:20.110
That's taller than I am.

00:23:20.110 --> 00:23:23.147
But go there, enter in the
form, enter in a project ID.

00:23:23.147 --> 00:23:24.980
And you'll get $1,000
of App Engine credits,

00:23:24.980 --> 00:23:27.360
which will take you
quite a long ways,

00:23:27.360 --> 00:23:29.280
and also $1,000 in
Compute Engine, which

00:23:29.280 --> 00:23:31.990
you can go very far on,
especially if you turn down

00:23:31.990 --> 00:23:35.620
your instance and take
advantage of minute billing.

00:23:35.620 --> 00:23:38.530
I've seen people build
some amazing systems

00:23:38.530 --> 00:23:41.324
and run a quick test, OK,
tear down the instances,

00:23:41.324 --> 00:23:42.240
change things for now.

00:23:42.240 --> 00:23:44.680
And then run another quick
test, tear down the instances.

00:23:44.680 --> 00:23:47.400
Great options there
for maximizing

00:23:47.400 --> 00:23:50.060
the use case of these credits.

00:23:50.060 --> 00:23:51.600
And that's basically it.

00:23:51.600 --> 00:23:53.420
I realize there's no
Q&amp;A, but thank you.

00:23:53.420 --> 00:23:55.900
And I'll be around if you
have any more questions.

