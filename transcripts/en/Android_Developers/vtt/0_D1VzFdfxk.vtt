WEBVTT
Kind: captions
Language: en

00:00:05.210 --> 00:00:09.530
I'm here today to tell you a
couple stories about optimizing

00:00:09.530 --> 00:00:12.220
things for Android Wear.

00:00:12.220 --> 00:00:15.880
And, well first off,
little bit about myself.

00:00:15.880 --> 00:00:18.440
I'm an engineer on the
Android Wear Frameworks Team.

00:00:18.440 --> 00:00:21.630
I spend a lot of my time doing
battery life optimization

00:00:21.630 --> 00:00:23.250
among some other things.

00:00:23.250 --> 00:00:24.750
And I've been
developing for Android

00:00:24.750 --> 00:00:29.360
since the dark days of
Cupcake many, many moons ago.

00:00:29.360 --> 00:00:31.415
And, yeah, I guess
the only other thing

00:00:31.415 --> 00:00:34.590
to mention-- I'm Canadian so
if you see any funky spelling

00:00:34.590 --> 00:00:38.130
and so on and so forth
that's because-- that's

00:00:38.130 --> 00:00:41.980
how you spell English, and
that's real Queen's English.

00:00:41.980 --> 00:00:45.630
And, yeah, so first off
the most important part

00:00:45.630 --> 00:00:50.520
about optimizing Android
Wear is, well, battery life.

00:00:50.520 --> 00:00:51.637
Pretty self explanatory.

00:00:51.637 --> 00:00:53.720
The worst thing you could
possibly have on a watch

00:00:53.720 --> 00:00:57.220
these days is one that
has a blank screen.

00:00:57.220 --> 00:00:59.380
We all kind of
like-- and our users

00:00:59.380 --> 00:01:02.040
all like having a
screen that's always on.

00:01:02.040 --> 00:01:05.239
Its always got information,
and you can always glance at it

00:01:05.239 --> 00:01:07.260
and see what's up.

00:01:07.260 --> 00:01:10.450
So there's a couple
challenges when it comes

00:01:10.450 --> 00:01:13.770
to optimizing for battery life.

00:01:13.770 --> 00:01:16.980
And, well, the screen
being on all the time

00:01:16.980 --> 00:01:19.860
is actually a
pretty big problem.

00:01:19.860 --> 00:01:21.860
To actually have
the screen on, we

00:01:21.860 --> 00:01:23.970
have to make a lot
of compromises.

00:01:23.970 --> 00:01:26.540
And there is actually-- the
watches are pretty good.

00:01:26.540 --> 00:01:29.270
They've gotten enough
performance to run Android.

00:01:29.270 --> 00:01:32.700
It's got enough performance
to run full videos

00:01:32.700 --> 00:01:34.290
and that tends to be a problem.

00:01:34.290 --> 00:01:36.280
Because if you run full
videos on your watch

00:01:36.280 --> 00:01:38.760
they don't tend
to last very long.

00:01:38.760 --> 00:01:42.220
So, yeah, there's quite a few
things we have to deal with.

00:01:42.220 --> 00:01:45.035
If you want a very, very,
powerful device that

00:01:45.035 --> 00:01:49.010
can last a long time, you could
strap your phone to your wrist.

00:01:49.010 --> 00:01:51.000
But that's also not very pretty.

00:01:51.000 --> 00:01:57.540
So, yeah, we have now three
tales of battery life.

00:01:57.540 --> 00:01:59.470
These are sort of
cautionary tales,

00:01:59.470 --> 00:02:03.090
sort of campfire ghost
stories of things that have,

00:02:03.090 --> 00:02:05.260
well, let's not say happened.

00:02:05.260 --> 00:02:08.000
But lessons that we've learned.

00:02:08.000 --> 00:02:10.060
So first I want to start
off with the watchface.

00:02:10.060 --> 00:02:13.140
So this watchface wants to be
really, really, really pretty.

00:02:13.140 --> 00:02:15.460
And how you make a
really pretty watchface,

00:02:15.460 --> 00:02:17.910
well we start with, like,
gorgeous animations.

00:02:17.910 --> 00:02:20.800
And I'm talking,
like, animations

00:02:20.800 --> 00:02:26.480
that have a slowly moving second
hand that sweeps gracefully

00:02:26.480 --> 00:02:27.260
across the screen.

00:02:27.260 --> 00:02:30.274
It's got cogs basically
taking away the background--

00:02:30.274 --> 00:02:31.190
just gorgeous watches.

00:02:31.190 --> 00:02:34.150
Well there's a big
problem with that.

00:02:34.150 --> 00:02:36.090
Animations are very powerful.

00:02:36.090 --> 00:02:36.900
They're great.

00:02:36.900 --> 00:02:40.130
They're gorgeous, but
they're really power hungry.

00:02:40.130 --> 00:02:42.460
If you have an animation
that runs every time

00:02:42.460 --> 00:02:45.780
your watchface shows up
from its ambient mode.

00:02:45.780 --> 00:02:48.650
So every time you look at it
it does a little animation.

00:02:48.650 --> 00:02:50.270
Yeah that's perfectly fine.

00:02:50.270 --> 00:02:52.560
Half a second
animation, what not.

00:02:52.560 --> 00:02:55.480
But if you have to keep an
animation going all the time,

00:02:55.480 --> 00:02:58.735
well, the application
processor is

00:02:58.735 --> 00:03:02.537
going to have to calculate all
those-- all the pixels moving.

00:03:02.537 --> 00:03:04.620
Everything on your watch
is running at full speed.

00:03:04.620 --> 00:03:06.262
Your watch is going
to heat up and it

00:03:06.262 --> 00:03:07.470
drains a lot of battery life.

00:03:07.470 --> 00:03:10.680
So probably want to
avoid having animations

00:03:10.680 --> 00:03:12.840
that run all the time.

00:03:12.840 --> 00:03:17.710
So you want to pick the
best spots for animation.

00:03:17.710 --> 00:03:20.460
Well the other problem with
animations, and Android Wear

00:03:20.460 --> 00:03:23.430
actually, on phones
you don't really

00:03:23.430 --> 00:03:27.290
get screens that change in
the refresh rate very much.

00:03:27.290 --> 00:03:30.030
They're almost all
universally 60 Hertz.

00:03:30.030 --> 00:03:34.870
So we target 60 frames per
second then [INAUDIBLE].

00:03:34.870 --> 00:03:37.900
On watches because we are
using really small screens,

00:03:37.900 --> 00:03:40.020
very power efficient
screens, they're

00:03:40.020 --> 00:03:45.480
only guaranteed to be
operating at 30 Hertz.

00:03:45.480 --> 00:03:48.440
And this is sort of even
more compounded by the fact

00:03:48.440 --> 00:03:50.650
that some screens
work slightly faster,

00:03:50.650 --> 00:03:54.410
some screens may even go
all the way up to 60 Hertz.

00:03:54.410 --> 00:03:56.870
But you're only guaranteed
to work at 30 Hertz,

00:03:56.870 --> 00:03:59.670
so your animations
actually have to look good

00:03:59.670 --> 00:04:01.090
at 30 frames per second.

00:04:01.090 --> 00:04:03.940
Which isn't a big
deal, but if you're not

00:04:03.940 --> 00:04:06.600
aware of it you will suddenly
pull out your watch and go,

00:04:06.600 --> 00:04:08.440
this animation
doesn't look good.

00:04:08.440 --> 00:04:11.030
No matter what I do, no
matter how fast I render it,

00:04:11.030 --> 00:04:13.080
no matter all the
little hacks I do,

00:04:13.080 --> 00:04:15.690
it still looks like it's
running on 30 frames per second.

00:04:15.690 --> 00:04:17.610
That's not, like,
something broken.

00:04:17.610 --> 00:04:20.070
That's actually how fast
the hardware can possibly

00:04:20.070 --> 00:04:23.980
render because the screen
is very energy efficient.

00:04:23.980 --> 00:04:27.330
That said, you still want to hit
60 millisecond frame rendering

00:04:27.330 --> 00:04:30.640
target that you need for
60 frames per second.

00:04:30.640 --> 00:04:34.240
Because other watches
will have better screens.

00:04:34.240 --> 00:04:39.250
So your watch may not be great,
but-- have the greatest screen

00:04:39.250 --> 00:04:43.230
refresh rate, but your
other users may do.

00:04:43.230 --> 00:04:47.930
And finally, somebody
will always ask you,

00:04:47.930 --> 00:04:51.174
you know what, these
watchface, the animations,

00:04:51.174 --> 00:04:52.090
they're great and all.

00:04:52.090 --> 00:04:54.110
But we can save
more battery life

00:04:54.110 --> 00:04:56.730
if we turn on hardware
acceleration, right?

00:04:56.730 --> 00:04:59.940
And we get asked this
basically once a month.

00:04:59.940 --> 00:05:01.429
Somebody will
think-- will ask hey,

00:05:01.429 --> 00:05:02.970
can we turn on
hardware acceleration?

00:05:02.970 --> 00:05:04.870
We're trying to
save battery life.

00:05:04.870 --> 00:05:07.230
So in this watchface
in particular,

00:05:07.230 --> 00:05:09.640
we actually sat down
and we measured current.

00:05:09.640 --> 00:05:14.110
When you turn on hardware
acceleration and you

00:05:14.110 --> 00:05:17.760
have a 50% increase
in battery drain which

00:05:17.760 --> 00:05:19.191
actually kind of makes sense.

00:05:19.191 --> 00:05:20.690
When you turn
hardware acceleration,

00:05:20.690 --> 00:05:23.954
you're actually using more
silicon on the actual device.

00:05:23.954 --> 00:05:25.620
Normally things that
wouldn't be running

00:05:25.620 --> 00:05:28.490
would now be running
in-- because they're

00:05:28.490 --> 00:05:30.850
accelerating the graphics.

00:05:30.850 --> 00:05:34.720
So, yeah, you don't-- if you
need hardware acceleration you

00:05:34.720 --> 00:05:39.180
should totally use it to
get better frame rates.

00:05:39.180 --> 00:05:41.430
But if you don't need
it, turning it on

00:05:41.430 --> 00:05:43.680
won't help your battery
life whatsoever.

00:05:43.680 --> 00:05:46.900
So something to keep in
mind that it's not magic

00:05:46.900 --> 00:05:48.940
that you sprinkle
on top of whatever

00:05:48.940 --> 00:05:50.080
animation you're doing.

00:05:50.080 --> 00:05:52.720
It actually has
cost involved in it.

00:05:52.720 --> 00:05:56.360
So this gorgeous
animating watchface

00:05:56.360 --> 00:05:58.090
had this other thing
they wanted to do.

00:05:58.090 --> 00:06:01.180
And they wanted to have
photos, and specifically they

00:06:01.180 --> 00:06:04.710
wanted to pull up photos
from the actual phone

00:06:04.710 --> 00:06:06.570
that this watch was paired with.

00:06:06.570 --> 00:06:11.340
And you have giant
bitmaps that they

00:06:11.340 --> 00:06:12.550
wanted to render in a screen.

00:06:12.550 --> 00:06:17.000
So they had really,
really big bitmaps

00:06:17.000 --> 00:06:20.110
that sucked up a
lot of memory which

00:06:20.110 --> 00:06:21.360
became a bit of a problem.

00:06:21.360 --> 00:06:24.450
Because these devices don't
have a lot of memory on it.

00:06:24.450 --> 00:06:27.860
They have about half a gigabyte
of memory and that's it.

00:06:27.860 --> 00:06:31.700
Now that's more than
enough because the screen

00:06:31.700 --> 00:06:34.790
with the biggest resolution
is currently the Huawei watch,

00:06:34.790 --> 00:06:37.530
which is 400 by 400 pixels.

00:06:37.530 --> 00:06:39.170
Not a lot of pixels to push.

00:06:39.170 --> 00:06:45.440
You don't need gigantic 15
mega-- megapixel photos,

00:06:45.440 --> 00:06:50.400
but they sent it over
on the Bluetooth radio.

00:06:50.400 --> 00:06:53.915
A radio that needs to slowly
send every byte on both your--

00:06:53.915 --> 00:06:55.490
from your phone to your watch.

00:06:55.490 --> 00:06:58.040
So now you're draining
battery from your phone.

00:06:58.040 --> 00:07:00.350
You're draining batteries
from your watch,

00:07:00.350 --> 00:07:04.080
and that didn't
work out very well.

00:07:04.080 --> 00:07:07.780
And we'll just say that once
we actually got the phone

00:07:07.780 --> 00:07:10.700
to actually shrink the images
beforehand, and send it

00:07:10.700 --> 00:07:15.916
over that way, battery
life became a lot better.

00:07:15.916 --> 00:07:17.790
Things sent a lot faster
for some odd reason.

00:07:17.790 --> 00:07:22.410
Apparently if you send less data
over, it sends a lot faster.

00:07:22.410 --> 00:07:26.690
Watchfaces are always loaded
on your watch in the sense

00:07:26.690 --> 00:07:30.790
that every time your watch
goes back to the watch mode,

00:07:30.790 --> 00:07:32.340
you see a watchface.

00:07:32.340 --> 00:07:34.030
Seems obvious,
but that does mean

00:07:34.030 --> 00:07:36.720
that anything that is
running on your watchface

00:07:36.720 --> 00:07:38.410
is loaded in memory.

00:07:38.410 --> 00:07:40.710
Which means that if it
takes up a lot of memory

00:07:40.710 --> 00:07:43.650
the application you
just used is now

00:07:43.650 --> 00:07:46.470
garbage collected and stopped.

00:07:46.470 --> 00:07:49.710
So it means that you want to
be a good citizen of Android,

00:07:49.710 --> 00:07:55.790
and actually not use too much
memory if you don't have to.

00:07:55.790 --> 00:07:59.150
So that other applications won't
randomly shut down every time

00:07:59.150 --> 00:08:03.560
you-- and take longer
to boot up every time.

00:08:03.560 --> 00:08:07.620
So taking all these
things into account,

00:08:07.620 --> 00:08:09.345
we end up with a
watchface that actually

00:08:09.345 --> 00:08:14.010
is fairly power efficient
on many, many devices.

00:08:14.010 --> 00:08:16.170
But we pulled it up
on certain devices,

00:08:16.170 --> 00:08:20.070
and suddenly the
battery life jumped up.

00:08:20.070 --> 00:08:21.570
Sorry, the battery
life jumped down,

00:08:21.570 --> 00:08:24.190
the battery
consumption jumped up,

00:08:24.190 --> 00:08:26.690
and it was really strange
because it was only

00:08:26.690 --> 00:08:27.850
a certain class of devices.

00:08:27.850 --> 00:08:31.730
And those are specifically
devices with OLED screens.

00:08:31.730 --> 00:08:36.120
OLED screens are not
like LCD screens.

00:08:36.120 --> 00:08:39.419
We have watches
that implement both.

00:08:39.419 --> 00:08:42.140
Just so we have watches
that have OLED screens

00:08:42.140 --> 00:08:44.920
and you have watches
that have LCD screens.

00:08:44.920 --> 00:08:48.650
And OLED screens
have to emit light.

00:08:48.650 --> 00:08:51.000
They emit light from
the individual pixels,

00:08:51.000 --> 00:08:52.630
which is fairly obvious.

00:08:52.630 --> 00:08:55.460
But that means that if you
go with darker palette,

00:08:55.460 --> 00:08:58.095
it needs to emit less
light, and therefore it

00:08:58.095 --> 00:08:59.814
takes less battery life.

00:08:59.814 --> 00:09:01.230
On a LCD screen
it doesn't matter,

00:09:01.230 --> 00:09:05.110
so if your watchface
is completely bright,

00:09:05.110 --> 00:09:07.566
it's got lots of
colors in it, it's

00:09:07.566 --> 00:09:09.440
going to cost the same
amount of battery life

00:09:09.440 --> 00:09:10.950
as if it's completely dark.

00:09:10.950 --> 00:09:13.480
Well, similar amounts.

00:09:13.480 --> 00:09:15.880
On OLED screens,
a dark background

00:09:15.880 --> 00:09:19.200
saves you a lot of power
in comparison to say,

00:09:19.200 --> 00:09:20.450
a completely white background.

00:09:20.450 --> 00:09:23.915
So something to keep in mind.

00:09:23.915 --> 00:09:26.767
But if you take
that into account,

00:09:26.767 --> 00:09:28.350
then you will have
similar performance

00:09:28.350 --> 00:09:35.940
across both watches that have
LCD screens and OLED screens.

00:09:35.940 --> 00:09:40.260
So with that, this is
basically the rough ways

00:09:40.260 --> 00:09:42.510
to actually make a
watchface not suck up

00:09:42.510 --> 00:09:45.990
say, four extra hours of
battery life of your watch.

00:09:49.890 --> 00:09:52.330
We don't always have
to use a watchface.

00:09:52.330 --> 00:09:53.750
It's a full Android system.

00:09:53.750 --> 00:09:54.500
We have apps.

00:09:54.500 --> 00:09:56.470
We have apps that we can run.

00:09:56.470 --> 00:09:59.070
So a classic app that we
run is The Fitness App.

00:09:59.070 --> 00:10:02.670
So this is The Fitness App,
in which first time I got it,

00:10:02.670 --> 00:10:03.895
you pull it up.

00:10:03.895 --> 00:10:07.940
I click on the icon
and I wait, and I wait,

00:10:07.940 --> 00:10:10.320
and I wait, and I wait.

00:10:10.320 --> 00:10:13.090
Wait for a long, long
while for it to load.

00:10:13.090 --> 00:10:15.790
By a long while I actually mean
like about a second and a half

00:10:15.790 --> 00:10:16.810
or so.

00:10:16.810 --> 00:10:18.770
Look whenever I'm
using a watch, you

00:10:18.770 --> 00:10:20.020
use it for about five seconds.

00:10:20.020 --> 00:10:23.560
You pull it up, you tap tap,
look at some information,

00:10:23.560 --> 00:10:25.686
it's done.

00:10:25.686 --> 00:10:29.480
If your app takes a really
long time to start up,

00:10:29.480 --> 00:10:30.592
it's not ideal.

00:10:30.592 --> 00:10:32.800
You're going to suck up a
lot of the users' time just

00:10:32.800 --> 00:10:34.050
waiting for things to boot up.

00:10:34.050 --> 00:10:38.702
So because you want
to use the launch as

00:10:38.702 --> 00:10:40.160
little as possible
rather for users

00:10:40.160 --> 00:10:43.850
to use the watch as
little as possible.

00:10:43.850 --> 00:10:45.870
You want your watch
to go back to sleep.

00:10:45.870 --> 00:10:49.650
That saves power, so you
wanted things to load quickly.

00:10:49.650 --> 00:10:51.680
So the best way of making
things load quickly is

00:10:51.680 --> 00:10:54.890
don't load things
that you don't need.

00:10:54.890 --> 00:10:55.721
So, yes.

00:10:55.721 --> 00:10:58.220
Don't do things you don't need
to do, like all Android apps.

00:10:58.220 --> 00:11:00.820
But I mean even things
like loading classes

00:11:00.820 --> 00:11:02.010
can take a while.

00:11:02.010 --> 00:11:05.220
Loading big images
can take a while.

00:11:05.220 --> 00:11:09.899
Loading data from the SD card
that you could defer later on

00:11:09.899 --> 00:11:10.690
could take a while.

00:11:10.690 --> 00:11:12.920
So one of the things
that's important of a watch

00:11:12.920 --> 00:11:15.153
is more so than phones,
because phones, you

00:11:15.153 --> 00:11:16.180
get a splash screen.

00:11:16.180 --> 00:11:18.780
I've already pulled my
phone up, I've unlocked it.

00:11:18.780 --> 00:11:21.200
Taking an extra
second, not a big deal.

00:11:21.200 --> 00:11:24.580
Taking an extra second for
a watch to load up actually

00:11:24.580 --> 00:11:26.204
pretty big deal.

00:11:26.204 --> 00:11:28.370
Especially if I'm only using
it for a couple seconds

00:11:28.370 --> 00:11:30.600
to look up some information.

00:11:30.600 --> 00:11:33.610
So-- and of course, as I
mentioned before for watchface

00:11:33.610 --> 00:11:38.240
is, if you use a lot of memory
you'll kill other applications.

00:11:38.240 --> 00:11:41.770
And if you exit your app, and
if you use a lot of memory,

00:11:41.770 --> 00:11:44.836
the system will also
remove your app for memory.

00:11:44.836 --> 00:11:46.710
Which means the next
time you open it is also

00:11:46.710 --> 00:11:48.274
going to take longer.

00:11:48.274 --> 00:11:50.190
So you want to actually
keep your memory usage

00:11:50.190 --> 00:11:52.100
low even for an application.

00:11:55.100 --> 00:11:57.540
So for a fitness app, if
you do any work at all,

00:11:57.540 --> 00:12:00.120
it has to use sensors.

00:12:00.120 --> 00:12:02.560
If you don't use
sensors, fitness app

00:12:02.560 --> 00:12:03.690
doesn't really do anything.

00:12:03.690 --> 00:12:05.315
It just sits in your
watch and probably

00:12:05.315 --> 00:12:06.679
tell you some information.

00:12:06.679 --> 00:12:08.470
So-- and the nice things
about Android Wear

00:12:08.470 --> 00:12:10.900
watches is that they have
full suite of sensors,

00:12:10.900 --> 00:12:14.670
just like most Android phones.

00:12:14.670 --> 00:12:19.940
And picking the right sensors is
also actually really important.

00:12:19.940 --> 00:12:21.300
Accelerometers are great.

00:12:21.300 --> 00:12:22.280
I love them.

00:12:22.280 --> 00:12:24.830
They use very little power.

00:12:24.830 --> 00:12:29.830
And for almost all our watches,
our accelerometers actually

00:12:29.830 --> 00:12:32.230
have some built in
memory inside them

00:12:32.230 --> 00:12:35.650
that allow them to
actually operate

00:12:35.650 --> 00:12:38.030
without the application
processor in your watch

00:12:38.030 --> 00:12:39.510
from doing anything.

00:12:39.510 --> 00:12:42.020
Which means that it actually
takes a lot less power

00:12:42.020 --> 00:12:43.040
to gather data.

00:12:43.040 --> 00:12:47.570
So you don't have to be running
an application completely

00:12:47.570 --> 00:12:50.190
while collecting
minutes of data.

00:12:50.190 --> 00:12:52.770
And that's really important
because that actually

00:12:52.770 --> 00:12:56.890
will reduce the overall power
use if you use accelerometer.

00:12:56.890 --> 00:13:01.520
Gyroscope, on the other hand,
doesn't have that neat feature.

00:13:01.520 --> 00:13:03.770
It doesn't batch
any of the data.

00:13:03.770 --> 00:13:06.400
And more importantly,
accelerometers

00:13:06.400 --> 00:13:09.660
use about a tenth of the
power as a gyroscope.

00:13:09.660 --> 00:13:12.184
So if you're doing your
own motion algorithm,

00:13:12.184 --> 00:13:13.600
if you're doing
your own gestures,

00:13:13.600 --> 00:13:14.790
and playing around with that.

00:13:14.790 --> 00:13:16.873
Couldn't say they're just
trying to get everything

00:13:16.873 --> 00:13:19.680
to work with the accelerometer.

00:13:19.680 --> 00:13:21.280
Like Android, you
want to use sensors

00:13:21.280 --> 00:13:25.550
as little as possible, by
which I mean you don't want

00:13:25.550 --> 00:13:28.090
to use it if you don't have to.

00:13:28.090 --> 00:13:32.180
So you can do things like
[? lure a ?] sample rate.

00:13:32.180 --> 00:13:33.990
If you [? lured ?]
a sample rate,

00:13:33.990 --> 00:13:37.020
you can actually match
up more samples of data

00:13:37.020 --> 00:13:39.720
before it actually
runs out of the memory

00:13:39.720 --> 00:13:43.182
and sends it all to your
application to work with.

00:13:43.182 --> 00:13:45.390
And of course, you want to
turn off the actual sensor

00:13:45.390 --> 00:13:47.930
if you're not going to use it.

00:13:47.930 --> 00:13:50.260
There may, or may
not, have been issues

00:13:50.260 --> 00:13:53.490
where an application
would turn on a sensor

00:13:53.490 --> 00:13:58.820
and then just keep the
sensor on indefinitely.

00:13:58.820 --> 00:14:01.570
Bit of a problem when
you're trying to save power,

00:14:01.570 --> 00:14:03.430
especially if you're
trying to sample data

00:14:03.430 --> 00:14:06.660
at this highest
possible rate possible.

00:14:06.660 --> 00:14:08.670
So you want to be
very, very careful

00:14:08.670 --> 00:14:11.610
in dotting your I's, crossing
your T's, shutting down

00:14:11.610 --> 00:14:13.410
things when you don't want to.

00:14:13.410 --> 00:14:15.090
So once you've
gathered the data,

00:14:15.090 --> 00:14:17.179
one of the things that
all fitness app like to do

00:14:17.179 --> 00:14:19.470
is they like to synchronize
with some server somewhere.

00:14:19.470 --> 00:14:22.390
So they use a network
to send some data.

00:14:22.390 --> 00:14:25.290
So the important thing
about sending data,

00:14:25.290 --> 00:14:30.420
again, use as little data as you
can possibly can get away with.

00:14:30.420 --> 00:14:35.090
So one thing not to do is to
send all your logging data

00:14:35.090 --> 00:14:38.040
about how to send
network information,

00:14:38.040 --> 00:14:41.160
as a part of network
information to send back,

00:14:41.160 --> 00:14:42.750
that tends to not
work very well.

00:14:42.750 --> 00:14:45.610
Especially if you end up in a
situation where, say, you send

00:14:45.610 --> 00:14:49.380
100 kilobytes of
data, and that gets

00:14:49.380 --> 00:14:53.700
followed by 200 kilobytes
of logging data.

00:14:53.700 --> 00:14:56.510
Something to avoid perhaps.

00:14:56.510 --> 00:14:58.650
But the timing of
sending network data

00:14:58.650 --> 00:15:01.010
is actually pretty
important, too.

00:15:01.010 --> 00:15:06.525
So say I'm accessing information
from a phone frequently,

00:15:06.525 --> 00:15:08.660
and I have to do it quite a bit.

00:15:08.660 --> 00:15:11.010
And every time I do it,
I do it every-- I only

00:15:11.010 --> 00:15:12.580
collect like two, three bytes.

00:15:12.580 --> 00:15:14.520
Not a lot of information
to send, right?

00:15:14.520 --> 00:15:17.700
I'm following-- sending
as little as I can.

00:15:17.700 --> 00:15:19.780
But every time I
ask for information,

00:15:19.780 --> 00:15:22.410
it's-- I have to ask
every 10 seconds.

00:15:22.410 --> 00:15:24.710
Every 10 seconds I've got
to send a couple bytes.

00:15:24.710 --> 00:15:28.980
Well, the Bluetooth radio has
to turn on-- well, is always on.

00:15:28.980 --> 00:15:29.874
Which is great.

00:15:29.874 --> 00:15:31.790
Bluetooth radio on your
watch is almost always

00:15:31.790 --> 00:15:36.220
on unless airplane
mode is turned on.

00:15:36.220 --> 00:15:38.400
But just because it's
turned on doesn't

00:15:38.400 --> 00:15:40.190
mean it's operating
at the same power.

00:15:40.190 --> 00:15:43.510
If it's idle, it doesn't
use much power at all.

00:15:43.510 --> 00:15:47.220
If it's not idle, it actually
has to spend time to ramp up.

00:15:47.220 --> 00:15:49.440
Has to connect to your phone.

00:15:49.440 --> 00:15:51.890
It's connected to
your phone, but it

00:15:51.890 --> 00:15:55.270
has to actually tell your phone,
hey I'm about to start talking.

00:15:55.270 --> 00:15:56.690
That takes power.

00:15:56.690 --> 00:15:59.120
And then has to send
the information, which

00:15:59.120 --> 00:16:00.066
takes more power.

00:16:00.066 --> 00:16:01.690
And then actually
shuts back down which

00:16:01.690 --> 00:16:04.530
actually takes even more power.

00:16:04.530 --> 00:16:08.130
And all those things takes
a couple-- a half second

00:16:08.130 --> 00:16:09.250
to start up.

00:16:09.250 --> 00:16:11.820
A half second to shut
down, and if I'm only

00:16:11.820 --> 00:16:14.110
sending two bytes of
data, that's, well,

00:16:14.110 --> 00:16:15.900
maybe about 10 milliseconds.

00:16:15.900 --> 00:16:18.530
But your 10 milliseconds
of data being sent actually

00:16:18.530 --> 00:16:20.980
cost a whole second of the
Bluetooth radio turning

00:16:20.980 --> 00:16:21.500
on and off.

00:16:21.500 --> 00:16:23.570
And if I do that
every 10 seconds,

00:16:23.570 --> 00:16:27.150
that soon becomes
a huge problem.

00:16:27.150 --> 00:16:30.090
So what you want to do is you
want to batch all those data.

00:16:30.090 --> 00:16:34.050
So usually, you don't
really need immediately

00:16:34.050 --> 00:16:38.140
to the second data
from the launch--

00:16:38.140 --> 00:16:40.160
from the phone to the watch.

00:16:40.160 --> 00:16:43.170
So you want to batch
it so that you may

00:16:43.170 --> 00:16:45.072
want to send it once a minute.

00:16:45.072 --> 00:16:46.530
And why I mention
once a minute is,

00:16:46.530 --> 00:16:49.920
well, your watch actually has
to do something every minute.

00:16:49.920 --> 00:16:51.860
Especially when your
watchface is on.

00:16:51.860 --> 00:16:53.780
That's the update,
well, your watchface.

00:16:53.780 --> 00:16:57.960
Every minute when your time
ticks, your watchface updates.

00:16:57.960 --> 00:17:00.270
And if you're going to
have to do some network

00:17:00.270 --> 00:17:04.710
synchronization, you want to
do it when it actually ticks

00:17:04.710 --> 00:17:06.359
and during that time.

00:17:06.359 --> 00:17:08.619
You want to do all that
work at the same time.

00:17:08.619 --> 00:17:12.660
You want to dog pile
together, and then stop.

00:17:12.660 --> 00:17:16.390
So if you developed
a watchface that

00:17:16.390 --> 00:17:20.180
needs data to be
synchronized every minute,

00:17:20.180 --> 00:17:23.050
maybe you want to synchronize
five seconds beforehand.

00:17:23.050 --> 00:17:25.950
Instead of, say, trying
to keep the entire watch

00:17:25.950 --> 00:17:29.130
on by synchronizing at
random frequent intervals.

00:17:29.130 --> 00:17:31.710
So sending a lot
of little things

00:17:31.710 --> 00:17:35.710
can be really bad, so you
want to batch it together.

00:17:35.710 --> 00:17:39.670
But you still want to send
as little as possible.

00:17:39.670 --> 00:17:43.700
So the other thing
that is really bad

00:17:43.700 --> 00:17:46.300
is listening to intents that
are frequently dispatched.

00:17:46.300 --> 00:17:49.065
By which I mean we
may have encountered

00:17:49.065 --> 00:17:53.890
a situation where a certain
fitness app was keeping--

00:17:53.890 --> 00:17:56.499
was sending data every time
you turn the screen on.

00:17:56.499 --> 00:17:58.540
By which I mean every time
you look at your watch

00:17:58.540 --> 00:18:01.850
it would send data to
the phone, and then

00:18:01.850 --> 00:18:03.210
request it on the phone.

00:18:03.210 --> 00:18:04.950
And then every time
the screen turns off

00:18:04.950 --> 00:18:06.710
it would do the exact same.

00:18:06.710 --> 00:18:09.950
And if you wear an
Android Wear watch,

00:18:09.950 --> 00:18:11.670
you'll note that you
actually look at it

00:18:11.670 --> 00:18:13.170
every now and then a lot.

00:18:13.170 --> 00:18:15.690
Every time you look at
it, it would suck up

00:18:15.690 --> 00:18:16.780
a tiny bit of memory.

00:18:16.780 --> 00:18:19.650
Sorry, a tiny bit of
energy and do it again,

00:18:19.650 --> 00:18:20.710
and again, and again.

00:18:20.710 --> 00:18:23.750
So it's not the greatest
thing in the world to do that.

00:18:23.750 --> 00:18:27.480
It may or may not have dropped
battery life a couple hours.

00:18:27.480 --> 00:18:29.440
All these little things
add up over time,

00:18:29.440 --> 00:18:34.040
especially if you operate every
time any minor thing changes.

00:18:34.040 --> 00:18:36.760
So please don't do that.

00:18:36.760 --> 00:18:41.080
Please avoid intents that
are dispatched a lot.

00:18:41.080 --> 00:18:44.940
And if you absolutely have
to, please stop using them

00:18:44.940 --> 00:18:47.690
if you don't need them anymore.

00:18:47.690 --> 00:18:49.520
One of the things a
lot of people forget

00:18:49.520 --> 00:18:54.315
is that you can actually disable
listeners, especially-- even

00:18:54.315 --> 00:18:56.690
broadcast receivers that you
registered and you manifest.

00:18:56.690 --> 00:18:59.620
You can disable them in code
when you don't need them,

00:18:59.620 --> 00:19:01.540
so something to keep in mind.

00:19:01.540 --> 00:19:04.290
You don't always have
to run when you're

00:19:04.290 --> 00:19:06.580
listening for certain intents.

00:19:06.580 --> 00:19:09.370
Even if it's set up
in your manifest.

00:19:09.370 --> 00:19:13.200
So that's basically it
for our fitness app.

00:19:13.200 --> 00:19:18.190
We have an app that efficiently
gathers your fitness data.

00:19:18.190 --> 00:19:22.560
We have an app that actually
sends data in a very power

00:19:22.560 --> 00:19:25.260
efficient way.

00:19:25.260 --> 00:19:28.390
So I'm walking down the street.

00:19:28.390 --> 00:19:31.250
Done my run, want to go home.

00:19:31.250 --> 00:19:33.960
One of the things that
is really nice for me

00:19:33.960 --> 00:19:36.680
is that getting
transit information.

00:19:36.680 --> 00:19:41.940
So I want to talk about
the transit app that I got.

00:19:41.940 --> 00:19:45.260
Popped up my watch and I said
hey, great, got a new transit

00:19:45.260 --> 00:19:46.350
app.

00:19:46.350 --> 00:19:51.530
I tap, it opens up, tells me
the time the next bus is coming.

00:19:51.530 --> 00:19:52.290
All right, OK.

00:19:52.290 --> 00:19:54.780
I got to run to
the bus stop now.

00:19:54.780 --> 00:19:57.650
And I start running, and
take a quick look at my watch

00:19:57.650 --> 00:20:00.220
again after a minute or two.

00:20:00.220 --> 00:20:02.350
The app is gone.

00:20:02.350 --> 00:20:06.360
So me being a guy that
likes [? my ?] [? launch ?],

00:20:06.360 --> 00:20:08.230
I said hey, you know
what would be great?

00:20:08.230 --> 00:20:10.870
If you could just keep
telling me that information.

00:20:10.870 --> 00:20:13.500
I'm looking at the
transit information.

00:20:13.500 --> 00:20:16.120
Odds are I'm
occasionally running

00:20:16.120 --> 00:20:20.230
to the bus stop in a hurry
because I woke up late.

00:20:20.230 --> 00:20:24.320
So the person said oh sure,
we can keep the screen on.

00:20:24.320 --> 00:20:26.320
By which he meant he kept
the full wake lock on.

00:20:26.320 --> 00:20:28.420
Which meant the screen
was permanently on,

00:20:28.420 --> 00:20:31.810
full brightness,
the entire time.

00:20:31.810 --> 00:20:34.270
It's not-- please don't do that.

00:20:34.270 --> 00:20:36.160
It means the
[INAUDIBLE] processor

00:20:36.160 --> 00:20:38.837
is running really, really fast.

00:20:38.837 --> 00:20:40.670
It drains a lot of
energy when it does that.

00:20:40.670 --> 00:20:42.420
The screen is on.

00:20:42.420 --> 00:20:45.290
It also doesn't
work really great

00:20:45.290 --> 00:20:49.420
when your screen is
on at full blast.

00:20:49.420 --> 00:20:51.970
Wayne earlier talked
about a couple modes

00:20:51.970 --> 00:20:53.770
that you could use.

00:20:53.770 --> 00:20:56.144
So interactive
mode, when we call

00:20:56.144 --> 00:20:58.060
something interactive
mode, that's when, like,

00:20:58.060 --> 00:20:59.587
you can touch the screen.

00:20:59.587 --> 00:21:00.670
It's got the test sensors.

00:21:00.670 --> 00:21:02.460
You can buttons, and
so on and so forth.

00:21:02.460 --> 00:21:05.360
That's what happens when
you keep full wake lock.

00:21:05.360 --> 00:21:07.220
But in Android Wear,
we introduce something,

00:21:07.220 --> 00:21:09.420
we call it Ambiactive mode.

00:21:09.420 --> 00:21:12.710
What that means is that
your app is running,

00:21:12.710 --> 00:21:15.240
but the screen has turned off.

00:21:15.240 --> 00:21:18.540
By off I mean in the sense
that the screen isn't active.

00:21:18.540 --> 00:21:20.520
This touch screen is off.

00:21:20.520 --> 00:21:21.605
You can't touch buttons.

00:21:21.605 --> 00:21:23.980
You can touch the touch screen
and it will switch it back

00:21:23.980 --> 00:21:25.890
into interactive mode.

00:21:25.890 --> 00:21:28.171
That's actually pretty
great because what

00:21:28.171 --> 00:21:29.670
that does is that
you can actually--

00:21:29.670 --> 00:21:33.140
your app can actually give
the system a particular image

00:21:33.140 --> 00:21:34.250
to display on the screen.

00:21:34.250 --> 00:21:36.690
So you can be like, you
can turn all your texts

00:21:36.690 --> 00:21:39.420
to a certain color, say white.

00:21:39.420 --> 00:21:40.670
Turn your background to black.

00:21:43.590 --> 00:21:47.280
And the screen-- the watch
will just keep that image on.

00:21:47.280 --> 00:21:50.350
It's great for stopwatches,
it's great for transit apps,

00:21:50.350 --> 00:21:52.280
it's great for keeping power.

00:21:52.280 --> 00:21:53.670
Because your screen
no longer has

00:21:53.670 --> 00:21:55.440
to be running at full blast.

00:21:55.440 --> 00:21:58.230
The system doesn't have to
be operating at full blast.

00:21:58.230 --> 00:22:01.000
The system actually
turns off a lot

00:22:01.000 --> 00:22:04.159
of the silicon involved
with displaying.

00:22:04.159 --> 00:22:05.950
Because it doesn't have
to actually receive

00:22:05.950 --> 00:22:07.122
any new information now.

00:22:07.122 --> 00:22:09.580
All it has to do is just display
that one image that you've

00:22:09.580 --> 00:22:11.634
pushed through the screen.

00:22:11.634 --> 00:22:12.300
So that's great.

00:22:12.300 --> 00:22:16.240
You can turn on the
Ambiactive mode.

00:22:16.240 --> 00:22:20.570
I can now use the actual
app and see my transit time.

00:22:20.570 --> 00:22:25.400
You can update the image every
minute, or half a minute,

00:22:25.400 --> 00:22:27.030
or whatnot.

00:22:27.030 --> 00:22:28.157
And it's useful.

00:22:28.157 --> 00:22:29.740
And it's actually
one of things that's

00:22:29.740 --> 00:22:30.989
most useful about this device.

00:22:30.989 --> 00:22:32.950
You can actually
create applications

00:22:32.950 --> 00:22:35.960
that can take over
the entire screen,

00:22:35.960 --> 00:22:39.170
and be used the entire
time, without creating

00:22:39.170 --> 00:22:40.290
your own watchface.

00:22:40.290 --> 00:22:45.840
Because I may like my transit
app, but on a day to day basis,

00:22:45.840 --> 00:22:47.507
I don't need it to
be my main watchface.

00:22:47.507 --> 00:22:49.340
I don't want to keep
switching my watchface.

00:22:49.340 --> 00:22:50.780
I like my watchface,
it's pretty.

00:22:50.780 --> 00:22:52.709
It has nice colors in it.

00:22:52.709 --> 00:22:54.250
The other thing
about Ambiactive mode

00:22:54.250 --> 00:22:57.640
is that the 5% screen
use is still important.

00:22:57.640 --> 00:23:03.920
You-- OLED screens have a
very bad tendency to burn in.

00:23:03.920 --> 00:23:08.150
By which I mean, back in the
olden days, we had CRT screens.

00:23:08.150 --> 00:23:09.230
We had plasma screens.

00:23:09.230 --> 00:23:12.960
And if you, like, kept them at
the same image on the screen,

00:23:12.960 --> 00:23:17.660
or like kept the Weather
Channel on, or MTV on.

00:23:17.660 --> 00:23:19.810
It would burn in
a-- you would have

00:23:19.810 --> 00:23:22.420
a burn in ghost of an image.

00:23:22.420 --> 00:23:24.640
OLED screens actually
have the same problem.

00:23:24.640 --> 00:23:27.500
It's not a big deal on
phones because, chances are,

00:23:27.500 --> 00:23:31.720
your phone aren't going to
be stuck at the same image

00:23:31.720 --> 00:23:33.780
and turned on all the time.

00:23:33.780 --> 00:23:36.690
But the problem with watches
is that you got your watchface

00:23:36.690 --> 00:23:38.110
to do that.

00:23:38.110 --> 00:23:42.890
You have the same time
ticks and stuff all over it.

00:23:42.890 --> 00:23:46.970
So you only want to use a very,
very small bit of the screen.

00:23:46.970 --> 00:23:50.300
And we do our own magic to
shift the actual image around

00:23:50.300 --> 00:23:53.160
in order to combat burn it.

00:23:53.160 --> 00:23:56.617
So screensavers
are kind of back.

00:23:56.617 --> 00:23:58.700
So yeah, that's something
to keep in mind whenever

00:23:58.700 --> 00:24:00.660
you're doing Ambiactive.

00:24:00.660 --> 00:24:04.640
You don't-- while the system
can definitely hold the screen

00:24:04.640 --> 00:24:08.200
that's completely bright on,
it's not great for OLED screens

00:24:08.200 --> 00:24:10.340
because it wears them out.

00:24:10.340 --> 00:24:15.110
So the transit app, we
ended up getting rid

00:24:15.110 --> 00:24:18.690
of the Ambiactive problem.

00:24:18.690 --> 00:24:21.280
The active-- it doesn't
hold a wake lock anymore

00:24:21.280 --> 00:24:24.630
that keeps it on at full
screen all the time.

00:24:24.630 --> 00:24:27.262
So we were looking at
other ways to improve it,

00:24:27.262 --> 00:24:29.220
and one of the problems
that we were having was

00:24:29.220 --> 00:24:32.690
that we found out
that it was getting--

00:24:32.690 --> 00:24:34.560
it was hitting network a lot.

00:24:34.560 --> 00:24:37.625
By which I mean every
time you would move, like,

00:24:37.625 --> 00:24:41.900
a couple hundred meters, it
would refresh all the traffic

00:24:41.900 --> 00:24:43.510
data-- all the transit data.

00:24:43.510 --> 00:24:48.610
Because, well, we had another--
we got to another bus stop

00:24:48.610 --> 00:24:51.220
and it's got new
data to update here.

00:24:51.220 --> 00:24:58.330
So this is great for
certain applications.

00:24:58.330 --> 00:25:01.160
But for applications where
your data changes a lot,

00:25:01.160 --> 00:25:02.220
it's not so great.

00:25:02.220 --> 00:25:05.910
I don't-- I love my transit, but
I don't actually need to know

00:25:05.910 --> 00:25:08.860
when the next bus
stop is all the time.

00:25:08.860 --> 00:25:12.110
I kind of just want to know
when I'm trying to commute home

00:25:12.110 --> 00:25:13.440
or something.

00:25:13.440 --> 00:25:18.830
So your users may not
always want to use your app.

00:25:18.830 --> 00:25:23.120
You surprisingly may not always
be the most important thing

00:25:23.120 --> 00:25:24.360
on the launch.

00:25:24.360 --> 00:25:27.900
I mean, I know it's surprising
that whatever application

00:25:27.900 --> 00:25:31.670
that we are developing isn't
the greatest thing in the world.

00:25:31.670 --> 00:25:35.510
But data that gets stale,
and you have to load again,

00:25:35.510 --> 00:25:36.820
and again, and again.

00:25:36.820 --> 00:25:38.260
Not so great.

00:25:38.260 --> 00:25:41.380
You may want to actually
start loading the data

00:25:41.380 --> 00:25:44.850
whenever the user opens
up the application.

00:25:44.850 --> 00:25:48.470
Now that does mean
that it is not

00:25:48.470 --> 00:25:52.730
as responsive as we possibly
want the actual application

00:25:52.730 --> 00:25:53.720
to be.

00:25:53.720 --> 00:25:57.390
But that is something
that a design decision.

00:25:57.390 --> 00:26:00.650
We have to, sort
of, work with that

00:26:00.650 --> 00:26:06.010
and decide to take-- what not--
taking up more of the user's

00:26:06.010 --> 00:26:09.600
battery life overall is good,
or where not being slightly less

00:26:09.600 --> 00:26:12.340
responsive is good.

00:26:12.340 --> 00:26:16.780
So we err towards the side of
an on demand synchronization

00:26:16.780 --> 00:26:17.970
model.

00:26:17.970 --> 00:26:22.330
At-- so when the user wants
to actually get the data

00:26:22.330 --> 00:26:23.620
and provide it.

00:26:23.620 --> 00:26:25.520
The other thing to,
sort of, going back

00:26:25.520 --> 00:26:27.480
to the fitness model.

00:26:27.480 --> 00:26:30.470
You want to synchronize,
maybe, once an hour or so.

00:26:30.470 --> 00:26:34.840
Not every time the user
takes a couple steps.

00:26:34.840 --> 00:26:39.130
Seems obvious in retrospect,
but you can usually

00:26:39.130 --> 00:26:43.280
get away with it when you have a
giant battery strapped to, say,

00:26:43.280 --> 00:26:45.500
a phone-sized body.

00:26:45.500 --> 00:26:47.310
The luxury of doing
synchronization

00:26:47.310 --> 00:26:48.970
like that is not so
much when it comes

00:26:48.970 --> 00:26:53.060
to having a small battery
on a wrist mounted device.

00:26:53.060 --> 00:26:55.690
So with the transit
application, the other thing

00:26:55.690 --> 00:26:57.190
that's real important
is, of course,

00:26:57.190 --> 00:26:59.399
for it to get location data.

00:26:59.399 --> 00:27:00.940
Without location
data it can't really

00:27:00.940 --> 00:27:03.620
tell me where my bus stop is.

00:27:03.620 --> 00:27:06.020
So the problem with asking
what location it is,

00:27:06.020 --> 00:27:10.180
is that it's kind of crafted
for both the phone and watch.

00:27:10.180 --> 00:27:13.910
So you could grab location
data from the GPS.

00:27:13.910 --> 00:27:17.400
We have one device right now
that's the Sony SmartWatch 3,

00:27:17.400 --> 00:27:19.270
and it has built -in GPS.

00:27:19.270 --> 00:27:22.660
And it's pretty much
just as bad as when

00:27:22.660 --> 00:27:24.410
your phone uses the GPS.

00:27:24.410 --> 00:27:25.750
It takes up a lot of power.

00:27:25.750 --> 00:27:27.170
It's actually kind
of a bit worse

00:27:27.170 --> 00:27:30.620
because the battery
inside a SmartWatch

00:27:30.620 --> 00:27:32.340
is smaller than a phone.

00:27:32.340 --> 00:27:33.510
Surprise, surprise.

00:27:33.510 --> 00:27:36.760
So GPS is even
more expensive when

00:27:36.760 --> 00:27:38.260
it comes to how
much battery life it

00:27:38.260 --> 00:27:41.070
drains from your device.

00:27:41.070 --> 00:27:45.450
But even grabbing from the
network is also expensive.

00:27:45.450 --> 00:27:48.390
Your phone actually
talks to your watch,

00:27:48.390 --> 00:27:50.390
and tells it what the
actual location is.

00:27:50.390 --> 00:27:52.670
Because, of course, your
phone has a bit more

00:27:52.670 --> 00:27:54.920
buffer when it comes to
grabbing your location.

00:27:54.920 --> 00:27:56.530
Your phone also
has a cell radio,

00:27:56.530 --> 00:28:00.880
and we can do fancy stuff with
that to grab your location.

00:28:00.880 --> 00:28:05.977
But when you use your Bluetooth
radio to send information

00:28:05.977 --> 00:28:07.560
it drains battery
life from the phone.

00:28:07.560 --> 00:28:10.090
It drains battery
life from your watch.

00:28:10.090 --> 00:28:18.150
And if you say grab the location
information every five seconds,

00:28:18.150 --> 00:28:23.340
assuming that it'd be just
like grabbing it from a phone.

00:28:23.340 --> 00:28:26.800
It may drop your battery
life by two or three hours.

00:28:26.800 --> 00:28:30.110
I mean, not saying
it's a terrible idea,

00:28:30.110 --> 00:28:32.840
but maybe you should
avoid grabbing location

00:28:32.840 --> 00:28:36.930
data every five seconds.

00:28:36.930 --> 00:28:39.890
One minute's great,
maybe five minutes.

00:28:39.890 --> 00:28:43.150
Maybe only grab it when you
absolutely, positively have to.

00:28:43.150 --> 00:28:45.430
But just certain things
to keep in mind whenever

00:28:45.430 --> 00:28:46.471
you're grabbing location.

00:28:46.471 --> 00:28:49.730
It's not exactly free,
and on a watch more

00:28:49.730 --> 00:28:53.100
so it can drop your battery
life by a very, very substantial

00:28:53.100 --> 00:28:54.830
degree.

00:28:54.830 --> 00:29:00.680
So know it a bit early, but this
is basically it for my tales.

00:29:00.680 --> 00:29:02.900
I kind of have a
couple themes that I

00:29:02.900 --> 00:29:06.620
think are-- I've sort of
harped on quite a bit.

00:29:06.620 --> 00:29:08.746
You don't want to
do much, or rather

00:29:08.746 --> 00:29:10.120
you want to do
everything you can

00:29:10.120 --> 00:29:11.620
to make a good user experience.

00:29:11.620 --> 00:29:14.460
But you want to use everything
as little as you possibly can.

00:29:14.460 --> 00:29:16.100
Use less sensors.

00:29:16.100 --> 00:29:18.720
Don't grab as much
location data.

00:29:18.720 --> 00:29:21.757
Use the screen as
little as possible.

00:29:21.757 --> 00:29:23.215
Be conservative in
your animations.

00:29:26.749 --> 00:29:28.290
When you work more
with Android Wear,

00:29:28.290 --> 00:29:30.290
you can find its kind
like an Android phone.

00:29:30.290 --> 00:29:32.100
Like everything
impacts an Android

00:29:32.100 --> 00:29:33.620
phone in terms of battery life.

00:29:33.620 --> 00:29:34.900
Also impacts an Android Wear.

00:29:34.900 --> 00:29:37.340
I mean, pretty much,
it's the same device.

00:29:37.340 --> 00:29:41.680
But because of the smaller
battery, because we want small,

00:29:41.680 --> 00:29:46.880
nicely sized wrist watches,
as opposed to giant cuffs

00:29:46.880 --> 00:29:48.540
on our wrists.

00:29:48.540 --> 00:29:50.730
The-- any little
drain is amplified

00:29:50.730 --> 00:29:52.500
in the overall battery
life of the device.

00:29:52.500 --> 00:29:54.666
So you'll want to be really,
really careful whenever

00:29:54.666 --> 00:29:58.200
you make decisions on whether
or not an extra feature is

00:29:58.200 --> 00:30:02.052
going to be a very bad impact
on your users' overall battery

00:30:02.052 --> 00:30:03.318
life.

00:30:03.318 --> 00:30:06.090
And if you have to
do certain things,

00:30:06.090 --> 00:30:08.604
like sending network
information, getting sensors.

00:30:08.604 --> 00:30:10.520
Sort of batching everything
together is great.

00:30:10.520 --> 00:30:14.470
You want to dog pile to get all
your work together, and then

00:30:14.470 --> 00:30:16.390
allow your device
to go back to sleep.

00:30:16.390 --> 00:30:19.190
So sort of the
overall features, you

00:30:19.190 --> 00:30:21.230
want your device to sleep
as much as possible.

00:30:21.230 --> 00:30:23.730
Because then it could
last as long as it can.

00:30:23.730 --> 00:30:28.590
So that's basically
it for my talk.

00:30:28.590 --> 00:30:30.300
I have my Twitter
handle up there.

00:30:30.300 --> 00:30:33.740
You feel free to message me.

00:30:33.740 --> 00:30:35.890
I can talk on, and on,
and on, and on about all

00:30:35.890 --> 00:30:38.390
the different little things
when we talk about battery life.

00:30:38.390 --> 00:30:43.440
But that's basically the things
I want to, sort of, talk about.

00:30:43.440 --> 00:30:49.420
And my colleague, Wayne,
is doing a code lab

00:30:49.420 --> 00:30:51.350
on Android Wear
development, if you

00:30:51.350 --> 00:30:53.420
want to get your
hands dirty on that.

00:30:53.420 --> 00:30:58.140
And he's just in code
lab room over there.

00:30:58.140 --> 00:31:00.910
And, yeah, I'll be
here to take questions.

