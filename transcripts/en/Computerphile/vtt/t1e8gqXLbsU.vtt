WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.100
So, monads are a concept that was
invented in mathematics in the 1960s, and

00:00:05.100 --> 00:00:09.540
then it was rediscovered in computer
science in the 1990s. And what it gives

00:00:09.540 --> 00:00:14.460
you, is a new way of thinking about
programming with effects. And for me, this

00:00:14.460 --> 00:00:17.880
is one of the most important new ideas
in programming languages in the last 25

00:00:17.880 --> 00:00:23.900
years. So that's what we're going to be
looking at today - programming with monads.

00:00:23.900 --> 00:00:29.429
We're going to come at this using a
simple example, and the example that

00:00:29.429 --> 00:00:33.750
we're going to look at is the idea of
writing a function that evaluates simple

00:00:33.750 --> 00:00:38.399
expressions. And I'm going to use Haskell
for this, but it doesn't matter if you don't

00:00:38.399 --> 00:00:41.190
know anything about Haskell, because
we're going to use it in a very simple

00:00:41.190 --> 00:00:45.660
way, and I'm going to explain everything
as we're going along. So, what we're going

00:00:45.660 --> 00:00:50.160
to start with, is by defining a simple
datatype for the kind of expressions

00:00:50.160 --> 00:00:54.989
that we're going to be evaluating. So,
we'll use the data keyword in Haskell,

00:00:54.989 --> 00:00:58.620
which introduces a new data type, and
then we're going to define a new data

00:00:58.620 --> 00:01:03.899
type for expressions. And then there's
two things that an expression can be. It

00:01:03.899 --> 00:01:08.729
can either be an integer value, so we'll
write that down - we have Val of an Int.

00:01:08.729 --> 00:01:13.439
Or, it can be the division of two
sub-expressions. So we've got two

00:01:13.439 --> 00:01:15.780
constructors here in our
data type - we've got Val,

00:01:15.780 --> 00:01:19.950
which builds expressions from integers, and
we've got Div, which builds expressions

00:01:19.950 --> 00:01:23.250
from two sub-expressions. So, just to
reiterate what what's actually going on

00:01:23.250 --> 00:01:27.840
here, we're declaring a new data type
called Expr, and it's got two new

00:01:27.840 --> 00:01:32.280
constructors - one called Val, which
takes an integer parameter, and one

00:01:32.280 --> 00:01:36.840
called Div, which takes two
sub-expressions as parameters as well.

00:01:36.840 --> 00:01:40.770
So basically what we're working with is
expressions that are built up from

00:01:40.770 --> 00:01:46.079
integer values using a simple division
operator. So, many of you may not be

00:01:46.079 --> 00:01:50.100
familiar of this kind of syntax, so let's
have a couple of examples of values of

00:01:50.100 --> 00:01:54.540
this data type, so that we make sure
everyone's on the same page. So, what I'm

00:01:54.540 --> 00:01:59.340
going to do here, is draw a little table.
So, on one side, on the left-hand side, I'm

00:01:59.340 --> 00:02:02.969
going to have what we would normally
write down in mathematics. And then on

00:02:02.969 --> 00:02:07.860
the right-hand side, we'll think how
would you translate this into a value in

00:02:07.860 --> 00:02:11.970
this Haskell data type? So, let's have
three simple examples here - we'll have

00:02:11.970 --> 00:02:15.420
one, and we'll have
six divided by two, and

00:02:15.420 --> 00:02:20.609
let's do one more example, we'll have six
divided by three divided by one. So, these are

00:02:20.609 --> 00:02:25.019
simple expressions built up from integers
using a division operator. But, we're

00:02:25.019 --> 00:02:28.319
writing Haskell programs today, so let's
think how do these things actually get

00:02:28.319 --> 00:02:32.189
represented as values of our expression
data type? So, the first one is very

00:02:32.189 --> 00:02:36.870
simple - if we want to represent the value
one, we just need to use the Val tag, so we

00:02:36.870 --> 00:02:41.430
write Val of one. If we want to have an
expression like six divided by two, well it's

00:02:41.430 --> 00:02:45.959
a division, so we have a Div at the top
level, and then we have two values - we

00:02:45.959 --> 00:02:50.459
have Val six, and Val two. And actually, I'll
leave the last one is a little exercise

00:02:50.459 --> 00:02:53.730
for you here, so you can try this one for
yourself - how do you represent this as a

00:02:53.730 --> 00:02:57.750
value in Haskell? Well, you're gonna need
two divisions, you're going to need three

00:02:57.750 --> 00:03:02.010
Val constructors, and then a bunch of
brackets. So, this is the basic idea - 

00:03:02.010 --> 00:03:07.379
we've got simple expressions built up
from integers using division, and we want

00:03:07.379 --> 00:03:11.700
to think about how do we write a program
to evaluate these expressions? Let's

00:03:11.700 --> 00:03:16.379
write a program to do that. So, we're
going to write an evaluator, and it's

00:03:16.379 --> 00:03:21.090
going to be a program, or a function in
this case, that takes an expression as

00:03:21.090 --> 00:03:26.549
input, and what it's going to give back
is the integer value of that expression.

00:03:26.549 --> 00:03:30.359
And there's going to be two cases here,
because we have two kinds of expressions.

00:03:30.359 --> 00:03:34.829
We have a case for values, and we need to
figure out what to do with that, which

00:03:34.829 --> 00:03:39.780
we'll do in a moment. And then we have a
case for division, and we need to think

00:03:39.780 --> 00:03:43.109
what to do with that. So, we've got the
skeleton here of a program, and then we

00:03:43.109 --> 00:03:47.250
just need to fill in the details. So, how
do you evaluate an integer value? Well,

00:03:47.250 --> 00:03:51.599
that's very simple, you just give back
the number - so if I had Val of one,

00:03:51.599 --> 00:03:56.099
it's value is just one. And then how do I
evaluate a division? Well, these two

00:03:56.099 --> 00:04:00.569
expressions here, x and y, these could be
as complicated as you wish. So, we need to

00:04:00.569 --> 00:04:06.569
evaluate these recursively. So what we
would do, is evaluate the first one, x, and

00:04:06.569 --> 00:04:11.040
that will give us an integer. And then
we'll evaluate the second one, y, and that

00:04:11.040 --> 00:04:15.989
will give us another integer. And then,
all we need to do is divide one by the

00:04:15.989 --> 00:04:20.729
other. So, this is a nice simple program
that evaluates these kind of expressions

00:04:20.729 --> 00:04:24.419
built up from integers using division - we
just have a simple recursive program, two

00:04:24.419 --> 00:04:26.610
cases, and everything looks
fine. But there's a

00:04:26.610 --> 00:04:30.720
problem with this program, and the
problem is that it may crash - because if

00:04:30.720 --> 00:04:36.420
you divide a number by zero, then that's
undefined, so this program will just

00:04:36.420 --> 00:04:41.580
crash. So, in particular, if the value of
the expression y here was zero, then this

00:04:41.580 --> 00:04:45.060
division operator would crash, and you
get some kind of runtime error. So we

00:04:45.060 --> 00:04:49.590
don't want our programs to crash, so we
think, what do we do to fix this problem?

00:04:49.590 --> 00:04:53.610
First of all, what we're going to do is
we're going to define a safe version of

00:04:53.610 --> 00:04:57.210
the division operator, which doesn't
crash anymore. Because that's basically

00:04:57.210 --> 00:05:01.410
the root of the problem here - division by
zero gives an undefined result, and the

00:05:01.410 --> 00:05:05.040
program is going to crash. So, let's
define a safe version of the division

00:05:05.040 --> 00:05:08.850
operator. We're going to define a
function called safediv, and it's going

00:05:08.850 --> 00:05:13.680
to take a couple of integers, and it's
going to give back Maybe an integer. And

00:05:13.680 --> 00:05:18.030
Maybe is the way that we deal with
things that can possibly fail in Haskell.

00:05:18.030 --> 00:05:22.440
So, the type here is not Int to Int to Int,
it's Int to Int to Maybe Int, because

00:05:22.440 --> 00:05:27.870
division may fail. And we'll see how this
Maybe type works in a moment. So, how do

00:05:27.870 --> 00:05:33.090
we actually define safediv? We take two
integers, n and m, and then what we'll do

00:05:33.090 --> 00:05:36.810
is check - is the second of these zero?
Because that's the case when things

00:05:36.810 --> 00:05:43.020
would go wrong. So, if m happened to be
zero, then we will give back the result

00:05:43.020 --> 00:05:47.430
Nothing. Okay, so Nothing is one of the
constructors in the Maybe type. If m is

00:05:47.430 --> 00:05:52.980
not zero, what we're going to do is Just
give back the result of dividing. So, Just

00:05:52.980 --> 00:05:56.940
is another constructor in the Maybe type -
Maybe only has two constructors, Nothing,

00:05:56.940 --> 00:06:00.570
which represents things that have gone
wrong, or in our case division by zero,

00:06:00.570 --> 00:06:04.320
and Just, which represent things that
have gone fine. In this case, we actually

00:06:04.320 --> 00:06:08.460
just get back the result of dividing one
number by the other. So, what we have here

00:06:08.460 --> 00:06:12.420
now is a safe version of the division
operator, which is explicitly checking

00:06:12.420 --> 00:06:16.560
for the case when the program would have
crashed. So this doesn't crash anymore, it

00:06:16.560 --> 00:06:20.940
returns one of two values - either Nothing
if things go wrong, or Just of the

00:06:20.940 --> 00:06:24.960
division if things have gone fine. So,
what we can do then, with this safe

00:06:24.960 --> 00:06:30.510
division operator, is rewrite our little
evaluator program to make sure that it

00:06:30.510 --> 00:06:35.460
doesn't crash. So, our new evaluator is
going to have a slightly different type

00:06:35.460 --> 00:06:40.840
than before. So before, the original
program just took an expression

00:06:40.840 --> 00:06:45.160
as input, and then it gave back an
integer. But that program could crash. The

00:06:45.160 --> 00:06:49.120
new evaluator takes an expression as
input as before, but now it Maybe gives

00:06:49.120 --> 00:06:53.620
you an integer, because it could fail, it
could have division by zero. So, how do we

00:06:53.620 --> 00:06:58.780
rewrite this evaluator? So, we'll do the
two cases again - write down the skeleton,

00:06:58.780 --> 00:07:03.310
and then we'll fill in the details. So, in
the base case, we can't just return n

00:07:03.310 --> 00:07:06.910
this time, because we've got to return a
Maybe value. And there's only two things

00:07:06.910 --> 00:07:10.419
we could return, either Nothing or Just,
and in this case the right thing to do

00:07:10.419 --> 00:07:14.620
is to return Just of n, because if you
evaluate a value that's always going to

00:07:14.620 --> 00:07:18.610
succeed, so we use a success tag, which
is Just, and then we have the integer

00:07:18.610 --> 00:07:21.789
value sitting in here. If we have a
division, now we need to do a bit more

00:07:21.789 --> 00:07:27.729
work, because when we evaluate x that may
fail, when we evaluate y that may fail,

00:07:27.729 --> 00:07:30.910
and then when we do the division that
may fail. So, we're going to need to do a

00:07:30.910 --> 00:07:34.389
little bit of checking and management of
failure. So, what we're going to do, is

00:07:34.389 --> 00:07:40.539
when we evaluate a division, first of all,
we'll do a case analysis on the result

00:07:40.539 --> 00:07:46.150
of evaluating x. And that could be one of
two things - it could either be Nothing, in

00:07:46.150 --> 00:07:51.160
which case we're going to do something,
or we could get Just of some number, in

00:07:51.160 --> 00:07:54.669
which case we're going to do something.  So,
there's two cases to consider - when we

00:07:54.669 --> 00:07:59.050
evaluate the first parameter x, either it
succeeds or it fails. So in the failure

00:07:59.050 --> 00:08:02.979
case, if we get back Nothing, the only
sensible thing to do is just to say, well

00:08:02.979 --> 00:08:07.060
if evaluation of x fails, the evaluation
of the whole division fails. So we'll

00:08:07.060 --> 00:08:11.500
just return Nothing as well. In the Just
case, then we need to evaluate the second

00:08:11.500 --> 00:08:15.940
parameter y. So, what we're going to do is
do another case analysis, we'll do a case

00:08:15.940 --> 00:08:20.440
eval of y, and then again there's two
possible outcomes which we could have

00:08:20.440 --> 00:08:26.020
here - either we could have Nothing, which
means it failed, or we could have Just of m,

00:08:26.020 --> 00:08:30.130
some other number, in which case we've
succeeded. Then again, we need to think

00:08:30.130 --> 00:08:34.240
what do we do in each of these two cases.
So, in the first case, if the evaluation

00:08:34.240 --> 00:08:38.620
of y fails, the only sensible thing to do
is say, well, we fail as well. In the

00:08:38.620 --> 00:08:42.909
second case, we've now got to
successfully evaluated expressions - x has

00:08:42.909 --> 00:08:47.320
given the result n, y has given the
result m, and now we can do the safe

00:08:47.320 --> 00:08:52.630
division. So, in this case we just do
safediv.  Now we have a working evaluator.

00:08:52.630 --> 00:08:56.220
We started off with a two-line program,
which kind of did the essence of

00:08:56.220 --> 00:08:59.980
evaluation, but it didn't check for
things going wrong - it didn't check for a

00:08:59.980 --> 00:09:03.130
division by zero.  Now we've
fixed the problem completely, we

00:09:03.130 --> 00:09:06.370
have a program which works, this program
will never crash, it will always give a

00:09:06.370 --> 00:09:09.970
well-defined result, either Nothing or
Just, but there's a bit of a problem with

00:09:09.970 --> 00:09:14.290
this program, in that it's a bit too
long. It's a bit too verbose, there's

00:09:14.290 --> 00:09:17.350
quite a lot of noise in here, I can
hardly see what's going on anymore,

00:09:17.350 --> 00:09:20.560
because it's all of this management of
failure. So, we can look at this program,

00:09:20.560 --> 00:09:24.940
and think - how can we make this program
better? And how can we make it more like

00:09:24.940 --> 00:09:29.710
the original program, that didn't work,
but still maintain the fact that this

00:09:29.710 --> 00:09:34.540
actually does the right thing? And the
idea here, is we're going to observe a

00:09:34.540 --> 00:09:38.860
common pattern. So, when you look at this
program, you can see quite clearly we're

00:09:38.860 --> 00:09:42.580
doing the same thing twice - we're doing
two case analyses. What we're doing, is

00:09:42.580 --> 00:09:46.720
doing a case analysis on the result of
evaluating x, and if it's Nothing we give

00:09:46.720 --> 00:09:50.380
back Nothing, and if it's Just, we do
something with the result. And then we do

00:09:50.380 --> 00:09:54.190
exactly the same thing with eval of y -
we're doing a case analysis on the

00:09:54.190 --> 00:09:58.780
result of evaluating y, if that gives
Nothing we give back Nothing, and if it's

00:09:58.780 --> 00:10:02.470
a Just, we do something with it.  So,
a very common idea in computing is

00:10:02.470 --> 00:10:06.940
when you see the same things multiple
times, you abstract them out, and have

00:10:06.940 --> 00:10:11.050
them as a definition. And that's what
we're going to do here. So, let's draw a

00:10:11.050 --> 00:10:15.550
little picture first, to capture the
pattern which we've seen twice. So, the

00:10:15.550 --> 00:10:20.650
pattern we have here, is we're doing a
case analysis on something, so let me

00:10:20.650 --> 00:10:23.410
just draw as a little box - we don't know
what's in there, we're doing a case

00:10:23.410 --> 00:10:27.760
analysis on something. And, there's two
cases - if it's Nothing, we give back

00:10:27.760 --> 00:10:33.220
Nothing, and if we get Just of some value x,
then what we're going to do is we're

00:10:33.220 --> 00:10:37.810
going to process it in some way, we're
going to apply some other function to x.

00:10:37.810 --> 00:10:42.730
So, this is the pattern which we've seen
twice. In the first case, we had eval of x

00:10:42.730 --> 00:10:46.540
sitting here, and in the second case, we
had eval of y sitting here, but this is

00:10:46.540 --> 00:10:49.900
the same pattern that we see two
times in the new evaluator

00:10:49.900 --> 00:10:53.770
which we've just written. So, what we
can do now, is abstract this out as a

00:10:53.770 --> 00:10:57.580
definition. And the idea here, is that
we're going to give names to these boxes.

00:10:57.580 --> 00:11:02.230
So, this box is a Maybe value - it's going
to be either Nothing or a Just, so we'll

00:11:02.230 --> 00:11:05.020
call it m. And this box is going
to be a function, it's going

00:11:05.020 --> 00:11:09.580
process the result in the case we're
successful, so we'll call this f. So, we

00:11:09.580 --> 00:11:13.270
can turn this picture here into a
definition now, and then we can use it to

00:11:13.270 --> 00:11:16.510
make our program simpler.  So, the
definition we're going to have is,

00:11:16.510 --> 00:11:23.830
if we have some Maybe value, feeding into,
or in sequence with, some function f. So,

00:11:23.830 --> 00:11:27.160
the operator we're defining here is
this funny sequencing symbol, and we'll

00:11:27.160 --> 00:11:31.060
back to that in a second. What we're
going to do, is a case analysis - we're

00:11:31.060 --> 00:11:34.000
going to look at what the Maybe
value is - if it's Nothing,

00:11:34.000 --> 00:11:39.730
we'll give back Nothing, and if it's Just
of x, we'll apply the function to it. Okay,

00:11:39.730 --> 00:11:44.080
so we'll just captured the pattern, which
we've seen twice, by a definition now. So,

00:11:44.080 --> 00:11:48.880
we have some Maybe value, then, or in
sequence with, some function f, and all

00:11:48.880 --> 00:11:52.780
we're going to do is look at what the
value of the Maybe is - if it's failed,

00:11:52.780 --> 00:11:57.010
we'll fail, if it succeeds, we pass the
result to the function f. It's just the

00:11:57.010 --> 00:12:02.950
idea of abstracting out a common pattern
as a definition. So, now we can use this

00:12:02.950 --> 00:12:07.750
definition to make our program simpler.
So, let's rewrite our evaluator once

00:12:07.750 --> 00:12:13.690
again. The type will remain the same -
it takes in an expression as input, and

00:12:13.690 --> 00:12:17.320
it's going to give back a Maybe value,
as before. But the definition is going

00:12:17.320 --> 00:12:21.190
to be a bit simpler this time. So, let's
write down the skeleton. So, if we

00:12:21.190 --> 00:12:25.300
evaluate a value, we're going to do
something. If we evaluate a division,

00:12:25.300 --> 00:12:29.080
we're going to do something. So, what do
we write in the base case? Well, I could

00:12:29.080 --> 00:12:33.490
write Just of n here, but actually I'm
going to abstract that as well - rather

00:12:33.490 --> 00:12:37.660
than writing Just of n, I'm going to
write return of n, so really what I'm

00:12:37.660 --> 00:12:41.950
making is a little kind of side
definition, that says return of x is the

00:12:41.950 --> 00:12:46.660
same as Just of x. And then, what are we
doing in the division case? Well, we're

00:12:46.660 --> 00:12:52.090
going to do an evaluation first - we're
going to evaluate x, and then if that's

00:12:52.090 --> 00:12:56.710
successful, using our little sequencing
operator, we're going to feed the result

00:12:56.710 --> 00:13:01.450
into a function. So that function is
going to take the result, n, that comes

00:13:01.450 --> 00:13:07.270
from evaluating that, and then it's going
to evaluate y. So, if we do eval of y, if

00:13:07.270 --> 00:13:11.620
that's successful, we're going to feed
that result into a function. And here

00:13:11.620 --> 00:13:14.980
again, I'm using the lambda notation,
which we did a video about previously,

00:13:14.980 --> 00:13:19.000
you can have a look back at that. So, if
these two things are both successful,

00:13:19.000 --> 00:13:24.520
we'll have two values, n and m, and then
all we do is call safediv with them,

00:13:24.520 --> 00:13:29.920
then close the brackets. So, this program
here is equivalent to the program which

00:13:29.920 --> 00:13:34.090
we wrote, which had all the nested case
analyses. But, that's all been abstracted

00:13:34.090 --> 00:13:37.480
away now - it's all been kind of
abstracted into return, and the

00:13:37.480 --> 00:13:42.550
sequencing, and safediv. So, this is a
nicer program now, but still I'm not

00:13:42.550 --> 00:13:45.220
entirely happy with this. There's
still some complexity in there - we're

00:13:45.220 --> 00:13:48.850
still using the funny lambda notation,
we're still using this funny symbol,

00:13:48.850 --> 00:13:53.920
which we've introduced. Maybe I can make
it even simpler? So, what a language like

00:13:53.920 --> 00:13:58.720
Haskell gives you, is a special notation
for writing programs which have this

00:13:58.720 --> 00:14:03.580
kind of form. And this is called the do
notation. So let me write this in do

00:14:03.580 --> 00:14:07.540
notation, and then we'll come back to
what this has all got to do with monads.

00:14:07.540 --> 00:14:11.020
So, let's write this program in an even
more simple form, and this will be our

00:14:11.020 --> 00:14:15.760
final program. We take an expression as
input, and it's going to Maybe deliver

00:14:15.760 --> 00:14:22.480
us an integer. And the base case will not
change, so we'll get return of n. But the

00:14:22.480 --> 00:14:26.380
recursive case is going to become a bit
simpler, because we use the do notation

00:14:26.380 --> 00:14:31.270
as a shorthand for using the sequencing
operator which we've introduced. So, I can

00:14:31.270 --> 00:14:35.680
say, if I evaluate a division, what I'm
going to do, and this is the keyword,

00:14:35.680 --> 00:14:38.830
which just gives you a shorthand for
exactly what we've just written, it's

00:14:38.830 --> 00:14:42.580
not anything special, it's just shorthand,
just syntactic sugar. What we're going to

00:14:42.580 --> 00:14:48.670
do, is take the result n, from the result
of evaluating x, if it's successful. Then,

00:14:48.670 --> 00:14:54.250
we'll take the result m, from the result
of evaluating y, if that's successful. And

00:14:54.250 --> 00:15:00.010
then, we will call safediv. And this is
our final program, and I'm much happier

00:15:00.010 --> 00:15:02.980
with this one. I mean, it looks kind of
similar to the original program, a

00:15:02.980 --> 00:15:07.690
similar level of complexity, but all the
failure management is now handled for us

00:15:07.690 --> 00:15:10.390
automatically. The failure
is happening behind the

00:15:10.390 --> 00:15:13.810
scenes with the do notation, and with
safediv, but we don't need to see that

00:15:13.810 --> 00:15:17.140
when we're reading this program. This is
a much nicer program than the last one,

00:15:17.140 --> 00:15:21.520
because we've kind of abstracted away
from a lot of the detail. So, you can look

00:15:21.520 --> 00:15:25.000
at a program like this, and I've hardly
mentioned the word monads in the last

00:15:25.000 --> 00:15:28.030
ten minutes, you can say what's this
actually got to do with monads? Well, what

00:15:28.030 --> 00:15:31.570
we've actually done,
is we've rediscovered what's

00:15:31.570 --> 00:15:35.980
known as the Maybe monad. The
Maybe monad is three things -

00:15:35.980 --> 00:15:40.060
it's the Maybe type, or really the Maybe
type constructor, because it takes a

00:15:40.060 --> 00:15:43.600
parameter. So you can have Maybe of an
integer, or maybe of a Boolean, or maybe of

00:15:43.600 --> 00:15:47.050
whatever you like. And then it's two
functions - it's the function called

00:15:47.050 --> 00:15:52.060
return, and it's the sequencing operator
which we introduced. And we can think

00:15:52.060 --> 00:15:56.260
about what are the types of these things?
So what return does, is it takes a thing

00:15:56.260 --> 00:16:00.220
of any old type, a - could be an integer,
could be a Boolean, could be whatever you

00:16:00.220 --> 00:16:06.880
like. And it converts it into a Maybe
value. So, in our case, this just took an

00:16:06.880 --> 00:16:12.040
integer like five, and we return Just of
five. Okay, so that's all the return was

00:16:12.040 --> 00:16:15.460
doing, it's basically just applying Just.
And what it gives you, is a bridge

00:16:15.460 --> 00:16:21.190
between the pure world of values here,
and the impure world of things that

00:16:21.190 --> 00:16:24.550
could go wrong - so it's a bridge from
pure to impure, if you like. And what

00:16:24.550 --> 00:16:28.330
sequencing does, is it gives you a way of
sequencing things - so you give it

00:16:28.330 --> 00:16:32.740
something which can fail, a Maybe a, and
then you give it a function that tells

00:16:32.740 --> 00:16:38.020
you what to do with that a, if you
succeed - so an a to Maybe b. And then,

00:16:38.020 --> 00:16:43.150
finally, what you're going to get back is a
Maybe b. Okay, and this is all that

00:16:43.150 --> 00:16:47.740
a monad is essentially - a monad is some
kind of type constructor, like Maybe, or

00:16:47.740 --> 00:16:51.430
List, or something else, as there's many
other examples, together with two functions

00:16:51.430 --> 00:16:56.500
that have these types here. So, what we've
essentially done is rediscovered what's

00:16:56.500 --> 00:17:00.460
called the Maybe monad. What's the point
of all of this? I mean, what's the point?

00:17:00.460 --> 00:17:04.630
We seem to have gone through quite a lot
of steps, to write in the end quite a

00:17:04.630 --> 00:17:08.530
simple program. What was the actual point
here? So there's four points which I

00:17:08.530 --> 00:17:13.360
would like to emphasize here. So, the
first point, is that the same idea we've

00:17:13.360 --> 00:17:18.430
seen works for other effects as well -
it's not specific to Maybe, which

00:17:18.430 --> 00:17:22.360
captures failure. The same idea captures
other kinds, or you can use with, other

00:17:22.360 --> 00:17:27.100
kinds of effects like input/output, like
mutable state, like reading from

00:17:27.100 --> 00:17:31.690
environments, like writing to log files,
non-determinism. All sorts of other

00:17:31.690 --> 00:17:35.140
things which you think of as being
effects in programming languages fit

00:17:35.140 --> 00:17:39.640
exactly the same pattern. So, monads kind
of give you a uniform framework for

00:17:39.640 --> 00:17:44.830
thinking about programming with effects.
Another important point is that it supports

00:17:44.830 --> 00:17:47.200
pure programming with effects.
I mean, Haskell is a pure

00:17:47.200 --> 00:17:51.610
language - functions just take inputs, and
produce outputs, they don't have any kind

00:17:51.610 --> 00:17:54.910
of side effects at all. But you need to
have side effects to write real

00:17:54.910 --> 00:18:01.270
programs. So, what monads give you is a
way of doing impure things, like proper

00:18:01.270 --> 00:18:05.650
side effects, like input/output, in a pure
programming language like Haskell. Another

00:18:05.650 --> 00:18:10.600
important point here, is that the use of
the effects is explicit in the types.

00:18:10.600 --> 00:18:13.870
When I wrote the
evaluator which didn't fail,

00:18:13.870 --> 00:18:18.670
it took an expression as input, and it
delivered Maybe of an integer. So, the

00:18:18.670 --> 00:18:23.440
Maybe in the type is telling me that
this program may fail. So, this is the

00:18:23.440 --> 00:18:27.460
idea of being explicit about what kind
of effects, or side effects, that your

00:18:27.460 --> 00:18:31.570
programs can have in the types. And this
is a very, very powerful idea. And the

00:18:31.570 --> 00:18:34.750
last thing is, it's a little bit strange,
but it's particularly interesting, it's

00:18:34.750 --> 00:18:38.770
the idea of writing functions that work
for any effect - we might call this kind of

00:18:38.770 --> 00:18:43.660
effect polymorphism. So, a simple example
of this would be maybe you have a

00:18:43.660 --> 00:18:48.160
sequence of things, which can have some
effects, and you want to run them all one

00:18:48.160 --> 00:18:51.490
after the other. You could write a
generic function, in a language like

00:18:51.490 --> 00:18:55.240
Haskell which supports monads, which
would take a sequence of effects of any

00:18:55.240 --> 00:18:59.440
kind, any monadic type, and it would run
them for you. So this is a very, very

00:18:59.440 --> 00:19:04.450
powerful idea, and languages like Haskell
have libraries of kind of generic effect

00:19:04.450 --> 00:19:08.110
functions, which are very useful. So,
that's basically all I want to say. Just

00:19:08.110 --> 00:19:11.770
going back to the start, I think the idea
of programming with monads is one of the

00:19:11.770 --> 00:19:14.560
most important developments in
programming languages in the last 25

00:19:14.560 --> 00:19:19.090
years - I find this particularly
fascinating. We've only really touched on

00:19:19.090 --> 00:19:23.260
the surface here, and if you want to know
a little bit more, I can do a bit of a

00:19:23.260 --> 00:19:27.730
plug - I have a new book which came out
fairly recently, Programming in Haskell,

00:19:27.730 --> 00:19:32.890
and this has got a chapter specifically
about this, which goes into much more

00:19:32.890 --> 00:19:35.470
detail. I've only really touched on the
surface, there's lots of things I didn't

00:19:35.470 --> 00:19:39.340
say, which maybe you need to know to
write real programs using this stuff. So,

00:19:39.340 --> 00:19:45.460
you could have a look in the book to 
find out more about that.  This is an

00:19:45.460 --> 00:19:48.910
interesting point, it causes quite quite
some problems for people learning

00:19:48.910 --> 00:19:53.260
languages like Haskell, because Haskell
people tend to use the proper

00:19:53.260 --> 00:19:56.830
mathematical terms for things, and those
terms are often quite foreign to

00:19:56.830 --> 00:20:00.760
programmers. And it does cause quite a
lot of difficulty - so there's some people

00:20:00.760 --> 00:20:04.270
have the view that we shouldn't actually
have used the term monad, maybe we 

00:20:04.270 --> 00:20:07.870
should have called them effects, or
something like that. So, just use the more

00:20:07.870 --> 00:20:11.860
kind of human, or a familiar term. But
it is an issue. But I'm actually of

00:20:11.860 --> 00:20:16.690
the point of view that, if we know the
proper term for something, we should call

00:20:16.690 --> 00:20:20.110
it that something, and the people who
are using it should just learn that term.

00:20:20.110 --> 00:20:24.580
I mean, it's what it is, it's a monad,
and we should kind of pay homage to

00:20:24.580 --> 00:20:27.310
the mathematicians for discovering this idea
first, and not kind of reappropriate it as

00:20:27.310 --> 00:20:32.920
if it was discovered independently - the
mathematicians discovered this, they should get 

00:20:32.920 --> 00:20:37.780
credit for that, and so I'm quite happy
with the word monad. But, it does cause

00:20:37.780 --> 00:20:40.210
some problems when people are learning
programming languages, because it does

00:20:40.210 --> 00:20:43.990
sound a bit scary, and there's lots more
scary terms like this in programming as

00:20:43.990 --> 00:20:55.450
well. This is all built into
languages like Haskell. So, there's

00:20:55.450 --> 00:20:58.510
lots of libraries for programming
with monadic things - you

00:20:58.510 --> 00:21:02.920
don't need to define a lot of the
infrastructure, like Maybe, and return, and

00:21:02.920 --> 00:21:07.120
the sequencing, for yourself - this is
kind of built in as libraries. You can

00:21:07.120 --> 00:21:10.300
define your own ones if you want to, but
there's maybe kind of fifteen or twenty

00:21:10.300 --> 00:21:13.570
monads which are just lying around
waiting for people to use. And if you

00:21:13.570 --> 00:21:16.900
want to use multiple different monads
in your programs, maybe you need two

00:21:16.900 --> 00:21:20.200
different kinds of effects, maybe you need
things that can fail, and you need some

00:21:20.200 --> 00:21:23.230
state, there's ways of coping with that
kind of stuff as well. So, you don't need

00:21:23.230 --> 00:21:27.460
to do all yourself,
it's mostly built in for you.

