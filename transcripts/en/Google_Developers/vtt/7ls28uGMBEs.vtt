WEBVTT
Kind: captions
Language: en

00:00:02.650 --> 00:00:04.370
During the lifetime
of your application,

00:00:04.370 --> 00:00:06.450
you can expect the amount
of allocated memory

00:00:06.450 --> 00:00:08.509
to change quite
frequently-- for example,

00:00:08.509 --> 00:00:10.300
needing to allocate a
whole load of bitmaps

00:00:10.300 --> 00:00:13.290
for your social media stream
or plotting a new jogging

00:00:13.290 --> 00:00:17.000
path that takes your user
past a trendy new donut shop.

00:00:17.000 --> 00:00:19.540
What's tricky, though, is
seeing how these allocations

00:00:19.540 --> 00:00:21.140
can impact your performance.

00:00:21.140 --> 00:00:22.150
My name is Colt McAnlis.

00:00:22.150 --> 00:00:25.200
And with the help of a snazzy
new tool in Android Studio,

00:00:25.200 --> 00:00:27.760
you can get a better sense of
how your application is using

00:00:27.760 --> 00:00:30.640
memory, which can help you track
down any related performance

00:00:30.640 --> 00:00:33.050
issues before your
users start to notice.

00:00:33.050 --> 00:00:36.070
And these issues are now easier
to solve with Android Studio's

00:00:36.070 --> 00:00:37.650
new Memory Monitor utility.

00:00:37.650 --> 00:00:39.630
This tool can give a
quick visual overview

00:00:39.630 --> 00:00:41.940
of how your application
is using memory over time.

00:00:41.940 --> 00:00:43.600
On the top left of
the window, you'll

00:00:43.600 --> 00:00:45.380
see your currently
connected device,

00:00:45.380 --> 00:00:47.200
and on the right, the
selected application

00:00:47.200 --> 00:00:48.430
that you'd like to monitor.

00:00:48.430 --> 00:00:50.460
If you have multiple
devices or apps active,

00:00:50.460 --> 00:00:52.680
this is where you'll
select between them.

00:00:52.680 --> 00:00:55.330
The graph in the middle of
the window is a stacked graph.

00:00:55.330 --> 00:00:57.580
That is, the amount of memory
that your application is

00:00:57.580 --> 00:00:59.740
currently using is
shown in dark blue,

00:00:59.740 --> 00:01:02.700
while the unallocated memory
that's available to be used

00:01:02.700 --> 00:01:04.560
is shown in light
blue right above it.

00:01:04.560 --> 00:01:06.040
Over time, this
graph will continue

00:01:06.040 --> 00:01:08.801
to update, showing you
changes in your memory usage.

00:01:08.801 --> 00:01:11.300
Now, in a world where your app
isn't doing much of anything,

00:01:11.300 --> 00:01:13.521
you should see a flat
graph just like this one.

00:01:13.521 --> 00:01:15.020
From a performance
perspective, this

00:01:15.020 --> 00:01:17.250
is actually an ideal scenario.

00:01:17.250 --> 00:01:19.700
See, as your app allocates
and frees memory,

00:01:19.700 --> 00:01:23.100
you'll see the allocative
amount fluctuate in your graph

00:01:23.100 --> 00:01:24.360
at the same time.

00:01:24.360 --> 00:01:27.230
Any time your allocated memory
drops by a significant amount,

00:01:27.230 --> 00:01:30.770
that's a signal that a garbage
collection event has occurred.

00:01:30.770 --> 00:01:34.250
These GC events aren't generally
a noticeable performance

00:01:34.250 --> 00:01:34.754
problem.

00:01:34.754 --> 00:01:36.670
However, a lot of them
occurring over and over

00:01:36.670 --> 00:01:38.700
and over again in a
short period of time

00:01:38.700 --> 00:01:40.830
can actually lead to
performance issues.

00:01:40.830 --> 00:01:43.057
The more time you're
spending doing GCs,

00:01:43.057 --> 00:01:44.890
the less time you'll
have to do other stuff,

00:01:44.890 --> 00:01:47.180
like rendering or
streaming audio.

00:01:47.180 --> 00:01:49.750
To enable the Memory Monitor,
start Android Studio,

00:01:49.750 --> 00:01:52.500
connect a physical
device, and run your app.

00:01:52.500 --> 00:01:56.070
Then go back and select Memory
Monitor from the Tools menu.

00:01:56.070 --> 00:01:58.032
Once the monitor is
running, a new tab

00:01:58.032 --> 00:01:59.740
at the bottom of your
screen will show up

00:01:59.740 --> 00:02:01.960
with all the
relevant information.

00:02:01.960 --> 00:02:04.390
While Memory Monitor will help
you know the general health

00:02:04.390 --> 00:02:06.370
and performance
of your system, it

00:02:06.370 --> 00:02:09.214
doesn't help you track down
any problems related to that.

00:02:09.214 --> 00:02:11.380
For that, you actually need
something more powerful,

00:02:11.380 --> 00:02:14.270
like the Memory Heap tool,
which will allow you to find out

00:02:14.270 --> 00:02:17.640
where in your code objects are
being created but not released,

00:02:17.640 --> 00:02:20.910
created and not used, or created
new when you could have been

00:02:20.910 --> 00:02:23.490
reusing them from
existing objects.

00:02:23.490 --> 00:02:25.770
While Java's memory-managed
environment makes it easy

00:02:25.770 --> 00:02:28.010
for you to work with memory,
it takes a lot of effort

00:02:28.010 --> 00:02:30.910
to ensure that those processes
keep your app running

00:02:30.910 --> 00:02:33.200
at top speed, which is
why you need to check out

00:02:33.200 --> 00:02:35.280
the rest of the Android
Performance Patterns

00:02:35.280 --> 00:02:38.440
content for other great tips
and tricks on efficient memory

00:02:38.440 --> 00:02:38.940
usage.

00:02:38.940 --> 00:02:42.130
And don't forget to join our
Google+ community as well,

00:02:42.130 --> 00:02:44.750
for in-the-trenches advice
from other developers.

00:02:44.750 --> 00:02:47.330
So keep calm, profile your
code, and always remember,

00:02:47.330 --> 00:02:47.980
Perf Matters.

00:02:47.980 --> 00:02:51.330
[MUSIC PLAYING]

