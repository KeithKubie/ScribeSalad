WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Well, we've seen that interpreters always work

00:00:02.000 --> 00:00:04.000
over Abstract Syntax Trees.

00:00:04.000 --> 00:00:09.000
My JavaScript interpreter should be called on our JavaScript parse tree--

00:00:09.000 --> 00:00:11.000
our JavaScript Abstract Syntax Tree--

00:00:11.000 --> 00:00:14.000
and it's going to arrange to return to us

00:00:14.000 --> 00:00:17.000
a string corresponding to what the user was going to print out

00:00:17.000 --> 00:00:19.000
as a result of calls to write,

00:00:19.000 --> 00:00:21.000
like this string containing (55).

00:00:21.000 --> 00:00:25.000
So that result is exactly what we want to display on the Web page.

00:00:25.000 --> 00:00:28.000
If this tripped you up because it was almost too simple,

00:00:28.000 --> 00:00:30.000
don't worry about it.

00:00:30.000 --> 00:00:32.000
Much of the detail in the integration

00:00:32.000 --> 00:00:36.000
is in knowing exactly the right way to call the lexar and the parser.

00:00:36.000 --> 00:00:39.000
But those aren't endearing concepts

00:00:39.000 --> 00:00:41.000
that I really want you to know after that class.

00:00:41.000 --> 00:00:44.000
Those are mere implementation details.

00:00:44.000 --> 00:00:46.000
Instead, the architecture--

00:00:46.000 --> 00:00:49.000
the fact that we can only call interpreters on Abstract Syntax Trees

00:00:49.000 --> 00:00:52.000
and that we've decided to pass string results back

00:00:52.000 --> 00:00:55.000
and then display them, using our graphics library--

00:00:55.000 --> 00:00:57.000
that's important; that's a design decision.

00:00:57.000 --> 00:00:59.000
This--this is a historical accident.

00:00:59.000 --> 00:01:02.000
That's why I gave all of you these, for free,

00:01:02.000 --> 09:59:59.000
and asked you to tell me about these conceptual bits.

