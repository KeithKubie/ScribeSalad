WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:03.890
So here's an algorithm that you'd probably either already know about or would be

00:00:03.890 --> 00:00:07.250
able to come up with rather quickly. Which is the idea of hill climbing. So

00:00:07.250 --> 00:00:10.940
if this is the function that we're trying to find the maximum of, then

00:00:10.940 --> 00:00:15.800
one thing we could do is imagine just guessing some x, I don't know, say,

00:00:19.950 --> 00:00:22.460
Which has some particular f of x value, and then

00:00:22.460 --> 00:00:26.020
to say, okay, well, let's move around in a neighborhood around

00:00:26.020 --> 00:00:29.040
that point, and see where we can go that would actually

00:00:29.040 --> 00:00:32.040
improve the function value. So we, here the neighborhood might be,

00:00:32.040 --> 00:00:33.390
you know, a little to the left, a little to

00:00:33.390 --> 00:00:37.610
the right on the x axis, and, what we find in

00:00:37.610 --> 00:00:39.720
one direction it's going down and the other direction it's going

00:00:39.720 --> 00:00:45.130
up. So what hill climbing says is find the neighbor that

00:00:45.130 --> 00:00:48.690
has the largest function value. This is steepest ascent hill

00:00:48.690 --> 00:00:53.160
climbing. And if that neighbor is above where we are now,

00:00:53.160 --> 00:00:55.600
has a higher function value than we are now then move

00:00:55.600 --> 00:00:58.660
to that point. Otherwise, we stop because we are at a

00:00:58.660 --> 00:01:01.140
local optimum. So, what this is going to do is it's going to

00:01:01.140 --> 00:01:04.599
iterate moving up and up and up and up this curve,

00:01:04.599 --> 00:01:07.210
always in a better and better and better direction until it

00:01:07.210 --> 00:01:10.350
hits this peak here. Then, it's going to look on both sides

00:01:10.350 --> 00:01:13.650
of it. The neighborhood, everything in the neighborhood is worse.

00:01:13.650 --> 00:01:16.180
So, it just stops there and this is the x

00:01:16.180 --> 00:01:19.620
that it returns. Which is, you know, not bad answer.

00:01:19.620 --> 00:01:23.630
It's not the best answer. But, it's a good answer.

00:01:23.630 --> 00:01:26.250
&gt;&gt; Hm. What if you had started out just a little bit

00:01:26.250 --> 00:01:29.880
more to the left? Say, on the other side of that valley.

00:01:29.880 --> 00:01:31.530
&gt;&gt; Oh, like here?

00:01:31.530 --> 00:01:33.070
&gt;&gt; Yeah.

00:01:33.070 --> 00:01:35.510
&gt;&gt; Hm. So then, well, let's

00:01:35.510 --> 00:01:38.400
see. What would it, what would it do? We start there.

00:01:38.400 --> 00:01:41.620
We take a step. We, we say, what's the neighborhood? The neighborhood

00:01:41.620 --> 00:01:43.220
or the points, just a little bit to the left, and

00:01:43.220 --> 00:01:45.100
just a little bit to the right. One of them is an

00:01:45.100 --> 00:01:48.400
improvement. So it takes the improvement. And again, it keeps finding

00:01:48.400 --> 00:01:51.300
it more and more improved. And then it gets to this top

00:01:51.300 --> 00:01:54.080
of this little bump and it says, okay, both the points in

00:01:54.080 --> 00:01:56.551
my neighborhood are worse than where I am now. Hurray, I'm done.

00:01:56.551 --> 00:01:57.190
&gt;&gt; Hm.

00:01:57.190 --> 00:02:00.490
&gt;&gt; So, that's not even worst of the local optima,

00:02:00.490 --> 00:02:03.175
you could actually get stuck here as well, which is even lower.

00:02:03.175 --> 00:02:06.550
&gt;&gt; Well, you could get stuck anywhere. Well, at any peak.

00:02:06.550 --> 00:02:09.080
&gt;&gt; Yes, exactly right and that's the lowest of the peaks.

