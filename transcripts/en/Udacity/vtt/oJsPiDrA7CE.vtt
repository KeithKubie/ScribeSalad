WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:01.350
But wait.

00:00:01.350 --> 00:00:05.076
What happens to the files that were
previously stored in the cache after

00:00:05.076 --> 00:00:06.780
installing a new one?

00:00:06.780 --> 00:00:11.770
The browser doesn't know whether you're
going to need the old ones or not.

00:00:11.770 --> 00:00:15.850
So it's up to you to clean
the unused files from the cache.

00:00:15.850 --> 00:00:19.290
The activate event is
the perfect place to do this.

00:00:20.650 --> 00:00:25.390
When the activate event is fired,
the code gets a list

00:00:25.390 --> 00:00:30.690
of current cache keys and iterates
through them using the map function.

00:00:30.690 --> 00:00:35.515
It then compares the key to the current
key and if they're not equal,

00:00:35.515 --> 00:00:36.630
purges them.

00:00:36.630 --> 00:00:39.930
This method does have a few
disadvantages though.

00:00:39.930 --> 00:00:44.647
First, this caching method,
requires us to update the cache key

00:00:44.647 --> 00:00:48.523
every time one of the App Shell
resources is changed.

00:00:48.523 --> 00:00:53.560
Otherwise, the old
content will be served.

00:00:53.560 --> 00:00:56.670
So be sure to update your
cache key with every change

00:00:56.670 --> 00:00:58.880
as you're working on your project.

00:00:58.880 --> 00:01:02.680
Another downside is the entire
cache is invalidated and

00:01:02.680 --> 00:01:06.970
needs to be downloaded every
time a single file changes.

00:01:06.970 --> 00:01:10.900
This means fixing a single spelling
mistake will invalidate the cache and

00:01:10.900 --> 00:01:13.960
require everything to
be downloaded again.

00:01:13.960 --> 00:01:15.510
Not exactly efficient.

