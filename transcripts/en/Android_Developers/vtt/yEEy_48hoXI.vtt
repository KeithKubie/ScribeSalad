WEBVTT
Kind: captions
Language: en

00:00:01.000 --> 00:00:02.220
So my name is Wale.

00:00:02.220 --> 00:00:05.340
I'm the technical lead for
the Android Window Manager

00:00:05.340 --> 00:00:07.420
and Activity Manager.

00:00:07.420 --> 00:00:11.100
Today I'm going to be
presenting what we're doing

00:00:11.100 --> 00:00:13.380
to support multi-window mode.

00:00:13.380 --> 00:00:16.660
It's going to be a relatively
short presentation, mainly

00:00:16.660 --> 00:00:19.590
because I want to give you
all a chance, at the end,

00:00:19.590 --> 00:00:22.060
to ask any questions
you may have

00:00:22.060 --> 00:00:26.590
relating to your specific
use in multi-window mode.

00:00:26.590 --> 00:00:32.860
OK, so multi-window
allows multiple activities

00:00:32.860 --> 00:00:35.060
to be visible on screen
at the same time.

00:00:35.060 --> 00:00:38.820
The activities are resizeable
from the full screen area

00:00:38.820 --> 00:00:41.360
down to a minimum
size, as allowed

00:00:41.360 --> 00:00:46.454
by the system or activity.

00:00:46.454 --> 00:00:48.370
In the end, we're going
to be supporting three

00:00:48.370 --> 00:00:50.380
forms of multi-window mode.

00:00:50.380 --> 00:00:53.230
Split-screen multi-window
mode, with two activities,

00:00:53.230 --> 00:00:54.800
obviously, side-by-side.

00:00:54.800 --> 00:00:56.230
And a divider in
the middle can be

00:00:56.230 --> 00:00:57.930
used to give more
or less screen space

00:00:57.930 --> 00:00:59.810
to one activity or the other.

00:00:59.810 --> 00:01:01.770
Picture-in-picture
multi-window mode,

00:01:01.770 --> 00:01:03.550
where an activity
is z-ordered always

00:01:03.550 --> 00:01:06.080
on top of all of the
activities on screen.

00:01:06.080 --> 00:01:08.740
And freeform
multi-window mode, where

00:01:08.740 --> 00:01:12.430
multiple activities are visible
on screen at the same time.

00:01:12.430 --> 00:01:14.571
They can be moved around
freely and also resized

00:01:14.571 --> 00:01:15.820
to any average area dimension.

00:01:19.280 --> 00:01:22.710
So some important things, in
the end, to keep in mind--

00:01:22.710 --> 00:01:25.510
the Android activity
lifecycle model

00:01:25.510 --> 00:01:28.280
is not going to be changing
in multi-window mode.

00:01:28.280 --> 00:01:30.630
We're still only going to
have one resumed activity

00:01:30.630 --> 00:01:32.430
in the system at a time.

00:01:32.430 --> 00:01:34.440
And all other visible
activities are

00:01:34.440 --> 00:01:38.130
going to be in the
paused visible state.

00:01:38.130 --> 00:01:41.960
There are several reasons we are
keeping this model on Android.

00:01:41.960 --> 00:01:44.390
And one of the main reasons
is, being in the resume state

00:01:44.390 --> 00:01:46.770
is an important
indicator to the system

00:01:46.770 --> 00:01:50.210
on what kind of resources
an activity can acquire,

00:01:50.210 --> 00:01:53.310
because it, kind of, has
highest important score.

00:01:53.310 --> 00:01:57.980
For example, the camera service
discovers singleton resource.

00:01:57.980 --> 00:02:00.040
And the resumed
activity is always

00:02:00.040 --> 00:02:02.540
going to get that
resource compared

00:02:02.540 --> 00:02:05.914
to all other activities that
are in the paused state.

00:02:05.914 --> 00:02:07.330
Another important
thing to note is

00:02:07.330 --> 00:02:09.990
that we are now also factoring
in the low memory score

00:02:09.990 --> 00:02:14.680
adjustment of visible
activities in the paused state

00:02:14.680 --> 00:02:15.675
using a z-order.

00:02:15.675 --> 00:02:17.050
For those of you
that don't know,

00:02:17.050 --> 00:02:19.030
the low memory score
just got on Android.

00:02:19.030 --> 00:02:20.730
It's basically an
important score given

00:02:20.730 --> 00:02:23.010
to all processes in the system.

00:02:23.010 --> 00:02:25.064
The higher your score,
the more important

00:02:25.064 --> 00:02:25.980
you are to the system.

00:02:25.980 --> 00:02:28.512
And the more the system
will try to keep you alive.

00:02:28.512 --> 00:02:31.550
And when the system is
running low on resources,

00:02:31.550 --> 00:02:35.662
it kills things that are of
lower importance score first.

00:02:35.662 --> 00:02:37.870
Right, so for example, you
can have a service showing

00:02:37.870 --> 00:02:41.400
in your background, and you
cannot be resumed activity.

00:02:41.400 --> 00:02:43.706
And the system-- when it's
running low on resources--

00:02:43.706 --> 00:02:45.830
would kill these services
running in the background

00:02:45.830 --> 00:02:48.760
first before the resumed
activity that the user might

00:02:48.760 --> 00:02:50.610
be interacting with.

00:02:50.610 --> 00:02:53.430
So similar for
visible activities

00:02:53.430 --> 00:02:54.920
that are in the
paused state-- we,

00:02:54.920 --> 00:02:58.030
kind of, rank them in
order of their z-order

00:02:58.030 --> 00:03:00.880
and give them an appropriate
low memory score adjustment.

00:03:00.880 --> 00:03:03.310
So if the system is really,
really, running low on memory

00:03:03.310 --> 00:03:05.110
and it needs to kill
visible activities,

00:03:05.110 --> 00:03:09.960
it's going to start from the one
with the lower z-order first.

00:03:09.960 --> 00:03:11.530
However, when the
system does that,

00:03:11.530 --> 00:03:14.050
we do preserve the
current window on screen

00:03:14.050 --> 00:03:15.520
so it's still
visible to the user.

00:03:15.520 --> 00:03:18.490
And we apply it
dimly on top of it.

00:03:18.490 --> 00:03:20.400
Once the user interacts
with the app again,

00:03:20.400 --> 00:03:23.004
we then bring it back to life.

00:03:23.004 --> 00:03:24.670
Something else that
is important to note

00:03:24.670 --> 00:03:28.710
is that, as of N, since it
isn't desirable for video apps

00:03:28.710 --> 00:03:31.610
to stop video playback when
they are in the paused state,

00:03:31.610 --> 00:03:34.420
the new recommendation,
as of N, is for video apps

00:03:34.420 --> 00:03:38.960
to handle play/pause actions
in-- on start on stop

00:03:38.960 --> 00:03:42.450
versus on resume on pause.

00:03:42.450 --> 00:03:44.510
While it has always
been the case in Android

00:03:44.510 --> 00:03:47.400
that a paused activity
can still be visible,

00:03:47.400 --> 00:03:50.050
it has not been as
visible to the user

00:03:50.050 --> 00:03:52.730
as it will be with multi-window.

00:03:52.730 --> 00:03:55.775
So it's a message right
now pushing for it

00:03:55.775 --> 00:04:00.120
a little bit stronger now that--
on what the various lifecycle

00:04:00.120 --> 00:04:02.420
stages represent.

00:04:02.420 --> 00:04:04.250
When you're on start,
it means you're

00:04:04.250 --> 00:04:05.720
going to be visible soon.

00:04:05.720 --> 00:04:08.670
On resume means you are
visible both and focused

00:04:08.670 --> 00:04:11.780
On pause, means you are still
visible but not focused.

00:04:11.780 --> 00:04:13.654
And on stop, means you
are no longer visible.

00:04:19.690 --> 00:04:24.510
So another thing to note is
that as the user resizes you up

00:04:24.510 --> 00:04:28.830
in multi-window mode, we do
issue configuration changes.

00:04:28.830 --> 00:04:30.940
However, we only limit
these configuration changes

00:04:30.940 --> 00:04:33.130
to the configurations that
would cause new resources

00:04:33.130 --> 00:04:34.590
to be loading you up.

00:04:34.590 --> 00:04:37.300
So, for example, if you
are past two buckets

00:04:37.300 --> 00:04:40.870
where it has a layout
representation for portrait

00:04:40.870 --> 00:04:45.170
and one for landscape-- and
as the user resizes you up

00:04:45.170 --> 00:04:48.070
in portrait mode, if they are
not crossing a threshold that

00:04:48.070 --> 00:04:49.950
will cause it to
switch orientation,

00:04:49.950 --> 00:04:52.170
we do not issue new
configuration changes

00:04:52.170 --> 00:04:53.670
or cause the app to relaunch.

00:04:53.670 --> 00:04:56.560
However, once they cross
that configuration threshold

00:04:56.560 --> 00:04:59.180
and new resources
need to be loaded,

00:04:59.180 --> 00:05:03.870
we do reissue the configuration
change for landscape mode.

00:05:03.870 --> 00:05:05.976
It's also important to
note that the configuration

00:05:05.976 --> 00:05:07.350
change that I'm
referring to here

00:05:07.350 --> 00:05:09.100
only applies to the
activity on screen

00:05:09.100 --> 00:05:11.960
and not the overall
device configuration.

00:05:11.960 --> 00:05:13.740
So the device can
be in landscape mode

00:05:13.740 --> 00:05:16.140
while your activity
in multi-window mode

00:05:16.140 --> 00:05:18.910
can be in portrait mode.

00:05:18.910 --> 00:05:21.190
Also, as you do today,
you can continue

00:05:21.190 --> 00:05:24.570
to undo configuration
changes to avoid relaunches.

00:05:24.570 --> 00:05:27.110
In order to avoid relaunches
in multi-window mode,

00:05:27.110 --> 00:05:28.735
you need to undo all
the configurations

00:05:28.735 --> 00:05:29.730
you have on screen.

00:05:29.730 --> 00:05:32.400
Screen size, smaller
screen size, screen layout,

00:05:32.400 --> 00:05:34.660
and orientation.

00:05:34.660 --> 00:05:37.160
If you choose not to undo
the configuration changes,

00:05:37.160 --> 00:05:38.800
you will be relaunching
and resizing.

00:05:38.800 --> 00:05:42.100
However, we do preserve your
current window on screen

00:05:42.100 --> 00:05:44.250
until you render your
content into a new window.

00:05:44.250 --> 00:05:46.410
And we'll replace
it seamlessly, so

00:05:46.410 --> 00:05:49.585
that the experience to the
user is not jarring and appears

00:05:49.585 --> 00:05:50.760
as smooth as possible.

00:05:54.982 --> 00:05:56.440
So there are several
new APIs we're

00:05:56.440 --> 00:05:58.648
going to being introducing
in order to better support

00:05:58.648 --> 00:05:59.452
multi-window mode.

00:05:59.452 --> 00:06:01.410
I'm going to be going
over a few of these APIs.

00:06:06.610 --> 00:06:10.902
So the big one is the resizeable
activity manifest attribute.

00:06:10.902 --> 00:06:13.360
This is an attribute that you
set to indicate to the system

00:06:13.360 --> 00:06:16.620
that your activity supports
multi-window and can be resized

00:06:16.620 --> 00:06:19.670
to any operator dimension.

00:06:19.670 --> 00:06:22.190
It's important to note that
we enabled this activity,

00:06:22.190 --> 00:06:24.690
by default, for all apps,
including the ones not

00:06:24.690 --> 00:06:27.830
targeting N. And you need
to explicitly tag it N

00:06:27.830 --> 00:06:30.890
and set it to false in order to
disable-- not that we recommend

00:06:30.890 --> 00:06:34.174
that, though, for all apps.

00:06:34.174 --> 00:06:35.590
Another important
thing to note is

00:06:35.590 --> 00:06:40.980
that the root activity
of a task determines

00:06:40.980 --> 00:06:43.410
the resizeability of that task.

00:06:43.410 --> 00:06:46.180
You can think of a task
as every single card entry

00:06:46.180 --> 00:06:49.100
you see in the recent activity
or [INAUDIBLE] activity.

00:06:49.100 --> 00:06:51.820
So if the root activity
is marked as resizeable,

00:06:51.820 --> 00:06:53.910
any additional activity
that goes into that task

00:06:53.910 --> 00:06:55.400
is also resizeable.

00:06:55.400 --> 00:06:59.450
However, if the root activity
isn't resizeable, then

00:06:59.450 --> 00:07:02.556
no other activity in that task--
the task will not be resized.

00:07:02.556 --> 00:07:05.014
So no other activity in that
task will be resized, as well.

00:07:09.020 --> 00:07:10.730
Another cool new
API we are adding

00:07:10.730 --> 00:07:12.920
is the launch adjacent API.

00:07:12.920 --> 00:07:14.440
With the launch
adjacent flag, you

00:07:14.440 --> 00:07:17.150
can launch an activity
adjacent to yourself

00:07:17.150 --> 00:07:19.900
while in split-screen
multi-window mode.

00:07:19.900 --> 00:07:24.490
For example, I have on screen
the Chrome activity on one side

00:07:24.490 --> 00:07:26.170
with an address link.

00:07:26.170 --> 00:07:27.830
An implementation
could be done where,

00:07:27.830 --> 00:07:29.954
once you click on
that address link,

00:07:29.954 --> 00:07:32.070
the map activity is
launched adjacent

00:07:32.070 --> 00:07:33.040
to the Chrome activity.

00:07:37.840 --> 00:07:40.790
So an activity can also
use the layout styleable,

00:07:40.790 --> 00:07:42.870
mostly in freeform
multi-window mode,

00:07:42.870 --> 00:07:45.780
to set its initial
or default launching

00:07:45.780 --> 00:07:48.020
position on size on screen.

00:07:48.020 --> 00:07:50.210
You can set things like
your default height, weight,

00:07:50.210 --> 00:07:53.530
gravity-- whether you want to
be on top, center, bottom--

00:07:53.530 --> 00:07:57.420
what the minimum dimensions
you allow the user to resize

00:07:57.420 --> 00:07:58.320
your application to.

00:08:03.300 --> 00:08:10.130
So in multi-window mode, as
the user resizes your activity,

00:08:10.130 --> 00:08:12.040
the layout of your app
can be slow depending

00:08:12.040 --> 00:08:13.480
on your implementation, right?

00:08:13.480 --> 00:08:15.220
So what a user would
notice is, kind of,

00:08:15.220 --> 00:08:17.879
an effect where they perform
an action in the old way

00:08:17.879 --> 00:08:19.670
here, right, and the
app is still, kind of,

00:08:19.670 --> 00:08:23.240
taking time to re-layout to
catch up to the user action.

00:08:23.240 --> 00:08:25.410
That experience is
not too desirable.

00:08:25.410 --> 00:08:28.090
So what we're
actually doing in N,

00:08:28.090 --> 00:08:31.060
is we introduce a second UI
thread in the application

00:08:31.060 --> 00:08:34.059
process to draw a
background color that

00:08:34.059 --> 00:08:35.585
keeps in line with
the user action

00:08:35.585 --> 00:08:38.049
as the main app's
UI thread takes time

00:08:38.049 --> 00:08:42.620
to render content to catch
up to the user action.

00:08:42.620 --> 00:08:45.000
You can use the window
background styleable

00:08:45.000 --> 00:08:46.990
to customize what this color is.

00:08:52.340 --> 00:08:54.790
So picture-in-picture
mode, while it's

00:08:54.790 --> 00:08:57.530
desirable for most
apps to support

00:08:57.530 --> 00:08:59.810
picture-in-picture-- to
support multi-window mode--

00:08:59.810 --> 00:09:01.510
it doesn't make
sense for all apps

00:09:01.510 --> 00:09:04.310
to support picture-in-picture
mode multi-window.

00:09:04.310 --> 00:09:08.460
For example, you would expect
an app like Netflix or YouTube

00:09:08.460 --> 00:09:10.460
to support
picture-in-picture mode.

00:09:10.460 --> 00:09:12.970
But you didn't expect
an app like Google Docs

00:09:12.970 --> 00:09:14.760
to support
picture-in-picture mode.

00:09:14.760 --> 00:09:17.255
So to differentiate this
form of multi-window mode,

00:09:17.255 --> 00:09:20.210
we have the supports
picture-in-picture mode

00:09:20.210 --> 00:09:22.590
manifest attribute for
the app to indicate

00:09:22.590 --> 00:09:25.440
that it can go into this mode.

00:09:25.440 --> 00:09:28.970
With apps that have this
flag set, on devices

00:09:28.970 --> 00:09:30.610
that support
picture-in-picture mode,

00:09:30.610 --> 00:09:32.950
they can call the enter
picture-in-picture mode API

00:09:32.950 --> 00:09:36.250
to put themselves into
picture-in-picture mode.

00:09:36.250 --> 00:09:40.800
A few things to keep in mind
with picture-in-picture mode

00:09:40.800 --> 00:09:43.920
is even though the
activity is z-ordered

00:09:43.920 --> 00:09:46.610
on top of all other
activities in the system,

00:09:46.610 --> 00:09:50.120
it is actually in the
paused visible state.

00:09:50.120 --> 00:09:52.280
And the activity
that is full screen

00:09:52.280 --> 00:09:54.120
below the
picture-in-picture activity

00:09:54.120 --> 00:09:56.054
is, actually, in
the resume state.

00:09:56.054 --> 00:09:57.470
And the main reason
for doing this

00:09:57.470 --> 00:09:59.100
is, once the user
puts your activity

00:09:59.100 --> 00:10:01.610
into picture-in-picture
mode, they really

00:10:01.610 --> 00:10:03.920
want to watch your
activity to the side

00:10:03.920 --> 00:10:07.084
while interacting with
the full screen activity.

00:10:07.084 --> 00:10:08.500
So it makes sense
for the activity

00:10:08.500 --> 00:10:11.340
to be focused and resumed
while your activity is

00:10:11.340 --> 00:10:14.016
in the visible paused state.

00:10:14.016 --> 00:10:16.390
It's also important to keep
in mind that you can continue

00:10:16.390 --> 00:10:19.367
to use the media session APIs
we have today while you're

00:10:19.367 --> 00:10:24.130
in picture-in-picture mode to
keep track of media buttons,

00:10:24.130 --> 00:10:25.790
like play/pause
actions and whatnot.

00:10:30.750 --> 00:10:35.240
We also have APIs that
allow you to get notified

00:10:35.240 --> 00:10:37.730
whenever the system
or the user puts you

00:10:37.730 --> 00:10:39.410
into multi-window
mode, or whenever

00:10:39.410 --> 00:10:42.420
you exit multi-window motor
and picture-in-picture mode.

00:10:42.420 --> 00:10:44.520
And you can also
query the system

00:10:44.520 --> 00:10:45.760
on your client's window mode.

00:10:51.860 --> 00:10:55.340
In freeform mode, activity
is allowed to display content

00:10:55.340 --> 00:11:02.350
next to the caption/title area
using the overlay with the call

00:11:02.350 --> 00:11:03.940
caption API.

00:11:03.940 --> 00:11:06.030
You can kind of think
about the Chrome tabs

00:11:06.030 --> 00:11:08.337
you have on your
computer where the Chrome

00:11:08.337 --> 00:11:10.170
tabs are next to the
window control buttons.

00:11:10.170 --> 00:11:12.560
With this API, you can, kind
of, do something similar.

00:11:16.790 --> 00:11:18.580
Also in freeform
mode, an activity

00:11:18.580 --> 00:11:21.660
can launch another activity at
a specific location and size

00:11:21.660 --> 00:11:25.170
on the screen using the activity
option set launch bounds API.

00:11:30.770 --> 00:11:36.180
So currently on
Android we support

00:11:36.180 --> 00:11:40.720
several APIs that affect the
entire screen configuration.

00:11:40.720 --> 00:11:43.820
You can think of the nav bar,
status bar customization,

00:11:43.820 --> 00:11:45.400
for example.

00:11:45.400 --> 00:11:48.170
And this customization
for the entire screen

00:11:48.170 --> 00:11:50.920
would have conflict
in multi-window mode,

00:11:50.920 --> 00:11:55.110
especially when apps require
conflicting configuration.

00:11:55.110 --> 00:11:57.270
So through that
effect, we have most

00:11:57.270 --> 00:11:59.610
of this configuration as
disabled when the apps are

00:11:59.610 --> 00:12:00.775
in multi-window mode.

00:12:00.775 --> 00:12:02.770
I have some of the
examples listed on screen,

00:12:02.770 --> 00:12:05.150
like the system UI
customization for status bar,

00:12:05.150 --> 00:12:09.990
nav bar-- show wallpaper
behind-- immersive mode,

00:12:09.990 --> 00:12:12.970
and setting orientation.

00:12:12.970 --> 00:12:16.900
Something important to note
with setting orientation--

00:12:16.900 --> 00:12:20.110
once you say your app is
compatible with multi-window

00:12:20.110 --> 00:12:23.110
mode, having a fixed
orientation doesn't really

00:12:23.110 --> 00:12:24.780
make sense in that
world anymore,

00:12:24.780 --> 00:12:26.920
since the user can,
kind of, resize

00:12:26.920 --> 00:12:29.660
your app to any dimension,
and it can change orientation

00:12:29.660 --> 00:12:30.910
while changing that dimension.

00:12:30.910 --> 00:12:32.870
So it kind of makes sense
for that to be disabled,

00:12:32.870 --> 00:12:34.619
regardless of the
conflict you might have.

00:12:38.220 --> 00:12:41.690
So some UX best
practices and guidelines

00:12:41.690 --> 00:12:43.970
for multi-window
mode include, you

00:12:43.970 --> 00:12:48.400
will provide a single responsive
UI for your application

00:12:48.400 --> 00:12:50.950
so that the user has a
consistent experience

00:12:50.950 --> 00:12:53.070
while using your application
on the same device

00:12:53.070 --> 00:12:55.200
at different sizes.

00:12:55.200 --> 00:12:58.410
You'll start by designing your
app for the most challenging

00:12:58.410 --> 00:13:01.740
use case so you can uncover
architectural problems early

00:13:01.740 --> 00:13:03.632
in the design process.

00:13:03.632 --> 00:13:05.770
And you'll follow the
material design patterns

00:13:05.770 --> 00:13:08.160
so that your app has
a consistent look

00:13:08.160 --> 00:13:11.860
and feel with other apps
running on the system.

00:13:11.860 --> 00:13:20.000
And we-- you want to only
disable multi-window mode

00:13:20.000 --> 00:13:21.260
when justified.

00:13:21.260 --> 00:13:24.590
It's-- it would be odd if most
apps on the user device go

00:13:24.590 --> 00:13:25.680
into multi-window mode.

00:13:25.680 --> 00:13:27.240
And your app is the odd one out.

00:13:27.240 --> 00:13:31.340
And the user launches it, and it
launches into full screen mode.

00:13:31.340 --> 00:13:34.352
And look for various places to
take advantage of all the APIs

00:13:34.352 --> 00:13:36.560
we're exposing for multi-window
mode, like the launch

00:13:36.560 --> 00:13:39.398
adjacent for
appropriate use cases.

00:13:43.070 --> 00:13:46.700
So some more guidelines
and best practices--

00:13:46.700 --> 00:13:49.300
we recommend that apps with
similar layout for phones

00:13:49.300 --> 00:13:55.330
and tablets may use the
phone tablets on-- I'm

00:13:55.330 --> 00:13:59.030
sorry-- the phone UI on tablets,
since the experience would not

00:13:59.030 --> 00:14:01.830
be too jarring to the user as
they transition from one size

00:14:01.830 --> 00:14:03.030
to another.

00:14:03.030 --> 00:14:05.810
However, for us, it's a
completely different layout.

00:14:05.810 --> 00:14:09.330
We recommend that the
phone UI shouldn't be used.

00:14:09.330 --> 00:14:12.800
Instead the tablet
UI should be made

00:14:12.800 --> 00:14:16.709
to work at its smallest size
and scaling up from there.

00:14:16.709 --> 00:14:19.000
The main reason for these
recommendations or guidelines

00:14:19.000 --> 00:14:22.650
is to, kind of, give the
user a consistent feel

00:14:22.650 --> 00:14:25.890
and experience as they
resize your activity

00:14:25.890 --> 00:14:26.750
in the same device.

00:14:30.020 --> 00:14:35.940
So to simplify adapting your
app for multi-window mode, what

00:14:35.940 --> 00:14:38.240
we've found is it's
better to design your app

00:14:38.240 --> 00:14:40.130
for the smallest size first.

00:14:40.130 --> 00:14:43.930
If you can get something
working with 220dp wide or tall,

00:14:43.930 --> 00:14:46.300
you can-- by condensing
elements or removing

00:14:46.300 --> 00:14:49.800
non-essential ones-- then
you can, basically, scale up

00:14:49.800 --> 00:14:52.920
your apps you sketched from
there, adding things as needed.

00:14:57.890 --> 00:15:00.920
A nice complementary
feature to multi-window mode

00:15:00.920 --> 00:15:04.650
is the system-wide
drag and drop API.

00:15:04.650 --> 00:15:06.860
With the Android drag
and drop framework,

00:15:06.860 --> 00:15:09.280
you can allow
activities to share data

00:15:09.280 --> 00:15:12.460
using the graphic called
drag and drop gesture.

00:15:12.460 --> 00:15:14.250
Some of the basic
API for drag and drop

00:15:14.250 --> 00:15:17.380
include, start drag and
drop, update drag shadow--

00:15:17.380 --> 00:15:19.940
the drag shadow is,
really, the thumbnail

00:15:19.940 --> 00:15:22.010
you will see when you
are actually dragging--

00:15:22.010 --> 00:15:25.610
and cancel drag and
drop-- pretty cool API.

00:15:28.640 --> 00:15:32.190
OK, so I said it's going
to be a short presentation.

00:15:32.190 --> 00:15:35.056
And I would just like
to end by saying,

00:15:35.056 --> 00:15:38.670
the Android framework-- we've
done a whole lot of working

00:15:38.670 --> 00:15:43.050
in to add multi-window mode and
to make sure the APIs we feel

00:15:43.050 --> 00:15:45.130
will be useful to our
developers and the UI

00:15:45.130 --> 00:15:47.680
are supported at
the platform level.

00:15:47.680 --> 00:15:50.460
However, that's
just half the work.

00:15:50.460 --> 00:15:52.550
We really depend on
the app developers

00:15:52.550 --> 00:15:56.280
to start picking up this
feature up in the N preview,

00:15:56.280 --> 00:15:58.450
to start using it,
testing out your app,

00:15:58.450 --> 00:16:02.430
making sure it performs
less awkwardly, and resizes.

00:16:02.430 --> 00:16:04.930
See what kind of problems you
come up with, and providing us

00:16:04.930 --> 00:16:06.980
feedback on things we can
improve in the platform

00:16:06.980 --> 00:16:08.920
to make your life easier.

00:16:08.920 --> 00:16:12.440
It's kind of a two-sided
effort to get this feature up

00:16:12.440 --> 00:16:15.010
to a level where it
really brings joy

00:16:15.010 --> 00:16:17.210
to the-- to all Android
users everywhere

00:16:17.210 --> 00:16:20.321
as they use multi-window mode.

00:16:20.321 --> 00:16:20.820
So, yeah.

00:16:23.800 --> 00:16:26.645
So that's all I have
for the presentation.

00:16:26.645 --> 00:16:31.440
I have some useful
links up on screen.

00:16:31.440 --> 00:16:34.950
There are mics on
all the hallways

00:16:34.950 --> 00:16:41.830
if you want to ask any
questions on the topic.

00:16:41.830 --> 00:16:42.360
Thank you.

00:16:42.360 --> 00:16:43.860
[APPLAUSE]

00:16:43.860 --> 00:16:47.510
[MUSIC PLAYING]

