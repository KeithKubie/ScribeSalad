WEBVTT
Kind: captions
Language: en

00:00:11.160 --> 00:00:12.820
SETH LADD: Welcome to this
episode of Dartisans.

00:00:12.820 --> 00:00:15.270
Today we are talking continuous
integration testing

00:00:15.270 --> 00:00:18.280
and deployment with Dart,
everyone's favorite structured

00:00:18.280 --> 00:00:19.370
web programming language.

00:00:19.370 --> 00:00:22.870
Today, special guest with us,
the founders of Drone I/O, Tom

00:00:22.870 --> 00:00:24.540
Burke and Brad Rydzewski.

00:00:24.540 --> 00:00:26.250
Thank you, guys, so much
for coming in.

00:00:26.250 --> 00:00:29.360
Drone I/O is a continuous
integration service that

00:00:29.360 --> 00:00:32.159
supports Dart out of the box,
and they're here today to show

00:00:32.159 --> 00:00:34.980
us a variety of different use
cases and functions that you

00:00:34.980 --> 00:00:37.630
can use with your Dart projects
for continuous

00:00:37.630 --> 00:00:39.780
integration testing
and deployment.

00:00:39.780 --> 00:00:41.170
Thanks, guys, for joining us.

00:00:41.170 --> 00:00:42.270
BRAD RYDZEWSKI: Thanks
for having us.

00:00:42.270 --> 00:00:43.050
SETH LADD: Really
appreciate it.

00:00:43.050 --> 00:00:46.080
So I'm really curious, how did
you get into and interested in

00:00:46.080 --> 00:00:47.610
continuous integration?

00:00:47.610 --> 00:00:49.820
BRAD RYDZEWSKI: So it started
probably a few months ago.

00:00:49.820 --> 00:00:53.400
We spent three or four days
setting up a Jenkins server,

00:00:53.400 --> 00:00:55.910
and we thought, there's got
to be a better way.

00:00:55.910 --> 00:00:58.260
SETH LADD: And define for
me continue integration.

00:00:58.260 --> 00:00:59.770
I feel like this is something
that has a lot

00:00:59.770 --> 00:01:00.280
of different meanings.

00:01:00.280 --> 00:01:02.130
What does it mean to
you and Drone?

00:01:02.130 --> 00:01:04.230
BRAD RYDZEWSKI: So it's the
ability to, as you're making

00:01:04.230 --> 00:01:06.740
changes to your code,
automatically test them to

00:01:06.740 --> 00:01:09.950
find your bugs immediately, and
notify your team members.

00:01:09.950 --> 00:01:12.120
Bugs are a lot easier
to fix that way.

00:01:12.120 --> 00:01:14.570
And then, there's some nice
things you can do in terms of

00:01:14.570 --> 00:01:17.960
automated deployments, which
are a huge time saver.

00:01:17.960 --> 00:01:19.860
SETH LADD: So what attracted
you to Dart?

00:01:19.860 --> 00:01:23.510
Drone supports many languages,
Ruby, Python, Go, I think I

00:01:23.510 --> 00:01:26.200
saw SCALA in there,
what about Dart?

00:01:26.200 --> 00:01:28.600
BRAD RYDZEWSKI: So we were
huge fans of Google Web

00:01:28.600 --> 00:01:31.200
Toolkit and very active in that
community, and we also

00:01:31.200 --> 00:01:35.000
use Go very heavily, so we
were very excited to add

00:01:35.000 --> 00:01:37.630
another Google technology
to our stack.

00:01:37.630 --> 00:01:39.540
SETH LADD: And I feel like
continuous integration is even

00:01:39.540 --> 00:01:42.720
more important for new and
upcoming systems like Dart

00:01:42.720 --> 00:01:46.120
that have a lot of milestone
releases very quickly.

00:01:46.120 --> 00:01:48.360
I think it's important for
us, as Dart authors and

00:01:48.360 --> 00:01:51.520
developers, to stay on top of
the continual changes and

00:01:51.520 --> 00:01:53.190
upgrades to the Dart
ecosystem.

00:01:53.190 --> 00:01:56.840
So getting your package and
code into Drone can really

00:01:56.840 --> 00:02:00.460
help you get notified when
say, libraries change or

00:02:00.460 --> 00:02:03.240
evolve, your dependencies
change, and so I continuous

00:02:03.240 --> 00:02:04.820
integration almost
as a requirement

00:02:04.820 --> 00:02:06.280
for the Dart developer.

00:02:06.280 --> 00:02:08.960
BRAD RYDZEWSKI: Absolutely,
Drone will always test your

00:02:08.960 --> 00:02:12.350
code against the latest version
of Dart, so you can

00:02:12.350 --> 00:02:15.660
always make sure that it's using
the latest and greatest

00:02:15.660 --> 00:02:18.400
language features, and that
you don't have any syntax

00:02:18.400 --> 00:02:19.740
issues or anything like that.

00:02:19.740 --> 00:02:20.490
SETH LADD: Perfect.

00:02:20.490 --> 00:02:21.970
Well, let's see some demos.

00:02:21.970 --> 00:02:25.100
So I think first off, probably
the most primary use case is I

00:02:25.100 --> 00:02:26.900
have some unit tests
for my project.

00:02:26.900 --> 00:02:30.340
How do I make sure that I can
have Drone run all these, and

00:02:30.340 --> 00:02:31.700
tell me if they're
working or not?

00:02:31.700 --> 00:02:35.490
BRAD RYDZEWSKI: Sure, so let's
switch to the screen, and

00:02:35.490 --> 00:02:38.800
we're looking at just the most
basic Dart unit test.

00:02:38.800 --> 00:02:39.850
It's going to test the function

00:02:39.850 --> 00:02:41.480
that adds two numbers.

00:02:41.480 --> 00:02:45.960
And this simple project is
checked into GitHub, so now,

00:02:45.960 --> 00:02:48.700
what we're going to do is we're
going to import this

00:02:48.700 --> 00:02:53.450
into Dart and run the unit
test so let's log in.

00:02:53.450 --> 00:02:56.270
And no need to create username
and password.

00:02:56.270 --> 00:02:57.450
You can log in with
your GitHub,

00:02:57.450 --> 00:02:58.760
Bitbucket or Google ID.

00:02:58.760 --> 00:03:01.790
So I'm going to go ahead and log
in with my GitHub account.

00:03:01.790 --> 00:03:05.220
So we're going to start by
creating a new project.

00:03:05.220 --> 00:03:09.150
And this, like I said before,
this was in GitHub, and so we

00:03:09.150 --> 00:03:10.980
see our list of GitHub
projects here.

00:03:10.980 --> 00:03:13.170
SETH LADD: I love this because
you don't have to type in any

00:03:13.170 --> 00:03:13.990
repository name.

00:03:13.990 --> 00:03:16.700
This is auto discovering all
of your repositories.

00:03:16.700 --> 00:03:17.620
That's cool.

00:03:17.620 --> 00:03:19.570
BRAD RYDZEWSKI: So we're going
to click Drone Demo here, and

00:03:19.570 --> 00:03:23.420
what this is doing now in the
background is it added your

00:03:23.420 --> 00:03:27.015
project to Drone, and then it
also set up a build hook so

00:03:27.015 --> 00:03:29.710
that every time you make and
commit a code change, Drone

00:03:29.710 --> 00:03:32.060
I/O is automatically going
to build it for you.

00:03:32.060 --> 00:03:35.050
So, of course, we're going to
select Dart as the language.

00:03:35.050 --> 00:03:37.480
Now, it's going to prompt us
to enter in a build script.

00:03:37.480 --> 00:03:40.480
Now, this is where you may have
to edit it, based on your

00:03:40.480 --> 00:03:42.180
actual code.

00:03:42.180 --> 00:03:45.110
So I'm going to go ahead
and change this to

00:03:45.110 --> 00:03:45.920
run the unit test.

00:03:45.920 --> 00:03:50.160
It's in a file called
test runner.

00:03:50.160 --> 00:03:53.390
SETH LADD: So I see here, that
this might be project specific

00:03:53.390 --> 00:03:56.660
for the short term, but I think
more in term on the

00:03:56.660 --> 00:03:59.960
radar of the Dart team is some
sort of build tool with

00:03:59.960 --> 00:04:01.790
well-defined tasks
and targets.

00:04:01.790 --> 00:04:04.140
One of those, of course, would
be run all my unit test, so I

00:04:04.140 --> 00:04:06.390
think this is going to get even
easier as we go further

00:04:06.390 --> 00:04:07.170
in the project.

00:04:07.170 --> 00:04:08.840
BRAD RYDZEWSKI: That
would be great.

00:04:08.840 --> 00:04:11.630
Now, we'll go ahead
and save this.

00:04:11.630 --> 00:04:13.467
Project is now saved.

00:04:13.467 --> 00:04:17.778
You can do a lot more to modify
your build script.

00:04:17.778 --> 00:04:19.459
You can set up databases.

00:04:19.459 --> 00:04:22.286
You can either change the
version of Dart you want to

00:04:22.286 --> 00:04:23.451
test against.

00:04:23.451 --> 00:04:25.072
For now we're just going to
test against the standard

00:04:25.072 --> 00:04:26.445
version of Dart.

00:04:26.445 --> 00:04:29.439
Now I'm going to kick off the
build manually so we can see

00:04:29.439 --> 00:04:29.938
[INAUDIBLE].

00:04:29.938 --> 00:04:32.433
SETH LADD: So what's happening
when you click that button?

00:04:32.433 --> 00:04:33.555
BRAD RYDZEWSKI: So when I
click that button, it's

00:04:33.555 --> 00:04:36.674
checking out your code to a
fresh virtual machine running

00:04:36.674 --> 00:04:38.920
the commands that
we specified.

00:04:38.920 --> 00:04:41.248
Now we're looking at the
build output that is

00:04:41.248 --> 00:04:42.413
displayed in real time.

00:04:42.413 --> 00:04:45.407
You can see all the tests
passed and you can

00:04:45.407 --> 00:04:46.405
[INAUDIBLE].

00:04:46.405 --> 00:04:48.900
SETH LADD: So I pulled down the
code from GitHub, spawned

00:04:48.900 --> 00:04:52.982
a VM inside your build cluster,
ran the commands that

00:04:52.982 --> 00:04:55.590
you put into that text field.

00:04:55.590 --> 00:04:57.078
And then it puts
out the output.

00:04:57.078 --> 00:04:58.566
That was really quick.

00:04:58.566 --> 00:05:00.550
BRAD RYDZEWSKI: Yes, yeah,
very easy to get started.

00:05:00.550 --> 00:05:01.046
SETH LADD: Very nice.

00:05:01.046 --> 00:05:03.360
So not everybody has unit tests,
although of course we

00:05:03.360 --> 00:05:04.518
encourage everybody
to do unit tests.

00:05:04.518 --> 00:05:06.750
We've started shifting unit
tests and in the box libraries

00:05:06.750 --> 00:05:08.490
out of box.

00:05:08.490 --> 00:05:12.042
What can you offer our Dart
developers who don't yet have

00:05:12.042 --> 00:05:14.280
unit tests in their projects but
still want to get notified

00:05:14.280 --> 00:05:16.824
if say libraries are changing
[INAUDIBLE].

00:05:16.824 --> 00:05:17.245
BRAD RYDZEWSKI: Absolutely.

00:05:17.245 --> 00:05:21.160
So a great tool utility
is Dart Analyzer.

00:05:21.160 --> 00:05:25.338
So Dart Analyzer will check
syntax, it wil check if you're

00:05:25.338 --> 00:05:28.034
using specific [INAUDIBLE].

00:05:28.034 --> 00:05:30.915
If you're taking advantage of
the optimum [INAUDIBLE] of the

00:05:30.915 --> 00:05:31.986
feature within Dart.

00:05:31.986 --> 00:05:34.331
So let's go ahead and import a
project and we can test out

00:05:34.331 --> 00:05:35.444
the Dart Analyzer.

00:05:35.444 --> 00:05:40.880
So we'll go to the new setup
page and choose GitHub.

00:05:40.880 --> 00:05:44.660
We're going to go to
this to do list.

00:05:44.660 --> 00:05:46.540
And again, we're going
to choose Dart.

00:05:46.540 --> 00:05:49.420
And this time I'm going
to change the

00:05:49.420 --> 00:05:50.670
script to use Dart Analyzer.

00:05:55.050 --> 00:05:56.610
SETH LADD: Now, as you're
typing, that Dart analyzer is

00:05:56.610 --> 00:05:59.250
a tool written in Java right now
that will analyze all of

00:05:59.250 --> 00:06:02.440
your Dart code, and again, look
at the optional types and

00:06:02.440 --> 00:06:05.530
see if you have anything that
looks a little fishy, if you

00:06:05.530 --> 00:06:07.690
will, things may not match
up quite perfectly.

00:06:07.690 --> 00:06:09.600
It will give you warnings about

00:06:09.600 --> 00:06:11.520
potential misuses of types.

00:06:11.520 --> 00:06:14.330
Really, really good tool that
give you heads up on the

00:06:14.330 --> 00:06:16.080
status of your product.

00:06:16.080 --> 00:06:18.320
BRAD RYDZEWSKI: So I've modified
the script to run

00:06:18.320 --> 00:06:21.580
Dart Analyzer, let's go
ahead and save this.

00:06:21.580 --> 00:06:25.750
And now, again, we'll run
the build manually.

00:06:25.750 --> 00:06:28.720
This is dumping us into
the real time output.

00:06:28.720 --> 00:06:30.660
SETH LADD: Now, how did you
get the real time output?

00:06:30.660 --> 00:06:32.970
BRAD RYDZEWSKI: So this
is using web sockets.

00:06:32.970 --> 00:06:35.200
SETH LADD: Oh, that's awesome.

00:06:35.200 --> 00:06:36.450
BRAD RYDZEWSKI: And so you can
see here, we get a ton of

00:06:36.450 --> 00:06:41.210
great output of specific
warnings that Dart Analyzer

00:06:41.210 --> 00:06:42.130
has targeted.

00:06:42.130 --> 00:06:44.290
So now, we can use this
to improve our code.

00:06:44.290 --> 00:06:46.180
SETH LADD: So what
triggers a--

00:06:46.180 --> 00:06:48.720
I get the sense in CI
terminology, builds are either

00:06:48.720 --> 00:06:49.710
green or red?

00:06:49.710 --> 00:06:52.270
Does Drone have green,
red, and is there

00:06:52.270 --> 00:06:53.420
this concept of yellow?

00:06:53.420 --> 00:06:55.770
That is, how do you interpret
this kind of output?

00:06:55.770 --> 00:06:58.810
I mean, the code may still work,
but I may want to take

00:06:58.810 --> 00:07:01.240
action on this, so how do you
surface that to the user?

00:07:01.240 --> 00:07:01.580
BRAD RYDZEWSKI: Correct.

00:07:01.580 --> 00:07:05.980
So right now, Dart Analyzer
always outputs with a status

00:07:05.980 --> 00:07:08.520
of zero, so we use the exit
code of the command you're

00:07:08.520 --> 00:07:12.650
running to determine if Dart
should show a red or green.

00:07:12.650 --> 00:07:16.910
In this case, because Dart
Analyzer returned and exit

00:07:16.910 --> 00:07:19.120
code of zero, that's why
you see a green.

00:07:19.120 --> 00:07:21.620
So what you could do is you
could analyze the output as

00:07:21.620 --> 00:07:23.870
part of your build
configuration.

00:07:23.870 --> 00:07:28.650
You may be able to grep the
output and trigger an exit

00:07:28.650 --> 00:07:30.490
status of one if
you wanted to.

00:07:30.490 --> 00:07:30.770
SETH LADD: Cool.

00:07:30.770 --> 00:07:33.010
So out of the box you can run
the command, but then it's up

00:07:33.010 --> 00:07:35.940
to us to interpret these
warnings or errors

00:07:35.940 --> 00:07:40.390
appropriately based on my own
personal threshold for say,

00:07:40.390 --> 00:07:41.010
type usage.

00:07:41.010 --> 00:07:42.090
BRAD RYDZEWSKI: Yes.

00:07:42.090 --> 00:07:42.900
SETH LADD: Great.

00:07:42.900 --> 00:07:43.900
Very cool.

00:07:43.900 --> 00:07:44.460
OK, good.

00:07:44.460 --> 00:07:47.640
So we've seen examples, I think,
on more like command

00:07:47.640 --> 00:07:50.120
line driven applications, but
I'm really curious, most of

00:07:50.120 --> 00:07:53.080
Dart is really targeted at
building dynamic web apps and

00:07:53.080 --> 00:07:54.940
run in the browser.

00:07:54.940 --> 00:07:58.100
Does Drone I/O have anything
to help us test

00:07:58.100 --> 00:07:59.360
browser-based apps?

00:07:59.360 --> 00:08:00.540
BRAD RYDZEWSKI: Absolutely.

00:08:00.540 --> 00:08:04.260
So if we look at the screen
right now, we're going to go

00:08:04.260 --> 00:08:06.360
to this To Do app.

00:08:06.360 --> 00:08:09.035
And we're going to look
at two specific files.

00:08:09.035 --> 00:08:10.880
So the To Do app,
this is actually

00:08:10.880 --> 00:08:12.060
from the game of Darts.

00:08:12.060 --> 00:08:14.555
We took the To Do app and we
modified it a little bit to

00:08:14.555 --> 00:08:16.740
add in some unit testing.

00:08:16.740 --> 00:08:19.010
And since this is a client
side web app, we actually

00:08:19.010 --> 00:08:20.370
wanted to unit test the DOM.

00:08:20.370 --> 00:08:24.790
We wanted to make sure that
we're adding elements, we

00:08:24.790 --> 00:08:27.440
added error messaging if you're
to do list is too long.

00:08:27.440 --> 00:08:30.270
So we wanted to make sure we're
showing or hiding the

00:08:30.270 --> 00:08:31.960
error message correctly,
and we've added unit

00:08:31.960 --> 00:08:33.159
tests for all of that.

00:08:33.159 --> 00:08:38.220
So what you can see here is all
of these simple unit tests

00:08:38.220 --> 00:08:40.020
use the Dart HTML package.

00:08:40.020 --> 00:08:43.360
They test to see certain
classes are added

00:08:43.360 --> 00:08:48.670
appropriately or the element
text is set correctly when

00:08:48.670 --> 00:08:50.370
there's an error et cetera.

00:08:50.370 --> 00:08:54.570
So a lot of times, the way you
would run browser-based tests

00:08:54.570 --> 00:08:59.290
is you would create an HTML
file, and you would link to a

00:08:59.290 --> 00:09:02.460
unit test file that you've added
a main method to that

00:09:02.460 --> 00:09:03.650
invokes your unit tests.

00:09:03.650 --> 00:09:06.230
Very similar if you've done
JS Unit in the past.

00:09:06.230 --> 00:09:10.430
It'll load up the web page and
run your Dart unit test in the

00:09:10.430 --> 00:09:12.240
context of the web page.

00:09:12.240 --> 00:09:16.340
So the question is, how do you
do something like this from a

00:09:16.340 --> 00:09:18.750
command line or in a continuous
integration

00:09:18.750 --> 00:09:21.040
solution like Drone?

00:09:21.040 --> 00:09:25.220
So Dart has a great utility
called Dump Render Tree.

00:09:25.220 --> 00:09:28.340
Dump Render Tree is a headless
version of Chrome.

00:09:28.340 --> 00:09:30.886
It allows you to run your unit
test from the command line and

00:09:30.886 --> 00:09:34.730
it will output them to the
command line so that we can

00:09:34.730 --> 00:09:36.830
look at the output
and analyze it.

00:09:36.830 --> 00:09:41.330
So in this sample project, this
one that we just ran, we

00:09:41.330 --> 00:09:44.520
actually set up a Dump
Render Tree test.

00:09:44.520 --> 00:09:49.580
So we'll replace Dart Analyzer
with Dump Render Tree.

00:09:49.580 --> 00:09:53.140
SETH LADD: Now, do all Dart
Drone builds get Dump Render

00:09:53.140 --> 00:09:55.230
Tree out of the box or is this a
separate config that I would

00:09:55.230 --> 00:09:55.750
have to do?

00:09:55.750 --> 00:09:57.340
BRAD RYDZEWSKI: So this is a
separate config that you would

00:09:57.340 --> 00:09:58.090
have to do.

00:09:58.090 --> 00:09:59.430
And I can pull that up next.

00:09:59.430 --> 00:10:04.640
We added a shell script that
will invoke the unit tests via

00:10:04.640 --> 00:10:05.890
Dump Render Tree.

00:10:12.150 --> 00:10:13.510
SETH LADD: Now, as your typing,
I should mention Dump

00:10:13.510 --> 00:10:15.270
Render Tree, like
Brad said, is a

00:10:15.270 --> 00:10:16.740
headless version of Chrome.

00:10:16.740 --> 00:10:19.010
We also have, it's essentially a
headless version of Dartium,

00:10:19.010 --> 00:10:21.380
which is Chromium with a
Dart virtual machine.

00:10:21.380 --> 00:10:23.320
And this again, is open source
like everything else we're

00:10:23.320 --> 00:10:26.680
doing here, or at least in the
Dart world, and you can get

00:10:26.680 --> 00:10:28.250
Dump Render Tree as a
separate download.

00:10:28.250 --> 00:10:30.050
But, of course, Drone I/O
is going to pack--

00:10:30.050 --> 00:10:32.190
provides this for free for you,
which is really cool.

00:10:32.190 --> 00:10:33.390
BRAD RYDZEWSKI: And so one thing
we need to do in our

00:10:33.390 --> 00:10:35.980
build script that's important,
is we need an X Windows server

00:10:35.980 --> 00:10:39.200
to be running inside of
our virtual machine.

00:10:39.200 --> 00:10:40.580
So I'm going to do
pseudo start.

00:10:44.520 --> 00:10:48.010
And that will start up a
virtual frame buffer.

00:10:48.010 --> 00:10:50.990
I'm going to save the
build script.

00:10:50.990 --> 00:10:52.350
Now, we're going to go
ahead and run this.

00:10:58.390 --> 00:10:59.640
So we see the real
time output.

00:11:02.330 --> 00:11:04.110
And what you can see
here is the output

00:11:04.110 --> 00:11:05.370
of Dump Render Tree.

00:11:05.370 --> 00:11:08.160
So it's actually dumping some
of the elements and their

00:11:08.160 --> 00:11:09.240
positions in the browser.

00:11:09.240 --> 00:11:10.830
You can see that in
the command line.

00:11:10.830 --> 00:11:14.300
You can actually see the output
of the unit tests are

00:11:14.300 --> 00:11:17.030
Dart unit tests so it passed
showing and hiding various

00:11:17.030 --> 00:11:19.696
elements, et cetera.

00:11:19.696 --> 00:11:21.170
SETH LADD: No, walk me through
this a little bit.

00:11:21.170 --> 00:11:23.360
So it's still doing the standard
my codes in GitHub.

00:11:23.360 --> 00:11:25.270
It's going to pull or clone
the repo there.

00:11:25.270 --> 00:11:26.800
Now, where does it get Dump
Render Tree from?

00:11:26.800 --> 00:11:28.250
Do you have a local
cache of that?

00:11:28.250 --> 00:11:28.530
BRAD RYDZEWSKI: Yes.

00:11:28.530 --> 00:11:30.780
So Dump Render Tree is included
when you download the

00:11:30.780 --> 00:11:31.540
Dart Editor.

00:11:31.540 --> 00:11:33.050
The Dump Render Tree executable

00:11:33.050 --> 00:11:34.820
with binaries included.

00:11:34.820 --> 00:11:38.240
That's downloaded automatically
into the virtual

00:11:38.240 --> 00:11:41.210
machine where you're running
your Dart unit test and it's

00:11:41.210 --> 00:11:41.900
part of the path.

00:11:41.900 --> 00:11:44.150
So you can invoke Dump
Render Tree directly.

00:11:44.150 --> 00:11:45.500
SETH LADD: That's probably
why this is so fast.

00:11:45.500 --> 00:11:47.695
You've already download the
environment that we need and

00:11:47.695 --> 00:11:50.030
it's all ready to go.

00:11:50.030 --> 00:11:51.510
So you've done all this
really great work.

00:11:51.510 --> 00:11:53.620
We set up a bunch of projects
here to set up continuous

00:11:53.620 --> 00:11:56.420
integrations, how do we brag to
the world that we've done

00:11:56.420 --> 00:11:59.000
this, we know all the time
whether my project is

00:11:59.000 --> 00:12:00.600
succeeding or not?

00:12:00.600 --> 00:12:02.790
BRAD RYDZEWSKI: So I'm going
to pass this off to Tom.

00:12:02.790 --> 00:12:04.070
TOM BURKE: Thanks.

00:12:04.070 --> 00:12:07.390
So one really easy and effective
way to do that is

00:12:07.390 --> 00:12:09.890
through what we call
Build Status Badge.

00:12:09.890 --> 00:12:15.170
So I've just pulled up one of
our projects that's in GitHub

00:12:15.170 --> 00:12:15.720
that has it.

00:12:15.720 --> 00:12:19.560
So you can see right here it
says, passing on Drone I/O.

00:12:19.560 --> 00:12:22.600
And all you have to do to get
this for one of your projects

00:12:22.600 --> 00:12:27.670
is you go into Drone I/O, you
go to your Project Settings,

00:12:27.670 --> 00:12:31.730
and under Badges, we give
you a couple of links.

00:12:31.730 --> 00:12:35.380
And these are just links that
you can put on your home page

00:12:35.380 --> 00:12:37.080
of your project or
the mark down.

00:12:37.080 --> 00:12:41.390
So if you have a read me MD
file in PUB or GitHub or

00:12:41.390 --> 00:12:44.110
Bitbucket, you would simply just
cut and paste this right

00:12:44.110 --> 00:12:45.870
into your read me.

00:12:45.870 --> 00:12:49.140
And then, from there on, every
time a build kicks off, this

00:12:49.140 --> 00:12:51.140
will automatically
change the image.

00:12:51.140 --> 00:12:51.630
SETH LADD: I love that.

00:12:51.630 --> 00:12:54.080
And so if you put it in the read
me of your project, it

00:12:54.080 --> 00:12:56.330
shows up, not only in GitHub as
you're seeing here, but now

00:12:56.330 --> 00:13:00.700
PUB, which hosts or can host
packages for Dart, also can

00:13:00.700 --> 00:13:03.310
display the read me, and so you
get your badge basically

00:13:03.310 --> 00:13:05.590
anywhere your read me is,
which is really cool.

00:13:05.590 --> 00:13:06.160
TOM BURKE: And it's nice too.

00:13:06.160 --> 00:13:09.100
If you click on the badge, it
takes you right to the latest

00:13:09.100 --> 00:13:11.990
build output that generated
that status.

00:13:11.990 --> 00:13:13.830
SETH LADD: So you mentioned
continuous integration is much

00:13:13.830 --> 00:13:15.670
more than just testing, right?

00:13:15.670 --> 00:13:18.820
There's a whole bunch of
post-testing workflow steps.

00:13:18.820 --> 00:13:21.780
One, probably most important,
is deploy, and I think Drone

00:13:21.780 --> 00:13:23.510
can also drive a deploy
step, too.

00:13:23.510 --> 00:13:26.330
Can you show us how I might,
after tests have succeeded,

00:13:26.330 --> 00:13:28.160
what else I can do
with my code?

00:13:28.160 --> 00:13:31.380
TOM BURKE: One of the things we
find extremely productive

00:13:31.380 --> 00:13:33.460
is to automate our
deployments.

00:13:33.460 --> 00:13:37.150
So if you go to your project
in drone, and you go to

00:13:37.150 --> 00:13:40.070
Services, you'll notice there's
a couple of deployment

00:13:40.070 --> 00:13:40.760
targets right now.

00:13:40.760 --> 00:13:45.530
So right now, I'll just show you
how to deploy to Heroku.

00:13:45.530 --> 00:13:49.300
Now, to deploy to Heroku, you'll
have to have a Drone

00:13:49.300 --> 00:13:55.510
application that has both a
server and a client part.

00:13:55.510 --> 00:13:57.950
So I'm just going to pull
up a sample right here.

00:14:00.840 --> 00:14:05.210
Really, the first step to
getting your Dart application

00:14:05.210 --> 00:14:11.080
ready for Heroku is you have to
listen on a very specific

00:14:11.080 --> 00:14:11.930
address and port.

00:14:11.930 --> 00:14:17.450
So in the case of Heroku, it's
IP address 0000 and they're

00:14:17.450 --> 00:14:20.010
going to pass in the port
parameter and an

00:14:20.010 --> 00:14:21.930
environmental variable.

00:14:21.930 --> 00:14:23.080
SETH LADD: So let's be
really clear about

00:14:23.080 --> 00:14:23.700
what's happening here.

00:14:23.700 --> 00:14:26.540
So Dart, of course, is a
language that compiles to

00:14:26.540 --> 00:14:29.340
JavaScript for modern browser
deployments, but also runs in

00:14:29.340 --> 00:14:30.320
its own virtual machine.

00:14:30.320 --> 00:14:32.250
And once you have your own
virtual machine, you can run

00:14:32.250 --> 00:14:33.000
that anywhere.

00:14:33.000 --> 00:14:34.500
You can run that, of course,
in the browser, but you can

00:14:34.500 --> 00:14:35.570
run it on the server.

00:14:35.570 --> 00:14:37.550
And so that's what's actually
powering this.

00:14:37.550 --> 00:14:40.330
We're going to put the Dart VM,
which runs a web server

00:14:40.330 --> 00:14:41.570
here, onto Heroku.

00:14:41.570 --> 00:14:42.020
TOM BURKE: Yeah.

00:14:42.020 --> 00:14:47.400
Yeah, so its Heroku running the
web server, serving the

00:14:47.400 --> 00:14:49.800
client, which is also written
in Dart, and in the case of

00:14:49.800 --> 00:14:53.340
the demo I'm showing you, I
pulled the countdown clock

00:14:53.340 --> 00:14:56.110
from the Dart SDK samples.

00:14:56.110 --> 00:14:59.400
So you're going to make this
change and check your code.

00:14:59.400 --> 00:15:03.590
And then you would go to the
command line and run a couple

00:15:03.590 --> 00:15:06.280
of Heroku commands
to create an app.

00:15:18.520 --> 00:15:20.695
So I'm just--

00:15:20.695 --> 00:15:21.945
can I do that right here?

00:15:25.620 --> 00:15:28.830
So the first command, and
Heroku has got great

00:15:28.830 --> 00:15:30.650
documentation, I'm not going
to do much on this.

00:15:30.650 --> 00:15:37.280
You just run a Heroku create
your app name, and this

00:15:37.280 --> 00:15:40.980
complained about a name that
was already taken, so I'll

00:15:40.980 --> 00:15:43.470
just run that again.

00:15:43.470 --> 00:15:48.500
And then, I'm going to go to one
that I've already done a

00:15:48.500 --> 00:15:51.060
little bit of the set up.

00:15:51.060 --> 00:15:54.160
So you create your app, then
you-- because it Dart--

00:15:54.160 --> 00:15:56.300
Heroku requires you to
have what we call

00:15:56.300 --> 00:15:58.190
a Dart build pack.

00:15:58.190 --> 00:16:00.100
So that's this command
here, Heroku config

00:16:00.100 --> 00:16:02.030
add, the build pack.

00:16:02.030 --> 00:16:04.700
SETH LADD: And the build pack is
actually what connects your

00:16:04.700 --> 00:16:06.540
Dart source code to
the Dart virtual

00:16:06.540 --> 00:16:07.850
machine and its run time.

00:16:07.850 --> 00:16:10.910
TOM BURKE: Yeah, it explains
to Heroku what to do if

00:16:10.910 --> 00:16:14.142
someone deploys a Dart
based app to it.

00:16:14.142 --> 00:16:15.920
All right, so I did that.

00:16:15.920 --> 00:16:18.700
Now, you have your Heroku app
created at this point.

00:16:18.700 --> 00:16:21.060
It's set up to work with Dart.

00:16:21.060 --> 00:16:24.310
The issue now is how
do we get Drone to

00:16:24.310 --> 00:16:26.420
communicate with Heroku?

00:16:26.420 --> 00:16:29.110
So to do that, we go back into
Drone, you pull up your

00:16:29.110 --> 00:16:33.150
project, you go to Services,
Heroku, you download the

00:16:33.150 --> 00:16:33.980
deployment key.

00:16:33.980 --> 00:16:36.110
So I'm going to click that right
now and that downloaded

00:16:36.110 --> 00:16:38.010
a deployment key to my laptop.

00:16:42.070 --> 00:16:47.250
Now, I go back into where I
created my app and I run the

00:16:47.250 --> 00:16:50.010
simple command to add the key
I just downloaded, so this

00:16:50.010 --> 00:16:54.650
uploads an SSH key to Heroku,
and, at this point, what this

00:16:54.650 --> 00:17:00.690
means is Drone should be
able to deploy your app

00:17:00.690 --> 00:17:01.930
automatically.

00:17:01.930 --> 00:17:05.250
So the last step back in Drone
is make sure that in the

00:17:05.250 --> 00:17:09.339
Heroku deployment, it gives
a URL for Heroku.

00:17:09.339 --> 00:17:12.465
And I'm going to paste in the
one I just created and Save.

00:17:15.210 --> 00:17:23.700
Now, when I go to Build, this
is going to, again, like

00:17:23.700 --> 00:17:26.640
Brad's previous demos, it's
going to take your code, check

00:17:26.640 --> 00:17:30.400
it out to a clean VM, and then,
if you had unit tests,

00:17:30.400 --> 00:17:33.690
assuming they pass, it will
then proceed to push this

00:17:33.690 --> 00:17:35.200
whole thing out to Heroku.

00:17:35.200 --> 00:17:35.790
SETH LADD: That's awesome.

00:17:35.790 --> 00:17:38.150
So it won't deploy unless
everything is working, which

00:17:38.150 --> 00:17:39.030
is the whole idea.

00:17:39.030 --> 00:17:40.280
That's great.

00:17:43.450 --> 00:17:45.370
I think what it's doing now is
it's actually downloaded the

00:17:45.370 --> 00:17:48.670
Dart SDK and submerging it up
with the code that you're

00:17:48.670 --> 00:17:51.880
actually getting from GitHub,
or in this case, the Heroku

00:17:51.880 --> 00:17:53.200
Get repository.

00:17:53.200 --> 00:17:54.090
TOM BURKE: So this finished.

00:17:54.090 --> 00:17:57.960
So in the build output, Heroku
actually gives you a little

00:17:57.960 --> 00:18:00.920
link to the app you just
deployed, so I'm just going to

00:18:00.920 --> 00:18:03.760
pull that up in the browser
to show you.

00:18:07.340 --> 00:18:09.660
So you can see this is
the countdown clock.

00:18:09.660 --> 00:18:11.230
SETH LADD: That's awesome.

00:18:11.230 --> 00:18:13.430
TOM BURKE: Server side
in Dart, serving

00:18:13.430 --> 00:18:15.110
a Dart-based client.

00:18:15.110 --> 00:18:17.910
That's pretty cool how easy
it is to get that working.

00:18:17.910 --> 00:18:18.620
SETH LADD: That was great.

00:18:18.620 --> 00:18:21.880
So you start with the code in
GitHub and you add some tests,

00:18:21.880 --> 00:18:23.960
and then you configure it into
Drone, which then runs the

00:18:23.960 --> 00:18:26.310
test, so that works, so you
published into Heroku.

00:18:26.310 --> 00:18:28.350
And then, you can show the
badge right back on your

00:18:28.350 --> 00:18:30.810
project, and it seems like a
whole life cycle here can be

00:18:30.810 --> 00:18:32.140
driven off of Drone.

00:18:32.140 --> 00:18:34.520
And it Dart every step.

00:18:34.520 --> 00:18:37.440
TOM BURKE: One last part I was
going to mention about

00:18:37.440 --> 00:18:39.760
deploying to Heroku.

00:18:39.760 --> 00:18:43.050
If you're developing in Dart,
you are often going to need to

00:18:43.050 --> 00:18:47.430
run Dart to JS as part of making
an app that's usable by

00:18:47.430 --> 00:18:48.760
more than just Dartium.

00:18:48.760 --> 00:18:51.900
So it's really easy to
do, again, in Drone.

00:18:51.900 --> 00:18:55.490
So right now, we just had PUB
installed, but there's this

00:18:55.490 --> 00:18:58.252
little snippet of code,
and we'll share this.

00:18:58.252 --> 00:19:03.460
If you just add this to your
build script in Drone, it runs

00:19:03.460 --> 00:19:07.800
Dart to JS, which creates some
new JavaScript files.

00:19:07.800 --> 00:19:10.770
And then a couple Git commands,
take those new files

00:19:10.770 --> 00:19:14.840
and add them, commit them,
because Heroku uses Git also,

00:19:14.840 --> 00:19:18.860
so this is going to commit them
and then deploy your app

00:19:18.860 --> 00:19:22.140
on the next build with all
the JavaScript files

00:19:22.140 --> 00:19:23.390
automatically generated.

00:19:23.390 --> 00:19:23.900
SETH LADD: That's awesome.

00:19:23.900 --> 00:19:25.880
And I think that this is going
to get a little bit easier

00:19:25.880 --> 00:19:28.240
when we have again, this kind
of prescriptive build tool,

00:19:28.240 --> 00:19:30.760
and we can build targets so an
open source community can

00:19:30.760 --> 00:19:34.505
introduce their own targets, to
help with this to make it a

00:19:34.505 --> 00:19:37.710
little bit more terse,
which is cool.

00:19:37.710 --> 00:19:39.870
TOM BURKE: And this is, again,
this is just the real time

00:19:39.870 --> 00:19:44.990
output showing it pushing
to Heroku.

00:19:44.990 --> 00:19:45.760
SETH LADD: Very cool.

00:19:45.760 --> 00:19:48.340
Wow, so we saw a lot of awesome
demos and it was so

00:19:48.340 --> 00:19:50.700
quick, it's almost too easy.

00:19:50.700 --> 00:19:51.170
Great work.

00:19:51.170 --> 00:19:54.350
So what else is coming up
for Dart and Drone?

00:19:54.350 --> 00:19:55.640
What's on your road map?

00:19:55.640 --> 00:19:57.210
BRAD RYDZEWSKI: So
a couple things.

00:19:57.210 --> 00:20:00.500
We've got a big release coming
up, and one of the things that

00:20:00.500 --> 00:20:03.020
we're looking to provide is the
ability to automatically

00:20:03.020 --> 00:20:06.510
build your or automatically
trigger your builds every time

00:20:06.510 --> 00:20:09.430
a new version of Dart
is available.

00:20:09.430 --> 00:20:10.420
So proactively.

00:20:10.420 --> 00:20:13.370
So let's say, for example, when
the new weekly release

00:20:13.370 --> 00:20:16.700
comes out, it'll automatically
build all your Drone projects

00:20:16.700 --> 00:20:19.580
for you, and let you know
if there's any issues.

00:20:19.580 --> 00:20:22.620
SETH LADD: Now, that's huge,
because as we near 1.0, we're

00:20:22.620 --> 00:20:24.330
making all the changes now.

00:20:24.330 --> 00:20:26.820
So we're kind of in a bumpy spot
right now, and so to have

00:20:26.820 --> 00:20:29.340
this kind of proactive build
system all hooked up to the

00:20:29.340 --> 00:20:32.670
analyzer unit tests, can tell
you ahead of time what you

00:20:32.670 --> 00:20:35.000
need to do to stay on top of
these Dart releases as we get

00:20:35.000 --> 00:20:36.160
to that 1.0 milestone.

00:20:36.160 --> 00:20:37.640
BRAD RYDZEWSKI: Absolutely.

00:20:37.640 --> 00:20:39.180
The second thing we want
to do is deeper

00:20:39.180 --> 00:20:40.430
integration with PUB.

00:20:40.430 --> 00:20:43.210
So you saw how we could auto
deploy a web application with

00:20:43.210 --> 00:20:44.990
Heroku, but we want
to support people

00:20:44.990 --> 00:20:46.720
developing libraries too.

00:20:46.720 --> 00:20:49.770
So one thing that we can do is
when your build passes and all

00:20:49.770 --> 00:20:52.570
your unit tests are successful,
we can actually

00:20:52.570 --> 00:20:55.670
published to PUB automatically
for you.

00:20:55.670 --> 00:20:57.020
And PUB will always have
the latest and

00:20:57.020 --> 00:20:58.310
greatest of your code.

00:20:58.310 --> 00:21:00.290
SETH LADD: Again, more
of the life cycle.

00:21:00.290 --> 00:21:01.850
I really like it.

00:21:01.850 --> 00:21:03.520
Well, how do I sign
up for Drone?

00:21:03.520 --> 00:21:05.470
What do I get out of the box?

00:21:05.470 --> 00:21:06.250
How do I get started?

00:21:06.250 --> 00:21:08.800
BRAD RYDZEWSKI: So you could
just go to Drone.IO.

00:21:08.800 --> 00:21:11.490
It's free, completely free,
for open source projects.

00:21:11.490 --> 00:21:13.890
So it works with GitHub,
like you saw.

00:21:13.890 --> 00:21:17.850
It also works with Bitbucket
and Google code.

00:21:17.850 --> 00:21:20.230
And then, if you have private
projects that you would like

00:21:20.230 --> 00:21:25.120
to build, it also works with
that and it's cheaper than

00:21:25.120 --> 00:21:28.220
hosting your own Jenkins and
much easier to get started.

00:21:28.220 --> 00:21:29.660
SETH LADD: That's for sure.

00:21:29.660 --> 00:21:32.290
Awesome, so highly recommended
to all the Dart authors out

00:21:32.290 --> 00:21:34.480
there, and not just for Dart,
of course, if you're running

00:21:34.480 --> 00:21:37.660
any open source project or
private project, and you need

00:21:37.660 --> 00:21:40.330
continuous integration,
check out Drone.

00:21:40.330 --> 00:21:42.120
They're definitely
on the edge.

00:21:42.120 --> 00:21:43.530
Thanks, guys, for coming in.

00:21:43.530 --> 00:21:46.570
Go to Drone.IO to learn more,
and we thank you for watching

00:21:46.570 --> 00:21:48.070
this episode of Dartisans.

00:21:48.070 --> 00:21:50.900
We'll see you in the Dart
mailing list, Stack Overflow,

00:21:50.900 --> 00:21:53.380
and Google+, and thanks
for watching.

00:21:53.380 --> 00:21:54.960
We'll see you next time.

00:21:54.960 --> 00:21:56.210
Thanks, guys.

