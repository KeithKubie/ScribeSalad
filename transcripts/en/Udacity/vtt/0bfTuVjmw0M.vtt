WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:02.240
Okay Michael, you think you know the answer?

00:00:02.240 --> 00:00:04.570
&gt;&gt; I do. So, if you hadn't said, yeah, up

00:00:04.570 --> 00:00:07.800
until the very end I was thinking along, different lines. So,

00:00:07.800 --> 00:00:10.060
if it's the case that we just want to choose, if,

00:00:10.060 --> 00:00:14.920
if this f thing that is scoring is say, constant, then

00:00:14.920 --> 00:00:16.830
choosing the best subset is easy, I can just choose

00:00:16.830 --> 00:00:19.800
any subset I want. But you said then, it could actually

00:00:19.800 --> 00:00:23.220
be arbitrary and it is unknown. So the only way

00:00:23.220 --> 00:00:26.210
that I can know that I have the best scoring subset

00:00:26.210 --> 00:00:30.310
is if I try all the subsets. And there's an exponential

00:00:30.310 --> 00:00:33.630
number of subsets. So I'm going, I would go with exponential.

00:00:33.630 --> 00:00:38.230
&gt;&gt; That's correct exactly what is the, the form of the exponential?

00:00:38.230 --> 00:00:40.740
&gt;&gt; Oh, I want to say n choose m.

00:00:40.740 --> 00:00:43.410
&gt;&gt; Yeah, but you don't actually even know what m is. N

00:00:43.410 --> 00:00:47.460
choose m, n choose m is right and it gives you an exponential.

00:00:47.460 --> 00:00:48.970
&gt;&gt; Good, alright. Thanks very much.

00:00:48.970 --> 00:00:51.600
&gt;&gt; But, the other way is if you don't what

00:00:51.600 --> 00:00:55.410
m is before you start. Then, it's just 2 to the n.

00:00:55.410 --> 00:00:57.520
&gt;&gt; It's hard for me to imagine what that

00:00:57.520 --> 00:00:59.180
means given that you made that part of the

00:00:59.180 --> 00:01:01.420
input. If you mean just the best subset, then

00:01:01.420 --> 00:01:02.890
yeah there's 2 to the n subsets. I agree.

00:01:02.890 --> 00:01:04.178
&gt;&gt; So either one's fine because it gives

00:01:04.178 --> 00:01:06.430
you the same answer. Sometimes we say, we

00:01:06.430 --> 00:01:09.930
want half as many or, we want no more than half as many, and sometimes we

00:01:09.930 --> 00:01:13.230
say we don't know what the best subset is. You figure it out. So this becomes

00:01:13.230 --> 00:01:14.540
like a kind of clustering problem in its

00:01:14.540 --> 00:01:17.110
own way except you don't know what k is.

00:01:17.110 --> 00:01:20.200
But the other way of thinking about this is that of course this problem is hard,

00:01:20.200 --> 00:01:23.320
of course it's exponential, it is effectively an

00:01:23.320 --> 00:01:26.300
optimization problem over a set of arbitrary discreet variables.

00:01:26.300 --> 00:01:28.110
&gt;&gt; That's how I was thinking about it

00:01:28.110 --> 00:01:29.990
because we always seem to come back to that.

00:01:29.990 --> 00:01:32.615
&gt;&gt; Right and in fact this problem is known to be

00:01:32.615 --> 00:01:37.100
NP-hard. And it's exactly because you have to find all possible

00:01:37.100 --> 00:01:39.690
subsets, so they match the three set. I will not prove

00:01:39.690 --> 00:01:41.930
that but it does turn out that this is, in fact,

00:01:41.930 --> 00:01:45.130
exactly the hard problem that you think it is. So given

00:01:45.130 --> 00:01:47.930
this, and, and by the way, of course, of course this problem

00:01:47.930 --> 00:01:51.490
is hard. Because if this problem weren't hard then most machine learning

00:01:51.490 --> 00:01:54.770
would be pretty easy. So, it's not that big of a, it's

00:01:54.770 --> 00:01:57.850
not that, it's not that surprising that the problem is difficult,

00:01:57.850 --> 00:01:59.600
so the real question we have in front of us is given

00:01:59.600 --> 00:02:03.300
that we've got yet another really difficult problem, in fact, a difficult

00:02:03.300 --> 00:02:07.190
optimization problem, how might we go about tackling it? And it turns

00:02:07.190 --> 00:02:11.100
out that there are two ways in general that people try to approach this problem.

