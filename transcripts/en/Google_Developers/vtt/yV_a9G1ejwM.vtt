WEBVTT
Kind: captions
Language: en

00:00:14.610 --> 00:00:16.800
JJ BEHRENS: Hi, I'm JJ
Behrens and this is

00:00:16.800 --> 00:00:18.860
Dartisans Episode Nine.

00:00:18.860 --> 00:00:20.560
So we've got a pretty
awesome show today.

00:00:20.560 --> 00:00:24.950
We have Johnni Winther from
Aarhus, Denmark, and he works

00:00:24.950 --> 00:00:26.190
on Dart to JS.

00:00:26.190 --> 00:00:27.785
Welcome to California.

00:00:27.785 --> 00:00:29.420
How do you like the
weather out here?

00:00:29.420 --> 00:00:31.340
JOHNNI WINTHER: Oh, it's fine.

00:00:31.340 --> 00:00:34.340
JJ BEHRENS: It's pretty
awesome, huh?

00:00:34.340 --> 00:00:36.870
Is it cold in Denmark at
this time of year?

00:00:36.870 --> 00:00:38.090
JOHNNI WINTHER: No, it's
not cold, but it's

00:00:38.090 --> 00:00:39.560
not as hot as here.

00:00:39.560 --> 00:00:41.360
The sun is really baking here.

00:00:41.360 --> 00:00:44.440
I was fortunate not to
bring any jackets.

00:00:44.440 --> 00:00:46.150
Didn't need it.

00:00:46.150 --> 00:00:49.500
JJ BEHRENS: Does the sun ever go
down at this time of year?

00:00:49.500 --> 00:00:50.170
JOHNNI WINTHER: In Denmark?

00:00:50.170 --> 00:00:50.850
JJ BEHRENS: In Denmark.

00:00:50.850 --> 00:00:51.500
JOHNNI WINTHER: It does.

00:00:51.500 --> 00:00:54.130
You have to live much
further north in

00:00:54.130 --> 00:00:55.170
order to observe that.

00:00:55.170 --> 00:00:59.430
That's in northern Norway, and
that is a thousand kilometers

00:00:59.430 --> 00:00:59.950
from Denmark.

00:00:59.950 --> 00:01:02.730
So yeah, it does go down,
at the same time as

00:01:02.730 --> 00:01:04.819
around here, somewhat.

00:01:04.819 --> 00:01:06.360
JJ BEHRENS: So, great, we're
going to talk to him about

00:01:06.360 --> 00:01:09.810
Dart to JS, and we also have
Todd Turnidge, who works on

00:01:09.810 --> 00:01:12.750
the VM team here in Mountain
View, California.

00:01:12.750 --> 00:01:15.040
And we're going to talk about
mirrors for reflection

00:01:15.040 --> 00:01:18.130
isolates, the embedding API,
some security stuff,

00:01:18.130 --> 00:01:20.270
everything we could
possibly cram in.

00:01:20.270 --> 00:01:21.010
TODD TURNIDGE: OK.

00:01:21.010 --> 00:01:22.030
JJ BEHRENS: How do you
feel about that?

00:01:22.030 --> 00:01:22.550
TODD TURNIDGE: Sounds good.

00:01:22.550 --> 00:01:24.285
It's the stuff I work on,
so hopefully I'm ready

00:01:24.285 --> 00:01:24.890
to talk about it.

00:01:24.890 --> 00:01:27.110
JJ BEHRENS: How you feel
about Aarhus, Denmark?

00:01:27.110 --> 00:01:28.690
TODD TURNIDGE: I've
never been.

00:01:28.690 --> 00:01:30.220
But I like the weather
here just fine.

00:01:30.220 --> 00:01:32.390
JJ BEHRENS: Yeah, we
should fix that.

00:01:32.390 --> 00:01:35.600
So let's start off with
some Dart news.

00:01:35.600 --> 00:01:37.590
Seth compiled these for me.

00:01:37.590 --> 00:01:39.420
Sam McCall released
a Dart library

00:01:39.420 --> 00:01:40.970
for Google API services.

00:01:40.970 --> 00:01:43.090
So this is totally huge.

00:01:43.090 --> 00:01:46.360
APIs for Blogger, AdSense
Calendar, URL Shortener and so

00:01:46.360 --> 00:01:49.010
many more, including YouTube,
which is where I came from.

00:01:49.010 --> 00:01:51.790
This is kind of alpha
software, but try

00:01:51.790 --> 00:01:53.120
it out, let us know.

00:01:53.120 --> 00:01:55.820
Go to code.google.com/
p/google-api-dart-client.

00:01:59.750 --> 00:02:03.470
We are now up to four books
on Dart, which kind of

00:02:03.470 --> 00:02:05.450
completely amazes me.

00:02:05.450 --> 00:02:06.610
So go check them out.

00:02:06.610 --> 00:02:09.639
Those are at
www.dartlang.org/books.

00:02:09.639 --> 00:02:14.470
And we started meeting about
stuff that's going to happen

00:02:14.470 --> 00:02:17.160
after the M1 release, so
that's pretty exciting.

00:02:17.160 --> 00:02:18.830
We're looking forward.

00:02:18.830 --> 00:02:21.500
Nothing concrete's happening
quite yet, but here's some

00:02:21.500 --> 00:02:22.410
stuff we're thinking about.

00:02:22.410 --> 00:02:26.250
We're thinking about async,
mix-ins, dynamic loading.

00:02:26.250 --> 00:02:29.180
I know async is one of my
favorite topics, so we'll see

00:02:29.180 --> 00:02:30.720
how that all goes.

00:02:30.720 --> 00:02:33.960
We now have 64-bit binaries
for the SDK.

00:02:33.960 --> 00:02:34.900
Everyone rejoice.

00:02:34.900 --> 00:02:40.720
The editor build also includes
the 64-bit SDKs and Linux

00:02:40.720 --> 00:02:42.960
users have been asking for this
for a while, so we're

00:02:42.960 --> 00:02:46.440
always happy to make
our users happier.

00:02:46.440 --> 00:02:49.750
Dart Editor now looks inside the
query method for some code

00:02:49.750 --> 00:02:51.460
completions, and that's
pretty neat.

00:02:51.460 --> 00:02:54.530
If the CSS selector includes a
tag name, the variable might

00:02:54.530 --> 00:02:57.110
get some type referencing,
which--

00:02:57.110 --> 00:02:58.860
those Dart Editor guys,
I don't know how they

00:02:58.860 --> 00:03:02.230
do stuff like that.

00:03:02.230 --> 00:03:06.050
For instance, if you do a query
for an input tag, the

00:03:06.050 --> 00:03:08.970
Dart Editor might be able to
infer that the thing that

00:03:08.970 --> 00:03:11.120
you're going to get back
is an input element.

00:03:11.120 --> 00:03:13.380
So that's pretty cool.

00:03:13.380 --> 00:03:16.090
Method cascades are now
implemented across the VM.

00:03:16.090 --> 00:03:18.310
Dart to JS and the analyzer--

00:03:18.310 --> 00:03:19.340
did you have to work on that?

00:03:19.340 --> 00:03:20.330
TODD TURNIDGE: I did not.

00:03:20.330 --> 00:03:22.035
JJ BEHRENS: Well, I'm not going
to talk to you about

00:03:22.035 --> 00:03:24.360
that anymore.

00:03:24.360 --> 00:03:27.460
So that's great for use cases
like setting up a DOM element

00:03:27.460 --> 00:03:30.420
with a bunch of setters.

00:03:30.420 --> 00:03:33.020
I like the fact that we're
throwing in a little bit of

00:03:33.020 --> 00:03:37.000
syntactic niceness to solve
a bunch of use cases.

00:03:37.000 --> 00:03:38.700
Just the write of syntax
can really

00:03:38.700 --> 00:03:42.560
change the way you code.

00:03:42.560 --> 00:03:45.390
Imagine if you had jQuery and
you weren't allowed to chain

00:03:45.390 --> 00:03:46.360
methods together.

00:03:46.360 --> 00:03:50.090
It would be very painful.

00:03:50.090 --> 00:03:51.030
TODD TURNIDGE: Details matter
with this thing.

00:03:51.030 --> 00:03:53.340
JJ BEHRENS: Details
matter a lot.

00:03:53.340 --> 00:03:56.400
So if you haven't seen it yet,
Dart engineer Bob Nystrom made

00:03:56.400 --> 00:03:59.980
a great screencast called
"Dart's Evil Plan to Make It

00:03:59.980 --> 00:04:03.950
Easier For You to Build Web
Apps." I don't know why that's

00:04:03.950 --> 00:04:05.660
an evil plan.

00:04:05.660 --> 00:04:07.660
That was kind of like
the global plan.

00:04:07.660 --> 00:04:08.380
TODD TURNIDGE: Maybe
it's aspirational.

00:04:08.380 --> 00:04:10.230
Maybe he aspires to be evil.

00:04:10.230 --> 00:04:11.905
He's actually a pretty
nice guy.

00:04:11.905 --> 00:04:12.930
He'll have to work at it.

00:04:12.930 --> 00:04:15.210
JJ BEHRENS: He's going to have
to work on being evil.

00:04:15.210 --> 00:04:20.440
So Bob ponders if he'll make
a good supervillain.

00:04:20.440 --> 00:04:23.870
I'm guessing not if he's trying
to make the Web better,

00:04:23.870 --> 00:04:27.000
but we'll talk to
him about that.

00:04:27.000 --> 00:04:29.400
So interest in web components
is heating up.

00:04:29.400 --> 00:04:32.520
The Dart team is looking at how
to build and consume web

00:04:32.520 --> 00:04:34.070
components with Dart.

00:04:34.070 --> 00:04:36.300
That's super exciting, I've been
in a bunch of meetings

00:04:36.300 --> 00:04:38.610
lately about that and--

00:04:38.610 --> 00:04:40.110
totally awesome.

00:04:40.110 --> 00:04:42.780
And so if you want to get up to
speed with web components,

00:04:42.780 --> 00:04:45.420
you could watch a video from
Google I/O titled "The Web

00:04:45.420 --> 00:04:48.510
Platform's Cutting Edge." I know
I've got to watch that,

00:04:48.510 --> 00:04:50.050
because I'm a little bit
behind on the game.

00:04:50.050 --> 00:04:52.140
I always focus so much
on Dart and maybe not

00:04:52.140 --> 00:04:53.270
enough on the Web.

00:04:53.270 --> 00:04:54.840
So we'll see.

00:04:54.840 --> 00:04:59.510
OK, so how do you feel about
telling us about Dart to JS?

00:04:59.510 --> 00:05:03.290
And tell us about the team in
Aarhus, because that's a long

00:05:03.290 --> 00:05:05.350
way from here.

00:05:05.350 --> 00:05:06.450
Who's out there?

00:05:06.450 --> 00:05:06.930
JOHNNI WINTHER: Who's
out there.

00:05:06.930 --> 00:05:09.180
Well, currently a lot
of people, actually.

00:05:09.180 --> 00:05:11.830
We've put a lot of
resources, human

00:05:11.830 --> 00:05:13.460
resources, into the project.

00:05:13.460 --> 00:05:16.900
I'm fairly new to the
project, two months.

00:05:16.900 --> 00:05:22.230
But now the core is six guys.

00:05:22.230 --> 00:05:27.130
We have included some of the
guys from the I/O to work on

00:05:27.130 --> 00:05:30.580
something that is at least
related to Dart to Js.

00:05:30.580 --> 00:05:33.430
They tend to be put where it's
needed the most, and that

00:05:33.430 --> 00:05:36.070
shifts as we get progress.

00:05:36.070 --> 00:05:37.020
JJ BEHRENS: It's weird.

00:05:37.020 --> 00:05:40.220
I think of the Glasgow Haskell
compiler, and I think of

00:05:40.220 --> 00:05:43.410
Aarhus, with Lars Bak and V8.

00:05:43.410 --> 00:05:45.980
There are these weird far-north
nations where

00:05:45.980 --> 00:05:48.320
apparently people don't come
out in the winter and then

00:05:48.320 --> 00:05:49.940
write this amazing software.

00:05:49.940 --> 00:05:52.260
I mean, isn't that where
Linux came from?

00:05:52.260 --> 00:05:53.030
JOHNNI WINTHER: Yeah.

00:05:53.030 --> 00:05:54.780
Even further north.

00:05:54.780 --> 00:05:58.550
JJ BEHRENS: So you guys just
stay inside all winter long

00:05:58.550 --> 00:06:00.470
and just write amazing
software?

00:06:00.470 --> 00:06:02.030
JOHNNI WINTHER: It could be
that's the reason why.

00:06:02.030 --> 00:06:05.400
It seems to be that there's a
really great reason for making

00:06:05.400 --> 00:06:07.590
languages in the north, both in

00:06:07.590 --> 00:06:09.460
Denmark Norway, and Finland.

00:06:12.870 --> 00:06:14.240
For some reason, it could be.

00:06:14.240 --> 00:06:16.650
Well, it's not that cold,
it's just not

00:06:16.650 --> 00:06:18.020
interesting to be outside.

00:06:18.020 --> 00:06:18.850
JJ BEHRENS: It's not
interesting.

00:06:18.850 --> 00:06:21.940
JOHNNI WINTHER: No, in Denmark
we do not have snow, really.

00:06:21.940 --> 00:06:26.580
We just have gray weather, which
is cold and annoying but

00:06:26.580 --> 00:06:29.810
mostly just uninteresting.

00:06:29.810 --> 00:06:32.030
Well, further north you
know you have snow.

00:06:32.030 --> 00:06:33.400
You don't do that in Denmark.

00:06:33.400 --> 00:06:35.600
JJ BEHRENS: And so you're
working on Dart to JS?

00:06:35.600 --> 00:06:40.100
What particular things are you
working on in Dart to JS?

00:06:40.100 --> 00:06:41.460
How are you using it?

00:06:41.460 --> 00:06:43.130
Are you doing something
with Dart Docs or

00:06:43.130 --> 00:06:43.730
something like that?

00:06:43.730 --> 00:06:46.070
JOHNNI WINTHER: Yes, my first
assignment was to

00:06:46.070 --> 00:06:46.860
look at Dart Docs.

00:06:46.860 --> 00:06:51.630
It was using the previous
version of the compiler, the

00:06:51.630 --> 00:06:54.670
Frog compiler, and I've
updated it so it now

00:06:54.670 --> 00:06:55.950
uses Dart to JS.

00:06:55.950 --> 00:07:00.750
And now we are all clear and
can go forward on the new

00:07:00.750 --> 00:07:04.710
compiler, on one compiler
for a language.

00:07:04.710 --> 00:07:06.790
So that's been updated.

00:07:06.790 --> 00:07:09.720
In that process we've got a
lot of work on the mirror

00:07:09.720 --> 00:07:13.340
system, which I've done
together with Todd.

00:07:13.340 --> 00:07:17.630
Actually exploring what is
needed for the compile time

00:07:17.630 --> 00:07:20.520
part of it, seeing what
we need to inspect.

00:07:20.520 --> 00:07:24.700
Classes and members of types and
all these relations, to be

00:07:24.700 --> 00:07:27.620
able to produce the
documentation.

00:07:27.620 --> 00:07:30.800
JJ BEHRENS: So I wasn't on
the team that long ago.

00:07:30.800 --> 00:07:35.460
So can you remind newbies like
me why was it necessary to go

00:07:35.460 --> 00:07:38.700
from Frog to Dart to JS?

00:07:38.700 --> 00:07:40.250
What changed?

00:07:40.250 --> 00:07:41.950
JOHNNI WINTHER: From
Frog to Dart to JS?

00:07:41.950 --> 00:07:44.040
Well, I don't know.

00:07:44.040 --> 00:07:45.140
JJ BEHRENS: We got
another new guy.

00:07:45.140 --> 00:07:46.920
JOHNNI WINTHER: Because
that was prior to me.

00:07:46.920 --> 00:07:49.560
I came in the process of saying,
we are already moving

00:07:49.560 --> 00:07:51.270
towards that.

00:07:51.270 --> 00:07:54.670
And I'm part of that process
of moving forward.

00:07:54.670 --> 00:07:56.310
JJ BEHRENS: So, Mirrors.

00:07:56.310 --> 00:07:59.120
These are for reflection, and
you guys have both been

00:07:59.120 --> 00:08:00.890
working on mirrors.

00:08:00.890 --> 00:08:03.440
What are mirrors going
to allow us to do?

00:08:03.440 --> 00:08:06.330
JOHNNI WINTHER: Well, we
really have two aspects

00:08:06.330 --> 00:08:10.310
because I look at compile
time information.

00:08:10.310 --> 00:08:13.850
So really taking the compiler
and saying, OK, let's use that

00:08:13.850 --> 00:08:15.410
for a mirror system.

00:08:15.410 --> 00:08:18.540
And the thing you can ask there
is, of course, if we

00:08:18.540 --> 00:08:21.530
have a walk through with the
libraries, inspect what types

00:08:21.530 --> 00:08:28.920
are there, what functions and
variables we have, and go into

00:08:28.920 --> 00:08:33.940
the types and look at what
members we have.

00:08:33.940 --> 00:08:35.720
All these static elements.

00:08:35.720 --> 00:08:39.679
Currently we do not go into
methods, so it's only the

00:08:39.679 --> 00:08:41.640
interface of things.

00:08:41.640 --> 00:08:44.390
So that's the compile time
notion, and the runtime part

00:08:44.390 --> 00:08:45.620
is really Todd's side.

00:08:45.620 --> 00:08:49.800
So he's come from the other side
of it with all you can do

00:08:49.800 --> 00:08:52.940
when a program is running.

00:08:52.940 --> 00:08:54.525
The compile time doesn't
have that part.

00:08:54.525 --> 00:08:56.470
JJ BEHRENS: Todd, tell us
about mirrors running.

00:08:56.470 --> 00:08:57.120
TODD TURNIDGE: Sure.

00:08:57.120 --> 00:08:59.900
Well, we've got all the
declaration kind of stuff that

00:08:59.900 --> 00:09:01.810
Johnni's been talking about.

00:09:01.810 --> 00:09:04.640
And we've also got the ability
to do some things you'd

00:09:04.640 --> 00:09:09.327
expect, like invoke a method, or
create a new object with a

00:09:09.327 --> 00:09:13.075
constructor, or get the value
of a field, or set the value

00:09:13.075 --> 00:09:13.660
of a field.

00:09:13.660 --> 00:09:16.660
These are all pretty much the
primitive operations that you

00:09:16.660 --> 00:09:17.935
can do when you're programming,
it's just here

00:09:17.935 --> 00:09:20.900
you're doing it reflectively.

00:09:20.900 --> 00:09:23.160
There's a lot of interesting
applications you can build

00:09:23.160 --> 00:09:25.380
once you have these things, and
it's really something we

00:09:25.380 --> 00:09:26.450
need to have in a language.

00:09:26.450 --> 00:09:29.950
I've done this so far, I've
implemented it in the VM.

00:09:29.950 --> 00:09:34.090
So you can import dart:mirrors
in the VM and get access to

00:09:34.090 --> 00:09:35.960
the mirror system and start
playing with it.

00:09:35.960 --> 00:09:42.060
But we still have yet to do it
in Dart to JS at a runtime.

00:09:42.060 --> 00:09:45.085
There's a lot of things we have
planned, too, but those

00:09:45.085 --> 00:09:46.030
are in the future.

00:09:46.030 --> 00:09:52.440
At least to modify code, load
new classes, or modify

00:09:52.440 --> 00:09:54.180
functions or things like that.

00:09:54.180 --> 00:09:56.590
JJ BEHRENS: I guess that's the
challenge of trying to support

00:09:56.590 --> 00:10:00.110
multiple environments, but it's
definitely worth it once

00:10:00.110 --> 00:10:02.785
we can start writing all of our
applications, both client

00:10:02.785 --> 00:10:05.100
and server, in Dart.

00:10:05.100 --> 00:10:06.430
And we'll have the Dart VM.

00:10:06.430 --> 00:10:09.590
And the browser's kind of a
different environment, and

00:10:09.590 --> 00:10:12.320
hopefully we'll get the Dart
VM integrated there, but in

00:10:12.320 --> 00:10:17.330
the meantime it's really
beneficial to get the isolates

00:10:17.330 --> 00:10:18.180
in both places.

00:10:18.180 --> 00:10:19.380
TODD TURNIDGE: The
mirrors, rather.

00:10:19.380 --> 00:10:21.080
JJ BEHRENS: Sorry, the
mirrors, thank you.

00:10:21.080 --> 00:10:22.600
TODD TURNIDGE: Looking
ahead, yeah.

00:10:22.600 --> 00:10:26.480
JJ BEHRENS: So I was talking
to the AngularJS guys about

00:10:26.480 --> 00:10:28.990
reflection, and one of the
things they used reflection

00:10:28.990 --> 00:10:32.590
for was, they will have a
top-level function in

00:10:32.590 --> 00:10:35.890
JavaScript and then they will
just list a bunch of arguments

00:10:35.890 --> 00:10:39.890
that have standard names, and
whatever arguments that you

00:10:39.890 --> 00:10:44.100
request will automatically be
passed in as a way of doing

00:10:44.100 --> 00:10:46.250
dependency injection.

00:10:46.250 --> 00:10:48.790
I don't think that we're trying
to do exactly like

00:10:48.790 --> 00:10:51.040
AngularJS, but I think that
there's going to be a lot of

00:10:51.040 --> 00:10:54.870
people out there in the world
that are going to use mirrors

00:10:54.870 --> 00:10:56.240
to do interesting things.

00:10:56.240 --> 00:10:58.210
TODD TURNIDGE: It's great for
building frameworks where you

00:10:58.210 --> 00:11:00.650
can't necessarily anticipate
what's going to happen.

00:11:00.650 --> 00:11:03.540
So you need to be able to
inspect it and do something.

00:11:03.540 --> 00:11:07.830
Maybe like a testing system,
where you need to go and find

00:11:07.830 --> 00:11:10.120
all the test functions and call
them in the order they're

00:11:10.120 --> 00:11:11.950
declared or something
like that.

00:11:11.950 --> 00:11:13.880
Mirrors is perfect for that.

00:11:13.880 --> 00:11:16.350
Back when I hacked on Python
a little bit, DER.

00:11:16.350 --> 00:11:17.470
DER is very helpful.

00:11:17.470 --> 00:11:17.850
JJ BEHRENS: Oh, yeah, DER.

00:11:17.850 --> 00:11:19.220
How do you live without DER?

00:11:19.220 --> 00:11:20.240
TODD TURNIDGE: How do you
live without DER, right.

00:11:20.240 --> 00:11:23.360
So now you can write DER with
mirrors, if you want.

00:11:23.360 --> 00:11:23.920
JJ BEHRENS: That's
pretty awesome.

00:11:23.920 --> 00:11:27.102
I know that a lot of Ruby
programmers who are going to

00:11:27.102 --> 00:11:29.580
be coming in to Dart, they
love the metaprogramming

00:11:29.580 --> 00:11:31.520
stuff, so as soon as we get the
mirrors, they're going to

00:11:31.520 --> 00:11:33.520
be all over that stuff.

00:11:33.520 --> 00:11:34.970
Pretty exciting.

00:11:34.970 --> 00:11:36.400
So, isolates.

00:11:36.400 --> 00:11:38.700
How did you get stuck
working on isolates?

00:11:38.700 --> 00:11:40.910
TODD TURNIDGE: Well, when
I started on the VM team

00:11:40.910 --> 00:11:43.670
probably about a year ago, they
asked me to work on the

00:11:43.670 --> 00:11:45.140
embedding API.

00:11:45.140 --> 00:11:48.690
And it turns out that one of the
primary things an embedder

00:11:48.690 --> 00:11:53.370
needs to do is interact with
the isolate system.

00:11:53.370 --> 00:11:56.190
So I ended up going from there
and working on the isolate

00:11:56.190 --> 00:11:57.950
implementation inside
the VM and changing

00:11:57.950 --> 00:11:59.190
some aspects of that.

00:11:59.190 --> 00:12:01.910
That's how I got into that.

00:12:01.910 --> 00:12:04.240
JJ BEHRENS: I personally love
isolates because I coded

00:12:04.240 --> 00:12:07.020
Erlang long ago and I've always
thought that was just

00:12:07.020 --> 00:12:08.810
the right way to
do concurrency.

00:12:08.810 --> 00:12:11.970
I've never been a big fan
of shared mutable state

00:12:11.970 --> 00:12:14.280
concurrency, so that's
definitely something that

00:12:14.280 --> 00:12:16.700
draws me to the language.

00:12:16.700 --> 00:12:21.810
So when I've given Dart talks
before, I talk about isolates

00:12:21.810 --> 00:12:25.760
kind of at a high level of what
they are, but can you

00:12:25.760 --> 00:12:28.760
talk a little bit about how
isolates are implemented in

00:12:28.760 --> 00:12:32.560
terms of Unix processes,
Unix threads, all of

00:12:32.560 --> 00:12:33.880
that kind of stuff?

00:12:33.880 --> 00:12:39.710
TODD TURNIDGE: So we basically
have a pool of threads.

00:12:39.710 --> 00:12:42.410
And at any given point when an
isolate's running, it will be

00:12:42.410 --> 00:12:44.180
assigned a thread, and
it'll own that thread

00:12:44.180 --> 00:12:45.460
until it stops running.

00:12:45.460 --> 00:12:50.450
When it stops running, it'll
release the thread back to the

00:12:50.450 --> 00:12:52.860
pool, and somebody else
will be welcome to

00:12:52.860 --> 00:12:54.290
take it at that point.

00:12:54.290 --> 00:12:55.200
So I've got this thread pool.

00:12:55.200 --> 00:12:58.150
So you can have like 1,000
isolates and if only 10 of

00:12:58.150 --> 00:13:00.120
them are running, you'll
have 10 threads going.

00:13:00.120 --> 00:13:02.940
And if it bumps up, we'll
actually sort of reclaim

00:13:02.940 --> 00:13:05.220
threads slowly over time,
if they're not in use.

00:13:05.220 --> 00:13:07.480
We'll just say, ah, maybe
we need fewer.

00:13:07.480 --> 00:13:10.790
We just sort of adjust it
a bit as we go along.

00:13:10.790 --> 00:13:14.420
JJ BEHRENS: So the interesting
thing about isolates compared

00:13:14.420 --> 00:13:18.820
to Erlang processes is that
Erlang processes are a lot

00:13:18.820 --> 00:13:20.390
more lightweight.

00:13:20.390 --> 00:13:23.230
You could have 10,000 of them,
whereas you're not going to

00:13:23.230 --> 00:13:27.330
have 10,000 isolates currently
running because you're limited

00:13:27.330 --> 00:13:28.160
by the number of threads.

00:13:28.160 --> 00:13:30.740
But instead we have this other
business where we do a lot of

00:13:30.740 --> 00:13:33.870
asynchronous stuff within
a particular isolate.

00:13:33.870 --> 00:13:34.240
TODD TURNIDGE: Yeah.

00:13:34.240 --> 00:13:37.890
So we're still at early releases
of Dart, and we have

00:13:37.890 --> 00:13:40.610
a lot of freedom in the future
to change how we implement

00:13:40.610 --> 00:13:42.830
them on an underlying system.

00:13:42.830 --> 00:13:45.710
And we are working on scaling
the isolates.

00:13:45.710 --> 00:13:47.750
We have somebody in the group
who's trying to reduce memory

00:13:47.750 --> 00:13:51.090
footprint for each isolate by
doing things like sharing some

00:13:51.090 --> 00:13:54.525
of the space that's used for
the code across them, and a

00:13:54.525 --> 00:13:55.450
variety of things like that.

00:13:55.450 --> 00:13:57.890
We're trying to reduce our
per-isolate footprint as much

00:13:57.890 --> 00:14:01.870
as we can, because really we
aspire to have isolates feel

00:14:01.870 --> 00:14:03.270
very lightweight.

00:14:03.270 --> 00:14:05.100
And we're working
towards that.

00:14:05.100 --> 00:14:08.140
JJ BEHRENS: So do you think
that in the future we will

00:14:08.140 --> 00:14:11.700
continue to have this idea
of where we have somewhat

00:14:11.700 --> 00:14:14.770
slightly heavier-weight isolates
but lots of things

00:14:14.770 --> 00:14:17.720
running asynchronously within
a particular isolate, or do

00:14:17.720 --> 00:14:18.220
you think--

00:14:18.220 --> 00:14:20.090
TODD TURNIDGE: Well, our APIs
are all designed around

00:14:20.090 --> 00:14:24.150
asynchrony, so I don't
anticipate that going away.

00:14:24.150 --> 00:14:27.660
I don't know for sure.

00:14:27.660 --> 00:14:30.470
JJ BEHRENS: So can you tell
me a little bit about how

00:14:30.470 --> 00:14:32.820
isolates are going to work
on multi-core systems?

00:14:32.820 --> 00:14:38.010
Because I remember in Erlang,
until OTP came out, they had a

00:14:38.010 --> 00:14:42.030
hard time running Erlang
processes across multiple

00:14:42.030 --> 00:14:44.530
CPUs, and it was only
when OTP came out

00:14:44.530 --> 00:14:45.750
that that was possible.

00:14:45.750 --> 00:14:49.070
For us, we're going to be able
to run on multiple CPUs with

00:14:49.070 --> 00:14:50.530
separate threads
already, right?

00:14:50.530 --> 00:14:52.330
TODD TURNIDGE: It just works.

00:14:52.330 --> 00:14:57.854
My box has 12 CPUs, or some
number of CPUs like that and

00:14:57.854 --> 00:15:00.190
it'll happily run on them.

00:15:00.190 --> 00:15:01.160
Yours, I can tell.

00:15:01.160 --> 00:15:02.410
JJ BEHRENS: So can I
just say that the

00:15:02.410 --> 00:15:03.860
concurrency problem is solved?

00:15:03.860 --> 00:15:07.280
Like, hereon, like I'm going
to stamp it and blog it and

00:15:07.280 --> 00:15:08.080
say, We solved the concurrency
problem?

00:15:08.080 --> 00:15:08.550
TODD TURNIDGE: I don't know.

00:15:08.550 --> 00:15:10.660
You have to write down what
the concurrency problem is

00:15:10.660 --> 00:15:11.990
before I can state
that it's solved.

00:15:11.990 --> 00:15:15.260
It seems like a big thing to
say, the concurrency problem.

00:15:15.260 --> 00:15:18.020
But yeah, no, it'll
happily run on--

00:15:18.020 --> 00:15:20.340
it just uses the OS threads,
and so whatever

00:15:20.340 --> 00:15:22.370
they'll do, it'll do.

00:15:22.370 --> 00:15:24.130
JJ BEHRENS: You're right,
the concurrency

00:15:24.130 --> 00:15:25.760
problem has many facets.

00:15:25.760 --> 00:15:29.860
I know that we just hired a guy
and he was working on SIMD

00:15:29.860 --> 00:15:34.340
integration into Dart, and that
excites me because SIMD

00:15:34.340 --> 00:15:37.820
is its own different type of
concurrency that doesn't

00:15:37.820 --> 00:15:39.300
really fit.

00:15:39.300 --> 00:15:41.610
But being able to have multiple
approaches to

00:15:41.610 --> 00:15:45.340
concurrency, different tools
for different problems.

00:15:45.340 --> 00:15:47.010
TODD TURNIDGE: Sure.

00:15:47.010 --> 00:15:50.720
JJ BEHRENS: So you also said
you started working on the

00:15:50.720 --> 00:15:51.950
embedding API.

00:15:51.950 --> 00:15:53.475
Tell us about that.

00:15:53.475 --> 00:15:56.790
TODD TURNIDGE: So the embedding
API, honestly, it

00:15:56.790 --> 00:15:58.540
sort of grew.

00:15:58.540 --> 00:16:01.460
When I got to the project,
they'd sort of built an API

00:16:01.460 --> 00:16:03.870
that was sufficient for letting
Dart VM do what it

00:16:03.870 --> 00:16:05.140
needed to do.

00:16:05.140 --> 00:16:09.870
And so it wasn't necessarily
very consistent and it was a

00:16:09.870 --> 00:16:12.050
little heavyweight in terms of
how, when you get back a

00:16:12.050 --> 00:16:13.990
result, you had to check it for
an error before you could

00:16:13.990 --> 00:16:15.160
get a handle out.

00:16:15.160 --> 00:16:18.240
And so since then we've done a
lot of work to try to make it

00:16:18.240 --> 00:16:21.210
a little bit more consistent,
a little easier to use.

00:16:21.210 --> 00:16:23.120
For example, you get back
error handles from these

00:16:23.120 --> 00:16:26.150
functions, and you can just
inspect those rather than

00:16:26.150 --> 00:16:27.320
having to go through
this two-step

00:16:27.320 --> 00:16:29.230
process we used to have.

00:16:29.230 --> 00:16:34.140
And we're also doing things to
try to make the API more

00:16:34.140 --> 00:16:35.120
fleshed out.

00:16:35.120 --> 00:16:38.520
For example, Mirrors is a great
forcing function for the

00:16:38.520 --> 00:16:42.120
embedding API, because when
you're doing reflection, you

00:16:42.120 --> 00:16:44.350
have to be able to do anything,
a lot of things.

00:16:44.350 --> 00:16:47.860
And if you can't do them in the
embedding API, then it's

00:16:47.860 --> 00:16:49.260
really not complete.

00:16:49.260 --> 00:16:51.500
So we've been using it that
way, as a sort of forcing

00:16:51.500 --> 00:16:54.010
function to make us be honest
and make the embedding API is

00:16:54.010 --> 00:16:56.000
powerful as it needs to be.

00:16:56.000 --> 00:16:58.440
JJ BEHRENS: So I tend to fly
around and give a lot of

00:16:58.440 --> 00:17:01.140
talks, and the interesting thing
is, almost all the time

00:17:01.140 --> 00:17:04.150
I've spent learning Dart
has been on airplanes.

00:17:04.150 --> 00:17:09.609
And so I read all of your
C++ code on an airplane.

00:17:09.609 --> 00:17:12.520
And the thing that stuck out the
most to me was, first of

00:17:12.520 --> 00:17:14.880
all, it's in C++.

00:17:14.880 --> 00:17:18.910
I'm so used to languages like
Python and Perl, where the

00:17:18.910 --> 00:17:22.319
extension API is in C. Do you
have any comments about having

00:17:22.319 --> 00:17:24.849
it be in C++ instead of C?

00:17:24.849 --> 00:17:27.200
TODD TURNIDGE: Well,
the embedding API--

00:17:27.200 --> 00:17:29.530
dart_api.h is a C file.

00:17:29.530 --> 00:17:32.740
So people will interact with it
through C. But internally

00:17:32.740 --> 00:17:34.970
in VM, we do develop in C++.

00:17:34.970 --> 00:17:37.350
And this is a strange thing
about doing VM development, is

00:17:37.350 --> 00:17:39.120
that you think about one
language all the time, but you

00:17:39.120 --> 00:17:41.060
program in another language
all the time.

00:17:41.060 --> 00:17:43.250
I remember back on other VMs
I've worked on, it was sort of

00:17:43.250 --> 00:17:46.620
like you're constantly being
asked psychology questions,

00:17:46.620 --> 00:17:50.900
but you're just thinking about
neurons all the time.

00:17:50.900 --> 00:17:52.620
You're thinking about the brain,
but you're thinking

00:17:52.620 --> 00:17:53.770
about it a different way.

00:17:53.770 --> 00:17:55.850
So for me I program about
Dart all day.

00:17:55.850 --> 00:17:58.970
I don't program in
Dart as much.

00:17:58.970 --> 00:18:01.055
JJ BEHRENS: Yeah, and you don't
get a chance to use the

00:18:01.055 --> 00:18:02.780
Dart Editor.

00:18:02.780 --> 00:18:04.990
TODD TURNIDGE: Yeah, except
for when I'm writing

00:18:04.990 --> 00:18:06.700
regression tests or something.

00:18:06.700 --> 00:18:09.280
I have to make it fail in just
the way this person managed to

00:18:09.280 --> 00:18:09.770
make it fail.

00:18:09.770 --> 00:18:12.830
They send me some sort of
concurrent program that's

00:18:12.830 --> 00:18:14.240
selling tickets at a stadium--

00:18:14.240 --> 00:18:15.880
if you're watching, hello--

00:18:15.880 --> 00:18:19.620
and so I have to take that,
whittle it down to a test

00:18:19.620 --> 00:18:22.200
case, and make sure we don't
ever break that way again.

00:18:22.200 --> 00:18:24.320
JJ BEHRENS: Now, wait a second,
I thought all test

00:18:24.320 --> 00:18:26.720
cases would have to be phrased
in the form of a dining

00:18:26.720 --> 00:18:27.930
philosopher's problem.

00:18:27.930 --> 00:18:29.480
TODD TURNIDGE: Oh, yeah.

00:18:29.480 --> 00:18:32.650
But they're not grabbing
for chopsticks anymore.

00:18:32.650 --> 00:18:33.000
JJ BEHRENS: No?

00:18:33.000 --> 00:18:36.390
Well, if you guys have
concurrency problems, please

00:18:36.390 --> 00:18:39.310
make sure to format them as
dining philosophers--

00:18:39.310 --> 00:18:40.160
TODD TURNIDGE: No.

00:18:40.160 --> 00:18:42.220
Please don't.

00:18:42.220 --> 00:18:44.080
Send them to me nice
and short.

00:18:44.080 --> 00:18:45.690
JJ BEHRENS: Nice and short.

00:18:45.690 --> 00:18:47.610
Yeah, here's the nice
and short code.

00:18:47.610 --> 00:18:48.600
There's a bug in there.

00:18:48.600 --> 00:18:49.400
Find it.

00:18:49.400 --> 00:18:50.220
TODD TURNIDGE: Yeah.

00:18:50.220 --> 00:18:52.370
JJ BEHRENS: So I'm guessing that
we've probably started

00:18:52.370 --> 00:18:57.640
out in C++ because large-block
did V8, and Chrome itself is

00:18:57.640 --> 00:19:01.925
in C++ just like every other
browser out there.

00:19:01.925 --> 00:19:05.270
So you also wanted to talk
to us about security.

00:19:05.270 --> 00:19:10.780
And we wanted to be secure by,
like, obscurity or something,

00:19:10.780 --> 00:19:12.905
so I didn't even put that in
the description for today.

00:19:12.905 --> 00:19:14.520
TODD TURNIDGE: Well, you know,
since we have a public bug

00:19:14.520 --> 00:19:18.030
database, people are basically
able to look at whatever

00:19:18.030 --> 00:19:19.060
issues we're working on.

00:19:19.060 --> 00:19:22.070
They can see the security fix
that we did, they can look at

00:19:22.070 --> 00:19:23.100
the commits.

00:19:23.100 --> 00:19:24.340
It's all out there.

00:19:24.340 --> 00:19:26.970
It's an open source project.

00:19:26.970 --> 00:19:28.640
JJ BEHRENS: But it's blocked
in Russia, right?

00:19:28.640 --> 00:19:30.920
TODD TURNIDGE: Oh yeah, we don't
let any of them read it.

00:19:30.920 --> 00:19:32.030
No offense.

00:19:32.030 --> 00:19:34.170
JJ BEHRENS: I'm Russian.

00:19:34.170 --> 00:19:34.750
TODD TURNIDGE: I'm supposed
to remember to

00:19:34.750 --> 00:19:36.970
look at this camera.

00:19:36.970 --> 00:19:40.690
So the security inside
of the VM.

00:19:40.690 --> 00:19:42.870
There's just these problems that
you make all the time,

00:19:42.870 --> 00:19:46.120
which is basically numbers
are not on a line,

00:19:46.120 --> 00:19:47.600
they're on a loop.

00:19:47.600 --> 00:19:49.370
If you go too far in
one direction,

00:19:49.370 --> 00:19:50.140
you go negative again.

00:19:50.140 --> 00:19:52.710
It's like you get the high score
on an old video game

00:19:52.710 --> 00:19:53.920
machine, and you flip it.

00:19:53.920 --> 00:19:56.790
You've got 100,000, now you've
got a negative 100,000.

00:19:56.790 --> 00:19:58.170
JJ BEHRENS: That's happened
to me a lot.

00:19:58.170 --> 00:19:59.370
TODD TURNIDGE: And you don't
want this to happen when

00:19:59.370 --> 00:20:00.520
somebody's allocating
an array.

00:20:00.520 --> 00:20:03.310
If somebody says, I want an
array that's 500 million

00:20:03.310 --> 00:20:05.380
elements long, you don't want
that to turn into an array

00:20:05.380 --> 00:20:07.870
that's two elements long because
suddenly then you

00:20:07.870 --> 00:20:09.770
don't allocate the right amount
of space, they can

00:20:09.770 --> 00:20:11.620
overwrite your stack, they can
do all sorts of bad things.

00:20:11.620 --> 00:20:15.350
So we've been doing stuff in the
VM to try to be a lot more

00:20:15.350 --> 00:20:18.240
careful about how we handle
integer overflow conditions,

00:20:18.240 --> 00:20:19.720
especially around allocation.

00:20:19.720 --> 00:20:22.810
So I've been getting to learn
about that kind of stuff and

00:20:22.810 --> 00:20:25.463
put in lots of special
tests to make sure--

00:20:25.463 --> 00:20:28.720
you know there's a cliff over
here, and you don't want walk

00:20:28.720 --> 00:20:29.830
off the end of the cliff.

00:20:29.830 --> 00:20:31.980
JJ BEHRENS: And you also don't
want to check every two steps.

00:20:31.980 --> 00:20:33.130
TODD TURNIDGE: You don't want
to check every two steps.

00:20:33.130 --> 00:20:35.600
Some people develop these secure
integer libraries and

00:20:35.600 --> 00:20:40.270
use those, but we know that
there are certain places where

00:20:40.270 --> 00:20:43.520
we get numbers from the users
that are not trusted.

00:20:43.520 --> 00:20:46.750
We trust our users, but, you
know, not all of them.

00:20:46.750 --> 00:20:47.770
JJ BEHRENS: Not all of them.

00:20:47.770 --> 00:20:48.260
TODD TURNIDGE: Just kidding.

00:20:48.260 --> 00:20:51.220
So you just want to make sure
that you validate these inputs

00:20:51.220 --> 00:20:55.470
and that you don't do anything
especially bad with them.

00:20:55.470 --> 00:20:59.260
JJ BEHRENS: I'm grateful for
when the VM takes care of that

00:20:59.260 --> 00:21:02.670
kind of stuff because I remember
my assembly language

00:21:02.670 --> 00:21:05.980
days, and it's like, I don't
want to think about overflow.

00:21:05.980 --> 00:21:08.590
I want to be like a scheme
programmer with infinitely

00:21:08.590 --> 00:21:10.860
sized integers and never
have to think about

00:21:10.860 --> 00:21:11.520
that kind of stuff.

00:21:11.520 --> 00:21:14.340
So any time you guys
could save me.

00:21:14.340 --> 00:21:15.620
TODD TURNIDGE: Well, once you're
in the Dart language,

00:21:15.620 --> 00:21:17.020
we have big integers, right?

00:21:17.020 --> 00:21:18.390
Your integers aren't going
to overflow in

00:21:18.390 --> 00:21:19.260
the language itself.

00:21:19.260 --> 00:21:21.410
It's just when you're
programming about Dart, where

00:21:21.410 --> 00:21:22.950
you're interfacing with
the C++ code.

00:21:22.950 --> 00:21:25.990
We need to be aware of the
machine we're running on and

00:21:25.990 --> 00:21:29.950
the realities of living
on a loop.

00:21:29.950 --> 00:21:33.940
JJ BEHRENS: I assume you've seen
third-party contributions

00:21:33.940 --> 00:21:37.010
to Dart, in terms
of extensions.

00:21:37.010 --> 00:21:38.960
What are your favorite
extensions?

00:21:38.960 --> 00:21:40.510
TODD TURNIDGE: No, that's part
of programming about Dart

00:21:40.510 --> 00:21:41.400
instead of programming
in Dart.

00:21:41.400 --> 00:21:43.500
I don't have a favorite
extension at this point.

00:21:43.500 --> 00:21:44.960
I have to defer to you.

00:21:44.960 --> 00:21:46.540
What's your favorite
extension?

00:21:46.540 --> 00:21:48.940
JJ BEHRENS: I'm kind of old
school, so I heard that we had

00:21:48.940 --> 00:21:52.710
a MySQL driver, and I know that
everyone else has moved

00:21:52.710 --> 00:21:55.170
on to MongoDB and everything
else like that, but there's

00:21:55.170 --> 00:21:58.690
something that makes me feel,
I don't know, like all the

00:21:58.690 --> 00:22:00.330
world is right when
I have a MySQL.

00:22:00.330 --> 00:22:01.200
TODD TURNIDGE: Nostalgic?

00:22:01.200 --> 00:22:01.950
JJ BEHRENS: Yeah, nostalgic.

00:22:01.950 --> 00:22:04.730
It's like, OK I will never get
stuck, because I have MySQL.

00:22:04.730 --> 00:22:05.820
TODD TURNIDGE: Yeah,
it's classic.

00:22:05.820 --> 00:22:07.540
JJ BEHRENS: Yeah,
if nothing else.

00:22:10.490 --> 00:22:14.500
You talked about the embedding
API versus the extension API.

00:22:14.500 --> 00:22:16.640
Maybe not everyone gets
the difference.

00:22:16.640 --> 00:22:18.810
Tell me about the difference
between those two things.

00:22:18.810 --> 00:22:20.780
TODD TURNIDGE: Well, the
difference would

00:22:20.780 --> 00:22:23.060
be not much, honestly.

00:22:23.060 --> 00:22:27.310
People basically use the
embedding API for their

00:22:27.310 --> 00:22:28.230
extensions.

00:22:28.230 --> 00:22:30.520
We originally wrote it as an
embedding API, we thought of

00:22:30.520 --> 00:22:34.260
it that way, and then extensions
were added later.

00:22:34.260 --> 00:22:35.510
It seems to work.

00:22:35.510 --> 00:22:39.020
People can do things like, they
can create ports that

00:22:39.020 --> 00:22:42.590
look like Dart ports as far as
the program's concerned, but

00:22:42.590 --> 00:22:44.850
are backed by a C function,
or a C++

00:22:44.850 --> 00:22:46.450
function, or their library.

00:22:46.450 --> 00:22:48.800
So it allows them to create
a sort of fake--

00:22:48.800 --> 00:22:50.610
you could almost call it
like a native isolate.

00:22:50.610 --> 00:22:52.090
And so people do that
kind of thing.

00:22:52.090 --> 00:22:53.480
JJ BEHRENS: It's pretty cool.

00:22:53.480 --> 00:22:59.640
I know that Lua's well known
for having a really nice

00:22:59.640 --> 00:23:02.600
embedding API, and of course
Python has an embedding API,

00:23:02.600 --> 00:23:06.820
but for some reason there's this
conception in the world

00:23:06.820 --> 00:23:10.400
that Lua's easier to embed,
and so a lot more C

00:23:10.400 --> 00:23:14.330
programmers end up
embedding Lua.

00:23:14.330 --> 00:23:16.240
Now, how important
is that to us?

00:23:16.240 --> 00:23:21.170
I mean, how often do you think
we're going to see video games

00:23:21.170 --> 00:23:24.470
written in C++ that embed
the Dart engine?

00:23:24.470 --> 00:23:27.150
TODD TURNIDGE: You know, I
don't know I think we're

00:23:27.150 --> 00:23:29.030
making a nice language.

00:23:29.030 --> 00:23:31.270
It's a language that I
would like to use.

00:23:31.270 --> 00:23:33.070
And so I could imagine that
other people will want to use

00:23:33.070 --> 00:23:34.940
it to in their applications.

00:23:34.940 --> 00:23:38.820
But right now our embedding
API tends to make some

00:23:38.820 --> 00:23:41.130
decisions that allow a
lot of flexibility on

00:23:41.130 --> 00:23:42.160
the part of the embedder.

00:23:42.160 --> 00:23:44.650
We allow them to provide
callbacks that customize a lot

00:23:44.650 --> 00:23:47.270
of different aspects of how
they interact with it.

00:23:47.270 --> 00:23:50.390
And so we try not to make
a lot of assumptions.

00:23:50.390 --> 00:23:52.530
But that means that there'll be
a little bit more work up

00:23:52.530 --> 00:23:54.310
front, in terms of providing,

00:23:54.310 --> 00:23:56.465
OK, here's what you need to do
to create an isolate, here's

00:23:56.465 --> 00:23:57.380
what you need to do
this, you need to

00:23:57.380 --> 00:23:59.230
pass on these callbacks.

00:23:59.230 --> 00:24:02.700
So if you're embedding it,
there's some setup, and we

00:24:02.700 --> 00:24:06.600
haven't really written a good
document yet about embedding

00:24:06.600 --> 00:24:07.970
the Dart VM.

00:24:07.970 --> 00:24:09.830
I think we should.

00:24:09.830 --> 00:24:12.910
JJ BEHRENS: Yeah, but the whole
effort, I think, is

00:24:12.910 --> 00:24:14.170
really good.

00:24:14.170 --> 00:24:19.110
I remember reading this long
article about Smalltalk, and

00:24:19.110 --> 00:24:21.120
one of the challenges that
they had in the Smalltalk

00:24:21.120 --> 00:24:24.310
world is that it wasn't so easy
to integrate with the

00:24:24.310 --> 00:24:25.980
rest of the world.

00:24:25.980 --> 00:24:29.150
And I think that one of the
reasons why Python was so

00:24:29.150 --> 00:24:33.150
successful is because they
had a good extension API.

00:24:33.150 --> 00:24:38.760
Python is a glue language
for all these libraries,

00:24:38.760 --> 00:24:41.900
extensions written in C. Do you
think we're going to be

00:24:41.900 --> 00:24:45.000
able to get to the point where
Dart on the server is a

00:24:45.000 --> 00:24:48.270
really, really nice language
with lots of extensions, and

00:24:48.270 --> 00:24:49.260
this is a softball question--

00:24:49.260 --> 00:24:51.720
TODD TURNIDGE: Honestly, having
embedded Python myself

00:24:51.720 --> 00:24:54.960
in a previous life, there's some
things that we have to

00:24:54.960 --> 00:24:59.830
offer, like we don't have to
keep track of reference count.

00:24:59.830 --> 00:25:01.230
JJ BEHRENS: Oh, that's
fantastic.

00:25:01.230 --> 00:25:03.750
TODD TURNIDGE: I recall that
when I was embedding Python, I

00:25:03.750 --> 00:25:06.390
had to always know, was this
reference borrowed or stolen?

00:25:06.390 --> 00:25:12.220
And here a small error can't
result in your program

00:25:12.220 --> 00:25:12.880
crashing that way.

00:25:12.880 --> 00:25:14.830
You rely on a garbage collector
to collect your

00:25:14.830 --> 00:25:17.120
garbage for you, and that's
nice, from an embedder's

00:25:17.120 --> 00:25:18.050
standpoint.

00:25:18.050 --> 00:25:21.290
I really appreciate that.

00:25:21.290 --> 00:25:27.674
Another thing was, Python has
this global interpreter lock--

00:25:27.674 --> 00:25:29.620
JJ BEHRENS: Really?

00:25:29.620 --> 00:25:30.150
TODD TURNIDGE: Yeah.

00:25:30.150 --> 00:25:31.790
JJ BEHRENS: I think 50 blog
posts just went up

00:25:31.790 --> 00:25:32.810
about it right now.

00:25:32.810 --> 00:25:34.160
TODD TURNIDGE: OK, sorry.

00:25:34.160 --> 00:25:38.030
But I really like the feel of
using that language and

00:25:38.030 --> 00:25:40.680
embedding it, and I hope that
we can make a language that

00:25:40.680 --> 00:25:43.310
other people want to embed in
their things, and I hope to be

00:25:43.310 --> 00:25:44.220
successful there.

00:25:44.220 --> 00:25:46.610
That would make me feel really
good, if we have a lot of

00:25:46.610 --> 00:25:49.450
users for the embedding API, and
if we cut off some these

00:25:49.450 --> 00:25:51.850
sharp corners and make it a lot
easier for them to do they

00:25:51.850 --> 00:25:53.980
want to do, that'd
be really nice.

00:25:53.980 --> 00:25:55.910
JJ BEHRENS: Now, are you working
on a special format

00:25:55.910 --> 00:25:59.235
for the documents that make it
easier to read on a plane?

00:25:59.235 --> 00:26:02.064
Because I'd be down with
that, you know.

00:26:04.990 --> 00:26:08.060
So you worked on the Dartium
integration of the VM?

00:26:08.060 --> 00:26:09.980
TODD TURNIDGE: I work a lot with
the people on the Dartium

00:26:09.980 --> 00:26:10.820
team, yeah.

00:26:10.820 --> 00:26:13.530
JJ BEHRENS: So do you have a
feel for how difficult it was

00:26:13.530 --> 00:26:15.630
to integrate?

00:26:15.630 --> 00:26:16.940
TODD TURNIDGE: They already had
something running when I

00:26:16.940 --> 00:26:18.580
joined the team.

00:26:18.580 --> 00:26:21.350
So what I'll do is I'll go along
and I'll break their

00:26:21.350 --> 00:26:23.030
build all the time.

00:26:23.030 --> 00:26:23.790
Not quite.

00:26:23.790 --> 00:26:24.860
JJ BEHRENS: That's
your job, right.

00:26:24.860 --> 00:26:26.690
TODD TURNIDGE: I want to make
incompatible changes to the

00:26:26.690 --> 00:26:27.860
API to make it better.

00:26:27.860 --> 00:26:29.710
And now is easier than it's
ever going to be in the

00:26:29.710 --> 00:26:31.910
future, so we've gone through
and made lots of

00:26:31.910 --> 00:26:32.910
incompatible changes.

00:26:32.910 --> 00:26:35.130
And then we go and have to make
sure that we coordinate

00:26:35.130 --> 00:26:37.125
with them to make sure that they
can get their changes in

00:26:37.125 --> 00:26:38.390
as quickly as possible.

00:26:38.390 --> 00:26:40.415
JJ BEHRENS: I like to make
incompatible changes to the

00:26:40.415 --> 00:26:42.490
API because I'm in developer
relations and that's how I

00:26:42.490 --> 00:26:43.676
relate to people.

00:26:43.676 --> 00:26:45.310
TODD TURNIDGE: Is by telling
how you've broken them?

00:26:45.310 --> 00:26:47.870
JJ BEHRENS: Yes, it's like,
Hey, I broke your API.

00:26:47.870 --> 00:26:48.580
Nice to meet you.

00:26:48.580 --> 00:26:49.730
Let's talk.

00:26:49.730 --> 00:26:51.680
TODD TURNIDGE: Right now we're
in a time of a lot of change

00:26:51.680 --> 00:26:54.660
in the project, and we're trying
to break things now, so

00:26:54.660 --> 00:26:57.920
we can get things on a more
nice, stable platform going

00:26:57.920 --> 00:27:00.120
forward from M1.

00:27:00.120 --> 00:27:01.430
JJ BEHRENS: So another thing.

00:27:01.430 --> 00:27:04.270
Getting back to the isolates,
I know that we were talking

00:27:04.270 --> 00:27:09.520
today in a meeting about using
synchronous isolates within

00:27:09.520 --> 00:27:13.120
the single UI thread in order
to talk to JavaScript.

00:27:13.120 --> 00:27:14.630
JavaScript interoperability.

00:27:14.630 --> 00:27:15.490
TODD TURNIDGE: Yeah,
we're working on

00:27:15.490 --> 00:27:16.500
this stuff right now.

00:27:16.500 --> 00:27:18.525
I'm not part of those
discussions.

00:27:18.525 --> 00:27:19.775
They're all happening
in Denmark.

00:27:23.420 --> 00:27:25.740
Clearly JavaScript
interoperability is something

00:27:25.740 --> 00:27:27.960
a lot of people ask about, it's
important to a lot of

00:27:27.960 --> 00:27:30.560
people, and we need to have a
really clear story about that.

00:27:30.560 --> 00:27:33.390
I'm not part of the group
working on that, but we want

00:27:33.390 --> 00:27:38.040
to make it a very natural thing
to be able to reuse code

00:27:38.040 --> 00:27:42.320
that you already have
that's useful.

00:27:42.320 --> 00:27:44.850
Part of getting acceptance, is
making something that people

00:27:44.850 --> 00:27:47.190
can interface with the blocks
they've already got.

00:27:47.190 --> 00:27:49.120
JJ BEHRENS: So it'll be
interesting to see how it goes

00:27:49.120 --> 00:27:51.650
because I know we have this idea
of running isolates in

00:27:51.650 --> 00:27:53.910
separate web workers, but we
also have this idea of

00:27:53.910 --> 00:28:00.020
synchronous isolates to isolate
various JavaScript

00:28:00.020 --> 00:28:02.580
widgets or whatever so that
they're segmented.

00:28:02.580 --> 00:28:06.860
So we have this idea of an
isolate, and it'll be

00:28:06.860 --> 00:28:08.750
interesting to see what
happens with all the

00:28:08.750 --> 00:28:10.880
different use cases.

00:28:10.880 --> 00:28:12.560
So I know we have some
questions, so

00:28:12.560 --> 00:28:15.290
let me get to them.

00:28:15.290 --> 00:28:17.750
What kind of new tooling
libraries could we see

00:28:17.750 --> 00:28:22.480
emerging from the Dart team
when Mirrors has landed?

00:28:22.480 --> 00:28:23.730
Crystal ball time.

00:28:23.730 --> 00:28:25.270
What do you think?

00:28:25.270 --> 00:28:27.770
New tooling libraries.

00:28:27.770 --> 00:28:31.710
JOHNNI WINTHER: Well, one thing
that's been added as

00:28:31.710 --> 00:28:36.130
part of the job Todd and I have
done, or I'm doing now,

00:28:36.130 --> 00:28:41.430
is really the ability to inspect
the static part of the

00:28:41.430 --> 00:28:46.400
code, so it feels natural to
do something there that you

00:28:46.400 --> 00:28:49.270
can actually inspect code.

00:28:49.270 --> 00:28:52.150
Run the compiler and
inspect the class

00:28:52.150 --> 00:28:55.410
hierarchy, and that stuff.

00:28:55.410 --> 00:28:57.600
TODD TURNIDGE: Yeah, you can
write custom analyzers on top

00:28:57.600 --> 00:28:59.690
of that kind of thing, and
all sorts of good stuff.

00:28:59.690 --> 00:29:00.040
JOHNNI WINTHER: Yeah.

00:29:00.040 --> 00:29:03.210
And to start with, it's
an external structure.

00:29:03.210 --> 00:29:07.790
So that's really being able to
browse the class hierarchy,

00:29:07.790 --> 00:29:10.490
which is a good thing, being
able to find stuff.

00:29:10.490 --> 00:29:13.690
If you don't find the Dart doc
good enough, you can actually

00:29:13.690 --> 00:29:17.180
write one that's better
on top of this.

00:29:17.180 --> 00:29:19.760
JJ BEHRENS: I know we also kind
of answered this earlier

00:29:19.760 --> 00:29:23.770
when you were talking about
testing tools, and I was

00:29:23.770 --> 00:29:26.200
talking about AngularJS's
approach

00:29:26.200 --> 00:29:28.060
to dependency injection.

00:29:28.060 --> 00:29:30.670
I think it actually opens
up a lot of worlds.

00:29:30.670 --> 00:29:34.180
TODD TURNIDGE: Yes, it's really
an important part of

00:29:34.180 --> 00:29:36.330
today's programming languages,
being able to reflect.

00:29:36.330 --> 00:29:38.270
We need it.

00:29:38.270 --> 00:29:40.880
JJ BEHRENS: So will isolates
support transferable objects

00:29:40.880 --> 00:29:44.840
like Chrome with the type of
arrays in the workers?

00:29:44.840 --> 00:29:46.550
I heard that we were
switching to CORBA.

00:29:49.620 --> 00:29:51.920
Some people out there going
to be laughing.

00:29:51.920 --> 00:29:53.650
They're C++ programmers.

00:29:53.650 --> 00:29:55.210
TODD TURNIDGE: I didn't
hear that.

00:29:55.210 --> 00:29:58.580
JJ BEHRENS: Oh, well,
maybe it's not true.

00:29:58.580 --> 00:30:00.130
TODD TURNIDGE: I talked to
Carl on my team, who'd

00:30:00.130 --> 00:30:02.570
probably be the one who'd be
responsible for handling that

00:30:02.570 --> 00:30:07.250
kind of thing, and he said the
answer to that is yes.

00:30:07.250 --> 00:30:08.080
JJ BEHRENS: Yes.

00:30:08.080 --> 00:30:09.650
TODD TURNIDGE: He said
probably yes.

00:30:09.650 --> 00:30:11.550
JJ BEHRENS: Wow, that's
a tough one.

00:30:11.550 --> 00:30:13.370
Because it's like you--

00:30:13.370 --> 00:30:15.950
what about the dynamic
code loading, and--

00:30:15.950 --> 00:30:16.120
TODD TURNIDGE: Well, the

00:30:16.120 --> 00:30:19.170
transferable objects, or whatever.

00:30:19.170 --> 00:30:22.030
JJ BEHRENS: So are there still
plans to spawn isolates on the

00:30:22.030 --> 00:30:23.420
client from the server?

00:30:23.420 --> 00:30:30.550
If so, will low-latency,
low-bandwidth use on

00:30:30.550 --> 00:30:31.770
the goals for that?

00:30:31.770 --> 00:30:35.630
Will it use web sockets
for the communication?

00:30:35.630 --> 00:30:38.080
TODD TURNIDGE: I don't know how
we're going to implement

00:30:38.080 --> 00:30:40.760
this, particularly
in the browser.

00:30:40.760 --> 00:30:42.310
I work on the VM a lot.

00:30:42.310 --> 00:30:45.720
But I do know that we are
looking at evolving the

00:30:45.720 --> 00:30:47.990
isolate API quite a
bit going forward.

00:30:47.990 --> 00:30:51.540
And part of that would most
certainly involve being able

00:30:51.540 --> 00:30:53.850
to interact with an isolate
that's remote.

00:30:53.850 --> 00:30:56.750
Being able to name this isolate
and talk to it,

00:30:56.750 --> 00:30:57.890
respond to failures.

00:30:57.890 --> 00:31:00.440
That's a huge thing that
actually I probably should've

00:31:00.440 --> 00:31:03.500
said earlier about the isolate
API is that right now you have

00:31:03.500 --> 00:31:06.170
an isolate that you've spawned,
and it goes and dies.

00:31:06.170 --> 00:31:06.910
And what happens?

00:31:06.910 --> 00:31:09.610
Well, right now if you're inside
standalone VM running

00:31:09.610 --> 00:31:12.730
on a command line, it takes
down your whole VM.

00:31:12.730 --> 00:31:13.070
JJ BEHRENS: Oh!

00:31:13.070 --> 00:31:13.830
TODD TURNIDGE: Does
that seem like--

00:31:13.830 --> 00:31:14.140
JJ BEHRENS: No!

00:31:14.140 --> 00:31:14.920
TODD TURNIDGE: --a good
way to build a system?

00:31:14.920 --> 00:31:15.890
JJ BEHRENS: You're gonna
fix that, right?

00:31:15.890 --> 00:31:16.780
TODD TURNIDGE: We're
going to fix that.

00:31:16.780 --> 00:31:20.490
So we need to be able to handle
the fact I'm talking to

00:31:20.490 --> 00:31:22.140
a port but the port is closed.

00:31:22.140 --> 00:31:23.820
Why is it closed?

00:31:23.820 --> 00:31:24.730
How can I respond to this?

00:31:24.730 --> 00:31:25.530
What do I want to do?

00:31:25.530 --> 00:31:27.800
Do I want to shut myself down,
do I want to shut down some

00:31:27.800 --> 00:31:28.220
other isolates?

00:31:28.220 --> 00:31:30.550
I'm going to need to be able to
interact with isolates in a

00:31:30.550 --> 00:31:33.330
more nuanced way, more like the
way that, say, you could

00:31:33.330 --> 00:31:34.280
do in Erlang, or something
like that.

00:31:34.280 --> 00:31:36.350
JJ BEHRENS: Yeah, I was just
about to ask you, are we going

00:31:36.350 --> 00:31:40.560
to do something like Erlang OTP
where we have isolates on

00:31:40.560 --> 00:31:45.490
multiple machines talking to
each other and failovers and

00:31:45.490 --> 00:31:47.770
watchdogs, all that
kind of stuff?

00:31:47.770 --> 00:31:49.200
TODD TURNIDGE: I can't speak
to that exact architecture,

00:31:49.200 --> 00:31:51.000
but we certainly need to
solve that problem.

00:31:51.000 --> 00:31:53.400
JJ BEHRENS: Are you going
to have it by next week?

00:31:53.400 --> 00:31:54.133
TODD TURNIDGE: No.

00:31:54.133 --> 00:31:54.566
JJ BEHRENS: Oh.

00:31:54.566 --> 00:31:55.000
Well.

00:31:55.000 --> 00:31:57.810
Geez.

00:31:57.810 --> 00:31:58.250
TODD TURNIDGE: OK.

00:31:58.250 --> 00:31:59.880
JJ BEHRENS: Yeah.

00:31:59.880 --> 00:32:01.130
Great.

00:32:05.500 --> 00:32:07.370
Well, we've circled
around this a lot.

00:32:07.370 --> 00:32:08.820
What are the differences
between Erlang

00:32:08.820 --> 00:32:10.200
actors and Dart isolates?

00:32:10.200 --> 00:32:12.430
Are there any plans to
build Erlang OTP-like

00:32:12.430 --> 00:32:13.920
framework on Dart?

00:32:13.920 --> 00:32:16.290
TODD TURNIDGE: Wow,
sounds familiar.

00:32:16.290 --> 00:32:19.210
Certainly they have a lot
of good features.

00:32:19.210 --> 00:32:22.000
We should be looking at our
isolates right now, they're

00:32:22.000 --> 00:32:24.900
pretty bare-bones, and we should
be thinking about what

00:32:24.900 --> 00:32:27.950
it is that we need to add so
that we can build reliable

00:32:27.950 --> 00:32:29.760
systems on top of
these things.

00:32:29.760 --> 00:32:32.630
JJ BEHRENS: Now, I'm generally
pretty forgiving about syntax,

00:32:32.630 --> 00:32:35.120
and I like coding in a lot of
languages, but I do happen to

00:32:35.120 --> 00:32:38.160
like Dart's syntax a little
bit better than Erlang.

00:32:38.160 --> 00:32:39.680
TODD TURNIDGE: I haven't
programmed in Erlang, so I

00:32:39.680 --> 00:32:40.510
can't, you know.

00:32:40.510 --> 00:32:43.440
Besides, I program about Dart.

00:32:43.440 --> 00:32:44.400
JJ BEHRENS: I would
have to say that--

00:32:44.400 --> 00:32:47.070
I always joke that Erlang has
syntax that only a compiler

00:32:47.070 --> 00:32:48.320
writer could love.

00:32:50.500 --> 00:32:54.930
So most of my programming work
is developing either COM

00:32:54.930 --> 00:32:58.520
server DLLs or .net class
libraries, exposing a certain

00:32:58.520 --> 00:33:01.360
interface to external Windows
applications.

00:33:01.360 --> 00:33:04.340
Would you think it is feasible
to wrap the Dart VM such that

00:33:04.340 --> 00:33:05.440
it could be used for this?

00:33:05.440 --> 00:33:06.990
Oh, what a perfect question.

00:33:06.990 --> 00:33:09.502
TODD TURNIDGE: I think it could
be feasible to embed the

00:33:09.502 --> 00:33:13.270
Dart VM and use it in a variety
of contexts, yes.

00:33:13.270 --> 00:33:15.820
I mean, we haven't written a
nice guide for how to do it

00:33:15.820 --> 00:33:18.630
step by step, but our code's all
public, so you can look at

00:33:18.630 --> 00:33:21.690
how we're doing it in a variety
of projects right now.

00:33:21.690 --> 00:33:23.360
Particularly the standalone
VM is probably

00:33:23.360 --> 00:33:24.820
the simplest embedding.

00:33:24.820 --> 00:33:27.870
If you look at how we're doing
it there, and you're clever,

00:33:27.870 --> 00:33:30.390
you might be able to figure
out to do it on your own.

00:33:30.390 --> 00:33:32.870
JJ BEHRENS: So knowing that
you code in EMX, I have a

00:33:32.870 --> 00:33:35.430
suspicion you're gonna have a
hard time debugging the Visual

00:33:35.430 --> 00:33:40.610
Studio build problems that are
inevitably going to come up.

00:33:40.610 --> 00:33:43.180
TODD TURNIDGE: No comment.

00:33:43.180 --> 00:33:45.970
JJ BEHRENS: So how would Dart
handle environment-specific

00:33:45.970 --> 00:33:50.150
implementations of libraries,
e.g., select native extensions

00:33:50.150 --> 00:33:54.260
in the VM and pure Dart
in the browser?

00:33:54.260 --> 00:33:55.620
I kind of have an
answer to this.

00:33:55.620 --> 00:33:56.310
What do you think?

00:33:56.310 --> 00:33:57.940
You guys have any answers?

00:33:57.940 --> 00:33:59.160
TODD TURNIDGE: I mean, we've
been thinking about how to

00:33:59.160 --> 00:34:02.370
share our core library coda a
lot lately and mark certain

00:34:02.370 --> 00:34:06.280
parts of it as being external
and provided by

00:34:06.280 --> 00:34:07.780
a particular platform.

00:34:07.780 --> 00:34:09.889
We're trying to share as
much code as possible.

00:34:09.889 --> 00:34:12.800
And we have actually sort of a
library unification project

00:34:12.800 --> 00:34:16.010
going on right now where there's
a Dart to JS version

00:34:16.010 --> 00:34:17.590
of this, and the VM version
of this, and

00:34:17.590 --> 00:34:20.239
that's clearly not great.

00:34:20.239 --> 00:34:22.830
We'd rather have one version
that had as much code shared

00:34:22.830 --> 00:34:25.060
as we possibly could so people
know what to look at.

00:34:25.060 --> 00:34:27.030
They say, I want to know
what a list does.

00:34:27.030 --> 00:34:28.989
It's nice to be able to
go look at a list,

00:34:28.989 --> 00:34:30.210
see what a list is.

00:34:30.210 --> 00:34:34.255
And then we can patch some tiny
little native bits in the

00:34:34.255 --> 00:34:36.969
VM, or in Dart to JS,
or what have you.

00:34:36.969 --> 00:34:40.370
JJ BEHRENS: I don't have a
perfect answer for this, but I

00:34:40.370 --> 00:34:42.830
do believe they're working on
this in Aarhus, the big

00:34:42.830 --> 00:34:45.130
library reorg.

00:34:45.130 --> 00:34:48.835
JOHNNI WINTHER: One of the
things about this is, as you

00:34:48.835 --> 00:34:51.340
said, we currently have several
implementations, and

00:34:51.340 --> 00:34:54.239
actually with that, several
interfaces of those

00:34:54.239 --> 00:34:54.940
implementations.

00:34:54.940 --> 00:34:57.070
And the first step is really to
say, well, we should have

00:34:57.070 --> 00:34:58.140
one interface of this.

00:34:58.140 --> 00:35:01.710
Saying how do we have an
implementation for this, even

00:35:01.710 --> 00:35:07.930
though it might have one
interface for several

00:35:07.930 --> 00:35:08.860
implementations.

00:35:08.860 --> 00:35:11.260
Currently it's just several
implementations.

00:35:11.260 --> 00:35:13.840
And depending on where you
point, and that's really

00:35:13.840 --> 00:35:16.415
depending on who you talk to,
do you talk to Dart to JS do

00:35:16.415 --> 00:35:18.560
you to talk to the VM, do
you talk to the Editor.

00:35:18.560 --> 00:35:20.820
It might actually say something
that is different.

00:35:20.820 --> 00:35:25.030
And we have to get a unified
answer on this, so we know

00:35:25.030 --> 00:35:27.860
that, well, this is the
interface for it.

00:35:27.860 --> 00:35:32.060
How and when to implement it,
that would be the problem for

00:35:32.060 --> 00:35:34.610
us, but it's one unified
interface.

00:35:34.610 --> 00:35:37.500
So that's where we're going
on, for those, and that's

00:35:37.500 --> 00:35:40.376
really pushed up front now.

00:35:40.376 --> 00:35:42.240
JJ BEHRENS: Well, I'm
disappointed that you guys

00:35:42.240 --> 00:35:44.190
didn't wait for it to be perfect
before shipping it.

00:35:49.580 --> 00:35:52.570
So when will we have feature
parity when using mirrors on

00:35:52.570 --> 00:35:54.400
the VM versus Dart to JS?

00:35:54.400 --> 00:35:56.070
Can we get, like,
a calendar date?

00:35:56.070 --> 00:35:57.660
Like, we're down to the hour?

00:35:57.660 --> 00:35:59.670
TODD TURNIDGE: I don't know if
we've really started the

00:35:59.670 --> 00:36:02.480
runtime implementation
of Mirrors.

00:36:02.480 --> 00:36:06.280
JOHNNI WINTHER: I haven't seen
any, so I don't think we have

00:36:06.280 --> 00:36:07.360
done anything.

00:36:07.360 --> 00:36:12.440
There could be some work on just
providing runtime type

00:36:12.440 --> 00:36:15.120
information, which is really
the startup point for it.

00:36:15.120 --> 00:36:17.980
But there's a whole lot of
mechanism that has to be

00:36:17.980 --> 00:36:20.835
implemented just to do the
compile time interface.

00:36:20.835 --> 00:36:23.026
TODD TURNIDGE: Do we plan
on doing it eventually?

00:36:23.026 --> 00:36:24.470
JOHNNI WINTHER: I haven't heard
any schedule on the

00:36:24.470 --> 00:36:28.370
Mirrors, on any scheduling
of when.

00:36:28.370 --> 00:36:30.820
I think in time, yes,
but when, no.

00:36:30.820 --> 00:36:31.800
TODD TURNIDGE: I can give
you a little bit

00:36:31.800 --> 00:36:32.880
of background here.

00:36:32.880 --> 00:36:36.520
Just sort of on a human level,
what happened is we knew we

00:36:36.520 --> 00:36:37.720
wanted Mirrors.

00:36:37.720 --> 00:36:40.830
And the guy I sit next to is
the guy who basically--

00:36:40.830 --> 00:36:43.280
Gilad Bracha, he does a lot of
our language specification

00:36:43.280 --> 00:36:46.280
work, but he also is very
interested in reflection.

00:36:46.280 --> 00:36:47.720
And so he'd come up
with an interface.

00:36:47.720 --> 00:36:48.690
He said, we should have
this interface.

00:36:48.690 --> 00:36:52.180
So I said, OK, let's implement
it on the VM and let it bake a

00:36:52.180 --> 00:36:53.920
little bit and see
if we like it.

00:36:53.920 --> 00:36:57.680
And so we're still in that,
like, baking phase, and we

00:36:57.680 --> 00:36:59.440
haven't gotten to the, everybody
else wants to eat

00:36:59.440 --> 00:37:01.770
this pie, we should put in the
Dart to JS oven phase yet.

00:37:01.770 --> 00:37:02.160
JJ BEHRENS: Yeah.

00:37:02.160 --> 00:37:05.450
I guess that theory is a lot
better than my theory.

00:37:05.450 --> 00:37:07.470
TODD TURNIDGE: But I can take
that as feedback to the team,

00:37:07.470 --> 00:37:09.640
that perhaps we should
think about when

00:37:09.640 --> 00:37:10.250
we're going to do this.

00:37:10.250 --> 00:37:16.230
I don't know, I don't know, we
can't promise, but it's a good

00:37:16.230 --> 00:37:18.120
idea to have it, parity would
be useful, because otherwise

00:37:18.120 --> 00:37:19.450
it's hard to write code.

00:37:19.450 --> 00:37:21.460
JJ BEHRENS: It'll come, it's
just a matter of time.

00:37:21.460 --> 00:37:24.020
My theory was that it's
summer in Denmark.

00:37:24.020 --> 00:37:26.010
Everyone wants to go outside.

00:37:26.010 --> 00:37:28.430
And we have to wait until it
gets a little bit colder

00:37:28.430 --> 00:37:30.850
before all these things will
just come out, all of them, at

00:37:30.850 --> 00:37:32.685
the same time.

00:37:32.685 --> 00:37:35.270
JOHNNI WINTHER: There is this
issue, that everyone has been

00:37:35.270 --> 00:37:38.190
away now, and we are all coming
back, and I'm sure

00:37:38.190 --> 00:37:41.300
we're going to be much more
fluent on things, and much

00:37:41.300 --> 00:37:42.240
more work done.

00:37:42.240 --> 00:37:44.000
JJ BEHRENS: And maybe a new
kernel as well, a new

00:37:44.000 --> 00:37:45.155
operating system.

00:37:45.155 --> 00:37:46.405
JOHNNI WINTHER: Oh, you never
know what happens.

00:37:49.820 --> 00:37:51.070
JJ BEHRENS: So, hello, guys.

00:37:55.190 --> 00:37:55.770
I've just come in.

00:37:55.770 --> 00:37:58.790
I don't know if you already
talked for the plan for UI

00:37:58.790 --> 00:38:03.560
extensions that compete
with extJS or GWT.

00:38:03.560 --> 00:38:08.820
So it looks like we're going
to be doing a lot of stuff

00:38:08.820 --> 00:38:11.970
with web components in the
future, that's definitely

00:38:11.970 --> 00:38:15.530
something we're looking into a
lot, and it'll be interesting

00:38:15.530 --> 00:38:20.200
to see web components, be they
written in JavaScript or Dart,

00:38:20.200 --> 00:38:24.500
working together and I think
web components might be the

00:38:24.500 --> 00:38:28.130
place where we have
a nice interface.

00:38:28.130 --> 00:38:29.570
TODD TURNIDGE: That'd be nice.

00:38:29.570 --> 00:38:31.910
JJ BEHRENS: So any plans for
native animation and

00:38:31.910 --> 00:38:33.780
interpolation like jQuery?

00:38:37.120 --> 00:38:40.470
I don't think that these guys
would answer this question,

00:38:40.470 --> 00:38:45.500
but I think this might
be a perfect case--

00:38:45.500 --> 00:38:47.810
I don't know if we're doing
it, but that sounds like a

00:38:47.810 --> 00:38:50.840
really good thing to have as
a third party library.

00:38:50.840 --> 00:38:54.520
And so you, out there,
please code it.

00:38:54.520 --> 00:38:58.300
And the next question, can
server-side Dart code call

00:38:58.300 --> 00:39:00.680
server-side Java APIs?

00:39:00.680 --> 00:39:02.930
TODD TURNIDGE: Well, we do have
the native extension API.

00:39:02.930 --> 00:39:08.620
They could presumably embed
a Java VM, and--

00:39:08.620 --> 00:39:11.300
JJ BEHRENS: I know people who
do this kind of stuff, and I

00:39:11.300 --> 00:39:14.470
always think they're crazy when
they embed multiple VMs.

00:39:14.470 --> 00:39:15.180
That sounds painful.

00:39:15.180 --> 00:39:17.360
TODD TURNIDGE: Right now our
primary interface is from Dart

00:39:17.360 --> 00:39:21.930
to C. But I don't know
in the future.

00:39:21.930 --> 00:39:25.400
Right now, clearly, there's no
out-of-the-box solution for--

00:39:25.400 --> 00:39:26.880
there's no off-the-shelf
solution that does

00:39:26.880 --> 00:39:27.490
this kind of thing.

00:39:27.490 --> 00:39:30.460
JJ BEHRENS: I have
a suspicion.

00:39:30.460 --> 00:39:32.160
Of course the Dart
has its own VM.

00:39:32.160 --> 00:39:36.250
It is not the JVM, and so
embedding those things, it's

00:39:36.250 --> 00:39:37.110
not trivial.

00:39:37.110 --> 00:39:40.480
And I think that maybe a better
plan is to do something

00:39:40.480 --> 00:39:42.890
outside of the space, like
a REST web service or

00:39:42.890 --> 00:39:45.730
something like that.

00:39:45.730 --> 00:39:49.160
OK, so we're out of questions
and I know that we're going to

00:39:49.160 --> 00:39:51.300
get kicked out of the studio
pretty soon because

00:39:51.300 --> 00:39:53.080
Wednesday's like the busiest
day, and like

00:39:53.080 --> 00:39:54.330
everyone wants to have--

00:39:54.330 --> 00:39:55.745
TODD TURNIDGE: I thought of
one more thing I'd like to

00:39:55.745 --> 00:39:57.400
tell people.

00:39:57.400 --> 00:39:59.730
Look for a new stack trace
format from the VM.

00:39:59.730 --> 00:40:00.220
JJ BEHRENS: Wow.

00:40:00.220 --> 00:40:01.840
TODD TURNIDGE: Yeah, so far
the stack traces have been

00:40:01.840 --> 00:40:03.470
very, very ugly.

00:40:03.470 --> 00:40:05.730
They have lots of extra
characters and are

00:40:05.730 --> 00:40:07.080
really hard to read.

00:40:07.080 --> 00:40:11.080
And I checked in today a new
version of stack traces, so as

00:40:11.080 --> 00:40:14.160
your programs crash it should
be more pleasant.

00:40:14.160 --> 00:40:16.980
JJ BEHRENS: You know, I've
never seen a stack that I

00:40:16.980 --> 00:40:18.790
really thought, wow, this
is just pleasant.

00:40:18.790 --> 00:40:20.210
TODD TURNIDGE: A beautiful,
pleasant-- no, it isn't

00:40:20.210 --> 00:40:22.360
pleasant, it's never pleasant
to get a stack trace, but at

00:40:22.360 --> 00:40:25.650
least they should be legible.

00:40:25.650 --> 00:40:27.300
So I decided that needed
to change.

00:40:27.300 --> 00:40:29.690
I'll let you go back to
what you were saying.

00:40:29.690 --> 00:40:32.720
JJ BEHRENS: Yeah, well, that's
great, and especially C++ back

00:40:32.720 --> 00:40:33.840
traces, like--

00:40:33.840 --> 00:40:34.640
TODD TURNIDGE: They
can be bad.

00:40:34.640 --> 00:40:35.920
JJ BEHRENS: Yeah, just
a little bit.

00:40:35.920 --> 00:40:37.150
TODD TURNIDGE: But you know,
we were exposing internal

00:40:37.150 --> 00:40:39.260
names for things, so they'd see
things in the stack traces

00:40:39.260 --> 00:40:41.360
that wouldn't necessarily even
make sense from a Dart

00:40:41.360 --> 00:40:42.000
language perspective.

00:40:42.000 --> 00:40:44.370
It's really important that the
stack trace actually be

00:40:44.370 --> 00:40:46.030
something that you can
understand from a Dart

00:40:46.030 --> 00:40:49.040
language level and it have nice
white space in it so you

00:40:49.040 --> 00:40:51.540
can parse it with your eyes.

00:40:51.540 --> 00:40:54.630
JJ BEHRENS: OK, so for you C++
programmers out there, this is

00:40:54.630 --> 00:40:55.540
the guy to thank.

00:40:55.540 --> 00:40:57.980
TODD TURNIDGE: No, no, not the
C++, the Dart stack trace.

00:40:57.980 --> 00:40:58.830
JJ BEHRENS: Oh, Dart
stack trace.

00:40:58.830 --> 00:40:59.410
TODD TURNIDGE: I'm talking
about the Dart

00:40:59.410 --> 00:40:59.720
language stack traces.

00:40:59.720 --> 00:41:01.240
JJ BEHRENS: Oh, wow.

00:41:01.240 --> 00:41:02.180
OK, well.

00:41:02.180 --> 00:41:03.300
Now we can all love you.

00:41:03.300 --> 00:41:05.770
TODD TURNIDGE: Yeah,
that's the plan.

00:41:05.770 --> 00:41:07.750
JJ BEHRENS: So that's
fantastic.

00:41:07.750 --> 00:41:08.750
Thank you guys for coming.

00:41:08.750 --> 00:41:10.860
This was a great show.

00:41:10.860 --> 00:41:13.740
Thank you for visiting,
and thank you for

00:41:13.740 --> 00:41:15.270
taking all of my questions.

00:41:15.270 --> 00:41:18.750
We will see you guys next time,
two weeks from now.

00:41:18.750 --> 00:41:20.910
We're still debating
on which day.

00:41:20.910 --> 00:41:23.180
We might be moving to Thursdays
in the morning.

00:41:23.180 --> 00:41:26.040
I know that a lot of Europeans
missed this, but this was the

00:41:26.040 --> 00:41:31.641
only time we had free in the
studio, but we'll announce our

00:41:31.641 --> 00:41:34.580
next episode of Dartisans.

00:41:34.580 --> 00:41:35.830
Thanks a lot, guys.

