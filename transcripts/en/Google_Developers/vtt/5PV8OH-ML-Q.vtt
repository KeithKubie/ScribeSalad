WEBVTT
Kind: captions
Language: en

00:00:22.989 --> 00:00:37.340
&gt;&gt; Itai: Hello everybody. My name is Itai, I am an engineer from Google Tel Aviv offices, and in the next hour or so

00:00:37.950 --> 00:00:48.350
I'll discuss the Google Visualization API, specifically the integration with the GWT library and some other advanced

00:00:48.349 --> 00:00:59.069
topic as time permits. So the other advance topics would be latency some tips and tricks on how to improve the latency

00:00:59.919 --> 00:01:07.870
when you use this visualization API, and in addition some tips about security, some things that might be important to

00:01:07.869 --> 00:01:18.529
know if you implement data source for this API, and a few words about the date of the object, that it's not widely

00:01:18.599 --> 00:01:30.579
known as it should be, maybe, questions at the end. So, a few words about the, the Visualization API, just so we start

00:01:30.579 --> 00:01:41.479
from the same place, this API is a tool set, that's suppose to enable it to make it easy to visualize structured data

00:01:41.479 --> 00:01:53.409
on the web, that's needs a JavaScript based API in it's native way. And, the main component it's a gallery of many

00:01:53.409 --> 00:02:05.559
visualization that share the same API. So again, although there are many visualizations and charts and some of them

00:02:05.559 --> 00:02:11.830
are flash base, some of them are image base, some of them browser charts, they all share the same API, you just load

00:02:11.830 --> 00:02:18.810
them from the, or with the Google or the, I'll show some examples in a second, and after you load them on the same way

00:02:19.940 --> 00:02:26.009
for no matter what the implementation is, you just create a new JavaScript object which is the charts that you want to

00:02:26.009 --> 00:02:32.539
use and the constructor you give it a parameter of the 'div' the web element in which you want it to be displayed, and

00:02:32.540 --> 00:02:39.919
then you just called the dual function of this chart that accept two parameters. The first is mandatory, which is the

00:02:39.919 --> 00:02:47.949
data table which I will discuss a bit later and it's the same object for all of the, the same class for all of the

00:02:47.949 --> 00:02:55.309
visualizations, and the second one is the option that there are specific for any type of visualization. Some of the

00:02:55.309 --> 00:03:05.789
charts have event mechanism for selection events or other events that might be filed from the visualization and you

00:03:05.790 --> 00:03:12.429
have like, the same model for all of the events for all of the visualization so you don't have to learn from each one

00:03:12.430 --> 00:03:21.509
of them a new different way to handle them. There is another common thing which is the option to get the data from

00:03:21.899 --> 00:03:28.370
what we call data source, so you don't have to have all of the data that you want to visualized inside your web page

00:03:28.369 --> 00:03:36.640
but you can just have the chart and the options configured in the page, in the web, in the page, sorry, and then you

00:03:36.639 --> 00:03:43.139
can send the query to get the actual data that you want to present and present it. In additions, third parties can

00:03:43.139 --> 00:03:53.649
also create, wrap their charts in this API and then you can use them also if they are in the gallery. So, let's see a

00:03:53.649 --> 00:04:06.399
few examples before we start, [searching], not here, so this is in our documentation this is the gallery of all the

00:04:06.899 --> 00:04:14.970
charts, you see there are maps and charts, and tables and all that stuff. Let's take a quick look about one of the

00:04:14.970 --> 00:04:23.729
most interesting ones which is the Motion Chart, this is a flash base chart. Some of you may have seen it, it's used

00:04:23.729 --> 00:04:35.209
within Google in many places and through this API you can see it, you can use it in your site, you can set chart with

00:04:35.209 --> 00:04:45.199
five dimensions of XY, color, size of the bubble and the time as you can see here, so this is like a very elegant and

00:04:45.239 --> 00:04:53.099
very sophisticated chart. Let's take a look on the code that is used in this page so, this is the whole code that you

00:04:53.099 --> 00:05:00.569
need to do in order to show this chart, what we see here in most of the code is just populating the data, because here

00:05:00.569 --> 00:05:06.329
it's part of the page, again it doesn't have to be this way but this is just an example, so the first thing we do, we

00:05:06.329 --> 00:05:15.199
just edit script tag brings the loader of the JavaScript APIs of Google, it's the same loader for all of them. Then we

00:05:15.199 --> 00:05:21.749
call a Google DocLoad function specifying the component, the library, in this case the visualization library because

00:05:21.749 --> 00:05:28.879
there are others and the specific packages that use only the motion chart, but I could specify as many visualizations

00:05:28.879 --> 00:05:39.200
as I want it to on the same load function. Then I use the, when the API, when the JavaScript code is loaded to the

00:05:39.199 --> 00:05:47.959
page, I create a data table, I populate it to the data, maybe the important thing about data table to know is that,

00:05:49.559 --> 00:05:55.709
data table is a two dimension of table, it has columns and rows, it has many columns it has many rows as you want, but

00:05:55.969 --> 00:06:03.479
columns has types, so each column is specified as you can see here on the top of the screen, type and optionally

00:06:03.839 --> 00:06:12.799
label, type can be streamed, number, date, day time, blow down and a few more, but it's a set of pretty fine types but

00:06:12.799 --> 00:06:20.839
each column and each cell of this column has to be from this type. Rows can be as many of them as you want and the

00:06:20.839 --> 00:06:30.100
limit is about the cells so again the typing of the cells. So after it you just create a data table with all of the

00:06:30.099 --> 00:06:38.259
data I want to present, I create a chart, a motion chart and in this case, place it on the div that I want to and call

00:06:38.259 --> 00:06:45.759
the dual function with the data element and some optional parameter in this case, it's the width and height that I

00:06:45.759 --> 00:06:52.679
want to create this chart with, and that's it and I'm set. So, this is the whole code that is actually used for

00:06:52.679 --> 00:06:59.419
displaying this chart we see here. Just for another example to, so you can see how it's similar no matter what the

00:06:59.619 --> 00:07:09.359
chart is, let's look at the area chart. This is a pictographic base chart that you can use from the gallery, it's

00:07:09.359 --> 00:07:17.179
animated you can click on this. You can also catch these events and list for these events and react to when the user

00:07:17.179 --> 00:07:27.000
clicks, and not only to the two div that are built in. The code as you can see it here is much the same, we bring up

00:07:26.999 --> 00:07:33.209
the loader of the JavaScript APIs, we load in this case not the motion chart but the area chart, we create the data

00:07:33.209 --> 00:07:41.819
table object we populated it with data and we create a new chart and draw it with the data, here the in addition to

00:07:41.819 --> 00:07:48.589
the width and height and also specify that the legend is at the bottom and the title is whatever. But its quiet the

00:07:48.589 --> 00:07:59.059
same as you saw before. So, this is how it works in Javascript and now let's see how it's done in GWT. So the first

00:07:59.059 --> 00:08:07.000
thing that you would like to do if you want to use GWT is to load the, the wrapping java, the wrapping in the library,

00:08:07.809 --> 00:08:18.219
so all you have to do is to Google for, gwt-google-apis and then you get to this page, in which you can find wrapping

00:08:18.309 --> 00:08:27.609
library for each one of the JavaScript API that Google provide, search, languages, maps and so on. One of them is the

00:08:27.609 --> 00:08:37.880
visualization API; you download the zip to your computer and place the java somewhere accessible. Then the next thing

00:08:37.880 --> 00:08:51.839
I did is I created GWT project in a clips, just as you saw today in the keynotes, three clicks and you are there. And,

00:08:51.839 --> 00:09:00.130
then in other to be able to use visualization from this project, I have to do initially two things, the first one I

00:09:00.130 --> 00:09:07.049
type, I go to project properties and I add this java that I just downloaded to my computer, I add it to the java bill

00:09:07.049 --> 00:09:15.970
box very simple. By the way all of the instruction, all of the code and all of example I'm going to show now, are part

00:09:16.049 --> 00:09:22.739
of, you can find them in the documentation of the GWT library or of the JavaScript library, it depends on the context.

00:09:22.739 --> 00:09:32.219
But all of these things are covered in the documentation. So the next thing that I have to do is to inherit from

00:09:32.709 --> 00:09:41.289
Google visualization, this class is also part of this library of the java that we downloaded and then you are all set.

00:09:42.190 --> 00:09:50.809
This is the GWT text and mail file as you can see there in the project, this is the configuration file of this

00:09:50.809 --> 00:10:00.169
project, so to tell GWT how to work with this. Here you can see this line here is the entry point, this is the class

00:10:00.169 --> 00:10:09.189
that is going to be loaded and used when this project goes up, so let's see first what's its doing and then let's have

00:10:09.190 --> 00:10:29.190
a brief look at the code. So, I just started the project, with the embedded mode, you can see here on GeoMap when the

00:10:29.190 --> 00:10:39.489
values represent the, the color represent the values, okay so you see that the darkest country is Russia here is 700

00:10:39.929 --> 00:10:51.029
and Brazil 400 and so on. So this is also a flash base GeoMap, but again the API is JavaScript natively and now we're

00:10:51.029 --> 00:11:02.649
gonna see how it's done in java with GWT. So this class is the entry point class, you saw that we mentioned it in the

00:11:02.649 --> 00:11:11.589
GWT xml file, and so when everything is loaded which calls the on model load function and that you can see here in

00:11:11.589 --> 00:11:19.500
which we are doing one simple thing, and in our case that I just want to show this chart, so I call visualization fill

00:11:19.500 --> 00:11:28.320
down here. I call load visualization API and I specify the callback class to be called when the visualizations are

00:11:28.319 --> 00:11:38.719
loaded and I specify a list of visualization and in this case it's only the GeoMap. Now when this is loaded to the

00:11:38.719 --> 00:11:48.309
browser the unload callback class is activated and they run functions specifically, and then let's see what we are

00:11:48.309 --> 00:11:56.549
doing there. So very similar to the JavaScript we create a data table, we've seen that in a minute how it's done and

00:11:56.549 --> 00:12:02.789
then we set up options that are specific to the GeoMap, and then we create a new instance of GeoMap with the data

00:12:03.039 --> 00:12:10.709
table and options and add it to the panel and that's it, this is all the call that we have here, let's see, create

00:12:10.709 --> 00:12:18.069
table as we said. So it's very very similar to what we have in JavaScript, we just create a data table object using

00:12:18.069 --> 00:12:26.079
the create static method and we add rows, we add columns with types and optionally labels as we see here, we set the

00:12:26.079 --> 00:12:36.059
values of the cells, it depends on the types and return the data table that we created, this is the first thing. As

00:12:36.059 --> 00:12:41.829
about the options we saw that we call the create map options, this is the functions that is down here, so we just

00:12:41.919 --> 00:12:50.279
create a GeoMap options object, and then we can set all of the pre defined options. So, if I just go to auto complete

00:12:50.279 --> 00:12:57.130
here, I can see all of the options, you know colors, data mode, height, width and so on, in this case I left all of

00:12:57.129 --> 00:13:04.450
the defaults, I only said that their mode is regent, the other options is markers. So you see circles on some specific

00:13:04.449 --> 00:13:15.849
Geo locations instead of countries. And, this is all you have to do in other to see these example which is again very

00:13:15.849 --> 00:13:27.399
similar to JavaScript, now we're gonna show you another example that is a bit more complicated and so let's move on

00:13:27.619 --> 00:13:35.029
and change the class here but instead of using this entry point, I would use the other one [searching] not like this,

00:13:35.029 --> 00:14:00.429
[typing] this is all you have to do. The nice thing about GWT is you don't have to compile anything when you use the

00:14:00.429 --> 00:14:19.419
mouse as I just did, I have to just save it and go here and pray. Yeah, okay. So, what do we have here? Here we have 3

00:14:19.419 --> 00:14:30.190
charts, the first 2 of them are browser charts using pictographic, the pie chart as you can see is 3D and the reason I

00:14:30.189 --> 00:14:41.859
say it is that I want to show you how I did it in some special way, the other one is just a simple bar chart, but I

00:14:41.859 --> 00:14:54.339
also use the events, so I kind of combine them together. So if I click now on the slides of the pie chart, I made it

00:14:54.339 --> 00:15:03.399
so the same selection is set on the other chart as you can see there. If I click on sleep, you see the sleep here too

00:15:03.399 --> 00:15:17.719
and so on, just you can also do this, or don't do anything [laughter], but it's nice [Laughter], alright and this why

00:15:17.719 --> 00:15:25.979
people like this job. The other chart that you see at the bottom is the, what we call annotated timeline, you might

00:15:26.069 --> 00:15:32.529
know it from Google Finance so it's the general version of the same chart but it's not for finance, you can use it for

00:15:32.529 --> 00:15:42.329
your own data and in this case, this is the Terry Gilliam movies if I'm not wrong. So you can see annotation whenever

00:15:42.329 --> 00:15:50.709
it makes sense, you can just create the annotation with that on your data table, create columns of annotation. It's

00:15:50.709 --> 00:16:01.979
all described in the documentation of this chart which columns means what and so on, and you can catch events. So when

00:16:01.979 --> 00:16:14.949
to user select the different range, like here [searching] it doesn't work, let's try here, never mind. So when the

00:16:14.949 --> 00:16:28.689
user change the range, okay I want to show it right [searching] okay, so when you change the range, so you see that

00:16:28.739 --> 00:16:36.229
the event was filed and I can catch it and alert it or do whatever I want to with it.

00:16:36.229 --> 00:16:43.549
Another interesting thing about this chart here is, that the data is not hard coded in the page as it's in the example

00:16:43.549 --> 00:16:51.699
that I showed before so I want to show this as well, so let's take a look at the code. The first thing to notice is

00:16:51.699 --> 00:17:00.399
that I called the Load Visualization API but with 3 packages, the annotated timeline the pie chart and the bar chart

00:17:00.399 --> 00:17:08.199
just one after the other using kind of java stuff and you can specify again as many of them, you can create them, you

00:17:08.199 --> 00:17:15.139
can specify in different load functions, but it makes sense to call them all at once, it's just more efficient. Then

00:17:15.140 --> 00:17:22.989
when there are back what I do here, I create a pie chart and add the select handler that you would see in the second,

00:17:23.719 --> 00:17:31.229
after I edit to the panel I also create the bar chart which is nothing special about it and I also send the Query to

00:17:31.229 --> 00:17:42.599
the annotated timeline so when this gets back I will draw it, so let's see the details [searching], so this is the

00:17:42.599 --> 00:17:51.949
table that is hard coded for the first 2 charts, nothing special to say about it. Let's take a look at the options, so

00:17:53.510 --> 00:18:00.109
I told you about the 3D, it's not only because I wanted to show that we can set this chart with 3D, but I wanted to

00:18:00.109 --> 00:18:08.349
show that in some exam, in some cases you might find that in the JavaScript API there are some options that are not

00:18:08.520 --> 00:18:16.469
wrapped in the GWT library, because the GWT library is you know is always, almost always might be a step behind

00:18:16.949 --> 00:18:26.040
because, we have to add any option, we cannot add them before we add to the JavaScript, the only options had to be

00:18:26.039 --> 00:18:31.799
added to the JavaScript and then when they are publish we publish the JavaScript, the java api, the java library and

00:18:31.799 --> 00:18:38.199
distribute it so, it might take a while until all of the functionalities is on the GWT, but if you see that some

00:18:38.199 --> 00:18:48.010
functionalities is not there, you can wrap it on your own as I show now. So in this case instead of specifying set

00:18:48.010 --> 00:18:57.769
3D=true as a code because it is wrapped, I use the native way is a set option is 3D true? And, the same thing with

00:18:57.770 --> 00:19:08.140
colors as you can see here to overwrite the default colors. How do I know which option is available? If we already

00:19:08.140 --> 00:19:16.579
wrap them so we can just auto complete on the clips and see the functions that are available but if not, you can just

00:19:16.579 --> 00:19:24.819
go back to documentation and for each visualization you can see, configuration options, and here you can see all of

00:19:24.919 --> 00:19:31.549
the configuration axis color, the type, if it's a string or object and so on or number, all of the option to configure

00:19:32.969 --> 00:19:39.619
this chart and this is available on the same format for all of the chart so you can just go there, find the one that

00:19:39.669 --> 00:19:54.380
you need and if it's not wrapped you can just use the native set option, function. [Searching]. So about this Select

00:19:54.380 --> 00:20:01.640
Handler, in this function we see how we create a select handler so this is very simple as simple as defining a new

00:20:01.640 --> 00:20:08.549
create handler on select handle. The unselect function would be called whenever the user select something on this

00:20:08.630 --> 00:20:16.140
chart, so notice that not all of the chart have select events, it's also specified in the documentation but if there

00:20:16.140 --> 00:20:23.159
are image base chart so there is nothing like selection we cannot let you know if something, if the user cannot

00:20:23.209 --> 00:20:32.159
interact in fact with the chart, but if it's flash based or JavaScript based, then we file this event and then what

00:20:32.159 --> 00:20:39.549
I'm doing here is just I'm setting the bar chart selection to be the same one as of the pie chart selection, as simple

00:20:39.549 --> 00:20:47.000
as that. And again you don't have to do this, you can also say okay I want to open a new page with this information,

00:20:47.000 --> 00:20:53.549
the important thing is that you have a JavaScript function that it's been called when the user select something or do

00:20:53.549 --> 00:21:01.489
any other interactions that this chart support, and in addition to this you have the data, you know which cell of

00:21:01.489 --> 00:21:07.209
underline data table was called, so is not only that you get the value, you know the actual cell in the data table,

00:21:07.209 --> 00:21:14.419
then you can, if you know that each row represent something you can go from there to the other cells that mean

00:21:14.510 --> 00:21:23.319
anything and use them in other to do something meaningful. And the last thing that I want to show here, in this

00:21:23.319 --> 00:21:34.559
example is the way that I got the data from Google spreadsheet in order to display the movies of Terry Gilliam, so

00:21:36.159 --> 00:21:44.510
here I define the data url, which is Google spreadsheet but it can be also data source that you implement with your

00:21:44.510 --> 00:21:53.419
data on your site, tomorrow there is another section about how to implement data sources of this API but it's fairly

00:21:53.419 --> 00:22:01.669
easy and there are already some libraries that do most of the job for you. So in fact most of the things that you have

00:22:01.789 --> 00:22:11.049
to do is to create data table as we saw here, all of the other things are taken care of. So you create a query object

00:22:11.049 --> 00:22:19.829
with the data table, sorry with the data url of the data source and you called the send request, the send method with

00:22:19.829 --> 00:22:28.939
a callback class as we see here inline I created the un-response, I implement the un-response function, this function

00:22:28.939 --> 00:22:35.289
is called when the response get back from the data source with the actual data that you want to present and if

00:22:35.380 --> 00:22:42.569
everything goes well I can just, call response and get data table and I get the data and from here it doesn't matter

00:22:42.569 --> 00:22:54.009
that you get the data from anywhere remote and not even create it in the, locally on the browser. In addition, I also

00:22:54.010 --> 00:23:04.729
added here some, the event, the range change handler, so whenever the user change the range selection I can do

00:23:04.729 --> 00:23:12.409
anything I want and in this case I just select it but of course this is not the thing that you would like to do.

00:23:12.409 --> 00:23:30.560
[Searching] So that's about it, about the GWT integration. You can also wrap your own visualization or wrap unwrapped

00:23:30.659 --> 00:23:38.299
methods and events, the library is open source so if you see that something is missing not only that you can maybe

00:23:38.390 --> 00:23:47.939
contribute to it, but also you can just take a look and copy the code and locally create the thing that you miss. So

00:23:47.939 --> 00:23:54.929
again just to wrap it up, using a visualization is as simple as create a new chart, and create a data table and

00:23:54.929 --> 00:24:03.599
options, creating a data table is just like creating an add columns and rows, add the values. Configurations can be

00:24:03.599 --> 00:24:14.559
set using the options. The options object, data can be requested from a remote data source using the query object

00:24:14.559 --> 00:24:24.989
event, most of them are already wrapped so you just add event handler and do whatever you want when it's filed.

00:24:28.029 --> 00:24:37.890
Unwrapped options can be used with the set options and function. [Searching] And that's it about the GWT integration

00:24:37.890 --> 00:24:53.289
and some other topics now. Let's start with Latency, it's a good time to . So as we just show before any chart can be

00:24:53.289 --> 00:25:00.719
displayed there are some things that have to happen before. The first thing that has to be loaded if is, sometimes

00:25:00.719 --> 00:25:07.189
it's just the main library that include the data table and the query and the call library but if it's some

00:25:07.189 --> 00:25:14.599
sophisticated visualization like the motion chart that we saw or any other flash based, so all of the resources have

00:25:14.599 --> 00:25:22.239
to be loaded all the same. Afterward everything is loaded you create a data table and you populate it with data and

00:25:22.239 --> 00:25:29.760
this means that you might need to call remote data source, sometimes you just want to create it locally on the browser

00:25:30.099 --> 00:25:36.859
or maybe to generate it dynamically but when you generate the page, so it's not using the data source, it's something

00:25:36.859 --> 00:25:45.609
that happens on your page when the page is rendered, and only then you can draw the chart. And the first 2 steps can

00:25:45.609 --> 00:25:54.959
be sped up so let's see how it's done. The first thing we saw that there is a single way to load the visualization and

00:25:54.959 --> 00:26:02.919
all of the other APIs actually, so if you are using this step is correct also for other API that you might use, you

00:26:02.919 --> 00:26:11.549
might wrap in GWT, not in GWT, sorry, you might use in Google. So the first thing is that you just call a script of

00:26:11.549 --> 00:26:17.729
jsapi loader and then when you have this script in your browser you can call the google.load with the parameters of

00:26:17.919 --> 00:26:24.959
the libraries that you want, the version and all of the packages. The result of this process is 3 http requests, 3

00:26:24.959 --> 00:26:33.309
round trips, the first one to bring the jsapi loader itself which is a very light one but still around it, then

00:26:33.319 --> 00:26:41.159
another tool from the google.load. The first one is to get the current version of the cached URL of the current

00:26:41.209 --> 00:26:47.729
version of all of the library that you want, and the second one that can be cached by the browser is to actually get

00:26:47.809 --> 00:27:00.339
all of the JavaScript base. But again the result of this is a 3round trips. So the reason of another new feature of

00:27:00.339 --> 00:27:08.390
this loader that you can read the details in the documentation, and I'd let you skip the second one which is a very

00:27:08.390 --> 00:27:14.520
light one but still another round trip that cannot be cached in the browser and it saves few milliseconds and might be

00:27:14.519 --> 00:27:23.609
important if you have the, I don't know many pages, many users, this latency is important, one lesson that we know in

00:27:23.609 --> 00:27:32.899
Google. So as you can see here, you just add to the jsapi script, another parameter in the JSON format of auto load

00:27:32.899 --> 00:27:40.819
and then all of the models and the packages that you want to load inside into this page, this will save you one call.

00:27:41.349 --> 00:27:48.899
The disadvantage of this approach is that you have to really type all of this JSON and usually you spend more time on

00:27:49.489 --> 00:27:57.909
setting it up than the latency of all of the user that we would see this page ever. So one nice tool that there is now

00:27:57.909 --> 00:28:05.410
you will find it in the documentation, there is UI so you can just specify all of the features all of the libraries

00:28:05.409 --> 00:28:12.729
and all of the packages that you want to include and then the result is this line that you see here you just copy

00:28:12.729 --> 00:28:20.250
paste into your page and then you save all of the mistakes, and this way we can save a dozens or hundreds of milli

00:28:20.250 --> 00:28:28.119
seconds depending on the internet connection on the users internet connections in fact .Another thing is how you

00:28:28.119 --> 00:28:34.789
create the data table, we said that one option is to go to our remote data source and I will explain in a few minutes

00:28:34.789 --> 00:28:42.059
about it, but let's say that you create it locally on the browser, so in this case there are two ways to do it. The

00:28:42.059 --> 00:28:49.409
first one is what we saw in the example so far. You just create a new data table and populate it with data, add

00:28:49.409 --> 00:28:56.589
column, add rows and set the cell values. If you have a very small and static data then fine, you know it don't take

00:28:56.589 --> 00:29:06.859
time, but if you have hundreds or thousands of lines data and more than a few columns, the browser needs to process

00:29:06.859 --> 00:29:15.439
all of this functions and it takes time, although JavaScript is much faster than it use to be it's still takes time.

00:29:15.439 --> 00:29:31.099
There is an alternative which is using the JSON object. The result is about double and there are half of the latency

00:29:31.369 --> 00:29:39.069
that it takes to create a data table the bigger the data table is, the impact is bigger of course, and you just create

00:29:39.069 --> 00:29:47.209
a data table using the JSON object in a single command and then everything would happen behind the scene and you get a

00:29:47.209 --> 00:29:53.019
data table with all of this features. The annotation the exact details I wound not get into it now, and just the same

00:29:53.599 --> 00:30:00.429
so I would describe it in the documentation and you can get the same results so everything that you can do with the

00:30:00.429 --> 00:30:11.399
data table set column or set cell you can do with this JSON notation, so it's just a matter of you know programming

00:30:11.679 --> 00:30:20.079
and if you have a server that generate this code anyway, so once you want to maybe one time you want to sit down and

00:30:20.189 --> 00:30:27.689
do something that generate JSON instead of generating close to add cell, add cell and so on.

00:30:27.689 --> 00:30:41.930
These are the 2 tips about latency, Security, more correctly Privacy. So I already mention that there is something

00:30:41.929 --> 00:30:48.900
called data source and in most of the cases when you have dynamic data or you have a large data, you don't want to

00:30:48.899 --> 00:30:54.609
have it as part of your page, you don't want the page to be rendered with all of this data, you want the page to be

00:30:54.609 --> 00:31:02.540
rendered only with the, I don't know the titles and the interesting stuff in it and if you have a chart you want only

00:31:02.539 --> 00:31:13.910
to load, to hard code the chart, the options and then write a line that saying queries and send, get data from remote

00:31:13.909 --> 00:31:23.949
url and present it which is nice but there is a problem. The question is if you can get to this url to get to the data

00:31:23.949 --> 00:31:32.170
and maybe some other people can also do it, and until now we use some technique called Script Injection to get the

00:31:32.169 --> 00:31:40.669
data. This techniques enable access from what we call cross site access, so you can get the data from other domains

00:31:40.799 --> 00:31:47.199
that yours, why it's good for, it's good for a few cases one them is gadgets, gadgets is always rendered in what is

00:31:47.199 --> 00:31:55.709
called sub domains, they are always in a form, from different domains than your page, it means that if it was only

00:31:55.709 --> 00:32:02.189
possible to get data from your domain you would not be able to use gadgets. And, another good reason that we use this

00:32:02.189 --> 00:32:11.000
technique is because Google spreadsheet are very good data source, very huge data source, so people mostly keep data

00:32:11.000 --> 00:32:20.659
Google spreadsheet and then access from the web page to get this data on the page, again this is not the same domain,

00:32:21.000 --> 00:32:29.569
normal http get request the browser do not send them if there are to a different domain. But again the problem is that

00:32:29.569 --> 00:32:36.969
if you can get this data from different domain then maybe some else can do. There are known techniques and known ways

00:32:37.389 --> 00:32:44.549
to prevent this, but this is something that you should be aware if you're using data sources of your data, and of

00:32:44.549 --> 00:32:51.879
course if this is a public data then there is no issues of course and no issue at all. So we have just introduced in

00:32:51.880 --> 00:32:58.849
the latest version of the JavaScript and the protocol that we announce a few days ago and a new mode that we call

00:32:59.039 --> 00:33:06.429
restricted mode. This let you use in this case, what we are doing is the request from the java source libraries sent

00:33:06.619 --> 00:33:13.909
by xhr, so it's only for the same domain. You should use this mode if you have a data source and you have your web

00:33:13.909 --> 00:33:20.499
page and that's served from the same domain and you want to make sure that nobody from any other domain, gadgets or

00:33:20.500 --> 00:33:28.369
what it is can access this data. So in this case you would use the enter request and then you would specify that you

00:33:28.369 --> 00:33:35.859
want the request to into the xhr mode in AJAX, the browser will let it go because it's on the same domain, but the

00:33:35.859 --> 00:33:42.549
most important thing is that when the browser when the JavaScript client would send this request it would add some

00:33:42.549 --> 00:33:49.239
header some custom header on this request and this custom header is something that together with cookie authentication

00:33:49.279 --> 00:33:54.949
that you anyway need to do if you want to make sure that you want, you know only validated users and only

00:33:54.949 --> 00:34:04.479
authenticated user can see this data so. So there is no way that hackers can send request from different site to your

00:34:04.479 --> 00:34:13.880
site and still have all of these cookies and these header, no way. So on the service side on the data source, all you

00:34:13.880 --> 00:34:19.919
have to do is to make sure that there is this, if you want this data source to support only your domain all you have

00:34:19.919 --> 00:34:28.270
to do is to make sure that the user is authenticated and that the header, the custom header is there and you are set

00:34:28.270 --> 00:34:37.010
and you know that the request came from the same domain and you can return the response to the client. In the new

00:34:37.010 --> 00:34:44.180
JavaScript, java library that is an open source and it was announced a few days ago and I'll discuss in a different

00:34:44.179 --> 00:34:50.569
session tomorrow, this is already implemented so if you're using this one you don't have to, to do too much but even

00:34:50.569 --> 00:34:57.709
if you do it on yourself and in other language or application you can just take a look and see how it's done, it's

00:34:57.709 --> 00:35:08.120
documented and it's very simple and reliable. In the client side, by the way to decide if you want the request to be

00:35:08.119 --> 00:35:15.949
an xhr script injection it's just another new parameter, if you don't specify this parameter as it was the case for

00:35:16.069 --> 00:35:23.270
any code that was written until few days ago so we just automatically decide if it's with the same domain that we sent

00:35:23.270 --> 00:35:28.599
the request or if it's with the xhr and we add these custom, custom parameter, this request was for a different domain

00:35:28.739 --> 00:35:35.330
we just use script injection so that the browser will not prevent it. This is not a security risk here because anyway,

00:35:35.479 --> 00:35:41.199
in your data source this is the place that you have to make sure, if you want to prevent request from different

00:35:41.199 --> 00:35:54.909
domains. Another thing that I'll cover just in a few words, there is some tool of Google called, Google secure data

00:35:54.909 --> 00:36:04.260
connector as the same, you can find documentation about it, it's kind of, the thing is that it let's Google services

00:36:04.369 --> 00:36:14.330
like app engine, or Google spreadsheet or gadgets at Google sites to access data that is behind your vpm. So of course

00:36:14.329 --> 00:36:23.280
it doesn't happen like magic, you have to install some client which is an open source, some agents software that it's

00:36:23.280 --> 00:36:37.179
an open source in your firewall to describe exactly [clear throat] sorry, you have to describe exactly the resources

00:36:37.359 --> 00:36:44.510
and the user that you want to be able to access these resources behind your firewall. But once you give done this so

00:36:44.510 --> 00:36:53.090
Google spreadsheet and app engine and sites can access this data and present it so, since there gadgets that wrap all

00:36:53.089 --> 00:37:03.679
of this visualization that we saw [searching] we have in addition to this gallery of visualization and there is

00:37:03.679 --> 00:37:10.819
another gallery of gadgets, that can generate gadget are wrapped any one of this visualization. You can also write

00:37:10.819 --> 00:37:16.789
your own custom gadgets if you want to specify some different options and then default ones that reset. But the nice

00:37:16.790 --> 00:37:24.789
thing is that when you use gadgets you can let the user specify the options you know with the UI of gadget prefs , and

00:37:24.790 --> 00:37:34.889
specify the data source, url and everything. So, the nice thing here is that the client library is already supporting

00:37:34.889 --> 00:37:46.520
this the way that a request sent to behind this, to this STC stuff , all that you have to do is to add TQRT which

00:37:46.520 --> 00:37:54.790
stands for table query which are all of the parameters of this API request type equals make request. Make request is a

00:37:54.790 --> 00:38:02.119
technique that is used by Google gadgets to get data and then the request is not sent from the browser itself, but

00:38:02.959 --> 00:38:09.610
through the container the server that serve this gadgets with all of the security validation and everything and it's

00:38:09.609 --> 00:38:20.409
sent through the vpm through this STC to your data. So it's safe the only thing to make sure that of course that the

00:38:20.409 --> 00:38:34.969
configuration of this agent. And last word about security, so Data Policy: Some, most of the visualizations do not

00:38:35.290 --> 00:38:41.189
send any data outside of your browsers, this includes the interactive charts, the one that the, the JavaScript ones

00:38:41.189 --> 00:38:49.829
that you saw the flash ones. So how it happens, you load the visualization engine from the web from Google, you bring

00:38:49.829 --> 00:39:00.049
the data table from the page or from the data source and then you call the dual function, the chart is rendered on

00:39:00.050 --> 00:39:07.369
your browser but in some cases, the data you sent to a different service, for example the image base chart of Google

00:39:07.369 --> 00:39:15.229
using the Google chart API incase you know it and which these are charts that are rendered by url, it's specified in

00:39:15.229 --> 00:39:21.639
the url, all of the parameters, all of the pie charts and the legend should be this and this and the data is that and

00:39:21.639 --> 00:39:31.119
that, and all of this url is sent to Google servers, it's not kept there but it's sent outside of your browser and get

00:39:31.119 --> 00:39:37.030
back to you and the same goes for third parties chart, some of them send the data to their server in order to do some

00:39:37.030 --> 00:39:46.879
pivoting and sophisticated stuff. So this is something to know okay, the risk is something that you have to decide and

00:39:46.879 --> 00:39:55.250
[searching] , how can you tell, so you go to the visualization gallery that you saw before you just select anyone of

00:39:55.409 --> 00:40:04.810
the chart, say the motion chart and the last item here is, not this, one of the last is Data Policy, you just go there

00:40:04.810 --> 00:40:19.659
and see if you send data outside of the browser or not, that's it [searching] .. And the last thing we're going to

00:40:19.669 --> 00:40:29.909
cover in this session is Data View. So the ones that are familiar with SQL know the concept of Data View, of view in

00:40:29.909 --> 00:40:37.629
SQL and in this API we have something very similar. So far I only said, I all the time said you create the data table

00:40:37.629 --> 00:40:45.929
and you pass it to the chart and you create, you bring the data table from the remote data source or you'll bill it

00:40:45.929 --> 00:40:53.449
luckily but, this is data table, there is another object called data view, from you can pass it as you can see in the

00:40:53.449 --> 00:41:01.040
pass line here to the dual function of each visualization and for them it's just the same, they don't know that this

00:41:01.040 --> 00:41:09.199
is data view and not the data table. The difference is that you bill it on top of data table and the data is not

00:41:09.199 --> 00:41:15.880
replicated it's kind of a window of a view of a data table, you specify the column that you want to include in this

00:41:16.250 --> 00:41:25.130
view and you pass it to the chart and it's kind of an indirection okay, so the chart thinks that these are the columns

00:41:25.129 --> 00:41:32.089
that are in the table, it doesn't know that in the underline table there are more columns, what is it good for? We

00:41:32.089 --> 00:41:39.179
said that all of the chart using the same data table concept which is true, but each one of them expect a different

00:41:39.229 --> 00:41:46.060
columns, for example a pie chart would expect always 2 columns, the first one to be stringed which are the labels and

00:41:46.059 --> 00:41:53.620
the second one to be the actual values that is the slides take, but there are other visualizations for example the

00:41:53.699 --> 00:42:00.089
table visualization which is a very nice table that you can select cells and rows and you can sort and everything and

00:42:00.250 --> 00:42:08.670
but for the table we don't care about the column format, there can be as many columns as you want and they can be from

00:42:08.669 --> 00:42:16.239
any type we don't have to show we don't care. So what happens let's say that you have a page and you have 2 charts

00:42:16.239 --> 00:42:23.229
that you want to show, you want to show table, visualization and a pie chart, we'll take, the pie chart is only 2

00:42:23.379 --> 00:42:28.750
columns from the one that you want to show in the table, but if there was no data view, you have to do one of 2

00:42:28.750 --> 00:42:35.299
things, you have to do all that you sent to queries and big data tables on the first place it takes more time and more

00:42:35.399 --> 00:42:41.330
storage in your browser, or you could maybe create a data table and then maybe replicate it and remove some rows and

00:42:41.559 --> 00:42:51.209
some columns and so on. Using this data view, you can just create a data view specify the right columns, sorry and

00:42:51.530 --> 00:43:01.589
maybe you need to change the order of this columns and then you are set. Let's see a good example [searching], so this

00:43:01.589 --> 00:43:13.429
is by the way a very nice tool that is, you know it maybe sorry, it's called the AJAX API Playground, you can, it has

00:43:14.040 --> 00:43:22.899
examples and codes that you can play with for all of the AJAX APIs, again search, maps, visualizations, languages and

00:43:22.899 --> 00:43:31.719
so on and, you can actually take the code you see the code and play with it around the new code and you can save local

00:43:31.719 --> 00:43:41.739
copies under your profile, a very nice tool I use it all the time. So in this example what we see is we create a data

00:43:42.020 --> 00:43:51.969
table up here, we populate it with data and then we draw and which the result is this original data table, this is the

00:43:51.969 --> 00:44:01.049
table visualization and I can sort it, I can select rows, this is a very useful table but the fact is that it had 4

00:44:01.169 --> 00:44:12.159
columns and I want to have another chart here with only the age and the names of the people here so, I need to take

00:44:12.199 --> 00:44:23.260
only the first 2 columns and in this case you can see here I create a data view with columns 1, 0 and 1, which are 1

00:44:23.260 --> 00:44:39.769
and 2 as you know, you all like it and just pass this data view as the first parameter to the draw function

00:44:39.770 --> 00:44:51.250
[searching]. In addition to this you can also filter the rows not only the columns, you can set the rows, the row in

00:44:51.250 --> 00:44:57.329
excess of the underlined data table that we would be use in this view so you can do the same tricks not only for

00:44:57.639 --> 00:45:04.449
columns but rows based on their value. So as you can see here there is a function on data table called

00:45:04.449 --> 00:45:12.579
getFilteredRows, the return type of this is an array of indexes and not the actual rows but the indexes of the rows

00:45:13.169 --> 00:45:20.000
and you can specify as many filters as you want and combination you can specify column 2 value equal to 42, and like

00:45:20.000 --> 00:45:27.379
here, you can specify mean and max values instead of a single value, and you can create multiple of these as you can

00:45:27.379 --> 00:45:33.819
see it's an array and you can say, column 2, value for the 2 . Columns 3 mean and max and so on. And, then you get the

00:45:33.819 --> 00:45:42.369
filters and then you can also sort them but get sorted rows and which is another function of data table and then set

00:45:42.369 --> 00:45:50.439
rows on data tables and only these rows would be on the data view and then you would have only this rows and only this

00:45:50.439 --> 00:45:57.989
columns that you want and then you can use then in any chart that is in data table and it's data view [searching]. You

00:45:57.989 --> 00:46:09.069
already saw the example, and that's it. Again tomorrow there is another session about this visualization API and which

00:46:09.069 --> 00:46:19.519
specifically about data sources and the new java library, that was release as open source few days ago which include

00:46:19.520 --> 00:46:30.729
clearing language implementation and many other features, that's it. If you have any questions this is the time. Thank

00:46:30.729 --> 00:46:34.770
you. [Clapping]

00:46:34.770 --> 00:46:45.439
&gt;&gt; Hey, most of JavaScript libraries you can just take them and imbed them in your application server and serve them,

00:46:45.439 --> 00:46:54.189
why does the visualization API require you to [?] to the Google, is there supposed to be a way that I can Google and a

00:46:54.189 --> 00:46:55.949
way that we can also access?

00:46:55.949 --> 00:46:58.169
&gt;&gt; Itai: I'm not sure I got the question.

00:46:58.169 --> 00:46:59.909
&gt;&gt; So you have the URL google.com/ jsapi?

00:46:59.909 --> 00:47:10.399
&gt;&gt; Itai: Okay so the question is why do you have to load the visualization and the code every time from Google,

00:47:10.399 --> 00:47:10.809
&gt;&gt; yeah

00:47:10.809 --> 00:47:15.629
&gt;&gt; Itai: And not host it in your application.

00:47:15.629 --> 00:47:16.899
&gt;&gt; correct

00:47:16.899 --> 00:47:27.840
&gt;&gt; Itai: The fact is that in this way we can ensure that you use the latest version of the chart and everything and

00:47:27.839 --> 00:47:33.989
otherwise we will get into trouble of maintain version and people will use later older version and then we have to

00:47:33.989 --> 00:47:40.540
support them and then we go and use the next version of some other feature which would not work together and so this

00:47:40.540 --> 00:47:46.800
is how we decided to do it. I see the disadvantage but since most of our users are web based

00:47:46.799 --> 00:47:47.349
&gt;&gt; yeah

00:47:47.349 --> 00:47:48.879
&gt;&gt; Itai: we don't see the big problem

00:47:48.879 --> 00:47:56.679
&gt;&gt; Is there any way to get around it at all or it's totally not allowed, because we really don't want to host with

00:47:56.679 --> 00:47:56.919
Google.

00:47:56.919 --> 00:48:02.149
&gt;&gt; Itai: So this is the way to do it, it's easy; you have to be online in order to use this library

00:48:02.149 --> 00:48:08.569
&gt;&gt; I see. So I have one more question that is the visualization engine, what we found out was that each time you load

00:48:08.569 --> 00:48:15.239
visualization and such as pie chart and line chart the performance degrades depending on the number of visualizations

00:48:15.239 --> 00:48:22.559
that you want to load. It's that true, is there someway we can get around it, because you know you might have plenty

00:48:22.559 --> 00:48:27.909
visualizations that your application might use but at any given time it just might load, might use tool.

00:48:27.909 --> 00:48:36.239
&gt;&gt; Itai: So there is a way to load, not to load all of the visualization at the first time, you can read more in the

00:48:36.239 --> 00:48:46.559
documentation but you can, so all of the example that I showed here were using the unload callback, so you just

00:48:46.559 --> 00:48:52.229
specify on the first time that the page is loaded you say okay I want to use, I wan to load this visualization you

00:48:52.229 --> 00:48:59.929
load them and when you get them you start working, you can also use loading what's called laze loading

00:48:59.929 --> 00:49:00.929
&gt;&gt; yeah, okay

00:49:00.929 --> 00:49:05.669
&gt;&gt; Itai: there is an option to do it, you can read in the documentation and it's very simple, all you have to do is to

00:49:05.669 --> 00:49:11.039
specify callback function that would be called when they come back so you don't use the unload callback.

00:49:11.040 --> 00:49:20.139
&gt;&gt; The problem is when I load the visualization lazily, the total time of load is less then if I load them together,

00:49:20.139 --> 00:49:25.520
so if I load them together and if I just say load them on pie chart and line chart and I get one callback it's faster,

00:49:25.520 --> 00:49:32.250
but if I load them asynchronously, it's slower, so I pay a penalty which ever direction

00:49:32.250 --> 00:49:38.259
&gt;&gt; Itai: So I'm not to, there are only two ways you can do it

00:49:38.260 --> 00:49:38.629
&gt;&gt; yeah

00:49:38.629 --> 00:49:44.939
&gt;&gt; Itai: Either you load all of them together and wait to get all of them anytime that you need anyone of them that

00:49:44.939 --> 00:49:50.520
you load it, I just can't think of any other way but we can discuss it later if you have any ideas so

00:49:50.520 --> 00:49:53.199
&gt;&gt; Okay, I like to

00:49:53.199 --> 00:49:54.810
&gt;&gt; Itai: alright

00:49:54.809 --> 00:50:01.909
&gt;&gt; I think the last year you said that there would be some way in the future to access other data besides

00:50:01.909 --> 00:50:10.239
spreadsheets. Like is there, has Google made, and is there a provision made to, that would be use on data source

00:50:10.239 --> 00:50:10.310
either than Google spreadsheet?

00:50:10.309 --> 00:50:18.649
&gt;&gt; Itai: So today there are no public data sources outside of Google spreadsheet from many data sources that are

00:50:18.649 --> 00:50:27.010
private for users, for example in Google there are like dozens of project that use the same API internally and provide

00:50:27.010 --> 00:50:33.899
a data source for the pages but they are not public and. In additions to our library you can find them in the

00:50:33.899 --> 00:50:41.889
documentation and some tools gallery of library that implement the data source so you can just download them there is

00:50:41.889 --> 00:50:50.250
one in python of Google another one in java of Google and there are many other open source and so on, so you can just

00:50:50.250 --> 00:50:58.259
download and create your own data source. There are not, I am not aware of any other like public data source. There

00:50:58.260 --> 00:51:06.729
are some interesting chart, like chart.net that provide an interface that you can just load the data to and create

00:51:07.179 --> 00:51:13.389
kind of like wizard to create visualization and share them with others, but there are no tools like Google spreadsheet

00:51:13.439 --> 00:51:16.969
or data source.

00:51:16.969 --> 00:51:34.280
&gt;&gt; In my application I have to grade and delete a lot of chart and collect and when I do it after destroying charts

00:51:34.280 --> 00:51:43.819
left and some of that in rows and memories [?], what is a true way to destroy a chart?

00:51:43.819 --> 00:51:50.949
&gt;&gt; Itai: No I'm not sure I got you, could you repeat?

00:51:50.949 --> 00:52:01.689
&gt;&gt; Okay if I create a chart and delete it dynamically, this charts left some data in JavaScript

00:52:01.689 --> 00:52:03.209
&gt;&gt; Itai: okay

00:52:03.209 --> 00:52:11.629
&gt;&gt; How I should destroy charts correctly, not to call memory leaks.

00:52:11.629 --> 00:52:19.500
&gt;&gt; Itai: So generally speaking there is a java collector mechanism in JavaScript and if you create chart and if you

00:52:19.500 --> 00:52:23.140
delete the object it should relieve the storage.

00:52:23.139 --> 00:52:31.179
&gt;&gt; yes, but Google visualization chart creates some attributes on windows level

00:52:31.179 --> 00:52:32.540
&gt;&gt; Itai: on what?

00:52:32.540 --> 00:52:37.429
&gt;&gt; On window document object module

00:52:37.429 --> 00:52:45.469
&gt;&gt; Itai: This is something if you have any specific question I can check them, generally speaking we try to avoid this

00:52:45.469 --> 00:52:50.969
of course and we try to let everything so if you just delete the chart and everything should be deleted.

00:52:50.969 --> 00:52:56.409
&gt;&gt; But it's the same thing as any kind of chart that I should try to use?

00:52:56.409 --> 00:53:04.619
&gt;&gt; Itai: Okay, so again I've never heard these complains, and I would be happy to see it and of course you can send it

00:53:04.619 --> 00:53:12.089
to the, there is a user groups on the documentation so you can just, you just send it to them.

00:53:12.089 --> 00:53:13.049
&gt;&gt; Okay. Thank you.

00:53:13.049 --> 00:53:13.770
&gt;&gt; Itai: Alright.

00:53:13.770 --> 00:53:20.929
&gt;&gt; I'm not questioning I don't understand when you mention about Google visualization chart solution and how to

00:53:20.929 --> 00:53:30.539
prevent a cross site single ingestion, you said that there is a customized header to http package you called the SHS,

00:53:30.549 --> 00:53:39.039
so in other words this is not a standard implementation of http protocol, so you know I don't understand the detail

00:53:39.040 --> 00:53:44.949
that's why I'm asking now, is it that's why we have to talk to the Google server to .

00:53:44.949 --> 00:53:54.349
&gt;&gt; Itai: No, no it's totally unrelated to the question before as why the visualization go to the Google server. You

00:53:54.349 --> 00:54:00.409
have to load them from the Google server even if you don't have any data source, even if you are just using you know

00:54:00.799 --> 00:54:06.609
creating your JavaScript on your page and don't go to any other data source to get the data from, this is from

00:54:06.709 --> 00:54:13.169
questions that nothing to do with security, it's about version and, it's about serving, being able to serve, it's

00:54:13.169 --> 00:54:17.829
correct to all of the Google AJAX APIs not to this visualization chart

00:54:17.829 --> 00:54:18.589
&gt;&gt; okay

00:54:18.589 --> 00:54:25.390
&gt;&gt; Itai: The thing about the custom header which again I want to cover tomorrow about the data source implementation

00:54:25.389 --> 00:54:36.300
is, the known way to ensure that our request comes from your domain and not from different domains, some people use

00:54:36.299 --> 00:54:47.229
referrals and some other technique that are less, not that strict as to customize that so in other words if your users

00:54:48.699 --> 00:54:58.439
use normal browsers or good browsers, any browsers that you know of, so there is no way that hackers can get from

00:54:58.589 --> 00:55:06.369
another site and send a request to your sites, having discards themselves and the cookies, of your cookies of your

00:55:06.369 --> 00:55:14.810
user from your site together, if there is without discussing header it can be done in some ways, it's not that simple

00:55:14.809 --> 00:55:24.839
but it can be done, and even referrals are something that good hackers can manage and find out what fit but there is

00:55:24.839 --> 00:55:33.429
no known way in normal browsers to get all of this information and the custom header and the cookies from a different

00:55:33.429 --> 00:55:34.659
site, so it's safe.

00:55:34.659 --> 00:55:47.469
&gt;&gt; So this is not a topic related to Google visualization package as in some other, I guess my question is as it's

00:55:47.469 --> 00:55:56.060
there a standard http protocol part of the protocol itself or it is something you added by.

00:55:56.059 --> 00:56:02.820
&gt;&gt; Itai: it's nothing new, custom header is something that is part of the http specification

00:56:02.819 --> 00:56:03.870
&gt;&gt; okay, okay

00:56:03.869 --> 00:56:11.589
&gt;&gt; Itai: so it's nothing that we just use something quite known technique to help you make sure that the request is

00:56:11.589 --> 00:56:12.860
from your site, that's all.

00:56:12.859 --> 00:56:14.979
&gt;&gt; Alright, thank you.

00:56:14.979 --> 00:56:16.569
&gt;&gt; Itai: okay.

00:56:16.569 --> 00:56:23.659
&gt;&gt; Just quickly are there any limits on how much data you can create and carry them into the visualizations API and

00:56:23.659 --> 00:56:25.649
like how much like how many,

00:56:25.649 --> 00:56:31.199
&gt;&gt; Itai: There is no strict limit like how many browsers and JavaScript so,

00:56:31.199 --> 00:56:35.469
&gt;&gt; there are tens and thousand of, can you guess

00:56:35.469 --> 00:56:45.750
&gt;&gt; Itai: I guess, so let's put it in either words, it doesn't make sense to send million rows to your browser in order

00:56:45.750 --> 00:56:46.909
to visualize them right

00:56:46.909 --> 00:56:47.110
&gt;&gt; right

00:56:47.109 --> 00:56:53.550
&gt;&gt; Itai: You should group them or filter them or do something on the service side, if it is about thousand it should

00:56:53.549 --> 00:57:03.129
work, if it's a few thousand it would work. If you try to use above I guess ten thousand let's say then it would take

00:57:03.510 --> 00:57:10.760
time latency off the network until you get the data, it would take time for the browser to process it, and usually it

00:57:10.760 --> 00:57:18.630
means that I don't know I think most of the users cannot really understand chart that contains thousand or ten

00:57:18.739 --> 00:57:19.859
thousand of data.

00:57:19.859 --> 00:57:21.459
&gt;&gt; okay, thank you.

00:57:21.459 --> 00:57:22.659
&gt;&gt; Itai: alright.

00:57:22.659 --> 00:57:28.339
&gt;&gt; Itai: Last one okay and after that just come here If you want to discuss.

00:57:28.339 --> 00:57:35.689
&gt;&gt; For the annotated timeline and right now you only have the choice between line or area, chart type, is there any

00:57:35.969 --> 00:57:38.260
plans to add bar or any other chart type

00:57:38.260 --> 00:57:39.119
&gt;&gt; Itai: to do what?

00:57:39.119 --> 00:57:46.309
&gt;&gt; For the annotated time line there is only line chart type and area chart type, is there any plans to add bar chart

00:57:46.789 --> 00:57:47.789
to

00:57:46.789 --> 00:57:55.419
&gt;&gt; Itai: Not in the near future but what you might find interesting is that thing is that in the motion that I show in

00:57:55.419 --> 00:57:55.939
the moving bubble

00:57:55.939 --> 00:57:56.199
&gt;&gt; yeah

00:57:56.199 --> 00:57:58.699
&gt;&gt; Itai: there is a way to create a bar chart there

00:57:58.699 --> 00:57:59.539
&gt;&gt; okay

00:57:59.539 --> 00:58:08.189
&gt;&gt; Itai: there is on the top per right corner there is bars and icon there that you can use this bar which is a very,

00:58:08.530 --> 00:58:13.689
very nice chart so that you can use bar chart there, not in the one that you asked about.

00:58:13.689 --> 00:58:19.479
&gt;&gt; Is there any plans to ascends some of the chart visualization or like add more features or

00:58:19.479 --> 00:58:25.539
&gt;&gt; Itai: we constantly add new features, if can you can take a look at the documentation of the last one, that we just

00:58:25.569 --> 00:58:28.809
added more option to the table to this chart even

00:58:28.809 --> 00:58:32.219
&gt;&gt; and for the table is there any plan to add column reorder?

00:58:32.219 --> 00:58:33.279
&gt;&gt; Itai: to add what?

00:58:33.280 --> 00:58:37.979
&gt;&gt; column reorder, reordering the columns and the table?

00:58:37.979 --> 00:59:03.480
&gt;&gt; Itai: not in the very near future, and after that, I'm not sure. Alright. Thank you. [Clapping]. [Unclear voices].

