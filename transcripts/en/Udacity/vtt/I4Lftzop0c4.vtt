WEBVTT
Kind: captions
Language: en

00:00:01.010 --> 00:00:03.630
Hey what you working on?

00:00:03.630 --> 00:00:05.420
&gt;&gt; Yeah, I'm having some
trouble deciding what to do

00:00:05.420 --> 00:00:06.625
about the Udacity app rewrite.

00:00:06.625 --> 00:00:10.450
&gt;&gt; Ooh, are you going to rewrite
the Udacity app in Swift?

00:00:10.450 --> 00:00:13.420
&gt;&gt; You know,
I do code more quickly in Swift, but

00:00:13.420 --> 00:00:15.760
rewriting the entire app
would be a lot of work.

00:00:15.760 --> 00:00:19.690
On the other hand, I don't really want
to write new features in Objective C.

00:00:19.690 --> 00:00:21.310
&gt;&gt; Did someone say Objective C?

00:00:21.310 --> 00:00:22.680
Objective C is so dynamic.

00:00:22.680 --> 00:00:26.430
Doesn't make you feel like you
have more power as a developer?

00:00:26.430 --> 00:00:28.043
&gt;&gt; Yeah, that's true.

00:00:28.043 --> 00:00:30.660
&gt;&gt; But Swift is a more
modern concise language and

00:00:30.660 --> 00:00:32.680
it probably improve performance.

00:00:32.680 --> 00:00:35.932
&gt;&gt; Yeah, that's true too.

00:00:35.932 --> 00:00:37.432
The more I think about it,

00:00:37.432 --> 00:00:40.444
I think the best move might
be to try to use them both.

00:00:40.444 --> 00:00:43.208
&gt;&gt; Hmm, but Objective C and
Swift are so different.

00:00:43.208 --> 00:00:45.730
How are we going to get
them talking to each other?

00:00:45.730 --> 00:00:55.730
&gt;&gt; [MUSIC]

00:00:57.983 --> 00:00:59.498
&gt;&gt; You say, inum and I say, inam.

00:00:59.498 --> 00:01:02.076
You say, dynamic and I say, static.

00:01:02.076 --> 00:01:06.200
Inum, inam, dynamic, static,

00:01:06.200 --> 00:01:10.192
let's call the whole thing off.

00:01:10.192 --> 00:01:14.218
You say, giffy and I say, jiffy.

00:01:14.218 --> 00:01:18.363
You call a function and I say a message.

00:01:18.363 --> 00:01:24.730
Giffy, jiffy, function, message,
let's call the whole thing off.

00:01:24.730 --> 00:01:31.070
&gt;&gt; But, if we call the whole thing off.

00:01:31.070 --> 00:01:33.130
&gt;&gt; You lose foundation.

00:01:33.130 --> 00:01:36.910
&gt;&gt; And if we ever part,

00:01:36.910 --> 00:01:41.414
then that might break my app.

00:01:41.414 --> 00:01:43.071
[MUSIC]

00:01:43.071 --> 00:01:47.659
So if I liked type arrays and
you liked untyped,

00:01:47.659 --> 00:01:52.707
I'll take them untyped
with optional casting, for

00:01:52.707 --> 00:01:59.034
we know we need each other so
we better call the calling off, off.

00:01:59.034 --> 00:02:03.116
Let's master.

00:02:03.116 --> 00:02:04.861
&gt;&gt; You say, care.

00:02:04.861 --> 00:02:07.138
&gt;&gt; And you say, car.

00:02:07.138 --> 00:02:08.926
&gt;&gt; I like to swizzle.

00:02:08.926 --> 00:02:11.168
&gt;&gt; And I do not swizzle.

00:02:11.168 --> 00:02:12.026
&gt;&gt; Care.

00:02:12.026 --> 00:02:12.766
&gt;&gt; Car.

00:02:12.766 --> 00:02:14.144
&gt;&gt; Swizzle.

00:02:14.144 --> 00:02:15.203
&gt;&gt; No swizzling.

00:02:15.203 --> 00:02:18.419
&gt;&gt; Let's call the whole thing off.

00:02:18.419 --> 00:02:18.963
[MUSIC]

00:02:18.963 --> 00:02:27.166
But if we call the whole thing
off- You'd loose core data.

00:02:27.166 --> 00:02:35.122
And if we ever part then
that might break my app.

00:02:35.122 --> 00:02:39.639
So if I pass you value,
would you want some warning?

00:02:39.639 --> 00:02:43.786
&gt;&gt; You can use annotations.

00:02:43.786 --> 00:02:47.392
&gt;&gt; For we know we need each other so

00:02:47.392 --> 00:02:51.847
we better call the calling off, off.

00:02:51.847 --> 00:02:56.042
Let's master.

00:02:56.042 --> 00:03:02.964
Let's master.

00:03:02.964 --> 00:03:05.769
&gt;&gt; [BLANK_AUDIO]

