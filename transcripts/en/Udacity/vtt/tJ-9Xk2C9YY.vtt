WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:02.110
So let's go back to our question of why

00:00:02.110 --> 00:00:04.998
we need consistency. We have already seen an example

00:00:04.998 --> 00:00:07.959
in our quiz, that something beyond coherence is needed

00:00:07.959 --> 00:00:11.956
for our data-ready flag synchronization to work. Another similar

00:00:11.956 --> 00:00:15.142
example is thread termination, where a thread creates another

00:00:15.142 --> 00:00:19.185
thread. Now that created thread, let's call it B,

00:00:19.185 --> 00:00:22.170
does a lot of work and updates some data.

00:00:22.170 --> 00:00:25.860
While thread A goes and waits until B exits.

00:00:25.860 --> 00:00:28.370
And it really happens by doing a system call in

00:00:28.370 --> 00:00:31.180
thread A and then the system really will wait for B

00:00:31.180 --> 00:00:34.258
to mark that it's done. And then when thread B really

00:00:34.258 --> 00:00:37.850
is done, the operating system will mark the B is done.

00:00:37.850 --> 00:00:40.510
And here we have a very similar situation inside the operating

00:00:40.510 --> 00:00:43.277
system that we have here. Which is the check for B

00:00:43.277 --> 00:00:47.593
exiting might be branch rated and then confirmed while in fact

00:00:47.593 --> 00:00:51.850
thread B is not done when we branch [UNKNOWN] like this.

00:00:51.850 --> 00:00:55.540
So what we need is some sort of additional set ordering

00:00:55.540 --> 00:00:59.430
restrictions that are going prevent the weird situations that we get

00:00:59.430 --> 00:01:05.450
into without any consideration for consistency. And again, this goes beyond

00:01:05.450 --> 00:01:09.200
coherence alone, we already saw that coherence doesn't really help us here.

