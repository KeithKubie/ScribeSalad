WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.550
[MUSIC PLAYING]

00:00:08.550 --> 00:00:09.860
Hi, my name is Dan Olshansky.

00:00:09.860 --> 00:00:12.300
I'm an intern here on the
Android team at Google.

00:00:12.300 --> 00:00:14.870
And today, I'll be talking about
some ListView animation

00:00:14.870 --> 00:00:15.790
insertions.

00:00:15.790 --> 00:00:18.370
So in this specific demo, what
we're going to be doing is

00:00:18.370 --> 00:00:22.010
adding a new object to the
zeroth index of the data set

00:00:22.010 --> 00:00:24.610
associated with the ListView,
and then animating that cell

00:00:24.610 --> 00:00:25.840
downwards into it.

00:00:25.840 --> 00:00:27.880
As that's going to happen, all
the other items in the

00:00:27.880 --> 00:00:30.480
ListView are going to make
space for the new cell,

00:00:30.480 --> 00:00:33.030
animate downwards as the new
cell animates back in.

00:00:33.030 --> 00:00:35.800
And then, just as a cool little
extra part to the

00:00:35.800 --> 00:00:38.100
animation, we're going to have
an image that's part of the

00:00:38.100 --> 00:00:42.060
cell animate into its correct
location as the new element is

00:00:42.060 --> 00:00:44.830
being added to it.

00:00:44.830 --> 00:00:47.410
Some of the important things
to know for this animation,

00:00:47.410 --> 00:00:50.370
some of the few tricks and
problems I encountered, is the

00:00:50.370 --> 00:00:54.060
fact that when you change the
data set, some of the objects

00:00:54.060 --> 00:00:58.545
that you may need may no longer
be available after the

00:00:58.545 --> 00:00:59.670
layout has occurred.

00:00:59.670 --> 00:01:02.970
So what you need to do is you
need to take a snapshot of all

00:01:02.970 --> 00:01:07.380
the items before you modify the
data set so that after you

00:01:07.380 --> 00:01:09.840
modify the data set, if you no
longer have a reference to

00:01:09.840 --> 00:01:12.970
some of these items, you can
still animate them out of the

00:01:12.970 --> 00:01:15.350
bounds of the list view, because
you won't need them

00:01:15.350 --> 00:01:16.860
after that anymore.

00:01:16.860 --> 00:01:20.785
So jumping straight into the
demo, all we have here is a

00:01:20.785 --> 00:01:23.220
button, little round
view to its left.

00:01:23.220 --> 00:01:25.050
The list is completely empty.

00:01:25.050 --> 00:01:26.820
Clicking Add Row--

00:01:26.820 --> 00:01:30.990
Animate creates a new cell and
animates it downwards.

00:01:30.990 --> 00:01:33.370
And we can add as many
elements as you want.

00:01:33.370 --> 00:01:35.120
Those start looping.

00:01:35.120 --> 00:01:37.220
And as you can see, it
animates downwards.

00:01:37.220 --> 00:01:39.580
And all the elements in ListView
underneath animate

00:01:39.580 --> 00:01:40.990
down as that happens.

00:01:40.990 --> 00:01:43.290
You can now of course scroll
the list if you want to.

00:01:43.290 --> 00:01:45.760
But the interesting thing to
note as well is that even

00:01:45.760 --> 00:01:48.200
though each of these images
is part of the data set

00:01:48.200 --> 00:01:51.400
associated with that item in the
list with that exact cell,

00:01:51.400 --> 00:01:54.340
what we're doing is animating
the image from outside the

00:01:54.340 --> 00:01:56.790
bounds of the ListView into its
correct location in the

00:01:56.790 --> 00:02:01.833
ListView, where it then stays
and persists as you scroll the

00:02:01.833 --> 00:02:03.500
list here afterwards.

00:02:03.500 --> 00:02:06.730
So then, looking at the code,
we can go into Insertion

00:02:06.730 --> 00:02:09.789
ListView, which is an object
that extends ListView where

00:02:09.789 --> 00:02:11.810
you can insert these
new items.

00:02:11.810 --> 00:02:15.107
And after a lot of other applied
code that you can look

00:02:15.107 --> 00:02:18.620
over later, all the main logic
happens in Add Row.

00:02:18.620 --> 00:02:23.640
So firstly, what we need to do
here is first get a reference

00:02:23.640 --> 00:02:24.560
for an adapter.

00:02:24.560 --> 00:02:27.550
And afterwards, what I'm going
to do is keep track of the

00:02:27.550 --> 00:02:31.400
balance and the drawables of all
the items that are in my

00:02:31.400 --> 00:02:35.010
ListView before the data
set change took place.

00:02:35.010 --> 00:02:38.520
So I'm going to loop through
all of my visible cells.

00:02:38.520 --> 00:02:41.850
And I'm going to take a screen
shot of every single cell.

00:02:41.850 --> 00:02:42.990
I'm going to store that.

00:02:42.990 --> 00:02:46.430
I'm also going to retrieve the
balance of every single cell

00:02:46.430 --> 00:02:47.370
and store that in a

00:02:47.370 --> 00:02:49.770
corresponding hash map as well.

00:02:49.770 --> 00:02:52.520
So now, regardless of whether
or not those cells are still

00:02:52.520 --> 00:02:56.120
there after data set change has
taken place, I'll still

00:02:56.120 --> 00:02:57.610
have a reference to them.

00:02:57.610 --> 00:03:02.010
Then, when you move down here,
I actually add the new object

00:03:02.010 --> 00:03:04.990
to my data set and
add this table ID

00:03:04.990 --> 00:03:08.170
corresponding to that item.

00:03:08.170 --> 00:03:11.480
Because in my array adapter,
I've specified

00:03:11.480 --> 00:03:12.800
true for stable IDs.

00:03:12.800 --> 00:03:15.580
So that means I need to make
sure that a new stable ID is

00:03:15.580 --> 00:03:17.440
added to that element.

00:03:17.440 --> 00:03:20.810
Then, I notifyDataSetChanged,
which will request a layout on

00:03:20.810 --> 00:03:22.320
behalf of the ListView.

00:03:22.320 --> 00:03:26.330
But since I want this to
animate, one of the common

00:03:26.330 --> 00:03:28.670
tricks that have been used for
a lot of these animations is

00:03:28.670 --> 00:03:30.640
using an onPreDrawListener.

00:03:30.640 --> 00:03:34.675
So once again, onMeasure and
onLayout Layout have already

00:03:34.675 --> 00:03:35.190
been called.

00:03:35.190 --> 00:03:40.240
All the final values for all the
widgets contained within

00:03:40.240 --> 00:03:43.400
the ListView have already been
calculated but have not been

00:03:43.400 --> 00:03:44.630
drawn to the screen yet.

00:03:44.630 --> 00:03:47.185
So this is where any custom
animations you want to do you

00:03:47.185 --> 00:03:49.410
can do them here since you
already have a reference to

00:03:49.410 --> 00:03:51.020
all the final values.

00:03:51.020 --> 00:03:54.750
So going into onPreDraw, we
remove the listener and create

00:03:54.750 --> 00:03:58.120
a new array list where we're
going to store all our

00:03:58.120 --> 00:03:58.910
animations.

00:03:58.910 --> 00:04:01.920
So firstly, since I know that
I'm adding a new cell to the

00:04:01.920 --> 00:04:06.210
zeroth index, that's the view
that I'm going to want to use

00:04:06.210 --> 00:04:09.000
for a lot of my calculations
and animations.

00:04:12.660 --> 00:04:16.430
And then, what I'm creating is
creating a copy ImageView,

00:04:16.430 --> 00:04:20.850
because I can't actually animate
the view that I need

00:04:20.850 --> 00:04:23.370
from within the cells, from
outside the bounds, and put it

00:04:23.370 --> 00:04:24.030
where I need to.

00:04:24.030 --> 00:04:26.210
But what I'm going to do is
create a new copy ImageView

00:04:26.210 --> 00:04:31.260
that has the same
content as the

00:04:31.260 --> 00:04:32.910
ImageView in the cell itself.

00:04:32.910 --> 00:04:34.990
Then, I'll just animate it into
place and then get rid of

00:04:34.990 --> 00:04:37.110
it when I don't need
it anymore.

00:04:37.110 --> 00:04:39.970
So when I'm animating a new row,
one of the other things I

00:04:39.970 --> 00:04:43.380
do is just animate the text
associated with that cell,

00:04:43.380 --> 00:04:45.640
fade it in as it
animates down.

00:04:45.640 --> 00:04:48.850
And in regards to the image,
there's some math that I need

00:04:48.850 --> 00:04:50.820
to do to determine where
it starts and

00:04:50.820 --> 00:04:52.110
where it has to end.

00:04:52.110 --> 00:04:56.870
But after all that is done, all
you need to really know is

00:04:56.870 --> 00:04:59.960
that the ImageView in the cell
has to be set to invisible

00:04:59.960 --> 00:05:02.210
while the animation is
happening, while the copy

00:05:02.210 --> 00:05:05.430
ImageView has to be visible.

00:05:05.430 --> 00:05:09.036
I use an overshoot interpolator
and scale the x

00:05:09.036 --> 00:05:11.010
and the y properties of the
image just to get this little

00:05:11.010 --> 00:05:12.620
cool popping-like effect.

00:05:12.620 --> 00:05:16.450
And then, I animate it into
place in the new cell view.

00:05:16.450 --> 00:05:20.545
And once that's done, I can
later at the end do animation

00:05:20.545 --> 00:05:22.950
and get rid of my copy
ImageView and set the

00:05:22.950 --> 00:05:25.710
visibility of my normal
view back to normal.

00:05:25.710 --> 00:05:27.710
So scrolling down
furthermore--

00:05:27.710 --> 00:05:29.520
this is once the data
set change has

00:05:29.520 --> 00:05:30.350
already been modified.

00:05:30.350 --> 00:05:33.430
So then, I'll loop through all
my visible children of the

00:05:33.430 --> 00:05:35.000
ListView at this point.

00:05:35.000 --> 00:05:38.630
And there are going to be two
types of children that I'll be

00:05:38.630 --> 00:05:44.060
working with, those that have a
corresponding balance in the

00:05:44.060 --> 00:05:45.060
hash map [INAUDIBLE] originally

00:05:45.060 --> 00:05:46.370
and those that don't.

00:05:46.370 --> 00:05:48.520
If they do have a corresponding
balance, then

00:05:48.520 --> 00:05:51.370
what that means is that they
were visible in the ListView

00:05:51.370 --> 00:05:53.743
before the animation, and
they're also visible in the

00:05:53.743 --> 00:05:54.740
ListView after the animation.

00:05:54.740 --> 00:05:57.570
So all I need to do is create
an object animator that

00:05:57.570 --> 00:06:01.430
translates it from its old
position to its new position.

00:06:01.430 --> 00:06:04.170
If I don't have that start
balance, then what that means

00:06:04.170 --> 00:06:08.700
is that in the context of this
demo, there's only one cell

00:06:08.700 --> 00:06:10.800
that can have this
configuration.

00:06:10.800 --> 00:06:13.290
It means that it wasn't in the
ListView before, but it is in

00:06:13.290 --> 00:06:14.470
the ListView after.

00:06:14.470 --> 00:06:16.640
And since we're only inserting
one new item into the

00:06:16.640 --> 00:06:19.710
ListView, this has to be the
one in the zeroth index.

00:06:19.710 --> 00:06:23.920
And since I also want to animate
this, I do a little

00:06:23.920 --> 00:06:27.095
bit of math in determining what
the height is, what the

00:06:27.095 --> 00:06:28.230
divider height is.

00:06:28.230 --> 00:06:31.850
And then, I do the same thing
and animate its transition y

00:06:31.850 --> 00:06:35.940
property to get it from where it
originally would have been

00:06:35.940 --> 00:06:39.800
to where I want it to
be after the layout.

00:06:39.800 --> 00:06:41.380
And then of course, since I
don't need these others

00:06:41.380 --> 00:06:43.500
anymore, I remove them
from my hash map.

00:06:43.500 --> 00:06:46.830
And then, scrolling down here,
if I loop through a key set of

00:06:46.830 --> 00:06:49.530
all the items that are left in
my hash map, what this means

00:06:49.530 --> 00:06:53.390
is that these are items that
were in the ListView prior to

00:06:53.390 --> 00:06:56.840
the data set change but are no
longer visible in the ListView

00:06:56.840 --> 00:06:58.330
after the data set change.

00:06:58.330 --> 00:07:02.270
So these involve items that have
been moved outside the

00:07:02.270 --> 00:07:06.690
bounds of the ListView due to
the insertion of the new item.

00:07:06.690 --> 00:07:09.710
And since these items are no
longer contained within the

00:07:09.710 --> 00:07:13.170
ListView container, what I need
to do is use the bitmap

00:07:13.170 --> 00:07:16.270
drawables, which I've captured
from before, overlay them on

00:07:16.270 --> 00:07:19.530
top of my ListView, and then
animate their bounds as if

00:07:19.530 --> 00:07:24.460
they were still in
the ListView.

00:07:24.460 --> 00:07:27.240
Since I'm animating the bounds,
it's important to know

00:07:27.240 --> 00:07:30.200
that every single time the
bounds are changed, I need to

00:07:30.200 --> 00:07:32.760
invalidate my view in order
for that portion of the

00:07:32.760 --> 00:07:34.160
ListView to get updated.

00:07:34.160 --> 00:07:39.570
And in order to make that a
little more efficient, I call

00:07:39.570 --> 00:07:41.190
Invalidate with [INAUDIBLE]

00:07:41.190 --> 00:07:44.890
of it such that I don't
re-invalidate the whole

00:07:44.890 --> 00:07:47.780
ListView and redraw the whole
thing every single time only

00:07:47.780 --> 00:07:50.220
one of the bitmap drawables
has animated.

00:07:50.220 --> 00:07:54.250
So I set up those animations
for every bitmap drawable.

00:07:54.250 --> 00:07:56.830
And I also add it to this
array that I have

00:07:56.830 --> 00:08:01.040
mCellBitmapDrawables, which I
will make note of in a second.

00:08:01.040 --> 00:08:05.000
And I add the animation
to my animator set.

00:08:05.000 --> 00:08:06.350
I animate all this together.

00:08:06.350 --> 00:08:10.690
And then at the end, I do all
the default things like make

00:08:10.690 --> 00:08:15.970
my ListView enabled again,
make the ImageView in the

00:08:15.970 --> 00:08:18.380
actual cell visible again,
make the copy imagery

00:08:18.380 --> 00:08:21.180
invisible, and things
like that.

00:08:21.180 --> 00:08:24.190
So now, here in dispatchDraw,
this is where I'm going to use

00:08:24.190 --> 00:08:27.190
that array of all the bitmap
drawables corresponding to the

00:08:27.190 --> 00:08:28.900
items that disappeared.

00:08:28.900 --> 00:08:31.140
I'm going to loop through all of
them and draw them onto the

00:08:31.140 --> 00:08:34.450
canvas every single time
dispatchDraw is called.

00:08:34.450 --> 00:08:36.820
One of the important things to
note here is that I'm checking

00:08:36.820 --> 00:08:41.970
the size is zero just to make
sure that there are no extra

00:08:41.970 --> 00:08:48.200
locations done using the new
Java object for loops.

00:08:48.200 --> 00:08:53.420
And scrolling down furthermore,

00:08:53.420 --> 00:08:54.390
there's just some checks.

00:08:54.390 --> 00:08:56.340
I'm checking whether I want
to animate in the

00:08:56.340 --> 00:08:57.940
new image or not.

00:08:57.940 --> 00:09:00.450
So for example, if I were to
scroll down here and then add

00:09:00.450 --> 00:09:03.730
a row, I'm not at the top, so
I'm not going to be animating

00:09:03.730 --> 00:09:04.410
in that image.

00:09:04.410 --> 00:09:06.720
Whereas if I'm up here, the new

00:09:06.720 --> 00:09:10.420
ImageView will be animating.

00:09:10.420 --> 00:09:13.450
Down here, there's just some
more code of how I'm taking

00:09:13.450 --> 00:09:16.542
snapshots of the ListView cells
and how I animate them

00:09:16.542 --> 00:09:20.780
into place, as well as how I'm
getting absolute locations on

00:09:20.780 --> 00:09:23.870
the screen when I want to know
where that extra ImageView

00:09:23.870 --> 00:09:27.790
needs to be when I decide
where to animate it to.

00:09:27.790 --> 00:09:30.760
So that's pretty much it to how
you can insert new cells

00:09:30.760 --> 00:09:34.630
and animate their addition
to your ListView---

00:09:34.630 --> 00:09:35.880
thanks.

