WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
But now let's get just a little more practice with debugging.

00:00:03.000 --> 00:00:05.000
Let's say that I make a mistake.

00:00:05.000 --> 00:00:09.000
There's a bug in my code, so I've introduced a bug in the code, and now let's rerun it.

00:00:09.000 --> 00:00:12.000
Uh-oh, this is tricky output.

00:00:12.000 --> 00:00:17.000
If you look here, there are still 1, 2, 3, 4, 5, 6, 7, 8 answers,

00:00:17.000 --> 00:00:22.000
but they're not the right ones, like this LM, ECS, SBA.

00:00:22.000 --> 00:00:25.000
It's mistakenly included twice,

00:00:25.000 --> 00:00:28.000
and it should only appear once as a possibility.

00:00:28.000 --> 00:00:34.000
SBA alone, once, twice, three times, four times,

00:00:34.000 --> 00:00:36.000
so here we're getting the wrong answer.

00:00:36.000 --> 00:00:38.000
How do we go about debugging it?

00:00:38.000 --> 00:00:41.000
One of the first steps is to make a test case that shows the problem,

00:00:41.000 --> 00:00:43.000
and we've made one, but it's kind of big.

00:00:43.000 --> 00:00:46.000
Let's see if we can see the problem with a smaller test input.

00:00:46.000 --> 00:00:48.000
How about just 2 people?

00:00:48.000 --> 00:00:50.000
There should be 4 possibilities, all different.

00:00:50.000 --> 00:00:52.000
Let's see what we get.

00:00:52.000 --> 00:00:55.000
We do get 4 possibilities, but they're not all different.

00:00:55.000 --> 00:00:59.000
I should get Lucretia and Elizabeth, just Lucretia,

00:00:59.000 --> 00:01:01.000
just Elizabeth, and no one.

00:01:01.000 --> 00:01:04.000
But instead I'm getting the same thing twice in a row,

00:01:04.000 --> 00:01:07.000
so even this smaller test case still shows the bug.

00:01:07.000 --> 00:01:11.000
Okay, maybe I can make a super small test case and still see the bug.

00:01:11.000 --> 00:01:13.000
How about just Lucretia?

00:01:13.000 --> 00:01:16.000
Oh, even this shows the bug because the 2 answers should be she shows up

00:01:16.000 --> 00:01:21.000
and she doesn't, but instead, both of the worlds I'm seeing are she shows up.

00:01:21.000 --> 00:01:25.000
Now we have a very small test case where the output we observe

00:01:25.000 --> 00:01:29.000
disagrees with our intuition or the problem specification.

00:01:29.000 --> 00:01:31.000
Now we're going to go try to localize the bug,

00:01:31.000 --> 00:01:33.000
like figure out which line the bug is on,

00:01:33.000 --> 00:01:37.000
and one way to do that is to add print statements.

00:01:37.000 --> 00:01:41.000
Here I've just added a print statement for big_list and a print statement for

00:01:41.000 --> 00:01:44.000
selectedsofar so that we can see what's going on with every recursive call.

00:01:44.000 --> 00:01:46.000
Here's a quick quiz for you.

00:01:46.000 --> 00:01:48.000
How many times do you think we'll see big_list printed out?

00:01:48.000 --> 00:01:52.000
I think it's going to be 3, once for the main call down here,

00:01:52.000 --> 00:01:56.000
and then we'll call ourselves recursively 2 more times,

00:01:56.000 --> 00:01:58.000
and then each one of those will stop.

00:01:58.000 --> 00:02:00.000
And in fact, that's what we get.

00:02:00.000 --> 00:02:03.000
1, 2, 3, printings of big_list.

00:02:03.000 --> 00:02:06.000
Now let's trace through and see if this matches with our intuition.

00:02:06.000 --> 00:02:10.000
The big_list comes in holding Lucretia, and we haven't selected anything so far.

00:02:10.000 --> 00:02:13.000
That's good, and now we make 2 recursive calls.

00:02:13.000 --> 00:02:15.000
The big_list we've pulled off Lucretia.

00:02:15.000 --> 00:02:20.000
Okay, that part is correct, and selectedsofar we've selected Lucretia.

00:02:20.000 --> 00:02:22.000
Okay, that's possible. Remember, there are 2 worlds.

00:02:22.000 --> 00:02:25.000
One where she accepts our invitation and we select her, one where she doesn't.

00:02:25.000 --> 00:02:28.000
But then as I look down here, for this next recursive call

00:02:28.000 --> 00:02:30.000
the big_list is empty again.

00:02:30.000 --> 00:02:34.000
That's correct because with every recursive call, we have to pull something off it.

00:02:34.000 --> 00:02:37.000
But selectedsofar is Lucretia again

00:02:37.000 --> 00:02:40.000
so here--this is in both worlds--she's invited our invitation.

00:02:40.000 --> 00:02:42.000
That's really nice because we're super popular,

00:02:42.000 --> 00:02:45.000
but it's not the specification of the problem, so it tells me

00:02:45.000 --> 00:02:48.000
that for one of these recursive calls,

00:02:48.000 --> 00:02:51.000
selectedsofar is being set incorrectly.

00:02:51.000 --> 00:02:54.000
Now I know the problem is either here or here.

00:02:54.000 --> 00:02:57.000
I've narrowed it down to 2 expressions in 2 lines

00:02:57.000 --> 00:02:59.000
because I know that on the recursive call

00:02:59.000 --> 00:03:03.000
selectedsofar is being set incorrectly, and it's set based on the value

00:03:03.000 --> 00:03:05.000
of this second actual argument.

00:03:05.000 --> 00:03:08.000
All right, let's say I look at this and I think "Well, I should only be adding

00:03:08.000 --> 00:03:11.000
this current element 1 out of 2 times."

00:03:11.000 --> 00:03:14.000
In one world she accepts my invitation and in one she doesn't,

00:03:14.000 --> 00:03:18.000
so let's say over here I'm not supposed to include current_element,

00:03:18.000 --> 00:03:20.000
so let's see if removing it fixes the bug.

00:03:20.000 --> 00:03:24.000
Well, on this very simple test case, it now works.

00:03:24.000 --> 00:03:29.000
Our answer is sometimes Lucretia shows up, and sometimes she doesn't.

00:03:29.000 --> 00:03:31.000
We might be tempted to declare moral victory

00:03:31.000 --> 00:03:34.000
be carried through the streets in triumphal march,

00:03:34.000 --> 00:03:37.000
but let's go back to our other test cases and make sure

00:03:37.000 --> 09:59:59.000
that this bug really fixed the more complicated ones.

