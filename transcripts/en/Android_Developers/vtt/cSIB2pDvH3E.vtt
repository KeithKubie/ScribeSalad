WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.780
[MUSIC PLAYING]

00:00:08.780 --> 00:00:09.030
Hi.

00:00:09.030 --> 00:00:11.190
My name's Reto Meier, and I'm
the tech lead for Google's

00:00:11.190 --> 00:00:13.320
Android Developer
Relations team.

00:00:13.320 --> 00:00:15.730
This is the first of a series
of DevBytes created to help

00:00:15.730 --> 00:00:18.080
you improve the battery
efficiency of your apps by

00:00:18.080 --> 00:00:20.800
changing the way you handle
your data transfers.

00:00:20.800 --> 00:00:23.140
The mobile cell radio is one
of the biggest sources of

00:00:23.140 --> 00:00:25.380
battery drain on modern
smartphones, so making sure

00:00:25.380 --> 00:00:28.480
transfers use it efficiently can
make a dramatic difference

00:00:28.480 --> 00:00:30.930
to your app's impact on
the battery life.

00:00:30.930 --> 00:00:32.200
Now on the surface,
this seems like a

00:00:32.200 --> 00:00:33.370
pretty simple challenge.

00:00:33.370 --> 00:00:36.780
If the cell radio drains the
battery, just transfer as

00:00:36.780 --> 00:00:39.420
little data as possible, as
infrequently as possible.

00:00:39.420 --> 00:00:42.000
Now that's a good start, but we
want to balance that with

00:00:42.000 --> 00:00:44.920
providing a great user
experience, one where the data

00:00:44.920 --> 00:00:47.920
your users need is available
as soon as they need it

00:00:47.920 --> 00:00:50.160
without them ever needing
to hit refresh.

00:00:50.160 --> 00:00:52.270
Now that requires understanding
how to optimize

00:00:52.270 --> 00:00:54.640
the timing of your data
transfers, and that means

00:00:54.640 --> 00:00:57.100
understanding the cell
state machine.

00:00:57.100 --> 00:00:59.530
In order to conserve power, the
cell radio isn't kept on

00:00:59.530 --> 00:01:00.050
permanently.

00:01:00.050 --> 00:01:03.480
In fact, it goes through a
series of state transitions in

00:01:03.480 --> 00:01:06.110
order to compromise between
low-latency data transfers and

00:01:06.110 --> 00:01:08.500
minimizing the impact
on battery life.

00:01:08.500 --> 00:01:13.720
It begins over here on standby
mode, where it's storing

00:01:13.720 --> 00:01:16.640
minimal power until an app
initiates a data transfer.

00:01:16.640 --> 00:01:20.030
At this point, it transitions to
full-power mode, a process

00:01:20.030 --> 00:01:21.880
that takes around two
seconds, before

00:01:21.880 --> 00:01:23.560
performing the transfer.

00:01:23.560 --> 00:01:25.860
Rather than dropping back to
standby immediately after the

00:01:25.860 --> 00:01:28.290
transfer is completed, the
radio will remain in full

00:01:28.290 --> 00:01:31.200
power mode for a set tail time,
just in case further

00:01:31.200 --> 00:01:33.840
transfers are initiated
within that window.

00:01:33.840 --> 00:01:36.440
This happens because dropping
to a low-power state

00:01:36.440 --> 00:01:38.420
reintroduces this power-up
latency.

00:01:38.420 --> 00:01:41.120
Not only that, but transitioning
between states,

00:01:41.120 --> 00:01:44.590
in and of itself, is a
significant power drain.

00:01:44.590 --> 00:01:47.220
If nothing happens during the 5
to 10 second tail time, the

00:01:47.220 --> 00:01:49.840
radio drops to this intermediate
low-power state

00:01:49.840 --> 00:01:52.840
that uses less battery than full
power, but has a lower

00:01:52.840 --> 00:01:55.120
startup latency than standby.

00:01:55.120 --> 00:01:57.410
If a new transfer is initiated,
it will be promoted

00:01:57.410 --> 00:01:58.570
back to full-power mode.

00:01:58.570 --> 00:02:00.510
And if nothing happens for
another 30 seconds to a

00:02:00.510 --> 00:02:02.570
minute, it'll drop
back to standby.

00:02:02.570 --> 00:02:05.840
The exact latencies and tail
times vary between carriers,

00:02:05.840 --> 00:02:08.639
or even within carriers
depending on where they are as

00:02:08.639 --> 00:02:11.039
carriers try to balance low
latency with longer battery

00:02:11.039 --> 00:02:13.970
life based on things like cell
congestion and typical

00:02:13.970 --> 00:02:15.900
prevailing network conditions.

00:02:15.900 --> 00:02:18.590
To understand how this might
affect your app design

00:02:18.590 --> 00:02:22.460
choices, you start with this
simple equation, then take the

00:02:22.460 --> 00:02:25.110
square root of the sum of the
latency and idle times between

00:02:25.110 --> 00:02:27.860
each state, and then throw
all of that out.

00:02:27.860 --> 00:02:30.050
Because it really doesn't
require any math to do.

00:02:30.050 --> 00:02:32.465
And it doesn't even matter what
the specific latency or

00:02:32.465 --> 00:02:36.190
tail times are for any
users of your app.

00:02:36.190 --> 00:02:39.240
The solution comes down to what
I like to call the Cookie

00:02:39.240 --> 00:02:40.540
Droid Conundrum.

00:02:40.540 --> 00:02:43.140
When scheduling downloads, do
you transfer as much as you

00:02:43.140 --> 00:02:45.820
can as infrequently as possible,
minimizing the

00:02:45.820 --> 00:02:48.080
number of transfers at the
expense of bandwidth?

00:02:48.080 --> 00:02:51.120
Or do you take the opposite
approach, transferring as

00:02:51.120 --> 00:02:54.280
little as possible, performing
transfers more frequently?

00:02:54.280 --> 00:02:56.610
Well, on the surface,
the "Little Cookie"

00:02:56.610 --> 00:02:58.360
model appears sound.

00:02:58.360 --> 00:03:02.690
Less data transferred means less
bandwidth and less time

00:03:02.690 --> 00:03:05.100
spent with the radio active
to transfer our data.

00:03:05.100 --> 00:03:07.880
And because we're downloading
what we need on demand, we

00:03:07.880 --> 00:03:10.600
never download and process
more than we need.

00:03:10.600 --> 00:03:13.640
Unfortunately, this results in
a heavily fragmented use of

00:03:13.640 --> 00:03:14.910
the cell radio.

00:03:14.910 --> 00:03:17.070
From our knowledge of the cell
radio state machine, we know

00:03:17.070 --> 00:03:20.170
that every time we perform a
data transfer, the radio stays

00:03:20.170 --> 00:03:23.720
active for at least 5 seconds
of tail time at full power,

00:03:23.720 --> 00:03:27.720
followed by anywhere from 10 to
60 seconds at lower power

00:03:27.720 --> 00:03:30.080
before it finally returns
to standby.

00:03:30.080 --> 00:03:32.350
That means every time you
initiate a transfer, you're

00:03:32.350 --> 00:03:35.590
powering the cell radio up
for at least 20 seconds.

00:03:35.590 --> 00:03:37.810
Now we look at this more
closely, you can see how an

00:03:37.810 --> 00:03:41.615
app like this one, whose radio
use is indicated here, can

00:03:41.615 --> 00:03:44.690
drain the battery without
transferring very much data.

00:03:44.690 --> 00:03:48.120
Each of these small peaks
represents something like

00:03:48.120 --> 00:03:50.840
analytics data being sent back
to the server every 15

00:03:50.840 --> 00:03:54.330
seconds, while the larger
peaks, they represent

00:03:54.330 --> 00:03:57.250
intermittent transfers based
on user interaction, maybe

00:03:57.250 --> 00:03:58.840
clicking on a news article
or looking at

00:03:58.840 --> 00:04:00.460
a restaurant listing.

00:04:00.460 --> 00:04:02.850
Now beneath that, we can see
how this affects the radio

00:04:02.850 --> 00:04:06.110
state machine, with blue showing
active transfer times,

00:04:06.110 --> 00:04:09.190
the rate indicating the radio
remaining in full power mode,

00:04:09.190 --> 00:04:11.890
yellow, showing lower power
mode, and the gaps between,

00:04:11.890 --> 00:04:14.500
showing us where the
radio is idle.

00:04:14.500 --> 00:04:17.370
Now we can see straight away
that there are no gaps,

00:04:17.370 --> 00:04:19.760
meaning that while this app is
running, it's keeping the cell

00:04:19.760 --> 00:04:21.839
radio powered on continuously.

00:04:21.839 --> 00:04:24.650
In fact, the regular updates
alone are enough to prevent

00:04:24.650 --> 00:04:27.700
the radio from ever returning
to an idle state.

00:04:27.700 --> 00:04:30.210
That shows us that the "Big
Cookie" model is a far better

00:04:30.210 --> 00:04:33.030
approach to coordinating
our data transfers.

00:04:33.030 --> 00:04:35.280
In this example, I've
bundled all of the

00:04:35.280 --> 00:04:36.640
repeating transfers together.

00:04:36.640 --> 00:04:39.020
And the intermittent transfers
have been largely replaced

00:04:39.020 --> 00:04:40.840
with aggressive prefetching.

00:04:40.840 --> 00:04:43.820
Obviously, you usually can't
entirely predict what data

00:04:43.820 --> 00:04:46.910
users might need, nor can you
ignore either client or server

00:04:46.910 --> 00:04:48.930
side changes that need
to be synchronized.

00:04:48.930 --> 00:04:51.920
But you can aim to minimize
the number of radio state

00:04:51.920 --> 00:04:53.940
transitions through a
combination of aggressive

00:04:53.940 --> 00:04:56.620
prefetching, in addition to
batching and queuing any

00:04:56.620 --> 00:04:59.070
transfers that aren't time
critical and bundling these

00:04:59.070 --> 00:05:01.970
with user-initiated
time-critical transfers, or

00:05:01.970 --> 00:05:04.040
those initiated from
the server.

00:05:04.040 --> 00:05:06.590
The result is a significant
improvement in the amount of

00:05:06.590 --> 00:05:08.840
battery drain your app
is responsible for.

00:05:08.840 --> 00:05:11.320
In comparison to the previous
on-demand approach, the radio

00:05:11.320 --> 00:05:13.590
is now idle nearly
2/3 of the time.

00:05:13.590 --> 00:05:15.470
Even the active radio percentage
has dropped

00:05:15.470 --> 00:05:18.150
significantly, thanks to an
improved download efficiency

00:05:18.150 --> 00:05:21.480
as a result of transmitting
more data in each shot.

00:05:21.480 --> 00:05:24.150
So taking the cell radio into
account, you can minimize the

00:05:24.150 --> 00:05:27.080
battery impact associated with
your app's data transfers by

00:05:27.080 --> 00:05:28.960
transferring as little
data as possible as

00:05:28.960 --> 00:05:30.810
infrequently as possible.

00:05:30.810 --> 00:05:33.440
Defragment your network access
by prefetching, batching, and

00:05:33.440 --> 00:05:36.920
bundling your transfers, and
eliminate clients initiated

00:05:36.920 --> 00:05:39.305
updates and polling as
much as possible.

00:05:39.305 --> 00:05:41.630
The most important thing to
remember is that every time

00:05:41.630 --> 00:05:44.390
you transfer data, no matter
how small, the radio is

00:05:44.390 --> 00:05:46.330
powered up for nearly
half a minute.

00:05:46.330 --> 00:05:48.920
So every decision you make
should be based on minimizing

00:05:48.920 --> 00:05:51.030
the number of times
that this happens.

00:05:51.030 --> 00:05:53.470
I dive into each of these topics
in more detail in other

00:05:53.470 --> 00:05:56.180
videos in the Efficient Data
Transfer series of DevBytes,

00:05:56.180 --> 00:05:58.410
including looking at ways you
can analyze your own data

00:05:58.410 --> 00:06:00.980
transfer profile, and how to
implement some of these best

00:06:00.980 --> 00:06:03.550
practices using simple code
patterns, as well as

00:06:03.550 --> 00:06:05.460
implementing SyncAdapters
and Google

00:06:05.460 --> 00:06:06.710
Cloud Messaging solutions.

