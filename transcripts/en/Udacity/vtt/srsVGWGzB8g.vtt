WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
This gets us directly towards our homework.

00:00:03.000 --> 00:00:08.000
I want you to build a tool called Bonsaikon, for Bonsai Daikon

00:00:08.000 --> 00:00:10.000
or tiny Daikon.

00:00:10.000 --> 00:00:13.000
The idea is to take a number of executions, like these,

00:00:13.000 --> 00:00:16.000
and produce assertions, that is,

00:00:16.000 --> 00:00:19.000
invariants that hold for all runs observed.

00:00:19.000 --> 00:00:23.000
For the starting point, all I want from you is ranges of variables

00:00:23.000 --> 00:00:25.000
as you have seen them.

00:00:25.000 --> 00:00:28.000
What Bonsaikon should produce is a range

00:00:28.000 --> 00:00:33.000
of variable values seen at the call and at the return of each function.

00:00:33.000 --> 00:00:36.000
Here is an example, for square root, how this should look like.

00:00:36.000 --> 00:00:38.000
At the call of the square root function,

00:00:38.000 --> 00:00:42.000
x is always between 2 and 16.

00:00:42.000 --> 00:00:47.000
And the variable epsilon is always 10 to the power of minus 7.

00:00:47.000 --> 00:00:50.000
And as you can see, I want you to output these ranges

00:00:50.000 --> 00:00:54.000
and if the range has just one value, then I want this to be an equal sign.

00:00:54.000 --> 00:00:58.000
I want you to output these as assertions that can be

00:00:58.000 --> 00:01:00.000
inserted immediately into the code.

00:01:00.000 --> 00:01:04.000
This would be pre conditions that hold when a function is called,

00:01:04.000 --> 00:01:07.000
but I also want you to report post conditions

00:01:07.000 --> 00:01:10.000
that hold when the function returns.

00:01:10.000 --> 00:01:14.000
Here we have the range for the variable y at the end of square root

00:01:14.000 --> 00:01:16.000
and also the return value,

00:01:16.000 --> 00:01:18.000
which I gave this special name, "ret."

00:01:18.000 --> 00:01:22.000
Return value is between square root of 2 and square root of 16

00:01:22.000 --> 00:01:24.000
as seen for these 3 runs.

00:01:24.000 --> 00:01:27.000
The question is how do you get these ranges?

00:01:27.000 --> 00:01:30.000
The answer to that, again, is our tracing function,

00:01:30.000 --> 00:01:34.000
which allows us to record the state of the program at every call

00:01:34.000 --> 00:01:36.000
and at every return.

00:01:36.000 --> 00:01:39.000
What you set up is a special trace-it function,

00:01:39.000 --> 00:01:41.000
which gets the current frame that executed,

00:01:41.000 --> 00:01:44.000
the event that's taken place, and an argument.

00:01:44.000 --> 00:01:46.000
Let's first take a look at the event.

00:01:46.000 --> 00:01:48.000
The event is either call or return,

00:01:48.000 --> 00:01:53.000
which translates directly into these two situations you'd like to monitor.

00:01:53.000 --> 00:01:56.000
The current frame tells you which code is being executed.

00:01:56.000 --> 00:02:04.000
frame.f-code.co-name gives you the name of the function that's executed.

00:02:04.000 --> 00:02:07.000
In our case, that would be square root.

00:02:07.000 --> 00:02:10.000
The frame.f-locals attribute is a dictionary

00:02:10.000 --> 00:02:13.000
that gives you access to all local variables

00:02:13.000 --> 00:02:16.000
such as y or x or eps.

00:02:16.000 --> 00:02:20.000
And finally, if the event is returned, the argument that's passed over here

00:02:20.000 --> 00:02:22.000
gives you the return value.

00:02:22.000 --> 00:02:26.000
So what you do is you run your program with the trace function enabled.

00:02:26.000 --> 00:02:28.000
You record the call and return events.

00:02:28.000 --> 00:02:31.000
You check for every single function that's being called.

00:02:31.000 --> 00:02:33.000
and is called and is returned.

00:02:33.000 --> 00:02:36.000
You check all the variables through frame f-locals,

00:02:36.000 --> 00:02:38.000
and over time you record the ranges.

00:02:38.000 --> 00:02:43.000
When the execution is done, you output the ranges that you have observed.

00:02:43.000 --> 00:02:46.000
So in the beginning, first run, square root of 2, x is just 2.

00:02:46.000 --> 00:02:48.000
Then x is between 2 and 4.

00:02:48.000 --> 00:02:50.000
And then x is between 2 and 16.

00:02:50.000 --> 00:02:54.000
Likewise, for y where the square root gets extended over time.

00:02:54.000 --> 00:02:58.000
Likewise for the return value, where again the range of return values

00:02:58.000 --> 00:03:00.000
extends as more and more runs are observed.

