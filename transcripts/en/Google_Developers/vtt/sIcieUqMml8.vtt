WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.160
Hi, I'm Glenn,
from Android Audio.

00:00:03.160 --> 00:00:06.720
I like putting stuff together,
especially music and software.

00:00:06.720 --> 00:00:08.780
Today, I want to
share some cool tricks

00:00:08.780 --> 00:00:11.692
I've been learning
about audio formats.

00:00:11.692 --> 00:00:13.150
For most of our
careers, we've been

00:00:13.150 --> 00:00:17.330
told to use integer, or fixed
point arithmetic for audio.

00:00:17.330 --> 00:00:19.650
There's some good reasons
why we all use integers.

00:00:19.650 --> 00:00:20.760
They're great.

00:00:20.760 --> 00:00:22.680
Fixed point, too.

00:00:22.680 --> 00:00:24.630
From digital to
analog converters,

00:00:24.630 --> 00:00:29.960
to CDs to USB audio, integers
and fixed point are everywhere.

00:00:29.960 --> 00:00:35.200
As we all know, hackers avoid
Floats as much as we do basic.

00:00:35.200 --> 00:00:39.240
So let's review the reasons why
we don't use floating point.

00:00:39.240 --> 00:00:41.250
First of all, it's not there.

00:00:41.250 --> 00:00:43.900
No affordable
floating point unit.

00:00:43.900 --> 00:00:45.730
This was my first FPU.

00:00:45.730 --> 00:00:48.590
5,000 flops, and so
expensive, we only

00:00:48.590 --> 00:00:51.880
used it when we
absolutely had two.

00:00:51.880 --> 00:00:53.280
Floats are way big.

00:00:53.280 --> 00:00:55.510
Four bytes each.

00:00:55.510 --> 00:00:57.470
OK, this is just gross.

00:00:57.470 --> 00:00:58.730
But you get the idea.

00:00:58.730 --> 00:01:01.100
Floats are huge.

00:01:01.100 --> 00:01:02.970
This one is my favorite.

00:01:02.970 --> 00:01:05.640
The decadence of
Rome, I mean Floats.

00:01:05.640 --> 00:01:08.240
Even if you have the CPU and
memory for floating point,

00:01:08.240 --> 00:01:11.750
it's just sinful to waste
resources so extravagantly,

00:01:11.750 --> 00:01:14.630
on something that's
clearly a luxury.

00:01:14.630 --> 00:01:16.880
It's kind of like
using a 32-bit, um--

00:01:16.880 --> 00:01:19.880
I mean 64-bit ant to
represent a Boolean.

00:01:19.880 --> 00:01:23.250
You do realize this is
what actually happens now?

00:01:23.250 --> 00:01:25.920
So, Floats are clearly out.

00:01:25.920 --> 00:01:28.450
Or so we think.

00:01:28.450 --> 00:01:31.780
Now, what do we really want
from our numbers in audio?

00:01:31.780 --> 00:01:35.750
Wide dynamic range for soft
and loud, consistent accuracy

00:01:35.750 --> 00:01:38.750
across that range,
and lots of headroom.

00:01:38.750 --> 00:01:40.885
No clipping.

00:01:40.885 --> 00:01:42.600
So let's examine our friends.

00:01:42.600 --> 00:01:44.390
Integer and fixed point.

00:01:44.390 --> 00:01:45.270
First, integer.

00:01:45.270 --> 00:01:46.080
This is simple.

00:01:46.080 --> 00:01:48.700
Adjacent values differ by one.

00:01:48.700 --> 00:01:52.550
Integers are represented
in two's complement binary.

00:01:52.550 --> 00:01:56.310
Fixed point is the same,
with an implied binary point.

00:01:56.310 --> 00:01:58.170
For audio, the
implied binary point

00:01:58.170 --> 00:02:01.460
is almost always at the left
of the most significant bit.

00:02:01.460 --> 00:02:04.700
And adjacent values differ
by a constant power of two.

00:02:04.700 --> 00:02:07.340
It's still two's
complement binary.

00:02:07.340 --> 00:02:10.380
Now earlier, we thought
Floats work out.

00:02:10.380 --> 00:02:12.274
But are they really?

00:02:12.274 --> 00:02:13.940
Let's look at them
anyway-- don't worry,

00:02:13.940 --> 00:02:15.460
it's just to make fun of them.

00:02:15.460 --> 00:02:17.877
Or maybe not?

00:02:17.877 --> 00:02:19.960
Floating point starts with
a fixed point mantissa.

00:02:19.960 --> 00:02:21.900
The number of bits
in the mantissa

00:02:21.900 --> 00:02:24.840
determines the overall accuracy.

00:02:24.840 --> 00:02:26.880
Then, we add an
integer exponent.

00:02:26.880 --> 00:02:28.500
This increases the range.

00:02:28.500 --> 00:02:30.940
The wider the exponent,
the more range.

00:02:30.940 --> 00:02:34.160
There's a signed bit too, but
we'll ignore that for now.

00:02:34.160 --> 00:02:36.930
Now, remember what
we all want in audio.

00:02:36.930 --> 00:02:40.810
Wide dynamic range for soft
and loud, consistent accuracy

00:02:40.810 --> 00:02:44.660
across that range, and lots of
headroom to prevent clipping.

00:02:44.660 --> 00:02:48.050
Let's see how well
Float does on all three.

00:02:48.050 --> 00:02:50.900
We'll start with dynamic range.

00:02:50.900 --> 00:02:54.150
Here's the formula for a
Float, combining sine, mantissa

00:02:54.150 --> 00:02:55.400
and exponent.

00:02:55.400 --> 00:02:59.300
Turns out the exponent increases
the dynamic range dramatically,

00:02:59.300 --> 00:03:02.150
compared to integer,
or fixed point.

00:03:02.150 --> 00:03:04.830
How many db or bits you
need for content delivery

00:03:04.830 --> 00:03:06.080
is controversial.

00:03:06.080 --> 00:03:07.260
I'm not going there.

00:03:07.260 --> 00:03:10.500
What is certain, is that a
wide dynamic range is useful

00:03:10.500 --> 00:03:11.330
internally.

00:03:11.330 --> 00:03:13.760
And Float provides that.

00:03:13.760 --> 00:03:16.030
Now, let's look at accuracy.

00:03:16.030 --> 00:03:18.790
Remember, adjacent integer
values differ by one,

00:03:18.790 --> 00:03:22.470
and adjacent fixed point values
by a constant power of two.

00:03:22.470 --> 00:03:24.860
Sounds good at first.

00:03:24.860 --> 00:03:28.010
Within some fixed point, though
the differences are constant,

00:03:28.010 --> 00:03:29.970
the ratios between
adjacent values

00:03:29.970 --> 00:03:33.140
are not constant, for either
integer, or fixed point.

00:03:33.140 --> 00:03:34.200
Whoah!

00:03:34.200 --> 00:03:36.680
What's that going to do
to consistent accuracy?

00:03:36.680 --> 00:03:38.880
We lose accuracy,
where we need it most.

00:03:38.880 --> 00:03:40.090
Quiet signals.

00:03:40.090 --> 00:03:42.160
In this graph, the
ratios approach two

00:03:42.160 --> 00:03:45.450
as we get quieter,
instead of one.

00:03:45.450 --> 00:03:48.060
And here's our ratio
chart for Float.

00:03:48.060 --> 00:03:49.730
The ratios between
adjacent values

00:03:49.730 --> 00:03:52.850
are now approximately
constant, and approach one.

00:03:52.850 --> 00:03:54.720
The distances are logarithmic.

00:03:54.720 --> 00:03:56.990
Notice the tighter
packing near zero.

00:03:56.990 --> 00:04:00.910
This means consistent accuracy
across the full dynamic range.

00:04:00.910 --> 00:04:04.270
So, soft and loud
both sound great.

00:04:04.270 --> 00:04:06.280
Finally, let's look at Headroom.

00:04:06.280 --> 00:04:09.950
Headroom is a safety zone, above
your nominal maximum level,

00:04:09.950 --> 00:04:13.230
to help prevent clipping during
intermediate calculations,

00:04:13.230 --> 00:04:14.820
and transience.

00:04:14.820 --> 00:04:17.070
This is where floating
point really shines.

00:04:17.070 --> 00:04:19.140
It's almost impossible
to clip samples

00:04:19.140 --> 00:04:20.920
during intermediate
calculations,

00:04:20.920 --> 00:04:24.240
because the range to
afloat is astronomical.

00:04:24.240 --> 00:04:27.310
Maximize your headroom.

00:04:27.310 --> 00:04:31.050
So, it's time to
think differently.

00:04:31.050 --> 00:04:32.570
Those were some
compelling reasons

00:04:32.570 --> 00:04:37.314
to consider floating point,
in your next audio app.

00:04:37.314 --> 00:04:39.480
You don't need to be an
expert in numerical analysis

00:04:39.480 --> 00:04:40.830
to use floating point.

00:04:40.830 --> 00:04:43.340
But floating point
is not a panacea.

00:04:43.340 --> 00:04:46.220
You do need to know the
gotchas, and there are a few.

00:04:46.220 --> 00:04:47.750
Check out the
references at the end,

00:04:47.750 --> 00:04:49.490
with some tips and
tricks that will

00:04:49.490 --> 00:04:52.990
help you avoid the
most common problems.

00:04:52.990 --> 00:04:55.640
So, I ask you to
consider floating point

00:04:55.640 --> 00:04:57.450
in your next audio app.

00:04:57.450 --> 00:05:00.550
And what about all those reasons
not to use floating point?

00:05:00.550 --> 00:05:02.080
Now, you're probably
expecting me

00:05:02.080 --> 00:05:04.888
to say those reasons
aren't valid anymore.

00:05:04.888 --> 00:05:06.190
Uh uh.

00:05:06.190 --> 00:05:07.770
Some of them are still true.

00:05:07.770 --> 00:05:09.970
Especially the
moral depravity one.

00:05:09.970 --> 00:05:13.800
But the benefits mean it's
time to hold our noses,

00:05:13.800 --> 00:05:16.400
and consider floating
point anyway.

00:05:16.400 --> 00:05:17.450
Be forewarned.

00:05:17.450 --> 00:05:19.480
If you use floating
point, others

00:05:19.480 --> 00:05:21.900
will try to shame you
during code reviews.

00:05:21.900 --> 00:05:24.380
So, be prepared for glory.

00:05:24.380 --> 00:05:25.310
Be proud.

00:05:25.310 --> 00:05:27.785
Wear the scarlet
F, you'll do fine.

00:05:31.150 --> 00:05:33.410
Make sure to check out this
link for more information.

00:05:36.200 --> 00:05:37.470
I'm Glenn Kasten.

00:05:37.470 --> 00:05:39.660
Thank you for watching.

