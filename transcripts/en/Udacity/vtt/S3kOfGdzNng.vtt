WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The next coverage metric we want to look at is called path coverage.

00:00:03.000 --> 00:00:07.000
Path coverage is a little bit different than previous metrics that we've looked at,

00:00:07.000 --> 00:00:10.000
because it cares about how you got to a certain piece of code.

00:00:10.000 --> 00:00:13.000
In general, things like statement coverage and branch coverage,

00:00:13.000 --> 00:00:16.000
and even to a large extent MC/DC coverage and loop coverage,

00:00:16.000 --> 00:00:19.000
don't really care how you got somewhere as long as you executed the code

00:00:19.000 --> 00:00:21.000
in such a way that you met the conditions.

00:00:21.000 --> 00:00:24.000
So, path coverage cares how you got somewhere, so let's look at what that means.

00:00:24.000 --> 00:00:29.000
A path through a program is a sequence of decisions made by operators in the program.

00:00:29.000 --> 00:00:33.000
Okay, so let's look at the function foo, which takes two parameters, x and y,

00:00:33.000 --> 00:00:38.000
and does something x times and does something else once if y is true.

00:00:38.000 --> 00:00:41.000
What we're going to try to do is visualize the decisions made by the Python language

00:00:41.000 --> 00:00:43.000
as it goes through this program.

00:00:43.000 --> 00:00:46.000
Let's first of all look at the execution if x is 0 and y is true.

00:00:46.000 --> 00:00:51.000
Range 0 is the empty list, so we're not going to do anything here.

00:00:51.000 --> 00:00:55.000
And then y is true, we're going to execute something else, and we'll leave.

00:00:55.000 --> 00:00:57.000
So, this is one sequence of decisions that we made.

00:00:57.000 --> 00:00:59.000
We made the decision to execute something 0 times and something else once.

00:00:59.000 --> 00:01:02.000
So, now if we come in with x1 and y true,

00:01:02.000 --> 00:01:05.000
we execute something, we execute something else, and we leave.

00:01:05.000 --> 00:01:09.000
This is a separate path through the code, because we made a different set of decisions.

00:01:09.000 --> 00:01:12.000
Now, if we executed a third time with x coming in as 2,

00:01:12.000 --> 00:01:18.000
we're going to go execute something, go back, execute it again, execute something else and leave.

00:01:18.000 --> 00:01:23.000
This, again, is a distinct path through the code, because we made a different set of decisions

00:01:23.000 --> 00:01:26.000
when we got to branch points in the code.

00:01:26.000 --> 00:01:30.000
As x increases in value, we get more and more and more paths.

00:01:30.000 --> 00:01:35.000
One thing you might ask is, just by changing x how many paths can we get through the code?

00:01:35.000 --> 00:01:37.000
The answer is that it's unlimited.

00:01:37.000 --> 00:01:40.000
You can see that achieving path coverage is going to be impossible for all real code.

00:01:40.000 --> 00:01:44.000
What it does is gives us something to think about when we're generating test cases,

00:01:44.000 --> 00:01:48.000
because, of course, every possible path through the code might have a distinct behavior,

00:01:48.000 --> 00:01:50.000
so it is the case that we'd like to test lots of paths through the code.

00:01:50.000 --> 00:01:52.000
We can't test them all.

00:01:52.000 --> 00:01:55.000
Now, there's going to be a similar family of paths for y is false.

00:01:55.000 --> 00:01:59.000
We're going to get a path where x is 0, so we're going to skip doing something.

00:01:59.000 --> 00:02:01.000
And we're also not going to execute something else.

00:02:01.000 --> 00:02:04.000
We essentially have 2 times infinity paths through this code.

00:02:04.000 --> 00:02:07.000
So, path coverage is basically an ideal that we'd like to approach 

00:02:07.000 --> 00:02:11.000
if we want to do a good job testing. It's not going to be something that we can actually achieve.

00:02:11.000 --> 00:02:13.000
Now, let's take a really quick quiz on path coverage.

00:02:13.000 --> 00:02:16.000
I'm going to write a function here called foo again,

00:02:16.000 --> 00:02:19.000
and it's going to take three boolean parameters--x, y, and z.

00:02:19.000 --> 00:02:23.000
What the code is going to do is it's going to use each of them as a conditional in a test.

00:02:23.000 --> 00:02:25.000
So, if x is true, we do something. 

00:02:25.000 --> 00:02:28.000
Otherwise, we do nothing here. If y is true, we do something.

00:02:28.000 --> 00:02:30.000
If z is true, we do something.

00:02:30.000 --> 00:02:33.000
The question I pose to you is how many paths through this code are there?

00:02:33.000 --> 00:02:36.000
Go ahead and write your answer in the text box.

