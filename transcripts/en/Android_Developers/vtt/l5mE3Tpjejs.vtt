WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.430
Android - Performance Patterns

00:00:02.430 --> 00:00:05.320
We live in data hungry times.

00:00:05.320 --> 00:00:08.990
Users want more data, more often, and are
spending more time searching for it.

00:00:08.990 --> 00:00:11.740
As a developer of the
next great social application,

00:00:11.740 --> 00:00:14.310
this might seem a perfect match
for your business plan.

00:00:14.310 --> 00:00:17.341
But unless you construct your
networking requests the right way,

00:00:17.341 --> 00:00:19.701
your business plan might be a huge flop.

00:00:19.701 --> 00:00:20.954
My name is Colt McAnlis.

00:00:20.954 --> 00:00:24.050
And unknown to most developers,
each individual networking request

00:00:24.050 --> 00:00:27.383
can have a load of performance
problems for their users.

00:00:27.383 --> 00:00:30.757
At its core, networking performance
is about reducing the amount of time

00:00:30.757 --> 00:00:33.715
between when the user wants data
and the networking returns it.

00:00:33.715 --> 00:00:36.390
And there's a ton of things
that influence that variable,

00:00:36.390 --> 00:00:40.010
for example, bandwidth latency,
cellular connection speed,

00:00:40.010 --> 00:00:42.225
small mammals, apparently.

00:00:42.225 --> 00:00:45.870
These are the typical things that users
know about, and generally understand,

00:00:45.870 --> 00:00:47.206
when it comes to networking.

00:00:47.206 --> 00:00:49.690
But there's also a second set
of performance concerns

00:00:49.690 --> 00:00:53.238
that developers have to be aware of,
which are a little bit more pragmatic.

00:00:53.238 --> 00:00:56.880
For example, using the cell radio
for networking is the number one killer

00:00:56.880 --> 00:00:59.216
of battery performance for mobile devices.

00:00:59.216 --> 00:01:04.070
And the more data you're transferring
results in costs and charges for users.

00:01:04.080 --> 00:01:06.780
See, most of the time,
folks on limited bandwidth devices

00:01:06.780 --> 00:01:09.620
don't appreciate you bringing down
2 gigabytes of image data

00:01:09.620 --> 00:01:11.320
for your social media app.

00:01:11.320 --> 00:01:15.480
In the end, it all boils down to two key
things that developers need to focus on.

00:01:15.480 --> 00:01:19.155
Number one, reducing the amount of time
you keep the radio active.

00:01:19.155 --> 00:01:23.063
And number two, reducing the size
of the data that you're fetching.

00:01:23.063 --> 00:01:26.230
Now, lowering the request count
is actually a complex equation.

00:01:26.230 --> 00:01:29.958
But for the sake of sanity, you can
generalize it into three primary buckets.

00:01:29.958 --> 00:01:34.252
Firstly is the stuff the user asks to do.
So, like, update now.

00:01:34.252 --> 00:01:37.447
Secondly is the stuff that the server
needs to update you about,

00:01:37.447 --> 00:01:39.805
like a returning response
or letting you know that

00:01:39.805 --> 00:01:41.430
there's new social data available.

00:01:41.430 --> 00:01:44.347
And thirdly is the stuff that needs
to be uploaded frequently,

00:01:44.347 --> 00:01:46.880
like uploading analytics,
or checking device location,

00:01:46.880 --> 00:01:48.640
or something else that's interesting.

00:01:48.640 --> 00:01:53.018
Now, the second two categories are really
the prime candidates for optimization.

00:01:53.018 --> 00:01:58.140
For example, you should never, ever, ever,
poll the server regularly for updates.

00:01:58.140 --> 00:02:00.540
You're basically just
wasting bandwidth and battery

00:02:00.540 --> 00:02:02.950
for the server to tell you
that nothing's changed.

00:02:02.950 --> 00:02:05.860
Instead, it's a better idea
to leverage other services

00:02:05.860 --> 00:02:09.140
like Google Cloud Messaging,
which will let the server signal the app

00:02:09.140 --> 00:02:10.737
when there's new content.

00:02:10.737 --> 00:02:14.174
This will reduce the amount of battery
the phone uses as well as reduce

00:02:14.174 --> 00:02:17.369
the overall number of server responses
that you need to worry about.

00:02:17.369 --> 00:02:20.780
And for those situations where
cloud push can't be used,

00:02:20.780 --> 00:02:23.530
it's critically important
to reduce the frequency

00:02:23.530 --> 00:02:25.180
that those requests are made.

00:02:25.180 --> 00:02:28.200
For example, rather than polling
the server every five seconds

00:02:28.200 --> 00:02:30.920
asking for data,
try to use a backoff pattern

00:02:30.920 --> 00:02:34.442
to reduce the number of requests
and get mostly the same results.

00:02:34.442 --> 00:02:37.355
And rather than letting your requests
be strung out over time,

00:02:37.355 --> 00:02:40.090
try to batch them together,
so they happen in short bursts

00:02:40.090 --> 00:02:44.555
to optimize for an active cell radio,
which, will reduce battery waste.

00:02:44.555 --> 00:02:47.415
And even try to think about
prefetching your data

00:02:47.415 --> 00:02:50.920
so that you can reduce the need
for executing future requests

00:02:50.920 --> 00:02:52.252
when you can do them now.

00:02:52.252 --> 00:02:55.508
Now, stringing all of these
optimizations together is a sure fire way

00:02:55.508 --> 00:02:59.332
to reduce the number of overall requests,
which will do wonders for battery life

00:02:59.332 --> 00:03:00.819
and costs for your users.

00:03:00.819 --> 00:03:04.260
And the good news is that you can
update your app to adopt these patterns

00:03:04.260 --> 00:03:06.548
without having to write
a massive amount of code.

00:03:06.548 --> 00:03:09.430
GCMNetworkManager is a
Google Play Services API,

00:03:09.430 --> 00:03:11.860
which helps to schedule
network-oriented tasks

00:03:11.860 --> 00:03:13.870
and handle batching for you.

00:03:13.870 --> 00:03:16.790
This greatly simplifies the implementation
of common patterns,

00:03:16.790 --> 00:03:20.690
such as waiting for network connectivity,
network retries, and exponential backoff,

00:03:20.690 --> 00:03:25.228
basically all the good stuff you need
with a single, helpful API.

00:03:25.228 --> 00:03:29.080
Now, of course, the second large
perf target is reducing the size

00:03:29.080 --> 00:03:32.320
of the data in your request,
which, as far problems go,

00:03:32.320 --> 00:03:34.722
is kind of a personal favorite of mine.

00:03:34.722 --> 00:03:37.480
Let's see if we can get all of this
on one slide, shall we?

00:03:37.480 --> 00:03:40.907
Firstly, watch the CompressorHead
series of videos so that you understand

00:03:40.907 --> 00:03:44.810
more about data compression in general and
the algorithms that make up the science.

00:03:44.810 --> 00:03:48.240
Then make sure you take the time
to read my article on image compression

00:03:48.240 --> 00:03:51.330
and go through and be hyperaggressive
about the quality and format

00:03:51.330 --> 00:03:53.470
of the images you're
sending from the servers.

00:03:53.470 --> 00:03:55.140
Remember, smaller is always better.

00:03:55.140 --> 00:03:58.800
Oh, and if you're a game developer,
then check out the "Texture Wranglin" talk

00:03:58.800 --> 00:04:02.549
or the Crabby image format to get
some better results for ideal textures.

00:04:02.549 --> 00:04:05.922
And once that's done, go back
and check out my "GZip is NOT enough" talk

00:04:05.922 --> 00:04:09.393
to get a better understanding of
lossless compression for text-based data.

00:04:09.393 --> 00:04:11.070
There's an article on that, too.

00:04:11.070 --> 00:04:14.720
Followed, of course, by a hard, clear look
on how often you're sending around

00:04:14.720 --> 00:04:17.860
XML and JSON packets,
which hopefully will depress you,

00:04:17.860 --> 00:04:21.179
and you'll realize that you shouldn't
be sending around raw text data,

00:04:21.179 --> 00:04:24.360
and instead, should be leveraging
Protobufs or FlatBuffers formats,

00:04:24.360 --> 00:04:28.489
which I've got a video on that, too.
I talk a lot about compression.

00:04:28.489 --> 00:04:32.614
Anyhow, if you're ever wondering how
your app is using or abusing the network,

00:04:32.614 --> 00:04:34.910
make sure to spend
a lot of time getting familiar

00:04:34.910 --> 00:04:37.240
with the networking tool
inside of Android Studio.

00:04:37.240 --> 00:04:39.832
It'll show you how often
you make requests, their size,

00:04:39.832 --> 00:04:42.080
and how long it took
to complete the round-trip.

00:04:42.080 --> 00:04:46.301
If something's going wrong, this tool
is a first step in tracking it down.

00:04:46.301 --> 00:04:49.000
But as we all know,
this is just the beginning.

00:04:49.000 --> 00:04:51.090
For a deeper discussion
on any of the topics

00:04:51.090 --> 00:04:53.150
I just rambled on about,
check out the rest

00:04:53.150 --> 00:04:55.226
of the Android
Performance Patterns content.

00:04:55.226 --> 00:04:58.420
And don't forget that there's
a whole horde of developers out there

00:04:58.420 --> 00:05:00.250
solving the same perf problems as you.

00:05:00.250 --> 00:05:04.373
So stop by the Google+ community
and ask for advice when you get stuck.

00:05:04.373 --> 00:05:07.070
Anyhow, keep calm,
profile your code,

00:05:07.070 --> 00:05:09.280
and always remember,
perf matters.

00:05:09.280 --> 00:05:11.730
(music playing)

