WEBVTT
Kind: captions
Language: en

00:00:00.980 --> 00:00:02.170
JAMAL EASON: Good morning.

00:00:02.170 --> 00:00:05.470
Welcome to Google I/O, day two.

00:00:05.470 --> 00:00:08.640
Welcome to our session on What's
New in Android Development

00:00:08.640 --> 00:00:09.310
Tools.

00:00:09.310 --> 00:00:10.875
We are so glad you
joined us, today,

00:00:10.875 --> 00:00:13.416
and are really excited to show
you all the great things we've

00:00:13.416 --> 00:00:15.780
been working on to help
you make great apps.

00:00:15.780 --> 00:00:17.890
As a reminder, we look
forward to your feedback,

00:00:17.890 --> 00:00:20.740
so please feel free to fill out
the survey after the session.

00:00:25.809 --> 00:00:28.350
As far as introductions, we are
part of the Android Developer

00:00:28.350 --> 00:00:29.450
Tools team.

00:00:29.450 --> 00:00:30.540
Myself, I'm Jamal.

00:00:30.540 --> 00:00:32.607
I'm the product manager
on Android Studio.

00:00:32.607 --> 00:00:34.440
XAVIER DUCROHET: Hello,
I'm Xavier Ducrohet.

00:00:34.440 --> 00:00:37.165
I'm the tech lead for the
Android Developer Tools.

00:00:37.165 --> 00:00:38.790
TOR NORBYE: And I'm
Tor Norbye, and I'm

00:00:38.790 --> 00:00:40.165
the tech lead for
Android Studio.

00:00:43.500 --> 00:00:45.675
JAMAL EASON: Last year, we
announced a early preview

00:00:45.675 --> 00:00:47.760
of Android Studio,
and we're continuing

00:00:47.760 --> 00:00:50.240
to invest in Android tools.

00:00:50.240 --> 00:00:51.800
Since launching the
preview, we have

00:00:51.800 --> 00:00:56.230
had thousands of active
users, we had great feedback,

00:00:56.230 --> 00:00:58.030
and today, we're
glad to announce

00:00:58.030 --> 00:01:00.574
Android Studio in beta.

00:01:00.574 --> 00:01:02.482
[APPLAUSE]

00:01:07.260 --> 00:01:10.300
JAMAL EASON: So Android Studio
now helps you develop apps

00:01:10.300 --> 00:01:12.610
with all the great new
development models introduced

00:01:12.610 --> 00:01:14.730
in the L developer
preview as well as

00:01:14.730 --> 00:01:17.900
supporting Android
Wear and Android TV.

00:01:17.900 --> 00:01:20.510
We'll show you a few demos
and some tips and tricks

00:01:20.510 --> 00:01:22.700
on how to make you
more efficient.

00:01:22.700 --> 00:01:24.200
As you heard in the
keynote, we also

00:01:24.200 --> 00:01:26.199
improved Android Studio
to integrate Google Play

00:01:26.199 --> 00:01:28.960
services and Google
Cloud services.

00:01:28.960 --> 00:01:31.460
Lastly, with
Android Studio beta,

00:01:31.460 --> 00:01:34.930
we have enhanced the Android
Studio Gradle infrastructure.

00:01:34.930 --> 00:01:37.830
Building on top of
the product flavors

00:01:37.830 --> 00:01:40.710
and build variants we
introduced last year,

00:01:40.710 --> 00:01:44.940
the Android Studio build system
now supports multiple APKs

00:01:44.940 --> 00:01:47.800
and supporting form
factors like Android Wear.

00:01:47.800 --> 00:01:51.310
With that, Xav will dig
deeper into the build system.

00:01:51.310 --> 00:01:53.140
XAVIER DUCROHET: Thank
you, J. All right,

00:01:53.140 --> 00:01:56.540
so our build system
is based on Gradle,

00:01:56.540 --> 00:01:58.230
you may be familiar
with it by now.

00:01:58.230 --> 00:02:01.540
If you're not, our
strategy was really

00:02:01.540 --> 00:02:04.970
to create a unified build system
so that whether you're building

00:02:04.970 --> 00:02:07.414
from inside Studio or
from your CI server,

00:02:07.414 --> 00:02:08.830
it's always the
same build, right?

00:02:08.830 --> 00:02:10.329
And we wanted to
have a build system

00:02:10.329 --> 00:02:13.980
that was extremely flexible,
that would-- as J said--

00:02:13.980 --> 00:02:16.870
support the whole ecosystem,
whether you're targeting

00:02:16.870 --> 00:02:21.810
a watch, now, or targeting
multiple APKs, a paid version,

00:02:21.810 --> 00:02:24.952
a free version, different APIs.

00:02:24.952 --> 00:02:26.660
So we wanted really
a lot of flexibility.

00:02:26.660 --> 00:02:29.315
And we wanted, also, to enable
a lot of code reusability.

00:02:29.315 --> 00:02:30.690
We heard a lot
from people saying

00:02:30.690 --> 00:02:32.850
that they wanted to
have a lot of libraries

00:02:32.850 --> 00:02:35.370
and split their code
into various modules.

00:02:35.370 --> 00:02:38.930
And so Gradle is really
the core strategy for that,

00:02:38.930 --> 00:02:41.510
but the biggest thing is
that we wanted that whatever

00:02:41.510 --> 00:02:44.610
customization you need
to do, it would always

00:02:44.610 --> 00:02:45.930
work inside the IDE.

00:02:45.930 --> 00:02:48.830
So the integration
between Gradle and the IDE

00:02:48.830 --> 00:02:51.480
is our strong focus.

00:02:51.480 --> 00:02:56.500
So when we look back on the last
12 months since the last I/O,

00:02:56.500 --> 00:02:58.640
we did a lot of
features and bug fixes,

00:02:58.640 --> 00:03:00.960
a lot of-- around variants,
and things like that.

00:03:00.960 --> 00:03:02.750
We did some performance
improvements,

00:03:02.750 --> 00:03:05.720
and we focused a lot
on IDE integration.

00:03:05.720 --> 00:03:08.020
And so it's no surprise that
our current focus is still

00:03:08.020 --> 00:03:09.224
the same.

00:03:09.224 --> 00:03:11.140
Variant support, again,
being able to generate

00:03:11.140 --> 00:03:13.870
multiple versions
of the same APK.

00:03:13.870 --> 00:03:17.220
A lot of customization and APIs
for you to extend your build,

00:03:17.220 --> 00:03:18.180
create new plug-ins.

00:03:18.180 --> 00:03:19.460
There's already some
plug-ins out there

00:03:19.460 --> 00:03:21.020
that are built on
top of our plug-in.

00:03:21.020 --> 00:03:23.550
We're really excited by that.

00:03:23.550 --> 00:03:25.434
We need to focus a
lot on performance.

00:03:25.434 --> 00:03:26.850
We know a lot of
you are not super

00:03:26.850 --> 00:03:28.308
happy with the
current performance,

00:03:28.308 --> 00:03:30.470
and we're doing a
lot of work there.

00:03:30.470 --> 00:03:32.770
And we're, again, focusing
on IDE integration.

00:03:32.770 --> 00:03:35.290
The IDE integration
is really important.

00:03:35.290 --> 00:03:36.790
Today, when we were
announcing beta,

00:03:36.790 --> 00:03:39.360
it's because we spent the last
12 months doing a lot of work

00:03:39.360 --> 00:03:42.360
on making sure that the
communication between Gradle

00:03:42.360 --> 00:03:47.260
and between Studio is as ready
as-- well, it's not really

00:03:47.260 --> 00:03:49.100
ready, yet, but it
is very close, right?

00:03:49.100 --> 00:03:53.420
And if you've been using
Studio for the last 12 months,

00:03:53.420 --> 00:03:55.300
you probably have
had a lot of issues

00:03:55.300 --> 00:03:57.607
when you upgrade to a
new version of Studio,

00:03:57.607 --> 00:04:00.190
and then it tells you, well, I
need the new version of Gradle,

00:04:00.190 --> 00:04:02.240
and you upgrade to that
new version of Gradle.

00:04:02.240 --> 00:04:04.270
And then your build script
does not really work anymore,

00:04:04.270 --> 00:04:06.603
and you have to edit it, and
it's really painful, right?

00:04:06.603 --> 00:04:08.940
And so today, we're kind of
saying, OK, this is beta.

00:04:08.940 --> 00:04:12.020
We are committing to being
a lot nicer to you guys

00:04:12.020 --> 00:04:16.920
and making sure that
whenever you get an update,

00:04:16.920 --> 00:04:18.209
it won't be as bad.

00:04:18.209 --> 00:04:21.964
And we'll have
deprecation period of time

00:04:21.964 --> 00:04:23.380
where we change
things so that you

00:04:23.380 --> 00:04:26.580
have time to adapt
to the new version.

00:04:26.580 --> 00:04:28.480
So let's talk a little
bit about Variants.

00:04:28.480 --> 00:04:30.880
For those not familiar
with it, a variant

00:04:30.880 --> 00:04:32.840
is really a way of
generating multiple versions

00:04:32.840 --> 00:04:36.190
of the same APK, and there's
multiple ways of doing that.

00:04:36.190 --> 00:04:37.740
The first one is
through a concept

00:04:37.740 --> 00:04:39.690
called build types,
which controls

00:04:39.690 --> 00:04:41.680
how your application
is packaged.

00:04:41.680 --> 00:04:43.669
Is it a debuggable version?

00:04:43.669 --> 00:04:44.960
Is it not a debuggable version?

00:04:44.960 --> 00:04:46.580
What is its [? sine ?]
[? wave? ?] Is it running

00:04:46.580 --> 00:04:47.079
ProGuard?

00:04:47.079 --> 00:04:48.810
Is not running ProGuard?

00:04:48.810 --> 00:04:50.594
So it's the typical
debug versus release,

00:04:50.594 --> 00:04:52.010
but you can create
more than that.

00:04:52.010 --> 00:04:53.780
You can create new build types.

00:04:53.780 --> 00:04:55.450
Maybe you're
accessing your server,

00:04:55.450 --> 00:04:57.220
and you want to have a version
that accesses your production

00:04:57.220 --> 00:04:59.450
server, a version that
accesses staging server,

00:04:59.450 --> 00:05:03.490
a version, maybe, that access to
local, on your desktop, server.

00:05:03.490 --> 00:05:05.400
So you can really
control all of that.

00:05:05.400 --> 00:05:09.130
The second axis is product
flavors, which really controls

00:05:09.130 --> 00:05:11.220
what your application is,
and the typical use case

00:05:11.220 --> 00:05:14.620
is paid versus free or any
other sort of different session

00:05:14.620 --> 00:05:16.076
that you want to do.

00:05:16.076 --> 00:05:18.090
And it's a very
flexible mechanism.

00:05:18.090 --> 00:05:20.710
You can have custom
interface for each of those,

00:05:20.710 --> 00:05:23.332
you can have a lot of
source code suppression,

00:05:23.332 --> 00:05:24.790
and it's sort of
something that you

00:05:24.790 --> 00:05:27.905
can use right now to do
multiple APKs that the Play

00:05:27.905 --> 00:05:33.302
Store supports, like per density
or per ABI multiple APKs.

00:05:33.302 --> 00:05:35.010
So for example, you're
publishing a game.

00:05:35.010 --> 00:05:37.468
You're going to want to have
one version with the ARM code,

00:05:37.468 --> 00:05:41.240
one version with x86 code, and
one version with the MIPS code.

00:05:41.240 --> 00:05:43.607
Even though it's possible
to do it that way,

00:05:43.607 --> 00:05:45.940
it's not super efficient,
because the flavors are really

00:05:45.940 --> 00:05:47.290
meant to be very separate.

00:05:47.290 --> 00:05:48.831
And when you
[? speak ?] for example,

00:05:48.831 --> 00:05:51.640
ABI, what you really care about
is just the final packaging

00:05:51.640 --> 00:05:53.740
to just have three
different APKs,

00:05:53.740 --> 00:05:55.519
but everything else is the same.

00:05:55.519 --> 00:05:57.560
So we're going to introduce,
very soon, a concept

00:05:57.560 --> 00:05:59.410
called multiple
APK splits, which

00:05:59.410 --> 00:06:03.860
is a much more narrow and
focused concept about really

00:06:03.860 --> 00:06:07.030
just doing density
and ABI splits.

00:06:07.030 --> 00:06:10.770
And the benefit of it is that
the build will be much faster,

00:06:10.770 --> 00:06:13.300
because all the things that are
not specific to that split--

00:06:13.300 --> 00:06:15.890
so anything that's not relative
to building native code,

00:06:15.890 --> 00:06:21.300
for example-- will be shared
across all the variants.

00:06:21.300 --> 00:06:23.460
We also added some features
in the last 12 months.

00:06:23.460 --> 00:06:25.250
We added variant features.

00:06:25.250 --> 00:06:27.384
So variants are
really a combination

00:06:27.384 --> 00:06:28.800
of build types and
product flavor.

00:06:28.800 --> 00:06:31.105
So if you have a
certain number of build

00:06:31.105 --> 00:06:32.980
types and a certain
number of product flavor,

00:06:32.980 --> 00:06:35.670
we're going to make every
possible combination of those.

00:06:35.670 --> 00:06:38.640
There are some cases where you
don't want those combination.

00:06:38.640 --> 00:06:40.982
For example, if you're
splitting per density,

00:06:40.982 --> 00:06:42.690
and you're supporting
Gingerbread and ICS

00:06:42.690 --> 00:06:44.750
on different APKs,
well, there was

00:06:44.750 --> 00:06:48.044
no Gingerbread extra, extra
high devices, so you don't care

00:06:48.044 --> 00:06:49.460
about that particular
combination,

00:06:49.460 --> 00:06:51.250
so you should be able to
say, I don't want this one.

00:06:51.250 --> 00:06:53.370
Don't build it, so that
you don't build things

00:06:53.370 --> 00:06:55.100
that you don't care about.

00:06:55.100 --> 00:06:57.740
Next, we improved a
lot of dependencies.

00:06:57.740 --> 00:07:00.830
So when you have
product flavor, you're

00:07:00.830 --> 00:07:03.100
probably going to have
different dependencies, right?

00:07:03.100 --> 00:07:04.825
So for example, let's
say you're doing

00:07:04.825 --> 00:07:06.360
a paid and a free version.

00:07:06.360 --> 00:07:10.020
Your free version will probably,
maybe, be ad-supported,

00:07:10.020 --> 00:07:13.240
and so you're going to depend on
the library providing your ads.

00:07:13.240 --> 00:07:15.000
To do that, you'll
have a dependency

00:07:15.000 --> 00:07:16.510
only on that version.

00:07:16.510 --> 00:07:21.684
So the for each variant, we
combine all the dependencies

00:07:21.684 --> 00:07:23.100
coming from the
different elements

00:07:23.100 --> 00:07:26.380
like the main dependency,
the build type dependency,

00:07:26.380 --> 00:07:28.000
you could have a
debug-only dependency

00:07:28.000 --> 00:07:30.829
if you wanted, and then a
free-only dependency if you

00:07:30.829 --> 00:07:32.870
want it, and we've combined
all of that together.

00:07:32.870 --> 00:07:34.920
On top of that, we also
have different types

00:07:34.920 --> 00:07:35.820
of dependencies now.

00:07:35.820 --> 00:07:38.734
That's something that we
improved a lot recently.

00:07:38.734 --> 00:07:40.650
You used to have mostly
a compiled dependency,

00:07:40.650 --> 00:07:42.970
now we have a provided
dependency scope,

00:07:42.970 --> 00:07:44.560
which is only used
at compile time

00:07:44.560 --> 00:07:47.120
but is not packaged with
it, we your application.

00:07:47.120 --> 00:07:49.510
We have a compiled scope,
which is the regular one.

00:07:49.510 --> 00:07:52.580
It gets both used at compile
time and at packaging time.

00:07:52.580 --> 00:07:54.700
And then we have a
packaging only scope,

00:07:54.700 --> 00:07:57.150
which is called
APK, actually, which

00:07:57.150 --> 00:07:58.300
is only used for packaging.

00:07:58.300 --> 00:07:59.520
So you could
actually do something

00:07:59.520 --> 00:08:01.190
where you link against
a particular version

00:08:01.190 --> 00:08:03.231
of a library, but you
package a different version

00:08:03.231 --> 00:08:05.200
if you wanted to.

00:08:05.200 --> 00:08:07.490
And then, finally,
on the variant side,

00:08:07.490 --> 00:08:09.510
we have new Manifest Merger.

00:08:09.510 --> 00:08:11.250
So this is really a
very important part,

00:08:11.250 --> 00:08:14.810
because when you
look at your variant,

00:08:14.810 --> 00:08:18.620
you could have some-- for
example, permissions that

00:08:18.620 --> 00:08:20.160
are very specific to your debug.

00:08:20.160 --> 00:08:22.980
For example, in order to
have better crash reporting,

00:08:22.980 --> 00:08:25.710
maybe you want to use the read
logs permission, which really

00:08:25.710 --> 00:08:27.650
you shouldn't be using
on your final version.

00:08:27.650 --> 00:08:30.570
So you're going to have
it manifest in your debug

00:08:30.570 --> 00:08:33.020
build type that includes
that permission.

00:08:33.020 --> 00:08:35.120
On your flavor,
you're probably going

00:08:35.120 --> 00:08:36.919
to have-- if you
have ad support--

00:08:36.919 --> 00:08:38.980
you may be needing the
internet permission,

00:08:38.980 --> 00:08:42.232
so you only do that on the
manifest of your free version.

00:08:42.232 --> 00:08:44.440
And then if you're depending
on some libraries coming

00:08:44.440 --> 00:08:47.060
from somewhere, either
your own or third party,

00:08:47.060 --> 00:08:48.670
those may also be
needing permission,

00:08:48.670 --> 00:08:51.110
may be declaring activities,
declaring services,

00:08:51.110 --> 00:08:53.490
and you really want to
merge all of that together.

00:08:53.490 --> 00:08:58.040
So the old merger was pretty
basic and didn't do much.

00:08:58.040 --> 00:09:00.612
It didn't do any
merging of any nodes.

00:09:00.612 --> 00:09:02.320
So for example, if
you had a library that

00:09:02.320 --> 00:09:03.800
defined an activity,
and you wanted

00:09:03.800 --> 00:09:06.710
to reuse that activity node
coming from that manifest

00:09:06.710 --> 00:09:08.270
but wanted to tweak
it a little bit,

00:09:08.270 --> 00:09:10.250
you couldn't actually do that.

00:09:10.250 --> 00:09:11.640
So it was really a big problem.

00:09:11.640 --> 00:09:15.080
So the new one allows
you to really merge

00:09:15.080 --> 00:09:18.430
nodes coming from other
modules, and to really

00:09:18.430 --> 00:09:21.590
have control over the
merge, and to really

00:09:21.590 --> 00:09:23.470
be able to do what
you want to do.

00:09:23.470 --> 00:09:26.250
So for example,
here, what you have

00:09:26.250 --> 00:09:30.540
is an activity that-- so this
would be in your application.

00:09:30.540 --> 00:09:32.610
And let's say that this
particular activity--

00:09:32.610 --> 00:09:34.750
and the way to identify,
here, is the class

00:09:34.750 --> 00:09:38.600
name-- is coming from your
library, and all you want to do

00:09:38.600 --> 00:09:41.372
is basically replace the label
with a different resource.

00:09:41.372 --> 00:09:43.580
So here, you say, under the
label, you put the label.

00:09:43.580 --> 00:09:46.670
And then you have this new tool,
replace attribute, that says,

00:09:46.670 --> 00:09:47.790
just replace the label.

00:09:47.790 --> 00:09:52.490
And we're very strict about
it, like you can't just

00:09:52.490 --> 00:09:55.020
replace it without telling
us you want to replace it.

00:09:55.020 --> 00:09:59.910
And that's because if the label
is not defined in the library,

00:09:59.910 --> 00:10:01.697
you can set it in
your application.

00:10:01.697 --> 00:10:03.280
But if, suddenly,
without you knowing,

00:10:03.280 --> 00:10:06.310
the library defines it's own
label, it needs to tell you,

00:10:06.310 --> 00:10:07.580
there's a problem, right?

00:10:07.580 --> 00:10:09.890
You didn't ad it when
it wasn't there before,

00:10:09.890 --> 00:10:11.560
but now it's there,
so you should break.

00:10:11.560 --> 00:10:15.409
So we force you to explicitly
say what you want to replace.

00:10:15.409 --> 00:10:17.200
Another feature we
added to Manifest Merger

00:10:17.200 --> 00:10:20.470
is the ability to inject values
into it through placeholders.

00:10:20.470 --> 00:10:23.610
The big use case, here, is
things that the provider

00:10:23.610 --> 00:10:26.690
authority where it's very
dependent on our package name.

00:10:26.690 --> 00:10:29.530
And we know that when you
have a lot of variants,

00:10:29.530 --> 00:10:31.870
they can have all
different package names,

00:10:31.870 --> 00:10:34.550
and then you would have
to, basically, duplicate

00:10:34.550 --> 00:10:38.274
that provider scope in
each of those variants,

00:10:38.274 --> 00:10:39.940
and that just didn't
really scale right.

00:10:39.940 --> 00:10:42.520
So here you have a single
provider in the main manifest,

00:10:42.520 --> 00:10:44.190
and you just inject
the final package

00:10:44.190 --> 00:10:45.315
name for the given variant.

00:10:47.700 --> 00:10:50.740
OK, so another thing that
we worked on variant is,

00:10:50.740 --> 00:10:57.340
variant publishing, which is
really-- so here's the issue.

00:10:57.340 --> 00:10:59.897
The libraries also
have variants,

00:10:59.897 --> 00:11:01.730
and by default, they
have debug and release.

00:11:01.730 --> 00:11:03.480
So of course when
in your application

00:11:03.480 --> 00:11:07.370
you want a build for
debug, you kind of want

00:11:07.370 --> 00:11:10.770
to use the debug version, and
that doesn't work currently

00:11:10.770 --> 00:11:11.802
with Gradle.

00:11:11.802 --> 00:11:13.260
And then when you
introduce flavor,

00:11:13.260 --> 00:11:15.343
there's a lot of work that
needs to happen, there.

00:11:15.343 --> 00:11:17.060
And so we're working on that.

00:11:17.060 --> 00:11:18.736
It's not there yet.

00:11:18.736 --> 00:11:20.360
There's some changes
that we're working

00:11:20.360 --> 00:11:22.651
with the Gradleware company,
the company behind Gradle,

00:11:22.651 --> 00:11:23.577
to make that happen.

00:11:23.577 --> 00:11:25.410
But it's something that
we're very aware of.

00:11:25.410 --> 00:11:27.190
I think it's one of
our top priority bugs

00:11:27.190 --> 00:11:29.470
on our bug tracker,
and it's something

00:11:29.470 --> 00:11:30.810
that we're focusing a lot on.

00:11:30.810 --> 00:11:33.630
So things will happen, there.

00:11:33.630 --> 00:11:34.510
Customization.

00:11:34.510 --> 00:11:37.400
So we did, also, a lot of
work on helping you customize

00:11:37.400 --> 00:11:39.840
the build script as
much as you want.

00:11:39.840 --> 00:11:42.594
So we have a bunch of new
parameters here and there.

00:11:42.594 --> 00:11:45.010
I think the most interesting
one is the BuildConfig, which

00:11:45.010 --> 00:11:46.830
is a class that was
created automatically,

00:11:46.830 --> 00:11:49.100
and that added a
debug version, so now

00:11:49.100 --> 00:11:51.170
we automatically inject
the package name, which

00:11:51.170 --> 00:11:53.650
is especially important when
it changes on each variant.

00:11:53.650 --> 00:11:55.570
We inject the version
name, the version code,

00:11:55.570 --> 00:11:57.630
we inject which by
variant, and which flavor,

00:11:57.630 --> 00:11:59.170
and which build
type you're using.

00:11:59.170 --> 00:12:01.592
And now you can even
inject new versions.

00:12:01.592 --> 00:12:03.050
So it's very
convenient if you just

00:12:03.050 --> 00:12:05.460
want to inject a few flags
that you want to use.

00:12:05.460 --> 00:12:06.960
You can also do
that with resources.

00:12:06.960 --> 00:12:09.590
It's very limited to value-based
resources, so strings,

00:12:09.590 --> 00:12:12.440
integers, dimensions,
and stuff like that.

00:12:12.440 --> 00:12:15.770
And if you want
full customization

00:12:15.770 --> 00:12:19.520
at the variant level, we have
different SourceSets, also

00:12:19.520 --> 00:12:20.120
Per-Variant.

00:12:20.120 --> 00:12:22.490
We used to only have the
debug SourceSet, the flavor

00:12:22.490 --> 00:12:24.710
SourceSet, and now we
have [INAUDIBLE] debug,

00:12:24.710 --> 00:12:27.100
is a SourceSet that you
can use to do customization

00:12:27.100 --> 00:12:28.720
specifically for that Variant.

00:12:28.720 --> 00:12:31.570
So for example, here's an
example of a BuildConfig.

00:12:31.570 --> 00:12:35.140
So here we define two flags,
FEATURE1 and FEATURE2 two,

00:12:35.140 --> 00:12:39.640
that are both false by default,
and then in the paid flavor,

00:12:39.640 --> 00:12:42.542
we override just the
FEATURE1 to be true.

00:12:42.542 --> 00:12:44.250
So that way, if you
have some code that's

00:12:44.250 --> 00:12:46.290
not really variant
aware yet, and you just

00:12:46.290 --> 00:12:48.070
want to put a quick
switch saying, hey,

00:12:48.070 --> 00:12:49.160
if I'm in that
flavor, do something,

00:12:49.160 --> 00:12:50.826
in that other flavor,
do something else,

00:12:50.826 --> 00:12:53.780
you can do it easily here.

00:12:53.780 --> 00:12:56.350
APIs.

00:12:56.350 --> 00:13:01.227
So we did a lot of
changes in the APIs.

00:13:01.227 --> 00:13:02.810
One thing that you
need to be aware of

00:13:02.810 --> 00:13:04.351
is that, as a
developer, you're going

00:13:04.351 --> 00:13:09.140
to define your build
types and your flavor.

00:13:09.140 --> 00:13:12.280
You're never saying, I want
a particular variant, right?

00:13:12.280 --> 00:13:14.532
You only say,
here's my big types,

00:13:14.532 --> 00:13:16.740
here's a dimension of flavor,
and the value you need,

00:13:16.740 --> 00:13:18.917
here's my other
dimension of flavor,

00:13:18.917 --> 00:13:20.250
and here's the version you need.

00:13:20.250 --> 00:13:22.562
And from that, we do all
the combinations ourselves.

00:13:22.562 --> 00:13:24.770
And I mentioned earlier, we
have that variant feature

00:13:24.770 --> 00:13:28.030
to at least be able to
exclude some variants.

00:13:28.030 --> 00:13:31.320
So to be able to actually
do work on a variant,

00:13:31.320 --> 00:13:34.910
we have an API that, once we
create all those combinations,

00:13:34.910 --> 00:13:38.772
you can go and query, go
and look for variants.

00:13:38.772 --> 00:13:40.730
Actually, right now, you
can only loop on them.

00:13:40.730 --> 00:13:43.090
We do want to have
a better query

00:13:43.090 --> 00:13:45.670
API to be able to query
for a set of variants

00:13:45.670 --> 00:13:50.480
based on-- for example, give
me the debug variance only.

00:13:50.480 --> 00:13:52.500
But right now, you
can only loop on them.

00:13:52.500 --> 00:13:54.250
And then you can do a
lot of work on them.

00:13:54.250 --> 00:13:55.997
You can access all the tasks.

00:13:55.997 --> 00:13:57.830
So you can create new
tasks for each variant

00:13:57.830 --> 00:14:01.020
and inject yourself in
between existing tasks.

00:14:01.020 --> 00:14:06.180
You can change some parameters
on some of those tasks.

00:14:06.180 --> 00:14:07.770
The BuildConfig
things, all the things

00:14:07.770 --> 00:14:09.186
that you can do
on the build type,

00:14:09.186 --> 00:14:12.200
you can also access the
merged version of all of that

00:14:12.200 --> 00:14:15.380
and do per-variant changes
of all of those parameters.

00:14:15.380 --> 00:14:19.040
So there's a lot of work
that's been done, there.

00:14:19.040 --> 00:14:22.360
And some of those API are
actually used by the plug-ins

00:14:22.360 --> 00:14:26.810
that I mentioned earlier that
go and do those many [INAUDIBLE]

00:14:26.810 --> 00:14:27.310
for you.

00:14:27.310 --> 00:14:29.730
So we are super happy to have
those plug-ins currently exist.

00:14:29.730 --> 00:14:30.980
There isn't that many of them.

00:14:30.980 --> 00:14:33.290
There's maybe
like, two or three,

00:14:33.290 --> 00:14:37.440
but they are already
providing some good features.

00:14:37.440 --> 00:14:39.940
So there's an example, one of
them is an annotation process,

00:14:39.940 --> 00:14:40.648
[? or ?] plug-in.

00:14:40.648 --> 00:14:43.670
You just apply it, and then
you can do annotation process

00:14:43.670 --> 00:14:44.330
on your code.

00:14:44.330 --> 00:14:47.000
One other thing that it does is
that it creates some new code

00:14:47.000 --> 00:14:49.580
for you based on the
annotation processor.

00:14:49.580 --> 00:14:53.630
And so it's creating that
code into a new source folder

00:14:53.630 --> 00:14:57.405
somewhere, and we need to
tell the IDE that there's

00:14:57.405 --> 00:14:59.530
this new source folder that
you need to use, right?

00:14:59.530 --> 00:15:02.760
So we created some APIs to be
able to have that plug-in go

00:15:02.760 --> 00:15:07.020
and tell the model that
Gradle sends to the IDE

00:15:07.020 --> 00:15:08.470
that there's a
new source folder.

00:15:08.470 --> 00:15:11.680
And that way, any plug-in that's
generating some new Java code

00:15:11.680 --> 00:15:14.545
can automatically be
recognized by the IDE.

00:15:14.545 --> 00:15:16.420
And inside the IDE, you
have code completion,

00:15:16.420 --> 00:15:18.200
and it all works, even
with the generated code

00:15:18.200 --> 00:15:19.158
by third-party plug-in.

00:15:22.410 --> 00:15:26.370
OK, so we have support
for Android Wear, now.

00:15:26.370 --> 00:15:30.090
So Android Wear, you probably
saw the keynote yesterday,

00:15:30.090 --> 00:15:32.980
and you have that new micro
app that you can run directly

00:15:32.980 --> 00:15:34.256
on the watch.

00:15:34.256 --> 00:15:35.880
And the way it's
delivered is that it's

00:15:35.880 --> 00:15:38.290
packaged inside the
main application,

00:15:38.290 --> 00:15:40.710
and Gradle will
handle that for you.

00:15:40.710 --> 00:15:42.210
There's a couple
of extra steps that

00:15:42.210 --> 00:15:44.810
need happen like creating
an XML file that contains

00:15:44.810 --> 00:15:47.660
a description of what
this app is, and then

00:15:47.660 --> 00:15:50.300
an entry in the manifest, and
Gradle will take care of that

00:15:50.300 --> 00:15:50.930
all for you.

00:15:50.930 --> 00:15:52.894
All you have to do is that.

00:15:52.894 --> 00:15:54.060
So there's two options here.

00:15:54.060 --> 00:15:56.920
The first one is you just
use the wearApp dependency,

00:15:56.920 --> 00:15:58.670
and you just link
to another project.

00:15:58.670 --> 00:16:00.850
And that works fine
if you use Gradle

00:16:00.850 --> 00:16:03.920
to build the final release
version of your code,

00:16:03.920 --> 00:16:05.690
because it's going
to, basically, code

00:16:05.690 --> 00:16:08.820
into that other project, have
it built, take the output,

00:16:08.820 --> 00:16:09.840
and package it.

00:16:09.840 --> 00:16:11.380
So when you do the
release version,

00:16:11.380 --> 00:16:13.088
Gradle needs to be
able to do the release

00:16:13.088 --> 00:16:15.190
signing of your app.

00:16:15.190 --> 00:16:18.480
If you don't do that,
then the second mode

00:16:18.480 --> 00:16:20.020
is something you can use.

00:16:20.020 --> 00:16:21.770
Which you directly
point to an APK.

00:16:21.770 --> 00:16:24.130
Here, you would basically,
on your CI server,

00:16:24.130 --> 00:16:25.950
ensure Gradle to
build your microapp,

00:16:25.950 --> 00:16:27.940
do your custom signing,
and then create

00:16:27.940 --> 00:16:30.950
a new job that inject the
output of the first job

00:16:30.950 --> 00:16:32.310
into the second job.

00:16:32.310 --> 00:16:33.700
I mean, here, I
put a basic path,

00:16:33.700 --> 00:16:35.610
but you could inject
that through a property,

00:16:35.610 --> 00:16:38.900
through an environment variable,
or something like that.

00:16:38.900 --> 00:16:40.800
This is mostly done for release.

00:16:40.800 --> 00:16:44.020
For debug, by default, it
doesn't package the app,

00:16:44.020 --> 00:16:48.240
and that's because the
workflow for debugging

00:16:48.240 --> 00:16:50.916
is more-- you deploy directly
to the app from Studio,

00:16:50.916 --> 00:16:52.790
you deploy directly to
the phone from Studio,

00:16:52.790 --> 00:16:55.830
and that works directly.

00:16:55.830 --> 00:16:56.880
So IDE integration.

00:16:56.880 --> 00:17:00.677
So I mentioned that earlier.

00:17:00.677 --> 00:17:02.010
We have an updated model, right?

00:17:02.010 --> 00:17:03.385
We did a lot of
work to make sure

00:17:03.385 --> 00:17:05.619
that the model sync works a lot.

00:17:05.619 --> 00:17:07.740
And we're going to
keep working on that.

00:17:07.740 --> 00:17:09.530
We have improved
sync, so sync is

00:17:09.530 --> 00:17:12.680
when we send the model
from Gradle to the IDE.

00:17:12.680 --> 00:17:14.359
And we have done
a lot of work also

00:17:14.359 --> 00:17:17.943
on improving the
overhead of the build.

00:17:17.943 --> 00:17:19.859
There's still a lot of
work to be done, there,

00:17:19.859 --> 00:17:22.089
but we did a lot
of improvements,

00:17:22.089 --> 00:17:23.470
so you should try it.

00:17:23.470 --> 00:17:25.560
And also, we know that
there's a huge learning

00:17:25.560 --> 00:17:27.490
curve about Gradle, right?

00:17:27.490 --> 00:17:29.740
And so we are doing some
work inside the IDE.

00:17:29.740 --> 00:17:32.610
We have a project structure
UI, we have editor support,

00:17:32.610 --> 00:17:34.276
and we have a lot of
link checks to help

00:17:34.276 --> 00:17:36.980
you deal with
creating Gradle stuff.

00:17:36.980 --> 00:17:37.950
So performance.

00:17:37.950 --> 00:17:39.530
We know it's very critical.

00:17:39.530 --> 00:17:42.110
We are looking a lot at build
versus incremental, right?

00:17:42.110 --> 00:17:44.050
Incremental is the
part that, really,

00:17:44.050 --> 00:17:46.440
we worry about from when
it's inside the IDE,

00:17:46.440 --> 00:17:48.870
and we did a lot
of investigation,

00:17:48.870 --> 00:17:51.195
so we kind of know exactly
what the bottlenecks are.

00:17:51.195 --> 00:17:53.570
And those bottlenecks are--
there's really three of them.

00:17:53.570 --> 00:17:55.070
The first one is
project evaluation,

00:17:55.070 --> 00:17:57.890
which is really a problem when
you have a lot of modules.

00:17:57.890 --> 00:17:59.565
So we see people with
like, 200 modules,

00:17:59.565 --> 00:18:01.720
and it takes a lot for
Gradle to really load

00:18:01.720 --> 00:18:04.750
all of those projects and
start knowing what to do.

00:18:04.750 --> 00:18:07.090
And we're working, again,
with Gradleware to-- they're

00:18:07.090 --> 00:18:08.510
working a lot of work, there.

00:18:08.510 --> 00:18:11.740
So we know exactly
what's going to happen.

00:18:11.740 --> 00:18:12.990
Incremental supporting tasks.

00:18:12.990 --> 00:18:14.739
It's making our tasks
be more incremental.

00:18:14.739 --> 00:18:16.040
So APT's not incremental.

00:18:16.040 --> 00:18:17.650
Dex is not really incremental.

00:18:17.650 --> 00:18:19.130
So we're working
on that as well.

00:18:19.130 --> 00:18:22.480
It will come in the
next few months.

00:18:22.480 --> 00:18:24.120
And then finally,
task parallelization.

00:18:24.120 --> 00:18:26.446
It's mostly important
for CI server

00:18:26.446 --> 00:18:27.820
when you build a
lot of variants.

00:18:27.820 --> 00:18:30.111
From inside the IDE, you
build only one variant anyway,

00:18:30.111 --> 00:18:32.360
so it doesn't really
matter too much.

00:18:32.360 --> 00:18:35.530
OK, and then finally,
the road to 1.0.

00:18:35.530 --> 00:18:37.810
So we just announced
beta today, saying,

00:18:37.810 --> 00:18:40.472
this is going to be a lot
more stable from now on.

00:18:40.472 --> 00:18:42.930
We're not saying there's not
going to be any small breaking

00:18:42.930 --> 00:18:45.346
changes, but we are going to
be a lot more careful, right?

00:18:45.346 --> 00:18:48.490
The bar has been raised for
changes to not break you guys.

00:18:48.490 --> 00:18:53.210
But in time to get
to 1.0, we need

00:18:53.210 --> 00:18:55.890
to finalize that IDE model,
that exchange between Gradle

00:18:55.890 --> 00:18:57.860
and Studio, so that
you can upgrade one

00:18:57.860 --> 00:19:00.060
without having to
upgrade the other one.

00:19:00.060 --> 00:19:02.641
And DSL is the format
of build.gradle.

00:19:02.641 --> 00:19:05.140
We don't want to have you to
rewrite your whole build.gradle

00:19:05.140 --> 00:19:06.860
every time there's an update.

00:19:06.860 --> 00:19:08.830
And then finally those
two other features,

00:19:08.830 --> 00:19:11.330
variant aware dependency, that's
the whole debug [INAUDIBLE]

00:19:11.330 --> 00:19:14.220
release for libraries
and the compatibility

00:19:14.220 --> 00:19:16.050
with the other Gradle
plug-in is something

00:19:16.050 --> 00:19:16.960
that we need to look at.

00:19:16.960 --> 00:19:19.075
It's going to have some impact
on the internal infrastructure

00:19:19.075 --> 00:19:20.741
of the plug-in, and
we want to make sure

00:19:20.741 --> 00:19:24.220
that those destablizing
features happen sooner rather

00:19:24.220 --> 00:19:25.545
than after 1.0.

00:19:25.545 --> 00:19:27.980
OK, and with that,
I will turn to Tor

00:19:27.980 --> 00:19:30.516
who will give you
a tour of Studio.

00:19:30.516 --> 00:19:32.708
TOR NORBYE: All right,
good morning, everyone.

00:19:32.708 --> 00:19:34.166
On the tools team,
we like to think

00:19:34.166 --> 00:19:36.880
of this as [INAUDIBLE]
sticky note.

00:19:36.880 --> 00:19:39.170
So if you're coming
from Eclipse,

00:19:39.170 --> 00:19:43.040
the first thing you'll want
to do is import your project.

00:19:43.040 --> 00:19:45.640
So you just invoke
import project,

00:19:45.640 --> 00:19:48.060
you point to your main
application project,

00:19:48.060 --> 00:19:50.050
and then you tell us
where you want to put it.

00:19:50.050 --> 00:19:53.160
And the reason for that
is that this is not

00:19:53.160 --> 00:19:55.820
so much an import
as a migration.

00:19:55.820 --> 00:19:59.900
So in Eclipse, we didn't have
libraries with resources,

00:19:59.900 --> 00:20:01.700
so you had to do
this, you had to,

00:20:01.700 --> 00:20:04.585
for example, drop in
all of ActionBarSherlock

00:20:04.585 --> 00:20:06.210
with the source code
and the resources,

00:20:06.210 --> 00:20:07.834
because that's just
what you had to do.

00:20:07.834 --> 00:20:09.920
So in our import, we try
to reverse that process.

00:20:09.920 --> 00:20:12.524
So when import is done,
you get this summary

00:20:12.524 --> 00:20:13.940
where we tell you
what we've done.

00:20:13.940 --> 00:20:15.610
So you can see
that, for example,

00:20:15.610 --> 00:20:18.105
it founded a .jar file that
it recognized as a dependency,

00:20:18.105 --> 00:20:19.980
so it just puts it in
the dependency instead,

00:20:19.980 --> 00:20:22.290
and that means that you no
longer have just a .jar file

00:20:22.290 --> 00:20:24.030
sitting in your file that
you have to worry about.

00:20:24.030 --> 00:20:25.560
Gradle can check
this out whenever

00:20:25.560 --> 00:20:27.630
anyone builds your project.

00:20:27.630 --> 00:20:29.739
Likewise, it recognized
a source library project

00:20:29.739 --> 00:20:32.030
with all the sources and
resources and it got rid of it

00:20:32.030 --> 00:20:35.330
and just replaced it with
a simple resource, again.

00:20:35.330 --> 00:20:36.830
And last but not
least, it tells you

00:20:36.830 --> 00:20:39.019
how it remapped
the source files.

00:20:39.019 --> 00:20:41.060
So you can see here that
it's moved, for example,

00:20:41.060 --> 00:20:42.890
the resources and
the source folder

00:20:42.890 --> 00:20:44.840
into this main directory.

00:20:44.840 --> 00:20:48.580
So the new Gradle build system
has a much deeper directory

00:20:48.580 --> 00:20:51.820
structure, and there's
actually a good reason for it.

00:20:51.820 --> 00:20:54.610
So let me switch to a slightly
more complicated project.

00:20:54.610 --> 00:20:57.560
So I'm going to invoke the
project structure dialog,

00:20:57.560 --> 00:21:01.374
and here you can see I
have several flavors.

00:21:01.374 --> 00:21:03.040
I have a free version
and a pro version,

00:21:03.040 --> 00:21:04.810
and I have different
application IDs

00:21:04.810 --> 00:21:07.470
so they can both coexist
in the Play store.

00:21:07.470 --> 00:21:09.310
I have different
build types, and those

00:21:09.310 --> 00:21:11.226
can also have different
applications suffixes,

00:21:11.226 --> 00:21:14.210
so I can have them both on the
same device at the same time,

00:21:14.210 --> 00:21:15.360
and dependencies.

00:21:15.360 --> 00:21:17.320
So the whole point,
though, is that since I

00:21:17.320 --> 00:21:18.970
have these different
SourceSets, I

00:21:18.970 --> 00:21:21.710
can actually do per
SourceSet overrides.

00:21:21.710 --> 00:21:24.140
So for example, I can
have a debug manifest

00:21:24.140 --> 00:21:27.530
that gets merged in, so I
can ask for a mock location

00:21:27.530 --> 00:21:30.400
only from my debug builds,
or in my beta build,

00:21:30.400 --> 00:21:32.800
I can change a string,
for example, to say,

00:21:32.800 --> 00:21:35.610
this is the beta
version of the app.

00:21:35.610 --> 00:21:39.070
So that's why we have this
new directory structure,

00:21:39.070 --> 00:21:41.570
but we do realize that it's a
bit inconvenient to work with.

00:21:41.570 --> 00:21:43.278
So now I want to show
you a feature we're

00:21:43.278 --> 00:21:46.060
working on that didn't make
it into the first beta build,

00:21:46.060 --> 00:21:49.890
but it's going to help work
with these deeper directory

00:21:49.890 --> 00:21:50.429
structures.

00:21:50.429 --> 00:21:51.970
So it turns out that
you can actually

00:21:51.970 --> 00:21:53.850
choose how you want
to view your project.

00:21:53.850 --> 00:21:56.605
And so we're adding this
new Android specific view.

00:21:56.605 --> 00:21:57.980
And when you invoke
that, you can

00:21:57.980 --> 00:22:00.480
see we're putting all the build
scripts in one place, so you

00:22:00.480 --> 00:22:04.120
can easily find them, all
the manifests in one place,

00:22:04.120 --> 00:22:06.570
all the code in one place,
and my favorite part--

00:22:06.570 --> 00:22:07.546
[APPLAUSE]

00:22:07.546 --> 00:22:08.046
Wait!

00:22:08.046 --> 00:22:10.769
[APPLAUSE]

00:22:10.769 --> 00:22:12.560
Wait, you haven't seen
the next thing, yet,

00:22:12.560 --> 00:22:13.726
because this is what I like.

00:22:13.726 --> 00:22:17.290
So if you had any
nontrivial Android projects,

00:22:17.290 --> 00:22:20.650
you probably had resource
folders that look like this,

00:22:20.650 --> 00:22:21.480
right?

00:22:21.480 --> 00:22:24.030
20 of them, the whole screen,
and you had to look for a file.

00:22:24.030 --> 00:22:26.040
Well, look at the
resource folder, here.

00:22:26.040 --> 00:22:27.110
It's flattened.

00:22:27.110 --> 00:22:28.770
So for example, my
drawable folder,

00:22:28.770 --> 00:22:31.690
I can instantly see that
I have a launcher icon.

00:22:31.690 --> 00:22:33.830
It's shown as a single
file, but if I expand it,

00:22:33.830 --> 00:22:36.038
you can see it actually have
all the different icons.

00:22:36.038 --> 00:22:38.132
[APPLAUSE AND CHEERING]

00:22:40.869 --> 00:22:42.910
So this makes it a lot
easier to find your files.

00:22:42.910 --> 00:22:44.720
Similarly, in the
values folder, there's

00:22:44.720 --> 00:22:46.240
just one value folder in here.

00:22:46.240 --> 00:22:48.920
I can see, well, all right,
I have nine different string

00:22:48.920 --> 00:22:51.440
files, I have two different
style files per version,

00:22:51.440 --> 00:22:53.440
and I have a couple of
different dimension files

00:22:53.440 --> 00:22:56.855
based on-- Anyway, look for this
in one of the next few canary

00:22:56.855 --> 00:22:58.530
builds.

00:22:58.530 --> 00:23:00.625
So that's the import flow.

00:23:00.625 --> 00:23:02.250
Let me show you the
new project wizard.

00:23:05.560 --> 00:23:08.441
So one of the things
we're doing now,

00:23:08.441 --> 00:23:09.940
which is simple,
but kind of useful,

00:23:09.940 --> 00:23:11.700
is we remember your
domain name so you

00:23:11.700 --> 00:23:12.991
don't have to keep entering it.

00:23:12.991 --> 00:23:15.520
So we can sort of carry that
forward for each new project

00:23:15.520 --> 00:23:16.592
that you create.

00:23:16.592 --> 00:23:18.050
And so on the second
panel is where

00:23:18.050 --> 00:23:19.750
you choose your
[? MinSDK ?] version,

00:23:19.750 --> 00:23:22.130
and we've added this
Help Me Choose link.

00:23:22.130 --> 00:23:24.880
So when you invoke that, you
can click on the different API

00:23:24.880 --> 00:23:27.120
levels, and we're showing
you the features that

00:23:27.120 --> 00:23:28.770
came in that API
level, and we're also

00:23:28.770 --> 00:23:31.890
showing a recent distribution
percentage for that version.

00:23:31.890 --> 00:23:33.970
So you can help
decide your trade off

00:23:33.970 --> 00:23:37.520
between features
and distribution.

00:23:37.520 --> 00:23:40.300
So you can see, also, on
this panel that we now

00:23:40.300 --> 00:23:42.000
have support for the
new form factors.

00:23:42.000 --> 00:23:43.830
So I can add in TV.

00:23:43.830 --> 00:23:46.030
I can add in Wear and Glass.

00:23:46.030 --> 00:23:48.150
And as I walk
through the wizard,

00:23:48.150 --> 00:23:50.840
I get to choose an
activity template

00:23:50.840 --> 00:23:52.750
for each one of
those form factors.

00:23:52.750 --> 00:23:55.514
So here is my TV activity.

00:23:55.514 --> 00:23:57.930
We have a sample that we're
going to show you a little bit

00:23:57.930 --> 00:23:59.450
later on.

00:23:59.450 --> 00:24:01.690
Here's my Wear
activity, and there's

00:24:01.690 --> 00:24:03.064
a couple of Glass activities.

00:24:03.064 --> 00:24:04.480
So let me show you
the design time

00:24:04.480 --> 00:24:06.740
experience when
you deal with Wear.

00:24:06.740 --> 00:24:11.950
So here is a layout that
has been designed for Wear.

00:24:11.950 --> 00:24:15.360
And you can see, they're showing
it with a square form factor.

00:24:15.360 --> 00:24:17.580
Later this summer, you
may want to also try

00:24:17.580 --> 00:24:20.370
to switch to the
round form factor.

00:24:20.370 --> 00:24:23.220
So you can sort of see
what the layout looks like.

00:24:23.220 --> 00:24:26.620
Or better yet, you can
show both at the same time.

00:24:26.620 --> 00:24:29.640
So now, when I'm
making an edit, here--

00:24:29.640 --> 00:24:31.640
let's see that I'm adding
a little welcome label

00:24:31.640 --> 00:24:34.270
at the top-- this might
look good in square,

00:24:34.270 --> 00:24:36.800
but look what happened
to round, right?

00:24:36.800 --> 00:24:37.300
No good.

00:24:37.300 --> 00:24:39.630
So this would need some
more visual tweaks, or maybe

00:24:39.630 --> 00:24:43.440
a per-shape layout.

00:24:43.440 --> 00:24:45.139
So speaking of
visual adjustments,

00:24:45.139 --> 00:24:46.930
Android has had
bi-directional tech support

00:24:46.930 --> 00:24:49.020
for a couple of releases,
now, and so we've

00:24:49.020 --> 00:24:52.350
added support for right
to left text in the tools.

00:24:52.350 --> 00:24:57.120
So let me open up a layout
that I believe is correct.

00:24:59.990 --> 00:25:02.550
This one should working
in right to left locales.

00:25:02.550 --> 00:25:07.100
So let me now
switch to this mode

00:25:07.100 --> 00:25:08.550
where I can see
it simultaneously

00:25:08.550 --> 00:25:10.160
in right to left mode.

00:25:10.160 --> 00:25:11.782
So when I do that,
I can see my layout

00:25:11.782 --> 00:25:13.990
left to right on the left
and then right to left over

00:25:13.990 --> 00:25:14.850
here on the right.

00:25:14.850 --> 00:25:17.311
And I can instantly see that
while the name and email looks

00:25:17.311 --> 00:25:19.560
like it's OK, there's a
problem with the phone number.

00:25:19.560 --> 00:25:21.350
So I could go and
fix it, but we also

00:25:21.350 --> 00:25:23.270
have this refactoring
that will convert

00:25:23.270 --> 00:25:29.830
your entire project called,
Add RTL Support Where Possible.

00:25:29.830 --> 00:25:32.490
When I do that, it opens
up this refactoring

00:25:32.490 --> 00:25:35.870
that basically goes through
and fixes all the attributes

00:25:35.870 --> 00:25:36.960
in the correct way.

00:25:36.960 --> 00:25:38.630
So let's just do
that, and you can

00:25:38.630 --> 00:25:42.226
see that it now updated
my layout just to fix it.

00:25:42.226 --> 00:25:46.274
[APPLAUSE]

00:25:46.274 --> 00:25:47.690
Now, if you're
doing custom views,

00:25:47.690 --> 00:25:49.530
you probably have to do
some work on your own.

00:25:49.530 --> 00:25:51.654
But certainly if you're
using the built in widgets,

00:25:51.654 --> 00:25:52.880
it should just work.

00:25:52.880 --> 00:25:56.210
And by the way, if you're making
edits in the Layout Editor,

00:25:56.210 --> 00:25:58.320
it should do the right
thing to begin with, right?

00:25:58.320 --> 00:25:59.695
So I put a button
in the left, it

00:25:59.695 --> 00:26:02.550
shows up right aligned properly.

00:26:02.550 --> 00:26:08.414
All right, so let me
show you the Action Bar.

00:26:08.414 --> 00:26:10.330
So if you look at the
Action Bar on the right,

00:26:10.330 --> 00:26:13.640
here, up until this
morning, the layout editor

00:26:13.640 --> 00:26:15.730
would only show you the
title of the application.

00:26:15.730 --> 00:26:18.063
We just had some design time
hacks to put that in there,

00:26:18.063 --> 00:26:19.590
because it's very
difficult for us

00:26:19.590 --> 00:26:21.950
to know what the
activity is going to do.

00:26:21.950 --> 00:26:25.490
But when we know the
activity, we can actually,

00:26:25.490 --> 00:26:28.870
as you can see, figure out what
should go in the Action Bar

00:26:28.870 --> 00:26:31.010
and show you those
icons right there.

00:26:31.010 --> 00:26:34.770
In fact, I can even click
on the overflow menu item

00:26:34.770 --> 00:26:39.740
and see the menu, and if I
click on one of the menu items--

00:26:39.740 --> 00:26:41.450
sorry I clicked on
the wrong thing--

00:26:41.450 --> 00:26:43.260
if I click on one
of the menu items,

00:26:43.260 --> 00:26:45.806
it'll navigate to the
corresponding menu file.

00:26:45.806 --> 00:26:47.758
[APPLAUSE]

00:26:51.180 --> 00:26:53.530
So now I can obviously continue
to edit in the menu file

00:26:53.530 --> 00:26:55.780
and see the visual
effects, there.

00:26:55.780 --> 00:26:58.280
And we're hoping to have some
more graphical way of actually

00:26:58.280 --> 00:27:01.680
adding menus soon.

00:27:01.680 --> 00:27:04.970
All right, so let's talk
about the new material design.

00:27:04.970 --> 00:27:07.720
So as you can see, this
is not material design.

00:27:07.720 --> 00:27:08.850
This is Holo.

00:27:08.850 --> 00:27:14.650
And the reason for that is
that this app has a application

00:27:14.650 --> 00:27:16.910
theme and where we've
explicitly asked

00:27:16.910 --> 00:27:18.900
to inherit from theme Holo.

00:27:18.900 --> 00:27:21.764
So let me go ahead
and upgrade it.

00:27:21.764 --> 00:27:23.180
And the way you
do that is to just

00:27:23.180 --> 00:27:24.865
inherit from
Material.Light instead.

00:27:24.865 --> 00:27:26.740
Quick tip, when you're
doing code completion,

00:27:26.740 --> 00:27:28.710
press tab, not
enter, and then it'll

00:27:28.710 --> 00:27:30.450
just replace the whole string.

00:27:30.450 --> 00:27:33.390
So when I do that and I
jump back to my layout,

00:27:33.390 --> 00:27:37.474
you can see it now does the new
L preview rendering correctly.

00:27:37.474 --> 00:27:38.890
Now, if you look
carefully, you'll

00:27:38.890 --> 00:27:40.973
see there was a red
underline, and this is saying,

00:27:40.973 --> 00:27:44.660
this is not safe, because using
this theme requires API 21,

00:27:44.660 --> 00:27:46.860
and you're trying
to support API 9.

00:27:46.860 --> 00:27:50.576
So we now have a quick fix for
this, which basically says,

00:27:50.576 --> 00:27:52.450
when lint says that
there's an API violation,

00:27:52.450 --> 00:27:54.440
you can overwrite it
in the right folder.

00:27:54.440 --> 00:27:56.950
So I'm going to invoke
that, and now, you

00:27:56.950 --> 00:28:01.190
can see it's created a
values 21 folder with a file.

00:28:01.190 --> 00:28:06.250
And I'm just going to put
Holo back in the v14 folder,

00:28:06.250 --> 00:28:09.220
and I'm going to put
material in the v21 folder.

00:28:09.220 --> 00:28:11.435
So now I've arranged for
this to work correctly.

00:28:14.320 --> 00:28:16.750
But how can I be sure, right?

00:28:16.750 --> 00:28:20.120
So now I'm going to show you
a different feature where

00:28:20.120 --> 00:28:22.620
I can actually ask
for it to render

00:28:22.620 --> 00:28:26.090
this layout across
different API versions.

00:28:26.090 --> 00:28:29.670
So when I do that, you can
now see material design--

00:28:29.670 --> 00:28:31.426
[APPLAUSE]

00:28:34.772 --> 00:28:36.609
Right, so you can
see material design,

00:28:36.609 --> 00:28:38.400
and you can see the
new navigation buttons,

00:28:38.400 --> 00:28:40.700
and you can see the Holo buttons
over here, and of course,

00:28:40.700 --> 00:28:42.116
Gingerbread without
the Action Bar

00:28:42.116 --> 00:28:44.160
and without navigation buttons.

00:28:44.160 --> 00:28:46.500
So another cool thing
in material design,

00:28:46.500 --> 00:28:52.110
is that the theme lets
you actually add color.

00:28:52.110 --> 00:28:55.850
So the way that works is
that you go into the theme,

00:28:55.850 --> 00:29:00.080
and you can override a
couple of attributes.

00:29:00.080 --> 00:29:02.016
So I think it's colorPrimary.

00:29:02.016 --> 00:29:05.500
And I've already
predefined a brand color.

00:29:05.500 --> 00:29:07.190
This can be anything.

00:29:07.190 --> 00:29:09.780
There's actually two attributes
I want to set, color accent.

00:29:09.780 --> 00:29:11.196
So when I sat my
own colors, which

00:29:11.196 --> 00:29:15.050
you can see in the gutter, here,
it's a shade of blue, blueish.

00:29:15.050 --> 00:29:16.940
When I go back, you
can see we now get

00:29:16.940 --> 00:29:18.160
our own sort of branding.

00:29:18.160 --> 00:29:20.140
So this new theme
makes it very easy

00:29:20.140 --> 00:29:21.529
to add your own splash of color.

00:29:21.529 --> 00:29:23.570
And it's not just for
text, you can see that even

00:29:23.570 --> 00:29:26.020
the widget here is
using this color.

00:29:26.020 --> 00:29:28.816
And more importantly, you
can even do this for bitmaps.

00:29:28.816 --> 00:29:30.190
And the way that
works is you can

00:29:30.190 --> 00:29:33.212
see we have a XML
drawable, here.

00:29:33.212 --> 00:29:34.420
I've already applied at tint.

00:29:34.420 --> 00:29:37.650
So this is what the image
looks like to begin with,

00:29:37.650 --> 00:29:40.050
and I can apply a tint, which
is the same color resource.

00:29:40.050 --> 00:29:42.070
You can imagine, you can
set a few color resources

00:29:42.070 --> 00:29:43.778
in a few places and
theme the entire app.

00:29:43.778 --> 00:29:45.680
You no longer have to
go and generate bitmaps

00:29:45.680 --> 00:29:46.910
to get your own look.

00:29:46.910 --> 00:29:48.870
[APPLAUSE]

00:29:55.740 --> 00:29:57.802
So since you're going to
be working with themes,

00:29:57.802 --> 00:29:59.510
we've added a new,
really useful, feature

00:29:59.510 --> 00:30:01.390
to the quick documentation.

00:30:01.390 --> 00:30:04.444
So quick reminder, quick
documentation is F1.

00:30:04.444 --> 00:30:05.860
You know, when
you're in code, you

00:30:05.860 --> 00:30:08.300
can just press it on a method
call to see what it does.

00:30:08.300 --> 00:30:09.715
If you're in a
resource file, you

00:30:09.715 --> 00:30:11.170
can press F1 to
see, for example,

00:30:11.170 --> 00:30:12.880
all the translations
of a string.

00:30:12.880 --> 00:30:15.520
Well, themes are
particularly useful.

00:30:15.520 --> 00:30:18.916
So quick reminder, when you
have a resource URL that

00:30:18.916 --> 00:30:20.540
starts with an at,
that's a normal sort

00:30:20.540 --> 00:30:21.340
of resource reference.

00:30:21.340 --> 00:30:23.630
When it starts with a question
mark, that's a theme look up.

00:30:23.630 --> 00:30:25.650
It looks up the resource
in the current theme.

00:30:25.650 --> 00:30:28.920
And look what happens when
I press F1 on this one.

00:30:28.920 --> 00:30:31.770
Let me make this larger.

00:30:31.770 --> 00:30:35.260
So here, it's telling me what
this resolves to, the style.

00:30:35.260 --> 00:30:37.800
It's walking up the
style inheritance,

00:30:37.800 --> 00:30:39.890
show me which styles
I'm picking up

00:30:39.890 --> 00:30:41.366
for which attributes
at each level,

00:30:41.366 --> 00:30:42.490
and resolving all of those.

00:30:42.490 --> 00:30:45.390
I can quickly see what
text appearance medium

00:30:45.390 --> 00:30:47.990
will look like in
the Holo theme.

00:30:47.990 --> 00:30:50.237
So this basically makes
it a lot easier, I think,

00:30:50.237 --> 00:30:51.070
to work with themes.

00:30:51.070 --> 00:30:53.240
It's a bit like a DOM
inspector in web design tools.

00:30:59.470 --> 00:31:01.970
All right, let's
look at some code.

00:31:01.970 --> 00:31:04.370
So Studio is built
on top of IntelliJ,

00:31:04.370 --> 00:31:07.220
and IntelliJ already has
hundreds of code inspections.

00:31:07.220 --> 00:31:12.464
So it flags erroneous code
in your various files.

00:31:12.464 --> 00:31:15.130
As you can see here, it's saying
there's a possible null pointer

00:31:15.130 --> 00:31:18.060
problem, here, there's some
unused code, and so forth.

00:31:18.060 --> 00:31:21.460
And on top of that, we've added
some Android-specific checks.

00:31:21.460 --> 00:31:23.879
So here, for example, this
is an integer parameter,

00:31:23.879 --> 00:31:25.670
but it's expecting an
integer resource that

00:31:25.670 --> 00:31:27.211
represents a layout
and we're passing

00:31:27.211 --> 00:31:28.880
string, which is clearly wrong.

00:31:31.490 --> 00:31:33.860
So when I fix that, it's happy.

00:31:33.860 --> 00:31:36.010
So we're making sure that
you call in the framework

00:31:36.010 --> 00:31:38.070
correctly.

00:31:38.070 --> 00:31:40.540
And that's all well and
good, but wouldn't it

00:31:40.540 --> 00:31:43.460
be nice if you could
check your own code?

00:31:43.460 --> 00:31:45.430
So now you can.

00:31:45.430 --> 00:31:47.310
Here's a method that
I've added where

00:31:47.310 --> 00:31:50.630
I'm taking a couple of integers,
one representing an ID,

00:31:50.630 --> 00:31:56.840
and one representing a drawable,
and let's add some annotations

00:31:56.840 --> 00:31:57.340
on this.

00:31:57.340 --> 00:31:59.460
So I'm going to say
that I'm expecting

00:31:59.460 --> 00:32:03.275
this integer represents an
ID, I'm expecting this one

00:32:03.275 --> 00:32:06.124
to represent a drawable,
and now you can see,

00:32:06.124 --> 00:32:07.790
it's flagging problems
in the code where

00:32:07.790 --> 00:32:11.007
it looks like I've
flipped the parameters.

00:32:11.007 --> 00:32:12.090
So the compiler was happy.

00:32:12.090 --> 00:32:13.930
[APPLAUSE]

00:32:17.150 --> 00:32:20.530
So we basically have
added some type checking

00:32:20.530 --> 00:32:23.460
to the resource system.

00:32:23.460 --> 00:32:25.085
And if you, basically,
build a library,

00:32:25.085 --> 00:32:26.850
it also will export
this metadata

00:32:26.850 --> 00:32:28.560
so that anyone
using your library

00:32:28.560 --> 00:32:31.440
will also get the same
types of warnings.

00:32:31.440 --> 00:32:34.290
So that's inspections.

00:32:34.290 --> 00:32:36.390
They basically, you can
see, show up in your code

00:32:36.390 --> 00:32:40.490
as highlights both on the
right as well as in the code.

00:32:40.490 --> 00:32:43.190
IntelliJ also has something
called intentions,

00:32:43.190 --> 00:32:44.530
and they're invisible, right?

00:32:44.530 --> 00:32:47.440
So the trick to know is
that in certain places

00:32:47.440 --> 00:32:49.255
you can press ALT,
Enter, and it'll

00:32:49.255 --> 00:32:50.380
offer to do certain things.

00:32:50.380 --> 00:32:51.796
For example, here
I have a string,

00:32:51.796 --> 00:32:55.240
and it'll offer to extract
this as a string resource.

00:32:55.240 --> 00:32:58.070
Likewise, here I have
this if statement.

00:32:58.070 --> 00:33:00.370
Inside the if where there's
a cast, I can invoke it,

00:33:00.370 --> 00:33:01.786
and it'll say,
hey, do you want me

00:33:01.786 --> 00:33:04.380
to insert a declaration
with a cast here?

00:33:04.380 --> 00:33:09.100
Or I have some nested ifs, and
I can merge those into a single,

00:33:09.100 --> 00:33:10.495
or maybe I can split them apart.

00:33:13.190 --> 00:33:15.150
You'll only discover
this by either

00:33:15.150 --> 00:33:18.490
trying ALT, Enter everywhere,
or you can open the options

00:33:18.490 --> 00:33:22.180
and there's actually an
intentions list, here.

00:33:22.180 --> 00:33:24.630
I would like to encourage
you all to read through it

00:33:24.630 --> 00:33:26.150
and click on each one,
it'll tell you what to do,

00:33:26.150 --> 00:33:27.950
because you'll become a much
more productive programmer

00:33:27.950 --> 00:33:28.930
with this editor.

00:33:28.930 --> 00:33:30.870
You'll find that you never
have to sit and create methods.

00:33:30.870 --> 00:33:32.860
You just write the method
call, press the right keys,

00:33:32.860 --> 00:33:34.901
and all the sudden, you
have the method inserted.

00:33:34.901 --> 00:33:39.287
So this is a really,
really powerful IDE

00:33:39.287 --> 00:33:41.120
that we're building on
top of, and so you're

00:33:41.120 --> 00:33:43.270
going to be much more
productive if you really

00:33:43.270 --> 00:33:45.674
have to learn all
the ins outs of it.

00:33:45.674 --> 00:33:47.090
So with that, I'm
going to turn it

00:33:47.090 --> 00:33:49.863
back to Jamal who's going to
tell us about our future plans.

00:33:49.863 --> 00:33:50.920
[APPLAUSE]

00:33:56.719 --> 00:33:58.510
JAMAL EASON: So great
tour, that was great,

00:33:58.510 --> 00:34:00.252
a lot of cool features.

00:34:00.252 --> 00:34:01.960
So the keynote yesterday,
we talked about

00:34:01.960 --> 00:34:04.491
and introduced the
L developer preview.

00:34:04.491 --> 00:34:06.990
With the preview we're giving
you a set of a few extra tools

00:34:06.990 --> 00:34:11.092
including a few tools that make
you more efficient making apps.

00:34:11.092 --> 00:34:12.550
On the developer
tools website, you

00:34:12.550 --> 00:34:17.710
can now download system images
for the Nexus 5 and Nexus 7.

00:34:17.710 --> 00:34:19.630
Also, we've enabled
the Android emulator

00:34:19.630 --> 00:34:23.529
to support Android TV and
the Nexus device simulation.

00:34:23.529 --> 00:34:25.070
Let's switch over
to the second demo.

00:34:28.909 --> 00:34:32.630
So in the emulator, now you can
switch between the new Leanback

00:34:32.630 --> 00:34:36.949
experience, and as you're
developing your Android TV

00:34:36.949 --> 00:34:41.900
apps, you can also try out the
new Leanback discovery view

00:34:41.900 --> 00:34:44.139
as well.

00:34:44.139 --> 00:34:47.530
So switching over to
the Nexus 5 emulator,

00:34:47.530 --> 00:34:49.322
we also talked about
the new notifications.

00:34:49.322 --> 00:34:50.821
And so in the
emulator, you can also

00:34:50.821 --> 00:34:52.290
try out the new notifications.

00:34:52.290 --> 00:34:54.440
You can swipe that away.

00:34:54.440 --> 00:34:58.260
We've also included, inside the
emulator, the new [INAUDIBLE]

00:34:58.260 --> 00:34:59.460
application.

00:34:59.460 --> 00:35:03.000
And here you can see
the new material design,

00:35:03.000 --> 00:35:05.600
the new ripple effects as well.

00:35:05.600 --> 00:35:08.162
And lastly, we also
included a new demonstration

00:35:08.162 --> 00:35:08.745
of the dialer.

00:35:14.299 --> 00:35:17.180
It's on the screen?

00:35:17.180 --> 00:35:18.419
TOR NORBYE: Bottom right.

00:35:18.419 --> 00:35:19.460
JAMAL EASON: Where is it?

00:35:19.460 --> 00:35:23.455
TOR NORBYE: Bottom right

00:35:23.455 --> 00:35:25.830
JAMAL EASON: And again, you
can see the new ripple effect

00:35:25.830 --> 00:35:28.800
on the different tabs and
columns as you move around.

00:35:28.800 --> 00:35:31.669
And again, if you don't
have a Nexus 5, Nexus 7,

00:35:31.669 --> 00:35:32.710
you can try the emulator.

00:35:32.710 --> 00:35:35.300
Also you can download the
images from the website as well.

00:35:35.300 --> 00:35:37.050
So great, let's switch
back to the slides.

00:35:41.220 --> 00:35:44.230
So as you can see, you can try
out your new app and new design

00:35:44.230 --> 00:35:46.460
language on the
Nexus 5 or Nexus 7,

00:35:46.460 --> 00:35:49.200
or you can try it out
on emulator for the TV,

00:35:49.200 --> 00:35:53.000
and for the Nexus 5.

00:35:53.000 --> 00:35:54.947
So what's next?

00:35:54.947 --> 00:35:56.780
So hopefully you enjoyed
what we showed you.

00:35:56.780 --> 00:35:58.310
We showed you a
lot of great tools

00:35:58.310 --> 00:36:01.610
and tricks from the
L developer preview.

00:36:01.610 --> 00:36:03.572
You can also still
download Eclipse ADT,

00:36:03.572 --> 00:36:05.030
but as you can
tell, we're spending

00:36:05.030 --> 00:36:08.650
most of our development
effort on Android Studio.

00:36:08.650 --> 00:36:11.020
On Android Studio, we showed
you a lot of new features

00:36:11.020 --> 00:36:13.320
to make all your great apps
for these new form factors,

00:36:13.320 --> 00:36:14.840
but we actually didn't show
you all the great things.

00:36:14.840 --> 00:36:16.756
There's still more stuff
that you can actually

00:36:16.756 --> 00:36:17.760
try out yourself.

00:36:17.760 --> 00:36:21.330
So as far as next steps, we
talked about a number things

00:36:21.330 --> 00:36:23.190
about the build system.

00:36:23.190 --> 00:36:26.790
The goal is to focus on
stability and performance.

00:36:26.790 --> 00:36:28.554
From the build back
end to the IDE,

00:36:28.554 --> 00:36:30.470
we're looking at making
the entire development

00:36:30.470 --> 00:36:33.030
experience faster
and more efficient.

00:36:33.030 --> 00:36:35.980
You can check out the details
of our work in progress

00:36:35.980 --> 00:36:39.770
on our road map on the
tools.android.com website.

00:36:39.770 --> 00:36:42.340
As you try out Android Studio
beta and the L developer

00:36:42.340 --> 00:36:44.640
preview, we welcome your
feedback, and please let us

00:36:44.640 --> 00:36:46.770
know how it is.

00:36:46.770 --> 00:36:47.800
And that's it.

00:36:47.800 --> 00:36:50.570
For Q&amp;A, please visit
us at the Android booth

00:36:50.570 --> 00:36:51.990
on the second level at 10:00.

00:36:51.990 --> 00:36:53.240
TOR NORBYE: We actually
have a few minutes.

00:36:53.240 --> 00:36:55.060
JAMAL EASON: We have a
few minutes, I guess.

00:36:55.060 --> 00:36:56.500
TOR NORBYE: If anyone have any
questions, come to the front.

00:36:56.500 --> 00:36:57.600
[APPLAUSE]

00:37:01.845 --> 00:37:05.550
JAMAL EASON: And then lastly,
leave feedback on the QR code

00:37:05.550 --> 00:37:07.850
or with the I/O app, and
thanks again for joining us.

00:37:07.850 --> 00:37:10.010
And we enjoy you
coming this morning.

00:37:10.010 --> 00:37:15.126
So Q &amp; A.

00:37:15.126 --> 00:37:16.750
AUDIENCE: Hi, my
name's Connor, and I'm

00:37:16.750 --> 00:37:18.130
at University of Washington.

00:37:18.130 --> 00:37:21.140
And my group focuses
on accessibility,

00:37:21.140 --> 00:37:23.460
and there's not that
many tools to develop

00:37:23.460 --> 00:37:26.977
accessible smartphone
applications.

00:37:26.977 --> 00:37:28.560
Are you working in
that sphere at all,

00:37:28.560 --> 00:37:33.267
making more support in
the developer tools?

00:37:33.267 --> 00:37:34.850
TOR NORBYE: Well,
we have some things.

00:37:34.850 --> 00:37:37.225
So lint goes and
looks at your code

00:37:37.225 --> 00:37:39.100
to make sure that you're
not making mistakes.

00:37:39.100 --> 00:37:41.500
If it finds an image without
a content description,

00:37:41.500 --> 00:37:42.450
it'll complain.

00:37:42.450 --> 00:37:44.600
There's, I know, a lot of
support in the framework,

00:37:44.600 --> 00:37:46.380
as well.

00:37:46.380 --> 00:37:48.970
Beyond that, I'm not sure
if we have anything planned.

00:37:48.970 --> 00:37:50.315
XAVIER DUCROHET: We should
definitely do something,

00:37:50.315 --> 00:37:52.117
but I don't think we
have a lot, right now,

00:37:52.117 --> 00:37:53.200
besides those lint checks.

00:37:53.200 --> 00:37:53.741
AUDIENCE: OK.

00:37:56.444 --> 00:37:57.610
AUDIENCE: I have two things.

00:37:57.610 --> 00:38:00.390
One is, are you planning on
supporting multiple testing

00:38:00.390 --> 00:38:01.210
profiles?

00:38:01.210 --> 00:38:03.540
We use Roboelectric, and
you have to kind of override

00:38:03.540 --> 00:38:06.160
the main one, but we also
do integration testing.

00:38:06.160 --> 00:38:08.590
And secondly, are
you going to support

00:38:08.590 --> 00:38:10.520
testing outside of
an emulator or device

00:38:10.520 --> 00:38:13.760
so you can run it
headless on a server?

00:38:13.760 --> 00:38:16.260
XAVIER DUCROHET: I couldn't
quite hear all the details.

00:38:16.260 --> 00:38:17.810
I heard Roboelectric.

00:38:17.810 --> 00:38:19.570
AUDIENCE: OK, so
basically, are you

00:38:19.570 --> 00:38:22.620
going to be able to support
multiple testing profiles so

00:38:22.620 --> 00:38:26.230
that you could run both maybe
an integration test and a unit

00:38:26.230 --> 00:38:27.530
test and have them separate.

00:38:27.530 --> 00:38:29.113
XAVIER DUCROHET:
Yes, do want to allow

00:38:29.113 --> 00:38:31.090
you to have-- so there's
two different things.

00:38:31.090 --> 00:38:34.280
There's we definitely want
to help you with unit tests.

00:38:34.280 --> 00:38:39.630
It's kind of like
difficult to-- we

00:38:39.630 --> 00:38:41.220
want to improve the
current situation,

00:38:41.220 --> 00:38:43.237
because we understand
that Roboelectric is not

00:38:43.237 --> 00:38:44.070
a perfect situation.

00:38:44.070 --> 00:38:45.879
AUDIENCE: No it's not.

00:38:45.879 --> 00:38:47.420
XAVIER DUCROHET:
It's very difficult.

00:38:47.420 --> 00:38:50.660
I was answering that question
in the fireside chat, yesterday.

00:38:50.660 --> 00:38:54.130
There is pure unit
test, if you're

00:38:54.130 --> 00:38:55.725
going to use any of
the Android APIs,

00:38:55.725 --> 00:38:57.100
or if you link
against them, it's

00:38:57.100 --> 00:38:59.836
very difficult to run on a VM.

00:38:59.836 --> 00:39:01.210
There are some
things that we can

00:39:01.210 --> 00:39:03.690
do that we're
going to try to do.

00:39:03.690 --> 00:39:06.860
We also want to improve a
lot, like the deployment time,

00:39:06.860 --> 00:39:08.730
because where it runs
doesn't really matter.

00:39:08.730 --> 00:39:10.480
What you want is quick
turn around, right?

00:39:10.480 --> 00:39:12.746
You want to be able to fix
your test, do a change,

00:39:12.746 --> 00:39:14.620
run the test right away,
and get the results.

00:39:14.620 --> 00:39:14.960
AUDIENCE: Right.

00:39:14.960 --> 00:39:16.490
XAVIER DUCROHET: If we
can get that on a device,

00:39:16.490 --> 00:39:17.470
then it should be good enough.

00:39:17.470 --> 00:39:18.760
AUDIENCE: Well it can
also run headless,

00:39:18.760 --> 00:39:19.310
because we've run it--

00:39:19.310 --> 00:39:21.690
XAVIER DUCROHET: Right, so
we do also need to have--

00:39:21.690 --> 00:39:23.040
so that's the other
part of it, right?

00:39:23.040 --> 00:39:25.040
We also need to make sure
that on the CI server,

00:39:25.040 --> 00:39:27.450
you can run emulators there,
start them just for that.

00:39:27.450 --> 00:39:30.510
And we have plans
for CI features.

00:39:30.510 --> 00:39:34.007
We just don't have them yet, but
it's our plan to do that, yeah.

00:39:38.120 --> 00:39:40.370
AUDIENCE: Hi, my question
is about training resources.

00:39:40.370 --> 00:39:41.828
I work at a community
college where

00:39:41.828 --> 00:39:43.150
I teach Android programming.

00:39:43.150 --> 00:39:46.710
And I was wondering if you
could recommend-- you know,

00:39:46.710 --> 00:39:48.520
it's a little bit difficult.

00:39:48.520 --> 00:39:51.680
Things are always changing,
textbooks are out of date.

00:39:51.680 --> 00:39:53.430
If you have any
recommendations for people

00:39:53.430 --> 00:39:56.514
who are new to Android to point
me toward certain resources.

00:39:56.514 --> 00:39:58.930
XAVIER DUCROHET: Yeah, I mean,
we're in a weird situation,

00:39:58.930 --> 00:40:03.070
right now, where we're focusing
on Studio, but it's not 1.0.

00:40:03.070 --> 00:40:04.630
So the current
website doesn't show

00:40:04.630 --> 00:40:07.741
a lot of Studio
documentation, because--

00:40:07.741 --> 00:40:09.240
TOR NORBYE: I just
read that there's

00:40:09.240 --> 00:40:12.309
a new course being offered
that is using studio.

00:40:12.309 --> 00:40:13.850
A bunch at Dev Rel
was working on it.

00:40:13.850 --> 00:40:15.308
AUDIENCE: Is that
a one on Udacity?

00:40:15.308 --> 00:40:16.080
TOR NORBYE: Yes.

00:40:16.080 --> 00:40:16.871
AUDIENCE: Yeah, OK.

00:40:16.871 --> 00:40:19.112
I saw that just went
live I think yesterday.

00:40:19.112 --> 00:40:19.820
JAMAL EASON: Yep.

00:40:19.820 --> 00:40:21.070
XAVIER DUCROHET: But
we also, I think,

00:40:21.070 --> 00:40:22.861
we have some new
documentation about Studio

00:40:22.861 --> 00:40:25.830
going live today or
yesterday with the website.

00:40:25.830 --> 00:40:27.910
And on our way to
1.0, we are definitely

00:40:27.910 --> 00:40:30.470
going to improve the online
documentation too talk

00:40:30.470 --> 00:40:31.865
more about Studio.

00:40:31.865 --> 00:40:33.530
TOR NORBYE: And
if you can let us

00:40:33.530 --> 00:40:34.988
know what you find
is lacking, that

00:40:34.988 --> 00:40:37.090
would also help direct
effort in the right places.

00:40:37.090 --> 00:40:38.430
AUDIENCE: I'd love to get
together with you guys.

00:40:38.430 --> 00:40:40.160
Will you be at the
Android booth and be

00:40:40.160 --> 00:40:41.410
able to talk a
little bit, so we can

00:40:41.410 --> 00:40:42.950
talk about resources
and things like that?

00:40:42.950 --> 00:40:43.130
TOR NORBYE: Yes.

00:40:43.130 --> 00:40:44.380
AUDIENCE: Thank you very much.

00:40:46.630 --> 00:40:50.370
AUDIENCE: Hi, I've got
two short questions.

00:40:50.370 --> 00:40:55.960
One is, do you plan on
adding C++ NDK support to--

00:40:55.960 --> 00:40:56.980
XAVIER DUCROHET: Yes.

00:40:56.980 --> 00:41:00.070
AUDIENCE: And how soon?

00:41:00.070 --> 00:41:02.055
XAVIER DUCROHET: We are
starting to work on it.

00:41:02.055 --> 00:41:05.345
AUDIENCE: OK, will that
include debugging support, C++?

00:41:05.345 --> 00:41:06.220
XAVIER DUCROHET: Yes.

00:41:06.220 --> 00:41:07.820
AUDIENCE: OK, great.

00:41:07.820 --> 00:41:11.550
Second is, the import feature
from Eclipse looks really nice,

00:41:11.550 --> 00:41:17.530
but I'm a little worried about
how the directory restructuring

00:41:17.530 --> 00:41:19.500
is going to affect
our Git history.

00:41:19.500 --> 00:41:21.826
Because we've got a
lot of Git history.

00:41:21.826 --> 00:41:24.200
TOR NORBYE: Git is actually
pretty good about recognizing

00:41:24.200 --> 00:41:26.861
file moves, because it, unlike
other version control systems,

00:41:26.861 --> 00:41:28.860
you don't have to tell
it, I moved this to that.

00:41:28.860 --> 00:41:30.570
It just looks at the file
content and figures out,

00:41:30.570 --> 00:41:32.630
hey, this looks like
it corresponds to that.

00:41:32.630 --> 00:41:35.512
So given that, there's no
other edits that it makes

00:41:35.512 --> 00:41:36.970
to the files, other
than move them,

00:41:36.970 --> 00:41:39.159
I'd be very surprised if
Git didn't do a good job.

00:41:39.159 --> 00:41:40.950
XAVIER DUCROHET: Yeah,
it should just work.

00:41:40.950 --> 00:41:42.910
We're not touching the
files, so it will work.

00:41:42.910 --> 00:41:45.530
AUDIENCE: Great, thanks.

00:41:45.530 --> 00:41:48.990
AUDIENCE: Hi, we have an app,
which is multiple text files,

00:41:48.990 --> 00:41:51.870
and some time back, we
tried to use Gradle,

00:41:51.870 --> 00:41:55.400
but the support for building
an APK with multiple text files

00:41:55.400 --> 00:41:56.920
was pretty limited then.

00:41:56.920 --> 00:42:01.060
Has it changed in
the last few months?

00:42:01.060 --> 00:42:02.480
XAVIER DUCROHET: No.

00:42:02.480 --> 00:42:04.730
AUDIENCE: Are there any plans
to add support for that?

00:42:07.480 --> 00:42:10.000
XAVIER DUCROHET: I think so,
but I don't know the detail,

00:42:10.000 --> 00:42:14.560
really, but we know it's a
problem, and we're aware of it.

00:42:14.560 --> 00:42:17.335
But I don't think we have an ETA
or announcement at this time.

00:42:17.335 --> 00:42:19.950
AUDIENCE: Is there any
recommendations for workaround?

00:42:19.950 --> 00:42:23.169
What can we do?

00:42:23.169 --> 00:42:25.710
XAVIER DUCROHET: Yeah, I'm not
super familiar with that part,

00:42:25.710 --> 00:42:27.620
so I'm not sure.

00:42:27.620 --> 00:42:31.080
But we can talk after if you
want to get into more details.

00:42:31.080 --> 00:42:33.575
AUDIENCE: Thank you.

00:42:33.575 --> 00:42:35.450
AUDIENCE: You mentioned
about the BuildConfig

00:42:35.450 --> 00:42:38.700
in your session, like
FEATURE1 false, FEATURE2

00:42:38.700 --> 00:42:40.120
true [? or ?] something, right?

00:42:40.120 --> 00:42:43.420
So does that work as
CP processor directives

00:42:43.420 --> 00:42:46.320
in the [? CC++, ?] where I can
escape from the compilation

00:42:46.320 --> 00:42:48.627
or is it on the
runtime [INAUDIBLE]?

00:42:48.627 --> 00:42:50.960
XAVIER DUCROHET: Well, so
because it's a Boolean, right?

00:42:50.960 --> 00:42:54.380
It a Boolean flag, Javac will
just remove that code, anyway.

00:42:54.380 --> 00:42:57.916
So in your code, if you have
a feature, then do that,

00:42:57.916 --> 00:43:00.730
and you compile against
a version of BuildConfig

00:43:00.730 --> 00:43:03.020
where that particular
flags is false,

00:43:03.020 --> 00:43:04.979
the code is going to disappear.

00:43:04.979 --> 00:43:06.520
It's not really
preprocessor, but you

00:43:06.520 --> 00:43:09.214
won't have unused code
in your code anyway.

00:43:09.214 --> 00:43:11.380
AUDIENCE: Oh, that will not
be included in my build?

00:43:11.380 --> 00:43:12.570
TOR NORBYE: Because you
make a final, right?

00:43:12.570 --> 00:43:13.986
XAVIER DUCROHET:
Yeah, it's final.

00:43:13.986 --> 00:43:16.750
Because it's just a constant
boolean, like a final boolean,

00:43:16.750 --> 00:43:18.920
so it's just being removed.

00:43:21.810 --> 00:43:23.080
AUDIENCE: Cool, hey, I'm Lisa.

00:43:23.080 --> 00:43:24.520
I'm from Etsy.

00:43:24.520 --> 00:43:25.950
I really like using Gradle.

00:43:25.950 --> 00:43:28.910
It's awesome, so thanks for all
the work you guys have done.

00:43:28.910 --> 00:43:32.020
I do have kind of a
question slash request.

00:43:32.020 --> 00:43:35.310
Gradleware does great job on
documenting all their APIs,

00:43:35.310 --> 00:43:39.066
so figuring out how to use
Gradle Tasks is really easy.

00:43:39.066 --> 00:43:42.060
Do you guys have plans for
similar API documentation

00:43:42.060 --> 00:43:43.500
for the Android plug-in?

00:43:43.500 --> 00:43:46.680
Because right now it's been
really hard to find stuff.

00:43:46.680 --> 00:43:50.380
XAVIER DUCROHET: We definitely--
similar to the previous answer

00:43:50.380 --> 00:43:51.767
about training
and documentation,

00:43:51.767 --> 00:43:53.350
things are changing
a lot, so we don't

00:43:53.350 --> 00:43:56.180
want to spend a lot of time on
the documentation, right now.

00:43:56.180 --> 00:44:01.430
And also, there's-- I've
seen XML plug-in using a lot

00:44:01.430 --> 00:44:02.679
of the internal APIs.

00:44:02.679 --> 00:44:04.470
So we still need to
figure out exactly what

00:44:04.470 --> 00:44:06.340
will be public and non-public.

00:44:06.340 --> 00:44:08.820
But we do want to have--
because that's the goal, right?

00:44:08.820 --> 00:44:10.820
Is to have a really
extensible build system,

00:44:10.820 --> 00:44:12.579
so we need to document
a lot of things.

00:44:12.579 --> 00:44:14.620
We need to have a lot of
reference documentation.

00:44:14.620 --> 00:44:16.190
So long term, yes.

00:44:16.190 --> 00:44:18.110
Probably not before 1.0.

00:44:18.110 --> 00:44:19.703
We want to improve
it, because I think

00:44:19.703 --> 00:44:22.470
the current one is sort
of out of date, now.

00:44:22.470 --> 00:44:23.560
So we want to improve it.

00:44:23.560 --> 00:44:26.120
TOR NORBYE: But we do
have a Google group

00:44:26.120 --> 00:44:28.090
where you can basically
ask about things.

00:44:28.090 --> 00:44:30.950
So if something isn't
clear, it might not

00:44:30.950 --> 00:44:32.200
be just lack of documentation.

00:44:32.200 --> 00:44:34.591
It might be unintuitive
API we should fix.

00:44:34.591 --> 00:44:36.340
AUDIENCE: Yeah, sometimes
it's hard to see

00:44:36.340 --> 00:44:38.320
when you do changes to the API.

00:44:38.320 --> 00:44:42.225
You have to know to follow
the right group in G+ or be

00:44:42.225 --> 00:44:43.270
on the mailing list.

00:44:43.270 --> 00:44:45.060
TOR NORBYE: We're hoping to
stop breaking everybody--

00:44:45.060 --> 00:44:47.310
XAVIER DUCROHET: Yeah, that's
the goal of beta, right?

00:44:47.310 --> 00:44:48.630
It's to be more stable.

00:44:48.630 --> 00:44:52.410
I mean there are some unintended
breakage when we realized

00:44:52.410 --> 00:44:55.280
that people are using API maybe
they shouldn't, so we can't do

00:44:55.280 --> 00:44:57.360
much about that, but
the public API, I think,

00:44:57.360 --> 00:44:58.270
are more stable now.

00:44:58.270 --> 00:44:59.936
And we deprecate
rather than break them,

00:44:59.936 --> 00:45:01.721
so we can start
documenting them.

00:45:01.721 --> 00:45:03.970
TOR NORBYE: So I'm sorry,
we're basically out of time.

00:45:03.970 --> 00:45:06.350
So we're going to go to the
booth on the second floor.

00:45:06.350 --> 00:45:08.880
So if you have questions,
please join us there.

00:45:08.880 --> 00:45:10.580
Thank you everyone.

