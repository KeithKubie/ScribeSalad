WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So now we've seen how to do expressions in our formal grammar for JavaScript

00:00:04.000 --> 00:00:07.000
as well as statements like the assignment statement

00:00:07.000 --> 00:00:10.000
or the return statement or if-then-else, but we are not done.

00:00:10.000 --> 00:00:14.000
There is 1 last key element of a computer program.

00:00:14.000 --> 00:00:17.000
We need functions, and this splits into 2 parts.

00:00:17.000 --> 00:00:19.000
We need to know how to declare functions,

00:00:19.000 --> 00:00:22.000
to list how many arguments they take and what their bodies are,

00:00:22.000 --> 00:00:25.000
and we also need to know how to call functions in expressions.

00:00:25.000 --> 00:00:30.000
We know from experience that a Python program is basically just a list

00:00:30.000 --> 00:00:32.000
of statements and function definitions.

00:00:32.000 --> 00:00:36.000
Luckily for us, a JavaScript program is exactly the same thing,

00:00:36.000 --> 00:00:39.000
also a list of statements and function definitions.

00:00:39.000 --> 00:00:42.000
We sometimes call statements and function definitions elements

00:00:42.000 --> 00:00:45.000
because they're the key elements of a program at the top level.

00:00:45.000 --> 00:00:49.000
Let's get started on the highest level of our JavaScript grammar.

00:00:49.000 --> 00:00:55.000
A JavaScript program is either a single element, possibly followed by

00:00:55.000 --> 00:00:59.000
another JavaScript program, which is another element,

00:00:59.000 --> 00:01:01.000
so this ends up being a list of elements.

00:01:01.000 --> 00:01:04.000
And at some point, we get tired and stop writing in elements.

00:01:04.000 --> 00:01:09.000
An element can either be a function definition or an arbitrary statement,

00:01:09.000 --> 00:01:11.000
just like in Python.

00:01:11.000 --> 00:01:15.000
A function definition in JavaScript starts with the word function instead of the word def.

00:01:15.000 --> 00:01:17.000
There's an identifier. That's the name of the function.

00:01:17.000 --> 00:01:19.000
You must have these parentheses.

00:01:19.000 --> 00:01:22.000
You can declare some optional parameters in there.

00:01:22.000 --> 00:01:24.000
Maybe it's a function of one variable x.

00:01:24.000 --> 00:01:26.000
I'll have to show you how to do that in a minute.

00:01:26.000 --> 00:01:29.000
And then the body of a function is just a compound statement, which we've already seen.

00:01:29.000 --> 00:01:33.000
That's a list of statements terminated by semicolons.

00:01:33.000 --> 00:01:37.000
You can also just have statements at the top level, like print hello if you're testing things out.

00:01:37.000 --> 00:01:40.000
Any statement you want followed by a semi-colon.

00:01:40.000 --> 00:01:42.000
When we're giving the definition for a function,

00:01:42.000 --> 00:01:46.000
it can have any number of formal parameters that we decide.

00:01:46.000 --> 00:01:48.000
It could be a function of x, y and z.

00:01:48.000 --> 00:01:50.000
It could just be a function of a, or it could be a function of no parameters.

00:01:50.000 --> 00:01:53.000
That's why this is optional, opt.

00:01:53.000 --> 00:01:58.000
An optional parameter declaration could either be some actual parameters--

00:01:58.000 --> 00:02:01.000
this is the common choice--or nothing.

00:02:01.000 --> 00:02:05.000
If we're going to have 1 or more parameters, here's how it goes.

00:02:05.000 --> 00:02:08.000
You can declare the names of those variables.

00:02:08.000 --> 00:02:11.000
It's a function of x, y, z.

00:02:11.000 --> 00:02:15.000
And after each one, you have to have a comma until you get to the last one,

00:02:15.000 --> 00:02:17.000
which is not followed by a comma.

00:02:17.000 --> 00:02:21.000
We haven't hinted on this previously, but this is kind of a cute gem in context-free grammars.

00:02:21.000 --> 00:02:25.000
Note that our statements are terminated by semi-colons.

00:02:25.000 --> 00:02:29.000
In a compound statement, every statement is followed by a semi-colon.

00:02:29.000 --> 00:02:33.000
By contrast over here with parameters, they're separated by commas,

00:02:33.000 --> 00:02:35.000
so the last one doesn't have a comma after it.

00:02:35.000 --> 00:02:37.000
Pretty cute.

00:02:37.000 --> 00:02:40.000
And we have all the rules for expressions that we used to have before,

00:02:40.000 --> 00:02:42.000
but now we're going to add function calls.

00:02:42.000 --> 00:02:45.000
When you're calling a function, you have to give the function name,

00:02:45.000 --> 00:02:50.000
sign, print, abs val, and then you pass in some number of arguments.

00:02:50.000 --> 00:02:53.000
There could be none, which is why this says optional,

00:02:53.000 --> 00:02:55.000
or there could be 1 or more, and you're going to see this play out

00:02:55.000 --> 00:02:59.000
in a very similar pattern to opt params.

00:02:59.000 --> 00:03:03.000
The parameters in a function declaration are always just names

00:03:03.000 --> 00:03:06.000
like x, y, or z, and then you get to refer to them in the function body.

00:03:06.000 --> 00:03:09.000
But when you're calling a function, you can put in actual values.

00:03:09.000 --> 00:03:13.000
You can call sign of 3, so we can't just reuse params.

00:03:13.000 --> 00:03:17.000
We need to make a new set of rewrite rules for actual arguments.

00:03:17.000 --> 00:03:22.000
The arguments could be nothing, or it could be 1 or more arguments.

00:03:22.000 --> 00:03:27.000
If it's 1 or more arguments, they're going to be expressions separated by commas.

00:03:27.000 --> 00:03:31.000
Down here we had function calls, which are expressions.

00:03:31.000 --> 00:03:35.000
You could take sign of x and divide the result by 2.

00:03:35.000 --> 00:03:37.000
And up here at the top, function definitions.

00:03:37.000 --> 00:03:39.000
These happen more rarely. These are elements.

00:03:39.000 --> 00:03:41.000
This is actually pretty much it.

00:03:41.000 --> 00:03:43.000
This is the majority of our JavaScript grammar.

00:03:43.000 --> 00:03:45.000
The real devil is in the details.

00:03:45.000 --> 00:03:48.000
For example, you may have noticed that nothing in this grammar

00:03:48.000 --> 00:03:53.000
prevents you from declaring sign as a function that takes 1 parameter

00:03:53.000 --> 00:03:56.000
and then later on calling it with 2 parameters.

00:03:56.000 --> 09:59:59.000
Uh-oh. More on that later.

