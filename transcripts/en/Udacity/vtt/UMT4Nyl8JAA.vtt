WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:03.180
We turn now to the key part of
the analysis where we show that

00:00:03.180 --> 00:00:06.498
each phase of the Dinic
algorithm takes V times E time.

00:00:06.498 --> 00:00:09.910
As with Edmonds-Karp,
we will use a level graph.

00:00:09.910 --> 00:00:12.820
In this case, however,
the algorithm actually builds the graph,

00:00:12.820 --> 00:00:15.349
whereas in Edmonds-Karp we
simply used it for the analysis.

00:00:16.360 --> 00:00:19.430
The level graph can be built
by running Bedford search and

00:00:19.430 --> 00:00:23.800
saving all forward edges while
ignoring backwards and lateral ones.

00:00:23.800 --> 00:00:27.950
As we argued before,
when we augment the flow along the path,

00:00:27.950 --> 00:00:32.180
say along this one here, we introduce
reverse edges into the residual graph.

00:00:33.280 --> 00:00:36.840
Note that these are always
backwards edges in the level graph.

00:00:36.840 --> 00:00:39.940
And hence they aren't useful
in building a path equal to or

00:00:39.940 --> 00:00:42.260
shorter than the previous shortest path.

00:00:42.260 --> 00:00:45.640
Well if the new edges are useless,
why rebuild the level graph

00:00:45.640 --> 00:00:49.640
of the residual graph when the old
one will serve just as well?

00:00:49.640 --> 00:00:52.670
We can just update
the residual capacities.

00:00:52.670 --> 00:00:56.390
More precisely,
given the possibly outdated level graph,

00:00:56.390 --> 00:01:01.350
we can build a path from source to
sync just by making the first vertex

00:01:01.350 --> 00:01:05.269
on the adjacency list
the next vertex in the path.

00:01:05.269 --> 00:01:06.480
If this generates a path to t,

00:01:06.480 --> 00:01:11.120
then we augment the flow and
update the residual capacities.

00:01:11.120 --> 00:01:15.890
If it doesn't, then we delete the last
vertex in the path from the level graph.

00:01:15.890 --> 00:01:20.620
In this example, we would,
first find a path from s to t, and,

00:01:20.620 --> 00:01:23.140
let's say that this edge
here is a bottle neck.

00:01:23.140 --> 00:01:26.500
It's capacity gets set to 0,
and it gets deleted.

00:01:26.500 --> 00:01:29.400
Next, we will build a path from s again,
and

00:01:29.400 --> 00:01:32.060
this time, we would run into a dead end.

00:01:32.060 --> 00:01:35.390
So we delete this vertex, and, continue.

00:01:35.390 --> 00:01:37.480
There are only V vertices in the graph.

00:01:37.480 --> 00:01:41.530
So we can't run into more than V
dead ends, and every augmentation

00:01:41.530 --> 00:01:46.380
deletes the bottleneck edge, so
we can't delete more than E edges.

00:01:46.380 --> 00:01:49.020
Overall then,
we won't try more than E path.

00:01:50.090 --> 00:01:55.420
This process however, of building
the path by first in the adjacency list,

00:01:55.420 --> 00:01:59.560
and then augmenting or
deleting a vertex as appropriate.

00:01:59.560 --> 00:02:04.980
Each time that set of operations is
done, only costs us order V time.

00:02:04.980 --> 00:02:09.880
So, overall, then,
we're doing order V work, order E times.

00:02:09.880 --> 00:02:13.830
So, overall,
this work takes order V times E.

00:02:13.830 --> 00:02:16.910
Taking this all together,
then, we have V phases.

00:02:16.910 --> 00:02:22.870
And each one of the individual phases
costs order E times V time, for a total

00:02:22.870 --> 00:02:28.934
of E times V squared time overall, which
is an improvement over Edmonds-Karp.

