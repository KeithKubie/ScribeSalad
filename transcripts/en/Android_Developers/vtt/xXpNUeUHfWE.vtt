WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:17.964
[NO SOUND]

00:00:17.964 --> 00:07:35.360
[MUSIC PLAYING]

00:07:35.360 --> 00:07:36.830
RETO MEIER: Good afternoon,
everyone.

00:07:36.830 --> 00:07:37.930
My name is Reto Meier.

00:07:37.930 --> 00:07:40.500
I'm a member of the Android
Developer Relations team.

00:07:40.500 --> 00:07:42.230
And welcome to the first
ever episode

00:07:42.230 --> 00:07:44.670
of Dev.Bytes Backstage.

00:07:44.670 --> 00:07:47.430
I'm joined today by Chet
Haase, Dev.Byte author

00:07:47.430 --> 00:07:48.990
extraordinaire.

00:07:48.990 --> 00:07:51.960
And we are here today to answer
your questions about

00:07:51.960 --> 00:07:52.800
animations.

00:07:52.800 --> 00:07:55.440
So if you have a question that
you would like to ask Chet,

00:07:55.440 --> 00:07:58.590
you can either join us live
via HangOut, which you can

00:07:58.590 --> 00:08:01.690
find the link to if you go to
the Google+ event page.

00:08:01.690 --> 00:08:04.460
Or you can type your question
directly into the comment

00:08:04.460 --> 00:08:08.100
stream on event page
or on YouTube.

00:08:08.100 --> 00:08:12.240
While we wait for you guys to
ask us your questions, we have

00:08:12.240 --> 00:08:14.550
a few prepared from people
who have asked

00:08:14.550 --> 00:08:15.690
before we got started.

00:08:15.690 --> 00:08:17.970
And I think we'd like to find
out a little bit more about

00:08:17.970 --> 00:08:18.560
Chet as well.

00:08:18.560 --> 00:08:21.010
So if you could tell us a little
bit about yourself and

00:08:21.010 --> 00:08:22.640
what you're doing on
the Android team.

00:08:22.640 --> 00:08:25.440
CHET HAASE: I am an engineer on
the framework team, which

00:08:25.440 --> 00:08:27.840
is the team that brings you
things like application life

00:08:27.840 --> 00:08:33.919
cycle, the UI tool kits,
graphics, activities, all that

00:08:33.919 --> 00:08:35.039
kind of good stuff.

00:08:35.039 --> 00:08:37.690
Specifically, I work on graphics
and animation stuff.

00:08:37.690 --> 00:08:40.110
So I sort of wear different
hats at different times.

00:08:40.110 --> 00:08:42.030
I have done a fair amount
of work on animations.

00:08:42.030 --> 00:08:45.610
I also help out with the GPU
acceleration and general UI

00:08:45.610 --> 00:08:47.550
graphics goodies.

00:08:47.550 --> 00:08:48.760
RETO MEIER: Very nice.

00:08:48.760 --> 00:08:48.960
Excellent.

00:08:48.960 --> 00:08:49.260
All right.

00:08:49.260 --> 00:08:50.710
So let's get started.

00:08:50.710 --> 00:08:53.700
Our first question is from
Andrew Hughes from San Luis

00:08:53.700 --> 00:08:55.600
Obispo in California.

00:08:55.600 --> 00:08:59.100
He asks, let's say you have
a view group that is added

00:08:59.100 --> 00:09:03.260
directly to the Window Manager,
such as a pop-up, and

00:09:03.260 --> 00:09:05.880
a child view's layout changes
size, causing the entire

00:09:05.880 --> 00:09:07.620
pop-up view to change size.

00:09:07.620 --> 00:09:11.110
How would you animate the view
groups' size change?

00:09:11.110 --> 00:09:13.400
He's watched the Dev.Bytes
on layout transitions.

00:09:13.400 --> 00:09:16.200
And he's tried to set that
layout transition using the

00:09:16.200 --> 00:09:19.840
transitionlayout.changing on the
view group that's added to

00:09:19.840 --> 00:09:20.570
the window manager.

00:09:20.570 --> 00:09:23.590
This causes the child view whose
size changed to animate

00:09:23.590 --> 00:09:24.710
to the new size.

00:09:24.710 --> 00:09:27.090
But the parent view group
just jumps to the new

00:09:27.090 --> 00:09:28.110
size without animating.

00:09:28.110 --> 00:09:28.730
CHET HAASE: Yeah.

00:09:28.730 --> 00:09:32.710
So the way that I think about
layout transition is, it's

00:09:32.710 --> 00:09:38.490
really good at doing very
specific things.

00:09:38.490 --> 00:09:41.870
And sometimes you fall outside
of the bounds of what those

00:09:41.870 --> 00:09:43.150
specific things are.

00:09:43.150 --> 00:09:46.000
And you, Andrew, have done so.

00:09:46.000 --> 00:09:50.120
The problem is that that view
group does not have a parent

00:09:50.120 --> 00:09:51.100
in your situation.

00:09:51.100 --> 00:09:53.340
And what you really need to do
is set a layout transition on

00:09:53.340 --> 00:09:56.550
the parent of the children, or
of the view hierarchy that you

00:09:56.550 --> 00:09:58.500
want to automatically animate.

00:09:58.500 --> 00:10:03.620
So if there was a way to have a
parent there, then you would

00:10:03.620 --> 00:10:05.700
set the layout transition
on that instead.

00:10:05.700 --> 00:10:08.490
If not, it's up to you.

00:10:08.490 --> 00:10:11.570
You can use similar techniques
to animate the bounds of the

00:10:11.570 --> 00:10:12.250
view group.

00:10:12.250 --> 00:10:14.235
Although you're actually
resizing the windows, so

00:10:14.235 --> 00:10:17.940
you're probably down to doing
expensive things like actually

00:10:17.940 --> 00:10:21.720
changing, I don't know, window
manager layout params to

00:10:21.720 --> 00:10:23.200
actually resize the
window, which is

00:10:23.200 --> 00:10:25.020
going to become costly.

00:10:25.020 --> 00:10:28.810
You may, instead, do something
different, like actually pop

00:10:28.810 --> 00:10:30.700
up a window that is of
the correct size.

00:10:30.700 --> 00:10:33.680
But you're animating over a
transparent area and faking

00:10:33.680 --> 00:10:35.740
out what it looks like
to the user.

00:10:35.740 --> 00:10:39.040
There's another technique we
demonstrated at I/O and will

00:10:39.040 --> 00:10:40.730
be coming out as a Dev.Byte
soon-- wait a minute.

00:10:40.730 --> 00:10:42.320
No, it came out two
weeks ago--

00:10:42.320 --> 00:10:44.890
called activity animations,
which is about launching

00:10:44.890 --> 00:10:48.130
activities with transparent
backgrounds to fake out the

00:10:48.130 --> 00:10:50.470
fact that the activity is there,
but we're going to

00:10:50.470 --> 00:10:51.840
animate into it.

00:10:51.840 --> 00:10:55.250
Maybe you could do something
like that in this situation to

00:10:55.250 --> 00:10:57.480
basically not have it at the
full size when it begins, but

00:10:57.480 --> 00:10:58.930
then sort of animate
the sizing more.

00:10:58.930 --> 00:11:01.440
I don't know specifically
about your situation.

00:11:01.440 --> 00:11:03.340
But I would say that layout
transition is probably not

00:11:03.340 --> 00:11:06.740
going to solve that problem for
that top-level view group

00:11:06.740 --> 00:11:07.420
that's in the window.

00:11:07.420 --> 00:11:08.700
So you're going to need
to figure out

00:11:08.700 --> 00:11:10.720
something else that will.

00:11:10.720 --> 00:11:10.980
RETO MEIER: Thank you.

00:11:10.980 --> 00:11:12.490
Good answer.

00:11:12.490 --> 00:11:15.470
So I'm going to rely on Daniel
to let us know when someone in

00:11:15.470 --> 00:11:17.460
the Hangout is ready
to ask a question.

00:11:17.460 --> 00:11:20.650
So if you are joining us via
Hangout, do be sure to type

00:11:20.650 --> 00:11:23.735
into the chat bar within the
Hangout that you are ready for

00:11:23.735 --> 00:11:24.200
a question.

00:11:24.200 --> 00:11:26.510
Because we often get people who
just want to join Hangouts

00:11:26.510 --> 00:11:28.240
because it's more
fun that way.

00:11:28.240 --> 00:11:30.720
So you actually have a question
to ask, please do let

00:11:30.720 --> 00:11:33.560
Daniel know, and he will
put you up on screen.

00:11:33.560 --> 00:11:38.100
In the meantime, Moritz Post
from Germany wants to know,

00:11:38.100 --> 00:11:40.930
what would you use to do
Gaussian blur effects within

00:11:40.930 --> 00:11:42.150
an application?

00:11:42.150 --> 00:11:44.300
Is Renderscript still something
that can be used for

00:11:44.300 --> 00:11:45.510
That

00:11:45.510 --> 00:11:46.930
CHET HAASE: Yes, in fact.

00:11:46.930 --> 00:11:49.010
There was a portion of
Renderscript specifically

00:11:49.010 --> 00:11:53.240
around doing actual display
graphics that was deprecated

00:11:53.240 --> 00:11:56.400
and that is no longer the way
that Renderscript is going.

00:11:56.400 --> 00:11:59.760
However, Renderscript has
another important component

00:11:59.760 --> 00:12:02.890
that is having a lot of work
done and has a lot of

00:12:02.890 --> 00:12:06.730
important performance-related
advantages, which is the

00:12:06.730 --> 00:12:08.740
ability to do image
processing.

00:12:08.740 --> 00:12:13.090
So it can use GPU as well as
CPU resources, multicore

00:12:13.090 --> 00:12:13.730
processing.

00:12:13.730 --> 00:12:18.640
You get all the advantages of
all the compute power that the

00:12:18.640 --> 00:12:23.660
device has using Renderscripts
and doing inherently

00:12:23.660 --> 00:12:25.860
multi-threaded algorithms
on it.

00:12:25.860 --> 00:12:27.940
So, for instance, you could
do a Gaussian blur using

00:12:27.940 --> 00:12:31.590
Renderscript using these
primitives in the

00:12:31.590 --> 00:12:35.030
non-deprecated part of
Renderscripts to get excellent

00:12:35.030 --> 00:12:36.640
performance for doing
things like this.

00:12:36.640 --> 00:12:41.920
There are other ways to get
Gaussian blur, but I would say

00:12:41.920 --> 00:12:44.860
what you want to do
is end up in the

00:12:44.860 --> 00:12:46.110
highest-performance area.

00:12:46.110 --> 00:12:49.280
Which means you're basically
going to be using Renderscript

00:12:49.280 --> 00:12:53.010
if you want to stay at that
level, or OpenGL as well If

00:12:53.010 --> 00:12:55.960
you want to do things a little
bit more manually.

00:12:55.960 --> 00:12:57.430
Renderscript might be
a little bit easier.

00:12:57.430 --> 00:13:02.090
It might also allow you to
stay within the SDK level

00:13:02.090 --> 00:13:04.070
you're more comfortable with.

00:13:04.070 --> 00:13:04.880
But I don't know.

00:13:04.880 --> 00:13:06.230
It's worth checking out.

00:13:06.230 --> 00:13:09.580
It isn't possibly an expensive
computation

00:13:09.580 --> 00:13:10.560
to perform at runtime.

00:13:10.560 --> 00:13:12.950
So it does seem worth checking
out Renderscript to get the

00:13:12.950 --> 00:13:14.672
best performance you can.

00:13:14.672 --> 00:13:16.400
RETO MEIER: Very nice.

00:13:16.400 --> 00:13:18.860
Everyone loves Gaussian blur
effects over things.

00:13:18.860 --> 00:13:21.340
So that's a good question.

00:13:21.340 --> 00:13:21.920
Let's have a look.

00:13:21.920 --> 00:13:26.810
Emile Schlanda says that you and
Romain mentioned a custom

00:13:26.810 --> 00:13:30.250
view with a code-generated drop
shadow in one your talks,

00:13:30.250 --> 00:13:31.680
presumably at I/O this year?

00:13:31.680 --> 00:13:32.910
CHET HAASE: Yep.

00:13:32.910 --> 00:13:34.940
RETO MEIER: So he'd love to know
the best way to achieve

00:13:34.940 --> 00:13:37.750
this, both with performance in
mind, and the fact that a drop

00:13:37.750 --> 00:13:40.730
shadow will often want to be
drawn outside of the view's

00:13:40.730 --> 00:13:41.930
clipping rectangle.

00:13:41.930 --> 00:13:43.780
It would be very annoying to
take the drop shadow into

00:13:43.780 --> 00:13:45.460
account when doing the layout.

00:13:45.460 --> 00:13:46.940
Also, how do you handle
this drop shadow

00:13:46.940 --> 00:13:49.590
for non-square views?

00:13:49.590 --> 00:13:51.820
CHET HAASE: So there's a couple
of different pieces of

00:13:51.820 --> 00:13:52.610
information there.

00:13:52.610 --> 00:13:56.000
First of all, you might want to
check out the Dev.Byte that

00:13:56.000 --> 00:13:58.430
came out, again, a couple weeks
ago called Activity

00:13:58.430 --> 00:14:00.070
Animations.

00:14:00.070 --> 00:14:04.540
Because that had a simple layout
in the back of it that

00:14:04.540 --> 00:14:08.340
would allow the objects inside
the container to cast their

00:14:08.340 --> 00:14:09.150
own shadow.

00:14:09.150 --> 00:14:11.770
So in that case, we didn't have
a clipping the problem

00:14:11.770 --> 00:14:14.760
because it was the container
itself that was actually

00:14:14.760 --> 00:14:16.890
drawing the shadows
behind the views.

00:14:16.890 --> 00:14:19.180
So it basically iterate through
the children whenever

00:14:19.180 --> 00:14:21.340
it needed to draw itself and
say, where are you now?

00:14:21.340 --> 00:14:22.370
I'm going to draw the
shadow there.

00:14:22.370 --> 00:14:24.730
And then it also had a couple of
properties that allowed you

00:14:24.730 --> 00:14:29.660
to vary what we call the shadow
distance, which created

00:14:29.660 --> 00:14:33.790
an offset as well as a blur
around that to simulate the

00:14:33.790 --> 00:14:38.780
action of the view being closer
or further from the

00:14:38.780 --> 00:14:41.410
actual surface that it was
projecting the shadow onto.

00:14:41.410 --> 00:14:43.390
There are different ways
to achieve this effect.

00:14:43.390 --> 00:14:47.320
The one that we used in that
particular activity was to

00:14:47.320 --> 00:14:52.490
render a rounded rectangle into
a bitmap and blur that

00:14:52.490 --> 00:14:54.270
operation in the
bitmap itself.

00:14:54.270 --> 00:14:56.670
And then when we drew the
bitmap, it was going to be

00:14:56.670 --> 00:14:57.540
naturally blurred.

00:14:57.540 --> 00:15:00.030
Especially around the edges,
which is what you care about.

00:15:00.030 --> 00:15:05.910
For rounded shapes or
non-rectangular views, we just

00:15:05.910 --> 00:15:08.010
drew a flat-out round rectangle,
because that was

00:15:08.010 --> 00:15:09.420
the effect that we want.

00:15:09.420 --> 00:15:13.030
If you have a specific shape in
mind that you want to use,

00:15:13.030 --> 00:15:15.470
I believe the technique that
I heard that you could use

00:15:15.470 --> 00:15:18.080
instead is to create
a bitmap that's--

00:15:18.080 --> 00:15:22.530
I think it's an alpha
eight bitmap.

00:15:22.530 --> 00:15:25.720
And the details are
escaping me.

00:15:25.720 --> 00:15:30.140
But you should be able to get a
similar blur effect there to

00:15:30.140 --> 00:15:32.400
get the effect that you need
with the shape that you

00:15:32.400 --> 00:15:34.990
actually want to draw, instead
of the simple rounded rect

00:15:34.990 --> 00:15:36.260
that we were using there.

00:15:36.260 --> 00:15:38.370
But go ahead and check out the
Dev.Byte as well as the code

00:15:38.370 --> 00:15:38.830
that goes with it.

00:15:38.830 --> 00:15:39.830
You can at least see
what we were

00:15:39.830 --> 00:15:41.590
doing for the I/O example.

00:15:41.590 --> 00:15:43.960
Which is maybe a starting
place for you.

00:15:43.960 --> 00:15:45.420
RETO MEIER: Very nice.

00:15:45.420 --> 00:15:47.330
Do we have anyone on the Hangout
who would like to ask

00:15:47.330 --> 00:15:48.410
a question, Daniel?

00:15:48.410 --> 00:15:49.872
DANIEL: Not at the moment.

00:15:49.872 --> 00:15:51.288
I'm asking away.

00:15:51.288 --> 00:15:52.710
But no one seems
interested yet.

00:15:52.710 --> 00:15:54.640
RETO MEIER: By all means,
take this advantage.

00:15:54.640 --> 00:15:56.400
I'm going to go through a few
more questions which we've

00:15:56.400 --> 00:15:57.665
pre-screened.

00:15:57.665 --> 00:16:00.180
Once we're out of questions,
we're going to stop talking.

00:16:00.180 --> 00:16:02.650
So if you do have anything that
you'd like to ask Chet

00:16:02.650 --> 00:16:05.960
about animations, now is a
fantastic opportunity.

00:16:05.960 --> 00:16:08.440
CHET HAASE: We may be forced
to sing a song if

00:16:08.440 --> 00:16:09.530
there are no questions.

00:16:09.530 --> 00:16:10.750
That's not a threat.

00:16:10.750 --> 00:16:10.990
That's a promise.

00:16:10.990 --> 00:16:12.490
RETO MEIER: Did we
bring Dan Galpin?

00:16:12.490 --> 00:16:14.400
He's my song proxy.

00:16:14.400 --> 00:16:17.190
Whenever there's a need to break
out to song or dance, I

00:16:17.190 --> 00:16:18.420
get Dan Galpin in the room.

00:16:18.420 --> 00:16:19.660
CHET HAASE: Does that
clear the room?

00:16:19.660 --> 00:16:20.830
Or is that a good thing?

00:16:20.830 --> 00:16:21.610
RETO MEIER: Well, I don't know.

00:16:21.610 --> 00:16:22.530
I leave.

00:16:22.530 --> 00:16:25.810
So I have no idea what happens
from that point onwards.

00:16:25.810 --> 00:16:28.880
In the meantime, Andrew Moore
from Leeds has managed to

00:16:28.880 --> 00:16:31.690
avoid us having to break into
a musical number quite yet.

00:16:31.690 --> 00:16:34.240
He wants to know how you would
go about creating the

00:16:34.240 --> 00:16:37.280
animation effect that's being
used more and more in Google's

00:16:37.280 --> 00:16:41.710
own apps, such as the one in
Currents in the List/GridView

00:16:41.710 --> 00:16:45.080
to slide in the item at the
bottom of the list elegantly.

00:16:45.080 --> 00:16:45.400
CHET HAASE: Yeah.

00:16:45.400 --> 00:16:46.910
So this question actually
confused me.

00:16:46.910 --> 00:16:48.740
And then I realized that we
hadn't actually played the

00:16:48.740 --> 00:16:50.970
Dev.Bytes before the
question was asked.

00:16:50.970 --> 00:16:51.790
And now we've done that.

00:16:51.790 --> 00:16:56.040
Because we were unable to have
this Q&amp;A period last week.

00:16:56.040 --> 00:16:58.320
So I would suggest you go back
and actually watch the

00:16:58.320 --> 00:17:01.320
Dev.Bytes that we posted last
Friday, which was called

00:17:01.320 --> 00:17:04.415
ListView Anim Removal
Animations?

00:17:04.415 --> 00:17:05.165
I can't remember.

00:17:05.165 --> 00:17:06.531
RETO MEIER: It was ListView
Deletion Animations, if I

00:17:06.531 --> 00:17:07.980
recall correctly.

00:17:07.980 --> 00:17:10.920
CHET HAASE: So that one
specifically did a very simple

00:17:10.920 --> 00:17:12.220
swipe maneuver.

00:17:12.220 --> 00:17:13.119
It was not--

00:17:13.119 --> 00:17:14.339
I'll get back to that
in a second.

00:17:14.339 --> 00:17:16.589
It wasn't, probably, what you
want to do in real apps.

00:17:16.589 --> 00:17:18.540
But it was good enough
for the demo app.

00:17:18.540 --> 00:17:20.990
But then after it was wiped
out, it would animate the

00:17:20.990 --> 00:17:22.980
items around it to
close the gap.

00:17:22.980 --> 00:17:26.119
The nuance there is the swipe
animation used a very simple

00:17:26.119 --> 00:17:28.480
heuristic that said, move
it onto your finger.

00:17:28.480 --> 00:17:31.440
And then if it's gone past a
certain amount, then simply

00:17:31.440 --> 00:17:32.920
animate it away very quickly.

00:17:32.920 --> 00:17:34.950
What you actually want to do in
real applications, and what

00:17:34.950 --> 00:17:37.630
we do in the Google applications
like Gmail, is to

00:17:37.630 --> 00:17:40.760
use Velocity Tracker to figure
out how fast the finger was

00:17:40.760 --> 00:17:42.200
moving when they let go.

00:17:42.200 --> 00:17:44.480
And if it's moving under a
certain speed, then we'll

00:17:44.480 --> 00:17:47.230
actually snap it back based
on that information.

00:17:47.230 --> 00:17:50.110
Otherwise, we'll animate it off
the screen based on the

00:17:50.110 --> 00:17:53.060
velocity that the finger
was moving at.

00:17:53.060 --> 00:17:54.820
That's a little bit
more effective.

00:17:54.820 --> 00:17:58.010
It gives the user a little bit
better-connected feeling to

00:17:58.010 --> 00:17:58.630
the application.

00:17:58.630 --> 00:18:01.910
Because it's behaving in a much
more WYSIWYG manner than

00:18:01.910 --> 00:18:02.970
the simple demo that we had.

00:18:02.970 --> 00:18:04.680
But you can at least see the
mechanics of actually

00:18:04.680 --> 00:18:07.780
animating the item out or back
in and then animating the gap

00:18:07.780 --> 00:18:10.250
closed, which was the
real intent of that.

00:18:10.250 --> 00:18:10.930
RETO MEIER: So that's
interesting.

00:18:10.930 --> 00:18:13.790
So it's actually more intuitive
for people using app

00:18:13.790 --> 00:18:16.390
to base it on velocity of finger
movement rather than

00:18:16.390 --> 00:18:19.080
the distance which you're
transitioning the object off

00:18:19.080 --> 00:18:20.280
the screen.

00:18:20.280 --> 00:18:21.500
CHET HAASE: Well, it was
very easy for me

00:18:21.500 --> 00:18:24.430
to base it on distance.

00:18:24.430 --> 00:18:27.080
I would think it's not
that much harder to

00:18:27.080 --> 00:18:28.160
use velocity instead.

00:18:28.160 --> 00:18:30.610
Especially since we have
Velocity Tracker as a public

00:18:30.610 --> 00:18:32.940
class that you can
get a hold of.

00:18:32.940 --> 00:18:35.730
It's going to be a little bit
more work, which is why didn't

00:18:35.730 --> 00:18:37.440
bother to do it for the
purposes this demo.

00:18:37.440 --> 00:18:39.560
Because that's not where
I was focusing.

00:18:39.560 --> 00:18:42.230
But it's not that big a deal.

00:18:42.230 --> 00:18:45.720
And more importantly, it's the
user experience that you want

00:18:45.720 --> 00:18:47.540
in that sliding application.

00:18:47.540 --> 00:18:49.410
RETO MEIER: Very nice.

00:18:49.410 --> 00:18:49.900
OK.

00:18:49.900 --> 00:18:51.250
Let's have a look.

00:18:51.250 --> 00:18:52.630
So I don't know who asked
this question.

00:18:52.630 --> 00:18:56.810
But in the new Hangout app, some
people really like the

00:18:56.810 --> 00:18:59.400
way that new messages
animate in--

00:18:59.400 --> 00:18:59.780
CHET HAASE: Isn't that nice?

00:18:59.780 --> 00:19:01.720
RETO MEIER: --from the input
to the chat history.

00:19:01.720 --> 00:19:04.380
And even more importantly, how
the previous messages animate

00:19:04.380 --> 00:19:05.880
up to make room.

00:19:05.880 --> 00:19:07.700
How would you go about creating
a sequence of

00:19:07.700 --> 00:19:08.580
animations like that?

00:19:08.580 --> 00:19:11.470
CHET HAASE: That is tricky
from a couple

00:19:11.470 --> 00:19:14.050
of different angles.

00:19:14.050 --> 00:19:15.300
I'll cover them.

00:19:15.300 --> 00:19:17.230
I don't have a pat answer
for you because it

00:19:17.230 --> 00:19:18.340
depends on the situation.

00:19:18.340 --> 00:19:21.160
One of the reasons
is, imagine this.

00:19:21.160 --> 00:19:23.960
Imagine that you're typing text
into an edit text with a

00:19:23.960 --> 00:19:25.910
certain font size.

00:19:25.910 --> 00:19:30.200
And then you want to place
it as just a text view, a

00:19:30.200 --> 00:19:33.010
non-editable text view in the
chat window as it scrolls up

00:19:33.010 --> 00:19:34.280
the screen.

00:19:34.280 --> 00:19:36.390
Well, does that have
the same font size?

00:19:36.390 --> 00:19:39.100
And what's the text going to
look like in that view?

00:19:39.100 --> 00:19:41.330
And how does that compare
to how the text looks

00:19:41.330 --> 00:19:42.620
like in the edit text?

00:19:42.620 --> 00:19:45.200
So how do you actually animate
from one view that is

00:19:45.200 --> 00:19:48.490
completely different into
another view with the same

00:19:48.490 --> 00:19:50.560
text, but may be different
text characteristics?

00:19:50.560 --> 00:19:53.500
Or at least different text
measurement, because it's not

00:19:53.500 --> 00:19:54.500
exactly like the edit text.

00:19:54.500 --> 00:19:58.360
So there's some tricky
nuances thereabouts.

00:19:58.360 --> 00:20:00.620
Even if you have the same size
text, you want to make sure

00:20:00.620 --> 00:20:03.110
that you're actually going to
animate it from and to the

00:20:03.110 --> 00:20:06.640
correct locations in these
completely different view and

00:20:06.640 --> 00:20:08.210
layout situations.

00:20:08.210 --> 00:20:10.420
So assuming that you can
actually solve that problem,

00:20:10.420 --> 00:20:12.610
or that you're actually
animating the same kind of

00:20:12.610 --> 00:20:14.840
view, or you can fake it out
well enough, or you can

00:20:14.840 --> 00:20:18.460
cross-fade between them, the
other element here is to have

00:20:18.460 --> 00:20:21.440
the ability to basically
do a flyover of views.

00:20:21.440 --> 00:20:24.310
What you want to do is move a
view from one container to

00:20:24.310 --> 00:20:27.350
another, or at least a facsimile
of the view.

00:20:27.350 --> 00:20:30.140
One important thing to note in
graphics and animation is,

00:20:30.140 --> 00:20:36.830
it's not always necessary to do
the right thing, as long as

00:20:36.830 --> 00:20:39.290
you do the thing that
looks good.

00:20:39.290 --> 00:20:41.400
So in this case, do
you actually need

00:20:41.400 --> 00:20:42.500
to fly a text view?

00:20:42.500 --> 00:20:45.490
Or is it good enough to simply
fly a graphical representation

00:20:45.490 --> 00:20:46.590
of the text?

00:20:46.590 --> 00:20:48.280
And you can actually
do either one.

00:20:48.280 --> 00:20:51.470
If you want to fly just a bitmap
of the text, you can

00:20:51.470 --> 00:20:53.230
snapshot whatever it
is that you want to

00:20:53.230 --> 00:20:54.700
represent the text.

00:20:54.700 --> 00:20:57.120
And then you can basically have
a custom container that

00:20:57.120 --> 00:20:59.180
draws that on top of everything
else that's

00:20:59.180 --> 00:21:00.670
happening at the same time.

00:21:00.670 --> 00:21:03.310
You could also take a view,
basically create a view on the

00:21:03.310 --> 00:21:07.360
fly, or remove that view that
you had from the parent that

00:21:07.360 --> 00:21:10.690
it was in, and then place it
in an overlay container.

00:21:10.690 --> 00:21:11.700
And then the animate that.

00:21:11.700 --> 00:21:15.220
And the way that works is,
if you picture layers of

00:21:15.220 --> 00:21:15.830
containers--

00:21:15.830 --> 00:21:19.580
let's say you have a frame
layout and it has a ListView

00:21:19.580 --> 00:21:23.310
in it which represents the
chat content so far.

00:21:23.310 --> 00:21:26.100
And then at the bottom of
it, it has an edit text.

00:21:26.100 --> 00:21:29.680
Well, you could actually take a
view out from the bottom, or

00:21:29.680 --> 00:21:32.680
create a new view on the fly,
and place that directly into

00:21:32.680 --> 00:21:34.210
the frame layout.

00:21:34.210 --> 00:21:36.790
So you could--

00:21:36.790 --> 00:21:37.500
let's see.

00:21:37.500 --> 00:21:37.750
Yeah.

00:21:37.750 --> 00:21:37.950
Right.

00:21:37.950 --> 00:21:41.010
You're taking it out of its
container at the bottom.

00:21:41.010 --> 00:21:43.160
And then you're putting it into
the overall container

00:21:43.160 --> 00:21:44.720
that also contains
the ListView.

00:21:44.720 --> 00:21:47.670
And then as that container
draws, it can then draw that

00:21:47.670 --> 00:21:49.180
other child there.

00:21:49.180 --> 00:21:52.060
So you're adding it as a child,
basically, on the top

00:21:52.060 --> 00:21:54.940
layer of some layout
that's at the back.

00:21:54.940 --> 00:21:57.220
Maybe your main content
view or whatever.

00:21:57.220 --> 00:21:58.510
And then you can do
whatever you want.

00:21:58.510 --> 00:21:59.753
You can animate the balance
of that thing.

00:21:59.753 --> 00:22:00.500
You can animate the

00:22:00.500 --> 00:22:02.120
translation position or whatever.

00:22:02.120 --> 00:22:03.570
You can scale it on the fly.

00:22:03.570 --> 00:22:05.040
Then you could do crossfade
tricks.

00:22:05.040 --> 00:22:10.150
Once it's in that layout that
allows it to lie on top of

00:22:10.150 --> 00:22:12.010
everything else that's in there,
you can do whatever you

00:22:12.010 --> 00:22:13.160
want with it.

00:22:13.160 --> 00:22:14.840
Then place in the
correct place.

00:22:14.840 --> 00:22:16.850
The real trick there,
though, is--

00:22:16.850 --> 00:22:19.140
as I said at the beginning
of this incredibly long

00:22:19.140 --> 00:22:20.540
paragraph--

00:22:20.540 --> 00:22:23.570
figuring out a view that's going
to correctly represent

00:22:23.570 --> 00:22:25.390
that view from the starting
position and

00:22:25.390 --> 00:22:26.760
location and size.

00:22:26.760 --> 00:22:28.920
And the same thing at the end.

00:22:28.920 --> 00:22:31.310
So that to the user, it actually
looks like the same

00:22:31.310 --> 00:22:32.590
object, even though
it probably is

00:22:32.590 --> 00:22:34.390
not the same object.

00:22:34.390 --> 00:22:36.100
RETO MEIER: Sounds like
a lot of sneakiness.

00:22:36.100 --> 00:22:37.220
CHET HAASE: There is a
lot of sneakiness in

00:22:37.220 --> 00:22:38.340
animations in general.

00:22:38.340 --> 00:22:41.650
Again, as long as it looks
good, it's good enough.

00:22:41.650 --> 00:22:42.180
RETO MEIER: Excellent.

00:22:42.180 --> 00:22:43.810
That's our slogan, isn't it?

00:22:43.810 --> 00:22:44.910
For Dev.Bytes?

00:22:44.910 --> 00:22:48.825
As long as it looks good,
it's good enough.

00:22:48.825 --> 00:22:51.480
Follow-up question, which you
may have answered in that very

00:22:51.480 --> 00:22:53.050
long paragraph.

00:22:53.050 --> 00:22:54.560
So let's say you've
got a chat client.

00:22:54.560 --> 00:22:58.190
And when the chat loads, you
see the top of the list to

00:22:58.190 --> 00:23:01.360
begin with-- so the least
recent messages--

00:23:01.360 --> 00:23:02.060
for a moment.

00:23:02.060 --> 00:23:03.940
And then it jumps down
to the bottom.

00:23:03.940 --> 00:23:07.210
Is there a way to avoid that
when you're displaying that

00:23:07.210 --> 00:23:08.680
chat list to begin with?

00:23:08.680 --> 00:23:11.900
So if you open up the window
and it's got the list, and

00:23:11.900 --> 00:23:14.470
then you want to scroll to the
bottom straight away when the

00:23:14.470 --> 00:23:17.140
activity is loaded.

00:23:17.140 --> 00:23:17.940
CHET HAASE: Yes.

00:23:17.940 --> 00:23:23.100
So if you go back and watch
I/O talk called A Moving

00:23:23.100 --> 00:23:26.590
Experience, where we did a
lot of animation demos, a

00:23:26.590 --> 00:23:31.020
particular trick-- or, if I
were to be more proper, I

00:23:31.020 --> 00:23:34.720
would say "technique" that you
saw in almost every one of the

00:23:34.720 --> 00:23:38.360
demos that we showed was using
Pre-draw listeners.

00:23:38.360 --> 00:23:40.350
And you can use this when
an activity launches,

00:23:40.350 --> 00:23:41.620
basically to let--

00:23:41.620 --> 00:23:43.730
when an activity launches, we're
going to do everything

00:23:43.730 --> 00:23:46.050
we need to, including layout,
and figuring out where things,

00:23:46.050 --> 00:23:48.240
and loading the resources, and
getting everything ready.

00:23:48.240 --> 00:23:50.390
And then we're going to draw
the activity, right?

00:23:50.390 --> 00:23:52.610
And when we draw that activity,
by definition,

00:23:52.610 --> 00:23:54.800
everything will be correctly
positioned the way that it

00:23:54.800 --> 00:23:56.500
needs to be.

00:23:56.500 --> 00:24:00.630
In your case, the way that it
needs to be might be with

00:24:00.630 --> 00:24:04.790
content actually moved up,
animated up or whatever.

00:24:04.790 --> 00:24:06.940
And so what you can do is
set a Pre-draw listener.

00:24:06.940 --> 00:24:09.740
So that right before we actually
draw the frame, you

00:24:09.740 --> 00:24:12.690
can go in and change some values
so that what we draw is

00:24:12.690 --> 00:24:15.260
going to be different than
what was automatically

00:24:15.260 --> 00:24:17.180
determined by the default
situation.

00:24:17.180 --> 00:24:19.400
And maybe there's a better, more
correct way to do this

00:24:19.400 --> 00:24:21.860
with layouts to actually
do this correctly.

00:24:21.860 --> 00:24:26.070
But there's an underlying
question here, which is, when

00:24:26.070 --> 00:24:29.540
is the first time that I can
actually get my hands on the

00:24:29.540 --> 00:24:31.320
bits that are going to display
on the screen?

00:24:31.320 --> 00:24:33.620
And it's that Pre-draw
Listener.

00:24:33.620 --> 00:24:36.760
So you basically get the View
Tree Observer for any view in

00:24:36.760 --> 00:24:37.680
the hierarchy.

00:24:37.680 --> 00:24:39.440
Add an On Pre-draw Listener.

00:24:39.440 --> 00:24:41.570
Put your code in there that's
going to do whatever it is--

00:24:41.570 --> 00:24:44.070
start an animation, move stuff
around, do what you

00:24:44.070 --> 00:24:45.250
need to do in there.

00:24:45.250 --> 00:24:48.210
And then remember to return
true from that so that the

00:24:48.210 --> 00:24:49.630
draw actually happens.

00:24:49.630 --> 00:24:50.240
It's a little nuance.

00:24:50.240 --> 00:24:52.850
If you use an ID and it
auto-generates the boiler

00:24:52.850 --> 00:24:53.810
plate code--

00:24:53.810 --> 00:24:56.130
I know Eclipse does this,
anyway-- it automatically says

00:24:56.130 --> 00:24:57.380
Return False.

00:24:57.380 --> 00:25:00.520
So in your Pre-draw listener
you are canceling the draw.

00:25:00.520 --> 00:25:01.020
Don't do that.

00:25:01.020 --> 00:25:01.840
RETO MEIER: Helpful.

00:25:01.840 --> 00:25:03.390
So what do you actually
get back from

00:25:03.390 --> 00:25:04.430
the Pre-draw listener?

00:25:04.430 --> 00:25:06.330
So, at that point, do you
have access to the

00:25:06.330 --> 00:25:07.390
inflated layout view?

00:25:07.390 --> 00:25:09.610
Or do you have access
to the canvas?

00:25:09.610 --> 00:25:11.055
At what level are
we looking at?

00:25:11.055 --> 00:25:12.510
CHET HAASE: You have access
to everything

00:25:12.510 --> 00:25:13.950
that's in the view hierarchy.

00:25:13.950 --> 00:25:20.670
So before you create your view
tray on Pre-draw listener, if

00:25:20.670 --> 00:25:25.020
you've gotten references to
things from the layout that

00:25:25.020 --> 00:25:27.030
you set as your content
view, then those

00:25:27.030 --> 00:25:28.290
references will be valid.

00:25:28.290 --> 00:25:30.250
And you can query the bounds of
those and figure out where

00:25:30.250 --> 00:25:31.770
things are and shift
them around.

00:25:31.770 --> 00:25:34.070
So a lot of the animations that
we showed that talking

00:25:34.070 --> 00:25:38.250
I/O consisted of figuring out
where things needed to be, and

00:25:38.250 --> 00:25:40.890
then setting initial values for
those, and then animating

00:25:40.890 --> 00:25:41.950
them into place.

00:25:41.950 --> 00:25:43.857
If you want to be views
to slide in

00:25:43.857 --> 00:25:45.530
or fade in or whatever.

00:25:45.530 --> 00:25:48.600
Because at the time when you
get that first callback,

00:25:48.600 --> 00:25:52.150
everything has its correct
bounds and position and

00:25:52.150 --> 00:25:53.260
orientation.

00:25:53.260 --> 00:25:56.030
And you can do whatever you want
with that information.

00:25:56.030 --> 00:25:56.510
RETO MEIER: All right.

00:25:56.510 --> 00:25:58.940
So it's a way to
preset things.

00:25:58.940 --> 00:26:02.150
So if you know what you've got
there is the right place for

00:26:02.150 --> 00:26:03.900
them, you can say, actually,
I want it all.

00:26:03.900 --> 00:26:05.460
When my activity launches,
I want everything

00:26:05.460 --> 00:26:06.530
to slide into place.

00:26:06.530 --> 00:26:08.630
So it'll pop or fade
or whatever else.

00:26:08.630 --> 00:26:11.480
So you Pre-can it in the
reverse direction.

00:26:11.480 --> 00:26:13.880
CHET HAASE: Now, there's a
related question that I don't

00:26:13.880 --> 00:26:14.650
really know how to answer.

00:26:14.650 --> 00:26:16.520
Which is, well, maybe the
correct thing for you to do is

00:26:16.520 --> 00:26:18.590
actually lay things
out differently

00:26:18.590 --> 00:26:20.330
and reposition them.

00:26:20.330 --> 00:26:22.763
Catching the On Pre-draw and
setting things up for an

00:26:22.763 --> 00:26:25.400
animation is a slightly
different, hackier solution,

00:26:25.400 --> 00:26:27.490
where you're not actually
setting the correct position

00:26:27.490 --> 00:26:30.010
of these things, which would
require actually setting

00:26:30.010 --> 00:26:32.810
layout params and doing
a Request Layout.

00:26:32.810 --> 00:26:34.600
And we've already done
the first Layout.

00:26:34.600 --> 00:26:37.600
So it's a little bit late for
you to then come in and say,

00:26:37.600 --> 00:26:39.850
OK, now, at this time, I'd like
to do this other thing.

00:26:39.850 --> 00:26:41.610
For that logic, you'd actually
want to do that

00:26:41.610 --> 00:26:42.420
a little bit earlier.

00:26:42.420 --> 00:26:45.010
Maybe in On Activity Created.

00:26:45.010 --> 00:26:45.580
On Created?

00:26:45.580 --> 00:26:47.800
On Create?

00:26:47.800 --> 00:26:48.390
On On On.

00:26:48.390 --> 00:26:49.270
We have a lot of On methods.

00:26:49.270 --> 00:26:50.120
RETO MEIER: That's true.

00:26:50.120 --> 00:26:50.650
We do.

00:26:50.650 --> 00:26:52.740
CHET HAASE: And at that point
you can sort of set up the

00:26:52.740 --> 00:26:54.350
layout for what you
need to be.

00:26:54.350 --> 00:26:56.940
And that will generate
a Request Layout.

00:26:56.940 --> 00:27:00.600
And that'll put things in the
correct Layout position.

00:27:00.600 --> 00:27:03.400
And maybe then you don't even
need the On Pre-draw Listener.

00:27:03.400 --> 00:27:06.500
But the On Pre-draw is a nice
trick when you actually need

00:27:06.500 --> 00:27:09.250
to figure out, let the system
do the real thing, and then

00:27:09.250 --> 00:27:11.240
tell me what's going on before
you put it on the screen.

00:27:11.240 --> 00:27:13.600
RETO MEIER: That sounds like
it's almost a case of figuring

00:27:13.600 --> 00:27:15.030
out what the most common
scenario is.

00:27:15.030 --> 00:27:17.280
So if you're going to do it
every time, then hacking into

00:27:17.280 --> 00:27:19.620
the On Pre-draw Listener
is probably overkill.

00:27:19.620 --> 00:27:22.070
You should probably just do
it in the layout somehow.

00:27:22.070 --> 00:27:26.200
Whereas, if it's a one-off or
something unusual, then that

00:27:26.200 --> 00:27:27.940
may be a better approach.

00:27:27.940 --> 00:27:29.860
CHET HAASE: I would say more
that if you're going to start

00:27:29.860 --> 00:27:34.650
hacking things and faking out
layout, that you may end up

00:27:34.650 --> 00:27:35.510
causing artifacts.

00:27:35.510 --> 00:27:37.550
Like, if you say, no, that's not
where I wanted it to be,

00:27:37.550 --> 00:27:40.000
and then you ahead and you set
the left-right-top-bottom

00:27:40.000 --> 00:27:43.910
position, regardless of where a
layout wanted to place those

00:27:43.910 --> 00:27:47.120
items, then if another layout
happens to run in the next

00:27:47.120 --> 00:27:48.550
frame, your positions would get

00:27:48.550 --> 00:27:50.070
clobbered by the real layout.

00:27:50.070 --> 00:27:52.870
So if you actually want to lay
out these things at the right

00:27:52.870 --> 00:27:55.070
place, then figure out the
right layout solution.

00:27:55.070 --> 00:27:57.350
As opposed to the more animated

00:27:57.350 --> 00:27:58.920
sliding things in situation.

00:27:58.920 --> 00:27:59.340
RETO MEIER: Right.

00:27:59.340 --> 00:28:02.930
So avoid Gotos in your
layout hacks.

00:28:02.930 --> 00:28:03.850
CHET HAASE: Go to is considered

00:28:03.850 --> 00:28:05.300
harmful it turns out.

00:28:05.300 --> 00:28:05.860
RETO MEIER: Go figure.

00:28:05.860 --> 00:28:07.670
You learn something every day.

00:28:07.670 --> 00:28:07.910
OK.

00:28:07.910 --> 00:28:11.320
So this next question, it's
about as long a paragraph as

00:28:11.320 --> 00:28:12.040
your earlier one.

00:28:12.040 --> 00:28:14.170
So bear with me while I--

00:28:14.170 --> 00:28:14.910
CHET HAASE: Once upon a time--

00:28:14.910 --> 00:28:17.910
RETO MEIER: --see if I can
distill this slightly as I

00:28:17.910 --> 00:28:19.970
read it through.

00:28:19.970 --> 00:28:21.460
So I've got someone who's
working on an app.

00:28:21.460 --> 00:28:21.790
So--

00:28:21.790 --> 00:28:23.650
sorry, this is Hannes
Dorfmann.

00:28:23.650 --> 00:28:24.490
He's working on an app.

00:28:24.490 --> 00:28:26.270
Which is a great start.

00:28:26.270 --> 00:28:27.770
Really important for us.

00:28:27.770 --> 00:28:29.910
And it's going to
animate a box--

00:28:29.910 --> 00:28:33.110
so let's say it's a Custom
Action Bar, so a box along the

00:28:33.110 --> 00:28:36.310
top of your activity--

00:28:36.310 --> 00:28:38.240
in and out while you're
scrolling.

00:28:38.240 --> 00:28:40.870
Sort of like the Google Chrome
app does with the URL box.

00:28:40.870 --> 00:28:42.200
So as you scroll, it's
going to make this

00:28:42.200 --> 00:28:45.520
box appear and disappear.

00:28:45.520 --> 00:28:49.040
But the scroll animation
contains some kind of sub

00:28:49.040 --> 00:28:49.800
animations.

00:28:49.800 --> 00:28:52.990
So his action bar should
change its height on

00:28:52.990 --> 00:28:56.250
scrolling, and also do some
additional animations with the

00:28:56.250 --> 00:28:58.870
child views, like icons
text views.

00:28:58.870 --> 00:29:01.630
So the first question is,
how does he implement a

00:29:01.630 --> 00:29:03.250
height-change animation?

00:29:03.250 --> 00:29:04.650
Is that a scale animation?

00:29:04.650 --> 00:29:09.290
It doesn't seem to be
something like that.

00:29:09.290 --> 00:29:09.840
CHET HAASE: Yeah.

00:29:09.840 --> 00:29:14.560
Changing the bounds of
views can be tricky.

00:29:14.560 --> 00:29:19.260
Because the bounds of objects,
as well as the real positions

00:29:19.260 --> 00:29:21.530
of them, are determined
by the layout.

00:29:21.530 --> 00:29:28.000
And to get or to set the real
position and dimensions of a

00:29:28.000 --> 00:29:29.990
view, you really need
to let layout run.

00:29:29.990 --> 00:29:32.750
Because only the layout,
especially the nested layout

00:29:32.750 --> 00:29:35.760
in which that view lives, is
going to be able to determine

00:29:35.760 --> 00:29:37.290
the real information
about that view.

00:29:37.290 --> 00:29:41.990
So I would say, in an ideal
world, if you want to set the

00:29:41.990 --> 00:29:44.540
size of an object or animate
the size of an object, what

00:29:44.540 --> 00:29:47.080
you do is change the layout
params, and then let the

00:29:47.080 --> 00:29:48.670
layout system figure it out.

00:29:48.670 --> 00:29:51.640
In the real world in which we
live, we have constrained

00:29:51.640 --> 00:29:54.750
devices that might just fall
over if you force them to do

00:29:54.750 --> 00:29:57.290
layout on every frame in a
really complex view hierarchy.

00:29:57.290 --> 00:29:58.730
RETO MEIER: And in fact,
that is his follow-up.

00:29:58.730 --> 00:30:00.680
Is he was like, I know
how to do this.

00:30:00.680 --> 00:30:02.630
I'm going to change the
layout params height.

00:30:02.630 --> 00:30:02.895
But--

00:30:02.895 --> 00:30:03.930
CHET HAASE: Oh, this was
the follow-on thing?

00:30:03.930 --> 00:30:05.080
RETO MEIER: This is the
follow-on, yes.

00:30:05.080 --> 00:30:07.520
And it turns out that this has
some performance implications.

00:30:07.520 --> 00:30:08.280
CHET HAASE: It does have
performance implications.

00:30:08.280 --> 00:30:10.140
RETO MEIER: In fact,
I know this.

00:30:10.140 --> 00:30:12.120
Even back in the days where
we didn't have such

00:30:12.120 --> 00:30:14.080
resource-constrained
devices, I used to

00:30:14.080 --> 00:30:16.400
write code for Windows.

00:30:16.400 --> 00:30:17.860
Big powerful machines.

00:30:17.860 --> 00:30:21.220
Almost as big CPU power as
these phones do now.

00:30:21.220 --> 00:30:24.660
And I had this really
smooth progress bar.

00:30:24.660 --> 00:30:26.660
It was a progress, but
it was indeterminate.

00:30:26.660 --> 00:30:30.070
And I have a passionate hatred
for progress bars which go to

00:30:30.070 --> 00:30:33.320
the end and then start again
from the beginning.

00:30:33.320 --> 00:30:34.500
So I built my own.

00:30:34.500 --> 00:30:34.880
And it pulsed.

00:30:34.880 --> 00:30:35.860
It went in and out.

00:30:35.860 --> 00:30:38.020
And it changed colors
and everything.

00:30:38.020 --> 00:30:39.720
Because you could do that
in the .NET campus.

00:30:39.720 --> 00:30:43.600
And so it's changed the layout
of this object which was

00:30:43.600 --> 00:30:44.900
changing colors.

00:30:44.900 --> 00:30:45.540
Turns out it's--

00:30:45.540 --> 00:30:46.970
CHET HAASE:
[MAKES CLUNKY MACHINE NOISES]

00:30:46.970 --> 00:30:48.660
RETO MEIER: Well, no,
it was beautiful.

00:30:48.660 --> 00:30:51.050
Because I just took over
the UI thread for that.

00:30:51.050 --> 00:30:52.020
Because you want to make
it nice and smooth.

00:30:52.020 --> 00:30:54.760
It turns out it decreased the
performance of the underlying

00:30:54.760 --> 00:30:58.760
activity by a factor of 10.

00:30:58.760 --> 00:30:59.940
CHET HAASE: Animations
are that important.

00:30:59.940 --> 00:31:02.220
RETO MEIER: Well, for me,
that was good enough.

00:31:02.220 --> 00:31:04.180
Because if it looks good,
it's good enough.

00:31:04.180 --> 00:31:05.480
CHET HAASE: That's right.

00:31:05.480 --> 00:31:05.950
RETO MEIER: So yes.

00:31:05.950 --> 00:31:06.490
That was his follow-up.

00:31:06.490 --> 00:31:10.330
So do you have any general
ideas, feedback there?

00:31:10.330 --> 00:31:11.240
CHET HAASE: Yeah.

00:31:11.240 --> 00:31:13.530
Again, most of my answers
are, well, it

00:31:13.530 --> 00:31:15.780
depends on your situation.

00:31:15.780 --> 00:31:18.180
In this particular case, there's
a couple of things

00:31:18.180 --> 00:31:19.060
that could work.

00:31:19.060 --> 00:31:22.400
You've already determined that
maybe scale is not the answer.

00:31:22.400 --> 00:31:24.060
And in general, it's not.

00:31:24.060 --> 00:31:26.520
Scale is really nice for a
transient effect where you're

00:31:26.520 --> 00:31:29.180
popping something out of the
screen, or you're animating it

00:31:29.180 --> 00:31:30.490
in, or you're just
giving a little

00:31:30.490 --> 00:31:31.480
bounce effect or whatever.

00:31:31.480 --> 00:31:34.160
But as soon as you start scaling
things, especially if

00:31:34.160 --> 00:31:37.620
they contain text, they tend
to look really awful.

00:31:37.620 --> 00:31:40.010
So it's really better as a
temporary effect than to

00:31:40.010 --> 00:31:42.750
actually change the size
with the scale.

00:31:42.750 --> 00:31:45.010
Especially if you're going to
make this thing taller, so

00:31:45.010 --> 00:31:46.060
you're going to scale in y.

00:31:46.060 --> 00:31:47.770
Well, that's just going to
stretch out everything

00:31:47.770 --> 00:31:48.200
vertically.

00:31:48.200 --> 00:31:51.320
It's going to really
look horrible.

00:31:51.320 --> 00:31:52.060
That's a graphics term.

00:31:52.060 --> 00:31:54.150
Horrible.

00:31:54.150 --> 00:31:57.030
So what you really want to do
is change the real bounds of

00:31:57.030 --> 00:31:57.550
the object.

00:31:57.550 --> 00:32:01.520
But then you have this problem
to solve where, well, if you

00:32:01.520 --> 00:32:03.650
animate the layout params,
that's really expensive.

00:32:03.650 --> 00:32:06.440
It's the correct solution, but
it's really expensive.

00:32:06.440 --> 00:32:09.700
What I have done in some
situations, including the

00:32:09.700 --> 00:32:12.600
layout transition class we
talked about earlier, is, you

00:32:12.600 --> 00:32:15.060
can actually animate the
bounds of an object.

00:32:15.060 --> 00:32:18.820
And you can do that by
call-in setters.

00:32:18.820 --> 00:32:21.190
Or you can set up an object
animator to basically animate

00:32:21.190 --> 00:32:23.130
left-right-top-bottom, just
as you can animate the

00:32:23.130 --> 00:32:25.350
translation properties, or the
scale, or the rotation, or

00:32:25.350 --> 00:32:26.270
anything like that.

00:32:26.270 --> 00:32:29.770
And you can combine that with
the ability to use the On

00:32:29.770 --> 00:32:32.660
Pre-draw listener, which we
talked about earlier, to

00:32:32.660 --> 00:32:35.940
basically run layouts, set the
layout params to what you want

00:32:35.940 --> 00:32:37.940
them to be.

00:32:37.940 --> 00:32:39.570
And that will cause
a Request Layout.

00:32:39.570 --> 00:32:42.340
And on the next drawing frame,
we will run layout before

00:32:42.340 --> 00:32:43.480
drawing occurs.

00:32:43.480 --> 00:32:46.290
So if you add a View Tree
Observer On Pre-draw listener,

00:32:46.290 --> 00:32:48.790
then you're going to get a call
after that next layout

00:32:48.790 --> 00:32:51.530
has run, but before we've
displayed it on the screen.

00:32:51.530 --> 00:32:53.530
And at that point, you can
start an animation--

00:32:53.530 --> 00:32:55.900
this is exactly how Layout
Transition works.

00:32:55.900 --> 00:32:57.820
You can start an animation
that animates the

00:32:57.820 --> 00:32:59.960
left-right-top-bottom bounds.

00:32:59.960 --> 00:33:03.710
And you can do so
in a way that is

00:33:03.710 --> 00:33:04.740
changing the correct thing.

00:33:04.740 --> 00:33:06.170
It's not changing the scale.

00:33:06.170 --> 00:33:09.290
But instead it's actually
changing the size of the view.

00:33:09.290 --> 00:33:12.340
Now, there's a couple of very
important nuances to this.

00:33:12.340 --> 00:33:17.490
One is that the position of
items inside of that view, or

00:33:17.490 --> 00:33:20.300
inside of that layout whose
bounds you're changing might

00:33:20.300 --> 00:33:21.260
be in the wrong place.

00:33:21.260 --> 00:33:23.140
Because you just
layout to run.

00:33:23.140 --> 00:33:26.505
Which means they may be set by
that layout to then pop to

00:33:26.505 --> 00:33:27.490
their end state.

00:33:27.490 --> 00:33:31.190
You may need to do something
with those, such as animating

00:33:31.190 --> 00:33:34.810
their relative position inside
the layout at the same time.

00:33:34.810 --> 00:33:37.490
You can also do things like
fade text out, resize the

00:33:37.490 --> 00:33:38.470
thing, fade text in.

00:33:38.470 --> 00:33:43.520
That can be compelling
or effective.

00:33:43.520 --> 00:33:46.940
Another problem that you're
going to run into is that if a

00:33:46.940 --> 00:33:51.160
real layout runs in the middle
of your animation, then you're

00:33:51.160 --> 00:33:52.950
going to have a bad day.

00:33:52.950 --> 00:33:56.320
Because the real layout
positions are the ones that

00:33:56.320 --> 00:33:59.140
you told it you wanted at the
end of the animation.

00:33:59.140 --> 00:34:01.810
So if you said, OK, I want this
thing to be this big.

00:34:01.810 --> 00:34:03.130
We're going to Call
Request Layout.

00:34:03.130 --> 00:34:03.860
Layout's going to run.

00:34:03.860 --> 00:34:05.040
You're going to have your
pre-draw listener.

00:34:05.040 --> 00:34:06.910
And you're going to say, OK,
now animate it from this

00:34:06.910 --> 00:34:09.110
smaller size up to
this larger size.

00:34:09.110 --> 00:34:11.170
If you're in the middle of
that animation and a real

00:34:11.170 --> 00:34:15.650
layout runs, it will snap very
momentarily over one frame to

00:34:15.650 --> 00:34:17.300
that real end size.

00:34:17.300 --> 00:34:18.980
And then your animation
will continue running.

00:34:18.980 --> 00:34:21.500
So you're going to see this
flicker artifact as it hops

00:34:21.500 --> 00:34:24.040
over the real values and then
continues with the animated

00:34:24.040 --> 00:34:25.590
values that you have.

00:34:25.590 --> 00:34:26.969
The work-around for this--

00:34:26.969 --> 00:34:30.030
again, which Layout Transition
uses, and which you can use in

00:34:30.030 --> 00:34:31.770
your own application--

00:34:31.770 --> 00:34:35.489
is to have a custom layout and
make sure to stub out layout

00:34:35.489 --> 00:34:38.489
calls, or On Layout calls,
during the middle of an

00:34:38.489 --> 00:34:41.000
animation, just so this artifact
doesn't happen.

00:34:41.000 --> 00:34:42.219
It's a bit of a hack.

00:34:42.219 --> 00:34:44.360
But it's really basically
a work-around for the

00:34:44.360 --> 00:34:46.340
performance situation
where you know what

00:34:46.340 --> 00:34:47.310
you're supposed to do.

00:34:47.310 --> 00:34:50.360
But you don't have the
performance to do that across

00:34:50.360 --> 00:34:52.972
all devices in all situations.

00:34:52.972 --> 00:34:54.400
RETO MEIER: Nice.

00:34:54.400 --> 00:34:55.940
CHET HAASE: How's that for
another very long paragraph?

00:34:55.940 --> 00:34:56.699
RETO MEIER: That was
pretty good.

00:34:56.699 --> 00:34:58.805
I mean, it was a long
paragraph question.

00:34:58.805 --> 00:35:00.780
So you have to match it.

00:35:00.780 --> 00:35:01.090
CHET HAASE: That's right.

00:35:01.090 --> 00:35:01.240
Yeah.

00:35:01.240 --> 00:35:01.670
Word for word.

00:35:01.670 --> 00:35:02.400
RETO MEIER: That's part of
your contract, right?

00:35:02.400 --> 00:35:04.535
However many words are in the
contract, there needs to at

00:35:04.535 --> 00:35:06.710
least be that many
in the answer.

00:35:06.710 --> 00:35:08.680
We've got a few more questions
from the G+ stream.

00:35:08.680 --> 00:35:09.370
People are shy.

00:35:09.370 --> 00:35:10.800
They don't want to join
us on the Hangout.

00:35:10.800 --> 00:35:11.260
Fair enough.

00:35:11.260 --> 00:35:13.080
By all means, keep sending
your questions in.

00:35:13.080 --> 00:35:14.350
CHET HAASE: I wouldn't either.

00:35:14.350 --> 00:35:16.000
RETO MEIER: He hates
being on camera.

00:35:16.000 --> 00:35:17.280
It's awkward.

00:35:17.280 --> 00:35:19.030
CHET HAASE: So shy.

00:35:19.030 --> 00:35:21.800
RETO MEIER: Hannes Dorfmann
asks, he's wondering how the

00:35:21.800 --> 00:35:23.870
Google Play music app
have implemented the

00:35:23.870 --> 00:35:26.550
ParallaxScrollView.

00:35:26.550 --> 00:35:28.550
Is that a translate
y animation?

00:35:28.550 --> 00:35:31.090
I mean, he can use the On Scroll
listener to detect

00:35:31.090 --> 00:35:33.790
scrolling in, and then simply
set the translate y of the

00:35:33.790 --> 00:35:35.355
view to do step-by-step
animation?

00:35:35.355 --> 00:35:37.640
Is that the right way?

00:35:37.640 --> 00:35:39.760
CHET HAASE: Is it OK if I
say I haven't a clue?

00:35:39.760 --> 00:35:41.730
I don't even know the effect
he's talking about.

00:35:41.730 --> 00:35:43.730
RETO MEIER: The parallax
scrolling

00:35:43.730 --> 00:35:46.600
in Google Play music.

00:35:46.600 --> 00:35:48.840
Just trying to think
what that would be.

00:35:48.840 --> 00:35:49.680
I'm not sure myself.

00:35:49.680 --> 00:35:51.630
You can say you don't
have a clue.

00:35:51.630 --> 00:35:52.960
CHET HAASE: I don't
have a clue.

00:35:52.960 --> 00:35:53.730
Sorry.

00:35:53.730 --> 00:35:57.510
Without picturing it, I can't
even give you a pointer to it.

00:35:57.510 --> 00:35:59.305
So no, I'll have to go back.

00:35:59.305 --> 00:36:01.720
RETO MEIER: We should get
someone to show you.

00:36:01.720 --> 00:36:04.090
I think our producer Daniel may
have a phone which he can

00:36:04.090 --> 00:36:05.520
show us on.

00:36:05.520 --> 00:36:06.767
We'll see how we go.

00:36:06.767 --> 00:36:06.937
DANIEL: Yeah.

00:36:06.937 --> 00:36:08.050
I'm going to check
[INAUDIBLE] now.

00:36:08.050 --> 00:36:08.360
RETO MEIER: All right.

00:36:08.360 --> 00:36:08.870
Awesome.

00:36:08.870 --> 00:36:11.360
In the meantime, we'll have a
look at a question from R

00:36:11.360 --> 00:36:14.850
Palan, who says, how do you
consistently animate sprites

00:36:14.850 --> 00:36:17.580
on devices with vastly different
processing power?

00:36:21.920 --> 00:36:24.430
I know that back in my day,
there was a button on the

00:36:24.430 --> 00:36:26.500
front of the computer
that said Turbo.

00:36:26.500 --> 00:36:27.980
So you could slow it down.

00:36:27.980 --> 00:36:28.440
CHET HAASE: Press the
turbo button.

00:36:28.440 --> 00:36:29.660
RETO MEIER: I know
we have that on

00:36:29.660 --> 00:36:30.350
any of the new devices.

00:36:30.350 --> 00:36:30.530
CHET HAASE: No.

00:36:30.530 --> 00:36:32.020
We started removing buttons
from the devices.

00:36:32.020 --> 00:36:33.260
I wonder if we got rid
of the turbo button.

00:36:33.260 --> 00:36:34.100
RETO MEIER: We must have done.

00:36:34.100 --> 00:36:35.630
Because I don't see
it switching

00:36:35.630 --> 00:36:37.390
between 8 and 12 gigahertz.

00:36:37.390 --> 00:36:38.050
CHET HAASE: Maybe it's
inside the back.

00:36:38.050 --> 00:36:40.232
You could take the
back cover off.

00:36:40.232 --> 00:36:41.900
RETO MEIER: Unfold one
of the processors.

00:36:41.900 --> 00:36:43.490
CHET HAASE: So one thing that
we're really good at doing,

00:36:43.490 --> 00:36:46.520
especially when we went to
hardware acceleration, where

00:36:46.520 --> 00:36:50.270
moving bits around on the screen
is much faster, is

00:36:50.270 --> 00:36:51.700
copying bitmaps around.

00:36:51.700 --> 00:36:55.460
If they're really bitmaps, and
especially if they're blended

00:36:55.460 --> 00:36:58.400
on the screen and you're doing
a lot overdraw, then things

00:36:58.400 --> 00:36:59.250
tend to get expensive.

00:36:59.250 --> 00:37:02.540
But if you're just simply
copying small sprites around,

00:37:02.540 --> 00:37:05.440
unless you have thousands of
them to copy on every single

00:37:05.440 --> 00:37:09.710
frame, you're going to get
pretty good performance.

00:37:09.710 --> 00:37:11.690
And this is at the SDK level.

00:37:11.690 --> 00:37:14.160
You're just doing a Draw Bitmap
from here to there.

00:37:14.160 --> 00:37:16.170
If you're not scaling on the
fly-- actually, scaling on the

00:37:16.170 --> 00:37:18.390
fly is even cheap on the GPU.

00:37:18.390 --> 00:37:21.240
If the bitmap is not really
huge, if you're not applying

00:37:21.240 --> 00:37:24.310
filters to it, which cause extra
processing power and may

00:37:24.310 --> 00:37:26.420
reduce some of the hardware
acceleration effects that we

00:37:26.420 --> 00:37:28.710
can get, you're going
to get pretty

00:37:28.710 --> 00:37:29.970
good performance anyway.

00:37:29.970 --> 00:37:34.580
I have seen performance suffer
when someone had a bunch of

00:37:34.580 --> 00:37:35.740
small sprites they
were animating.

00:37:35.740 --> 00:37:38.340
And by a bunch, I mean 3,000.

00:37:38.340 --> 00:37:40.620
When you get up to that level,
and you're iterating through

00:37:40.620 --> 00:37:43.350
this tiny little loop to copy
a lot of stuff around, well,

00:37:43.350 --> 00:37:47.000
the overhead of sending all
those commands down can bog

00:37:47.000 --> 00:37:47.640
down eventually.

00:37:47.640 --> 00:37:50.560
But if it's just copying sprites
around on the screen,

00:37:50.560 --> 00:37:52.340
GPU is pretty good about that.

00:37:52.340 --> 00:37:54.680
There's also tools to help
figure out whether that's

00:37:54.680 --> 00:37:56.060
really your bottleneck
or whether there's

00:37:56.060 --> 00:37:57.590
something else going on.

00:37:57.590 --> 00:38:00.450
So you should certainly look
into using Trace View, which

00:38:00.450 --> 00:38:01.960
is an excellent profiling
tool.

00:38:01.960 --> 00:38:05.240
A note about it, though, that
it does tend to skew or

00:38:05.240 --> 00:38:07.540
distort the timings of things
that are actually happening at

00:38:07.540 --> 00:38:09.530
the SDK versus the
native level.

00:38:09.530 --> 00:38:13.680
The overhead of the tool itself
tends to make the

00:38:13.680 --> 00:38:16.900
numbers seem larger for simple
things like Method calls.

00:38:16.900 --> 00:38:20.420
But it can at least give you a
relative impression of what's

00:38:20.420 --> 00:38:21.860
going on for performance.

00:38:21.860 --> 00:38:25.320
Another one is to look at the
GPU Performance, which you can

00:38:25.320 --> 00:38:27.430
enable in the developer
options.

00:38:27.430 --> 00:38:29.100
And that will spit out
some numbers when you

00:38:29.100 --> 00:38:31.620
do a dumpsys gfxinfo.

00:38:31.620 --> 00:38:33.750
And you can put those into a
spreadsheet and see where your

00:38:33.750 --> 00:38:35.990
framerate's going
at what times.

00:38:35.990 --> 00:38:38.160
And see what exactly
is contributing to

00:38:38.160 --> 00:38:39.330
this framerate problems.

00:38:39.330 --> 00:38:44.740
And you can also use the
Overdraw tool, which will use

00:38:44.740 --> 00:38:47.850
colors on the screen to show
you what's being overdrawn.

00:38:47.850 --> 00:38:50.140
Which means, yeah, maybe
copying that

00:38:50.140 --> 00:38:50.930
sprite was really cheap.

00:38:50.930 --> 00:38:52.850
But you were also copying
a window background.

00:38:52.850 --> 00:38:56.250
And then on top of that you're
copying an opaque background

00:38:56.250 --> 00:38:57.040
for the application.

00:38:57.040 --> 00:38:59.340
And then you've got list
items overlaying that.

00:38:59.340 --> 00:39:02.490
And by the time you actually got
to drawing the sprite, it

00:39:02.490 --> 00:39:04.520
was the fifth or sixth
level deep.

00:39:04.520 --> 00:39:08.130
And we simply ran out of
bandwidth in the GPU to draw

00:39:08.130 --> 00:39:10.360
that many pixels
on the screen.

00:39:10.360 --> 00:39:11.080
RETO MEIER: Great.

00:39:11.080 --> 00:39:11.240
OK.

00:39:11.240 --> 00:39:13.730
So here is the Parallax view
he's referring to.

00:39:13.730 --> 00:39:16.690
You'll see that the album art
at the top is scrolling at a

00:39:16.690 --> 00:39:20.670
different speed to the
list underneath it.

00:39:20.670 --> 00:39:21.430
CHET HAASE: OK.

00:39:21.430 --> 00:39:22.690
RETO MEIER: So I guess
the question

00:39:22.690 --> 00:39:23.740
is, is this an animation?

00:39:23.740 --> 00:39:27.020
Or is this just a simple case of
we're tracking the movement

00:39:27.020 --> 00:39:29.950
of this particular list
and modifying

00:39:29.950 --> 00:39:31.130
the position of each.

00:39:31.130 --> 00:39:31.620
CHET HAASE: I believe so.

00:39:31.620 --> 00:39:32.590
That's not an animation.

00:39:32.590 --> 00:39:34.620
They're just saying, OK, how far
did the finger move, and

00:39:34.620 --> 00:39:36.910
how far do we want to
scroll this list?

00:39:36.910 --> 00:39:39.830
Because you can scroll a list
either directly with a finger

00:39:39.830 --> 00:39:41.460
or programmatically.

00:39:41.460 --> 00:39:43.520
I would assume that they're just
doing it programmatically

00:39:43.520 --> 00:39:47.750
based on a scaled-down delta
value for the scroll position.

00:39:47.750 --> 00:39:48.270
RETO MEIER: That makes sense.

00:39:48.270 --> 00:39:49.710
It is a nice effect, though.

00:39:49.710 --> 00:39:51.210
Turns out not everything
that looks nice

00:39:51.210 --> 00:39:53.200
has to be an animation.

00:39:53.200 --> 00:39:53.740
CHET HAASE: What?

00:39:53.740 --> 00:39:55.700
RETO MEIER: It's news to me.

00:39:55.700 --> 00:39:58.240
I think we've got our last
question here from Maxim

00:39:58.240 --> 00:39:59.920
[INAUDIBLE].

00:39:59.920 --> 00:40:01.960
Unless we have any more coming
up the next few minutes.

00:40:01.960 --> 00:40:04.620
An we've, in fact, gone over our
half-hour allotment, so--

00:40:04.620 --> 00:40:05.780
CHET HAASE: No songs today.

00:40:05.780 --> 00:40:06.800
RETO MEIER: There will
be no singing.

00:40:06.800 --> 00:40:08.620
Good news for everyone.

00:40:08.620 --> 00:40:10.960
I get the impression
Maxim may have been

00:40:10.960 --> 00:40:11.810
talking to you before.

00:40:11.810 --> 00:40:15.370
Because he says he would like
to pick at Chet's mind once

00:40:15.370 --> 00:40:18.270
again on view group
animations.

00:40:18.270 --> 00:40:20.420
He'd like to know if you could
speak more about techniques

00:40:20.420 --> 00:40:23.040
that could be used to expand
view group height-revealing

00:40:23.040 --> 00:40:24.980
child elements.

00:40:24.980 --> 00:40:26.820
He's put that in quotes.

00:40:26.820 --> 00:40:28.430
Feels like either he's asked
you that before, or you've

00:40:28.430 --> 00:40:29.960
done a Dev.Byte on it.

00:40:29.960 --> 00:40:32.260
CHET HAASE: Or did he ask the
earlier one about view group

00:40:32.260 --> 00:40:32.970
animations?

00:40:32.970 --> 00:40:33.081
RETO MEIER: Oh.

00:40:33.081 --> 00:40:34.050
That's quite possible.

00:40:34.050 --> 00:40:34.850
Let's have a look.

00:40:34.850 --> 00:40:36.040
I don't recognize the name.

00:40:36.040 --> 00:40:39.510
I do try and hideously mangle
everyone's name.

00:40:39.510 --> 00:40:40.670
If so, it was uncredited.

00:40:40.670 --> 00:40:43.610
But in any case, can you speak
more about the techniques that

00:40:43.610 --> 00:40:46.110
could be used to, quote,
expand view group

00:40:46.110 --> 00:40:48.730
height-revealing
child elements?

00:40:48.730 --> 00:40:49.980
CHET HAASE: Expand your
consciousness.

00:40:52.870 --> 00:40:54.970
Maybe I'll add a little bit to
what I was saying before about

00:40:54.970 --> 00:40:57.180
actually animating
the real bounds.

00:40:57.180 --> 00:41:00.900
You can imagine a situation
where you wanted to expand a

00:41:00.900 --> 00:41:04.460
view group to include another
view that was down here.

00:41:04.460 --> 00:41:07.010
You could force the
layout to occur at

00:41:07.010 --> 00:41:07.850
the On Pre-draw Listener--

00:41:07.850 --> 00:41:09.520
I'm getting really tired
of saying that.

00:41:09.520 --> 00:41:11.220
We need smaller method
names in Android.

00:41:11.220 --> 00:41:13.110
That's really what we need so
that we can talk about them

00:41:13.110 --> 00:41:13.890
more quickly.

00:41:13.890 --> 00:41:15.860
RETO MEIER: That's what the
learning from today's episode

00:41:15.860 --> 00:41:17.740
really is, is smaller
method names.

00:41:17.740 --> 00:41:21.390
CHET HAASE: I mean, nothing
beats, there's one class name,

00:41:21.390 --> 00:41:23.250
Color Matrix Color Filter.

00:41:23.250 --> 00:41:26.200
I think if I can just work in
"color" one more time, then

00:41:26.200 --> 00:41:27.600
the world will explode.

00:41:27.600 --> 00:41:27.880
OK.

00:41:27.880 --> 00:41:29.410
So you have a view group
that's this big.

00:41:29.410 --> 00:41:30.740
It has a bunch of
views in there.

00:41:30.740 --> 00:41:32.760
And then maybe you get another
one that you want to add there

00:41:32.760 --> 00:41:34.420
when the view group
gets larger.

00:41:34.420 --> 00:41:35.870
You could set the
layout params.

00:41:35.870 --> 00:41:37.190
You could add that
view down there.

00:41:37.190 --> 00:41:40.050
Or this will expose the
view, or whatever is

00:41:40.050 --> 00:41:41.370
happening in the app.

00:41:41.370 --> 00:41:42.600
And then animate the
real bounds.

00:41:42.600 --> 00:41:46.080
And then, as I said before, once
you run layout and that

00:41:46.080 --> 00:41:48.490
view actually is down
there, that

00:41:48.490 --> 00:41:49.640
will be its real position.

00:41:49.640 --> 00:41:51.740
And that's where the layout
wants to draw it.

00:41:51.740 --> 00:41:56.100
So as you animate the bounds,
then it will simply expose the

00:41:56.100 --> 00:41:58.690
thing that's already sitting
there waiting.

00:41:58.690 --> 00:41:59.460
I don't know.

00:41:59.460 --> 00:42:01.440
That's probably too simplistic
for your situation.

00:42:01.440 --> 00:42:03.390
But I don't really know how to
answer it other than that.

00:42:03.390 --> 00:42:03.890
RETO MEIER: Without
more detail.

00:42:03.890 --> 00:42:05.690
No, I think that's
a good answer.

00:42:05.690 --> 00:42:06.020
All right.

00:42:06.020 --> 00:42:06.390
Brilliant.

00:42:06.390 --> 00:42:08.440
That looks like the last
of our questions.

00:42:08.440 --> 00:42:09.780
We're just over 30 minutes.

00:42:09.780 --> 00:42:11.930
So that's kind of perfect
for today's episode.

00:42:11.930 --> 00:42:14.770
Thank you very much, Chet, for
joining us in our first

00:42:14.770 --> 00:42:16.690
Dev.Bytes Backstage.

00:42:16.690 --> 00:42:18.350
What do you think of the
name, by the way?

00:42:18.350 --> 00:42:18.800
CHET HAASE: Dev.Bytes.

00:42:18.800 --> 00:42:19.190
Fantastic.

00:42:19.190 --> 00:42:19.580
RETO MEIER: Yeah?

00:42:19.580 --> 00:42:20.580
Working for you?

00:42:20.580 --> 00:42:21.360
I like Chet.Bytes.

00:42:21.360 --> 00:42:24.160
Because you seem to be the
only one doing them.

00:42:24.160 --> 00:42:26.290
Nonetheless, we're going to try
and bring in some other

00:42:26.290 --> 00:42:28.930
people for a similar Dev.Bytes
Backstage, even if they

00:42:28.930 --> 00:42:31.030
haven't done a great
number of Dev.Bytes

00:42:31.030 --> 00:42:31.950
for us to talk about.

00:42:31.950 --> 00:42:35.080
In fact, tomorrow, Roman and
Nick from Android Design In

00:42:35.080 --> 00:42:38.430
Action will be doing a Dev.Bytes
Backstage talking

00:42:38.430 --> 00:42:40.780
about some design elements.

00:42:40.780 --> 00:42:44.650
And in particular, practical UI
implementation for Android

00:42:44.650 --> 00:42:47.040
based on the Google I/O
talk from this year.

00:42:47.040 --> 00:42:48.150
So please--

00:42:48.150 --> 00:42:51.870
CHET HAASE: If you have other
Backstages based on teams that

00:42:51.870 --> 00:42:53.550
actually aren't doing Dev.Bytes,
you can call them

00:42:53.550 --> 00:42:54.180
Null.Bytes.

00:42:54.180 --> 00:42:54.910
RETO MEIER: Null.Bytes.

00:42:54.910 --> 00:42:56.320
Oh, I like that.

00:42:56.320 --> 00:42:57.390
I like that a lot.

00:42:57.390 --> 00:42:59.750
So stay tuned for more Dev.Bytes
Backstage, and

00:42:59.750 --> 00:43:03.100
Null.Bytes, and Null.Bytes
Backstage.

00:43:03.100 --> 00:43:06.350
In the meantime, do send us
through your questions for

00:43:06.350 --> 00:43:08.520
Nick and Roman for tomorrow's
episode.

00:43:08.520 --> 00:43:09.310
And do join us.

00:43:09.310 --> 00:43:12.060
Particularly if you're not
feeling shy and like to join

00:43:12.060 --> 00:43:12.960
us via Hangout.

00:43:12.960 --> 00:43:14.890
You can ask them in person.

00:43:14.890 --> 00:43:16.690
They're a lot less scary and
intimidating than Chet.

00:43:16.690 --> 00:43:20.610
So hopefully we'll get a few
people to join us that way.

00:43:20.610 --> 00:43:22.590
In the meantime, thank you
very much for joining us.

00:43:22.590 --> 00:43:23.850
And we'll see you next time.

00:43:28.350 --> 00:45:03.405
[MUSIC PLAYING]

