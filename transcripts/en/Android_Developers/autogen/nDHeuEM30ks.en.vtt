WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.515
 Android patterns for performance 

00:00:02.685 --> 00:00:04.618
 It's important for your app to stay up-to-date 

00:00:04.618 --> 00:00:08.200
 To provide the latest social summaries, news and weather reports for your users. 

00:00:08.200 --> 00:00:10.230
 But in fact repeated synchronization 

00:00:10.230 --> 00:00:13.210
 May be the worst thing for the performance of your application. 

00:00:13.640 --> 00:00:16.340
 My name is Colt McCannless. I say there is a fixed base 

00:00:16.340 --> 00:00:18.880
 To synchronize data on the network, 

00:00:19.160 --> 00:00:20.986
 It is not a lot of synchronization. 

00:00:20.986 --> 00:00:22.610
 This is a very widespread situation. 

00:00:22.610 --> 00:00:24.165
 Your app is active on the user 

00:00:24.165 --> 00:00:25.910
 Or maybe it's the last application you used. 

00:00:25.910 --> 00:00:28.930
 You want to make sure that you have plenty of new data available 

00:00:28.930 --> 00:00:32.720
 So they do not close your app or turn their attention elsewhere. 

00:00:32.720 --> 00:00:35.223
 So synchronize, synchronize frequently, scan connection with server, 

00:00:35.223 --> 00:00:38.160
 Request new data and download it as much as you can. 

00:00:38.670 --> 00:00:41.450
 But in fact, this is a bad idea. 

00:00:41.450 --> 00:00:43.530
 First, it destroys the user's battery. 

00:00:43.530 --> 00:00:44.720
 As we have said before, 

00:00:44.720 --> 00:00:47.780
 Communication with the network is the largest depleted battery. 

00:00:47.780 --> 00:00:51.200
 It does not exhaust the battery to initialize the slide only 

00:00:51.200 --> 00:00:54.290
 But keep it active for an additional period ranging from 20 to 60 seconds 

00:00:54.290 --> 00:00:57.735
 After you finish your order, this battery drains as well. 

00:00:58.055 --> 00:01:00.180
 In fact, things may end badly 

00:01:00.180 --> 00:01:02.830
 Each network request activates the wireless connection 

00:01:02.830 --> 00:01:04.379
 And you have to pay for it. 

00:01:04.379 --> 00:01:07.320
 This is bad. Second, think about the sheer volume of the bit 

00:01:07.320 --> 00:01:09.540
 Which your app is responsible for 

00:01:09.540 --> 00:01:10.770
 On the user's phone. 

00:01:10.770 --> 00:01:12.990
 For users with limited data bundles, 

00:01:12.990 --> 00:01:14.880
 This may be a disaster. 

00:01:14.880 --> 00:01:17.780
 I mean one application exhausts the entire monthly data transfer rate 

00:01:17.780 --> 00:01:20.100
 Just because it continues to query the server for new data? 

00:01:20.520 --> 00:01:21.570
 Not a good idea. 

00:01:21.570 --> 00:01:24.370
 This also has a negative effect because the slower the connection 

00:01:24.370 --> 00:01:26.715
 The duration of the wireless connection has been extended to help with data transfer. 

00:01:26.715 --> 00:01:29.390
 Which means that you can not afford to take a call only during a call 

00:01:29.390 --> 00:01:31.700
 But you also lose more battery power as a result. 

00:01:32.370 --> 00:01:34.320
 So the excess syncing of the limit is bad. 

00:01:34.320 --> 00:01:36.234
 But let's be realistic. 

00:01:36.234 --> 00:01:39.600
 Your app needs data to provide the user with the best experience. 

00:01:39.600 --> 00:01:42.330
 We can not stop syncing completely, do we? 

00:01:42.330 --> 00:01:43.940
 You do not really have to. 

00:01:44.370 --> 00:01:46.410
 There are some easy tips you can follow 

00:01:46.410 --> 00:01:50.832
 It will give the user the same sense of effectiveness while reducing the number of requests required. 

00:01:50.832 --> 00:01:54.980
 The key to this solution is to understand the difference between things that should happen now 

00:01:54.980 --> 00:01:56.840
 And things that can be postponed. 

00:01:56.840 --> 00:01:58.990
 For example, if the user takes action 

00:01:58.990 --> 00:02:00.976
 Asking him to update his news story right now, 

00:02:00.976 --> 00:02:03.350
 You should start this order now. 

00:02:03.350 --> 00:02:05.180
 But in the second and third types 

00:02:05.180 --> 00:02:07.730
 You can really start improving performance. 

00:02:07.730 --> 00:02:10.030
 I mean those requests that occur at regular intervals 

00:02:10.030 --> 00:02:13.600
 Which are updated but not now directly. 

00:02:13.797 --> 00:02:15.380
 If not very important now, 

00:02:15.380 --> 00:02:17.990
 You can then follow a smarter way of how to synchronize it. 

00:02:18.000 --> 00:02:22.130
 For example, you should not regularly ask the server for updates. 

00:02:22.130 --> 00:02:24.597
 All you do is waste your data transfer rate and battery 

00:02:24.597 --> 00:02:26.260
 The server tells you there is no change. 

00:02:26.680 --> 00:02:29.240
 It is better for you instead to exploit other services, 

00:02:29.240 --> 00:02:30.830
 Such as Google Cloud Messaging 

00:02:30.830 --> 00:02:33.720
 Which makes the server send a signal to the application when new content is present. 

00:02:34.050 --> 00:02:36.203
 This will reduce the battery power the phone consumes 

00:02:36.203 --> 00:02:40.250
 It will also reduce the total number of server responses that you should pay attention to. 

00:02:40.740 --> 00:02:43.509
 If you happen to have a synchronization done, 

00:02:43.509 --> 00:02:46.050
 Be sure not to do so at regular intervals. 

00:02:46.050 --> 00:02:48.000
 Remember that this is wasting resources. 

00:02:48.000 --> 00:02:51.320
 And that there will be no new content waiting for you most of the time. 

00:02:51.320 --> 00:02:54.280
 Instead, use a Undo style based on responses. 

00:02:54.620 --> 00:02:56.730
 For example, if new data is not available, 

00:02:56.730 --> 00:02:58.810
 Double the time it waits before it is realized again. 

00:02:58.810 --> 00:03:00.760
 If nothing is available the next time, 

00:03:00.760 --> 00:03:02.717
 Double the waiting time again. 

00:03:02.717 --> 00:03:04.800
 However, you can still sync data 

00:03:04.800 --> 00:03:06.880
 But will slowly move away from higher activity 

00:03:06.880 --> 00:03:10.300
 Depending on the number of times the information was updated by the server. 

00:03:10.300 --> 00:03:13.330
 Also remember that you can also adjust the frequency 

00:03:13.330 --> 00:03:14.820
 Based on user activity. 

00:03:14.820 --> 00:03:17.120
 If you can, for example, find out if a user is driving a car 

00:03:17.120 --> 00:03:19.667
 Or if the phone is in sleep mode, 

00:03:19.667 --> 00:03:22.000
 You can guess it will not need the data 

00:03:22.000 --> 00:03:23.430
 At the same rate. 

00:03:23.430 --> 00:03:24.640
 On the other side, 

00:03:24.640 --> 00:03:26.790
 If you notice that the phone was silent for eight hours 

00:03:26.790 --> 00:03:28.670
 Activity suddenly began, 

00:03:28.670 --> 00:03:30.950
 There is a high probability that the user has been awakened 

00:03:30.950 --> 00:03:33.660
 And that this is the time to start the synchronization request. 

00:03:33.660 --> 00:03:36.670
 Finally, feel free to adjust the sync frequency 

00:03:36.670 --> 00:03:38.430
 On the device status. 

00:03:38.430 --> 00:03:41.640
 Waiting for a connection or connecting to a Wi-Fi network to sync 

00:03:41.640 --> 00:03:43.190
 Helps keep the battery 

00:03:43.190 --> 00:03:45.080
 While users are moving out of the house. 

00:03:45.080 --> 00:03:48.612
 The good news is that you can update your app to use these styles 

00:03:48.612 --> 00:03:50.560
 Without having to write a huge amount of code. 

00:03:50.910 --> 00:03:54.450
 GCMNetworkManager is an API of Google Play services 

00:03:54.450 --> 00:03:56.820
 Which helps to schedule network tasks 

00:03:56.820 --> 00:03:58.660
 And manage the transmission in batches for you. 

00:03:58.660 --> 00:04:01.180
 This greatly facilitates the implementation of common patterns, 

00:04:01.190 --> 00:04:04.180
 Such as waiting to connect to the network and attempts to reconnect to the network 

00:04:04.180 --> 00:04:05.957
 And steady decline. 

00:04:05.957 --> 00:04:07.990
 Basically, all the wonderful things you need 

00:04:07.990 --> 00:04:09.804
 In one useful API interface. 

00:04:09.804 --> 00:04:12.440
 If you are wondering how to use your application for the network, 

00:04:12.820 --> 00:04:15.240
 Be sure to check out the Network Traffic Tool 

00:04:15.240 --> 00:04:16.357
 Within Android Studio. 

00:04:16.357 --> 00:04:18.960
 You'll easily see the frequency of data transfer 

00:04:18.960 --> 00:04:21.660
 And the amount of data transmitted during each connection. 

00:04:21.959 --> 00:04:23.620
 This is of course the most important thing, is not it? 

00:04:24.210 --> 00:04:25.870
 Watch some videos, good your app, 

00:04:25.870 --> 00:04:27.150
 Make your users more satisfied. 

00:04:27.150 --> 00:04:28.727
 But it is not over yet. 

00:04:28.727 --> 00:04:32.050
 Check out the rest of the Android Performance Patterns content. 

00:04:32.050 --> 00:04:34.770
 And do not forget to join the Google+ community as well. 

00:04:34.770 --> 00:04:36.910
 So keep calm, collect your code information 

00:04:36.910 --> 00:04:38.880
 Always remember that performance is important. 

