WEBVTT
Kind: captions
Language: en

00:00:02.767 --> 00:00:04.634
Yang:
Good afternoon, everyone.

00:00:04.634 --> 00:00:07.067
My name is Jun Yang.

00:00:07.067 --> 00:00:08.868
Welcome to this session.

00:00:08.868 --> 00:00:11.601
I believe our session
has the longest title

00:00:11.601 --> 00:00:13.100
in this conference--

00:00:13.100 --> 00:00:16.300
"Using Secure Data Connector
to Access Enterprise Data

00:00:16.300 --> 00:00:18.467
from Google's Cloud."

00:00:18.467 --> 00:00:21.367
Don't be intimidated
by the title.

00:00:21.367 --> 00:00:25.701
The most complicated part
of our talk is the title,

00:00:25.701 --> 00:00:28.133
which our marketing folks
struggled with

00:00:28.133 --> 00:00:33.534
for quite some time
before they settled on 11 words.

00:00:33.534 --> 00:00:35.801
So, okay.

00:00:35.801 --> 00:00:37.100
We have gone past now.

00:00:37.100 --> 00:00:40.934
So it should all be downhill
from here on.

00:00:40.934 --> 00:00:42.634
So in this session,
we'll talk about

00:00:42.634 --> 00:00:45.434
how to use
Google's Secure Data Connector

00:00:45.434 --> 00:00:49.734
to allow access
from cloud apps

00:00:49.734 --> 00:00:51.901
to your enterprise data.

00:00:51.901 --> 00:00:57.033
Now first I want to wear
the hat

00:00:57.033 --> 00:00:59.334
of an enterprise developer.

00:00:59.334 --> 00:01:00.634
I have a question.

00:01:00.634 --> 00:01:03.100
My question is...

00:01:03.100 --> 00:01:06.334
How can I access an on-premise,
relational database

00:01:06.334 --> 00:01:08.033
from Google Apps?

00:01:08.033 --> 00:01:11.167
Now, as you understand
as an enterprise developer,

00:01:11.167 --> 00:01:13.467
I have a lot of relational data

00:01:13.467 --> 00:01:15.367
in my intranet
behind the firewall.

00:01:15.367 --> 00:01:17.767
But I do want to use
Google Apps

00:01:17.767 --> 00:01:19.167
to get access to them

00:01:19.167 --> 00:01:21.367
so I can build interesting apps.

00:01:21.367 --> 00:01:26.367
Now how can I access an
on-premise, relational database

00:01:26.367 --> 00:01:28.634
from Google Apps?

00:01:28.634 --> 00:01:32.300
Now raise your hand
if you have the same question.

00:01:32.300 --> 00:01:34.033
Wow, a lot of them.

00:01:34.033 --> 00:01:36.400
You have certainly come
to the right place.

00:01:36.400 --> 00:01:40.501
For those of you
who have not raised your hand,

00:01:40.501 --> 00:01:41.834
you're dismissed now.

00:01:41.834 --> 00:01:42.868
Just kidding.

00:01:42.868 --> 00:01:45.367
You can ride along.

00:01:45.367 --> 00:01:48.901
So, first,
let's look at my data.

00:01:48.901 --> 00:01:53.133
Now here's--I've got relational
database all over the place.

00:01:53.133 --> 00:01:58.367
And here's a very typical
example of an employee table.

00:01:58.367 --> 00:02:01.234
It's got a primary key.

00:02:01.234 --> 00:02:05.467
It's got some columns--
varchar columns.

00:02:05.467 --> 00:02:10.167
Every one of the columns
is indexed for fast look-up.

00:02:10.167 --> 00:02:12.601
I have omitted some details
of the schema definition

00:02:12.601 --> 00:02:15.634
to fit this slide.

00:02:15.634 --> 00:02:18.868
Now let's switch
to our database tool

00:02:18.868 --> 00:02:22.100
to show you my data.

00:02:22.100 --> 00:02:24.667
Now it just happens
that I'm using Postgres,

00:02:24.667 --> 00:02:28.467
but, you know, any database--
any relational database

00:02:28.467 --> 00:02:29.868
will apply here.

00:02:29.868 --> 00:02:33.634
So I'm using the database tool
to connect

00:02:33.634 --> 00:02:36.567
to my database
on my intranet.

00:02:36.567 --> 00:02:39.400
And let me just browse
to my database

00:02:39.400 --> 00:02:41.801
called feedserver.

00:02:41.801 --> 00:02:44.901
And it's got a WiX schema.

00:02:44.901 --> 00:02:49.100
It's got some tables
in there.

00:02:49.100 --> 00:02:52.501
Actually, one table,
for our example,

00:02:52.501 --> 00:02:55.634
the font is a little small,

00:02:55.634 --> 00:02:58.767
but here's my schema definition

00:02:58.767 --> 00:03:03.300
in the season
and all that.

00:03:03.300 --> 00:03:06.133
So I routinely execute

00:03:06.133 --> 00:03:10.567
queries on my database,

00:03:10.567 --> 00:03:13.367
and here is one
of those queries.

00:03:13.367 --> 00:03:17.701
What it does,
it searches employees--

00:03:17.701 --> 00:03:20.534
the top 20 employees
in that database

00:03:20.534 --> 00:03:23.767
by using their first name
and last name and location.

00:03:23.767 --> 00:03:26.601
All the ampersands here
are wild cards.

00:03:26.601 --> 00:03:29.534
These are placeholders
for parameters

00:03:29.534 --> 00:03:31.634
we want to plug in later.

00:03:31.634 --> 00:03:36.434
So let's see
how that query works.

00:03:36.434 --> 00:03:39.734
So I bring up my SQL tool.

00:03:39.734 --> 00:03:43.300
And I open up

00:03:43.300 --> 00:03:47.834
the two queries
that I have written beforehand.

00:03:47.834 --> 00:03:49.467
And this is a little small.

00:03:49.467 --> 00:03:53.868
But this is the same query
that we listed on the screen.

00:03:53.868 --> 00:03:57.434
It returns the top 20 rows
in this query

00:03:57.434 --> 00:04:01.567
using first name, last name,
and location

00:04:01.567 --> 00:04:03.434
against my employee table.

00:04:03.434 --> 00:04:08.968
So let's execute that.

00:04:08.968 --> 00:04:11.067
And here we go.

00:04:11.067 --> 00:04:14.968
We've got our 20 items
returned.

00:04:17.367 --> 00:04:19.501
And, as you can see,

00:04:19.501 --> 00:04:21.033
I have a lot of data

00:04:21.033 --> 00:04:22.367
in my relational databases.

00:04:22.367 --> 00:04:26.033
I like that
because relational technology

00:04:26.033 --> 00:04:28.868
is a proven technology

00:04:28.868 --> 00:04:30.634
that works very well
for me.

00:04:30.634 --> 00:04:34.467
I like the fact that I can
execute ad hoc queries

00:04:34.467 --> 00:04:35.901
on my data

00:04:35.901 --> 00:04:38.667
and the fact
that I can just set up

00:04:38.667 --> 00:04:40.267
referential integrity rules

00:04:40.267 --> 00:04:42.934
and the database
will enforce them for me

00:04:42.934 --> 00:04:46.934
and other goodness
of relational technology.

00:04:46.934 --> 00:04:50.300
But the problem is my users
don't use database tools

00:04:50.300 --> 00:04:51.701
like I do.

00:04:51.701 --> 00:04:54.667
You know, execute SQL queries

00:04:54.667 --> 00:04:56.934
for their daily work,
they don't do that.

00:04:56.934 --> 00:05:00.300
What they want
is easy-to-use applications.

00:05:00.300 --> 00:05:03.567
And most of these apps today
are Web apps

00:05:03.567 --> 00:05:06.033
such as Google Sites,

00:05:06.033 --> 00:05:10.067
Gmail, and Spreadsheets.

00:05:10.067 --> 00:05:13.701
So we will see
how we can enable

00:05:13.701 --> 00:05:16.300
my users to be able
to access the same data

00:05:16.300 --> 00:05:18.767
from Google Apps.

00:05:23.467 --> 00:05:26.868
We'll make a proposal
for a solution.

00:05:26.868 --> 00:05:29.334
And this proposal
has two steps.

00:05:29.334 --> 00:05:33.300
First is we will turn
my relational data

00:05:33.300 --> 00:05:35.667
into a standard format--

00:05:35.667 --> 00:05:39.167
the format is called AtomPub
or GData--

00:05:39.167 --> 00:05:41.167
that Google Apps can consume

00:05:41.167 --> 00:05:46.200
using an open-source product
called Google FeedServer.

00:05:46.200 --> 00:05:49.534
And the second step
is we will enable secure access

00:05:49.534 --> 00:05:52.767
to that data
in the standard format

00:05:52.767 --> 00:05:55.634
using another
open-source product

00:05:55.634 --> 00:05:58.968
called Google
Secure Data Connector.

00:05:58.968 --> 00:06:01.000
The agent part is open-source.

00:06:01.000 --> 00:06:05.400
And a little bit of word
about AtomPub and GData.

00:06:05.400 --> 00:06:11.000
AtomPub is an open standard
for data format

00:06:11.000 --> 00:06:14.667
and also RESTful APIs
for the other access.

00:06:14.667 --> 00:06:18.701
And GData is Google's
implementation of that standard.

00:06:18.701 --> 00:06:22.033
And that is supported
by many Google apps.

00:06:22.033 --> 00:06:25.868
And there are client libraries
in various languages

00:06:25.868 --> 00:06:31.234
such as Java, JavaScript,
PHP, .NET,

00:06:31.234 --> 00:06:34.000
Objective-C, to name a few.

00:06:34.000 --> 00:06:36.267
And we will use
those client libraries

00:06:36.267 --> 00:06:40.901
in our demos today.

00:06:40.901 --> 00:06:44.334
So we have not invented
any new format here.

00:06:44.334 --> 00:06:49.234
We're just using
an existing standard.

00:06:49.234 --> 00:06:53.734
Now here is the architecture
of our solution.

00:06:53.734 --> 00:06:56.767
At the bottom,
I have my relational database

00:06:56.767 --> 00:06:59.534
inside my firewall.

00:06:59.534 --> 00:07:02.601
And on the top,
I have cloud apps

00:07:02.601 --> 00:07:05.534
in different forms
as gadgets,

00:07:05.534 --> 00:07:07.667
as App Engine apps,

00:07:07.667 --> 00:07:09.300
as Spreadsheets,

00:07:09.300 --> 00:07:12.634
that I want my users
to be able to use

00:07:12.634 --> 00:07:14.467
against my own data.

00:07:14.467 --> 00:07:16.267
In the middle,
we can see the bridge

00:07:16.267 --> 00:07:17.701
between the two.

00:07:17.701 --> 00:07:19.801
The bridge consists
of two parts.

00:07:19.801 --> 00:07:21.334
One is FeedServer.

00:07:21.334 --> 00:07:24.734
That translates a relational
data into a standard format

00:07:24.734 --> 00:07:26.934
like we said before.

00:07:26.934 --> 00:07:29.501
And the second
is Secure Data Connector Agent

00:07:29.501 --> 00:07:32.334
that makes that data available

00:07:32.334 --> 00:07:35.901
to Google Apps securely,

00:07:35.901 --> 00:07:39.868
to lift up my data
into the clouds, so to speak.

00:07:39.868 --> 00:07:43.901
Now first let's install
FeedServer.

00:07:43.901 --> 00:07:45.868
And this step I have done

00:07:45.868 --> 00:07:47.901
for our demo.

00:07:47.901 --> 00:07:49.234
But on the other hand,

00:07:49.234 --> 00:07:51.033
it's actually pretty simple.

00:07:51.033 --> 00:07:52.901
You just go to this site,

00:07:52.901 --> 00:07:56.934
and the documentation tells you
how to download the code,

00:07:56.934 --> 00:08:00.100
compile it, configure it,
and run it.

00:08:00.100 --> 00:08:02.234
And we'll show you
how we have configured it

00:08:02.234 --> 00:08:07.100
in the next slide.

00:08:07.100 --> 00:08:08.801
Here's how
we have configured it.

00:08:08.801 --> 00:08:11.501
First of all,
to connect to my database,

00:08:11.501 --> 00:08:14.968
I need a database role account.

00:08:14.968 --> 00:08:19.934
So in my dbConfig.properties
file, I specify that.

00:08:19.934 --> 00:08:24.234
I specify which JDBC driver
to use.

00:08:24.234 --> 00:08:28.434
By the way, FeedServer uses
a JDBC adaptor

00:08:28.434 --> 00:08:31.634
to do the translation
between relational data

00:08:31.634 --> 00:08:34.167
or to do the translation
between JDBC,

00:08:34.167 --> 00:08:38.167
which is the standard
Java Database Access API,

00:08:38.167 --> 00:08:39.934
and AtomPub.

00:08:39.934 --> 00:08:44.634
So we use that JDBC adaptor
in FeedServer,

00:08:44.634 --> 00:08:46.067
and here's how we configure it.

00:08:46.067 --> 00:08:48.868
We specify which JDBC driver
to use--

00:08:48.868 --> 00:08:52.100
in this case, certainly,
Postgres, a JDBC driver--

00:08:52.100 --> 00:08:53.901
and which database
to connect to.

00:08:53.901 --> 00:08:58.300
The database is on mydb:--
you know, that port,

00:08:58.300 --> 00:09:00.801
the database's feed server
called FeedServer.

00:09:00.801 --> 00:09:03.000
And the database role account
is called FeedServer

00:09:03.000 --> 00:09:04.801
and the password.

00:09:04.801 --> 00:09:09.067
Um, and also connection pool
parameters I have omitted

00:09:09.067 --> 00:09:11.767
for the whole thing
to fit in the slide.

00:09:11.767 --> 00:09:16.434
And you have full control
of connection pool parameters.

00:09:16.434 --> 00:09:19.100
So as you can see,

00:09:19.100 --> 00:09:22.601
that as a DBA--

00:09:22.601 --> 00:09:27.167
My DBAs can create role accounts
for FeedServer access,

00:09:27.167 --> 00:09:32.868
they can limit the privileges
of these role accounts

00:09:32.868 --> 00:09:36.901
and also create different role
accounts for different feeds.

00:09:36.901 --> 00:09:40.367
So DBAs still have full control
of what access

00:09:40.367 --> 00:09:46.100
to give to which part
of FeedServer.

00:09:46.100 --> 00:09:47.467
Next,

00:09:47.467 --> 00:09:53.033
um, need to transform
my request, the URL request,

00:09:53.033 --> 00:09:54.367
into a SQL query.

00:09:54.367 --> 00:09:56.467
Right?
This is what we want to do.

00:09:56.467 --> 00:09:59.300
So on the top is the URL:

00:09:59.300 --> 00:10:04.767
/resource/employeeSearch.

00:10:04.767 --> 00:10:09.667
And with two URL parameters:
One is name. One is location.

00:10:09.667 --> 00:10:14.067
So at the bottom
is the definition

00:10:14.067 --> 00:10:16.167
of that transformation
from the request

00:10:16.167 --> 00:10:17.400
to a SQL query.

00:10:17.400 --> 00:10:19.634
As you can see here,
the select query

00:10:19.634 --> 00:10:22.701
is what we executed before.

00:10:22.701 --> 00:10:27.367
And instead
of those % wild cards in there,

00:10:27.367 --> 00:10:31.100
I have put #name# in there,

00:10:31.100 --> 00:10:36.234
so that I can pass these
parameters from the URL into it.

00:10:36.234 --> 00:10:40.367
So for--the red ones
are basically defining

00:10:40.367 --> 00:10:43.033
the mapping
between the URL resource--

00:10:43.033 --> 00:10:46.234
resource pointed to
by the URL--

00:10:46.234 --> 00:10:51.601
and a SQL query,
so employeeSearch maps

00:10:51.601 --> 00:10:54.434
to employeeSearch.xml
configuration file.

00:10:54.434 --> 00:10:57.534
And the blue ones
are parameter mappings,

00:10:57.534 --> 00:11:02.100
so the name John
will be passed

00:11:02.100 --> 00:11:05.534
into #name#
at runtime by FeedServer

00:11:05.534 --> 00:11:07.467
to be executed
on the database.

00:11:12.300 --> 00:11:16.901
And next, now that the query
has been executed

00:11:16.901 --> 00:11:18.934
on the database, we needed
to transform

00:11:18.934 --> 00:11:22.601
the results set back
to an Atom response.

00:11:22.601 --> 00:11:26.033
And here's how we do it.

00:11:26.033 --> 00:11:31.767
All those orange ones
are result set column names.

00:11:31.767 --> 00:11:34.300
So lastname, firstname,
you know, all lowercase,

00:11:34.300 --> 00:11:39.467
these are database column names
returned by my SQL query.

00:11:39.467 --> 00:11:42.834
And the blue ones
are AtomPub property names.

00:11:42.834 --> 00:11:44.634
So here I do the mapping.

00:11:44.634 --> 00:11:47.534
Although I'm only changing
the capitalization,

00:11:47.534 --> 00:11:50.434
in reality you can do whatever
kind of mapping you want.

00:11:50.434 --> 00:11:55.701
You can change "firstname"
to "givenname" or whatever.

00:11:55.701 --> 00:11:59.934
And the green...

00:11:59.934 --> 00:12:01.000
is a HashMap.

00:12:01.000 --> 00:12:02.934
It's a generic data type

00:12:02.934 --> 00:12:05.367
that we use to store
the result set

00:12:05.367 --> 00:12:08.367
so that we don't need
to do any programming

00:12:08.367 --> 00:12:10.701
on the server
for this demo

00:12:10.701 --> 00:12:12.434
to support this kind of--

00:12:12.434 --> 00:12:17.901
any kind of queries.

00:12:17.901 --> 00:12:20.601
Now that we have configured
our FeedServer,

00:12:20.601 --> 00:12:23.400
we are ready
to test it.

00:12:23.400 --> 00:12:25.267
Now we run this query

00:12:25.267 --> 00:12:29.567
against--that curl is basically
a command line HTTP client

00:12:29.567 --> 00:12:32.734
that allows us
to exercise

00:12:32.734 --> 00:12:35.701
our FeedServer.

00:12:35.701 --> 00:12:40.767
I have already started
FeedServer

00:12:40.767 --> 00:12:43.934
on my machine

00:12:43.934 --> 00:12:45.100
in my intranet.

00:12:45.100 --> 00:12:48.734
Now let's do that query.

00:12:48.734 --> 00:12:50.667
So let's just copy that.

00:12:57.100 --> 00:12:58.100
And execute it here.

00:12:58.100 --> 00:13:00.501
It gives us a bunch
of XML.

00:13:00.501 --> 00:13:04.834
Wow. We cannot really
easily discern that,

00:13:04.834 --> 00:13:07.334
so I have loaded that
into a file

00:13:07.334 --> 00:13:11.234
for us to browse
in a browser.

00:13:11.234 --> 00:13:13.434
So let's enlarge this
a little bit.

00:13:13.434 --> 00:13:18.367
So that says it's a query
against this URL.

00:13:20.234 --> 00:13:22.767
And it returns 20 entries there.

00:13:22.767 --> 00:13:26.767
Top entry is this.

00:13:26.767 --> 00:13:31.634
As you can see,
Atom property names

00:13:31.634 --> 00:13:33.234
with capitalization
in the middle,

00:13:33.234 --> 00:13:36.367
CamelCase...

00:13:36.367 --> 00:13:41.000
or what we define for
transforming the results set

00:13:41.000 --> 00:13:42.868
back to Atom properties.

00:13:42.868 --> 00:13:46.801
And in here,
the top entry returned

00:13:46.801 --> 00:13:50.467
is somebody
called Phyllis Aaron.

00:13:50.467 --> 00:13:54.300
And if we switch back
to the database tool,

00:13:54.300 --> 00:13:57.901
we can see
that Phyllis Aaron is, indeed,

00:13:57.901 --> 00:14:01.701
the number one row
in there.

00:14:01.701 --> 00:14:03.367
Okay.

00:14:03.367 --> 00:14:06.834
So here we have configured--

00:14:06.834 --> 00:14:10.367
installed and configured
and run FeedServer,

00:14:10.367 --> 00:14:13.334
and we are halfway there.

00:14:13.334 --> 00:14:16.367
Now that we have the data
in the standard format,

00:14:16.367 --> 00:14:17.767
we still need
to make the data

00:14:17.767 --> 00:14:19.067
available to Google Apps.

00:14:19.067 --> 00:14:20.467
Now how do we do that?

00:14:20.467 --> 00:14:23.367
Enters Secure Data Connector.

00:14:23.367 --> 00:14:27.968
Now how we install that
is we go to this site,

00:14:27.968 --> 00:14:31.467
and we follow
the simple instruction there

00:14:31.467 --> 00:14:32.834
and install it,

00:14:32.834 --> 00:14:36.367
which I have done, obviously,
for this demo.

00:14:36.367 --> 00:14:39.434
And what we do next

00:14:39.434 --> 00:14:42.501
is I need to enable
that feature

00:14:42.501 --> 00:14:44.300
in my Google Apps domain.

00:14:44.300 --> 00:14:47.801
So my test domain
is called joonix.net.

00:14:47.801 --> 00:14:49.834
As an administrator
of that domain,

00:14:49.834 --> 00:14:53.100
I go to this site,
Google Apps Control Panel,

00:14:53.100 --> 00:14:55.467
and I click on this link,

00:14:55.467 --> 00:14:59.000
"Activate and configure
Secure Data Connector"

00:14:59.000 --> 00:15:03.267
to allow this feature
to be usable.

00:15:03.267 --> 00:15:05.901
So this is one
of the examples

00:15:05.901 --> 00:15:07.267
of multiple control points

00:15:07.267 --> 00:15:09.868
that we allow you
to have your control.

00:15:09.868 --> 00:15:13.033
Basically, you need
to allow that.

00:15:13.033 --> 00:15:17.400
You need to configure
FeedServer,

00:15:17.400 --> 00:15:19.868
configure SDCs
and different access rules

00:15:19.868 --> 00:15:23.501
to allow your users
in the cloud

00:15:23.501 --> 00:15:27.434
to access your data.

00:15:27.434 --> 00:15:30.067
And the next
is an access control rule.

00:15:30.067 --> 00:15:33.734
So this is one simple rule

00:15:33.734 --> 00:15:37.033
for the Secure Data Connector
Agent.

00:15:37.033 --> 00:15:41.868
What it says is
for the user jyang@joonix.net

00:15:41.868 --> 00:15:45.000
from the cloud,

00:15:45.000 --> 00:15:48.400
only this URL,
which is a host,

00:15:48.400 --> 00:15:52.133
palmtree.corp.joonix.net:8080,

00:15:52.133 --> 00:15:54.000
is allowed

00:15:54.000 --> 00:15:55.534
for AppEngine app

00:15:55.534 --> 00:16:01.033
called java-sdc-io.

00:16:01.033 --> 00:16:02.400
So that limits by user,

00:16:02.400 --> 00:16:07.300
by app, and by URL patterns.

00:16:07.300 --> 00:16:10.901
And similarly we can do this
to allow access

00:16:10.901 --> 00:16:12.767
from gadgets
and Spreadsheets,

00:16:12.767 --> 00:16:17.767
which I have done
for this demo.

00:16:17.767 --> 00:16:21.701
Now Secure Data Connector
is configured.

00:16:21.701 --> 00:16:24.734
Now we can run that
with that first command.

00:16:24.734 --> 00:16:26.567
And, as you can imagine,

00:16:26.567 --> 00:16:29.100
I have already run that.

00:16:29.100 --> 00:16:31.467
And, let me see.

00:16:31.467 --> 00:16:35.501
In the second command...

00:16:35.501 --> 00:16:40.901
second command shows--
allows us to watch

00:16:40.901 --> 00:16:44.534
the log of SDCs.

00:16:44.534 --> 00:16:47.300
You can watch the traffic
between Google and SDC

00:16:47.300 --> 00:16:49.834
and see who's accessing
which resource.

00:16:49.834 --> 00:16:51.334
So we'll run that.

00:16:51.334 --> 00:16:52.567
And later on
during the demo,

00:16:52.567 --> 00:16:57.901
we'll point back
to here

00:16:57.901 --> 00:17:01.934
to point out interesting things

00:17:01.934 --> 00:17:03.434
in the log.

00:17:03.434 --> 00:17:05.067
Okay.

00:17:05.067 --> 00:17:06.968
So we're just watching
the log,

00:17:06.968 --> 00:17:09.701
and we'll switch back
to here later.

00:17:09.701 --> 00:17:15.300
Now we have configured
both FeedServer

00:17:15.300 --> 00:17:20.501
and Secure Data Connector.

00:17:20.501 --> 00:17:22.133
As you can see,

00:17:22.133 --> 00:17:24.667
we haven't written
one line of code so far.

00:17:24.667 --> 00:17:26.267
All right.

00:17:26.267 --> 00:17:30.601
Um, actually, in this demo,
we will not be writing

00:17:30.601 --> 00:17:32.934
any server-side code.

00:17:32.934 --> 00:17:37.968
The next is we'll write
some client-side code

00:17:37.968 --> 00:17:41.767
to use the data, turn it
into the standard format,

00:17:41.767 --> 00:17:43.067
and made available
to Google Apps.

00:17:43.067 --> 00:17:48.667
So, first,
let's write a gadget.

00:17:48.667 --> 00:17:53.734
Now here's the main code
in that gadget.

00:17:53.734 --> 00:17:55.801
It's a search function

00:17:55.801 --> 00:17:59.968
that takes a name, a location,
and a continuation function,

00:17:59.968 --> 00:18:02.834
or a handler of data,

00:18:02.834 --> 00:18:07.400
and executes the request
to my data.

00:18:07.400 --> 00:18:10.400
As you notice that--

00:18:10.400 --> 00:18:14.400
the host name and port pattern

00:18:14.400 --> 00:18:18.200
is what I enabled
in my SDC access control rule.

00:18:18.200 --> 00:18:19.501
Right?

00:18:19.501 --> 00:18:22.701
And the red is still the same
as before.

00:18:22.701 --> 00:18:27.567
It defines the mapping
between a URL resource

00:18:27.567 --> 00:18:32.467
called Employee Search
which SQL query to execute

00:18:32.467 --> 00:18:34.400
on FeedServer.

00:18:34.400 --> 00:18:36.667
And the blues
are the same.

00:18:36.667 --> 00:18:39.701
Those are parameters
on my URL

00:18:39.701 --> 00:18:43.367
that will eventually be plugged
into my SQL query

00:18:43.367 --> 00:18:45.133
to execute.

00:18:45.133 --> 00:18:47.601
And the green ones...

00:18:47.601 --> 00:18:52.968
the green parameters instruct
Google to route this request

00:18:52.968 --> 00:18:55.200
through SDC
to the FeedServer

00:18:55.200 --> 00:18:58.400
that runs in my intranet.

00:18:58.400 --> 00:19:01.801
And also SIGNED--
well, that specified

00:19:01.801 --> 00:19:04.067
by ENABLE_PRIVATE_NETWORK.

00:19:04.067 --> 00:19:09.334
And also SIGNED says encrypt
the authentication information

00:19:09.334 --> 00:19:11.801
and send that through SDC
to FeedServer

00:19:11.801 --> 00:19:13.868
so that FeedServer
can decrypt that

00:19:13.868 --> 00:19:18.067
and know which user has come
to request the resource.

00:19:18.067 --> 00:19:22.300
So the flow goes roughly--
the user would log in

00:19:22.300 --> 00:19:24.767
to, for example, Google Sites,

00:19:24.767 --> 00:19:27.634
and the log-in can be integrated
with your LDAP

00:19:27.634 --> 00:19:30.501
through sample integration

00:19:30.501 --> 00:19:32.167
for single sign-on.

00:19:32.167 --> 00:19:35.701
So the user will use
exactly the same identity

00:19:35.701 --> 00:19:40.934
as if
inside your corporate network

00:19:40.934 --> 00:19:42.701
to log-in to sites

00:19:42.701 --> 00:19:47.000
and then go to this gadget
we'll demo in a bit.

00:19:47.000 --> 00:19:50.801
And the authentication
information will be encrypted

00:19:50.801 --> 00:19:54.367
and sent through SDC

00:19:54.367 --> 00:19:59.000
eventually to FeedServer,
and FeedServer will decode that

00:19:59.000 --> 00:20:02.200
and know which user has come
to access the resource.

00:20:02.200 --> 00:20:06.367
And then you can enforce
more ACL rules

00:20:06.367 --> 00:20:07.968
at that point.

00:20:07.968 --> 00:20:11.501
So that's roughly--
roughly the flow.

00:20:11.501 --> 00:20:14.067
And then the rest
of the function,

00:20:14.067 --> 00:20:15.400
it's very simple.

00:20:15.400 --> 00:20:18.734
It basically creates
a service object,

00:20:18.734 --> 00:20:20.601
it sets some parameters

00:20:20.601 --> 00:20:24.868
on the service object,

00:20:24.868 --> 00:20:27.501
and then it does a getFeed
on the service object.

00:20:27.501 --> 00:20:29.567
And then it uses
that continuation function

00:20:29.567 --> 00:20:32.434
to handle the list
of employees returned

00:20:32.434 --> 00:20:36.133
as response.feed.entry.

00:20:36.133 --> 00:20:40.734
It's an array
of employee objects.

00:20:40.734 --> 00:20:43.334
Now we'll see how well it works.

00:20:43.334 --> 00:20:46.033
Okay, let's switch to the demo.

00:20:46.033 --> 00:20:51.167
Okay, here's my gadget.

00:20:51.167 --> 00:20:52.601
I have already logged in

00:20:52.601 --> 00:20:55.701
as jyang@joonix.net.

00:20:55.701 --> 00:21:00.834
Now let's do a search.

00:21:00.834 --> 00:21:01.901
That's pretty good.

00:21:01.901 --> 00:21:03.501
That's pretty fast.

00:21:03.501 --> 00:21:06.868
As you can see
that the top row there

00:21:06.868 --> 00:21:09.367
is Phyllis Aaron from sales.

00:21:09.367 --> 00:21:11.767
And she's in Building 2

00:21:11.767 --> 00:21:15.734
in the San Francisco office.

00:21:15.734 --> 00:21:18.200
Just for the fun of it,

00:21:18.200 --> 00:21:19.834
let's switch
to the database tool,

00:21:19.834 --> 00:21:23.734
and then let's say
Phyllis has just moved

00:21:23.734 --> 00:21:24.767
to the Chicago office.

00:21:24.767 --> 00:21:28.968
Let's do an update here.

00:21:28.968 --> 00:21:33.167
And if we do the search again...

00:21:37.734 --> 00:21:42.167
you can see Phyllis Aaron
on the top

00:21:42.167 --> 00:21:44.601
has moved to the Chicago office.

00:21:44.601 --> 00:21:48.801
And notice how fast it is.

00:21:48.801 --> 00:21:52.033
This request goes
from the browser

00:21:52.033 --> 00:21:55.334
to Google
to SDC server

00:21:55.334 --> 00:21:59.067
to SDC agent that we installed
and run in the intranet

00:21:59.067 --> 00:22:02.334
and then to FeedServer
running on intranet

00:22:02.334 --> 00:22:04.367
and to my database
running on intranet

00:22:04.367 --> 00:22:08.334
and all the way back
in under a second.

00:22:08.334 --> 00:22:10.467
Okay, so next
let's try some other queries

00:22:10.467 --> 00:22:13.234
like, let's say, let's find
all the Johns

00:22:13.234 --> 00:22:14.534
in the company.

00:22:14.534 --> 00:22:17.033
Now here are the top 20 Johns
in the company.

00:22:17.033 --> 00:22:21.200
Now let's say it's the
top 20 Johnsons in the company.

00:22:21.200 --> 00:22:22.901
How about those Johnsons

00:22:22.901 --> 00:22:25.367
in Mountain View office?

00:22:29.767 --> 00:22:31.934
Well, still pretty fast.

00:22:31.934 --> 00:22:36.267
So that works pretty well.

00:22:36.267 --> 00:22:39.667
Next, let's see

00:22:39.667 --> 00:22:41.267
the App Engine version.

00:22:46.334 --> 00:22:48.534
Now for the App Engine version,
first, what we'll do

00:22:48.534 --> 00:22:53.767
is we define a JavaBean
called Employee

00:22:53.767 --> 00:22:55.467
to hold those properties.

00:22:55.467 --> 00:22:58.467
The first property--
I have only included

00:22:58.467 --> 00:23:00.634
first property lastName in here.

00:23:00.634 --> 00:23:02.667
But the other properties
you can imagine

00:23:02.667 --> 00:23:04.801
are defined very similarly--

00:23:04.801 --> 00:23:06.801
firstName, location,
officePhone,

00:23:06.801 --> 00:23:08.100
and things like that

00:23:08.100 --> 00:23:13.067
mapping to columns--
Atom properties--

00:23:13.067 --> 00:23:17.100
mapping to Atom properties
that I have defined.

00:23:17.100 --> 00:23:20.200
And at runtime,
our client library turns

00:23:20.200 --> 00:23:22.968
those Atom properties
into properties on your Bean

00:23:22.968 --> 00:23:25.767
automatically.

00:23:25.767 --> 00:23:28.667
The next code snippet
is what I do

00:23:28.667 --> 00:23:32.234
in Java AppEngine
to issue that request

00:23:32.234 --> 00:23:34.100
to get the list of employees.

00:23:34.100 --> 00:23:38.167
As you can see this is somewhat
similar to the JavaScript code.

00:23:38.167 --> 00:23:39.801
What I do here
is I create

00:23:39.801 --> 00:23:41.133
a service object first,

00:23:41.133 --> 00:23:45.567
then I set some parameters
on the service object.

00:23:45.567 --> 00:23:47.133
In this case,
the green parameters

00:23:47.133 --> 00:23:51.067
instructs Google
to use_intranet

00:23:51.067 --> 00:23:55.367
to route the request
to SDC

00:23:55.367 --> 00:23:56.767
and then eventually
to FeedServer

00:23:56.767 --> 00:23:58.434
and to our database.

00:23:58.434 --> 00:24:02.367
As you'll notice,
here the URL is the same

00:24:02.367 --> 00:24:03.767
as before.

00:24:03.767 --> 00:24:06.934
And the resource that we access
the same

00:24:06.934 --> 00:24:11.567
would pass the parameters' name
and location similarly.

00:24:11.567 --> 00:24:14.167
And even better
than the JavaScript version,

00:24:14.167 --> 00:24:16.334
we get a list
of Employee back.

00:24:16.334 --> 00:24:17.801
Employee is my data type.

00:24:17.801 --> 00:24:20.801
And I get my data type back
correctly.

00:24:20.801 --> 00:24:23.267
So that's pretty easy, right?

00:24:23.267 --> 00:24:26.968
Let's see how it works
in the demo.

00:24:26.968 --> 00:24:30.234
Now here's my...

00:24:30.234 --> 00:24:33.367
App Engine app
running at, as you'll notice--

00:24:33.367 --> 00:24:37.167
it's a little small,
but java-sdc-io.

00:24:37.167 --> 00:24:40.000
That's the App Engine app
that we allowed

00:24:40.000 --> 00:24:41.901
in our access control rule,
right?

00:24:41.901 --> 00:24:43.434
.appspot.com.

00:24:43.434 --> 00:24:45.968
So let's execute our query here.

00:24:45.968 --> 00:24:47.901
Say search for top 20 employees
here.

00:24:52.767 --> 00:24:56.868
Well, this time the performance
is not very consistent.

00:24:56.868 --> 00:24:58.501
Let's see.

00:24:58.501 --> 00:25:03.868
Let's try again.

00:25:03.868 --> 00:25:04.901
This time it's faster.

00:25:04.901 --> 00:25:07.234
Okay, so all the queries
are not cached.

00:25:07.234 --> 00:25:11.734
So again the top one
is Phyllis Aaron.

00:25:11.734 --> 00:25:14.834
Okay, so I can search
for other people

00:25:14.834 --> 00:25:17.000
like before.

00:25:17.000 --> 00:25:19.901
All the Johns.

00:25:19.901 --> 00:25:21.934
And it's pretty fast.

00:25:21.934 --> 00:25:23.601
We'll do Johnsons.

00:25:23.601 --> 00:25:25.000
Yeah, okay.

00:25:25.000 --> 00:25:26.934
So that works pretty well too.

00:25:26.934 --> 00:25:29.801
Now we have written
some client-side code, right?

00:25:29.801 --> 00:25:32.701
Java and JavaScript
to enable access

00:25:32.701 --> 00:25:33.834
to my employee table.

00:25:33.834 --> 00:25:37.467
Can we make that
even simpler?

00:25:37.467 --> 00:25:40.400
I guess the answer
is yes, we can.

00:25:40.400 --> 00:25:43.367
So next let me see
how I can make that

00:25:43.367 --> 00:25:47.133
even simpler
by going to, say,

00:25:47.133 --> 00:25:49.133
spreadsheet.

00:25:49.133 --> 00:25:50.934
This is a blank sheet.

00:25:50.934 --> 00:25:55.834
What we plan to do
is we plan to put our name here,

00:25:55.834 --> 00:25:58.601
the name to search for
in B1,

00:25:58.601 --> 00:26:02.434
and our location to search for--

00:26:02.434 --> 00:26:04.033
I can spell that--

00:26:04.033 --> 00:26:05.901
in B2.

00:26:05.901 --> 00:26:09.033
And then construct that URL,
and then access the URL,

00:26:09.033 --> 00:26:11.767
and display the data
right in my sheet.

00:26:11.767 --> 00:26:13.133
That's our plan.

00:26:13.133 --> 00:26:14.567
Okay.

00:26:14.567 --> 00:26:18.400
So here are two formula
that I'm going to use.

00:26:18.400 --> 00:26:22.667
One is CONCATENATE the string.

00:26:22.667 --> 00:26:26.067
Plus B1 is where we will store
the value of the name

00:26:26.067 --> 00:26:29.167
and B2 where we will store
the value of the location

00:26:29.167 --> 00:26:31.734
into this access URL
that we want to use

00:26:31.734 --> 00:26:34.767
to execute
against our data source,

00:26:34.767 --> 00:26:36.968
FeedServer, basically.

00:26:36.968 --> 00:26:41.200
As you can see, blue,
you know, other parameters.

00:26:41.200 --> 00:26:45.367
And the number here
is a cache buster.

00:26:45.367 --> 00:26:50.033
Basically, we cache data
for a certain amount of time,

00:26:50.033 --> 00:26:52.300
but for this demo
to work live, right,

00:26:52.300 --> 00:26:55.634
when I change data,
I want the change

00:26:55.634 --> 00:26:58.067
to be reflected on the UI
immediately.

00:26:58.067 --> 00:27:00.200
We can put in a random number
to indicate this

00:27:00.200 --> 00:27:02.667
is a new request
every time.

00:27:02.667 --> 00:27:04.934
And the second formula
I'm going to use

00:27:04.934 --> 00:27:08.133
is importXML.

00:27:08.133 --> 00:27:13.267
It uses the URL constructed
in C1

00:27:13.267 --> 00:27:14.834
and does that request

00:27:14.834 --> 00:27:18.801
and then says, okay, display all
the data elements called entity.

00:27:18.801 --> 00:27:24.000
And entity is a generic term
for all the rows returned

00:27:24.000 --> 00:27:25.200
in my database.

00:27:25.200 --> 00:27:26.901
So every entity is an employee,
basically,

00:27:26.901 --> 00:27:28.400
in our case.

00:27:28.400 --> 00:27:30.267
So just gonna do that.

00:27:30.267 --> 00:27:34.200
So let me just copy
the first formula...

00:27:34.200 --> 00:27:39.767
and then plug that
into my spreadsheet.

00:27:39.767 --> 00:27:42.200
Okay.

00:27:42.200 --> 00:27:46.167
Now I'll plug in
the second formula...

00:27:50.968 --> 00:27:53.901
into this.

00:28:01.133 --> 00:28:04.067
Let's see if there's an error.

00:28:09.200 --> 00:28:11.901
A1, A2.

00:28:11.901 --> 00:28:13.467
No, no, no.
B1, B2.

00:28:13.467 --> 00:28:14.801
They're the value.

00:28:14.801 --> 00:28:16.868
I'm going to--yeah, sorry.

00:28:16.868 --> 00:28:19.400
Okay.

00:28:19.400 --> 00:28:20.400
All right.

00:28:20.400 --> 00:28:22.567
Okay.

00:28:22.567 --> 00:28:27.501
Let's see if we can spot
the error here.

00:28:29.968 --> 00:28:34.634
Oh, yeah, of course.

00:28:34.634 --> 00:28:35.968
Single quote.

00:28:35.968 --> 00:28:40.200
Convert to double quote.

00:28:40.200 --> 00:28:42.167
All right.
Here's my data.

00:28:42.167 --> 00:28:46.467
As you can see that
Phyllis Aaron again is on top.

00:28:46.467 --> 00:28:49.400
And we can search
for other people.

00:28:55.534 --> 00:28:58.467
And those Johns in, say,
Chicago office.

00:29:02.701 --> 00:29:05.701
As you can see,
the performance is pretty good.

00:29:05.701 --> 00:29:10.000
And, um...

00:29:10.000 --> 00:29:11.567
we can modify the data again.

00:29:11.567 --> 00:29:16.701
Let's, say, move Phyllis
to New York office.

00:29:16.701 --> 00:29:21.067
Let's execute that query.

00:29:21.067 --> 00:29:24.033
Change that in my database.

00:29:24.033 --> 00:29:26.434
Then switch to my spreadsheet.

00:29:32.634 --> 00:29:36.868
Oh, I need to change
the magic number

00:29:36.868 --> 00:29:40.400
so that I don't hit the cache.

00:29:40.400 --> 00:29:42.767
As you can see,
Phyllis Aaron has moved

00:29:42.767 --> 00:29:47.100
to New York--
New York office.

00:29:47.100 --> 00:29:50.100
Okay.

00:29:50.100 --> 00:29:55.067
So in a very short time,
I think in...

00:29:55.067 --> 00:29:58.734
about a half hour,
we have built three fine apps

00:29:58.734 --> 00:30:01.267
to access the same data
that is behind the firewall

00:30:01.267 --> 00:30:03.701
in my relational database.

00:30:03.701 --> 00:30:08.968
And we can do a lot more
than that.

00:30:08.968 --> 00:30:10.968
Let's--let's review
what we have done.

00:30:10.968 --> 00:30:12.834
Okay, so what we have done

00:30:12.834 --> 00:30:15.334
is we have mapped
relational data to Atom feeds.

00:30:15.334 --> 00:30:19.133
That's the standard format
Google Apps use.

00:30:19.133 --> 00:30:21.634
And we have connected
behind-the-firewall data

00:30:21.634 --> 00:30:23.501
to Google Apps securely.

00:30:23.501 --> 00:30:28.267
And we have specified access
rules to control

00:30:28.267 --> 00:30:30.901
who can access what
from where.

00:30:30.901 --> 00:30:33.901
And we have written
three clients

00:30:33.901 --> 00:30:37.033
for the data.

00:30:37.033 --> 00:30:41.267
And I think it's important
to point out

00:30:41.267 --> 00:30:44.601
what we didn't have to do.
Okay.

00:30:44.601 --> 00:30:47.067
So we didn't have to write
a single line of code

00:30:47.067 --> 00:30:48.300
on the server.

00:30:48.300 --> 00:30:50.567
And we only did
the configuration in one file

00:30:50.567 --> 00:30:54.501
to map request
to SQL query

00:30:54.501 --> 00:30:58.701
and then from SQL's result set
back to a response.

00:30:58.701 --> 00:31:01.701
And we didn't have to set up

00:31:01.701 --> 00:31:04.968
a firewall hole
in our firewall.

00:31:04.968 --> 00:31:07.834
And we didn't have to use
complex firewall configuration

00:31:07.834 --> 00:31:12.334
to allow Google to access
my data.

00:31:12.334 --> 00:31:16.701
In fact, from Secure Data
Connector agent to Google

00:31:16.701 --> 00:31:18.467
is an outbound call.

00:31:18.467 --> 00:31:21.968
There's no firewall hole
required.

00:31:21.968 --> 00:31:26.467
And from the Secure Data
Connector agent, you can control

00:31:26.467 --> 00:31:29.400
what Google can access
what--when.

00:31:29.400 --> 00:31:31.434
And there's
no special configuration

00:31:31.434 --> 00:31:33.467
for the three client developers,
right?

00:31:33.467 --> 00:31:38.400
One JavaScript, one Java,
and one spreadsheet developer.

00:31:38.400 --> 00:31:40.634
There's no special configuration
for them.

00:31:40.634 --> 00:31:43.300
What they understand,
for example, in Java,

00:31:43.300 --> 00:31:45.133
I'm just dealing
with my JavaBean,

00:31:45.133 --> 00:31:47.200
a list of employee objects.

00:31:47.200 --> 00:31:49.968
No.
How simpler can you get, right?

00:31:49.968 --> 00:31:55.000
So they don't know the existence
of FeedServer in the middle,

00:31:55.000 --> 00:31:59.267
you know, Secure Data Connector
enabling the data

00:31:59.267 --> 00:32:01.100
for Google Apps to use.

00:32:01.100 --> 00:32:05.434
It's very simple for them
to develop their apps.

00:32:05.434 --> 00:32:08.167
Then what's next?

00:32:08.167 --> 00:32:10.634
What we have now demonstrated

00:32:10.634 --> 00:32:14.200
in our demo
is you can write data back

00:32:14.200 --> 00:32:15.667
to the database.

00:32:15.667 --> 00:32:18.133
It's fully supportive.
You can change, you can delete.

00:32:18.133 --> 00:32:20.267
You know, those requests
will be mapped

00:32:20.267 --> 00:32:25.167
to update, delete,
and other SQL queries.

00:32:25.167 --> 00:32:27.367
And you can also manipulate
and process the data

00:32:27.367 --> 00:32:30.100
in the cloud.

00:32:30.100 --> 00:32:32.300
You can execute
your business logic

00:32:32.300 --> 00:32:33.868
in the cloud.

00:32:33.868 --> 00:32:36.367
For example, when something
happens, send an email.

00:32:36.367 --> 00:32:38.801
When something happens,
create a calendar event

00:32:38.801 --> 00:32:40.834
in somebody's calendar.

00:32:40.834 --> 00:32:45.701
And we can integrate
your PRAM behind-the-firewall

00:32:45.701 --> 00:32:51.000
enterprise data
with the rest of Google Apps.

00:32:51.000 --> 00:32:53.567
And, in fact...

00:32:53.567 --> 00:32:56.334
our next demo will have
a Google Apps script demo,

00:32:56.334 --> 00:32:59.334
which we just introduced
recently.

00:32:59.334 --> 00:33:02.200
And here's Jonathan Rochelle
to do that demo.

00:33:02.200 --> 00:33:07.300
[applause]

00:33:07.300 --> 00:33:08.534
Rochelle: Hello.

00:33:08.534 --> 00:33:09.901
I'm going to try
to do something amazing here,

00:33:09.901 --> 00:33:13.234
which is set up
for my demo

00:33:13.234 --> 00:33:15.234
while I'm talking.

00:33:15.234 --> 00:33:19.234
Which might not be possible.

00:33:19.234 --> 00:33:21.968
So I'm going to talk
about Google Apps script.

00:33:21.968 --> 00:33:25.300
It feels kind of natural

00:33:25.300 --> 00:33:26.667
that you want to get
your own data

00:33:26.667 --> 00:33:28.033
and then you want to do things
with it.

00:33:28.033 --> 00:33:31.334
And so Google Apps script
lets you do things

00:33:31.334 --> 00:33:32.334
with that data,

00:33:32.334 --> 00:33:35.968
lets you do things
across Apps.

00:33:35.968 --> 00:33:40.167
So I'm going to actually log-on
to a domain--

00:33:40.167 --> 00:33:45.100
a test domain...

00:33:45.100 --> 00:33:48.734
which has some examples on it.

00:33:48.734 --> 00:33:50.534
Normally, I would do this
before I came up here,

00:33:50.534 --> 00:33:52.434
but we didn't have the luxury
of two machines here.

00:33:52.434 --> 00:33:54.467
So...

00:34:14.901 --> 00:34:16.601
So I'll just quickly describe.

00:34:16.601 --> 00:34:18.400
What Google Apps script
does for you

00:34:18.400 --> 00:34:21.501
is it lets you automate actions
across Apps.

00:34:21.501 --> 00:34:25.934
That's a fairly generic way to
say that it lets you do things

00:34:25.934 --> 00:34:27.501
that you would normally do
manually.

00:34:27.501 --> 00:34:29.267
It starts in Spreadsheets.

00:34:29.267 --> 00:34:30.767
It's intended to do
more than that,

00:34:30.767 --> 00:34:31.934
but in Spreadsheets,

00:34:31.934 --> 00:34:33.567
there are very specific things
you can do.

00:34:33.567 --> 00:34:35.033
You can create custom functions,

00:34:35.033 --> 00:34:37.667
you can access and edit data

00:34:37.667 --> 00:34:39.033
or formulas or formats,

00:34:39.033 --> 00:34:42.067
you can do the things
you would almost expect

00:34:42.067 --> 00:34:43.100
to be able to do
in Spreadsheets.

00:34:43.100 --> 00:34:45.033
And then it goes outside
of Spreadsheets

00:34:45.033 --> 00:34:46.300
to reach into Calendar,

00:34:46.300 --> 00:34:48.334
to be able to create
and look at events,

00:34:48.334 --> 00:34:53.467
to be able to look at mail
in a very limited way,

00:34:53.467 --> 00:34:54.701
to be able to send mail.

00:34:54.701 --> 00:34:57.734
Okay, so there will be
other things you can do

00:34:57.734 --> 00:35:00.400
with mail eventually, but right
now, it's just sending mail.

00:35:00.400 --> 00:35:02.501
And you can do other things
as well.

00:35:02.501 --> 00:35:04.501
Grab data from a Web page
and investigate it,

00:35:04.501 --> 00:35:06.934
look at it, do things,
act on it,

00:35:06.934 --> 00:35:09.467
do URL fetch, get in post,

00:35:09.467 --> 00:35:11.234
and translate
to other languages.

00:35:11.234 --> 00:35:12.434
So I'm gonna show you
some of those examples.

00:35:12.434 --> 00:35:15.767
I'm gonna focus
on three examples.

00:35:15.767 --> 00:35:17.868
The first is fairly simple.

00:35:17.868 --> 00:35:20.267
It's a custom function.

00:35:20.267 --> 00:35:25.133
And these custom functions
are extremely straightforward.

00:35:25.133 --> 00:35:26.467
They're written in JavaScript.

00:35:26.467 --> 00:35:29.200
All of Google Apps script
is JavaScript

00:35:29.200 --> 00:35:30.734
with the extensions
of the objects

00:35:30.734 --> 00:35:33.868
that we give you access to.

00:35:33.868 --> 00:35:36.367
So the way you access
Google Apps script

00:35:36.367 --> 00:35:37.434
is through the Tools menu.

00:35:37.434 --> 00:35:38.834
And right now,
just to clarify,

00:35:38.834 --> 00:35:41.334
we're actually
in a limited test mode.

00:35:41.334 --> 00:35:45.601
So you have to apply
to get your domain activated,

00:35:45.601 --> 00:35:47.467
and once it is activated,

00:35:47.467 --> 00:35:50.467
you can access the way
I'm showing you now.

00:35:50.467 --> 00:35:52.567
And I'll tell you now, just
in case you want to visit--

00:35:52.567 --> 00:35:53.834
we actually have the link

00:35:53.834 --> 00:35:56.300
linked
from the Google enterprise blog,

00:35:56.300 --> 00:35:58.801
which is
googleenterprise.blogspot.com.

00:35:58.801 --> 00:36:01.534
It's still--I'm not gonna go
into the detailed URL.

00:36:01.534 --> 00:36:03.367
It's still the top post,

00:36:03.367 --> 00:36:05.100
so you should be able
to find it no problem.

00:36:05.100 --> 00:36:07.033
But from the Tools menu,
there's a Scripts sub-menu,

00:36:07.033 --> 00:36:08.300
and you go to Edit Scripts.

00:36:08.300 --> 00:36:11.133
And I'll just very quickly
show you the code

00:36:11.133 --> 00:36:12.934
of these custom functions.

00:36:12.934 --> 00:36:16.834
And a script can contain
more than one function.

00:36:16.834 --> 00:36:19.767
So this script
is called Convert.

00:36:19.767 --> 00:36:21.634
It's got two functions
in it.

00:36:21.634 --> 00:36:25.634
The first is the inches
to millimeters function.

00:36:25.634 --> 00:36:28.467
It is definitely not the best
way actually to write a function

00:36:28.467 --> 00:36:30.167
that's gonna do conversion,

00:36:30.167 --> 00:36:32.467
you know, to have each function
for every single conversion

00:36:32.467 --> 00:36:34.868
you'd want to do, but I just
wanted to illustrate the point.

00:36:34.868 --> 00:36:37.567
You can see
it's just plain JavaScript.

00:36:37.567 --> 00:36:39.701
There's a declaration
of variables,

00:36:39.701 --> 00:36:41.534
there's a quick test
to look at the input

00:36:41.534 --> 00:36:43.667
and to return something
in the cell that says

00:36:43.667 --> 00:36:45.234
it's an error if it is,

00:36:45.234 --> 00:36:47.000
to do the simple calculation,

00:36:47.000 --> 00:36:49.234
and then to return that value
to the cell.

00:36:49.234 --> 00:36:51.000
So when you have
a custom function,

00:36:51.000 --> 00:36:52.367
it's expecting an input,

00:36:52.367 --> 00:36:53.734
and it's gonna basically
give you an output.

00:36:53.734 --> 00:36:55.367
So what you can see here
is I'm calling that function

00:36:55.367 --> 00:36:58.934
as a normal formula is called
in a spreadsheet.

00:36:58.934 --> 00:37:00.968
And it's calculating the results
for me.

00:37:00.968 --> 00:37:03.067
So if I change the input,

00:37:03.067 --> 00:37:09.000
it's gonna calculate the output.

00:37:09.000 --> 00:37:11.067
So it's very, very standard.

00:37:11.067 --> 00:37:14.167
And you can basically, you know,
do everything you can do

00:37:14.167 --> 00:37:17.868
with a...

00:37:17.868 --> 00:37:22.334
spreadsheet
once you have that function.

00:37:22.334 --> 00:37:24.067
Again my formats
are a little wacky there,

00:37:24.067 --> 00:37:27.100
but I'll just show you quickly
how it would work

00:37:27.100 --> 00:37:30.267
if I'm doing
parallel calculation.

00:37:30.267 --> 00:37:32.167
It's gonna--no, it didn't do
my extension for me.

00:37:32.167 --> 00:37:33.968
I messed that up.
Sorry.

00:37:33.968 --> 00:37:36.868
But you can see what the gist
of it is.

00:37:42.701 --> 00:37:45.434
So in case any of you are
looking to convert many inches

00:37:45.434 --> 00:37:48.200
to millimeters, I'll sell you
this custom function.

00:37:48.200 --> 00:37:51.133
It really, really took me
a long time to develop.

00:37:51.133 --> 00:37:52.701
Actually, it literally took
about five minutes

00:37:52.701 --> 00:37:53.934
to develop that one.

00:37:53.934 --> 00:37:55.234
The longest time was just going
to Google Search

00:37:55.234 --> 00:37:57.801
and figuring out what the factor
was to multiply by.

00:37:57.801 --> 00:37:59.334
I didn't have
that one memorized.

00:37:59.334 --> 00:38:02.667
So the second example
I want to show you goes beyond,

00:38:02.667 --> 00:38:04.267
so you saw
how to actually access script--

00:38:04.267 --> 00:38:05.634
it's in the Tools menu--

00:38:05.634 --> 00:38:07.267
and how to do
a custom function very simply.

00:38:07.267 --> 00:38:11.200
And again, once you have data
pulled in through SDC,

00:38:11.200 --> 00:38:12.901
there are things
you want to do with that data.

00:38:12.901 --> 00:38:14.634
That's kind of the whole point.

00:38:14.634 --> 00:38:17.767
This example might be
a little bit more relevant.

00:38:17.767 --> 00:38:20.400
We use this one
in Google a lot now.

00:38:20.400 --> 00:38:24.100
This is generally--
if you look at the abstract

00:38:24.100 --> 00:38:26.400
of this example,
it's very popular, which is--

00:38:26.400 --> 00:38:31.767
forms are used prolifically
at Google

00:38:31.767 --> 00:38:32.968
and other customers.

00:38:32.968 --> 00:38:34.100
And one of the things
you want to do

00:38:34.100 --> 00:38:35.534
is look at the data that came in
on a form

00:38:35.534 --> 00:38:37.834
the same way you'd look at data
that came in through SDC

00:38:37.834 --> 00:38:39.601
and do stuff with it.

00:38:39.601 --> 00:38:41.834
This one is going to send
confirmation emails,

00:38:41.834 --> 00:38:44.067
so you can manipulate the data
potentially that came in

00:38:44.067 --> 00:38:45.634
or look at it
and approve it

00:38:45.634 --> 00:38:46.834
and send emails.

00:38:46.834 --> 00:38:48.100
What I want to show you
in this example

00:38:48.100 --> 00:38:51.167
is the two ways
that you can execute a script.

00:38:51.167 --> 00:38:52.567
And this script
is not a custom function.

00:38:52.567 --> 00:38:55.567
This one is just processing.

00:38:55.567 --> 00:38:58.400
The two ways
are through a drawing object--

00:38:58.400 --> 00:39:00.234
the drawing object
can be assigned to macro,

00:39:00.234 --> 00:39:01.868
so you'll see, like,
I have a small menu.

00:39:01.868 --> 00:39:03.801
It's a little bit hidden
under my scroll bar there.

00:39:03.801 --> 00:39:05.167
But I can assign a script,

00:39:05.167 --> 00:39:08.300
and I assigned a name
to that script: emailConfirm.

00:39:08.300 --> 00:39:10.734
And the other way
is through a custom menu.

00:39:10.734 --> 00:39:13.100
So you can see
that Confirm custom menu

00:39:13.100 --> 00:39:16.434
with just one option here,
which is Send Confirm Emails.

00:39:16.434 --> 00:39:18.434
What this script does
is it looks

00:39:18.434 --> 00:39:21.834
at this field to see
was this confirm ever sent.

00:39:21.834 --> 00:39:23.033
And if it was,
it won't send it,

00:39:23.033 --> 00:39:24.734
but if it's not,
it will.

00:39:24.734 --> 00:39:26.367
So I'll click on that button.

00:39:26.367 --> 00:39:28.734
And it's running the script.

00:39:28.734 --> 00:39:29.801
You can see it's started,

00:39:29.801 --> 00:39:31.667
and now it's marking them
as sent.

00:39:31.667 --> 00:39:33.400
And it's giving me a timestamp
as well.

00:39:33.400 --> 00:39:34.701
So if I wanted
to resend it,

00:39:34.701 --> 00:39:37.501
you know, I could basically
blank this out

00:39:37.501 --> 00:39:41.801
and resend,
and it'll send it again.

00:39:41.801 --> 00:39:43.200
So I'll quickly jump to--

00:39:43.200 --> 00:39:44.601
well, I shouldn't say quickly

00:39:44.601 --> 00:39:45.734
'cause I'm just not fast enough
typing

00:39:45.734 --> 00:39:47.667
when I'm presenting.

00:39:53.000 --> 00:39:54.100
But I'll jump
to my mail account

00:39:54.100 --> 00:39:55.501
so you can see the email.

00:39:55.501 --> 00:40:00.000
The email that came in
was defined by my script.

00:40:00.000 --> 00:40:02.601
My script said, what do I want
that email to contain?

00:40:02.601 --> 00:40:04.934
So you can see all
those responses just came in.

00:40:04.934 --> 00:40:06.901
And within the last minute.

00:40:06.901 --> 00:40:08.334
And the contents
of that email

00:40:08.334 --> 00:40:09.701
is defined by my script.

00:40:09.701 --> 00:40:11.033
I put in there
what I wanted to

00:40:11.033 --> 00:40:12.200
in the format
that I wanted.

00:40:12.200 --> 00:40:14.801
So it's an HTML string
basically

00:40:14.801 --> 00:40:15.834
that I sent out to that email.

00:40:15.834 --> 00:40:18.234
I could also create attachments

00:40:18.234 --> 00:40:20.534
and formulate those attachments

00:40:20.534 --> 00:40:22.901
and put them
in that email payload as well.

00:40:22.901 --> 00:40:24.701
And they would come through
as attachments,

00:40:24.701 --> 00:40:26.000
which is kind of neat.

00:40:26.000 --> 00:40:27.701
We actually do that.

00:40:27.701 --> 00:40:29.734
For the documentation
of this product,

00:40:29.734 --> 00:40:31.167
we're creating
that documentation

00:40:31.167 --> 00:40:33.467
in an automated way
using script.

00:40:33.467 --> 00:40:35.534
We have a spreadsheet
that contains

00:40:35.534 --> 00:40:36.667
all of our documentation.

00:40:36.667 --> 00:40:38.334
Anybody on the team
can go in

00:40:38.334 --> 00:40:39.434
and change things,
fix things,

00:40:39.434 --> 00:40:40.868
whether they're engineers
or not.

00:40:40.868 --> 00:40:42.334
And then somebody pushes
a button,

00:40:42.334 --> 00:40:44.367
and it sends all that stuff
over to the webmaster

00:40:44.367 --> 00:40:45.501
to put in the help center.

00:40:45.501 --> 00:40:48.000
So it's really
an interesting way to--

00:40:48.000 --> 00:40:50.467
I have to say, the attachment
process was created--

00:40:50.467 --> 00:40:53.133
that feature was created
specifically for the team.

00:40:53.133 --> 00:40:55.267
I guess when it's something
that they're asking for,

00:40:55.267 --> 00:40:57.901
they get to put it
at the top of the list.

00:40:57.901 --> 00:41:01.334
So the third example
is translation.

00:41:01.334 --> 00:41:05.167
This is using another one
of these objects,

00:41:05.167 --> 00:41:06.234
these Beans,

00:41:06.234 --> 00:41:08.968
which also illustrates
one more point,

00:41:08.968 --> 00:41:10.501
which is just analyzing

00:41:10.501 --> 00:41:13.234
or using
my currently selected range.

00:41:13.234 --> 00:41:15.801
So this is a rather,
in some ways dumb function,

00:41:15.801 --> 00:41:18.133
which is, it's just gonna take
what I selected,

00:41:18.133 --> 00:41:20.234
it's gonna translate it
and throw it to the right.

00:41:20.234 --> 00:41:22.033
It's just gonna put it
in that highlighted area

00:41:22.033 --> 00:41:23.400
that I have to the right.

00:41:23.400 --> 00:41:25.100
And again I created
a menu option for that.

00:41:25.100 --> 00:41:29.434
And I, in this case, created
four different caller functions

00:41:29.434 --> 00:41:31.601
so that the menu can be
a little bit more user-friendly,

00:41:31.601 --> 00:41:34.334
and I'll say, "Let's translate
that to Spanish."

00:41:34.334 --> 00:41:35.734
It started running the script.

00:41:35.734 --> 00:41:38.834
You can see down below
it's doing the translation

00:41:38.834 --> 00:41:42.801
And when it finishes, it'll say
that the script is finished.

00:41:42.801 --> 00:41:46.734
And the results
are there.

00:41:46.734 --> 00:41:47.934
And that again,
like I said,

00:41:47.934 --> 00:41:50.133
there's so much you can do
from that point.

00:41:50.133 --> 00:41:51.300
This is really
just to illustrate.

00:41:51.300 --> 00:41:54.367
One of the, you know,
really obvious examples

00:41:54.367 --> 00:41:55.968
is to be able
to translate content

00:41:55.968 --> 00:41:58.334
and email it to someone
who's not even on the product.

00:41:58.334 --> 00:42:01.634
So you could actually do
translation and send information

00:42:01.634 --> 00:42:04.634
to customers or partners.

00:42:04.634 --> 00:42:06.934
I'll show you one more thing
that's just--

00:42:06.934 --> 00:42:08.133
at the risk of it not working

00:42:08.133 --> 00:42:09.467
just because I wrote it

00:42:09.467 --> 00:42:11.901
late last night--

00:42:11.901 --> 00:42:14.934
which is a conversion function.

00:42:14.934 --> 00:42:16.634
Since I showed you
the wrong way

00:42:16.634 --> 00:42:17.834
to do inches
to millimeters,

00:42:17.834 --> 00:42:20.000
I'll try to show you
a better way.

00:42:20.000 --> 00:42:22.400
This is actually translating
different things.

00:42:22.400 --> 00:42:27.801
What I did is I'm translating
from U.S. dollar to euro.

00:42:27.801 --> 00:42:29.901
And, you know, that should work.

00:42:29.901 --> 00:42:32.400
Let's see if it changes that.

00:42:32.400 --> 00:42:34.634
But I can also say
that I want to translate

00:42:34.634 --> 00:42:39.000
from feet to, I don't know,
somebody give me--

00:42:39.000 --> 00:42:42.067
what do you want
to translate feet to?

00:42:42.067 --> 00:42:46.567
Yards.

00:42:46.567 --> 00:42:48.200
Hey, 30 feet is 10 yards.

00:42:48.200 --> 00:42:49.434
Um, yeah, I can even--

00:42:49.434 --> 00:42:54.801
you know, I can do liters
to gallons.

00:42:54.801 --> 00:42:57.033
Pretty much anything.

00:42:57.033 --> 00:42:59.300
And the way I do that
is through URL fetch.

00:42:59.300 --> 00:43:01.000
I'm using Google Search.

00:43:01.000 --> 00:43:02.300
I'm using the IN operator.

00:43:02.300 --> 00:43:03.667
I don't know
if anybody's ever used that.

00:43:03.667 --> 00:43:05.801
But I just basically formulate
the search string,

00:43:05.801 --> 00:43:07.601
and then
when the payload comes back,

00:43:07.601 --> 00:43:09.267
I look at the string,

00:43:09.267 --> 00:43:12.567
and I came up with a very--
this is the only thing

00:43:12.567 --> 00:43:13.767
that took any time--

00:43:13.767 --> 00:43:16.167
was I look at that data
that came back,

00:43:16.167 --> 00:43:18.534
and I find the answer.

00:43:18.534 --> 00:43:19.667
So if you look
at this script,

00:43:19.667 --> 00:43:22.000
it's fairly simple,
but convoluted.

00:43:22.000 --> 00:43:24.067
This is a great sign
of my horrible coding.

00:43:24.067 --> 00:43:27.133
But it's mostly comments
actually.

00:43:27.133 --> 00:43:28.968
But I have to find
the third table

00:43:28.968 --> 00:43:31.133
and find the equal sign
and look for the units

00:43:31.133 --> 00:43:32.634
and I'm there.

00:43:32.634 --> 00:43:34.901
But it's just an example
of how to actually call out

00:43:34.901 --> 00:43:36.467
to external services,

00:43:36.467 --> 00:43:37.834
whether they're your own
or something else,

00:43:37.834 --> 00:43:39.868
through the URL fetch option.

00:43:39.868 --> 00:43:41.901
And that's pretty much it.

00:43:41.901 --> 00:43:43.167
The most important thing here,

00:43:43.167 --> 00:43:44.667
I think,
is the extensibility.

00:43:44.667 --> 00:43:47.734
We're gonna be adding reach-out
to other Google apps,

00:43:47.734 --> 00:43:49.567
as well as non-Google apps
at some point.

00:43:49.567 --> 00:43:51.167
But very, very shortly,

00:43:51.167 --> 00:43:53.234
you'll be seeing enhancements
to this,

00:43:53.234 --> 00:43:55.934
and, like I said, go to
googleenterprise.blogspot.com

00:43:55.934 --> 00:43:57.501
if you want to apply
to have your domain

00:43:57.501 --> 00:44:00.100
in this limited test
that we're doing right now.

00:44:00.100 --> 00:44:03.534
You know, it's likely that
you can be accepted into that.

00:44:03.534 --> 00:44:05.667
And fairly soon,

00:44:05.667 --> 00:44:09.334
you'll see it launched
across all of Google Apps.

00:44:09.334 --> 00:44:11.000
And that's it.

00:44:11.000 --> 00:44:15.634
Thanks.
[applause]

00:44:15.634 --> 00:44:16.968
Are there--do you want
to take questions now?

00:44:16.968 --> 00:44:18.701
Do we have time
for questions?

00:44:18.701 --> 00:44:24.000
Great.

00:44:24.000 --> 00:44:26.067
Do they have the mic on?

00:44:26.067 --> 00:44:27.133
man: There we go.

00:44:27.133 --> 00:44:30.100
Um, question about--
two quick ones.

00:44:30.100 --> 00:44:31.501
One about the email.

00:44:31.501 --> 00:44:33.400
You mentioned
that you can put attachments

00:44:33.400 --> 00:44:37.033
on that
for sending out the email.

00:44:37.033 --> 00:44:40.934
Can you format the attachments
to be in line

00:44:40.934 --> 00:44:43.501
or just payload attachments
on an email?

00:44:43.501 --> 00:44:44.901
Are there ways
of configuring that

00:44:44.901 --> 00:44:48.434
so that, say, can you format
as HTML?

00:44:48.434 --> 00:44:50.634
Rochelle: Um, you can
pretty much do anything.

00:44:50.634 --> 00:44:53.234
In other words, that attachment
is really, literally,

00:44:53.234 --> 00:44:55.234
just a bit stream.

00:44:55.234 --> 00:44:56.434
It's a blob.
man: Okay.

00:44:56.434 --> 00:44:57.934
Um, the other one is,
you mentioned,

00:44:57.934 --> 00:45:00.300
in the little script
you wrote

00:45:00.300 --> 00:45:04.167
to convert, you looked
for the unit character.

00:45:04.167 --> 00:45:05.534
How do you find the units?

00:45:05.534 --> 00:45:07.367
Rochelle: It's really
just pattern matching.

00:45:07.367 --> 00:45:09.701
It just took some testing,
to be honest.

00:45:09.701 --> 00:45:11.767
I mean, if you could see me
writing this thing,

00:45:11.767 --> 00:45:13.701
it was almost funny,
'cause I just kept returning

00:45:13.701 --> 00:45:16.000
whatever I could find
until I narrowed down,

00:45:16.000 --> 00:45:19.567
and then I had to find
some crazy ASCII character

00:45:19.567 --> 00:45:21.067
that represents a comma.

00:45:21.067 --> 00:45:22.400
It was insane.

00:45:22.400 --> 00:45:25.000
But it was simple to write
and then hard to perfect.

00:45:25.000 --> 00:45:27.234
And I would say
it's still not perfect.

00:45:27.234 --> 00:45:29.033
But it is useful actually.

00:45:29.033 --> 00:45:30.133
man: So one thing
I haven't seen yet

00:45:30.133 --> 00:45:31.534
or heard anyone talk about is,

00:45:31.534 --> 00:45:35.234
what are the scalability
and deployment guidelines

00:45:35.234 --> 00:45:37.634
for the Secure Data Connector
on my server?

00:45:37.634 --> 00:45:39.133
I mean, it's deployed to one box

00:45:39.133 --> 00:45:40.667
is what it looks like here.

00:45:40.667 --> 00:45:43.501
If I have 50,000 employees,
how's that gonna work?

00:45:43.501 --> 00:45:45.100
How many boxes
does it deploy to?

00:45:45.100 --> 00:45:46.400
What's failover?

00:45:46.400 --> 00:45:47.734
Can you guys talk about that
at all?

00:45:47.734 --> 00:45:50.767
Yang: Yeah, there's more
documentation on the site,

00:45:50.767 --> 00:45:54.434
but, in short, basically,
you can run multiple instances

00:45:54.434 --> 00:45:59.300
of the SDC agent,
and they failover to each other.

00:45:59.300 --> 00:46:01.300
man: Okay.

00:46:04.267 --> 00:46:05.400
Rochelle: Any other questions?

00:46:05.400 --> 00:46:09.367
Yang: Any other questions?

00:46:09.367 --> 00:46:11.067
man: When is this gonna be
broadly available?

00:46:11.067 --> 00:46:12.467
Rochelle: I'm sorry.
Say that again.

00:46:12.467 --> 00:46:17.133
man: Accessing data, say,
behind corporate firewalls--

00:46:17.133 --> 00:46:18.801
Rochelle: Secure Data Connector?
man: Yeah.

00:46:18.801 --> 00:46:21.000
Yang: What I have demo'd today
are all in production.

00:46:21.000 --> 00:46:22.267
So you can do it today.

00:46:22.267 --> 00:46:26.200
And the two products
are open-source products,

00:46:26.200 --> 00:46:27.501
so you can download
and configure

00:46:27.501 --> 00:46:29.000
and run yourself.

00:46:29.000 --> 00:46:30.567
Rochelle: Yeah, so the limited
test that I was talking about

00:46:30.567 --> 00:46:31.934
was literally
for Google Apps script,

00:46:31.934 --> 00:46:34.534
not for Secure Data Connector.

00:46:34.534 --> 00:46:38.801
man: What about dynamic data
in forms?

00:46:38.801 --> 00:46:40.534
Yang: What?
man: Spreadsheet forms.

00:46:40.534 --> 00:46:41.834
Rochelle: I'm sorry, say that--
man: Forms.

00:46:41.834 --> 00:46:44.200
Rochelle: Yeah.
man: Spreadsheet forms.

00:46:44.200 --> 00:46:46.467
I don't know if there is a talk
specifically on forms,

00:46:46.467 --> 00:46:50.467
but a big need we have
is making dynamic forms

00:46:50.467 --> 00:46:54.200
or more, you know, responsive,
to actual data.

00:46:54.200 --> 00:46:56.534
Rochelle: Yeah, so one
of the things that we expect

00:46:56.534 --> 00:46:59.133
to add to Google Apps script
is event processing.

00:46:59.133 --> 00:47:01.767
So I'm thinking--
you tell me if I'm wrong,

00:47:01.767 --> 00:47:03.067
but what a lot of people
are asking for

00:47:03.067 --> 00:47:05.100
is to do things like,
when a form submission comes in,

00:47:05.100 --> 00:47:06.100
do something.

00:47:06.100 --> 00:47:07.200
Is that what you mean?

00:47:07.200 --> 00:47:09.434
man: Well, no, actually,
pulling data,

00:47:09.434 --> 00:47:11.667
creating dynamic questions.

00:47:11.667 --> 00:47:12.968
Rochelle: Ah, okay.
man: From a data source.

00:47:12.968 --> 00:47:14.334
Rochelle: So, yeah,
that's interesting.

00:47:14.334 --> 00:47:16.200
Since we don't yet have
a good API

00:47:16.200 --> 00:47:18.868
into the forms capability
of Spreadsheets,

00:47:18.868 --> 00:47:20.667
we don't have anything
on script

00:47:20.667 --> 00:47:22.367
that reaches into that.

00:47:22.367 --> 00:47:23.501
But we do expect to do that.

00:47:23.501 --> 00:47:24.834
It's just not there yet yet.

00:47:24.834 --> 00:47:29.267
Forms is an incredibly popular
feature right now,

00:47:29.267 --> 00:47:32.200
so we expect to do
a lot more with that.

00:47:35.734 --> 00:47:36.868
Okay.
It looks like we're done.

00:47:36.868 --> 00:47:38.300
Thanks.

00:47:38.300 --> 00:47:41.300
Yang: Thank you.
[applause]

