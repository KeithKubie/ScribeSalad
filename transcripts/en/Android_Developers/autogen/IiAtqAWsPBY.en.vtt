WEBVTT
Kind: captions
Language: en

00:00:04.839 --> 00:00:09.970
 
all right welcome my name is Dan Galpin

00:00:09.970 --> 00:00:09.980
all right welcome my name is Dan Galpin
 

00:00:09.980 --> 00:00:11.770
all right welcome my name is Dan Galpin
and we're gonna be talking about garbage

00:00:11.770 --> 00:00:11.780
and we're gonna be talking about garbage
 

00:00:11.780 --> 00:00:13.960
and we're gonna be talking about garbage
today I hope everyone is really excited

00:00:13.960 --> 00:00:13.970
today I hope everyone is really excited
 

00:00:13.970 --> 00:00:16.029
today I hope everyone is really excited
to hear about garbage a little bit about

00:00:16.029 --> 00:00:16.039
to hear about garbage a little bit about
 

00:00:16.039 --> 00:00:19.569
to hear about garbage a little bit about
me I have spent the last over five years

00:00:19.569 --> 00:00:19.579
me I have spent the last over five years
 

00:00:19.579 --> 00:00:21.849
me I have spent the last over five years
as a developer advocate on the Android

00:00:21.849 --> 00:00:21.859
as a developer advocate on the Android
 

00:00:21.859 --> 00:00:24.220
as a developer advocate on the Android
team mostly working with game developers

00:00:24.220 --> 00:00:24.230
team mostly working with game developers
 

00:00:24.230 --> 00:00:25.960
team mostly working with game developers
which is why I end up dealing with so

00:00:25.960 --> 00:00:25.970
which is why I end up dealing with so
 

00:00:25.970 --> 00:00:28.450
which is why I end up dealing with so
many low-level things but also doing a

00:00:28.450 --> 00:00:28.460
many low-level things but also doing a
 

00:00:28.460 --> 00:00:29.979
many low-level things but also doing a
couple of fun things you might have have

00:00:29.979 --> 00:00:29.989
couple of fun things you might have have
 

00:00:29.989 --> 00:00:32.470
couple of fun things you might have have
seen I'm really proud of the work we've

00:00:32.470 --> 00:00:32.480
seen I'm really proud of the work we've
 

00:00:32.480 --> 00:00:36.060
seen I'm really proud of the work we've
done with Udacity I worked on both the

00:00:36.060 --> 00:00:36.070
done with Udacity I worked on both the
 

00:00:36.070 --> 00:00:38.350
done with Udacity I worked on both the
Android fundamentals class introduction

00:00:38.350 --> 00:00:38.360
Android fundamentals class introduction
 

00:00:38.360 --> 00:00:40.900
Android fundamentals class introduction
to Android as well as the advanced

00:00:40.900 --> 00:00:40.910
to Android as well as the advanced
 

00:00:40.910 --> 00:00:44.200
to Android as well as the advanced
Android class and I have had no sleep

00:00:44.200 --> 00:00:44.210
Android class and I have had no sleep
 

00:00:44.210 --> 00:00:46.420
Android class and I have had no sleep
literally I have not slept at about two

00:00:46.420 --> 00:00:46.430
literally I have not slept at about two
 

00:00:46.430 --> 00:00:51.640
literally I have not slept at about two
days so this should be exciting and yeah

00:00:51.640 --> 00:00:51.650
days so this should be exciting and yeah
 

00:00:51.650 --> 00:00:56.020
days so this should be exciting and yeah
and I think I'm funny so um so I had a

00:00:56.020 --> 00:00:56.030
and I think I'm funny so um so I had a
 

00:00:56.030 --> 00:00:57.640
and I think I'm funny so um so I had a
confession to make if you looked at the

00:00:57.640 --> 00:00:57.650
confession to make if you looked at the
 

00:00:57.650 --> 00:00:59.950
confession to make if you looked at the
description of this talk when Ian me

00:00:59.950 --> 00:00:59.960
description of this talk when Ian me
 

00:00:59.960 --> 00:01:01.840
description of this talk when Ian me
Lewis who noticed is not here and I

00:01:01.840 --> 00:01:01.850
Lewis who noticed is not here and I
 

00:01:01.850 --> 00:01:03.130
Lewis who noticed is not here and I
started planning this talk we were

00:01:03.130 --> 00:01:03.140
started planning this talk we were
 

00:01:03.140 --> 00:01:06.700
started planning this talk we were
thinking like ocean liner big and we

00:01:06.700 --> 00:01:06.710
thinking like ocean liner big and we
 

00:01:06.710 --> 00:01:08.470
thinking like ocean liner big and we
wanted to cover all sorts of things we

00:01:08.470 --> 00:01:08.480
wanted to cover all sorts of things we
 

00:01:08.480 --> 00:01:10.510
wanted to cover all sorts of things we
wanted to cover binder and art in the

00:01:10.510 --> 00:01:10.520
wanted to cover binder and art in the
 

00:01:10.520 --> 00:01:12.520
wanted to cover binder and art in the
oat format you know services whose

00:01:12.520 --> 00:01:12.530
oat format you know services whose
 

00:01:12.530 --> 00:01:16.270
oat format you know services whose
name's end in flinger you name it but a

00:01:16.270 --> 00:01:16.280
name's end in flinger you name it but a
 

00:01:16.280 --> 00:01:17.649
name's end in flinger you name it but a
few weeks ago we realized two things

00:01:17.649 --> 00:01:17.659
few weeks ago we realized two things
 

00:01:17.659 --> 00:01:20.290
few weeks ago we realized two things
first there was no way we had time for

00:01:20.290 --> 00:01:20.300
first there was no way we had time for
 

00:01:20.300 --> 00:01:21.520
first there was no way we had time for
all that even though we could write a

00:01:21.520 --> 00:01:21.530
all that even though we could write a
 

00:01:21.530 --> 00:01:24.399
all that even though we could write a
talk that would cover all of that we

00:01:24.399 --> 00:01:24.409
talk that would cover all of that we
 

00:01:24.409 --> 00:01:26.310
talk that would cover all of that we
still couldn't deliver it in 40 minutes

00:01:26.310 --> 00:01:26.320
still couldn't deliver it in 40 minutes
 

00:01:26.320 --> 00:01:28.420
still couldn't deliver it in 40 minutes
secondly there are ease a series of

00:01:28.420 --> 00:01:28.430
secondly there are ease a series of
 

00:01:28.430 --> 00:01:30.580
secondly there are ease a series of
books and talks called Android internals

00:01:30.580 --> 00:01:30.590
books and talks called Android internals
 

00:01:30.590 --> 00:01:31.930
books and talks called Android internals
that covered lots of what we were

00:01:31.930 --> 00:01:31.940
that covered lots of what we were
 

00:01:31.940 --> 00:01:35.100
that covered lots of what we were
planning so we decided to focus the talk

00:01:35.100 --> 00:01:35.110
planning so we decided to focus the talk
 

00:01:35.110 --> 00:01:37.270
planning so we decided to focus the talk
so instead I want to talk about one of

00:01:37.270 --> 00:01:37.280
so instead I want to talk about one of
 

00:01:37.280 --> 00:01:39.130
so instead I want to talk about one of
the journeys that we've taken through

00:01:39.130 --> 00:01:39.140
the journeys that we've taken through
 

00:01:39.140 --> 00:01:42.219
the journeys that we've taken through
the internals of Android I should also

00:01:42.219 --> 00:01:42.229
the internals of Android I should also
 

00:01:42.229 --> 00:01:44.140
the internals of Android I should also
mention that I did not write large

00:01:44.140 --> 00:01:44.150
mention that I did not write large
 

00:01:44.150 --> 00:01:47.109
mention that I did not write large
chunks of this talk Ian E Lewis my

00:01:47.109 --> 00:01:47.119
chunks of this talk Ian E Lewis my
 

00:01:47.119 --> 00:01:49.450
chunks of this talk Ian E Lewis my
cohort did but he couldn't be here today

00:01:49.450 --> 00:01:49.460
cohort did but he couldn't be here today
 

00:01:49.460 --> 00:01:53.050
cohort did but he couldn't be here today
I am however responsible for all of the

00:01:53.050 --> 00:01:53.060
I am however responsible for all of the
 

00:01:53.060 --> 00:01:55.080
I am however responsible for all of the
slides

00:01:55.080 --> 00:01:55.090
slides
 

00:01:55.090 --> 00:01:57.940
slides
he wrote a script that I'm going to read

00:01:57.940 --> 00:01:57.950
he wrote a script that I'm going to read
 

00:01:57.950 --> 00:02:00.789
he wrote a script that I'm going to read
word for word because I will forever

00:02:00.789 --> 00:02:00.799
word for word because I will forever
 

00:02:00.799 --> 00:02:03.850
word for word because I will forever
stand in utter awe of his technical

00:02:03.850 --> 00:02:03.860
stand in utter awe of his technical
 

00:02:03.860 --> 00:02:06.490
stand in utter awe of his technical
brilliance and because I haven't slept

00:02:06.490 --> 00:02:06.500
brilliance and because I haven't slept
 

00:02:06.500 --> 00:02:10.300
brilliance and because I haven't slept
in about a week so let's get started the

00:02:10.300 --> 00:02:10.310
in about a week so let's get started the
 

00:02:10.310 --> 00:02:12.010
in about a week so let's get started the
great thing about spelunking through the

00:02:12.010 --> 00:02:12.020
great thing about spelunking through the
 

00:02:12.020 --> 00:02:13.710
great thing about spelunking through the
bowels of Android is that pretty much

00:02:13.710 --> 00:02:13.720
bowels of Android is that pretty much
 

00:02:13.720 --> 00:02:15.960
bowels of Android is that pretty much
anyone can do it it's the beauty of open

00:02:15.960 --> 00:02:15.970
anyone can do it it's the beauty of open
 

00:02:15.970 --> 00:02:18.210
anyone can do it it's the beauty of open
source and you might think that since I

00:02:18.210 --> 00:02:18.220
source and you might think that since I
 

00:02:18.220 --> 00:02:19.530
source and you might think that since I
worked for Google I have some kind of

00:02:19.530 --> 00:02:19.540
worked for Google I have some kind of
 

00:02:19.540 --> 00:02:21.030
worked for Google I have some kind of
special advantage when it comes to

00:02:21.030 --> 00:02:21.040
special advantage when it comes to
 

00:02:21.040 --> 00:02:23.670
special advantage when it comes to
understanding Android I mean anytime I

00:02:23.670 --> 00:02:23.680
understanding Android I mean anytime I
 

00:02:23.680 --> 00:02:25.110
understanding Android I mean anytime I
want to I can walk over and talk

00:02:25.110 --> 00:02:25.120
want to I can walk over and talk
 

00:02:25.120 --> 00:02:26.580
want to I can walk over and talk
directly it's one of the amazing people

00:02:26.580 --> 00:02:26.590
directly it's one of the amazing people
 

00:02:26.590 --> 00:02:28.740
directly it's one of the amazing people
that actually wrote the system and it is

00:02:28.740 --> 00:02:28.750
that actually wrote the system and it is
 

00:02:28.750 --> 00:02:30.870
that actually wrote the system and it is
pretty awesome but not only do I try to

00:02:30.870 --> 00:02:30.880
pretty awesome but not only do I try to
 

00:02:30.880 --> 00:02:34.110
pretty awesome but not only do I try to
avoid doing that more than I have to the

00:02:34.110 --> 00:02:34.120
avoid doing that more than I have to the
 

00:02:34.120 --> 00:02:35.940
avoid doing that more than I have to the
knowledge is actually pretty much spread

00:02:35.940 --> 00:02:35.950
knowledge is actually pretty much spread
 

00:02:35.950 --> 00:02:38.310
knowledge is actually pretty much spread
out over lots of people these days so

00:02:38.310 --> 00:02:38.320
out over lots of people these days so
 

00:02:38.320 --> 00:02:39.480
out over lots of people these days so
while the Android engineering team is

00:02:39.480 --> 00:02:39.490
while the Android engineering team is
 

00:02:39.490 --> 00:02:41.250
while the Android engineering team is
amazing and I'm honestly really

00:02:41.250 --> 00:02:41.260
amazing and I'm honestly really
 

00:02:41.260 --> 00:02:42.870
amazing and I'm honestly really
fortunate to be working with them what I

00:02:42.870 --> 00:02:42.880
fortunate to be working with them what I
 

00:02:42.880 --> 00:02:44.160
fortunate to be working with them what I
really want to know how something works

00:02:44.160 --> 00:02:44.170
really want to know how something works
 

00:02:44.170 --> 00:02:46.950
really want to know how something works
I'll at least first get into some code

00:02:46.950 --> 00:02:46.960
I'll at least first get into some code
 

00:02:46.960 --> 00:02:49.080
I'll at least first get into some code
and try to find out for myself so today

00:02:49.080 --> 00:02:49.090
and try to find out for myself so today
 

00:02:49.090 --> 00:02:52.050
and try to find out for myself so today
I'm going to tell you a story about a an

00:02:52.050 --> 00:02:52.060
I'm going to tell you a story about a an
 

00:02:52.060 --> 00:02:53.760
I'm going to tell you a story about a an
and I journey deep into the Android

00:02:53.760 --> 00:02:53.770
and I journey deep into the Android
 

00:02:53.770 --> 00:02:55.500
and I journey deep into the Android
runtime and found out something for

00:02:55.500 --> 00:02:55.510
runtime and found out something for
 

00:02:55.510 --> 00:02:57.480
runtime and found out something for
ourselves specifically it's a story of

00:02:57.480 --> 00:02:57.490
ourselves specifically it's a story of
 

00:02:57.490 --> 00:02:59.400
ourselves specifically it's a story of
how we found out why you have to be

00:02:59.400 --> 00:02:59.410
how we found out why you have to be
 

00:02:59.410 --> 00:03:01.560
how we found out why you have to be
careful not to waste too much time when

00:03:01.560 --> 00:03:01.570
careful not to waste too much time when
 

00:03:01.570 --> 00:03:04.020
careful not to waste too much time when
trying to avoid allocations especially

00:03:04.020 --> 00:03:04.030
trying to avoid allocations especially
 

00:03:04.030 --> 00:03:06.000
trying to avoid allocations especially
when you're running on art and we're

00:03:06.000 --> 00:03:06.010
when you're running on art and we're
 

00:03:06.010 --> 00:03:07.700
when you're running on art and we're
actually gonna show you how we did it

00:03:07.700 --> 00:03:07.710
actually gonna show you how we did it
 

00:03:07.710 --> 00:03:10.710
actually gonna show you how we did it
this particular story begins with a deck

00:03:10.710 --> 00:03:10.720
this particular story begins with a deck
 

00:03:10.720 --> 00:03:11.370
this particular story begins with a deck
of cards

00:03:11.370 --> 00:03:11.380
of cards
 

00:03:11.380 --> 00:03:13.020
of cards
which is exceptionally appropriate since

00:03:13.020 --> 00:03:13.030
which is exceptionally appropriate since
 

00:03:13.030 --> 00:03:15.000
which is exceptionally appropriate since
it also ends with cards now ian was

00:03:15.000 --> 00:03:15.010
it also ends with cards now ian was
 

00:03:15.010 --> 00:03:16.800
it also ends with cards now ian was
writing a demo that true playing cards

00:03:16.800 --> 00:03:16.810
writing a demo that true playing cards
 

00:03:16.810 --> 00:03:18.930
writing a demo that true playing cards
it was supposed to be an experiment

00:03:18.930 --> 00:03:18.940
it was supposed to be an experiment
 

00:03:18.940 --> 00:03:20.970
it was supposed to be an experiment
about overdraw but that actually turned

00:03:20.970 --> 00:03:20.980
about overdraw but that actually turned
 

00:03:20.980 --> 00:03:22.410
about overdraw but that actually turned
out to be the least interesting part of

00:03:22.410 --> 00:03:22.420
out to be the least interesting part of
 

00:03:22.420 --> 00:03:25.170
out to be the least interesting part of
the demo now card games are a great test

00:03:25.170 --> 00:03:25.180
the demo now card games are a great test
 

00:03:25.180 --> 00:03:26.880
the demo now card games are a great test
for overdraw because stacks of them have

00:03:26.880 --> 00:03:26.890
for overdraw because stacks of them have
 

00:03:26.890 --> 00:03:29.430
for overdraw because stacks of them have
a lot of overlapping objects but none of

00:03:29.430 --> 00:03:29.440
a lot of overlapping objects but none of
 

00:03:29.440 --> 00:03:30.900
a lot of overlapping objects but none of
them are transparent like these ones are

00:03:30.900 --> 00:03:30.910
them are transparent like these ones are
 

00:03:30.910 --> 00:03:32.760
them are transparent like these ones are
so there's a huge difference between the

00:03:32.760 --> 00:03:32.770
so there's a huge difference between the
 

00:03:32.770 --> 00:03:34.320
so there's a huge difference between the
number of pixels you draw in the worst

00:03:34.320 --> 00:03:34.330
number of pixels you draw in the worst
 

00:03:34.330 --> 00:03:35.699
number of pixels you draw in the worst
case which is the number you draw in the

00:03:35.699 --> 00:03:35.709
case which is the number you draw in the
 

00:03:35.709 --> 00:03:38.160
case which is the number you draw in the
best case but to get that best case

00:03:38.160 --> 00:03:38.170
best case but to get that best case
 

00:03:38.170 --> 00:03:39.360
best case but to get that best case
performance you have to figure out

00:03:39.360 --> 00:03:39.370
performance you have to figure out
 

00:03:39.370 --> 00:03:41.010
performance you have to figure out
exactly which parts of the card are

00:03:41.010 --> 00:03:41.020
exactly which parts of the card are
 

00:03:41.020 --> 00:03:43.140
exactly which parts of the card are
visible now there's a general algorithm

00:03:43.140 --> 00:03:43.150
visible now there's a general algorithm
 

00:03:43.150 --> 00:03:44.580
visible now there's a general algorithm
for doing that but requires a lot of

00:03:44.580 --> 00:03:44.590
for doing that but requires a lot of
 

00:03:44.590 --> 00:03:45.930
for doing that but requires a lot of
bookkeeping because it involves

00:03:45.930 --> 00:03:45.940
bookkeeping because it involves
 

00:03:45.940 --> 00:03:47.520
bookkeeping because it involves
splitting rectangles into some unknown

00:03:47.520 --> 00:03:47.530
splitting rectangles into some unknown
 

00:03:47.530 --> 00:03:50.640
splitting rectangles into some unknown
number of smaller rectangles now the

00:03:50.640 --> 00:03:50.650
number of smaller rectangles now the
 

00:03:50.650 --> 00:03:51.900
number of smaller rectangles now the
thing you need to understand about Ian

00:03:51.900 --> 00:03:51.910
thing you need to understand about Ian
 

00:03:51.910 --> 00:03:54.030
thing you need to understand about Ian
who was doing this is that he is a C++

00:03:54.030 --> 00:03:54.040
who was doing this is that he is a C++
 

00:03:54.040 --> 00:03:56.460
who was doing this is that he is a C++
programmer more than that he's a game

00:03:56.460 --> 00:03:56.470
programmer more than that he's a game
 

00:03:56.470 --> 00:03:59.370
programmer more than that he's a game
programmer a game written in C++ this

00:03:59.370 --> 00:03:59.380
programmer a game written in C++ this
 

00:03:59.380 --> 00:04:00.720
programmer a game written in C++ this
problem would be the perfect candidate

00:04:00.720 --> 00:04:00.730
problem would be the perfect candidate
 

00:04:00.730 --> 00:04:03.570
problem would be the perfect candidate
for some kind of object pool so he

00:04:03.570 --> 00:04:03.580
for some kind of object pool so he
 

00:04:03.580 --> 00:04:05.370
for some kind of object pool so he
decided to keep all of the rectangles in

00:04:05.370 --> 00:04:05.380
decided to keep all of the rectangles in
 

00:04:05.380 --> 00:04:07.110
decided to keep all of the rectangles in
a simple pool now how many people out

00:04:07.110 --> 00:04:07.120
a simple pool now how many people out
 

00:04:07.120 --> 00:04:09.060
a simple pool now how many people out
there have actually used simple pool in

00:04:09.060 --> 00:04:09.070
there have actually used simple pool in
 

00:04:09.070 --> 00:04:11.759
there have actually used simple pool in
their coding it's part of the support

00:04:11.759 --> 00:04:11.769
their coding it's part of the support
 

00:04:11.769 --> 00:04:13.259
their coding it's part of the support
library I don't think he expected the

00:04:13.259 --> 00:04:13.269
library I don't think he expected the
 

00:04:13.269 --> 00:04:14.640
library I don't think he expected the
object pool to make a huge performance

00:04:14.640 --> 00:04:14.650
object pool to make a huge performance
 

00:04:14.650 --> 00:04:16.380
object pool to make a huge performance
difference but he thought it might help

00:04:16.380 --> 00:04:16.390
difference but he thought it might help
 

00:04:16.390 --> 00:04:19.020
difference but he thought it might help
a little what surprised us both was that

00:04:19.020 --> 00:04:19.030
a little what surprised us both was that
 

00:04:19.030 --> 00:04:20.210
a little what surprised us both was that
it didn't help at all

00:04:20.210 --> 00:04:20.220
it didn't help at all
 

00:04:20.220 --> 00:04:24.240
it didn't help at all
instead it totally tanked I mean the

00:04:24.240 --> 00:04:24.250
instead it totally tanked I mean the
 

00:04:24.250 --> 00:04:26.310
instead it totally tanked I mean the
performance was absolutely abysmal and

00:04:26.310 --> 00:04:26.320
performance was absolutely abysmal and
 

00:04:26.320 --> 00:04:27.660
performance was absolutely abysmal and
so we just

00:04:27.660 --> 00:04:27.670
so we just
 

00:04:27.670 --> 00:04:30.900
so we just
look for answers we started where most

00:04:30.900 --> 00:04:30.910
look for answers we started where most
 

00:04:30.910 --> 00:04:31.770
look for answers we started where most
people start when they have a

00:04:31.770 --> 00:04:31.780
people start when they have a
 

00:04:31.780 --> 00:04:33.930
people start when they have a
performance problem with the sampling

00:04:33.930 --> 00:04:33.940
performance problem with the sampling
 

00:04:33.940 --> 00:04:36.450
performance problem with the sampling
method profiler and traceview how many

00:04:36.450 --> 00:04:36.460
method profiler and traceview how many
 

00:04:36.460 --> 00:04:37.560
method profiler and traceview how many
of you have used Tracy you out there

00:04:37.560 --> 00:04:37.570
of you have used Tracy you out there
 

00:04:37.570 --> 00:04:39.390
of you have used Tracy you out there
come a show of hands oh that's good

00:04:39.390 --> 00:04:39.400
come a show of hands oh that's good
 

00:04:39.400 --> 00:04:40.980
come a show of hands oh that's good
you're listening that's awesome

00:04:40.980 --> 00:04:40.990
you're listening that's awesome
 

00:04:40.990 --> 00:04:42.870
you're listening that's awesome
the profiler isn't as good as this trace

00:04:42.870 --> 00:04:42.880
the profiler isn't as good as this trace
 

00:04:42.880 --> 00:04:44.100
the profiler isn't as good as this trace
at catching intermittent performance

00:04:44.100 --> 00:04:44.110
at catching intermittent performance
 

00:04:44.110 --> 00:04:45.270
at catching intermittent performance
spikes but it's really great at getting

00:04:45.270 --> 00:04:45.280
spikes but it's really great at getting
 

00:04:45.280 --> 00:04:46.650
spikes but it's really great at getting
a big-picture view of what's expensive

00:04:46.650 --> 00:04:46.660
a big-picture view of what's expensive
 

00:04:46.660 --> 00:04:50.340
a big-picture view of what's expensive
and what isn't and here we are the

00:04:50.340 --> 00:04:50.350
and what isn't and here we are the
 

00:04:50.350 --> 00:04:53.820
and what isn't and here we are the
culprit is simple pool release now

00:04:53.820 --> 00:04:53.830
culprit is simple pool release now
 

00:04:53.830 --> 00:04:55.950
culprit is simple pool release now
here's what that code looks like that is

00:04:55.950 --> 00:04:55.960
here's what that code looks like that is
 

00:04:55.960 --> 00:04:58.050
here's what that code looks like that is
in pool line looks kind of suspicious

00:04:58.050 --> 00:04:58.060
in pool line looks kind of suspicious
 

00:04:58.060 --> 00:05:00.540
in pool line looks kind of suspicious
sounds like it might be a linear search

00:05:00.540 --> 00:05:00.550
sounds like it might be a linear search
 

00:05:00.550 --> 00:05:03.720
sounds like it might be a linear search
and of course we look back at our trace

00:05:03.720 --> 00:05:03.730
and of course we look back at our trace
 

00:05:03.730 --> 00:05:06.960
and of course we look back at our trace
you output we also see that is in pool

00:05:06.960 --> 00:05:06.970
you output we also see that is in pool
 

00:05:06.970 --> 00:05:09.330
you output we also see that is in pool
there's right at the top of our list so

00:05:09.330 --> 00:05:09.340
there's right at the top of our list so
 

00:05:09.340 --> 00:05:11.310
there's right at the top of our list so
clearly it's costly and it actually does

00:05:11.310 --> 00:05:11.320
clearly it's costly and it actually does
 

00:05:11.320 --> 00:05:12.690
clearly it's costly and it actually does
do a linear search it goes to check

00:05:12.690 --> 00:05:12.700
do a linear search it goes to check
 

00:05:12.700 --> 00:05:14.220
do a linear search it goes to check
everything in the array to see if it's

00:05:14.220 --> 00:05:14.230
everything in the array to see if it's
 

00:05:14.230 --> 00:05:15.660
everything in the array to see if it's
already in the pool so you have a really

00:05:15.660 --> 00:05:15.670
already in the pool so you have a really
 

00:05:15.670 --> 00:05:17.120
already in the pool so you have a really
big pool it's actually really expensive

00:05:17.120 --> 00:05:17.130
big pool it's actually really expensive
 

00:05:17.130 --> 00:05:19.200
big pool it's actually really expensive
especially since array access is not

00:05:19.200 --> 00:05:19.210
especially since array access is not
 

00:05:19.210 --> 00:05:21.960
especially since array access is not
particularly cheap so we decided to make

00:05:21.960 --> 00:05:21.970
particularly cheap so we decided to make
 

00:05:21.970 --> 00:05:24.720
particularly cheap so we decided to make
it even simpler pool well that was easy

00:05:24.720 --> 00:05:24.730
it even simpler pool well that was easy
 

00:05:24.730 --> 00:05:26.220
it even simpler pool well that was easy
we'll just make our own pool with a

00:05:26.220 --> 00:05:26.230
we'll just make our own pool with a
 

00:05:26.230 --> 00:05:28.980
we'll just make our own pool with a
Cabana waterfall a diving board I mean

00:05:28.980 --> 00:05:28.990
Cabana waterfall a diving board I mean
 

00:05:28.990 --> 00:05:30.630
Cabana waterfall a diving board I mean
with unchecked releases very easy to get

00:05:30.630 --> 00:05:30.640
with unchecked releases very easy to get
 

00:05:30.640 --> 00:05:32.520
with unchecked releases very easy to get
those mixed up we're living on the edge

00:05:32.520 --> 00:05:32.530
those mixed up we're living on the edge
 

00:05:32.530 --> 00:05:35.490
those mixed up we're living on the edge
and of course traits you output looks

00:05:35.490 --> 00:05:35.500
and of course traits you output looks
 

00:05:35.500 --> 00:05:37.320
and of course traits you output looks
like this it fixes our performance

00:05:37.320 --> 00:05:37.330
like this it fixes our performance
 

00:05:37.330 --> 00:05:39.390
like this it fixes our performance
problems yes it turns out you should be

00:05:39.390 --> 00:05:39.400
problems yes it turns out you should be
 

00:05:39.400 --> 00:05:41.070
problems yes it turns out you should be
really careful when using simple pool

00:05:41.070 --> 00:05:41.080
really careful when using simple pool
 

00:05:41.080 --> 00:05:42.810
really careful when using simple pool
that linear search really makes large

00:05:42.810 --> 00:05:42.820
that linear search really makes large
 

00:05:42.820 --> 00:05:45.330
that linear search really makes large
pools slow we could pack up and go home

00:05:45.330 --> 00:05:45.340
pools slow we could pack up and go home
 

00:05:45.340 --> 00:05:46.770
pools slow we could pack up and go home
now but now we've got some code to play

00:05:46.770 --> 00:05:46.780
now but now we've got some code to play
 

00:05:46.780 --> 00:05:50.310
now but now we've got some code to play
with so we decided to find out how big

00:05:50.310 --> 00:05:50.320
with so we decided to find out how big
 

00:05:50.320 --> 00:05:52.770
with so we decided to find out how big
of a deal is allocation in our anyway I

00:05:52.770 --> 00:05:52.780
of a deal is allocation in our anyway I
 

00:05:52.780 --> 00:05:55.410
of a deal is allocation in our anyway I
mean we did some crazy tests like

00:05:55.410 --> 00:05:55.420
mean we did some crazy tests like
 

00:05:55.420 --> 00:05:57.120
mean we did some crazy tests like
allocating thousands and thousands of

00:05:57.120 --> 00:05:57.130
allocating thousands and thousands of
 

00:05:57.130 --> 00:05:59.370
allocating thousands and thousands of
objects in ondraw and we found that in

00:05:59.370 --> 00:05:59.380
objects in ondraw and we found that in
 

00:05:59.380 --> 00:06:01.410
objects in ondraw and we found that in
most cases unless the object was really

00:06:01.410 --> 00:06:01.420
most cases unless the object was really
 

00:06:01.420 --> 00:06:03.750
most cases unless the object was really
expensive to create like a paint object

00:06:03.750 --> 00:06:03.760
expensive to create like a paint object
 

00:06:03.760 --> 00:06:05.190
expensive to create like a paint object
it didn't really affect our frame rate

00:06:05.190 --> 00:06:05.200
it didn't really affect our frame rate
 

00:06:05.200 --> 00:06:09.840
it didn't really affect our frame rate
and we're like I mean no we didn't just

00:06:09.840 --> 00:06:09.850
and we're like I mean no we didn't just
 

00:06:09.850 --> 00:06:11.310
and we're like I mean no we didn't just
suddenly find out that allocations were

00:06:11.310 --> 00:06:11.320
suddenly find out that allocations were
 

00:06:11.320 --> 00:06:13.770
suddenly find out that allocations were
free all that stuff Colt McAnlis told

00:06:13.770 --> 00:06:13.780
free all that stuff Colt McAnlis told
 

00:06:13.780 --> 00:06:16.200
free all that stuff Colt McAnlis told
you is still true what this experience

00:06:16.200 --> 00:06:16.210
you is still true what this experience
 

00:06:16.210 --> 00:06:17.820
you is still true what this experience
taught us was that we didn't understand

00:06:17.820 --> 00:06:17.830
taught us was that we didn't understand
 

00:06:17.830 --> 00:06:19.470
taught us was that we didn't understand
how allocations affected performance

00:06:19.470 --> 00:06:19.480
how allocations affected performance
 

00:06:19.480 --> 00:06:21.750
how allocations affected performance
quite as well as we thought we did and

00:06:21.750 --> 00:06:21.760
quite as well as we thought we did and
 

00:06:21.760 --> 00:06:22.890
quite as well as we thought we did and
when you start seeing performance

00:06:22.890 --> 00:06:22.900
when you start seeing performance
 

00:06:22.900 --> 00:06:25.290
when you start seeing performance
numbers that you don't expect that's a

00:06:25.290 --> 00:06:25.300
numbers that you don't expect that's a
 

00:06:25.300 --> 00:06:26.880
numbers that you don't expect that's a
perfect time to start digging into the

00:06:26.880 --> 00:06:26.890
perfect time to start digging into the
 

00:06:26.890 --> 00:06:30.210
perfect time to start digging into the
code so off to the debugger I know

00:06:30.210 --> 00:06:30.220
code so off to the debugger I know
 

00:06:30.220 --> 00:06:31.770
code so off to the debugger I know
you're thinking I love reading through

00:06:31.770 --> 00:06:31.780
you're thinking I love reading through
 

00:06:31.780 --> 00:06:33.210
you're thinking I love reading through
code as much as the next crazy person

00:06:33.210 --> 00:06:33.220
code as much as the next crazy person
 

00:06:33.220 --> 00:06:34.320
code as much as the next crazy person
but sometimes you just got to step

00:06:34.320 --> 00:06:34.330
but sometimes you just got to step
 

00:06:34.330 --> 00:06:35.940
but sometimes you just got to step
through it to understand it now there's

00:06:35.940 --> 00:06:35.950
through it to understand it now there's
 

00:06:35.950 --> 00:06:37.680
through it to understand it now there's
a lot of ways to debug the Android

00:06:37.680 --> 00:06:37.690
a lot of ways to debug the Android
 

00:06:37.690 --> 00:06:38.160
a lot of ways to debug the Android
runtime

00:06:38.160 --> 00:06:38.170
runtime
 

00:06:38.170 --> 00:06:40.020
runtime
some are easy and some are hard and

00:06:40.020 --> 00:06:40.030
some are easy and some are hard and
 

00:06:40.030 --> 00:06:41.430
some are easy and some are hard and
let's make things easy on

00:06:41.430 --> 00:06:41.440
let's make things easy on
 

00:06:41.440 --> 00:06:43.740
let's make things easy on
ourselves first and this is gonna shock

00:06:43.740 --> 00:06:43.750
ourselves first and this is gonna shock
 

00:06:43.750 --> 00:06:46.440
ourselves first and this is gonna shock
you we're actually gonna debug an

00:06:46.440 --> 00:06:46.450
you we're actually gonna debug an
 

00:06:46.450 --> 00:06:49.620
you we're actually gonna debug an
emulator build okay now how many of you

00:06:49.620 --> 00:06:49.630
emulator build okay now how many of you
 

00:06:49.630 --> 00:06:51.090
emulator build okay now how many of you
actually use the emulator when you're

00:06:51.090 --> 00:06:51.100
actually use the emulator when you're
 

00:06:51.100 --> 00:06:52.110
actually use the emulator when you're
when you're writing Android software

00:06:52.110 --> 00:06:52.120
when you're writing Android software
 

00:06:52.120 --> 00:06:56.760
when you're writing Android software
okay well so devices are kind of finicky

00:06:56.760 --> 00:06:56.770
okay well so devices are kind of finicky
 

00:06:56.770 --> 00:06:58.110
okay well so devices are kind of finicky
so our network connections and USB

00:06:58.110 --> 00:06:58.120
so our network connections and USB
 

00:06:58.120 --> 00:06:59.160
so our network connections and USB
cables we're actually gonna be doing a

00:06:59.160 --> 00:06:59.170
cables we're actually gonna be doing a
 

00:06:59.170 --> 00:07:01.140
cables we're actually gonna be doing a
lot of native debugging and unless

00:07:01.140 --> 00:07:01.150
lot of native debugging and unless
 

00:07:01.150 --> 00:07:03.330
lot of native debugging and unless
you're trying to you know debug an issue

00:07:03.330 --> 00:07:03.340
you're trying to you know debug an issue
 

00:07:03.340 --> 00:07:04.770
you're trying to you know debug an issue
with hardware code generation there's

00:07:04.770 --> 00:07:04.780
with hardware code generation there's
 

00:07:04.780 --> 00:07:06.600
with hardware code generation there's
really not a big difference these days

00:07:06.600 --> 00:07:06.610
really not a big difference these days
 

00:07:06.610 --> 00:07:08.070
really not a big difference these days
between debugging against the emulator

00:07:08.070 --> 00:07:08.080
between debugging against the emulator
 

00:07:08.080 --> 00:07:11.280
between debugging against the emulator
and a real device in addition when

00:07:11.280 --> 00:07:11.290
and a real device in addition when
 

00:07:11.290 --> 00:07:12.570
and a real device in addition when
you're running on the emulator you get

00:07:12.570 --> 00:07:12.580
you're running on the emulator you get
 

00:07:12.580 --> 00:07:15.210
you're running on the emulator you get
to run as root and our images also

00:07:15.210 --> 00:07:15.220
to run as root and our images also
 

00:07:15.220 --> 00:07:16.680
to run as root and our images also
include a version of gdb server so

00:07:16.680 --> 00:07:16.690
include a version of gdb server so
 

00:07:16.690 --> 00:07:18.030
include a version of gdb server so
you've got super super reliable

00:07:18.030 --> 00:07:18.040
you've got super super reliable
 

00:07:18.040 --> 00:07:20.310
you've got super super reliable
debugging believe it or not if you need

00:07:20.310 --> 00:07:20.320
debugging believe it or not if you need
 

00:07:20.320 --> 00:07:23.310
debugging believe it or not if you need
to do native debugging on Android second

00:07:23.310 --> 00:07:23.320
to do native debugging on Android second
 

00:07:23.320 --> 00:07:26.490
to do native debugging on Android second
we get to avoid using ADB which is

00:07:26.490 --> 00:07:26.500
we get to avoid using ADB which is
 

00:07:26.500 --> 00:07:29.730
we get to avoid using ADB which is
really cool why because ADB was designed

00:07:29.730 --> 00:07:29.740
really cool why because ADB was designed
 

00:07:29.740 --> 00:07:32.670
really cool why because ADB was designed
to be cheap slow and reliable and if

00:07:32.670 --> 00:07:32.680
to be cheap slow and reliable and if
 

00:07:32.680 --> 00:07:34.680
to be cheap slow and reliable and if
really manages to achieve two of those

00:07:34.680 --> 00:07:34.690
really manages to achieve two of those
 

00:07:34.690 --> 00:07:37.760
really manages to achieve two of those
goals

00:07:37.760 --> 00:07:37.770
 
 

00:07:37.770 --> 00:07:41.340
 
now ADB is okay if you're using the gdb

00:07:41.340 --> 00:07:41.350
now ADB is okay if you're using the gdb
 

00:07:41.350 --> 00:07:43.500
now ADB is okay if you're using the gdb
command-line you know which I know some

00:07:43.500 --> 00:07:43.510
command-line you know which I know some
 

00:07:43.510 --> 00:07:45.659
command-line you know which I know some
of you are totally into so if you're one

00:07:45.659 --> 00:07:45.669
of you are totally into so if you're one
 

00:07:45.669 --> 00:07:47.130
of you are totally into so if you're one
of those people just go back to your

00:07:47.130 --> 00:07:47.140
of those people just go back to your
 

00:07:47.140 --> 00:07:49.620
of those people just go back to your
Emacs or whatever for a minute or two

00:07:49.620 --> 00:07:49.630
Emacs or whatever for a minute or two
 

00:07:49.630 --> 00:07:52.950
Emacs or whatever for a minute or two
while I talk to everyone else when I'm

00:07:52.950 --> 00:07:52.960
while I talk to everyone else when I'm
 

00:07:52.960 --> 00:07:54.600
while I talk to everyone else when I'm
stepping through unknown code I really

00:07:54.600 --> 00:07:54.610
stepping through unknown code I really
 

00:07:54.610 --> 00:07:56.400
stepping through unknown code I really
prefer to use some kind of GUI now the

00:07:56.400 --> 00:07:56.410
prefer to use some kind of GUI now the
 

00:07:56.410 --> 00:07:58.500
prefer to use some kind of GUI now the
ian is a huge fan of QT creator because

00:07:58.500 --> 00:07:58.510
ian is a huge fan of QT creator because
 

00:07:58.510 --> 00:08:01.100
ian is a huge fan of QT creator because
it's free and because it's not eclipse

00:08:01.100 --> 00:08:01.110
it's free and because it's not eclipse
 

00:08:01.110 --> 00:08:04.770
it's free and because it's not eclipse
but adb can't handle the amount of gdb

00:08:04.770 --> 00:08:04.780
but adb can't handle the amount of gdb
 

00:08:04.780 --> 00:08:06.630
but adb can't handle the amount of gdb
traffic that an idea like that generates

00:08:06.630 --> 00:08:06.640
traffic that an idea like that generates
 

00:08:06.640 --> 00:08:08.159
traffic that an idea like that generates
it works for a while but at some point

00:08:08.159 --> 00:08:08.169
it works for a while but at some point
 

00:08:08.169 --> 00:08:10.560
it works for a while but at some point
it just decides to quit but fortunately

00:08:10.560 --> 00:08:10.570
it just decides to quit but fortunately
 

00:08:10.570 --> 00:08:12.120
it just decides to quit but fortunately
the emulator has its own IP port

00:08:12.120 --> 00:08:12.130
the emulator has its own IP port
 

00:08:12.130 --> 00:08:14.159
the emulator has its own IP port
redirector that doesn't rely on adb and

00:08:14.159 --> 00:08:14.169
redirector that doesn't rely on adb and
 

00:08:14.169 --> 00:08:15.720
redirector that doesn't rely on adb and
my experience with that is that it's

00:08:15.720 --> 00:08:15.730
my experience with that is that it's
 

00:08:15.730 --> 00:08:19.710
my experience with that is that it's
really really solid third download the

00:08:19.710 --> 00:08:19.720
really really solid third download the
 

00:08:19.720 --> 00:08:21.630
really really solid third download the
AOSP codebase and build your own

00:08:21.630 --> 00:08:21.640
AOSP codebase and build your own
 

00:08:21.640 --> 00:08:23.760
AOSP codebase and build your own
emulator image now you don't have to do

00:08:23.760 --> 00:08:23.770
emulator image now you don't have to do
 

00:08:23.770 --> 00:08:27.300
emulator image now you don't have to do
this but it's so totally worth it for

00:08:27.300 --> 00:08:27.310
this but it's so totally worth it for
 

00:08:27.310 --> 00:08:28.380
this but it's so totally worth it for
one thing you don't have to worry about

00:08:28.380 --> 00:08:28.390
one thing you don't have to worry about
 

00:08:28.390 --> 00:08:30.480
one thing you don't have to worry about
your sources symbols and binaries being

00:08:30.480 --> 00:08:30.490
your sources symbols and binaries being
 

00:08:30.490 --> 00:08:32.909
your sources symbols and binaries being
in sync for another thing and this is

00:08:32.909 --> 00:08:32.919
in sync for another thing and this is
 

00:08:32.919 --> 00:08:33.870
in sync for another thing and this is
really important for this particular

00:08:33.870 --> 00:08:33.880
really important for this particular
 

00:08:33.880 --> 00:08:35.700
really important for this particular
quest you can actually disable

00:08:35.700 --> 00:08:35.710
quest you can actually disable
 

00:08:35.710 --> 00:08:37.770
quest you can actually disable
optimizations on modules you want to

00:08:37.770 --> 00:08:37.780
optimizations on modules you want to
 

00:08:37.780 --> 00:08:39.870
optimizations on modules you want to
debug which make make stepping through

00:08:39.870 --> 00:08:39.880
debug which make make stepping through
 

00:08:39.880 --> 00:08:42.540
debug which make make stepping through
the code a lot easier now once you have

00:08:42.540 --> 00:08:42.550
the code a lot easier now once you have
 

00:08:42.550 --> 00:08:44.280
the code a lot easier now once you have
a rock-solid debugger attached to the

00:08:44.280 --> 00:08:44.290
a rock-solid debugger attached to the
 

00:08:44.290 --> 00:08:47.010
a rock-solid debugger attached to the
runtime it's kind of addictive I mean

00:08:47.010 --> 00:08:47.020
runtime it's kind of addictive I mean
 

00:08:47.020 --> 00:08:49.560
runtime it's kind of addictive I mean
you're seeing Android from a completely

00:08:49.560 --> 00:08:49.570
you're seeing Android from a completely
 

00:08:49.570 --> 00:08:52.230
you're seeing Android from a completely
new angle it's like you've been poking

00:08:52.230 --> 00:08:52.240
new angle it's like you've been poking
 

00:08:52.240 --> 00:08:53.420
new angle it's like you've been poking
around a cave with

00:08:53.420 --> 00:08:53.430
around a cave with
 

00:08:53.430 --> 00:08:55.220
around a cave with
candle and someone just gave you this

00:08:55.220 --> 00:08:55.230
candle and someone just gave you this
 

00:08:55.230 --> 00:08:57.710
candle and someone just gave you this
high-powered flashlight and if you're

00:08:57.710 --> 00:08:57.720
high-powered flashlight and if you're
 

00:08:57.720 --> 00:08:59.510
high-powered flashlight and if you're
running a Windows box building Android

00:08:59.510 --> 00:08:59.520
running a Windows box building Android
 

00:08:59.520 --> 00:09:03.700
running a Windows box building Android
is a good excuse to install Linux VM

00:09:03.700 --> 00:09:03.710
 
 

00:09:03.710 --> 00:09:06.380
 
alright let's start with my favorite

00:09:06.380 --> 00:09:06.390
alright let's start with my favorite
 

00:09:06.390 --> 00:09:07.880
alright let's start with my favorite
piece of code the bytecode interpreter

00:09:07.880 --> 00:09:07.890
piece of code the bytecode interpreter
 

00:09:07.890 --> 00:09:09.290
piece of code the bytecode interpreter
now there are actually two different

00:09:09.290 --> 00:09:09.300
now there are actually two different
 

00:09:09.300 --> 00:09:10.910
now there are actually two different
implementations depending on how you

00:09:10.910 --> 00:09:10.920
implementations depending on how you
 

00:09:10.920 --> 00:09:15.139
implementations depending on how you
compile it one is a go to table

00:09:15.139 --> 00:09:15.149
compile it one is a go to table
 

00:09:15.149 --> 00:09:17.060
compile it one is a go to table
implementation which is one of those

00:09:17.060 --> 00:09:17.070
implementation which is one of those
 

00:09:17.070 --> 00:09:18.740
implementation which is one of those
pieces of code that simultaneously

00:09:18.740 --> 00:09:18.750
pieces of code that simultaneously
 

00:09:18.750 --> 00:09:22.519
pieces of code that simultaneously
proves why C macros are horrible and why

00:09:22.519 --> 00:09:22.529
proves why C macros are horrible and why
 

00:09:22.529 --> 00:09:25.310
proves why C macros are horrible and why
they're never going to go away but

00:09:25.310 --> 00:09:25.320
they're never going to go away but
 

00:09:25.320 --> 00:09:26.510
they're never going to go away but
fortunately if you set the right

00:09:26.510 --> 00:09:26.520
fortunately if you set the right
 

00:09:26.520 --> 00:09:27.980
fortunately if you set the right
compiler options you get the

00:09:27.980 --> 00:09:27.990
compiler options you get the
 

00:09:27.990 --> 00:09:29.780
compiler options you get the
implementation in interpreter switch

00:09:29.780 --> 00:09:29.790
implementation in interpreter switch
 

00:09:29.790 --> 00:09:33.199
implementation in interpreter switch
imple dot c c which looks exactly like

00:09:33.199 --> 00:09:33.209
imple dot c c which looks exactly like
 

00:09:33.209 --> 00:09:35.300
imple dot c c which looks exactly like
you always thought it would just one

00:09:35.300 --> 00:09:35.310
you always thought it would just one
 

00:09:35.310 --> 00:09:37.250
you always thought it would just one
giant switch statement with a case for

00:09:37.250 --> 00:09:37.260
giant switch statement with a case for
 

00:09:37.260 --> 00:09:39.139
giant switch statement with a case for
each opcode if you've been struggling to

00:09:39.139 --> 00:09:39.149
each opcode if you've been struggling to
 

00:09:39.149 --> 00:09:40.160
each opcode if you've been struggling to
figure out what's going on in the

00:09:40.160 --> 00:09:40.170
figure out what's going on in the
 

00:09:40.170 --> 00:09:41.750
figure out what's going on in the
interpreter just sing this enough is to

00:09:41.750 --> 00:09:41.760
interpreter just sing this enough is to
 

00:09:41.760 --> 00:09:44.449
interpreter just sing this enough is to
make you cry it doesn't see as much

00:09:44.449 --> 00:09:44.459
make you cry it doesn't see as much
 

00:09:44.459 --> 00:09:46.190
make you cry it doesn't see as much
traffic as it used to because of all the

00:09:46.190 --> 00:09:46.200
traffic as it used to because of all the
 

00:09:46.200 --> 00:09:48.019
traffic as it used to because of all the
head ahead of time compiling but if you

00:09:48.019 --> 00:09:48.029
head ahead of time compiling but if you
 

00:09:48.029 --> 00:09:49.850
head ahead of time compiling but if you
turn that off this piece of code becomes

00:09:49.850 --> 00:09:49.860
turn that off this piece of code becomes
 

00:09:49.860 --> 00:09:51.769
turn that off this piece of code becomes
the leeks cafe a Mac kind of switch

00:09:51.769 --> 00:09:51.779
the leeks cafe a Mac kind of switch
 

00:09:51.779 --> 00:09:54.440
the leeks cafe a Mac kind of switch
statements everybody comes here which

00:09:54.440 --> 00:09:54.450
statements everybody comes here which
 

00:09:54.450 --> 00:09:55.970
statements everybody comes here which
makes it the perfect place to set some

00:09:55.970 --> 00:09:55.980
makes it the perfect place to set some
 

00:09:55.980 --> 00:09:57.620
makes it the perfect place to set some
breakpoints and learn how the runtime

00:09:57.620 --> 00:09:57.630
breakpoints and learn how the runtime
 

00:09:57.630 --> 00:10:01.160
breakpoints and learn how the runtime
works now since we're trying to minimize

00:10:01.160 --> 00:10:01.170
works now since we're trying to minimize
 

00:10:01.170 --> 00:10:03.920
works now since we're trying to minimize
our allocation costs maybe we should

00:10:03.920 --> 00:10:03.930
our allocation costs maybe we should
 

00:10:03.930 --> 00:10:05.269
our allocation costs maybe we should
start by looking at how object

00:10:05.269 --> 00:10:05.279
start by looking at how object
 

00:10:05.279 --> 00:10:07.310
start by looking at how object
allocation actually happens now all

00:10:07.310 --> 00:10:07.320
allocation actually happens now all
 

00:10:07.320 --> 00:10:09.170
allocation actually happens now all
object allocation starts at the same

00:10:09.170 --> 00:10:09.180
object allocation starts at the same
 

00:10:09.180 --> 00:10:10.730
object allocation starts at the same
place in this interpreter which is this

00:10:10.730 --> 00:10:10.740
place in this interpreter which is this
 

00:10:10.740 --> 00:10:14.690
place in this interpreter which is this
new instance dalvik opcode but as soon

00:10:14.690 --> 00:10:14.700
new instance dalvik opcode but as soon
 

00:10:14.700 --> 00:10:16.010
new instance dalvik opcode but as soon
as we get into the implementation of

00:10:16.010 --> 00:10:16.020
as we get into the implementation of
 

00:10:16.020 --> 00:10:21.500
as we get into the implementation of
that object so it turns out that the art

00:10:21.500 --> 00:10:21.510
that object so it turns out that the art
 

00:10:21.510 --> 00:10:23.960
that object so it turns out that the art
memory system is massively polymorphic

00:10:23.960 --> 00:10:23.970
memory system is massively polymorphic
 

00:10:23.970 --> 00:10:26.390
memory system is massively polymorphic
there are actually eight different kinds

00:10:26.390 --> 00:10:26.400
there are actually eight different kinds
 

00:10:26.400 --> 00:10:28.130
there are actually eight different kinds
of allocators that might be returned

00:10:28.130 --> 00:10:28.140
of allocators that might be returned
 

00:10:28.140 --> 00:10:30.100
of allocators that might be returned
from get current allocator

00:10:30.100 --> 00:10:30.110
from get current allocator
 

00:10:30.110 --> 00:10:32.180
from get current allocator
now this is one of those points where

00:10:32.180 --> 00:10:32.190
now this is one of those points where
 

00:10:32.190 --> 00:10:33.500
now this is one of those points where
it's really great to be stepping through

00:10:33.500 --> 00:10:33.510
it's really great to be stepping through
 

00:10:33.510 --> 00:10:34.880
it's really great to be stepping through
in the debugger instead of just reading

00:10:34.880 --> 00:10:34.890
in the debugger instead of just reading
 

00:10:34.890 --> 00:10:36.949
in the debugger instead of just reading
the code because we can see exactly what

00:10:36.949 --> 00:10:36.959
the code because we can see exactly what
 

00:10:36.959 --> 00:10:39.470
the code because we can see exactly what
we're getting which is Ra's alack I mean

00:10:39.470 --> 00:10:39.480
we're getting which is Ra's alack I mean
 

00:10:39.480 --> 00:10:43.400
we're getting which is Ra's alack I mean
not always but usually and Roz stands

00:10:43.400 --> 00:10:43.410
not always but usually and Roz stands
 

00:10:43.410 --> 00:10:46.610
not always but usually and Roz stands
for run of slots which is basically a

00:10:46.610 --> 00:10:46.620
for run of slots which is basically a
 

00:10:46.620 --> 00:10:48.800
for run of slots which is basically a
fancy-pants way of saying fixed sized

00:10:48.800 --> 00:10:48.810
fancy-pants way of saying fixed sized
 

00:10:48.810 --> 00:10:54.230
fancy-pants way of saying fixed sized
block allocator the slot is a fixed size

00:10:54.230 --> 00:10:54.240
block allocator the slot is a fixed size
 

00:10:54.240 --> 00:10:58.550
block allocator the slot is a fixed size
block the run is an array of those

00:10:58.550 --> 00:10:58.560
block the run is an array of those
 

00:10:58.560 --> 00:11:01.880
block the run is an array of those
blocks and the allocator owns a set of

00:11:01.880 --> 00:11:01.890
blocks and the allocator owns a set of
 

00:11:01.890 --> 00:11:05.150
blocks and the allocator owns a set of
runs now each rod has a different slot

00:11:05.150 --> 00:11:05.160
runs now each rod has a different slot
 

00:11:05.160 --> 00:11:06.710
runs now each rod has a different slot
size to a connote hold

00:11:06.710 --> 00:11:06.720
size to a connote hold
 

00:11:06.720 --> 00:11:08.679
size to a connote hold
objective that size or smaller and

00:11:08.679 --> 00:11:08.689
objective that size or smaller and
 

00:11:08.689 --> 00:11:11.960
objective that size or smaller and
unlike my diagram the number of slots in

00:11:11.960 --> 00:11:11.970
unlike my diagram the number of slots in
 

00:11:11.970 --> 00:11:13.939
unlike my diagram the number of slots in
each run is actually calculated to make

00:11:13.939 --> 00:11:13.949
each run is actually calculated to make
 

00:11:13.949 --> 00:11:15.860
each run is actually calculated to make
the run and as close to a page boundary

00:11:15.860 --> 00:11:15.870
the run and as close to a page boundary
 

00:11:15.870 --> 00:11:18.889
the run and as close to a page boundary
as possible now this is an awesome

00:11:18.889 --> 00:11:18.899
as possible now this is an awesome
 

00:11:18.899 --> 00:11:21.679
as possible now this is an awesome
allocator it's not the most efficient as

00:11:21.679 --> 00:11:21.689
allocator it's not the most efficient as
 

00:11:21.689 --> 00:11:23.240
allocator it's not the most efficient as
far as memory usage but it's got two

00:11:23.240 --> 00:11:23.250
far as memory usage but it's got two
 

00:11:23.250 --> 00:11:25.730
far as memory usage but it's got two
really nice advantages one is that it's

00:11:25.730 --> 00:11:25.740
really nice advantages one is that it's
 

00:11:25.740 --> 00:11:28.540
really nice advantages one is that it's
practically immune to fragmentation

00:11:28.540 --> 00:11:28.550
practically immune to fragmentation
 

00:11:28.550 --> 00:11:31.460
practically immune to fragmentation
second bookkeeping is really easy you

00:11:31.460 --> 00:11:31.470
second bookkeeping is really easy you
 

00:11:31.470 --> 00:11:33.230
second bookkeeping is really easy you
never need to split or coalesce blocks

00:11:33.230 --> 00:11:33.240
never need to split or coalesce blocks
 

00:11:33.240 --> 00:11:34.670
never need to split or coalesce blocks
and you don't need to store the size of

00:11:34.670 --> 00:11:34.680
and you don't need to store the size of
 

00:11:34.680 --> 00:11:36.530
and you don't need to store the size of
each allocation because the address of

00:11:36.530 --> 00:11:36.540
each allocation because the address of
 

00:11:36.540 --> 00:11:38.179
each allocation because the address of
the allocation tells you everything you

00:11:38.179 --> 00:11:38.189
the allocation tells you everything you
 

00:11:38.189 --> 00:11:40.400
the allocation tells you everything you
need to know so even though you waste a

00:11:40.400 --> 00:11:40.410
need to know so even though you waste a
 

00:11:40.410 --> 00:11:42.019
need to know so even though you waste a
little space the end of any object

00:11:42.019 --> 00:11:42.029
little space the end of any object
 

00:11:42.029 --> 00:11:43.670
little space the end of any object
that's not exactly the size of its slot

00:11:43.670 --> 00:11:43.680
that's not exactly the size of its slot
 

00:11:43.680 --> 00:11:45.410
that's not exactly the size of its slot
its slot you get some of that back

00:11:45.410 --> 00:11:45.420
its slot you get some of that back
 

00:11:45.420 --> 00:11:47.600
its slot you get some of that back
without by not having to store any extra

00:11:47.600 --> 00:11:47.610
without by not having to store any extra
 

00:11:47.610 --> 00:11:51.019
without by not having to store any extra
cruft alongside it in the heap so not to

00:11:51.019 --> 00:11:51.029
cruft alongside it in the heap so not to
 

00:11:51.029 --> 00:11:52.699
cruft alongside it in the heap so not to
mention that it avoids date alignment

00:11:52.699 --> 00:11:52.709
mention that it avoids date alignment
 

00:11:52.709 --> 00:11:53.869
mention that it avoids date alignment
problems if you happen to have any of

00:11:53.869 --> 00:11:53.879
problems if you happen to have any of
 

00:11:53.879 --> 00:11:56.809
problems if you happen to have any of
those there's one really interesting way

00:11:56.809 --> 00:11:56.819
those there's one really interesting way
 

00:11:56.819 --> 00:11:58.129
those there's one really interesting way
that Roz alec is different from the

00:11:58.129 --> 00:11:58.139
that Roz alec is different from the
 

00:11:58.139 --> 00:12:00.110
that Roz alec is different from the
alligators you see in things like game

00:12:00.110 --> 00:12:00.120
alligators you see in things like game
 

00:12:00.120 --> 00:12:01.910
alligators you see in things like game
programming because game programmers

00:12:01.910 --> 00:12:01.920
programming because game programmers
 

00:12:01.920 --> 00:12:03.829
programming because game programmers
tend to use a stack to keep track of

00:12:03.829 --> 00:12:03.839
tend to use a stack to keep track of
 

00:12:03.839 --> 00:12:05.840
tend to use a stack to keep track of
free elements now you can implement that

00:12:05.840 --> 00:12:05.850
free elements now you can implement that
 

00:12:05.850 --> 00:12:07.550
free elements now you can implement that
in a little array of bytes or shorts

00:12:07.550 --> 00:12:07.560
in a little array of bytes or shorts
 

00:12:07.560 --> 00:12:08.749
in a little array of bytes or shorts
that has the same number of elements as

00:12:08.749 --> 00:12:08.759
that has the same number of elements as
 

00:12:08.759 --> 00:12:11.150
that has the same number of elements as
there are slots in the run and it lets

00:12:11.150 --> 00:12:11.160
there are slots in the run and it lets
 

00:12:11.160 --> 00:12:12.350
there are slots in the run and it lets
you do both allocations and

00:12:12.350 --> 00:12:12.360
you do both allocations and
 

00:12:12.360 --> 00:12:15.439
you do both allocations and
deallocations in constant time Roz alec

00:12:15.439 --> 00:12:15.449
deallocations in constant time Roz alec
 

00:12:15.449 --> 00:12:17.869
deallocations in constant time Roz alec
on the other hand treats tracks free

00:12:17.869 --> 00:12:17.879
on the other hand treats tracks free
 

00:12:17.879 --> 00:12:20.689
on the other hand treats tracks free
slots in a bitmap to allocate you

00:12:20.689 --> 00:12:20.699
slots in a bitmap to allocate you
 

00:12:20.699 --> 00:12:21.949
slots in a bitmap to allocate you
actually have to look through the bitmap

00:12:21.949 --> 00:12:21.959
actually have to look through the bitmap
 

00:12:21.959 --> 00:12:24.110
actually have to look through the bitmap
TIFF until you find a zero now

00:12:24.110 --> 00:12:24.120
TIFF until you find a zero now
 

00:12:24.120 --> 00:12:27.290
TIFF until you find a zero now
technically that's an O n operation and

00:12:27.290 --> 00:12:27.300
technically that's an O n operation and
 

00:12:27.300 --> 00:12:28.490
technically that's an O n operation and
when I first look at this I thought it

00:12:28.490 --> 00:12:28.500
when I first look at this I thought it
 

00:12:28.500 --> 00:12:29.269
when I first look at this I thought it
was kind of weird

00:12:29.269 --> 00:12:29.279
was kind of weird
 

00:12:29.279 --> 00:12:31.280
was kind of weird
and I thought it was kind of interesting

00:12:31.280 --> 00:12:31.290
and I thought it was kind of interesting
 

00:12:31.290 --> 00:12:34.400
and I thought it was kind of interesting
and then I realized it was freaking

00:12:34.400 --> 00:12:34.410
and then I realized it was freaking
 

00:12:34.410 --> 00:12:35.660
and then I realized it was freaking
brilliant okay

00:12:35.660 --> 00:12:35.670
brilliant okay
 

00:12:35.670 --> 00:12:38.840
brilliant okay
and here's why first off yes the

00:12:38.840 --> 00:12:38.850
and here's why first off yes the
 

00:12:38.850 --> 00:12:40.939
and here's why first off yes the
allocation is order n but remember these

00:12:40.939 --> 00:12:40.949
allocation is order n but remember these
 

00:12:40.949 --> 00:12:42.679
allocation is order n but remember these
are actually fairly small little groups

00:12:42.679 --> 00:12:42.689
are actually fairly small little groups
 

00:12:42.689 --> 00:12:44.389
are actually fairly small little groups
you're allocating from so it's n times a

00:12:44.389 --> 00:12:44.399
you're allocating from so it's n times a
 

00:12:44.399 --> 00:12:47.389
you're allocating from so it's n times a
very small constant furthermore most

00:12:47.389 --> 00:12:47.399
very small constant furthermore most
 

00:12:47.399 --> 00:12:50.269
very small constant furthermore most
CPUs can find the first cleared bit in a

00:12:50.269 --> 00:12:50.279
CPUs can find the first cleared bit in a
 

00:12:50.279 --> 00:12:52.309
CPUs can find the first cleared bit in a
word on a single instruction so the

00:12:52.309 --> 00:12:52.319
word on a single instruction so the
 

00:12:52.319 --> 00:12:54.079
word on a single instruction so the
worst cake waste the first taste

00:12:54.079 --> 00:12:54.089
worst cake waste the first taste
 

00:12:54.089 --> 00:12:55.850
worst cake waste the first taste
allocation cost is just the number of

00:12:55.850 --> 00:12:55.860
allocation cost is just the number of
 

00:12:55.860 --> 00:12:58.040
allocation cost is just the number of
slots divided by the number of bits in a

00:12:58.040 --> 00:12:58.050
slots divided by the number of bits in a
 

00:12:58.050 --> 00:13:00.499
slots divided by the number of bits in a
machine work on Android we actually

00:13:00.499 --> 00:13:00.509
machine work on Android we actually
 

00:13:00.509 --> 00:13:01.999
machine work on Android we actually
negate the bitmap board and then use

00:13:01.999 --> 00:13:02.009
negate the bitmap board and then use
 

00:13:02.009 --> 00:13:03.679
negate the bitmap board and then use
something called underscore built-in

00:13:03.679 --> 00:13:03.689
something called underscore built-in
 

00:13:03.689 --> 00:13:05.869
something called underscore built-in
underscore ffs to find the index of the

00:13:05.869 --> 00:13:05.879
underscore ffs to find the index of the
 

00:13:05.879 --> 00:13:07.879
underscore ffs to find the index of the
first non set bit so we actually use a

00:13:07.879 --> 00:13:07.889
first non set bit so we actually use a
 

00:13:07.889 --> 00:13:10.639
first non set bit so we actually use a
compiler intrinsic for that and that's

00:13:10.639 --> 00:13:10.649
compiler intrinsic for that and that's
 

00:13:10.649 --> 00:13:11.949
compiler intrinsic for that and that's
not even the brilliant part though

00:13:11.949 --> 00:13:11.959
not even the brilliant part though
 

00:13:11.959 --> 00:13:13.819
not even the brilliant part though
because the brilliant part is what

00:13:13.819 --> 00:13:13.829
because the brilliant part is what
 

00:13:13.829 --> 00:13:16.340
because the brilliant part is what
happens on D allocation because

00:13:16.340 --> 00:13:16.350
happens on D allocation because
 

00:13:16.350 --> 00:13:17.929
happens on D allocation because
allocation in a multi-threaded

00:13:17.929 --> 00:13:17.939
allocation in a multi-threaded
 

00:13:17.939 --> 00:13:20.630
allocation in a multi-threaded
environment is a huge pain

00:13:20.630 --> 00:13:20.640
environment is a huge pain
 

00:13:20.640 --> 00:13:22.790
environment is a huge pain
the best way to make it fast is to

00:13:22.790 --> 00:13:22.800
the best way to make it fast is to
 

00:13:22.800 --> 00:13:24.800
the best way to make it fast is to
remove the concurrency just give each

00:13:24.800 --> 00:13:24.810
remove the concurrency just give each
 

00:13:24.810 --> 00:13:26.930
remove the concurrency just give each
thread its own separate allocator make

00:13:26.930 --> 00:13:26.940
thread its own separate allocator make
 

00:13:26.940 --> 00:13:28.730
thread its own separate allocator make
that and make a rule that memory has to

00:13:28.730 --> 00:13:28.740
that and make a rule that memory has to
 

00:13:28.740 --> 00:13:29.900
that and make a rule that memory has to
be freed on the same thread that

00:13:29.900 --> 00:13:29.910
be freed on the same thread that
 

00:13:29.910 --> 00:13:32.900
be freed on the same thread that
allocated it but that really sucks for

00:13:32.900 --> 00:13:32.910
allocated it but that really sucks for
 

00:13:32.910 --> 00:13:34.759
allocated it but that really sucks for
garbage collection because part of the

00:13:34.759 --> 00:13:34.769
garbage collection because part of the
 

00:13:34.769 --> 00:13:36.319
garbage collection because part of the
appeal is that you can do a lot of the

00:13:36.319 --> 00:13:36.329
appeal is that you can do a lot of the
 

00:13:36.329 --> 00:13:38.569
appeal is that you can do a lot of the
work on a background thread after all we

00:13:38.569 --> 00:13:38.579
work on a background thread after all we
 

00:13:38.579 --> 00:13:40.340
work on a background thread after all we
all have multi-core systems we tend to

00:13:40.340 --> 00:13:40.350
all have multi-core systems we tend to
 

00:13:40.350 --> 00:13:42.380
all have multi-core systems we tend to
have a core free that's not doing a lot

00:13:42.380 --> 00:13:42.390
have a core free that's not doing a lot
 

00:13:42.390 --> 00:13:45.079
have a core free that's not doing a lot
and what you get with roz alec is almost

00:13:45.079 --> 00:13:45.089
and what you get with roz alec is almost
 

00:13:45.089 --> 00:13:48.650
and what you get with roz alec is almost
the best of both worlds see there's

00:13:48.650 --> 00:13:48.660
the best of both worlds see there's
 

00:13:48.660 --> 00:13:51.280
the best of both worlds see there's
actually multiple bitmaps for every run

00:13:51.280 --> 00:13:51.290
actually multiple bitmaps for every run
 

00:13:51.290 --> 00:13:54.230
actually multiple bitmaps for every run
one tracks which slots are in use like I

00:13:54.230 --> 00:13:54.240
one tracks which slots are in use like I
 

00:13:54.240 --> 00:13:56.440
one tracks which slots are in use like I
talked about earlier but another one

00:13:56.440 --> 00:13:56.450
talked about earlier but another one
 

00:13:56.450 --> 00:13:59.420
talked about earlier but another one
tracks slots that have been freed by a

00:13:59.420 --> 00:13:59.430
tracks slots that have been freed by a
 

00:13:59.430 --> 00:14:03.800
tracks slots that have been freed by a
different thread so instead of

00:14:03.800 --> 00:14:03.810
different thread so instead of
 

00:14:03.810 --> 00:14:05.569
different thread so instead of
synchronizing the free list on every

00:14:05.569 --> 00:14:05.579
synchronizing the free list on every
 

00:14:05.579 --> 00:14:07.910
synchronizing the free list on every
deallocation you can wait until it's

00:14:07.910 --> 00:14:07.920
deallocation you can wait until it's
 

00:14:07.920 --> 00:14:10.670
deallocation you can wait until it's
convenient and apply all pending the

00:14:10.670 --> 00:14:10.680
convenient and apply all pending the
 

00:14:10.680 --> 00:14:12.410
convenient and apply all pending the
allocations by just Nanding the two

00:14:12.410 --> 00:14:12.420
allocations by just Nanding the two
 

00:14:12.420 --> 00:14:12.949
allocations by just Nanding the two
bitmaps

00:14:12.949 --> 00:14:12.959
bitmaps
 

00:14:12.959 --> 00:14:14.750
bitmaps
by the way I'm showing a lot of source

00:14:14.750 --> 00:14:14.760
by the way I'm showing a lot of source
 

00:14:14.760 --> 00:14:16.069
by the way I'm showing a lot of source
code here and it's a little small so I

00:14:16.069 --> 00:14:16.079
code here and it's a little small so I
 

00:14:16.079 --> 00:14:19.220
code here and it's a little small so I
apologize in the middle of this once

00:14:19.220 --> 00:14:19.230
apologize in the middle of this once
 

00:14:19.230 --> 00:14:20.540
apologize in the middle of this once
again though this is frakking brilliant

00:14:20.540 --> 00:14:20.550
again though this is frakking brilliant
 

00:14:20.550 --> 00:14:23.180
again though this is frakking brilliant
because you can now have n yes you can

00:14:23.180 --> 00:14:23.190
because you can now have n yes you can
 

00:14:23.190 --> 00:14:24.800
because you can now have n yes you can
have thread local runs and locks are

00:14:24.800 --> 00:14:24.810
have thread local runs and locks are
 

00:14:24.810 --> 00:14:26.750
have thread local runs and locks are
started by slot size so that even shared

00:14:26.750 --> 00:14:26.760
started by slot size so that even shared
 

00:14:26.760 --> 00:14:29.150
started by slot size so that even shared
runs have way lower contention there's a

00:14:29.150 --> 00:14:29.160
runs have way lower contention there's a
 

00:14:29.160 --> 00:14:30.889
runs have way lower contention there's a
bunch of other cool stuff in rows Alec

00:14:30.889 --> 00:14:30.899
bunch of other cool stuff in rows Alec
 

00:14:30.899 --> 00:14:33.019
bunch of other cool stuff in rows Alec
but we should probably move on before

00:14:33.019 --> 00:14:33.029
but we should probably move on before
 

00:14:33.029 --> 00:14:35.329
but we should probably move on before
everyone too starts calling me the crazy

00:14:35.329 --> 00:14:35.339
everyone too starts calling me the crazy
 

00:14:35.339 --> 00:14:39.110
everyone too starts calling me the crazy
rows Alec guy so the really sad thing is

00:14:39.110 --> 00:14:39.120
rows Alec guy so the really sad thing is
 

00:14:39.120 --> 00:14:41.569
rows Alec guy so the really sad thing is
it's hard to implement well you really

00:14:41.569 --> 00:14:41.579
it's hard to implement well you really
 

00:14:41.579 --> 00:14:42.860
it's hard to implement well you really
can't effluent anything that's elegant

00:14:42.860 --> 00:14:42.870
can't effluent anything that's elegant
 

00:14:42.870 --> 00:14:44.990
can't effluent anything that's elegant
in Java you'd end up reinventing the

00:14:44.990 --> 00:14:45.000
in Java you'd end up reinventing the
 

00:14:45.000 --> 00:14:46.370
in Java you'd end up reinventing the
entire reference system and if you get

00:14:46.370 --> 00:14:46.380
entire reference system and if you get
 

00:14:46.380 --> 00:14:48.949
entire reference system and if you get
kind of a maintenance nightmare so yeah

00:14:48.949 --> 00:14:48.959
kind of a maintenance nightmare so yeah
 

00:14:48.959 --> 00:14:50.630
kind of a maintenance nightmare so yeah
allocating from our object pool as a

00:14:50.630 --> 00:14:50.640
allocating from our object pool as a
 

00:14:50.640 --> 00:14:52.040
allocating from our object pool as a
whole isn't a whole lot faster than

00:14:52.040 --> 00:14:52.050
whole isn't a whole lot faster than
 

00:14:52.050 --> 00:14:53.689
whole isn't a whole lot faster than
allocating from the normal Java heap and

00:14:53.689 --> 00:14:53.699
allocating from the normal Java heap and
 

00:14:53.699 --> 00:14:56.210
allocating from the normal Java heap and
it's way more work but we kind of

00:14:56.210 --> 00:14:56.220
it's way more work but we kind of
 

00:14:56.220 --> 00:14:58.009
it's way more work but we kind of
expected that I mean no one ever

00:14:58.009 --> 00:14:58.019
expected that I mean no one ever
 

00:14:58.019 --> 00:14:59.960
expected that I mean no one ever
explains about the cost of allocation in

00:14:59.960 --> 00:14:59.970
explains about the cost of allocation in
 

00:14:59.970 --> 00:15:02.180
explains about the cost of allocation in
a garbage collected runtime it's always

00:15:02.180 --> 00:15:02.190
a garbage collected runtime it's always
 

00:15:02.190 --> 00:15:04.579
a garbage collected runtime it's always
about the cost of collection so the

00:15:04.579 --> 00:15:04.589
about the cost of collection so the
 

00:15:04.589 --> 00:15:06.110
about the cost of collection so the
question is why aren't we seeing these

00:15:06.110 --> 00:15:06.120
question is why aren't we seeing these
 

00:15:06.120 --> 00:15:07.939
question is why aren't we seeing these
massive collection pauses when we

00:15:07.939 --> 00:15:07.949
massive collection pauses when we
 

00:15:07.949 --> 00:15:09.710
massive collection pauses when we
allocated massive numbers of short-lived

00:15:09.710 --> 00:15:09.720
allocated massive numbers of short-lived
 

00:15:09.720 --> 00:15:12.110
allocated massive numbers of short-lived
objects now rog Alec gave us a little

00:15:12.110 --> 00:15:12.120
objects now rog Alec gave us a little
 

00:15:12.120 --> 00:15:14.480
objects now rog Alec gave us a little
bit of a clue they didn't spend all that

00:15:14.480 --> 00:15:14.490
bit of a clue they didn't spend all that
 

00:15:14.490 --> 00:15:16.759
bit of a clue they didn't spend all that
effort on concurrency for nothing it's

00:15:16.759 --> 00:15:16.769
effort on concurrency for nothing it's
 

00:15:16.769 --> 00:15:18.710
effort on concurrency for nothing it's
not that the garbage collector is doing

00:15:18.710 --> 00:15:18.720
not that the garbage collector is doing
 

00:15:18.720 --> 00:15:21.590
not that the garbage collector is doing
nothing it's that a lot of its work is

00:15:21.590 --> 00:15:21.600
nothing it's that a lot of its work is
 

00:15:21.600 --> 00:15:23.210
nothing it's that a lot of its work is
being done somewhere else other than the

00:15:23.210 --> 00:15:23.220
being done somewhere else other than the
 

00:15:23.220 --> 00:15:25.490
being done somewhere else other than the
main thread and it still work and we'd

00:15:25.490 --> 00:15:25.500
main thread and it still work and we'd
 

00:15:25.500 --> 00:15:27.380
main thread and it still work and we'd
like to minimize it but it's not call it

00:15:27.380 --> 00:15:27.390
like to minimize it but it's not call it
 

00:15:27.390 --> 00:15:29.590
like to minimize it but it's not call it
causing the jank that it did on dalvik

00:15:29.590 --> 00:15:29.600
causing the jank that it did on dalvik
 

00:15:29.600 --> 00:15:32.210
causing the jank that it did on dalvik
so there's one piece left in this puzzle

00:15:32.210 --> 00:15:32.220
so there's one piece left in this puzzle
 

00:15:32.220 --> 00:15:34.489
so there's one piece left in this puzzle
and it has to do with how the Jie

00:15:34.489 --> 00:15:34.499
and it has to do with how the Jie
 

00:15:34.499 --> 00:15:36.709
and it has to do with how the Jie
see manages to do so much of its work on

00:15:36.709 --> 00:15:36.719
see manages to do so much of its work on
 

00:15:36.719 --> 00:15:40.309
see manages to do so much of its work on
a background thread now actually since

00:15:40.309 --> 00:15:40.319
a background thread now actually since
 

00:15:40.319 --> 00:15:42.139
a background thread now actually since
we spent so much time talking about how

00:15:42.139 --> 00:15:42.149
we spent so much time talking about how
 

00:15:42.149 --> 00:15:43.849
we spent so much time talking about how
great the allocator is at concurrency

00:15:43.849 --> 00:15:43.859
great the allocator is at concurrency
 

00:15:43.859 --> 00:15:46.099
great the allocator is at concurrency
it's probably worth going over why this

00:15:46.099 --> 00:15:46.109
it's probably worth going over why this
 

00:15:46.109 --> 00:15:49.429
it's probably worth going over why this
is even a problem now the GC has to

00:15:49.429 --> 00:15:49.439
is even a problem now the GC has to
 

00:15:49.439 --> 00:15:52.159
is even a problem now the GC has to
figure out which objects are live and

00:15:52.159 --> 00:15:52.169
figure out which objects are live and
 

00:15:52.169 --> 00:15:54.559
figure out which objects are live and
which are dead and it does this by

00:15:54.559 --> 00:15:54.569
which are dead and it does this by
 

00:15:54.569 --> 00:15:56.359
which are dead and it does this by
starting with the object on the stack

00:15:56.359 --> 00:15:56.369
starting with the object on the stack
 

00:15:56.369 --> 00:15:58.159
starting with the object on the stack
and following their references all the

00:15:58.159 --> 00:15:58.169
and following their references all the
 

00:15:58.169 --> 00:15:59.419
and following their references all the
way down till there are no more

00:15:59.419 --> 00:15:59.429
way down till there are no more
 

00:15:59.429 --> 00:16:02.179
way down till there are no more
references left to follow every object

00:16:02.179 --> 00:16:02.189
references left to follow every object
 

00:16:02.189 --> 00:16:03.379
references left to follow every object
that cut visited during that procedure

00:16:03.379 --> 00:16:03.389
that cut visited during that procedure
 

00:16:03.389 --> 00:16:05.959
that cut visited during that procedure
must be live because clearly there's a

00:16:05.959 --> 00:16:05.969
must be live because clearly there's a
 

00:16:05.969 --> 00:16:06.949
must be live because clearly there's a
chain of references that your

00:16:06.949 --> 00:16:06.959
chain of references that your
 

00:16:06.959 --> 00:16:08.599
chain of references that your
application could follow to access that

00:16:08.599 --> 00:16:08.609
application could follow to access that
 

00:16:08.609 --> 00:16:11.509
application could follow to access that
object every object that get left out is

00:16:11.509 --> 00:16:11.519
object every object that get left out is
 

00:16:11.519 --> 00:16:14.749
object every object that get left out is
dead or at least it's not live now the

00:16:14.749 --> 00:16:14.759
dead or at least it's not live now the
 

00:16:14.759 --> 00:16:16.369
dead or at least it's not live now the
GC guys tell me that's a little bit of

00:16:16.369 --> 00:16:16.379
GC guys tell me that's a little bit of
 

00:16:16.379 --> 00:16:18.049
GC guys tell me that's a little bit of
an oversimplification but it's a good

00:16:18.049 --> 00:16:18.059
an oversimplification but it's a good
 

00:16:18.059 --> 00:16:20.059
an oversimplification but it's a good
first approximation thing is this

00:16:20.059 --> 00:16:20.069
first approximation thing is this
 

00:16:20.069 --> 00:16:22.249
first approximation thing is this
process is not lightning-fast and if

00:16:22.249 --> 00:16:22.259
process is not lightning-fast and if
 

00:16:22.259 --> 00:16:23.839
process is not lightning-fast and if
it's done concurrently then your

00:16:23.839 --> 00:16:23.849
it's done concurrently then your
 

00:16:23.849 --> 00:16:25.549
it's done concurrently then your
application is busy connecting and

00:16:25.549 --> 00:16:25.559
application is busy connecting and
 

00:16:25.559 --> 00:16:26.389
application is busy connecting and
disconnecting and reconnecting

00:16:26.389 --> 00:16:26.399
disconnecting and reconnecting
 

00:16:26.399 --> 00:16:28.339
disconnecting and reconnecting
references while the GC is trying to

00:16:28.339 --> 00:16:28.349
references while the GC is trying to
 

00:16:28.349 --> 00:16:31.819
references while the GC is trying to
trace them so let's say that object egg

00:16:31.819 --> 00:16:31.829
trace them so let's say that object egg
 

00:16:31.829 --> 00:16:35.979
trace them so let's say that object egg
has a reference to object B an object C

00:16:35.979 --> 00:16:35.989
has a reference to object B an object C
 

00:16:35.989 --> 00:16:38.329
has a reference to object B an object C
has a reference type that's currently

00:16:38.329 --> 00:16:38.339
has a reference type that's currently
 

00:16:38.339 --> 00:16:41.419
has a reference type that's currently
null now for whatever reason the GC

00:16:41.419 --> 00:16:41.429
null now for whatever reason the GC
 

00:16:41.429 --> 00:16:44.359
null now for whatever reason the GC
visits object C before it visits object

00:16:44.359 --> 00:16:44.369
visits object C before it visits object
 

00:16:44.369 --> 00:16:48.469
visits object C before it visits object
a following me okay now let's say that

00:16:48.469 --> 00:16:48.479
a following me okay now let's say that
 

00:16:48.479 --> 00:16:50.839
a following me okay now let's say that
after the GC has visited C but before it

00:16:50.839 --> 00:16:50.849
after the GC has visited C but before it
 

00:16:50.849 --> 00:16:54.109
after the GC has visited C but before it
visits a you give object bead object C

00:16:54.109 --> 00:16:54.119
visits a you give object bead object C
 

00:16:54.119 --> 00:16:56.989
visits a you give object bead object C
and no lattes reference for all the GC

00:16:56.989 --> 00:16:56.999
and no lattes reference for all the GC
 

00:16:56.999 --> 00:16:59.809
and no lattes reference for all the GC
can tell a and C both have a null

00:16:59.809 --> 00:16:59.819
can tell a and C both have a null
 

00:16:59.819 --> 00:17:02.869
can tell a and C both have a null
reference and it never even saw B so the

00:17:02.869 --> 00:17:02.879
reference and it never even saw B so the
 

00:17:02.879 --> 00:17:05.569
reference and it never even saw B so the
question is how do you fix this and it

00:17:05.569 --> 00:17:05.579
question is how do you fix this and it
 

00:17:05.579 --> 00:17:07.159
question is how do you fix this and it
turns out the answer to that question

00:17:07.159 --> 00:17:07.169
turns out the answer to that question
 

00:17:07.169 --> 00:17:09.199
turns out the answer to that question
tells us a lot about how we can shoot

00:17:09.199 --> 00:17:09.209
tells us a lot about how we can shoot
 

00:17:09.209 --> 00:17:11.119
tells us a lot about how we can shoot
ourselves in the foot by trying to

00:17:11.119 --> 00:17:11.129
ourselves in the foot by trying to
 

00:17:11.129 --> 00:17:14.659
ourselves in the foot by trying to
outsmart the garbage collector and it

00:17:14.659 --> 00:17:14.669
outsmart the garbage collector and it
 

00:17:14.669 --> 00:17:19.819
outsmart the garbage collector and it
takes us back to the subject of cards if

00:17:19.819 --> 00:17:19.829
takes us back to the subject of cards if
 

00:17:19.829 --> 00:17:21.559
takes us back to the subject of cards if
you take another look at the glorious

00:17:21.559 --> 00:17:21.569
you take another look at the glorious
 

00:17:21.569 --> 00:17:23.449
you take another look at the glorious
switch statement that is at the heart of

00:17:23.449 --> 00:17:23.459
switch statement that is at the heart of
 

00:17:23.459 --> 00:17:25.159
switch statement that is at the heart of
the dalvik interpreter you'll notice

00:17:25.159 --> 00:17:25.169
the dalvik interpreter you'll notice
 

00:17:25.169 --> 00:17:26.899
the dalvik interpreter you'll notice
that a lot of op codes have an extra

00:17:26.899 --> 00:17:26.909
that a lot of op codes have an extra
 

00:17:26.909 --> 00:17:29.240
that a lot of op codes have an extra
call on them then this call to check

00:17:29.240 --> 00:17:29.250
call on them then this call to check
 

00:17:29.250 --> 00:17:31.820
call on them then this call to check
suspend is a check point it's a place

00:17:31.820 --> 00:17:31.830
suspend is a check point it's a place
 

00:17:31.830 --> 00:17:34.279
suspend is a check point it's a place
where the thread checks to see if the GC

00:17:34.279 --> 00:17:34.289
where the thread checks to see if the GC
 

00:17:34.289 --> 00:17:36.499
where the thread checks to see if the GC
wants it to do anything among other

00:17:36.499 --> 00:17:36.509
wants it to do anything among other
 

00:17:36.509 --> 00:17:38.720
wants it to do anything among other
things this check lets the GC tell the

00:17:38.720 --> 00:17:38.730
things this check lets the GC tell the
 

00:17:38.730 --> 00:17:40.700
things this check lets the GC tell the
thread to stop completely which is what

00:17:40.700 --> 00:17:40.710
thread to stop completely which is what
 

00:17:40.710 --> 00:17:41.990
thread to stop completely which is what
it has to do if it wants to get an

00:17:41.990 --> 00:17:42.000
it has to do if it wants to get an
 

00:17:42.000 --> 00:17:43.639
it has to do if it wants to get an
accurate count of which objects are dead

00:17:43.639 --> 00:17:43.649
accurate count of which objects are dead
 

00:17:43.649 --> 00:17:45.950
accurate count of which objects are dead
and which ones are alive this is called

00:17:45.950 --> 00:17:45.960
and which ones are alive this is called
 

00:17:45.960 --> 00:17:47.670
and which ones are alive this is called
the GC pause now

00:17:47.670 --> 00:17:47.680
the GC pause now
 

00:17:47.680 --> 00:17:49.890
the GC pause now
clearly one way to make sure the GC gets

00:17:49.890 --> 00:17:49.900
clearly one way to make sure the GC gets
 

00:17:49.900 --> 00:17:51.930
clearly one way to make sure the GC gets
an accurate count is just to visit the

00:17:51.930 --> 00:17:51.940
an accurate count is just to visit the
 

00:17:51.940 --> 00:17:53.280
an accurate count is just to visit the
objects all over again but that would be

00:17:53.280 --> 00:17:53.290
objects all over again but that would be
 

00:17:53.290 --> 00:17:55.740
objects all over again but that would be
a colossal waste of time I mean that

00:17:55.740 --> 00:17:55.750
a colossal waste of time I mean that
 

00:17:55.750 --> 00:17:58.880
a colossal waste of time I mean that
would be like a cupcake move so instead

00:17:58.880 --> 00:17:58.890
would be like a cupcake move so instead
 

00:17:58.890 --> 00:18:01.230
would be like a cupcake move so instead
how about how we just revisit the

00:18:01.230 --> 00:18:01.240
how about how we just revisit the
 

00:18:01.240 --> 00:18:02.790
how about how we just revisit the
objects that got changed while we were

00:18:02.790 --> 00:18:02.800
objects that got changed while we were
 

00:18:02.800 --> 00:18:04.860
objects that got changed while we were
busy doing our first pass on the object

00:18:04.860 --> 00:18:04.870
busy doing our first pass on the object
 

00:18:04.870 --> 00:18:08.130
busy doing our first pass on the object
graph now you're talking that's some

00:18:08.130 --> 00:18:08.140
graph now you're talking that's some
 

00:18:08.140 --> 00:18:10.260
graph now you're talking that's some
gingerbread level thinking my friends so

00:18:10.260 --> 00:18:10.270
gingerbread level thinking my friends so
 

00:18:10.270 --> 00:18:12.240
gingerbread level thinking my friends so
how do we tell what's changed let's go

00:18:12.240 --> 00:18:12.250
how do we tell what's changed let's go
 

00:18:12.250 --> 00:18:14.190
how do we tell what's changed let's go
back to that switch statement one last

00:18:14.190 --> 00:18:14.200
back to that switch statement one last
 

00:18:14.200 --> 00:18:17.880
back to that switch statement one last
time now you probably haven't notices

00:18:17.880 --> 00:18:17.890
time now you probably haven't notices
 

00:18:17.890 --> 00:18:19.800
time now you probably haven't notices
but there's actually a specific set of

00:18:19.800 --> 00:18:19.810
but there's actually a specific set of
 

00:18:19.810 --> 00:18:22.680
but there's actually a specific set of
op codes just removing references and

00:18:22.680 --> 00:18:22.690
op codes just removing references and
 

00:18:22.690 --> 00:18:24.270
op codes just removing references and
you know that might strike you as being

00:18:24.270 --> 00:18:24.280
you know that might strike you as being
 

00:18:24.280 --> 00:18:26.610
you know that might strike you as being
odd because references are just for byte

00:18:26.610 --> 00:18:26.620
odd because references are just for byte
 

00:18:26.620 --> 00:18:29.370
odd because references are just for byte
binary values - same as integers you

00:18:29.370 --> 00:18:29.380
binary values - same as integers you
 

00:18:29.380 --> 00:18:30.930
binary values - same as integers you
know why not just reuse the existing

00:18:30.930 --> 00:18:30.940
know why not just reuse the existing
 

00:18:30.940 --> 00:18:33.450
know why not just reuse the existing
energy moving op codes and this one

00:18:33.450 --> 00:18:33.460
energy moving op codes and this one
 

00:18:33.460 --> 00:18:34.770
energy moving op codes and this one
takes a little bit more digging because

00:18:34.770 --> 00:18:34.780
takes a little bit more digging because
 

00:18:34.780 --> 00:18:36.720
takes a little bit more digging because
the answer is actual severally several

00:18:36.720 --> 00:18:36.730
the answer is actual severally several
 

00:18:36.730 --> 00:18:38.190
the answer is actual severally several
layers down in the call stack underneath

00:18:38.190 --> 00:18:38.200
layers down in the call stack underneath
 

00:18:38.200 --> 00:18:39.930
layers down in the call stack underneath
some templates and macros and some

00:18:39.930 --> 00:18:39.940
some templates and macros and some
 

00:18:39.940 --> 00:18:42.570
some templates and macros and some
random craft but eventually you get at

00:18:42.570 --> 00:18:42.580
random craft but eventually you get at
 

00:18:42.580 --> 00:18:44.520
random craft but eventually you get at
this thing called right barrier field

00:18:44.520 --> 00:18:44.530
this thing called right barrier field
 

00:18:44.530 --> 00:18:47.640
this thing called right barrier field
now the word barrier is a little

00:18:47.640 --> 00:18:47.650
now the word barrier is a little
 

00:18:47.650 --> 00:18:50.760
now the word barrier is a little
overloaded in computer science here it

00:18:50.760 --> 00:18:50.770
overloaded in computer science here it
 

00:18:50.770 --> 00:18:52.230
overloaded in computer science here it
means something that the runtime has to

00:18:52.230 --> 00:18:52.240
means something that the runtime has to
 

00:18:52.240 --> 00:18:54.380
means something that the runtime has to
do before writing to a reference field

00:18:54.380 --> 00:18:54.390
do before writing to a reference field
 

00:18:54.390 --> 00:18:56.580
do before writing to a reference field
there's also the concept of a read

00:18:56.580 --> 00:18:56.590
there's also the concept of a read
 

00:18:56.590 --> 00:18:58.140
there's also the concept of a read
barrier but it's really not that

00:18:58.140 --> 00:18:58.150
barrier but it's really not that
 

00:18:58.150 --> 00:19:00.860
barrier but it's really not that
important to this particular discussion

00:19:00.860 --> 00:19:00.870
important to this particular discussion
 

00:19:00.870 --> 00:19:01.980
important to this particular discussion
anyway

00:19:01.980 --> 00:19:01.990
anyway
 

00:19:01.990 --> 00:19:03.240
anyway
take a look at what write barrier field

00:19:03.240 --> 00:19:03.250
take a look at what write barrier field
 

00:19:03.250 --> 00:19:07.110
take a look at what write barrier field
does it calls mark card see I told you

00:19:07.110 --> 00:19:07.120
does it calls mark card see I told you
 

00:19:07.120 --> 00:19:15.180
does it calls mark card see I told you
there'd be cards all right in this case

00:19:15.180 --> 00:19:15.190
there'd be cards all right in this case
 

00:19:15.190 --> 00:19:16.920
there'd be cards all right in this case
a card is just an area of memory it's

00:19:16.920 --> 00:19:16.930
a card is just an area of memory it's
 

00:19:16.930 --> 00:19:19.080
a card is just an area of memory it's
kind of like a page only it's not the

00:19:19.080 --> 00:19:19.090
kind of like a page only it's not the
 

00:19:19.090 --> 00:19:21.030
kind of like a page only it's not the
same size and besides that word was

00:19:21.030 --> 00:19:21.040
same size and besides that word was
 

00:19:21.040 --> 00:19:23.310
same size and besides that word was
taken so we call it a card now marking

00:19:23.310 --> 00:19:23.320
taken so we call it a card now marking
 

00:19:23.320 --> 00:19:26.100
taken so we call it a card now marking
the card just says hey something in this

00:19:26.100 --> 00:19:26.110
the card just says hey something in this
 

00:19:26.110 --> 00:19:28.530
the card just says hey something in this
memory has changed now why do we even

00:19:28.530 --> 00:19:28.540
memory has changed now why do we even
 

00:19:28.540 --> 00:19:30.510
memory has changed now why do we even
have cards and it's really for the same

00:19:30.510 --> 00:19:30.520
have cards and it's really for the same
 

00:19:30.520 --> 00:19:32.790
have cards and it's really for the same
reason we have pages so we can have

00:19:32.790 --> 00:19:32.800
reason we have pages so we can have
 

00:19:32.800 --> 00:19:35.280
reason we have pages so we can have
metadata about memory that takes up less

00:19:35.280 --> 00:19:35.290
metadata about memory that takes up less
 

00:19:35.290 --> 00:19:37.740
metadata about memory that takes up less
room than the memory we're describing so

00:19:37.740 --> 00:19:37.750
room than the memory we're describing so
 

00:19:37.750 --> 00:19:39.690
room than the memory we're describing so
for pages we keep you know data like

00:19:39.690 --> 00:19:39.700
for pages we keep you know data like
 

00:19:39.700 --> 00:19:41.700
for pages we keep you know data like
whether it's read-only or executable or

00:19:41.700 --> 00:19:41.710
whether it's read-only or executable or
 

00:19:41.710 --> 00:19:43.560
whether it's read-only or executable or
any of that other and protect stuff for

00:19:43.560 --> 00:19:43.570
any of that other and protect stuff for
 

00:19:43.570 --> 00:19:45.450
any of that other and protect stuff for
cards it's pretty much just dirty or

00:19:45.450 --> 00:19:45.460
cards it's pretty much just dirty or
 

00:19:45.460 --> 00:19:49.110
cards it's pretty much just dirty or
clean it's just a right if you look at

00:19:49.110 --> 00:19:49.120
clean it's just a right if you look at
 

00:19:49.120 --> 00:19:51.390
clean it's just a right if you look at
the source code it's not even an atomic

00:19:51.390 --> 00:19:51.400
the source code it's not even an atomic
 

00:19:51.400 --> 00:19:53.640
the source code it's not even an atomic
which by the way we can get away with

00:19:53.640 --> 00:19:53.650
which by the way we can get away with
 

00:19:53.650 --> 00:19:55.440
which by the way we can get away with
because there's no read-modify-write

00:19:55.440 --> 00:19:55.450
because there's no read-modify-write
 

00:19:55.450 --> 00:19:57.300
because there's no read-modify-write
in a concurrent environment it's just a

00:19:57.300 --> 00:19:57.310
in a concurrent environment it's just a
 

00:19:57.310 --> 00:19:58.680
in a concurrent environment it's just a
right and the Reed has done use during

00:19:58.680 --> 00:19:58.690
right and the Reed has done use during
 

00:19:58.690 --> 00:20:00.090
right and the Reed has done use during
the GC pause where the value can't

00:20:00.090 --> 00:20:00.100
the GC pause where the value can't
 

00:20:00.100 --> 00:20:01.070
the GC pause where the value can't
change

00:20:01.070 --> 00:20:01.080
change
 

00:20:01.080 --> 00:20:02.450
change
so what's so important about the

00:20:02.450 --> 00:20:02.460
so what's so important about the
 

00:20:02.460 --> 00:20:04.879
so what's so important about the
card-table even given the information in

00:20:04.879 --> 00:20:04.889
card-table even given the information in
 

00:20:04.889 --> 00:20:07.009
card-table even given the information in
the karge the GC doesn't have to rescan

00:20:07.009 --> 00:20:07.019
the karge the GC doesn't have to rescan
 

00:20:07.019 --> 00:20:09.470
the karge the GC doesn't have to rescan
every single object during the pause it

00:20:09.470 --> 00:20:09.480
every single object during the pause it
 

00:20:09.480 --> 00:20:11.299
every single object during the pause it
can focus its attention on the objects

00:20:11.299 --> 00:20:11.309
can focus its attention on the objects
 

00:20:11.309 --> 00:20:13.789
can focus its attention on the objects
that might be dirty and this idea

00:20:13.789 --> 00:20:13.799
that might be dirty and this idea
 

00:20:13.799 --> 00:20:16.279
that might be dirty and this idea
extends far beyond just finding the

00:20:16.279 --> 00:20:16.289
extends far beyond just finding the
 

00:20:16.289 --> 00:20:17.869
extends far beyond just finding the
objects a change in the last concurrent

00:20:17.869 --> 00:20:17.879
objects a change in the last concurrent
 

00:20:17.879 --> 00:20:19.519
objects a change in the last concurrent
scan by the way there are plenty of

00:20:19.519 --> 00:20:19.529
scan by the way there are plenty of
 

00:20:19.529 --> 00:20:21.049
scan by the way there are plenty of
objects that almost never changed for

00:20:21.049 --> 00:20:21.059
objects that almost never changed for
 

00:20:21.059 --> 00:20:23.149
objects that almost never changed for
existence for instance class objects if

00:20:23.149 --> 00:20:23.159
existence for instance class objects if
 

00:20:23.159 --> 00:20:25.279
existence for instance class objects if
we can we want to avoid scanning those

00:20:25.279 --> 00:20:25.289
we can we want to avoid scanning those
 

00:20:25.289 --> 00:20:27.200
we can we want to avoid scanning those
objects ever and we can get away with

00:20:27.200 --> 00:20:27.210
objects ever and we can get away with
 

00:20:27.210 --> 00:20:29.659
objects ever and we can get away with
that because if for some reason those

00:20:29.659 --> 00:20:29.669
that because if for some reason those
 

00:20:29.669 --> 00:20:31.820
that because if for some reason those
objects ever do change their cards will

00:20:31.820 --> 00:20:31.830
objects ever do change their cards will
 

00:20:31.830 --> 00:20:34.539
objects ever do change their cards will
be marked now the card ID isn't perfect

00:20:34.539 --> 00:20:34.549
be marked now the card ID isn't perfect
 

00:20:34.549 --> 00:20:36.680
be marked now the card ID isn't perfect
for instance if a card happens to

00:20:36.680 --> 00:20:36.690
for instance if a card happens to
 

00:20:36.690 --> 00:20:38.509
for instance if a card happens to
contain more than one object there's no

00:20:38.509 --> 00:20:38.519
contain more than one object there's no
 

00:20:38.519 --> 00:20:40.879
contain more than one object there's no
way to tell which object is dirty all of

00:20:40.879 --> 00:20:40.889
way to tell which object is dirty all of
 

00:20:40.889 --> 00:20:43.340
way to tell which object is dirty all of
them have to be rescanned even where

00:20:43.340 --> 00:20:43.350
them have to be rescanned even where
 

00:20:43.350 --> 00:20:44.869
them have to be rescanned even where
it's an array of objects count as one

00:20:44.869 --> 00:20:44.879
it's an array of objects count as one
 

00:20:44.879 --> 00:20:46.220
it's an array of objects count as one
object when it comes to card marking

00:20:46.220 --> 00:20:46.230
object when it comes to card marking
 

00:20:46.230 --> 00:20:48.200
object when it comes to card marking
that's one object with a whole lot of

00:20:48.200 --> 00:20:48.210
that's one object with a whole lot of
 

00:20:48.210 --> 00:20:50.330
that's one object with a whole lot of
references which means if you insert or

00:20:50.330 --> 00:20:50.340
references which means if you insert or
 

00:20:50.340 --> 00:20:51.919
references which means if you insert or
remove an object from an array the

00:20:51.919 --> 00:20:51.929
remove an object from an array the
 

00:20:51.929 --> 00:20:55.519
remove an object from an array the
entire array gets rescanned so now we

00:20:55.519 --> 00:20:55.529
entire array gets rescanned so now we
 

00:20:55.529 --> 00:20:58.159
entire array gets rescanned so now we
come full circle because our pool of

00:20:58.159 --> 00:20:58.169
come full circle because our pool of
 

00:20:58.169 --> 00:21:00.710
come full circle because our pool of
card rectangles might actually end up as

00:21:00.710 --> 00:21:00.720
card rectangles might actually end up as
 

00:21:00.720 --> 00:21:03.470
card rectangles might actually end up as
a victim of card marking I know there's

00:21:03.470 --> 00:21:03.480
a victim of card marking I know there's
 

00:21:03.480 --> 00:21:04.869
a victim of card marking I know there's
a country song in there somewhere but

00:21:04.869 --> 00:21:04.879
a country song in there somewhere but
 

00:21:04.879 --> 00:21:07.279
a country song in there somewhere but
it's only one of several factors that

00:21:07.279 --> 00:21:07.289
it's only one of several factors that
 

00:21:07.289 --> 00:21:10.639
it's only one of several factors that
make allocations cheaper on art and I

00:21:10.639 --> 00:21:10.649
make allocations cheaper on art and I
 

00:21:10.649 --> 00:21:13.009
make allocations cheaper on art and I
wish I had actually more slides to talk

00:21:13.009 --> 00:21:13.019
wish I had actually more slides to talk
 

00:21:13.019 --> 00:21:13.999
wish I had actually more slides to talk
through the rest of them but I'll talk

00:21:13.999 --> 00:21:14.009
through the rest of them but I'll talk
 

00:21:14.009 --> 00:21:16.340
through the rest of them but I'll talk
to a talk about a few of them one of

00:21:16.340 --> 00:21:16.350
to a talk about a few of them one of
 

00:21:16.350 --> 00:21:18.049
to a talk about a few of them one of
them is better collection past

00:21:18.049 --> 00:21:18.059
them is better collection past
 

00:21:18.059 --> 00:21:20.869
them is better collection past
scheduling no art in general tends to do

00:21:20.869 --> 00:21:20.879
scheduling no art in general tends to do
 

00:21:20.879 --> 00:21:22.369
scheduling no art in general tends to do
a better job of figuring out when to run

00:21:22.369 --> 00:21:22.379
a better job of figuring out when to run
 

00:21:22.379 --> 00:21:24.529
a better job of figuring out when to run
collection passes which means that GC

00:21:24.529 --> 00:21:24.539
collection passes which means that GC
 

00:21:24.539 --> 00:21:26.119
collection passes which means that GC
for alloc is a thing of the past

00:21:26.119 --> 00:21:26.129
for alloc is a thing of the past
 

00:21:26.129 --> 00:21:28.430
for alloc is a thing of the past
and too it keeps a list of objects that

00:21:28.430 --> 00:21:28.440
and too it keeps a list of objects that
 

00:21:28.440 --> 00:21:31.099
and too it keeps a list of objects that
have been allocated since the last GC so

00:21:31.099 --> 00:21:31.109
have been allocated since the last GC so
 

00:21:31.109 --> 00:21:32.299
have been allocated since the last GC so
when you add that information to the

00:21:32.299 --> 00:21:32.309
when you add that information to the
 

00:21:32.309 --> 00:21:33.799
when you add that information to the
card table art gets the ability to

00:21:33.799 --> 00:21:33.809
card table art gets the ability to
 

00:21:33.809 --> 00:21:35.419
card table art gets the ability to
collect super short-lived objects

00:21:35.419 --> 00:21:35.429
collect super short-lived objects
 

00:21:35.429 --> 00:21:37.580
collect super short-lived objects
without even triggering a GC pause and

00:21:37.580 --> 00:21:37.590
without even triggering a GC pause and
 

00:21:37.590 --> 00:21:39.440
without even triggering a GC pause and
that's why allocating ludicrous numbers

00:21:39.440 --> 00:21:39.450
that's why allocating ludicrous numbers
 

00:21:39.450 --> 00:21:41.359
that's why allocating ludicrous numbers
of simple object doesn't kill art the

00:21:41.359 --> 00:21:41.369
of simple object doesn't kill art the
 

00:21:41.369 --> 00:21:45.739
of simple object doesn't kill art the
way did dalvik and - oh sorry that's

00:21:45.739 --> 00:21:45.749
way did dalvik and - oh sorry that's
 

00:21:45.749 --> 00:21:49.849
way did dalvik and - oh sorry that's
this is I already said this so finally

00:21:49.849 --> 00:21:49.859
this is I already said this so finally
 

00:21:49.859 --> 00:21:52.190
this is I already said this so finally
let me let me in conclusion because

00:21:52.190 --> 00:21:52.200
let me let me in conclusion because
 

00:21:52.200 --> 00:21:53.539
let me let me in conclusion because
we're cuz it's gonna be really short

00:21:53.539 --> 00:21:53.549
we're cuz it's gonna be really short
 

00:21:53.549 --> 00:21:56.359
we're cuz it's gonna be really short
guys so don't walk out of here and tell

00:21:56.359 --> 00:21:56.369
guys so don't walk out of here and tell
 

00:21:56.369 --> 00:21:57.739
guys so don't walk out of here and tell
your friends the allocations don't

00:21:57.739 --> 00:21:57.749
your friends the allocations don't
 

00:21:57.749 --> 00:21:59.389
your friends the allocations don't
matter anymore first of all we don't

00:21:59.389 --> 00:21:59.399
matter anymore first of all we don't
 

00:21:59.399 --> 00:22:01.639
matter anymore first of all we don't
want to incur the wrath of colt and

00:22:01.639 --> 00:22:01.649
want to incur the wrath of colt and
 

00:22:01.649 --> 00:22:03.019
want to incur the wrath of colt and
besides the point of this talk isn't

00:22:03.019 --> 00:22:03.029
besides the point of this talk isn't
 

00:22:03.029 --> 00:22:05.899
besides the point of this talk isn't
necessarily just to add to your stock of

00:22:05.899 --> 00:22:05.909
necessarily just to add to your stock of
 

00:22:05.909 --> 00:22:07.489
necessarily just to add to your stock of
pro tips but hopefully it's to give you

00:22:07.489 --> 00:22:07.499
pro tips but hopefully it's to give you
 

00:22:07.499 --> 00:22:08.840
pro tips but hopefully it's to give you
a little bit of understanding of how

00:22:08.840 --> 00:22:08.850
a little bit of understanding of how
 

00:22:08.850 --> 00:22:10.489
a little bit of understanding of how
things are working inside of android and

00:22:10.489 --> 00:22:10.499
things are working inside of android and
 

00:22:10.499 --> 00:22:13.070
things are working inside of android and
how you can - and enjoy going through

00:22:13.070 --> 00:22:13.080
how you can - and enjoy going through
 

00:22:13.080 --> 00:22:14.419
how you can - and enjoy going through
Android yourself so I hope I've given

00:22:14.419 --> 00:22:14.429
Android yourself so I hope I've given
 

00:22:14.429 --> 00:22:14.780
Android yourself so I hope I've given
you

00:22:14.780 --> 00:22:14.790
you
 

00:22:14.790 --> 00:22:16.430
you
some of the tools and encouragement you

00:22:16.430 --> 00:22:16.440
some of the tools and encouragement you
 

00:22:16.440 --> 00:22:18.080
some of the tools and encouragement you
need to go on your own adventures to the

00:22:18.080 --> 00:22:18.090
need to go on your own adventures to the
 

00:22:18.090 --> 00:22:20.690
need to go on your own adventures to the
Android code base I mean after all what

00:22:20.690 --> 00:22:20.700
Android code base I mean after all what
 

00:22:20.700 --> 00:22:22.640
Android code base I mean after all what
else is open source for if we can't

00:22:22.640 --> 00:22:22.650
else is open source for if we can't
 

00:22:22.650 --> 00:22:24.650
else is open source for if we can't
learn from it so we're looking forward

00:22:24.650 --> 00:22:24.660
learn from it so we're looking forward
 

00:22:24.660 --> 00:22:27.260
learn from it so we're looking forward
to hearing your stories if you want to

00:22:27.260 --> 00:22:27.270
to hearing your stories if you want to
 

00:22:27.270 --> 00:22:29.210
to hearing your stories if you want to
contact me that's where I can be found

00:22:29.210 --> 00:22:29.220
contact me that's where I can be found
 

00:22:29.220 --> 00:22:33.950
contact me that's where I can be found
and thank you all and you all get 20

00:22:33.950 --> 00:22:33.960
and thank you all and you all get 20
 

00:22:33.960 --> 00:22:35.990
and thank you all and you all get 20
minutes back or so so I enjoy the rest

00:22:35.990 --> 00:22:36.000
minutes back or so so I enjoy the rest
 

00:22:36.000 --> 00:22:38.090
minutes back or so so I enjoy the rest
of your time here at the barbecue and if

00:22:38.090 --> 00:22:38.100
of your time here at the barbecue and if
 

00:22:38.100 --> 00:22:40.070
of your time here at the barbecue and if
any questions you can I'm more more than

00:22:40.070 --> 00:22:40.080
any questions you can I'm more more than
 

00:22:40.080 --> 00:22:42.770
any questions you can I'm more more than
happy to take them now

