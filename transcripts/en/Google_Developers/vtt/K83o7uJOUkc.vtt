WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.750
[MUSIC PLAYING]

00:00:11.971 --> 00:00:14.470
BRAD ABRAMS: Now, we're at the
end-to-end tour of the Google

00:00:14.470 --> 00:00:15.090
Cloud Platform.

00:00:15.090 --> 00:00:16.173
You've gotten all settled.

00:00:16.173 --> 00:00:17.739
And you're ready to go.

00:00:17.739 --> 00:00:19.530
We thought, in order
to give you this tour,

00:00:19.530 --> 00:00:21.580
we'd build out a
real application.

00:00:21.580 --> 00:00:24.320
We're going to extend
that meme app, Cloud meme

00:00:24.320 --> 00:00:26.600
application that we
saw in the keynote.

00:00:26.600 --> 00:00:29.570
And we're going to show you some
real business logic, written

00:00:29.570 --> 00:00:32.090
in App Engine and having
that run on the server.

00:00:32.090 --> 00:00:34.980
And we're going to build
that application in just 50

00:00:34.980 --> 00:00:36.530
minutes that we have left here.

00:00:36.530 --> 00:00:38.412
So I think that's
going to be great.

00:00:38.412 --> 00:00:39.120
Don't you think--

00:00:39.120 --> 00:00:39.340
BRYAN LYNCH: Wait.

00:00:39.340 --> 00:00:42.020
Brad, let's build something
a little more real world.

00:00:42.020 --> 00:00:44.210
I meme, you're just talk
about an App Engine app.

00:00:44.210 --> 00:00:45.630
I meme, it's a meme.

00:00:45.630 --> 00:00:48.059
We're going to have to
store these memes somewhere.

00:00:48.059 --> 00:00:48.850
So what about that?

00:00:48.850 --> 00:00:52.650
BRAD ABRAMS: I think we may
have time if we push it.

00:00:52.650 --> 00:00:55.370
We may have time to
also store the images.

00:00:55.370 --> 00:00:58.660
Let's store that in the
Cloud Storage Bucket.

00:00:58.660 --> 00:00:59.290
OK.

00:00:59.290 --> 00:01:00.840
So I think we can get
these two things done.

00:01:00.840 --> 00:01:01.170
BRYAN LYNCH: Wait.

00:01:01.170 --> 00:01:01.500
Wait.

00:01:01.500 --> 00:01:02.000
Hold on.

00:01:02.000 --> 00:01:02.630
Hold on.

00:01:02.630 --> 00:01:04.379
We've got to store the
metadata somewhere.

00:01:04.379 --> 00:01:05.120
You're going to have metadata.

00:01:05.120 --> 00:01:06.320
You're going to have user info.

00:01:06.320 --> 00:01:07.670
You're going to
have voting maybe.

00:01:07.670 --> 00:01:09.385
You're-- things
associated with the meme.

00:01:09.385 --> 00:01:09.970
BRAD ABRAMS: Yeah.

00:01:09.970 --> 00:01:11.330
BRYAN LYNCH: We are
we going to put that?

00:01:11.330 --> 00:01:12.413
BRAD ABRAMS: I don't know.

00:01:12.413 --> 00:01:14.900
What data stores
do you guys use?

00:01:14.900 --> 00:01:17.505
What's popular?

00:01:17.505 --> 00:01:18.005
No?

00:01:18.005 --> 00:01:18.560
No one's volunteering.

00:01:18.560 --> 00:01:18.850
What's popular with you?

00:01:18.850 --> 00:01:19.880
BRYAN LYNCH: Well, look, Brad.

00:01:19.880 --> 00:01:21.370
I think we should go
open source with this.

00:01:21.370 --> 00:01:21.790
I'll be honest.

00:01:21.790 --> 00:01:22.330
BRAD ABRAMS: Open source?

00:01:22.330 --> 00:01:22.620
OK.

00:01:22.620 --> 00:01:24.280
BRYAN LYNCH: I think I've
been using Mongo lately.

00:01:24.280 --> 00:01:25.410
And I think it's
a good-- I think

00:01:25.410 --> 00:01:26.370
it's a good option for us.

00:01:26.370 --> 00:01:27.500
BRAD ABRAMS: MongoDB users?

00:01:27.500 --> 00:01:28.990
Any MongoDB in here?

00:01:28.990 --> 00:01:29.490
Yes.

00:01:29.490 --> 00:01:30.520
A couple.

00:01:30.520 --> 00:01:31.450
Fantastic.

00:01:31.450 --> 00:01:31.950
Fine.

00:01:31.950 --> 00:01:37.480
I think probably we could
get a few of the records,

00:01:37.480 --> 00:01:42.120
some metadata stored in MongoDB,
running on a GCE Instance.

00:01:42.120 --> 00:01:43.830
But now, we really--
we just got to get

00:01:43.830 --> 00:01:45.520
started on this now if we're
going to finish this thing.

00:01:45.520 --> 00:01:46.150
BRYAN LYNCH: Wait, wait, wait.

00:01:46.150 --> 00:01:46.816
Slow down, Brad.

00:01:46.816 --> 00:01:49.520
We've got to get a-- this
has got to be real world.

00:01:49.520 --> 00:01:51.680
People are using their
mobile phones more and more.

00:01:51.680 --> 00:01:52.270
Let's face it.

00:01:52.270 --> 00:01:53.000
All the time.

00:01:53.000 --> 00:01:53.470
BRAD ABRAMS: Mobile.

00:01:53.470 --> 00:01:54.845
BRYAN LYNCH: And
frankly, they're

00:01:54.845 --> 00:01:56.945
going to expect some
kind of mobile interface.

00:01:56.945 --> 00:01:57.820
BRAD ABRAMS: Awesome.

00:01:57.820 --> 00:02:00.530
Well, I guess he's
running the demo.

00:02:00.530 --> 00:02:01.540
We got to do it.

00:02:01.540 --> 00:02:05.380
So we'll expose this as
a set of REST endpoints.

00:02:05.380 --> 00:02:08.900
And then, consume it as
an Android application,

00:02:08.900 --> 00:02:12.800
so that you can view and create
those memes on the client.

00:02:12.800 --> 00:02:17.440
So what we end up with is a very
basic cloud meme application,

00:02:17.440 --> 00:02:18.460
running on the phone.

00:02:18.460 --> 00:02:22.797
Lets you view the memes, unless
you go and create a new ones.

00:02:22.797 --> 00:02:25.130
BRYAN LYNCH: So I'm going to
start where everyone starts

00:02:25.130 --> 00:02:28.020
for Google products.
cloud.google.com.

00:02:28.020 --> 00:02:29.820
And I'll go to the
App Engine page first.

00:02:29.820 --> 00:02:33.340
And from there, we'll
go ahead and try it now.

00:02:33.340 --> 00:02:35.890
BRAD ABRAMS: So you go ahead
and give that any name you want.

00:02:35.890 --> 00:02:37.984
Use your creative
freedom there, Bryan.

00:02:40.770 --> 00:02:42.830
So we're just
titling this project,

00:02:42.830 --> 00:02:44.720
our cloud meme back in.

00:02:44.720 --> 00:02:46.950
And then, Bryan's
going to get to select

00:02:46.950 --> 00:02:48.140
whatever language he wants.

00:02:48.140 --> 00:02:49.305
I'm a Java fan myself.

00:02:49.305 --> 00:02:50.680
BRYAN LYNCH: I
have to be honest.

00:02:50.680 --> 00:02:52.130
I'm a fan of the
Python right now.

00:02:52.130 --> 00:02:52.800
BRAD ABRAMS: Python--

00:02:52.800 --> 00:02:54.040
BRYAN LYNCH: I think you
should really go with Python.

00:02:54.040 --> 00:02:55.415
BRAD ABRAMS:
[INAUDIBLE] Come on.

00:02:55.415 --> 00:02:56.360
It'll never catch on.

00:02:56.360 --> 00:02:58.660
But I guess you
got keyboards so--

00:02:58.660 --> 00:02:59.910
BRYAN LYNCH: Well, look, Brad.

00:02:59.910 --> 00:03:01.313
We can even try it now.

00:03:01.313 --> 00:03:02.646
BRAD ABRAMS: Well, that's great.

00:03:02.646 --> 00:03:04.807
So you can interact
with this sample

00:03:04.807 --> 00:03:05.890
right here in the browser.

00:03:05.890 --> 00:03:09.640
There's several for some
popular Python frameworks.

00:03:09.640 --> 00:03:11.110
You can go make
a change and then

00:03:11.110 --> 00:03:12.910
run it right here
in the browser.

00:03:12.910 --> 00:03:15.930
And you can see your
live changes come up.

00:03:15.930 --> 00:03:18.550
So this helps people that are
maybe new to the platform.

00:03:21.135 --> 00:03:24.170
Help people who are new to
the platform get started.

00:03:24.170 --> 00:03:25.170
BRYAN LYNCH: Absolutely.

00:03:25.170 --> 00:03:27.211
And look, the next step
we're going to have to do

00:03:27.211 --> 00:03:29.800
is install our G Cloud.

00:03:29.800 --> 00:03:30.550
BRAD ABRAMS: Yeah.

00:03:30.550 --> 00:03:32.549
So now, we're going to
provision Bryan's machine

00:03:32.549 --> 00:03:34.412
here with the latest
version of G Cloud.

00:03:34.412 --> 00:03:35.620
We have a cURL-based install.

00:03:35.620 --> 00:03:38.790
So it's very easy
to get up and going.

00:03:38.790 --> 00:03:41.310
And I think Bryan's
already got this installed.

00:03:41.310 --> 00:03:43.520
BRYAN LYNCH: I think I'll
just leave the one I have.

00:03:43.520 --> 00:03:45.687
BRAD ABRAMS: Maybe we'll
just skip the install step.

00:03:45.687 --> 00:03:46.353
BRYAN LYNCH: Oh.

00:03:46.353 --> 00:03:47.310
BRAD ABRAMS: Or not.

00:03:47.310 --> 00:03:47.663
BRYAN LYNCH: Or not.

00:03:47.663 --> 00:03:48.163
No, no.

00:03:48.163 --> 00:03:49.220
We'll do it.

00:03:49.220 --> 00:03:51.680
BRAD ABRAMS: Apparently,
we'll go through the install.

00:03:51.680 --> 00:03:56.170
You can see it's asking Bryan
what languages he wants.

00:03:56.170 --> 00:03:58.820
So we can only bring down the
components that really matter.

00:03:58.820 --> 00:04:01.660
And then we're bringing
them down onto his machine

00:04:01.660 --> 00:04:04.120
and installing those.

00:04:04.120 --> 00:04:07.640
And you can see the set of
components that we have here.

00:04:07.640 --> 00:04:10.260
So we now have a single
unified installer

00:04:10.260 --> 00:04:14.140
for all the components that are
in the Google Cloud Platform.

00:04:14.140 --> 00:04:17.079
So you can get up and
running very quickly.

00:04:17.079 --> 00:04:18.515
What do you think?

00:04:18.515 --> 00:04:20.140
BRYAN LYNCH: And
we'll get there, yeah?

00:04:20.140 --> 00:04:24.150
BRAD ABRAMS: We'll get
there in just a minute.

00:04:24.150 --> 00:04:25.030
As soon as-- yeah.

00:04:25.030 --> 00:04:26.466
So yes.

00:04:26.466 --> 00:04:28.090
So how are you enjoying
the day so far?

00:04:28.090 --> 00:04:30.970
[LAUGHTER]

00:04:30.970 --> 00:04:31.570
Yeah.

00:04:31.570 --> 00:04:32.320
So we're done now.

00:04:32.320 --> 00:04:32.610
BRYAN LYNCH: There we go.

00:04:32.610 --> 00:04:33.000
BRAD ABRAMS: OK.

00:04:33.000 --> 00:04:33.760
Great.

00:04:33.760 --> 00:04:36.261
So Bryan's just going to
update a few install steps.

00:04:36.261 --> 00:04:36.760
OK.

00:04:36.760 --> 00:04:40.580
Now, we have G Cloud installed.

00:04:40.580 --> 00:04:42.160
So you probably
saw in the keynote,

00:04:42.160 --> 00:04:45.050
but we can do a little
playing with G Cloud.

00:04:45.050 --> 00:04:47.230
So it's got some
tab completion here.

00:04:47.230 --> 00:04:47.350
BRYAN LYNCH: All right.

00:04:47.350 --> 00:04:48.141
So I'll do G Cloud.

00:04:48.141 --> 00:04:49.930
And I'll hit tab a couple times.

00:04:49.930 --> 00:04:51.300
And see what my options are.

00:04:51.300 --> 00:04:53.280
Well, let's look
at the components.

00:04:53.280 --> 00:04:54.180
So I'll type that.

00:04:54.180 --> 00:04:56.640
Double tab it.

00:04:56.640 --> 00:04:58.140
And I can complete
my components.

00:04:58.140 --> 00:05:00.470
And I'll see what the
options are for that.

00:05:00.470 --> 00:05:02.470
And as we saw in
the keynote, you

00:05:02.470 --> 00:05:05.020
can actually list what
components you have installed

00:05:05.020 --> 00:05:07.180
and what's available.

00:05:07.180 --> 00:05:08.230
All right.

00:05:08.230 --> 00:05:08.390
BRAD ABRAMS: All right.

00:05:08.390 --> 00:05:08.430
Yeah.

00:05:08.430 --> 00:05:10.190
So I think we're ready to
initialize this project,

00:05:10.190 --> 00:05:10.890
aren't we?

00:05:10.890 --> 00:05:12.800
BRYAN LYNCH: Well, Brad, I think
we need to authorize first.

00:05:12.800 --> 00:05:14.190
BRAD ABRAMS: Authorization.

00:05:14.190 --> 00:05:15.660
Yes.

00:05:15.660 --> 00:05:18.550
So how hard is it to log in
and give your credentials

00:05:18.550 --> 00:05:20.070
and whatnot.

00:05:20.070 --> 00:05:20.820
BRYAN LYNCH: Well.

00:05:23.720 --> 00:05:24.470
BRAD ABRAMS: Yeah.

00:05:24.470 --> 00:05:24.500
So--

00:05:24.500 --> 00:05:26.374
BRYAN LYNCH: If you
spell it right, it helps.

00:05:26.374 --> 00:05:28.220
BRAD ABRAMS: So what
Bryan's going to do

00:05:28.220 --> 00:05:32.140
is actually use OAuth now
to go and authenticate

00:05:32.140 --> 00:05:36.290
so that this instance of the
SDK knows who he is on Google.

00:05:36.290 --> 00:05:39.160
So he can access all
his Google accounts

00:05:39.160 --> 00:05:41.491
and whatnot for
the Cloud platform.

00:05:41.491 --> 00:05:41.990
OK.

00:05:41.990 --> 00:05:45.301
So now, I think we're
ready to initialize.

00:05:45.301 --> 00:05:45.800
So--

00:05:45.800 --> 00:05:46.230
BRYAN LYNCH: We are.

00:05:46.230 --> 00:05:48.188
BRAD ABRAMS: --we're
going to do a G Cloud init

00:05:48.188 --> 00:05:51.269
and use the project ID
that Bryan created earlier.

00:05:51.269 --> 00:05:53.060
And this is a brand
new project, so there's

00:05:53.060 --> 00:05:55.080
no code in the repository.

00:05:55.080 --> 00:05:57.300
But if there were, it
would sink that down.

00:05:57.300 --> 00:06:01.370
Either way, it's setting
up his local instance.

00:06:01.370 --> 00:06:02.100
OK.

00:06:02.100 --> 00:06:05.080
So I guess we're ready to get
started writing some code.

00:06:05.080 --> 00:06:06.290
BRYAN LYNCH: We are.

00:06:06.290 --> 00:06:09.840
BRAD ABRAMS: So you have some--
I guess the first step here

00:06:09.840 --> 00:06:13.590
is we're going to create a
couple of REST endpoints.

00:06:13.590 --> 00:06:17.070
We're going to create one
to list those meme templates

00:06:17.070 --> 00:06:19.170
that we have to
base the memes on.

00:06:19.170 --> 00:06:22.200
One to create a new meme,
to upload a new meme and one

00:06:22.200 --> 00:06:24.035
to list all the finished memes.

00:06:24.035 --> 00:06:25.160
BRYAN LYNCH: So look, Brad.

00:06:25.160 --> 00:06:27.410
I think we need to start
with writing those endpoints.

00:06:27.410 --> 00:06:29.840
So I'll drag over a file
that I set up ahead of time.

00:06:29.840 --> 00:06:30.590
BRAD ABRAMS: Yeah.

00:06:30.590 --> 00:06:31.550
Julia Child style.

00:06:31.550 --> 00:06:32.190
I like it.

00:06:32.190 --> 00:06:33.690
BRYAN LYNCH: I go
and open that up.

00:06:33.690 --> 00:06:35.190
And as you can see
at the top there,

00:06:35.190 --> 00:06:37.040
we've got our
standard endpoints,

00:06:37.040 --> 00:06:38.200
imports for endpoints.

00:06:41.180 --> 00:06:45.464
Then, we set up our client
IDs for who can access it.

00:06:45.464 --> 00:06:46.880
And then, you see
a couple classes

00:06:46.880 --> 00:06:49.088
that we've got to wrap
messages between the endpoints

00:06:49.088 --> 00:06:50.830
and the mobile client.

00:06:50.830 --> 00:06:52.390
So we've got one for memes.

00:06:52.390 --> 00:06:55.450
And we're storing the standard
metadata, the image URL,

00:06:55.450 --> 00:06:57.930
the text, an ID
to track it later,

00:06:57.930 --> 00:06:59.900
a user, and then a votes.

00:06:59.900 --> 00:07:04.010
And then, we've also got a class
to wrap that as a collection.

00:07:04.010 --> 00:07:06.170
And that's meme collection.

00:07:06.170 --> 00:07:08.100
And if we keep scrolling
down that file,

00:07:08.100 --> 00:07:10.860
we see a standard
endpoints definition.

00:07:10.860 --> 00:07:12.200
So we're defining our API.

00:07:12.200 --> 00:07:13.560
We've got cloud meme.

00:07:13.560 --> 00:07:17.380
We got a version, a description,
and then the allowed clients.

00:07:17.380 --> 00:07:20.890
So basically, you're locking
it down to our mobile client.

00:07:20.890 --> 00:07:23.160
And so we can walk
through X from there

00:07:23.160 --> 00:07:26.850
into a couple functions we
created on our endpoint,

00:07:26.850 --> 00:07:28.231
namely the first one create.

00:07:28.231 --> 00:07:30.230
We're going to expect to
be able to create memes

00:07:30.230 --> 00:07:31.240
on this service.

00:07:31.240 --> 00:07:33.615
BRAD ABRAMS: And notice
this is an HTTP post.

00:07:33.615 --> 00:07:34.740
And you'll see in a minute.

00:07:34.740 --> 00:07:37.580
You can just use cURL
to be able access these.

00:07:37.580 --> 00:07:39.916
So these are standard
REST interfaces.

00:07:39.916 --> 00:07:42.040
BRYAN LYNCH: And as you
can see, we've stub it out.

00:07:42.040 --> 00:07:45.594
So we'll give it a response
for our early testing.

00:07:45.594 --> 00:07:47.385
And the next one we
can look at is listing.

00:07:47.385 --> 00:07:50.879
You're going to expect to list
memes once you've put them up.

00:07:50.879 --> 00:07:51.670
So we've got there.

00:07:51.670 --> 00:07:53.420
And you'll notice
this one's a GET.

00:07:53.420 --> 00:07:56.370
So you could do a standard GET
just to get a list of your meme

00:07:56.370 --> 00:07:58.582
and returning
stored set of memes.

00:07:58.582 --> 00:07:59.540
BRAD ABRAMS: All right.

00:07:59.540 --> 00:07:59.800
Yeah.

00:07:59.800 --> 00:08:00.758
That looks pretty good.

00:08:00.758 --> 00:08:03.280
I think we're-- we basically
have the first part of the demo

00:08:03.280 --> 00:08:03.780
ready.

00:08:03.780 --> 00:08:06.090
Are we ready to just go
ahead and push that up?

00:08:06.090 --> 00:08:07.923
BRYAN LYNCH: Well, let's
go ahead and add it

00:08:07.923 --> 00:08:09.480
into our local repository first.

00:08:09.480 --> 00:08:10.085
BRAD ABRAMS: Of course.

00:08:10.085 --> 00:08:11.300
BRYAN LYNCH: And commit that.

00:08:13.754 --> 00:08:15.420
BRAD ABRAMS: So we're
just committing it

00:08:15.420 --> 00:08:18.840
to the local repository
on Bryan's laptop.

00:08:18.840 --> 00:08:20.230
So now we're ready push it up.

00:08:20.230 --> 00:08:20.630
BRYAN LYNCH: Look, Brad.

00:08:20.630 --> 00:08:22.471
I think we need to put
some unit tests in.

00:08:22.471 --> 00:08:24.554
BRAD ABRAMS: Unit-- you're
such a Google engineer,

00:08:24.554 --> 00:08:25.890
doing testing all the time.

00:08:25.890 --> 00:08:28.774
So I guess you already have
those ready, prepared as well.

00:08:28.774 --> 00:08:31.190
BRYAN LYNCH: Let's say I have
a few that I added in there.

00:08:31.190 --> 00:08:32.270
BRAD ABRAMS: All right.

00:08:32.270 --> 00:08:35.039
So we have some basic endpoints.

00:08:35.039 --> 00:08:37.751
And we have some tests
written for those endpoints.

00:08:37.751 --> 00:08:38.959
BRYAN LYNCH: And, look, Brad.

00:08:38.959 --> 00:08:39.870
We're going to need
one more thing.

00:08:39.870 --> 00:08:41.980
If you want to make
this an App Engine app--

00:08:41.980 --> 00:08:44.270
BRAD ABRAMS: We should
make it an App Engine app.

00:08:44.270 --> 00:08:46.120
We should make it an
App Engine app as well.

00:08:46.120 --> 00:08:47.900
BRYAN LYNCH: So I'll
go drag that in.

00:08:47.900 --> 00:08:49.250
And we take a quick look at it.

00:08:49.250 --> 00:08:51.270
And those with App
Engine, you can see we've

00:08:51.270 --> 00:08:52.650
set up our application.

00:08:52.650 --> 00:08:56.820
We've got a version, a runtime
through the settings in there.

00:08:56.820 --> 00:09:00.051
And then, our handlers,
we've set up our endpoints.

00:09:00.051 --> 00:09:00.550
Handler.

00:09:00.550 --> 00:09:02.450
BRAD ABRAMS: All right.

00:09:02.450 --> 00:09:03.427
BRYAN LYNCH: So.

00:09:03.427 --> 00:09:05.010
BRAD ABRAMS: So now
Bryan's just going

00:09:05.010 --> 00:09:08.760
to commit the app.yaml
file and the test file

00:09:08.760 --> 00:09:10.550
to his local repository.

00:09:10.550 --> 00:09:14.060
And then, we'll do a git
push and push that up

00:09:14.060 --> 00:09:18.005
to the repository that the
developer console has for us

00:09:18.005 --> 00:09:18.505
already.

00:09:21.810 --> 00:09:22.310
OK?

00:09:22.310 --> 00:09:24.190
And so that's going to take
just a minute to push up.

00:09:24.190 --> 00:09:26.273
So you want to flip over
to the developer console?

00:09:26.273 --> 00:09:27.440
BRYAN LYNCH: Absolutely.

00:09:27.440 --> 00:09:29.230
BRAD ABRAMS: So
as we saw earlier,

00:09:29.230 --> 00:09:31.500
you go to developer tab there.

00:09:34.710 --> 00:09:35.210
Yeah.

00:09:35.210 --> 00:09:39.320
So as we so earlier, we have
a free private git repository

00:09:39.320 --> 00:09:41.260
that's hosted for
you that you can use.

00:09:41.260 --> 00:09:44.350
It's accessible to all
the members of your team.

00:09:44.350 --> 00:09:46.970
And then, of course, if
you want to use GitHub,

00:09:46.970 --> 00:09:48.690
you can absolutely do that.

00:09:48.690 --> 00:09:52.880
And then after the
push has happened

00:09:52.880 --> 00:09:55.520
as a post commit
action, we're going

00:09:55.520 --> 00:09:57.440
to run our Python unit test.

00:09:57.440 --> 00:09:59.207
You saw Bryan add
some unit test.

00:09:59.207 --> 00:10:00.790
And the way we're
going to do that is,

00:10:00.790 --> 00:10:03.200
we have a virtual
machine spun up.

00:10:03.200 --> 00:10:05.240
And it's already
running Jenkins.

00:10:05.240 --> 00:10:07.900
And Jenkins is the open
source workflow management

00:10:07.900 --> 00:10:09.479
tool that's pretty popular.

00:10:09.479 --> 00:10:11.020
And he's got plug-ins
for everything.

00:10:11.020 --> 00:10:14.280
One of the plug-ins is
to run Python unit test.

00:10:14.280 --> 00:10:16.239
So you want to switch
over and look at that VM?

00:10:16.239 --> 00:10:16.988
BRYAN LYNCH: Yeah.

00:10:16.988 --> 00:10:17.722
Let's do that.

00:10:17.722 --> 00:10:19.430
BRAD ABRAMS: So that
VM has been spun up.

00:10:19.430 --> 00:10:21.380
And you can see in
a second probably

00:10:21.380 --> 00:10:25.960
the spikes were Bryan has
been practicing this demo.

00:10:25.960 --> 00:10:28.290
And what we're doing on
this machine right now,

00:10:28.290 --> 00:10:32.400
we've already prepared it
with-- or the cloud platform

00:10:32.400 --> 00:10:34.980
prepare it for us with Jenkins.

00:10:34.980 --> 00:10:37.290
And then, when we
did that push, it

00:10:37.290 --> 00:10:39.860
pulled the code
down onto the VM.

00:10:39.860 --> 00:10:44.090
And it started executing
all those unit tests.

00:10:44.090 --> 00:10:46.997
So at this point, we can see
the progress on the unit test.

00:10:46.997 --> 00:10:48.080
And see how they're going.

00:10:48.080 --> 00:10:49.350
BRYAN LYNCH: Absolutely.

00:10:49.350 --> 00:10:50.933
BRAD ABRAMS: So if
we switch it-- yep.

00:10:50.933 --> 00:10:53.350
And they'll release history.

00:10:53.350 --> 00:10:56.225
So we should see an entry
there for the unit test.

00:10:58.495 --> 00:10:58.995
Yep.

00:10:58.995 --> 00:11:02.730
And you can see the tests have
already done and deployed.

00:11:02.730 --> 00:11:06.530
But why don't we go ahead
and look at the test, though?

00:11:06.530 --> 00:11:10.420
So these are the
tests results page.

00:11:10.420 --> 00:11:13.620
So you can see here the list of
all the tests and the runtime.

00:11:13.620 --> 00:11:16.086
Bryan wrote some very efficient
tests there looks like.

00:11:16.086 --> 00:11:17.460
BRYAN LYNCH:
Stubbed out for now.

00:11:17.460 --> 00:11:18.168
BRAD ABRAMS: Yes.

00:11:18.168 --> 00:11:18.810
Yes.

00:11:18.810 --> 00:11:19.100
OK.

00:11:19.100 --> 00:11:20.275
So there's the test results.

00:11:20.275 --> 00:11:22.260
So at this point if there
was a break in your test,

00:11:22.260 --> 00:11:24.134
you could use this to
drill in and figure out

00:11:24.134 --> 00:11:25.310
what the issue was.

00:11:25.310 --> 00:11:27.710
So then, if we go
back to release,

00:11:27.710 --> 00:11:30.317
I guess we pushed it
to production now.

00:11:30.317 --> 00:11:31.650
So we're ready to test that out.

00:11:31.650 --> 00:11:32.520
BRYAN LYNCH: It is deployed.

00:11:32.520 --> 00:11:34.820
BRAD ABRAMS: So but what
we-- remember what we built

00:11:34.820 --> 00:11:36.230
was a set of REST endpoint.

00:11:36.230 --> 00:11:38.660
So how we are going to interact
with those REST endpoints

00:11:38.660 --> 00:11:41.630
and test them out to see
if there really working?

00:11:41.630 --> 00:11:43.710
BRYAN LYNCH: Well, we
can use the API Explorer.

00:11:43.710 --> 00:11:45.626
So as you can see, with
any app that you have,

00:11:45.626 --> 00:11:47.470
you can actually type
in, use especially

00:11:47.470 --> 00:11:51.410
define URL to give
you the Explorer.

00:11:51.410 --> 00:11:52.160
BRAD ABRAMS: Yeah.

00:11:52.160 --> 00:11:57.190
So underscore A H is the
magic system-provided URL

00:11:57.190 --> 00:11:58.270
space for App Engine.

00:11:58.270 --> 00:12:01.190
And then, slash API
gets you into endpoints.

00:12:01.190 --> 00:12:03.020
And then, slash
Explorer will bring you

00:12:03.020 --> 00:12:05.382
into this view with
your own API set.

00:12:05.382 --> 00:12:07.840
BRYAN LYNCH: So as you can see,
this is the API we defined,

00:12:07.840 --> 00:12:09.657
Cloud Meme API.

00:12:09.657 --> 00:12:11.490
And coming into there,
we have the functions

00:12:11.490 --> 00:12:13.135
we defined on each of those.

00:12:13.135 --> 00:12:14.010
BRAD ABRAMS: Awesome.

00:12:14.010 --> 00:12:14.760
Let's take a look.

00:12:14.760 --> 00:12:18.480
BRYAN LYNCH: So we go ahead
and test list, for example.

00:12:18.480 --> 00:12:19.230
BRAD ABRAMS: Yeah.

00:12:19.230 --> 00:12:23.010
And that's returning the
hard-coded set that we have.

00:12:23.010 --> 00:12:24.800
Notice in the first
box there, it's

00:12:24.800 --> 00:12:28.620
showing you exactly what
that cURL command would be.

00:12:28.620 --> 00:12:32.450
What the HTTP git is to be
able to access this method.

00:12:32.450 --> 00:12:34.540
And then, it shows you
the response in JSON.

00:12:34.540 --> 00:12:37.050
So this is a nice
debugging tool.

00:12:37.050 --> 00:12:39.920
It's a nice way to
establish use bug

00:12:39.920 --> 00:12:42.610
something is-- if it's on
the client or on the server.

00:12:42.610 --> 00:12:45.464
You know if it works here,
then it's not a server issue.

00:12:45.464 --> 00:12:46.880
BRYAN LYNCH: I'm
going to go back.

00:12:46.880 --> 00:12:48.730
We could even test our create.

00:12:48.730 --> 00:12:50.540
Probably stub that out as well.

00:12:50.540 --> 00:12:53.020
And inside the request body,
you can add in the elements

00:12:53.020 --> 00:12:54.740
that we expect.

00:12:54.740 --> 00:12:59.450
So I'll put in a test URL
as well as some test text.

00:12:59.450 --> 00:13:02.436
And I can go ahead and
execute that as well.

00:13:02.436 --> 00:13:04.810
BRAD ABRAMS: Oh, it looks like
you've got an error there.

00:13:04.810 --> 00:13:06.180
BRYAN LYNCH: We do
need to authenticate.

00:13:06.180 --> 00:13:06.495
BRAD ABRAMS: OK.

00:13:06.495 --> 00:13:07.520
BRYAN LYNCH: So we are
going to ask our users

00:13:07.520 --> 00:13:09.070
to authenticate to create memes.

00:13:09.070 --> 00:13:11.270
So you can do that here
by clicking on top,

00:13:11.270 --> 00:13:15.910
button at the top
and authorizing.

00:13:15.910 --> 00:13:19.772
And then, we can go ahead
and run that same query.

00:13:19.772 --> 00:13:20.480
BRAD ABRAMS: Yep.

00:13:20.480 --> 00:13:22.650
And notice here in
the request again,

00:13:22.650 --> 00:13:25.400
it shows you the
metadata that you

00:13:25.400 --> 00:13:27.860
need to send up with the
request to be authenticated.

00:13:27.860 --> 00:13:30.230
So again, if you
wanted to try this,

00:13:30.230 --> 00:13:32.770
write your own lightweight
wrapper for it.

00:13:32.770 --> 00:13:34.570
You could in
JavaScript or whatnot.

00:13:34.570 --> 00:13:36.400
And of course, it
shows you the results.

00:13:36.400 --> 00:13:37.400
BRYAN LYNCH: Absolutely.

00:13:37.400 --> 00:13:37.720
BRAD ABRAMS: OK.

00:13:37.720 --> 00:13:39.400
So I think we've got the
first step done, right?

00:13:39.400 --> 00:13:40.110
BRYAN LYNCH: We do.

00:13:40.110 --> 00:13:40.776
BRAD ABRAMS: OK.

00:13:40.776 --> 00:13:43.950
So let's switch
back to the slides.

00:13:43.950 --> 00:13:47.020
So what we just showed you
is that it's very easy to get

00:13:47.020 --> 00:13:47.570
started.

00:13:47.570 --> 00:13:49.890
We talked about using
those standard tools.

00:13:49.890 --> 00:13:52.600
We showed you the simple
build, test, and deploy.

00:13:52.600 --> 00:13:55.780
And how to test the
service with API explorer.

00:13:55.780 --> 00:13:57.830
Obviously, we only
touched on this briefly.

00:13:57.830 --> 00:14:01.630
If you want to drill in more
in this room, at 1 o'clock,

00:14:01.630 --> 00:14:05.420
they'll be at DevOps at
Google that I encourage

00:14:05.420 --> 00:14:08.300
you to come to where we'll
drill into it in more detail.

00:14:08.300 --> 00:14:08.800
OK.

00:14:08.800 --> 00:14:10.620
We're ready for step two.

00:14:10.620 --> 00:14:13.200
So Bryan said we're going
to build an Android app.

00:14:13.200 --> 00:14:14.740
So let's jump right into that.

00:14:14.740 --> 00:14:17.070
We're going to focus on
two key pieces of that.

00:14:17.070 --> 00:14:22.070
One is we're going to build an
Android-optimized Java client

00:14:22.070 --> 00:14:24.680
library for the services
that you just saw.

00:14:24.680 --> 00:14:26.410
And we're going to
show how to integrate

00:14:26.410 --> 00:14:28.520
that with Android Studio.

00:14:28.520 --> 00:14:31.302
So back to demo machine.

00:14:31.302 --> 00:14:32.260
BRYAN LYNCH: All right.

00:14:32.260 --> 00:14:34.940
We're back in our directory
that we had our files in.

00:14:34.940 --> 00:14:37.800
And we can run the
endpoints command git here.

00:14:37.800 --> 00:14:40.840
We'll get the client
live out of it.

00:14:40.840 --> 00:14:42.020
We'll give it Java.

00:14:42.020 --> 00:14:44.150
We'll give it our class name.

00:14:49.350 --> 00:14:51.995
And then, we'll ask for it to
build-- give us a build system.

00:14:51.995 --> 00:14:55.337
And we'll use Maven.

00:14:55.337 --> 00:14:57.170
BRAD ABRAMS: So what
this is doing right now

00:14:57.170 --> 00:14:59.880
is it's taking the
description of the service,

00:14:59.880 --> 00:15:01.870
the generic description
of the service.

00:15:01.870 --> 00:15:05.120
And it's creating an
Android-optimized Java client

00:15:05.120 --> 00:15:06.330
library for it.

00:15:06.330 --> 00:15:08.730
So that as an
Android developer, I

00:15:08.730 --> 00:15:11.630
want to interact with classes.

00:15:11.630 --> 00:15:13.280
Those entities
should be classes.

00:15:13.280 --> 00:15:15.740
And then methods,
the REST method

00:15:15.740 --> 00:15:18.450
should actually be methods on
a class on a request factory.

00:15:18.450 --> 00:15:20.480
And that's exactly what
you're seeing here.

00:15:20.480 --> 00:15:23.310
All the entities Bryan
created earlier in Python,

00:15:23.310 --> 00:15:25.160
we now have Java
versions of them.

00:15:25.160 --> 00:15:29.866
And then, we have the cloud
memes request as well.

00:15:29.866 --> 00:15:32.240
So now what's left to go--
oh, do you want to look at one

00:15:32.240 --> 00:15:33.020
of them, or--

00:15:33.020 --> 00:15:33.770
BRYAN LYNCH: Well.

00:15:33.770 --> 00:15:34.100
BRAD ABRAMS: Yeah.

00:15:34.100 --> 00:15:34.870
Bryan, let's look
at one of them.

00:15:34.870 --> 00:15:35.655
That's fantastic.

00:15:41.890 --> 00:15:43.390
BRYAN LYNCH: So as
you can see, it's

00:15:43.390 --> 00:15:45.175
creating basically
a model for your--

00:15:45.175 --> 00:15:49.009
to wrap all the communication
between the end point.

00:15:49.009 --> 00:15:50.425
And then, if you
come in here, you

00:15:50.425 --> 00:15:51.883
can see it's creating
for this one.

00:15:51.883 --> 00:15:54.404
We are looking at basically
a cloud meme collection.

00:15:54.404 --> 00:15:56.320
And it's just showing
building a collection up

00:15:56.320 --> 00:15:59.980
of cloud memes in
standard getter and setter

00:15:59.980 --> 00:16:00.642
methods for it.

00:16:00.642 --> 00:16:01.350
BRAD ABRAMS: Yep.

00:16:01.350 --> 00:16:04.800
So this is going to handle all
the authentication hassles, all

00:16:04.800 --> 00:16:07.260
the network plumbing,
all the serialization

00:16:07.260 --> 00:16:11.190
and deserialization
to JSON and back.

00:16:11.190 --> 00:16:13.765
So really, it makes
this very simple to use.

00:16:13.765 --> 00:16:15.140
BRYAN LYNCH: And
so the next step

00:16:15.140 --> 00:16:18.470
is going to basically
install our Maven repository.

00:16:18.470 --> 00:16:20.141
Install it locally.

00:16:20.141 --> 00:16:21.890
BRAD ABRAMS: So because,
in just a minute,

00:16:21.890 --> 00:16:24.040
we're going to access
it from Android Studio,

00:16:24.040 --> 00:16:26.150
Android Studio
uses Gradle as its

00:16:26.150 --> 00:16:28.760
build system which knows how
to speak to the local Maven

00:16:28.760 --> 00:16:29.546
repository.

00:16:29.546 --> 00:16:30.920
So to make that
easy, we're going

00:16:30.920 --> 00:16:34.010
to put it into our local
Maven repository here.

00:16:34.010 --> 00:16:37.614
So I think is that-- that
didn't quite work there, Bryan.

00:16:37.614 --> 00:16:38.780
BRYAN LYNCH: No, it did not.

00:16:38.780 --> 00:16:39.940
Make sure I'm in
the right directory

00:16:39.940 --> 00:16:40.580
BRAD ABRAMS: Ah, OK.

00:16:40.580 --> 00:16:41.080
Yes.

00:16:41.080 --> 00:16:42.282
BRYAN LYNCH: There we go.

00:16:42.282 --> 00:16:43.584
All right.

00:16:43.584 --> 00:16:44.250
BRAD ABRAMS: OK.

00:16:44.250 --> 00:16:44.520
Great.

00:16:44.520 --> 00:16:45.020
Yes.

00:16:45.020 --> 00:16:48.399
So now, he's got it in his
local Maven repository.

00:16:48.399 --> 00:16:50.440
Now, we're going to pop
up Android Studio, right?

00:16:50.440 --> 00:16:51.439
BRYAN LYNCH: Absolutely.

00:16:51.439 --> 00:16:54.940
BRAD ABRAMS: So Android Studio
is an IntelliJ-based IDE

00:16:54.940 --> 00:16:57.150
that we're moving to.

00:16:57.150 --> 00:17:00.340
It's a good option if
you're an Android developer.

00:17:00.340 --> 00:17:02.150
And what we're going
to do-- actually,

00:17:02.150 --> 00:17:05.480
Bryan already created
most of the Android app,

00:17:05.480 --> 00:17:06.960
the boring bits of
the Android app.

00:17:06.960 --> 00:17:10.319
All the UI, all the user
interaction is already done.

00:17:10.319 --> 00:17:12.319
And what we're
going to show now is

00:17:12.319 --> 00:17:15.562
how to access the
service that we defined.

00:17:15.562 --> 00:17:17.270
So I guess the first
thing you need to do

00:17:17.270 --> 00:17:19.109
is change the Gradle build file.

00:17:19.109 --> 00:17:20.109
BRYAN LYNCH: Absolutely.

00:17:20.109 --> 00:17:23.140
So we'll open that up.

00:17:23.140 --> 00:17:28.475
And we'll add in our dependency
on the new cloud main library.

00:17:28.475 --> 00:17:30.225
And we can go ahead
and sync that.

00:17:30.225 --> 00:17:30.975
BRAD ABRAMS: Yeah.

00:17:30.975 --> 00:17:35.600
So again, Android Studio uses
Gradle as its build system.

00:17:35.600 --> 00:17:38.992
You might recognize it's a
Groovy-based build language.

00:17:38.992 --> 00:17:40.950
And that's really important
for the flexibility

00:17:40.950 --> 00:17:43.210
that you need to build when
you're building Android

00:17:43.210 --> 00:17:46.010
apps targeting multiple
devices and whatnot.

00:17:46.010 --> 00:17:49.310
And what we've done here is
just referenced that library

00:17:49.310 --> 00:17:52.660
that we just added to
our Maven repository.

00:17:52.660 --> 00:17:53.160
OK.

00:17:53.160 --> 00:17:54.350
So we've got the library.

00:17:54.350 --> 00:17:56.885
Now, I see you've got
the source code in there.

00:17:56.885 --> 00:17:57.635
BRYAN LYNCH: Yeah.

00:17:57.635 --> 00:17:59.870
So we'll open up
our meme lister.

00:17:59.870 --> 00:18:02.602
We're going to have
to list our memes.

00:18:02.602 --> 00:18:04.810
And then, we'll go ahead
and add in some initial code

00:18:04.810 --> 00:18:05.935
to access that new library.

00:18:08.260 --> 00:18:09.010
BRAD ABRAMS: Yeah.

00:18:09.010 --> 00:18:13.020
So now, we're going to show the
code that's actually required

00:18:13.020 --> 00:18:16.702
in order to call those methods.

00:18:16.702 --> 00:18:18.910
BRYAN LYNCH: So if we walk
through this very quickly,

00:18:18.910 --> 00:18:22.722
we can see we're
importing the Android app.

00:18:22.722 --> 00:18:24.180
You can see in
front of here, we're

00:18:24.180 --> 00:18:26.060
creating our service
that we're going

00:18:26.060 --> 00:18:28.290
to use to communicate
to the endpoint.

00:18:28.290 --> 00:18:30.974
At this point, we built it.

00:18:30.974 --> 00:18:32.390
And then, for
handling the intent,

00:18:32.390 --> 00:18:34.100
this is basically communicating
with the UI layer.

00:18:34.100 --> 00:18:35.300
We increase our new meme.

00:18:38.132 --> 00:18:39.840
And then, we can handle
the creative turn

00:18:39.840 --> 00:18:41.804
back from the back in.

00:18:41.804 --> 00:18:42.527
BRAD ABRAMS: OK.

00:18:42.527 --> 00:18:43.860
So that look pretty good, right?

00:18:43.860 --> 00:18:44.670
We're ready to run it?

00:18:44.670 --> 00:18:45.630
BRYAN LYNCH: Let's do it.

00:18:45.630 --> 00:18:47.210
BRAD ABRAMS: So just
to make it more fun,

00:18:47.210 --> 00:18:49.751
we've already got a version of
the app running on this phone.

00:18:49.751 --> 00:18:52.450
So can we switch to the phone?

00:18:52.450 --> 00:18:54.030
So this is what
the resulting app

00:18:54.030 --> 00:18:55.750
looks like going
against those services.

00:18:55.750 --> 00:18:58.500
Notice we only have a
couple of those stock memes

00:18:58.500 --> 00:18:59.330
that are there.

00:18:59.330 --> 00:19:02.570
But we have the basic UI
functionality in place.

00:19:02.570 --> 00:19:04.560
We've got the meme there.

00:19:04.560 --> 00:19:06.730
And I can say, Hi, boss.

00:19:06.730 --> 00:19:08.620
And I can go ahead
and post that.

00:19:08.620 --> 00:19:10.370
And it's calling our service.

00:19:10.370 --> 00:19:12.180
But of course, the
service is stubbed out.

00:19:12.180 --> 00:19:16.090
So when we do the list again,
we get the same static define

00:19:16.090 --> 00:19:17.220
ones.

00:19:17.220 --> 00:19:20.630
But we have shown that we
can build a basic Android

00:19:20.630 --> 00:19:21.780
application.

00:19:21.780 --> 00:19:24.280
And that it can call
our services up there

00:19:24.280 --> 00:19:25.260
on the server.

00:19:25.260 --> 00:19:29.270
So Ray, can we switch
back to slides, please?

00:19:29.270 --> 00:19:29.770
OK.

00:19:29.770 --> 00:19:31.860
So right, what we
just showed you

00:19:31.860 --> 00:19:35.950
was creating this strongly
typed Java client library.

00:19:35.950 --> 00:19:39.330
Using the endpoints command, we
talked about the Maven package

00:19:39.330 --> 00:19:42.220
management support and how
to build an Android app.

00:19:42.220 --> 00:19:45.100
So at the end of the
day today, or at 3:30

00:19:45.100 --> 00:19:47.180
today, there will
be a whole talk

00:19:47.180 --> 00:19:49.566
just on building cloud
back-ins for Android Apps.

00:19:49.566 --> 00:19:50.690
That will be right in here.

00:19:50.690 --> 00:19:54.290
So I encourage you go to
that if you want more info.

00:19:54.290 --> 00:19:54.950
OK.

00:19:54.950 --> 00:19:56.767
We're ready for the next step.

00:19:56.767 --> 00:19:58.725
It's time to make this
thing really production.

00:19:58.725 --> 00:20:00.860
It's sort of a toy app so far.

00:20:00.860 --> 00:20:02.540
We're ready to make it real.

00:20:02.540 --> 00:20:04.580
To make it real, we're
going to do two things.

00:20:04.580 --> 00:20:06.810
We're going to store
that image data.

00:20:06.810 --> 00:20:09.420
We're going to store it
in Google Cloud Storage,

00:20:09.420 --> 00:20:12.690
in our blob storage, our
bucket storage there.

00:20:12.690 --> 00:20:16.640
And we're going to spin
up on MongoDB cluster

00:20:16.640 --> 00:20:20.670
and store the metadata for
those images in that cluster.

00:20:20.670 --> 00:20:21.230
OK, Bryan.

00:20:21.230 --> 00:20:23.350
Are we ready to roll with that?

00:20:23.350 --> 00:20:23.850
OK.

00:20:23.850 --> 00:20:25.600
Let's switch back to
Bryan's demo machine.

00:20:28.184 --> 00:20:30.600
BRYAN LYNCH: So if we're going
to add in the next service,

00:20:30.600 --> 00:20:32.660
we're going to go
back to our files.

00:20:32.660 --> 00:20:34.731
And we've prepped a few
more to accomplish this.

00:20:34.731 --> 00:20:36.230
The first thing
we'll do is actually

00:20:36.230 --> 00:20:39.070
add in our cloud storage
and our image generation.

00:20:42.700 --> 00:20:45.490
And if we pop up in
the cloud storage,

00:20:45.490 --> 00:20:47.160
take a quick look at that.

00:20:47.160 --> 00:20:49.830
You can see we're importing our
cloud storage Python library.

00:20:49.830 --> 00:20:52.640
Which, again, is a
Google-provided library.

00:20:52.640 --> 00:20:56.290
Setting up a URL for
the memes to be at.

00:20:56.290 --> 00:20:58.510
Coming into our
upload method, we

00:20:58.510 --> 00:21:01.932
can see where it's
defining a unique ID,

00:21:01.932 --> 00:21:03.390
assigning it a file
name that we're

00:21:03.390 --> 00:21:04.831
going to upload
to cloud storage.

00:21:04.831 --> 00:21:06.330
And in the middle
of the file, we're

00:21:06.330 --> 00:21:09.300
creating our cloud
file on cloud storage.

00:21:09.300 --> 00:21:12.150
Putting in settings
there for writing a file,

00:21:12.150 --> 00:21:14.600
that it's going
to be a PNG image.

00:21:14.600 --> 00:21:17.280
And then, it's public readable.

00:21:17.280 --> 00:21:20.070
And then, from there,
we're basically

00:21:20.070 --> 00:21:21.900
writing out the
binary image that we

00:21:21.900 --> 00:21:25.417
passed into this function
into that cloud storage file.

00:21:25.417 --> 00:21:27.500
And then, the last step
is actually writing it out

00:21:27.500 --> 00:21:28.209
to cloud storage.

00:21:28.209 --> 00:21:28.958
BRAD ABRAMS: Yeah.

00:21:28.958 --> 00:21:29.930
That looks pretty easy.

00:21:29.930 --> 00:21:31.840
So again, what Bryan
showing you here

00:21:31.840 --> 00:21:34.000
is code that running
on App Engine.

00:21:34.000 --> 00:21:37.540
That's taking the image
and stitching it together,

00:21:37.540 --> 00:21:39.930
putting the text on
it, and storing that up

00:21:39.930 --> 00:21:42.010
to cloud storage.

00:21:42.010 --> 00:21:43.677
So you want to show
it in cloud storage?

00:21:43.677 --> 00:21:44.510
[INTERPOSING VOICES]

00:21:44.510 --> 00:21:45.770
Show the cloud storage viewer?

00:21:45.770 --> 00:21:48.030
BRYAN LYNCH: So if we come
into the developer console

00:21:48.030 --> 00:21:51.380
and you're on your application,
you clicked on a cloud storage.

00:21:51.380 --> 00:21:52.680
And you get your browser.

00:21:52.680 --> 00:21:55.290
And as you can see, we've
set up some buckets for use.

00:21:55.290 --> 00:21:58.442
Cloud Meme Bucket is the
one we are writing to.

00:21:58.442 --> 00:22:00.900
BRAD ABRAMS: And it's not really
in Spanish, though, is it?

00:22:00.900 --> 00:22:02.275
BRYAN LYNCH: It's
not in Spanish.

00:22:02.275 --> 00:22:02.840
No.

00:22:02.840 --> 00:22:04.150
And as you can
see, we've actually

00:22:04.150 --> 00:22:05.316
been doing a bit of testing.

00:22:05.316 --> 00:22:08.390
So you've got some
memes in here already.

00:22:08.390 --> 00:22:10.220
And again, this is
all-- can be accessed

00:22:10.220 --> 00:22:13.484
from your application,
both writing and reading.

00:22:13.484 --> 00:22:14.150
BRAD ABRAMS: OK.

00:22:14.150 --> 00:22:14.983
So that looks great.

00:22:14.983 --> 00:22:19.630
So that's the basic story for
storing memes in cloud storage

00:22:19.630 --> 00:22:21.780
store, storing the image
data cloud storage.

00:22:21.780 --> 00:22:24.740
The next step we need to
do is store the metadata.

00:22:24.740 --> 00:22:29.060
That is, the text description
so we can do searches

00:22:29.060 --> 00:22:34.910
on it, who uploaded the
meme, and other metadata.

00:22:34.910 --> 00:22:38.791
So in order to do that, we
need to create MongoDB cluster,

00:22:38.791 --> 00:22:39.290
don't we?

00:22:39.290 --> 00:22:40.570
BRYAN LYNCH: Let's do that.

00:22:40.570 --> 00:22:42.070
BRAD ABRAMS: So
we're actually going

00:22:42.070 --> 00:22:44.850
to use Cloud Deployment
Manager which

00:22:44.850 --> 00:22:46.410
you'll hear about
a little bit later.

00:22:46.410 --> 00:22:48.550
But it's a way to
deploy software

00:22:48.550 --> 00:22:50.530
onto Compute Engine instances.

00:22:50.530 --> 00:22:54.640
And we're going to spin up
several nodes of MongoDB

00:22:54.640 --> 00:22:57.180
and configure them
for us to use.

00:22:57.180 --> 00:22:58.180
BRYAN LYNCH: Absolutely.

00:22:58.180 --> 00:22:59.888
So basically, on this
page, we have a way

00:22:59.888 --> 00:23:04.785
to deploy MongoDB
in a size cluster.

00:23:04.785 --> 00:23:06.535
So basically, we've
set up a replica name.

00:23:06.535 --> 00:23:08.050
You can just choose a zone.

00:23:08.050 --> 00:23:10.180
Choose a network
to deploy it to.

00:23:10.180 --> 00:23:11.110
Give it a prefix.

00:23:11.110 --> 00:23:12.930
And then, actually
choose the count

00:23:12.930 --> 00:23:14.750
you want to deploy of nodes.

00:23:14.750 --> 00:23:18.940
As well as set up your disk
sizes and your arbitrary.

00:23:18.940 --> 00:23:21.940
BRAD ABRAMS: And you can just
hit the deploy cluster there.

00:23:21.940 --> 00:23:23.990
That's going to take a
few minutes to deploy.

00:23:23.990 --> 00:23:27.410
So we already actually
have a MongoDB cluster

00:23:27.410 --> 00:23:29.050
that we deployed earlier.

00:23:29.050 --> 00:23:31.440
So we're going to
switch over to use that.

00:23:31.440 --> 00:23:32.960
But this is a great
way if you want

00:23:32.960 --> 00:23:35.890
to experiment with the
platform, do some performance

00:23:35.890 --> 00:23:38.240
testing on it, do some
capability testing.

00:23:38.240 --> 00:23:40.750
This is an easy way for you
to go put some open source

00:23:40.750 --> 00:23:44.370
packages up there and see
how they perform for you.

00:23:44.370 --> 00:23:47.100
And of course, all this is being
deployed on virtual machines

00:23:47.100 --> 00:23:50.550
that you own, that you
can go and SSH into,

00:23:50.550 --> 00:23:52.700
control, however you want.

00:23:52.700 --> 00:23:53.765
So they're fully yours.

00:23:53.765 --> 00:23:55.390
BRYAN LYNCH: So the
next thing we'll do

00:23:55.390 --> 00:24:00.170
is actually add in the
connector for the Mongo.

00:24:00.170 --> 00:24:03.549
So I've got a little code
that I prepped ahead of time.

00:24:03.549 --> 00:24:05.340
So we' go ahead and
cut and paste that back

00:24:05.340 --> 00:24:06.390
in our API file.

00:24:11.622 --> 00:24:13.080
And as you can see,
for the import,

00:24:13.080 --> 00:24:15.650
we're inputting our
PYMongo library.

00:24:15.650 --> 00:24:17.620
We're setting up our
Mongo connect string.

00:24:17.620 --> 00:24:19.440
If you're familiar
with Mongo, you'll

00:24:19.440 --> 00:24:23.084
recognize the user, password
IP, and then the database.

00:24:23.084 --> 00:24:24.500
BRAD ABRAMS: We've
got to remember

00:24:24.500 --> 00:24:25.960
to change that
password after this.

00:24:25.960 --> 00:24:29.540
BRYAN LYNCH: We'll definitely
change that password.

00:24:29.540 --> 00:24:32.760
And from there, we
can add in actually

00:24:32.760 --> 00:24:34.730
first add in our create.

00:24:34.730 --> 00:24:36.974
So we've got a
create function here.

00:24:36.974 --> 00:24:38.265
So we'll scroll down to create.

00:24:40.930 --> 00:24:45.500
And we'll create,
[INAUDIBLE] our create there.

00:24:45.500 --> 00:24:48.770
And then, we'll also have
a way to list our memes.

00:24:48.770 --> 00:24:51.070
Get the [INAUDIBLE]
back from Mongo.

00:24:51.070 --> 00:24:53.779
So we'll going ahead and
take that and paste that in.

00:24:53.779 --> 00:24:55.320
Replacing our stubbed
implementation.

00:24:58.220 --> 00:25:00.400
And then, we forgot
to do one more thing.

00:25:00.400 --> 00:25:01.810
I'll scroll up.

00:25:01.810 --> 00:25:04.530
We did forget to put in the
code for our cloud storage

00:25:04.530 --> 00:25:05.030
connectors.

00:25:05.030 --> 00:25:08.410
So we'll go ahead-- we'll go
ahead and add that in as well.

00:25:13.050 --> 00:25:16.642
So we'll add in our
imports for cloud storage.

00:25:16.642 --> 00:25:18.850
BRAD ABRAMS: Those are handy
comments you have there.

00:25:18.850 --> 00:25:20.300
That's very helpful.

00:25:20.300 --> 00:25:22.625
BRYAN LYNCH: And the bucket.

00:25:22.625 --> 00:25:25.250
And then, we'll go ahead and add
in the code to create the meme

00:25:25.250 --> 00:25:28.790
as well as upload
it to cloud storage.

00:25:28.790 --> 00:25:31.130
Back into our create.

00:25:31.130 --> 00:25:33.730
And replace our
stubbed implementation.

00:25:33.730 --> 00:25:36.200
And now we're ready to
create in the cloud.

00:25:36.200 --> 00:25:37.080
BRAD ABRAMS: OK.

00:25:37.080 --> 00:25:42.880
So now what we have is
code that can store images

00:25:42.880 --> 00:25:46.840
in cloud storage and store
the metadata into MongoDB.

00:25:46.840 --> 00:25:48.450
And then, when we
do the listing,

00:25:48.450 --> 00:25:51.550
it pulls the image URL
out of cloud storage

00:25:51.550 --> 00:25:53.250
and pulls the metadata
our of MongoDB

00:25:53.250 --> 00:25:55.420
and returns that back
to the client, all

00:25:55.420 --> 00:25:56.750
over REST endpoints.

00:25:56.750 --> 00:25:57.900
BRYAN LYNCH: And so to
make this happening,

00:25:57.900 --> 00:25:59.770
we've got a few libraries
we need to install as well.

00:25:59.770 --> 00:26:00.040
BRAD ABRAMS: OK.

00:26:00.040 --> 00:26:00.130
Right.

00:26:00.130 --> 00:26:01.671
BRYAN LYNCH: Just
standard libraries.

00:26:01.671 --> 00:26:04.150
So we'll drag those all in.

00:26:04.150 --> 00:26:06.260
Go back to our console.

00:26:06.260 --> 00:26:09.145
Add the stuff we just
committed to the local repo.

00:26:12.336 --> 00:26:13.364
Mongo.

00:26:13.364 --> 00:26:14.030
BRAD ABRAMS: OK.

00:26:14.030 --> 00:26:15.654
So this is going to
take just a minute.

00:26:15.654 --> 00:26:18.300
Bryan's going to commit it
to his local repository.

00:26:18.300 --> 00:26:20.150
And then, he's going
to do a git push

00:26:20.150 --> 00:26:23.172
and deploy it up to
the App Engine app.

00:26:23.172 --> 00:26:25.380
Now, what's going to happen
on the App Engine app is,

00:26:25.380 --> 00:26:28.480
we're going to sink down all
the source code that he just

00:26:28.480 --> 00:26:32.410
created, including his unit
tests onto that Compute Engine

00:26:32.410 --> 00:26:33.380
instance.

00:26:33.380 --> 00:26:37.450
And then, we're going use
Jenkins to orchestrate

00:26:37.450 --> 00:26:41.770
a workflow that has us doing
tests, running all of his unit

00:26:41.770 --> 00:26:45.310
tests across those.

00:26:45.310 --> 00:26:47.480
And then, when those
unit tests are done,

00:26:47.480 --> 00:26:49.390
go ahead and push that
out into production.

00:26:49.390 --> 00:26:51.473
Now, all that's going to
take a couple of minutes.

00:26:51.473 --> 00:26:54.960
So in the meantime, let's
look at the release history.

00:26:54.960 --> 00:26:57.865
And maybe we can look at
the diffs between releases.

00:26:57.865 --> 00:26:58.990
BRYAN LYNCH: Absolutely.

00:26:58.990 --> 00:27:01.900
BRAD ABRAMS: So one of the
things that is very cool

00:27:01.900 --> 00:27:05.590
is that we actually roll
up all the release diffs

00:27:05.590 --> 00:27:07.150
into a single view.

00:27:07.150 --> 00:27:09.290
So imagine, you have
a production issue,

00:27:09.290 --> 00:27:10.710
and you're debugging it.

00:27:10.710 --> 00:27:14.240
You want to know what code
changes went in this last time.

00:27:14.240 --> 00:27:17.110
So if we do that, we
see this diffu here.

00:27:17.110 --> 00:27:19.470
Notice there's two different
changes that went in.

00:27:19.470 --> 00:27:20.780
Both done by Bryan.

00:27:20.780 --> 00:27:22.775
But in a big project,
you might have

00:27:22.775 --> 00:27:24.360
them done by several people.

00:27:24.360 --> 00:27:26.040
And then, we can
get a sense for what

00:27:26.040 --> 00:27:28.480
changed at this
particular release.

00:27:28.480 --> 00:27:29.950
So just click on one of them.

00:27:29.950 --> 00:27:31.820
And let's see.

00:27:31.820 --> 00:27:33.160
Pick out a more interesting one.

00:27:33.160 --> 00:27:33.952
BRYAN LYNCH: OK.

00:27:33.952 --> 00:27:35.035
BRAD ABRAMS: Not that one.

00:27:35.035 --> 00:27:36.580
Any one but that one.

00:27:36.580 --> 00:27:37.080
OK.

00:27:37.080 --> 00:27:38.240
Well.

00:27:38.240 --> 00:27:39.766
All of them are
starting from blank.

00:27:39.766 --> 00:27:40.890
Is that basically the deal?

00:27:40.890 --> 00:27:41.600
OK.

00:27:41.600 --> 00:27:42.100
Yep.

00:27:42.100 --> 00:27:46.542
So anyway it would show you
exactly what the changes are.

00:27:46.542 --> 00:27:48.750
So should we go over and
see what our [INAUDIBLE] is?

00:27:48.750 --> 00:27:48.830
BRYAN LYNCH: Oh, Brad.

00:27:48.830 --> 00:27:50.600
I just realized we did
forget one more thing.

00:27:50.600 --> 00:27:50.967
BRAD ABRAMS: Oh, my goodness.

00:27:50.967 --> 00:27:51.580
One more thing.

00:27:51.580 --> 00:27:53.038
BRYAN LYNCH: We're
in our app demo,

00:27:53.038 --> 00:27:55.690
so make sure that we update
this to the latest version.

00:27:55.690 --> 00:27:57.886
So I'm going to make a change.

00:27:57.886 --> 00:27:59.192
BRAD ABRAMS: Ah, yes.

00:27:59.192 --> 00:27:59.900
The demo version.

00:27:59.900 --> 00:28:01.140
BRYAN LYNCH: And make sure we
update to the real version.

00:28:01.140 --> 00:28:01.900
Yeah.

00:28:01.900 --> 00:28:03.070
Called demo one for now.

00:28:06.209 --> 00:28:06.875
BRAD ABRAMS: OK.

00:28:06.875 --> 00:28:07.375
Yep.

00:28:07.375 --> 00:28:09.040
So you're seeing
in the real thing.

00:28:09.040 --> 00:28:11.500
So now, we get to
go deploy it again.

00:28:11.500 --> 00:28:14.980
And now, what will
happen now is if it's not

00:28:14.980 --> 00:28:18.630
done with the build and test
when a new one comes in,

00:28:18.630 --> 00:28:21.650
it actually scraps that one and
start over with the new one.

00:28:21.650 --> 00:28:23.790
So it doesn't wait for
the first one to finish.

00:28:23.790 --> 00:28:26.520
Because we notice this
kind of thing happens,

00:28:26.520 --> 00:28:29.060
right last minute you
figure you missed something.

00:28:29.060 --> 00:28:31.660
So there's no point in finishing
the build on the other one

00:28:31.660 --> 00:28:33.424
if there's a new
one right behind.

00:28:33.424 --> 00:28:35.840
BRYAN LYNCH: And so you can
see, we've come to our source.

00:28:35.840 --> 00:28:37.820
We see that our
source repository's

00:28:37.820 --> 00:28:40.730
already been updated.

00:28:40.730 --> 00:28:43.612
And then, right now it's
pushing it out, putting into--

00:28:43.612 --> 00:28:44.320
BRAD ABRAMS: Yep.

00:28:44.320 --> 00:28:46.960
BRYAN LYNCH: Pushing it into the
Jenkins, doing the unit tests.

00:28:46.960 --> 00:28:48.795
BRAD ABRAMS: So you want
to see if we're-- if it's--

00:28:48.795 --> 00:28:51.045
BRYAN LYNCH: Let's see if
it has reached the test now.

00:28:53.264 --> 00:28:54.680
BRAD ABRAMS: So
the way this works

00:28:54.680 --> 00:28:58.530
is this line is actually written
as soon as the unit tests start

00:28:58.530 --> 00:28:59.070
to run.

00:28:59.070 --> 00:29:02.310
In the case of Python or
in the case of a Java,

00:29:02.310 --> 00:29:04.820
as soon as the build starts.

00:29:04.820 --> 00:29:05.960
So is it there?

00:29:05.960 --> 00:29:06.390
BRYAN LYNCH: It's there.

00:29:06.390 --> 00:29:06.670
BRAD ABRAMS: OK.

00:29:06.670 --> 00:29:07.280
Great.

00:29:07.280 --> 00:29:07.780
Fantastic.

00:29:07.780 --> 00:29:09.140
Oh, and it already deployed.

00:29:09.140 --> 00:29:09.800
BRYAN LYNCH: It did deploy.

00:29:09.800 --> 00:29:10.400
BRAD ABRAMS: Awesome.

00:29:10.400 --> 00:29:11.650
So we're ready to test it out.

00:29:11.650 --> 00:29:14.290
So you want to test it
out in API Explorer?

00:29:14.290 --> 00:29:16.690
BRYAN LYNCH: Absolutely.

00:29:16.690 --> 00:29:17.190
All right.

00:29:17.190 --> 00:29:18.939
So we can come back
into our API Explorer.

00:29:18.939 --> 00:29:20.190
Just refresh.

00:29:20.190 --> 00:29:23.030
We see our methods
we had before.

00:29:23.030 --> 00:29:24.340
They're no longer stubbed out.

00:29:24.340 --> 00:29:26.130
So we'll go ahead
and do our list.

00:29:26.130 --> 00:29:28.810
BRAD ABRAMS: And so
this list at this point

00:29:28.810 --> 00:29:31.410
is-- we have a great
server error there.

00:29:31.410 --> 00:29:32.410
BRYAN LYNCH: Well, look.

00:29:32.410 --> 00:29:35.560
I'll make sure we're on
the right version, man.

00:29:35.560 --> 00:29:36.250
BRAD ABRAMS: OK.

00:29:36.250 --> 00:29:38.810
So what Bryan's
going to do now-- so

00:29:38.810 --> 00:29:40.480
App Engine actually
supports having

00:29:40.480 --> 00:29:42.380
multiple versions
of your application

00:29:42.380 --> 00:29:44.950
running in production
at the same time.

00:29:44.950 --> 00:29:48.050
And that's useful for doing
things like A/B testing.

00:29:48.050 --> 00:29:50.440
It's useful when you're
staging out a release.

00:29:50.440 --> 00:29:55.610
Maybe you want to have it only
accessible to a few people.

00:29:55.610 --> 00:29:58.540
And then, roll it out
to be the main version.

00:29:58.540 --> 00:30:01.680
BRYAN LYNCH: So we'll go
ahead and do a list on that.

00:30:01.680 --> 00:30:03.390
BRAD ABRAMS: And
now, we got them.

00:30:03.390 --> 00:30:06.580
And look, those are-- so that's
pulling this metadata directly

00:30:06.580 --> 00:30:07.365
out of MongoDB.

00:30:07.365 --> 00:30:11.240
So the MongoDB instance
running on GCE,

00:30:11.240 --> 00:30:13.730
pulling that data
through to App Engine.

00:30:13.730 --> 00:30:16.280
And then, it sends
it out, serializes it

00:30:16.280 --> 00:30:17.540
to this JSON interface.

00:30:17.540 --> 00:30:19.290
BRYAN LYNCH: And we'll
go ahead and list--

00:30:19.290 --> 00:30:21.426
we have a set of templates
that we can build from.

00:30:21.426 --> 00:30:22.800
So we'll go ahead
and list those.

00:30:22.800 --> 00:30:25.133
BRAD ABRAMS: And you can,
maybe, grab one of those URLs.

00:30:25.133 --> 00:30:26.967
BRYAN LYNCH: I'll grab
that top rural there.

00:30:26.967 --> 00:30:28.674
BRAD ABRAMS: And then,
my favorite thing.

00:30:28.674 --> 00:30:31.000
You can go in and
actually post a new meme.

00:30:31.000 --> 00:30:33.370
And this time when
he posts a meme,

00:30:33.370 --> 00:30:35.850
it will actually
create that meme,

00:30:35.850 --> 00:30:37.910
store the meme in cloud
storage, and store

00:30:37.910 --> 00:30:39.634
the metadata in MongoDB.

00:30:39.634 --> 00:30:41.175
BRYAN LYNCH: And we
want make sure we

00:30:41.175 --> 00:30:41.716
auth before we send that off.

00:30:41.716 --> 00:30:43.010
BRAD ABRAMS: Ah, yes.

00:30:46.119 --> 00:30:48.160
BRYAN LYNCH: And we'll go
ahead and execute that.

00:30:48.160 --> 00:30:48.868
BRAD ABRAMS: Yes.

00:30:48.868 --> 00:30:50.190
Fantastic.

00:30:50.190 --> 00:30:50.690
OK.

00:30:50.690 --> 00:30:53.850
So it looks like it worked.

00:30:53.850 --> 00:30:54.820
Did it create the meme?

00:30:54.820 --> 00:30:55.040
BRYAN LYNCH: It did
create the meme.

00:30:55.040 --> 00:30:57.270
BRAD ABRAMS: So
"What Urs Says Goes."

00:30:57.270 --> 00:30:57.890
OK.

00:30:57.890 --> 00:30:59.326
So now what we
want to do, can we

00:30:59.326 --> 00:31:00.700
switch over to
the mobile device?

00:31:03.500 --> 00:31:06.750
And you see, I just
refreshed this right now

00:31:06.750 --> 00:31:07.720
as they were coming.

00:31:07.720 --> 00:31:10.070
And the very first meme
is the one he created.

00:31:10.070 --> 00:31:11.220
"What Urs Says Goes."

00:31:11.220 --> 00:31:12.660
So pretty cool, huh?

00:31:15.720 --> 00:31:18.590
And of course, I can
do the same thing.

00:31:18.590 --> 00:31:22.400
I can say-- oh, whoops.

00:31:22.400 --> 00:31:26.760
"Yes boss--" whoops.

00:31:26.760 --> 00:31:28.370
And I can go ahead
and post that.

00:31:28.370 --> 00:31:31.210
And now, I'm posting it
from the Android device.

00:31:31.210 --> 00:31:33.370
It's going up through
the App Engine endpoint,

00:31:33.370 --> 00:31:36.305
storing the image in cloud
storage, the metadata

00:31:36.305 --> 00:31:39.470
in MongoDB, and then returning
all the results back down

00:31:39.470 --> 00:31:40.690
to the device.

00:31:40.690 --> 00:31:42.130
So that's pretty neat.

00:31:42.130 --> 00:31:43.020
OK.

00:31:43.020 --> 00:31:44.872
So are we ready to
switch back to slides?

00:31:44.872 --> 00:31:45.580
BRYAN LYNCH: Yes.

00:31:45.580 --> 00:31:46.246
BRAD ABRAMS: OK.

00:31:46.246 --> 00:31:48.440
So let's go back to slides.

00:31:48.440 --> 00:31:48.940
Yes.

00:31:48.940 --> 00:31:51.660
So did we do this one?

00:31:51.660 --> 00:31:52.160
Yes.

00:31:52.160 --> 00:31:53.150
No, we didn't do this one.

00:31:53.150 --> 00:31:53.650
OK.

00:31:53.650 --> 00:31:56.520
So what we just showed you
was the cloud storage MongoDB

00:31:56.520 --> 00:31:57.770
thing.

00:31:57.770 --> 00:32:03.590
I mentioned MongoDB uses
Google Deployment Manager.

00:32:03.590 --> 00:32:06.610
And you saw some of the replica
pooled stuff Bryan just touched

00:32:06.610 --> 00:32:07.590
on a little bit.

00:32:07.590 --> 00:32:09.780
There's a whole session
on that at one o'clock

00:32:09.780 --> 00:32:12.210
upstairs that you can go
and drill in and learn more

00:32:12.210 --> 00:32:12.900
about that.

00:32:12.900 --> 00:32:15.740
And I know some of these
sessions conflict in time.

00:32:15.740 --> 00:32:19.000
All this is being preserved
on the internets forever.

00:32:19.000 --> 00:32:22.220
So you can go watch these
at your leisure later.

00:32:22.220 --> 00:32:22.720
OK.

00:32:22.720 --> 00:32:24.220
So that's step three.

00:32:24.220 --> 00:32:26.440
But I'm not really
satisfied yet, Bryan.

00:32:26.440 --> 00:32:28.127
We got a working application.

00:32:28.127 --> 00:32:29.960
But we haven't really
proven to these people

00:32:29.960 --> 00:32:31.270
that it can scale, yet.

00:32:31.270 --> 00:32:33.610
So I think we should show that.

00:32:33.610 --> 00:32:36.710
So we're going to show some
very simple load testing.

00:32:36.710 --> 00:32:39.050
And then, we're going
to use that load testing

00:32:39.050 --> 00:32:42.070
to isolate an issue
in production.

00:32:42.070 --> 00:32:44.500
And then, show you how we can
fix that issue in production

00:32:44.500 --> 00:32:45.920
very quickly

00:32:45.920 --> 00:32:46.520
OK.

00:32:46.520 --> 00:32:48.650
You want to take it away
back to demo machine?

00:32:48.650 --> 00:32:49.310
We do?

00:32:49.310 --> 00:32:51.081
BRYAN LYNCH: Yeah.

00:32:51.081 --> 00:32:51.580
All right.

00:32:51.580 --> 00:32:53.621
So we're going to basically
kick off a load test.

00:32:53.621 --> 00:32:57.965
And we'll just use ApacheBench
as we used in the keynote.

00:32:57.965 --> 00:33:00.590
But for this one, we're going to
throw a little bit more at it.

00:33:00.590 --> 00:33:03.200
So I'm going to say,
throw a billion rows.

00:33:03.200 --> 00:33:04.408
BRAD ABRAMS: How do you know?

00:33:04.408 --> 00:33:05.810
A billion, that's pretty good.

00:33:05.810 --> 00:33:09.870
BRYAN LYNCH: Ah, maybe we'll go,
I don't know, 200 concurrent.

00:33:09.870 --> 00:33:11.870
And then, we'll give
a URL we can hit.

00:33:11.870 --> 00:33:15.240
BRAD ABRAMS: So Bryan defined
a special endpoint for create

00:33:15.240 --> 00:33:19.170
that just tests out storing
a particular image to cloud

00:33:19.170 --> 00:33:22.880
storage and storing some
metadata to MongoDB.

00:33:22.880 --> 00:33:28.480
And so hitting this a million
times, 200 simultaneous,

00:33:28.480 --> 00:33:32.040
is going to give us a pretty
decent QPS, queries per second,

00:33:32.040 --> 00:33:34.170
or requests per second.

00:33:34.170 --> 00:33:35.980
At Google everything is queries.

00:33:35.980 --> 00:33:39.080
So we call them
queries per second.

00:33:39.080 --> 00:33:40.290
So we're hitting that.

00:33:40.290 --> 00:33:43.420
And now we're going back to
the developer console here.

00:33:43.420 --> 00:33:45.050
And you can see,
some of the graphs

00:33:45.050 --> 00:33:49.620
are starting to notice
the increased load there.

00:33:49.620 --> 00:33:52.910
And I notice, Bryan,
these errors by code.

00:33:52.910 --> 00:33:54.960
Just scroll down a little bit.

00:33:54.960 --> 00:33:57.540
We're starting to see-- or
at least last time you did

00:33:57.540 --> 00:33:58.360
the demo, I saw--

00:33:58.360 --> 00:33:59.290
BRYAN LYNCH: We do have
a few spikes coming up.

00:33:59.290 --> 00:33:59.780
Yeah.

00:33:59.780 --> 00:34:00.480
BRAD ABRAMS:--a few spikes.

00:34:00.480 --> 00:34:02.180
There's a little
latency in the graph.

00:34:02.180 --> 00:34:04.730
So we'll see a spike
in 500s in a minute.

00:34:04.730 --> 00:34:08.645
So why don't we switch over
to the data-- the logs viewer,

00:34:08.645 --> 00:34:11.850
and see if we can find out why
we're seeing those log errors.

00:34:14.620 --> 00:34:19.989
So again, here what we're
seeing is all those requests

00:34:19.989 --> 00:34:20.980
are coming in.

00:34:20.980 --> 00:34:24.210
And each request from
whatever frontend-- I think we

00:34:24.210 --> 00:34:26.889
said we have five or 10
frontends running right now.

00:34:26.889 --> 00:34:29.190
There's about five
frontends running right now.

00:34:29.190 --> 00:34:31.500
And we're aggregating logs
from all those frontends

00:34:31.500 --> 00:34:32.550
and putting them here.

00:34:32.550 --> 00:34:35.670
Every create is
creating a log entry.

00:34:35.670 --> 00:34:40.159
And you notice, some of
them are actually 500s.

00:34:40.159 --> 00:34:45.739
So you're going to filter down
to find out just those 500s.

00:34:45.739 --> 00:34:47.679
So those are troubling.

00:34:47.679 --> 00:34:49.860
That means we actually have
an issue in production.

00:34:49.860 --> 00:34:52.489
And it seems to be happening
for only some requests.

00:34:52.489 --> 00:34:55.460
So we need to debug this and
figure out what's happening.

00:34:55.460 --> 00:34:57.180
BRYAN LYNCH: Well, it looks
like there's an exception, Brad.

00:34:57.180 --> 00:34:58.540
BRAD ABRAMS: There's
an exception.

00:34:58.540 --> 00:34:59.998
BRYAN LYNCH: Let's
track that down.

00:34:59.998 --> 00:35:02.160
And we're going to click
down and in the file.

00:35:02.160 --> 00:35:02.350
BRAD ABRAMS: Yeah.

00:35:02.350 --> 00:35:04.266
So in the keynote, we
showed you that in Java.

00:35:04.266 --> 00:35:06.480
And here, we're showing
you it in Python.

00:35:06.480 --> 00:35:08.530
So the same basic
infrastructure works no matter

00:35:08.530 --> 00:35:10.049
what language you use.

00:35:10.049 --> 00:35:12.590
BRYAN LYNCH: And as you can see,
I dropped this into the file

00:35:12.590 --> 00:35:14.756
and highlighted the line
that's causing the problem.

00:35:14.756 --> 00:35:15.840
BRAD ABRAMS: Yes.

00:35:15.840 --> 00:35:19.110
I think that a random 5 is
probably the source your--

00:35:19.110 --> 00:35:19.880
BRYAN LYNCH: It looks a
little bit manufactured.

00:35:19.880 --> 00:35:20.360
I agree.

00:35:20.360 --> 00:35:22.360
BRAD ABRAMS: Its looks a
little bit of an issue.

00:35:22.360 --> 00:35:25.380
So again, at this point, because
it's in a git repository,

00:35:25.380 --> 00:35:28.900
we could go back to the local
machine and fix this issue.

00:35:28.900 --> 00:35:32.090
But because it seems like a
pretty obvious fix, I think,

00:35:32.090 --> 00:35:34.950
Bryan's just going click
on Edit here and go ahead

00:35:34.950 --> 00:35:39.740
and remove this
erroneous change.

00:35:39.740 --> 00:35:43.450
And then, he's going to commit
that back to his production git

00:35:43.450 --> 00:35:45.260
repository.

00:35:45.260 --> 00:35:47.870
And so you should probably
have this down by now.

00:35:47.870 --> 00:35:51.040
What's going to happen
when he clicks commit.

00:35:51.040 --> 00:35:51.540
Right?

00:35:51.540 --> 00:35:53.510
So it's going to
put that change in

00:35:53.510 --> 00:35:55.590
the Google-hosted repository.

00:35:55.590 --> 00:35:59.700
And then, it's going to sink
down the code into the Compute

00:35:59.700 --> 00:36:03.610
Engine virtual machine that's
running Jenkins on there.

00:36:03.610 --> 00:36:05.800
And then, that Jenkins
workflow is going to kick in.

00:36:05.800 --> 00:36:08.840
And it's going to run all
our unit tests across there.

00:36:08.840 --> 00:36:11.610
And given that those
pass, hopefully, we'll

00:36:11.610 --> 00:36:14.370
deploy that out into production.

00:36:14.370 --> 00:36:19.240
So that might take
just a minute for it

00:36:19.240 --> 00:36:21.190
to deploy out to production.

00:36:21.190 --> 00:36:21.801
OK.

00:36:21.801 --> 00:36:22.300
So yes.

00:36:22.300 --> 00:36:27.370
So what we're showing you here
is that it's already deployed.

00:36:27.370 --> 00:36:28.920
It has already
run all our tests.

00:36:28.920 --> 00:36:31.710
And it just finished
deploying to production.

00:36:31.710 --> 00:36:35.050
So now, if we go back
to the logs viewer,

00:36:35.050 --> 00:36:39.310
we should see a
beautiful lack of 500s.

00:36:39.310 --> 00:36:42.380
If we're successful here, as
he scrolls down-- remember,

00:36:42.380 --> 00:36:45.416
we're still hitting this site
with a billion requests, right?

00:36:45.416 --> 00:36:47.540
So it's going to take a
while to get through those.

00:36:47.540 --> 00:36:49.440
And now, we don't see any 500s.

00:36:49.440 --> 00:36:50.907
So I think our logs are clean.

00:36:50.907 --> 00:36:51.990
That's pretty good, Bryan.

00:36:51.990 --> 00:36:52.255
BRYAN LYNCH: It looks good.

00:36:52.255 --> 00:36:52.310
Yeah.

00:36:52.310 --> 00:36:52.490
BRAD ABRAMS: Thanks, man.

00:36:52.490 --> 00:36:52.990
That's good.

00:36:52.990 --> 00:36:53.900
That's good.

00:36:53.900 --> 00:36:54.890
All right.

00:36:54.890 --> 00:36:55.390
Cool.

00:36:55.390 --> 00:36:55.890
OK.

00:36:55.890 --> 00:36:56.860
So back to the slides.

00:36:56.860 --> 00:36:59.920
And then, let's wrap us up here.

00:36:59.920 --> 00:37:02.050
So what we showed
you in this part

00:37:02.050 --> 00:37:05.460
is some basic load
testing with ApacheBench.

00:37:05.460 --> 00:37:07.830
We showed you how to do
some debugging in production

00:37:07.830 --> 00:37:09.697
and how to fix that
production issue.

00:37:09.697 --> 00:37:11.780
So if you want to hear
more about how some of this

00:37:11.780 --> 00:37:15.330
works under the covers, what's
really going on, at 2 o'clock

00:37:15.330 --> 00:37:17.750
there'll be a Seeing Inside
Your Service session.

00:37:17.750 --> 00:37:20.250
That's a good one
for you check out.

00:37:20.250 --> 00:37:20.950
OK.

00:37:20.950 --> 00:37:22.040
So, wow.

00:37:22.040 --> 00:37:23.340
We did a bunch here, Bryan.

00:37:23.340 --> 00:37:25.020
We started absolutely
from scratch.

00:37:25.020 --> 00:37:28.180
We built a real world
Android application.

00:37:28.180 --> 00:37:31.160
It had MongoDB and Google
Cloud Storage in it.

00:37:31.160 --> 00:37:33.660
And then, we showed the
whole DevOps workflow here.

00:37:33.660 --> 00:37:35.294
So that's pretty
good for 50 minutes.

00:37:35.294 --> 00:37:35.960
Don't you think?

00:37:35.960 --> 00:37:36.296
BRYAN LYNCH: Not bad.

00:37:36.296 --> 00:37:36.970
No.

00:37:36.970 --> 00:37:37.930
BRAD ABRAMS: I
have a hunch there

00:37:37.930 --> 00:37:39.680
might be a few people
that want the source

00:37:39.680 --> 00:37:41.670
code for what you just did.

00:37:41.670 --> 00:37:47.050
And Bryan will post that shortly
up on his GitHub repositories.

00:37:47.050 --> 00:37:48.930
So you can go and
check that out.

00:37:48.930 --> 00:37:51.660
And then, a lot of
what we've shown

00:37:51.660 --> 00:37:54.180
is already available to
you in the Cloud Console.

00:37:54.180 --> 00:37:56.880
But there's a few things
that were not quite ready.

00:37:56.880 --> 00:37:59.820
So if you want to get
Trusted Tester access,

00:37:59.820 --> 00:38:01.930
there's a form you
can fill out there.

00:38:01.930 --> 00:38:04.280
All of it will be ready
in the next few weeks.

00:38:04.280 --> 00:38:05.910
But if you just
can't wait and you

00:38:05.910 --> 00:38:09.800
need the linking logs to source
or some of the other features,

00:38:09.800 --> 00:38:12.600
you can fill out this form
and get access to that.

00:38:12.600 --> 00:38:13.692
So thank you very much.

00:38:13.692 --> 00:38:14.650
BRYAN LYNCH: Thank you.

00:38:20.399 --> 00:38:22.940
BRAD ABRAMS: And now, we have
a couple minutes for questions,

00:38:22.940 --> 00:38:23.440
I think.

00:38:23.440 --> 00:38:25.490
So any questions for us?

00:38:28.290 --> 00:38:29.130
Anyone?

00:38:29.130 --> 00:38:29.750
Yes.

00:38:29.750 --> 00:38:31.432
Right here.

00:38:31.432 --> 00:38:32.890
AUDIENCE: The
testing that you just

00:38:32.890 --> 00:38:35.242
showed, do you support A/B
testing and staged roll-outs?

00:38:35.242 --> 00:38:35.950
BRAD ABRAMS: Yes.

00:38:35.950 --> 00:38:40.080
So the question was about A/B
testing and staged roll-outs.

00:38:40.080 --> 00:38:43.220
So we don't have any built in
support for that right now.

00:38:43.220 --> 00:38:45.790
But it's absolutely something
that's on our road map

00:38:45.790 --> 00:38:47.560
to go do.

00:38:47.560 --> 00:38:48.060
Yes?

00:38:48.060 --> 00:38:50.161
AUDIENCE: How does the
Cloud Endpoints on Android

00:38:50.161 --> 00:38:52.410
compare in performance against
just using [INAUDIBLE]?

00:38:54.650 --> 00:38:55.400
BRAD ABRAMS: Yeah.

00:38:55.400 --> 00:38:57.200
So the question
was in performance

00:38:57.200 --> 00:38:59.830
between Cloud
Endpoints on Android

00:38:59.830 --> 00:39:01.880
and just an HTTP library.

00:39:01.880 --> 00:39:04.990
I think you'll find they're are
very similar because you saw

00:39:04.990 --> 00:39:07.280
the REST requests
that we were showing.

00:39:07.280 --> 00:39:08.830
You can hit those with cURL.

00:39:08.830 --> 00:39:10.630
There's very little
extra metadata

00:39:10.630 --> 00:39:14.160
that we're sending down
for Cloud Endpoints.

00:39:14.160 --> 00:39:17.120
So I suggest you go
do some perf testing.

00:39:17.120 --> 00:39:20.111
But it should be pretty close.

00:39:20.111 --> 00:39:20.610
OK.

00:39:20.610 --> 00:39:21.596
Oh, and there's a mic.

00:39:21.596 --> 00:39:22.095
Fantastic.

00:39:22.095 --> 00:39:25.396
AUDIENCE: So let me-- Hello?

00:39:25.396 --> 00:39:25.896
Hello?

00:39:29.320 --> 00:39:30.609
BRAD ABRAMS: I can repeat.

00:39:30.609 --> 00:39:31.150
I can repeat.

00:39:31.150 --> 00:39:31.680
Go ahead.

00:39:31.680 --> 00:39:33.740
AUDIENCE: [INAUDIBLE]

00:39:33.740 --> 00:39:34.709
BRAD ABRAMS: Yeah.

00:39:34.709 --> 00:39:35.584
AUDIENCE: [INAUDIBLE]

00:39:39.870 --> 00:39:41.115
BRAD ABRAMS: Yes.

00:39:41.115 --> 00:39:42.310
BRYAN LYNCH: So it's
something we're looking at.

00:39:42.310 --> 00:39:43.750
Today, we're looking
at purely a launch.

00:39:43.750 --> 00:39:45.510
Once you get it launched,
you can manage it yourself.

00:39:45.510 --> 00:39:47.301
But ongoing, we'll look
at additional tools

00:39:47.301 --> 00:39:47.927
we can provide.

00:39:47.927 --> 00:39:48.676
BRAD ABRAMS: Yeah.

00:39:48.676 --> 00:39:50.660
But Bryan, when we
were building his demo,

00:39:50.660 --> 00:39:53.437
very regularly went
to the Mong-- in fact,

00:39:53.437 --> 00:39:54.270
can you bring it up?

00:39:54.270 --> 00:39:55.740
Can you up the
Mongo admin console?

00:39:55.740 --> 00:39:56.150
BRYAN LYNCH: Absolutely.

00:39:56.150 --> 00:39:57.650
BRAD ABRAMS: So
it's just installing

00:39:57.650 --> 00:40:00.490
Mongo on a GCE image.

00:40:00.490 --> 00:40:03.840
So all the existing
MongoDB admin tools work.

00:40:03.840 --> 00:40:05.420
So we haven't done
anything special.

00:40:05.420 --> 00:40:09.250
What Bryan's mentioning, we have
integrated the MongoDB admin UI

00:40:09.250 --> 00:40:11.250
into our developer console.

00:40:11.250 --> 00:40:13.490
But you can just
hit the right URLs.

00:40:13.490 --> 00:40:13.990
Right?

00:40:13.990 --> 00:40:15.005
BRYAN LYNCH: Uh, no.

00:40:15.005 --> 00:40:15.880
BRAD ABRAMS: Not yet.

00:40:15.880 --> 00:40:16.294
BRYAN LYNCH: Well, not yet.

00:40:16.294 --> 00:40:16.510
Not yet.

00:40:16.510 --> 00:40:16.770
BRAD ABRAMS: Soon.

00:40:16.770 --> 00:40:17.030
Soon.

00:40:17.030 --> 00:40:18.390
BRYAN LYNCH: Something
we're working on.

00:40:18.390 --> 00:40:19.140
BRAD ABRAMS: Soon.

00:40:19.140 --> 00:40:20.590
OK.

00:40:20.590 --> 00:40:21.260
Coming soon.

00:40:21.260 --> 00:40:21.760
OK.

00:40:21.760 --> 00:40:22.259
Yes?

00:40:22.259 --> 00:40:25.159
AUDIENCE: Any planned
languages coming up?

00:40:25.159 --> 00:40:26.450
BRAD ABRAMS: Planned languages?

00:40:26.450 --> 00:40:27.542
So there is a session.

00:40:27.542 --> 00:40:29.000
AUDIENCE: Like Ruby
or [INAUDIBLE]?

00:40:29.000 --> 00:40:31.000
BRAD ABRAMS: There is a
session called something

00:40:31.000 --> 00:40:35.980
like new languages in App Engine
that I encourage you to go to.

00:40:35.980 --> 00:40:36.480
OK.

00:40:36.480 --> 00:40:38.490
So I think we're just
about out of time.

00:40:38.490 --> 00:40:41.450
This is the only thing
separating you from lunch.

00:40:41.450 --> 00:40:44.070
So Bryan and I will be up
here for a few more minutes.

00:40:44.070 --> 00:40:46.890
So feel free to come grab us
if you have more questions.

00:40:46.890 --> 00:40:47.440
Thank you.

00:40:47.440 --> 00:40:48.990
BRYAN LYNCH: Thank you.

