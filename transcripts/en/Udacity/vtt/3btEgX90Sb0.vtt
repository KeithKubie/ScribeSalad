WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:03.996
Once vertex and fragment shaders became available, all this changed. You can

00:00:03.996 --> 00:00:07.065
now program whatever functions you wanted. When you select a material and

00:00:07.065 --> 00:00:10.250
lighting, what the 3JS library does under the hood is create efficient vertex

00:00:10.250 --> 00:00:14.723
and fragment shader programs for you. However, you can create and modify your

00:00:14.723 --> 00:00:19.138
own materials by using 3JS's shading material. Vertex and fragment shaders have

00:00:19.138 --> 00:00:22.993
similar structures. You first define the inputs to the shader. There are 2

00:00:22.993 --> 00:00:27.082
kinds of declaration in 3JS, uniform and varying. In web GL itself, there are

00:00:27.082 --> 00:00:30.244
also attributes to a vertex shader, which are the values such as the vertex

00:00:30.244 --> 00:00:35.347
position normal and UV coordiinate data. These attributes are built in 3JS, so

00:00:35.347 --> 00:00:39.548
do not have to be declared. In fact, they have those exact names, position,

00:00:39.548 --> 00:00:44.300
normal, UV. Uniform data is whatever is constant for the triangle being shaded.

00:00:44.300 --> 00:00:47.420
For example, values such as the position of the light sources and the color and

00:00:47.420 --> 00:00:51.500
shininess of the material are uniforms. A value is labeled as varying if it is

00:00:51.500 --> 00:00:54.524
computed or set by the vertex shader as an output, and passed to the fragment

00:00:54.524 --> 00:00:59.174
shader as an input. The vertex shader outputs these values and then the

00:00:59.174 --> 00:01:03.216
rasterizer interpolates these across the triangle's surface. In other words,

00:01:03.216 --> 00:01:06.746
these values can and will vary per fragment. You're in total control of what

00:01:06.746 --> 00:01:10.044
gets interpolated. The more data per vertex that you want interpolated, the

00:01:10.044 --> 00:01:13.876
more time and resources it takes. Nothing comes for free. The fragment shader

00:01:13.876 --> 00:01:17.819
also takes uniform data as inputs. The fragment shader then, as a minimum,

00:01:17.819 --> 00:01:22.005
outputs a fragment color with the name GL frag color. I say as a minimum,

00:01:22.005 --> 00:01:25.291
because in fact, in many graphics APIs, the fragment shader can output to a

00:01:25.291 --> 00:01:31.000
number of images at one time. This is called MRT, for multiple render targets.

00:01:31.000 --> 00:01:35.102
Targets is another name for output images. Unfortunately, WebGL does not

00:01:35.102 --> 00:01:39.507
support this, yet. To summarize, here's 3JS's view of the world. A vertex

00:01:39.507 --> 00:01:43.952
shader has inputs that are uniforms and attributes. And always outputs a GL

00:01:43.952 --> 00:01:48.004
position, and can output varying values. The fragment shader takes these

00:01:48.004 --> 00:01:51.332
varying values along with whatever uniforms it wants, and outputs a GL.Frag

00:01:51.332 --> 00:01:52.609
Color.

