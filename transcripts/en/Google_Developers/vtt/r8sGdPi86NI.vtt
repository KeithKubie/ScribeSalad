WEBVTT
Kind: captions
Language: en

00:00:01.320 --> 00:00:03.660
And so for this topic, I really
want to talk about the

00:00:03.660 --> 00:00:06.840
different APIs and
authentication options you

00:00:06.840 --> 00:00:10.145
have within your applications
as well as authorization.

00:00:13.850 --> 00:00:17.300
For the first part, I have
a username and password.

00:00:17.300 --> 00:00:19.760
How do I authorize
that person?

00:00:19.760 --> 00:00:23.480
Secondly, how do we protect two
different groups of people

00:00:23.480 --> 00:00:25.040
in your application?

00:00:25.040 --> 00:00:28.170
As part of that, though, I also
want to talk on how you

00:00:28.170 --> 00:00:31.110
would access other APIs
and use important

00:00:31.110 --> 00:00:33.620
protocols such as OAuth.

00:00:33.620 --> 00:00:36.420
And finally, how you would offer
your application as an

00:00:36.420 --> 00:00:39.370
OAuth provider and actually let
Google take care of that

00:00:39.370 --> 00:00:41.940
OAuth handshake for you.

00:00:41.940 --> 00:00:44.970
The first step, authentication
options.

00:00:44.970 --> 00:00:47.310
There's really two different
options you have.

00:00:47.310 --> 00:00:50.210
We have built-in support
leveraging Google Apps

00:00:50.210 --> 00:00:53.700
accounts, or even the OpenID
through Federation.

00:00:53.700 --> 00:00:57.460
What you do is say, I want my
application to be restricted

00:00:57.460 --> 00:01:00.040
to anybody that has
a Google account.

00:01:00.040 --> 00:01:01.930
And that could be Gmail,
or it could be any

00:01:01.930 --> 00:01:04.410
Google Enterprise customer.

00:01:04.410 --> 00:01:06.550
You can also restrict
your application to

00:01:06.550 --> 00:01:08.510
one Google App domain.

00:01:08.510 --> 00:01:11.720
Although that's supported, I'd
recommend against doing that.

00:01:11.720 --> 00:01:15.320
It's much better to handle
that in your code.

00:01:15.320 --> 00:01:17.740
Then, of course, if you don't
want to use one of these

00:01:17.740 --> 00:01:20.770
built-in operations, you
have custom code.

00:01:20.770 --> 00:01:23.310
You can do whatever you
want inside your app

00:01:23.310 --> 00:01:25.880
to authorize people.

00:01:25.880 --> 00:01:28.520
For the built-in authentication,
this is all

00:01:28.520 --> 00:01:31.190
configured when you first
create your application.

00:01:31.190 --> 00:01:34.830
By default, it will list as open
to all Google accounts.

00:01:34.830 --> 00:01:37.470
You can also restrict to
a single domain name.

00:01:37.470 --> 00:01:40.670
But if you do that, it's
restricted to a single domain.

00:01:40.670 --> 00:01:43.660
And most enterprises have
more than one domain.

00:01:43.660 --> 00:01:47.660
I know of some that have at
least 60 different domains.

00:01:47.660 --> 00:01:50.140
You have
contractors@mycompany.com or

00:01:50.140 --> 00:01:52.300
externals@mycompany.com.

00:01:52.300 --> 00:01:53.790
And if you do that,
you could only

00:01:53.790 --> 00:01:56.880
restrict this to one domain.

00:01:56.880 --> 00:01:58.860
So you're going to lose out
on a lot of people in your

00:01:58.860 --> 00:02:00.520
application.

00:02:00.520 --> 00:02:03.550
It's therefore much better to
leave it open to all Google

00:02:03.550 --> 00:02:07.590
accounts and then restrict it
within your application.

00:02:07.590 --> 00:02:11.410
We also offer an OpenID provider
that's experimental.

00:02:11.410 --> 00:02:14.740
And what this allows you to do
is you can accept a Facebook

00:02:14.740 --> 00:02:17.550
account or a Yahoo account
or any other OpenID

00:02:17.550 --> 00:02:19.380
provider that we accept.

00:02:19.380 --> 00:02:22.330
You can, of course, also
provide your own

00:02:22.330 --> 00:02:24.510
OpenID using just code.

00:02:24.510 --> 00:02:27.080
But we provide a library that
makes it a little bit easier

00:02:27.080 --> 00:02:29.060
to consume.

00:02:29.060 --> 00:02:32.750
Now, if you do specify restrict
to a single Google

00:02:32.750 --> 00:02:35.980
Apps domain, that can't be
changed by yourself through

00:02:35.980 --> 00:02:37.220
the console.

00:02:37.220 --> 00:02:40.360
You have to open a support
ticket which, of course, you

00:02:40.360 --> 00:02:42.090
need a premier account to do.

00:02:42.090 --> 00:02:44.890
So if you ever have to change
that in the future, you'd have

00:02:44.890 --> 00:02:48.240
to reach out to us to
help you with that.

00:02:48.240 --> 00:02:51.400
If you do use the Google
accounts authentication, the

00:02:51.400 --> 00:02:54.420
very first time that a user is
being asked to provide their

00:02:54.420 --> 00:02:56.700
identity to your application,
they're

00:02:56.700 --> 00:02:58.660
prompted with this screen.

00:02:58.660 --> 00:03:02.170
In summary, the screen is
notifying the user that we're

00:03:02.170 --> 00:03:05.400
going to give this application
your email address and ask

00:03:05.400 --> 00:03:07.260
whether they're OK with that.

00:03:07.260 --> 00:03:08.790
That's all it's asking.

00:03:08.790 --> 00:03:09.800
There's nothing else.

00:03:09.800 --> 00:03:14.010
And you can't access any other
data for that user other than

00:03:14.010 --> 00:03:15.640
just their email address.

00:03:15.640 --> 00:03:19.100
And it will remember it for
30 days if they elect it.

00:03:19.100 --> 00:03:21.600
Once they do this, then they're
automatically entered

00:03:21.600 --> 00:03:24.680
into your application and
they're good to go.

00:03:24.680 --> 00:03:26.170
Redo.

00:03:26.170 --> 00:03:29.340
Once they do this, then they're
entered automatically

00:03:29.340 --> 00:03:30.430
into your application.

00:03:30.430 --> 00:03:32.230
And you're good to go.

00:03:32.230 --> 00:03:35.680
You can see who the user email
address is and change your

00:03:35.680 --> 00:03:37.990
application's behavior
based on that.

00:03:37.990 --> 00:03:39.790
Something to point out, though,
is that you don't

00:03:39.790 --> 00:03:43.040
actually have the ability
to change this screen.

00:03:43.040 --> 00:03:46.200
This is provided from Google
so that we can take a step

00:03:46.200 --> 00:03:49.030
back and say, look
what's going on.

00:03:49.030 --> 00:03:52.140
And you can't hide it in some
other login screen.

00:03:52.140 --> 00:03:55.340
When you're restricted to a
single Google Apps domain, it

00:03:55.340 --> 00:03:58.250
doesn't actually prompt the user
for authorization because

00:03:58.250 --> 00:04:01.480
it assumes that this is for
only one Google domain.

00:04:01.480 --> 00:04:03.590
So it probably has only
been hosted by

00:04:03.590 --> 00:04:04.810
the enterprise customer.

00:04:04.810 --> 00:04:07.650
And it doesn't make sense
to prompt for the only

00:04:07.650 --> 00:04:09.420
application.

00:04:09.420 --> 00:04:11.610
We're working on ways to make
it more seamless for

00:04:11.610 --> 00:04:12.770
enterprise customers.

00:04:12.770 --> 00:04:15.490
But this is what
you have today.

00:04:15.490 --> 00:04:19.390
Some people may say, well, I
don't like having my users

00:04:19.390 --> 00:04:22.300
prompted because it doesn't make
sense to log in to my own

00:04:22.300 --> 00:04:24.280
internal application.

00:04:24.280 --> 00:04:26.900
And we'd argue that it actually
does because they

00:04:26.900 --> 00:04:30.020
could run into the screen across
the board anywhere.

00:04:30.020 --> 00:04:32.130
And there's a lot of
apps out there.

00:04:32.130 --> 00:04:35.210
So it's a good opportunity to
educate your users on what the

00:04:35.210 --> 00:04:38.080
expectations are and make sure
they're aware of what's

00:04:38.080 --> 00:04:41.850
happening when they click
on an Accept button.

00:04:41.850 --> 00:04:45.180
Within your application, when
you want to restrict it, if

00:04:45.180 --> 00:04:49.050
you specify just open to all
Google Apps accounts, by

00:04:49.050 --> 00:04:52.910
default it doesn't actually
prompt the users to log in.

00:04:52.910 --> 00:04:55.470
And it won't give your
email address.

00:04:55.470 --> 00:04:58.290
You actually have to tell your
application that this section

00:04:58.290 --> 00:05:01.520
is protected and require
a login.

00:05:01.520 --> 00:05:03.000
You can do that two ways.

00:05:03.000 --> 00:05:05.220
One is through configuration
files.

00:05:05.220 --> 00:05:10.680
And I vote Java, web.xml,
or a Python app.yaml.

00:05:10.680 --> 00:05:13.360
And you could also
do this in code.

00:05:13.360 --> 00:05:15.730
You could actually call
an API that says, is

00:05:15.730 --> 00:05:17.510
this user logged in?

00:05:17.510 --> 00:05:20.910
And then, redirect them to the
appropriate login page.

00:05:20.910 --> 00:05:24.380
For this, what you see is
a pattern with the URL.

00:05:24.380 --> 00:05:26.400
And then, we have a role name.

00:05:26.400 --> 00:05:29.720
You have one of two options
setting the role name.

00:05:29.720 --> 00:05:33.540
An asterisk, in Java, which
means that it didn't need to

00:05:33.540 --> 00:05:35.210
be logged in.

00:05:35.210 --> 00:05:39.320
It doesn't matter which role, or
it just simply says, log in

00:05:39.320 --> 00:05:41.710
as required for Python.

00:05:41.710 --> 00:05:44.230
Or you can mention
the role admin.

00:05:44.230 --> 00:05:47.880
This is a built in rule that we
use at Google meaning they

00:05:47.880 --> 00:05:50.660
are listed as somebody that
you've already delegated

00:05:50.660 --> 00:05:54.070
access to on your App
Engine project.

00:05:54.070 --> 00:05:55.010
So that viewer--

00:05:55.010 --> 00:05:56.640
a developer, an owner--

00:05:56.640 --> 00:05:59.500
if they're listed as one of
those members in your console,

00:05:59.500 --> 00:06:02.210
they're going to be treated as
admin user inside of your

00:06:02.210 --> 00:06:04.300
application.

00:06:04.300 --> 00:06:07.230
So it's very easy to have an
admin interface without having

00:06:07.230 --> 00:06:09.900
to build your own access
control inside your

00:06:09.900 --> 00:06:11.120
application.

00:06:11.120 --> 00:06:14.440
One limitation is that you can
currently have 10 developers

00:06:14.440 --> 00:06:17.070
working on an application
at a single time.

00:06:17.070 --> 00:06:20.870
If you have a Premier account,
you can add more if you open a

00:06:20.870 --> 00:06:22.170
support ticket.

00:06:22.170 --> 00:06:25.280
And you have to tell us every
single person you want to add,

00:06:25.280 --> 00:06:28.030
and there's going to be
lead time for that.

00:06:28.030 --> 00:06:30.500
However, if you're going to
develop an admin section that

00:06:30.500 --> 00:06:34.830
needs more than 10 users or
has a lot of user changes,

00:06:34.830 --> 00:06:37.760
it's probably best just to build
your own mechanism into

00:06:37.760 --> 00:06:39.080
your application.

00:06:39.080 --> 00:06:40.290
But it's very simple.

00:06:40.290 --> 00:06:41.610
This is a great way to do it.

00:06:41.610 --> 00:06:44.410
Or the super-admin type
of interface.

00:06:44.410 --> 00:06:49.330
It's a very convenient way to
build into the infrastructure.

00:06:49.330 --> 00:06:52.860
If you do decide not to use the
built-in Google accounts

00:06:52.860 --> 00:06:55.720
authentication, then you can
develop anything you want to

00:06:55.720 --> 00:06:57.120
control access.

00:06:57.120 --> 00:06:59.970
In fact, there's no problem if
you want to integrate with

00:06:59.970 --> 00:07:01.860
your own enterprise
single sign-in.

00:07:01.860 --> 00:07:05.030
The only constraint is
currently, we only allow

00:07:05.030 --> 00:07:10.810
outbound connections from App
Engine on port 480 and 443 so

00:07:10.810 --> 00:07:13.800
that if you want to access your
single sign-on server

00:07:13.800 --> 00:07:16.230
over some background
channel, you must

00:07:16.230 --> 00:07:18.180
connect on those ports.

00:07:18.180 --> 00:07:21.670
Obviously, a lot of people use
username and passwords.

00:07:21.670 --> 00:07:24.930
But if you're storing that in
the data storage, use good

00:07:24.930 --> 00:07:26.540
common sense and encrypt that.

00:07:26.540 --> 00:07:28.700
Or do something to make
it a little harder for

00:07:28.700 --> 00:07:30.310
people to get to.

00:07:30.310 --> 00:07:33.500
And if you go through your own
custom route, you would create

00:07:33.500 --> 00:07:36.860
your application as open
to all Google accounts.

00:07:36.860 --> 00:07:39.410
And you just wouldn't tell your
application to restrict

00:07:39.410 --> 00:07:41.710
access at any point.

00:07:41.710 --> 00:07:45.170
You just build that into
your code yourself.

00:07:45.170 --> 00:07:47.500
We provide a user API.

00:07:47.500 --> 00:07:50.070
And what this allows you
to do, once someone's

00:07:50.070 --> 00:07:52.490
authenticated, you can get
their nickname and their

00:07:52.490 --> 00:07:55.270
email, which is usually
the same thing.

00:07:55.270 --> 00:07:58.190
They have slightly different
variations if it's a Federated

00:07:58.190 --> 00:08:00.430
identity or not.

00:08:00.430 --> 00:08:03.960
You also have the user ID, the
Federated identity, and

00:08:03.960 --> 00:08:05.810
Federated provider.

00:08:05.810 --> 00:08:08.250
And this would tell you, for
example, that they're coming

00:08:08.250 --> 00:08:12.020
from Yahoo and what the Yahoo
ID is for their Federated

00:08:12.020 --> 00:08:14.250
identity and provider.

00:08:14.250 --> 00:08:17.250
For the user ID, it's
an identifier in our

00:08:17.250 --> 00:08:18.770
infrastructure.

00:08:18.770 --> 00:08:21.580
And in fact, a user's email
address could change over

00:08:21.580 --> 00:08:24.340
time, especially with Google
Apps customers.

00:08:24.340 --> 00:08:26.840
They could change that
email address.

00:08:26.840 --> 00:08:29.410
Maybe they get married
or something changes.

00:08:29.410 --> 00:08:32.390
In this way, if you want to use
a unique identifier for

00:08:32.390 --> 00:08:36.059
that user, it might be safer
to rely on that, user ID,

00:08:36.059 --> 00:08:38.730
rather than an email address.

00:08:38.730 --> 00:08:42.080
As well as the basic figuring
out who the user is, you have

00:08:42.080 --> 00:08:43.250
a few functions.

00:08:43.250 --> 00:08:47.440
One of them is to create a login
URL that would redirect

00:08:47.440 --> 00:08:49.920
that user to the appropriate
login.

00:08:49.920 --> 00:08:52.800
If they're already logged in,
then it would just direct them

00:08:52.800 --> 00:08:56.080
to that page that says, allow
this application to see our

00:08:56.080 --> 00:08:57.470
email address.

00:08:57.470 --> 00:09:00.730
You can also get that current
user in the function as well

00:09:00.730 --> 00:09:04.050
as this current user
as an admin.

00:09:04.050 --> 00:09:06.440
Finally, you have an environment
variable named

00:09:06.440 --> 00:09:09.090
AUTH_DOMAIN telling you
what your application

00:09:09.090 --> 00:09:10.710
is restricted to.

00:09:10.710 --> 00:09:11.980
If it's open to all Google

00:09:11.980 --> 00:09:15.770
accounts, it would be gmail.com.

00:09:15.770 --> 00:09:18.980
If the users are Google Apps
customers and they've already

00:09:18.980 --> 00:09:22.360
integrated single sign-on with
the Google Apps environment,

00:09:22.360 --> 00:09:24.800
then you get to take
advantage of that.

00:09:24.800 --> 00:09:27.800
It will detect that they have
single sign-on, and it will

00:09:27.800 --> 00:09:30.280
redirect them to the single
sign-on server and

00:09:30.280 --> 00:09:33.410
automatically authenticate them
if they already have an

00:09:33.410 --> 00:09:35.110
active session.

00:09:35.110 --> 00:09:37.680
Therefore, the end user
experience would be just the

00:09:37.680 --> 00:09:40.800
prompt of, do you want to allow
the application to get

00:09:40.800 --> 00:09:42.230
your email address?

00:09:42.230 --> 00:09:43.690
And then, they're in.

00:09:43.690 --> 00:09:46.400
They don't actually have to
provide their username.

00:09:46.400 --> 00:09:47.900
And they're never presented
with a Google

00:09:47.900 --> 00:09:49.810
brand and login page.

00:09:49.810 --> 00:09:52.970
It's all the single
sign-on system.

00:09:52.970 --> 00:09:55.910
Here's a couple of examples
of the user API.

00:09:55.910 --> 00:09:58.250
In Java, it's very simple.

00:09:58.250 --> 00:10:00.520
There's a factory to get
the user service.

00:10:00.520 --> 00:10:03.600
And then, if that user's null,
then they're not logged in.

00:10:03.600 --> 00:10:06.910
And you could redirect them
to the login user.

00:10:06.910 --> 00:10:10.380
Or likewise, if the user service
is an admin user, it

00:10:10.380 --> 00:10:11.830
says true or false.

00:10:11.830 --> 00:10:13.870
So it's very simple
to do this.

00:10:13.870 --> 00:10:16.470
To use this inside of your code,
adding perhaps a section

00:10:16.470 --> 00:10:20.100
of code or some other function
that you only want to allow

00:10:20.100 --> 00:10:22.740
admin users to trigger.

00:10:22.740 --> 00:10:24.420
In Python, it's very similar.

00:10:24.420 --> 00:10:27.210
Here, I show a little bit more
code where you'd actually use

00:10:27.210 --> 00:10:29.750
the create login URL method.

00:10:29.750 --> 00:10:33.460
When you create the login URL,
you just tell the URL that

00:10:33.460 --> 00:10:36.860
they would be redirected to on
your application after they

00:10:36.860 --> 00:10:38.110
get authenticated.

00:10:40.310 --> 00:10:43.610
Now, the more complicated
topic is authorization.

00:10:43.610 --> 00:10:46.450
There are entire books and
classes discussing the

00:10:46.450 --> 00:10:48.370
different authorization
methods.

00:10:48.370 --> 00:10:52.670
However, we'll touch only
on some important ones.

00:10:52.670 --> 00:10:55.780
I'm going to first provide a
high-level overview and break

00:10:55.780 --> 00:10:57.330
it into two topics.

00:10:57.330 --> 00:11:00.110
One is the internal access
control within your

00:11:00.110 --> 00:11:01.580
application.

00:11:01.580 --> 00:11:05.790
The second one is delegation,
discussing how you'd either

00:11:05.790 --> 00:11:09.550
access an external third party,
whether it be Google or

00:11:09.550 --> 00:11:13.090
some other entity, to access a
user's data without requiring

00:11:13.090 --> 00:11:16.500
the user's name and password,
as well as access a data

00:11:16.500 --> 00:11:19.280
service that you want to
provide so that your

00:11:19.280 --> 00:11:21.650
application can consume that.

00:11:21.650 --> 00:11:25.140
If you don't want to provide a
username and password for that

00:11:25.140 --> 00:11:27.940
user to log into your
application, that's where the

00:11:27.940 --> 00:11:29.380
OAuth dance comes in.

00:11:29.380 --> 00:11:31.150
And we'll discuss that
a little bit later.

00:11:34.120 --> 00:11:37.370
First one, though, is internal
access control.

00:11:37.370 --> 00:11:40.930
You'll have the admin role,
which we've already discussed.

00:11:40.930 --> 00:11:44.790
You also can leverage Google
Apps groups, enterprise

00:11:44.790 --> 00:11:47.640
customers that already have
Google Apps synchronized with

00:11:47.640 --> 00:11:49.090
Active Directory.

00:11:49.090 --> 00:11:51.470
Adding a user to this group will
automatically grant them

00:11:51.470 --> 00:11:53.180
access to the application.

00:11:53.180 --> 00:11:55.520
It's very seamless
and very nice.

00:11:55.520 --> 00:11:59.310
In your code, you would just
use the provisioning API.

00:11:59.310 --> 00:12:01.840
This is a GData API.

00:12:01.840 --> 00:12:04.400
And look up this user, checking
whether their email

00:12:04.400 --> 00:12:06.160
address is this group.

00:12:06.160 --> 00:12:09.030
It simply returns
true or false.

00:12:09.030 --> 00:12:10.830
There's some overhead on that.

00:12:10.830 --> 00:12:13.410
So you'd want to cache
the results.

00:12:13.410 --> 00:12:15.880
But it's just a fairly
simple thing to do.

00:12:15.880 --> 00:12:18.100
And of course, there's nothing
that prevents you from

00:12:18.100 --> 00:12:21.510
creating your own list of roles
and attaching to users

00:12:21.510 --> 00:12:25.200
and using that as a mechanism to
figure out who can do what

00:12:25.200 --> 00:12:27.410
inside your application.

00:12:27.410 --> 00:12:30.190
There are also a lot of
commercial products that are

00:12:30.190 --> 00:12:33.860
single sign-on that do a
lot of authorization.

00:12:33.860 --> 00:12:35.370
They seem great on
the surface.

00:12:35.370 --> 00:12:37.900
But a lot of times, they're
challenging to integrate with

00:12:37.900 --> 00:12:39.260
your application.

00:12:39.260 --> 00:12:42.530
So sometimes, it's just better
to build your own profiles

00:12:42.530 --> 00:12:45.650
within your application, store
them inside of your

00:12:45.650 --> 00:12:49.380
application, profile, meaning
that this user is a member of

00:12:49.380 --> 00:12:52.060
a particular role and roles
that are checked to see if

00:12:52.060 --> 00:12:55.670
they can do different
functions.

00:12:55.670 --> 00:12:57.250
Why delegation?

00:12:57.250 --> 00:12:59.590
Let's talk a little bit about
a story of the history of

00:12:59.590 --> 00:13:01.370
delegation.

00:13:01.370 --> 00:13:04.900
A calendaring application is a
very good example of where we

00:13:04.900 --> 00:13:07.180
had the boss that delegated
coordinating their

00:13:07.180 --> 00:13:09.790
schedule to an admin.

00:13:09.790 --> 00:13:12.630
At first, the boss provided the
username and password so

00:13:12.630 --> 00:13:14.930
the admin could just
log in as the user.

00:13:14.930 --> 00:13:17.660
But that was unsecure.

00:13:17.660 --> 00:13:20.410
Companies then started
programming in this delegation

00:13:20.410 --> 00:13:23.860
concept into their application
so the boss could add the

00:13:23.860 --> 00:13:26.580
admin as a delegate.

00:13:26.580 --> 00:13:29.080
But in the world where we have
a bunch of different services

00:13:29.080 --> 00:13:32.170
all over the internet, it
becomes more complicated

00:13:32.170 --> 00:13:34.910
because now, it's not just one
application you're working

00:13:34.910 --> 00:13:37.320
with and different providers.

00:13:37.320 --> 00:13:42.570
And applications need to access
Google Calendar data.

00:13:42.570 --> 00:13:45.800
A very bad practice began to
store the username and

00:13:45.800 --> 00:13:49.020
passwords inside of your
application so it could use

00:13:49.020 --> 00:13:52.040
that username and password
to log into Google and

00:13:52.040 --> 00:13:53.320
then get the data.

00:13:53.320 --> 00:13:55.930
But there's some pretty big
security flaws in here.

00:13:55.930 --> 00:13:58.700
Mainly, if your application gets
compromised, then your

00:13:58.700 --> 00:14:00.770
usernames and passwords
are lost.

00:14:00.770 --> 00:14:02.900
And they have to then
be changed.

00:14:02.900 --> 00:14:05.600
And that's when people
created OAuth and

00:14:05.600 --> 00:14:07.620
the delegation mechanism.

00:14:07.620 --> 00:14:10.870
What this allows you to do is
inside of your app or inside

00:14:10.870 --> 00:14:13.290
of Google, you can say that
I want to access a

00:14:13.290 --> 00:14:15.040
small subset of data.

00:14:15.040 --> 00:14:18.430
So give me a key that only
works to unlock that

00:14:18.430 --> 00:14:19.860
small set of data.

00:14:19.860 --> 00:14:22.560
And this key is associated
with the user.

00:14:22.560 --> 00:14:25.720
But it's not the same thing
as a user and password.

00:14:25.720 --> 00:14:28.650
This key then can only
be used just to

00:14:28.650 --> 00:14:30.630
unlock that data scope.

00:14:30.630 --> 00:14:32.070
It's much more secure.

00:14:32.070 --> 00:14:35.270
If your app gets compromised,
all they can do is use those

00:14:35.270 --> 00:14:36.980
keys to access the data.

00:14:36.980 --> 00:14:39.590
And you can programmatically
revoke those.

00:14:39.590 --> 00:14:42.030
And users don't actually
have to change their

00:14:42.030 --> 00:14:43.640
username and password.

00:14:43.640 --> 00:14:46.840
It's a much better
story overall.

00:14:46.840 --> 00:14:49.270
And that's really the
gist of delegation.

00:14:49.270 --> 00:14:52.390
You can also allow third party
access to your application

00:14:52.390 --> 00:14:54.150
using this as well.

00:14:54.150 --> 00:14:57.860
The one difference is, unlike
when you're accessing data on,

00:14:57.860 --> 00:15:01.730
for example, Google Calendar,
you can scope it down just to

00:15:01.730 --> 00:15:03.720
a small subset of data.

00:15:03.720 --> 00:15:06.320
It's an all or nothing
for your application.

00:15:06.320 --> 00:15:10.060
So you can't control a subset of
data in my application that

00:15:10.060 --> 00:15:11.430
I want to expose.

00:15:11.430 --> 00:15:14.480
It's here, my application,
that I want to expose.

00:15:14.480 --> 00:15:17.600
And then, it would generate that
token for them that you

00:15:17.600 --> 00:15:20.820
could present to a third party
application that they could

00:15:20.820 --> 00:15:24.190
then use to pull up access
to your application.

00:15:24.190 --> 00:15:27.270
The challenge is OAuth is not
that easy to figure out the

00:15:27.270 --> 00:15:28.680
first time you do it.

00:15:28.680 --> 00:15:30.195
And there are different
parties involved.

00:15:32.750 --> 00:15:35.590
In fact, we actually have a
whole playground that we've

00:15:35.590 --> 00:15:38.880
devoted just to OAuth where you
can go through all of our

00:15:38.880 --> 00:15:41.390
APIs and authorize
an application.

00:15:41.390 --> 00:15:44.490
You can actually step through
each step of the authorization

00:15:44.490 --> 00:15:47.160
process here in the
OAuth playground.

00:15:47.160 --> 00:15:48.650
So it's a very good tool.

00:15:48.650 --> 00:15:52.300
To find it, just go into
developers.google.com.

00:15:52.300 --> 00:15:55.540
It's called the Google
OAuth Playground.

00:15:55.540 --> 00:15:58.010
One of OAuth's biggest
benefits is its

00:15:58.010 --> 00:15:59.970
scoped access to data.

00:15:59.970 --> 00:16:02.590
What this means is that you have
a bunch of different keys

00:16:02.590 --> 00:16:05.860
that correspond to that scoped
access for a user.

00:16:05.860 --> 00:16:09.400
And in this case, I have the
boss and the user, too, that

00:16:09.400 --> 00:16:13.090
both have access to, in this
case, a token that's used by

00:16:13.090 --> 00:16:16.290
the administrative assistant
calendaring program.

00:16:16.290 --> 00:16:17.660
And they're all independent.

00:16:17.660 --> 00:16:20.100
So you can revoke them
at any time.

00:16:20.100 --> 00:16:23.050
In this case, I have a boss
and the user who both have

00:16:23.050 --> 00:16:26.190
access to a token that is used
by the administrative

00:16:26.190 --> 00:16:28.000
assistant's calendaring
program.

00:16:28.000 --> 00:16:29.640
And they're all independent.

00:16:29.640 --> 00:16:32.120
So you can revoke them
at any time.

00:16:32.120 --> 00:16:35.230
In this case, if you revoke the
boss's access from that

00:16:35.230 --> 00:16:40.040
user, that token for that user
using it then no longer works

00:16:40.040 --> 00:16:40.630
for the user.

00:16:40.630 --> 00:16:43.810
And the boss doesn't have to
go change their password.

00:16:43.810 --> 00:16:46.770
So the very first time that you,
as a developer, are going

00:16:46.770 --> 00:16:49.850
to ask a user for that token,
there are a bunch of steps

00:16:49.850 --> 00:16:51.190
that go on.

00:16:51.190 --> 00:16:53.850
I'm going to try to cover them
and talk about what's created

00:16:53.850 --> 00:16:57.230
on Google's infrastructure and
how that interacts with your

00:16:57.230 --> 00:16:58.850
application.

00:16:58.850 --> 00:17:02.670
The first step is a user asks
the application for something

00:17:02.670 --> 00:17:04.380
for it to do for them.

00:17:04.380 --> 00:17:07.609
Let's say that that pulls
up my calendar.

00:17:07.609 --> 00:17:10.359
Pull up my Google Docs,
pull up my Tweet feed,

00:17:10.359 --> 00:17:11.470
whatever it could be.

00:17:11.470 --> 00:17:13.680
You have to talk to the
application server.

00:17:13.680 --> 00:17:16.540
In this case, I'll use
Google as an example.

00:17:16.540 --> 00:17:19.349
The authorization server then
returns a redirect to your

00:17:19.349 --> 00:17:22.400
application that you give to
the user that directs the

00:17:22.400 --> 00:17:25.329
browser to Google's
authorization server.

00:17:25.329 --> 00:17:27.690
It says, here's the request
that I want.

00:17:27.690 --> 00:17:31.450
Or I want to allow this
application to access my data.

00:17:31.450 --> 00:17:35.040
And it will list clearly what
they want to access.

00:17:35.040 --> 00:17:38.500
If the user clicks on "I accept
this access request,"

00:17:38.500 --> 00:17:41.880
then Google creates a one-time
code that corresponds to this

00:17:41.880 --> 00:17:43.490
access request.

00:17:43.490 --> 00:17:46.390
It then sends that one-time
code to the user.

00:17:46.390 --> 00:17:49.240
You don't have to understand the
exact characters, but this

00:17:49.240 --> 00:17:51.960
is roughly what it looks
like on the right side.

00:17:51.960 --> 00:17:55.540
That one-time code is sent
to the user's browser.

00:17:55.540 --> 00:17:58.960
As a redirect, I get sent back
to your application.

00:17:58.960 --> 00:18:01.680
You use that one-time code as
a call-back to Google's

00:18:01.680 --> 00:18:05.080
authorization service as,
here's my one-time code.

00:18:05.080 --> 00:18:07.550
Can I access an API now?

00:18:07.550 --> 00:18:11.130
In exchange, Google will delete
that one-time code and

00:18:11.130 --> 00:18:15.140
create a refresh token
and an access token.

00:18:15.140 --> 00:18:18.200
The refresh token is important
because in this case, we're

00:18:18.200 --> 00:18:20.690
asking for offline access.

00:18:20.690 --> 00:18:23.620
The access token is returned.

00:18:23.620 --> 00:18:26.640
You want to store both the
access token and the refresh

00:18:26.640 --> 00:18:28.840
token in your application.

00:18:28.840 --> 00:18:32.170
The refresh token is something
you can use in the future.

00:18:32.170 --> 00:18:35.670
The access token is only
good for about an hour.

00:18:35.670 --> 00:18:37.810
It will actually have
an expiration.

00:18:37.810 --> 00:18:40.810
But you could take that access
token and either put it as a

00:18:40.810 --> 00:18:43.650
header or just append it
to the core string if

00:18:43.650 --> 00:18:45.750
that API allows it.

00:18:45.750 --> 00:18:49.280
And so every time you make a
call to that API, you include

00:18:49.280 --> 00:18:50.940
that access token.

00:18:50.940 --> 00:18:53.320
Google verifies that
access token.

00:18:53.320 --> 00:18:56.570
And if it is still valid, it
will then return the data to

00:18:56.570 --> 00:18:57.870
your application.

00:18:57.870 --> 00:19:00.310
So now, all subsequent requests

00:19:00.310 --> 00:19:02.620
include that access token.

00:19:02.620 --> 00:19:06.040
If the access token is no longer
valid, you have to use

00:19:06.040 --> 00:19:10.060
the refresh token to get
a new access token.

00:19:10.060 --> 00:19:12.940
Let's say your application did
have that refresh token.

00:19:12.940 --> 00:19:16.020
Then what happens the next
time you access that API?

00:19:16.020 --> 00:19:17.490
Well, it's pretty simple.

00:19:17.490 --> 00:19:19.990
Your application has
that refresh token.

00:19:19.990 --> 00:19:22.130
It gives it to Google.

00:19:22.130 --> 00:19:24.690
Google looks it up to make
sure it's still valid.

00:19:24.690 --> 00:19:27.680
If it is, then it will generate
a brand new access

00:19:27.680 --> 00:19:30.950
token, send that back
to your application.

00:19:30.950 --> 00:19:34.350
Then, your application can use
that token over and over again

00:19:34.350 --> 00:19:36.950
until it's no longer
valid again.

00:19:36.950 --> 00:19:39.780
The tricky part is that
at any time, that

00:19:39.780 --> 00:19:41.640
access token could fail.

00:19:41.640 --> 00:19:44.990
And so you have to program into
your application handling

00:19:44.990 --> 00:19:46.290
that error.

00:19:46.290 --> 00:19:48.310
It may just be that
it's expired.

00:19:48.310 --> 00:19:52.280
And if you have a refresh
token, you'd try it.

00:19:52.280 --> 00:19:53.990
But the refresh token
could fail.

00:19:53.990 --> 00:19:57.380
And if that happens, you have
to redirect to the user, if

00:19:57.380 --> 00:20:00.280
they're logged in to the
application again, to do the

00:20:00.280 --> 00:20:01.560
authorization.

00:20:01.560 --> 00:20:04.880
If that fails, then you know the
user actually revoked the

00:20:04.880 --> 00:20:08.880
token and clicked Deny on that
button when it has prompted

00:20:08.880 --> 00:20:10.120
them for access.

00:20:10.120 --> 00:20:13.390
So you have to handle
for those cases.

00:20:13.390 --> 00:20:14.860
So I talked about exposing your

00:20:14.860 --> 00:20:16.690
application through OAuth.

00:20:16.690 --> 00:20:19.870
OAuth 2.0 is a standard
out there used by a

00:20:19.870 --> 00:20:21.290
lot of other providers.

00:20:21.290 --> 00:20:24.550
But the API is considered
somewhat experimental.

00:20:24.550 --> 00:20:27.500
You can use it fairly easily,
certainly a lot easier than

00:20:27.500 --> 00:20:29.190
programming it yourself.

00:20:29.190 --> 00:20:31.770
Keeping track of all those
tokens and the access keys

00:20:31.770 --> 00:20:33.890
isn't actually that
easy, however.

00:20:33.890 --> 00:20:36.510
So Google does a lot
of that for you.

00:20:36.510 --> 00:20:38.860
You can simply say, I want
someone to have a

00:20:38.860 --> 00:20:40.430
key for this scope.

00:20:40.430 --> 00:20:43.350
It will prompt the user for that
axis just like we prompt

00:20:43.350 --> 00:20:44.650
for our own APIs.

00:20:44.650 --> 00:20:47.520
And then, it will give the third
party application that

00:20:47.520 --> 00:20:49.820
token that will work
for that code.

00:20:49.820 --> 00:20:52.470
Then, they'll exchange for the
access token, et cetera.

00:20:52.470 --> 00:20:55.750
So it's not just Google
invented, just well supported.

00:20:55.750 --> 00:20:57.910
So we have a vested
interest in it.

00:20:57.910 --> 00:21:00.395
I encourage you to read more
online at developers.googl

00:21:00.395 --> 00:21:05.560
e.com/appengine.

00:21:05.560 --> 00:21:08.630
Some of the best practices is
that earlier incarnations of

00:21:08.630 --> 00:21:11.780
OAuth have you, as a developer,
do cryptography

00:21:11.780 --> 00:21:13.610
inside your application.

00:21:13.610 --> 00:21:16.790
But the latest version is
just that access key.

00:21:16.790 --> 00:21:18.910
And that's as good as your
using a password.

00:21:18.910 --> 00:21:20.990
And that's being sent
over as a header

00:21:20.990 --> 00:21:22.950
or as a query parameter.

00:21:22.950 --> 00:21:25.870
So make sure you
do it over SSL.

00:21:25.870 --> 00:21:28.600
Otherwise, if someone sniffs
that connection, then you can

00:21:28.600 --> 00:21:31.930
see that user token for as
long as it's good for.

00:21:31.930 --> 00:21:34.280
And if they sniff the connection
that used the

00:21:34.280 --> 00:21:37.440
refresh token, well, then they
have the refresh token.

00:21:37.440 --> 00:21:40.650
So be very careful in how you
handle that refresh token and

00:21:40.650 --> 00:21:43.380
the access token and what
connections you use to the

00:21:43.380 --> 00:21:45.710
different authorization
services.

00:21:45.710 --> 00:21:48.670
Request the smallest scope
needed possible.

00:21:48.670 --> 00:21:52.250
If you don't need Google Docs
access, don't ask for it.

00:21:52.250 --> 00:21:54.960
Otherwise, user gets this long
list of things you're

00:21:54.960 --> 00:21:58.650
requesting access to when all
you need, maybe, was calendar.

00:21:58.650 --> 00:22:01.240
It's going to be simpler and
easier for the user to

00:22:01.240 --> 00:22:03.310
understand what's happening.

00:22:03.310 --> 00:22:06.480
Request that refresh token
only if you need it.

00:22:06.480 --> 00:22:09.690
Again, if your application
doesn't need access offline,

00:22:09.690 --> 00:22:12.460
then having that refresh token
really buys you nothing

00:22:12.460 --> 00:22:15.280
because you could still
go through that dance.

00:22:15.280 --> 00:22:17.320
They call it the OAuth dance.

00:22:17.320 --> 00:22:19.860
But that handshake with the
client to get a new access

00:22:19.860 --> 00:22:22.500
token won't prompt them for
access if they previously

00:22:22.500 --> 00:22:24.650
authorized that application.

00:22:24.650 --> 00:22:27.070
So you can effectively
do the same thing.

00:22:27.070 --> 00:22:29.770
But if you had a refresh token,
then you could increase

00:22:29.770 --> 00:22:33.040
your risk of being compromised
and having a data file that

00:22:33.040 --> 00:22:36.480
can be used to access
other users' data.

00:22:36.480 --> 00:22:39.070
Plus, the prompt screen gives
them more warning.

00:22:39.070 --> 00:22:41.710
Store that refresh
token securely.

00:22:41.710 --> 00:22:44.560
We encourage you to explore
further additional useful

00:22:44.560 --> 00:22:47.600
resources in these documents,
tools such as OAuth

00:22:47.600 --> 00:22:48.850
Playground, and articles.

