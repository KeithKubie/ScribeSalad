WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.730
Now what does this have to do with randomized algorithms?

00:00:02.730 --> 00:00:06.770
And of course any analogy can be criticized at one point or the other

00:00:06.770 --> 00:00:08.440
but I think it fits rather well.

00:00:08.440 --> 00:00:12.590
If you use a randomized algorithm without having any guarantees,

00:00:12.590 --> 00:00:18.280
well first of all, at a certain point in time, you have to determine that it's the last round.

00:00:18.280 --> 00:00:20.560
You're not running the algorithm any further.

00:00:20.560 --> 00:00:25.300
You've run it 200 times or 2000 times but then at a certain point you just have to say

00:00:25.300 --> 00:00:29.310
"Okay. This is it. This is going to be the result that I use."

00:00:29.310 --> 00:00:35.410
And it might be that the last 400 or 500 times or in this case 40 times

00:00:35.410 --> 00:00:38.490
the algorithm has not found a better solution.

00:00:38.490 --> 00:00:42.700
It has found one that seems very good and the solution has not improved

00:00:42.700 --> 00:00:45.870
so at a certain point in time you're just going to decide.

00:00:45.870 --> 00:00:49.280
Well, it's likely that this is a very good solution.

00:00:49.280 --> 00:00:54.340
Now, here's the thing where the analogy actually does not hold because if you think about it

00:00:54.340 --> 00:01:00.760
when we're dealing with an NP complete problem the chances of winning are not 5-6 over here.

00:01:00.760 --> 00:01:05.760
Indeed, we're playing a game with exponentially small probability of winning.

00:01:05.760 --> 00:01:10.130
It's like this, when you run a randomized algorithm without guarantees,

00:01:10.130 --> 00:01:12.580
you're playing a game with bad odds.

00:01:12.580 --> 00:01:16.660
You don't really understand what's going on and in the end

00:01:16.660 --> 00:01:21.350
even though you run the algorithm multiple times you only have one shot of getting it right

00:01:21.350 --> 00:01:24.850
at the point that you decide to stop your algorithm.

00:01:24.850 --> 00:01:28.600
Should you run a randomized algorithm without any guarantees,

00:01:28.600 --> 00:01:32.640
I think the rules are almost the same as the one for this game here.

00:01:32.640 --> 00:01:38.020
So if the stakes aren't very high so the probability of trying to solve this may be not that important

00:01:38.020 --> 00:01:42.750
and you're willing to take that risk then you can do it and sometimes it's the only possible way.

00:01:42.750 --> 00:01:48.220
But I think that an algorithm with guarantees is almost always preferable.

00:01:48.220 --> 00:01:52.350
First of all, you know what's going on and secondly and I think that's also very important

00:01:52.350 --> 00:01:57.470
to emphasize in order to get these guarantees here you have to construct an intelligent algorithm.

00:01:57.470 --> 00:02:02.570
So rather than just poking all the way around, you're poking intelligently.

00:02:02.570 --> 00:02:04.750
It's almost the same as with the search tree.

00:02:04.750 --> 00:02:10.050
So just using randomness in the way as brute force only that in this time it's random force.

00:02:10.050 --> 00:02:13.210
And I think the name already says how powerful that is

00:02:13.210 --> 00:02:17.980
but when you have guarantees, you're directing that random force in a certain direction

00:02:17.980 --> 99:59:59.000
and that of course tends to improve your results dramatically.

