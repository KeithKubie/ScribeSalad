WEBVTT
Kind: captions
Language: en

00:00:00.620 --> 00:00:03.770
FRED CHUNG: Long lasting battery
is the most important factor

00:00:03.770 --> 00:00:05.240
for Android users.

00:00:05.240 --> 00:00:08.920
And by extension, developers
should care about it too.

00:00:08.920 --> 00:00:11.200
While we want to
achieve reliable battery

00:00:11.200 --> 00:00:14.320
life for Android, apps
should have some flexibility

00:00:14.320 --> 00:00:16.149
to run in the background.

00:00:16.149 --> 00:00:19.030
The platform needs to provide
consistent restrictions

00:00:19.030 --> 00:00:21.670
as guardrails to prevent
a few misbehaving

00:00:21.670 --> 00:00:23.990
apps from draining the battery.

00:00:23.990 --> 00:00:26.890
This is important, such that
you can design your apps to run

00:00:26.890 --> 00:00:29.530
consistently across devices.

00:00:29.530 --> 00:00:32.350
At the same time, users
should have some control

00:00:32.350 --> 00:00:35.380
and visibility to
app battery usage.

00:00:35.380 --> 00:00:37.990
How does Android balance
these considerations?

00:00:37.990 --> 00:00:40.990
From Android Lollipop
to P, the platform

00:00:40.990 --> 00:00:43.420
has introduced a
series of features

00:00:43.420 --> 00:00:45.910
that aim to offer
power management based

00:00:45.910 --> 00:00:48.310
on three main dimensions.

00:00:48.310 --> 00:00:51.370
Firstly, device idle
state, or how long

00:00:51.370 --> 00:00:54.280
the device has been unplugged
and with the screen off.

00:00:54.280 --> 00:00:58.030
The device could enter doze,
where all apps cannot acquire

00:00:58.030 --> 00:00:59.110
wake locks.

00:00:59.110 --> 00:01:02.280
No job services and sync
adapters can be run.

00:01:02.280 --> 00:01:04.900
You are likely familiar
with this already.

00:01:04.900 --> 00:01:07.540
The second one is
based on giving users

00:01:07.540 --> 00:01:09.580
control and visibility.

00:01:09.580 --> 00:01:11.830
There are a couple
of relevant features.

00:01:11.830 --> 00:01:14.590
In Android P, battery
saver has been

00:01:14.590 --> 00:01:17.410
enhanced for users who want
to have extended battery

00:01:17.410 --> 00:01:20.020
life over everything
else, possibly

00:01:20.020 --> 00:01:22.900
at the expense of some
feature degradation,

00:01:22.900 --> 00:01:26.800
such as restricted location
services during screen off.

00:01:26.800 --> 00:01:29.440
Users can turn this
on any time, or set

00:01:29.440 --> 00:01:32.290
it to turn on automatically
when the device drops

00:01:32.290 --> 00:01:34.310
below a certain threshold.

00:01:34.310 --> 00:01:36.460
So developers should account
for these restrictions

00:01:36.460 --> 00:01:38.810
and test against them.

00:01:38.810 --> 00:01:42.130
There are times when apps might
be too aggressive in acquiring

00:01:42.130 --> 00:01:43.840
wake locks, or,
in general, doing

00:01:43.840 --> 00:01:46.690
things that are considered
bad for battery drain.

00:01:46.690 --> 00:01:50.980
New in P there is the
background restrictions feature.

00:01:50.980 --> 00:01:53.530
Based on Android
Vitals, The device

00:01:53.530 --> 00:01:56.290
monitors and detects
apps that demonstrate

00:01:56.290 --> 00:01:59.380
known bad behaviors,
and flags to the users

00:01:59.380 --> 00:02:02.170
who can then choose to restrict
these apps from running

00:02:02.170 --> 00:02:05.890
jobs, alarms, background
services, and so on.

00:02:05.890 --> 00:02:09.310
Most users only use a small
number of installed apps

00:02:09.310 --> 00:02:10.389
regularly.

00:02:10.389 --> 00:02:12.160
When you think about
it, the total number

00:02:12.160 --> 00:02:14.440
of installed apps
on a device really

00:02:14.440 --> 00:02:17.660
should have no correlation
to battery life.

00:02:17.660 --> 00:02:20.500
The third dimension aims
to tackle this issue

00:02:20.500 --> 00:02:23.040
based on app usage patterns.

00:02:23.040 --> 00:02:26.920
In Android P, the system
can, in a fine grained way,

00:02:26.920 --> 00:02:30.670
apply restrictions to apps that
haven't been used recently.

00:02:30.670 --> 00:02:33.700
Apps are classified
into five buckets,

00:02:33.700 --> 00:02:36.420
ranging from active to never.

00:02:36.420 --> 00:02:39.380
We call them app
standby buckets.

00:02:39.380 --> 00:02:42.860
Apps that haven't been actively
used for a certain time

00:02:42.860 --> 00:02:46.430
would be put into an
appropriate lower bucket.

00:02:46.430 --> 00:02:49.400
Accordingly, the system
would progressively

00:02:49.400 --> 00:02:52.370
differ app tasks,
such as alarms, jobs,

00:02:52.370 --> 00:02:54.560
and network access.

00:02:54.560 --> 00:02:57.470
Further, the system uses
machine learning techniques

00:02:57.470 --> 00:03:01.460
from DeepMind to intelligently
move apps between buckets

00:03:01.460 --> 00:03:03.950
in order to achieve
the highest efficiency.

00:03:03.950 --> 00:03:06.020
And it gets better over time.

00:03:06.020 --> 00:03:08.770
Device manufacturers
can adopt this ML model,

00:03:08.770 --> 00:03:13.550
implement their own, or
use the AOSP algorithm.

00:03:13.550 --> 00:03:15.290
Various battery
management features

00:03:15.290 --> 00:03:18.140
boil down to restrictions
and deferred access

00:03:18.140 --> 00:03:20.750
to some combination
of background tasks.

00:03:20.750 --> 00:03:23.270
For developers, therefore,
it's important to test

00:03:23.270 --> 00:03:25.770
against these
restricted scenarios.

00:03:25.770 --> 00:03:29.640
Let's go over some design
and testing best practices.

00:03:29.640 --> 00:03:31.920
Ensure proper
testing over a range

00:03:31.920 --> 00:03:34.040
of increasing restrictions.

00:03:34.040 --> 00:03:37.410
ADB commands are available
to simulate the conditions.

00:03:37.410 --> 00:03:40.440
You can simulate doze
using these commands.

00:03:40.440 --> 00:03:43.200
You can also exit these states
through similar commands,

00:03:43.200 --> 00:03:45.570
available in the developer docs.

00:03:45.570 --> 00:03:48.270
How do you test against
app standby buckets?

00:03:48.270 --> 00:03:51.510
Since it's based on user
behaviors, which can vary,

00:03:51.510 --> 00:03:54.420
expect your apps to be
moved between buckets.

00:03:54.420 --> 00:03:57.120
Always assume that
your jobs and alarms

00:03:57.120 --> 00:03:59.880
will be deferred, and
ensure that your design can

00:03:59.880 --> 00:04:02.190
work under those restrictions.

00:04:02.190 --> 00:04:05.190
The good thing is that
most apps will be fine

00:04:05.190 --> 00:04:06.900
if they are already
following best

00:04:06.900 --> 00:04:10.800
practices, such as using jobs,
or targeting at least API level

00:04:10.800 --> 00:04:12.700
26.

00:04:12.700 --> 00:04:15.580
Also note that in the
frequent and rare app

00:04:15.580 --> 00:04:19.690
standby buckets, high priority
Firebase Cloud messages are

00:04:19.690 --> 00:04:22.450
kept, and any messages
beyond the threshold

00:04:22.450 --> 00:04:24.940
will be treated as
normal priority, which

00:04:24.940 --> 00:04:28.120
could be delayed when
the device enters doze.

00:04:28.120 --> 00:04:32.110
Again, test against these
conditions thoroughly.

00:04:32.110 --> 00:04:34.020
You can use a couple
of ADB commands

00:04:34.020 --> 00:04:37.300
to set and retrieve
buckets for your package.

00:04:37.300 --> 00:04:40.750
Before running them, make
sure your device is unplugged.

00:04:40.750 --> 00:04:45.580
There are also framework APIs
to get an app's current bucket.

00:04:45.580 --> 00:04:48.720
Or you can use
usage stats manager

00:04:48.720 --> 00:04:52.390
to query the list of events
associated with your app, which

00:04:52.390 --> 00:04:54.570
includes bucket changes.

00:04:54.570 --> 00:04:56.840
Want to test under
battery saver conditions?

00:04:56.840 --> 00:04:57.340
Yep.

00:04:57.340 --> 00:04:59.770
There are ADB commands for that.

00:04:59.770 --> 00:05:02.720
If your app uses
location, for example,

00:05:02.720 --> 00:05:04.330
you can use this
method to verify

00:05:04.330 --> 00:05:07.000
how your app behaves
when it uses location

00:05:07.000 --> 00:05:09.790
services during screen off.

00:05:09.790 --> 00:05:12.010
When battery saver
is turned on, you

00:05:12.010 --> 00:05:15.880
can further save battery by
entering your UI's dark theme

00:05:15.880 --> 00:05:17.200
if available.

00:05:17.200 --> 00:05:18.760
You can either
check for this mode

00:05:18.760 --> 00:05:22.430
explicitly, or respond
to a broadcast.

00:05:22.430 --> 00:05:25.400
In the event you need to
refactor existing background

00:05:25.400 --> 00:05:29.810
surfaces, in most cases the
new WorkManager API can be

00:05:29.810 --> 00:05:33.170
used to fulfill many use cases.

00:05:33.170 --> 00:05:37.230
Use only foreground services
for user triggered actions

00:05:37.230 --> 00:05:39.740
and that users expect
them to run immediately,

00:05:39.740 --> 00:05:41.880
such as music playback.

00:05:41.880 --> 00:05:44.820
By the way, it's good
practice to also include

00:05:44.820 --> 00:05:49.020
a stop [INAUDIBLE]
instant notification.

00:05:49.020 --> 00:05:53.040
We have talked about some design
and testing best practices.

00:05:53.040 --> 00:05:55.050
During development
and post-launch

00:05:55.050 --> 00:05:57.860
there's a couple
of related tools.

00:05:57.860 --> 00:06:00.020
The energy profiler
is a new feature

00:06:00.020 --> 00:06:03.170
available in Android
Studio 3.2, currently

00:06:03.170 --> 00:06:05.270
on the Canary channel.

00:06:05.270 --> 00:06:08.060
After you deploy your app
to a connected device,

00:06:08.060 --> 00:06:10.340
the profiler shows
a live timeline

00:06:10.340 --> 00:06:13.190
of how your app uses
system resources,

00:06:13.190 --> 00:06:16.940
such as partial wake locks,
wake up, alarms, jobs,

00:06:16.940 --> 00:06:18.800
and location requests.

00:06:18.800 --> 00:06:22.280
The profiler also estimates
your app's energy usage

00:06:22.280 --> 00:06:25.850
of CPU, network, and
location resources.

00:06:25.850 --> 00:06:29.960
Refer to energy profiler
documentation for more details.

00:06:29.960 --> 00:06:32.960
In the Play Developer
Console, Android Vitals

00:06:32.960 --> 00:06:35.390
exposes performance
metrics that are tightly

00:06:35.390 --> 00:06:39.160
associated with battery usage,
which includes excessive wake

00:06:39.160 --> 00:06:43.490
ups, stuck wake locks, and
background network access.

00:06:43.490 --> 00:06:47.360
Refer to Vitals documentation
for more detail.

00:06:47.360 --> 00:06:50.780
With standard ways to manage
power intensive tasks,

00:06:50.780 --> 00:06:53.150
and with proper
testing, developers

00:06:53.150 --> 00:06:56.480
can create apps that work
consistently across devices,

00:06:56.480 --> 00:07:00.590
and collectively can achieve
good battery life for users.

00:07:00.590 --> 00:07:02.990
To learn more about
these features and tools,

00:07:02.990 --> 00:07:04.107
check out the links below.

00:07:04.107 --> 00:07:04.940
Thanks for watching.

00:07:04.940 --> 00:07:07.690
[MUSIC PLAYING]

