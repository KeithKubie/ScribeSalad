WEBVTT
Kind: captions
Language: en

00:03:32.810 --> 00:03:35.030
CHRIS CARTLAND: Welcome to
Google+ Developers Live.

00:03:35.030 --> 00:03:36.190
My name is Chris Cartland.

00:03:36.190 --> 00:03:38.490
And I'm a developer programs
engineer working on the

00:03:38.490 --> 00:03:39.755
Google+ platform.

00:03:39.755 --> 00:03:40.930
YANIV YAAKUBOVICH: And I'm
Yaniv Yaakubovich.

00:03:40.930 --> 00:03:43.270
I'm a product manager in
the Google+ platform.

00:03:43.270 --> 00:03:44.920
CHRIS CARTLAND: Thanks for
joining us this week.

00:03:44.920 --> 00:03:47.830
Today we're going to talk about
verifying tokens that

00:03:47.830 --> 00:03:50.850
you receive from your client
apps on your server.

00:03:50.850 --> 00:03:52.570
So first we're going to talk
about when you need to do

00:03:52.570 --> 00:03:54.500
this, when it's important.

00:03:54.500 --> 00:03:56.880
We're going to talk about why
and the kind of things you

00:03:56.880 --> 00:03:58.480
want to avoid in your app.

00:03:58.480 --> 00:04:00.380
And we're also going to
tell you how to do it.

00:04:00.380 --> 00:04:01.930
And we're going to look at
some code that we have on

00:04:01.930 --> 00:04:05.000
GitHub to actually show you
how to get this done.

00:04:05.000 --> 00:04:06.730
YANIV YAAKUBOVICH: And while
we're doing this broadcast,

00:04:06.730 --> 00:04:11.840
you can comment and questions
for us either on our Google+

00:04:11.840 --> 00:04:14.390
or channel on YouTube,
wherever you're

00:04:14.390 --> 00:04:15.290
watching this video.

00:04:15.290 --> 00:04:16.250
CHRIS CARTLAND: Yeah, and we'll
be sure to get those

00:04:16.250 --> 00:04:18.100
questions at the end.

00:04:18.100 --> 00:04:20.620
So first of all, we
have to talk about

00:04:20.620 --> 00:04:22.150
what we're doing here.

00:04:22.150 --> 00:04:26.010
We're talking about requests
coming from your client to

00:04:26.010 --> 00:04:27.290
your server.

00:04:27.290 --> 00:04:31.590
So if we look on my screen here,
we can see that we're

00:04:31.590 --> 00:04:32.640
going to make requests.

00:04:32.640 --> 00:04:34.850
And there's two things
that you can do.

00:04:34.850 --> 00:04:37.870
One is that you could send
an authorization code.

00:04:37.870 --> 00:04:40.070
And we cover that in all
of our Quick Starts.

00:04:40.070 --> 00:04:44.170
So you can check those out at
developers.google.com/plus.

00:04:44.170 --> 00:04:45.190
Look for the Quick Starts.

00:04:45.190 --> 00:04:46.630
Pick your favorite language.

00:04:46.630 --> 00:04:51.650
And that's one way to establish
an authenticated

00:04:51.650 --> 00:04:54.340
connection with your client
and your server.

00:04:54.340 --> 00:04:57.280
Today we're going to talk about
a different way to do

00:04:57.280 --> 00:05:00.240
this, and that is by sending
either an ID token or an

00:05:00.240 --> 00:05:03.530
access token to your server.

00:05:03.530 --> 00:05:09.450
The code for this is available
on GitHub.com/googleplus for

00:05:09.450 --> 00:05:12.580
either the Quick Starts or for
the samples that tell you how

00:05:12.580 --> 00:05:13.830
to verify the tokens.

00:05:16.510 --> 00:05:18.290
So first a little background.

00:05:18.290 --> 00:05:19.910
What are these two different
types of tokens that we're

00:05:19.910 --> 00:05:21.310
going to be talking
about today?

00:05:21.310 --> 00:05:22.950
The first is an ID token.

00:05:22.950 --> 00:05:27.735
And an ID token contains
information about the user and

00:05:27.735 --> 00:05:28.780
who they are.

00:05:28.780 --> 00:05:30.390
And it's also cryptographically
signed by

00:05:30.390 --> 00:05:33.910
Google so that you can verify
that this is a real token.

00:05:33.910 --> 00:05:35.650
YANIV YAAKUBOVICH: And we'll
show you later in the code how

00:05:35.650 --> 00:05:38.040
we can verify that it's
a Google token

00:05:38.040 --> 00:05:39.890
and not other token.

00:05:39.890 --> 00:05:41.290
CHRIS CARTLAND: Exactly.

00:05:41.290 --> 00:05:45.510
An access token is a bearer
token that can be used to make

00:05:45.510 --> 00:05:47.040
API calls to Google.

00:05:47.040 --> 00:05:49.350
And you need to make sure that
you verify those every time

00:05:49.350 --> 00:05:52.290
your server receives
them as well.

00:05:52.290 --> 00:05:54.620
If you are going to decide which
one of these to use,

00:05:54.620 --> 00:06:00.620
remember that an ID token is a
way to identify who a user is

00:06:00.620 --> 00:06:02.190
very quickly.

00:06:02.190 --> 00:06:04.400
And an access token is required
if you need to then

00:06:04.400 --> 00:06:07.640
make further requests
to Google's APIs.

00:06:07.640 --> 00:06:09.830
So depending on what you want to
do, if you want to be fast

00:06:09.830 --> 00:06:12.660
and just identify the user,
use an ID token.

00:06:12.660 --> 00:06:16.940
If you want to make API calls
to Google, you should use an

00:06:16.940 --> 00:06:18.500
access token.

00:06:18.500 --> 00:06:21.040
And all of this, I'll say this
again, you should use the one

00:06:21.040 --> 00:06:24.210
time code flow instead
of doing this first.

00:06:24.210 --> 00:06:29.040
It's preferred because it's more
secure, because that code

00:06:29.040 --> 00:06:30.890
can't be intercepted.

00:06:30.890 --> 00:06:34.750
And it also gives you a little
more power, which you can read

00:06:34.750 --> 00:06:36.000
about in our documentation.

00:06:38.200 --> 00:06:41.470
So you should try to
use the code flow.

00:06:41.470 --> 00:06:44.970
You also want to make sure that,
if possible, you should

00:06:44.970 --> 00:06:48.290
authenticate a session so you
can make multiple requests.

00:06:48.290 --> 00:06:49.860
YANIV YAAKUBOVICH: In cases that
you don't have a session,

00:06:49.860 --> 00:06:51.590
then the solution that
we are presenting

00:06:51.590 --> 00:06:53.210
today will be relevant.

00:06:53.210 --> 00:06:53.980
CHRIS CARTLAND: Exactly.

00:06:53.980 --> 00:06:57.960
So if you are not able to
establish multiple requests in

00:06:57.960 --> 00:07:01.700
one session, then you need to
authenticate all requests.

00:07:01.700 --> 00:07:04.530
And to do that you can send,
say, the ID token or the

00:07:04.530 --> 00:07:06.670
access token to do that.

00:07:06.670 --> 00:07:11.750
If you don't have the
authorization code, then you

00:07:11.750 --> 00:07:13.740
have no choice but to use
something like sending the

00:07:13.740 --> 00:07:16.380
access token to your server in
order to make the request.

00:07:16.380 --> 00:07:18.550
And right now, iOS doesn't
have that.

00:07:18.550 --> 00:07:20.350
So you'll need to do that.

00:07:20.350 --> 00:07:21.600
YANIV YAAKUBOVICH: And we're
looking into solving it in the

00:07:21.600 --> 00:07:22.850
near future.

00:07:25.590 --> 00:07:27.380
CHRIS CARTLAND: So we want to
show you briefly how to get

00:07:27.380 --> 00:07:31.600
these tokens before we talk
about how to verify them.

00:07:31.600 --> 00:07:35.800
So on Android, if you want to
get an ID token you can use

00:07:35.800 --> 00:07:37.840
Google AuthUtil.

00:07:37.840 --> 00:07:40.960
Use this syntax that I
have on the screen.

00:07:40.960 --> 00:07:43.500
And make sure that you do this
in an AsyncTask so that it

00:07:43.500 --> 00:07:46.730
doesn't block anything
in the app.

00:07:46.730 --> 00:07:49.110
And you'll get a string back
that you can then send

00:07:49.110 --> 00:07:52.520
securely to your server.

00:07:52.520 --> 00:07:54.720
If you want to get an access
token, you do a

00:07:54.720 --> 00:07:55.530
very similar thing.

00:07:55.530 --> 00:07:57.990
But you change the third
argument to match the syntax

00:07:57.990 --> 00:08:00.440
that I have on the
screen here.

00:08:00.440 --> 00:08:04.600
And these are just the way that
your client will get the

00:08:04.600 --> 00:08:07.690
token to send to your server.

00:08:07.690 --> 00:08:10.530
On the web, you do it a little
bit differently.

00:08:10.530 --> 00:08:15.126
You start with the call
back from the sign in.

00:08:15.126 --> 00:08:19.380
And in your auth result, you can
get both the ID token and

00:08:19.380 --> 00:08:21.460
the access token as strings.

00:08:21.460 --> 00:08:23.670
And you can send those to
your server as well.

00:08:23.670 --> 00:08:25.440
Web is most likely the one
where you're going to

00:08:25.440 --> 00:08:26.280
use the code flow.

00:08:26.280 --> 00:08:28.540
So if you can help
it, you probably

00:08:28.540 --> 00:08:31.090
won't have to do this.

00:08:31.090 --> 00:08:35.940
On iOS, you get an access token
in the auth object from

00:08:35.940 --> 00:08:37.586
finished with auth.

00:08:37.586 --> 00:08:39.929
And you can send that string
to your server.

00:08:39.929 --> 00:08:43.270
This is the place you're most
likely to use these methods

00:08:43.270 --> 00:08:46.560
because we don't have an
authorization code available.

00:08:50.510 --> 00:08:52.180
So why do we want to
verify this tokens?

00:08:52.180 --> 00:08:54.760
Why is that important?

00:08:54.760 --> 00:08:57.590
YANIV YAAKUBOVICH: Well, there
are two main cases.

00:08:57.590 --> 00:09:00.080
One is when you have
an invalid token.

00:09:00.080 --> 00:09:04.480
Either the token expired or the
token is from an app that

00:09:04.480 --> 00:09:08.540
is not really your app, or when
you have a bad client.

00:09:08.540 --> 00:09:09.880
You want to give an
example for that?

00:09:09.880 --> 00:09:11.870
CHRIS CARTLAND: Yeah, so a bad
client would be like if you

00:09:11.870 --> 00:09:15.215
have an attacker who gets users
the sign in to their app

00:09:15.215 --> 00:09:17.790
and gets some to hit
the consent screen.

00:09:17.790 --> 00:09:22.260
That person, that developer,
could send tokens and make

00:09:22.260 --> 00:09:24.810
requests to your server.

00:09:24.810 --> 00:09:25.950
And they would be real tokens.

00:09:25.950 --> 00:09:27.950
They would actually be
issued by Google.

00:09:27.950 --> 00:09:30.460
So just check to make sure
that they are real.

00:09:30.460 --> 00:09:34.260
And then check to see what user
was attached to that.

00:09:34.260 --> 00:09:37.430
You may give an attacker access
to a user's information

00:09:37.430 --> 00:09:39.720
even though that user never
signed into your app.

00:09:39.720 --> 00:09:40.730
YANIV YAAKUBOVICH: And that's
the reason that you're

00:09:40.730 --> 00:09:43.090
verifying that this token will
run for your app based

00:09:43.090 --> 00:09:43.840
on your client ID.

00:09:43.840 --> 00:09:44.330
CHRIS CARTLAND: Absolutely.

00:09:44.330 --> 00:09:46.670
So it's very critical that you
check to make sure that this

00:09:46.670 --> 00:09:49.220
token for your app and not just

00:09:49.220 --> 00:09:51.850
someone's app on the internet.

00:09:51.850 --> 00:09:54.330
YANIV YAAKUBOVICH: Right.

00:09:54.330 --> 00:09:54.960
CHRIS CARTLAND: So how
we're going to do

00:09:54.960 --> 00:09:56.390
this is do two things.

00:09:56.390 --> 00:09:58.130
First, we check to make
sure that the

00:09:58.130 --> 00:10:00.650
tokens are made by Google.

00:10:00.650 --> 00:10:02.000
YANIV YAAKUBOVICH: And then you
want to check that these

00:10:02.000 --> 00:10:04.400
tokens are meant for your
app using the client ID.

00:10:04.400 --> 00:10:06.300
And you can set the client
ID and verify

00:10:06.300 --> 00:10:08.540
it in the dev console.

00:10:08.540 --> 00:10:10.350
CHRIS CARTLAND: So yeah, in the
Google API console when

00:10:10.350 --> 00:10:13.780
you set up your project you will
create a web client ID.

00:10:13.780 --> 00:10:17.640
And so depending on what type
of token you're sending, you

00:10:17.640 --> 00:10:19.845
have to make sure that the
client ID for that token is

00:10:19.845 --> 00:10:21.650
the one that you're checking
on the server.

00:10:21.650 --> 00:10:23.260
YANIV YAAKUBOVICH: And you're
most likely to have a

00:10:23.260 --> 00:10:25.750
different client ID for
each of your apps.

00:10:25.750 --> 00:10:28.460
So for your Android app, you'll
have one client ID,

00:10:28.460 --> 00:10:31.630
another one for your desktop
app, and another for your iOS.

00:10:31.630 --> 00:10:34.800
CHRIS CARTLAND: That's
correct.

00:10:34.800 --> 00:10:36.450
So depending on which token
you have, you have to do

00:10:36.450 --> 00:10:37.940
slightly different steps.

00:10:37.940 --> 00:10:40.570
Let's start with the ID token.

00:10:40.570 --> 00:10:41.600
First, we're going to
check to make sure

00:10:41.600 --> 00:10:42.845
it's issued by Google.

00:10:42.845 --> 00:10:44.760
So how do we do that?

00:10:44.760 --> 00:10:46.100
YANIV YAAKUBOVICH: Well, you
check the signature using the

00:10:46.100 --> 00:10:46.900
Google API.

00:10:46.900 --> 00:10:50.600
And we'll show you the
code that does it.

00:10:50.600 --> 00:10:52.800
And then you do the same
for access token.

00:10:52.800 --> 00:10:54.930
You call the token in for API.

00:10:54.930 --> 00:10:57.570
The second step would be to
check your client ID.

00:10:57.570 --> 00:11:00.470
You compare the client ID with
the token that you just read

00:11:00.470 --> 00:11:01.540
on the ID token.

00:11:01.540 --> 00:11:05.120
And again, you do it with the
token API response and the

00:11:05.120 --> 00:11:08.720
token info response to verify
the access token.

00:11:08.720 --> 00:11:09.970
CHRIS CARTLAND: Exactly.

00:11:11.910 --> 00:11:14.710
YANIV YAAKUBOVICH: Step number
one, number two are essential

00:11:14.710 --> 00:11:16.060
to verify the tokens.

00:11:16.060 --> 00:11:18.910
And step three is only the stuff
that we're using for

00:11:18.910 --> 00:11:20.040
this example.

00:11:20.040 --> 00:11:23.450
You can use any other step that
is relevant for your app

00:11:23.450 --> 00:11:26.180
at this stage.

00:11:26.180 --> 00:11:28.330
And we'll show you just
one of those examples.

00:11:28.330 --> 00:11:28.830
CHRIS CARTLAND: Exactly.

00:11:28.830 --> 00:11:31.370
So we're going to show you the
first two steps to make sure

00:11:31.370 --> 00:11:33.340
that it's verified.

00:11:33.340 --> 00:11:34.880
And then we're going to also
get the user ID, because

00:11:34.880 --> 00:11:36.660
that's a useful thing for
your client to know.

00:11:36.660 --> 00:11:40.270
Once you've authenticated with
your server, now your client

00:11:40.270 --> 00:11:42.230
will know who the user is.

00:11:42.230 --> 00:11:45.600
YANIV YAAKUBOVICH: Now do you
want to repeat, for those who

00:11:45.600 --> 00:11:49.090
didn't hear us, when do you
need to check ID token and

00:11:49.090 --> 00:11:49.610
access token?

00:11:49.610 --> 00:11:52.420
Do you need to do it every time
that you call the API or

00:11:52.420 --> 00:11:53.570
per session?

00:11:53.570 --> 00:11:54.440
CHRIS CARTLAND: Yeah, yeah.

00:11:54.440 --> 00:11:57.790
So the first time you make a
request from that client, you

00:11:57.790 --> 00:12:00.500
always need to check
it in some way.

00:12:00.500 --> 00:12:03.120
So if you've done an
authorization code, that is

00:12:03.120 --> 00:12:06.860
your first connection to
authenticate between your

00:12:06.860 --> 00:12:09.520
client and your server.

00:12:09.520 --> 00:12:11.670
You may not have that.

00:12:11.670 --> 00:12:14.270
So again, the first time you
send an ID token or access

00:12:14.270 --> 00:12:17.260
token, you need to do that.

00:12:17.260 --> 00:12:20.490
Every time that you get a new ID
token or access token from

00:12:20.490 --> 00:12:23.460
your client that you can't
trust, you need to make sure

00:12:23.460 --> 00:12:25.270
that you verify it.

00:12:25.270 --> 00:12:28.400
If you have the option, though,
you should try and

00:12:28.400 --> 00:12:30.720
authenticate a session, though,
so you don't have to

00:12:30.720 --> 00:12:34.010
do this check for every request
that comes in from

00:12:34.010 --> 00:12:34.720
your clients.

00:12:34.720 --> 00:12:37.970
YANIV YAAKUBOVICH: So ideally
you'll do this check once you

00:12:37.970 --> 00:12:38.880
start a session.

00:12:38.880 --> 00:12:43.010
As long as the session is alive,
you'll assume that

00:12:43.010 --> 00:12:46.320
these steps, these tokens are
already valid, and you

00:12:46.320 --> 00:12:48.010
continue without checking
it again.

00:12:48.010 --> 00:12:50.380
CHRIS CARTLAND: Yeah, and if the
session is already valid

00:12:50.380 --> 00:12:54.090
you probably don't even need
to send the ID token or the

00:12:54.090 --> 00:12:56.400
access token again, because
you already know who is

00:12:56.400 --> 00:12:57.650
on the other end.

00:13:00.520 --> 00:13:01.670
So great, let's look
at some code.

00:13:01.670 --> 00:13:05.080
We have samples available
in five languages.

00:13:05.080 --> 00:13:08.730
We're going to look at GitHub
before PHP today.

00:13:08.730 --> 00:13:12.720
But you can pick your favorite
language and see how it works.

00:13:12.720 --> 00:13:14.420
The logic is the same
in all of them.

00:13:14.420 --> 00:13:17.850
So you'll even get the same
responses in your client apps.

00:13:24.580 --> 00:13:30.510
So first on Google+, we have
this G+ verify token PHP.

00:13:30.510 --> 00:13:33.140
It looks very similar
to our Quick Starts.

00:13:33.140 --> 00:13:36.530
So if you haven't done that yet,
you should do the Quick

00:13:36.530 --> 00:13:38.920
Start first, because we think
that's the one that you're

00:13:38.920 --> 00:13:40.320
going to need to use.

00:13:40.320 --> 00:13:43.140
YANIV YAAKUBOVICH: They're
fairly simple, very easy to

00:13:43.140 --> 00:13:45.600
integrate, very easy to follow
the examples that we have over

00:13:45.600 --> 00:13:49.580
there with regard to allow
you to spend less time on

00:13:49.580 --> 00:13:52.340
developing for our platform and
most time on developing

00:13:52.340 --> 00:13:53.250
your actual app.

00:13:53.250 --> 00:13:55.440
CHRIS CARTLAND: Exactly.

00:13:55.440 --> 00:13:57.970
So the relevant piece for
verifying tokens in this

00:13:57.970 --> 00:14:00.000
sample is in verify.php.

00:14:00.000 --> 00:14:02.830
The files are named similarly
in the other

00:14:02.830 --> 00:14:04.080
languages as well.

00:14:07.060 --> 00:14:08.310
Great.

00:14:10.480 --> 00:14:13.900
So this is very similar, again,
to the Quick Starts.

00:14:13.900 --> 00:14:17.990
The main difference is that we
have an endpoint slash verify.

00:14:17.990 --> 00:14:22.380
So the client, which when we run
the sample is the web app,

00:14:22.380 --> 00:14:27.570
is going to send an ID token and
an access token to local

00:14:27.570 --> 00:14:30.000
host slash verify.

00:14:30.000 --> 00:14:33.150
And we're going to make sure
that if there's an access

00:14:33.150 --> 00:14:36.120
token, we're going to make
sure that it's real.

00:14:36.120 --> 00:14:38.270
And we're going to make sure
it's for your app.

00:14:38.270 --> 00:14:39.480
And then we're going to
look at the access--

00:14:39.480 --> 00:14:42.150
sorry, I said the wrong one.

00:14:42.150 --> 00:14:43.470
YANIV YAAKUBOVICH: You
said the access.

00:14:43.470 --> 00:14:46.370
We'll show you how you do the
access token and the ID token.

00:14:46.370 --> 00:14:47.920
CHRIS CARTLAND: And it doesn't
matter which one is which.

00:14:47.920 --> 00:14:50.970
So we'll start by pulling the ID
token and the access token

00:14:50.970 --> 00:14:55.770
into strings in PHP.

00:14:55.770 --> 00:14:58.850
Everything that we do in the
sample is going to be returned

00:14:58.850 --> 00:14:59.710
in this array.

00:14:59.710 --> 00:15:01.820
So it's going to say token
status is going to have

00:15:01.820 --> 00:15:05.910
information about what
tokens it received.

00:15:05.910 --> 00:15:09.240
To start, we're going to have
the ID token status.

00:15:09.240 --> 00:15:11.980
And we're going to create an
empty array to hold that

00:15:11.980 --> 00:15:14.740
information.

00:15:14.740 --> 00:15:17.210
So we'll check the ID token
first, which we're only going

00:15:17.210 --> 00:15:19.340
to do if the client
sent an ID token.

00:15:22.510 --> 00:15:25.800
The real easy thing about
verifying the ID token in PHP

00:15:25.800 --> 00:15:28.020
is that the client library
does this for you.

00:15:28.020 --> 00:15:32.980
So we just call client, verify
ID token with the string,

00:15:32.980 --> 00:15:34.920
which is the ID token.

00:15:34.920 --> 00:15:37.005
And we pass the client
ID as well.

00:15:37.005 --> 00:15:38.360
YANIV YAAKUBOVICH: And the
client library should be

00:15:38.360 --> 00:15:41.590
available for you anytime
that you use our apps.

00:15:41.590 --> 00:15:44.010
If you start following the steps
on the Quick Start, or

00:15:44.010 --> 00:15:47.580
even the steps that we have in
GitHub, in one of them you'll

00:15:47.580 --> 00:15:48.790
download the client library.

00:15:48.790 --> 00:15:50.000
And you'll have it
for your server.

00:15:50.000 --> 00:15:50.720
CHRIS CARTLAND: Yeah.

00:15:50.720 --> 00:15:52.750
It's very straightforward.

00:15:52.750 --> 00:15:55.180
All of the complicated stuff
we've been talking about is

00:15:55.180 --> 00:15:58.480
taken care of in this
function call.

00:15:58.480 --> 00:16:01.500
And what you get back is a JSON
web token that contains

00:16:01.500 --> 00:16:03.200
information about the user.

00:16:03.200 --> 00:16:07.350
And we can get the Google+ user
ID from the payload under

00:16:07.350 --> 00:16:09.530
the field called sub, which
stands for subscriber.

00:16:12.140 --> 00:16:15.900
The rest of the code here just
takes that information and

00:16:15.900 --> 00:16:19.440
puts it into the ID status
object, which was going to get

00:16:19.440 --> 00:16:24.390
returned in the HTTP request.

00:16:24.390 --> 00:16:29.110
If the token is not valid,
we throw an exception.

00:16:29.110 --> 00:16:32.460
And we know that either the
token wasn't real or it wasn't

00:16:32.460 --> 00:16:34.290
issued for your app.

00:16:34.290 --> 00:16:37.425
One thing to keep in mind is
that this client ID needs to

00:16:37.425 --> 00:16:39.750
be the client ID that matches
the token that was sent.

00:16:39.750 --> 00:16:44.540
So if for some reason you have
multiple tokens that are

00:16:44.540 --> 00:16:46.370
registered coming from
different apps

00:16:46.370 --> 00:16:47.225
that are still yours--

00:16:47.225 --> 00:16:50.010
YANIV YAAKUBOVICH: Like an
Android app, an iOS app, and

00:16:50.010 --> 00:16:52.950
the desktop app, all different
apps that you're the publisher

00:16:52.950 --> 00:16:54.110
of all of those.

00:16:54.110 --> 00:16:55.880
CHRIS CARTLAND: Yeah, so if you
have the tokens that have

00:16:55.880 --> 00:16:57.900
different client ID registered,
then you may need

00:16:57.900 --> 00:17:01.140
to check this multiple times
to find which client ID

00:17:01.140 --> 00:17:02.390
matches your app.

00:17:06.260 --> 00:17:07.940
And then we would take
this information.

00:17:07.940 --> 00:17:09.220
And we're going to return
it in the token

00:17:09.220 --> 00:17:13.589
status when we return.

00:17:13.589 --> 00:17:13.859
That's great.

00:17:13.859 --> 00:17:14.510
That's the ID token.

00:17:14.510 --> 00:17:17.150
Let's take a look at the
access token now.

00:17:17.150 --> 00:17:21.065
Very similarly, we're going to
create an empty array to hold

00:17:21.065 --> 00:17:23.359
the information.

00:17:23.359 --> 00:17:27.089
If there is an access token,
then we're going to make a

00:17:27.089 --> 00:17:29.400
request to the token info API.

00:17:29.400 --> 00:17:30.870
So by itself, the string
doesn't contain any

00:17:30.870 --> 00:17:31.560
information.

00:17:31.560 --> 00:17:33.850
You have to use it to ask
Google for something.

00:17:33.850 --> 00:17:37.830
And the token info API is a very
easy way of finding out

00:17:37.830 --> 00:17:40.490
who the token is issued for.

00:17:40.490 --> 00:17:42.490
So we make this HTTP
request to Google.

00:17:44.990 --> 00:17:48.830
And we read the response back.

00:17:48.830 --> 00:17:51.530
If the token is real, which
means it is an access token

00:17:51.530 --> 00:17:53.510
issued by Google, then
you will get no

00:17:53.510 --> 00:17:54.920
errors in your response.

00:17:54.920 --> 00:17:56.450
If you do get an error, then
you know that you have an

00:17:56.450 --> 00:17:57.505
invalid access token.

00:17:57.505 --> 00:17:58.490
YANIV YAAKUBOVICH: And
here's the place to

00:17:58.490 --> 00:17:59.550
handle those errors.

00:17:59.550 --> 00:18:04.760
You can either show a message to
the user or simply drop the

00:18:04.760 --> 00:18:08.180
message from there to your log
and verify what happened and

00:18:08.180 --> 00:18:09.430
continue from there.

00:18:09.430 --> 00:18:10.680
CHRIS CARTLAND: Yep, exactly.

00:18:12.920 --> 00:18:16.657
Once you've verified that the
token is from Google and is

00:18:16.657 --> 00:18:19.690
real, you want to make sure that
it's issued to your app.

00:18:19.690 --> 00:18:21.280
So we check that client
ID much like we

00:18:21.280 --> 00:18:24.770
did with the ID token.

00:18:24.770 --> 00:18:28.120
Make sure that you do this step
so that you avoid the

00:18:28.120 --> 00:18:33.890
problem where someone else's
app sends their real access

00:18:33.890 --> 00:18:35.450
token to your server.

00:18:35.450 --> 00:18:38.480
You need to check this,
otherwise you're causing

00:18:38.480 --> 00:18:40.490
problems for you
and your users.

00:18:40.490 --> 00:18:43.560
YANIV YAAKUBOVICH: Or even the
case that one app that you

00:18:43.560 --> 00:18:48.420
developed overrides the other
app, and you do some mistakes.

00:18:48.420 --> 00:18:49.770
CHRIS CARTLAND: Yeah, so you
want to make sure that you

00:18:49.770 --> 00:18:53.970
expect the right tokens
from each client.

00:18:53.970 --> 00:18:57.260
And once you've checked those
two things, you can trust the

00:18:57.260 --> 00:18:59.740
access token is valid and
meant for your app.

00:18:59.740 --> 00:19:03.990
And in our response, we say
that it was a valid token.

00:19:03.990 --> 00:19:08.300
We can get the Google+ user ID
from the token info response,

00:19:08.300 --> 00:19:13.560
because every token that is
issued in our OAuth 2.0 code

00:19:13.560 --> 00:19:15.350
is issued for a specific user.

00:19:15.350 --> 00:19:17.770
And so once we get that back,
we know who the user is.

00:19:17.770 --> 00:19:20.270
And they've authenticated
that request.

00:19:20.270 --> 00:19:23.490
We're going to say that the
token valid, put that into a

00:19:23.490 --> 00:19:26.290
response, and return all that

00:19:26.290 --> 00:19:28.600
information in a JSON response.

00:19:28.600 --> 00:19:29.340
YANIV YAAKUBOVICH:
Pretty simple.

00:19:29.340 --> 00:19:30.280
CHRIS CARTLAND: Very good.

00:19:30.280 --> 00:19:30.800
YANIV YAAKUBOVICH:
How would it look

00:19:30.800 --> 00:19:32.080
like in other languages?

00:19:32.080 --> 00:19:32.980
CHRIS CARTLAND: It looks
almost the same

00:19:32.980 --> 00:19:33.730
in every other language.

00:19:33.730 --> 00:19:36.500
So we have the same structure.

00:19:36.500 --> 00:19:38.670
YANIV YAAKUBOVICH: Same logic,
just a few tweaks based on

00:19:38.670 --> 00:19:39.710
their language, correct?

00:19:39.710 --> 00:19:40.960
CHRIS CARTLAND: Yeah.

00:19:43.210 --> 00:19:46.330
You have to create an actual
object in Java.

00:19:46.330 --> 00:19:49.480
You have to use different
syntax, obviously, in

00:19:49.480 --> 00:19:50.300
different languages.

00:19:50.300 --> 00:19:53.040
But the logic and how you
accomplish each of these

00:19:53.040 --> 00:19:55.160
things is exactly the same.

00:19:55.160 --> 00:19:56.490
And of course, you can
look through the

00:19:56.490 --> 00:19:57.310
code to figure out.

00:19:57.310 --> 00:19:59.710
YANIV YAAKUBOVICH: And it's
all in our GitHub?

00:19:59.710 --> 00:20:00.240
CHRIS CARTLAND: Everything
that we've

00:20:00.240 --> 00:20:01.170
talked about is on GitHub.

00:20:01.170 --> 00:20:02.495
So you should try it
out for yourself.

00:20:07.130 --> 00:20:07.430
Great.

00:20:07.430 --> 00:20:09.010
So thank you for joining us.

00:20:09.010 --> 00:20:11.620
Today we talked about
verifying tokens.

00:20:11.620 --> 00:20:15.470
We talked about when to do it,
which is when you cannot use

00:20:15.470 --> 00:20:19.020
the code flow, or you need to
make requests, many requests,

00:20:19.020 --> 00:20:23.400
in a way that you don't have
an established session.

00:20:23.400 --> 00:20:25.710
We talked about why you need
to verify these tokens, so

00:20:25.710 --> 00:20:30.230
that people who you're expecting
to be authenticated

00:20:30.230 --> 00:20:32.630
are making real authenticated
requests.

00:20:32.630 --> 00:20:36.130
You also need to make sure that
attackers are not able to

00:20:36.130 --> 00:20:41.520
use their tokens to get access
to your users information.

00:20:41.520 --> 00:20:42.930
And we talked about
how to do that.

00:20:42.930 --> 00:20:47.640
We have all of the information
on GitHub for you to check it

00:20:47.640 --> 00:20:49.670
out and try it yourself.

00:20:49.670 --> 00:20:51.370
YANIV YAAKUBOVICH: Great.

00:20:51.370 --> 00:20:55.080
We'll give you the ability
to offer us questions.

00:20:55.080 --> 00:20:57.640
Well, I don't see any questions
right now on YouTube

00:20:57.640 --> 00:21:00.470
or G+ event page.

00:21:00.470 --> 00:21:03.110
If you have any questions, feel
free to add them to our

00:21:03.110 --> 00:21:04.620
event page.

00:21:04.620 --> 00:21:06.460
We can take them later
after this broadcast.

00:21:06.460 --> 00:21:07.320
CHRIS CARTLAND: Yeah.

00:21:07.320 --> 00:21:11.920
And as always, you can try out
our normal documentation for

00:21:11.920 --> 00:21:13.370
getting started with
Google+ sign in at

00:21:13.370 --> 00:21:16.140
developers.google.com/plus.

00:21:16.140 --> 00:21:19.520
You can ask us questions in
our Google+ Developers

00:21:19.520 --> 00:21:23.840
community or on Stack Overflow
with the tag Google+.

00:21:27.630 --> 00:21:31.130
We're happy to get feedback on
how well these things work for

00:21:31.130 --> 00:21:34.520
you, how easy they are, so that
we can continue to make

00:21:34.520 --> 00:21:36.630
things better for you.

00:21:36.630 --> 00:21:40.280
But I think that that's all
we have free today.

00:21:40.280 --> 00:21:42.820
Thank you so much for joining
us today, Yaniv.

00:21:42.820 --> 00:21:44.450
And we'd be happy to
have you back.

00:21:44.450 --> 00:21:44.780
YANIV YAAKUBOVICH: Great.

00:21:44.780 --> 00:21:45.380
Thank you very much.

00:21:45.380 --> 00:21:46.540
CHRIS CARTLAND: All right,
thank you, everyone.

00:21:46.540 --> 00:21:46.680
Bye.

00:21:46.680 --> 00:21:47.930
YANIV YAAKUBOVICH: Bye.

