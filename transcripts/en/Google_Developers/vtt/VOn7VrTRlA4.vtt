WEBVTT
Kind: captions
Language: en

00:00:00.760 --> 00:00:02.700
Passwords suck.

00:00:02.700 --> 00:00:05.680
But passwords on mobile
are even more painful.

00:00:05.680 --> 00:00:06.320
Hello.

00:00:06.320 --> 00:00:08.840
My name is Maya Ben Ari,
and I'm a product manager

00:00:08.840 --> 00:00:11.390
on the Android platform.

00:00:11.390 --> 00:00:13.620
Let me start with a quick story.

00:00:13.620 --> 00:00:16.050
I recently landed at the
San Francisco Airport

00:00:16.050 --> 00:00:18.735
after an exhausting
12-hour flight.

00:00:18.735 --> 00:00:21.690
At the baggage
claim, I had an idea.

00:00:21.690 --> 00:00:24.220
I can order food with
my phone so it would be

00:00:24.220 --> 00:00:26.760
waiting for me when I got home.

00:00:26.760 --> 00:00:28.770
I quickly downloaded
an app and found

00:00:28.770 --> 00:00:31.460
the perfect Chinese noodle dish.

00:00:31.460 --> 00:00:34.250
I was about to submit
an order, but then I

00:00:34.250 --> 00:00:37.510
couldn't remember my password.

00:00:37.510 --> 00:00:41.310
I knew there would be no
food for me when I got home.

00:00:41.310 --> 00:00:43.590
I wish it would just be easier.

00:00:43.590 --> 00:00:45.350
And with the new
Fingerprint Support,

00:00:45.350 --> 00:00:48.010
we're going to change that.

00:00:48.010 --> 00:00:50.750
With Android M, we're adding
native fingerprint support

00:00:50.750 --> 00:00:53.470
for enrollment
and device unlock.

00:00:53.470 --> 00:00:55.780
We believe that your
device should stay secure

00:00:55.780 --> 00:00:58.570
but would like to provide
you the best user experience

00:00:58.570 --> 00:01:01.350
without getting in your way.

00:01:01.350 --> 00:01:03.770
In addition, we're
introducing new APIs

00:01:03.770 --> 00:01:06.030
for Fingerprint and
Confirm Credential

00:01:06.030 --> 00:01:09.660
to accelerate payments
and sign-in operations.

00:01:09.660 --> 00:01:12.850
These APIs will allow you to
utilize your fingerprint sensor

00:01:12.850 --> 00:01:15.610
if one exists on the device.

00:01:15.610 --> 00:01:17.690
In the Google Play
Store, if a user

00:01:17.690 --> 00:01:20.220
has a registered
finger on her device,

00:01:20.220 --> 00:01:23.500
she can choose to use it
to confirm her purchases.

00:01:23.500 --> 00:01:25.400
When she wants to
buy a song, she

00:01:25.400 --> 00:01:27.830
can simply tap her
finger on the sensor

00:01:27.830 --> 00:01:30.150
to complete the purchase.

00:01:30.150 --> 00:01:33.050
This is all made possible with
the new FingerprintManager

00:01:33.050 --> 00:01:34.090
class.

00:01:34.090 --> 00:01:37.620
This simple API allows the app
to authenticate the user using

00:01:37.620 --> 00:01:39.480
his or her fingerprint.

00:01:39.480 --> 00:01:42.260
The app perceives an
authentication callback

00:01:42.260 --> 00:01:45.530
from the sensor once the
finger has been detected.

00:01:45.530 --> 00:01:49.370
The API will authenticate the
user each time the app requests

00:01:49.370 --> 00:01:51.580
an authentication call.

00:01:51.580 --> 00:01:54.630
The API utilizes KeyStore
to create and use

00:01:54.630 --> 00:01:57.280
cryptographic keys.

00:01:57.280 --> 00:02:00.120
FingerprintManager gives
full control of the UI

00:02:00.120 --> 00:02:01.640
to app developers.

00:02:01.640 --> 00:02:04.430
It allows apps to natively
integrate fingerprint

00:02:04.430 --> 00:02:06.580
into their flow.

00:02:06.580 --> 00:02:10.310
In this example, the target app
is using the fingerprint APIs

00:02:10.310 --> 00:02:13.380
to confirm users'
online purchases.

00:02:13.380 --> 00:02:16.090
A user can add
items to his cart.

00:02:16.090 --> 00:02:17.660
And when he's
ready to check out,

00:02:17.660 --> 00:02:20.980
he can confirm using his finger.

00:02:20.980 --> 00:02:24.560
For consistency across app,
we recommend using the Android

00:02:24.560 --> 00:02:27.650
Fingerprint Icon.

00:02:27.650 --> 00:02:30.270
To summarize, our
Fingerprint APIs

00:02:30.270 --> 00:02:32.650
can be used to accelerate
online payments

00:02:32.650 --> 00:02:34.660
and sign-in operations.

00:02:34.660 --> 00:02:38.030
It authenticates the user each
time the app requests to do so,

00:02:38.030 --> 00:02:40.200
while providing
the app developer

00:02:40.200 --> 00:02:42.820
full control over the UI.

00:02:42.820 --> 00:02:46.510
FingerprintManager is great for
authenticating per transaction.

00:02:46.510 --> 00:02:49.420
But what if you want to know how
recently the user has unlocked

00:02:49.420 --> 00:02:50.670
his phone?

00:02:50.670 --> 00:02:53.230
With our new Confirm
Credential API,

00:02:53.230 --> 00:02:54.910
you can leverage the
user's lock screen

00:02:54.910 --> 00:02:57.690
for authenticating the user.

00:02:57.690 --> 00:03:00.310
Here I have a phone
which has been modified

00:03:00.310 --> 00:03:02.630
to add a fingerprint sensor.

00:03:02.630 --> 00:03:05.540
To pay in-store with Android
Pay, the next generation

00:03:05.540 --> 00:03:08.460
of mobile payments, I'll tap
my phone on the terminal.

00:03:08.460 --> 00:03:10.270
[BEEPS]

00:03:10.270 --> 00:03:13.310
The app then checks when
I last unlocked my phone.

00:03:13.310 --> 00:03:15.190
If I unlocked in the
last five minutes,

00:03:15.190 --> 00:03:17.150
my payment is
considered secure, and I

00:03:17.150 --> 00:03:19.560
can continue with my purchase.

00:03:19.560 --> 00:03:21.720
However, if more
than five minutes

00:03:21.720 --> 00:03:24.180
passed since I last
unlocked, the app

00:03:24.180 --> 00:03:26.620
is not sure whether I'm
still around my device

00:03:26.620 --> 00:03:29.300
and will prompt to authenticate.

00:03:29.300 --> 00:03:33.340
Only after I solve my
lock screen challenge,

00:03:33.340 --> 00:03:35.470
I can complete my purchase.

00:03:35.470 --> 00:03:38.550
What is great is that Confirm
Credential, integrated

00:03:38.550 --> 00:03:43.850
with Android Pay, authenticates
me only when it needs to.

00:03:43.850 --> 00:03:45.870
Confirm Credential can
be further extended

00:03:45.870 --> 00:03:49.560
from device unlocking
to application locking.

00:03:49.560 --> 00:03:51.480
By leveraging the
user's lock screen

00:03:51.480 --> 00:03:54.400
combined with the timeout
policy since user last unlocked,

00:03:54.400 --> 00:03:57.360
the app can protect the
user's sensitive information,

00:03:57.360 --> 00:04:02.220
such as bank details
or credit information.

00:04:02.220 --> 00:04:05.995
For example, Credit Karma, a
credit and financial management

00:04:05.995 --> 00:04:09.350
app, provides the user
a choice to protect

00:04:09.350 --> 00:04:11.370
the app with her lock screen.

00:04:11.370 --> 00:04:14.110
Next time she opens the app
after solving her lock screen

00:04:14.110 --> 00:04:17.320
challenge, she can
quickly log into the app.

00:04:17.320 --> 00:04:21.079
To use Confirm Credential, call
ConfirmDeviceCredentialIntent

00:04:21.079 --> 00:04:23.730
in KeyguardManager.

00:04:23.730 --> 00:04:26.830
With Confirm Credential, an app
can create a cryptographic key

00:04:26.830 --> 00:04:30.830
and tie it to the device lock
screen with a timeout policy.

00:04:30.830 --> 00:04:33.400
For example, "Did the
user unlock the device

00:04:33.400 --> 00:04:35.130
in the last 10 minutes?"

00:04:35.130 --> 00:04:37.260
Note that developers
can choose what

00:04:37.260 --> 00:04:39.730
timeout they wish to require.

00:04:39.730 --> 00:04:42.340
When the app wants to
authenticate the user,

00:04:42.340 --> 00:04:46.430
it should first try to
use the cryptographic key.

00:04:46.430 --> 00:04:49.570
If that fails, the app
should prompt the user

00:04:49.570 --> 00:04:53.030
to authenticate using the
Confirm Credential API.

00:04:53.030 --> 00:04:56.330
This will automatically
unlock the cryptographic key.

00:04:56.330 --> 00:05:00.490
The key access timeouts are
synced across the system.

00:05:00.490 --> 00:05:03.460
This ensures that different
apps prompt to authenticate

00:05:03.460 --> 00:05:06.080
only when needed.

00:05:06.080 --> 00:05:08.870
To summarize, Confirm
Credential allows an app

00:05:08.870 --> 00:05:12.530
to create cryptographic keys
and tie those to lock screen.

00:05:12.530 --> 00:05:14.490
It allows the
developer to specify

00:05:14.490 --> 00:05:17.470
a timeout policy for key
access while syncing timeouts

00:05:17.470 --> 00:05:20.040
across the system.

00:05:20.040 --> 00:05:25.140
Our new APIs provide apps
both convenience and security.

00:05:25.140 --> 00:05:27.400
It is up to the app
developer to decide which

00:05:27.400 --> 00:05:30.560
solution fits him or her best.

00:05:30.560 --> 00:05:33.230
For example, while
the Fingerprint APIs

00:05:33.230 --> 00:05:35.420
might be better for
in-app purchases,

00:05:35.420 --> 00:05:37.060
the Confirm Credential
might be better

00:05:37.060 --> 00:05:40.610
for in-store purchases
or app-specific login.

00:05:40.610 --> 00:05:42.820
To try out the APIs,
please check out

00:05:42.820 --> 00:05:46.830
these resources which will walk
you through getting set up.

00:05:46.830 --> 00:05:49.200
And for the next
time, I hope someone

00:05:49.200 --> 00:05:51.220
can make it easier
for me to order food

00:05:51.220 --> 00:05:53.380
without entering any password.

00:05:53.380 --> 00:05:55.040
Thank you for watching.

00:05:55.040 --> 00:05:58.090
[MUSIC PLAYING]

