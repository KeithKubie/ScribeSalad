WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:04.740
As I said, fortunately, every file read is not

00:00:04.740 --> 00:00:07.790
going to result in going through so many hoops to

00:00:07.790 --> 00:00:10.550
get the data blocks. This is where caches come

00:00:10.550 --> 00:00:13.070
into play. So when you start with a filename and,

00:00:13.070 --> 00:00:16.219
and an offset on a client node, you look

00:00:16.219 --> 00:00:20.560
up the directory. And from that, you get an index

00:00:20.560 --> 00:00:23.008
and an offset. So, this is a data structure

00:00:23.008 --> 00:00:25.250
which is in the client memory, and once you get

00:00:25.250 --> 00:00:27.600
the index in the offset, and if this file

00:00:27.600 --> 00:00:31.730
has been accessed before, it's most likely in its own

00:00:31.730 --> 00:00:34.412
unique cache. This is a file cache of the

00:00:34.412 --> 00:00:38.710
file system, and if it is in your cache, then

00:00:38.710 --> 00:00:41.130
you get the data block. In other words, going

00:00:41.130 --> 00:00:43.580
from the file name to the data block that is

00:00:43.580 --> 00:00:47.090
associated with the file is all happening through the

00:00:47.090 --> 00:00:50.560
client memory because of local caching. And there's a fastest

00:00:50.560 --> 00:00:53.270
path for file access and hopefully there's a common

00:00:53.270 --> 00:00:56.450
case. Now it is possible that a file is

00:00:56.450 --> 00:01:00.690
shared. Or the same file is being read by

00:01:00.690 --> 00:01:02.830
different clients at different points in time, but in

00:01:02.830 --> 00:01:06.830
either case, there is a possibility that a particular

00:01:06.830 --> 00:01:10.110
file has been accessed by a client and therefore

00:01:10.110 --> 00:01:12.880
in the cache of that client, and so the

00:01:12.880 --> 00:01:16.390
next possibility is that you start with a directory

00:01:16.390 --> 00:01:18.930
You don't find it in you local cache. And if

00:01:18.930 --> 00:01:21.700
you don't find it in your local cache, then you have

00:01:21.700 --> 00:01:24.360
to go to the manager node in order to get

00:01:24.360 --> 00:01:27.430
a copy of the file. So this is where the manager

00:01:27.430 --> 00:01:30.950
map data structure, which is a replicated data structure, is

00:01:30.950 --> 00:01:34.370
available in the memory of every client and so given the

00:01:34.370 --> 00:01:36.920
index number and the offset. I can go and look

00:01:36.920 --> 00:01:41.390
up the manager map data structure and that tells me who's

00:01:41.390 --> 00:01:44.400
the manager that I have to contact to get

00:01:44.400 --> 00:01:47.940
this particular file. So this might involve a network

00:01:47.940 --> 00:01:51.650
cop because the manager node is different from the

00:01:51.650 --> 00:01:53.870
local node. Then I have to go to the manager

00:01:53.870 --> 00:01:56.310
node across a network. And when I get to

00:01:56.310 --> 00:01:59.610
the manager node, the manager node may say, oh

00:01:59.610 --> 00:02:03.390
you know what, this particular file, has been accessed

00:02:03.390 --> 00:02:06.650
by a different client. I know that because my metadata

00:02:06.650 --> 00:02:09.050
says that some of the client has got this,

00:02:09.050 --> 00:02:13.270
in their cache. So, the manager will tell the client

00:02:13.270 --> 00:02:16.200
that currently is holding a copy of the file

00:02:16.200 --> 00:02:19.740
in its cache. To please send the data over to

00:02:19.740 --> 00:02:22.720
the first guy that requested it. Now, the data

00:02:22.720 --> 00:02:26.280
that I requested is coming not from my local cache,

00:02:26.280 --> 00:02:29.110
but it is coming from the cache of a peer.

00:02:29.110 --> 00:02:31.760
And that's much better than going to the disk and

00:02:31.760 --> 00:02:34.020
putting it out of the disk, because network speeds

00:02:34.020 --> 00:02:38.240
are much faster than accessing the disk. So this is

00:02:38.240 --> 00:02:41.300
the second best path for file access. Sure, there is

00:02:41.300 --> 00:02:44.910
network communication involved here because, the first thing I that

00:02:44.910 --> 00:02:47.850
have to do is I have to hop over the

00:02:47.850 --> 00:02:50.730
network to get to the manager node if in fact

00:02:50.730 --> 00:02:53.630
I am not the manager node myself for this particular

00:02:53.630 --> 00:02:56.840
file that I'm looking for. That is a network hop.

00:02:56.840 --> 00:02:59.010
And there could be another network hop if the manager

00:02:59.010 --> 00:03:02.680
says, oh, this particular file is cached in a different

00:03:02.680 --> 00:03:06.060
node. In that case, there is another network hop to

00:03:06.060 --> 00:03:09.880
go to the client that currently containing that particular file.

00:03:09.880 --> 00:03:12.820
And once we get to that, there may be another

00:03:12.820 --> 00:03:15.540
network hop in order to send the data over to

00:03:15.540 --> 00:03:19.210
the requester. So potentially there could be three network hops

00:03:19.210 --> 00:03:22.100
in order to get The file that I'm looking for,

00:03:22.100 --> 00:03:28.870
but it could be less than that depending on the core location of the manager and

00:03:28.870 --> 00:03:30.680
the node that is requesting it or the

00:03:30.680 --> 00:03:33.930
manager and the node that contains a copy of

00:03:33.930 --> 00:03:39.800
that file itself. So this is the second best path for file access. But there is

00:03:39.800 --> 00:03:43.970
also the pathologically 'real long way' of accessing

00:03:43.970 --> 00:03:46.970
a particular file, and that path is shown here,

00:03:46.970 --> 00:03:49.720
using all of the data structures that I

00:03:49.720 --> 00:03:53.020
mentioned earlier that is available at the manager. You

00:03:53.020 --> 00:03:55.260
start with a file name, look up the

00:03:55.260 --> 00:03:58.740
directory, get the index number and the offset. It's

00:03:58.740 --> 00:04:00.770
not in your cache. You go to the

00:04:00.770 --> 00:04:04.770
manager by looking up the manager map data structure

00:04:04.770 --> 00:04:07.730
that's in my local memory. I go the

00:04:07.730 --> 00:04:12.920
manager and the manager then looks up its metadata

00:04:12.920 --> 00:04:15.650
for this file, finds that nobody has it in

00:04:15.650 --> 00:04:17.779
the cache So it has to pull it from the

00:04:17.779 --> 00:04:23.070
desk. If it has to pull it from the desk, then it has to look up its imap data

00:04:23.070 --> 00:04:28.410
structure, the imap data structure, and the stripe group map data structure

00:04:28.410 --> 00:04:33.310
in order to find out the location of the I node that

00:04:33.310 --> 00:04:38.330
corresponds to the log segment that I am looking for. That look up happens

00:04:38.330 --> 00:04:40.670
through the imap data structure, stripe group

00:04:40.670 --> 00:04:42.980
map data structure, then I can to the

00:04:42.980 --> 00:04:49.050
storage server and get the index node of the log segment ID for the requested

00:04:49.050 --> 00:04:55.560
data block of this client. Once I have that, then the manager has to look up the

00:04:55.560 --> 00:05:03.850
stripe group map to see what storage servers. Have this log segment striped,

00:05:03.850 --> 00:05:07.060
and out of that which storage server should I

00:05:07.060 --> 00:05:11.400
contact for the particular portion of the file that

00:05:11.400 --> 00:05:14.200
you're looking for? And that storage server will be

00:05:14.200 --> 00:05:17.070
contacted and that storage server is going to give the

00:05:17.070 --> 00:05:19.590
data block that is requested by the client. So

00:05:19.590 --> 00:05:22.494
you can see that in this long path, there

00:05:22.494 --> 00:05:26.130
is network hop as well as accessing the storage

00:05:26.130 --> 00:05:29.170
servers to pull the data blocks. It is possible that

00:05:29.170 --> 00:05:32.160
the index node for the log segment ID

00:05:32.160 --> 00:05:35.760
associated with this file has been previously accessed by

00:05:35.760 --> 00:05:38.330
this manager. In which case, it doesn't have to

00:05:38.330 --> 00:05:40.800
go to the storage server to get the Index

00:05:40.800 --> 00:05:43.820
node for the large segment, because it'll be present

00:05:43.820 --> 00:05:46.270
in the memory of the manager as part of

00:05:46.270 --> 00:05:50.370
its caching strategy. And therefore it can bypass these

00:05:50.370 --> 00:05:54.830
two network hops because directly from this strip group

00:05:54.830 --> 00:06:01.410
map it can figure out what the long segment ID is locally cached so that it can

00:06:01.410 --> 00:06:04.640
then go to this stripe group map data structure

00:06:04.640 --> 00:06:07.630
and figure out. Where on the disk the data

00:06:07.630 --> 00:06:11.490
blocks for that log segment is actually secured, so

00:06:11.490 --> 00:06:13.400
we might be able to get rid of at

00:06:13.400 --> 00:06:16.680
least two of these network hops if you're lucky

00:06:16.680 --> 00:06:20.580
and this particular log segment has been accessed before

00:06:20.580 --> 00:06:23.650
by this manager, it'll be in the memory

00:06:23.650 --> 00:06:26.460
of the manager. And therefore we can avoid these

00:06:26.460 --> 00:06:29.510
two network hubs. But the worst case scenario,

00:06:29.510 --> 00:06:32.290
if this particular log segment is never being accessed

00:06:32.290 --> 00:06:35.830
before then the long way to get to

00:06:35.830 --> 00:06:40.020
the data block that you're requesting is going through

00:06:40.020 --> 00:06:43.550
the data structures in the manager, network hub, storage

00:06:43.550 --> 00:06:45.630
look up, and get the data and give it

00:06:45.630 --> 00:06:46.260
to the client.

