WEBVTT
Kind: captions
Language: en

00:00:09.170 --> 00:00:14.410
MALE SPEAKER: Hello and welcome
to GDL-IL, GDL Israel.

00:00:14.410 --> 00:00:19.640
Today we are very lucky to have
with us Shai, who is an

00:00:19.640 --> 00:00:21.090
Angular expert.

00:00:21.090 --> 00:00:26.540
And Shai will basically talk
with us about his personal

00:00:26.540 --> 00:00:30.660
experience with Angular, and
what are a few of the cool

00:00:30.660 --> 00:00:32.900
things that you could
do with it if you

00:00:32.900 --> 00:00:35.380
are a front-end developer.

00:00:35.380 --> 00:00:39.490
We'll dive in to a few of the
strengths, and hopefully

00:00:39.490 --> 00:00:41.160
weaknesses, of Angular.

00:00:41.160 --> 00:00:45.410
And we'll see why it's so
exciting to work with, and how

00:00:45.410 --> 00:00:48.150
you could improve your best
practices and work with

00:00:48.150 --> 00:00:51.990
dependency injections, with
test-driven development, and

00:00:51.990 --> 00:00:56.130
other good old buzzwords that
actually work with Angular,

00:00:56.130 --> 00:01:00.570
and getting out there and
gaining more and more momentum

00:01:00.570 --> 00:01:03.410
in the community of front-end
developers.

00:01:03.410 --> 00:01:08.160
So without further ado, maybe
I'll get Shai to explain us

00:01:08.160 --> 00:01:12.740
first about himself and a short
bio of his experience.

00:01:12.740 --> 00:01:15.600
And then we'll dive into a
few slides about Angular.

00:01:15.600 --> 00:01:16.726
Sounds good?

00:01:16.726 --> 00:01:18.470
SHAI REZNIK: OK, so
hey, everyone.

00:01:18.470 --> 00:01:19.060
I'm Shai.

00:01:19.060 --> 00:01:24.230
I'm a front-end developer a
few years now, and a lean

00:01:24.230 --> 00:01:26.670
startupist.

00:01:26.670 --> 00:01:32.500
I've been managing two groups,
one called JavaScript Israel

00:01:32.500 --> 00:01:39.050
that gathers front-end
developers around JavaScript.

00:01:39.050 --> 00:01:41.510
And it's a meet-up group.

00:01:41.510 --> 00:01:44.800
And we do free event
to share knowledge.

00:01:44.800 --> 00:01:47.440
And another group that's called
Talking Lean, where we

00:01:47.440 --> 00:01:51.240
talk with entrepreneurs about
their lean startup

00:01:51.240 --> 00:01:53.430
experiences.

00:01:53.430 --> 00:01:55.820
MALE SPEAKER: We'll have
footnotes after the show with

00:01:55.820 --> 00:01:56.380
all the links.

00:01:56.380 --> 00:02:01.090
So don't bother to write
anything down.

00:02:01.090 --> 00:02:07.590
SHAI REZNIK: And yeah, I've been
working with Angular over

00:02:07.590 --> 00:02:08.979
one year now.

00:02:08.979 --> 00:02:16.470
And I transitioned from other
frameworks, like Ember and

00:02:16.470 --> 00:02:19.790
JavaScriptMVC, and
played around a

00:02:19.790 --> 00:02:21.210
little bit with Backbone.

00:02:21.210 --> 00:02:30.490
And I came from Flex, the Adobe
proprietary technology.

00:02:30.490 --> 00:02:34.430
So it was a hard transition back
to JavaScript, because I

00:02:34.430 --> 00:02:36.710
started with JavaScript before
the jQuery date.

00:02:39.770 --> 00:02:43.010
And then I found Angular.

00:02:43.010 --> 00:02:43.750
MALE SPEAKER: Luckily for you.

00:02:43.750 --> 00:02:44.850
SHAI REZNIK: Yeah.

00:02:44.850 --> 00:02:49.170
And after a lot of frustration,
and a lot of

00:02:49.170 --> 00:02:54.080
playing around with different
feature of every framework,

00:02:54.080 --> 00:02:56.090
Angular just hit home for me.

00:02:56.090 --> 00:02:59.430
And I never looked back since.

00:02:59.430 --> 00:03:00.880
MALE SPEAKER: Great.

00:03:00.880 --> 00:03:07.080
Maybe we'll just jump for the
few slides that you prepared.

00:03:07.080 --> 00:03:08.540
And we'll take it from there.

00:03:12.790 --> 00:03:13.440
So feel free.

00:03:13.440 --> 00:03:15.990
Now they are seeing the
screen, I could

00:03:15.990 --> 00:03:17.240
make it even larger.

00:03:21.840 --> 00:03:28.170
SHAI REZNIK: So these slides are
based on an introduction

00:03:28.170 --> 00:03:31.770
to Angular meet-up we had.

00:03:31.770 --> 00:03:38.180
It took about two
hours to give an

00:03:38.180 --> 00:03:39.390
introduction of Angular.

00:03:39.390 --> 00:03:40.520
You can find it.

00:03:40.520 --> 00:03:43.810
If you search for Angular Hebrew
on YouTube, you will

00:03:43.810 --> 00:03:45.750
find this lecture.

00:03:45.750 --> 00:03:49.990
And this is just a brief
overview of the framework.

00:03:49.990 --> 00:03:53.190
So a few facts.

00:03:53.190 --> 00:04:01.110
It's created by Misko Hevery,
one of your guys, in 2009.

00:04:01.110 --> 00:04:08.390
And after that, joined by other
developers from Google.

00:04:08.390 --> 00:04:14.600
And they formulated it
into a 1.0 version.

00:04:14.600 --> 00:04:19.570
It's unique features are
directives and dependency

00:04:19.570 --> 00:04:22.720
injection, which I explain
furthermore.

00:04:22.720 --> 00:04:26.750
It's powered by Google,
so it's a good thing.

00:04:26.750 --> 00:04:32.560
And I don't think it's GitHub
updated data now, because it

00:04:32.560 --> 00:04:33.940
was two months ago.

00:04:33.940 --> 00:04:42.740
But I think it's way
past Ember by now.

00:04:42.740 --> 00:04:47.730
It has a production stable
version, a lot of community

00:04:47.730 --> 00:04:52.500
around it, good community that
contributes every day.

00:04:52.500 --> 00:04:56.220
So it's a good sign that it's
healthy and keeps growing.

00:04:56.220 --> 00:05:00.550
It's used by a few
large companies--

00:05:00.550 --> 00:05:04.950
I personally consult to a very,
very large company now

00:05:04.950 --> 00:05:09.470
that migrates to JavaScript
from an older technology.

00:05:09.470 --> 00:05:13.770
And we use Angular to do it.

00:05:13.770 --> 00:05:18.120
And they have great videos,
not so great

00:05:18.120 --> 00:05:19.360
documentation now.

00:05:19.360 --> 00:05:24.190
But they're great videos of
Misko and his friends about

00:05:24.190 --> 00:05:24.890
the subject.

00:05:24.890 --> 00:05:30.850
So a high level overview of the
architecture of Angular is

00:05:30.850 --> 00:05:34.325
that you have the front--

00:05:34.325 --> 00:05:40.100
I like to think of it
like the human body.

00:05:40.100 --> 00:05:43.610
So you have the views which are
your sensors and voice,

00:05:43.610 --> 00:05:45.640
and how you look and such.

00:05:45.640 --> 00:05:51.380
And the views contain a unique
feature of Angular that's

00:05:51.380 --> 00:05:53.170
called directives.

00:05:53.170 --> 00:05:58.450
It also contains filters,
which can filter data.

00:05:58.450 --> 00:06:02.665
And they combine inside the
template, which is basically a

00:06:02.665 --> 00:06:05.080
plain old HTML.

00:06:05.080 --> 00:06:09.370
Each part of that template of
the HTML you can wrap it

00:06:09.370 --> 00:06:13.350
around with the controller,
which basically means that it

00:06:13.350 --> 00:06:20.040
is a mini-brain of that
particular element, which give

00:06:20.040 --> 00:06:25.540
it a link to the big application
which lies in your

00:06:25.540 --> 00:06:29.350
services layer, which is
the big [? overmind ?]

00:06:29.350 --> 00:06:32.450
brain that's knows all, and
knows how to connect to your

00:06:32.450 --> 00:06:33.930
server and such.

00:06:33.930 --> 00:06:40.210
And that way you have a clean,
nice architecture that you can

00:06:40.210 --> 00:06:42.540
plug stuff out and
put stuff in.

00:06:42.540 --> 00:06:45.790
And all you have to worry about
is your mini-controller,

00:06:45.790 --> 00:06:46.580
mini-brain.

00:06:46.580 --> 00:06:49.130
And it's supposed to be very,
very, very light.

00:06:49.130 --> 00:06:54.450
So a word about templates--

00:06:54.450 --> 00:07:00.300
so like I said, it's plain old
HTML, no special template

00:07:00.300 --> 00:07:03.690
language other than the
directive, which is a big, big

00:07:03.690 --> 00:07:05.680
part of Angular.

00:07:05.680 --> 00:07:09.680
And their job is to
be declarative.

00:07:09.680 --> 00:07:12.860
You declare what you
need on your HTML.

00:07:12.860 --> 00:07:14.390
And then the Angular
just knows how

00:07:14.390 --> 00:07:17.930
to tie things together.

00:07:17.930 --> 00:07:21.230
In your controller, no
imperative logic is allowed.

00:07:21.230 --> 00:07:25.760
And it's very good for content
security policy if you build

00:07:25.760 --> 00:07:29.820
Chrome extension and you have
this limitation with

00:07:29.820 --> 00:07:32.890
handlebars that I got
to using Ember.

00:07:32.890 --> 00:07:36.210
In Angular, you don't have
this limitation.

00:07:36.210 --> 00:07:38.430
MALE SPEAKER: One thing that I
might add is for developers

00:07:38.430 --> 00:07:44.410
that are following and wish to
see how it will be to develop

00:07:44.410 --> 00:07:48.220
to the web in the near future,
actually Angular give us today

00:07:48.220 --> 00:07:51.190
the ability to do so with
declaratives, because

00:07:51.190 --> 00:07:54.320
declaratives are quite similar
to what we are going to have

00:07:54.320 --> 00:07:56.280
in the near future as
web components.

00:07:56.280 --> 00:07:59.890
And it's a very, very cool way
to have encapsulation, which

00:07:59.890 --> 00:08:01.050
we're lacking in the web.

00:08:01.050 --> 00:08:02.340
I mean, we had it with iFrame.

00:08:02.340 --> 00:08:05.140
But it's not on the web, and
it's quite cumbersome.

00:08:05.140 --> 00:08:08.820
But here we have a really nice,
thin layer that enables

00:08:08.820 --> 00:08:10.950
us to have dynamic HTML.

00:08:10.950 --> 00:08:12.990
So it's more suited
to web apps.

00:08:12.990 --> 00:08:15.330
SHAI REZNIK: I heard Misko
talked [INAUDIBLE]

00:08:18.800 --> 00:08:23.530
a compliment that someone said
that the HTML6 is probably

00:08:23.530 --> 00:08:25.260
called AngularJS.

00:08:25.260 --> 00:08:26.510
MALE SPEAKER: Yeah,
that's a good one.

00:08:29.610 --> 00:08:30.390
SHAI REZNIK: Like [INAUDIBLE]

00:08:30.390 --> 00:08:35.604
said, it's in the HTML.

00:08:35.604 --> 00:08:40.370
It gives you a way to have a
domain-specific language, to

00:08:40.370 --> 00:08:45.350
call things not by
divs and such.

00:08:45.350 --> 00:08:49.710
But you can call it like you
want in your business, like

00:08:49.710 --> 00:08:53.220
thumbnails or a model window,
and stuff like that.

00:08:53.220 --> 00:08:54.830
You have components.

00:08:54.830 --> 00:08:57.380
And you have containers that
you can contain other

00:08:57.380 --> 00:09:00.640
directive or HTML inside them.

00:09:00.640 --> 00:09:02.840
It's really, really good for
a don't-repeat-yourself

00:09:02.840 --> 00:09:06.040
principle, a reuseability.

00:09:06.040 --> 00:09:08.640
And it's similar to MXML,
if someone here

00:09:08.640 --> 00:09:11.090
still works with Flex.

00:09:11.090 --> 00:09:16.860
So the way they communicate
is via the scope.

00:09:16.860 --> 00:09:20.330
So a scope is a really, really
interesting animal that

00:09:20.330 --> 00:09:28.560
Angular brought to the table,
because it's unique because it

00:09:28.560 --> 00:09:31.670
allows a clear separation
between the

00:09:31.670 --> 00:09:33.720
view and the logic.

00:09:33.720 --> 00:09:36.980
And the logic lies inside
the controller.

00:09:36.980 --> 00:09:41.360
And the view and the
declarations lie inside of the

00:09:41.360 --> 00:09:44.640
HTML and such on the template.

00:09:44.640 --> 00:09:48.090
And they communicate
using a special

00:09:48.090 --> 00:09:49.590
object called the scope.

00:09:49.590 --> 00:09:54.560
And everything you want to be
rendered on your view you

00:09:54.560 --> 00:09:56.180
attach to the scope.

00:09:56.180 --> 00:10:01.060
And you put an expression in
your template that knows how

00:10:01.060 --> 00:10:05.780
to watch the scope and
renders accordingly.

00:10:05.780 --> 00:10:10.420
And every logic that you want
to enable on your view, you

00:10:10.420 --> 00:10:13.580
just set a method.

00:10:13.580 --> 00:10:16.240
But it's not really a method,
more like an event.

00:10:16.240 --> 00:10:20.200
Because if you misspell the
name, you don't get an error.

00:10:20.200 --> 00:10:25.350
And it knows to correlate
to the method on that

00:10:25.350 --> 00:10:26.650
controller's scope.

00:10:26.650 --> 00:10:30.150
So it's an object that lies
inside the controller which

00:10:30.150 --> 00:10:37.050
Angular knows to set the
communication with the view

00:10:37.050 --> 00:10:38.620
automatically.

00:10:38.620 --> 00:10:40.770
MALE SPEAKER: I guess basically
the magic of the

00:10:40.770 --> 00:10:42.710
two-way data binding
is happening here.

00:10:42.710 --> 00:10:44.960
So that's exactly the
explanation that you give.

00:10:44.960 --> 00:10:48.340
And one of the nice ways that
you can see it-- and we'll

00:10:48.340 --> 00:10:50.290
have an example later on--

00:10:50.290 --> 00:10:53.910
is that this "magic," quote,
unquote, is done for you.

00:10:53.910 --> 00:10:56.650
So when we're saying something
like two-way data binding, the

00:10:56.650 --> 00:10:59.680
beauty here is that, one, if the
user is changing the data

00:10:59.680 --> 00:11:03.830
in the view, the controller
through the scope object will

00:11:03.830 --> 00:11:06.510
be updated automatically for
you, and vice versa.

00:11:06.510 --> 00:11:09.030
So everything that you will want
to drive from the service

00:11:09.030 --> 00:11:10.900
side to the client will
be done in this way.

00:11:10.900 --> 00:11:12.560
And we'll show you an
example of that.

00:11:12.560 --> 00:11:15.160
SHAI REZNIK: It saves you a lot,
a lot of boilerplate code

00:11:15.160 --> 00:11:20.440
that you used to do in jQuery,
playing with jQuery, when you

00:11:20.440 --> 00:11:24.750
attach callbacks and write the
specific DOM manipulation to

00:11:24.750 --> 00:11:28.490
do such and such when an
event occurs and such.

00:11:28.490 --> 00:11:31.270
And it reduces all
this boilerplate.

00:11:31.270 --> 00:11:34.380
So controllers are the
mini-brains, like I said.

00:11:34.380 --> 00:11:37.110
It's more like a view model
not a [INAUDIBLE] or

00:11:37.110 --> 00:11:40.500
presentation model, if you're
familiar with the old school

00:11:40.500 --> 00:11:41.850
MVC definition.

00:11:41.850 --> 00:11:44.600
You have a lot, a lot of MVC
definition nowadays.

00:11:44.600 --> 00:11:47.930
So it can get quite confusing.

00:11:47.930 --> 00:11:50.420
So it holds the special
scope object.

00:11:50.420 --> 00:11:54.380
And responsible for the view
data presentation state and

00:11:54.380 --> 00:11:55.590
reaction behavior.

00:11:55.590 --> 00:12:01.800
So it's also responsible for
setting initial values, like

00:12:01.800 --> 00:12:06.190
if you want default values to
be displayed on the start.

00:12:06.190 --> 00:12:08.960
And it's the glue between the
view and the services.

00:12:08.960 --> 00:12:16.320
So it's like a mediator between
the truth that we'll

00:12:16.320 --> 00:12:19.480
talk about in the service
layer and your template.

00:12:19.480 --> 00:12:25.340
So it's like you can filter
stuff out, depending on the

00:12:25.340 --> 00:12:26.590
specific control.

00:12:28.960 --> 00:12:31.820
So data binding we already
discussed.

00:12:31.820 --> 00:12:36.410
It's really, really helpful, and
saves you a lot, a lot, a

00:12:36.410 --> 00:12:41.080
lot of boilerplate code.

00:12:41.080 --> 00:12:46.480
The service layer, this is one
of the things that I really,

00:12:46.480 --> 00:12:50.430
really, really enjoyed when I
first learned about Angular.

00:12:50.430 --> 00:12:53.190
And I didn't really see it
as a standard in other

00:12:53.190 --> 00:12:54.080
frameworks.

00:12:54.080 --> 00:13:01.990
So when I practiced Ember or
JavaScriptMVC, I needed a

00:13:01.990 --> 00:13:12.060
place to hold stuff that aren't
really models and such,

00:13:12.060 --> 00:13:17.440
just different pieces of logic
that I need to encapsulate and

00:13:17.440 --> 00:13:22.980
to abstract in ways different
and to reserve the singular

00:13:22.980 --> 00:13:28.770
responsibility principle,
which if you know the

00:13:28.770 --> 00:13:30.730
[INAUDIBLE]

00:13:30.730 --> 00:13:32.980
talks about clean
code and such.

00:13:32.980 --> 00:13:37.290
So Angular introduces
it right inside the

00:13:37.290 --> 00:13:39.640
framework as services.

00:13:39.640 --> 00:13:45.660
So services are pieces of single
tones that Angular

00:13:45.660 --> 00:13:48.270
manages for you.

00:13:48.270 --> 00:13:52.760
And it allows you to inject them
to every single component

00:13:52.760 --> 00:14:01.200
that you need inside of Angular
in a really easy way.

00:14:01.200 --> 00:14:07.590
You just declare it by name on
the function that calls your

00:14:07.590 --> 00:14:10.010
controller or other
services and such.

00:14:10.010 --> 00:14:13.480
And you just get the
single tone.

00:14:13.480 --> 00:14:19.030
And it really, really, really
simplifies your architecture,

00:14:19.030 --> 00:14:24.510
because you don't need to
maintain all the different

00:14:24.510 --> 00:14:28.670
instances that lies around
your application.

00:14:28.670 --> 00:14:34.810
And it's also very, very good
for testing, because as you

00:14:34.810 --> 00:14:38.840
know, we should test our
application more.

00:14:38.840 --> 00:14:42.500
And we should need
more unit test.

00:14:42.500 --> 00:14:45.370
And we don't do it usually
because it's hard.

00:14:45.370 --> 00:14:49.190
It's hard in JavaScript still,
because even with all the

00:14:49.190 --> 00:14:55.530
frameworks, it's still not that
easy to set a proper unit

00:14:55.530 --> 00:14:58.390
test up, especially if you
don't have that the thing

00:14:58.390 --> 00:15:00.410
called dependency injection.

00:15:00.410 --> 00:15:01.292
You need to instantiate it.

00:15:01.292 --> 00:15:03.740
And you need to configurate.

00:15:03.740 --> 00:15:06.540
And it makes life really,
really hard.

00:15:06.540 --> 00:15:07.320
And you have deadlines.

00:15:07.320 --> 00:15:09.780
So you need to follow
the deadlines.

00:15:09.780 --> 00:15:12.420
And you just drop the test.

00:15:12.420 --> 00:15:15.560
So it makes your testing life
really, really easier.

00:15:15.560 --> 00:15:20.020
And it gives you the ability,
instead of inherit from other

00:15:20.020 --> 00:15:26.700
classes, like a typical
prototype inheritance, you get

00:15:26.700 --> 00:15:29.850
the ability to add
mixins of stuff.

00:15:29.850 --> 00:15:34.430
If you need an ability to call
a server, you just inject the

00:15:34.430 --> 00:15:37.780
HTTP service, or another custom
server that you created

00:15:37.780 --> 00:15:39.885
with an abstract
layer above it.

00:15:39.885 --> 00:15:44.940
You need a way to manipulate
some depth and some specific

00:15:44.940 --> 00:15:45.870
business logic.

00:15:45.870 --> 00:15:49.580
Just inject the specific
service and use it.

00:15:49.580 --> 00:15:51.170
And you have this ability.

00:15:51.170 --> 00:15:53.450
You don't need to inherit
from anyone.

00:15:53.450 --> 00:15:57.320
And it's really, really helpful,
and also protects

00:15:57.320 --> 00:15:59.740
[INAUDIBLE], because
you divide your

00:15:59.740 --> 00:16:02.970
code into small modules.

00:16:02.970 --> 00:16:06.850
So the modeling in Angular
is native JavaScript.

00:16:06.850 --> 00:16:09.020
You don't have a special
model object--

00:16:09.020 --> 00:16:13.380
just arrays and objects
and what you know.

00:16:13.380 --> 00:16:21.630
You have specific services for
communication with Ajax, and

00:16:21.630 --> 00:16:23.340
more optimized for REST.

00:16:23.340 --> 00:16:28.500
And probably we'll see an
example later, which is called

00:16:28.500 --> 00:16:33.820
the q, which basically is the
promise, HTTP, which wraps

00:16:33.820 --> 00:16:37.780
around a native Ajax
of JavaScript.

00:16:37.780 --> 00:16:39.660
And we have the resource, which

00:16:39.660 --> 00:16:43.560
communicates with REST resources.

00:16:43.560 --> 00:16:48.460
So Angular, in that sense, is
optimized for promises.

00:16:48.460 --> 00:16:55.150
So also, promises is a concept
that really also makes your

00:16:55.150 --> 00:17:00.400
asking life easier, because it
removes all the callback

00:17:00.400 --> 00:17:01.700
pyramid nightmare.

00:17:01.700 --> 00:17:05.609
And it allows you to
pass along objects

00:17:05.609 --> 00:17:07.950
and work with objects.

00:17:07.950 --> 00:17:14.119
But Angular still doesn't have
a proper solution for entity

00:17:14.119 --> 00:17:18.780
management, or persistent
management.

00:17:18.780 --> 00:17:22.640
Because if you have a difficult
service side model

00:17:22.640 --> 00:17:24.849
or complicated--

00:17:24.849 --> 00:17:25.510
sorry--

00:17:25.510 --> 00:17:30.220
so you don't have a really
good way now to handle it

00:17:30.220 --> 00:17:33.590
natively inside of Angular
to declare

00:17:33.590 --> 00:17:35.510
dependencies between entities.

00:17:35.510 --> 00:17:40.630
And you have a user which
[INAUDIBLE], and I don't know,

00:17:40.630 --> 00:17:43.320
have comments, and
blah-blah-blah.

00:17:43.320 --> 00:17:46.970
You don't have a really good
way to declare it and to

00:17:46.970 --> 00:17:48.280
manage it properly.

00:17:48.280 --> 00:17:51.450
So you have third party
libraries like [? with JS, ?]

00:17:51.450 --> 00:17:59.130
which as for now, I think,
it's probably the most

00:17:59.130 --> 00:18:02.510
comprehensive or the biggest
solution now.

00:18:02.510 --> 00:18:08.770
But still, I find it hard to
work if you don't have .net--

00:18:08.770 --> 00:18:10.490
MALE SPEAKER: [INAUDIBLE].

00:18:10.490 --> 00:18:11.610
SHAI REZNIK: No.

00:18:11.610 --> 00:18:14.210
Server, backend.

00:18:14.210 --> 00:18:20.630
And I still would love to see
more support for Java and

00:18:20.630 --> 00:18:23.465
other backends for better
integration.

00:18:26.130 --> 00:18:30.130
So dependency injection,
I already discussed.

00:18:30.130 --> 00:18:32.110
It works really, really good.

00:18:35.110 --> 00:18:37.820
You have a lot of helper
methods to declare your

00:18:37.820 --> 00:18:38.580
injectables.

00:18:38.580 --> 00:18:43.360
And Angular knows how to create
a provider for them.

00:18:43.360 --> 00:18:47.580
And the other topics we
already discussed.

00:18:47.580 --> 00:18:50.900
You have also the concept of
filters, which basically, in

00:18:50.900 --> 00:18:53.670
Angular, transforms input.

00:18:53.670 --> 00:18:55.030
It also sorts.

00:18:55.030 --> 00:18:59.570
It also filters stuff out.

00:18:59.570 --> 00:19:06.170
It transforms your input into
something, like plain text

00:19:06.170 --> 00:19:09.340
into uppercase and such.

00:19:09.340 --> 00:19:11.470
And [INAUDIBLE]

00:19:14.820 --> 00:19:20.610
that way that you can inject
inside of different templates,

00:19:20.610 --> 00:19:24.600
which aren't really supposed
to be inside a specific

00:19:24.600 --> 00:19:27.200
[INAUDIBLE].

00:19:27.200 --> 00:19:29.890
A good example for that
is localization.

00:19:29.890 --> 00:19:34.950
Localization, when you need to
render a text according to the

00:19:34.950 --> 00:19:37.460
locale that the application
is using.

00:19:37.460 --> 00:19:39.980
Filter is really, really,
really a good

00:19:39.980 --> 00:19:40.810
solution for that.

00:19:40.810 --> 00:19:43.350
It saves you a lot of code
and ins and outs, and

00:19:43.350 --> 00:19:44.750
blah-blah-blah.

00:19:44.750 --> 00:19:47.560
So this is about filters,
testing.

00:19:47.560 --> 00:19:52.630
I already mentioned about Misko
who came from a testing

00:19:52.630 --> 00:19:53.200
background.

00:19:53.200 --> 00:19:58.120
He has a lot of lectures
about the subject.

00:19:58.120 --> 00:20:01.210
He wrote it with testing
in mind.

00:20:01.210 --> 00:20:09.800
And they wrote an extension
above Jasmine, but with

00:20:09.800 --> 00:20:14.120
important Angular helpers that
gives you the ability to

00:20:14.120 --> 00:20:18.460
simulate the dependency
injection, and give you

00:20:18.460 --> 00:20:21.040
injection on the fly in your
test, if you need it.

00:20:21.040 --> 00:20:27.440
And you don't have to
instantiate anything and such.

00:20:27.440 --> 00:20:29.630
Also, I need to update
it, because it's

00:20:29.630 --> 00:20:31.600
not Testacular anymore.

00:20:31.600 --> 00:20:32.470
It's Karma.

00:20:32.470 --> 00:20:35.940
They finally changed
their name.

00:20:35.940 --> 00:20:40.740
And if somebody's interested
in the subject, you have a

00:20:40.740 --> 00:20:44.590
good resource and a very
wonderful site that's called

00:20:44.590 --> 00:20:50.590
Yearofmoo that is known for
its very, very long and

00:20:50.590 --> 00:20:53.800
thorough posts on different
subjects,

00:20:53.800 --> 00:20:56.420
and especially Angular.

00:20:56.420 --> 00:21:00.932
So testing, really easier than
any other framework--

00:21:00.932 --> 00:21:02.910
MALE SPEAKER: I think it's
one of maybe the

00:21:02.910 --> 00:21:04.630
strengths of Angular.

00:21:04.630 --> 00:21:10.590
And as we all know, usually
projects start low when timing

00:21:10.590 --> 00:21:13.860
the scope, but quite quickly
becoming larger and larger.

00:21:13.860 --> 00:21:15.940
And if you want to be on top of
things and make sure that

00:21:15.940 --> 00:21:20.130
you are able to move with them
quickly, testing is one the

00:21:20.130 --> 00:21:22.595
must-have things.

00:21:22.595 --> 00:21:23.845
That's result date.

00:21:27.540 --> 00:21:30.160
SHAI REZNIK: Really, really
brief, I won't get

00:21:30.160 --> 00:21:33.845
into it very deep.

00:21:36.870 --> 00:21:38.330
It's just my experience.

00:21:38.330 --> 00:21:41.590
It's not like a fact or
something like that.

00:21:41.590 --> 00:21:45.130
Why I found Angular so good.

00:21:45.130 --> 00:21:51.540
And you have an asterisk on the
side of Backbone because I

00:21:51.540 --> 00:21:55.430
didn't really use Backbone
that much.

00:21:55.430 --> 00:22:02.570
I only did a small POC just
to find out how it works.

00:22:02.570 --> 00:22:11.370
And so in case of the most
important features that I

00:22:11.370 --> 00:22:16.860
looked for in terms of stability
and reliability,

00:22:16.860 --> 00:22:23.610
clear structure, which Angular
was the only one that provided

00:22:23.610 --> 00:22:25.710
me the services, as I mentioned

00:22:25.710 --> 00:22:26.960
before, and the clear--

00:22:29.700 --> 00:22:35.160
it made be ask less questions
about which stuff goes where.

00:22:35.160 --> 00:22:37.080
Testing is also--

00:22:37.080 --> 00:22:39.570
I don't know how it
is with Backbone.

00:22:39.570 --> 00:22:40.750
I believe it's good.

00:22:40.750 --> 00:22:46.010
But with Ember, I had a lot
of headaches with it.

00:22:46.010 --> 00:22:50.760
Lazy people oriented, which is
my personal favorite, because

00:22:50.760 --> 00:22:53.880
I want to be as lazy as
possible, Angular really,

00:22:53.880 --> 00:22:55.660
really gives me that
with dependency

00:22:55.660 --> 00:22:58.110
injection and bindings.

00:22:58.110 --> 00:23:02.930
Which also Ember is more
towards this with their

00:23:02.930 --> 00:23:07.590
bindings and conventions
over configurations.

00:23:07.590 --> 00:23:11.500
A strong community, really,
really, really important.

00:23:11.500 --> 00:23:18.620
JavaScriptMVC, if anyone hear
this or listen to this and

00:23:18.620 --> 00:23:22.210
considers JavaScriptMVC,
don't.

00:23:22.210 --> 00:23:23.430
Learning curve.

00:23:23.430 --> 00:23:25.030
In terms of learning
curve, Backbone is

00:23:25.030 --> 00:23:25.820
really, really small.

00:23:25.820 --> 00:23:29.400
So it was really, really
simple to understand.

00:23:29.400 --> 00:23:31.200
But it's really small.

00:23:31.200 --> 00:23:33.350
You don't get a lot of the
stuff that you get with

00:23:33.350 --> 00:23:33.840
Angular and Ember.

00:23:33.840 --> 00:23:38.730
You need to plug in stuff from
third party libraries.

00:23:38.730 --> 00:23:40.280
And you have a million
you have to

00:23:40.280 --> 00:23:41.540
choose from every where.

00:23:41.540 --> 00:23:48.620
So Angular gives you that
really, really ease.

00:23:54.100 --> 00:23:59.300
But the learning curve
of Angular and Ember

00:23:59.300 --> 00:24:01.420
is still not optimal.

00:24:01.420 --> 00:24:06.100
Because Angular, if you want
to do basic stuff, simple

00:24:06.100 --> 00:24:10.440
stuff, render something on the
screen and have two-way

00:24:10.440 --> 00:24:17.190
binding, all the examples on
the main site of their

00:24:17.190 --> 00:24:19.100
website, it's really,
really easy.

00:24:19.100 --> 00:24:23.300
But when you start and want
to create more complicated

00:24:23.300 --> 00:24:28.100
directives or want to handle
other stuff, you need to

00:24:28.100 --> 00:24:31.200
really understand what is the
life cycle and how the

00:24:31.200 --> 00:24:37.490
workflow works, and need to
grasp really, really key stuff

00:24:37.490 --> 00:24:41.640
that the documentation
isn't really good at.

00:24:41.640 --> 00:24:46.870
And in those terms, I
think it's worth it.

00:24:46.870 --> 00:24:52.120
It's worth the right, if
you consider Angular.

00:24:52.120 --> 00:24:55.510
But you need to give it its
time, really give it

00:24:55.510 --> 00:24:56.960
time to sink in.

00:24:56.960 --> 00:24:59.880
And once you get it, you run.

00:24:59.880 --> 00:25:01.460
You run forward.

00:25:01.460 --> 00:25:09.670
And you just have all the
tools that the strong

00:25:09.670 --> 00:25:10.850
framework can give you.

00:25:10.850 --> 00:25:13.880
So in terms of the other stuff,
expandability and play

00:25:13.880 --> 00:25:18.960
well with others, I found
Angular really good.

00:25:18.960 --> 00:25:22.560
Size also is not that
meaningful.

00:25:22.560 --> 00:25:29.670
And performance, although it's
debatable in comparison with

00:25:29.670 --> 00:25:35.950
Ember performance, they're
really improving stuff with

00:25:35.950 --> 00:25:37.790
every version.

00:25:37.790 --> 00:25:40.470
So that's it, a brief
overview.

00:25:40.470 --> 00:25:41.240
MALE SPEAKER: Excellent.

00:25:41.240 --> 00:25:46.670
And maybe we could definitely
get the screenshot out.

00:25:46.670 --> 00:25:50.510
Do we want to share--

00:25:50.510 --> 00:25:51.490
let's see here.

00:25:51.490 --> 00:25:56.705
We have two nice, quick examples
that we could run on

00:25:56.705 --> 00:26:00.998
the code and just show stuff.

00:26:00.998 --> 00:26:02.180
SHAI REZNIK: You want
to share it?

00:26:02.180 --> 00:26:03.050
MALE SPEAKER: Yes.

00:26:03.050 --> 00:26:06.000
Let's share this screen again.

00:26:06.000 --> 00:26:08.650
And it's this one.

00:26:11.336 --> 00:26:12.830
Let me try and make
it even bigger.

00:26:18.530 --> 00:26:20.420
So please, feel free.

00:26:20.420 --> 00:26:26.900
SHAI REZNIK: So we can see a
really, really basic example

00:26:26.900 --> 00:26:30.180
of the resource service
as I mentioned before.

00:26:30.180 --> 00:26:37.740
So its job is basically to wrap
around a resource, a REST

00:26:37.740 --> 00:26:45.350
URI, and to give you a simple
way to handle it

00:26:45.350 --> 00:26:47.570
object-orientedly.

00:26:47.570 --> 00:26:53.360
So you define your URI.

00:26:53.360 --> 00:26:56.795
And you get your different
method.

00:26:56.795 --> 00:27:00.600
You get four or five
methods for free.

00:27:00.600 --> 00:27:04.610
You get Query and Post
and Sort and

00:27:04.610 --> 00:27:06.660
Create and Get and such.

00:27:06.660 --> 00:27:08.290
You can read more.

00:27:08.290 --> 00:27:11.135
We can open also the
documentation.

00:27:11.135 --> 00:27:14.380
MALE SPEAKER: Yeah, we'll have
the link in the footnotes.

00:27:14.380 --> 00:27:15.855
SHAI REZNIK: And then
you get an object.

00:27:15.855 --> 00:27:20.090
Once you get that object,
you can perform

00:27:20.090 --> 00:27:22.630
different actions on it.

00:27:22.630 --> 00:27:30.370
And you get a lot of work done
by Angular in the background

00:27:30.370 --> 00:27:38.415
that goes to the server, fetch
the JSON, the response.

00:27:38.415 --> 00:27:39.610
MALE SPEAKER: Building the
object in the scope.

00:27:39.610 --> 00:27:40.050
SHAI REZNIK: Yeah.

00:27:40.050 --> 00:27:43.620
Building the object
in the scope.

00:27:43.620 --> 00:27:45.550
And then it creates--

00:27:45.550 --> 00:27:50.650
in every object that you get,
you get an instance of that

00:27:50.650 --> 00:27:52.790
research that you defined.

00:27:52.790 --> 00:27:56.550
And you have the ability to
perform actions like update

00:27:56.550 --> 00:27:58.200
the JavaScript object.

00:27:58.200 --> 00:28:01.000
And you have a special
method that's called

00:28:01.000 --> 00:28:02.080
[? dollar-save. ?]

00:28:02.080 --> 00:28:02.800
And then you save.

00:28:02.800 --> 00:28:07.560
And it's also Angular from
behind the scenes, goes to the

00:28:07.560 --> 00:28:11.660
server, and updates what needs
to be updated and such.

00:28:11.660 --> 00:28:14.605
So this is just really,
really quick.

00:28:14.605 --> 00:28:20.280
It shows you a really, really
simple fiddle that shows you

00:28:20.280 --> 00:28:30.430
how you can search Twitter by
their public API using JSONP

00:28:30.430 --> 00:28:31.320
for the response.

00:28:31.320 --> 00:28:35.950
And you get the Twitter results
as a promise, like I

00:28:35.950 --> 00:28:37.380
mentioned before.

00:28:37.380 --> 00:28:40.860
And when you get it as a
promise, Angular knows how to

00:28:40.860 --> 00:28:44.410
render this promise
automatically, again.

00:28:44.410 --> 00:28:47.010
MALE SPEAKER: And it will show
the template that will take it

00:28:47.010 --> 00:28:48.540
and show you [INAUDIBLE].

00:28:48.540 --> 00:28:50.850
That's actually pretty cool.

00:28:50.850 --> 00:28:53.330
Maybe you take it from the top,
just to explain to the

00:28:53.330 --> 00:28:57.160
ones that never saw
an Angular app.

00:28:57.160 --> 00:28:59.670
The first time, we're just
declaring [INAUDIBLE].

00:28:59.670 --> 00:29:02.760
SHAI REZNIK: So you need to
pick your scope when you

00:29:02.760 --> 00:29:04.410
define an application.

00:29:04.410 --> 00:29:06.950
And usually it's on the HTML.

00:29:06.950 --> 00:29:09.230
But you can define it on
any element you want.

00:29:09.230 --> 00:29:13.940
And that element and boundwards
will be inside the

00:29:13.940 --> 00:29:14.930
Angular ward.

00:29:14.930 --> 00:29:19.740
So you give your application a
name, in this case Twitter.

00:29:19.740 --> 00:29:22.035
And you have the concept
of controllers,

00:29:22.035 --> 00:29:23.990
like I mentioned before.

00:29:23.990 --> 00:29:26.860
So you give your
control a name.

00:29:26.860 --> 00:29:30.690
And then here, they just
declare it as a global

00:29:30.690 --> 00:29:32.920
function, which Angular
knows how to pick up.

00:29:32.920 --> 00:29:34.790
But usually [INAUDIBLE]

00:29:38.210 --> 00:29:42.552
calling your application
[INAUDIBLE]

00:29:42.552 --> 00:29:44.050
Angular application.

00:29:44.050 --> 00:29:45.300
And [INAUDIBLE]

00:29:48.332 --> 00:29:56.800
once you declare it, you
have a reference.

00:29:56.800 --> 00:29:58.243
And you have helper methods.

00:29:58.243 --> 00:29:59.493
[INAUDIBLE]

00:30:02.430 --> 00:30:03.430
the controller method.

00:30:03.430 --> 00:30:05.010
And it's the same [INAUDIBLE]

00:30:09.330 --> 00:30:10.430
due to the [INAUDIBLE]

00:30:10.430 --> 00:30:10.745
controller.

00:30:10.745 --> 00:30:11.995
[INAUDIBLE]

00:30:17.450 --> 00:30:23.280
and not as a global function,
because this is polluting the

00:30:23.280 --> 00:30:23.900
global scope.

00:30:23.900 --> 00:30:25.410
MALE SPEAKER: But usually we'll
try to maybe encapsulate

00:30:25.410 --> 00:30:28.520
it in some global environment
that will include everything

00:30:28.520 --> 00:30:30.520
that we do in the app
itself, right?

00:30:30.520 --> 00:30:34.050
SHAI REZNIK: Yeah, you have the
option of also declaring

00:30:34.050 --> 00:30:36.810
it as a global scope variable.

00:30:36.810 --> 00:30:37.710
MALE SPEAKER: For
the app itself.

00:30:37.710 --> 00:30:39.940
SHAI REZNIK: For the app itself,
and then you can

00:30:39.940 --> 00:30:41.940
attach stuff to it.

00:30:41.940 --> 00:30:46.350
I personally prefer the
whole longer version.

00:30:46.350 --> 00:30:52.360
Also, they pollute the global
scope as less as possible.

00:30:52.360 --> 00:30:56.820
So here, once you declare
the [INAUDIBLE]

00:30:56.820 --> 00:31:04.590
controller, you get a wrapping
around your div here by that

00:31:04.590 --> 00:31:05.560
controller.

00:31:05.560 --> 00:31:15.160
And each variable or reference
that you defined under this

00:31:15.160 --> 00:31:21.210
div, under this HTML elemental
or DOM element, get

00:31:21.210 --> 00:31:27.140
automatically watch expression
that watches this scope object

00:31:27.140 --> 00:31:28.540
of your controller.

00:31:28.540 --> 00:31:36.260
And here is the example that
once you get the Twitter

00:31:36.260 --> 00:31:41.410
results, you get it inside of
Twitter result and inside of

00:31:41.410 --> 00:31:43.120
result property.

00:31:43.120 --> 00:31:46.620
And once you get the result
property, which basically is

00:31:46.620 --> 00:31:52.120
an array, you get free Angular
directive, called Entry

00:31:52.120 --> 00:32:00.850
Repeat, which lets you declare
just a DOM element that you

00:32:00.850 --> 00:32:02.210
want to be repeated.

00:32:02.210 --> 00:32:04.990
And you get an instant scope.

00:32:04.990 --> 00:32:09.510
So inside of that element, you
get a reference to the

00:32:09.510 --> 00:32:12.500
specific instance of
the iteration.

00:32:12.500 --> 00:32:17.670
And that way, in each iteration,
it will render the

00:32:17.670 --> 00:32:20.280
different texts that came
back from Twitter,

00:32:20.280 --> 00:32:22.130
here in this example.

00:32:22.130 --> 00:32:31.390
So you get iteration over the
Twitter results, which once

00:32:31.390 --> 00:32:34.890
you called Twitter results, it
came back with an object, with

00:32:34.890 --> 00:32:37.440
a result property, which
is an array.

00:32:37.440 --> 00:32:41.030
And then it's really, really
as simple as that, just

00:32:41.030 --> 00:32:46.580
declaring a watch expression
that watches your specific

00:32:46.580 --> 00:32:48.215
instance of the--

00:32:48.215 --> 00:32:50.760
MALE SPEAKER: It's tracing
the array, right?

00:32:50.760 --> 00:32:51.270
SHAI REZNIK: What?

00:32:51.270 --> 00:32:53.460
MALE SPEAKER: So basically we
got here a free iterator that

00:32:53.460 --> 00:32:57.820
will go over the array and will
render each sale as a

00:32:57.820 --> 00:32:58.050
tweet.text.

00:32:58.050 --> 00:33:01.210
And we could put tweet dot time
and date, whatever, all

00:33:01.210 --> 00:33:03.230
the other parameters that
we have here for free.

00:33:03.230 --> 00:33:05.860
So that's basically what Entry
Repeat give us, right?

00:33:05.860 --> 00:33:06.200
SHAI REZNIK: Yeah.

00:33:06.200 --> 00:33:11.180
It's specific for each instance,
and just common

00:33:11.180 --> 00:33:14.630
behavior that you want
to render arrays in.

00:33:14.630 --> 00:33:16.560
So you get everything.

00:33:16.560 --> 00:33:19.210
It's really look how
much lines of code.

00:33:19.210 --> 00:33:20.990
It's really, really,
really simple.

00:33:20.990 --> 00:33:23.870
And you just can search for--

00:33:23.870 --> 00:33:24.310
I don't know.

00:33:24.310 --> 00:33:24.820
MALE SPEAKER: Angular.

00:33:24.820 --> 00:33:26.620
SHAI REZNIK: Angular.

00:33:26.620 --> 00:33:30.920
And once it come back, it
gives you the results.

00:33:30.920 --> 00:33:33.360
Really, really, really
simple, really easy.

00:33:33.360 --> 00:33:36.110
You get it with your
ngResource.

00:33:36.110 --> 00:33:36.510
MALE SPEAKER: Great.

00:33:36.510 --> 00:33:41.650
So I think in matters of time,
we covered most of the things

00:33:41.650 --> 00:33:43.330
that we wanted.

00:33:43.330 --> 00:33:46.100
If there are any questions
now on the chat or

00:33:46.100 --> 00:33:47.900
just live, feel free.

00:33:47.900 --> 00:33:49.410
And if not, we'll wrap it up.

00:33:49.410 --> 00:33:52.510
And hopefully you'll be able to
join us in the future to do

00:33:52.510 --> 00:33:55.310
a followup, and dive deep
to other subjects

00:33:55.310 --> 00:33:56.510
that we cover briefly.

00:33:56.510 --> 00:33:56.860
SHAI REZNIK: Of course.

00:33:56.860 --> 00:33:57.680
I'll be happy to.

00:33:57.680 --> 00:33:58.640
MALE SPEAKER: Excellent.

00:33:58.640 --> 00:34:00.100
So do we have any questions?

00:34:00.100 --> 00:34:02.220
If you wish, this is the
time to ask them.

00:34:05.850 --> 00:34:06.520
Cool.

00:34:06.520 --> 00:34:08.610
So thank you very much
for being with us.

00:34:08.610 --> 00:34:11.880
And we'll see you next
week on Wednesday,

00:34:11.880 --> 00:34:14.540
2:00 PM Israel time.

00:34:14.540 --> 00:34:15.510
Thank you very much, Shai.

00:34:15.510 --> 00:34:16.179
SHAI REZNIK: OK, thanks.

00:34:16.179 --> 00:34:17.429
MALE SPEAKER: Bye-bye.

