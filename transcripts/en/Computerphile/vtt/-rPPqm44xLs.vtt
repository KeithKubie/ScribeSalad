WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:06.060
Computing in the early 70s was the
classic day of the mainframes, really. And,

00:00:06.060 --> 00:00:11.550
at the time, our mainframe was from a
British company - it was called ICL:

00:00:11.550 --> 00:00:16.680
International Computers Limited, Y' know
it was our patriotic duty, in the UK, to

00:00:16.680 --> 00:00:23.340
use our ICL computers. Many places wanted
to have an IBM computer but they were

00:00:23.340 --> 00:00:27.689
more expensive, they were American,
there were import restrictions. And within

00:00:27.689 --> 00:00:33.149
the universities in the UK, I think only
two or three were allowed to have IBMs.

00:00:33.149 --> 00:00:40.800
I know Cambridge was one; Newcastle
was another. The problem with all of this

00:00:40.800 --> 00:00:46.860
is: computers are expensive. We the
university can only afford one. You will

00:00:46.860 --> 00:00:52.199
have to share it among yourselves. And
there's quite a culture clash. Even in

00:00:52.199 --> 00:00:58.199
those days the engineers: civil engineers
- whatever - structural engineers wanted to

00:00:58.199 --> 00:01:02.539
do their calculations. Physicists,
chemists wanted other calculations,

00:01:02.539 --> 00:01:08.159
biologists ...  and, as we know, even people
from the Arts Faculty wanting to run

00:01:08.159 --> 00:01:13.770
music synthesis programs. we all had to
share. There certainly wasn't networks and

00:01:13.770 --> 00:01:19.680
Ethernet across the campus. No, if you
were lucky what you got was what we used

00:01:19.680 --> 00:01:23.880
to call the "dumb terminal". These things
were just a screen and a keyboard

00:01:23.880 --> 00:01:29.220
There was no embedded processor in the
screen, no secret computer. Micro-

00:01:29.220 --> 00:01:33.780
computers had not been invented. You had
a lump of cable coming out of the back

00:01:33.780 --> 00:01:37.439
of this thing, probably going through
your building somehow or another and

00:01:37.439 --> 00:01:42.659
ending up down in the traditional deep
basement, somewhere, leading into a shared

00:01:42.659 --> 00:01:48.570
mainframe. And what happened with
mainframes was you either arrived with

00:01:48.570 --> 00:01:53.850
a deck of cards, or a paper tape, and
you ran what's called a "batch job". You

00:01:53.850 --> 00:01:58.290
could hand over your job and a bit later
on in the day, back would come your line

00:01:58.290 --> 00:02:03.060
printer paper with the results on. Or, if
you're one of the favoured few, you could

00:02:03.060 --> 00:02:07.259
use one of these dumb terminals - glass
teletypes they were sometimes called - and

00:02:07.259 --> 00:02:11.410
you were in the elite.
You were allowed to be an "interactive user"

00:02:11.410 --> 00:02:16.960
and under very carefully controlled
conditions you could submit your

00:02:16.960 --> 00:02:21.400
programs to the system. If there was a
lot of output you were encouraged to get

00:02:21.400 --> 00:02:25.210
it off a line printer if there was a
little bit you could get it back on your

00:02:25.210 --> 00:02:30.310
glass teletype but it was not
sophisticated - it really was not. And

00:02:30.310 --> 00:02:35.950
these mainframes were going bananas
trying to share themselves equally among

00:02:35.950 --> 00:02:40.450
- shall we say - twenty or thirty
simultaneous users. By today's standards

00:02:40.450 --> 00:02:46.210
they were hopelessly underpowered so the
response was not good. [Holds up disk pack] 
That's the sort of

00:02:46.210 --> 00:02:51.070
disk this is. We've looked it up - it
doesn't say on the lettering  what it is.

00:02:51.070 --> 00:02:58.480
We've looked up - what a Nashua 4464
capacity is - it's 80 megabytes. And let me

00:02:58.480 --> 00:03:05.260
say again 80 megabytes not 80 gigabytes
And it's in this huge package. The

00:03:05.260 --> 00:03:09.850
platters in here have got the magnetic
media on there that stores your 1s and

00:03:09.850 --> 00:03:16.780
your 0s. But it's not sealed in a
package where no dust can get in. Oh no!

00:03:16.780 --> 00:03:20.890
You put this down into a thing that
looks like a top-loading washing machine in

00:03:20.890 --> 00:03:29.680
the laundrette. Oh! good lord!
Yeah, I remember now. You pull that down do

00:03:29.680 --> 00:03:34.060
you know - have to ask  Steve about this - it
might well be that you need a special

00:03:34.060 --> 00:03:39.840
sort of spindle, coming up, in order to
release the platters. I think you do.

00:03:39.840 --> 00:03:45.370
So can't get the flippin' cover off and
put it in my top-loader washing

00:03:45.370 --> 00:03:49.209
machine. But I can't at the moment figure
out how to get the lid off! When you look at

00:03:49.209 --> 00:03:56.230
the side here there's, what, one, two, three,
four, five. Five sixteens are 80. Yeah! they'll be roughly

00:03:56.230 --> 00:04:02.080
16 megabytes per platter. Many
people were longing to be able to get a

00:04:02.080 --> 00:04:07.720
computer of their own that was powerful
enough to do what they wanted to do. Of

00:04:07.720 --> 00:04:10.150
course computer scientists felt this keenly,

00:04:10.150 --> 00:04:18.190
because in many ways we ended up being the
real bad sheep in the family. Because not

00:04:18.190 --> 00:04:23.280
so much I think that we wanted to run
computationally intensive things. We didn't

00:04:23.280 --> 00:04:30.210
tend to want to do massive molecular
orbital calculations, or whatever, that

00:04:30.210 --> 00:04:36.030
could be done overnight. The thing 
which made computer scientists resented

00:04:36.030 --> 00:04:42.360
by the other lot - which is the computer
service providers - and at some stage we can

00:04:42.360 --> 00:04:45.990
get into how these two split apart, and
the answer is there was a lot of

00:04:45.990 --> 00:04:50.220
bloodletting but eventually they did. 
But as far as the computer centre - the

00:04:50.220 --> 00:04:54.240
computer service - was concerned, their
erstwhile colleagues in computer

00:04:54.240 --> 00:04:58.770
science were a complete pain. They wanted
to run non-standard software in

00:04:58.770 --> 00:05:03.360
non-standard ways. This non-standard
software might crash the machine and

00:05:03.360 --> 00:05:07.680
where would that leave the rest of the
time-sharing users. With a dead machine!

00:05:07.680 --> 00:05:13.500
All this kind of stuff. So purely
personally, [in]  my career as a computer

00:05:13.500 --> 00:05:20.100
scientist, the teaching was fine. We could
teach the students early languages that

00:05:20.100 --> 00:05:25.230
we liked. Fortran, Algol were the first two.
Later on a version of Algol called

00:05:25.230 --> 00:05:30.690
Algol68. Teaching programming was no problem. 
We got a share [of machine facilities] for the students

00:05:30.690 --> 00:05:35.190
and they were doing safe things in a
safe environment. But for those who

00:05:35.190 --> 00:05:40.290
wanted to do more dangerous things in
the research front, yes, you had to speak

00:05:40.290 --> 00:05:45.390
very nicely to the Director of the
Computing Centre and explain that you

00:05:45.390 --> 00:05:49.560
wanted to run a particular version of
the Algol 68 language, that you'd got from

00:05:49.560 --> 00:05:54.240
some colleagues, and it was non-standard.
And it was trying to do real-time

00:05:54.240 --> 00:05:59.100
programming with Algol 68 and ooh!
y'know:  "Will this affect the rest of the

00:05:59.100 --> 00:06:02.760
users? What happens if it goes wrong?
Wouldn't it be better to run it

00:06:02.760 --> 00:06:05.520
overnight"?
Eventually, I think, a lot of these

00:06:05.520 --> 00:06:10.800
problems were sorted out but it became
very clear that, as far as computer

00:06:10.800 --> 00:06:16.580
scientists were concerned, you'd love to
have a machine that was all your own,

00:06:16.580 --> 00:06:22.920
even if it was less powerful, a little
bit, than the mainframe. And as the

00:06:22.920 --> 00:06:27.840
70s wore on this gradually became
possible. And it became possible by

00:06:27.840 --> 00:06:31.710
what's often called the "second
generation". After the mainframes came the

00:06:31.710 --> 00:06:35.929
mini-computers, and there's 
some very famous names, most of which

00:06:35.929 --> 00:06:40.909
have now been absorbed or gone under:
Data General, DEC was very famous, [they]  made

00:06:40.909 --> 00:06:47.229
PDP 11 minicomputers and VAX minicomputers. 
So, from my point of view,

00:06:47.229 --> 00:06:52.609
towards the end of the late seventies, we
managed to save up enough money in the

00:06:52.609 --> 00:06:57.139
computing section of the Maths Department 
to buy ourselves - wait for it -

00:06:57.139 --> 00:07:05.269
a PDP 11/05 minicomputer! You'd got a
small amount of memory, which was capable of

00:07:05.269 --> 00:07:12.679
taking in simple assembly-level programs
on paper tape and they worked! Many

00:07:12.679 --> 00:07:17.509
viewers of this will probably know about
programming languages. Y'know like Java

00:07:17.509 --> 00:07:24.589
C, C++ and so on. But, of course, there's a
level below that. There is programming

00:07:24.589 --> 00:07:28.819
that is much closer to the hardware and
you really did have to understand about

00:07:28.819 --> 00:07:32.479
the innards on the machine to use it
effectively. It's still with us, is

00:07:32.479 --> 00:07:37.759
assembler, but nowadays higher-level
languages have got sufficiently much

00:07:37.759 --> 00:07:42.259
more efficient that Assembler isn't
quite as important as it used to be.

00:07:42.259 --> 00:07:45.529
So, anyway,  there we were. We could run
assembler programs with our students for

00:07:45.529 --> 00:07:51.949
the first time. And it was it was a good
step forward. But gradually we began to

00:07:51.949 --> 00:07:56.929
hear - on the computer scientist grapevine -
towards the end of the 70s, that if

00:07:56.929 --> 00:08:02.629
only you could afford a slightly bigger
PDP 11, I think was a PDP 11/34 was the

00:08:02.629 --> 00:08:09.589
minimum, there was this most amazing
operating system, written by computer

00:08:09.589 --> 00:08:14.509
scientists for computer scientists, at
Bell Laboratories in the United States,

00:08:14.509 --> 00:08:22.039
and it was called UNIX. And it did
everything just right. And whereas a lot

00:08:22.039 --> 00:08:28.089
of us had struggled with the mechanisms
on other operating systems for doing

00:08:28.089 --> 00:08:33.829
multitasking, multiprogramming,
multi-access generally, UNIX was

00:08:33.829 --> 00:08:39.319
essentially written by one astonishingly
gifted programmer called Ken Thompson.

00:08:39.319 --> 00:08:43.110
You got one man's computer science view
of the universe,

00:08:43.110 --> 00:08:47.100
about how it should be done. And for the
great majority of computer scientists it

00:08:47.100 --> 00:08:52.589
just made your jaw drop open. You
thought: "That is so clean! That is so good!"

00:08:52.589 --> 00:08:57.480
A very large number of computer science
departments, as soon as they could, went

00:08:57.480 --> 00:09:05.089
and got themselves a minimal machine a
PDP-11 with a 50 or 80 megabyte disk,

00:09:05.089 --> 00:09:13.560
Wait for it - maybe 64 or 128 K of memory
And for those out there who think I've made a

00:09:13.560 --> 00:09:17.790
mistake - no, kilobytes not megabytes, and certainly

00:09:17.790 --> 00:09:22.649
not gigabytes. And in that small amount
of memory the kernel of the operating

00:09:22.649 --> 00:09:28.680
system had to run, plus your program. And
there was just sufficient amount of disk

00:09:28.680 --> 00:09:32.010
that as long as you didn't have more
than five or six users, on an

00:09:32.010 --> 00:09:37.260
underpowered machine, it was still slow
but it could swap between you; park bits

00:09:37.260 --> 00:09:41.850
of your program out on disk when it ran
out of memory space and generally be a

00:09:41.850 --> 00:09:49.260
good clean multi-user, multitasking
system. Underpowered, sometimes. absolutely.

00:09:49.260 --> 00:09:53.070
But it just changed everything. It was
one of those seminal moments for

00:09:53.070 --> 00:09:59.459
computer scientists. We thought: "this is
just great!"  And I think it was not only

00:09:59.459 --> 00:10:05.970
the operating system itself because, as
many people know, the the two big names

00:10:05.970 --> 00:10:10.560
in UNIX are Ken Thompson and Dennis
Ritchie and they were given the Turing

00:10:10.560 --> 00:10:16.610
Award for inventing UNIX and for
inventing the C programming language. And

00:10:16.610 --> 00:10:20.670
although they shared the effort I think,
to a first approximation, you could say

00:10:20.670 --> 00:10:25.649
that UNIX was Ken Thompson's creation
but the C compiler - getting that working,

00:10:25.649 --> 00:10:30.540
refining it - was very definitely
Dennis Ritchie's invention. Being

00:10:30.540 --> 00:10:34.019
implemented by a limited number of
people who know what they are doing is

00:10:34.019 --> 00:10:41.130
far far better than having an army of
programmers. However, that being said

00:10:41.130 --> 00:10:45.420
you've got to be simpatico with the two
people who did it. If they think the same

00:10:45.420 --> 00:10:49.800
ways you do and their aim is the same as
yours you'll love it. But if that's not

00:10:49.800 --> 00:10:56.819
the case you may well end up hating it.
So, that was how, eventually, we ended up

00:10:56.819 --> 00:11:00.810
with our more powerful PDP-11
in our basement in the Maths building,

00:11:00.810 --> 00:11:05.220
still air-conditioned. And when we ran
out of steam on that we started thinking

00:11:05.220 --> 00:11:09.690
"Oh! if only we could afford a  more
powerful PDP-11, more memory, bigger disk

00:11:09.690 --> 00:11:18.329
and all this. I have actually got a
photograph, taken in the early 1980s, of

00:11:18.329 --> 00:11:24.720
our PDP 11/70 this was a more powerful
PDP 11. It needed a three-phase electric

00:11:24.720 --> 00:11:29.610
supply. It ran up electricity bills like
there was no tomorrow. The person you see

00:11:29.610 --> 00:11:33.480
at the bottom of the picture, the back
view - I had more hair then - that is me. And

00:11:33.480 --> 00:11:38.760
there's all my grad students around [ironic voice]
not posed of course! not in any way!  either

00:11:38.760 --> 00:11:45.120
using VDU [VDT] terminals or in the case of
Neil, over there, I persuaded him to look

00:11:45.120 --> 00:11:50.399
as though he was putting a dump tape
onto the magnetic tape deck so that it

00:11:50.399 --> 00:11:55.430
would take a dump of the disk. There was
none of this disk-to-disk dumping, onto

00:11:55.430 --> 00:12:02.730
terabyte backup disks, that we have today.
Your main disk was precious. You probably

00:12:02.730 --> 00:12:07.290
couldn't afford lots and lots of them so
the dump of what had changed during the

00:12:07.290 --> 00:12:12.810
day was done to magnetic tapes. And those
of you with eagle eyes will see, behind

00:12:12.810 --> 00:12:17.699
me on my bookshelf, a couple of 9-track
magnetic tapes containing,

00:12:17.699 --> 00:12:22.829
I think, the source code of Sun
Microsystems version of UNIX. Well, we

00:12:22.829 --> 00:12:26.519
used to use blank tapes of that sort for
dumping and that will be done every

00:12:26.519 --> 00:12:32.069
night and a big dump at the end of every
week. But you knew the dump cycle was

00:12:32.069 --> 00:12:36.569
happening you just hoped that if the
disk crashed you could recover from the

00:12:36.569 --> 00:12:42.180
tape dump. UNIX changed the world. It
changed the world initially, to be fair,

00:12:42.180 --> 00:12:46.230
for computer scientists. It did also
change the world for everybody else but

00:12:46.230 --> 00:12:51.839
it took some time. Because of the
licensing conditions from Bell

00:12:51.839 --> 00:12:56.480
Laboratories who first issued it and
some more licensing conditions from

00:12:56.480 --> 00:13:01.170
University of [California], Berkeley who 
refined it a bit more. If you wanted to set up a

00:13:01.170 --> 00:13:05.430
commercial UNIX operation
you needed a team of lawyers to

00:13:05.430 --> 00:13:10.970
negotiate what you could, and couldn't, do
with Bell and Berkeley source code. And

00:13:10.970 --> 00:13:16.170
of course the big computer manufacturers
didn't mind this too much. But in the end

00:13:16.170 --> 00:13:19.320
you felt well if UNIX, or its derivatives,

00:13:19.320 --> 00:13:25.050
is going to rule the world, and achieve
its full potential, you've got to find

00:13:25.050 --> 00:13:34.680
somebody who can reimplement the whole thing under 
an Open Source or freely accessible type of licence,
where people are not going to be

00:13:34.680 --> 00:13:39.930
hampered by endless restrictions on what
they can do what apps they can write and

00:13:39.930 --> 00:13:45.210
so on. That, overall, I would say took a
bit more than ten years. I seem to

00:13:45.210 --> 00:13:51.060
remember that some of the - if you like
test Open Source type of things - I think this

00:13:51.060 --> 00:13:55.980
guy called Andy Tanenbaum, in Holland,
who did MINIX and then around about that

00:13:55.980 --> 00:14:01.860
time the well-known name again Linus
Torvalds, out in Finland, really got hold

00:14:01.860 --> 00:14:06.720
of this idea that to make UNIX-like
systems go mainstream you had to have a

00:14:06.720 --> 00:14:12.450
standardised heart of the operating
system, called the kernel, and you had to

00:14:12.450 --> 00:14:17.310
re-implement the whole thing in such a
way that people could set up their own

00:14:17.310 --> 00:14:22.530
companies and under very clear
conditions know what they could do and

00:14:22.530 --> 00:14:27.060
what they couldn't do. And the rest, as
they say is history, I just do not know

00:14:27.060 --> 00:14:33.630
but it's a very large number what
percentage of the world's servers now

00:14:33.630 --> 00:14:39.900
run on UNIX or UNIX-derived systems
nowadays, various flavours of Linux.

00:14:39.900 --> 00:14:42.470
It's enormous.

