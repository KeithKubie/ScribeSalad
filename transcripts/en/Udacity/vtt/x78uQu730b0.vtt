WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
We're taking a moment to try to understand what it is about the way that the Russian algorithm

00:00:06.000 --> 00:00:11.000
is designed that makes it so much better than the naive approach that is just repetitive addition.

00:00:11.000 --> 00:00:15.000
Let's just go back for a moment to what multiplication is--at least integer multiplication.

00:00:15.000 --> 00:00:20.000
It is repeated addition, a times b. Let's focus for the moment on the case where a is even.

00:00:20.000 --> 00:00:24.000
Can be written as b plus b plus b plus b, repeated 8 times.

00:00:24.000 --> 00:00:29.000
We're considering the case were a is even here--we can regroup them as 2 sums.

00:00:29.000 --> 00:00:33.000
B added to itself a over 2 times, and then b added to itself a over 2 times again,

00:00:33.000 --> 00:00:37.000
and those 2 things added together, but it's silly to compute the same thing twice.

00:00:37.000 --> 00:00:40.000
Clearly if we're doing this calculation, we could just compute it once,

00:00:40.000 --> 00:00:45.000
b added to itself a over 2 times, and then just double the result that we get.

00:00:45.000 --> 00:00:49.000
Doing this calculation here is basically now repeating the same operation over again.

00:00:49.000 --> 00:00:51.000
Each time we're doing part of the sum here,

00:00:51.000 --> 00:00:53.000
we're actually saving ourselves a tremendous amount of effort.

00:00:53.000 --> 00:00:56.000
The idea of divide and conquer is that you can break a problem into roughly

00:00:56.000 --> 00:01:00.000
equal size sub-problems, solve the sub-problems separately, and combine the results.

00:01:00.000 --> 00:01:06.000
And in this particular instance, the sub-problems themselves, these 2 sums, are identical.

00:01:06.000 --> 00:01:11.000
It only has to be done once--so you're saving yourself half the effort every time that you do this,

00:01:11.000 --> 00:01:15.000
half keeps compounding and that's how we get down to algorithmic number of steps

00:01:15.000 --> 00:01:17.000
instead of a linear number of steps.

00:01:17.000 --> 00:01:21.000
So this way if looking at the Russian peasant algorithm leads to

00:01:21.000 --> 00:01:24.000
a very interesting way of expressing the algorithm recursively.

00:01:24.000 --> 00:01:28.000
The idea here is that we're going to do is to multiply a and b together.

00:01:28.000 --> 00:01:33.000
What we're going to do is say if a 0 to start, we can just return 0 and be done with it.

00:01:33.000 --> 00:01:37.000
On the other hand if a is even, then just because of the derivation that we just worked out

00:01:37.000 --> 00:01:41.000
a moment ago, multiplying a times b is really the same thing as adding b to itself

00:01:41.000 --> 00:01:45.000
a over 2 times, so it's a over 2 times b, which we're going to compute recursively.

00:01:45.000 --> 00:01:50.000
So the Russian algorithm is going to go off and do whatever it does to compute a over 2 times b.

00:01:50.000 --> 00:01:52.000
And once we had the answer to that,

00:01:52.000 --> 00:01:55.000
we need to multiply that by 2 to get the answer to the original problem.

00:01:55.000 --> 00:01:59.000
So we can use the solution to the sub-problem to solve the big problem.

00:01:59.000 --> 00:02:02.000
In the case where it's odd, it's a little bit more complicated. Pull one of the b's at.

00:02:02.000 --> 00:02:08.000
We're actually adding a's and b's together, but a is odd, so let's pull one of the b's out and add to that,

00:02:08.000 --> 00:02:12.000
well what's left--there is a minus 1, repetitions of b that we're adding together, but a minus 1

00:02:12.000 --> 00:02:19.000
is now even, so we can have that--compute what a minus 1 over 2 times b is recursively.

00:02:19.000 --> 00:02:22.000
Once we have the answer to that, we can multiply it by 2.

00:02:22.000 --> 00:02:27.000
Well, it's going to give us what a minus 1 times b is, which is a times b minus b.

00:02:27.000 --> 00:02:30.000
So we just add the b back in and we should be done.

00:02:30.000 --> 00:02:34.000
Using the solution to the sub-problem, we can compute the solution to the original problem.

00:02:34.000 --> 00:02:38.000
So this may be seems a little bit circular, but each time that the Russian peasant algorithm

00:02:38.000 --> 00:02:43.000
is being called here, it's being called with a much smaller value--a half that it was before.

00:02:43.000 --> 00:02:48.000
And that's where we're getting a lot of our mileage from. Let's actually analyze this algorithm.

00:02:48.000 --> 00:02:51.000
It is going to be the same answer as what we got for the Russian peasant algorithm,

00:02:51.000 --> 00:02:54.000
but it's going to introduce a new tool that's going to be helpful for us

00:02:54.000 --> 09:59:59.000
analyzing lots of other algorithms.

