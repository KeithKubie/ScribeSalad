WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:05.910
NumPy also offers several function to
create empty arrays with initial values.

00:00:05.910 --> 00:00:10.550
For certain computations these help
avoid growing arrays incrementally

00:00:10.550 --> 00:00:12.990
which can be an expensive operation.

00:00:12.990 --> 00:00:15.560
Let's start with
creating an empty array.

00:00:15.560 --> 00:00:19.540
The empty function takes
the shape of the array as input.

00:00:19.540 --> 00:00:23.770
The shape can be defined as a single
integer, as we did over here, for

00:00:23.770 --> 00:00:26.400
creating a one dimensional array, or

00:00:26.400 --> 00:00:30.440
a sequence of integers denoting
the size in each dimension.

00:00:30.440 --> 00:00:34.110
For a two dimensional array,
a sequence of two integers is needed.

00:00:34.110 --> 00:00:36.910
That is the number of rows and
the number of columns.

00:00:36.910 --> 00:00:40.600
For this example, we will create
an empty array with five rows and

00:00:40.600 --> 00:00:41.530
four columns.

00:00:41.530 --> 00:00:45.180
Passing in a tuple with values 5 and 4.

00:00:45.180 --> 00:00:48.890
So here I pass a tuple with values 5 and
4.

00:00:48.890 --> 00:00:51.570
In case you need a three
dimensional array, or any

00:00:51.570 --> 00:00:56.260
greater number of dimensions, you can
just add another number to the sequence.

00:00:56.260 --> 00:01:00.272
This will give you a 3 dimensional
array with a depth of 3, and

00:01:00.272 --> 00:01:03.510
each depth having 5 rows and 4 columns.

00:01:03.510 --> 00:01:07.840
For this lesson we will only work
with two dimensional arrays.

00:01:07.840 --> 00:01:09.030
Now let's check the output.

00:01:10.360 --> 00:01:11.960
Hm, strange.

00:01:11.960 --> 00:01:14.280
The empty array is not actually empty.

00:01:14.280 --> 00:01:18.600
What happens is that when we call
numpy.empty to create an array,

00:01:18.600 --> 00:01:21.340
the elements of the array
read in whatever

00:01:21.340 --> 00:01:24.890
values were present in
the corresponding memory location.

00:01:24.890 --> 00:01:27.890
These are effectively
random values that depend

00:01:27.890 --> 00:01:30.040
on the state of the computer's memory.

00:01:30.040 --> 00:01:33.610
Also observe that by default
the elements are the floating points.

00:01:34.610 --> 00:01:37.240
Next we create an array full of ones.

00:01:37.240 --> 00:01:40.360
Like the empty function,
we pass in the number of rows and

00:01:40.360 --> 00:01:42.560
columns as a sequence.

00:01:42.560 --> 00:01:46.020
To create an array full of ones,
you call the one function and

00:01:46.020 --> 00:01:50.420
pass the sequence, which has number
of rows and number of columns.

00:01:50.420 --> 00:01:53.930
You can expect this time to
have an array of 5 rows and

00:01:53.930 --> 00:01:56.980
4 columns with all
the values equal to 1.

00:01:56.980 --> 00:01:59.120
Let's go ahead and check this.

00:01:59.120 --> 00:02:00.060
Here it is.

00:02:00.060 --> 00:02:05.415
An array with 5 rows, 4 columns, and
all the values of the array equal to 1.

