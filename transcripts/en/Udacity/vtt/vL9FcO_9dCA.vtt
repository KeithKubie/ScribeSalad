WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:01.260
All right. So now I would like to show you a

00:00:01.260 --> 00:00:06.950
large collection, and the effect that indexing can have on performance. Now,

00:00:06.950 --> 00:00:09.950
our collection of tweets is relatively small. So, instead of going

00:00:09.950 --> 00:00:13.110
to revisit the open street map dataset, which you should remember from

00:00:13.110 --> 00:00:16.030
the previous lesson. This will also serve as a nice transition

00:00:16.030 --> 00:00:19.110
to the next lesson, which is a project using the Open Street

00:00:19.110 --> 00:00:21.710
Map data. So for this example, I'm going to work in

00:00:21.710 --> 00:00:25.250
the MongoDB shell, and the database in which this data is stored

00:00:25.250 --> 00:00:28.430
is the OSM database. So I'll switch to using

00:00:28.430 --> 00:00:32.619
that, and then let's take a look at what documents

00:00:32.619 --> 00:00:34.000
look like in this database, and to do that,

00:00:34.000 --> 00:00:36.860
we'll just do a find everything. Okay, so then if

00:00:36.860 --> 00:00:39.950
we scroll up, You see what these documents look

00:00:39.950 --> 00:00:43.680
like. There's location information, latitude/longitude. So all data in this

00:00:43.680 --> 00:00:47.580
collection is tied to a specific location. And something I'd

00:00:47.580 --> 00:00:50.500
like to point out is that some of the documents

00:00:50.500 --> 00:00:53.150
in this collection actually have a TG field. And this

00:00:53.150 --> 00:00:55.460
is shorthand for tag. So if you remember, we looked

00:00:55.460 --> 00:00:59.900
before at how specific locations will be tagged from time

00:00:59.900 --> 00:01:03.200
to time within this particular data set. And the way

00:01:03.200 --> 00:01:06.240
these tags work in this collection is, there is a

00:01:06.240 --> 00:01:09.990
tag field that is array valued and each of the

00:01:09.990 --> 00:01:12.600
individual values in this array are a sub-document with a"

00:01:12.600 --> 00:01:15.540
k" and" v" field. Much like we saw in the XML

00:01:15.540 --> 00:01:18.110
version of this data set. Now, the reason why the data

00:01:18.110 --> 00:01:21.580
is represented this way is because there could be multiple taggings

00:01:21.580 --> 00:01:24.960
all with the same type or key. So storing them in

00:01:24.960 --> 00:01:28.290
an array this way gives us the ability to do that without

00:01:28.290 --> 00:01:31.810
one tag writing over another as we put them into MongoDB.

00:01:31.810 --> 00:01:34.610
One alternative would be to have this be a field name out

00:01:34.610 --> 00:01:38.270
here, and this be the value for that field. Okay, now

00:01:38.270 --> 00:01:41.070
something I'd like to point out about this data set is there

00:01:41.070 --> 00:01:46.020
are more than seven million documents in this particular collection. Now, we've

00:01:46.020 --> 00:01:50.020
just talked about indexing, and how indexes can improve performance. So let's

00:01:50.020 --> 00:01:52.640
take a look at a query and the amount of time it

00:01:52.640 --> 00:01:54.360
takes for that query to come back. Right now, I don't have

00:01:54.360 --> 00:01:57.520
an index on this tag field. So let's do a query and

00:01:57.520 --> 00:02:00.020
see what our performance looks like. Now this particular collection that I've

00:02:00.020 --> 00:02:02.560
loaded here has actually all of the Open Street Map data from

00:02:02.560 --> 00:02:06.450
the city of Chicago again. And what I'm doing here is querying

00:02:06.450 --> 00:02:12.040
for any nodes or any geographic locations that have been tagged with the

00:02:12.040 --> 00:02:16.840
name Giordanos which is a famous Chicago pizza chain. So if you do this query

00:02:16.840 --> 00:02:19.832
[BLANK_AUDIO]

00:02:19.832 --> 00:02:21.702
You can see that it takes a little while to

00:02:21.702 --> 00:02:24.498
come back. Let's do a pretty version of this query.

00:02:24.498 --> 00:02:26.279
[BLANK_AUDIO]

00:02:26.279 --> 00:02:28.210
Okay, so a couple of seconds right? For the query

00:02:28.210 --> 00:02:31.265
to come back. So, if we're doing a single query,

00:02:31.265 --> 00:02:33.830
[SOUND] not a big of a deal. The fact is,

00:02:33.830 --> 00:02:38.730
in most applications, we're doing many queries. In some applications

00:02:38.730 --> 00:02:41.160
hundreds, or maybe even thousands, or tens of thousands of

00:02:41.160 --> 00:02:45.080
queries in a very short period of time. So, waiting

00:02:45.080 --> 00:02:47.730
two seconds for a query to come back, given the

00:02:47.730 --> 00:02:51.520
load that places on the database server, and. Although simultaneous queries

00:02:51.520 --> 00:02:53.990
going on at the same time simply just doesn't work

00:02:53.990 --> 00:02:56.720
for our applications. It's death to our application, as I mentioned

00:02:56.720 --> 00:03:00.800
previously. So if we built an index on this collection, then

00:03:00.800 --> 00:03:03.570
our performance improves significantly because instead of having to do a

00:03:03.570 --> 00:03:06.550
table scan. As we saw before. I can simply go right

00:03:06.550 --> 00:03:10.310
to the place on disc where these particular documents matching my

00:03:10.310 --> 00:03:13.740
query are located. Now, going too far beyond where we're already

00:03:13.740 --> 00:03:16.520
at with indexing is beyond the scope of this class. So

00:03:16.520 --> 00:03:19.530
I'm just going to, essentially get you started with indexes

00:03:19.530 --> 00:03:22.670
here. And encourage you to go look at the MongoDB

00:03:22.670 --> 00:03:26.440
documentation or take a look at the free online courses

00:03:26.440 --> 00:03:30.250
we offer on university.mongodb.com, see in the instructor notes for

00:03:30.250 --> 00:03:32.760
a comprehensive treatment of all of these topics that we've

00:03:32.760 --> 00:03:36.320
been discussing with regard to Mongo DB, including indexing. Okay,

00:03:36.320 --> 00:03:38.380
so let's build my index, and the way I do

00:03:38.380 --> 00:03:41.640
this is specifying the field on which I would like the

00:03:41.640 --> 00:03:45.230
index created. And I do this simply by saying, make

00:03:45.230 --> 00:03:47.820
it the case that there is an index on the

00:03:47.820 --> 00:03:53.780
field tg in the collection nodes. Okay? Now, again, more

00:03:53.780 --> 00:03:55.980
than seven million documents in this collection, so this is going to

00:03:55.980 --> 00:03:57.970
take a little while to come back. It's going to take

00:03:57.970 --> 00:04:00.890
a little while to build the index. Had we created the

00:04:00.890 --> 00:04:03.450
index at first then as we were loading data into

00:04:03.450 --> 00:04:06.900
the collection it would have been updated with each write to

00:04:06.900 --> 00:04:09.500
the data base. But in this case we're building the index after

00:04:09.500 --> 00:04:11.430
we've loaded all the data in so that I could work through

00:04:11.430 --> 00:04:15.130
this example. So, we'll just skip ahead in the video to the

00:04:15.130 --> 00:04:17.196
point where the index is actually created. This is going to take a

00:04:17.196 --> 00:04:21.079
couple of minutes. Okay. So now with the index created, let's run

00:04:21.079 --> 00:04:24.320
that query again and look at the performance difference. It was intimidate

00:04:24.320 --> 00:04:28.750
really. We got back our documents right away. And so that illustrates

00:04:28.750 --> 00:04:32.850
the performance differences in using an index versus not using an index.

