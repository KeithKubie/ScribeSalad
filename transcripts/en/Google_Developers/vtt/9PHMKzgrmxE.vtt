WEBVTT
Kind: captions
Language: en

00:00:01.780 --> 00:00:04.280
Hello, and welcome to the
tutorial for the Dart Editor.

00:00:04.280 --> 00:00:05.170
My name is Devon Carew.

00:00:05.170 --> 00:00:07.010
I'm a software engineer at
Google and a member of the

00:00:07.010 --> 00:00:07.830
Dart project.

00:00:07.830 --> 00:00:11.030
Dart is a new structured web
programming language.

00:00:11.030 --> 00:00:13.410
The Dart language is joined by
libraries, a virtual machine,

00:00:13.410 --> 00:00:15.720
tools, and a Dart to JavaScript
compiler.

00:00:15.720 --> 00:00:17.200
Today, I'll be taking you on
a tour of the development

00:00:17.200 --> 00:00:18.880
environment for Dart.

00:00:18.880 --> 00:00:22.540
You can download a copy of the
Editor at dartlang.org/editor.

00:00:22.540 --> 00:00:24.800
This download also includes a
copy of the Chromium browser

00:00:24.800 --> 00:00:27.530
with Dart support built in, the
Dart virtual machine, as

00:00:27.530 --> 00:00:28.782
well as the class libraries
and the Dart

00:00:28.782 --> 00:00:30.420
to JavaScript compiler.

00:00:30.420 --> 00:00:32.299
Dart, the language, and its
libraries, the virtual

00:00:32.299 --> 00:00:34.740
machine, and the tools
are all open source.

00:00:34.740 --> 00:00:37.280
Visit dartlang.org for more info
on Dart, including code

00:00:37.280 --> 00:00:40.130
samples, documentation, and
the latest Dart news.

00:00:40.130 --> 00:00:41.680
So now let's dig into
the Editor.

00:00:41.680 --> 00:00:43.540
First, when you open the Editor,
it comes up with a

00:00:43.540 --> 00:00:45.490
page of some sample
applications.

00:00:45.490 --> 00:00:47.250
We'll click on the clock
sample app in

00:00:47.250 --> 00:00:48.940
order to open it.

00:00:48.940 --> 00:00:51.710
You can see that it's opened a
clock project over here as

00:00:51.710 --> 00:00:55.200
well some Dart files and the
main clock Dart file in the

00:00:55.200 --> 00:00:56.900
editing window.

00:00:56.900 --> 00:00:58.310
In order to run this
application,

00:00:58.310 --> 00:01:00.170
click on the Run button.

00:01:00.170 --> 00:01:01.145
And this will launch
the application

00:01:01.145 --> 00:01:03.570
and a copy of Dartium.

00:01:03.570 --> 00:01:06.330
Dartium is a special build of
the Chromium browser that

00:01:06.330 --> 00:01:08.160
ships with the Editor
and includes the

00:01:08.160 --> 00:01:09.480
Dart virtual machine.

00:01:09.480 --> 00:01:12.200
It supports Dart natively.

00:01:12.200 --> 00:01:13.730
But we also have a good store
for running your Dart

00:01:13.730 --> 00:01:16.500
application on browsers that
don't support Dart.

00:01:16.500 --> 00:01:19.010
We have a Dart compiler, Dart
to JavaScript, that compiles

00:01:19.010 --> 00:01:20.980
your Dart application
to JavaScript.

00:01:20.980 --> 00:01:21.950
Let's see how that works.

00:01:21.950 --> 00:01:25.200
If you choose the Tools,
Generate JavaScript menu item,

00:01:25.200 --> 00:01:27.770
it runs Dart to JS
and produces a

00:01:27.770 --> 00:01:30.290
JavaScript file as output.

00:01:30.290 --> 00:01:32.470
You can see the output here.

00:01:32.470 --> 00:01:36.160
And there's a new Dart to JS
file in the files view.

00:01:36.160 --> 00:01:39.920
We can open that file to look
at the compiled JavaScript.

00:01:39.920 --> 00:01:41.920
So now let's run this Dart
application in a browser

00:01:41.920 --> 00:01:43.280
without Dart support.

00:01:43.280 --> 00:01:47.910
On the Run menu, choose the
Manage Launches menu item.

00:01:47.910 --> 00:01:50.850
There we'll create a new launch
type, a JavaScript

00:01:50.850 --> 00:01:54.800
launch, and select the HTML
file we want to run,

00:01:54.800 --> 00:01:56.460
Clock.html.

00:01:56.460 --> 00:02:01.200
We'll name this launch
and run it.

00:02:01.200 --> 00:02:03.700
It'll invoke Dart to JavaScript,
and generate

00:02:03.700 --> 00:02:08.030
JavaScript, and launch
a new browser.

00:02:08.030 --> 00:02:10.479
So this is the Dart application
running in Chrome

00:02:10.479 --> 00:02:13.160
and just running JavaScript
natively.

00:02:13.160 --> 00:02:15.500
And an important point to note
is that the same HTML file is

00:02:15.500 --> 00:02:17.340
running both the Dart
and JavaScript

00:02:17.340 --> 00:02:18.600
version of the apps.

00:02:18.600 --> 00:02:20.380
Let's see how that works.

00:02:20.380 --> 00:02:23.120
Review the page source.

00:02:23.120 --> 00:02:26.050
We can see that the HTML file
is referencing the Dart

00:02:26.050 --> 00:02:27.330
application.

00:02:27.330 --> 00:02:29.460
So this will run just natively
in a browser

00:02:29.460 --> 00:02:32.410
with native Dart support.

00:02:32.410 --> 00:02:34.470
And if you have a browser
without that, it invokes a

00:02:34.470 --> 00:02:38.710
Dart to JS script, which first
checks to see if Dart is

00:02:38.710 --> 00:02:39.680
available in the browser.

00:02:39.680 --> 00:02:43.900
And if not, it rewrites your
application Dart references to

00:02:43.900 --> 00:02:46.610
append .js to it.

00:02:46.610 --> 00:02:49.580
So that'll invoke the output
of Dart to JS.

00:02:49.580 --> 00:02:52.200
And your Dart application will
just run in that browser.

00:02:52.200 --> 00:02:54.330
So now let's open a more
complicated example.

00:02:54.330 --> 00:02:55.640
We'll be working with
this example for the

00:02:55.640 --> 00:02:57.160
rest of this tutorial.

00:02:57.160 --> 00:02:58.430
The File Open menu item.

00:03:01.610 --> 00:03:03.720
We'll be opening existing
applications, and work with

00:03:03.720 --> 00:03:05.926
them in the Editor.

00:03:05.926 --> 00:03:07.650
I'm going to choose one
I wrote for the

00:03:07.650 --> 00:03:10.910
purposes of this tutorial.

00:03:10.910 --> 00:03:13.650
And it's open, and you can
see it in the files view.

00:03:13.650 --> 00:03:16.580
And open the main file for it.

00:03:16.580 --> 00:03:21.360
The app consists of a CSS file,
HTML, and a Dart file.

00:03:21.360 --> 00:03:23.850
Let's run it very quickly,
and see what it does.

00:03:27.940 --> 00:03:32.610
OK, so it's a visualization of
the solar system, with the sun

00:03:32.610 --> 00:03:36.820
and the moon and a couple
of asteroids

00:03:36.820 --> 00:03:38.100
distributed in there.

00:03:38.100 --> 00:03:40.300
One of the things the Editor is
good at is navigating and

00:03:40.300 --> 00:03:42.110
visualizing your application.

00:03:42.110 --> 00:03:44.160
Because Dart is a structured
programming language, we have

00:03:44.160 --> 00:03:46.430
a very good semantic knowledge
of your source base.

00:03:46.430 --> 00:03:48.250
First off, let's open
the outline view.

00:03:54.000 --> 00:03:57.460
This is going to show you the
types and methods in your file

00:03:57.460 --> 00:03:58.480
you're editing.

00:03:58.480 --> 00:04:01.620
So we see that we have a
planetary body class.

00:04:01.620 --> 00:04:05.300
It has an add planet method, a
draw children and a draw self

00:04:05.300 --> 00:04:09.880
method, and a solar system
class, which knows how to draw

00:04:09.880 --> 00:04:12.620
itself and draws planets.

00:04:12.620 --> 00:04:15.570
And we have two top level
functions, a main, which is

00:04:15.570 --> 00:04:19.670
your entry point, and
a show FPS method.

00:04:19.670 --> 00:04:21.730
Another useful thing we support
is hyperlinking within

00:04:21.730 --> 00:04:23.020
your application.

00:04:23.020 --> 00:04:24.840
So you can jump to the
definition of classes and

00:04:24.840 --> 00:04:26.480
methods you use.

00:04:26.480 --> 00:04:32.140
I'll jump to this constructor
definition and back and this

00:04:32.140 --> 00:04:34.150
method definition.

00:04:34.150 --> 00:04:35.860
And you're not just limited to
hyperlinking within your

00:04:35.860 --> 00:04:36.650
application.

00:04:36.650 --> 00:04:38.970
You can navigate into the
core libraries, as well.

00:04:38.970 --> 00:04:40.220
Let's see an example of that.

00:04:45.140 --> 00:04:48.600
So I want to see how this log
method is implemented.

00:04:48.600 --> 00:04:50.770
I can hyperlink into it.

00:04:50.770 --> 00:04:55.930
And I see the actual
definition of it.

00:04:55.930 --> 00:04:59.100
And that brings me to another
point, that the full SDK

00:04:59.100 --> 00:05:00.980
sources are available
in the Editor.

00:05:00.980 --> 00:05:03.060
So you can see all the libraries
in the SDK, and you

00:05:03.060 --> 00:05:07.060
can explore them and look at
their implementations.

00:05:07.060 --> 00:05:09.100
Another feature we have
is the callers view.

00:05:09.100 --> 00:05:12.490
This view let's you see all
references to a field or all

00:05:12.490 --> 00:05:14.090
callers of a method.

00:05:14.090 --> 00:05:15.930
This is something that is
possible because we have a

00:05:15.930 --> 00:05:18.070
full semantic knowledge
of the source base.

00:05:18.070 --> 00:05:19.800
Let's see this in action.

00:05:19.800 --> 00:05:23.480
So if I select this window
field, right click on it, and

00:05:23.480 --> 00:05:27.460
choose Open Callers, we'll
see that we have lots of

00:05:27.460 --> 00:05:28.790
references to it.

00:05:28.790 --> 00:05:32.140
And we can dive into those
specific references.

00:05:32.140 --> 00:05:34.050
This is in our own
source base.

00:05:34.050 --> 00:05:37.770
We can look and see in the
actual SDK sources.

00:05:37.770 --> 00:05:39.890
It references the
window field.

00:05:39.890 --> 00:05:43.550
And the caller view
supports finding

00:05:43.550 --> 00:05:46.060
reference methods as well.

00:05:46.060 --> 00:05:48.420
Another useful way to navigate
in the Editor is using our

00:05:48.420 --> 00:05:50.120
search box.

00:05:50.120 --> 00:05:53.220
So let's say that I know I
want to display a browser

00:05:53.220 --> 00:05:54.870
alert box in my application.

00:05:54.870 --> 00:05:57.040
I might not know exactly what
class it defined on or the

00:05:57.040 --> 00:05:59.470
method is called, but I can
guess it would be something

00:05:59.470 --> 00:06:00.150
like alert.

00:06:00.150 --> 00:06:02.610
So let's type that in.

00:06:02.610 --> 00:06:08.110
And I can select Occurrences
of Alert, and it searches

00:06:08.110 --> 00:06:11.780
through the user code as
well as the SDK code.

00:06:11.780 --> 00:06:14.860
I see I have several matches,
and I'm going to explore this

00:06:14.860 --> 00:06:16.900
one in the HTML library.

00:06:19.530 --> 00:06:21.190
And I find a likely candidate.

00:06:21.190 --> 00:06:25.360
It's an alert method, and it
takes a string as a parameter.

00:06:25.360 --> 00:06:27.540
Using the outline view, I can
see that it's defined in a

00:06:27.540 --> 00:06:30.370
class called dom window impl.

00:06:30.370 --> 00:06:32.860
And if I look at that
implementation, I can see that

00:06:32.860 --> 00:06:35.330
it implements the window
interface.

00:06:35.330 --> 00:06:38.450
So from that I can reasonably
infer that the window object

00:06:38.450 --> 00:06:40.740
is going to have an alert
method on it.

00:06:40.740 --> 00:06:43.565
Let's type that in and
see what happens.

00:06:49.360 --> 00:06:51.005
I'm going to save and
run my application.

00:06:57.010 --> 00:06:58.810
And we get an alert box.

00:06:58.810 --> 00:07:00.730
So our search isn't just
a textual search.

00:07:00.730 --> 00:07:02.520
It's a semantic search,
as well.

00:07:02.520 --> 00:07:07.090
If I type in planetary body into
the search box, I could

00:07:07.090 --> 00:07:09.830
see the type that I've defined
in my application and jump to

00:07:09.830 --> 00:07:11.990
the definition.

00:07:11.990 --> 00:07:13.360
We also have support
for discovering

00:07:13.360 --> 00:07:15.230
documentation and user code.

00:07:15.230 --> 00:07:17.092
Dart supports the notion of
literate programming in the

00:07:17.092 --> 00:07:19.140
form of Dart doc comments.

00:07:19.140 --> 00:07:23.690
Here's an example of one, and
here's an example of another.

00:07:23.690 --> 00:07:26.190
A Dart doc syntax is a form of
markdown and is basically a

00:07:26.190 --> 00:07:28.925
very simple, readable form
of inline documentation.

00:07:28.925 --> 00:07:31.280
We parse it in the Editor, and
whenever you hover over an

00:07:31.280 --> 00:07:33.630
element that's been documented,
you get a tool tip

00:07:33.630 --> 00:07:36.130
with a Dart doc inline.

00:07:36.130 --> 00:07:38.900
This is useful for SDK
code, as well.

00:07:38.900 --> 00:07:40.150
Let's see that.

00:07:42.880 --> 00:07:46.260
So maybe I've forgotten the
exact return type of random,

00:07:46.260 --> 00:07:50.200
but I can hover over it and
see that it's specified a

00:07:50.200 --> 00:07:52.550
return value between
zero and one.

00:07:52.550 --> 00:07:54.450
Finally, all of our
documentation for our core

00:07:54.450 --> 00:07:56.180
libraries is available online.

00:07:56.180 --> 00:07:58.180
You can navigate to them
from the help API

00:07:58.180 --> 00:07:59.430
Reference menu item.

00:08:02.870 --> 00:08:05.190
The Editor has full semantic
knowledge of the user's code,

00:08:05.190 --> 00:08:06.910
and it maintains this knowledge
by continually

00:08:06.910 --> 00:08:08.620
analyzing the source code.

00:08:08.620 --> 00:08:10.430
There's no explicit
compile step.

00:08:10.430 --> 00:08:12.590
As soon as the user pauses
typing or saves a file, we

00:08:12.590 --> 00:08:14.840
re-analyze the modified file.

00:08:14.840 --> 00:08:16.250
Let's see an example of this.

00:08:16.250 --> 00:08:19.620
In the start method, we'll
change the call to sun add

00:08:19.620 --> 00:08:23.220
planet to sun add planetoid.

00:08:23.220 --> 00:08:28.040
If I save, the Editor shows a
warning, saying it doesn't

00:08:28.040 --> 00:08:31.980
know anything about the
sun planetoid method.

00:08:31.980 --> 00:08:34.460
Now, this particular problem is
a warning and not an error.

00:08:34.460 --> 00:08:36.110
The Editor thinks that it knows
what the type of object

00:08:36.110 --> 00:08:39.340
is and what methods are
available on it.

00:08:39.340 --> 00:08:40.750
But the final arbitrator
of this bit of code

00:08:40.750 --> 00:08:41.850
will be the run time.

00:08:41.850 --> 00:08:44.410
If this object at run time
does not support the add

00:08:44.410 --> 00:08:47.110
planetoid method, the code
will run just fine.

00:08:47.110 --> 00:08:57.470
If we run this code, we see
that Dartium threw an

00:08:57.470 --> 00:09:01.500
exception and that it was a
no such method exception.

00:09:01.500 --> 00:09:03.905
And it really doesn't think
that this method exists.

00:09:03.905 --> 00:09:06.690
So let's remove that method.

00:09:06.690 --> 00:09:11.250
And instead, we'll modify this
planetary body constructor.

00:09:11.250 --> 00:09:15.110
If we change the name of it and
save, again, the Editor

00:09:15.110 --> 00:09:17.780
doesn't think that constructor
exists.

00:09:17.780 --> 00:09:19.510
But now it's an error,
not a warning.

00:09:19.510 --> 00:09:22.810
And that's because sometimes in
our type system, we really

00:09:22.810 --> 00:09:26.156
do need to know the type of an
object and especially when

00:09:26.156 --> 00:09:27.290
we're creating it.

00:09:27.290 --> 00:09:29.340
One of the strengths of Dart
is that it's a structured

00:09:29.340 --> 00:09:30.270
programming language.

00:09:30.270 --> 00:09:31.830
If you make use of the optional
types in your

00:09:31.830 --> 00:09:34.440
application, the development
tools can form a good semantic

00:09:34.440 --> 00:09:36.060
picture of your code base.

00:09:36.060 --> 00:09:38.070
This allows for sophisticated
features like code

00:09:38.070 --> 00:09:39.250
refactorings.

00:09:39.250 --> 00:09:41.120
The ability to easily
and safely refactor

00:09:41.120 --> 00:09:42.360
code is a huge benefit.

00:09:42.360 --> 00:09:45.417
It allows you to work on large
code bases in bigger teams. It

00:09:45.417 --> 00:09:47.390
allows you to change and modify
the code over time in

00:09:47.390 --> 00:09:49.920
order to keep that
code healthy.

00:09:49.920 --> 00:09:52.050
The Dart Editor supports
several refactorings.

00:09:52.050 --> 00:09:54.390
I'm going to show off our
renamer refactor now.

00:09:54.390 --> 00:09:56.830
Let's say I decide that this
add planet method really

00:09:56.830 --> 00:09:58.672
should be called
add planetoid.

00:09:58.672 --> 00:10:02.665
I can select it and choose
Edit, Rename.

00:10:05.600 --> 00:10:08.500
Then type in planetoid
and hit Return.

00:10:08.500 --> 00:10:10.870
The method name is changed at
that call site and all other

00:10:10.870 --> 00:10:11.830
call sites.

00:10:11.830 --> 00:10:15.010
And if I hyperlink to the
definition, you can see it's

00:10:15.010 --> 00:10:16.220
changed there as well.

00:10:16.220 --> 00:10:17.980
I can hyperlink back.

00:10:17.980 --> 00:10:23.450
And our refactorings also have
full undo and redo support.

00:10:23.450 --> 00:10:25.960
Another refactoring we have is
extracting expression into a

00:10:25.960 --> 00:10:27.320
local variable.

00:10:27.320 --> 00:10:30.180
So let's go to the calculate
speed method.

00:10:30.180 --> 00:10:33.100
And if we look at it, we see we
have several constants that

00:10:33.100 --> 00:10:35.710
we could reasonably extract
into a local variable.

00:10:35.710 --> 00:10:40.950
We go to the Edit menu, choose
Extract Local Variable, add a

00:10:40.950 --> 00:10:49.700
name for it, hit Return, and
we see it's done the

00:10:49.700 --> 00:10:50.380
refactoring.

00:10:50.380 --> 00:10:53.370
And it's actually also inferred
that the type of the

00:10:53.370 --> 00:10:55.160
local variable search
should be a double.

00:10:55.160 --> 00:10:57.215
So now let's play around with
one of the hallmarks of a

00:10:57.215 --> 00:10:58.990
modern development environment,
code completion.

00:10:58.990 --> 00:11:02.200
We'll go to the Start method,
and extract out a local

00:11:02.200 --> 00:11:03.830
variable before we
create Mars.

00:11:16.520 --> 00:11:18.440
And now I want to add a few
satellites to Mars, but I'm

00:11:18.440 --> 00:11:20.970
not really familiar with the
planetary body class or which

00:11:20.970 --> 00:11:23.080
methods it supports.

00:11:23.080 --> 00:11:26.250
If I just type it in and invoke
code completion, it'll

00:11:26.250 --> 00:11:29.270
come up with all the fields and
methods available on the

00:11:29.270 --> 00:11:32.330
planetary body class, including
one called add

00:11:32.330 --> 00:11:35.730
planet, which looks like
a likely candidate.

00:11:35.730 --> 00:11:37.370
Now we want to create
a new planet.

00:11:37.370 --> 00:11:39.095
I type in the constructor.

00:11:39.095 --> 00:11:41.110
I'll let code completion finish
the rest of the typing

00:11:41.110 --> 00:11:45.170
for me, including filling in
all the variable names.

00:11:45.170 --> 00:11:46.420
Let's finish this up.

00:11:58.270 --> 00:12:00.145
Save, and run the application.

00:12:04.310 --> 00:12:08.920
So you can see that Mars now
has a new moon around it.

00:12:08.920 --> 00:12:10.500
So code completion
is also great for

00:12:10.500 --> 00:12:12.230
exploring APIs in the SDK.

00:12:12.230 --> 00:12:16.620
If I navigate to the draw
background method, I can see

00:12:16.620 --> 00:12:18.330
that we're drawing into
a context object.

00:12:18.330 --> 00:12:20.220
If I want to see what other
drawing operations it

00:12:20.220 --> 00:12:22.330
supports, I can invoke code
completion and browse the

00:12:22.330 --> 00:12:24.950
available fields and methods.

00:12:24.950 --> 00:12:27.680
So I see that I have some
shadowing operations

00:12:27.680 --> 00:12:31.295
available, BZA curves, and
general drawing operations.

00:12:33.910 --> 00:12:36.210
In order to allow you to use
untyped code and still get the

00:12:36.210 --> 00:12:38.420
benefits of our Editor features,
we've included a

00:12:38.420 --> 00:12:40.030
type inference engine.

00:12:40.030 --> 00:12:42.040
It'll make a best effort to
infer what the type of your

00:12:42.040 --> 00:12:43.920
var variable is and treat
it accordingly.

00:12:43.920 --> 00:12:46.360
You'll get code completion as
well as verification of fields

00:12:46.360 --> 00:12:49.430
and method calls, all without
having to explicitly identify

00:12:49.430 --> 00:12:51.040
the type of your variable.

00:12:51.040 --> 00:12:52.260
Let's see this in action.

00:12:52.260 --> 00:12:54.020
I'm going to go to the
draw children method.

00:12:54.020 --> 00:12:57.700
If you look in here, you can
see that we have an untyped

00:12:57.700 --> 00:12:58.860
var planet variable.

00:12:58.860 --> 00:13:01.600
Because it's in a for loop,
iterating over a list of

00:13:01.600 --> 00:13:04.690
planetary body objects, we can
infer that planet itself is a

00:13:04.690 --> 00:13:05.680
planetary body.

00:13:05.680 --> 00:13:09.620
If we activate code completion
for that variable, we can see

00:13:09.620 --> 00:13:12.210
that it does in fact have the
appropriate fields and methods

00:13:12.210 --> 00:13:15.290
for a planetary body class.

00:13:15.290 --> 00:13:26.180
And if we add a var foo
declaration, and try and code

00:13:26.180 --> 00:13:30.400
complete it, we can see that
we get all the valid

00:13:30.400 --> 00:13:31.810
completions for this
string class.

00:13:31.810 --> 00:13:34.430
So the Editor has correctly
inferred that this untyped var

00:13:34.430 --> 00:13:37.110
foo is, in fact, a string.

00:13:37.110 --> 00:13:38.980
One of the hallmarks of a modern
development environment

00:13:38.980 --> 00:13:41.320
is debugging, and the Editor
brings full support for

00:13:41.320 --> 00:13:43.110
source-level debugging
to Dart.

00:13:43.110 --> 00:13:45.120
We allow you to debug your
applications running in

00:13:45.120 --> 00:13:47.940
Dartium, and support the usual
debugging suspects like break

00:13:47.940 --> 00:13:50.400
points, variable inspection,
and stepping.

00:13:50.400 --> 00:13:52.270
And one nice feature is that,
because of the way the virtual

00:13:52.270 --> 00:13:54.765
machine is implemented, turning
on debugging by and

00:13:54.765 --> 00:13:57.470
large does not affect your
application's execution speed.

00:13:57.470 --> 00:13:59.320
So let's take a look at
debugging in action.

00:13:59.320 --> 00:14:02.450
We'll set a break point in the
start method and run the

00:14:02.450 --> 00:14:04.600
application.

00:14:04.600 --> 00:14:08.250
This will launch Dartium and
connect the debugger.

00:14:08.250 --> 00:14:09.960
And now you see we've
hit the break point.

00:14:09.960 --> 00:14:12.630
We can see the call stack and
the frames on the stack.

00:14:12.630 --> 00:14:18.080
You can navigate around and
inspect local variables.

00:14:18.080 --> 00:14:20.360
Simple object types like ints
and strings, we show the

00:14:20.360 --> 00:14:22.680
values of, and more complicated
objects, we call

00:14:22.680 --> 00:14:26.230
the toString method of.

00:14:26.230 --> 00:14:29.270
You can see that the Earth
object just says instance of

00:14:29.270 --> 00:14:31.250
planetary body.

00:14:31.250 --> 00:14:33.530
This is the default toString
result, but let's change that

00:14:33.530 --> 00:14:35.870
to something that's a little
bit more descriptive.

00:14:35.870 --> 00:14:39.040
We'll navigate to the planetary
body class and add a

00:14:39.040 --> 00:14:40.290
toString method.

00:14:51.460 --> 00:14:55.770
If we save and re-run the
application, we can see that

00:14:55.770 --> 00:15:00.380
we've hit the same break point,
but the value for Earth

00:15:00.380 --> 00:15:03.730
that's displayed is now the
new toString method.

00:15:03.730 --> 00:15:05.510
And notice that we were able to
get the result of the code

00:15:05.510 --> 00:15:06.835
change without having
to restart Dartium.

00:15:09.470 --> 00:15:12.040
Another way to inspect
local variables is by

00:15:12.040 --> 00:15:13.640
hovering over them.

00:15:13.640 --> 00:15:15.870
So we're can hover over
the Earth variable.

00:15:15.870 --> 00:15:17.200
And it calls the toString
method on it.

00:15:17.200 --> 00:15:19.736
And we can hover over
the this variable.

00:15:19.736 --> 00:15:21.950
And it'll call the default
toString of the

00:15:21.950 --> 00:15:25.120
solar system class.

00:15:25.120 --> 00:15:26.950
What's nice about this is that
you can see the values of the

00:15:26.950 --> 00:15:29.240
variables without having to lose
context or try to locate

00:15:29.240 --> 00:15:31.380
them in the variables view.

00:15:31.380 --> 00:15:32.830
Now let's show some stepping.

00:15:32.830 --> 00:15:33.940
Let's set a break point
in the draw

00:15:33.940 --> 00:15:38.755
method and resume execution.

00:15:42.186 --> 00:15:44.310
We hit the break point, and we
can see the values of the

00:15:44.310 --> 00:15:46.220
local variables.

00:15:46.220 --> 00:15:48.210
But more importantly, we can
also trace the execution of

00:15:48.210 --> 00:15:48.970
the application.

00:15:48.970 --> 00:15:53.630
So let's step into the draw
background call and step over

00:15:53.630 --> 00:15:56.390
a few times and step out.

00:15:59.840 --> 00:16:01.640
If we step into the draw planets
call, we can see

00:16:01.640 --> 00:16:04.500
something interesting.

00:16:04.500 --> 00:16:06.860
If we step in again, you'd
expect to step into the sun

00:16:06.860 --> 00:16:08.690
draw method.

00:16:08.690 --> 00:16:10.950
But we actually step into
the width getter.

00:16:10.950 --> 00:16:12.680
This is because it looks
like a property access.

00:16:12.680 --> 00:16:14.120
It's really an invocation
of a getter.

00:16:16.940 --> 00:16:23.450
The debugger also supports
resuming execution and

00:16:23.450 --> 00:16:24.700
terminating the process.

00:16:26.840 --> 00:16:29.440
While Dart's primary focus is
on the web, we also support

00:16:29.440 --> 00:16:31.060
command-line applications.

00:16:31.060 --> 00:16:32.795
In order to show this off, we'll
open one of the examples

00:16:32.795 --> 00:16:34.190
that ships with the Editor.

00:16:34.190 --> 00:16:38.400
If you go to the Tools, Welcome
Page menu item, you

00:16:38.400 --> 00:16:41.740
can see that we have a
time server example.

00:16:41.740 --> 00:16:44.200
This is a simple HTTP server
that responds with the current

00:16:44.200 --> 00:16:45.460
date and time.

00:16:45.460 --> 00:16:48.520
We can click on it in order to
open the application, and then

00:16:48.520 --> 00:16:49.870
click on the Run button
to run it.

00:16:54.590 --> 00:16:57.450
For command-line applications,
just like in Dartium launches,

00:16:57.450 --> 00:16:59.470
the process app shows up in the
console view at the bottom

00:16:59.470 --> 00:17:01.060
of the Editor.

00:17:01.060 --> 00:17:04.859
From this view, you can clear
the process output and can

00:17:04.859 --> 00:17:07.400
choose to terminate
the application.

00:17:07.400 --> 00:17:10.440
Let's run it again, and verify
that the web server is, in

00:17:10.440 --> 00:17:11.690
fact, running.

00:17:13.910 --> 00:17:19.030
So let's copy this URL,
paste it into Chrome.

00:17:27.069 --> 00:17:28.369
And we see that we get
a response back

00:17:28.369 --> 00:17:29.450
from the web server.

00:17:29.450 --> 00:17:31.420
And if we go back to the console
output, we can see

00:17:31.420 --> 00:17:35.180
that we've got several requests
for resources.

00:17:35.180 --> 00:17:37.070
Diving into the source, we can
see that the application

00:17:37.070 --> 00:17:39.850
imports the Dart IO library.

00:17:39.850 --> 00:17:42.160
This is the main library for
command line applications.

00:17:42.160 --> 00:17:44.650
It supports file and networking
operations, process

00:17:44.650 --> 00:17:46.740
management functions, and other
operations useful in a

00:17:46.740 --> 00:17:48.880
command line, non-browser
environment.

00:17:48.880 --> 00:17:50.920
Again, in order to find out more
info about this library,

00:17:50.920 --> 00:17:55.550
you can hyperlink into it and
explore the implementation, or

00:17:55.550 --> 00:18:00.680
get more documentation online
using the API reference.

00:18:00.680 --> 00:18:03.010
Thank you for watching this
tour of the Dart Editor.

00:18:03.010 --> 00:18:04.940
To get more information about
Dart, please visit

00:18:04.940 --> 00:18:05.820
dartlang.org.

00:18:05.820 --> 00:18:08.780
And to download the Editor,
visit dartlang.org/editor.

00:18:08.780 --> 00:18:10.030
Thanks again.

