WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:05.650
Now, let's discuss the relationship between the dependencies we have seen and

00:00:05.650 --> 00:00:10.870
what we call hazards in our pipeline. A dependence is the property of

00:00:10.870 --> 00:00:14.440
the program alone. We can just check whether two instructions have

00:00:14.440 --> 00:00:19.730
a dependence between them without any regard to what the pipeline looks like.

00:00:19.730 --> 00:00:25.600
In a particular pipeline, some dependencies will cause problems, potentially,

00:00:25.600 --> 00:00:30.240
and some dependencies can not cause problems no matter what.

00:00:30.240 --> 00:00:34.750
Let's look at an example of this. Let's say we have the classical five stage

00:00:34.750 --> 00:00:38.640
pipeline with fetch, decode, ALU, memory, and write stages. And

00:00:38.640 --> 00:00:43.330
let's consider two instructions like this that have an output dependence.

00:00:43.330 --> 00:00:49.030
In this particular pipeline, I will show you that this output dependence is

00:00:49.030 --> 00:00:55.740
never a problem. The ADD will move through this pipeline, until the right stage,

00:00:55.740 --> 00:01:00.610
and that is when it will update R1. So let's look at the cycle while the ADD is

00:01:00.610 --> 00:01:06.600
here, and the multiply is following behind it. At this point,

00:01:06.600 --> 00:01:11.640
the multiplication has been fetched, has been decoded, and read R4 and R5.

00:01:11.640 --> 00:01:16.350
If you read the correct value, because these are not affected by the ADD. And

00:01:16.350 --> 00:01:20.260
now, it's just sitting in a MEM stage, because it's not a memory operation.

00:01:20.260 --> 00:01:25.080
It has the value that it will deposit in R1. When the ADD leaves the pipeline in

00:01:25.080 --> 00:01:30.970
the next cycle, the multiply will get here and have its write of R1.

00:01:30.970 --> 00:01:37.520
So, as you can see, these instructions always write to R1 in the correct order.

00:01:37.520 --> 00:01:41.980
So the fact that there is this output dependence doesn't mean that we have to

00:01:41.980 --> 00:01:46.780
worry about it in this pipeline. This dependence will be naturally satisfied in

00:01:46.780 --> 00:01:51.880
this pipeline because the writes by different instructions are always

00:01:51.880 --> 00:01:54.300
occurring in program order in this pipeline.

00:01:54.300 --> 00:01:58.990
Now let's consider a write after read dependence. Let's say that there is

00:01:58.990 --> 00:02:04.780
a subtract instruction here that overwrites R4 that was read by the multiply.

00:02:04.780 --> 00:02:11.400
At the point where the multiply reads R4, the subtract is being fetched.

00:02:11.400 --> 00:02:17.150
So the multiply reads the value of R4, that was not affected by the subtract.

00:02:17.150 --> 00:02:25.230
Later on when the multiply is done, the subtract will finally write to R4. And

00:02:25.230 --> 00:02:30.900
that again means that the fact that there is a dependence between the read and

00:02:30.900 --> 00:02:35.560
the write in the consecutive instructions. Is never a problem for

00:02:35.560 --> 00:02:39.290
our pipeline because the read of R4 in the multiply

00:02:39.290 --> 00:02:44.390
occurs many cycles before the subtract overrides that value.

00:02:44.390 --> 00:02:49.680
So again, we have a dependence that cannot become a problem in our pipeline.

00:02:49.680 --> 00:02:54.180
Now let's look at what happens when there is a true dependence in this pipeline.

00:02:54.180 --> 00:02:57.990
In this case R4 here should be used by the next instruction.

00:02:57.990 --> 00:03:04.410
The divide is reading R4 in a cycle where the subtract is here. Clearly,

00:03:04.410 --> 00:03:10.070
at that time subtract didn't put its R4 value in the register R4.

00:03:10.070 --> 00:03:12.920
It is actually just computing that value so

00:03:12.920 --> 00:03:17.035
when the divide reads register four it's reading a stale value for

00:03:17.035 --> 00:03:23.090
four that existed before the subtract. Several cycles later when the subtract

00:03:23.090 --> 00:03:29.070
is writing to that register the divide has already computed its value and

00:03:29.070 --> 00:03:33.220
the next cycle divide will write that bogus value into the register. So

00:03:33.220 --> 00:03:37.830
pretty much it divide, read the wrong value R4, computed with that wrong value,

00:03:37.830 --> 00:03:41.890
and then eventually deposits that wrong value into a register. So

00:03:41.890 --> 00:03:47.470
clearly, this true dependence here is a problem in our pipeline.

00:03:47.470 --> 00:03:51.220
If we just let things go and flow through the pipeline,

00:03:51.220 --> 00:03:57.360
we will have the wrong result deposited into R10 by the divide. The situation

00:03:57.360 --> 00:04:03.000
when our dependence can cause a problem in a pipeline is called a hazard. So

00:04:03.000 --> 00:04:09.060
a hazard occurs when a dependence results in incorrect execution of one or

00:04:09.060 --> 00:04:14.778
more instructions. Hazards are a property of both the program,

00:04:14.778 --> 00:04:20.690
because you cannot have a hazard unless you have a dependence, but also

00:04:20.690 --> 00:04:25.620
of the pipeline itself. How the dependence is interacting with the pipeline. So

00:04:25.620 --> 00:04:32.230
for example we have seen that output and anti-dependencies in this particular

00:04:32.230 --> 00:04:37.710
pipeline cannot become hazardous. But true dependencies can.

00:04:38.750 --> 00:04:43.650
Now I will show you that not all true dependencies are hazards in this pipeline.

00:04:44.950 --> 00:04:49.774
In this case, we have seen that a dependence between consecutive instructions

00:04:49.774 --> 00:04:55.980
creates a hazard in this pipeline. Let's say that the write to R7 occurs

00:04:55.980 --> 00:05:01.832
in this multiply instruction, and that we now have an XOR that uses R1 and

00:05:01.832 --> 00:05:07.090
R7. Let's now see whether there is a dependence between the ADD and XOR.

00:05:07.090 --> 00:05:10.870
Yes, there is. R1 produced by the ADD should be used by the XOR. And

00:05:10.870 --> 00:05:13.790
there is also dependence between the multiply and the XOR.

00:05:13.790 --> 00:05:18.870
But let's see if these dependencies are hazards in this particular pipeline.

00:05:18.870 --> 00:05:23.910
When the XOR is in the decode stage, the divide is in the ALU stage,

00:05:23.910 --> 00:05:27.840
the subtract is in the MEM stage, and the multiply is in the write stage, and

00:05:27.840 --> 00:05:32.870
the ADD has left the pipeline. It was writing to R1 in the previous cycle.

00:05:32.870 --> 00:05:37.840
So as you can see, the dependence between the ADD and

00:05:37.840 --> 00:05:43.280
the XOR is not a hazard in this pipeline. Pretty much in this pipeline,

00:05:43.280 --> 00:05:46.750
if there are three or more instructions between the producing and

00:05:46.750 --> 00:05:52.120
the consuming instruction, then the consuming instruction reads the register

00:05:52.120 --> 00:05:57.454
after the producing one has already written it. However, the dependents on

00:05:57.454 --> 00:06:03.492
R7 between the multiply and XOR is potentially a problem in this pipeline,

00:06:03.492 --> 00:06:09.624
because the XOR is reading R7 in the cycle during which multiply is writing it

00:06:09.624 --> 00:06:14.750
to the register. So if this write completes near the end of the clock cycle and

00:06:14.750 --> 00:06:19.610
this read is happening near the beginning of the clock cycle,

00:06:19.610 --> 00:06:24.700
the XOR will not read the R7 produced by the multiply. In this pipeline we

00:06:24.700 --> 00:06:29.860
can tell that a true dependence is not a hazard if there is three or

00:06:29.860 --> 00:06:34.390
more instructions between the producing and consuming instruction. But

00:06:34.390 --> 00:06:39.000
it is a hazard if there is fewer then three instructions between them.

00:06:39.000 --> 00:06:41.696
In this case there are only two instructions in between and

00:06:41.696 --> 00:06:43.300
that is why we still have a hazard.

