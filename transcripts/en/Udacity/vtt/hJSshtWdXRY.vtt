WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:04.205
You've just wrote a program that prints out Eliza's to do this, and it probably

00:00:04.205 --> 00:00:09.328
looks somewhat like this. A counter starts at 1, it goes up to 6, we do some

00:00:09.328 --> 00:00:15.570
work, we increment the counter, keep on doing, until the counter. Has reached

00:00:15.570 --> 00:00:18.893
its end. There's nothing wrong with it. But if you think about it, the three

00:00:18.893 --> 00:00:24.369
statements that control the counter. The initialization, the check, and the

00:00:24.369 --> 00:00:29.299
update. They're spread all over the loop. The for loop is there, to organize

00:00:29.299 --> 00:00:34.200
it a bit more neatly. Here is the basic outline of the for loop. It has three

00:00:34.200 --> 00:00:38.966
slots. And, we fill in the right statements, in each one of them. And I'll

00:00:38.966 --> 00:00:44.014
demonstrate that. In this low tech way. We'll cut out the initialization, the

00:00:44.014 --> 00:00:51.091
condition, and the update, and we'll put them in the right slot. Initialization

00:00:51.091 --> 00:00:55.805
goes here. The condition goes here. And the update goes here. Now, you see,

00:00:55.805 --> 00:01:00.574
they're all neatly together in the hetero of the four loop. Let's have a quick

00:01:00.574 --> 00:01:05.114
look at the control flow. We start with the initialization. Then we check the

00:01:05.114 --> 00:01:10.615
condition. We go into the inside of the loop. Then we do the update. Now, the

00:01:10.615 --> 00:01:15.640
counter is 2. We check the condition. We go into the inside of the loop. We do

00:01:15.640 --> 00:01:20.537
the update. Now, the counter is 3. We check the condition. We go inside the

00:01:20.537 --> 00:01:25.518
loop. We do with the update, we check the condition, we go and set the loop. Do

00:01:25.518 --> 00:01:30.065
with the update, check the condition, go inside the loop, through the update.

00:01:30.065 --> 00:01:34.829
And eventually, the condition is false, and we leave the loop. Notice that the

00:01:34.829 --> 00:01:38.987
initialization happens once, the check happens before entering the loop, and

00:01:38.987 --> 00:01:43.669
the update happens after finishing an iteration of the loop.

