WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:04.402
Notice that there are three rotation angels on the three.js object. You can

00:00:04.402 --> 00:00:09.236
rotate around the x, y, or z axis all together. If you're controlling a plane,

00:00:09.236 --> 00:00:13.274
the x rotation is known as the pitch angle. Since it pitches the plane up and

00:00:13.274 --> 00:00:16.932
down, the y angle is known as the yaw or head direction, since that's the

00:00:16.932 --> 00:00:21.576
direction the plane heads. Z is the roll, how much you're rotating around the

00:00:21.576 --> 00:00:26.167
axis of the plane itself. In some other fields these angles are called the x

00:00:26.167 --> 00:00:30.970
roll, y roll and z roll. These angles are called Euler angles when used together

00:00:30.970 --> 00:00:34.297
in this way. They're named after Leonhard Euler, a Swiss mathematician and

00:00:34.297 --> 00:00:37.915
physicist who lived in the eighteenth century. He was one of the most prolific

00:00:37.915 --> 00:00:42.500
mathematicians of all time. If you have ever run across the number e, that's

00:00:42.500 --> 00:00:47.094
called Euler's number. Euler invented using the sigma sign for summation. Just

00:00:47.094 --> 00:00:51.126
listing out his accomplishments would take a whole unit at least, but you get

00:00:51.126 --> 00:00:54.710
the idea. There's a great quote from Euler that sums him up for me. When he lost

00:00:54.710 --> 00:00:59.199
the use of his right eye, he said, now I will have less distraction. In

00:00:59.199 --> 00:01:04.173
three.js, the Euler angels are applied to the model in the orders z, y, and x. I

00:01:04.173 --> 00:01:08.862
should mention that this order can be different in different applications. For

00:01:08.862 --> 00:01:13.306
example, the order z, x, z is seen in robotics. What happens if you rotate

00:01:13.306 --> 00:01:17.430
around two or more of these axes? The short answer is that the frame of

00:01:17.430 --> 00:01:22.065
reference changes for each rotation. This is actually easier to see than to

00:01:22.065 --> 00:01:26.430
explain. Here I'm changing the x rotation. And you can see that the plane

00:01:26.430 --> 00:01:30.588
pitches up and down. Now, applying the y rotation, notice that we're not

00:01:30.588 --> 00:01:35.375
rotating around the world's y-axis. But rather, around a plane that is defined

00:01:35.375 --> 00:01:39.560
by the x rotation. In other words, the y rotation is applied with respect to the

00:01:39.560 --> 00:01:43.555
plane's frame of reference, not the world's. In fact, all the rotations are

00:01:43.555 --> 00:01:47.380
applied with respect to the plane. The initial x rotation just happened to be

00:01:47.380 --> 00:01:52.036
aligned with the world. The z rotation is also clearly changing with respect to

00:01:52.036 --> 00:01:56.818
the plane's orientation, rolling it along its axis. Euler angles are handy for

00:01:56.818 --> 00:02:01.234
flight simulators, robotic applications, and even mobile applications, as they

00:02:01.234 --> 00:02:05.440
can be used to describe the orientation of the mobile device itself. However,

00:02:05.440 --> 00:02:09.945
Euler angles can also run into limitations, such as the problem of Gimbal lock.

00:02:09.945 --> 00:02:15.022
For example, say that I set the angle of rotation for the y-axis to 90 degrees.

00:02:15.023 --> 00:02:20.535
You can now see that the x rotation and the z rotation have exactly the same

00:02:20.535 --> 00:02:25.418
effect. We've lost a degree of freedom under these conditions, limiting how we

00:02:25.418 --> 00:02:29.271
can move away from this orientation. I encourage you to play with the Euler

00:02:29.271 --> 00:02:32.484
angles demo that follows and get a feel for the strengths and limitations of

00:02:32.484 --> 00:02:37.556
this method of setting rotations. Definitely try setting the y angle to about 90

00:02:37.556 --> 00:02:39.793
degrees to see Gimbal lock in action.

