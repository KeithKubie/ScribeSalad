WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.170
&gt;&gt; SLATKIN: So this is talk on making your
application real-time with PubSubHubbub. We

00:00:08.170 --> 00:00:14.710
call it Hubbub for short often. So if you
hear--as referring to it that's what we're

00:00:14.710 --> 00:00:20.150
talking about. We also sometimes call it PuSH
for short or PSHB depending on who you ask.

00:00:20.150 --> 00:00:27.030
So, yeah--okay, so yeah my name is Brett Slatkin.
I'm a software engineer on the Google App

00:00:27.030 --> 00:00:32.509
Engine team. PubSubHubbub is something that
me and Brad Fitzpatrick is also here to came

00:00:32.509 --> 00:00:36.450
up with, along with some other people in the
community like Martin Atkins from Six Apart

00:00:36.450 --> 00:00:41.610
and we've been working on a lot with the community
to improve it and build it out, incorporate

00:00:41.610 --> 00:00:47.370
feedback and so on. So today, we're going
to be talking about a number of things. To

00:00:47.370 --> 00:00:53.640
start off, if you want to look at notes or
know how to tweet about this, the hashtag,

00:00:53.640 --> 00:00:57.120
there's a live wave, there's a moderator questions
you can load up and all that kind of stuff.

00:00:57.120 --> 00:01:08.600
It's also, my site, if you want to follow
me--so here it is so, tinyurl.com/push-io2010.

00:01:08.600 --> 00:01:19.150
Okay, so, the agenda. So, we're going to have
a little intro. We're going to talk about--are

00:01:19.150 --> 00:01:24.530
they okay? All right. We're going to talk
about publishing. We're going to talk about

00:01:24.530 --> 00:01:28.409
subscribing. We're talking about what Hubs
are? How they work, what they are for? We

00:01:28.409 --> 00:01:36.759
have a special guest, Julien Genestoux from
Superfeedr. He's going to talk Superfeedr

00:01:36.759 --> 00:01:40.729
and what Superfeedr does and how that hooks
into all of this. Then we're going to talk

00:01:40.729 --> 00:01:46.069
about some progress and adoption, and future
work and improvement and things that are kind

00:01:46.069 --> 00:01:56.819
of are going on right now. So, intro; "What
is PubSubHubbub?" So, PubSubHubbub is a simple

00:01:56.819 --> 00:02:02.389
topic-based publish and subscribe protocol.
It turns Atom and RSS feeds into real-time

00:02:02.389 --> 00:02:10.670
streams, that's what it does. But it's a single
API for web-scale and low-latency messaging.

00:02:10.670 --> 00:02:15.610
So, the idea is here is that we're making
it very easy for developers to add real-time

00:02:15.610 --> 00:02:22.360
capabilities to their applications online,
their web apps. And in PubSubHubbub, there

00:02:22.360 --> 00:02:27.670
are three participants; there's a Publisher,
who's publishing a feed of content or information.

00:02:27.670 --> 00:02:32.080
There's a Subscriber who wants to get that
information, and then there's this Hub in

00:02:32.080 --> 00:02:37.480
the middle. And the Hub is a logical component
but the idea, we're going in to some philosophical

00:02:37.480 --> 00:02:42.230
things but the Hub is a facilitator of this
relationship, tries to make it as easy as

00:02:42.230 --> 00:02:50.800
possible for Publishers and Subscribers to
work together. So some design goals. First

00:02:50.800 --> 00:02:55.510
of all, we wanted to be decentralized. Some
of the things that existed in the past like

00:02:55.510 --> 00:02:59.910
ping-o-matic; we're actually kind of centralized
systems. People have talked about feed mash

00:02:59.910 --> 00:03:05.160
and some other ping technologies in the past.
But a lot of them, you know, had many points

00:03:05.160 --> 00:03:10.530
of failure or single points of failure and
we're decentralized, we're in control of one

00:03:10.530 --> 00:03:14.900
company. So first of all, we want it to be
an open spec that anyone can implement, have

00:03:14.900 --> 00:03:20.610
a lot of different thesis working together
which is kind of how, what the web is built

00:03:20.610 --> 00:03:25.520
on, right? The other thing is we wanted to
scale those sizes of the whole web. So, you

00:03:25.520 --> 00:03:30.760
know, the web is built of with decentralized
protocols that scale up and can work in massive

00:03:30.760 --> 00:03:36.200
scale. We wanted PubSubHubbub to work the
same way. We wanted to make publishing and

00:03:36.200 --> 00:03:41.871
subscribing as easy as possible. So, that
it'd be very easy for you to get started with

00:03:41.871 --> 00:03:45.780
the protocols, start adopting it and start
using it in your applications immediately.

00:03:45.780 --> 00:03:49.820
And part of the reason we did that is because
we knew we wanted a critical mass of people

00:03:49.820 --> 00:03:53.731
to use this so they would catch on and I'm
happy to say that we're starting to get there

00:03:53.731 --> 00:03:58.630
which is great and we'll talk more about that
later. But in order to do that, in order to

00:03:58.630 --> 00:04:03.870
make it easy for Publishers and Subscribers,
we decided to push any complexity towards

00:04:03.870 --> 00:04:11.160
the Hub. So, anytime we can make it easier
for Publishers or Subscribers in their job

00:04:11.160 --> 00:04:15.680
to build their applications. We decided to
kind of push things back up into this agent

00:04:15.680 --> 00:04:21.180
called the Hub which facilitates this relationship,
and by doing that, we make it extremely easy

00:04:21.180 --> 00:04:27.830
for Publishers and Subscribers to use the
protocol. The other thing is and for all the

00:04:27.830 --> 00:04:34.360
XMPP folks in the room. XMPP, we understand
it, Brad's doing the server in it. It's something

00:04:34.360 --> 00:04:39.161
that a lot of people like in using Google,
embraces in a lot of ways but, for whatever

00:04:39.161 --> 00:04:43.229
reason, it hasn't necessarily caught on in
the way that everybody wants it to for publish

00:04:43.229 --> 00:04:49.780
and subscribe at web-scale. And so, with PubSubHubbub,
what we've been trying to do is solve a kind

00:04:49.780 --> 00:04:53.740
pragma, you know, taking a pragmatic approach
to this and solve the real problems that people,

00:04:53.740 --> 00:04:58.870
developers are having everyday. So, you know,
there's a lot of things in PubSubHubbub that

00:04:58.870 --> 00:05:02.749
are a little crafty or maybe don't have the
best usage of verbs and stuff like that and

00:05:02.749 --> 00:05:07.909
the reason is that is pragmatic. So, it's
unnecessarily ideologically pure like a lot

00:05:07.909 --> 00:05:13.419
of XMPP is where it's, you know, perfectly
balanced and well-thought out. And, but the

00:05:13.419 --> 00:05:16.639
reason is that we wanted to make it easy to
implement the libraries, have the libraries

00:05:16.639 --> 00:05:21.110
work with transparent proxies and so on and
so forth. All these practical considerations

00:05:21.110 --> 00:05:27.340
that kind of override the ideological ones,
and we also wanted to leave out a kind of--we

00:05:27.340 --> 00:05:30.979
want to leave some things on the table. So,
a lot of specs, you know, there'll be a one

00:05:30.979 --> 00:05:34.370
pager and then a few people will have, you
know, there'll be one pager that handles 50%

00:05:34.370 --> 00:05:39.830
of the use-cases, and then there'll be a two
pager that handles 75%, and then a three pager

00:05:39.830 --> 00:05:44.340
that handles 80%, and you get this diminishing
returns. So another part of PubSubHubbub,

00:05:44.340 --> 00:05:48.759
what we were trying to accomplish was, you
know, basically hit, dissolve, no new use-cases

00:05:48.759 --> 00:05:55.689
that everybody has right now and a kind of
not to some things specifically so that we

00:05:55.689 --> 00:06:02.889
could just get this protocol started and get
people using it. So, let's do a demo. Let's

00:06:02.889 --> 00:06:10.430
see if this works. So here is, all right,
here is a whole bunch of apps. Let me just

00:06:10.430 --> 00:06:15.669
click around. So this is, on the upper right
is FriendFeed; on the upper left is Google

00:06:15.669 --> 00:06:24.569
Reader; in the middle here is Blogger; lower
left is Buzz; lower right is click set. And

00:06:24.569 --> 00:06:29.210
I have a blog here that's connected to my
Buzz profile and it's also connected all these

00:06:29.210 --> 00:06:36.250
other feed pieces. And so, I'm going to post
the feed now; Bloggers Hubbub enabled and

00:06:36.250 --> 00:06:41.639
so are these other hosts. So when I click,
post, depending on how much time we've got.

00:06:41.639 --> 00:06:48.949
Hey, there everyone, do you see that? Show
that, there it is. Let's see if it showed

00:06:48.949 --> 00:06:53.750
up in Brett's test blog too and it's probably
here but it's not reloading because we got

00:06:53.750 --> 00:06:59.479
a lot of traffic right now. Okay. So, you
already see that it's really quick from publish

00:06:59.479 --> 00:07:06.919
to receive, right? We're trying to do real-time
web technologies, low-latency, massive distribution

00:07:06.919 --> 00:07:10.229
and we already have a bunch of products, we
have bunch of different vendors here, it's

00:07:10.229 --> 00:07:13.889
publishing and subscribing. I'm using Blogger
in this case but you could be using LiveJournal,

00:07:13.889 --> 00:07:19.930
you could be using WordPress, you could be
using TypePad, so we got a lot of people allowing

00:07:19.930 --> 00:07:27.589
it to publish and subscribe. All right, we'll
continue. So, a big question that we get is,

00:07:27.589 --> 00:07:33.469
why another protocol, why another publish
and subscribe protocol? And, you know, almost

00:07:33.469 --> 00:07:36.460
every company out there has their own system
for doing this and there's a lot of really

00:07:36.460 --> 00:07:42.279
good ones out there. But a lot of the time
those internal systems for message queuing

00:07:42.279 --> 00:07:47.050
are just kind of much more than you actually
need on the web. What we found is that what

00:07:47.050 --> 00:07:53.089
probably on the web is basic topic base messaging,
and then so we need a level of content filtering

00:07:53.089 --> 00:07:58.390
in terms of the robustness that it needs just
yet. They don't even realize what they need,

00:07:58.390 --> 00:08:02.400
so it's hard to convince people of all these
extra features when you can't even get them

00:08:02.400 --> 00:08:08.379
on board of any kind of PubSub integration.
So, we are trying to bridge the islands basically.

00:08:08.379 --> 00:08:12.800
Take every company who's got an internal NQ
system and say, "Well, I know you're generating

00:08:12.800 --> 00:08:16.279
events and I'm generating events but we use
different systems for our own business needs.

00:08:16.279 --> 00:08:20.819
How can we connect them together in the way
that it's useful?" And if you look at a lot

00:08:20.819 --> 00:08:25.469
of these that either have a proprietary messaging
payload or they have a standard that doesn't,

00:08:25.469 --> 00:08:30.319
like a standard wire format that doesn't use
HTTP or can't be load balance, have different

00:08:30.319 --> 00:08:34.570
network, topology needs. So there's a bunch
of issues for these systems that prevents

00:08:34.570 --> 00:08:41.050
them from being massively integrated without
a lot of effort. So, people have tried to

00:08:41.050 --> 00:08:45.690
standardize on simpler, a more simple topic
based messaging systems and other standards

00:08:45.690 --> 00:08:51.190
like that. And so, you know, XMPP is one of
them and XEP-60 which is XMPP PubSub is a

00:08:51.190 --> 00:08:57.801
great example of spec that really tried hard
to solve this PubSub need. But it's really

00:08:57.801 --> 00:09:03.779
not used for interop beyond IM that widely.
Another one social web project that came out

00:09:03.779 --> 00:09:07.060
of Vodafone research is trying to change that
and trying to do something new different and

00:09:07.060 --> 00:09:10.720
I definitely think it's a good thing for you
to check out and look out some of the ideas

00:09:10.720 --> 00:09:16.600
there. Maybe that they, maybe they'll be able
to get more traction of with what they're

00:09:16.600 --> 00:09:23.490
doing. But in the end, this attempts that
a standard for doing messaging are kind of

00:09:23.490 --> 00:09:28.620
overkill and they haven't been able to catch
on. And I can go through the list but, there's

00:09:28.620 --> 00:09:33.820
a reason for almost each one, you know, of
why it's too much so, I'll just quick to say,

00:09:33.820 --> 00:09:36.440
XEP-60 does a lot of stuff that a lot of people
don't need because they don't realize they

00:09:36.440 --> 00:09:41.220
needed it yet. Or the WS-Star stuff is too
much, too XML heavy and people don't necessarily

00:09:41.220 --> 00:09:45.110
want to do that. They just want to RESTful
interface. AMQPS is a different wire protocol,

00:09:45.110 --> 00:09:50.220
you can't load balance in the same way. RestMS
has been fluctuating a lot, so it actually

00:09:50.220 --> 00:09:56.500
hasn't been defined as a spec yet and the
rest of our stuff dictates URL parameters,

00:09:56.500 --> 00:10:02.980
so that you, or URL paths so that I can't
decide how I want my URLs to look. So, we

00:10:02.980 --> 00:10:10.339
tried to just avoid all of those issues as
much as we can. Okay, so quickly, how do you

00:10:10.339 --> 00:10:17.880
do it? So, if you have a feed, an Atom feed,
an RSS feed, and you want to make that feed

00:10:17.880 --> 00:10:22.600
real-time, you add the declaration to your
feed with the Hub of your choice or Hubs of

00:10:22.600 --> 00:10:25.360
your choice so that could be the reference
Hub which I have here it could be Superfeedr,

00:10:25.360 --> 00:10:31.649
and Julien will tell you more about that later.
Then you publish something to your feed, so

00:10:31.649 --> 00:10:37.600
it's in the document and then you send the
ping with the feed URL to your Hubs, one or

00:10:37.600 --> 00:10:43.490
more, you can use as many as you want. And
it's just a simple web from URL encoded payload

00:10:43.490 --> 00:10:48.110
just like your browser would send, and you
say Hub mode is published and Hub URL this

00:10:48.110 --> 00:10:53.519
is my feed. So, this is what I've updated.
If you get back a 204, no content that means

00:10:53.519 --> 00:10:57.399
that the ping was received. If you get back
a 400 that means you did something wrong.

00:10:57.399 --> 00:11:02.490
If you get back a 500 that means the server
is hurting or something, it did something

00:11:02.490 --> 00:11:06.269
wrong. That's it. That's what we're talking
about, try to make it as easy as possible

00:11:06.269 --> 00:11:11.660
for Publishers. This is so easy. You can do
it from a bookmark load. It's like ridiculously

00:11:11.660 --> 00:11:20.089
easy. Some best practices, we'll get into
this more for later but, you actually can,

00:11:20.089 --> 00:11:25.630
as a Publisher, do server-side filtering.
Just do it with the virtual feed I.D. or some

00:11:25.630 --> 00:11:31.290
kind of conflict, a topic URL that encodes
some extra information. So, here if I have

00:11:31.290 --> 00:11:36.750
my stuff app on example.com and I want to
find things in zip code here at the conference

00:11:36.750 --> 00:11:43.080
center, that's a valid PubSubHubbub topic,
right? So you could subscribe to that. So,

00:11:43.080 --> 00:11:48.530
it's not content filtering as much as it is
topic based subscription, right? So, there's

00:11:48.530 --> 00:11:51.709
a lot of things you can encode in the URL.
If to deal with normalization some other stuff

00:11:51.709 --> 00:11:56.560
but that's a best practice for you if you're
building out some really cool real-time feeds

00:11:56.560 --> 00:12:01.400
for your site. Similarly, you can use URLs
for authorization. I'll get into this more

00:12:01.400 --> 00:12:06.589
later but, by using one time tokens and other
kinds of crypto parameters, you can make those

00:12:06.589 --> 00:12:11.620
URLs actually private to an individual. So
that if someone wants to syndicate, publish

00:12:11.620 --> 00:12:17.730
updates to only the one user, you can give
them a URL that only works for them and then

00:12:17.730 --> 00:12:27.230
Google Reader will only let them read their
own items, right? Okay, so, Subscribers, let's

00:12:27.230 --> 00:12:30.570
say you want to get the updates. You know
there's a whole bunch of feeds out there and

00:12:30.570 --> 00:12:36.110
you want to be able to get the data. So, somehow
you detect that there's a Hub declaration

00:12:36.110 --> 00:12:42.379
in the feed. So if I go back, you see I added
this, link rel equals hub href equals the

00:12:42.379 --> 00:12:48.000
Hub address. I put that in my Atom or RSS
document at the top level, feed level, or

00:12:48.000 --> 00:12:53.970
kind of level element and that declares where
the Hubs are located. So, supposedly you've

00:12:53.970 --> 00:12:58.120
come across the speed of the users inserted
the URL or you've done, spend auto discovery,

00:12:58.120 --> 00:13:02.410
you've done some crawling, whatever, you found
that there's a feed you want to subscribe

00:13:02.410 --> 00:13:07.569
to and in that feed you see that there's a
Hub link, so you're like, "Great, this has

00:13:07.569 --> 00:13:13.040
PubSubHubbub." So I will send a subscribe
request to the feed's Hubs, one or more and

00:13:13.040 --> 00:13:19.100
you could use multiple in the case of a liability.
In this case, you say, post, you know, post

00:13:19.100 --> 00:13:22.990
to it again, form URL encode like a browser,
so this is a really simple kind of web-hook,

00:13:22.990 --> 00:13:29.981
callback or web-hook calls. Again, you have,
you set the mode to subscribe. In this case,

00:13:29.981 --> 00:13:34.120
you have to verify a parameter which says
if you want to do synchronous or asynchronous.

00:13:34.120 --> 00:13:40.630
You say the topic feed that you want to subscribe
to and then the callback URL. So, when an

00:13:40.630 --> 00:13:47.060
event happens on this feed, where do you callback?
The Hub will send a request to that callback

00:13:47.060 --> 00:13:52.980
URL with little challenge string and a couple
of other things to verify that you are you

00:13:52.980 --> 00:13:58.040
and all you have to do is echo back the random
string, and that's just how we guarantee,

00:13:58.040 --> 00:14:03.589
that's how we authorize the callback and you
give a 200. Now once you do that, the subscription

00:14:03.589 --> 00:14:10.959
setup, and every time that feed updates and
the Publisher pings that feed, the Hub will

00:14:10.959 --> 00:14:16.519
go fetch it, figure out what's new and then
deliver a payload to your callback, that's

00:14:16.519 --> 00:14:23.890
all there's to it. So this is just a feed,
I've kind of gathered it. And in a lot of

00:14:23.890 --> 00:14:28.779
cases, the Hub will actually pull out old
items that you've seen before. So for speed,

00:14:28.779 --> 00:14:37.100
you can actually have differential protocols,
so you only get new items or change items.

00:14:37.100 --> 00:14:42.180
So let's talk about this magical Hub that
seems to make this so easy. So the Hub has

00:14:42.180 --> 00:14:48.040
a few functions, it accepts and verifies subscriptions
like I just described. It receives pings from

00:14:48.040 --> 00:14:52.161
the Publishers and retrieves a new contact,
that was first, the how to help Publishers.

00:14:52.161 --> 00:14:57.459
All right, extracts new and updated items
from the feed, or sends the whole feed depending

00:14:57.459 --> 00:15:02.149
on how it's implemented. And then it sends
all the subscribers a new content, so it does

00:15:02.149 --> 00:15:07.930
the fan-out, right? It also have some DoS
protections built into it to make sure that

00:15:07.930 --> 00:15:15.100
subscribers don't get overwhelmed and Publishers
don't get DoS and that kind of thing. It's

00:15:15.100 --> 00:15:18.980
also a logical component, so Publishers can
be their own Hub. You can combine Hubs and

00:15:18.980 --> 00:15:23.170
Publishers together to have like a peer to
peer speed up. You can also have different

00:15:23.170 --> 00:15:27.180
agreements between the Hubs and Publishers
so that if you want to publish on thrift or

00:15:27.180 --> 00:15:31.430
through JSON, if that's better your infrastructure,
you could do that that's outside of the boundary

00:15:31.430 --> 00:15:35.660
of the spec. So, the relationship between
a Publisher and the Hub is actually totally

00:15:35.660 --> 00:15:40.769
up in the air. It's not a specific requirement
of the protocol. The pinging that we've implemented

00:15:40.769 --> 00:15:43.970
as part of the base spec was to bootstrap
the protocols so that people can start using

00:15:43.970 --> 00:15:48.899
it immediately, so that you can ping from
a bookmark code for instance. But the Hub

00:15:48.899 --> 00:15:53.649
is what's able to facilitate this relationship
provides scalability and reliability delivering

00:15:53.649 --> 00:16:02.350
these messages and scaling them out. Okay.
So, now, I'm going to hand it over to Julien

00:16:02.350 --> 00:16:03.829
Genestoux?
&gt;&gt; GENESTOUX: Genestoux.

00:16:03.829 --> 00:16:09.320
&gt;&gt; SLATKIN: Genestoux, who's the main guy,
the superhero at Superfeedr. So, Julien.

00:16:09.320 --> 00:16:17.189
&gt;&gt; GENESTOUX: Good to meet you. So basically
we're Superfeedr and we're a shop that helps

00:16:17.189 --> 00:16:22.749
makes PubSubHubbub be something that is more
than just something at Google. And let me

00:16:22.749 --> 00:16:28.899
go into a little bit more details. For this,
we provide a few stuff. We provide what we

00:16:28.899 --> 00:16:33.860
call, first, the "Default hub." It's a Hub
that's works with basically any feed as Brett

00:16:33.860 --> 00:16:38.880
just showed us. PubSubHubbub is a protocol
that needs to be declared in a feed. The Superfeedr

00:16:38.880 --> 00:16:42.560
Hub works with any feed. So, if you're a subscriber,
you could say, "Hey, I want this content,

00:16:42.560 --> 00:16:48.569
please push it to me." We will do stuff to
get that to you. The second thing we do is

00:16:48.569 --> 00:16:52.480
"Hosted hubs." So we provide pretty much the
same thing as Google provides, for people

00:16:52.480 --> 00:16:57.709
who don't want to use the Google Hub for whatever
reason that they might have. The last thing

00:16:57.709 --> 00:17:03.220
we do is what we call "PubSubHubbub + Benefits."
So as Brett just showed us the bare protocol

00:17:03.220 --> 00:17:07.240
is pretty easy and simple and we just add
a few layers on top of this and I'm going

00:17:07.240 --> 00:17:11.860
to comeback to that later to make it better,
nicer, smarter, whatever you call it. So,

00:17:11.860 --> 00:17:16.500
let's start with the Default Hub. So this
is actually the "Historical Supefeedr." Superfeedr

00:17:16.500 --> 00:17:23.390
started last year, pretty much at the same
time. And, we were basically doing feed polling

00:17:23.390 --> 00:17:28.140
on behalf of other people. So, say, you are
a big service that needs to segregate a lot

00:17:28.140 --> 00:17:32.500
of content from the web. Instead of doing
that yourself, you would give us the URL and

00:17:32.500 --> 00:17:38.220
we would do that for you. The goal is to,
as much as we can avoid polling though. For

00:17:38.220 --> 00:17:42.640
that, we use different techniques like smart
scheduling. So, we try to determine when is

00:17:42.640 --> 00:17:47.920
the best time to fetch a feed base on historical
values, historical updates based on what you

00:17:47.920 --> 00:17:52.640
call feed graphs. So, for example, if you
have a FriendFeed account and a Twitter account,

00:17:52.640 --> 00:17:57.020
when we see an update in your Twitter stream,
we might assume that your FriendFeed is going

00:17:57.020 --> 00:18:00.400
to be updated and that you have linked the
two together. So, we all do this graphing

00:18:00.400 --> 00:18:05.260
to, you know, basically how updates propagate.
We also so stuff like "Protocol mapping."

00:18:05.260 --> 00:18:12.049
Last summer, there was a big fight between
PubSubHubbub and RSSCloud. Things pretty much

00:18:12.049 --> 00:18:16.650
over now but, we basically implemented the
two because we thought that subscribers shouldn't

00:18:16.650 --> 00:18:20.900
choose or at least shouldn't have to implement
all of them or choose to implement just a

00:18:20.900 --> 00:18:26.550
few of them. By implementing one, we would
be basically map that to any feed. So we implemented

00:18:26.550 --> 00:18:34.740
our SUP, which is a protocol that was made
by FriendFeed, XML-RPC, a few other stuff.

00:18:34.740 --> 00:18:41.890
We do push to Subscriber, pretty much exactly
what Brett described. And we also do XMPP,

00:18:41.890 --> 00:18:50.230
which Brett just trashed, but it's great.
But it's actually a great protocol. It has

00:18:50.230 --> 00:18:55.080
definitely some pretty steep learning curve,
I would say. But once you get it, it's pretty

00:18:55.080 --> 00:19:01.190
powerful. And we do, last thing, which is
the Schema mapping. In a nutshell, as a Subscriber,

00:19:01.190 --> 00:19:07.630
you shouldn't have to care whether the original
feed is item RSS, RSS0.92 or whatever. Or

00:19:07.630 --> 00:19:11.250
even if it's not valid, we just do the hard
work for you of having mapping everything

00:19:11.250 --> 00:19:15.740
into the same consistent format so your application
just have to consume that and do whatever

00:19:15.740 --> 00:19:22.751
is that you do best. So, basically, that's
the point here is focus on what you do best

00:19:22.751 --> 00:19:30.549
and we'll do the rest. A few use-cases, people
who actually use the default hub, there is

00:19:30.549 --> 00:19:36.830
a bunch of iPhone Apps that can send you notification
while you're at a conference, for example.

00:19:36.830 --> 00:19:40.701
We help them get content from feeds, so Urban
Airship is an example, Boxcar is another example.

00:19:40.701 --> 00:19:46.919
They're obviously feed readers. You guys already
know of Webwag or Feedingo which are, they're

00:19:46.919 --> 00:19:52.360
pretty nice application. We have desktop notification
so, your desktop application would subscribe

00:19:52.360 --> 00:19:55.440
to Superfeedr to get updates and then ping
you on the desktop Google-–sorry, Adobe

00:19:55.440 --> 00:20:03.000
made a product called Wave last year that
does this. We have also a few semantic search

00:20:03.000 --> 00:20:07.399
customers. We are, basically, they need to
have a lot of data rather than spending time

00:20:07.399 --> 00:20:11.120
gathering it. We just do that for them, push
it to them and then they do their magic, Guzzle.it

00:20:11.120 --> 00:20:17.370
and Twingly! are good example. And then there's
also a social web. Social Apps that might

00:20:17.370 --> 00:20:22.740
want to aggregate all your data from x social
service, might not just want to subscribe

00:20:22.740 --> 00:20:29.390
you all of the feeds and, well, just give
us the URL and we'll fetch them for them on

00:20:29.390 --> 00:20:33.659
their behalf. And the second thing we do is
the Hosted Hubs. The idea is like if you're

00:20:33.659 --> 00:20:37.909
a Publisher, you shouldn't have to reinvent
the wheel nor that you should have to run

00:20:37.909 --> 00:20:42.630
the wheel yourself. You just can't use somebody
who does it for you, and that's pretty much

00:20:42.630 --> 00:20:45.789
what we do. So, you're a Publisher and you
have feeds rather than implementing the protocol

00:20:45.789 --> 00:20:52.039
or use or should I say download and then sell
your own version of some open source code.

00:20:52.039 --> 00:20:58.120
Just give us like the pings and we'll care
about the rest. It's, on the other hand, we

00:20:58.120 --> 00:21:02.200
think it's, since it's your Hub, it needs
to be your data. So we of like full expert

00:21:02.200 --> 00:21:07.470
of the data at anytime, et cetera. So it's
really like running your own without any hassle

00:21:07.470 --> 00:21:14.140
and any maintenance or any debugging that
you would have to do. For quite a few cherries

00:21:14.140 --> 00:21:18.760
on the cake, like analytics, callbacks, meaning
like you might, as a Publisher, you might

00:21:18.760 --> 00:21:22.309
say, hey, PubSubHubbub is great but I don't
want to allow primers to get my content as

00:21:22.309 --> 00:21:25.890
soon as it published it, it doesn't make sense.
So, I want make their life not as easy as

00:21:25.890 --> 00:21:32.679
PubSubHubbub make it. So, I want to know upon
subscription with subscribing to what and

00:21:32.679 --> 00:21:38.539
this is what we actually implemented. A few
reference for Hubs that we host. Buzz or Tumblr

00:21:38.539 --> 00:21:44.810
in the blogging field, social networks like
Gowalla, Ping.fm, Media, Gawker, Huffington

00:21:44.810 --> 00:21:50.110
Post and there are a lot more to come. And
going back to the Schema Mapping, this is

00:21:50.110 --> 00:21:54.110
one of the things that we do and that I think
it's very important. Obviously, there is,

00:21:54.110 --> 00:21:59.419
as I said tons of different format and as
a Subscriber, you might not want to deal with

00:21:59.419 --> 00:22:03.919
pub date in RSS for the published dates and
published in item or even updated sometime

00:22:03.919 --> 00:22:10.929
in item. Or even like pub dates because there's
a typo in the feed, we will do that for you.

00:22:10.929 --> 00:22:14.320
The other thing is there's a ton of different
namespaces out there and some of them are

00:22:14.320 --> 00:22:19.280
very redundant. The Digg, the Mixx and the
Yahoo Buzz have their own namespace, which

00:22:19.280 --> 00:22:23.990
is basic--the information, the semantic is
the same. It's voting on a story and the number

00:22:23.990 --> 00:22:27.810
of votes. Why would you have to have six different
namespaces of Subscriber and implement all

00:22:27.810 --> 00:22:32.399
of them? So we just make sure that it's always
easy for you to consume the data. We have

00:22:32.399 --> 00:22:37.260
to secure about the ton of invalid stuff and
there's pretty good stories about this but

00:22:37.260 --> 00:22:41.789
basically missing tags, wrong dates and other
calendars like we've got our big dates and

00:22:41.789 --> 00:22:46.289
we need to tell you, "Hey, this happened in
13th century." This is actually not the case

00:22:46.289 --> 00:22:51.000
so, we need to figure that out. Unique IDs
that are not unique. We've seen pretty much

00:22:51.000 --> 00:22:56.500
a lot Publisher putting timestamps in unique
IDs, which kind of kills the purpose. We also

00:22:56.500 --> 00:23:01.580
do stuff like Geo-RSS. So we can push you
the data until you, "Hey, this is basically

00:23:01.580 --> 00:23:06.580
the geo coordinates of where it happened."
And we also do, for the social web, Activity

00:23:06.580 --> 00:23:12.850
Streams. So, as a consuming application, you
know the verb, the activity, I mean, the verb

00:23:12.850 --> 00:23:18.899
and the object that I concern very specific
activity. We, on top of PubSubHubbub also

00:23:18.899 --> 00:23:25.070
provide a few extensions. One of them that
we just launched last week is what we called

00:23:25.070 --> 00:23:29.789
Digest Notification. So the problem with most
of PubSubHubbub protocol is like it, they

00:23:29.789 --> 00:23:34.980
fail silently. If I tell you, "Hey, wait here,
I'm going to tell when there is something

00:23:34.980 --> 00:23:38.909
new," and I just go on vocation for like two
weeks. You're going to wait because you've

00:23:38.909 --> 00:23:42.821
assumed that I'm going to tell you while--no
matter what, I'm gone, so you can wait for

00:23:42.821 --> 00:23:47.149
a long time, it won't happen. So we implemented
what we call Digest Notification, which serves

00:23:47.149 --> 00:23:50.480
two purposes, Heartbeat, so we can tell you,
"Hey, no matter what, you're going to get

00:23:50.480 --> 00:23:55.250
an update every 24 hours." And Digest, so
that if by any chance you miss anything during

00:23:55.250 --> 00:24:01.210
the day, you know what has happened and you
can actually catch up. We also implement a

00:24:01.210 --> 00:24:06.900
few other stuff like Feed status so you can
query Superfeedr to know what is the current

00:24:06.900 --> 00:24:10.860
content of the feed so it's much easier for
you if you have been on vacation for two weeks

00:24:10.860 --> 00:24:15.630
to comeback and say, "Hey, what did I miss?"
We have subscription callback that I just

00:24:15.630 --> 00:24:20.200
mentioned where you can, as a Publisher, decide
whether you want to allow subscription or

00:24:20.200 --> 00:24:25.399
not from a specific user. And the last thing
we are implementing is called Virtual feeds.

00:24:25.399 --> 00:24:31.890
So, let's assume a small use-case where you
would subscribe to a feed from, I don't know,

00:24:31.890 --> 00:24:36.669
Craig's list on the San Francisco car search
and you might say, "Hey, I just don't want

00:24:36.669 --> 00:24:43.220
San Francisco, I also want San Mateo and like-–sorry,
and, I don't know, some other town in the

00:24:43.220 --> 00:24:47.870
area, Oakland. We would do basically a virtual
feed that combines the information from the

00:24:47.870 --> 00:24:50.909
three so that, as a Subscriber, you don't
have to subscribe like three times to three

00:24:50.909 --> 00:24:57.800
different sources. In terms of the Superfeedr
Infrastructure, we're basically a Botnet.

00:24:57.800 --> 00:25:05.130
It's an old, this is an independent component,
little XMPP workers, I love XMPP, that connects

00:25:05.130 --> 00:25:09.230
say, "Hey, give me work" and then some other
distribute the work to them and they do what

00:25:09.230 --> 00:25:12.970
they have to do, and then at some point in
time like everybody here. The good thing about

00:25:12.970 --> 00:25:18.480
this is like we, I mean, we're like if something
is wrong, it's never long, it's never wrong

00:25:18.480 --> 00:25:23.480
longer than the lifetime of one single worker
so it's not that bad. For the polling, we

00:25:23.480 --> 00:25:28.220
have an interesting thing, which is a massive
"Ring." So the polling, it has to be scheduled.

00:25:28.220 --> 00:25:31.600
So, at anytime, we know, "Hey, we need to
fetch this feed now, this one in 10 minutes

00:25:31.600 --> 00:25:35.560
and this one in like half an hour." So, we've
build this infrastructure, which is a huge

00:25:35.560 --> 00:25:41.000
"Ring." So, basically, we take an item in
the "Ring" and then put it in the back again

00:25:41.000 --> 00:25:46.750
so it makes a big loop and which is, we try
to run this loop as fast we can; we're currently

00:25:46.750 --> 00:25:56.360
like do 70,000 feeds a second. And then we
have a lot of caches to make the diffs. So,

00:25:56.360 --> 00:26:01.789
as Brett explained, the PubSubHubbub protocol,
the Hub is suppose to fetch the feed and see

00:26:01.789 --> 00:26:06.041
what is new versus what is old, and this is
something that's pretty hard to do when you

00:26:06.041 --> 00:26:10.441
start having millions of feeds and you need
to be able to diff very efficiently so we

00:26:10.441 --> 00:26:18.000
use a lot of cache mechanisms and cluster
to do that. A few number of distributionary

00:26:18.000 --> 00:26:23.630
infrastructure. We push, we currently push
content to about 1.8 million endpoints, that's

00:26:23.630 --> 00:26:28.640
about 20 million entries, item entries a day
just for the reference. In Twitter, in February,

00:26:28.640 --> 00:26:35.150
said that they were publishing about 50 million
tweets a day, so it's pretty much, I mean,

00:26:35.150 --> 00:26:39.950
it's slightly smaller but I'm pretty sure
like in three months we're going to be bigger

00:26:39.950 --> 00:26:45.690
than them. We have about 50 hosted Hubs, 45
dispatchers that send information to the Subscriber,

00:26:45.690 --> 00:26:53.779
80 parsers and that's about 50 servers at
the moment. In terms of growth, here, you

00:26:53.779 --> 00:26:58.799
have the number of subscription that we've
had over, since January 1st, it's by week,

00:26:58.799 --> 00:27:03.380
and it's, as you can see, it's pretty much
going very, very fast. We expect to be like

00:27:03.380 --> 00:27:10.120
three million before the end of June. A few
TODO before I leave you back with Brett, make

00:27:10.120 --> 00:27:13.289
your feeds real-time. This is really, really
important. Make them in real-time and we can

00:27:13.289 --> 00:27:20.169
help, so ask me. For those Superfeedr on Twitter,
say hello to @julien51, which me too on Twitter,

00:27:20.169 --> 00:27:28.750
Pick Stickers, I've pretty much for everybody,
I think and thank you very much.

00:27:28.750 --> 00:27:37.779
&gt;&gt; SLATKIN: Great, thanks a lot, Julien. Cool.
So, let's, I guess, that's great to see another

00:27:37.779 --> 00:27:41.600
independent company doing some really cool
stuff with PUbSubHubbub in helping a lot of

00:27:41.600 --> 00:27:46.641
other companies do a lot of really cool stuff
with real-time feeds. And so I want to talk

00:27:46.641 --> 00:27:53.120
more about the kind of progress in the community
of PubSubHubbub adoption thus far. So, there's

00:27:53.120 --> 00:27:57.290
actually over a 100 million feeds that are,
PubSubHubbub enabled, and we have companies

00:27:57.290 --> 00:28:00.970
like Superfeedr and their friends, all the
different companies they've been enabled the

00:28:00.970 --> 00:28:07.279
logos that Julien are showing you, plus Google,
Six Apart, LiveJournal, MySpace, TwitterFeed,

00:28:07.279 --> 00:28:12.779
Netvibes, Cliqset, Gnip, PostRank and a bunch
of other kind of companies like Radian6 are

00:28:12.779 --> 00:28:19.340
all using PubSubHubbub for kinds of scanning
and all kinds of search based intelligence

00:28:19.340 --> 00:28:25.010
stuff. In terms of Google products, we have
full integration with Google Buzz that means

00:28:25.010 --> 00:28:30.389
that with Google Buzz both, your feeds are
going out like the feed of your buzzes and

00:28:30.389 --> 00:28:36.429
for connected sites that you connect to your
profile. Google Buzz will actually use PubSubHubbub

00:28:36.429 --> 00:28:41.230
to receive those updates. So, when I showed
you my demo earlier and I posted the Blogger

00:28:41.230 --> 00:28:47.779
the reason that got there so quickly was because
Gmail is, you know, or the Google Buzz is

00:28:47.779 --> 00:28:53.700
subscribed to my feed using PubSubHubbub.
So, if I've done the same thing from LiveJournal,

00:28:53.700 --> 00:28:58.230
you would have seen the same thing. So, Buzz,
it's great, you can do in and out in this,

00:28:58.230 --> 00:29:03.409
a much more stuff around the Buzz API today.
We also do it for common feeds and tag feeds,

00:29:03.409 --> 00:29:08.120
so you should check that out. With integration
with FeedBurner, so this is if you ping FeedBurner

00:29:08.120 --> 00:29:13.010
after updating your source feed, FeedBurner
will fetch your source feed. It'll burn the

00:29:13.010 --> 00:29:18.309
feed as a proxy adding whatever stats you
what and advertisements or whatever I'll see

00:29:18.309 --> 00:29:24.559
use FeedBurner for. And then it will publish
your feed using PubSubHubbub to notify subscribers.

00:29:24.559 --> 00:29:28.929
So, if you're using FeedBurner, chances are
you already have this enabled for your feed

00:29:28.929 --> 00:29:33.019
and you just don't know it. And a lot of the
infrastructure that you've already had to

00:29:33.019 --> 00:29:38.330
ping FeedBurner with your updates is being
reuse to make your feed real-time. So I suggest

00:29:38.330 --> 00:29:42.450
you go check out your feed and see what's
there and experiment with it and we're making

00:29:42.450 --> 00:29:46.139
process to make FeedBurner better at doing
this, integrate better with SuperFeedr and,

00:29:46.139 --> 00:29:50.169
you know, basically a lot, everyone will provide
better stats about subscription and publishing.

00:29:50.169 --> 00:29:55.659
Like I said, we have Blogger immigration,
Reader shared items so both of the published

00:29:55.659 --> 00:30:01.050
feeds there are real-time through PubSubHubbub.
One that's really cool is Google Alerts. So

00:30:01.050 --> 00:30:05.420
you can sign up for a feed with Google Alerts
and you can subscribe at that feed using PubSubHubbub.

00:30:05.420 --> 00:30:09.769
That doesn't mean as soon as something is
added to the Google Index, it shows up on

00:30:09.769 --> 00:30:14.289
the feed but it's actually really low-latency,
it can be scary low-latency sometimes. So,

00:30:14.289 --> 00:30:18.690
you should definitely check that out. Fastflip
also which is a news product, Google News

00:30:18.690 --> 00:30:26.360
product will publish new updates using PubSubHubbub.
And there's a bunch more stuff on the way.

00:30:26.360 --> 00:30:32.470
Oh, I want to give a plug really quickly.
Tomorrow, I think, at 1 o'clock there's another

00:30:32.470 --> 00:30:41.070
session here at Google I/O for [INDISTINCT]
are having a kind of real-time AJAX APIs and

00:30:41.070 --> 00:30:46.769
App Engine API talk and it's talking about
the new feeds API, which has real-time capabilities

00:30:46.769 --> 00:30:51.530
and also the real-time and browser push for
API for App Engine. So, if you're interested

00:30:51.530 --> 00:30:57.309
in how Google is making it easier for the
developers to add PubSubHubbub subscription

00:30:57.309 --> 00:31:03.730
to their, to your applications, I definitely
recommend you go check that the talk out and

00:31:03.730 --> 00:31:10.710
learn about it. So, yeah, Julien had some
great numbers from his, from the Superfeedr

00:31:10.710 --> 00:31:14.970
Hub. I want to--they also come out with some
cool numbers from reference Hub. And, again,

00:31:14.970 --> 00:31:20.759
the reference Hub is an open source implementation
of the PubSubHubbub protocol. It runs on App

00:31:20.759 --> 00:31:25.010
Engine. It's written in Python, it's open
source. You could search for PubSubHubbub

00:31:25.010 --> 00:31:29.960
as the first link you can find it; so it's
interesting. So we're doing about 200 plus

00:31:29.960 --> 00:31:36.100
feed fetches per second, it's kind of our
average peak. We're delivering 250 plus items

00:31:36.100 --> 00:31:40.389
per second. That's just items, that's not
necessarily multiplied by the number of subscribers,

00:31:40.389 --> 00:31:46.080
it gets a lot larger if you do that. And we
have 70 million active subscriptions and we

00:31:46.080 --> 00:31:52.660
deliver 1.2 billion items since July of last
summer. And so, what's really, that's about

00:31:52.660 --> 00:31:56.899
50 items per second and the traffic keeps
ramping up and up and up. So, if you average

00:31:56.899 --> 00:32:03.100
it out, it's 50 items per second I think.
Yeah. And then, but, anyway, it's getting

00:32:03.100 --> 00:32:07.980
up there. So, really happy with the uptake,
really happy at the Hub and App Engine scaling

00:32:07.980 --> 00:32:12.220
really well. And like Julien was saying, it's
interesting comparing traffic numbers to say

00:32:12.220 --> 00:32:17.090
like Twitter to PubSubHubbub and both, you
know. We are working on different feed, you

00:32:17.090 --> 00:32:20.780
know, different feed providers and different
publishers so we get to add our numbers together

00:32:20.780 --> 00:32:25.980
because we're part of decentralized system
where they don't, right? So that's pretty

00:32:25.980 --> 00:32:32.700
cool to see the decentralization and network
effects kind of coming into play. So here's

00:32:32.700 --> 00:32:36.880
that site pubsubhubbub.googlecode.com, you
spell it however you want. I promise you'll

00:32:36.880 --> 00:32:42.960
find it, nothing else like that. We have clients
for you to use immediately. So if you're publishing

00:32:42.960 --> 00:32:49.130
Peril, PHP, basically everything will sit
in here including Haskell for all you guys.

00:32:49.130 --> 00:32:54.460
You know who you are. We've got it for you.
There's subscriber clients for PHP, .NET,

00:32:54.460 --> 00:32:59.200
Scala and Zend framework and a whole bunch
of other things. I think some of the coolest

00:32:59.200 --> 00:33:03.870
ones I've seen, I think the Drupal module
is really good. If you're doing anything with

00:33:03.870 --> 00:33:09.210
PHP with Drupal at these feeds module by Alex
Barth that's really awesome. It does, basically,

00:33:09.210 --> 00:33:14.330
everything you could want to do on the Subscriber
side that can also deal with PubSubHubbub

00:33:14.330 --> 00:33:19.210
notifications and works very well with Superfeedr,
so I will definitely check that out. There

00:33:19.210 --> 00:33:23.320
are Hubs, there's the App Engine reference
one both hosted and not, there's Superfeedr--I'm

00:33:23.320 --> 00:33:28.000
talking about source code here that's why
Superfeedr is not in this list. We have WordPress

00:33:28.000 --> 00:33:32.000
has an open-source implementation of a Hub
that they run for their hosted blogs and for

00:33:32.000 --> 00:33:37.649
blogs that you host yourself. There's one
written in Erlang that actually will bridge,

00:33:37.649 --> 00:33:43.980
so it's part of, it's actually, we're on top
of RabbitMQ, so it's called Rabbit Hub. It's

00:33:43.980 --> 00:33:48.720
written in Erlang and they'll actually bridge
from RabbitMQ, anything RabbitMQ will connect

00:33:48.720 --> 00:33:53.710
to in the PubSubHubbub and back again. So,
they've got all kinds of crazy transports.

00:33:53.710 --> 00:33:58.340
They leave in transport to SMTP if you want
them to, so definitely check that out. We've

00:33:58.340 --> 00:34:05.659
got a mailing list with 440 members or more.
A lot of members of community, a lot of discussion

00:34:05.659 --> 00:34:10.950
there about new ideas and problems and so
on, so I invite you to come and join and bring

00:34:10.950 --> 00:34:15.350
your questions and participate. Like Julien
is saying, there are more publishers on the

00:34:15.350 --> 00:34:24.409
way, more subscribers and more Hubs coming,
which is great. So, this is, that's kind of

00:34:24.409 --> 00:34:28.800
the beginning part of it, kind of, the state
of the union and everything has happened and

00:34:28.800 --> 00:34:32.899
what's going on in adoption and so on. I wanted
to talk a little bit about kind of the future

00:34:32.899 --> 00:34:38.030
work and where we're going with this. We've
got a lot of traction and momentum built-up

00:34:38.030 --> 00:34:42.510
and we're hoping to keep it going. So, I wanted
to talk about kind of what the next steps

00:34:42.510 --> 00:34:50.540
are and what we have in progress. So, the
big one that we keep hearing from people is

00:34:50.540 --> 00:34:57.600
arbitrary content support, so, arbitrary content
type support. So, I don't know if you saw

00:34:57.600 --> 00:35:03.500
Facebook's real-time API that just came out
at F8 conference but, it used about half of

00:35:03.500 --> 00:35:08.760
the PubSubHubbub protocol for doing real-time
notifications, which is great. It uses WebHooks,

00:35:08.760 --> 00:35:13.751
it uses the same verification protocol, but
they needed a different payload type and they

00:35:13.751 --> 00:35:18.910
need authentication and among a couple other
smaller things. And this is something that

00:35:18.910 --> 00:35:22.470
Brett and I have been talking about and working
on for long times figuring out exactly how

00:35:22.470 --> 00:35:28.530
we wanted to do it. And what we wanted to
do, to start off was just do feeds extremely

00:35:28.530 --> 00:35:34.060
well and we're getting there and we're starting
to do that well enough that it's getting critical

00:35:34.060 --> 00:35:37.940
mass. So now we're ready to kind of move on
to the next pieces of this so, we'll give

00:35:37.940 --> 00:35:46.170
you some use-cases. So, the microformats people,
they're interesting guys and they say, why

00:35:46.170 --> 00:35:51.170
would you ever have semantic data like they
don't believe in RDF, they don't believe in

00:35:51.170 --> 00:35:56.580
XML, they don't believe in things that parse
correctly, which I think is actually, you

00:35:56.580 --> 00:36:01.319
know, make it human readable first and then
machine readable, you know, second. And I

00:36:01.319 --> 00:36:04.530
think it's an interesting approach and it
definitely works really well. I don't know

00:36:04.530 --> 00:36:07.660
if you've seen any integration of microformats
in the Google search results like recipes

00:36:07.660 --> 00:36:12.960
and dates each contacts or each cards but
it's actually really cool what microformats

00:36:12.960 --> 00:36:19.200
does. So, they've got something called hAtom
where they want to take an HTML document,

00:36:19.200 --> 00:36:23.010
mark it up with some semantic tags that say,
"Well, this is actually an Atom feed." Even

00:36:23.010 --> 00:36:26.831
though it looks like an HTML doc and this
is post number one with this ID and this is

00:36:26.831 --> 00:36:30.569
post number two with this ID, so they can
overlay an HTML document from presentation

00:36:30.569 --> 00:36:34.569
with the feed and make it to the--it has both
a human presentation and semantic meaning.

00:36:34.569 --> 00:36:40.750
So they'd like to use PubSubHubbub for the
delivery because they want, you know, the

00:36:40.750 --> 00:36:45.599
real-time things integrate with the, you know,
microformats that they love so much, so they

00:36:45.599 --> 00:36:50.520
want an HTML push. Google, we really care
a lot about indexing, so does Microsoft, with

00:36:50.520 --> 00:36:55.510
Bing and so does Yandex with their search
engine. And so, you know, Sitemaps is a way

00:36:55.510 --> 00:37:01.290
that the whole kind of search and indexing
industry, you know, finds out about new content

00:37:01.290 --> 00:37:05.540
and especially for breath. And so, you know,
we would like to be able to push updates for

00:37:05.540 --> 00:37:09.550
XML sitemaps so that when you update your
site and your sitemaps and you have some very

00:37:09.550 --> 00:37:13.760
deep pieces of content to get updated that
don't get crawled very often, you can ping

00:37:13.760 --> 00:37:17.330
and say, "My sitemaps is updated." And all
the crawlers of the world will know that and

00:37:17.330 --> 00:37:21.780
go and fetch the latest content. But they
need to get the whole sitemap with all the

00:37:21.780 --> 00:37:25.760
different URLs and whatnot and understand
that they need to fetch it. So, Google wants

00:37:25.760 --> 00:37:32.100
to be able to do XML pushing for that. And
then, JSON as the Facebook case. They'd like

00:37:32.100 --> 00:37:35.550
to push some JSON data through there. A lot
of the Activity Streams people will also want

00:37:35.550 --> 00:37:40.900
to be able to push JSON for the Activity Streams
representation in JSON. And that also is easier

00:37:40.900 --> 00:37:47.700
for developers to use in a lot of cases. So,
our plan is to build on some of the LRDD or

00:37:47.700 --> 00:37:54.210
lard or however you want to say it, web linking
stuff, if you just search for LRDD, there's

00:37:54.210 --> 00:38:00.190
a nice document. Basically, it says how to
use a link header in an HTTP response to indicate

00:38:00.190 --> 00:38:06.050
where the Hub is. So that means that if you're
serving, say, a JPEG image and you want to--maybe

00:38:06.050 --> 00:38:10.240
it's your Avatar and you want people to be
able to subscribe the updates to your Avatar.

00:38:10.240 --> 00:38:13.690
How would they do that? Well, they'd go and
fetch your Avatar and then a response and

00:38:13.690 --> 00:38:19.660
see a link rel equals hub, hub equals blahdiblah.
So, it'd be the same kind of semantics like

00:38:19.660 --> 00:38:24.359
we saw on the feed but for any HTTP resource,
right? And then you'd be able to subscribe

00:38:24.359 --> 00:38:28.000
to that resource on that Hub and then it tell
you time it's updated, you'll be notified

00:38:28.000 --> 00:38:34.280
with the full payload of the updated data.
So, that's what we were planning on building

00:38:34.280 --> 00:38:37.370
on. We're working on, you know, building at
the Hub and figuring out the protocols. We've

00:38:37.370 --> 00:38:40.970
got a lot of really good feedback from the
people at Facebook about what they want in

00:38:40.970 --> 00:38:44.540
this regard and it's awesome. I mean, this
is what the community interior view is all

00:38:44.540 --> 00:38:51.359
about, so that's really cool to see. The other
thing that we're working on is private feeds.

00:38:51.359 --> 00:38:54.550
So this is something a common misconception
that people have about PubSubHubbub is that

00:38:54.550 --> 00:38:59.480
it only works for public feeds. Well, that
certainly what we've been trying to get adoption

00:38:59.480 --> 00:39:05.310
on because for, because that's most of what's
out there. But, you actually can use PubSubHubbub

00:39:05.310 --> 00:39:11.840
with private feeds if you know the right approach.
And, so, our plan is to basically achieve

00:39:11.840 --> 00:39:16.319
all of these goals. We wanted to be fully
encrypted. We want authorization of the subscriber

00:39:16.319 --> 00:39:21.320
and we want it to be authenticated by directionally.
We want to integrate with some of the other

00:39:21.320 --> 00:39:29.890
tools out there for oath like OAuth, RelMeAuth
and WebFinger. And then we want people to

00:39:29.890 --> 00:39:35.220
be able to use the same technology for both
private feeds and for other means. So, for

00:39:35.220 --> 00:39:39.840
instance, if you want to apply business policies
like say, "Okay, I want to authenticate my

00:39:39.840 --> 00:39:43.640
subscriber so that I know that they don't
subscribe to more than 100 different things,"

00:39:43.640 --> 00:39:50.480
you know? That's how you maybe you can enforce
your business model if you wanted to. So,

00:39:50.480 --> 00:39:54.359
you should be able to do that and Superfeedr
kind of does this with the, an extension that

00:39:54.359 --> 00:39:57.880
they've built were they say, "Well, you know,
the Subscriber has to authenticate because

00:39:57.880 --> 00:40:01.579
I want to make sure that spammers don't get
my content." It's like, understandable and

00:40:01.579 --> 00:40:07.069
authentication or private feeds are one way
to achieve that. The other big thing is that

00:40:07.069 --> 00:40:12.910
we want to be able to achieve per item privacy
control. Now, one of the first things that

00:40:12.910 --> 00:40:17.750
people come up with when they say, "How are
we going to do private content in Atom feeds

00:40:17.750 --> 00:40:21.700
or PubSubHubbub?" They say, well, okay, what
if we just didn't actually put the content

00:40:21.700 --> 00:40:25.680
in there but we put like a little marker that
said there was content. Like there something

00:40:25.680 --> 00:40:30.540
private here and here's the timestamp and
the ID, go fetch it over here with your authentication

00:40:30.540 --> 00:40:35.859
header and we'll give you access. Well, I
mean, that's definitely an engineer solution

00:40:35.859 --> 00:40:41.440
to the problem, but it has a bunch of problems.
The biggest problem it has is this idea of

00:40:41.440 --> 00:40:45.650
plausible deniability. Now I'm not planning
on stealing anything from the 7-Eleven down

00:40:45.650 --> 00:40:52.530
the street. But, you know, if I checked in
at 7-Eleven, let's say, and, you know, using

00:40:52.530 --> 00:40:58.550
Foursquare or Gowalla, even if that content
were private, it puts me in a location or,

00:40:58.550 --> 00:41:03.089
at least, the fact that the event happened
causes me to be associated with the time and

00:41:03.089 --> 00:41:07.130
place. So if it's three in the morning and
I checked in with Gowalla or some other location

00:41:07.130 --> 00:41:12.240
based service and that's, just the fact that
it's communicated that the event came through

00:41:12.240 --> 00:41:18.960
at 3 a.m. ties me to of time and place. And
I'm not saying that people are going to be,

00:41:18.960 --> 00:41:21.860
you know, committing any crimes or anything
like that but I think it's extremely important

00:41:21.860 --> 00:41:25.440
to, when you're talking about privacy you
really need to respect privacy and you need

00:41:25.440 --> 00:41:32.210
to be able to enforce plausible deniability,
that's [INDISTINCT] test in my mind. So, the

00:41:32.210 --> 00:41:36.820
solution of private feeds that we're working
towards us also being inputted in force, plausible

00:41:36.820 --> 00:41:40.201
deniability so that the feed, if you don't
have access to the item, you don't even know

00:41:40.201 --> 00:41:46.720
the item exists. So the simple way that we're
kind of going at this is we're saying that

00:41:46.720 --> 00:41:54.660
each subscriber will actually have a unique
URL that they subscribe to, so that on the

00:41:54.660 --> 00:42:00.930
Hub side, the Hub will understand the actual
authentication that is available. So, what

00:42:00.930 --> 00:42:05.390
I mean is, if both me and Julien have access
to the same items then the Hub will send us

00:42:05.390 --> 00:42:11.089
both the same items. But the Hub understands
who we are and what our ACLs are, okay? So,

00:42:11.089 --> 00:42:14.599
that an item comes in from the Publisher that
only Julien has access to it and I don't have

00:42:14.599 --> 00:42:19.540
access to, then the Hub knows to only send
it to him and not send it to me. So in the

00:42:19.540 --> 00:42:23.640
same sense that we're, original philosophy
of PubSubHubbub was to say put the complexity

00:42:23.640 --> 00:42:28.609
in the center. Put in the Hub so the Hub understands
the really difficult parts, we're going to

00:42:28.609 --> 00:42:31.780
do that again. We're going to say the Hub
has to understand the ACLs of the feeds that

00:42:31.780 --> 00:42:36.700
are subscribed to and the equivalence between
those feeds and then fan it out per item to

00:42:36.700 --> 00:42:42.230
the Subscriber as need be. So we're getting
more into the scaling issues here, the actual

00:42:42.230 --> 00:42:45.760
design. We think we can make the scale properly
and that's part of why it's been taking so

00:42:45.760 --> 00:42:49.540
long is making sure that we kind of take a
rigorous look at the design to make sure it'll

00:42:49.540 --> 00:42:55.130
scale. But the hope is that we'll be able
to have fully authenticated feeds so that

00:42:55.130 --> 00:43:01.859
the idea of having Google Buzz get location
data from Gowalla and have it be fully authenticated

00:43:01.859 --> 00:43:06.690
in private without any kind of ACL issues
so we can actually have that decentralize

00:43:06.690 --> 00:43:10.800
to the future. So that's what we're working
towards, it's a big thing. So, if you're interested

00:43:10.800 --> 00:43:19.160
in that, please join the mailing list and
talk to us. So, some further reading. So OStatus

00:43:19.160 --> 00:43:23.150
is something that's really cool. If you've
done any of the other social track stuff today

00:43:23.150 --> 00:43:28.460
you've kind of heard about the pieces that
are in OStatus, Salmon, Webfinger, PubSubHubbub

00:43:28.460 --> 00:43:32.619
and Activity Streams and Portable Contacts.
OStatus is an interesting approach to this

00:43:32.619 --> 00:43:37.530
from the status.net and Identi.ca guys, it's
definitely worth the read just because it's

00:43:37.530 --> 00:43:43.559
a very interesting investigation into building
decentralized protocols. The Buzz API you

00:43:43.559 --> 00:43:48.559
should definitely check out. Kind of division
for the Buzz API is that Buzz is just one

00:43:48.559 --> 00:43:53.460
island amongst many and those islands are
able to talk together. So, we are working

00:43:53.460 --> 00:43:57.920
on, you know, at Google, decentralized social
networks that can actually speak with each

00:43:57.920 --> 00:44:02.290
other so that's a really cool point of reference.
And the Facebook real-time API, you should

00:44:02.290 --> 00:44:06.740
definitely check out what they're doing there,
it's a very clean API. The use-cases are very

00:44:06.740 --> 00:44:11.359
understandable and so it's definitely worth
checking out and seeing some, you know, comparing

00:44:11.359 --> 00:44:14.790
and contrasting their needs versus the spec
as is and kind of seeing, you know, where

00:44:14.790 --> 00:44:23.510
things are going to go. All right. So, you
can view live notes and ask questions on this

00:44:23.510 --> 00:44:27.960
wave, that's where I am, Superfeedr and Julien
are at superfeedr.com. We're going to open

00:44:27.960 --> 00:44:30.819
the floor to questions and I'm going to open
up, I'm going to click this button, I don't

00:44:30.819 --> 00:44:34.000
know what's going to happen. So, I'm going
to go, I'm going to go over here because this

00:44:34.000 --> 00:44:45.110
probably not going to be good. So, let see.
So, yeah, if there's any question there's

00:44:45.110 --> 00:44:52.119
a mic right here. And if you have any questions
for me or Julien, if you'd like to runaway,

00:44:52.119 --> 00:45:05.060
it's okay, go ahead this is the last session,
so. All right. So, okay. All right, this first

00:45:05.060 --> 00:45:07.230
question goes, Brett, what kind of volume
are you seeing in the reference Hub? I hope

00:45:07.230 --> 00:45:13.640
you'll answer that. So, a lot. Another one
is, do the Subscriber publish your needs to

00:45:13.640 --> 00:45:19.280
renew the subscription periodically or does
it keep going forever? So, part of the PubSubHubbub

00:45:19.280 --> 00:45:24.490
protocol is something called automatic or
periodic refreshing. So, it's actually on

00:45:24.490 --> 00:45:32.960
the Hub to notify the Subscriber of how long
their subscription will last and then also

00:45:32.960 --> 00:45:39.120
to refresh that subscription for the Subscriber
before that period. And basically the Hub

00:45:39.120 --> 00:45:43.430
can refresh the subscription whenever they
want just to make sure that you're still there.

00:45:43.430 --> 00:45:48.500
If you have a lot of drops, they want to make
sure you're still there. So the Subscriber

00:45:48.500 --> 00:45:53.960
doesn't need to periodically double check
its subscription. And there are things like

00:45:53.960 --> 00:45:58.670
what Julien is doing is extensions that Superfeedr
has for Digest and Hearbeat for people who

00:45:58.670 --> 00:46:02.660
are extremely paranoid about missing an update
and these are interesting things that we might

00:46:02.660 --> 00:46:06.460
look to incorporate in the protocol as an
extension to the protocol going forward because

00:46:06.460 --> 00:46:10.690
it is a common concern. But, in the base protocol
right now, you should be able to trust the

00:46:10.690 --> 00:46:16.090
Hub that the Hub is delivering that content
on behalf of the Publisher and that the Publisher

00:46:16.090 --> 00:46:20.530
trust that Hub to do that, so you shouldn't
have to do that. Yup, question?

00:46:20.530 --> 00:46:28.900
&gt;&gt; ORTIZ: Hi, Jorge Ortiz, UC Berkeley. I
was wondering if there were message time delivery

00:46:28.900 --> 00:46:32.000
constraints since you say it's real-time?
And would I be guaranteed that I'm not going

00:46:32.000 --> 00:46:36.540
to get a message, you know, a day late for,
you know, what's the variability in that?

00:46:36.540 --> 00:46:40.849
&gt;&gt; SLATKIN: So, you're talking about at the
protocol level? Are you talking about just...?

00:46:40.849 --> 00:46:42.830
&gt;&gt; ORTIZ: At the protocol level, you know.
&gt;&gt; SLATKIN: No.

00:46:42.830 --> 00:46:44.619
&gt;&gt; ORTIZ: Okay.
&gt;&gt; SLATKIN: There's nothing and I think that

00:46:44.619 --> 00:46:48.990
part of what, you know, we're doing is with
the reference implementation is just doing

00:46:48.990 --> 00:46:49.990
the best we can.
&gt;&gt; ORTIZ: Yeah.

00:46:49.990 --> 00:46:53.490
&gt;&gt; SLATKIN: And, we, you know, we have an
open Hub because we're just trying to boost

00:46:53.490 --> 00:46:56.150
adoptions as much as possible but, Julien,
do you have...?

00:46:56.150 --> 00:46:58.430
&gt;&gt; GENESTOUX: Yeah, we basically have the
same, like we don't have, for ping thing,

00:46:58.430 --> 00:47:03.321
we don't have a guaranteed delay. For the
polling, so for the Default Hub, we can guarantee

00:47:03.321 --> 00:47:08.430
15 minutes. So, if we have no way to know
if there's anything new, we're going to pull

00:47:08.430 --> 00:47:11.930
every 15 minutes. But for the hosted Hub,
for the core protocol, no, we can't guarantee

00:47:11.930 --> 00:47:16.800
anything yet. I hope we can soon.
&gt;&gt; Have you done any measurements to see what

00:47:16.800 --> 00:47:20.589
the message variability is, or is that not
a concern right now?

00:47:20.589 --> 00:47:25.569
&gt;&gt; SLATKIN: So, we have a series of probes
that we run on the reference Hub all the time

00:47:25.569 --> 00:47:29.799
to see what the latency is. And I don't have
the graph here but, you know, we try to shoot

00:47:29.799 --> 00:47:33.829
for a window and, you know, we have spikes
here and there about two minute, but usually

00:47:33.829 --> 00:47:36.829
we stay underneath 10 seconds at all times.
&gt;&gt; Oh, Okay.

00:47:36.829 --> 00:47:42.690
&gt;&gt; SLATKIN: And, but, you know, there's some
variability in there but it's pretty consistent.

00:47:42.690 --> 00:47:46.690
I think though that there's also drops and
we're not measuring drops as accurately, so

00:47:46.690 --> 00:47:51.750
full drops are also an important metric that
we want to get out there. But, I think these

00:47:51.750 --> 00:47:56.710
is all developing and, you know, as people
go along to realize that this is core infrastructure

00:47:56.710 --> 00:48:02.880
they can build on, that will make liability
and retries even more of a stronger guarantee.

00:48:02.880 --> 00:48:09.170
So, for instance, if you had a Google Doc
that, you know, that, every time it updated,

00:48:09.170 --> 00:48:13.920
you wanted an update through some PubSubHubbub
notification, you want to guarantee that that's

00:48:13.920 --> 00:48:18.590
going to get there. So, at that point there's
actually business need and a requirement and

00:48:18.590 --> 00:48:22.720
you're saying, I'm a developer I'm going to
bet on this. And so then we have to actually

00:48:22.720 --> 00:48:26.620
provide at least some kind of an SLA like,
you know, like hopefully an SLA eventually

00:48:26.620 --> 00:48:29.569
but also just to guarantee saying, like, hey,
if you don't get this, like, it's really,

00:48:29.569 --> 00:48:31.890
it's our bad.
&gt;&gt; Right, so, that was sort of what I was

00:48:31.890 --> 00:48:35.590
getting at was whether there's an SLA description
or anything like that.

00:48:35.590 --> 00:48:40.250
&gt;&gt; SLATKIN: Yeah, it's still way too early
for that, but I think that, obviously, that's

00:48:40.250 --> 00:48:46.910
what we really love to get there. If it was
so important that people want an SLA, that's

00:48:46.910 --> 00:48:48.100
awesome.
&gt;&gt; Great.

00:48:48.100 --> 00:48:49.870
&gt;&gt; SLATKIN: Yeah.
&gt;&gt; Thanks.

00:48:49.870 --> 00:48:53.520
&gt;&gt; SLATKIN: Yup.
&gt;&gt; Yeah, I'm wondering which browsers support

00:48:53.520 --> 00:48:57.819
the PuSH?
&gt;&gt; SLATKIN: Oh, you should go to the talk

00:48:57.819 --> 00:49:01.690
tomorrow so that, and like I said, that's
not actually part of the PubSubHubbub protocol

00:49:01.690 --> 00:49:04.790
that's a tool that Google is providing the
people. My understanding is that it's all

00:49:04.790 --> 00:49:14.839
browsers. And I think including IE6 maybe,
yeah, IE6 for you. You've got it.

00:49:14.839 --> 00:49:19.079
&gt;&gt; You mentioned this could be an alternate
to XMPP, right? So one of the main things

00:49:19.079 --> 00:49:23.000
that XMPP provide is presence, so how does
this support it?

00:49:23.000 --> 00:49:28.190
&gt;&gt; SLATKIN: Yeah, that's a really good question
and I think that, it doesn't provide presence,

00:49:28.190 --> 00:49:34.220
right. And that's why this is not solving
the same problems that XMPP are. XMPP is really

00:49:34.220 --> 00:49:38.200
good at solving the last mile problem and
presence that's why Google uses it for stuff

00:49:38.200 --> 00:49:44.390
like Google Talk and for Wave. So, when you
really need... Yeah, we could have a feed

00:49:44.390 --> 00:49:47.880
of your presence, we definitely could do that,
but, like, that wasn't the initial point.

00:49:47.880 --> 00:49:54.180
We're trying to do server-to-server integration,
right. So, like, XMPP is really good at holding

00:49:54.180 --> 00:49:58.520
up at single connection like down to a mobile
phone and then doing presence notifications.

00:49:58.520 --> 00:50:03.660
But, I mean, if you, I would love to see someone
try--yeah, I mean, build the feed of presence

00:50:03.660 --> 00:50:07.920
notification if you could. But XMPP is really
good at that right now, and...

00:50:07.920 --> 00:50:13.641
&gt;&gt; GENESTOUX: I think, Brett's point is great
like any, I mean, we think like a lot of,

00:50:13.641 --> 00:50:17.299
I mean, for example, it's very simple and
since you use feed you can actually represent

00:50:17.299 --> 00:50:21.060
so many different information with feeds that
you can do presence with feeds over PubSubHubbub.

00:50:21.060 --> 00:50:27.130
Like, I mean, obviously, like, I'm applying
it to, a raw feed, right, so you can definitely

00:50:27.130 --> 00:50:30.090
make some kind of presence like information
via PubSubHubbub.

00:50:30.090 --> 00:50:32.470
&gt;&gt; SLATKIN: Yeah.
&gt;&gt; GENESTOUX: Another use-case that we've

00:50:32.470 --> 00:50:36.450
seen recently is synched between two services.
So you just mentioned Google Doc, so, say

00:50:36.450 --> 00:50:40.309
you have Google Doc on one side and Dropbox
on the other side, it would be awesome that

00:50:40.309 --> 00:50:44.549
every time I update my Google Doc, it just
saves to Dropbox. And every time I put a file

00:50:44.549 --> 00:50:49.119
in to Dropbox, it just upload it to Google
Doc as well. And this can be done very easily

00:50:49.119 --> 00:50:54.180
with PubSubHubbub actually. The only requirement
is like both services need feeds and they

00:50:54.180 --> 00:50:57.940
just subscribe to each other, and then you
can have sync data across as many services

00:50:57.940 --> 00:50:59.130
as you want.
&gt;&gt; SLATKIN: Yeah, and all of the stuff like

00:50:59.130 --> 00:51:03.950
idempotents and deduping and update time and
all that stuff is figured out by Adam, in

00:51:03.950 --> 00:51:09.400
the Adam, you know, format. So, you get all
the goodness of kind of Adam. And you could

00:51:09.400 --> 00:51:12.880
even apply stuff like the feed sync protocol
that Microsoft developed on top of that for

00:51:12.880 --> 00:51:16.920
even more robust synchronization mechanism.
&gt;&gt; One more thing. So is the reference and

00:51:16.920 --> 00:51:23.440
implementation is something can that we can
use internally rather than in, as a hosted

00:51:23.440 --> 00:51:25.799
model?
&gt;&gt; SLATKIN: Yeah, internally only, right,

00:51:25.799 --> 00:51:27.470
behind the firewall?
&gt;&gt; Yes.

00:51:27.470 --> 00:51:31.849
&gt;&gt; SLATKIN: Yes, so, I guess talk to Julien
and there's open source Hubs you see out there,

00:51:31.849 --> 00:51:36.660
you could run those behind the firewall for
locally addressable feeds also if that was

00:51:36.660 --> 00:51:39.210
something you're interested in, so. I think
that answers your question, maybe, so. Yeah,

00:51:39.210 --> 00:51:45.190
yes.
&gt;&gt; I'm wondering if the protocol say something

00:51:45.190 --> 00:51:50.110
about, you know, a Publisher gone rouge like
sending like too many updates; how to handle

00:51:50.110 --> 00:51:56.510
that, any recommendations?
&gt;&gt; SLATKIN: Yeah, yeah. There's so there's

00:51:56.510 --> 00:52:00.774
a thread on some of the public list I think
just yesterday and, yes, so if the publisher

00:52:00.774 --> 00:52:06.390
start sending like a thousand pings a second
and the hub doesn't know what to do with them,

00:52:06.390 --> 00:52:11.359
how do you prevent the publisher from DoSing
the hub? So, first of all, hopefully the publisher

00:52:11.359 --> 00:52:15.540
and the Hub have a decent relationship with
each other that's kind of the assumption because

00:52:15.540 --> 00:52:20.990
the Publisher is trusting the Hub to deliver
their content. So, the incentives aren't necessarily

00:52:20.990 --> 00:52:27.490
there for a Publisher to DoS their own Hub,
right. But, let's say you did that anyway.

00:52:27.490 --> 00:52:32.089
I think it's important best practice of just
having a website to have DoS protection and

00:52:32.089 --> 00:52:36.599
this isn't no way different. So part of the
reference Hub has a DoS protection element

00:52:36.599 --> 00:52:41.220
where they'll actually do counting of IPs
and requests over. It kind of leaky bucket

00:52:41.220 --> 00:52:47.170
kind of thing to make sure that there aren't
too many pings and that slow feeds aren't,

00:52:47.170 --> 00:52:49.410
don't have a negative effect on the Hub's
health, so I think that that's just a general

00:52:49.410 --> 00:52:55.609
strategy anyone can use. It's not codified
with protocol but, it is kind of an HTTP.

00:52:55.609 --> 00:53:00.049
Like if you get a 503 backoff then you should
backoff or else you're going to get black

00:53:00.049 --> 00:53:05.329
hold. So I think that, you know, I don't necessarily
think we have to add it as the protocol but,

00:53:05.329 --> 00:53:10.099
it could be something in the best practices
to say like don't, you know, if you're a Publisher

00:53:10.099 --> 00:53:17.070
or if you're a Hub, you know, implement DoS
protections to make sure that you don't get

00:53:17.070 --> 00:53:21.352
screwed.
&gt;&gt; So, basically, the Publisher will find

00:53:21.352 --> 00:53:22.352
out that, you know, through the 503 or whatever
that they have...

00:53:22.352 --> 00:53:24.450
&gt;&gt; SLATKIN: Yeah, that they need to rate limit
themselves basically, yeah, 503 retry after,

00:53:24.450 --> 00:53:29.130
you know, that's, I mean, that's what the
reference Hub does right now. The more interesting

00:53:29.130 --> 00:53:34.950
case that I've seen is the Subscribers just
over subscribing. You know, Subscribers subscribing

00:53:34.950 --> 00:53:39.740
in a 100 requests per second. It's happening
right now on the reference Hub and, you know,

00:53:39.740 --> 00:53:46.700
they get 503s all day long and it doesn't
hurt anybody, except for my bandwidth at all,

00:53:46.700 --> 00:53:52.700
which I don't pay, so it's okay, so. Yeah?
&gt;&gt; Yes, similar question. So, how do you prevent

00:53:52.700 --> 00:53:57.810
me setting a callback that is a ping URL for
another Hub that's decentralized and then

00:53:57.810 --> 00:54:03.340
setting a callback that's a ping Hub does
ping your URL for your Hub which would create

00:54:03.340 --> 00:54:06.830
like cyclical, but it's decentralize so you
don't have any common...

00:54:06.830 --> 00:54:10.990
&gt;&gt; GENESTOUX: Generally, the Hub doesn't trust
the Publisher so it's light ping. So whenever

00:54:10.990 --> 00:54:15.890
a Hub gets a ping, it will just fetch the
feed and see if there's anything new actually

00:54:15.890 --> 00:54:19.010
and then you can take measures if you trying
to ping me for content that is not there.

00:54:19.010 --> 00:54:23.209
You might want to block this URL or whatever.
But, the Hub doesn't trust a Publisher yet.

00:54:23.209 --> 00:54:29.240
&gt;&gt; SLATKIN: Right, and so, and that's one
of the core design goals we had when designing

00:54:29.240 --> 00:54:33.660
a protocol does not requiring authentication
between Hub and the Publisher. You just send

00:54:33.660 --> 00:54:38.760
a light ping and it's, like, if you actually
served that feed then I will go to you. I

00:54:38.760 --> 00:54:42.789
will use SSL to authenticate verified the
[INDISTINCT] on and on, and then that's my

00:54:42.789 --> 00:54:47.320
authentication. I don't need to authenticate
the pinger. But, you can get some efficiencies

00:54:47.320 --> 00:54:51.970
out of fat pinging but that's not defined
as part of the protocol. It's up to you how

00:54:51.970 --> 00:54:56.380
you want to integrate with your Hub to do
that. We do something internally for that,

00:54:56.380 --> 00:54:58.980
other people might want to do something else
and so we're just kind of leaving that undefined

00:54:58.980 --> 00:55:02.801
so that people can just do what they want.
&gt;&gt; GENESTOUX: For some Hubs that we host,

00:55:02.801 --> 00:55:10.800
we actually implemented the API of the Publisher
so that we actually subscribe to their content

00:55:10.800 --> 00:55:11.800
through this, their own API rather than just
pull them in, they don't ping us. But, again,

00:55:11.800 --> 00:55:14.980
this is the Publisher-Hub relationship. This
is part of the protocol but I think this is

00:55:14.980 --> 00:55:19.059
probably something that is kind of on the
margin of that much of key and hold the key

00:55:19.059 --> 00:55:22.099
all the time.
&gt;&gt; SLATKIN: Yeah. I think we got time for

00:55:22.099 --> 00:55:28.700
one more but, I don't see any and I don't
see anything here. So, all right. Well, thanks

00:55:28.700 --> 00:55:31.799
a lot for coming. If you have anymore questions,
we'll be here.

