WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:04.920
Let's look at the solution for
our three protocol comparison quiz.

00:00:04.920 --> 00:00:09.900
Where we had 3 cores, a block A that
starts in an invalid state in all

00:00:09.900 --> 00:00:15.680
three caches, and then cores
access this block in this way.

00:00:15.680 --> 00:00:17.550
We were asked, how many memories and

00:00:17.550 --> 00:00:20.810
bus requests do we have in
each of these protocols?

00:00:20.810 --> 00:00:25.670
When a read A occurs, we will have a
memory read in each of these protocols,

00:00:25.670 --> 00:00:28.440
because this is a miss on core 1.

00:00:28.440 --> 00:00:33.930
At that point,
C1 has the block in the shared or

00:00:33.930 --> 00:00:39.290
exclusive state, depending on whether
the protocol has a shared state or not.

00:00:39.290 --> 00:00:42.540
So in the MOSI,
we will have shared state.

00:00:42.540 --> 00:00:47.260
In MESI and MOESI, we will have the
exclusive state because at this point,

00:00:47.260 --> 00:00:50.610
C1 is the only one who
has this block at all.

00:00:51.640 --> 00:00:56.890
When C1 writes to A,
if we had the block in the shared state,

00:00:56.890 --> 00:01:00.700
we need to put an invalidation request
on the bus because we don't know whether

00:01:00.700 --> 00:01:02.680
there are any other sharers.

00:01:02.680 --> 00:01:04.440
And, of course,
if we did the memory read,

00:01:04.440 --> 00:01:07.380
we'd also have a bus request
in each of the three.

00:01:08.460 --> 00:01:11.180
Now when we do a write A for

00:01:11.180 --> 00:01:15.750
protocols that have the E state,
we just move to the modified state.

00:01:15.750 --> 00:01:18.910
We don't have to put anything
on the bus or read memory.

00:01:18.910 --> 00:01:24.450
So here, we don't do anything, but
for MOSI we were in the shared state.

00:01:24.450 --> 00:01:27.940
We have to put an invalidation
request on the bus.

00:01:27.940 --> 00:01:31.420
There is no memory read here,
we already have the data

00:01:31.420 --> 00:01:35.469
we just need to invalidate others
because we think there might be others.

00:01:36.680 --> 00:01:40.160
So now we have the block in
the modified state in C1.

00:01:41.230 --> 00:01:45.020
Everybody else still has
the block in the invalid state.

00:01:45.020 --> 00:01:50.200
When C2 reads A,
C1 must supply this data.

00:01:50.200 --> 00:01:54.200
So this is a bus request because
we have a read in all of them.

00:01:55.360 --> 00:02:00.640
C2 will get the data in
the shared state because C1 will

00:02:00.640 --> 00:02:05.320
be downgraded from modified
to either shared or owned.

00:02:05.320 --> 00:02:08.130
But either way C2 will be shared.

00:02:08.130 --> 00:02:12.740
C1 will have the block in either
the O state, if there is an O state,

00:02:12.740 --> 00:02:17.090
because from modified we go
to O once we start sharing.

00:02:17.090 --> 00:02:22.000
Or, in the shared state
assuming we have intervention

00:02:22.000 --> 00:02:26.230
base supply of this value to C2,
there is no memory read.

00:02:26.230 --> 00:02:29.078
Because C1 is able to
provide the block to C2.

00:02:29.078 --> 00:02:34.020
Now, when C2 writes to the block,
because it has the block in the shared

00:02:34.020 --> 00:02:39.850
state, there will be a bus request
to send out an invalidation.

00:02:39.850 --> 00:02:43.800
Either way, C1 now has the block
in the invalid state, and

00:02:43.800 --> 00:02:47.570
C2 has the block in the modified state.

00:02:47.570 --> 00:02:49.750
So from this read to this write,

00:02:49.750 --> 00:02:54.800
having the exclusive state didn't help
us save an access on a write, and

00:02:54.800 --> 00:02:59.395
that's because here we had no
exclusive access to the block anymore.

00:02:59.395 --> 00:03:01.420
C1 also had the block.

00:03:01.420 --> 00:03:04.096
Now let's see what
happens when C3 reads.

00:03:04.096 --> 00:03:07.145
When C3 reads,

00:03:07.145 --> 00:03:11.420
C3 will get the block in the shared
state, and this is a read miss,

00:03:11.420 --> 00:03:16.670
it needs the data, so that is
definitely a bus access in all of them.

00:03:16.670 --> 00:03:20.730
C2 however, moves to either the owned or
the shared state,

00:03:20.730 --> 00:03:23.360
depending on whether we
have the owned state.

00:03:23.360 --> 00:03:29.290
In this case, again, C2 supplied the
data to C3 so there was no memory read.

00:03:29.290 --> 00:03:31.900
However, when C1 reads,

00:03:31.900 --> 00:03:36.970
if we are in the shared state in C2,
C1 ends up reading memory.

00:03:36.970 --> 00:03:40.680
So if we have the O state,
C2 is able to intervene and

00:03:40.680 --> 00:03:45.730
supply the data to C1, and then C2,
if we have the shared state,

00:03:45.730 --> 00:03:49.618
then there are memory
accesses in both of these.

00:03:49.618 --> 00:03:51.710
C1 had the block in the invalid state,
so

00:03:51.710 --> 00:03:55.990
definitely the read request
will be put on the bus.

00:03:55.990 --> 00:04:02.660
And now what we have is basically C1 and
C3 have the block in the shared state.

00:04:02.660 --> 00:04:06.870
C2 retains the block in the owned or
shared state.

00:04:06.870 --> 00:04:09.430
So there was a bus request here, and

00:04:09.430 --> 00:04:13.070
there was a memory request if
we didn't have the O state.

00:04:13.070 --> 00:04:16.339
So here we have
an additional memory read.

00:04:16.339 --> 00:04:19.360
Now C2 reads the block.

00:04:19.360 --> 00:04:20.720
Either way, it can read the block,

00:04:20.720 --> 00:04:23.360
because at this point,
it's either owned or shared.

00:04:23.360 --> 00:04:27.730
So there is no bus request, nor
memory read in any of these protocols.

00:04:27.730 --> 00:04:32.260
So overall,
we have 1 memory read in protocols

00:04:32.260 --> 00:04:37.930
that have the O state and
2 in the protocol that doesn't.

00:04:37.930 --> 00:04:43.590
For bus requests,
we have 5 bus requests in protocols

00:04:43.590 --> 00:04:48.820
that have the exclusive state and 6 bus
requests in the protocol that doesn't.

