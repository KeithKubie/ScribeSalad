WEBVTT
Kind: captions
Language: en

00:00:02.880 --> 00:00:06.220
 
[Music]

00:00:06.220 --> 00:00:06.230
[Music]
 

00:00:06.230 --> 00:00:09.320
[Music]
hi everyone I'm here and I'm a software

00:00:09.320 --> 00:00:09.330
hi everyone I'm here and I'm a software
 

00:00:09.330 --> 00:00:11.990
hi everyone I'm here and I'm a software
engineer on Google Play hi everyone I'm

00:00:11.990 --> 00:00:12.000
engineer on Google Play hi everyone I'm
 

00:00:12.000 --> 00:00:13.970
engineer on Google Play hi everyone I'm
Anthony also a software engineer on

00:00:13.970 --> 00:00:13.980
Anthony also a software engineer on
 

00:00:13.980 --> 00:00:16.460
Anthony also a software engineer on
Google Play and I'm Evo a partner dual

00:00:16.460 --> 00:00:16.470
Google Play and I'm Evo a partner dual
 

00:00:16.470 --> 00:00:20.570
Google Play and I'm Evo a partner dual
provoker that Google some of you may

00:00:20.570 --> 00:00:20.580
provoker that Google some of you may
 

00:00:20.580 --> 00:00:22.099
provoker that Google some of you may
just be coming from the previous session

00:00:22.099 --> 00:00:22.109
just be coming from the previous session
 

00:00:22.109 --> 00:00:24.290
just be coming from the previous session
at the entry theater which gave an

00:00:24.290 --> 00:00:24.300
at the entry theater which gave an
 

00:00:24.300 --> 00:00:26.810
at the entry theater which gave an
overview of Google Play didn't dynamic

00:00:26.810 --> 00:00:26.820
overview of Google Play didn't dynamic
 

00:00:26.820 --> 00:00:29.150
overview of Google Play didn't dynamic
delivery and its new publishing format

00:00:29.150 --> 00:00:29.160
delivery and its new publishing format
 

00:00:29.160 --> 00:00:31.490
delivery and its new publishing format
called the Android app bundle and how

00:00:31.490 --> 00:00:31.500
called the Android app bundle and how
 

00:00:31.500 --> 00:00:34.400
called the Android app bundle and how
this will make apps smaller in this

00:00:34.400 --> 00:00:34.410
this will make apps smaller in this
 

00:00:34.410 --> 00:00:36.440
this will make apps smaller in this
session we will do a technical deep dive

00:00:36.440 --> 00:00:36.450
session we will do a technical deep dive
 

00:00:36.450 --> 00:00:38.869
session we will do a technical deep dive
on this new publishing format we will

00:00:38.869 --> 00:00:38.879
on this new publishing format we will
 

00:00:38.879 --> 00:00:41.600
on this new publishing format we will
cover what it contains how to build it

00:00:41.600 --> 00:00:41.610
cover what it contains how to build it
 

00:00:41.610 --> 00:00:44.450
cover what it contains how to build it
how to publish it but also the different

00:00:44.450 --> 00:00:44.460
how to publish it but also the different
 

00:00:44.460 --> 00:00:45.850
how to publish it but also the different
ways you can test it

00:00:45.850 --> 00:00:45.860
ways you can test it
 

00:00:45.860 --> 00:00:48.260
ways you can test it
we'll also cover how Google Play

00:00:48.260 --> 00:00:48.270
we'll also cover how Google Play
 

00:00:48.270 --> 00:00:50.299
we'll also cover how Google Play
generates and serves the apks to

00:00:50.299 --> 00:00:50.309
generates and serves the apks to
 

00:00:50.309 --> 00:00:54.260
generates and serves the apks to
end-users so let's start with the format

00:00:54.260 --> 00:00:54.270
end-users so let's start with the format
 

00:00:54.270 --> 00:00:57.920
end-users so let's start with the format
of the Android app on both the Android

00:00:57.920 --> 00:00:57.930
of the Android app on both the Android
 

00:00:57.930 --> 00:01:00.380
of the Android app on both the Android
app bundle is receive archive it

00:01:00.380 --> 00:01:00.390
app bundle is receive archive it
 

00:01:00.390 --> 00:01:01.700
app bundle is receive archive it
contains the files you're already

00:01:01.700 --> 00:01:01.710
contains the files you're already
 

00:01:01.710 --> 00:01:04.070
contains the files you're already
familiar with in ATK's such as text

00:01:04.070 --> 00:01:04.080
familiar with in ATK's such as text
 

00:01:04.080 --> 00:01:07.160
familiar with in ATK's such as text
files android resources assets native

00:01:07.160 --> 00:01:07.170
files android resources assets native
 

00:01:07.170 --> 00:01:10.760
files android resources assets native
libraries it's important to realize that

00:01:10.760 --> 00:01:10.770
libraries it's important to realize that
 

00:01:10.770 --> 00:01:12.859
libraries it's important to realize that
the app bundle and the apk are two

00:01:12.859 --> 00:01:12.869
the app bundle and the apk are two
 

00:01:12.869 --> 00:01:15.050
the app bundle and the apk are two
distinct formats with two different

00:01:15.050 --> 00:01:15.060
distinct formats with two different
 

00:01:15.060 --> 00:01:18.410
distinct formats with two different
purposes the app bundle is a purely is

00:01:18.410 --> 00:01:18.420
purposes the app bundle is a purely is
 

00:01:18.420 --> 00:01:20.960
purposes the app bundle is a purely is
purely a publishing format so it cannot

00:01:20.960 --> 00:01:20.970
purely a publishing format so it cannot
 

00:01:20.970 --> 00:01:24.050
purely a publishing format so it cannot
be directly installed on a device it

00:01:24.050 --> 00:01:24.060
be directly installed on a device it
 

00:01:24.060 --> 00:01:26.300
be directly installed on a device it
also contains some metadata files that

00:01:26.300 --> 00:01:26.310
also contains some metadata files that
 

00:01:26.310 --> 00:01:28.249
also contains some metadata files that
don't end up in the final AP case it

00:01:28.249 --> 00:01:28.259
don't end up in the final AP case it
 

00:01:28.259 --> 00:01:30.649
don't end up in the final AP case it
just helped the tools built the apk is

00:01:30.649 --> 00:01:30.659
just helped the tools built the apk is
 

00:01:30.659 --> 00:01:31.840
just helped the tools built the apk is
the right way

00:01:31.840 --> 00:01:31.850
the right way
 

00:01:31.850 --> 00:01:34.730
the right way
finally the format of the app bundle is

00:01:34.730 --> 00:01:34.740
finally the format of the app bundle is
 

00:01:34.740 --> 00:01:37.999
finally the format of the app bundle is
stricter than apk we want to ensure that

00:01:37.999 --> 00:01:38.009
stricter than apk we want to ensure that
 

00:01:38.009 --> 00:01:40.539
stricter than apk we want to ensure that
the tools can fully understand the files

00:01:40.539 --> 00:01:40.549
the tools can fully understand the files
 

00:01:40.549 --> 00:01:43.609
the tools can fully understand the files
in the bundle so that they can generate

00:01:43.609 --> 00:01:43.619
in the bundle so that they can generate
 

00:01:43.619 --> 00:01:47.840
in the bundle so that they can generate
valid apks now let's open up one app

00:01:47.840 --> 00:01:47.850
valid apks now let's open up one app
 

00:01:47.850 --> 00:01:51.679
valid apks now let's open up one app
bundle and looks what's inside so if you

00:01:51.679 --> 00:01:51.689
bundle and looks what's inside so if you
 

00:01:51.689 --> 00:01:53.660
bundle and looks what's inside so if you
open up an app bundle this is what you

00:01:53.660 --> 00:01:53.670
open up an app bundle this is what you
 

00:01:53.670 --> 00:01:56.990
open up an app bundle this is what you
should expect so this should look

00:01:56.990 --> 00:01:57.000
should expect so this should look
 

00:01:57.000 --> 00:01:59.270
should expect so this should look
familiar to a lot of people instead of

00:01:59.270 --> 00:01:59.280
familiar to a lot of people instead of
 

00:01:59.280 --> 00:02:00.950
familiar to a lot of people instead of
reinventing the wheel we decided to

00:02:00.950 --> 00:02:00.960
reinventing the wheel we decided to
 

00:02:00.960 --> 00:02:03.289
reinventing the wheel we decided to
reuse some of the structure of ATK's and

00:02:03.289 --> 00:02:03.299
reuse some of the structure of ATK's and
 

00:02:03.299 --> 00:02:05.600
reuse some of the structure of ATK's and
only modify what we needed to better

00:02:05.600 --> 00:02:05.610
only modify what we needed to better
 

00:02:05.610 --> 00:02:09.080
only modify what we needed to better
describe the files so we'll literally

00:02:09.080 --> 00:02:09.090
describe the files so we'll literally
 

00:02:09.090 --> 00:02:11.160
describe the files so we'll literally
goes through them

00:02:11.160 --> 00:02:11.170
goes through them
 

00:02:11.170 --> 00:02:14.490
goes through them
to start with the app bundle has support

00:02:14.490 --> 00:02:14.500
to start with the app bundle has support
 

00:02:14.500 --> 00:02:16.350
to start with the app bundle has support
for having multiple modules as you may

00:02:16.350 --> 00:02:16.360
for having multiple modules as you may
 

00:02:16.360 --> 00:02:18.030
for having multiple modules as you may
have heard before and will tell you more

00:02:18.030 --> 00:02:18.040
have heard before and will tell you more
 

00:02:18.040 --> 00:02:21.059
have heard before and will tell you more
about Banjul about modules shortly for

00:02:21.059 --> 00:02:21.069
about Banjul about modules shortly for
 

00:02:21.069 --> 00:02:22.589
about Banjul about modules shortly for
now just know that the top-level

00:02:22.589 --> 00:02:22.599
now just know that the top-level
 

00:02:22.599 --> 00:02:24.900
now just know that the top-level
directories in the app bundle are the

00:02:24.900 --> 00:02:24.910
directories in the app bundle are the
 

00:02:24.910 --> 00:02:27.420
directories in the app bundle are the
names of the modules there is always a

00:02:27.420 --> 00:02:27.430
names of the modules there is always a
 

00:02:27.430 --> 00:02:29.820
names of the modules there is always a
module named base in the module in the

00:02:29.820 --> 00:02:29.830
module named base in the module in the
 

00:02:29.830 --> 00:02:31.410
module named base in the module in the
bundle and that's the one we're looking

00:02:31.410 --> 00:02:31.420
bundle and that's the one we're looking
 

00:02:31.420 --> 00:02:35.850
bundle and that's the one we're looking
at here the Android manifest is still

00:02:35.850 --> 00:02:35.860
at here the Android manifest is still
 

00:02:35.860 --> 00:02:38.370
at here the Android manifest is still
present in your project it's a real XML

00:02:38.370 --> 00:02:38.380
present in your project it's a real XML
 

00:02:38.380 --> 00:02:40.920
present in your project it's a real XML
file in the AP case you may know it's a

00:02:40.920 --> 00:02:40.930
file in the AP case you may know it's a
 

00:02:40.930 --> 00:02:43.710
file in the AP case you may know it's a
binary format in the app bundle it's

00:02:43.710 --> 00:02:43.720
binary format in the app bundle it's
 

00:02:43.720 --> 00:02:46.170
binary format in the app bundle it's
compiled into protocol buffer formats

00:02:46.170 --> 00:02:46.180
compiled into protocol buffer formats
 

00:02:46.180 --> 00:02:48.360
compiled into protocol buffer formats
which allows us to transform it more

00:02:48.360 --> 00:02:48.370
which allows us to transform it more
 

00:02:48.370 --> 00:02:53.309
which allows us to transform it more
easily as opposed to apk the Dex files

00:02:53.309 --> 00:02:53.319
easily as opposed to apk the Dex files
 

00:02:53.319 --> 00:02:56.910
easily as opposed to apk the Dex files
are under directory named text the

00:02:56.910 --> 00:02:56.920
are under directory named text the
 

00:02:56.920 --> 00:02:58.979
are under directory named text the
Android resources the assets and the

00:02:58.979 --> 00:02:58.989
Android resources the assets and the
 

00:02:58.989 --> 00:03:01.080
Android resources the assets and the
native libraries on the other hand

00:03:01.080 --> 00:03:01.090
native libraries on the other hand
 

00:03:01.090 --> 00:03:02.729
native libraries on the other hand
follow the same directory structure as

00:03:02.729 --> 00:03:02.739
follow the same directory structure as
 

00:03:02.739 --> 00:03:05.580
follow the same directory structure as
in an apk the only difference are the

00:03:05.580 --> 00:03:05.590
in an apk the only difference are the
 

00:03:05.590 --> 00:03:07.710
in an apk the only difference are the
XML resources which are also compiled

00:03:07.710 --> 00:03:07.720
XML resources which are also compiled
 

00:03:07.720 --> 00:03:09.960
XML resources which are also compiled
into a protocol buffer format instead of

00:03:09.960 --> 00:03:09.970
into a protocol buffer format instead of
 

00:03:09.970 --> 00:03:14.370
into a protocol buffer format instead of
the binary format the file resources

00:03:14.370 --> 00:03:14.380
the binary format the file resources
 

00:03:14.380 --> 00:03:17.250
the binary format the file resources
that TB is the resource table is the

00:03:17.250 --> 00:03:17.260
that TB is the resource table is the
 

00:03:17.260 --> 00:03:19.199
that TB is the resource table is the
equivalent of the file resources that a

00:03:19.199 --> 00:03:19.209
equivalent of the file resources that a
 

00:03:19.209 --> 00:03:21.530
equivalent of the file resources that a
RSC that you may have seen in your apks

00:03:21.530 --> 00:03:21.540
RSC that you may have seen in your apks
 

00:03:21.540 --> 00:03:24.030
RSC that you may have seen in your apks
it describes the resources present in

00:03:24.030 --> 00:03:24.040
it describes the resources present in
 

00:03:24.040 --> 00:03:27.360
it describes the resources present in
your app and the targeting the dot TB

00:03:27.360 --> 00:03:27.370
your app and the targeting the dot TB
 

00:03:27.370 --> 00:03:30.030
your app and the targeting the dot TB
extension bits in in a protocol buffer

00:03:30.030 --> 00:03:30.040
extension bits in in a protocol buffer
 

00:03:30.040 --> 00:03:32.099
extension bits in in a protocol buffer
format which again makes it easier for

00:03:32.099 --> 00:03:32.109
format which again makes it easier for
 

00:03:32.109 --> 00:03:34.020
format which again makes it easier for
tools to transform it before it's

00:03:34.020 --> 00:03:34.030
tools to transform it before it's
 

00:03:34.030 --> 00:03:35.880
tools to transform it before it's
converted into its binary form in the

00:03:35.880 --> 00:03:35.890
converted into its binary form in the
 

00:03:35.890 --> 00:03:40.830
converted into its binary form in the
apk the assets the TB and native dot TB

00:03:40.830 --> 00:03:40.840
apk the assets the TB and native dot TB
 

00:03:40.840 --> 00:03:43.170
apk the assets the TB and native dot TB
files are the equivalent of the resource

00:03:43.170 --> 00:03:43.180
files are the equivalent of the resource
 

00:03:43.180 --> 00:03:45.930
files are the equivalent of the resource
table for assets and native libraries so

00:03:45.930 --> 00:03:45.940
table for assets and native libraries so
 

00:03:45.940 --> 00:03:47.550
table for assets and native libraries so
they only exist if you have assets or

00:03:47.550 --> 00:03:47.560
they only exist if you have assets or
 

00:03:47.560 --> 00:03:49.770
they only exist if you have assets or
native libraries and they also describe

00:03:49.770 --> 00:03:49.780
native libraries and they also describe
 

00:03:49.780 --> 00:03:51.840
native libraries and they also describe
the targeting of the files in their

00:03:51.840 --> 00:03:51.850
the targeting of the files in their
 

00:03:51.850 --> 00:03:55.830
the targeting of the files in their
respective directories as I've mentioned

00:03:55.830 --> 00:03:55.840
respective directories as I've mentioned
 

00:03:55.840 --> 00:03:58.140
respective directories as I've mentioned
before the resource table the asset

00:03:58.140 --> 00:03:58.150
before the resource table the asset
 

00:03:58.150 --> 00:03:59.849
before the resource table the asset
table and the native libraries table

00:03:59.849 --> 00:03:59.859
table and the native libraries table
 

00:03:59.859 --> 00:04:01.800
table and the native libraries table
describe the targeting of the files of

00:04:01.800 --> 00:04:01.810
describe the targeting of the files of
 

00:04:01.810 --> 00:04:04.199
describe the targeting of the files of
your app so they let me explain what I

00:04:04.199 --> 00:04:04.209
your app so they let me explain what I
 

00:04:04.209 --> 00:04:07.680
your app so they let me explain what I
mean by that file targeting is the

00:04:07.680 --> 00:04:07.690
mean by that file targeting is the
 

00:04:07.690 --> 00:04:09.660
mean by that file targeting is the
description of what type of device or

00:04:09.660 --> 00:04:09.670
description of what type of device or
 

00:04:09.670 --> 00:04:13.259
description of what type of device or
user a given file is targeted for it's a

00:04:13.259 --> 00:04:13.269
user a given file is targeted for it's a
 

00:04:13.269 --> 00:04:15.509
user a given file is targeted for it's a
central concept in Google Play dynamic

00:04:15.509 --> 00:04:15.519
central concept in Google Play dynamic
 

00:04:15.519 --> 00:04:17.610
central concept in Google Play dynamic
delivery since understanding the

00:04:17.610 --> 00:04:17.620
delivery since understanding the
 

00:04:17.620 --> 00:04:20.580
delivery since understanding the
targeting of files means we can serve to

00:04:20.580 --> 00:04:20.590
targeting of files means we can serve to
 

00:04:20.590 --> 00:04:22.560
targeting of files means we can serve to
a given user only the files they need

00:04:22.560 --> 00:04:22.570
a given user only the files they need
 

00:04:22.570 --> 00:04:24.790
a given user only the files they need
and this is what allows us to make

00:04:24.790 --> 00:04:24.800
and this is what allows us to make
 

00:04:24.800 --> 00:04:28.450
and this is what allows us to make
smaller the app bundle reuses the

00:04:28.450 --> 00:04:28.460
smaller the app bundle reuses the
 

00:04:28.460 --> 00:04:30.879
smaller the app bundle reuses the
targeting that exists in AP case you

00:04:30.879 --> 00:04:30.889
targeting that exists in AP case you
 

00:04:30.889 --> 00:04:32.860
targeting that exists in AP case you
already familiar with this so I'll just

00:04:32.860 --> 00:04:32.870
already familiar with this so I'll just
 

00:04:32.870 --> 00:04:36.700
already familiar with this so I'll just
go I'll run through quickly for

00:04:36.700 --> 00:04:36.710
go I'll run through quickly for
 

00:04:36.710 --> 00:04:39.040
go I'll run through quickly for
resources you specify for example hdpi

00:04:39.040 --> 00:04:39.050
resources you specify for example hdpi
 

00:04:39.050 --> 00:04:41.290
resources you specify for example hdpi
in the directory name of your resource

00:04:41.290 --> 00:04:41.300
in the directory name of your resource
 

00:04:41.300 --> 00:04:46.450
in the directory name of your resource
to target hdpi devices or you add FR to

00:04:46.450 --> 00:04:46.460
to target hdpi devices or you add FR to
 

00:04:46.460 --> 00:04:50.080
to target hdpi devices or you add FR to
target french users for native libraries

00:04:50.080 --> 00:04:50.090
target french users for native libraries
 

00:04:50.090 --> 00:04:52.240
target french users for native libraries
it's the same you add the architecture

00:04:52.240 --> 00:04:52.250
it's the same you add the architecture
 

00:04:52.250 --> 00:04:55.029
it's the same you add the architecture
to the directory again nothing new here

00:04:55.029 --> 00:04:55.039
to the directory again nothing new here
 

00:04:55.039 --> 00:04:58.570
to the directory again nothing new here
the app on door works the same way now

00:04:58.570 --> 00:04:58.580
the app on door works the same way now
 

00:04:58.580 --> 00:05:01.719
the app on door works the same way now
we realize that for some of you assets

00:05:01.719 --> 00:05:01.729
we realize that for some of you assets
 

00:05:01.729 --> 00:05:04.480
we realize that for some of you assets
represent a big part of your app so the

00:05:04.480 --> 00:05:04.490
represent a big part of your app so the
 

00:05:04.490 --> 00:05:06.309
represent a big part of your app so the
app bundle also supports assets

00:05:06.309 --> 00:05:06.319
app bundle also supports assets
 

00:05:06.319 --> 00:05:08.649
app bundle also supports assets
targeting we are starting with language

00:05:08.649 --> 00:05:08.659
targeting we are starting with language
 

00:05:08.659 --> 00:05:10.749
targeting we are starting with language
targeting and we will soon be adding

00:05:10.749 --> 00:05:10.759
targeting and we will soon be adding
 

00:05:10.759 --> 00:05:12.730
targeting and we will soon be adding
texture compression formats and graphics

00:05:12.730 --> 00:05:12.740
texture compression formats and graphics
 

00:05:12.740 --> 00:05:15.309
texture compression formats and graphics
API versions so we can serve only the

00:05:15.309 --> 00:05:15.319
API versions so we can serve only the
 

00:05:15.319 --> 00:05:17.709
API versions so we can serve only the
relevant assets to the users and reduce

00:05:17.709 --> 00:05:17.719
relevant assets to the users and reduce
 

00:05:17.719 --> 00:05:21.629
relevant assets to the users and reduce
further the size of your apps and games

00:05:21.629 --> 00:05:21.639
 
 

00:05:21.639 --> 00:05:24.369
 
this is how you would create a targeted

00:05:24.369 --> 00:05:24.379
this is how you would create a targeted
 

00:05:24.379 --> 00:05:27.010
this is how you would create a targeted
assets directory while making use of the

00:05:27.010 --> 00:05:27.020
assets directory while making use of the
 

00:05:27.020 --> 00:05:29.110
assets directory while making use of the
hash sign to identify an asset directory

00:05:29.110 --> 00:05:29.120
hash sign to identify an asset directory
 

00:05:29.120 --> 00:05:31.959
hash sign to identify an asset directory
that has targeting then come the key

00:05:31.959 --> 00:05:31.969
that has targeting then come the key
 

00:05:31.969 --> 00:05:34.689
that has targeting then come the key
which defines which dimensions we are

00:05:34.689 --> 00:05:34.699
which defines which dimensions we are
 

00:05:34.699 --> 00:05:36.850
which defines which dimensions we are
targeting for example language for the

00:05:36.850 --> 00:05:36.860
targeting for example language for the
 

00:05:36.860 --> 00:05:37.620
targeting for example language for the
language

00:05:37.620 --> 00:05:37.630
language
 

00:05:37.630 --> 00:05:40.180
language
TCF for texture compression formats etc

00:05:40.180 --> 00:05:40.190
TCF for texture compression formats etc
 

00:05:40.190 --> 00:05:43.149
TCF for texture compression formats etc
and then comes the value associated with

00:05:43.149 --> 00:05:43.159
and then comes the value associated with
 

00:05:43.159 --> 00:05:46.379
and then comes the value associated with
the key but let's see some examples

00:05:46.379 --> 00:05:46.389
the key but let's see some examples
 

00:05:46.389 --> 00:05:48.670
the key but let's see some examples
here's an example of a directory

00:05:48.670 --> 00:05:48.680
here's an example of a directory
 

00:05:48.680 --> 00:05:50.860
here's an example of a directory
containing assets or users speaking

00:05:50.860 --> 00:05:50.870
containing assets or users speaking
 

00:05:50.870 --> 00:05:55.420
containing assets or users speaking
French this is another example of an

00:05:55.420 --> 00:05:55.430
French this is another example of an
 

00:05:55.430 --> 00:05:57.070
French this is another example of an
asset directory targeted based on the

00:05:57.070 --> 00:05:57.080
asset directory targeted based on the
 

00:05:57.080 --> 00:05:59.260
asset directory targeted based on the
texture compression format here

00:05:59.260 --> 00:05:59.270
texture compression format here
 

00:05:59.270 --> 00:06:02.019
texture compression format here
targeting devices that support the

00:06:02.019 --> 00:06:02.029
targeting devices that support the
 

00:06:02.029 --> 00:06:06.339
targeting devices that support the
format et Cie one

00:06:06.339 --> 00:06:06.349
 
 

00:06:06.349 --> 00:06:08.260
 
now that you know more about the ethanol

00:06:08.260 --> 00:06:08.270
now that you know more about the ethanol
 

00:06:08.270 --> 00:06:10.779
now that you know more about the ethanol
formats I'll hand it over to Anthony who

00:06:10.779 --> 00:06:10.789
formats I'll hand it over to Anthony who
 

00:06:10.789 --> 00:06:12.429
formats I'll hand it over to Anthony who
will tell you how we use this to serve

00:06:12.429 --> 00:06:12.439
will tell you how we use this to serve
 

00:06:12.439 --> 00:06:18.309
will tell you how we use this to serve
smaller apps to users thanks Pierre hi

00:06:18.309 --> 00:06:18.319
smaller apps to users thanks Pierre hi
 

00:06:18.319 --> 00:06:20.589
smaller apps to users thanks Pierre hi
everyone so Pierre is just explained to

00:06:20.589 --> 00:06:20.599
everyone so Pierre is just explained to
 

00:06:20.599 --> 00:06:22.719
everyone so Pierre is just explained to
you how we're changing the format of

00:06:22.719 --> 00:06:22.729
you how we're changing the format of
 

00:06:22.729 --> 00:06:24.760
you how we're changing the format of
what you publish to the Play Store and

00:06:24.760 --> 00:06:24.770
what you publish to the Play Store and
 

00:06:24.770 --> 00:06:26.049
what you publish to the Play Store and
now I'm going to explain to you how

00:06:26.049 --> 00:06:26.059
now I'm going to explain to you how
 

00:06:26.059 --> 00:06:27.850
now I'm going to explain to you how
we're changing the format of what we

00:06:27.850 --> 00:06:27.860
we're changing the format of what we
 

00:06:27.860 --> 00:06:30.579
we're changing the format of what we
serve to users and how we use this to

00:06:30.579 --> 00:06:30.589
serve to users and how we use this to
 

00:06:30.589 --> 00:06:32.469
serve to users and how we use this to
deliver only what is needed for each

00:06:32.469 --> 00:06:32.479
deliver only what is needed for each
 

00:06:32.479 --> 00:06:38.260
deliver only what is needed for each
user now we start with split apks so in

00:06:38.260 --> 00:06:38.270
user now we start with split apks so in
 

00:06:38.270 --> 00:06:40.269
user now we start with split apks so in
Android lollipop we added a feature to

00:06:40.269 --> 00:06:40.279
Android lollipop we added a feature to
 

00:06:40.279 --> 00:06:42.510
Android lollipop we added a feature to
the Android platform called split apks

00:06:42.510 --> 00:06:42.520
the Android platform called split apks
 

00:06:42.520 --> 00:06:46.239
the Android platform called split apks
split apks allow multiple apks to be

00:06:46.239 --> 00:06:46.249
split apks allow multiple apks to be
 

00:06:46.249 --> 00:06:48.309
split apks allow multiple apks to be
installed on a device and behave as if

00:06:48.309 --> 00:06:48.319
installed on a device and behave as if
 

00:06:48.319 --> 00:06:50.529
installed on a device and behave as if
they were part of a single app these

00:06:50.529 --> 00:06:50.539
they were part of a single app these
 

00:06:50.539 --> 00:06:53.109
they were part of a single app these
split apks can be installed in different

00:06:53.109 --> 00:06:53.119
split apks can be installed in different
 

00:06:53.119 --> 00:06:55.149
split apks can be installed in different
combinations on different devices and

00:06:55.149 --> 00:06:55.159
combinations on different devices and
 

00:06:55.159 --> 00:06:57.429
combinations on different devices and
they can be installed in one go up front

00:06:57.429 --> 00:06:57.439
they can be installed in one go up front
 

00:06:57.439 --> 00:07:00.510
they can be installed in one go up front
or piece-by-piece

00:07:00.510 --> 00:07:00.520
 
 

00:07:00.520 --> 00:07:03.699
 
now a split apk has the same format as a

00:07:03.699 --> 00:07:03.709
now a split apk has the same format as a
 

00:07:03.709 --> 00:07:06.549
now a split apk has the same format as a
normal apk they can contain Java code

00:07:06.549 --> 00:07:06.559
normal apk they can contain Java code
 

00:07:06.559 --> 00:07:09.670
normal apk they can contain Java code
index files native code resources and

00:07:09.670 --> 00:07:09.680
index files native code resources and
 

00:07:09.680 --> 00:07:11.889
index files native code resources and
assets directories and once the date

00:07:11.889 --> 00:07:11.899
assets directories and once the date
 

00:07:11.899 --> 00:07:14.079
assets directories and once the date
BK's are installed these can all be as

00:07:14.079 --> 00:07:14.089
BK's are installed these can all be as
 

00:07:14.089 --> 00:07:17.009
BK's are installed these can all be as
accessed as if they were in a single apk

00:07:17.009 --> 00:07:17.019
accessed as if they were in a single apk
 

00:07:17.019 --> 00:07:20.230
accessed as if they were in a single apk
and furthermore each split APK shares

00:07:20.230 --> 00:07:20.240
and furthermore each split APK shares
 

00:07:20.240 --> 00:07:22.149
and furthermore each split APK shares
the same package name and version code

00:07:22.149 --> 00:07:22.159
the same package name and version code
 

00:07:22.159 --> 00:07:23.649
the same package name and version code
with all the other ones that are

00:07:23.649 --> 00:07:23.659
with all the other ones that are
 

00:07:23.659 --> 00:07:25.420
with all the other ones that are
installed on a device and there must all

00:07:25.420 --> 00:07:25.430
installed on a device and there must all
 

00:07:25.430 --> 00:07:28.420
installed on a device and there must all
be signed with the same kick so now

00:07:28.420 --> 00:07:28.430
be signed with the same kick so now
 

00:07:28.430 --> 00:07:30.159
be signed with the same kick so now
let's take a look at how we can take the

00:07:30.159 --> 00:07:30.169
let's take a look at how we can take the
 

00:07:30.169 --> 00:07:32.139
let's take a look at how we can take the
Android app bundle and generate split

00:07:32.139 --> 00:07:32.149
Android app bundle and generate split
 

00:07:32.149 --> 00:07:37.329
Android app bundle and generate split
apks that we then serve to devices so we

00:07:37.329 --> 00:07:37.339
apks that we then serve to devices so we
 

00:07:37.339 --> 00:07:39.009
apks that we then serve to devices so we
start by looking in the account bundle

00:07:39.009 --> 00:07:39.019
start by looking in the account bundle
 

00:07:39.019 --> 00:07:41.079
start by looking in the account bundle
and finding everything that is common to

00:07:41.079 --> 00:07:41.089
and finding everything that is common to
 

00:07:41.089 --> 00:07:42.699
and finding everything that is common to
all the devices and putting those in a

00:07:42.699 --> 00:07:42.709
all the devices and putting those in a
 

00:07:42.709 --> 00:07:45.009
all the devices and putting those in a
base a became so this would include the

00:07:45.009 --> 00:07:45.019
base a became so this would include the
 

00:07:45.019 --> 00:07:47.409
base a became so this would include the
Android manifest file and the Dex files

00:07:47.409 --> 00:07:47.419
Android manifest file and the Dex files
 

00:07:47.419 --> 00:07:51.100
Android manifest file and the Dex files
for instance then we generate a

00:07:51.100 --> 00:07:51.110
for instance then we generate a
 

00:07:51.110 --> 00:07:53.019
for instance then we generate a
difference with apk for each screen

00:07:53.019 --> 00:07:53.029
difference with apk for each screen
 

00:07:53.029 --> 00:07:55.869
difference with apk for each screen
density each split will contain all the

00:07:55.869 --> 00:07:55.879
density each split will contain all the
 

00:07:55.879 --> 00:07:57.429
density each split will contain all the
drawables that would have been selected

00:07:57.429 --> 00:07:57.439
drawables that would have been selected
 

00:07:57.439 --> 00:07:59.679
drawables that would have been selected
by the android framework on a device

00:07:59.679 --> 00:07:59.689
by the android framework on a device
 

00:07:59.689 --> 00:08:05.529
by the android framework on a device
with that density we can also generate a

00:08:05.529 --> 00:08:05.539
with that density we can also generate a
 

00:08:05.539 --> 00:08:07.689
with that density we can also generate a
different split apk for each native

00:08:07.689 --> 00:08:07.699
different split apk for each native
 

00:08:07.699 --> 00:08:10.329
different split apk for each native
architecture containing native libraries

00:08:10.329 --> 00:08:10.339
architecture containing native libraries
 

00:08:10.339 --> 00:08:13.719
architecture containing native libraries
of that architecture and we can generate

00:08:13.719 --> 00:08:13.729
of that architecture and we can generate
 

00:08:13.729 --> 00:08:15.819
of that architecture and we can generate
a different split for each language

00:08:15.819 --> 00:08:15.829
a different split for each language
 

00:08:15.829 --> 00:08:17.739
a different split for each language
supported by your app putting each

00:08:17.739 --> 00:08:17.749
supported by your app putting each
 

00:08:17.749 --> 00:08:19.430
supported by your app putting each
languages strings in a

00:08:19.430 --> 00:08:19.440
languages strings in a
 

00:08:19.440 --> 00:08:21.890
languages strings in a
different apk now together we call these

00:08:21.890 --> 00:08:21.900
different apk now together we call these
 

00:08:21.900 --> 00:08:24.320
different apk now together we call these
splits configuration space or config

00:08:24.320 --> 00:08:24.330
splits configuration space or config
 

00:08:24.330 --> 00:08:29.480
splits configuration space or config
space now when we go to serve an app to

00:08:29.480 --> 00:08:29.490
space now when we go to serve an app to
 

00:08:29.490 --> 00:08:31.910
space now when we go to serve an app to
a device we only need to serve a subset

00:08:31.910 --> 00:08:31.920
a device we only need to serve a subset
 

00:08:31.920 --> 00:08:33.409
a device we only need to serve a subset
of these splits instead of serving

00:08:33.409 --> 00:08:33.419
of these splits instead of serving
 

00:08:33.419 --> 00:08:36.290
of these splits instead of serving
everything to every device so say I have

00:08:36.290 --> 00:08:36.300
everything to every device so say I have
 

00:08:36.300 --> 00:08:39.440
everything to every device so say I have
a Samsung Galaxy j5 we will install the

00:08:39.440 --> 00:08:39.450
a Samsung Galaxy j5 we will install the
 

00:08:39.450 --> 00:08:42.980
a Samsung Galaxy j5 we will install the
base apk as well as the xhdpi identity

00:08:42.980 --> 00:08:42.990
base apk as well as the xhdpi identity
 

00:08:42.990 --> 00:08:45.590
base apk as well as the xhdpi identity
split the ARM architecture split and the

00:08:45.590 --> 00:08:45.600
split the ARM architecture split and the
 

00:08:45.600 --> 00:08:47.330
split the ARM architecture split and the
English language stick because I only

00:08:47.330 --> 00:08:47.340
English language stick because I only
 

00:08:47.340 --> 00:08:50.300
English language stick because I only
speak English but it can get a bit

00:08:50.300 --> 00:08:50.310
speak English but it can get a bit
 

00:08:50.310 --> 00:08:52.760
speak English but it can get a bit
trickier than that Pierre speaks both

00:08:52.760 --> 00:08:52.770
trickier than that Pierre speaks both
 

00:08:52.770 --> 00:08:54.860
trickier than that Pierre speaks both
French and English and he specifies both

00:08:54.860 --> 00:08:54.870
French and English and he specifies both
 

00:08:54.870 --> 00:08:56.810
French and English and he specifies both
of those languages in his device

00:08:56.810 --> 00:08:56.820
of those languages in his device
 

00:08:56.820 --> 00:08:59.510
of those languages in his device
settings so for his device of pixel to

00:08:59.510 --> 00:08:59.520
settings so for his device of pixel to
 

00:08:59.520 --> 00:09:01.580
settings so for his device of pixel to
excel in addition to the right density

00:09:01.580 --> 00:09:01.590
excel in addition to the right density
 

00:09:01.590 --> 00:09:04.220
excel in addition to the right density
and architecture splits we will serve

00:09:04.220 --> 00:09:04.230
and architecture splits we will serve
 

00:09:04.230 --> 00:09:05.900
and architecture splits we will serve
both the French and the English language

00:09:05.900 --> 00:09:05.910
both the French and the English language
 

00:09:05.910 --> 00:09:09.310
both the French and the English language
bit to his device

00:09:09.310 --> 00:09:09.320
 
 

00:09:09.320 --> 00:09:12.080
 
now suppose Pierre then moves to Brazil

00:09:12.080 --> 00:09:12.090
now suppose Pierre then moves to Brazil
 

00:09:12.090 --> 00:09:14.720
now suppose Pierre then moves to Brazil
and learns Portuguese he might then add

00:09:14.720 --> 00:09:14.730
and learns Portuguese he might then add
 

00:09:14.730 --> 00:09:17.180
and learns Portuguese he might then add
Portuguese as a language on his device

00:09:17.180 --> 00:09:17.190
Portuguese as a language on his device
 

00:09:17.190 --> 00:09:19.880
Portuguese as a language on his device
now when he does this the Play Store

00:09:19.880 --> 00:09:19.890
now when he does this the Play Store
 

00:09:19.890 --> 00:09:21.860
now when he does this the Play Store
recognizes this and will attempt to

00:09:21.860 --> 00:09:21.870
recognizes this and will attempt to
 

00:09:21.870 --> 00:09:23.840
recognizes this and will attempt to
download the Portuguese language split

00:09:23.840 --> 00:09:23.850
download the Portuguese language split
 

00:09:23.850 --> 00:09:25.970
download the Portuguese language split
for all apps that use splits on the

00:09:25.970 --> 00:09:25.980
for all apps that use splits on the
 

00:09:25.980 --> 00:09:28.460
for all apps that use splits on the
device and if the device is not online

00:09:28.460 --> 00:09:28.470
device and if the device is not online
 

00:09:28.470 --> 00:09:30.530
device and if the device is not online
at the time then we will download those

00:09:30.530 --> 00:09:30.540
at the time then we will download those
 

00:09:30.540 --> 00:09:32.870
at the time then we will download those
language spits at the next opportunity

00:09:32.870 --> 00:09:32.880
language spits at the next opportunity
 

00:09:32.880 --> 00:09:37.490
language spits at the next opportunity
and so that's how config slips work but

00:09:37.490 --> 00:09:37.500
and so that's how config slips work but
 

00:09:37.500 --> 00:09:39.110
and so that's how config slips work but
as I mentioned at the start splits are

00:09:39.110 --> 00:09:39.120
as I mentioned at the start splits are
 

00:09:39.120 --> 00:09:40.670
as I mentioned at the start splits are
only supported on lollipop and above

00:09:40.670 --> 00:09:40.680
only supported on lollipop and above
 

00:09:40.680 --> 00:09:43.700
only supported on lollipop and above
this covers about 85% of users at the

00:09:43.700 --> 00:09:43.710
this covers about 85% of users at the
 

00:09:43.710 --> 00:09:46.100
this covers about 85% of users at the
moment but most of you still target pre

00:09:46.100 --> 00:09:46.110
moment but most of you still target pre
 

00:09:46.110 --> 00:09:48.890
moment but most of you still target pre
L devices which is great and for these

00:09:48.890 --> 00:09:48.900
L devices which is great and for these
 

00:09:48.900 --> 00:09:51.260
L devices which is great and for these
devices the app bundle still allows us

00:09:51.260 --> 00:09:51.270
devices the app bundle still allows us
 

00:09:51.270 --> 00:09:53.900
devices the app bundle still allows us
to achieve some of the size savings by

00:09:53.900 --> 00:09:53.910
to achieve some of the size savings by
 

00:09:53.910 --> 00:09:56.570
to achieve some of the size savings by
generating standalone apks containing

00:09:56.570 --> 00:09:56.580
generating standalone apks containing
 

00:09:56.580 --> 00:09:59.240
generating standalone apks containing
specific densities and architectures so

00:09:59.240 --> 00:09:59.250
specific densities and architectures so
 

00:09:59.250 --> 00:10:01.400
specific densities and architectures so
instead of generating splits as we would

00:10:01.400 --> 00:10:01.410
instead of generating splits as we would
 

00:10:01.410 --> 00:10:03.380
instead of generating splits as we would
do for L plus we would generate this

00:10:03.380 --> 00:10:03.390
do for L plus we would generate this
 

00:10:03.390 --> 00:10:08.180
do for L plus we would generate this
matrix of stand-alone apks we briefly

00:10:08.180 --> 00:10:08.190
matrix of stand-alone apks we briefly
 

00:10:08.190 --> 00:10:10.520
matrix of stand-alone apks we briefly
consider extending this to language

00:10:10.520 --> 00:10:10.530
consider extending this to language
 

00:10:10.530 --> 00:10:12.380
consider extending this to language
splits as well but we did some of the

00:10:12.380 --> 00:10:12.390
splits as well but we did some of the
 

00:10:12.390 --> 00:10:13.850
splits as well but we did some of the
sums and it got a little bit out of hand

00:10:13.850 --> 00:10:13.860
sums and it got a little bit out of hand
 

00:10:13.860 --> 00:10:17.510
sums and it got a little bit out of hand
so for now for pre L devices we asked to

00:10:17.510 --> 00:10:17.520
so for now for pre L devices we asked to
 

00:10:17.520 --> 00:10:19.250
so for now for pre L devices we asked to
include all the languages in each of the

00:10:19.250 --> 00:10:19.260
include all the languages in each of the
 

00:10:19.260 --> 00:10:24.050
include all the languages in each of the
standalone apks now when we go to serve

00:10:24.050 --> 00:10:24.060
standalone apks now when we go to serve
 

00:10:24.060 --> 00:10:26.870
standalone apks now when we go to serve
the app we choose the best single apk

00:10:26.870 --> 00:10:26.880
the app we choose the best single apk
 

00:10:26.880 --> 00:10:29.270
the app we choose the best single apk
for a device so if we have my first

00:10:29.270 --> 00:10:29.280
for a device so if we have my first
 

00:10:29.280 --> 00:10:31.360
for a device so if we have my first
Android device the Galaxy Nexus

00:10:31.360 --> 00:10:31.370
Android device the Galaxy Nexus
 

00:10:31.370 --> 00:10:34.480
Android device the Galaxy Nexus
we would serve the hdpi arm stand-alone

00:10:34.480 --> 00:10:34.490
we would serve the hdpi arm stand-alone
 

00:10:34.490 --> 00:10:36.880
we would serve the hdpi arm stand-alone
apk you might recognize this because

00:10:36.880 --> 00:10:36.890
apk you might recognize this because
 

00:10:36.890 --> 00:10:38.260
apk you might recognize this because
this is similar to what you may have

00:10:38.260 --> 00:10:38.270
this is similar to what you may have
 

00:10:38.270 --> 00:10:42.550
this is similar to what you may have
done in the past with multi apk but

00:10:42.550 --> 00:10:42.560
done in the past with multi apk but
 

00:10:42.560 --> 00:10:44.440
done in the past with multi apk but
let's put this all together the picture

00:10:44.440 --> 00:10:44.450
let's put this all together the picture
 

00:10:44.450 --> 00:10:46.660
let's put this all together the picture
looks like this and you actually don't

00:10:46.660 --> 00:10:46.670
looks like this and you actually don't
 

00:10:46.670 --> 00:10:48.340
looks like this and you actually don't
need to worry about the details about

00:10:48.340 --> 00:10:48.350
need to worry about the details about
 

00:10:48.350 --> 00:10:51.250
need to worry about the details about
how all these bit apks are generated or

00:10:51.250 --> 00:10:51.260
how all these bit apks are generated or
 

00:10:51.260 --> 00:10:53.950
how all these bit apks are generated or
standalone apks are generated all you

00:10:53.950 --> 00:10:53.960
standalone apks are generated all you
 

00:10:53.960 --> 00:10:55.900
standalone apks are generated all you
have to do is upload a single app bundle

00:10:55.900 --> 00:10:55.910
have to do is upload a single app bundle
 

00:10:55.910 --> 00:10:58.420
have to do is upload a single app bundle
and then play generates the right splits

00:10:58.420 --> 00:10:58.430
and then play generates the right splits
 

00:10:58.430 --> 00:11:00.580
and then play generates the right splits
and to select the right ones to serve

00:11:00.580 --> 00:11:00.590
and to select the right ones to serve
 

00:11:00.590 --> 00:11:06.070
and to select the right ones to serve
for each device and the dimensions we've

00:11:06.070 --> 00:11:06.080
for each device and the dimensions we've
 

00:11:06.080 --> 00:11:08.160
for each device and the dimensions we've
discussed so far are only the beginning

00:11:08.160 --> 00:11:08.170
discussed so far are only the beginning
 

00:11:08.170 --> 00:11:10.990
discussed so far are only the beginning
Pierre discussed how the app bundle lets

00:11:10.990 --> 00:11:11.000
Pierre discussed how the app bundle lets
 

00:11:11.000 --> 00:11:13.780
Pierre discussed how the app bundle lets
you target assets by graphics API and we

00:11:13.780 --> 00:11:13.790
you target assets by graphics API and we
 

00:11:13.790 --> 00:11:15.580
you target assets by graphics API and we
will soon generate config splits based

00:11:15.580 --> 00:11:15.590
will soon generate config splits based
 

00:11:15.590 --> 00:11:18.100
will soon generate config splits based
on that we'll also start generating

00:11:18.100 --> 00:11:18.110
on that we'll also start generating
 

00:11:18.110 --> 00:11:20.260
on that we'll also start generating
config splits that take advantage of new

00:11:20.260 --> 00:11:20.270
config splits that take advantage of new
 

00:11:20.270 --> 00:11:22.480
config splits that take advantage of new
platform features and we'll start with

00:11:22.480 --> 00:11:22.490
platform features and we'll start with
 

00:11:22.490 --> 00:11:24.490
platform features and we'll start with
supporting uncompressed native libraries

00:11:24.490 --> 00:11:24.500
supporting uncompressed native libraries
 

00:11:24.500 --> 00:11:30.250
supporting uncompressed native libraries
on m+ devices now I'll ask Evo to come

00:11:30.250 --> 00:11:30.260
on m+ devices now I'll ask Evo to come
 

00:11:30.260 --> 00:11:32.320
on m+ devices now I'll ask Evo to come
up to take a look at how much we can

00:11:32.320 --> 00:11:32.330
up to take a look at how much we can
 

00:11:32.330 --> 00:11:34.510
up to take a look at how much we can
reduce app size by using this app

00:11:34.510 --> 00:11:34.520
reduce app size by using this app
 

00:11:34.520 --> 00:11:39.180
reduce app size by using this app
Thunder Thank You Anthony

00:11:39.180 --> 00:11:39.190
Thunder Thank You Anthony
 

00:11:39.190 --> 00:11:42.280
Thunder Thank You Anthony
now that we know how play serves with

00:11:42.280 --> 00:11:42.290
now that we know how play serves with
 

00:11:42.290 --> 00:11:45.190
now that we know how play serves with
apks to your devices we're going to talk

00:11:45.190 --> 00:11:45.200
apks to your devices we're going to talk
 

00:11:45.200 --> 00:11:48.880
apks to your devices we're going to talk
about the size savings with upon us we

00:11:48.880 --> 00:11:48.890
about the size savings with upon us we
 

00:11:48.890 --> 00:11:52.000
about the size savings with upon us we
found out that on average apps published

00:11:52.000 --> 00:11:52.010
found out that on average apps published
 

00:11:52.010 --> 00:11:56.380
found out that on average apps published
with F bundles are 20% smaller and that

00:11:56.380 --> 00:11:56.390
with F bundles are 20% smaller and that
 

00:11:56.390 --> 00:11:59.710
with F bundles are 20% smaller and that
is release for 20% savings every time

00:11:59.710 --> 00:11:59.720
is release for 20% savings every time
 

00:11:59.720 --> 00:12:01.480
is release for 20% savings every time
your application is downloaded or

00:12:01.480 --> 00:12:01.490
your application is downloaded or
 

00:12:01.490 --> 00:12:04.810
your application is downloaded or
upgraded now let's look at how we reach

00:12:04.810 --> 00:12:04.820
upgraded now let's look at how we reach
 

00:12:04.820 --> 00:12:07.660
upgraded now let's look at how we reach
to this number we analyzed all the

00:12:07.660 --> 00:12:07.670
to this number we analyzed all the
 

00:12:07.670 --> 00:12:09.850
to this number we analyzed all the
applications in Play Store with more

00:12:09.850 --> 00:12:09.860
applications in Play Store with more
 

00:12:09.860 --> 00:12:13.300
applications in Play Store with more
than 1 million downloads and we found

00:12:13.300 --> 00:12:13.310
than 1 million downloads and we found
 

00:12:13.310 --> 00:12:15.940
than 1 million downloads and we found
out that for Strings we can save over

00:12:15.940 --> 00:12:15.950
out that for Strings we can save over
 

00:12:15.950 --> 00:12:19.690
out that for Strings we can save over
95% of their size by using the language

00:12:19.690 --> 00:12:19.700
95% of their size by using the language
 

00:12:19.700 --> 00:12:24.670
95% of their size by using the language
splits for images this is 45% and for

00:12:24.670 --> 00:12:24.680
splits for images this is 45% and for
 

00:12:24.680 --> 00:12:27.460
splits for images this is 45% and for
native libraries we can say 20% of their

00:12:27.460 --> 00:12:27.470
native libraries we can say 20% of their
 

00:12:27.470 --> 00:12:32.260
native libraries we can say 20% of their
sizes this means if every app virtual

00:12:32.260 --> 00:12:32.270
sizes this means if every app virtual
 

00:12:32.270 --> 00:12:34.600
sizes this means if every app virtual
mode to add bundles we would save

00:12:34.600 --> 00:12:34.610
mode to add bundles we would save
 

00:12:34.610 --> 00:12:38.290
mode to add bundles we would save
approximately 10 terabytes of data per

00:12:38.290 --> 00:12:38.300
approximately 10 terabytes of data per
 

00:12:38.300 --> 00:12:41.590
approximately 10 terabytes of data per
day from app downloads and updates that

00:12:41.590 --> 00:12:41.600
day from app downloads and updates that
 

00:12:41.600 --> 00:12:44.830
day from app downloads and updates that
is 10 million gigabytes or 300 million

00:12:44.830 --> 00:12:44.840
is 10 million gigabytes or 300 million
 

00:12:44.840 --> 00:12:48.280
is 10 million gigabytes or 300 million
music videos on YouTube and on top of

00:12:48.280 --> 00:12:48.290
music videos on YouTube and on top of
 

00:12:48.290 --> 00:12:51.970
music videos on YouTube and on top of
that users could see an extra 300

00:12:51.970 --> 00:12:51.980
that users could see an extra 300
 

00:12:51.980 --> 00:12:55.330
that users could see an extra 300
megabytes of disk space for more photos

00:12:55.330 --> 00:12:55.340
megabytes of disk space for more photos
 

00:12:55.340 --> 00:12:58.980
megabytes of disk space for more photos
more apps or more music on their devices

00:12:58.980 --> 00:12:58.990
more apps or more music on their devices
 

00:12:58.990 --> 00:13:02.410
more apps or more music on their devices
so now let's look at actual size savings

00:13:02.410 --> 00:13:02.420
so now let's look at actual size savings
 

00:13:02.420 --> 00:13:04.750
so now let's look at actual size savings
that are some of our early access

00:13:04.750 --> 00:13:04.760
that are some of our early access
 

00:13:04.760 --> 00:13:07.720
that are some of our early access
program mem partners so we're going to

00:13:07.720 --> 00:13:07.730
program mem partners so we're going to
 

00:13:07.730 --> 00:13:11.470
program mem partners so we're going to
start with Twitter Twitter were already

00:13:11.470 --> 00:13:11.480
start with Twitter Twitter were already
 

00:13:11.480 --> 00:13:14.350
start with Twitter Twitter were already
publishing with multi apks before with

00:13:14.350 --> 00:13:14.360
publishing with multi apks before with
 

00:13:14.360 --> 00:13:17.080
publishing with multi apks before with
architectures splits however their

00:13:17.080 --> 00:13:17.090
architectures splits however their
 

00:13:17.090 --> 00:13:19.930
architectures splits however their
application is translated into a lot of

00:13:19.930 --> 00:13:19.940
application is translated into a lot of
 

00:13:19.940 --> 00:13:22.240
application is translated into a lot of
languages and it supports multiple

00:13:22.240 --> 00:13:22.250
languages and it supports multiple
 

00:13:22.250 --> 00:13:25.900
languages and it supports multiple
screen densities they still get lots of

00:13:25.900 --> 00:13:25.910
screen densities they still get lots of
 

00:13:25.910 --> 00:13:28.750
screen densities they still get lots of
savings with publishing with app bundles

00:13:28.750 --> 00:13:28.760
savings with publishing with app bundles
 

00:13:28.760 --> 00:13:32.290
savings with publishing with app bundles
which is 20% decrease in the size plus

00:13:32.290 --> 00:13:32.300
which is 20% decrease in the size plus
 

00:13:32.300 --> 00:13:34.270
which is 20% decrease in the size plus
they don't have to serve with multi apk

00:13:34.270 --> 00:13:34.280
they don't have to serve with multi apk
 

00:13:34.280 --> 00:13:37.840
they don't have to serve with multi apk
anymore the next one is text plus which

00:13:37.840 --> 00:13:37.850
anymore the next one is text plus which
 

00:13:37.850 --> 00:13:41.500
anymore the next one is text plus which
wasn't using multi apks before but add

00:13:41.500 --> 00:13:41.510
wasn't using multi apks before but add
 

00:13:41.510 --> 00:13:45.930
wasn't using multi apks before but add
bundles they achieved 26% size savings

00:13:45.930 --> 00:13:45.940
bundles they achieved 26% size savings
 

00:13:45.940 --> 00:13:50.550
bundles they achieved 26% size savings
across all dimensions with app bundles

00:13:50.550 --> 00:13:50.560
across all dimensions with app bundles
 

00:13:50.560 --> 00:13:53.770
across all dimensions with app bundles
Jomo's app is half of his original size

00:13:53.770 --> 00:13:53.780
Jomo's app is half of his original size
 

00:13:53.780 --> 00:13:56.590
Jomo's app is half of his original size
and this is because they have a large

00:13:56.590 --> 00:13:56.600
and this is because they have a large
 

00:13:56.600 --> 00:13:58.630
and this is because they have a large
need to library and they supported

00:13:58.630 --> 00:13:58.640
need to library and they supported
 

00:13:58.640 --> 00:14:02.730
need to library and they supported
multiple architectures in a single apk

00:14:02.730 --> 00:14:02.740
multiple architectures in a single apk
 

00:14:02.740 --> 00:14:05.380
multiple architectures in a single apk
now let's look at how we can build an

00:14:05.380 --> 00:14:05.390
now let's look at how we can build an
 

00:14:05.390 --> 00:14:08.940
now let's look at how we can build an
app bundle and he can start saving now

00:14:08.940 --> 00:14:08.950
app bundle and he can start saving now
 

00:14:08.950 --> 00:14:12.850
app bundle and he can start saving now
the latest Android studio 3.2 canary has

00:14:12.850 --> 00:14:12.860
the latest Android studio 3.2 canary has
 

00:14:12.860 --> 00:14:14.800
the latest Android studio 3.2 canary has
full support for building Android app

00:14:14.800 --> 00:14:14.810
full support for building Android app
 

00:14:14.810 --> 00:14:17.560
full support for building Android app
bundles now we're going to see a new

00:14:17.560 --> 00:14:17.570
bundles now we're going to see a new
 

00:14:17.570 --> 00:14:19.840
bundles now we're going to see a new
option to build a bundle in the build

00:14:19.840 --> 00:14:19.850
option to build a bundle in the build
 

00:14:19.850 --> 00:14:23.380
option to build a bundle in the build
menu there anything is signed app bundle

00:14:23.380 --> 00:14:23.390
menu there anything is signed app bundle
 

00:14:23.390 --> 00:14:26.320
menu there anything is signed app bundle
is easy as well we're gonna just select

00:14:26.320 --> 00:14:26.330
is easy as well we're gonna just select
 

00:14:26.330 --> 00:14:28.960
is easy as well we're gonna just select
your app bundle @ab module for that

00:14:28.960 --> 00:14:28.970
your app bundle @ab module for that
 

00:14:28.970 --> 00:14:31.240
your app bundle @ab module for that
flavor and build type and Android studio

00:14:31.240 --> 00:14:31.250
flavor and build type and Android studio
 

00:14:31.250 --> 00:14:34.000
flavor and build type and Android studio
is going to create an app bundle for you

00:14:34.000 --> 00:14:34.010
is going to create an app bundle for you
 

00:14:34.010 --> 00:14:39.940
is going to create an app bundle for you
sign which is ready for publishing for

00:14:39.940 --> 00:14:39.950
sign which is ready for publishing for
 

00:14:39.950 --> 00:14:42.640
sign which is ready for publishing for
those who prefer command-line or wish to

00:14:42.640 --> 00:14:42.650
those who prefer command-line or wish to
 

00:14:42.650 --> 00:14:44.590
those who prefer command-line or wish to
integrate with automated build systems

00:14:44.590 --> 00:14:44.600
integrate with automated build systems
 

00:14:44.600 --> 00:14:47.650
integrate with automated build systems
the new Android and Gradle android

00:14:47.650 --> 00:14:47.660
the new Android and Gradle android
 

00:14:47.660 --> 00:14:50.860
the new Android and Gradle android
plug-in provides a new set of tests to

00:14:50.860 --> 00:14:50.870
plug-in provides a new set of tests to
 

00:14:50.870 --> 00:14:53.440
plug-in provides a new set of tests to
build Android app bundles if you

00:14:53.440 --> 00:14:53.450
build Android app bundles if you
 

00:14:53.450 --> 00:14:55.120
build Android app bundles if you
remember this is what you use the

00:14:55.120 --> 00:14:55.130
remember this is what you use the
 

00:14:55.130 --> 00:14:56.770
remember this is what you use the
assemble tasks on the command

00:14:56.770 --> 00:14:56.780
assemble tasks on the command
 

00:14:56.780 --> 00:15:00.340
assemble tasks on the command
to create the apk now for app bundles

00:15:00.340 --> 00:15:00.350
to create the apk now for app bundles
 

00:15:00.350 --> 00:15:02.710
to create the apk now for app bundles
you're going to switch to the bundle

00:15:02.710 --> 00:15:02.720
you're going to switch to the bundle
 

00:15:02.720 --> 00:15:05.830
you're going to switch to the bundle
comment similar to the assemble tasks

00:15:05.830 --> 00:15:05.840
comment similar to the assemble tasks
 

00:15:05.840 --> 00:15:08.290
comment similar to the assemble tasks
bundle tests also allow you to build a

00:15:08.290 --> 00:15:08.300
bundle tests also allow you to build a
 

00:15:08.300 --> 00:15:11.470
bundle tests also allow you to build a
specific flavor of your application once

00:15:11.470 --> 00:15:11.480
specific flavor of your application once
 

00:15:11.480 --> 00:15:14.350
specific flavor of your application once
the build the the bundle task finishes

00:15:14.350 --> 00:15:14.360
the build the the bundle task finishes
 

00:15:14.360 --> 00:15:16.780
the build the the bundle task finishes
is going to create an app bundle in the

00:15:16.780 --> 00:15:16.790
is going to create an app bundle in the
 

00:15:16.790 --> 00:15:18.610
is going to create an app bundle in the
output folder with the flavor and the

00:15:18.610 --> 00:15:18.620
output folder with the flavor and the
 

00:15:18.620 --> 00:15:21.550
output folder with the flavor and the
build type chosen the build type build

00:15:21.550 --> 00:15:21.560
build type chosen the build type build
 

00:15:21.560 --> 00:15:26.650
build type chosen the build type build
artifact is called bundled IAB bundle

00:15:26.650 --> 00:15:26.660
artifact is called bundled IAB bundle
 

00:15:26.660 --> 00:15:28.780
artifact is called bundled IAB bundle
tests are compatible with the signing

00:15:28.780 --> 00:15:28.790
tests are compatible with the signing
 

00:15:28.790 --> 00:15:31.630
tests are compatible with the signing
config signore built up Gradle files and

00:15:31.630 --> 00:15:31.640
config signore built up Gradle files and
 

00:15:31.640 --> 00:15:34.450
config signore built up Gradle files and
with a single Gradle task you can

00:15:34.450 --> 00:15:34.460
with a single Gradle task you can
 

00:15:34.460 --> 00:15:36.910
with a single Gradle task you can
produce a bundles that are signed and

00:15:36.910 --> 00:15:36.920
produce a bundles that are signed and
 

00:15:36.920 --> 00:15:42.460
produce a bundles that are signed and
ready for publishing and also with app

00:15:42.460 --> 00:15:42.470
ready for publishing and also with app
 

00:15:42.470 --> 00:15:45.670
ready for publishing and also with app
bundles Play will automatically select

00:15:45.670 --> 00:15:45.680
bundles Play will automatically select
 

00:15:45.680 --> 00:15:47.800
bundles Play will automatically select
your application into architectures

00:15:47.800 --> 00:15:47.810
your application into architectures
 

00:15:47.810 --> 00:15:50.770
your application into architectures
screen density and language splits by

00:15:50.770 --> 00:15:50.780
screen density and language splits by
 

00:15:50.780 --> 00:15:52.990
screen density and language splits by
default you don't need to do any

00:15:52.990 --> 00:15:53.000
default you don't need to do any
 

00:15:53.000 --> 00:15:57.040
default you don't need to do any
configurations however we still want our

00:15:57.040 --> 00:15:57.050
configurations however we still want our
 

00:15:57.050 --> 00:15:58.840
configurations however we still want our
developers to have full control over

00:15:58.840 --> 00:15:58.850
developers to have full control over
 

00:15:58.850 --> 00:16:02.290
developers to have full control over
their splits so if for any reason you

00:16:02.290 --> 00:16:02.300
their splits so if for any reason you
 

00:16:02.300 --> 00:16:04.540
their splits so if for any reason you
would like to disable splitting by any

00:16:04.540 --> 00:16:04.550
would like to disable splitting by any
 

00:16:04.550 --> 00:16:07.120
would like to disable splitting by any
dimension you can do so by using the

00:16:07.120 --> 00:16:07.130
dimension you can do so by using the
 

00:16:07.130 --> 00:16:10.540
dimension you can do so by using the
newly introduced bundle block here now

00:16:10.540 --> 00:16:10.550
newly introduced bundle block here now
 

00:16:10.550 --> 00:16:12.370
newly introduced bundle block here now
pierre is going to talk about how to

00:16:12.370 --> 00:16:12.380
pierre is going to talk about how to
 

00:16:12.380 --> 00:16:14.020
pierre is going to talk about how to
publish your app bundle in the Play

00:16:14.020 --> 00:16:14.030
publish your app bundle in the Play
 

00:16:14.030 --> 00:16:20.079
publish your app bundle in the Play
console Thank You beau alright so you

00:16:20.079 --> 00:16:20.089
console Thank You beau alright so you
 

00:16:20.089 --> 00:16:21.130
console Thank You beau alright so you
have built an app bundle

00:16:21.130 --> 00:16:21.140
have built an app bundle
 

00:16:21.140 --> 00:16:23.470
have built an app bundle
now let's look at how you can publish it

00:16:23.470 --> 00:16:23.480
now let's look at how you can publish it
 

00:16:23.480 --> 00:16:27.460
now let's look at how you can publish it
on Google Play console first you must

00:16:27.460 --> 00:16:27.470
on Google Play console first you must
 

00:16:27.470 --> 00:16:30.280
on Google Play console first you must
enroll in app signing by Google Play for

00:16:30.280 --> 00:16:30.290
enroll in app signing by Google Play for
 

00:16:30.290 --> 00:16:31.750
enroll in app signing by Google Play for
those who remember we launched this

00:16:31.750 --> 00:16:31.760
those who remember we launched this
 

00:16:31.760 --> 00:16:34.420
those who remember we launched this
program at Google i/o last year when

00:16:34.420 --> 00:16:34.430
program at Google i/o last year when
 

00:16:34.430 --> 00:16:36.430
program at Google i/o last year when
enrolling you securely transfer you

00:16:36.430 --> 00:16:36.440
enrolling you securely transfer you
 

00:16:36.440 --> 00:16:40.660
enrolling you securely transfer you
release key to Google Play play then

00:16:40.660 --> 00:16:40.670
release key to Google Play play then
 

00:16:40.670 --> 00:16:42.520
release key to Google Play play then
uses this release key to sign the

00:16:42.520 --> 00:16:42.530
uses this release key to sign the
 

00:16:42.530 --> 00:16:44.470
uses this release key to sign the
generated apks on your behalf

00:16:44.470 --> 00:16:44.480
generated apks on your behalf
 

00:16:44.480 --> 00:16:48.670
generated apks on your behalf
before serving them to users but notes

00:16:48.670 --> 00:16:48.680
before serving them to users but notes
 

00:16:48.680 --> 00:16:51.280
before serving them to users but notes
that if you keep uploading apks on your

00:16:51.280 --> 00:16:51.290
that if you keep uploading apks on your
 

00:16:51.290 --> 00:16:53.470
that if you keep uploading apks on your
production tap track while you test the

00:16:53.470 --> 00:16:53.480
production tap track while you test the
 

00:16:53.480 --> 00:16:56.200
production tap track while you test the
app bundle in the test track play will

00:16:56.200 --> 00:16:56.210
app bundle in the test track play will
 

00:16:56.210 --> 00:16:59.140
app bundle in the test track play will
not resign the uploaded apks and we did

00:16:59.140 --> 00:16:59.150
not resign the uploaded apks and we did
 

00:16:59.150 --> 00:17:00.940
not resign the uploaded apks and we did
this so you can feel confident trying

00:17:00.940 --> 00:17:00.950
this so you can feel confident trying
 

00:17:00.950 --> 00:17:02.680
this so you can feel confident trying
the app bundle and small audience first

00:17:02.680 --> 00:17:02.690
the app bundle and small audience first
 

00:17:02.690 --> 00:17:04.360
the app bundle and small audience first
without affecting your current

00:17:04.360 --> 00:17:04.370
without affecting your current
 

00:17:04.370 --> 00:17:07.630
without affecting your current
production users

00:17:07.630 --> 00:17:07.640
 
 

00:17:07.640 --> 00:17:09.800
 
once you're enrolled we can manage

00:17:09.800 --> 00:17:09.810
once you're enrolled we can manage
 

00:17:09.810 --> 00:17:11.980
once you're enrolled we can manage
releases just like you did for ATK's

00:17:11.980 --> 00:17:11.990
releases just like you did for ATK's
 

00:17:11.990 --> 00:17:14.720
releases just like you did for ATK's
create a new release drop the app

00:17:14.720 --> 00:17:14.730
create a new release drop the app
 

00:17:14.730 --> 00:17:16.400
create a new release drop the app
bundles in the same location where you

00:17:16.400 --> 00:17:16.410
bundles in the same location where you
 

00:17:16.410 --> 00:17:18.830
bundles in the same location where you
currently drop apks and wait for the air

00:17:18.830 --> 00:17:18.840
currently drop apks and wait for the air
 

00:17:18.840 --> 00:17:21.980
currently drop apks and wait for the air
plot once you upload once uploaded you

00:17:21.980 --> 00:17:21.990
plot once you upload once uploaded you
 

00:17:21.990 --> 00:17:23.830
plot once you upload once uploaded you
can review your release and release out

00:17:23.830 --> 00:17:23.840
can review your release and release out
 

00:17:23.840 --> 00:17:27.200
can review your release and release out
that's it and I can't stress this enough

00:17:27.200 --> 00:17:27.210
that's it and I can't stress this enough
 

00:17:27.210 --> 00:17:31.970
that's it and I can't stress this enough
no more multi-apk is to deal with play

00:17:31.970 --> 00:17:31.980
no more multi-apk is to deal with play
 

00:17:31.980 --> 00:17:33.680
no more multi-apk is to deal with play
console has created in the background

00:17:33.680 --> 00:17:33.690
console has created in the background
 

00:17:33.690 --> 00:17:36.620
console has created in the background
all the apks for the supported devices

00:17:36.620 --> 00:17:36.630
all the apks for the supported devices
 

00:17:36.630 --> 00:17:41.450
all the apks for the supported devices
for you now you have uploaded your app

00:17:41.450 --> 00:17:41.460
for you now you have uploaded your app
 

00:17:41.460 --> 00:17:43.220
for you now you have uploaded your app
bundle and play has done all the heavy

00:17:43.220 --> 00:17:43.230
bundle and play has done all the heavy
 

00:17:43.230 --> 00:17:45.920
bundle and play has done all the heavy
lifting for you great but wouldn't it be

00:17:45.920 --> 00:17:45.930
lifting for you great but wouldn't it be
 

00:17:45.930 --> 00:17:48.230
lifting for you great but wouldn't it be
nice to be able to have an overview of

00:17:48.230 --> 00:17:48.240
nice to be able to have an overview of
 

00:17:48.240 --> 00:17:51.020
nice to be able to have an overview of
what play has generated well we have

00:17:51.020 --> 00:17:51.030
what play has generated well we have
 

00:17:51.030 --> 00:17:52.910
what play has generated well we have
built a new tool in play console called

00:17:52.910 --> 00:17:52.920
built a new tool in play console called
 

00:17:52.920 --> 00:17:56.540
built a new tool in play console called
bundle Explorer bundle Explorer lets you

00:17:56.540 --> 00:17:56.550
bundle Explorer bundle Explorer lets you
 

00:17:56.550 --> 00:17:58.850
bundle Explorer bundle Explorer lets you
navigate your uploaded bundles let's

00:17:58.850 --> 00:17:58.860
navigate your uploaded bundles let's
 

00:17:58.860 --> 00:18:02.840
navigate your uploaded bundles let's
have a look on the first screen you can

00:18:02.840 --> 00:18:02.850
have a look on the first screen you can
 

00:18:02.850 --> 00:18:05.450
have a look on the first screen you can
see at the top right corner the size

00:18:05.450 --> 00:18:05.460
see at the top right corner the size
 

00:18:05.460 --> 00:18:07.640
see at the top right corner the size
savings you gain by publishing a bundle

00:18:07.640 --> 00:18:07.650
savings you gain by publishing a bundle
 

00:18:07.650 --> 00:18:10.160
savings you gain by publishing a bundle
here we saved over a quarter of your app

00:18:10.160 --> 00:18:10.170
here we saved over a quarter of your app
 

00:18:10.170 --> 00:18:13.700
here we saved over a quarter of your app
of course this is different by device so

00:18:13.700 --> 00:18:13.710
of course this is different by device so
 

00:18:13.710 --> 00:18:15.320
of course this is different by device so
we calculated this using a popular

00:18:15.320 --> 00:18:15.330
we calculated this using a popular
 

00:18:15.330 --> 00:18:18.920
we calculated this using a popular
device configuration you will also find

00:18:18.920 --> 00:18:18.930
device configuration you will also find
 

00:18:18.930 --> 00:18:20.900
device configuration you will also find
below the list of device configurations

00:18:20.900 --> 00:18:20.910
below the list of device configurations
 

00:18:20.910 --> 00:18:23.570
below the list of device configurations
and the total size of the apk served to

00:18:23.570 --> 00:18:23.580
and the total size of the apk served to
 

00:18:23.580 --> 00:18:25.850
and the total size of the apk served to
those devices can even click on View

00:18:25.850 --> 00:18:25.860
those devices can even click on View
 

00:18:25.860 --> 00:18:27.860
those devices can even click on View
Devices and see which devices are in

00:18:27.860 --> 00:18:27.870
Devices and see which devices are in
 

00:18:27.870 --> 00:18:32.600
Devices and see which devices are in
each pocket you can even search for any

00:18:32.600 --> 00:18:32.610
each pocket you can even search for any
 

00:18:32.610 --> 00:18:35.120
each pocket you can even search for any
supported device by name to download the

00:18:35.120 --> 00:18:35.130
supported device by name to download the
 

00:18:35.130 --> 00:18:37.250
supported device by name to download the
set of generated apks that is served to

00:18:37.250 --> 00:18:37.260
set of generated apks that is served to
 

00:18:37.260 --> 00:18:40.040
set of generated apks that is served to
that specific device this will be super

00:18:40.040 --> 00:18:40.050
that specific device this will be super
 

00:18:40.050 --> 00:18:41.840
that specific device this will be super
helpful when you get you know that bug

00:18:41.840 --> 00:18:41.850
helpful when you get you know that bug
 

00:18:41.850 --> 00:18:44.240
helpful when you get you know that bug
report and that specific device and you

00:18:44.240 --> 00:18:44.250
report and that specific device and you
 

00:18:44.250 --> 00:18:46.400
report and that specific device and you
want to get exactly what the user has

00:18:46.400 --> 00:18:46.410
want to get exactly what the user has
 

00:18:46.410 --> 00:18:49.910
want to get exactly what the user has
gotten and what the ATK's were served so

00:18:49.910 --> 00:18:49.920
gotten and what the ATK's were served so
 

00:18:49.920 --> 00:18:51.470
gotten and what the ATK's were served so
you just search for the name click

00:18:51.470 --> 00:18:51.480
you just search for the name click
 

00:18:51.480 --> 00:18:53.480
you just search for the name click
download and you'll get the set of ATK's

00:18:53.480 --> 00:18:53.490
download and you'll get the set of ATK's
 

00:18:53.490 --> 00:18:58.730
download and you'll get the set of ATK's
that play has served of course we

00:18:58.730 --> 00:18:58.740
that play has served of course we
 

00:18:58.740 --> 00:19:00.380
that play has served of course we
haven't forgotten all of you who use our

00:19:00.380 --> 00:19:00.390
haven't forgotten all of you who use our
 

00:19:00.390 --> 00:19:03.140
haven't forgotten all of you who use our
publishing API uploading app bundles is

00:19:03.140 --> 00:19:03.150
publishing API uploading app bundles is
 

00:19:03.150 --> 00:19:06.200
publishing API uploading app bundles is
also available using our API today you

00:19:06.200 --> 00:19:06.210
also available using our API today you
 

00:19:06.210 --> 00:19:07.880
also available using our API today you
will find all the documentation at

00:19:07.880 --> 00:19:07.890
will find all the documentation at
 

00:19:07.890 --> 00:19:11.150
will find all the documentation at
developers.google.com slash Android -

00:19:11.150 --> 00:19:11.160
developers.google.com slash Android -
 

00:19:11.160 --> 00:19:15.740
developers.google.com slash Android -
publisher I'm now handed over to Anthony

00:19:15.740 --> 00:19:15.750
publisher I'm now handed over to Anthony
 

00:19:15.750 --> 00:19:19.830
publisher I'm now handed over to Anthony
thanks for yeah so we've now learned how

00:19:19.830 --> 00:19:19.840
thanks for yeah so we've now learned how
 

00:19:19.840 --> 00:19:21.870
thanks for yeah so we've now learned how
to build and publish an Android app

00:19:21.870 --> 00:19:21.880
to build and publish an Android app
 

00:19:21.880 --> 00:19:24.210
to build and publish an Android app
bundle but before we finalize a release

00:19:24.210 --> 00:19:24.220
bundle but before we finalize a release
 

00:19:24.220 --> 00:19:26.330
bundle but before we finalize a release
we'd still like to do a round of tests

00:19:26.330 --> 00:19:26.340
we'd still like to do a round of tests
 

00:19:26.340 --> 00:19:28.769
we'd still like to do a round of tests
however we've seen that the app bundle

00:19:28.769 --> 00:19:28.779
however we've seen that the app bundle
 

00:19:28.779 --> 00:19:31.740
however we've seen that the app bundle
on its own is not installable so how do

00:19:31.740 --> 00:19:31.750
on its own is not installable so how do
 

00:19:31.750 --> 00:19:35.310
on its own is not installable so how do
you test it first we note that during

00:19:35.310 --> 00:19:35.320
you test it first we note that during
 

00:19:35.320 --> 00:19:38.610
you test it first we note that during
development you can install apk is built

00:19:38.610 --> 00:19:38.620
development you can install apk is built
 

00:19:38.620 --> 00:19:40.320
development you can install apk is built
from the app bundle directly from

00:19:40.320 --> 00:19:40.330
from the app bundle directly from
 

00:19:40.330 --> 00:19:42.360
from the app bundle directly from
Android studio so you don't need to do

00:19:42.360 --> 00:19:42.370
Android studio so you don't need to do
 

00:19:42.370 --> 00:19:45.930
Android studio so you don't need to do
anything here however for QA teams we

00:19:45.930 --> 00:19:45.940
anything here however for QA teams we
 

00:19:45.940 --> 00:19:47.190
anything here however for QA teams we
know that they don't always have access

00:19:47.190 --> 00:19:47.200
know that they don't always have access
 

00:19:47.200 --> 00:19:49.500
know that they don't always have access
to the source code in Android studio

00:19:49.500 --> 00:19:49.510
to the source code in Android studio
 

00:19:49.510 --> 00:19:51.450
to the source code in Android studio
so let me talk you through the story of

00:19:51.450 --> 00:19:51.460
so let me talk you through the story of
 

00:19:51.460 --> 00:19:53.909
so let me talk you through the story of
three developers Alice Bob and Claire

00:19:53.909 --> 00:19:53.919
three developers Alice Bob and Claire
 

00:19:53.919 --> 00:19:56.070
three developers Alice Bob and Claire
and how they choose to test their app

00:19:56.070 --> 00:19:56.080
and how they choose to test their app
 

00:19:56.080 --> 00:20:00.480
and how they choose to test their app
bundle with a QA teams so let's start

00:20:00.480 --> 00:20:00.490
bundle with a QA teams so let's start
 

00:20:00.490 --> 00:20:03.210
bundle with a QA teams so let's start
with Alice Alice uses the newly released

00:20:03.210 --> 00:20:03.220
with Alice Alice uses the newly released
 

00:20:03.220 --> 00:20:05.370
with Alice Alice uses the newly released
internal test track from the Play

00:20:05.370 --> 00:20:05.380
internal test track from the Play
 

00:20:05.380 --> 00:20:09.510
internal test track from the Play
console the internal track is similar to

00:20:09.510 --> 00:20:09.520
console the internal track is similar to
 

00:20:09.520 --> 00:20:11.159
console the internal track is similar to
alpha and beta tracks that you may

00:20:11.159 --> 00:20:11.169
alpha and beta tracks that you may
 

00:20:11.169 --> 00:20:13.409
alpha and beta tracks that you may
already be familiar with but it differs

00:20:13.409 --> 00:20:13.419
already be familiar with but it differs
 

00:20:13.419 --> 00:20:15.750
already be familiar with but it differs
in that there is almost no delay between

00:20:15.750 --> 00:20:15.760
in that there is almost no delay between
 

00:20:15.760 --> 00:20:18.180
in that there is almost no delay between
the upload of the bundle and the bundle

00:20:18.180 --> 00:20:18.190
the upload of the bundle and the bundle
 

00:20:18.190 --> 00:20:20.130
the upload of the bundle and the bundle
are the update being available on the

00:20:20.130 --> 00:20:20.140
are the update being available on the
 

00:20:20.140 --> 00:20:22.950
are the update being available on the
testers devices really quick turnarounds

00:20:22.950 --> 00:20:22.960
testers devices really quick turnarounds
 

00:20:22.960 --> 00:20:26.399
testers devices really quick turnarounds
for your QA testing going through the

00:20:26.399 --> 00:20:26.409
for your QA testing going through the
 

00:20:26.409 --> 00:20:28.470
for your QA testing going through the
Play console Alice has the confidence

00:20:28.470 --> 00:20:28.480
Play console Alice has the confidence
 

00:20:28.480 --> 00:20:30.299
Play console Alice has the confidence
that what the QA team will receive on

00:20:30.299 --> 00:20:30.309
that what the QA team will receive on
 

00:20:30.309 --> 00:20:32.970
that what the QA team will receive on
their device is byte for byte equal with

00:20:32.970 --> 00:20:32.980
their device is byte for byte equal with
 

00:20:32.980 --> 00:20:34.799
their device is byte for byte equal with
what end-users will get when you push

00:20:34.799 --> 00:20:34.809
what end-users will get when you push
 

00:20:34.809 --> 00:20:38.760
what end-users will get when you push
your release to production and let's see

00:20:38.760 --> 00:20:38.770
your release to production and let's see
 

00:20:38.770 --> 00:20:41.340
your release to production and let's see
how Alice sets this up really simple so

00:20:41.340 --> 00:20:41.350
how Alice sets this up really simple so
 

00:20:41.350 --> 00:20:43.080
how Alice sets this up really simple so
Alice creates a list of emails of up to

00:20:43.080 --> 00:20:43.090
Alice creates a list of emails of up to
 

00:20:43.090 --> 00:20:45.840
Alice creates a list of emails of up to
100 QA testers that are eligible for the

00:20:45.840 --> 00:20:45.850
100 QA testers that are eligible for the
 

00:20:45.850 --> 00:20:48.210
100 QA testers that are eligible for the
tip internal test track the QA testers

00:20:48.210 --> 00:20:48.220
tip internal test track the QA testers
 

00:20:48.220 --> 00:20:50.279
tip internal test track the QA testers
follow the opt-in link and then now

00:20:50.279 --> 00:20:50.289
follow the opt-in link and then now
 

00:20:50.289 --> 00:20:52.889
follow the opt-in link and then now
receive the bundles that are uploaded so

00:20:52.889 --> 00:20:52.899
receive the bundles that are uploaded so
 

00:20:52.899 --> 00:20:54.450
receive the bundles that are uploaded so
they curate lead to the internal test

00:20:54.450 --> 00:20:54.460
they curate lead to the internal test
 

00:20:54.460 --> 00:20:58.620
they curate lead to the internal test
track that's it but we know that not all

00:20:58.620 --> 00:20:58.630
track that's it but we know that not all
 

00:20:58.630 --> 00:21:00.389
track that's it but we know that not all
of you have access to the Play console

00:21:00.389 --> 00:21:00.399
of you have access to the Play console
 

00:21:00.399 --> 00:21:02.820
of you have access to the Play console
during your QA cycles so let's hear from

00:21:02.820 --> 00:21:02.830
during your QA cycles so let's hear from
 

00:21:02.830 --> 00:21:07.649
during your QA cycles so let's hear from
Pierre about Bob's story indeed Bob

00:21:07.649 --> 00:21:07.659
Pierre about Bob's story indeed Bob
 

00:21:07.659 --> 00:21:09.240
Pierre about Bob's story indeed Bob
doesn't have access to the Play console

00:21:09.240 --> 00:21:09.250
doesn't have access to the Play console
 

00:21:09.250 --> 00:21:11.700
doesn't have access to the Play console
he prefers also to test things locally

00:21:11.700 --> 00:21:11.710
he prefers also to test things locally
 

00:21:11.710 --> 00:21:14.330
he prefers also to test things locally
on his machine before loading anything

00:21:14.330 --> 00:21:14.340
on his machine before loading anything
 

00:21:14.340 --> 00:21:16.620
on his machine before loading anything
but he still wants to test what the

00:21:16.620 --> 00:21:16.630
but he still wants to test what the
 

00:21:16.630 --> 00:21:18.769
but he still wants to test what the
users will get so how does he do that

00:21:18.769 --> 00:21:18.779
users will get so how does he do that
 

00:21:18.779 --> 00:21:21.870
users will get so how does he do that
well to generate apks from the bundle

00:21:21.870 --> 00:21:21.880
well to generate apks from the bundle
 

00:21:21.880 --> 00:21:24.480
well to generate apks from the bundle
Play users a new tool called bundle tool

00:21:24.480 --> 00:21:24.490
Play users a new tool called bundle tool
 

00:21:24.490 --> 00:21:27.060
Play users a new tool called bundle tool
so for Bob to repute to reproduce

00:21:27.060 --> 00:21:27.070
so for Bob to repute to reproduce
 

00:21:27.070 --> 00:21:28.420
so for Bob to repute to reproduce
locally the builds

00:21:28.420 --> 00:21:28.430
locally the builds
 

00:21:28.430 --> 00:21:30.760
locally the builds
we can simply download bundle toll and

00:21:30.760 --> 00:21:30.770
we can simply download bundle toll and
 

00:21:30.770 --> 00:21:34.720
we can simply download bundle toll and
write a few simple comments but not all

00:21:34.720 --> 00:21:34.730
write a few simple comments but not all
 

00:21:34.730 --> 00:21:36.910
write a few simple comments but not all
has a comment called build the apk which

00:21:36.910 --> 00:21:36.920
has a comment called build the apk which
 

00:21:36.920 --> 00:21:39.310
has a comment called build the apk which
takes an Android app bundle and creates

00:21:39.310 --> 00:21:39.320
takes an Android app bundle and creates
 

00:21:39.320 --> 00:21:42.340
takes an Android app bundle and creates
what we call an apk set archive this apk

00:21:42.340 --> 00:21:42.350
what we call an apk set archive this apk
 

00:21:42.350 --> 00:21:45.040
what we call an apk set archive this apk
set contains a collection of apks ready

00:21:45.040 --> 00:21:45.050
set contains a collection of apks ready
 

00:21:45.050 --> 00:21:47.890
set contains a collection of apks ready
to be installed on devices another

00:21:47.890 --> 00:21:47.900
to be installed on devices another
 

00:21:47.900 --> 00:21:48.490
to be installed on devices another
comment

00:21:48.490 --> 00:21:48.500
comment
 

00:21:48.500 --> 00:21:51.340
comment
called install apks text that apk set

00:21:51.340 --> 00:21:51.350
called install apks text that apk set
 

00:21:51.350 --> 00:21:54.250
called install apks text that apk set
archive extracts the apks and install

00:21:54.250 --> 00:21:54.260
archive extracts the apks and install
 

00:21:54.260 --> 00:21:57.160
archive extracts the apks and install
them on that device let's see some real

00:21:57.160 --> 00:21:57.170
them on that device let's see some real
 

00:21:57.170 --> 00:22:01.419
them on that device let's see some real
command-line work so here's the comment

00:22:01.419 --> 00:22:01.429
command-line work so here's the comment
 

00:22:01.429 --> 00:22:03.790
command-line work so here's the comment
written by Bob calling build apks

00:22:03.790 --> 00:22:03.800
written by Bob calling build apks
 

00:22:03.800 --> 00:22:06.370
written by Bob calling build apks
passing the app bundle and same way he

00:22:06.370 --> 00:22:06.380
passing the app bundle and same way he
 

00:22:06.380 --> 00:22:08.470
passing the app bundle and same way he
wants to wear once the APK said to be

00:22:08.470 --> 00:22:08.480
wants to wear once the APK said to be
 

00:22:08.480 --> 00:22:10.960
wants to wear once the APK said to be
created and by passing the flight

00:22:10.960 --> 00:22:10.970
created and by passing the flight
 

00:22:10.970 --> 00:22:13.000
created and by passing the flight
connected device burn until we build

00:22:13.000 --> 00:22:13.010
connected device burn until we build
 

00:22:13.010 --> 00:22:15.130
connected device burn until we build
apks just for the device currently

00:22:15.130 --> 00:22:15.140
apks just for the device currently
 

00:22:15.140 --> 00:22:19.240
apks just for the device currently
connected to his machine and if bubbles

00:22:19.240 --> 00:22:19.250
connected to his machine and if bubbles
 

00:22:19.250 --> 00:22:21.460
connected to his machine and if bubbles
generate a DK say for someone else in

00:22:21.460 --> 00:22:21.470
generate a DK say for someone else in
 

00:22:21.470 --> 00:22:24.010
generate a DK say for someone else in
his team but without having the physical

00:22:24.010 --> 00:22:24.020
his team but without having the physical
 

00:22:24.020 --> 00:22:26.350
his team but without having the physical
device at hand it can still provide a

00:22:26.350 --> 00:22:26.360
device at hand it can still provide a
 

00:22:26.360 --> 00:22:28.540
device at hand it can still provide a
file that contains the specifications of

00:22:28.540 --> 00:22:28.550
file that contains the specifications of
 

00:22:28.550 --> 00:22:31.120
file that contains the specifications of
the device in a JSON format and you can

00:22:31.120 --> 00:22:31.130
the device in a JSON format and you can
 

00:22:31.130 --> 00:22:33.850
the device in a JSON format and you can
see here an extract of such file which

00:22:33.850 --> 00:22:33.860
see here an extract of such file which
 

00:22:33.860 --> 00:22:35.680
see here an extract of such file which
provides the information about the api's

00:22:35.680 --> 00:22:35.690
provides the information about the api's
 

00:22:35.690 --> 00:22:38.250
provides the information about the api's
this device supports supported languages

00:22:38.250 --> 00:22:38.260
this device supports supported languages
 

00:22:38.260 --> 00:22:43.140
this device supports supported languages
the screen density and the SDK version

00:22:43.140 --> 00:22:43.150
the screen density and the SDK version
 

00:22:43.150 --> 00:22:45.640
the screen density and the SDK version
volatile has also a comment to generate

00:22:45.640 --> 00:22:45.650
volatile has also a comment to generate
 

00:22:45.650 --> 00:22:48.220
volatile has also a comment to generate
such device spec file so you don't have

00:22:48.220 --> 00:22:48.230
such device spec file so you don't have
 

00:22:48.230 --> 00:22:52.330
such device spec file so you don't have
to find the device back online or you

00:22:52.330 --> 00:22:52.340
to find the device back online or you
 

00:22:52.340 --> 00:22:54.010
to find the device back online or you
don't have to write it yourself you just

00:22:54.010 --> 00:22:54.020
don't have to write it yourself you just
 

00:22:54.020 --> 00:22:55.720
don't have to write it yourself you just
run this command and will generate this

00:22:55.720 --> 00:22:55.730
run this command and will generate this
 

00:22:55.730 --> 00:22:59.890
run this command and will generate this
file for you also because Bob wants to

00:22:59.890 --> 00:22:59.900
file for you also because Bob wants to
 

00:22:59.900 --> 00:23:02.049
file for you also because Bob wants to
install these apks on a device they DK's

00:23:02.049 --> 00:23:02.059
install these apks on a device they DK's
 

00:23:02.059 --> 00:23:04.000
install these apks on a device they DK's
need to be signed with a private key so

00:23:04.000 --> 00:23:04.010
need to be signed with a private key so
 

00:23:04.010 --> 00:23:06.820
need to be signed with a private key so
he passes the pass to the key store all

00:23:06.820 --> 00:23:06.830
he passes the pass to the key store all
 

00:23:06.830 --> 00:23:09.460
he passes the pass to the key store all
the apk is contained in the apk set will

00:23:09.460 --> 00:23:09.470
the apk is contained in the apk set will
 

00:23:09.470 --> 00:23:11.350
the apk is contained in the apk set will
then be signed and directly installable

00:23:11.350 --> 00:23:11.360
then be signed and directly installable
 

00:23:11.360 --> 00:23:15.250
then be signed and directly installable
on Bob's device and here's the

00:23:15.250 --> 00:23:15.260
on Bob's device and here's the
 

00:23:15.260 --> 00:23:17.169
on Bob's device and here's the
invocation of the install apks comment

00:23:17.169 --> 00:23:17.179
invocation of the install apks comment
 

00:23:17.179 --> 00:23:19.330
invocation of the install apks comment
which extracts the apks from the efika

00:23:19.330 --> 00:23:19.340
which extracts the apks from the efika
 

00:23:19.340 --> 00:23:21.460
which extracts the apks from the efika
set and install them directly on the

00:23:21.460 --> 00:23:21.470
set and install them directly on the
 

00:23:21.470 --> 00:23:24.600
set and install them directly on the
connected device easy

00:23:24.600 --> 00:23:24.610
connected device easy
 

00:23:24.610 --> 00:23:27.490
connected device easy
so that was Bob and his local testing

00:23:27.490 --> 00:23:27.500
so that was Bob and his local testing
 

00:23:27.500 --> 00:23:33.050
so that was Bob and his local testing
now ebo will tell you Claire's a story

00:23:33.050 --> 00:23:33.060
 
 

00:23:33.060 --> 00:23:35.460
 
Claire is working for a medium-sized

00:23:35.460 --> 00:23:35.470
Claire is working for a medium-sized
 

00:23:35.470 --> 00:23:37.980
Claire is working for a medium-sized
company and they set up a continuous

00:23:37.980 --> 00:23:37.990
company and they set up a continuous
 

00:23:37.990 --> 00:23:39.660
company and they set up a continuous
integration tool to build their

00:23:39.660 --> 00:23:39.670
integration tool to build their
 

00:23:39.670 --> 00:23:43.620
integration tool to build their
application everyday they create him for

00:23:43.620 --> 00:23:43.630
application everyday they create him for
 

00:23:43.630 --> 00:23:45.180
application everyday they create him for
the nightly build of the application

00:23:45.180 --> 00:23:45.190
the nightly build of the application
 

00:23:45.190 --> 00:23:48.300
the nightly build of the application
installs in multiple devices and test if

00:23:48.300 --> 00:23:48.310
installs in multiple devices and test if
 

00:23:48.310 --> 00:23:52.200
installs in multiple devices and test if
the application is working correctly now

00:23:52.200 --> 00:23:52.210
the application is working correctly now
 

00:23:52.210 --> 00:23:54.270
the application is working correctly now
Claire wants Claire wants to help to

00:23:54.270 --> 00:23:54.280
Claire wants Claire wants to help to
 

00:23:54.280 --> 00:23:56.550
Claire wants Claire wants to help to
create him and she uses the bundle tool

00:23:56.550 --> 00:23:56.560
create him and she uses the bundle tool
 

00:23:56.560 --> 00:24:00.590
create him and she uses the bundle tool
again to generate the apk set in the CI

00:24:00.590 --> 00:24:00.600
again to generate the apk set in the CI
 

00:24:00.600 --> 00:24:03.540
again to generate the apk set in the CI
she uses a command that's very similar

00:24:03.540 --> 00:24:03.550
she uses a command that's very similar
 

00:24:03.550 --> 00:24:06.480
she uses a command that's very similar
to what Bob used earlier but this time

00:24:06.480 --> 00:24:06.490
to what Bob used earlier but this time
 

00:24:06.490 --> 00:24:09.360
to what Bob used earlier but this time
she omits the device bag flag and she

00:24:09.360 --> 00:24:09.370
she omits the device bag flag and she
 

00:24:09.370 --> 00:24:12.150
she omits the device bag flag and she
generates an apk set which contains

00:24:12.150 --> 00:24:12.160
generates an apk set which contains
 

00:24:12.160 --> 00:24:18.120
generates an apk set which contains
apks for all possible devices now the QA

00:24:18.120 --> 00:24:18.130
apks for all possible devices now the QA
 

00:24:18.130 --> 00:24:21.180
apks for all possible devices now the QA
team will just grab the apk set from the

00:24:21.180 --> 00:24:21.190
team will just grab the apk set from the
 

00:24:21.190 --> 00:24:23.400
team will just grab the apk set from the
CI they're going to connect the device

00:24:23.400 --> 00:24:23.410
CI they're going to connect the device
 

00:24:23.410 --> 00:24:26.780
CI they're going to connect the device
and run the install the apk is comment

00:24:26.780 --> 00:24:26.790
and run the install the apk is comment
 

00:24:26.790 --> 00:24:29.730
and run the install the apk is comment
bundle tool now we'll read the device

00:24:29.730 --> 00:24:29.740
bundle tool now we'll read the device
 

00:24:29.740 --> 00:24:31.730
bundle tool now we'll read the device
configuration from the attached device

00:24:31.730 --> 00:24:31.740
configuration from the attached device
 

00:24:31.740 --> 00:24:34.560
configuration from the attached device
will extract the AP case that matches

00:24:34.560 --> 00:24:34.570
will extract the AP case that matches
 

00:24:34.570 --> 00:24:36.840
will extract the AP case that matches
this configuration from the apk set and

00:24:36.840 --> 00:24:36.850
this configuration from the apk set and
 

00:24:36.850 --> 00:24:40.320
this configuration from the apk set and
then install them onto the device this

00:24:40.320 --> 00:24:40.330
then install them onto the device this
 

00:24:40.330 --> 00:24:42.840
then install them onto the device this
is the same selection that played us and

00:24:42.840 --> 00:24:42.850
is the same selection that played us and
 

00:24:42.850 --> 00:24:47.810
is the same selection that played us and
serving AP case for a given given device

00:24:47.810 --> 00:24:47.820
serving AP case for a given given device
 

00:24:47.820 --> 00:24:50.640
serving AP case for a given given device
one more thing that bundle tool can do

00:24:50.640 --> 00:24:50.650
one more thing that bundle tool can do
 

00:24:50.650 --> 00:24:52.950
one more thing that bundle tool can do
is to generate the universal apk

00:24:52.950 --> 00:24:52.960
is to generate the universal apk
 

00:24:52.960 --> 00:24:56.670
is to generate the universal apk
bypassing the universal flag Bureau's

00:24:56.670 --> 00:24:56.680
bypassing the universal flag Bureau's
 

00:24:56.680 --> 00:25:00.540
bypassing the universal flag Bureau's
whole apk is a single apk that contains

00:25:00.540 --> 00:25:00.550
whole apk is a single apk that contains
 

00:25:00.550 --> 00:25:03.210
whole apk is a single apk that contains
the file all the files or that manages

00:25:03.210 --> 00:25:03.220
the file all the files or that manages
 

00:25:03.220 --> 00:25:06.600
the file all the files or that manages
all the devices because of that it can

00:25:06.600 --> 00:25:06.610
all the devices because of that it can
 

00:25:06.610 --> 00:25:09.480
all the devices because of that it can
be installed in any device well it

00:25:09.480 --> 00:25:09.490
be installed in any device well it
 

00:25:09.490 --> 00:25:12.930
be installed in any device well it
really doesn't represent what your what

00:25:12.930 --> 00:25:12.940
really doesn't represent what your what
 

00:25:12.940 --> 00:25:15.210
really doesn't represent what your what
your users will receive when they

00:25:15.210 --> 00:25:15.220
your users will receive when they
 

00:25:15.220 --> 00:25:17.690
your users will receive when they
install your applications from Playstore

00:25:17.690 --> 00:25:17.700
install your applications from Playstore
 

00:25:17.700 --> 00:25:21.060
install your applications from Playstore
however this is a convenient way to pass

00:25:21.060 --> 00:25:21.070
however this is a convenient way to pass
 

00:25:21.070 --> 00:25:23.730
however this is a convenient way to pass
an apk to a user when you don't know

00:25:23.730 --> 00:25:23.740
an apk to a user when you don't know
 

00:25:23.740 --> 00:25:28.020
an apk to a user when you don't know
what device they are running one low

00:25:28.020 --> 00:25:28.030
what device they are running one low
 

00:25:28.030 --> 00:25:30.690
what device they are running one low
tool is also the tool used to build an

00:25:30.690 --> 00:25:30.700
tool is also the tool used to build an
 

00:25:30.700 --> 00:25:33.960
tool is also the tool used to build an
Android app bundle and gretel uses it

00:25:33.960 --> 00:25:33.970
Android app bundle and gretel uses it
 

00:25:33.970 --> 00:25:37.170
Android app bundle and gretel uses it
behind the scenes we're going to work

00:25:37.170 --> 00:25:37.180
behind the scenes we're going to work
 

00:25:37.180 --> 00:25:39.660
behind the scenes we're going to work
with the other build chains to change to

00:25:39.660 --> 00:25:39.670
with the other build chains to change to
 

00:25:39.670 --> 00:25:42.150
with the other build chains to change to
integrate build tool so that you can

00:25:42.150 --> 00:25:42.160
integrate build tool so that you can
 

00:25:42.160 --> 00:25:44.670
integrate build tool so that you can
build an Android app bundle regardless

00:25:44.670 --> 00:25:44.680
build an Android app bundle regardless
 

00:25:44.680 --> 00:25:45.350
build an Android app bundle regardless
of any

00:25:45.350 --> 00:25:45.360
of any
 

00:25:45.360 --> 00:25:49.730
of any
Chane you may be using and finally we

00:25:49.730 --> 00:25:49.740
Chane you may be using and finally we
 

00:25:49.740 --> 00:25:51.500
Chane you may be using and finally we
want to be transparent about how we

00:25:51.500 --> 00:25:51.510
want to be transparent about how we
 

00:25:51.510 --> 00:25:53.690
want to be transparent about how we
generate the apks we deliver to your

00:25:53.690 --> 00:25:53.700
generate the apks we deliver to your
 

00:25:53.700 --> 00:25:56.840
generate the apks we deliver to your
users which is why we are open sourcing

00:25:56.840 --> 00:25:56.850
users which is why we are open sourcing
 

00:25:56.850 --> 00:25:59.720
users which is why we are open sourcing
bundle tools we can go today to

00:25:59.720 --> 00:25:59.730
bundle tools we can go today to
 

00:25:59.730 --> 00:26:02.690
bundle tools we can go today to
github.com slash Google slash bundle

00:26:02.690 --> 00:26:02.700
github.com slash Google slash bundle
 

00:26:02.700 --> 00:26:05.720
github.com slash Google slash bundle
tool to download an executable or build

00:26:05.720 --> 00:26:05.730
tool to download an executable or build
 

00:26:05.730 --> 00:26:09.289
tool to download an executable or build
it from the source now Pierre is going

00:26:09.289 --> 00:26:09.299
it from the source now Pierre is going
 

00:26:09.299 --> 00:26:12.110
it from the source now Pierre is going
to talk about another way to make your

00:26:12.110 --> 00:26:12.120
to talk about another way to make your
 

00:26:12.120 --> 00:26:17.150
to talk about another way to make your
applications even smaller XE both with

00:26:17.150 --> 00:26:17.160
applications even smaller XE both with
 

00:26:17.160 --> 00:26:19.100
applications even smaller XE both with
Google Play dynamic delivery we're also

00:26:19.100 --> 00:26:19.110
Google Play dynamic delivery we're also
 

00:26:19.110 --> 00:26:21.169
Google Play dynamic delivery we're also
introducing a new way to break up your

00:26:21.169 --> 00:26:21.179
introducing a new way to break up your
 

00:26:21.179 --> 00:26:23.450
introducing a new way to break up your
app into separate features and then ever

00:26:23.450 --> 00:26:23.460
app into separate features and then ever
 

00:26:23.460 --> 00:26:26.980
app into separate features and then ever
only those that are needed for each user

00:26:26.980 --> 00:26:26.990
only those that are needed for each user
 

00:26:26.990 --> 00:26:29.930
only those that are needed for each user
suppose you have a recipe app and you

00:26:29.930 --> 00:26:29.940
suppose you have a recipe app and you
 

00:26:29.940 --> 00:26:31.870
suppose you have a recipe app and you
want to keep the initial download small

00:26:31.870 --> 00:26:31.880
want to keep the initial download small
 

00:26:31.880 --> 00:26:34.940
want to keep the initial download small
you observe that while all your users

00:26:34.940 --> 00:26:34.950
you observe that while all your users
 

00:26:34.950 --> 00:26:38.150
you observe that while all your users
like to browse or recipes only a small

00:26:38.150 --> 00:26:38.160
like to browse or recipes only a small
 

00:26:38.160 --> 00:26:40.310
like to browse or recipes only a small
fraction choose to actually add a new

00:26:40.310 --> 00:26:40.320
fraction choose to actually add a new
 

00:26:40.320 --> 00:26:42.440
fraction choose to actually add a new
recipe and you notice that this

00:26:42.440 --> 00:26:42.450
recipe and you notice that this
 

00:26:42.450 --> 00:26:45.140
recipe and you notice that this
functionality Texas takes up significant

00:26:45.140 --> 00:26:45.150
functionality Texas takes up significant
 

00:26:45.150 --> 00:26:47.750
functionality Texas takes up significant
space in your app what you can do is

00:26:47.750 --> 00:26:47.760
space in your app what you can do is
 

00:26:47.760 --> 00:26:49.730
space in your app what you can do is
break that feature out into its own

00:26:49.730 --> 00:26:49.740
break that feature out into its own
 

00:26:49.740 --> 00:26:53.659
break that feature out into its own
module and serve it only when needed we

00:26:53.659 --> 00:26:53.669
module and serve it only when needed we
 

00:26:53.669 --> 00:26:56.720
module and serve it only when needed we
can see how it looks for user here let's

00:26:56.720 --> 00:26:56.730
can see how it looks for user here let's
 

00:26:56.730 --> 00:27:00.890
can see how it looks for user here let's
open the app so when the user wants to

00:27:00.890 --> 00:27:00.900
open the app so when the user wants to
 

00:27:00.900 --> 00:27:02.750
open the app so when the user wants to
add a recipe clicks a little plus at the

00:27:02.750 --> 00:27:02.760
add a recipe clicks a little plus at the
 

00:27:02.760 --> 00:27:05.419
add a recipe clicks a little plus at the
bottom and you can see that in the

00:27:05.419 --> 00:27:05.429
bottom and you can see that in the
 

00:27:05.429 --> 00:27:08.840
bottom and you can see that in the
background the module is downloaded and

00:27:08.840 --> 00:27:08.850
background the module is downloaded and
 

00:27:08.850 --> 00:27:11.720
background the module is downloaded and
installed and just after a few seconds

00:27:11.720 --> 00:27:11.730
installed and just after a few seconds
 

00:27:11.730 --> 00:27:18.409
installed and just after a few seconds
the module is ready to be used so which

00:27:18.409 --> 00:27:18.419
the module is ready to be used so which
 

00:27:18.419 --> 00:27:20.000
the module is ready to be used so which
parts of your app should you break out

00:27:20.000 --> 00:27:20.010
parts of your app should you break out
 

00:27:20.010 --> 00:27:22.940
parts of your app should you break out
as separate features if only a small

00:27:22.940 --> 00:27:22.950
as separate features if only a small
 

00:27:22.950 --> 00:27:24.680
as separate features if only a small
fraction of your users use that feature

00:27:24.680 --> 00:27:24.690
fraction of your users use that feature
 

00:27:24.690 --> 00:27:26.650
fraction of your users use that feature
that could be a good candidate

00:27:26.650 --> 00:27:26.660
that could be a good candidate
 

00:27:26.660 --> 00:27:28.820
that could be a good candidate
especially if that feature takes up

00:27:28.820 --> 00:27:28.830
especially if that feature takes up
 

00:27:28.830 --> 00:27:31.330
especially if that feature takes up
significant space in your app finally

00:27:31.330 --> 00:27:31.340
significant space in your app finally
 

00:27:31.340 --> 00:27:33.830
significant space in your app finally
consider if your users can wait a few

00:27:33.830 --> 00:27:33.840
consider if your users can wait a few
 

00:27:33.840 --> 00:27:38.830
consider if your users can wait a few
seconds before using the feature

00:27:38.830 --> 00:27:38.840
 
 

00:27:38.840 --> 00:27:40.900
 
once you've decided which feature to

00:27:40.900 --> 00:27:40.910
once you've decided which feature to
 

00:27:40.910 --> 00:27:42.610
once you've decided which feature to
create this is how it should look like

00:27:42.610 --> 00:27:42.620
create this is how it should look like
 

00:27:42.620 --> 00:27:45.010
create this is how it should look like
in the app bundle in addition to the

00:27:45.010 --> 00:27:45.020
in the app bundle in addition to the
 

00:27:45.020 --> 00:27:46.720
in the app bundle in addition to the
base directory they are now also

00:27:46.720 --> 00:27:46.730
base directory they are now also
 

00:27:46.730 --> 00:27:48.280
base directory they are now also
separate directories for each of the

00:27:48.280 --> 00:27:48.290
separate directories for each of the
 

00:27:48.290 --> 00:27:50.710
separate directories for each of the
modules of the app the format of these

00:27:50.710 --> 00:27:50.720
modules of the app the format of these
 

00:27:50.720 --> 00:27:53.050
modules of the app the format of these
directories is exactly the same as the

00:27:53.050 --> 00:27:53.060
directories is exactly the same as the
 

00:27:53.060 --> 00:27:54.670
directories is exactly the same as the
format of the base that I mean that I

00:27:54.670 --> 00:27:54.680
format of the base that I mean that I
 

00:27:54.680 --> 00:27:58.870
format of the base that I mean that I
covered earlier and this is the AP case

00:27:58.870 --> 00:27:58.880
covered earlier and this is the AP case
 

00:27:58.880 --> 00:28:01.210
covered earlier and this is the AP case
that play would generate from it for

00:28:01.210 --> 00:28:01.220
that play would generate from it for
 

00:28:01.220 --> 00:28:03.190
that play would generate from it for
each module we will produce a set of

00:28:03.190 --> 00:28:03.200
each module we will produce a set of
 

00:28:03.200 --> 00:28:05.440
each module we will produce a set of
splits consisting of a feature split and

00:28:05.440 --> 00:28:05.450
splits consisting of a feature split and
 

00:28:05.450 --> 00:28:11.500
splits consisting of a feature split and
config splits for that module Anthony

00:28:11.500 --> 00:28:11.510
config splits for that module Anthony
 

00:28:11.510 --> 00:28:13.660
config splits for that module Anthony
mentioned earlier that speed apks were

00:28:13.660 --> 00:28:13.670
mentioned earlier that speed apks were
 

00:28:13.670 --> 00:28:16.450
mentioned earlier that speed apks were
only introduced with Android lollipop to

00:28:16.450 --> 00:28:16.460
only introduced with Android lollipop to
 

00:28:16.460 --> 00:28:18.760
only introduced with Android lollipop to
support free L devices we can mark

00:28:18.760 --> 00:28:18.770
support free L devices we can mark
 

00:28:18.770 --> 00:28:21.220
support free L devices we can mark
modules to be fused and Bonato will

00:28:21.220 --> 00:28:21.230
modules to be fused and Bonato will
 

00:28:21.230 --> 00:28:23.680
modules to be fused and Bonato will
generate a single ADK with a specified

00:28:23.680 --> 00:28:23.690
generate a single ADK with a specified
 

00:28:23.690 --> 00:28:30.610
generate a single ADK with a specified
module merged together now that we have

00:28:30.610 --> 00:28:30.620
module merged together now that we have
 

00:28:30.620 --> 00:28:32.890
module merged together now that we have
covered how dynamic features work let me

00:28:32.890 --> 00:28:32.900
covered how dynamic features work let me
 

00:28:32.900 --> 00:28:34.720
covered how dynamic features work let me
hand it over to e Bo I will show you how

00:28:34.720 --> 00:28:34.730
hand it over to e Bo I will show you how
 

00:28:34.730 --> 00:28:39.090
hand it over to e Bo I will show you how
to create them thanks Pierre

00:28:39.090 --> 00:28:39.100
to create them thanks Pierre
 

00:28:39.100 --> 00:28:42.220
to create them thanks Pierre
to create a dynamic module all you need

00:28:42.220 --> 00:28:42.230
to create a dynamic module all you need
 

00:28:42.230 --> 00:28:45.100
to create a dynamic module all you need
to do is download Android studio 3.2

00:28:45.100 --> 00:28:45.110
to do is download Android studio 3.2
 

00:28:45.110 --> 00:28:47.620
to do is download Android studio 3.2
canary and use the dynamic feature

00:28:47.620 --> 00:28:47.630
canary and use the dynamic feature
 

00:28:47.630 --> 00:28:51.010
canary and use the dynamic feature
wizard included click on the new new

00:28:51.010 --> 00:28:51.020
wizard included click on the new new
 

00:28:51.020 --> 00:28:53.440
wizard included click on the new new
module in file menu choose a dynamic

00:28:53.440 --> 00:28:53.450
module in file menu choose a dynamic
 

00:28:53.450 --> 00:28:55.900
module in file menu choose a dynamic
module also typing in your modules name

00:28:55.900 --> 00:28:55.910
module also typing in your modules name
 

00:28:55.910 --> 00:28:58.390
module also typing in your modules name
Android studio is going to create a new

00:28:58.390 --> 00:28:58.400
Android studio is going to create a new
 

00:28:58.400 --> 00:29:02.020
Android studio is going to create a new
dynamic module for you we can also do

00:29:02.020 --> 00:29:02.030
dynamic module for you we can also do
 

00:29:02.030 --> 00:29:04.930
dynamic module for you we can also do
the same thing manually by editing the

00:29:04.930 --> 00:29:04.940
the same thing manually by editing the
 

00:29:04.940 --> 00:29:06.670
the same thing manually by editing the
manifest and built up Gradle files

00:29:06.670 --> 00:29:06.680
manifest and built up Gradle files
 

00:29:06.680 --> 00:29:08.500
manifest and built up Gradle files
you're going to start with the manifest

00:29:08.500 --> 00:29:08.510
you're going to start with the manifest
 

00:29:08.510 --> 00:29:11.950
you're going to start with the manifest
of your new module the first step is to

00:29:11.950 --> 00:29:11.960
of your new module the first step is to
 

00:29:11.960 --> 00:29:14.800
of your new module the first step is to
declare this module is a new split apk

00:29:14.800 --> 00:29:14.810
declare this module is a new split apk
 

00:29:14.810 --> 00:29:18.370
declare this module is a new split apk
of your of your app to do so you're

00:29:18.370 --> 00:29:18.380
of your of your app to do so you're
 

00:29:18.380 --> 00:29:20.410
of your of your app to do so you're
going to add the split attribute in the

00:29:20.410 --> 00:29:20.420
going to add the split attribute in the
 

00:29:20.420 --> 00:29:24.490
going to add the split attribute in the
manifest tag and give a name which is VR

00:29:24.490 --> 00:29:24.500
manifest tag and give a name which is VR
 

00:29:24.500 --> 00:29:27.040
manifest tag and give a name which is VR
underscore we are underscore viewer in

00:29:27.040 --> 00:29:27.050
underscore we are underscore viewer in
 

00:29:27.050 --> 00:29:31.510
underscore we are underscore viewer in
this example the next step is to add a

00:29:31.510 --> 00:29:31.520
this example the next step is to add a
 

00:29:31.520 --> 00:29:34.270
this example the next step is to add a
module tag which is which is going to

00:29:34.270 --> 00:29:34.280
module tag which is which is going to
 

00:29:34.280 --> 00:29:36.910
module tag which is which is going to
declare a module and give your gonna

00:29:36.910 --> 00:29:36.920
declare a module and give your gonna
 

00:29:36.920 --> 00:29:39.940
declare a module and give your gonna
give a title to the module this tag is

00:29:39.940 --> 00:29:39.950
give a title to the module this tag is
 

00:29:39.950 --> 00:29:42.910
give a title to the module this tag is
used by Plextor to identify the modules

00:29:42.910 --> 00:29:42.920
used by Plextor to identify the modules
 

00:29:42.920 --> 00:29:47.830
used by Plextor to identify the modules
of your application next you declare

00:29:47.830 --> 00:29:47.840
of your application next you declare
 

00:29:47.840 --> 00:29:50.450
of your application next you declare
this module is an on-demand module by

00:29:50.450 --> 00:29:50.460
this module is an on-demand module by
 

00:29:50.460 --> 00:29:54.020
this module is an on-demand module by
the on-demand attribute this means that

00:29:54.020 --> 00:29:54.030
the on-demand attribute this means that
 

00:29:54.030 --> 00:29:56.300
the on-demand attribute this means that
this module is only going to be

00:29:56.300 --> 00:29:56.310
this module is only going to be
 

00:29:56.310 --> 00:29:58.880
this module is only going to be
delivered to the users device when the

00:29:58.880 --> 00:29:58.890
delivered to the users device when the
 

00:29:58.890 --> 00:30:00.950
delivered to the users device when the
app requests is from the Play Store

00:30:00.950 --> 00:30:00.960
app requests is from the Play Store
 

00:30:00.960 --> 00:30:03.320
app requests is from the Play Store
instead of delivering it an install time

00:30:03.320 --> 00:30:03.330
instead of delivering it an install time
 

00:30:03.330 --> 00:30:07.010
instead of delivering it an install time
of course we now know that on-demand

00:30:07.010 --> 00:30:07.020
of course we now know that on-demand
 

00:30:07.020 --> 00:30:09.410
of course we now know that on-demand
modules are only supported on helpless

00:30:09.410 --> 00:30:09.420
modules are only supported on helpless
 

00:30:09.420 --> 00:30:12.650
modules are only supported on helpless
devices so if you choose to also provide

00:30:12.650 --> 00:30:12.660
devices so if you choose to also provide
 

00:30:12.660 --> 00:30:15.950
devices so if you choose to also provide
this module in pre all devices you're

00:30:15.950 --> 00:30:15.960
this module in pre all devices you're
 

00:30:15.960 --> 00:30:19.010
this module in pre all devices you're
going to add the fusing tag to instruct

00:30:19.010 --> 00:30:19.020
going to add the fusing tag to instruct
 

00:30:19.020 --> 00:30:21.440
going to add the fusing tag to instruct
place for place or to include this

00:30:21.440 --> 00:30:21.450
place for place or to include this
 

00:30:21.450 --> 00:30:23.570
place for place or to include this
module alongside the base module at the

00:30:23.570 --> 00:30:23.580
module alongside the base module at the
 

00:30:23.580 --> 00:30:26.090
module alongside the base module at the
install time when delivering to PL

00:30:26.090 --> 00:30:26.100
install time when delivering to PL
 

00:30:26.100 --> 00:30:30.950
install time when delivering to PL
devices or in the Universal apk now

00:30:30.950 --> 00:30:30.960
devices or in the Universal apk now
 

00:30:30.960 --> 00:30:32.800
devices or in the Universal apk now
let's look at the build up Gradle files

00:30:32.800 --> 00:30:32.810
let's look at the build up Gradle files
 

00:30:32.810 --> 00:30:35.390
let's look at the build up Gradle files
we're going to start with the dynamic

00:30:35.390 --> 00:30:35.400
we're going to start with the dynamic
 

00:30:35.400 --> 00:30:38.690
we're going to start with the dynamic
module the first thing is that we are

00:30:38.690 --> 00:30:38.700
module the first thing is that we are
 

00:30:38.700 --> 00:30:41.780
module the first thing is that we are
now using a new plugin called Condit

00:30:41.780 --> 00:30:41.790
now using a new plugin called Condit
 

00:30:41.790 --> 00:30:45.470
now using a new plugin called Condit
Android Android - feature the second

00:30:45.470 --> 00:30:45.480
Android Android - feature the second
 

00:30:45.480 --> 00:30:48.020
Android Android - feature the second
thing is we add the base module a Zen

00:30:48.020 --> 00:30:48.030
thing is we add the base module a Zen
 

00:30:48.030 --> 00:30:51.410
thing is we add the base module a Zen
dependency to this to this module so

00:30:51.410 --> 00:30:51.420
dependency to this to this module so
 

00:30:51.420 --> 00:30:53.110
dependency to this to this module so
that we can access the functionality

00:30:53.110 --> 00:30:53.120
that we can access the functionality
 

00:30:53.120 --> 00:30:57.830
that we can access the functionality
included in the base module the only

00:30:57.830 --> 00:30:57.840
included in the base module the only
 

00:30:57.840 --> 00:31:00.080
included in the base module the only
change required in the build up Gradle

00:31:00.080 --> 00:31:00.090
change required in the build up Gradle
 

00:31:00.090 --> 00:31:02.450
change required in the build up Gradle
file of the base module is to add a

00:31:02.450 --> 00:31:02.460
file of the base module is to add a
 

00:31:02.460 --> 00:31:05.180
file of the base module is to add a
dynamic features list and put all the

00:31:05.180 --> 00:31:05.190
dynamic features list and put all the
 

00:31:05.190 --> 00:31:08.300
dynamic features list and put all the
dynamic module names into this list this

00:31:08.300 --> 00:31:08.310
dynamic module names into this list this
 

00:31:08.310 --> 00:31:10.550
dynamic module names into this list this
is to instruct Gradle to make the

00:31:10.550 --> 00:31:10.560
is to instruct Gradle to make the
 

00:31:10.560 --> 00:31:12.850
is to instruct Gradle to make the
resources stored in the base module

00:31:12.850 --> 00:31:12.860
resources stored in the base module
 

00:31:12.860 --> 00:31:16.190
resources stored in the base module
available to those dynamic modules now

00:31:16.190 --> 00:31:16.200
available to those dynamic modules now
 

00:31:16.200 --> 00:31:18.440
available to those dynamic modules now
Anthony is going to show you how you can

00:31:18.440 --> 00:31:18.450
Anthony is going to show you how you can
 

00:31:18.450 --> 00:31:20.660
Anthony is going to show you how you can
use those modules with the new play core

00:31:20.660 --> 00:31:20.670
use those modules with the new play core
 

00:31:20.670 --> 00:31:26.900
use those modules with the new play core
library thanks Ava so let's take a look

00:31:26.900 --> 00:31:26.910
library thanks Ava so let's take a look
 

00:31:26.910 --> 00:31:29.090
library thanks Ava so let's take a look
at how you go about requesting on-demand

00:31:29.090 --> 00:31:29.100
at how you go about requesting on-demand
 

00:31:29.100 --> 00:31:31.190
at how you go about requesting on-demand
modules to be installed when you want

00:31:31.190 --> 00:31:31.200
modules to be installed when you want
 

00:31:31.200 --> 00:31:33.800
modules to be installed when you want
them to be installed so in order to

00:31:33.800 --> 00:31:33.810
them to be installed so in order to
 

00:31:33.810 --> 00:31:35.630
them to be installed so in order to
interact with the Play Store we are

00:31:35.630 --> 00:31:35.640
interact with the Play Store we are
 

00:31:35.640 --> 00:31:38.810
interact with the Play Store we are
introducing a split install API as part

00:31:38.810 --> 00:31:38.820
introducing a split install API as part
 

00:31:38.820 --> 00:31:40.970
introducing a split install API as part
of a new library called the play core

00:31:40.970 --> 00:31:40.980
of a new library called the play core
 

00:31:40.980 --> 00:31:43.610
of a new library called the play core
library now the play core library is a

00:31:43.610 --> 00:31:43.620
library now the play core library is a
 

00:31:43.620 --> 00:31:45.590
library now the play core library is a
Java client library that communicates

00:31:45.590 --> 00:31:45.600
Java client library that communicates
 

00:31:45.600 --> 00:31:47.420
Java client library that communicates
with the Play Store via IPC on the

00:31:47.420 --> 00:31:47.430
with the Play Store via IPC on the
 

00:31:47.430 --> 00:31:48.980
with the Play Store via IPC on the
device and in the Play Store

00:31:48.980 --> 00:31:48.990
device and in the Play Store
 

00:31:48.990 --> 00:31:51.170
device and in the Play Store
communicates with play servers to

00:31:51.170 --> 00:31:51.180
communicates with play servers to
 

00:31:51.180 --> 00:31:53.090
communicates with play servers to
download these on-demand modules when

00:31:53.090 --> 00:31:53.100
download these on-demand modules when
 

00:31:53.100 --> 00:31:55.760
download these on-demand modules when
you request them let's take a look at a

00:31:55.760 --> 00:31:55.770
you request them let's take a look at a
 

00:31:55.770 --> 00:31:58.580
you request them let's take a look at a
bit of the code the API is structured

00:31:58.580 --> 00:31:58.590
bit of the code the API is structured
 

00:31:58.590 --> 00:32:00.530
bit of the code the API is structured
using the same task framework that

00:32:00.530 --> 00:32:00.540
using the same task framework that
 

00:32:00.540 --> 00:32:02.180
using the same task framework that
you're probably familiar with from the

00:32:02.180 --> 00:32:02.190
you're probably familiar with from the
 

00:32:02.190 --> 00:32:04.400
you're probably familiar with from the
Google Play services API and five

00:32:04.400 --> 00:32:04.410
Google Play services API and five
 

00:32:04.410 --> 00:32:08.090
Google Play services API and five
API on Android installation of splits is

00:32:08.090 --> 00:32:08.100
API on Android installation of splits is
 

00:32:08.100 --> 00:32:10.160
API on Android installation of splits is
coordinated by a class called the split

00:32:10.160 --> 00:32:10.170
coordinated by a class called the split
 

00:32:10.170 --> 00:32:13.190
coordinated by a class called the split
install manager you construct a request

00:32:13.190 --> 00:32:13.200
install manager you construct a request
 

00:32:13.200 --> 00:32:14.960
install manager you construct a request
with all the modules that you wish to

00:32:14.960 --> 00:32:14.970
with all the modules that you wish to
 

00:32:14.970 --> 00:32:16.970
with all the modules that you wish to
download and then you invoke start

00:32:16.970 --> 00:32:16.980
download and then you invoke start
 

00:32:16.980 --> 00:32:19.010
download and then you invoke start
install to trigger the Play Store to

00:32:19.010 --> 00:32:19.020
install to trigger the Play Store to
 

00:32:19.020 --> 00:32:20.960
install to trigger the Play Store to
download the splits required for those

00:32:20.960 --> 00:32:20.970
download the splits required for those
 

00:32:20.970 --> 00:32:25.910
download the splits required for those
requested modules the API also allows

00:32:25.910 --> 00:32:25.920
requested modules the API also allows
 

00:32:25.920 --> 00:32:27.860
requested modules the API also allows
you to listen for updates throughout the

00:32:27.860 --> 00:32:27.870
you to listen for updates throughout the
 

00:32:27.870 --> 00:32:30.920
you to listen for updates throughout the
download and install process you can use

00:32:30.920 --> 00:32:30.930
download and install process you can use
 

00:32:30.930 --> 00:32:33.950
download and install process you can use
this to display progress the download

00:32:33.950 --> 00:32:33.960
this to display progress the download
 

00:32:33.960 --> 00:32:35.780
this to display progress the download
progress in the install progress to your

00:32:35.780 --> 00:32:35.790
progress in the install progress to your
 

00:32:35.790 --> 00:32:37.280
progress in the install progress to your
users while they are waiting for the on

00:32:37.280 --> 00:32:37.290
users while they are waiting for the on
 

00:32:37.290 --> 00:32:39.680
users while they are waiting for the on
demand feature to download you saw this

00:32:39.680 --> 00:32:39.690
demand feature to download you saw this
 

00:32:39.690 --> 00:32:41.810
demand feature to download you saw this
in the video that pierre showed when it

00:32:41.810 --> 00:32:41.820
in the video that pierre showed when it
 

00:32:41.820 --> 00:32:43.190
in the video that pierre showed when it
was downloading the address of the

00:32:43.190 --> 00:32:43.200
was downloading the address of the
 

00:32:43.200 --> 00:32:47.780
was downloading the address of the
module for large modules you'll need to

00:32:47.780 --> 00:32:47.790
module for large modules you'll need to
 

00:32:47.790 --> 00:32:49.970
module for large modules you'll need to
obtain user confirmation prior to the

00:32:49.970 --> 00:32:49.980
obtain user confirmation prior to the
 

00:32:49.980 --> 00:32:52.970
obtain user confirmation prior to the
download via this video store api you'll

00:32:52.970 --> 00:32:52.980
download via this video store api you'll
 

00:32:52.980 --> 00:32:54.370
download via this video store api you'll
need to do this whenever the app

00:32:54.370 --> 00:32:54.380
need to do this whenever the app
 

00:32:54.380 --> 00:32:56.810
need to do this whenever the app
requests more than 10 megabytes of

00:32:56.810 --> 00:32:56.820
requests more than 10 megabytes of
 

00:32:56.820 --> 00:33:00.880
requests more than 10 megabytes of
on-demand modules to be downloaded

00:33:00.880 --> 00:33:00.890
 
 

00:33:00.890 --> 00:33:03.800
 
however there is an alternative option

00:33:03.800 --> 00:33:03.810
however there is an alternative option
 

00:33:03.810 --> 00:33:06.470
however there is an alternative option
for installing these modules which if

00:33:06.470 --> 00:33:06.480
for installing these modules which if
 

00:33:06.480 --> 00:33:08.480
for installing these modules which if
they aren't required immediately for

00:33:08.480 --> 00:33:08.490
they aren't required immediately for
 

00:33:08.490 --> 00:33:10.340
they aren't required immediately for
immediate use and we call this the

00:33:10.340 --> 00:33:10.350
immediate use and we call this the
 

00:33:10.350 --> 00:33:13.970
immediate use and we call this the
deferred installation api if you request

00:33:13.970 --> 00:33:13.980
deferred installation api if you request
 

00:33:13.980 --> 00:33:15.620
deferred installation api if you request
if you use this simple one line to

00:33:15.620 --> 00:33:15.630
if you use this simple one line to
 

00:33:15.630 --> 00:33:17.810
if you use this simple one line to
request a deferred install of a module

00:33:17.810 --> 00:33:17.820
request a deferred install of a module
 

00:33:17.820 --> 00:33:19.940
request a deferred install of a module
then the module will be downloaded at a

00:33:19.940 --> 00:33:19.950
then the module will be downloaded at a
 

00:33:19.950 --> 00:33:22.370
then the module will be downloaded at a
convenient time for the user this is

00:33:22.370 --> 00:33:22.380
convenient time for the user this is
 

00:33:22.380 --> 00:33:24.080
convenient time for the user this is
generally when the user is not using the

00:33:24.080 --> 00:33:24.090
generally when the user is not using the
 

00:33:24.090 --> 00:33:25.820
generally when the user is not using the
device and it's charging and it's on

00:33:25.820 --> 00:33:25.830
device and it's charging and it's on
 

00:33:25.830 --> 00:33:29.240
device and it's charging and it's on
Wi-Fi and because of this we allow you

00:33:29.240 --> 00:33:29.250
Wi-Fi and because of this we allow you
 

00:33:29.250 --> 00:33:31.640
Wi-Fi and because of this we allow you
to install larger modules by this API

00:33:31.640 --> 00:33:31.650
to install larger modules by this API
 

00:33:31.650 --> 00:33:33.650
to install larger modules by this API
without requiring user confirmation up

00:33:33.650 --> 00:33:33.660
without requiring user confirmation up
 

00:33:33.660 --> 00:33:36.470
without requiring user confirmation up
to a hundred megabytes and so this is a

00:33:36.470 --> 00:33:36.480
to a hundred megabytes and so this is a
 

00:33:36.480 --> 00:33:38.360
to a hundred megabytes and so this is a
really user friendly way to download

00:33:38.360 --> 00:33:38.370
really user friendly way to download
 

00:33:38.370 --> 00:33:43.490
really user friendly way to download
large on-demand modules for your app you

00:33:43.490 --> 00:33:43.500
large on-demand modules for your app you
 

00:33:43.500 --> 00:33:46.190
large on-demand modules for your app you
can also use the split install API to

00:33:46.190 --> 00:33:46.200
can also use the split install API to
 

00:33:46.200 --> 00:33:48.560
can also use the split install API to
manage your on demand modules so you can

00:33:48.560 --> 00:33:48.570
manage your on demand modules so you can
 

00:33:48.570 --> 00:33:49.790
manage your on demand modules so you can
see which modules are currently

00:33:49.790 --> 00:33:49.800
see which modules are currently
 

00:33:49.800 --> 00:33:52.070
see which modules are currently
installed and if your user no longer

00:33:52.070 --> 00:33:52.080
installed and if your user no longer
 

00:33:52.080 --> 00:33:54.290
installed and if your user no longer
needs that module you can request for

00:33:54.290 --> 00:33:54.300
needs that module you can request for
 

00:33:54.300 --> 00:33:56.570
needs that module you can request for
the module to be uninstalled freeing up

00:33:56.570 --> 00:33:56.580
the module to be uninstalled freeing up
 

00:33:56.580 --> 00:33:58.400
the module to be uninstalled freeing up
the precious disk space for your users

00:33:58.400 --> 00:33:58.410
the precious disk space for your users
 

00:33:58.410 --> 00:34:00.590
the precious disk space for your users
and reducing the footprint of your app

00:34:00.590 --> 00:34:00.600
and reducing the footprint of your app
 

00:34:00.600 --> 00:34:04.090
and reducing the footprint of your app
on their device

00:34:04.090 --> 00:34:04.100
 
 

00:34:04.100 --> 00:34:06.580
 
now when you go and install an on-demand

00:34:06.580 --> 00:34:06.590
now when you go and install an on-demand
 

00:34:06.590 --> 00:34:10.060
now when you go and install an on-demand
module on n+ devices the app does not

00:34:10.060 --> 00:34:10.070
module on n+ devices the app does not
 

00:34:10.070 --> 00:34:12.550
module on n+ devices the app does not
need to be restarted so code is

00:34:12.550 --> 00:34:12.560
need to be restarted so code is
 

00:34:12.560 --> 00:34:14.440
need to be restarted so code is
available immediately upon request on

00:34:14.440 --> 00:34:14.450
available immediately upon request on
 

00:34:14.450 --> 00:34:16.840
available immediately upon request on
the install completing and new resources

00:34:16.840 --> 00:34:16.850
the install completing and new resources
 

00:34:16.850 --> 00:34:19.090
the install completing and new resources
and assets survey are available once you

00:34:19.090 --> 00:34:19.100
and assets survey are available once you
 

00:34:19.100 --> 00:34:22.630
and assets survey are available once you
refresh your context object however on

00:34:22.630 --> 00:34:22.640
refresh your context object however on
 

00:34:22.640 --> 00:34:25.900
refresh your context object however on
Android LNM installing splits requires

00:34:25.900 --> 00:34:25.910
Android LNM installing splits requires
 

00:34:25.910 --> 00:34:27.790
Android LNM installing splits requires
the app to restart if you want to

00:34:27.790 --> 00:34:27.800
the app to restart if you want to
 

00:34:27.800 --> 00:34:30.160
the app to restart if you want to
install them properly but to get around

00:34:30.160 --> 00:34:30.170
install them properly but to get around
 

00:34:30.170 --> 00:34:32.590
install them properly but to get around
to avoid this we've included a split

00:34:32.590 --> 00:34:32.600
to avoid this we've included a split
 

00:34:32.600 --> 00:34:34.900
to avoid this we've included a split
compact library which emulates the

00:34:34.900 --> 00:34:34.910
compact library which emulates the
 

00:34:34.910 --> 00:34:37.630
compact library which emulates the
installation of a split on L&amp;M until the

00:34:37.630 --> 00:34:37.640
installation of a split on L&amp;M until the
 

00:34:37.640 --> 00:34:39.220
installation of a split on L&amp;M until the
app goes into the background and we can

00:34:39.220 --> 00:34:39.230
app goes into the background and we can
 

00:34:39.230 --> 00:34:41.170
app goes into the background and we can
properly install it and so this split

00:34:41.170 --> 00:34:41.180
properly install it and so this split
 

00:34:41.180 --> 00:34:43.360
properly install it and so this split
compat library means that your app

00:34:43.360 --> 00:34:43.370
compat library means that your app
 

00:34:43.370 --> 00:34:45.700
compat library means that your app
doesn't need to restart and all the

00:34:45.700 --> 00:34:45.710
doesn't need to restart and all the
 

00:34:45.710 --> 00:34:47.650
doesn't need to restart and all the
things inside this or almost all the

00:34:47.650 --> 00:34:47.660
things inside this or almost all the
 

00:34:47.660 --> 00:34:49.060
things inside this or almost all the
things inside this module are

00:34:49.060 --> 00:34:49.070
things inside this module are
 

00:34:49.070 --> 00:34:51.850
things inside this module are
immediately available to your app you

00:34:51.850 --> 00:34:51.860
immediately available to your app you
 

00:34:51.860 --> 00:34:53.950
immediately available to your app you
can set this with compact library up in

00:34:53.950 --> 00:34:53.960
can set this with compact library up in
 

00:34:53.960 --> 00:34:55.690
can set this with compact library up in
a very similar way to how you might be

00:34:55.690 --> 00:34:55.700
a very similar way to how you might be
 

00:34:55.700 --> 00:34:57.250
a very similar way to how you might be
familiar with setting up the multi decks

00:34:57.250 --> 00:34:57.260
familiar with setting up the multi decks
 

00:34:57.260 --> 00:35:02.500
familiar with setting up the multi decks
library in your apps finally when you

00:35:02.500 --> 00:35:02.510
library in your apps finally when you
 

00:35:02.510 --> 00:35:04.600
library in your apps finally when you
release an update to your hat play will

00:35:04.600 --> 00:35:04.610
release an update to your hat play will
 

00:35:04.610 --> 00:35:06.220
release an update to your hat play will
automatically update both the base

00:35:06.220 --> 00:35:06.230
automatically update both the base
 

00:35:06.230 --> 00:35:09.100
automatically update both the base
module and any on-demand modules that

00:35:09.100 --> 00:35:09.110
module and any on-demand modules that
 

00:35:09.110 --> 00:35:11.560
module and any on-demand modules that
are already installed so the versions of

00:35:11.560 --> 00:35:11.570
are already installed so the versions of
 

00:35:11.570 --> 00:35:13.000
are already installed so the versions of
your modules that are on a device are

00:35:13.000 --> 00:35:13.010
your modules that are on a device are
 

00:35:13.010 --> 00:35:14.710
your modules that are on a device are
always in sync they're always at the

00:35:14.710 --> 00:35:14.720
always in sync they're always at the
 

00:35:14.720 --> 00:35:16.810
always in sync they're always at the
same version and partners tell us that

00:35:16.810 --> 00:35:16.820
same version and partners tell us that
 

00:35:16.820 --> 00:35:18.070
same version and partners tell us that
this is something that they really like

00:35:18.070 --> 00:35:18.080
this is something that they really like
 

00:35:18.080 --> 00:35:22.210
this is something that they really like
about this model all right let's wrap

00:35:22.210 --> 00:35:22.220
about this model all right let's wrap
 

00:35:22.220 --> 00:35:24.630
about this model all right let's wrap
this all out starting today all

00:35:24.630 --> 00:35:24.640
this all out starting today all
 

00:35:24.640 --> 00:35:27.220
this all out starting today all
developers can build Android app bundles

00:35:27.220 --> 00:35:27.230
developers can build Android app bundles
 

00:35:27.230 --> 00:35:30.400
developers can build Android app bundles
in Android studio 3 23.2 canary and

00:35:30.400 --> 00:35:30.410
in Android studio 3 23.2 canary and
 

00:35:30.410 --> 00:35:32.260
in Android studio 3 23.2 canary and
they'll be able to publish these on play

00:35:32.260 --> 00:35:32.270
they'll be able to publish these on play
 

00:35:32.270 --> 00:35:35.230
they'll be able to publish these on play
to all users so I encourage all of you

00:35:35.230 --> 00:35:35.240
to all users so I encourage all of you
 

00:35:35.240 --> 00:35:37.420
to all users so I encourage all of you
to try this out and see how much smaller

00:35:37.420 --> 00:35:37.430
to try this out and see how much smaller
 

00:35:37.430 --> 00:35:39.250
to try this out and see how much smaller
your app could be just by switching to

00:35:39.250 --> 00:35:39.260
your app could be just by switching to
 

00:35:39.260 --> 00:35:42.880
your app could be just by switching to
the Android app bundle now we will be

00:35:42.880 --> 00:35:42.890
the Android app bundle now we will be
 

00:35:42.890 --> 00:35:45.100
the Android app bundle now we will be
rolling out motorisation to developers

00:35:45.100 --> 00:35:45.110
rolling out motorisation to developers
 

00:35:45.110 --> 00:35:47.830
rolling out motorisation to developers
over the coming months from today you

00:35:47.830 --> 00:35:47.840
over the coming months from today you
 

00:35:47.840 --> 00:35:49.840
over the coming months from today you
can start building motorized apps in the

00:35:49.840 --> 00:35:49.850
can start building motorized apps in the
 

00:35:49.850 --> 00:35:52.000
can start building motorized apps in the
studio canary and you can publish them

00:35:52.000 --> 00:35:52.010
studio canary and you can publish them
 

00:35:52.010 --> 00:35:53.800
studio canary and you can publish them
to the internal and alpha tracks within

00:35:53.800 --> 00:35:53.810
to the internal and alpha tracks within
 

00:35:53.810 --> 00:35:56.350
to the internal and alpha tracks within
the Play console but we'll be opening up

00:35:56.350 --> 00:35:56.360
the Play console but we'll be opening up
 

00:35:56.360 --> 00:35:58.720
the Play console but we'll be opening up
publishing in production tracks as a

00:35:58.720 --> 00:35:58.730
publishing in production tracks as a
 

00:35:58.730 --> 00:36:00.970
publishing in production tracks as a
beta over the coming months and if

00:36:00.970 --> 00:36:00.980
beta over the coming months and if
 

00:36:00.980 --> 00:36:02.350
beta over the coming months and if
you're interested you can register your

00:36:02.350 --> 00:36:02.360
you're interested you can register your
 

00:36:02.360 --> 00:36:05.620
you're interested you can register your
interest in module ization at the link

00:36:05.620 --> 00:36:05.630
interest in module ization at the link
 

00:36:05.630 --> 00:36:09.520
interest in module ization at the link
provider and with that thank you

00:36:09.520 --> 00:36:09.530
provider and with that thank you
 

00:36:09.530 --> 00:36:11.590
provider and with that thank you
everyone for coming if you have any

00:36:11.590 --> 00:36:11.600
everyone for coming if you have any
 

00:36:11.600 --> 00:36:13.720
everyone for coming if you have any
questions you can grab us afterwards I

00:36:13.720 --> 00:36:13.730
questions you can grab us afterwards I
 

00:36:13.730 --> 00:36:15.070
questions you can grab us afterwards I
don't think we have time right now or

00:36:15.070 --> 00:36:15.080
don't think we have time right now or
 

00:36:15.080 --> 00:36:16.450
don't think we have time right now or
you can grab us over the next couple of

00:36:16.450 --> 00:36:16.460
you can grab us over the next couple of
 

00:36:16.460 --> 00:36:17.380
you can grab us over the next couple of
days in the sample

00:36:17.380 --> 00:36:17.390
days in the sample
 

00:36:17.390 --> 00:36:20.410
days in the sample
see just behind the stage and then thank

00:36:20.410 --> 00:36:20.420
see just behind the stage and then thank
 

00:36:20.420 --> 00:36:23.410
see just behind the stage and then thank
you have a great iron

00:36:23.410 --> 00:36:23.420
you have a great iron
 

00:36:23.420 --> 00:36:44.710
you have a great iron
[Music]

