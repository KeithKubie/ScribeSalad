WEBVTT
Kind: captions
Language: en

00:00:00.008 --> 00:00:03.800
So I'm just going to sketch out at a high level how Merle chooses to do this.

00:00:03.800 --> 00:00:06.941
So first we're going to look at the data structure for a graph.

00:00:06.941 --> 00:00:11.815
We're going to store the graph with a CSR-like structure, similar to how we'd store a sparse matrix.

00:00:11.815 --> 00:00:15.463
So let's look at this graph here; notice it has 9 nodes,

00:00:15.463 --> 00:00:19.108
and it has links that are either unidirectional or bidirectional,

00:00:19.108 --> 00:00:24.324
and we're going to consider beginning our breadth first traversal with this particular node right here, node 0.

00:00:24.324 --> 00:00:26.670
We're going to store 2 arrays to represent the graph.

00:00:26.670 --> 00:00:29.532
The first, called C, tells us the neighbors for each node.

00:00:29.532 --> 00:00:34.001
Node 0 has neighbors 1 and 3, so we see 1 and 3.

00:00:34.001 --> 00:00:39.952
Node 1 has neighbors 0, 2, and 4; 0, 2 and 4 and so on.

00:00:39.952 --> 00:00:44.764
The second array, called R, tells us the starting location for each vertex's neighbors.

00:00:44.764 --> 00:00:47.747
Node 0's neighbors started off set 0.

00:00:47.747 --> 00:00:50.211
Node 1's neighbors started off set 2.

00:00:50.211 --> 00:00:53.156
Node 2s neighbors started off set 5 and so on.

00:00:53.156 --> 00:00:58.210
As a function of V, the number of vertices, and E, the number of edges in the graph,

00:00:58.210 --> 00:01:03.093
how long is C and how long is R, in terms of the number of elements in the array?

