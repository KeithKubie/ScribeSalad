WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:01.270
So, we know that,

00:00:01.270 --> 00:00:05.430
in order to avoid collision,
we should have a longer hash value.

00:00:05.430 --> 00:00:09.980
Now, the question is, how many bits
should we have in a hash value so that

00:00:09.980 --> 00:00:15.310
it is not feasible to find two different
messages that have the same hash value?

00:00:15.310 --> 00:00:18.420
Suppose the hash value has L bits.

00:00:18.420 --> 00:00:22.500
Then, there are 2 to the L,
that many possible hash values.

00:00:22.500 --> 00:00:27.242
According to the birthday paradox we
can think about we have 2 to the L,

00:00:27.242 --> 00:00:32.537
that many possible birthdays, therefore
if we have a square root of 2 to the L,

00:00:32.537 --> 00:00:36.560
that is two to the L divided by two,
that many messages.

00:00:36.560 --> 00:00:40.998
Then there's 50% chance that two of
them will have the same hash value.

00:00:40.998 --> 00:00:45.940
In other words,
the attacker only needs to search 2 to

00:00:45.940 --> 00:00:52.110
the power L divided by 2, that the many
messages, in order to find collision.

00:00:52.110 --> 00:00:58.310
Therefore, if L is 64,
which means the hash value has 64 bits.

00:00:58.310 --> 00:01:02.570
Then there are 2 to 64, that many
possible different hash values,

00:01:02.570 --> 00:01:06.620
This means that the attacker only
needs to search 2 to the 32,

00:01:06.620 --> 00:01:11.210
that many different messages,
in order to find a collision, and

00:01:11.210 --> 00:01:14.940
this is quite feasible with
today's computing power.

00:01:14.940 --> 00:01:19.490
Therefore, we need the hash
value to be longer than 64 bit.

00:01:19.490 --> 00:01:24.650
Therefore, in hash functions,
the hash value is at least 128 bits.

