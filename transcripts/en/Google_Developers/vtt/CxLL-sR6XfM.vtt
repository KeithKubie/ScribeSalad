WEBVTT
Kind: captions
Language: en

00:00:03.870 --> 00:00:10.040
&gt;&gt;Christian Kurzke: All right. Welcome, everyone.
Thanks for coming over to our talk. We will

00:00:10.040 --> 00:00:14.670
be talking about developing Android applications
for Google TV.

00:00:14.670 --> 00:00:19.950
I'm really excited to see all of you here
come for our talk for Google TV. So we're

00:00:19.950 --> 00:00:26.130
going to keep it very interactive today.
I'm Christian Kurzke. I am the developer advocate

00:00:26.130 --> 00:00:30.239
for Android on Google TV.
&gt;&gt;Jason Bayer: And I'm Jason. I'm a software

00:00:30.239 --> 00:00:33.151
engineer and tech lead on the Android side
of Google TV.

00:00:33.151 --> 00:00:38.800
&gt;&gt;Christian Kurzke: Great.
So with that, we also are very fortunate to

00:00:38.800 --> 00:00:45.010
have this session live-streamed online. So
for all of you who are watching from at home,

00:00:45.010 --> 00:00:48.510
hopefully on your Google TV, lean back, ten-foot
experience.

00:00:48.510 --> 00:00:54.449
Go to the URL on top of the slide. You can
submit questions. We will answer the questions

00:00:54.449 --> 00:00:58.039
later in the Q&amp;A session.
For the guys who are here in the audience

00:00:58.039 --> 00:01:05.190
and everyone else, go scan the QR code. You
can give us feedback on the session. And you

00:01:05.190 --> 00:01:10.620
know the drill with Speaker Meter. It's hopefully
not the first talk you're in.

00:01:10.620 --> 00:01:17.590
So with that, what are we going to talk about?
At first, for a few of you who are not familiar

00:01:17.590 --> 00:01:22.830
with Google TV yet, we're going to give a
quick overview of what Google TV is from a

00:01:22.830 --> 00:01:27.810
developer's point of view, from a user's point
of view. And then we're diving right in and

00:01:27.810 --> 00:01:33.290
we talk about how you can optimize your app,
how you can enable your app to actually show

00:01:33.290 --> 00:01:37.440
up on Google TV. And then we talk a few of
the extra capabilities.

00:01:37.440 --> 00:01:43.520
So, actually, just to get a feel of the audience,
how many of you are actually Android developers?

00:01:43.520 --> 00:01:46.670
All right. I love it.
So you guys are already familiar with writing

00:01:46.670 --> 00:01:51.410
Android apps. So after this talk, hopefully,
you will know how to get your Android apps

00:01:51.410 --> 00:01:59.520
on a really big screen.
All right. Without further ado, here is a

00:01:59.520 --> 00:02:04.800
little reminder, just for people who are old
enough to remember this in their households,

00:02:04.800 --> 00:02:11.340
this is what phones used to look like.
And very short time later, if you think about

00:02:11.340 --> 00:02:16.379
how long the phone has been around, within
the last decade, really, we have taken the

00:02:16.379 --> 00:02:23.159
phone from a pretty boring device to an incredibly
smart communications device that runs applications.

00:02:23.159 --> 00:02:27.939
And it's really -- it's not your grandma's
phone anymore.

00:02:27.939 --> 00:02:33.290
So I'm sure somebody in the audience has still
one of those at home, good-old cathode an

00:02:33.290 --> 00:02:39.689
ray tube, electron beams. Lots of really cool
physics but not so much smarts in it.

00:02:39.689 --> 00:02:45.079
So today, we're going to show you how you
get from there to here.

00:02:45.079 --> 00:02:50.700
So what is Google TV?
I know we announced it last year here at Google

00:02:50.700 --> 00:02:56.829
I/O. And since then, we have shipped several
-- or not we. Our partners have shipped several

00:02:56.829 --> 00:03:00.959
devices.
So Google TV is a software platform. It has

00:03:00.959 --> 00:03:06.189
been integrated in televisions, in Blu-ray
players, and in stand-alone set-top boxes.

00:03:06.189 --> 00:03:13.989
So those devices here are from Sony and from
Logitech. And for U.S. developers, really,

00:03:13.989 --> 00:03:18.889
don't think about the physical device as much.
Think about it as a platform for developers

00:03:18.889 --> 00:03:25.439
running Android, running Chrome.
So why are televisions actually really that

00:03:25.439 --> 00:03:31.230
interesting for you as developers?
I know you all write for phones. And keep

00:03:31.230 --> 00:03:36.409
in mind, if you look at the number of households
that actually have access to a computer or

00:03:36.409 --> 00:03:43.529
to mobile devices, still more households in
the U.S. have TVs. A lot of households have

00:03:43.529 --> 00:03:51.180
actually multiple TVs, three TVs, five TVs.
And over the next couple of years, those TVs

00:03:51.180 --> 00:03:57.430
will get increasingly smarter.
So we expect, according to some studies, that

00:03:57.430 --> 00:04:03.480
by 2014, more than one-third of the households
in the U.S. will have a smart TV, will be

00:04:03.480 --> 00:04:08.230
connected to the Internet, and will be doing
a lot more than just watching shows.

00:04:08.230 --> 00:04:15.209
&gt;&gt;Jason Bayer: So let's get right to it.
So what's coming to Google TV? If you missed

00:04:15.209 --> 00:04:20.949
the keynote yesterday, Google TV this summer
is going to be updated with Honeycomb, Honeycomb

00:04:20.949 --> 00:04:26.789
3.1. Some of the major features for you will
be that this is a fully compatible Android

00:04:26.789 --> 00:04:29.599
device.
What that means is that all of the APIs that

00:04:29.599 --> 00:04:34.560
you know and are familiar with are going to
work on a Google TV.

00:04:34.560 --> 00:04:39.680
Google TV will also come with Android Market.
So users will be able to find, download, and

00:04:39.680 --> 00:04:44.250
use all of your Android apps.
And, finally, all the retail devices are going

00:04:44.250 --> 00:04:50.280
to come with ADB. So you can debug and install
your apps on retail devices.

00:04:50.280 --> 00:04:55.759
Now, all of the currently existing Google
TVs out there will also get this update. So

00:04:55.759 --> 00:05:01.620
Honeycomb, ADB, Market, will be available
on new and current devices.

00:05:01.620 --> 00:05:06.229
Next, we're going to have an SDK add-on. So
with this, you'll be able to run the emulator

00:05:06.229 --> 00:05:11.780
with Google TV. And we're also going to be
including some extra TV-specific functionality.

00:05:11.780 --> 00:05:14.560
And we'll get into the details later in this
talk.

00:05:14.560 --> 00:05:23.620
All right. So one of the major themes of Honeycomb
upgrade for users is going to be simplicity.

00:05:23.620 --> 00:05:28.159
This is a screen shot of the home screen of
Google TV. You'll notice at the bottom that

00:05:28.159 --> 00:05:34.099
there is application shortcuts that the user
has configured, access to all applications,

00:05:34.099 --> 00:05:39.389
and then above that, there's the app widget
Canvas. So users can go and place app widgets

00:05:39.389 --> 00:05:44.150
directly on the home screen here.
Now, if you know about the current version

00:05:44.150 --> 00:05:50.699
of Google TV, for users, this is a lot simpler.
We've cut out a lot of the -- what we think

00:05:50.699 --> 00:05:55.539
unnecessary features. And we really want to
get users directly to applications.

00:05:55.539 --> 00:05:59.250
So for U.S. developers and for users, we think
this is a big improvement.

00:05:59.250 --> 00:06:02.860
&gt;&gt;Christian Kurzke: And also, keep in mind,
it's probably not clear from the slide here,

00:06:02.860 --> 00:06:08.110
but what you see through here is actually
live TV. So when a user presses the home button

00:06:08.110 --> 00:06:13.669
on the remote control, they get the little
app launcher in the bottom. And then the rest

00:06:13.669 --> 00:06:19.729
of the screen is live TV. And you as a developer
can overlay widgets over this.

00:06:19.729 --> 00:06:26.550
So the good news is, as Android developers,
you already know how to create widgets. So

00:06:26.550 --> 00:06:32.139
now, with Google TV, you can create widgets
that live in the living room on the largest

00:06:32.139 --> 00:06:36.060
screen in the house. So you can get information
really quickly to your users.

00:06:36.060 --> 00:06:43.340
&gt;&gt;Jason Bayer: Next, this is a screen shot
of the quick search box.

00:06:43.340 --> 00:06:47.990
This is similar to what you see on phones,
tablets, and the current Google TV. But I

00:06:47.990 --> 00:06:53.969
just want to point out how simple and easy
it is for users to search over contents. And

00:06:53.969 --> 00:06:59.560
we make it really easy to highlight all of
the video results and TV results on the top.

00:06:59.560 --> 00:07:03.080
And any application results show up in an
organized manner.

00:07:03.080 --> 00:07:07.909
So this is just another good way to direct
users to your application.

00:07:07.909 --> 00:07:15.620
&gt;&gt;Christian Kurzke: So this was a very brief
overview of what the team has been focused

00:07:15.620 --> 00:07:23.449
on over the last year. So now let's look,
how can you as a developer optimize your application

00:07:23.449 --> 00:07:31.319
to run on this device.
So for that, I brought a little screen shot

00:07:31.319 --> 00:07:35.650
or a little photo of Jason's living room,
in case you guys have been over, he has really

00:07:35.650 --> 00:07:39.419
eclectic taste. Love the red couch.
&gt;&gt;Jason Bayer: I'm going to check speaker

00:07:39.419 --> 00:07:41.020
meter afterwards to see how good your jokes
are.

00:07:41.020 --> 00:07:53.130
&gt;&gt;Christian Kurzke: So what I want to really
highlight with this slide is, the TV is a

00:07:53.130 --> 00:08:00.069
very new interaction model for users. So as
a developer, you should really think of a

00:08:00.069 --> 00:08:07.860
TV not just as a big phone. It's rather different
in a few subtle ways. It has a different input

00:08:07.860 --> 00:08:12.289
device. So some of you may remember when TVs
did not have a remote control. You actually

00:08:12.289 --> 00:08:17.370
had to get off the couch and change channels.
We don't want to get back to this where you

00:08:17.370 --> 00:08:23.229
have to get off the couch and touch the screen
and press icons on the screen. So for that,

00:08:23.229 --> 00:08:29.469
we have remote controls.
And then also, the TV screen, it's big, but

00:08:29.469 --> 00:08:34.370
you sit pretty far away. And you're usually
in your living room. You want to relax. You

00:08:34.370 --> 00:08:40.130
want to chill. You don't want to lean forward,
interact with a laptop.

00:08:40.130 --> 00:08:49.050
So talking about input devices. So these are
the remote controls or the input devices for

00:08:49.050 --> 00:08:54.560
Google TV today. You see the Sony and the
Logitech input device. First thing you will

00:08:54.560 --> 00:09:01.610
notice is it has full QWERTY keyboard. So
it makes it very easy to enter text. If you

00:09:01.610 --> 00:09:08.450
have search queries, if you go on the Web,
it's very easy to quickly enter text here.

00:09:08.450 --> 00:09:13.600
The other thing you will notice is there is
extra buttons on this.

00:09:13.600 --> 00:09:21.920
And I want to highlight this area of the keyboard.
So all of the Google TV devices have a five-way

00:09:21.920 --> 00:09:25.850
navigation pad. We call it the D-Pad for directional
pad.

00:09:25.850 --> 00:09:33.060
And it also has several media buttons for
fast forward, play, rewind, and so on.

00:09:33.060 --> 00:09:39.200
We do have a mouse pad. So both the Sony and
the Logitech device have a mouse pad, which

00:09:39.200 --> 00:09:46.560
emulates touch input. But the goal for a developer
should really be to optimize an application

00:09:46.560 --> 00:09:53.880
to take advantage of the up, down, left, right
navigation. It's the way that is most intuitive

00:09:53.880 --> 00:10:00.110
for people who are in the living room, and
it's also more convenient to actually do this

00:10:00.110 --> 00:10:05.990
without having to look at the TV. You can
just very easily click up and down.

00:10:05.990 --> 00:10:10.790
Also, the media keys. We already, -- by the
way, if you have looked carefully through

00:10:10.790 --> 00:10:16.899
the Honeycomb key codes, there is already
key codes in Honeycomb today that map to the

00:10:16.899 --> 00:10:22.250
play, pause, rewind, and so on. So in case
you were wondering, this is why we got them

00:10:22.250 --> 00:10:29.510
into Honeycomb.
So when I say optimize your application for

00:10:29.510 --> 00:10:36.639
D-Pad, what does that mean?
Okay. Take a look at this UI here. It's a

00:10:36.639 --> 00:10:42.779
very simple tab view with a listview embedded
and maybe or a couple buttons at the bottom.

00:10:42.779 --> 00:10:48.440
This is what your average application would
look like on a tablet. Think of your contacts

00:10:48.440 --> 00:10:54.480
app or maybe an image gallery, and the user
can browse up and down through a list of items,

00:10:54.480 --> 00:10:58.829
maybe click on a few items, mark them, and
then go to the button.

00:10:58.829 --> 00:11:03.839
If you navigate this on a tablet with your
fingers, it's very intuitive.

00:11:03.839 --> 00:11:10.160
If you navigate this with only the up, down,
left, right key, you will have to scroll through

00:11:10.160 --> 00:11:15.310
all of the items in the listview all the way
to the bottom to get the focus to the button.

00:11:15.310 --> 00:11:21.389
This is not very convenient for a user to
navigate on a D-Pad.

00:11:21.389 --> 00:11:28.550
With a very simple change, you can improve
the usability of this for a D-Pad user.

00:11:28.550 --> 00:11:35.181
Also keep in mind, naturally, TVs are landscape
devices, they are not portrait. So if you

00:11:35.181 --> 00:11:42.050
have a listview, the list items usually tend
to be very long, and you should probably contain

00:11:42.050 --> 00:11:48.279
them in multiple columns anyway.
So in this view here, we have three columns.

00:11:48.279 --> 00:11:53.940
We have one column with a ListView for -- ListView
in the middle. We have tabs to the side and

00:11:53.940 --> 00:11:59.290
the buttons to the other side. Now you can
very easily just navigate down, down, mark

00:11:59.290 --> 00:12:05.660
a couple items, and then left or right. Switch
the tabs or hit the button.

00:12:05.660 --> 00:12:11.769
A lot fewer key strokes for your users, and
a lot easier to navigate.

00:12:11.769 --> 00:12:17.050
One other remark I want to make is over the
last couple of months we have been working

00:12:17.050 --> 00:12:22.389
with a couple of the preload developers and
a couple of the early access guys, and taking

00:12:22.389 --> 00:12:29.440
an existing Android application and running
it on TV, very frequently for a developer

00:12:29.440 --> 00:12:34.009
you don't pay too much attention of where
the focus next and -- basically previous and

00:12:34.009 --> 00:12:38.670
next focus of your elements are, because on
a touch screen, really you don't care as much.

00:12:38.670 --> 00:12:42.509
The user can just randomly touch things on
the screen.

00:12:42.509 --> 00:12:47.820
When you develop for TV and you optimize for
D-Pad, take a second look at your layouts

00:12:47.820 --> 00:12:53.149
and make sure your elements are properly wired
so that the next focus really is what the

00:12:53.149 --> 00:12:55.829
user expects.
&gt;&gt;Jason Bayer: There is actually a new attribute

00:12:55.829 --> 00:13:01.079
in Honeycomb for a next focus forward because
we have a tab key. So when users hit tab on

00:13:01.079 --> 00:13:04.019
the keyboard, it moves the focus forward and
shift-tab for back.

00:13:04.019 --> 00:13:12.390
So if the system doesn't do what you expect
it to, you can override the next focus forward.

00:13:12.390 --> 00:13:17.139
So we have the same problems with these layouts
on nontouch devices when you look at the action

00:13:17.139 --> 00:13:20.519
bar.
If you were around for the last talk and paying

00:13:20.519 --> 00:13:26.350
attention, you'll know that there is now an
API in Honeycomb to standardize the action

00:13:26.350 --> 00:13:32.820
bar. This is supposed to standardize the app
navigation and highlight common actions. On

00:13:32.820 --> 00:13:37.550
the tablet, this is up here at the top. But
you could imagine on a nontouch device if

00:13:37.550 --> 00:13:43.139
you are navigating through a list in the body,
switching tabs ends up being pretty burdensome

00:13:43.139 --> 00:13:47.430
using the D-Pad.
So on this note and considering what Christian

00:13:47.430 --> 00:13:53.000
was just mentioning, we went ahead and used
the same exact action bar APIs, and we're

00:13:53.000 --> 00:13:57.690
thinking of rendering this on the left side.
So you take a look at this action bar with

00:13:57.690 --> 00:14:02.490
the same tabs and actions. From the user's
perspective, it would be very easy for them

00:14:02.490 --> 00:14:07.560
to D-Pad over to access different tabs. And
from your perspective, you can use the exact

00:14:07.560 --> 00:14:13.069
same action bar API, and depending on which
device it's running on, on a TV it will be

00:14:13.069 --> 00:14:17.709
optimized for a nontouch and for a phone or
tablet it will render in a different layout

00:14:17.709 --> 00:14:24.569
optimized for touch.
Okay. So next let's talk about the TV screen

00:14:24.569 --> 00:14:26.790
itself.
&gt;&gt;Christian Kurzke: You know what this picture

00:14:26.790 --> 00:14:29.639
actually needs? This picture needs a couple
socks.

00:14:29.639 --> 00:14:33.600
[ Laughter ]
&gt;&gt;Christian Kurzke: I am working on my jokes.

00:14:33.600 --> 00:14:36.970
Anyway, anyone want some Google TV socks?
[ Laughter ]

00:14:36.970 --> 00:14:42.230
&gt;&gt;Jason Bayer: I think there's some people
in the back.

00:14:42.230 --> 00:14:46.589
&gt;&gt;Christian Kurzke: All right. I have a few
more. Let's try this.

00:14:46.589 --> 00:14:52.199
&gt;&gt;Jason Bayer: Ahh, it's the wind. Front row
seats.

00:14:52.199 --> 00:14:54.710
&gt;&gt;Christian Kurzke: That's what you get for
being here early.

00:14:54.710 --> 00:15:03.500
&gt;&gt;Jason Bayer: So this might look like a familiar
table to you, if you have been on developer.android.com.

00:15:03.500 --> 00:15:09.530
This breaks down the dinner screen sizes,
there is a small, normal, large, extra large

00:15:09.530 --> 00:15:13.519
screen and theirs there's also the different
densities, so low density, medium density,

00:15:13.519 --> 00:15:19.190
high density, extra high density.
You can see the old G1. That's a normal screen

00:15:19.190 --> 00:15:24.421
and medium density. The Motorola Xoom is an
extra large screen and medium density.

00:15:24.421 --> 00:15:30.980
So any guesses as to where TV would fit into
this table? What kind of screen? What kind

00:15:30.980 --> 00:15:36.660
of density? That (indicating)? Okay. I'm not
sure what that means.

00:15:36.660 --> 00:15:43.260
&gt;&gt;Christian Kurzke: Socks for "that."
&gt;&gt;Jason Bayer: It turns out that TV is going

00:15:43.260 --> 00:15:49.290
to be large screen and either high or extra
high density depending on the resolution.

00:15:49.290 --> 00:15:55.420
Now, this may seem a little counterintuitive
or maybe surprising, considering how big a

00:15:55.420 --> 00:16:00.579
TV screen is. And when you look at how many
dots per inch a TV has, it's actually quite

00:16:00.579 --> 00:16:06.220
low. But there's actually a good reason for
it. This has a lot do with where users are

00:16:06.220 --> 00:16:12.850
sitting. So on a TV, you think users might
be 5, 10, 15 feet away from the screen compared

00:16:12.850 --> 00:16:17.690
to maybe one foot on a phone or tablet.
So really what matters is not the physical

00:16:17.690 --> 00:16:22.899
density but the perceived density.
So we went ahead and calculated basically

00:16:22.899 --> 00:16:28.430
the angular distance of a pixel, and in this
picture here you can see just on Christian's

00:16:28.430 --> 00:16:34.310
phone, but you could kind of space it out,
you could see that, effectively, the density

00:16:34.310 --> 00:16:41.639
is up to XHDPI on a 1080p resolution. This
is actually a good thing because when you

00:16:41.639 --> 00:16:47.220
are using density independent pixels, the
same object you have on a phone or tablet

00:16:47.220 --> 00:16:51.790
should look roughly the same size on a TV
to a user.

00:16:51.790 --> 00:16:56.519
So this is all for good intentions.
So considering these density values, when

00:16:56.519 --> 00:17:01.800
you do the math, our screen size turns out
to only be large. And when you think about

00:17:01.800 --> 00:17:07.209
it, when you're on a tablet and it's an extra
large screen, there's quite a lot of space,

00:17:07.209 --> 00:17:12.241
so you could put pretty complex UIs in there.
But given that we are a very high density

00:17:12.241 --> 00:17:17.370
screen, the system is going to scale up your
assets more. So effectively, you have less

00:17:17.370 --> 00:17:25.049
screen real estate to deal with.
&gt;&gt;Christian Kurzke: So here is a little bit

00:17:25.049 --> 00:17:29.640
more. For the people of you who were trying
to keep track and keep notes of all the different

00:17:29.640 --> 00:17:35.309
densities and everything, so here is an overview
of the resolutions and the screen sizes that

00:17:35.309 --> 00:17:40.590
we came up for Google TV.
So the two main resolutions that we look at

00:17:40.590 --> 00:17:49.929
is 720p and 1080p. Those are the names of
the two common HD screen sizes or screen resolutions.

00:17:49.929 --> 00:17:58.130
And for those of how think in pixels, it's
basically 1280 by 720 pixels or 1920 by 1080

00:17:58.130 --> 00:18:01.940
pixels.
After working on this team for about a year,

00:18:01.940 --> 00:18:03.789
I dream in those numbers.
So....

00:18:03.789 --> 00:18:12.730
Here is the dpi. So when we decided, we decided,
as Jason said, based on the distance you are

00:18:12.730 --> 00:18:21.390
sitting from a TV. We did the math. We locked
in the 320 dpi's for 1080p resolution, and

00:18:21.390 --> 00:18:26.520
it is much higher. If you walk up close and
actually count the pixels on your TV just

00:18:26.520 --> 00:18:34.549
for fun you will find approximately 50 pixels
per inch on an average 40-inch television.

00:18:34.549 --> 00:18:39.940
But when you view it from a distance, it looks
the same as if there was 320.

00:18:39.940 --> 00:18:46.851
With that, if you know how Android does all
the resolution calculations, you have an effective

00:18:46.851 --> 00:18:55.520
screen size of approximately 960 by 540 display
independent pixels, or DP's.

00:18:55.520 --> 00:19:02.429
And for 720, we made sure that this virtual
resolution or the logical resolution stays

00:19:02.429 --> 00:19:11.150
constant, and we adjusted the dpi's to 213,
you may be familiar with the regular scale.

00:19:11.150 --> 00:19:19.490
Typically, other devices which have a high
density, they have 240. But 213 is close enough,

00:19:19.490 --> 00:19:26.080
and for you as a developer, the advantages
with those two values, you can lay out your

00:19:26.080 --> 00:19:32.100
elements the same for both 720 and 1080p.
So your layouts can stay the same for both

00:19:32.100 --> 00:19:36.250
major screen resolutions.
And the screen size is large. It makes sense.

00:19:36.250 --> 00:19:41.980
Most TVs come in, like, 30 inch, 40 inch,
50 inch. It doesn't matter which Hdpi resolution

00:19:41.980 --> 00:19:50.059
you are running.
So with that, we came to basically to the

00:19:50.059 --> 00:19:54.790
end results that it's a large screen with
XHdpi or Hdpi.

00:19:54.790 --> 00:20:00.280
Okay.
It's too many Xs and Hs.

00:20:00.280 --> 00:20:05.190
So with that, let's talk a little bit about
TV history again.

00:20:05.190 --> 00:20:11.090
So one of the concepts that you may or may
not know from television is the concept of

00:20:11.090 --> 00:20:15.909
overscan and scan lines. So back in the good
old days, when you had electron beams drawing

00:20:15.909 --> 00:20:21.080
the image on your TV at home, the electron
beam would actually go a little bit over the

00:20:21.080 --> 00:20:26.179
edges, because it didn't want black on the
sides so it's safer to overpaint a little

00:20:26.179 --> 00:20:30.980
bit on the edges. So that's where the concept
of overscan came in.

00:20:30.980 --> 00:20:37.250
So effectively, if you look at a large display
with the resolutions that we have talked about,

00:20:37.250 --> 00:20:47.370
we have effectively a physically addressable
screen of 1920 by 1080 pixels. So that's what

00:20:47.370 --> 00:20:53.620
the maximum output can be.
Now, modern TVs, even though they are all

00:20:53.620 --> 00:21:00.410
digital and we all think in digital terms,
there is still the concept of overscan. And

00:21:00.410 --> 00:21:06.020
this may be because of manufacturing tolerances
or maybe for optical reasons, the manufacturers

00:21:06.020 --> 00:21:11.260
may have covered some of the sides with just
the aluminum bezel on your screen or maybe

00:21:11.260 --> 00:21:16.100
there were some manufacturing reasons not
to have all the full pixels.

00:21:16.100 --> 00:21:21.960
What we found is when we just look at real-world
TVs out there in the world, there is about

00:21:21.960 --> 00:21:27.860
-- I want to say one-third of the TVs which
display close to the maximum, and the rest

00:21:27.860 --> 00:21:36.440
displays anything up to 5% or 10% less resolution.
As a user, when you set up Google TV, you

00:21:36.440 --> 00:21:43.220
calibrate the Google TV to your visual area.
After this, the set-top box, which since we

00:21:43.220 --> 00:21:47.260
don't know which TV we are connecting to,
it's a stand-alone set-top box, but after

00:21:47.260 --> 00:21:53.450
the calibration, we know what the visible
area is that you can expect. And Android,

00:21:53.450 --> 00:21:58.340
after this, will do the math for you and it
will make sure that if you, for example, request

00:21:58.340 --> 00:22:04.919
a full-screen Canvas, it will be only the
visible area. So you don't have to worry about

00:22:04.919 --> 00:22:10.210
things getting clipped off on the edges. But
as a developer, you have to be cautious to

00:22:10.210 --> 00:22:16.940
not make implicit assumptions about the resolution.
You can, when you do a full-screen Canvas,

00:22:16.940 --> 00:22:22.240
you can get a resulting Canvas that may be
anywhere between the maximum resolution of

00:22:22.240 --> 00:22:29.970
1920 down to something like 10%, 12% less.
So the worst-case scenario that we accounted

00:22:29.970 --> 00:22:35.510
for is actually the numbers here. It's 1692
by 952.

00:22:35.510 --> 00:22:41.529
So as a developer, when you write your app
and you run it on Google TVs out in the world,

00:22:41.529 --> 00:22:44.409
just be prepared that those values sometimes
may change.

00:22:44.409 --> 00:22:47.980
&gt;&gt;Jason Bayer: I don't think you really need
to know or understand about this overscan

00:22:47.980 --> 00:22:54.060
history, but just don't assume that 1080p
on Google TV means you are going to get 1080

00:22:54.060 --> 00:22:59.289
pixels. It may be somewhat less but as long
as you are programming for not caring about

00:22:59.289 --> 00:23:02.990
resolution, then you should be good.
&gt;&gt;Christian Kurzke: And when you write your

00:23:02.990 --> 00:23:08.410
app, try it out on different screen sizes.
So either calibrate your TV or we'll show

00:23:08.410 --> 00:23:12.789
you later with emulators.
So the way you get around all this and what

00:23:12.789 --> 00:23:17.270
it means for you as an Android developer,
it's already good coding practices to not

00:23:17.270 --> 00:23:23.950
have absolute layouts, to not assume coordinate
sizes. So just use the regular Android mechanisms.

00:23:23.950 --> 00:23:31.110
Things like relative layouts, linear layouts.
You can float elements on the screen, or you

00:23:31.110 --> 00:23:35.550
can stretch certain UI elements. Whatever
makes sense for your UI.

00:23:35.550 --> 00:23:40.560
&gt;&gt;Jason Bayer: And 9 patches are your friends.
&gt;&gt;Christian Kurzke: Oh, yeah. 9 patches, they

00:23:40.560 --> 00:23:45.490
have been around for such a long time, and
we think that people would really be excited

00:23:45.490 --> 00:23:51.950
about them, but unfortunately, very often
people still use hard coded just image buttons

00:23:51.950 --> 00:23:58.309
or anything. So if you are not already using
9 patches, that's a great way to optimize

00:23:58.309 --> 00:24:02.850
your application.
&gt;&gt;Jason Bayer: One other thing about the screen.

00:24:02.850 --> 00:24:07.610
Maybe it's obvious, but you can't expect users
to reorient their screen from, like, landscape

00:24:07.610 --> 00:24:09.600
to portrait when it's a TV.
[ Laughter ]

00:24:09.600 --> 00:24:15.580
&gt;&gt;Jason Bayer: Given this, if you have an
activity that is basically locking into portrait

00:24:15.580 --> 00:24:21.890
mode or at runtime you are trying to set request
an orientation to portrait, these really won't

00:24:21.890 --> 00:24:26.649
look good on a TV.
So what you should do is just ensure that,

00:24:26.649 --> 00:24:31.220
first of all, your app can function in landscape
environments and you should make sure it looks

00:24:31.220 --> 00:24:38.149
good, too.
So just to recap. We think you can make a

00:24:38.149 --> 00:24:44.679
really awesome looking Android app on a TV
screen if you understand what makes TV different.

00:24:44.679 --> 00:24:48.240
Thinking about the input devices, we don't
have a touch screen but you should optimize

00:24:48.240 --> 00:24:54.000
for D-Pad. And looking at the screen size
and density, you could provide different assets

00:24:54.000 --> 00:25:00.870
and layouts and so on considering TV's attributes.
So given this, we think it really shouldn't

00:25:00.870 --> 00:25:07.960
be a lot of work to take your app, your existing
app, and make it look good on TV.

00:25:07.960 --> 00:25:15.029
&gt;&gt;Christian Kurzke: Okay. So now let's look
at a few examples from the real world.

00:25:15.029 --> 00:25:23.350
So over the last couple months, if you have
used Google TV with the Pandora application,

00:25:23.350 --> 00:25:27.600
I just want to highlight how the Pandora application
came about.

00:25:27.600 --> 00:25:33.460
So if you look here, this is the Pandora mobile
application. I took a picture it have running

00:25:33.460 --> 00:25:40.750
in landscape mode and it's a very clean layout.
It has the cover art, it has the artist information

00:25:40.750 --> 00:25:46.690
and it has a few buttons on the bottom. You
touch them for pause, forward, and so on.

00:25:46.690 --> 00:25:53.720
So what the Pandora team did is they actually
reused a lot of their layouts, a lot of their

00:25:53.720 --> 00:26:00.440
-- I want to say branding, a lot of their
code also to create the Google TV application

00:26:00.440 --> 00:26:05.630
that's preloaded on your Google TV today.
Obviously, it's running on Google TV in a

00:26:05.630 --> 00:26:11.390
higher resolution, so they used higher album
cover art, but everything else is pretty much

00:26:11.390 --> 00:26:17.390
the same. The only other difference is what
they added, they added support for the keypad.

00:26:17.390 --> 00:26:22.460
So when you run your app, you can, on your
remote control, just use the pause, the forward,

00:26:22.460 --> 00:26:27.659
the rewind button, and it makes it much easier
than trying to hit those buttons with like

00:26:27.659 --> 00:26:36.610
an on-screen cursor.
Another example is the CNBC application. So

00:26:36.610 --> 00:26:43.970
when this application was started, the CNBC
team looked at their mobile app, and we were

00:26:43.970 --> 00:26:48.100
brainstorming how can we get the mobile app
to a great TV experience.

00:26:48.100 --> 00:26:54.890
So here is the mobile app. It's just tracking
a portfolio of stocks. Gives you the gains,

00:26:54.890 --> 00:26:59.450
losses.
And we also looked at the Web site, and the

00:26:59.450 --> 00:27:04.940
Web site has a lot of in-depth information,
but we feel that on television, people want

00:27:04.940 --> 00:27:07.830
something a little bit more interactive, a
little bit more visual.

00:27:07.830 --> 00:27:12.630
If you really want to read the latest earnings
report, you most likely will do this either

00:27:12.630 --> 00:27:17.330
on your desktop or if you want do it on TV,
you have a full Chrome browser. You can just

00:27:17.330 --> 00:27:23.490
go to the Web site.
So the CNBC team, they decided to take, again,

00:27:23.490 --> 00:27:30.789
large parts of their mobile application. Virtually
most of the server communication and the application

00:27:30.789 --> 00:27:37.210
logic stayed the same. Since it's all in Android
on mobile already, they could just literally

00:27:37.210 --> 00:27:43.299
use the same code. And on TV, they added a
more visual interface and they added actually

00:27:43.299 --> 00:27:48.840
video clips. So now not only do you get the
news of your stocks, not only do you get the

00:27:48.840 --> 00:27:52.970
daily earnings or losses, but you get video
clips.

00:27:52.970 --> 00:27:57.140
So if you are following a few stocks you are
interested in, if you see the little video

00:27:57.140 --> 00:28:03.429
symbol, you can just click on it and on Google
TV you will get a video clip of the latest

00:28:03.429 --> 00:28:09.590
news report, analyst opinion about the stock
that you were interested in.

00:28:09.590 --> 00:28:18.289
So now with that, how can you enable your
app to actually be available on Google TV?

00:28:18.289 --> 00:28:21.370
And I think the first question you have to
ask yourself is do you really want to make

00:28:21.370 --> 00:28:28.850
money? And I think most of you here will.
If you don't want to make money, let us know.

00:28:28.850 --> 00:28:32.600
All right.
So with that, to make money you need a market.

00:28:32.600 --> 00:28:33.890
So --
&gt;&gt;Jason Bayer: Right.

00:28:33.890 --> 00:28:35.990
&gt;&gt;Christian Kurzke: Jason, talk about the
market.

00:28:35.990 --> 00:28:40.570
&gt;&gt;Jason Bayer: So this is a screen shot of
market running on Google TV. It looks really

00:28:40.570 --> 00:28:45.279
beautiful, it looks really nice. Despite the
fact that it looks a little bit different

00:28:45.279 --> 00:28:51.029
from Android Market on your tablet, we really
shouldn't think of this as the TV market.

00:28:51.029 --> 00:28:55.640
This is really Android Market. This just happens
to be on TV.

00:28:55.640 --> 00:29:01.970
So all the developer tools, the publishing
system, analytics, that's all the same and

00:29:01.970 --> 00:29:08.360
consistent with what you already know.
Before you put it on Google TV, you probably

00:29:08.360 --> 00:29:14.620
want to make sure everything works well.
Well, what you could do right now is fire

00:29:14.620 --> 00:29:19.370
up the Honeycomb emulator. There may be some
performance issues, but you can start the

00:29:19.370 --> 00:29:26.510
Honeycomb emulator, set some of the attributes
to be for Google TV-like environments. So

00:29:26.510 --> 00:29:30.460
like the TV resolution, the density. You are
going to have to change the VM heap a little

00:29:30.460 --> 00:29:35.669
bit. But once you do this you can get pretty
much most of the way there. So you can see

00:29:35.669 --> 00:29:40.809
how your app would look if it was on a Google
TV. You can try out the D-Pad navigation.

00:29:40.809 --> 00:29:43.820
You can do all the optimizations we had talked
about already today.

00:29:43.820 --> 00:29:51.090
What's going to come soon is we are going
to release the files you need to run a Google

00:29:51.090 --> 00:29:56.360
TV in an emulator. The only real difference
with this compared to what you can do today

00:29:56.360 --> 00:30:01.360
is any of the nuanced behavioral differences
that we are introducing. There are some skinning

00:30:01.360 --> 00:30:05.810
and styles that are different, and there are
some additional APIs that we are going to

00:30:05.810 --> 00:30:07.900
be telling you about.
&gt;&gt;Christian Kurzke: Things like the action

00:30:07.900 --> 00:30:12.190
bar, for example. You can really see what
your app looks like with the new side action

00:30:12.190 --> 00:30:17.340
bar, and it's a lot more accurate for TV.
&gt;&gt;Jason Bayer: Right. So right now you can

00:30:17.340 --> 00:30:22.561
already get started and do most of your work
already, and pretty soon we will have a TV

00:30:22.561 --> 00:30:26.809
emulator for you.
And then of course later this summer, when

00:30:26.809 --> 00:30:33.000
we update all of the existing and new Google
TV devices with Honeycomb and ADB, then you

00:30:33.000 --> 00:30:37.990
can run your app on the physical device.
And actually, if you don't want to wait that

00:30:37.990 --> 00:30:43.370
long, we do have a special program for our
I/O attendants. So we have this thing called

00:30:43.370 --> 00:30:48.600
the fish tank program. These are our development
boxes that we are using internally, and we

00:30:48.600 --> 00:30:53.419
are going to be giving away some -- if you
stop by our Office Hours afterwards, it's

00:30:53.419 --> 00:30:57.880
just right over here to the left, you can
pick up a flier and we will have more information

00:30:57.880 --> 00:31:00.360
on how you can sign up and get one of these
boxes.

00:31:00.360 --> 00:31:03.620
&gt;&gt;Christian Kurzke: Yeah, they didn't let
me throw them from the stage.

00:31:03.620 --> 00:31:06.100
[ Laughter ]
&gt;&gt;Christian Kurzke: Our Office Hours are right

00:31:06.100 --> 00:31:11.810
across the hallway here if you want to stop
by, you can pick up a flier and sign up.

00:31:11.810 --> 00:31:16.240
&gt;&gt;Jason Bayer: Okay.
So let's say that you do want to optimize

00:31:16.240 --> 00:31:23.260
your app for TV. What are the different mechanisms
you can use to accomplish that?

00:31:23.260 --> 00:31:28.510
Well, if you want to go and optimize your
navigation, your look and feel based on our

00:31:28.510 --> 00:31:34.330
screen sizes and our lack of touch, then what
you really should be using is the resources

00:31:34.330 --> 00:31:40.750
directories. So you can specify based on what
it is you are optimizing for. Like, for example,

00:31:40.750 --> 00:31:45.490
large screen, high density, and no touch,
or maybe you have extra high density, no touch

00:31:45.490 --> 00:31:49.490
and landscape.
You could place different assets and layouts

00:31:49.490 --> 00:31:54.059
in the different resource directories.
The nice thing about this is once you make

00:31:54.059 --> 00:31:59.639
these changes for Google TV, these will affect
all the other devices that maybe aren't Google

00:31:59.639 --> 00:32:05.340
TVs but have the same attributes.
So really, you fix it this one time and your

00:32:05.340 --> 00:32:09.880
app will look good across lots of different
devices.

00:32:09.880 --> 00:32:15.820
Another thing you could do is check for at
run-time presence of Google TV. So this is

00:32:15.820 --> 00:32:20.100
really a special case so if it's Google TV,
do one thing; otherwise, do something else.

00:32:20.100 --> 00:32:24.919
Obviously it's special treatment, but if that's
what you want to do, you can go ahead and

00:32:24.919 --> 00:32:28.789
do that.
The way do you that is we have a special feature

00:32:28.789 --> 00:32:34.490
in our system which is really just saying
this is Google TV. You could check at runtime

00:32:34.490 --> 00:32:39.240
through the package manager. You could also
put this tag in your manifest. And of course

00:32:39.240 --> 00:32:44.610
if you say that Google TV is required, then
your app will only show up on Google TV devices

00:32:44.610 --> 00:32:52.809
and not on phones or tablets.
And finally, if you use the Google TV library

00:32:52.809 --> 00:32:57.960
when it's available, then you could go ahead
and put this uses library tag in the manifest.

00:32:57.960 --> 00:33:03.730
If do you this, then it will load up the Google
TV library which has some extra functionality.

00:33:03.730 --> 00:33:09.039
And again, if you say it's required, then
your app will only work on Google TVs, although

00:33:09.039 --> 00:33:15.960
you can say it is not required and then it
will still work on phones and tablets.

00:33:15.960 --> 00:33:21.779
A little bit more about the features. Google
TV has different hardware features from maybe

00:33:21.779 --> 00:33:26.530
what you are used to on phones or tablets.
This is a list of the features that our current

00:33:26.530 --> 00:33:30.429
devices support.
We have -- Because we have this mouse, we

00:33:30.429 --> 00:33:35.010
have what we calm emulated touch screen. It's
not a true touch screen because you are not

00:33:35.010 --> 00:33:40.950
touching it but we can still send touch events.
So the feature itself is called fake touch.

00:33:40.950 --> 00:33:45.460
We also have basic location and network location
support.

00:33:45.460 --> 00:33:51.620
There is Wi-Fi on all of the boxes, and then
there is this special Google TV feature.

00:33:51.620 --> 00:33:56.549
One thing to keep in mind is if you are using
permissions and you are requesting them, some

00:33:56.549 --> 00:34:02.909
of them do implicitly require hardware features.
You could check the Android documentation

00:34:02.909 --> 00:34:09.490
for the complete list, but just to be safe,
you should be explicit about which hardware

00:34:09.490 --> 00:34:14.210
features you require and which ones you use
but you doesn't necessarily require.

00:34:14.210 --> 00:34:20.410
So if you use telephony or a camera in your
application but you don't require it, you

00:34:20.410 --> 00:34:24.530
can still show up on Google TV. You just have
to put in the line in your manifest saying

00:34:24.530 --> 00:34:29.170
you use the camera but you don't require it.
&gt;&gt;Christian Kurzke: I just want to point out

00:34:29.170 --> 00:34:34.780
since we have all the really great Android
developers here, keep in mind, the whole features

00:34:34.780 --> 00:34:41.960
aspect, it's really important across all Android
devices, not just Google TV. We really want

00:34:41.960 --> 00:34:50.370
your app to run on as many devices as possible.
So if your app, for example, uses, say, camera

00:34:50.370 --> 00:34:56.650
autofocus but you can totally live without
any camera at all, maybe you just have a fall-back

00:34:56.650 --> 00:35:02.550
and you load your photos from an SD card or
something, don't require the feature. Make

00:35:02.550 --> 00:35:07.840
it required false. And then check at run time.
And at run time, depending on which device

00:35:07.840 --> 00:35:12.130
you are running on, you can make a decision
and you can either show a fall-back or you

00:35:12.130 --> 00:35:17.650
can enable the feature as intended. But this
will help you to get a broad reach.

00:35:17.650 --> 00:35:21.880
And we want your app to run across all devices,
including Google TV.

00:35:21.880 --> 00:35:28.770
&gt;&gt;Jason Bayer: A little bit more about the
touch screen capability.

00:35:28.770 --> 00:35:34.690
So if you do nothing in your manifest, so
you don't specify anything at all about touch

00:35:34.690 --> 00:35:40.130
screen, Market's going to go ahead and assume
that you need a real touch screen. This is

00:35:40.130 --> 00:35:44.800
for some backwards compatibility reasons.
So what this means is, if you do nothing and

00:35:44.800 --> 00:35:48.151
your manifest doesn't say anything, it won't
show up on Google TV.

00:35:48.151 --> 00:35:53.390
In order to show up, you're going to have
to make a change to this.

00:35:53.390 --> 00:35:58.040
One way to change it is, being if your app
needs some sort of touch screen but you determine

00:35:58.040 --> 00:36:02.910
you're kind of okay with this fake version,
you know, it really depends on your app, if

00:36:02.910 --> 00:36:06.780
you need someone actually pressing the screen
or if you're okay with this mouse or other

00:36:06.780 --> 00:36:10.750
kind of fake touch.
If this is something that you're okay with,

00:36:10.750 --> 00:36:15.540
then you just have to specify this in your
manifest, basically saying you don't require

00:36:15.540 --> 00:36:21.250
a true touch screen, but you do require some
kind of fake touch. When you do this, actually,

00:36:21.250 --> 00:36:26.420
all of the real touch screens will still be
considered fake touch. So when you do this,

00:36:26.420 --> 00:36:30.170
basically, your app will still show up on
phones. It will still show up on tablets.

00:36:30.170 --> 00:36:37.150
It will also still show up on Google TV.
The other option is if your app is fully D-Pad

00:36:37.150 --> 00:36:42.871
friendly. So maybe you still support touch,
but someone can navigate your app and do everything

00:36:42.871 --> 00:36:48.250
they need to just using a D-Pad. If this is
the case for your app, you can just simply

00:36:48.250 --> 00:36:52.790
say you don't require a touch screen, and
then your app will show up on all the devices,

00:36:52.790 --> 00:36:56.970
no matter what kind of touch screen, fake
touch, or no touch. So this is really the

00:36:56.970 --> 00:37:05.850
simplest thing if your app is D-Pad friendly.
&gt;&gt;Christian Kurzke: So with that, one of the

00:37:05.850 --> 00:37:12.320
other things to keep in mind is a few of the
features that if your app requires will actually

00:37:12.320 --> 00:37:19.700
not make it show up on Google TV.
So as we announced before, currently, we will

00:37:19.700 --> 00:37:26.140
not support native applications, native meaning,
you know, having native code libraries in

00:37:26.140 --> 00:37:31.740
your app. So the NDK will not be supported.
And, initially, we also will not support things

00:37:31.740 --> 00:37:39.050
like cameras, microphones, a lot of the sensors,
like a barometer in your TV probably makes

00:37:39.050 --> 00:37:45.740
less sense than in a mobile device.
So this is for now, just to get you started.

00:37:45.740 --> 00:37:50.890
We are working on enabling features as they
make sense over the future. So the team is

00:37:50.890 --> 00:37:55.880
really focused on getting more support for
a lot of those features and also working with

00:37:55.880 --> 00:38:01.660
the OEMs, whatever they can come up with.
But, you know, keep in mind, probably not

00:38:01.660 --> 00:38:02.660
the accelerometer.
[ Laughter ]

00:38:02.660 --> 00:38:07.860
&gt;&gt;Christian Kurzke: If your TV starts moving
and you're having an earthquake, then sorry,

00:38:07.860 --> 00:38:15.100
no apps for that.
So here's just a very simple snippet. And

00:38:15.100 --> 00:38:20.280
I think that's what a lot of people are interested.
If you want your app to show up on the Google

00:38:20.280 --> 00:38:26.151
TV market, one of the easiest ways is just
make sure, for example, you have touch screen

00:38:26.151 --> 00:38:33.170
set to false. For location, we do support
the basic location. When the user sets up

00:38:33.170 --> 00:38:38.371
the Google TV, they typically enter their
ZIP code. So when you write on the application

00:38:38.371 --> 00:38:43.800
something like a weather widget or anything
that needs course location, you're okay. But

00:38:43.800 --> 00:38:50.150
we will not have a fine-grained GPS location.
The other thing we obviously will not have

00:38:50.150 --> 00:38:56.820
is telephony. So if you set those to false,
your application -- and you don't require

00:38:56.820 --> 00:39:01.700
any of the other features that are pretty
obvious, then your application will run on

00:39:01.700 --> 00:39:04.510
-- or show up on Google TV market and run
on Google TV.

00:39:04.510 --> 00:39:10.320
So now for those two of you earlier who don't
want to make a lot of money and actually don't

00:39:10.320 --> 00:39:17.150
want to be on the Google TV market. And there
may also be other more logical reasons for

00:39:17.150 --> 00:39:21.760
this. So say you are a software developer,
you have an incredibly successful app that's

00:39:21.760 --> 00:39:27.320
in the market and you get reports from people
once market launches that, oh, my God, the

00:39:27.320 --> 00:39:32.430
app breaks on Google TV.
We actually would really like to have only

00:39:32.430 --> 00:39:37.320
awesome apps and a lot of awesome apps on
Google TV. We would love you to actually fix

00:39:37.320 --> 00:39:41.840
the app. If you say, "Oh, my God, I don't
have time right now this week. There is finals.

00:39:41.840 --> 00:39:43.790
I can't fix the app." Whatever.
[ Laughter ]

00:39:43.790 --> 00:39:49.360
&gt;&gt;Christian Kurzke: Then you can opt out very
easily. Just want to re-emphasize, as Jason

00:39:49.360 --> 00:39:55.080
said earlier, by default, we assume that your
app needs touch screen. If you set the "requires

00:39:55.080 --> 00:40:01.530
touch screen" to true, then you will not show
up on the market for Google TV today. So that's

00:40:01.530 --> 00:40:08.610
sort of a stopgap if you really don't want
to show up for a while.

00:40:08.610 --> 00:40:13.580
So let's check out a few other cool features.
So now you've learned how you can optimize

00:40:13.580 --> 00:40:19.670
an app, how you can get it ready for the market.
And Jason's going to talk about a couple extras

00:40:19.670 --> 00:40:23.950
that we have in store for you.
&gt;&gt;Jason Bayer: Okay. So first, the Google

00:40:23.950 --> 00:40:27.831
TV remote application.
As you might know, this is an app that we

00:40:27.831 --> 00:40:34.030
released for iPhone and Android phones that
you can pair with and then control a Google

00:40:34.030 --> 00:40:39.830
TV device. This is available right now. It
works on the current version of Google TV.

00:40:39.830 --> 00:40:43.700
We've gotten a lot of feedback from users.
Some people really love this. But we know

00:40:43.700 --> 00:40:47.410
there's a lot more that can be done with remote
applications.

00:40:47.410 --> 00:40:52.280
So what are we going to do about this?
Well, as of today, we're going to go and release

00:40:52.280 --> 00:40:55.599
the source code for this application under
the Apache 2 license.

00:40:55.599 --> 00:41:03.860
[ Applause ]
&gt;&gt;Jason Bayer: So you can go to this link

00:41:03.860 --> 00:41:09.470
today, right now, and you can see the source
code for this app and you can change it as

00:41:09.470 --> 00:41:13.830
you would like.
When we look a little bit underneath to this,

00:41:13.830 --> 00:41:20.120
there's two different parts to this. One is
actually doing the pairing between the remote

00:41:20.120 --> 00:41:25.600
clients and the Google TV. And then once you
are paired, you can send key events, mouse

00:41:25.600 --> 00:41:31.300
events, and URIs to the connected TV. So there's
kind of two subprojects to that. But these

00:41:31.300 --> 00:41:34.500
are also being released under the Apache 2.0
license.

00:41:34.500 --> 00:41:38.710
&gt;&gt;Christian Kurzke: If you want to see what
you can do with all of this, if you go over

00:41:38.710 --> 00:41:44.890
to the Google TV sandbox just in the main
area, we have a couple TVs. And one of the

00:41:44.890 --> 00:41:51.830
companies, Buddy TV, they actually use this
protocol to show a new version of the remote

00:41:51.830 --> 00:41:57.900
control. They have integrated their mobile
app with the TV app using some parts of this

00:41:57.900 --> 00:41:59.520
protocol.
&gt;&gt;Jason Bayer: Actually, I'm not sure they're

00:41:59.520 --> 00:42:04.580
using this protocol. But it's still a really
cool application of remote and TV interaction.

00:42:04.580 --> 00:42:11.140
&gt;&gt;Christian Kurzke: Okay. They're using I.P.
&gt;&gt;Jason Bayer: Okay.

00:42:11.140 --> 00:42:13.740
So some more capabilities that we're opening
up.

00:42:13.740 --> 00:42:19.020
So one of the things the user does when they
set up their Google TV, either through Dish

00:42:19.020 --> 00:42:24.370
in two-way pairing, or they manually set which
provider they have, but we know about all

00:42:24.370 --> 00:42:29.342
the channel listings that the user has for
TV channels. So what we're going to do at

00:42:29.342 --> 00:42:34.970
first is have a content provider where in
your app, you can go and see what channels

00:42:34.970 --> 00:42:39.930
are available to the user. So we'll reveal
some basic information about each channel.

00:42:39.930 --> 00:42:46.140
But we're also going to include this URI.
So with the URI from your app, you can go

00:42:46.140 --> 00:42:51.700
and view these URIs. And then the TV player
will pick this up and tune to that channel.

00:42:51.700 --> 00:42:56.340
So with this, you can basically see all the
channels the user gets, and you can take the

00:42:56.340 --> 00:43:02.400
user into TV at this particular channel.
We know there's a lot of interest and a lot

00:43:02.400 --> 00:43:07.260
of other cool and interesting things we can
do with the TV feed. We're working on that.

00:43:07.260 --> 00:43:11.410
We don't have anything more to announce right
now. But in the future, we plan to expose

00:43:11.410 --> 00:43:14.420
a lot more TV functionality into an add-on
library.

00:43:14.420 --> 00:43:25.090
&gt;&gt;Christian Kurzke: So to wrap up, let's just
look at what you can get started with today.

00:43:25.090 --> 00:43:31.970
So we've shown you earlier, if you want to
emulate your application running on a TV-like

00:43:31.970 --> 00:43:36.670
screen, you can do this right now using the
Honeycomb emulator that's just part of the

00:43:36.670 --> 00:43:44.940
standard Android SDK.
You can also, with the open sourced I.P. remote

00:43:44.940 --> 00:43:50.310
application, you can also create your own
mobile app, and you can talk to all the Google

00:43:50.310 --> 00:43:55.971
TVs that are out in the field today. So the
protocol is already on the current devices,

00:43:55.971 --> 00:44:01.280
so you don't have to wait for the next generation
to roll out.

00:44:01.280 --> 00:44:06.990
Very soon, you will be able to emulate a Google
TV system on your desktop. And you will be

00:44:06.990 --> 00:44:15.630
able to try out some of the new UI features.
You can see how your app will run on the system.

00:44:15.630 --> 00:44:22.550
And later this summer, we will, as we announced,
push out the new version based on Honeycomb

00:44:22.550 --> 00:44:28.530
to the devices. And you will have ADB on the
devices for developers. And, of course, you

00:44:28.530 --> 00:44:34.780
will have Market available as well.
And as always, the team is really focused

00:44:34.780 --> 00:44:42.310
and is working hard to get new TV APIs out
to you guys. So stay tuned. There is going

00:44:42.310 --> 00:44:45.920
to be updates as we go along.
&gt;&gt;Jason Bayer: And one more thing. I think

00:44:45.920 --> 00:44:50.950
we're all really excited that you came and
you're interested in developing for TV. And

00:44:50.950 --> 00:44:55.610
this is a really exciting time, because we're
going to be enabling Market on TV for the

00:44:55.610 --> 00:44:59.180
first time.
So we're really hopeful that you can help

00:44:59.180 --> 00:45:05.880
this platform and we can help you and we can
get your help in really making your apps work

00:45:05.880 --> 00:45:08.620
on TV. And I think there's a lot of really
awesome things we can do here.

00:45:08.620 --> 00:45:13.430
&gt;&gt;Christian Kurzke: So, yeah, actually, the
QR code here, if you scan that, it's going

00:45:13.430 --> 00:45:21.550
to take you to our developer site. It's google.com/TV.
And as I was walking up on the stage here,

00:45:21.550 --> 00:45:26.920
I was promised that we will push it live somewhere
today. So if you're lucky, you may actually

00:45:26.920 --> 00:45:31.670
already have it now. But within the next couple
hours. We already have the information for

00:45:31.670 --> 00:45:36.990
Web developers. And so we will also put up
documentation for Android developers.

00:45:36.990 --> 00:45:42.440
So you can actually get started and you didn't
have to take notes of all the cryptic numbers.

00:45:42.440 --> 00:45:49.600
So that's all going to be on the documentation.
Also, as the other Android developers, we

00:45:49.600 --> 00:45:54.580
will be on stack overflow. So if you run into
problems, you run into questions as you go

00:45:54.580 --> 00:46:00.850
along and port your applications on Google
TV, you can find us on stack overflow.

00:46:00.850 --> 00:46:06.730
I am really excited to have so many developers
who are going to create the next killer apps

00:46:06.730 --> 00:46:12.610
for Google TV.
So with that, we can open up for questions.

00:46:12.610 --> 00:46:18.000
If you went to the moderator page on the URL,
we can answer that. And we have two microphones

00:46:18.000 --> 00:46:20.440
here in the room.
So I'm just going to pull up the moderator.

00:46:20.440 --> 00:46:29.600
&gt;&gt;Jason Bayer: Okay.
[ Applause ]

00:46:29.600 --> 00:46:38.570
&gt;&gt;Christian Kurzke: All right. How about let's
start with a live question from the audience.

00:46:38.570 --> 00:46:42.950
&gt;&gt;&gt; I'm a non-U.S. developer. And I was wondering,
is there a program for international developers

00:46:42.950 --> 00:46:46.990
who want to add Google TV support to their
applications or is Google looking to only

00:46:46.990 --> 00:46:53.500
support U.S. developers at the moment?
&gt;&gt;Christian Kurzke: So the -- currently, the

00:46:53.500 --> 00:47:00.160
program is very much focused on bringing the
retail devices to U.S. users. Once the Android

00:47:00.160 --> 00:47:04.270
Market is open, developers from all over the
world can theoretically publish applications

00:47:04.270 --> 00:47:08.310
that are available on Google TV devices.
&gt;&gt;&gt; Sure. But there are problems with the

00:47:08.310 --> 00:47:12.500
emulator as I'm sure most Android developers
will tell you, specifically, with Honeycomb.

00:47:12.500 --> 00:47:16.190
So getting hold of the hardware is pretty
important to international developers who

00:47:16.190 --> 00:47:20.470
want to be add Google TV support. So is there
going to be a mechanism or a way we can do

00:47:20.470 --> 00:47:25.250
it or are we going to kind of be locked out?
&gt;&gt;Christian Kurzke: So for right now, we don't

00:47:25.250 --> 00:47:30.360
have a good way -- I would encourage you to
talk with some of our business guys over in

00:47:30.360 --> 00:47:35.210
the office hours on the sandbox.
But the Fish Tank program that we announced

00:47:35.210 --> 00:47:37.850
is only for U.S.-based developers right now.
&gt;&gt;&gt; Okay.

00:47:37.850 --> 00:47:43.570
&gt;&gt;Jason Bayer: Should we take one from moderator.
So the question is, can notifications be shown

00:47:43.570 --> 00:47:49.510
automatically on top of live TV?
Well, I think the answer is yes, they can.

00:47:49.510 --> 00:47:56.030
&gt;&gt;Christian Kurzke: So just using the regular
Android modifications API, they will show

00:47:56.030 --> 00:48:00.510
up on top of the live television.
So from the second microphone back there.

00:48:00.510 --> 00:48:06.131
&gt;&gt;&gt; You talked about the list of channels
that you're going to get, I mean, have a whole

00:48:06.131 --> 00:48:09.690
list of URIs that allows you to switch to
a particular channel.

00:48:09.690 --> 00:48:14.200
Is there going to be a public list of all
of those URIs somewhere so that we can do

00:48:14.200 --> 00:48:17.050
mappings our self?
&gt;&gt;Jason Bayer: That's definitely something

00:48:17.050 --> 00:48:22.020
we are going to work on. But I don't think
that will be ready in summertime. But stay

00:48:22.020 --> 00:48:23.460
tuned.
&gt;&gt;&gt; Okay.

00:48:23.460 --> 00:48:28.500
&gt;&gt;Christian Kurzke: Let's take another live
question from the audience.

00:48:28.500 --> 00:48:36.150
&gt;&gt;&gt; With the Market release, will there be
support for AdSense or AdMob, any ad monetization

00:48:36.150 --> 00:48:39.060
mechanisms?
&gt;&gt;Jason Bayer: Well, we still are Android,

00:48:39.060 --> 00:48:44.240
and we're a compatible Android device. So
I would expect all the Android APIs that we

00:48:44.240 --> 00:48:50.590
use to still work. As for AdMob in particular,
I'm not sure. I haven't actually seen how

00:48:50.590 --> 00:48:52.940
it looks.
&gt;&gt;Christian Kurzke: So I have been told that

00:48:52.940 --> 00:48:59.380
since AdMob is based basically on just regular
Android, it will work on those applications.

00:48:59.380 --> 00:49:04.590
Let's take an online question.
So the current Google TV has Chrome browser.

00:49:04.590 --> 00:49:10.570
Honeycomb does not. What will the 3.1 update
mean for Chrome browser on Google TV?

00:49:10.570 --> 00:49:15.280
Another excellent question.
So don't worry, all of our Web developers.

00:49:15.280 --> 00:49:21.630
Google Chrome will be on the 3.1 release.
So you will still have the full Web browsing

00:49:21.630 --> 00:49:27.610
experience on the device as well.
How about a live question, second mike.

00:49:27.610 --> 00:49:31.450
&gt;&gt;&gt; First I want to say I'm grateful for being
part of the device seeding program for the

00:49:31.450 --> 00:49:37.820
review. And I don't want to sound ungrateful,
but I found it turned out to be completely

00:49:37.820 --> 00:49:41.920
useless for me on a daily basis because it
doesn't pass through 3D. And it seemed really

00:49:41.920 --> 00:49:46.100
odd that they would choose to do that in such
a modern, high-tech device.

00:49:46.100 --> 00:49:50.620
Is there going to be any push from Google
to make sure that vendors are supporting that

00:49:50.620 --> 00:49:56.240
so that it doesn't get pushed out where other
technology is maybe taking priority?

00:49:56.240 --> 00:50:02.810
&gt;&gt;Jason Bayer: We're definitely working with
OEMs to try to -- well, basically have more

00:50:02.810 --> 00:50:07.490
variety of hardware. So there is both more
advanced hardware and there's also cheaper

00:50:07.490 --> 00:50:10.450
hardware.
So we are working closely with all of our

00:50:10.450 --> 00:50:14.620
partners to try to have, basically, a better
variety of hardware choices.

00:50:14.620 --> 00:50:19.410
&gt;&gt;&gt; Is that something that's being talked
about? I mean, a point that someone's aware

00:50:19.410 --> 00:50:22.740
of?
&gt;&gt;Jason Bayer: I believe so.

00:50:22.740 --> 00:50:27.410
&gt;&gt;Christian Kurzke: I will bring this back
to our OEM group, who is working. I can't

00:50:27.410 --> 00:50:32.250
make any promises. But I'll definitely let
them know that this is a frequent request.

00:50:32.250 --> 00:50:39.570
&gt;&gt;&gt; Thank you very much.
&gt;&gt;&gt; (off mike).

00:50:39.570 --> 00:50:41.450
&gt;&gt;&gt; Great. Glad to hear that.
&gt;&gt;Christian Kurzke: So just for the audience,

00:50:41.450 --> 00:50:46.210
so our PM just said we're working on 3D support.
It's on the road map. It's coming.

00:50:46.210 --> 00:50:53.970
Gentleman from the first --
&gt;&gt;&gt; I work for the mobile phone company, and

00:50:53.970 --> 00:51:11.369
I just want to ask you about if any risk to
transfer the mobile phone to TV. In coding

00:51:11.369 --> 00:51:16.360
-- in (inaudible).
&gt;&gt;Christian Kurzke: So the question was if

00:51:16.360 --> 00:51:20.270
you can port your existing Android application
to Google TV?

00:51:20.270 --> 00:51:22.120
&gt;&gt;&gt; Yeah.
&gt;&gt;Christian Kurzke: Yes.

00:51:22.120 --> 00:51:27.150
&gt;&gt;&gt; It would be the hardware and software.
&gt;&gt;Christian Kurzke: So including -- So for

00:51:27.150 --> 00:51:29.960
-- you mean for video decoders, there is support
--

00:51:29.960 --> 00:51:34.030
&gt;&gt;&gt; No, no.
&gt;&gt;Christian Kurzke: Oh, okay.

00:51:34.030 --> 00:51:37.340
&gt;&gt;&gt; (inaudible).
&gt;&gt;Christian Kurzke: Okay. Maybe we should

00:51:37.340 --> 00:51:45.340
talk about it later. I think definitely it's
both a compatible Android platform, so it

00:51:45.340 --> 00:51:50.030
should be fairly easy to port applications.
So, yeah, you can find me -- I'll be over

00:51:50.030 --> 00:51:52.820
at the office hours later, also for everyone
else.

00:51:52.820 --> 00:51:54.130
&gt;&gt;&gt; Okay. Thank you.
&gt;&gt;Christian Kurzke: Thank you.

00:51:54.130 --> 00:51:57.990
&gt;&gt;Jason Bayer: So the question online.
So with the new update to Honeycomb, users

00:51:57.990 --> 00:52:01.890
will be able to use Xbox 360 and PlayStation
controllers.

00:52:01.890 --> 00:52:08.460
Will Google TV also have this capability?
Well, Google TV does have USB host mode. So

00:52:08.460 --> 00:52:14.170
I would expect accessories to be able to plug
into Google TV devices and use them.

00:52:14.170 --> 00:52:20.520
I haven't specifically tested Xbox 360 or
PlayStation controller, so I can't say for

00:52:20.520 --> 00:52:25.280
sure about that. But you can plug in some
accessories and use them. We'll definitely

00:52:25.280 --> 00:52:28.470
look into this, because it is an exciting
opportunity.

00:52:28.470 --> 00:52:32.250
&gt;&gt;Christian Kurzke: Yeah. And it makes our
life easier that we already have the host

00:52:32.250 --> 00:52:37.790
port. So some of the problems that the mobile
guys had are much easier for us, actually.

00:52:37.790 --> 00:52:43.781
So let's take a question from the second microphone.
&gt;&gt;&gt; Is there a time line for camera support?

00:52:43.781 --> 00:52:49.210
I mean, it practically screams video conferencing
in your face.

00:52:49.210 --> 00:52:53.910
&gt;&gt;Jason Bayer: Yep, it is something we know
about and are working on. There's a few different

00:52:53.910 --> 00:52:58.960
factors involved for getting it to work.
One of the main ones is that, basically, to

00:52:58.960 --> 00:53:04.170
change the hardware features on an Android
device, it basically doesn't let you dynamically

00:53:04.170 --> 00:53:09.440
change that. So we are looking forward to
in a future Android version to be able to

00:53:09.440 --> 00:53:14.371
basically plug in new hardware and remove
hardware. There's some marketing filtering

00:53:14.371 --> 00:53:20.381
issues and other issues. So we're aware of
this limitation and we're working on it. No

00:53:20.381 --> 00:53:23.700
specific time line.
&gt;&gt;&gt; Okay. Thanks.

00:53:23.700 --> 00:53:28.970
&gt;&gt;&gt; What's the outlook for getting more Google
TV devices out there?

00:53:28.970 --> 00:53:34.470
&gt;&gt;Christian Kurzke: We are working with our
OEM partners right now, so we just signed

00:53:34.470 --> 00:53:42.890
up two new OEMs, Samsung and Vizio. So we
are really excited for getting devices out.

00:53:42.890 --> 00:53:49.930
And as you know, with Android, since it is
an open platform, the adoption is probably

00:53:49.930 --> 00:53:54.430
going to take off similar as on the phones.
I mean, the phones, we also saw the first

00:53:54.430 --> 00:53:58.190
year was a little bit slow. Once the critical
mass -- I think what I'm really excited about

00:53:58.190 --> 00:54:04.890
is all the developers, all the applications
-- the adoption will also take up.

00:54:04.890 --> 00:54:08.070
&gt;&gt;Jason Bayer: Question online.
So the TV is much more a shared device, and

00:54:08.070 --> 00:54:12.100
quick access to different accounts and settings
for different users is a potentially critical

00:54:12.100 --> 00:54:16.740
feature. Is there any plan for supporting
multiple user profiles?

00:54:16.740 --> 00:54:24.090
I can say yes, there is a plan. We're not
going to have very good support in the initial

00:54:24.090 --> 00:54:28.041
update to Honeycomb. But this is definitely
on the road map. And I guess there is a few

00:54:28.041 --> 00:54:33.320
things. There is switching users, and then
there is multiple users at the same time.

00:54:33.320 --> 00:54:38.320
Even without full support from Android, I
think there's a lot of really interesting

00:54:38.320 --> 00:54:43.540
applications to take advantage of the fact
that you're in a shared environment. So some

00:54:43.540 --> 00:54:48.060
of the games and other things you can do on
the platform, knowing that there could be

00:54:48.060 --> 00:54:52.070
four people or three people on at the same
time. There could be some really interesting

00:54:52.070 --> 00:54:57.320
ideas for applications based on this.
&gt;&gt;Christian Kurzke: Okay. One more question

00:54:57.320 --> 00:55:00.640
from the back.
&gt;&gt;&gt; Apologize if you already addressed this.

00:55:00.640 --> 00:55:07.350
But you had mentioned about hardware -- you
know, new hardware that's going to be coming

00:55:07.350 --> 00:55:10.018
out and evolve. What's the time frame for
that hardware and what's the changes?

00:55:10.018 --> 00:55:14.240
&gt;&gt;Jason Bayer: I don't think we have any specific
details about when hardware -- when new hardware

00:55:14.240 --> 00:55:17.320
is coming out.
We're definitely working with a bunch of different

00:55:17.320 --> 00:55:22.110
partners to come out with various varieties
of hardware. But no specific time lines on

00:55:22.110 --> 00:55:23.990
that.
&gt;&gt;&gt; Will it be this year?

00:55:23.990 --> 00:55:29.460
&gt;&gt;Jason Bayer: No specific time lines on that.
&gt;&gt;Christian Kurzke: Yeah.

00:55:29.460 --> 00:55:36.420
&gt;&gt;&gt; (off mike).
&gt;&gt;Jason Bayer: So PM said we'll see announcements

00:55:36.420 --> 00:55:37.800
later this year.
[ Laughter ]

00:55:37.800 --> 00:55:41.900
&gt;&gt;Jason Bayer: All right.
&gt;&gt;Christian Kurzke: We're safe.

00:55:41.900 --> 00:55:47.430
So we have 30 more seconds.
So let's take one more live question from

00:55:47.430 --> 00:55:49.590
the front.
&gt;&gt;&gt; Sure.

00:55:49.590 --> 00:55:56.310
With your adoption of 3.1, are you going to
be supporting HTTP live streaming and the

00:55:56.310 --> 00:56:02.120
adaptive component of live streaming for any
content consumption on the device?

00:56:02.120 --> 00:56:07.670
&gt;&gt;Christian Kurzke: That's a very frequent
request. We know that developers would really

00:56:07.670 --> 00:56:14.950
like that. We're working on it. So I can't
make clear yes or no promise. I don't want

00:56:14.950 --> 00:56:20.430
you to, you know, hold me to that later. But
we're working on it and we're expecting this

00:56:20.430 --> 00:56:24.560
to work.
&gt;&gt;Jason Bayer: Okay. So we're out of time.

00:56:24.560 --> 00:56:27.470
So thank you very much for coming by. And
stop by our office hours.

00:56:27.470 --> 00:56:27.560
[ Applause ]

