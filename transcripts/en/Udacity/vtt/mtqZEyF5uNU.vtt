WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:03.160
To get you primed up to answer this question,

00:00:03.160 --> 00:00:05.490
let's first discuss a little bit about the instructions as

00:00:05.490 --> 00:00:09.240
architecture of a processor. In the instruction set architecture

00:00:09.240 --> 00:00:12.670
of a processor, instructions are atomic by definition, or in

00:00:12.670 --> 00:00:15.550
other words if you think about Reads and writes

00:00:15.550 --> 00:00:18.760
to memory which are usually implemented at loads and stores,

00:00:18.760 --> 00:00:22.010
and the instructions have architecture for processor. Those are

00:00:22.010 --> 00:00:25.980
atomic instructions, and what that means is, during the execution

00:00:25.980 --> 00:00:28.450
of either a load instruction or a store

00:00:28.450 --> 00:00:33.120
instruction or also, as you might think about

00:00:33.120 --> 00:00:35.960
them, read or write instruction, the memory. The

00:00:35.960 --> 00:00:39.860
processor cannot be interrupted. That's important, that that's

00:00:39.860 --> 00:00:41.790
the, the definition of an, of an atomic

00:00:41.790 --> 00:00:44.201
instruction that the processor is not going to be

00:00:44.201 --> 00:00:48.790
in-, interrupted during the execution of an instruction.

00:00:48.790 --> 00:00:51.420
Now the question that I'm going to ask you to

00:00:51.420 --> 00:00:54.930
think about is, if I have a multi-threaded program And

00:00:54.930 --> 00:00:57.340
in that program, there is a process of P 1,

00:00:57.340 --> 00:01:00.250
which is modifying a data structure A, and there is

00:01:00.250 --> 00:01:03.460
a process of P 2. That is waiting for the modification

00:01:03.460 --> 00:01:06.410
by P 1 to be done, and after the modification

00:01:06.410 --> 00:01:09.532
is done, it wants to use that structure. Very natural,

00:01:09.532 --> 00:01:12.348
to think about situations in which you have this kind

00:01:12.348 --> 00:01:16.920
of a producer-consumer relationship. This guy is the producer of data,

00:01:16.920 --> 00:01:18.680
this guy is the consumer of data. And

00:01:18.680 --> 00:01:21.470
the consumer wants to make sure that the producer

00:01:21.470 --> 00:01:23.860
is done producing it before he starts using

00:01:23.860 --> 00:01:28.870
it. Quite natural. Now, given that the instructions of

00:01:28.870 --> 00:01:33.240
architecture is only read and write atomic instructions,

00:01:33.240 --> 00:01:35.490
The question that I'm going to pose to you is,

00:01:35.490 --> 00:01:39.460
is it possible to achieve the programmer's intent

00:01:39.460 --> 00:01:42.860
that I have embodied in this code snippet here?

00:01:42.860 --> 00:01:45.680
And, you know, the the answer is a binary answer,

00:01:45.680 --> 00:01:49.440
yes or no. And and if you, if you answer yes,

00:01:49.440 --> 00:01:52.960
I would like to see a code snippet that you think

00:01:52.960 --> 00:01:57.190
would make this particular code snipet work correctly on a multiprocessor.

