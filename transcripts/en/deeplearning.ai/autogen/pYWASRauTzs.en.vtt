WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.270 align:start position:0%
 
in<00:00:00.599><c> the</c><00:00:00.750><c> previous</c><00:00:01.079><c> video</c><00:00:01.439><c> you</c><00:00:01.500><c> saw</c><00:00:01.709><c> a</c><00:00:01.949><c> few</c>

00:00:02.270 --> 00:00:02.280 align:start position:0%
in the previous video you saw a few
 

00:00:02.280 --> 00:00:05.150 align:start position:0%
in the previous video you saw a few
examples<00:00:02.790><c> of</c><00:00:03.000><c> how</c><00:00:03.210><c> vectorization</c><00:00:03.959><c> by</c><00:00:04.890><c> using</c>

00:00:05.150 --> 00:00:05.160 align:start position:0%
examples of how vectorization by using
 

00:00:05.160 --> 00:00:06.920 align:start position:0%
examples of how vectorization by using
built-in<00:00:05.700><c> functions</c><00:00:06.210><c> and</c><00:00:06.480><c> by</c><00:00:06.600><c> avoiding</c>

00:00:06.920 --> 00:00:06.930 align:start position:0%
built-in functions and by avoiding
 

00:00:06.930 --> 00:00:09.470 align:start position:0%
built-in functions and by avoiding
explicit<00:00:07.770><c> for</c><00:00:07.980><c> loops</c><00:00:08.189><c> allows</c><00:00:08.820><c> you</c><00:00:09.059><c> to</c><00:00:09.240><c> speed</c>

00:00:09.470 --> 00:00:09.480 align:start position:0%
explicit for loops allows you to speed
 

00:00:09.480 --> 00:00:11.480 align:start position:0%
explicit for loops allows you to speed
up<00:00:09.599><c> your</c><00:00:09.630><c> code</c><00:00:09.929><c> significantly</c><00:00:10.620><c> let's</c><00:00:11.280><c> take</c><00:00:11.460><c> a</c>

00:00:11.480 --> 00:00:11.490 align:start position:0%
up your code significantly let's take a
 

00:00:11.490 --> 00:00:14.240 align:start position:0%
up your code significantly let's take a
look<00:00:11.670><c> at</c><00:00:11.790><c> few</c><00:00:12.000><c> more</c><00:00:12.120><c> examples</c><00:00:12.889><c> the</c><00:00:13.889><c> rule</c><00:00:14.130><c> of</c>

00:00:14.240 --> 00:00:14.250 align:start position:0%
look at few more examples the rule of
 

00:00:14.250 --> 00:00:16.070 align:start position:0%
look at few more examples the rule of
thumb<00:00:14.460><c> to</c><00:00:14.639><c> keep</c><00:00:14.820><c> in</c><00:00:14.969><c> mind</c><00:00:15.150><c> is</c><00:00:15.480><c> when</c><00:00:15.990><c> you</c>

00:00:16.070 --> 00:00:16.080 align:start position:0%
thumb to keep in mind is when you
 

00:00:16.080 --> 00:00:17.990 align:start position:0%
thumb to keep in mind is when you
programming<00:00:16.710><c> your</c><00:00:16.890><c> neural</c><00:00:17.220><c> network</c><00:00:17.580><c> so</c><00:00:17.820><c> when</c>

00:00:17.990 --> 00:00:18.000 align:start position:0%
programming your neural network so when
 

00:00:18.000 --> 00:00:19.519 align:start position:0%
programming your neural network so when
you're<00:00:18.119><c> programming</c><00:00:18.539><c> logistic</c><00:00:19.020><c> regression</c>

00:00:19.519 --> 00:00:19.529 align:start position:0%
you're programming logistic regression
 

00:00:19.529 --> 00:00:22.340 align:start position:0%
you're programming logistic regression
whenever<00:00:20.279><c> possible</c><00:00:20.490><c> avoid</c><00:00:21.080><c> explicit</c><00:00:22.080><c> for</c>

00:00:22.340 --> 00:00:22.350 align:start position:0%
whenever possible avoid explicit for
 

00:00:22.350 --> 00:00:25.279 align:start position:0%
whenever possible avoid explicit for
loops<00:00:22.590><c> and</c><00:00:22.970><c> it's</c><00:00:23.970><c> not</c><00:00:24.150><c> always</c><00:00:24.420><c> possible</c><00:00:24.869><c> to</c>

00:00:25.279 --> 00:00:25.289 align:start position:0%
loops and it's not always possible to
 

00:00:25.289 --> 00:00:27.950 align:start position:0%
loops and it's not always possible to
never<00:00:26.130><c> use</c><00:00:26.430><c> a</c><00:00:26.460><c> for</c><00:00:26.820><c> loop</c><00:00:27.000><c> but</c><00:00:27.480><c> when</c><00:00:27.720><c> you</c><00:00:27.810><c> can</c>

00:00:27.950 --> 00:00:27.960 align:start position:0%
never use a for loop but when you can
 

00:00:27.960 --> 00:00:29.689 align:start position:0%
never use a for loop but when you can
use<00:00:28.109><c> a</c><00:00:28.140><c> built</c><00:00:28.470><c> in</c><00:00:28.619><c> function</c><00:00:28.680><c> or</c><00:00:29.250><c> find</c><00:00:29.460><c> some</c>

00:00:29.689 --> 00:00:29.699 align:start position:0%
use a built in function or find some
 

00:00:29.699 --> 00:00:32.179 align:start position:0%
use a built in function or find some
other<00:00:29.910><c> way</c><00:00:30.090><c> to</c><00:00:30.119><c> compute</c><00:00:30.929><c> whatever</c><00:00:31.859><c> you</c><00:00:31.980><c> need</c>

00:00:32.179 --> 00:00:32.189 align:start position:0%
other way to compute whatever you need
 

00:00:32.189 --> 00:00:34.940 align:start position:0%
other way to compute whatever you need
it<00:00:33.030><c> will</c><00:00:33.180><c> often</c><00:00:33.390><c> go</c><00:00:33.780><c> faster</c><00:00:34.350><c> than</c><00:00:34.710><c> if</c><00:00:34.800><c> you</c>

00:00:34.940 --> 00:00:34.950 align:start position:0%
it will often go faster than if you
 

00:00:34.950 --> 00:00:37.430 align:start position:0%
it will often go faster than if you
haven't<00:00:35.309><c> explicit</c><00:00:35.790><c> for</c><00:00:36.030><c> me</c><00:00:36.210><c> let's</c><00:00:37.170><c> look</c><00:00:37.320><c> at</c>

00:00:37.430 --> 00:00:37.440 align:start position:0%
haven't explicit for me let's look at
 

00:00:37.440 --> 00:00:38.270 align:start position:0%
haven't explicit for me let's look at
another<00:00:37.680><c> example</c>

00:00:38.270 --> 00:00:38.280 align:start position:0%
another example
 

00:00:38.280 --> 00:00:42.049 align:start position:0%
another example
if<00:00:38.670><c> ever</c><00:00:38.930><c> you</c><00:00:39.930><c> want</c><00:00:40.140><c> to</c><00:00:40.230><c> compute</c><00:00:40.590><c> a</c><00:00:40.860><c> vector</c><00:00:41.760><c> you</c>

00:00:42.049 --> 00:00:42.059 align:start position:0%
if ever you want to compute a vector you
 

00:00:42.059 --> 00:00:44.959 align:start position:0%
if ever you want to compute a vector you
as<00:00:42.329><c> the</c><00:00:42.719><c> product</c><00:00:43.290><c> of</c><00:00:43.440><c> a</c><00:00:43.559><c> matrix</c><00:00:43.800><c> a</c><00:00:44.190><c> and</c><00:00:44.280><c> another</c>

00:00:44.959 --> 00:00:44.969 align:start position:0%
as the product of a matrix a and another
 

00:00:44.969 --> 00:00:49.010 align:start position:0%
as the product of a matrix a and another
vector<00:00:45.300><c> B</c><00:00:46.170><c> then</c><00:00:46.950><c> the</c><00:00:47.910><c> definition</c><00:00:48.090><c> of</c><00:00:48.660><c> a</c><00:00:48.780><c> matrix</c>

00:00:49.010 --> 00:00:49.020 align:start position:0%
vector B then the definition of a matrix
 

00:00:49.020 --> 00:00:52.250 align:start position:0%
vector B then the definition of a matrix
multiply<00:00:49.710><c> is</c><00:00:50.010><c> that</c><00:00:50.309><c> you</c><00:00:50.820><c> know</c><00:00:50.879><c> UI</c><00:00:51.149><c> is</c><00:00:51.420><c> equal</c><00:00:51.719><c> to</c>

00:00:52.250 --> 00:00:52.260 align:start position:0%
multiply is that you know UI is equal to
 

00:00:52.260 --> 00:00:57.260 align:start position:0%
multiply is that you know UI is equal to
sum<00:00:53.100><c> of</c><00:00:53.129><c> a</c><00:00:53.340><c> j</c><00:00:53.579><c> AI</c><00:00:54.390><c> J</c><00:00:55.399><c> VJ</c><00:00:56.399><c> alright</c><00:00:57.000><c> that's</c><00:00:57.210><c> how</c>

00:00:57.260 --> 00:00:57.270 align:start position:0%
sum of a j AI J VJ alright that's how
 

00:00:57.270 --> 00:01:00.290 align:start position:0%
sum of a j AI J VJ alright that's how
you<00:00:57.390><c> define</c><00:00:57.600><c> UI</c><00:00:58.020><c> and</c><00:00:58.469><c> so</c><00:00:59.219><c> the</c><00:00:59.550><c> non</c><00:00:59.789><c> vectorized</c>

00:01:00.290 --> 00:01:00.300 align:start position:0%
you define UI and so the non vectorized
 

00:01:00.300 --> 00:01:02.180 align:start position:0%
you define UI and so the non vectorized
implementation<00:01:00.960><c> of</c><00:01:01.079><c> this</c><00:01:01.260><c> would</c><00:01:01.469><c> be</c><00:01:01.500><c> you</c><00:01:02.129><c> know</c>

00:01:02.180 --> 00:01:02.190 align:start position:0%
implementation of this would be you know
 

00:01:02.190 --> 00:01:07.039 align:start position:0%
implementation of this would be you know
to<00:01:02.280><c> set</c><00:01:02.670><c> u</c><00:01:03.030><c> equals</c><00:01:03.570><c> NP</c><00:01:03.920><c> plus</c><00:01:04.920><c> zeros</c><00:01:05.780><c> would</c><00:01:06.780><c> be</c><00:01:06.900><c> n</c>

00:01:07.039 --> 00:01:07.049 align:start position:0%
to set u equals NP plus zeros would be n
 

00:01:07.049 --> 00:01:12.320 align:start position:0%
to set u equals NP plus zeros would be n
by<00:01:07.229><c> 1</c><00:01:07.500><c> and</c><00:01:07.890><c> then</c><00:01:08.760><c> you</c><00:01:09.060><c> know</c><00:01:09.479><c> 4i</c><00:01:10.080><c> and</c><00:01:10.830><c> so</c><00:01:11.010><c> on</c><00:01:11.330><c> for</c>

00:01:12.320 --> 00:01:12.330 align:start position:0%
by 1 and then you know 4i and so on for
 

00:01:12.330 --> 00:01:18.649 align:start position:0%
by 1 and then you know 4i and so on for
J<00:01:12.630><c> and</c><00:01:13.439><c> so</c><00:01:13.619><c> on</c><00:01:13.860><c> right</c><00:01:14.369><c> and</c><00:01:15.680><c> UI</c><00:01:16.680><c> plus</c><00:01:17.460><c> equals</c><00:01:17.970><c> you</c>

00:01:18.649 --> 00:01:18.659 align:start position:0%
J and so on right and UI plus equals you
 

00:01:18.659 --> 00:01:24.440 align:start position:0%
J and so on right and UI plus equals you
know<00:01:18.689><c> a</c><00:01:18.990><c> IJ</c><00:01:20.540><c> times</c><00:01:21.650><c> VJ</c><00:01:22.650><c> so</c><00:01:23.100><c> now</c><00:01:23.400><c> this</c><00:01:23.700><c> has</c><00:01:23.909><c> to</c>

00:01:24.440 --> 00:01:24.450 align:start position:0%
know a IJ times VJ so now this has to
 

00:01:24.450 --> 00:01:27.859 align:start position:0%
know a IJ times VJ so now this has to
foldings<00:01:24.930><c> looking</c><00:01:25.320><c> over</c><00:01:25.650><c> both</c><00:01:26.189><c> I</c><00:01:26.460><c> and</c><00:01:26.670><c> J</c><00:01:26.909><c> so</c>

00:01:27.859 --> 00:01:27.869 align:start position:0%
foldings looking over both I and J so
 

00:01:27.869 --> 00:01:29.300 align:start position:0%
foldings looking over both I and J so
that's<00:01:28.049><c> a</c><00:01:28.140><c> non</c><00:01:28.320><c> vectorized</c><00:01:28.770><c> version</c><00:01:29.159><c> the</c>

00:01:29.300 --> 00:01:29.310 align:start position:0%
that's a non vectorized version the
 

00:01:29.310 --> 00:01:30.710 align:start position:0%
that's a non vectorized version the
vectorized<00:01:29.670><c> implementation</c><00:01:30.360><c> would</c><00:01:30.509><c> be</c><00:01:30.600><c> to</c>

00:01:30.710 --> 00:01:30.720 align:start position:0%
vectorized implementation would be to
 

00:01:30.720 --> 00:01:37.999 align:start position:0%
vectorized implementation would be to
say<00:01:30.930><c> u</c><00:01:31.560><c> equals</c><00:01:32.130><c> NP</c><00:01:33.890><c> dot</c><00:01:34.890><c> a</c><00:01:35.869><c> comma</c><00:01:36.869><c> V</c><00:01:37.140><c> and</c><00:01:37.380><c> diems</c>

00:01:37.999 --> 00:01:38.009 align:start position:0%
say u equals NP dot a comma V and diems
 

00:01:38.009 --> 00:01:39.560 align:start position:0%
say u equals NP dot a comma V and diems
plantation<00:01:38.549><c> on</c><00:01:38.670><c> the</c><00:01:38.700><c> right</c><00:01:38.970><c> to</c><00:01:39.150><c> vectorize</c>

00:01:39.560 --> 00:01:39.570 align:start position:0%
plantation on the right to vectorize
 

00:01:39.570 --> 00:01:42.620 align:start position:0%
plantation on the right to vectorize
version<00:01:40.560><c> now</c><00:01:40.920><c> eliminates</c><00:01:41.490><c> two</c><00:01:41.909><c> different</c><00:01:42.390><c> for</c>

00:01:42.620 --> 00:01:42.630 align:start position:0%
version now eliminates two different for
 

00:01:42.630 --> 00:01:44.050 align:start position:0%
version now eliminates two different for
loops<00:01:42.869><c> and</c><00:01:43.170><c> it's</c><00:01:43.320><c> going</c><00:01:43.439><c> to</c><00:01:43.530><c> be</c><00:01:43.590><c> way</c><00:01:43.829><c> faster</c>

00:01:44.050 --> 00:01:44.060 align:start position:0%
loops and it's going to be way faster
 

00:01:44.060 --> 00:01:46.819 align:start position:0%
loops and it's going to be way faster
let's<00:01:45.060><c> go</c><00:01:45.240><c> through</c><00:01:45.450><c> one</c><00:01:45.600><c> more</c><00:01:45.750><c> example</c><00:01:46.020><c> let's</c>

00:01:46.819 --> 00:01:46.829 align:start position:0%
let's go through one more example let's
 

00:01:46.829 --> 00:01:48.560 align:start position:0%
let's go through one more example let's
say<00:01:46.979><c> you</c><00:01:47.159><c> already</c><00:01:47.280><c> have</c><00:01:47.700><c> a</c><00:01:47.729><c> vector</c><00:01:48.180><c> V</c><00:01:48.420><c> in</c>

00:01:48.560 --> 00:01:48.570 align:start position:0%
say you already have a vector V in
 

00:01:48.570 --> 00:01:52.039 align:start position:0%
say you already have a vector V in
memory<00:01:48.930><c> and</c><00:01:49.259><c> you</c><00:01:50.250><c> want</c><00:01:50.850><c> to</c><00:01:51.000><c> apply</c><00:01:51.750><c> the</c>

00:01:52.039 --> 00:01:52.049 align:start position:0%
memory and you want to apply the
 

00:01:52.049 --> 00:01:54.350 align:start position:0%
memory and you want to apply the
exponential<00:01:52.890><c> operation</c><00:01:53.399><c> on</c><00:01:53.610><c> every</c><00:01:53.970><c> element</c>

00:01:54.350 --> 00:01:54.360 align:start position:0%
exponential operation on every element
 

00:01:54.360 --> 00:01:56.899 align:start position:0%
exponential operation on every element
of<00:01:54.600><c> say</c><00:01:55.200><c> this</c><00:01:55.380><c> vector</c><00:01:55.740><c> V</c><00:01:55.890><c> so</c><00:01:55.920><c> you</c><00:01:56.159><c> confuse</c><00:01:56.610><c> you</c>

00:01:56.899 --> 00:01:56.909 align:start position:0%
of say this vector V so you confuse you
 

00:01:56.909 --> 00:02:00.139 align:start position:0%
of say this vector V so you confuse you
equals<00:01:57.479><c> in</c><00:01:58.140><c> a</c><00:01:58.290><c> vector</c><00:01:58.619><c> that's</c><00:01:58.829><c> e</c><00:01:59.040><c> to</c><00:01:59.310><c> the</c><00:01:59.399><c> B</c><00:01:59.610><c> 1</c><00:01:59.850><c> e</c>

00:02:00.139 --> 00:02:00.149 align:start position:0%
equals in a vector that's e to the B 1 e
 

00:02:00.149 --> 00:02:03.429 align:start position:0%
equals in a vector that's e to the B 1 e
to<00:02:00.450><c> the</c><00:02:00.570><c> V</c><00:02:00.719><c> 2</c><00:02:00.960><c> and</c><00:02:01.229><c> so</c><00:02:01.890><c> on</c><00:02:02.070><c> down</c><00:02:02.310><c> to</c><00:02:02.369><c> e</c><00:02:02.820><c> to</c><00:02:03.119><c> the</c>

00:02:03.429 --> 00:02:03.439 align:start position:0%
to the V 2 and so on down to e to the
 

00:02:03.439 --> 00:02:05.630 align:start position:0%
to the V 2 and so on down to e to the
the<00:02:04.439><c> end</c>

00:02:05.630 --> 00:02:05.640 align:start position:0%
the end
 

00:02:05.640 --> 00:02:07.250 align:start position:0%
the end
so<00:02:05.760><c> this</c><00:02:06.060><c> would</c><00:02:06.240><c> be</c><00:02:06.360><c> a</c><00:02:06.390><c> non</c><00:02:06.690><c> vectorized</c>

00:02:07.250 --> 00:02:07.260 align:start position:0%
so this would be a non vectorized
 

00:02:07.260 --> 00:02:09.830 align:start position:0%
so this would be a non vectorized
implementation<00:02:08.070><c> right</c><00:02:08.520><c> which</c><00:02:08.759><c> is</c><00:02:08.940><c> that</c><00:02:09.119><c> first</c>

00:02:09.830 --> 00:02:09.840 align:start position:0%
implementation right which is that first
 

00:02:09.840 --> 00:02:12.890 align:start position:0%
implementation right which is that first
you<00:02:10.289><c> initialize</c><00:02:10.770><c> you</c><00:02:11.730><c> to</c><00:02:12.030><c> a</c><00:02:12.060><c> vector</c><00:02:12.420><c> of</c><00:02:12.480><c> zeros</c>

00:02:12.890 --> 00:02:12.900 align:start position:0%
you initialize you to a vector of zeros
 

00:02:12.900 --> 00:02:14.870 align:start position:0%
you initialize you to a vector of zeros
and<00:02:13.320><c> then</c><00:02:13.500><c> you</c><00:02:13.560><c> have</c><00:02:13.680><c> a</c><00:02:13.770><c> for</c><00:02:14.040><c> loop</c><00:02:14.070><c> that</c>

00:02:14.870 --> 00:02:14.880 align:start position:0%
and then you have a for loop that
 

00:02:14.880 --> 00:02:18.320 align:start position:0%
and then you have a for loop that
computes<00:02:15.450><c> the</c><00:02:15.870><c> elements</c><00:02:16.410><c> one</c><00:02:16.800><c> at</c><00:02:16.950><c> a</c><00:02:16.980><c> time</c><00:02:17.330><c> but</c>

00:02:18.320 --> 00:02:18.330 align:start position:0%
computes the elements one at a time but
 

00:02:18.330 --> 00:02:21.440 align:start position:0%
computes the elements one at a time but
it<00:02:18.480><c> turns</c><00:02:18.690><c> out</c><00:02:18.870><c> that</c><00:02:19.010><c> Python</c><00:02:20.010><c> numpy</c><00:02:20.400><c> have</c><00:02:20.790><c> many</c>

00:02:21.440 --> 00:02:21.450 align:start position:0%
it turns out that Python numpy have many
 

00:02:21.450 --> 00:02:24.100 align:start position:0%
it turns out that Python numpy have many
built-in<00:02:22.140><c> functions</c><00:02:23.100><c> that</c><00:02:23.430><c> allow</c><00:02:23.580><c> you</c><00:02:23.790><c> to</c>

00:02:24.100 --> 00:02:24.110 align:start position:0%
built-in functions that allow you to
 

00:02:24.110 --> 00:02:28.460 align:start position:0%
built-in functions that allow you to
compute<00:02:25.110><c> these</c><00:02:25.820><c> vectors</c><00:02:26.820><c> with</c><00:02:27.660><c> just</c><00:02:27.900><c> a</c><00:02:27.990><c> single</c>

00:02:28.460 --> 00:02:28.470 align:start position:0%
compute these vectors with just a single
 

00:02:28.470 --> 00:02:32.360 align:start position:0%
compute these vectors with just a single
call<00:02:29.190><c> to</c><00:02:29.520><c> a</c><00:02:29.550><c> single</c><00:02:30.000><c> function</c><00:02:30.290><c> so</c><00:02:31.290><c> what</c><00:02:32.130><c> I</c>

00:02:32.360 --> 00:02:32.370 align:start position:0%
call to a single function so what I
 

00:02:32.370 --> 00:02:35.770 align:start position:0%
call to a single function so what I
would<00:02:32.700><c> do</c><00:02:32.880><c> to</c><00:02:33.060><c> implement</c><00:02:33.240><c> this</c><00:02:33.630><c> is</c><00:02:33.870><c> import</c><00:02:34.440><c> um</c>

00:02:35.770 --> 00:02:35.780 align:start position:0%
would do to implement this is import um
 

00:02:35.780 --> 00:02:42.500 align:start position:0%
would do to implement this is import um
numpy<00:02:36.780><c> s</c><00:02:37.670><c> and</c><00:02:38.690><c> p</c><00:02:39.690><c> and</c><00:02:39.959><c> then</c><00:02:40.830><c> you</c><00:02:41.430><c> just</c><00:02:41.730><c> call</c><00:02:42.030><c> you</c>

00:02:42.500 --> 00:02:42.510 align:start position:0%
numpy s and p and then you just call you
 

00:02:42.510 --> 00:02:47.420 align:start position:0%
numpy s and p and then you just call you
equals<00:02:43.170><c> and</c><00:02:43.470><c> p</c><00:02:44.100><c> dot</c><00:02:44.940><c> e</c><00:02:45.270><c> to</c><00:02:46.260><c> the</c><00:02:46.410><c> B</c><00:02:46.890><c> and</c><00:02:47.100><c> so</c>

00:02:47.420 --> 00:02:47.430 align:start position:0%
equals and p dot e to the B and so
 

00:02:47.430 --> 00:02:50.630 align:start position:0%
equals and p dot e to the B and so
notice<00:02:48.060><c> that</c><00:02:48.270><c> whereas</c><00:02:49.080><c> previously</c><00:02:49.590><c> you</c><00:02:50.459><c> have</c>

00:02:50.630 --> 00:02:50.640 align:start position:0%
notice that whereas previously you have
 

00:02:50.640 --> 00:02:53.180 align:start position:0%
notice that whereas previously you have
that<00:02:50.790><c> explicit</c><00:02:51.360><c> for</c><00:02:51.600><c> loop</c><00:02:51.810><c> with</c><00:02:52.739><c> just</c><00:02:52.980><c> one</c>

00:02:53.180 --> 00:02:53.190 align:start position:0%
that explicit for loop with just one
 

00:02:53.190 --> 00:02:55.699 align:start position:0%
that explicit for loop with just one
line<00:02:53.400><c> of</c><00:02:53.550><c> code</c><00:02:53.580><c> here</c><00:02:53.820><c> on</c><00:02:54.330><c> this</c><00:02:55.050><c> V</c><00:02:55.260><c> is</c><00:02:55.380><c> an</c><00:02:55.530><c> input</c>

00:02:55.699 --> 00:02:55.709 align:start position:0%
line of code here on this V is an input
 

00:02:55.709 --> 00:02:58.970 align:start position:0%
line of code here on this V is an input
vector<00:02:56.550><c> use</c><00:02:57.360><c> an</c><00:02:57.570><c> output</c><00:02:57.930><c> vector</c><00:02:58.350><c> you've</c>

00:02:58.970 --> 00:02:58.980 align:start position:0%
vector use an output vector you've
 

00:02:58.980 --> 00:03:01.130 align:start position:0%
vector use an output vector you've
gotten<00:02:59.400><c> rid</c><00:02:59.550><c> of</c><00:02:59.610><c> the</c><00:02:59.850><c> explicit</c><00:03:00.270><c> for</c><00:03:00.660><c> loop</c><00:03:00.870><c> and</c>

00:03:01.130 --> 00:03:01.140 align:start position:0%
gotten rid of the explicit for loop and
 

00:03:01.140 --> 00:03:02.810 align:start position:0%
gotten rid of the explicit for loop and
the<00:03:01.500><c> implementation</c><00:03:02.160><c> land</c><00:03:02.340><c> rights</c><00:03:02.550><c> will</c><00:03:02.790><c> be</c>

00:03:02.810 --> 00:03:02.820 align:start position:0%
the implementation land rights will be
 

00:03:02.820 --> 00:03:04.970 align:start position:0%
the implementation land rights will be
much<00:03:03.150><c> faster</c><00:03:03.360><c> than</c><00:03:04.230><c> the</c><00:03:04.500><c> one</c><00:03:04.680><c> needing</c>

00:03:04.970 --> 00:03:04.980 align:start position:0%
much faster than the one needing
 

00:03:04.980 --> 00:03:07.580 align:start position:0%
much faster than the one needing
explicit<00:03:05.640><c> value</c><00:03:06.000><c> inside</c><00:03:06.570><c> the</c><00:03:06.600><c> numpy</c><00:03:07.110><c> library</c>

00:03:07.580 --> 00:03:07.590 align:start position:0%
explicit value inside the numpy library
 

00:03:07.590 --> 00:03:10.460 align:start position:0%
explicit value inside the numpy library
as<00:03:07.770><c> many</c><00:03:08.430><c> other</c><00:03:08.610><c> vector</c><00:03:09.480><c> value</c><00:03:09.840><c> function</c><00:03:09.870><c> so</c>

00:03:10.460 --> 00:03:10.470 align:start position:0%
as many other vector value function so
 

00:03:10.470 --> 00:03:14.090 align:start position:0%
as many other vector value function so
NP<00:03:10.860><c> dot</c><00:03:11.519><c> log</c><00:03:11.760><c> of</c><00:03:12.120><c> V</c><00:03:12.930><c> will</c><00:03:13.200><c> compute</c><00:03:13.590><c> the</c><00:03:13.680><c> element</c>

00:03:14.090 --> 00:03:14.100 align:start position:0%
NP dot log of V will compute the element
 

00:03:14.100 --> 00:03:18.289 align:start position:0%
NP dot log of V will compute the element
wise<00:03:14.250><c> log</c><00:03:14.700><c> n</c><00:03:15.360><c> peeves</c><00:03:16.790><c> computes</c><00:03:17.790><c> the</c><00:03:17.880><c> absolute</c>

00:03:18.289 --> 00:03:18.299 align:start position:0%
wise log n peeves computes the absolute
 

00:03:18.299 --> 00:03:24.050 align:start position:0%
wise log n peeves computes the absolute
value<00:03:18.860><c> MP</c><00:03:19.860><c> dot</c><00:03:20.510><c> maximum</c><00:03:22.280><c> confuse</c><00:03:23.280><c> the</c><00:03:23.489><c> element</c>

00:03:24.050 --> 00:03:24.060 align:start position:0%
value MP dot maximum confuse the element
 

00:03:24.060 --> 00:03:25.850 align:start position:0%
value MP dot maximum confuse the element
wise<00:03:24.180><c> maximum</c><00:03:24.840><c> so</c><00:03:24.989><c> you</c><00:03:25.049><c> take</c><00:03:25.260><c> the</c><00:03:25.380><c> max</c><00:03:25.620><c> of</c>

00:03:25.850 --> 00:03:25.860 align:start position:0%
wise maximum so you take the max of
 

00:03:25.860 --> 00:03:30.289 align:start position:0%
wise maximum so you take the max of
every<00:03:26.610><c> element</c><00:03:26.910><c> of</c><00:03:27.120><c> B</c><00:03:27.630><c> what's</c><00:03:28.380><c> zero</c><00:03:29.299><c> these</c>

00:03:30.289 --> 00:03:30.299 align:start position:0%
every element of B what's zero these
 

00:03:30.299 --> 00:03:33.610 align:start position:0%
every element of B what's zero these
last<00:03:30.780><c> are</c><00:03:31.080><c> two</c><00:03:31.410><c> this</c><00:03:31.799><c> takes</c><00:03:32.130><c> the</c><00:03:32.250><c> element</c><00:03:33.030><c> wise</c>

00:03:33.610 --> 00:03:33.620 align:start position:0%
last are two this takes the element wise
 

00:03:33.620 --> 00:03:38.270 align:start position:0%
last are two this takes the element wise
square<00:03:34.620><c> of</c><00:03:34.860><c> each</c><00:03:35.040><c> element</c><00:03:35.910><c> of</c><00:03:36.030><c> V</c><00:03:36.269><c> you</c><00:03:36.680><c> know</c><00:03:37.680><c> 1</c>

00:03:38.270 --> 00:03:38.280 align:start position:0%
square of each element of V you know 1
 

00:03:38.280 --> 00:03:41.210 align:start position:0%
square of each element of V you know 1
over<00:03:38.880><c> V</c><00:03:39.120><c> takes</c><00:03:39.780><c> the</c><00:03:39.989><c> element</c><00:03:40.290><c> wise</c><00:03:40.590><c> inverse</c>

00:03:41.210 --> 00:03:41.220 align:start position:0%
over V takes the element wise inverse
 

00:03:41.220 --> 00:03:44.270 align:start position:0%
over V takes the element wise inverse
and<00:03:41.549><c> so</c><00:03:42.510><c> on</c><00:03:42.690><c> so</c><00:03:43.049><c> whenever</c><00:03:43.350><c> you</c><00:03:43.739><c> attempted</c><00:03:44.250><c> to</c>

00:03:44.270 --> 00:03:44.280 align:start position:0%
and so on so whenever you attempted to
 

00:03:44.280 --> 00:03:47.060 align:start position:0%
and so on so whenever you attempted to
write<00:03:44.580><c> a</c><00:03:44.610><c> for</c><00:03:44.970><c> loop</c><00:03:45.200><c> take</c><00:03:46.200><c> a</c><00:03:46.230><c> look</c><00:03:46.440><c> and</c><00:03:46.680><c> see</c><00:03:46.920><c> if</c>

00:03:47.060 --> 00:03:47.070 align:start position:0%
write a for loop take a look and see if
 

00:03:47.070 --> 00:03:49.759 align:start position:0%
write a for loop take a look and see if
there's<00:03:47.280><c> a</c><00:03:47.370><c> way</c><00:03:47.549><c> to</c><00:03:47.610><c> call</c><00:03:48.239><c> a</c><00:03:48.540><c> non</c><00:03:49.110><c> PI</c><00:03:49.320><c> built-in</c>

00:03:49.759 --> 00:03:49.769 align:start position:0%
there's a way to call a non PI built-in
 

00:03:49.769 --> 00:03:52.240 align:start position:0%
there's a way to call a non PI built-in
function<00:03:50.250><c> to</c><00:03:50.670><c> do</c><00:03:50.850><c> it</c><00:03:51.000><c> without</c><00:03:51.209><c> that</c><00:03:51.420><c> for</c><00:03:51.840><c> loop</c>

00:03:52.240 --> 00:03:52.250 align:start position:0%
function to do it without that for loop
 

00:03:52.250 --> 00:03:54.830 align:start position:0%
function to do it without that for loop
so<00:03:53.250><c> let's</c><00:03:53.580><c> take</c><00:03:53.760><c> all</c><00:03:53.940><c> of</c><00:03:53.970><c> these</c><00:03:54.180><c> learnings</c><00:03:54.660><c> and</c>

00:03:54.830 --> 00:03:54.840 align:start position:0%
so let's take all of these learnings and
 

00:03:54.840 --> 00:03:56.680 align:start position:0%
so let's take all of these learnings and
apply<00:03:54.930><c> it</c><00:03:55.350><c> to</c><00:03:55.590><c> our</c><00:03:55.620><c> logistic</c><00:03:56.130><c> regression</c>

00:03:56.680 --> 00:03:56.690 align:start position:0%
apply it to our logistic regression
 

00:03:56.690 --> 00:03:59.600 align:start position:0%
apply it to our logistic regression
gradient<00:03:57.690><c> descent</c><00:03:58.110><c> implementation</c><00:03:58.890><c> and</c><00:03:59.100><c> see</c>

00:03:59.600 --> 00:03:59.610 align:start position:0%
gradient descent implementation and see
 

00:03:59.610 --> 00:04:01.190 align:start position:0%
gradient descent implementation and see
if<00:03:59.670><c> we</c><00:03:59.760><c> can</c><00:03:59.880><c> at</c><00:03:59.970><c> least</c><00:04:00.000><c> get</c><00:04:00.360><c> rid</c><00:04:00.540><c> of</c><00:04:00.600><c> one</c><00:04:00.900><c> of</c><00:04:00.930><c> the</c>

00:04:01.190 --> 00:04:01.200 align:start position:0%
if we can at least get rid of one of the
 

00:04:01.200 --> 00:04:03.979 align:start position:0%
if we can at least get rid of one of the
two<00:04:01.410><c> folders</c><00:04:01.799><c> we</c><00:04:02.010><c> had</c><00:04:02.239><c> so</c><00:04:03.239><c> here's</c><00:04:03.540><c> our</c><00:04:03.690><c> code</c>

00:04:03.979 --> 00:04:03.989 align:start position:0%
two folders we had so here's our code
 

00:04:03.989 --> 00:04:06.440 align:start position:0%
two folders we had so here's our code
for<00:04:04.019><c> computing</c><00:04:04.799><c> the</c><00:04:05.100><c> derivatives</c><00:04:05.850><c> for</c>

00:04:06.440 --> 00:04:06.450 align:start position:0%
for computing the derivatives for
 

00:04:06.450 --> 00:04:08.810 align:start position:0%
for computing the derivatives for
logistic<00:04:07.200><c> regression</c><00:04:07.230><c> and</c><00:04:07.920><c> we</c><00:04:08.250><c> had</c><00:04:08.370><c> two</c><00:04:08.579><c> for</c>

00:04:08.810 --> 00:04:08.820 align:start position:0%
logistic regression and we had two for
 

00:04:08.820 --> 00:04:11.210 align:start position:0%
logistic regression and we had two for
loops<00:04:09.000><c> one</c><00:04:09.390><c> was</c><00:04:09.600><c> this</c><00:04:09.840><c> one</c><00:04:09.900><c> up</c><00:04:10.140><c> here</c><00:04:10.170><c> and</c><00:04:10.590><c> the</c>

00:04:11.210 --> 00:04:11.220 align:start position:0%
loops one was this one up here and the
 

00:04:11.220 --> 00:04:13.720 align:start position:0%
loops one was this one up here and the
second<00:04:11.640><c> one</c><00:04:11.820><c> was</c><00:04:12.120><c> this</c><00:04:12.420><c> one</c><00:04:12.480><c> right</c><00:04:13.019><c> so</c><00:04:13.260><c> in</c><00:04:13.470><c> our</c>

00:04:13.720 --> 00:04:13.730 align:start position:0%
second one was this one right so in our
 

00:04:13.730 --> 00:04:16.680 align:start position:0%
second one was this one right so in our
example<00:04:14.730><c> we</c><00:04:15.540><c> had</c><00:04:15.780><c> N</c><00:04:16.080><c> and</c>

00:04:16.680 --> 00:04:16.690 align:start position:0%
example we had N and
 

00:04:16.690 --> 00:04:19.650 align:start position:0%
example we had N and
equals<00:04:17.200><c> two</c><00:04:17.470><c> but</c><00:04:18.130><c> if</c><00:04:18.310><c> you</c><00:04:18.459><c> had</c><00:04:18.730><c> more</c><00:04:19.239><c> features</c>

00:04:19.650 --> 00:04:19.660 align:start position:0%
equals two but if you had more features
 

00:04:19.660 --> 00:04:21.570 align:start position:0%
equals two but if you had more features
than<00:04:19.690><c> just</c><00:04:20.080><c> two</c><00:04:20.260><c> features</c><00:04:20.650><c> then</c><00:04:20.950><c> you</c><00:04:21.130><c> need</c><00:04:21.310><c> to</c>

00:04:21.570 --> 00:04:21.580 align:start position:0%
than just two features then you need to
 

00:04:21.580 --> 00:04:24.960 align:start position:0%
than just two features then you need to
have<00:04:22.120><c> a</c><00:04:22.150><c> full</c><00:04:22.390><c> group</c><00:04:22.570><c> of</c><00:04:22.750><c> a</c><00:04:22.870><c> DW</c><00:04:23.320><c> 1</c><00:04:23.440><c> DW</c><00:04:23.680><c> 2</c><00:04:24.100><c> DW</c><00:04:24.490><c> 3</c>

00:04:24.960 --> 00:04:24.970 align:start position:0%
have a full group of a DW 1 DW 2 DW 3
 

00:04:24.970 --> 00:04:26.790 align:start position:0%
have a full group of a DW 1 DW 2 DW 3
and<00:04:25.210><c> so</c><00:04:25.390><c> on</c><00:04:25.420><c> so</c><00:04:25.780><c> it's</c><00:04:25.900><c> as</c><00:04:26.020><c> if</c><00:04:26.050><c> this</c><00:04:26.380><c> as</c><00:04:26.590><c> you</c><00:04:26.710><c> have</c>

00:04:26.790 --> 00:04:26.800 align:start position:0%
and so on so it's as if this as you have
 

00:04:26.800 --> 00:04:34.070 align:start position:0%
and so on so it's as if this as you have
for<00:04:27.040><c> J</c><00:04:27.760><c> equals</c><00:04:28.210><c> 1</c><00:04:28.300><c> to</c><00:04:28.830><c> NX</c><00:04:29.830><c> you</c><00:04:30.520><c> know</c><00:04:30.640><c> DW</c><00:04:31.300><c> j</c><00:04:32.430><c> pw</c><00:04:33.430><c> j</c>

00:04:34.070 --> 00:04:34.080 align:start position:0%
for J equals 1 to NX you know DW j pw j
 

00:04:34.080 --> 00:04:37.650 align:start position:0%
for J equals 1 to NX you know DW j pw j
you<00:04:35.080><c> know</c><00:04:35.170><c> gues</c><00:04:35.470><c> updated</c><00:04:36.180><c> all</c><00:04:37.180><c> right</c><00:04:37.300><c> so</c><00:04:37.540><c> we</c>

00:04:37.650 --> 00:04:37.660 align:start position:0%
you know gues updated all right so we
 

00:04:37.660 --> 00:04:41.250 align:start position:0%
you know gues updated all right so we
like<00:04:37.810><c> to</c><00:04:37.930><c> eliminate</c><00:04:39.180><c> this</c><00:04:40.180><c> second</c><00:04:40.990><c> volume</c>

00:04:41.250 --> 00:04:41.260 align:start position:0%
like to eliminate this second volume
 

00:04:41.260 --> 00:04:44.220 align:start position:0%
like to eliminate this second volume
that's<00:04:41.890><c> what</c><00:04:42.100><c> we'll</c><00:04:42.250><c> do</c><00:04:42.400><c> on</c><00:04:42.430><c> the</c><00:04:42.550><c> slide</c><00:04:43.020><c> so</c><00:04:44.020><c> the</c>

00:04:44.220 --> 00:04:44.230 align:start position:0%
that's what we'll do on the slide so the
 

00:04:44.230 --> 00:04:46.050 align:start position:0%
that's what we'll do on the slide so the
way<00:04:44.380><c> we'll</c><00:04:44.590><c> do</c><00:04:44.770><c> so</c><00:04:44.980><c> is</c><00:04:45.310><c> that</c><00:04:45.520><c> instead</c><00:04:46.000><c> of</c>

00:04:46.050 --> 00:04:46.060 align:start position:0%
way we'll do so is that instead of
 

00:04:46.060 --> 00:04:50.040 align:start position:0%
way we'll do so is that instead of
explicitly<00:04:47.220><c> initializing</c><00:04:48.220><c> DW</c><00:04:48.760><c> 1</c><00:04:48.910><c> DW</c><00:04:49.150><c> 2</c><00:04:49.630><c> and</c><00:04:49.870><c> so</c>

00:04:50.040 --> 00:04:50.050 align:start position:0%
explicitly initializing DW 1 DW 2 and so
 

00:04:50.050 --> 00:04:53.460 align:start position:0%
explicitly initializing DW 1 DW 2 and so
on<00:04:50.080><c> two</c><00:04:50.470><c> zeros</c><00:04:51.430><c> we're</c><00:04:51.790><c> going</c><00:04:52.030><c> to</c><00:04:52.240><c> get</c><00:04:53.170><c> rid</c><00:04:53.350><c> of</c>

00:04:53.460 --> 00:04:53.470 align:start position:0%
on two zeros we're going to get rid of
 

00:04:53.470 --> 00:04:58.200 align:start position:0%
on two zeros we're going to get rid of
this<00:04:53.710><c> and</c><00:04:54.270><c> instead</c><00:04:55.270><c> make</c><00:04:56.170><c> DW</c><00:04:57.100><c> a</c><00:04:57.160><c> vector</c><00:04:57.820><c> so</c>

00:04:58.200 --> 00:04:58.210 align:start position:0%
this and instead make DW a vector so
 

00:04:58.210 --> 00:05:02.760 align:start position:0%
this and instead make DW a vector so
we're<00:04:58.300><c> going</c><00:04:58.390><c> to</c><00:04:58.450><c> set</c><00:04:58.660><c> D</c><00:04:59.110><c> W</c><00:04:59.880><c> equals</c><00:05:00.880><c> M</c><00:05:01.500><c> MP</c><00:05:02.500><c> dot</c>

00:05:02.760 --> 00:05:02.770 align:start position:0%
we're going to set D W equals M MP dot
 

00:05:02.770 --> 00:05:07.980 align:start position:0%
we're going to set D W equals M MP dot
zeros<00:05:03.310><c> and</c><00:05:03.730><c> let's</c><00:05:04.540><c> make</c><00:05:04.750><c> those</c><00:05:04.960><c> a</c><00:05:05.200><c> on</c><00:05:05.440><c> and</c><00:05:06.250><c> X</c><00:05:06.990><c> by</c>

00:05:07.980 --> 00:05:07.990 align:start position:0%
zeros and let's make those a on and X by
 

00:05:07.990 --> 00:05:12.210 align:start position:0%
zeros and let's make those a on and X by
1<00:05:08.430><c> dimensional</c><00:05:09.430><c> vector</c><00:05:10.050><c> then</c><00:05:11.050><c> here</c><00:05:11.650><c> instead</c>

00:05:12.210 --> 00:05:12.220 align:start position:0%
1 dimensional vector then here instead
 

00:05:12.220 --> 00:05:14.820 align:start position:0%
1 dimensional vector then here instead
of<00:05:12.340><c> this</c><00:05:12.790><c> you</c><00:05:12.850><c> know</c><00:05:13.120><c> for</c><00:05:13.420><c> group</c><00:05:13.690><c> over</c><00:05:14.110><c> the</c>

00:05:14.820 --> 00:05:14.830 align:start position:0%
of this you know for group over the
 

00:05:14.830 --> 00:05:16.680 align:start position:0%
of this you know for group over the
individual<00:05:15.220><c> components</c><00:05:15.820><c> we</c><00:05:16.000><c> just</c><00:05:16.300><c> use</c><00:05:16.480><c> this</c>

00:05:16.680 --> 00:05:16.690 align:start position:0%
individual components we just use this
 

00:05:16.690 --> 00:05:23.310 align:start position:0%
individual components we just use this
vector<00:05:17.140><c> valued</c><00:05:17.530><c> operation</c><00:05:18.130><c> DW</c><00:05:19.200><c> plus</c><00:05:20.200><c> equals</c><00:05:22.320><c> x</c>

00:05:23.310 --> 00:05:23.320 align:start position:0%
vector valued operation DW plus equals x
 

00:05:23.320 --> 00:05:31.140 align:start position:0%
vector valued operation DW plus equals x
I<00:05:23.620><c> times</c><00:05:25.890><c> DZ</c><00:05:26.890><c> I</c><00:05:27.420><c> and</c><00:05:28.420><c> then</c><00:05:28.690><c> finally</c><00:05:29.970><c> instead</c><00:05:30.970><c> of</c>

00:05:31.140 --> 00:05:31.150 align:start position:0%
I times DZ I and then finally instead of
 

00:05:31.150 --> 00:05:36.540 align:start position:0%
I times DZ I and then finally instead of
this<00:05:31.650><c> we</c><00:05:32.650><c> will</c><00:05:32.770><c> just</c><00:05:32.830><c> have</c><00:05:33.300><c> DW</c><00:05:34.300><c> on</c><00:05:35.550><c> device</c>

00:05:36.540 --> 00:05:36.550 align:start position:0%
this we will just have DW on device
 

00:05:36.550 --> 00:05:40.230 align:start position:0%
this we will just have DW on device
equals<00:05:37.120><c> M</c><00:05:38.220><c> so</c><00:05:39.220><c> now</c><00:05:39.400><c> we've</c><00:05:39.700><c> gone</c><00:05:39.910><c> from</c><00:05:40.150><c> having</c>

00:05:40.230 --> 00:05:40.240 align:start position:0%
equals M so now we've gone from having
 

00:05:40.240 --> 00:05:42.630 align:start position:0%
equals M so now we've gone from having
two<00:05:40.750><c> for</c><00:05:40.990><c> loops</c><00:05:41.200><c> to</c><00:05:41.530><c> just</c><00:05:41.770><c> one</c><00:05:42.010><c> folder</c><00:05:42.460><c> we</c>

00:05:42.630 --> 00:05:42.640 align:start position:0%
two for loops to just one folder we
 

00:05:42.640 --> 00:05:44.970 align:start position:0%
two for loops to just one folder we
still<00:05:42.850><c> have</c><00:05:42.970><c> this</c><00:05:43.810><c> one</c><00:05:44.140><c> for</c><00:05:44.380><c> loop</c><00:05:44.620><c> that</c><00:05:44.830><c> loops</c>

00:05:44.970 --> 00:05:44.980 align:start position:0%
still have this one for loop that loops
 

00:05:44.980 --> 00:05:49.230 align:start position:0%
still have this one for loop that loops
over<00:05:45.370><c> the</c><00:05:45.580><c> individual</c><00:05:46.240><c> training</c><00:05:46.570><c> examples</c><00:05:48.240><c> so</c>

00:05:49.230 --> 00:05:49.240 align:start position:0%
over the individual training examples so
 

00:05:49.240 --> 00:05:51.000 align:start position:0%
over the individual training examples so
I<00:05:49.270><c> hope</c><00:05:49.510><c> this</c><00:05:49.750><c> video</c><00:05:50.050><c> gave</c><00:05:50.320><c> you</c><00:05:50.380><c> a</c><00:05:50.500><c> sense</c><00:05:50.770><c> of</c>

00:05:51.000 --> 00:05:51.010 align:start position:0%
I hope this video gave you a sense of
 

00:05:51.010 --> 00:05:53.670 align:start position:0%
I hope this video gave you a sense of
vectorization<00:05:51.430><c> and</c><00:05:52.120><c> by</c><00:05:52.360><c> getting</c><00:05:52.780><c> rid</c><00:05:52.960><c> of</c><00:05:52.990><c> one</c>

00:05:53.670 --> 00:05:53.680 align:start position:0%
vectorization and by getting rid of one
 

00:05:53.680 --> 00:05:55.470 align:start position:0%
vectorization and by getting rid of one
full<00:05:53.950><c> loop</c><00:05:54.130><c> your</c><00:05:54.490><c> code</c><00:05:54.700><c> will</c><00:05:54.820><c> already</c><00:05:55.120><c> run</c>

00:05:55.470 --> 00:05:55.480 align:start position:0%
full loop your code will already run
 

00:05:55.480 --> 00:05:57.840 align:start position:0%
full loop your code will already run
faster<00:05:56.080><c> but</c><00:05:56.680><c> it</c><00:05:56.770><c> turns</c><00:05:56.980><c> out</c><00:05:57.130><c> we</c><00:05:57.250><c> could</c><00:05:57.370><c> do</c><00:05:57.490><c> even</c>

00:05:57.840 --> 00:05:57.850 align:start position:0%
faster but it turns out we could do even
 

00:05:57.850 --> 00:05:59.970 align:start position:0%
faster but it turns out we could do even
better<00:05:58.000><c> so</c><00:05:58.450><c> the</c><00:05:58.630><c> next</c><00:05:58.840><c> video</c><00:05:59.020><c> will</c><00:05:59.230><c> talk</c><00:05:59.680><c> about</c>

00:05:59.970 --> 00:05:59.980 align:start position:0%
better so the next video will talk about
 

00:05:59.980 --> 00:06:02.460 align:start position:0%
better so the next video will talk about
how<00:06:00.400><c> to</c><00:06:00.460><c> decorate</c><00:06:00.820><c> justic</c><00:06:01.720><c> regression</c><00:06:02.140><c> even</c>

00:06:02.460 --> 00:06:02.470 align:start position:0%
how to decorate justic regression even
 

00:06:02.470 --> 00:06:04.380 align:start position:0%
how to decorate justic regression even
further<00:06:02.710><c> and</c><00:06:03.070><c> you</c><00:06:03.520><c> see</c><00:06:03.760><c> a</c><00:06:03.790><c> pretty</c><00:06:03.970><c> surprising</c>

00:06:04.380 --> 00:06:04.390 align:start position:0%
further and you see a pretty surprising
 

00:06:04.390 --> 00:06:07.170 align:start position:0%
further and you see a pretty surprising
result<00:06:04.870><c> that</c><00:06:05.350><c> without</c><00:06:05.950><c> using</c><00:06:06.340><c> any</c><00:06:06.580><c> full</c><00:06:06.910><c> loops</c>

00:06:07.170 --> 00:06:07.180 align:start position:0%
result that without using any full loops
 

00:06:07.180 --> 00:06:08.820 align:start position:0%
result that without using any full loops
without<00:06:07.419><c> needing</c><00:06:07.960><c> for</c><00:06:08.260><c> loop</c><00:06:08.440><c> over</c><00:06:08.560><c> the</c>

00:06:08.820 --> 00:06:08.830 align:start position:0%
without needing for loop over the
 

00:06:08.830 --> 00:06:12.030 align:start position:0%
without needing for loop over the
training<00:06:09.760><c> examples</c><00:06:10.360><c> you</c><00:06:10.900><c> could</c><00:06:11.169><c> write</c><00:06:11.470><c> code</c>

00:06:12.030 --> 00:06:12.040 align:start position:0%
training examples you could write code
 

00:06:12.040 --> 00:06:14.820 align:start position:0%
training examples you could write code
to<00:06:12.280><c> process</c><00:06:12.820><c> the</c><00:06:13.030><c> entire</c><00:06:13.240><c> training</c><00:06:14.050><c> set</c><00:06:14.380><c> so</c>

00:06:14.820 --> 00:06:14.830 align:start position:0%
to process the entire training set so
 

00:06:14.830 --> 00:06:17.220 align:start position:0%
to process the entire training set so
pretty<00:06:15.190><c> much</c><00:06:15.340><c> all</c><00:06:15.580><c> at</c><00:06:16.000><c> the</c><00:06:16.060><c> same</c><00:06:16.240><c> time</c><00:06:16.300><c> so</c>

00:06:17.220 --> 00:06:17.230 align:start position:0%
pretty much all at the same time so
 

00:06:17.230 --> 00:06:20.790 align:start position:0%
pretty much all at the same time so
let's<00:06:17.740><c> see</c><00:06:17.890><c> that</c><00:06:17.919><c> in</c><00:06:18.100><c> the</c><00:06:18.310><c> next</c><00:06:18.520><c> video</c>

