WEBVTT
Kind: captions
Language: en

00:00:04.960 --> 00:00:07.410
CHET HAASE: Hi, I'm Chet Haase,
an engineer on the

00:00:07.410 --> 00:00:09.550
Android team at Google.

00:00:09.550 --> 00:00:12.630
In a previous episode, I
talked about ListView

00:00:12.630 --> 00:00:16.340
animations where we would remove
a view and then animate

00:00:16.340 --> 00:00:19.090
both the swipe of the item out
of the ListView as well as the

00:00:19.090 --> 00:00:22.600
collapse around where the item
used to be, animating all the

00:00:22.600 --> 00:00:24.730
other views into place.

00:00:24.730 --> 00:00:28.650
So that was all good-- you can
run that kind of animation on

00:00:28.650 --> 00:00:31.020
the property animation
system that goes all

00:00:31.020 --> 00:00:33.240
the way back to 3.0.

00:00:33.240 --> 00:00:35.890
The demo I'm going to show you
today looks remarkably similar

00:00:35.890 --> 00:00:38.250
to that, but there's an
important twist to it.

00:00:38.250 --> 00:00:40.770
So first let's see the demo.

00:00:40.770 --> 00:00:42.920
If you want to go back and watch
the previous show so you

00:00:42.920 --> 00:00:45.580
have some context with
that, that's fine.

00:00:45.580 --> 00:00:46.410
OK, you're back.

00:00:46.410 --> 00:00:47.080
Here we go.

00:00:47.080 --> 00:00:49.720
Let's run the current demo,
and this should look

00:00:49.720 --> 00:00:51.680
remarkably similar to
what we saw before.

00:00:51.680 --> 00:00:53.480
So we swipe an item out.

00:00:53.480 --> 00:00:55.760
If we swipe it a little bit, it
animates back into place.

00:00:55.760 --> 00:00:57.640
If we swipe it further, it
animates out, and then it

00:00:57.640 --> 00:00:59.730
animates the gap to be closed.

00:00:59.730 --> 00:01:02.060
So here's twist.

00:01:02.060 --> 00:01:06.590
If we run this on Gingerbread,
which is on my Nexus S here,

00:01:06.590 --> 00:01:08.630
you can see this
same animation.

00:01:08.630 --> 00:01:11.250
So this is a question I get a
lot with my animation demos

00:01:11.250 --> 00:01:13.090
is, gee, all this property
animation

00:01:13.090 --> 00:01:14.170
stuff is really cool.

00:01:14.170 --> 00:01:16.590
How would I do it on
older releases?

00:01:16.590 --> 00:01:18.810
Hopefully, that issue is
going away over time.

00:01:18.810 --> 00:01:22.390
But if you are concerned about
Gingerbread releases still for

00:01:22.390 --> 00:01:25.480
your application, then maybe we
can see how you could get

00:01:25.480 --> 00:01:28.840
this kind of technique even
on that older release.

00:01:28.840 --> 00:01:30.160
So let's take a look
at the code.

00:01:30.160 --> 00:01:32.380
I'm not going to go over all the
elements of the code-- the

00:01:32.380 --> 00:01:35.830
background drawing, and the
shadow, and everything that

00:01:35.830 --> 00:01:36.860
was in the previous talk.

00:01:36.860 --> 00:01:38.920
Just go ahead and check out that
other DevBytes, as well

00:01:38.920 --> 00:01:42.560
as the Google I/O animation talk
that that demo came from.

00:01:42.560 --> 00:01:46.240
Instead, I just want to focus on
the aspect where we're able

00:01:46.240 --> 00:01:48.870
to run both the new property
style animations as well as

00:01:48.870 --> 00:01:50.240
the older animations.

00:01:50.240 --> 00:01:52.730
So in our touch listener, we're
listening for these

00:01:52.730 --> 00:01:53.140
swipe events.

00:01:53.140 --> 00:01:55.150
And we're doing essentially
the same thing--

00:01:55.150 --> 00:01:57.820
we're listening for the down
event, and we're tracking

00:01:57.820 --> 00:01:59.150
where that down event occurs.

00:01:59.150 --> 00:02:02.270
And then in the move event, we
figure out where the new

00:02:02.270 --> 00:02:05.780
x-position is to figure out how
far to move this thing.

00:02:05.780 --> 00:02:08.210
And at this point you might be
thinking yeah, yeah, yeah, but

00:02:08.210 --> 00:02:11.060
we're actually using
TranslationX.

00:02:11.060 --> 00:02:14.470
We're using a property that
doesn't actually exist on

00:02:14.470 --> 00:02:14.890
Gingerbread.

00:02:14.890 --> 00:02:16.500
So how does that work?

00:02:16.500 --> 00:02:18.070
That's the key.

00:02:18.070 --> 00:02:21.130
So before we could get the
TranslationX value and we

00:02:21.130 --> 00:02:23.020
could set the TranslationX
value, and these are view

00:02:23.020 --> 00:02:24.870
properties that came
in in 3.0.

00:02:24.870 --> 00:02:27.130
On Gingerbread, those properties
don't exist on

00:02:27.130 --> 00:02:28.580
view, so it's a little
bit difficult to

00:02:28.580 --> 00:02:29.660
work with them there.

00:02:29.660 --> 00:02:33.120
So instead what we do is call
this setSwipePosition.

00:02:33.120 --> 00:02:35.590
So I refactored the code so that
we could do the correct

00:02:35.590 --> 00:02:38.060
thing on either release,
Gingerbread or

00:02:38.060 --> 00:02:40.390
non-Gingerbread,
PostGingerbread.

00:02:40.390 --> 00:02:44.340
So in that method,
setSwipePosition, you can see

00:02:44.340 --> 00:02:45.560
how this works.

00:02:45.560 --> 00:02:47.720
So if runtime is
PostGingerbread, this is what

00:02:47.720 --> 00:02:48.250
we did before.

00:02:48.250 --> 00:02:51.820
We simply set the TranslationX
value, we basically pop this

00:02:51.820 --> 00:02:54.830
item that we were swiping over
to the appropriate place, and

00:02:54.830 --> 00:02:58.100
then we set the alpha value to
be more or less translucent

00:02:58.100 --> 00:03:00.720
based on how far away it was
from the original position, or

00:03:00.720 --> 00:03:02.830
how close to the edge
of the screen.

00:03:02.830 --> 00:03:06.350
If you're on Gingerbread, those
properties don't exist,

00:03:06.350 --> 00:03:08.120
we don't have Alpha, we don't
have TranslationX,

00:03:08.120 --> 00:03:09.100
so what can we do?

00:03:09.100 --> 00:03:11.260
We can work with the old
style animations.

00:03:11.260 --> 00:03:16.100
This is the animation system
that existed prior to 3.0.

00:03:16.100 --> 00:03:18.090
Well, we can use that if we're
actually setting these

00:03:18.090 --> 00:03:22.280
properties and faking the way
the view looks so that it

00:03:22.280 --> 00:03:23.760
essentially looks the same.

00:03:23.760 --> 00:03:24.910
It's not quite the same because

00:03:24.910 --> 00:03:26.470
there is no alpha property.

00:03:26.470 --> 00:03:29.600
But it is more translucent, so
it's effectively visually the

00:03:29.600 --> 00:03:30.900
same thing.

00:03:30.900 --> 00:03:31.570
So we can set a

00:03:31.570 --> 00:03:33.230
TranslateAnimation on the item.

00:03:33.230 --> 00:03:35.370
We can set an AlphaAnimation
on the item.

00:03:35.370 --> 00:03:38.030
And we can create an
AnimationSet to bundle

00:03:38.030 --> 00:03:39.240
both of these up.

00:03:39.240 --> 00:03:41.620
We add both of these
animations to the

00:03:41.620 --> 00:03:42.640
AnimationSet.

00:03:42.640 --> 00:03:44.930
We setFillAfter and FillEnabled
to true, which

00:03:44.930 --> 00:03:47.400
means they're going to hold
their value even when the

00:03:47.400 --> 00:03:49.210
animation is over, and
then we're going

00:03:49.210 --> 00:03:50.350
to start the animation.

00:03:50.350 --> 00:03:53.770
So basically we set up the
animations on these things.

00:03:53.770 --> 00:03:56.400
And we're going to effectively
set the alpha and the

00:03:56.400 --> 00:03:59.470
translation property of this
item by running these

00:03:59.470 --> 00:04:02.080
animations to a particular
value.

00:04:02.080 --> 00:04:05.200
And notice that we're actually
running the translation

00:04:05.200 --> 00:04:07.820
animation basically from the
current value to the current

00:04:07.820 --> 00:04:10.250
value, which means we're going
to just slam it in there where

00:04:10.250 --> 00:04:12.560
it's going to start and
end at the same value.

00:04:12.560 --> 00:04:14.670
And even though the animation
is ended, we've set

00:04:14.670 --> 00:04:18.850
FillEnabled to true, and
FillAfter to true, which means

00:04:18.850 --> 00:04:21.180
that they're going to
stay at that value.

00:04:21.180 --> 00:04:23.770
So that's the trick to actually,
not animating the

00:04:23.770 --> 00:04:26.430
swipe, but actually setting the
swipe to be at the right

00:04:26.430 --> 00:04:28.490
position under the
user's finger.

00:04:28.490 --> 00:04:30.480
OK, so that's setting the swipe,
but then we have the

00:04:30.480 --> 00:04:32.170
other behavior of actually
animating the

00:04:32.170 --> 00:04:33.930
thing after it's removed.

00:04:33.930 --> 00:04:38.140
So we come in here and say, OK,
when the user lifts up, if

00:04:38.140 --> 00:04:42.490
they were swiping this item,
then we want to figure out how

00:04:42.490 --> 00:04:45.400
far to move, and then we want
to animate the swipe.

00:04:45.400 --> 00:04:47.700
So we call this other method
down here-- again, we've

00:04:47.700 --> 00:04:50.380
refactored this into a separate
method where we

00:04:50.380 --> 00:04:51.990
either do the Gingerbread
thing or the

00:04:51.990 --> 00:04:53.230
PostGingerbread thing.

00:04:53.230 --> 00:04:56.400
PostGingerbread, this looks
similar to it did before.

00:04:56.400 --> 00:04:59.460
If you saw that other video,
we animate, we use View

00:04:59.460 --> 00:05:01.440
Property Animator, we're
animating alpha, we're

00:05:01.440 --> 00:05:03.400
animating TranslationX.

00:05:03.400 --> 00:05:06.790
Here we use a listener, so
actually this animation will

00:05:06.790 --> 00:05:09.300
work all the way back to 3.1.

00:05:09.300 --> 00:05:14.190
There's no dependency on the
Jelly Bean API with end action

00:05:14.190 --> 00:05:15.700
in View Property Animator
anymore.

00:05:15.700 --> 00:05:17.450
Instead we just set a listener,
and when the

00:05:17.450 --> 00:05:20.460
animation ends then we do the
appropriate thing-- we restore

00:05:20.460 --> 00:05:23.990
values, we animate to close
the gap, all that stuff.

00:05:23.990 --> 00:05:26.320
If we're running in Gingerbread,
to animate the

00:05:26.320 --> 00:05:29.370
swipe, this looks remarkably
similar to what we saw before

00:05:29.370 --> 00:05:31.120
where we were setting
the swipe position.

00:05:31.120 --> 00:05:33.500
All we're doing is animating
the swipe position now.

00:05:33.500 --> 00:05:36.210
So we're starting from the
current x and the current

00:05:36.210 --> 00:05:39.240
alpha value from wherever that
item ended up, and we're

00:05:39.240 --> 00:05:42.540
animating either off the screen
or back into place.

00:05:42.540 --> 00:05:44.350
Again, we're using
an animation set.

00:05:44.350 --> 00:05:46.420
We're no longer setting
FillEnabled because we don't

00:05:46.420 --> 00:05:47.310
want the whole [? devalue ?]

00:05:47.310 --> 00:05:48.040
when we're done.

00:05:48.040 --> 00:05:51.810
Instead we're just going to
animate off or animate back.

00:05:51.810 --> 00:05:54.960
And when the animation ends,
then we either restore values

00:05:54.960 --> 00:05:57.800
to where they were if we're
animating back, or we animate

00:05:57.800 --> 00:06:01.930
the other views, and for this
one, we want to animate the

00:06:01.930 --> 00:06:03.210
gap closed.

00:06:03.210 --> 00:06:08.050
So using the same technique that
we used in the previous

00:06:08.050 --> 00:06:12.430
DevBytes video, we figure out
where all the views are and we

00:06:12.430 --> 00:06:15.260
associate those view positions
with the itemId.

00:06:15.260 --> 00:06:19.850
So we're using a stable ID array
adapter here again, and

00:06:19.850 --> 00:06:21.460
we store these in a hash map.

00:06:21.460 --> 00:06:24.820
And then we remove the item
from the adapter.

00:06:24.820 --> 00:06:26.910
That forces a notify data
set change that

00:06:26.910 --> 00:06:27.950
will force a layout.

00:06:27.950 --> 00:06:30.620
But before that layout is
displayed on the screen, our

00:06:30.620 --> 00:06:33.450
onPreDrawListener in the
ViewTreeObserver kicks in.

00:06:33.450 --> 00:06:36.110
And we can now track the
positions of all the views in

00:06:36.110 --> 00:06:38.680
the current version of the
ListView and figure out what

00:06:38.680 --> 00:06:41.170
itemIds those are associated
with, compare them to the

00:06:41.170 --> 00:06:43.740
other itemIds, and animate
the changes.

00:06:43.740 --> 00:06:45.940
Again, all of this is
the same as before.

00:06:45.940 --> 00:06:49.050
The only trick here is how to
actually make it work in

00:06:49.050 --> 00:06:50.230
Gingerbread.

00:06:50.230 --> 00:06:53.250
So we remove the
PreDrawListener, we figure out

00:06:53.250 --> 00:06:59.420
where things need to go, and
then we run the animation,

00:06:59.420 --> 00:07:03.530
which is right here.

00:07:03.530 --> 00:07:07.110
moveView runs the animation to
actually shift these things on

00:07:07.110 --> 00:07:07.890
the screen.

00:07:07.890 --> 00:07:11.060
Again, we have a Gingerbread a
non-Gingerbread version of

00:07:11.060 --> 00:07:12.180
this thing.

00:07:12.180 --> 00:07:14.480
The non-Gingerbread should look
remarkably similar to

00:07:14.480 --> 00:07:16.940
what it did before, except in
this case we're actually using

00:07:16.940 --> 00:07:19.900
ObjectAnimators, sort of
interchangeable with View

00:07:19.900 --> 00:07:20.640
Property Animator.

00:07:20.640 --> 00:07:22.350
View Property Animator is
a little bit more of a

00:07:22.350 --> 00:07:23.750
streamlined API.

00:07:23.750 --> 00:07:26.580
I happen to use object animators
in this case.

00:07:26.580 --> 00:07:28.760
In the Gingerbread version,
again we're using a

00:07:28.760 --> 00:07:32.810
TranslateAnimation, pre-3.0
APIs, and we're saying, OK, I

00:07:32.810 --> 00:07:36.800
want this view to move from the
current start and end x-

00:07:36.800 --> 00:07:37.640
and y-positions.

00:07:37.640 --> 00:07:40.060
And those were calculated
according to where the item

00:07:40.060 --> 00:07:42.100
contents were before and
after the layout

00:07:42.100 --> 00:07:43.890
change on the ListView.

00:07:43.890 --> 00:07:46.780
And we set the duration,
and we start the

00:07:46.780 --> 00:07:49.320
animation, and that's it.

00:07:49.320 --> 00:07:51.180
Really fairly straightforward.

00:07:51.180 --> 00:07:54.850
The only trick was that the
old approach was using

00:07:54.850 --> 00:07:57.950
properties that didn't exist
on view prior to 3.0, so we

00:07:57.950 --> 00:07:59.070
can't use that.

00:07:59.070 --> 00:08:02.210
So we use the old animations
instead to fake the system out

00:08:02.210 --> 00:08:04.040
and make it look the same.

00:08:04.040 --> 00:08:06.490
And then the animation, same
thing, we're using animation

00:08:06.490 --> 00:08:09.700
APIs based on properties, didn't
exist prior to 3.0.

00:08:09.700 --> 00:08:12.520
So instead, we'll use the old
animations that didn't use

00:08:12.520 --> 00:08:14.980
properties, but give the
same visual effects to

00:08:14.980 --> 00:08:15.880
what we were doing.

00:08:15.880 --> 00:08:18.320
Everything else is the same
logic-- track the itemIds

00:08:18.320 --> 00:08:21.130
before and after, where the
views associated with those

00:08:21.130 --> 00:08:24.180
itemIds were, and then
simply animate the

00:08:24.180 --> 00:08:25.700
changes and that's it.

00:08:25.700 --> 00:08:28.810
So go ahead and check out the
animation talk called "A

00:08:28.810 --> 00:08:33.000
Moving Experience" at Google I/O
to get a little bit more

00:08:33.000 --> 00:08:36.610
glimpse into how the demo
actually works and the

00:08:36.610 --> 00:08:37.740
reasons behind it.

00:08:37.740 --> 00:08:39.830
And check out the other DevBytes
videos to see the

00:08:39.830 --> 00:08:41.700
overall structure of the code
and some of the other elements

00:08:41.700 --> 00:08:43.090
that I didn't talk
about today.

00:08:43.090 --> 00:08:44.920
And check out the code
for this demo.

00:08:44.920 --> 00:08:46.170
Thanks.

