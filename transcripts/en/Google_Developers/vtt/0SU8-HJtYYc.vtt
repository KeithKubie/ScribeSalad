WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:11.922
[MUSIC PLAYING]

00:00:11.922 --> 00:00:13.380
RAE WANG: Good
afternoon, everyone.

00:00:13.380 --> 00:00:15.310
Welcome back.

00:00:15.310 --> 00:00:18.720
It's always hard to be the
session right after lunch.

00:00:18.720 --> 00:00:19.340
How was food?

00:00:19.340 --> 00:00:20.261
Was it good?

00:00:20.261 --> 00:00:20.760
Right.

00:00:20.760 --> 00:00:24.550
Google is known
for our good food.

00:00:24.550 --> 00:00:27.322
But did you eat too much so
that now you're a little sleepy?

00:00:27.322 --> 00:00:28.159
I hope not.

00:00:28.159 --> 00:00:29.450
Well actually, I'm not worried.

00:00:29.450 --> 00:00:31.550
Because what we're
going to talk about

00:00:31.550 --> 00:00:34.160
is going to be real exciting and
close and dear to your heart.

00:00:34.160 --> 00:00:34.695
Dev Ops.

00:00:34.695 --> 00:00:36.070
So we're going to
be able to have

00:00:36.070 --> 00:00:38.140
you engaged for the next hour.

00:00:38.140 --> 00:00:41.530
We're going to talk about how
to not only write code, but also

00:00:41.530 --> 00:00:44.500
shepherd it to production,
maintain your live site,

00:00:44.500 --> 00:00:47.670
and troubleshoot and
debug successfully.

00:00:47.670 --> 00:00:48.750
I'm Rae Wang.

00:00:48.750 --> 00:00:51.370
I'm a product manager on
the Google Cloud developer

00:00:51.370 --> 00:00:52.560
experience team.

00:00:52.560 --> 00:00:54.800
And I have here
with me Chris Smith,

00:00:54.800 --> 00:00:59.228
who is a tech lead on the
team and my demo buddy today.

00:00:59.228 --> 00:01:01.196
The clicker.

00:01:01.196 --> 00:01:03.660
OK.

00:01:03.660 --> 00:01:07.720
I used to work on the back
end of a large scale service.

00:01:07.720 --> 00:01:09.480
It was real exciting,
the kind of problems

00:01:09.480 --> 00:01:11.450
you get only when
a scale is large,

00:01:11.450 --> 00:01:14.440
and the number of customers
you get to impact.

00:01:14.440 --> 00:01:16.319
But it was also frustrating.

00:01:16.319 --> 00:01:17.735
We had a lot of
really good ideas,

00:01:17.735 --> 00:01:21.040
we wanted to launch a new app
and add features and impact

00:01:21.040 --> 00:01:22.010
customers.

00:01:22.010 --> 00:01:25.780
But in the end, the time that
we got to spend writing code

00:01:25.780 --> 00:01:27.940
was about less
than half the time.

00:01:27.940 --> 00:01:29.570
So what were we doing, right?

00:01:29.570 --> 00:01:33.015
We were caught in new releases,
building tests and trying

00:01:33.015 --> 00:01:37.674
to deploy to production,
debug, the live site duties.

00:01:37.674 --> 00:01:39.090
Not to mention
when I was on call,

00:01:39.090 --> 00:01:41.060
I was paged around the clock.

00:01:41.060 --> 00:01:43.730
That wasn't fun, I
didn't have a life.

00:01:43.730 --> 00:01:47.180
Here at Google, we believe
that a Cloud is not just

00:01:47.180 --> 00:01:50.980
about giving you raw VM
and storage resources.

00:01:50.980 --> 00:01:53.020
You deserve to have
a platform that

00:01:53.020 --> 00:01:56.470
can take care of all the time
consuming, repetitive Dev Ops

00:01:56.470 --> 00:01:58.810
tasks so that you
can be freed up

00:01:58.810 --> 00:02:00.690
to work on what's
more important.

00:02:00.690 --> 00:02:03.830
To launch that new app, to
build a new business idea,

00:02:03.830 --> 00:02:07.250
and still have a life, right?

00:02:07.250 --> 00:02:09.250
And we want to share
this dream with you.

00:02:09.250 --> 00:02:13.120
We want to invite you to join us
as we begin this journey to set

00:02:13.120 --> 00:02:16.590
a higher bar for what
Cloud can do for you.

00:02:16.590 --> 00:02:18.350
In the next hour,
you're going to be

00:02:18.350 --> 00:02:22.450
able to see some of the first
steps that we have made,

00:02:22.450 --> 00:02:26.570
as well as the directions
that we're heading.

00:02:26.570 --> 00:02:29.670
And now first, I
have a treat for you.

00:02:29.670 --> 00:02:32.180
So some of you might know that
Google runs some pretty large

00:02:32.180 --> 00:02:34.907
apps, like google.com,
Gmail, YouTube,

00:02:34.907 --> 00:02:35.865
do they ring any bells?

00:02:35.865 --> 00:02:37.980
You use them, right?

00:02:37.980 --> 00:02:40.830
Our developers work
efficiently to build and run

00:02:40.830 --> 00:02:44.160
these applications
because they have access

00:02:44.160 --> 00:02:47.980
to a great stack of tools
that Google spent the last 15

00:02:47.980 --> 00:02:50.840
years building and perfecting.

00:02:50.840 --> 00:02:53.300
Now today, we have the
privilege of hearing

00:02:53.300 --> 00:02:55.600
from the person at
the heart of this.

00:02:55.600 --> 00:02:57.892
Melody Meckfessel, our
engineering director

00:02:57.892 --> 00:02:59.100
for developer infrastructure.

00:03:04.529 --> 00:03:06.070
MELODY MECKFESSEL:
Thanks a lot, Rae.

00:03:06.070 --> 00:03:07.630
So hi, I'm Melody.

00:03:07.630 --> 00:03:10.760
I lead a team at Google
focused on developer tooling

00:03:10.760 --> 00:03:13.360
and infrastructure.

00:03:13.360 --> 00:03:17.360
So what we do is we organize
software development at Google.

00:03:17.360 --> 00:03:19.200
And hopefully make it fun.

00:03:19.200 --> 00:03:22.690
But most importantly,
make it fast and scalable.

00:03:22.690 --> 00:03:25.660
And it's all about
Google engineers.

00:03:25.660 --> 00:03:29.310
So from the time that engineers
sit down to write code,

00:03:29.310 --> 00:03:31.760
to search it, to
version it, and then

00:03:31.760 --> 00:03:35.880
to build, test, and release
it reliably to our Cloud.

00:03:35.880 --> 00:03:37.645
Developer tooling
enables engineers

00:03:37.645 --> 00:03:39.560
to do all of those things.

00:03:39.560 --> 00:03:42.840
So our whole mission is to
make engineers lives easier

00:03:42.840 --> 00:03:44.670
so engineers can focus on code.

00:03:44.670 --> 00:03:47.990
And as you heard Urs
say in the keynote,

00:03:47.990 --> 00:03:53.060
we want you to focus on
what you love, writing code.

00:03:53.060 --> 00:03:54.930
But it's not just
about Google engineers.

00:03:54.930 --> 00:03:56.760
It's about all of you.

00:03:56.760 --> 00:04:00.910
We want to take what we've built
internally and offer it to you.

00:04:00.910 --> 00:04:03.260
So I'm going to talk a
little bit now about some

00:04:03.260 --> 00:04:05.570
of our internal tools to
set the stage for the things

00:04:05.570 --> 00:04:08.670
that we want to offer you.

00:04:08.670 --> 00:04:09.350
OK.

00:04:09.350 --> 00:04:11.860
So how does Google build?

00:04:11.860 --> 00:04:15.160
Well, our build system supports
a variety of languages.

00:04:15.160 --> 00:04:18.450
And we have a recipe for
how to build our software.

00:04:18.450 --> 00:04:21.000
We enable engineers to
express relationships

00:04:21.000 --> 00:04:23.350
between libraries and binaries.

00:04:23.350 --> 00:04:25.750
And to get fast
feedback on their build.

00:04:25.750 --> 00:04:28.700
Well you might be asking,
how does this really happen?

00:04:28.700 --> 00:04:32.680
Well under the hood, just
think massive parallelism.

00:04:32.680 --> 00:04:35.080
Build actions being
farmed out to thousands

00:04:35.080 --> 00:04:37.790
of dedicated worker
machines getting

00:04:37.790 --> 00:04:40.590
the full power of
Google's Cloud.

00:04:40.590 --> 00:04:44.440
But also, we cache results
across machines and users

00:04:44.440 --> 00:04:46.270
so that there's a
transparent speed

00:04:46.270 --> 00:04:50.160
up for everyone when
somebody builds.

00:04:50.160 --> 00:04:52.040
So let me tell you a story.

00:04:52.040 --> 00:04:56.850
So before I joined Google
it was not uncommon

00:04:56.850 --> 00:05:01.790
for me to, say, kick off a
build before I left the office.

00:05:01.790 --> 00:05:04.500
I'd go home and I'd get
a good night's sleep

00:05:04.500 --> 00:05:08.835
and I'd come back, and
then I'd see what happened.

00:05:08.835 --> 00:05:10.059
Were their breakages?

00:05:10.059 --> 00:05:11.350
I'd have to go figure that out.

00:05:11.350 --> 00:05:13.590
And then I'd have to
start it all over again.

00:05:13.590 --> 00:05:17.840
So when I joined Google I
thought wow, this is amazing.

00:05:17.840 --> 00:05:21.560
This is not where I came
from in terms of velocity,

00:05:21.560 --> 00:05:24.970
and speed, and feedback
for me as an engineer.

00:05:24.970 --> 00:05:27.850
And I've seen over the years,
the speed and the scale

00:05:27.850 --> 00:05:29.560
increase at Google.

00:05:29.560 --> 00:05:34.190
So now talk to nooglers,
so new Google engineers.

00:05:34.190 --> 00:05:36.790
They come in and they
say the same thing to me.

00:05:36.790 --> 00:05:37.710
Melody, wow.

00:05:37.710 --> 00:05:39.780
These developer
tools are amazing.

00:05:39.780 --> 00:05:43.290
But wait, one month
later, it's too slow.

00:05:43.290 --> 00:05:46.240
It's too slow to get a build
result in under a minute

00:05:46.240 --> 00:05:48.300
or in a matter of
seconds, right?

00:05:48.300 --> 00:05:49.600
It's not enough.

00:05:49.600 --> 00:05:51.030
So that point I
want to make there

00:05:51.030 --> 00:05:53.680
is that the speed and the scale
are something that we do well.

00:05:53.680 --> 00:05:56.000
And we're continuing
to set the bar

00:05:56.000 --> 00:05:59.480
higher and higher for ourselves.

00:05:59.480 --> 00:05:59.980
OK.

00:05:59.980 --> 00:06:01.810
What does Google do for testing?

00:06:01.810 --> 00:06:05.201
Because testing and developing
safely go hand in hand.

00:06:05.201 --> 00:06:05.700
Right?

00:06:05.700 --> 00:06:11.020
So we test the entire code
base after every repo update.

00:06:11.020 --> 00:06:12.840
And the other thing
is that we provide

00:06:12.840 --> 00:06:17.990
testing before submit so that
we can identify breakages

00:06:17.990 --> 00:06:19.940
before they even happen.

00:06:19.940 --> 00:06:22.110
I think that's pretty cool.

00:06:22.110 --> 00:06:25.249
Before submit, you know
what's going to be broken.

00:06:25.249 --> 00:06:26.790
The other thing that
we do is we know

00:06:26.790 --> 00:06:30.100
that we need to test in a
variety of environments.

00:06:30.100 --> 00:06:32.680
So whether it's development,
or staging, or testing,

00:06:32.680 --> 00:06:34.330
we make it easy
for engineers to be

00:06:34.330 --> 00:06:37.100
able to switch environments
and do the testing that they

00:06:37.100 --> 00:06:38.770
need to do.

00:06:38.770 --> 00:06:41.850
We also need to think about
things like automated web app

00:06:41.850 --> 00:06:42.860
testing, right?

00:06:42.860 --> 00:06:46.630
All the various OS and
browser combinations

00:06:46.630 --> 00:06:50.520
that our users use, we need to
be able to test all of those.

00:06:50.520 --> 00:06:52.520
And so we run millions
of tests a day

00:06:52.520 --> 00:06:55.000
and 20 plus OS or
browser combinations

00:06:55.000 --> 00:07:01.411
to make sure what's going out
the door is the best quality.

00:07:01.411 --> 00:07:01.910
OK.

00:07:01.910 --> 00:07:05.750
So let's talk a little bit about
what Google does internally

00:07:05.750 --> 00:07:07.860
to manage our code.

00:07:07.860 --> 00:07:13.330
So we have a single code
tree with very fast access.

00:07:13.330 --> 00:07:17.739
So I know many of you--
DVCS, raise your hands?

00:07:17.739 --> 00:07:19.030
There's audience participation.

00:07:19.030 --> 00:07:20.000
I should've warned you.

00:07:20.000 --> 00:07:21.690
I'm going to be asking
you lots of questions.

00:07:21.690 --> 00:07:22.190
OK.

00:07:22.190 --> 00:07:23.411
Just one?

00:07:23.411 --> 00:07:23.910
Really?

00:07:23.910 --> 00:07:24.840
OK.

00:07:24.840 --> 00:07:25.830
All right.

00:07:25.830 --> 00:07:28.890
So even though we
have this single tree,

00:07:28.890 --> 00:07:30.780
we do want to provide
a lot of flexibility

00:07:30.780 --> 00:07:32.240
around workflows for engineers.

00:07:32.240 --> 00:07:36.670
So we support-- some get
workflows internally.

00:07:36.670 --> 00:07:39.170
We merge early and often.

00:07:39.170 --> 00:07:42.620
We're constantly doing
integrations with the code.

00:07:42.620 --> 00:07:44.540
The other thing that I
think is pretty amazing

00:07:44.540 --> 00:07:47.310
is that the code
base is very open.

00:07:47.310 --> 00:07:52.240
Engineers can go look, view,
modify, experiment with code

00:07:52.240 --> 00:07:55.520
across the entire repo.

00:07:55.520 --> 00:07:57.317
So I think that's
pretty amazing, right?

00:07:57.317 --> 00:07:58.275
That level of openness.

00:08:01.500 --> 00:08:05.550
As engineers, I think I can
safely say, we love languages.

00:08:05.550 --> 00:08:06.240
Right?

00:08:06.240 --> 00:08:07.942
We love languages.

00:08:07.942 --> 00:08:10.690
So we support a
variety of languages.

00:08:10.690 --> 00:08:14.630
C++, Go, Java, Python, right?

00:08:14.630 --> 00:08:15.300
It's important.

00:08:15.300 --> 00:08:18.380
We need to pick the appropriate
language for the problem

00:08:18.380 --> 00:08:20.991
that we're trying to solve.

00:08:20.991 --> 00:08:21.490
OK.

00:08:21.490 --> 00:08:25.510
Well, what does this actually
mean for an engineer?

00:08:25.510 --> 00:08:28.360
Having a single code tree
means that we can do things

00:08:28.360 --> 00:08:31.540
like globally analyze
and refactor our code.

00:08:31.540 --> 00:08:35.350
And with over 300 million
plus lines of code at Google,

00:08:35.350 --> 00:08:39.429
keeping the code tree clean
is very important to us.

00:08:39.429 --> 00:08:41.669
So here's another story.

00:08:41.669 --> 00:08:46.720
I've seen this multiple times in
our history of changing an API.

00:08:46.720 --> 00:08:47.710
What do we need to do?

00:08:47.710 --> 00:08:51.090
We need to find all
the usage of that API.

00:08:51.090 --> 00:08:55.440
We generate CLs to send
to the code owners.

00:08:55.440 --> 00:08:58.650
Those need to go through review,
and testing, and push out.

00:08:58.650 --> 00:09:03.670
These large scale code changes
and massive refactorings

00:09:03.670 --> 00:09:06.940
have enabled us to
increase our velocity.

00:09:06.940 --> 00:09:09.970
And we get that benefit
with a single code tree.

00:09:09.970 --> 00:09:12.090
Fast access means
that engineers can

00:09:12.090 --> 00:09:14.600
answer all kinds of interesting
questions about the code.

00:09:14.600 --> 00:09:15.800
Who's using my API?

00:09:15.800 --> 00:09:17.270
What's this library?

00:09:17.270 --> 00:09:20.110
Look for another piece of code.

00:09:20.110 --> 00:09:22.530
And merging early
and often enables

00:09:22.530 --> 00:09:25.790
us to do easy rollback
when things go wrong.

00:09:25.790 --> 00:09:27.620
And we know we're
going to break things,

00:09:27.620 --> 00:09:31.950
so we need to make sure
we can roll back safely.

00:09:31.950 --> 00:09:34.490
Having the code be
open means that we

00:09:34.490 --> 00:09:35.700
can help each other out.

00:09:35.700 --> 00:09:38.870
We can help fix bugs.

00:09:38.870 --> 00:09:41.280
An issue comes up, we can
bring together the right people

00:09:41.280 --> 00:09:43.110
to get it fixed.

00:09:43.110 --> 00:09:45.500
And quality is very
important to us.

00:09:45.500 --> 00:09:48.110
So we do have
mandatory code review

00:09:48.110 --> 00:09:52.560
by experts and our
code developers.

00:09:52.560 --> 00:09:57.490
So I'm going to take a pause
there for a second and ask you,

00:09:57.490 --> 00:10:01.850
how many builds do you
think Google does a day?

00:10:01.850 --> 00:10:04.020
Audience participation.

00:10:04.020 --> 00:10:05.880
How many?

00:10:05.880 --> 00:10:06.380
Millions.

00:10:09.070 --> 00:10:09.570
OK.

00:10:09.570 --> 00:10:11.470
How many tests?

00:10:11.470 --> 00:10:13.310
One build.

00:10:13.310 --> 00:10:14.830
That's a good one.

00:10:14.830 --> 00:10:18.150
How many tests?

00:10:18.150 --> 00:10:19.000
Anyone?

00:10:19.000 --> 00:10:21.878
Bueller?

00:10:21.878 --> 00:10:22.378
OK.

00:10:22.378 --> 00:10:23.350
OK.

00:10:23.350 --> 00:10:25.240
All right, well here's
some of the stats

00:10:25.240 --> 00:10:26.320
that we're talking about.

00:10:26.320 --> 00:10:29.010
So around 800,000
builds a day leading

00:10:29.010 --> 00:10:31.640
to 2 petabytes of build output.

00:10:31.640 --> 00:10:36.600
25,000 changelists in a day
with-- per minute ranging

00:10:36.600 --> 00:10:40.690
from 20 plus per minute to
60 plus per minute at peak.

00:10:40.690 --> 00:10:43.410
So the tooling that
we've built at Google,

00:10:43.410 --> 00:10:46.760
really, the whole focus
is to enable velocity.

00:10:46.760 --> 00:10:49.310
And speed and scale
are critical for us.

00:10:51.960 --> 00:10:55.830
So working at speed and
scale, it's a challenge.

00:10:55.830 --> 00:11:00.520
And the engineers keep-- we keep
raising the bar for ourselves.

00:11:00.520 --> 00:11:02.010
But what's it like?

00:11:02.010 --> 00:11:04.040
What's the culture like?

00:11:04.040 --> 00:11:06.720
And I just wanted to point
out a couple of things.

00:11:06.720 --> 00:11:08.800
This idea of having
the code base be open,

00:11:08.800 --> 00:11:12.350
collaboration and
co-development are key.

00:11:12.350 --> 00:11:17.490
With this accountability to
help each other fix issues.

00:11:17.490 --> 00:11:20.990
Sharing code across
products means

00:11:20.990 --> 00:11:23.630
that engineers don't have to
write code that already exists.

00:11:23.630 --> 00:11:25.110
We have common libraries.

00:11:25.110 --> 00:11:27.300
And common services.

00:11:27.300 --> 00:11:29.400
And different pieces
that we can reuse,

00:11:29.400 --> 00:11:32.910
and that leads to velocity.

00:11:32.910 --> 00:11:36.550
And engineers have autonomy.

00:11:36.550 --> 00:11:38.490
Engineers can make
their own choices

00:11:38.490 --> 00:11:41.330
around what makes
them productive.

00:11:41.330 --> 00:11:44.890
So how many Emacs users?

00:11:44.890 --> 00:11:46.290
Audience participation.

00:11:46.290 --> 00:11:48.230
OK All right.

00:11:48.230 --> 00:11:50.950
How about Eclipse?

00:11:50.950 --> 00:11:53.300
All right!

00:11:53.300 --> 00:11:55.660
Dare I say Vi?

00:11:55.660 --> 00:11:56.470
Yeah!

00:11:56.470 --> 00:11:59.600
There we go!

00:11:59.600 --> 00:12:05.100
So we know that we need to offer
a variety of tools and options

00:12:05.100 --> 00:12:06.600
so that engineers
have this choice

00:12:06.600 --> 00:12:08.570
to pick what works for them.

00:12:08.570 --> 00:12:11.010
And near and dear to my
heart, as an engineering

00:12:11.010 --> 00:12:13.290
team building tools
and infrastructure

00:12:13.290 --> 00:12:15.170
for other engineers,
we need to make

00:12:15.170 --> 00:12:17.340
sure it makes us productive.

00:12:17.340 --> 00:12:18.530
We use it ourselves.

00:12:18.530 --> 00:12:20.660
We do this thing
called dog fooding

00:12:20.660 --> 00:12:23.560
where we make sure that it
works before sending it out

00:12:23.560 --> 00:12:25.811
to our users.

00:12:25.811 --> 00:12:27.310
So I don't know if
you can tell, I'm

00:12:27.310 --> 00:12:29.610
a little proud of what
we've built internally.

00:12:29.610 --> 00:12:30.995
I'm proud of it.

00:12:30.995 --> 00:12:32.630
And it sounds
pretty good, right?

00:12:37.050 --> 00:12:39.640
Well, we struggle.

00:12:39.640 --> 00:12:44.340
And not to air dirty
laundry here, but I will.

00:12:44.340 --> 00:12:47.220
It's never fast enough.

00:12:47.220 --> 00:12:51.050
Every single engineer that I
talk to, it's not fast enough.

00:12:51.050 --> 00:12:52.890
The build is too slow.

00:12:52.890 --> 00:12:57.780
Engineers want and expect
almost instantaneous results

00:12:57.780 --> 00:12:59.620
for what's broken.

00:12:59.620 --> 00:13:00.520
What test is broken?

00:13:00.520 --> 00:13:04.370
So that you fix it so we can
get features out to our users.

00:13:04.370 --> 00:13:07.840
The rate of change
is so fast, it's

00:13:07.840 --> 00:13:09.280
hard to keep up some times.

00:13:09.280 --> 00:13:12.460
So if you have
dependencies in storage

00:13:12.460 --> 00:13:14.870
or in other areas
of the stack, it's

00:13:14.870 --> 00:13:16.920
frustrating when things break.

00:13:16.920 --> 00:13:18.770
It can slow us down.

00:13:18.770 --> 00:13:21.660
And that's something
that we're working on.

00:13:21.660 --> 00:13:24.770
Quality processes are
very important us.

00:13:24.770 --> 00:13:25.790
They help us a lot.

00:13:25.790 --> 00:13:27.020
Sometimes they slows down.

00:13:27.020 --> 00:13:30.300
It takes too long to
turn things around.

00:13:30.300 --> 00:13:33.240
And we want to keep this focus
on automation and velocity

00:13:33.240 --> 00:13:35.390
for engineers.

00:13:35.390 --> 00:13:37.230
And finally, I just
want to highlight

00:13:37.230 --> 00:13:41.062
that finding and fixing
bugs-- it's tough for us too.

00:13:41.062 --> 00:13:43.270
I need to go look at this
log file and this log file.

00:13:43.270 --> 00:13:44.590
And I got an alert.

00:13:44.590 --> 00:13:46.124
I'm not sure that's
related, and I

00:13:46.124 --> 00:13:48.040
need to figure out what
needs to be monitored.

00:13:48.040 --> 00:13:49.730
So there's a session
right after this

00:13:49.730 --> 00:13:51.410
to talk about the
insight we want

00:13:51.410 --> 00:13:52.700
to give you into your service.

00:13:52.700 --> 00:13:54.340
But I just want to acknowledge
that this is something

00:13:54.340 --> 00:13:55.514
that we struggle with.

00:13:55.514 --> 00:13:57.305
And we want to make it
better for everyone.

00:14:00.520 --> 00:14:03.890
So we think you deserve better.

00:14:03.890 --> 00:14:06.250
As you heard Urs
say today, we're

00:14:06.250 --> 00:14:09.300
not keeping any of these
tools to ourselves.

00:14:09.300 --> 00:14:12.590
So whether you're
Gmail or Snapchat,

00:14:12.590 --> 00:14:16.350
we're going to focus on making
the best platform that everyone

00:14:16.350 --> 00:14:18.330
can build on.

00:14:18.330 --> 00:14:20.220
And I'm really excited
about the opportunity

00:14:20.220 --> 00:14:22.490
to take the experience,
knowledge, and tools that we

00:14:22.490 --> 00:14:25.230
have internally and
offer these to you.

00:14:25.230 --> 00:14:28.600
We want to develop a
community for third parties

00:14:28.600 --> 00:14:32.190
that's easy for third
parties and developers

00:14:32.190 --> 00:14:35.740
to plug in functionality,
to innovate in new markets

00:14:35.740 --> 00:14:39.860
and tools, and to raise the
overall value of the ecosystem.

00:14:39.860 --> 00:14:43.120
To make it better for all of us.

00:14:43.120 --> 00:14:46.410
So with that, I'm going to
turn it over to Rae and Chris

00:14:46.410 --> 00:14:48.960
to talk about the specifics
of what we're going to launch.

00:14:48.960 --> 00:14:52.327
Productive developer tooling,
continuous delivery system,

00:14:52.327 --> 00:14:54.070
and better Dev Ops.

00:14:54.070 --> 00:14:55.694
Thank you so much
for being here today.

00:15:00.872 --> 00:15:02.580
RAE WANG: So as we
just heard from Melody

00:15:02.580 --> 00:15:05.490
that Dev Ops is
hard for everyone.

00:15:05.490 --> 00:15:08.140
It's hard at Google too.

00:15:08.140 --> 00:15:11.215
Regardless of whether it's
making 800,000 builds at Google

00:15:11.215 --> 00:15:13.530
or it's your own company
making three builds a day.

00:15:13.530 --> 00:15:14.190
It's hard.

00:15:14.190 --> 00:15:15.790
It's time consuming.

00:15:15.790 --> 00:15:18.990
Developers all need support
from great platforms

00:15:18.990 --> 00:15:21.840
to be productive and innovative.

00:15:21.840 --> 00:15:23.240
So that's why we
have started now

00:15:23.240 --> 00:15:26.340
building these Dev Ops tools,
not only for Google developers,

00:15:26.340 --> 00:15:30.950
but more importantly, for you,
the Google Cloud customers.

00:15:30.950 --> 00:15:32.040
Let's dive into them.

00:15:34.810 --> 00:15:37.170
First, I want to
talk about code.

00:15:37.170 --> 00:15:40.820
The soul of your application
lies in the code you write.

00:15:40.820 --> 00:15:42.625
So you need a great
experience working

00:15:42.625 --> 00:15:45.470
on your code on a cloud.

00:15:45.470 --> 00:15:47.430
We did a lot of
user research study.

00:15:47.430 --> 00:15:50.110
That's when we go out and
talk to many developers

00:15:50.110 --> 00:15:53.240
and actually sit there for
hours and watch how you work.

00:15:53.240 --> 00:15:56.380
And we learned there are a few
things that your favorite IDEs

00:15:56.380 --> 00:15:58.520
don't do for you yet.

00:15:58.520 --> 00:16:00.660
First of all, how
many of you only

00:16:00.660 --> 00:16:04.640
work from a single
desktop at a time?

00:16:04.640 --> 00:16:05.140
One?

00:16:05.140 --> 00:16:05.930
OK.

00:16:05.930 --> 00:16:10.760
No laptops, no
phone, no tablets?

00:16:10.760 --> 00:16:12.570
So these days, a
lot of applications

00:16:12.570 --> 00:16:14.420
need to be up 24/7.

00:16:14.420 --> 00:16:17.000
But we can't be chained
to our desk for that long.

00:16:17.000 --> 00:16:17.730
You have a life.

00:16:17.730 --> 00:16:18.730
You're on the go.

00:16:18.730 --> 00:16:20.730
Luckily, you have devices.

00:16:20.730 --> 00:16:24.740
And your code needs to be
accessible from where you are.

00:16:24.740 --> 00:16:27.700
The other thing we observed
was that many of you

00:16:27.700 --> 00:16:31.240
need to switch between multiple
windows to get your work done.

00:16:31.240 --> 00:16:32.730
Because it's not just your code.

00:16:32.730 --> 00:16:35.630
You also want to look at
logs and traces and metrics

00:16:35.630 --> 00:16:37.250
and analytics.

00:16:37.250 --> 00:16:40.080
I know the two big
monitors with eight screens

00:16:40.080 --> 00:16:42.130
that gets your eyes
busy all the time.

00:16:42.130 --> 00:16:43.950
That probably looks
cool, and it's probably

00:16:43.950 --> 00:16:46.030
how Hollywood wants
to think about it,

00:16:46.030 --> 00:16:48.920
but you know and I know that's
not good for your productivity.

00:16:48.920 --> 00:16:51.930
The context switching
slows you down.

00:16:51.930 --> 00:16:54.370
So the ideal Cloud
should offer you

00:16:54.370 --> 00:16:58.400
easy access to that entire
stack of data put in a context

00:16:58.400 --> 00:17:00.600
that you want.

00:17:00.600 --> 00:17:02.390
We don't like it
when things go wrong.

00:17:02.390 --> 00:17:03.510
We really don't like it.

00:17:03.510 --> 00:17:05.780
But it's life, and it happens.

00:17:05.780 --> 00:17:08.940
Today when stuff goes wrong,
it's often really difficult

00:17:08.940 --> 00:17:11.403
to find the culprit
code because-- just

00:17:11.403 --> 00:17:12.569
think about how you do that.

00:17:12.569 --> 00:17:15.349
First, you have to figure
out, which releases

00:17:15.349 --> 00:17:17.180
have been deployed
to which environment.

00:17:17.180 --> 00:17:17.940
At what time?

00:17:17.940 --> 00:17:18.710
By who?

00:17:18.710 --> 00:17:20.250
And then you have
chase down which

00:17:20.250 --> 00:17:23.730
code commits went
into these releases.

00:17:23.730 --> 00:17:26.260
We think a powerful
diffing tool should easily

00:17:26.260 --> 00:17:28.010
help you answer the
question of what

00:17:28.010 --> 00:17:31.310
has changed without requiring
you to manually look

00:17:31.310 --> 00:17:35.140
into these different
sources of data.

00:17:35.140 --> 00:17:36.530
So now let's see the real thing.

00:17:36.530 --> 00:17:39.545
Chris is going to show some
demos of the features-- we'll

00:17:39.545 --> 00:17:40.980
be able to solve these problems

00:17:40.980 --> 00:17:41.250
CHRIS SMITH: Hello.

00:17:41.250 --> 00:17:41.940
I'm Chris Smith.

00:17:41.940 --> 00:17:44.230
I'm a tech lead on
the team here and I'm

00:17:44.230 --> 00:17:46.060
very excited about
developer tools,

00:17:46.060 --> 00:17:48.040
and tooling, and
being more productive.

00:17:48.040 --> 00:17:50.060
But I'm going to let
you on a secret today,

00:17:50.060 --> 00:17:52.880
and that's my first love
is game development.

00:17:52.880 --> 00:17:57.420
Which is why I am super stoked
today to launch my brand

00:17:57.420 --> 00:18:02.340
new, super exciting,
original IP, Fluttery Bird.

00:18:02.340 --> 00:18:04.366
Now of course-- right?

00:18:04.366 --> 00:18:04.866
Yeah!

00:18:09.190 --> 00:18:13.000
Now this may look like a
cheap knockoff of Flappy Bird,

00:18:13.000 --> 00:18:15.980
and it may seem like a cheap
knockoff of Flappy Bird,

00:18:15.980 --> 00:18:20.140
but I assure you it's super
awesome and a lot of fun.

00:18:20.140 --> 00:18:22.010
In honesty, I can't
take credit for it.

00:18:22.010 --> 00:18:24.130
This is a clone of
Clumsy Bird, which

00:18:24.130 --> 00:18:25.920
is also a clone of Flappy Bird.

00:18:25.920 --> 00:18:27.630
It's clones all the way down.

00:18:27.630 --> 00:18:30.460
But what I have done
is added a backend

00:18:30.460 --> 00:18:33.470
using Google App Engine to keep
track of a worldwide leader

00:18:33.470 --> 00:18:34.110
board.

00:18:34.110 --> 00:18:36.080
I just of two points.

00:18:36.080 --> 00:18:38.060
And now if I go to
the high scores page,

00:18:38.060 --> 00:18:40.974
I can see those two points.

00:18:40.974 --> 00:18:43.140
Now I see a few of you may
be in the audience trying

00:18:43.140 --> 00:18:44.920
to play along.

00:18:44.920 --> 00:18:47.250
And I don't see these other
scores, even if I refresh,

00:18:47.250 --> 00:18:49.100
because there's a bug here.

00:18:49.100 --> 00:18:51.190
You see, earlier today
I got a text message

00:18:51.190 --> 00:18:53.690
from a friend that's like, hey,
my scores aren't showing up.

00:18:53.690 --> 00:18:54.550
What's the deal?

00:18:54.550 --> 00:18:56.650
And we can verify this
very quick by just

00:18:56.650 --> 00:19:01.270
going in an incognito
window, playing real quick,

00:19:01.270 --> 00:19:05.840
scoring a point,
and then verifying

00:19:05.840 --> 00:19:09.550
that, alas, the score
isn't being uploaded.

00:19:09.550 --> 00:19:11.840
So there's a problem here
with my production app,

00:19:11.840 --> 00:19:15.100
and on the launch
day of Fluttery Bird.

00:19:15.100 --> 00:19:16.960
So what am I going to do?

00:19:16.960 --> 00:19:19.510
I'm going to fix this by
using all of the Dev Ops tools

00:19:19.510 --> 00:19:22.812
that we've built inside of
the Google Developers Console.

00:19:22.812 --> 00:19:24.270
So I'm going to
quickly load it up.

00:19:24.270 --> 00:19:25.784
Jump to my project.

00:19:25.784 --> 00:19:27.450
And the first thing
I'd like to show you

00:19:27.450 --> 00:19:29.890
is the Release History page.

00:19:29.890 --> 00:19:32.220
Open up Cloud Development,
and Release History.

00:19:32.220 --> 00:19:35.100
And this is showing
me all the deployments

00:19:35.100 --> 00:19:38.430
of my application, Flappy Bird.

00:19:38.430 --> 00:19:41.190
Something I'd like to
bring your attention to

00:19:41.190 --> 00:19:44.100
is the Changes column.

00:19:44.100 --> 00:19:49.560
So here's a deployment where
I fix the high score sorting.

00:19:49.560 --> 00:19:51.700
If I open up the diffs
page, it will show me

00:19:51.700 --> 00:19:55.050
all the commits that were
included with this deployment.

00:19:55.050 --> 00:19:57.810
That is all the
changes that were made.

00:19:57.810 --> 00:20:00.810
As well as showing
me the diffs inline

00:20:00.810 --> 00:20:04.730
so I can quickly scan what's
happened to my application.

00:20:04.730 --> 00:20:06.990
So using this
feature, if I go back,

00:20:06.990 --> 00:20:10.880
I could probably get a sense
on what the problem was

00:20:10.880 --> 00:20:15.320
from this dubious refactor
user service change.

00:20:15.320 --> 00:20:18.500
But I don't want to give
away all my secrets.

00:20:18.500 --> 00:20:21.850
So another way to debug
or troubleshoot this app

00:20:21.850 --> 00:20:24.850
is to just go
straight to the logs.

00:20:24.850 --> 00:20:27.860
Loading up the new App
Engine Logs Viewer,

00:20:27.860 --> 00:20:31.430
I can filter this by error
and scroll all the way down.

00:20:31.430 --> 00:20:37.460
And sure enough, I see some
errors uploading high scores.

00:20:37.460 --> 00:20:40.500
Error uploading high
score, non-admin user

00:20:40.500 --> 00:20:43.730
attempting to
upload a high score.

00:20:43.730 --> 00:20:45.480
Well, that doesn't sound right.

00:20:45.480 --> 00:20:48.510
I mean, sure as an admin
I can upload high scores,

00:20:48.510 --> 00:20:50.700
but I imagine that
other people would

00:20:50.700 --> 00:20:54.860
want to use this high
score leader board as well.

00:20:54.860 --> 00:20:56.280
OK.

00:20:56.280 --> 00:20:59.630
So what I'm about to show you
may be the greatest developer

00:20:59.630 --> 00:21:02.270
feature ever in the
history of mankind.

00:21:05.230 --> 00:21:06.020
Quick question.

00:21:06.020 --> 00:21:07.300
Right?

00:21:07.300 --> 00:21:09.530
Quick question.

00:21:09.530 --> 00:21:12.770
Why is this that
weird shade of blue?

00:21:12.770 --> 00:21:16.840
In fact, if I hover my mouse
over highscoreservice.java,

00:21:16.840 --> 00:21:19.770
that gets underlined
for some reason.

00:21:19.770 --> 00:21:21.470
It's exactly what
you think it is.

00:21:21.470 --> 00:21:22.320
It's a link.

00:21:22.320 --> 00:21:26.570
A hyperlink-- boom--
from the runtime error

00:21:26.570 --> 00:21:29.290
logs directly to
your source code.

00:21:29.290 --> 00:21:32.740
Not only just some random
file, but the specific commit

00:21:32.740 --> 00:21:36.200
and the specific line
where that error occurred.

00:21:36.200 --> 00:21:38.610
So going straight from
the App Engine logs,

00:21:38.610 --> 00:21:41.350
I can jump right to the problem,
where it occurred to my code.

00:21:41.350 --> 00:21:44.770
And sure enough, some
bonehead developer

00:21:44.770 --> 00:21:49.160
on the team, this guy,
introduced a problem.

00:21:49.160 --> 00:21:52.980
So what I'm going to do
now is drive to the office,

00:21:52.980 --> 00:21:54.970
go to my desktop,
make the change,

00:21:54.970 --> 00:21:56.520
commit it, et cetera, et cetera.

00:21:56.520 --> 00:22:00.610
Or, right here on stage from
my web browser, or maybe

00:22:00.610 --> 00:22:05.010
my tablet, or possibly even a
phone, I can just click Edit.

00:22:05.010 --> 00:22:07.160
I'm going to make this change.

00:22:07.160 --> 00:22:09.140
Just comment out
this piece of code.

00:22:12.760 --> 00:22:14.970
And then I'm going to commit
it, all from my browser.

00:22:18.870 --> 00:22:20.270
All right.

00:22:20.270 --> 00:22:22.260
And this is going to commit.

00:22:22.260 --> 00:22:23.400
But not only that.

00:22:23.400 --> 00:22:26.840
It's then going to
build my application,

00:22:26.840 --> 00:22:29.050
run its unit test,
and once everything's

00:22:29.050 --> 00:22:33.370
green, deploy Fluttery Bird
worldwide, fixing the problem,

00:22:33.370 --> 00:22:34.610
and saving the day.

00:22:34.610 --> 00:22:37.160
I'll talk more about our
release and deployment tools

00:22:37.160 --> 00:22:39.660
in a minute, but for now, I'd
like to give it back to Rae.

00:22:39.660 --> 00:22:41.160
RAE WANG: Now that
[INAUDIBLE] done,

00:22:41.160 --> 00:22:44.140
I just wanted to say
again, go Fluttery Bird.

00:22:44.140 --> 00:22:46.130
So now let's look at a
recap of the features

00:22:46.130 --> 00:22:47.030
that you just say in the demo.

00:22:47.030 --> 00:22:48.905
And by the way, all the
features you just saw

00:22:48.905 --> 00:22:51.710
will be coming to you
in the next few weeks.

00:22:51.710 --> 00:22:54.790
To help you to easily work
with your code in a Cloud,

00:22:54.790 --> 00:22:58.580
we're offering you
Google hosted Git repos.

00:22:58.580 --> 00:23:00.940
And you also saw
the browser based

00:23:00.940 --> 00:23:02.850
file viewer and code editor.

00:23:02.850 --> 00:23:06.140
And not only that, the ability
to checking your code right

00:23:06.140 --> 00:23:08.360
from there where your code is.

00:23:08.360 --> 00:23:12.000
To help bring together your
code and a runtime data,

00:23:12.000 --> 00:23:14.480
we're offering you
log to source linking.

00:23:14.480 --> 00:23:17.975
That's where you can go directly
from the message in your log

00:23:17.975 --> 00:23:21.450
file into the code
that caused the error.

00:23:21.450 --> 00:23:23.280
And that's just the first step.

00:23:23.280 --> 00:23:26.040
We know that logs are not
the only thing you look at.

00:23:26.040 --> 00:23:28.520
There are also monitoring
metrics, other [INAUDIBLE]

00:23:28.520 --> 00:23:29.300
datas.

00:23:29.300 --> 00:23:31.175
And we're thinking about
bringing all of them

00:23:31.175 --> 00:23:34.440
here so that your code can
become the canvas on which you

00:23:34.440 --> 00:23:39.090
can display and analyze your
application's performance data.

00:23:39.090 --> 00:23:42.170
To help you answer the
question of what has changed,

00:23:42.170 --> 00:23:44.070
we're giving you
not only code diff.

00:23:44.070 --> 00:23:44.720
That's normal.

00:23:44.720 --> 00:23:45.560
Everybody does that.

00:23:45.560 --> 00:23:48.610
But more importantly,
deployment diff.

00:23:48.610 --> 00:23:50.330
So you can easily
tell that [INAUDIBLE]

00:23:50.330 --> 00:23:53.230
has happened between
two deployments.

00:23:53.230 --> 00:23:54.590
So now you have your code.

00:23:54.590 --> 00:23:57.289
What do you do when you have
your code after code is done?

00:23:57.289 --> 00:23:59.580
You don't just keep it sitting
around your repo, right?

00:23:59.580 --> 00:24:00.496
You want to deploy it.

00:24:00.496 --> 00:24:01.960
That's when it becomes real.

00:24:01.960 --> 00:24:04.890
So let's talk about deployments.

00:24:04.890 --> 00:24:09.130
Deployment is the life
blood to your application.

00:24:09.130 --> 00:24:11.760
Deployment time is just
about the most exciting time

00:24:11.760 --> 00:24:13.810
because that's when all
your hard work pays off.

00:24:13.810 --> 00:24:14.310
Right?

00:24:14.310 --> 00:24:16.170
That's when your
app hits the market.

00:24:16.170 --> 00:24:17.340
Customers start using it.

00:24:17.340 --> 00:24:18.760
That's when you become a hero.

00:24:18.760 --> 00:24:21.419
But it's also a very scary time.

00:24:21.419 --> 00:24:23.210
That just tends to be
when things go wrong.

00:24:23.210 --> 00:24:24.970
How many of you have
had outages right

00:24:24.970 --> 00:24:27.250
when you deploy the
new version of an app?

00:24:27.250 --> 00:24:27.970
Happens, right?

00:24:27.970 --> 00:24:30.220
You're with me there.

00:24:30.220 --> 00:24:33.440
So you definitely want to your
deployments to be reliable.

00:24:33.440 --> 00:24:35.260
That's the most important thing.

00:24:35.260 --> 00:24:37.850
You want to have the confidence
that whatever you're deploying

00:24:37.850 --> 00:24:40.700
to your production does not
have a critical bug in it.

00:24:40.700 --> 00:24:43.600
And you certainly don't want to
be the one paged at 2 o'clock

00:24:43.600 --> 00:24:47.710
in the morning because you
just brought down the app.

00:24:47.710 --> 00:24:49.890
You want the
deployments to be fast.

00:24:49.890 --> 00:24:52.010
You don't want to
wait for hours or days

00:24:52.010 --> 00:24:55.480
for your work to hit live
site to be used by customers.

00:24:55.480 --> 00:24:58.179
You want that happening
in a matter of minutes.

00:24:58.179 --> 00:24:59.720
The other thing that
fast deployments

00:24:59.720 --> 00:25:03.010
do for you is if you can
deploy and release fast,

00:25:03.010 --> 00:25:07.460
then you can end up doing many
frequent, smaller releases.

00:25:07.460 --> 00:25:08.860
Now why is that good for you?

00:25:08.860 --> 00:25:11.650
Let's just imagine, if
you're sending a release that

00:25:11.650 --> 00:25:14.420
contains 100 code
changes into production.

00:25:14.420 --> 00:25:15.510
Something goes wrong.

00:25:15.510 --> 00:25:16.470
What do you do?

00:25:16.470 --> 00:25:18.810
You have to roll back
that entire package,

00:25:18.810 --> 00:25:21.710
and then take it apart,
out of 100 changes,

00:25:21.710 --> 00:25:24.910
find the one that's the
issue, cherry pick it out,

00:25:24.910 --> 00:25:28.060
put the 99 back together,
send it to production,

00:25:28.060 --> 00:25:30.260
and hope you got the right one.

00:25:30.260 --> 00:25:33.820
But if you can do fast and more
frequent and smaller releases,

00:25:33.820 --> 00:25:36.530
if your release contains
only one or two code changes,

00:25:36.530 --> 00:25:38.650
thing's go wrong, roll
back, and you're done.

00:25:38.650 --> 00:25:40.632
Right?

00:25:40.632 --> 00:25:42.090
And we don't like
slow deployments.

00:25:42.090 --> 00:25:43.176
We want them to be fast.

00:25:43.176 --> 00:25:44.550
But there's one
thing that can be

00:25:44.550 --> 00:25:46.890
even worse than
slow deployments.

00:25:46.890 --> 00:25:49.530
That's not knowing
where your changes are.

00:25:49.530 --> 00:25:51.010
Have you had that happen to you?

00:25:51.010 --> 00:25:52.560
We all know what that's like.

00:25:52.560 --> 00:25:53.060
Right?

00:25:55.920 --> 00:25:59.370
Your changes need to be
visible and predictable.

00:25:59.370 --> 00:26:03.240
When I used to run deployment
for a pretty big backend,

00:26:03.240 --> 00:26:07.580
I found my path of my job
became answering exactly three

00:26:07.580 --> 00:26:08.500
questions.

00:26:08.500 --> 00:26:10.420
Where are my changes?

00:26:10.420 --> 00:26:12.930
When they're going
to get to production.

00:26:12.930 --> 00:26:15.880
And what has been deployed
to this environment.

00:26:15.880 --> 00:26:18.460
So after a while, I learned to
make myself more productive.

00:26:18.460 --> 00:26:20.420
I set up an auto
response message

00:26:20.420 --> 00:26:22.230
with some of the
answers in that.

00:26:22.230 --> 00:26:25.517
That made the line outside of
my office a little shorter.

00:26:25.517 --> 00:26:26.600
It shouldn't be that hard.

00:26:26.600 --> 00:26:28.230
You shouldn't need
a crystal ball just

00:26:28.230 --> 00:26:30.595
to tell when your changes
will get to production.

00:26:30.595 --> 00:26:32.220
And we certainly
don't want you to keep

00:26:32.220 --> 00:26:35.130
pestering your release managers.

00:26:35.130 --> 00:26:40.380
And last but not least, we know
there are great best practices,

00:26:40.380 --> 00:26:43.560
having proven that you can
use tools to adapt to them.

00:26:43.560 --> 00:26:47.370
But at the end of the day,
every person and every team

00:26:47.370 --> 00:26:48.937
is different.

00:26:48.937 --> 00:26:50.770
You might want to build
and test differently

00:26:50.770 --> 00:26:53.120
than all the other developers.

00:26:53.120 --> 00:26:55.830
And you want to decide what
environments want to use.

00:26:55.830 --> 00:26:57.820
You might have specific
approval policies

00:26:57.820 --> 00:26:59.480
that you need to put into place.

00:26:59.480 --> 00:27:01.110
And we want to
support you there.

00:27:01.110 --> 00:27:04.480
We want to meet
you where you are.

00:27:04.480 --> 00:27:06.260
Now it's an exciting
demo time again.

00:27:06.260 --> 00:27:07.310
CHRIS SMITH: All right.

00:27:07.310 --> 00:27:10.550
So we use this Push
To Deploy feature

00:27:10.550 --> 00:27:15.900
to roll out the fix to fluttery
bird, therefore saving the day.

00:27:15.900 --> 00:27:19.310
I see somebody who's tried
to play it on their laptop,

00:27:19.310 --> 00:27:22.440
and evidently that
hasn't fixed the issue.

00:27:22.440 --> 00:27:24.240
And we'll see what the deal is.

00:27:24.240 --> 00:27:26.260
But first, let me
explain a little bit

00:27:26.260 --> 00:27:28.380
of how this is all happening.

00:27:28.380 --> 00:27:30.480
You see, last summer we
initially launched Push

00:27:30.480 --> 00:27:31.000
To Deploy.

00:27:31.000 --> 00:27:33.670
That is, a Git source
code repo that, whenever

00:27:33.670 --> 00:27:35.690
you make a commit
to, it automatically

00:27:35.690 --> 00:27:37.160
deploys it to App Engine.

00:27:37.160 --> 00:27:40.320
This is an alternative to
using the App Engine SDK

00:27:40.320 --> 00:27:42.210
and deploying manually.

00:27:42.210 --> 00:27:44.400
And it's a way to be
more productive if you're

00:27:44.400 --> 00:27:48.480
using Python or PHP, languages
that don't require a build.

00:27:48.480 --> 00:27:51.160
But if you want to
use Java, or if you

00:27:51.160 --> 00:27:53.580
want to run some unit
tests before you deploy

00:27:53.580 --> 00:27:57.010
your application, well, then
you would be out of luck.

00:27:57.010 --> 00:27:59.390
So that's why this
quarter we've launched

00:27:59.390 --> 00:28:01.380
Push To Deploy Plus Build.

00:28:01.380 --> 00:28:04.650
If I go to the Releases tab,
and under Configuration,

00:28:04.650 --> 00:28:07.760
you'll be able to see the
different kinds of releases.

00:28:07.760 --> 00:28:09.865
Not only is there
Vanilla Push to Deploy,

00:28:09.865 --> 00:28:12.580
or Push to Deploy
Classic, but also

00:28:12.580 --> 00:28:15.700
offering a build machine
for Java Maven based

00:28:15.700 --> 00:28:19.690
builds, Java using the Gradle
build system, or Python

00:28:19.690 --> 00:28:23.850
with nose test, PHP
with PHP unit test.

00:28:23.850 --> 00:28:25.940
And I want to spend a
couple of minutes explaining

00:28:25.940 --> 00:28:28.560
part of the technology
on how this works.

00:28:28.560 --> 00:28:32.110
So whenever you make a commit
to a Push To Deploy Enabled

00:28:32.110 --> 00:28:35.710
repo, if it requires
build or test,

00:28:35.710 --> 00:28:39.440
will provision a Google
Compute Engine virtual machine

00:28:39.440 --> 00:28:43.570
for your source code to
do the build on the test.

00:28:43.570 --> 00:28:47.540
Normally this happens on demand,
but I've modified this project

00:28:47.540 --> 00:28:51.300
so that it's still running
so I can show it to you.

00:28:51.300 --> 00:28:55.780
If in the developer console,
I quickly refresh this page.

00:28:55.780 --> 00:28:58.070
And it will show
a Compute Engine

00:28:58.070 --> 00:29:01.306
VM that is running the
actual build machine.

00:29:01.306 --> 00:29:02.930
In fact, if you look
over the past day,

00:29:02.930 --> 00:29:08.260
each spike in CPU utilization
is when I've triggered a build.

00:29:08.260 --> 00:29:11.390
And so this is the
actual machine.

00:29:11.390 --> 00:29:14.130
And you may be wondering,
so what's actually

00:29:14.130 --> 00:29:15.760
doing the build?

00:29:15.760 --> 00:29:16.720
Is it a shell script?

00:29:16.720 --> 00:29:21.650
Is it some Google specialize
build farm, or whatnot.

00:29:21.650 --> 00:29:23.780
Well let's find out.

00:29:23.780 --> 00:29:27.980
If I open up port
8080 on that machine,

00:29:27.980 --> 00:29:31.200
it's going to show me the
man behind the curtain, which

00:29:31.200 --> 00:29:37.389
is Jenkins, an open source
continuous integration service.

00:29:37.389 --> 00:29:39.930
Quick show of hands, how many
people here have heard Jenkins?

00:29:39.930 --> 00:29:41.330
Use Jenkins?

00:29:41.330 --> 00:29:41.850
Oh wow.

00:29:41.850 --> 00:29:42.350
OK.

00:29:42.350 --> 00:29:43.090
So many of you.

00:29:43.090 --> 00:29:46.520
Hopefully you're
familiar with Jenkins.

00:29:46.520 --> 00:29:49.990
Well, this is the job that
we've created on this machine,

00:29:49.990 --> 00:29:52.720
aptly titled My Job.

00:29:52.720 --> 00:29:55.100
I can go to the
configuration of this job.

00:29:55.100 --> 00:29:57.330
And I'm just going
to quickly scan over

00:29:57.330 --> 00:29:59.270
all the various things
that we've set up.

00:29:59.270 --> 00:30:03.530
First we do the build, upload
the results, run the tests,

00:30:03.530 --> 00:30:06.230
Push To App Engine, the
standard sort of fare

00:30:06.230 --> 00:30:07.950
that you would expect.

00:30:07.950 --> 00:30:10.360
Now there's a key point
I'd like to highlight here,

00:30:10.360 --> 00:30:13.720
which is that we're using the
Google Cloud Platform to build

00:30:13.720 --> 00:30:16.220
tools for the Google
Cloud Platform.

00:30:16.220 --> 00:30:19.290
Not only using Compute
Engine for the build machine,

00:30:19.290 --> 00:30:22.470
but we're also taking advantage
of Google Cloud Storage.

00:30:22.470 --> 00:30:25.080
If I go over to the
Cloud Storage tab,

00:30:25.080 --> 00:30:27.980
you can see that we create
a Push To Deploy bucket.

00:30:27.980 --> 00:30:32.780
This bucket stores the results
of build results, test results,

00:30:32.780 --> 00:30:36.459
and metadata for each
deployment that it does.

00:30:36.459 --> 00:30:38.000
So these folder
names, these are they

00:30:38.000 --> 00:30:40.730
Git caches that are being used.

00:30:40.730 --> 00:30:44.460
And if I open up one of these,
you can see the raw build log.

00:30:44.460 --> 00:30:47.090
That is the output from Jenkins.

00:30:47.090 --> 00:30:49.120
The test results, as
well as the actual

00:30:49.120 --> 00:30:50.810
payload that we've deployed.

00:30:50.810 --> 00:30:54.280
In fact, we use the
metadata for this object

00:30:54.280 --> 00:30:58.230
to power information on
the Release History page.

00:30:58.230 --> 00:31:00.170
So I'm going to go
to that real quick.

00:31:00.170 --> 00:31:03.620
So I can show you how flawlessly
the system has worked,

00:31:03.620 --> 00:31:06.590
we issued the commit through
the web browser, did the build,

00:31:06.590 --> 00:31:08.910
ran the test, deployed
it, made Fluttery

00:31:08.910 --> 00:31:12.380
Bird a worldwide success.

00:31:12.380 --> 00:31:15.820
Or, it has failed because
the tests have failed.

00:31:15.820 --> 00:31:17.770
I'm going to pretend
like I'm surprised,

00:31:17.770 --> 00:31:21.670
but I've been working on this
demo for weeks so don't worry.

00:31:21.670 --> 00:31:22.850
I can drill into the tests.

00:31:22.850 --> 00:31:24.550
See, these are the
operations that the

00:31:24.550 --> 00:31:26.340
build machine has performed.

00:31:26.340 --> 00:31:29.550
But, of course, the
test have failed.

00:31:29.550 --> 00:31:32.030
So it's still within the
Google Developer Console,

00:31:32.030 --> 00:31:35.592
I can drill into that and see,
well, what actually occurred.

00:31:35.592 --> 00:31:37.370
As it turns out,
some of the tests

00:31:37.370 --> 00:31:39.360
passed, but the
high score service

00:31:39.360 --> 00:31:43.538
did not throw an exception.

00:31:43.538 --> 00:31:46.170
I just love it when you
have these sort of bugs.

00:31:46.170 --> 00:31:49.150
You have some bad
logic in your program.

00:31:49.150 --> 00:31:49.994
So you remove it.

00:31:49.994 --> 00:31:51.410
And then you
introduced a new bug,

00:31:51.410 --> 00:31:54.990
which is the unit test that
expected that bad logic now

00:31:54.990 --> 00:31:56.230
failed.

00:31:56.230 --> 00:31:57.320
You can't win them all.

00:31:57.320 --> 00:32:00.470
Well next I'm going to show
you, using the G Cloud SDK,

00:32:00.470 --> 00:32:02.660
and go into the
command line and just

00:32:02.660 --> 00:32:07.040
fixing this using my existing
Git and tools and my existing

00:32:07.040 --> 00:32:07.680
workflow.

00:32:07.680 --> 00:32:09.990
But before I do that,
I want to show you

00:32:09.990 --> 00:32:15.160
one more thing, which is
going back to the Google repo.

00:32:15.160 --> 00:32:17.250
It's great that Google
has a Git source code

00:32:17.250 --> 00:32:20.520
repo that will enable you to do
this Push To Deploy and build

00:32:20.520 --> 00:32:21.350
experience.

00:32:21.350 --> 00:32:24.060
But how many people here
aren't already using

00:32:24.060 --> 00:32:25.470
Google for their Git hosting?

00:32:25.470 --> 00:32:29.430
Or maybe using
Bitbucket or GitHub?

00:32:29.430 --> 00:32:31.980
How many people here use GitHub?

00:32:31.980 --> 00:32:34.910
All right, similar to
Jenkins, most of you.

00:32:34.910 --> 00:32:36.050
Which is great.

00:32:36.050 --> 00:32:39.680
Well, we've launched a feature
called connected repos.

00:32:39.680 --> 00:32:43.500
That is, a way to mirror
an existing GitHub repo

00:32:43.500 --> 00:32:47.390
and have that transparently
and seamlessly work

00:32:47.390 --> 00:32:49.610
with the tooling
that we've provided.

00:32:49.610 --> 00:32:52.750
So you can use your Git
repo just like you do today,

00:32:52.750 --> 00:32:54.670
but whenever you do a
push without needing

00:32:54.670 --> 00:32:56.820
to add, configure
the remote manually,

00:32:56.820 --> 00:32:58.410
it will just
automatically trigger

00:32:58.410 --> 00:33:00.070
these sorts of workflows.

00:33:00.070 --> 00:33:03.120
So to give you an example,
I have a connected repo,

00:33:03.120 --> 00:33:07.430
the App Engine
Python helloworld.

00:33:07.430 --> 00:33:13.330
And I'm going to use the GitHub
based editor to just change it.

00:33:13.330 --> 00:33:16.470
It prints, "Hello, World!"
and the word orange.

00:33:16.470 --> 00:33:20.177
Why don't we change
that to apple?

00:33:20.177 --> 00:33:22.010
Oh, I guess first, this
is the current state

00:33:22.010 --> 00:33:24.700
of the application,
swiftcatfish511.

00:33:24.700 --> 00:33:28.230
You can see it prints orange.

00:33:28.230 --> 00:33:31.460
Just so you know.

00:33:31.460 --> 00:33:33.180
But I'm going to
change that to apple,

00:33:33.180 --> 00:33:41.020
scroll down and-- all right.

00:33:41.020 --> 00:33:44.360
And then I'm going to make
this commit directly in GitHub.

00:33:44.360 --> 00:33:46.120
But you could
imagine, this is you

00:33:46.120 --> 00:33:49.080
pushing to your Git
repository like you also do.

00:33:49.080 --> 00:33:52.310
Shortly, this is going to
trigger the Push To Deploy

00:33:52.310 --> 00:33:53.800
experience that we've expected.

00:33:53.800 --> 00:33:57.230
And then we'll hit refresh
on swiftcatfish511,

00:33:57.230 --> 00:33:59.070
and it will print
the word apple.

00:33:59.070 --> 00:34:00.690
But first, let me
hand it back to Rae.

00:34:06.160 --> 00:34:07.300
RAE WANG: Thank you, Chris.

00:34:07.300 --> 00:34:10.645
And can we go back
to the slides please.

00:34:10.645 --> 00:34:12.520
I want to show you again
the flow of the demo

00:34:12.520 --> 00:34:13.760
that you just saw.

00:34:13.760 --> 00:34:16.800
You can make a code
commit into either

00:34:16.800 --> 00:34:20.350
the Google hosted Git repo
our your own GitHub repo.

00:34:20.350 --> 00:34:21.500
So nothing needs to change.

00:34:21.500 --> 00:34:23.729
Just use the same
commands I used today.

00:34:23.729 --> 00:34:27.710
The commit triggers Push To
Deploy, which then, in turn,

00:34:27.710 --> 00:34:31.800
invokes Jenkins to run through
the build test and deploy

00:34:31.800 --> 00:34:34.330
steps for application.

00:34:34.330 --> 00:34:38.360
The statuses' results are
displayed through IU and CLI.

00:34:38.360 --> 00:34:41.590
And we also preserve high
fidelity logs and put them

00:34:41.590 --> 00:34:45.610
into your Google
Cloud Storage bucket.

00:34:45.610 --> 00:34:47.820
So these are features
that you just saw.

00:34:47.820 --> 00:34:51.199
We know that to help your
releases and deployment

00:34:51.199 --> 00:34:55.100
to be fast and reliable,
automation is the best way.

00:34:55.100 --> 00:34:56.770
There are some things
that machines just

00:34:56.770 --> 00:34:58.380
do better than us, right?

00:34:58.380 --> 00:35:00.080
Such as repetitive
release tasks.

00:35:00.080 --> 00:35:02.452
So let's dedicate to them.

00:35:02.452 --> 00:35:04.160
For that, we have
launched Push To Deploy

00:35:04.160 --> 00:35:07.920
to automate the build,
test, deploy steps for you.

00:35:07.920 --> 00:35:09.760
But we also know
that many of you

00:35:09.760 --> 00:35:11.980
need to use a number of
different environments

00:35:11.980 --> 00:35:14.095
before your code hits
production to validate

00:35:14.095 --> 00:35:16.200
that it's working correctly.

00:35:16.200 --> 00:35:19.210
Having to push to invidivual
environments is a hassle.

00:35:19.210 --> 00:35:21.730
So we are now working
on expanding this

00:35:21.730 --> 00:35:25.400
to a full multistage pipeline
with permission and quality

00:35:25.400 --> 00:35:27.730
gates between them.

00:35:27.730 --> 00:35:31.540
To give you visibility into
your deployments, our UI and CLI

00:35:31.540 --> 00:35:36.080
tools offer you notifications,
statuses, standard outs,

00:35:36.080 --> 00:35:39.630
a history of all your past
builds and deployments.

00:35:39.630 --> 00:35:44.350
But more importantly, linking
them back into code commits.

00:35:44.350 --> 00:35:46.030
To meet you where
you are and help

00:35:46.030 --> 00:35:47.990
you to customize how
to do your releases,

00:35:47.990 --> 00:35:50.870
we have built Push To
Deploy on top of Jenkins,

00:35:50.870 --> 00:35:54.360
that so many of you already use
and are already familiar with.

00:35:54.360 --> 00:35:57.040
I just want to emphasize that
we take the hard work of hosting

00:35:57.040 --> 00:36:00.330
Jenkins so you have to
worry about setting up,

00:36:00.330 --> 00:36:03.390
monitoring, maintenance,
other annoying stuff.

00:36:03.390 --> 00:36:04.930
It's on us.

00:36:04.930 --> 00:36:07.280
So you can focus on the
more important stuff,

00:36:07.280 --> 00:36:09.190
which is the application.

00:36:09.190 --> 00:36:11.400
In the current version
of Push To Deploy,

00:36:11.400 --> 00:36:13.810
you can select which language
your application wants

00:36:13.810 --> 00:36:16.450
to use, which, in turn,
selects the number of tasks

00:36:16.450 --> 00:36:18.630
to run through for
Push To Deploy.

00:36:18.630 --> 00:36:22.060
And going forward, we want to
make this a more open platform

00:36:22.060 --> 00:36:24.410
so you can specify
your configurations,

00:36:24.410 --> 00:36:26.610
customize your build
and test parameters,

00:36:26.610 --> 00:36:30.780
and even bring your
own Jenkins plugin.

00:36:30.780 --> 00:36:32.790
So that was deployment,
and that was code.

00:36:32.790 --> 00:36:36.430
We saw lots of great features in
the UI and the Google console.

00:36:36.430 --> 00:36:38.480
But I do know for some
of you that command line

00:36:38.480 --> 00:36:40.750
is what you want to
use on a daily basis.

00:36:40.750 --> 00:36:42.200
So who are here with me?

00:36:42.200 --> 00:36:43.110
Command line users?

00:36:43.110 --> 00:36:44.600
Yeah, a lot of you, right?

00:36:44.600 --> 00:36:45.725
So you're going to love it.

00:36:45.725 --> 00:36:48.240
Next let's talk about the Google
Cloud SDK and command line

00:36:48.240 --> 00:36:50.180
tools.

00:36:50.180 --> 00:36:51.770
So when we think
about command line,

00:36:51.770 --> 00:36:55.650
we think of fast and
light ways to do things.

00:36:55.650 --> 00:36:58.120
And therefore, everything
around the command line tool

00:36:58.120 --> 00:37:00.260
should be fast and easy.

00:37:00.260 --> 00:37:02.150
And that means it's
easy to set up,

00:37:02.150 --> 00:37:04.460
it's easy to maintain for
any environment that you're

00:37:04.460 --> 00:37:08.280
working, and for any member
of your development team.

00:37:08.280 --> 00:37:11.830
It should also be easy to
learn, to ramp up to use.

00:37:11.830 --> 00:37:14.690
Especially if you already
use our UI or API,

00:37:14.690 --> 00:37:17.770
learning command line
should be straightforward.

00:37:17.770 --> 00:37:20.400
And if the command line is
how you want to do things,

00:37:20.400 --> 00:37:23.120
it should not only work
for one or two commands.

00:37:23.120 --> 00:37:25.150
It really should be
available for all the things

00:37:25.150 --> 00:37:28.045
you want to do on Google cloud.

00:37:28.045 --> 00:37:29.670
So now we're going
to go back to demos,

00:37:29.670 --> 00:37:31.779
and Chris is going
to fix his unit test.

00:37:31.779 --> 00:37:34.070
CHRIS SMITH: So just to keep
me honest about the GitHub

00:37:34.070 --> 00:37:37.570
connected repos, I'm going
to refresh swiftcatfish.

00:37:37.570 --> 00:37:41.040
Just like we
expected, the Git push

00:37:41.040 --> 00:37:43.775
was all the way through
our system and deployed.

00:37:43.775 --> 00:37:46.560
All right, so let's go back
to Fluttery Bird, the world's

00:37:46.560 --> 00:37:48.340
greatest app, I might add.

00:37:48.340 --> 00:37:50.600
So we have a problem.

00:37:50.600 --> 00:37:53.560
The build works, but we
need to fix this unit test.

00:37:53.560 --> 00:37:55.570
So again, what's the
quickest way to do that.

00:37:55.570 --> 00:37:58.060
Well, I showed you
the web based editor.

00:37:58.060 --> 00:38:00.720
Now I'll show you
the G Cloud SDK.

00:38:00.720 --> 00:38:03.740
So I can do this on
the command line.

00:38:03.740 --> 00:38:06.195
So you've probably
seen this before.

00:38:06.195 --> 00:38:08.480
But how do you install
the G Cloud SDK?

00:38:08.480 --> 00:38:10.100
Here's a quick cheat sheet.

00:38:10.100 --> 00:38:13.520
Curl, crazy long
URL, pipe to bash.

00:38:13.520 --> 00:38:14.510
That's all you need.

00:38:18.640 --> 00:38:19.140
All right.

00:38:19.140 --> 00:38:22.520
I've already installed the
G Cloud SDK on this machine.

00:38:22.520 --> 00:38:27.480
So if I wanted to know how to
use it, I could just type help.

00:38:27.480 --> 00:38:28.390
OK?

00:38:28.390 --> 00:38:30.280
And that will list
all the things

00:38:30.280 --> 00:38:31.730
that I can do in sprockets.

00:38:31.730 --> 00:38:34.850
But I'd like to remind
you all of something.

00:38:34.850 --> 00:38:37.000
It is the year 2014.

00:38:37.000 --> 00:38:38.550
We live in the future.

00:38:38.550 --> 00:38:41.240
And although we don't
have flying cars yet,

00:38:41.240 --> 00:38:44.940
I think we can expect a
few other nice features

00:38:44.940 --> 00:38:46.080
from our tools.

00:38:46.080 --> 00:38:50.800
So I'm just going to type G
Cloud and press Tab twice.

00:38:50.800 --> 00:38:54.180
And now we finally have
auto completion right

00:38:54.180 --> 00:38:55.470
in our console.

00:38:55.470 --> 00:38:58.550
So if I want to know what I
can do with the components

00:38:58.550 --> 00:39:02.920
that I have installed from
the G Cloud SDK, G Cloud Comp,

00:39:02.920 --> 00:39:05.370
Tab will auto complete
to components.

00:39:05.370 --> 00:39:08.940
And those are the operations.

00:39:08.940 --> 00:39:11.951
And then finally-- Oh, G Cloud.

00:39:16.370 --> 00:39:18.935
And I can list all the
things that I have installed.

00:39:26.950 --> 00:39:27.450
OK.

00:39:30.970 --> 00:39:31.470
Great.

00:39:31.470 --> 00:39:31.970
Great.

00:39:31.970 --> 00:39:34.366
Well, one problem
that you'll always

00:39:34.366 --> 00:39:35.990
run into when you're
using command line

00:39:35.990 --> 00:39:40.100
tools, such as the previous
generation of the App Engine

00:39:40.100 --> 00:39:42.800
SDK is, how do you
authenticate yourself?

00:39:42.800 --> 00:39:45.390
Well, you could break
your flow and just

00:39:45.390 --> 00:39:48.100
have to type in your
password every few minutes.

00:39:48.100 --> 00:39:50.910
Or, you could set up an
application specific password,

00:39:50.910 --> 00:39:53.360
but there's some
security concerns there.

00:39:53.360 --> 00:39:55.295
Or, you could use
OAuth, and that's great,

00:39:55.295 --> 00:39:56.670
but then you have
to authorize it

00:39:56.670 --> 00:39:58.670
for every single
different resource.

00:39:58.670 --> 00:40:02.000
For using gcutil, for
pushing to App Engine,

00:40:02.000 --> 00:40:03.730
maybe Cloud storage as well.

00:40:03.730 --> 00:40:06.840
Well, I'm happy to talk
about how the G Cloud

00:40:06.840 --> 00:40:08.860
SDK has solved that
with one command.

00:40:08.860 --> 00:40:12.400
If I want to authenticate and
log in with all my command

00:40:12.400 --> 00:40:17.690
line tools as me, all I need
to type is gcloud auth login.

00:40:17.690 --> 00:40:21.870
This is going to take me
through a single OAuth flow

00:40:21.870 --> 00:40:25.860
so I can authorize the G Cloud
SDK to perform all the cloud

00:40:25.860 --> 00:40:31.370
operations for the Google Cloud
Platform on the behalf of moi.

00:40:31.370 --> 00:40:33.970
So I click Accept,
and I'm good to go.

00:40:33.970 --> 00:40:40.810
But not only that, I can
type gcloud auth list

00:40:40.810 --> 00:40:42.780
and show all the
different accounts

00:40:42.780 --> 00:40:46.860
that I have activated
with the SDK.

00:40:46.860 --> 00:40:49.120
So if you use two different
Google accounts, say one

00:40:49.120 --> 00:40:50.970
for managing your
prod environments,

00:40:50.970 --> 00:40:54.570
or one for managing your
dev and test environments,

00:40:54.570 --> 00:40:57.080
you can seamlessly
switch between the two

00:40:57.080 --> 00:40:59.930
all with a couple of commands.

00:40:59.930 --> 00:41:00.480
OK.

00:41:00.480 --> 00:41:01.700
So enough about G Cloud.

00:41:01.700 --> 00:41:04.620
Let's get back to
fixing Fluttery Bird.

00:41:04.620 --> 00:41:07.320
Google has this the
Git repo in the cloud.

00:41:07.320 --> 00:41:09.530
How do I bring that
to my local machine?

00:41:09.530 --> 00:41:14.180
I could go back to the web,
find the right URL, Git clone,

00:41:14.180 --> 00:41:16.100
set it all up myself.

00:41:16.100 --> 00:41:20.270
Or, I can just type
gcloud init fluttery-bird,

00:41:20.270 --> 00:41:24.070
where fluttery-bird
is the project name.

00:41:24.070 --> 00:41:27.520
This is going to automatically
bring all the context

00:41:27.520 --> 00:41:30.670
and set up my Git repository.

00:41:30.670 --> 00:41:34.490
And so it's ready to go for
me to make local changes.

00:41:34.490 --> 00:41:35.920
I'm going to change directories.

00:41:40.910 --> 00:41:42.660
So here's all the
source code that I have.

00:41:42.660 --> 00:41:46.760
In fact, if I type git log,
you can even see the commit

00:41:46.760 --> 00:41:50.600
that I made on stage
a few minutes ago.

00:41:50.600 --> 00:41:54.990
And so from here, I can just
use the tools that I'm used to.

00:41:54.990 --> 00:41:57.660
For example, the world's
greatest operating system.

00:41:57.660 --> 00:41:59.740
I mean text editor, Emacs.

00:42:03.470 --> 00:42:07.310
And I can finally just
get rid of that unit test.

00:42:15.410 --> 00:42:18.350
And then I can use the standard
Git workflow than I'm used to.

00:42:25.920 --> 00:42:28.350
And so to fix Fluttery
Bird once and for all,

00:42:28.350 --> 00:42:31.880
trigger the Cloud build,
Cloud test, and deployment,

00:42:31.880 --> 00:42:35.010
I end it all with a Git push.

00:42:35.010 --> 00:42:37.120
So while I'm super excited
about the developer

00:42:37.120 --> 00:42:39.840
tools that we're building
and showing today,

00:42:39.840 --> 00:42:42.790
as well as the ways in which it
can make you more productive,

00:42:42.790 --> 00:42:45.530
the thing that excites me the
most is that we're just getting

00:42:45.530 --> 00:42:46.810
started.

00:42:46.810 --> 00:42:49.659
And with that, I'll
give it to Rae.

00:42:49.659 --> 00:42:51.700
RAE WANG: To bring it
home, here are the features

00:42:51.700 --> 00:42:52.780
that you just saw.

00:42:52.780 --> 00:42:55.540
To give you an easy
getting started experience,

00:42:55.540 --> 00:42:59.500
the SDK can be installed
by a single command line.

00:42:59.500 --> 00:43:01.830
The component manager lets
you see which components

00:43:01.830 --> 00:43:04.715
are being installed and
add new ones as needed.

00:43:04.715 --> 00:43:06.530
You no longer have
to worry about,

00:43:06.530 --> 00:43:09.450
do I have the latest
version of SDK or not?

00:43:09.450 --> 00:43:11.800
Because we have auto
update notifications

00:43:11.800 --> 00:43:14.102
that will keep things
up to date for you.

00:43:14.102 --> 00:43:15.560
I love G Cloud,
but I have to tell,

00:43:15.560 --> 00:43:18.860
my favorite command
there is G Cloud init.

00:43:18.860 --> 00:43:20.930
You saw how easily
it provisioned

00:43:20.930 --> 00:43:23.090
the entire workspace
for any product you

00:43:23.090 --> 00:43:26.810
want to work on in just
a matter of seconds.

00:43:26.810 --> 00:43:29.832
We want to make command line
tool easy for you to use.

00:43:29.832 --> 00:43:31.790
We don't want you to have
to memorize and spell

00:43:31.790 --> 00:43:32.940
any of the other commands.

00:43:32.940 --> 00:43:35.240
So we provide you
with autocompletion.

00:43:35.240 --> 00:43:37.810
You can just Tab,
and it's there.

00:43:37.810 --> 00:43:40.930
There's unified help in a
tool that allows you to easily

00:43:40.930 --> 00:43:43.870
discover and learn new
commands as you go.

00:43:43.870 --> 00:43:45.400
And we also make a
big effort to try

00:43:45.400 --> 00:43:48.620
to keep command line,
UI, and API consistent

00:43:48.620 --> 00:43:52.560
so you only have
to learn it once.

00:43:52.560 --> 00:43:56.340
In a single SDK, you get all
the tools for Google Cloud.

00:43:56.340 --> 00:43:59.470
Some of you-- I saw
a show of hands--

00:43:59.470 --> 00:44:03.610
might have used gcutil
or AppConfig in the past.

00:44:03.610 --> 00:44:04.150
Right?

00:44:04.150 --> 00:44:06.695
Remember, you had to download
them separately, keep them up

00:44:06.695 --> 00:44:08.570
to date, install them,
learn them separately.

00:44:08.570 --> 00:44:10.640
Well that was the past.

00:44:10.640 --> 00:44:12.740
Now they're all
coming to G Cloud.

00:44:12.740 --> 00:44:14.900
So there's only one tool
you need to care about.

00:44:18.020 --> 00:44:21.680
Now in the last 40, 45 minutes,
you saw all the dev tools

00:44:21.680 --> 00:44:25.810
that we have built this far
for Google Cloud Platform.

00:44:25.810 --> 00:44:30.100
You remember the browser
based code editor diffing tool

00:44:30.100 --> 00:44:34.320
to log to source linking,
Push To Deploy, and all in one

00:44:34.320 --> 00:44:36.110
Cloud SDK.

00:44:36.110 --> 00:44:37.840
These are just our first steps.

00:44:37.840 --> 00:44:41.110
We're going to continue to
be relentless in our quest

00:44:41.110 --> 00:44:45.570
to give you the Dev Ops
experience that you deserve.

00:44:45.570 --> 00:44:46.090
Thank you.

00:44:46.090 --> 00:44:47.940
And with that, we're happy
to take any questions.

00:44:47.940 --> 00:44:49.680
So you also have my
email there if you

00:44:49.680 --> 00:44:51.960
want to reach out and
ask questions offline.

00:44:51.960 --> 00:44:53.324
You can send your email.

00:44:53.324 --> 00:44:55.490
AUDIENCE MEMBER 1: How about
the GitHub integration?

00:44:55.490 --> 00:44:57.220
It was announced
this morning but I

00:44:57.220 --> 00:45:00.410
don't think it's available yet.

00:45:00.410 --> 00:45:04.841
So using GitHUb instead
of the Google repo.

00:45:04.841 --> 00:45:06.550
CHRIS SMITH: Oh, yeah.

00:45:06.550 --> 00:45:07.590
It's there.

00:45:07.590 --> 00:45:11.202
We'll be launching it, I think,
publicly in a couple weeks.

00:45:11.202 --> 00:45:13.124
Or, rolling it out
wider in a couple weeks.

00:45:13.124 --> 00:45:14.040
AUDIENCE MEMBER 1: OK.

00:45:14.040 --> 00:45:15.920
RAE WANG: So most of
the demos that you just

00:45:15.920 --> 00:45:18.090
saw, if they're not already in
production, they're currently

00:45:18.090 --> 00:45:19.170
in our Canary environment.

00:45:19.170 --> 00:45:21.128
They're like hot off the
presses, on their way,

00:45:21.128 --> 00:45:23.070
rolling out in the
next few weeks.

00:45:23.070 --> 00:45:25.940
CHRIS SMITH: You may have saw
a link to-- on Brad Abrams talk

00:45:25.940 --> 00:45:28.450
about the Trusted Tester
program at Google.

00:45:28.450 --> 00:45:30.910
That's how you can get a sneak
peek at some of the features

00:45:30.910 --> 00:45:32.310
that we're working on.

00:45:37.510 --> 00:45:39.520
AUDIENCE MEMBER 2: In
the Git repository,

00:45:39.520 --> 00:45:42.800
is there a way to sandbox--
if you invite a developer

00:45:42.800 --> 00:45:46.254
to sandbox the access to
certain portions of the project?

00:45:46.254 --> 00:45:47.920
Or do they automatically
just get access

00:45:47.920 --> 00:45:48.836
to the entire project?

00:45:53.750 --> 00:45:55.560
CHRIS SMITH: Our
Git setup currently

00:45:55.560 --> 00:45:56.520
does not support that.

00:45:56.520 --> 00:46:00.140
The ACLs for the repo,
as in who can access it,

00:46:00.140 --> 00:46:02.230
are tied to the project.

00:46:02.230 --> 00:46:06.060
So people who have edit
access to that project

00:46:06.060 --> 00:46:08.265
can modify any part of
the Git source repo.

00:46:10.750 --> 00:46:11.250
OK.

00:46:11.250 --> 00:46:13.410
RAE WANG: And there's
a question here.

00:46:13.410 --> 00:46:15.431
CHRIS SMITH: There's the--
Let's follow the mic.

00:46:15.431 --> 00:46:17.430
AUDIENCE MEMBER 3: Hey,
I'm just really curious.

00:46:17.430 --> 00:46:21.130
You talked earlier that
you have one source tree.

00:46:21.130 --> 00:46:23.070
But the tooling that
you're generating now

00:46:23.070 --> 00:46:25.915
seems to deal with if
you have, say, one repo,

00:46:25.915 --> 00:46:27.830
it goes to one instance.

00:46:27.830 --> 00:46:29.600
So it seems like
different concepts.

00:46:29.600 --> 00:46:31.680
And I've always done
it the more repo way,

00:46:31.680 --> 00:46:34.770
but are you working on,
if you have a giant source

00:46:34.770 --> 00:46:36.490
tree, push out of
this branch of it.

00:46:36.490 --> 00:46:40.149
Or how do they relate
those concepts?

00:46:40.149 --> 00:46:41.940
RAE WANG: So that's a
really good question.

00:46:41.940 --> 00:46:43.400
He's talking about
within Google,

00:46:43.400 --> 00:46:45.640
we have a single repo
as Melody talked about.

00:46:45.640 --> 00:46:48.880
But we understand that people
do these things differently.

00:46:48.880 --> 00:46:51.380
There's some companies that
like to have just a single repo.

00:46:51.380 --> 00:46:53.879
There's some companies that
like to have-- we have customers

00:46:53.879 --> 00:46:56.090
with a few hundred
repos on GitHub.

00:46:56.090 --> 00:46:58.630
And that's where we
think flexibility

00:46:58.630 --> 00:46:59.850
is really important.

00:46:59.850 --> 00:47:01.975
We want to be able to
support these different modes

00:47:01.975 --> 00:47:02.550
of working.

00:47:02.550 --> 00:47:05.260
And we also want to make
sure that the benefits

00:47:05.260 --> 00:47:08.290
on both sides-- we can
give it to both camps.

00:47:08.290 --> 00:47:10.290
For example, one benefit
of having one repo

00:47:10.290 --> 00:47:13.030
is that it's easy to
search across them.

00:47:13.030 --> 00:47:16.960
And it's also easy to reference
different parts of things.

00:47:16.960 --> 00:47:20.340
And when there's an
issue in common library,

00:47:20.340 --> 00:47:22.020
it's fixed for everybody.

00:47:22.020 --> 00:47:23.930
But we think these
benefits can be true,

00:47:23.930 --> 00:47:25.970
even if your preferred
way of working

00:47:25.970 --> 00:47:27.130
is having multiple repos.

00:47:27.130 --> 00:47:28.713
And that's something
we're working on.

00:47:32.309 --> 00:47:34.100
AUDIENCE MEMBER 4: So
do you guys currently

00:47:34.100 --> 00:47:36.270
offer any way to speed
up the tests themselves?

00:47:36.270 --> 00:47:38.800
Do you guys do any
kind of parallelism

00:47:38.800 --> 00:47:40.050
in what you guys are offering?

00:47:40.050 --> 00:47:42.780
Or is it basically
just hosted Jenkins?

00:47:42.780 --> 00:47:45.130
CHRIS SMITH: Currently,
we don't have

00:47:45.130 --> 00:47:46.870
any tooling about
speeding up tests.

00:47:46.870 --> 00:47:49.260
It's just as quickly
as you can configure

00:47:49.260 --> 00:47:51.420
the Jenkins master
to execute them.

00:47:51.420 --> 00:47:55.280
But that is a problem
that's on our radar.

00:47:55.280 --> 00:47:57.790
I think we have time for
one or two more questions.

00:48:01.897 --> 00:48:03.980
RAE WANG: And I also want
to add that sometimes it

00:48:03.980 --> 00:48:05.730
means allowing you to
be-- so for example,

00:48:05.730 --> 00:48:09.090
be able to choose which size
of VM to host your Jenkins

00:48:09.090 --> 00:48:10.690
depends on how
much your workload.

00:48:10.690 --> 00:48:12.731
And that's definitely
something we're looking at.

00:48:15.210 --> 00:48:16.222
Yes, one more there.

00:48:16.222 --> 00:48:17.472
AUDIENCE MEMBER 5: [INAUDIBLE]

00:48:20.840 --> 00:48:22.900
RAE WANG: So the question
is, do all the command

00:48:22.900 --> 00:48:24.680
line tools run Windows as well?

00:48:24.680 --> 00:48:27.264
And actually have an expert here
who can answer that question.

00:48:27.264 --> 00:48:28.930
[INAUDIBLE], do you
want to comment on--

00:48:28.930 --> 00:48:29.746
MALE SPEAKER: Yes.

00:48:29.746 --> 00:48:30.329
RAE WANG: Yes.

00:48:30.329 --> 00:48:31.213
The answer is simple.

00:48:31.213 --> 00:48:32.191
Yes.

00:48:32.191 --> 00:48:33.169
CHRIS SMITH: All right.

00:48:33.169 --> 00:48:34.147
MALE SPEAKER 2: That's
all we have time for .

00:48:34.147 --> 00:48:34.640
CHRIS SMITH: All right.

00:48:34.640 --> 00:48:34.940
Great.

00:48:34.940 --> 00:48:35.240
RAE WANG: OK.

00:48:35.240 --> 00:48:35.740
All right.

00:48:35.740 --> 00:48:37.090
Thank you.

