WEBVTT
Kind: captions
Language: en

00:00:01.250 --> 00:00:04.280
pop quiz hotshot you've got 48

00:00:04.280 --> 00:00:04.290
pop quiz hotshot you've got 48
 

00:00:04.290 --> 00:00:06.410
pop quiz hotshot you've got 48
milliseconds of work to do but only 16

00:00:06.410 --> 00:00:06.420
milliseconds of work to do but only 16
 

00:00:06.420 --> 00:00:08.059
milliseconds of work to do but only 16
milliseconds per frame to get it done

00:00:08.059 --> 00:00:08.069
milliseconds per frame to get it done
 

00:00:08.069 --> 00:00:10.850
milliseconds per frame to get it done
what do you do my name is Colt McAnlis

00:00:10.850 --> 00:00:10.860
what do you do my name is Colt McAnlis
 

00:00:10.860 --> 00:00:12.830
what do you do my name is Colt McAnlis
and while threading on Android can help

00:00:12.830 --> 00:00:12.840
and while threading on Android can help
 

00:00:12.840 --> 00:00:14.570
and while threading on Android can help
cure your performance woes it can also

00:00:14.570 --> 00:00:14.580
cure your performance woes it can also
 

00:00:14.580 --> 00:00:16.730
cure your performance woes it can also
end up creating some huge problems if

00:00:16.730 --> 00:00:16.740
end up creating some huge problems if
 

00:00:16.740 --> 00:00:18.140
end up creating some huge problems if
you don't understand how it's all

00:00:18.140 --> 00:00:18.150
you don't understand how it's all
 

00:00:18.150 --> 00:00:19.790
you don't understand how it's all
working under the hood so let's take a

00:00:19.790 --> 00:00:19.800
working under the hood so let's take a
 

00:00:19.800 --> 00:00:21.380
working under the hood so let's take a
few minutes and make sure we're all on

00:00:21.380 --> 00:00:21.390
few minutes and make sure we're all on
 

00:00:21.390 --> 00:00:24.620
few minutes and make sure we're all on
the same page see a thread by default

00:00:24.620 --> 00:00:24.630
the same page see a thread by default
 

00:00:24.630 --> 00:00:27.230
the same page see a thread by default
does three things it starts it does some

00:00:27.230 --> 00:00:27.240
does three things it starts it does some
 

00:00:27.240 --> 00:00:28.640
does three things it starts it does some
works and as soon as that work is done

00:00:28.640 --> 00:00:28.650
works and as soon as that work is done
 

00:00:28.650 --> 00:00:31.070
works and as soon as that work is done
it terminates now by itself that's not

00:00:31.070 --> 00:00:31.080
it terminates now by itself that's not
 

00:00:31.080 --> 00:00:33.410
it terminates now by itself that's not
too useful instead what you want is a

00:00:33.410 --> 00:00:33.420
too useful instead what you want is a
 

00:00:33.420 --> 00:00:34.819
too useful instead what you want is a
thread that sticks around for a while so

00:00:34.819 --> 00:00:34.829
thread that sticks around for a while so
 

00:00:34.829 --> 00:00:36.440
thread that sticks around for a while so
you can feed it packets of work to

00:00:36.440 --> 00:00:36.450
you can feed it packets of work to
 

00:00:36.450 --> 00:00:38.569
you can feed it packets of work to
operate on but to do that you need a

00:00:38.569 --> 00:00:38.579
operate on but to do that you need a
 

00:00:38.579 --> 00:00:41.119
operate on but to do that you need a
little more scaffolding first since

00:00:41.119 --> 00:00:41.129
little more scaffolding first since
 

00:00:41.129 --> 00:00:42.650
little more scaffolding first since
threads die when they run out of work

00:00:42.650 --> 00:00:42.660
threads die when they run out of work
 

00:00:42.660 --> 00:00:44.060
threads die when they run out of work
you need to have some sort of loop

00:00:44.060 --> 00:00:44.070
you need to have some sort of loop
 

00:00:44.070 --> 00:00:45.560
you need to have some sort of loop
running on the thread to keep it alive

00:00:45.560 --> 00:00:45.570
running on the thread to keep it alive
 

00:00:45.570 --> 00:00:47.330
running on the thread to keep it alive
just make sure to put it in exit

00:00:47.330 --> 00:00:47.340
just make sure to put it in exit
 

00:00:47.340 --> 00:00:48.680
just make sure to put it in exit
condition so you can terminate that loop

00:00:48.680 --> 00:00:48.690
condition so you can terminate that loop
 

00:00:48.690 --> 00:00:50.930
condition so you can terminate that loop
later in addition you'll need some sort

00:00:50.930 --> 00:00:50.940
later in addition you'll need some sort
 

00:00:50.940 --> 00:00:52.729
later in addition you'll need some sort
of queue that the loop can pull blocks

00:00:52.729 --> 00:00:52.739
of queue that the loop can pull blocks
 

00:00:52.739 --> 00:00:54.889
of queue that the loop can pull blocks
of work from to execute on and of course

00:00:54.889 --> 00:00:54.899
of work from to execute on and of course
 

00:00:54.899 --> 00:00:56.689
of work from to execute on and of course
you'll need some other thread that

00:00:56.689 --> 00:00:56.699
you'll need some other thread that
 

00:00:56.699 --> 00:00:58.400
you'll need some other thread that
creates work packets and pushes them

00:00:58.400 --> 00:00:58.410
creates work packets and pushes them
 

00:00:58.410 --> 00:01:00.709
creates work packets and pushes them
into the queue for execution now if

00:01:00.709 --> 00:01:00.719
into the queue for execution now if
 

00:01:00.719 --> 00:01:02.180
into the queue for execution now if
you've ever tried to write this setup

00:01:02.180 --> 00:01:02.190
you've ever tried to write this setup
 

00:01:02.190 --> 00:01:03.560
you've ever tried to write this setup
yourself you know it gets a little

00:01:03.560 --> 00:01:03.570
yourself you know it gets a little
 

00:01:03.570 --> 00:01:05.240
yourself you know it gets a little
gnarly to get all of that machinery

00:01:05.240 --> 00:01:05.250
gnarly to get all of that machinery
 

00:01:05.250 --> 00:01:06.980
gnarly to get all of that machinery
working correctly thankfully though

00:01:06.980 --> 00:01:06.990
working correctly thankfully though
 

00:01:06.990 --> 00:01:09.200
working correctly thankfully though
Android has a set of classes to do all

00:01:09.200 --> 00:01:09.210
Android has a set of classes to do all
 

00:01:09.210 --> 00:01:10.010
Android has a set of classes to do all
that for you

00:01:10.010 --> 00:01:10.020
that for you
 

00:01:10.020 --> 00:01:12.410
that for you
for example the looper class will keep

00:01:12.410 --> 00:01:12.420
for example the looper class will keep
 

00:01:12.420 --> 00:01:13.969
for example the looper class will keep
the thread alive and pop work off a

00:01:13.969 --> 00:01:13.979
the thread alive and pop work off a
 

00:01:13.979 --> 00:01:16.249
the thread alive and pop work off a
queue to execute on and rather than

00:01:16.249 --> 00:01:16.259
queue to execute on and rather than
 

00:01:16.259 --> 00:01:18.320
queue to execute on and rather than
always inserting work at the end of that

00:01:18.320 --> 00:01:18.330
always inserting work at the end of that
 

00:01:18.330 --> 00:01:20.539
always inserting work at the end of that
queue the handler class gives you the

00:01:20.539 --> 00:01:20.549
queue the handler class gives you the
 

00:01:20.549 --> 00:01:22.010
queue the handler class gives you the
control to push work at the head the

00:01:22.010 --> 00:01:22.020
control to push work at the head the
 

00:01:22.020 --> 00:01:24.530
control to push work at the head the
tail or a set a time-based delay that

00:01:24.530 --> 00:01:24.540
tail or a set a time-based delay that
 

00:01:24.540 --> 00:01:25.730
tail or a set a time-based delay that
will keep some work from being processed

00:01:25.730 --> 00:01:25.740
will keep some work from being processed
 

00:01:25.740 --> 00:01:27.649
will keep some work from being processed
until that time has passed

00:01:27.649 --> 00:01:27.659
until that time has passed
 

00:01:27.659 --> 00:01:29.359
until that time has passed
and don't forget the units of work in

00:01:29.359 --> 00:01:29.369
and don't forget the units of work in
 

00:01:29.369 --> 00:01:31.880
and don't forget the units of work in
Android you are explicitly defined as

00:01:31.880 --> 00:01:31.890
Android you are explicitly defined as
 

00:01:31.890 --> 00:01:34.429
Android you are explicitly defined as
intense or runnable Zoar messages

00:01:34.429 --> 00:01:34.439
intense or runnable Zoar messages
 

00:01:34.439 --> 00:01:36.260
intense or runnable Zoar messages
depending on who's issuing them and

00:01:36.260 --> 00:01:36.270
depending on who's issuing them and
 

00:01:36.270 --> 00:01:38.120
depending on who's issuing them and
who's consuming them and then the

00:01:38.120 --> 00:01:38.130
who's consuming them and then the
 

00:01:38.130 --> 00:01:39.560
who's consuming them and then the
combination of all these things together

00:01:39.560 --> 00:01:39.570
combination of all these things together
 

00:01:39.570 --> 00:01:42.830
combination of all these things together
is called a handler thread which lets

00:01:42.830 --> 00:01:42.840
is called a handler thread which lets
 

00:01:42.840 --> 00:01:46.609
is called a handler thread which lets
this look like this pretty nifty huh so

00:01:46.609 --> 00:01:46.619
this look like this pretty nifty huh so
 

00:01:46.619 --> 00:01:47.929
this look like this pretty nifty huh so
let's look at how you can use this in

00:01:47.929 --> 00:01:47.939
let's look at how you can use this in
 

00:01:47.939 --> 00:01:50.179
let's look at how you can use this in
your application when the user launches

00:01:50.179 --> 00:01:50.189
your application when the user launches
 

00:01:50.189 --> 00:01:52.399
your application when the user launches
your app Android creates its own Linux

00:01:52.399 --> 00:01:52.409
your app Android creates its own Linux
 

00:01:52.409 --> 00:01:54.590
your app Android creates its own Linux
process alongside with this the system

00:01:54.590 --> 00:01:54.600
process alongside with this the system
 

00:01:54.600 --> 00:01:56.539
process alongside with this the system
creates a thread of execution for your

00:01:56.539 --> 00:01:56.549
creates a thread of execution for your
 

00:01:56.549 --> 00:01:59.209
creates a thread of execution for your
application called the main thread which

00:01:59.209 --> 00:01:59.219
application called the main thread which
 

00:01:59.219 --> 00:02:01.550
application called the main thread which
at its core is just a handler thread

00:02:01.550 --> 00:02:01.560
at its core is just a handler thread
 

00:02:01.560 --> 00:02:03.560
at its core is just a handler thread
this main thread handles processing of

00:02:03.560 --> 00:02:03.570
this main thread handles processing of
 

00:02:03.570 --> 00:02:05.990
this main thread handles processing of
events from all over your app for

00:02:05.990 --> 00:02:06.000
events from all over your app for
 

00:02:06.000 --> 00:02:07.609
events from all over your app for
example callbacks associated with

00:02:07.609 --> 00:02:07.619
example callbacks associated with
 

00:02:07.619 --> 00:02:09.619
example callbacks associated with
lifecycle information or callbacks from

00:02:09.619 --> 00:02:09.629
lifecycle information or callbacks from
 

00:02:09.629 --> 00:02:11.600
lifecycle information or callbacks from
input events or even events that are

00:02:11.600 --> 00:02:11.610
input events or even events that are
 

00:02:11.610 --> 00:02:13.770
input events or even events that are
coming from other applications and

00:02:13.770 --> 00:02:13.780
coming from other applications and
 

00:02:13.780 --> 00:02:15.360
coming from other applications and
most important is that these callbacks

00:02:15.360 --> 00:02:15.370
most important is that these callbacks
 

00:02:15.370 --> 00:02:17.850
most important is that these callbacks
can trigger other work that runs on

00:02:17.850 --> 00:02:17.860
can trigger other work that runs on
 

00:02:17.860 --> 00:02:19.860
can trigger other work that runs on
their thread - like making a change to

00:02:19.860 --> 00:02:19.870
their thread - like making a change to
 

00:02:19.870 --> 00:02:21.930
their thread - like making a change to
the UI will create work packets that

00:02:21.930 --> 00:02:21.940
the UI will create work packets that
 

00:02:21.940 --> 00:02:24.720
the UI will create work packets that
allow the UI to be redrawn basically

00:02:24.720 --> 00:02:24.730
allow the UI to be redrawn basically
 

00:02:24.730 --> 00:02:26.550
allow the UI to be redrawn basically
this means that any block of code your

00:02:26.550 --> 00:02:26.560
this means that any block of code your
 

00:02:26.560 --> 00:02:28.830
this means that any block of code your
app wants to run has to be pushed into a

00:02:28.830 --> 00:02:28.840
app wants to run has to be pushed into a
 

00:02:28.840 --> 00:02:30.930
app wants to run has to be pushed into a
work queue and then serviced on the main

00:02:30.930 --> 00:02:30.940
work queue and then serviced on the main
 

00:02:30.940 --> 00:02:33.059
work queue and then serviced on the main
thread the takeaway here is that with so

00:02:33.059 --> 00:02:33.069
thread the takeaway here is that with so
 

00:02:33.069 --> 00:02:34.530
thread the takeaway here is that with so
much work happening on the main thread

00:02:34.530 --> 00:02:34.540
much work happening on the main thread
 

00:02:34.540 --> 00:02:36.540
much work happening on the main thread
it makes a lot of sense to offload

00:02:36.540 --> 00:02:36.550
it makes a lot of sense to offload
 

00:02:36.550 --> 00:02:39.030
it makes a lot of sense to offload
longer work to other threads as to not

00:02:39.030 --> 00:02:39.040
longer work to other threads as to not
 

00:02:39.040 --> 00:02:41.250
longer work to other threads as to not
disturb the UI system from its rendering

00:02:41.250 --> 00:02:41.260
disturb the UI system from its rendering
 

00:02:41.260 --> 00:02:43.650
disturb the UI system from its rendering
duties and this is how the entirety of

00:02:43.650 --> 00:02:43.660
duties and this is how the entirety of
 

00:02:43.660 --> 00:02:45.750
duties and this is how the entirety of
androids threading model works now lots

00:02:45.750 --> 00:02:45.760
androids threading model works now lots
 

00:02:45.760 --> 00:02:47.670
androids threading model works now lots
of packages of work being passed around

00:02:47.670 --> 00:02:47.680
of packages of work being passed around
 

00:02:47.680 --> 00:02:49.860
of packages of work being passed around
between threads and worked on as needed

00:02:49.860 --> 00:02:49.870
between threads and worked on as needed
 

00:02:49.870 --> 00:02:52.500
between threads and worked on as needed
so with all this in mind some of

00:02:52.500 --> 00:02:52.510
so with all this in mind some of
 

00:02:52.510 --> 00:02:54.540
so with all this in mind some of
androids threading classes make a little

00:02:54.540 --> 00:02:54.550
androids threading classes make a little
 

00:02:54.550 --> 00:02:57.060
androids threading classes make a little
bit more sense see each threaded class

00:02:57.060 --> 00:02:57.070
bit more sense see each threaded class
 

00:02:57.070 --> 00:02:59.220
bit more sense see each threaded class
is intended for a specific type of

00:02:59.220 --> 00:02:59.230
is intended for a specific type of
 

00:02:59.230 --> 00:03:00.840
is intended for a specific type of
threading work so picking the right one

00:03:00.840 --> 00:03:00.850
threading work so picking the right one
 

00:03:00.850 --> 00:03:03.390
threading work so picking the right one
for your needs is really important for

00:03:03.390 --> 00:03:03.400
for your needs is really important for
 

00:03:03.400 --> 00:03:06.059
for your needs is really important for
example the async task class is ideal

00:03:06.059 --> 00:03:06.069
example the async task class is ideal
 

00:03:06.069 --> 00:03:08.009
example the async task class is ideal
for helping you get work on and off the

00:03:08.009 --> 00:03:08.019
for helping you get work on and off the
 

00:03:08.019 --> 00:03:10.020
for helping you get work on and off the
UI thread in the right way handler

00:03:10.020 --> 00:03:10.030
UI thread in the right way handler
 

00:03:10.030 --> 00:03:11.460
UI thread in the right way handler
threads are great when you need a

00:03:11.460 --> 00:03:11.470
threads are great when you need a
 

00:03:11.470 --> 00:03:13.559
threads are great when you need a
dedicated thread for callbacks to land

00:03:13.559 --> 00:03:13.569
dedicated thread for callbacks to land
 

00:03:13.569 --> 00:03:15.750
dedicated thread for callbacks to land
on and thread pools work best when you

00:03:15.750 --> 00:03:15.760
on and thread pools work best when you
 

00:03:15.760 --> 00:03:17.070
on and thread pools work best when you
can break your work up into really small

00:03:17.070 --> 00:03:17.080
can break your work up into really small
 

00:03:17.080 --> 00:03:19.470
can break your work up into really small
packets and then toss them to a bunch of

00:03:19.470 --> 00:03:19.480
packets and then toss them to a bunch of
 

00:03:19.480 --> 00:03:21.569
packets and then toss them to a bunch of
waiting threads and intent services are

00:03:21.569 --> 00:03:21.579
waiting threads and intent services are
 

00:03:21.579 --> 00:03:23.310
waiting threads and intent services are
really ideal for background tasks or

00:03:23.310 --> 00:03:23.320
really ideal for background tasks or
 

00:03:23.320 --> 00:03:25.319
really ideal for background tasks or
when you need to get intent work off the

00:03:25.319 --> 00:03:25.329
when you need to get intent work off the
 

00:03:25.329 --> 00:03:27.390
when you need to get intent work off the
UI thread and like everything else

00:03:27.390 --> 00:03:27.400
UI thread and like everything else
 

00:03:27.400 --> 00:03:29.340
UI thread and like everything else
there's not a silver bullet here but

00:03:29.340 --> 00:03:29.350
there's not a silver bullet here but
 

00:03:29.350 --> 00:03:31.020
there's not a silver bullet here but
knowing which primitive is best for what

00:03:31.020 --> 00:03:31.030
knowing which primitive is best for what
 

00:03:31.030 --> 00:03:33.120
knowing which primitive is best for what
situation can save you a lot of

00:03:33.120 --> 00:03:33.130
situation can save you a lot of
 

00:03:33.130 --> 00:03:35.009
situation can save you a lot of
headaches now if you ever want more

00:03:35.009 --> 00:03:35.019
headaches now if you ever want more
 

00:03:35.019 --> 00:03:37.110
headaches now if you ever want more
insight into how your app is leveraging

00:03:37.110 --> 00:03:37.120
insight into how your app is leveraging
 

00:03:37.120 --> 00:03:38.850
insight into how your app is leveraging
threading make sure you spend some time

00:03:38.850 --> 00:03:38.860
threading make sure you spend some time
 

00:03:38.860 --> 00:03:41.160
threading make sure you spend some time
getting comfortable with systrace it's a

00:03:41.160 --> 00:03:41.170
getting comfortable with systrace it's a
 

00:03:41.170 --> 00:03:43.500
getting comfortable with systrace it's a
fancy tool that will school you on how

00:03:43.500 --> 00:03:43.510
fancy tool that will school you on how
 

00:03:43.510 --> 00:03:45.599
fancy tool that will school you on how
about that mumbo-jumbo is working

00:03:45.599 --> 00:03:45.609
about that mumbo-jumbo is working
 

00:03:45.609 --> 00:03:47.490
about that mumbo-jumbo is working
underneath the hood and if you're

00:03:47.490 --> 00:03:47.500
underneath the hood and if you're
 

00:03:47.500 --> 00:03:49.199
underneath the hood and if you're
looking to get schooled more make sure

00:03:49.199 --> 00:03:49.209
looking to get schooled more make sure
 

00:03:49.209 --> 00:03:50.430
looking to get schooled more make sure
you check out the rest of the Android

00:03:50.430 --> 00:03:50.440
you check out the rest of the Android
 

00:03:50.440 --> 00:03:51.990
you check out the rest of the Android
performance patterns videos and don't

00:03:51.990 --> 00:03:52.000
performance patterns videos and don't
 

00:03:52.000 --> 00:03:54.000
performance patterns videos and don't
forget to join our Google+ community for

00:03:54.000 --> 00:03:54.010
forget to join our Google+ community for
 

00:03:54.010 --> 00:03:56.580
forget to join our Google+ community for
more tips and tricks on threading so

00:03:56.580 --> 00:03:56.590
more tips and tricks on threading so
 

00:03:56.590 --> 00:03:58.710
more tips and tricks on threading so
keep calm profile your code and always

00:03:58.710 --> 00:03:58.720
keep calm profile your code and always
 

00:03:58.720 --> 00:04:01.680
keep calm profile your code and always
remember perf matters

