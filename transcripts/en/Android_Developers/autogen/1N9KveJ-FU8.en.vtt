WEBVTT
Kind: captions
Language: en

00:00:06.136 --> 00:00:08.840
 Hello everyone, welcome to the new features of Android. 

00:00:08.840 --> 00:00:12.920
 Or I am the only one to call it 

00:00:12.920 --> 00:00:13.950
 Android Keynote people 

00:00:13.950 --> 00:00:16.779
 I am Chet Haase from the Android UI Toolkit team 

00:00:16.779 --> 00:00:19.070
 And I am Romanie Guy from the graphics team. 

00:00:19.070 --> 00:00:22.760
 I am Dan Sandler from the system UI team. 

00:00:22.760 --> 00:00:25.160
 We don't have a lot of time to get started. 

00:00:25.160 --> 00:00:27.440
 Are you ready for the new features of Android? 

00:00:27.440 --> 00:00:30.485
 This is the place we talked about last time, API 25 

00:00:30.485 --> 00:00:32.299
 We are going to mention Git-sha 

00:00:32.299 --> 00:00:36.800
 Put it in git-diff and we can start 

00:00:36.800 --> 00:00:39.740
 You will want to write it down 

00:00:39.740 --> 00:00:41.310
 it is good 

00:00:41.310 --> 00:00:42.380
 Next 

00:00:42.380 --> 00:00:45.020
 Yes, very good 

00:00:45.020 --> 00:00:46.140
 I really like those 

00:00:46.140 --> 00:00:48.318
 Oh, man, remember that we almost made it an enumeration? 

00:00:48.318 --> 00:00:50.360
 so funny 

00:00:52.129 --> 00:00:53.560
 Do you understand? 

00:00:54.765 --> 00:00:56.390
 Do you think this is the purpose of everyone coming here? 

00:00:56.390 --> 00:00:58.970
 I don't know why we didn't think about it before. 

00:00:58.970 --> 00:01:01.220
 We have been talking about this all the time -- we are always telling you 

00:01:01.220 --> 00:01:02.700
 New things in these years 

00:01:02.700 --> 00:01:04.670
 You can see 

00:01:04.670 --> 00:01:06.814
 I forgot to take a blazer 

00:01:06.814 --> 00:01:08.480
 Actually, I have a very beautiful red blazer. 

00:01:08.480 --> 00:01:10.477
 But someone borrowed it for this keynote speech. 

00:01:10.477 --> 00:01:12.100
 You have you -- 

00:01:12.100 --> 00:01:14.324
 It looks like you are 

00:01:14.324 --> 00:01:16.831
 But this year 

00:01:16.831 --> 00:01:18.080
 A little different, right? 

00:01:18.080 --> 00:01:21.080
 Developer previewed in advance 

00:01:21.080 --> 00:01:23.600
 You saw a lot of these APIs 

00:01:23.600 --> 00:01:25.280
 You have a Google keynote 

00:01:25.280 --> 00:01:27.800
 Where did we show off a lot of exciting things? 

00:01:27.800 --> 00:01:29.337
 We arranged a developer keynote 

00:01:29.337 --> 00:01:30.920
 You can learn more about developers from it. 

00:01:30.920 --> 00:01:32.399
 So what are we doing here? 

00:01:32.399 --> 00:01:34.190
 What is the significance of the new Android features? 

00:01:34.190 --> 00:01:35.777
 Existential crisis 

00:01:41.957 --> 00:01:43.040
 Have you tested this clicker? 

00:01:43.040 --> 00:01:43.510
 I tested 

00:01:43.510 --> 00:01:43.660
 Ok 

00:01:43.660 --> 00:01:43.890
 I tested 

00:01:43.890 --> 00:01:45.050
 Imagine this speech 

00:01:45.050 --> 00:01:49.260
 Like a tasting or a whiskey tasting or one of them 

00:01:49.260 --> 00:01:51.450
 You can press all the buttons of the soda machine 

00:01:51.450 --> 00:01:58.790
 This is your carefully selected handcrafted version in the new Android or ignored 

00:01:58.959 --> 00:02:00.750
 Anything you must do 

00:02:00.750 --> 00:02:02.840
 To be part of Android O 

00:02:02.840 --> 00:02:08.220
 To be honest, what we want to talk about on the podium 

00:02:08.220 --> 00:02:11.736
 So, this is really a new feature of Android. 

00:02:11.736 --> 00:02:13.110
 Specifically 

00:02:13.110 --> 00:02:14.630
 You may have missed a developer preview. 

00:02:14.630 --> 00:02:19.590
 Or I/O keynote or other keynotes. That's why you should care. 

00:02:19.590 --> 00:02:22.860
 I want to make sure that the last thing we know today 

00:02:22.860 --> 00:02:24.921
 This is it 

00:02:24.921 --> 00:02:27.390
 Everyone is always excited about this O 

00:02:27.390 --> 00:02:29.936
 We have to stay until the end 

00:02:29.936 --> 00:02:32.200
 Oh 

00:02:32.200 --> 00:02:34.062
 This will be fine 

00:02:34.062 --> 00:02:35.270
 Ok, let's get started. 

00:02:35.270 --> 00:02:36.820
 Roman, please talk about UI and graphics 

00:02:36.820 --> 00:02:38.110
 Ok, let's get started. 

00:02:38.110 --> 00:02:40.390
 The first thing we want to talk about 

00:02:40.390 --> 00:02:42.916
 That is what you saw in the keynote speech this morning. 

00:02:42.916 --> 00:02:44.290
 Chet, this clicker can't. 

00:02:44.290 --> 00:02:45.501
 You have not tested 

00:02:45.501 --> 00:02:46.483
 Oh 

00:02:49.920 --> 00:02:50.420
 You know what -- 

00:02:50.420 --> 00:02:51.503
 waste time 

00:02:51.503 --> 00:02:53.675
 I want to stand here behind. 

00:02:53.675 --> 00:02:55.300
 I want to give you a slide 

00:02:55.300 --> 00:02:55.900
 Ok 

00:02:55.900 --> 00:02:56.800
 Please go to the next slide 

00:02:56.800 --> 00:02:57.370
 This is what they don't want 

00:02:57.370 --> 00:02:58.180
 Give me a reason for a clicker 

00:02:58.180 --> 00:02:59.987
 Ok, this feature -- 

00:03:00.881 --> 00:03:02.177
 This is useful to me 

00:03:02.177 --> 00:03:03.510
 You go back there 

00:03:05.150 --> 00:03:06.610
 I don't want to see you. 

00:03:06.610 --> 00:03:09.470
 You saw this in one of the keynote speeches this morning. 

00:03:09.470 --> 00:03:11.181
 The first function - picture in picture 

00:03:11.181 --> 00:03:11.780
 Not just TV 

00:03:11.780 --> 00:03:12.947
 The phone can also be seen 

00:03:12.947 --> 00:03:15.280
 Here is an example of a third-party application 

00:03:15.280 --> 00:03:17.730
 Netflix runs picture-in-picture on your phone 

00:03:17.730 --> 00:03:19.152
 Give me that clicker 

00:03:19.152 --> 00:03:20.360
 We moved to the back 

00:03:20.360 --> 00:03:21.130
 That's right 

00:03:21.130 --> 00:03:22.810
 This is really easy 

00:03:22.810 --> 00:03:24.220
 Implemented in your application 

00:03:24.220 --> 00:03:26.770
 You only need to modify the list. 

00:03:26.770 --> 00:03:29.110
 And stop playing the animation 

00:03:29.110 --> 00:03:31.360
 Just need to say support for picture-in-picture, really 

00:03:31.360 --> 00:03:33.210
 In O, you no longer need to resize the activity 

00:03:33.210 --> 00:03:35.090
 Set to true 

00:03:35.090 --> 00:03:38.350
 You have to test the configuration changes 

00:03:38.350 --> 00:03:41.476
 In the code, if you want to enter the picture in picture mode 

00:03:41.476 --> 00:03:42.550
 You only need to call 

00:03:42.550 --> 00:03:44.966
 Enter your event and call enterPictureInPicture 

00:03:44.966 --> 00:03:48.510
 Super simple, this will make your users very happy 

00:03:48.510 --> 00:03:50.704
 This is a very intimate feature 

00:03:50.704 --> 00:03:51.620
 That is color management 

00:03:51.620 --> 00:03:53.950
 We add support for wide color gamut replacement O 

00:03:53.950 --> 00:03:55.450
 This won't show on all devices 

00:03:55.450 --> 00:03:57.670
 Only on devices that support this feature 

00:03:57.670 --> 00:04:00.040
 Will be enabled in your app 

00:04:00.040 --> 00:04:02.230
 We are also adding support for 16-bit PNG files. 

00:04:02.230 --> 00:04:06.040
 Then the color can be brighter and more saturated 

00:04:06.040 --> 00:04:08.710
 We support ICC files, so the color profile 

00:04:08.710 --> 00:04:12.520
 Configure embedded in JPEGs PNGs, bitmaps in WebPs 

00:04:12.520 --> 00:04:14.020
 Ensure accurate 

00:04:14.020 --> 00:04:17.356
 Reproduce colors on multiple screens 

00:04:17.356 --> 00:04:18.730
 We also have some brand new APIs. 

00:04:18.730 --> 00:04:19.660
 We are late this week 

00:04:19.660 --> 00:04:21.790
 Talk about this in different speeches 

00:04:21.790 --> 00:04:25.000
 Because a picture is worth a thousand words 

00:04:25.000 --> 00:04:27.220
 This is color management and how it works. 

00:04:27.220 --> 00:04:28.410
 I hope that I have clearly expressed 

00:04:30.170 --> 00:04:33.150
 But color management is about 

00:04:33.150 --> 00:04:36.520
 Something that might have been encountered in your own application 

00:04:36.520 --> 00:04:38.630
 Looks different colors on different devices 

00:04:38.630 --> 00:04:40.541
 At Android O we have a solution 

00:04:40.541 --> 00:04:42.040
 If you want to know more 

00:04:42.040 --> 00:04:43.748
 I will have a speech 

00:04:43.748 --> 00:04:46.390
 On Friday at 11:30 am in Hall 2 

00:04:46.390 --> 00:04:48.600
 The theme of the speech is "Understanding Colors" 

00:04:48.600 --> 00:04:51.550
 Next, we also add support for multiple monitors. 

00:04:51.550 --> 00:04:53.715
 If your application already has -- 

00:04:53.715 --> 00:04:55.910
 This clicker is scary 

00:04:55.910 --> 00:04:59.300
 If your app already supports multiple windows 

00:04:59.300 --> 00:05:00.790
 Multi-window mode 

00:05:00.790 --> 00:05:04.900
 Then in O it already supports multiple windows when the phone is connected 

00:05:04.900 --> 00:05:07.244
 Or a network device connected to multiple displays 

00:05:07.244 --> 00:05:09.160
 And you have a compatible app 

00:05:09.160 --> 00:05:12.786
 Users can choose to send apps to you on different monitors 

00:05:12.786 --> 00:05:14.140
 When this happens 

00:05:14.140 --> 00:05:17.710
 You will get the adjustment configuration changes 

00:05:17.710 --> 00:05:20.680
 You can also control what your activities show. 

00:05:20.680 --> 00:05:22.720
 You can use the event option 

00:05:22.720 --> 00:05:24.250
 You should seriously test the application 

00:05:24.250 --> 00:05:25.824
 If you want to support this feature 

00:05:25.824 --> 00:05:28.240
 To help you test, we have two new development tools. 

00:05:28.240 --> 00:05:30.730
 You can run adb shell dumpsys display 

00:05:30.730 --> 00:05:33.770
 This will list all the displays currently available on the device. 

00:05:33.770 --> 00:05:36.680
 If you call the adb shell to start your activity intent 

00:05:36.680 --> 00:05:39.430
 You can specify which display you want to start the event. 

00:05:39.491 --> 00:05:42.310
 This is a very simple way for you to test 

00:05:42.310 --> 00:05:44.050
 Those APIs have more features 

00:05:44.050 --> 00:05:48.160
 I suggest you go to office hours. 

00:05:48.160 --> 00:05:50.550
 Friday and Thursday 

00:05:50.550 --> 00:05:53.990
 This is Windows and active office hours 

00:05:53.990 --> 00:05:55.180
 Next, the media 

00:05:58.720 --> 00:06:01.580
 We have a lot of courses about media packaging. 

00:06:01.580 --> 00:06:04.230
 Media player media recorder, extractor 

00:06:04.230 --> 00:06:05.130
 Codec 

00:06:05.130 --> 00:06:07.080
 We've added a new getMetrics API course 

00:06:07.080 --> 00:06:08.730
 To each of the above classes 

00:06:08.730 --> 00:06:11.119
 This helps inquiring 

00:06:11.119 --> 00:06:12.160
 Information about the media you are working on 

00:06:12.160 --> 00:06:15.570
 So you can query the resolution codec, bitrate 

00:06:15.570 --> 00:06:17.132
 Duration, such data 

00:06:17.132 --> 00:06:18.090
 They are super easy to use 

00:06:18.090 --> 00:06:20.167
 Just call getMetrics on one of the objects 

00:06:20.167 --> 00:06:21.750
 You will get PersistableBundle 

00:06:21.750 --> 00:06:25.380
 You can also find documentation at developer.android.com 

00:06:25.380 --> 00:06:28.470
 To find out what kind of query is available 

00:06:28.470 --> 00:06:29.920
 Playback has also been greatly improved 

00:06:29.920 --> 00:06:33.240
 Now you can control the buffering in the application. 

00:06:33.240 --> 00:06:36.260
 You can specify a high watermark and a low watermark 

00:06:36.260 --> 00:06:39.660
 Then the video won’t start playing. 

00:06:39.660 --> 00:06:42.390
 Until the low watermark is reached 

00:06:42.390 --> 00:06:45.270
 The system will try to keep it 

00:06:45.270 --> 00:06:47.304
 Cache data between this low and high watermark 

00:06:47.304 --> 00:06:47.920
 You can specify 

00:06:47.920 --> 00:06:53.130
 The duration of the watermark or the amount of data 

00:06:53.130 --> 00:06:54.750
 We also improved the search 

00:06:54.750 --> 00:06:56.310
 When you search for a video 

00:06:56.310 --> 00:06:57.476
 Now you can choose behavior 

00:06:57.476 --> 00:06:59.850
 You want to search for the closest frame 

00:06:59.850 --> 00:07:02.670
 To the next frame, the previous frame 

00:07:02.670 --> 00:07:04.680
 Or the closest sync frame 

00:07:04.680 --> 00:07:07.050
 Finally, we make DRM rebate 

00:07:07.050 --> 00:07:08.910
 Easier to use with Widevine 

00:07:08.910 --> 00:07:12.000
 In all apps 

00:07:12.000 --> 00:07:13.810
 As for the recording, until now 

00:07:13.810 --> 00:07:21.900
 The media mixer only allows one video track and/or one track to be added 

00:07:21.900 --> 00:07:24.900
 Now you can add as many tracks and video tracks as possible 

00:07:24.900 --> 00:07:27.010
 You can also create custom track video tracks. 

00:07:27.010 --> 00:07:29.390
 MIME type must start with "application/" 

00:07:29.390 --> 00:07:32.570
 Basically a sideband you can encode any type of data. 

00:07:32.598 --> 00:07:34.750
 An example of a specification is 

00:07:34.750 --> 00:07:40.220
 If you want to play a 360-degree video or something like that, you need to encode the JavaScript data. 

00:07:40.220 --> 00:07:43.820
 WebView comes with new and useful APIs 

00:07:43.820 --> 00:07:46.710
 We added this safe browsing feature 

00:07:46.710 --> 00:07:49.100
 This is a feature you know and love in chrome 

00:07:49.100 --> 00:07:52.620
 Helps detect malware and unsafe web pages 

00:07:52.620 --> 00:07:55.870
 If you add this tag to your list this metadata tag 

00:07:55.870 --> 00:07:58.080
 It will use the same backend and the same API 

00:07:58.080 --> 00:08:00.070
 This API, Chrome itself is also in use 

00:08:00.070 --> 00:08:03.240
 To ensure a browsing experience for users 

00:08:03.240 --> 00:08:05.165
 Now WebView uses multiple programs 

00:08:05.165 --> 00:08:07.810
 In particular, there is a renderer 

00:08:07.810 --> 00:08:11.380
 So we also have a brand new API to handle these multiple programs. 

00:08:11.380 --> 00:08:13.680
 If the renderer system crashes 

00:08:13.680 --> 00:08:17.361
 You can use the Termination Handle API to detect crashes. 

00:08:17.361 --> 00:08:19.110
 And decide what to do with the application 

00:08:19.110 --> 00:08:21.000
 Can crash the app if you want 

00:08:21.000 --> 00:08:22.458
 Then try restarting the WebView 

00:08:22.458 --> 00:08:25.080
 Or just log something and display a message to the user 

00:08:25.080 --> 00:08:27.060
 This is much more beautiful than before 

00:08:27.060 --> 00:08:29.430
 You can also use the Renderer Importance API. 

00:08:29.430 --> 00:08:32.169
 Used to better handle memory shortages 

00:08:32.169 --> 00:08:33.990
 When the system has insufficient memory 

00:08:33.990 --> 00:08:36.990
 It will try to reclaim memory from somewhere 

00:08:36.990 --> 00:08:38.440
 You can tell the system 

00:08:38.440 --> 00:08:42.640
 Whether this WebView is important or not important to the application 

00:08:42.640 --> 00:08:45.030
 If WebView is critical to the application 

00:08:45.030 --> 00:08:48.282
 Then be sure to check out this API 

00:08:48.282 --> 00:08:50.490
 You know this is the right button, right? 

00:08:50.490 --> 00:08:51.815
 Yes, I know 

00:08:53.159 --> 00:08:56.170
 There are several features that have been asked for animators for a long time. 

00:08:56.170 --> 00:08:58.410
 Specifically for AnimatorSets 

00:08:58.410 --> 00:09:02.250
 It took a while to implement the implementation, which seemed to be tricky. 

00:09:02.250 --> 00:09:06.510
 But now in Android O, in AnimatorSets 

00:09:06.510 --> 00:09:07.980
 We have the ability to search 

00:09:07.980 --> 00:09:08.980
 Now if you have one 

00:09:08.980 --> 00:09:11.340
 Animator with a collection of Child Animators 

00:09:11.340 --> 00:09:13.080
 You can search for those Child Animators 

00:09:13.080 --> 00:09:14.610
 In the entire AnimatorSet 

00:09:14.610 --> 00:09:16.110
 correct 

00:09:16.110 --> 00:09:20.160
 We also have this feature 

00:09:20.160 --> 00:09:21.370
 To convert 

00:09:21.954 --> 00:09:23.370
 Hey, Chet, have you tried? 

00:09:23.370 --> 00:09:25.775
 Which APIs were implemented not long ago? 

00:09:25.775 --> 00:09:26.525
 possible 

00:09:26.525 --> 00:09:27.380
 Ok 

00:09:27.380 --> 00:09:29.149
 Who is implementing those APIs? 

00:09:29.149 --> 00:09:29.940
 not me 

00:09:29.940 --> 00:09:30.110
 Yes 

00:09:30.110 --> 00:09:30.818
 Yes 

00:09:30.818 --> 00:09:32.010
 Completely correct 

00:09:32.010 --> 00:09:34.770
 New performance again in AnimatorSet 

00:09:34.770 --> 00:09:35.500
 Mutual conversion 

00:09:35.500 --> 00:09:37.830
 You no longer need to set one 

00:09:37.830 --> 00:09:41.760
 Have an independent AnimatorSet with all the features and find an audience and the like 

00:09:41.760 --> 00:09:45.330
 We have done all the tedious work for you. 

00:09:45.330 --> 00:09:47.550
 Autofill is really a very tedious job. 

00:09:47.550 --> 00:09:49.660
 Make all the information correct 

00:09:49.660 --> 00:09:51.780
 Earlier we saw it in the keynote speech. 

00:09:51.780 --> 00:09:53.740
 This is the ability 

00:09:53.740 --> 00:09:55.110
 To fill out a form 

00:09:55.110 --> 00:09:57.970
 There is a provider who can give you information 

00:09:57.970 --> 00:09:59.910
 So when you get those text fields 

00:09:59.910 --> 00:10:02.760
 We can automatically fill in that information for you. 

00:10:02.760 --> 00:10:05.617
 There are several aspects that are different 

00:10:05.617 --> 00:10:07.950
 Of course you can carry out your own services. 

00:10:07.950 --> 00:10:09.360
 And provide that function 

00:10:09.360 --> 00:10:11.820
 Or rely on the services we are providing 

00:10:11.820 --> 00:10:14.720
 Or more typical you will execute a client 

00:10:14.720 --> 00:10:16.140
 Standard view works properly 

00:10:16.140 --> 00:10:18.761
 If you are using a TextView, if you are using EditText 

00:10:18.761 --> 00:10:20.385
 We already know how to receive this information 

00:10:20.385 --> 00:10:22.674
 To interact with the service 

00:10:22.674 --> 00:10:24.840
 So you don't need to do anything with the standard view. 

00:10:24.840 --> 00:10:26.440
 If you use a custom view 

00:10:26.440 --> 00:10:30.210
 Or you have to provide more information about the standard view. 

00:10:30.210 --> 00:10:32.614
 We have APIs to provide us with 

00:10:32.614 --> 00:10:36.216
 Tips and APIs for what numeric types are 

00:10:36.216 --> 00:10:38.140
 Let us tell us more about custom views. 

00:10:38.140 --> 00:10:40.350
 And how do you want to interact with it? 

00:10:40.350 --> 00:10:42.450
 If you have a custom view hierarchy 

00:10:42.450 --> 00:10:44.340
 Suppose you have a SurfaceView 

00:10:44.340 --> 00:10:49.140
 There are some views inside, but we only know that there is a SurfaceView 

00:10:49.140 --> 00:10:51.130
 Then there is an API telling us 

00:10:51.130 --> 00:10:53.820
 About the virtual level you want to interact with 

00:10:53.820 --> 00:10:56.760
 We will say more in the speech on Friday morning. 

00:10:56.760 --> 00:10:58.460
 So go to the one if you want to 

00:10:58.460 --> 00:11:00.980
 Learn more about autofill 

00:11:00.980 --> 00:11:03.100
 Now let's talk about the text. 

00:11:03.100 --> 00:11:07.060
 This time there are a lot of things happening in the off text. 

00:11:07.074 --> 00:11:08.240
 I think we can rewrite these 

00:11:08.240 --> 00:11:09.752
 That's right 

00:11:12.110 --> 00:11:15.500
 I only use that font because it makes Dan feel hurt. 

00:11:15.500 --> 00:11:17.200
 This hurts him physically 

00:11:17.200 --> 00:11:18.410
 it's great 

00:11:18.410 --> 00:11:20.180
 I think you hurt him. 

00:11:20.180 --> 00:11:22.040
 Ok, first 

00:11:22.040 --> 00:11:27.080
 You can use XML to declare font information. 

00:11:27.080 --> 00:11:29.360
 Use a good data binding technique 

00:11:29.360 --> 00:11:31.820
 But doing it is a bit tricky 

00:11:31.820 --> 00:11:33.680
 Why should we not 

00:11:33.680 --> 00:11:35.000
 Actually provide that function for you? 

00:11:35.000 --> 00:11:35.840
 Now we have provided 

00:11:35.840 --> 00:11:38.540
 Now you can put a font document directly 

00:11:38.540 --> 00:11:40.740
 Go to this new resource font directory 

00:11:48.700 --> 00:11:50.320
 Yes, it is. 

00:11:50.320 --> 00:11:52.570
 Put it in the catalog or you can tell us 

00:11:52.570 --> 00:11:53.520
 Related font series 

00:11:53.520 --> 00:11:55.840
 You can provide a few fonts 

00:11:55.840 --> 00:11:57.700
 With each style of information 

00:11:57.700 --> 00:12:01.225
 Then you can use it just like any other resource 

00:12:01.225 --> 00:12:03.955
 Give me this resource from the code. 

00:12:03.955 --> 00:12:05.950
 That's right 

00:12:05.950 --> 00:12:07.120
 Downloadable font 

00:12:07.120 --> 00:12:09.017
 Now we have this feature 

00:12:09.017 --> 00:12:11.350
 Declare a font you want to use 

00:12:11.350 --> 00:12:14.950
 If it is not already in the system then we will download and cache it on the system. 

00:12:14.950 --> 00:12:18.290
 If the system already exists, we will use it from the cache. 

00:12:18.290 --> 00:12:20.140
 You can do this using code or XML 

00:12:20.140 --> 00:12:23.240
 And use it as a resource just like you use XML fonts 

00:12:23.240 --> 00:12:25.510
 Exciting slides before that 

00:12:25.510 --> 00:12:27.220
 We also have a font provider 

00:12:27.220 --> 00:12:29.636
 This is an unreleased version 

00:12:29.636 --> 00:12:30.340
 On Google Play Services 

00:12:30.340 --> 00:12:31.740
 We have a beta this week. 

00:12:31.740 --> 00:12:33.340
 For everyone to use at the meeting 

00:12:33.340 --> 00:12:34.770
 I still don't know the details. 

00:12:34.770 --> 00:12:36.940
 But there will be a meeting where you can learn about those details. 

00:12:36.940 --> 00:12:39.273
 Or you can go to the Play Services website 

00:12:39.273 --> 00:12:40.960
 to know more information 

00:12:40.960 --> 00:12:43.624
 This allows you to use all Google fonts 

00:12:43.624 --> 00:12:45.790
 If you only want to use standard fonts 

00:12:45.790 --> 00:12:49.510
 For example the beautiful font I am using 

00:12:49.510 --> 00:12:51.340
 Maybe that is already inside 

00:12:51.340 --> 00:12:54.970
 Then you can ask directly from the service desk 

00:12:54.970 --> 00:12:58.000
 Also has the ability to automatically adjust the TextView 

00:12:58.000 --> 00:13:00.700
 Generally if you want to adjust the size of the TextView 

00:13:05.224 --> 00:13:06.640
 You won't know 

00:13:06.640 --> 00:13:09.790
 That will become a sensational thing, right? 

00:13:09.790 --> 00:13:10.360
 text 

00:13:10.360 --> 00:13:11.314
 The text is cool 

00:13:11.314 --> 00:13:13.690
 Especially when it is a suitable font 

00:13:13.690 --> 00:13:16.630
 Now what you get is the behavior on the left 

00:13:16.630 --> 00:13:18.670
 Where we just adjusted the size of the view itself 

00:13:18.670 --> 00:13:20.350
 Font has not changed 

00:13:20.350 --> 00:13:23.420
 On the right, if you choose to automatically adjust the TextView behavior 

00:13:23.420 --> 00:13:26.140
 Then we will adjust the font size for you 

00:13:26.140 --> 00:13:27.490
 You can specify behavior 

00:13:27.490 --> 00:13:33.690
 Or when it's resizing, you want to capture a specific size of step increment 

00:13:33.710 --> 00:13:34.930
 There are APIs for this 

00:13:34.930 --> 00:13:38.860
 XML and Java programming language code in the API 

00:13:38.860 --> 00:13:41.380
 Enjoy it all. 

00:13:41.380 --> 00:13:43.210
 All these text features 

00:13:43.210 --> 00:13:46.210
 XML fonts, downloadable fonts and auto-adjust TextView 

00:13:46.210 --> 00:13:48.915
 What new features do they support in the library tomorrow morning? 

00:13:48.915 --> 00:13:50.475
 Meeting will talk about these features 

00:13:50.475 --> 00:13:52.600
 You may think, why are they going to be 

00:13:52.600 --> 00:13:53.980
 Do you talk about these things at the Support Library conference? 

00:13:53.980 --> 00:13:56.260
 Are these not APIs for the O platform? 

00:13:56.260 --> 00:13:57.490
 Yes, they are 

00:13:57.490 --> 00:13:59.761
 Not also they also belong to the Support Library 

00:14:05.890 --> 00:14:10.120
 You can also use these new features on earlier versions. 

00:14:10.120 --> 00:14:11.800
 AccessibilityService Utilities 

00:14:11.800 --> 00:14:13.690
 If you are writing AccessibilityService 

00:14:13.690 --> 00:14:14.440
 This is a great thing 

00:14:14.440 --> 00:14:16.773
 We have some brand new features you can use 

00:14:16.773 --> 00:14:17.580
 Language detection 

00:14:17.580 --> 00:14:21.130
 You can place a button and other buttons in the navigation bar. 

00:14:21.130 --> 00:14:23.160
 To make it easier to visit your things. 

00:14:23.160 --> 00:14:25.750
 Separated volume control achieves barrier-free volume 

00:14:25.750 --> 00:14:27.484
 Then you won't put that volume 

00:14:27.484 --> 00:14:28.900
 Blend with other volume on the device 

00:14:28.900 --> 00:14:33.182
 There is also the ability to define custom fingerprint gestures 

00:14:33.182 --> 00:14:35.140
 If you want to know more about it 

00:14:35.140 --> 00:14:37.750
 There was a speech in the afternoon with the theme of barrier-free access. 

00:14:37.750 --> 00:14:39.100
 You should look 

00:14:39.100 --> 00:14:42.454
 Finally, there is a small change that I like very much. 

00:14:42.454 --> 00:14:43.870
 I want to say that it is very tiny. 

00:14:43.870 --> 00:14:45.860
 Because this is a line of API code 

00:14:45.860 --> 00:14:49.180
 But the actual cls is used to fix all the code 

00:14:49.180 --> 00:14:52.509
 Widely relying on the execution of the former 

00:14:52.509 --> 00:14:54.550
 I don't want to damage its work 

00:14:54.550 --> 00:14:56.925
 But the API is really tiny, hidden 

00:14:56.925 --> 00:14:59.050
 Looks like the same thing from the outside 

00:14:59.050 --> 00:15:02.400
 findViewById was previously declared with a party like this, 

00:15:02.400 --> 00:15:04.390
 Public view, findViewById 

00:15:04.390 --> 00:15:07.075
 Then you declare, pass to the resource ID 

00:15:07.075 --> 00:15:08.000
 Get back a view 

00:15:08.000 --> 00:15:10.420
 Then immediately put it into what you want 

00:15:10.420 --> 00:15:12.347
 So TextView, you have to tell TextView, 

00:15:12.347 --> 00:15:14.680
 On the left and right, then there are brackets 

00:15:14.680 --> 00:15:15.730
 This is very troublesome 

00:15:15.730 --> 00:15:19.000
 People use the subsidy library just to avoid this situation. 

00:15:19.000 --> 00:15:21.910
 This looks terrible 

00:15:21.910 --> 00:15:24.178
 just now 

00:15:25.666 --> 00:15:26.658
 We have this 

00:15:31.630 --> 00:15:33.850
 I call this new feature Castaway 

00:15:33.850 --> 00:15:35.530
 I think I am the only one to do this. 

00:15:38.429 --> 00:15:40.470
 Ok, skip my first slide 

00:15:40.470 --> 00:15:41.220
 That's fine 

00:15:41.220 --> 00:15:44.190
 I want to say a little more about the system UI. 

00:15:44.190 --> 00:15:45.750
 This is what you all want to see. 

00:15:45.750 --> 00:15:46.896
 If you have an app 

00:15:46.896 --> 00:15:49.020
 Then you need to understand the adaptive icon 

00:15:49.020 --> 00:15:53.764
 I think one of the slides at Steph earlier was mentioned a little earlier today. 

00:15:54.090 --> 00:15:56.582
 In essence, we are working hard to save you time and money. 

00:15:56.582 --> 00:15:58.380
 There are so many launchers outside 

00:15:58.380 --> 00:16:02.070
 And each has different suggestions for the shape of the icon. 

00:16:02.070 --> 00:16:06.870
 The adaptive icon is a new technology that we bring to you in O 

00:16:06.870 --> 00:16:07.920
 Enable you to say 

00:16:07.920 --> 00:16:10.200
 This is my backstage, this is my front desk. 

00:16:10.200 --> 00:16:11.940
 Cut out the shapes you like 

00:16:11.940 --> 00:16:14.520
 Even if the launcher has a circle 

00:16:14.520 --> 00:16:17.910
 Or a rounded rectangle or something scary 

00:16:17.910 --> 00:16:24.680
 You guys will have a fully matched local feature that is the icon 

00:16:24.680 --> 00:16:30.442
 There will be a lot of information on the adaptive icons in the speech on Thursday. 

00:16:31.020 --> 00:16:33.750
 And will definitely mention this topic 

00:16:36.060 --> 00:16:38.880
 Ok, let's talk about shortcuts and widgets. 

00:16:38.880 --> 00:16:40.770
 Because the launcher is also part of the system UI 

00:16:40.770 --> 00:16:43.950
 Previously, put shortcuts and widgets on the user's screen. 

00:16:43.950 --> 00:16:47.220
 There is a slightly useful broadcast shortcut 

00:16:47.220 --> 00:16:50.250
 As for the widgets, you only need to ask the user, please, please. 

00:16:50.250 --> 00:16:53.579
 See if we can find our widget in the launcher 

00:16:55.250 --> 00:16:59.520
 At O, now you can actually ask for one of them here. 

00:16:59.520 --> 00:17:02.089
 Fixed in the user's workspace 

00:17:02.089 --> 00:17:03.630
 Use shortcut shortcuts 

00:17:03.630 --> 00:17:05.910
 Application widget manager using widgets 

00:17:05.910 --> 00:17:07.763
 Then the user has a chance to say no 

00:17:07.763 --> 00:17:10.180
 I don't want to put it on the desktop or well, I want 

00:17:10.180 --> 00:17:12.000
 And in fact I will continue 

00:17:12.000 --> 00:17:13.200
 Put it where I want it 

00:17:13.200 --> 00:17:15.000
 Or they can say, of course, find a place for it 

00:17:15.000 --> 00:17:16.230
 This is the previous behavior 

00:17:16.230 --> 00:17:18.711
 Now users don't have to go through a long process 

00:17:18.711 --> 00:17:20.460
 You just need to send them to this dialog 

00:17:20.460 --> 00:17:21.724
 This is super convenient 

00:17:21.724 --> 00:17:24.349
 Look at all the new users you will be on the widget 

00:17:29.686 --> 00:17:32.060
 I will say that I was suspended because of the applause. 

00:17:32.060 --> 00:17:33.560
 But I am actually getting this clicker. 

00:17:33.560 --> 00:17:36.890
 We will talk about this again at 4:30 pm on Thursday. 

00:17:36.890 --> 00:17:39.250
 Ok, notice, you know that you are coming soon. 

00:17:39.250 --> 00:17:40.392
 They are super useful 

00:17:40.392 --> 00:17:41.600
 They are great for interaction 

00:17:41.600 --> 00:17:43.430
 Users love them very much 

00:17:43.430 --> 00:17:45.240
 But it may be a bit out of control 

00:17:45.240 --> 00:17:48.869
 There are a lot of things for notification streaming now. 

00:17:48.869 --> 00:17:49.860
 You are very difficult 

00:17:49.860 --> 00:17:51.526
 Send the message to the user 

00:17:51.526 --> 00:17:56.370
 Users are also hard to pay attention to the inflow of demand 

00:17:56.420 --> 00:17:57.620
 If not controlled now 

00:17:57.620 --> 00:17:59.086
 Users should always be in control 

00:17:59.086 --> 00:18:01.253
 This is the principle we have been pursuing. 

00:18:01.253 --> 00:18:04.268
 From the packaging of a Jelly Bean, we added a feature to block notifications 

00:18:04.280 --> 00:18:09.160
 At Nougat we made a little more refined and added silence 

00:18:09.160 --> 00:18:09.970
 But all this 

00:18:09.970 --> 00:18:13.660
 The first request the user made to us was 

00:18:13.660 --> 00:18:16.522
 Can I block some notifications from an application? 

00:18:16.522 --> 00:18:18.230
 on the other hand 

00:18:18.230 --> 00:18:20.290
 The first request that developers make to us is 

00:18:20.290 --> 00:18:22.857
 Can the user intercept some of my notifications? 

00:18:22.857 --> 00:18:23.690
 This is the same thing 

00:18:23.690 --> 00:18:25.340
 Everyone has been asking the same thing 

00:18:25.340 --> 00:18:27.423
 This is the source of the notification channel. 

00:18:27.423 --> 00:18:28.920
 In O this is a brand new API 

00:18:28.920 --> 00:18:32.050
 One channel is a notification category for the app 

00:18:32.050 --> 00:18:34.280
 They all have the same behavior 

00:18:34.280 --> 00:18:37.400
 Vibration, sound, flash whether or not it pops on the screen 

00:18:37.400 --> 00:18:42.410
 Users can control clearly and carefully 

00:18:46.380 --> 00:18:49.140
 This is an app you can set all your own channels 

00:18:49.140 --> 00:18:52.060
 Define default behavior for O 

00:18:52.060 --> 00:18:54.220
 Pop up a private message 

00:18:54.220 --> 00:18:58.070
 Label does not pop up or its priority is lower 

00:18:58.070 --> 00:19:00.570
 Then the user long presses a notification 

00:19:00.570 --> 00:19:02.200
 Or use the new swipe gesture to view 

00:19:02.200 --> 00:19:03.930
 They can see which channel is open 

00:19:03.930 --> 00:19:07.680
 Then make changes in the row 

00:19:07.680 --> 00:19:11.810
 Once you are targeting O, there is no time to be taken away in these two minutes. 

00:19:11.810 --> 00:19:12.570
 I have to take this 

00:19:12.570 --> 00:19:15.420
 For each notification, you must use the channel 

00:19:15.420 --> 00:19:16.570
 Otherwise they will be discarded 

00:19:16.570 --> 00:19:19.170
 Until you are against O, you can start slowly. 

00:19:19.170 --> 00:19:21.540
 Develop the notification system into a channel 

00:19:21.540 --> 00:19:23.800
 Once you are targeting O, they must be fully channelized. 

00:19:23.800 --> 00:19:26.050
 Because we want a consistent experience 

00:19:26.050 --> 00:19:28.140
 Users know what they will get 

00:19:28.140 --> 00:19:29.580
 We are going to talk about this 

00:19:29.580 --> 00:19:30.960
 There are many other great things 

00:19:30.960 --> 00:19:32.049
 Including design considerations 

00:19:32.049 --> 00:19:35.570
 No code placed here is flashing little things over there 

00:19:35.570 --> 00:19:39.280
 Speech at 4:30 pm tomorrow 

00:19:39.280 --> 00:19:42.710
 There is a lot of system UI, great stuff 

00:19:42.710 --> 00:19:44.310
 We have listed some here 

00:19:44.310 --> 00:19:45.600
 It is finished again 

00:19:45.600 --> 00:19:47.550
 I like to use slides. 

00:19:47.550 --> 00:19:50.200
 I strongly encourage you to check out the developer preview. 

00:19:50.200 --> 00:19:51.960
 Or install the beta and try all the features 

00:19:51.960 --> 00:19:53.721
 We are proud of it 

00:19:55.440 --> 00:19:57.700
 New API for US developers 

00:19:57.700 --> 00:19:59.830
 We extended the restricted mode API 

00:19:59.830 --> 00:20:02.250
 I believe that you will all use it for debugging. 

00:20:02.250 --> 00:20:04.170
 Current ThreadPolicy 

00:20:04.170 --> 00:20:07.400
 You get a warning when using unbuffered I/O 

00:20:07.400 --> 00:20:08.790
 If you use an input stream or an output stream 

00:20:08.790 --> 00:20:11.920
 But without wrapping it into a buffer stream, you will see a flash. 

00:20:11.920 --> 00:20:15.030
 Or something else, this is the default trigger warning. 

00:20:15.030 --> 00:20:17.430
 If there is no sockets tag on VmPolicy 

00:20:17.430 --> 00:20:18.450
 Also get a warning 

00:20:18.450 --> 00:20:19.380
 Put Sockets tag 

00:20:19.380 --> 00:20:22.630
 It’s really useful for debugging traffic with Android Studio 

00:20:22.630 --> 00:20:25.000
 Finally, if you open another intent 

00:20:25.000 --> 00:20:27.366
 If you send an intent to the outside of the app 

00:20:27.366 --> 00:20:28.740
 Need to grant a license 

00:20:28.740 --> 00:20:29.910
 Also get a warning 

00:20:29.910 --> 00:20:31.470
 In fact, this is easy to use. 

00:20:31.470 --> 00:20:34.490
 Looks like the previous API 

00:20:34.490 --> 00:20:35.260
 Media file access 

00:20:35.260 --> 00:20:38.700
 We introduced this file provider not long ago. 

00:20:38.700 --> 00:20:41.310
 They are very useful just before a few releases. 

00:20:41.310 --> 00:20:42.990
 Unless you have large documents 

00:20:42.990 --> 00:20:44.400
 If it is a large document 

00:20:44.400 --> 00:20:46.290
 You need to download the entire data. 

00:20:46.290 --> 00:20:50.670
 Can pass it to the user of the file provider 

00:20:50.670 --> 00:20:53.220
 Now you can create searchable file descriptors 

00:20:53.220 --> 00:20:54.690
 For audio, video 

00:20:54.690 --> 00:20:57.100
 Or any large file is very useful 

00:20:57.100 --> 00:20:59.430
 This is very easy to use 

00:20:59.430 --> 00:21:02.160
 You use the StorageManager to open the proxy file descriptor. 

00:21:02.160 --> 00:21:03.987
 Give it a callback 

00:21:03.987 --> 00:21:05.820
 Then we have to call this callback 

00:21:05.820 --> 00:21:07.730
 Request file size 

00:21:07.730 --> 00:21:10.497
 Requires the amount of data in some byte arrays 

00:21:10.497 --> 00:21:12.580
 Then we have to tell you when to turn it off 

00:21:18.740 --> 00:21:20.550
 Cache data 

00:21:20.550 --> 00:21:22.290
 This is a brand new API 

00:21:22.290 --> 00:21:24.950
 System makes you a better citizen 

00:21:24.950 --> 00:21:26.840
 Each application has a certain amount of data 

00:21:26.840 --> 00:21:30.740
 Can be used in cache partitions 

00:21:30.740 --> 00:21:33.910
 Insufficient storage when system space is low 

00:21:33.910 --> 00:21:36.360
 Will start deleting some cached data 

00:21:36.360 --> 00:21:39.170
 If you keep below the preset indicator 

00:21:39.170 --> 00:21:41.720
 Can prevent data from being deleted 

00:21:41.720 --> 00:21:44.270
 For this, you can use StorageManager 

00:21:44.270 --> 00:21:45.280
 Used to view 

00:21:45.280 --> 00:21:48.664
 The number of bytes allocated to the application 

00:21:48.664 --> 00:21:50.330
 You should check it from time to time. 

00:21:50.330 --> 00:21:51.830
 Because the quota can be changed 

00:21:51.830 --> 00:21:53.960
 It depends on how much quota is used 

00:21:53.960 --> 00:21:56.870
 Or how often the user uses the app 

00:21:56.870 --> 00:21:58.460
 When you want to deploy data 

00:21:58.460 --> 00:21:59.789
 Can use allocateBytes 

00:21:59.789 --> 00:22:00.830
 You can do it yourself 

00:22:00.830 --> 00:22:02.330
 Just create a file 

00:22:02.330 --> 00:22:03.345
 You can create an output stream 

00:22:03.345 --> 00:22:04.970
 This is much better 

00:22:04.970 --> 00:22:07.550
 Because when you double check the allocateBytes, as needed 

00:22:07.550 --> 00:22:09.980
 The system will delete the cached data of another application 

00:22:09.980 --> 00:22:11.720
 Free up space to store data 

00:22:11.720 --> 00:22:13.880
 This means getCacheQuotaBytes 

00:22:13.880 --> 00:22:14.810
 Or more than 

00:22:14.810 --> 00:22:18.266
 Free space on the device 

00:22:18.266 --> 00:22:19.640
 You can also use the name 

00:22:19.640 --> 00:22:22.220
 setCacheBehaviorTombstone stuff 

00:22:22.220 --> 00:22:24.680
 Very useful for applications 

00:22:24.680 --> 00:22:27.140
 Can tell you that there has never been a cache with a cache 

00:22:27.140 --> 00:22:30.950
 But the difference between the deleted files 

00:22:30.950 --> 00:22:32.770
 When you set the behavior 

00:22:32.770 --> 00:22:35.390
 The system deleted some files in the cache. 

00:22:35.390 --> 00:22:36.696
 This will shorten the file 

00:22:36.696 --> 00:22:39.320
 The file will still be there, but the size will be set to 0 

00:22:39.320 --> 00:22:43.370
 This tells the cache file that it has been deleted by the system. 

00:22:43.370 --> 00:22:46.070
 Finally, available space and allocatable space 

00:22:46.070 --> 00:22:47.231
 Is different 

00:22:49.579 --> 00:22:53.120
 There are a lot of Android security in this version. 

00:22:53.120 --> 00:22:56.130
 And we only have a little time to talk about it. 

00:22:56.130 --> 00:22:58.540
 I want to emphasize some privacy agreements. 

00:22:58.540 --> 00:23:00.760
 This is a new feature of Android O. 

00:23:00.760 --> 00:23:02.326
 If you always use Android ID 

00:23:02.326 --> 00:23:03.700
 Need to know now 

00:23:03.700 --> 00:23:08.420
 Each application has a different device for each user. 

00:23:08.420 --> 00:23:12.246
 It is not able to track users on the same device between applications 

00:23:12.250 --> 00:23:14.290
 Again, if you have been reflecting 

00:23:14.290 --> 00:23:17.620
 System property to get net.hostname now it is empty 

00:23:17.620 --> 00:23:19.570
 If you want to say 

00:23:19.570 --> 00:23:23.140
 I really need to advertise with ID to make it available to users. 

00:23:23.140 --> 00:23:25.300
 Send a situation-specific ad 

00:23:25.300 --> 00:23:28.570
 This is the function of the Advertising ID API in Google Play Services. 

00:23:28.570 --> 00:23:30.160
 Go check it out on Google Play. 

00:23:30.160 --> 00:23:32.770
 But you can't use Android ID 

00:23:32.770 --> 00:23:36.360
 You can't believe it in the same way as before. 

00:23:36.375 --> 00:23:37.750
 I have a slide on WebView here. 

00:23:37.750 --> 00:23:39.050
 But Roman took it away. 

00:23:39.050 --> 00:23:40.508
 I have another thing to mention. 

00:23:40.508 --> 00:23:43.210
 This is about safe browsing of WebView because now WebView 

00:23:43.210 --> 00:23:45.520
 Put it to the Play Store every six months 

00:23:45.520 --> 00:23:48.460
 You will be able to choose a safe browsing function. 

00:23:48.460 --> 00:23:53.669
 It’s great before Lollipop. 

00:23:53.669 --> 00:23:55.780
 We also saw some new features in the keynote speech. 

00:23:55.780 --> 00:23:57.746
 We call it Google Play Protect 

00:23:57.746 --> 00:24:00.180
 In fact, it involves a lot of technologies that have been in place before. 

00:24:00.180 --> 00:24:02.290
 But there is really no visibility 

00:24:02.290 --> 00:24:03.430
 And indeed they are worthy of visibility 

00:24:03.430 --> 00:24:05.860
 Every moment, we always look after people 

00:24:05.860 --> 00:24:09.580
 Any device that has Google Play Protect enabled 

00:24:09.580 --> 00:24:11.350
 Any app uploaded to Play 

00:24:11.350 --> 00:24:16.000
 Will be pre-screened and will be re-screened as each new version is uploaded 

00:24:16.030 --> 00:24:17.830
 Whenever you install the app 

00:24:17.830 --> 00:24:19.752
 Play Protect has been set up 

00:24:19.752 --> 00:24:21.460
 The application will also be screened 

00:24:21.460 --> 00:24:26.620
 Even if installed from another location or ADB 

00:24:26.620 --> 00:24:29.260
 We are really excited 

00:24:29.260 --> 00:24:31.810
 There is still a lot to talk about. 

00:24:31.810 --> 00:24:34.730
 A lot of talk about Android security 

00:24:34.730 --> 00:24:36.520
 They gave me the whole slide 

00:24:36.520 --> 00:24:38.260
 I said why do you not give a speech? 

00:24:38.260 --> 00:24:40.300
 In fact, I won’t say this anyway, they also have their own speeches. 

00:24:40.300 --> 00:24:41.370
 Thursday 2:30 pm 

00:24:41.370 --> 00:24:43.390
 You have to go there and find out the new features of Android security. 

00:24:43.390 --> 00:24:44.240
 From beginning to end 

00:24:44.240 --> 00:24:45.350
 Reinforced from Kernel 

00:24:45.350 --> 00:24:49.600
 Go to WebView all content 

00:24:49.600 --> 00:24:51.330
 Language and runtime 

00:24:51.330 --> 00:24:53.410
 I think you already know what I am going to say. 

00:24:53.410 --> 00:24:56.440
 This morning we announced official support for Kotlin. 

00:25:02.460 --> 00:25:05.245
 You saw Steph on the stage and I saw her sitting there. 

00:25:05.245 --> 00:25:05.870
 In the foyer 

00:25:05.870 --> 00:25:08.390
 If you meet her at I/O, say thank you to her. 

00:25:08.390 --> 00:25:10.490
 Steph and the entire team behind her 

00:25:10.490 --> 00:25:13.090
 I have done a lot of wonderful work in the past. 

00:25:13.090 --> 00:25:15.590
 It took a lot of time to bring you this 

00:25:15.590 --> 00:25:16.740
 Say thank you to her. 

00:25:16.740 --> 00:25:18.750
 She will pass your gratitude to the whole team. 

00:25:18.750 --> 00:25:21.380
 Available today for Android 3.0 

00:25:21.380 --> 00:25:23.390
 There are already many online documents 

00:25:23.390 --> 00:25:25.440
 I can spend a few hours talking about Kotlin. 

00:25:25.440 --> 00:25:27.440
 Why is this good for you? Why is this good for us? 

00:25:27.440 --> 00:25:28.920
 In fact, should I hijack this speech? 

00:25:28.920 --> 00:25:29.540
 He can 

00:25:29.540 --> 00:25:30.750
 In fact, he is really great. 

00:25:30.750 --> 00:25:32.575
 In fact, he is very good. 

00:25:32.575 --> 00:25:33.950
 Unfortunately 

00:25:33.950 --> 00:25:35.700
 We don't have that much time in this section. 

00:25:35.700 --> 00:25:39.560
 I have to invite you to Friday morning at 10:30 am 

00:25:39.560 --> 00:25:40.947
 Come here 

00:25:40.947 --> 00:25:44.590
 There is a presentation called Kotlin, hosted by Andrey Breslav 

00:25:44.590 --> 00:25:48.320
 He is the lead language designer from JetBrains. 

00:25:48.320 --> 00:25:52.430
 And Hadi, who is the VP of Developer Advocate at JetBrains 

00:25:52.430 --> 00:25:57.830
 Then in the afternoon in the lecture hall 4 

00:25:57.830 --> 00:26:00.460
 The theme is "Life is good, everything will be OK, Kotlin is here." 

00:26:00.460 --> 00:26:03.170
 By Christina Lee from Pinterest 

00:26:03.170 --> 00:26:05.954
 And Jack Wharton from Square 

00:26:07.910 --> 00:26:09.581
 This is very important to us 

00:26:09.581 --> 00:26:11.650
 Because we brought you Kotlin 

00:26:11.650 --> 00:26:13.930
 That is, your community is using Kotlin. 

00:26:13.930 --> 00:26:17.050
 We heard it, I heard your voice and brought what you want. 

00:26:17.050 --> 00:26:19.510
 So we want to speak from your community to the stage. 

00:26:19.510 --> 00:26:22.180
 And speaking better than us 

00:26:22.180 --> 00:26:24.170
 Also, if you have any questions 

00:26:24.170 --> 00:26:26.650
 Can come to the developer sandbox at the Android Platform booth 

00:26:26.650 --> 00:26:31.060
 Today from 3:00 pm to 4:30 pm Thursday from 2:00 pm to 4:00 pm 

00:26:31.060 --> 00:26:33.310
 Friday from 12:00 noon to 2:00 pm pm 

00:26:33.310 --> 00:26:36.280
 Andrey language designers will also be there 

00:26:36.280 --> 00:26:37.520
 Answer all your questions 

00:26:37.520 --> 00:26:40.000
 If you want to know everything about Kotlin, please go there. 

00:26:40.000 --> 00:26:42.550
 Just go there and ask your questions. 

00:26:42.550 --> 00:26:46.060
 Now, as Steph mentioned, we are also multiplying other languages. 

00:26:46.060 --> 00:26:48.010
 Java programming language 

00:26:48.010 --> 00:26:50.039
 We also have C and C++ 

00:26:50.039 --> 00:26:51.580
 For the Java programming language 

00:26:51.580 --> 00:26:53.380
 We are adding new packages to Android O 

00:26:53.380 --> 00:26:55.790
 We have java.time it finally makes it easier 

00:26:55.790 --> 00:26:58.930
 Manipulating time and date 

00:26:58.930 --> 00:27:00.190
 This makes sense 

00:27:00.190 --> 00:27:02.150
 It makes more sense to compare older APIs 

00:27:02.150 --> 00:27:03.130
 This is a matter of time. 

00:27:03.130 --> 00:27:04.588
 Yes, this is a matter of time. 

00:27:04.588 --> 00:27:08.040
 We also brought java.nio.file 

00:27:08.040 --> 00:27:12.120
 It improves the wonderful old java.io.file API 

00:27:12.120 --> 00:27:14.500
 Allow you to access the properties of the file 

00:27:14.500 --> 00:27:17.060
 Let you easily manipulate the path and read the file 

00:27:17.060 --> 00:27:18.540
 Let's take a look at an example. 

00:27:18.540 --> 00:27:21.640
 The last is java.lang.invoke 

00:27:21.640 --> 00:27:23.840
 Slightly changing version of reflection 

00:27:23.840 --> 00:27:26.320
 This is roughly approximate it is really cool 

00:27:26.320 --> 00:27:32.017
 It lets you handle the conversion and packaging methods in your application. 

00:27:32.020 --> 00:27:33.930
 This is an example of a new archive API 

00:27:33.930 --> 00:27:37.660
 You can use the path category to get the path 

00:27:37.660 --> 00:27:39.887
 Then just call files.lines 

00:27:39.887 --> 00:27:41.720
 It will read the contents of the entire file 

00:27:41.720 --> 00:27:43.570
 You will also get a stream 

00:27:43.570 --> 00:27:47.680
 In this example, I use lambdas and the stream API 

00:27:47.680 --> 00:27:49.810
 To delete all empty rows and columns and all rows and columns 

00:27:49.810 --> 00:27:51.740
 Both started with the pound sign and then I put everything 

00:27:51.740 --> 00:27:54.520
 Collecting the last single stream 

00:27:54.520 --> 00:27:57.982
 This is much easier than before. 

00:27:57.982 --> 00:27:59.940
 Ok, this is some changes at runtime. 

00:27:59.940 --> 00:28:01.690
 We have heard of some content this morning. 

00:28:01.690 --> 00:28:03.250
 There are more this week 

00:28:03.250 --> 00:28:04.690
 Concurrent now - copy collector 

00:28:04.690 --> 00:28:06.710
 Basically make everything faster and better 

00:28:06.710 --> 00:28:08.530
 Concurrency - replication means no pause time 

00:28:08.530 --> 00:28:10.024
 Unless there is a complete GC 

00:28:10.024 --> 00:28:11.040
 It can do it all 

00:28:11.040 --> 00:28:14.832
 Things that need to be done in the background while you are still doing other things 

00:28:14.832 --> 00:28:17.290
 Especially the best of them is 

00:28:17.290 --> 00:28:20.510
 It can actually press the front desk 

00:28:20.510 --> 00:28:23.489
 Previously, I believe in previous versions 

00:28:23.489 --> 00:28:26.030
 It’s really good at pressing the front desk. 

00:28:26.030 --> 00:28:28.150
 Can be defragmented to make those heaps smaller 

00:28:28.150 --> 00:28:30.250
 Can make distribution and collection faster 

00:28:30.250 --> 00:28:33.320
 It can do this when the activity is in the background 

00:28:33.320 --> 00:28:34.569
 It will go idle 

00:28:34.569 --> 00:28:36.820
 Then when you are idle, do it 

00:28:36.820 --> 00:28:38.291
 When it is in the foreground 

00:28:38.291 --> 00:28:40.540
 It is impossible to extend those heaps 

00:28:40.540 --> 00:28:41.830
 And defragmentation 

00:28:41.830 --> 00:28:43.510
 Now it can be collected in the foreground 

00:28:43.510 --> 00:28:46.390
 Defragmentation at the front desk is getting faster 

00:28:46.390 --> 00:28:50.170
 There is also a new and faster mechanism for configuration 

00:28:50.170 --> 00:28:52.030
 We only need to do pointer collision allocation 

00:28:52.030 --> 00:28:53.440
 This is much faster 

00:28:53.440 --> 00:28:54.850
 Collect faster 

00:28:54.850 --> 00:28:57.880
 And all this basically leads to less delay 

00:28:57.880 --> 00:29:00.700
 Collect everything faster and collect everything faster. 

00:29:00.700 --> 00:29:06.590
 It means that you only need to deal with garbage and generally use ART memory in the O version much faster. 

00:29:06.600 --> 00:29:09.790
 Many different optimization loops are unfolded, inline 

00:29:09.790 --> 00:29:11.640
 One of the things worth noting 

00:29:11.640 --> 00:29:18.100
 When Dalvik was created, its memory type was limited, right? 

00:29:18.100 --> 00:29:19.662
 It's all about saving memory with Dalvik 

00:29:19.662 --> 00:29:21.370
 This also means that it can only 

00:29:21.370 --> 00:29:22.757
 Do so many optimizations 

00:29:22.757 --> 00:29:24.340
 It's a bit like reaching the end of life 

00:29:24.340 --> 00:29:26.470
 Do things as optimized as possible 

00:29:26.470 --> 00:29:29.230
 When the ART goes online, basically they are placed on the platform. 

00:29:29.230 --> 00:29:31.807
 We are able to create future optimizations 

00:29:31.807 --> 00:29:33.640
 Now we are starting to pick those benefits 

00:29:33.640 --> 00:29:35.650
 Including each version 

00:29:35.650 --> 00:29:37.510
 Including O and future versions 

00:29:37.510 --> 00:29:38.830
 We are going to be able to do more and more 

00:29:38.830 --> 00:29:40.670
 They still have a bunch in this version 

00:29:40.670 --> 00:29:43.562
 You should know about the speech later this week. 

00:29:43.562 --> 00:29:44.770
 More information on this 

00:29:44.770 --> 00:29:46.470
 And the DEX area 

00:29:46.470 --> 00:29:49.810
 This particularly improves the start-up time of the event. 

00:29:49.810 --> 00:29:53.330
 Because we collect all the memory in the same space 

00:29:53.330 --> 00:29:56.890
 It's easier and faster to access when the app is starting up 

00:29:56.900 --> 00:29:59.840
 There is a speech on Friday morning. 

00:29:59.840 --> 00:30:01.080
 Topics for performance, memory and improvement 

00:30:01.080 --> 00:30:03.970
 Go there to see more details 

00:30:03.970 --> 00:30:06.070
 In addition to the platform we also have a support library 

00:30:06.070 --> 00:30:09.100
 We have other mechanisms for transferring things 

00:30:09.100 --> 00:30:10.331
 This is not only available in the O version 

00:30:10.331 --> 00:30:11.830
 We would like to mention some of these examples. 

00:30:11.830 --> 00:30:13.590
 Have a v26 test version 

00:30:13.590 --> 00:30:16.390
 Published with Developer Preview 2 

00:30:16.390 --> 00:30:19.270
 This is what we have already said about text, fonts and XML 

00:30:19.270 --> 00:30:22.002
 Downloadable fonts, and things that automatically adjust the TextView 

00:30:22.002 --> 00:30:22.960
 All there 

00:30:22.960 --> 00:30:24.160
 You can check it out. 

00:30:24.160 --> 00:30:26.890
 There are also some things we call EmojiCompat. 

00:30:26.890 --> 00:30:29.620
 The biggest emojis problem is 

00:30:29.620 --> 00:30:31.810
 If your friends send you some emojis 

00:30:31.810 --> 00:30:35.204
 And these emojis come from future standards 

00:30:35.204 --> 00:30:37.120
 Instead of a running version 

00:30:37.120 --> 00:30:39.400
 Then you can't see those emojis 

00:30:39.400 --> 00:30:41.440
 Will only see some squares 

00:30:41.440 --> 00:30:48.130
 Although I have seen some more attractive emojis, it doesn't make much sense. 

00:30:48.130 --> 00:30:50.620
 If you guys can put the updated emojis 

00:30:50.620 --> 00:30:52.310
 Is it not good to put it on the device? 

00:30:52.310 --> 00:30:54.160
 Now we have two mechanisms 

00:30:54.160 --> 00:30:56.110
 The application can be used to update emojis 

00:30:56.110 --> 00:30:59.470
 One is that the application is actually bundled with the updated emojis 

00:30:59.470 --> 00:31:01.990
 They can go to the Play Store to update the app. 

00:31:01.990 --> 00:31:04.120
 Then their users update 

00:31:04.120 --> 00:31:07.600
 Users can get more timely emojis 

00:31:07.600 --> 00:31:10.780
 Another possibility is a better long-term solution 

00:31:10.780 --> 00:31:12.970
 Actually using a service 

00:31:12.970 --> 00:31:14.770
 We can provide downloadable fonts 

00:31:14.770 --> 00:31:17.680
 Before we mentioned that they can pass the downloadable font 

00:31:17.680 --> 00:31:21.040
 Automatically get updated, right? 

00:31:21.040 --> 00:31:23.710
 An application can be built as 

00:31:23.710 --> 00:31:26.770
 Features with downloadable fonts 

00:31:26.770 --> 00:31:31.510
 To use the updated emojis as long as we provide the service 

00:31:31.510 --> 00:31:34.270
 Say again, tomorrow morning 

00:31:34.270 --> 00:31:36.850
 A presentation to the new features of the support library for more information 

00:31:36.850 --> 00:31:39.820
 We also have more things about animation. 

00:31:39.820 --> 00:31:41.530
 In addition to the AnimatorSet 

00:31:41.530 --> 00:31:42.850
 The little things I mentioned just now 

00:31:42.850 --> 00:31:46.520
 Now we have physics based animation materials 

00:31:46.520 --> 00:31:49.030
 If we want to watch an animation form 

00:31:49.030 --> 00:31:51.280
 Ability to have basic animation 

00:31:51.280 --> 00:31:52.540
 This is a speed driven animation 

00:31:52.540 --> 00:31:55.530
 The performance of all animations on our platform so far 

00:31:55.570 --> 00:31:57.850
 Driven by the concept of this duration 

00:31:57.850 --> 00:32:00.640
 By you telling it how long it will take to run 

00:32:00.640 --> 00:32:02.140
 But there are a lot of animations 

00:32:02.140 --> 00:32:03.370
 You really want to drive at speed 

00:32:03.370 --> 00:32:04.220
 especially 

00:32:04.220 --> 00:32:07.000
 Animation driven by user interaction 

00:32:07.000 --> 00:32:09.310
 You drag something on the screen 

00:32:09.310 --> 00:32:12.100
 If it starts off from your finger 

00:32:12.100 --> 00:32:16.070
 Is it not good to drag at the same speed as when you let go? 

00:32:16.070 --> 00:32:18.700
 Hey, scroll, all things 

00:32:18.700 --> 00:32:22.780
 It really needs a speed-based animation system 

00:32:22.780 --> 00:32:24.340
 You can do this with animators 

00:32:24.340 --> 00:32:25.690
 It's really boring 

00:32:25.690 --> 00:32:26.830
 It needs mathematics 

00:32:26.830 --> 00:32:28.030
 Math is difficult 

00:32:28.030 --> 00:32:30.700
 We put that performance hot 

00:32:30.700 --> 00:32:33.400
 To this new physical animation system 

00:32:33.400 --> 00:32:34.490
 This system is more natural 

00:32:34.490 --> 00:32:35.930
 More interaction, more disruptive 

00:32:35.930 --> 00:32:41.250
 Because it really intends to use that user interaction model 

00:32:41.250 --> 00:32:42.520
 Here is a small demo 

00:32:42.520 --> 00:32:44.950
 When we drag the circle at the top 

00:32:44.950 --> 00:32:47.650
 The other two circles are basically 

00:32:47.650 --> 00:32:50.920
 Link to the top with your defined spring 

00:32:50.920 --> 00:32:52.660
 So they follow in space 

00:32:52.660 --> 00:32:54.550
 Not using locksteps 

00:32:54.550 --> 00:32:57.160
 Basically on the connected spring 

00:32:57.160 --> 00:33:00.010
 They immediately benefit from interaction 

00:33:00.010 --> 00:33:02.560
 And the physical concepts of these springs 

00:33:02.560 --> 00:33:06.190
 There is a speech on Friday afternoon about this. 

00:33:06.190 --> 00:33:08.024
 All about new physics-based animation materials 

00:33:08.024 --> 00:33:10.356
 If you want to know more information, please go there. 

00:33:10.356 --> 00:33:11.540
 Architecture component 

00:33:11.540 --> 00:33:13.390
 This has been mentioned in the keynote speech 

00:33:13.390 --> 00:33:16.510
 We think sometimes Android development 

00:33:16.510 --> 00:33:19.090
 A little harder than needed 

00:33:19.090 --> 00:33:21.745
 We take a step back and say, OK 

00:33:21.745 --> 00:33:23.620
 What are the main problems that we should do? 

00:33:23.620 --> 00:33:27.080
 For application developers to try to simplify? 

00:33:27.080 --> 00:33:29.440
 There are still a few now we have specifically run 

00:33:29.440 --> 00:33:32.260
 Or around the life cycle 

00:33:32.260 --> 00:33:34.540
 Obviously it is so difficult to deal with 

00:33:34.540 --> 00:33:36.490
 The fact that your activities may die at any time 

00:33:36.490 --> 00:33:38.950
 When you rotate the screen or it goes to the background 

00:33:38.950 --> 00:33:39.700
 Or any other thing 

00:33:39.700 --> 00:33:42.160
 See exactly where you are 

00:33:42.160 --> 00:33:43.150
 This may be a bit boring 

00:33:43.150 --> 00:33:45.280
 And this is an ongoing problem for all application developers 

00:33:45.280 --> 00:33:46.370
 Need to deal with 

00:33:46.370 --> 00:33:47.720
 We took another route 

00:33:47.720 --> 00:33:49.630
 Make this easier 

00:33:49.630 --> 00:33:50.834
 And we 

00:33:50.834 --> 00:33:52.540
 Also looked at persistence 

00:33:52.540 --> 00:33:55.280
 Now you can issue the original SQL 

00:33:55.280 --> 00:33:57.710
 This is all the things on your system. 

00:33:57.710 --> 00:34:00.730
 We have a brand new approach which builds on this performance 

00:34:00.730 --> 00:34:02.709
 Make it easier to use and more powerful 

00:34:02.709 --> 00:34:04.750
 We have to talk about this week. 

00:34:04.750 --> 00:34:06.874
 We want to have an introduction to the architecture components 

00:34:06.874 --> 00:34:10.310
 I will advise you to go there this afternoon. 

00:34:10.310 --> 00:34:12.370
 In fact, after this speech 

00:34:12.370 --> 00:34:14.409
 Then tomorrow morning 

00:34:14.409 --> 00:34:16.480
 We will mention life cycle issues 

00:34:16.480 --> 00:34:17.719
 And how we solve the problem 

00:34:17.719 --> 00:34:20.221
 A method for persistence and offline 

00:34:20.221 --> 00:34:22.179
 These are some bit by bit, but in fact you can 

00:34:22.179 --> 00:34:25.048
 Try on a table in an earlier version 

00:34:25.048 --> 00:34:26.230
 So check it out 

00:34:26.230 --> 00:34:28.563
 Hope this will make your developers a little easier 

00:34:28.563 --> 00:34:30.290
 There are also some behavior changes 

00:34:30.290 --> 00:34:32.570
 You will be more concerned about some of the changes compared to others. 

00:34:32.570 --> 00:34:35.970
 There are also some changes to the background app behavior. 

00:34:35.970 --> 00:34:37.510
 Especially location 

00:34:37.510 --> 00:34:40.239
 If you run as a background app 

00:34:40.239 --> 00:34:43.900
 Just get rough location information 

00:34:43.900 --> 00:34:47.170
 Doing these things in order to make it harder 

00:34:47.170 --> 00:34:49.120
 And make the device better, right? 

00:34:49.120 --> 00:34:52.330
 If all applications have these features at any time 

00:34:52.330 --> 00:34:55.252
 Or at any time they can do anything to do 

00:34:55.252 --> 00:34:57.460
 Then basically this will run out of power 

00:34:57.460 --> 00:35:00.010
 Everyone is doing too much work. 

00:35:00.010 --> 00:35:01.520
 We try to be right 

00:35:01.520 --> 00:35:05.290
 Which applications actually need service at which time? 

00:35:05.290 --> 00:35:06.950
 Enable us to serve users 

00:35:06.950 --> 00:35:08.230
 Bring a better experience 

00:35:08.230 --> 00:35:10.700
 Your users also have a better experience. 

00:35:10.700 --> 00:35:11.980
 One of them is the location 

00:35:11.980 --> 00:35:14.660
 These inaccurate information when you are in the background 

00:35:14.660 --> 00:35:16.030
 The other is the wake lock 

00:35:16.030 --> 00:35:18.520
 We noticed that this is very common 

00:35:18.520 --> 00:35:21.151
 First the application will enter the background state and then enter the cache state. 

00:35:21.151 --> 00:35:22.900
 There will be a wake lock at the time 

00:35:22.900 --> 00:35:24.790
 Just save that wake lock 

00:35:24.790 --> 00:35:26.600
 It will save for a long time 

00:35:26.600 --> 00:35:28.300
 This will really drain the battery 

00:35:28.300 --> 00:35:31.060
 Now enter the cache state for a while 

00:35:31.060 --> 00:35:33.270
 Wakeup lock will automatically release 

00:35:33.270 --> 00:35:34.960
 Make the device not 

00:35:34.960 --> 00:35:38.330
 Enter the untimely state 

00:35:38.330 --> 00:35:41.237
 Will also limit the program 

00:35:41.237 --> 00:35:42.820
 When executed in the background 

00:35:42.820 --> 00:35:45.010
 Warning dialog also has some changes 

00:35:45.010 --> 00:35:46.510
 Especially, this new type of window 

00:35:46.510 --> 00:35:49.090
 Type Application Overlay 

00:35:49.090 --> 00:35:51.340
 If you are targeting the O SDK 

00:35:51.340 --> 00:35:56.670
 You must use this type of window if you want to warn the dialog function. 

00:35:56.680 --> 00:35:59.252
 If you use the earlier version, obviously this window does not exist. 

00:35:59.252 --> 00:36:00.460
 You will not use this window. 

00:36:00.460 --> 00:36:02.980
 No matter which window type you are using 

00:36:02.980 --> 00:36:05.590
 They are layered under this type of application overlay window 

00:36:05.590 --> 00:36:09.430
 Because now we have a clearer definition 

00:36:09.430 --> 00:36:12.190
 Stratification policy 

00:36:12.190 --> 00:36:14.710
 We have more information at 5:00 this afternoon. 

00:36:14.710 --> 00:36:17.881
 Background checks and other insights 

00:36:17.881 --> 00:36:21.660
 If you want to know more details, we will see you later. 

00:36:21.680 --> 00:36:24.264
 Finally, we promised to come back here, right? 

00:36:24.264 --> 00:36:25.096
 correct 

00:36:25.096 --> 00:36:26.440
 there's one more thing? 

00:36:26.440 --> 00:36:27.356
 Ok 

00:36:27.356 --> 00:36:30.340
 Let’s talk about this again. 

00:36:30.340 --> 00:36:32.980
 I mean, we are playing drums, aren't we? 

00:36:32.980 --> 00:36:34.780
 How about a chicken leg roll? 

00:36:34.780 --> 00:36:36.384
 Can we eat a chicken leg roll? 

00:36:37.180 --> 00:36:37.480
 Ok 

00:36:37.480 --> 00:36:38.800
 It sounds pretty good 

00:36:38.800 --> 00:36:41.680
 Unfortunately, I looked at the timer on the stage. 

00:36:41.680 --> 00:36:43.420
 I want to say, O stands for 

00:36:43.485 --> 00:36:46.080
 Oh 

00:36:46.080 --> 00:36:46.996
 Oh, don't be like this. 

00:36:46.996 --> 00:36:47.980
 We have no time 

00:36:47.980 --> 00:36:49.320
 thank you all 

