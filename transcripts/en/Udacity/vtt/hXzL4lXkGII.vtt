WEBVTT
Kind: captions
Language: en

00:00:01.270 --> 00:00:07.220
For this project,
the more simple you can do this project,

00:00:07.220 --> 00:00:08.720
the better off it is.

00:00:08.720 --> 00:00:11.492
I suggest just inlining
the whole CSS file.

00:00:11.492 --> 00:00:16.024
Honestly, like, if you're having trouble
trying to figure out which CSS is

00:00:16.024 --> 00:00:20.693
critical, which CSS is not critical,
that's, it's, the idea is like, for

00:00:20.693 --> 00:00:25.085
us to know what Google's actually
looking for, you either need to use some

00:00:25.085 --> 00:00:28.499
sort of package, like a Grunt package or
a Bower package,

00:00:28.499 --> 00:00:33.381
that people have programmed, and they've
done the research already to figure out

00:00:33.381 --> 00:00:38.450
which elements of this HTML are critical
for rendering above-the-fold content.

00:00:38.450 --> 00:00:42.414
Instead of you just having
to actually just guess and

00:00:42.414 --> 00:00:46.790
pick what type of elements and
calls are critical.

00:00:46.790 --> 00:00:52.543
So I really just recommend,
inline your entire CSS, minify it,

00:00:52.543 --> 00:00:58.840
and you should be fine, to help you
deal with render blocking content.

00:00:58.840 --> 00:01:01.957
And, again,
using JavaScript to load CSS,

00:01:01.957 --> 00:01:06.350
make sure that you're following
the right instructions.

00:01:06.350 --> 00:01:11.328
There are, if you have more questions
about how to implement the JavaScript

00:01:11.328 --> 00:01:13.221
to load the CSS, post that.

00:01:13.221 --> 00:01:16.820
Post your code on Piazza so all of
us can actually look at the code and

00:01:16.820 --> 00:01:19.640
see how you're doing
that inject JavaScript.

00:01:19.640 --> 00:01:23.731
There could be a some sort of
implementation issue that you may be

00:01:23.731 --> 00:01:28.054
having that prevents you from
successfully loading the JavaScript

00:01:28.054 --> 00:01:30.348
after everything's been loaded.

00:01:30.348 --> 00:01:34.338
Again, another tip is
to actually put the CSS

00:01:34.338 --> 00:01:38.538
at the bottom of the page
rather than at the top,

00:01:38.538 --> 00:01:43.368
because then that will actually
help you go ahead and,

00:01:43.368 --> 00:01:47.790
that will get rid of
the render blocking content.

00:01:47.790 --> 00:01:55.208
because, remember, in your class,
the browser downloads the HTML code.

00:01:55.208 --> 00:02:00.117
It then goes and gets,
it does a get request to actually

00:02:00.117 --> 00:02:05.100
get the CSS and
the JavaScript file in your header tag.

00:02:05.100 --> 00:02:06.580
So, and

00:02:06.580 --> 00:02:11.550
then it waits for all the CSS and the
JavaScript to load and do their magic.

00:02:11.550 --> 00:02:15.136
Why don't you just put everything
at the bottom of the HTML page?

00:02:15.136 --> 00:02:18.280
That actually will help with
the render blocking as well.

00:02:20.390 --> 00:02:24.611
Inlining is basically, you're actually,
now we're in the mindset of,

00:02:24.611 --> 00:02:26.963
okay, how can I create production code.

00:02:26.963 --> 00:02:31.365
We're not in development code anymore,
like in project one and project two.

00:02:31.365 --> 00:02:34.660
because where we force you to
follow a very strict style.

00:02:34.660 --> 00:02:37.399
Make sure the code is very neat,
nice, and organized.

00:02:37.399 --> 00:02:40.138
But this time, often in the real world,

00:02:40.138 --> 00:02:43.926
developers will have development
code which is nice and

00:02:43.926 --> 00:02:48.133
pretty, and then production
code which is very, very ugly.

00:02:48.133 --> 00:02:54.685
[LAUGH] So, basically, inlining
gets rid of all the extra spaces,

00:02:54.685 --> 00:02:58.810
blank spaces, new line characters.

00:02:58.810 --> 00:03:03.960
Anything that doesn't pertain
to the actual code itself.

00:03:03.960 --> 00:03:08.732
So basically, I have this whole
page of code, I inline it, and

00:03:08.732 --> 00:03:13.326
I actually minify it,
I actually get rid of all the spaces and

00:03:13.326 --> 00:03:16.768
extra characters into
one single long line.

00:03:16.768 --> 00:03:19.230
And you cannot read it.

00:03:19.230 --> 00:03:23.160
And then you're inlining it, you're
actually putting the CSS in that code

00:03:23.160 --> 00:03:30.910
inside the site, because, again,
our goal is create production code.

00:03:30.910 --> 00:03:36.330
So mobile devices,
devices that doesn't have that

00:03:36.330 --> 00:03:41.240
high Internet speed could
effectively download your

00:03:41.240 --> 00:03:44.920
site as fast as possible and then they
could use your site as fast as possible.

00:03:44.920 --> 00:03:48.390
We're going for one second loading time,
that's the ideal.

00:03:48.390 --> 00:03:51.340
Or else, if it takes two
to three seconds to load,

00:03:51.340 --> 00:03:53.390
you start getting impatient.

00:03:53.390 --> 00:03:53.930
&gt;&gt; Yep.

00:03:53.930 --> 00:03:56.440
&gt;&gt; And you would not want to do that for
our users.

00:03:56.440 --> 00:03:59.786
&gt;&gt; Absolutely.
And essentially, by removing those extra

00:03:59.786 --> 00:04:04.970
spaces and new line characters,
we are reducing the size of the file.

00:04:04.970 --> 00:04:05.620
&gt;&gt; Yeah.

00:04:05.620 --> 00:04:07.848
So you're reducing the critical
sizes of your file as well.

00:04:07.848 --> 00:04:10.070
That's actually critical as well.

00:04:10.070 --> 00:04:13.830
&gt;&gt; So we don't want
anything that's not useful.

00:04:13.830 --> 00:04:16.970
We don't want browser to download
anything that's not useful.

00:04:16.970 --> 00:04:17.680
&gt;&gt; Exactly.

00:04:17.680 --> 00:04:18.820
&gt;&gt; Or that's not relevant.

00:04:18.820 --> 00:04:21.490
&gt;&gt; Yeah.
&gt;&gt; And just whatever we need,

00:04:21.490 --> 00:04:23.874
minimum amount of downloading.

00:04:23.874 --> 00:04:25.670
&gt;&gt; Yeah.
&gt;&gt; That improves the speed a lot.

00:04:25.670 --> 00:04:28.059
&gt;&gt; Yeah, that improves the speed
of your websites a lot.

