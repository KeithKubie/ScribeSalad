WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Okay, so time for a demo.

00:00:02.000 --> 00:00:05.000
I am currently logged into my development machine for Hipmunk.

00:00:05.000 --> 00:00:08.000
We use Postgres as our database,

00:00:08.000 --> 00:00:11.000
and I'm going to log into that database right now.

00:00:11.000 --> 00:00:14.000
Psql is the Postgres command.

00:00:14.000 --> 00:00:19.000
And we have a table for our hotels--for our hotel search product.

00:00:19.000 --> 00:00:22.000
So we can say select count *--

00:00:22.000 --> 00:00:26.000
count is a SQL command for counting the rows in a table--

00:00:26.000 --> 00:00:28.000
from hotels.

00:00:28.000 --> 00:00:32.000
So you can see we have 302,000 rows in this table.

00:00:32.000 --> 00:00:36.000
Okay, so let's run a quick SQL statement against this thing.

00:00:36.000 --> 00:00:39.000
We're going to say select name from hotels

00:00:39.000 --> 00:00:43.000
where id=51492.

00:00:43.000 --> 00:00:46.000
This is a hotel id that I happen to know exists.

00:00:46.000 --> 00:00:50.000
Okay, it's called the Hotel Karlsteiner Stuben.

00:00:50.000 --> 00:00:53.000
So one of the things we can do in Postgres

00:00:53.000 --> 00:00:56.000
is I'm going to run the same command again--the same SQL statement again--

00:00:56.000 --> 00:00:58.000
with explain analyze.

00:00:58.000 --> 00:01:00.000
What this is going to do is this is going to run the query

00:01:00.000 --> 00:01:03.000
and then explain to me what it did.

00:01:03.000 --> 00:01:06.000
What this says is that it did

00:01:06.000 --> 00:01:10.000
a sequential scan on hotels--that's our table name, hotels--

00:01:10.000 --> 00:01:13.000
sequential scan on hotels,

00:01:13.000 --> 00:01:16.000
filtering for id 51492,

00:01:16.000 --> 00:01:19.000
and it took 142 milliseconds

00:01:19.000 --> 00:01:22.000
to scan that table of 300,000 hotels

00:01:22.000 --> 00:01:25.000
and find the one with the correct id.

00:01:25.000 --> 00:01:29.000
Now, if I were to create an index on that field--on the id field--

00:01:29.000 --> 00:01:31.000
things should get faster.

00:01:31.000 --> 00:01:33.000
So let's go ahead and create the index--

00:01:33.000 --> 00:01:38.000
create index hotel id on hotels id.

00:01:38.000 --> 00:01:41.000
This is the SQL command for creating an index.

00:01:41.000 --> 00:01:44.000
I'm not going to quiz you on this, but this is what it looks like.

00:01:44.000 --> 00:01:49.000
Create index--this is the name of our index, hotel id on which table.

00:01:49.000 --> 00:01:52.000
So in this case, it's the hotels table.

00:01:52.000 --> 00:01:54.000
That's the table we're using.

00:01:54.000 --> 00:01:57.000
And then it takes in parentheses which field we're going to use.

00:01:57.000 --> 00:01:59.000
And in this case, we're going to give it the id.

00:01:59.000 --> 00:02:01.000
I submit that.

00:02:01.000 --> 00:02:03.000
Postgres creates our index.

00:02:03.000 --> 00:02:06.000
And now let's run this explain analyze command again.

00:02:06.000 --> 00:02:09.000
So now instead of doing a sequential scan,

00:02:09.000 --> 00:02:12.000
we did an index scan,

00:02:12.000 --> 00:02:15.000
using hotel id--that was the name of our index here--

00:02:15.000 --> 00:02:17.000
on the table.

00:02:17.000 --> 00:02:20.000
And in this case, we can see the total run time

00:02:20.000 --> 00:02:22.000
went from 142 milliseconds

00:02:22.000 --> 00:02:25.000
to 0.163 milliseconds.

00:02:25.000 --> 00:02:28.000
That is a substantial improvement.

00:02:28.000 --> 00:02:31.000
And let's go ahead and drop that index--

00:02:31.000 --> 00:02:33.000
drop index hotel--

00:02:33.000 --> 00:02:37.000
and we'll rerun this command one more time to see it slow again.

00:02:37.000 --> 00:02:42.000
Ta-da! We went from 0.163 milliseconds

00:02:42.000 --> 00:02:46.000
to 141 milliseconds.

00:02:46.000 --> 00:02:51.000
So that's just a quick real-world demo of what an index can do.

00:02:51.000 --> 00:02:54.000
And it's pretty handy that the Postgres database

00:02:54.000 --> 00:02:57.000
will explain to us what exactly is going on.

00:02:57.000 --> 00:03:01.000
All right, let's move on.

