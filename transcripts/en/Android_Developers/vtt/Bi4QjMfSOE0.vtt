WEBVTT
Kind: captions
Language: en

00:00:00.680 --> 00:00:01.850
Cats.

00:00:01.850 --> 00:00:03.410
Pancakes.

00:00:03.410 --> 00:00:06.110
Cats eating pancakes.

00:00:06.110 --> 00:00:09.050
How are we actually supposed to
capture all this great content

00:00:09.050 --> 00:00:11.620
without amazing camera
support in your apps?

00:00:11.620 --> 00:00:13.400
I'm David East,
and Camera2 API is

00:00:13.400 --> 00:00:16.391
for building the best in
the business camera apps.

00:00:16.391 --> 00:00:18.890
Let's take a step back and look
at the history of the Camera

00:00:18.890 --> 00:00:20.580
API options on Android.

00:00:20.580 --> 00:00:22.740
The simplest option for
taking photos or video

00:00:22.740 --> 00:00:24.820
has always been
the camera intent.

00:00:24.820 --> 00:00:26.330
Basically, you kick
off this intent,

00:00:26.330 --> 00:00:28.370
and the user gets to use
their preferred camera

00:00:28.370 --> 00:00:29.510
app to take a picture.

00:00:29.510 --> 00:00:31.540
While it's easy to
use, it's not really

00:00:31.540 --> 00:00:33.450
for a heavyweight camera apps.

00:00:33.450 --> 00:00:35.220
The camera intent
is for apps where

00:00:35.220 --> 00:00:36.940
the camera is more
of an accessory

00:00:36.940 --> 00:00:39.040
rather than the main
feature, and that

00:00:39.040 --> 00:00:41.220
doesn't help us show
Fluffy eating flapjacks,

00:00:41.220 --> 00:00:43.620
so we need a better API.

00:00:43.620 --> 00:00:45.670
The Camera API provided
a lot more control

00:00:45.670 --> 00:00:46.907
than the camera intent.

00:00:46.907 --> 00:00:48.990
With the Camera API, you
could build a camera view

00:00:48.990 --> 00:00:52.582
however you wanted, and
the Camera API was great.

00:00:52.582 --> 00:00:54.690
But as photos progressed,
there were definitely

00:00:54.690 --> 00:00:57.210
some things that it was
missing, like no support

00:00:57.210 --> 00:00:59.660
for capturing uncompressed
images and performance

00:00:59.660 --> 00:01:01.400
on newer hardware,
where the preview

00:01:01.400 --> 00:01:04.370
rate was capped at, like, one
to three frames per second.

00:01:04.370 --> 00:01:07.510
Clearly, our cats
deserve a better API.

00:01:07.510 --> 00:01:09.770
And that API is Camera2.

00:01:09.770 --> 00:01:13.870
The Camera2 API is the newest,
biggest, and baddest Camera API

00:01:13.870 --> 00:01:14.820
on the block.

00:01:14.820 --> 00:01:16.820
It provides you with an
awesome full [INAUDIBLE]

00:01:16.820 --> 00:01:18.870
of control over your
device's cameras.

00:01:18.870 --> 00:01:21.810
And it fixes all the problems
we had with our old API.

00:01:21.810 --> 00:01:24.460
You can take images at faster
intervals, show previews

00:01:24.460 --> 00:01:27.680
from multiple cameras, and even
apply effects and filters to it

00:01:27.680 --> 00:01:28.860
directly.

00:01:28.860 --> 00:01:31.590
However, before you get
hacking on your new camera app,

00:01:31.590 --> 00:01:34.010
there are a few things
that you should know.

00:01:34.010 --> 00:01:36.020
Just because the Camera2
API is overflowing

00:01:36.020 --> 00:01:37.550
with awesome
features, it doesn't

00:01:37.550 --> 00:01:40.820
mean that all of your users'
devices will support them.

00:01:40.820 --> 00:01:43.010
As such, you need to
know what each device is

00:01:43.010 --> 00:01:44.790
capable of doing,
and you can do that

00:01:44.790 --> 00:01:47.680
by getting a list of the
camera characteristics specific

00:01:47.680 --> 00:01:49.110
to that device.

00:01:49.110 --> 00:01:51.080
These characteristics
can be simple things,

00:01:51.080 --> 00:01:52.610
like which way the
lens is facing,

00:01:52.610 --> 00:01:55.000
or something even more complex,
like the available face

00:01:55.000 --> 00:01:56.410
detection modes.

00:01:56.410 --> 00:01:58.940
And if your app can't function
without those features,

00:01:58.940 --> 00:02:00.860
you can require that
the user must have it

00:02:00.860 --> 00:02:02.670
in order to download your app.

00:02:02.670 --> 00:02:05.920
Just set the user's feature
in your manifest file.

00:02:05.920 --> 00:02:08.720
It's also important to know that
the Camera2 API was introduced

00:02:08.720 --> 00:02:11.400
in Android L. In order to
support all their apps,

00:02:11.400 --> 00:02:14.640
you're going to have to
fall back to the Camera API.

00:02:14.640 --> 00:02:17.610
And there's no support for
the Camera2 API in the Android

00:02:17.610 --> 00:02:22.350
Support Library just yet, but
if you bug this guy enough,

00:02:22.350 --> 00:02:25.170
it might make it there
just a bit faster.

00:02:25.170 --> 00:02:28.010
The Camera2 API give you
a lot of responsibility

00:02:28.010 --> 00:02:29.770
over your device's cameras.

00:02:29.770 --> 00:02:33.790
But with great responsibility
comes great power.

00:02:33.790 --> 00:02:35.700
I think that's how it goes.

00:02:35.700 --> 00:02:38.785
To learn about the Camera2 API,
check out the API reference.

00:02:38.785 --> 00:02:40.285
And if you want to
see it in action,

00:02:40.285 --> 00:02:43.720
there's a sample app on GitHub
that captures raw images.

00:02:43.720 --> 00:02:46.820
If your app uses the camera,
get the best camera experience

00:02:46.820 --> 00:02:50.510
using Camera2, and just
keep building better apps.

00:02:50.510 --> 00:02:55.960
[MUSIC PLAYING]

