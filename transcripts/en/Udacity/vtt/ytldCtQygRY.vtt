WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.000
So here's what I did.

00:00:01.000 --> 00:00:03.000
I wrote this little function to tell a story.

00:00:03.000 --> 00:00:08.000
The story I want to tell is, over all the states, let's group the states in terms of

00:00:08.000 --> 00:00:11.000
the number of pending points in that state,

00:00:11.000 --> 00:00:16.000
and then for each of those number of pending points, say all the states for which

00:00:16.000 --> 00:00:17.000
there are 10 points pending,

00:00:17.000 --> 00:00:22.000
how many times did max_wins decide to roll versus how many times did

00:00:22.000 --> 00:00:24.000
max_diffs decide to roll?

00:00:24.000 --> 00:00:27.000
And just to consider the ones in which the 2 differ.

00:00:27.000 --> 00:00:30.000
So throw away all of the states in which they take the same action.

00:00:30.000 --> 00:00:31.000
Let's see what that looks like.

00:00:31.000 --> 00:00:33.000
Let me just describe briefly what I do.

00:00:33.000 --> 00:00:38.000
So I start off--I have a default dictionary and the default is that I have 2 values--

00:00:38.000 --> 00:00:43.000
0 for max_wins and 0 for max_diffs.

00:00:43.000 --> 00:00:48.000
Then I go through--get the 2 strategy functions to apply to the state.

00:00:48.000 --> 00:00:53.000
If they're different, figure out what pending is and increment the pending count

00:00:53.000 --> 00:00:56.000
for the person who decided to roll, and then I just go and print them out.

00:00:56.000 --> 00:00:58.000
Here's the result.

00:00:58.000 --> 00:01:00.000
It does tell a story. Look what's happening.

00:01:00.000 --> 00:01:03.000
When I have a small number of points pending,

00:01:03.000 --> 00:01:05.000
most of the time, the 2 strategies agree,

00:01:05.000 --> 00:01:09.000
but when they differ, it's the max_diff strategy that's deciding to roll.

00:01:09.000 --> 00:01:14.000
But as the number of points increase--the number of pending points increase,

00:01:14.000 --> 00:01:17.000
we see it's max_wins who's willing to roll,

00:01:17.000 --> 00:01:20.000
and max_diff not at all, so that's a perfect segregation between the 2

00:01:20.000 --> 00:01:25.000
in this crossover point between 13 and 16.

00:01:25.000 --> 00:01:31.000
We're here. Max_wins is rolling all the time with very high pending amounts.

00:01:31.000 --> 00:01:33.000
But max_diff is never willing to do that.

00:01:33.000 --> 00:01:41.000
So what must be happening here is 300 times max_wins has 24 pending points,

00:01:41.000 --> 00:01:42.000
and he's willing to roll.

00:01:42.000 --> 00:01:46.000
It must be because the opponent is just about to win and he says,

00:01:46.000 --> 00:01:50.000
"Even though I'm risking 24, I still want to win the game, so I've got to roll."

00:01:50.000 --> 00:01:52.000
Max_diff says, "Are you crazy?

00:01:52.000 --> 00:01:55.000
I got 24 points on the board. I'm going to reap them right now.

00:01:55.000 --> 00:01:58.000
And yes, I may lose, but I'm really going to cut down that differential."

00:01:58.000 --> 00:02:00.000
So look what the story told us.

00:02:00.000 --> 00:02:04.000
I thought that this man in the arena who was playing the max_diff strategy

00:02:04.000 --> 00:02:08.000
was going to impress the NPA scouts by playing aggressively,

00:02:08.000 --> 00:02:11.000
and it turned out that the story was completely different.

00:02:11.000 --> 00:02:12.000
So what does that tell us.

00:02:12.000 --> 00:02:17.000
Well, first it tells us that there is an interesting distinction about how we wrote our function

00:02:17.000 --> 00:02:19.000
to maximize differential.

00:02:19.000 --> 00:02:23.000
Note that the way we wrote it is we completely separated the what,

00:02:23.000 --> 00:02:27.000
which is the rules of the game for how pig is played,

00:02:27.000 --> 00:02:31.000
from the how of how does it make decisions,

00:02:31.000 --> 00:02:33.000
and that was the perfectly general best actions.

00:02:33.000 --> 00:02:38.000
So we didn't go in and say, we're going to write specific rules for pig to say,

00:02:38.000 --> 00:02:42.000
if you're in such and such a position, do such and such.

00:02:42.000 --> 00:02:46.000
Rather we just said, here's how pig works. Here's what I'm trying to do.

00:02:46.000 --> 00:02:49.000
Maximize differential. You do the rest.

00:02:49.000 --> 00:02:54.000
So the results that came back were surprising to me because I didn't really understand

00:02:54.000 --> 00:02:56.000
how the what and the how interacted,

00:02:56.000 --> 00:02:59.000
but I was still able to write a program that maximized the differential,

00:02:59.000 --> 00:03:02.000
even though I didn't understand what that program is actually doing,

00:03:02.000 --> 00:03:08.000
and that's the power of breaking up these aspects into what's happening

00:03:08.000 --> 00:03:10.000
versus maximizing.

00:03:10.000 --> 00:03:14.000
The second part that's interesting here is that I was able to do exploration.

00:03:14.000 --> 00:03:18.000
So it wasn't just that I built a monolithic program that could do 1 thing.

00:03:18.000 --> 00:03:21.000
It's that I build a set of tools that could explore the area.

00:03:21.000 --> 00:03:24.000
When I wanted to understand something that was different from what I originally did,

00:03:24.000 --> 09:59:59.000
I was able to do that because I had the tools around.

