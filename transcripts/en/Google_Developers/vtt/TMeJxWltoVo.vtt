WEBVTT
Kind: captions
Language: en

00:00:01.968 --> 00:00:04.990
DAVID MORGAN: So first off, I'd
like to thank the previous two

00:00:04.990 --> 00:00:05.990
talks for running early.

00:00:05.990 --> 00:00:08.620
That means all of my weeks
spent practicing this talk

00:00:08.620 --> 00:00:11.735
to get it at exactly 25
minutes are now wasted.

00:00:11.735 --> 00:00:13.230
But hey.

00:00:13.230 --> 00:00:14.280
So I'm David Morgan.

00:00:14.280 --> 00:00:16.980
I work in Zurich as
a software engineer.

00:00:16.980 --> 00:00:20.340
But actually not
on the Dart team.

00:00:20.340 --> 00:00:23.440
I'll talk a bit more
about that later.

00:00:23.440 --> 00:00:26.510
And first off, a
bit of background.

00:00:26.510 --> 00:00:29.190
Actually a white
background for you all.

00:00:29.190 --> 00:00:32.796
So I've been writing
software for 11 years.

00:00:32.796 --> 00:00:34.170
And throughout
that time, there's

00:00:34.170 --> 00:00:39.270
been one main motivating force
for my work, the one thing

00:00:39.270 --> 00:00:41.440
that I care about most.

00:00:41.440 --> 00:00:43.440
And that's been
happy developers.

00:00:43.440 --> 00:00:45.695
This is a picture of
a happy developer.

00:00:49.380 --> 00:00:52.287
And actually, this seems to have
worked reasonably well for me.

00:00:52.287 --> 00:00:54.120
And I think the reason
this has worked well,

00:00:54.120 --> 00:00:55.440
and actually you've
heard the same message

00:00:55.440 --> 00:00:56.814
in different forms
a lot of times

00:00:56.814 --> 00:00:59.070
today, is that
happiness is strongly

00:00:59.070 --> 00:01:01.005
linked to productivity.

00:01:01.005 --> 00:01:02.880
And actually, I found
a good way to put this.

00:01:02.880 --> 00:01:05.050
We like building software.

00:01:05.050 --> 00:01:09.010
We really, really love
building good software quickly.

00:01:13.850 --> 00:01:16.260
So what does this have
to do with object models?

00:01:16.260 --> 00:01:18.260
First off, by object
models, what I mean

00:01:18.260 --> 00:01:21.320
is the classes that
you design, that you

00:01:21.320 --> 00:01:23.930
write when you are doing
object-oriented programming.

00:01:23.930 --> 00:01:26.430
They don't have to be
terribly complicated.

00:01:26.430 --> 00:01:29.880
In fact, simple object
models are often best.

00:01:29.880 --> 00:01:33.800
And what I'll be looking
at is a simple object model

00:01:33.800 --> 00:01:37.310
and how happy I feel
when I'm implementing it.

00:01:37.310 --> 00:01:40.265
And for an example, I've
chosen a chat application.

00:01:40.265 --> 00:01:42.640
It seems to be popular to
write these at Google recently.

00:01:45.530 --> 00:01:47.540
But mine is not trying
to compete with those.

00:01:47.540 --> 00:01:49.520
It's very, very simple.

00:01:49.520 --> 00:01:53.420
Users are sitting
behind a browser.

00:01:53.420 --> 00:01:55.430
They have code
compiled with Dart2JS.

00:01:55.430 --> 00:01:58.574
And they're connecting
to a single Dart VM.

00:01:58.574 --> 00:01:59.740
So really a toy application.

00:02:03.270 --> 00:02:05.580
Now, let's design an
object model for this.

00:02:05.580 --> 00:02:08.639
And particularly, I'm
going to talk about classes

00:02:08.639 --> 00:02:13.111
that I want to send between
the server and the client.

00:02:13.111 --> 00:02:14.610
So first off and
most obviously, I'm

00:02:14.610 --> 00:02:16.290
going to have a
class called Chat.

00:02:16.290 --> 00:02:19.430
This is what the client sends
in order to say something.

00:02:19.430 --> 00:02:22.740
There will be a string
field, which is the text,

00:02:22.740 --> 00:02:25.680
and a set, which is the
targets the chat is going to.

00:02:28.650 --> 00:02:31.830
The server will handle this by
sending a ShowChat to everyone

00:02:31.830 --> 00:02:34.140
who needs to get the chat.

00:02:34.140 --> 00:02:37.400
And this will contain the user
name that the chat came from,

00:02:37.400 --> 00:02:42.110
a Boolean as to whether it
was private, and the text.

00:02:42.110 --> 00:02:42.944
Let's add a feature.

00:02:42.944 --> 00:02:44.901
Well, we're going to want
to be able to log in.

00:02:44.901 --> 00:02:47.130
So we'll have a class called
Login with a user name

00:02:47.130 --> 00:02:48.270
and password.

00:02:48.270 --> 00:02:51.510
And the server will
respond with LoginResponse,

00:02:51.510 --> 00:02:55.580
which is an enum saying
whether or not it succeeded.

00:02:55.580 --> 00:02:58.170
One more feature just
to round out the model.

00:02:58.170 --> 00:02:59.910
Users will have status.

00:02:59.910 --> 00:03:02.910
They'll be online,
offline, or away.

00:03:02.910 --> 00:03:05.412
And they'll have a status
message they can set.

00:03:05.412 --> 00:03:06.870
And in order for
this to be useful,

00:03:06.870 --> 00:03:09.610
we have to be able to query
this data from the server.

00:03:09.610 --> 00:03:11.610
So we'll have a class
called ListUsers,

00:03:11.610 --> 00:03:13.980
and another, ListUsersResponse.

00:03:13.980 --> 00:03:15.970
The details are not
especially important.

00:03:15.970 --> 00:03:17.736
This is just an
example object model

00:03:17.736 --> 00:03:19.860
that you could go away and
actually write code for.

00:03:19.860 --> 00:03:22.193
And it would actually do
something approximately useful.

00:03:25.240 --> 00:03:27.990
So let's code this thing.

00:03:27.990 --> 00:03:31.622
And we'll start with object
models as I defined it.

00:03:31.622 --> 00:03:32.580
And here it is in Dart.

00:03:35.280 --> 00:03:37.590
Right?

00:03:37.590 --> 00:03:40.180
Of course not.

00:03:40.180 --> 00:03:42.060
But why not?

00:03:42.060 --> 00:03:44.640
The reason why not is that raw
Dart classes and enums are not

00:03:44.640 --> 00:03:45.810
especially useful.

00:03:45.810 --> 00:03:47.640
They actually
don't do very much.

00:03:47.640 --> 00:03:50.010
And there is a
whole pile of things

00:03:50.010 --> 00:03:52.320
that I want my object
model to provide

00:03:52.320 --> 00:03:53.910
that you don't get for free.

00:03:53.910 --> 00:03:55.890
Let me just quickly
go through them.

00:03:55.890 --> 00:03:59.010
So first and most obviously, I
want them to be serializable.

00:03:59.010 --> 00:04:00.990
It's going to be kind
of hard to write a chat

00:04:00.990 --> 00:04:04.260
application otherwise.

00:04:04.260 --> 00:04:05.574
I want them to be classes.

00:04:05.574 --> 00:04:06.990
I started by saying
that I'm doing

00:04:06.990 --> 00:04:08.430
object-oriented programming.

00:04:08.430 --> 00:04:09.199
I meant it.

00:04:09.199 --> 00:04:10.740
I want all these
things to be classes

00:04:10.740 --> 00:04:13.740
that I can have and
implement interfaces.

00:04:13.740 --> 00:04:15.065
I can write code.

00:04:15.065 --> 00:04:17.190
And in Dart, that actually
means I can't use enums.

00:04:17.190 --> 00:04:19.920
It means I have to
use classes instead.

00:04:19.920 --> 00:04:22.460
It also means that I
don't want to just write

00:04:22.460 --> 00:04:25.950
a data specification and have
my code generated for me.

00:04:25.950 --> 00:04:28.020
Because then, again,
I'm actually not doing

00:04:28.020 --> 00:04:31.800
object-oriented programming.

00:04:31.800 --> 00:04:33.840
I want them to be immutable.

00:04:33.840 --> 00:04:35.430
You've heard from
the Angular team

00:04:35.430 --> 00:04:39.780
about how push updates are
better than change detection.

00:04:39.780 --> 00:04:42.190
Immutability actually works
really well with that.

00:04:42.190 --> 00:04:44.370
There are lots of really
good arguments for it.

00:04:44.370 --> 00:04:47.820
And for me the way
to do immutability

00:04:47.820 --> 00:04:50.260
in an object oriented language
is the builder pattern.

00:04:50.260 --> 00:04:51.900
So that's what I want.

00:04:51.900 --> 00:04:56.310
It also means I'll need
immutable collections.

00:04:56.310 --> 00:04:59.430
I want my object model
to have preconditions.

00:04:59.430 --> 00:05:01.380
Even in this really
simple example,

00:05:01.380 --> 00:05:03.920
it's obvious that I want
null checks on my fields.

00:05:03.920 --> 00:05:08.160
There's no meaning for my chat
instances to have a null text.

00:05:11.460 --> 00:05:15.380
Finally, I want my object model
to be composed of four objects.

00:05:15.380 --> 00:05:17.090
And by that, I mean
that they implement

00:05:17.090 --> 00:05:19.280
all of the optional
parts of object.

00:05:19.280 --> 00:05:20.780
They are all hashable.

00:05:20.780 --> 00:05:22.280
They are all comparable.

00:05:22.280 --> 00:05:24.830
They all have to-string
so that if I happen

00:05:24.830 --> 00:05:28.100
to want to compare them or
do any of those other things,

00:05:28.100 --> 00:05:28.922
it just works.

00:05:31.880 --> 00:05:33.560
So that was my
personal laundry list

00:05:33.560 --> 00:05:35.567
of what I want my
object model to do.

00:05:35.567 --> 00:05:36.900
I'm sure you have your own list.

00:05:36.900 --> 00:05:38.210
It may be slightly different.

00:05:38.210 --> 00:05:39.410
But what you have
in common with me

00:05:39.410 --> 00:05:40.909
is that you don't
get them for free.

00:05:44.640 --> 00:05:45.720
So here's my slide.

00:05:45.720 --> 00:05:47.220
I think some people
actually laughed

00:05:47.220 --> 00:05:52.010
when I showed this because it
doesn't do anything useful.

00:05:52.010 --> 00:05:54.860
And what happens if I
actually implement those

00:05:54.860 --> 00:05:56.220
features that I just described?

00:05:56.220 --> 00:05:58.460
And I'll do that just
for the Login class.

00:05:58.460 --> 00:05:59.187
Watch closely.

00:06:02.790 --> 00:06:03.290
Ah.

00:06:03.290 --> 00:06:04.331
Let me zoom that for you.

00:06:04.331 --> 00:06:06.170
So this is actually
the minimum code

00:06:06.170 --> 00:06:10.520
needed to do all of those
things that I described.

00:06:10.520 --> 00:06:12.410
And this is a horrible,
horrible violation

00:06:12.410 --> 00:06:15.740
of the do not repeat
yourself principle.

00:06:15.740 --> 00:06:18.239
There is no way that your
code could be maintainable.

00:06:18.239 --> 00:06:20.030
There's no way your
developers can be happy

00:06:20.030 --> 00:06:21.560
if you write like this.

00:06:21.560 --> 00:06:23.690
And someone already
used a slide like this.

00:06:23.690 --> 00:06:25.570
But this is a different snail.

00:06:25.570 --> 00:06:29.499
And this is how your developers
and-- apparently Google Image

00:06:29.499 --> 00:06:31.040
Search turned up a
different one when

00:06:31.040 --> 00:06:33.560
I search for it-- this is
how your developers are

00:06:33.560 --> 00:06:35.587
going to feel if you
make them work like this.

00:06:38.450 --> 00:06:39.500
So there is an answer.

00:06:39.500 --> 00:06:42.320
And I appear to have given it
away in the title of the talk.

00:06:42.320 --> 00:06:44.930
So source_gen for Dart
is a really good answer.

00:06:44.930 --> 00:06:46.949
You may have
detected from the way

00:06:46.949 --> 00:06:48.740
Kevin was talking about
it that he actually

00:06:48.740 --> 00:06:50.030
created this package.

00:06:50.030 --> 00:06:51.880
So thanks to him.

00:06:51.880 --> 00:06:54.221
I'm just a user.

00:06:54.221 --> 00:06:56.720
OK, so now we're going to go
into dangerous territory, which

00:06:56.720 --> 00:06:58.945
is that I'm actually
going to demo this.

00:06:58.945 --> 00:07:01.028
So what does it look like
if I'm using source_gen?

00:07:10.280 --> 00:07:13.760
So here I am in my Dart code.

00:07:13.760 --> 00:07:17.450
I've put all of these
classes in data_modal.dart.

00:07:17.450 --> 00:07:20.730
And the whole thing, the whole
data model that I described,

00:07:20.730 --> 00:07:22.560
including comments,
including code,

00:07:22.560 --> 00:07:24.680
actually came to
about 150 lines.

00:07:24.680 --> 00:07:26.540
So my toy example
actually turned out

00:07:26.540 --> 00:07:28.380
to be a toy example
in the code, as well,

00:07:28.380 --> 00:07:31.310
which is kind of what
I was hoping for.

00:07:31.310 --> 00:07:34.430
Let's have a look at that Login
class that looks so terrible.

00:07:34.430 --> 00:07:35.510
Here it is.

00:07:35.510 --> 00:07:37.550
It's not a whole slide.

00:07:37.550 --> 00:07:39.310
And the crucial
thing here, there's

00:07:39.310 --> 00:07:40.750
a little bit of
weird boilerplate

00:07:40.750 --> 00:07:42.560
that I'll explain a bit later.

00:07:42.560 --> 00:07:44.900
The crucial thing is
that the user name

00:07:44.900 --> 00:07:47.690
field and the password field
are mentioned just once each.

00:07:47.690 --> 00:07:50.510
There's no repetition.

00:07:50.510 --> 00:07:54.140
A couple of general things to
note about this object model,

00:07:54.140 --> 00:07:56.490
I said I wanted
immutable collections.

00:07:56.490 --> 00:08:00.840
I'm using the-- let me find
one-- the build collections,

00:08:00.840 --> 00:08:03.520
which are very much modeled
on the SDK collections,

00:08:03.520 --> 00:08:06.650
but provide immutability
and builders.

00:08:06.650 --> 00:08:10.790
And I said I wanted to be doing
object-oriented programming.

00:08:10.790 --> 00:08:12.020
Indeed, I have.

00:08:12.020 --> 00:08:14.360
So there's this
interface, Response,

00:08:14.360 --> 00:08:16.100
which is for everything
that comes back

00:08:16.100 --> 00:08:17.786
from the server to the client.

00:08:17.786 --> 00:08:19.160
And I've decided
that what I want

00:08:19.160 --> 00:08:20.930
to be in common of
all those things

00:08:20.930 --> 00:08:23.060
is that they're all renderable.

00:08:23.060 --> 00:08:25.730
Which means, for example,
that this LoginResponse

00:08:25.730 --> 00:08:30.240
knows how to display
itself on the client.

00:08:30.240 --> 00:08:32.581
So that's what the code
has ended up looking like.

00:08:32.581 --> 00:08:34.039
Let me just quickly
show this thing

00:08:34.039 --> 00:08:35.960
working to prove
that indeed this

00:08:35.960 --> 00:08:38.929
is a working chat application.

00:08:38.929 --> 00:08:40.534
So let me connect
to it a few times.

00:08:43.789 --> 00:08:44.700
I'm going to log in.

00:08:49.950 --> 00:08:51.411
And I'll set a status message.

00:08:54.930 --> 00:08:57.510
Contact.

00:08:57.510 --> 00:08:58.950
Logging in over here, too.

00:09:03.300 --> 00:09:05.010
And I said you could list users.

00:09:05.010 --> 00:09:06.440
We can list users and get them.

00:09:06.440 --> 00:09:08.050
I'm awary, apparently.

00:09:08.050 --> 00:09:10.380
So this works.

00:09:10.380 --> 00:09:13.740
And with that, that
toy model turned

00:09:13.740 --> 00:09:16.080
into really a small
amount of code.

00:09:16.080 --> 00:09:20.310
So let's switch back
quickly to the slides.

00:09:20.310 --> 00:09:21.510
How is this working?

00:09:21.510 --> 00:09:24.180
So I have my data_model.dart.

00:09:24.180 --> 00:09:27.600
The key thing in source_gen is
something called generators.

00:09:27.600 --> 00:09:31.260
A generator is something that
takes source code as input

00:09:31.260 --> 00:09:34.420
and produces helper
source code as output.

00:09:34.420 --> 00:09:36.840
And in this example,
I have three of them.

00:09:36.840 --> 00:09:39.420
I have enum_class,
which helps you write

00:09:39.420 --> 00:09:41.580
classes that act like enums.

00:09:41.580 --> 00:09:43.620
I have built_value,
which provides

00:09:43.620 --> 00:09:46.620
most of the object model
properties that I asked for.

00:09:46.620 --> 00:09:49.770
And I have built_json, which
provides the serialization.

00:09:49.770 --> 00:09:53.430
And these three generators
are working together to take

00:09:53.430 --> 00:09:57.560
data_model.dart as input
and provide the helper code,

00:09:57.560 --> 00:10:00.847
the boilerplate code,
as data_model.g.dart.

00:10:00.847 --> 00:10:02.430
Now, there's one
thing really critical

00:10:02.430 --> 00:10:04.710
to know about how this
works in practice, which

00:10:04.710 --> 00:10:07.050
is that this process,
this source_gen process,

00:10:07.050 --> 00:10:08.460
is running continuously.

00:10:08.460 --> 00:10:11.200
Which means that as I
update the input source,

00:10:11.200 --> 00:10:14.020
the helper source is
immediately updated, too.

00:10:14.020 --> 00:10:17.301
And not just that,
it's updated quickly.

00:10:17.301 --> 00:10:19.300
Absolutely crucial for
the developer experience,

00:10:19.300 --> 00:10:21.000
which I'll demo in a second.

00:10:21.000 --> 00:10:24.060
Now, there's another thing
almost completely unrelated

00:10:24.060 --> 00:10:28.550
where source_gen is also fast,
and this is in the runtime.

00:10:28.550 --> 00:10:32.374
The code that you generate with
source_gen is arbitrary code.

00:10:32.374 --> 00:10:34.290
There's no framework
that goes with source_gen

00:10:34.290 --> 00:10:36.130
that you're using at runtime.

00:10:36.130 --> 00:10:38.400
So the code that is
generated with source_gen

00:10:38.400 --> 00:10:41.010
can be as fast as the code
that you had written by hand.

00:10:41.010 --> 00:10:43.470
So this really is generating
production quality code--

00:10:43.470 --> 00:10:45.240
assuming you wrote
production-quality generators,

00:10:45.240 --> 00:10:46.614
which I like to
think that I did.

00:10:49.810 --> 00:10:51.490
So let me dive
back into the demo.

00:10:57.310 --> 00:10:59.060
And I want to look at
the most interesting

00:10:59.060 --> 00:11:02.750
of the three generators,
which is built_value.

00:11:02.750 --> 00:11:06.030
So first, I mentioned
that .g.dart file.

00:11:06.030 --> 00:11:07.850
You can see it's
being used here.

00:11:07.850 --> 00:11:10.460
This is how the generated code
is interacting with the code

00:11:10.460 --> 00:11:11.870
that I write.

00:11:11.870 --> 00:11:14.600
And the other thing to notice
is this weird underscore dollar

00:11:14.600 --> 00:11:16.430
thing which you see
all over the place.

00:11:16.430 --> 00:11:18.190
This is just a convention.

00:11:18.190 --> 00:11:20.420
This underscore dollar,
whenever you see it,

00:11:20.420 --> 00:11:23.150
that means that this
is implemented over

00:11:23.150 --> 00:11:24.560
in the generated code.

00:11:24.560 --> 00:11:27.900
It's a hook into generated code.

00:11:27.900 --> 00:11:30.850
So let's go back to
this Login class.

00:11:30.850 --> 00:11:35.280
And let's look a little closer
about what's going on here.

00:11:35.280 --> 00:11:39.230
So first off, this class
is written as abstract.

00:11:39.230 --> 00:11:44.570
And the fields that you want
are declared as getters.

00:11:44.570 --> 00:11:47.090
And then, the magic
is that we have

00:11:47.090 --> 00:11:51.080
a factory that delegates
to an actual implementation

00:11:51.080 --> 00:11:52.603
provided by the generated code.

00:11:56.370 --> 00:11:56.870
Here it is.

00:11:56.870 --> 00:11:58.369
Here's the boilerplate
that I didn't

00:11:58.369 --> 00:12:00.020
want to write that's
generated for me.

00:12:00.020 --> 00:12:01.990
You can see we're
doing the null checks.

00:12:01.990 --> 00:12:03.130
We have a builder.

00:12:03.130 --> 00:12:05.220
We have a quality hash
going to a string.

00:12:05.220 --> 00:12:07.750
There's the builder class.

00:12:07.750 --> 00:12:12.490
So I claim that this is
fast to use as a developer.

00:12:12.490 --> 00:12:13.070
How fast?

00:12:13.070 --> 00:12:13.740
Let's see.

00:12:19.590 --> 00:12:21.390
Pretty fast.

00:12:21.390 --> 00:12:24.364
So let's just do that a
little bit more for effect.

00:12:29.070 --> 00:12:29.957
Add a list, too.

00:12:34.140 --> 00:12:36.040
And what do we see?

00:12:36.040 --> 00:12:39.619
We see all of the
boilerplate is there.

00:12:39.619 --> 00:12:42.034
[APPLAUSE]

00:12:46.282 --> 00:12:48.490
DAVID MORGAN: That was almost
completely not my work,

00:12:48.490 --> 00:12:50.410
I should say, having
not written source_gen.

00:12:50.410 --> 00:12:52.857
But thanks for the applause.

00:12:55.900 --> 00:12:57.524
So let me reset
that to where I was.

00:13:00.762 --> 00:13:02.720
OK, so what did I have
to do to make this work?

00:13:02.720 --> 00:13:05.080
What is the source_gen
generator behind this?

00:13:05.080 --> 00:13:08.630
Let's go to
built_value generator.

00:13:08.630 --> 00:13:11.260
So source_gen provides
this interface generator,

00:13:11.260 --> 00:13:13.550
which is really as
simple as it could have.

00:13:13.550 --> 00:13:15.820
You have a generate method.

00:13:15.820 --> 00:13:18.550
What you get passed as input is
an element from the analyzer.

00:13:18.550 --> 00:13:20.380
That's your source.

00:13:20.380 --> 00:13:22.480
You also have build_step,
which is extra metadata

00:13:22.480 --> 00:13:23.104
if you need it.

00:13:23.104 --> 00:13:25.420
I actually don't for
any of my generators.

00:13:25.420 --> 00:13:28.411
And what you return is a
string, some source code.

00:13:28.411 --> 00:13:30.160
The first thing your
generator needs to do

00:13:30.160 --> 00:13:32.830
is determine whether it
actually has anything to do.

00:13:32.830 --> 00:13:34.390
So built_value
doesn't do anything

00:13:34.390 --> 00:13:36.760
for libraries or for other
top level statements.

00:13:36.760 --> 00:13:38.300
It only works on classes.

00:13:38.300 --> 00:13:41.110
So my first check is this
element, class element.

00:13:41.110 --> 00:13:42.304
If not, I return null.

00:13:42.304 --> 00:13:43.720
And that's how you
tell source_gen

00:13:43.720 --> 00:13:45.270
you have nothing to do.

00:13:45.270 --> 00:13:47.737
If it is a class, we
go into a custom check.

00:13:47.737 --> 00:13:50.320
This needs built_value check to
see if it's something that I'm

00:13:50.320 --> 00:13:51.700
supposed to generate code for.

00:13:51.700 --> 00:13:53.417
If not, return null.

00:13:53.417 --> 00:13:55.000
Once you've determined
that you should

00:13:55.000 --> 00:13:57.310
be doing code
generation, your job

00:13:57.310 --> 00:14:00.280
is to extract the information
from that element.

00:14:00.280 --> 00:14:02.974
And here, you have the
whole Analyzer API.

00:14:02.974 --> 00:14:04.390
So we're doing
things like getting

00:14:04.390 --> 00:14:06.730
the display name of the class.

00:14:06.730 --> 00:14:08.639
We're checking if
it's abstract or not.

00:14:08.639 --> 00:14:10.180
We're going through
the constructors.

00:14:10.180 --> 00:14:11.440
We're pulling out the fields.

00:14:11.440 --> 00:14:12.800
This is all a very nice API.

00:14:12.800 --> 00:14:14.990
It's core Dart SDK stuff.

00:14:18.460 --> 00:14:20.440
And once you've extracted
the information,

00:14:20.440 --> 00:14:22.690
you just have to
generate the code.

00:14:22.690 --> 00:14:25.010
So the built_value code is
actually not very complex.

00:14:25.010 --> 00:14:26.890
You saw some of the
generated code already.

00:14:26.890 --> 00:14:30.460
So in fact, I just concatenated
a bunch of strings.

00:14:30.460 --> 00:14:32.320
There's really
nothing hard here.

00:14:32.320 --> 00:14:34.210
If you were doing a
lot of code generation,

00:14:34.210 --> 00:14:37.852
you might want to use some
sort of template system.

00:14:37.852 --> 00:14:39.310
Now, the neat thing
that source_gen

00:14:39.310 --> 00:14:41.170
is when you return
this source code,

00:14:41.170 --> 00:14:43.280
it passes it
through Dart format,

00:14:43.280 --> 00:14:46.060
which means that the
generated code that you see

00:14:46.060 --> 00:14:48.184
is laid out as you expect.

00:14:48.184 --> 00:14:49.600
The other thing
source_gen does is

00:14:49.600 --> 00:14:52.270
it pulls together the output
from the different generators

00:14:52.270 --> 00:14:55.180
that are running and gives them
little headers, like this one.

00:14:58.777 --> 00:14:59.860
So that was the generator.

00:14:59.860 --> 00:15:01.660
That was it working
on built_value.

00:15:01.660 --> 00:15:04.790
Let me now do a
more exciting demo.

00:15:04.790 --> 00:15:06.850
So what I want to do is
to actually add a feature

00:15:06.850 --> 00:15:07.900
to this chat application.

00:15:07.900 --> 00:15:09.790
I'm going to do
it live on stage.

00:15:09.790 --> 00:15:11.369
Please bear with me.

00:15:11.369 --> 00:15:12.910
And the feature that
I'm going to add

00:15:12.910 --> 00:15:16.690
is that when you log
in to the server,

00:15:16.690 --> 00:15:20.440
you can see chats that
happened before you connected.

00:15:20.440 --> 00:15:23.447
And I'm pretty sure the only
way to get this correct on stage

00:15:23.447 --> 00:15:25.480
is with test-driven development.

00:15:25.480 --> 00:15:26.980
If you like test-driven
development,

00:15:26.980 --> 00:15:28.390
you'll know what I mean.

00:15:28.390 --> 00:15:30.594
So very first,
I'm going to check

00:15:30.594 --> 00:15:31.677
that my tests are passing.

00:15:35.321 --> 00:15:35.820
OK.

00:15:39.700 --> 00:15:43.050
Now, a little aside,
a really nice thing

00:15:43.050 --> 00:15:45.750
if you're running code
both Dart on the server

00:15:45.750 --> 00:15:48.660
and Dart on the client,
is for this kind of test,

00:15:48.660 --> 00:15:51.690
you can fake out any sort
of browser-specific stuff.

00:15:51.690 --> 00:15:54.540
You can plug the server
and client code together,

00:15:54.540 --> 00:15:57.570
and you can run very small,
fast tests that actually are

00:15:57.570 --> 00:15:59.460
behaving like end-to-end tests.

00:15:59.460 --> 00:16:01.470
And that's exactly
what I've done here.

00:16:01.470 --> 00:16:04.620
So I already have a
test that Alice and Bob

00:16:04.620 --> 00:16:07.800
can talk to each other.

00:16:07.800 --> 00:16:10.270
What I'll do is I'll take that.

00:16:10.270 --> 00:16:14.220
I'll make it into a test
that they can see the log.

00:16:14.220 --> 00:16:18.300
And what will happen is instead
of connecting at the start,

00:16:18.300 --> 00:16:22.230
Bob will connect after
Alice has spoken.

00:16:22.230 --> 00:16:25.170
And then, he'll only be able to
see that if the log was there.

00:16:25.170 --> 00:16:27.600
And this should now fail.

00:16:27.600 --> 00:16:30.970
OK, so how am I going
to implement this?

00:16:30.970 --> 00:16:33.690
Well, I'm going use a new class.

00:16:33.690 --> 00:16:35.190
And to save a little
bit of typing,

00:16:35.190 --> 00:16:36.981
I'm going to base it
on the ShowChat class.

00:16:50.810 --> 00:16:54.290
This would be a good
time for it not to hang.

00:16:54.290 --> 00:16:55.790
OK, so I'm going
to call it Welcome.

00:16:55.790 --> 00:16:59.270
It's going to hold my welcome
message from the server.

00:16:59.270 --> 00:17:01.680
And we're going to
have two fields.

00:17:01.680 --> 00:17:06.680
One is going to be
a list of responses.

00:17:06.680 --> 00:17:08.064
So this is the interface.

00:17:08.064 --> 00:17:09.230
This is not a concrete type.

00:17:09.230 --> 00:17:11.210
This is the list of any
response that the server

00:17:11.210 --> 00:17:12.335
could have sent previously.

00:17:15.020 --> 00:17:17.930
And we are going to
have a welcome message.

00:17:17.930 --> 00:17:19.430
Now, the one bit
of code that I need

00:17:19.430 --> 00:17:22.290
to write is how-- or
rather, one bit of code

00:17:22.290 --> 00:17:24.589
that this class needs is,
how does this thing render?

00:17:24.589 --> 00:17:25.550
Well, this is pretty obvious.

00:17:25.550 --> 00:17:27.020
We're going to
render it by taking

00:17:27.020 --> 00:17:28.310
the-- oops, bit of a mistake.

00:17:28.310 --> 00:17:29.710
That should have been public.

00:17:29.710 --> 00:17:33.050
We're going to render
it by taking the log

00:17:33.050 --> 00:17:36.290
and map it to render
each of the responses.

00:17:39.260 --> 00:17:45.140
We're going to join
with new lines.

00:17:45.140 --> 00:17:48.950
We're going to add a new line.

00:17:48.950 --> 00:17:52.010
And we're going to
add the message.

00:17:52.010 --> 00:17:53.680
OK, so that's my new class.

00:17:53.680 --> 00:17:55.572
And as soon as I saved
it, it's ready to use.

00:17:59.470 --> 00:18:01.190
So let's go to the server.

00:18:01.190 --> 00:18:01.890
Implement there.

00:18:01.890 --> 00:18:03.098
We're going to need this log.

00:18:09.240 --> 00:18:10.471
And we need to fill it.

00:18:15.330 --> 00:18:17.350
So whenever we send a
message to everyone,

00:18:17.350 --> 00:18:20.550
we're also going to
add it to the log.

00:18:20.550 --> 00:18:24.390
Surprisingly hard
to type on stage.

00:18:24.390 --> 00:18:27.534
OK, and finally, whenever
we get a new user,

00:18:27.534 --> 00:18:30.075
we need to send them this log
message, instead of previously,

00:18:30.075 --> 00:18:32.060
where we were actually
sending them a chat,

00:18:32.060 --> 00:18:33.540
which is a bit rubbish.

00:18:33.540 --> 00:18:37.300
So here, we see the
built_value builder pattern.

00:18:37.300 --> 00:18:40.620
And what we notice actually
is that the log field here

00:18:40.620 --> 00:18:42.680
is not just a list.

00:18:42.680 --> 00:18:44.460
What it is is a list builder.

00:18:44.460 --> 00:18:45.930
And so we have
all of the methods

00:18:45.930 --> 00:18:48.170
that we might want to
mutate this list here

00:18:48.170 --> 00:18:50.162
in line in the builder pattern.

00:18:50.162 --> 00:18:51.870
So the obvious thing
that I'm going to do

00:18:51.870 --> 00:18:53.910
is add all of my log to it.

00:18:53.910 --> 00:18:57.300
But if I wanted to, I could
also do funky stuff like sort it

00:18:57.300 --> 00:18:58.890
in line.

00:18:58.890 --> 00:19:01.860
And actually, I should say
that this builder pattern is,

00:19:01.860 --> 00:19:03.660
I think, the nicest
way to instantiate

00:19:03.660 --> 00:19:05.910
stuff in Dart or
actually pretty much

00:19:05.910 --> 00:19:07.410
any object oriented language.

00:19:07.410 --> 00:19:09.150
It can be made
extremely powerful.

00:19:09.150 --> 00:19:13.010
And Dart gets a real boost
from the cascade operator.

00:19:13.010 --> 00:19:16.890
Builder plus cascade operator is
just an incredibly powerful way

00:19:16.890 --> 00:19:23.160
to encode data or initialization
in line into your app.

00:19:23.160 --> 00:19:24.660
So I actually don't
want to sort it.

00:19:27.390 --> 00:19:31.586
This text field is
now called Message.

00:19:31.586 --> 00:19:33.345
AUDIENCE: It's called Welcome.

00:19:33.345 --> 00:19:35.280
DAVID MORGAN: Oh,
sorry, thank you.

00:19:35.280 --> 00:19:36.520
Did I call it Welcome?

00:19:36.520 --> 00:19:37.946
AUDIENCE: Yes.

00:19:37.946 --> 00:19:40.320
DAVID MORGAN: Did I get that
wrong in the previous slide?

00:19:40.320 --> 00:19:40.980
AUDIENCE: Yes.

00:19:40.980 --> 00:19:41.813
DAVID MORGAN: I did.

00:19:41.813 --> 00:19:43.019
Thank you.

00:19:43.019 --> 00:19:44.977
I would have caught that
with a test, you know.

00:19:44.977 --> 00:19:46.072
You don't have to tell me.

00:19:48.810 --> 00:19:54.330
OK, so now with a little bit of
help, let's see if it worked.

00:19:57.000 --> 00:19:57.805
That worked.

00:19:57.805 --> 00:19:59.180
So the feature is
actually there.

00:19:59.180 --> 00:20:00.870
But for those of you
who don't believe

00:20:00.870 --> 00:20:02.790
in test driven
development, we'll

00:20:02.790 --> 00:20:07.420
actually show it in the browser.

00:20:07.420 --> 00:20:08.820
So this time so
I'm not cheating,

00:20:08.820 --> 00:20:11.080
I'm going to close this tab.

00:20:11.080 --> 00:20:12.370
I'm going to say, hi there.

00:20:12.370 --> 00:20:13.376
Let me log in again.

00:20:18.660 --> 00:20:22.954
And now when I connect, we
can see the log has appeared.

00:20:22.954 --> 00:20:24.870
And I think that deserves
a round of applause.

00:20:24.870 --> 00:20:25.688
Thank you.

00:20:25.688 --> 00:20:27.182
[APPLAUSE]

00:20:30.670 --> 00:20:32.300
DAVID MORGAN: So it
might be surprising

00:20:32.300 --> 00:20:34.520
that an end-to-end feature
involving client code,

00:20:34.520 --> 00:20:36.800
involving server code,
involving serialization

00:20:36.800 --> 00:20:39.110
was actually added so
quickly and easily.

00:20:39.110 --> 00:20:41.600
And the reason it's surprising
is because you're not

00:20:41.600 --> 00:20:45.470
used to having all of the
boring boilerplate code just

00:20:45.470 --> 00:20:46.580
appear as you type.

00:20:46.580 --> 00:20:50.450
And that's really what
source_gen is giving me here.

00:20:50.450 --> 00:20:52.984
So back to the slides.

00:20:52.984 --> 00:20:54.650
And just to really
emphasize that point,

00:20:54.650 --> 00:20:58.100
this is what I would
have written by hand.

00:20:58.100 --> 00:21:00.020
And this is what
I ended up with.

00:21:00.020 --> 00:21:04.070
And this is clearly
a pretty big win.

00:21:04.070 --> 00:21:05.463
However, that was a toy example.

00:21:09.117 --> 00:21:11.575
You may be wondering, how does
this work in the real world?

00:21:15.420 --> 00:21:19.186
Well, as it happens, I actually
work in the real world,

00:21:19.186 --> 00:21:20.810
unlike some of my
colleagues at Google.

00:21:24.410 --> 00:21:25.880
And so my team
works on something

00:21:25.880 --> 00:21:31.240
called AdWords for Video, which
is part of adwords.google.com.

00:21:31.240 --> 00:21:34.970
But you almost certainly
know it as this.

00:21:34.970 --> 00:21:38.635
This is the Skip Ad button that
appears on some YouTube ads.

00:21:38.635 --> 00:21:40.010
We actually didn't
do the button.

00:21:40.010 --> 00:21:41.690
Someone else did that.

00:21:41.690 --> 00:21:44.330
But what we do is the
business-facing part

00:21:44.330 --> 00:21:46.700
of this, the advertiser-facing
part, the website where

00:21:46.700 --> 00:21:48.380
people buy these ads.

00:21:48.380 --> 00:21:51.320
So you've heard some numbers
about dollar amounts.

00:21:51.320 --> 00:21:54.470
This is obviously a large,
complex, critical business

00:21:54.470 --> 00:21:55.685
application.

00:21:55.685 --> 00:21:57.310
Just to give a quick
idea of the scale,

00:21:57.310 --> 00:21:58.580
we have dozens of developers.

00:21:58.580 --> 00:22:01.040
They're working on hundreds
of thousands of lines of Dart

00:22:01.040 --> 00:22:02.570
across thousands of classes.

00:22:02.570 --> 00:22:06.080
So certainly a
real world example.

00:22:06.080 --> 00:22:10.040
And the idea that I've
described, generating code

00:22:10.040 --> 00:22:12.042
to support object
models, is something

00:22:12.042 --> 00:22:14.000
that we've actually been
doing for a long time,

00:22:14.000 --> 00:22:16.250
since before we
started using Dart.

00:22:16.250 --> 00:22:19.950
And as with AdSense, we've
come from GWT, the Google Web

00:22:19.950 --> 00:22:22.910
Toolkit, which means
we've come from Java.

00:22:22.910 --> 00:22:26.930
And in the last three
years, we've moved to Dart.

00:22:26.930 --> 00:22:30.080
But what's interesting for
this talk is actually the way

00:22:30.080 --> 00:22:31.760
we moved to Dart.

00:22:31.760 --> 00:22:35.240
What we did was we moved-- we
took our object model with us.

00:22:35.240 --> 00:22:37.910
So we already had this
code generation in Java.

00:22:37.910 --> 00:22:40.430
We wrote equivalent code
generation for Dart.

00:22:40.430 --> 00:22:42.830
And then, we could move
bits of our data model piece

00:22:42.830 --> 00:22:47.960
by piece along with the
UI from Java to Dart.

00:22:47.960 --> 00:22:51.230
And crucially, this meant that
we had our JSON serialization

00:22:51.230 --> 00:22:53.300
for that data model
coming with us, which

00:22:53.300 --> 00:22:56.420
meant that not only could we
do RPCs from the Dart code,

00:22:56.420 --> 00:23:00.620
we could also pass data between
the Java, JavaScript stack

00:23:00.620 --> 00:23:03.500
and the Dart, JavaScript
stack in the browser.

00:23:03.500 --> 00:23:10.400
So these pieces that we were
deploying could work together.

00:23:10.400 --> 00:23:12.500
Today, we have most of
our browser code in Dart,

00:23:12.500 --> 00:23:13.747
as I said.

00:23:13.747 --> 00:23:14.330
And I checked.

00:23:14.330 --> 00:23:21.190
And we are right now saving
108,000 lines of generated Dart

00:23:21.190 --> 00:23:22.980
boilerplate, which
I think you'll

00:23:22.980 --> 00:23:25.880
agree we're extremely happy
that we're not writing these

00:23:25.880 --> 00:23:26.462
by hand.

00:23:32.646 --> 00:23:34.000
So starting to wrap up now.

00:23:34.000 --> 00:23:36.010
I really, really
hope the next time

00:23:36.010 --> 00:23:37.630
you see a skippable
ad on YouTube,

00:23:37.630 --> 00:23:41.740
you straightaway think object
models in Dart with source_gen.

00:23:41.740 --> 00:23:44.712
That would make me really happy.

00:23:44.712 --> 00:23:47.170
But actually, the real message
that I want you to take home

00:23:47.170 --> 00:23:48.320
is three things.

00:23:48.320 --> 00:23:51.010
First off, code generation
for object models

00:23:51.010 --> 00:23:53.830
is a really powerful tool
for developer happiness

00:23:53.830 --> 00:23:55.420
and productivity.

00:23:55.420 --> 00:23:57.400
I've worked on code
bases that don't do this.

00:23:57.400 --> 00:24:00.400
Sadly, it's not actually a
very common thing, I think.

00:24:00.400 --> 00:24:01.990
I've worked on
code bases that do.

00:24:01.990 --> 00:24:03.490
And the difference
is that if you're

00:24:03.490 --> 00:24:05.710
in a code base that is
doing this consistently,

00:24:05.710 --> 00:24:08.440
then all of your object
model is consistent.

00:24:08.440 --> 00:24:10.600
There isn't a case where
someone just adds a class,

00:24:10.600 --> 00:24:12.749
and doesn't bother to
write the equals method.

00:24:12.749 --> 00:24:15.040
Or adds a class, and doesn't
bother to write to-string.

00:24:15.040 --> 00:24:17.669
They all behave in the way
that you want them to behave.

00:24:17.669 --> 00:24:19.210
And if you want to
add a new feature,

00:24:19.210 --> 00:24:21.280
you just add it to
your code generation.

00:24:21.280 --> 00:24:24.670
It's a really nice way to work.

00:24:24.670 --> 00:24:27.580
Secondly, source_gen is a
really nice way to do this.

00:24:27.580 --> 00:24:28.960
It's a nice package.

00:24:28.960 --> 00:24:30.340
It's a nice system.

00:24:30.340 --> 00:24:31.210
We did this in Java.

00:24:31.210 --> 00:24:36.400
And in comparison, it's easier
to write the generators.

00:24:36.400 --> 00:24:38.470
That's because the
analyzer and Dart

00:24:38.470 --> 00:24:42.430
format are doing really most
of the heavy lifting for you.

00:24:42.430 --> 00:24:45.550
And it's nicer to use
as a developer working

00:24:45.550 --> 00:24:49.270
on projects that actually
use code generation.

00:24:49.270 --> 00:24:51.280
Thirdly and finally,
if you don't

00:24:51.280 --> 00:24:53.410
want to write your
own code generation,

00:24:53.410 --> 00:24:56.670
there are these quite
nice ones that I wrote.

00:24:56.670 --> 00:24:59.530
Enum class, built_value,
and built_json,

00:24:59.530 --> 00:25:01.990
you can find them all
via this link on GitHub.

00:25:01.990 --> 00:25:04.540
And you can also find
the chat example.

00:25:04.540 --> 00:25:07.090
You can play with it
yourself and see, in fact,

00:25:07.090 --> 00:25:10.610
how easy it is to add
features to this thing.

00:25:10.610 --> 00:25:11.110
That's it.

00:25:11.110 --> 00:25:13.150
I hope that was
interesting and useful.

00:25:13.150 --> 00:25:13.999
Thank you very much.

00:25:13.999 --> 00:25:15.466
[APPLAUSE]

00:25:18.400 --> 00:25:20.992
SPEAKER: David David,
thank you very much.

00:25:20.992 --> 00:25:21.950
Wait, am I working now?

00:25:21.950 --> 00:25:23.870
What was running
in the background

00:25:23.870 --> 00:25:25.321
that handled the regen?

00:25:25.321 --> 00:25:27.320
DAVID MORGAN: A-ha, I was
supposed to show that.

00:25:27.320 --> 00:25:29.720
It was on my-- so
you didn't see,

00:25:29.720 --> 00:25:32.150
but there was a little
terminal running

00:25:32.150 --> 00:25:35.120
at the bottom which was running
this watcher script, which

00:25:35.120 --> 00:25:38.170
is just continuously watching
and updating the source.

00:25:38.170 --> 00:25:39.180
SPEAKER: Thank you much.

00:25:39.180 --> 00:25:40.180
DAVID MORGAN: Thank you.

00:25:40.180 --> 00:25:41.642
AUDIENCE: So we have-- you've--

00:25:41.642 --> 00:25:43.100
SPEAKER: Actually,
I want to add on

00:25:43.100 --> 00:25:44.391
since we're a little bit early.

00:25:44.391 --> 00:25:46.987
Just so people know, so
one is obviously source_gen

00:25:46.987 --> 00:25:48.320
is actually a tiny little thing.

00:25:48.320 --> 00:25:49.220
And the built_value--

00:25:49.220 --> 00:25:50.886
DAVID MORGAN: You
keep talking about it.

00:25:50.886 --> 00:25:54.342
Ladies and gentlemen, the author
of the source_gen package.

00:25:54.342 --> 00:25:55.610
[APPLAUSE]

00:25:55.610 --> 00:25:56.960
SPEAKER: No!

00:25:56.960 --> 00:25:58.866
It takes a village.

00:25:58.866 --> 00:25:59.990
No, actually, where's Jake?

00:25:59.990 --> 00:26:01.910
Jake's probably watching at
home right now from Seattle.

00:26:01.910 --> 00:26:03.860
He's the hero here because
he's like, what are you doing?

00:26:03.860 --> 00:26:06.080
And Nate, they're like, PM,
why are you writing this code?

00:26:06.080 --> 00:26:07.246
DAVID MORGAN: False modesty.

00:26:07.246 --> 00:26:08.750
SPEAKER: I swear.

00:26:08.750 --> 00:26:09.830
It's huge!

00:26:09.830 --> 00:26:13.220
I'm the most modest
person I know.

00:26:13.220 --> 00:26:15.250
Subtle political joke.

00:26:15.250 --> 00:26:16.980
But so what I want
to mention quickly

00:26:16.980 --> 00:26:18.200
is this is Analyzer based.

00:26:18.200 --> 00:26:20.764
And you noticed we're generally
on disk right next to things.

00:26:20.764 --> 00:26:23.180
And so you would have asked,
why isn't this a transformer,

00:26:23.180 --> 00:26:23.705
right?

00:26:23.705 --> 00:26:25.460
People that have done
transformers before in Dart.

00:26:25.460 --> 00:26:26.767
So just a little sneak preview.

00:26:26.767 --> 00:26:28.850
The nice thing about doing
things on disk this way

00:26:28.850 --> 00:26:30.880
is that you can Control
click and go to it.

00:26:30.880 --> 00:26:33.110
And if the generated
code ends up a bit weird,

00:26:33.110 --> 00:26:34.772
you can debug
through it on disk.

00:26:34.772 --> 00:26:36.980
And so I wanted to kind of
plant that in your head as

00:26:36.980 --> 00:26:39.080
we move into tomorrow
and we talk about Bazel

00:26:39.080 --> 00:26:40.250
and some other things.

00:26:40.250 --> 00:26:41.990
We have a whole
story here around how

00:26:41.990 --> 00:26:44.860
we think about code
transformation, templates,

00:26:44.860 --> 00:26:47.600
code generation, auto code
generation, even how DDC

00:26:47.600 --> 00:26:48.824
is generated.

00:26:48.824 --> 00:26:50.240
We have a model
here around making

00:26:50.240 --> 00:26:52.460
sure it's super fast,
it's incremental,

00:26:52.460 --> 00:26:53.252
it's easy to debug.

00:26:53.252 --> 00:26:55.668
So keep that all in mind as
we kind of step into tomorrow,

00:26:55.668 --> 00:26:57.050
we talk a little
bit about Bazel.

00:26:57.050 --> 00:26:58.850
And hopefully the code
lab from last night

00:26:58.850 --> 00:27:00.790
will make more sense.

