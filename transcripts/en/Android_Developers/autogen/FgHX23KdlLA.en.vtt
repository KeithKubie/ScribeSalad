WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:04.539 align:start position:0%
 
[Music]

00:00:04.539 --> 00:00:04.549 align:start position:0%
 
 

00:00:04.549 --> 00:00:07.249 align:start position:0%
 
in<00:00:05.549><c> the</c><00:00:05.700><c> previous</c><00:00:06.060><c> video</c><00:00:06.299><c> we</c><00:00:06.509><c> saw</c><00:00:06.750><c> just</c><00:00:07.080><c> how</c>

00:00:07.249 --> 00:00:07.259 align:start position:0%
in the previous video we saw just how
 

00:00:07.259 --> 00:00:09.350 align:start position:0%
in the previous video we saw just how
important<00:00:07.740><c> low-latency</c><00:00:08.370><c> is</c><00:00:08.610><c> when</c><00:00:08.820><c> creating</c>

00:00:09.350 --> 00:00:09.360 align:start position:0%
important low-latency is when creating
 

00:00:09.360 --> 00:00:11.720 align:start position:0%
important low-latency is when creating
interactive<00:00:09.719><c> audio</c><00:00:10.320><c> experiences</c><00:00:10.980><c> but</c><00:00:11.550><c> how</c>

00:00:11.720 --> 00:00:11.730 align:start position:0%
interactive audio experiences but how
 

00:00:11.730 --> 00:00:13.339 align:start position:0%
interactive audio experiences but how
can<00:00:11.790><c> you</c><00:00:12.000><c> actually</c><00:00:12.389><c> achieve</c><00:00:12.690><c> this</c><00:00:12.900><c> in</c><00:00:13.080><c> your</c>

00:00:13.339 --> 00:00:13.349 align:start position:0%
can you actually achieve this in your
 

00:00:13.349 --> 00:00:15.740 align:start position:0%
can you actually achieve this in your
app<00:00:13.530><c> in</c><00:00:13.920><c> this</c><00:00:14.580><c> video</c><00:00:14.849><c> I'll</c><00:00:15.150><c> show</c><00:00:15.389><c> you</c><00:00:15.420><c> how</c><00:00:15.540><c> the</c>

00:00:15.740 --> 00:00:15.750 align:start position:0%
app in this video I'll show you how the
 

00:00:15.750 --> 00:00:18.200 align:start position:0%
app in this video I'll show you how the
oboe<00:00:16.199><c> library</c><00:00:16.619><c> helps</c><00:00:17.130><c> you</c><00:00:17.250><c> to</c><00:00:17.369><c> create</c><00:00:17.609><c> a</c><00:00:17.820><c> low</c>

00:00:18.200 --> 00:00:18.210 align:start position:0%
oboe library helps you to create a low
 

00:00:18.210 --> 00:00:20.380 align:start position:0%
oboe library helps you to create a low
latency<00:00:18.630><c> audio</c><00:00:18.779><c> stream</c><00:00:19.260><c> for</c><00:00:19.619><c> playing</c><00:00:19.859><c> sound</c>

00:00:20.380 --> 00:00:20.390 align:start position:0%
latency audio stream for playing sound
 

00:00:20.390 --> 00:00:22.910 align:start position:0%
latency audio stream for playing sound
you<00:00:21.390><c> can</c><00:00:21.539><c> play</c><00:00:21.720><c> sound</c><00:00:22.050><c> through</c><00:00:22.470><c> a</c><00:00:22.500><c> number</c><00:00:22.740><c> of</c>

00:00:22.910 --> 00:00:22.920 align:start position:0%
you can play sound through a number of
 

00:00:22.920 --> 00:00:24.890 align:start position:0%
you can play sound through a number of
different<00:00:23.039><c> audio</c><00:00:23.670><c> devices</c><00:00:23.970><c> such</c><00:00:24.600><c> as</c><00:00:24.630><c> the</c>

00:00:24.890 --> 00:00:24.900 align:start position:0%
different audio devices such as the
 

00:00:24.900 --> 00:00:27.740 align:start position:0%
different audio devices such as the
built-in<00:00:25.260><c> speakers</c><00:00:25.740><c> wired</c><00:00:26.490><c> headphones</c><00:00:26.750><c> USB</c>

00:00:27.740 --> 00:00:27.750 align:start position:0%
built-in speakers wired headphones USB
 

00:00:27.750 --> 00:00:31.070 align:start position:0%
built-in speakers wired headphones USB
audio<00:00:27.869><c> devices</c><00:00:28.470><c> or</c><00:00:28.590><c> over</c><00:00:29.160><c> Bluetooth</c><00:00:29.550><c> an</c><00:00:30.080><c> audio</c>

00:00:31.070 --> 00:00:31.080 align:start position:0%
audio devices or over Bluetooth an audio
 

00:00:31.080 --> 00:00:33.229 align:start position:0%
audio devices or over Bluetooth an audio
stream<00:00:31.289><c> is</c><00:00:31.560><c> used</c><00:00:31.890><c> to</c><00:00:32.009><c> move</c><00:00:32.279><c> data</c><00:00:32.520><c> from</c><00:00:33.059><c> your</c>

00:00:33.229 --> 00:00:33.239 align:start position:0%
stream is used to move data from your
 

00:00:33.239 --> 00:00:35.569 align:start position:0%
stream is used to move data from your
app<00:00:33.390><c> to</c><00:00:33.870><c> an</c><00:00:33.989><c> audio</c><00:00:34.230><c> device</c><00:00:34.410><c> so</c><00:00:34.980><c> that</c><00:00:35.010><c> it</c><00:00:35.309><c> can</c><00:00:35.460><c> be</c>

00:00:35.569 --> 00:00:35.579 align:start position:0%
app to an audio device so that it can be
 

00:00:35.579 --> 00:00:38.420 align:start position:0%
app to an audio device so that it can be
played<00:00:35.850><c> to</c><00:00:36.719><c> create</c><00:00:36.960><c> an</c><00:00:37.079><c> audio</c><00:00:37.170><c> stream</c><00:00:37.500><c> we</c><00:00:38.280><c> use</c>

00:00:38.420 --> 00:00:38.430 align:start position:0%
played to create an audio stream we use
 

00:00:38.430 --> 00:00:40.729 align:start position:0%
played to create an audio stream we use
an<00:00:38.550><c> audio</c><00:00:38.760><c> stream</c><00:00:39.120><c> builder</c><00:00:39.629><c> this</c><00:00:40.200><c> allows</c><00:00:40.559><c> us</c>

00:00:40.729 --> 00:00:40.739 align:start position:0%
an audio stream builder this allows us
 

00:00:40.739 --> 00:00:43.010 align:start position:0%
an audio stream builder this allows us
to<00:00:40.860><c> set</c><00:00:41.040><c> properties</c><00:00:41.550><c> on</c><00:00:41.700><c> the</c><00:00:41.820><c> stream</c><00:00:42.059><c> it's</c>

00:00:43.010 --> 00:00:43.020 align:start position:0%
to set properties on the stream it's
 

00:00:43.020 --> 00:00:44.299 align:start position:0%
to set properties on the stream it's
best<00:00:43.320><c> to</c><00:00:43.410><c> leave</c><00:00:43.559><c> most</c><00:00:43.890><c> properties</c>

00:00:44.299 --> 00:00:44.309 align:start position:0%
best to leave most properties
 

00:00:44.309 --> 00:00:46.819 align:start position:0%
best to leave most properties
unspecified<00:00:44.820><c> to</c><00:00:45.570><c> allow</c><00:00:45.750><c> OBO</c><00:00:46.140><c> to</c><00:00:46.530><c> pick</c><00:00:46.680><c> the</c>

00:00:46.819 --> 00:00:46.829 align:start position:0%
unspecified to allow OBO to pick the
 

00:00:46.829 --> 00:00:48.799 align:start position:0%
unspecified to allow OBO to pick the
optimal<00:00:47.370><c> values</c><00:00:47.730><c> for</c><00:00:48.120><c> the</c><00:00:48.180><c> default</c><00:00:48.570><c> audio</c>

00:00:48.799 --> 00:00:48.809 align:start position:0%
optimal values for the default audio
 

00:00:48.809 --> 00:00:52.040 align:start position:0%
optimal values for the default audio
device<00:00:49.309><c> however</c><00:00:50.309><c> to</c><00:00:51.090><c> create</c><00:00:51.390><c> a</c><00:00:51.449><c> stream</c><00:00:51.750><c> with</c>

00:00:52.040 --> 00:00:52.050 align:start position:0%
device however to create a stream with
 

00:00:52.050 --> 00:00:53.930 align:start position:0%
device however to create a stream with
the<00:00:52.170><c> lowest</c><00:00:52.469><c> possible</c><00:00:52.680><c> latency</c><00:00:53.340><c> there</c><00:00:53.730><c> are</c><00:00:53.879><c> a</c>

00:00:53.930 --> 00:00:53.940 align:start position:0%
the lowest possible latency there are a
 

00:00:53.940 --> 00:00:55.760 align:start position:0%
the lowest possible latency there are a
few<00:00:54.239><c> properties</c><00:00:54.719><c> which</c><00:00:55.230><c> we</c><00:00:55.410><c> should</c><00:00:55.469><c> always</c>

00:00:55.760 --> 00:00:55.770 align:start position:0%
few properties which we should always
 

00:00:55.770 --> 00:00:59.029 align:start position:0%
few properties which we should always
set<00:00:56.539><c> the</c><00:00:57.539><c> performance</c><00:00:58.050><c> mode</c><00:00:58.260><c> should</c><00:00:58.710><c> be</c><00:00:58.829><c> set</c>

00:00:59.029 --> 00:00:59.039 align:start position:0%
set the performance mode should be set
 

00:00:59.039 --> 00:01:01.040 align:start position:0%
set the performance mode should be set
to<00:00:59.070><c> low</c><00:00:59.370><c> latency</c><00:00:59.910><c> and</c><00:01:00.090><c> the</c><00:01:00.449><c> sharing</c><00:01:00.870><c> mode</c>

00:01:01.040 --> 00:01:01.050 align:start position:0%
to low latency and the sharing mode
 

00:01:01.050 --> 00:01:03.770 align:start position:0%
to low latency and the sharing mode
should<00:01:01.410><c> be</c><00:01:01.469><c> set</c><00:01:01.770><c> to</c><00:01:01.800><c> exclusive</c><00:01:02.579><c> once</c><00:01:03.510><c> the</c>

00:01:03.770 --> 00:01:03.780 align:start position:0%
should be set to exclusive once the
 

00:01:03.780 --> 00:01:05.390 align:start position:0%
should be set to exclusive once the
stream<00:01:04.019><c> properties</c><00:01:04.500><c> have</c><00:01:04.680><c> been</c><00:01:04.710><c> set</c><00:01:05.040><c> we</c><00:01:05.280><c> can</c>

00:01:05.390 --> 00:01:05.400 align:start position:0%
stream properties have been set we can
 

00:01:05.400 --> 00:01:07.640 align:start position:0%
stream properties have been set we can
open<00:01:05.610><c> the</c><00:01:05.820><c> stream</c><00:01:06.119><c> by</c><00:01:06.720><c> passing</c><00:01:07.170><c> a</c><00:01:07.229><c> reference</c>

00:01:07.640 --> 00:01:07.650 align:start position:0%
open the stream by passing a reference
 

00:01:07.650 --> 00:01:10.190 align:start position:0%
open the stream by passing a reference
to<00:01:07.860><c> an</c><00:01:07.950><c> audio</c><00:01:08.280><c> stream</c><00:01:08.520><c> pointer</c><00:01:09.060><c> be</c><00:01:09.810><c> sure</c><00:01:10.020><c> to</c>

00:01:10.190 --> 00:01:10.200 align:start position:0%
to an audio stream pointer be sure to
 

00:01:10.200 --> 00:01:11.750 align:start position:0%
to an audio stream pointer be sure to
check<00:01:10.380><c> the</c><00:01:10.530><c> stream</c><00:01:10.770><c> open</c><00:01:11.100><c> successfully</c>

00:01:11.750 --> 00:01:11.760 align:start position:0%
check the stream open successfully
 

00:01:11.760 --> 00:01:13.640 align:start position:0%
check the stream open successfully
otherwise<00:01:12.360><c> you</c><00:01:12.540><c> won't</c><00:01:12.689><c> have</c><00:01:12.810><c> a</c><00:01:12.930><c> valid</c><00:01:13.320><c> stream</c>

00:01:13.640 --> 00:01:13.650 align:start position:0%
otherwise you won't have a valid stream
 

00:01:13.650 --> 00:01:16.249 align:start position:0%
otherwise you won't have a valid stream
object<00:01:13.860><c> if</c><00:01:14.310><c> there</c><00:01:15.000><c> was</c><00:01:15.240><c> a</c><00:01:15.270><c> problem</c><00:01:15.600><c> you</c><00:01:16.110><c> can</c>

00:01:16.249 --> 00:01:16.259 align:start position:0%
object if there was a problem you can
 

00:01:16.259 --> 00:01:18.109 align:start position:0%
object if there was a problem you can
convert<00:01:16.650><c> the</c><00:01:16.830><c> error</c><00:01:16.979><c> to</c><00:01:17.369><c> a</c><00:01:17.400><c> human</c><00:01:17.790><c> readable</c>

00:01:18.109 --> 00:01:18.119 align:start position:0%
convert the error to a human readable
 

00:01:18.119 --> 00:01:20.780 align:start position:0%
convert the error to a human readable
string<00:01:18.360><c> using</c><00:01:18.780><c> convert</c><00:01:19.320><c> to</c><00:01:19.500><c> text</c><00:01:19.530><c> in</c><00:01:20.040><c> fact</c>

00:01:20.780 --> 00:01:20.790 align:start position:0%
string using convert to text in fact
 

00:01:20.790 --> 00:01:22.820 align:start position:0%
string using convert to text in fact
convert<00:01:21.420><c> to</c><00:01:21.540><c> text</c><00:01:21.900><c> can</c><00:01:22.080><c> be</c><00:01:22.110><c> used</c><00:01:22.439><c> to</c><00:01:22.530><c> convert</c>

00:01:22.820 --> 00:01:22.830 align:start position:0%
convert to text can be used to convert
 

00:01:22.830 --> 00:01:26.179 align:start position:0%
convert to text can be used to convert
many<00:01:23.189><c> OBO</c><00:01:23.670><c> objects</c><00:01:24.210><c> to</c><00:01:24.330><c> text</c><00:01:24.770><c> once</c><00:01:25.770><c> the</c><00:01:25.950><c> stream</c>

00:01:26.179 --> 00:01:26.189 align:start position:0%
many OBO objects to text once the stream
 

00:01:26.189 --> 00:01:27.859 align:start position:0%
many OBO objects to text once the stream
has<00:01:26.369><c> been</c><00:01:26.400><c> successfully</c><00:01:27.210><c> opened</c><00:01:27.540><c> you</c><00:01:27.840><c> can</c>

00:01:27.859 --> 00:01:27.869 align:start position:0%
has been successfully opened you can
 

00:01:27.869 --> 00:01:30.620 align:start position:0%
has been successfully opened you can
start<00:01:28.290><c> it</c><00:01:28.439><c> asynchronously</c><00:01:29.189><c> you</c><00:01:30.119><c> can</c><00:01:30.270><c> now</c><00:01:30.390><c> send</c>

00:01:30.620 --> 00:01:30.630 align:start position:0%
start it asynchronously you can now send
 

00:01:30.630 --> 00:01:33.800 align:start position:0%
start it asynchronously you can now send
data<00:01:30.869><c> to</c><00:01:31.170><c> the</c><00:01:31.470><c> audio</c><00:01:31.799><c> device</c><00:01:32.420><c> to</c><00:01:33.420><c> put</c><00:01:33.630><c> data</c>

00:01:33.800 --> 00:01:33.810 align:start position:0%
data to the audio device to put data
 

00:01:33.810 --> 00:01:35.929 align:start position:0%
data to the audio device to put data
into<00:01:34.170><c> an</c><00:01:34.439><c> audio</c><00:01:34.680><c> stream</c><00:01:34.920><c> we</c><00:01:35.250><c> can</c><00:01:35.430><c> either</c><00:01:35.610><c> write</c>

00:01:35.929 --> 00:01:35.939 align:start position:0%
into an audio stream we can either write
 

00:01:35.939 --> 00:01:37.910 align:start position:0%
into an audio stream we can either write
directly<00:01:36.479><c> into</c><00:01:36.810><c> it</c><00:01:36.930><c> or</c><00:01:37.200><c> have</c><00:01:37.530><c> the</c><00:01:37.560><c> audio</c>

00:01:37.910 --> 00:01:37.920 align:start position:0%
directly into it or have the audio
 

00:01:37.920 --> 00:01:40.210 align:start position:0%
directly into it or have the audio
stream<00:01:38.159><c> request</c><00:01:38.729><c> data</c><00:01:38.939><c> using</c><00:01:39.390><c> a</c><00:01:39.450><c> callback</c>

00:01:40.210 --> 00:01:40.220 align:start position:0%
stream request data using a callback
 

00:01:40.220 --> 00:01:43.130 align:start position:0%
stream request data using a callback
callbacks<00:01:41.220><c> give</c><00:01:41.549><c> us</c><00:01:41.700><c> the</c><00:01:41.880><c> lowest</c><00:01:42.150><c> latency</c><00:01:42.479><c> so</c>

00:01:43.130 --> 00:01:43.140 align:start position:0%
callbacks give us the lowest latency so
 

00:01:43.140 --> 00:01:44.810 align:start position:0%
callbacks give us the lowest latency so
it's<00:01:43.259><c> best</c><00:01:43.500><c> to</c><00:01:43.619><c> use</c><00:01:43.680><c> them</c><00:01:44.040><c> for</c><00:01:44.250><c> interactive</c>

00:01:44.810 --> 00:01:44.820 align:start position:0%
it's best to use them for interactive
 

00:01:44.820 --> 00:01:46.969 align:start position:0%
it's best to use them for interactive
audio<00:01:45.060><c> apps</c><00:01:45.270><c> to</c><00:01:46.110><c> create</c><00:01:46.350><c> a</c><00:01:46.380><c> callback</c><00:01:46.799><c> object</c>

00:01:46.969 --> 00:01:46.979 align:start position:0%
audio apps to create a callback object
 

00:01:46.979 --> 00:01:49.639 align:start position:0%
audio apps to create a callback object
sub<00:01:47.790><c> class</c><00:01:48.090><c> audio</c><00:01:48.659><c> stream</c><00:01:49.020><c> callback</c><00:01:49.470><c> and</c>

00:01:49.639 --> 00:01:49.649 align:start position:0%
sub class audio stream callback and
 

00:01:49.649 --> 00:01:53.270 align:start position:0%
sub class audio stream callback and
override<00:01:50.520><c> the</c><00:01:50.549><c> on</c><00:01:50.909><c> audio</c><00:01:51.450><c> ready</c><00:01:51.750><c> method</c><00:01:52.280><c> this</c>

00:01:53.270 --> 00:01:53.280 align:start position:0%
override the on audio ready method this
 

00:01:53.280 --> 00:01:54.920 align:start position:0%
override the on audio ready method this
method<00:01:53.340><c> is</c><00:01:53.820><c> called</c><00:01:54.090><c> when</c><00:01:54.360><c> the</c><00:01:54.450><c> audio</c><00:01:54.720><c> stream</c>

00:01:54.920 --> 00:01:54.930 align:start position:0%
method is called when the audio stream
 

00:01:54.930 --> 00:01:57.709 align:start position:0%
method is called when the audio stream
requires<00:01:55.530><c> more</c><00:01:55.740><c> data</c><00:01:56.009><c> it</c><00:01:56.610><c> has</c><00:01:57.270><c> three</c>

00:01:57.709 --> 00:01:57.719 align:start position:0%
requires more data it has three
 

00:01:57.719 --> 00:02:00.109 align:start position:0%
requires more data it has three
parameters<00:01:58.259><c> a</c><00:01:58.469><c> pointer</c><00:01:59.280><c> to</c><00:01:59.310><c> the</c><00:01:59.579><c> audio</c><00:01:59.880><c> stream</c>

00:02:00.109 --> 00:02:00.119 align:start position:0%
parameters a pointer to the audio stream
 

00:02:00.119 --> 00:02:02.660 align:start position:0%
parameters a pointer to the audio stream
object<00:02:00.329><c> a</c><00:02:00.810><c> container</c><00:02:01.680><c> array</c><00:02:02.009><c> which</c><00:02:02.340><c> we</c><00:02:02.520><c> can</c>

00:02:02.660 --> 00:02:02.670 align:start position:0%
object a container array which we can
 

00:02:02.670 --> 00:02:05.840 align:start position:0%
object a container array which we can
write<00:02:02.850><c> our</c><00:02:03.119><c> audio</c><00:02:03.540><c> data</c><00:02:03.780><c> into</c><00:02:04.280><c> this</c><00:02:05.280><c> has</c><00:02:05.490><c> type</c>

00:02:05.840 --> 00:02:05.850 align:start position:0%
write our audio data into this has type
 

00:02:05.850 --> 00:02:07.670 align:start position:0%
write our audio data into this has type
void<00:02:06.180><c> star</c><00:02:06.540><c> because</c><00:02:06.990><c> the</c><00:02:07.079><c> format</c><00:02:07.469><c> of</c><00:02:07.500><c> the</c>

00:02:07.670 --> 00:02:07.680 align:start position:0%
void star because the format of the
 

00:02:07.680 --> 00:02:09.410 align:start position:0%
void star because the format of the
audio<00:02:07.950><c> stream</c><00:02:08.280><c> can</c><00:02:08.489><c> either</c><00:02:08.640><c> be</c><00:02:08.849><c> 16-bit</c>

00:02:09.410 --> 00:02:09.420 align:start position:0%
audio stream can either be 16-bit
 

00:02:09.420 --> 00:02:12.380 align:start position:0%
audio stream can either be 16-bit
integers<00:02:09.869><c> or</c><00:02:10.050><c> floats</c><00:02:10.470><c> it's</c><00:02:11.459><c> up</c><00:02:11.640><c> to</c><00:02:11.760><c> us</c><00:02:11.910><c> to</c><00:02:11.940><c> cast</c>

00:02:12.380 --> 00:02:12.390 align:start position:0%
integers or floats it's up to us to cast
 

00:02:12.390 --> 00:02:13.720 align:start position:0%
integers or floats it's up to us to cast
to<00:02:12.720><c> the</c><00:02:12.810><c> correct</c>

00:02:13.720 --> 00:02:13.730 align:start position:0%
to the correct
 

00:02:13.730 --> 00:02:16.520 align:start position:0%
to the correct
lastly<00:02:14.730><c> num</c><00:02:15.239><c> frames</c><00:02:15.569><c> tells</c><00:02:16.170><c> us</c><00:02:16.319><c> how</c><00:02:16.470><c> many</c>

00:02:16.520 --> 00:02:16.530 align:start position:0%
lastly num frames tells us how many
 

00:02:16.530 --> 00:02:19.309 align:start position:0%
lastly num frames tells us how many
frames<00:02:16.890><c> of</c><00:02:17.129><c> audio</c><00:02:17.430><c> are</c><00:02:17.670><c> required</c><00:02:18.180><c> each</c><00:02:18.930><c> frame</c>

00:02:19.309 --> 00:02:19.319 align:start position:0%
frames of audio are required each frame
 

00:02:19.319 --> 00:02:21.619 align:start position:0%
frames of audio are required each frame
contains<00:02:19.739><c> one</c><00:02:20.010><c> or</c><00:02:20.040><c> more</c><00:02:20.250><c> samples</c><00:02:20.849><c> the</c><00:02:21.329><c> number</c>

00:02:21.619 --> 00:02:21.629 align:start position:0%
contains one or more samples the number
 

00:02:21.629 --> 00:02:23.330 align:start position:0%
contains one or more samples the number
of<00:02:21.720><c> samples</c><00:02:22.140><c> will</c><00:02:22.349><c> depend</c><00:02:22.739><c> on</c><00:02:22.890><c> the</c><00:02:23.040><c> streams</c>

00:02:23.330 --> 00:02:23.340 align:start position:0%
of samples will depend on the streams
 

00:02:23.340 --> 00:02:25.580 align:start position:0%
of samples will depend on the streams
channel<00:02:23.700><c> count</c><00:02:23.939><c> for</c><00:02:24.540><c> example</c><00:02:24.959><c> a</c><00:02:25.110><c> stereo</c>

00:02:25.580 --> 00:02:25.590 align:start position:0%
channel count for example a stereo
 

00:02:25.590 --> 00:02:28.789 align:start position:0%
channel count for example a stereo
stream<00:02:25.950><c> has</c><00:02:26.220><c> two</c><00:02:26.610><c> samples</c><00:02:27.120><c> per</c><00:02:27.360><c> frame</c><00:02:27.629><c> one</c><00:02:28.590><c> for</c>

00:02:28.789 --> 00:02:28.799 align:start position:0%
stream has two samples per frame one for
 

00:02:28.799 --> 00:02:30.289 align:start position:0%
stream has two samples per frame one for
the<00:02:28.860><c> left</c><00:02:29.040><c> channel</c><00:02:29.220><c> and</c><00:02:29.549><c> one</c><00:02:29.849><c> for</c><00:02:30.030><c> the</c><00:02:30.120><c> right</c>

00:02:30.289 --> 00:02:30.299 align:start position:0%
the left channel and one for the right
 

00:02:30.299 --> 00:02:32.750 align:start position:0%
the left channel and one for the right
channel<00:02:30.599><c> num</c><00:02:31.290><c> frames</c><00:02:31.650><c> also</c><00:02:31.950><c> tells</c><00:02:32.459><c> us</c><00:02:32.610><c> the</c>

00:02:32.750 --> 00:02:32.760 align:start position:0%
channel num frames also tells us the
 

00:02:32.760 --> 00:02:34.600 align:start position:0%
channel num frames also tells us the
maximum<00:02:33.269><c> time</c><00:02:33.480><c> we</c><00:02:33.690><c> have</c><00:02:33.900><c> to</c><00:02:34.049><c> create</c><00:02:34.290><c> the</c><00:02:34.440><c> data</c>

00:02:34.600 --> 00:02:34.610 align:start position:0%
maximum time we have to create the data
 

00:02:34.610 --> 00:02:37.250 align:start position:0%
maximum time we have to create the data
failure<00:02:35.610><c> to</c><00:02:35.730><c> supply</c><00:02:35.909><c> data</c><00:02:36.329><c> within</c><00:02:36.900><c> this</c><00:02:37.019><c> time</c>

00:02:37.250 --> 00:02:37.260 align:start position:0%
failure to supply data within this time
 

00:02:37.260 --> 00:02:40.309 align:start position:0%
failure to supply data within this time
is<00:02:37.470><c> known</c><00:02:37.769><c> as</c><00:02:37.950><c> an</c><00:02:38.069><c> under</c><00:02:38.400><c> run</c><00:02:38.549><c> as</c><00:02:38.989><c> an</c><00:02:39.989><c> example</c>

00:02:40.309 --> 00:02:40.319 align:start position:0%
is known as an under run as an example
 

00:02:40.319 --> 00:02:42.759 align:start position:0%
is known as an under run as an example
if<00:02:40.650><c> our</c><00:02:41.040><c> audio</c><00:02:41.400><c> stream</c><00:02:41.760><c> has</c><00:02:41.940><c> a</c><00:02:41.970><c> sample</c><00:02:42.450><c> rate</c><00:02:42.599><c> of</c>

00:02:42.759 --> 00:02:42.769 align:start position:0%
if our audio stream has a sample rate of
 

00:02:42.769 --> 00:02:46.399 align:start position:0%
if our audio stream has a sample rate of
48,000<00:02:43.769><c> samples</c><00:02:43.920><c> per</c><00:02:44.280><c> second</c><00:02:44.670><c> and</c><00:02:44.959><c> 192</c><00:02:45.959><c> frames</c>

00:02:46.399 --> 00:02:46.409 align:start position:0%
48,000 samples per second and 192 frames
 

00:02:46.409 --> 00:02:48.619 align:start position:0%
48,000 samples per second and 192 frames
are<00:02:46.650><c> requested</c><00:02:47.190><c> this</c><00:02:47.700><c> gives</c><00:02:48.000><c> us</c><00:02:48.209><c> 4</c>

00:02:48.619 --> 00:02:48.629 align:start position:0%
are requested this gives us 4
 

00:02:48.629 --> 00:02:51.259 align:start position:0%
are requested this gives us 4
milliseconds<00:02:49.200><c> to</c><00:02:49.379><c> create</c><00:02:49.650><c> this</c><00:02:49.829><c> data</c><00:02:50.099><c> in</c><00:02:50.519><c> the</c>

00:02:51.259 --> 00:02:51.269 align:start position:0%
milliseconds to create this data in the
 

00:02:51.269 --> 00:02:53.240 align:start position:0%
milliseconds to create this data in the
real<00:02:51.450><c> world</c><00:02:51.690><c> we</c><00:02:52.049><c> want</c><00:02:52.260><c> to</c><00:02:52.349><c> keep</c><00:02:52.500><c> well</c><00:02:52.920><c> under</c>

00:02:53.240 --> 00:02:53.250 align:start position:0%
real world we want to keep well under
 

00:02:53.250 --> 00:02:55.009 align:start position:0%
real world we want to keep well under
this<00:02:53.370><c> deadline</c><00:02:53.760><c> to</c><00:02:54.180><c> allow</c><00:02:54.420><c> for</c><00:02:54.690><c> system</c>

00:02:55.009 --> 00:02:55.019 align:start position:0%
this deadline to allow for system
 

00:02:55.019 --> 00:02:57.949 align:start position:0%
this deadline to allow for system
overhead<00:02:55.379><c> and</c><00:02:55.590><c> late</c><00:02:55.950><c> callbacks</c><00:02:56.720><c> to</c><00:02:57.720><c> give</c><00:02:57.870><c> you</c>

00:02:57.949 --> 00:02:57.959 align:start position:0%
overhead and late callbacks to give you
 

00:02:57.959 --> 00:02:59.720 align:start position:0%
overhead and late callbacks to give you
the<00:02:58.079><c> best</c><00:02:58.349><c> chance</c><00:02:58.470><c> of</c><00:02:58.950><c> meeting</c><00:02:59.190><c> this</c><00:02:59.430><c> audio</c>

00:02:59.720 --> 00:02:59.730 align:start position:0%
the best chance of meeting this audio
 

00:02:59.730 --> 00:03:02.149 align:start position:0%
the best chance of meeting this audio
deadline<00:03:00.120><c> on</c><00:03:00.329><c> audio</c><00:03:00.959><c> ready</c><00:03:01.230><c> is</c><00:03:01.470><c> called</c><00:03:01.859><c> on</c><00:03:02.099><c> a</c>

00:03:02.149 --> 00:03:02.159 align:start position:0%
deadline on audio ready is called on a
 

00:03:02.159 --> 00:03:04.550 align:start position:0%
deadline on audio ready is called on a
high<00:03:02.459><c> priority</c><00:03:02.760><c> system</c><00:03:03.329><c> thread</c><00:03:03.810><c> which</c><00:03:04.290><c> means</c>

00:03:04.550 --> 00:03:04.560 align:start position:0%
high priority system thread which means
 

00:03:04.560 --> 00:03:06.649 align:start position:0%
high priority system thread which means
it<00:03:04.739><c> won't</c><00:03:04.980><c> be</c><00:03:05.129><c> preempted</c><00:03:05.639><c> by</c><00:03:05.819><c> lower</c><00:03:06.120><c> priority</c>

00:03:06.649 --> 00:03:06.659 align:start position:0%
it won't be preempted by lower priority
 

00:03:06.659 --> 00:03:08.990 align:start position:0%
it won't be preempted by lower priority
threads<00:03:06.959><c> but</c><00:03:07.859><c> it's</c><00:03:08.010><c> critical</c><00:03:08.489><c> that</c><00:03:08.519><c> you</c><00:03:08.819><c> don't</c>

00:03:08.990 --> 00:03:09.000 align:start position:0%
threads but it's critical that you don't
 

00:03:09.000 --> 00:03:11.059 align:start position:0%
threads but it's critical that you don't
do<00:03:09.120><c> too</c><00:03:09.420><c> much</c><00:03:09.569><c> work</c><00:03:09.840><c> or</c><00:03:10.079><c> block</c><00:03:10.500><c> inside</c><00:03:10.920><c> this</c>

00:03:11.059 --> 00:03:11.069 align:start position:0%
do too much work or block inside this
 

00:03:11.069 --> 00:03:13.849 align:start position:0%
do too much work or block inside this
method<00:03:11.599><c> more</c><00:03:12.599><c> detailed</c><00:03:13.049><c> guidance</c><00:03:13.319><c> on</c><00:03:13.680><c> what</c>

00:03:13.849 --> 00:03:13.859 align:start position:0%
method more detailed guidance on what
 

00:03:13.859 --> 00:03:15.440 align:start position:0%
method more detailed guidance on what
you<00:03:13.950><c> should</c><00:03:13.980><c> and</c><00:03:14.459><c> shouldn't</c><00:03:14.700><c> do</c><00:03:14.909><c> here</c><00:03:15.150><c> can</c><00:03:15.359><c> be</c>

00:03:15.440 --> 00:03:15.450 align:start position:0%
you should and shouldn't do here can be
 

00:03:15.450 --> 00:03:18.159 align:start position:0%
you should and shouldn't do here can be
found<00:03:15.720><c> in</c><00:03:15.930><c> the</c><00:03:16.139><c> full</c><00:03:16.349><c> guide</c><00:03:16.560><c> to</c><00:03:16.709><c> ovo</c><00:03:17.010><c> on</c><00:03:17.190><c> github</c>

00:03:18.159 --> 00:03:18.169 align:start position:0%
found in the full guide to ovo on github
 

00:03:18.169 --> 00:03:21.080 align:start position:0%
found in the full guide to ovo on github
inside<00:03:19.169><c> on</c><00:03:19.410><c> audio</c><00:03:19.829><c> ready</c><00:03:20.129><c> we</c><00:03:20.730><c> write</c><00:03:20.970><c> the</c>

00:03:21.080 --> 00:03:21.090 align:start position:0%
inside on audio ready we write the
 

00:03:21.090 --> 00:03:22.699 align:start position:0%
inside on audio ready we write the
requested<00:03:21.569><c> number</c><00:03:21.780><c> of</c><00:03:21.870><c> audio</c><00:03:22.139><c> frames</c><00:03:22.470><c> into</c>

00:03:22.699 --> 00:03:22.709 align:start position:0%
requested number of audio frames into
 

00:03:22.709 --> 00:03:25.220 align:start position:0%
requested number of audio frames into
the<00:03:23.010><c> audio</c><00:03:23.310><c> data</c><00:03:23.549><c> array</c><00:03:23.970><c> this</c><00:03:24.900><c> could</c><00:03:25.139><c> be</c>

00:03:25.220 --> 00:03:25.230 align:start position:0%
the audio data array this could be
 

00:03:25.230 --> 00:03:27.589 align:start position:0%
the audio data array this could be
generated<00:03:25.739><c> using</c><00:03:25.919><c> digital</c><00:03:26.519><c> synthesis</c><00:03:27.060><c> or</c><00:03:27.239><c> be</c>

00:03:27.589 --> 00:03:27.599 align:start position:0%
generated using digital synthesis or be
 

00:03:27.599 --> 00:03:29.800 align:start position:0%
generated using digital synthesis or be
supplied<00:03:27.959><c> from</c><00:03:28.169><c> pre-recorded</c><00:03:28.889><c> audio</c><00:03:29.040><c> data</c>

00:03:29.800 --> 00:03:29.810 align:start position:0%
supplied from pre-recorded audio data
 

00:03:29.810 --> 00:03:32.750 align:start position:0%
supplied from pre-recorded audio data
finally<00:03:30.810><c> return</c><00:03:31.500><c> a</c><00:03:31.530><c> data</c><00:03:31.829><c> callback</c><00:03:32.400><c> result</c>

00:03:32.750 --> 00:03:32.760 align:start position:0%
finally return a data callback result
 

00:03:32.760 --> 00:03:35.119 align:start position:0%
finally return a data callback result
this<00:03:33.480><c> can</c><00:03:33.660><c> either</c><00:03:33.840><c> be</c><00:03:33.959><c> continued</c><00:03:34.620><c> which</c>

00:03:35.119 --> 00:03:35.129 align:start position:0%
this can either be continued which
 

00:03:35.129 --> 00:03:36.680 align:start position:0%
this can either be continued which
indicates<00:03:35.609><c> that</c><00:03:35.699><c> we</c><00:03:35.849><c> want</c><00:03:36.030><c> the</c><00:03:36.150><c> callbacks</c><00:03:36.510><c> to</c>

00:03:36.680 --> 00:03:36.690 align:start position:0%
indicates that we want the callbacks to
 

00:03:36.690 --> 00:03:39.530 align:start position:0%
indicates that we want the callbacks to
continue<00:03:37.260><c> or</c><00:03:37.489><c> stop</c><00:03:38.489><c> which</c><00:03:38.910><c> indicates</c><00:03:39.389><c> that</c>

00:03:39.530 --> 00:03:39.540 align:start position:0%
continue or stop which indicates that
 

00:03:39.540 --> 00:03:41.479 align:start position:0%
continue or stop which indicates that
the<00:03:39.660><c> stream</c><00:03:40.109><c> should</c><00:03:40.470><c> stop</c><00:03:40.739><c> with</c><00:03:41.010><c> no</c><00:03:41.040><c> more</c>

00:03:41.479 --> 00:03:41.489 align:start position:0%
the stream should stop with no more
 

00:03:41.489 --> 00:03:42.430 align:start position:0%
the stream should stop with no more
callbacks

00:03:42.430 --> 00:03:42.440 align:start position:0%
callbacks
 

00:03:42.440 --> 00:03:44.479 align:start position:0%
callbacks
once<00:03:43.440><c> you've</c><00:03:43.620><c> finished</c><00:03:43.980><c> creating</c><00:03:44.099><c> your</c>

00:03:44.479 --> 00:03:44.489 align:start position:0%
once you've finished creating your
 

00:03:44.489 --> 00:03:46.309 align:start position:0%
once you've finished creating your
callback<00:03:44.730><c> object</c><00:03:45.030><c> you</c><00:03:45.599><c> can</c><00:03:45.780><c> link</c><00:03:45.959><c> it</c><00:03:46.139><c> to</c><00:03:46.169><c> your</c>

00:03:46.309 --> 00:03:46.319 align:start position:0%
callback object you can link it to your
 

00:03:46.319 --> 00:03:48.170 align:start position:0%
callback object you can link it to your
stream<00:03:46.590><c> using</c><00:03:47.129><c> the</c><00:03:47.220><c> builder</c><00:03:47.549><c> we</c><00:03:47.699><c> created</c>

00:03:48.170 --> 00:03:48.180 align:start position:0%
stream using the builder we created
 

00:03:48.180 --> 00:03:51.110 align:start position:0%
stream using the builder we created
earlier<00:03:48.859><c> there's</c><00:03:49.859><c> one</c><00:03:50.040><c> final</c><00:03:50.400><c> step</c><00:03:50.549><c> we</c><00:03:51.000><c> need</c>

00:03:51.110 --> 00:03:51.120 align:start position:0%
earlier there's one final step we need
 

00:03:51.120 --> 00:03:53.059 align:start position:0%
earlier there's one final step we need
to<00:03:51.180><c> take</c><00:03:51.269><c> to</c><00:03:51.660><c> ensure</c><00:03:51.810><c> our</c><00:03:52.230><c> audio</c><00:03:52.560><c> stream</c><00:03:52.889><c> has</c>

00:03:53.059 --> 00:03:53.069 align:start position:0%
to take to ensure our audio stream has
 

00:03:53.069 --> 00:03:55.430 align:start position:0%
to take to ensure our audio stream has
the<00:03:53.220><c> lowest</c><00:03:53.459><c> possible</c><00:03:53.760><c> latency</c><00:03:54.419><c> setting</c><00:03:55.319><c> its</c>

00:03:55.430 --> 00:03:55.440 align:start position:0%
the lowest possible latency setting its
 

00:03:55.440 --> 00:03:58.159 align:start position:0%
the lowest possible latency setting its
buffer<00:03:55.799><c> size</c><00:03:56.209><c> the</c><00:03:57.209><c> audio</c><00:03:57.540><c> streams</c><00:03:57.810><c> buffer</c>

00:03:58.159 --> 00:03:58.169 align:start position:0%
buffer size the audio streams buffer
 

00:03:58.169 --> 00:03:59.990 align:start position:0%
buffer size the audio streams buffer
size<00:03:58.349><c> affects</c><00:03:58.949><c> the</c><00:03:59.129><c> time</c><00:03:59.340><c> it</c><00:03:59.489><c> takes</c><00:03:59.609><c> for</c><00:03:59.790><c> an</c>

00:03:59.990 --> 00:04:00.000 align:start position:0%
size affects the time it takes for an
 

00:04:00.000 --> 00:04:02.180 align:start position:0%
size affects the time it takes for an
audio<00:04:00.329><c> frame</c><00:04:00.690><c> to</c><00:04:01.079><c> travel</c><00:04:01.440><c> through</c><00:04:01.769><c> the</c><00:04:01.919><c> stream</c>

00:04:02.180 --> 00:04:02.190 align:start position:0%
audio frame to travel through the stream
 

00:04:02.190 --> 00:04:04.490 align:start position:0%
audio frame to travel through the stream
to<00:04:02.609><c> the</c><00:04:02.730><c> audio</c><00:04:02.970><c> device</c><00:04:03.269><c> the</c><00:04:04.079><c> larger</c><00:04:04.379><c> the</c>

00:04:04.490 --> 00:04:04.500 align:start position:0%
to the audio device the larger the
 

00:04:04.500 --> 00:04:06.259 align:start position:0%
to the audio device the larger the
buffer<00:04:04.829><c> the</c><00:04:05.010><c> longer</c><00:04:05.430><c> it</c><00:04:05.519><c> takes</c><00:04:05.730><c> and</c><00:04:06.030><c> the</c>

00:04:06.259 --> 00:04:06.269 align:start position:0%
buffer the longer it takes and the
 

00:04:06.269 --> 00:04:09.080 align:start position:0%
buffer the longer it takes and the
higher<00:04:06.480><c> the</c><00:04:06.510><c> latency</c><00:04:07.139><c> an</c><00:04:07.849><c> optimally</c><00:04:08.849><c> sized</c>

00:04:09.080 --> 00:04:09.090 align:start position:0%
higher the latency an optimally sized
 

00:04:09.090 --> 00:04:11.149 align:start position:0%
higher the latency an optimally sized
buffer<00:04:09.569><c> provides</c><00:04:10.109><c> a</c><00:04:10.229><c> good</c><00:04:10.440><c> trade-off</c><00:04:10.739><c> between</c>

00:04:11.149 --> 00:04:11.159 align:start position:0%
buffer provides a good trade-off between
 

00:04:11.159 --> 00:04:14.719 align:start position:0%
buffer provides a good trade-off between
latency<00:04:11.699><c> and</c><00:04:11.970><c> under</c><00:04:12.569><c> on</c><00:04:12.690><c> protection</c><00:04:13.729><c> the</c>

00:04:14.719 --> 00:04:14.729 align:start position:0%
latency and under on protection the
 

00:04:14.729 --> 00:04:16.610 align:start position:0%
latency and under on protection the
buffer<00:04:15.030><c> size</c><00:04:15.180><c> must</c><00:04:15.540><c> be</c><00:04:15.629><c> a</c><00:04:15.720><c> multiple</c><00:04:15.989><c> of</c><00:04:16.470><c> the</c>

00:04:16.610 --> 00:04:16.620 align:start position:0%
buffer size must be a multiple of the
 

00:04:16.620 --> 00:04:18.620 align:start position:0%
buffer size must be a multiple of the
streams<00:04:16.949><c> burst</c><00:04:17.340><c> size</c><00:04:17.609><c> which</c><00:04:18.030><c> is</c><00:04:18.180><c> the</c><00:04:18.299><c> number</c>

00:04:18.620 --> 00:04:18.630 align:start position:0%
streams burst size which is the number
 

00:04:18.630 --> 00:04:21.020 align:start position:0%
streams burst size which is the number
of<00:04:18.659><c> frames</c><00:04:18.959><c> the</c><00:04:19.349><c> audio</c><00:04:19.680><c> device</c><00:04:20.010><c> consumes</c><00:04:20.729><c> in</c><00:04:20.970><c> a</c>

00:04:21.020 --> 00:04:21.030 align:start position:0%
of frames the audio device consumes in a
 

00:04:21.030 --> 00:04:23.870 align:start position:0%
of frames the audio device consumes in a
single<00:04:21.450><c> read</c><00:04:21.719><c> a</c><00:04:22.019><c> good</c><00:04:22.979><c> rule</c><00:04:23.219><c> of</c><00:04:23.250><c> thumb</c><00:04:23.400><c> is</c><00:04:23.820><c> to</c>

00:04:23.870 --> 00:04:23.880 align:start position:0%
single read a good rule of thumb is to
 

00:04:23.880 --> 00:04:26.310 align:start position:0%
single read a good rule of thumb is to
use<00:04:24.030><c> twice</c><00:04:24.630><c> this</c><00:04:24.900><c> burst</c><00:04:25.229><c> size</c>

00:04:26.310 --> 00:04:26.320 align:start position:0%
use twice this burst size
 

00:04:26.320 --> 00:04:28.860 align:start position:0%
use twice this burst size
this<00:04:26.560><c> means</c><00:04:26.800><c> that</c><00:04:27.070><c> if</c><00:04:27.400><c> occasionally</c><00:04:28.300><c> we</c><00:04:28.660><c> miss</c>

00:04:28.860 --> 00:04:28.870 align:start position:0%
this means that if occasionally we miss
 

00:04:28.870 --> 00:04:30.990 align:start position:0%
this means that if occasionally we miss
our<00:04:29.050><c> audio</c><00:04:29.380><c> callback</c><00:04:29.890><c> deadline</c><00:04:30.280><c> the</c><00:04:30.790><c> user</c>

00:04:30.990 --> 00:04:31.000 align:start position:0%
our audio callback deadline the user
 

00:04:31.000 --> 00:04:33.660 align:start position:0%
our audio callback deadline the user
will<00:04:31.210><c> not</c><00:04:31.510><c> hear</c><00:04:31.810><c> an</c><00:04:31.960><c> audio</c><00:04:32.200><c> glitch</c><00:04:32.590><c> as</c><00:04:32.860><c> long</c><00:04:33.460><c> as</c>

00:04:33.660 --> 00:04:33.670 align:start position:0%
will not hear an audio glitch as long as
 

00:04:33.670 --> 00:04:36.810 align:start position:0%
will not hear an audio glitch as long as
the<00:04:33.970><c> next</c><00:04:34.120><c> callback</c><00:04:34.600><c> runs</c><00:04:34.930><c> on</c><00:04:35.110><c> time</c><00:04:35.550><c> use</c><00:04:36.550><c> get</c>

00:04:36.810 --> 00:04:36.820 align:start position:0%
the next callback runs on time use get
 

00:04:36.820 --> 00:04:38.430 align:start position:0%
the next callback runs on time use get
frames<00:04:37.090><c> per</c><00:04:37.330><c> burst</c><00:04:37.540><c> to</c><00:04:37.750><c> get</c><00:04:37.900><c> the</c><00:04:37.990><c> burst</c><00:04:38.200><c> size</c>

00:04:38.430 --> 00:04:38.440 align:start position:0%
frames per burst to get the burst size
 

00:04:38.440 --> 00:04:41.100 align:start position:0%
frames per burst to get the burst size
and<00:04:38.740><c> set</c><00:04:39.220><c> buffer</c><00:04:39.550><c> size</c><00:04:39.730><c> in</c><00:04:39.910><c> frames</c><00:04:40.210><c> to</c><00:04:40.840><c> set</c><00:04:41.020><c> the</c>

00:04:41.100 --> 00:04:41.110 align:start position:0%
and set buffer size in frames to set the
 

00:04:41.110 --> 00:04:43.680 align:start position:0%
and set buffer size in frames to set the
buffer<00:04:41.380><c> size</c><00:04:41.970><c> now</c><00:04:42.970><c> that</c><00:04:43.210><c> all</c><00:04:43.300><c> the</c><00:04:43.420><c> stream</c>

00:04:43.680 --> 00:04:43.690 align:start position:0%
buffer size now that all the stream
 

00:04:43.690 --> 00:04:45.420 align:start position:0%
buffer size now that all the stream
properties<00:04:44.110><c> are</c><00:04:44.320><c> set</c><00:04:44.560><c> we</c><00:04:44.830><c> can</c><00:04:44.980><c> start</c><00:04:45.310><c> the</c>

00:04:45.420 --> 00:04:45.430 align:start position:0%
properties are set we can start the
 

00:04:45.430 --> 00:04:47.540 align:start position:0%
properties are set we can start the
stream<00:04:45.670><c> callbacks</c><00:04:46.510><c> will</c><00:04:46.690><c> start</c><00:04:46.960><c> immediately</c>

00:04:47.540 --> 00:04:47.550 align:start position:0%
stream callbacks will start immediately
 

00:04:47.550 --> 00:04:49.740 align:start position:0%
stream callbacks will start immediately
and<00:04:48.550><c> once</c><00:04:48.790><c> you</c><00:04:48.880><c> finish</c><00:04:49.150><c> with</c><00:04:49.420><c> the</c><00:04:49.510><c> stream</c>

00:04:49.740 --> 00:04:49.750 align:start position:0%
and once you finish with the stream
 

00:04:49.750 --> 00:04:52.350 align:start position:0%
and once you finish with the stream
remember<00:04:50.410><c> to</c><00:04:50.530><c> close</c><00:04:50.740><c> it</c><00:04:50.980><c> after</c><00:04:51.220><c> you</c><00:04:52.090><c> close</c><00:04:52.330><c> a</c>

00:04:52.350 --> 00:04:52.360 align:start position:0%
remember to close it after you close a
 

00:04:52.360 --> 00:04:54.030 align:start position:0%
remember to close it after you close a
stream<00:04:52.690><c> it</c><00:04:52.870><c> cannot</c><00:04:53.200><c> be</c><00:04:53.350><c> accessed</c><00:04:53.440><c> any</c><00:04:53.830><c> more</c>

00:04:54.030 --> 00:04:54.040 align:start position:0%
stream it cannot be accessed any more
 

00:04:54.040 --> 00:04:56.100 align:start position:0%
stream it cannot be accessed any more
you<00:04:54.910><c> should</c><00:04:55.120><c> now</c><00:04:55.300><c> have</c><00:04:55.330><c> everything</c><00:04:55.990><c> you</c><00:04:56.080><c> need</c>

00:04:56.100 --> 00:04:56.110 align:start position:0%
you should now have everything you need
 

00:04:56.110 --> 00:04:58.410 align:start position:0%
you should now have everything you need
to<00:04:56.440><c> play</c><00:04:56.620><c> audio</c><00:04:56.800><c> using</c><00:04:57.340><c> a</c><00:04:57.520><c> low</c><00:04:57.730><c> latency</c><00:04:57.880><c> audio</c>

00:04:58.410 --> 00:04:58.420 align:start position:0%
to play audio using a low latency audio
 

00:04:58.420 --> 00:05:01.230 align:start position:0%
to play audio using a low latency audio
stream<00:04:58.750><c> for</c><00:04:59.740><c> a</c><00:04:59.770><c> working</c><00:05:00.130><c> example</c><00:05:00.280><c> check</c><00:05:01.120><c> out</c>

00:05:01.230 --> 00:05:01.240 align:start position:0%
stream for a working example check out
 

00:05:01.240 --> 00:05:03.630 align:start position:0%
stream for a working example check out
the<00:05:01.390><c> hello</c><00:05:01.780><c> oboe</c><00:05:02.170><c> sample</c><00:05:02.620><c> on</c><00:05:02.800><c> github</c><00:05:03.190><c> which</c>

00:05:03.630 --> 00:05:03.640 align:start position:0%
the hello oboe sample on github which
 

00:05:03.640 --> 00:05:04.920 align:start position:0%
the hello oboe sample on github which
shows<00:05:03.910><c> you</c><00:05:04.060><c> how</c><00:05:04.090><c> to</c><00:05:04.240><c> create</c><00:05:04.570><c> a</c><00:05:04.600><c> simple</c>

00:05:04.920 --> 00:05:04.930 align:start position:0%
shows you how to create a simple
 

00:05:04.930 --> 00:05:07.920 align:start position:0%
shows you how to create a simple
synthesizer<00:05:05.590><c> app</c><00:05:05.830><c> it</c><00:05:06.790><c> also</c><00:05:06.940><c> demonstrates</c><00:05:07.600><c> how</c>

00:05:07.920 --> 00:05:07.930 align:start position:0%
synthesizer app it also demonstrates how
 

00:05:07.930 --> 00:05:10.350 align:start position:0%
synthesizer app it also demonstrates how
to<00:05:07.990><c> handle</c><00:05:08.350><c> audio</c><00:05:08.770><c> device</c><00:05:09.070><c> changes</c><00:05:09.340><c> such</c><00:05:10.180><c> as</c>

00:05:10.350 --> 00:05:10.360 align:start position:0%
to handle audio device changes such as
 

00:05:10.360 --> 00:05:11.460 align:start position:0%
to handle audio device changes such as
when<00:05:10.480><c> the</c><00:05:10.600><c> user</c><00:05:10.810><c> connects</c><00:05:11.140><c> their</c><00:05:11.320><c> headphones</c>

00:05:11.460 --> 00:05:11.470 align:start position:0%
when the user connects their headphones
 

00:05:11.470 --> 00:05:15.030 align:start position:0%
when the user connects their headphones
a<00:05:11.950><c> link</c><00:05:12.580><c> can</c><00:05:12.700><c> be</c><00:05:12.760><c> found</c><00:05:12.850><c> below</c><00:05:13.270><c> in</c><00:05:13.770><c> the</c><00:05:14.770><c> next</c>

00:05:15.030 --> 00:05:15.040 align:start position:0%
a link can be found below in the next
 

00:05:15.040 --> 00:05:16.770 align:start position:0%
a link can be found below in the next
episode<00:05:15.400><c> I'll</c><00:05:15.610><c> show</c><00:05:16.000><c> you</c><00:05:16.060><c> how</c><00:05:16.240><c> to</c><00:05:16.300><c> record</c>

00:05:16.770 --> 00:05:16.780 align:start position:0%
episode I'll show you how to record
 

00:05:16.780 --> 00:05:18.750 align:start position:0%
episode I'll show you how to record
sound<00:05:17.170><c> through</c><00:05:17.440><c> a</c><00:05:17.470><c> microphone</c><00:05:17.890><c> using</c><00:05:18.550><c> low</c>

00:05:18.750 --> 00:05:18.760 align:start position:0%
sound through a microphone using low
 

00:05:18.760 --> 00:05:21.240 align:start position:0%
sound through a microphone using low
latency<00:05:19.180><c> input</c><00:05:19.600><c> streams</c><00:05:19.930><c> that's</c><00:05:20.740><c> all</c><00:05:20.950><c> for</c><00:05:21.100><c> now</c>

00:05:21.240 --> 00:05:21.250 align:start position:0%
latency input streams that's all for now
 

00:05:21.250 --> 00:05:24.800 align:start position:0%
latency input streams that's all for now
so<00:05:21.760><c> good</c><00:05:22.000><c> luck</c><00:05:22.150><c> and</c><00:05:22.480><c> go</c><00:05:22.870><c> make</c><00:05:23.050><c> some</c><00:05:23.230><c> noise</c>

00:05:24.800 --> 00:05:24.810 align:start position:0%
so good luck and go make some noise
 

00:05:24.810 --> 00:05:27.910 align:start position:0%
so good luck and go make some noise
[Music]

