WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
[MUSIC PLAYING]

00:00:05.000 --> 00:00:06.420
E JOHN FEIG: Hi, everyone.

00:00:06.420 --> 00:00:09.170
Welcome to Tools for Building
Better Smart Home Actions.

00:00:09.170 --> 00:00:11.810
I'm John, I lead the technical
solutions engineering team

00:00:11.810 --> 00:00:12.695
for smart home.

00:00:12.695 --> 00:00:14.150
GAURAV NOLKHA:
I'm Gaurav Nolkha.

00:00:14.150 --> 00:00:16.160
I'm a solutions
engineer on Smart Home

00:00:16.160 --> 00:00:19.788
and a lead on Local Home SDK
that was announced yesterday.

00:00:19.788 --> 00:00:20.580
E JOHN FEIG: Great.

00:00:20.580 --> 00:00:22.040
And over the last
two years, we've

00:00:22.040 --> 00:00:24.860
worked a lot of developers
building Smart Home Actions.

00:00:24.860 --> 00:00:27.600
And based on what we've
learned from working with you,

00:00:27.600 --> 00:00:30.920
we've put together some new
APIs, tools, and processes

00:00:30.920 --> 00:00:32.612
which we're going to
discuss here today.

00:00:32.612 --> 00:00:34.070
And don't forget
to use the hashtag

00:00:34.070 --> 00:00:39.860
#AoGDevs to share what you learn
about Google Assistant at I/O.

00:00:39.860 --> 00:00:43.575
So just to start off and remind
everybody what Smart Home is,

00:00:43.575 --> 00:00:45.700
there's this great quote
from somebody on the team.

00:00:45.700 --> 00:00:47.380
It's, "nobody likes
the light bulb

00:00:47.380 --> 00:00:49.460
that asks too many questions."

00:00:49.460 --> 00:00:52.540
And what this is about is just
that, Smart Home is kind of

00:00:52.540 --> 00:00:56.140
really focused on providing
concise grammar that's

00:00:56.140 --> 00:01:00.670
also unified and consistent
across different brands

00:01:00.670 --> 00:01:02.628
so that you get you have
one way of interacting

00:01:02.628 --> 00:01:05.045
with your devices, and one way
of talking to your devices.

00:01:05.045 --> 00:01:07.270
And you can actually control
many devices at once.

00:01:07.270 --> 00:01:09.730
So when I say,
turn on the lights,

00:01:09.730 --> 00:01:12.490
it turns on the lights
in my living room.

00:01:12.490 --> 00:01:14.310
Again, across brands.

00:01:14.310 --> 00:01:18.098
It treats plugs and
switches the same as lights,

00:01:18.098 --> 00:01:19.640
depending on the
name that I give it.

00:01:19.640 --> 00:01:22.870
And because HomeGraph
understands room context,

00:01:22.870 --> 00:01:26.230
types, and traits, it knows that
my Google Home is in the living

00:01:26.230 --> 00:01:28.090
room and my lights are
in the living room,

00:01:28.090 --> 00:01:30.423
and just to go ahead and turn
on the lights in that room

00:01:30.423 --> 00:01:31.930
when I say, turn on the lights.

00:01:31.930 --> 00:01:34.630
And you get all that
for free with Smart Home

00:01:34.630 --> 00:01:36.550
when you do a Smart
Home integration.

00:01:36.550 --> 00:01:42.970
You also get both a voice UI and
a graphical UI that we build.

00:01:42.970 --> 00:01:45.610
And you also have routines
that you can set up

00:01:45.610 --> 00:01:47.782
to do things like, if
you say good night,

00:01:47.782 --> 00:01:49.990
you can have it turn off
the lights, lock your doors,

00:01:49.990 --> 00:01:51.730
arm your security system.

00:01:51.730 --> 00:01:53.980
And that's all powered by
HomeGraph State, which we'll

00:01:53.980 --> 00:01:57.220
talk about a little bit later.

00:01:57.220 --> 00:01:59.970
GAURAV NOLKHA: To get
started with Actions,

00:01:59.970 --> 00:02:02.833
go to Actions on Google
console and this is your window

00:02:02.833 --> 00:02:05.250
to configuring your Actions,
whether it's the conversation

00:02:05.250 --> 00:02:06.948
Actions or Smart Home Actions.

00:02:06.948 --> 00:02:08.490
You're going to
create a new project,

00:02:08.490 --> 00:02:11.520
and if you're building
for a Smart Home Actions,

00:02:11.520 --> 00:02:14.100
make sure to select Home
Control and Smart Home tile.

00:02:14.100 --> 00:02:16.020
We've had some complaints
from developers

00:02:16.020 --> 00:02:18.810
about the discoverability
of Smart Home Actions,

00:02:18.810 --> 00:02:22.140
and since then we've improved
the experience on the console.

00:02:22.140 --> 00:02:24.060
And you're going to
do two main things,

00:02:24.060 --> 00:02:26.550
like provide the
fulfillment URL--

00:02:26.550 --> 00:02:28.580
which points to
your server where

00:02:28.580 --> 00:02:30.900
you're implementing
the smart home API.

00:02:30.900 --> 00:02:33.780
And you're going to
configure the account linking

00:02:33.780 --> 00:02:35.910
section, which is how--

00:02:35.910 --> 00:02:39.690
because we use OAuth to do the
account linking between Google

00:02:39.690 --> 00:02:43.100
Account and your account.

00:02:43.100 --> 00:02:43.900
E JOHN FEIG: Great.

00:02:43.900 --> 00:02:47.530
And just to give kind of a recap
of the architecture of what

00:02:47.530 --> 00:02:50.890
a Smart Home
integration looks like,

00:02:50.890 --> 00:02:54.400
this is a kind of a
helpful little visual here.

00:02:54.400 --> 00:02:57.820
So when you talk to your
Google Assistant surface--

00:02:57.820 --> 00:03:02.260
your phone, or your Google
Home, or your Google Nest hub--

00:03:02.260 --> 00:03:04.593
you'll say something
like, turn on the lights,

00:03:04.593 --> 00:03:06.010
that device will
send a message up

00:03:06.010 --> 00:03:08.163
to the Assistant
servers, which does

00:03:08.163 --> 00:03:10.330
the natural language
understanding and figuring out,

00:03:10.330 --> 00:03:12.663
like, from Home Graph what
devices you're talking about.

00:03:12.663 --> 00:03:15.807
And then it sends a
message to your cloud,

00:03:15.807 --> 00:03:17.890
which is then responsible
for sending that message

00:03:17.890 --> 00:03:20.057
down to the device to take
the action that you want.

00:03:20.057 --> 00:03:23.450
And then your device will
respond back up to your cloud,

00:03:23.450 --> 00:03:26.470
and then your cloud sends
the response to Google,

00:03:26.470 --> 00:03:28.750
and then Google sends that
response down to the device

00:03:28.750 --> 00:03:32.470
to speak out to the user if it
was a success or failure-- what

00:03:32.470 --> 00:03:33.440
happened.

00:03:33.440 --> 00:03:36.100
And this is broken into
three sets of APIs.

00:03:36.100 --> 00:03:38.630
The first is account linking,
which is done with OAuth2--

00:03:38.630 --> 00:03:41.870
you know, just the
standard OAuth2.

00:03:41.870 --> 00:03:44.170
And the thing to keep in
mind here that's a little bit

00:03:44.170 --> 00:03:47.830
different, is that you
are the OAuth provider

00:03:47.830 --> 00:03:50.100
and Google is the client.

00:03:50.100 --> 00:03:51.510
The next step is
a set of intents

00:03:51.510 --> 00:03:53.930
that go from Google Assistant
to your cloud, which

00:03:53.930 --> 00:03:55.910
are SYNC, QUERY, and EXECUTE.

00:03:55.910 --> 00:03:58.530
SYNC is basically where
you have an opportunity

00:03:58.530 --> 00:04:01.990
to tell Google about the
devices that the user has.

00:04:01.990 --> 00:04:04.110
So what types they
are, what traits,

00:04:04.110 --> 00:04:07.770
which is the functionality
that those devices enable.

00:04:07.770 --> 00:04:11.520
QUERY is when Google asks what
the state of your device is

00:04:11.520 --> 00:04:14.100
and you respond with
saying, the light's on,

00:04:14.100 --> 00:04:17.010
or the temperature
is set to 65 degrees.

00:04:17.010 --> 00:04:19.470
And EXECUTE is
basically Google asking

00:04:19.470 --> 00:04:22.230
you to take some action on a
device-- turn the lights on,

00:04:22.230 --> 00:04:25.090
set the temperature, turn on
the fan, something like that.

00:04:25.090 --> 00:04:28.680
And then the last two
APIs that are part of this

00:04:28.680 --> 00:04:32.380
are APIs that go from
your cloud to Google.

00:04:32.380 --> 00:04:34.450
And those are Report
State and Request Sync.

00:04:34.450 --> 00:04:37.140
Report State is when
you have the opportunity

00:04:37.140 --> 00:04:41.280
to proactively tell Google what
the state of your device is.

00:04:41.280 --> 00:04:43.890
And Request Sync is
when you tell Google

00:04:43.890 --> 00:04:47.190
that the device list needs
to be updated for the user.

00:04:47.190 --> 00:04:51.795
And we'll talk through what all
that stuff is in a little bit.

00:04:51.795 --> 00:04:53.880
GAURAV NOLKHA: So in
addition to the cloud

00:04:53.880 --> 00:04:56.520
part between assistant
and your server

00:04:56.520 --> 00:04:58.680
to implement the Smart
Home API, yesterday

00:04:58.680 --> 00:05:01.290
we announced Local Home SDK.

00:05:01.290 --> 00:05:04.560
This SDK allows
you, as developers,

00:05:04.560 --> 00:05:08.310
to run your JavaScript
on Google Home devices.

00:05:08.310 --> 00:05:10.770
And this JavaScript
contains the business logic

00:05:10.770 --> 00:05:13.110
to control your devices
and discover your devices

00:05:13.110 --> 00:05:15.430
in the user's local network.

00:05:15.430 --> 00:05:21.930
This local part allows us to
get faster execution and better

00:05:21.930 --> 00:05:23.430
reliability for
the whole system.

00:05:23.430 --> 00:05:26.430
Because if local part fails
for some reason, you do

00:05:26.430 --> 00:05:30.330
have the cloud as the
fallback available.

00:05:30.330 --> 00:05:31.080
E JOHN FEIG: Yeah.

00:05:31.080 --> 00:05:34.245
The Local Home SDK stuff
is really exciting.

00:05:34.245 --> 00:05:36.120
So here today, we're
going to talk about kind

00:05:36.120 --> 00:05:37.280
of three sets of things.

00:05:37.280 --> 00:05:40.260
So there's APIs,
tools, and processes.

00:05:40.260 --> 00:05:42.150
So APIs that we're
going to talk about

00:05:42.150 --> 00:05:45.750
are really here to help your
users have a better experience

00:05:45.750 --> 00:05:49.703
with the Smart Home interaction.

00:05:49.703 --> 00:05:51.370
The tools that we're
going to talk about

00:05:51.370 --> 00:05:53.710
are to help you in
your development.

00:05:53.710 --> 00:05:56.380
So things that might have been
a little difficult before or you

00:05:56.380 --> 00:05:58.660
didn't know about,
hopefully these things

00:05:58.660 --> 00:06:00.680
will make it a lot
easier as you're working.

00:06:00.680 --> 00:06:02.805
And then the process that
we're going to talk about

00:06:02.805 --> 00:06:06.080
is understanding the
submission process.

00:06:06.080 --> 00:06:09.140
And so let's get
started with APIs.

00:06:09.140 --> 00:06:11.120
We have a few sets of things--

00:06:11.120 --> 00:06:12.170
account linking.

00:06:12.170 --> 00:06:13.628
There's some new
stuff with account

00:06:13.628 --> 00:06:16.142
linking that we'll talk about,
which is really exciting.

00:06:16.142 --> 00:06:17.600
Request Sync, Report
State, that we

00:06:17.600 --> 00:06:20.240
mentioned a little bit ago,
and then also some security

00:06:20.240 --> 00:06:20.740
updates.

00:06:23.560 --> 00:06:25.730
GAURAV NOLKHA: So let's
talk to account linking.

00:06:25.730 --> 00:06:27.410
This is one of the
first interactions

00:06:27.410 --> 00:06:31.280
your users have with Google
in terms of your Smart Home

00:06:31.280 --> 00:06:32.970
Action.

00:06:32.970 --> 00:06:35.690
So a few days ago, I was
going through this myself.

00:06:35.690 --> 00:06:37.110
I will talk about that.

00:06:37.110 --> 00:06:39.260
So let's look at the quick flow.

00:06:39.260 --> 00:06:42.930
I opened the Google Home app,
and I selected the partner

00:06:42.930 --> 00:06:44.990
devices that I was
setting up, and I

00:06:44.990 --> 00:06:47.480
see the web view
where I am required

00:06:47.480 --> 00:06:49.220
to enter the
credentials and I accept

00:06:49.220 --> 00:06:52.340
the permission to allow Google
to control these devices.

00:06:52.340 --> 00:06:57.290
After that happened,
your server, your app,

00:06:57.290 --> 00:06:59.420
returns the code to Google.

00:06:59.420 --> 00:07:01.730
And Google servers exchange
that with an access

00:07:01.730 --> 00:07:03.110
and a refresh token.

00:07:03.110 --> 00:07:05.840
That access and
refresh token is used

00:07:05.840 --> 00:07:08.220
when Google's sends Sync,
Query, and Executing

00:07:08.220 --> 00:07:11.580
intent to your servers later.

00:07:11.580 --> 00:07:14.650
So a few days ago
when I was doing this,

00:07:14.650 --> 00:07:18.370
I downloaded the manufacturer
app, I set up these lights.

00:07:18.370 --> 00:07:21.910
After multiple screens,
I have this device set up

00:07:21.910 --> 00:07:26.350
and I'm able to control it
using the manufacturer app.

00:07:26.350 --> 00:07:29.380
And 15 seconds
later, I'm sweating.

00:07:29.380 --> 00:07:30.670
Why?

00:07:30.670 --> 00:07:34.660
I wanted to link these devices
to my Google Assistant,

00:07:34.660 --> 00:07:37.810
and I saw this page to enter
the username and password,

00:07:37.810 --> 00:07:39.910
and I had already forgotten.

00:07:39.910 --> 00:07:42.960
Well, some of you will
say that, that's not me.

00:07:42.960 --> 00:07:45.810
But we've seen our users
actually drop off on the Setup

00:07:45.810 --> 00:07:48.540
page, and it's a friction.

00:07:48.540 --> 00:07:52.530
Well the interesting thing
is, the other app is already

00:07:52.530 --> 00:07:54.690
on my phone and I'm logged in.

00:07:54.690 --> 00:07:55.740
So can we leverage that?

00:07:58.410 --> 00:07:59.790
E JOHN FEIG: Yes we can.

00:07:59.790 --> 00:08:03.850
Introducing App Flip,
which is coming soon.

00:08:03.850 --> 00:08:06.960
This is a really interesting
way to do account linking.

00:08:06.960 --> 00:08:11.640
And what we do is, instead
of launching into a web view

00:08:11.640 --> 00:08:13.980
to do the authorization
for OAuth,

00:08:13.980 --> 00:08:15.840
we actually use the
app that's already

00:08:15.840 --> 00:08:18.070
installed on the user's phone.

00:08:18.070 --> 00:08:20.940
So what happens is, you
start the Assistant,

00:08:20.940 --> 00:08:22.920
you go through that
list of actions again

00:08:22.920 --> 00:08:24.600
and you find the
one that you want.

00:08:24.600 --> 00:08:28.090
And when the user clicks on
it, we do a couple of things.

00:08:28.090 --> 00:08:33.059
First, we see if you've
registered your app for App

00:08:33.059 --> 00:08:35.409
Flip, and then we look
to see if that app is

00:08:35.409 --> 00:08:36.659
installed on the user's phone.

00:08:36.659 --> 00:08:38.220
And if those things
are true, then we

00:08:38.220 --> 00:08:40.620
can actually just launch
straight into your app

00:08:40.620 --> 00:08:43.770
and allow you to
authenticate your user.

00:08:43.770 --> 00:08:45.270
Hopefully the user
is already logged

00:08:45.270 --> 00:08:48.552
into the app on your
phone, and you can just

00:08:48.552 --> 00:08:50.760
use those credentials to go
get an authorization code

00:08:50.760 --> 00:08:52.870
and send it back.

00:08:52.870 --> 00:08:54.618
The other thing that
this is really great

00:08:54.618 --> 00:08:56.160
for is, it helps
with the disclosures

00:08:56.160 --> 00:08:59.010
and things like that in
the scope, to let people

00:08:59.010 --> 00:09:02.610
know like what you're
giving access to Google for.

00:09:02.610 --> 00:09:05.310
And then once you're ready, you
click the button in your app

00:09:05.310 --> 00:09:07.132
and it goes back to Google.

00:09:07.132 --> 00:09:09.520
And again, this just replaces
the authorization leg

00:09:09.520 --> 00:09:10.300
of the OAuth flow.

00:09:10.300 --> 00:09:11.780
The rest of OAuth
stays the same.

00:09:11.780 --> 00:09:15.610
So once you get a token back--

00:09:15.610 --> 00:09:19.300
so here, once you return
the authorization code back

00:09:19.300 --> 00:09:22.480
to Google, we do the
server to server exchange.

00:09:22.480 --> 00:09:25.445
And like I said, so this
is exactly the same flow.

00:09:25.445 --> 00:09:26.570
The diagram looks the same.

00:09:26.570 --> 00:09:28.070
The only difference
is that, instead

00:09:28.070 --> 00:09:31.210
of launching out to the web,
we're working within your app.

00:09:31.210 --> 00:09:33.540
And so you have a
little bit more control

00:09:33.540 --> 00:09:36.040
in terms of how you want to do
that authentication, as well.

00:09:38.790 --> 00:09:41.460
So how does this work?

00:09:41.460 --> 00:09:45.810
We use Intents on Android, and
on iOS we use Universal Links.

00:09:45.810 --> 00:09:49.010
And this is just the basic way
to do interapp communication

00:09:49.010 --> 00:09:50.550
on these platforms.

00:09:50.550 --> 00:09:53.720
And so let's look a
little bit of code.

00:09:53.720 --> 00:09:59.000
For Android, Google will
send an intent into your app,

00:09:59.000 --> 00:10:01.970
launching the intent with
StartActivityForResult, which

00:10:01.970 --> 00:10:05.240
means that, basically, once you
finish there's an intent that

00:10:05.240 --> 00:10:07.070
gets sent back to Google.

00:10:07.070 --> 00:10:09.380
And so the intent
that goes to you

00:10:09.380 --> 00:10:13.800
gets handled in your
activity onCreate method.

00:10:13.800 --> 00:10:17.040
And there's some important
intent extras that come in.

00:10:17.040 --> 00:10:21.072
So there's Client ID
and Optionally Scope.

00:10:21.072 --> 00:10:23.030
And you'll want to pull
out at least the Client

00:10:23.030 --> 00:10:25.280
ID to do a validation.

00:10:25.280 --> 00:10:27.860
And what you can do is, you
can validate both the Client

00:10:27.860 --> 00:10:29.810
ID as well as the
package signature

00:10:29.810 --> 00:10:31.587
from the incoming intent.

00:10:31.587 --> 00:10:33.920
And you'll want to do this
because you want to make sure

00:10:33.920 --> 00:10:35.462
that it's actually
Google calling you

00:10:35.462 --> 00:10:38.530
and not some random phishing
app that's installed.

00:10:38.530 --> 00:10:41.030
And so once you've done that,
you verified that it's Google,

00:10:41.030 --> 00:10:43.020
you can call your
off OAuth backend.

00:10:43.020 --> 00:10:46.970
And you'll want to do this,
and send the Client ID along,

00:10:46.970 --> 00:10:49.850
to make sure that there's a
record created in your backend

00:10:49.850 --> 00:10:52.610
with that authorization code,
so that when Google does

00:10:52.610 --> 00:10:54.680
the token exchange
later on there's

00:10:54.680 --> 00:10:58.263
a valid code for this
user in your database.

00:10:58.263 --> 00:10:59.930
And so once you've
done that, and you've

00:10:59.930 --> 00:11:01.790
gotten a code back
from your server,

00:11:01.790 --> 00:11:03.980
you can create a new
Intent that you're

00:11:03.980 --> 00:11:05.630
going to send back to Google.

00:11:05.630 --> 00:11:06.903
You'll add a couple extras.

00:11:06.903 --> 00:11:09.320
One is Response Type, which
you set to Authorization Code.

00:11:09.320 --> 00:11:12.018
And the other is the actual
authorization code itself.

00:11:12.018 --> 00:11:14.060
You'll want to make sure
to set the result to OK,

00:11:14.060 --> 00:11:15.950
and then you're to
launch back in to Google.

00:11:19.060 --> 00:11:23.490
On iOS, its Universal Links, and
it is even more straightforward

00:11:23.490 --> 00:11:25.810
just to look at just a
couple of links here.

00:11:25.810 --> 00:11:29.580
So the first one is the link
that launches into your app

00:11:29.580 --> 00:11:31.182
from Google.

00:11:31.182 --> 00:11:33.390
So you own this Universal
Link and you'll register it

00:11:33.390 --> 00:11:34.980
with Apple just like you do.

00:11:34.980 --> 00:11:38.310
And there will be several
query parameters that come in.

00:11:38.310 --> 00:11:40.800
The Client ID--
same as on Android--

00:11:40.800 --> 00:11:45.000
Scopes-- which you set in the
actions of Google console--

00:11:45.000 --> 00:11:48.660
the State-- which is a string
that you just respond back

00:11:48.660 --> 00:11:50.748
the identical string when
you give your response--

00:11:50.748 --> 00:11:51.790
and then a redirect URI--

00:11:54.510 --> 00:11:56.700
that's the universal
link for Google

00:11:56.700 --> 00:11:58.980
that you're going to use
to launch back to Google.

00:11:58.980 --> 00:12:01.210
And here, instead of
a package signature,

00:12:01.210 --> 00:12:03.750
you can actually validate
the redirect URI as well as

00:12:03.750 --> 00:12:05.940
the client ID.

00:12:05.940 --> 00:12:08.280
You know, again, do the
same validation on iOS

00:12:08.280 --> 00:12:09.820
using those couple of things.

00:12:09.820 --> 00:12:11.278
And then once you've
done that, you

00:12:11.278 --> 00:12:12.780
can call your
OAuth backend again

00:12:12.780 --> 00:12:15.720
with your user credentials
that are already

00:12:15.720 --> 00:12:18.270
stored in the app, as
well as the Client ID.

00:12:18.270 --> 00:12:21.640
Once you get an authorization
code back from your servers,

00:12:21.640 --> 00:12:23.700
then you can respond
back to Google

00:12:23.700 --> 00:12:28.150
using Google's URI that was
provided in the redirect URI.

00:12:28.150 --> 00:12:30.150
And again, the authorization
code and the state.

00:12:32.973 --> 00:12:35.140
GAURAV NOLKHA: So now we're
happy with those lights,

00:12:35.140 --> 00:12:37.540
and we get new lights from
the same manufacturer.

00:12:37.540 --> 00:12:40.480
And I go to the same app and
I set up these new lights.

00:12:40.480 --> 00:12:42.450
And just like last
time, we do the Setup

00:12:42.450 --> 00:12:45.250
and now I'm able to control
the lights from the app.

00:12:45.250 --> 00:12:48.190
But the great thing was,
I am immediately also

00:12:48.190 --> 00:12:51.030
able to control it
from Google Assistant.

00:12:51.030 --> 00:12:52.590
How did that happen?

00:12:52.590 --> 00:12:56.550
That brings us to Request Sync.

00:12:56.550 --> 00:13:00.650
So when your cloud sees-- a
change in Users Devices List,

00:13:00.650 --> 00:13:04.650
or if you add really new
capabilities to your devices,

00:13:04.650 --> 00:13:07.460
you let HomeGraph know that,
for this particular user,

00:13:07.460 --> 00:13:10.590
something has changed.

00:13:10.590 --> 00:13:12.290
That's the requesting API.

00:13:12.290 --> 00:13:14.660
And at that point,
HomeGraph calls back

00:13:14.660 --> 00:13:17.930
the same Sync Intent that
happened the first time

00:13:17.930 --> 00:13:19.770
the user had linked.

00:13:19.770 --> 00:13:22.550
So the good effect
is, the user didn't

00:13:22.550 --> 00:13:24.620
have to do any
account linking again.

00:13:24.620 --> 00:13:27.740
And assistant now knows
about the new devices,

00:13:27.740 --> 00:13:29.060
so the user can go and control.

00:13:29.060 --> 00:13:31.520
And this really provides a
very good user experience

00:13:31.520 --> 00:13:33.230
for your users
who actually chose

00:13:33.230 --> 00:13:36.907
to buy new devices from you.

00:13:36.907 --> 00:13:38.740
So let's look at the
code command equivalent

00:13:38.740 --> 00:13:40.132
of what happens here.

00:13:40.132 --> 00:13:40.840
It's very simple.

00:13:40.840 --> 00:13:43.210
You let us know the
agent user ID that

00:13:43.210 --> 00:13:46.990
is affected with the change
in the Device's List,

00:13:46.990 --> 00:13:49.750
and you specify the
API key that you

00:13:49.750 --> 00:13:53.540
get from Google Cloud console
and call the HomeGraph Request

00:13:53.540 --> 00:13:54.160
Sync API.

00:13:58.510 --> 00:14:00.336
And there.

00:14:00.336 --> 00:14:01.230
E JOHN FEIG: Great.

00:14:01.230 --> 00:14:03.440
And now let's talk a little
bit about Report State.

00:14:03.440 --> 00:14:05.090
Report State, as
we mentioned, is

00:14:05.090 --> 00:14:07.880
when you proactively send
the state of your devices

00:14:07.880 --> 00:14:08.420
to Google.

00:14:08.420 --> 00:14:10.760
So every time a user
switches on a light,

00:14:10.760 --> 00:14:14.000
you send this API to
Google letting us know

00:14:14.000 --> 00:14:16.250
that that light is turned on.

00:14:16.250 --> 00:14:18.530
If the user changes
the thermostat,

00:14:18.530 --> 00:14:21.140
you send that State.

00:14:21.140 --> 00:14:25.240
And the State data in
HomeGraph is ephemeral.

00:14:25.240 --> 00:14:28.340
And so why does
Google need this?

00:14:28.340 --> 00:14:30.170
And the answer is
Touch Controls.

00:14:30.170 --> 00:14:32.700
So we have smart displays
and the Google Home

00:14:32.700 --> 00:14:37.240
app that have graphical
controls for your devices.

00:14:37.240 --> 00:14:40.637
And basically, to be able
to draw that control,

00:14:40.637 --> 00:14:42.970
we need to know what the State
is so that we can draw it

00:14:42.970 --> 00:14:44.718
appropriately.

00:14:44.718 --> 00:14:46.510
And the Report State
API gives us the State

00:14:46.510 --> 00:14:49.630
that we need to be able to
draw accurate and responsive

00:14:49.630 --> 00:14:50.320
controls.

00:14:50.320 --> 00:14:52.430
Let's look at a
couple of examples.

00:14:52.430 --> 00:14:56.560
So here we have the Google Nest
hub as well as the Home app,

00:14:56.560 --> 00:14:59.865
and you can see some
controls getting pulled up.

00:14:59.865 --> 00:15:01.240
These are two
different surfaces,

00:15:01.240 --> 00:15:03.032
they're convenient in
different situations.

00:15:03.032 --> 00:15:06.100
But both are showing
the ability to control

00:15:06.100 --> 00:15:09.730
a group of devices which might
be even different brands.

00:15:09.730 --> 00:15:11.380
And so this is a
really great way

00:15:11.380 --> 00:15:13.870
to do interactions for users.

00:15:13.870 --> 00:15:17.140
And what happens, though,
is that if you don't provide

00:15:17.140 --> 00:15:20.140
the State via Report
State, instead of getting

00:15:20.140 --> 00:15:24.490
the nice graphical control,
what the user sees immediately

00:15:24.490 --> 00:15:28.240
is a spinning dial while
we query for the State.

00:15:28.240 --> 00:15:33.720
And it's really kind of
a jarring experience.

00:15:33.720 --> 00:15:35.993
And so implementing this
is fairly straightforward.

00:15:35.993 --> 00:15:38.160
There's just a few steps
to get Report State working

00:15:38.160 --> 00:15:39.410
that you need to do.

00:15:39.410 --> 00:15:41.430
The first-- which is
just a one time thing--

00:15:41.430 --> 00:15:44.820
is to go enable
the HomeGraph API.

00:15:44.820 --> 00:15:47.970
And then you'll create a service
account key, which is just

00:15:47.970 --> 00:15:50.580
a one time thing, again.

00:15:50.580 --> 00:15:53.340
And then at runtime
in your service,

00:15:53.340 --> 00:15:58.200
you'll generate a JSON
Web Token, or JWT,

00:15:58.200 --> 00:16:01.140
which is a verifiable method
of representing claims securely

00:16:01.140 --> 00:16:03.630
between two party servers.

00:16:03.630 --> 00:16:06.720
And then you'll create a
Report State JSON payload

00:16:06.720 --> 00:16:08.600
and you'll call the API.

00:16:08.600 --> 00:16:12.350
Now let's walk through each of
these a little bit of detail.

00:16:12.350 --> 00:16:14.240
So to enable the
HomeGraph API, you'll

00:16:14.240 --> 00:16:18.140
just go to the Google Cloud
console, select your project,

00:16:18.140 --> 00:16:22.070
and then under the APIs and
services, you'll go to Library

00:16:22.070 --> 00:16:26.080
and search for HomeGraph
API and click Enable.

00:16:26.080 --> 00:16:27.402
Pretty straightforward.

00:16:27.402 --> 00:16:29.110
The next-- again, this
is just a one time

00:16:29.110 --> 00:16:32.080
thing-- is you would generate
a service account key.

00:16:32.080 --> 00:16:34.600
And here, again, in the
APIs and services section,

00:16:34.600 --> 00:16:38.050
you'll dropdown to Credentials
from Library, where you were.

00:16:38.050 --> 00:16:42.580
And you'll click the
Create Credentials button

00:16:42.580 --> 00:16:44.860
and you'll just go through
the steps to create that.

00:16:44.860 --> 00:16:47.538
We recommend JSON type because
it's a little bit easier

00:16:47.538 --> 00:16:48.080
to work with.

00:16:50.508 --> 00:16:52.550
GAURAV NOLKHA: So now that
your server has access

00:16:52.550 --> 00:16:54.680
to your service
account key and we

00:16:54.680 --> 00:16:57.620
have to call the repository
notification API to let

00:16:57.620 --> 00:16:59.840
HomeGraph know of
this change in State.

00:16:59.840 --> 00:17:01.370
We will need two things.

00:17:01.370 --> 00:17:04.609
First is a token to
communicate with HomeGraph,

00:17:04.609 --> 00:17:06.540
and second is the payload.

00:17:06.540 --> 00:17:08.960
So let's look at the first one.

00:17:08.960 --> 00:17:13.000
So to create the token for
Google to verify your service,

00:17:13.000 --> 00:17:14.380
we need a few things.

00:17:14.380 --> 00:17:17.369
First is iss.

00:17:17.369 --> 00:17:20.550
This is a service account email
which you can get from the JSON

00:17:20.550 --> 00:17:22.079
that you downloaded.

00:17:22.079 --> 00:17:24.973
The scope and audience will
remain same, pretty much,

00:17:24.973 --> 00:17:26.640
because you're calling
the HomeGraph API

00:17:26.640 --> 00:17:29.640
and you need to get the token.

00:17:29.640 --> 00:17:34.560
Secondly, iat, the current time
is what you will specify here.

00:17:34.560 --> 00:17:38.190
And you have to make sure
that the expiry is typically

00:17:38.190 --> 00:17:40.090
an hour from the current time.

00:17:40.090 --> 00:17:42.460
And this is
specified in seconds.

00:17:42.460 --> 00:17:44.280
Once you have this
information handy,

00:17:44.280 --> 00:17:47.400
there are libraries available in
pretty much all the server site

00:17:47.400 --> 00:17:49.210
languages that are out there.

00:17:49.210 --> 00:17:51.720
So check out JWT.IO
for more information

00:17:51.720 --> 00:17:53.880
about the libraries for
your specific platform

00:17:53.880 --> 00:17:54.982
and framework.

00:17:54.982 --> 00:17:56.940
And you should be able
to take this information

00:17:56.940 --> 00:17:58.680
and generate the token.

00:17:58.680 --> 00:18:00.810
And finally, you
make sure that you

00:18:00.810 --> 00:18:03.120
sign this token with
the private key that's

00:18:03.120 --> 00:18:04.350
in the service account JSON.

00:18:06.940 --> 00:18:11.000
So now that we have the token,
let's look at the payload.

00:18:11.000 --> 00:18:13.750
So when the device
changes state,

00:18:13.750 --> 00:18:17.470
and it lets your cloud
know of this new state,

00:18:17.470 --> 00:18:20.020
you're going to create
this JSON payload.

00:18:20.020 --> 00:18:23.830
And you see here, we
have the agent user ID

00:18:23.830 --> 00:18:27.860
for which this device list
has changed its state.

00:18:27.860 --> 00:18:30.230
And then we have
two devices here.

00:18:30.230 --> 00:18:32.140
The first one is
on, and it's online.

00:18:32.140 --> 00:18:33.270
And the second one--

00:18:33.270 --> 00:18:35.290
probably a lock or a door--

00:18:35.290 --> 00:18:36.010
and it's locked.

00:18:36.010 --> 00:18:38.230
So you specify this JSON.

00:18:38.230 --> 00:18:40.360
And finally, let's
call the Report State

00:18:40.360 --> 00:18:42.850
in notification API.

00:18:42.850 --> 00:18:45.520
And let's take a look at this
in the form of a curl command,

00:18:45.520 --> 00:18:47.270
which is very straightforward.

00:18:47.270 --> 00:18:49.720
The token goes into the
authorization header

00:18:49.720 --> 00:18:53.920
as a Bearer token, and the body
becomes the Report State JSON

00:18:53.920 --> 00:18:55.820
payload that we just created.

00:18:55.820 --> 00:18:58.540
And you make a simple post
called, to the HomeGraph Report

00:18:58.540 --> 00:19:00.430
State and Notification API.

00:19:00.430 --> 00:19:01.180
And that's it.

00:19:01.180 --> 00:19:04.753
At that point, all your smart
displays, visual displays,

00:19:04.753 --> 00:19:06.670
and Google Home app
should show you the latest

00:19:06.670 --> 00:19:10.265
state for your devices.

00:19:10.265 --> 00:19:11.888
E JOHN FEIG: All right.

00:19:11.888 --> 00:19:14.180
So next we're going to talk
about enabling security use

00:19:14.180 --> 00:19:16.880
cases for Smart Home
with Google Assistant.

00:19:16.880 --> 00:19:18.260
How are we going to do that?

00:19:18.260 --> 00:19:22.140
Well, we're going to two
factor authentication, or 2FA.

00:19:22.140 --> 00:19:24.850
2FA is basically a
second factor validation,

00:19:24.850 --> 00:19:26.600
something like a pin
or an acknowledgment.

00:19:26.600 --> 00:19:29.540
And it's used to make sure that
the person making the request

00:19:29.540 --> 00:19:31.650
is actually authorized to do so.

00:19:31.650 --> 00:19:33.390
And so why is this important?

00:19:33.390 --> 00:19:35.420
Well, we heard your
feedback and you

00:19:35.420 --> 00:19:38.810
wanted to be able to enable
Smart Home on devices

00:19:38.810 --> 00:19:43.010
like locks, or security cameras,
security systems, or even

00:19:43.010 --> 00:19:45.590
windows.

00:19:45.590 --> 00:19:47.690
We launched a couple of
new traits this week--

00:19:47.690 --> 00:19:49.940
lock-unlock and
arm-disarm-- that 2FA

00:19:49.940 --> 00:19:52.310
is really, really useful for.

00:19:52.310 --> 00:19:55.160
And the neat thing is
that all of your devices,

00:19:55.160 --> 00:19:59.030
any interaction for EXECUTE
and QUERY, can use 2FA.

00:19:59.030 --> 00:20:01.160
So if you have something
that you want to protect,

00:20:01.160 --> 00:20:03.410
your want to make sure that
there's an acknowledgment,

00:20:03.410 --> 00:20:04.293
you can do that.

00:20:04.293 --> 00:20:05.960
And the other thing
to keep in mind here

00:20:05.960 --> 00:20:08.690
is that, for
pin-type protections,

00:20:08.690 --> 00:20:10.400
you actually own the pin.

00:20:10.400 --> 00:20:12.470
So it's owned in
your service, you

00:20:12.470 --> 00:20:14.458
can change it as frequently
as you want-- even

00:20:14.458 --> 00:20:16.250
on every interaction
if you really want to.

00:20:18.900 --> 00:20:21.580
So let's look at a couple
of different examples of how

00:20:21.580 --> 00:20:22.080
this works.

00:20:22.080 --> 00:20:26.150
So the first is No
challenge, which is basically

00:20:26.150 --> 00:20:29.010
the same is a normal
interaction where you say,

00:20:29.010 --> 00:20:30.350
OK, G, turn on the lights.

00:20:30.350 --> 00:20:33.353
And assistant says, OK,
turning on three lights.

00:20:33.353 --> 00:20:34.520
The second is an Ack needed.

00:20:34.520 --> 00:20:36.800
And this is where you might need
some sort of acknowledgment.

00:20:36.800 --> 00:20:38.030
You just want to make
sure that this is really

00:20:38.030 --> 00:20:39.450
what the user wants to do.

00:20:39.450 --> 00:20:41.420
And in case, the users ask
you to heat up the living room

00:20:41.420 --> 00:20:42.450
to 100 degrees.

00:20:42.450 --> 00:20:44.990
Which your service might get
that request and say, like,

00:20:44.990 --> 00:20:45.950
that's pretty warm.

00:20:45.950 --> 00:20:48.860
That's really outside our range
of what we'd recommend a room

00:20:48.860 --> 00:20:50.552
to be, but we can do that.

00:20:50.552 --> 00:20:52.760
And so you might want an
acknowledgment here and just

00:20:52.760 --> 00:20:54.290
ask the user, are you sure?

00:20:54.290 --> 00:20:57.400
And the user says, yes, and then
you can go ahead and do that.

00:20:57.400 --> 00:20:59.640
And finally, we have
Pin needed, which

00:20:59.640 --> 00:21:03.120
is asking Google
to unlock the door.

00:21:03.120 --> 00:21:06.570
And here we want a little bit
more than just a confirmation,

00:21:06.570 --> 00:21:08.980
so we ask for a security code
and the user provides that.

00:21:08.980 --> 00:21:12.570
And then once you have
a code that's correct,

00:21:12.570 --> 00:21:14.160
they can go ahead
and unlock the door.

00:21:14.160 --> 00:21:17.640
And you can actually see this
in practice in our sandbox

00:21:17.640 --> 00:21:19.980
with a cookie jar that's
protected by two factor

00:21:19.980 --> 00:21:22.622
authentication to
keep the kids out.

00:21:22.622 --> 00:21:24.580
GAURAV NOLKHA: Yeah,
definitely check that out.

00:21:24.580 --> 00:21:26.205
It's cooler than the
code, but the code

00:21:26.205 --> 00:21:27.710
is very simple as well.

00:21:27.710 --> 00:21:28.900
So let's take a look.

00:21:28.900 --> 00:21:31.990
So typically, when the user
wanted to control a device,

00:21:31.990 --> 00:21:34.630
we send an EXECUTE Intent
to your server, right.

00:21:34.630 --> 00:21:36.790
And without two
factor authentication,

00:21:36.790 --> 00:21:38.350
your server returns
a success if it's

00:21:38.350 --> 00:21:40.180
able to control the device.

00:21:40.180 --> 00:21:43.660
But for this case, if you wanted
to implement the two factor

00:21:43.660 --> 00:21:46.870
authentication, you would
return an error back to Google

00:21:46.870 --> 00:21:48.730
for that EXECUTE response.

00:21:48.730 --> 00:21:52.070
And this error as the status.

00:21:52.070 --> 00:21:54.380
And the error code will
be Challenge needed.

00:21:54.380 --> 00:21:56.240
And one important
thing you're to specify

00:21:56.240 --> 00:21:59.510
is which type of
challenge you need.

00:21:59.510 --> 00:22:02.910
It could be Pin or
it could be Ack.

00:22:02.910 --> 00:22:06.090
So at that point assistant
will announce it to the user

00:22:06.090 --> 00:22:09.300
and either ask for
an Ack or a Pin.

00:22:09.300 --> 00:22:13.570
And now Google calls another
EXECUTE intent to your server.

00:22:13.570 --> 00:22:16.650
And in this case, the
pin will be specified

00:22:16.650 --> 00:22:18.090
in the EXECUTE intent.

00:22:18.090 --> 00:22:20.560
So pretty straightforward.

00:22:20.560 --> 00:22:22.440
Pretty much exactly
how you do an EXECUTE

00:22:22.440 --> 00:22:24.510
and Process and EXECUTE intent.

00:22:24.510 --> 00:22:27.400
But this time it has the pin,
your server validates it,

00:22:27.400 --> 00:22:32.812
and if it is a valid pin, takes
the action that user requested.

00:22:32.812 --> 00:22:33.770
E JOHN FEIG: All right.

00:22:33.770 --> 00:22:35.280
Let's move on to Tools.

00:22:35.280 --> 00:22:38.840
So these Tools are
here to help you

00:22:38.840 --> 00:22:40.430
in your development
of Smart Home.

00:22:40.430 --> 00:22:42.290
And we developed a
lot of these, really,

00:22:42.290 --> 00:22:44.925
based on our experience
supporting you

00:22:44.925 --> 00:22:46.550
in your development
as well as feedback

00:22:46.550 --> 00:22:48.955
that we've gotten directly.

00:22:48.955 --> 00:22:50.830
And the first thing
we're going to talk about

00:22:50.830 --> 00:22:54.010
is a brand new tool that is
called the Smart Home Test

00:22:54.010 --> 00:22:54.850
Suite.

00:22:54.850 --> 00:22:58.330
And this is something that
we very recently launched,

00:22:58.330 --> 00:23:01.820
and it addresses
this major problem

00:23:01.820 --> 00:23:04.000
that people have had
when wanting to go

00:23:04.000 --> 00:23:05.270
live with their actions.

00:23:05.270 --> 00:23:06.770
The end of development,
you're done,

00:23:06.770 --> 00:23:09.550
you want to publish
it make it available,

00:23:09.550 --> 00:23:11.800
which is that previously,
we required devices

00:23:11.800 --> 00:23:13.690
to be shipped for certification.

00:23:13.690 --> 00:23:18.760
And now we realize that this
is hard for a lot of people.

00:23:18.760 --> 00:23:20.410
Shipping devices
is expensive, it's

00:23:20.410 --> 00:23:22.252
easy to miss those
emails back-and-forth.

00:23:22.252 --> 00:23:24.460
The process was a bit opaque
and there were sometimes

00:23:24.460 --> 00:23:25.660
multiple rounds of testing.

00:23:25.660 --> 00:23:27.243
And especially if
you're international

00:23:27.243 --> 00:23:28.667
and had to deal with customs.

00:23:28.667 --> 00:23:30.250
And so what we're
doing here is, we're

00:23:30.250 --> 00:23:32.800
actually giving you
control over the process.

00:23:32.800 --> 00:23:34.300
You can test from
your desk, there's

00:23:34.300 --> 00:23:36.340
no need to ship devices.

00:23:36.340 --> 00:23:38.650
And it helps to give
you clarity and insight

00:23:38.650 --> 00:23:43.150
into the certification testing.

00:23:43.150 --> 00:23:44.208
So how does this work?

00:23:44.208 --> 00:23:45.750
Well, the basic flow
is that you will

00:23:45.750 --> 00:23:49.450
start by developing an action.

00:23:49.450 --> 00:23:50.950
You just kind of
need the bare bones

00:23:50.950 --> 00:23:52.680
to make one thing work, right.

00:23:52.680 --> 00:23:55.980
So you'll do OAuth,
SYNC, EXECUTE, and Report

00:23:55.980 --> 00:23:58.740
State for at least making
sure that one thing

00:23:58.740 --> 00:24:00.822
end-to-end works.

00:24:00.822 --> 00:24:02.280
And then after
that, you'll account

00:24:02.280 --> 00:24:05.080
link your developer account and
make sure that you can use it.

00:24:05.080 --> 00:24:06.900
So just do a smoke
test, make sure

00:24:06.900 --> 00:24:09.900
that you can turn on
your light or something.

00:24:09.900 --> 00:24:12.960
Next, you'll set up a Google
Home right next your computer

00:24:12.960 --> 00:24:15.147
and crank up your
speaker's volume,

00:24:15.147 --> 00:24:16.480
or you can put headphones on it.

00:24:16.480 --> 00:24:19.170
And the reason is because
the test tool actually

00:24:19.170 --> 00:24:20.330
generates TTS.

00:24:20.330 --> 00:24:23.340
It generates commands that
say, OK, G, turn on the lights.

00:24:23.340 --> 00:24:25.350
And the Google will
pick it up and then

00:24:25.350 --> 00:24:27.440
try to take that action.

00:24:27.440 --> 00:24:30.220
So it's kind of a cool
end-to-end test like that.

00:24:30.220 --> 00:24:32.130
And so then you can load
the tool and run it.

00:24:32.130 --> 00:24:33.180
And you can actually
run this tool

00:24:33.180 --> 00:24:35.180
as much as you want while
you're in development.

00:24:35.180 --> 00:24:37.950
And it's great for
test-driven development

00:24:37.950 --> 00:24:41.280
because we don't send the
results from the tool back

00:24:41.280 --> 00:24:43.177
to Google until you're ready.

00:24:43.177 --> 00:24:44.760
And then when you
are ready to launch,

00:24:44.760 --> 00:24:48.690
you can use a form linked in
the Tool to submit your results.

00:24:50.953 --> 00:24:52.870
So another thing that's
really cool about this

00:24:52.870 --> 00:24:54.560
is that it's only
in the browser.

00:24:54.560 --> 00:24:56.140
This is a browser-based tool.

00:24:56.140 --> 00:24:57.550
It doesn't send
results to Google

00:24:57.550 --> 00:25:01.057
until you submit that form.

00:25:01.057 --> 00:25:03.640
And so with that, we do need a
couple of pieces of information

00:25:03.640 --> 00:25:04.750
to make this run.

00:25:04.750 --> 00:25:07.510
We'll request the
agent user ID so

00:25:07.510 --> 00:25:11.800
that we can identify which
specific user to pick out

00:25:11.800 --> 00:25:13.720
and the service account key.

00:25:13.720 --> 00:25:17.560
And these two things are
needed for a HomeGraph API that

00:25:17.560 --> 00:25:20.530
will allow you to pull
devices that you own,

00:25:20.530 --> 00:25:24.040
and you own the service
to, out of HomeGraph.

00:25:24.040 --> 00:25:27.310
And we basically use the same
mechanism for this test suite

00:25:27.310 --> 00:25:29.400
as well as the another
tool that Gaurav

00:25:29.400 --> 00:25:31.370
will talk about in a minute.

00:25:31.370 --> 00:25:33.370
And once you've provided
those couple of things,

00:25:33.370 --> 00:25:35.628
the project ID should just
get filled in automatically

00:25:35.628 --> 00:25:37.420
if you provide a valid
service account key.

00:25:41.000 --> 00:25:44.180
Next we do a HomeGraph
Sync, and we ask HomeGraph

00:25:44.180 --> 00:25:47.120
to get that user's devices.

00:25:47.120 --> 00:25:49.850
And in this case, we get
a light with the traits

00:25:49.850 --> 00:25:55.220
on, off, and brightness.

00:25:55.220 --> 00:25:58.910
And then once we have the
device, we can click Next,

00:25:58.910 --> 00:26:00.590
and the tool will
just automatically

00:26:00.590 --> 00:26:03.110
generate the test cases based
on the device types and traits

00:26:03.110 --> 00:26:06.140
that you've synced.

00:26:06.140 --> 00:26:08.550
Next you can see
it start running,

00:26:08.550 --> 00:26:10.680
and it'll just speak
out the commands,

00:26:10.680 --> 00:26:12.750
and it'll go to the
Google Home, and then

00:26:12.750 --> 00:26:13.990
the whole thing will happen.

00:26:13.990 --> 00:26:15.990
And you'll Report State
back, and we can pick up

00:26:15.990 --> 00:26:19.330
those Reported State events.

00:26:19.330 --> 00:26:23.130
And you can see the progress--
where it is in the test--

00:26:23.130 --> 00:26:24.810
as well as in the
log area, you can

00:26:24.810 --> 00:26:27.720
see if the tests are
passing or failing,

00:26:27.720 --> 00:26:28.720
which is really helpful.

00:26:28.720 --> 00:26:31.625
And then once you're done--

00:26:31.625 --> 00:26:33.000
and if you have
any failures, you

00:26:33.000 --> 00:26:35.460
can open up a spreadsheet
that gets generated,

00:26:35.460 --> 00:26:38.530
and look exactly where, OK,
these tests were passing

00:26:38.530 --> 00:26:40.260
and then this one
was a failure--

00:26:40.260 --> 00:26:42.270
and see why it failed.

00:26:42.270 --> 00:26:45.030
And so we tell you, here's
the results that we expected,

00:26:45.030 --> 00:26:47.130
and here's what you
gave us, and that's

00:26:47.130 --> 00:26:48.810
where the discrepancy
is, so that you

00:26:48.810 --> 00:26:52.750
can very easily go and fix
that and rerun the test.

00:26:52.750 --> 00:26:54.250
And then once you're
done with that,

00:26:54.250 --> 00:26:57.900
you can just submit your results
in the form that's linked

00:26:57.900 --> 00:27:00.376
and you're good to go.

00:27:00.376 --> 00:27:03.140
GAURAV NOLKHA: So this is
great, because integration tests

00:27:03.140 --> 00:27:03.890
can be hard.

00:27:03.890 --> 00:27:05.630
And especially now
this involves voice,

00:27:05.630 --> 00:27:07.158
your server, your devices.

00:27:07.158 --> 00:27:08.450
So you really want to use that.

00:27:08.450 --> 00:27:10.880
And I use that, personally,
for the new traits that I

00:27:10.880 --> 00:27:12.680
am working with these days.

00:27:12.680 --> 00:27:13.280
It's amazing.

00:27:13.280 --> 00:27:14.180
Check it out.

00:27:14.180 --> 00:27:16.775
So, OK, moving on to
Report State tool.

00:27:16.775 --> 00:27:19.400
Now one of the things that John
mentioned about Smart Home Test

00:27:19.400 --> 00:27:22.070
Suite is that it relies on
Report State working so it

00:27:22.070 --> 00:27:24.920
can check the state properly.

00:27:24.920 --> 00:27:27.080
But what if Report
State is not working?

00:27:27.080 --> 00:27:31.080
So here's a tool that'll
help you do that.

00:27:31.080 --> 00:27:34.400
So we again need the same two
key information-- the agent

00:27:34.400 --> 00:27:36.800
user ID and the
service account key.

00:27:36.800 --> 00:27:39.080
Based on this information,
we can query HomeGraph,

00:27:39.080 --> 00:27:42.290
get the state of the
devices that HomeGraph sees,

00:27:42.290 --> 00:27:45.170
and if there is a discrepancy
between what HomeGraph sees

00:27:45.170 --> 00:27:49.470
and what your server is seeing,
some debugging may be in order.

00:27:49.470 --> 00:27:51.650
So this is a tool that
gives you a view into what

00:27:51.650 --> 00:27:53.290
HomeGraph is able to see.

00:27:53.290 --> 00:27:55.600
After you fix the issues
with Report State,

00:27:55.600 --> 00:28:00.265
you know, it should all
work with the GUI controls.

00:28:00.265 --> 00:28:01.770
E JOHN FEIG: All right.

00:28:01.770 --> 00:28:03.990
Next up is a tool
called StackDriver.

00:28:03.990 --> 00:28:06.420
And StackDriver, as
some of you might know,

00:28:06.420 --> 00:28:09.090
is actually just a
generally available tool,

00:28:09.090 --> 00:28:11.820
provided by the
Google Cloud Platform,

00:28:11.820 --> 00:28:14.992
that is for scalable logging.

00:28:14.992 --> 00:28:16.950
But here we're going to
actually talk about how

00:28:16.950 --> 00:28:19.135
we use it for Smart Home.

00:28:19.135 --> 00:28:21.260
And one of the things that
we heard from developers

00:28:21.260 --> 00:28:22.760
is, there's this
kind of frustration

00:28:22.760 --> 00:28:24.800
around a lack of logs
and a lack of insight

00:28:24.800 --> 00:28:26.510
into what's happening
on the Google side

00:28:26.510 --> 00:28:28.170
if there's a failure.

00:28:28.170 --> 00:28:30.840
And what we're doing with
StackDriver is providing

00:28:30.840 --> 00:28:34.500
those assistant side logs so
that you can see if, you know,

00:28:34.500 --> 00:28:36.990
you get an error TTS that
comes back from Google

00:28:36.990 --> 00:28:40.302
once you've tried to take some
action, what actually happened.

00:28:40.302 --> 00:28:41.760
And the other neat
thing about this

00:28:41.760 --> 00:28:43.740
is that StackDriver
allows for integrations.

00:28:43.740 --> 00:28:46.740
And so you can actually
create a service

00:28:46.740 --> 00:28:49.800
where you can subscribe
to these log events

00:28:49.800 --> 00:28:52.432
and have them sent straight
into your own logging service

00:28:52.432 --> 00:28:54.390
so that you don't need
to go to multiple places

00:28:54.390 --> 00:28:55.780
to look at logs.

00:28:55.780 --> 00:28:59.940
You can also parse the logs
that are coming in for analytics

00:28:59.940 --> 00:29:04.960
and write your own
metrics based on that.

00:29:04.960 --> 00:29:06.460
So let's look at
how to enable this.

00:29:06.460 --> 00:29:07.270
The first thing
you're going to do

00:29:07.270 --> 00:29:09.353
is, you're going to go to
the Google Cloud console

00:29:09.353 --> 00:29:12.640
and you're going to, again,
pick your Action there

00:29:12.640 --> 00:29:13.632
as your project.

00:29:13.632 --> 00:29:15.340
And then you're going
to open up the menu

00:29:15.340 --> 00:29:20.360
and go to the logging
section, and it's under Logs.

00:29:20.360 --> 00:29:22.310
Next, there's this
Resource Picker dropdown

00:29:22.310 --> 00:29:23.600
that you'll select.

00:29:23.600 --> 00:29:25.280
And when you click
that, you're going

00:29:25.280 --> 00:29:27.260
to select the Google
Assistant Action.

00:29:30.990 --> 00:29:32.930
Once you've selected
those things,

00:29:32.930 --> 00:29:34.568
you should see logs coming up.

00:29:34.568 --> 00:29:36.110
And here is actually
something that I

00:29:36.110 --> 00:29:38.420
was working on a
couple of weeks ago

00:29:38.420 --> 00:29:41.800
where I had backend failures.

00:29:41.800 --> 00:29:43.550
And this is the
sort of thing that,

00:29:43.550 --> 00:29:48.800
if you're using maybe an HDB
proxy like Nginx or Apache

00:29:48.800 --> 00:29:51.140
in front of your service
to handle the web requests,

00:29:51.140 --> 00:29:55.490
and then will forward on the
request to your service--

00:29:55.490 --> 00:29:57.190
if you get a 500, it
might actually not

00:29:57.190 --> 00:29:58.940
be getting forwarded
back to your service.

00:29:58.940 --> 00:30:02.417
And so your Services Logs might
not have this failure in it.

00:30:02.417 --> 00:30:05.000
And that's where StackDriver is
like really, really useful, is

00:30:05.000 --> 00:30:07.730
you can see those failures
that maybe your service doesn't

00:30:07.730 --> 00:30:10.580
log because it doesn't
get those requests.

00:30:10.580 --> 00:30:12.800
Another example of
that might be if you

00:30:12.800 --> 00:30:17.960
have auth failures, where
the credentials are expired

00:30:17.960 --> 00:30:22.550
or maybe not existent
on the Assistant side.

00:30:22.550 --> 00:30:24.260
Those will get logged
here too, and it'll

00:30:24.260 --> 00:30:27.650
give you an indication that
there's an auth failure.

00:30:27.650 --> 00:30:29.990
And like I said,
you can integrate

00:30:29.990 --> 00:30:33.080
this using Google Cloud Pub/Sub
to have those StackDriver

00:30:33.080 --> 00:30:35.330
events sent straight into
your own logging service

00:30:35.330 --> 00:30:36.740
if you already have one.

00:30:36.740 --> 00:30:38.452
And you can, again,
peg metrics based

00:30:38.452 --> 00:30:40.160
on the various types
of failures that you

00:30:40.160 --> 00:30:42.860
get to understand the
areas where you need

00:30:42.860 --> 00:30:44.310
you might need improvement.

00:30:44.310 --> 00:30:46.100
And we have this
great tool, that's

00:30:46.100 --> 00:30:49.225
a sample on GitHub, that
really just walks you through

00:30:49.225 --> 00:30:49.850
how to do this.

00:30:49.850 --> 00:30:52.310
It walks you through how
to create an integration

00:30:52.310 --> 00:30:54.230
with StackDriver and
then also to parse out

00:30:54.230 --> 00:30:55.880
those logs for metrics.

00:30:55.880 --> 00:31:01.220
And it's a Smart
Home focused example.

00:31:01.220 --> 00:31:02.870
GAURAV NOLKHA: So
John just showed us

00:31:02.870 --> 00:31:06.260
an error with Sync
Response on StackDriver.

00:31:06.260 --> 00:31:10.288
So now how do you debug in case
you actually send a 200 back?

00:31:10.288 --> 00:31:12.080
So you think your Synced
response is right,

00:31:12.080 --> 00:31:15.110
but Assistant did not
like it and it showed

00:31:15.110 --> 00:31:17.880
the user account linking error.

00:31:17.880 --> 00:31:21.180
Sync Validator comes
in handy at that point.

00:31:21.180 --> 00:31:23.180
So on our adaptive
documentation for Smart Home,

00:31:23.180 --> 00:31:25.100
we have embedded a validator.

00:31:25.100 --> 00:31:29.090
It's a simple input box where
you paste your Sync Response

00:31:29.090 --> 00:31:31.880
and let the script tell
you if it sees any errors

00:31:31.880 --> 00:31:34.110
with your Sync Response.

00:31:34.110 --> 00:31:37.960
So like you see here, Fight
is not a valid device type.

00:31:37.960 --> 00:31:40.140
It probably needed to be Light.

00:31:40.140 --> 00:31:44.160
And Darkness is not a valid
trait, it should be Brightness.

00:31:44.160 --> 00:31:46.900
It also tells you type errors.

00:31:46.900 --> 00:31:50.940
So for example, the name in this
case should have been a string.

00:31:50.940 --> 00:31:54.120
And once you fix
these Sync errors,

00:31:54.120 --> 00:31:57.240
your account linking and
sync both happen to work.

00:31:57.240 --> 00:31:59.220
And you know, it's a
better user experience

00:31:59.220 --> 00:32:00.860
and you can fix
these things easily.

00:32:03.510 --> 00:32:05.960
We've talked about a
lot of applets and tools

00:32:05.960 --> 00:32:07.070
that you can leverage.

00:32:07.070 --> 00:32:10.300
But what if you're just starting
with the Smart Home and API

00:32:10.300 --> 00:32:13.638
and you want to create
your first action?

00:32:13.638 --> 00:32:15.180
We're going to check
out the Codelab.

00:32:15.180 --> 00:32:17.347
And you can actually do it
in the Codelab area right

00:32:17.347 --> 00:32:20.010
after this talk, or you can
go home and check it out

00:32:20.010 --> 00:32:21.340
on the web.

00:32:21.340 --> 00:32:24.780
So the goal of this Codelab
is to create a virtual device

00:32:24.780 --> 00:32:29.160
and then be able to control this
virtual device using Assistant.

00:32:29.160 --> 00:32:33.410
So you're going to implement
the SYNC, EXECUTE, and QUERY

00:32:33.410 --> 00:32:37.120
endpoint, and also Request,
Sync, and Report State.

00:32:37.120 --> 00:32:38.430
So it's a complete package.

00:32:38.430 --> 00:32:40.680
It's a gateway to get started
with the Smart Home API.

00:32:43.428 --> 00:32:44.510
E JOHN FEIG: All right.

00:32:44.510 --> 00:32:46.890
And now we're onto
the last section,

00:32:46.890 --> 00:32:48.920
which is understanding
the process that we

00:32:48.920 --> 00:32:53.558
use once you're ready to submit
your Action and publish it.

00:32:53.558 --> 00:32:55.850
So let's talk about the
submission process a little bit

00:32:55.850 --> 00:32:58.408
and clear up kind
of what happens,

00:32:58.408 --> 00:33:00.200
so that you understand
what's going on when

00:33:00.200 --> 00:33:02.030
you click that Submit button.

00:33:02.030 --> 00:33:03.710
And we're also making
some improvements

00:33:03.710 --> 00:33:08.420
to make this easier and smoother
for you throughout the process.

00:33:08.420 --> 00:33:11.683
And so here's how to
submit and what happens.

00:33:11.683 --> 00:33:13.100
The first thing
you're going to do

00:33:13.100 --> 00:33:17.750
is submit passing results
in the Smart Home Test Suite

00:33:17.750 --> 00:33:19.770
using the form that's
linked in the tool.

00:33:19.770 --> 00:33:21.560
So just really simple--
make sure you're

00:33:21.560 --> 00:33:23.690
passing the Test Suite.

00:33:23.690 --> 00:33:26.180
Second, is that you're going
to go and fill out company

00:33:26.180 --> 00:33:28.650
and branding information in
the Actions on Google console.

00:33:28.650 --> 00:33:30.650
Just make sure that you've
filled out everything

00:33:30.650 --> 00:33:32.600
that we asked for,
and it will make

00:33:32.600 --> 00:33:35.130
things go quite a bit faster.

00:33:35.130 --> 00:33:37.167
The next move over
to the Google side--

00:33:37.167 --> 00:33:39.500
and so this might actually
be a bit of a back-and-forth.

00:33:39.500 --> 00:33:41.177
We might reach out
to you with things

00:33:41.177 --> 00:33:43.010
that need to be updated
and stuff like that.

00:33:43.010 --> 00:33:45.098
And those would come
out of two things.

00:33:45.098 --> 00:33:46.640
So there's a functional
certification

00:33:46.640 --> 00:33:49.593
that happens where we review
the results that you submitted

00:33:49.593 --> 00:33:51.260
for the Smart Home
Test Suite as well as

00:33:51.260 --> 00:33:53.210
a policy review that
happens to make sure

00:33:53.210 --> 00:33:55.383
that you're in compliance
with all of our policies.

00:33:55.383 --> 00:33:57.050
And then once you
pass those two things,

00:33:57.050 --> 00:34:00.160
you're ready to go live.

00:34:00.160 --> 00:34:03.190
And we have some tips that
we've kind of collected

00:34:03.190 --> 00:34:06.790
over the couple of years about
how to make this as smooth

00:34:06.790 --> 00:34:09.735
as possible and to kind
of avoid back-and-forth.

00:34:09.735 --> 00:34:11.860
And the first thing that's
really, really important

00:34:11.860 --> 00:34:14.590
is to use the appropriate
types and traits.

00:34:14.590 --> 00:34:18.500
So this is something that we
see as kind of a common issue.

00:34:18.500 --> 00:34:21.820
And we see things like
using on-off as opposed

00:34:21.820 --> 00:34:23.320
to start-stop.

00:34:23.320 --> 00:34:26.290
And there are cases where you
might have a robot vacuum,

00:34:26.290 --> 00:34:29.920
and Start Vacuuming is a
much more natural grammar

00:34:29.920 --> 00:34:32.469
to say than Turn On the Vacuum.

00:34:32.469 --> 00:34:35.139
Another one to keep in mind
is like temperature control

00:34:35.139 --> 00:34:36.518
versus temperature setting.

00:34:36.518 --> 00:34:38.560
One of them is for
thermostats, and the other one

00:34:38.560 --> 00:34:40.322
might be for your oven.

00:34:40.322 --> 00:34:41.739
And then finally,
also making sure

00:34:41.739 --> 00:34:44.170
that you're using a two
factor authentication where

00:34:44.170 --> 00:34:44.870
appropriate.

00:34:44.870 --> 00:34:47.860
So you know, if it's a lock,
security system, you really

00:34:47.860 --> 00:34:50.639
want to make sure
that you're using 2FA.

00:34:50.639 --> 00:34:52.440
The next thing is
again, just making

00:34:52.440 --> 00:34:54.350
sure you're passing
the Test Suite.

00:34:54.350 --> 00:34:58.710
Not a lot to say there, but
definitely run the Test Suite

00:34:58.710 --> 00:35:01.140
as frequently as you like.

00:35:01.140 --> 00:35:03.690
The next thing is to make sure
that your descriptions match

00:35:03.690 --> 00:35:04.650
the locales.

00:35:04.650 --> 00:35:08.280
So let's say that you're ready
to launch your Smart Home

00:35:08.280 --> 00:35:11.282
Action, and you're
shipping devices in Japan

00:35:11.282 --> 00:35:12.990
and you want to launch
your Action there.

00:35:12.990 --> 00:35:13.960
That's great.

00:35:13.960 --> 00:35:16.860
Make sure that, instead of
submitting a description that's

00:35:16.860 --> 00:35:18.780
in English, you
submit one that's

00:35:18.780 --> 00:35:23.542
also in Japanese if you're
selecting Japan as a locale.

00:35:23.542 --> 00:35:25.000
The next is making
sure that you're

00:35:25.000 --> 00:35:27.945
just in compliance with all
of our policies for AoG.

00:35:27.945 --> 00:35:29.320
And then you'll
want to make sure

00:35:29.320 --> 00:35:31.660
that you supply a
valid privacy policy

00:35:31.660 --> 00:35:32.840
for each supported language.

00:35:32.840 --> 00:35:36.040
So again, you've submitted
a Japanese description,

00:35:36.040 --> 00:35:37.960
you're going to submit
a privacy policy that's

00:35:37.960 --> 00:35:39.218
written in Japanese.

00:35:41.760 --> 00:35:44.010
The next thing is to make
sure that you've implemented

00:35:44.010 --> 00:35:48.630
all of our APIs including Report
State, Request Sync, and Query.

00:35:48.630 --> 00:35:51.360
These are really critical,
and in fact the Test Suite

00:35:51.360 --> 00:35:54.630
won't work well if you don't
implement these things.

00:35:54.630 --> 00:35:58.075
It won't work at all if you
don't implement Report State.

00:35:58.075 --> 00:36:00.450
You'll want to make sure that
account linking is working.

00:36:00.450 --> 00:36:03.928
And this might seem obvious,
but once you launch,

00:36:03.928 --> 00:36:05.970
your users are going to
try to do account linking

00:36:05.970 --> 00:36:07.320
and start interacting with you.

00:36:07.320 --> 00:36:08.820
And if account
linking doesn't work,

00:36:08.820 --> 00:36:11.707
they won't be able to do that
and you'll have zero users.

00:36:11.707 --> 00:36:14.040
You'll want to make sure that
the cloud to cloud latency

00:36:14.040 --> 00:36:16.560
is consistently under 900
milliseconds, which is just

00:36:16.560 --> 00:36:20.550
kind of where we really find
it to be very noticeable

00:36:20.550 --> 00:36:21.660
if there's cloud latency.

00:36:21.660 --> 00:36:23.280
When you say, Turn
on the Lights,

00:36:23.280 --> 00:36:27.010
and then it takes more than
a second for that to happen,

00:36:27.010 --> 00:36:28.200
it's pretty noticeable.

00:36:28.200 --> 00:36:31.680
The next is to make sure
that the authorization grant

00:36:31.680 --> 00:36:33.780
in your OAuth flow
grants permission

00:36:33.780 --> 00:36:35.683
to Google and not
something else.

00:36:35.683 --> 00:36:37.350
We don't want to see
permissions granted

00:36:37.350 --> 00:36:39.630
to Google Assistant, or
Google Home, or Nest,

00:36:39.630 --> 00:36:41.700
or anything else-- just Google.

00:36:41.700 --> 00:36:44.190
And finally, make sure that
the icon that you provide

00:36:44.190 --> 00:36:50.056
is 144x144 circular
with a white background.

00:36:50.056 --> 00:36:51.230
GAURAV NOLKHA: Cool.

00:36:51.230 --> 00:36:53.660
And if you are a
maker, or someone who's

00:36:53.660 --> 00:36:55.965
just doing this
for fun, definitely

00:36:55.965 --> 00:36:57.590
add the Assistant
and the voice control

00:36:57.590 --> 00:36:59.540
to your devices in
your fun project

00:36:59.540 --> 00:37:02.340
and you don't have to
worry about the approval.

00:37:02.340 --> 00:37:03.320
So use it.

00:37:03.320 --> 00:37:07.440
And then finally, all the things
that we've talked about today

00:37:07.440 --> 00:37:10.070
and the documentation for
this lives under our docs

00:37:10.070 --> 00:37:15.200
at developers.googl
e.com/actions/smarthome.

00:37:15.200 --> 00:37:20.800
And it lives inside
Actions Google and click

00:37:20.800 --> 00:37:23.050
under the Smart Home section.

00:37:23.050 --> 00:37:27.400
And this will guide you through
the APIs, and the tools,

00:37:27.400 --> 00:37:30.560
and everything that we
just talked about today.

00:37:30.560 --> 00:37:33.550
So finally, thank you
very much for coming here.

00:37:33.550 --> 00:37:36.520
Last two years has been
a thrilling ride for us

00:37:36.520 --> 00:37:40.030
on Smart Home, and we've worked
with many of you in the room

00:37:40.030 --> 00:37:41.800
and outside this room.

00:37:41.800 --> 00:37:44.980
And we really thank you for
all the feedback on the APIs,

00:37:44.980 --> 00:37:47.500
on the tools, and our
processes that you provided

00:37:47.500 --> 00:37:51.280
that has helped us improve
our tools and all the APIs

00:37:51.280 --> 00:37:52.420
and processes.

00:37:52.420 --> 00:37:55.420
And we can't wait to see what
you guys do with these tools

00:37:55.420 --> 00:37:57.520
and the actions you build.

00:37:57.520 --> 00:37:58.350
Thank you.

00:37:58.350 --> 00:38:00.850
E JOHN FEIG: Thank
you for joining us.

00:38:00.850 --> 00:38:04.200
[MUSIC PLAYING]

