WEBVTT
Kind: captions
Language: en

00:00:07.484 --> 00:00:09.150
MALE SPEAKER: Welcome
to Talks at Google

00:00:09.150 --> 00:00:11.030
in Cambridge, Massachusetts.

00:00:11.030 --> 00:00:13.330
This morning, I'm excited
to introduce Nick Montfort,

00:00:13.330 --> 00:00:15.820
Associate Professor
of Digital Media

00:00:15.820 --> 00:00:17.740
at the Massachusetts
Institute of Technology.

00:00:17.740 --> 00:00:20.150
There, he directs The
Trope Tank research lab,

00:00:20.150 --> 00:00:22.902
studying literary generators
and computational art.

00:00:22.902 --> 00:00:25.360
For over a decade, he served
on the board of the Electronic

00:00:25.360 --> 00:00:27.960
Literature Organization and he's
principal of the naming firm

00:00:27.960 --> 00:00:29.360
Nomnym.

00:00:29.360 --> 00:00:32.840
Today, Nick will read from
his latest book, "#!." "#!"

00:00:32.840 --> 00:00:35.570
presents computer
generated poems alongside

00:00:35.570 --> 00:00:37.510
their corresponding source code.

00:00:37.510 --> 00:00:39.780
His other works include
"Twisty Little Passages",

00:00:39.780 --> 00:00:42.180
a survey of interactive
fiction, and "10 PRINT",

00:00:42.180 --> 00:00:46.390
a 10-author collaboration
on create computing.

00:00:46.390 --> 00:00:49.224
Please welcome Nick Montfort.

00:00:49.224 --> 00:00:51.128
NICK MONTFORT: Thanks.

00:00:51.128 --> 00:00:52.160
Thanks very much.

00:01:04.629 --> 00:01:10.580
"Form intends intense
verse crease to tense form

00:01:10.580 --> 00:01:15.690
tense vent verse tone
verse form crease form

00:01:15.690 --> 00:01:23.500
vent tends to crease to tends
form form vent form crease tone

00:01:23.500 --> 00:01:24.925
verse tense.

00:01:42.530 --> 00:01:45.480
Crease vent vent
tends inverse tone

00:01:45.480 --> 00:01:49.170
into verse form
verse verse form tone

00:01:49.170 --> 00:01:54.160
tense in tense vent
crease verse tone

00:01:54.160 --> 00:02:00.620
tends verse tends tends tense
verse crease form tone vent

00:02:00.620 --> 00:02:07.490
into tends to crease vent to
crease vent verse verse vent

00:02:07.490 --> 00:02:14.335
to crease vent form tends vent
crease tense form tends crease

00:02:14.335 --> 00:02:16.490
in intone.

00:02:16.490 --> 00:02:20.040
To tone verse vent
crease intends

00:02:20.040 --> 00:02:25.740
vent vent to tense in form
crease vent crease form

00:02:25.740 --> 00:02:37.690
to to tends tone verse
form vent tends tends to."

00:02:37.690 --> 00:02:40.370
The work I have been
reading, "Round",

00:02:40.370 --> 00:02:42.980
is a very simple
program and poem

00:02:42.980 --> 00:02:47.130
that's available on the web
at round.newbinarypress.com

00:02:47.130 --> 00:02:49.610
and, as with all my
creative digital work, also

00:02:49.610 --> 00:02:52.926
available on my site, nickm.com.

00:02:52.926 --> 00:02:55.190
It displays the digits of pi.

00:02:55.190 --> 00:02:57.760
But instead of using the
numerals 0 through 9,

00:02:57.760 --> 00:02:59.820
the program presents
strings of text

00:02:59.820 --> 00:03:01.830
that correspond to each digit.

00:03:01.830 --> 00:03:05.340
Eight of them are words
that can stand alone,

00:03:05.340 --> 00:03:08.410
one is the prefix "in-",
and one is a line break,

00:03:08.410 --> 00:03:12.300
which shapes the poem into
lines of irregular length.

00:03:12.300 --> 00:03:16.440
So since 3 is
represented by "form,"

00:03:16.440 --> 00:03:21.860
1 by "in," 4 by "tends," 1
by "in," 5 by "tense," and 9

00:03:21.860 --> 00:03:26.483
by "verse," the first digits
of pi-- 3, 1, 4, 1, 5,

00:03:26.483 --> 00:03:33.470
9-- are represented by "form
intends intense verse."

00:03:33.470 --> 00:03:36.270
"Round" is a
computational poem that

00:03:36.270 --> 00:03:40.430
is both non-interactive
and deterministic.

00:03:40.430 --> 00:03:42.590
It is computational
in that computation

00:03:42.590 --> 00:03:45.060
is an essential
aspect of the work,

00:03:45.060 --> 00:03:47.800
non-interactive because
there's no input accepted

00:03:47.800 --> 00:03:50.210
as the program runs,
and deterministic

00:03:50.210 --> 00:03:53.060
because the text produced
should be the same, each time,

00:03:53.060 --> 00:03:56.150
on any properly
functioning computer.

00:03:56.150 --> 00:03:59.070
The poem is also
infinite, or boundless.

00:03:59.070 --> 00:04:00.910
There's no final
line or internally

00:04:00.910 --> 00:04:05.020
specified condition that
will cause it to stop.

00:04:05.020 --> 00:04:08.040
"Round" does not contain
any list of digits of pi.

00:04:08.040 --> 00:04:11.270
It computes each digit
using a spigot algorithm.

00:04:11.270 --> 00:04:14.280
If it did store, as data,
1,000 digits, or 10,000,

00:04:14.280 --> 00:04:16.339
or any finite
number, the program

00:04:16.339 --> 00:04:18.740
would be unable to continue
representing the digits of pi

00:04:18.740 --> 00:04:20.720
after that point.

00:04:20.720 --> 00:04:23.330
Instead, "Round" computes pi.

00:04:23.330 --> 00:04:26.340
As the program runs,
the production of text

00:04:26.340 --> 00:04:28.430
slows down as more
and more steps

00:04:28.430 --> 00:04:31.090
are necessary to
determine the next digit.

00:04:31.090 --> 00:04:34.040
You may be able to see that
in this Python instance

00:04:34.040 --> 00:04:35.820
of the program.

00:04:35.820 --> 00:04:38.280
The multitasking computer
running the program

00:04:38.280 --> 00:04:40.670
will also begin to run
other processes more slowly

00:04:40.670 --> 00:04:43.240
and will physically heat up.

00:04:43.240 --> 00:04:47.430
The computer's fan will work
harder as the processor labors

00:04:47.430 --> 00:04:48.785
to complete these computations.

00:04:52.580 --> 00:04:58.530
"Verse tense tense tense
vent crease crease form

00:04:58.530 --> 00:05:05.820
intone crease tense form tense
verse tends vent increase

00:05:05.820 --> 00:05:12.440
vent tends vent in in intone
tends tense crease vent tends

00:05:12.440 --> 00:05:18.560
in crease tone inverse
form vent tense crease

00:05:18.560 --> 00:05:22.330
in in tense tense
tense verse to tends

00:05:22.330 --> 00:05:24.590
tends to crease
crease verse tends

00:05:24.590 --> 00:05:31.534
vent verse tense
tends verse form."

00:05:31.534 --> 00:05:33.200
Of course, this is
probably the audience

00:05:33.200 --> 00:05:36.380
I need to tell least about
the materiality of computing,

00:05:36.380 --> 00:05:39.950
the labor that might be
involved in scanning in books,

00:05:39.950 --> 00:05:43.210
the physical and material
computation that's

00:05:43.210 --> 00:05:47.970
required to do large amounts
of symbol manipulation, data

00:05:47.970 --> 00:05:50.600
retrieval, and delivery.

00:05:50.600 --> 00:05:52.200
But this is a way
of looking at this

00:05:52.200 --> 00:05:55.590
and, for people whose
experience of computing

00:05:55.590 --> 00:05:57.650
is maybe more ethereal,
and for people

00:05:57.650 --> 00:06:00.920
who believe that digital
poetry and the work that we

00:06:00.920 --> 00:06:06.200
do with text on the computer
is actually immaterial,

00:06:06.200 --> 00:06:09.730
this is something of an answer
to that showing that there

00:06:09.730 --> 00:06:14.190
is something going on in terms
of computation, something

00:06:14.190 --> 00:06:19.610
almost mechanical, that
is a laborious process.

00:06:19.610 --> 00:06:22.140
And it also questions
various ideas

00:06:22.140 --> 00:06:26.940
of the need to combine things
at random-- in a digital poem,

00:06:26.940 --> 00:06:30.970
for instance-- which is not
literally done in this case.

00:06:30.970 --> 00:06:33.910
Although, obviously, it's a
quite unpredictable sequence

00:06:33.910 --> 00:06:35.756
unless you know that
it's the digits of pi

00:06:35.756 --> 00:06:36.880
that are being represented.

00:06:41.750 --> 00:06:45.140
So I wrote this next
poem, "Taroko Gorge,"

00:06:45.140 --> 00:06:50.950
in January, 2009,
in about one day

00:06:50.950 --> 00:06:53.835
at Taiwan's Taroko
Gorge National Park.

00:06:59.930 --> 00:07:02.420
It's actually a pretty
conventional poem

00:07:02.420 --> 00:07:05.140
compared to a lot of
the things that I right,

00:07:05.140 --> 00:07:07.720
or a lot of the things
that my programs output.

00:07:07.720 --> 00:07:10.840
It's meant to be a
generator of nature poetry.

00:07:10.840 --> 00:07:12.720
I figure that if
other people had

00:07:12.720 --> 00:07:14.370
gone to beautiful,
natural places-- as,

00:07:14.370 --> 00:07:16.230
stereotypically, is
the case-- and they've

00:07:16.230 --> 00:07:18.180
written poems about
them, why couldn't I

00:07:18.180 --> 00:07:20.400
go to a beautiful, natural
place and write a poetry

00:07:20.400 --> 00:07:23.160
generator about this place.

00:07:23.160 --> 00:07:25.110
This one, also, is
a boundless poem,

00:07:25.110 --> 00:07:27.190
running until it's interrupted.

00:07:27.190 --> 00:07:31.200
But as I think you can
see, it's not formless.

00:07:31.200 --> 00:07:33.760
Each of the longer
strophes begins and ends

00:07:33.760 --> 00:07:37.730
with a path line of a certain
type representing motion

00:07:37.730 --> 00:07:41.520
along a path in
Taroko Gorge Park.

00:07:41.520 --> 00:07:46.620
And in between, there are
zero or more view lines,

00:07:46.620 --> 00:07:50.540
representing stopping to look
at the scenery at a designated

00:07:50.540 --> 00:07:51.940
viewing spot.

00:07:51.940 --> 00:07:55.080
And then, these
individual lines that

00:07:55.080 --> 00:07:58.560
appear in between
the longer strophes

00:07:58.560 --> 00:08:02.150
are what I call cave lines,
representing the tunnels

00:08:02.150 --> 00:08:05.600
that Chiang Kai-Shek had
his nationalist army carve

00:08:05.600 --> 00:08:07.860
through the mountains
when they came to Taiwan.

00:08:10.850 --> 00:08:13.450
"Stones pace the ripplings.

00:08:13.450 --> 00:08:16.140
Shapes sweep the flows.

00:08:16.140 --> 00:08:19.080
Translate the objective driven.

00:08:19.080 --> 00:08:21.500
Layer paces the coves.

00:08:21.500 --> 00:08:23.010
Coves hold.

00:08:23.010 --> 00:08:25.850
Mists trail the stones.

00:08:25.850 --> 00:08:28.430
Shade the encompassing rough.

00:08:28.430 --> 00:08:30.660
Brow ranges the flows.

00:08:30.660 --> 00:08:32.200
The crags hold.

00:08:32.200 --> 00:08:34.260
Shapes rest.

00:08:34.260 --> 00:08:37.309
Layer ranges the stone.

00:08:37.309 --> 00:08:42.320
Shade the encompassing,
rough, sinuous straight."

00:08:42.320 --> 00:08:46.430
Now I was pleased
to do this exercise

00:08:46.430 --> 00:08:49.640
and to undertake this
nature poetry generator.

00:08:49.640 --> 00:08:51.390
One of the things that
you see in the book

00:08:51.390 --> 00:08:54.630
is that, as with all of the
outputs of these systems,

00:08:54.630 --> 00:08:58.250
they're presented after the
code for the program itself.

00:08:58.250 --> 00:09:00.240
This is, in part,
just a reference back

00:09:00.240 --> 00:09:02.180
to the days of
basic programming,

00:09:02.180 --> 00:09:05.100
in the '70s and '80s, where one
would find books and magazines

00:09:05.100 --> 00:09:07.285
that presented to code
for people to type in.

00:09:07.285 --> 00:09:09.410
They gave some sample output
so you could make sure

00:09:09.410 --> 00:09:12.260
that what you were
inputting was really

00:09:12.260 --> 00:09:14.050
what it was supposed to be.

00:09:14.050 --> 00:09:17.500
And they gave an attitude of
openness toward computing.

00:09:17.500 --> 00:09:20.410
And of course, on
the web, you can just

00:09:20.410 --> 00:09:23.120
view source and
examine how things

00:09:23.120 --> 00:09:25.800
are done in JavaScript
in the same way.

00:09:25.800 --> 00:09:29.540
This is what Scott Rettberg,
a friend and collaborator

00:09:29.540 --> 00:09:30.390
of mine, did.

00:09:30.390 --> 00:09:33.320
And without telling
me about it, he also

00:09:33.320 --> 00:09:36.260
made his own work out
of "Taroko Gorge"--

00:09:36.260 --> 00:09:38.240
a piece called "Tokyo Garage."

00:09:38.240 --> 00:09:41.350
And where I wrote a poem about
a beautiful natural place

00:09:41.350 --> 00:09:43.390
that I'd actually
visited myself,

00:09:43.390 --> 00:09:49.720
what Scott did was to write
a poem about an urban place

00:09:49.720 --> 00:09:51.690
in the East that he
had never been to,

00:09:51.690 --> 00:09:53.662
supplied only by his
feverish imagination

00:09:53.662 --> 00:09:55.620
of what it would be like
to be in Tokyo and all

00:09:55.620 --> 00:09:58.640
the stereotypes that
we have in the West.

00:09:58.640 --> 00:10:00.750
"Translator funds the libation.

00:10:00.750 --> 00:10:02.530
Dealers reverse.

00:10:02.530 --> 00:10:05.680
Protagonist suffers
the libation.

00:10:05.680 --> 00:10:08.190
Indoor the electrical,
banal blinking.

00:10:08.190 --> 00:10:09.970
Teenager confuses the kids.

00:10:09.970 --> 00:10:11.450
Earthquakes reverse.

00:10:11.450 --> 00:10:14.400
Talk show host orients
the sushi joints.

00:10:14.400 --> 00:10:17.070
Harmonize the abbreviated."

00:10:17.070 --> 00:10:19.680
Well, suffice it to say that
other people started doing this

00:10:19.680 --> 00:10:20.470
as well.

00:10:20.470 --> 00:10:24.720
J.R. Carpenter created
this piece, "Gorge"--

00:10:24.720 --> 00:10:26.640
a modified version
of "Taroko Gorge"--

00:10:26.640 --> 00:10:28.980
which describes another
endless process,

00:10:28.980 --> 00:10:30.920
that of gluttony and
endless consumption,

00:10:30.920 --> 00:10:38.020
and the disgusting and yet
unstoppable processes thereof.

00:10:38.020 --> 00:10:42.180
And J.R. did some
additional pieces.

00:10:42.180 --> 00:10:44.370
One of these that I
certainly want to point out

00:10:44.370 --> 00:10:46.990
is Andrew Plotkins's
piece, in which

00:10:46.990 --> 00:10:49.830
he took all the remixes that
happened up to this point,

00:10:49.830 --> 00:10:51.930
showed them remixed
with themselves

00:10:51.930 --> 00:10:56.180
and with other remixes, and
also displayed the code that

00:10:56.180 --> 00:10:59.590
corresponded to what was being
printed at different times.

00:10:59.590 --> 00:11:01.470
So this is really
a tour de force.

00:11:01.470 --> 00:11:03.660
And he doesn't actually--
only a small amount

00:11:03.660 --> 00:11:06.620
of my original code,
obviously, is part of this.

00:11:06.620 --> 00:11:10.596
It's a different
type of take off.

00:11:10.596 --> 00:11:14.620
This is a remix of Eric
Snodgrass's "Yoko Engorged,"

00:11:14.620 --> 00:11:18.800
which is about Yoko Ono
and her performance art.

00:11:18.800 --> 00:11:22.710
And this is a remix of "Fred
&amp; George" and "Toy Garbage"

00:11:22.710 --> 00:11:24.590
down here.

00:11:24.590 --> 00:11:26.860
And then, some people
simply created work

00:11:26.860 --> 00:11:30.960
that-- many people use the
particular form that I created,

00:11:30.960 --> 00:11:34.290
of these path lines, view
lines, and cave lines.

00:11:34.290 --> 00:11:36.030
But some people
actually discarded that.

00:11:36.030 --> 00:11:38.610
They just sort of took the
code as a starting point

00:11:38.610 --> 00:11:41.260
for making their own sort of
project with their own form.

00:11:41.260 --> 00:11:44.710
And Sonny Rae Tempest did
that, creating these quatrains

00:11:44.710 --> 00:11:49.110
in his piece, "Camel Tail",
that are a patchwork of all

00:11:49.110 --> 00:11:53.110
of the lyrics from Metallica's
nine major studio albums.

00:11:53.110 --> 00:11:55.710
You can see here,
the production is

00:11:55.710 --> 00:11:57.740
something of quite
a different sort.

00:11:57.740 --> 00:11:59.790
But I think it rhetorically
gets across the point

00:11:59.790 --> 00:12:04.330
that metal is more of a texture
than a narrative or a story,

00:12:04.330 --> 00:12:04.830
right.

00:12:04.830 --> 00:12:06.510
It's that you can
take these lines

00:12:06.510 --> 00:12:10.160
and put them together at random,
and you still sort of feel

00:12:10.160 --> 00:12:12.090
what you're supposed
to feel when

00:12:12.090 --> 00:12:13.610
you're listening to the song.

00:12:13.610 --> 00:12:14.730
"Much too young to focus.

00:12:14.730 --> 00:12:15.410
No more!

00:12:15.410 --> 00:12:15.910
Anger.

00:12:15.910 --> 00:12:17.020
Master."

00:12:17.020 --> 00:12:19.250
Pretty much, that
could be a lyric.

00:12:25.300 --> 00:12:27.850
All right.

00:12:27.850 --> 00:12:31.370
So to end this most coherent
section of my reading,

00:12:31.370 --> 00:12:37.532
I'll present some of the output
from my first Ruby program.

00:12:37.532 --> 00:12:39.140
I was commissioned
to write something

00:12:39.140 --> 00:12:41.980
for the book, "The
Ill-Tempered Rubyist," which

00:12:41.980 --> 00:12:43.000
is sort of code poems.

00:12:43.000 --> 00:12:44.330
And it had this title.

00:12:44.330 --> 00:12:46.290
And I thought, well,
I'll need to see

00:12:46.290 --> 00:12:50.720
what I can do,
actually, in Ruby.

00:12:50.720 --> 00:12:52.710
So the program is
built with text

00:12:52.710 --> 00:12:54.785
from Edward
Fitzgerald's translation

00:12:54.785 --> 00:12:57.180
of "The Rubaiyat
of Omar Khayyam."

00:12:57.180 --> 00:13:00.030
And before I read
the output, I'll

00:13:00.030 --> 00:13:03.924
read you the program itself,
not enunciating the punctuation

00:13:03.924 --> 00:13:05.590
marks well enough for
you to type it in.

00:13:05.590 --> 00:13:09.580
But you can see
the book for that.

00:13:09.580 --> 00:13:12.220
And I think you'll get some
sense of what animates it,

00:13:12.220 --> 00:13:15.170
even if you aren't particularly
familiar with Ruby,

00:13:15.170 --> 00:13:16.540
as, in fact, I'm not.

00:13:19.890 --> 00:13:21.180
"Rubaiyat.

00:13:21.180 --> 00:13:22.820
Shebang, user, bin, Ruby.

00:13:22.820 --> 00:13:25.750
A phrases equal oriate,
alternate, along with,

00:13:25.750 --> 00:13:27.810
argument, another,
absolute, alchemist,

00:13:27.810 --> 00:13:30.870
arrest the, an empty, a Ruby,
a little, a thousand, a book

00:13:30.870 --> 00:13:33.850
of, and peace to, a jug
of, a loaf of, a distant,

00:13:33.850 --> 00:13:37.650
and out of, and lose your, a
moments, amid the, are all but,

00:13:37.650 --> 00:13:42.195
awoke from, and by the, all
this of, a shallow, as much as,

00:13:42.195 --> 00:13:44.310
as brings the.

00:13:44.310 --> 00:13:47.260
B phrases equal beneath
the, before the,

00:13:47.260 --> 00:13:49.530
but still the, beside
the, beloved, better

00:13:49.530 --> 00:13:55.030
be, by logic, blaspheme
the, before us, beset the.

00:13:55.030 --> 00:14:01.070
Rhymes equal stare, there, care,
dare, snare, bear, air, hair,

00:14:01.070 --> 00:14:03.440
tear, ne'er.

00:14:03.440 --> 00:14:07.630
Non-rhymes equal sun, stars,
shaft, cup, bird, wing, winds,

00:14:07.630 --> 00:14:12.310
dust, not, lamp, lip,
dusk, balm, bowl, song.

00:14:12.310 --> 00:14:15.800
Six times endings equal
rhymes dot sample three.

00:14:15.800 --> 00:14:18.890
Endings dot insert two
non-rhymes dot sample.

00:14:18.890 --> 00:14:22.080
Beginnings equal A
phrases dot sample three.

00:14:22.080 --> 00:14:25.390
Beginnings dot insert
two B phrases dot sample.

00:14:25.390 --> 00:14:26.810
Zero up to three.

00:14:26.810 --> 00:14:30.800
I puts beginning I plus
base plus endings I. Puts.

00:14:42.020 --> 00:14:44.320
A little bare are all but there.

00:14:44.320 --> 00:14:46.700
By logic shaft, an empty stare.

00:14:46.700 --> 00:14:48.840
Absolute there amid the stair.

00:14:48.840 --> 00:14:51.580
Blaspheme the dusk,
argument bare.

00:14:51.580 --> 00:14:54.400
And by the there, an empty air.

00:14:54.400 --> 00:14:55.320
Better be cup.

00:14:55.320 --> 00:14:56.595
A distant hair.

00:14:56.595 --> 00:14:57.750
A thousand stare.

00:14:57.750 --> 00:14:58.980
A moment's care.

00:14:58.980 --> 00:15:01.810
Beloved cup, arrest the snare.

00:15:01.810 --> 00:15:04.220
Awoke from tear a jug of ne'er.

00:15:04.220 --> 00:15:05.060
Better be cup.

00:15:05.060 --> 00:15:06.385
A distant stare.

00:15:06.385 --> 00:15:07.405
A thousand tear.

00:15:07.405 --> 00:15:08.410
A jug of snare.

00:15:08.410 --> 00:15:09.590
Beset the balm.

00:15:09.590 --> 00:15:11.562
A moment's air."

00:15:11.562 --> 00:15:17.450
And I'll read you the version
that is printed in the book.

00:15:17.450 --> 00:15:19.390
"Amid the care
and lose your air.

00:15:19.390 --> 00:15:20.300
Better be wing.

00:15:20.300 --> 00:15:21.350
Another there.

00:15:21.350 --> 00:15:22.340
A distant care.

00:15:22.340 --> 00:15:23.240
A loaf of ne'er.

00:15:23.240 --> 00:15:26.300
By logic dust and by the dare.

00:15:26.300 --> 00:15:27.200
A Ruby there.

00:15:27.200 --> 00:15:28.370
An empty air.

00:15:28.370 --> 00:15:30.890
Blaspheme the cup
and out of hair.

00:15:30.890 --> 00:15:32.100
And use your bare.

00:15:32.100 --> 00:15:33.460
Absolute dare.

00:15:33.460 --> 00:15:34.810
Before us wing.

00:15:34.810 --> 00:15:36.340
Argument care.

00:15:36.340 --> 00:15:38.920
As springs the
care amid the care,

00:15:38.920 --> 00:15:41.910
before us stars another snare.

00:15:41.910 --> 00:15:45.690
Along with tear
and piece to dare.

00:15:45.690 --> 00:15:50.610
Beside the cup, argument care."

00:15:50.610 --> 00:15:54.150
Now in the book, you can
see a few conceptual poems

00:15:54.150 --> 00:15:56.740
that refer to some
earlier digital work.

00:15:56.740 --> 00:15:59.230
One that is pretty
simple in form

00:15:59.230 --> 00:16:06.010
is based on the permutation
poems of Brion Gysin, which

00:16:06.010 --> 00:16:08.850
Ian Sommerville implemented
computationally.

00:16:08.850 --> 00:16:10.670
And so "I am that
I am" is a sort

00:16:10.670 --> 00:16:12.810
of homage to that,
that simply displays

00:16:12.810 --> 00:16:17.930
all the permutations of
the five full vowels.

00:16:17.930 --> 00:16:23.350
And there's also a piece based
on a work of Claude Closky,

00:16:23.350 --> 00:16:27.470
which is the first m numbers
in alphabetical order.

00:16:27.470 --> 00:16:31.640
So Claude Closky did
a piece, in 1989,

00:16:31.640 --> 00:16:33.160
both in English and
in French, where

00:16:33.160 --> 00:16:35.743
he presented the first thousand
numbers in alphabetical order.

00:16:35.743 --> 00:16:37.760
And of course, they're
alphabetized differently

00:16:37.760 --> 00:16:39.718
in French and English
when they're spelled out.

00:16:39.718 --> 00:16:40.770
And so he showed these.

00:16:40.770 --> 00:16:43.430
And to me, it was a
very interesting display

00:16:43.430 --> 00:16:46.780
of the arbitrariness of our
various systems of language

00:16:46.780 --> 00:16:48.350
when it comes up against number.

00:16:48.350 --> 00:16:49.933
So I did a version
called "The First M

00:16:49.933 --> 00:16:51.700
Numbers in Alphabetical Order."

00:16:51.700 --> 00:16:53.904
And it generates
and alphabetizes

00:16:53.904 --> 00:16:55.320
the first thousand
Roman numerals.

00:16:58.110 --> 00:17:02.180
So I'll show you a little
of the Concrete Perl

00:17:02.180 --> 00:17:04.520
series of programs.

00:17:04.520 --> 00:17:05.960
There was one of
these, actually,

00:17:05.960 --> 00:17:10.829
that I showed early on,
before I got started.

00:17:10.829 --> 00:17:16.660
And that was
"Letterformed Terrain."

00:17:16.660 --> 00:17:23.960
And this is a piece that uses
a Perl special variable that

00:17:23.960 --> 00:17:26.079
has a value equal to 60.

00:17:26.079 --> 00:17:30.110
We actually did a-- I worked
with a Russian translator

00:17:30.110 --> 00:17:33.220
and we did a
transliteration to Cyrillic

00:17:33.220 --> 00:17:35.025
of this piece,
"Letterformed Terrain."

00:17:35.025 --> 00:17:37.240
And we had a Russian
title for it.

00:17:37.240 --> 00:17:39.105
And for one thing, the
landscape is denser,

00:17:39.105 --> 00:17:41.480
because there's more characters
in the Cyrillic alphabet.

00:17:41.480 --> 00:17:44.190
But that value of
60 stays the same.

00:17:44.190 --> 00:17:47.090
So one of the possibilities,
even at the letter level,

00:17:47.090 --> 00:17:48.990
for moving between
languages and alphabets,

00:17:48.990 --> 00:17:52.670
is to see how it is that
the systems we use--

00:17:52.670 --> 00:17:55.740
Perl ASCII, Unicode-- come
up against different human

00:17:55.740 --> 00:17:58.000
languages, and how
they work differently.

00:17:58.000 --> 00:18:06.020
I'll just show you the code for
that, itself, which is that.

00:18:06.020 --> 00:18:11.290
This is a 32 character
Perl program.

00:18:11.290 --> 00:18:13.170
And I have a set of these.

00:18:13.170 --> 00:18:16.980
Concrete Perl programs are
all 32 characters long.

00:18:16.980 --> 00:18:19.130
And then, what I'll
show after, I'll

00:18:19.130 --> 00:18:21.670
show a few examples
of ppg256-- 256

00:18:21.670 --> 00:18:26.350
that series of 256
character Perl programs.

00:18:26.350 --> 00:18:29.240
I showed some of these to an
actual, professional, Perl

00:18:29.240 --> 00:18:32.270
programmer-- not
someone silly, like me,

00:18:32.270 --> 00:18:35.080
who's playing around with Perl
to do these sorts of things.

00:18:35.080 --> 00:18:39.167
And I showed, actually,
one of the ppg256 systems.

00:18:39.167 --> 00:18:41.250
And this person was
completely unimpressed by what

00:18:41.250 --> 00:18:42.946
the program did.

00:18:42.946 --> 00:18:47.590
But he looked at the
program and said, "Redo?"

00:18:47.590 --> 00:18:50.315
Because he'd actually never
heard of that keyword.

00:18:50.315 --> 00:18:51.940
But it turns out that
the most-- as far

00:18:51.940 --> 00:18:54.780
as I can tell-- the most
concise way to create a loop

00:18:54.780 --> 00:18:58.760
is to have a code block with
"redo" at the end, in Perl.

00:18:58.760 --> 00:18:59.740
So look at that.

00:18:59.740 --> 00:19:02.900
Even I can learn
something about Perl

00:19:02.900 --> 00:19:05.690
which probably
shouldn't be learned.

00:19:09.350 --> 00:19:12.790
So let me ask if we can
make, maybe, the screen-- we

00:19:12.790 --> 00:19:15.610
can do, for the video,
full screen for this.

00:19:15.610 --> 00:20:04.152
And I'll show you
"Alphabet Expanding."

00:20:04.152 --> 00:20:05.950
So I find this mesmerizing.

00:20:05.950 --> 00:20:08.270
It's not at all a
piece of video art.

00:20:08.270 --> 00:20:11.290
You have to start it or have
someone start it for you,

00:20:11.290 --> 00:20:13.710
I think, to really
get the effect of it.

00:20:13.710 --> 00:20:16.380
And of course, it helps
to know the code that's

00:20:16.380 --> 00:20:17.722
animating it as well.

00:20:17.722 --> 00:20:19.680
These programs-- these
Concrete Perl programs--

00:20:19.680 --> 00:20:22.730
are written for terminals
or consoles of any geometry.

00:20:22.730 --> 00:20:26.240
So they're meant to work
no matter what typography

00:20:26.240 --> 00:20:32.570
and what size of window
or console you're using.

00:20:32.570 --> 00:20:44.320
This one, here, is simply
increasing the amount

00:20:44.320 --> 00:20:47.555
of spaces between the alphabet,
which it's printing repeatedly.

00:20:47.555 --> 00:20:50.100
And it's doing that
very, very slowly.

00:20:50.100 --> 00:20:52.410
And so that alphabet
goes in and out

00:20:52.410 --> 00:20:55.754
of phase with the
size of the terminal,

00:20:55.754 --> 00:20:57.545
producing these different
types of effects.

00:21:00.270 --> 00:21:03.220
So another one of
these is "All the Names

00:21:03.220 --> 00:21:07.860
of God," which is printing every
one letter, and then, every two

00:21:07.860 --> 00:21:10.270
letter, and then, every
three letter word,

00:21:10.270 --> 00:21:14.660
and so on, until
eventually-- because it's

00:21:14.660 --> 00:21:19.390
trying to pre-compute them
all in memory-- it will crash.

00:21:19.390 --> 00:21:21.949
And if you've read Arthur C.
Clarke's "The Nine Billion

00:21:21.949 --> 00:21:25.680
Names of God," you'll probably
be glad that it does crash,

00:21:25.680 --> 00:21:29.420
since you know what the
outcome might be of continuing.

00:21:36.120 --> 00:21:39.750
And the last one of these is
actually a fairly simple one,

00:21:39.750 --> 00:21:43.190
but one that, I
think, has a point.

00:21:43.190 --> 00:21:44.660
It's called "ASCII Hegemony."

00:21:44.660 --> 00:21:47.440
So when we translated
this to Russian

00:21:47.440 --> 00:21:49.200
or transliterated
it to Cyrillic,

00:21:49.200 --> 00:21:50.350
this one stayed the same.

00:21:50.350 --> 00:21:53.670
Because this is just all the
printable characters in ASCII.

00:21:53.670 --> 00:21:59.410
And actually, early electronic
literature work in Russian

00:21:59.410 --> 00:22:00.460
was done in ASCII.

00:22:00.460 --> 00:22:03.380
Because there was not support
for the Cyrillic alphabet

00:22:03.380 --> 00:22:07.610
on the first computers that
were popularly available there.

00:22:07.610 --> 00:22:12.350
And even as we continue with
amazing projects like Unicode,

00:22:12.350 --> 00:22:14.980
there's still these questions
of how different programming

00:22:14.980 --> 00:22:16.480
languages and
different environments

00:22:16.480 --> 00:22:17.710
support different alphabets.

00:22:17.710 --> 00:22:21.750
So you can get Latin alphabet
in Perl by saying A dot dot Z.

00:22:21.750 --> 00:22:24.250
But you can't do that
for Greek, or Cyrillic,

00:22:24.250 --> 00:22:26.980
or other alphabets.

00:22:26.980 --> 00:22:29.417
Of course, you can
work around that.

00:22:29.417 --> 00:22:31.000
But your program
isn't going to end up

00:22:31.000 --> 00:22:33.110
being 32 characters
long in those cases.

00:22:38.940 --> 00:22:46.050
So I'll finish up-- this
next section, the reading,

00:22:46.050 --> 00:22:49.420
there's probably two
more little pieces here.

00:22:49.420 --> 00:22:53.900
But I'll finish up
by reading just a few

00:22:53.900 --> 00:22:56.689
of the ppg256 pieces.

00:22:56.689 --> 00:22:58.230
Let me show you what
these look like.

00:23:13.130 --> 00:23:16.330
So here's the first of
these, for instance.

00:23:16.330 --> 00:23:18.630
Besides the comments
here, I made this file

00:23:18.630 --> 00:23:21.030
so that it could
be run on Windows.

00:23:21.030 --> 00:23:25.510
But the program itself is just
the bottom three lines there.

00:23:25.510 --> 00:23:27.890
And it doesn't use-- as with
Concrete Perl, of course--

00:23:27.890 --> 00:23:30.055
it doesn't use any
external stores of data.

00:23:30.055 --> 00:23:33.210
It doesn't do anything online.

00:23:33.210 --> 00:23:35.010
Everything that it
produces is actually

00:23:35.010 --> 00:23:39.259
encoded in that 256
character program.

00:23:39.259 --> 00:23:41.300
Of course, it uses the
Perl programming language,

00:23:41.300 --> 00:23:42.924
and all the capabilities
that that has,

00:23:42.924 --> 00:23:46.240
and all the ways that
that animates computation.

00:23:46.240 --> 00:23:50.070
But everything has to be
packed into that short program.

00:23:50.070 --> 00:23:51.740
And so for me,
this is a challenge

00:23:51.740 --> 00:23:54.150
to try to explore things
about Perl, and also,

00:23:54.150 --> 00:23:55.850
about poetry and language.

00:23:55.850 --> 00:23:58.100
How could I make a
very concise program

00:23:58.100 --> 00:24:01.210
that would at least look like
a poetry generator-- would

00:24:01.210 --> 00:24:03.930
be read that way
by someone who was

00:24:03.930 --> 00:24:07.970
a generous, willing
viewer of the program?

00:24:07.970 --> 00:24:09.570
And so this is what
I came up with.

00:24:23.880 --> 00:24:26.250
I'll tell a little bit about
this before I read from it.

00:24:26.250 --> 00:24:29.290
So the first task
I set myself was

00:24:29.290 --> 00:24:31.190
to generate a very,
very large vocabulary--

00:24:31.190 --> 00:24:33.470
how could I create a
large number of words?

00:24:33.470 --> 00:24:35.740
Well, there's well
known ways to do this.

00:24:35.740 --> 00:24:37.531
So in Claude Shannon's
"Mathematical Theory

00:24:37.531 --> 00:24:40.980
of Communication," from 1948, he
describes the process by which,

00:24:40.980 --> 00:24:45.680
through using conditional
probabilities and increasing n,

00:24:45.680 --> 00:24:48.260
one might be able to
generate text at random,

00:24:48.260 --> 00:24:51.101
including words at random.

00:24:51.101 --> 00:24:52.600
The problem with
this is that if you

00:24:52.600 --> 00:24:59.770
want to use even just
bigram probabilities,

00:24:59.770 --> 00:25:02.340
you have 26 letters.

00:25:02.340 --> 00:25:05.050
And then, there's 26 letters
that could come after it.

00:25:05.050 --> 00:25:06.740
That's 276 letters.

00:25:06.740 --> 00:25:09.250
And so that's going to be a lot
of conditional probabilities

00:25:09.250 --> 00:25:12.861
for 256 characters of code.

00:25:12.861 --> 00:25:14.610
They're probably not
going to fit in there

00:25:14.610 --> 00:25:17.096
very easily, if at all.

00:25:17.096 --> 00:25:19.470
So I was trying to figure out
a different way to do this.

00:25:19.470 --> 00:25:22.260
And the way I came up with
was-- I tried a bunch of things.

00:25:22.260 --> 00:25:24.070
And I was getting,
maybe, dictionary words

00:25:24.070 --> 00:25:25.370
like 3% of the time.

00:25:25.370 --> 00:25:27.147
It was very futile.

00:25:27.147 --> 00:25:28.980
And then I decided, OK,
well, what if I just

00:25:28.980 --> 00:25:32.030
take the first two letters
of common four-letter words

00:25:32.030 --> 00:25:34.750
and the last two letters of
common four-letter words?

00:25:34.750 --> 00:25:38.240
And I'll just jam them together
at random and see what happens.

00:25:38.240 --> 00:25:41.260
Well, as it happened,
even without any fix up,

00:25:41.260 --> 00:25:44.520
I was getting 60% dictionary
words by doing that.

00:25:44.520 --> 00:25:45.900
It was pretty amazing.

00:25:45.900 --> 00:25:50.820
I had a chance to speak to a
phonologist at MIT about this,

00:25:50.820 --> 00:25:53.130
and to describe this process.

00:25:53.130 --> 00:25:58.130
And he said, oh yeah, turns
out, from monosyllables,

00:25:58.130 --> 00:26:01.250
the initial and
final bigrams are

00:26:01.250 --> 00:26:03.380
going to be pretty
much independent.

00:26:03.380 --> 00:26:07.840
And so my first thought was,
oh well, he knew that already.

00:26:07.840 --> 00:26:08.820
That's too bad.

00:26:08.820 --> 00:26:09.950
And then, I was like,
well, he probably

00:26:09.950 --> 00:26:12.040
went to graduate school for
like seven years to learn that.

00:26:12.040 --> 00:26:14.330
And I was just playing
around with a Perl program

00:26:14.330 --> 00:26:15.080
for a few hours.

00:26:15.080 --> 00:26:16.830
So maybe that's interesting.

00:26:16.830 --> 00:26:19.830
And there's other things that
I learned about this as well.

00:26:19.830 --> 00:26:23.230
So if you just produce
a string of words,

00:26:23.230 --> 00:26:27.020
it's not that recognizable
as a poem to most people.

00:26:27.020 --> 00:26:28.895
But if you shape them
into lines and stanzas,

00:26:28.895 --> 00:26:31.030
ah, it's starting to
look more like a poem.

00:26:31.030 --> 00:26:34.210
And then, I spent a good
deal of those 256 characters

00:26:34.210 --> 00:26:37.510
producing these titles at
the top of each of these,

00:26:37.510 --> 00:26:40.780
just indenting by one space.

00:26:40.780 --> 00:26:45.880
And so it turns out that
makes things, at least to me,

00:26:45.880 --> 00:26:47.690
look considerably
more like a poem.

00:26:47.690 --> 00:26:50.710
These framing elements and
the overall shape of the poem

00:26:50.710 --> 00:26:51.880
are quite important to it.

00:26:56.240 --> 00:26:58.310
"The car.

00:26:58.310 --> 00:27:00.170
Tat to baed.

00:27:00.170 --> 00:27:01.680
The bure.

00:27:01.680 --> 00:27:02.930
Hoke no tosh.

00:27:02.930 --> 00:27:04.860
Toes on hoes.

00:27:04.860 --> 00:27:06.980
Cack on bar.

00:27:06.980 --> 00:27:08.050
The pang.

00:27:08.050 --> 00:27:09.850
Rall on mosh.

00:27:09.850 --> 00:27:11.532
Bat of dear."

00:27:11.532 --> 00:27:13.240
So I'll show you the
second one of these.

00:27:13.240 --> 00:27:16.250
I tried to do some things
quite differently here.

00:27:16.250 --> 00:27:18.050
I was satisfied with
a small vocabulary.

00:27:18.050 --> 00:27:19.950
There's only 89
words this generates,

00:27:19.950 --> 00:27:23.930
including all the close
clasp words, the ampersand.

00:27:23.930 --> 00:27:26.259
But I wanted to have a
variable line length.

00:27:26.259 --> 00:27:27.800
I wanted to have a
shape of a stanza.

00:27:27.800 --> 00:27:33.490
In fact, the line tends
to become smaller,

00:27:33.490 --> 00:27:38.070
as you can see, in the pans
here, as this continues.

00:27:38.070 --> 00:27:42.880
And I wanted to have variability
of word length as well.

00:27:42.880 --> 00:27:45.070
And I was willing to sacrifice
that large vocabulary

00:27:45.070 --> 00:27:45.800
to do this.

00:27:45.800 --> 00:27:49.080
So I get things like
this in this poem.

00:27:49.080 --> 00:27:50.370
"The kits.

00:27:50.370 --> 00:27:51.585
The pan-- a kin.

00:27:51.585 --> 00:27:52.830
A twin.

00:27:52.830 --> 00:27:54.880
Of twit twits fit.

00:27:54.880 --> 00:27:55.610
Shill.

00:27:55.610 --> 00:27:57.810
Span-- the skill.

00:27:57.810 --> 00:27:59.300
Sit &amp; skit.

00:27:59.300 --> 00:28:01.630
To chin-- a shin.

00:28:01.630 --> 00:28:02.570
A spill.

00:28:02.570 --> 00:28:03.900
To sit.

00:28:03.900 --> 00:28:04.620
Fan.

00:28:04.620 --> 00:28:06.080
The grin.

00:28:06.080 --> 00:28:07.910
Grit.

00:28:07.910 --> 00:28:09.060
The grins.

00:28:09.060 --> 00:28:09.940
Twin &amp; shill.

00:28:09.940 --> 00:28:11.010
Of spit.

00:28:11.010 --> 00:28:12.710
Chill shills the grin.

00:28:12.710 --> 00:28:13.230
Spin.

00:28:13.230 --> 00:28:13.970
To spill.

00:28:13.970 --> 00:28:15.020
A kit.

00:28:15.020 --> 00:28:16.470
Chill.

00:28:16.470 --> 00:28:18.500
Twill."

00:28:18.500 --> 00:28:20.840
A solution to generating
the indefinite article

00:28:20.840 --> 00:28:25.980
is to not produce any words
that begin with vowels

00:28:25.980 --> 00:28:27.747
or that begin with vowel sounds.

00:28:27.747 --> 00:28:29.080
So I never have to produce "an."

00:28:29.080 --> 00:28:31.240
I only have to produce "a."

00:28:31.240 --> 00:28:34.520
So there's a lot of things like
that, which are not, certainly,

00:28:34.520 --> 00:28:37.020
general purpose
solutions, but which

00:28:37.020 --> 00:28:39.750
given interesting-- for me--
an interesting engagement

00:28:39.750 --> 00:28:43.920
with language and understanding
of their possible textures.

00:28:43.920 --> 00:28:46.870
So there's actually
seven of these.

00:28:46.870 --> 00:28:49.760
But I'll read a
bit from the third.

00:28:49.760 --> 00:28:52.790
And then, I'll move
on to this final thing

00:28:52.790 --> 00:28:54.800
that I wanted to share with you.

00:28:54.800 --> 00:28:58.470
And this third one, I decided,
I'll get rid of the titles.

00:28:58.470 --> 00:29:00.380
And I'll try to look
at compound words--

00:29:00.380 --> 00:29:03.070
how can I compound a list
of three-letter words

00:29:03.070 --> 00:29:05.340
that standalone as
words into new words?

00:29:05.340 --> 00:29:08.037
And how can I make something
that seems like, maybe,

00:29:08.037 --> 00:29:10.620
the beginning of a narrative--
not a full story, but something

00:29:10.620 --> 00:29:12.260
that suggests a
situation, something

00:29:12.260 --> 00:29:14.190
that's suggesting narrativity?

00:29:14.190 --> 00:29:17.310
And this is what I came up with.

00:29:17.310 --> 00:29:22.400
"One_red_manape and
the_wax_apeape cut_on.

00:29:22.400 --> 00:29:26.730
_hip_godbot and
the__boyeel ran_off.

00:29:26.730 --> 00:29:31.380
The_wan_manhat and
__apeboy put_out.

00:29:31.380 --> 00:29:35.900
One_botelf and
on__elfnun jam_her.

00:29:35.900 --> 00:29:40.790
One__godman and
one_red_elforc set_on.

00:29:40.790 --> 00:29:45.810
The__nunman and
one_fat_orcbot hit_us.

00:29:45.810 --> 00:29:51.540
One_red_hatorc and
the__apeboy put_her."

00:29:51.540 --> 00:29:54.000
So that's ppg256 3.

00:29:54.000 --> 00:29:57.560
And it's the third of seven
of these very concise Perl

00:29:57.560 --> 00:30:02.010
programs which-- I think
you get the sense-- I'm not

00:30:02.010 --> 00:30:05.980
trying to use to express things
about my life or emotion,

00:30:05.980 --> 00:30:08.940
but I'm trying to use to explore
language in a poetic way,

00:30:08.940 --> 00:30:10.740
through the making
of a poetry generator

00:30:10.740 --> 00:30:14.990
and the making of a poetic
language-- in some ways,

00:30:14.990 --> 00:30:17.849
the same type of investigation
that people are doing when

00:30:17.849 --> 00:30:20.140
they're doing linguistics or
computational linguistics,

00:30:20.140 --> 00:30:24.340
but through a different,
non-scientific means--

00:30:24.340 --> 00:30:28.120
that is, this poetic production.

00:30:28.120 --> 00:30:32.130
So I wanted to share with
you a book that I just

00:30:32.130 --> 00:30:34.270
finished and just had printed.

00:30:34.270 --> 00:30:36.240
It's called "Megawatt."

00:30:36.240 --> 00:30:39.230
And it's a book that--
there's some story behind it.

00:30:39.230 --> 00:30:42.630
The seventh of these
ppg256 programs

00:30:42.630 --> 00:30:45.900
is based on a passage from
Samuel Beckett's second novel,

00:30:45.900 --> 00:30:47.130
"Watt."

00:30:47.130 --> 00:30:52.300
And after doing this, I made
a Demoscene production called

00:30:52.300 --> 00:30:57.460
"Nanowatt," which is a 3.5K
VIC-20 program that generates

00:30:57.460 --> 00:31:00.890
8K of "Watt"
exactly, in English.

00:31:00.890 --> 00:31:05.560
And then, it goes on to
generate 8K of "Watt" in French.

00:31:05.560 --> 00:31:11.090
And these are certainly out
of the ordinary endeavors.

00:31:11.090 --> 00:31:17.000
But the point of engaging
with the novel in this way

00:31:17.000 --> 00:31:19.460
is to try to read it,
to try to understand it

00:31:19.460 --> 00:31:21.930
through reimplementing it.

00:31:21.930 --> 00:31:32.180
So I'll show a little
bit of-- here's the--

00:31:36.850 --> 00:31:40.170
So this is the book cover.

00:31:40.170 --> 00:31:43.110
And this is a little
from the preface,

00:31:43.110 --> 00:31:45.480
which is also the doc string.

00:31:45.480 --> 00:31:49.000
And "Megawatt," then, is the
third computational project

00:31:49.000 --> 00:31:52.310
I've undertaken to try to deal
with Samuel Beckett's novel.

00:31:52.310 --> 00:31:55.810
This novel has some more or
less ordinary language in it.

00:31:55.810 --> 00:31:59.410
But it also has these
really bizarre passages

00:31:59.410 --> 00:32:02.970
in which every combination
of three or four

00:32:02.970 --> 00:32:06.480
different elements
will be described.

00:32:06.480 --> 00:32:11.270
So it will be
described, for instance,

00:32:11.270 --> 00:32:17.240
that Watt heard voices which
sometimes sang, cried, stated,

00:32:17.240 --> 00:32:21.790
or murmured or that he felt
calm, and free, and glad,

00:32:21.790 --> 00:32:23.780
but maybe not calm,
and free, glad,

00:32:23.780 --> 00:32:28.600
but at least calm and free,
or free and glad, and so on.

00:32:28.600 --> 00:32:31.890
And so what I've done is to
re-implement these passages

00:32:31.890 --> 00:32:34.850
from "Watt" computationally--
created programs

00:32:34.850 --> 00:32:37.670
that would write
what Beckett wrote.

00:32:37.670 --> 00:32:40.800
And then, I extended them so
that they would say even more.

00:32:40.800 --> 00:32:44.180
So the 2 and 1/2 pages
that are in "Watt"

00:32:44.180 --> 00:32:48.270
describing Mr. Knott's
physical appearance occupy,

00:32:48.270 --> 00:32:50.440
here, more than-- the
corresponding section

00:32:50.440 --> 00:32:54.390
in "Megawatt" occupies
more than 200 pages.

00:32:54.390 --> 00:32:57.590
And I'll read you a
little bit of that.

00:32:57.590 --> 00:33:00.050
"With regard to the so
important matter of Mr. Knott's

00:33:00.050 --> 00:33:02.410
physical appearance,
Watt had, unfortunately,

00:33:02.410 --> 00:33:03.820
little or nothing to say.

00:33:03.820 --> 00:33:07.210
For one day, Mr. Knott would
be thin, small, pale, dark,

00:33:07.210 --> 00:33:10.470
brown-eyed, ectomorphic,
clean-shaven, and erect,

00:33:10.470 --> 00:33:14.300
and the next, thin, small, pale,
dark, brown-eyed, ectomorphic,

00:33:14.300 --> 00:33:18.490
clean-shaven, and stooped, and
the next, thin, small, pale,

00:33:18.490 --> 00:33:22.170
dark, brown-eyed, ectomorphic,
clean-shaven, and leaning,

00:33:22.170 --> 00:33:25.620
and the next, thin, small, pale,
dark, brown-eyed, ectomorphic,

00:33:25.620 --> 00:33:27.830
bearded, and erect."

00:33:27.830 --> 00:33:28.330
OK.

00:33:28.330 --> 00:33:31.190
And so on, for more
than 200 pages.

00:33:31.190 --> 00:33:36.440
And at the end of
this book is all

00:33:36.440 --> 00:33:38.280
of the code that's
used to generate

00:33:38.280 --> 00:33:40.410
the main text of the book.

00:33:40.410 --> 00:33:44.290
It's a 350-line Python program.

00:33:44.290 --> 00:33:48.960
And from a standpoint of reading
from literary experience,

00:33:48.960 --> 00:33:51.900
it seems that we're
confronted with things

00:33:51.900 --> 00:33:55.020
that, although in terms
of the amount of time

00:33:55.020 --> 00:33:56.560
it takes to read
them, we physically

00:33:56.560 --> 00:33:59.620
have the time, in our lives,
to read something like this.

00:33:59.620 --> 00:34:05.720
But it's illegible due to not
being created in a human way,

00:34:05.720 --> 00:34:06.980
for reading.

00:34:06.980 --> 00:34:09.340
But we can still encounter
it computationally.

00:34:09.340 --> 00:34:12.500
And so "Megawatt" is
part of that project.

00:34:12.500 --> 00:34:20.060
And "#!" is another aspect of
that project, not to confuse,

00:34:20.060 --> 00:34:26.810
not to puzzle people, but
to show that computation is

00:34:26.810 --> 00:34:29.290
something that can engage with
poetry and language in new

00:34:29.290 --> 00:34:31.300
sorts of ways.

00:34:31.300 --> 00:34:34.630
And of course, the focus is
on these very simple programs,

00:34:34.630 --> 00:34:36.620
which, for the most part,
can be used offline.

00:34:36.620 --> 00:34:38.420
There's only one
part of "Megawatt"

00:34:38.420 --> 00:34:41.639
that even makes use of WordNet.

00:34:41.639 --> 00:34:45.260
Because there's the
dish that Mr. Knott eats

00:34:45.260 --> 00:34:48.460
that seems to contain
every possible food in it.

00:34:48.460 --> 00:34:51.579
And so I use WordNet to
enumerate that possibility.

00:34:54.790 --> 00:34:57.010
So that's some about
the project of "#!"

00:34:57.010 --> 00:35:00.150
and this newly released book.

00:35:00.150 --> 00:35:03.510
And with that, I'll
open it up to questions.

00:35:12.450 --> 00:35:16.819
AUDIENCE: So does your
code come with a license?

00:35:16.819 --> 00:35:17.610
NICK MONTFORT: Yes.

00:35:17.610 --> 00:35:21.130
So generally, all the
code is ISC licensed.

00:35:21.130 --> 00:35:24.800
So it's all free software.

00:35:24.800 --> 00:35:27.060
When you find it online,
it has this license.

00:35:27.060 --> 00:35:31.510
I have a note in "#!" saying
that it's free software

00:35:31.510 --> 00:35:33.570
and where to find it online.

00:35:33.570 --> 00:35:36.070
But we didn't repeat
the license for each one

00:35:36.070 --> 00:35:38.700
of these very short programs,
many of which-- I mean,

00:35:38.700 --> 00:35:40.350
we have a 32-character
Perl program.

00:35:40.350 --> 00:35:44.590
It's a little onerous to include
even a very short license

00:35:44.590 --> 00:35:46.490
in that case.

00:35:46.490 --> 00:35:49.890
It's also a question as to
whether a 32-character Perl

00:35:49.890 --> 00:35:53.860
program can be copywritten.

00:35:53.860 --> 00:36:00.880
I'm not sure-- short phrases do
not fall under copyright law.

00:36:00.880 --> 00:36:04.650
So it's not obvious
to me whether those

00:36:04.650 --> 00:36:06.370
would be afforded
copyright protection.

00:36:06.370 --> 00:36:07.786
AUDIENCE: Well
then, then followup

00:36:07.786 --> 00:36:11.780
question is, does your
code contain expression.

00:36:11.780 --> 00:36:15.450
MALE SPEAKER: Oh, I
hope-- well, I hope not.

00:36:15.450 --> 00:36:15.980
Yes.

00:36:15.980 --> 00:36:20.560
Because most of it is a
very conceptual project.

00:36:20.560 --> 00:36:22.060
I mean, certainly,
"Taroko Gorge"

00:36:22.060 --> 00:36:25.940
is expressive of a type of
experience, a type of feeling.

00:36:25.940 --> 00:36:28.130
It's one that can
be continued, that

00:36:28.130 --> 00:36:29.490
doesn't have a particular end.

00:36:29.490 --> 00:36:31.450
It's an experience of nature.

00:36:31.450 --> 00:36:35.440
So there are aspects
of expression in it.

00:36:35.440 --> 00:36:38.080
But to me, that's not the point.

00:36:38.080 --> 00:36:41.210
It is something that
I'm using to investigate

00:36:41.210 --> 00:36:44.000
language, form, poetry.

00:36:44.000 --> 00:36:46.110
And other people
can do other types

00:36:46.110 --> 00:36:50.520
of projects that are more
focused on expression.

00:36:50.520 --> 00:36:57.090
But those are the things that
interest me particularly, is

00:36:57.090 --> 00:36:59.230
really to be an investigator
of language, which

00:36:59.230 --> 00:37:05.000
has such an amazing history
and such a rich potential

00:37:05.000 --> 00:37:08.810
to connect and divide
in various ways.

00:37:08.810 --> 00:37:10.230
AUDIENCE: What about color?

00:37:10.230 --> 00:37:13.400
Have you ever played with
terminal colors, like 256 color

00:37:13.400 --> 00:37:14.410
xterm, for example?

00:37:17.060 --> 00:37:20.360
NICK MONTFORT: I
think, probably,

00:37:20.360 --> 00:37:26.771
just decorating things on the
web is about the only thing

00:37:26.771 --> 00:37:28.145
that I've done
along those lines.

00:37:32.880 --> 00:37:37.250
With things like Concrete Perl,
which are visual programs,

00:37:37.250 --> 00:37:39.540
I really tried to
make them more or less

00:37:39.540 --> 00:37:45.102
generic to the color of
text or the typography.

00:37:45.102 --> 00:37:45.810
AUDIENCE: Thanks.

00:37:45.810 --> 00:37:46.851
NICK MONTFORT: All right.

00:37:51.470 --> 00:37:53.410
AUDIENCE: So the
generators you've presented

00:37:53.410 --> 00:37:54.485
are all fairly minimal.

00:37:54.485 --> 00:37:56.970
So you have any
longer form works

00:37:56.970 --> 00:37:59.170
that aren't quite
interactive fiction,

00:37:59.170 --> 00:38:02.590
but are somewhere between
these minimalistic examples

00:38:02.590 --> 00:38:03.915
and normal Z-machine programs?

00:38:10.487 --> 00:38:11.320
NICK MONTFORT: Yeah.

00:38:11.320 --> 00:38:14.810
So certainly, the focus in
"#!" is on these very short

00:38:14.810 --> 00:38:15.370
programs.

00:38:15.370 --> 00:38:20.370
I think that almost all of
them fit on a single page.

00:38:20.370 --> 00:38:23.230
And some of them
are much shorter.

00:38:23.230 --> 00:38:27.700
And it's probably-- yeah,
so "Through the Park"

00:38:27.700 --> 00:38:30.930
and "Taroko Gorge"
go across two pages.

00:38:30.930 --> 00:38:32.920
They're quite brief.

00:38:32.920 --> 00:38:34.910
In part, my interest
in these short programs

00:38:34.910 --> 00:38:37.580
is just that there's
still enough to do

00:38:37.580 --> 00:38:39.540
in the very short
amount of space--

00:38:39.540 --> 00:38:41.430
a very small amount of
computation-- that's

00:38:41.430 --> 00:38:43.630
interesting that I don't
feel like moving on

00:38:43.630 --> 00:38:45.630
from that in many cases.

00:38:45.630 --> 00:38:48.720
It's also something where I can
afford to more intensively go

00:38:48.720 --> 00:38:51.860
over this and understand
more about it if I

00:38:51.860 --> 00:38:54.970
have something short.

00:38:54.970 --> 00:38:56.760
I have systems--
I mean, "Megawatt"

00:38:56.760 --> 00:39:01.610
is 350 lines, which is
getting to be longer.

00:39:01.610 --> 00:39:05.030
It's not a large scale,
enterprise program.

00:39:05.030 --> 00:39:11.820
I do have this
system, Curveship,

00:39:11.820 --> 00:39:16.640
which is a full
interactive fiction system.

00:39:16.640 --> 00:39:19.050
And it's implemented in Python.

00:39:19.050 --> 00:39:22.260
And it does the
basics of what systems

00:39:22.260 --> 00:39:27.580
like Inform, TADS, that
line of work will implement.

00:39:27.580 --> 00:39:30.140
And plus, it also allows
for narrative variation

00:39:30.140 --> 00:39:31.820
so that the same
underlying events

00:39:31.820 --> 00:39:34.730
can be represented
different ways.

00:39:34.730 --> 00:39:39.540
So that's a larger scale
project which I'm pleased with.

00:39:39.540 --> 00:39:42.790
But on the other hand,
I've never really written--

00:39:42.790 --> 00:39:45.700
I have demonstration programs
that I've done in Curveship.

00:39:45.700 --> 00:39:48.680
But I've never really
written an original work,

00:39:48.680 --> 00:39:51.450
in Curveship, that was an
extensive original work.

00:39:51.450 --> 00:39:53.780
And I think it's
possible that that's

00:39:53.780 --> 00:39:56.980
because I spent so much time
working on the system itself

00:39:56.980 --> 00:39:58.220
and building all of this out.

00:40:01.230 --> 00:40:08.570
So my focus has been
on this smaller scale.

00:40:08.570 --> 00:40:14.090
But I think there's
interesting possibilities

00:40:14.090 --> 00:40:16.510
for individual and
collaborative authorship

00:40:16.510 --> 00:40:18.570
of medium scale works.

00:40:18.570 --> 00:40:21.510
I mean, one of these
pieces that is definitely

00:40:21.510 --> 00:40:25.360
larger-- which is a
collaboration of mine,

00:40:25.360 --> 00:40:28.490
with Stephanie Strickland--
is "Sea and Spar Between."

00:40:28.490 --> 00:40:34.120
So this is a poetry generator
we published in 2011.

00:40:34.120 --> 00:40:41.240
And it's a conflation of a Emily
Dickinson's-- a lexicon of her

00:40:41.240 --> 00:40:46.820
poems and of the
lexicon of "Moby Dick."

00:40:46.820 --> 00:40:50.370
And it's about 225
trillion stanzas

00:40:50.370 --> 00:40:52.250
that are arranged
in this lattice.

00:40:52.250 --> 00:40:54.430
So there's coordinates,
and you can go to them.

00:40:54.430 --> 00:41:00.140
It's actually a fixed
text that you can go to.

00:41:00.140 --> 00:41:02.840
But it's so large that
it's meaningless to treat

00:41:02.840 --> 00:41:03.340
it that way.

00:41:03.340 --> 00:41:06.530
You might as well just open
it up, and look around,

00:41:06.530 --> 00:41:11.220
and encounter it the
way we're doing now.

00:41:11.220 --> 00:41:15.320
And this is a larger
scale project--

00:41:15.320 --> 00:41:19.210
I'd say sort of medium scale.

00:41:19.210 --> 00:41:23.930
And for a collaborative
project that spanned some time,

00:41:23.930 --> 00:41:29.070
it was pretty useful to
do something of this size.

00:41:29.070 --> 00:41:34.040
So you can go to-- if I
go to 0.500, what's that?

00:41:34.040 --> 00:41:35.750
"Listen now, for
hueless is the sky.

00:41:35.750 --> 00:41:38.390
One air, one air,
one each, one play.

00:41:38.390 --> 00:41:40.180
Paradise!

00:41:40.180 --> 00:41:41.440
Spirit!"

00:41:41.440 --> 00:41:43.080
And then, I can
go somewhere else.

00:41:43.080 --> 00:41:47.165
I'm just navigating here.

00:41:47.165 --> 00:41:52.370
If I go back to 1.500-- oh,
0.500 is what I was looking

00:41:52.370 --> 00:41:53.446
for.

00:41:53.446 --> 00:41:54.140
Oops.

00:41:54.140 --> 00:41:59.337
I have to type it right-- I
should get the same thing.

00:41:59.337 --> 00:42:00.830
Yeah.

00:42:00.830 --> 00:42:06.240
"Listen now, for
hueless is the sky."

00:42:06.240 --> 00:42:11.442
So this is an example of
a medium scale project.

00:42:11.442 --> 00:42:13.400
I mean, there's different
things that come out.

00:42:13.400 --> 00:42:16.200
So this has actually
been remixed the way

00:42:16.200 --> 00:42:19.150
that "Taroko Gorge" was
once, that we know of.

00:42:19.150 --> 00:42:20.950
It's been translated
to Polish, which

00:42:20.950 --> 00:42:22.740
is an amazing undertaking.

00:42:22.740 --> 00:42:25.510
And it's also been remixed
to create a piece called

00:42:25.510 --> 00:42:27.370
"House of Leaves
of Grass," which

00:42:27.370 --> 00:42:31.640
is based on Mark Danielewski
and Walt Whitman.

00:42:31.640 --> 00:42:33.600
And Mark Sample did that.

00:42:33.600 --> 00:42:39.250
So one of the things is that,
these very small scale pieces,

00:42:39.250 --> 00:42:42.400
they invite others to
study and understand them,

00:42:42.400 --> 00:42:44.380
to manipulate them,
to rework them

00:42:44.380 --> 00:42:46.420
to create their own
pieces based on them.

00:42:46.420 --> 00:42:48.960
So in that case, "Taroko
Gorge" was, I think,

00:42:48.960 --> 00:42:50.060
extremely successful.

00:42:50.060 --> 00:42:55.350
If I'd made it 10 times the size
that it was-- it fit on one--

00:42:55.350 --> 00:42:57.260
it's less than 66 lines long.

00:42:57.260 --> 00:43:01.360
It fits on one dot
matrix printed page.

00:43:01.360 --> 00:43:04.500
And if I'd made it
10 times as big,

00:43:04.500 --> 00:43:06.950
nothing that you saw there,
along the right-hand side--

00:43:06.950 --> 00:43:11.500
all of those remixes and
work-- would have happened.

00:43:11.500 --> 00:43:14.270
So there's some
significant benefits

00:43:14.270 --> 00:43:16.360
to doing smaller pieces.

00:43:16.360 --> 00:43:23.430
And I think that you shouldn't
exceed the size of your concept

00:43:23.430 --> 00:43:26.630
in writing programs like
this, poems like this,

00:43:26.630 --> 00:43:27.670
in this sort of code.

00:43:27.670 --> 00:43:30.370
But if you have something
that is a bit more expensive,

00:43:30.370 --> 00:43:34.152
then it makes sense to
have a larger project.

00:43:34.152 --> 00:43:36.265
AUDIENCE: Thanks.

00:43:36.265 --> 00:43:37.890
NICK MONTFORT: If
There's no questions,

00:43:37.890 --> 00:43:40.330
I'll just offer
some company names

00:43:40.330 --> 00:43:41.940
for anyone who would like them.

00:43:50.138 --> 00:43:52.020
MALE SPEAKER: Well,
let's thank Nick.

00:43:52.020 --> 00:43:53.530
NICK MONTFORT: All right.

00:43:53.530 --> 00:43:54.730
Thanks.

00:43:54.730 --> 00:43:56.580
Thank you.

