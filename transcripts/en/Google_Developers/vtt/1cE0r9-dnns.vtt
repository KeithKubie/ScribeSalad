WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.904
[MUSIC PLAYING]

00:00:06.652 --> 00:00:07.610
KEVIN NILSON: everyone.

00:00:07.610 --> 00:00:08.570
Thank you for coming.

00:00:08.570 --> 00:00:11.170
My name is Kevin Nilson, and
I lead the Technical Solutions

00:00:11.170 --> 00:00:14.440
Engineering team
for Google Cast.

00:00:14.440 --> 00:00:16.840
And today what I'm going
to do is talk to you

00:00:16.840 --> 00:00:20.920
about some of the latest
features for Google Cast.

00:00:20.920 --> 00:00:22.960
But before I do that,
I know that there's

00:00:22.960 --> 00:00:25.240
some of you who are
watching who may not

00:00:25.240 --> 00:00:27.370
be familiar with Google
Cast, so I want to give

00:00:27.370 --> 00:00:29.200
a really quick overview.

00:00:29.200 --> 00:00:33.460
So Google Cast is made up
of senders and receivers.

00:00:33.460 --> 00:00:37.270
And what senders are is your
mobile phone, such as Android,

00:00:37.270 --> 00:00:40.360
iOS, or a Chrome browser.

00:00:40.360 --> 00:00:43.940
And that controls
the video playback.

00:00:43.940 --> 00:00:46.420
And then the video
playback is done, actually,

00:00:46.420 --> 00:00:48.840
in an HTML5 receiver.

00:00:48.840 --> 00:00:51.790
And that runs often in
something like a Chromecast,

00:00:51.790 --> 00:00:54.970
or a Chromecast Ultra,
Chromecast Audio,

00:00:54.970 --> 00:00:57.880
or even a Google Home.

00:00:57.880 --> 00:01:00.970
And so let's look at how
that interaction behaves

00:01:00.970 --> 00:01:02.480
and how it happens.

00:01:02.480 --> 00:01:04.690
And so you see here
in this illustration

00:01:04.690 --> 00:01:07.960
that someone is watching
video playback on their phone.

00:01:07.960 --> 00:01:10.270
And they're watching that
playback, but they look up

00:01:10.270 --> 00:01:11.950
and they see the big screen.

00:01:11.950 --> 00:01:14.855
And they think, I'd like to see
that up on that bigger screen.

00:01:14.855 --> 00:01:17.390
And so what they do is they
go down to their phone,

00:01:17.390 --> 00:01:20.740
they click the Cast icon,
and that casts the video up

00:01:20.740 --> 00:01:22.450
to their television.

00:01:22.450 --> 00:01:24.880
At that point, their sender--

00:01:24.880 --> 00:01:26.350
or phone or sender--

00:01:26.350 --> 00:01:28.750
becomes a remote
control and lets

00:01:28.750 --> 00:01:30.145
them control video playback.

00:01:32.660 --> 00:01:37.220
Now I want to talk about the
Cast application framework.

00:01:37.220 --> 00:01:40.060
So the Cast
application framework

00:01:40.060 --> 00:01:43.330
is a framework that has a
lot of great advantages.

00:01:43.330 --> 00:01:46.010
And really, what we've
gone out and tried to do

00:01:46.010 --> 00:01:51.200
is to create a framework that
is really built from the ground

00:01:51.200 --> 00:01:54.950
up around building a
simple media application

00:01:54.950 --> 00:01:56.790
experience for developers.

00:01:56.790 --> 00:01:59.180
We wanted to build something
that's more reliable

00:01:59.180 --> 00:02:02.960
and has UI widgets
out of the box

00:02:02.960 --> 00:02:05.360
so that when you go to
build a Cast application

00:02:05.360 --> 00:02:07.880
framework and a
Cast integration,

00:02:07.880 --> 00:02:10.960
you write a whole lot less code.

00:02:10.960 --> 00:02:15.250
Last year at Google I/O right
here at Shoreline Amphitheater,

00:02:15.250 --> 00:02:18.010
we actually launched the
Cast application framework

00:02:18.010 --> 00:02:20.440
for iOS and Android.

00:02:20.440 --> 00:02:22.690
And then later in
the fall, we launched

00:02:22.690 --> 00:02:25.390
that for the Chrome web sender.

00:02:25.390 --> 00:02:27.370
And what I'm excited
today to announce

00:02:27.370 --> 00:02:30.610
is that we are launching the
Cast application framework

00:02:30.610 --> 00:02:33.107
receiver very, very soon.

00:02:33.107 --> 00:02:34.690
And I'm going to
give you a sneak peak

00:02:34.690 --> 00:02:36.370
and show you a
bunch of the code.

00:02:36.370 --> 00:02:39.430
And we actually had a
lot of our top developers

00:02:39.430 --> 00:02:41.890
that came into Mountain
View, down to Google Campus,

00:02:41.890 --> 00:02:45.790
earlier this week, and
we gave a hands-on lab

00:02:45.790 --> 00:02:48.310
for those developers where
they could get a sneak peek,

00:02:48.310 --> 00:02:49.070
try it out.

00:02:49.070 --> 00:02:52.330
But most importantly, so that we
could gather a lot of feedback

00:02:52.330 --> 00:02:55.300
from them so that we
know when we launch this,

00:02:55.300 --> 00:02:57.610
it's ready and better than ever.

00:02:57.610 --> 00:03:00.295
And one of the real advantages,
or one of the real things

00:03:00.295 --> 00:03:02.920
that we're trying to do with the
new Cast application framework

00:03:02.920 --> 00:03:07.710
receiver is make sure
that it's voice ready.

00:03:07.710 --> 00:03:11.220
So as I mentioned last year, we
launched the Cast application

00:03:11.220 --> 00:03:14.490
framework for Android,
iOS, and the web sender.

00:03:14.490 --> 00:03:17.100
And this is just a highlight
of some of the partners

00:03:17.100 --> 00:03:20.150
who've gone out there
and done that migration.

00:03:20.150 --> 00:03:22.920
And for them, they've got
a lot of great feedback

00:03:22.920 --> 00:03:24.120
from their users.

00:03:24.120 --> 00:03:26.400
Their users have really
loved the experience, where

00:03:26.400 --> 00:03:28.620
it's gone, and
specifically, I do

00:03:28.620 --> 00:03:31.980
want to call out that folks have
found their applications to be

00:03:31.980 --> 00:03:35.170
much more reliable.

00:03:35.170 --> 00:03:39.090
Now I want to share with you
a simple showcase from one

00:03:39.090 --> 00:03:42.210
of our top partners listed
on the previous slide.

00:03:42.210 --> 00:03:44.430
And this is about
two months of data.

00:03:44.430 --> 00:03:47.980
And so if you kind of watch
that green line go across,

00:03:47.980 --> 00:03:52.050
you can see that playback
was very constant.

00:03:52.050 --> 00:03:54.300
And then all of a sudden,
when they migrated

00:03:54.300 --> 00:03:58.350
to the Cast application
framework, playback increased

00:03:58.350 --> 00:03:59.820
dramatically.

00:03:59.820 --> 00:04:02.120
And so we really
wanted to look and see

00:04:02.120 --> 00:04:04.765
what caused that,
what was the reason?

00:04:04.765 --> 00:04:08.040
And so we started overlaying
other data on top to try

00:04:08.040 --> 00:04:09.660
to see what else changed.

00:04:09.660 --> 00:04:12.690
And what we saw was
that connections

00:04:12.690 --> 00:04:13.834
greatly disconnected.

00:04:13.834 --> 00:04:16.209
And you think about that, that
doesn't really make sense.

00:04:16.209 --> 00:04:20.190
Why would connections decrease
when playback increases?

00:04:20.190 --> 00:04:23.650
And what we realized, after
digging a little bit deeper,

00:04:23.650 --> 00:04:28.260
is that basically, what was
happening is reconnection

00:04:28.260 --> 00:04:33.639
was failing due to code that
was in there previously.

00:04:33.639 --> 00:04:35.430
And so with the Cast
application framework,

00:04:35.430 --> 00:04:39.690
we really want to handle
reconnection logic out

00:04:39.690 --> 00:04:43.290
of the box for all of you
to make it much easier

00:04:43.290 --> 00:04:47.920
and give a much
better experience.

00:04:47.920 --> 00:04:50.840
Now we'll talk about integration
with the Google Assistant

00:04:50.840 --> 00:04:52.530
and voice.

00:04:52.530 --> 00:04:55.590
Many of you will remember
from last year at Google I/O

00:04:55.590 --> 00:04:58.110
where we announced
the Google Home.

00:04:58.110 --> 00:05:00.810
And what's really nice
about the Google Home,

00:05:00.810 --> 00:05:03.690
it brings the far-field
mic into your home, often

00:05:03.690 --> 00:05:07.090
into your living room, where
you can ask it questions,

00:05:07.090 --> 00:05:08.790
do a lot of interesting things.

00:05:08.790 --> 00:05:12.380
And then obviously, control
video and audio playback

00:05:12.380 --> 00:05:15.270
in your living room or
other places of your home.

00:05:15.270 --> 00:05:19.050
And one of the really nice parts
for a Google Cast developer

00:05:19.050 --> 00:05:22.620
is that Google Home is
also a Cast receiver.

00:05:22.620 --> 00:05:26.610
So all the code that you wrote
to integrate with Chromecast,

00:05:26.610 --> 00:05:29.010
or Chromecast Audio,
or Chromecast Ultra

00:05:29.010 --> 00:05:31.950
is also the exact same
code to make your app

00:05:31.950 --> 00:05:33.340
work on Google Home.

00:05:35.870 --> 00:05:42.170
So as I began using Google
Home with my family, one

00:05:42.170 --> 00:05:45.050
of the things that
I really realized

00:05:45.050 --> 00:05:47.420
for myself is that
there is nothing

00:05:47.420 --> 00:05:49.540
more natural than voice.

00:05:49.540 --> 00:05:51.540
And it's been very eye-opening.

00:05:51.540 --> 00:05:53.450
These are my two youngest boys.

00:05:53.450 --> 00:05:58.910
And seeing them even leverage
their voice to control things

00:05:58.910 --> 00:06:01.790
in my home has been
absolutely amazing.

00:06:01.790 --> 00:06:04.850
And I want to share with you a
story from about a month ago.

00:06:04.850 --> 00:06:08.750
I took my family to Disneyland
and we did a long drive,

00:06:08.750 --> 00:06:11.000
drove down to LA.

00:06:11.000 --> 00:06:13.880
And when we got to our
hotel down in Santa Monica,

00:06:13.880 --> 00:06:18.290
the boys quickly held
each other's hands

00:06:18.290 --> 00:06:20.990
and ran throughout the
hotel, trying to turn things

00:06:20.990 --> 00:06:24.260
on with their voice, sort of
imitating what they've seen

00:06:24.260 --> 00:06:26.180
their father do so many times.

00:06:26.180 --> 00:06:30.380
And it became so apparent to
me that this next generation,

00:06:30.380 --> 00:06:32.090
when they look at
the world, they

00:06:32.090 --> 00:06:35.150
think about doing that
control with their voice.

00:06:35.150 --> 00:06:37.790
Turning on the light switch
never occurred to them.

00:06:37.790 --> 00:06:38.894
It's so natural.

00:06:38.894 --> 00:06:41.060
And I think for you, this
is the opportunity for you

00:06:41.060 --> 00:06:43.540
to go out there and start
voice enabling your media

00:06:43.540 --> 00:06:48.160
applications right away
so you're ready for that.

00:06:48.160 --> 00:06:50.500
Many of you will
remember from the Keynote

00:06:50.500 --> 00:06:54.010
just yesterday some of
the really awesome things

00:06:54.010 --> 00:06:57.820
that we showed of integrating
speaking to the Google Home

00:06:57.820 --> 00:07:00.070
and showing additional
data on the TV.

00:07:00.070 --> 00:07:02.620
So here's an example
that Rishi had shown.

00:07:02.620 --> 00:07:04.510
And you can see
down at the bottom

00:07:04.510 --> 00:07:07.750
the chips that are suggesting
additional ways you

00:07:07.750 --> 00:07:09.430
can filter that data.

00:07:09.430 --> 00:07:12.220
And it really brings
the assistant together

00:07:12.220 --> 00:07:15.430
with the Chromecast
and the Google Home

00:07:15.430 --> 00:07:19.910
and gives a great
experience for the users.

00:07:19.910 --> 00:07:23.350
Now I want to go ahead and talk
about the new Cast application

00:07:23.350 --> 00:07:25.550
framework receiver that
I'm announcing here

00:07:25.550 --> 00:07:28.540
at Google I/O.
And that receiver,

00:07:28.540 --> 00:07:32.110
we want it to be
significantly more reliable

00:07:32.110 --> 00:07:34.450
and voice ready out of the box.

00:07:34.450 --> 00:07:37.510
And with that receiver,
what we're hoping is

00:07:37.510 --> 00:07:40.420
it has all the same
advantages that you

00:07:40.420 --> 00:07:44.780
saw with the other parts of
the Cast application framework.

00:07:44.780 --> 00:07:49.090
And that is having UI widgets
built out of the box and ready,

00:07:49.090 --> 00:07:51.990
control for voice
out of the box,

00:07:51.990 --> 00:07:55.510
and a much more reliable
experience where developers

00:07:55.510 --> 00:07:58.210
are writing
significantly less code

00:07:58.210 --> 00:08:00.212
to get that great experience.

00:08:00.212 --> 00:08:02.170
So here's a list of some
of the things that you

00:08:02.170 --> 00:08:05.680
can do, one of those being
voice control, such as asking,

00:08:05.680 --> 00:08:07.450
what's playing on my TV?

00:08:07.450 --> 00:08:10.720
So to do that with the new Cast
application framework receiver,

00:08:10.720 --> 00:08:13.180
you actually don't have
to write any code at all.

00:08:13.180 --> 00:08:13.960
You get that.

00:08:13.960 --> 00:08:17.410
You get that out of the
box with the new receiver.

00:08:17.410 --> 00:08:19.270
You're also able to
do things like turning

00:08:19.270 --> 00:08:23.800
on and off captions,
changing audio tracks,

00:08:23.800 --> 00:08:27.640
or controlling the experience,
such as pausing, resuming,

00:08:27.640 --> 00:08:28.150
or seeking.

00:08:31.270 --> 00:08:34.960
The new receiver also has
a lot of improvements.

00:08:34.960 --> 00:08:37.407
And we already mentioned
the voice interactions.

00:08:37.407 --> 00:08:39.115
There's also a whole
list of other things

00:08:39.115 --> 00:08:40.400
that you can see here.

00:08:40.400 --> 00:08:42.340
But most importantly,
you're going

00:08:42.340 --> 00:08:46.270
to write a whole lot less
code and get more features out

00:08:46.270 --> 00:08:47.710
of the box.

00:08:47.710 --> 00:08:49.630
And really, what
we wanted to do is

00:08:49.630 --> 00:08:52.120
one of the main
underlying principles

00:08:52.120 --> 00:08:55.300
was take our media
player and integrate that

00:08:55.300 --> 00:08:58.480
into the receiver
for the API surface

00:08:58.480 --> 00:09:00.970
so that you had a
single API surface that

00:09:00.970 --> 00:09:06.740
was much simpler than
dealing with them separately.

00:09:06.740 --> 00:09:08.650
So now let's jump into the code.

00:09:08.650 --> 00:09:12.340
So the code that we have
here is the simplest code

00:09:12.340 --> 00:09:15.850
to create a receiver
application.

00:09:15.850 --> 00:09:19.690
And what you'll do is start
by creating a custom element

00:09:19.690 --> 00:09:22.300
adding the Cast media player.

00:09:22.300 --> 00:09:25.510
And then from there, you'll
add one JavaScript library,

00:09:25.510 --> 00:09:27.880
the Cast framework JS.

00:09:27.880 --> 00:09:30.220
And then you're going
to grab an instance

00:09:30.220 --> 00:09:32.835
of the CastReceiverContext
and call start.

00:09:32.835 --> 00:09:35.650
And so that's all the
code you have to write.

00:09:35.650 --> 00:09:39.670
This receiver will work, it'll
play, it'll pause, it'll scrub,

00:09:39.670 --> 00:09:44.430
it'll have voice
control ready for you.

00:09:44.430 --> 00:09:47.940
But a lot of people need
some additional custom logic

00:09:47.940 --> 00:09:49.420
in their application.

00:09:49.420 --> 00:09:52.110
So here's an example
of how do you

00:09:52.110 --> 00:09:56.520
deal with loading a different
stream on your receiver

00:09:56.520 --> 00:09:58.650
than what you have in
your mobile phone, which

00:09:58.650 --> 00:10:01.500
is a very common use case,
because a lot of people

00:10:01.500 --> 00:10:05.364
will use a 4k case
stream on Chromecast,

00:10:05.364 --> 00:10:06.780
while on their
phone they're going

00:10:06.780 --> 00:10:11.970
to use a much lighter weight
stream with a lower resolution.

00:10:11.970 --> 00:10:13.470
And so what we've
introduced to make

00:10:13.470 --> 00:10:17.100
this possible, following
AOP principles,

00:10:17.100 --> 00:10:19.190
would be a message interceptor.

00:10:19.190 --> 00:10:22.590
And so you can see here I've got
the player, created a message

00:10:22.590 --> 00:10:24.870
interceptor, and
then basically, I'm

00:10:24.870 --> 00:10:26.880
intercepting the load request.

00:10:26.880 --> 00:10:29.640
And load is basically
the play command.

00:10:29.640 --> 00:10:32.280
And inside of the
load request, I'm

00:10:32.280 --> 00:10:35.160
going to go ahead and
I have a private API

00:10:35.160 --> 00:10:38.130
that I've written where am I to
go out and fetch those assets,

00:10:38.130 --> 00:10:42.900
and figure out from the ID, what
URL do I actually want to play?

00:10:42.900 --> 00:10:45.420
And then you can see here,
I'm able to use a promise.

00:10:45.420 --> 00:10:47.250
And when the promise
completes, then I'll

00:10:47.250 --> 00:10:49.440
set the-- when I
get my response,

00:10:49.440 --> 00:10:52.710
I'll go ahead and set my
contents ID and then return it.

00:10:52.710 --> 00:10:55.240
And that's all you need to do.

00:10:55.240 --> 00:10:56.740
Now I want to talk
about, well, what

00:10:56.740 --> 00:10:58.960
happened if the
API call had failed

00:10:58.960 --> 00:11:00.670
and you do have a failure?

00:11:00.670 --> 00:11:02.530
So here I've got a
verifyCredentials

00:11:02.530 --> 00:11:05.560
call that I made when
the load request came in.

00:11:05.560 --> 00:11:07.270
And then you can
see in the catch,

00:11:07.270 --> 00:11:10.060
I set the error type
to load failure.

00:11:10.060 --> 00:11:13.206
And I'm setting the error reason
to authentication expired.

00:11:13.206 --> 00:11:14.830
And so you definitely
want to make sure

00:11:14.830 --> 00:11:17.050
that you're handling
these errors.

00:11:17.050 --> 00:11:21.650
And it's very simple to do
that within the promise.

00:11:21.650 --> 00:11:25.530
Another thing that we've created
is a playback config object.

00:11:25.530 --> 00:11:27.470
And really, what
we're trying to do

00:11:27.470 --> 00:11:29.960
is to create a single
object that holds

00:11:29.960 --> 00:11:32.030
all of your configuration.

00:11:32.030 --> 00:11:34.370
Because previously,
you had to go

00:11:34.370 --> 00:11:36.620
throughout the code
in various places

00:11:36.620 --> 00:11:38.840
and add all this configuration.

00:11:38.840 --> 00:11:41.540
We wanted to be able to
read these properties

00:11:41.540 --> 00:11:42.957
from a single location.

00:11:42.957 --> 00:11:44.540
And so you can see
some examples here,

00:11:44.540 --> 00:11:46.950
such as setting the
initial bandwidth.

00:11:46.950 --> 00:11:49.250
So you can see here,
I set it to 2 megabit

00:11:49.250 --> 00:11:50.960
for the adaptive bit rate.

00:11:50.960 --> 00:11:53.150
Setting which license
server that you're going

00:11:53.150 --> 00:11:55.070
to use with the license URL.

00:11:55.070 --> 00:11:57.970
And then whether or not
you're passing credentials

00:11:57.970 --> 00:12:02.357
with each manifest request that
go across with the headers,

00:12:02.357 --> 00:12:03.065
the HTTP headers.

00:12:05.580 --> 00:12:09.780
Another thing that we added was
a simple single line of code

00:12:09.780 --> 00:12:12.720
that allows you to get
access to both text

00:12:12.720 --> 00:12:14.910
tracks and audio tracks.

00:12:14.910 --> 00:12:18.450
And those of you who've worked
with Cast SDK in the past

00:12:18.450 --> 00:12:21.180
know that previously,
this took a lot of code.

00:12:21.180 --> 00:12:22.380
It was a lot of code.

00:12:22.380 --> 00:12:25.470
And this is just one
example of an area where

00:12:25.470 --> 00:12:29.460
we looked at what optimizations
can we make for common use

00:12:29.460 --> 00:12:31.830
cases that developers
are doing to make

00:12:31.830 --> 00:12:36.230
it really simple with the Cast
application framework receiver.

00:12:36.230 --> 00:12:39.870
There at the bottom, you can
see a single line of code

00:12:39.870 --> 00:12:43.800
that allows you to look
up tracks by language.

00:12:43.800 --> 00:12:46.170
And so where this is really
important is when you're

00:12:46.170 --> 00:12:48.210
integrating with
voice and someone

00:12:48.210 --> 00:12:53.910
asks, show the closed captions
in Spanish, for example.

00:12:53.910 --> 00:12:56.010
Here you have just a
single line of code

00:12:56.010 --> 00:12:57.960
that will let you
look up all available

00:12:57.960 --> 00:13:03.080
tracks in Spanish, or in
English here in this example.

00:13:03.080 --> 00:13:06.070
Now, I want to talk about
our eventing framework

00:13:06.070 --> 00:13:07.420
that we've added.

00:13:07.420 --> 00:13:10.900
And so one example of eventing
where you may want to use this

00:13:10.900 --> 00:13:13.360
would be to handle analytics.

00:13:13.360 --> 00:13:15.970
So what we've tried to
do is make it possible

00:13:15.970 --> 00:13:18.130
for you to put
all your analytics

00:13:18.130 --> 00:13:20.500
in its own file
rather than scattered

00:13:20.500 --> 00:13:22.440
throughout all of your logic.

00:13:22.440 --> 00:13:25.630
And so you can see here
on the playerManager,

00:13:25.630 --> 00:13:29.310
I've added an event listener
to listen to all events.

00:13:29.310 --> 00:13:32.170
And so at any event, no
matter what type it is,

00:13:32.170 --> 00:13:35.290
I send that off to my analytic
server, such as Google

00:13:35.290 --> 00:13:37.960
Analytics, Firebase Analytics.

00:13:37.960 --> 00:13:41.890
And then at the bottom, you'll
see I've done the same thing,

00:13:41.890 --> 00:13:45.110
but only subscribing
to playback events.

00:13:45.110 --> 00:13:46.870
And so when I get
a playback event,

00:13:46.870 --> 00:13:48.880
you can see at the
bottom where I'm

00:13:48.880 --> 00:13:52.630
able to pull out the media
time where that event happened.

00:13:52.630 --> 00:13:55.910
So then I can ask questions
like, for example,

00:13:55.910 --> 00:14:00.280
if we find often that we're
having some sort of a buffering

00:14:00.280 --> 00:14:02.530
event happening
early in our video,

00:14:02.530 --> 00:14:06.610
then we may want to adjust
our initial adaptive bit rate

00:14:06.610 --> 00:14:10.300
settings so that we're
taking a lower bit rate,

00:14:10.300 --> 00:14:12.550
so that we don't have to
deal with so much buffering

00:14:12.550 --> 00:14:15.720
for our users.

00:14:15.720 --> 00:14:18.210
Another feature that
we've added is the ability

00:14:18.210 --> 00:14:20.050
to do UI binding.

00:14:20.050 --> 00:14:22.890
So if you want to go crazy
and build a UI that's

00:14:22.890 --> 00:14:25.590
a lot different than what
we give you out of the box

00:14:25.590 --> 00:14:28.740
and the UI controls that we
provide, here's an example.

00:14:28.740 --> 00:14:30.150
It's a bit of a sneak peek.

00:14:30.150 --> 00:14:32.520
We're still working on
the APIs, but it will look

00:14:32.520 --> 00:14:34.100
something very similar to this.

00:14:34.100 --> 00:14:35.712
And this is some
code that at the top

00:14:35.712 --> 00:14:37.420
we're doing a bunch
of setup for Angular.

00:14:37.420 --> 00:14:40.050
I'm sure many of you are
familiar with Angular.

00:14:40.050 --> 00:14:41.610
And then basically,
what we're doing

00:14:41.610 --> 00:14:45.360
is binding the player
to the player's data.

00:14:45.360 --> 00:14:48.360
And then at the bottom, you can
see a handlebar mustache type

00:14:48.360 --> 00:14:51.480
syntax where we're actually--

00:14:51.480 --> 00:14:54.210
every time the current time
changes or the duration

00:14:54.210 --> 00:14:57.270
changes, those are bound
with a single line of code.

00:14:59.870 --> 00:15:03.050
Lastly, one of the things
that many of you'd want to do

00:15:03.050 --> 00:15:05.780
is style or theme things.

00:15:05.780 --> 00:15:10.100
And so you can remember you
added the Cast media player--

00:15:10.100 --> 00:15:12.320
it's a single custom element--

00:15:12.320 --> 00:15:13.460
to your page.

00:15:13.460 --> 00:15:15.980
And then what you'd like to
do is be able to theme it.

00:15:15.980 --> 00:15:19.130
And so you can see here
where I set a theme hue.

00:15:19.130 --> 00:15:22.780
And so that's a single
value there of blue.

00:15:22.780 --> 00:15:25.620
Or in this example, I
go from yellow to green.

00:15:25.620 --> 00:15:29.960
And then also able to set the
URL for my logo and splash

00:15:29.960 --> 00:15:31.190
images and things like that.

00:15:34.050 --> 00:15:37.600
Now I want to change gears
and talk about the web sender.

00:15:37.600 --> 00:15:39.590
The web sender
launched last fall.

00:15:39.590 --> 00:15:42.120
It's available for all
of you to use today.

00:15:42.120 --> 00:15:44.810
And I want to go ahead and show
you some of the basic concepts

00:15:44.810 --> 00:15:47.380
there.

00:15:47.380 --> 00:15:49.760
And before I really
dive into the code,

00:15:49.760 --> 00:15:52.730
I want to talk about some of the
changes we've made in Chrome.

00:15:52.730 --> 00:15:55.280
So one of the things
we've done in Chrome

00:15:55.280 --> 00:15:59.450
is we've made a tighter
integration with Cast.

00:15:59.450 --> 00:16:04.070
So now you're able to
actually right-click and cast

00:16:04.070 --> 00:16:05.780
a piece of content.

00:16:05.780 --> 00:16:11.270
Previously, to use Cast
within the Chrome browser,

00:16:11.270 --> 00:16:14.104
users had to install
a Chrome extension.

00:16:14.104 --> 00:16:15.770
And that Chrome
extension would give you

00:16:15.770 --> 00:16:20.420
the Cast icon up in the top of
the browser, like you see here.

00:16:20.420 --> 00:16:23.180
What has changed for
Chrome is that there

00:16:23.180 --> 00:16:26.000
are many users, or
new users, who may not

00:16:26.000 --> 00:16:27.830
have that Chrome extension.

00:16:27.830 --> 00:16:30.410
So a tip for all of
you, do make sure

00:16:30.410 --> 00:16:34.010
that you add a Cast icon
to all of your pages

00:16:34.010 --> 00:16:35.132
that have a player.

00:16:35.132 --> 00:16:36.590
And so an example
here, you can see

00:16:36.590 --> 00:16:38.360
in the player in the
middle on the right

00:16:38.360 --> 00:16:41.180
where we've got the Cast icon
right there on the player,

00:16:41.180 --> 00:16:44.660
because otherwise, it would be
a hidden feature that would only

00:16:44.660 --> 00:16:48.860
be found by right-clicking.

00:16:48.860 --> 00:16:50.841
Now I want to talk
about the code to do it.

00:16:50.841 --> 00:16:53.090
So let's start on the bottom
on this one, a little bit

00:16:53.090 --> 00:16:53.960
different.

00:16:53.960 --> 00:16:56.240
So you can see
I've added a button

00:16:56.240 --> 00:16:59.840
and I've set it is
of type cast button.

00:16:59.840 --> 00:17:03.920
And then just above that, I'm
loading the cast_sender.js,

00:17:03.920 --> 00:17:06.589
and I'm passing a
single parameter of load

00:17:06.589 --> 00:17:08.910
the CastApplicationFramework.

00:17:08.910 --> 00:17:10.970
And that basically
tells us that you're

00:17:10.970 --> 00:17:13.520
doing this with a Cast
application framework

00:17:13.520 --> 00:17:16.339
rather than our
legacy web sender.

00:17:16.339 --> 00:17:20.480
And then at the top, we're
going to add a window list--

00:17:20.480 --> 00:17:24.079
bind a function to the
window so that basically, you

00:17:24.079 --> 00:17:26.150
can know whether or not
you're running on Chrome.

00:17:26.150 --> 00:17:28.455
And if you are running on
Chrome, then you have Cast.

00:17:28.455 --> 00:17:30.830
And then we're going to go
ahead and set your application

00:17:30.830 --> 00:17:33.920
ID so we know which
app to run when

00:17:33.920 --> 00:17:37.370
someone clicks the Cast icon.

00:17:37.370 --> 00:17:39.770
Now let's talk about
media playback.

00:17:39.770 --> 00:17:42.020
So when the user wants
to go ahead and play

00:17:42.020 --> 00:17:45.080
a piece of media in the Cast
application framework web

00:17:45.080 --> 00:17:45.800
sender.

00:17:45.800 --> 00:17:48.500
What we do is go ahead
and get an instance

00:17:48.500 --> 00:17:52.910
of the Cast context,
get the current session,

00:17:52.910 --> 00:17:55.850
and have that ready so that
we have a Cast session.

00:17:55.850 --> 00:17:58.620
Then we're going to go ahead
and create a media information

00:17:58.620 --> 00:17:59.120
object.

00:17:59.120 --> 00:18:02.950
And this is a domain object that
represents a piece of media.

00:18:02.950 --> 00:18:04.580
We'll create a load request.

00:18:04.580 --> 00:18:06.740
And load is basically play.

00:18:06.740 --> 00:18:09.500
We'll create that load request,
give it the media information

00:18:09.500 --> 00:18:13.100
object, and then call loadMedia.

00:18:13.100 --> 00:18:15.680
Within the loadMedia,
when it succeeds--

00:18:15.680 --> 00:18:18.920
you want to wait for that load
to succeed before you go ahead

00:18:18.920 --> 00:18:20.600
and call playOrPause--

00:18:20.600 --> 00:18:25.280
what we're going to need to do
is create a new RemotePlayer.

00:18:25.280 --> 00:18:29.060
And then pass the
RemotePlayerController

00:18:29.060 --> 00:18:31.580
that player and
call playOrPause.

00:18:31.580 --> 00:18:34.040
So it's pretty simple
to get a web sender up

00:18:34.040 --> 00:18:36.920
and running, quite a
bit simpler and easier

00:18:36.920 --> 00:18:40.600
than what we've done before.

00:18:40.600 --> 00:18:45.370
Styling also very
similar, where here you

00:18:45.370 --> 00:18:48.982
can see we style everything
with the ID of castButton.

00:18:48.982 --> 00:18:50.440
And if you look at
the bottom where

00:18:50.440 --> 00:18:52.540
we added the ID of
castButton, and then

00:18:52.540 --> 00:18:54.820
here we're able to set
the connected color

00:18:54.820 --> 00:18:58.570
to green and the
disconnected color to white.

00:19:02.220 --> 00:19:04.760
Now I want to talk about
some of the updates

00:19:04.760 --> 00:19:06.830
that we've made on
the mobile senders

00:19:06.830 --> 00:19:09.020
for the Cast
application framework.

00:19:09.020 --> 00:19:12.260
And that would be
both Android and iOS.

00:19:12.260 --> 00:19:16.310
So let's start with some of the
Android stuff that we've done.

00:19:16.310 --> 00:19:19.790
So these are a list of
many of the improvements

00:19:19.790 --> 00:19:24.190
across the mobile senders.

00:19:24.190 --> 00:19:26.350
So one of the first things
that we did in Android

00:19:26.350 --> 00:19:30.280
was really provide
detailed documentation

00:19:30.280 --> 00:19:34.510
on how to style the UI
widgets that are provided.

00:19:34.510 --> 00:19:36.690
Because what we want
to do is provide

00:19:36.690 --> 00:19:39.730
a widget that has all the
functionality and all the code

00:19:39.730 --> 00:19:40.780
to work.

00:19:40.780 --> 00:19:43.180
And even though you didn't
write all that code,

00:19:43.180 --> 00:19:46.030
it looks exactly like
the rest of your app

00:19:46.030 --> 00:19:48.710
and is able to be
styled and themed.

00:19:48.710 --> 00:19:53.080
And so as the year went on,
we implemented and documented

00:19:53.080 --> 00:19:57.100
how to do this so that you can
make these experiences look

00:19:57.100 --> 00:19:58.330
amazing for your users.

00:20:01.170 --> 00:20:03.470
Another thing that we
added was the ability

00:20:03.470 --> 00:20:08.400
to configure what buttons show
up in your mini controller.

00:20:08.400 --> 00:20:11.540
So if you look down on the
bottom, you can see on the left

00:20:11.540 --> 00:20:15.260
that we have just one button,
a play or pause button.

00:20:15.260 --> 00:20:17.090
But if you would
like to customize

00:20:17.090 --> 00:20:21.890
it to be able to rewind
backwards or forward,

00:20:21.890 --> 00:20:24.680
and add those buttons,
all you need to do

00:20:24.680 --> 00:20:29.000
is add a single array
in your resource--

00:20:29.000 --> 00:20:31.550
add an array in
your resource that

00:20:31.550 --> 00:20:33.650
specifies the buttons
you would like

00:20:33.650 --> 00:20:35.640
to have in your mini player.

00:20:35.640 --> 00:20:37.700
And it looks exactly
the same if you'd

00:20:37.700 --> 00:20:41.150
like to configure the
buttons within your expanded

00:20:41.150 --> 00:20:46.310
controller or your full
screen casting experience.

00:20:46.310 --> 00:20:49.160
Now I want to talk
about styling on iOS.

00:20:49.160 --> 00:20:51.390
So iOS is a little
bit different,

00:20:51.390 --> 00:20:54.770
because we don't have all
the power like you'd have

00:20:54.770 --> 00:20:56.840
with styles, XML, and Android.

00:20:56.840 --> 00:20:59.540
So we had to build
something programmatic

00:20:59.540 --> 00:21:01.299
to have the same
kind of features.

00:21:01.299 --> 00:21:02.840
And really, what we
were trying to do

00:21:02.840 --> 00:21:06.590
is achieve something that
had a cascading effect

00:21:06.590 --> 00:21:09.080
so you didn't have to
write that much code

00:21:09.080 --> 00:21:12.170
to apply the same
theme in several places

00:21:12.170 --> 00:21:13.880
within your application.

00:21:13.880 --> 00:21:16.130
And so let's go ahead and
walk through the code.

00:21:16.130 --> 00:21:20.960
So I'm getting a shared
instance of the GCK UI style.

00:21:20.960 --> 00:21:23.150
And then what I'm
doing is walking

00:21:23.150 --> 00:21:28.310
from the Cast views to the media
control to the mini controller

00:21:28.310 --> 00:21:30.890
and setting its body
text to be read.

00:21:30.890 --> 00:21:35.210
So that's a very specific
command, a very specific piece

00:21:35.210 --> 00:21:36.660
that I'd like to change.

00:21:36.660 --> 00:21:38.430
And then if you look
at the next line,

00:21:38.430 --> 00:21:43.030
I'm setting all Cast views
background color to be blue.

00:21:43.030 --> 00:21:45.920
So you have the
flexibility to determine

00:21:45.920 --> 00:21:50.090
if you want things to control
broadly across all the views

00:21:50.090 --> 00:21:52.440
or just across specific ones.

00:21:52.440 --> 00:21:55.010
And you can see down at
the bottom, the breakdown

00:21:55.010 --> 00:21:59.570
where we breakdown between the
instructions, device control,

00:21:59.570 --> 00:22:01.775
media control, and all
the different screens.

00:22:04.870 --> 00:22:07.870
Now I want to give you a sneak
peek of some of the things

00:22:07.870 --> 00:22:12.520
that are coming really soon for
the Cast application framework

00:22:12.520 --> 00:22:13.360
receiver.

00:22:13.360 --> 00:22:15.550
And I want to talk about ads.

00:22:15.550 --> 00:22:18.130
So ads will come
very soon, but it'll

00:22:18.130 --> 00:22:21.800
come after we release
that public beta.

00:22:21.800 --> 00:22:25.360
And after we finally release
the Cast application framework

00:22:25.360 --> 00:22:27.890
receiver, we'll bring
in the support for ads.

00:22:27.890 --> 00:22:30.130
But I want to give you
a sneak peek today.

00:22:30.130 --> 00:22:31.780
So one of the things
that we've always

00:22:31.780 --> 00:22:35.040
done when working with ads,
and our users have had to do,

00:22:35.040 --> 00:22:36.880
our developers
have had to do, is

00:22:36.880 --> 00:22:40.850
provide a lot of custom fields.

00:22:40.850 --> 00:22:43.510
So we didn't have structure
around the data that

00:22:43.510 --> 00:22:45.080
represented an ad.

00:22:45.080 --> 00:22:47.500
And so the problem
that we had without

00:22:47.500 --> 00:22:49.870
having structure
around that data is it

00:22:49.870 --> 00:22:54.880
made it impossible for us,
within the mobile centers,

00:22:54.880 --> 00:22:57.880
to know how to react
when you're within an ad,

00:22:57.880 --> 00:22:59.590
because there was no structure.

00:22:59.590 --> 00:23:01.600
And so what we've
done to address that

00:23:01.600 --> 00:23:04.810
is introduce this
notion of break clips.

00:23:04.810 --> 00:23:08.530
Those are the media that's
going to be played for your ad,

00:23:08.530 --> 00:23:09.760
and their duration.

00:23:09.760 --> 00:23:14.170
And then define where
those breaks happen

00:23:14.170 --> 00:23:16.960
within your piece of content.

00:23:16.960 --> 00:23:18.910
And what this does
really gives us

00:23:18.910 --> 00:23:23.720
that structure that lets us
say, when you enter an ad,

00:23:23.720 --> 00:23:28.600
let's disable skipping so
users can't scrub out of ads

00:23:28.600 --> 00:23:32.200
or skip past them, which is
an experience that most of us

00:23:32.200 --> 00:23:36.800
want in our applications
so we can monetize well.

00:23:36.800 --> 00:23:38.590
So the example I'm
showing here shows

00:23:38.590 --> 00:23:42.100
how to pass that
information from the sender.

00:23:42.100 --> 00:23:45.680
But for most applications, you'd
like to do it on the receiver.

00:23:45.680 --> 00:23:48.550
So let's show how to control
that from the receiver.

00:23:48.550 --> 00:23:50.800
So we're going to use
an interceptor again

00:23:50.800 --> 00:23:52.940
and we're going to
intercept that load request.

00:23:52.940 --> 00:23:55.060
Some when a reload
request comes into play

00:23:55.060 --> 00:23:57.910
a piece of media,
what we're going to do

00:23:57.910 --> 00:24:00.460
is we're going to go ahead
and call out to an API

00:24:00.460 --> 00:24:03.160
with a promise to fetch our ads.

00:24:03.160 --> 00:24:07.000
Once we get those ads back,
then we can set the break clips

00:24:07.000 --> 00:24:09.460
and define where
those breaks occur.

00:24:09.460 --> 00:24:10.600
That's all you have to do.

00:24:10.600 --> 00:24:14.470
It's very, very convenient
so that basically you

00:24:14.470 --> 00:24:19.270
can change those ads on
the fly from the receiver.

00:24:19.270 --> 00:24:22.210
Because often, you want to
control that from the receiver

00:24:22.210 --> 00:24:27.750
and you want to control that
as each piece of media loads.

00:24:27.750 --> 00:24:29.950
Now I want to talk
about queuing.

00:24:29.950 --> 00:24:33.130
So in the Cast
application framework,

00:24:33.130 --> 00:24:35.440
two years ago at
I/O, we actually

00:24:35.440 --> 00:24:38.270
launched a queuing API.

00:24:38.270 --> 00:24:41.830
And what we found was it
was difficult for developers

00:24:41.830 --> 00:24:42.471
to use.

00:24:42.471 --> 00:24:42.970
And So.

00:24:42.970 --> 00:24:47.740
What we wanted to do was to
create a new queuing mechanism

00:24:47.740 --> 00:24:51.580
that really started from
the fundamental thinking

00:24:51.580 --> 00:24:56.680
that your application has a
queue when you're not casting.

00:24:56.680 --> 00:24:59.140
And so you have
existing APIs, probably

00:24:59.140 --> 00:25:01.330
some form of a cloud queue.

00:25:01.330 --> 00:25:05.170
And we wanted to be able to
integrate with that cloud queue

00:25:05.170 --> 00:25:09.160
so that you can have an
experience that as users went

00:25:09.160 --> 00:25:13.000
in and out of casting,
it continued to work,

00:25:13.000 --> 00:25:17.250
and made it really,
really easy for you.

00:25:17.250 --> 00:25:19.880
So here's a quick example.

00:25:19.880 --> 00:25:22.220
And you can see the
way that it does

00:25:22.220 --> 00:25:28.760
is we start by having you extend
a base class of QueueBase.

00:25:28.760 --> 00:25:32.130
And then from there, you can
override a lot of methods.

00:25:32.130 --> 00:25:34.870
So here, for example,
is the load method.

00:25:34.870 --> 00:25:37.260
So I've overrode
the load method.

00:25:37.260 --> 00:25:40.140
Actually go out there
and fetch my data.

00:25:40.140 --> 00:25:42.830
So this is where I'm
calling out to my cloud,

00:25:42.830 --> 00:25:46.310
asking what items are in
this playlist, for example.

00:25:46.310 --> 00:25:49.010
So if someone asks for
a load for a playlist,

00:25:49.010 --> 00:25:51.830
you're going to go ahead and
look up, what are the songs

00:25:51.830 --> 00:25:55.070
or what are the videos within
that particular playback.

00:25:55.070 --> 00:25:56.840
You can set things
like, where would I

00:25:56.840 --> 00:25:59.120
like to start
within that playback

00:25:59.120 --> 00:26:01.620
and what time stamp would
I like them to start.

00:26:01.620 --> 00:26:02.120
And So.

00:26:02.120 --> 00:26:04.010
This is a bit of a sneak peek.

00:26:04.010 --> 00:26:05.780
The code may change
a little bit,

00:26:05.780 --> 00:26:09.120
but this is really what we're
starting to work on today

00:26:09.120 --> 00:26:12.350
and gathering feedback from
a lot of our top developers

00:26:12.350 --> 00:26:15.020
and partners as to what
they'd like to see.

00:26:15.020 --> 00:26:17.610
So if you do have any thoughts,
we'd love to hear them.

00:26:17.610 --> 00:26:19.040
Please come and
see me afterwards

00:26:19.040 --> 00:26:20.990
and we'd love to
hear from all of you.

00:26:23.610 --> 00:26:25.554
Next I want to talk about Live.

00:26:25.554 --> 00:26:26.970
And this is what
we're going to do

00:26:26.970 --> 00:26:30.840
after we launch the Cast
application framework receiver.

00:26:30.840 --> 00:26:34.530
What we have found as
we reviewed several

00:26:34.530 --> 00:26:37.830
of our top apps who
deal with Live is we

00:26:37.830 --> 00:26:43.530
found that Live is a little bit
different for every single app.

00:26:43.530 --> 00:26:46.830
Maybe not every app, but
there's several ways to do it.

00:26:46.830 --> 00:26:50.520
And so what we didn't
want to do is put together

00:26:50.520 --> 00:26:53.130
something that's too
simplistic that doesn't

00:26:53.130 --> 00:26:56.880
give our developers the
power to have a turnkey

00:26:56.880 --> 00:26:59.640
experience for handling Live.

00:26:59.640 --> 00:27:01.800
And so we've been
collecting data

00:27:01.800 --> 00:27:05.110
from a lot of different
partners and developers

00:27:05.110 --> 00:27:05.970
and looking at this.

00:27:05.970 --> 00:27:10.530
And what we want to do is to
provide an implementation that

00:27:10.530 --> 00:27:16.960
gives you the flexibility to
define how Live works for you.

00:27:16.960 --> 00:27:19.710
Some apps you can pause
and have a DVR window.

00:27:19.710 --> 00:27:21.150
Some apps you can scrub.

00:27:21.150 --> 00:27:22.350
Others you can't.

00:27:22.350 --> 00:27:24.950
Others have sliding
windows of where

00:27:24.950 --> 00:27:27.960
you can rewind back throughout.

00:27:27.960 --> 00:27:31.860
Some of them, from the start
of an event, you can scroll.

00:27:31.860 --> 00:27:34.470
And so these are
just some examples

00:27:34.470 --> 00:27:37.260
of some of this complex logic.

00:27:37.260 --> 00:27:39.180
And we want to try
to build something

00:27:39.180 --> 00:27:42.520
that lets you do all of
that, and make it really,

00:27:42.520 --> 00:27:43.780
really simple.

00:27:43.780 --> 00:27:47.130
So this is what we're looking
at doing later in the year

00:27:47.130 --> 00:27:48.620
as we move forward.

00:27:48.620 --> 00:27:50.250
And so I'm really
excited to see that

00:27:50.250 --> 00:27:54.490
happen because I know it's going
to help a lot of developers.

00:27:54.490 --> 00:27:55.990
The last thing I
want to talk to you

00:27:55.990 --> 00:27:59.170
about is the Chromecast
Preview Program.

00:27:59.170 --> 00:28:02.920
And what this is is
it's the ability for you

00:28:02.920 --> 00:28:10.510
to test your code against our
newest or unreleased software.

00:28:10.510 --> 00:28:13.170
And so when we think
it's ready to ship

00:28:13.170 --> 00:28:16.990
and we think we're ready to push
platform changes out to users,

00:28:16.990 --> 00:28:21.070
we push it out to devices that
are on the Chromecast Preview

00:28:21.070 --> 00:28:22.160
Program.

00:28:22.160 --> 00:28:24.280
And so it's a great
opportunity for you

00:28:24.280 --> 00:28:28.180
to register some devices in
your test lab against this,

00:28:28.180 --> 00:28:31.090
add them to this program,
so that you can make sure

00:28:31.090 --> 00:28:33.220
that your application
isn't going

00:28:33.220 --> 00:28:36.430
to break when we push that out.

00:28:36.430 --> 00:28:38.620
Another great advantage
that you'll get

00:28:38.620 --> 00:28:41.170
is we have thousands
of devices that

00:28:41.170 --> 00:28:44.840
are registered as part of the
Chromecast Preview Program.

00:28:44.840 --> 00:28:48.310
And so we've got thousands
of developers and thousands

00:28:48.310 --> 00:28:53.370
of just regular users
out there using your app

00:28:53.370 --> 00:28:55.790
against the preview program.

00:28:55.790 --> 00:28:57.820
So even if you
don't find problems,

00:28:57.820 --> 00:29:00.730
other users out in the
field have the opportunity

00:29:00.730 --> 00:29:03.680
to find those and
report those as well.

00:29:03.680 --> 00:29:07.930
So I highly encourage all of
you to go try this out and start

00:29:07.930 --> 00:29:13.240
using it as part of your QA
regression test and making sure

00:29:13.240 --> 00:29:15.070
that your app is as
good as it can be.

00:29:17.707 --> 00:29:19.540
And with that, what I
want to do is tell you

00:29:19.540 --> 00:29:24.010
about a few resources that you
have where you can learn more.

00:29:24.010 --> 00:29:27.100
The first is
developer.google.com/cast.

00:29:27.100 --> 00:29:30.310
You can find all of our
documentation and our samples

00:29:30.310 --> 00:29:31.750
out there.

00:29:31.750 --> 00:29:33.550
Next is Stack Overflow.

00:29:33.550 --> 00:29:36.460
So on Stack
Overflow, we actually

00:29:36.460 --> 00:29:38.410
have a team of people
who are actually

00:29:38.410 --> 00:29:41.080
answering questions and
making sure the right

00:29:41.080 --> 00:29:43.870
and best questions
are available.

00:29:43.870 --> 00:29:46.150
So do look in Stack Overflow.

00:29:46.150 --> 00:29:48.700
We highly encourage it, and
we have a team of people

00:29:48.700 --> 00:29:50.860
out there working on that.

00:29:50.860 --> 00:29:53.770
Next is the G+
Developer Community.

00:29:53.770 --> 00:29:56.440
This is a great place
to see announcements.

00:29:56.440 --> 00:29:59.260
So for example, when we
launch the beta for the Cast

00:29:59.260 --> 00:30:02.330
application framework
receiver shortly,

00:30:02.330 --> 00:30:06.190
we'll post a message on Google+
so that that's available

00:30:06.190 --> 00:30:07.480
and you're aware of it.

00:30:07.480 --> 00:30:10.330
So you can go and try it out
and give us that feedback.

00:30:10.330 --> 00:30:13.390
And finally, out on YouTube
with Google Developers,

00:30:13.390 --> 00:30:15.490
you can see a lot
of great videos,

00:30:15.490 --> 00:30:19.140
both on Cast and all the other
things that you learned here

00:30:19.140 --> 00:30:21.910
at Google I/O. And with that,
I want to thank all of you

00:30:21.910 --> 00:30:22.870
for coming.

00:30:22.870 --> 00:30:24.377
And happy casting.

00:30:24.377 --> 00:30:26.812
[APPLAUSE]

00:30:26.812 --> 00:30:30.800
[MUSIC PLAYING]

