WEBVTT
Kind: captions
Language: en

00:00:03.330 --> 00:00:05.990
This episode is brought to you by Curiosity
Stream.

00:00:05.990 --> 00:00:09.180
Hi, I'm Carrie Anne, and welcome to Crash
Course Computer Science!

00:00:09.180 --> 00:00:13.700
Last episode we talked about Files, bundles
of data, stored on a computer, that are formatted

00:00:13.710 --> 00:00:17.460
and arranged to encode information, like text,
sound or images.

00:00:17.460 --> 00:00:20.890
We even discussed some basic file formats,
like text, wave, and bitmap.

00:00:20.890 --> 00:00:24.939
While these formats are perfectly fine and
still used today, their simplicity also means

00:00:24.939 --> 00:00:26.130
they’re not very efficient.

00:00:26.130 --> 00:00:30.439
Ideally, we want files to be as small as possible,
so we can store lots of them without filling

00:00:30.440 --> 00:00:33.600
up our hard drives, and also transmit them
more quickly.

00:00:33.600 --> 00:00:36.900
Nothing is more frustrating than waiting for
an email attachment to download. Ugh!

00:00:37.000 --> 00:00:41.180
The answer is compression, which literally
squeezes data into a smaller size.

00:00:41.180 --> 00:00:46.030
To do this, we have to encode data using fewer
bits than the original representation.

00:00:46.030 --> 00:00:49.440
That might sound like magic, but it’s actually
computer science!

00:00:49.440 --> 00:00:58.280
INTRO

00:00:58.280 --> 00:01:01.860
Lets return to our old friend from last episode,
Mr. Pac-man!

00:01:01.860 --> 00:01:04.140
This image is 4 pixels by 4 pixels.

00:01:04.140 --> 00:01:08.170
As we discussed, image data is typically stored
as a list of pixel values.

00:01:08.170 --> 00:01:12.360
To know where rows end, image files have metadata,
which defines properties like dimensions.

00:01:12.360 --> 00:01:15.740
But, to keep it simple today, we’re not
going to worry about it.

00:01:15.750 --> 00:01:20.680
Each pixel’s color is a combination of three
additive primary colors: red, green and blue.

00:01:20.690 --> 00:01:26.490
We store each of those values in one byte,
giving us a range of 0 to 255 for each color.

00:01:26.490 --> 00:01:31.000
If you mix full intensity red, green and blue
- that’s 255 for all three values - you

00:01:31.000 --> 00:01:32.430
get the color white.

00:01:32.430 --> 00:01:36.590
If you mix full intensity red and green, but
no blue (it’s 0), you get yellow.

00:01:36.590 --> 00:01:41.110
We have 16 pixels in our image, and each of
those needs 3 bytes of color data.

00:01:41.110 --> 00:01:44.340
That means this image’s data will consume
48 bytes of storage.

00:01:44.340 --> 00:01:48.420
But, we can compress the data and pack it
into a smaller number of bytes than 48!

00:01:48.420 --> 00:01:52.340
One way to compress data is to reduce repeated
or redundant information.

00:01:52.350 --> 00:01:55.660
The most straightforward way to do this is
called Run-Length Encoding.

00:01:55.670 --> 00:01:59.530
This takes advantage of the fact that there
are often runs of identical values in files.

00:01:59.530 --> 00:02:03.640
For example, in our pac-man image, there are
7 yellow pixels in a row.

00:02:03.640 --> 00:02:07.471
Instead of encoding redundant data: yellow
pixel, yellow pixel, yellow pixel, and so

00:02:07.471 --> 00:02:12.060
on, we can just say “there’s 7 yellow
pixels in a row” by inserting an extra byte

00:02:12.060 --> 00:02:15.170
that specifies the length of the run, like
so:

00:02:15.170 --> 00:02:17.860
And then we can eliminate the redundant data
behind it.

00:02:17.860 --> 00:02:21.190
To ensure that computers don’t get confused
with which bytes are run lengths and which

00:02:21.190 --> 00:02:25.160
bytes represent color, we have to be consistent
in how we apply this scheme.

00:02:25.160 --> 00:02:28.080
So, we need to preface all pixels with their
run-length.

00:02:28.080 --> 00:02:32.230
In some cases, this actually adds data, but
on the whole, we’ve dramatically reduced

00:02:32.230 --> 00:02:34.569
the number of bytes we need to encode this
image.

00:02:34.569 --> 00:02:37.140
We’re now at 24 bytes, down from 48.

00:02:37.140 --> 00:02:38.900
That’s 50% smaller!

00:02:38.900 --> 00:02:40.340
A huge saving!

00:02:40.349 --> 00:02:42.250
Also note that we haven’t lost any data.

00:02:42.250 --> 00:02:45.850
We can easily expand this back to the original
form without any degradation.

00:02:45.850 --> 00:02:50.070
A compression technique that has this characteristic
is called lossless compression, because we

00:02:50.070 --> 00:02:51.270
don’t lose anything.

00:02:51.270 --> 00:02:56.000
The decompressed data is identical to the
original before compression, bit for bit.

00:02:56.000 --> 00:03:00.220
Let's take a look at another type of lossless
compression, where blocks of data are replaced

00:03:00.220 --> 00:03:02.420
by more compact representations.

00:03:02.420 --> 00:03:06.290
This is sort of like “don’t forget to
be awesome” being replaced by DFTBA.

00:03:06.290 --> 00:03:10.070
To do this, we need a dictionary that stores
the mapping from codes to data.

00:03:10.070 --> 00:03:12.080
Lets see how this works for our example.

00:03:12.080 --> 00:03:15.940
We can view our image as not just a string
of individual pixels, but as little blocks

00:03:15.940 --> 00:03:16.940
of data.

00:03:16.940 --> 00:03:20.610
For simplicity, we’re going to use pixel
pairs, which are 6 bytes long, but blocks

00:03:20.610 --> 00:03:22.110
can be any size.

00:03:22.110 --> 00:03:26.380
In our example, there are only four pairings:
White-yellow, black-yellow, yellow-yellow

00:03:26.380 --> 00:03:27.380
and white-white.

00:03:27.380 --> 00:03:31.400
Those are the data blocks in our dictionary
we want to generate compact codes for.

00:03:31.400 --> 00:03:34.860
What’s interesting, is that these blocks
occur at different frequencies.

00:03:34.860 --> 00:03:39.510
There are 4 yellow-yellow pairs, 2 white-yellow pairs, and 1 each of black-yellow and white-white.

00:03:39.510 --> 00:03:43.620
Because yellow-yellow is the most common block,
we want that to be substituted for the most

00:03:43.620 --> 00:03:45.310
compact representation.

00:03:45.310 --> 00:03:49.819
On the other hand, black-yellow and white-white,
can be substituted for something longer because

00:03:49.819 --> 00:03:51.340
those blocks are infrequent.

00:03:51.340 --> 00:03:55.420
One method for generating efficient codes
is building a Huffman Tree, invented by David

00:03:55.420 --> 00:03:58.830
Huffman while he was a student at MIT in the
1950s.

00:03:58.830 --> 00:04:00.170
His algorithm goes like this.

00:04:00.170 --> 00:04:03.319
First, you layout all the possible blocks
and their frequencies.

00:04:03.319 --> 00:04:05.920
At every round, you select the two with the
lowest frequencies.

00:04:05.920 --> 00:04:10.019
Here, that’s Black-Yellow and White-White,
each with a frequency of 1.

00:04:10.019 --> 00:04:14.390
You combine these into a little tree... ...which
have a combined frequency of 2, so we record

00:04:14.390 --> 00:04:15.390
that.

00:04:15.390 --> 00:04:17.239
And now one step of the algorithm done.

00:04:17.239 --> 00:04:18.769
Now we repeat the process.

00:04:18.769 --> 00:04:20.900
This time we have three things to choose from.

00:04:20.900 --> 00:04:25.039
Just like before, we select the two with the
lowest frequency, put them into a little tree,

00:04:25.039 --> 00:04:27.589
and record the new total frequency of all
the sub items.

00:04:27.589 --> 00:04:29.490
Ok, we’re almost done.

00:04:29.490 --> 00:04:33.009
This time it’s easy to select the two items
with the lowest frequency because there are

00:04:33.009 --> 00:04:34.650
only two things left to pick.

00:04:34.650 --> 00:04:37.169
We combine these into a tree, and now we’re
done!

00:04:37.169 --> 00:04:41.819
Our tree looks like this, and it has a very
cool property: it’s arranged by frequency,

00:04:41.819 --> 00:04:43.360
with less common items lower down.

00:04:43.360 --> 00:04:46.820
So, now we have a tree, but you may be wondering
how this gets us to a dictionary.

00:04:46.820 --> 00:04:51.430
Well, we use our frequency-sorted tree to
generate the codes we need by labeling each

00:04:51.430 --> 00:04:53.990
branch with a 0 or a 1, like so:

00:04:53.990 --> 00:04:56.770
With this, we can write out our code dictionary.

00:04:56.770 --> 00:04:59.210
Yellow-yellow is encoded as just a single
0.

00:04:59.210 --> 00:05:01.080
White-yellow is encoded as 1 0 (“one zero”)

00:05:01.080 --> 00:05:02.440
Black-Yellow is 1 1 0

00:05:02.440 --> 00:05:04.559
and finally white-white is 1 1 1.

00:05:04.559 --> 00:05:08.330
The really cool thing about these codewords
is that there’s no way to have conflicting

00:05:08.330 --> 00:05:10.880
codes, because each path down the tree is
unique.

00:05:10.880 --> 00:05:15.340
This means our codes are prefix-free, that
is no code starts with another complete code.

00:05:15.340 --> 00:05:18.089
Now, let’s return to our image data and
compress it!

00:05:18.089 --> 00:05:21.949
Our first pixel pair, white-yellow, is substituted
for the bits “1 0”.

00:05:21.949 --> 00:05:25.360
The next pair is black-yellow, which is substituted
for “1 1 0”.

00:05:25.360 --> 00:05:29.740
Next is yellow-yellow with the incredibly
compact substitution of just “0”.

00:05:29.749 --> 00:05:32.120
And this process repeats for the rest of the
image:

00:05:32.120 --> 00:05:37.139
So instead of 48 bytes of image data ...this
process has encoded it into 14 bits -- NOT

00:05:37.139 --> 00:05:38.139
BYTES -- BITS!!

00:05:38.139 --> 00:05:40.150
That’s less than 2 bytes of data!

00:05:40.150 --> 00:05:42.520
But, don’t break out the champagne quite
yet!

00:05:42.520 --> 00:05:45.830
This data is meaningless unless we also save
our code dictionary.

00:05:45.830 --> 00:05:49.330
So, we’ll need to append it to the front
of the image data, like this.

00:05:49.330 --> 00:05:53.040
Now, including the dictionary, our image data
is 30 bytes long.

00:05:53.040 --> 00:05:56.080
That’s still a significant improvement over 48
bytes.

00:05:56.089 --> 00:06:00.060
The two approaches we discussed, removing
redundancies and using more compact representations,

00:06:00.069 --> 00:06:05.300
are often combined, and underlie almost all
lossless compressed file formats, like GIF,

00:06:05.300 --> 00:06:07.169
PNG, PDF and ZIP files.

00:06:07.169 --> 00:06:11.319
Both run-length encoding and dictionary coders
are lossless compression techniques.

00:06:11.319 --> 00:06:14.889
No information is lost; when you decompress,
you get the original file.

00:06:14.889 --> 00:06:17.080
That’s really important for many types of
files.

00:06:17.080 --> 00:06:20.889
Like, it’d be very odd if I zipped up a
word document to send to you, and when you

00:06:20.889 --> 00:06:23.369
decompressed it on your computer, the text
was different.

00:06:23.369 --> 00:06:26.869
But, there are other types of files where
we can get away with little changes, perhaps

00:06:26.869 --> 00:06:31.409
by removing unnecessary or less important
information, especially information that human

00:06:31.409 --> 00:06:33.789
perception is not good at detecting.

00:06:33.789 --> 00:06:37.110
And this trick underlies most lossy compression
techniques.

00:06:37.110 --> 00:06:41.099
These tend to be pretty complicated, so we’re
going to attack this at a conceptual level.

00:06:41.099 --> 00:06:42.949
Let’s take sound as an example.

00:06:42.949 --> 00:06:44.530
Your hearing is not perfect.

00:06:44.530 --> 00:06:47.169
We can hear some frequencies of sound better
than others.

00:06:47.169 --> 00:06:49.110
And there are some we can’t hear at all,
like ultrasound.

00:06:49.110 --> 00:06:50.849
Unless you’re a bat.

00:06:50.849 --> 00:06:54.439
Basically, if we make a recording of music,
and there’s data in the ultrasonic frequency

00:06:54.439 --> 00:06:58.050
range, we can discard it, because we know
that humans can’t hear it.

00:06:58.050 --> 00:07:01.919
On the other hand, humans are very sensitive
to frequencies in the vocal range, like people

00:07:01.919 --> 00:07:05.409
singing, so it’s best to preserve quality
there as much as possible.

00:07:05.409 --> 00:07:07.289
Deep bass is somewhere in between.

00:07:07.289 --> 00:07:09.619
Humans can hear it, but we’re less attuned
to it.

00:07:09.619 --> 00:07:11.159
We mostly sense it.

00:07:11.159 --> 00:07:14.879
Lossy audio compressors takes advantage of
this, and encode different frequency bands

00:07:14.880 --> 00:07:16.540
at different precisions.

00:07:16.540 --> 00:07:20.460
Even if the result is rougher, it’s likely
that users won’t perceive the difference.

00:07:20.460 --> 00:07:23.100
Or at least it doesn’t dramatically affect
the experience.

00:07:23.100 --> 00:07:25.680
And here comes the hate mail from the audiophiles!

00:07:25.680 --> 00:07:28.090
You encounter this type of audio compression
all the time.

00:07:28.090 --> 00:07:32.120
It’s one of the reasons you sound different
on a cellphone versus in person.

00:07:32.120 --> 00:07:35.820
The audio data is being compressed, allowing
more people to take calls at once.

00:07:35.830 --> 00:07:40.680
As the signal quality or bandwidth get worse,
compression algorithms remove more data, further

00:07:40.700 --> 00:07:44.830
reducing precision, which is why Skype calls
sometimes sound like robots talking.

00:07:44.830 --> 00:07:49.800
Compared to an uncompressed audio format, like a WAV or FLAC (there we go, got the audiophiles back)

00:07:49.820 --> 00:07:53.720
compressed audio files, like MP3s,
are often 10 times smaller.

00:07:53.720 --> 00:07:55.439
That’s a huge saving!

00:07:55.439 --> 00:07:58.119
And it’s why I’ve got a killer music collection
on my retro iPod.

00:07:58.119 --> 00:07:59.119
Don’t judge.

00:07:59.119 --> 00:08:03.189
This idea of discarding or reducing precision
in a manner that aligns with human perception

00:08:03.189 --> 00:08:07.210
is called perceptual coding, and it relies
on models of human perception,

00:08:07.210 --> 00:08:09.509
which come from a field of study called Psychophysics.

00:08:09.509 --> 00:08:14.789
This same idea is the basis of lossy compressed
image formats, most famously JPEGs.

00:08:14.789 --> 00:08:16.849
Like hearing, the human visual system is imperfect.

00:08:16.849 --> 00:08:21.709
We’re really good at detecting sharp contrasts,
like the edges of objects, but our perceptual

00:08:21.709 --> 00:08:23.999
system isn’t so hot with subtle color variations.

00:08:23.999 --> 00:08:28.770
JPEG takes advantage of this by breaking images
up into blocks of 8x8 pixels, then throwing

00:08:28.770 --> 00:08:31.050
away a lot of the high-frequency spatial data.

00:08:31.050 --> 00:08:33.839
For example, take this photo of our directors
dog - Noodle.

00:08:33.839 --> 00:08:34.839
So cute!

00:08:34.839 --> 00:08:37.440
Let’s look at patch of 8x8 pixels.

00:08:37.440 --> 00:08:41.060
Pretty much every pixel is different from
its neighbor, making it hard to compress with

00:08:41.060 --> 00:08:43.780
loss-less techniques because there’s just
a lot going on.

00:08:43.780 --> 00:08:45.090
Lots of little details.

00:08:45.090 --> 00:08:47.510
But human perception doesn’t register all
those details.

00:08:47.510 --> 00:08:52.010
So, we can discard a lot of that detail, and
replace it with a simplified patch like this.

00:08:52.010 --> 00:08:55.490
This maintains the visual essence, but might
only use 10% of the data.

00:08:55.490 --> 00:08:58.640
We can do this for all the patches in the
image and get this result.

00:08:58.640 --> 00:09:01.030
You can still see it’s a dog, but the image
is rougher.

00:09:01.030 --> 00:09:05.630
So, that’s an extreme example, going from
a slightly compressed JPEG to a highly compressed

00:09:05.630 --> 00:09:07.570
one, one-eighth the original file size.

00:09:07.570 --> 00:09:12.260
Often, you can get away with a quality somewhere
in between, and perceptually, it’s basically

00:09:12.260 --> 00:09:13.820
the same as the original.

00:09:13.820 --> 00:09:16.940
The one on the left is one-third the file
size of the one on the right.

00:09:16.940 --> 00:09:19.840
That’s a big savings for essentially the
same thing.

00:09:19.840 --> 00:09:21.420
Can you tell the difference between the two?

00:09:21.420 --> 00:09:25.280
Probably not, but I should mention that video
compression plays a role in that too, since

00:09:25.280 --> 00:09:27.100
I’m literally being compressed in a video
right now.

00:09:27.100 --> 00:09:31.020
Videos are really just long sequences of images,
so a lot of what I said about them applies

00:09:31.030 --> 00:09:32.060
here too.

00:09:32.070 --> 00:09:36.270
But videos can do some extra clever stuff,
because between frames, a lot of pixels are

00:09:36.270 --> 00:09:37.580
going to be the same.

00:09:37.580 --> 00:09:39.450
Like this whole background behind me!

00:09:39.450 --> 00:09:41.570
This is called temporal redundancy.

00:09:41.570 --> 00:09:44.590
We don’t need to re-transmit those pixels
every frame of the video.

00:09:44.590 --> 00:09:46.750
We can just copy patches of data forward.

00:09:46.750 --> 00:09:50.700
When there are small pixel differences, like
the readout on this frequency generator behind

00:09:50.700 --> 00:09:55.220
me, most video formats send data that encodes
just the difference between patches, which

00:09:55.220 --> 00:09:59.600
is more efficient than re-transmitting all
the pixels afresh, again taking advantage

00:09:59.600 --> 00:10:01.170
of inter-frame similarity.

00:10:01.170 --> 00:10:04.370
The fanciest video compression formats go
one step further.

00:10:04.370 --> 00:10:08.311
They find patches that are similar between
frames, and not only copy them forward, with

00:10:08.311 --> 00:10:13.430
or without differences, but also can apply
simple effects to them, like a shift or rotation.

00:10:13.430 --> 00:10:16.190
They can also lighten or darken a patch between
frames.

00:10:16.190 --> 00:10:21.470
So, if I move my hand side to side like this
the video compressor will identify the similarity,

00:10:21.470 --> 00:10:25.780
capture my hand in one or more patches, then
just move these patches around between frames.

00:10:25.780 --> 00:10:30.240
You’re actually seeing my hand from the
past… kinda freaky, but it uses a lot less data.

00:10:30.240 --> 00:10:34.700
MPEG-4 videos, a common standard, are often
20 to 200 times smaller than the original,

00:10:34.700 --> 00:10:35.960
uncompressed file.

00:10:35.970 --> 00:10:40.420
However, encoding frames as translations and
rotations of patches from previous frames

00:10:40.420 --> 00:10:43.890
can go horribly wrong when you compress too
heavily, and there isn’t enough space to

00:10:43.890 --> 00:10:46.440
update pixel data inside of the patches.

00:10:46.440 --> 00:10:50.470
The video player will forge ahead, applying
the right motions, even if the patch data

00:10:50.470 --> 00:10:51.470
is wrong.

00:10:51.470 --> 00:10:54.780
And this leads to some hilarious and trippy
effects, which I’m sure you’ve seen.

00:10:54.780 --> 00:10:59.340
Overall, it’s extremely useful to have compression techniques for all the types of data I discussed today.

00:10:59.340 --> 00:11:01.800
(I guess our imperfect vision and hearing
are “useful,” too.)

00:11:01.800 --> 00:11:05.350
And it’s important to know about compression
because it allows users to store pictures,

00:11:05.350 --> 00:11:07.400
music, and videos in efficient ways.

00:11:07.400 --> 00:11:11.840
Without it, streaming your favorite Carpool
Karaoke videos on YouTube would be nearly

00:11:11.840 --> 00:11:17.130
impossible, due to bandwidth and the economics
of transmitting that volume of data for free.

00:11:17.130 --> 00:11:20.650
And now when your Skype calls sound like they’re
being taken over by demons, you’ll know

00:11:20.650 --> 00:11:21.900
what’s really going on.

00:11:21.900 --> 00:11:23.420
I’ll see you next week.

00:11:23.420 --> 00:11:27.240
Hey guys, this week’s episode was brought
to you by CuriosityStream which is a streaming

00:11:27.250 --> 00:11:31.810
service full of documentaries and non­fiction
titles from some really great filmmakers,

00:11:31.810 --> 00:11:33.760
including exclusive originals.

00:11:33.760 --> 00:11:38.540
Now I normally give computer science recommendations since this is Crash Course Computer Science and all

00:11:38.540 --> 00:11:42.660
and Curiosity Stream has a ton of
great ones.  But you absolutely have to check

00:11:42.660 --> 00:11:47.340
out “Miniverse” starring everyone’s
favorite space-station-singing-Canadian astronaut,

00:11:47.340 --> 00:11:51.860
Chris Hadfield, as he takes a roadtrip across
the Solar System scaled down the the size

00:11:51.860 --> 00:11:53.160
of the United States.

00:11:53.160 --> 00:11:57.800
It’s basically 50 minutes of Chris and his
passengers geeking out about our amazing planetary

00:11:57.800 --> 00:12:00.320
neighbors and you don’t want to miss it.

00:12:00.320 --> 00:12:07.110
So get unlimited access today, and your first two months are free if you sign up at curiositystream.com/crashcourse

00:12:07.120 --> 00:12:10.080
and use the promo code "crashcourse" during the sign up process.

