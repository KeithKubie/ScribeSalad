WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:02.280
There's actually been a debate
over how I should pronounce this.

00:00:02.280 --> 00:00:03.800
I call it sequel injection.

00:00:03.840 --> 00:00:05.840
The acronym is SQL.

00:00:05.840 --> 00:00:07.340
Whichever way you call it,

00:00:07.340 --> 00:00:09.900
it's a way to attack websites,

00:00:09.900 --> 00:00:13.160
that really shouldn't work any more, but still does.

00:00:15.180 --> 00:00:19.840
Sequel or SQL is a language in
which you talk to databases,

00:00:20.420 --> 00:00:21.580
and it's fairly...

00:00:21.940 --> 00:00:24.900
it's fairly like English actually.
You can actually say things like,

00:00:24.900 --> 00:00:27.520
"Select from this table."

00:00:28.020 --> 00:00:28.880
It's not a complicated language.

00:00:28.880 --> 00:00:33.860
There are no great amounts of curly brackets
and semi-colons and things like that.

00:00:33.860 --> 00:00:34.840
It can be.

00:00:34.840 --> 00:00:39.120
But equally you can pretty much type
commands in near English into it,

00:00:39.120 --> 00:00:41.220
and you'll get results back from your database.

00:00:41.220 --> 00:00:43.860
And this has existed for years and years and years.

00:00:44.240 --> 00:00:47.400
And that was all fine until the Web came along,

00:00:47.400 --> 00:00:51.040
and now people are looking at websites and are thinking,

00:00:51.040 --> 00:00:54.020
"These, these need to be hooked up to databases."

00:00:54.020 --> 00:00:57.820
Because way back, when Tim Berners-Lee
invented the World Wide Web,

00:00:57.820 --> 00:01:00.240
it was pretty much "I'm gonna request a document

00:01:00.240 --> 00:01:01.840
and you're gonna send that document back to me."

00:01:01.840 --> 00:01:03.940
Eventually people worked out that

00:01:03.940 --> 00:01:07.620
what do you really wanted
to do was send a document

00:01:07.620 --> 00:01:10.660
and have different things come
back depending on what you sent.

00:01:10.660 --> 00:01:12.520
Maybe you could type in a search request,

00:01:12.520 --> 00:01:15.380
and that would go to a database
and pull back something.

00:01:15.380 --> 00:01:18.000
That's great, that's brilliant, that's a wonderful invention.

00:01:19.140 --> 00:01:23.540
And unfortunately, some programming
languages dealt with this in a sensible way,

00:01:24.100 --> 00:01:25.280
and some did not.

00:01:25.280 --> 00:01:28.740
And one of the most notable ones
that didn't is a language called PHP.

00:01:30.340 --> 00:01:34.420
I'm a PHP coder. It's a very
easy language to write in.

00:01:34.420 --> 00:01:39.660
It's a friendly language. I still haven't met any
other language that lets me develop code

00:01:39.660 --> 00:01:42.300
at the speed that I am able to.

00:01:43.100 --> 00:01:44.920
It's very fault-tolerant,

00:01:44.920 --> 00:01:46.120
within reason.

00:01:46.120 --> 00:01:49.140
It doesn't always give you the best
results when it does, but, you know,

00:01:49.800 --> 00:01:52.020
it's friendly, it's easy to pick up and crucially

00:01:52.480 --> 00:01:56.800
you can just write it into a text file, upload
it to a web server (in most of the world),

00:01:57.320 --> 00:01:58.800
and it will just work.

00:01:58.980 --> 00:02:02.220
You can type in PHP code and have it just run.

00:02:02.380 --> 00:02:05.040
So the barrier to entry is really, really low.

00:02:05.580 --> 00:02:09.360
Which in one way is brilliant. It makes web
programming much more accessible.

00:02:09.480 --> 00:02:11.420
Facebook was originally written in PHP.

00:02:12.760 --> 00:02:16.400
Innumerable things have originally been
written in PHP and loads of things still are.

00:02:16.400 --> 00:02:17.820
WordPress still is.

00:02:18.680 --> 00:02:22.200
The trouble is, that if you're not careful,
there's a lot of ways to go wrong.

00:02:22.200 --> 00:02:24.820
And this isn't just PHP,
but I'll use it as a example.

00:02:24.900 --> 00:02:27.100
You talk to a database by
issuing a command like this.

00:02:28.060 --> 00:02:33.400
SELECT * FROM users

00:02:33.520 --> 00:02:35.220
WHERE username equals

00:02:36.100 --> 00:02:36.860
"tom"

00:02:37.100 --> 00:02:37.760
Great!

00:02:37.760 --> 00:02:41.860
And the database will send back all the
details it knows about the user called "tom".

00:02:41.860 --> 00:02:42.560
Brilliant!

00:02:42.560 --> 00:02:45.780
But the catch is those quotation marks.

00:02:45.780 --> 00:02:48.020
Because if I'm not careful about what I send,

00:02:48.280 --> 00:02:50.400
then we can cause some problems.

00:02:50.560 --> 00:02:54.900
Let's say, for example, that I have a web
form that lets me login and I type in tom,

00:02:55.060 --> 00:02:57.560
and it sends that and brings back "tom".

00:02:57.940 --> 00:02:58.780
OK?

00:02:59.040 --> 00:03:03.120
Now lets say I type in tom with a quote mark in it,

00:03:03.820 --> 00:03:07.460
and if you are not careful, what will happen
is the language will send something like this.

00:03:07.460 --> 00:03:10.740
SELECT * FROM users WHERE username

00:03:12.260 --> 00:03:13.120
equals

00:03:14.220 --> 00:03:17.340
"tom" and then I put a quote mark
in, and then it puts a quote mark in.

00:03:17.340 --> 00:03:19.340
It fails because the quote marks don't match up.

00:03:19.660 --> 00:03:21.540
And the whole thing crashes
and it just sends back an error.

00:03:21.680 --> 00:03:23.280
That's mildly annoying,

00:03:23.780 --> 00:03:27.040
and a big problem, of course, is putting
in any text that has quote marks.

00:03:28.960 --> 00:03:32.200
The catch is you can do
a lot of damage that way.

00:03:32.560 --> 00:03:36.100
Because that language
doesn't just have SELECT.

00:03:36.140 --> 00:03:38.560
It has INSERT to add new stuff.

00:03:38.560 --> 00:03:40.540
It has UPDATE to change stuff.

00:03:40.540 --> 00:03:43.160
And it has DELETE to remove stuff.

00:03:44.200 --> 00:03:45.940
So if I was to send, say,

00:03:45.940 --> 00:03:50.680
a username that was 'tom";',

00:03:50.980 --> 00:03:53.460
and then put another
command in there, like,

00:03:53.460 --> 00:03:54.680
'delete everything'.

00:03:54.680 --> 00:03:56.800
Its not a literal command,
but something like that.

00:03:57.080 --> 00:03:57.740
It would work.

00:03:57.740 --> 00:03:58.820
So we have a look how that works.

00:03:59.020 --> 00:04:03.560
We've got the normal command,
"SELECT * FROM users

00:04:04.240 --> 00:04:07.020
WHERE username [mumbles] 'tom'""

00:04:07.380 --> 00:04:08.760
Long command there.

00:04:08.960 --> 00:04:11.560
But when you put in 'tom',
I'm gonna send that,

00:04:12.400 --> 00:04:14.520
and then I'm gonna send this:

00:04:16.460 --> 00:04:20.280
DROP ALL DATABASES;

00:04:21.700 --> 00:04:25.940
Hit enter, it will get converted
into a plain English command,

00:04:25.940 --> 00:04:27.100
in SQL language,

00:04:27.100 --> 00:04:28.300
it will get sent,

00:04:28.300 --> 00:04:29.160
and database will go

00:04:29.160 --> 00:04:31.000
"Well that's exactly what I should do."

00:04:31.680 --> 00:04:36.080
It's gonna understand that there's a new command at
the semi-colon and that it should delete everything.

00:04:36.300 --> 00:04:38.620
The main way around it is escaping.

00:04:38.620 --> 00:04:41.780
When there is dangerous
character, like a quote mark,

00:04:41.900 --> 00:04:43.900
you put a slash before it.

00:04:44.280 --> 00:04:47.040
And by 'you' I mean you, the
programmer writing this.

00:04:47.040 --> 00:04:48.780
You go through, and you
use a function that says,

00:04:48.780 --> 00:04:52.380
"Everywhere there is a quote
mark, put this slash before it.

00:04:52.640 --> 00:04:55.080
And before you send it to
the database, you do that."

00:04:55.980 --> 00:04:57.260
Input comes in from the user,

00:04:57.260 --> 00:04:59.180
add some slashes to it to make it safe,

00:04:59.500 --> 00:05:00.880
send it out to the database.

00:05:00.920 --> 00:05:02.780
And the database looks at
those slashes and goes,

00:05:02.780 --> 00:05:05.880
"Right, every time there's one of
those, this thing that's coming next?

00:05:06.280 --> 00:05:08.280
Just treat it as a regular quote mark.

00:05:08.520 --> 00:05:11.640
Don't treat it anything special, it's
in the text, just treat it as that."

00:05:12.160 --> 00:05:15.420
And if you wanna send an actual
slash, you send two slashes:

00:05:15.420 --> 00:05:18.160
the first one to say "Treat the next
one as a real character", and then...

00:05:19.460 --> 00:05:21.600
It works, but it's clunky.

00:05:22.820 --> 00:05:25.780
And for a while, this kind of "Send
the command in plain English"

00:05:25.780 --> 00:05:28.880
was the only way to make things
work in a couple of languages,

00:05:28.880 --> 00:05:34.040
including PHP, the most commonly used
web programming language in the world.

00:05:34.740 --> 00:05:40.020
To make this worse, the command to add
those slashes was the wonderfully unwieldy:

00:05:40.140 --> 00:05:41.840
mySQL (it's the name of the database.)

00:05:42.140 --> 00:05:43.160
_real

00:05:43.620 --> 00:05:44.840
_escape

00:05:45.020 --> 00:05:47.980
_string. And then you
put whatever text you want there.

00:05:48.300 --> 00:05:50.280
"escape_string" being what you want it to do,

00:05:50.280 --> 00:05:52.140
"mySQL" being the name of the database,

00:05:52.140 --> 00:05:54.780
and "real", because the first one didn't work

00:05:54.880 --> 00:05:57.660
and they couldn't change it
because of backwards compatibility.

00:05:58.820 --> 00:06:02.460
So, anyone who'd used the original string,
which is, like, more than 10 years ago now,

00:06:02.460 --> 00:06:04.860
but anyone who'd used
the original form of this:

00:06:05.140 --> 00:06:07.100
completely insecure.

00:06:07.220 --> 00:06:09.500
Rather than patch that, they
just added the word "real".

00:06:09.740 --> 00:06:13.020
Anyone who forgot to add that, or hadn't
read through all the documentation?

00:06:13.180 --> 00:06:16.320
Yep. Anyone can come along and
effectively delete your database.

00:06:16.320 --> 00:06:21.780
Or do more subtle things, like update other people's
accounts or read other people's passwords.

00:06:22.000 --> 00:06:26.480
Because once you've got access to the
database, if you work out how it works,

00:06:27.120 --> 00:06:29.480
there's really not much you can't do.

00:06:29.880 --> 00:06:32.420
And the thing is, it is so
easy to get this wrong.

00:06:32.900 --> 00:06:36.460
If you get this wrong just
once, anywhere in your code,

00:06:36.460 --> 00:06:39.700
and there are lots of really subtle ways that
I'm not gonna get into to get this wrong,

00:06:39.700 --> 00:06:42.240
it's not just a case of
forgetting to escape quotes.

00:06:42.980 --> 00:06:44.860
There are lots of really
subtle ways to get it wrong.

00:06:45.400 --> 00:06:48.860
If you do that, then your web app is vunerable.

00:06:48.880 --> 00:06:50.880
And if someone figures
out that there's a way in there,

00:06:51.020 --> 00:06:53.600
because they try and create a
username with a quote mark in it,

00:06:54.420 --> 00:06:56.800
then good luck! Say goodbye
to everyone's passwords.

00:06:57.820 --> 00:07:01.340
The way it should be done is
something called prepared statements,

00:07:01.340 --> 00:07:03.580
and if you are programming
anything to do with a database,

00:07:03.860 --> 00:07:06.540
you should be using prepared
statements right now.

00:07:07.480 --> 00:07:08.840
The way they work is...

00:07:09.920 --> 00:07:11.240
It's a hack.

00:07:11.240 --> 00:07:13.140
It's a hack on top of a hack, because, let's be honest,

00:07:13.140 --> 00:07:17.420
sending that kind of plain English SQL
command from a programming language,

00:07:17.640 --> 00:07:21.820
that's a hack, and then we've had to put more on top of
that, and more on top of that, and more on top of that.

00:07:22.080 --> 00:07:24.400
But prepared statements
at least keeps it safe.

00:07:25.080 --> 00:07:27.280
With prepared statements,
you send the query.

00:07:27.680 --> 00:07:37.160
You send "SELECT * FROM users WHERE username ="

00:07:37.500 --> 00:07:40.020
and then you just say '?'.

00:07:40.600 --> 00:07:46.880
And that question mark, you then later
say "Right, this is the data I'm putting in.

00:07:47.140 --> 00:07:48.700
This is not a command.

00:07:48.880 --> 00:07:51.600
Don't do anything to this,
no matter what it looks like.

00:07:52.140 --> 00:07:54.140
This is unsafe.

00:07:54.320 --> 00:08:00.180
Just take it, treat it very gingerly, store it in the
database and don't look at it beyond that."

00:08:00.540 --> 00:08:04.480
It's a little more complicated than that, I am simplifying
massively for, you know, talking to a camera.

00:08:04.800 --> 00:08:06.000
And if you are web programming,

00:08:06.000 --> 00:08:10.460
you should look up the recent security
guidelines of what you should do, etc, etc, etc.

00:08:11.040 --> 00:08:11.800
But,

00:08:12.120 --> 00:08:13.600
this is what you should be using.

00:08:13.800 --> 00:08:15.120
Because right now,

00:08:15.340 --> 00:08:20.840
if you're not using prepared statements, it takes
one mistake, anywhere in your application,

00:08:20.840 --> 00:08:24.000
one thing where you've
forgotten to put a quote mark in,

00:08:24.060 --> 00:08:27.440
or messed it up in some subtle way
that it uses Unicode characters,

00:08:27.440 --> 00:08:29.180
or something wonderfully complicated,

00:08:29.180 --> 00:08:30.840
particularly if you're using a Microsoft database.

00:08:30.840 --> 00:08:32.580
That's from someone that uses Windows.

00:08:34.440 --> 00:08:37.040
If you're not using prepared
statements, you are vulnerable,

00:08:37.480 --> 00:08:38.900
and you need to fix that.

00:08:39.100 --> 00:08:43.540
But in the mean time, as hacks
go, there are worse ones.

