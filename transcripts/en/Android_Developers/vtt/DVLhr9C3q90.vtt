WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.896
[MUSIC PLAYING]

00:00:09.260 --> 00:00:11.720
KRISTIN GRAY: Hi,
and welcome to How

00:00:11.720 --> 00:00:14.630
to Make Better Products
with Android Things.

00:00:14.630 --> 00:00:16.887
I'm Kristin, and I'm UX
lead for Android Things.

00:00:16.887 --> 00:00:18.470
MICHAEL DELGAUDIO:
My name is Michael.

00:00:18.470 --> 00:00:21.920
I'm the UX design manager
for Android Things.

00:00:21.920 --> 00:00:24.590
You can think about this
talk as product design 101

00:00:24.590 --> 00:00:26.150
for people who may
not be designers.

00:00:26.150 --> 00:00:28.940
But if you are a designer,
we got you covered.

00:00:28.940 --> 00:00:30.860
We'll be covering
hardware prototyping

00:00:30.860 --> 00:00:32.420
and the possibilities
of what you can

00:00:32.420 --> 00:00:34.790
create using Android Things.

00:00:34.790 --> 00:00:36.770
In this talk,
we'll cover how you

00:00:36.770 --> 00:00:39.080
can accelerate the prototyping
and product creation

00:00:39.080 --> 00:00:41.420
process using Android Things.

00:00:41.420 --> 00:00:43.370
We'll talk about
a design framework

00:00:43.370 --> 00:00:45.740
that you can use
starting today to help

00:00:45.740 --> 00:00:47.900
you think about
who your users are

00:00:47.900 --> 00:00:51.500
and how they can play a more
prominent role in crafting

00:00:51.500 --> 00:00:53.510
the products that
you're creating.

00:00:53.510 --> 00:00:57.200
And we'll also talk about a
concept project called Lantern

00:00:57.200 --> 00:00:59.390
to demonstrate how
we've applied the design

00:00:59.390 --> 00:01:02.375
framework to use Android Things
to create better products.

00:01:04.980 --> 00:01:06.230
KRISTIN GRAY: Thanks, Michael.

00:01:06.230 --> 00:01:08.270
So we know that
hardware design is

00:01:08.270 --> 00:01:10.590
a long and difficult process.

00:01:10.590 --> 00:01:12.590
It can take anywhere
from two to five years

00:01:12.590 --> 00:01:16.160
to bring a product from ideation
all the way up to product.

00:01:16.160 --> 00:01:18.230
So you start with
ideation, and then you

00:01:18.230 --> 00:01:20.330
move on to the prototype
phase, and then

00:01:20.330 --> 00:01:23.270
you choose your hardware, and
then you design your software

00:01:23.270 --> 00:01:26.510
and get that all coded up, and
then you send it to a factory.

00:01:26.510 --> 00:01:29.360
You finally get it on the store
shelf, and then you cycle back

00:01:29.360 --> 00:01:31.280
and you have to go
through updates.

00:01:31.280 --> 00:01:33.740
So we live in a world
that's rapidly changing,

00:01:33.740 --> 00:01:35.840
and technology can change
right in the middle

00:01:35.840 --> 00:01:37.530
of your production process.

00:01:37.530 --> 00:01:40.040
So how can the design
process keep up?

00:01:40.040 --> 00:01:42.710
That's one of the main reasons
that we created Android Things.

00:01:42.710 --> 00:01:45.380
It's made for a world
that's rapidly changing

00:01:45.380 --> 00:01:47.900
and enables people to
be part of the creation

00:01:47.900 --> 00:01:53.730
process from ideation all
the way through maintenance.

00:01:53.730 --> 00:01:56.190
So at the heart
of Android Things

00:01:56.190 --> 00:01:59.890
there is something called a
SOM, or a System On Module.

00:01:59.890 --> 00:02:00.390
OK?

00:02:00.390 --> 00:02:03.200
And this is also
called a carrier board.

00:02:03.200 --> 00:02:06.390
The SOM can be used
for prototyping,

00:02:06.390 --> 00:02:09.150
and it can be also
placed on a custom board.

00:02:09.150 --> 00:02:13.890
So you can snap this SOM off and
use it on your own custom PCB

00:02:13.890 --> 00:02:15.270
board, OK?

00:02:15.270 --> 00:02:18.150
And this carrier board--
everything that surrounds this

00:02:18.150 --> 00:02:20.070
carrier board is an accessory--

00:02:20.070 --> 00:02:23.640
so everything from ethernet
to power to the headphone jack

00:02:23.640 --> 00:02:25.110
over here.

00:02:25.110 --> 00:02:27.720
This is a powerful tool for
prototyping because you already

00:02:27.720 --> 00:02:30.730
have a lot of tools that
you need to get connected.

00:02:30.730 --> 00:02:32.820
And of course, if you need
a different peripheral,

00:02:32.820 --> 00:02:35.970
you can easily connect it using
traditional methods like pins,

00:02:35.970 --> 00:02:37.560
a breadboard, and resistors.

00:02:42.690 --> 00:02:44.190
MICHAEL DELGAUDIO:
So Android Things

00:02:44.190 --> 00:02:47.680
offers a number of tools for
you to get started easily.

00:02:47.680 --> 00:02:51.360
There is the kit, which has an
iMX7 developer board, a touch

00:02:51.360 --> 00:02:53.184
screen, and a stand.

00:02:53.184 --> 00:02:55.350
So for those of you who
have gotten your kit already

00:02:55.350 --> 00:02:57.630
or maybe been to some
of the code labs,

00:02:57.630 --> 00:02:59.640
the kit assembles
into a useful stand

00:02:59.640 --> 00:03:02.190
that you can use to
prototype right on your desk.

00:03:02.190 --> 00:03:04.770
In addition to the kit, we
offer the Android Things

00:03:04.770 --> 00:03:08.280
toolkit app to help you get
onto Wi-Fi really easily.

00:03:08.280 --> 00:03:10.860
One of the pain points that
we heard from developers

00:03:10.860 --> 00:03:11.985
in the code labs--

00:03:11.985 --> 00:03:14.880
at Droidcon, for example--
was provisioning the devices

00:03:14.880 --> 00:03:17.100
onto the Wi-Fi
network was difficult.

00:03:17.100 --> 00:03:21.915
So with the toolkit app, you can
get it onto Wi-Fi in a breeze.

00:03:21.915 --> 00:03:24.540
It will also step you
through the process

00:03:24.540 --> 00:03:26.190
of making sure that
your hardware is

00:03:26.190 --> 00:03:27.840
connected correctly.

00:03:27.840 --> 00:03:30.180
And with recent updates
to the toolkit app,

00:03:30.180 --> 00:03:32.970
we also have some samples
that you can load from the app

00:03:32.970 --> 00:03:36.240
onto your device to see some of
the powerful things the Android

00:03:36.240 --> 00:03:39.360
Things can do, like running
the TensorFlow demonstrations

00:03:39.360 --> 00:03:42.900
before you get into
Android Studio.

00:03:42.900 --> 00:03:46.860
In addition to the tool kit
app and the hardware kit,

00:03:46.860 --> 00:03:50.580
we also recently updated the
androidthings.withgoogle.com

00:03:50.580 --> 00:03:51.900
community hub.

00:03:51.900 --> 00:03:56.400
So now we offer code snippets,
samples, drivers, and projects

00:03:56.400 --> 00:03:57.280
from the community.

00:03:57.280 --> 00:04:00.120
So if you do build something
cool, you can submit it,

00:04:00.120 --> 00:04:02.040
and we'll feature
it on the site.

00:04:02.040 --> 00:04:04.590
We also recently
updated the site

00:04:04.590 --> 00:04:06.260
to include driver
submissions, so

00:04:06.260 --> 00:04:07.830
that if you do
write a cool driver

00:04:07.830 --> 00:04:10.560
and you do want to submit
it for other people to use,

00:04:10.560 --> 00:04:12.805
we can have that on
the site as well.

00:04:12.805 --> 00:04:14.430
If you haven't already
gotten your kit,

00:04:14.430 --> 00:04:16.110
head over to the I/O
dome, and they'll

00:04:16.110 --> 00:04:20.060
give you information
about how to get one.

00:04:20.060 --> 00:04:21.140
KRISTIN GRAY: Thanks.

00:04:21.140 --> 00:04:24.290
So Android Things provides
an end-to-end solution.

00:04:24.290 --> 00:04:26.660
It offers tools from
prototype to production,

00:04:26.660 --> 00:04:28.270
as Michael mentioned.

00:04:28.270 --> 00:04:30.320
The SOM makes hardware
selection easier

00:04:30.320 --> 00:04:32.370
by offering modular
hardware solutions

00:04:32.370 --> 00:04:34.670
so you can use the same
SOM for prototyping

00:04:34.670 --> 00:04:36.020
as you do production.

00:04:36.020 --> 00:04:39.020
For prototyping, the kit offers
peripherals such as displays,

00:04:39.020 --> 00:04:41.270
a camera, a rainbow
hat for sensor input,

00:04:41.270 --> 00:04:43.880
an interface output,
and also an antenna

00:04:43.880 --> 00:04:46.874
to connect the device to Wi-Fi.

00:04:46.874 --> 00:04:49.040
An app also makes this
easier, as Michael mentioned,

00:04:49.040 --> 00:04:51.162
to assemble your
hardware, and it also

00:04:51.162 --> 00:04:53.120
helps you get familiar
with your carrier board,

00:04:53.120 --> 00:04:55.550
and it helps you
connect to Wi-Fi.

00:04:55.550 --> 00:04:57.530
And finally, when you're
ready for production,

00:04:57.530 --> 00:05:00.980
the developer console can help
you create builds, configure

00:05:00.980 --> 00:05:04.195
your firmware, and release
those builds to devices.

00:05:07.129 --> 00:05:08.170
MICHAEL DELGAUDIO: Great.

00:05:08.170 --> 00:05:13.090
So we wanted to share with
you a concept called Lantern.

00:05:13.090 --> 00:05:15.190
And we're using this
as a demonstration

00:05:15.190 --> 00:05:17.470
to help you
understand how we were

00:05:17.470 --> 00:05:22.030
able to use Android Things
to bring products to life.

00:05:22.030 --> 00:05:25.540
So Lantern is not
a Google product,

00:05:25.540 --> 00:05:27.190
but it's a project
that we worked

00:05:27.190 --> 00:05:30.880
on with the Nord Group that
creates augmented reality

00:05:30.880 --> 00:05:32.870
anywhere around you.

00:05:32.870 --> 00:05:37.750
And so you can see this as
an easy-to-understand example

00:05:37.750 --> 00:05:40.756
of how we were exploring
creativity through prototyping.

00:05:40.756 --> 00:05:42.130
And, again, we
wanted to show you

00:05:42.130 --> 00:05:44.290
the possibilities of
what you can create--

00:05:44.290 --> 00:05:46.660
or what we can create-- or
possibilities of what can

00:05:46.660 --> 00:05:49.600
be created with Android Things.

00:05:49.600 --> 00:05:53.560
So at its heart, Lantern
is obviously a lamp.

00:05:53.560 --> 00:05:56.920
But it's a lamp that enables
you to create augmented reality

00:05:56.920 --> 00:05:59.170
anywhere around you,
and it's created

00:05:59.170 --> 00:06:00.822
using off-the-shelf parts.

00:06:00.822 --> 00:06:02.530
And we thought that
was really important,

00:06:02.530 --> 00:06:04.315
because we wanted
to make sure that it

00:06:04.315 --> 00:06:09.890
has a recipe that you could
potentially build on your own.

00:06:09.890 --> 00:06:11.720
So what is Augmented Reality?

00:06:11.720 --> 00:06:13.470
You may have heard
this term, AR.

00:06:13.470 --> 00:06:15.220
There's the AR kit.

00:06:15.220 --> 00:06:18.340
But how can we create this
sense of augmented reality

00:06:18.340 --> 00:06:20.230
using Android Things?

00:06:20.230 --> 00:06:22.420
So using Lantern
and Android Things,

00:06:22.420 --> 00:06:25.480
we wanted to project
onto everyday objects

00:06:25.480 --> 00:06:28.240
interesting pieces of
information and content

00:06:28.240 --> 00:06:31.150
that may be trapped inside
the phone or on the Web

00:06:31.150 --> 00:06:33.590
but that may enhance
the world around us.

00:06:33.590 --> 00:06:36.820
So say, for example, here
the currently playing

00:06:36.820 --> 00:06:39.880
cast song-- we're projecting
it onto a speaker.

00:06:39.880 --> 00:06:42.370
And none of this was
done using After Effects.

00:06:42.370 --> 00:06:45.160
This is all using the projection
system and the prototype

00:06:45.160 --> 00:06:46.810
that we created.

00:06:46.810 --> 00:06:49.540
Another example of how we're
augmenting everyday objects

00:06:49.540 --> 00:06:52.660
is, in this example, a clock.

00:06:52.660 --> 00:06:56.440
So we're using Google
Calendar and a wall clock

00:06:56.440 --> 00:07:00.190
with Lantern to project
the calendar information

00:07:00.190 --> 00:07:01.900
around the clock.

00:07:01.900 --> 00:07:04.090
And, again, this is all real.

00:07:04.090 --> 00:07:10.240
We shot this in the
studio using Lantern.

00:07:10.240 --> 00:07:13.030
As an exploration, here we felt
like it looked particularly

00:07:13.030 --> 00:07:15.715
good because it was on this
nice, curved, round surface,

00:07:15.715 --> 00:07:19.780
so it gave this ticker
tape kind of look.

00:07:19.780 --> 00:07:21.670
But we're excited about
these possibilities,

00:07:21.670 --> 00:07:23.086
and that's why we
wanted to create

00:07:23.086 --> 00:07:26.170
this to share with you to
demonstrate not only our design

00:07:26.170 --> 00:07:29.680
process, which we'll get
into, but also to give it

00:07:29.680 --> 00:07:31.600
to the community to
see what you guys may

00:07:31.600 --> 00:07:33.940
want to create with it.

00:07:33.940 --> 00:07:35.380
And so what is Lantern made of?

00:07:35.380 --> 00:07:37.210
I mentioned before
that it was created

00:07:37.210 --> 00:07:39.080
using off-the-shelf parts.

00:07:39.080 --> 00:07:40.630
So there's a lamp.

00:07:40.630 --> 00:07:43.780
Inside is a laser
projector, an accelerometer,

00:07:43.780 --> 00:07:46.120
a 3D-printed housing,
and Raspberry Pi

00:07:46.120 --> 00:07:47.710
running Android Things.

00:07:47.710 --> 00:07:49.450
It's important to
recognize that there

00:07:49.450 --> 00:07:52.510
are two pieces of hardware that
Android Things-- two boards,

00:07:52.510 --> 00:07:54.490
excuse me-- that
Android Things runs on.

00:07:54.490 --> 00:07:57.520
It'll run on Raspberry
Pi, and it will also

00:07:57.520 --> 00:08:00.670
run on the iMX7 boards
that are in the kit.

00:08:00.670 --> 00:08:03.040
The Raspberry Pi is a
little bit more prevalent

00:08:03.040 --> 00:08:04.780
at this point in
the maker community,

00:08:04.780 --> 00:08:07.510
so we felt like building it
on that platform with the HDMI

00:08:07.510 --> 00:08:09.941
output was going to be
better for this case

00:08:09.941 --> 00:08:11.440
because we could
connect it directly

00:08:11.440 --> 00:08:14.230
to the laser projector.

00:08:14.230 --> 00:08:16.630
And so once it's assembled,
it looks like this.

00:08:16.630 --> 00:08:18.490
You may have seen it
over in the IoT dome.

00:08:18.490 --> 00:08:21.460
We have one running over
there as an example.

00:08:21.460 --> 00:08:25.330
And we really believe
that this is only now

00:08:25.330 --> 00:08:28.930
possible because of the
democratization of design

00:08:28.930 --> 00:08:32.350
and hardware and prototyping and
access to these kinds of tools

00:08:32.350 --> 00:08:34.159
that we're talking about today.

00:08:34.159 --> 00:08:36.429
So it was really
difficult in the past

00:08:36.429 --> 00:08:38.980
to, say, print a
3D form like this

00:08:38.980 --> 00:08:41.799
and assemble it into
a hardware shell

00:08:41.799 --> 00:08:45.040
because hardware was expensive,
3D prototyping tools were

00:08:45.040 --> 00:08:47.650
inaccessible, and tools
like Android Things

00:08:47.650 --> 00:08:52.060
were not readily available
for you to access to create

00:08:52.060 --> 00:08:55.600
new hardware prototypes.

00:08:55.600 --> 00:08:58.750
And so Lantern can
also be assigned

00:08:58.750 --> 00:09:01.220
content to its
particular context,

00:09:01.220 --> 00:09:03.030
so it's aware of
its orientation.

00:09:03.030 --> 00:09:05.260
And so using that
accelerometer in Lantern,

00:09:05.260 --> 00:09:07.690
we can change its
base position and then

00:09:07.690 --> 00:09:11.020
project different content
onto different surfaces.

00:09:11.020 --> 00:09:13.870
So say we wanted to project
a star chart on the ceiling,

00:09:13.870 --> 00:09:16.150
or, in the examples
that we saw earlier,

00:09:16.150 --> 00:09:18.770
you could see the calendar
information projected

00:09:18.770 --> 00:09:21.550
onto the wall.

00:09:21.550 --> 00:09:26.110
This code is available today at
github.com/nordprojects/lantern

00:09:26.110 --> 00:09:28.450
if you want to check it out,
download the source code,

00:09:28.450 --> 00:09:29.241
and build your own.

00:09:32.590 --> 00:09:36.240
So we didn't set out
to create Lantern.

00:09:36.240 --> 00:09:38.520
So where did Lantern come from?

00:09:38.520 --> 00:09:40.692
You can see a number of
sketches that we created,

00:09:40.692 --> 00:09:42.150
and if you're
designers, you may be

00:09:42.150 --> 00:09:44.610
familiar with ideating
through sketching.

00:09:44.610 --> 00:09:48.330
But we had an inclination
that projected systems

00:09:48.330 --> 00:09:50.370
would be interesting when
we started prototyping

00:09:50.370 --> 00:09:52.200
using Android Things.

00:09:52.200 --> 00:09:57.072
But we used design to turn
our idea into a real thing.

00:09:57.072 --> 00:09:58.530
And today we want
to share with you

00:09:58.530 --> 00:10:00.988
the process that we went through
and the frameworks that we

00:10:00.988 --> 00:10:06.795
used to create amazing
products so you can too.

00:10:06.795 --> 00:10:09.530
KRISTIN GRAY: Thank you.

00:10:09.530 --> 00:10:15.260
So, as Michael mentioned, design
helps create better products.

00:10:15.260 --> 00:10:17.780
How many of you,
with a raise of hand,

00:10:17.780 --> 00:10:21.140
have created something that
was used by another person?

00:10:21.140 --> 00:10:23.010
Go ahead and raise your hands.

00:10:23.010 --> 00:10:24.620
Oh, that's awesome.

00:10:24.620 --> 00:10:26.870
So when we design
things, you might

00:10:26.870 --> 00:10:30.200
know that we use common
principles to ground our work.

00:10:30.200 --> 00:10:32.240
A lot of the things
that we design

00:10:32.240 --> 00:10:34.160
can be carried
over from software

00:10:34.160 --> 00:10:36.890
into hardware,
from a banking app,

00:10:36.890 --> 00:10:40.350
for instance, to a theater
app, as another instance.

00:10:40.350 --> 00:10:45.920
So we use these processes and
principles to ground our work,

00:10:45.920 --> 00:10:48.050
but then we use
the design process

00:10:48.050 --> 00:10:49.830
to move forward as well.

00:10:49.830 --> 00:10:51.590
And then we continue iterating.

00:10:51.590 --> 00:10:54.320
With Android Things, we're
taking some of the software UI

00:10:54.320 --> 00:10:57.090
design concepts and
applying them to hardware.

00:11:00.240 --> 00:11:02.330
So what is design?

00:11:02.330 --> 00:11:06.440
Design is the creation of
tools for people in a context

00:11:06.440 --> 00:11:08.450
to help them achieve a goal.

00:11:08.450 --> 00:11:11.690
If any of you are familiar
with the development process,

00:11:11.690 --> 00:11:14.310
this is very similar
to a user story.

00:11:14.310 --> 00:11:17.367
So for example,
as a dog owner, I

00:11:17.367 --> 00:11:18.950
want to connect a
dog feeder so that I

00:11:18.950 --> 00:11:20.810
can feed my dog from work.

00:11:20.810 --> 00:11:23.090
Or as a person
who orders pizza--

00:11:23.090 --> 00:11:24.710
I order pizza all the time--

00:11:24.710 --> 00:11:26.960
I want visibility into
the delivery route

00:11:26.960 --> 00:11:29.270
so I know when my
pizza will arrive.

00:11:29.270 --> 00:11:31.370
Or something like
a simple story--

00:11:31.370 --> 00:11:33.680
as a knight, I want
a stronger sword

00:11:33.680 --> 00:11:35.790
so that I can defeat the dragon.

00:11:35.790 --> 00:11:37.770
Now taking the
knight example, we

00:11:37.770 --> 00:11:40.490
framed out that the knight
wants a stronger sword.

00:11:40.490 --> 00:11:42.260
This is a tool that
the knight uses

00:11:42.260 --> 00:11:45.110
to achieve his goal of
defeating the dragon.

00:11:45.110 --> 00:11:48.830
We call this tool an interface.

00:11:48.830 --> 00:11:53.030
So people typically think of
a user interface as a touch

00:11:53.030 --> 00:11:55.940
screen or a mobile
phone or a tablet

00:11:55.940 --> 00:11:58.190
because you can tap on the
screen and things happen,

00:11:58.190 --> 00:11:58.690
right?

00:11:58.690 --> 00:11:59.510
It's magic.

00:11:59.510 --> 00:12:01.640
And while this is
true, user interface

00:12:01.640 --> 00:12:02.840
is much broader than that.

00:12:02.840 --> 00:12:05.450
Like in the example I used
before, the user interface

00:12:05.450 --> 00:12:07.370
is the sword.

00:12:07.370 --> 00:12:09.860
But we can see here
from this slide

00:12:09.860 --> 00:12:13.640
that a button can be used
to build upon an interface

00:12:13.640 --> 00:12:16.040
to create a joystick,
which can be

00:12:16.040 --> 00:12:19.430
used to create a
game that shoots down

00:12:19.430 --> 00:12:20.475
aliens from the sky.

00:12:20.475 --> 00:12:22.100
And then there could
be feedback on top

00:12:22.100 --> 00:12:25.130
of that where there's LEDs
inside of a breadboard that

00:12:25.130 --> 00:12:27.230
light up when you push
the button, right?

00:12:27.230 --> 00:12:30.470
So all of these are an
example of a user interface.

00:12:30.470 --> 00:12:33.230
But one of the most
simple user interfaces

00:12:33.230 --> 00:12:37.490
that we use to design things
is simple as a piece of paper

00:12:37.490 --> 00:12:38.090
and a pen.

00:12:41.150 --> 00:12:43.730
And, admittedly, a
design is iterative

00:12:43.730 --> 00:12:46.600
and sometimes it feels
like this, right?

00:12:46.600 --> 00:12:48.080
Like the hamster in the wheel.

00:12:48.080 --> 00:12:48.800
That's OK.

00:12:48.800 --> 00:12:51.420
The truth is is that
you're never done.

00:12:51.420 --> 00:12:54.050
Teams need to collectively
learn through the experience

00:12:54.050 --> 00:12:56.360
of observation and iteration.

00:12:56.360 --> 00:13:00.050
That being said, Android Things
enables you to iterate faster

00:13:00.050 --> 00:13:03.680
by allowing you to work
through many design issues

00:13:03.680 --> 00:13:07.250
by using the design kit as a
base for your prototype phase

00:13:07.250 --> 00:13:09.159
and allowing for early
over-the-air updates

00:13:09.159 --> 00:13:10.325
using the developer console.

00:13:14.210 --> 00:13:16.400
MICHAEL DELGAUDIO: So
design is a process

00:13:16.400 --> 00:13:18.860
that can be used to create
better products for everyone.

00:13:18.860 --> 00:13:22.460
And we know that design is
agnostic of medium, time,

00:13:22.460 --> 00:13:24.506
trends, or technology company.

00:13:24.506 --> 00:13:26.630
And we believe it's important
to think about design

00:13:26.630 --> 00:13:28.670
as a process that's
agnostic of these things

00:13:28.670 --> 00:13:31.670
so that no matter what changes,
you have the right tools

00:13:31.670 --> 00:13:37.290
to apply that process, whatever
problem you're working on.

00:13:37.290 --> 00:13:42.070
So we talked about design being
in the context of people--

00:13:42.070 --> 00:13:44.550
or people in the
context of goals.

00:13:44.550 --> 00:13:47.090
But how is it done and
what does it look like?

00:13:47.090 --> 00:13:51.200
So each milestone outlined
here-- planning, prototyping,

00:13:51.200 --> 00:13:53.240
getting feedback,
and iteration--

00:13:53.240 --> 00:13:54.800
needs to be vetted, right?

00:13:54.800 --> 00:13:56.870
And using this
iterative framework,

00:13:56.870 --> 00:14:00.500
we can enable this to help
us make less mistakes,

00:14:00.500 --> 00:14:03.020
produce better products, and
have a cheaper production

00:14:03.020 --> 00:14:05.900
process along the way
because we learned earlier

00:14:05.900 --> 00:14:09.290
how the product needs to
take shape as it's evolving.

00:14:09.290 --> 00:14:13.130
This will truly help you
make decisions sooner.

00:14:13.130 --> 00:14:15.490
So thinking about planning.

00:14:15.490 --> 00:14:17.780
Planning takes the
shape of many forms.

00:14:17.780 --> 00:14:20.780
First, we aim to create
baseline understandings of needs

00:14:20.780 --> 00:14:22.920
that may exist for our users.

00:14:22.920 --> 00:14:25.760
So we may begin by talking
to people about pain points

00:14:25.760 --> 00:14:28.160
or getting inspiration from
places from pain points

00:14:28.160 --> 00:14:29.690
that we have ourselves.

00:14:29.690 --> 00:14:31.520
We may look at
competitive products

00:14:31.520 --> 00:14:34.670
to think about how they are
solving specific problems

00:14:34.670 --> 00:14:37.010
and how we may want to
do things differently.

00:14:37.010 --> 00:14:39.860
If you're familiar with the
design for software systems,

00:14:39.860 --> 00:14:42.020
you may be familiar with
creating user personas

00:14:42.020 --> 00:14:44.960
to get an idea of how
you can gain empathy

00:14:44.960 --> 00:14:48.600
into the mind of somebody who's
actually using your product.

00:14:48.600 --> 00:14:50.710
We also create things
like wireframes,

00:14:50.710 --> 00:14:53.360
storyboards to begin to
tell the story of how

00:14:53.360 --> 00:14:56.330
we've seen the product's
use unfolding over time.

00:14:58.840 --> 00:15:00.490
We then create something, right?

00:15:00.490 --> 00:15:02.570
So based on what we
know and the hypothesis

00:15:02.570 --> 00:15:04.790
of how something
should work, we begin

00:15:04.790 --> 00:15:07.070
by creating
medium-fidelity designs.

00:15:07.070 --> 00:15:10.400
So we saw those really
preliminary sketches, right?

00:15:10.400 --> 00:15:13.220
We may create something
like a video simulation

00:15:13.220 --> 00:15:15.860
to think about how it
might look and feel

00:15:15.860 --> 00:15:18.510
before it actually works.

00:15:18.510 --> 00:15:20.690
We might make something
on a breadboard

00:15:20.690 --> 00:15:23.296
to get an idea of what
it functionally might do

00:15:23.296 --> 00:15:24.920
or what some of the
key characteristics

00:15:24.920 --> 00:15:28.380
of that functionality
might be like.

00:15:28.380 --> 00:15:30.380
And then finally,
getting feedback.

00:15:30.380 --> 00:15:34.040
So it's important to get
feedback in this cycle

00:15:34.040 --> 00:15:36.350
because we need to understand
how people are actually

00:15:36.350 --> 00:15:37.640
using things.

00:15:37.640 --> 00:15:39.860
So qualitative
feedback, understanding

00:15:39.860 --> 00:15:41.480
the user's perception
of how they

00:15:41.480 --> 00:15:45.020
feel about a particular feature
or what you're proposing.

00:15:45.020 --> 00:15:47.210
Quantitative
research can be used

00:15:47.210 --> 00:15:50.960
to gain data to understand
how specific features are

00:15:50.960 --> 00:15:53.180
being used or not used.

00:15:53.180 --> 00:15:56.600
Internal feedback-- we're
constantly sharing projects

00:15:56.600 --> 00:16:00.230
with each other internally to
get feedback from other people.

00:16:00.230 --> 00:16:04.100
It's really helpful to get
an objective eye on something

00:16:04.100 --> 00:16:06.260
so that that person
can point out something

00:16:06.260 --> 00:16:08.190
that you may not have seen.

00:16:08.190 --> 00:16:10.790
In guerrilla research,
I'm showing your prototype

00:16:10.790 --> 00:16:13.730
to somebody who may not be
familiar with the project--

00:16:13.730 --> 00:16:16.130
can give you a tremendous
insight because then

00:16:16.130 --> 00:16:18.980
you can have an objective
set of eyes on features

00:16:18.980 --> 00:16:20.660
that you may be
creating from somebody

00:16:20.660 --> 00:16:23.540
who may not be familiar
with the projects before.

00:16:23.540 --> 00:16:25.070
And finally, in
later stages, you

00:16:25.070 --> 00:16:27.650
may employ something
like a lab study,

00:16:27.650 --> 00:16:29.360
more formally to
ask participants

00:16:29.360 --> 00:16:33.290
to use your prototype to see in
a controlled environment, side

00:16:33.290 --> 00:16:35.780
by side, what different
variations may be like.

00:16:38.374 --> 00:16:39.790
And we're not
saying that you need

00:16:39.790 --> 00:16:41.940
to do all of these
things along the way.

00:16:41.940 --> 00:16:45.602
So for example, we may
create a rough storyboard,

00:16:45.602 --> 00:16:47.060
which can then
translate to a click

00:16:47.060 --> 00:16:49.190
through and then gain
internal feedback

00:16:49.190 --> 00:16:51.170
and iterate on that cycle.

00:16:51.170 --> 00:16:54.920
Or for example, we may do a
bit of competitive analysis

00:16:54.920 --> 00:16:57.560
or define some
must-have requirements

00:16:57.560 --> 00:17:00.274
and then create a looks
like/feels like prototype

00:17:00.274 --> 00:17:01.940
and then perform some
guerrilla research

00:17:01.940 --> 00:17:04.069
with somebody who's not
familiar with the product we're

00:17:04.069 --> 00:17:04.568
creating.

00:17:08.050 --> 00:17:10.270
KRISTIN GRAY: So
something else to mention

00:17:10.270 --> 00:17:12.369
is that hardware isn't hard--

00:17:12.369 --> 00:17:14.020
it's just different.

00:17:14.020 --> 00:17:16.480
You need to consider
what parts that you

00:17:16.480 --> 00:17:18.550
need to make what you want.

00:17:18.550 --> 00:17:21.250
You also need to think about
designing a system, possibly

00:17:21.250 --> 00:17:23.319
with non-customized parts.

00:17:23.319 --> 00:17:24.880
Sometimes it's like Jenga--

00:17:24.880 --> 00:17:27.819
one requirement can
actually affect another.

00:17:27.819 --> 00:17:30.700
And you also need to think
about future-proofing.

00:17:30.700 --> 00:17:33.500
How much space do you need
to allocate for user data,

00:17:33.500 --> 00:17:35.920
for example, if you're
designing a camera?

00:17:35.920 --> 00:17:38.690
This might be
important for users.

00:17:38.690 --> 00:17:42.190
And finally, you also need
to think about form factor.

00:17:42.190 --> 00:17:43.630
How will all of
the parts that you

00:17:43.630 --> 00:17:46.600
want to fit into your design
fit into a form factor that's

00:17:46.600 --> 00:17:47.815
delightful for your users?

00:17:50.800 --> 00:17:54.200
One other thing to consider
is your interaction design.

00:17:54.200 --> 00:17:57.400
So when you connect the
product to the Internet,

00:17:57.400 --> 00:17:59.950
do you make a
companion app for that?

00:17:59.950 --> 00:18:02.500
How do you make sure that
the notifications can

00:18:02.500 --> 00:18:04.760
be seen from a reasonable view?

00:18:04.760 --> 00:18:07.330
How do you make it accessible?

00:18:07.330 --> 00:18:10.150
Take something as easy
as a software update.

00:18:10.150 --> 00:18:13.030
Do you tell the user at 8:00
AM when people are actually

00:18:13.030 --> 00:18:15.310
using your product, or
do you wait until 2:00

00:18:15.310 --> 00:18:17.920
AM when people might not
be using your product

00:18:17.920 --> 00:18:19.960
and they might be asleep?

00:18:19.960 --> 00:18:22.210
Also, what if there's no screen?

00:18:22.210 --> 00:18:25.210
Something else to consider
for the land of IoT.

00:18:25.210 --> 00:18:27.460
So we can apply
our design process

00:18:27.460 --> 00:18:31.510
using Android Things to help
us iterate faster and get

00:18:31.510 --> 00:18:34.660
that feedback sooner, make
better informed decisions

00:18:34.660 --> 00:18:37.507
for these questions,
and also ultimately help

00:18:37.507 --> 00:18:38.590
us design better products.

00:18:41.420 --> 00:18:42.860
And one thing to note--

00:18:42.860 --> 00:18:45.010
if you're a software
designer, something

00:18:45.010 --> 00:18:47.770
that you're really familiar
with is the Undo button.

00:18:47.770 --> 00:18:50.050
In hardware, you don't
have an Undo button.

00:18:52.596 --> 00:18:54.220
It's really easy to
roll back a release

00:18:54.220 --> 00:18:56.420
when you're a software
engineer as well.

00:18:56.420 --> 00:18:58.390
But when you're
designing for hardware,

00:18:58.390 --> 00:18:59.900
it's a lot more permanent.

00:18:59.900 --> 00:19:02.500
So you need to have a
strong iteration cycle,

00:19:02.500 --> 00:19:05.360
because each time that you move
forward in your design cycle,

00:19:05.360 --> 00:19:07.870
the more expensive it
gets to move backwards.

00:19:10.920 --> 00:19:14.420
For example, in
1966, NASA's budget

00:19:14.420 --> 00:19:19.676
was over 4% of US spending, and
the undertaking was mammoth.

00:19:19.676 --> 00:19:23.180
Now, for example, we can
shoot 3D printers into space,

00:19:23.180 --> 00:19:26.660
assemble technology up there,
update it from your laptop,

00:19:26.660 --> 00:19:27.920
and reuse the rockets--

00:19:27.920 --> 00:19:29.990
all at a fraction of the price.

00:19:29.990 --> 00:19:33.530
We can shoot cars into space
simply because it's fun

00:19:33.530 --> 00:19:34.445
and because we can.

00:19:37.500 --> 00:19:40.600
One other thing to note
here is the design process.

00:19:40.600 --> 00:19:43.440
So with the Mercury,
Gemini, and Apollo missions,

00:19:43.440 --> 00:19:46.200
they were all built
to get us to the Moon.

00:19:46.200 --> 00:19:50.460
Mercury put a man
into space, Gemini

00:19:50.460 --> 00:19:54.570
to extend the capsule stay from
hours into days, and the Apollo

00:19:54.570 --> 00:19:56.770
to get us to the Moon.

00:19:56.770 --> 00:19:58.650
These were some pretty
big iteration cycles,

00:19:58.650 --> 00:20:01.260
but, you know, they were
really onto something.

00:20:01.260 --> 00:20:04.200
You may also notice that even
today, some hardware design

00:20:04.200 --> 00:20:06.870
is actually based on
a waterfall process.

00:20:06.870 --> 00:20:09.490
It requires everything
to be perfect

00:20:09.490 --> 00:20:12.310
and is expensive in
end-to-end cycles.

00:20:12.310 --> 00:20:15.000
So for example, you start
with your requirements,

00:20:15.000 --> 00:20:18.060
you hand those off once those
are done to the designers, who

00:20:18.060 --> 00:20:20.070
finish the designs,
and then they hand that

00:20:20.070 --> 00:20:22.680
off to the engineers
for implementation.

00:20:22.680 --> 00:20:24.780
Once the implementation
is finished off,

00:20:24.780 --> 00:20:28.140
then they hand it off to the
QA engineers for verification,

00:20:28.140 --> 00:20:30.690
and then you cycle back
through a maintenance cycle.

00:20:30.690 --> 00:20:32.910
And you do that
over and over again.

00:20:32.910 --> 00:20:36.714
And if you make a mistake or you
decide that you want to change,

00:20:36.714 --> 00:20:38.130
if you're late in
the process, you

00:20:38.130 --> 00:20:41.430
have to go all the way back up
to the Requirements section.

00:20:41.430 --> 00:20:43.304
So on the right,
you'll see something

00:20:43.304 --> 00:20:45.720
that looks a little bit more
like the process that Michael

00:20:45.720 --> 00:20:48.400
was talking about, only except
we have a few milestones

00:20:48.400 --> 00:20:49.900
sprinkled in there.

00:20:49.900 --> 00:20:52.980
So each one of these
is an iteration cycle.

00:20:52.980 --> 00:20:55.980
You plan, prototype,
feed back, and iterate,

00:20:55.980 --> 00:21:00.510
and you keep continuing to do
that throughout your process.

00:21:00.510 --> 00:21:03.540
Iteration is flexible, and
it helps keep costs contained

00:21:03.540 --> 00:21:05.280
and the users included
in the process.

00:21:09.050 --> 00:21:11.090
In the past, there were
also very specific roles

00:21:11.090 --> 00:21:13.110
that contribute to the
creation of a project,

00:21:13.110 --> 00:21:15.170
including fabrication engineers.

00:21:15.170 --> 00:21:18.560
Now with the access to tools
like on-demand 3D printing,

00:21:18.560 --> 00:21:20.510
product creation has
become more democratized,

00:21:20.510 --> 00:21:22.140
as Michael mentioned before.

00:21:22.140 --> 00:21:23.810
Anyone can print 3D parts.

00:21:23.810 --> 00:21:26.180
Designers can code
visualizations now

00:21:26.180 --> 00:21:28.520
with the ease of
prototyping tools.

00:21:28.520 --> 00:21:31.880
App developers can also apply
their skills to hardware,

00:21:31.880 --> 00:21:35.890
and Android Things makes
that easy to do so.

00:21:35.890 --> 00:21:38.500
Specifically dealing with
software, in the past,

00:21:38.500 --> 00:21:41.865
it was also labor-intensive
to create and release a build,

00:21:41.865 --> 00:21:43.990
and it was difficult to
set up testing environments

00:21:43.990 --> 00:21:45.705
for those devices as well.

00:21:45.705 --> 00:21:47.830
With Android Things, we've
introduced the developer

00:21:47.830 --> 00:21:51.250
console so that users can update
their app in Android Studio,

00:21:51.250 --> 00:21:55.300
open up the dev console, and
create a build and release it,

00:21:55.300 --> 00:21:56.440
all in a few easy steps.

00:21:59.060 --> 00:22:00.560
MICHAEL DELGAUDIO:
So now that we've

00:22:00.560 --> 00:22:02.990
talked a little bit
about design and process,

00:22:02.990 --> 00:22:05.180
we want to bring this back
to the Lantern project

00:22:05.180 --> 00:22:06.690
that I mentioned earlier.

00:22:06.690 --> 00:22:09.260
So how are we able to use
the process of planning,

00:22:09.260 --> 00:22:12.050
prototyping, getting feedback,
and iterating to help

00:22:12.050 --> 00:22:14.360
us improve this concept?

00:22:14.360 --> 00:22:17.510
We were able to think about
people, context, and goals

00:22:17.510 --> 00:22:19.950
and then apply this
to this simple idea.

00:22:19.950 --> 00:22:22.190
So as a designer
sitting at my desk,

00:22:22.190 --> 00:22:25.250
I'd like to bring my room to
life through projections--

00:22:25.250 --> 00:22:28.640
simple idea that connects
people, context, and goals.

00:22:28.640 --> 00:22:33.470
We started by sketching,
but what happened next?

00:22:33.470 --> 00:22:36.380
We began to create a looks
like/feels like prototype.

00:22:36.380 --> 00:22:40.010
So before we were even
assembling hardware or putting

00:22:40.010 --> 00:22:43.790
together the housing, we
started to think about

00:22:43.790 --> 00:22:46.520
what would a time rendering
look like as a projection

00:22:46.520 --> 00:22:47.990
if it was sitting next to me?

00:22:47.990 --> 00:22:52.670
Or what would I want to project
onto the desk in front of me

00:22:52.670 --> 00:22:54.680
as I was typing?

00:22:54.680 --> 00:22:58.850
Would it be some
bitcoin information

00:22:58.850 --> 00:23:01.430
or a price of
something else or how

00:23:01.430 --> 00:23:03.110
I'm doing in a certain game?

00:23:03.110 --> 00:23:05.300
A looks like/feels
like prototype

00:23:05.300 --> 00:23:10.060
can help you understand how
something exists in its end

00:23:10.060 --> 00:23:12.440
state without actually
having to get there

00:23:12.440 --> 00:23:15.970
through the full
creation process.

00:23:15.970 --> 00:23:17.760
So again, we went
back to sketching

00:23:17.760 --> 00:23:21.237
to think about how the
housing may come together.

00:23:21.237 --> 00:23:23.070
If you're thinking about
a lamp and thinking

00:23:23.070 --> 00:23:25.080
about the parts that
needed to go in it, well,

00:23:25.080 --> 00:23:27.480
as I mentioned earlier, we'd
need the Raspberry Pi board,

00:23:27.480 --> 00:23:28.980
we'd need some
sort of projector,

00:23:28.980 --> 00:23:32.310
and it would to start to fit
inside of this specific shape.

00:23:34.954 --> 00:23:36.620
And this was one of
the first prototypes

00:23:36.620 --> 00:23:39.700
that we created using foamcore
and some of the parts.

00:23:39.700 --> 00:23:42.230
So once we knew the
parts that we needed,

00:23:42.230 --> 00:23:45.650
we began to put them together
and assemble them not into a 3D

00:23:45.650 --> 00:23:49.880
print right away, but just
using foam, creating slices,

00:23:49.880 --> 00:23:51.580
cutting them out,
and making the form

00:23:51.580 --> 00:23:57.380
so that we knew that they
would fit into the lamp.

00:23:57.380 --> 00:23:59.810
And before we put
everything together,

00:23:59.810 --> 00:24:01.340
we started to
prototype what some

00:24:01.340 --> 00:24:04.940
of these content simulations
may look like functionally.

00:24:04.940 --> 00:24:06.530
So on the left,
what you're seeing

00:24:06.530 --> 00:24:09.560
is an accelerometer test showing
how we could change content

00:24:09.560 --> 00:24:11.099
based on orientation.

00:24:11.099 --> 00:24:12.390
And, again, it's really simple.

00:24:12.390 --> 00:24:15.500
We had the projector, we had
the Raspberry Pi connected

00:24:15.500 --> 00:24:18.650
to an accelerometer
running Android Things,

00:24:18.650 --> 00:24:21.020
and we just said, can we
show you the direction

00:24:21.020 --> 00:24:24.260
or show us the direction
of which way the object is

00:24:24.260 --> 00:24:25.230
pointing?

00:24:25.230 --> 00:24:28.137
So does it know if it's
pointing up, down, or sideways?

00:24:28.137 --> 00:24:29.720
And then on the
right-hand side, these

00:24:29.720 --> 00:24:31.303
were some of the
initial tests that we

00:24:31.303 --> 00:24:34.520
did looking at how we could get
the currently playing song off

00:24:34.520 --> 00:24:38.110
of the Wi-Fi when you're
casting to a nearby device

00:24:38.110 --> 00:24:40.940
and just projecting it
onto a notepad to see

00:24:40.940 --> 00:24:42.800
is that even possible
using the hardware

00:24:42.800 --> 00:24:46.310
that we think we want to use?

00:24:46.310 --> 00:24:48.480
And looking at
physical prototyping,

00:24:48.480 --> 00:24:52.470
here's Joe with the first
assembled prototype, looking

00:24:52.470 --> 00:24:54.930
at the accelerometer
changing the content based

00:24:54.930 --> 00:24:57.540
on the orientation of
the physical prototype.

00:24:57.540 --> 00:25:01.500
And here, it flips
up at the ceiling,

00:25:01.500 --> 00:25:04.020
and then you can see the
content start to come to life.

00:25:04.020 --> 00:25:06.690
So, again, we built these
pieces up individually

00:25:06.690 --> 00:25:09.240
and then started to put them
together into their final form.

00:25:11.907 --> 00:25:14.240
So one tool that I wanted to
mention that the team found

00:25:14.240 --> 00:25:18.800
highly beneficial in creating
this project was processing.

00:25:18.800 --> 00:25:20.990
And so if you're a
designer, you may already

00:25:20.990 --> 00:25:24.740
be familiar with processing
as a lightweight IDE that

00:25:24.740 --> 00:25:27.920
enables you to quickly
create visualizations.

00:25:27.920 --> 00:25:30.350
For designers like
me, it helps me

00:25:30.350 --> 00:25:33.680
because I can create
visualizations independently,

00:25:33.680 --> 00:25:36.230
and there's a really nice
library that was recently

00:25:36.230 --> 00:25:39.800
released from the processing
foundation called Processing

00:25:39.800 --> 00:25:40.901
for Android.

00:25:40.901 --> 00:25:43.400
And what that enables you to
do is write processing and then

00:25:43.400 --> 00:25:45.050
test that on an Android device.

00:25:45.050 --> 00:25:46.550
You can test that
on your phone, you

00:25:46.550 --> 00:25:48.770
can test that on your
[? ware ?] device.

00:25:48.770 --> 00:25:50.900
But you can also use that
on Android Things, which

00:25:50.900 --> 00:25:53.270
is really nice because you
could work on a visualization

00:25:53.270 --> 00:25:56.910
and then load that onto
your hardware independently.

00:25:56.910 --> 00:26:01.132
What this enabled us to do was
work with the visualizations,

00:26:01.132 --> 00:26:02.840
get them to a place
where we wanted them,

00:26:02.840 --> 00:26:05.660
and then integrate
them into the hardware.

00:26:05.660 --> 00:26:08.780
A few gotchas-- when you're
moving from processing,

00:26:08.780 --> 00:26:11.940
you can export an
Android Studio project.

00:26:11.940 --> 00:26:15.140
However, you'll need to
upgrade the minimum SDK

00:26:15.140 --> 00:26:18.350
version in the Gradle
file in order for you

00:26:18.350 --> 00:26:19.960
to work with Android Things.

00:26:19.960 --> 00:26:22.820
So Android Things requires
a slightly higher Android

00:26:22.820 --> 00:26:24.090
build number.

00:26:24.090 --> 00:26:27.530
And once you do that, you'll be
able to connect your processing

00:26:27.530 --> 00:26:30.740
visualizations to hardware
to manipulate them

00:26:30.740 --> 00:26:34.220
through the standard
Android Things GPIO inputs.

00:26:37.300 --> 00:26:39.580
And so thinking about
our iterative process,

00:26:39.580 --> 00:26:43.420
how did we go about getting
feedback on Lantern?

00:26:43.420 --> 00:26:46.815
So first we started asking team
members around us to use it.

00:26:46.815 --> 00:26:48.440
We couldn't really
go out to the public

00:26:48.440 --> 00:26:50.815
because this was a private
thing that we were working on,

00:26:50.815 --> 00:26:52.720
but we were able to
find other people inside

00:26:52.720 --> 00:26:55.840
of Google who were not
familiar with the project--

00:26:55.840 --> 00:26:58.570
team members such as the
ML team on Android Things,

00:26:58.570 --> 00:27:00.400
who thought it was
pretty interesting.

00:27:00.400 --> 00:27:03.430
But one thing that we had
really kind of pushed away from

00:27:03.430 --> 00:27:08.320
was the idea of integrating
interactivity into our MVP,

00:27:08.320 --> 00:27:10.620
or our first iteration
of the project.

00:27:10.620 --> 00:27:14.050
We were specifically adverse
to incorporating interactivity

00:27:14.050 --> 00:27:17.320
because we wanted to prove
that we could project content

00:27:17.320 --> 00:27:19.210
in different ways.

00:27:19.210 --> 00:27:21.680
Interactivity adds another
layer of complexity.

00:27:21.680 --> 00:27:25.420
So, again, we wanted to simplify
this into its basic form

00:27:25.420 --> 00:27:29.020
so that we could prove that the
independent interactions were

00:27:29.020 --> 00:27:29.980
working.

00:27:29.980 --> 00:27:33.490
However, when we shared the
prototype with the ML team,

00:27:33.490 --> 00:27:37.270
they were really keen
on integrating a camera.

00:27:37.270 --> 00:27:40.630
And so because we were
working with Android Things

00:27:40.630 --> 00:27:43.120
and working with 3D
printing, we were

00:27:43.120 --> 00:27:46.420
able to make some modifications,
integrate the camera.

00:27:46.420 --> 00:27:50.560
And the Nord team happened
to be working in London,

00:27:50.560 --> 00:27:53.200
and the Mountain View
team was over here.

00:27:53.200 --> 00:27:55.240
And it was really
an interesting story

00:27:55.240 --> 00:27:58.510
of how this evolved
because, again, never before

00:27:58.510 --> 00:28:00.910
have you had access
to tools like this,

00:28:00.910 --> 00:28:03.640
like 3D printing from the web.

00:28:03.640 --> 00:28:05.720
We were able to actually
build prototypes

00:28:05.720 --> 00:28:08.290
in two physical locations
and collaborate on them

00:28:08.290 --> 00:28:10.010
and build them up
simultaneously,

00:28:10.010 --> 00:28:11.360
which is really cool.

00:28:11.360 --> 00:28:13.300
And, again, Android
Things made it really easy

00:28:13.300 --> 00:28:15.280
to integrate new
hardware like this

00:28:15.280 --> 00:28:20.140
and connect it to the
visualization pieces in a snap.

00:28:20.140 --> 00:28:21.940
And so with the camera
in place, we now

00:28:21.940 --> 00:28:23.920
had the possibility
of a greater range

00:28:23.920 --> 00:28:26.630
of interactivity and
interactive input.

00:28:26.630 --> 00:28:28.615
And so this led us
to creating Quick,

00:28:28.615 --> 00:28:30.100
Draw!, pen-and-paper edition.

00:28:30.100 --> 00:28:32.170
So for those of you who
were at I/O last year,

00:28:32.170 --> 00:28:35.590
you may have seen Quick,
Draw!, which is a Creative Labs

00:28:35.590 --> 00:28:39.040
project from Google that
prompts you with a word,

00:28:39.040 --> 00:28:41.380
and then as you draw it
on a tablet, on the web,

00:28:41.380 --> 00:28:44.392
or on your phone, it starts
to guess what you're drawing.

00:28:44.392 --> 00:28:45.850
And we thought that
would be really

00:28:45.850 --> 00:28:48.000
cool to do in the
physical world now

00:28:48.000 --> 00:28:52.280
that we had this
projected AR system.

00:28:52.280 --> 00:28:56.380
And so what we did is
we did just that, right?

00:28:56.380 --> 00:29:00.202
So previously, it was limited
to screen-based inputs,

00:29:00.202 --> 00:29:01.660
but we thought,
wouldn't it be cool

00:29:01.660 --> 00:29:06.189
if we could use just a pen,
paper, capture that input,

00:29:06.189 --> 00:29:07.480
feed that into the Quick, Draw!

00:29:07.480 --> 00:29:10.720
Engine, and then have an
interactive game that you could

00:29:10.720 --> 00:29:13.610
use in the physical world?

00:29:13.610 --> 00:29:15.790
This is an example
of the demonstration

00:29:15.790 --> 00:29:18.730
that we have set up
over in the IoT dome.

00:29:18.730 --> 00:29:20.980
If you haven't visited the
dome, you can check it out,

00:29:20.980 --> 00:29:22.563
and you can try it
out for yourselves.

00:29:22.563 --> 00:29:26.190
We've got a Lantern set
up, and it works great.

00:29:26.190 --> 00:29:27.940
So you're prompted
with a word, and as you

00:29:27.940 --> 00:29:30.490
start to draw with
the pen and the paper,

00:29:30.490 --> 00:29:32.740
it starts to guess
on this projected

00:29:32.740 --> 00:29:34.120
interface in front of you.

00:29:34.120 --> 00:29:37.225
So, again, thinking about this
as a mixed reality surface.

00:29:42.061 --> 00:29:43.558
And there you go.

00:29:46.060 --> 00:29:49.497
So now we've gone
through one cycle, right?

00:29:49.497 --> 00:29:52.080
We've planned, we've prototyped
it, and we've gotten feedback,

00:29:52.080 --> 00:29:53.760
and we've iterated
on that cycle.

00:29:53.760 --> 00:29:57.047
We made some improvements,
and so we're done, right?

00:29:57.047 --> 00:29:58.380
We're ready to ship the project.

00:29:58.380 --> 00:29:59.350
KRISTIN GRAY: Um,
no, no, no, no.

00:29:59.350 --> 00:30:01.016
We're not going to
ship our product yet.

00:30:07.610 --> 00:30:11.830
So what we're going to do is
start the production process.

00:30:11.830 --> 00:30:15.940
And so what this means is
we're going to move forward,

00:30:15.940 --> 00:30:20.140
maybe mass producing
something like Lantern.

00:30:20.140 --> 00:30:22.870
So Android Things has
many prototyping tools

00:30:22.870 --> 00:30:24.100
to get you started.

00:30:24.100 --> 00:30:25.970
After you've completed
your proof of concept

00:30:25.970 --> 00:30:28.570
and the initial prototypes,
everything is working,

00:30:28.570 --> 00:30:30.410
and you know what you
want it to look like,

00:30:30.410 --> 00:30:33.700
and you know you want to
move over to a custom board.

00:30:33.700 --> 00:30:36.631
This is easy because of the
SOM, like I mentioned before.

00:30:36.631 --> 00:30:38.380
You shouldn't have to
redo all of the work

00:30:38.380 --> 00:30:40.210
that you did in the
prototyping phase, just

00:30:40.210 --> 00:30:42.160
because you're using
the same architecture

00:30:42.160 --> 00:30:45.050
to create your products.

00:30:45.050 --> 00:30:48.670
So now let's say that I want
to mass produce Lantern, right?

00:30:48.670 --> 00:30:51.220
And as part of the
feedback process,

00:30:51.220 --> 00:30:54.940
I wanted to learn more about
factory production and bring-up

00:30:54.940 --> 00:30:58.630
processes, so I visit a
few factories in China.

00:30:58.630 --> 00:31:01.290
As it turns out, they
have a process too,

00:31:01.290 --> 00:31:04.990
and it maps well to the
overall product design process.

00:31:04.990 --> 00:31:07.060
When you mass produce
a product, the factory

00:31:07.060 --> 00:31:09.550
will build out a
line with stations.

00:31:09.550 --> 00:31:11.830
Each station is
staffed with people

00:31:11.830 --> 00:31:13.720
who put together the product.

00:31:13.720 --> 00:31:16.930
If I want millions of products,
or millions of Lanterns,

00:31:16.930 --> 00:31:19.120
the factory might
automate that process

00:31:19.120 --> 00:31:21.880
and make some really
cool robots and automate

00:31:21.880 --> 00:31:25.300
things with conveyor
belts and those robots.

00:31:25.300 --> 00:31:27.730
During the whole process,
though, it's good for you

00:31:27.730 --> 00:31:29.410
as a product
designer to continue

00:31:29.410 --> 00:31:32.980
iterating on your product
but probably leaning more

00:31:32.980 --> 00:31:35.530
toward software instead
of hardware changes,

00:31:35.530 --> 00:31:37.820
and I'll show you why.

00:31:37.820 --> 00:31:40.870
So you've created
10 units, perhaps,

00:31:40.870 --> 00:31:42.580
in your prototyping
phase, right?

00:31:42.580 --> 00:31:44.950
And then you send those
off to the factory,

00:31:44.950 --> 00:31:48.520
and they're going to run
everything through something

00:31:48.520 --> 00:31:50.740
called a validation test.

00:31:50.740 --> 00:31:55.219
And you start out with
engineering validation tests,

00:31:55.219 --> 00:31:57.010
so you send your
prototypes to the factory,

00:31:57.010 --> 00:31:59.530
and they'll send
back maybe 100 units.

00:31:59.530 --> 00:32:01.600
And during that time,
you need to make sure

00:32:01.600 --> 00:32:04.474
that everything works with the
materials that you've selected.

00:32:04.474 --> 00:32:05.890
They're probably
going to be using

00:32:05.890 --> 00:32:08.680
soft tools, possibly
hard tools in this stage,

00:32:08.680 --> 00:32:13.150
to create all of the forms
for your industrial design.

00:32:13.150 --> 00:32:15.970
And then after that, after
you've verified everything,

00:32:15.970 --> 00:32:18.910
then you send any feedback
back to the factory,

00:32:18.910 --> 00:32:22.660
and you move on to
design validation test.

00:32:22.660 --> 00:32:24.790
This is where you move
on to stainless tooling,

00:32:24.790 --> 00:32:26.581
all of the stations
are set up, and they're

00:32:26.581 --> 00:32:27.690
staffed with people.

00:32:27.690 --> 00:32:30.460
And at this point, the
product design team

00:32:30.460 --> 00:32:32.260
should be using
Android Things' console

00:32:32.260 --> 00:32:35.200
to update software and update
all of the testing channels

00:32:35.200 --> 00:32:38.680
to help make your
iteration cycles go better.

00:32:38.680 --> 00:32:40.930
In the meantime, you should
also be doing user testing

00:32:40.930 --> 00:32:42.640
throughout all of these phases.

00:32:42.640 --> 00:32:44.500
Then when you have
feedback for the factory

00:32:44.500 --> 00:32:47.560
and you send things
back, then you

00:32:47.560 --> 00:32:50.470
move on into the
product validation test.

00:32:50.470 --> 00:32:52.210
This phase make
sure that everything

00:32:52.210 --> 00:32:53.930
is moving as fast as possible.

00:32:53.930 --> 00:32:55.690
This is more for the
factory than for you.

00:32:55.690 --> 00:32:58.120
They'll send you back
around 1,000 units,

00:32:58.120 --> 00:33:01.750
and you should be continuing to
use the console to run and test

00:33:01.750 --> 00:33:03.860
metrics on these devices.

00:33:03.860 --> 00:33:05.830
And finally for a
mass production,

00:33:05.830 --> 00:33:07.750
you should be
using the developer

00:33:07.750 --> 00:33:11.380
console to send in
easier updates if needed

00:33:11.380 --> 00:33:13.880
and gather more metrics
on these devices.

00:33:13.880 --> 00:33:17.484
So as you can see here, as
you move through the process,

00:33:17.484 --> 00:33:19.900
they should be sending devices
back to you the whole time,

00:33:19.900 --> 00:33:22.300
and you should be testing
those devices, giving feedback

00:33:22.300 --> 00:33:24.340
extensively through QA.

00:33:24.340 --> 00:33:26.590
And one other note from
a design perspective--

00:33:26.590 --> 00:33:29.920
as you move forward through
this framework, your solutions

00:33:29.920 --> 00:33:33.160
might need to get more creative,
more MacGyver-y and lean more

00:33:33.160 --> 00:33:34.870
toward software
solutions, because it

00:33:34.870 --> 00:33:37.694
might be too expensive or too
late to go backwards and start

00:33:37.694 --> 00:33:39.735
over again if you're
working with a product team.

00:33:42.255 --> 00:33:43.630
So some of the
tools that you can

00:33:43.630 --> 00:33:45.490
use to make this all
go a lot smoother

00:33:45.490 --> 00:33:47.129
is the developer console.

00:33:47.129 --> 00:33:49.420
So we've included something
new called the app library.

00:33:52.130 --> 00:33:54.370
This allows you to add
apps to the app library

00:33:54.370 --> 00:33:55.996
and use them on
multiple projects.

00:33:55.996 --> 00:33:57.370
So if you have
multiple Lanterns,

00:33:57.370 --> 00:34:00.100
for example, you can
write one APK, upload it

00:34:00.100 --> 00:34:03.416
to the app library, and then
you could use it throughout each

00:34:03.416 --> 00:34:04.540
of your different products.

00:34:14.440 --> 00:34:17.800
When you're ready to build,
you can actually go through

00:34:17.800 --> 00:34:21.250
and you can use
the build settings,

00:34:21.250 --> 00:34:23.206
and then you can create
a build individually

00:34:23.206 --> 00:34:24.580
and run through
each of the steps

00:34:24.580 --> 00:34:27.460
to set all of the firmware
and software for your device,

00:34:27.460 --> 00:34:29.330
and then you create a
build very seamlessly.

00:34:33.426 --> 00:34:35.550
And when you're ready to
test over-the-air updates,

00:34:35.550 --> 00:34:37.504
you can create
releases and channels

00:34:37.504 --> 00:34:39.420
You can push those
releases to channels so you

00:34:39.420 --> 00:34:41.250
can test your software
in different groups

00:34:41.250 --> 00:34:42.940
for detailed testing.

00:34:42.940 --> 00:34:45.420
So for example, here I'm
creating custom channel,

00:34:45.420 --> 00:34:47.040
I'm creating an
update, and I'm going

00:34:47.040 --> 00:34:50.070
to push these updates to my
devices or my fleets of devices

00:34:50.070 --> 00:34:50.850
wirelessly.

00:34:55.030 --> 00:34:56.860
And finally, after
your release, you

00:34:56.860 --> 00:34:59.530
can gather metrics to help
you gather quantitative data

00:34:59.530 --> 00:35:02.260
on your products to help
you make better decisions

00:35:02.260 --> 00:35:04.460
about what you need to do next.

00:35:04.460 --> 00:35:07.480
So for example, in
Lantern version 0.1,

00:35:07.480 --> 00:35:11.697
you have maybe a set of
features that you want to use,

00:35:11.697 --> 00:35:13.780
and then you want to move
on and add Quick, Draw!,

00:35:13.780 --> 00:35:16.905
you can do so fairly easily
by using the build tool.

00:35:16.905 --> 00:35:18.280
And then you can
check in metrics

00:35:18.280 --> 00:35:19.450
to see if it's doing better.

00:35:22.137 --> 00:35:23.720
And once your device
is in the market,

00:35:23.720 --> 00:35:25.800
the feedback doesn't stop there.

00:35:25.800 --> 00:35:28.550
So you should be gathering
feedback, doing user testing,

00:35:28.550 --> 00:35:31.310
and checking everything as
your device is in the market.

00:35:31.310 --> 00:35:33.800
Through any updates
that you've created,

00:35:33.800 --> 00:35:35.890
continue doing user
testing, continue

00:35:35.890 --> 00:35:36.890
doing guerrilla testing.

00:35:36.890 --> 00:35:38.960
Anything that's in
that research column,

00:35:38.960 --> 00:35:41.900
you should be continuing to
do to help you create updates

00:35:41.900 --> 00:35:45.590
for your products and also help
you define the next iteration

00:35:45.590 --> 00:35:48.920
cycles through your [INAUDIBLE].

00:35:48.920 --> 00:35:50.420
And that's the process.

00:35:50.420 --> 00:35:53.270
So we've taken you
through ideation,

00:35:53.270 --> 00:35:55.490
prototyping with
Android Things kits,

00:35:55.490 --> 00:35:57.710
making final
hardware selections,

00:35:57.710 --> 00:36:01.340
creating builds and hardware
bring-up, the factory process,

00:36:01.340 --> 00:36:04.760
all the way to the end product
with maintenance and updates,

00:36:04.760 --> 00:36:06.470
running through
design iterations

00:36:06.470 --> 00:36:09.950
each step of the way.

00:36:09.950 --> 00:36:11.960
MICHAEL DELGAUDIO:
Thanks, Kristin.

00:36:11.960 --> 00:36:14.000
And so we've talked
about today how design is

00:36:14.000 --> 00:36:17.350
people in context with goals.

00:36:17.350 --> 00:36:18.350
And it's a process.

00:36:18.350 --> 00:36:20.930
We can plan,
prototype, feed back,

00:36:20.930 --> 00:36:22.760
and iterate on that
process in order

00:36:22.760 --> 00:36:26.570
to help those people in those
contexts achieve those goals.

00:36:26.570 --> 00:36:28.790
And now it's easier
than ever to participate

00:36:28.790 --> 00:36:30.970
in the creation of
physical products

00:36:30.970 --> 00:36:32.600
than it has been ever before.

00:36:32.600 --> 00:36:36.080
Android Things offers tools to
help accelerate the prototyping

00:36:36.080 --> 00:36:40.250
process that you can use
today to kickstart your ideas.

00:36:40.250 --> 00:36:43.700
Processing enables the
fast experimentation

00:36:43.700 --> 00:36:46.370
of rich graphics and, when
combined with hardware,

00:36:46.370 --> 00:36:49.220
enables you to make really
powerful experiences.

00:36:49.220 --> 00:36:50.810
All of these techniques
really enable

00:36:50.810 --> 00:36:53.750
you to make better connected
products for everyone

00:36:53.750 --> 00:36:57.140
using Android Things.

00:36:57.140 --> 00:37:01.031
You can get started
today at experiments.with

00:37:01.031 --> 00:37:03.830
google.com/lantern.

00:37:03.830 --> 00:37:06.380
You can check out some
of the samples, projects,

00:37:06.380 --> 00:37:09.454
and more at
androidthings.withgoogle.com.

00:37:09.454 --> 00:37:11.120
If you've picked up
a kit today, there's

00:37:11.120 --> 00:37:14.660
lots of sample code over
there for you to try out.

00:37:14.660 --> 00:37:17.330
If you haven't gotten a
kit, you can get one over

00:37:17.330 --> 00:37:19.070
at the IoT dome.

00:37:19.070 --> 00:37:22.814
A big thank you to the Nord
group, Ben, Joe, and Mike

00:37:22.814 --> 00:37:24.230
for helping out
with this project,

00:37:24.230 --> 00:37:26.870
Ding on the Android
Things UX team

00:37:26.870 --> 00:37:29.480
for managing all of the
intercontinental prototyping

00:37:29.480 --> 00:37:33.320
that was required for this, and
Chloe on the Android Things ML

00:37:33.320 --> 00:37:36.860
team for making all of
the ML magic come to life.

00:37:36.860 --> 00:37:38.240
Please check it out.

00:37:38.240 --> 00:37:40.400
We'd love to see you over there.

00:37:40.400 --> 00:37:43.154
Thank you guys for coming,
and if you have feedback,

00:37:43.154 --> 00:37:44.320
we do want to hear from you.

00:37:44.320 --> 00:37:46.637
You can do so right here.

00:37:46.637 --> 00:37:47.595
Thanks so much.

00:37:47.595 --> 00:37:52.677
[MUSIC PLAYING]

