WEBVTT
Kind: captions
Language: en

00:00:08.570 --> 00:00:11.240
It's always the analog things,
like projectors, that cause

00:00:11.240 --> 00:00:13.890
problems for things like this.

00:00:13.890 --> 00:00:16.140
Well, thank you very
much for coming.

00:00:16.140 --> 00:00:17.260
My name's Greg DeMichillie.

00:00:17.260 --> 00:00:19.610
I'm the director of product
management for the Cloud

00:00:19.610 --> 00:00:20.860
Platform at Google.

00:00:20.860 --> 00:00:23.700
That means I lead the team of
product managers responsible

00:00:23.700 --> 00:00:27.370
for things like App Engine and
Compute Engine, the developer

00:00:27.370 --> 00:00:30.800
experience, our developer tools,
the billing system, and

00:00:30.800 --> 00:00:34.790
basically anything that you
touch as an end user developer

00:00:34.790 --> 00:00:36.560
coming to the Google Cloud.

00:00:36.560 --> 00:00:39.220
Because of the way we work at
Google, I'm also responsible

00:00:39.220 --> 00:00:41.220
for the product management
teams that build the

00:00:41.220 --> 00:00:44.360
fundamental infrastructure that
Google itself runs on.

00:00:44.360 --> 00:00:48.020
So if you think about what we
do, we allow you to build on

00:00:48.020 --> 00:00:50.750
the same infrastructure that
we use ourselves at Google.

00:00:50.750 --> 00:00:53.140
And our team of product managers
is responsible for

00:00:53.140 --> 00:00:56.430
both the internal and external
facing parts of that.

00:00:56.430 --> 00:00:58.290
I've got a background
in developer tools.

00:00:58.290 --> 00:01:01.120
I was at Microsoft for
10 years in the '90s.

00:01:01.120 --> 00:01:03.980
And so I've been building
things for

00:01:03.980 --> 00:01:05.349
developers my whole career.

00:01:05.349 --> 00:01:07.670
And I'm really happy to be here
in Telaviv where there's

00:01:07.670 --> 00:01:11.580
such a vibrant community of
start-ups and ISVs and IT.

00:01:11.580 --> 00:01:13.590
I've only been here so far
one day, and this is my

00:01:13.590 --> 00:01:14.540
first trip to Israel.

00:01:14.540 --> 00:01:18.560
But it's really exciting to be
here, so thank you for coming.

00:01:18.560 --> 00:01:22.770
I thought today I'd start at a
high level and then go down

00:01:22.770 --> 00:01:25.010
into giving you an overview
of what the Cloud Platform

00:01:25.010 --> 00:01:26.810
actually has to offer.

00:01:26.810 --> 00:01:29.320
First of all, if you think about
what's happening in the

00:01:29.320 --> 00:01:32.340
way we build applications today,
there's a number of

00:01:32.340 --> 00:01:34.260
things that have fundamentally
changed the way we build

00:01:34.260 --> 00:01:35.280
applications.

00:01:35.280 --> 00:01:38.940
The first is this almost
limitless capacity that we

00:01:38.940 --> 00:01:42.530
have available, and not just
available, but cheaply.

00:01:42.530 --> 00:01:45.610
A statistic I saw the other day
said for about $600 you

00:01:45.610 --> 00:01:49.830
can buy enough disk storage to
store all the world's music.

00:01:49.830 --> 00:01:51.480
That's phenomenal if
you think about it.

00:01:51.480 --> 00:01:54.660
You think about a time not that
long ago when, to build

00:01:54.660 --> 00:01:57.210
an application, you had
to buy hardware.

00:01:57.210 --> 00:01:58.450
You had to buy storage.

00:01:58.450 --> 00:02:00.050
You had to buy networking.

00:02:00.050 --> 00:02:02.750
Before your first customer even
came to your website, you

00:02:02.750 --> 00:02:04.850
had thousands and thousands
of dollars that you

00:02:04.850 --> 00:02:06.510
had to put up front.

00:02:06.510 --> 00:02:09.930
Now, with the way that the cloud
is developing, you don't

00:02:09.930 --> 00:02:11.160
have to do that.

00:02:11.160 --> 00:02:14.640
You really have limitless
capacity available on demand

00:02:14.640 --> 00:02:19.330
when you need it in
a real time way.

00:02:19.330 --> 00:02:22.340
And if you think about the way
applications tend to work,

00:02:22.340 --> 00:02:24.490
they tend to fall into
a couple patterns.

00:02:24.490 --> 00:02:26.810
The first kind of application
pattern you see a lot is the

00:02:26.810 --> 00:02:28.910
classic batch computing.

00:02:28.910 --> 00:02:33.440
Every night at 2AM, my system
runs a report from all of

00:02:33.440 --> 00:02:34.500
yesterday's sales.

00:02:34.500 --> 00:02:36.050
And at 4AM it's done.

00:02:36.050 --> 00:02:39.010
And then it sits idle for
the next 22 hours.

00:02:39.010 --> 00:02:43.740
And in that model, you buy a
computer and you pay for it 24

00:02:43.740 --> 00:02:46.010
hours a day even though it
actually is only running a

00:02:46.010 --> 00:02:48.670
task for two hours overnight.

00:02:48.670 --> 00:02:50.600
And so you have wasted money.

00:02:50.600 --> 00:02:53.640
Another pattern you see is
the hyper growth company.

00:02:53.640 --> 00:02:56.440
You're in a startup, and you're
doubling every week the

00:02:56.440 --> 00:02:58.590
number of users you have.

00:02:58.590 --> 00:03:01.480
And now you're faced with the
task of-- can I even by

00:03:01.480 --> 00:03:02.770
computers fast enough?

00:03:02.770 --> 00:03:05.720
Can I go online and order
hardware and get it installed

00:03:05.720 --> 00:03:06.860
fast enough to keep up?

00:03:06.860 --> 00:03:09.220
And the answer is
no, you can't.

00:03:09.220 --> 00:03:12.220
So you're immediately faced with
the choice of buying too

00:03:12.220 --> 00:03:15.750
much to satisfy your growth,
or having unsatisfied

00:03:15.750 --> 00:03:18.650
customers because you can't
keep up with the growth of

00:03:18.650 --> 00:03:20.810
your company.

00:03:20.810 --> 00:03:24.060
We see the unpredictable
bursting.

00:03:24.060 --> 00:03:26.530
My application is running
fine and I'm serving

00:03:26.530 --> 00:03:27.580
my customer's needs.

00:03:27.580 --> 00:03:32.710
And then I end up being on
the front page of Reddit.

00:03:32.710 --> 00:03:35.290
Or I get picked up
by a blogger.

00:03:35.290 --> 00:03:38.060
And all of a sudden, out of the
blue, my network traffic

00:03:38.060 --> 00:03:41.280
goes up 10, 20, 50 times.

00:03:41.280 --> 00:03:42.510
What do I do?

00:03:42.510 --> 00:03:45.670
As a business, I can't afford
to provision enough capacity

00:03:45.670 --> 00:03:48.810
just in case I get massively
popular.

00:03:48.810 --> 00:03:51.830
So I end up again having
unsatisfied customers because

00:03:51.830 --> 00:03:54.550
I couldn't meet up
with demand.

00:03:54.550 --> 00:03:58.540
And the fourth pattern you see a
lot is predictable bursting.

00:03:58.540 --> 00:04:00.050
Think of FIFA.

00:04:00.050 --> 00:04:03.180
Very predictably, every four
years the World Cup happens

00:04:03.180 --> 00:04:05.990
and there's a huge uptake
in their traffic

00:04:05.990 --> 00:04:06.960
load that they have.

00:04:06.960 --> 00:04:09.360
And very predictably, once
the World Cup's over, it

00:04:09.360 --> 00:04:10.590
settles back down.

00:04:10.590 --> 00:04:11.920
So what do they do?

00:04:11.920 --> 00:04:14.920
Do they buy enough capacity to
handle that peak when they

00:04:14.920 --> 00:04:18.250
know it's coming, even though
it's going to be wasted?

00:04:18.250 --> 00:04:21.769
Or do they again have this risk
of potentially having

00:04:21.769 --> 00:04:24.980
unsatisfied customers because
they couldn't meet the demand?

00:04:24.980 --> 00:04:29.520
All of these speak to the need
to move away from the model of

00:04:29.520 --> 00:04:31.390
owning your own hardware,
provisioning your own

00:04:31.390 --> 00:04:34.590
hardware, and onto a model
where you can provision

00:04:34.590 --> 00:04:36.300
hardware on the fly.

00:04:36.300 --> 00:04:39.810
And your application can use as
much compute resources as

00:04:39.810 --> 00:04:44.600
it needs, but only the resources
that it needs.

00:04:44.600 --> 00:04:46.500
So how does that relate
to Google?

00:04:46.500 --> 00:04:49.720
Well, it turns out Google has
been facing this exact problem

00:04:49.720 --> 00:04:51.060
for 14 years.

00:04:51.060 --> 00:04:54.850
From the moment we built Google
Search, we had the

00:04:54.850 --> 00:04:59.000
problems of-- how do you deal
with going from thousands of

00:04:59.000 --> 00:05:01.660
users to millions or
billions of users?

00:05:01.660 --> 00:05:06.600
How do you provision capacity so
that you're not wasting it?

00:05:06.600 --> 00:05:09.510
How do you get power
efficiency?

00:05:09.510 --> 00:05:14.030
And along the way, we've had to
invent a number of hardware

00:05:14.030 --> 00:05:17.110
and software techniques just
to make Google work.

00:05:17.110 --> 00:05:20.430
If you think about it, when we
set out to build a search

00:05:20.430 --> 00:05:23.920
engine for the internet, the
first thing you realize is you

00:05:23.920 --> 00:05:28.470
need to store multiple copies
of the entire worldwide web.

00:05:28.470 --> 00:05:29.760
How do you do that?

00:05:29.760 --> 00:05:32.710
There's no file system out there
when we started that

00:05:32.710 --> 00:05:35.190
could hold three, four,
five copies of the

00:05:35.190 --> 00:05:36.240
entire worldwide web.

00:05:36.240 --> 00:05:37.770
So we had to invent that.

00:05:37.770 --> 00:05:41.650
There were no storage systems we
could go buy off the shelf

00:05:41.650 --> 00:05:42.870
that would satisfy that.

00:05:42.870 --> 00:05:45.250
So we had to invent storage
technologies.

00:05:45.250 --> 00:05:48.110
And time and time again, as
we've built things like Search

00:05:48.110 --> 00:05:52.380
and Apps and Gmail, we've had
to build out the fundamental

00:05:52.380 --> 00:05:55.400
hardware and software
infrastructure.

00:05:55.400 --> 00:05:58.440
And what we're doing with the
Cloud Platform is we're taking

00:05:58.440 --> 00:06:01.810
all of that infrastructure that
we had to build for Apps,

00:06:01.810 --> 00:06:07.120
and Search, and Gmail, and Maps,
and Android, and Docs.

00:06:07.120 --> 00:06:10.580
And we're now opening it up so
that your applications can run

00:06:10.580 --> 00:06:12.320
on that same infrastructure.

00:06:12.320 --> 00:06:14.010
These are some photos
of some of the data

00:06:14.010 --> 00:06:15.120
centers that we have.

00:06:15.120 --> 00:06:17.390
And frankly they're as
pretty to look at as

00:06:17.390 --> 00:06:19.840
they are to run on.

00:06:19.840 --> 00:06:21.950
I think this one is in Finland,
I'm not certain.

00:06:24.900 --> 00:06:27.760
And it's not just the
infrastructure of servers and

00:06:27.760 --> 00:06:30.710
storage, it's also networking.

00:06:30.710 --> 00:06:34.730
One of the things you may not
know is that last year Google,

00:06:34.730 --> 00:06:38.100
in partnership with a couple
other companies, we ran our

00:06:38.100 --> 00:06:41.170
own cable underneath the Pacific
Ocean to connect the

00:06:41.170 --> 00:06:43.020
US to Asia Pacific.

00:06:43.020 --> 00:06:45.450
In fact, we're the
only non-telco--

00:06:45.450 --> 00:06:47.220
non telecommunications
company--

00:06:47.220 --> 00:06:52.560
that owns its own submarine
cable under the ocean.

00:06:52.560 --> 00:06:55.370
And we do that because we
needed high capacity

00:06:55.370 --> 00:06:58.750
networking for our data centers
in the US to our data

00:06:58.750 --> 00:07:01.100
centers in Asia Pacific.

00:07:01.100 --> 00:07:02.440
And this picture here--

00:07:02.440 --> 00:07:04.230
see in the middle-- actually
you can't quite see it, is

00:07:04.230 --> 00:07:06.630
actually the cable being
laid at the bottom

00:07:06.630 --> 00:07:07.750
of the Pacific Ocean.

00:07:07.750 --> 00:07:11.910
The trench being laid, the
optic cable being run.

00:07:11.910 --> 00:07:13.950
Those are the kind of
investments that we're doing

00:07:13.950 --> 00:07:16.810
in our infrastructure in
order to keep pace

00:07:16.810 --> 00:07:18.670
with what we need.

00:07:18.670 --> 00:07:21.570
And we're inviting you
along for the ride.

00:07:21.570 --> 00:07:23.410
It doesn't stop there.

00:07:23.410 --> 00:07:26.320
Last year we announced publicly
that we're spending

00:07:26.320 --> 00:07:31.390
2.9 billion US in additional
infrastructure.

00:07:31.390 --> 00:07:34.870
Data centers, more computers,
more storage, networking

00:07:34.870 --> 00:07:38.220
capacity, power efficiency.

00:07:38.220 --> 00:07:40.060
And this is going to continue.

00:07:40.060 --> 00:07:46.310
And we really don't see a
slowing down in this.

00:07:46.310 --> 00:07:48.630
But it's not just hardware.

00:07:48.630 --> 00:07:50.130
It's also about software.

00:07:50.130 --> 00:07:52.510
I alluded to this earlier when I
talked about Search, and the

00:07:52.510 --> 00:07:56.350
fact we had to invent
our own file system.

00:07:56.350 --> 00:07:59.590
That has shown up time
and time again.

00:07:59.590 --> 00:08:03.150
In 2004, we released
a public paper on a

00:08:03.150 --> 00:08:04.870
technology called MapReduce.

00:08:04.870 --> 00:08:08.820
You now know that as the
foundation of Hadoop, right?

00:08:08.820 --> 00:08:11.500
Internally, we've actually
already moved off MapReduce

00:08:11.500 --> 00:08:12.980
and we're on to the
next generation,

00:08:12.980 --> 00:08:15.000
something we call Flume.

00:08:15.000 --> 00:08:17.900
And that's the technology we're
using to do our own

00:08:17.900 --> 00:08:19.980
MapReduce like workloads
at Google.

00:08:19.980 --> 00:08:22.410
Similarly, we've made
investments in software like

00:08:22.410 --> 00:08:26.180
BigTable, which is a storage
technology that allows you to

00:08:26.180 --> 00:08:30.750
do NoSQL-like data storage
with incredibly high

00:08:30.750 --> 00:08:31.800
reliability.

00:08:31.800 --> 00:08:33.590
And again, we've published
a paper on that.

00:08:33.590 --> 00:08:36.640
And that is the foundation of
what you see in the Cloud

00:08:36.640 --> 00:08:38.870
Datastore that we'll
talk about.

00:08:38.870 --> 00:08:42.690
Dremel, a technology to allow
you to do querying of

00:08:42.690 --> 00:08:47.230
non-relational data with the
SQL-like language interface.

00:08:47.230 --> 00:08:50.820
Spanner, Colossus, these are
all places where we've

00:08:50.820 --> 00:08:53.640
advanced the state of computer
science, we've published

00:08:53.640 --> 00:08:57.740
papers, and we're building now
our Cloud Platform products on

00:08:57.740 --> 00:08:58.480
top of those.

00:08:58.480 --> 00:09:03.950
So that as we continue to invest
in the software to run

00:09:03.950 --> 00:09:06.520
our own business, we're exposing
those to you as

00:09:06.520 --> 00:09:09.010
developers and you'll see that
as we go through the actual

00:09:09.010 --> 00:09:10.260
components of the
Cloud Platform.

00:09:14.540 --> 00:09:17.600
And in fact, it's just us when
we've invited other people to

00:09:17.600 --> 00:09:20.000
come look at our product.

00:09:20.000 --> 00:09:20.550
Wired--

00:09:20.550 --> 00:09:23.560
we gave Wired a tour of some of
our data centers and they

00:09:23.560 --> 00:09:26.880
really came away with it's not
just about software and

00:09:26.880 --> 00:09:31.480
hardware, it's the combination
of software, hardware, and our

00:09:31.480 --> 00:09:35.640
efficiency that allows us to
actually run and deploy that

00:09:35.640 --> 00:09:37.240
hardware and software.

00:09:37.240 --> 00:09:40.410
That's another favorite pictures
of mine of one of our

00:09:40.410 --> 00:09:41.370
data centers.

00:09:41.370 --> 00:09:44.290
It's interesting, the people
ask the color of the pipes,

00:09:44.290 --> 00:09:45.160
did we just paint those?

00:09:45.160 --> 00:09:46.710
Because they're the
Google colors.

00:09:46.710 --> 00:09:47.910
It turns out it's not true.

00:09:47.910 --> 00:09:52.440
There's a standard color coding
in data centers of red,

00:09:52.440 --> 00:09:53.920
blue, yellow, and green.

00:09:53.920 --> 00:09:56.670
Meaning things like
hot air, cool air,

00:09:56.670 --> 00:09:57.960
hot water, cool water.

00:09:57.960 --> 00:10:00.310
And it turns out that the
standard is pretty much the

00:10:00.310 --> 00:10:01.430
same as the Google colors.

00:10:01.430 --> 00:10:04.050
But everybody else just paints
or puts a little

00:10:04.050 --> 00:10:05.230
stripe around the pipe.

00:10:05.230 --> 00:10:06.450
And so we thought,
why not paint the

00:10:06.450 --> 00:10:07.470
whole pipe that color?

00:10:07.470 --> 00:10:08.830
Just because we think
it looks better.

00:10:08.830 --> 00:10:10.520
And if you're going to work in
one of our data centers, why

00:10:10.520 --> 00:10:12.440
shouldn't you work in a
nice environment too?

00:10:15.260 --> 00:10:18.460
With that, as background, let
me take you through an

00:10:18.460 --> 00:10:22.020
overview of the Cloud Platform
itself that we offer to you as

00:10:22.020 --> 00:10:23.830
developers.

00:10:23.830 --> 00:10:28.210
First thing is it is a platform
aimed at application

00:10:28.210 --> 00:10:29.880
and IT developers.

00:10:29.880 --> 00:10:32.840
Google also has software
as a service product,

00:10:32.840 --> 00:10:34.340
like Gmail a Docs.

00:10:34.340 --> 00:10:36.410
I'm not going to talk
about those today.

00:10:36.410 --> 00:10:39.370
They're fabulous products, we
use them ourselves constantly.

00:10:39.370 --> 00:10:42.220
We're going to talk today
about infrastructure and

00:10:42.220 --> 00:10:45.370
platform as a service in the
form of Compute Engine, App

00:10:45.370 --> 00:10:47.850
Engine, and the associated
products.

00:10:47.850 --> 00:10:50.460
So first, just make sure we're
level set about the

00:10:50.460 --> 00:10:52.750
differences between those
different components.

00:10:52.750 --> 00:10:55.500
Basically, when you look at the
Cloud Platform, you can

00:10:55.500 --> 00:11:00.430
choose how much control you want
to maintain and how much

00:11:00.430 --> 00:11:03.840
automation you want us
to provide for you.

00:11:03.840 --> 00:11:07.500
Starting with infrastructure as
a service, at that level,

00:11:07.500 --> 00:11:10.420
we will manage for you your
networking, your storage, your

00:11:10.420 --> 00:11:12.310
servers, and your
virtualization.

00:11:12.310 --> 00:11:16.000
You still have complete
flexibility and control over

00:11:16.000 --> 00:11:19.000
what operating system you run,
what middleware you run, what

00:11:19.000 --> 00:11:21.110
applications you deploy.

00:11:21.110 --> 00:11:24.580
If you go to Platform as a
service, you give up a little

00:11:24.580 --> 00:11:27.780
bit of that direct control in
that we now manage your

00:11:27.780 --> 00:11:30.400
operating systems and middleware
and run time.

00:11:30.400 --> 00:11:33.570
But in exchange for that, you
get much higher levels of

00:11:33.570 --> 00:11:37.230
productivity because we can
provide auto scaling, auto

00:11:37.230 --> 00:11:38.340
load balancing--

00:11:38.340 --> 00:11:41.870
we can provide more of that
for you automatically.

00:11:41.870 --> 00:11:44.380
Think about this as the
equivalent of programming in a

00:11:44.380 --> 00:11:46.030
high level language
and programming

00:11:46.030 --> 00:11:47.090
in a low level language.

00:11:47.090 --> 00:11:49.740
Some things you write in C
because you have total

00:11:49.740 --> 00:11:51.720
control, and it lets you
do everything you want.

00:11:51.720 --> 00:11:54.430
But if you write things in C,
you have to worry about more

00:11:54.430 --> 00:11:55.340
of that yourself.

00:11:55.340 --> 00:11:57.900
If you write in a language like
Java, you don't think

00:11:57.900 --> 00:11:59.690
about [INAUDIBLE] management
anymore.

00:11:59.690 --> 00:12:01.170
It's provided automatically.

00:12:01.170 --> 00:12:05.440
But you give up a little bit
in terms of flexibility.

00:12:05.440 --> 00:12:10.400
We support whatever place you
want to be on this continuum,

00:12:10.400 --> 00:12:13.735
from you manage it yourself to
we manage it automatically.

00:12:17.570 --> 00:12:19.060
Let's look at specifically
what makes

00:12:19.060 --> 00:12:20.110
up the Cloud Platform.

00:12:20.110 --> 00:12:22.140
Think of it in three
broad buckets.

00:12:22.140 --> 00:12:23.600
First is Compute.

00:12:23.600 --> 00:12:27.730
This is the actual application
logic of the system you're

00:12:27.730 --> 00:12:30.130
developing, the actual
Compute Services.

00:12:30.130 --> 00:12:32.730
Of course, you can't have an
application if you don't also

00:12:32.730 --> 00:12:33.850
have storage.

00:12:33.850 --> 00:12:38.080
And we have a range of storage
products from traditional SQL

00:12:38.080 --> 00:12:44.250
in a cloud hosted environment,
to no SQL, to file system like

00:12:44.250 --> 00:12:45.750
storage as well.

00:12:45.750 --> 00:12:48.320
And then finally, there's a set
of application services

00:12:48.320 --> 00:12:50.130
that you want to use
regardless of what

00:12:50.130 --> 00:12:52.170
technologies you're using.

00:12:52.170 --> 00:12:56.230
Around things like querying of
data, integrating with Mobile

00:12:56.230 --> 00:12:58.960
back-ends caching, queues,
things like that.

00:12:58.960 --> 00:13:02.170
And we're going to walk through
each of these in turn.

00:13:02.170 --> 00:13:05.520
But it's important to point out
that this is a snapshot in

00:13:05.520 --> 00:13:08.570
time and we're evolving
very quickly.

00:13:08.570 --> 00:13:13.110
In fact, in the last 12 months,
we've rolled out 163

00:13:13.110 --> 00:13:15.220
new features or major
improvements

00:13:15.220 --> 00:13:16.760
in the Cloud Platform.

00:13:16.760 --> 00:13:21.350
Everything from new instance
types in our virtual machines,

00:13:21.350 --> 00:13:27.360
to new programming languages in
App Engine, to new pricing,

00:13:27.360 --> 00:13:29.650
new charging, lower prices.

00:13:29.650 --> 00:13:32.690
What I'm presenting to you is
a snapshot in time, but we

00:13:32.690 --> 00:13:35.940
continue to roll out
new features on

00:13:35.940 --> 00:13:37.290
a very rapid basis.

00:13:37.290 --> 00:13:40.040
And in fact, we actually
see this accelerating.

00:13:40.040 --> 00:13:42.500
Not just holding still,
but getting faster.

00:13:42.500 --> 00:13:45.350
As we hire more people, as we
invest more, we find that

00:13:45.350 --> 00:13:48.230
we're actually able to increase
the velocity at which

00:13:48.230 --> 00:13:50.930
we roll out new features.

00:13:50.930 --> 00:13:54.650
Let's take a look inside each of
the parts of the platform.

00:13:54.650 --> 00:13:56.920
We'll start with the
Compute side.

00:13:56.920 --> 00:13:59.740
Again, this is where the bulk
of your application logic

00:13:59.740 --> 00:14:02.730
sits, the actual core of what
your application does.

00:14:02.730 --> 00:14:04.520
And we provide two different
models here.

00:14:04.520 --> 00:14:08.410
One is infrastructure as a
service in Compute Engine,

00:14:08.410 --> 00:14:10.650
where you specify virtual
machines and you

00:14:10.650 --> 00:14:12.050
have complete control.

00:14:12.050 --> 00:14:15.390
And App Engine, which is highly
managed environment.

00:14:15.390 --> 00:14:17.540
Let's start with
Compute Engine.

00:14:17.540 --> 00:14:19.980
The main value of Compute Engine
is it's a familiar

00:14:19.980 --> 00:14:20.750
environment.

00:14:20.750 --> 00:14:25.830
If you're running a Debian
operating system on premises,

00:14:25.830 --> 00:14:29.140
on a machine under your desk,
you can very quickly spin up a

00:14:29.140 --> 00:14:31.810
virtual machine that runs that
same operating system.

00:14:31.810 --> 00:14:34.660
Install the same software,
manage it with the same tools,

00:14:34.660 --> 00:14:36.870
run the same applications.

00:14:36.870 --> 00:14:41.210
But what you get with running
it on Google is you get the

00:14:41.210 --> 00:14:42.930
Google network, for one.

00:14:42.930 --> 00:14:45.790
Google has a very, very high
performance network.

00:14:45.790 --> 00:14:48.670
You also get very, very
fast start up times.

00:14:48.670 --> 00:14:51.490
We have virtual machines
that launch--

00:14:51.490 --> 00:14:53.890
from the time you provision the
machine until they're up

00:14:53.890 --> 00:14:57.210
and running in about the
10 second range.

00:14:57.210 --> 00:14:59.910
And frankly, we think that's
a little slow.

00:14:59.910 --> 00:15:03.540
We believe we have room
to lower that further.

00:15:03.540 --> 00:15:05.970
And if you think about that,
that again-- that changes how

00:15:05.970 --> 00:15:07.240
you think about application
development.

00:15:07.240 --> 00:15:10.120
If you could spin up a new
instance of part of your

00:15:10.120 --> 00:15:13.510
application in seconds, it
changes the way you think

00:15:13.510 --> 00:15:15.540
about application development.

00:15:15.540 --> 00:15:19.150
Particularly when you add in
some of the other capabilities

00:15:19.150 --> 00:15:21.370
I'm going to talk about.

00:15:21.370 --> 00:15:23.770
In addition, of course, we have
persistent disk that you

00:15:23.770 --> 00:15:25.990
could store to 10 terabytes
of persistent

00:15:25.990 --> 00:15:27.700
disk per virtual machine.

00:15:27.700 --> 00:15:31.570
There's a wide range
of operating system

00:15:31.570 --> 00:15:32.570
and instance types.

00:15:32.570 --> 00:15:37.710
Everything from a fraction of
a core if you're running--

00:15:37.710 --> 00:15:40.650
I think we have 1/5 of core-- so
if you're running very like

00:15:40.650 --> 00:15:42.780
workloads that you only need
to run to short periods of

00:15:42.780 --> 00:15:47.750
time, all the way up to eight
and 16 core machines with a

00:15:47.750 --> 00:15:49.700
lot of memory.

00:15:49.700 --> 00:15:52.195
One of the features we announced
at I/O that I think

00:15:52.195 --> 00:15:56.120
is pretty exciting is really
related to billing.

00:15:56.120 --> 00:15:57.400
And I know billing
sounds boring.

00:15:57.400 --> 00:15:59.100
How could there be anything
interesting about billing?

00:15:59.100 --> 00:16:00.900
But bear with me.

00:16:00.900 --> 00:16:04.390
If you think about the way
most cloud providers work

00:16:04.390 --> 00:16:07.220
today, you fire up a
virtual machine.

00:16:07.220 --> 00:16:10.090
It runs, and even if you run
it for 20 minutes you get

00:16:10.090 --> 00:16:11.260
billed for an hour.

00:16:11.260 --> 00:16:14.365
So if you run for 61 minutes,
you're billed for two hours.

00:16:16.940 --> 00:16:19.010
What we've introduced
is we actually now

00:16:19.010 --> 00:16:20.770
have per minute billing.

00:16:20.770 --> 00:16:24.210
So you actually only pay for the
specific number of minutes

00:16:24.210 --> 00:16:25.750
that your virtual machine
is running.

00:16:25.750 --> 00:16:28.720
If you take that combined with
the fact that you can start a

00:16:28.720 --> 00:16:33.160
machine up in a few 10s of
seconds or 10 seconds, you

00:16:33.160 --> 00:16:35.860
literally can start to throw
cores at a problem.

00:16:35.860 --> 00:16:40.510
Because you can economically
afford to spin up 1,000 cores

00:16:40.510 --> 00:16:42.550
for 10 minutes, for
20 minutes.

00:16:42.550 --> 00:16:45.120
In most cloud providers, if
you spin up 1,000 cores,

00:16:45.120 --> 00:16:48.530
you're going to spend a full
hour minimum cost.

00:16:48.530 --> 00:16:50.160
Think about the way develop
applications.

00:16:50.160 --> 00:16:54.350
And think about places where you
could use a lot of compute

00:16:54.350 --> 00:16:56.800
capacity for a very short
period of time.

00:16:56.800 --> 00:17:00.410
We're actually now allowing you
to do that economically.

00:17:00.410 --> 00:17:02.770
I talked about the
persistent disks.

00:17:02.770 --> 00:17:05.770
You can have up to 10 terabytes
of persistent disk

00:17:05.770 --> 00:17:07.710
that's attached to your VM's.

00:17:07.710 --> 00:17:10.240
We also allow you to have
multiple VM's attached to the

00:17:10.240 --> 00:17:11.819
same persistent disk.

00:17:11.819 --> 00:17:14.000
Which, again, is a very
convenient way for you share

00:17:14.000 --> 00:17:16.230
information between instances.

00:17:16.230 --> 00:17:19.920
We have over 64 different
instance types with operating

00:17:19.920 --> 00:17:22.339
system support ranging from
CentOS and Debian.

00:17:25.550 --> 00:17:28.890
We have things ranging from
fraction of a core up to one,

00:17:28.890 --> 00:17:31.140
two, four, eight
core machines.

00:17:31.140 --> 00:17:34.650
You can choose whether you want
a local disk attached to

00:17:34.650 --> 00:17:37.380
your device, or you don't
want a local disk.

00:17:37.380 --> 00:17:39.760
You can save money if you don't
actually require a local

00:17:39.760 --> 00:17:43.160
disk running on your
virtual machine.

00:17:43.160 --> 00:17:44.960
And we are rolling out
all the additional

00:17:44.960 --> 00:17:45.990
features that you expect.

00:17:45.990 --> 00:17:49.460
Things like load balancing, we
now have in preview so that

00:17:49.460 --> 00:17:51.850
you can attach a cloud hosted
load balancer in

00:17:51.850 --> 00:17:53.150
front of your systems.

00:17:53.150 --> 00:17:55.660
And over the next year you'll
see us roll out more

00:17:55.660 --> 00:17:56.830
capabilities here.

00:17:56.830 --> 00:18:01.470
You'll see us add more operating
system support to

00:18:01.470 --> 00:18:02.540
our platform.

00:18:02.540 --> 00:18:05.790
You'll see us add not just level
three, but level seven

00:18:05.790 --> 00:18:06.670
load balancing.

00:18:06.670 --> 00:18:10.700
Auto scaling, all sorts of
capabilities will either soon

00:18:10.700 --> 00:18:14.280
be in a Trusted Tester or we've
already demoed them at

00:18:14.280 --> 00:18:17.580
I/O.

00:18:17.580 --> 00:18:21.110
That's the do-it-yourself
model of just give me a

00:18:21.110 --> 00:18:22.040
virtual machine.

00:18:22.040 --> 00:18:24.830
Is it's familiar, it's
what I know, it's a

00:18:24.830 --> 00:18:26.130
low barrier to entry.

00:18:26.130 --> 00:18:29.530
But if you do that, you're still
managing things like how

00:18:29.530 --> 00:18:30.850
you do auto scaling.

00:18:30.850 --> 00:18:33.270
You're still configuring
your operating systems.

00:18:33.270 --> 00:18:35.750
You're still patching you're
operating systems.

00:18:35.750 --> 00:18:39.570
If you have a software problem,
it's your engineers

00:18:39.570 --> 00:18:41.880
who are debugging your
software problem.

00:18:41.880 --> 00:18:45.120
App Engine is a platform
as a service.

00:18:45.120 --> 00:18:47.840
With App Engine, it's a fully
managed platform.

00:18:47.840 --> 00:18:50.780
We wear the pagers, so if
there's something that goes

00:18:50.780 --> 00:18:54.210
wrong in the system it's Peter
and his engineers who get the

00:18:54.210 --> 00:18:57.060
2AM phone call, not you.

00:18:57.060 --> 00:19:01.100
It is a very easy development
model.

00:19:01.100 --> 00:19:04.470
You just upload your code, and
then we actually deploy it out

00:19:04.470 --> 00:19:05.770
to the application.

00:19:05.770 --> 00:19:08.960
And it really allows you to
focus on the parts that make

00:19:08.960 --> 00:19:10.660
your application unique.

00:19:10.660 --> 00:19:14.160
If you think about it as the
developer, the mega trend over

00:19:14.160 --> 00:19:17.670
the last 20 years for developers
is you want to

00:19:17.670 --> 00:19:21.710
spend more time writing code
that makes your app different.

00:19:21.710 --> 00:19:25.000
Not boilerplate code that's
the same in every single

00:19:25.000 --> 00:19:27.410
application.

00:19:27.410 --> 00:19:31.760
App Engine is the next
step in that process.

00:19:31.760 --> 00:19:34.840
App Engine automatically scales
both the front ends and

00:19:34.840 --> 00:19:36.560
the back ends of your
application.

00:19:36.560 --> 00:19:39.630
And, in fact, if you are having
no traffic, we scale

00:19:39.630 --> 00:19:42.080
you down to zero and
you pay nothing.

00:19:42.080 --> 00:19:44.580
And again, that's the sort of
thing you can get with a fully

00:19:44.580 --> 00:19:46.920
managed platform like
App Engine.

00:19:46.920 --> 00:19:50.040
In terms of features, we
support the popular

00:19:50.040 --> 00:19:50.600
programming .

00:19:50.600 --> 00:19:53.630
Languages for quite a while
we've supported Java and

00:19:53.630 --> 00:19:55.090
Python and Go.

00:19:55.090 --> 00:19:57.050
We've just now rolled out--
we announced at I/O--

00:19:57.050 --> 00:19:58.620
support for PHP.

00:19:58.620 --> 00:20:01.410
So if you're a PHP developer,
you can now bring your PHP

00:20:01.410 --> 00:20:04.020
code and run it on App Engine.

00:20:04.020 --> 00:20:07.670
We provide a variety
of storage options.

00:20:07.670 --> 00:20:09.560
And I'll talk more about storage
a little later, but

00:20:09.560 --> 00:20:12.740
both SQL and NoSQL storage
you can access.

00:20:12.740 --> 00:20:14.250
There's a variety of services.

00:20:14.250 --> 00:20:17.290
If you want Memcache to make
your application faster with

00:20:17.290 --> 00:20:20.030
App Engine, you don't have to
go and configure a Memcache.

00:20:20.030 --> 00:20:22.760
You going in the console, you
check a box that's saying I

00:20:22.760 --> 00:20:23.990
want Memcache.

00:20:23.990 --> 00:20:26.710
How much storage do I want?

00:20:26.710 --> 00:20:31.570
If you want, you can get shared
Memcache so your memory

00:20:31.570 --> 00:20:33.540
cache is shared among
applications.

00:20:33.540 --> 00:20:35.370
If you want to pay a little
bit more, you could have

00:20:35.370 --> 00:20:38.150
dedicated Memcache that's for
the exclusive use of your

00:20:38.150 --> 00:20:39.070
application.

00:20:39.070 --> 00:20:42.270
And you could specify exactly
how much cache you want.

00:20:42.270 --> 00:20:46.590
We provision it, we manage it
for you, all automatically.

00:20:46.590 --> 00:20:48.800
Also, all the typical things
you would expect.

00:20:48.800 --> 00:20:52.900
There are local development
tools so that you can run your

00:20:52.900 --> 00:20:56.160
code locally on your laptop to
test out your application,

00:20:56.160 --> 00:20:57.160
make sure it works.

00:20:57.160 --> 00:20:59.130
With one command line,
upload the code and

00:20:59.130 --> 00:21:01.500
you're up and running.

00:21:01.500 --> 00:21:04.090
Peter's going to talk a lot more
about App Engine, I think

00:21:04.090 --> 00:21:05.960
specifically on PHP
and some of these

00:21:05.960 --> 00:21:06.750
things in a little bit.

00:21:06.750 --> 00:21:09.200
So I'm not going to spend too
much time on App Engine

00:21:09.200 --> 00:21:10.450
specifically.

00:21:12.950 --> 00:21:14.880
That's the compute side.

00:21:14.880 --> 00:21:16.760
Now you've got your application
[INAUDIBLE]

00:21:16.760 --> 00:21:17.640
and hosted.

00:21:17.640 --> 00:21:18.910
What about storage?

00:21:18.910 --> 00:21:21.860
Well, storage comes in a
couple different forms.

00:21:21.860 --> 00:21:23.830
The first is cloud storage.

00:21:23.830 --> 00:21:27.510
Cloud storage is your hard
drive in the sky.

00:21:27.510 --> 00:21:30.550
You just have a bucket you write
to, you just give us a

00:21:30.550 --> 00:21:31.660
blob of data.

00:21:31.660 --> 00:21:33.460
We store it and you
can retrieve it.

00:21:33.460 --> 00:21:35.700
Think about it logically as
the equivalent of Google

00:21:35.700 --> 00:21:39.600
Drive, in that your application
has its own-- your

00:21:39.600 --> 00:21:41.660
project has its own
storage place.

00:21:41.660 --> 00:21:45.260
You write things into folders,
you retrieve them.

00:21:45.260 --> 00:21:49.710
We also have two types of
application data storage.

00:21:49.710 --> 00:21:53.880
There's Cloud SQL, which is a
cloud hosted version of MySQL.

00:21:53.880 --> 00:21:57.005
So all the things you're
familiar with with MySQL apply

00:21:57.005 --> 00:21:58.440
a Cloud SQL.

00:21:58.440 --> 00:22:02.490
And we also Cloud Datastore,
which is a NoSQL key value

00:22:02.490 --> 00:22:03.430
pair system.

00:22:03.430 --> 00:22:06.080
And I'll talk specifically
about what that means.

00:22:06.080 --> 00:22:07.930
And finally, we have persistent
disks, which I

00:22:07.930 --> 00:22:08.620
alluded to.

00:22:08.620 --> 00:22:11.940
Which are those virtual hardware
disks that can be

00:22:11.940 --> 00:22:15.920
attached to virtual machines
inside a Compute Engine.

00:22:15.920 --> 00:22:19.170
Let's talk about these
one at a time.

00:22:19.170 --> 00:22:22.780
NoSQL, key value pairs,
SQL storage--

00:22:22.780 --> 00:22:24.120
so traditional [? scheme ?]

00:22:24.120 --> 00:22:25.140
environment--

00:22:25.140 --> 00:22:27.030
blob store--

00:22:27.030 --> 00:22:28.450
in terms of cloud storage--

00:22:28.450 --> 00:22:30.150
and then block store.

00:22:30.150 --> 00:22:31.640
So let's take them one by one.

00:22:31.640 --> 00:22:32.840
Cloud storage.

00:22:32.840 --> 00:22:36.760
This is the analogous
to Google Drive.

00:22:36.760 --> 00:22:40.930
It is high performance.

00:22:40.930 --> 00:22:43.430
You have very large
storage capacity.

00:22:43.430 --> 00:22:46.430
If you are familiar with Amazon
S3, we actually have an

00:22:46.430 --> 00:22:47.930
S3 compatible interface.

00:22:47.930 --> 00:22:50.620
If you're currently using
Amazon, it's actually very

00:22:50.620 --> 00:22:54.860
easy for you to start using
Cloud Storage either as a

00:22:54.860 --> 00:22:58.760
redundant version or if you want
to migrate away from S3

00:22:58.760 --> 00:23:02.160
on to Cloud Storage we make
that very simple to do.

00:23:02.160 --> 00:23:06.080
The key value here is that we
provide Google networking,

00:23:06.080 --> 00:23:10.310
Google network performance,
extremely high durability, low

00:23:10.310 --> 00:23:12.600
cost, and an SLA associated
with it.

00:23:15.470 --> 00:23:17.570
Datastore is a particularly
interesting one.

00:23:17.570 --> 00:23:20.690
This is the key value
NoSQL storage.

00:23:20.690 --> 00:23:23.780
And again, if you think back
to when I talked about

00:23:23.780 --> 00:23:26.440
building what we needed to build
for Google, that one of

00:23:26.440 --> 00:23:28.520
the first things we realized
again when we were building

00:23:28.520 --> 00:23:32.330
Search was there was no existing
NoSQL store that was

00:23:32.330 --> 00:23:35.560
close to providing the
reliability and the

00:23:35.560 --> 00:23:39.120
performance that we
needed for Search.

00:23:39.120 --> 00:23:42.160
So we had to build our own, and
what we built is in fact

00:23:42.160 --> 00:23:44.840
the underpinnings
of Datastore.

00:23:44.840 --> 00:23:47.010
Accessible anywhere.

00:23:47.010 --> 00:23:49.260
This is the same--

00:23:49.260 --> 00:23:51.590
what we've done is we've taken
this high replication

00:23:51.590 --> 00:23:54.350
Datastore that used to be just
part of App Engine, and we've

00:23:54.350 --> 00:23:57.230
made it available to any
application anywhere.

00:23:57.230 --> 00:23:59.630
So Cloud Datastore can be
accessed from Compute Engine,

00:23:59.630 --> 00:24:02.250
from App Engine, actually
even from Amazon--

00:24:02.250 --> 00:24:06.550
if you have applications hosted
there, you can access

00:24:06.550 --> 00:24:07.940
the Cloud Datastore.

00:24:07.940 --> 00:24:13.310
One of the really interesting
qualities this has is when you

00:24:13.310 --> 00:24:17.450
query the Datastore, the speed
doesn't depend on the size of

00:24:17.450 --> 00:24:18.460
the data set.

00:24:18.460 --> 00:24:21.670
If you have a one megabyte data
set, a query will take

00:24:21.670 --> 00:24:25.410
the same amount of time for one
terabyte data set as a one

00:24:25.410 --> 00:24:26.990
megabyte data set.

00:24:26.990 --> 00:24:29.790
So if you think about that, that
also changes the way you

00:24:29.790 --> 00:24:31.410
think about application.

00:24:31.410 --> 00:24:34.030
We automatically replicate
your data across

00:24:34.030 --> 00:24:35.230
multiple data centers--

00:24:35.230 --> 00:24:36.610
as many as five--

00:24:36.610 --> 00:24:39.780
which means you have very high
reliability, even in the event

00:24:39.780 --> 00:24:42.630
of natural disasters
or power outages.

00:24:42.630 --> 00:24:46.530
We are able to deliver
reliability that's far beyond

00:24:46.530 --> 00:24:47.970
what you would get from--
certainly from

00:24:47.970 --> 00:24:49.370
any on premise system--

00:24:49.370 --> 00:24:52.800
but even from most
cloud providers.

00:24:52.800 --> 00:24:54.820
The statistic I find
shocking--

00:24:54.820 --> 00:24:58.020
or pleasantly surprised in--

00:24:58.020 --> 00:25:01.970
Datastore is currently serving
over 4.5 trillion

00:25:01.970 --> 00:25:03.960
requests per month.

00:25:03.960 --> 00:25:05.680
Not billion, even.

00:25:05.680 --> 00:25:06.920
Trillion.

00:25:06.920 --> 00:25:12.520
This is a very reliable, very
high uptime service.

00:25:12.520 --> 00:25:16.800
And it's the core of our
NoSQL offerings.

00:25:16.800 --> 00:25:19.190
It automatically scales, again,
so you don't have to

00:25:19.190 --> 00:25:19.840
provision it.

00:25:19.840 --> 00:25:24.250
It's a schemaless system, so
if you are adding data you

00:25:24.250 --> 00:25:25.470
just simply add new data.

00:25:25.470 --> 00:25:27.600
You don't ever have
to do a SQL--

00:25:27.600 --> 00:25:30.050
a schema-like update.

00:25:30.050 --> 00:25:34.520
It's available through both a
RESTful interface and directly

00:25:34.520 --> 00:25:35.990
from App Engine.

00:25:35.990 --> 00:25:38.190
And again, it has built in
redundancy so that you

00:25:38.190 --> 00:25:41.970
automatically get replication
in order to work from a

00:25:41.970 --> 00:25:44.580
variety of languages
and data centers.

00:25:47.720 --> 00:25:52.730
Cloud SQL is a cloud hosted
version of MySQL, put simply.

00:25:52.730 --> 00:25:56.150
If you're familiar with MySQL,
this is a version of MySQL

00:25:56.150 --> 00:25:58.230
except where we do all
the management and

00:25:58.230 --> 00:26:00.600
configuration for you.

00:26:00.600 --> 00:26:05.210
It is available in both European
and US data centers,

00:26:05.210 --> 00:26:07.200
depending on your preference.

00:26:07.200 --> 00:26:10.550
It has very easy migration and
data portability, because

00:26:10.550 --> 00:26:13.660
again, it is a version
of MySQL.

00:26:13.660 --> 00:26:15.530
It's just one where we're
doing all the

00:26:15.530 --> 00:26:16.780
management for you.

00:26:21.520 --> 00:26:24.460
Between Cloud SQL and Datastore,
you really have a

00:26:24.460 --> 00:26:26.870
choice depending on what your
application is using.

00:26:26.870 --> 00:26:28.210
There's really no one
size fit all.

00:26:28.210 --> 00:26:30.755
Sometimes I get asked, well,
should I use Cloud SQL or

00:26:30.755 --> 00:26:31.720
should I like Datastore?

00:26:31.720 --> 00:26:33.480
It really depends on
what you're doing.

00:26:33.480 --> 00:26:35.000
Datastore is--

00:26:35.000 --> 00:26:39.420
like I said-- a NoSQL, and
it's designed around very

00:26:39.420 --> 00:26:42.190
large scale applications.

00:26:42.190 --> 00:26:44.530
Cloud SQL is a more traditional
environment

00:26:44.530 --> 00:26:46.820
designed to leverage all
the existing tools and

00:26:46.820 --> 00:26:48.720
infrastructure that you're
familiar with.

00:26:48.720 --> 00:26:51.470
So depending on both your
application type and your

00:26:51.470 --> 00:26:54.320
data, one may be better
or worse or a better

00:26:54.320 --> 00:26:55.570
choice than the other.

00:26:58.410 --> 00:27:00.890
Let me go and talk about App
Services a little bit, which

00:27:00.890 --> 00:27:02.140
is the third major category.

00:27:04.740 --> 00:27:07.330
BigQuery is a set of
technologies--

00:27:07.330 --> 00:27:09.660
it's a fully managed,
big data analytics .

00:27:09.660 --> 00:27:13.030
Service what that means is
BigQuery allows you to upload

00:27:13.030 --> 00:27:17.320
your data in whatever form you
have, and allows you to do

00:27:17.320 --> 00:27:23.080
SQL-like analytical queries on
it without having to configure

00:27:23.080 --> 00:27:27.780
data cubes or ETL or any of the
things that make querying

00:27:27.780 --> 00:27:30.580
big data so difficult.

00:27:30.580 --> 00:27:33.870
And again, if you think about
where this comes from, one of

00:27:33.870 --> 00:27:36.400
the problems we faced early
on at Google was

00:27:36.400 --> 00:27:38.100
analyzing log files.

00:27:38.100 --> 00:27:38.820
Right?

00:27:38.820 --> 00:27:42.570
Why did the Maps application
behave strangely for this user

00:27:42.570 --> 00:27:44.280
or in this region?

00:27:44.280 --> 00:27:47.780
Well, to do that, we actually
needed to be able to look

00:27:47.780 --> 00:27:50.890
across the application
logs for Maps.

00:27:50.890 --> 00:27:53.060
Across all these different
servers and users and

00:27:53.060 --> 00:27:53.840
geographies.

00:27:53.840 --> 00:27:55.310
And again, what were
we going to do?

00:27:55.310 --> 00:27:59.030
Build a data cube and take all
of the logs globally from the

00:27:59.030 --> 00:28:00.190
Maps application?

00:28:00.190 --> 00:28:01.400
I don't think so.

00:28:01.400 --> 00:28:04.830
So we developed a technology
that's the basis of BigQuery

00:28:04.830 --> 00:28:09.600
that allows us to queries in a
SQL-like language against all

00:28:09.600 --> 00:28:12.500
these different data stores.

00:28:12.500 --> 00:28:16.770
That means that you can again
query terabytes of data using

00:28:16.770 --> 00:28:18.410
a SQL-like interface.

00:28:18.410 --> 00:28:21.170
A great use for this case is
just what we use it for--

00:28:21.170 --> 00:28:22.710
application logging.

00:28:22.710 --> 00:28:25.680
You can upload the log files of
your application and then

00:28:25.680 --> 00:28:29.090
your business analysts can
quickly do queries to find out

00:28:29.090 --> 00:28:33.490
which users are using which
features, or which users are

00:28:33.490 --> 00:28:35.340
experiencing what
kind of errors.

00:28:35.340 --> 00:28:37.790
Basically any sort of
data that you have

00:28:37.790 --> 00:28:39.040
stored your log files.

00:28:43.160 --> 00:28:47.210
Cloud Endpoints is a service
that's designed for a mobile

00:28:47.210 --> 00:28:50.630
app [AUDIO DROP].

00:28:50.630 --> 00:28:54.030
How many of you are building
mobile applications?

00:28:54.030 --> 00:28:54.420
Yes.

00:28:54.420 --> 00:28:56.210
And the rest of you that aren't,
you probably will at

00:28:56.210 --> 00:28:57.300
some point.

00:28:57.300 --> 00:29:00.030
One of the challenges you face
as a mobile developer is

00:29:00.030 --> 00:29:03.780
connecting up your mobile
application to your back end

00:29:03.780 --> 00:29:04.720
data logic.

00:29:04.720 --> 00:29:06.230
Because mobile applications--

00:29:06.230 --> 00:29:07.320
even games--

00:29:07.320 --> 00:29:09.980
don't consist of just
client side code.

00:29:09.980 --> 00:29:12.840
Their client side code plus
server side code that does

00:29:12.840 --> 00:29:16.430
things like high score
processing, or rankings, or

00:29:16.430 --> 00:29:19.610
selecting a player for
you to play against.

00:29:19.610 --> 00:29:23.000
Cloud Endpoints is a technology
that allows you to

00:29:23.000 --> 00:29:27.220
very easily connect up your back
end code to your clients.

00:29:27.220 --> 00:29:30.430
You can go into App Engine, you
can pick a component of

00:29:30.430 --> 00:29:31.230
App Engine.

00:29:31.230 --> 00:29:35.150
With one click, you can create
a Cloud Endpoint.

00:29:35.150 --> 00:29:37.520
And what that does, is it
creates a [INAUDIBLE]

00:29:37.520 --> 00:29:42.050
REST interface, and it creates
the client side library for

00:29:42.050 --> 00:29:45.940
iOS and Android that allows you
to just make a call on the

00:29:45.940 --> 00:29:48.690
client and invoke code
on the server.

00:29:48.690 --> 00:29:50.840
You don't have to worry about
data marshalling, you don't

00:29:50.840 --> 00:29:54.690
have to worry about OAuth or any
of that hassles associated

00:29:54.690 --> 00:29:59.255
with connecting up your
client side code to

00:29:59.255 --> 00:30:02.090
your server side code.

00:30:02.090 --> 00:30:05.210
Cloud Endpoints is really
designed on allowing you to

00:30:05.210 --> 00:30:07.480
focus on the part of the
application that you care

00:30:07.480 --> 00:30:09.320
about and not about
[? blue ?] code.

00:30:11.860 --> 00:30:13.840
So who's using this?

00:30:13.840 --> 00:30:16.850
One of the things we hear a
lot is gee, that sounds

00:30:16.850 --> 00:30:18.000
interesting, but I don't
want to be the

00:30:18.000 --> 00:30:19.350
first one do anything.

00:30:19.350 --> 00:30:21.350
I want to know that there's
somebody else out there who's

00:30:21.350 --> 00:30:23.150
actually being successful
with it.

00:30:23.150 --> 00:30:25.080
Let me give you a couple
examples of some customers who

00:30:25.080 --> 00:30:27.090
are actually using
this technology.

00:30:27.090 --> 00:30:30.470
First of all, we currently
have about three million

00:30:30.470 --> 00:30:33.370
active applications on a monthly
basis running on top

00:30:33.370 --> 00:30:35.330
of the Google Cloud Platform.

00:30:35.330 --> 00:30:40.560
So it represents everything from
small applications up to

00:30:40.560 --> 00:30:43.090
very large applications that
companies are betting their

00:30:43.090 --> 00:30:45.660
whole business on.

00:30:45.660 --> 00:30:47.470
First one is Snap Chat.

00:30:47.470 --> 00:30:48.960
I don't know if you guys
are aware of Snap Chat.

00:30:48.960 --> 00:30:51.090
It's an incredibly popular
photo sharing

00:30:51.090 --> 00:30:53.100
application for iOS.

00:30:53.100 --> 00:30:55.960
It allows you to take a picture,
send it to somebody,

00:30:55.960 --> 00:30:58.550
and then they can see the
picture and then after some

00:30:58.550 --> 00:31:01.650
period of time, the picture
expires and is deleted.

00:31:01.650 --> 00:31:03.700
They're currently delivering
about 150

00:31:03.700 --> 00:31:05.880
million photos a day.

00:31:05.880 --> 00:31:08.540
All running through the Google
Cloud Platform, both on the

00:31:08.540 --> 00:31:12.480
storage side and the
compute side.

00:31:12.480 --> 00:31:17.640
Song Pop is a game
that allows--

00:31:17.640 --> 00:31:21.040
it plays a song, and then you
have to compete to who can

00:31:21.040 --> 00:31:24.000
identify what the song
is the fastest.

00:31:24.000 --> 00:31:28.030
They currently serve about 18
terabytes of media a day

00:31:28.030 --> 00:31:29.820
coming out of the
Cloud Platform.

00:31:29.820 --> 00:31:32.840
And they have about 80 million
users on a daily basis

00:31:32.840 --> 00:31:36.110
accessing Song Pop.

00:31:36.110 --> 00:31:37.790
How many have heard
of Eurovision?

00:31:37.790 --> 00:31:39.220
Everybody, right?

00:31:39.220 --> 00:31:41.730
Eurovision, this year-- they
were faced with the problem of

00:31:41.730 --> 00:31:43.520
their online voting system.

00:31:43.520 --> 00:31:47.270
They knew that they were going
to have a big traffic spike.

00:31:47.270 --> 00:31:49.460
They knew it was going to come
in a short period of time.

00:31:49.460 --> 00:31:50.840
And they knew that when
it was done, they

00:31:50.840 --> 00:31:52.100
didn't need the capacity.

00:31:52.100 --> 00:31:55.560
So Eurovision came to us and
said would you help us build

00:31:55.560 --> 00:31:56.800
out this infrastructure?

00:31:56.800 --> 00:32:01.200
They used Compute Engine, and at
its peak, they were serving

00:32:01.200 --> 00:32:04.100
50,000 requests per second
as people we're

00:32:04.100 --> 00:32:05.740
logging on to vote.

00:32:05.740 --> 00:32:09.090
90% of those requests were
served in less than 24

00:32:09.090 --> 00:32:12.140
milliseconds response time.

00:32:12.140 --> 00:32:13.780
That was all built on
Compute Engine.

00:32:13.780 --> 00:32:16.270
They were able to scale
up, meet the needs.

00:32:16.270 --> 00:32:19.210
Now that it's scaled down, their
bill has gone back down

00:32:19.210 --> 00:32:20.460
to nearly zero.

00:32:23.760 --> 00:32:28.650
Scalar is a US company that
does cloud management.

00:32:28.650 --> 00:32:32.110
And, in fact, they've done a
number of benchmarks of VM

00:32:32.110 --> 00:32:34.720
start up time, VM performance,
network performance, disk

00:32:34.720 --> 00:32:35.570
performance.

00:32:35.570 --> 00:32:38.190
If you're interested in a really
good benchmarking of

00:32:38.190 --> 00:32:42.220
how we compare with other VM
cloud based environments,

00:32:42.220 --> 00:32:44.330
they're a great place to look.

00:32:44.330 --> 00:32:48.000
They're the ones who've really
done a lot of really good work

00:32:48.000 --> 00:32:49.790
to put our performance
in context

00:32:49.790 --> 00:32:51.160
with other cloud platforms.

00:32:51.160 --> 00:32:54.990
I definitely recommend you
take a look at them.

00:32:54.990 --> 00:33:00.100
Udacity is an online educational
software.

00:33:00.100 --> 00:33:03.270
And what I like about them is I
loved the quote that I have

00:33:03.270 --> 00:33:04.900
here from their software
engineer.

00:33:04.900 --> 00:33:07.670
Which gets at the point I've
been talking about.

00:33:07.670 --> 00:33:10.640
"I'd rather be democratizing
education than scaling

00:33:10.640 --> 00:33:12.170
memcache [? D." ?]

00:33:12.170 --> 00:33:14.730
And I think that's the essence
of what we're trying to do

00:33:14.730 --> 00:33:16.590
here with the Cloud Platform.

00:33:16.590 --> 00:33:18.180
You've got some great
idea for an

00:33:18.180 --> 00:33:20.090
application you want to build.

00:33:20.090 --> 00:33:23.600
We want to let you spend your
waking hours building that

00:33:23.600 --> 00:33:27.190
application, not mucking about
with a bunch of frankly boring

00:33:27.190 --> 00:33:29.970
infrastructure that somebody
else can provide for you.

00:33:32.780 --> 00:33:36.050
Pulse is an online news reading
application that

00:33:36.050 --> 00:33:39.940
allows you to read RSS
another news feeds.

00:33:39.940 --> 00:33:42.940
Talk about that hyper growth
model we talked about.

00:33:42.940 --> 00:33:47.250
In 18 months their user
base went up 70 times.

00:33:47.250 --> 00:33:50.540
Without the Cloud Platform,
there's just simply no way

00:33:50.540 --> 00:33:52.480
they would've been able
to maintain that.

00:33:52.480 --> 00:33:55.050
Their users would have had
experience, and frankly their

00:33:55.050 --> 00:33:56.620
business would have just
crashed and burned.

00:33:59.700 --> 00:34:01.300
Last thing I want to talk
about-- just raw

00:34:01.300 --> 00:34:03.970
performance with MapR.

00:34:03.970 --> 00:34:06.640
There's a benchmark out there
called MinuteSort.

00:34:06.640 --> 00:34:12.820
And what MinuteSort does is it
basically says how many random

00:34:12.820 --> 00:34:14.980
numbers can you sort
in one minute.

00:34:18.020 --> 00:34:20.210
The world record for that
was just broken on

00:34:20.210 --> 00:34:21.480
top of Compute Engine.

00:34:21.480 --> 00:34:24.810
And what I find fascinating
about it is not just that it

00:34:24.810 --> 00:34:29.060
was able to sort one and 1/2
terabytes of random numbers in

00:34:29.060 --> 00:34:33.010
60 seconds using 8,000 cores,
but that the previous

00:34:33.010 --> 00:34:36.489
benchmark was done on
custom hardware.

00:34:36.489 --> 00:34:38.474
And I believe cost on the
order of about a million

00:34:38.474 --> 00:34:40.630
dollars-- the hardware.

00:34:40.630 --> 00:34:43.250
This version was done on a
publicly available cloud

00:34:43.250 --> 00:34:47.409
platform with Compute
Engine for--

00:34:47.409 --> 00:34:48.750
I'll have to look
up the number--

00:34:48.750 --> 00:34:51.540
I believe it's on the order of
a couple thousand dollars.

00:34:51.540 --> 00:34:55.130
So it's a radical difference
in the price performance.

00:34:55.130 --> 00:34:57.710
And it really demonstrates one
of the core values we've

00:34:57.710 --> 00:35:01.090
placed on Compute Engine, which
is very high performance

00:35:01.090 --> 00:35:03.125
and very high consistency
of performance.

00:35:06.420 --> 00:35:10.750
So with that, I want a
transition over to Peter who's

00:35:10.750 --> 00:35:12.290
going to talk in detail
about App Engine.

00:35:12.290 --> 00:35:17.140
If I leave it with one thing
about the Cloud Platform, it's

00:35:17.140 --> 00:35:21.840
that we are investing in
fundamental infrastructure at

00:35:21.840 --> 00:35:23.750
Google because we need to.

00:35:23.750 --> 00:35:27.210
Because we're building out
things like Search and Maps.

00:35:27.210 --> 00:35:29.990
And with Cloud Platform we're
really opening up that same

00:35:29.990 --> 00:35:33.190
infrastructure that we are using
ourselves for you to run

00:35:33.190 --> 00:35:34.630
your applications on.

00:35:34.630 --> 00:35:36.170
This is the beginning
of a process.

00:35:36.170 --> 00:35:38.950
You can expect over the next
year we're going to have more

00:35:38.950 --> 00:35:42.510
features, more performance, as
we continue to invest more and

00:35:42.510 --> 00:35:43.260
more of this.

00:35:43.260 --> 00:35:46.260
And I'd love to talk to you
during the Q&amp;A or during the

00:35:46.260 --> 00:35:49.510
break to find out more about
what you're doing and how our

00:35:49.510 --> 00:35:51.930
Cloud Platform could be the
basis for your next great

00:35:51.930 --> 00:35:53.300
application.

00:35:53.300 --> 00:35:57.130
So with that, I think Peter is
next to give you a drill down

00:35:57.130 --> 00:35:58.380
on App Engine.

