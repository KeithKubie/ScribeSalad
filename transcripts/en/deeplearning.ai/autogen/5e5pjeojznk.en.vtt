WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.990
you've learned about object localization

00:00:02.990 --> 00:00:03.000
you've learned about object localization
 

00:00:03.000 --> 00:00:06.380
you've learned about object localization
as well as landmark detection now let's

00:00:06.380 --> 00:00:06.390
as well as landmark detection now let's
 

00:00:06.390 --> 00:00:08.570
as well as landmark detection now let's
build out toward an object detection

00:00:08.570 --> 00:00:08.580
build out toward an object detection
 

00:00:08.580 --> 00:00:11.030
build out toward an object detection
algorithm in this video you learned how

00:00:11.030 --> 00:00:11.040
algorithm in this video you learned how
 

00:00:11.040 --> 00:00:13.370
algorithm in this video you learned how
to use a confident to perform object

00:00:13.370 --> 00:00:13.380
to use a confident to perform object
 

00:00:13.380 --> 00:00:15.320
to use a confident to perform object
detection using something called the

00:00:15.320 --> 00:00:15.330
detection using something called the
 

00:00:15.330 --> 00:00:17.660
detection using something called the
sliding windows detection algorithm

00:00:17.660 --> 00:00:17.670
sliding windows detection algorithm
 

00:00:17.670 --> 00:00:19.790
sliding windows detection algorithm
let's say you want to build a car

00:00:19.790 --> 00:00:19.800
let's say you want to build a car
 

00:00:19.800 --> 00:00:21.980
let's say you want to build a car
detection algorithm here's what you can

00:00:21.980 --> 00:00:21.990
detection algorithm here's what you can
 

00:00:21.990 --> 00:00:24.230
detection algorithm here's what you can
do you can first create a label training

00:00:24.230 --> 00:00:24.240
do you can first create a label training
 

00:00:24.240 --> 00:00:27.220
do you can first create a label training
set so x and y with closely cropped

00:00:27.220 --> 00:00:27.230
set so x and y with closely cropped
 

00:00:27.230 --> 00:00:31.040
set so x and y with closely cropped
examples of cars so this is a image X

00:00:31.040 --> 00:00:31.050
examples of cars so this is a image X
 

00:00:31.050 --> 00:00:33.110
examples of cars so this is a image X
that's a positive example as a car is a

00:00:33.110 --> 00:00:33.120
that's a positive example as a car is a
 

00:00:33.120 --> 00:00:36.410
that's a positive example as a car is a
car is a car and then there's not a car

00:00:36.410 --> 00:00:36.420
car is a car and then there's not a car
 

00:00:36.420 --> 00:00:39.080
car is a car and then there's not a car
that's not a car and for our purposes in

00:00:39.080 --> 00:00:39.090
that's not a car and for our purposes in
 

00:00:39.090 --> 00:00:40.880
that's not a car and for our purposes in
this training set you can start off with

00:00:40.880 --> 00:00:40.890
this training set you can start off with
 

00:00:40.890 --> 00:00:43.549
this training set you can start off with
I'm going to call closely cropped images

00:00:43.549 --> 00:00:43.559
I'm going to call closely cropped images
 

00:00:43.559 --> 00:00:46.279
I'm going to call closely cropped images
meaning that X is you know pretty much

00:00:46.279 --> 00:00:46.289
meaning that X is you know pretty much
 

00:00:46.289 --> 00:00:48.200
meaning that X is you know pretty much
only the car so you can take a picture

00:00:48.200 --> 00:00:48.210
only the car so you can take a picture
 

00:00:48.210 --> 00:00:50.420
only the car so you can take a picture
and crop out and just cut out anything

00:00:50.420 --> 00:00:50.430
and crop out and just cut out anything
 

00:00:50.430 --> 00:00:52.580
and crop out and just cut out anything
else there's not part of a car so you

00:00:52.580 --> 00:00:52.590
else there's not part of a car so you
 

00:00:52.590 --> 00:00:55.910
else there's not part of a car so you
end up with a car centered and in pretty

00:00:55.910 --> 00:00:55.920
end up with a car centered and in pretty
 

00:00:55.920 --> 00:00:58.520
end up with a car centered and in pretty
much the entire image given this labeled

00:00:58.520 --> 00:00:58.530
much the entire image given this labeled
 

00:00:58.530 --> 00:01:00.889
much the entire image given this labeled
training set given this labeled training

00:01:00.889 --> 00:01:00.899
training set given this labeled training
 

00:01:00.899 --> 00:01:03.529
training set given this labeled training
set you can then train a confident that

00:01:03.529 --> 00:01:03.539
set you can then train a confident that
 

00:01:03.539 --> 00:01:05.929
set you can then train a confident that
inputs an image like one of these

00:01:05.929 --> 00:01:05.939
inputs an image like one of these
 

00:01:05.939 --> 00:01:09.140
inputs an image like one of these
closely cropped images and then the job

00:01:09.140 --> 00:01:09.150
closely cropped images and then the job
 

00:01:09.150 --> 00:01:13.010
closely cropped images and then the job
of the confident is to output y 0 1 is

00:01:13.010 --> 00:01:13.020
of the confident is to output y 0 1 is
 

00:01:13.020 --> 00:01:14.260
of the confident is to output y 0 1 is
as a car or not

00:01:14.260 --> 00:01:14.270
as a car or not
 

00:01:14.270 --> 00:01:16.880
as a car or not
once you've trained up this confident

00:01:16.880 --> 00:01:16.890
once you've trained up this confident
 

00:01:16.890 --> 00:01:19.429
once you've trained up this confident
you can then use it in sliding windows

00:01:19.429 --> 00:01:19.439
you can then use it in sliding windows
 

00:01:19.439 --> 00:01:21.950
you can then use it in sliding windows
detection so the way you do that is if

00:01:21.950 --> 00:01:21.960
detection so the way you do that is if
 

00:01:21.960 --> 00:01:24.679
detection so the way you do that is if
you have a test image like this what you

00:01:24.679 --> 00:01:24.689
you have a test image like this what you
 

00:01:24.689 --> 00:01:27.410
you have a test image like this what you
do is you start by picking a certain

00:01:27.410 --> 00:01:27.420
do is you start by picking a certain
 

00:01:27.420 --> 00:01:29.270
do is you start by picking a certain
window sizes are shown down there and

00:01:29.270 --> 00:01:29.280
window sizes are shown down there and
 

00:01:29.280 --> 00:01:32.810
window sizes are shown down there and
then you would input into this confident

00:01:32.810 --> 00:01:32.820
then you would input into this confident
 

00:01:32.820 --> 00:01:35.870
then you would input into this confident
a small rectangular region so take just

00:01:35.870 --> 00:01:35.880
a small rectangular region so take just
 

00:01:35.880 --> 00:01:39.830
a small rectangular region so take just
this little red square and put that into

00:01:39.830 --> 00:01:39.840
this little red square and put that into
 

00:01:39.840 --> 00:01:42.410
this little red square and put that into
the confident and have a confident make

00:01:42.410 --> 00:01:42.420
the confident and have a confident make
 

00:01:42.420 --> 00:01:44.510
the confident and have a confident make
a prediction and presumably for that

00:01:44.510 --> 00:01:44.520
a prediction and presumably for that
 

00:01:44.520 --> 00:01:47.510
a prediction and presumably for that
little region in the red square will say

00:01:47.510 --> 00:01:47.520
little region in the red square will say
 

00:01:47.520 --> 00:01:49.249
little region in the red square will say
no that little red square does not

00:01:49.249 --> 00:01:49.259
no that little red square does not
 

00:01:49.259 --> 00:01:51.889
no that little red square does not
contain a call in the sliding windows

00:01:51.889 --> 00:01:51.899
contain a call in the sliding windows
 

00:01:51.899 --> 00:01:53.929
contain a call in the sliding windows
detection algorithm what you do is you

00:01:53.929 --> 00:01:53.939
detection algorithm what you do is you
 

00:01:53.939 --> 00:01:59.090
detection algorithm what you do is you
then process input a second image now

00:01:59.090 --> 00:01:59.100
then process input a second image now
 

00:01:59.100 --> 00:02:01.280
then process input a second image now
bounded by this red square shifted a

00:02:01.280 --> 00:02:01.290
bounded by this red square shifted a
 

00:02:01.290 --> 00:02:03.590
bounded by this red square shifted a
little bit over and feed that to the

00:02:03.590 --> 00:02:03.600
little bit over and feed that to the
 

00:02:03.600 --> 00:02:05.600
little bit over and feed that to the
confidence you speed in just the region

00:02:05.600 --> 00:02:05.610
confidence you speed in just the region
 

00:02:05.610 --> 00:02:08.150
confidence you speed in just the region
of the image in the Red Square to the

00:02:08.150 --> 00:02:08.160
of the image in the Red Square to the
 

00:02:08.160 --> 00:02:10.219
of the image in the Red Square to the
confident and run the con phonetic game

00:02:10.219 --> 00:02:10.229
confident and run the con phonetic game
 

00:02:10.229 --> 00:02:12.619
confident and run the con phonetic game
and then you do that

00:02:12.619 --> 00:02:12.629
and then you do that
 

00:02:12.629 --> 00:02:16.490
and then you do that
with a third image and so on and you

00:02:16.490 --> 00:02:16.500
with a third image and so on and you
 

00:02:16.500 --> 00:02:19.520
with a third image and so on and you
keep going until you've you'll slit the

00:02:19.520 --> 00:02:19.530
keep going until you've you'll slit the
 

00:02:19.530 --> 00:02:22.130
keep going until you've you'll slit the
window across every position in the

00:02:22.130 --> 00:02:22.140
window across every position in the
 

00:02:22.140 --> 00:02:25.130
window across every position in the
image and I'm using a pretty large

00:02:25.130 --> 00:02:25.140
image and I'm using a pretty large
 

00:02:25.140 --> 00:02:27.470
image and I'm using a pretty large
stride in this example just to make the

00:02:27.470 --> 00:02:27.480
stride in this example just to make the
 

00:02:27.480 --> 00:02:30.140
stride in this example just to make the
animation go faster but the idea is you

00:02:30.140 --> 00:02:30.150
animation go faster but the idea is you
 

00:02:30.150 --> 00:02:33.140
animation go faster but the idea is you
basically go through every region of

00:02:33.140 --> 00:02:33.150
basically go through every region of
 

00:02:33.150 --> 00:02:36.800
basically go through every region of
this size and pass lots of little

00:02:36.800 --> 00:02:36.810
this size and pass lots of little
 

00:02:36.810 --> 00:02:39.589
this size and pass lots of little
crafted images into the confident and

00:02:39.589 --> 00:02:39.599
crafted images into the confident and
 

00:02:39.599 --> 00:02:42.619
crafted images into the confident and
have it classify 0 or 1 for each

00:02:42.619 --> 00:02:42.629
have it classify 0 or 1 for each
 

00:02:42.629 --> 00:02:45.890
have it classify 0 or 1 for each
position as some stride now having done

00:02:45.890 --> 00:02:45.900
position as some stride now having done
 

00:02:45.900 --> 00:02:50.599
position as some stride now having done
this once with running this was called a

00:02:50.599 --> 00:02:50.609
this once with running this was called a
 

00:02:50.609 --> 00:02:54.379
this once with running this was called a
sliding window through the image you'd

00:02:54.379 --> 00:02:54.389
sliding window through the image you'd
 

00:02:54.389 --> 00:02:56.990
sliding window through the image you'd
then repeat it but now use a larger

00:02:56.990 --> 00:02:57.000
then repeat it but now use a larger
 

00:02:57.000 --> 00:02:59.839
then repeat it but now use a larger
window so now you take a slightly larger

00:02:59.839 --> 00:02:59.849
window so now you take a slightly larger
 

00:02:59.849 --> 00:03:02.659
window so now you take a slightly larger
region and run that region so resize

00:03:02.659 --> 00:03:02.669
region and run that region so resize
 

00:03:02.669 --> 00:03:05.000
region and run that region so resize
this region into whatever input size the

00:03:05.000 --> 00:03:05.010
this region into whatever input size the
 

00:03:05.010 --> 00:03:07.550
this region into whatever input size the
continent is expecting and feed that to

00:03:07.550 --> 00:03:07.560
continent is expecting and feed that to
 

00:03:07.560 --> 00:03:10.339
continent is expecting and feed that to
the confident and have it output 0 1 and

00:03:10.339 --> 00:03:10.349
the confident and have it output 0 1 and
 

00:03:10.349 --> 00:03:12.199
the confident and have it output 0 1 and
then slide the window over again using

00:03:12.199 --> 00:03:12.209
then slide the window over again using
 

00:03:12.209 --> 00:03:16.490
then slide the window over again using
some stride and so on and you run that

00:03:16.490 --> 00:03:16.500
some stride and so on and you run that
 

00:03:16.500 --> 00:03:19.550
some stride and so on and you run that
throughout your entire image until you

00:03:19.550 --> 00:03:19.560
throughout your entire image until you
 

00:03:19.560 --> 00:03:21.379
throughout your entire image until you
get to the end and then you might do the

00:03:21.379 --> 00:03:21.389
get to the end and then you might do the
 

00:03:21.389 --> 00:03:24.800
get to the end and then you might do the
third time using even larger windows and

00:03:24.800 --> 00:03:24.810
third time using even larger windows and
 

00:03:24.810 --> 00:03:28.909
third time using even larger windows and
so on and the hope is that if you do

00:03:28.909 --> 00:03:28.919
so on and the hope is that if you do
 

00:03:28.919 --> 00:03:31.009
so on and the hope is that if you do
this then so long as there's a car

00:03:31.009 --> 00:03:31.019
this then so long as there's a car
 

00:03:31.019 --> 00:03:33.500
this then so long as there's a car
somewhere in the image that there will

00:03:33.500 --> 00:03:33.510
somewhere in the image that there will
 

00:03:33.510 --> 00:03:37.309
somewhere in the image that there will
be a window where for example if you

00:03:37.309 --> 00:03:37.319
be a window where for example if you
 

00:03:37.319 --> 00:03:39.890
be a window where for example if you
were passing in this window into the

00:03:39.890 --> 00:03:39.900
were passing in this window into the
 

00:03:39.900 --> 00:03:41.899
were passing in this window into the
confident hopefully the confident will

00:03:41.899 --> 00:03:41.909
confident hopefully the confident will
 

00:03:41.909 --> 00:03:45.020
confident hopefully the confident will
have output 1 for that input region so

00:03:45.020 --> 00:03:45.030
have output 1 for that input region so
 

00:03:45.030 --> 00:03:46.789
have output 1 for that input region so
then you detect that there is a car

00:03:46.789 --> 00:03:46.799
then you detect that there is a car
 

00:03:46.799 --> 00:03:49.280
then you detect that there is a car
there so this algorithm is called

00:03:49.280 --> 00:03:49.290
there so this algorithm is called
 

00:03:49.290 --> 00:03:51.830
there so this algorithm is called
sliding windows detection because you

00:03:51.830 --> 00:03:51.840
sliding windows detection because you
 

00:03:51.840 --> 00:03:54.879
sliding windows detection because you
take these windows these some square

00:03:54.879 --> 00:03:54.889
take these windows these some square
 

00:03:54.889 --> 00:03:58.219
take these windows these some square
boxes and slide them across the entire

00:03:58.219 --> 00:03:58.229
boxes and slide them across the entire
 

00:03:58.229 --> 00:04:01.189
boxes and slide them across the entire
image and classify every square region

00:04:01.189 --> 00:04:01.199
image and classify every square region
 

00:04:01.199 --> 00:04:04.189
image and classify every square region
with some stride as containing a car or

00:04:04.189 --> 00:04:04.199
with some stride as containing a car or
 

00:04:04.199 --> 00:04:07.879
with some stride as containing a car or
not now there's a huge disadvantage of

00:04:07.879 --> 00:04:07.889
not now there's a huge disadvantage of
 

00:04:07.889 --> 00:04:10.960
not now there's a huge disadvantage of
sliding windows detection which is the

00:04:10.960 --> 00:04:10.970
sliding windows detection which is the
 

00:04:10.970 --> 00:04:13.909
sliding windows detection which is the
computational cost because you're

00:04:13.909 --> 00:04:13.919
computational cost because you're
 

00:04:13.919 --> 00:04:15.860
computational cost because you're
cropping out so many different square

00:04:15.860 --> 00:04:15.870
cropping out so many different square
 

00:04:15.870 --> 00:04:17.870
cropping out so many different square
regions in the image and running each of

00:04:17.870 --> 00:04:17.880
regions in the image and running each of
 

00:04:17.880 --> 00:04:18.650
regions in the image and running each of
them in the

00:04:18.650 --> 00:04:18.660
them in the
 

00:04:18.660 --> 00:04:22.820
them in the
inde through a confident and if you use

00:04:22.820 --> 00:04:22.830
inde through a confident and if you use
 

00:04:22.830 --> 00:04:25.400
inde through a confident and if you use
the very course write a very big Strider

00:04:25.400 --> 00:04:25.410
the very course write a very big Strider
 

00:04:25.410 --> 00:04:27.470
the very course write a very big Strider
very big step size then that would

00:04:27.470 --> 00:04:27.480
very big step size then that would
 

00:04:27.480 --> 00:04:29.870
very big step size then that would
reduce the number of windows you need to

00:04:29.870 --> 00:04:29.880
reduce the number of windows you need to
 

00:04:29.880 --> 00:04:31.970
reduce the number of windows you need to
pass through the continent but that

00:04:31.970 --> 00:04:31.980
pass through the continent but that
 

00:04:31.980 --> 00:04:35.350
pass through the continent but that
coarser granularity may hurt performance

00:04:35.350 --> 00:04:35.360
coarser granularity may hurt performance
 

00:04:35.360 --> 00:04:37.070
coarser granularity may hurt performance
whereas if you use a very fine

00:04:37.070 --> 00:04:37.080
whereas if you use a very fine
 

00:04:37.080 --> 00:04:40.010
whereas if you use a very fine
granularity or a very small stride then

00:04:40.010 --> 00:04:40.020
granularity or a very small stride then
 

00:04:40.020 --> 00:04:42.470
granularity or a very small stride then
the huge number of you know all these

00:04:42.470 --> 00:04:42.480
the huge number of you know all these
 

00:04:42.480 --> 00:04:44.480
the huge number of you know all these
little regions you're passing through

00:04:44.480 --> 00:04:44.490
little regions you're passing through
 

00:04:44.490 --> 00:04:46.490
little regions you're passing through
the confident means that there's a very

00:04:46.490 --> 00:04:46.500
the confident means that there's a very
 

00:04:46.500 --> 00:04:50.030
the confident means that there's a very
high computational cost so before the

00:04:50.030 --> 00:04:50.040
high computational cost so before the
 

00:04:50.040 --> 00:04:52.010
high computational cost so before the
rise of neural networks people used to

00:04:52.010 --> 00:04:52.020
rise of neural networks people used to
 

00:04:52.020 --> 00:04:54.140
rise of neural networks people used to
use much simpler classifiers like a

00:04:54.140 --> 00:04:54.150
use much simpler classifiers like a
 

00:04:54.150 --> 00:04:56.810
use much simpler classifiers like a
simple linear classifier overhand

00:04:56.810 --> 00:04:56.820
simple linear classifier overhand
 

00:04:56.820 --> 00:04:58.730
simple linear classifier overhand
engineer features in order to perform

00:04:58.730 --> 00:04:58.740
engineer features in order to perform
 

00:04:58.740 --> 00:05:01.400
engineer features in order to perform
object detection and in that error

00:05:01.400 --> 00:05:01.410
object detection and in that error
 

00:05:01.410 --> 00:05:03.920
object detection and in that error
because each classifier was relatively

00:05:03.920 --> 00:05:03.930
because each classifier was relatively
 

00:05:03.930 --> 00:05:05.600
because each classifier was relatively
cheap to compute it was just a linear

00:05:05.600 --> 00:05:05.610
cheap to compute it was just a linear
 

00:05:05.610 --> 00:05:08.270
cheap to compute it was just a linear
function sliding windows detection ran

00:05:08.270 --> 00:05:08.280
function sliding windows detection ran
 

00:05:08.280 --> 00:05:10.970
function sliding windows detection ran
okay it was not a bad method but with

00:05:10.970 --> 00:05:10.980
okay it was not a bad method but with
 

00:05:10.980 --> 00:05:13.400
okay it was not a bad method but with
confidence now running a single

00:05:13.400 --> 00:05:13.410
confidence now running a single
 

00:05:13.410 --> 00:05:15.590
confidence now running a single
classification task is much more

00:05:15.590 --> 00:05:15.600
classification task is much more
 

00:05:15.600 --> 00:05:18.410
classification task is much more
expensive and sliding windows this way

00:05:18.410 --> 00:05:18.420
expensive and sliding windows this way
 

00:05:18.420 --> 00:05:22.640
expensive and sliding windows this way
is infeasible slow and unless you use a

00:05:22.640 --> 00:05:22.650
is infeasible slow and unless you use a
 

00:05:22.650 --> 00:05:25.340
is infeasible slow and unless you use a
very fine granularity or a very small

00:05:25.340 --> 00:05:25.350
very fine granularity or a very small
 

00:05:25.350 --> 00:05:28.400
very fine granularity or a very small
stride you end up not able to localize

00:05:28.400 --> 00:05:28.410
stride you end up not able to localize
 

00:05:28.410 --> 00:05:31.430
stride you end up not able to localize
the objects that accurately within the

00:05:31.430 --> 00:05:31.440
the objects that accurately within the
 

00:05:31.440 --> 00:05:34.520
the objects that accurately within the
image as well fortunately however this

00:05:34.520 --> 00:05:34.530
image as well fortunately however this
 

00:05:34.530 --> 00:05:36.830
image as well fortunately however this
problem of computational cost has a

00:05:36.830 --> 00:05:36.840
problem of computational cost has a
 

00:05:36.840 --> 00:05:39.710
problem of computational cost has a
pretty good solution in particular the

00:05:39.710 --> 00:05:39.720
pretty good solution in particular the
 

00:05:39.720 --> 00:05:42.170
pretty good solution in particular the
sliding windows object detector can be

00:05:42.170 --> 00:05:42.180
sliding windows object detector can be
 

00:05:42.180 --> 00:05:45.020
sliding windows object detector can be
implemented convolutional e or much more

00:05:45.020 --> 00:05:45.030
implemented convolutional e or much more
 

00:05:45.030 --> 00:05:47.120
implemented convolutional e or much more
efficiently let's see in the next video

00:05:47.120 --> 00:05:47.130
efficiently let's see in the next video
 

00:05:47.130 --> 00:05:50.120
efficiently let's see in the next video
how you can do that

