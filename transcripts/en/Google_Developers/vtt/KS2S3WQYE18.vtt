WEBVTT
Kind: captions
Language: en

00:00:06.606 --> 00:00:08.141
Hi, my name's Austin Chau.

00:00:08.141 --> 00:00:10.710
I work on the Calendar
Date API team.

00:00:10.710 --> 00:00:14.247
The Calendar Data API, is the
API that exposes the data of

00:00:14.247 --> 00:00:16.249
your Google calendar account.

00:00:16.249 --> 00:00:18.852
With the API, you can do
things like creating events,

00:00:18.852 --> 00:00:21.755
searching for events, or even
create a whole new calendar

00:00:21.755 --> 00:00:23.390
program automatically.

00:00:23.390 --> 00:00:25.692
Today, I am going to go over
how to get started using

00:00:25.692 --> 00:00:29.062
JavaScript Client Library to
talk to the Calendar Data API.

00:00:29.062 --> 00:00:31.598
I'll also be showing a demo of
the new interactive developer

00:00:31.598 --> 00:00:33.967
guide that I developed.

00:00:33.967 --> 00:00:36.002
This new developer guide lets
you play with the code right

00:00:36.002 --> 00:00:37.170
in the browser.

00:00:37.170 --> 00:00:39.506
So it's a great learning tool
for you to start learning how

00:00:39.506 --> 00:00:41.207
to use the client library.

00:00:41.207 --> 00:00:43.576
The JavaScript Client Library
is the latest client library

00:00:43.576 --> 00:00:45.612
that we have added to our list
of client libraries that we

00:00:45.612 --> 00:00:49.482
officially support, which
includes Java, CSharp, PHP,

00:00:49.482 --> 00:00:50.850
and Phython.

00:00:50.850 --> 00:00:53.520
But the JavaScript Client
Library is particularly useful,

00:00:53.520 --> 00:00:56.589
because it allows you to easily
integrate with the HTML and

00:00:56.589 --> 00:00:58.792
there is no service side
dependency.

00:00:58.792 --> 00:01:00.593
The JavaScript Client Library
also has the building

00:01:00.593 --> 00:01:04.297
technology that allows cross-
domain communication, meaning

00:01:04.297 --> 00:01:06.332
that you can now use JavaScript
to perform not only

00:01:06.332 --> 00:01:08.668
re-operation, but also write.

00:01:08.668 --> 00:01:11.271
Using the JavaScript Client
Library, it's very easy.

00:01:11.271 --> 00:01:13.640
I'm going to show you the few
steps you need to do to set up

00:01:13.640 --> 00:01:16.876
your code to start using it.

00:01:16.876 --> 00:01:20.080
Step 1: You have to sign up
for a developer key. You do

00:01:20.080 --> 00:01:22.649
that by going to this website.

00:01:22.649 --> 00:01:26.019
Step 2: You need to include
the client library loader on

00:01:26.019 --> 00:01:28.221
your website by placing this
script included with

00:01:28.221 --> 00:01:30.156
your developer key.

00:01:30.156 --> 00:01:32.559
Step 3: You need to upload an
image to the same domain where

00:01:32.559 --> 00:01:35.428
the JavaScript Code is going
to be. This image doesn't have

00:01:35.428 --> 00:01:36.296
to be visible. 

00:01:36.296 --> 00:01:39.199
As you can see, I'm positioning
it far off the page.

00:01:39.199 --> 00:01:40.400
This is needed for
cross-domain

00:01:40.400 --> 00:01:42.368
communication purposes.

00:01:42.368 --> 00:01:45.105
Step 4: You need to use the
loader to load in the

00:01:45.105 --> 00:01:46.739
JavaScript Client Library.

00:01:46.739 --> 00:01:49.442
Step 5: You now need to set
the callback function to be

00:01:49.442 --> 00:01:52.045
called when the library is
loaded and ready to go.

00:01:52.045 --> 00:01:55.315
Step 6: Inside of the callback
function, you first need to check if the

00:01:55.315 --> 00:01:56.616
user has logged in. 

00:01:56.616 --> 00:01:58.952
If not, you need to redirect
the user to the Google account

00:01:58.952 --> 00:02:00.787
page to log in.

00:02:00.787 --> 00:02:02.989
The user will then be returned
back to your page when

00:02:02.989 --> 00:02:04.624
they are authenticated.

00:02:04.624 --> 00:02:06.493
Now you are ready to use the
JavaScript Client Library to

00:02:06.493 --> 00:02:09.929
make calls to play with
the calendar data API.

00:02:09.929 --> 00:02:12.298
Now let's go to the
"Interactive Developer Guide."

00:02:12.298 --> 00:02:17.070
You can access this by going
to this address.

00:02:17.070 --> 00:02:19.072
The interactive developer
guide looks like a normal

00:02:19.072 --> 00:02:21.374
developer guide with sample
code, demonstrating the common

00:02:21.374 --> 00:02:24.410
used cases that you can
perform using the API.

00:02:24.410 --> 00:02:26.513
But unlike the normal
developer guide, you can now

00:02:26.513 --> 00:02:29.149
modify the source code using
the build-in text editor and

00:02:29.149 --> 00:02:31.451
execute a code right
out of the browser.

00:02:31.451 --> 00:02:34.187
This is a fun and intuitive
way to learn as you get to

00:02:34.187 --> 00:02:37.524
immediately see the results of
the action you just performed.

00:02:37.524 --> 00:02:39.392
So let's take a look at some
of the sample codes and we'll

00:02:39.392 --> 00:02:40.927
try to execute it.

00:02:40.927 --> 00:02:44.697
So let's run this sample code
and see what happens.

00:02:44.697 --> 00:02:47.033
The snippet you just executed
retrieved a list of all your

00:02:47.033 --> 00:02:49.802
calendars and printed
out the titles.

00:02:49.802 --> 00:02:52.071
You can pull up the embedded
version of Google calendar to

00:02:52.071 --> 00:02:58.645
verify that these are all the
calendars that belong to you.

00:02:58.645 --> 00:03:02.382
Now let's take a look at the
code to see how this is done.

00:03:02.382 --> 00:03:05.585
First you have to create calendar
service object and you have to pass

00:03:05.585 --> 00:03:09.889
in your application name.

00:03:09.889 --> 00:03:12.592
Then you have to specify the
"feedURL," where this request

00:03:12.592 --> 00:03:15.295
will be sent to.

00:03:15.295 --> 00:03:17.530
And we are using
the "allcalendar" feed.

00:03:17.530 --> 00:03:20.433
Then you have to define
your callback function.

00:03:20.433 --> 00:03:24.537
So inside a function, we are
just peering through the list

00:03:24.537 --> 00:03:27.240
of calendars you have and
printing out it's title.

00:03:27.240 --> 00:03:29.409
We are using the print
function, which is a

00:03:29.409 --> 00:03:31.477
convenience method that we
provide in this

00:03:31.477 --> 00:03:34.414
developer guide.

00:03:34.414 --> 00:03:37.050
And then you also have to
create a callback function

00:03:37.050 --> 00:03:39.419
for your "error handling."

00:03:39.419 --> 00:03:41.888
And now we are just outputting
the error message to the

00:03:41.888 --> 00:03:43.256
"Output" tab.

00:03:43.256 --> 00:03:45.124
And finally, you have to
submit this request to the

00:03:45.124 --> 00:03:49.329
server by calling the
"getALLCalendarsFeed" through

00:03:49.329 --> 00:03:52.765
your calendar service object
by passing your "feedURL,"

00:03:52.765 --> 00:03:55.668
your "callback" and your
"error callback."

00:03:55.668 --> 00:03:58.104
So let's modify the code to
something different.

00:03:58.104 --> 00:03:59.939
Let's add some code to print
out the time zone off

00:03:59.939 --> 00:04:01.541
your calendar.

00:04:01.541 --> 00:04:03.376
You can easily do that by
going into a text editor

00:04:03.376 --> 00:04:07.046
and changing the code.

00:04:07.046 --> 00:04:12.719
And now let's run this code.

00:04:12.719 --> 00:04:15.822
You'll see you have to count
the title and the time zone

00:04:15.822 --> 00:04:18.625
and output it.

00:04:18.625 --> 00:04:20.960
Ok. Reading data from your
calendars is fun, but its more

00:04:20.960 --> 00:04:23.463
interesting to write data
to calendars.

00:04:23.463 --> 00:04:26.132
So let's create an event to
your Google calendar account.

00:04:26.132 --> 00:04:29.502
First you have to create a
service object again.

00:04:29.502 --> 00:04:31.804
And now you have to specify
a different URL to do

00:04:31.804 --> 00:04:33.673
event creation.

00:04:33.673 --> 00:04:35.775
And this is the URL we are
going to use, the 

00:04:35.775 --> 00:04:38.778
"private/full" URL.

00:04:38.778 --> 00:04:41.180
And now you have to create an
MDB object to represent this

00:04:41.180 --> 00:04:43.249
new event.

00:04:43.249 --> 00:04:48.588
And we set the title to
"youtube video shoot."

00:04:48.588 --> 00:04:50.523
To associate time with an
event, you have to create a

00:04:50.523 --> 00:04:51.791
"When object."

00:04:51.791 --> 00:04:53.293
Then we have to set a start
and end time of the

00:04:53.293 --> 00:04:56.095
"When object" using the
daytime strain.

00:04:56.095 --> 00:04:58.765
And here we are, specifying
the start time to be today

00:04:58.765 --> 00:05:00.466
at 9:00 AM.

00:05:00.466 --> 00:05:06.105
And we specify the stop time
at today...10:00 AM.

00:05:06.105 --> 00:05:11.177
And then we set the
time to the "When object."

00:05:11.177 --> 00:05:14.347
And then you add the
"When object" to the event.

00:05:14.347 --> 00:05:16.416
And you also have to specify
the callback function to let

00:05:16.416 --> 00:05:19.152
you know when
the event is created.

00:05:19.152 --> 00:05:21.754
And you have to specify the
"error handling method" if

00:05:21.754 --> 00:05:23.523
they are any errors happening.

00:05:23.523 --> 00:05:26.192
And finally you have to submit
this request to the server by

00:05:26.192 --> 00:05:30.229
calling the
"insert event method."

00:05:30.229 --> 00:05:35.268
And let's run this code.

00:05:35.268 --> 00:05:40.640
And let's take a look
at this data calendar.

00:05:40.640 --> 00:05:44.410
And there it is.

00:05:44.410 --> 00:05:46.412
I hope you have an idea of how
easy it is to use the

00:05:46.412 --> 00:05:48.214
JavaScript Client Library.

00:05:48.214 --> 00:05:50.616
The interactive developer
guide has many other samples

00:05:50.616 --> 00:05:53.319
that demonstrate other
features of Calendar Data API.

00:05:53.319 --> 00:05:55.988
So I encourage you to go check
it out and go play with that.

00:05:55.988 --> 00:05:58.191
For more resources, you can
visit the Calendar Data API

00:05:58.191 --> 00:06:01.094
home page on "code.google.com."

00:06:01.094 --> 00:06:02.894
Thank you. Have fun coding.

