WEBVTT
Kind: captions
Language: en

00:00:14.610 --> 00:00:15.760
MATTHEW GAUNT: Hi, everyone.

00:00:15.760 --> 00:00:19.340
And thank you for joining me
for "Mobile Web Thursdays."

00:00:19.340 --> 00:00:22.210
Sorry for the slight technical
issues with the

00:00:22.210 --> 00:00:23.140
port casting live.

00:00:23.140 --> 00:00:25.176
We had some minor issues
just as we

00:00:25.176 --> 00:00:26.260
were about to go through.

00:00:26.260 --> 00:00:28.063
We were actually really
organized as well, which is

00:00:28.063 --> 00:00:29.290
kind of a shame.

00:00:29.290 --> 00:00:30.020
My name is Matthew Gaunt.

00:00:30.020 --> 00:00:32.920
I am a developer advocate
on the Chrome team.

00:00:32.920 --> 00:00:35.960
And what this session is going
to be about is just the

00:00:35.960 --> 00:00:40.320
approach that I take when I'm
developing a mobile site,

00:00:40.320 --> 00:00:42.630
whether that be responsive
or specific to mobile.

00:00:42.630 --> 00:00:43.620
Kind of up to you.

00:00:43.620 --> 00:00:47.330
But I think a lot of the things
that I do, I kind of

00:00:47.330 --> 00:00:50.780
don't want to get certain things
where I have to start

00:00:50.780 --> 00:00:53.160
writing scripts and forcing
things to happen and regularly

00:00:53.160 --> 00:00:54.650
start running tools.

00:00:54.650 --> 00:00:57.640
So things like CSS minification,
HTML5

00:00:57.640 --> 00:00:59.840
minification, all of these
little simple things that

00:00:59.840 --> 00:01:03.280
should really just
be done for me.

00:01:03.280 --> 00:01:05.750
And I essentially have a
setup that does that.

00:01:05.750 --> 00:01:08.290
So what I'm going to introduce
you to is a tool called

00:01:08.290 --> 00:01:10.820
Yeoman, which, if you're
not familiar with, it's

00:01:10.820 --> 00:01:12.850
essentially a way of scaffolding
a project.

00:01:12.850 --> 00:01:17.140
It kind of gives you a good
set of defaults for when

00:01:17.140 --> 00:01:19.270
you're starting your
new project.

00:01:19.270 --> 00:01:21.380
I'm now going to be talking
about some of the tools that

00:01:21.380 --> 00:01:25.050
it gives you specific, so things
like autoprefixing, so

00:01:25.050 --> 00:01:28.090
you no longer have to write
vendor prefixes.

00:01:28.090 --> 00:01:30.270
We're also going to be looking
at live reloading how that can

00:01:30.270 --> 00:01:33.080
help you with development
especially how that starts

00:01:33.080 --> 00:01:37.200
applying to mobile devices as
well as simulators, talk about

00:01:37.200 --> 00:01:41.350
some of the cross-device
approaches that you can take

00:01:41.350 --> 00:01:43.470
and then also some of things
that are mobile-specific

00:01:43.470 --> 00:01:46.010
things like network
conditioning.

00:01:46.010 --> 00:01:49.120
So how do you get an impression
of what your mobile

00:01:49.120 --> 00:01:52.720
users are experiencing on their
actual mobile devices

00:01:52.720 --> 00:01:56.020
when they're out and about on
a 2G or 3G connection versus

00:01:56.020 --> 00:01:58.130
what you're seeing on your
development machine where

00:01:58.130 --> 00:02:00.140
ultimately everything
is local.

00:02:00.140 --> 00:02:03.290
So the speed should be
surprisingly fast, and it

00:02:03.290 --> 00:02:07.460
doesn't really cater for
real-world scenario.

00:02:07.460 --> 00:02:11.130
So what I'm going to do first
off is create just a simple

00:02:11.130 --> 00:02:12.630
Yeoman project.

00:02:12.630 --> 00:02:17.136
So if I get Paul to shift
me over to my machine.

00:02:17.136 --> 00:02:19.050
Yeah, there we go.

00:02:19.050 --> 00:02:25.450
So what I'm going to do is
create a new directory for

00:02:25.450 --> 00:02:27.450
this project GGL Workplay.

00:02:27.450 --> 00:02:30.820
So if I go in there, now to
create a new project, all I

00:02:30.820 --> 00:02:33.020
have to do is type yo web app.

00:02:33.020 --> 00:02:36.970
So this is just kicking of
Yeoman and saying, create me a

00:02:36.970 --> 00:02:38.790
new web app project.

00:02:38.790 --> 00:02:42.820
So the website for this
is yeoman.io.

00:02:42.820 --> 00:02:45.090
To get it installed is really
nice and simple.

00:02:45.090 --> 00:02:48.690
So if I start yo webapp,
we get this

00:02:48.690 --> 00:02:50.670
beautiful little gentleman.

00:02:50.670 --> 00:02:53.170
And what it will do is it will
give me some preset defaults,

00:02:53.170 --> 00:02:56.115
the HTML5 Boilerplate, jQuery,
and Modernizr.

00:02:56.115 --> 00:02:57.990
But then it's also going to
run through a couple of

00:02:57.990 --> 00:03:00.300
questions of certain things
I may or may not want.

00:03:00.300 --> 00:03:03.660
So in this case, let's Twitter
Bootstrap for SaaS, which I'm

00:03:03.660 --> 00:03:05.050
not too fussed about.

00:03:05.050 --> 00:03:08.500
RequireJS, I always like
that for my JavaScript.

00:03:08.500 --> 00:03:11.060
And this is a new one that's
only just come in.

00:03:11.060 --> 00:03:13.980
And it's a little
bit half baked.

00:03:13.980 --> 00:03:15.886
There's still a couple of fixes
the Yeoman team are

00:03:15.886 --> 00:03:16.080
putting in.

00:03:16.080 --> 00:03:17.790
But I'm really excited
about it.

00:03:17.790 --> 00:03:19.830
So I'm going to be showing
you a little bit of

00:03:19.830 --> 00:03:21.090
what that can do.

00:03:21.090 --> 00:03:23.460
Now, what this goes and does,
is it starts setting up a

00:03:23.460 --> 00:03:25.510
number of those requirements,
those dependencies.

00:03:25.510 --> 00:03:27.930
So things like jQuery will go
and download the latest

00:03:27.930 --> 00:03:31.040
version, same as Modernizr.

00:03:31.040 --> 00:03:33.740
So what I'm going to do is just
show you what the file

00:03:33.740 --> 00:03:35.480
structure is like.

00:03:35.480 --> 00:03:38.770
And while I'm doing that, I'm
going to install some of the

00:03:38.770 --> 00:03:40.730
dependencies the MPM needs.

00:03:44.900 --> 00:03:53.380
So while that's going and doing
its thing, if I could

00:03:53.380 --> 00:03:57.535
get this to zoom in, that
would be great.

00:03:57.535 --> 00:03:58.016
Yeah.

00:03:58.016 --> 00:03:59.459
There we go.

00:03:59.459 --> 00:04:00.910
Sorry about that.

00:04:00.910 --> 00:04:05.470
So this is the project that I
have created with Yeoman.

00:04:05.470 --> 00:04:07.440
And basically, within this file
structure, you'll notice

00:04:07.440 --> 00:04:11.180
you've got a set of files as
well as a set of directories.

00:04:11.180 --> 00:04:14.360
So the app directory is
essentially where all your

00:04:14.360 --> 00:04:16.100
source code is going to
go, all your CSS,

00:04:16.100 --> 00:04:18.670
JavaScript, and HTML.

00:04:18.670 --> 00:04:20.490
We then have bower.json.

00:04:20.490 --> 00:04:22.980
Now, if you're not familiar with
Bower, what this is is

00:04:22.980 --> 00:04:25.720
essentially a set of front-end
libraries.

00:04:25.720 --> 00:04:28.400
And Bower is a tool that you
can use to just get those

00:04:28.400 --> 00:04:31.940
dependencies and store them,
so things like jQuery.

00:04:31.940 --> 00:04:33.980
And then it will also give
you a quick way of

00:04:33.980 --> 00:04:36.460
updating them as well.

00:04:36.460 --> 00:04:39.830
Grunt is a new tool which
you can kind of

00:04:39.830 --> 00:04:41.300
think of as a helper.

00:04:41.300 --> 00:04:44.070
So if you said you wanted to do
a certain task, you could

00:04:44.070 --> 00:04:46.360
say, Grunt, perform
this task for me.

00:04:46.360 --> 00:04:48.400
So an example would be
CSS modification.

00:04:48.400 --> 00:04:51.110
You could have a specific
task for that.

00:04:51.110 --> 00:04:53.440
But the nice thing with Grunt
is you can actually put

00:04:53.440 --> 00:04:56.420
multiple tasks together
into one thing.

00:04:56.420 --> 00:05:00.010
Node modules, this is what we're
downloading from MPM.

00:05:00.010 --> 00:05:03.120
Package.json is the actual list
of dependencies that we

00:05:03.120 --> 00:05:06.640
have, and then test where we
actually have a set of unit

00:05:06.640 --> 00:05:08.300
tests and frameworks.

00:05:08.300 --> 00:05:16.080
So if we go into app, which--

00:05:16.080 --> 00:05:16.440
oh, OK.

00:05:16.440 --> 00:05:16.880
Sorry.

00:05:16.880 --> 00:05:18.520
My machine went a bit slow.

00:05:21.300 --> 00:05:22.620
And again.

00:05:28.060 --> 00:05:29.590
There we go.

00:05:29.590 --> 00:05:31.790
So we got a set of defaults that
you'll be familiar with,

00:05:31.790 --> 00:05:37.610
things like fav.ico, 404.html,
index.html, most of the text,

00:05:37.610 --> 00:05:41.240
scripts and styles, and then
Bower components is things

00:05:41.240 --> 00:05:44.100
like jQuery, Modernizr,
or RequireJS.

00:05:44.100 --> 00:05:48.330
So if we actually looked at what
index.html consists of,

00:05:48.330 --> 00:05:51.830
its given us some default
styling and text.

00:05:51.830 --> 00:05:53.150
The idea with this is
that you're going

00:05:53.150 --> 00:05:54.720
to delete it anyway.

00:05:54.720 --> 00:05:58.770
But if I connect with Sublime,
this is where you'll start to

00:05:58.770 --> 00:06:01.720
see where HTML5 Boilerplate
is come in.

00:06:01.720 --> 00:06:05.070
So we've already got things like
a view port device with.

00:06:05.070 --> 00:06:08.650
You'll notice we start adding in
default styles, and I'll go

00:06:08.650 --> 00:06:10.840
over some of the nice things
that Grunt is giving you with

00:06:10.840 --> 00:06:14.670
that, Modernizr, and then also
we've got a lot of things

00:06:14.670 --> 00:06:18.470
around the Chrome frame Google
Analytics as well as RequireJS

00:06:18.470 --> 00:06:20.800
already plummed in.

00:06:20.800 --> 00:06:27.140
So the main reason I like using
Yeoman by default, is

00:06:27.140 --> 00:06:30.000
that if I wanted to now view
this website and have a server

00:06:30.000 --> 00:06:32.340
running with all the JavaScript
et cetera, all I

00:06:32.340 --> 00:06:36.560
have to do is just type
grunt server.

00:06:36.560 --> 00:06:39.660
I what this goes and does, is
it prepares all of my SaaS,

00:06:39.660 --> 00:06:42.300
all of my JavaScript, et cetera,
and compiles it down

00:06:42.300 --> 00:06:44.940
into the page, so then I've
already got a server ready on

00:06:44.940 --> 00:06:45.320
my machine.

00:06:45.320 --> 00:06:48.330
I don't need to go and set up
MAMP or anything like that.

00:06:48.330 --> 00:06:52.130
It just runs a small Python
server on my machine.

00:06:52.130 --> 00:06:54.520
And the way this is working, is
essentially, when you type

00:06:54.520 --> 00:06:56.820
in grunt server, you're actually
sitting there and

00:06:56.820 --> 00:07:00.930
saying, Grunt, I want you to
run your task name sever,

00:07:00.930 --> 00:07:04.150
which if we go and look down
at the very bottom in the

00:07:04.150 --> 00:07:09.753
grunt.js file, it's actually
just running this task here.

00:07:13.460 --> 00:07:15.770
And this is really powerful in
the sense that you can start

00:07:15.770 --> 00:07:18.195
getting LiveReload plummed
in for you.

00:07:18.195 --> 00:07:21.680
You don't need to add
it in yourself.

00:07:21.680 --> 00:07:24.910
So I'm just going to briefly
go through what Grunt is

00:07:24.910 --> 00:07:26.160
actually doing.

00:07:29.550 --> 00:07:32.650
So up at the top, we have
this LiveReload

00:07:32.650 --> 00:07:33.775
port as well as snippet.

00:07:33.775 --> 00:07:38.836
And all this is doing is
when you run a server--

00:07:38.836 --> 00:07:40.090
there we go.

00:07:40.090 --> 00:07:44.130
If I just zoom in, it might
be a bit easier to see.

00:07:44.130 --> 00:07:46.670
So essentially, all this is you
this is doing is saying,

00:07:46.670 --> 00:07:49.400
what port would you like the
LiveReload server to run on?

00:07:49.400 --> 00:07:51.030
And then it prepares
a snippet.

00:07:51.030 --> 00:07:53.220
So whenever you run Grunt
server, it will actually

00:07:53.220 --> 00:07:57.160
insert the LiveReload code
for you only when

00:07:57.160 --> 00:07:58.060
you're in Grunt server.

00:07:58.060 --> 00:07:59.770
So if you want to distribute
this, you

00:07:59.770 --> 00:08:01.590
could run Grunt Build.

00:08:01.590 --> 00:08:04.320
It produces distribution-ready
version for you, and it won't

00:08:04.320 --> 00:08:07.480
include the library
load code for you.

00:08:07.480 --> 00:08:10.350
We then have a set of common
defaults, so here, you'll have

00:08:10.350 --> 00:08:11.640
app in distribution.

00:08:11.640 --> 00:08:13.830
So app is actually directory
where we're going to have all

00:08:13.830 --> 00:08:16.200
of our development files, and
dist is going to be where

00:08:16.200 --> 00:08:19.880
we're going to create the
distribution-ready version.

00:08:19.880 --> 00:08:22.990
Watch is essentially the thing
that's going to be listening

00:08:22.990 --> 00:08:24.210
for certain files when
they change.

00:08:24.210 --> 00:08:27.050
When they change, LiveReload
knows to update for it.

00:08:27.050 --> 00:08:30.440
So we've got things like SaaS,
Compass, Coffee files, things

00:08:30.440 --> 00:08:31.710
along those lines.

00:08:31.710 --> 00:08:36.030
Connect is where we actually
set up the initial server.

00:08:36.030 --> 00:08:38.120
By default, you have local
hosters, any accessible on

00:08:38.120 --> 00:08:39.500
this machine.

00:08:39.500 --> 00:08:41.330
If you want to make it
accessible to all the mobile

00:08:41.330 --> 00:08:44.440
devices on your network, which
we're going to want, we need

00:08:44.440 --> 00:08:49.580
to change that to 0 dot 0000.

00:08:49.580 --> 00:08:51.700
And then we've got a number
of different things.

00:08:51.700 --> 00:08:54.370
So we've got test and
distribution, which again, the

00:08:54.370 --> 00:08:56.160
Grunt build is going
to deal with.

00:08:56.160 --> 00:08:58.980
Clean will actually make sure
that whenever you do another

00:08:58.980 --> 00:09:01.390
distribution build, you're
removing all the out files,

00:09:01.390 --> 00:09:04.070
Jshint will actually get fired
off whenever you try and

00:09:04.070 --> 00:09:05.600
produce a build as well.

00:09:05.600 --> 00:09:07.920
So during a development, you
can sit there, write the

00:09:07.920 --> 00:09:09.970
JavaScript, and it will
produce it nicely.

00:09:09.970 --> 00:09:14.190
And then at the end, when you
try to produce final build, it

00:09:14.190 --> 00:09:15.820
will actually get jshinted.

00:09:15.820 --> 00:09:18.250
So essentially, any wrong things
that you're doing,

00:09:18.250 --> 00:09:20.760
things you should be improving
on, you're going to

00:09:20.760 --> 00:09:22.870
be told about it.

00:09:22.870 --> 00:09:24.770
Then we've obviously got things
to deal with Compass,

00:09:24.770 --> 00:09:28.025
SaaS, autoprefixer, which I'm
going to show you a demo of in

00:09:28.025 --> 00:09:31.350
a minute, proj S.
A whole chain of

00:09:31.350 --> 00:09:32.710
things you can see here.

00:09:32.710 --> 00:09:34.980
So the best way that I can show
you all of this, is if I

00:09:34.980 --> 00:09:42.770
go and produce a new SaaS file,
so I'm going to name

00:09:42.770 --> 00:09:45.200
this main.saas.

00:09:49.640 --> 00:09:52.400
And what I want to do
as well is copy over

00:09:52.400 --> 00:09:54.110
the existing stuff.

00:09:54.110 --> 00:10:02.760
So where we've already got the
existing styles, I don't want

00:10:02.760 --> 00:10:03.820
them anymore.

00:10:03.820 --> 00:10:07.290
So what I'm going to do is just
move those over to trash.

00:10:13.490 --> 00:10:16.970
So what this is now doing is,
I've refreshed it so it should

00:10:16.970 --> 00:10:24.740
start pulling in the
new file already.

00:10:24.740 --> 00:10:27.452
If it's not, why not?

00:10:27.452 --> 00:10:29.050
Yeah, that should be there.

00:10:29.050 --> 00:10:30.080
There we go.

00:10:30.080 --> 00:10:33.370
So what I've done is just moved
everything to a SESS

00:10:33.370 --> 00:10:35.480
file, so we know that Compass
is going to pull this.

00:10:35.480 --> 00:10:38.560
And one the nice things with
the autoprefixer that I was

00:10:38.560 --> 00:10:42.000
talking about is if I just type
in display flex, normally

00:10:42.000 --> 00:10:44.300
you'd have to type in the WebKit
equivalent, the Mozilla

00:10:44.300 --> 00:10:45.770
version, et cetera.

00:10:45.770 --> 00:10:48.190
And the idea with the
autoprefixer is it knows that

00:10:48.190 --> 00:10:50.730
this is what you're
trying to do.

00:10:50.730 --> 00:10:55.090
So if I now go to this page,
what it should do is start

00:10:55.090 --> 00:10:57.350
applying these styles in line.

00:10:57.350 --> 00:10:59.620
So if I go to the inspect
element for this page where

00:10:59.620 --> 00:11:05.550
I've applied display flex, what
you should be able to see

00:11:05.550 --> 00:11:09.630
is where we've originally just
typed in display flex, the

00:11:09.630 --> 00:11:14.770
autoprefixer is already
added in WebKit box,

00:11:14.770 --> 00:11:16.870
WebKit flex, MS Flexbox.

00:11:16.870 --> 00:11:19.180
And the moment it's not doing
Mozilla prefixes, but I think

00:11:19.180 --> 00:11:22.860
this is a bug that the Yeoman
teams are already working on.

00:11:22.860 --> 00:11:24.880
So I'm actually going to change
that to .container.

00:11:30.503 --> 00:11:32.210
So that should actually
produce something

00:11:32.210 --> 00:11:34.250
slightly more sane.

00:11:34.250 --> 00:11:35.990
There we go.

00:11:35.990 --> 00:11:38.210
No, it hasn't.

00:11:38.210 --> 00:11:40.950
Why it won't?

00:11:40.950 --> 00:11:41.490
OK.

00:11:41.490 --> 00:11:42.800
It's not important anyway.

00:11:42.800 --> 00:11:46.800
But the idea with this is
essentially that you're

00:11:46.800 --> 00:11:47.990
already getting to
a point where it

00:11:47.990 --> 00:11:49.170
should simplify things.

00:11:49.170 --> 00:11:51.710
And obviously, if it comes to a
point where this isn't quite

00:11:51.710 --> 00:11:54.510
working for you because there's
not enough or you need

00:11:54.510 --> 00:11:57.220
the Mozilla things now, you
can literally start using

00:11:57.220 --> 00:11:58.870
Compass in this as well.

00:11:58.870 --> 00:12:01.210
So do the
@includeDisplayFlexbox, and

00:12:01.210 --> 00:12:06.210
that will start coming into
play for you as well.

00:12:06.210 --> 00:12:09.150
So the next thing I want to talk
about is, even if we've

00:12:09.150 --> 00:12:14.090
got this build process where
we're adding in additional

00:12:14.090 --> 00:12:17.240
prefixes, one of the key things
is this minification.

00:12:17.240 --> 00:12:20.440
You want to reduce the size of
your CSS and JavaScript.

00:12:20.440 --> 00:12:23.820
So if I write Grunt build, what
this is actually going to

00:12:23.820 --> 00:12:27.020
do is start doing all of the
hard and heavy lifting for me

00:12:27.020 --> 00:12:28.720
so that I don't need to do it.

00:12:28.720 --> 00:12:32.240
So what it's doing is running
through Uglify, CSSmin,

00:12:32.240 --> 00:12:36.040
HTMLmin, and once it's finished,
you can go back to

00:12:36.040 --> 00:12:38.184
your main directory.

00:12:38.184 --> 00:12:43.590
And you'll notice we've now
got this dist build.

00:12:43.590 --> 00:12:45.880
Now what this is, is it's
minified version of

00:12:45.880 --> 00:12:46.880
everything.

00:12:46.880 --> 00:12:52.170
So if I open this up
in Chrome, this is

00:12:52.170 --> 00:12:53.390
exactly the same page.

00:12:53.390 --> 00:12:57.230
But if I inspect some
of the CSS, where

00:12:57.230 --> 00:12:58.940
can I find some CSS?

00:12:58.940 --> 00:13:01.670
Yeah, there.

00:13:01.670 --> 00:13:03.786
I'm going to--

00:13:03.786 --> 00:13:05.540
you know what?

00:13:05.540 --> 00:13:06.810
Let's open it in Sublime mode.

00:13:06.810 --> 00:13:09.510
It might be easier,
wouldn't it?

00:13:09.510 --> 00:13:12.940
So first, you already notice
that it's already added like

00:13:12.940 --> 00:13:16.670
an ID to this file where it's
been compiled for you, and

00:13:16.670 --> 00:13:18.796
Grunt will actually inject that
into the web page, so you

00:13:18.796 --> 00:13:20.420
don't need to worry about
maintaining that.

00:13:20.420 --> 00:13:22.480
But you can see that it's
already started

00:13:22.480 --> 00:13:25.480
adjusting the CSS.

00:13:25.480 --> 00:13:27.640
The only thing you have to be
aware of is if you start using

00:13:27.640 --> 00:13:30.380
break points in multiple files,
it will actually bring

00:13:30.380 --> 00:13:32.125
all the files into one.

00:13:32.125 --> 00:13:36.110
So you do sometimes need to name
the files in numerical

00:13:36.110 --> 00:13:37.370
order is the best way that
I've found so you have

00:13:37.370 --> 00:13:38.630
naught, one, two.

00:13:38.630 --> 00:13:43.290
The main reason of that is the
position of your media queries

00:13:43.290 --> 00:13:46.805
is important as to which one
gets affected, which one's the

00:13:46.805 --> 00:13:48.617
actual one that applies to start
with, the last one on

00:13:48.617 --> 00:13:49.660
the style sheet.

00:13:49.660 --> 00:13:51.060
So you need to make sure
that they're added

00:13:51.060 --> 00:13:53.450
in the correct order.

00:13:53.450 --> 00:13:57.630
So all of this is good and well,
but at the same time, we

00:13:57.630 --> 00:14:01.740
want to start using this
on a mobile device.

00:14:01.740 --> 00:14:03.810
So we've got best practices in
place where we're reducing the

00:14:03.810 --> 00:14:06.680
file sizes, which is great for
mobile, but how do we now

00:14:06.680 --> 00:14:08.130
start playing with this?

00:14:08.130 --> 00:14:13.510
So I've got a device set up
with one of the cameras I

00:14:13.510 --> 00:14:17.720
think Paul is going to quickly
shift over to.

00:14:17.720 --> 00:14:20.110
So at the moment, we've got that
mobile device and then on

00:14:20.110 --> 00:14:22.740
my machine, we want the two
to start talking together.

00:14:22.740 --> 00:14:26.330
So if I go to my localhost
9000, at the

00:14:26.330 --> 00:14:29.000
moment, that does nothing.

00:14:29.000 --> 00:14:31.270
And it would be great if we
can join the two together.

00:14:31.270 --> 00:14:34.630
So on my desktop machine, we've
actually got this new

00:14:34.630 --> 00:14:38.080
plug-in which has been written
between Pavel and Paul Irish.

00:14:38.080 --> 00:14:43.450
And what this does is it gives
you the ability to start

00:14:43.450 --> 00:14:47.930
looking at what ADB is seeing.

00:14:47.930 --> 00:14:50.350
Now, ADB is the Android
Debug Bridge.

00:14:50.350 --> 00:14:53.350
So if you click on this, you'll
notice we've got start

00:14:53.350 --> 00:14:54.760
ADB and then View Devices.

00:14:54.760 --> 00:14:58.090
So if I kick this off, what it
should start doing is fire up

00:14:58.090 --> 00:15:00.930
the ADB, the debug server
essentially,

00:15:00.930 --> 00:15:03.100
for the Android devices.

00:15:03.100 --> 00:15:08.150
And if I unplug my device back
in, you'll notice that it's

00:15:08.150 --> 00:15:09.100
now changed to number 1.

00:15:09.100 --> 00:15:11.030
So this is saying there's one
device connected to this

00:15:11.030 --> 00:15:12.190
machine that it's aware of.

00:15:12.190 --> 00:15:15.420
So if I now click on View
Devices, it will open up

00:15:15.420 --> 00:15:18.530
Chrome Inspect, which is where
we'll now start seeing this

00:15:18.530 --> 00:15:21.580
Galaxy Nexus, which is the
device I have here.

00:15:21.580 --> 00:15:24.960
And one of them is localhost
9000, which we had open.

00:15:24.960 --> 00:15:27.230
So if I click on Inspect, what
this is doing is opening up

00:15:27.230 --> 00:15:30.200
the dev tools for this device,
so the current

00:15:30.200 --> 00:15:32.300
beater running on here.

00:15:32.300 --> 00:15:37.700
And if I click on the Options,
I'm going to have to zoom out

00:15:37.700 --> 00:15:38.430
a little bit.

00:15:38.430 --> 00:15:39.300
There we go.

00:15:39.300 --> 00:15:42.460
So on the Experiments tab, for
the dev tools, I've got Enable

00:15:42.460 --> 00:15:45.870
reverse port forwarding, which
then brings up Port

00:15:45.870 --> 00:15:46.580
Forwarding.

00:15:46.580 --> 00:15:49.840
And now I've entered in just
a mapping for 9000 to 9000.

00:15:49.840 --> 00:15:52.750
So what that's doing is saying,
on my local machine, I

00:15:52.750 --> 00:15:53.880
have port 9000.

00:15:53.880 --> 00:15:56.620
Map it to the devices
port 9000.

00:15:56.620 --> 00:16:02.110
So when I now hit Refresh on
my device, we'll get this.

00:16:02.110 --> 00:16:03.970
So now I can actually start
playing around with the

00:16:03.970 --> 00:16:08.580
elements right from dev tools
like you normally

00:16:08.580 --> 00:16:10.190
would on the desktop.

00:16:10.190 --> 00:16:12.120
So what can I do?

00:16:12.120 --> 00:16:13.370
Allo, GDL.

00:16:15.230 --> 00:16:16.622
You guys rock.

00:16:19.990 --> 00:16:21.850
So already, you're starting to
be able to play around with

00:16:21.850 --> 00:16:23.890
the dev tools that you're used
to on your mobile device.

00:16:26.530 --> 00:16:28.500
The one problem with this is
obviously it works on Chrome

00:16:28.500 --> 00:16:31.380
for Android, but it's
not necessarily a

00:16:31.380 --> 00:16:33.670
cross-browser solution.

00:16:33.670 --> 00:16:35.710
This is particularly useful when
you want to start looking

00:16:35.710 --> 00:16:38.830
at performance time lines and
other things that are specific

00:16:38.830 --> 00:16:40.450
to the dev tools in Chrome.

00:16:40.450 --> 00:16:42.640
But if you want to start testing
across a range of

00:16:42.640 --> 00:16:46.580
devices, at that point, you need
to start looking at how

00:16:46.580 --> 00:16:49.940
you're going to essentially
connect your local machine to

00:16:49.940 --> 00:16:51.920
any device.

00:16:51.920 --> 00:16:55.210
So I've got an iPhone with me.

00:16:55.210 --> 00:16:58.160
And the best way to do it
essentially at the moment

00:16:58.160 --> 00:17:01.560
seems to be to have all the
devices connected on the same

00:17:01.560 --> 00:17:05.780
network and make the server on
your local machine available

00:17:05.780 --> 00:17:07.250
to these other devices.

00:17:07.250 --> 00:17:09.829
And there are a couple of
tools out there that add

00:17:09.829 --> 00:17:11.190
additional features
to this, so you've

00:17:11.190 --> 00:17:12.849
got like Adobe Inspect.

00:17:12.849 --> 00:17:16.400
You got Remote Preview, which
is an open source tool.

00:17:16.400 --> 00:17:19.450
The one thing they tend not to
offer though is the ability to

00:17:19.450 --> 00:17:21.859
just say, here's a URL launch
across devices.

00:17:21.859 --> 00:17:23.783
So there is still a little
bit of leg work

00:17:23.783 --> 00:17:25.980
that you need to do.

00:17:25.980 --> 00:17:28.690
But because we've done Grunt
server and we've changed the

00:17:28.690 --> 00:17:32.050
host name to naught, naught,
naught, naught, what I can do

00:17:32.050 --> 00:17:37.390
is just connect to the IP
address of my machine when I

00:17:37.390 --> 00:17:38.685
get this iPhone working.

00:17:46.050 --> 00:17:56.580
It will work, or maybe it won't
The server is running on

00:17:56.580 --> 00:17:57.830
my machine.

00:18:00.910 --> 00:18:03.140
OK, maybe it won't work.

00:18:03.140 --> 00:18:10.240
We always have slight issue in
the Google studio in the sense

00:18:10.240 --> 00:18:12.090
that we've got multiple
networks going off at

00:18:12.090 --> 00:18:13.420
different times.

00:18:13.420 --> 00:18:17.040
But anyway, one of the main
disadvantages of doing this at

00:18:17.040 --> 00:18:21.430
the very moment is, you have
to also open up a port for

00:18:21.430 --> 00:18:25.050
live reloading on your Android
device as well as your

00:18:25.050 --> 00:18:26.330
development console.

00:18:26.330 --> 00:18:29.390
So often, it's a good option
to sit there and go for

00:18:29.390 --> 00:18:32.420
naught, naught, naught on the
same network, because at that

00:18:32.420 --> 00:18:36.240
point when you're pointing to
this specific machine, what

00:18:36.240 --> 00:18:38.990
Grunt will also take care of
is it will inject the IP

00:18:38.990 --> 00:18:42.920
address of your machine for the
LiveReload file as well.

00:18:42.920 --> 00:18:45.400
So if I click at the demo work
in the iPhone, what would

00:18:45.400 --> 00:18:51.550
happen is when I start editing
my main SaaS file, so I could

00:18:51.550 --> 00:18:56.790
actually say, I can show you
a demo of it in the browser

00:18:56.790 --> 00:18:59.120
where normally I'd be off to
sit there and say, hey, I

00:18:59.120 --> 00:18:59.870
don't like this color.

00:18:59.870 --> 00:19:01.120
I'm going to change
it to black.

00:19:06.690 --> 00:19:10.600
No, it helps if I was
in the right file.

00:19:10.600 --> 00:19:13.290
So if I change that to naught,
naught, naught, what this will

00:19:13.290 --> 00:19:16.650
then do is notice a change
in the Grunt file.

00:19:19.460 --> 00:19:21.880
Stop breaking.

00:19:21.880 --> 00:19:24.050
It will notice a change in the
SaaS file and then it should

00:19:24.050 --> 00:19:26.440
actually kick off a LiveReload
on the server, which will then

00:19:26.440 --> 00:19:28.630
update all the browser
channels.

00:19:28.630 --> 00:19:33.530
Why it's not, I'm
not quite sure.

00:19:33.530 --> 00:19:35.300
Oh, I remember.

00:19:35.300 --> 00:19:36.170
So I apologize.

00:19:36.170 --> 00:19:38.310
I'm on a cutting-edge
version of Yeoman.

00:19:38.310 --> 00:19:42.870
So occasionally, I have
the brunt of issues.

00:19:42.870 --> 00:19:46.140
What I did there was there was
a current issue with noSpawn

00:19:46.140 --> 00:19:49.570
equals true, which actually
results in some weird quirks

00:19:49.570 --> 00:19:51.820
which team has already fixed,
but I haven't quite pulled the

00:19:51.820 --> 00:19:53.950
fixed yet myself.

00:19:53.950 --> 00:19:56.990
So the idea here is again, like
I said-- there we go.

00:19:56.990 --> 00:19:58.970
When I changed the SaaS file,
it should already

00:19:58.970 --> 00:20:00.490
update the web page.

00:20:00.490 --> 00:20:04.560
And the problem here is this
actually requires a certain

00:20:04.560 --> 00:20:06.680
port that I can't get going
on this device.

00:20:06.680 --> 00:20:09.920
So like I said, use the network
IP address for the

00:20:09.920 --> 00:20:14.500
machine and then everything
should start playing nicely.

00:20:14.500 --> 00:20:20.850
So let's say all of this
was good and well.

00:20:20.850 --> 00:20:22.010
We go through all
this process.

00:20:22.010 --> 00:20:25.110
We've got minified CSS
and JavaScript.

00:20:25.110 --> 00:20:27.340
We've tested it on a range
of devices, and we're

00:20:27.340 --> 00:20:29.090
ready to launch it.

00:20:29.090 --> 00:20:32.030
One of the big things that
you're never going to really

00:20:32.030 --> 00:20:36.480
experience in your device is the
network speed of a mobile

00:20:36.480 --> 00:20:40.033
device while you're developing
locally especially when you're

00:20:40.033 --> 00:20:43.160
on the various networks.

00:20:43.160 --> 00:20:45.160
Now, one of the ways you can do
this is there a couple of

00:20:45.160 --> 00:20:48.170
proxy tools out there that will
actually enable you to

00:20:48.170 --> 00:20:53.110
restrict the speed that you
have available onto these

00:20:53.110 --> 00:20:55.060
devices essentially, any
connections going in and out

00:20:55.060 --> 00:20:57.340
of your laptop.

00:20:57.340 --> 00:21:00.180
So one of the examples here is
network link conditioner.

00:21:00.180 --> 00:21:01.545
So if I--

00:21:05.750 --> 00:21:07.000
nope.

00:21:11.770 --> 00:21:15.140
And essentially, what this will
do when I enable it, I'm

00:21:15.140 --> 00:21:16.560
not going to use the worst
connection network because I

00:21:16.560 --> 00:21:17.580
tried that once.

00:21:17.580 --> 00:21:20.480
And let's use a preset
that I did.

00:21:20.480 --> 00:21:21.900
And I actually network
connection

00:21:21.900 --> 00:21:23.510
to log into my machine.

00:21:23.510 --> 00:21:24.970
So that was a bit weird.

00:21:24.970 --> 00:21:29.380
Anyway, so essentially if I go
to my own website here because

00:21:29.380 --> 00:21:31.170
I know it's particularly
a bad example for this

00:21:31.170 --> 00:21:35.430
unfortunately, I get quite fast
reload times, and that's

00:21:35.430 --> 00:21:38.100
because I'm on a good, solid
ethernet connection.

00:21:38.100 --> 00:21:45.030
Whereas if I hit the Network
Link Conditioner, then if I

00:21:45.030 --> 00:21:47.380
hit Refresh, you'll notice
that the network speed is

00:21:47.380 --> 00:21:48.630
going to be much, much slower.

00:21:51.010 --> 00:21:53.390
Now I'm also noticing that I'm
streaming this to the box

00:21:53.390 --> 00:21:54.150
through the network.

00:21:54.150 --> 00:21:56.200
So I'm wondering whether that's
going to effect it.

00:21:56.200 --> 00:21:59.340
But anyway you notice that the
speed time actually started

00:21:59.340 --> 00:22:01.020
slowing down.

00:22:01.020 --> 00:22:02.830
I've actually done a little bit
of work to improve this.

00:22:02.830 --> 00:22:06.280
I swapped out some of the PNGs
for JPEGs and compressed them

00:22:06.280 --> 00:22:07.200
a little bit.

00:22:07.200 --> 00:22:10.170
But I've got an example where
before it had done any of

00:22:10.170 --> 00:22:13.200
that, I'd actually recorded
the two side

00:22:13.200 --> 00:22:15.230
by side in the emulator.

00:22:15.230 --> 00:22:22.180
So if you look at my web page,
my desktop, yeah, there we go.

00:22:22.180 --> 00:22:25.720
So if I just kick this off, what
this is going to do is

00:22:25.720 --> 00:22:28.170
load the page roughly about
the same time, but you'll

00:22:28.170 --> 00:22:32.640
notice that the speed
differences is quite hefty.

00:22:32.640 --> 00:22:34.520
And not only is it kind of a
good indication of what your

00:22:34.520 --> 00:22:37.670
website is going to be like for
these users, but often you

00:22:37.670 --> 00:22:41.380
can almost find situations where
if the fonts and the

00:22:41.380 --> 00:22:44.700
text actually loaded before any
of the background images,

00:22:44.700 --> 00:22:46.660
sometimes you can actually get
way with just setting your

00:22:46.660 --> 00:22:47.790
background color.

00:22:47.790 --> 00:22:50.700
So that way if you've got a
light font and you've actually

00:22:50.700 --> 00:22:53.290
just been putting it on a white
page, if you just set a

00:22:53.290 --> 00:22:55.700
background color, that text
suddenly becomes readable and

00:22:55.700 --> 00:22:58.310
is quite usable.

00:22:58.310 --> 00:23:00.400
I use Link Conditioner iOS 6.

00:23:00.400 --> 00:23:02.060
There is also [INAUDIBLE],
which I think is a cross

00:23:02.060 --> 00:23:06.500
platform proxy tool as well.

00:23:06.500 --> 00:23:10.030
So the main reason why I
encourage people to look at

00:23:10.030 --> 00:23:14.720
Yeoman as well as Grunt is the
sense that what we're doing is

00:23:14.720 --> 00:23:18.040
looking at how people actually
develop in mobile devices,

00:23:18.040 --> 00:23:20.400
especially what kind of tools
they're bringing in and

00:23:20.400 --> 00:23:22.020
whether there are certain
things we can

00:23:22.020 --> 00:23:22.920
automate for them.

00:23:22.920 --> 00:23:25.860
So one of things that I've
beginning to start trying to

00:23:25.860 --> 00:23:27.040
do is look at WebP.

00:23:27.040 --> 00:23:30.960
So you should only ever have to
produce PNG files or JPEGS,

00:23:30.960 --> 00:23:32.850
and then there should be a
way of just automatically

00:23:32.850 --> 00:23:35.220
compressing them to WebP.

00:23:35.220 --> 00:23:37.730
There's also kind of a lot of
discussion between the group

00:23:37.730 --> 00:23:41.730
of us of how we could actually
like produce source sets and

00:23:41.730 --> 00:23:44.342
other things like that.

00:23:44.342 --> 00:23:46.950
And plus it's kind of getting
to that point where if there

00:23:46.950 --> 00:23:48.990
are certain things that you want
to do like you want to

00:23:48.990 --> 00:23:52.430
launch a browser stack instance
with localhost

00:23:52.430 --> 00:23:55.480
tunneled through, there are
Grunt tasks for browser stack

00:23:55.480 --> 00:23:57.660
as well the source labs and
a lot of the other tools.

00:23:57.660 --> 00:24:00.570
So at that point, you can almost
imagine a scenario

00:24:00.570 --> 00:24:02.700
where instead of going Grunt
server, you could take Grunt

00:24:02.700 --> 00:24:06.900
browser stack and set up a task
on your machine, and it

00:24:06.900 --> 00:24:09.580
will actually just start setting
that up for you.

00:24:09.580 --> 00:24:11.840
And even if there are particular
build steps for

00:24:11.840 --> 00:24:16.810
your specific project, you
can create those tasks.

00:24:16.810 --> 00:24:19.770
So I'm sorry I couldn't show
you the iPhone network

00:24:19.770 --> 00:24:23.950
connection along with
the live reloading.

00:24:23.950 --> 00:24:25.620
There are a lot of things
going on with the Yeoman

00:24:25.620 --> 00:24:27.090
project like I know the
team are working

00:24:27.090 --> 00:24:28.480
really, really hard.

00:24:28.480 --> 00:24:32.703
A lot of the changes are going
to come in quite soon are

00:24:32.703 --> 00:24:34.680
actually going to improve this
flow even better than what it

00:24:34.680 --> 00:24:35.540
already is.

00:24:35.540 --> 00:24:37.960
So I definitely encourage
you to go check out

00:24:37.960 --> 00:24:39.950
if you haven't already.

00:24:39.950 --> 00:24:42.850
Beyond that, I'd love to know
what your process is, what

00:24:42.850 --> 00:24:44.870
sort of things you're doing.

00:24:44.870 --> 00:24:47.060
And Germany, if you start giving
this a go, give us as

00:24:47.060 --> 00:24:49.400
much feedback as you can,
because I'd love to know where

00:24:49.400 --> 00:24:51.370
the pain points are for you.

00:24:51.370 --> 00:24:52.900
Other than that, thank
you for watching.

00:24:52.900 --> 00:24:54.150
I hope it's been useful.

