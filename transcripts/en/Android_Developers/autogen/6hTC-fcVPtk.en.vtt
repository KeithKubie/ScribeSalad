WEBVTT
Kind: captions
Language: en

00:00:00.409 --> 00:00:01.950
WOJTEK KALICINSKI:
Android Studio 3.0

00:00:01.950 --> 00:00:05.520
introduces an integrated view
for providing the memory, CPU,

00:00:05.520 --> 00:00:08.460
and network request
characteristics of your app.

00:00:08.460 --> 00:00:11.040
It's a complete overhaul
of the previous tools found

00:00:11.040 --> 00:00:13.470
under the Android Monitor
tab, which we've now

00:00:13.470 --> 00:00:16.110
renamed to Android Profiler.

00:00:16.110 --> 00:00:20.220
If you're profiling with an
API 26, so Android O or above,

00:00:20.220 --> 00:00:23.110
device or emulator,
you're all set.

00:00:23.110 --> 00:00:25.560
You can profile any APK,
regardless of the build

00:00:25.560 --> 00:00:27.840
system it was created with.

00:00:27.840 --> 00:00:30.840
If you connect the Profiler to
a device with a lower API level,

00:00:30.840 --> 00:00:32.580
you might see this warning.

00:00:32.580 --> 00:00:34.320
Because we need to
instrument your code

00:00:34.320 --> 00:00:37.740
to take full advantage of the
Profiler on older devices,

00:00:37.740 --> 00:00:41.130
you should use Android Studio
to build and deploy your app.

00:00:41.130 --> 00:00:44.280
The main view of the Profiler
presents a unified timeline

00:00:44.280 --> 00:00:47.040
showing you the user
charts for CPU, memory,

00:00:47.040 --> 00:00:49.020
and network in real time.

00:00:49.020 --> 00:00:51.780
At the top, you can also
see important app events

00:00:51.780 --> 00:00:55.170
such as user input, activity
state transitions, and device

00:00:55.170 --> 00:00:58.410
rotations, giving you more
context for the data below.

00:00:58.410 --> 00:01:00.180
Clicking on any of
the three charts

00:01:00.180 --> 00:01:02.040
takes you to one of
the detailed views.

00:01:02.040 --> 00:01:04.310
Let's check out the
CPU Profiler first.

00:01:04.310 --> 00:01:07.530
The UI shows a live CPU
utilization graph, and the list

00:01:07.530 --> 00:01:09.840
of all threads in your
app and their states,

00:01:09.840 --> 00:01:11.640
such as when they
were active or waiting

00:01:11.640 --> 00:01:15.030
for I/O. You can get a detailed
trace of methods executed

00:01:15.030 --> 00:01:18.210
in a given period by
pressing the record button.

00:01:18.210 --> 00:01:20.400
One thing to note
is the trace type.

00:01:20.400 --> 00:01:23.880
Sampled has a smaller overhead,
but is not as accurate,

00:01:23.880 --> 00:01:26.010
meaning it could miss
the execution of a very

00:01:26.010 --> 00:01:27.260
short-lived method.

00:01:27.260 --> 00:01:28.950
Instrumented means
that the Profiler

00:01:28.950 --> 00:01:32.850
will record every method,
enter, and exit, accurately.

00:01:32.850 --> 00:01:35.880
On pre-Android O devices,
there's a limit to how much

00:01:35.880 --> 00:01:37.420
data can be recorded.

00:01:37.420 --> 00:01:39.990
So be aware that the
instrumented trace capture

00:01:39.990 --> 00:01:41.646
will reach that limit faster.

00:01:41.646 --> 00:01:43.020
If you want to
increase the limit

00:01:43.020 --> 00:01:44.910
or change the
sampling rate, you can

00:01:44.910 --> 00:01:47.490
do that in the Edit
Configuration window here.

00:01:47.490 --> 00:01:49.030
After you've
finished the capture,

00:01:49.030 --> 00:01:51.300
select the thread
you're interested in.

00:01:51.300 --> 00:01:55.110
The Top Down view shows a tree
of methods and their callees,

00:01:55.110 --> 00:01:58.020
aggregating trace information
for identical methods

00:01:58.020 --> 00:02:01.410
that share the same call stack,
similar to the flame chart.

00:02:01.410 --> 00:02:04.230
The Bottom Up tab
displays a list of method

00:02:04.230 --> 00:02:08.310
calls where expanding a method's
node displays its callers.

00:02:08.310 --> 00:02:09.960
You can see a graphical
representation

00:02:09.960 --> 00:02:11.880
on the call chart,
which shows time

00:02:11.880 --> 00:02:15.210
spent in each call on
the horizontal axis.

00:02:15.210 --> 00:02:17.400
The Memory Profiler
shows a real-time chart

00:02:17.400 --> 00:02:19.860
of memory used by
your app attributed

00:02:19.860 --> 00:02:23.820
to various buckets such as Java,
native, graphics, et cetera.

00:02:23.820 --> 00:02:25.680
You can see any garbage
collection events

00:02:25.680 --> 00:02:27.660
on the timeline, and
you can force one

00:02:27.660 --> 00:02:29.680
using the button
on the top left.

00:02:29.680 --> 00:02:31.500
You can dump the
heap at any moment

00:02:31.500 --> 00:02:34.320
and examine instance
properties of objects.

00:02:34.320 --> 00:02:37.470
The References tab can help
you figure out memory leaks

00:02:37.470 --> 00:02:39.330
by listing all
references, pointing

00:02:39.330 --> 00:02:41.370
to the object being examined.

00:02:41.370 --> 00:02:43.800
There's one more feature that
is very useful for tracking

00:02:43.800 --> 00:02:45.570
memory use over time--

00:02:45.570 --> 00:02:47.280
allocation tracking.

00:02:47.280 --> 00:02:49.380
If you're profiling
against a device running

00:02:49.380 --> 00:02:52.560
API 26 or higher, you
can simply highlight

00:02:52.560 --> 00:02:54.450
any part of the
timeline, and you'll

00:02:54.450 --> 00:02:57.300
get a list of all objects
allocated and deallocated

00:02:57.300 --> 00:02:59.010
within that period,
including the call

00:02:59.010 --> 00:03:00.800
stack of the allocation.

00:03:00.800 --> 00:03:03.960
On API 25 and lower, you
will need to explicitly

00:03:03.960 --> 00:03:06.450
start and stop recording
allocations using

00:03:06.450 --> 00:03:09.210
the record button, similar
to how the CPU method

00:03:09.210 --> 00:03:10.230
tracing works.

00:03:10.230 --> 00:03:13.050
Another difference is that
on lower API versions,

00:03:13.050 --> 00:03:16.980
the call stacks are, by default,
capped to a depth of 16 frames.

00:03:16.980 --> 00:03:18.450
There is a system
property you can

00:03:18.450 --> 00:03:21.450
set prior to running your
app to temporarily enable

00:03:21.450 --> 00:03:23.280
deeper stack traces.

00:03:23.280 --> 00:03:26.340
Finally, let's look at
the Network Profiler.

00:03:26.340 --> 00:03:29.100
The line labeled Radio
shows a high-level overview

00:03:29.100 --> 00:03:31.770
of the networking
state of the device.

00:03:31.770 --> 00:03:33.855
By looking at it, you
can tell how often

00:03:33.855 --> 00:03:35.700
the device is
waking up the radio

00:03:35.700 --> 00:03:38.830
into a high-powered state,
which might suggest you're not

00:03:38.830 --> 00:03:41.790
batching your network requests
correctly and wasting battery

00:03:41.790 --> 00:03:42.640
life.

00:03:42.640 --> 00:03:45.760
The chart below shows actual
network connection activity,

00:03:45.760 --> 00:03:47.790
including bytes
sent and received.

00:03:47.790 --> 00:03:50.040
Whenever advanced
profiling is switched on

00:03:50.040 --> 00:03:53.310
or you're running on a
compatible API 26 device,

00:03:53.310 --> 00:03:55.080
you can highlight
any slice of time

00:03:55.080 --> 00:03:58.710
and inspect all network calls
made, including actual HTTP

00:03:58.710 --> 00:04:00.990
request and response
data and the call

00:04:00.990 --> 00:04:02.970
stack where the call happened.

00:04:02.970 --> 00:04:05.820
We even show previews for
images and enable syntax

00:04:05.820 --> 00:04:08.130
highlighting for XML and JSON.

00:04:08.130 --> 00:04:10.870
If you've ever used anything
like Chrome's DevTools Network

00:04:10.870 --> 00:04:13.540
tab, this view should
look very familiar.

00:04:13.540 --> 00:04:16.740
It's great for debugging your
app's HTTP server interactions

00:04:16.740 --> 00:04:18.019
and data consumption.

00:04:18.019 --> 00:04:20.370
The HTTP call
inspection is currently

00:04:20.370 --> 00:04:23.220
enabled for the standard
HttpURLConnection

00:04:23.220 --> 00:04:27.060
class and the OkHttp
client but should also

00:04:27.060 --> 00:04:30.210
work with other libraries
built on top of these APIs.

00:04:30.210 --> 00:04:32.660
So that's it for the
three new Profilers.

00:04:32.660 --> 00:04:35.910
We are shipping the first
version in Android Studio 3.0

00:04:35.910 --> 00:04:38.370
and will be continuing
to add new features.

00:04:38.370 --> 00:04:40.740
I hope they'll prove useful
in debugging performance

00:04:40.740 --> 00:04:42.210
issues in your apps.

00:04:42.210 --> 00:04:44.280
And if there are any
features you'd like to see,

00:04:44.280 --> 00:04:46.200
let us know on
the issue tracker.

00:04:46.200 --> 00:04:47.760
Thanks for watching.

00:04:47.760 --> 00:04:51.110
[MUSIC PLAYING]

