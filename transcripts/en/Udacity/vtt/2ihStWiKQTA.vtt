WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
Given what we have build up so far, we can actually use the pieces to build a heap from scratch.

00:00:07.000 --> 00:00:11.000
We have the heap structure.

00:00:11.000 --> 00:00:15.000
In this case, with seven nodes and we filled them in with this random two digit numbers

00:00:15.000 --> 00:00:18.000
and it's not heap at the moment, but we can make the heap property be satisfied

00:00:18.000 --> 00:00:20.000
and this the way we're going to do it.

00:00:20.000 --> 00:00:25.000
We're going to start of at the root, which is node zero and we're going to say,

00:00:25.000 --> 00:00:30.000
okay, well, to make this into a heap, well first magically make this into a heap

00:00:30.000 --> 00:00:32.000
and make this into a heap and once we're done

00:00:32.000 --> 00:00:36.000
then we could do down heapify on this value and everything will be fine.

00:00:36.000 --> 00:00:40.000
Alright. How do we build a heap out of this smaller piece? Well, we can do it again recursively.

00:00:40.000 --> 00:00:44.000
We can say to build a heap, rooted at this node, make this new heap,

00:00:44.000 --> 00:00:48.000
make this new heap and then down heapify.

00:00:48.000 --> 00:00:52.000
Well, how do we do this guys? Well the single two nodes are already heaps.

00:00:52.000 --> 00:00:57.000
Any leaf, anything that is a leaf already were done. That's our termination condition.

00:00:57.000 --> 00:01:04.000
This is a heap. We'll check them off as we go. This is a heap. This is a heap. This is a heap.

00:01:04.000 --> 00:01:09.000
Alright so, now to make this whole thing a heap, we need to do our little swap thing.

00:01:09.000 --> 00:01:13.000
So 88 gets swap, this is down heapify 88 gets swap with 30

00:01:13.000 --> 00:01:15.000
because 30 is the smaller of the children

00:01:15.000 --> 00:01:18.000
and now that down heapify is completed this whole thing is a heap.

00:01:18.000 --> 00:01:23.000
We need to do this subtree, again same trick. This guys are already heaps.

00:01:23.000 --> 00:01:28.000
To make this into a heap, we have to swap it with the smaller of the children 13.

00:01:28.000 --> 00:01:33.000
Now down heapify finish so this is a heap and now we've just got the last little step

00:01:33.000 --> 00:01:39.000
to make the whole structure here into a heap, we need to do down heapify on the root node.

00:01:39.000 --> 00:01:45.000
Which means swapping it with the smallest of the children that's the 13 and continuing recursively

00:01:45.000 --> 00:01:49.000
because that's what down heapify does, swapping it with the smallest

00:01:49.000 --> 00:01:51.000
until we reach the bottom and that's done.

00:01:51.000 --> 00:01:55.000
The whole thing is a heap. We made a heap. Woohoo! Perhaps even cooler.

00:01:55.000 --> 00:02:00.000
The running time is quite nice. The time it takes to build a heap out of an elements.

00:02:00.000 --> 00:02:07.000
Well, we build two heaps of size n/2 then there's a log in step to down heapify

00:02:07.000 --> 00:02:11.000
and this is a slightly hard piece to analyze.

00:02:11.000 --> 00:02:15.000
It's not so hard to figure out that we're essentially running down heapify

00:02:15.000 --> 00:02:20.000
which is a log in operation on each of the node sort as a root.

00:02:20.000 --> 00:02:24.000
We know that it's actually big O (n log n)

00:02:24.000 --> 00:02:32.000
and there's a tighter analysis, which I'm not going to give that actually shows that this T(n) is Î˜(n).

00:02:32.000 --> 00:02:36.000
We could actually establish the heap property through out the tree on n nodes

00:02:36.000 --> 99:59:59.000
in the near time, that's pretty cool.

