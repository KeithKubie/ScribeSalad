WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.410
[MUSIC PLAYING]

00:00:07.565 --> 00:00:08.690
ARTUR TSURKAN: Hi everyone.

00:00:08.690 --> 00:00:09.850
My name is Artur.

00:00:09.850 --> 00:00:12.539
I am a product
manager on Android.

00:00:12.539 --> 00:00:13.830
ARUN VENKATESAN: Hi, everybody.

00:00:13.830 --> 00:00:14.600
My name is Arun.

00:00:14.600 --> 00:00:16.102
I'm in dev relations.

00:00:16.102 --> 00:00:17.810
ARTUR TSURKAN: And
we're here to tell you

00:00:17.810 --> 00:00:19.845
a little bit about
Android Slices--

00:00:19.845 --> 00:00:24.082
a new API introduced
as part of Android Pie.

00:00:24.082 --> 00:00:25.790
So there's going to
be a couple of things

00:00:25.790 --> 00:00:27.300
that we're going to cover today.

00:00:27.300 --> 00:00:30.230
The first is an introduction--
or we can say a reintroduction

00:00:30.230 --> 00:00:33.590
to Android Slices, some user
experience best practices

00:00:33.590 --> 00:00:35.690
in constructing
your Slices, also

00:00:35.690 --> 00:00:39.000
some more details on search
indexing best practices.

00:00:39.000 --> 00:00:40.709
And finally, through
the EAP that we've

00:00:40.709 --> 00:00:42.500
been running over the
course of the summer,

00:00:42.500 --> 00:00:44.810
we've compiled a list of
important developer gotchas

00:00:44.810 --> 00:00:47.840
for you to keep in mind for when
you start building Slices when

00:00:47.840 --> 00:00:49.835
they become available.

00:00:49.835 --> 00:00:53.220
So let's start by
reintroducing Slices.

00:00:53.220 --> 00:00:54.780
Before we get into
it, I just want

00:00:54.780 --> 00:00:56.370
to remind you of
some resources that

00:00:56.370 --> 00:00:58.560
are already available for
you to start looking at.

00:00:58.560 --> 00:01:01.770
We introduced Android Slices
at this year's Google I/O.

00:01:01.770 --> 00:01:03.900
And so you can find more
documentation details

00:01:03.900 --> 00:01:06.180
at g.co/Slices.

00:01:06.180 --> 00:01:09.120
As well, you can also
look up our I/O session

00:01:09.120 --> 00:01:10.830
video Android Slices--

00:01:10.830 --> 00:01:13.380
Building Interactive
Results for Google Search.

00:01:13.380 --> 00:01:15.180
And that'll give you
a lot of information

00:01:15.180 --> 00:01:18.660
on constructing Slices,
building a custom template,

00:01:18.660 --> 00:01:21.390
and building your
UI for your Slice.

00:01:21.390 --> 00:01:24.300
But as a quick
refresher for today,

00:01:24.300 --> 00:01:27.450
Slices are a new way
for you to present

00:01:27.450 --> 00:01:30.570
remote app content in Android.

00:01:30.570 --> 00:01:33.490
Think of Slices as
embeddable apps snippets,

00:01:33.490 --> 00:01:35.940
which can be easily
inserted inside another app

00:01:35.940 --> 00:01:38.130
or as part of the system.

00:01:38.130 --> 00:01:41.420
Slices are meant to work across
multiple possible surfaces,

00:01:41.420 --> 00:01:43.260
and the whole idea
of Slice is to be

00:01:43.260 --> 00:01:45.540
able to constrain
but still provide you

00:01:45.540 --> 00:01:48.030
with a lot of power in
how you express your app

00:01:48.030 --> 00:01:50.402
across multiple contexts.

00:01:50.402 --> 00:01:52.910
Slices can contain a variety
of different components

00:01:52.910 --> 00:01:55.490
that you provide,
including text and images.

00:01:55.490 --> 00:01:56.910
But they're also very powerful.

00:01:56.910 --> 00:01:58.659
They're not just static
pieces of content.

00:01:58.659 --> 00:02:02.580
They can house real-time
data, interactive controls,

00:02:02.580 --> 00:02:05.870
and also talk back to your
app on user interaction.

00:02:05.870 --> 00:02:08.300
And so all of these different
examples that you see here

00:02:08.300 --> 00:02:11.344
are examples of Slices
that you can build.

00:02:11.344 --> 00:02:13.500
I mentioned that
Slices can be embedded

00:02:13.500 --> 00:02:15.326
across a multiple
number of contexts.

00:02:15.326 --> 00:02:16.950
And we're really
excited to be bringing

00:02:16.950 --> 00:02:19.950
Slices to Search as the
first surface for you

00:02:19.950 --> 00:02:21.810
to insert your Slices.

00:02:21.810 --> 00:02:25.920
So as users are typing their
query in Search on Android,

00:02:25.920 --> 00:02:28.650
you'll be able to enhance the
predictions offered by Google

00:02:28.650 --> 00:02:31.860
with live, personal content
from your apps constructed

00:02:31.860 --> 00:02:33.692
through the Slices you create.

00:02:33.692 --> 00:02:35.400
There are two types
of Slices that you'll

00:02:35.400 --> 00:02:37.980
be able to provide in
search predictions.

00:02:37.980 --> 00:02:39.995
The first are for
app name queries.

00:02:39.995 --> 00:02:41.620
So if someone's
searching for your app,

00:02:41.620 --> 00:02:45.700
you can accelerate them to a
canonical part in your app.

00:02:45.700 --> 00:02:47.580
So for example,
for YouTube, maybe

00:02:47.580 --> 00:02:50.280
the desired goal is to help
users get back to the video

00:02:50.280 --> 00:02:51.960
that they were just watching.

00:02:51.960 --> 00:02:55.740
Another use case is for
any kind of general term

00:02:55.740 --> 00:02:57.100
beyond your app name.

00:02:57.100 --> 00:02:58.740
And so in this
instance, users can

00:02:58.740 --> 00:03:01.500
be typing for mobile
data or data usage,

00:03:01.500 --> 00:03:03.780
and the Settings app will
present them with toggles

00:03:03.780 --> 00:03:08.630
to toggle their settings
regarding data usage.

00:03:08.630 --> 00:03:10.130
So how do we build these Slices?

00:03:10.130 --> 00:03:13.476
Well, let's start with default
Slices or app name Slices.

00:03:13.476 --> 00:03:16.490
It's actually very easy to
build an app name Slice.

00:03:16.490 --> 00:03:19.400
First, you just construct a
Slice as you normally would.

00:03:19.400 --> 00:03:21.230
Android Studio's
recent updates include

00:03:21.230 --> 00:03:22.940
tooling to get you started.

00:03:22.940 --> 00:03:25.460
And what will happen when
you create a Slice is you'll

00:03:25.460 --> 00:03:28.550
generate a definition in your
manifest, like this one, as

00:03:28.550 --> 00:03:31.190
well as an extension to
the Slice provider class.

00:03:31.190 --> 00:03:33.950
And that'll provide details
of how the system can

00:03:33.950 --> 00:03:36.740
find your Slice and what kind of
template to offer to the system

00:03:36.740 --> 00:03:38.840
when it does.

00:03:38.840 --> 00:03:41.910
To make this Slice
map to your activity--

00:03:41.910 --> 00:03:44.110
or to make this Slice
map to your app name,

00:03:44.110 --> 00:03:45.940
you have to add
the Slice content

00:03:45.940 --> 00:03:48.430
URI to your main
activity and make

00:03:48.430 --> 00:03:51.400
sure to specify this in the
metadata field, as pictured

00:03:51.400 --> 00:03:52.100
here.

00:03:52.100 --> 00:03:55.300
So this tells the system, hey,
this is a Slice that I want

00:03:55.300 --> 00:03:56.770
to point to this main activity.

00:03:56.770 --> 00:03:58.960
And here is the
content URI from which

00:03:58.960 --> 00:04:02.650
you can reference that Slice.

00:04:02.650 --> 00:04:04.950
The implementation
details for general terms

00:04:04.950 --> 00:04:07.125
are a little bit different.

00:04:07.125 --> 00:04:10.380
So first, you actually don't
provide the same linking

00:04:10.380 --> 00:04:14.314
in an activity as you would
for an app name Slice.

00:04:14.314 --> 00:04:18.040
Instead, you're going to use
updates to the Firebase App

00:04:18.040 --> 00:04:21.370
Indexing APIs to
expose your content URI

00:04:21.370 --> 00:04:23.810
for a specific set of keywords.

00:04:23.810 --> 00:04:26.560
So using the Firebase
App Indexing APIs,

00:04:26.560 --> 00:04:29.320
you will construct an indexable
as you normally would,

00:04:29.320 --> 00:04:31.900
that will have
maybe a public URL.

00:04:31.900 --> 00:04:34.990
It will also have the name
for that indexable content,

00:04:34.990 --> 00:04:37.000
some very targeted
keywords for users

00:04:37.000 --> 00:04:40.210
to find that content,
a description.

00:04:40.210 --> 00:04:43.210
And then finally, with the
update to the Firebase App

00:04:43.210 --> 00:04:46.720
Indexing APIs, you will be
able to add your content URI--

00:04:46.720 --> 00:04:49.390
your Slice URI for
this indexable.

00:04:49.390 --> 00:04:51.790
And so when the user is
searching for the keywords

00:04:51.790 --> 00:04:54.460
that you specified,
Search on Android

00:04:54.460 --> 00:04:57.460
will replace that prediction
with the Slice specified

00:04:57.460 --> 00:05:01.840
by the content URI
in this indexable.

00:05:01.840 --> 00:05:04.740
Finally, in order
for indexables to be

00:05:04.740 --> 00:05:08.070
translated from their public
URLs to their content URLs--

00:05:08.070 --> 00:05:09.182
content URIs, excuse me--

00:05:09.182 --> 00:05:11.640
you'll need to override the
[? on ?] [? map ?] [? intent ?]

00:05:11.640 --> 00:05:14.130
to a URI method in
your Slice provider.

00:05:14.130 --> 00:05:16.920
And this just lets you talk
between these two formats

00:05:16.920 --> 00:05:18.660
in order for your
content URIs to be

00:05:18.660 --> 00:05:21.510
visible as a search prediction.

00:05:21.510 --> 00:05:23.190
Overriding this
method also allows

00:05:23.190 --> 00:05:25.530
us to provide you, the
developer, with the flexibility

00:05:25.530 --> 00:05:27.210
to define whatever
URI schemas are

00:05:27.210 --> 00:05:29.580
most important to you
without necessarily attaching

00:05:29.580 --> 00:05:32.650
them one-to-one.

00:05:32.650 --> 00:05:33.530
Great.

00:05:33.530 --> 00:05:35.390
So now we know how
to build a Slice

00:05:35.390 --> 00:05:37.936
and also how to expose
it to Search on Android.

00:05:37.936 --> 00:05:39.560
Let's go into a little
bit more details

00:05:39.560 --> 00:05:41.300
on what makes a
good Slice and what

00:05:41.300 --> 00:05:45.380
are some user experience best
practices to keep in mind.

00:05:45.380 --> 00:05:50.170
So the first is try to focus
your Slice on one task or a set

00:05:50.170 --> 00:05:53.020
of tightly related tasks.

00:05:53.020 --> 00:05:55.720
Avoid making your Slice
do too many things,

00:05:55.720 --> 00:05:58.120
and make sure that
content in the Slice

00:05:58.120 --> 00:06:00.610
is coherent regardless
of where it's embedded.

00:06:00.610 --> 00:06:03.040
So keep in mind that
though Slices are currently

00:06:03.040 --> 00:06:05.630
embeddable as a search
prediction for now,

00:06:05.630 --> 00:06:07.690
we'd like to think that
the Slices that you build

00:06:07.690 --> 00:06:10.240
should be reusable in many other
parts of the operating system.

00:06:10.240 --> 00:06:12.323
And you should consider,
when building your Slice,

00:06:12.323 --> 00:06:13.846
for those possibilities.

00:06:13.846 --> 00:06:15.220
So the example on
the left really

00:06:15.220 --> 00:06:18.010
tries to focus a Slice on being
able to consume and preview

00:06:18.010 --> 00:06:18.969
one video.

00:06:18.969 --> 00:06:21.010
The Slice on the right
tries to now generalize it

00:06:21.010 --> 00:06:22.570
to a couple of
other functionality,

00:06:22.570 --> 00:06:25.120
like channel selection, and
so forth, and really stretches

00:06:25.120 --> 00:06:27.040
the definition and
use of a Slice, which

00:06:27.040 --> 00:06:30.120
we discourage you doing.

00:06:30.120 --> 00:06:32.700
Try to keep interaction
with a Slice lightweight.

00:06:32.700 --> 00:06:35.250
Highlight only the most
important fixtures--

00:06:35.250 --> 00:06:36.690
features, excuse me.

00:06:36.690 --> 00:06:38.700
And make sure that the
actions that you're

00:06:38.700 --> 00:06:41.550
presenting to the user are using
clear and familiar iconography

00:06:41.550 --> 00:06:44.310
so they can understand what
these actions represent.

00:06:44.310 --> 00:06:46.680
Avoid making your Slice
do too many things

00:06:46.680 --> 00:06:48.490
in terms of the
actions that you have.

00:06:48.490 --> 00:06:49.950
And so the Slice
on the left mainly

00:06:49.950 --> 00:06:52.800
focuses on users just listening
to the content of playlists,

00:06:52.800 --> 00:06:54.540
and maybe also offers
some the ability

00:06:54.540 --> 00:06:56.304
to like certain
[? comment. ?] The Slice

00:06:56.304 --> 00:06:57.720
on the right starts
really leaning

00:06:57.720 --> 00:07:00.120
into all the different items you
can do with all those playlist

00:07:00.120 --> 00:07:00.690
items.

00:07:00.690 --> 00:07:02.164
And that's probably
functionality

00:07:02.164 --> 00:07:04.080
that's best served to
be done within your app.

00:07:06.720 --> 00:07:09.560
When sharing your Slices
to different platforms,

00:07:09.560 --> 00:07:11.660
make sure you're surfacing
recognizable features

00:07:11.660 --> 00:07:13.760
and content so that
users know that they're

00:07:13.760 --> 00:07:15.000
able to query for them.

00:07:15.000 --> 00:07:18.500
And when they do query for them
and see it as a prediction,

00:07:18.500 --> 00:07:20.420
they can understand how
it might have appeared

00:07:20.420 --> 00:07:21.810
for that particular query.

00:07:21.810 --> 00:07:24.170
Arun is going to go into a
lot more detail as to what

00:07:24.170 --> 00:07:26.630
those different cases are,
but as a general principle,

00:07:26.630 --> 00:07:29.270
try to keep that
the case, and avoid

00:07:29.270 --> 00:07:33.458
promotional or advertising
content in your Slice.

00:07:33.458 --> 00:07:36.230
And finally, have
your Slice focus

00:07:36.230 --> 00:07:38.560
on accelerating
critical user journeys,

00:07:38.560 --> 00:07:41.290
and try to make sure that the
Slice helps the user accomplish

00:07:41.290 --> 00:07:44.120
as much of that journey inline
as possible without having

00:07:44.120 --> 00:07:46.580
to go into your app,
by providing all

00:07:46.580 --> 00:07:48.980
of the necessary information
and necessary actions

00:07:48.980 --> 00:07:51.230
that the user would need
to accomplish that action.

00:07:51.230 --> 00:07:53.420
And so you can see
consistently with all the cases

00:07:53.420 --> 00:07:55.700
on the left, what's
happening is the user

00:07:55.700 --> 00:07:58.640
has all the stuff that they
need to know to understand what

00:07:58.640 --> 00:08:01.352
the Slice is for, what kind of
information it's representing,

00:08:01.352 --> 00:08:03.560
what kind of actions I can
do with that information--

00:08:03.560 --> 00:08:05.750
like changing the song,
adjusting the temperature,

00:08:05.750 --> 00:08:08.083
or adjusting the brightness--
and they don't necessarily

00:08:08.083 --> 00:08:09.950
need to click into
the app to do that.

00:08:09.950 --> 00:08:12.020
The Slices on the
right are missing

00:08:12.020 --> 00:08:13.760
some critical pieces
of information,

00:08:13.760 --> 00:08:16.650
or some critical component
as part of that user journey

00:08:16.650 --> 00:08:18.379
and requires users
to basically--

00:08:18.379 --> 00:08:20.420
it adds an additional
point of friction for users

00:08:20.420 --> 00:08:23.930
to complete the task that
they want to complete.

00:08:23.930 --> 00:08:26.650
So that was a lot of information
on how to generally build

00:08:26.650 --> 00:08:27.306
great Slices.

00:08:27.306 --> 00:08:29.680
There's going to be a lot of
critical advice for building

00:08:29.680 --> 00:08:32.180
great Slices for Search that
Arun is going to go into.

00:08:32.180 --> 00:08:35.489
ARUN VENKATESAN: Thanks, Artur.

00:08:35.489 --> 00:08:38.049
So here are some of the main
buckets when you think about

00:08:38.049 --> 00:08:40.480
use cases for building Slices.

00:08:40.480 --> 00:08:43.039
Use cases should be
familiar and hyperrelevant,

00:08:43.039 --> 00:08:46.380
such as requesting a ride
on a ride sharing app.

00:08:46.380 --> 00:08:49.480
Use cases should be targeted,
rather than surfacing

00:08:49.480 --> 00:08:51.380
all content in your app.

00:08:51.380 --> 00:08:55.690
And finally, build Slices
to recall and re-engage

00:08:55.690 --> 00:08:58.870
with content that the user's
already previously seen,

00:08:58.870 --> 00:09:01.870
rather than just
discovery-oriented use cases.

00:09:01.870 --> 00:09:03.430
Next, we'll see
some more guidelines

00:09:03.430 --> 00:09:05.080
around the type of
content that you

00:09:05.080 --> 00:09:08.440
could surface in Slices and the
data that needs to be indexed.

00:09:11.040 --> 00:09:14.170
Slices should be targeted
and personalized.

00:09:14.170 --> 00:09:16.560
Consider the example
of a video streaming

00:09:16.560 --> 00:09:20.580
app that shows Slices when a
movie that a user is searching

00:09:20.580 --> 00:09:24.215
for is available in their app.

00:09:24.215 --> 00:09:27.650
The app could index movies
liked by the users previously,

00:09:27.650 --> 00:09:31.980
or just movies curated based
on users' in-app behavior.

00:09:31.980 --> 00:09:36.040
Do not create an index license
for all movies in you database,

00:09:36.040 --> 00:09:37.750
or even just the top 200 movies.

00:09:40.654 --> 00:09:43.180
Slices should give users
meaningful controls

00:09:43.180 --> 00:09:45.520
or information.

00:09:45.520 --> 00:09:47.820
As an example, a
ride sharing app

00:09:47.820 --> 00:09:51.630
is building Slices so that users
can request rides to places

00:09:51.630 --> 00:09:54.440
that they're searching for.

00:09:54.440 --> 00:09:58.200
In this case, create an index
Slices for ride requests

00:09:58.200 --> 00:10:01.290
based on users' past
history, or just ride request

00:10:01.290 --> 00:10:03.760
to current popular
places near the user,

00:10:03.760 --> 00:10:07.080
such as concert venues.

00:10:07.080 --> 00:10:09.970
Avoid creating and
indexing Slices for as many

00:10:09.970 --> 00:10:12.350
places as possible in the
user's geographic area.

00:10:15.230 --> 00:10:19.510
Slices should give users
timely information.

00:10:19.510 --> 00:10:21.960
Let's say that a smart
home map is building Slices

00:10:21.960 --> 00:10:26.435
so that users can control
lights in their home.

00:10:26.435 --> 00:10:29.420
The app could serve as
a light control Slice

00:10:29.420 --> 00:10:32.681
when the user's
likely in their home.

00:10:32.681 --> 00:10:35.220
It's not recommended to
create and index Slices

00:10:35.220 --> 00:10:39.880
for controlling lights at
any time or in any place.

00:10:39.880 --> 00:10:43.010
Here are some more examples
of the type of app content

00:10:43.010 --> 00:10:47.240
to index and display in a Slice.

00:10:47.240 --> 00:10:49.120
A food ordering app
can easily fetch

00:10:49.120 --> 00:10:52.350
development, real-time data,
such as food price, when

00:10:52.350 --> 00:10:56.070
the user refreshes the Slice.

00:10:56.070 --> 00:10:59.600
Similarly, a news app Slice
can index and display morning

00:10:59.600 --> 00:11:00.710
digest to their readers.

00:11:03.255 --> 00:11:05.340
Travel and local app
Slices can enable

00:11:05.340 --> 00:11:08.130
users to view their personal
content, such as bookings

00:11:08.130 --> 00:11:12.520
and upcoming hotel and
flight reservations.

00:11:12.520 --> 00:11:15.724
Let's now see how to
keep your Slices fresh.

00:11:15.724 --> 00:11:19.700
When a Slice is indexed,
the indexable object created

00:11:19.700 --> 00:11:22.160
includes both the Slice
metadata as well as

00:11:22.160 --> 00:11:24.510
a cached snapshot of the Slice.

00:11:24.510 --> 00:11:27.080
And in order to ensure that
the Slice that you provide

00:11:27.080 --> 00:11:30.500
to search [INAUDIBLE] complete
is always accurate and is not

00:11:30.500 --> 00:11:33.850
stale, you should set a
time to live in your Slice

00:11:33.850 --> 00:11:36.170
This time to live field as
used by the Google search

00:11:36.170 --> 00:11:40.468
app to ensure that stale
caches are not displayed.

00:11:40.468 --> 00:11:42.780
In this code example
here, the time

00:11:42.780 --> 00:11:46.350
to live for the weather Slice
is set to one hour expiration.

00:11:46.350 --> 00:11:48.090
And of course, if
your Slice has content

00:11:48.090 --> 00:11:51.972
that is not time sensitive, just
use a time to live of infinity.

00:11:54.570 --> 00:11:57.220
In order to present
fresh data to the user,

00:11:57.220 --> 00:12:00.240
also periodically re-index
your Slices in the background

00:12:00.240 --> 00:12:03.840
when content changes, and
only when content changes.

00:12:03.840 --> 00:12:06.420
Do not re-index more
than once per day

00:12:06.420 --> 00:12:07.620
to avoid battery issues.

00:12:10.248 --> 00:12:13.170
Earlier, Artur showed us how to
set keywords for general terms

00:12:13.170 --> 00:12:15.854
Slices using the Firebase
App Indexing API.

00:12:15.854 --> 00:12:18.020
So what are some of the
best practices for keywords?

00:12:20.535 --> 00:12:23.890
Limit keywords to 10 per Slice.

00:12:23.890 --> 00:12:26.050
And account for
likely permutations--

00:12:26.050 --> 00:12:29.290
for example, music volume
instead of media volume.

00:12:29.290 --> 00:12:32.618
But don't account
for all misspellings.

00:12:32.618 --> 00:12:35.070
This is probably the most
important-- avoid keyword

00:12:35.070 --> 00:12:36.010
stuffing.

00:12:36.010 --> 00:12:39.820
So use the minimum
number needed per Slice.

00:12:39.820 --> 00:12:42.660
See, your app Slice will be
demoted in search rankings

00:12:42.660 --> 00:12:45.030
if you use too many
irrelevant keywords that users

00:12:45.030 --> 00:12:48.182
don't end up tapping on.

00:12:48.182 --> 00:12:51.096
So what determines if
your app Slice appears

00:12:51.096 --> 00:12:53.470
when the user searches for a
keyword in the Google Search

00:12:53.470 --> 00:12:53.970
app?

00:12:53.970 --> 00:12:56.770
This is the biggest question
we get from developers.

00:12:56.770 --> 00:12:59.520
The most important signal
is the number of times

00:12:59.520 --> 00:13:03.668
that the user uses
your app on the device.

00:13:03.668 --> 00:13:05.430
It's also important
that the user

00:13:05.430 --> 00:13:07.890
has viewed the content
previously and interacted

00:13:07.890 --> 00:13:09.390
with it.

00:13:09.390 --> 00:13:12.830
And finally, in order for us to
know that the user interacted

00:13:12.830 --> 00:13:15.560
with the content on your
Slice, log user actions

00:13:15.560 --> 00:13:16.970
through the App Indexing API.

00:13:19.790 --> 00:13:22.210
We'll conclude our
session today by sharing

00:13:22.210 --> 00:13:24.741
some of the lessons learned
from the Slices early access

00:13:24.741 --> 00:13:25.240
program.

00:13:27.770 --> 00:13:33.120
Content URI versus deep
link URLs can be confusing.

00:13:33.120 --> 00:13:36.590
As Artur mentioned, content
URIs are mentioned with a Slice

00:13:36.590 --> 00:13:40.250
and start with content://,
whereas deep link URIs are

00:13:40.250 --> 00:13:46.660
associated with an indexable
and start with http or https.

00:13:46.660 --> 00:13:48.760
Content URIs use
the package name,

00:13:48.760 --> 00:13:50.920
whereas deep link URLs
follow the website

00:13:50.920 --> 00:13:55.140
or the reverse of the package
name, as shown in the example.

00:13:55.140 --> 00:13:58.190
Finally, when you see a
content URI, think of a Slice.

00:14:02.020 --> 00:14:06.730
Keywords must be included in the
Slice title or subtitle, else,

00:14:06.730 --> 00:14:08.230
the Slice will not
be displayed when

00:14:08.230 --> 00:14:10.240
the user searches for keywords.

00:14:10.240 --> 00:14:13.240
This is done in order to
ensure that relevant content is

00:14:13.240 --> 00:14:18.710
displayed to the user when
they search for something.

00:14:18.710 --> 00:14:20.610
How do you handle location?

00:14:20.610 --> 00:14:23.490
Slices do not provide
location to apps

00:14:23.490 --> 00:14:25.650
and therefore use the
last cache location

00:14:25.650 --> 00:14:27.210
while displaying a Slice.

00:14:27.210 --> 00:14:31.030
Re index your keywords
based on the last location.

00:14:31.030 --> 00:14:33.150
However, also note
that indexables are not

00:14:33.150 --> 00:14:34.500
instantly updated.

00:14:34.500 --> 00:14:36.720
And frequent indexing may
lead to battery issues,

00:14:36.720 --> 00:14:38.260
as we mentioned before.

00:14:38.260 --> 00:14:39.900
So keep in mind
the best practices

00:14:39.900 --> 00:14:42.230
for handling location
changes for your app,

00:14:42.230 --> 00:14:44.010
and just apply them
to the Slices as well.

00:14:47.146 --> 00:14:50.810
It's recommended to keep the
Slice initialization short.

00:14:50.810 --> 00:14:52.640
The onCreateSliceProvider
method is

00:14:52.640 --> 00:14:55.040
called for all registered
Slice providers

00:14:55.040 --> 00:14:57.770
on the applications main
thread at launch time.

00:14:57.770 --> 00:15:00.230
And therefore, do not
perform lengthy operations,

00:15:00.230 --> 00:15:05.160
for the application
startup will be delayed.

00:15:05.160 --> 00:15:07.540
If you have multiple
indexables, as

00:15:07.540 --> 00:15:10.990
in the case of apps
with multiple Slices,

00:15:10.990 --> 00:15:12.550
pass in all the
indexables together,

00:15:12.550 --> 00:15:14.610
as we show in the code example.

00:15:14.610 --> 00:15:16.900
And also make sure to
test your indexables.

00:15:16.900 --> 00:15:21.010
If one indexable is invalid, the
entire update call will fail.

00:15:21.010 --> 00:15:25.880
So here is a small code
snippet that shows it--

00:15:25.880 --> 00:15:28.390
how to pass multiple indexables
to the Firebase App Indexing

00:15:28.390 --> 00:15:28.890
API.

00:15:31.810 --> 00:15:34.580
So now that you built your
Slice, how do you test it?

00:15:34.580 --> 00:15:37.730
Use the Slice viewer
debug APK to view

00:15:37.730 --> 00:15:41.620
how your Slice appears in UI.

00:15:41.620 --> 00:15:43.420
That's all we had for
the talk for today.

00:15:43.420 --> 00:15:44.795
We would like to
give a shout out

00:15:44.795 --> 00:15:47.680
to all developers in the
Slices early access program.

00:15:47.680 --> 00:15:50.200
Thanks for attending, and have
a fun rest of the session.

00:15:50.200 --> 00:15:52.000
[APPLAUSE]

00:15:52.000 --> 00:15:55.350
[MUSIC PLAYING]

