WEBVTT
Kind: captions
Language: en

00:00:06.150 --> 00:00:06.650
All right.

00:00:06.650 --> 00:00:07.395
That's my cue.

00:00:07.395 --> 00:00:08.270
What's up, everybody?

00:00:08.270 --> 00:00:09.050
Thanks for coming.

00:00:09.050 --> 00:00:10.540
[AUDIENCE CHEERS]

00:00:10.540 --> 00:00:12.540
Web Components!

00:00:12.540 --> 00:00:14.313
It's going to change
everything you know.

00:00:14.313 --> 00:00:15.680
Well, maybe just a few things.

00:00:15.680 --> 00:00:17.636
But the field is open.

00:00:17.636 --> 00:00:18.760
That's the web development.

00:00:18.760 --> 00:00:21.110
It's open to you, to
use Web Components.

00:00:21.110 --> 00:00:22.560
My name is Eric Bidelman.

00:00:22.560 --> 00:00:24.680
So let me turn my clicker on.

00:00:24.680 --> 00:00:26.040
My name is Eric Bidelman.

00:00:26.040 --> 00:00:27.715
I work on the Chrome team.

00:00:27.715 --> 00:00:29.590
Feel free to follow me
on Twitter or Google+.

00:00:29.590 --> 00:00:32.090
We probably won't have
time for questions.

00:00:32.090 --> 00:00:34.340
I've run this a number
of times, and I always

00:00:34.340 --> 00:00:36.560
end up at 45, exactly.

00:00:36.560 --> 00:00:38.070
But feel free to
shoot me questions

00:00:38.070 --> 00:00:40.111
there or ask me questions
at the end of the show.

00:00:40.111 --> 00:00:41.220
I'm happy to answer stuff.

00:00:41.220 --> 00:00:43.120
I've been focused on Web
Components for a couple years

00:00:43.120 --> 00:00:44.750
now, because I really do
think it's a fundamentally

00:00:44.750 --> 00:00:46.291
different way to
develop for the web.

00:00:46.291 --> 00:00:48.900
I think it's a really exciting
time to be a web developer.

00:00:48.900 --> 00:00:51.760
And so that's why I'm
here, talking to you today.

00:00:51.760 --> 00:00:54.310
In this presentation, I want
to focus on three areas.

00:00:54.310 --> 00:00:55.690
Let's keep it simple.

00:00:55.690 --> 00:00:57.215
The first is the
state of the union.

00:00:57.215 --> 00:00:59.500
A couple people asked about
browser vendor support,

00:00:59.500 --> 00:01:02.630
where the API is in flight,
as far as other browsers.

00:01:02.630 --> 00:01:05.110
I want to catch everyone up,
get us all in the same space,

00:01:05.110 --> 00:01:07.497
and kind of get you
thinking about what's

00:01:07.497 --> 00:01:08.580
happened in the past year.

00:01:08.580 --> 00:01:10.400
A lot has changed.

00:01:10.400 --> 00:01:12.590
Second, I want to talk
about what problems

00:01:12.590 --> 00:01:13.980
do Web Components
actually solve.

00:01:13.980 --> 00:01:16.400
Why am I up here barking at
you guys in the first place?

00:01:16.400 --> 00:01:18.350
Why are we adding all this
new stuff to the platform,

00:01:18.350 --> 00:01:20.400
if all these libraries and
everything else exists today?

00:01:20.400 --> 00:01:22.280
It turns out there's
actually a number of things

00:01:22.280 --> 00:01:23.863
that Web Components
really do address.

00:01:23.863 --> 00:01:26.181
That's why this stuff is
being baked into the browser.

00:01:26.181 --> 00:01:27.930
And the last thing, I
want to get everyone

00:01:27.930 --> 00:01:29.390
in the same mental space.

00:01:29.390 --> 00:01:30.932
We have to actually
think differently

00:01:30.932 --> 00:01:33.390
about how we build apps now,
in the world of Web Components

00:01:33.390 --> 00:01:33.990
and Polymer.

00:01:33.990 --> 00:01:35.600
So I want to get us
thinking in Web Components.

00:01:35.600 --> 00:01:37.865
What does it mean to design
an app, architect an app,

00:01:37.865 --> 00:01:40.010
and kind of conceptualize
what that means?

00:01:40.010 --> 00:01:41.510
So that's what we're
going to cover.

00:01:41.510 --> 00:01:43.400
But first, let's
tell a little story.

00:01:43.400 --> 00:01:47.270
So once upon a time, the web
platform looked like this.

00:01:47.270 --> 00:01:49.360
The web platform was
kind of a conglomerate

00:01:49.360 --> 00:01:51.490
of duct tape and
nails and strings,

00:01:51.490 --> 00:01:54.540
and we pieced in some CSS over
time, and maybe some JavaScript

00:01:54.540 --> 00:01:55.687
over time.

00:01:55.687 --> 00:01:57.020
But it was pretty infant, right?

00:01:57.020 --> 00:01:58.186
And it was pretty primitive.

00:01:58.186 --> 00:02:00.275
This is all we had at
our disposal, though.

00:02:00.275 --> 00:02:01.650
We couldn't build complex apps.

00:02:01.650 --> 00:02:03.150
You could drop in a form tag.

00:02:03.150 --> 00:02:03.270
Right?

00:02:03.270 --> 00:02:05.680
We could build-- that was the
app at the time, was forms.

00:02:05.680 --> 00:02:08.380
And over time, what happened is,
of course, yes, we got HTML5.

00:02:08.380 --> 00:02:09.710
This is going to cure cancer.

00:02:09.710 --> 00:02:11.700
It's going to solve all
the world's problems.

00:02:11.700 --> 00:02:12.920
And it certainly did, right?

00:02:12.920 --> 00:02:13.920
Well, it didn't do that.

00:02:13.920 --> 00:02:15.626
But it addressed
a number of things

00:02:15.626 --> 00:02:17.000
that we needed on
the web, right?

00:02:17.000 --> 00:02:20.150
Geolocation, local storage,
new semantic tags-- a lot

00:02:20.150 --> 00:02:22.520
of great stuff
came through HTML5.

00:02:22.520 --> 00:02:25.020
And over the years, we've just
kept building on that, right?

00:02:25.020 --> 00:02:27.010
We've kept adding to
the web platforms.

00:02:27.010 --> 00:02:29.650
We added media APIs, and
WebGL, and Web Audio,

00:02:29.650 --> 00:02:32.630
and all this cool stuff to
make the platform really viable

00:02:32.630 --> 00:02:35.330
and really awesome as
a development platform.

00:02:35.330 --> 00:02:37.510
But what about us
regular developers?

00:02:37.510 --> 00:02:38.660
What about myself?

00:02:38.660 --> 00:02:41.142
I write JavaScript, and
I write HTML every day.

00:02:41.142 --> 00:02:42.350
But I don't write WebGL code.

00:02:42.350 --> 00:02:44.530
I've never written
a shader in my life.

00:02:44.530 --> 00:02:47.170
What APIs are the browser
vendors adding on our behalf,

00:02:47.170 --> 00:02:49.425
to make us more productive?

00:02:49.425 --> 00:02:50.800
And so this is
where this journey

00:02:50.800 --> 00:02:52.830
started, now four years ago.

00:02:52.830 --> 00:02:55.640
If you go all the way
back in time to 2010,

00:02:55.640 --> 00:02:58.490
this is when the Web
Components journey started.

00:02:58.490 --> 00:03:02.790
So if you look at the first kind
of tinkering of Web Components,

00:03:02.790 --> 00:03:05.140
Dimitri Glazkov, who is one
of the sort of godfathers,

00:03:05.140 --> 00:03:07.472
the forefathers,
of Web Components,

00:03:07.472 --> 00:03:09.930
sent an email to the public
web apps mailing list and said,

00:03:09.930 --> 00:03:12.138
hey, you know, a few of us
have been tinkering around

00:03:12.138 --> 00:03:14.380
with ideas about things
we can add to the browser

00:03:14.380 --> 00:03:16.340
to make developers
more productive.

00:03:16.340 --> 00:03:18.580
So this is actually kind
of telling, at the time.

00:03:18.580 --> 00:03:20.510
They identified things
like templating, right?

00:03:20.510 --> 00:03:22.680
Every development platform
out there has templating.

00:03:22.680 --> 00:03:26.230
Why doesn't the browser have
native templating support?

00:03:26.230 --> 00:03:28.120
Shadow DOM-- being
able to abstract things

00:03:28.120 --> 00:03:30.950
and encapsulate them and kind
of bring the best practices

00:03:30.950 --> 00:03:32.900
of object-oriented
programming to the web--

00:03:32.900 --> 00:03:35.340
was identified four
years ago, now.

00:03:35.340 --> 00:03:36.550
And things like data binding.

00:03:36.550 --> 00:03:38.330
Now, we're not getting
data binding, properly,

00:03:38.330 --> 00:03:39.370
as part of Web Components.

00:03:39.370 --> 00:03:40.786
But this is something
that Polymer

00:03:40.786 --> 00:03:44.240
has built-in and iterated on
top of the Web Components APIs.

00:03:44.240 --> 00:03:47.030
So it's been a long journey.

00:03:47.030 --> 00:03:49.767
And so what they said, was, hey,
let's take our web platform.

00:03:49.767 --> 00:03:50.600
Let's strip it back.

00:03:50.600 --> 00:03:53.190
Let's identify the core
APIs, the core primitives

00:03:53.190 --> 00:03:55.520
that we need, in order to
make this really productive

00:03:55.520 --> 00:03:56.740
for developers.

00:03:56.740 --> 00:03:59.220
And this is where the different
specifications came from.

00:03:59.220 --> 00:04:00.720
So we have about
four specifications

00:04:00.720 --> 00:04:03.524
that make up Web Components
as an umbrella technology.

00:04:03.524 --> 00:04:05.690
The really cool thing about
all these different APIs

00:04:05.690 --> 00:04:07.523
are that they can be
used totally separately

00:04:07.523 --> 00:04:08.300
by themselves.

00:04:08.300 --> 00:04:09.720
But when you put
them together, it

00:04:09.720 --> 00:04:11.910
allows developers to tweak
and do really amazing things.

00:04:11.910 --> 00:04:13.040
And that's what Polymer's doing.

00:04:13.040 --> 00:04:14.980
It's having opinion, on
top of Web Components.

00:04:14.980 --> 00:04:18.506
But the lowest level
is all standards-based.

00:04:18.506 --> 00:04:20.089
So last year, I gave
this presentation

00:04:20.089 --> 00:04:21.967
at I/O. It was
called The Tectonic

00:04:21.967 --> 00:04:23.050
Shift for Web Development.

00:04:23.050 --> 00:04:24.370
We're still shifting.

00:04:24.370 --> 00:04:25.340
The stuff is still new.

00:04:25.340 --> 00:04:27.240
But it's actually a
really exciting time.

00:04:27.240 --> 00:04:29.820
If you look back,
even just a year ago,

00:04:29.820 --> 00:04:33.390
a lot has changed since 2013,
when I gave that presentation.

00:04:33.390 --> 00:04:36.130
So I probably painted a
picture that said, hey,

00:04:36.130 --> 00:04:38.160
the native stuff is in
browsers everywhere.

00:04:38.160 --> 00:04:40.050
But it's actually
mainly just in Chrome,

00:04:40.050 --> 00:04:42.060
with a couple of APIs
in the nightly build.

00:04:42.060 --> 00:04:44.268
So you can see that's what
the partial support means,

00:04:44.268 --> 00:04:45.700
in those logos there.

00:04:45.700 --> 00:04:47.220
Firefox had landed templates.

00:04:47.220 --> 00:04:49.807
They're just starting to
implement custom elements.

00:04:49.807 --> 00:04:51.390
Of course, if you
flash forward today,

00:04:51.390 --> 00:04:53.040
this matrix is
completely different.

00:04:53.040 --> 00:04:54.490
It's completely lit up.

00:04:54.490 --> 00:04:56.710
This is a milestone in
web development, you guys.

00:04:56.710 --> 00:04:58.730
Chrome 36 is the
first browser to have

00:04:58.730 --> 00:05:01.150
all the native APIs
for Web Components.

00:05:01.150 --> 00:05:04.020
Opera gets all this stuff
natively because of their use

00:05:04.020 --> 00:05:04.570
of Blink.

00:05:04.570 --> 00:05:07.090
So that's two browsers
with all this stuff.

00:05:07.090 --> 00:05:09.560
Firefox has got templates
and custom elements now,

00:05:09.560 --> 00:05:11.720
and the other partial
support for the other APIs

00:05:11.720 --> 00:05:12.610
is in their nightly builds.

00:05:12.610 --> 00:05:14.443
You can flip that on
with the developer flag

00:05:14.443 --> 00:05:15.560
and try that stuff.

00:05:15.560 --> 00:05:18.180
Of course, the other
ones, we don't know.

00:05:18.180 --> 00:05:20.390
But with the
polyfills of Polymer

00:05:20.390 --> 00:05:23.270
that the Polymer team is
kind of building over time,

00:05:23.270 --> 00:05:25.520
you get all the support
in all modern browsers,

00:05:25.520 --> 00:05:26.460
for all of the APIs.

00:05:31.030 --> 00:05:33.690
So as I said, if you want to
follow the progress of Firefox,

00:05:33.690 --> 00:05:36.106
they have a master bug for all
the APIs you can check out.

00:05:36.106 --> 00:05:39.350
They're heads-down
implementing all this stuff.

00:05:39.350 --> 00:05:42.410
Apple decided to
remove Shadow DOM.

00:05:42.410 --> 00:05:45.060
Some of you may have seen
this come up on Hacker News.

00:05:45.060 --> 00:05:48.180
And I just want to point out,
this was on Valentine's Day.

00:05:48.180 --> 00:05:49.250
They broke our heart.

00:05:49.250 --> 00:05:51.250
But they said, no, that
was kind of just a joke.

00:05:51.250 --> 00:05:53.083
We're actually experimenting
with this stuff

00:05:53.083 --> 00:05:54.400
in a branch of WebKit.

00:05:54.400 --> 00:05:55.470
And so what happened
was they didn't

00:05:55.470 --> 00:05:56.886
have a maintainer
for all the code

00:05:56.886 --> 00:05:59.570
base that happened due
to the WebKit Blink fork.

00:05:59.570 --> 00:06:00.945
And so then they
said, hey, we're

00:06:00.945 --> 00:06:03.130
actually checking this
stuff out, seriously.

00:06:03.130 --> 00:06:04.560
So we're adding stuff back.

00:06:04.560 --> 00:06:08.810
Of course, the one that
everyone asks me about is IE.

00:06:08.810 --> 00:06:10.450
And IE has hope, OK.

00:06:10.450 --> 00:06:12.620
So there's hope here.

00:06:12.620 --> 00:06:15.030
If you go to their Platform
Status page, all of the APIs

00:06:15.030 --> 00:06:16.232
are under consideration.

00:06:16.232 --> 00:06:17.580
So there's hope.

00:06:17.580 --> 00:06:18.570
There's promise here.

00:06:18.570 --> 00:06:20.040
But just between you and
me-- and I think Matt

00:06:20.040 --> 00:06:20.800
alluded to this
before-- we've had

00:06:20.800 --> 00:06:23.125
some really productive
conversations with them.

00:06:23.125 --> 00:06:24.750
And they're asking
the tough questions,

00:06:24.750 --> 00:06:26.749
which means they're taking
and seriously looking

00:06:26.749 --> 00:06:28.220
at this stuff.

00:06:28.220 --> 00:06:31.080
So that's the browser
landscape for the native stuff.

00:06:31.080 --> 00:06:32.252
The other thing that
happened in the past year

00:06:32.252 --> 00:06:33.168
is people built stuff.

00:06:33.168 --> 00:06:35.330
Developers got excited
about Web Components,

00:06:35.330 --> 00:06:36.874
and so they built stuff.

00:06:36.874 --> 00:06:38.290
On the Polymer
team, we said, hey,

00:06:38.290 --> 00:06:39.790
we might as well
dog-food what we're

00:06:39.790 --> 00:06:41.730
building, what we're
really preaching here.

00:06:41.730 --> 00:06:42.450
Let's build some stuff.

00:06:42.450 --> 00:06:44.824
So we built the Polymer site,
to use Polymer's components

00:06:44.824 --> 00:06:46.850
and to use Web Components.

00:06:46.850 --> 00:06:49.590
I built chromestatus.com,
which the Blink team uses

00:06:49.590 --> 00:06:52.000
to sort of maintain
the features in Chrome

00:06:52.000 --> 00:06:55.190
and for developers to see what's
on the landscape of Chrome.

00:06:55.190 --> 00:06:57.790
These are really good
examples of just using

00:06:57.790 --> 00:06:59.900
small chunks, small
components, and putting them

00:06:59.900 --> 00:07:01.140
on a larger site.

00:07:01.140 --> 00:07:02.895
Chrome Status is a
database-driven website

00:07:02.895 --> 00:07:04.853
that has a component that
talks to the database

00:07:04.853 --> 00:07:05.850
and gets the JSON feed.

00:07:05.850 --> 00:07:08.016
It renders the versions of
Chrome on the side there.

00:07:08.016 --> 00:07:11.840
That's a Component,
responsible for that.

00:07:11.840 --> 00:07:13.990
Another thing that happened,
we got wind of early,

00:07:13.990 --> 00:07:15.590
a couple weeks ago,
was the WinJS team

00:07:15.590 --> 00:07:18.060
started to experiment with
moving some of their controls

00:07:18.060 --> 00:07:20.940
and testing some of the WinJS
components as Web Components.

00:07:20.940 --> 00:07:22.040
This is really exciting.

00:07:22.040 --> 00:07:24.081
And they were starting to
use Polymer to do this.

00:07:24.081 --> 00:07:27.240
So if you want to check that
out, that's up on GitHub.

00:07:27.240 --> 00:07:29.660
GitHub, in production,
launched custom elements.

00:07:29.660 --> 00:07:30.430
This is so cool.

00:07:30.430 --> 00:07:31.730
I use GitHub every day.

00:07:31.730 --> 00:07:34.420
And I saw this, and I got really
excited, giddy in my pants,

00:07:34.420 --> 00:07:35.510
actually.

00:07:35.510 --> 00:07:38.500
The local-time tag is something
they're using on the site.

00:07:38.500 --> 00:07:40.530
So any time you see
a pre-printed date

00:07:40.530 --> 00:07:42.340
on a GitHub page,
that's a Web Component.

00:07:42.340 --> 00:07:42.839
Very cool.

00:07:42.839 --> 00:07:45.560
They're using Polymer's
polyfills for that.

00:07:45.560 --> 00:07:47.450
A little-known fact--
Chrome OS's keyboard,

00:07:47.450 --> 00:07:49.540
any time you fire that up,
that's a Web Component.

00:07:49.540 --> 00:07:51.910
That's implemented
using Polymer.

00:07:51.910 --> 00:07:53.390
And when you kick
back and listen

00:07:53.390 --> 00:07:56.350
to tunes or media in
Chrome OS, the media player

00:07:56.350 --> 00:07:57.590
is also a Web Component.

00:07:57.590 --> 00:07:58.960
It's also a Polymer element.

00:07:58.960 --> 00:08:00.076
Very cool stuff.

00:08:00.076 --> 00:08:01.700
You'll see some more
examples from Rob.

00:08:01.700 --> 00:08:03.825
And Matt showed you some
stuff that we built, also,

00:08:03.825 --> 00:08:04.809
in the Polymer team.

00:08:04.809 --> 00:08:05.850
So that's where we're at.

00:08:05.850 --> 00:08:07.891
That's the state of the
union for Web Components.

00:08:07.891 --> 00:08:11.450
I want to focus now on problems
Web Components actually solve.

00:08:11.450 --> 00:08:15.160
The grass is greener on the
other side of the field.

00:08:15.160 --> 00:08:16.930
So most people see
"BCE," and they say,

00:08:16.930 --> 00:08:18.970
"Before the Common Era."

00:08:18.970 --> 00:08:22.590
I actually say, "Before
Components Existed."

00:08:22.590 --> 00:08:24.530
So there's a time
before Web Components,

00:08:24.530 --> 00:08:26.655
in the world of web
development, and there's a time

00:08:26.655 --> 00:08:28.030
after Web Components.

00:08:28.030 --> 00:08:31.279
And now we're in this sort
of other spectrum here.

00:08:31.279 --> 00:08:33.820
And what I mean by this is that
we have to conceptually think

00:08:33.820 --> 00:08:36.039
how we build apps differently.

00:08:36.039 --> 00:08:38.330
So if you take an example
like the Polymer site, right?

00:08:38.330 --> 00:08:39.510
This is the Polymer site.

00:08:39.510 --> 00:08:40.429
It's using Components.

00:08:40.429 --> 00:08:44.580
But what we've chosen to do is
I stack this in different pieces

00:08:44.580 --> 00:08:46.020
that are logical.

00:08:46.020 --> 00:08:48.900
So for instance, the top
nav here, this app bar,

00:08:48.900 --> 00:08:51.240
is responsible for when
you click that search icon.

00:08:51.240 --> 00:08:54.280
It expands and it is responsible
for that functionality.

00:08:54.280 --> 00:08:56.280
The center content is
actually a Component, too.

00:08:56.280 --> 00:08:58.400
It's a scrolling Component,
that when you scroll the page,

00:08:58.400 --> 00:08:59.660
the headers kind of shrink down.

00:08:59.660 --> 00:09:01.390
And when you scroll
back, it grows again.

00:09:01.390 --> 00:09:02.510
So it adds its event listeners.

00:09:02.510 --> 00:09:03.540
It does all that stuff.

00:09:03.540 --> 00:09:05.810
It's all baked into
that Component.

00:09:05.810 --> 00:09:07.310
And of course, we
have the menu bar.

00:09:07.310 --> 00:09:08.810
The menu bar is a
Component that has

00:09:08.810 --> 00:09:10.290
sub Components
inside of it, right?

00:09:10.290 --> 00:09:13.590
So we can just reuse that on
different parts of the site.

00:09:13.590 --> 00:09:15.570
So it's about
compartmentalizing the problem,

00:09:15.570 --> 00:09:17.380
no longer thinking
of a site, or an app,

00:09:17.380 --> 00:09:19.670
just as a bunch of
JavaScript, a bunch of CSS,

00:09:19.670 --> 00:09:21.170
and a bunch of HTML,
just all hoping

00:09:21.170 --> 00:09:22.583
it'll kind of work together.

00:09:22.583 --> 00:09:24.941
There's a logical
separation now.

00:09:24.941 --> 00:09:27.190
So the first API of Web
Components is Custom Elements.

00:09:27.190 --> 00:09:31.490
And Custom Elements allows us
to define new HTML and DOM.

00:09:31.490 --> 00:09:33.760
And the problem that
it solves is this.

00:09:33.760 --> 00:09:35.135
So this is an
actual application.

00:09:35.135 --> 00:09:36.884
This is not just a
made-up example, right?

00:09:36.884 --> 00:09:38.670
This is Gmail, if you
fire up the DevTools

00:09:38.670 --> 00:09:41.930
and you look at the markup
that Gmail's constructed from.

00:09:41.930 --> 00:09:43.540
I call this div soup.

00:09:43.540 --> 00:09:44.915
There's just a bunch of divs.

00:09:44.915 --> 00:09:46.010
It's meaningless.

00:09:46.010 --> 00:09:47.635
I don't know what
it's actually saying.

00:09:47.635 --> 00:09:49.040
I can't read this
as a developer.

00:09:49.040 --> 00:09:52.137
And this application is not
descriptive, whatsoever.

00:09:52.137 --> 00:09:53.720
And that's no fault
to the developers.

00:09:53.720 --> 00:09:55.150
It's no fault to the Gmail team.

00:09:55.150 --> 00:09:58.040
It's basically that HTML
didn't keep up with the times.

00:09:58.040 --> 00:10:00.510
It didn't actually allow us
to build the complex apps

00:10:00.510 --> 00:10:01.660
that we needed to build.

00:10:01.660 --> 00:10:04.510
As the web evolved, as demand
of applications evolved,

00:10:04.510 --> 00:10:07.200
HTML got stuck in the
'90s markup, right?

00:10:07.200 --> 00:10:09.370
Divs.

00:10:09.370 --> 00:10:11.680
Even an example like
a tab strip, right?

00:10:11.680 --> 00:10:13.539
Let's take this, just
as a small Component.

00:10:13.539 --> 00:10:14.580
Let's create a tab strip.

00:10:14.580 --> 00:10:16.221
This is a really
common thing to do.

00:10:16.221 --> 00:10:18.470
If you look at that today--
or I should say yesterday,

00:10:18.470 --> 00:10:20.510
now that we have
Web Components--

00:10:20.510 --> 00:10:22.630
every single version
of every library,

00:10:22.630 --> 00:10:25.030
every UI framework out
there, does it differently.

00:10:25.030 --> 00:10:26.620
Some use a little bit of HTML.

00:10:26.620 --> 00:10:28.480
Some use HTML with JavaScript.

00:10:28.480 --> 00:10:31.940
And some just go the
entire JavaScript route.

00:10:31.940 --> 00:10:35.077
So it's not so much
HTML versus JavaScript.

00:10:35.077 --> 00:10:36.660
The point here that
I'm trying to make

00:10:36.660 --> 00:10:38.700
is that these are
all different, right?

00:10:38.700 --> 00:10:42.092
Everyone wants to create a tab
strip, but it's all different.

00:10:42.092 --> 00:10:43.050
And that's the problem.

00:10:43.050 --> 00:10:44.421
The APIs haven't existed.

00:10:44.421 --> 00:10:46.170
The Web Components
APIs haven't been there

00:10:46.170 --> 00:10:48.670
to make this a standard
way to create a tab strip.

00:10:48.670 --> 00:10:50.270
So as a developer,
you come into this.

00:10:50.270 --> 00:10:53.165
You have to learn somebody's new
API, calls, to use a tab strip,

00:10:53.165 --> 00:10:55.550
or put it on your page.

00:10:55.550 --> 00:10:57.010
And that's just no good.

00:10:57.010 --> 00:10:59.266
So this is where Custom
Elements come in.

00:10:59.266 --> 00:11:00.640
With Custom
Elements, we can just

00:11:00.640 --> 00:11:03.180
declaratively define
a new element.

00:11:03.180 --> 00:11:04.850
We'll create a
paper-tabs element.

00:11:04.850 --> 00:11:06.440
It's got a selected attribute.

00:11:06.440 --> 00:11:07.940
It's completely
declarative, and you

00:11:07.940 --> 00:11:10.160
know exactly what's going
on in this application.

00:11:10.160 --> 00:11:11.160
I can click this around.

00:11:11.160 --> 00:11:12.760
This is an example of one
of the material design

00:11:12.760 --> 00:11:13.810
elements we have.

00:11:13.810 --> 00:11:15.460
You see that property changing.

00:11:15.460 --> 00:11:19.020
And that element is firing the
event, the core-activate event.

00:11:19.020 --> 00:11:20.920
So we can use querySelector
with this thing.

00:11:20.920 --> 00:11:21.750
We can use addEventListener.

00:11:21.750 --> 00:11:23.190
The rest of the
platform comes along,

00:11:23.190 --> 00:11:24.565
because we're just
creating HTML.

00:11:24.565 --> 00:11:26.214
We're just creating DOM.

00:11:26.214 --> 00:11:26.880
It's meaningful.

00:11:26.880 --> 00:11:27.520
It's maintainable.

00:11:27.520 --> 00:11:28.395
I can read this code.

00:11:28.395 --> 00:11:29.820
I know what's going on.

00:11:29.820 --> 00:11:31.180
And the last thing that I
want to point out-- I'll

00:11:31.180 --> 00:11:33.638
talk to this in a few slides--
is that we have a common way

00:11:33.638 --> 00:11:36.180
now, with Custom Elements, to
extend other people's stuff.

00:11:36.180 --> 00:11:38.400
It's in a common
extension model.

00:11:38.400 --> 00:11:40.450
So we can extend
native HTML elements.

00:11:40.450 --> 00:11:43.072
You can say, I want this
div to be a super-div.

00:11:43.072 --> 00:11:45.530
Or you can say, I want to extend
somebody else's paper-tabs

00:11:45.530 --> 00:11:47.670
and create my own version.

00:11:47.670 --> 00:11:48.909
Very cool.

00:11:48.909 --> 00:11:50.492
So for these type
of slides, I'm going

00:11:50.492 --> 00:11:53.900
to show you sort of the vanilla
Web Component way to do things,

00:11:53.900 --> 00:11:55.680
the way Polymer
uses the technology,

00:11:55.680 --> 00:11:57.760
and what we do to
sugar it, and then

00:11:57.760 --> 00:12:00.899
the usage of the Web
Component at the bottom.

00:12:00.899 --> 00:12:01.940
So let's go through this.

00:12:01.940 --> 00:12:03.710
The way you use
Vanilla Custom Elements

00:12:03.710 --> 00:12:05.557
is just
document.registerElement.

00:12:05.557 --> 00:12:07.765
And the thing that you give
it is the name of the tag

00:12:07.765 --> 00:12:08.931
that you're going to create.

00:12:08.931 --> 00:12:11.364
So I'm going to create
the paper-tabs element.

00:12:11.364 --> 00:12:12.780
Now, in Polymer,
what we said was,

00:12:12.780 --> 00:12:14.730
hey, we really think
declarative is awesome.

00:12:14.730 --> 00:12:15.660
It's very powerful.

00:12:15.660 --> 00:12:17.390
It's very easy.

00:12:17.390 --> 00:12:19.370
So we created a polymer-element.

00:12:19.370 --> 00:12:21.410
We created a Custom
Element that allows

00:12:21.410 --> 00:12:23.900
you to create Custom Elements.

00:12:23.900 --> 00:12:26.106
It's super-meta, but it's
actually really cool.

00:12:26.106 --> 00:12:27.980
And it shows you the
power of all this stuff.

00:12:27.980 --> 00:12:31.310
You can create an element from
an element, declaratively.

00:12:31.310 --> 00:12:33.560
So in Polymer, we say, hey,
declare a polymer-element.

00:12:33.560 --> 00:12:34.740
And the name attribute
that you give

00:12:34.740 --> 00:12:35.910
it is the tag that
you're creating.

00:12:35.910 --> 00:12:37.630
So those are the two
different versions.

00:12:37.630 --> 00:12:38.710
But the really nice
thing about this

00:12:38.710 --> 00:12:40.770
is it doesn't matter if you're
using vanilla Custom Elements.

00:12:40.770 --> 00:12:42.145
It doesn't matter
if you're using

00:12:42.145 --> 00:12:43.920
Polymer x-tags or anything else.

00:12:43.920 --> 00:12:45.630
The usage, the way
you use this thing,

00:12:45.630 --> 00:12:46.810
is exactly the same, right?

00:12:46.810 --> 00:12:50.920
You declare paper-tabs
on your page,

00:12:50.920 --> 00:12:54.860
or you create it in JavaScript,
and then you're good to go.

00:12:54.860 --> 00:12:56.360
I mentioned extension,
a common way

00:12:56.360 --> 00:12:57.846
to extend other people's stuff.

00:12:57.846 --> 00:12:59.470
In vanilla Web
Components, you can say,

00:12:59.470 --> 00:13:00.810
I want to create a super-button.

00:13:00.810 --> 00:13:02.560
So you'll give it the
tag you're creating.

00:13:02.560 --> 00:13:03.590
And this time, you're
going to inherit

00:13:03.590 --> 00:13:06.120
the prototype of the thing that
you want to create it from.

00:13:06.120 --> 00:13:07.990
So I'm going to inherit
the HTML button elements

00:13:07.990 --> 00:13:10.531
prototype, because I want that
functionality in my JavaScript

00:13:10.531 --> 00:13:11.520
prototype.

00:13:11.520 --> 00:13:13.364
And I'm extending
the button tag.

00:13:13.364 --> 00:13:15.780
In Polymer, we say, hey, we'll
make this declarative, too.

00:13:15.780 --> 00:13:18.321
We'll make this a one attribute
that you put on your element,

00:13:18.321 --> 00:13:21.150
extends='button.'" So we're
creating a super-button.

00:13:21.150 --> 00:13:23.910
And then, again, the usage
of this is exactly the same.

00:13:23.910 --> 00:13:25.240
Button is a super-button.

00:13:25.240 --> 00:13:27.420
This is a type extension
Custom Element.

00:13:27.420 --> 00:13:29.950
We can also extend other
people's Custom Elements, not

00:13:29.950 --> 00:13:32.810
just native HTML.

00:13:32.810 --> 00:13:34.380
So is this really
better than before?

00:13:34.380 --> 00:13:35.671
Great, we can create some HTML.

00:13:35.671 --> 00:13:38.710
We can tell the
browser about it.

00:13:38.710 --> 00:13:39.790
Is that cool?

00:13:39.790 --> 00:13:40.290
Yes.

00:13:40.290 --> 00:13:41.560
It's totally cool.

00:13:41.560 --> 00:13:43.270
I think it's cool.

00:13:43.270 --> 00:13:44.780
But the reason it's
cool is, there's

00:13:44.780 --> 00:13:46.580
a couple of really
great examples.

00:13:46.580 --> 00:13:48.760
The first is that we're
integrated with the browser

00:13:48.760 --> 00:13:49.260
now.

00:13:49.260 --> 00:13:50.676
The fact that we're
creating HTML,

00:13:50.676 --> 00:13:52.420
and the fact that
we're creating DOM,

00:13:52.420 --> 00:13:53.776
is actually really important.

00:13:53.776 --> 00:13:56.150
We can take advantage of other
parts of the platform that

00:13:56.150 --> 00:13:58.108
are new, like MutationObservers,
querySelector,

00:13:58.108 --> 00:13:59.150
and addEventListener.

00:13:59.150 --> 00:14:00.649
These are things
that already exist.

00:14:00.649 --> 00:14:03.020
We can just reuse those in
the world of Web Components.

00:14:03.020 --> 00:14:05.090
We can take advantage of the
browser's parsing and caching

00:14:05.090 --> 00:14:05.650
logic.

00:14:05.650 --> 00:14:07.066
All that stuff
that's been set up,

00:14:07.066 --> 00:14:09.770
and the browser engineers
have worked very hard and long

00:14:09.770 --> 00:14:12.070
nights to actually make
really fast for us,

00:14:12.070 --> 00:14:13.903
we can take advantage
of that, because we're

00:14:13.903 --> 00:14:17.100
integrated at the browser's
lowest level, which is DOM.

00:14:17.100 --> 00:14:19.050
That also brings us
interoperability.

00:14:19.050 --> 00:14:22.340
So it doesn't matter if a
component is built using x-tags

00:14:22.340 --> 00:14:24.280
or if a component is
built using Polymer.

00:14:24.280 --> 00:14:27.150
The fact that, again, they all
speak the same language now,

00:14:27.150 --> 00:14:29.600
which is DOM, means you can
use these things together.

00:14:29.600 --> 00:14:30.640
And you can mix and
match them in your app.

00:14:30.640 --> 00:14:32.360
It doesn't matter
who vends them.

00:14:32.360 --> 00:14:33.440
You just use the stuff.

00:14:33.440 --> 00:14:35.740
So it's interoperable.

00:14:35.740 --> 00:14:37.390
I'll admit, I don't
make all my demos

00:14:37.390 --> 00:14:38.520
and all my apps accessible.

00:14:38.520 --> 00:14:39.652
You guys should.

00:14:39.652 --> 00:14:41.610
You, out there in the
live stream, should, too.

00:14:41.610 --> 00:14:43.204
But it's actually really cool.

00:14:43.204 --> 00:14:44.995
Now we can take advantage
of keyboard stuff

00:14:44.995 --> 00:14:45.870
that the browser has.

00:14:45.870 --> 00:14:47.710
Focusability, ARIA
roles, all that stuff

00:14:47.710 --> 00:14:49.350
that's there for us--
we can build that

00:14:49.350 --> 00:14:51.866
into our Custom Elements,
just by default.

00:14:51.866 --> 00:14:53.740
And the last one that
I'm super-excited about

00:14:53.740 --> 00:14:54.740
is DevTools support.

00:14:54.740 --> 00:14:56.115
So first-class
support for tools.

00:14:56.115 --> 00:14:58.073
I want to show a video
of this because I really

00:14:58.073 --> 00:14:59.690
do think it is that cool.

00:14:59.690 --> 00:15:00.900
This is Polymer's site.

00:15:00.900 --> 00:15:03.097
And we have this
little tab strip widget

00:15:03.097 --> 00:15:04.680
in different places
of the site, where

00:15:04.680 --> 00:15:06.096
you can select
kind of a code view

00:15:06.096 --> 00:15:10.200
and see a live preview
at the right here.

00:15:10.200 --> 00:15:11.950
I'm going to just show
you this in action.

00:15:11.950 --> 00:15:12.850
So that's what it does.

00:15:12.850 --> 00:15:14.690
Now, the fact that we're
creating HTML and telling

00:15:14.690 --> 00:15:16.106
the browser about
this new element

00:15:16.106 --> 00:15:17.829
means we're integrated
with the tools.

00:15:17.829 --> 00:15:19.620
So I can poke around
in the Elements panel.

00:15:19.620 --> 00:15:22.630
I can inspect that, just
using your common inspector.

00:15:22.630 --> 00:15:24.030
I can fire up the console.

00:15:24.030 --> 00:15:26.080
And I can auto-complete
this element's APIs

00:15:26.080 --> 00:15:28.004
and discover its
properties and methods.

00:15:28.004 --> 00:15:28.920
So that's really cool.

00:15:28.920 --> 00:15:29.690
I can change this thing, right?

00:15:29.690 --> 00:15:31.260
You're changing the
tab dynamically,

00:15:31.260 --> 00:15:34.426
just by changing that selected
property that the element has.

00:15:34.426 --> 00:15:36.050
CSS and HTML work
really well together.

00:15:36.050 --> 00:15:38.364
So I can change the styles
in the Styles panel,

00:15:38.364 --> 00:15:39.780
and it just updates
itself, right?

00:15:39.780 --> 00:15:43.759
So I can tweak and use the
DevTools Save functionality.

00:15:43.759 --> 00:15:46.300
So all that really cool stuff
that the DevTools team has been

00:15:46.300 --> 00:15:49.307
building-- remote
debugging of the console,

00:15:49.307 --> 00:15:51.890
auditing-- all that great stuff,
you can take advantage of now

00:15:51.890 --> 00:15:55.410
that you're kind of integrated
at the browser's lowest level.

00:15:55.410 --> 00:15:56.990
So first-class Tools support.

00:15:56.990 --> 00:15:58.920
Very huge.

00:15:58.920 --> 00:16:01.350
The next API is
templates, HTML templates.

00:16:01.350 --> 00:16:04.320
And what templates does is
bring proper, native client-side

00:16:04.320 --> 00:16:08.010
templating to the browser.

00:16:08.010 --> 00:16:10.160
Templates yesterday looked
something like this.

00:16:10.160 --> 00:16:12.230
So the way a lot of
libraries and frameworks

00:16:12.230 --> 00:16:13.780
do templating is
that they say, hey,

00:16:13.780 --> 00:16:15.680
put a bunch of stuff
in a script tag,

00:16:15.680 --> 00:16:18.263
and we'll change the MIME type
so the browser doesn't actually

00:16:18.263 --> 00:16:20.160
throw that off to the
JavaScript engine.

00:16:20.160 --> 00:16:20.993
And so that's great.

00:16:20.993 --> 00:16:23.950
But what you actually
put inside is not DOM.

00:16:23.950 --> 00:16:25.290
It's just strings.

00:16:25.290 --> 00:16:26.740
So we're pushing strings around.

00:16:26.740 --> 00:16:27.880
And it feels kind of icky.

00:16:27.880 --> 00:16:29.980
The other way that
people do this is they

00:16:29.980 --> 00:16:32.122
have a template, a
constructor or something,

00:16:32.122 --> 00:16:33.580
and they'll have
a template string.

00:16:33.580 --> 00:16:35.760
So it's just you're
scaffolding out using a string.

00:16:35.760 --> 00:16:37.176
And then you have
a render method.

00:16:37.176 --> 00:16:40.224
So template, render,
template, render.

00:16:40.224 --> 00:16:42.140
And so what the Web
Components folks said was,

00:16:42.140 --> 00:16:43.515
hey, we should
just bake this in.

00:16:43.515 --> 00:16:46.417
Why do every framework and
library do this differently?

00:16:46.417 --> 00:16:48.250
So what they brought
us is the template tag.

00:16:48.250 --> 00:16:50.590
And the template tag has some
really amazing properties.

00:16:50.590 --> 00:16:52.600
So the first is that
anything you put inside of it

00:16:52.600 --> 00:16:53.870
is going to be totally inert.

00:16:53.870 --> 00:16:56.370
It's not going to do anything
until you clone this template,

00:16:56.370 --> 00:16:58.390
until you stamp it out,
until you activate it.

00:16:58.390 --> 00:16:59.890
So for instance,
this image in here,

00:16:59.890 --> 00:17:02.429
this image.png that I
have in my template,

00:17:02.429 --> 00:17:03.720
is not going to make a request.

00:17:03.720 --> 00:17:05.345
It's actually not
going to be requested

00:17:05.345 --> 00:17:08.280
until I clone this template
and use an instance of it.

00:17:08.280 --> 00:17:09.579
So script's not going to run.

00:17:09.579 --> 00:17:10.662
Video's not going to play.

00:17:10.662 --> 00:17:13.069
It's got a lot of great
inert properties like that.

00:17:13.069 --> 00:17:14.550
It's display:none by default.

00:17:14.550 --> 00:17:15.655
So I can't actually
see this template.

00:17:15.655 --> 00:17:17.380
It's kind of hidden
away in the document.

00:17:17.380 --> 00:17:19.879
In fact, you can't even traverse
into it using the DOM APIs.

00:17:19.879 --> 00:17:21.290
It's truly a template.

00:17:21.290 --> 00:17:23.849
It's out of the
scope of your page.

00:17:23.849 --> 00:17:25.569
And the last one is
we're using DOM here.

00:17:25.569 --> 00:17:27.640
So this is truly DOM that you're
scaffolding this thing with.

00:17:27.640 --> 00:17:29.100
You're not pushing
around strings anymore,

00:17:29.100 --> 00:17:30.485
which is really, really good.

00:17:30.485 --> 00:17:33.460
You're at the
browser's lowest level.

00:17:33.460 --> 00:17:36.260
So the way you do this in
vanilla Web Components,

00:17:36.260 --> 00:17:38.740
using template, is just you
drop a template on your page.

00:17:38.740 --> 00:17:41.970
And you can scaffold
out markup using markup.

00:17:41.970 --> 00:17:44.710
In Polymer, we said, hey,
any time you create a Polymer

00:17:44.710 --> 00:17:46.280
element, all the
guts of your element

00:17:46.280 --> 00:17:47.970
are going to be
inside of a template.

00:17:47.970 --> 00:17:50.070
So you get all that inert
properties that I talked about.

00:17:50.070 --> 00:17:52.111
Scripts are not going to
run until an instance is

00:17:52.111 --> 00:17:53.440
created of your element.

00:17:53.440 --> 00:17:54.490
Now, the other thing
we've done is we've said,

00:17:54.490 --> 00:17:57.080
hey, we want to teach
template a couple new tricks.

00:17:57.080 --> 00:17:59.580
So we have the outermost
template, which is the thing

00:17:59.580 --> 00:18:02.720
that your markup of your
element is created from.

00:18:02.720 --> 00:18:04.870
But the inner
templates can do things

00:18:04.870 --> 00:18:06.162
like use data binding features.

00:18:06.162 --> 00:18:07.703
So you can have an
iterative template

00:18:07.703 --> 00:18:09.910
that says, for user in
users, stamp out this markup,

00:18:09.910 --> 00:18:11.101
declaratively.

00:18:11.101 --> 00:18:13.350
You have conditional templates
and that sort of thing.

00:18:13.350 --> 00:18:14.200
So it becomes really powerful.

00:18:14.200 --> 00:18:16.116
The entirety of inside
of your Polymer element

00:18:16.116 --> 00:18:17.820
can be declarative,
just by using

00:18:17.820 --> 00:18:21.160
these features and the
data binding stuff.

00:18:21.160 --> 00:18:23.410
The next API, one of the big
daddies of Web Components

00:18:23.410 --> 00:18:24.386
is Shadow DOM.

00:18:24.386 --> 00:18:26.010
And what Shadow DOM
brings to the table

00:18:26.010 --> 00:18:29.580
is DOM and CSS scoping.

00:18:29.580 --> 00:18:32.030
If you take anything away
from Shadow DOM today,

00:18:32.030 --> 00:18:34.990
or in the future, it's that
it brings composability

00:18:34.990 --> 00:18:37.047
and scoping to the web platform.

00:18:37.047 --> 00:18:38.880
So we can kind of look
down this little lens

00:18:38.880 --> 00:18:41.890
and scope the problem, design
our apps in small chunks,

00:18:41.890 --> 00:18:44.670
and have some guarantees
that things are protected.

00:18:44.670 --> 00:18:48.350
So in vanilla Shadow DOM, the
way you use this is say, hey,

00:18:48.350 --> 00:18:49.100
I have an element.

00:18:49.100 --> 00:18:50.724
I want to put some
Shadow DOM behind it

00:18:50.724 --> 00:18:53.180
and abstract that stuff
away from the user.

00:18:53.180 --> 00:18:54.780
So you call createShadowRoot.

00:18:54.780 --> 00:18:57.030
And then you fill the inner
HTML of the ShadowRoot

00:18:57.030 --> 00:18:58.235
with a bunch of DOM.

00:18:58.235 --> 00:19:00.610
In Polymer, we said, hey,
let's just get rid of all that.

00:19:00.610 --> 00:19:02.510
You don't have to
call those explicitly.

00:19:02.510 --> 00:19:03.885
We're just going
to say, anything

00:19:03.885 --> 00:19:05.600
you put inside of
your template, inside

00:19:05.600 --> 00:19:06.560
of your elements
template, we're going

00:19:06.560 --> 00:19:07.830
to create Shadow DOM from.

00:19:07.830 --> 00:19:09.765
So by default, all
polymer-elements

00:19:09.765 --> 00:19:10.390
use Shadow DOM.

00:19:10.390 --> 00:19:12.848
Because we think the scoping
features and the composability

00:19:12.848 --> 00:19:16.299
features that it gives you
are very, very powerful.

00:19:16.299 --> 00:19:18.090
So let's walk through
an example of showing

00:19:18.090 --> 00:19:23.134
you what composability means,
and also CSS and DOM scoping.

00:19:23.134 --> 00:19:25.092
Right now, I have some
markup on the page here.

00:19:25.092 --> 00:19:27.270
I have an image, my
profile image, an h2

00:19:27.270 --> 00:19:29.370
and h3 for my title
and description,

00:19:29.370 --> 00:19:30.880
and my Twitter handle.

00:19:30.880 --> 00:19:32.340
So right now, we're not in
the world of Web Components

00:19:32.340 --> 00:19:32.840
whatsoever.

00:19:32.840 --> 00:19:37.930
We just have this markup,
just as it is on the page.

00:19:37.930 --> 00:19:39.847
So let's first wrap this
thing in a Component.

00:19:39.847 --> 00:19:42.180
We're going to create a
reusable Component somebody else

00:19:42.180 --> 00:19:42.780
can just use.

00:19:42.780 --> 00:19:46.441
We'll create a
profile-card element.

00:19:46.441 --> 00:19:47.940
Inside of the
elements template, I'm

00:19:47.940 --> 00:19:50.400
just going to drop in all
that markup that I had before.

00:19:50.400 --> 00:19:52.359
So now this thing's
encapsulated in Shadow DOM.

00:19:52.359 --> 00:19:53.900
And the way somebody
uses my element,

00:19:53.900 --> 00:19:55.070
they declare a profile card.

00:19:55.070 --> 00:19:57.647
And they get my name, and
my image, and my title.

00:19:57.647 --> 00:19:59.480
And that's probably not
something they want.

00:19:59.480 --> 00:20:02.289
So we can make this thing even
better and make it composable.

00:20:02.289 --> 00:20:03.830
But the first thing
we need, nobody's

00:20:03.830 --> 00:20:05.700
going to use our element
unless it's styled really cool

00:20:05.700 --> 00:20:06.680
and looks great.

00:20:06.680 --> 00:20:07.885
So I went to Michigan.

00:20:07.885 --> 00:20:10.510
Go Blue, if anybody's out there
that went to Michigan, as well.

00:20:10.510 --> 00:20:14.090
So I'm going to style my name
and my title as maize and blue.

00:20:14.090 --> 00:20:17.020
So any time you put a
style tag or a style sheet

00:20:17.020 --> 00:20:19.632
inside of your Shadow DOM,
it's scoped to that element.

00:20:19.632 --> 00:20:21.840
So this is big, because it
means styles from the page

00:20:21.840 --> 00:20:22.923
are not going to bleed in.

00:20:22.923 --> 00:20:25.130
You can see the h2 and
h3 at the top of my slide

00:20:25.130 --> 00:20:29.104
here is not affecting the way
my Component's h2 and h3 behave.

00:20:29.104 --> 00:20:31.520
And you can see that my maize
and blue is not leaking out.

00:20:31.520 --> 00:20:35.130
It's not changing the
two titles at the top.

00:20:35.130 --> 00:20:36.270
So we have scoping of CSS.

00:20:36.270 --> 00:20:38.300
This is really big.

00:20:38.300 --> 00:20:43.762
The next thing we can do is add
a content div, add a wrapper.

00:20:43.762 --> 00:20:45.220
Now, this might
not look that cool,

00:20:45.220 --> 00:20:47.070
but it's actually
a really big deal.

00:20:47.070 --> 00:20:49.510
The fact that we have DOM
scoping, we have a local DOM

00:20:49.510 --> 00:20:51.960
tree, as encapsulated
by the Shadow DOM,

00:20:51.960 --> 00:20:55.312
means that we can use
IDs again, willy-nilly.

00:20:55.312 --> 00:20:57.520
They're not going to conflict
with the outside world.

00:20:57.520 --> 00:20:59.510
ID info is a really
common ID, right?

00:20:59.510 --> 00:21:01.180
But we can use class
names and IDs again

00:21:01.180 --> 00:21:02.680
because it's local
to my Shadow DOM.

00:21:05.140 --> 00:21:06.640
And the last thing
we can do is make

00:21:06.640 --> 00:21:08.736
this thing more composable.

00:21:08.736 --> 00:21:10.110
So what I've done
in this step is

00:21:10.110 --> 00:21:11.900
I've actually removed the
markup from my Component.

00:21:11.900 --> 00:21:13.630
And I'm saying, OK,
I want users to be

00:21:13.630 --> 00:21:15.090
able to pass that data in to me.

00:21:15.090 --> 00:21:16.548
I want them to be
able to configure

00:21:16.548 --> 00:21:19.302
their own title and
their information.

00:21:19.302 --> 00:21:21.260
So what I've done was
I've replaced that markup

00:21:21.260 --> 00:21:22.320
with a content tag.

00:21:22.320 --> 00:21:24.629
And a content tag is
called an insertion point.

00:21:24.629 --> 00:21:26.170
And it basically
just says, hey, this

00:21:26.170 --> 00:21:28.980
is a placeholder for rendering
stuff from the user's world

00:21:28.980 --> 00:21:30.874
into my Shadow DOM world.

00:21:30.874 --> 00:21:32.290
And so what it's
doing is actually

00:21:32.290 --> 00:21:34.550
taking that h2,
h3, and the a tag,

00:21:34.550 --> 00:21:37.047
and it's rendering it at that
location in the Shadow DOM.

00:21:37.047 --> 00:21:39.630
Now, something else I've done
is I've leveraged Polymer's data

00:21:39.630 --> 00:21:40.338
binding features.

00:21:40.338 --> 00:21:43.210
So this profile card has
this attribute's image on it.

00:21:43.210 --> 00:21:44.900
So it understands
an image attribute

00:21:44.900 --> 00:21:47.000
when you put it on the
profile card image.

00:21:47.000 --> 00:21:49.100
So I've kind of left
the image itself

00:21:49.100 --> 00:21:52.310
as an implementation
detail of the Component.

00:21:52.310 --> 00:21:54.750
But all users give to me is
just a string with an image.

00:21:54.750 --> 00:21:56.532
It's super-easy to use.

00:21:56.532 --> 00:21:58.240
Now, for anybody that's
paying attention,

00:21:58.240 --> 00:21:59.615
you've noticed a
difference here,

00:21:59.615 --> 00:22:01.700
between this step and this step.

00:22:01.700 --> 00:22:02.910
I've lost my styling, right?

00:22:02.910 --> 00:22:05.550
I've lost that maize and blue
that I worked so hard on.

00:22:05.550 --> 00:22:07.670
And so what we
can do now is take

00:22:07.670 --> 00:22:10.830
advantage of some of Shadow
DOM's new styling features.

00:22:10.830 --> 00:22:13.080
So there's this
content pseudo-element.

00:22:13.080 --> 00:22:14.646
And this says, hey,
if you're in h2

00:22:14.646 --> 00:22:16.270
and you're going
through a content tag,

00:22:16.270 --> 00:22:17.940
style yourself blue.

00:22:17.940 --> 00:22:20.660
So that's how I can
regain those styles back.

00:22:20.660 --> 00:22:23.800
The reason for the difference
is that my selectors in my style

00:22:23.800 --> 00:22:27.090
DOM style sheet no longer affect
the stuff in the user line.

00:22:27.090 --> 00:22:29.562
So I actually have to care
about that and bring that in.

00:22:29.562 --> 00:22:31.520
Because they're logically
in a different place.

00:22:31.520 --> 00:22:33.250
They're not part
of my local DOM.

00:22:33.250 --> 00:22:37.490
So this is how we can get
composability and DOM scoping

00:22:37.490 --> 00:22:39.890
and CSS scoping with Shadow DOM.

00:22:39.890 --> 00:22:42.110
The last one of the four
Web Component standards

00:22:42.110 --> 00:22:42.780
is HTML imports.

00:22:42.780 --> 00:22:45.155
And what this brings is loading
and dependency management

00:22:45.155 --> 00:22:46.890
to Web Components.

00:22:46.890 --> 00:22:48.870
If you take an example
like Bootstrap today,

00:22:48.870 --> 00:22:51.450
you have to do a bunch of
stuff to use Bootstrap.

00:22:51.450 --> 00:22:52.700
So bootstrap.css.

00:22:52.700 --> 00:22:54.450
You load the style sheet.

00:22:54.450 --> 00:22:56.790
You're going to
load in a font icon.

00:22:56.790 --> 00:22:58.530
JQuery is a dependency
that you have

00:22:58.530 --> 00:23:01.350
to load in order to use
the widgets for Bootstrap.

00:23:01.350 --> 00:23:03.180
You load, of course,
Bootstrap itself.

00:23:03.180 --> 00:23:04.638
And then anything
that you're going

00:23:04.638 --> 00:23:07.680
to use in order to put on
your page, all their widgets.

00:23:07.680 --> 00:23:10.780
In the world of Web Components,
in the world of HTML imports,

00:23:10.780 --> 00:23:12.540
this becomes a single line.

00:23:12.540 --> 00:23:15.820
So we can wrap all that stuff
up in a single bootstrap.html

00:23:15.820 --> 00:23:17.310
file, link rel="import".

00:23:17.310 --> 00:23:19.310
And then that's how
somebody brings in Bootstrap

00:23:19.310 --> 00:23:20.185
to their application.

00:23:25.400 --> 00:23:27.940
Imports actually changes the
way we develop for the web.

00:23:27.940 --> 00:23:30.315
Instead of going off and
finding API documentation

00:23:30.315 --> 00:23:32.600
and piecing stuff together,
the first thing we can do

00:23:32.600 --> 00:23:34.349
is say, hey, does
something else out there

00:23:34.349 --> 00:23:36.110
exist that solves our problem?

00:23:36.110 --> 00:23:37.790
We'll go off and find it.

00:23:37.790 --> 00:23:38.670
Second is import it.

00:23:38.670 --> 00:23:40.711
Once we have found something
that's useful to us,

00:23:40.711 --> 00:23:42.280
let's import that
to our application.

00:23:42.280 --> 00:23:44.070
And third is we
just use it, right?

00:23:44.070 --> 00:23:46.111
We declare on our page
we're creating JavaScript.

00:23:46.111 --> 00:23:47.757
And we just start
using the stuff.

00:23:47.757 --> 00:23:48.840
So what do I mean by find?

00:23:48.840 --> 00:23:49.570
You go up to a registry.

00:23:49.570 --> 00:23:50.890
You go up to customelements.io.

00:23:50.890 --> 00:23:53.098
You go up to Polymer's
catalog or some other catalog.

00:23:53.098 --> 00:23:55.382
And you say, hey, I
want a core-toolbar.

00:23:55.382 --> 00:23:56.840
I want to put a
toolbar on my page.

00:23:56.840 --> 00:23:58.560
I want a core-icon-button,
for people

00:23:58.560 --> 00:24:00.600
to be able to push
these awesome buttons.

00:24:00.600 --> 00:24:02.725
So you use a tool like
bower, or something similar,

00:24:02.725 --> 00:24:05.370
to install that and bring
that down to your application.

00:24:05.370 --> 00:24:07.182
So you go off and
find something.

00:24:07.182 --> 00:24:08.640
The next thing is
you use an import

00:24:08.640 --> 00:24:10.330
to import it into your app.

00:24:10.330 --> 00:24:13.220
In the head of your app,
you'll declare an HTML import

00:24:13.220 --> 00:24:14.240
for a core-toolbar.

00:24:14.240 --> 00:24:16.090
And you'll bring in
the core-icon-button,

00:24:16.090 --> 00:24:18.201
as well, using import.

00:24:18.201 --> 00:24:19.700
And the last step
is just to use it.

00:24:19.700 --> 00:24:20.200
Right?

00:24:20.200 --> 00:24:23.460
You just declare core-toolbar on
your page, once it's imported.

00:24:23.460 --> 00:24:24.870
And this is a
composable element.

00:24:24.870 --> 00:24:26.369
So it understands
core-icon-buttons.

00:24:26.369 --> 00:24:29.280
It understands spans with
flex attributes on them.

00:24:29.280 --> 00:24:32.230
And what you get is a toolbar.

00:24:32.230 --> 00:24:32.980
No surprise there.

00:24:32.980 --> 00:24:34.146
But it's really cool, right?

00:24:34.146 --> 00:24:35.090
We're finding stuff.

00:24:35.090 --> 00:24:37.510
We're finding stuff that's
reusable for our purposes.

00:24:37.510 --> 00:24:38.140
We're using it.

00:24:38.140 --> 00:24:41.730
We're bringing it in,
using HTML imports.

00:24:41.730 --> 00:24:42.480
Imports are cool.

00:24:42.480 --> 00:24:43.480
Imports are really cool.

00:24:43.480 --> 00:24:46.350
So they give us a way to
bundle related JavaScript, CSS,

00:24:46.350 --> 00:24:47.682
and HTML.

00:24:47.682 --> 00:24:49.765
So a lot of people say,
hey, what about RequireJS?

00:24:49.765 --> 00:24:51.520
Or what about ES6
Module Loaders,

00:24:51.520 --> 00:24:53.000
or something like that?

00:24:53.000 --> 00:24:54.990
And those are all really
awesome technologies.

00:24:54.990 --> 00:24:58.600
But right now, if we want to
use JavaScript, HTML, and CSS,

00:24:58.600 --> 00:25:00.850
we're going to be writing
Web Components that do that.

00:25:00.850 --> 00:25:02.862
We need a way to load
all those resources,

00:25:02.862 --> 00:25:04.320
those different
types of resources,

00:25:04.320 --> 00:25:06.105
together, in a single URL.

00:25:06.105 --> 00:25:09.080
And that's what, really,
HTML imports is all about.

00:25:09.080 --> 00:25:11.050
It can also be used for
dependency management.

00:25:11.050 --> 00:25:14.540
So the way Polymer kind
of uses HTML imports

00:25:14.540 --> 00:25:16.600
is exactly like
the native stuff.

00:25:16.600 --> 00:25:18.672
Exactly like the vanilla
Web Component stuff.

00:25:18.672 --> 00:25:20.130
So typically, what
we do is we say,

00:25:20.130 --> 00:25:22.860
hey, if you're creating an
element, put that in a file.

00:25:22.860 --> 00:25:24.260
Put that in its own file.

00:25:24.260 --> 00:25:26.070
Call it menu-bar.html.

00:25:26.070 --> 00:25:28.510
And inside of that, you're
going to define your element.

00:25:28.510 --> 00:25:29.884
So at the top of
the file, you're

00:25:29.884 --> 00:25:31.540
going to actually
use imports to load

00:25:31.540 --> 00:25:33.222
in the dependencies
for your element.

00:25:33.222 --> 00:25:34.930
So we're creating a
polymer-element here.

00:25:34.930 --> 00:25:37.460
That's the implementation
of this element,

00:25:37.460 --> 00:25:38.480
this menu-bar element.

00:25:38.480 --> 00:25:40.990
So we'll load polymer.html
as a dependency.

00:25:40.990 --> 00:25:43.050
We're going to load the
paper-tabs and paper-tab

00:25:43.050 --> 00:25:44.270
element as a dependency.

00:25:44.270 --> 00:25:47.462
Because we're using those inside
of our own Custom Element.

00:25:47.462 --> 00:25:49.420
You declare your element
using polymer-element.

00:25:49.420 --> 00:25:51.586
And then the way somebody
uses your stuff is, again,

00:25:51.586 --> 00:25:53.317
they just declare
a link rel="import"

00:25:53.317 --> 00:25:55.025
to the menu bar file
that you've created.

00:25:55.025 --> 00:25:56.152
And it's that easy.

00:25:56.152 --> 00:25:58.360
So you can have imports that
reference other imports,

00:25:58.360 --> 00:26:01.740
and it becomes a
dependency management.

00:26:01.740 --> 00:26:04.115
So that's a little bit about
the four main specifications

00:26:04.115 --> 00:26:04.870
of Web Components.

00:26:04.870 --> 00:26:06.745
Now I'm going to switch
gears and talk to you

00:26:06.745 --> 00:26:09.889
and start getting people
thinking in Web Components.

00:26:09.889 --> 00:26:11.680
The first is that we
have to actually think

00:26:11.680 --> 00:26:13.020
about what HTML even means.

00:26:13.020 --> 00:26:14.482
What does it do?

00:26:14.482 --> 00:26:16.440
So a lot of people see
HTML, and they say, hey,

00:26:16.440 --> 00:26:17.981
there's all this
visual stuff, right?

00:26:17.981 --> 00:26:19.930
This is stuff that
renders to the browser.

00:26:19.930 --> 00:26:20.800
Your select tag.

00:26:20.800 --> 00:26:21.920
Your progress tag.

00:26:21.920 --> 00:26:22.800
A button, right?

00:26:22.800 --> 00:26:24.050
It has these amazing controls.

00:26:24.050 --> 00:26:25.780
You can declare an
audio tag on the page.

00:26:25.780 --> 00:26:27.405
And you have all
these amazing controls

00:26:27.405 --> 00:26:29.090
wrapped up inside of Shadow DOM.

00:26:29.090 --> 00:26:30.550
That's the UI side.

00:26:30.550 --> 00:26:32.700
But there's a whole
other side, which

00:26:32.700 --> 00:26:33.890
is the non-visual elements.

00:26:33.890 --> 00:26:35.180
And Matt talked about
this a little bit before.

00:26:35.180 --> 00:26:36.305
But I really want to
drive home this point,

00:26:36.305 --> 00:26:37.609
because it's important.

00:26:37.609 --> 00:26:39.275
The non-visual elements
provide utility.

00:26:39.275 --> 00:26:40.450
They do something, right?

00:26:40.450 --> 00:26:42.199
They exist there for a reason.

00:26:42.199 --> 00:26:43.865
But they don't actually
render anything.

00:26:43.865 --> 00:26:47.290
So two of my favorite examples
are the style and script tag.

00:26:47.290 --> 00:26:49.239
If you put text
inside of a style tag,

00:26:49.239 --> 00:26:51.030
somehow the browser
knows to throw that off

00:26:51.030 --> 00:26:54.634
to the CSS engine
and use that for CSS.

00:26:54.634 --> 00:26:56.300
If you put text instead
of a script tag,

00:26:56.300 --> 00:26:58.258
somehow the browser knows
to throw that one off

00:26:58.258 --> 00:27:01.099
into the JavaScript engine and
interpret that as JavaScript.

00:27:01.099 --> 00:27:02.390
I talked about template, right?

00:27:02.390 --> 00:27:04.720
Template's a new tag that
we get with Web Components.

00:27:04.720 --> 00:27:06.630
What you put inside of the
template is meaningful.

00:27:06.630 --> 00:27:08.796
And it does something
interesting with that content.

00:27:08.796 --> 00:27:11.087
But it doesn't actually
display anything.

00:27:11.087 --> 00:27:13.670
In the world of Custom Elements,
we have the exact same thing.

00:27:13.670 --> 00:27:17.060
So Polymer has its set of
core, non-visual elements--

00:27:17.060 --> 00:27:19.940
things for loading libraries,
and working with local storage,

00:27:19.940 --> 00:27:21.710
and doing things like selection.

00:27:21.710 --> 00:27:23.350
We have a set of
visual elements.

00:27:23.350 --> 00:27:25.970
So these are things like, hey,
I need an infinite scroll list.

00:27:25.970 --> 00:27:27.930
I need a scaffold for
my mobile application,

00:27:27.930 --> 00:27:29.940
or a toolbar, or an icon.

00:27:29.940 --> 00:27:31.940
We have the highly visual
and highly interactive

00:27:31.940 --> 00:27:33.520
material elements
that Rob Dodson

00:27:33.520 --> 00:27:35.420
is going to talk about
more to you in a bit.

00:27:35.420 --> 00:27:36.310
But I just want to show these.

00:27:36.310 --> 00:27:37.550
These are actually
really awesome.

00:27:37.550 --> 00:27:38.810
They have all these
really great effects.

00:27:38.810 --> 00:27:40.970
You just declare these
on your page, and you go.

00:27:40.970 --> 00:27:42.310
They're responsive.

00:27:42.310 --> 00:27:43.932
They're accessible.

00:27:43.932 --> 00:27:46.390
This one's really fun, because
it's got a little penny guy.

00:27:46.390 --> 00:27:47.410
Whee.

00:27:47.410 --> 00:27:48.260
So you get shadows.

00:27:48.260 --> 00:27:49.470
You get effects.

00:27:49.470 --> 00:27:51.470
The input's really cool.

00:27:51.470 --> 00:27:54.630
A lot of people think Shadow DOM
is this encapsulated security

00:27:54.630 --> 00:27:55.721
boundary, like Matt said.

00:27:55.721 --> 00:27:57.970
I just want to point out
that using Shadow DOM styling

00:27:57.970 --> 00:27:59.471
features, you can
actually drill in.

00:27:59.471 --> 00:28:01.803
If we have a theme that we
want to apply these elements,

00:28:01.803 --> 00:28:04.090
or these Components, you can
do that using Shadow DOM.

00:28:04.090 --> 00:28:05.860
So now I've gone to Batman mode.

00:28:05.860 --> 00:28:08.871
So all of my ink affects are
now these awesome orange.

00:28:08.871 --> 00:28:10.620
And everything is kind
of fitting the look

00:28:10.620 --> 00:28:12.080
and feel that I desire.

00:28:12.080 --> 00:28:15.579
So that's just using Shadow
DOM styling features.

00:28:15.579 --> 00:28:17.120
When thinking
Components, we actually

00:28:17.120 --> 00:28:19.720
have to think about how we
interact with APIs, libraries,

00:28:19.720 --> 00:28:21.469
and services again.

00:28:21.469 --> 00:28:23.010
So what I mean by
this is if you take

00:28:23.010 --> 00:28:24.070
the example of Google Maps.

00:28:24.070 --> 00:28:25.695
Google Maps is one
of my favorite APIs.

00:28:25.695 --> 00:28:26.400
It's very rich.

00:28:26.400 --> 00:28:28.525
And you can do a lot of
interesting things with it.

00:28:28.525 --> 00:28:30.640
The hello, world for
just throwing a marker

00:28:30.640 --> 00:28:32.876
at the current user's
location, onto a map,

00:28:32.876 --> 00:28:34.500
is actually a bit of
a boilerplate code

00:28:34.500 --> 00:28:35.458
that you have to write.

00:28:35.458 --> 00:28:36.476
So a little bit of CSS.

00:28:36.476 --> 00:28:37.850
You have to have
a map container.

00:28:37.850 --> 00:28:40.450
You have to load the
JavaScript library.

00:28:40.450 --> 00:28:42.620
You have to do geolocation
to get the current user's

00:28:42.620 --> 00:28:43.190
location.

00:28:43.190 --> 00:28:43.842
Add a marker.

00:28:43.842 --> 00:28:45.550
Add an eventListener
for the Info window.

00:28:45.550 --> 00:28:48.210
You have to wait for the
map ready callback to fire.

00:28:48.210 --> 00:28:49.580
Duh-duh-dzz.

00:28:49.580 --> 00:28:51.650
It's actually a
lot of stuff, just

00:28:51.650 --> 00:28:53.060
to render a marker to the map.

00:28:53.060 --> 00:28:54.800
It's a lot of stuff.

00:28:54.800 --> 00:28:57.240
In the world of Web Components,
this becomes a single tag.

00:28:57.240 --> 00:28:59.846
I'm going to switch over here.

00:28:59.846 --> 00:29:03.900
[APPLAUSE]

00:29:03.900 --> 00:29:05.900
A single tag that doesn't
actually render a map.

00:29:05.900 --> 00:29:08.790
[LAUGHTER]

00:29:08.790 --> 00:29:11.592
Hold your horses.

00:29:11.592 --> 00:29:12.530
A-ha.

00:29:12.530 --> 00:29:15.280
So you declare the Google
map element on your tag.

00:29:15.280 --> 00:29:18.230
And voila, you get a map,
exactly as you expect, right?

00:29:18.230 --> 00:29:20.314
You don't have to know to
style the map using CSS.

00:29:20.314 --> 00:29:21.938
You don't have to
have a div container.

00:29:21.938 --> 00:29:23.470
You don't have to
load the library.

00:29:23.470 --> 00:29:25.540
You just compose
it on your page,

00:29:25.540 --> 00:29:26.900
and you're off to the races.

00:29:26.900 --> 00:29:28.650
Super declarative.

00:29:28.650 --> 00:29:30.080
Maps is a really rich API.

00:29:30.080 --> 00:29:31.970
It has things that
are valuable to us,

00:29:31.970 --> 00:29:34.540
like centering the map using
a latitude and longitude.

00:29:34.540 --> 00:29:35.956
In the world of
Web Components, we

00:29:35.956 --> 00:29:38.070
can expose that functionality
of that Library API

00:29:38.070 --> 00:29:40.940
as a declarative
attribute on the element.

00:29:40.940 --> 00:29:42.050
So I can center the map.

00:29:42.050 --> 00:29:44.720
I can center this map using
a latitude and longitude

00:29:44.720 --> 00:29:46.230
attribute.

00:29:46.230 --> 00:29:48.470
I can set its zoom level
using an attribute.

00:29:48.470 --> 00:29:50.672
And underneath, the
implementation of this

00:29:50.672 --> 00:29:51.880
is totally transparent to me.

00:29:51.880 --> 00:29:54.010
But it's calling the
Maps API under the hood.

00:29:54.010 --> 00:29:55.940
But as a user of this
element, as a Component,

00:29:55.940 --> 00:29:57.400
I don't care about that, right?

00:29:57.400 --> 00:29:58.800
I just care about
declaring this.

00:29:58.800 --> 00:29:59.466
And I get a map.

00:29:59.466 --> 00:30:01.080
Exactly what I want.

00:30:01.080 --> 00:30:02.710
We can make this
element composable,

00:30:02.710 --> 00:30:04.800
using Shadow DOM
Custom Elements.

00:30:04.800 --> 00:30:06.390
Inside of the
google-map tag, I can

00:30:06.390 --> 00:30:08.140
put google-map-marker elements.

00:30:08.140 --> 00:30:10.490
And those are meaningful
to this map tag.

00:30:10.490 --> 00:30:12.290
So if you put those
inside of this tag,

00:30:12.290 --> 00:30:15.624
it renders a marker to the
map, exactly as you'd expect.

00:30:15.624 --> 00:30:17.040
The other cool
thing about this is

00:30:17.040 --> 00:30:19.070
I'm reusing parts of
the platform that exist.

00:30:19.070 --> 00:30:22.150
Again, since I'm tied in to
HTML, since I'm tied in to DOM,

00:30:22.150 --> 00:30:24.590
I don't have to reinvent
the title attribute.

00:30:24.590 --> 00:30:26.582
And you can see the
marker, it says, "Home."

00:30:26.582 --> 00:30:28.790
I don't have to reinvent
the HTML5 drag-and-drop API.

00:30:28.790 --> 00:30:31.355
If I call draggable="true"
in my element,

00:30:31.355 --> 00:30:33.730
the underlying Maps API call
is made to make that element

00:30:33.730 --> 00:30:35.570
draggable.

00:30:35.570 --> 00:30:38.050
I can make the map
marker itself composable.

00:30:38.050 --> 00:30:42.670
So if I put stuff inside of it,
if I put an h2 in an image tag,

00:30:42.670 --> 00:30:45.190
that can be part of the
Info window for the marker.

00:30:45.190 --> 00:30:47.800
And so that's what this element
does with that information.

00:30:47.800 --> 00:30:49.850
So this thing is now
growing as an application,

00:30:49.850 --> 00:30:52.790
just by composing the
elements together.

00:30:52.790 --> 00:30:55.450
Another really common thing to
do in the Maps API is say, hey,

00:30:55.450 --> 00:30:57.200
I want to fit all of
the markers on screen

00:30:57.200 --> 00:30:58.240
that I have on my map.

00:30:58.240 --> 00:30:59.970
And so you have to know a little
bit of JavaScript to do that.

00:30:59.970 --> 00:31:01.970
You have to loop through
all of your map markers

00:31:01.970 --> 00:31:03.384
and set the bounding
box on them.

00:31:03.384 --> 00:31:04.800
In the world of
Web Components, we

00:31:04.800 --> 00:31:07.190
can expose that API call
as a single attribute,

00:31:07.190 --> 00:31:09.780
the fittomarkers
attribute on this tag.

00:31:09.780 --> 00:31:12.200
And when you have that, any
time you add an extra element

00:31:12.200 --> 00:31:14.540
to the map, the map just
knows, under the hood,

00:31:14.540 --> 00:31:16.590
to set the right zoom level.

00:31:16.590 --> 00:31:17.840
So this is really cool, right?

00:31:17.840 --> 00:31:19.900
That application's
entirely readable.

00:31:19.900 --> 00:31:21.340
This is an awesome
future of using

00:31:21.340 --> 00:31:24.227
Web Components with
libraries and services.

00:31:24.227 --> 00:31:25.810
If you care about
the example I showed

00:31:25.810 --> 00:31:27.893
before, I didn't actually
show you the Geolocation

00:31:27.893 --> 00:31:29.540
API in that last step.

00:31:29.540 --> 00:31:32.429
This is the world of Polymer,
using the same example.

00:31:32.429 --> 00:31:33.970
Instead of all that
boilerplate code,

00:31:33.970 --> 00:31:35.954
it simply drops down to
a couple of elements.

00:31:35.954 --> 00:31:38.120
And we're using Polymer's
data binding feature here,

00:31:38.120 --> 00:31:40.884
to tie in all the latitude
and longitudes together.

00:31:40.884 --> 00:31:43.425
And I can tie-in a paper-slider
element to set the zoom level

00:31:43.425 --> 00:31:44.214
and zoom this map.

00:31:44.214 --> 00:31:46.130
So there's no JavaScript
that this is running.

00:31:46.130 --> 00:31:48.600
It's literally just
declaratively tying

00:31:48.600 --> 00:31:50.460
these things together.

00:31:50.460 --> 00:31:53.230
Google has 250 plus APIs.

00:31:53.230 --> 00:31:54.115
That's crazy.

00:31:54.115 --> 00:31:56.362
It's crazy awesome.

00:31:56.362 --> 00:31:58.570
So we've been actually
thinking, on the Polymer team,

00:31:58.570 --> 00:32:00.760
how do we bring the best
of Google's awesome sauce

00:32:00.760 --> 00:32:03.040
to the world, this
declarative, amazing world

00:32:03.040 --> 00:32:05.879
of web development using Web
Components, and vice versa?

00:32:05.879 --> 00:32:07.670
So we actually started
a project on GitHub.

00:32:07.670 --> 00:32:11.270
If you want to check it out,
googlewebcomponents.github.io.

00:32:11.270 --> 00:32:13.020
There's a lot of really
cool things here.

00:32:13.020 --> 00:32:15.546
So we have Components for
things like Google Maps,

00:32:15.546 --> 00:32:16.920
working with Google
Spreadsheets,

00:32:16.920 --> 00:32:19.526
working with OAuth,
doing Street View.

00:32:19.526 --> 00:32:20.900
We have a component
for Analytics

00:32:20.900 --> 00:32:23.370
that allows you to declaratively
create a dashboard,

00:32:23.370 --> 00:32:26.390
just by declaring a
couple Analytics charts.

00:32:26.390 --> 00:32:27.320
Awesome.

00:32:27.320 --> 00:32:31.050
We have an element for creating
Google Cloud Compute VM

00:32:31.050 --> 00:32:32.207
instances in the Cloud.

00:32:32.207 --> 00:32:33.790
You declare this
element on your page.

00:32:33.790 --> 00:32:36.209
And you create a VM
instance in the Cloud.

00:32:36.209 --> 00:32:37.000
It's crazy awesome.

00:32:37.000 --> 00:32:38.640
But it shows you the
power of this stuff.

00:32:38.640 --> 00:32:39.590
This collection is growing.

00:32:39.590 --> 00:32:40.496
It's probably buggy.

00:32:40.496 --> 00:32:41.870
Feel free to submit
pull requests

00:32:41.870 --> 00:32:43.550
and ask for more Components.

00:32:43.550 --> 00:32:45.980
We're happy to take them.

00:32:45.980 --> 00:32:48.420
So do we need Web Components?

00:32:48.420 --> 00:32:48.920
Yes.

00:32:48.920 --> 00:32:50.110
We need Web Components.

00:32:50.110 --> 00:32:51.443
Web Components are totally cool.

00:32:51.443 --> 00:32:54.780
I hope by now you've seen, sort
of, where this stuff is going.

00:32:54.780 --> 00:32:56.370
They bring a lot to the table.

00:32:56.370 --> 00:32:58.080
So productivity, we
can be productive.

00:32:58.080 --> 00:32:59.690
We can rapidly
develop stuff, just

00:32:59.690 --> 00:33:01.620
by reusing what somebody
else has built for us

00:33:01.620 --> 00:33:03.280
and iterating on top of that.

00:33:03.280 --> 00:33:04.720
We can be declarative, right?

00:33:04.720 --> 00:33:07.274
Just declare stuff
on your page and go.

00:33:07.274 --> 00:33:08.440
Markup is meaningful, again.

00:33:08.440 --> 00:33:09.400
It's composable.

00:33:09.400 --> 00:33:11.730
So we can compose applications
using smaller chunks,

00:33:11.730 --> 00:33:12.972
using Shadow DOM.

00:33:12.972 --> 00:33:13.910
It's maintainable.

00:33:13.910 --> 00:33:14.410
This is big.

00:33:14.410 --> 00:33:16.550
I can read Gmail source
one day and actually know

00:33:16.550 --> 00:33:19.310
what's going on just
by reading that stuff.

00:33:19.310 --> 00:33:20.090
It's reusable.

00:33:20.090 --> 00:33:22.260
I can find, I can import,
and I can use an element

00:33:22.260 --> 00:33:24.750
and just reuse it in my app.

00:33:24.750 --> 00:33:25.520
Extensible.

00:33:25.520 --> 00:33:25.730
Right?

00:33:25.730 --> 00:33:27.110
We have a common way now,
with Custom Elements,

00:33:27.110 --> 00:33:28.440
to extend Components.

00:33:28.440 --> 00:33:29.450
Other people's stuff.

00:33:29.450 --> 00:33:31.050
Or extend what the
platform gives us,

00:33:31.050 --> 00:33:33.760
like an h1 tag, or a div tag.

00:33:33.760 --> 00:33:34.330
Scoping.

00:33:34.330 --> 00:33:36.210
This is a really big
one for Shadow DOM.

00:33:36.210 --> 00:33:38.737
What Shadow DOM brings to the
table is DOM and CSS scoping.

00:33:38.737 --> 00:33:39.820
Our styles don't leak out.

00:33:39.820 --> 00:33:41.650
Our DOM is all local.

00:33:41.650 --> 00:33:43.219
And it's a per-element API.

00:33:43.219 --> 00:33:44.010
So Custom Elements.

00:33:44.010 --> 00:33:45.934
You're defining
your Elements API.

00:33:45.934 --> 00:33:47.850
The prototype, the
JavaScript-- all that stuff

00:33:47.850 --> 00:33:48.891
goes just on the element.

00:33:48.891 --> 00:33:50.869
It doesn't leak into
this global world.

00:33:50.869 --> 00:33:51.660
It's interoperable.

00:33:51.660 --> 00:33:54.360
We're at the browser's
lowest level, which is DOM.

00:33:54.360 --> 00:33:55.980
And you get access
for the tools.

00:33:55.980 --> 00:33:57.880
And the last one
is accessibility,

00:33:57.880 --> 00:34:01.120
which is on by default.

00:34:01.120 --> 00:34:02.537
So before I leave
you guys, I want

00:34:02.537 --> 00:34:05.036
to leave you with this quote,
this awesome quote by Dimitri,

00:34:05.036 --> 00:34:05.790
again.

00:34:05.790 --> 00:34:08.310
He said that, "Custom
Elements is a bedrock API.

00:34:08.310 --> 00:34:13.214
We should be able to build
all HTML elements with it."

00:34:13.214 --> 00:34:13.880
So that's crazy.

00:34:13.880 --> 00:34:15.929
Can we build all of HTML
with the technologies

00:34:15.929 --> 00:34:18.740
that we're adding to the
platform for Web Components?

00:34:18.740 --> 00:34:19.489
The answer is yes.

00:34:19.489 --> 00:34:20.672
We can get very far.

00:34:20.672 --> 00:34:22.130
So over a holiday
break, I actually

00:34:22.130 --> 00:34:23.744
experimented with this.

00:34:23.744 --> 00:34:26.790
I implemented the select
element using Polymer and Web

00:34:26.790 --> 00:34:29.580
Components, using Shadow
DOM styling features,

00:34:29.580 --> 00:34:32.139
using encapsulation,
DOM scoping.

00:34:32.139 --> 00:34:34.618
And you can see the Polymer
version at the top here.

00:34:34.618 --> 00:34:36.659
I don't want to bump it
up, because it'll totally

00:34:36.659 --> 00:34:37.868
mess it up.

00:34:37.868 --> 00:34:39.409
So you can see the
Shadow DOM, right?

00:34:39.409 --> 00:34:41.617
You can have a little overlay,
and it behaves exactly

00:34:41.617 --> 00:34:43.212
like the native
version of select,

00:34:43.212 --> 00:34:44.420
which is this little overlay.

00:34:44.420 --> 00:34:46.003
You could select
different properties.

00:34:46.003 --> 00:34:49.150
You can change the multiple
attribute on this element.

00:34:49.150 --> 00:34:51.150
And it has multi-select now.

00:34:51.150 --> 00:34:51.650
Right?

00:34:51.650 --> 00:34:52.909
So the really cool
thing about this

00:34:52.909 --> 00:34:55.100
is you can't tell the
difference between the two.

00:34:55.100 --> 00:34:55.719
Right?

00:34:55.719 --> 00:34:58.520
We can implement HTML using
the low-level primitives

00:34:58.520 --> 00:35:00.310
that the Web Component
APIs give us.

00:35:00.310 --> 00:35:02.580
That's what I wanted to show.

00:35:02.580 --> 00:35:04.760
So my question to you, my
thought experiment to you,

00:35:04.760 --> 00:35:09.330
is, hey, what if the entire web
platform was hosted on GitHub?

00:35:09.330 --> 00:35:12.140
What if the browser didn't
ship all these native tags

00:35:12.140 --> 00:35:13.260
by default?

00:35:13.260 --> 00:35:15.800
What if you had to go find,
import, and use those tags?

00:35:15.800 --> 00:35:17.906
Bring them in using
bower and other tools?

00:35:17.906 --> 00:35:19.530
And you said, hey,
I want to use an h1.

00:35:19.530 --> 00:35:20.340
I'll go off and get that.

00:35:20.340 --> 00:35:21.506
I want to use a marquee tag.

00:35:21.506 --> 00:35:23.050
I want to go get that.

00:35:23.050 --> 00:35:25.534
Maybe not a marquee tag, but.

00:35:25.534 --> 00:35:27.950
This is a really kind of cool
and mind-bending experiment.

00:35:27.950 --> 00:35:29.430
But there actually is
some folks on GitHub

00:35:29.430 --> 00:35:30.800
who are experimenting with this.

00:35:30.800 --> 00:35:34.160
They're seeing, can we implement
all of HTML's cool stuff,

00:35:34.160 --> 00:35:37.050
using just the primitives
of Web Components?

00:35:37.050 --> 00:35:38.930
It's really amazing stuff.

00:35:38.930 --> 00:35:40.947
So if you want to know
more about Polymer,

00:35:40.947 --> 00:35:42.780
you want to learn more
about Web Components,

00:35:42.780 --> 00:35:44.030
check out polymer-project.org.

00:35:44.030 --> 00:35:46.868
There's a lot of great
tutorials and information there.

00:35:46.868 --> 00:35:47.237
[MUSIC - TEGAN AND SARA
AND THE LONELY ISLAND,

00:35:47.237 --> 00:35:48.932
"EVERYTHING IS AWESOME!!!"]

00:35:48.932 --> 00:35:50.390
Components are the
building blocks.

00:35:50.390 --> 00:35:52.350
So I implore you to
go off and try them.

00:35:52.350 --> 00:35:53.720
Please don't get left behind.

00:35:53.720 --> 00:35:55.960
This is a fundamental
shift for web development.

00:35:55.960 --> 00:35:56.830
It's a really exciting one.

00:35:56.830 --> 00:35:58.290
It's a great time to
be a web developer.

00:35:58.290 --> 00:36:00.470
It's a bullet train, too,
so it's speeding away.

00:36:00.470 --> 00:36:02.425
So make sure you're on that.

00:36:02.425 --> 00:36:04.550
Feel free to give me feedback
on this presentation.

00:36:04.550 --> 00:36:06.600
I really thank you
guys for your time.

00:36:06.600 --> 00:36:09.170
The presentation is
up at this URL here.

00:36:09.170 --> 00:36:11.780
And if you want to tweet at
me or see the code on GitHub,

00:36:11.780 --> 00:36:14.310
those links are there, too.

