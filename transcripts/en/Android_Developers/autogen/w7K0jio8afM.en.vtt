WEBVTT
Kind: captions
Language: en

00:00:02.880 --> 00:00:06.679
[Music]

00:00:06.679 --> 00:00:06.689
[Music]
 

00:00:06.689 --> 00:00:09.780
[Music]
my name is Richard Euler I'm a software

00:00:09.780 --> 00:00:09.790
my name is Richard Euler I'm a software
 

00:00:09.790 --> 00:00:12.890
my name is Richard Euler I'm a software
engineer on the Android runtime team I

00:00:12.890 --> 00:00:12.900
engineer on the Android runtime team I
 

00:00:12.900 --> 00:00:15.570
engineer on the Android runtime team I
spent the last three years trying to

00:00:15.570 --> 00:00:15.580
spent the last three years trying to
 

00:00:15.580 --> 00:00:17.609
spent the last three years trying to
better understand memories on Android

00:00:17.609 --> 00:00:17.619
better understand memories on Android
 

00:00:17.619 --> 00:00:19.830
better understand memories on Android
and more recently I've been working with

00:00:19.830 --> 00:00:19.840
and more recently I've been working with
 

00:00:19.840 --> 00:00:21.960
and more recently I've been working with
first party app developers to tackle the

00:00:21.960 --> 00:00:21.970
first party app developers to tackle the
 

00:00:21.970 --> 00:00:24.120
first party app developers to tackle the
challenges of evaluating and improving

00:00:24.120 --> 00:00:24.130
challenges of evaluating and improving
 

00:00:24.130 --> 00:00:27.240
challenges of evaluating and improving
Android memory use it's great to see so

00:00:27.240 --> 00:00:27.250
Android memory use it's great to see so
 

00:00:27.250 --> 00:00:29.849
Android memory use it's great to see so
many of you here interested in Android

00:00:29.849 --> 00:00:29.859
many of you here interested in Android
 

00:00:29.859 --> 00:00:33.810
many of you here interested in Android
memory use to start off why should you

00:00:33.810 --> 00:00:33.820
memory use to start off why should you
 

00:00:33.820 --> 00:00:36.420
memory use to start off why should you
as an app developer care about memory

00:00:36.420 --> 00:00:36.430
as an app developer care about memory
 

00:00:36.430 --> 00:00:39.720
as an app developer care about memory
use for me it's really about the Android

00:00:39.720 --> 00:00:39.730
use for me it's really about the Android
 

00:00:39.730 --> 00:00:41.400
use for me it's really about the Android
ecosystem the ecosystem of applications

00:00:41.400 --> 00:00:41.410
ecosystem the ecosystem of applications
 

00:00:41.410 --> 00:00:45.119
ecosystem the ecosystem of applications
of devices and of the users of those

00:00:45.119 --> 00:00:45.129
of devices and of the users of those
 

00:00:45.129 --> 00:00:48.900
of devices and of the users of those
devices and where memory comes in into

00:00:48.900 --> 00:00:48.910
devices and where memory comes in into
 

00:00:48.910 --> 00:00:50.610
devices and where memory comes in into
play is not so much for the premium

00:00:50.610 --> 00:00:50.620
play is not so much for the premium
 

00:00:50.620 --> 00:00:52.560
play is not so much for the premium
devices where you have a lot of memory

00:00:52.560 --> 00:00:52.570
devices where you have a lot of memory
 

00:00:52.570 --> 00:00:54.000
devices where you have a lot of memory
available but much more for the

00:00:54.000 --> 00:00:54.010
available but much more for the
 

00:00:54.010 --> 00:00:56.279
available but much more for the
entry-level devices because these

00:00:56.279 --> 00:00:56.289
entry-level devices because these
 

00:00:56.289 --> 00:00:58.709
entry-level devices because these
devices need a decent selection of

00:00:58.709 --> 00:00:58.719
devices need a decent selection of
 

00:00:58.719 --> 00:01:01.009
devices need a decent selection of
though memory apps to work well if

00:01:01.009 --> 00:01:01.019
though memory apps to work well if
 

00:01:01.019 --> 00:01:03.599
though memory apps to work well if
application memory use and requirements

00:01:03.599 --> 00:01:03.609
application memory use and requirements
 

00:01:03.609 --> 00:01:06.930
application memory use and requirements
grow then the entry-level devices won't

00:01:06.930 --> 00:01:06.940
grow then the entry-level devices won't
 

00:01:06.940 --> 00:01:09.180
grow then the entry-level devices won't
work as well if they don't work as well

00:01:09.180 --> 00:01:09.190
work as well if they don't work as well
 

00:01:09.190 --> 00:01:11.100
work as well if they don't work as well
om which will not want to produce these

00:01:11.100 --> 00:01:11.110
om which will not want to produce these
 

00:01:11.110 --> 00:01:13.140
om which will not want to produce these
devices and if they don't produce these

00:01:13.140 --> 00:01:13.150
devices and if they don't produce these
 

00:01:13.150 --> 00:01:15.840
devices and if they don't produce these
devices well we're kind of excluding a

00:01:15.840 --> 00:01:15.850
devices well we're kind of excluding a
 

00:01:15.850 --> 00:01:18.210
devices well we're kind of excluding a
bunch of users from arendt Android

00:01:18.210 --> 00:01:18.220
bunch of users from arendt Android
 

00:01:18.220 --> 00:01:21.330
bunch of users from arendt Android
ecosystem and that's a bad thing so app

00:01:21.330 --> 00:01:21.340
ecosystem and that's a bad thing so app
 

00:01:21.340 --> 00:01:23.400
ecosystem and that's a bad thing so app
developers have a role to play when they

00:01:23.400 --> 00:01:23.410
developers have a role to play when they
 

00:01:23.410 --> 00:01:25.350
developers have a role to play when they
were developing their applications to do

00:01:25.350 --> 00:01:25.360
were developing their applications to do
 

00:01:25.360 --> 00:01:28.320
were developing their applications to do
whatever they can to be efficient in

00:01:28.320 --> 00:01:28.330
whatever they can to be efficient in
 

00:01:28.330 --> 00:01:30.030
whatever they can to be efficient in
your memory use to reduce your memory

00:01:30.030 --> 00:01:30.040
your memory use to reduce your memory
 

00:01:30.040 --> 00:01:32.310
your memory use to reduce your memory
use keep it from growing too much so

00:01:32.310 --> 00:01:32.320
use keep it from growing too much so
 

00:01:32.320 --> 00:01:34.110
use keep it from growing too much so
that we have a nice selection of low

00:01:34.110 --> 00:01:34.120
that we have a nice selection of low
 

00:01:34.120 --> 00:01:36.450
that we have a nice selection of low
memory applications so that entry level

00:01:36.450 --> 00:01:36.460
memory applications so that entry level
 

00:01:36.460 --> 00:01:39.090
memory applications so that entry level
devices behave well they work well and

00:01:39.090 --> 00:01:39.100
devices behave well they work well and
 

00:01:39.100 --> 00:01:42.210
devices behave well they work well and
if that happens OMS will produce these

00:01:42.210 --> 00:01:42.220
if that happens OMS will produce these
 

00:01:42.220 --> 00:01:44.670
if that happens OMS will produce these
devices and we can put them in the hands

00:01:44.670 --> 00:01:44.680
devices and we can put them in the hands
 

00:01:44.680 --> 00:01:49.290
devices and we can put them in the hands
of users to use our applications so in

00:01:49.290 --> 00:01:49.300
of users to use our applications so in
 

00:01:49.300 --> 00:01:51.180
of users to use our applications so in
this talk I'm going to talk about three

00:01:51.180 --> 00:01:51.190
this talk I'm going to talk about three
 

00:01:51.190 --> 00:01:54.270
this talk I'm going to talk about three
broad categories three areas first I'll

00:01:54.270 --> 00:01:54.280
broad categories three areas first I'll
 

00:01:54.280 --> 00:01:56.490
broad categories three areas first I'll
talk about the mechanisms that come into

00:01:56.490 --> 00:01:56.500
talk about the mechanisms that come into
 

00:01:56.500 --> 00:01:58.530
talk about the mechanisms that come into
play on Android device when it's running

00:01:58.530 --> 00:01:58.540
play on Android device when it's running
 

00:01:58.540 --> 00:02:00.840
play on Android device when it's running
low on memory and how that impacts the

00:02:00.840 --> 00:02:00.850
low on memory and how that impacts the
 

00:02:00.850 --> 00:02:04.410
low on memory and how that impacts the
user I'll talk about how we evaluate an

00:02:04.410 --> 00:02:04.420
user I'll talk about how we evaluate an
 

00:02:04.420 --> 00:02:07.230
user I'll talk about how we evaluate an
applications memory in fact and in

00:02:07.230 --> 00:02:07.240
applications memory in fact and in
 

00:02:07.240 --> 00:02:09.240
applications memory in fact and in
particular some very important factors

00:02:09.240 --> 00:02:09.250
particular some very important factors
 

00:02:09.250 --> 00:02:11.050
particular some very important factors
to be aware of that

00:02:11.050 --> 00:02:11.060
to be aware of that
 

00:02:11.060 --> 00:02:13.869
to be aware of that
come into play with that and third I

00:02:13.869 --> 00:02:13.879
come into play with that and third I
 

00:02:13.879 --> 00:02:16.119
come into play with that and third I
will give you some tips for how to

00:02:16.119 --> 00:02:16.129
will give you some tips for how to
 

00:02:16.129 --> 00:02:18.449
will give you some tips for how to
reduce your applications memory in fact

00:02:18.449 --> 00:02:18.459
reduce your applications memory in fact
 

00:02:18.459 --> 00:02:20.589
reduce your applications memory in fact
especially given that a lot of the

00:02:20.589 --> 00:02:20.599
especially given that a lot of the
 

00:02:20.599 --> 00:02:22.839
especially given that a lot of the
allocations going on in your application

00:02:22.839 --> 00:02:22.849
allocations going on in your application
 

00:02:22.849 --> 00:02:25.240
allocations going on in your application
or originated deep within the Android

00:02:25.240 --> 00:02:25.250
or originated deep within the Android
 

00:02:25.250 --> 00:02:29.890
or originated deep within the Android
stack on which it's running okay

00:02:29.890 --> 00:02:29.900
stack on which it's running okay
 

00:02:29.900 --> 00:02:33.250
stack on which it's running okay
let's start what happens on the device

00:02:33.250 --> 00:02:33.260
let's start what happens on the device
 

00:02:33.260 --> 00:02:35.619
let's start what happens on the device
when it's running low on memory

00:02:35.619 --> 00:02:35.629
when it's running low on memory
 

00:02:35.629 --> 00:02:39.309
when it's running low on memory
well memory on device physical memory on

00:02:39.309 --> 00:02:39.319
well memory on device physical memory on
 

00:02:39.319 --> 00:02:41.530
well memory on device physical memory on
device is organized or grouped into

00:02:41.530 --> 00:02:41.540
device is organized or grouped into
 

00:02:41.540 --> 00:02:43.930
device is organized or grouped into
pages and each page is typically around

00:02:43.930 --> 00:02:43.940
pages and each page is typically around
 

00:02:43.940 --> 00:02:47.500
pages and each page is typically around
four kilobytes different pages can be

00:02:47.500 --> 00:02:47.510
four kilobytes different pages can be
 

00:02:47.510 --> 00:02:50.740
four kilobytes different pages can be
used for different things so pages can

00:02:50.740 --> 00:02:50.750
used for different things so pages can
 

00:02:50.750 --> 00:02:53.410
used for different things so pages can
be used pages these are pages that are

00:02:53.410 --> 00:02:53.420
be used pages these are pages that are
 

00:02:53.420 --> 00:02:55.869
be used pages these are pages that are
actively being used by processes they

00:02:55.869 --> 00:02:55.879
actively being used by processes they
 

00:02:55.879 --> 00:02:57.970
actively being used by processes they
can be cached pages these are pages that

00:02:57.970 --> 00:02:57.980
can be cached pages these are pages that
 

00:02:57.980 --> 00:02:59.890
can be cached pages these are pages that
of memory that are being used by

00:02:59.890 --> 00:02:59.900
of memory that are being used by
 

00:02:59.900 --> 00:03:03.580
of memory that are being used by
processes but the data they contain also

00:03:03.580 --> 00:03:03.590
processes but the data they contain also
 

00:03:03.590 --> 00:03:06.009
processes but the data they contain also
lives somewhere on the device storage

00:03:06.009 --> 00:03:06.019
lives somewhere on the device storage
 

00:03:06.019 --> 00:03:07.690
lives somewhere on the device storage
which means we can sometimes reclaim

00:03:07.690 --> 00:03:07.700
which means we can sometimes reclaim
 

00:03:07.700 --> 00:03:10.300
which means we can sometimes reclaim
these pages and then there might be free

00:03:10.300 --> 00:03:10.310
these pages and then there might be free
 

00:03:10.310 --> 00:03:11.979
these pages and then there might be free
pages of memory sitting on the device

00:03:11.979 --> 00:03:11.989
pages of memory sitting on the device
 

00:03:11.989 --> 00:03:15.129
pages of memory sitting on the device
that you're not using so what I've done

00:03:15.129 --> 00:03:15.139
that you're not using so what I've done
 

00:03:15.139 --> 00:03:18.849
that you're not using so what I've done
is I took a two gigabyte device and I

00:03:18.849 --> 00:03:18.859
is I took a two gigabyte device and I
 

00:03:18.859 --> 00:03:21.009
is I took a two gigabyte device and I
started it doing nothing so at the very

00:03:21.009 --> 00:03:21.019
started it doing nothing so at the very
 

00:03:21.019 --> 00:03:22.690
started it doing nothing so at the very
beginning of time the runtimes not

00:03:22.690 --> 00:03:22.700
beginning of time the runtimes not
 

00:03:22.700 --> 00:03:25.449
beginning of time the runtimes not
running and then I started using it more

00:03:25.449 --> 00:03:25.459
running and then I started using it more
 

00:03:25.459 --> 00:03:26.650
running and then I started using it more
and more so lots of different

00:03:26.650 --> 00:03:26.660
and more so lots of different
 

00:03:26.660 --> 00:03:30.250
and more so lots of different
applications exercising them which has

00:03:30.250 --> 00:03:30.260
applications exercising them which has
 

00:03:30.260 --> 00:03:32.259
applications exercising them which has
the effect of using more and more memory

00:03:32.259 --> 00:03:32.269
the effect of using more and more memory
 

00:03:32.269 --> 00:03:35.140
the effect of using more and more memory
on the device over time so we can see at

00:03:35.140 --> 00:03:35.150
on the device over time so we can see at
 

00:03:35.150 --> 00:03:38.409
on the device over time so we can see at
the beginning the flatline there is

00:03:38.409 --> 00:03:38.419
the beginning the flatline there is
 

00:03:38.419 --> 00:03:40.599
the beginning the flatline there is
before I started the runtime and I start

00:03:40.599 --> 00:03:40.609
before I started the runtime and I start
 

00:03:40.609 --> 00:03:43.750
before I started the runtime and I start
the runtime up there's plenty of free

00:03:43.750 --> 00:03:43.760
the runtime up there's plenty of free
 

00:03:43.760 --> 00:03:45.849
the runtime up there's plenty of free
memory available on the device and this

00:03:45.849 --> 00:03:45.859
memory available on the device and this
 

00:03:45.859 --> 00:03:47.830
memory available on the device and this
is a happy device because if an

00:03:47.830 --> 00:03:47.840
is a happy device because if an
 

00:03:47.840 --> 00:03:50.589
is a happy device because if an
application needs more memory the kernel

00:03:50.589 --> 00:03:50.599
application needs more memory the kernel
 

00:03:50.599 --> 00:03:52.479
application needs more memory the kernel
can satisfy that request right away from

00:03:52.479 --> 00:03:52.489
can satisfy that request right away from
 

00:03:52.489 --> 00:03:57.099
can satisfy that request right away from
the free memory over time as you use

00:03:57.099 --> 00:03:57.109
the free memory over time as you use
 

00:03:57.109 --> 00:03:59.319
the free memory over time as you use
more memory the free memory gets

00:03:59.319 --> 00:03:59.329
more memory the free memory gets
 

00:03:59.329 --> 00:04:02.379
more memory the free memory gets
exhausted it goes down and to avoid very

00:04:02.379 --> 00:04:02.389
exhausted it goes down and to avoid very
 

00:04:02.389 --> 00:04:04.780
exhausted it goes down and to avoid very
bad things from happening the Linux

00:04:04.780 --> 00:04:04.790
bad things from happening the Linux
 

00:04:04.790 --> 00:04:07.479
bad things from happening the Linux
kernel has this mechanism that kicks in

00:04:07.479 --> 00:04:07.489
kernel has this mechanism that kicks in
 

00:04:07.489 --> 00:04:11.559
kernel has this mechanism that kicks in
called K swap D and K swap T's job is to

00:04:11.559 --> 00:04:11.569
called K swap D and K swap T's job is to
 

00:04:11.569 --> 00:04:14.619
called K swap D and K swap T's job is to
find more free memory this kicks in when

00:04:14.619 --> 00:04:14.629
find more free memory this kicks in when
 

00:04:14.629 --> 00:04:17.110
find more free memory this kicks in when
the the free memory goes below what I'm

00:04:17.110 --> 00:04:17.120
the the free memory goes below what I'm
 

00:04:17.120 --> 00:04:19.240
the the free memory goes below what I'm
flying here the K swap D threshold and

00:04:19.240 --> 00:04:19.250
flying here the K swap D threshold and
 

00:04:19.250 --> 00:04:22.899
flying here the K swap D threshold and
the main mechanism that case WAP D uses

00:04:22.899 --> 00:04:22.909
the main mechanism that case WAP D uses
 

00:04:22.909 --> 00:04:24.220
the main mechanism that case WAP D uses
to find morph remember

00:04:24.220 --> 00:04:24.230
to find morph remember
 

00:04:24.230 --> 00:04:30.760
to find morph remember
is to reclaim cache pages now if an app

00:04:30.760 --> 00:04:30.770
is to reclaim cache pages now if an app
 

00:04:30.770 --> 00:04:34.270
is to reclaim cache pages now if an app
goes to access a cached page or memory

00:04:34.270 --> 00:04:34.280
goes to access a cached page or memory
 

00:04:34.280 --> 00:04:35.800
goes to access a cached page or memory
that was on a cached page that's been

00:04:35.800 --> 00:04:35.810
that was on a cached page that's been
 

00:04:35.810 --> 00:04:37.750
that was on a cached page that's been
reclaimed it's going to take a little

00:04:37.750 --> 00:04:37.760
reclaimed it's going to take a little
 

00:04:37.760 --> 00:04:39.640
reclaimed it's going to take a little
extra time to reload that data from

00:04:39.640 --> 00:04:39.650
extra time to reload that data from
 

00:04:39.650 --> 00:04:42.550
extra time to reload that data from
device storage but probably the users

00:04:42.550 --> 00:04:42.560
device storage but probably the users
 

00:04:42.560 --> 00:04:44.170
device storage but probably the users
not going to be noticing this so that's

00:04:44.170 --> 00:04:44.180
not going to be noticing this so that's
 

00:04:44.180 --> 00:04:45.930
not going to be noticing this so that's
that's okay

00:04:45.930 --> 00:04:45.940
that's okay
 

00:04:45.940 --> 00:04:48.730
that's okay
now as I exercise more and more

00:04:48.730 --> 00:04:48.740
now as I exercise more and more
 

00:04:48.740 --> 00:04:52.210
now as I exercise more and more
applications they use more memory the

00:04:52.210 --> 00:04:52.220
applications they use more memory the
 

00:04:52.220 --> 00:04:54.010
applications they use more memory the
number of cache pages is going to fall

00:04:54.010 --> 00:04:54.020
number of cache pages is going to fall
 

00:04:54.020 --> 00:04:57.160
number of cache pages is going to fall
as k swab D starts to reclaim them if it

00:04:57.160 --> 00:04:57.170
as k swab D starts to reclaim them if it
 

00:04:57.170 --> 00:04:59.500
as k swab D starts to reclaim them if it
gets too low there's too few cache pages

00:04:59.500 --> 00:04:59.510
gets too low there's too few cache pages
 

00:04:59.510 --> 00:05:01.780
gets too low there's too few cache pages
then the device can start to thrash and

00:05:01.780 --> 00:05:01.790
then the device can start to thrash and
 

00:05:01.790 --> 00:05:04.090
then the device can start to thrash and
this is a very bad thing because it's

00:05:04.090 --> 00:05:04.100
this is a very bad thing because it's
 

00:05:04.100 --> 00:05:05.620
this is a very bad thing because it's
basically the device will completely

00:05:05.620 --> 00:05:05.630
basically the device will completely
 

00:05:05.630 --> 00:05:07.870
basically the device will completely
lock up so on Android we have a

00:05:07.870 --> 00:05:07.880
lock up so on Android we have a
 

00:05:07.880 --> 00:05:09.970
lock up so on Android we have a
mechanism which is called the low memory

00:05:09.970 --> 00:05:09.980
mechanism which is called the low memory
 

00:05:09.980 --> 00:05:12.280
mechanism which is called the low memory
killer that kicks in when the amount of

00:05:12.280 --> 00:05:12.290
killer that kicks in when the amount of
 

00:05:12.290 --> 00:05:15.340
killer that kicks in when the amount of
cache memory falls too low and the way

00:05:15.340 --> 00:05:15.350
cache memory falls too low and the way
 

00:05:15.350 --> 00:05:17.590
cache memory falls too low and the way
this works is low memory killer is going

00:05:17.590 --> 00:05:17.600
this works is low memory killer is going
 

00:05:17.600 --> 00:05:19.780
this works is low memory killer is going
to kill pick the process on the device

00:05:19.780 --> 00:05:19.790
to kill pick the process on the device
 

00:05:19.790 --> 00:05:22.360
to kill pick the process on the device
and it's going to kill it and it's going

00:05:22.360 --> 00:05:22.370
and it's going to kill it and it's going
 

00:05:22.370 --> 00:05:24.040
and it's going to kill it and it's going
to get back all the memory that that

00:05:24.040 --> 00:05:24.050
to get back all the memory that that
 

00:05:24.050 --> 00:05:27.940
to get back all the memory that that
process was using now this is a this is

00:05:27.940 --> 00:05:27.950
process was using now this is a this is
 

00:05:27.950 --> 00:05:31.240
process was using now this is a this is
an unhappy state to be in especially if

00:05:31.240 --> 00:05:31.250
an unhappy state to be in especially if
 

00:05:31.250 --> 00:05:33.340
an unhappy state to be in especially if
the low memory killer kills a process

00:05:33.340 --> 00:05:33.350
the low memory killer kills a process
 

00:05:33.350 --> 00:05:37.420
the low memory killer kills a process
that the user cares about so let me go

00:05:37.420 --> 00:05:37.430
that the user cares about so let me go
 

00:05:37.430 --> 00:05:40.000
that the user cares about so let me go
through and tell you a little bit more

00:05:40.000 --> 00:05:40.010
through and tell you a little bit more
 

00:05:40.010 --> 00:05:41.890
through and tell you a little bit more
about how the low memory killer decides

00:05:41.890 --> 00:05:41.900
about how the low memory killer decides
 

00:05:41.900 --> 00:05:45.550
about how the low memory killer decides
what to kill Android keeps track of the

00:05:45.550 --> 00:05:45.560
what to kill Android keeps track of the
 

00:05:45.560 --> 00:05:47.260
what to kill Android keeps track of the
processes that are running on the device

00:05:47.260 --> 00:05:47.270
processes that are running on the device
 

00:05:47.270 --> 00:05:50.260
processes that are running on the device
and it keeps them in a priority order so

00:05:50.260 --> 00:05:50.270
and it keeps them in a priority order so
 

00:05:50.270 --> 00:05:52.750
and it keeps them in a priority order so
the highest priority processes are

00:05:52.750 --> 00:05:52.760
the highest priority processes are
 

00:05:52.760 --> 00:05:55.240
the highest priority processes are
native processes these are ones that

00:05:55.240 --> 00:05:55.250
native processes these are ones that
 

00:05:55.250 --> 00:05:57.670
native processes these are ones that
come with Linux things like init K swap

00:05:57.670 --> 00:05:57.680
come with Linux things like init K swap
 

00:05:57.680 --> 00:06:00.520
come with Linux things like init K swap
D which I told you about demons like net

00:06:00.520 --> 00:06:00.530
D which I told you about demons like net
 

00:06:00.530 --> 00:06:04.930
D which I told you about demons like net
D log D and Android specific daemons a

00:06:04.930 --> 00:06:04.940
D log D and Android specific daemons a
 

00:06:04.940 --> 00:06:07.150
D log D and Android specific daemons a
DB D install D basically any native

00:06:07.150 --> 00:06:07.160
DB D install D basically any native
 

00:06:07.160 --> 00:06:09.760
DB D install D basically any native
process that's running is categorized

00:06:09.760 --> 00:06:09.770
process that's running is categorized
 

00:06:09.770 --> 00:06:12.550
process that's running is categorized
into this the next highest priority

00:06:12.550 --> 00:06:12.560
into this the next highest priority
 

00:06:12.560 --> 00:06:15.280
into this the next highest priority
process we have is the system server

00:06:15.280 --> 00:06:15.290
process we have is the system server
 

00:06:15.290 --> 00:06:19.120
process we have is the system server
which is maintaining this list followed

00:06:19.120 --> 00:06:19.130
which is maintaining this list followed
 

00:06:19.130 --> 00:06:20.290
which is maintaining this list followed
by what are known as persistent

00:06:20.290 --> 00:06:20.300
by what are known as persistent
 

00:06:20.300 --> 00:06:22.180
by what are known as persistent
processes these are kind of core

00:06:22.180 --> 00:06:22.190
processes these are kind of core
 

00:06:22.190 --> 00:06:26.260
processes these are kind of core
functionality so telephony NFC SMS those

00:06:26.260 --> 00:06:26.270
functionality so telephony NFC SMS those
 

00:06:26.270 --> 00:06:29.920
functionality so telephony NFC SMS those
kinds of things next we have the

00:06:29.920 --> 00:06:29.930
kinds of things next we have the
 

00:06:29.930 --> 00:06:31.900
kinds of things next we have the
foreground app so this is going to be

00:06:31.900 --> 00:06:31.910
foreground app so this is going to be
 

00:06:31.910 --> 00:06:33.490
foreground app so this is going to be
the application that the user is

00:06:33.490 --> 00:06:33.500
the application that the user is
 

00:06:33.500 --> 00:06:35.590
the application that the user is
directly interacting with in this case

00:06:35.590 --> 00:06:35.600
directly interacting with in this case
 

00:06:35.600 --> 00:06:37.239
directly interacting with in this case
perhaps e users

00:06:37.239 --> 00:06:37.249
perhaps e users
 

00:06:37.249 --> 00:06:38.769
perhaps e users
a webpage so they're interacting with

00:06:38.769 --> 00:06:38.779
a webpage so they're interacting with
 

00:06:38.779 --> 00:06:43.389
a webpage so they're interacting with
the chrome app next in priority or what

00:06:43.389 --> 00:06:43.399
the chrome app next in priority or what
 

00:06:43.399 --> 00:06:45.129
the chrome app next in priority or what
are called perceptible or visible

00:06:45.129 --> 00:06:45.139
are called perceptible or visible
 

00:06:45.139 --> 00:06:48.129
are called perceptible or visible
processes these are not processes the

00:06:48.129 --> 00:06:48.139
processes these are not processes the
 

00:06:48.139 --> 00:06:50.459
processes these are not processes the
users directly interacting with but

00:06:50.459 --> 00:06:50.469
users directly interacting with but
 

00:06:50.469 --> 00:06:53.109
users directly interacting with but
perceptible in some way so for instance

00:06:53.109 --> 00:06:53.119
perceptible in some way so for instance
 

00:06:53.119 --> 00:06:55.119
perceptible in some way so for instance
if you have a search process maybe it

00:06:55.119 --> 00:06:55.129
if you have a search process maybe it
 

00:06:55.129 --> 00:06:57.669
if you have a search process maybe it
has a little bit of UI on the screen or

00:06:57.669 --> 00:06:57.679
has a little bit of UI on the screen or
 

00:06:57.679 --> 00:06:59.979
has a little bit of UI on the screen or
if the users listening to music in the

00:06:59.979 --> 00:06:59.989
if the users listening to music in the
 

00:06:59.989 --> 00:07:01.809
if the users listening to music in the
background then they can hear that music

00:07:01.809 --> 00:07:01.819
background then they can hear that music
 

00:07:01.819 --> 00:07:04.889
background then they can hear that music
to their headphones they can perceive it

00:07:04.889 --> 00:07:04.899
to their headphones they can perceive it
 

00:07:04.899 --> 00:07:07.059
to their headphones they can perceive it
after the perceptible apps we have

00:07:07.059 --> 00:07:07.069
after the perceptible apps we have
 

00:07:07.069 --> 00:07:09.369
after the perceptible apps we have
services these are services started by

00:07:09.369 --> 00:07:09.379
services these are services started by
 

00:07:09.379 --> 00:07:12.369
services these are services started by
applications for things like syncing or

00:07:12.369 --> 00:07:12.379
applications for things like syncing or
 

00:07:12.379 --> 00:07:16.149
applications for things like syncing or
uploading downloading from cloud and

00:07:16.149 --> 00:07:16.159
uploading downloading from cloud and
 

00:07:16.159 --> 00:07:17.799
uploading downloading from cloud and
then we have the whole map this is what

00:07:17.799 --> 00:07:17.809
then we have the whole map this is what
 

00:07:17.809 --> 00:07:18.819
then we have the whole map this is what
you get when you hit the home button

00:07:18.819 --> 00:07:18.829
you get when you hit the home button
 

00:07:18.829 --> 00:07:21.039
you get when you hit the home button
that often hosts your wallpaper if you

00:07:21.039 --> 00:07:21.049
that often hosts your wallpaper if you
 

00:07:21.049 --> 00:07:23.739
that often hosts your wallpaper if you
have something there so in addition to

00:07:23.739 --> 00:07:23.749
have something there so in addition to
 

00:07:23.749 --> 00:07:26.109
have something there so in addition to
these running processes we also keep

00:07:26.109 --> 00:07:26.119
these running processes we also keep
 

00:07:26.119 --> 00:07:27.729
these running processes we also keep
track of what the previous application

00:07:27.729 --> 00:07:27.739
track of what the previous application
 

00:07:27.739 --> 00:07:31.029
track of what the previous application
the user used was so maybe they're using

00:07:31.029 --> 00:07:31.039
the user used was so maybe they're using
 

00:07:31.039 --> 00:07:33.729
the user used was so maybe they're using
this red app that you're a red app and

00:07:33.729 --> 00:07:33.739
this red app that you're a red app and
 

00:07:33.739 --> 00:07:35.859
this red app that you're a red app and
it brings them to Chrome with a link

00:07:35.859 --> 00:07:35.869
it brings them to Chrome with a link
 

00:07:35.869 --> 00:07:38.049
it brings them to Chrome with a link
then when they've switched to Chrome

00:07:38.049 --> 00:07:38.059
then when they've switched to Chrome
 

00:07:38.059 --> 00:07:40.419
then when they've switched to Chrome
that app is going to be the previous app

00:07:40.419 --> 00:07:40.429
that app is going to be the previous app
 

00:07:40.429 --> 00:07:44.019
that app is going to be the previous app
and we also keep in memory a bunch of

00:07:44.019 --> 00:07:44.029
and we also keep in memory a bunch of
 

00:07:44.029 --> 00:07:47.259
and we also keep in memory a bunch of
other processes which are cached

00:07:47.259 --> 00:07:47.269
other processes which are cached
 

00:07:47.269 --> 00:07:51.249
other processes which are cached
applications the user used before some

00:07:51.249 --> 00:07:51.259
applications the user used before some
 

00:07:51.259 --> 00:07:53.019
applications the user used before some
of them may be recently some of them not

00:07:53.019 --> 00:07:53.029
of them may be recently some of them not
 

00:07:53.029 --> 00:07:55.600
of them may be recently some of them not
for a little bit of a while I want to

00:07:55.600 --> 00:07:55.610
for a little bit of a while I want to
 

00:07:55.610 --> 00:07:57.969
for a little bit of a while I want to
point out here that these cast processes

00:07:57.969 --> 00:07:57.979
point out here that these cast processes
 

00:07:57.979 --> 00:07:59.859
point out here that these cast processes
when I use the term cast this is a

00:07:59.859 --> 00:07:59.869
when I use the term cast this is a
 

00:07:59.869 --> 00:08:01.749
when I use the term cast this is a
different use of the term cast than the

00:08:01.749 --> 00:08:01.759
different use of the term cast than the
 

00:08:01.759 --> 00:08:04.239
different use of the term cast than the
cast memory pages I was talking about

00:08:04.239 --> 00:08:04.249
cast memory pages I was talking about
 

00:08:04.249 --> 00:08:07.689
cast memory pages I was talking about
previously okay so the reason we keep

00:08:07.689 --> 00:08:07.699
previously okay so the reason we keep
 

00:08:07.699 --> 00:08:10.449
previously okay so the reason we keep
around previous and cached processes is

00:08:10.449 --> 00:08:10.459
around previous and cached processes is
 

00:08:10.459 --> 00:08:12.639
around previous and cached processes is
because if a user wants to switch to one

00:08:12.639 --> 00:08:12.649
because if a user wants to switch to one
 

00:08:12.649 --> 00:08:15.249
because if a user wants to switch to one
of these applications and say they want

00:08:15.249 --> 00:08:15.259
of these applications and say they want
 

00:08:15.259 --> 00:08:16.929
of these applications and say they want
to switch to the previous application

00:08:16.929 --> 00:08:16.939
to switch to the previous application
 

00:08:16.939 --> 00:08:19.899
to switch to the previous application
it's very quick to switch to that oh I

00:08:19.899 --> 00:08:19.909
it's very quick to switch to that oh I
 

00:08:19.909 --> 00:08:22.929
it's very quick to switch to that oh I
should say this is for a device in a

00:08:22.929 --> 00:08:22.939
should say this is for a device in a
 

00:08:22.939 --> 00:08:24.969
should say this is for a device in a
normal memory state so if you want to

00:08:24.969 --> 00:08:24.979
normal memory state so if you want to
 

00:08:24.979 --> 00:08:26.769
normal memory state so if you want to
switch to a previous application that's

00:08:26.769 --> 00:08:26.779
switch to a previous application that's
 

00:08:26.779 --> 00:08:29.169
switch to a previous application that's
very quick but also if you want to

00:08:29.169 --> 00:08:29.179
very quick but also if you want to
 

00:08:29.179 --> 00:08:30.909
very quick but also if you want to
switch to an application that happens to

00:08:30.909 --> 00:08:30.919
switch to an application that happens to
 

00:08:30.919 --> 00:08:33.339
switch to an application that happens to
be in a cast process that's very quick

00:08:33.339 --> 00:08:33.349
be in a cast process that's very quick
 

00:08:33.349 --> 00:08:35.699
be in a cast process that's very quick
to do because it's already in memory if

00:08:35.699 --> 00:08:35.709
to do because it's already in memory if
 

00:08:35.709 --> 00:08:39.249
to do because it's already in memory if
we step back though and say well what

00:08:39.249 --> 00:08:39.259
we step back though and say well what
 

00:08:39.259 --> 00:08:41.230
we step back though and say well what
happens when the device is low on memory

00:08:41.230 --> 00:08:41.240
happens when the device is low on memory
 

00:08:41.240 --> 00:08:45.939
happens when the device is low on memory
in that case we could imagine the memory

00:08:45.939 --> 00:08:45.949
in that case we could imagine the memory
 

00:08:45.949 --> 00:08:47.980
in that case we could imagine the memory
used by the the running applications is

00:08:47.980 --> 00:08:47.990
used by the the running applications is
 

00:08:47.990 --> 00:08:49.199
used by the the running applications is
growing the

00:08:49.199 --> 00:08:49.209
growing the
 

00:08:49.209 --> 00:08:51.809
growing the
of cache pages drops below the low

00:08:51.809 --> 00:08:51.819
of cache pages drops below the low
 

00:08:51.819 --> 00:08:53.519
of cache pages drops below the low
memory killer threshold the low memory

00:08:53.519 --> 00:08:53.529
memory killer threshold the low memory
 

00:08:53.529 --> 00:08:56.429
memory killer threshold the low memory
killer now has to come in and kill

00:08:56.429 --> 00:08:56.439
killer now has to come in and kill
 

00:08:56.439 --> 00:08:58.859
killer now has to come in and kill
something to free up some memory what is

00:08:58.859 --> 00:08:58.869
something to free up some memory what is
 

00:08:58.869 --> 00:09:00.299
something to free up some memory what is
going to start killing from the bottom

00:09:00.299 --> 00:09:00.309
going to start killing from the bottom
 

00:09:00.309 --> 00:09:03.749
going to start killing from the bottom
to this list so maybe it kills this blue

00:09:03.749 --> 00:09:03.759
to this list so maybe it kills this blue
 

00:09:03.759 --> 00:09:06.960
to this list so maybe it kills this blue
application that's gone we get some more

00:09:06.960 --> 00:09:06.970
application that's gone we get some more
 

00:09:06.970 --> 00:09:09.030
application that's gone we get some more
memory back for the applications that

00:09:09.030 --> 00:09:09.040
memory back for the applications that
 

00:09:09.040 --> 00:09:11.429
memory back for the applications that
are still running but if the user now

00:09:11.429 --> 00:09:11.439
are still running but if the user now
 

00:09:11.439 --> 00:09:13.139
are still running but if the user now
wants to switch and start using that

00:09:13.139 --> 00:09:13.149
wants to switch and start using that
 

00:09:13.149 --> 00:09:15.989
wants to switch and start using that
blue application it's not cached any

00:09:15.989 --> 00:09:15.999
blue application it's not cached any
 

00:09:15.999 --> 00:09:18.259
blue application it's not cached any
longer it means it's going to take a

00:09:18.259 --> 00:09:18.269
longer it means it's going to take a
 

00:09:18.269 --> 00:09:21.119
longer it means it's going to take a
noticeably long time to launch that

00:09:21.119 --> 00:09:21.129
noticeably long time to launch that
 

00:09:21.129 --> 00:09:23.220
noticeably long time to launch that
application that could be 2 or 3 seconds

00:09:23.220 --> 00:09:23.230
application that could be 2 or 3 seconds
 

00:09:23.230 --> 00:09:25.710
application that could be 2 or 3 seconds
and maybe it's lost some state so this

00:09:25.710 --> 00:09:25.720
and maybe it's lost some state so this
 

00:09:25.720 --> 00:09:27.509
and maybe it's lost some state so this
is where the user first starts to really

00:09:27.509 --> 00:09:27.519
is where the user first starts to really
 

00:09:27.519 --> 00:09:29.819
is where the user first starts to really
feel Oh something something's going on

00:09:29.819 --> 00:09:29.829
feel Oh something something's going on
 

00:09:29.829 --> 00:09:34.350
feel Oh something something's going on
here that's making things slower if the

00:09:34.350 --> 00:09:34.360
here that's making things slower if the
 

00:09:34.360 --> 00:09:36.449
here that's making things slower if the
processes that are running continue to

00:09:36.449 --> 00:09:36.459
processes that are running continue to
 

00:09:36.459 --> 00:09:39.210
processes that are running continue to
use more memory so we get under more

00:09:39.210 --> 00:09:39.220
use more memory so we get under more
 

00:09:39.220 --> 00:09:41.369
use more memory so we get under more
memory pressure low memory killer is

00:09:41.369 --> 00:09:41.379
memory pressure low memory killer is
 

00:09:41.379 --> 00:09:43.109
memory pressure low memory killer is
going to start to kill more cache

00:09:43.109 --> 00:09:43.119
going to start to kill more cache
 

00:09:43.119 --> 00:09:46.230
going to start to kill more cache
processes if they continue to grow more

00:09:46.230 --> 00:09:46.240
processes if they continue to grow more
 

00:09:46.240 --> 00:09:48.989
processes if they continue to grow more
and more until eventually there's only a

00:09:48.989 --> 00:09:48.999
and more until eventually there's only a
 

00:09:48.999 --> 00:09:51.929
and more until eventually there's only a
few cast processes left at this point we

00:09:51.929 --> 00:09:51.939
few cast processes left at this point we
 

00:09:51.939 --> 00:09:53.970
few cast processes left at this point we
say the device memory status is critical

00:09:53.970 --> 00:09:53.980
say the device memory status is critical
 

00:09:53.980 --> 00:09:56.789
say the device memory status is critical
this is a very bad place to be if the

00:09:56.789 --> 00:09:56.799
this is a very bad place to be if the
 

00:09:56.799 --> 00:09:59.429
this is a very bad place to be if the
running processes continue to use more

00:09:59.429 --> 00:09:59.439
running processes continue to use more
 

00:09:59.439 --> 00:10:01.379
running processes continue to use more
memory though the low memory killer is

00:10:01.379 --> 00:10:01.389
memory though the low memory killer is
 

00:10:01.389 --> 00:10:03.410
memory though the low memory killer is
going to have to kill more processes

00:10:03.410 --> 00:10:03.420
going to have to kill more processes
 

00:10:03.420 --> 00:10:05.489
going to have to kill more processes
eventually it's going to end up killing

00:10:05.489 --> 00:10:05.499
eventually it's going to end up killing
 

00:10:05.499 --> 00:10:08.100
eventually it's going to end up killing
the whole map at this point the users

00:10:08.100 --> 00:10:08.110
the whole map at this point the users
 

00:10:08.110 --> 00:10:09.989
the whole map at this point the users
going to ask well hey what just happened

00:10:09.989 --> 00:10:09.999
going to ask well hey what just happened
 

00:10:09.999 --> 00:10:11.579
going to ask well hey what just happened
to my wallpaper because when they go

00:10:11.579 --> 00:10:11.589
to my wallpaper because when they go
 

00:10:11.589 --> 00:10:13.470
to my wallpaper because when they go
home it's gonna be a black screen for a

00:10:13.470 --> 00:10:13.480
home it's gonna be a black screen for a
 

00:10:13.480 --> 00:10:15.419
home it's gonna be a black screen for a
few seconds before the wallpaper starts

00:10:15.419 --> 00:10:15.429
few seconds before the wallpaper starts
 

00:10:15.429 --> 00:10:19.019
few seconds before the wallpaper starts
up again if it's even worse maybe a

00:10:19.019 --> 00:10:19.029
up again if it's even worse maybe a
 

00:10:19.029 --> 00:10:21.539
up again if it's even worse maybe a
perceptible process is killed the users

00:10:21.539 --> 00:10:21.549
perceptible process is killed the users
 

00:10:21.549 --> 00:10:22.949
perceptible process is killed the users
going to say hey what just happened to

00:10:22.949 --> 00:10:22.959
going to say hey what just happened to
 

00:10:22.959 --> 00:10:24.600
going to say hey what just happened to
my music I was listening and it just

00:10:24.600 --> 00:10:24.610
my music I was listening and it just
 

00:10:24.610 --> 00:10:29.280
my music I was listening and it just
stopped a really bad case the foreground

00:10:29.280 --> 00:10:29.290
stopped a really bad case the foreground
 

00:10:29.290 --> 00:10:30.960
stopped a really bad case the foreground
app is killed to the user this looks

00:10:30.960 --> 00:10:30.970
app is killed to the user this looks
 

00:10:30.970 --> 00:10:33.509
app is killed to the user this looks
like the app crashed and the most

00:10:33.509 --> 00:10:33.519
like the app crashed and the most
 

00:10:33.519 --> 00:10:35.999
like the app crashed and the most
extreme case you can get into for a low

00:10:35.999 --> 00:10:36.009
extreme case you can get into for a low
 

00:10:36.009 --> 00:10:38.669
extreme case you can get into for a low
memory killer basically it needs to kill

00:10:38.669 --> 00:10:38.679
memory killer basically it needs to kill
 

00:10:38.679 --> 00:10:40.799
memory killer basically it needs to kill
the system server this looks like your

00:10:40.799 --> 00:10:40.809
the system server this looks like your
 

00:10:40.809 --> 00:10:43.669
the system server this looks like your
phone is rebooted so these are all very

00:10:43.669 --> 00:10:43.679
phone is rebooted so these are all very
 

00:10:43.679 --> 00:10:46.859
phone is rebooted so these are all very
visible impacts of what happens when the

00:10:46.859 --> 00:10:46.869
visible impacts of what happens when the
 

00:10:46.869 --> 00:10:49.350
visible impacts of what happens when the
device is running low on memory and it's

00:10:49.350 --> 00:10:49.360
device is running low on memory and it's
 

00:10:49.360 --> 00:10:51.509
device is running low on memory and it's
not it's not a good user experience when

00:10:51.509 --> 00:10:51.519
not it's not a good user experience when
 

00:10:51.519 --> 00:10:55.590
not it's not a good user experience when
this is happening on your device ok I

00:10:55.590 --> 00:10:55.600
this is happening on your device ok I
 

00:10:55.600 --> 00:10:57.269
this is happening on your device ok I
want to go back to this graph that I was

00:10:57.269 --> 00:10:57.279
want to go back to this graph that I was
 

00:10:57.279 --> 00:11:00.360
want to go back to this graph that I was
showing before about what happens to the

00:11:00.360 --> 00:11:00.370
showing before about what happens to the
 

00:11:00.370 --> 00:11:02.530
showing before about what happens to the
memory pages on the device as

00:11:02.530 --> 00:11:02.540
memory pages on the device as
 

00:11:02.540 --> 00:11:04.600
memory pages on the device as
you use more memory this was a 2

00:11:04.600 --> 00:11:04.610
you use more memory this was a 2
 

00:11:04.610 --> 00:11:07.060
you use more memory this was a 2
gigabyte device what do you think it

00:11:07.060 --> 00:11:07.070
gigabyte device what do you think it
 

00:11:07.070 --> 00:11:11.380
gigabyte device what do you think it
looks like this graph for a 512 megabyte

00:11:11.380 --> 00:11:11.390
looks like this graph for a 512 megabyte
 

00:11:11.390 --> 00:11:14.050
looks like this graph for a 512 megabyte
device may give you a few seconds to

00:11:14.050 --> 00:11:14.060
device may give you a few seconds to
 

00:11:14.060 --> 00:11:25.630
device may give you a few seconds to
think about that

00:11:25.630 --> 00:11:25.640
 

00:11:25.640 --> 00:11:28.960
you have an idea what it looks like so I

00:11:28.960 --> 00:11:28.970
you have an idea what it looks like so I
 

00:11:28.970 --> 00:11:31.720
you have an idea what it looks like so I
tried it for a 512 megabyte device same

00:11:31.720 --> 00:11:31.730
tried it for a 512 megabyte device same
 

00:11:31.730 --> 00:11:34.060
tried it for a 512 megabyte device same
things start the run time use more

00:11:34.060 --> 00:11:34.070
things start the run time use more
 

00:11:34.070 --> 00:11:35.920
things start the run time use more
memory and it looks something like this

00:11:35.920 --> 00:11:35.930
memory and it looks something like this
 

00:11:35.930 --> 00:11:38.740
memory and it looks something like this
so because there's so little memory

00:11:38.740 --> 00:11:38.750
so because there's so little memory
 

00:11:38.750 --> 00:11:40.840
so because there's so little memory
available at the beginning there's very

00:11:40.840 --> 00:11:40.850
available at the beginning there's very
 

00:11:40.850 --> 00:11:43.270
available at the beginning there's very
few free pages that we can use up before

00:11:43.270 --> 00:11:43.280
few free pages that we can use up before
 

00:11:43.280 --> 00:11:45.490
few free pages that we can use up before
the case wop D has to kick in and then

00:11:45.490 --> 00:11:45.500
the case wop D has to kick in and then
 

00:11:45.500 --> 00:11:47.290
the case wop D has to kick in and then
there's very few cast pages we can

00:11:47.290 --> 00:11:47.300
there's very few cast pages we can
 

00:11:47.300 --> 00:11:49.210
there's very few cast pages we can
reclaim before the low memory color is

00:11:49.210 --> 00:11:49.220
reclaim before the low memory color is
 

00:11:49.220 --> 00:11:52.120
reclaim before the low memory color is
needed to start killing things and so

00:11:52.120 --> 00:11:52.130
needed to start killing things and so
 

00:11:52.130 --> 00:11:53.710
needed to start killing things and so
you can imagine if you have this device

00:11:53.710 --> 00:11:53.720
you can imagine if you have this device
 

00:11:53.720 --> 00:11:55.420
you can imagine if you have this device
and the low memory killer is always

00:11:55.420 --> 00:11:55.430
and the low memory killer is always
 

00:11:55.430 --> 00:11:57.910
and the low memory killer is always
active it's always going processes and

00:11:57.910 --> 00:11:57.920
active it's always going processes and
 

00:11:57.920 --> 00:12:00.360
active it's always going processes and
it leads to this bad user experience

00:12:00.360 --> 00:12:00.370
it leads to this bad user experience
 

00:12:00.370 --> 00:12:01.680
it leads to this bad user experience
[Music]

00:12:01.680 --> 00:12:01.690
[Music]
 

00:12:01.690 --> 00:12:04.930
[Music]
then maybe OEMs are not going to be too

00:12:04.930 --> 00:12:04.940
then maybe OEMs are not going to be too
 

00:12:04.940 --> 00:12:06.370
then maybe OEMs are not going to be too
interested in shipping this device

00:12:06.370 --> 00:12:06.380
interested in shipping this device
 

00:12:06.380 --> 00:12:08.290
interested in shipping this device
because well it just doesn't work well

00:12:08.290 --> 00:12:08.300
because well it just doesn't work well
 

00:12:08.300 --> 00:12:10.570
because well it just doesn't work well
and that gets back to the ecosystem

00:12:10.570 --> 00:12:10.580
and that gets back to the ecosystem
 

00:12:10.580 --> 00:12:13.140
and that gets back to the ecosystem
challenges I mentioned in the beginning

00:12:13.140 --> 00:12:13.150
challenges I mentioned in the beginning
 

00:12:13.150 --> 00:12:16.780
challenges I mentioned in the beginning
so this is why why we care about them

00:12:16.780 --> 00:12:16.790
so this is why why we care about them
 

00:12:16.790 --> 00:12:24.310
so this is why why we care about them
right now how do we figure out how much

00:12:24.310 --> 00:12:24.320
right now how do we figure out how much
 

00:12:24.320 --> 00:12:26.800
right now how do we figure out how much
memory and application is used how do we

00:12:26.800 --> 00:12:26.810
memory and application is used how do we
 

00:12:26.810 --> 00:12:31.050
memory and application is used how do we
know your applications memory in fact I

00:12:31.050 --> 00:12:31.060
know your applications memory in fact I
 

00:12:31.060 --> 00:12:34.120
know your applications memory in fact I
told you that memory on device is broken

00:12:34.120 --> 00:12:34.130
told you that memory on device is broken
 

00:12:34.130 --> 00:12:36.490
told you that memory on device is broken
down into pages the Linux kernel is

00:12:36.490 --> 00:12:36.500
down into pages the Linux kernel is
 

00:12:36.500 --> 00:12:38.440
down into pages the Linux kernel is
going to keep track for each process

00:12:38.440 --> 00:12:38.450
going to keep track for each process
 

00:12:38.450 --> 00:12:40.420
going to keep track for each process
running on a device which pages it's

00:12:40.420 --> 00:12:40.430
running on a device which pages it's
 

00:12:40.430 --> 00:12:43.450
running on a device which pages it's
using so maybe we have a system process

00:12:43.450 --> 00:12:43.460
using so maybe we have a system process
 

00:12:43.460 --> 00:12:46.090
using so maybe we have a system process
Google Play services process couple apps

00:12:46.090 --> 00:12:46.100
Google Play services process couple apps
 

00:12:46.100 --> 00:12:48.220
Google Play services process couple apps
running on a device we want to know each

00:12:48.220 --> 00:12:48.230
running on a device we want to know each
 

00:12:48.230 --> 00:12:51.370
running on a device we want to know each
of their memory impacts well just count

00:12:51.370 --> 00:12:51.380
of their memory impacts well just count
 

00:12:51.380 --> 00:12:54.720
of their memory impacts well just count
up the number of pages that is using

00:12:54.720 --> 00:12:54.730
up the number of pages that is using
 

00:12:54.730 --> 00:12:57.430
up the number of pages that is using
it's a little bit more complicated than

00:12:57.430 --> 00:12:57.440
it's a little bit more complicated than
 

00:12:57.440 --> 00:12:57.930
it's a little bit more complicated than
this

00:12:57.930 --> 00:12:57.940
this
 

00:12:57.940 --> 00:13:01.330
this
because of sharing because multiple

00:13:01.330 --> 00:13:01.340
because of sharing because multiple
 

00:13:01.340 --> 00:13:03.070
because of sharing because multiple
processes on the device can be sharing

00:13:03.070 --> 00:13:03.080
processes on the device can be sharing
 

00:13:03.080 --> 00:13:04.810
processes on the device can be sharing
memory so for instance if you have an

00:13:04.810 --> 00:13:04.820
memory so for instance if you have an
 

00:13:04.820 --> 00:13:06.730
memory so for instance if you have an
app that's calling into Google Play

00:13:06.730 --> 00:13:06.740
app that's calling into Google Play
 

00:13:06.740 --> 00:13:09.430
app that's calling into Google Play
services it's going to be sharing some

00:13:09.430 --> 00:13:09.440
services it's going to be sharing some
 

00:13:09.440 --> 00:13:11.410
services it's going to be sharing some
memory perhaps code memory or other

00:13:11.410 --> 00:13:11.420
memory perhaps code memory or other
 

00:13:11.420 --> 00:13:13.240
memory perhaps code memory or other
kinds of memory with the Google Play

00:13:13.240 --> 00:13:13.250
kinds of memory with the Google Play
 

00:13:13.250 --> 00:13:16.540
kinds of memory with the Google Play
services process and then we can ask how

00:13:16.540 --> 00:13:16.550
services process and then we can ask how
 

00:13:16.550 --> 00:13:18.460
services process and then we can ask how
should we account for this shared memory

00:13:18.460 --> 00:13:18.470
should we account for this shared memory
 

00:13:18.470 --> 00:13:21.220
should we account for this shared memory
is that part of the responsibility of

00:13:21.220 --> 00:13:21.230
is that part of the responsibility of
 

00:13:21.230 --> 00:13:23.740
is that part of the responsibility of
the application is that memory impact

00:13:23.740 --> 00:13:23.750
the application is that memory impact
 

00:13:23.750 --> 00:13:25.780
the application is that memory impact
something that we should care about and

00:13:25.780 --> 00:13:25.790
something that we should care about and
 

00:13:25.790 --> 00:13:27.940
something that we should care about and
there's a few different ways that you

00:13:27.940 --> 00:13:27.950
there's a few different ways that you
 

00:13:27.950 --> 00:13:31.270
there's a few different ways that you
can approach this one is to use what we

00:13:31.270 --> 00:13:31.280
can approach this one is to use what we
 

00:13:31.280 --> 00:13:34.300
can approach this one is to use what we
call a resident set size or RSS and what

00:13:34.300 --> 00:13:34.310
call a resident set size or RSS and what
 

00:13:34.310 --> 00:13:36.760
call a resident set size or RSS and what
this means is when we're counting in

00:13:36.760 --> 00:13:36.770
this means is when we're counting in
 

00:13:36.770 --> 00:13:38.850
this means is when we're counting in
apps RSS we're saying you

00:13:38.850 --> 00:13:38.860
apps RSS we're saying you
 

00:13:38.860 --> 00:13:41.130
apps RSS we're saying you
application is fully responsible for all

00:13:41.130 --> 00:13:41.140
application is fully responsible for all
 

00:13:41.140 --> 00:13:42.930
application is fully responsible for all
the pages of memory that it's sharing

00:13:42.930 --> 00:13:42.940
the pages of memory that it's sharing
 

00:13:42.940 --> 00:13:46.410
the pages of memory that it's sharing
with other applications another approach

00:13:46.410 --> 00:13:46.420
with other applications another approach
 

00:13:46.420 --> 00:13:49.500
with other applications another approach
is called proportional setsize PSS and

00:13:49.500 --> 00:13:49.510
is called proportional setsize PSS and
 

00:13:49.510 --> 00:13:51.990
is called proportional setsize PSS and
in this case we're going to say the app

00:13:51.990 --> 00:13:52.000
in this case we're going to say the app
 

00:13:52.000 --> 00:13:54.240
in this case we're going to say the app
is responsible for those shared pages

00:13:54.240 --> 00:13:54.250
is responsible for those shared pages
 

00:13:54.250 --> 00:13:56.490
is responsible for those shared pages
proportional to the number of processes

00:13:56.490 --> 00:13:56.500
proportional to the number of processes
 

00:13:56.500 --> 00:13:58.440
proportional to the number of processes
that are sharing them so in this case

00:13:58.440 --> 00:13:58.450
that are sharing them so in this case
 

00:13:58.450 --> 00:14:01.320
that are sharing them so in this case
two applications or processes sharing

00:14:01.320 --> 00:14:01.330
two applications or processes sharing
 

00:14:01.330 --> 00:14:03.300
two applications or processes sharing
these pages the application will we'll

00:14:03.300 --> 00:14:03.310
these pages the application will we'll
 

00:14:03.310 --> 00:14:05.100
these pages the application will we'll
say is responsible for half of them if

00:14:05.100 --> 00:14:05.110
say is responsible for half of them if
 

00:14:05.110 --> 00:14:07.290
say is responsible for half of them if
there were three processes sharing the

00:14:07.290 --> 00:14:07.300
there were three processes sharing the
 

00:14:07.300 --> 00:14:08.940
there were three processes sharing the
same memory we would say the application

00:14:08.940 --> 00:14:08.950
same memory we would say the application
 

00:14:08.950 --> 00:14:11.250
same memory we would say the application
is responsible for a third of them and

00:14:11.250 --> 00:14:11.260
is responsible for a third of them and
 

00:14:11.260 --> 00:14:14.760
is responsible for a third of them and
so on and then a third approach you can

00:14:14.760 --> 00:14:14.770
so on and then a third approach you can
 

00:14:14.770 --> 00:14:15.030
so on and then a third approach you can
take

00:14:15.030 --> 00:14:15.040
take
 

00:14:15.040 --> 00:14:17.790
take
it's called unique set size where we say

00:14:17.790 --> 00:14:17.800
it's called unique set size where we say
 

00:14:17.800 --> 00:14:19.800
it's called unique set size where we say
the application is not responsible for

00:14:19.800 --> 00:14:19.810
the application is not responsible for
 

00:14:19.810 --> 00:14:23.930
the application is not responsible for
any of its shared pages now in general

00:14:23.930 --> 00:14:23.940
any of its shared pages now in general
 

00:14:23.940 --> 00:14:27.270
any of its shared pages now in general
which approach to take really depends on

00:14:27.270 --> 00:14:27.280
which approach to take really depends on
 

00:14:27.280 --> 00:14:30.060
which approach to take really depends on
the context so for instance if those

00:14:30.060 --> 00:14:30.070
the context so for instance if those
 

00:14:30.070 --> 00:14:33.090
the context so for instance if those
shared pages we're not being used in the

00:14:33.090 --> 00:14:33.100
shared pages we're not being used in the
 

00:14:33.100 --> 00:14:36.180
shared pages we're not being used in the
Google Play Services app until your app

00:14:36.180 --> 00:14:36.190
Google Play Services app until your app
 

00:14:36.190 --> 00:14:38.790
Google Play Services app until your app
called in to Google Play services then

00:14:38.790 --> 00:14:38.800
called in to Google Play services then
 

00:14:38.800 --> 00:14:41.910
called in to Google Play services then
maybe it makes sense to say the app is

00:14:41.910 --> 00:14:41.920
maybe it makes sense to say the app is
 

00:14:41.920 --> 00:14:43.710
maybe it makes sense to say the app is
responsible for all of those pages we

00:14:43.710 --> 00:14:43.720
responsible for all of those pages we
 

00:14:43.720 --> 00:14:46.500
responsible for all of those pages we
want to use RSS on the other hand if

00:14:46.500 --> 00:14:46.510
want to use RSS on the other hand if
 

00:14:46.510 --> 00:14:49.770
want to use RSS on the other hand if
those pages were sitting in memory and

00:14:49.770 --> 00:14:49.780
those pages were sitting in memory and
 

00:14:49.780 --> 00:14:51.300
those pages were sitting in memory and
the Google Play services processed

00:14:51.300 --> 00:14:51.310
the Google Play services processed
 

00:14:51.310 --> 00:14:54.360
the Google Play services processed
before the app called in to Google Play

00:14:54.360 --> 00:14:54.370
before the app called in to Google Play
 

00:14:54.370 --> 00:14:56.520
before the app called in to Google Play
services they were always there the app

00:14:56.520 --> 00:14:56.530
services they were always there the app
 

00:14:56.530 --> 00:14:58.680
services they were always there the app
is not bringing them into memory then we

00:14:58.680 --> 00:14:58.690
is not bringing them into memory then we
 

00:14:58.690 --> 00:15:00.630
is not bringing them into memory then we
wouldn't want to count them USS would be

00:15:00.630 --> 00:15:00.640
wouldn't want to count them USS would be
 

00:15:00.640 --> 00:15:03.360
wouldn't want to count them USS would be
more appropriate in general we don't

00:15:03.360 --> 00:15:03.370
more appropriate in general we don't
 

00:15:03.370 --> 00:15:06.030
more appropriate in general we don't
have access to this high level context

00:15:06.030 --> 00:15:06.040
have access to this high level context
 

00:15:06.040 --> 00:15:08.460
have access to this high level context
to know at least at the system level so

00:15:08.460 --> 00:15:08.470
to know at least at the system level so
 

00:15:08.470 --> 00:15:09.990
to know at least at the system level so
the approach we take is the most

00:15:09.990 --> 00:15:10.000
the approach we take is the most
 

00:15:10.000 --> 00:15:11.070
the approach we take is the most
straightforward one which is

00:15:11.070 --> 00:15:11.080
straightforward one which is
 

00:15:11.080 --> 00:15:13.860
straightforward one which is
proportional set size with equal sharing

00:15:13.860 --> 00:15:13.870
proportional set size with equal sharing
 

00:15:13.870 --> 00:15:16.830
proportional set size with equal sharing
and one benefit of using PSS for

00:15:16.830 --> 00:15:16.840
and one benefit of using PSS for
 

00:15:16.840 --> 00:15:18.900
and one benefit of using PSS for
evaluating applications memory impact

00:15:18.900 --> 00:15:18.910
evaluating applications memory impact
 

00:15:18.910 --> 00:15:21.510
evaluating applications memory impact
especially when looking at multiple

00:15:21.510 --> 00:15:21.520
especially when looking at multiple
 

00:15:21.520 --> 00:15:24.240
especially when looking at multiple
processes at the same time is it will

00:15:24.240 --> 00:15:24.250
processes at the same time is it will
 

00:15:24.250 --> 00:15:26.490
processes at the same time is it will
avoid over counting or under counting of

00:15:26.490 --> 00:15:26.500
avoid over counting or under counting of
 

00:15:26.500 --> 00:15:30.360
avoid over counting or under counting of
shared pages okay

00:15:30.360 --> 00:15:30.370
shared pages okay
 

00:15:30.370 --> 00:15:33.930
shared pages okay
so use PSS for your applications memory

00:15:33.930 --> 00:15:33.940
so use PSS for your applications memory
 

00:15:33.940 --> 00:15:38.700
so use PSS for your applications memory
impact and you can run this command adb

00:15:38.700 --> 00:15:38.710
impact and you can run this command adb
 

00:15:38.710 --> 00:15:42.060
impact and you can run this command adb
shell dump system info dash s give it

00:15:42.060 --> 00:15:42.070
shell dump system info dash s give it
 

00:15:42.070 --> 00:15:45.180
shell dump system info dash s give it
your process name come that example dot

00:15:45.180 --> 00:15:45.190
your process name come that example dot
 

00:15:45.190 --> 00:15:47.430
your process name come that example dot
richard or whatever it is or you can

00:15:47.430 --> 00:15:47.440
richard or whatever it is or you can
 

00:15:47.440 --> 00:15:49.140
richard or whatever it is or you can
give the process ID if you happen to

00:15:49.140 --> 00:15:49.150
give the process ID if you happen to
 

00:15:49.150 --> 00:15:50.790
give the process ID if you happen to
know that and it's gonna output

00:15:50.790 --> 00:15:50.800
know that and it's gonna output
 

00:15:50.800 --> 00:15:51.900
know that and it's gonna output
something like this

00:15:51.900 --> 00:15:51.910
something like this
 

00:15:51.910 --> 00:15:54.900
something like this
and app summary view of the applications

00:15:54.900 --> 00:15:54.910
and app summary view of the applications
 

00:15:54.910 --> 00:15:57.150
and app summary view of the applications
memory and at the very bottom there's a

00:15:57.150 --> 00:15:57.160
memory and at the very bottom there's a
 

00:15:57.160 --> 00:15:58.740
memory and at the very bottom there's a
total and that number is the

00:15:58.740 --> 00:15:58.750
total and that number is the
 

00:15:58.750 --> 00:16:00.650
total and that number is the
applications PSS

00:16:00.650 --> 00:16:00.660
applications PSS
 

00:16:00.660 --> 00:16:05.720
applications PSS
this is adb shell dump system info - yes

00:16:05.720 --> 00:16:05.730
this is adb shell dump system info - yes
 

00:16:05.730 --> 00:16:06.990
this is adb shell dump system info - yes
okay

00:16:06.990 --> 00:16:07.000
okay
 

00:16:07.000 --> 00:16:10.140
okay
now let's say you do this you figure out

00:16:10.140 --> 00:16:10.150
now let's say you do this you figure out
 

00:16:10.150 --> 00:16:12.030
now let's say you do this you figure out
what the PSS of your application is

00:16:12.030 --> 00:16:12.040
what the PSS of your application is
 

00:16:12.040 --> 00:16:14.370
what the PSS of your application is
there's a very interesting question to

00:16:14.370 --> 00:16:14.380
there's a very interesting question to
 

00:16:14.380 --> 00:16:17.310
there's a very interesting question to
ask how much memory should your

00:16:17.310 --> 00:16:17.320
ask how much memory should your
 

00:16:17.320 --> 00:16:20.370
ask how much memory should your
application be using because you know I

00:16:20.370 --> 00:16:20.380
application be using because you know I
 

00:16:20.380 --> 00:16:22.350
application be using because you know I
say earlier if we use a lot of memory

00:16:22.350 --> 00:16:22.360
say earlier if we use a lot of memory
 

00:16:22.360 --> 00:16:24.420
say earlier if we use a lot of memory
that's bad with his low memory killer

00:16:24.420 --> 00:16:24.430
that's bad with his low memory killer
 

00:16:24.430 --> 00:16:27.090
that's bad with his low memory killer
kicks in but we're actually using memory

00:16:27.090 --> 00:16:27.100
kicks in but we're actually using memory
 

00:16:27.100 --> 00:16:29.310
kicks in but we're actually using memory
for a reason we're using it to provide

00:16:29.310 --> 00:16:29.320
for a reason we're using it to provide
 

00:16:29.320 --> 00:16:31.890
for a reason we're using it to provide
features to provide user value to

00:16:31.890 --> 00:16:31.900
features to provide user value to
 

00:16:31.900 --> 00:16:33.300
features to provide user value to
provide you know delightfulness

00:16:33.300 --> 00:16:33.310
provide you know delightfulness
 

00:16:33.310 --> 00:16:35.340
provide you know delightfulness
everything that makes our app great is

00:16:35.340 --> 00:16:35.350
everything that makes our app great is
 

00:16:35.350 --> 00:16:37.560
everything that makes our app great is
going to be taking up memory so we have

00:16:37.560 --> 00:16:37.570
going to be taking up memory so we have
 

00:16:37.570 --> 00:16:40.320
going to be taking up memory so we have
this trade-off between user value and

00:16:40.320 --> 00:16:40.330
this trade-off between user value and
 

00:16:40.330 --> 00:16:44.640
this trade-off between user value and
memory that's what I'm showing here in

00:16:44.640 --> 00:16:44.650
memory that's what I'm showing here in
 

00:16:44.650 --> 00:16:47.190
memory that's what I'm showing here in
this graph the trade-off space in an

00:16:47.190 --> 00:16:47.200
this graph the trade-off space in an
 

00:16:47.200 --> 00:16:49.380
this graph the trade-off space in an
ideal world we're kind of up into the

00:16:49.380 --> 00:16:49.390
ideal world we're kind of up into the
 

00:16:49.390 --> 00:16:51.300
ideal world we're kind of up into the
left on the graph where we're providing

00:16:51.300 --> 00:16:51.310
left on the graph where we're providing
 

00:16:51.310 --> 00:16:53.850
left on the graph where we're providing
a lot of user value without very much

00:16:53.850 --> 00:16:53.860
a lot of user value without very much
 

00:16:53.860 --> 00:16:56.940
a lot of user value without very much
memory impact at all but in practice

00:16:56.940 --> 00:16:56.950
memory impact at all but in practice
 

00:16:56.950 --> 00:16:59.730
memory impact at all but in practice
this is going to probably be technically

00:16:59.730 --> 00:16:59.740
this is going to probably be technically
 

00:16:59.740 --> 00:17:03.810
this is going to probably be technically
infeasible because you need memory to

00:17:03.810 --> 00:17:03.820
infeasible because you need memory to
 

00:17:03.820 --> 00:17:06.030
infeasible because you need memory to
provide value and there's only so much

00:17:06.030 --> 00:17:06.040
provide value and there's only so much
 

00:17:06.040 --> 00:17:07.980
provide value and there's only so much
value can provide with a limited amount

00:17:07.980 --> 00:17:07.990
value can provide with a limited amount
 

00:17:07.990 --> 00:17:11.820
value can provide with a limited amount
of memory on the other hand the other

00:17:11.820 --> 00:17:11.830
of memory on the other hand the other
 

00:17:11.830 --> 00:17:15.060
of memory on the other hand the other
extreme would be if you're using a lot

00:17:15.060 --> 00:17:15.070
extreme would be if you're using a lot
 

00:17:15.070 --> 00:17:17.640
extreme would be if you're using a lot
of memory to provide not much value and

00:17:17.640 --> 00:17:17.650
of memory to provide not much value and
 

00:17:17.650 --> 00:17:20.370
of memory to provide not much value and
I think it's safe to say this is not a

00:17:20.370 --> 00:17:20.380
I think it's safe to say this is not a
 

00:17:20.380 --> 00:17:22.830
I think it's safe to say this is not a
great app because it's basically it's

00:17:22.830 --> 00:17:22.840
great app because it's basically it's
 

00:17:22.840 --> 00:17:26.670
great app because it's basically it's
providing too much memory using too much

00:17:26.670 --> 00:17:26.680
providing too much memory using too much
 

00:17:26.680 --> 00:17:27.180
providing too much memory using too much
memory

00:17:27.180 --> 00:17:27.190
memory
 

00:17:27.190 --> 00:17:29.850
memory
unfortunately my slides are not showing

00:17:29.850 --> 00:17:29.860
unfortunately my slides are not showing
 

00:17:29.860 --> 00:17:34.020
unfortunately my slides are not showing
up right but there's imagine a curve on

00:17:34.020 --> 00:17:34.030
up right but there's imagine a curve on
 

00:17:34.030 --> 00:17:36.630
up right but there's imagine a curve on
which there's too much memory for this

00:17:36.630 --> 00:17:36.640
which there's too much memory for this
 

00:17:36.640 --> 00:17:39.150
which there's too much memory for this
app it's not worth it to the user to use

00:17:39.150 --> 00:17:39.160
app it's not worth it to the user to use
 

00:17:39.160 --> 00:17:41.490
app it's not worth it to the user to use
ah there they go

00:17:41.490 --> 00:17:41.500
ah there they go
 

00:17:41.500 --> 00:17:46.740
ah there they go
wonderful next we can look at this

00:17:46.740 --> 00:17:46.750
wonderful next we can look at this
 

00:17:46.750 --> 00:17:48.120
wonderful next we can look at this
corner of the graph where we're not

00:17:48.120 --> 00:17:48.130
corner of the graph where we're not
 

00:17:48.130 --> 00:17:50.220
corner of the graph where we're not
providing too much user value we're not

00:17:50.220 --> 00:17:50.230
providing too much user value we're not
 

00:17:50.230 --> 00:17:52.110
providing too much user value we're not
using too much memory we can say this is

00:17:52.110 --> 00:17:52.120
using too much memory we can say this is
 

00:17:52.120 --> 00:17:54.810
using too much memory we can say this is
like a small application maybe your desk

00:17:54.810 --> 00:17:54.820
like a small application maybe your desk
 

00:17:54.820 --> 00:17:58.590
like a small application maybe your desk
clock app and at the other end we can

00:17:58.590 --> 00:17:58.600
clock app and at the other end we can
 

00:17:58.600 --> 00:18:00.960
clock app and at the other end we can
have apps that use a lot of memory to

00:18:00.960 --> 00:18:00.970
have apps that use a lot of memory to
 

00:18:00.970 --> 00:18:03.330
have apps that use a lot of memory to
provide a lot of value these are large

00:18:03.330 --> 00:18:03.340
provide a lot of value these are large
 

00:18:03.340 --> 00:18:05.520
provide a lot of value these are large
applications maybe a photo editor

00:18:05.520 --> 00:18:05.530
applications maybe a photo editor
 

00:18:05.530 --> 00:18:08.100
applications maybe a photo editor
something like that and we can say well

00:18:08.100 --> 00:18:08.110
something like that and we can say well
 

00:18:08.110 --> 00:18:10.110
something like that and we can say well
what's better a small app or a large app

00:18:10.110 --> 00:18:10.120
what's better a small app or a large app
 

00:18:10.120 --> 00:18:12.780
what's better a small app or a large app
in this case there they can both be

00:18:12.780 --> 00:18:12.790
in this case there they can both be
 

00:18:12.790 --> 00:18:17.130
in this case there they can both be
useful except that when I've said that

00:18:17.130 --> 00:18:17.140
useful except that when I've said that
 

00:18:17.140 --> 00:18:19.400
useful except that when I've said that
an application is using too much memory

00:18:19.400 --> 00:18:19.410
an application is using too much memory
 

00:18:19.410 --> 00:18:21.840
an application is using too much memory
that really depends on what kind of

00:18:21.840 --> 00:18:21.850
that really depends on what kind of
 

00:18:21.850 --> 00:18:23.550
that really depends on what kind of
device you're running on if you're

00:18:23.550 --> 00:18:23.560
device you're running on if you're
 

00:18:23.560 --> 00:18:25.200
device you're running on if you're
running on a premium device it can

00:18:25.200 --> 00:18:25.210
running on a premium device it can
 

00:18:25.210 --> 00:18:27.780
running on a premium device it can
support much larger applications but on

00:18:27.780 --> 00:18:27.790
support much larger applications but on
 

00:18:27.790 --> 00:18:29.610
support much larger applications but on
a smaller device an entry-level device

00:18:29.610 --> 00:18:29.620
a smaller device an entry-level device
 

00:18:29.620 --> 00:18:32.250
a smaller device an entry-level device
maybe this large app uses too much

00:18:32.250 --> 00:18:32.260
maybe this large app uses too much
 

00:18:32.260 --> 00:18:34.740
maybe this large app uses too much
memory to make sense on that so really I

00:18:34.740 --> 00:18:34.750
memory to make sense on that so really I
 

00:18:34.750 --> 00:18:36.690
memory to make sense on that so really I
should be drawing a line and say too

00:18:36.690 --> 00:18:36.700
should be drawing a line and say too
 

00:18:36.700 --> 00:18:38.330
should be drawing a line and say too
much memory depends on the device

00:18:38.330 --> 00:18:38.340
much memory depends on the device
 

00:18:38.340 --> 00:18:44.160
much memory depends on the device
premium mid tier an entry level might

00:18:44.160 --> 00:18:44.170
premium mid tier an entry level might
 

00:18:44.170 --> 00:18:48.600
premium mid tier an entry level might
not support that large app for better or

00:18:48.600 --> 00:18:48.610
not support that large app for better or
 

00:18:48.610 --> 00:18:51.450
not support that large app for better or
for worse what I see happening often is

00:18:51.450 --> 00:18:51.460
for worse what I see happening often is
 

00:18:51.460 --> 00:18:53.640
for worse what I see happening often is
over time as you develop your

00:18:53.640 --> 00:18:53.650
over time as you develop your
 

00:18:53.650 --> 00:18:55.590
over time as you develop your
application you tend to add more

00:18:55.590 --> 00:18:55.600
application you tend to add more
 

00:18:55.600 --> 00:18:59.250
application you tend to add more
features it tends to take more memory so

00:18:59.250 --> 00:18:59.260
features it tends to take more memory so
 

00:18:59.260 --> 00:19:00.720
features it tends to take more memory so
you tend to go up and to the right in

00:19:00.720 --> 00:19:00.730
you tend to go up and to the right in
 

00:19:00.730 --> 00:19:05.510
you tend to go up and to the right in
this graph now this is actually good for

00:19:05.510 --> 00:19:05.520
this graph now this is actually good for
 

00:19:05.520 --> 00:19:08.310
this graph now this is actually good for
mid tier premium users because they're

00:19:08.310 --> 00:19:08.320
mid tier premium users because they're
 

00:19:08.320 --> 00:19:10.020
mid tier premium users because they're
getting more value more bang for their

00:19:10.020 --> 00:19:10.030
getting more value more bang for their
 

00:19:10.030 --> 00:19:12.540
getting more value more bang for their
buck memory wise but in this case it's a

00:19:12.540 --> 00:19:12.550
buck memory wise but in this case it's a
 

00:19:12.550 --> 00:19:14.070
buck memory wise but in this case it's a
little bit unfortunate for the entry

00:19:14.070 --> 00:19:14.080
little bit unfortunate for the entry
 

00:19:14.080 --> 00:19:16.200
little bit unfortunate for the entry
level device user because while he could

00:19:16.200 --> 00:19:16.210
level device user because while he could
 

00:19:16.210 --> 00:19:18.180
level device user because while he could
use the older version of your app you've

00:19:18.180 --> 00:19:18.190
use the older version of your app you've
 

00:19:18.190 --> 00:19:20.220
use the older version of your app you've
now added so many features and it's

00:19:20.220 --> 00:19:20.230
now added so many features and it's
 

00:19:20.230 --> 00:19:21.930
now added so many features and it's
using so much memory that it just

00:19:21.930 --> 00:19:21.940
using so much memory that it just
 

00:19:21.940 --> 00:19:25.560
using so much memory that it just
doesn't work as well on their device so

00:19:25.560 --> 00:19:25.570
doesn't work as well on their device so
 

00:19:25.570 --> 00:19:27.270
doesn't work as well on their device so
the points that I want to say here the

00:19:27.270 --> 00:19:27.280
the points that I want to say here the
 

00:19:27.280 --> 00:19:29.700
the points that I want to say here the
takeaways anything you can do to improve

00:19:29.700 --> 00:19:29.710
takeaways anything you can do to improve
 

00:19:29.710 --> 00:19:31.950
takeaways anything you can do to improve
your applications memory efficiency is

00:19:31.950 --> 00:19:31.960
your applications memory efficiency is
 

00:19:31.960 --> 00:19:34.470
your applications memory efficiency is
good so if you can move to the left on

00:19:34.470 --> 00:19:34.480
good so if you can move to the left on
 

00:19:34.480 --> 00:19:36.540
good so if you can move to the left on
this graph so less memory use without

00:19:36.540 --> 00:19:36.550
this graph so less memory use without
 

00:19:36.550 --> 00:19:40.470
this graph so less memory use without
sacrificing user value that's great and

00:19:40.470 --> 00:19:40.480
sacrificing user value that's great and
 

00:19:40.480 --> 00:19:41.970
sacrificing user value that's great and
just be aware that when you're adding

00:19:41.970 --> 00:19:41.980
just be aware that when you're adding
 

00:19:41.980 --> 00:19:45.180
just be aware that when you're adding
new features while it's good for it can

00:19:45.180 --> 00:19:45.190
new features while it's good for it can
 

00:19:45.190 --> 00:19:47.280
new features while it's good for it can
be good for materia Miam device users

00:19:47.280 --> 00:19:47.290
be good for materia Miam device users
 

00:19:47.290 --> 00:19:48.870
be good for materia Miam device users
there might be a negative consequence

00:19:48.870 --> 00:19:48.880
there might be a negative consequence
 

00:19:48.880 --> 00:19:53.970
there might be a negative consequence
for these entry level devices ok there's

00:19:53.970 --> 00:19:53.980
for these entry level devices ok there's
 

00:19:53.980 --> 00:19:58.710
for these entry level devices ok there's
something wrong with this graph does

00:19:58.710 --> 00:19:58.720
something wrong with this graph does
 

00:19:58.720 --> 00:20:01.160
something wrong with this graph does
anyone know what it is well let me say

00:20:01.160 --> 00:20:01.170
anyone know what it is well let me say
 

00:20:01.170 --> 00:20:04.470
anyone know what it is well let me say
the problem that this graph is it's

00:20:04.470 --> 00:20:04.480
the problem that this graph is it's
 

00:20:04.480 --> 00:20:06.510
the problem that this graph is it's
suggesting that an applications memory

00:20:06.510 --> 00:20:06.520
suggesting that an applications memory
 

00:20:06.520 --> 00:20:09.210
suggesting that an applications memory
use is one number so you give me this

00:20:09.210 --> 00:20:09.220
use is one number so you give me this
 

00:20:09.220 --> 00:20:11.780
use is one number so you give me this
application and I can tell you it's BSS

00:20:11.780 --> 00:20:11.790
application and I can tell you it's BSS
 

00:20:11.790 --> 00:20:15.210
application and I can tell you it's BSS
but in practice that's far from the case

00:20:15.210 --> 00:20:15.220
but in practice that's far from the case
 

00:20:15.220 --> 00:20:17.850
but in practice that's far from the case
because an applications memory impact

00:20:17.850 --> 00:20:17.860
because an applications memory impact
 

00:20:17.860 --> 00:20:18.430
because an applications memory impact
depends

00:20:18.430 --> 00:20:18.440
depends
 

00:20:18.440 --> 00:20:19.769
depends
on a whole bunch of different things

00:20:19.769 --> 00:20:19.779
on a whole bunch of different things
 

00:20:19.779 --> 00:20:23.200
on a whole bunch of different things
such as the application use case the

00:20:23.200 --> 00:20:23.210
such as the application use case the
 

00:20:23.210 --> 00:20:26.440
such as the application use case the
platform configuration and device memory

00:20:26.440 --> 00:20:26.450
platform configuration and device memory
 

00:20:26.450 --> 00:20:29.289
platform configuration and device memory
pressure and so this is important to be

00:20:29.289 --> 00:20:29.299
pressure and so this is important to be
 

00:20:29.299 --> 00:20:30.879
pressure and so this is important to be
aware of when you're testing your

00:20:30.879 --> 00:20:30.889
aware of when you're testing your
 

00:20:30.889 --> 00:20:33.820
aware of when you're testing your
applications memory perhaps testing for

00:20:33.820 --> 00:20:33.830
applications memory perhaps testing for
 

00:20:33.830 --> 00:20:36.039
applications memory perhaps testing for
regressions or to see if an optimization

00:20:36.039 --> 00:20:36.049
regressions or to see if an optimization
 

00:20:36.049 --> 00:20:38.230
regressions or to see if an optimization
is working to make sure that you're

00:20:38.230 --> 00:20:38.240
is working to make sure that you're
 

00:20:38.240 --> 00:20:40.299
is working to make sure that you're
testing the application use case you

00:20:40.299 --> 00:20:40.309
testing the application use case you
 

00:20:40.309 --> 00:20:42.940
testing the application use case you
care about and you're controlling all of

00:20:42.940 --> 00:20:42.950
care about and you're controlling all of
 

00:20:42.950 --> 00:20:45.580
care about and you're controlling all of
the other parameters so that you're

00:20:45.580 --> 00:20:45.590
the other parameters so that you're
 

00:20:45.590 --> 00:20:47.080
the other parameters so that you're
doing a proper apples to apples

00:20:47.080 --> 00:20:47.090
doing a proper apples to apples
 

00:20:47.090 --> 00:20:50.350
doing a proper apples to apples
comparison let me go into a little bit

00:20:50.350 --> 00:20:50.360
comparison let me go into a little bit
 

00:20:50.360 --> 00:20:53.590
comparison let me go into a little bit
more detail so how does an application

00:20:53.590 --> 00:20:53.600
more detail so how does an application
 

00:20:53.600 --> 00:20:56.980
more detail so how does an application
use case impact memory what I've done

00:20:56.980 --> 00:20:56.990
use case impact memory what I've done
 

00:20:56.990 --> 00:20:59.649
use case impact memory what I've done
here as I started using Gmail and I've

00:20:59.649 --> 00:20:59.659
here as I started using Gmail and I've
 

00:20:59.659 --> 00:21:01.930
here as I started using Gmail and I've
switched to different use cases in the

00:21:01.930 --> 00:21:01.940
switched to different use cases in the
 

00:21:01.940 --> 00:21:04.299
switched to different use cases in the
application of over time so every 20

00:21:04.299 --> 00:21:04.309
application of over time so every 20
 

00:21:04.309 --> 00:21:06.580
application of over time so every 20
seconds I switch I started by viewing

00:21:06.580 --> 00:21:06.590
seconds I switch I started by viewing
 

00:21:06.590 --> 00:21:08.499
seconds I switch I started by viewing
the Inbox it's using just a little over

00:21:08.499 --> 00:21:08.509
the Inbox it's using just a little over
 

00:21:08.509 --> 00:21:11.379
the Inbox it's using just a little over
a hundred megabytes PSS then I switch to

00:21:11.379 --> 00:21:11.389
a hundred megabytes PSS then I switch to
 

00:21:11.389 --> 00:21:13.240
a hundred megabytes PSS then I switch to
looking at an email that had some text

00:21:13.240 --> 00:21:13.250
looking at an email that had some text
 

00:21:13.250 --> 00:21:15.759
looking at an email that had some text
use it a little bit more memory I switch

00:21:15.759 --> 00:21:15.769
use it a little bit more memory I switch
 

00:21:15.769 --> 00:21:17.889
use it a little bit more memory I switch
to looking at a different email this one

00:21:17.889 --> 00:21:17.899
to looking at a different email this one
 

00:21:17.899 --> 00:21:19.710
to looking at a different email this one
time with pictures it uses more memory

00:21:19.710 --> 00:21:19.720
time with pictures it uses more memory
 

00:21:19.720 --> 00:21:22.570
time with pictures it uses more memory
then I started to compose an email use a

00:21:22.570 --> 00:21:22.580
then I started to compose an email use a
 

00:21:22.580 --> 00:21:24.460
then I started to compose an email use a
little bit less I stopped using the app

00:21:24.460 --> 00:21:24.470
little bit less I stopped using the app
 

00:21:24.470 --> 00:21:28.119
little bit less I stopped using the app
and then it used less memory so you can

00:21:28.119 --> 00:21:28.129
and then it used less memory so you can
 

00:21:28.129 --> 00:21:29.560
and then it used less memory so you can
see here that depending on the

00:21:29.560 --> 00:21:29.570
see here that depending on the
 

00:21:29.570 --> 00:21:32.100
see here that depending on the
application use case memory impact

00:21:32.100 --> 00:21:32.110
application use case memory impact
 

00:21:32.110 --> 00:21:35.889
application use case memory impact
varies quite significantly and it

00:21:35.889 --> 00:21:35.899
varies quite significantly and it
 

00:21:35.899 --> 00:21:37.990
varies quite significantly and it
doesn't necessarily make any sense to

00:21:37.990 --> 00:21:38.000
doesn't necessarily make any sense to
 

00:21:38.000 --> 00:21:40.060
doesn't necessarily make any sense to
compare your applications memory from

00:21:40.060 --> 00:21:40.070
compare your applications memory from
 

00:21:40.070 --> 00:21:42.909
compare your applications memory from
point A and point B because these are

00:21:42.909 --> 00:21:42.919
point A and point B because these are
 

00:21:42.919 --> 00:21:46.740
point A and point B because these are
different use cases okay

00:21:46.740 --> 00:21:46.750
different use cases okay
 

00:21:46.750 --> 00:21:48.940
different use cases okay
application use case is a pretty

00:21:48.940 --> 00:21:48.950
application use case is a pretty
 

00:21:48.950 --> 00:21:51.430
application use case is a pretty
straightforward factor something that's

00:21:51.430 --> 00:21:51.440
straightforward factor something that's
 

00:21:51.440 --> 00:21:54.190
straightforward factor something that's
less obvious is that your memory will

00:21:54.190 --> 00:21:54.200
less obvious is that your memory will
 

00:21:54.200 --> 00:21:56.110
less obvious is that your memory will
change a lot depending on what your

00:21:56.110 --> 00:21:56.120
change a lot depending on what your
 

00:21:56.120 --> 00:21:58.539
change a lot depending on what your
platform configuration is so what I

00:21:58.539 --> 00:21:58.549
platform configuration is so what I
 

00:21:58.549 --> 00:22:02.409
platform configuration is so what I
showing in this graph is I take one of

00:22:02.409 --> 00:22:02.419
showing in this graph is I take one of
 

00:22:02.419 --> 00:22:04.360
showing in this graph is I take one of
those application use cases from the

00:22:04.360 --> 00:22:04.370
those application use cases from the
 

00:22:04.370 --> 00:22:07.480
those application use cases from the
previous slide Gmail looking at an email

00:22:07.480 --> 00:22:07.490
previous slide Gmail looking at an email
 

00:22:07.490 --> 00:22:10.480
previous slide Gmail looking at an email
with pictures and I've run it on a bunch

00:22:10.480 --> 00:22:10.490
with pictures and I've run it on a bunch
 

00:22:10.490 --> 00:22:13.060
with pictures and I've run it on a bunch
of different devices so in X is 4 and X

00:22:13.060 --> 00:22:13.070
of different devices so in X is 4 and X
 

00:22:13.070 --> 00:22:16.930
of different devices so in X is 4 and X
is 5 X Nexus 6p pixel XL and also on a

00:22:16.930 --> 00:22:16.940
is 5 X Nexus 6p pixel XL and also on a
 

00:22:16.940 --> 00:22:19.299
is 5 X Nexus 6p pixel XL and also on a
number of different platform versions

00:22:19.299 --> 00:22:19.309
number of different platform versions
 

00:22:19.309 --> 00:22:21.129
number of different platform versions
even within the same device so for

00:22:21.129 --> 00:22:21.139
even within the same device so for
 

00:22:21.139 --> 00:22:23.909
even within the same device so for
instance for the Nexus 5 I ran it on

00:22:23.909 --> 00:22:23.919
instance for the Nexus 5 I ran it on
 

00:22:23.919 --> 00:22:28.210
instance for the Nexus 5 I ran it on
Android M and an O and you can see that

00:22:28.210 --> 00:22:28.220
Android M and an O and you can see that
 

00:22:28.220 --> 00:22:30.499
Android M and an O and you can see that
there's quite a variation

00:22:30.499 --> 00:22:30.509
there's quite a variation
 

00:22:30.509 --> 00:22:32.749
there's quite a variation
much memory this application use case is

00:22:32.749 --> 00:22:32.759
much memory this application use case is
 

00:22:32.759 --> 00:22:37.219
much memory this application use case is
taking up this comes about because well

00:22:37.219 --> 00:22:37.229
taking up this comes about because well
 

00:22:37.229 --> 00:22:39.079
taking up this comes about because well
for different devices we have different

00:22:39.079 --> 00:22:39.089
for different devices we have different
 

00:22:39.089 --> 00:22:40.729
for different devices we have different
screen resolutions different screen

00:22:40.729 --> 00:22:40.739
screen resolutions different screen
 

00:22:40.739 --> 00:22:43.729
screen resolutions different screen
sizes which means bitmaps take up

00:22:43.729 --> 00:22:43.739
sizes which means bitmaps take up
 

00:22:43.739 --> 00:22:46.399
sizes which means bitmaps take up
different amounts of memory you might

00:22:46.399 --> 00:22:46.409
different amounts of memory you might
 

00:22:46.409 --> 00:22:48.739
different amounts of memory you might
have different platform optimizations on

00:22:48.739 --> 00:22:48.749
have different platform optimizations on
 

00:22:48.749 --> 00:22:50.719
have different platform optimizations on
the different devices you might have a

00:22:50.719 --> 00:22:50.729
the different devices you might have a
 

00:22:50.729 --> 00:22:54.079
the different devices you might have a
different Saigo configuration different

00:22:54.079 --> 00:22:54.089
different Saigo configuration different
 

00:22:54.089 --> 00:22:55.969
different Saigo configuration different
runtime configuration its running your

00:22:55.969 --> 00:22:55.979
runtime configuration its running your
 

00:22:55.979 --> 00:22:58.489
runtime configuration its running your
code differently and so there's there's

00:22:58.489 --> 00:22:58.499
code differently and so there's there's
 

00:22:58.499 --> 00:23:00.859
code differently and so there's there's
a lot of different factors going on here

00:23:00.859 --> 00:23:00.869
a lot of different factors going on here
 

00:23:00.869 --> 00:23:03.049
a lot of different factors going on here
which mean when you switch to a

00:23:03.049 --> 00:23:03.059
which mean when you switch to a
 

00:23:03.059 --> 00:23:04.879
which mean when you switch to a
different platform configuration you're

00:23:04.879 --> 00:23:04.889
different platform configuration you're
 

00:23:04.889 --> 00:23:08.239
different platform configuration you're
going to get different memory use so I

00:23:08.239 --> 00:23:08.249
going to get different memory use so I
 

00:23:08.249 --> 00:23:10.159
going to get different memory use so I
would say when you're testing your

00:23:10.159 --> 00:23:10.169
would say when you're testing your
 

00:23:10.169 --> 00:23:12.680
would say when you're testing your
applications memory use try as hard as

00:23:12.680 --> 00:23:12.690
applications memory use try as hard as
 

00:23:12.690 --> 00:23:15.439
applications memory use try as hard as
you can to use a consistent platform set

00:23:15.439 --> 00:23:15.449
you can to use a consistent platform set
 

00:23:15.449 --> 00:23:17.869
you can to use a consistent platform set
up the same kind of device the same

00:23:17.869 --> 00:23:17.879
up the same kind of device the same
 

00:23:17.879 --> 00:23:20.269
up the same kind of device the same
platform version and the same scenario

00:23:20.269 --> 00:23:20.279
platform version and the same scenario
 

00:23:20.279 --> 00:23:26.809
platform version and the same scenario
of what's running on device and now

00:23:26.809 --> 00:23:26.819
of what's running on device and now
 

00:23:26.819 --> 00:23:28.219
of what's running on device and now
there's a third case I want to talk

00:23:28.219 --> 00:23:28.229
there's a third case I want to talk
 

00:23:28.229 --> 00:23:29.809
there's a third case I want to talk
about which is pretty interesting which

00:23:29.809 --> 00:23:29.819
about which is pretty interesting which
 

00:23:29.819 --> 00:23:32.029
about which is pretty interesting which
is a little bit counterintuitive which

00:23:32.029 --> 00:23:32.039
is a little bit counterintuitive which
 

00:23:32.039 --> 00:23:35.659
is a little bit counterintuitive which
is an applications memory impact depends

00:23:35.659 --> 00:23:35.669
is an applications memory impact depends
 

00:23:35.669 --> 00:23:38.869
is an applications memory impact depends
on the memory pressure on device so here

00:23:38.869 --> 00:23:38.879
on the memory pressure on device so here
 

00:23:38.879 --> 00:23:40.339
on the memory pressure on device so here
what I've done is I've taken Chrome

00:23:40.339 --> 00:23:40.349
what I've done is I've taken Chrome
 

00:23:40.349 --> 00:23:43.999
what I've done is I've taken Chrome
application and I started running it on

00:23:43.999 --> 00:23:44.009
application and I started running it on
 

00:23:44.009 --> 00:23:45.409
application and I started running it on
the device that had plenty of free

00:23:45.409 --> 00:23:45.419
the device that had plenty of free
 

00:23:45.419 --> 00:23:48.379
the device that had plenty of free
memory and then I set up some native

00:23:48.379 --> 00:23:48.389
memory and then I set up some native
 

00:23:48.389 --> 00:23:49.849
memory and then I set up some native
process in the background that's going

00:23:49.849 --> 00:23:49.859
process in the background that's going
 

00:23:49.859 --> 00:23:52.129
process in the background that's going
to slowly use it more and more memory on

00:23:52.129 --> 00:23:52.139
to slowly use it more and more memory on
 

00:23:52.139 --> 00:23:53.749
to slowly use it more and more memory on
the device so that I can see what

00:23:53.749 --> 00:23:53.759
the device so that I can see what
 

00:23:53.759 --> 00:23:55.729
the device so that I can see what
happens to Chrome when the device gets

00:23:55.729 --> 00:23:55.739
happens to Chrome when the device gets
 

00:23:55.739 --> 00:23:57.409
happens to Chrome when the device gets
under medium memory pressure or high

00:23:57.409 --> 00:23:57.419
under medium memory pressure or high
 

00:23:57.419 --> 00:23:59.989
under medium memory pressure or high
memory pressure and we can see when

00:23:59.989 --> 00:23:59.999
memory pressure and we can see when
 

00:23:59.999 --> 00:24:01.579
memory pressure and we can see when
there's plenty of free memory on the

00:24:01.579 --> 00:24:01.589
there's plenty of free memory on the
 

00:24:01.589 --> 00:24:04.369
there's plenty of free memory on the
device so low memory pressure Chrome's

00:24:04.369 --> 00:24:04.379
device so low memory pressure Chrome's
 

00:24:04.379 --> 00:24:06.529
device so low memory pressure Chrome's
PSS is pretty flat except for that

00:24:06.529 --> 00:24:06.539
PSS is pretty flat except for that
 

00:24:06.539 --> 00:24:08.509
PSS is pretty flat except for that
little spike which is probably some

00:24:08.509 --> 00:24:08.519
little spike which is probably some
 

00:24:08.519 --> 00:24:10.939
little spike which is probably some
variation in app use case for the

00:24:10.939 --> 00:24:10.949
variation in app use case for the
 

00:24:10.949 --> 00:24:15.199
variation in app use case for the
platform when the device gets under

00:24:15.199 --> 00:24:15.209
platform when the device gets under
 

00:24:15.209 --> 00:24:17.209
platform when the device gets under
enough memory pressure that case floppy

00:24:17.209 --> 00:24:17.219
enough memory pressure that case floppy
 

00:24:17.219 --> 00:24:19.279
enough memory pressure that case floppy
kicks in and starts to reclaim cache

00:24:19.279 --> 00:24:19.289
kicks in and starts to reclaim cache
 

00:24:19.289 --> 00:24:22.039
kicks in and starts to reclaim cache
pages while some of those pages that it

00:24:22.039 --> 00:24:22.049
pages while some of those pages that it
 

00:24:22.049 --> 00:24:24.349
pages while some of those pages that it
reclaims are going to be from the chrome

00:24:24.349 --> 00:24:24.359
reclaims are going to be from the chrome
 

00:24:24.359 --> 00:24:26.869
reclaims are going to be from the chrome
process and that's gonna cause phone's

00:24:26.869 --> 00:24:26.879
process and that's gonna cause phone's
 

00:24:26.879 --> 00:24:29.359
process and that's gonna cause phone's
memory impact to go down it's PSS is

00:24:29.359 --> 00:24:29.369
memory impact to go down it's PSS is
 

00:24:29.369 --> 00:24:32.479
memory impact to go down it's PSS is
going to go down until eventually if the

00:24:32.479 --> 00:24:32.489
going to go down until eventually if the
 

00:24:32.489 --> 00:24:34.699
going to go down until eventually if the
device has so much memory pressure the

00:24:34.699 --> 00:24:34.709
device has so much memory pressure the
 

00:24:34.709 --> 00:24:36.649
device has so much memory pressure the
low memory killer is active and it

00:24:36.649 --> 00:24:36.659
low memory killer is active and it
 

00:24:36.659 --> 00:24:40.249
low memory killer is active and it
decides it wants to kill chrome then VSS

00:24:40.249 --> 00:24:40.259
decides it wants to kill chrome then VSS
 

00:24:40.259 --> 00:24:42.049
decides it wants to kill chrome then VSS
for comb is going to very quickly drop

00:24:42.049 --> 00:24:42.059
for comb is going to very quickly drop
 

00:24:42.059 --> 00:24:43.720
for comb is going to very quickly drop
to zero

00:24:43.720 --> 00:24:43.730
to zero
 

00:24:43.730 --> 00:24:46.009
to zero
so what you can see here is that even

00:24:46.009 --> 00:24:46.019
so what you can see here is that even
 

00:24:46.019 --> 00:24:48.560
so what you can see here is that even
for the same application use case the

00:24:48.560 --> 00:24:48.570
for the same application use case the
 

00:24:48.570 --> 00:24:50.899
for the same application use case the
same platform configuration we have a

00:24:50.899 --> 00:24:50.909
same platform configuration we have a
 

00:24:50.909 --> 00:24:53.509
same platform configuration we have a
wide range of PSS values we might get

00:24:53.509 --> 00:24:53.519
wide range of PSS values we might get
 

00:24:53.519 --> 00:24:55.549
wide range of PSS values we might get
and so you have to be a little bit

00:24:55.549 --> 00:24:55.559
and so you have to be a little bit
 

00:24:55.559 --> 00:24:58.759
and so you have to be a little bit
careful imagine I've come up with this

00:24:58.759 --> 00:24:58.769
careful imagine I've come up with this
 

00:24:58.769 --> 00:25:01.250
careful imagine I've come up with this
optimized version of the Chrome apk and

00:25:01.250 --> 00:25:01.260
optimized version of the Chrome apk and
 

00:25:01.260 --> 00:25:03.649
optimized version of the Chrome apk and
it has this kind of lighter blue line

00:25:03.649 --> 00:25:03.659
it has this kind of lighter blue line
 

00:25:03.659 --> 00:25:06.590
it has this kind of lighter blue line
for the memory profile I'm confident

00:25:06.590 --> 00:25:06.600
for the memory profile I'm confident
 

00:25:06.600 --> 00:25:09.200
for the memory profile I'm confident
that this is an optimized version of the

00:25:09.200 --> 00:25:09.210
that this is an optimized version of the
 

00:25:09.210 --> 00:25:11.779
that this is an optimized version of the
APK from a memory standpoint because for

00:25:11.779 --> 00:25:11.789
APK from a memory standpoint because for
 

00:25:11.789 --> 00:25:14.629
APK from a memory standpoint because for
every level of device memory pressure it

00:25:14.629 --> 00:25:14.639
every level of device memory pressure it
 

00:25:14.639 --> 00:25:17.480
every level of device memory pressure it
uses less memory but if I'm doing a test

00:25:17.480 --> 00:25:17.490
uses less memory but if I'm doing a test
 

00:25:17.490 --> 00:25:20.450
uses less memory but if I'm doing a test
and I sample the PSS of the original

00:25:20.450 --> 00:25:20.460
and I sample the PSS of the original
 

00:25:20.460 --> 00:25:23.269
and I sample the PSS of the original
chrome version at point a but I sampled

00:25:23.269 --> 00:25:23.279
chrome version at point a but I sampled
 

00:25:23.279 --> 00:25:26.960
chrome version at point a but I sampled
the dss of the supposedly optimized

00:25:26.960 --> 00:25:26.970
the dss of the supposedly optimized
 

00:25:26.970 --> 00:25:29.360
the dss of the supposedly optimized
chrome version at point B and I compared

00:25:29.360 --> 00:25:29.370
chrome version at point B and I compared
 

00:25:29.370 --> 00:25:32.720
chrome version at point B and I compared
and they say oh well a is less than B so

00:25:32.720 --> 00:25:32.730
and they say oh well a is less than B so
 

00:25:32.730 --> 00:25:33.889
and they say oh well a is less than B so
a has less memory

00:25:33.889 --> 00:25:33.899
a has less memory
 

00:25:33.899 --> 00:25:36.289
a has less memory
I might falsely conclude that the

00:25:36.289 --> 00:25:36.299
I might falsely conclude that the
 

00:25:36.299 --> 00:25:38.450
I might falsely conclude that the
original burnt version of Chrome is

00:25:38.450 --> 00:25:38.460
original burnt version of Chrome is
 

00:25:38.460 --> 00:25:41.180
original burnt version of Chrome is
better than my optimized version so you

00:25:41.180 --> 00:25:41.190
better than my optimized version so you
 

00:25:41.190 --> 00:25:43.100
better than my optimized version so you
really have to be careful in comparing

00:25:43.100 --> 00:25:43.110
really have to be careful in comparing
 

00:25:43.110 --> 00:25:45.649
really have to be careful in comparing
VSS values to make sure that the device

00:25:45.649 --> 00:25:45.659
VSS values to make sure that the device
 

00:25:45.659 --> 00:25:48.049
VSS values to make sure that the device
memory pressure is the same otherwise

00:25:48.049 --> 00:25:48.059
memory pressure is the same otherwise
 

00:25:48.059 --> 00:25:51.950
memory pressure is the same otherwise
you can get these funny results my

00:25:51.950 --> 00:25:51.960
you can get these funny results my
 

00:25:51.960 --> 00:25:54.049
you can get these funny results my
advice because it's it's pretty hard to

00:25:54.049 --> 00:25:54.059
advice because it's it's pretty hard to
 

00:25:54.059 --> 00:25:57.470
advice because it's it's pretty hard to
control for device memory pressure is to

00:25:57.470 --> 00:25:57.480
control for device memory pressure is to
 

00:25:57.480 --> 00:25:59.419
control for device memory pressure is to
run your tests on the device that has

00:25:59.419 --> 00:25:59.429
run your tests on the device that has
 

00:25:59.429 --> 00:26:01.759
run your tests on the device that has
plenty of free RAM so that there's a low

00:26:01.759 --> 00:26:01.769
plenty of free RAM so that there's a low
 

00:26:01.769 --> 00:26:03.620
plenty of free RAM so that there's a low
device memory pressure and you can see

00:26:03.620 --> 00:26:03.630
device memory pressure and you can see
 

00:26:03.630 --> 00:26:05.899
device memory pressure and you can see
the PSS numbers will be much more stable

00:26:05.899 --> 00:26:05.909
the PSS numbers will be much more stable
 

00:26:05.909 --> 00:26:14.180
the PSS numbers will be much more stable
in that area okay so we talked about why

00:26:14.180 --> 00:26:14.190
in that area okay so we talked about why
 

00:26:14.190 --> 00:26:16.580
in that area okay so we talked about why
you want your applications not to take

00:26:16.580 --> 00:26:16.590
you want your applications not to take
 

00:26:16.590 --> 00:26:18.950
you want your applications not to take
up too much memory how you can evaluate

00:26:18.950 --> 00:26:18.960
up too much memory how you can evaluate
 

00:26:18.960 --> 00:26:22.220
up too much memory how you can evaluate
your applications memory impact let me

00:26:22.220 --> 00:26:22.230
your applications memory impact let me
 

00:26:22.230 --> 00:26:24.110
your applications memory impact let me
now give you some tips for how to reduce

00:26:24.110 --> 00:26:24.120
now give you some tips for how to reduce
 

00:26:24.120 --> 00:26:26.600
now give you some tips for how to reduce
your applications memory impact and the

00:26:26.600 --> 00:26:26.610
your applications memory impact and the
 

00:26:26.610 --> 00:26:29.509
your applications memory impact and the
first tip is check out Android Studios

00:26:29.509 --> 00:26:29.519
first tip is check out Android Studios
 

00:26:29.519 --> 00:26:31.610
first tip is check out Android Studios
memory profiler profile your

00:26:31.610 --> 00:26:31.620
memory profiler profile your
 

00:26:31.620 --> 00:26:34.909
memory profiler profile your
applications Java heap this is going to

00:26:34.909 --> 00:26:34.919
applications Java heap this is going to
 

00:26:34.919 --> 00:26:37.789
applications Java heap this is going to
give you a ton of information useful

00:26:37.789 --> 00:26:37.799
give you a ton of information useful
 

00:26:37.799 --> 00:26:39.680
give you a ton of information useful
information about the Java objects on

00:26:39.680 --> 00:26:39.690
information about the Java objects on
 

00:26:39.690 --> 00:26:41.810
information about the Java objects on
your heap so where they're allocated

00:26:41.810 --> 00:26:41.820
your heap so where they're allocated
 

00:26:41.820 --> 00:26:44.419
your heap so where they're allocated
what's holding on to them how big they

00:26:44.419 --> 00:26:44.429
what's holding on to them how big they
 

00:26:44.429 --> 00:26:47.299
what's holding on to them how big they
are and pretty much anything you want to

00:26:47.299 --> 00:26:47.309
are and pretty much anything you want to
 

00:26:47.309 --> 00:26:48.740
are and pretty much anything you want to
know about the Java heap you can see

00:26:48.740 --> 00:26:48.750
know about the Java heap you can see
 

00:26:48.750 --> 00:26:52.399
know about the Java heap you can see
from this my tip for you is to focus on

00:26:52.399 --> 00:26:52.409
from this my tip for you is to focus on
 

00:26:52.409 --> 00:26:54.200
from this my tip for you is to focus on
the app heap so if you open this up in

00:26:54.200 --> 00:26:54.210
the app heap so if you open this up in
 

00:26:54.210 --> 00:26:56.580
the app heap so if you open this up in
Android studio you'll see three heaps

00:26:56.580 --> 00:26:56.590
Android studio you'll see three heaps
 

00:26:56.590 --> 00:26:58.379
Android studio you'll see three heaps
there's a zygote heap on the image heap

00:26:58.379 --> 00:26:58.389
there's a zygote heap on the image heap
 

00:26:58.389 --> 00:27:00.930
there's a zygote heap on the image heap
when the app keep the image heap and the

00:27:00.930 --> 00:27:00.940
when the app keep the image heap and the
 

00:27:00.940 --> 00:27:03.600
when the app keep the image heap and the
zygote heap are inherited from the the

00:27:03.600 --> 00:27:03.610
zygote heap are inherited from the the
 

00:27:03.610 --> 00:27:05.369
zygote heap are inherited from the the
system when your application first

00:27:05.369 --> 00:27:05.379
system when your application first
 

00:27:05.379 --> 00:27:07.019
system when your application first
launches so there's not much you can do

00:27:07.019 --> 00:27:07.029
launches so there's not much you can do
 

00:27:07.029 --> 00:27:10.230
launches so there's not much you can do
about that but definitely you can do a

00:27:10.230 --> 00:27:10.240
about that but definitely you can do a
 

00:27:10.240 --> 00:27:14.190
about that but definitely you can do a
lot on the App Keith I'm not gonna go

00:27:14.190 --> 00:27:14.200
lot on the App Keith I'm not gonna go
 

00:27:14.200 --> 00:27:17.220
lot on the App Keith I'm not gonna go
into a ton of detail on how you would

00:27:17.220 --> 00:27:17.230
into a ton of detail on how you would
 

00:27:17.230 --> 00:27:19.080
into a ton of detail on how you would
use this tool or actually not very much

00:27:19.080 --> 00:27:19.090
use this tool or actually not very much
 

00:27:19.090 --> 00:27:21.749
use this tool or actually not very much
at all because Esteban is going to be

00:27:21.749 --> 00:27:21.759
at all because Esteban is going to be
 

00:27:21.759 --> 00:27:25.889
at all because Esteban is going to be
giving a talk tomorrow 12:30 on exactly

00:27:25.889 --> 00:27:25.899
giving a talk tomorrow 12:30 on exactly
 

00:27:25.899 --> 00:27:27.960
giving a talk tomorrow 12:30 on exactly
how to use this tool his team built the

00:27:27.960 --> 00:27:27.970
how to use this tool his team built the
 

00:27:27.970 --> 00:27:29.730
how to use this tool his team built the
tool he's going to be talking about how

00:27:29.730 --> 00:27:29.740
tool he's going to be talking about how
 

00:27:29.740 --> 00:27:32.820
tool he's going to be talking about how
to do live allocation tracking and deep

00:27:32.820 --> 00:27:32.830
to do live allocation tracking and deep
 

00:27:32.830 --> 00:27:34.889
to do live allocation tracking and deep
analysis so I highly recommend you go

00:27:34.889 --> 00:27:34.899
analysis so I highly recommend you go
 

00:27:34.899 --> 00:27:42.180
analysis so I highly recommend you go
check out that talk tomorrow at 12:30 ok

00:27:42.180 --> 00:27:42.190
check out that talk tomorrow at 12:30 ok
 

00:27:42.190 --> 00:27:45.869
check out that talk tomorrow at 12:30 ok
so you say Richard you've told us that

00:27:45.869 --> 00:27:45.879
so you say Richard you've told us that
 

00:27:45.879 --> 00:27:47.609
so you say Richard you've told us that
we should care about TSS that's our

00:27:47.609 --> 00:27:47.619
we should care about TSS that's our
 

00:27:47.619 --> 00:27:50.430
we should care about TSS that's our
applications memory in fact you just

00:27:50.430 --> 00:27:50.440
applications memory in fact you just
 

00:27:50.440 --> 00:27:51.930
applications memory in fact you just
told us we should use the Android

00:27:51.930 --> 00:27:51.940
told us we should use the Android
 

00:27:51.940 --> 00:27:54.029
told us we should use the Android
Studios memory profile to profile the

00:27:54.029 --> 00:27:54.039
Studios memory profile to profile the
 

00:27:54.039 --> 00:27:56.730
Studios memory profile to profile the
Java heap but if we look here we see

00:27:56.730 --> 00:27:56.740
Java heap but if we look here we see
 

00:27:56.740 --> 00:27:59.609
Java heap but if we look here we see
well the gentleman keeps not actually

00:27:59.609 --> 00:27:59.619
well the gentleman keeps not actually
 

00:27:59.619 --> 00:28:02.549
well the gentleman keeps not actually
all that much of the overall memory

00:28:02.549 --> 00:28:02.559
all that much of the overall memory
 

00:28:02.559 --> 00:28:05.669
all that much of the overall memory
impact of the application what about all

00:28:05.669 --> 00:28:05.679
impact of the application what about all
 

00:28:05.679 --> 00:28:07.289
impact of the application what about all
the rest of this memory what should we

00:28:07.289 --> 00:28:07.299
the rest of this memory what should we
 

00:28:07.299 --> 00:28:12.509
the rest of this memory what should we
do here this is tricky because most of

00:28:12.509 --> 00:28:12.519
do here this is tricky because most of
 

00:28:12.519 --> 00:28:14.669
do here this is tricky because most of
these applications or our allocation

00:28:14.669 --> 00:28:14.679
these applications or our allocation
 

00:28:14.679 --> 00:28:17.850
these applications or our allocation
sorry are originating deep within the

00:28:17.850 --> 00:28:17.860
sorry are originating deep within the
 

00:28:17.860 --> 00:28:21.299
sorry are originating deep within the
platform stack the Android stack so if

00:28:21.299 --> 00:28:21.309
platform stack the Android stack so if
 

00:28:21.309 --> 00:28:23.759
platform stack the Android stack so if
you want to know about them and really

00:28:23.759 --> 00:28:23.769
you want to know about them and really
 

00:28:23.769 --> 00:28:25.769
you want to know about them and really
understand them it helps to know a lot

00:28:25.769 --> 00:28:25.779
understand them it helps to know a lot
 

00:28:25.779 --> 00:28:29.700
understand them it helps to know a lot
more about say how frameworks is

00:28:29.700 --> 00:28:29.710
more about say how frameworks is
 

00:28:29.710 --> 00:28:31.230
more about say how frameworks is
implementing the view system or

00:28:31.230 --> 00:28:31.240
implementing the view system or
 

00:28:31.240 --> 00:28:34.109
implementing the view system or
resources or power the native libraries

00:28:34.109 --> 00:28:34.119
resources or power the native libraries
 

00:28:34.119 --> 00:28:36.749
resources or power the native libraries
fonts and sequel light and resources ah

00:28:36.749 --> 00:28:36.759
fonts and sequel light and resources ah
 

00:28:36.759 --> 00:28:39.330
fonts and sequel light and resources ah
sorry webview is working from the

00:28:39.330 --> 00:28:39.340
sorry webview is working from the
 

00:28:39.340 --> 00:28:41.159
sorry webview is working from the
Android runtime how it's running your

00:28:41.159 --> 00:28:41.169
Android runtime how it's running your
 

00:28:41.169 --> 00:28:43.470
Android runtime how it's running your
code from the hardware abstraction layer

00:28:43.470 --> 00:28:43.480
code from the hardware abstraction layer
 

00:28:43.480 --> 00:28:46.859
code from the hardware abstraction layer
how graphics is working all the way down

00:28:46.859 --> 00:28:46.869
how graphics is working all the way down
 

00:28:46.869 --> 00:28:49.470
how graphics is working all the way down
to virtual memory management management

00:28:49.470 --> 00:28:49.480
to virtual memory management management
 

00:28:49.480 --> 00:28:53.100
to virtual memory management management
in the Linux kernel by the way I live in

00:28:53.100 --> 00:28:53.110
in the Linux kernel by the way I live in
 

00:28:53.110 --> 00:28:55.019
in the Linux kernel by the way I live in
the orange block in the middle of the

00:28:55.019 --> 00:28:55.029
the orange block in the middle of the
 

00:28:55.029 --> 00:28:56.940
the orange block in the middle of the
Android runtime that's where I am in

00:28:56.940 --> 00:28:56.950
Android runtime that's where I am in
 

00:28:56.950 --> 00:29:00.570
Android runtime that's where I am in
this step so you might ask ok so these

00:29:00.570 --> 00:29:00.580
this step so you might ask ok so these
 

00:29:00.580 --> 00:29:02.789
this step so you might ask ok so these
this memory is coming from the platform

00:29:02.789 --> 00:29:02.799
this memory is coming from the platform
 

00:29:02.799 --> 00:29:05.369
this memory is coming from the platform
or within the platform should we be

00:29:05.369 --> 00:29:05.379
or within the platform should we be
 

00:29:05.379 --> 00:29:08.340
or within the platform should we be
using platform tools to diagnose this

00:29:08.340 --> 00:29:08.350
using platform tools to diagnose this
 

00:29:08.350 --> 00:29:09.180
using platform tools to diagnose this
memory

00:29:09.180 --> 00:29:09.190
memory
 

00:29:09.190 --> 00:29:13.139
memory
for instance if dumpsters mem info - s

00:29:13.139 --> 00:29:13.149
for instance if dumpsters mem info - s
 

00:29:13.149 --> 00:29:15.539
for instance if dumpsters mem info - s
that summary view isn't enough you could

00:29:15.539 --> 00:29:15.549
that summary view isn't enough you could
 

00:29:15.549 --> 00:29:18.450
that summary view isn't enough you could
try running dump system info with - a to

00:29:18.450 --> 00:29:18.460
try running dump system info with - a to
 

00:29:18.460 --> 00:29:20.609
try running dump system info with - a to
show basically everything you can see

00:29:20.609 --> 00:29:20.619
show basically everything you can see
 

00:29:20.619 --> 00:29:22.799
show basically everything you can see
from a platform perspective about your

00:29:22.799 --> 00:29:22.809
from a platform perspective about your
 

00:29:22.809 --> 00:29:25.739
from a platform perspective about your
applications memory use this will give

00:29:25.739 --> 00:29:25.749
applications memory use this will give
 

00:29:25.749 --> 00:29:27.989
applications memory use this will give
you a much more detailed breakdown for

00:29:27.989 --> 00:29:27.999
you a much more detailed breakdown for
 

00:29:27.999 --> 00:29:30.710
you a much more detailed breakdown for
instance instead of seeing your your

00:29:30.710 --> 00:29:30.720
instance instead of seeing your your
 

00:29:30.720 --> 00:29:34.080
instance instead of seeing your your
code memory regressed you can see is it

00:29:34.080 --> 00:29:34.090
code memory regressed you can see is it
 

00:29:34.090 --> 00:29:36.509
code memory regressed you can see is it
because my dot s o memory mappings have

00:29:36.509 --> 00:29:36.519
because my dot s o memory mappings have
 

00:29:36.519 --> 00:29:40.289
because my dot s o memory mappings have
regressed or my dot apk or Dex M memory

00:29:40.289 --> 00:29:40.299
regressed or my dot apk or Dex M memory
 

00:29:40.299 --> 00:29:43.680
regressed or my dot apk or Dex M memory
mappings have regressed it'll also show

00:29:43.680 --> 00:29:43.690
mappings have regressed it'll also show
 

00:29:43.690 --> 00:29:45.930
mappings have regressed it'll also show
you a breakdown of the different

00:29:45.930 --> 00:29:45.940
you a breakdown of the different
 

00:29:45.940 --> 00:29:48.330
you a breakdown of the different
categories of memory so private clean

00:29:48.330 --> 00:29:48.340
categories of memory so private clean
 

00:29:48.340 --> 00:29:52.080
categories of memory so private clean
shared dirty and so on private dirty

00:29:52.080 --> 00:29:52.090
shared dirty and so on private dirty
 

00:29:52.090 --> 00:29:54.060
shared dirty and so on private dirty
memory is like the used memory I was

00:29:54.060 --> 00:29:54.070
memory is like the used memory I was
 

00:29:54.070 --> 00:29:55.349
memory is like the used memory I was
talking about at the beginning

00:29:55.349 --> 00:29:55.359
talking about at the beginning
 

00:29:55.359 --> 00:29:58.169
talking about at the beginning
private clean memory the clean suggests

00:29:58.169 --> 00:29:58.179
private clean memory the clean suggests
 

00:29:58.179 --> 00:30:00.299
private clean memory the clean suggests
it's it's like the cache memory that

00:30:00.299 --> 00:30:00.309
it's it's like the cache memory that
 

00:30:00.309 --> 00:30:03.299
it's it's like the cache memory that
also lives on this so you could use dump

00:30:03.299 --> 00:30:03.309
also lives on this so you could use dump
 

00:30:03.309 --> 00:30:06.029
also lives on this so you could use dump
system info if that's not enough detail

00:30:06.029 --> 00:30:06.039
system info if that's not enough detail
 

00:30:06.039 --> 00:30:08.489
system info if that's not enough detail
maybe you see ok dot a PKM that

00:30:08.489 --> 00:30:08.499
maybe you see ok dot a PKM that
 

00:30:08.499 --> 00:30:10.589
maybe you see ok dot a PKM that
progressed there's this tool called show

00:30:10.589 --> 00:30:10.599
progressed there's this tool called show
 

00:30:10.599 --> 00:30:12.629
progressed there's this tool called show
map you can do run on your application

00:30:12.629 --> 00:30:12.639
map you can do run on your application
 

00:30:12.639 --> 00:30:14.310
map you can do run on your application
and it's going to give you an even more

00:30:14.310 --> 00:30:14.320
and it's going to give you an even more
 

00:30:14.320 --> 00:30:17.519
and it's going to give you an even more
fine-grained breakdown of your memory

00:30:17.519 --> 00:30:17.529
fine-grained breakdown of your memory
 

00:30:17.529 --> 00:30:20.519
fine-grained breakdown of your memory
memory memory mappings and it'll

00:30:20.519 --> 00:30:20.529
memory memory mappings and it'll
 

00:30:20.529 --> 00:30:22.799
memory memory mappings and it'll
actually give you specific files that

00:30:22.799 --> 00:30:22.809
actually give you specific files that
 

00:30:22.809 --> 00:30:24.450
actually give you specific files that
are being memory mapped in your

00:30:24.450 --> 00:30:24.460
are being memory mapped in your
 

00:30:24.460 --> 00:30:26.629
are being memory mapped in your
application and this can help pinpoint

00:30:26.629 --> 00:30:26.639
application and this can help pinpoint
 

00:30:26.639 --> 00:30:29.570
application and this can help pinpoint
what files might might have led to

00:30:29.570 --> 00:30:29.580
what files might might have led to
 

00:30:29.580 --> 00:30:34.969
what files might might have led to
regressions in the platform we have a

00:30:34.969 --> 00:30:34.979
regressions in the platform we have a
 

00:30:34.979 --> 00:30:38.119
regressions in the platform we have a
heap dump viewer that I've developed

00:30:38.119 --> 00:30:38.129
heap dump viewer that I've developed
 

00:30:38.129 --> 00:30:40.169
heap dump viewer that I've developed
experimental heap dump you were called a

00:30:40.169 --> 00:30:40.179
experimental heap dump you were called a
 

00:30:40.179 --> 00:30:42.749
experimental heap dump you were called a
hat that tries to surface more platform

00:30:42.749 --> 00:30:42.759
hat that tries to surface more platform
 

00:30:42.759 --> 00:30:44.549
hat that tries to surface more platform
specific things you could try using that

00:30:44.549 --> 00:30:44.559
specific things you could try using that
 

00:30:44.559 --> 00:30:47.099
specific things you could try using that
to learn more about your Java heap

00:30:47.099 --> 00:30:47.109
to learn more about your Java heap
 

00:30:47.109 --> 00:30:49.680
to learn more about your Java heap
though Android Studios memory profile

00:30:49.680 --> 00:30:49.690
though Android Studios memory profile
 

00:30:49.690 --> 00:30:53.159
though Android Studios memory profile
will have all the same information and

00:30:53.159 --> 00:30:53.169
will have all the same information and
 

00:30:53.169 --> 00:30:55.169
will have all the same information and
then we also have on the platform

00:30:55.169 --> 00:30:55.179
then we also have on the platform
 

00:30:55.179 --> 00:30:56.999
then we also have on the platform
something called debug malloc this is

00:30:56.999 --> 00:30:57.009
something called debug malloc this is
 

00:30:57.009 --> 00:30:58.560
something called debug malloc this is
where you can instrument your

00:30:58.560 --> 00:30:58.570
where you can instrument your
 

00:30:58.570 --> 00:31:00.810
where you can instrument your
application so that every native

00:31:00.810 --> 00:31:00.820
application so that every native
 

00:31:00.820 --> 00:31:02.999
application so that every native
allocation it makes it's going to save a

00:31:02.999 --> 00:31:03.009
allocation it makes it's going to save a
 

00:31:03.009 --> 00:31:04.889
allocation it makes it's going to save a
back-trace a stack trace to that

00:31:04.889 --> 00:31:04.899
back-trace a stack trace to that
 

00:31:04.899 --> 00:31:08.519
back-trace a stack trace to that
allocation you take a what we call a

00:31:08.519 --> 00:31:08.529
allocation you take a what we call a
 

00:31:08.529 --> 00:31:11.909
allocation you take a what we call a
native heap snapshot of your app when

00:31:11.909 --> 00:31:11.919
native heap snapshot of your app when
 

00:31:11.919 --> 00:31:14.159
native heap snapshot of your app when
it's running instrumented and if you

00:31:14.159 --> 00:31:14.169
it's running instrumented and if you
 

00:31:14.169 --> 00:31:15.930
it's running instrumented and if you
have the symbols you can D symbolize the

00:31:15.930 --> 00:31:15.940
have the symbols you can D symbolize the
 

00:31:15.940 --> 00:31:18.509
have the symbols you can D symbolize the
stack traces and you can get native

00:31:18.509 --> 00:31:18.519
stack traces and you can get native
 

00:31:18.519 --> 00:31:20.639
stack traces and you can get native
stack traces for all of your native

00:31:20.639 --> 00:31:20.649
stack traces for all of your native
 

00:31:20.649 --> 00:31:22.080
stack traces for all of your native
allocations

00:31:22.080 --> 00:31:22.090
allocations
 

00:31:22.090 --> 00:31:25.090
allocations
this has quite a bit of overhead at

00:31:25.090 --> 00:31:25.100
this has quite a bit of overhead at
 

00:31:25.100 --> 00:31:26.800
this has quite a bit of overhead at
runtime and so it can be a little bit

00:31:26.800 --> 00:31:26.810
runtime and so it can be a little bit
 

00:31:26.810 --> 00:31:29.380
runtime and so it can be a little bit
tricky to work but it provides a lot of

00:31:29.380 --> 00:31:29.390
tricky to work but it provides a lot of
 

00:31:29.390 --> 00:31:31.660
tricky to work but it provides a lot of
insight into the native feed so we have

00:31:31.660 --> 00:31:31.670
insight into the native feed so we have
 

00:31:31.670 --> 00:31:34.210
insight into the native feed so we have
these platform tools should we use them

00:31:34.210 --> 00:31:34.220
these platform tools should we use them
 

00:31:34.220 --> 00:31:37.540
these platform tools should we use them
can we use them well certainly you could

00:31:37.540 --> 00:31:37.550
can we use them well certainly you could
 

00:31:37.550 --> 00:31:40.330
can we use them well certainly you could
they're all available but some caveats

00:31:40.330 --> 00:31:40.340
they're all available but some caveats
 

00:31:40.340 --> 00:31:42.460
they're all available but some caveats
with these tools they tend not to be

00:31:42.460 --> 00:31:42.470
with these tools they tend not to be
 

00:31:42.470 --> 00:31:43.480
with these tools they tend not to be
well supported

00:31:43.480 --> 00:31:43.490
well supported
 

00:31:43.490 --> 00:31:46.450
well supported
they have very clumsy user interfaces as

00:31:46.450 --> 00:31:46.460
they have very clumsy user interfaces as
 

00:31:46.460 --> 00:31:50.250
they have very clumsy user interfaces as
you you just witnessed from my snapshots

00:31:50.250 --> 00:31:50.260
you you just witnessed from my snapshots
 

00:31:50.260 --> 00:31:53.020
you you just witnessed from my snapshots
this approach requires quite a bit of

00:31:53.020 --> 00:31:53.030
this approach requires quite a bit of
 

00:31:53.030 --> 00:31:55.330
this approach requires quite a bit of
deep platform expertise to understand

00:31:55.330 --> 00:31:55.340
deep platform expertise to understand
 

00:31:55.340 --> 00:31:56.860
deep platform expertise to understand
for instance oh it's the difference

00:31:56.860 --> 00:31:56.870
for instance oh it's the difference
 

00:31:56.870 --> 00:32:00.520
for instance oh it's the difference
between decks and matvey decks and map

00:32:00.520 --> 00:32:00.530
between decks and matvey decks and map
 

00:32:00.530 --> 00:32:02.050
between decks and matvey decks and map
out and map where are these things

00:32:02.050 --> 00:32:02.060
out and map where are these things
 

00:32:02.060 --> 00:32:06.580
out and map where are these things
coming from for instance you might need

00:32:06.580 --> 00:32:06.590
coming from for instance you might need
 

00:32:06.590 --> 00:32:08.590
coming from for instance you might need
to have a rooted device such as in the

00:32:08.590 --> 00:32:08.600
to have a rooted device such as in the
 

00:32:08.600 --> 00:32:10.690
to have a rooted device such as in the
case for show map and debug malloc you

00:32:10.690 --> 00:32:10.700
case for show map and debug malloc you
 

00:32:10.700 --> 00:32:12.340
case for show map and debug malloc you
might have to build a platform yourself

00:32:12.340 --> 00:32:12.350
might have to build a platform yourself
 

00:32:12.350 --> 00:32:13.960
might have to build a platform yourself
if you want to get your hands on a hat

00:32:13.960 --> 00:32:13.970
if you want to get your hands on a hat
 

00:32:13.970 --> 00:32:16.090
if you want to get your hands on a hat
or the symbols that debug mouth needs to

00:32:16.090 --> 00:32:16.100
or the symbols that debug mouth needs to
 

00:32:16.100 --> 00:32:19.360
or the symbols that debug mouth needs to
symbolise the numbers tend to be pretty

00:32:19.360 --> 00:32:19.370
symbolise the numbers tend to be pretty
 

00:32:19.370 --> 00:32:21.160
symbolise the numbers tend to be pretty
noisy because you're looking at memory

00:32:21.160 --> 00:32:21.170
noisy because you're looking at memory
 

00:32:21.170 --> 00:32:24.430
noisy because you're looking at memory
at a page level and a lot of the memory

00:32:24.430 --> 00:32:24.440
at a page level and a lot of the memory
 

00:32:24.440 --> 00:32:26.980
at a page level and a lot of the memory
use you'll see from these tools is kind

00:32:26.980 --> 00:32:26.990
use you'll see from these tools is kind
 

00:32:26.990 --> 00:32:29.290
use you'll see from these tools is kind
of outside of your control anyway so you

00:32:29.290 --> 00:32:29.300
of outside of your control anyway so you
 

00:32:29.300 --> 00:32:32.380
of outside of your control anyway so you
might see zygote allocations runtime

00:32:32.380 --> 00:32:32.390
might see zygote allocations runtime
 

00:32:32.390 --> 00:32:34.420
might see zygote allocations runtime
allocations that that aren't related to

00:32:34.420 --> 00:32:34.430
allocations that that aren't related to
 

00:32:34.430 --> 00:32:37.810
allocations that that aren't related to
your code so I don't think that this is

00:32:37.810 --> 00:32:37.820
your code so I don't think that this is
 

00:32:37.820 --> 00:32:39.730
your code so I don't think that this is
the best use of your time to try and use

00:32:39.730 --> 00:32:39.740
the best use of your time to try and use
 

00:32:39.740 --> 00:32:42.520
the best use of your time to try and use
these tools though by all means go ahead

00:32:42.520 --> 00:32:42.530
these tools though by all means go ahead
 

00:32:42.530 --> 00:32:45.640
these tools though by all means go ahead
and try them out I'm gonna give a bit of

00:32:45.640 --> 00:32:45.650
and try them out I'm gonna give a bit of
 

00:32:45.650 --> 00:32:47.260
and try them out I'm gonna give a bit of
a different suggestion which is if you

00:32:47.260 --> 00:32:47.270
a different suggestion which is if you
 

00:32:47.270 --> 00:32:50.080
a different suggestion which is if you
want to improve your overall memory use

00:32:50.080 --> 00:32:50.090
want to improve your overall memory use
 

00:32:50.090 --> 00:32:53.740
want to improve your overall memory use
do two things 1 profile your Java heap

00:32:53.740 --> 00:32:53.750
do two things 1 profile your Java heap
 

00:32:53.750 --> 00:32:55.810
do two things 1 profile your Java heap
using Android studio as memory profiler

00:32:55.810 --> 00:32:55.820
using Android studio as memory profiler
 

00:32:55.820 --> 00:32:58.900
using Android studio as memory profiler
like I showed before and to reduce your

00:32:58.900 --> 00:32:58.910
like I showed before and to reduce your
 

00:32:58.910 --> 00:33:02.590
like I showed before and to reduce your
apk size and let me tell you why I think

00:33:02.590 --> 00:33:02.600
apk size and let me tell you why I think
 

00:33:02.600 --> 00:33:05.920
apk size and let me tell you why I think
this is a reasonable approach for you to

00:33:05.920 --> 00:33:05.930
this is a reasonable approach for you to
 

00:33:05.930 --> 00:33:07.540
this is a reasonable approach for you to
take to reduce your overall memory

00:33:07.540 --> 00:33:07.550
take to reduce your overall memory
 

00:33:07.550 --> 00:33:12.220
take to reduce your overall memory
impact first is that allocations that

00:33:12.220 --> 00:33:12.230
impact first is that allocations that
 

00:33:12.230 --> 00:33:14.500
impact first is that allocations that
are outside of the Java heap many of

00:33:14.500 --> 00:33:14.510
are outside of the Java heap many of
 

00:33:14.510 --> 00:33:17.320
are outside of the Java heap many of
those are tied to Java allocations so

00:33:17.320 --> 00:33:17.330
those are tied to Java allocations so
 

00:33:17.330 --> 00:33:19.450
those are tied to Java allocations so
your application is coined into the

00:33:19.450 --> 00:33:19.460
your application is coined into the
 

00:33:19.460 --> 00:33:21.520
your application is coined into the
Android frameworks which is coin into

00:33:21.520 --> 00:33:21.530
Android frameworks which is coin into
 

00:33:21.530 --> 00:33:23.560
Android frameworks which is coin into
native libraries under the cover which

00:33:23.560 --> 00:33:23.570
native libraries under the cover which
 

00:33:23.570 --> 00:33:26.110
native libraries under the cover which
is doing native allocations or even

00:33:26.110 --> 00:33:26.120
is doing native allocations or even
 

00:33:26.120 --> 00:33:28.720
is doing native allocations or even
graphics allocations whose lifetime is

00:33:28.720 --> 00:33:28.730
graphics allocations whose lifetime is
 

00:33:28.730 --> 00:33:33.070
graphics allocations whose lifetime is
tied to Java objects for instance just

00:33:33.070 --> 00:33:33.080
tied to Java objects for instance just
 

00:33:33.080 --> 00:33:35.070
tied to Java objects for instance just
to give you a sampling

00:33:35.070 --> 00:33:35.080
to give you a sampling
 

00:33:35.080 --> 00:33:37.650
to give you a sampling
in Java on your Java heap if you see

00:33:37.650 --> 00:33:37.660
in Java on your Java heap if you see
 

00:33:37.660 --> 00:33:39.510
in Java on your Java heap if you see
these kinds of objects so a sequel like

00:33:39.510 --> 00:33:39.520
these kinds of objects so a sequel like
 

00:33:39.520 --> 00:33:41.910
these kinds of objects so a sequel like
database web views patterns those are

00:33:41.910 --> 00:33:41.920
database web views patterns those are
 

00:33:41.920 --> 00:33:43.620
database web views patterns those are
all have native out allocations

00:33:43.620 --> 00:33:43.630
all have native out allocations
 

00:33:43.630 --> 00:33:45.810
all have native out allocations
associated with them if you see a Dex

00:33:45.810 --> 00:33:45.820
associated with them if you see a Dex
 

00:33:45.820 --> 00:33:48.240
associated with them if you see a Dex
file object that's gonna have Dex and

00:33:48.240 --> 00:33:48.250
file object that's gonna have Dex and
 

00:33:48.250 --> 00:33:51.060
file object that's gonna have Dex and
nap D Dex coat and map associated with

00:33:51.060 --> 00:33:51.070
nap D Dex coat and map associated with
 

00:33:51.070 --> 00:33:53.400
nap D Dex coat and map associated with
it if you have thread instances on your

00:33:53.400 --> 00:33:53.410
it if you have thread instances on your
 

00:33:53.410 --> 00:33:55.590
it if you have thread instances on your
Java heap that's gonna be associated

00:33:55.590 --> 00:33:55.600
Java heap that's gonna be associated
 

00:33:55.600 --> 00:33:57.810
Java heap that's gonna be associated
with stack memory and if you're using

00:33:57.810 --> 00:33:57.820
with stack memory and if you're using
 

00:33:57.820 --> 00:34:00.030
with stack memory and if you're using
bitmaps or sometimes surface views or

00:34:00.030 --> 00:34:00.040
bitmaps or sometimes surface views or
 

00:34:00.040 --> 00:34:02.220
bitmaps or sometimes surface views or
text reviews that can lead to graphics

00:34:02.220 --> 00:34:02.230
text reviews that can lead to graphics
 

00:34:02.230 --> 00:34:06.440
text reviews that can lead to graphics
memory use and there are many others so

00:34:06.440 --> 00:34:06.450
memory use and there are many others so
 

00:34:06.450 --> 00:34:10.080
memory use and there are many others so
if you want if you're focusing on your

00:34:10.080 --> 00:34:10.090
if you want if you're focusing on your
 

00:34:10.090 --> 00:34:11.700
if you want if you're focusing on your
Java heap you're worried is not gonna

00:34:11.700 --> 00:34:11.710
Java heap you're worried is not gonna
 

00:34:11.710 --> 00:34:14.330
Java heap you're worried is not gonna
help anywhere else that's not true

00:34:14.330 --> 00:34:14.340
help anywhere else that's not true
 

00:34:14.340 --> 00:34:16.530
help anywhere else that's not true
optimizations on your Java heap are

00:34:16.530 --> 00:34:16.540
optimizations on your Java heap are
 

00:34:16.540 --> 00:34:18.659
optimizations on your Java heap are
going to help with other memory

00:34:18.659 --> 00:34:18.669
going to help with other memory
 

00:34:18.669 --> 00:34:20.010
going to help with other memory
categories as well

00:34:20.010 --> 00:34:20.020
categories as well
 

00:34:20.020 --> 00:34:24.270
categories as well
I am trying as part of my job to surface

00:34:24.270 --> 00:34:24.280
I am trying as part of my job to surface
 

00:34:24.280 --> 00:34:26.490
I am trying as part of my job to surface
better this information about these kind

00:34:26.490 --> 00:34:26.500
better this information about these kind
 

00:34:26.500 --> 00:34:29.340
better this information about these kind
of non Java heap allocations and you

00:34:29.340 --> 00:34:29.350
of non Java heap allocations and you
 

00:34:29.350 --> 00:34:31.200
of non Java heap allocations and you
start to see that if you look at Android

00:34:31.200 --> 00:34:31.210
start to see that if you look at Android
 

00:34:31.210 --> 00:34:36.030
start to see that if you look at Android
Studios memory profilers it'll report a

00:34:36.030 --> 00:34:36.040
Studios memory profilers it'll report a
 

00:34:36.040 --> 00:34:38.460
Studios memory profilers it'll report a
number called native and I just wanted

00:34:38.460 --> 00:34:38.470
number called native and I just wanted
 

00:34:38.470 --> 00:34:40.050
number called native and I just wanted
to let you know this is this is kind of

00:34:40.050 --> 00:34:40.060
to let you know this is this is kind of
 

00:34:40.060 --> 00:34:42.630
to let you know this is this is kind of
an approximation or a suggestion of some

00:34:42.630 --> 00:34:42.640
an approximation or a suggestion of some
 

00:34:42.640 --> 00:34:45.540
an approximation or a suggestion of some
of the non Java memory that might be

00:34:45.540 --> 00:34:45.550
of the non Java memory that might be
 

00:34:45.550 --> 00:34:47.909
of the non Java memory that might be
associated with a Java object take it

00:34:47.909 --> 00:34:47.919
associated with a Java object take it
 

00:34:47.919 --> 00:34:49.740
associated with a Java object take it
with a little bit of a grain of salt but

00:34:49.740 --> 00:34:49.750
with a little bit of a grain of salt but
 

00:34:49.750 --> 00:34:51.630
with a little bit of a grain of salt but
it works really well for surfacing the

00:34:51.630 --> 00:34:51.640
it works really well for surfacing the
 

00:34:51.640 --> 00:34:57.960
it works really well for surfacing the
memory impact so say bitmaps okay my

00:34:57.960 --> 00:34:57.970
memory impact so say bitmaps okay my
 

00:34:57.970 --> 00:35:00.660
memory impact so say bitmaps okay my
second suggestion was reduce your apk

00:35:00.660 --> 00:35:00.670
second suggestion was reduce your apk
 

00:35:00.670 --> 00:35:02.640
second suggestion was reduce your apk
size and why do you do this because a

00:35:02.640 --> 00:35:02.650
size and why do you do this because a
 

00:35:02.650 --> 00:35:04.440
size and why do you do this because a
lot of things that take up space in your

00:35:04.440 --> 00:35:04.450
lot of things that take up space in your
 

00:35:04.450 --> 00:35:07.440
lot of things that take up space in your
apk take up space in memory at runtime

00:35:07.440 --> 00:35:07.450
apk take up space in memory at runtime
 

00:35:07.450 --> 00:35:10.290
apk take up space in memory at runtime
as well for instance your class's Dex

00:35:10.290 --> 00:35:10.300
as well for instance your class's Dex
 

00:35:10.300 --> 00:35:13.530
as well for instance your class's Dex
file is going to take up space on the

00:35:13.530 --> 00:35:13.540
file is going to take up space on the
 

00:35:13.540 --> 00:35:15.870
file is going to take up space on the
Java heap in terms of class objects it's

00:35:15.870 --> 00:35:15.880
Java heap in terms of class objects it's
 

00:35:15.880 --> 00:35:17.820
Java heap in terms of class objects it's
going to take a code memory for the

00:35:17.820 --> 00:35:17.830
going to take a code memory for the
 

00:35:17.830 --> 00:35:20.130
going to take a code memory for the
memory map Dex file it's also going to

00:35:20.130 --> 00:35:20.140
memory map Dex file it's also going to
 

00:35:20.140 --> 00:35:22.080
memory map Dex file it's also going to
take up what shows up in private other

00:35:22.080 --> 00:35:22.090
take up what shows up in private other
 

00:35:22.090 --> 00:35:26.360
take up what shows up in private other
in the app summary view runtime metadata

00:35:26.360 --> 00:35:26.370
in the app summary view runtime metadata
 

00:35:26.370 --> 00:35:28.470
in the app summary view runtime metadata
representations for your fields methods

00:35:28.470 --> 00:35:28.480
representations for your fields methods
 

00:35:28.480 --> 00:35:31.650
representations for your fields methods
and strings and so on if you have

00:35:31.650 --> 00:35:31.660
and strings and so on if you have
 

00:35:31.660 --> 00:35:34.110
and strings and so on if you have
bitmaps in your apk when those are

00:35:34.110 --> 00:35:34.120
bitmaps in your apk when those are
 

00:35:34.120 --> 00:35:36.150
bitmaps in your apk when those are
loaded at runtime the pixel data is

00:35:36.150 --> 00:35:36.160
loaded at runtime the pixel data is
 

00:35:36.160 --> 00:35:37.890
loaded at runtime the pixel data is
going to take up space depending on the

00:35:37.890 --> 00:35:37.900
going to take up space depending on the
 

00:35:37.900 --> 00:35:39.750
going to take up space depending on the
platform version or how you've loaded

00:35:39.750 --> 00:35:39.760
platform version or how you've loaded
 

00:35:39.760 --> 00:35:41.820
platform version or how you've loaded
them either in the Java heat the native

00:35:41.820 --> 00:35:41.830
them either in the Java heat the native
 

00:35:41.830 --> 00:35:46.380
them either in the Java heat the native
heap or as graphics resources in your

00:35:46.380 --> 00:35:46.390
heap or as graphics resources in your
 

00:35:46.390 --> 00:35:48.539
heap or as graphics resources in your
apk take up space on the Java heat

00:35:48.539 --> 00:35:48.549
apk take up space on the Java heat
 

00:35:48.549 --> 00:35:50.519
apk take up space on the Java heat
say you have an asset manager object

00:35:50.519 --> 00:35:50.529
say you have an asset manager object
 

00:35:50.529 --> 00:35:52.769
say you have an asset manager object
also on the native heap you have a

00:35:52.769 --> 00:35:52.779
also on the native heap you have a
 

00:35:52.779 --> 00:35:55.829
also on the native heap you have a
parsed zip file structure that shows up

00:35:55.829 --> 00:35:55.839
parsed zip file structure that shows up
 

00:35:55.839 --> 00:35:57.870
parsed zip file structure that shows up
there and you're gonna have code memory

00:35:57.870 --> 00:35:57.880
there and you're gonna have code memory
 

00:35:57.880 --> 00:36:02.009
there and you're gonna have code memory
for your a PKM map and dot iso files if

00:36:02.009 --> 00:36:02.019
for your a PKM map and dot iso files if
 

00:36:02.019 --> 00:36:05.309
for your a PKM map and dot iso files if
you have if you're shipping libraries

00:36:05.309 --> 00:36:05.319
you have if you're shipping libraries
 

00:36:05.319 --> 00:36:07.019
you have if you're shipping libraries
J&amp;I native libraries with your

00:36:07.019 --> 00:36:07.029
J&amp;I native libraries with your
 

00:36:07.029 --> 00:36:08.880
J&amp;I native libraries with your
application when you're accessing those

00:36:08.880 --> 00:36:08.890
application when you're accessing those
 

00:36:08.890 --> 00:36:10.890
application when you're accessing those
libraries at runtime it's going to take

00:36:10.890 --> 00:36:10.900
libraries at runtime it's going to take
 

00:36:10.900 --> 00:36:13.319
libraries at runtime it's going to take
up space so all of these things if you

00:36:13.319 --> 00:36:13.329
up space so all of these things if you
 

00:36:13.329 --> 00:36:15.599
up space so all of these things if you
can shrink them you reduce your apk size

00:36:15.599 --> 00:36:15.609
can shrink them you reduce your apk size
 

00:36:15.609 --> 00:36:18.120
can shrink them you reduce your apk size
you reduce your memory size and I will

00:36:18.120 --> 00:36:18.130
you reduce your memory size and I will
 

00:36:18.130 --> 00:36:20.189
you reduce your memory size and I will
tell you that measuring apk size

00:36:20.189 --> 00:36:20.199
tell you that measuring apk size
 

00:36:20.199 --> 00:36:23.099
tell you that measuring apk size
reliably is much easier than memory

00:36:23.099 --> 00:36:23.109
reliably is much easier than memory
 

00:36:23.109 --> 00:36:25.650
reliably is much easier than memory
because for an apk you actually do have

00:36:25.650 --> 00:36:25.660
because for an apk you actually do have
 

00:36:25.660 --> 00:36:28.499
because for an apk you actually do have
one number for the size if you measure

00:36:28.499 --> 00:36:28.509
one number for the size if you measure
 

00:36:28.509 --> 00:36:31.380
one number for the size if you measure
the apk size for a single apk repeatedly

00:36:31.380 --> 00:36:31.390
the apk size for a single apk repeatedly
 

00:36:31.390 --> 00:36:34.199
the apk size for a single apk repeatedly
you will get the same result very much

00:36:34.199 --> 00:36:34.209
you will get the same result very much
 

00:36:34.209 --> 00:36:39.630
you will get the same result very much
unlike memory there was a top at Google

00:36:39.630 --> 00:36:39.640
unlike memory there was a top at Google
 

00:36:39.640 --> 00:36:41.969
unlike memory there was a top at Google
i/o last year called best practices to

00:36:41.969 --> 00:36:41.979
i/o last year called best practices to
 

00:36:41.979 --> 00:36:44.099
i/o last year called best practices to
slim down your app size I recommend you

00:36:44.099 --> 00:36:44.109
slim down your app size I recommend you
 

00:36:44.109 --> 00:36:45.239
slim down your app size I recommend you
check that out that will give you more

00:36:45.239 --> 00:36:45.249
check that out that will give you more
 

00:36:45.249 --> 00:36:48.929
check that out that will give you more
advice more concrete action items you

00:36:48.929 --> 00:36:48.939
advice more concrete action items you
 

00:36:48.939 --> 00:36:53.789
advice more concrete action items you
can take to to shrink these things ok

00:36:53.789 --> 00:36:53.799
can take to to shrink these things ok
 

00:36:53.799 --> 00:36:56.370
can take to to shrink these things ok
let me do a quick recap why we care

00:36:56.370 --> 00:36:56.380
let me do a quick recap why we care
 

00:36:56.380 --> 00:36:58.769
let me do a quick recap why we care
about memory what I suggest you do to

00:36:58.769 --> 00:36:58.779
about memory what I suggest you do to
 

00:36:58.779 --> 00:37:01.679
about memory what I suggest you do to
improve your applications memories so

00:37:01.679 --> 00:37:01.689
improve your applications memories so
 

00:37:01.689 --> 00:37:04.410
improve your applications memories so
first I talked about how as we use more

00:37:04.410 --> 00:37:04.420
first I talked about how as we use more
 

00:37:04.420 --> 00:37:06.390
first I talked about how as we use more
memory on device the low memory killer

00:37:06.390 --> 00:37:06.400
memory on device the low memory killer
 

00:37:06.400 --> 00:37:08.309
memory on device the low memory killer
is going to eventually kick in is going

00:37:08.309 --> 00:37:08.319
is going to eventually kick in is going
 

00:37:08.319 --> 00:37:10.439
is going to eventually kick in is going
to kill processes if the user cares

00:37:10.439 --> 00:37:10.449
to kill processes if the user cares
 

00:37:10.449 --> 00:37:15.329
to kill processes if the user cares
about these processes that's bad if the

00:37:15.329 --> 00:37:15.339
about these processes that's bad if the
 

00:37:15.339 --> 00:37:17.969
about these processes that's bad if the
device is getting low memory killers

00:37:17.969 --> 00:37:17.979
device is getting low memory killers
 

00:37:17.979 --> 00:37:20.579
device is getting low memory killers
running too much then homes won't want

00:37:20.579 --> 00:37:20.589
running too much then homes won't want
 

00:37:20.589 --> 00:37:22.829
running too much then homes won't want
to produce the low-end sorry entry level

00:37:22.829 --> 00:37:22.839
to produce the low-end sorry entry level
 

00:37:22.839 --> 00:37:25.109
to produce the low-end sorry entry level
device then we lose those devices we

00:37:25.109 --> 00:37:25.119
device then we lose those devices we
 

00:37:25.119 --> 00:37:29.999
device then we lose those devices we
lose those users to evaluate your

00:37:29.999 --> 00:37:30.009
lose those users to evaluate your
 

00:37:30.009 --> 00:37:34.309
lose those users to evaluate your
applications memory impact use PSS

00:37:34.309 --> 00:37:34.319
applications memory impact use PSS
 

00:37:34.319 --> 00:37:36.630
applications memory impact use PSS
anything you can do to improve your

00:37:36.630 --> 00:37:36.640
anything you can do to improve your
 

00:37:36.640 --> 00:37:40.079
anything you can do to improve your
memory efficiency is good when you're

00:37:40.079 --> 00:37:40.089
memory efficiency is good when you're
 

00:37:40.089 --> 00:37:41.789
memory efficiency is good when you're
testing for memory regressions or

00:37:41.789 --> 00:37:41.799
testing for memory regressions or
 

00:37:41.799 --> 00:37:44.130
testing for memory regressions or
optimizations make sure you're targeting

00:37:44.130 --> 00:37:44.140
optimizations make sure you're targeting
 

00:37:44.140 --> 00:37:46.229
optimizations make sure you're targeting
the application use case you care about

00:37:46.229 --> 00:37:46.239
the application use case you care about
 

00:37:46.239 --> 00:37:47.759
the application use case you care about
and controlling for the platform

00:37:47.759 --> 00:37:47.769
and controlling for the platform
 

00:37:47.769 --> 00:37:51.089
and controlling for the platform
configuration test on the device that

00:37:51.089 --> 00:37:51.099
configuration test on the device that
 

00:37:51.099 --> 00:37:53.370
configuration test on the device that
has plenty of free RAM to help control

00:37:53.370 --> 00:37:53.380
has plenty of free RAM to help control
 

00:37:53.380 --> 00:37:56.309
has plenty of free RAM to help control
for device memory pressure and to reduce

00:37:56.309 --> 00:37:56.319
for device memory pressure and to reduce
 

00:37:56.319 --> 00:38:00.209
for device memory pressure and to reduce
your applications memory use do try out

00:38:00.209 --> 00:38:00.219
your applications memory use do try out
 

00:38:00.219 --> 00:38:01.710
your applications memory use do try out
Android Studios memory

00:38:01.710 --> 00:38:01.720
Android Studios memory
 

00:38:01.720 --> 00:38:05.310
Android Studios memory
filer focus on the app beep go to the

00:38:05.310 --> 00:38:05.320
filer focus on the app beep go to the
 

00:38:05.320 --> 00:38:07.410
filer focus on the app beep go to the
session that Esteban's giving tomorrow

00:38:07.410 --> 00:38:07.420
session that Esteban's giving tomorrow
 

00:38:07.420 --> 00:38:10.910
session that Esteban's giving tomorrow
12:30 to learn more about how to do that

00:38:10.910 --> 00:38:10.920
12:30 to learn more about how to do that
 

00:38:10.920 --> 00:38:13.440
12:30 to learn more about how to do that
do what you can to reduce your apk size

00:38:13.440 --> 00:38:13.450
do what you can to reduce your apk size
 

00:38:13.450 --> 00:38:16.260
do what you can to reduce your apk size
and check out the talk from last year on

00:38:16.260 --> 00:38:16.270
and check out the talk from last year on
 

00:38:16.270 --> 00:38:20.460
and check out the talk from last year on
how you can do that so thank you all for

00:38:20.460 --> 00:38:20.470
how you can do that so thank you all for
 

00:38:20.470 --> 00:38:21.180
how you can do that so thank you all for
coming

00:38:21.180 --> 00:38:21.190
coming
 

00:38:21.190 --> 00:38:24.630
coming
I would love to chat with you more and

00:38:24.630 --> 00:38:24.640
I would love to chat with you more and
 

00:38:24.640 --> 00:38:26.910
I would love to chat with you more and
hear more about the memory challenges

00:38:26.910 --> 00:38:26.920
hear more about the memory challenges
 

00:38:26.920 --> 00:38:29.220
hear more about the memory challenges
you're facing so you'll find me I'll

00:38:29.220 --> 00:38:29.230
you're facing so you'll find me I'll
 

00:38:29.230 --> 00:38:31.109
you're facing so you'll find me I'll
hang out for a little while out outside

00:38:31.109 --> 00:38:31.119
hang out for a little while out outside
 

00:38:31.119 --> 00:38:34.680
hang out for a little while out outside
after the stage and you can also find me

00:38:34.680 --> 00:38:34.690
after the stage and you can also find me
 

00:38:34.690 --> 00:38:36.690
after the stage and you can also find me
at the Android runtime office hours

00:38:36.690 --> 00:38:36.700
at the Android runtime office hours
 

00:38:36.700 --> 00:38:38.700
at the Android runtime office hours
which are 5:30 so that's just a couple

00:38:38.700 --> 00:38:38.710
which are 5:30 so that's just a couple
 

00:38:38.710 --> 00:38:42.210
which are 5:30 so that's just a couple
hours in 10th F after this talk thank

00:38:42.210 --> 00:38:42.220
hours in 10th F after this talk thank
 

00:38:42.220 --> 00:38:42.730
hours in 10th F after this talk thank
you very much

00:38:42.730 --> 00:38:42.740
you very much
 

00:38:42.740 --> 00:39:00.700
you very much
[Music]

00:39:00.700 --> 00:39:00.710
 

00:39:00.710 --> 00:39:02.770
you

