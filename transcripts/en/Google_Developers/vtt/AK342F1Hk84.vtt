WEBVTT
Kind: captions
Language: en

00:00:00.710 --> 00:00:02.320
As a successful
mobile game developer,

00:00:02.320 --> 00:00:04.690
one of the most important
things you can continue to do

00:00:04.690 --> 00:00:07.090
is update your game with
new content, bug fixes,

00:00:07.090 --> 00:00:09.075
and daily offers to keep
your players engaged

00:00:09.075 --> 00:00:10.220
and entertained.

00:00:10.220 --> 00:00:12.660
But sadly, updating your
game packages incorrectly

00:00:12.660 --> 00:00:15.530
can lead to a horrible burden
of updates for your users.

00:00:15.530 --> 00:00:17.740
My name is Colt McAnlis,
and there's an easier way

00:00:17.740 --> 00:00:20.460
to push out data updates and
keep your applications in sync.

00:00:20.460 --> 00:00:22.350
It's called Google Tag Manager.

00:00:22.350 --> 00:00:25.079
See, everything in your
game is driven by data.

00:00:25.079 --> 00:00:27.620
Everything that makes up your
game-- like levels, animations,

00:00:27.620 --> 00:00:32.549
textures, localizations, sounds,
even layouts-- it's all data.

00:00:32.549 --> 00:00:34.724
And updating that data
can become a problem.

00:00:34.724 --> 00:00:36.390
When you push a new
version of your app,

00:00:36.390 --> 00:00:39.394
users are now caught in an
application update cycle.

00:00:39.394 --> 00:00:41.810
That is, they can be notified
that there's a newer version

00:00:41.810 --> 00:00:43.470
but can decide to ignore it.

00:00:43.470 --> 00:00:46.320
As such, it's a common situation
to have multiple versions

00:00:46.320 --> 00:00:48.340
of your game out in
the wild, each one

00:00:48.340 --> 00:00:50.130
at different states of updates.

00:00:50.130 --> 00:00:52.230
In order to keep all your
users on the same page

00:00:52.230 --> 00:00:54.229
and keep them from having
to constantly download

00:00:54.229 --> 00:00:56.230
new versions of the game,
you need a better way

00:00:56.230 --> 00:00:58.020
to distribute updates
to your users.

00:00:58.020 --> 00:01:00.770
And this is where Google
Tag Manager comes in.

00:01:00.770 --> 00:01:02.360
Tag Manager is a
cloud-based service

00:01:02.360 --> 00:01:04.739
to deliver various
types of text-based data

00:01:04.739 --> 00:01:06.140
to devices around the world.

00:01:06.140 --> 00:01:09.487
It prides itself on removing
the curse of the upgrade cycle

00:01:09.487 --> 00:01:11.070
and keeping all of
your users' devices

00:01:11.070 --> 00:01:13.040
in sync with the latest data.

00:01:13.040 --> 00:01:15.710
It does this by relying
on a key principle.

00:01:15.710 --> 00:01:17.370
Different data in
your game should

00:01:17.370 --> 00:01:19.700
be updated at
different frequencies.

00:01:19.700 --> 00:01:22.190
See, there's a huge separation
between fast-changing and

00:01:22.190 --> 00:01:24.060
slow-changing data in your app.

00:01:24.060 --> 00:01:25.760
Changing strings
or translations may

00:01:25.760 --> 00:01:27.850
happen about once a
week, while small tweaks

00:01:27.850 --> 00:01:30.860
to play balance, A/B testing,
or offers may happen daily,

00:01:30.860 --> 00:01:33.630
while art or binaries may
only change about once every

00:01:33.630 --> 00:01:34.920
two months or so.

00:01:34.920 --> 00:01:37.110
So how does Tag
Manager actually help?

00:01:37.110 --> 00:01:39.360
In a typical world, when you
want to change your data,

00:01:39.360 --> 00:01:41.560
you do so locally,
sign your package,

00:01:41.560 --> 00:01:43.340
re-upload it to the
Google Play Store.

00:01:43.340 --> 00:01:45.450
And after some processing,
your existing users

00:01:45.450 --> 00:01:47.460
will be notified that
an update is available

00:01:47.460 --> 00:01:50.550
and they can download the
whole application update.

00:01:50.550 --> 00:01:53.547
But with Tag Manager, you can
bypass most of this chaos.

00:01:53.547 --> 00:01:55.130
Since your data has
been separated out

00:01:55.130 --> 00:01:56.920
from your code
and binary assets,

00:01:56.920 --> 00:01:59.940
you push only the
updated data to the cloud

00:01:59.940 --> 00:02:01.920
using Google Tag
Manager console.

00:02:01.920 --> 00:02:03.630
The next time the
user starts your app,

00:02:03.630 --> 00:02:05.350
it'll check if there's
new data available

00:02:05.350 --> 00:02:08.443
and sync only the new
information to the device.

00:02:08.443 --> 00:02:10.984
And rather than just sending
out the same updated information

00:02:10.984 --> 00:02:12.920
to everyone, Tag
Manager allows you

00:02:12.920 --> 00:02:14.910
to define a specific
set of rules

00:02:14.910 --> 00:02:16.800
to help segment your
user base and send them

00:02:16.800 --> 00:02:17.860
different content.

00:02:17.860 --> 00:02:21.240
See, users' devices will
submit some sort of device info

00:02:21.240 --> 00:02:23.330
to Tag Manager when
they check for updates.

00:02:23.330 --> 00:02:24.840
This is then tested
against the set

00:02:24.840 --> 00:02:27.640
of rules dictating what types
of updates they should receive,

00:02:27.640 --> 00:02:31.190
which then returns the properly
updated data to the right user.

00:02:31.190 --> 00:02:34.120
These rules for data allow you
to target specific segments

00:02:34.120 --> 00:02:36.060
of your user base and
give them the data that

00:02:36.060 --> 00:02:38.135
doesn't influence
everybody else.

00:02:38.135 --> 00:02:40.260
The best part is that all
of this logic for syncing

00:02:40.260 --> 00:02:41.790
and keeping clients
up to date is

00:02:41.790 --> 00:02:43.450
handled under the hood for you.

00:02:43.450 --> 00:02:45.690
Working with Tag Manager
is as simple as interfacing

00:02:45.690 --> 00:02:48.649
with a few sets of APIs
to fetch your data.

00:02:48.649 --> 00:02:49.440
And check this out.

00:02:49.440 --> 00:02:52.240
You can further extend the
rules model in Tag Manager

00:02:52.240 --> 00:02:54.900
to create automated A/B
testing for your app.

00:02:54.900 --> 00:02:57.440
Simply create an experiment
in the Tag Manager console

00:02:57.440 --> 00:02:59.300
which comprises of two things.

00:02:59.300 --> 00:03:01.690
Firstly, you need a rule
set, which basically

00:03:01.690 --> 00:03:03.810
states what variables
to change and what

00:03:03.810 --> 00:03:05.291
sets of users to test it on.

00:03:05.291 --> 00:03:07.790
For example, you might want to
update the text on your offer

00:03:07.790 --> 00:03:09.360
screens for users
who tend to buy

00:03:09.360 --> 00:03:11.380
in-game power-ups
differently than those

00:03:11.380 --> 00:03:12.590
who buy vanity items.

00:03:12.590 --> 00:03:15.560
You'll also need to specify
a desired action, which

00:03:15.560 --> 00:03:17.850
is the result of some
user action on the device,

00:03:17.850 --> 00:03:20.080
like clicking a button,
accepting a quest,

00:03:20.080 --> 00:03:22.570
buying an item,
or killing an NPC.

00:03:22.570 --> 00:03:24.460
Once the experiment
is set up, Tag Manager

00:03:24.460 --> 00:03:27.710
will do all the heavy lifting
to roll out variable updates

00:03:27.710 --> 00:03:29.930
to subsets of your
users on your behalf.

00:03:29.930 --> 00:03:31.880
You don't even need
to think about it.

00:03:31.880 --> 00:03:34.656
And as users submit
actions back to Tag Manager

00:03:34.656 --> 00:03:37.030
for your experiment, it's all
collected and reported back

00:03:37.030 --> 00:03:40.410
to the console using the
power of Google Analytics.

00:03:40.410 --> 00:03:43.100
So with Tag Manager, you get
the best of your efforts-- a way

00:03:43.100 --> 00:03:45.160
to distribute a high
frequency changing data

00:03:45.160 --> 00:03:47.544
without users having to download
the whole package again.

00:03:47.544 --> 00:03:48.960
You also get a set
of rules, which

00:03:48.960 --> 00:03:52.030
you can use to send specific
updates to specific segments

00:03:52.030 --> 00:03:54.960
of your user base, and you
get powerful experiments,

00:03:54.960 --> 00:03:57.600
which you can create
dynamic scalable A/B testing

00:03:57.600 --> 00:03:59.920
frameworks to improve your
game with dynamic feedback

00:03:59.920 --> 00:04:02.100
over time, which is
a lot of usefulness

00:04:02.100 --> 00:04:03.865
in a little bit of code.

00:04:03.865 --> 00:04:05.490
To get started with
Google Tag Manager,

00:04:05.490 --> 00:04:07.350
head on over to the
Tag Manager home page

00:04:07.350 --> 00:04:08.502
and sign up for an account.

00:04:08.502 --> 00:04:10.210
This will give you
access to the console,

00:04:10.210 --> 00:04:12.200
doc sets, as well
as the library files

00:04:12.200 --> 00:04:14.600
to include in your
client-side packages.

00:04:14.600 --> 00:04:17.089
Building a scalable game
for millions of users

00:04:17.089 --> 00:04:19.103
is a monumental
task to undertake,

00:04:19.103 --> 00:04:21.269
but with Google Tag Manager,
you can ignore all that

00:04:21.269 --> 00:04:24.610
and focus on the real
problems-- zombies.

00:04:24.610 --> 00:04:26.460
Thanks for watching.

