WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
One dimension in motion is not enough for us.

00:00:03.000 --> 00:00:06.000
We need 2 dimensions or even 3 dimensions.

00:00:06.000 --> 00:00:08.000
We need vectors.

00:00:08.000 --> 00:00:11.000
If you know about vectors directly, skip to the quiz.

00:00:11.000 --> 00:00:13.000
If you don't, stay with me.

00:00:13.000 --> 00:00:16.000
Vectors can be represented by arrows.

00:00:16.000 --> 00:00:20.000
Typically, we denote vectors by lowercase Latin characters

00:00:20.000 --> 00:00:23.000
with an arrow on top of them,

00:00:23.000 --> 00:00:26.000
and we can also express them in numbers.

00:00:26.000 --> 00:00:30.000
This arrow vector is 4 units to the right

00:00:30.000 --> 00:00:32.000
and 3 units up,

00:00:32.000 --> 00:00:36.000
which is why we can write 4, 3 in this way.

00:00:36.000 --> 00:00:41.000
These are called components of the vector -- x-component, y-component

00:00:41.000 --> 00:00:46.000
if the x-axis points right, and the y-axis points up,

00:00:46.000 --> 00:00:48.000
Let's look at a second vector.

00:00:48.000 --> 00:00:51.000
If you call this vector B, that would be 2, 1

00:00:51.000 --> 00:00:54.000
x-component 1, y-component 2.

00:00:54.000 --> 00:00:57.000
Let's have a third vector that's called C,

00:00:57.000 --> 00:01:01.000
and C should be 1, -3.

00:01:01.000 --> 00:01:05.000
C goes right by 1 unit and goes down

00:01:05.000 --> 00:01:07.000
by 3 units.

00:01:07.000 --> 00:01:10.000
And now we can do some basic arithmetics.

00:01:10.000 --> 00:01:12.000
We can add vectors, for instance.

00:01:12.000 --> 00:01:15.000
Let's add B and C.

00:01:15.000 --> 00:01:20.000
If we want to add B and C, we put them together.

00:01:20.000 --> 00:01:25.000
The tail of C goes to the tip of B or the other way around,

00:01:25.000 --> 00:01:29.000
and the resulting vector, which is B + C

00:01:29.000 --> 00:01:33.000
goes from the tail of B to the tip of C.

00:01:33.000 --> 00:01:36.000
So this is the sum of the vectors --

00:01:36.000 --> 00:01:39.000
B + C -- and if you look closely,

00:01:39.000 --> 00:01:44.000
you'll see this is 1, 2, 3 units to the right --

00:01:44.000 --> 00:01:48.000
and this one is canceled with that one --

00:01:48.000 --> 00:01:50.000
and 2 units down.

00:01:50.000 --> 00:01:52.000
So what we actually could've computed is

00:01:52.000 --> 00:01:55.000
the x-component of B plus the x-component of C -- 3 --

00:01:55.000 --> 00:02:02.000
and the y-component of B plus the y-component of C makes 2.

00:02:02.000 --> 00:02:04.000
That's the sum of vectors.

00:02:04.000 --> 00:02:06.000
You simply add the components,

00:02:06.000 --> 00:02:09.000
and geometrically, you chain these arrows.

00:02:09.000 --> 00:02:12.000
And there's a second operation we can do.

00:02:12.000 --> 00:02:15.000
We can multiply vectors with numbers.

00:02:15.000 --> 00:02:18.000
For instance, if I want to multiply this vector B

00:02:18.000 --> 00:02:24.000
by 3/2, I get an arrow in the same direction,

00:02:24.000 --> 00:02:28.000
but with 50% more length.

00:02:28.000 --> 00:02:31.000
I can do that in components, of course, as well.

00:02:31.000 --> 00:02:37.000
So what I get is 3/2 times 2 and 3/2 times 1,

00:02:37.000 --> 00:02:43.000
which is 3 and downstairs 1.5.

00:02:43.000 --> 00:02:45.000
Obviously, 3 units to the right,

00:02:45.000 --> 00:02:47.000
1.5 units up.

00:02:47.000 --> 00:02:51.000
If you do this multiplication with negative numbers,

00:02:51.000 --> 00:02:56.000
we are going to invert the direction of the arrow.

00:02:56.000 --> 00:03:01.000
So if I compute, say, -1/2B,

00:03:01.000 --> 00:03:07.000
I get an arrow of the opposite direction and 1/2 the length.

00:03:07.000 --> 00:03:12.000
and components -1/2 * 2 = -1,

00:03:12.000 --> 00:03:16.000
-1/2 * 1 = -1/2.

00:03:16.000 --> 00:03:19.000
So this goes 1 unit to the left

00:03:19.000 --> 00:03:22.000
and 1/2 unit down.

00:03:22.000 --> 00:03:26.000
If you remember the NumPy package in Python,

00:03:26.000 --> 00:03:29.000
this vector addition and vector multiplication

00:03:29.000 --> 00:03:32.000
and the NumPy package in Python

00:03:32.000 --> 00:03:36.000
this addition and this type of multiplication is already included.

00:03:36.000 --> 00:03:39.000
The third operation that we can apply to all vectors,

00:03:39.000 --> 00:03:42.000
is determining their lengths.

00:03:42.000 --> 00:03:45.000
I'm writing it like that with double bars.

00:03:45.000 --> 00:03:48.000
To determine the length, you can simply use

00:03:48.000 --> 00:03:51.000
the Pythagorean Theorem.

00:03:51.000 --> 00:03:57.000
One leg of this right triangle is 4 units long.

00:03:57.000 --> 00:03:59.000
The other leg is 3 units long,

00:03:59.000 --> 00:04:02.000
which means that the hypotenuse is

00:04:02.000 --> 00:04:08.000
4² + 3² square root units long,

00:04:08.000 --> 00:04:12.000
which means 16 + 9, 25 square root, 5 units.

