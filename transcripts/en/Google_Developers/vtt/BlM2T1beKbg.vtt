WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.486
[MUSIC PLAYING]

00:00:03.977 --> 00:00:05.810
ALEX FAABORG: Well,
before we do a deep dive

00:00:05.810 --> 00:00:07.520
on the fundamental
principles of AR design,

00:00:07.520 --> 00:00:09.853
I want to give you a quick
recap of what's new in ARCore

00:00:09.853 --> 00:00:12.800
this year, specifically,
five things--

00:00:12.800 --> 00:00:15.000
Scene Viewer, improvements
to Cloud Anchors,

00:00:15.000 --> 00:00:18.000
improvements to Augmented
Images, Augmented Faces,

00:00:18.000 --> 00:00:20.955
and a new set of lighting APIs
that we call Environmental HDR.

00:00:20.955 --> 00:00:22.830
Let's take a look at
each of these in detail.

00:00:25.390 --> 00:00:27.610
Scene Viewer is a 3D
AR immersive viewer

00:00:27.610 --> 00:00:30.670
that lets you that runs
natively on Android

00:00:30.670 --> 00:00:33.760
and allows users to seamlessly
put any 3D content that they

00:00:33.760 --> 00:00:36.633
might encounter on a
website into their world.

00:00:36.633 --> 00:00:38.050
Here we see an
example of how NASA

00:00:38.050 --> 00:00:40.450
is able to quickly
let users place a Mars

00:00:40.450 --> 00:00:42.880
Rover in their living room
just by hosting the glTF

00:00:42.880 --> 00:00:44.573
file on their website.

00:00:44.573 --> 00:00:46.990
And developers and designers
don't have to worry about all

00:00:46.990 --> 00:00:49.840
of the subtle details of
AR object manipulation,

00:00:49.840 --> 00:00:54.160
because you get all of this
functionality for free.

00:00:54.160 --> 00:00:56.020
Next up, Cloud Anchors--

00:00:56.020 --> 00:00:58.480
Cloud Anchors enable developers
to create multiplayer

00:00:58.480 --> 00:01:00.685
and social AR experiences.

00:01:00.685 --> 00:01:02.560
Technology, at times,
can be a bit isolating.

00:01:02.560 --> 00:01:05.560
But that changes when you're
designing applications in AR

00:01:05.560 --> 00:01:07.150
thanks to Cloud Anchors.

00:01:07.150 --> 00:01:09.700
Users aren't just engaged
with the world around them,

00:01:09.700 --> 00:01:12.325
but they can be more engaged to
the people around them as well.

00:01:16.472 --> 00:01:18.680
This year, we're also adding
a number of improvements

00:01:18.680 --> 00:01:20.270
to augmented images in ARCore.

00:01:20.270 --> 00:01:22.520
And these can be used in a
wide range of different use

00:01:22.520 --> 00:01:26.390
cases, things like retail
and educational experiences.

00:01:26.390 --> 00:01:28.550
Here we see a user that's
learning about features

00:01:28.550 --> 00:01:30.280
in an expresso machine.

00:01:30.280 --> 00:01:32.640
And this is a
small-scale use of it.

00:01:32.640 --> 00:01:34.190
But it can also be
very large-scale,

00:01:34.190 --> 00:01:36.950
and it can scale all the
way up to large venues.

00:01:36.950 --> 00:01:39.290
At I/O this year, we've
actually placed 50 signposts

00:01:39.290 --> 00:01:41.930
throughout the campus at
various different locations.

00:01:41.930 --> 00:01:44.850
These help users
with wayfinding.

00:01:44.850 --> 00:01:47.100
So if you're not at I/O, and
you're watching on video,

00:01:47.100 --> 00:01:48.017
here's how this works.

00:01:48.017 --> 00:01:50.602
You can look at one
of these markers,

00:01:50.602 --> 00:01:51.560
these augmented images.

00:01:51.560 --> 00:01:53.300
And then we get an AR
layer that's superimposed

00:01:53.300 --> 00:01:54.290
on top of the conference.

00:01:54.290 --> 00:01:56.582
You can just find all the
different venues or sandboxes

00:01:56.582 --> 00:01:58.520
that you're trying to
navigate or wayfind to.

00:02:01.323 --> 00:02:02.740
Of course, the
front camera can be

00:02:02.740 --> 00:02:04.540
just as important, if
not more important,

00:02:04.540 --> 00:02:06.801
than the back camera on devices.

00:02:06.801 --> 00:02:08.259
So this year, ARCore
is also adding

00:02:08.259 --> 00:02:10.350
support for augmented faces.

00:02:10.350 --> 00:02:13.060
ARCore provides a
468-point 3D mesh

00:02:13.060 --> 00:02:16.475
the tracks head movements and
changing facial expressions.

00:02:16.475 --> 00:02:18.460
And we use machine
learning to do all of this

00:02:18.460 --> 00:02:20.920
without requiring a depth
sensor or any special hardware

00:02:20.920 --> 00:02:21.850
on the device.

00:02:21.850 --> 00:02:24.100
And this works with existing
phones out in the market.

00:02:28.990 --> 00:02:30.495
ARCore teams also
leverage machine

00:02:30.495 --> 00:02:32.370
learning to make really
dramatic improvements

00:02:32.370 --> 00:02:33.960
in our light
estimation API, which

00:02:33.960 --> 00:02:36.030
we call Environmental HDR.

00:02:36.030 --> 00:02:37.170
Here's a quick example.

00:02:37.170 --> 00:02:38.790
I'll start by
placing a rocket out

00:02:38.790 --> 00:02:41.220
in the scene starting
with no light source.

00:02:41.220 --> 00:02:44.020
But then I'll just add a quick
directional light source.

00:02:44.020 --> 00:02:46.690
And this is how AR
has previously worked.

00:02:46.690 --> 00:02:48.810
It's not particularly well-lit.

00:02:48.810 --> 00:02:51.570
But now we can actually add
ambient spherical harmonics,

00:02:51.570 --> 00:02:52.595
a cube map--

00:02:52.595 --> 00:02:55.050
I'll turn the cube map on--

00:02:55.050 --> 00:02:57.850
and then finally,
Environmental HDR.

00:02:57.850 --> 00:03:00.360
And working together,
these lighting APIs

00:03:00.360 --> 00:03:02.940
actually make the shadows and
lighting considerably more

00:03:02.940 --> 00:03:04.090
realistic.

00:03:04.090 --> 00:03:06.780
Here's the final stage
here as we turn in--

00:03:06.780 --> 00:03:09.092
turn on Environmental HDR.

00:03:09.092 --> 00:03:11.940
It takes it a bit of a moment
to understand the scene.

00:03:11.940 --> 00:03:14.270
You can see that
start to lock in.

00:03:14.270 --> 00:03:16.430
And then as you
move around, you get

00:03:16.430 --> 00:03:20.021
really realistic lighting
reflections and shadows

00:03:20.021 --> 00:03:22.880
on the objects.

00:03:22.880 --> 00:03:25.920
Here's another example
with Environmental HDR.

00:03:25.920 --> 00:03:28.060
This time, it's just
being turned on and off.

00:03:28.060 --> 00:03:31.480
The mannequin on the left is
in AR, and the one on the right

00:03:31.480 --> 00:03:32.905
is real--

00:03:32.905 --> 00:03:34.930
well, not actually
real, it's a mannequin.

00:03:34.930 --> 00:03:36.680
But you get the idea.

00:03:36.680 --> 00:03:38.740
And you can see
really dramatic change

00:03:38.740 --> 00:03:41.850
as Environmental HDR
is being turned on.

00:03:41.850 --> 00:03:43.600
And then finally,
here's one more example.

00:03:43.600 --> 00:03:46.090
In this case, the light
source is actually moving.

00:03:46.090 --> 00:03:48.617
And you can the system
actually adapt in real time

00:03:48.617 --> 00:03:50.950
and start to change the virtual
light source in response

00:03:50.950 --> 00:03:52.575
to the change in the
real light source.

00:03:55.710 --> 00:03:57.890
The team's really made
significant jumps this year

00:03:57.890 --> 00:04:00.290
in the fidelity, realism, and
immersion that AR apps can

00:04:00.290 --> 00:04:01.648
provide to users.

00:04:01.648 --> 00:04:03.440
But as great as these
new technologies are,

00:04:03.440 --> 00:04:05.398
it's equally important
that your AR app is also

00:04:05.398 --> 00:04:06.630
really well-designed.

00:04:06.630 --> 00:04:09.465
Khushboo, Germain, and Eugene or
from the ARCore UX design team.

00:04:09.465 --> 00:04:11.840
And they'll get you up to
speed on the fundamentals of AR

00:04:11.840 --> 00:04:12.560
interface design.

00:04:15.422 --> 00:04:18.290
KHUSHBOO HASIJA: Thank you.

00:04:18.290 --> 00:04:19.149
Thank you, Alex.

00:04:19.149 --> 00:04:20.089
Hi, everyone.

00:04:20.089 --> 00:04:23.140
I'm Khushboo, UX
researcher on ARCore.

00:04:23.140 --> 00:04:25.960
I'm here to share some
insights about AR design.

00:04:25.960 --> 00:04:29.230
And we can group AR
design fundamentals

00:04:29.230 --> 00:04:30.860
in four rough categories--

00:04:30.860 --> 00:04:34.450
environment, user, AR
content, and interface.

00:04:38.130 --> 00:04:40.600
Sorry.

00:04:40.600 --> 00:04:42.670
So first, let's talk
about environment.

00:04:42.670 --> 00:04:46.030
In AR, we define environment as
physical environment as well as

00:04:46.030 --> 00:04:47.990
augmented environment.

00:04:47.990 --> 00:04:51.100
Physical environment is a real
world inhabited by our users

00:04:51.100 --> 00:04:54.070
it could be indoors, as
you see, or outdoors.

00:04:54.070 --> 00:04:56.860
So the first step to
designing an AR experience

00:04:56.860 --> 00:04:59.980
is to define where user
will be using your app,

00:04:59.980 --> 00:05:02.950
and then accordingly select
the environment up front.

00:05:02.950 --> 00:05:05.820
And we recommend that once you
are defining the environment up

00:05:05.820 --> 00:05:09.160
front, help users
identify what could

00:05:09.160 --> 00:05:11.440
be the ideal conditions
for using your app

00:05:11.440 --> 00:05:14.490
in their environment or space--

00:05:14.490 --> 00:05:16.950
an augmented environment,
a virtual environment

00:05:16.950 --> 00:05:20.250
rendered by ARCore by
integrated virtual content

00:05:20.250 --> 00:05:22.900
with the real world.

00:05:22.900 --> 00:05:25.290
In order to create an
augmented environment,

00:05:25.290 --> 00:05:28.600
ARCore is continuously
improving its understanding

00:05:28.600 --> 00:05:30.850
of the real world
and providing you

00:05:30.850 --> 00:05:33.370
with surfaces where you
can land your assets

00:05:33.370 --> 00:05:37.180
or build your
experience further.

00:05:37.180 --> 00:05:38.890
By you creating
an AR experience,

00:05:38.890 --> 00:05:41.110
you can leverage
ARCore's capability

00:05:41.110 --> 00:05:44.600
to build surfaces over
time to your advantage.

00:05:44.600 --> 00:05:46.610
For example, as you
see on the screen here,

00:05:46.610 --> 00:05:48.340
a frog is jumping
from one surface

00:05:48.340 --> 00:05:52.200
to another and encouraging
users to explore the space.

00:05:52.200 --> 00:05:54.220
And here, while the
user would move around,

00:05:54.220 --> 00:05:58.590
you can slowly build the
experience going forward.

00:05:58.590 --> 00:06:00.810
Well, the journey of
understanding the real world

00:06:00.810 --> 00:06:03.390
comes with its own
set of challenges.

00:06:03.390 --> 00:06:05.760
For instance, as you
see on the screen, when

00:06:05.760 --> 00:06:08.130
the environment gets
too dark, ARCore

00:06:08.130 --> 00:06:11.130
can detect such situations
and provide feedback.

00:06:11.130 --> 00:06:16.320
And today, ARCore can detect
insufficient features, too dark

00:06:16.320 --> 00:06:19.870
or low-lit environments
in excessive control.

00:06:19.870 --> 00:06:22.320
You can now use
these capabilities

00:06:22.320 --> 00:06:24.840
to understand user's
context, and prompt them

00:06:24.840 --> 00:06:29.370
with contextual guidance, and
avoid any kind of friction.

00:06:29.370 --> 00:06:32.180
Now after you've selected
the type of environment,

00:06:32.180 --> 00:06:35.390
your second step would be to
define the experience size.

00:06:35.390 --> 00:06:37.580
An experience size
could be a table scale,

00:06:37.580 --> 00:06:42.960
as you see on the screen,
room scale, or world scale.

00:06:42.960 --> 00:06:44.890
When we design for
table scale, it

00:06:44.890 --> 00:06:49.330
allows users to engage in AR
on the smallest of surfaces.

00:06:49.330 --> 00:06:51.370
And a tabletop experience
would influence

00:06:51.370 --> 00:06:54.260
how you design the scale of your
assets and the potential play

00:06:54.260 --> 00:06:56.680
space.

00:06:56.680 --> 00:06:58.990
Whereas with room
scale, it basically

00:06:58.990 --> 00:07:02.210
expands the potential
for delight and magic.

00:07:02.210 --> 00:07:04.120
So you can leverage
multiple surfaces,

00:07:04.120 --> 00:07:07.090
create larger-than-life
assets for users to explore

00:07:07.090 --> 00:07:10.000
and immerse in the experience.

00:07:10.000 --> 00:07:13.350
With world scale, we have
no screen size limits.

00:07:13.350 --> 00:07:16.620
You can leverage procedurally
generated content

00:07:16.620 --> 00:07:19.450
and build your
experiences with time.

00:07:19.450 --> 00:07:22.740
However, public
spaces, you might

00:07:22.740 --> 00:07:26.940
encounter some unique challenges
ranging from a difficulty

00:07:26.940 --> 00:07:29.700
in tracking an
occlusion depending

00:07:29.700 --> 00:07:33.150
on the number of objects in
people present in the scene.

00:07:33.150 --> 00:07:35.430
So from the private
space of a room

00:07:35.430 --> 00:07:37.870
to the waste openness of
a real-world environment,

00:07:37.870 --> 00:07:40.710
consider where users
may be using your app.

00:07:40.710 --> 00:07:42.780
And anticipate and
communicate any kind

00:07:42.780 --> 00:07:45.000
of potential
challenges that might

00:07:45.000 --> 00:07:48.420
hinder their physical
capabilities of movement

00:07:48.420 --> 00:07:50.190
in the scene.

00:07:50.190 --> 00:07:55.560
And pick spaces that are most
conducive for the task at hand

00:07:55.560 --> 00:07:58.290
Users-- what's an experience
without our users, right?

00:07:58.290 --> 00:08:02.890
And they are the most excited
and ready-to-be-delighted lot.

00:08:02.890 --> 00:08:05.160
Well, with AR, we
have transitioned from

00:08:05.160 --> 00:08:09.740
the 3-to-6-inch screen that
used to be in our mobile phones

00:08:09.740 --> 00:08:13.590
to a screen size which
has no limits today.

00:08:13.590 --> 00:08:16.470
And this creates a completely
new and exciting paradigm

00:08:16.470 --> 00:08:19.130
for users to experience.

00:08:19.130 --> 00:08:22.060
However, several years of past
smartphone use and the field

00:08:22.060 --> 00:08:23.890
of view limited to
that small screen

00:08:23.890 --> 00:08:26.530
has led to some
behaviors and habits

00:08:26.530 --> 00:08:28.390
that can influence
users' behavior

00:08:28.390 --> 00:08:30.010
in an immersive experience.

00:08:30.010 --> 00:08:32.320
So I am going to be talking
about these behaviors,

00:08:32.320 --> 00:08:35.500
and specifically touch
upon perception, movement,

00:08:35.500 --> 00:08:38.230
and comfort as three aspects.

00:08:38.230 --> 00:08:41.230
So now let's talk
about perception

00:08:41.230 --> 00:08:44.095
and how users' perception
can be defined by a screen.

00:08:47.790 --> 00:08:49.920
While using smartphone
applications,

00:08:49.920 --> 00:08:53.070
user attention is focused on
the flat screen of the 2D screen

00:08:53.070 --> 00:08:55.770
that you see,
whereas in an AR app,

00:08:55.770 --> 00:08:59.510
an immersive environment to
the user, the screen size

00:08:59.510 --> 00:09:00.450
is limitless.

00:09:00.450 --> 00:09:02.850
And that can be defined as seen.

00:09:02.850 --> 00:09:06.060
And how could scene influence
user behavior and perception?

00:09:06.060 --> 00:09:09.170
Let's figure it out.

00:09:09.170 --> 00:09:11.510
When users are experiencing
an AR environment,

00:09:11.510 --> 00:09:13.190
their attention is
now being pulled

00:09:13.190 --> 00:09:16.760
from what used to be
the screen to the scene

00:09:16.760 --> 00:09:19.280
and creating some
sort of immersion.

00:09:19.280 --> 00:09:20.370
And immersion is great.

00:09:20.370 --> 00:09:21.990
That's what we are
looking for, right?

00:09:21.990 --> 00:09:25.770
Users are truly engaged with
your app, and it's good to go.

00:09:25.770 --> 00:09:29.120
But there are some kind
of design challenges

00:09:29.120 --> 00:09:31.880
that we've come across.

00:09:31.880 --> 00:09:33.950
We found that users
can completely forget

00:09:33.950 --> 00:09:35.010
about their surroundings.

00:09:35.010 --> 00:09:36.680
So they'll be so
immersed in the scene

00:09:36.680 --> 00:09:40.010
that, whatever that's around
them, they'll forget about it.

00:09:40.010 --> 00:09:42.560
And immersion can limit
users' peripheral vision

00:09:42.560 --> 00:09:44.930
and what we call
cognitive tunneling.

00:09:44.930 --> 00:09:48.260
The best way to understand would
be that they have blinders on.

00:09:48.260 --> 00:09:51.530
And these blinders aren't just
to do with just the surrounding

00:09:51.530 --> 00:09:52.585
environment.

00:09:56.950 --> 00:10:01.180
Whereas while users are immersed
and engaged in the experience,

00:10:01.180 --> 00:10:03.883
don't be surprised if they
completely forget about the UI

00:10:03.883 --> 00:10:05.050
that you have on the screen.

00:10:07.660 --> 00:10:10.900
And we recommend you to reduce
the number of UI elements

00:10:10.900 --> 00:10:13.480
that you have on the screen,
and try and introduce them

00:10:13.480 --> 00:10:15.040
in the scene itself.

00:10:15.040 --> 00:10:18.310
And wherever we are building any
kind of flows where the user is

00:10:18.310 --> 00:10:21.700
allowed to move back and
forth from a screen to scene,

00:10:21.700 --> 00:10:24.550
try and make it
either less frequent

00:10:24.550 --> 00:10:28.820
or try to avoid that completely.

00:10:28.820 --> 00:10:30.890
Now here I have an
interesting concept.

00:10:30.890 --> 00:10:33.548
But before I
introduce that to you,

00:10:33.548 --> 00:10:35.840
could you tell me what's
happening on screen right now,

00:10:35.840 --> 00:10:36.340
anyone?

00:10:40.125 --> 00:10:40.625
Anyone?

00:10:45.880 --> 00:10:49.650
OK, so yes, a little pet
is being reduced in size.

00:10:49.650 --> 00:10:53.310
But what's happening here
is that one on the left

00:10:53.310 --> 00:10:55.620
is reducing in the
size, and on the right,

00:10:55.620 --> 00:10:57.390
is translating in the scene.

00:10:57.390 --> 00:10:59.130
So what we've observed
is that there's

00:10:59.130 --> 00:11:03.115
an altered perception in terms
of depth, distance, and scale.

00:11:03.115 --> 00:11:04.740
And this is one of
the common behaviors

00:11:04.740 --> 00:11:08.910
that our users encounter when
they're experiencing an AR app.

00:11:08.910 --> 00:11:11.550
Once they are translating
an object in the scene,

00:11:11.550 --> 00:11:14.460
they tend to perceive
it as a change in size.

00:11:14.460 --> 00:11:16.890
And one way to solve
this possible challenge

00:11:16.890 --> 00:11:20.010
is to encourage user movement
so that users can correctly

00:11:20.010 --> 00:11:24.460
interpret the interaction
that you're building in.

00:11:24.460 --> 00:11:25.970
Now we talked about perception.

00:11:25.970 --> 00:11:27.850
Let's talk about movement.

00:11:27.850 --> 00:11:31.180
Mobile AR is inherently
an environmental medium

00:11:31.180 --> 00:11:35.090
that invites movement
and motion from the user.

00:11:35.090 --> 00:11:37.410
And coming back to
smartphones again,

00:11:37.410 --> 00:11:39.320
as I was talking
about it, smartphones

00:11:39.320 --> 00:11:41.450
have a strong impact
on user behavior.

00:11:41.450 --> 00:11:44.580
And it most evidently
can be seen in movement.

00:11:44.580 --> 00:11:46.460
And if you look around,
we feel that we're so

00:11:46.460 --> 00:11:48.620
immersed in our smartphones
that we've developed

00:11:48.620 --> 00:11:49.620
some sort of an inertia.

00:11:49.620 --> 00:11:52.120
So if we are stuck in a place,
we are just stuck in a place.

00:11:52.120 --> 00:11:54.530
And we won't move around
until there's a major reason

00:11:54.530 --> 00:11:55.850
to change that.

00:11:55.850 --> 00:11:58.130
And many of our users
have never experienced

00:11:58.130 --> 00:12:00.140
a 360-degree environment.

00:12:00.140 --> 00:12:02.480
They're still learning
to comprehend the ability

00:12:02.480 --> 00:12:06.280
to use their spaces as
an expansive play space.

00:12:06.280 --> 00:12:08.630
Here, from an
engagement standpoint,

00:12:08.630 --> 00:12:10.910
they're not only engaging
with your experience,

00:12:10.910 --> 00:12:13.610
but now they are actors in
your experience as well.

00:12:13.610 --> 00:12:16.850
And you could use movement as
an input for the experience

00:12:16.850 --> 00:12:17.750
that you're building.

00:12:17.750 --> 00:12:20.820
And I'll be talking
about that going forward.

00:12:20.820 --> 00:12:24.260
So now they're stuck at a
situation, or at a pose.

00:12:24.260 --> 00:12:27.500
How do you encourage
them to move?

00:12:27.500 --> 00:12:29.240
And one approach
that we have here

00:12:29.240 --> 00:12:31.760
is to leverage any kind
of off-screen indicators

00:12:31.760 --> 00:12:35.240
that encourage users
to flow with them.

00:12:35.240 --> 00:12:37.580
And once users
start moving, it'll

00:12:37.580 --> 00:12:39.830
be hard for you to figure
out what direction they're

00:12:39.830 --> 00:12:41.180
going to move in.

00:12:41.180 --> 00:12:44.630
So it'll be good for
you to guide the users

00:12:44.630 --> 00:12:46.640
about the kind and
the range of movement

00:12:46.640 --> 00:12:49.580
that you intend for your
app, and by creating

00:12:49.580 --> 00:12:54.270
a clear directional path
as you see the visual here.

00:12:54.270 --> 00:12:56.510
Another approach to
make user movement

00:12:56.510 --> 00:12:58.460
as an input to
your gameplay could

00:12:58.460 --> 00:13:01.670
be that you could leverage
users' curiosity by placing

00:13:01.670 --> 00:13:03.560
objects that are
partially occluded

00:13:03.560 --> 00:13:05.390
to encourage them to move.

00:13:05.390 --> 00:13:07.190
And it also gives
them more agency

00:13:07.190 --> 00:13:10.066
to start exploring the space.

00:13:10.066 --> 00:13:13.082
And while we are
talking about movement,

00:13:13.082 --> 00:13:14.540
I'm sure you must
be thinking if it

00:13:14.540 --> 00:13:16.460
is critical to your
experience or not.

00:13:16.460 --> 00:13:18.180
Is it really necessary?

00:13:18.180 --> 00:13:19.970
So one thing that
we can keep in mind

00:13:19.970 --> 00:13:23.400
is trying to figure out what are
you going to use movement for.

00:13:23.400 --> 00:13:25.730
Is it going to be an
input to your experience?

00:13:25.730 --> 00:13:28.430
Or is it something that you're
using to explore an object

00:13:28.430 --> 00:13:30.870
or play space for the user?

00:13:30.870 --> 00:13:33.200
So for instance, as you see
the visual in the screen,

00:13:33.200 --> 00:13:35.480
here, there's a bar graph.

00:13:35.480 --> 00:13:38.630
So [INAUDIBLE] creating
a utility app experience,

00:13:38.630 --> 00:13:40.430
spinning the graph
might just be easier

00:13:40.430 --> 00:13:43.280
instead of forcing the
user to move around it.

00:13:43.280 --> 00:13:45.890
So be mindful of how you
are using user movement

00:13:45.890 --> 00:13:48.370
while creating your app.

00:13:48.370 --> 00:13:51.280
And now that we've covered
perception and movement,

00:13:51.280 --> 00:13:53.350
I'll be talking about
safety and comfort.

00:13:53.350 --> 00:13:55.630
Because that's crucial
for any AR experience.

00:13:58.990 --> 00:14:01.630
We've observed,
sometimes, AR experiences

00:14:01.630 --> 00:14:04.090
are built for
long-duration game plays.

00:14:04.090 --> 00:14:07.150
And holding your phone
still for a really long time

00:14:07.150 --> 00:14:09.070
can be very, very tiring.

00:14:09.070 --> 00:14:10.670
And you can build
your experience,

00:14:10.670 --> 00:14:12.940
which can encourage
either natural movement,

00:14:12.940 --> 00:14:16.730
or try and build resting
points in the play cycle.

00:14:16.730 --> 00:14:18.670
And when user wants
to pause, or let's

00:14:18.670 --> 00:14:21.760
say, walk out of the scene,
help them store the progress,

00:14:21.760 --> 00:14:22.840
not lose their data.

00:14:22.840 --> 00:14:24.340
And spare them
any kind of effort

00:14:24.340 --> 00:14:27.070
that they're going to put
in to reset everything

00:14:27.070 --> 00:14:27.840
when they return.

00:14:31.560 --> 00:14:33.580
Avoid making the
user do anything

00:14:33.580 --> 00:14:37.530
which is physically demanding,
uncomfortable, or abrupt

00:14:37.530 --> 00:14:40.283
avoid interactions that require
the user to walk backward

00:14:40.283 --> 00:14:41.700
like the way you
see on the visual

00:14:41.700 --> 00:14:46.690
here, like pulling a
slingshot sort of a thing.

00:14:46.690 --> 00:14:50.230
Remember we talked about
the blinders behavior?

00:14:50.230 --> 00:14:52.090
Correctly planning
for this behavior

00:14:52.090 --> 00:14:56.890
is even more important
when a user is outdoors.

00:14:56.890 --> 00:15:00.370
For example, I'm sharing
AR navigation with you

00:15:00.370 --> 00:15:02.300
that we are building right now.

00:15:02.300 --> 00:15:04.690
And if a user starts
walking with the phone up,

00:15:04.690 --> 00:15:07.210
we try and give a subtle
nudge to pay attention

00:15:07.210 --> 00:15:08.800
to their surroundings.

00:15:08.800 --> 00:15:12.040
And if they still continue to
walk forward with their phone

00:15:12.040 --> 00:15:15.700
up, we insert a bit more
with using a screen overlay.

00:15:15.700 --> 00:15:19.690
That effectively prevents the
user from continuing to use AR.

00:15:19.690 --> 00:15:21.550
So this is just one
example that we have

00:15:21.550 --> 00:15:24.520
where you can optimize
for user safety.

00:15:24.520 --> 00:15:27.040
Together, our role
as creators is

00:15:27.040 --> 00:15:30.760
to make sure that a product
is not only helpful, but also

00:15:30.760 --> 00:15:32.650
responsibly designed.

00:15:32.650 --> 00:15:35.320
And now that we have understood
the fundamental concepts

00:15:35.320 --> 00:15:37.720
of environment and
user, Germain will

00:15:37.720 --> 00:15:40.330
be talking about how to
utilize some of these concepts

00:15:40.330 --> 00:15:45.010
and build AR content
in your experience.

00:15:45.010 --> 00:15:47.580
GERMAIN RUFFLE:
Thank you, Khushboo.

00:15:47.580 --> 00:15:48.520
Yeah, hi, everyone.

00:15:48.520 --> 00:15:49.500
My name is Germain.

00:15:49.500 --> 00:15:51.065
I'm a UX designer
on the ARCore team.

00:15:51.065 --> 00:15:53.190
And I'm going to walk you
through the next big step

00:15:53.190 --> 00:15:54.648
in your journey of
developing an AR

00:15:54.648 --> 00:15:56.377
app, which is the AR content.

00:15:56.377 --> 00:15:57.960
So basically, for
the next 10 minutes,

00:15:57.960 --> 00:16:00.002
I'm going to talk about
how to display AR content

00:16:00.002 --> 00:16:02.105
and how to interact with it.

00:16:02.105 --> 00:16:03.980
So the first question
you should ask yourself

00:16:03.980 --> 00:16:07.070
before thinking about adding
content to the user environment

00:16:07.070 --> 00:16:09.710
is, how would this content
fit in their surroundings--

00:16:09.710 --> 00:16:12.670
basically, how to make
this object look real.

00:16:12.670 --> 00:16:14.650
And when I'm talking
about real or realism,

00:16:14.650 --> 00:16:17.130
it's not much about having
realistic object in the scene,

00:16:17.130 --> 00:16:19.830
but more about entering the
presence of any kind of object

00:16:19.830 --> 00:16:21.140
in the environment.

00:16:21.140 --> 00:16:23.640
The goal here is basically to
maintain the user's suspension

00:16:23.640 --> 00:16:26.480
of disbelief by making sure
that your augmented content

00:16:26.480 --> 00:16:28.440
feels present and credible.

00:16:28.440 --> 00:16:30.120
This is really
important so the user

00:16:30.120 --> 00:16:31.740
can be immersed
in your experience

00:16:31.740 --> 00:16:34.020
and believe in the story
you're trying to tell them.

00:16:34.020 --> 00:16:36.027
In order to achieve
this presence,

00:16:36.027 --> 00:16:37.860
there are multiple
levers you can play with.

00:16:37.860 --> 00:16:41.208
And I'm going to walk you
through three major ones.

00:16:41.208 --> 00:16:43.500
The first one is actually
happening during the creation

00:16:43.500 --> 00:16:44.850
of the asset itself.

00:16:44.850 --> 00:16:47.640
Because today, AR mostly
means smartphone AR.

00:16:47.640 --> 00:16:49.560
It comes inherently with
certain constraints,

00:16:49.560 --> 00:16:51.228
specifically when
it comes to graphic.

00:16:51.228 --> 00:16:52.770
So you need to find
creative solution

00:16:52.770 --> 00:16:55.730
to achieve the aesthetics
you're targeting.

00:16:55.730 --> 00:16:59.040
A very cost-efficient way of
improving definition and level

00:16:59.040 --> 00:17:02.220
of detail of a model is to
use a multi-layer texture

00:17:02.220 --> 00:17:06.540
model such as PBR, Physically
Based Rendering model.

00:17:06.540 --> 00:17:08.910
Supported by most
AR development tool,

00:17:08.910 --> 00:17:12.839
this is the cheapest solution
to achieve an advanced degree

00:17:12.839 --> 00:17:14.770
of detail for your objects.

00:17:14.770 --> 00:17:16.560
And it works
perfectly fine in AR.

00:17:16.560 --> 00:17:18.390
For example, you can
see on the screen,

00:17:18.390 --> 00:17:20.780
by adding normal
maps to the object,

00:17:20.780 --> 00:17:23.700
I'm adding a lot of detail, a
lot of wrinkles to the asset

00:17:23.700 --> 00:17:27.230
without any additional geometry.

00:17:27.230 --> 00:17:29.680
The second element you
want to pay attention

00:17:29.680 --> 00:17:32.050
while designing your
experience is the lighting.

00:17:32.050 --> 00:17:33.760
As Alex mentioned
previously, ARCore

00:17:33.760 --> 00:17:35.950
is now coming with
a new set of APIs

00:17:35.950 --> 00:17:38.740
that will help you to create
dynamic lighting and shadowing.

00:17:38.740 --> 00:17:41.260
AR contents would
then react accurately

00:17:41.260 --> 00:17:44.350
to the real-world changing
of lighting-- changement

00:17:44.350 --> 00:17:45.710
of lighting.

00:17:45.710 --> 00:17:48.830
This is a very crucial
factor to ensure realism,

00:17:48.830 --> 00:17:52.440
as a wrong lighting would
instantly break the immersion.

00:17:52.440 --> 00:17:54.630
And if you want to go beyond
with dynamic lighting,

00:17:54.630 --> 00:17:57.780
you can also imagine using
lighting as a trigger--

00:17:57.780 --> 00:18:00.270
as a trigger behavior or
condition for your gameplay.

00:18:00.270 --> 00:18:02.300
As you can see here,
not only the asset

00:18:02.300 --> 00:18:04.050
is reacting to the
changement of lighting,

00:18:04.050 --> 00:18:06.910
but it's also
adding a new content

00:18:06.910 --> 00:18:08.910
based on the fact that
the lighting is changing.

00:18:11.345 --> 00:18:13.470
And finally, another element
that you can play with

00:18:13.470 --> 00:18:15.510
to increase the credibility
of your experience

00:18:15.510 --> 00:18:18.630
is to emulate real-life
physics and apply this

00:18:18.630 --> 00:18:19.850
to your virtual object.

00:18:19.850 --> 00:18:21.600
This will not only
bring a lot of realism,

00:18:21.600 --> 00:18:25.830
but can also create some fun
scene and delightful situations

00:18:25.830 --> 00:18:28.050
such as the one here,
where, basically, an object

00:18:28.050 --> 00:18:30.570
is moving from one object to
another without any user input.

00:18:33.020 --> 00:18:35.020
So now that we have defined
how your object will

00:18:35.020 --> 00:18:37.603
look like in AR, it is important
to think about how they would

00:18:37.603 --> 00:18:39.740
behave, and more
specifically, how would a user

00:18:39.740 --> 00:18:41.840
interact with the assets?

00:18:41.840 --> 00:18:43.400
For the past couple
of months, we've

00:18:43.400 --> 00:18:44.775
been conducting
a lot of research

00:18:44.775 --> 00:18:46.880
to define our object
manipulation model.

00:18:46.880 --> 00:18:49.293
And we are really happy to
share it with you today.

00:18:49.293 --> 00:18:50.960
We basically found
10 attributes that we

00:18:50.960 --> 00:18:53.293
feel can contribute to create
a good object manipulation

00:18:53.293 --> 00:18:56.060
model for AR.

00:18:56.060 --> 00:18:59.312
The first attribute is to
always have a selection state.

00:18:59.312 --> 00:19:01.770
Regardless of the number of
elements you have in the scene,

00:19:01.770 --> 00:19:03.680
it is important that
the other can precisely

00:19:03.680 --> 00:19:05.540
select one of them
before applying

00:19:05.540 --> 00:19:07.470
any transformation to it.

00:19:07.470 --> 00:19:09.470
Although it is important
to visually communicate

00:19:09.470 --> 00:19:12.560
that the object is selected,
we call that selected state.

00:19:12.560 --> 00:19:14.420
So as you can see
here, we are using

00:19:14.420 --> 00:19:17.990
a ring that not only show
that the object is selected,

00:19:17.990 --> 00:19:20.157
but also show the surface
it is currently placed on.

00:19:20.157 --> 00:19:21.740
There is many different
way of showing

00:19:21.740 --> 00:19:22.823
that an object's selected.

00:19:22.823 --> 00:19:24.448
Feel free to create
your own that would

00:19:24.448 --> 00:19:25.746
fit best with your aesthetic.

00:19:29.010 --> 00:19:31.570
The second attribute
is for user movement.

00:19:31.570 --> 00:19:33.540
So one of the first
things ever user

00:19:33.540 --> 00:19:35.310
would do when trying
an AR experience

00:19:35.310 --> 00:19:37.020
is to move the object around.

00:19:37.020 --> 00:19:38.760
That's why we
decided on creating

00:19:38.760 --> 00:19:42.240
very simple interaction, a
one-finger touch and drag.

00:19:42.240 --> 00:19:44.640
It is a very common gesture,
and people are really

00:19:44.640 --> 00:19:47.190
used to it from 2D apps.

00:19:47.190 --> 00:19:50.298
If the user is trying to
move an object further away,

00:19:50.298 --> 00:19:52.590
they can also maintain the
touch on the object and move

00:19:52.590 --> 00:19:55.980
physically with their
phone in the space.

00:19:55.980 --> 00:19:58.350
It is also crucial to make
sure that the user can

00:19:58.350 --> 00:20:00.932
select the object and move
it in one single touch.

00:20:00.932 --> 00:20:02.390
This would avoid
a lot of friction.

00:20:05.140 --> 00:20:07.570
While moving an object from
one surface to another,

00:20:07.570 --> 00:20:10.700
be sure to maintain
height of the objects.

00:20:10.700 --> 00:20:13.570
So it always stays under
the finger of the user.

00:20:13.570 --> 00:20:17.200
Also, it can be a good idea
to highlight the destination

00:20:17.200 --> 00:20:19.320
point of the object
on the next surface

00:20:19.320 --> 00:20:23.420
to help the user
precisely place it.

00:20:23.420 --> 00:20:26.360
When a user is moving
an object in distance,

00:20:26.360 --> 00:20:29.330
it is important to increase
the size of the invisible touch

00:20:29.330 --> 00:20:34.047
area, or hit box, in regards to
its distance from the screen.

00:20:34.047 --> 00:20:36.380
Otherwise, the user won't be
able to bring back an asset

00:20:36.380 --> 00:20:38.150
that they've pushed
away without having

00:20:38.150 --> 00:20:41.060
to physically move towards it.

00:20:41.060 --> 00:20:42.525
And for the exact
same reason, you

00:20:42.525 --> 00:20:45.150
want to make sure that you have
a minimum and maximum placement

00:20:45.150 --> 00:20:47.340
distance, ensuring that
the user can always

00:20:47.340 --> 00:20:49.790
interact with the assets
without having to walk and look

00:20:49.790 --> 00:20:50.290
for them.

00:20:53.600 --> 00:20:55.220
When it comes to
rotating an object,

00:20:55.220 --> 00:20:57.420
there are basically two
methods that we recommend.

00:20:57.420 --> 00:20:58.920
We found that most
users would first

00:20:58.920 --> 00:21:02.850
try a two-finger twist on the
screen to rotate the object.

00:21:02.850 --> 00:21:06.350
This is like the most commonly
used interaction in 2D apps.

00:21:06.350 --> 00:21:09.350
However, one-finger rotation
feels more natural in AR

00:21:09.350 --> 00:21:11.210
since the swipe gesture
maps to the axis

00:21:11.210 --> 00:21:12.807
of rotation of the object.

00:21:12.807 --> 00:21:14.390
So we basically
recommend to implement

00:21:14.390 --> 00:21:18.140
both methods to support both
discoverability and also more

00:21:18.140 --> 00:21:21.580
natural interaction.

00:21:21.580 --> 00:21:23.810
The next attribute
is about scaling.

00:21:23.810 --> 00:21:25.310
So this would work
exactly like what

00:21:25.310 --> 00:21:27.750
you would expect in
any other 2D app,

00:21:27.750 --> 00:21:30.530
performing a pinch or to
change the size of the object.

00:21:30.530 --> 00:21:32.720
Since two fingers are
also used for rotation,

00:21:32.720 --> 00:21:35.470
adding a slight threshold can
be helpful to disambiguate

00:21:35.470 --> 00:21:38.690
between the two interactions.

00:21:38.690 --> 00:21:41.390
And because we are in AR, it
is crucial for your object

00:21:41.390 --> 00:21:44.072
to have a minimum
and maximum size.

00:21:44.072 --> 00:21:46.280
So this will ensure that
the users don't make objects

00:21:46.280 --> 00:21:48.488
so small or so large that
they can no longer interact

00:21:48.488 --> 00:21:49.120
with them.

00:21:49.120 --> 00:21:51.637
You can communicate that the
user reach the boundaries

00:21:51.637 --> 00:21:54.220
by adding a small bounce effect,
as you can see on the screen.

00:21:58.190 --> 00:22:00.690
The next attribute is
about elevating an object.

00:22:00.690 --> 00:22:02.460
After a lot of
research, we discovered

00:22:02.460 --> 00:22:04.590
that the most affordant
way of elevating an object

00:22:04.590 --> 00:22:08.130
is to perform a two-finger
vertical swipe on the screen,

00:22:08.130 --> 00:22:09.250
up and down.

00:22:09.250 --> 00:22:11.250
Also, I want to bring
your attention to the fact

00:22:11.250 --> 00:22:13.440
that it is important
to visually connect

00:22:13.440 --> 00:22:16.650
the assets to the surface
that it's placed on.

00:22:16.650 --> 00:22:18.330
This will help the
user understand

00:22:18.330 --> 00:22:20.880
both which object is
selected and what effect they

00:22:20.880 --> 00:22:23.903
are having on this object.

00:22:23.903 --> 00:22:26.320
And the final attribute that
I'm going to talk about today

00:22:26.320 --> 00:22:28.040
is about negative elevation.

00:22:28.040 --> 00:22:31.120
In a few words, do not let
objects sink into the surface

00:22:31.120 --> 00:22:32.380
they are placed on.

00:22:32.380 --> 00:22:35.230
Not only would it break the
rule of physics and instantly

00:22:35.230 --> 00:22:36.940
breaking the
immersion, but also, it

00:22:36.940 --> 00:22:40.682
can, on a more practical
level, lead to a situation

00:22:40.682 --> 00:22:42.640
where the user may lose
assets by bringing them

00:22:42.640 --> 00:22:43.598
below the ground level.

00:22:46.280 --> 00:22:48.370
So basically, to
sum up, we've put

00:22:48.370 --> 00:22:51.430
a lot of research and refinement
in creating our AR object

00:22:51.430 --> 00:22:52.510
manipulation model.

00:22:52.510 --> 00:22:54.177
And we hope that our
findings can really

00:22:54.177 --> 00:22:55.140
benefit to all of you.

00:22:55.140 --> 00:22:57.670
And because we know that
a good demo is always

00:22:57.670 --> 00:23:00.310
better than words, we've
created an open source demo

00:23:00.310 --> 00:23:02.798
as part of the ARCore SDK
that you can download today.

00:23:02.798 --> 00:23:04.840
And that implements all
these attributes for you.

00:23:04.840 --> 00:23:07.170
You can download the
SDK today and quickly

00:23:07.170 --> 00:23:09.795
add object manipulation
into your project.

00:23:09.795 --> 00:23:11.920
So now I'm going to give
the stage to Eugene, who's

00:23:11.920 --> 00:23:13.300
going to continue walking
us through the journey

00:23:13.300 --> 00:23:16.060
of developing an AR app and
talking about UI components.

00:23:16.060 --> 00:23:17.740
EUGENE MENG: Perfect.

00:23:17.740 --> 00:23:19.120
Thanks, Germain.

00:23:19.120 --> 00:23:19.880
Hi, everyone.

00:23:19.880 --> 00:23:20.460
I'm Eugene.

00:23:20.460 --> 00:23:23.950
I'm also an interaction
designer on the ARCore UX team.

00:23:23.950 --> 00:23:26.320
Today I will be introducing
you to the last building

00:23:26.320 --> 00:23:29.620
block of designing for
AR, being interface.

00:23:29.620 --> 00:23:31.840
Historically, every
successful platform

00:23:31.840 --> 00:23:34.180
has introduced a
set of UI widgets

00:23:34.180 --> 00:23:36.910
for developers to
craft applications.

00:23:36.910 --> 00:23:39.160
And this AR is a
nascent field itself.

00:23:39.160 --> 00:23:44.340
We are also exploring
which set of UI components

00:23:44.340 --> 00:23:49.190
makes the most sense for
volumetric applications.

00:23:49.190 --> 00:23:51.140
If you think about
it, the interface

00:23:51.140 --> 00:23:53.930
is the viewport for AR
that helps magically bridge

00:23:53.930 --> 00:23:56.540
the gap between users
and the environment.

00:23:56.540 --> 00:23:59.120
The size of a phone screen
is literally the size

00:23:59.120 --> 00:24:01.670
of a user's field of view.

00:24:01.670 --> 00:24:04.580
It also serves as a control
panel for your users

00:24:04.580 --> 00:24:07.790
to magically manipulate AR
content through gestures

00:24:07.790 --> 00:24:09.350
or UI widgets.

00:24:09.350 --> 00:24:11.810
And knowing that the interface
accounts for both view

00:24:11.810 --> 00:24:15.890
and input, as creators, we want
to create an interface that's

00:24:15.890 --> 00:24:22.170
engaging, intuitive, yet clean
to not block users' view.

00:24:22.170 --> 00:24:25.590
And to start with, some familiar
2D screen UI patterns do

00:24:25.590 --> 00:24:29.640
carry over to AR, especially
in initialization and settings

00:24:29.640 --> 00:24:32.010
controls.

00:24:32.010 --> 00:24:36.060
A lot of applications feature a
combination of 2D and AR modes.

00:24:36.060 --> 00:24:38.070
And in those apps,
the journey of AR

00:24:38.070 --> 00:24:41.070
starts from the moment when
a user tap on the Launch

00:24:41.070 --> 00:24:43.200
into AR Mode button.

00:24:43.200 --> 00:24:45.930
Google has now created a
set of call to action icons

00:24:45.930 --> 00:24:48.870
for accessing AR with
different intentions.

00:24:48.870 --> 00:24:51.510
The icon set features a
consistent bracket frame

00:24:51.510 --> 00:24:55.590
metaphor, symbolizing
launching into AR experiences

00:24:55.590 --> 00:24:57.270
in the camera--

00:24:57.270 --> 00:24:59.040
in the camera viewfinder.

00:24:59.040 --> 00:25:01.950
And we believe that
using consistent UI icons

00:25:01.950 --> 00:25:05.640
across applications will greatly
help acknowledge user entrance

00:25:05.640 --> 00:25:08.360
into AR.

00:25:08.360 --> 00:25:10.760
And as indicated
in the iconography,

00:25:10.760 --> 00:25:13.670
AR experiences are heavily
dependent on camera

00:25:13.670 --> 00:25:14.960
see-throughs.

00:25:14.960 --> 00:25:17.060
However, through
research, we have

00:25:17.060 --> 00:25:19.610
found that majority
of users, especially

00:25:19.610 --> 00:25:21.740
those who are not
familiar with AR,

00:25:21.740 --> 00:25:24.452
will drop off during a
denaturalization stage

00:25:24.452 --> 00:25:26.660
when they're asked to give
permission to their camera

00:25:26.660 --> 00:25:30.020
usage, which is simply not
something that is required

00:25:30.020 --> 00:25:32.150
for most 2D applications.

00:25:32.150 --> 00:25:33.620
This means that
most of the users

00:25:33.620 --> 00:25:36.140
don't even get to experience
AR and have already

00:25:36.140 --> 00:25:39.050
left the experience
without realizing it.

00:25:39.050 --> 00:25:42.050
Acknowledging that, we
recommend you, as creators,

00:25:42.050 --> 00:25:44.570
to communicate the
intent of camera usage

00:25:44.570 --> 00:25:47.300
explicitly before
permission prompts

00:25:47.300 --> 00:25:51.200
to help give your users more
context on why camera usage is

00:25:51.200 --> 00:25:55.660
necessitated for the
experience you have built.

00:25:55.660 --> 00:25:57.990
And in cases where
2D screen UIs are

00:25:57.990 --> 00:26:01.260
present during runtime,
like settings controls or 2D

00:26:01.260 --> 00:26:04.410
galleries, it is important
for these UI components

00:26:04.410 --> 00:26:06.450
to feature responsiveness.

00:26:06.450 --> 00:26:09.600
The UI components should
remain at the same location,

00:26:09.600 --> 00:26:13.560
but rotate in reaction
to the device orientation

00:26:13.560 --> 00:26:15.900
to enhance for user comfort.

00:26:15.900 --> 00:26:18.450
And meanwhile, you don't
want to interrupt the camera

00:26:18.450 --> 00:26:20.852
feed with a rotation animation.

00:26:20.852 --> 00:26:22.935
The feed itself will give
you the visual feedback.

00:26:25.860 --> 00:26:28.290
Knowing that the real
estate of your phone screen

00:26:28.290 --> 00:26:31.230
is really limited and
precious, a great way

00:26:31.230 --> 00:26:34.830
to help make more room on
your screen with realism

00:26:34.830 --> 00:26:41.240
into the AR fabric is through
leveraging more volumetric UI.

00:26:41.240 --> 00:26:45.320
UI components like
icons, chips, and cards

00:26:45.320 --> 00:26:47.870
translate well to
annotate AR objects

00:26:47.870 --> 00:26:50.120
with different
volume of information

00:26:50.120 --> 00:26:52.580
with nuanced and
spatial behaviors.

00:26:52.580 --> 00:26:54.860
We would love to think
of these behaviors

00:26:54.860 --> 00:26:59.200
as volumetric responsive design.

00:26:59.200 --> 00:27:02.950
Uniquely, AR annotations can
vary their physical forms

00:27:02.950 --> 00:27:07.060
in reaction to user movement
and interactions, such as focus

00:27:07.060 --> 00:27:08.350
and select.

00:27:08.350 --> 00:27:11.590
To maintain legibility of
information and add delight,

00:27:11.590 --> 00:27:14.890
we suggest you to
define a minimum default

00:27:14.890 --> 00:27:17.620
and maximum target
size for annotations

00:27:17.620 --> 00:27:19.930
to be displayed at
different movement range

00:27:19.930 --> 00:27:22.990
with varied amount of info.

00:27:22.990 --> 00:27:25.710
This rule also applies to
different selection states

00:27:25.710 --> 00:27:27.610
to help inform context.

00:27:27.610 --> 00:27:29.430
Where users are
moving their devices

00:27:29.430 --> 00:27:31.800
between different
annotations, you

00:27:31.800 --> 00:27:34.200
will want the one that's
currently being on focus

00:27:34.200 --> 00:27:36.210
or that's currently
being selected

00:27:36.210 --> 00:27:38.700
to be shown in its
full size or form,

00:27:38.700 --> 00:27:40.770
whereas the other
ones can optionally

00:27:40.770 --> 00:27:42.030
stay at a reduced form.

00:27:44.690 --> 00:27:47.360
On top of that, AR
annotations can also

00:27:47.360 --> 00:27:52.650
rotate to preserve readability
and deliver a context.

00:27:52.650 --> 00:27:55.540
Like what you can
see here on the left,

00:27:55.540 --> 00:27:59.140
having an annotation to
always rotate to face a user

00:27:59.140 --> 00:28:02.590
can be overwhelming at times,
especially when your user is

00:28:02.590 --> 00:28:04.810
constantly moving in
their space or when

00:28:04.810 --> 00:28:08.410
there are multiple annotations
in the scene at the same time.

00:28:08.410 --> 00:28:10.960
Knowing that, we suggest
you have annotations

00:28:10.960 --> 00:28:14.950
remain static and only rotate
when it is on focus so that we

00:28:14.950 --> 00:28:17.920
can maintain readability
of these annotations

00:28:17.920 --> 00:28:20.930
and inform context
when necessary.

00:28:20.930 --> 00:28:22.600
Another thing to
note is that when

00:28:22.600 --> 00:28:25.360
you're designing for
these rotation behaviors,

00:28:25.360 --> 00:28:29.110
we suggest you to be mindful
of the spatial relationship

00:28:29.110 --> 00:28:31.990
between the annotations
and other virtual objects

00:28:31.990 --> 00:28:33.394
to avoid collision.

00:28:36.060 --> 00:28:38.670
Similar to the
responsiveness of texts,

00:28:38.670 --> 00:28:42.310
objects can also adapt
the size to environment.

00:28:42.310 --> 00:28:45.330
You can use a hologram to
offer a preview for users

00:28:45.330 --> 00:28:48.460
to understand the volume
and scale of the object.

00:28:48.460 --> 00:28:50.490
This greatly helps
set their expectation

00:28:50.490 --> 00:28:54.610
before placing or anchoring an
object firmly at a location.

00:28:54.610 --> 00:28:56.430
And this will help
to set up your scenes

00:28:56.430 --> 00:28:59.530
with a lot more success.

00:28:59.530 --> 00:29:02.380
And in cases where a
virtual object does appear

00:29:02.380 --> 00:29:06.370
to intersect with a real-world
entity like a wall in a room,

00:29:06.370 --> 00:29:08.020
you also want to
communicate visually

00:29:08.020 --> 00:29:11.170
how much space is needed
for a proper placement

00:29:11.170 --> 00:29:13.715
so that you can prompt your
user to move and reanchor

00:29:13.715 --> 00:29:14.215
the object.

00:29:18.190 --> 00:29:20.870
Another way to look at the
responsiveness of object

00:29:20.870 --> 00:29:23.460
is the adjustment of elevation.

00:29:23.460 --> 00:29:26.370
Physical environments are
not always perfectly designed

00:29:26.370 --> 00:29:28.230
for AR experiences.

00:29:28.230 --> 00:29:31.620
For instance, let's say you're
designing for a tabletop

00:29:31.620 --> 00:29:34.890
experience like a chess
game where your users simply

00:29:34.890 --> 00:29:37.630
don't have a table
in their environment.

00:29:37.630 --> 00:29:39.660
What should we do?

00:29:39.660 --> 00:29:42.740
We suggest to just go ahead and
create a virtual table that's

00:29:42.740 --> 00:29:45.450
generated based on
your device orientation

00:29:45.450 --> 00:29:47.180
and the distance
between the device

00:29:47.180 --> 00:29:49.190
and the detected surface.

00:29:49.190 --> 00:29:52.970
This gives your user flexibility
to align the experience based

00:29:52.970 --> 00:29:56.490
on their eye level and optimize
for ease of access and user

00:29:56.490 --> 00:29:56.990
comfort.

00:29:59.645 --> 00:30:01.830
And like Khushboo has
mentioned earlier,

00:30:01.830 --> 00:30:03.870
when users are fully
immersed in the AR

00:30:03.870 --> 00:30:08.070
story, most of the times, we
don't want to interrupt that.

00:30:08.070 --> 00:30:11.020
We have observed situations
when users are freely

00:30:11.020 --> 00:30:13.530
exploring around in
the AR experience

00:30:13.530 --> 00:30:16.050
and would occasionally
approach their device closer

00:30:16.050 --> 00:30:18.570
to an object to
simply test and see

00:30:18.570 --> 00:30:21.240
if it's a point of interest,
which sometimes ends up

00:30:21.240 --> 00:30:23.820
in surface collision
between the device screen

00:30:23.820 --> 00:30:26.040
and the surface of
the virtual object,

00:30:26.040 --> 00:30:28.710
causing the virtual object to
suddenly disappear from your AR

00:30:28.710 --> 00:30:30.180
experience.

00:30:30.180 --> 00:30:32.130
In order to inform
your users that this

00:30:32.130 --> 00:30:35.790
is an unintended behavior,
instead of triggering

00:30:35.790 --> 00:30:38.310
an interruptive
warning notification,

00:30:38.310 --> 00:30:41.070
we suggest to handle
it more elegantly.

00:30:41.070 --> 00:30:46.290
One way you can do it is to
have and use camera effect

00:30:46.290 --> 00:30:49.500
to subtly convey the idea
that users are entering

00:30:49.500 --> 00:30:53.310
an unexpected territory
while still keep

00:30:53.310 --> 00:30:54.570
their attention in the scene.

00:30:57.156 --> 00:31:00.710
In 2D interface design,
notifications sometimes

00:31:00.710 --> 00:31:02.960
show up in forms of pop-ups.

00:31:02.960 --> 00:31:05.420
In AR, we want to
avoid this usage

00:31:05.420 --> 00:31:09.070
unless users intentionally
choose to launch them.

00:31:09.070 --> 00:31:10.840
The ones that are
showing up out of blue

00:31:10.840 --> 00:31:12.850
can easily take
over the viewport

00:31:12.850 --> 00:31:15.400
and instantly breaks
realism by shifting

00:31:15.400 --> 00:31:18.370
your user's mental
model from the scene

00:31:18.370 --> 00:31:20.680
back to a screen-based
browsing experience.

00:31:23.480 --> 00:31:27.160
Now that we have talked a lot
about design basics [INAUDIBLE]

00:31:27.160 --> 00:31:31.000
quality AR, we're also super,
super excited to introduce you

00:31:31.000 --> 00:31:34.780
to a set of tools that are
available over ARCore platform

00:31:34.780 --> 00:31:36.820
to help you, as
creators, to embark

00:31:36.820 --> 00:31:40.340
on a journey of AR production.

00:31:40.340 --> 00:31:42.710
We're constantly launching
updates for ARCore

00:31:42.710 --> 00:31:46.490
with a set of SDKs that you
can simply grab off the rack

00:31:46.490 --> 00:31:49.730
and hopefully expedite
your project development.

00:31:49.730 --> 00:31:52.610
In a recent release, we have
shared a couple of demo scenes

00:31:52.610 --> 00:31:54.510
with image tracking
and all above

00:31:54.510 --> 00:31:57.260
mentioned behaviors
of object manipulation

00:31:57.260 --> 00:31:58.910
that you can use and customize.

00:32:02.050 --> 00:32:04.450
You can also download
the ARCore Elements app

00:32:04.450 --> 00:32:06.970
from Play Store, where
you can find and play

00:32:06.970 --> 00:32:10.460
with all the UI components
that we have shared today.

00:32:10.460 --> 00:32:12.490
And if you're into
reading, we also

00:32:12.490 --> 00:32:15.640
have a textual documentation
of all of our learnings packed

00:32:15.640 --> 00:32:19.390
into an augmented reality design
guidelines that's available

00:32:19.390 --> 00:32:20.940
online.

00:32:20.940 --> 00:32:22.527
Feel free to check
out these resources

00:32:22.527 --> 00:32:24.110
and keep them by
your side when you're

00:32:24.110 --> 00:32:25.930
working on your AR projects.

00:32:25.930 --> 00:32:29.030
And since AR is peaking
over its horizon,

00:32:29.030 --> 00:32:30.950
we'd love to see more
inspiration spawned

00:32:30.950 --> 00:32:32.290
from your project.

00:32:32.290 --> 00:32:35.230
And hopefully we'll be able
to see more lessons learned

00:32:35.230 --> 00:32:37.940
and questions raised about AR.

00:32:37.940 --> 00:32:40.940
Thank you for joining us today
in person or on live stream.

00:32:40.940 --> 00:32:42.440
Hope you enjoy your time at I/O.

00:32:42.440 --> 00:32:42.940
[APPLAUSE]

00:32:42.940 --> 00:32:46.090
[MUSIC PLAYING]

