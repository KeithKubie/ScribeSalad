WEBVTT
Kind: captions
Language: en

00:00:00.699 --> 00:00:02.240
BRIAN ARMSTRONG:
I'm Brian Armstrong.

00:00:02.240 --> 00:00:05.627
If you see the screaming
cat on Gitter, that's me.

00:00:05.627 --> 00:00:07.085
I did a Google
image search one day

00:00:07.085 --> 00:00:09.290
and thought it was really
funny, so I picked it.

00:00:09.290 --> 00:00:10.970
I also run Flutter Institute.

00:00:10.970 --> 00:00:12.980
I have about four
times as many followers

00:00:12.980 --> 00:00:15.476
on that Twitter account than
my personal Twitter account.

00:00:15.476 --> 00:00:16.309
So it's kind of fun.

00:00:19.110 --> 00:00:21.890
So let's talk about
sorting today.

00:00:21.890 --> 00:00:24.540
Sorting is one of
those hard problems

00:00:24.540 --> 00:00:26.330
that a lot of
really smart people

00:00:26.330 --> 00:00:31.560
have spent a lot of hard
time figuring it out.

00:00:31.560 --> 00:00:33.110
I did a quick
search, and Wikipedia

00:00:33.110 --> 00:00:37.696
has 11 different algorithms for
sorting based on how big it is,

00:00:37.696 --> 00:00:40.070
and how fast you want it, and
a bunch of different things

00:00:40.070 --> 00:00:44.660
that you have to figure out if
you want to use a good sorting

00:00:44.660 --> 00:00:46.250
algorithm.

00:00:46.250 --> 00:00:50.570
So sorting in Dart, some smart
people did the work for us,

00:00:50.570 --> 00:00:53.510
and it's a hybrid
of two algorithms.

00:00:53.510 --> 00:00:55.857
If you have less than 33
elements in your list--

00:00:55.857 --> 00:00:57.940
and someone did the math
to figure this out-- then

00:00:57.940 --> 00:01:01.310
it uses an insertion
sort to be more optimal.

00:01:01.310 --> 00:01:04.160
Otherwise, it uses what's called
a dual-pivot quicksort, which

00:01:04.160 --> 00:01:08.900
I didn't actually know was a
thing until I did this talk.

00:01:08.900 --> 00:01:11.570
The problem is, all
of these best case

00:01:11.570 --> 00:01:16.160
are big-O n log n, which
just isn't quite fast enough.

00:01:16.160 --> 00:01:17.730
Because we can do better.

00:01:17.730 --> 00:01:21.500
We can make it big-O n,
because Dart is the future.

00:01:21.500 --> 00:01:22.490
[LAUGHTER]

00:01:22.490 --> 00:01:25.380
So I have some caveats.

00:01:25.380 --> 00:01:28.040
First, you shouldn't
do this in real time.

00:01:28.040 --> 00:01:31.264
Futures are asynchronous,
so we don't care.

00:01:31.264 --> 00:01:33.680
The user shouldn't be waiting
on it for the app to respond

00:01:33.680 --> 00:01:34.180
or anything.

00:01:34.180 --> 00:01:37.850
So just put it in the
background and let it happen.

00:01:37.850 --> 00:01:40.730
Second, I only designed
this to work for integers.

00:01:40.730 --> 00:01:44.210
We could change that, but
right now, it's just simple.

00:01:44.210 --> 00:01:46.910
And try to keep them
generally small.

00:01:46.910 --> 00:01:50.510
Anything that gets in the
many tens of thousands

00:01:50.510 --> 00:01:53.190
will probably not
be very useful.

00:01:53.190 --> 00:01:58.280
So here, at long last,
is the algorithm.

00:01:58.280 --> 00:02:02.030
You'll notice that we're
sorting everything,

00:02:02.030 --> 00:02:04.910
and we're just waiting
for the duration.

00:02:04.910 --> 00:02:07.790
So we'd start our Future,
and we'd delay it.

00:02:07.790 --> 00:02:11.750
And I did a lot of
research to determine

00:02:11.750 --> 00:02:13.370
the correct number
of milliseconds

00:02:13.370 --> 00:02:15.554
to pad this with to
make this one work.

00:02:15.554 --> 00:02:16.970
So we pad it with
10 milliseconds,

00:02:16.970 --> 00:02:19.520
and then we just add
the integer to that.

00:02:19.520 --> 00:02:23.622
So it just waits, and when
the Future finally completes,

00:02:23.622 --> 00:02:25.580
then it adds them to the
list, and it adds them

00:02:25.580 --> 00:02:27.270
to the list in
the correct order.

00:02:27.270 --> 00:02:31.140
So this only sorts from smallest
to biggest, and that's OK.

00:02:33.890 --> 00:02:37.460
And we use milliseconds, because
microseconds are just too fast.

00:02:37.460 --> 00:02:38.990
[LAUGHTER]

00:02:38.990 --> 00:02:41.060
We just keep it simple.

00:02:41.060 --> 00:02:43.640
We don't care about when
the user gets it back,

00:02:43.640 --> 00:02:45.680
because it's asynchronous.

00:02:45.680 --> 00:02:50.290
But you'll notice we only
go over the list once.

00:02:50.290 --> 00:02:52.308
So we've got big-O n.

00:02:52.308 --> 00:02:55.272
[APPLAUSE]

00:02:58.730 --> 00:03:00.140
That is kind of small.

00:03:00.140 --> 00:03:01.610
So I actually made a demo.

00:03:01.610 --> 00:03:05.390
You can run this in DartPad,
because it only has one

00:03:05.390 --> 00:03:07.640
dependency, on dart:async.

00:03:07.640 --> 00:03:10.580
And it's already been run, but
you can see, I went up to--

00:03:10.580 --> 00:03:13.040
my largest number was 1,354.

00:03:13.040 --> 00:03:15.450
It's item three on the list.

00:03:15.450 --> 00:03:20.659
So if we run it, it takes a
minute, and then-- oh, man.

00:03:20.659 --> 00:03:21.200
There you go.

00:03:21.200 --> 00:03:22.310
There's my output.

00:03:22.310 --> 00:03:25.370
And it sorts the list, big-O n.

00:03:25.370 --> 00:03:27.250
Thank you very much.

