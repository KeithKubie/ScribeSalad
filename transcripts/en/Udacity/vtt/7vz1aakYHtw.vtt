WEBVTT
Kind: captions
Language: en

00:00:00.194 --> 00:00:04.150
The checkbox example demonstrated how
ARIA modifies the semantic information

00:00:04.150 --> 00:00:06.020
of an element on the page.

00:00:06.020 --> 00:00:09.290
ARIA attributes can be used in a number
of ways to augment the existing ways

00:00:09.290 --> 00:00:11.280
we can express semantics in HTML.

00:00:11.280 --> 00:00:13.740
Firstly, as we saw with
the checkbox example,

00:00:13.740 --> 00:00:17.700
ARIA can add semantics to an element
where no native semantics exist.

00:00:17.700 --> 00:00:20.040
Such as a div element
which explicitly and

00:00:20.040 --> 00:00:23.090
deliberately has no native semantics.

00:00:23.090 --> 00:00:27.560
ARIA can also modify existing elements
semantics within certain bounds.

00:00:27.560 --> 00:00:30.180
For example, I might use
a button element to implement

00:00:30.180 --> 00:00:32.659
an on off switch type of control.

00:00:32.659 --> 00:00:35.160
I can add an ARIA role
of switch to the button

00:00:35.160 --> 00:00:37.730
to more accurately
express its semantics.

00:00:37.730 --> 00:00:42.680
One quick note, that switch role is
part of the forthcoming ARIA 1.1 spec.

00:00:42.680 --> 00:00:46.020
So as I'm recording this,
it's not quite ready for prime time yet.

00:00:46.020 --> 00:00:48.370
Just like all web standards,
ARIA is moving and

00:00:48.370 --> 00:00:50.280
evolving to keep up
with new UI patterns.

00:00:51.420 --> 00:00:54.420
ARIA can express the semantic UI
patterns which don't exist in HTML.

00:00:55.800 --> 00:00:58.400
This is where ARIA really
comes into its own.

00:00:58.400 --> 00:01:01.490
The checkbox example is
really reinventing the wheel.

00:01:01.490 --> 00:01:05.140
It's probably more work to create
a fully accessible custom checkbox

00:01:05.140 --> 00:01:08.400
then to add custom styling
to a native checkbox.

00:01:08.400 --> 00:01:11.710
But in many cases, ARIA allows
us to create accessible widgets

00:01:11.710 --> 00:01:13.690
which would not be
possible using plain HTML.

00:01:14.770 --> 00:01:18.230
This example shows a tree widget which
we could hypothetically create for

00:01:18.230 --> 00:01:19.920
navigating this course.

00:01:19.920 --> 00:01:24.600
We can take an unordered list and
add ARIA roles of tree, treeitem, and

00:01:24.600 --> 00:01:29.690
group and add ARIA-expanded attributes
to express the semantics at this widget.

00:01:30.795 --> 00:01:32.350
ARIA can add extra label and

00:01:32.350 --> 00:01:35.820
description text, which is only
exposed to assisted technology APIs.

00:01:36.820 --> 00:01:39.210
For example,
if I have an image only button

00:01:39.210 --> 00:01:43.180
which doesn't use an actual image
that I could put alt text on,

00:01:43.180 --> 00:01:46.560
I can use ARIA to provide
an accessible label for that button.

00:01:46.560 --> 00:01:50.300
ARIA can also expressed semantic
relationships between elements

00:01:50.300 --> 00:01:54.240
which go beyond standard DOM parent,
child, and sibling relationships.

00:01:55.400 --> 00:01:58.110
One example of a more complex
relationship is something like this

00:01:58.110 --> 00:01:59.740
controls that.

00:01:59.740 --> 00:02:03.150
In this case, we have a button which
controls whether a particular part of

00:02:03.150 --> 00:02:07.530
the page is visible or hidden in
the form of the disclosure widget.

00:02:07.530 --> 00:02:09.584
And ARIA can make part of the page live,

00:02:09.584 --> 00:02:13.140
that is inform assistive technology
right away when they change.

00:02:13.140 --> 00:02:14.560
In this case,

00:02:14.560 --> 00:02:18.020
we have an alert which a screen reader
might choose to immediately speak to

00:02:18.020 --> 00:02:19.940
the user interrupting
whatever else they're doing.

