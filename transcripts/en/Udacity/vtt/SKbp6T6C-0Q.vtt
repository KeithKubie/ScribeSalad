WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:02.860
So we've seen the basic looking at just the first

00:00:02.860 --> 00:00:06.200
letter does not work very well, doesn't use enough buckets.

00:00:06.200 --> 00:00:09.390
And it doesn't distribute the keys well. So now we're

00:00:09.390 --> 00:00:11.310
going to think about how to make a better hash

00:00:11.310 --> 00:00:14.360
function. So we want the same property we had before

00:00:14.360 --> 00:00:17.160
in the sense that it's one function that takes two

00:00:17.160 --> 00:00:20.630
inputs and that two inputs are the keyword which is

00:00:20.630 --> 00:00:24.940
a string and the number of buckets, which is a number.

00:00:24.940 --> 00:00:28.040
Those are the two inputs and the output is the

00:00:28.040 --> 00:00:31.700
hash value and it's in the range from zero to

00:00:31.700 --> 00:00:35.120
number of buckets minus one. And our goal is for

00:00:35.120 --> 00:00:39.030
these numbers to well distributed, so we can have any

00:00:39.030 --> 00:00:41.610
number of buckets we want. The keywords will be spread

00:00:41.610 --> 00:00:44.440
evenly among the buckets, and every time we hash the

00:00:44.440 --> 00:00:47.010
same keyword we'll get the same bucket. So, we'll know

00:00:47.010 --> 00:00:50.210
quickly where to find it. So in order to do better

00:00:50.210 --> 00:00:52.240
than we were doing before, we're going to need to look at more

00:00:52.240 --> 00:00:54.520
than just one letter of the keyword. If we look at just the

00:00:54.520 --> 00:00:58.410
first letter, we're not going to do better than having a limited number

00:00:58.410 --> 00:01:00.790
of buckets in a bad distribution. So, what we want to do is

00:01:00.790 --> 00:01:03.070
something that's going to look at all the letters of the keyword, not

00:01:03.070 --> 00:01:06.796
just the first letter. And based on all the letters, we'll decide their

00:01:06.796 --> 00:01:10.877
appropriate bucket. We saw that with lists, if we had a list of

00:01:10.877 --> 00:01:15.865
items, we could use the for loop construct to go through the elements

00:01:15.865 --> 00:01:19.227
in the list, like this. And this will go through each

00:01:19.227 --> 00:01:22.314
element in p, assigning it to the variable e and executing

00:01:22.314 --> 00:01:25.370
is whatever is in the block for each element of p.

00:01:25.370 --> 00:01:28.360
We can do something similar with strings, so if we have

00:01:28.360 --> 00:01:30.830
a string s, we can use the same construct to go

00:01:30.830 --> 00:01:33.966
through the characters in s. So each time we go through

00:01:33.966 --> 00:01:36.976
the loop, the value assigned to variable c will be a

00:01:36.976 --> 00:01:41.482
one letter string corresponding to each character in the string in order.

00:01:41.482 --> 00:01:43.407
So first it will have the value a, and then

00:01:43.407 --> 00:01:45.860
value b, and then value c, and then value d.

00:01:45.860 --> 00:01:47.472
So this gives us a way to go through all

00:01:47.472 --> 00:01:51.100
the elements in the string. And if you remember how we

00:01:51.100 --> 00:01:56.760
turned single letter strings into numbers and modular arithmetic, then

00:01:56.760 --> 00:01:58.970
I think you know enough to define a much better hash

00:01:58.970 --> 00:02:01.740
function. So for this quiz, your goal is to define

00:02:01.740 --> 00:02:06.650
a function hash_string that behaves like this. It takes a keyword,

00:02:06.650 --> 00:02:10.850
a number of buckets, and it gives it number, identifying the bucket

00:02:10.850 --> 00:02:13.670
where that keyword will belong. But instead of just using the first

00:02:13.670 --> 00:02:16.301
letter in the keyword, it's going to use all the letters. And produces

00:02:16.301 --> 00:02:18.070
as output, a single number that

00:02:18.070 --> 00:02:21.060
represents the bucket where that keyword belongs.

00:02:21.060 --> 00:02:22.740
And your goal is to do this in a way that depends

00:02:22.740 --> 00:02:26.070
on all the characters in the string, not just the first character.

00:02:26.070 --> 00:02:28.100
There are lots of ways to do this, so we're going to

00:02:28.100 --> 00:02:31.790
specify exactly what you should do. So what we want to do is make

00:02:31.790 --> 00:02:35.090
the output of hash string a function of all the characters.

00:02:35.090 --> 00:02:37.950
And we can think of that with modular arithmetic, that if we

00:02:37.950 --> 00:02:41.070
have a circle which is the size of the number of

00:02:41.070 --> 00:02:44.555
buckets, so this is going to go from 0 to the buckets minus

00:02:44.555 --> 00:02:46.970
1. But what we want to do for each character, we are

00:02:46.970 --> 00:02:50.140
going to start at 0 and for each character in the string, we

00:02:50.140 --> 00:02:54.730
are going to go around ord of that character, distance around the circle,

00:02:54.730 --> 00:02:56.820
and we are going to keep going. So each character we are going to

00:02:56.820 --> 00:02:59.170
go some distance around the circle, the circle can

00:02:59.170 --> 00:03:01.353
be any size depending on the number of buckets and

00:03:01.353 --> 00:03:05.700
we're going to keep going around the circle using modular arithmetic

00:03:05.700 --> 00:03:09.170
for each letter. And as we keep going, we can

00:03:09.170 --> 00:03:10.670
go lots and lots of times if it's a big

00:03:10.670 --> 00:03:14.355
word. Wherever we end up is going to be the

00:03:14.355 --> 00:03:19.067
bucket that we use. And let's say that's position 27,

00:03:19.067 --> 00:03:21.995
who knows where it is. So that's the idea and

00:03:21.995 --> 00:03:23.638
I'll give you a couple of examples so

00:03:23.638 --> 00:03:25.956
you know if you're implementing it the right way.

00:03:25.956 --> 00:03:29.544
Let's suppose we have as our string the single

00:03:29.544 --> 00:03:33.430
letter a, and we have 12 buckets. Well in

00:03:33.430 --> 00:03:35.710
that case we're going to have 12 buckets, so

00:03:35.710 --> 00:03:39.046
we wouldn't have 27 here. This is going to be,

00:03:39.046 --> 00:03:47.355
11 is the last bucket, the ord value of a is 97. So for a, what we would

00:03:47.355 --> 00:03:52.602
do is go around the circle eight times,

00:03:52.602 --> 00:03:58.008
because 97 is 12 times 8, and one more,

00:03:58.008 --> 00:04:04.040
because 97 is 12 times 8 plus 1. You don't actually have to

00:04:04.040 --> 00:04:07.360
go around the circle if you use the modulo that's what it will give you.

00:04:07.360 --> 00:04:12.424
And so the hash value for a should end up in bucket one. As another

00:04:12.424 --> 00:04:15.574
example, if we tried hash string where the string

00:04:15.574 --> 00:04:18.949
is the single letter b, also with 12 buckets, well

00:04:18.949 --> 00:04:21.949
that's going to also go around the circle eight

00:04:21.949 --> 00:04:24.837
times because the ord of b is 98. But it's

00:04:24.837 --> 00:04:27.996
going to end up in bucket two, since that's 96

00:04:27.996 --> 00:04:31.660
plus 2, which will end up in bucket two. If

00:04:31.660 --> 00:04:34.320
we change the number of buckets, the results will be

00:04:34.320 --> 00:04:37.430
different, so let's say, instead of having 12 buckets we

00:04:37.430 --> 00:04:42.190
have 13, and we tried hash_string on the

00:04:42.190 --> 00:04:47.250
single letter string a, with 13 buckets. The result there should end

00:04:47.250 --> 00:04:52.180
up being 6, and the reason it's 6 is because 97

00:04:52.180 --> 00:04:57.080
is equal to 13 times 7 plus

00:04:57.080 --> 00:05:02.490
6, so the size of the hash table matters, as well as the string. We don't want

00:05:02.490 --> 00:05:04.877
it to just work on single letter strings. With single

00:05:04.877 --> 00:05:07.900
letter strings, we are really getting the same thing we defined

00:05:07.900 --> 00:05:11.020
before, where it gets interesting is where we have multi letter

00:05:11.020 --> 00:05:14.460
strings. So let's look at a few examples like that. So

00:05:14.460 --> 00:05:17.360
where we can see the difference between what you are going to

00:05:17.360 --> 00:05:19.960
find at hash_string and the bad_hash_string we had

00:05:19.960 --> 00:05:23.870
before is once we have longer strings. So suppose we tried

00:05:23.870 --> 00:05:27.870
the string au, the ord of a was 97, and that,

00:05:27.870 --> 00:05:34.606
when we went around the circle, ended up at location 1. The ord of u, I

00:05:34.606 --> 00:05:41.607
can tell you, is 117. When we add those two, we get 214.

00:05:42.850 --> 00:05:48.470
And modulo the number of buckets, which is 12 here, we should get 10.

00:05:48.470 --> 00:05:53.090
So that string with two symbols doesn't end up in position one where the a would

00:05:53.090 --> 00:05:55.471
end up. It ends up in bucket ten, and

00:05:55.471 --> 00:05:59.293
as another example, we won't work through the details on

00:05:59.293 --> 00:06:01.867
this one, but you'll be able to test if

00:06:01.867 --> 00:06:05.611
your result is correct. If you try the string udacity,

00:06:05.611 --> 00:06:08.229
it should end up in the bucket sorry I

00:06:08.229 --> 00:06:11.804
forgot the input size, this is very important. We need

00:06:11.804 --> 00:06:14.339
two inputs to hash string, both the string and

00:06:14.339 --> 00:06:18.482
the number of buckets matter. So here, we're also assuming

00:06:18.482 --> 00:06:24.094
12 buckets, here we'll use 12 buckets again, the result should be

00:06:24.094 --> 00:06:26.919
11. So see if you can define a function hash_string that does

00:06:26.919 --> 00:06:29.880
this. And we want it to take these two inputs and produce

00:06:29.880 --> 00:06:32.830
a number that tells us what bucket that keyword should be in.

