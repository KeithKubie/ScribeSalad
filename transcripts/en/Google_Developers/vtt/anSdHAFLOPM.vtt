WEBVTT
Kind: captions
Language: en

00:00:00.600 --> 00:00:02.410
PAUL IRISH: So thank
you for joining us.

00:00:02.410 --> 00:00:04.590
We're going to be talking about
the Chrome Developer

00:00:04.590 --> 00:00:10.290
Tools and what sort of new
features are available.

00:00:10.290 --> 00:00:13.150
Covering everything that's kind
of happened in the past

00:00:13.150 --> 00:00:18.100
six months or anything that you
haven't known about, but

00:00:18.100 --> 00:00:19.010
good stuff.

00:00:19.010 --> 00:00:22.470
So the way that I want to get it
started is introducing who

00:00:22.470 --> 00:00:24.820
we have here in this Hangout.

00:00:24.820 --> 00:00:25.640
I'm Paul Irish.

00:00:25.640 --> 00:00:27.900
I'm on the Chrome Developer
relations team.

00:00:27.900 --> 00:00:31.590
And I like the Chrome Developer
tools quite a bit.

00:00:31.590 --> 00:00:35.750
We also have joining
us Pavel Feldman.

00:00:35.750 --> 00:00:40.080
Pavel is the tech lead of
Chrome Developer Tools.

00:00:43.504 --> 00:00:44.986
Say hello.

00:00:44.986 --> 00:00:46.200
PAVEL FELDMAN: Hey.

00:00:46.200 --> 00:00:48.700
PAUL IRISH: Cool.

00:00:48.700 --> 00:00:51.430
Also on the Chrome team,
we have Sam Dutton

00:00:51.430 --> 00:00:53.525
coming in from London.

00:00:53.525 --> 00:00:54.930
SAM DUTTON: How are
you doing, guys?

00:00:54.930 --> 00:00:55.600
Good to see you.

00:00:55.600 --> 00:00:56.650
PAUL IRISH: Nice.

00:00:56.650 --> 00:01:00.290
And also over there,
Peter Beverloo.

00:01:00.290 --> 00:01:02.545
PETER BEVERLOO: Hey,
good morning.

00:01:02.545 --> 00:01:03.990
PAUL IRISH: Nice.

00:01:03.990 --> 00:01:09.490
If you haven't checked out
peter.sh, it's a great blog

00:01:09.490 --> 00:01:12.590
coming with weekly updates on
what's happening inside Chrome

00:01:12.590 --> 00:01:15.270
and WebKit and the Chrome
Dev tools in particular.

00:01:15.270 --> 00:01:20.060
So that's a great source for
what's new and breaking in

00:01:20.060 --> 00:01:22.310
Chrome Dev Tools land.

00:01:22.310 --> 00:01:25.665
We also have with
us Alex Sexton.

00:01:25.665 --> 00:01:26.382
ALEX SEXTON: Howdy.

00:01:26.382 --> 00:01:29.140
PAUL IRISH: Alex is a JavaScript
and front-end

00:01:29.140 --> 00:01:33.520
developer down in
Austin, Texas.

00:01:33.520 --> 00:01:41.220
And we're looking to get one
more developer with us pretty

00:01:41.220 --> 00:01:42.760
soon, Paul Lewis.

00:01:42.760 --> 00:01:44.970
We hope to see him joining us.

00:01:44.970 --> 00:01:48.340
But we'll get started now.

00:01:48.340 --> 00:01:50.286
Nice.

00:01:50.286 --> 00:01:52.178
Is that Paul?

00:01:52.178 --> 00:01:53.026
PAUL LEWIS: Yo.

00:01:53.026 --> 00:01:53.890
PAUL IRISH: Oh, great.

00:01:53.890 --> 00:01:57.950
Paul, we were just finishing
up introductions.

00:01:57.950 --> 00:02:01.580
So Paul Lewis, based over in--

00:02:01.580 --> 00:02:02.890
you in the UK now?

00:02:02.890 --> 00:02:04.260
PAUL LEWIS: I'm in
London, yeah.

00:02:04.260 --> 00:02:05.990
PAUL IRISH: London, perfect.

00:02:05.990 --> 00:02:13.400
Paul is a WebGL, CSS3, 3D
transforms, GPU, JavaScript

00:02:13.400 --> 00:02:18.340
hacker, making cool, fun,
awesome, creative stuff.

00:02:18.340 --> 00:02:21.900
So the way that we're going to
go about this, we have a

00:02:21.900 --> 00:02:25.600
Google Moderator with a bunch
of questions that you could

00:02:25.600 --> 00:02:26.720
vote up and down.

00:02:26.720 --> 00:02:31.170
That you should see that in
the Google+ posts that we

00:02:31.170 --> 00:02:34.340
have. You can click over
there and vote up

00:02:34.340 --> 00:02:35.360
other people's questions.

00:02:35.360 --> 00:02:39.800
Vote down them if you don't want
to hear us cover that.

00:02:39.800 --> 00:02:45.010
And ask anything that you want
to get an answer to.

00:02:45.010 --> 00:02:48.365
And if that sounds good,
we'll get started.

00:02:51.610 --> 00:02:54.260
So in the Chrome Developer
Tools, I just

00:02:54.260 --> 00:02:55.780
have them open here.

00:02:55.780 --> 00:02:58.260
And we're going to walk through
some of the things

00:02:58.260 --> 00:03:00.510
that are new.

00:03:00.510 --> 00:03:05.470
One thing that I should point
out is we do have the ability

00:03:05.470 --> 00:03:09.190
to zoom the UI, which is really
handy for this use case

00:03:09.190 --> 00:03:10.330
of showing you guys.

00:03:10.330 --> 00:03:15.380
So now if you hit Command Plus,
Command Minus, it zooms

00:03:15.380 --> 00:03:16.130
the entire thing.

00:03:16.130 --> 00:03:20.100
This works out really well for
projecting or anything else.

00:03:23.820 --> 00:03:28.320
So if you haven't looked at
the Dev Tools in about six

00:03:28.320 --> 00:03:30.470
months, you might not have
noticed down in the very

00:03:30.470 --> 00:03:34.010
bottom right is a little
settings cog.

00:03:34.010 --> 00:03:38.590
And down here, the Chrome
Developer Tools' own settings.

00:03:41.800 --> 00:03:44.870
One of the nice things in here
is the ability to override the

00:03:44.870 --> 00:03:46.840
user agent.

00:03:46.840 --> 00:03:51.010
And so now we can set the user
agent to be one of any of

00:03:51.010 --> 00:03:56.270
these predefined other browsers
or define our own

00:03:56.270 --> 00:04:01.070
user agent that we want
Chrome to mask as.

00:04:01.070 --> 00:04:02.600
And so [INAUDIBLE]

00:04:02.600 --> 00:04:06.330
the navigator dot user agent
JavaScript property, but also

00:04:06.330 --> 00:04:09.740
the user agent that goes out
in the Request tab here.

00:04:09.740 --> 00:04:13.350
So it's a complete end to
end UA masking solution.

00:04:16.769 --> 00:04:20.170
Another setting right beneath
this, and this is brand new,

00:04:20.170 --> 00:04:22.560
is emulate touch events.

00:04:22.560 --> 00:04:26.860
And so if you've done mobile
work before, you might have

00:04:26.860 --> 00:04:30.740
been frustrated with the fact
that you can't do real touch

00:04:30.740 --> 00:04:33.050
events on desktop, and you
always have to be using a

00:04:33.050 --> 00:04:35.630
mobile device and fire
up your emulator.

00:04:35.630 --> 00:04:39.750
So now we can emulate touch
events right in Chrome.

00:04:39.750 --> 00:04:42.520
So to show off this, I'm going
to bring up a little demo.

00:04:46.810 --> 00:04:49.600
So this is just a little
canvas app.

00:04:49.600 --> 00:04:55.840
And as you touch it, it draws.

00:04:55.840 --> 00:04:59.180
Inside my browser right now, I'm
clicking all over and it's

00:04:59.180 --> 00:05:00.460
not doing anything.

00:05:00.460 --> 00:05:05.800
But if I bring up the Chrome
Developer Tools and I have the

00:05:05.800 --> 00:05:13.680
Dev Tools open with the settings
checked, all the

00:05:13.680 --> 00:05:17.410
touch start, touch end, touch
move events are emulated.

00:05:17.410 --> 00:05:22.630
So I get exactly the kind
of behavior that I want.

00:05:22.630 --> 00:05:23.880
Pretty nice.

00:05:28.370 --> 00:05:29.620
Good.

00:05:33.160 --> 00:05:36.220
Pavel, did you want to talk a
little bit about the color

00:05:36.220 --> 00:05:37.470
picker that's now available?

00:05:40.442 --> 00:05:44.040
PAVEL FELDMAN: Yeah, that's
something new that we have. It

00:05:44.040 --> 00:05:46.785
is interesting, because it's
a third party contribution.

00:05:46.785 --> 00:05:49.990
And we are happy about third
parties contributing code into

00:05:49.990 --> 00:05:52.560
the Web Inspector in
Chrome Dev Tools.

00:05:52.560 --> 00:05:57.165
So if you try to click the
little color swatch, the color

00:05:57.165 --> 00:05:58.820
picker will show up.

00:05:58.820 --> 00:06:04.940
It shows you the gradient and
you can adjust transparency

00:06:04.940 --> 00:06:06.400
through these [INAUDIBLE]

00:06:06.400 --> 00:06:07.730
channel.

00:06:07.730 --> 00:06:11.170
And as you are adjusting the
transparency, you'll see how

00:06:11.170 --> 00:06:15.740
the background is visible
through the

00:06:15.740 --> 00:06:19.100
color that you've chosen.

00:06:19.100 --> 00:06:20.400
So it's pretty essential.

00:06:28.140 --> 00:06:31.400
SAM DUTTON: Pavel, can you still
get at the selected for

00:06:31.400 --> 00:06:33.610
changing the representation
of the color?

00:06:33.610 --> 00:06:33.925
PAVEL FELDMAN: Right, right.

00:06:33.925 --> 00:06:36.770
The Control click will be
[INAUDIBLE] different formats.

00:06:36.770 --> 00:06:38.080
PAUL IRISH: Control click.

00:06:41.216 --> 00:06:42.518
I was wondering about that.

00:06:58.640 --> 00:07:00.550
Control click.

00:07:00.550 --> 00:07:03.180
PAVEL FELDMAN: Now Control click
on the swatch in the

00:07:03.180 --> 00:07:05.000
list down here.

00:07:05.000 --> 00:07:07.950
And the [INAUDIBLE] can adjust
this alpha slider, and you

00:07:07.950 --> 00:07:09.450
will see the background.

00:07:09.450 --> 00:07:11.370
Try adjusting this alpha
slider, and look

00:07:11.370 --> 00:07:12.720
at the color preview.

00:07:12.720 --> 00:07:14.570
You don't actually need to have
any [? background ?] yet.

00:07:14.570 --> 00:07:15.490
Just move this thing.

00:07:15.490 --> 00:07:17.390
Yeah, you will see a little
chessboard thingy.

00:07:17.390 --> 00:07:21.650
I don't need the color
in the preview.

00:07:21.650 --> 00:07:24.510
PAUL IRISH: Nice.

00:07:24.510 --> 00:07:27.860
So the Color Picker's been a big
request for a long time.

00:07:27.860 --> 00:07:31.450
So we're very happy to
have that available.

00:07:31.450 --> 00:07:36.190
So one of the things you might
have also noticed in this view

00:07:36.190 --> 00:07:44.100
is that the check boxes
are now on the left.

00:07:44.100 --> 00:07:48.020
So this has been a big request
for a long time, of these

00:07:48.020 --> 00:07:52.460
check boxes to disable these
styles have been on the right

00:07:52.460 --> 00:07:54.680
for the longest time.

00:07:54.680 --> 00:07:57.130
And a lot of people have
felt it makes more

00:07:57.130 --> 00:07:58.080
sense on the left.

00:07:58.080 --> 00:08:02.040
So now if you open a Chrome
Canary, they're on the left.

00:08:02.040 --> 00:08:05.260
So Pavel put this in
about last week.

00:08:05.260 --> 00:08:08.720
And we hope you'll like that.

00:08:08.720 --> 00:08:10.360
PAVEL FELDMAN: And it
was [INAUDIBLE]

00:08:10.360 --> 00:08:12.230
over a two-year struggle.

00:08:12.230 --> 00:08:16.420
This and the single
click, right.

00:08:16.420 --> 00:08:17.785
PAUL IRISH: Yeah, it's
a single click.

00:08:20.740 --> 00:08:23.200
For the longest time in the
Chrome Developer Tools if you

00:08:23.200 --> 00:08:26.570
want to change, for instance,
any of these properties, like

00:08:26.570 --> 00:08:29.680
I want to change font size from
small to large, I had to

00:08:29.680 --> 00:08:31.550
double click.

00:08:31.550 --> 00:08:33.520
And it would go into this
edit mode, and then I

00:08:33.520 --> 00:08:37.490
could change that.

00:08:37.490 --> 00:08:42.539
Now it's only a single click
to make that change.

00:08:42.539 --> 00:08:46.420
So it's a lot more malleable.

00:08:46.420 --> 00:08:48.710
It's very nice.

00:08:52.810 --> 00:08:54.060
Cool.

00:08:58.690 --> 00:09:00.440
Any newcomers?

00:09:00.440 --> 00:09:02.690
So we're just walking through
some of the features with

00:09:02.690 --> 00:09:06.300
Chrome Developer Tools
and the new stuff.

00:09:06.300 --> 00:09:07.700
We have a Google Moderator.

00:09:07.700 --> 00:09:13.090
And if you want to ask any
questions, please just load up

00:09:13.090 --> 00:09:15.650
questions or ask any new
ones over there.

00:09:15.650 --> 00:09:19.990
Sam, is there anything in the
Moderator that you think we

00:09:19.990 --> 00:09:22.220
should talk about right now?

00:09:22.220 --> 00:09:23.370
SAM DUTTON: Yeah,
there sure is.

00:09:23.370 --> 00:09:25.660
We've got a stack of stuff
coming in on Moderator.

00:09:25.660 --> 00:09:26.640
PAUL IRISH: Great.

00:09:26.640 --> 00:09:27.990
SAM DUTTON: Yeah, blimey.

00:09:27.990 --> 00:09:28.750
Where to start?

00:09:28.750 --> 00:09:30.050
OK, well I'll start
at the top.

00:09:30.050 --> 00:09:32.600
The most popular question
we've had so

00:09:32.600 --> 00:09:34.460
far, I think, is--

00:09:34.460 --> 00:09:39.480
well it's a big one, asking if
we could walk through tracking

00:09:39.480 --> 00:09:41.570
down a memory leak in a
page or an extension

00:09:41.570 --> 00:09:43.660
using the Heap Profiler.

00:09:43.660 --> 00:09:46.310
PAUL IRISH: Sure, good one.

00:09:46.310 --> 00:09:47.560
SAM DUTTON: Go for it.

00:09:51.800 --> 00:09:54.710
PAUL IRISH: So I'm going
to bring up this.

00:09:54.710 --> 00:09:59.070
Pavel, feel free to interrupt
me as I go along with this.

00:09:59.070 --> 00:10:00.910
We have a little
test page here.

00:10:00.910 --> 00:10:06.150
And if we look at the source of
the test page, we've got a

00:10:06.150 --> 00:10:07.120
few things going on.

00:10:07.120 --> 00:10:08.780
We have an array.

00:10:08.780 --> 00:10:12.080
And we have a button.

00:10:12.080 --> 00:10:15.080
And when it's clicked, we're
going to do this.

00:10:15.080 --> 00:10:19.070
We're going to create a new P.
And we're going to add that

00:10:19.070 --> 00:10:20.880
into the page.

00:10:20.880 --> 00:10:24.210
And add that into our
holding array.

00:10:24.210 --> 00:10:26.970
And after a little bit,
we're going clear

00:10:26.970 --> 00:10:29.240
out the page's content.

00:10:29.240 --> 00:10:33.790
So what this looks
like is that.

00:10:33.790 --> 00:10:35.100
Just adding it.

00:10:35.100 --> 00:10:37.880
The page is being cleared.

00:10:37.880 --> 00:10:45.290
But what you'll notice in
something like Timeline is

00:10:45.290 --> 00:10:50.700
that the memory usage just
continues to go up.

00:10:50.700 --> 00:10:54.800
And the garbage collection
never cuts that

00:10:54.800 --> 00:10:58.570
memory usage back down.

00:10:58.570 --> 00:11:01.840
And this right here is an
indication that you might be

00:11:01.840 --> 00:11:04.980
encountering a memory leak.

00:11:04.980 --> 00:11:11.310
So I'll try and go through
how we can identify

00:11:11.310 --> 00:11:12.560
where this leak is.

00:11:15.460 --> 00:11:18.750
So we go over to Profiles,
and we're going

00:11:18.750 --> 00:11:20.370
to take a Heap Snapshot.

00:11:30.995 --> 00:11:32.990
PAVEL FELDMAN: Didn't notice
it if you start the

00:11:32.990 --> 00:11:35.545
Timeline, did you?

00:11:35.545 --> 00:11:37.640
PAUL IRISH: Timeline
is still recording.

00:11:41.920 --> 00:11:43.590
OK, Snapshot done.

00:12:06.793 --> 00:12:08.690
ALEX SEXTON: Perhaps there's
a memory leak in

00:12:08.690 --> 00:12:09.680
the Snapshot tool.

00:12:09.680 --> 00:12:10.930
PAUL IRISH: Oh.

00:12:14.890 --> 00:12:18.580
I'm going to try and go
ahead with the action.

00:12:18.580 --> 00:12:21.600
So if we've identified in the
Timeline tool that there is

00:12:21.600 --> 00:12:26.625
increasing memory usage,
I'm now going to- oh,

00:12:26.625 --> 00:12:29.710
we have zero bytes.

00:12:34.020 --> 00:12:37.926
I might have to try this over in
Chrome Stable in a moment.

00:12:37.926 --> 00:12:38.750
PAVEL FELDMAN: No, no.

00:12:38.750 --> 00:12:39.670
Go back to the Canary.

00:12:39.670 --> 00:12:40.720
PAUL IRISH: You like it?

00:12:40.720 --> 00:12:41.480
PAVEL FELDMAN: Yeah.

00:12:41.480 --> 00:12:43.870
Just try clearing it up and
collecting another one.

00:12:43.870 --> 00:12:44.470
Don't do anything.

00:12:44.470 --> 00:12:45.720
Just collect [INAUDIBLE]

00:12:52.420 --> 00:12:54.030
PAUL IRISH: Ooh, that's
much better.

00:13:01.886 --> 00:13:04.259
PAVEL FELDMAN: I wonder how
much you have used.

00:13:08.696 --> 00:13:11.420
PAUL IRISH: How much what?

00:13:11.420 --> 00:13:12.940
PAVEL FELDMAN: How
much Heap site?

00:13:12.940 --> 00:13:14.720
How big Heap is?

00:13:14.720 --> 00:13:17.000
Because it takes too long.

00:13:17.000 --> 00:13:20.950
It should take this much time
for the Gmail, not for the say

00:13:20.950 --> 00:13:21.610
hello thingy.

00:13:21.610 --> 00:13:22.326
PAUL IRISH: Ouch.

00:13:22.326 --> 00:13:23.576
Yeah.

00:13:30.320 --> 00:13:32.300
Let's try one more.

00:13:41.620 --> 00:13:42.770
So I'm going to give
this a shot.

00:13:42.770 --> 00:13:44.975
I'm going to hit the
button five times.

00:13:48.390 --> 00:13:50.285
And we're going to record
another Heap Snapshot.

00:13:56.420 --> 00:13:58.800
And then we're going to go
over to comparison mode.

00:14:09.560 --> 00:14:11.780
Pavel, are we seeing
what we want?

00:14:11.780 --> 00:14:13.740
PAVEL FELDMAN: No.

00:14:13.740 --> 00:14:16.730
And this doesn't look
like Stable to me.

00:14:16.730 --> 00:14:17.030
Is it?

00:14:17.030 --> 00:14:18.500
PAUL IRISH: No, it's
not Stable.

00:14:27.249 --> 00:14:28.570
PAVEL FELDMAN: Now that's
a [INAUDIBLE]

00:14:36.094 --> 00:14:39.070
PAUL IRISH: All right,
over in Stable.

00:14:39.070 --> 00:14:43.210
One two, three, four, five.

00:14:43.210 --> 00:14:44.460
Another Snapshot.

00:14:48.380 --> 00:14:52.400
Clicking over to the second
Snapshot and changing our mode

00:14:52.400 --> 00:14:53.650
to comparison.

00:15:10.820 --> 00:15:12.070
ALEX SEXTON: Yay.

00:15:14.368 --> 00:15:15.618
PAUL IRISH: It's good.

00:15:27.810 --> 00:15:29.060
Pavel.

00:15:32.399 --> 00:15:33.420
PAVEL FELDMAN: Don't
look at me.

00:15:33.420 --> 00:15:36.412
You have all of these chaps
doing something to the left.

00:15:36.412 --> 00:15:37.662
PAUL IRISH: Something.

00:15:40.060 --> 00:15:42.640
Something going on.

00:15:42.640 --> 00:15:54.570
So what I'm used to seeing is
capturing a delta of five.

00:15:54.570 --> 00:15:59.660
Associating my five clicks with
five new items and being

00:15:59.660 --> 00:16:01.445
able to track--

00:16:05.420 --> 00:16:06.910
it's actually a paragraph
element--

00:16:09.840 --> 00:16:13.070
paragraph element back to
that holding array.

00:16:16.170 --> 00:16:17.270
Ah, here we go.

00:16:17.270 --> 00:16:18.520
Yep.

00:16:20.820 --> 00:16:23.660
So here we are basically seeing
the paragraph elements

00:16:23.660 --> 00:16:28.350
that were created and their
retaining path back to

00:16:28.350 --> 00:16:29.800
holding down here.

00:16:32.460 --> 00:16:39.500
So essentially tracking through
the Timeline tool.

00:16:39.500 --> 00:16:40.750
[INAUDIBLE]

00:16:53.770 --> 00:16:57.415
PAUL IRISH: We good?

00:16:57.415 --> 00:16:57.912
Nice.

00:16:57.912 --> 00:16:59.240
SAM DUTTON: You're
back on air.

00:17:02.390 --> 00:17:03.640
PAUL IRISH: Good.

00:17:06.710 --> 00:17:11.880
All right, so I'm going to move
on from memory as it gets

00:17:11.880 --> 00:17:13.130
pretty fun.

00:17:19.150 --> 00:17:20.305
PAVEL FELDMAN: [INAUDIBLE]

00:17:20.305 --> 00:17:21.140
or not?

00:17:21.140 --> 00:17:22.140
Did he close it?

00:17:22.140 --> 00:17:26.651
PAUL IRISH: I think I have it.

00:17:26.651 --> 00:17:29.370
PAVEL FELDMAN: So I
can go real quick

00:17:29.370 --> 00:17:30.550
through the actual scenario.

00:17:30.550 --> 00:17:32.970
So what you do is you
take a Snapshot.

00:17:32.970 --> 00:17:35.955
And then you do a set of
sections that should result in

00:17:35.955 --> 00:17:38.000
a zero sum, so that you create

00:17:38.000 --> 00:17:40.300
something and discard something.

00:17:40.300 --> 00:17:43.846
And you expect no objects to
be retained in the memory.

00:17:43.846 --> 00:17:48.030
And then you compare those
Snapshots and see the deltas.

00:17:48.030 --> 00:17:51.130
And if the delta is positive,
it means that objects with

00:17:51.130 --> 00:17:54.280
corresponding classes are
still in the memory.

00:17:54.280 --> 00:17:59.310
And expanding these classes and
clicking on the instances

00:17:59.310 --> 00:18:03.810
will show retaining trees,
the retaining paths, the

00:18:03.810 --> 00:18:07.470
JavaScript path that is
retaining this very object.

00:18:07.470 --> 00:18:11.010
And depending on the version of
Chrome that you're running,

00:18:11.010 --> 00:18:16.450
if you look at this list and
find detached DOM nodes row in

00:18:16.450 --> 00:18:18.605
this very table--

00:18:18.605 --> 00:18:20.270
do you have it there?

00:18:20.270 --> 00:18:24.030
Try sorting by alphabetically
and going to the

00:18:24.030 --> 00:18:25.800
detached DOM something.

00:18:25.800 --> 00:18:28.260
It's a top-level entry.

00:18:35.110 --> 00:18:36.360
No, you don't have it?

00:18:39.520 --> 00:18:46.100
Try going from conversion to the
summary just for a second.

00:18:46.100 --> 00:18:50.890
I'm bringing it up because
you can start with the--

00:18:50.890 --> 00:18:52.140
do you have detached
DOM nodes?

00:18:54.930 --> 00:18:56.420
PAUL IRISH: Yep.

00:18:56.420 --> 00:18:58.550
PAVEL FELDMAN: So there's
a special row for

00:18:58.550 --> 00:19:00.150
detached DOM trees.

00:19:00.150 --> 00:19:05.750
And If you expect no DOM nodes
to be detached from your tree,

00:19:05.750 --> 00:19:07.280
you start looking in here.

00:19:07.280 --> 00:19:10.500
And if you see some, it means
that these are the DOM

00:19:10.500 --> 00:19:13.220
fragments that are retained
by the JavaScript.

00:19:13.220 --> 00:19:15.730
And that's pretty much the first
thing you do when you

00:19:15.730 --> 00:19:16.710
find the memory.

00:19:16.710 --> 00:19:21.305
Because all your DOM nodes are
either on the screen or in the

00:19:21.305 --> 00:19:23.550
caches that you are aware of.

00:19:23.550 --> 00:19:28.760
And Paul has shown the generic
Profiler capabilities.

00:19:28.760 --> 00:19:31.040
But Browser is not
only JavaScript.

00:19:31.040 --> 00:19:32.140
It is also DOM.

00:19:32.140 --> 00:19:35.900
And those two are bound in
a sophisticated manner.

00:19:35.900 --> 00:19:41.080
So to assess this binding and
see if there memory leaks on

00:19:41.080 --> 00:19:45.470
the boundary between
the DOM and

00:19:45.470 --> 00:19:47.130
JavaScript, you look in here.

00:19:53.230 --> 00:19:55.290
SAM DUTTON: So just to get
that straight, a really

00:19:55.290 --> 00:19:59.580
standard process for checking
for DOM leaks is, take a

00:19:59.580 --> 00:20:04.520
Snapshot, do something, take a
Snapshot again, do comparison,

00:20:04.520 --> 00:20:06.500
and then look for, what
is it, detached DOM

00:20:06.500 --> 00:20:07.550
tree at that point?

00:20:07.550 --> 00:20:09.849
PAVEL FELDMAN: Well, in the
generic case, you just look

00:20:09.849 --> 00:20:12.130
for the class names
for [INAUDIBLE]

00:20:12.130 --> 00:20:14.030
object in your model.

00:20:14.030 --> 00:20:16.542
So if you are writing
a Gmail [INAUDIBLE]

00:20:16.542 --> 00:20:20.260
conversation [INAUDIBLE], and if
you see an increase in the

00:20:20.260 --> 00:20:22.680
number of threads or
conversations where you don't

00:20:22.680 --> 00:20:25.360
expect it to, you start with
these large objects.

00:20:25.360 --> 00:20:29.860
If you don't have any clue on
the large object of your

00:20:29.860 --> 00:20:32.890
model, you start with the DOM
binding, because that's where

00:20:32.890 --> 00:20:35.980
the probability of the leak
is extremely high.

00:20:38.752 --> 00:20:40.002
SAM DUTTON: Thanks.

00:20:42.952 --> 00:20:46.560
PAUL IRISH: So while we're
looking at JavaScript, I want

00:20:46.560 --> 00:20:48.750
to show some of the new stuff
that we have for kind of

00:20:48.750 --> 00:20:53.425
navigating around the JavaScript
that you have. I'm

00:20:53.425 --> 00:20:56.200
going to bring up this page.

00:20:56.200 --> 00:21:00.530
So over in the Scripts panel, if
you open it, you might see

00:21:00.530 --> 00:21:01.870
something like this.

00:21:01.870 --> 00:21:07.210
And in the left-hand side is
the Scripts Navigator.

00:21:07.210 --> 00:21:10.025
And by default, it's in
a temporal state.

00:21:10.025 --> 00:21:13.300
But you can click this to make
sure that it's always there

00:21:13.300 --> 00:21:15.620
and permanent.

00:21:15.620 --> 00:21:17.840
But below, you're going to see
all your active scripts on the

00:21:17.840 --> 00:21:21.100
page sorted by origin
and folder.

00:21:21.100 --> 00:21:23.930
And anything coming in from
your Chrome extensions is

00:21:23.930 --> 00:21:25.570
going to be separated out now.

00:21:25.570 --> 00:21:29.875
So it's a lot easier and cleaner
to see what's active.

00:21:29.875 --> 00:21:31.270
ALEX SEXTON: Yay!

00:21:31.270 --> 00:21:32.821
PAUL IRISH: It's great, yeah.

00:21:35.650 --> 00:21:39.190
Another nice way to look through
any active scripts

00:21:39.190 --> 00:21:44.280
that you have is hitting Command
O. So Command O will

00:21:44.280 --> 00:21:48.540
bring up the Go To Resource
little navigator.

00:21:48.540 --> 00:21:55.450
And I can type out any portion
of the file name and navigate

00:21:55.450 --> 00:21:56.700
directly into that.

00:21:59.320 --> 00:22:03.254
PAVEL FELDMAN: I think in
[INAUDIBLE] routines I think

00:22:03.254 --> 00:22:04.877
you can do these [INAUDIBLE]

00:22:07.580 --> 00:22:10.670
type first two letters,
[INAUDIBLE]

00:22:10.670 --> 00:22:13.430
case large name, and
it will match it.

00:22:13.430 --> 00:22:16.482
You don't have those because
[INAUDIBLE].

00:22:16.482 --> 00:22:17.732
PAUL IRISH: Yeah, that's true.

00:22:24.910 --> 00:22:26.160
Must have been a scripts
[INAUDIBLE].

00:22:30.730 --> 00:22:38.322
And so within a script, so I
could beautify it down here.

00:22:38.322 --> 00:22:41.810
And I get some sense, and
I can scroll around.

00:22:41.810 --> 00:22:45.500
I can hit Command L and
go to a specific line.

00:22:45.500 --> 00:22:50.070
But now I can also hit Command
Shift O and navigate by

00:22:50.070 --> 00:22:51.510
function name.

00:22:51.510 --> 00:22:58.710
So I can jump directly to my
siblings method of jQuery or

00:22:58.710 --> 00:22:59.520
anything else.

00:22:59.520 --> 00:23:07.700
So having this really easy way
to jump between my function

00:23:07.700 --> 00:23:10.620
definitions saves quite a bit
of time in navigating your

00:23:10.620 --> 00:23:12.740
scripts and then placing
[INAUDIBLE] points or doing

00:23:12.740 --> 00:23:13.990
your debugging.

00:23:17.550 --> 00:23:20.940
One of the things that I think
is also really nice when it

00:23:20.940 --> 00:23:26.350
comes to JavaScript debugging is
being able to walk through

00:23:26.350 --> 00:23:30.970
your code in a very large view
and seeing your page.

00:23:30.970 --> 00:23:32.700
And so one of the new things
that you have in the Chrome

00:23:32.700 --> 00:23:36.100
Dev Tools is the ability to
dock all the tools to the

00:23:36.100 --> 00:23:37.650
right-hand side.

00:23:37.650 --> 00:23:39.390
So now I can check that.

00:23:45.055 --> 00:23:49.010
I'll even bring that back.

00:23:49.010 --> 00:23:54.414
So now I have my page, my
code over on this side.

00:23:54.414 --> 00:24:00.460
And I can work out exactly
what's going on, what the

00:24:00.460 --> 00:24:01.710
behavior is.

00:24:06.800 --> 00:24:09.970
Right beneath that
is Disable Cache.

00:24:09.970 --> 00:24:14.440
And Disable Cache will disable
the disk cache.

00:24:14.440 --> 00:24:17.350
So Chrome is actually very
aggressive when it comes to

00:24:17.350 --> 00:24:20.710
caching, because it likes
things to be fast. But

00:24:20.710 --> 00:24:23.970
sometimes as a developer, that
caching works against you.

00:24:23.970 --> 00:24:27.486
So Disable Cache will just
bypass the disk cache.

00:24:27.486 --> 00:24:30.605
So you're always getting
the freshest resources.

00:24:33.870 --> 00:24:40.960
Pavel, so correct me if I'm
wrong, this cache affects only

00:24:40.960 --> 00:24:45.550
this current page, because it's
only enabled when I have

00:24:45.550 --> 00:24:47.240
the Dev Tools open, right?

00:24:47.240 --> 00:24:48.552
PAVEL FELDMAN: Right.

00:24:48.552 --> 00:24:51.760
PAUL IRISH: So if you have that
checked, you close off

00:24:51.760 --> 00:24:57.170
Dev Tools, your cache
is now functioning

00:24:57.170 --> 00:24:59.320
as it normally should.

00:24:59.320 --> 00:25:01.810
So you have to have the Chrome
Dev Tools open for this to

00:25:01.810 --> 00:25:03.060
take place.

00:25:06.672 --> 00:25:09.110
ALEX SEXTON: I wanted to
interject a little bit.

00:25:09.110 --> 00:25:12.830
One thing I do a lot in my
development is actually

00:25:12.830 --> 00:25:16.600
override hosts and host files
and try to do local

00:25:16.600 --> 00:25:20.120
development against
servers that way.

00:25:20.120 --> 00:25:25.460
So I also have to clear often
my DNS cache and sometimes

00:25:25.460 --> 00:25:26.900
even my socket cache.

00:25:26.900 --> 00:25:31.040
And you can get to that through
the Chrome protocol

00:25:31.040 --> 00:25:35.460
net dash internals and clear
it in the DNS there.

00:25:35.460 --> 00:25:36.950
PAUL IRISH: Yeah, that's
a good one.

00:25:36.950 --> 00:25:42.140
Go into About About, you can
see all the Chrome internal

00:25:42.140 --> 00:25:43.920
diagnostics pages.

00:25:43.920 --> 00:25:46.570
[? AV ?] cache internals is a
really good one where you can

00:25:46.570 --> 00:25:49.670
remove any existing application
caches that you

00:25:49.670 --> 00:25:52.580
have. Good if you're
doing offline work.

00:25:52.580 --> 00:25:56.070
Net internals is a pretty
significant internal

00:25:56.070 --> 00:25:59.430
diagnostic page where you can
see a lot of things going on

00:25:59.430 --> 00:26:01.940
with sockets and DNS.

00:26:01.940 --> 00:26:04.065
So it's a good call, Alex.

00:26:13.220 --> 00:26:16.730
Should we take another question
from the Moderator?

00:26:16.730 --> 00:26:18.800
SAM DUTTON: Yeah,
let's do that.

00:26:18.800 --> 00:26:20.280
Let's have a look and see.

00:26:20.280 --> 00:26:25.624
I'll tell you, today
was talking about--

00:26:25.624 --> 00:26:28.780
let me just find the
questions here.

00:26:28.780 --> 00:26:34.770
Let me just find the right
question from Pat in Auckland.

00:26:34.770 --> 00:26:36.930
This question actually we were
asked today at a Dev Tools

00:26:36.930 --> 00:26:41.425
presentation was, is there a
plan, something on the Dev

00:26:41.425 --> 00:26:44.040
Tools roadmap to either directly
support or some other

00:26:44.040 --> 00:26:46.890
way facilitate extensions,
which

00:26:46.890 --> 00:26:50.670
allow less SASS debugging?

00:26:50.670 --> 00:26:55.960
So Pat's thinking of something
like FireSass for FireFox.

00:26:55.960 --> 00:26:58.090
Says I've heard about
source mapping.

00:26:58.090 --> 00:27:01.680
But from what I understand,
that only applies to JS.

00:27:04.756 --> 00:27:06.925
PAVEL FELDMAN: Yeah,
that is correct.

00:27:06.925 --> 00:27:11.570
And we are currently not working
on last SASS support.

00:27:11.570 --> 00:27:14.250
It's a bit more than source
maps for CSS.

00:27:14.250 --> 00:27:18.180
Because what we would like to
see is actually your variables

00:27:18.180 --> 00:27:21.400
here make sense on the
right-hand side So that you

00:27:21.400 --> 00:27:23.350
can edit them as
in the source.

00:27:23.350 --> 00:27:28.330
And they would take immediate
action in the browser, which

00:27:28.330 --> 00:27:32.220
enables the transformation from
the source to the browser

00:27:32.220 --> 00:27:34.340
terms and mapping things back.

00:27:34.340 --> 00:27:39.800
So it's a bit more complex than
basically mapping the

00:27:39.800 --> 00:27:43.195
locations in the minified
and non-minified script.

00:27:43.195 --> 00:27:44.810
More work.

00:27:44.810 --> 00:27:50.510
But as you probably know, WebKit
is moving forward with

00:27:50.510 --> 00:27:55.821
supporting many of these
features natively.

00:27:55.821 --> 00:27:57.900
And we will have no
option other than

00:27:57.900 --> 00:28:00.230
supporting them in the UI.

00:28:00.230 --> 00:28:04.500
And once they are in the UI, we
can think about supporting

00:28:04.500 --> 00:28:05.600
the mapping.

00:28:05.600 --> 00:28:07.408
But [INAUDIBLE].

00:28:07.408 --> 00:28:09.040
PAUL IRISH: Yeah.

00:28:09.040 --> 00:28:14.230
So there's been a spec published
on CSS hierarchies,

00:28:14.230 --> 00:28:16.390
which is like your selector
hierarchy if you're

00:28:16.390 --> 00:28:18.490
using SASS or LESS.

00:28:18.490 --> 00:28:21.720
Also CSS Mixins, there's
a spec published.

00:28:21.720 --> 00:28:27.420
And so WebKit is very interested
in baking that

00:28:27.420 --> 00:28:29.780
right into the platform
as well.

00:28:29.780 --> 00:28:32.240
But since we brought up
source maps, I was

00:28:32.240 --> 00:28:33.490
going to show that.

00:28:41.030 --> 00:28:42.820
This is source maps.

00:28:42.820 --> 00:28:46.900
And the best way to demonstrate
what they do is

00:28:46.900 --> 00:28:48.050
with this little demo.

00:28:48.050 --> 00:28:51.230
So I have the small little
app with colors.

00:28:51.230 --> 00:28:53.480
And as I click the colors,
we're just changing the

00:28:53.480 --> 00:28:54.690
background.

00:28:54.690 --> 00:28:56.275
This is easy enough.

00:28:56.275 --> 00:29:01.810
If I view source of this app,
looks down at the bottom like

00:29:01.810 --> 00:29:04.370
I commented out my original
source files, and I'm just

00:29:04.370 --> 00:29:08.510
including my compiled JS, which
is a bunch of minified

00:29:08.510 --> 00:29:10.670
JavaScripts.

00:29:10.670 --> 00:29:16.040
So this happens a lot when
you're in a situation where

00:29:16.040 --> 00:29:21.550
you are looking in scripts and
you open up compile.js, and

00:29:21.550 --> 00:29:23.250
it's minified.

00:29:23.250 --> 00:29:26.690
And you want to debug
what's going on.

00:29:26.690 --> 00:29:30.000
Now I can beautify it.

00:29:30.000 --> 00:29:34.190
But I still have short
variable names.

00:29:34.190 --> 00:29:35.600
So that's not working
out to well.

00:29:38.600 --> 00:29:42.880
But source maps give us
a lot of power here.

00:29:42.880 --> 00:29:47.790
So if you notice down at the
bottom of this file is a

00:29:47.790 --> 00:29:51.510
reference to source
map dot JSON.

00:29:51.510 --> 00:29:52.760
Now if I bring that up.

00:29:55.210 --> 00:30:04.435
So I think it's in
that JS folder.

00:30:08.500 --> 00:30:13.210
So this is just a JSON file
which maps the identifiers of

00:30:13.210 --> 00:30:16.570
the minified script back
to the original script.

00:30:16.570 --> 00:30:19.720
And it's also referencing the
original source files.

00:30:19.720 --> 00:30:24.330
So what this allows me to do
is instead of seeing this

00:30:24.330 --> 00:30:28.220
compiled JavaScript here in the
Dev Tools, if I open up my

00:30:28.220 --> 00:30:31.070
settings and enable
source maps--

00:30:31.070 --> 00:30:32.320
I'm going to refresh the page.

00:30:35.490 --> 00:30:41.600
And now, instead of seeing
compile dot JS, I see script

00:30:41.600 --> 00:30:47.370
and set up and to my original
jQuery unminified.

00:30:47.370 --> 00:30:52.220
So here I'm mapping my minified
JavaScript directly

00:30:52.220 --> 00:30:55.450
back to my original files.

00:30:55.450 --> 00:31:03.830
And I can set break points in
this and have it work exactly

00:31:03.830 --> 00:31:05.420
like you want.

00:31:05.420 --> 00:31:10.620
So this is the kind of base way
of looking at the future

00:31:10.620 --> 00:31:14.970
of, I can take compiled
JavaScript and map that back

00:31:14.970 --> 00:31:20.420
to my original source files,
however many there may be.

00:31:20.420 --> 00:31:22.470
But source maps empower
a lot more than that.

00:31:22.470 --> 00:31:24.740
For instance, CoffeeScripts--

00:31:24.740 --> 00:31:28.390
being able to map your compiled
JavaScript back to

00:31:28.390 --> 00:31:30.710
your Coffescript so that
you can actually debug

00:31:30.710 --> 00:31:34.320
CoffeeScript right here
in Chrome Dev Tools.

00:31:34.320 --> 00:31:35.920
Source maps enables this.

00:31:35.920 --> 00:31:38.840
And there's a few patches
waiting on the CoffeeScript

00:31:38.840 --> 00:31:40.890
project to accept.

00:31:40.890 --> 00:31:45.980
And so hopefully we'll be able
to see real debugging instead

00:31:45.980 --> 00:31:47.990
the Dev Tools of CoffeeScript
coming soon.

00:31:50.700 --> 00:31:54.180
ALEX SEXTON: Does Google closure
advanced compilation

00:31:54.180 --> 00:31:55.900
support source maps yet?

00:31:55.900 --> 00:31:57.240
I know it's intending to.

00:32:02.545 --> 00:32:03.795
PAUL IRISH: As far
as I know, yes.

00:32:08.214 --> 00:32:13.080
I don't think I have this
available too much.

00:32:13.080 --> 00:32:15.330
PAVEL FELDMAN: So we've been
working together with them on

00:32:15.330 --> 00:32:15.910
the format.

00:32:15.910 --> 00:32:18.650
And they are supposed
to [INAUDIBLE]

00:32:18.650 --> 00:32:20.010
this format.

00:32:20.010 --> 00:32:24.040
It's V3, so that's the one
we support in Dev Tools.

00:32:26.970 --> 00:32:29.750
PAUL IRISH: And if you can read
this, this is kind of how

00:32:29.750 --> 00:32:31.000
it works with the compiler.

00:32:33.460 --> 00:32:36.390
So using closure compiler,
we run it.

00:32:36.390 --> 00:32:38.720
We specify our original
source files.

00:32:38.720 --> 00:32:40.250
We say that we want to
create a source map.

00:32:40.250 --> 00:32:41.450
And we're going to use V3.

00:32:41.450 --> 00:32:43.060
And then we're going
to output it.

00:32:43.060 --> 00:32:50.760
And so this will generate the
source maps and get you off

00:32:50.760 --> 00:32:52.010
looking in a good path.

00:33:00.490 --> 00:33:02.120
DOM undo and redo.

00:33:02.120 --> 00:33:03.900
Pavel, you added
this recently.

00:33:03.900 --> 00:33:05.770
Do you want to walk us through
how this works?

00:33:05.770 --> 00:33:09.870
PAVEL FELDMAN: Yeah, we should
all give it a try, do some

00:33:09.870 --> 00:33:12.550
stress in it to see if it
is crashing or not.

00:33:12.550 --> 00:33:15.930
Because it is a fairly
complex thing.

00:33:15.930 --> 00:33:20.050
So the way it works is DOM
actions, editing attributes,

00:33:20.050 --> 00:33:24.520
[? remaining ?] nodes, editing
as HTML Oracle undoable as

00:33:24.520 --> 00:33:29.110
well as editing CSS properties
for adding new rules and

00:33:29.110 --> 00:33:29.840
modifying selectors.

00:33:29.840 --> 00:33:32.150
Pretty much everything you can
see in the elements panel

00:33:32.150 --> 00:33:34.770
should be undoable
and redoable.

00:33:34.770 --> 00:33:38.216
And when it does so,
it preserves

00:33:38.216 --> 00:33:40.480
the DOM nodes instances.

00:33:40.480 --> 00:33:44.660
So it's not simply installing an
old markup or a new markup

00:33:44.660 --> 00:33:46.630
and loses all the [? page's ?]
state.

00:33:46.630 --> 00:33:49.550
But it is doing it in a
[INAUDIBLE] manner so that all

00:33:49.550 --> 00:33:53.760
the references to your nodes
from JavaScript will still

00:33:53.760 --> 00:33:55.960
basically be valid.

00:33:55.960 --> 00:34:00.600
And the other addition to that
is that edit as HTML is now

00:34:00.600 --> 00:34:02.320
super smart.

00:34:02.320 --> 00:34:04.610
When you're editing, you
can edit the entire

00:34:04.610 --> 00:34:05.760
body of your page.

00:34:05.760 --> 00:34:09.230
And it will only patch the
nodes that have changed,

00:34:09.230 --> 00:34:11.639
preserving identities
of the other ones.

00:34:11.639 --> 00:34:18.010
So we can open Gmail and edit
something in the body and

00:34:18.010 --> 00:34:20.280
commit the edit and all
the threads are

00:34:20.280 --> 00:34:22.349
still going to be alive.

00:34:22.349 --> 00:34:25.250
And it's all undoable
and redoable.

00:34:25.250 --> 00:34:25.989
PAUL IRISH: Right.

00:34:25.989 --> 00:34:32.120
So if you have event handlers
bound to part of your nodes,

00:34:32.120 --> 00:34:37.120
you can still come up and edit
this entire body as HTML.

00:34:37.120 --> 00:34:38.400
Make your changes.

00:34:38.400 --> 00:34:42.250
And your DOM nodes are
all still fine.

00:34:42.250 --> 00:34:47.909
So pretty sophisticated stuff
going under the hood there.

00:34:47.909 --> 00:34:49.159
A very powerful feature.

00:34:51.480 --> 00:34:54.510
But what this manifest
says in an easy way.

00:34:54.510 --> 00:34:58.100
So let's say I just want to
test some things out.

00:34:58.100 --> 00:35:02.250
And I want to see what this
looks like without the H1.

00:35:02.250 --> 00:35:04.230
I'm going to delete.

00:35:04.230 --> 00:35:07.760
And that works fine, but maybe
I want to bring it back.

00:35:07.760 --> 00:35:14.410
Just hit undo, like Command
Z, and bring it back.

00:35:14.410 --> 00:35:18.420
Or Command Shift Z to re that.

00:35:18.420 --> 00:35:23.660
So any changes that you make
here, Command Z to bring back

00:35:23.660 --> 00:35:26.625
the original state.

00:35:26.625 --> 00:35:29.640
PAVEL FELDMAN: And you
can also hit F2 to

00:35:29.640 --> 00:35:31.040
start editing as HTML.

00:35:31.040 --> 00:35:33.790
Because we know feel that it is
safer because it preserves

00:35:33.790 --> 00:35:36.060
the states of the elements.

00:35:36.060 --> 00:35:39.070
And we expect users to be using
it more often, because

00:35:39.070 --> 00:35:40.320
it's super flexible.

00:35:45.050 --> 00:35:48.325
PAUL IRISH: OK, one request.
Anyone watching, if you could

00:35:48.325 --> 00:35:52.070
just hit a Plus One on the post
so we get an idea of how

00:35:52.070 --> 00:35:54.370
many people are out there,
we'd love that.

00:35:54.370 --> 00:35:56.880
And Sam, could you
introduce another

00:35:56.880 --> 00:35:58.410
question from the moderator?

00:35:58.410 --> 00:35:59.620
SAM DUTTON: Yes, indeed.

00:35:59.620 --> 00:36:01.740
We've got one from Tony.

00:36:01.740 --> 00:36:03.830
Says he's from cactus land.

00:36:03.830 --> 00:36:06.130
Also known as Arizona,
I think.

00:36:06.130 --> 00:36:08.400
He's asking if there are any
plans for the console to sport

00:36:08.400 --> 00:36:11.120
auto-complete of elements
in the current page.

00:36:11.120 --> 00:36:15.860
So he's thinking of things like
an element that has an ID

00:36:15.860 --> 00:36:18.420
of, oh my God I don't
want to type this.

00:36:18.420 --> 00:36:22.550
And he wants to attach say
a method by jQuery.

00:36:22.550 --> 00:36:26.290
He's wondering if he could do
something like [? dial a ?]

00:36:26.290 --> 00:36:31.800
parenthesis, quote, hash, ONG
and then it auto-completes.

00:36:31.800 --> 00:36:33.612
So, sounds good?

00:36:33.612 --> 00:36:35.596
PAUL IRISH: It sounded good.

00:36:43.412 --> 00:36:49.180
Ah, so he basically wants
autocomplete based on the IDs

00:36:49.180 --> 00:36:53.450
and classes that are already
active in the DOM and have

00:36:53.450 --> 00:36:54.315
that available in the console?

00:36:54.315 --> 00:36:55.270
SAM DUTTON: That's right.

00:36:55.270 --> 00:36:57.410
Yep, I think that's
what he's after.

00:36:57.410 --> 00:37:01.430
So whatever I guess is within
scope, so to speak, in terms

00:37:01.430 --> 00:37:04.110
of ID or class.

00:37:04.110 --> 00:37:05.360
PAUL IRISH: Yeah.

00:37:07.520 --> 00:37:18.470
So right now we do have the
ability to autocomplete

00:37:18.470 --> 00:37:22.960
anything in the console when
it's already available in the

00:37:22.960 --> 00:37:25.640
DOM, so any of the functions
that you happen

00:37:25.640 --> 00:37:26.890
to find in the page.

00:37:29.570 --> 00:37:34.360
I love this a lot just to get a
reminder of what's available

00:37:34.360 --> 00:37:35.650
on Window dot location.

00:37:35.650 --> 00:37:40.320
And I forget the names of these
properties all the time.

00:37:40.320 --> 00:37:41.470
One trick that you could do.

00:37:41.470 --> 00:37:49.450
So let's say that document
dot body had an ID

00:37:49.450 --> 00:37:52.430
of my awesome body.

00:37:57.690 --> 00:38:00.238
Or it's a Window dot
document all.

00:38:03.520 --> 00:38:05.060
This is a terrible idea.

00:38:05.060 --> 00:38:06.470
I'm not suggesting
this at all.

00:38:10.690 --> 00:38:13.140
It looks like we won't
get completion there.

00:38:16.880 --> 00:38:20.247
SAM DUTTON: Nice try.

00:38:20.247 --> 00:38:22.780
PAUL IRISH: I think that's
a good idea.

00:38:22.780 --> 00:38:26.910
But right now we don't have any
capabilities of bringing

00:38:26.910 --> 00:38:31.145
in new elements and
autocompleting your selectors.

00:38:31.145 --> 00:38:33.040
PAVEL FELDMAN: But we
totally should.

00:38:33.040 --> 00:38:35.520
So by [INAUDIBLE]

00:38:35.520 --> 00:38:36.770
it should happen.

00:38:44.115 --> 00:38:46.690
PETER BEVERLOO: The IDs are not
being autocompleted for

00:38:46.690 --> 00:38:48.940
performance reasons right now.

00:38:48.940 --> 00:38:52.587
Basically, trying to find an
element by its ID name instead

00:38:52.587 --> 00:38:56.995
of an actual variable is quite
slow for the rendering engine,

00:38:56.995 --> 00:38:58.245
for WebKit.

00:39:03.580 --> 00:39:07.080
PAUL IRISH: Actually, I'm going
to go grab my USB cable,

00:39:07.080 --> 00:39:07.960
because I have something
to show.

00:39:07.960 --> 00:39:11.590
Pavel, do you want to run
through just the right way to

00:39:11.590 --> 00:39:15.490
file a bug or feature request?

00:39:15.490 --> 00:39:18.570
PAVEL FELDMAN: Can I steal
control over your machine or

00:39:18.570 --> 00:39:21.310
how do you do that?

00:39:21.310 --> 00:39:23.730
PAUL IRISH: You can screen
share on your side.

00:39:49.355 --> 00:39:52.033
PAVEL FELDMAN: Can you
guys see this?

00:39:52.033 --> 00:39:54.926
PAUL IRISH: Yep.

00:39:54.926 --> 00:39:58.080
PAVEL FELDMAN: So we're running
a magic link that is

00:39:58.080 --> 00:40:04.624
called
webkit.org/new-inspector-bug.

00:40:04.624 --> 00:40:06.440
I'll need another browser.

00:40:06.440 --> 00:40:08.260
Wait a moment.

00:40:08.260 --> 00:40:10.563
So you need to be logged in.

00:40:10.563 --> 00:40:14.341
So you need to register
at WebKit's Bugzilla.

00:40:14.341 --> 00:40:19.995
And let me do it again
with another browser.

00:40:19.995 --> 00:40:21.245
A moment.

00:40:27.910 --> 00:40:31.450
SAM DUTTON: Just a quick
reminder for anyone who's

00:40:31.450 --> 00:40:33.470
hanging out watching this.

00:40:33.470 --> 00:40:38.540
You can view the different
screens by clicking on them.

00:40:38.540 --> 00:40:42.390
So if you want to see Pavel's
screen or someone else's, you

00:40:42.390 --> 00:40:46.122
can click on that individual
Hangout window down at the

00:40:46.122 --> 00:40:47.372
bottom there.

00:40:50.580 --> 00:40:52.870
PAUL IRISH: So is that better?

00:40:52.870 --> 00:40:53.480
Can you see it now?

00:40:53.480 --> 00:40:59.180
So that's the page the new
inspector bug brought me to.

00:40:59.180 --> 00:40:59.650
So hold on.

00:40:59.650 --> 00:41:04.680
I'm typing these web inspector
autocomplete--

00:41:04.680 --> 00:41:05.630
[INAUDIBLE]

00:41:05.630 --> 00:41:07.120
autocomplete something--

00:41:07.120 --> 00:41:12.280
autocomplete DOM node
IDs and classes.

00:41:14.875 --> 00:41:17.630
Name the console.

00:41:17.630 --> 00:41:23.950
Then you describe what you want,
like you have document

00:41:23.950 --> 00:41:27.020
body ID is [INAUDIBLE]

00:41:27.020 --> 00:41:34.740
and you press FO and tab in your
console and [INAUDIBLE]

00:41:34.740 --> 00:41:36.140
to expand to [INAUDIBLE].

00:41:42.940 --> 00:41:45.800
And then you just
submit this bug.

00:41:45.800 --> 00:41:49.000
And it goes straight
into my inbox.

00:41:49.000 --> 00:41:53.780
And the reason I'm suggesting
to submit it into WebKit,

00:41:53.780 --> 00:41:58.710
because whenever something is
happening within the Dev Tools

00:41:58.710 --> 00:42:03.350
window, 95% of what is there
is being developed in the

00:42:03.350 --> 00:42:06.100
WebKit repository
by our own team.

00:42:06.100 --> 00:42:09.920
So what you do is you can either
file a bug against

00:42:09.920 --> 00:42:12.210
Chromium, which will
totally work.

00:42:12.210 --> 00:42:16.240
Or if you're confident it's part
of the Chrome Dev Tools

00:42:16.240 --> 00:42:21.520
window, you just go ahead and
submit it into the WebKit.

00:42:21.520 --> 00:42:24.820
So that's pretty much it.

00:42:24.820 --> 00:42:26.070
PAUL IRISH: Thank you.

00:42:28.660 --> 00:42:31.790
I did want to show some of a
new future that a lot of

00:42:31.790 --> 00:42:34.100
people haven't seen.

00:42:34.100 --> 00:42:38.270
And we're going bring up
some help for this.

00:42:43.590 --> 00:42:45.480
SAM DUTTON: Just while you're
doing that, could I take

00:42:45.480 --> 00:42:46.790
another question
from Moderator?

00:42:46.790 --> 00:42:47.940
PAUL IRISH: Yeah, please do.

00:42:47.940 --> 00:42:49.670
SAM DUTTON: Yeah, it's one
that people have asked.

00:42:49.670 --> 00:42:52.740
Another question from
Pat in New Zealand.

00:42:52.740 --> 00:42:56.460
He's asking if there's a way
to assist the break on

00:42:56.460 --> 00:42:59.180
sub-tree attributes modification
breakpoint

00:42:59.180 --> 00:43:02.500
functionality through multiple
page refreshes.

00:43:02.500 --> 00:43:06.210
So trying to debug some
code at page load.

00:43:06.210 --> 00:43:09.760
But currently, if you refresh
the page, it resets them.

00:43:09.760 --> 00:43:11.160
So, yeah.

00:43:11.160 --> 00:43:14.850
PAVEL FELDMAN: So it
is totally a bug.

00:43:14.850 --> 00:43:16.310
It should preserve those.

00:43:16.310 --> 00:43:19.000
There's a little hint, though.

00:43:19.000 --> 00:43:22.270
What the tool is doing upon
page load, upon the unload

00:43:22.270 --> 00:43:27.490
event, it will try to restore
all the breakpoints based on

00:43:27.490 --> 00:43:30.010
the node IDs.

00:43:30.010 --> 00:43:38.970
And if your DOM is dynamic or
if something has not yet

00:43:38.970 --> 00:43:42.730
happened and the DOM is not
there and the node is not in

00:43:42.730 --> 00:43:45.580
the DOM, the tool will
fail to do that.

00:43:45.580 --> 00:43:50.360
But it will pick it up once
the node is there.

00:43:50.360 --> 00:43:53.300
If this scenario does not work
for you, file a bug.

00:43:53.300 --> 00:43:54.970
Otherwise it should
be just fine.

00:43:58.162 --> 00:43:59.120
SAM DUTTON: Thanks, Pavel.

00:43:59.120 --> 00:44:01.476
That's great.

00:44:01.476 --> 00:44:05.850
PAUL IRISH: So I wanted to show
a really nice feature

00:44:05.850 --> 00:44:09.460
that we just enabled.

00:44:09.460 --> 00:44:10.930
And that is remote debugging.

00:44:10.930 --> 00:44:15.220
If you haven't known, we shipped
Chrome for Android a

00:44:15.220 --> 00:44:16.130
little bit ago.

00:44:16.130 --> 00:44:18.560
And one of the great things that
we have available is that

00:44:18.560 --> 00:44:21.880
you can actually have the full
power of the Chrome Developer

00:44:21.880 --> 00:44:25.780
Tools, the sorts of things that
you've been seeing today,

00:44:25.780 --> 00:44:29.920
available for your
mobile device.

00:44:29.920 --> 00:44:32.800
So I'm just going to show
how this works.

00:44:32.800 --> 00:44:34.840
I have my phone plugged in.

00:44:34.840 --> 00:44:38.985
I also enabled USB debugging
inside the OS.

00:44:41.710 --> 00:44:44.840
And I'm going just set up
an ADB port forward.

00:44:47.570 --> 00:44:48.820
Great.

00:44:51.850 --> 00:44:58.590
And now we're going to bring
up local host port 9222.

00:44:58.590 --> 00:44:59.480
Cool.

00:44:59.480 --> 00:45:02.870
So just to capture this.

00:45:05.440 --> 00:45:13.010
So the six items up there refer
to my six open tabs

00:45:13.010 --> 00:45:15.580
right here.

00:45:15.580 --> 00:45:19.250
So I'm going to just go
back to Google News

00:45:19.250 --> 00:45:20.600
and click it up here.

00:45:26.330 --> 00:45:29.280
And so if you didn't know,
the Chrome Developer

00:45:29.280 --> 00:45:30.750
Tools is a web app.

00:45:30.750 --> 00:45:33.810
So I'm just running the Chrome
Developer Tools as a web app

00:45:33.810 --> 00:45:36.980
inside Chrome.

00:45:36.980 --> 00:45:39.780
But this is the actual inspector
of the page.

00:45:39.780 --> 00:45:43.670
To show that, I'm just going to
hover over these sections.

00:45:47.230 --> 00:45:52.600
And you should be seeing the
nice hover happen inside the

00:45:52.600 --> 00:45:53.850
phone's UI.

00:45:57.720 --> 00:46:01.800
So this is pretty powerful.

00:46:01.800 --> 00:46:05.022
I'm going to go over to Console
just to prove that

00:46:05.022 --> 00:46:06.272
we've got this going on.

00:46:13.600 --> 00:46:16.190
Yeah, nice.

00:46:16.190 --> 00:46:18.525
So full remote debugging
capability.

00:46:21.090 --> 00:46:27.380
Things like your network timing,
the ability to run

00:46:27.380 --> 00:46:32.190
Heap Profiles and get memory
debugging info on a phone is

00:46:32.190 --> 00:46:35.540
something that we haven't
had available before.

00:46:35.540 --> 00:46:40.170
And so now with Chrome on
Android, we have that full

00:46:40.170 --> 00:46:40.475
capability.

00:46:40.475 --> 00:46:44.770
And we're really excited about
what that offers to mobile

00:46:44.770 --> 00:46:46.020
development.

00:46:48.462 --> 00:46:50.540
ALEX SEXTON: You need a Ice
Cream Sandwich phone.

00:46:50.540 --> 00:46:51.810
But you should all
get one anyways.

00:46:51.810 --> 00:46:52.060
They're awesome.

00:46:52.060 --> 00:46:52.320
PAUL IRISH: Peter, is
there anything you

00:46:52.320 --> 00:46:55.410
want to add on that?

00:46:55.410 --> 00:46:58.340
True, yeah, Ice Cream
Sandwich required.

00:46:58.340 --> 00:47:00.365
Delicious too.

00:47:00.365 --> 00:47:02.320
PETER BEVERLOO: Yeah, Ice Cream
Sandwich is required.

00:47:02.320 --> 00:47:04.950
At lunch the other day
we had [INAUDIBLE]

00:47:04.950 --> 00:47:07.510
of Chrome on Androids.

00:47:07.510 --> 00:47:11.915
And of course, there's much
more [INAUDIBLE] coming.

00:47:11.915 --> 00:47:13.030
PAUL IRISH: Nice.

00:47:13.030 --> 00:47:13.905
So get excited.

00:47:13.905 --> 00:47:15.155
Good stuff coming.

00:47:20.570 --> 00:47:24.520
I think we could talk about
extensions, select a

00:47:24.520 --> 00:47:28.220
profiling, show paint recs.

00:47:28.220 --> 00:47:33.256
Anything, Pavel, that you think
we should point out?

00:47:33.256 --> 00:47:36.400
PAVEL FELDMAN: So I could say
a few words on what we're

00:47:36.400 --> 00:47:39.230
currently doing.

00:47:39.230 --> 00:47:41.540
So Paul has mentioned
the [INAUDIBLE]

00:47:41.540 --> 00:47:48.360
And let me list what we are
currently committed to doing

00:47:48.360 --> 00:47:49.400
and are in progress of.

00:47:49.400 --> 00:47:53.122
So we are paying a lot of
attention to mobile.

00:47:53.122 --> 00:47:55.250
We are happy to see a remote
debugging story.

00:47:55.250 --> 00:48:00.900
But you often want to be able
to have your mobile web page

00:48:00.900 --> 00:48:03.290
from a desktop browser.

00:48:03.290 --> 00:48:06.310
So what we're currently
working on is a more

00:48:06.310 --> 00:48:09.570
sophisticated user agent
emulation that would allow

00:48:09.570 --> 00:48:12.750
integrating screen resolution.

00:48:12.750 --> 00:48:16.080
More native events that
would make sense

00:48:16.080 --> 00:48:18.440
for the mobile device.

00:48:18.440 --> 00:48:20.710
So that you could basically
conveniently [INAUDIBLE]

00:48:20.710 --> 00:48:23.580
development for mobile.

00:48:23.580 --> 00:48:26.790
We are currently working
on memory [? lot. ?]

00:48:26.790 --> 00:48:30.620
So the Heap Profiler that is not
working on a Canary is not

00:48:30.620 --> 00:48:33.890
working because we are redoing
the entire thing.

00:48:33.890 --> 00:48:35.520
We want it to be simpler.

00:48:35.520 --> 00:48:38.780
We want it to support
scenarios for memory

00:48:38.780 --> 00:48:42.580
[? content ?] or generic
Heap information

00:48:42.580 --> 00:48:43.760
capabilities and such.

00:48:43.760 --> 00:48:47.440
So going full speed there.

00:48:47.440 --> 00:48:50.750
We are also working on the
HTML5 features such as

00:48:50.750 --> 00:48:53.920
IndexDB, which has been
recently landed.

00:48:53.920 --> 00:48:56.990
It's still within the
experimental, but has good

00:48:56.990 --> 00:49:03.470
chances of going public
in Chrome 19.

00:49:03.470 --> 00:49:08.590
We are also focusing on the
game development stories.

00:49:08.590 --> 00:49:13.910
And we are reworking our
timeline for better capturing

00:49:13.910 --> 00:49:19.340
what frame is, what 16
milliseconds for frame mean

00:49:19.340 --> 00:49:24.290
and what actually takes time so
that our clients would have

00:49:24.290 --> 00:49:27.650
a way better clue on what needs
to be optimized, whether

00:49:27.650 --> 00:49:30.440
it's pane layout or JavaScript
or garbage

00:49:30.440 --> 00:49:33.140
collection or something.

00:49:33.140 --> 00:49:37.230
And what else?

00:49:37.230 --> 00:49:41.580
That's pretty much it And yes,
we are exploring different

00:49:41.580 --> 00:49:43.850
persistence stories.

00:49:43.850 --> 00:49:46.650
Paul, do you want to mention
a couple of extensions for

00:49:46.650 --> 00:49:47.000
persistence?

00:49:47.000 --> 00:49:48.250
PAUL IRISH: Yeah,
I would love to.

00:49:51.470 --> 00:49:55.580
So if you've been editing your
styles, as you might have

00:49:55.580 --> 00:50:06.590
seen, there is an ability to
get a [? dif ?] of your

00:50:06.590 --> 00:50:12.770
changes and save the new
file back to disk.

00:50:12.770 --> 00:50:17.530
But a lot of people have been
curious as if that little

00:50:17.530 --> 00:50:21.470
path, that workflow could
be made automatic.

00:50:21.470 --> 00:50:25.950
So there's been a little
bit of work in

00:50:25.950 --> 00:50:28.940
that direction recently.

00:50:28.940 --> 00:50:34.360
There's two extensions that I
would ask you to check out.

00:50:34.360 --> 00:50:38.020
One of them, you can get a brief
view if you just Google

00:50:38.020 --> 00:50:42.420
for Addy Osmani auto-save
dev tools.

00:50:42.420 --> 00:50:44.310
And Addy's put out a nice little
screencast about how

00:50:44.310 --> 00:50:45.370
this works.

00:50:45.370 --> 00:50:49.020
But essentially, it's an
extra Chrome extension.

00:50:49.020 --> 00:50:50.750
You make your changes.

00:50:50.750 --> 00:50:52.010
You run a node server.

00:50:52.010 --> 00:50:54.575
And it just saves the changes
that you're making into the

00:50:54.575 --> 00:50:58.000
Dev Tools back to your
disk as you go.

00:50:58.000 --> 00:51:02.910
There's another extension made
by a member of the Dev Tools

00:51:02.910 --> 00:51:07.950
engineering team that has
similar functionality.

00:51:07.950 --> 00:51:09.760
Just a different UI.

00:51:09.760 --> 00:51:13.060
And right now, they're
talking about how to

00:51:13.060 --> 00:51:14.100
merge these two efforts.

00:51:14.100 --> 00:51:16.600
But if you want that kind of
functionality, definitely

00:51:16.600 --> 00:51:18.917
check out one of those
two projects.

00:51:18.917 --> 00:51:20.760
SAM DUTTON: That's great
to see, actually.

00:51:20.760 --> 00:51:24.320
That covers questions we get
regularly at events and one

00:51:24.320 --> 00:51:27.470
that's high up the list
on Moderator.

00:51:27.470 --> 00:51:30.640
Just a reminder to people who
are watching this, if they

00:51:30.640 --> 00:51:33.900
could Plus One the
page for this.

00:51:33.900 --> 00:51:37.980
Because it really helps us
work out what kinds of

00:51:37.980 --> 00:51:40.230
Hangouts people want.

00:51:40.230 --> 00:51:41.460
So Plus One it if you could.

00:51:41.460 --> 00:51:43.570
That would be great.

00:51:43.570 --> 00:51:47.190
PAUL IRISH: There is a lot
happening in Dev Tools.

00:51:47.190 --> 00:51:50.930
I just loaded up Canary using
a command line flag, Enable

00:51:50.930 --> 00:51:54.790
Dev Tools Experiments, inside
settings that enables some

00:51:54.790 --> 00:51:59.500
extra stuff going on as an
IndexDB, which Pavel was just

00:51:59.500 --> 00:52:00.480
talking about.

00:52:00.480 --> 00:52:04.800
Being able to see shadow DOM
inside elements panel, some

00:52:04.800 --> 00:52:05.560
extra stuff.

00:52:05.560 --> 00:52:08.950
So if you want to ride
the bleeding edge,

00:52:08.950 --> 00:52:09.870
that's where it's at.

00:52:09.870 --> 00:52:15.340
You can check out peter.sh for
the news on a week by week

00:52:15.340 --> 00:52:18.810
basis of the entire Chrome
and WebKit projects.

00:52:18.810 --> 00:52:22.190
But you'll get a lot of detail
on what's happening inside the

00:52:22.190 --> 00:52:24.810
Dev Tools as well.

00:52:24.810 --> 00:52:28.550
And I would also recommend
Canary

00:52:28.550 --> 00:52:31.340
updates once a day, about.

00:52:31.340 --> 00:52:32.710
And you can run it
side by side with

00:52:32.710 --> 00:52:33.500
another Chrome instance.

00:52:33.500 --> 00:52:36.280
So I really recommend running
Canary and Chrome

00:52:36.280 --> 00:52:38.420
Stable side by side.

00:52:38.420 --> 00:52:41.570
In Canary, you get the freshest
Dev Tools features.

00:52:41.570 --> 00:52:45.160
But you get to hold on to Stable
to see what all your

00:52:45.160 --> 00:52:50.100
users are seeing your
site and app as.

00:52:50.100 --> 00:52:53.230
So I think that's it.

00:52:53.230 --> 00:52:55.026
Anyone else have anything
they want to add.

00:52:59.686 --> 00:53:00.630
No?

00:53:00.630 --> 00:53:02.990
Cool.

00:53:02.990 --> 00:53:05.890
I thank my guests
for joining me.

00:53:05.890 --> 00:53:09.270
And we appreciate you
guys coming and

00:53:09.270 --> 00:53:10.280
hanging out with us.

00:53:10.280 --> 00:53:11.530
So thanks.

