WEBVTT
Kind: captions
Language: en

00:00:08.890 --> 00:00:09.260
Hello.

00:00:09.260 --> 00:00:11.720
My name is Reto Meyer, and
welcome to a special extended

00:00:11.720 --> 00:00:13.880
edition of "This Week in
Android Development,"

00:00:13.880 --> 00:00:16.950
featuring What's New
in Android 4.3.

00:00:16.950 --> 00:00:18.920
Last week was a big one for
Android with the release of

00:00:18.920 --> 00:00:20.390
the newest model, Nexus 7.

00:00:20.390 --> 00:00:22.330
Measuring almost two millimeters
thinner and 50

00:00:22.330 --> 00:00:24.830
grams lighter than its
predecessor, it also features

00:00:24.830 --> 00:00:28.760
surround sound 5.1, front and
rear facing cameras, a 1.5

00:00:28.760 --> 00:00:32.140
gigahertz processor, 2 gigabytes
of memory, and a

00:00:32.140 --> 00:00:34.600
1920 x 1200 resolution
display.

00:00:34.600 --> 00:00:37.880
All this and it confers a plus
three to both public speaking

00:00:37.880 --> 00:00:39.200
and asking out girls.

00:00:39.200 --> 00:00:42.370
If your apps aren't optimized
for tablets, now's a good time

00:00:42.370 --> 00:00:43.530
to get started.

00:00:43.530 --> 00:00:45.380
But the real use for developers
is the release of

00:00:45.380 --> 00:00:46.920
Android 4.3.

00:00:46.920 --> 00:00:49.430
In addition to the inclusion
of even more butter, it

00:00:49.430 --> 00:00:51.790
includes support for restricted
profiles, OpenGL ES

00:00:51.790 --> 00:00:55.090
3.0, Bluetooth Low Energy, and
improvements to media,

00:00:55.090 --> 00:00:57.520
accessibility, and performance
analysis.

00:00:57.520 --> 00:01:01.440
Let's take a closer look at
some of these new APIs.

00:01:01.440 --> 00:01:04.420
Restricted profiles builds on
the multi-user functionality

00:01:04.420 --> 00:01:07.090
introduced in Android 4.1,
allowing you to create

00:01:07.090 --> 00:01:09.580
subprofiles that include
system-wide and app-specific

00:01:09.580 --> 00:01:10.670
restrictions.

00:01:10.670 --> 00:01:12.820
That means your app can declare
restriction entries,

00:01:12.820 --> 00:01:15.640
including Boolean flags,
choices, and multiselect

00:01:15.640 --> 00:01:19.780
choices, like this single choice
restriction entry, each

00:01:19.780 --> 00:01:22.830
of which can specify ways that
your app's functionality can

00:01:22.830 --> 00:01:24.610
potentially be restricted.

00:01:24.610 --> 00:01:26.870
Your app will then appear in
these system settings where

00:01:26.870 --> 00:01:29.410
each of these restrictions you
defined will be available to

00:01:29.410 --> 00:01:30.800
the device owner.

00:01:30.800 --> 00:01:32.970
They can select their
preferences for your app for

00:01:32.970 --> 00:01:34.980
each of their restricted
users.

00:01:34.980 --> 00:01:37.860
To apply those preferences to
your app at run time, simply

00:01:37.860 --> 00:01:39.880
check for a bundle of
restriction settings

00:01:39.880 --> 00:01:42.750
associated with your app by
querying the user manager when

00:01:42.750 --> 00:01:45.850
your app resumes, as shown
in this code snippet.

00:01:45.850 --> 00:01:49.150
You can find out more about
supporting restricted profiles

00:01:49.150 --> 00:01:51.140
from Rich Hyndman's DevByte.

00:01:51.140 --> 00:01:54.450
Also new to Android 4.3 is
platform support for Bluetooth

00:01:54.450 --> 00:01:55.470
Low Energy.

00:01:55.470 --> 00:01:58.012
BLE support allows you to build
apps that interact with

00:01:58.012 --> 00:02:00.570
the latest generation of small,
low power devices and

00:02:00.570 --> 00:02:03.000
sensors that use Bluetooth's
smart technology to

00:02:03.000 --> 00:02:04.540
communicate.

00:02:04.540 --> 00:02:07.320
The BLE APIs use this
workflow to interact

00:02:07.320 --> 00:02:08.660
with supported devices.

00:02:08.660 --> 00:02:11.280
You start by scanning for nearby
devices, then manage

00:02:11.280 --> 00:02:14.250
connections, discover available
services, and query

00:02:14.250 --> 00:02:18.190
and monitor characteristics
provided by connected devices.

00:02:18.190 --> 00:02:20.980
You start by scanning for BLE
devices calling start on the

00:02:20.980 --> 00:02:24.150
scan on the phone's
Bluetooth adapter.

00:02:24.150 --> 00:02:27.150
This scan results are reported
using this LeScanCallback

00:02:27.150 --> 00:02:30.370
callback that reports any
detected devices, a received

00:02:30.370 --> 00:02:33.150
signal strength indication,
and the advertisement data

00:02:33.150 --> 00:02:36.270
describing the services
available from that device.

00:02:36.270 --> 00:02:40.710
You can then connect to that
device, using its GAT server,

00:02:40.710 --> 00:02:43.460
using the call connect GAT
method, implementing the

00:02:43.460 --> 00:02:46.100
Bluetooth GAT callback to
receive connection results and

00:02:46.100 --> 00:02:49.390
monitor the available services
and characteristics.

00:02:49.390 --> 00:02:52.200
You can then read and write
those sensor values and

00:02:52.200 --> 00:02:54.140
request notifications whenever
a particular

00:02:54.140 --> 00:02:56.120
characteristic changes.

00:02:56.120 --> 00:02:58.470
Your app can work as either a
client or a server and can

00:02:58.470 --> 00:03:00.770
transmit and receive data
in either mode.

00:03:00.770 --> 00:03:02.770
The API [? is a generic, ?] so
you'll be able to interact

00:03:02.770 --> 00:03:05.330
with a variety of devices,
including proximity tags,

00:03:05.330 --> 00:03:08.150
watches, fitness meters, game
controllers, remote controls,

00:03:08.150 --> 00:03:09.810
and help devices.

00:03:09.810 --> 00:03:13.250
For more details on Bluetooth
Low Energy and using these

00:03:13.250 --> 00:03:15.830
APIs in your app, check out
this DevByte from our BLE

00:03:15.830 --> 00:03:18.260
expert Fred Chung.

00:03:18.260 --> 00:03:21.760
We've also introduced Java
interfaces and native support

00:03:21.760 --> 00:03:24.770
for OpenGL 3.0 so games
and other apps with

00:03:24.770 --> 00:03:27.470
high-performance 2D and 3D
graphics are now fully

00:03:27.470 --> 00:03:30.360
supported by the underlying
graphics hardware.

00:03:30.360 --> 00:03:33.830
OpenGL ES 3.0 includes many
improvements, including these,

00:03:33.830 --> 00:03:37.410
that support the creation and
complex but efficient graphics

00:03:37.410 --> 00:03:41.100
that work across a range of
devices using a single texture

00:03:41.100 --> 00:03:42.640
compression format.

00:03:42.640 --> 00:03:44.780
There also a number of
enhancements to Android's

00:03:44.780 --> 00:03:48.170
media stack, starting with a
modular DRM framework that

00:03:48.170 --> 00:03:50.970
makes it easy to integrate DRM
into your preferred streaming

00:03:50.970 --> 00:03:53.370
protocols such as MPEG DASH.

00:03:53.370 --> 00:03:56.420
The new media DRM class is a
modular solution that separate

00:03:56.420 --> 00:03:57.910
DRM from media playback.

00:03:57.910 --> 00:04:01.170
So, for example, you could play
back Widevine encrypted

00:04:01.170 --> 00:04:05.000
content without having to use
the Widevine media format.

00:04:05.000 --> 00:04:07.650
The media DRM APIs should be
used in conjunction with the

00:04:07.650 --> 00:04:11.150
Media Codec APIs that were
introduced in Android 4.1,

00:04:11.150 --> 00:04:13.510
including media codec for
encoding and decoding your

00:04:13.510 --> 00:04:16.370
content, MediaCrypto for
handling encrypted content,

00:04:16.370 --> 00:04:18.310
and Media Extractor
for extracting and

00:04:18.310 --> 00:04:20.430
demuxing your content.

00:04:20.430 --> 00:04:23.700
Support for VP8 encoding is
also now available as

00:04:23.700 --> 00:04:26.970
framework and native APIs
for a range of formats.

00:04:26.970 --> 00:04:29.760
The APIs include support for
setting target bit rate, rate

00:04:29.760 --> 00:04:32.720
controls, selecting frame rates,
token partitioning,

00:04:32.720 --> 00:04:33.650
area resilience,

00:04:33.650 --> 00:04:36.170
reconstruction, and loop filters.

00:04:36.170 --> 00:04:39.220
Back in Android 4.1, the Media
Codec class introduced support

00:04:39.220 --> 00:04:41.780
for low-level encoding and
decoding of media, but it

00:04:41.780 --> 00:04:45.165
required that it be provided
as a byte buffer array.

00:04:45.165 --> 00:04:48.480
In Android 4.3, you can use a
surface as the input to an

00:04:48.480 --> 00:04:51.380
encoder, so you can encode
input directly from an

00:04:51.380 --> 00:04:53.450
existing video file
while using frames

00:04:53.450 --> 00:04:57.120
generated from OpenGL ES.

00:04:57.120 --> 00:04:59.300
To use the surface as the input
to an encoder, call

00:04:59.300 --> 00:05:02.230
configure on your MediaCodec
object followed by a

00:05:02.230 --> 00:05:05.180
callCreateInputSurface to
receive the surface upon which

00:05:05.180 --> 00:05:06.990
you can stream your media.

00:05:06.990 --> 00:05:09.430
To begin encoding, call start
on the MediaCodec and when

00:05:09.430 --> 00:05:11.580
done, call
signalEndOfInputStream to

00:05:11.580 --> 00:05:15.080
terminate the encoding before
releasing the surface.

00:05:15.080 --> 00:05:17.770
The Media Muxer class enables
multiplexing between an audio

00:05:17.770 --> 00:05:19.250
stream and a video stream.

00:05:19.250 --> 00:05:21.020
It's designed to work primarily
with MediaCodec, so

00:05:21.020 --> 00:05:24.490
you can perform video processing
using MediaCodec

00:05:24.490 --> 00:05:26.480
and then save the output
to an MP4 file

00:05:26.480 --> 00:05:28.160
using the Media Muxer.

00:05:28.160 --> 00:05:30.820
The Media Muxer can also be used
in combination with Media

00:05:30.820 --> 00:05:33.250
Extractor to perform media
editing without the need to

00:05:33.250 --> 00:05:34.970
encode or decode.

00:05:34.970 --> 00:05:37.710
Currently, MP4 is the only
supported output format, and

00:05:37.710 --> 00:05:40.650
the Media Muxer supports only
one audio stream and one video

00:05:40.650 --> 00:05:42.870
stream at a time.

00:05:42.870 --> 00:05:45.310
The first Jelly Bean release
allowed media players to offer

00:05:45.310 --> 00:05:48.010
playback controls from remote
control clients, like the lock

00:05:48.010 --> 00:05:51.290
screen, ongoing notifications,
and Bluetooth remotes.

00:05:51.290 --> 00:05:54.390
This is all done using the
remote control client API.

00:05:54.390 --> 00:05:57.590
Now, these applications can also
display playback progress

00:05:57.590 --> 00:05:59.350
and handle jumping to
a specific playback

00:05:59.350 --> 00:06:01.030
position via scrubbing.

00:06:01.030 --> 00:06:03.560
If you're already using the
remote control client APIs,

00:06:03.560 --> 00:06:07.420
then you can add support for
scrubbing by enabling the flag

00:06:07.420 --> 00:06:09.730
key media position
update using the

00:06:09.730 --> 00:06:11.910
setTransportControlFlags
method on the

00:06:11.910 --> 00:06:13.750
remote control client.

00:06:13.750 --> 00:06:15.730
And this is going to make
the scrubber visible.

00:06:15.730 --> 00:06:19.350
Then, implementing both an
onGetPlaybackPositionListener,

00:06:19.350 --> 00:06:21.540
overriding the
onGetPlaybackPosition method

00:06:21.540 --> 00:06:24.040
to return the current position
of your media, and an

00:06:24.040 --> 00:06:26.550
onPlaybackPositionUpdate
listener with an overridden

00:06:26.550 --> 00:06:29.870
onPlaybackPositionUpdate method
to listen for a new

00:06:29.870 --> 00:06:32.910
time code when the user scrubs
the playback using the remote

00:06:32.910 --> 00:06:35.360
control UI.

00:06:35.360 --> 00:06:38.510
With these interfaces defined,
you can then set them on your

00:06:38.510 --> 00:06:40.095
remote control client by calling
setOnGetPlayback

00:06:40.095 --> 00:06:42.055
PositionListener and
setPlaybackPosit

00:06:42.055 --> 00:06:43.305
ionUpdateListener.

00:06:45.090 --> 00:06:49.580
A new UI automation framework
uses the accessibility service

00:06:49.580 --> 00:06:52.430
APIs to support tests that
interact with the device's UI

00:06:52.430 --> 00:06:54.510
by inspecting the screen
content and injecting

00:06:54.510 --> 00:06:56.780
arbitrary keyboard
and touch events.

00:06:56.780 --> 00:06:59.510
You can also perform system UI
actions like hitting the back

00:06:59.510 --> 00:07:02.960
button, rotating the screen, and
even taking screenshots.

00:07:02.960 --> 00:07:06.320
Best of all, the UI automation
APIs work across application

00:07:06.320 --> 00:07:08.030
boundaries.

00:07:08.030 --> 00:07:10.100
To get an instance of the
UI automation, call

00:07:10.100 --> 00:07:12.930
instrumentation dot
getUIAutomation within your

00:07:12.930 --> 00:07:14.770
instrumentation test case.

00:07:14.770 --> 00:07:17.310
You can then perform tests by
creating events and injecting

00:07:17.310 --> 00:07:19.690
them into the message loop and
confirm the results by

00:07:19.690 --> 00:07:22.340
introspecting UI elements.

00:07:22.340 --> 00:07:24.810
You do this by obtaining the
root accessibility node of the

00:07:24.810 --> 00:07:27.130
UI and searching for the screen
element you want to

00:07:27.130 --> 00:07:30.080
inspect, either by
name or by ID.

00:07:30.080 --> 00:07:33.320
Execute your test using the
adb am instrument command

00:07:33.320 --> 00:07:38.460
specifying the -w flag, package
name, and test runner.

00:07:38.460 --> 00:07:41.230
Next up, the Systrace tool has
been improved to make it

00:07:41.230 --> 00:07:43.330
easier to provide more
ways to profile the

00:07:43.330 --> 00:07:45.130
performance of your app.

00:07:45.130 --> 00:07:48.040
You can now collect trace data
from hardware modules, kernel

00:07:48.040 --> 00:07:51.240
functions, the Dalvik VM,
including garbage collection,

00:07:51.240 --> 00:07:53.280
resource loading and more.

00:07:53.280 --> 00:07:56.260
Android 4.3 also introduces
the Trace class with a new

00:07:56.260 --> 00:07:59.250
static methods begin section and
end section, which allow

00:07:59.250 --> 00:08:01.780
you to define specific parts
of your query to include in

00:08:01.780 --> 00:08:03.140
Systrace reports.

00:08:03.140 --> 00:08:05.400
So you can get a much more
detailed analysis of where

00:08:05.400 --> 00:08:08.000
slowdown occurs within
your app.

00:08:08.000 --> 00:08:10.670
There are also new developer
options to help you analyze

00:08:10.670 --> 00:08:13.190
performance and spot
rendering issues.

00:08:13.190 --> 00:08:16.460
The profile GPU rendering option
lets you visualize your

00:08:16.460 --> 00:08:18.890
app's effective frame
rate on screen.

00:08:18.890 --> 00:08:21.510
You can choose display profiling
data as on-screen

00:08:21.510 --> 00:08:25.410
bar or line graphs with colors
indicating time spent creating

00:08:25.410 --> 00:08:26.410
drawing commands--

00:08:26.410 --> 00:08:27.070
blue--

00:08:27.070 --> 00:08:28.170
issuing the commands--

00:08:28.170 --> 00:08:28.710
orange--

00:08:28.710 --> 00:08:30.680
and waiting for the commands
to complete--

00:08:30.680 --> 00:08:31.890
yellow.

00:08:31.890 --> 00:08:34.039
The on-screen graphs are updated
continuously, showing

00:08:34.039 --> 00:08:36.429
a graph for each visible
activity as well as the

00:08:36.429 --> 00:08:39.010
navigation bar and
notification bar.

00:08:39.010 --> 00:08:41.760
A green line highlights the 60
millisecond threshold for

00:08:41.760 --> 00:08:44.510
rendering operations, so you can
see your app's effective

00:08:44.510 --> 00:08:48.520
frame rate relative
to a 60 FPS goal.

00:08:48.520 --> 00:08:51.110
There are also improvements
to internationalization,

00:08:51.110 --> 00:08:53.970
including new utilities and APIs
for creating better RTL

00:08:53.970 --> 00:08:56.470
strings and psuedo-locales to
make it easier to test your

00:08:56.470 --> 00:08:58.160
app's localization.

00:08:58.160 --> 00:09:01.260
Accessibility services can now
observe and filter key events,

00:09:01.260 --> 00:09:03.770
so they can handle keyboard
shortcuts or provide

00:09:03.770 --> 00:09:06.700
navigation in parity with
gesture-based input.

00:09:06.700 --> 00:09:09.490
And apps can now define the exit
and entry animation times

00:09:09.490 --> 00:09:12.270
used on a window when the
device is rotated.

00:09:12.270 --> 00:09:14.900
You can set window properties
to enable jump cut, cross

00:09:14.900 --> 00:09:16.940
fade, or standard windows
rotation.

00:09:16.940 --> 00:09:19.540
Look for more information on
changes to the UI, including

00:09:19.540 --> 00:09:23.060
these animation changes,
from a Chet near you.

00:09:23.060 --> 00:09:26.570
Just in time for Android 4.3,
the support package ActionBar

00:09:26.570 --> 00:09:30.210
API now, at last,
is available.

00:09:30.210 --> 00:09:32.500
Find out all about how to
integrate this critical piece

00:09:32.500 --> 00:09:34.970
of the Android design language
into your app from this

00:09:34.970 --> 00:09:38.470
DevByte from our very
own Chris Banes.

00:09:38.470 --> 00:09:41.420
When we weren't busy launching
new Jelly Bean flavors, we

00:09:41.420 --> 00:09:43.440
were busy in our studio.

00:09:43.440 --> 00:09:46.580
Ankur is releasing the fourth
part of his five-part series

00:09:46.580 --> 00:09:48.710
on making apps beautiful,
this time looking

00:09:48.710 --> 00:09:50.350
at performance tuning.

00:09:50.350 --> 00:09:53.450
Chet, meantime, returns with the
highly anticipated second

00:09:53.450 --> 00:09:57.200
part of his series
on anticipation.

00:09:57.200 --> 00:09:59.790
And on "The App Clinic" last
week, I used cricket apps as

00:09:59.790 --> 00:10:02.770
an excuse to design my own
version of the perfect sports

00:10:02.770 --> 00:10:04.080
tracking app.

00:10:04.080 --> 00:10:06.930
My artistic skills are roughly
on a par to the Australian top

00:10:06.930 --> 00:10:09.690
order's batting skills, so I
devoted most of my session to

00:10:09.690 --> 00:10:12.210
strategies for minimizing
latency while maximizing

00:10:12.210 --> 00:10:13.480
battery efficiency.

00:10:13.480 --> 00:10:15.820
If your app needs frequent
updates but you don't want to

00:10:15.820 --> 00:10:18.320
drain the battery, check
this one out.

00:10:18.320 --> 00:10:21.300
Our design advocates will be
taking my amateur marks and

00:10:21.300 --> 00:10:23.390
turning them into something
more inspirational in

00:10:23.390 --> 00:10:27.085
tomorrow's episode of "Android
Design in Action." As always,

00:10:27.085 --> 00:10:30.440
you can go to developers.googl
e.com/live/android to see what

00:10:30.440 --> 00:10:33.600
we've got planned for "ADL"
this coming week.

00:10:33.600 --> 00:10:36.810
The release of Android 4.3 also
saw a flood of new and

00:10:36.810 --> 00:10:39.380
improved apps to Google Play,
including "Beauty and the

00:10:39.380 --> 00:10:43.290
Beast" with restricted profile
support, a Runtastic update

00:10:43.290 --> 00:10:46.320
that supports Bluetooth Low
Energy, Netflix updated to

00:10:46.320 --> 00:10:50.292
provide 1080P HD video, and
games such as "Galaxy on Fire

00:10:50.292 --> 00:10:53.910
2," "Monster Shooter 2," "Prince
of Persia," "The

00:10:53.910 --> 00:10:55.370
Shadow and the Flame,"
and "Riptide

00:10:55.370 --> 00:10:57.730
GP2" from Vector Unit.

00:10:57.730 --> 00:11:00.040
We'll be back next week for more
of "What's New in Android

00:11:00.040 --> 00:11:02.300
Development." In the meantime,
that's all for our special

00:11:02.300 --> 00:11:04.620
"What's New in Android
4.3" edition.

00:11:04.620 --> 00:11:07.280
Thanks for watching, and
remember that these sounds

00:11:07.280 --> 00:11:08.530
fall into my mind.

