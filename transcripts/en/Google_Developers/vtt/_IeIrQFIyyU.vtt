WEBVTT
Kind: captions
Language: en

00:00:04.149 --> 00:00:06.190
GREG: Chris is going to
give us a demo of managed

00:00:06.190 --> 00:00:07.300
virtual machines.

00:00:07.300 --> 00:00:09.830
He's going to take an
application like Brad used,

00:00:09.830 --> 00:00:13.350
but he's going to add in, now,
C++ code and some open source

00:00:13.350 --> 00:00:16.472
packages, while still keeping
the capabilities that he

00:00:16.472 --> 00:00:18.430
thought App Engine was
great for to begin with.

00:00:18.430 --> 00:00:20.710
So Chris why don't you show
us managed virtual machines.

00:00:20.710 --> 00:00:21.793
CHRIS: Cool, thanks, Greg.

00:00:21.793 --> 00:00:22.560
Appreciate it.

00:00:22.560 --> 00:00:24.018
So what I want to
show you today is

00:00:24.018 --> 00:00:27.310
how we use managed VMs to
take and add real time image

00:00:27.310 --> 00:00:30.140
collaboration in the cloud
and add that to Brad's demo.

00:00:30.140 --> 00:00:30.640
Alright?

00:00:30.640 --> 00:00:31.460
So what we're going
to do is we're

00:00:31.460 --> 00:00:33.570
going to have clients that
are running inside of Chrome,

00:00:33.570 --> 00:00:35.194
they're communicating
back with a fleet

00:00:35.194 --> 00:00:38.610
of managed VMs via WebSockets,
for low latency communications.

00:00:38.610 --> 00:00:39.200
Right?

00:00:39.200 --> 00:00:40.060
And on those managed
VMs we're going

00:00:40.060 --> 00:00:42.716
to rely on ImageMagick, a third
party, open source library,

00:00:42.716 --> 00:00:45.090
that's an optimized C library,
for doing image processing

00:00:45.090 --> 00:00:46.495
and image rendering.

00:00:46.495 --> 00:00:49.250
They want to use local disk
to cache the renderings,

00:00:49.250 --> 00:00:50.720
make it super snappy.

00:00:50.720 --> 00:00:54.100
They want to use App Engine's
Java runtime as a serving stack

00:00:54.100 --> 00:00:56.840
to get data flowing from the
front ends to the back ends.

00:00:56.840 --> 00:00:59.150
Now, as Greg alluded to,
that kind of technology

00:00:59.150 --> 00:01:02.170
is not typically supported
on platforms as a service.

00:01:02.170 --> 00:01:03.750
And not what App
Engine is today.

00:01:03.750 --> 00:01:06.000
With managed VMs, this
is totally possible.

00:01:06.000 --> 00:01:08.126
Furthermore, we make
it very easy to get up

00:01:08.126 --> 00:01:09.099
and started with this.

00:01:09.099 --> 00:01:09.890
So let me show you.

00:01:09.890 --> 00:01:12.440
I want to pop over
to my terminal here.

00:01:12.440 --> 00:01:14.990
And what we see is a typical
App Engine configuration

00:01:14.990 --> 00:01:16.860
file with a few parameters.

00:01:16.860 --> 00:01:18.990
So we have an application,
we have a version,

00:01:18.990 --> 00:01:20.420
we have what module's running.

00:01:20.420 --> 00:01:22.594
With a few more lines
of configuration,

00:01:22.594 --> 00:01:24.760
we're actually going to
turn this into a managed VM.

00:01:24.760 --> 00:01:26.551
So let me walk through
these settings here.

00:01:26.551 --> 00:01:28.510
So the first thing is,
we're setting VM true.

00:01:28.510 --> 00:01:30.780
That's telling the system I want
to run this on a managed VM,

00:01:30.780 --> 00:01:33.030
so I have access to native
resources and the ability

00:01:33.030 --> 00:01:34.355
to run native code.

00:01:34.355 --> 00:01:37.400
Furthermore, we get into a new
section called VM settings.

00:01:37.400 --> 00:01:39.172
Here we specify machine
type, for example.

00:01:39.172 --> 00:01:41.630
And since we're doing image
rendering and image processing,

00:01:41.630 --> 00:01:43.760
we're going to crank up
the horsepower on these VMs

00:01:43.760 --> 00:01:45.529
and deploy eight core machines.

00:01:45.529 --> 00:01:47.570
GREG: Now this could be
any of the Compute Engine

00:01:47.570 --> 00:01:48.620
virtual machine types.

00:01:48.620 --> 00:01:50.770
One, two, four,
eight, or more cores.

00:01:50.770 --> 00:01:54.390
High MEM, High CPU standard,
whatever is available in GCE,

00:01:54.390 --> 00:01:56.430
you can use with
App Engine as well.

00:01:56.430 --> 00:01:57.430
CHRIS: Absolutely, Greg.

00:01:57.430 --> 00:01:59.210
And furthermore, as
we innovate here,

00:01:59.210 --> 00:02:02.510
those innovations will flow back
to this configuration as well.

00:02:02.510 --> 00:02:05.517
The next line is the settings
for deploying the third party

00:02:05.517 --> 00:02:07.600
code that I want on those
managed VMs In this case

00:02:07.600 --> 00:02:10.860
we're using ImageMagick and
just doing app-get install

00:02:10.860 --> 00:02:11.952
to those managed VMs

00:02:11.952 --> 00:02:13.410
GREG: And again,
anything installed

00:02:13.410 --> 00:02:15.610
will be an apped get,
I can specify here,

00:02:15.610 --> 00:02:17.662
and it becomes available
to me in a managed VM.

00:02:17.662 --> 00:02:19.620
CHRIS: Absolutely, this
is how we're opening up

00:02:19.620 --> 00:02:21.590
App Engine so you can use
third party libraries like that

00:02:21.590 --> 00:02:23.006
and get them onto
those VMs, those

00:02:23.006 --> 00:02:24.732
managed VMs, in a
super simple way.

00:02:24.732 --> 00:02:26.148
The next line, is
we're opening up

00:02:26.148 --> 00:02:29.030
a port, in this case it's
an arbitrary port 65080,

00:02:29.030 --> 00:02:30.140
and that's how we're
going to do the WebSocket

00:02:30.140 --> 00:02:32.098
communication from the
clients that are running

00:02:32.098 --> 00:02:34.560
in Chrome, back to those
fleet of managed VMs.

00:02:34.560 --> 00:02:35.460
And then for the
sake of this demo,

00:02:35.460 --> 00:02:36.720
we're going to
specify two instances,

00:02:36.720 --> 00:02:38.130
because that's more than
enough for this demo,

00:02:38.130 --> 00:02:40.560
especially since we're
running eight core machines.

00:02:40.560 --> 00:02:42.770
So we're going to escape
from this, save it.

00:02:42.770 --> 00:02:44.930
Now since we're running
on the Java runtime,

00:02:44.930 --> 00:02:48.200
and it's a Java application, we
can use Maven to deploy this.

00:02:50.657 --> 00:02:52.240
OK, so while that's
running, I'm going

00:02:52.240 --> 00:02:54.156
to talk about what's
happening under the hood.

00:02:54.156 --> 00:02:56.902
So can we cut back to
the slides, please?

00:02:56.902 --> 00:02:58.610
Alright, the first
thing that's happening

00:02:58.610 --> 00:03:00.270
is that we're relying
on our G Cloud tools

00:03:00.270 --> 00:03:02.350
to parse and to validate the
configuration file that I just

00:03:02.350 --> 00:03:03.080
showed you.

00:03:03.080 --> 00:03:04.539
Assuming that's
valid, which it is,

00:03:04.539 --> 00:03:06.746
It's going to communicate
to our deployment endpoints

00:03:06.746 --> 00:03:08.750
and say, OK, I want to
deploy this application.

00:03:08.750 --> 00:03:10.250
Those deployment
endpoints are going

00:03:10.250 --> 00:03:13.320
to store some metadata about
the application, the version,

00:03:13.320 --> 00:03:15.620
the template, the number of
instances that are running.

00:03:15.620 --> 00:03:16.680
And then from there
we're going to go off,

00:03:16.680 --> 00:03:18.720
and we're going to create
the actual containers.

00:03:18.720 --> 00:03:22.050
In this case, we're creating
eight core, Compute Engine VMs,

00:03:22.050 --> 00:03:24.335
and we're installing our
Debian OS on top of that.

00:03:24.335 --> 00:03:26.710
After that, we're going to
carve out the managed services

00:03:26.710 --> 00:03:28.920
and make sure that everything's
lined up correctly for you.

00:03:28.920 --> 00:03:30.836
So in this case, we're
going to do monitoring,

00:03:30.836 --> 00:03:33.150
and health checking, task
queues, Memcache, and data

00:03:33.150 --> 00:03:33.674
storing.

00:03:33.674 --> 00:03:35.590
We're also going to
create secure name spaces,

00:03:35.590 --> 00:03:37.120
so that everything
is secure within

00:03:37.120 --> 00:03:38.312
those multi-tenant systems.

00:03:38.312 --> 00:03:40.020
And we're going to
set up smart defaults,

00:03:40.020 --> 00:03:42.060
so it's very easy
to access the APIs

00:03:42.060 --> 00:03:44.780
and get data flowing
back and forth.

00:03:44.780 --> 00:03:46.510
From there, it's on
to the serving stack.

00:03:46.510 --> 00:03:47.870
And since we're running
on a Java runtime,

00:03:47.870 --> 00:03:49.995
we're going to install a
web server, an application

00:03:49.995 --> 00:03:52.000
server, and a JVM,
and then it's is

00:03:52.000 --> 00:03:53.750
on to the interesting parts,
the parts that you provide.

00:03:53.750 --> 00:03:55.291
So in this case,
the third party code

00:03:55.291 --> 00:03:57.420
we specified, so ImageMagick
on those managed VMs.

00:03:57.420 --> 00:03:59.256
And then, most
importantly, your code.

00:03:59.256 --> 00:04:00.630
We're going to
bring all that up.

00:04:00.630 --> 00:04:01.590
We're going to do
some health checking,

00:04:01.590 --> 00:04:02.505
make sure everything's
running correctly.

00:04:02.505 --> 00:04:03.406
I'm assuming it is.

00:04:03.406 --> 00:04:05.030
We're going to install
a load balancer,

00:04:05.030 --> 00:04:06.920
and then we're going to
wire everything up for you.

00:04:06.920 --> 00:04:08.960
The final step is we're
going to take all of that

00:04:08.960 --> 00:04:10.640
and make sure it's co-located
with the other pieces

00:04:10.640 --> 00:04:11.830
of compute that your running.

00:04:11.830 --> 00:04:13.020
So in this case,
Brad had showed you

00:04:13.020 --> 00:04:14.190
some front ends
that were running.

00:04:14.190 --> 00:04:15.410
We're going to take
your managed VMs

00:04:15.410 --> 00:04:17.076
and co-locate those
with your front end,

00:04:17.076 --> 00:04:20.649
so you get low latency and
improved overall performance.

00:04:20.649 --> 00:04:24.420
Alright, so we can
jump back to the demo.

00:04:24.420 --> 00:04:25.770
So our build has succeeded.

00:04:25.770 --> 00:04:28.510
Let's go check
that out in Chrome.

00:04:28.510 --> 00:04:30.430
So we'll pull this
up, and we'll navigate

00:04:30.430 --> 00:04:33.910
to the URL that's
provisioned for us.

00:04:33.910 --> 00:04:36.030
Alright, and there we
see our new front end,

00:04:36.030 --> 00:04:38.270
cloud collabo,
collaboration in the cloud.

00:04:38.270 --> 00:04:39.600
This is pretty straightforward.

00:04:39.600 --> 00:04:41.350
We're going to be able
to upload an image.

00:04:41.350 --> 00:04:43.180
We're going to do some
edits to that image.

00:04:43.180 --> 00:04:44.300
Those edits are going to
be shared with people that

00:04:44.300 --> 00:04:46.841
are collaborating, and we can
do some real time conversation,

00:04:46.841 --> 00:04:48.030
back and forth.

00:04:48.030 --> 00:04:50.730
So let's pick an image.

00:04:50.730 --> 00:04:53.420
Alright, meme two looks good.

00:04:53.420 --> 00:04:55.390
Alright, man of the
hour, Urs, we're

00:04:55.390 --> 00:04:57.820
going to use his meme
to actually get going.

00:04:57.820 --> 00:05:00.930
So that's uploading to
Cloud Storage right now.

00:05:00.930 --> 00:05:02.032
Alright, there it is.

00:05:02.032 --> 00:05:04.365
So it's uploaded, we see that
I'm the only collaborator.

00:05:04.365 --> 00:05:05.930
So let's change that.

00:05:05.930 --> 00:05:07.490
I'm going to share
this with Greg.

00:05:07.490 --> 00:05:09.698
Now demo [? note, ?] I'm
going to use Chrome profiles

00:05:09.698 --> 00:05:12.560
to simulate Greg and myself
communicating back and forth.

00:05:12.560 --> 00:05:15.726
So we're going to bump
over to Greg's profile.

00:05:15.726 --> 00:05:17.510
Oh yes, looks just
like you, Greg.

00:05:17.510 --> 00:05:19.640
Oh, you're a "Despicale
Me" fan as well.

00:05:19.640 --> 00:05:20.245
I love it.

00:05:20.245 --> 00:05:21.019
It's great.

00:05:21.019 --> 00:05:23.435
That is like the craziest theme
I've ever seen in my life.

00:05:26.680 --> 00:05:29.200
Alright, back to business.

00:05:29.200 --> 00:05:31.720
OK, so I'm sharing this
with Greg right now.

00:05:31.720 --> 00:05:35.770
It's going out, it's
going to log him in.

00:05:35.770 --> 00:05:38.570
Wait for it.

00:05:38.570 --> 00:05:39.912
There he is, alright.

00:05:39.912 --> 00:05:41.370
And you see now
that Greg and I are

00:05:41.370 --> 00:05:42.815
collaborating on this image.

00:05:42.815 --> 00:05:44.440
Now to show you
happening in real time,

00:05:44.440 --> 00:05:49.005
as I try to move
this over here--

00:05:49.005 --> 00:05:50.880
So I'm going to pretend
that Greg is actually

00:05:50.880 --> 00:05:53.181
doing the editing,
and you're going

00:05:53.181 --> 00:05:55.430
to see things happening, if
everything works correctly

00:05:55.430 --> 00:05:56.830
in my browser as well.

00:05:56.830 --> 00:05:59.700
So we'll dress it up
with a frame first.

00:05:59.700 --> 00:06:01.490
Nothing goes with
green like magenta.

00:06:01.490 --> 00:06:04.310
Grab that.

00:06:04.310 --> 00:06:05.234
Add border.

00:06:05.234 --> 00:06:06.650
Alright, good,
we've got a border.

00:06:06.650 --> 00:06:11.606
And now we're going to add
some high end doodling.

00:06:11.606 --> 00:06:13.730
Somebody had mentioned that
doodling on Urs's image

00:06:13.730 --> 00:06:15.565
is probably a
career ending move.

00:06:18.290 --> 00:06:19.130
I said hey, why not.

00:06:19.130 --> 00:06:20.696
GREG: Only if the
demo doesn't work.

00:06:20.696 --> 00:06:21.196
[LAUGHING]

00:06:21.196 --> 00:06:22.450
CHRIS: Exactly.

00:06:22.450 --> 00:06:26.600
So we're going to give Urs a
big smile, good prices in cloud,

00:06:26.600 --> 00:06:28.780
and his famous earring,
a little more bling.

00:06:28.780 --> 00:06:30.252
There we go.

00:06:30.252 --> 00:06:32.210
And now we see that it's
happening in real time

00:06:32.210 --> 00:06:33.435
back to my browser.

00:06:33.435 --> 00:06:34.810
And so, again
what's happening is

00:06:34.810 --> 00:06:36.434
that these two clients,
connecting over

00:06:36.434 --> 00:06:38.407
WebSockets back to managed VMs.

00:06:38.407 --> 00:06:40.740
We're doing the rendering,
we're caching in local disks,

00:06:40.740 --> 00:06:43.324
then we're sending updates
back to the Chrome clients.

00:06:43.324 --> 00:06:45.740
Now I want to take a second
and say, to all the App Engine

00:06:45.740 --> 00:06:47.990
developers and users
that are in the crowd,

00:06:47.990 --> 00:06:50.410
this typically wasn't and was
not supported on App Engine.

00:06:50.410 --> 00:06:53.261
But yet it's been a top feature
request, consistently, year

00:06:53.261 --> 00:06:53.760
over year.

00:06:53.760 --> 00:06:56.330
So I'm happy to announce that
those feature requests are now

00:06:56.330 --> 00:06:59.550
fixed, and available to you.

00:06:59.550 --> 00:07:02.320
OK, so it's not just about--
thank you, thank you,

00:07:02.320 --> 00:07:05.920
thank you, all the App Engine
developers in the crowd.

00:07:05.920 --> 00:07:09.910
So while the ability to
access native resources

00:07:09.910 --> 00:07:12.260
and run native code on these
managed VMs is fantastic,

00:07:12.260 --> 00:07:13.920
it's not just about that.

00:07:13.920 --> 00:07:16.550
It's about great developer
experiences and great developer

00:07:16.550 --> 00:07:17.540
integration.

00:07:17.540 --> 00:07:18.570
So to show you that,
I'm going to bump

00:07:18.570 --> 00:07:20.236
back out to the
developers console here.

00:07:23.900 --> 00:07:26.295
It's the same UI that
Brad had shown previously,

00:07:26.295 --> 00:07:28.012
it's our developers console.

00:07:28.012 --> 00:07:30.220
And I'm going to show how
we've integrated App Engine

00:07:30.220 --> 00:07:33.770
and Compute Engine by drilling
down into the App Engine tab.

00:07:33.770 --> 00:07:36.440
And we see our dashboard.

00:07:36.440 --> 00:07:37.240
We see our modules.

00:07:37.240 --> 00:07:38.800
I'm going to select our
back end module, that's

00:07:38.800 --> 00:07:40.508
the one that's handling
all the real time

00:07:40.508 --> 00:07:42.940
collaboration and communication.

00:07:42.940 --> 00:07:44.879
We'll drill into the instances.

00:07:44.879 --> 00:07:46.420
And here we'll see
the instances that

00:07:46.420 --> 00:07:47.440
are running from my application.

00:07:47.440 --> 00:07:49.510
So, remember, back in
the configuration file,

00:07:49.510 --> 00:07:51.421
we specified that we
want two managed VMs.

00:07:51.421 --> 00:07:52.170
Here we see those.

00:07:52.170 --> 00:07:56.176
And if we drill into
this VM over here,

00:07:56.176 --> 00:07:57.570
give it a second, OK.

00:07:57.570 --> 00:08:00.076
And so there's the dashboard
for the underlying VM.

00:08:00.076 --> 00:08:01.450
And if we move
down the page, you

00:08:01.450 --> 00:08:04.210
can see that it is, in
fact, an eight core machine.

00:08:04.210 --> 00:08:06.640
We've automatically configured
an external IP for it.

00:08:06.640 --> 00:08:08.610
And there's some
metadata here that

00:08:08.610 --> 00:08:11.051
allows us to manage the VM,
quite a bit of it actually.

00:08:11.051 --> 00:08:12.550
So that's drilling
down into the VM.

00:08:12.550 --> 00:08:13.680
Now we'll have to
bubble back up and see

00:08:13.680 --> 00:08:16.030
how we've integrated all
the managed services.

00:08:16.030 --> 00:08:18.540
We come back to
the App Engine tab,

00:08:18.540 --> 00:08:20.912
we'll go to our
unified logs viewer.

00:08:20.912 --> 00:08:23.120
Now what's nice about this,
is it's not just unifying

00:08:23.120 --> 00:08:24.690
the logs on all my managed VMs.

00:08:24.690 --> 00:08:27.150
It's actually unifying the
logs across all the compute

00:08:27.150 --> 00:08:27.964
that I'm doing.

00:08:27.964 --> 00:08:29.630
Be it a front end
running on App Engine,

00:08:29.630 --> 00:08:32.690
or managed VMs that are running
on top of Compute Engine VMs.

00:08:32.690 --> 00:08:35.020
So here we see that there
is a fair number of servlets

00:08:35.020 --> 00:08:37.720
that are being hit,
for my back end.

00:08:37.720 --> 00:08:39.440
Got one for serving
up an image, one for

00:08:39.440 --> 00:08:41.210
create a WebSockets connection.

00:08:41.210 --> 00:08:44.390
And while you could do all
of this on an unmanaged VM,

00:08:44.390 --> 00:08:46.360
you could do it on a
raw Compute Engine VM,

00:08:46.360 --> 00:08:48.019
you could deploy
syslog or rsyslog.

00:08:48.019 --> 00:08:49.560
We think there's
more productive way.

00:08:49.560 --> 00:08:52.018
We think that by offering a
managed and centralized service

00:08:52.018 --> 00:08:54.659
like this, you become a
more productive developer.

00:08:54.659 --> 00:08:56.700
And furthermore, if you
apply that philosophy out

00:08:56.700 --> 00:09:00.300
to things like authentication,
deployment management,

00:09:00.300 --> 00:09:02.530
configuration management,
developer tools,

00:09:02.530 --> 00:09:04.190
developer console,
that you could

00:09:04.190 --> 00:09:07.780
be a more productive and
happier developer for the cloud.

00:09:07.780 --> 00:09:09.947
Now let's take a look at
how-- speaking of developer

00:09:09.947 --> 00:09:11.571
productivity, let's
take a look at what

00:09:11.571 --> 00:09:12.890
we do with the underlying VMs.

00:09:12.890 --> 00:09:15.622
Now, we had mentioned that these
VMs are locked down by default.

00:09:15.622 --> 00:09:17.455
So they're not-- you
don't have root access,

00:09:17.455 --> 00:09:18.997
you don't have SSH
access in to them.

00:09:18.997 --> 00:09:21.080
And that's for a good
reason, we don't want people

00:09:21.080 --> 00:09:22.959
going out into production
and making changes

00:09:22.959 --> 00:09:24.750
to one of those VMs
that are running inside

00:09:24.750 --> 00:09:25.930
of a large fleet.

00:09:25.930 --> 00:09:28.990
It makes it hard to manage
within a high availability

00:09:28.990 --> 00:09:30.290
manner.

00:09:30.290 --> 00:09:31.800
But we recognize
the fact that there

00:09:31.800 --> 00:09:33.840
are times when you need
to get to those VMs

00:09:33.840 --> 00:09:35.990
to do things like-- do
some kind of debugging,

00:09:35.990 --> 00:09:37.980
or check on a configuration
file that you have,

00:09:37.980 --> 00:09:39.860
or make some
configuration change,

00:09:39.860 --> 00:09:42.310
just to see what happens
to the underlying VM.

00:09:42.310 --> 00:09:44.440
We make that super
simple as well.

00:09:44.440 --> 00:09:46.740
So if we come back
here to the terminal,

00:09:46.740 --> 00:09:53.870
we're going to do a G Cloud--
instances-- [INAUDIBLE] gcloud

00:09:53.870 --> 00:10:01.590
compute-- instances--
list-- and there's

00:10:01.590 --> 00:10:03.460
our two VMs that are
actually running.

00:10:03.460 --> 00:10:05.835
And now we're going to enable
debugging for one of those.

00:10:05.835 --> 00:10:09.160
So I'm going to do gcloud
debug-- [INAUDIBLE]

00:10:09.160 --> 00:10:12.014
compute debug.

00:10:12.014 --> 00:10:13.430
Use the local
directory, which has

00:10:13.430 --> 00:10:15.272
the configuration for
these managed VMs.

00:10:15.272 --> 00:10:16.730
And what that's
going to do is it's

00:10:16.730 --> 00:10:18.605
going to go through that
deployment end point

00:10:18.605 --> 00:10:20.920
and put those two managed
VMs into debug mode, which

00:10:20.920 --> 00:10:22.145
is what you're seeing here.

00:10:22.145 --> 00:10:23.955
I'll clear that up.

00:10:23.955 --> 00:10:34.000
And if we do gcloud compute
instances-- list, again.

00:10:34.000 --> 00:10:35.280
So I can grab the name.

00:10:35.280 --> 00:10:38.125
Let's grab the first one,
and we'll SSH into that.

00:10:38.125 --> 00:10:40.940
So we'll grab that guy.

00:10:40.940 --> 00:10:42.465
Instead of list, we'll do SSH.

00:10:45.490 --> 00:10:46.650
OK.

00:10:46.650 --> 00:10:49.100
Now that'll SSH us
into the underlying VM,

00:10:49.100 --> 00:10:50.850
what you see here,
cramsdil@ae-backend1-0.

00:10:52.755 --> 00:10:54.041
Clear that up.

00:10:54.041 --> 00:10:56.290
once we're on this VM, you
have access to common tools

00:10:56.290 --> 00:10:57.960
you would normally use
on a virtual machine.

00:10:57.960 --> 00:10:59.860
In this case we do
things like run netstat.

00:11:02.187 --> 00:11:03.770
We see all the
activity that's running

00:11:03.770 --> 00:11:05.520
through the various
connections on the VM.

00:11:05.520 --> 00:11:08.915
In this case, we can actually
see up there at 65080

00:11:08.915 --> 00:11:11.040
with the port we're listening
on for the WebSockets

00:11:11.040 --> 00:11:11.955
communication.

00:11:11.955 --> 00:11:13.580
And then we can do
things like interact

00:11:13.580 --> 00:11:14.730
with the Debian
package [INAUDIBLE]

00:11:14.730 --> 00:11:17.380
and see that the package that we
specified inside configuration

00:11:17.380 --> 00:11:19.260
file is actually on the VM.

00:11:19.260 --> 00:11:21.690
In this case we would
do DDKG and we'll

00:11:21.690 --> 00:11:25.610
do a grep for the same Magick.

00:11:25.610 --> 00:11:27.990
And sure enough, there you
see that, in the bottom

00:11:27.990 --> 00:11:29.739
there, we see that our
package is actually

00:11:29.739 --> 00:11:31.050
installed on the VM.

00:11:31.050 --> 00:11:33.580
And so all we need
to do is we exit,

00:11:33.580 --> 00:11:36.790
we'll seal that VM back up,
and things are good to go.

00:11:36.790 --> 00:11:39.010
So what we've seen here
is that with managed VMs,

00:11:39.010 --> 00:11:41.860
we can take advantage
of the auto management

00:11:41.860 --> 00:11:44.410
the App Engine provides with
the control and flexibility

00:11:44.410 --> 00:11:45.937
of underlying
Compute Engine VMs.

00:11:45.937 --> 00:11:47.520
We make it super
simple to get started

00:11:47.520 --> 00:11:50.140
with easy configuration,
easy deployments,

00:11:50.140 --> 00:11:52.040
integration back with
managed services,

00:11:52.040 --> 00:11:53.748
as well as integration
with our developer

00:11:53.748 --> 00:11:55.670
console and our developer tools.

00:11:55.670 --> 00:11:57.710
So that you don't have
to make a choice between

00:11:57.710 --> 00:12:01.060
I want platform as a
service and auto management,

00:12:01.060 --> 00:12:04.220
or I want to choose flexibility
with Compute Engine.

00:12:04.220 --> 00:12:06.422
Managed VMs brings
both of those together,

00:12:06.422 --> 00:12:07.880
giving you the best
of both worlds.

00:12:07.880 --> 00:12:09.940
And so, with that, I'm going
to turn it back over the Greg.

00:12:09.940 --> 00:12:11.090
GREG: Thanks, Chris.

00:12:11.090 --> 00:12:15.560
[APPLAUSE]

