WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:02.550
So to see what the programmer
has to go through,

00:00:02.550 --> 00:00:05.380
let's look at the message
passing program.

00:00:05.380 --> 00:00:07.420
This is a relatively simple program.

00:00:07.420 --> 00:00:11.180
What it's trying to do is compute a sum

00:00:11.180 --> 00:00:15.710
of a relatively large array
in parallel on four cores.

00:00:15.710 --> 00:00:18.520
So this is the overall array size.

00:00:18.520 --> 00:00:21.490
It has 1024 elements.

00:00:21.490 --> 00:00:24.400
This is the number of
processors we have.

00:00:24.400 --> 00:00:26.660
In a message passing program,

00:00:26.660 --> 00:00:29.980
each of the processors will
get one quarter of the array.

00:00:29.980 --> 00:00:33.190
They can not access each
other's memory directly, so

00:00:33.190 --> 00:00:37.111
each one of them only allocates its
part of the array in its memory.

00:00:37.111 --> 00:00:40.614
Each of them will have
its own sum variable, and

00:00:40.614 --> 00:00:45.693
then what happens is each of them
iterates over its part of the array,

00:00:45.693 --> 00:00:48.690
adding those array elements to the sum.

00:00:49.740 --> 00:00:54.010
This of course assumes that
the elements of the large array have

00:00:54.010 --> 00:00:57.280
somehow been distributed
to all of the processors.

00:00:58.310 --> 00:01:03.260
If they haven't been distributed
already, then we need to also write

00:01:03.260 --> 00:01:06.575
code that will actually send
the elements of the array so

00:01:06.575 --> 00:01:08.828
that each of them gets
a quarter of the array.

00:01:08.828 --> 00:01:11.830
Once we have computed the sum,

00:01:11.830 --> 00:01:17.080
we need to compute the final sum, and
to do that we have to communicate.

00:01:17.080 --> 00:01:21.350
So what we will do is we will
have one of the processors act as

00:01:21.350 --> 00:01:27.350
the summing up agent, and it will,
for every other processor,

00:01:27.350 --> 00:01:31.550
receive the sum sent by that processor,
and

00:01:31.550 --> 00:01:36.350
add it to its sum, and
then print the final overall sum.

00:01:36.350 --> 00:01:39.510
What do the rest of the processors do?

00:01:39.510 --> 00:01:45.610
Well what they do is they send to
processor 0 what they have collected so

00:01:45.610 --> 00:01:47.600
far, and that's all they do.

00:01:47.600 --> 00:01:51.740
So as you can see, we need to
explicitly send and then receive

00:01:51.740 --> 00:01:55.380
things in order for communication
between processes to happen.

00:01:55.380 --> 00:02:00.829
And also we have to explicitly control
what gets into whose part of memory.

00:02:01.860 --> 00:02:03.520
We need to explicitly also,

00:02:03.520 --> 00:02:08.758
in the program, figure out how to
match the sends and receives, because,

00:02:08.758 --> 00:02:13.690
if we send something, and it's not
received, it's going to be a problem.

00:02:13.690 --> 00:02:17.380
And also, if we wait to receive
something, and there is no send for

00:02:17.380 --> 00:02:20.310
it, it's going to be a problem,
we get stuck here.

00:02:20.310 --> 00:02:25.060
So we need to know how many
processes to wait for.

00:02:25.060 --> 00:02:29.080
We need to send exactly what's
expected at the time, and so on.

00:02:29.080 --> 00:02:33.970
But once we do all of this correctly,
it's very easy for the programmer to see

00:02:33.970 --> 00:02:38.150
which parts of this program are going to
be expensive as far as communication is

00:02:38.150 --> 00:02:43.190
concerned, because these are all local
accesses, so they are relatively fast,

00:02:43.190 --> 00:02:46.580
and these are the only places
where we actually communicate.

