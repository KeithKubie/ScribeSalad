WEBVTT
Kind: captions
Language: en

00:00:00.960 --> 00:00:04.990
&gt;&gt;Joe Malin: Hello everyone and welcome once
again to Android Developer Office Hours. My

00:00:04.990 --> 00:00:09.730
name is Joe Malin. I'm your Moderator. Next
to me is Trevor Johns and then down the line

00:00:09.730 --> 00:00:20.170
in his official Android worker's hat is Dan
Galpin. Our engineer today is Dan Pham. We

00:00:20.170 --> 00:00:25.869
have some great questions here today, but
I also encourage you to come into our Hangout

00:00:25.869 --> 00:00:31.089
or type in your questions as well. We've got
lots of time to do that today. We're bringing

00:00:31.089 --> 00:00:37.219
up Hangouts as quickly as we can so bear with
us. Meanwhile, we'll hop into our first question

00:00:37.219 --> 00:00:40.780
on Moderator, and that is, gentlemen--

00:00:40.780 --> 00:00:43.180
&gt;&gt;Joe Malin &amp; Dan Galpin: Should your apps
store all

00:00:43.180 --> 00:00:50.160
&gt;&gt;Joe Malin: data that's not sensible in /sdcard
as /data is quite small on some phones? But

00:00:50.160 --> 00:00:56.589
on the other hand data in /sdcard on the Galaxy
Nexus ends up in /data/ and personally I'd

00:00:56.589 --> 00:00:59.539
prefer /data. What's the best way to handle
this?

00:00:59.539 --> 00:01:05.590
&gt;&gt;Trevor Johns: I'm a little confused about
what he means about /data versus /data/ 'cause

00:01:05.590 --> 00:01:15.620
that's the same path. I'm wondering if what
he means is that information stored on /sdcard

00:01:15.620 --> 00:01:22.390
on Galaxy Nexus is still stored somewhere
inside of /data because the device doesn’t

00:01:22.390 --> 00:01:24.520
have a external sd card.

00:01:24.520 --> 00:01:25.520
&gt;&gt;Joe Malin: Right

00:01:25.520 --> 00:01:28.640
&gt;&gt;Trevor Johns: So I'm not, I'm not sure where
else you'd put the data in that case, but

00:01:28.640 --> 00:01:34.030
&gt;&gt;Dan Galpin: I, I assume what he means in
this case is that /sdcard/Android/data is

00:01:34.030 --> 00:01:37.820
the only, I mean it's the only place that
that is where it could actually end up getting--

00:01:37.820 --> 00:01:38.820
&gt;&gt;Trevor Johns: Right.

00:01:38.820 --> 00:01:42.860
&gt;&gt;Dan Galpin: stored and even it's ah, the
only, the only real difference is on Galaxy

00:01:42.860 --> 00:01:49.250
Nexus is one of them has a case dependent
[inaudible] and the other one doesn't, uh,

00:01:49.250 --> 00:01:55.170
and one of them is of course accessible to
other applications, so and you know and uh

00:01:55.170 --> 00:02:01.920
I think that if it's sensitive data as a general
rule, you want to avoid storing it on the

00:02:01.920 --> 00:02:06.741
sd card. If you're storing a lot of data,
you know the sd card is safer you know and

00:02:06.741 --> 00:02:11.060
then the real question is how do you detect
a device like Galaxy Nexus which is using

00:02:11.060 --> 00:02:16.520
contiguous storage between both and that is
that is kind of an interesting question. You

00:02:16.520 --> 00:02:22.870
know as a general rule, you know we don't
really suggest actually using a different

00:02:22.870 --> 00:02:27.540
approach based upon the different devices,
but you know the goal you know going forward

00:02:27.540 --> 00:02:34.160
it's really, really nice to have devices where
it's all one file system. Like Galaxy Nexus

00:02:34.160 --> 00:02:37.660
you don't have to actually worry about this
and it's kind of a nice benefit of the design.

00:02:37.660 --> 00:02:42.810
I don't know, any, any comments on, on best
practice around that Trevor? Is there a way

00:02:42.810 --> 00:02:46.170
to detect whether or not you have a con, have
a single file system or multiple?

00:02:46.170 --> 00:02:49.510
&gt;&gt;Trevor Johns: Yeah, well, you can check
the external storage state, which would tell

00:02:49.510 --> 00:02:52.240
you whether or not there's actually an sd
card mounted or available.

00:02:52.240 --> 00:02:53.310
&gt;&gt;Dan Galpin: Mm-hmm.

00:02:53.310 --> 00:02:57.190
&gt;&gt;Trevor Johns: That being said, I usually,
you know I think the rule is just look at

00:02:57.190 --> 00:03:01.530
what type of data it is, like Dan said, if
it's something that's small and/or sensitive,

00:03:01.530 --> 00:03:08.770
it's usually best to place it inside of in
the apps' private you know tree within /data.

00:03:08.770 --> 00:03:14.080
If it's large and/or publicly or should be
publicly accessible, then you should put it

00:03:14.080 --> 00:03:19.020
on the sd card regardless of whether or not
that's a real sd card or not. And then the

00:03:19.020 --> 00:03:23.740
really the only other thing you have to watch
out for is the case where there's not an sd

00:03:23.740 --> 00:03:26.900
card present. So you know a device that uses
external storage but the user's removed the

00:03:26.900 --> 00:03:32.711
sd card, in which case you really only have
one choice, which is internal storage or I

00:03:32.711 --> 00:03:37.650
suppose you could refuse to run, but let's,
let's avoid that possibility. Normally you

00:03:37.650 --> 00:03:42.801
want your app to run. But, yeah, I think just
you know looking at the use case, where, what

00:03:42.801 --> 00:03:47.110
type of data you're storing will dictate where
you store it and regardless of whether or

00:03:47.110 --> 00:03:49.570
not it’s actually a real sd card or not
shouldn't make a difference.

00:03:49.570 --> 00:03:53.360
&gt;&gt;Dan Galpin: Yeah, this the real question
is the word is in the, in the question is

00:03:53.360 --> 00:03:56.620
sensible and I'm not sure if we mean.

00:03:56.620 --> 00:03:58.980
&gt;&gt;Joe Malin: I think he means sensitive there.

00:03:58.980 --> 00:04:02.130
&gt;&gt;Dan Galpin: I don't know, that's what I
was, I was, because sensible in terms of in

00:04:02.130 --> 00:04:06.370
terms of large data you know would make sense.
So you know large data you know generally

00:04:06.370 --> 00:04:11.280
you want to put on the sd card. Sensitive
you know data you want to put on in the data

00:04:11.280 --> 00:04:16.620
space. So I guess that's that's the best we
can do there. So, so, so Galaxy Nexus though,

00:04:16.620 --> 00:04:20.009
will it always show up as an sd card mounted
or will it never show up as an sd card mounted?

00:04:20.009 --> 00:04:24.110
&gt;&gt;Trevor Johns: Oh, that's a good question.
I want to say they'll show up as mounted because

00:04:24.110 --> 00:04:25.110
&gt;&gt;Dan Galpin: Yeah.

00:04:25.110 --> 00:04:27.919
&gt;&gt;Trevor Johns: that's how you determine whether
or not you can actually even attempt to write

00:04:27.919 --> 00:04:28.919
it there.

00:04:28.919 --> 00:04:29.919
&gt;&gt;Dan Galpin: Yeah.

00:04:29.919 --> 00:04:30.919
&gt;&gt;Trevor Johns: So it should show up as always
mounted.

00:04:30.919 --> 00:04:31.919
&gt;&gt;Dan Galpin: Right, right. That's what I
thought, ok.

00:04:31.919 --> 00:04:36.300
&gt;&gt;Trevor Johns: Now you do also have to watch
out that if the user is using an older device

00:04:36.300 --> 00:04:41.300
that uses a you know FAT file system for external
storage, in other words it's using an sd card,

00:04:41.300 --> 00:04:46.729
when the user connects the device to the computer
and turns on USB storage, even though the

00:04:46.729 --> 00:04:52.070
sd card is still attached, it'll become unmounted
as far as your application is concerned. So

00:04:52.070 --> 00:04:55.310
it is possible for the sd card to disappear
even when it's inserted in the device.

00:04:55.310 --> 00:04:56.310
&gt;&gt;Dan Galpin: Now, do you--

00:04:56.310 --> 00:04:59.979
&gt;&gt;Trevor Johns: So on older devices it is
a it is a lot more common than I think a lot

00:04:59.979 --> 00:05:00.979
of developers realize.

00:05:00.979 --> 00:05:04.419
&gt;&gt;Dan Galpin: Yeah. And if you actually have
a file handle open on that sd card, it will

00:05:04.419 --> 00:05:10.600
Android will immediately terminate your application,
so if when, when, when the sd card is unmounted,

00:05:10.600 --> 00:05:14.139
so that's the other the other the other side
of using it.

00:05:14.139 --> 00:05:21.680
&gt;&gt;Joe Malin: Ok? Thank you gentlemen. Our
next question is: "My activity has a spinner

00:05:21.680 --> 00:05:26.740
in the action bar, each spinner item corresponds
to a fragment. I have a use-case where if

00:05:26.740 --> 00:05:30.570
I select an item from one fragment I have
to replace the current fragment with another

00:05:30.570 --> 00:05:37.430
fragment. How do I manage the back stack?"
&gt;&gt;Trevor Johns: Ok. So, I'm not sure if it

00:05:37.430 --> 00:05:40.819
really even matters whether or not there's
a fragment there or not, I think the big question

00:05:40.819 --> 00:05:47.729
is here is what's the correct user experience?
And when it comes to something like a spinner

00:05:47.729 --> 00:05:52.950
in the action bar, I like to think of this
as similar to tabs at the top. And if you

00:05:52.950 --> 00:05:58.039
look at pretty much every system application
that uses tabs, when you switch tabs, back

00:05:58.039 --> 00:06:03.509
doesn't take you back to the old tab, it'll
take you back to the previous activity, which

00:06:03.509 --> 00:06:07.469
you know in many cases means just right out
of your application assuming this is your

00:06:07.469 --> 00:06:11.930
home screen and so I think with a spinner
the paver should be the same, so when you

00:06:11.930 --> 00:06:17.080
switch tabs, don't change what's in your back
stack and for those of you who don't have

00:06:17.080 --> 00:06:21.409
a lot of experience with fragments, whenever
you do a fragment transition, it's up to the

00:06:21.409 --> 00:06:26.479
developer to determine what the new state
of the back stack should be, so in this case

00:06:26.479 --> 00:06:30.510
it would just be as simple as not doing anything
to the back stack. Leave it as is. Whatever

00:06:30.510 --> 00:06:34.590
was in there previously will still be your
previous entry and when you hit back you'll

00:06:34.590 --> 00:06:35.590
go to that.

00:06:35.590 --> 00:06:39.020
&gt;&gt;Dan Galpin: And the more interesting question
is, is, is the question with you know you

00:06:39.020 --> 00:06:43.340
have you have a fragment and you click on
something in one fragment and it replaces

00:06:43.340 --> 00:06:49.180
that fragment with another fragment and and
my assumption on this one, oohh, nice, my

00:06:49.180 --> 00:06:56.620
assumption in this one is that if we actually
are again having two methods of switching

00:06:56.620 --> 00:07:01.870
between these fragments, one that's that's
using spinners and one that's using the you

00:07:01.870 --> 00:07:05.389
know being able to click on one fragment and
replace it, it probably makes sense to not

00:07:05.389 --> 00:07:10.099
put it on the back stack if it is you know
feeling again like a transition to a completely

00:07:10.099 --> 00:07:14.360
different state, then it may make sense and
I think that's, that one's, the only thing

00:07:14.360 --> 00:07:17.210
that's tricky at that point is, you know,
what happens to those spinners in the action

00:07:17.210 --> 00:07:20.380
bar? Are you actually changing the state of
the action bar to disable those spinners at

00:07:20.380 --> 00:07:23.901
that point? And again there's just not enough
information in this question to give a really

00:07:23.901 --> 00:07:29.210
thorough answer, but I think, I think again
it ultimately comes down to the user experience.

00:07:29.210 --> 00:07:32.919
As far as managing the back stack itself,
you know, you obviously, it's it's fairly

00:07:32.919 --> 00:07:39.539
straight forward to assign IDs to the various
fragments, and you can actually you know very

00:07:39.539 --> 00:07:43.749
easily look to see whether that fragment is
currently in the back stack, you can pull

00:07:43.749 --> 00:07:47.770
it out of the back stack, there's a lot of
stuff in fragments, actually, to manage it,

00:07:47.770 --> 00:07:51.639
but you know in this case we're really talking
about the user experience rather than you

00:07:51.639 --> 00:07:53.550
know the kind of mechanics of it.

00:07:53.550 --> 00:07:57.599
&gt;&gt;Trevor Johns: Right. And I think a good
example if you need something to look at what

00:07:57.599 --> 00:08:01.889
correct behavior would be, would be Gmail.
So Gmail has a spinner in the action bar,

00:08:01.889 --> 00:08:06.599
it has a lot of different activities, a lot
of different states, and so add two Google

00:08:06.599 --> 00:08:10.219
accounts to your phone, fire up Gmail and
play around, right? You'll notice if you do

00:08:10.219 --> 00:08:14.290
switch accounts and you hit back, it doesn't
switch back to the other account, it doesn't

00:08:14.290 --> 00:08:20.289
count that as a state change, but if you,
you know if you open a message and go back,

00:08:20.289 --> 00:08:23.960
that does. Now when you do open a message,
the spinner disappears and it gets replaced

00:08:23.960 --> 00:08:28.740
with the action bar is updated to reflect
your new context which is viewing a message

00:08:28.740 --> 00:08:34.320
rather than viewing your account list in your
message list. So a lot of subtle details there

00:08:34.320 --> 00:08:37.040
you need to take into account, but I think
that's a good example.

00:08:37.040 --> 00:08:38.340
&gt;&gt;Dan Galpin: Uh-huh.

00:08:38.340 --> 00:08:44.510
&gt;&gt;Joe Malin: Ok. Thank you gentlemen. Next
question: "I'd like to put a ViewPager on

00:08:44.510 --> 00:08:50.450
half of a two-pane layout. Can I put a ViewPager
in a fragment, and more fragments in that

00:08:50.450 --> 00:08:55.500
ViewPager? I'd like my left pane to hold swipe-able
lists, and the right pane to contain details

00:08:55.500 --> 00:08:57.030
of list items that are clicked."

00:08:57.030 --> 00:09:04.840
&gt;&gt;Dan Galpin: So this is one of those cases
in which I would say that it's not strictly

00:09:04.840 --> 00:09:13.760
necessary to use a fragment. And in fact you
know as a general rule our, our dev team tries

00:09:13.760 --> 00:09:18.881
to discourage people from putting fragments
within fragments. You know the goal, that's

00:09:18.881 --> 00:09:23.930
really what views are intended for. You know
the fragment really is, is, is the idea of

00:09:23.930 --> 00:09:29.850
a fragment is usually to maintain some state
you're gonna be showing in two different,

00:09:29.850 --> 00:09:35.520
in two different kind of application states,
whether that is you know alone and by itself,

00:09:35.520 --> 00:09:39.250
in a full screen view that's gonna have an
activity and a fragment stack associated with

00:09:39.250 --> 00:09:46.120
it or if it's going to be in you know a side-by-side
like tablet layout. It's trying to take those

00:09:46.120 --> 00:09:50.760
pieces and turn them into reasonable components.
In this case I think it's almost always a

00:09:50.760 --> 00:10:02.030
better idea to actually just use the view
hierarchy itself, the actual, pager actually

00:10:02.030 --> 00:10:06.530
does not, ViewPager actually can be done without
any fragments at all. It works quite well

00:10:06.530 --> 00:10:13.240
just with views, ergo ViewPager, and that's
how I would do it. I don't think there's any

00:10:13.240 --> 00:10:15.410
particular advantage in using a fragment here.

00:10:15.410 --> 00:10:20.720
&gt;&gt;Trevor Johns: Now let's say that you still
have some reason that you want to do this.

00:10:20.720 --> 00:10:25.000
There are some caveats that you should be
aware of from a technical perspective. If

00:10:25.000 --> 00:10:32.100
you try and display a fragment or a ViewPager
inside of a fragment which contains another

00:10:32.100 --> 00:10:36.752
ViewPager, FragmentManager can get a little
bit confused about how to resolve all of that

00:10:36.752 --> 00:10:41.840
when you do a transition and from what I've
heard, even though I've never tried to do

00:10:41.840 --> 00:10:46.160
it myself, you can, you know the solution
would be to make sure that you don't set your

00:10:46.160 --> 00:10:51.160
ViewPager's adapter until after the first
transition is completed. And that's as simple

00:10:51.160 --> 00:10:56.240
as making [inaudible] an async task or a handler,
something like that, just making sure that

00:10:56.240 --> 00:11:01.470
it's delayed a bit and then by the time you're
rendering that, the second fragment, the first

00:11:01.470 --> 00:11:05.790
fragment's already there. Again, though, you
probably don't want to be doing this.

00:11:05.790 --> 00:11:09.680
&gt;&gt;Dan Galpin: Yeah. I mean you can definitely
put, you know, ViewPager, you know, inside

00:11:09.680 --> 00:11:15.500
of a fragment, and you can certainly put whatever
you want inside of that ViewPager. You know

00:11:15.500 --> 00:11:18.670
the real tricky thing is of course when you
get into these multiple ViewPager states and

00:11:18.670 --> 00:11:27.890
there is some mechanism that's actually in
JellyBean that actually does handle some of

00:11:27.890 --> 00:11:32.600
this, unfortunately it's not, which, which
allows it to actually track the scrollability

00:11:32.600 --> 00:11:35.900
of an internal window, which allows a lot
of, like if you have ViewPager within ViewPager

00:11:35.900 --> 00:11:39.730
you can actually do stuff like scroll to the
end of one and then have it once it's finished

00:11:39.730 --> 00:11:45.050
scrolling it'll actually scroll to the next
in the primary ViewPager, stuff like that,

00:11:45.050 --> 00:11:50.890
but none of that is actually available in
you know the default [inaudible] that you're

00:11:50.890 --> 00:11:55.560
gonna use for across all the different Android
versions, so there's some work if you want

00:11:55.560 --> 00:11:58.760
that kind of that kind of experience. Again,
from your question, it sounds like you're

00:11:58.760 --> 00:12:03.430
more interested in just having a ViewPager
inside of, inside of a fragment, and that's

00:12:03.430 --> 00:12:04.430
fine.

00:12:04.430 --> 00:12:05.430
&gt;&gt;Joe Malin: Ok.

00:12:05.430 --> 00:12:10.610
&gt;&gt;Trevor Johns: Alright, and so Daniel's telling
me that we finally have Hangouts up, so for

00:12:10.610 --> 00:12:14.480
those of you who are joining live, feel free
to hop on. For those of you who are joining

00:12:14.480 --> 00:12:19.450
us for the first time today, just as a reminder
for everyone else, you are certainly welcome

00:12:19.450 --> 00:12:24.900
to go in to hop on to our Hangout and ask
us questions live, we'd love to hear from

00:12:24.900 --> 00:12:28.400
you. And if your question's already in the
Moderator queue, feel free to hop on too.

00:12:28.400 --> 00:12:33.320
A lot of times we can ask you for more details
and it's just we can give you a better answer

00:12:33.320 --> 00:12:35.030
if you're on here to have a discussion with
us.

00:12:35.030 --> 00:12:36.030
&gt;&gt;Joe Malin: Right.

00:12:36.030 --> 00:12:39.550
&gt;&gt;Trevor Johns: So we do have a limit, ten
people at a time, so try to make sure that

00:12:39.550 --> 00:12:42.460
you're only joining the Moderator or I'm sorry
if you're only joining the Hangout if you

00:12:42.460 --> 00:12:46.700
have a question to ask just to make sure we
keep those slots open and for those that,

00:12:46.700 --> 00:12:51.520
for everyone else, feel free to watch the
live stream either on YouTube or developers.google.com,

00:12:51.520 --> 00:12:57.060
plus you get a better picture if you're watching
the YouTube version than the Hangout version.

00:12:57.060 --> 00:13:02.340
So YouTube for watching, Hangouts for live
questions and definitely hop on and ask us

00:13:02.340 --> 00:13:03.870
questions, we'd love to hear from ya.

00:13:03.870 --> 00:13:09.600
&gt;&gt;Joe Malin: Agreed. Thank you. Thank you
very much. Next question: "To frequently sync

00:13:09.600 --> 00:13:15.540
a database from the cloud into SQLite on Android,
should I use a background service activated

00:13:15.540 --> 00:13:21.400
by a wakeup alarm, or a SyncAdapter? And if
I use the latter, for what do I need an account

00:13:21.400 --> 00:13:23.470
(or do I really)?"

00:13:23.470 --> 00:13:31.731
&gt;&gt;Trevor Johns: So that depends on the nature
of what you're syncing. It depends. If you

00:13:31.731 --> 00:13:38.390
need, if you have account credentials you
don't necessarily need to implement an account,

00:13:38.390 --> 00:13:42.520
it's entirely possible to go and place them
into a shared preferences file or something

00:13:42.520 --> 00:13:47.150
like that. What we said earlier, make sure
your private data is actually being stored

00:13:47.150 --> 00:13:51.540
on internal storage rather than the sd card,
make sure it's set to mode, mode private so

00:13:51.540 --> 00:13:57.420
no other apps can access it, but you normally
don't need an account unless you're providing

00:13:57.420 --> 00:14:03.350
authentication credentials to other other
services on the device. So for example if

00:14:03.350 --> 00:14:07.990
you implement or if you want to talk to Google
Services, you can talk to the Google Account

00:14:07.990 --> 00:14:13.080
and ask for an OAuth token. That's what account
manager lets you do. Now going back to your

00:14:13.080 --> 00:14:18.021
original question, though, should you use
a background service or SyncAdapter? If you

00:14:18.021 --> 00:14:23.370
use SyncAdapter, Android will periodically
go and sync your data on a schedule that it

00:14:23.370 --> 00:14:26.450
determines. This is a good thing, 'cause it
makes sure the phone can do things like optimizing

00:14:26.450 --> 00:14:32.550
for battery life, it's really bad to go and
have all sorts of different services syncing

00:14:32.550 --> 00:14:35.280
at different times, 'cause that means it has
to wake [inaudible] up a lot. If it can go

00:14:35.280 --> 00:14:39.870
and batch those into one big sync operation
across all apps on the phone, SyncAdapter

00:14:39.870 --> 00:14:45.750
is great for that, it's good for your users.
That being said, if it's a fairly infrequent

00:14:45.750 --> 00:14:50.720
task, or if you have some really odd semantics
that would prevent SyncAdapter from working

00:14:50.720 --> 00:14:55.240
properly, you know background service works
perfectly fine. There's nothing wrong with

00:14:55.240 --> 00:14:59.790
that other than like I said you don't get
the optimizations that SyncAdapter gives you.

00:14:59.790 --> 00:15:04.070
&gt;&gt;Dan Galpin: Yeah. I think, I think the real
question is 'cause he was trying to get the

00:15:04.070 --> 00:15:07.970
latter, is do I need, do we need an account
in order to use SyncAdapter? That's, that's,

00:15:07.970 --> 00:15:08.970
that's

00:15:08.970 --> 00:15:09.970
&gt;&gt;Joe Malin: Right.

00:15:09.970 --> 00:15:10.970
&gt;&gt;Dan Galpin: I think that's the question
he was curious about.

00:15:10.970 --> 00:15:16.730
&gt;&gt;Joe Malin: I would say that reading this
and knowing about how SyncAdapter is used

00:15:16.730 --> 00:15:21.800
in things like ContactsProvider, my guess
is that he's asking things about an account

00:15:21.800 --> 00:15:28.620
because Sample SyncAdapter, which is about
the only documentation we have for SyncAdapters,

00:15:28.620 --> 00:15:38.350
uses OAuth tokens and the answer that I would
give in that context is that's not required,

00:15:38.350 --> 00:15:41.380
it's there to show you how to use it, but
you don't have to use it.

00:15:41.380 --> 00:15:42.380
&gt;&gt;Dan Galpin: Yeah.

00:15:42.380 --> 00:15:47.710
&gt;&gt;Joe Malin: It's used there because Sample
SyncAdapter syncs to a Google service that

00:15:47.710 --> 00:15:53.960
needs Authorization, and using the structure
that Sample SyncAdapter uses, you only have

00:15:53.960 --> 00:15:59.960
to provide like an account name and a password
once and then an Authorization token to store

00:15:59.960 --> 00:16:00.960
it.

00:16:00.960 --> 00:16:01.960
&gt;&gt;Dan Galpin: Yeah.

00:16:01.960 --> 00:16:05.340
&gt;&gt;Joe Malin: So you don't, that helps using
SyncAdapter, because SyncAdapter doesn't have

00:16:05.340 --> 00:16:08.420
to be able to count on being able to go back
to the user.

00:16:08.420 --> 00:16:10.990
&gt;&gt;Dan Galpin: Yeah, there are many open web
services that aren't gonna require account

00:16:10.990 --> 00:16:11.990
information.

00:16:11.990 --> 00:16:12.990
&gt;&gt;Joe Malin: Right.

00:16:12.990 --> 00:16:17.230
&gt;&gt;Dan Galpin: And SyncAdapter is still a great
way to assure that the phone can kind of optimize,

00:16:17.230 --> 00:16:19.260
the system can optimize for battery life.

00:16:19.260 --> 00:16:25.950
&gt;&gt;Joe Malin: There's some, there are a lot
of things that SyncAdapter gives you for free.

00:16:25.950 --> 00:16:32.260
As Trevor said, it schedules things automatically
at a good time, batches up things together,

00:16:32.260 --> 00:16:38.130
it will also check to make sure it won't run
if you don't have network connectivity, so

00:16:38.130 --> 00:16:43.320
you don't have to go off and test for yourself
that the network's available, SyncAdapter

00:16:43.320 --> 00:16:50.770
will do that for you. So it's just a question
of how compatible your particular app model

00:16:50.770 --> 00:16:58.410
is with what SyncAdapter does. I hope that
answers the question. Do we have anything

00:16:58.410 --> 00:17:00.170
out there in Hangout land? No?

00:17:00.170 --> 00:17:01.190
&gt;&gt;Dan Pham: Yeah, we sure do.

00:17:01.190 --> 00:17:02.190
&gt;&gt;Joe Malin: Oh, good, super.

00:17:02.190 --> 00:17:04.120
&gt;&gt;Dan Pham: I'm gonna put Jared on.

00:17:04.120 --> 00:17:05.559
&gt;&gt;Joe Malin: Go ahead.

00:17:05.559 --> 00:17:10.079
&gt;&gt;Dan Pham: One second. Jared, alright Jared,
you should be live, go ahead.

00:17:10.079 --> 00:17:11.079
&gt;&gt;Joe Malin: Hey.

00:17:11.079 --> 00:17:13.529
&gt;&gt;Trevor Johns: Hold on a sec, we don't actually
hear you.

00:17:13.529 --> 00:17:14.529
&gt;&gt;Dan Pham: Hold on, yeah,

00:17:14.529 --> 00:17:15.529
&gt;&gt;Joe Malin: Hold on.

00:17:15.529 --> 00:17:16.529
&gt;&gt;Dan Pham: Hold on one second.

00:17:16.529 --> 00:17:20.049
&gt;&gt;Trevor Johns: Try the red knob, Dan.

00:17:20.049 --> 00:17:23.571
&gt;&gt;Joe Malin: Push the red button.

00:17:23.571 --> 00:17:24.571
&gt;&gt;Dan Pham: [inaudible]

00:17:24.571 --> 00:17:28.500
&gt;&gt;Trevor Johns: Red knob on the Hangout slider.
Alright, go ahead and try talking again.

00:17:28.500 --> 00:17:30.160
&gt;&gt;Joe Malin: No.

00:17:30.160 --> 00:17:35.360
&gt;&gt;Trevor Johns: See if speakers are on, speakers
are very on.

00:17:35.360 --> 00:17:36.379
&gt;&gt;Dan Galpin: Yes, you're, you're gonna be
loud when we hear you.

00:17:36.379 --> 00:17:37.799
&gt;&gt;Trevor Johns: Try hitting volume up, Dan,
on the Mac.

00:17:37.799 --> 00:17:39.179
&gt;&gt;Joe Malin: Hello?

00:17:39.179 --> 00:17:45.139
&gt;&gt;Trevor Johns: Oh, boy. Alright, we're experiencing
some technical difficulties, stand by for

00:17:45.139 --> 00:17:47.010
a second. Is it muted?

00:17:47.010 --> 00:17:49.759
&gt;&gt;Dan Pham: It is not muted.

00:17:49.759 --> 00:17:54.049
&gt;&gt;Trevor Johns: Alright, red slider is up,
red knob above Hangout is up.

00:17:54.049 --> 00:17:55.760
&gt;&gt;Dan Pham: Yeah, we're all good.

00:17:55.760 --> 00:18:00.820
&gt;&gt;Trevor Johns: Do you see any audio coming
in from the computer on the level satellite?

00:18:00.820 --> 00:18:03.470
&gt;&gt;Dan Pham: Tweaking, some.

00:18:03.470 --> 00:18:07.519
&gt;&gt;Trevor Johns: Try jiggling the cable going
to the speaker down from the board.

00:18:07.519 --> 00:18:08.519
&gt;&gt;Dan Galpin: [laughs]

00:18:08.519 --> 00:18:09.519
&gt;&gt;Trevor Johns: [laughs]

00:18:09.519 --> 00:18:13.120
&gt;&gt;Dan Galpin: As you can see, Trevor is a
prime trouble shooter here.

00:18:13.120 --> 00:18:16.009
&gt;&gt;Joe Malin: Right.

00:18:16.009 --> 00:18:18.909
&gt;&gt;Daniel Pham: Hmm.

00:18:18.909 --> 00:18:22.769
&gt;&gt;Joe Malin: Hmm. Nope.

00:18:22.769 --> 00:18:25.649
&gt;&gt;Dan Galpin: I was expecting some noise there.

00:18:25.649 --> 00:18:27.270
&gt;&gt;Trevor Johns: Oh, we heard something. Try
talking again, let's see if we can hear you

00:18:27.270 --> 00:18:33.299
now. No. Are you getting audio on the computer?
Like do you see his level indicator moving?

00:18:33.299 --> 00:18:34.580
&gt;&gt;Dan Pham: Yes.

00:18:34.580 --> 00:18:35.870
[static is heard]

00:18:35.870 --> 00:18:38.929
&gt;&gt;Trevor Johns: Alright, so the sound board's
working.

00:18:38.929 --> 00:18:40.149
[buzzing sound]

00:18:40.149 --> 00:18:46.740
&gt;&gt;Trevor Johns: Do you have the cables plugged
into the right ports? [laughs]

00:18:46.740 --> 00:18:50.159
&gt;&gt;Joe Malin: Is it plugged in? Is it turned
on?

00:18:50.159 --> 00:18:51.159
[buzzing noise]

00:18:51.159 --> 00:18:55.260
&gt;&gt;Trevor Johns: Hit, hit the volume adjust
button and let's see if we get any audio?

00:18:55.260 --> 00:19:00.550
&gt;&gt;Dan Galpin: These are all the same things
I do when I'm debugging.

00:19:00.550 --> 00:19:01.550
[clicking noise]

00:19:01.550 --> 00:19:02.550
&gt;&gt;Trevor Johns: Ah ha.

00:19:02.550 --> 00:19:04.150
&gt;&gt;Dan Galpin: Ah ha. Alright. That's good.

00:19:04.150 --> 00:19:05.150
&gt;&gt;Trevor Johns: Try talking now.

00:19:05.150 --> 00:19:06.150
&gt;&gt;Jared: How about now?

00:19:06.150 --> 00:19:07.150
&gt;&gt;All: Yeah!

00:19:07.150 --> 00:19:08.150
&gt;&gt;Trevor Johns: We can hear you.

00:19:08.150 --> 00:19:09.150
&gt;&gt;Dan Galpin: We have sound. Excellent.

00:19:09.150 --> 00:19:10.150
&gt;&gt;Dan Pham: It only took two minutes.

00:19:10.150 --> 00:19:11.150
&gt;&gt;Joe Malin: Cool, that's good.

00:19:11.150 --> 00:19:12.150
&gt;&gt;Jared: So I'm having some trouble with a
spinner on my action bar.

00:19:12.150 --> 00:19:13.150
&gt;&gt;Dan Galpin: Ok.

00:19:13.150 --> 00:19:18.790
&gt;&gt;Jared: After using it for a certain period
of time it doesn't seem to matter how long,

00:19:18.790 --> 00:19:23.789
there's no constant on how long or how many
interactions with the app, but basically what'll

00:19:23.789 --> 00:19:30.250
happen is the spinner will stop working and
Android outside of my apps log cap will report

00:19:30.250 --> 00:19:32.210
that the window's already focused and it's
ignoring the focus gain and I've seen this

00:19:32.210 --> 00:19:40.299
all over StackOverflow, but I haven't seen
any answers that pertain to an actual spinner.

00:19:40.299 --> 00:19:41.399
&gt;&gt;Joe Malin: Hmm.

00:19:41.399 --> 00:19:45.950
&gt;&gt;Trevor Johns: And does it actually cause
any problems for your app or is it just messages

00:19:45.950 --> 00:19:46.950
in log cap?

00:19:46.950 --> 00:19:58.519
&gt;&gt;Jared: Well, the user input is ignored,
it doesn't even make it to the app.

00:19:58.519 --> 00:20:02.559
&gt;&gt;Trevor Johns: Ok. Interesting.

00:20:02.559 --> 00:20:09.080
&gt;&gt;Jared: Because the warning, it's Android
is reporting a warning, the tag is "input

00:20:09.080 --> 00:20:13.520
method manager service" and it says "window
already focused, ignoring focus gain of [inaudible]

00:20:13.520 --> 00:20:20.049
.Android internal view. And that, that occurs
in the system log pad. If I look in my apps

00:20:20.049 --> 00:20:21.649
filter, it doesn't show up at all.

00:20:21.649 --> 00:20:25.120
&gt;&gt;Dan Galpin: And what device are you on here?
Just out of curiosity what version and what--?

00:20:25.120 --> 00:20:26.580
&gt;&gt;Jared: This is a Galaxy Nexus.

00:20:26.580 --> 00:20:27.899
&gt;&gt;Dan Galpin: Ok.

00:20:27.899 --> 00:20:28.899
&gt;&gt;Jared: JellyBean.

00:20:28.899 --> 00:20:30.549
&gt;&gt;Dan Galpin: Ok. Hmmm.

00:20:30.549 --> 00:20:33.190
&gt;&gt;Trevor Johns: That's a tough one.

00:20:33.190 --> 00:20:39.090
&gt;&gt;Jared: The nearest I can tell is it happens
when I do a lot of changes to the data adapter

00:20:39.090 --> 00:20:45.290
for the spinner. Like the specific thing is
the the spinner stores a bunch of locations

00:20:45.290 --> 00:20:54.299
and if I delete locations and then reset the
data adapter to the spinner, after maybe three

00:20:54.299 --> 00:21:01.210
or four of those it'll stop functioning. Or
if I use other views in the activity for a

00:21:01.210 --> 00:21:04.510
while and then try and change on the spinner
it stops functioning.

00:21:04.510 --> 00:21:09.090
&gt;&gt;Trevor Johns: Now, are you actually changing
out the spinner's adapter or are you just

00:21:09.090 --> 00:21:11.020
telling it that the data has changed?

00:21:11.020 --> 00:21:14.419
&gt;&gt;Jared: Well, I tried telling it just that
the data has changed, but that didn't seem

00:21:14.419 --> 00:21:18.820
to actually reset the contents, so I'm actually
changing the adapter.

00:21:18.820 --> 00:21:24.179
&gt;&gt;Trevor Johns: Ok. That that might be a hint
there then. Because when you're gonna change

00:21:24.179 --> 00:21:28.120
the adapter there's a lot of work that goes
on under the hood to go and update everything.

00:21:28.120 --> 00:21:31.940
It normally should be enough to make sure
the data is present in your adapter and then

00:21:31.940 --> 00:21:35.440
telling the spinner that the data has changed.
That's that's the sort of the canonical way

00:21:35.440 --> 00:21:36.600
to go and update anything that uses an adapter.

00:21:36.600 --> 00:21:39.159
&gt;&gt;Jared: Could you repeat that? It broke up
a little bit.

00:21:39.159 --> 00:21:42.600
&gt;&gt;Trevor Johns: Sorry, I was saying normally
you want to make sure you update your adapter

00:21:42.600 --> 00:21:47.490
and then tell the spinner or whatever control
you are using that the data has changed. That's

00:21:47.490 --> 00:21:53.169
sort of the canonical way to update any, anything
that is displaying the contents of an adapter

00:21:53.169 --> 00:21:58.761
on Android. So, and my guess is your problem
has something to do with the fact that you're

00:21:58.761 --> 00:22:03.629
changing the adapter out entirely. Now the
other problem is and how do we fix that so

00:22:03.629 --> 00:22:09.379
that when you call data's cha--, when you
notify the data has changed, that update has

00:22:09.379 --> 00:22:14.310
taken effect. And normally that should be
automatic. As soon as you call that method,

00:22:14.310 --> 00:22:18.080
the update, you know the contents should change.
So it's something else going on there too.

00:22:18.080 --> 00:22:24.840
&gt;&gt;Jared: So if I'm using a array list to back
the adapter and I change the array list, then

00:22:24.840 --> 00:22:29.600
I should just tell, call notify data so that
it changes on the adapter?

00:22:29.600 --> 00:22:30.980
&gt;&gt;Trevor Johns: That's correct.

00:22:30.980 --> 00:22:35.159
&gt;&gt;Jared: And then so I need to register the
actual spinner with that, right? Or does that

00:22:35.159 --> 00:22:40.129
automatically call, does that automatically
cause the spinner to update?

00:22:40.129 --> 00:22:44.129
&gt;&gt;Trevor Johns: The spinner should update
as soon as your adapter has been updated.

00:22:44.129 --> 00:22:50.049
&gt;&gt;Dan Galpin: Yeah, well the spinner it would
notify data set changed.

00:22:50.049 --> 00:22:52.991
&gt;&gt;Jared: I think you have to register that.

00:22:52.991 --> 00:22:57.970
&gt;&gt;Dan Galpin: Notify data set change is usually
when you're tied to a, tied to content, right?

00:22:57.970 --> 00:22:58.970
&gt;&gt;Trevor Johns: That's true, that's true.

00:22:58.970 --> 00:22:59.970
&gt;&gt;Joe Malin: Right.

00:22:59.970 --> 00:23:02.120
&gt;&gt;Dan Galpin: So, so we're talking about,
so if you're not actually doing, generating

00:23:02.120 --> 00:23:07.899
this from a content provider, then, then,
then notify set data set change is not gonna

00:23:07.899 --> 00:23:11.200
do anything, 'cause it's gonna, it's gonna
notify the, the red shirt content listeners

00:23:11.200 --> 00:23:12.200
and there aren't gonna be any content listeners
'cause there's no providers.

00:23:12.200 --> 00:23:17.350
&gt;&gt;Jared: Right, which is exactly what I ran
into and I'd call it and nothing would happen.

00:23:17.350 --> 00:23:19.419
&gt;&gt;Dan Galpin: Yes. Umm.

00:23:19.419 --> 00:23:22.929
&gt;&gt;Trevor Johns: I wonder if it's possible
that you're actually making a copy of the

00:23:22.929 --> 00:23:27.991
array when you try to update it and the adapter
still has a handle on the old one? Is it,

00:23:27.991 --> 00:23:30.649
is it possible that might be happening somehow?

00:23:30.649 --> 00:23:36.330
&gt;&gt;Jared: Well, I have a class that keeps track
of that array list and it will reorder things

00:23:36.330 --> 00:23:38.309
in the list, remove things from the list,
add things to the list, and then after that

00:23:38.309 --> 00:23:43.929
function returns is when I'm trying to update
the spinner.

00:23:43.929 --> 00:23:48.869
&gt;&gt;Trevor Johns: Ok. So it probably should
still be the same copy then.

00:23:48.869 --> 00:23:49.869
&gt;&gt;Jared: Right.

00:23:49.869 --> 00:23:50.869
&gt;&gt;Trevor Johns: Interesting.

00:23:50.869 --> 00:23:59.259
&gt;&gt;Jared: So right now the only way I it works
most of the time except for after a little

00:23:59.259 --> 00:24:03.039
bit, after a you know a certain amount of
interaction.

00:24:03.039 --> 00:24:04.039
&gt;&gt;Trevor Johns: Right, but that's where, that's
where you change out, that's where you're

00:24:04.039 --> 00:24:05.789
changing out your, your adapter, though, right?

00:24:05.789 --> 00:24:06.789
&gt;&gt;Jared: Right.

00:24:06.789 --> 00:24:09.530
&gt;&gt;Trevor Johns: Yeah, so you really, you really
shouldn't have to go and change the whole

00:24:09.530 --> 00:24:13.960
adapter, I think, I think that's definitely
not the right way to go. That's, first off

00:24:13.960 --> 00:24:19.679
even ignoring the fact that this is breaking,
swapping an adapter is a a relatively heavy

00:24:19.679 --> 00:24:24.880
operation and when you think about the way
it's supposed to work, your adapter normally

00:24:24.880 --> 00:24:28.450
is tied to a SQL-like database. You know nothing
wrong with tying it to an array or anything

00:24:28.450 --> 00:24:32.639
else, but you know normally they're tied to
a database and every time the database updates,

00:24:32.639 --> 00:24:36.399
you're not gonna go and rebuild a whole new
adapter and update it, it should just update

00:24:36.399 --> 00:24:37.429
in place, so.

00:24:37.429 --> 00:24:44.020
&gt;&gt;Jared: So then how do I get the spinner
to update when I change the array list?

00:24:44.020 --> 00:24:48.559
&gt;&gt;Trevor Johns: That's a good question. It
normally, my understanding was just updating

00:24:48.559 --> 00:24:51.909
the array list should be enough. Dan's searching
on his phone there.

00:24:51.909 --> 00:24:54.999
&gt;&gt;Jared: Do I need to go in and validate the
view maybe, or?

00:24:54.999 --> 00:24:58.090
&gt;&gt;Trevor Johns: You shouldn't have to do that.
That's something that the spinner should do

00:24:58.090 --> 00:24:59.090
itself.

00:24:59.090 --> 00:25:01.210
&gt;&gt;Dan Galpin: Uh huh.

00:25:01.210 --> 00:25:02.610
&gt;&gt;Trevor Johns: Are you finding

00:25:02.610 --> 00:25:08.249
&gt;&gt;Jared: 'Cause that was the very first thing
I tried

00:25:08.249 --> 00:25:09.249
&gt;&gt;Trevor Johns: anything [inaudible] over
there, Dan?

00:25:09.249 --> 00:25:10.249
&gt;&gt;Jared: and it definitely didn't work.

00:25:10.249 --> 00:25:11.249
&gt;&gt;Dan Galpin: Interesting. Yeah, I'd have
to, I'd have to go take a look at what what's

00:25:11.249 --> 00:25:18.470
actually is going on in code. You know my,
my experience is, is that it should notifies

00:25:18.470 --> 00:25:24.980
the data set changed, it's been awhile since,
'cause 'cause the problem is that data set

00:25:24.980 --> 00:25:28.509
change is based on the content observer pattern
and the content observer pattern is…

00:25:28.509 --> 00:25:39.440
&gt;&gt;Trevor Johns: I mean the way you know this
is architected, the spinner, that's your view,

00:25:39.440 --> 00:25:44.740
should be independent, it shouldn't care what's
happening inside of your adapter, which is

00:25:44.740 --> 00:25:50.380
your, you know which is responsible again
for, that's your data observer essentially,

00:25:50.380 --> 00:25:55.669
actually, I believe, or is the data observer
the spinner? In any case, it's supposed to

00:25:55.669 --> 00:26:00.169
be all compartmentalized, your view is independent
of what the adapter is doing and the adapter

00:26:00.169 --> 00:26:05.610
should, you know as soon as there's any updates
to the underlying data model you're using,

00:26:05.610 --> 00:26:12.780
your, your, your array, it should automatically
propagate those updates back up to the view.

00:26:12.780 --> 00:26:18.989
And something, something fishy's going on
here with the between the interaction between

00:26:18.989 --> 00:26:23.049
your array and your adapter. I think we need
to take a look at your code and see what you're

00:26:23.049 --> 00:26:24.049
actually doing there.

00:26:24.049 --> 00:26:27.749
&gt;&gt;Jared: Well, I'm, yeah I should probably,
probably get this on StackOverflow for you

00:26:27.749 --> 00:26:39.350
guys to look at, but basically the pattern
is I have a class that manages a list. When

00:26:39.350 --> 00:26:47.269
that class makes any changes to the list,
it notifies the activity and right now the

00:26:47.269 --> 00:26:50.700
activity resets the adapter, which is obviously
incorrect, but

00:26:50.700 --> 00:26:54.370
&gt;&gt;Dan Galpin: It technically should work,
I mean it's

00:26:54.370 --> 00:26:58.509
&gt;&gt;Trevor Johns: Yeah, it's still not the way
you normally should do it.

00:26:58.509 --> 00:27:00.059
&gt;&gt;Dan Galpin: It's not the way you should
do it, but you shouldn't end up with this

00:27:00.059 --> 00:27:02.529
problem, this seems like, it seems like you're
running into some sort of probably some arrays

00:27:02.529 --> 00:27:06.509
case an issue where there's a there's a the
item that's focused is not actually getting

00:27:06.509 --> 00:27:09.500
cleared correctly. It does sound like there's
some weirdness [inaudible]

00:27:09.500 --> 00:27:12.660
&gt;&gt;Trevor Johns: It's a little odd too that
if you're navigating around your views

00:27:12.660 --> 00:27:13.660
&gt;&gt;Dan Galpin: Uh huh.

00:27:13.660 --> 00:27:16.799
&gt;&gt;Trevor Johns: and not interacting with the
spinner at all, that the spinner will suddenly

00:27:16.799 --> 00:27:17.799
stop working.

00:27:17.799 --> 00:27:22.679
&gt;&gt;Jared: Right, yeah, like we, we implemented
a sliding drawer type of view and if I, if

00:27:22.679 --> 00:27:32.269
I use a view element in that drawer, then
the spinner completely stops working.

00:27:32.269 --> 00:27:36.412
&gt;&gt;Trevor Johns: And this doesn't modify your
array at all, right? Your data's still the

00:27:36.412 --> 00:27:37.412
same?

00:27:37.412 --> 00:27:42.649
&gt;&gt;Jared: Correct. No changes to the data set.
I haven't even modified the array, the data

00:27:42.649 --> 00:27:43.799
adapter. All I've done

00:27:43.799 --> 00:27:47.409
&gt;&gt;Trevor Johns: Ok, so, so yeah, you're not
changing it there, so there's gotta be a second

00:27:47.409 --> 00:27:53.549
issue at play. Yeah, I think we need to take
a look at your code. Something, it's probably

00:27:53.549 --> 00:27:57.600
something very subtle. I mean your overall
approach here doesn't sound like it should

00:27:57.600 --> 00:27:59.380
be causing this many problems.

00:27:59.380 --> 00:28:02.399
&gt;&gt;Jared: Right. That's kind of what I was
feeling and I spent a week and a half trying

00:28:02.399 --> 00:28:03.399
to find

00:28:03.399 --> 00:28:04.399
[laughter]

00:28:04.399 --> 00:28:09.159
&gt;&gt;Jared: this and I'm at wit's end trying
to figure out what is causing this issue,

00:28:09.159 --> 00:28:13.429
so I, I'll post as much as I can on stack
overflow and hopefully it will be enough.

00:28:13.429 --> 00:28:14.429
&gt;&gt;Trevor Johns: Ok.

00:28:14.429 --> 00:28:15.640
&gt;&gt;Dan Galpin: Yeah, thanks.

00:28:15.640 --> 00:28:22.020
&gt;&gt;Trevor Johns: Just be sure to post a link
to the question in the comments, either, was

00:28:22.020 --> 00:28:25.960
your question about this is not the question
earlier about a spinner right, this is you're

00:28:25.960 --> 00:28:27.049
a different person?

00:28:27.049 --> 00:28:31.950
&gt;&gt;Jared: I'm the one at the top of the chat,
but not on Moderator.

00:28:31.950 --> 00:28:38.130
&gt;&gt;Trevor Johns: Ok, ok. Post a link in, actually
chat's gonna get erased when we log out. Can

00:28:38.130 --> 00:28:41.260
you put it as a question on our, the G+ link
for this? Or the G+

00:28:41.260 --> 00:28:42.260
&gt;&gt;Jared: Yes.

00:28:42.260 --> 00:28:46.279
&gt;&gt;Trevor Johns: If you go to Google+ you'll
see a post for this event, leave it as a comment

00:28:46.279 --> 00:28:50.159
there and that'll stick around after the show
ends. Just so we can make sure we can find

00:28:50.159 --> 00:28:51.159
your question after.

00:28:51.159 --> 00:28:52.159
&gt;&gt;Jared: Right.

00:28:52.159 --> 00:28:54.390
&gt;&gt;Trevor Johns: And then we can go ahead and
get you some more information offline.

00:28:54.390 --> 00:28:56.450
&gt;&gt;Jared: Ok. That's good, thank you.

00:28:56.450 --> 00:28:57.450
&gt;&gt;Trevor Johns: Yep.

00:28:57.450 --> 00:29:03.309
&gt;&gt;Joe Malin: Thank you. Thank you for your
patience. Do we have anybody else out there?

00:29:03.309 --> 00:29:09.299
No? Ok, we'll go back to Moderator here. "I
want to use an HDMI capture device to make

00:29:09.299 --> 00:29:17.609
a demo/tutorial videos for my apps. Before
I in I, before I something in a capture device,

00:29:17.609 --> 00:29:23.250
will HDCP prevent me from recording the HDMI
stream when the device is displaying my app?

00:29:23.250 --> 00:29:26.200
Will results vary depending on the Android
device?"

00:29:26.200 --> 00:29:33.460
&gt;&gt;Dan Galpin: So in in modern devices, we've
actually added the ability to have, the contents

00:29:33.460 --> 00:29:37.830
are protected contents versus unprotected
content and I don't believe that there's a

00:29:37.830 --> 00:29:43.210
lot of older devices that, that'll mirror
that don't have this flag, so your application

00:29:43.210 --> 00:29:48.029
can actually choose to say that you're actually
at a protected stream, on, on, on with the

00:29:48.029 --> 00:29:50.720
latest version. I'm like looking at Trevor
like I think that's right.

00:29:50.720 --> 00:29:52.039
&gt;&gt;Trevor Johns: Sounds right to me yeah.

00:29:52.039 --> 00:29:55.519
&gt;&gt;Dan Galpin: So as long as your app isn't
doing that you shouldn't have any issues with

00:29:55.519 --> 00:30:02.230
HDCP. You know we regularly capture a video
on the Friday Review and on the App Clinic

00:30:02.230 --> 00:30:06.559
on Friday as well, so I think that, I think
that's you know the real the real issue is

00:30:06.559 --> 00:30:14.419
actually getting an HDMI capture device that's
going to work well with your Android device

00:30:14.419 --> 00:30:22.240
is probably the, the larger issue there. And
you know, it's, it's, sometimes you know some

00:30:22.240 --> 00:30:30.740
HDMI capture devices may not actually do a
complete negotiation of HDMI parameters so

00:30:30.740 --> 00:30:36.749
we, we've run into that as an issue, so you
know beware. The EDID really does need to,

00:30:36.749 --> 00:30:41.249
some of the Android devices really do need
to get a valid EDID coming back from the device

00:30:41.249 --> 00:30:45.970
they're plugged into and not all capture devices
will actually present that. So that would

00:30:45.970 --> 00:30:51.639
be my, my only, my only concern there. So
my suggestion is get, if you get a capture

00:30:51.639 --> 00:30:56.850
device, make sure that you can return it because
you just, until you've actually tested it

00:30:56.850 --> 00:31:01.889
against your specific device you're not gonna
really know whether or not it's gonna be able

00:31:01.889 --> 00:31:03.299
to do that successfully.

00:31:03.299 --> 00:31:09.340
&gt;&gt;Trevor Johns: Yeah, I think that pretty
much summarizes it. HDMI capture in general

00:31:09.340 --> 00:31:15.990
is always sort of tricky. HDMI is a consumer
protocol. It wasn't really designed to be

00:31:15.990 --> 00:31:20.710
easy to record and you're gonna find yourself,
it's not an Android specific thing, just the

00:31:20.710 --> 00:31:24.830
nature of working with HDMI, you're gonna
find yourself fighting the system all along

00:31:24.830 --> 00:31:31.049
the way as you're trying to record a source.
Unfortunately there's not a good consumer

00:31:31.049 --> 00:31:36.190
replacement available out there. As far as
how we do it here in the studio, we convert

00:31:36.190 --> 00:31:43.690
everything, cameras, tablets, you know everything
we can, we convert into HDSDI, and that's

00:31:43.690 --> 00:31:49.850
a much easier format to work with. But like
Dan said, our HDSDI converter boxes still

00:31:49.850 --> 00:31:55.299
have some trouble decoding the signal from
Android, and that's on the HDMI side and there's

00:31:55.299 --> 00:31:59.570
tricks you can use to get around it. There's
some devices out there that will modify the

00:31:59.570 --> 00:32:06.879
EDID and try and fix the negotiation bugs
we've run into, but it is, it is a bit of

00:32:06.879 --> 00:32:11.929
work and be prepared to spend some time getting
things to give you a nice video signal. I,

00:32:11.929 --> 00:32:22.950
I, I, I'm just gonna go and say curse the
people who made HDMI. [laughs] When it works

00:32:22.950 --> 00:32:23.950
though, it works beautifully, when it works.

00:32:23.950 --> 00:32:24.950
&gt;&gt;Joe Malin: Right.

00:32:24.950 --> 00:32:28.679
&gt;&gt;Trevor Johns: But you'll be able to get
it, I'm sure. If you do need any links to

00:32:28.679 --> 00:32:32.940
possible hardware, feel free to follow up
with us offline, we can give you some product

00:32:32.940 --> 00:32:37.539
recommendations, probably not something we
should cover on the air, just because I don't

00:32:37.539 --> 00:32:41.419
want to go mentioning a whole list of brand
names, but we'd be happy to help you offline

00:32:41.419 --> 00:32:46.380
on a one by one basis, or a one on one basis
and let you know what hardware we use here.

00:32:46.380 --> 00:32:49.019
&gt;&gt;Joe Malin: Ok. Great. Thank you. Anything
else, Dan?

00:32:49.019 --> 00:32:50.019
&gt;&gt;Dan Galpin: Nope.

00:32:50.019 --> 00:32:51.019
&gt;&gt;Joe Malin: No?

00:32:51.019 --> 00:32:54.010
&gt;&gt;Dan Galpin: Enough from me. I'm looking
at the next question already.

00:32:54.010 --> 00:32:58.249
&gt;&gt;Joe Malin: Ok, good, super. Let's "Could
you offer some tips about using ProGuard for

00:32:58.249 --> 00:33:03.529
an app that references many libraries? I have
spent a lot of time on using ProGuard to no

00:33:03.529 --> 00:33:08.749
avail. The primary errors are duplicate class
definitions and library classes depending

00:33:08.749 --> 00:33:10.379
on program classes." Gentlemen?

00:33:10.379 --> 00:33:15.059
&gt;&gt;Dan Galpin: So I mean I think the first
thing to do is make sure you are actually

00:33:15.059 --> 00:33:22.289
starting with our ProGuard file, our ProGuard
configuration file, which we do ship as part

00:33:22.289 --> 00:33:29.499
of the SDK and it's built, it's added into
every project that is created using the eclipse

00:33:29.499 --> 00:33:36.210
tools. And that at least will make sure on
the Android side of things that you are leaving

00:33:36.210 --> 00:33:42.299
the pieces unobfuscated that need to be left
unobfuscated. I think the, the trickier part

00:33:42.299 --> 00:33:48.159
is you know what's going on in your specific
situation involving libraries, and I assume

00:33:48.159 --> 00:33:56.380
we're talking here about just you know Java
libraries rather than library projects? My

00:33:56.380 --> 00:34:01.159
experience is that library projects actually
work quite reasonable well with obfuscation

00:34:01.159 --> 00:34:05.659
because ultimately they're just built into
the same jar and it's all one thing that's

00:34:05.659 --> 00:34:13.060
obfuscated all together. I don't, in terms
of, what's interesting in the case of and

00:34:13.060 --> 00:34:15.429
I think that's actually what you're gonna
want to do is make sure that all your libraries

00:34:15.429 --> 00:34:20.060
are all statically bound into, into one jar
file and rather than trying to obfuscate the

00:34:20.060 --> 00:34:25.770
jar file and then try to bind those into independently
into the into the Android file because otherwise

00:34:25.770 --> 00:34:33.379
it's all gonna get shoved into one giant Dalvik
mess and your there on all of the obfuscated

00:34:33.379 --> 00:34:38.819
names are going to collide. I think that might
be what's going on here. Again I haven't tried

00:34:38.819 --> 00:34:44.059
to do this from the command link tools, but
that's that's my current theory, but again

00:34:44.059 --> 00:34:50.541
you know if you statically link it into one
bundle, I think it will actually do what you

00:34:50.541 --> 00:34:52.359
want it to do. Any comments there?

00:34:52.359 --> 00:34:58.460
&gt;&gt;Trevor Johns: I, that's pretty much the
same thing I'd recommend. Otherwise make sure

00:34:58.460 --> 00:35:04.859
you, there are some things that ProGuard just
has a very hard time optimizing around, especially

00:35:04.859 --> 00:35:12.690
links between you know classes that are not
explicitly referenced or things like that

00:35:12.690 --> 00:35:18.410
and sometimes you just have to tell ProGuard
to exclude those classes from being optimized,

00:35:18.410 --> 00:35:19.410
but

00:35:19.410 --> 00:35:21.940
&gt;&gt;Joe Malin: Alright.

00:35:21.940 --> 00:35:25.220
&gt;&gt;Trevor Johns: But I mean it's gonna depend
on the specifics for your application, so

00:35:25.220 --> 00:35:29.849
without seeing your source code, all we can
do is give you very general advice.

00:35:29.849 --> 00:35:37.240
&gt;&gt;Joe Malin: Great. Thanks. Next question
is: "When taking pictures from the front camera,

00:35:37.240 --> 00:35:43.829
I see the images flipped (mirrored). What's
the best way to handle it? And are there any

00:35:43.829 --> 00:35:49.510
code samples to draw free lines on ImageView
(like the draw something app, but on an ImageView)?"

00:35:49.510 --> 00:35:52.180
&gt;&gt;Trevor Johns: Alright, let's start with
the first question there.

00:35:52.180 --> 00:35:53.180
&gt;&gt;Dan Galpin: Yeah.

00:35:53.180 --> 00:35:59.200
&gt;&gt;Trevor Johns: So the way camera the camera
flipping works if you are looking at a front

00:35:59.200 --> 00:36:03.829
facing camera, Android will automatically
flip it. There are some notes about that in

00:36:03.829 --> 00:36:07.950
the documentation and I don't believe there's
a way to override that behavior. Do you know

00:36:07.950 --> 00:36:08.950
of any Dan?

00:36:08.950 --> 00:36:12.520
&gt;&gt;Dan Galpin: No, not that I know of, I mean
the easiest thing to do of course is to implement

00:36:12.520 --> 00:36:15.490
a matrisk, a matrix to unflip it

00:36:15.490 --> 00:36:16.490
&gt;&gt;Trevor Johns: Right.

00:36:16.490 --> 00:36:19.809
&gt;&gt;Dan Galpin: when you are displaying it,
and that's, that's pretty straight forward.

00:36:19.809 --> 00:36:27.911
The second question is how do I draw lines
on to an ImageView? And the answer is, you

00:36:27.911 --> 00:36:36.470
don't. But what you can do is you can actually
take and create a canvas that is using that

00:36:36.470 --> 00:36:42.790
image as its base and then you can draw lines
onto that canvas and then you can put and

00:36:42.790 --> 00:36:48.140
then you can get and that canvas can be based
on a bitmap and you can put that bitmap back

00:36:48.140 --> 00:36:51.089
into an ImageView. So that's one way of doing
it. Another way of course is to create a custom

00:36:51.089 --> 00:36:57.410
control that is that you could derive from
ImageView and that would be very similar.

00:36:57.410 --> 00:37:01.980
The only difference is you're going to in
the on draw method you're gonna call the standard

00:37:01.980 --> 00:37:07.400
ImageViews draw and then you're going to then
take that canvas and draw whatever else you

00:37:07.400 --> 00:37:11.710
need on top of it. So I think both of those
are kind of reasonable approaches. It really

00:37:11.710 --> 00:37:15.720
depends on the performance. One thing that's
interesting to note about drawing lines is

00:37:15.720 --> 00:37:19.360
if you're talking about drawing lots and lots
and lots of line segments, especially in sort

00:37:19.360 --> 00:37:24.320
of continuous lines or allowing the user to
kind of add draw onto something. If you're

00:37:24.320 --> 00:37:30.280
using the built in line drawing contracts
you will see on accelerated canvases things

00:37:30.280 --> 00:37:33.940
are gonna start getting pretty slow because
every single time you draw a line segment

00:37:33.940 --> 00:37:39.370
and add it to that geometry you're actually
going to generate a new texture, so it might

00:37:39.370 --> 00:37:47.410
be a case where you might want to experiment
with using an, a non-accelerated view or actually

00:37:47.410 --> 00:37:51.500
do off-screen, off-screen drawing, both of
which will have approximately the same impact.

00:37:51.500 --> 00:37:55.300
But definitely if you're talking about this
thing where you want to show sort of continuous

00:37:55.300 --> 00:37:58.839
drawing you may want to play with that from
a performance perspective.

00:37:58.839 --> 00:38:04.330
&gt;&gt;Trevor Johns: Yeah, and as far as actual
code samples, this is a pretty specific use

00:38:04.330 --> 00:38:10.190
case, I'm not aware of any that overlay line
segments on top of a, an ImageView, but there

00:38:10.190 --> 00:38:16.020
are several examples of drawing apps within
the SDK samples. I know there's one in API

00:38:16.020 --> 00:38:21.359
demos, it's not gonna do line segments, but
it does do just points. You can take a look

00:38:21.359 --> 00:38:26.119
at that and at least see how to go and render
things onto a bitmap and then you know go

00:38:26.119 --> 00:38:27.700
and convert that to something more useable.

00:38:27.700 --> 00:38:28.880
&gt;&gt;Dan Galpin: There's also

00:38:28.880 --> 00:38:30.380
&gt;&gt;Trevor Johns: That's probably a good place
to start.

00:38:30.380 --> 00:38:33.380
&gt;&gt;Dan Galpin: Yeah, there's also a pretty
good Android U on doing custom controls.

00:38:33.380 --> 00:38:35.483
&gt;&gt;Trevor Johns: Wait, wait, we should, we
should clarify what that is.

00:38:35.483 --> 00:38:36.483
&gt;&gt;Joe Malin: Right.

00:38:36.483 --> 00:38:39.780
&gt;&gt;Dan Galpin: Android U, yeah I'm sorry, there's
a, in the, in the develop, there's a developer

00:38:39.780 --> 00:38:41.660
guide which we refer to as

00:38:41.660 --> 00:38:42.660
&gt;&gt;Trevor Johns: Developer Training.

00:38:42.660 --> 00:38:43.660
&gt;&gt;Joe Malin: Developer Training.

00:38:43.660 --> 00:38:47.300
&gt;&gt;Dan Galpin: Which we refer to internally
as Android U. Thank you. And in Developer

00:38:47.300 --> 00:38:55.049
Training there is actually a very good section
on, segment on making custom controls and

00:38:55.049 --> 00:39:00.640
it actually draws a pie chart that's animated
on, in WinView and it's pretty cool and so

00:39:00.640 --> 00:39:06.109
that might also help. Not exactly drawing
lines, but it does involve drawing lines.

00:39:06.109 --> 00:39:07.430
&gt;&gt;Trevor Johns: It involves drawing.

00:39:07.430 --> 00:39:09.010
&gt;&gt;Dan Galpin: It involves drawing, yes.

00:39:09.010 --> 00:39:14.280
&gt;&gt;Joe Malin: Right. It would seem to me that
you probably would want to have a custom control

00:39:14.280 --> 00:39:19.800
if you really want to have something like
an ImageView or something like that as part

00:39:19.800 --> 00:39:26.380
of a larger application. Whereas if you're
just trying to write an app that that you

00:39:26.380 --> 00:39:30.799
take pictures and draw lines on top of it
you can probably get away with having some

00:39:30.799 --> 00:39:37.150
sort of canvas and drawing lines on top of
that without necessarily having, having to

00:39:37.150 --> 00:39:38.780
implement it using an ImageView.

00:39:38.780 --> 00:39:43.349
&gt;&gt;Dan Galpin: Yeah. It really depends on on
on how you want you want to end up creating

00:39:43.349 --> 00:39:44.349
your screen.

00:39:44.349 --> 00:39:45.349
&gt;&gt;Joe Malin: Right.

00:39:45.349 --> 00:39:47.620
&gt;&gt;Dan Galpin: You know it's helpful sometimes
to have that that custom view. And again you

00:39:47.620 --> 00:39:50.600
could have that image be a background for
your custom view,

00:39:50.600 --> 00:39:51.600
&gt;&gt;Joe Malin: Right.

00:39:51.600 --> 00:39:53.440
&gt;&gt;Dan Galpin: it doesn't even have to be an
ImageView, it really depends on the kind of

00:39:53.440 --> 00:39:56.099
control you want to have over the reproduction
of that image.

00:39:56.099 --> 00:39:57.099
&gt;&gt;Joe Malin: Right.

00:39:57.099 --> 00:40:00.500
&gt;&gt;Dan Galpin: If you want to have, be able
to use the different ImageView options for

00:40:00.500 --> 00:40:04.000
scaling and positioning, you know then you
might want to base it on ImageView. You've

00:40:04.000 --> 00:40:06.640
got a lot of options though there.

00:40:06.640 --> 00:40:09.250
&gt;&gt;Joe Malin: Ok. Next question.

00:40:09.250 --> 00:40:10.839
&gt;&gt;Trevor Johns: Actually before we move on,

00:40:10.839 --> 00:40:11.839
&gt;&gt;Joe Malin: I'm sorry.

00:40:11.839 --> 00:40:12.839
&gt;&gt;Trevor Johns: is anybody on the Hangout?

00:40:12.839 --> 00:40:13.839
&gt;&gt;Joe Malin: Yeah, that's a good question.

00:40:13.839 --> 00:40:17.320
&gt;&gt;Trevor Johns: No, ok, just a reminder, for
those of you who are watching live and have

00:40:17.320 --> 00:40:22.320
just tuned in, feel free to join us live by
hopping on the Hangout and ask us whatever

00:40:22.320 --> 00:40:27.190
Android-related questions you want. We'd love
to talk to you and we have plenty of open

00:40:27.190 --> 00:40:32.000
spots. Otherwise feel free to go, join us
on our Moderator, where you can go and vote

00:40:32.000 --> 00:40:35.099
on existing questions. So with that, back
to the Moderator queue.

00:40:35.099 --> 00:40:36.279
&gt;&gt;Dan Galpin: Ok.

00:40:36.279 --> 00:40:40.490
&gt;&gt;Joe Malin: Next question for Moderator,
"I'm implementing in-app billing. But when

00:40:40.490 --> 00:40:46.070
I try to buy some item in the sample app I
don't get a response to my app and after a

00:40:46.070 --> 00:40:51.710
few minutes I get an error 'Reason: Took too
long to deliver.' This bug was in known issues

00:40:51.710 --> 00:40:53.560
for almost a year. Is there some update?"

00:40:53.560 --> 00:40:59.220
&gt;&gt;Trevor Johns: Ok, I'll take that one, I
guess. [laughs] There's a lot of things at

00:40:59.220 --> 00:41:00.220
play here.

00:41:00.220 --> 00:41:01.220
&gt;&gt;Dan Galpin: Thanks Trevor.

00:41:01.220 --> 00:41:04.970
&gt;&gt;Trevor Johns: Yeah, there's a lot of different
issues at play here, which is why that's been

00:41:04.970 --> 00:41:09.799
in known issues for so long. We've fixed some
of them. Some of them are still outstanding

00:41:09.799 --> 00:41:16.310
and there's been some new ones that cropped
up, cropped up recently and collectively all

00:41:16.310 --> 00:41:20.390
these will just really affect the rate at
which users see these errors. The number of

00:41:20.390 --> 00:41:26.160
users who see it, it's a small fraction of
users, but as a developer you're likely to

00:41:26.160 --> 00:41:30.039
see, you know you're the one who's receiving
all these reports, so it's probably gonna

00:41:30.039 --> 00:41:34.540
seem a little bit worse than it actually is.
I mean, it's definitely a serious issue. We

00:41:34.540 --> 00:41:36.710
do take it seriously and we are working to
fix it.

00:41:36.710 --> 00:41:37.710
&gt;&gt;Dan Galpin: So, so do

00:41:37.710 --> 00:41:40.079
&gt;&gt;Trevor Johns: I can give you a little bit
of background for, oh, go ahead Dan.

00:41:40.079 --> 00:41:45.049
&gt;&gt;Dan Galpin: So, do I, I had a question.
So he's trying to buy one of the sample items

00:41:45.049 --> 00:41:47.849
in the sample application? Is that, is that?

00:41:47.849 --> 00:41:49.392
&gt;&gt;Trevor Johns: No, this is an actual item,
so.

00:41:49.392 --> 00:41:53.119
&gt;&gt;Dan Galpin: Some item in sample, that's
what I was trying to

00:41:53.119 --> 00:41:56.940
&gt;&gt;Trevor Johns: Well, it's an actual item,
it's not the Android test sys queue

00:41:56.940 --> 00:41:59.760
&gt;&gt;Dan Galpin: So the key thing to make sure
and you know is, is, is, you know the one

00:41:59.760 --> 00:42:03.559
is that the application has been uploaded
to Google Play, that you're testing against

00:42:03.559 --> 00:42:07.829
the same version the version that you've also
activated, not necessarily published, but

00:42:07.829 --> 00:42:11.930
you've actually activated the version that's
been uploaded. There are a lot of things that

00:42:11.930 --> 00:42:12.930
can cause errors.

00:42:12.930 --> 00:42:15.529
&gt;&gt;Trevor Johns: Oh, it wouldn't cause that
error, though. It'll cause other errors.

00:42:15.529 --> 00:42:16.529
&gt;&gt;Dan Galpin: It'll cause others.

00:42:16.529 --> 00:42:19.400
&gt;&gt;Joe Malin: Ok, let's, let's go ahead Trevor,
let's hear what you were going to say.

00:42:19.400 --> 00:42:24.140
&gt;&gt;Trevor Johns: So basically the important
thing to know here is usually when users get

00:42:24.140 --> 00:42:29.790
that error it's one of two things. And the
most common one almost always is it just means

00:42:29.790 --> 00:42:35.170
that the user has been flagged for additional
risk review. And we have roughly 30-second

00:42:35.170 --> 00:42:40.200
time out for an order to complete, if it takes
longer than that Google Play will cancel the

00:42:40.200 --> 00:42:44.600
order and the user will see that error. In
the background we're still performing our

00:42:44.600 --> 00:42:50.430
risk review. If the user comes back and performs
that purchase later, our usual recommendation

00:42:50.430 --> 00:42:54.580
is wait 24 hours. Sometimes it's a lot quicker,
sometimes it can take longer, it depends on

00:42:54.580 --> 00:42:58.790
the individual circumstances, the order will
go through. Basically we have to go and vet

00:42:58.790 --> 00:43:03.700
that user and make sure that the order isn't
fraudulent. We have a, we have a, a machine

00:43:03.700 --> 00:43:07.490
learning based approach to this. We have a
lot of risk factors that go into the, into

00:43:07.490 --> 00:43:12.579
our analysis, and we're actually pretty good
at detecting when orders are fraudulent, occasionally

00:43:12.579 --> 00:43:17.430
there's some false positives and that's usually
what you see here. Now the other case is occasionally

00:43:17.430 --> 00:43:20.560
there are some technical issues like you know
a credit card processor goes down or something

00:43:20.560 --> 00:43:25.980
like that which can also cause that time out.
This is rare. But just so you know every now

00:43:25.980 --> 00:43:29.650
and then if something like that does happen,
that can cause a temporary spike in these

00:43:29.650 --> 00:43:34.029
error messages too. Our advice to users is
still the same. Just come back and try the

00:43:34.029 --> 00:43:38.510
order a little bit later and it will probably,
and well it will go through if you try it

00:43:38.510 --> 00:43:45.240
later, so that's our advice. Again, we do
take these errors really seriously. We handle

00:43:45.240 --> 00:43:50.700
it on a case by case basis and if you do happen
to see it, feel free to open up a ticket with

00:43:50.700 --> 00:43:56.340
Android Developer Support if you go to developer.android.com
at the bottom there's a contact link, a Contact

00:43:56.340 --> 00:44:01.841
Us link, click that, open a ticket and provide
us your order IDs. The support team can go

00:44:01.841 --> 00:44:06.779
and double check and see exactly why that
error happened and escalate it to our engineering

00:44:06.779 --> 00:44:08.980
teams if it's something we haven't seen before.

00:44:08.980 --> 00:44:09.980
&gt;&gt;Joe Malin: Ok.

00:44:09.980 --> 00:44:10.980
&gt;&gt;Dan Galpin: Alright.

00:44:10.980 --> 00:44:18.450
&gt;&gt;Joe Malin: That sounds like the right thing
to do. Next, we're still ok on Hangout, correct?

00:44:18.450 --> 00:44:25.220
Alright, so next question for Moderator, "I
develop OpenGL (heavy in floating point).

00:44:25.220 --> 00:44:29.440
Since the docs (see the link) say that float
and double are equivalent but double is bigger,

00:44:29.440 --> 00:44:32.320
why do you recommend double anyway?" And there's
a link.

00:44:32.320 --> 00:44:37.150
&gt;&gt;Dan Galpin: So we're really talking about
performance here. You know and so obviously

00:44:37.150 --> 00:44:42.900
there are cases in which it's going to make
a difference in terms of performance to be

00:44:42.900 --> 00:44:47.950
sending a lot less data is what happens if
you're sending a you know single precision

00:44:47.950 --> 00:44:53.260
floating point, but there are times in which
having the additional fidelity of actually

00:44:53.260 --> 00:44:58.740
having double precision is going to make things
look better. I think, I think that in general

00:44:58.740 --> 00:45:05.190
what the doc is trying to point out is that
because of the architecture of modern CPUs,

00:45:05.190 --> 00:45:12.040
you're really not going to lose a substantial
amount of performance really any by going

00:45:12.040 --> 00:45:16.059
double most can execute double essentially
as quickly as they execute a single precision

00:45:16.059 --> 00:45:22.579
floating point, you know a bit of arithmetic.
I think, the, the trickier part is whether

00:45:22.579 --> 00:45:26.910
or not you're gonna be saturating memory band
width, you know, how much memory you're actually

00:45:26.910 --> 00:45:30.109
taking up, all of these things. The other
thing of course is that you're actually getting

00:45:30.109 --> 00:45:35.390
into OpenGL into using shaders on the other
hand there is an enormous difference between

00:45:35.390 --> 00:45:40.140
using low, medium and high precision within
your shaders, so there is sort of, there is

00:45:40.140 --> 00:45:44.140
a kind of secondary thing you're talking about,
OpenGL, and if you're going to be using low

00:45:44.140 --> 00:45:48.650
precision in your shaders, it doesn't really
make sense to be feeding these things in with,

00:45:48.650 --> 00:45:54.460
you know, double precision values necessarily.
But, but in, in, in general think you know

00:45:54.460 --> 00:46:00.960
that the doc is just simply saying that filling
point is, is more expensive than integer math

00:46:00.960 --> 00:46:06.400
and double precision doesn't really cost you
performance, it just costs you space, and

00:46:06.400 --> 00:46:10.780
that's, that's I think that's really, I think
that's pretty clear. So.

00:46:10.780 --> 00:46:12.910
&gt;&gt;Joe Malin: Ok. Alright.

00:46:12.910 --> 00:46:15.030
&gt;&gt;Dan Galpin: Mmm hmm.

00:46:15.030 --> 00:46:18.750
&gt;&gt;Joe Malin: Well I'd buy that answer.

00:46:18.750 --> 00:46:20.349
&gt;&gt;Dan Galpin: Yeah.

00:46:20.349 --> 00:46:28.260
&gt;&gt;Joe Malin: Next question on Moderator, "I've
seen a post of you on G." I'm not sure who

00:46:28.260 --> 00:46:34.290
you is. "On G+ about new features of the ADT.
The most interesting feature for me was the

00:46:34.290 --> 00:46:38.720
ability to preview a layout in different ways
(that is multiple languages) side by side.

00:46:38.720 --> 00:46:42.359
Did I miss the ETA or was none present?"

00:46:42.359 --> 00:46:48.010
&gt;&gt;Dan Galpin: I believe that was something,
was that something we showed off at, at Google

00:46:48.010 --> 00:46:49.010
IO?

00:46:49.010 --> 00:46:51.680
&gt;&gt;Trevor Johns: I actually can't remember
off the top of my head.

00:46:51.680 --> 00:46:55.240
&gt;&gt;Dan Galpin: Yeah, I know. It's a, there
were, I know we showed off a whole bunch of

00:46:55.240 --> 00:47:00.460
new features that were not yet available.
I think those are, those are coming you know,

00:47:00.460 --> 00:47:04.860
you know, but we schedule, the way, the way
stuff works by the way with tools is we actually

00:47:04.860 --> 00:47:08.390
develop the tools in the open. So at any time
if you don't see the feature there and we've

00:47:08.390 --> 00:47:11.400
announced it, you can always go up and pull
the tools and build them and see whether it's

00:47:11.400 --> 00:47:16.089
actually in the version that's currently buildable
on AOSP. The tools are really cool that way.

00:47:16.089 --> 00:47:19.190
I mean, I've certainly told someone, "No,
the bug's been fixed, we haven't released

00:47:19.190 --> 00:47:23.130
it, rolled out a new version of the tools,
but if you want, go grab that." So I don't

00:47:23.130 --> 00:47:27.349
know what the state that code currently is
in, but you certainly can go and grab it and

00:47:27.349 --> 00:47:31.970
see whether that can be enabled if it was
something we showed off at Google IO. But

00:47:31.970 --> 00:47:35.109
I don't, I don't remember when we've talked
about the side by side previews.

00:47:35.109 --> 00:47:39.480
&gt;&gt;Trevor Johns: Yeah, I can't remember the
ETA for that being released, but again, like

00:47:39.480 --> 00:47:43.359
Dan said, it's all developed in the open you
can go ahead and you know take a look at the

00:47:43.359 --> 00:47:46.760
code and see what the state of that is. On
top of that actually you could just check

00:47:46.760 --> 00:47:49.230
the release notes on the Android Developer
website

00:47:49.230 --> 00:47:50.230
&gt;&gt;Dan Galpin: Yeah.

00:47:50.230 --> 00:47:54.450
&gt;&gt;Trevor Johns: and see what's actually in
the official releases.

00:47:54.450 --> 00:47:57.510
&gt;&gt;Dan Galpin: Do we have someone on Hangout?

00:47:57.510 --> 00:47:59.809
&gt;&gt;Dan Pham: Yeah we sure do.

00:47:59.809 --> 00:48:02.099
&gt;&gt;Joe Malin: Ok, great. Fire away.

00:48:02.099 --> 00:48:04.779
&gt;&gt;Dan Pham: Ohh, he just went dark.

00:48:04.779 --> 00:48:05.930
&gt;&gt;Joe Malin: Hmm.

00:48:05.930 --> 00:48:07.839
&gt;&gt;Dan Galpin: We've got dark

00:48:07.839 --> 00:48:09.940
&gt;&gt;Trevor Johns: This is our, are you still
there audio wise?

00:48:09.940 --> 00:48:10.940
&gt;&gt;Joe Malin: Hello? Hello?

00:48:10.940 --> 00:48:11.940
&gt;&gt;Dan Pham: You still there?

00:48:11.940 --> 00:48:12.940
&gt;&gt;Male #1: Yes I am. Yes I am.

00:48:12.940 --> 00:48:13.940
&gt;&gt;Trevor Johns: Oh, we can just barely hear
you. Can we crank the volume?

00:48:13.940 --> 00:48:14.940
&gt;&gt;Dan Pham: Yeah.

00:48:14.940 --> 00:48:15.940
&gt;&gt;Joe Malin: Pump up the volume.

00:48:15.940 --> 00:48:16.940
&gt;&gt;Male #1: Ok.

00:48:16.940 --> 00:48:17.940
&gt;&gt;Dan Galpin: How's that?

00:48:17.940 --> 00:48:19.580
&gt;&gt;Male #1: I was wondering, is it recommended
to keep the side drawer?

00:48:19.580 --> 00:48:20.580
&gt;&gt;Trevor Johns: Hold on a sec.

00:48:20.580 --> 00:48:21.859
&gt;&gt;Joe Malin: Hold on, hold on.

00:48:21.859 --> 00:48:25.780
&gt;&gt;Trevor Johns: Is that coming out of the
headphones or the speakers?

00:48:25.780 --> 00:48:26.780
&gt;&gt;Dan Pham: Yes, I don't know why.

00:48:26.780 --> 00:48:27.780
&gt;&gt;Trevor Johns: Hmm.

00:48:27.780 --> 00:48:28.780
&gt;&gt;Dan Pham: Want that.

00:48:28.780 --> 00:48:31.000
&gt;&gt;Joe Malin: We are having a sound problem
again.

00:48:31.000 --> 00:48:33.170
[sound of keys clicking]

00:48:33.170 --> 00:48:35.920
&gt;&gt;Trevor Johns: I wouldn't worry about the
screen, I'd worry about the audio.

00:48:35.920 --> 00:48:36.920
&gt;&gt;Joe Malin: Yeah.

00:48:36.920 --> 00:48:38.210
&gt;&gt;Dan Galpin: Yeah. As far as I'm concerned
put the headphones on and tell us what he's

00:48:38.210 --> 00:48:39.210
saying.

00:48:39.210 --> 00:48:40.210
&gt;&gt;Dan Galpin: Are we back on?

00:48:40.210 --> 00:48:41.839
&gt;&gt;Trevor Johns: Alright, I'm going to listen
to you on head phones.

00:48:41.839 --> 00:48:43.869
&gt;&gt;Dan Galpin: Yes

00:48:43.869 --> 00:48:47.230
&gt;&gt;Male #1: Is it recommended to keep the side
drawer

00:48:47.230 --> 00:48:54.700
&gt;&gt;Trevor Johns: Ok, I think we just lost you
com, oh our Hangout's restarted. The question

00:48:54.700 --> 00:49:00.079
I heard before it restarted was is it recommended
to keep the side drawer? I'm not sure what

00:49:00.079 --> 00:49:05.910
else followed that, so, oh, we're coming back
online. Alright. You still there?

00:49:05.910 --> 00:49:06.910
&gt;&gt;Male #1: Yes.

00:49:06.910 --> 00:49:09.920
&gt;&gt;Trevor Johns: Ok, yeah, sorry, we lost you
for a second there, could you repeat that

00:49:09.920 --> 00:49:10.920
one more time?

00:49:10.920 --> 00:49:15.789
&gt;&gt;Male #1: Is it recommended to keep the side
drawer constant, the pattern? And is there

00:49:15.789 --> 00:49:18.150
any way to put it on the other side of the
screen?

00:49:18.150 --> 00:49:22.099
&gt;&gt;Trevor Johns: Ok, so the question for everyone
else here on set, is it recommended to keep

00:49:22.099 --> 00:49:28.920
the side drawer constant, the pattern constant,
or and also is it possible to move the side

00:49:28.920 --> 00:49:34.840
drawer to the other side of the screen? So
I imagine the side drawer is like in Google+

00:49:34.840 --> 00:49:39.970
or YouTube where you have a, a navigation
sidebar that pops out correct?

00:49:39.970 --> 00:49:40.970
&gt;&gt;Male #1: Yes.

00:49:40.970 --> 00:49:46.220
&gt;&gt;Trevor Johns: Ok, so yes, that is. Ok, so
I'm gonna go ahead and put the headphone,

00:49:46.220 --> 00:49:50.690
actually I think I can keep this on, I look
sort of funny, but to answer your question

00:49:50.690 --> 00:49:51.690
&gt;&gt;Dan Galpin: Not as funny as I look.

00:49:51.690 --> 00:49:55.109
&gt;&gt;Joe Malin: I'm gonna lean down so I can
hear through his head.

00:49:55.109 --> 00:49:57.480
&gt;&gt;Dan Galpin: Now, now we're all looking funny.

00:49:57.480 --> 00:50:01.910
&gt;&gt;Trevor Johns: [laughs] So the side, the
side drawer pattern, it's definitely picked

00:50:01.910 --> 00:50:07.049
up some popularity lately. Besides you know
Google+, YouTube's used it, I believe Facebook

00:50:07.049 --> 00:50:12.240
uses it, Evernote uses it. Definitely a lot
of interest from developers. But it's not

00:50:12.240 --> 00:50:18.200
part of the official Android UI guidelines
yet. It's basically something we're experimenting

00:50:18.200 --> 00:50:23.299
with. If our design team decides that it's
actually something they like and they want

00:50:23.299 --> 00:50:27.480
to promote, they'll add it to the Android
Design website and then it'll probably release

00:50:27.480 --> 00:50:33.440
a sample code for it or at least code snippets,
but it's also entirely possible that they

00:50:33.440 --> 00:50:36.839
decide that it's not the direction they want
to see Android going in right now. We don't

00:50:36.839 --> 00:50:41.049
know. We're still waiting for official feedback
from them. So for that reason we don't have

00:50:41.049 --> 00:50:46.570
much in the way of official guidance on how
to implement, implement this feature and for

00:50:46.570 --> 00:50:50.829
that matter, when we get questions like can
we move it to the other side, we're not even

00:50:50.829 --> 00:50:54.730
sure does that make sense, right? It might
make sense for thing maybe you have a left

00:50:54.730 --> 00:50:59.740
handed user. I can see use cases where it
would make sense to have it on the other side.

00:50:59.740 --> 00:51:05.760
From a technical perspective, we don't have
anything as part of the framework that would

00:51:05.760 --> 00:51:10.480
do this for you. So it's technically possible
to place it on either side since you have

00:51:10.480 --> 00:51:11.480
to write it from scratch.

00:51:11.480 --> 00:51:16.140
&gt;&gt;Dan Galpin: Yeah, my feeling is that since
the overflow menu tends to sit on the other

00:51:16.140 --> 00:51:21.000
side that it makes sense to have this sort
of drawer functionality opposite that, but

00:51:21.000 --> 00:51:24.410
if there's a really compelling reason in your
UI and you know you think you think you're

00:51:24.410 --> 00:51:29.210
breaking new ground, as I said there is no
official pattern on this. So you know I think

00:51:29.210 --> 00:51:33.309
it ultimately comes down to does it serve
the user well? Now the user is actually you

00:51:33.309 --> 00:51:36.770
know has a whole bunch of established applications
that are doing it the other way, so I think

00:51:36.770 --> 00:51:41.190
you know it's certainly worth considering
you know whether or not it's worth changing

00:51:41.190 --> 00:51:46.040
their expectations in this way. And that's
why whenever we deviate from the pattern,

00:51:46.040 --> 00:51:50.710
you know I think from any one of our patterns,
whether it's one of the ones we've actually

00:51:50.710 --> 00:51:56.240
established or one of the ones that is sort
of implied by the ecosystem, I think that

00:51:56.240 --> 00:52:00.900
it's always good to look at the user and say
what is the user, what are the user's expectations

00:52:00.900 --> 00:52:05.030
and, and why would, does it, you know why
does changing this make sense in terms of

00:52:05.030 --> 00:52:06.030
their expectations?

00:52:06.030 --> 00:52:10.200
&gt;&gt;Trevor Johns: Right. And you know like Dan
said, most of the time when you see a drawer

00:52:10.200 --> 00:52:15.529
on the left, it's always on the left. On top
of that also your Up button is always on the

00:52:15.529 --> 00:52:16.529
left.

00:52:16.529 --> 00:52:17.529
&gt;&gt;Dan Galpin: Umm hmm.

00:52:17.529 --> 00:52:19.900
&gt;&gt;Trevor Johns: And users read left to right.
So I think those are all really strong arguments

00:52:19.900 --> 00:52:26.740
for most of the time placing that drawer,
that slide out drawer on the left.

00:52:26.740 --> 00:52:30.829
&gt;&gt;Male #1: Ok. And yeah the only reason I
was wondering that was because I, because

00:52:30.829 --> 00:52:36.180
some users like prefer having actions on the
right versus left and that was the only reason,

00:52:36.180 --> 00:52:38.910
that was the only reason that I thought that
would make sense.

00:52:38.910 --> 00:52:44.319
&gt;&gt;Trevor Johns: So once again for those here
on set, yeah basically the comment was you

00:52:44.319 --> 00:52:48.580
know some users might prefer having action
on the right versus the left, so that would

00:52:48.580 --> 00:52:53.089
be the reason why he was considering doing
that. You know I, I, I think that's, that's

00:52:53.089 --> 00:52:57.799
something, it's definitely a valid point to
consider. But again you have to weigh it with

00:52:57.799 --> 00:53:00.779
what the rest of the ecosystem's doing and
what's familiar to users.

00:53:00.779 --> 00:53:01.779
&gt;&gt;Joe Malin: Right.

00:53:01.779 --> 00:53:06.670
&gt;&gt;Trevor Johns: So it's a very fine line there,
there's not a 100% correct answer, but I'd

00:53:06.670 --> 00:53:10.829
say like the 90% correct answer is that it
should usually be on the left.

00:53:10.829 --> 00:53:17.810
&gt;&gt;Joe Malin: I was, yeah, I was gonna add
that Google TV for instance has a pattern

00:53:17.810 --> 00:53:22.970
in which they replace the top action bar with
a side action bar and the side action bar

00:53:22.970 --> 00:53:23.970
is on the left.

00:53:23.970 --> 00:53:24.970
[high pitched sound heard]

00:53:24.970 --> 00:53:32.180
&gt;&gt;Joe Malin: Just because TV displays have
a substantially different aspect ratio and

00:53:32.180 --> 00:53:40.300
form than mobile device displays. And as I
said, they're the just bars on the left and

00:53:40.300 --> 00:53:43.180
there's no option is usually provided

00:53:43.180 --> 00:53:45.460
&gt;&gt;Trevor Johns: Assuming it's feedback, Dan.
Sorry.

00:53:45.460 --> 00:53:50.510
&gt;&gt;Joe Malin: No option is usually provided
to move it to the right. I would say that

00:53:50.510 --> 00:53:54.920
your specific questions about should it use
the same pattern? Yes. Should it stay on,

00:53:54.920 --> 00:53:59.660
should there be an option to move it to the
right? I would say that it's not really necessary.

00:53:59.660 --> 00:54:05.400
I mean it's, you know in general most users
don't need to have that sort of option, it's

00:54:05.400 --> 00:54:06.400
preferable to have

00:54:06.400 --> 00:54:07.410
&gt;&gt;Dan Galpin: I would say

00:54:07.410 --> 00:54:11.390
&gt;&gt;Joe Malin: a consistent UI rather than one
that's infinitely malleable.

00:54:11.390 --> 00:54:17.480
&gt;&gt;Dan Galpin: Yeah, I, you know, it's, I would
say play with it I mean you know and see what,

00:54:17.480 --> 00:54:18.480
see what responses

00:54:18.480 --> 00:54:19.480
&gt;&gt;Joe Malin: Right.

00:54:19.480 --> 00:54:21.090
&gt;&gt;Dan Galpin: If you're getting a lot of feedback
saying they want it on the other side, then

00:54:21.090 --> 00:54:24.720
I would say go for it, you know 'cause you
know always ultimately you want to listen

00:54:24.720 --> 00:54:30.839
to your users and that's something we kind
of believe here to a pretty strong degree.

00:54:30.839 --> 00:54:36.820
But, but again you know I think that there's
a lot there's a lot of of prior art that actually

00:54:36.820 --> 00:54:37.990
has it on the left hand side.

00:54:37.990 --> 00:54:38.990
&gt;&gt;Joe Malin: Yeah.

00:54:38.990 --> 00:54:42.230
&gt;&gt;Dan Galpin: And with Google TV a lot of
the reason we do we have it on the left is

00:54:42.230 --> 00:54:43.640
because of navigation because

00:54:43.640 --> 00:54:44.640
&gt;&gt;Joe Malin: Right.

00:54:44.640 --> 00:54:46.809
&gt;&gt;Dan Galpin: you know we're, we're using
a four-way keypad and so it's easier to navigate

00:54:46.809 --> 00:54:49.619
into that from the left than it is to navigate
up and then move through a bunch of options,

00:54:49.619 --> 00:54:54.740
so I think that was, that was a lot of the
design decision around that as well.

00:54:54.740 --> 00:54:56.432
&gt;&gt;Male #1: Alright. Thank you.

00:54:56.432 --> 00:54:57.432
&gt;&gt;Joe Malin: Yeah, you're welcome. Thank you
for calling in.

00:54:57.432 --> 00:55:02.809
&gt;&gt;Trevor Johns: Alright, so we have about
two minutes left it looks like.

00:55:02.809 --> 00:55:03.809
&gt;&gt;Joe Malin: Ok.

00:55:03.809 --> 00:55:08.430
&gt;&gt;Trevor Johns: And I don't think anyone is
waiting on Hangouts, so let's go ahead

00:55:08.430 --> 00:55:09.430
&gt;&gt;Joe Malin: Wanna try on this

00:55:09.430 --> 00:55:10.430
&gt;&gt;Trevor Johns: and take one last question.

00:55:10.430 --> 00:55:14.450
&gt;&gt;Joe Malin: "Could you recap my question
on the missing shortcut docs last week? Couldn't

00:55:14.450 --> 00:55:18.500
hear most of your answer due to static. My
main use case is to replicate the place on

00:55:18.500 --> 00:55:24.450
home screen menu item in the detail view of
the people app. Is this possible with App

00:55:24.450 --> 00:55:29.911
Widget?" I think this is where we discovered
that it wasn't really an app widget, it was

00:55:29.911 --> 00:55:30.911
a shortcut.

00:55:30.911 --> 00:55:33.720
&gt;&gt;Trevor Johns: That's correct. And the docs
were missing for those.

00:55:33.720 --> 00:55:34.720
&gt;&gt;Joe Malin: Ahh.

00:55:34.720 --> 00:55:38.550
&gt;&gt;Trevor Johns: Yeah, and as somebody who
works with the docs, do you wanna take this

00:55:38.550 --> 00:55:39.550
one?

00:55:39.550 --> 00:55:45.990
&gt;&gt;Joe Malin: Yes, the only thing that we can
do at this point is you know have you file

00:55:45.990 --> 00:55:52.450
a bug to say we need documentation on this.
Other than that, you know I can take it back

00:55:52.450 --> 00:55:57.680
to the documentation team and say we need
more documentation on this, but that looks

00:55:57.680 --> 00:56:03.400
like it was a feature that was mostly exploited
by the People App because they knew something

00:56:03.400 --> 00:56:06.530
about how the thing works and they could go
directly to the

00:56:06.530 --> 00:56:07.530
[high-pitched beeping]

00:56:07.530 --> 00:56:10.509
&gt;&gt;Joe Malin: engineers. And other than that
I'm not sure that there's anything else that

00:56:10.509 --> 00:56:11.509
we could do.

00:56:11.509 --> 00:56:16.470
&gt;&gt;Trevor Johns: Yeah, the People App is open
source though. So, I always hate

00:56:16.470 --> 00:56:17.470
&gt;&gt;Joe Malin: That's true, I didn't think about
that.

00:56:17.470 --> 00:56:21.829
&gt;&gt;Trevor Johns: yeah, I always hate like sending
people off to the, say go look at the source

00:56:21.829 --> 00:56:24.580
when there's other options available, but
in this case there really isn't much else

00:56:24.580 --> 00:56:30.240
you can do at the moment, so go to source.android.com
and you can check out the Android source tree.

00:56:30.240 --> 00:56:34.079
It's a bit large, but you can take a look
at the People's App and see how they implement

00:56:34.079 --> 00:56:38.500
this and that's probably the best resource
you have available at the moment.

00:56:38.500 --> 00:56:40.833
&gt;&gt;Joe Malin: Right. Yep. I would agree with
that at this point.

00:56:40.833 --> 00:56:41.833
&gt;&gt;Trevor Johns: Alright and I think we're
out of time.

00:56:41.833 --> 00:56:43.450
&gt;&gt;Joe Malin: Yes, it's, yeah pretty much.

00:56:43.450 --> 00:56:44.450
&gt;&gt;Dan Galpin: Alright.

00:56:44.450 --> 00:56:45.450
[beep, beep]

00:56:45.450 --> 00:56:46.510
&gt;&gt;Dan Pham: That's it, guys.

00:56:46.510 --> 00:56:48.349
&gt;&gt;Trevor Johns: Yep, there it is,

00:56:48.349 --> 00:56:49.980
&gt;&gt;Joe Malin: There's the tone.

00:56:49.980 --> 00:56:52.550
&gt;&gt;Dan Galpin: Thank you for joining us.

00:56:52.550 --> 00:56:56.760
&gt;&gt;Trevor Johns: So again for those of you
who are joining us for the first time, we

00:56:56.760 --> 00:57:01.849
are on every Wednesday at 2 p.m. Pacific.
We love to answer your questions. You can

00:57:01.849 --> 00:57:06.740
submit them ahead of time on our Moderator
queue –vote them up--or join us live and

00:57:06.740 --> 00:57:08.790
we'll see you next week, Wednesday, 2 p.m.

00:57:08.790 --> 00:57:10.349
&gt;&gt;Joe Malin: Great. Until then.

00:57:10.349 --> 00:57:11.950
&gt;&gt;Trevor Johns: Alright. See you everyone.

00:57:11.950 --> 00:57:12.709
&gt;&gt;Joe Malin: Wrong hand.

