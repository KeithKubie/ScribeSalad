WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:01.690
Cameron, why don't you try drawing the

00:00:01.690 --> 00:00:04.450
critical rendering path diagram for this example?

00:00:04.450 --> 00:00:06.870
&gt;&gt; Sure. Let's see. First things first. We

00:00:06.870 --> 00:00:09.300
request this HTML. Then we start to build the

00:00:09.300 --> 00:00:11.970
DOM and come across this CSS file, which of

00:00:11.970 --> 00:00:14.290
course we have to request. We continue to build

00:00:14.290 --> 00:00:17.130
the DOM and then immediately encounter app.js, which

00:00:17.130 --> 00:00:19.830
is parser blocking. So we halt construction of the

00:00:19.830 --> 00:00:22.710
DOM, request, and wait for the file. When we

00:00:22.710 --> 00:00:25.670
finally get the CSS and have built the CSSOM,

00:00:25.670 --> 00:00:29.580
we can run app.js and then continue to build the DOM. And then we hit

00:00:29.580 --> 00:00:32.360
the next script, timing.js, so we block

00:00:32.360 --> 00:00:34.890
parsing on the download. Does that sound right?

00:00:34.890 --> 00:00:38.860
&gt;&gt; Yep, that's right. However, this could take quite a while. First

00:00:38.860 --> 00:00:42.460
we block on app.js and wait for it to arrive. Then on

00:00:42.460 --> 00:00:47.030
timing.js, and wait for that to arrive. To optimize this particular case,

00:00:47.030 --> 00:00:50.920
the browser has a special process called a preload scanner, which peaks

00:00:50.920 --> 00:00:52.880
ahead in the document, and tries to

00:00:52.880 --> 00:00:56.270
discover critical CSS and JavaScript files, like timing.js.

00:00:56.270 --> 00:00:59.270
&gt;&gt; Well that's clever, so even though the parser is

00:00:59.270 --> 00:01:01.850
blocked, we can discover timing.js

00:01:01.850 --> 00:01:04.080
and initiate downloads for critical resources?

00:01:04.080 --> 00:01:06.822
&gt;&gt; Yeah, exactly, so instead of waiting to build

00:01:06.822 --> 00:01:10.295
the CSS object model, and run app.js before requesting.

00:01:10.295 --> 00:01:15.960
&gt;&gt; timing.js. The preload scanner finds timing.js and requests it while the

00:01:15.960 --> 00:01:17.250
parser is blocked.

00:01:17.250 --> 00:01:19.510
&gt;&gt; Cool. Well, that's pretty interesting. Where

00:01:19.510 --> 00:01:21.640
can I learn more about the preload scanner?

00:01:21.640 --> 00:01:24.490
&gt;&gt; Check out the instructor notes. You'll find a couple of good resources

00:01:24.490 --> 00:01:28.730
there that will help explain why the preload scanner exists and how it operates.

