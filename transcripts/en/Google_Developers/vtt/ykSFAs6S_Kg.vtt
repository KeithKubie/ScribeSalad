WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.320
[MUSIC PLAYING]

00:00:05.570 --> 00:00:06.380
IDO GREEN: Hi.

00:00:06.380 --> 00:00:07.930
Welcome to our new
series of videos

00:00:07.930 --> 00:00:10.670
that will bring you news
and best practices on Action

00:00:10.670 --> 00:00:11.920
on Google.

00:00:11.920 --> 00:00:14.900
I'm Ido Green, a developer
advocate for Action on Google.

00:00:14.900 --> 00:00:16.820
I love to help
entrepreneurs and developers

00:00:16.820 --> 00:00:18.180
to be more productive.

00:00:18.180 --> 00:00:20.000
So in this video, we
are going to learn

00:00:20.000 --> 00:00:23.540
how to build an app for Google
Assistant that use your service

00:00:23.540 --> 00:00:24.300
logic.

00:00:24.300 --> 00:00:25.650
Cool?

00:00:25.650 --> 00:00:29.040
The Google Assistant gives
users their own personal Google

00:00:29.040 --> 00:00:31.830
and help them find,
organize, and get

00:00:31.830 --> 00:00:33.990
things done in their world.

00:00:33.990 --> 00:00:36.690
The main way users interact
with Google Assistant

00:00:36.690 --> 00:00:39.660
is by carrying on a
conversation with it.

00:00:39.660 --> 00:00:41.400
You can extend the
Google Assistant

00:00:41.400 --> 00:00:44.490
by building apps that
let users get things done

00:00:44.490 --> 00:00:47.010
with your product and services.

00:00:47.010 --> 00:00:49.560
Today, we are going to build
a new app for the Google

00:00:49.560 --> 00:00:53.220
Assistant that will give us
the current bitcoin price.

00:00:53.220 --> 00:00:54.760
Cool?

00:00:54.760 --> 00:00:56.500
How does it work?

00:00:56.500 --> 00:00:59.430
The users need to
invoke your app.

00:00:59.430 --> 00:01:03.710
You say a phrase like, OK,
Google, talk to bitcoin info.

00:01:03.710 --> 00:01:07.130
This tell Google the name
of the app to talk to.

00:01:07.130 --> 00:01:09.350
&gt;From this point
onwards, the user

00:01:09.350 --> 00:01:11.010
is now talking to your app.

00:01:11.010 --> 00:01:13.910
Your app generate a
dialog output, which

00:01:13.910 --> 00:01:15.710
is then spoken to the user.

00:01:15.710 --> 00:01:17.540
The user then make
request, your app

00:01:17.540 --> 00:01:20.330
process it, and
replies back again.

00:01:20.330 --> 00:01:23.120
The user has two-way dialogue
until the conversation

00:01:23.120 --> 00:01:25.390
is finished.

00:01:25.390 --> 00:01:28.660
Let's go to the console
of API.AI and log in.

00:01:28.660 --> 00:01:30.890
Once you click
the Google button,

00:01:30.890 --> 00:01:34.210
you will get an option to
create your first app, or agent,

00:01:34.210 --> 00:01:36.870
in the API.AI terminology.

00:01:36.870 --> 00:01:41.410
API.AI agent will enable our
app to phrase the user request

00:01:41.410 --> 00:01:44.280
and trigger the
fulfillment for our app.

00:01:44.280 --> 00:01:47.560
We'll be able to return
with the right answer.

00:01:47.560 --> 00:01:53.250
After the login, you could
create the first API.AI agent.

00:01:53.250 --> 00:01:54.580
What are entities?

00:01:54.580 --> 00:01:56.820
Entities are the value type.

00:01:56.820 --> 00:02:00.280
They help us group
items by their type.

00:02:00.280 --> 00:02:03.110
We are trying to capture
from the user phrases,

00:02:03.110 --> 00:02:05.900
kind of like filling out
the form requesting details

00:02:05.900 --> 00:02:07.600
from the user.

00:02:07.600 --> 00:02:10.720
API.AI look to
extract those out.

00:02:10.720 --> 00:02:14.150
And we will do the follow-up
prompts until done.

00:02:14.150 --> 00:02:18.170
This is our entity's
look in API.AI.

00:02:18.170 --> 00:02:19.900
Let's build the WebHook.

00:02:19.900 --> 00:02:23.930
We've got for you two options
here, either build it yourself

00:02:23.930 --> 00:02:26.780
or, if you don't have a
service running right now,

00:02:26.780 --> 00:02:29.660
you could use our WebHook
by just plugging it

00:02:29.660 --> 00:02:31.370
into your fulfillment.

00:02:31.370 --> 00:02:34.440
If you wish to test the
WebHook from your own servers,

00:02:34.440 --> 00:02:37.040
you could take the code below
and use your own servers

00:02:37.040 --> 00:02:38.840
with node.js.

00:02:38.840 --> 00:02:41.870
This is the index.js that
contain all the logic

00:02:41.870 --> 00:02:43.250
for our WebHook.

00:02:43.250 --> 00:02:45.200
Let's create our intents.

00:02:45.200 --> 00:02:46.760
What is an intent?

00:02:46.760 --> 00:02:50.850
An intent is triggered by a
series of user says phrases.

00:02:50.850 --> 00:02:52.790
This could be
something like, please

00:02:52.790 --> 00:02:56.090
tell me what is the bitcoin
value in US dollars,

00:02:56.090 --> 00:03:00.210
or what is the
blockchain size today.

00:03:00.210 --> 00:03:03.750
In most cases, you need
to specify 10, 12 phrases

00:03:03.750 --> 00:03:07.110
to train API.AI's machine
learning algorithms.

00:03:07.110 --> 00:03:10.410
Then, even if the user doesn't
say exactly the words you type

00:03:10.410 --> 00:03:14.200
here, API can still
understand them.

00:03:14.200 --> 00:03:15.820
You should create
separate intents

00:03:15.820 --> 00:03:18.260
for different types of action.

00:03:18.260 --> 00:03:21.040
Don't try to combine
them all together.

00:03:21.040 --> 00:03:24.210
In our examples, we'll
create only two intents--

00:03:24.210 --> 00:03:27.340
price intent-- this intent
will handle the main action,

00:03:27.340 --> 00:03:28.900
fetching the bitcoin price--

00:03:28.900 --> 00:03:30.390
and a quit intent.

00:03:30.390 --> 00:03:32.410
This intent will handle
the part where the user

00:03:32.410 --> 00:03:34.200
wishes to exit the app.

00:03:34.200 --> 00:03:36.430
Build the price intent.

00:03:36.430 --> 00:03:40.060
After we have our own
new currency entity,

00:03:40.060 --> 00:03:44.584
if you notice the at before
the word, it's not a mistake.

00:03:44.584 --> 00:03:46.000
This is the way
that we will refer

00:03:46.000 --> 00:03:48.190
to our new entity from now on.

00:03:48.190 --> 00:03:51.100
Think of it as a new
special sign to show us

00:03:51.100 --> 00:03:53.590
that we are referring to
our new entity, and not

00:03:53.590 --> 00:03:55.339
just another bitcoin.

00:03:55.339 --> 00:03:57.880
It's time to create the intent
that will fetch us the bitcoin

00:03:57.880 --> 00:03:59.230
information.

00:03:59.230 --> 00:04:02.020
First click on the
Create Intent button.

00:04:02.020 --> 00:04:04.720
Second, start typing
a few sentences

00:04:04.720 --> 00:04:07.870
that you will want to use to
get information on bitcoin.

00:04:07.870 --> 00:04:10.450
For example, please tell
me what is the value

00:04:10.450 --> 00:04:12.880
of bitcoin today in US dollars.

00:04:12.880 --> 00:04:15.190
Type a few sentences
so API.AI can

00:04:15.190 --> 00:04:17.260
start training its algorithms.

00:04:17.260 --> 00:04:19.209
You could see that,
while you type,

00:04:19.209 --> 00:04:22.930
API.AI automatically
recognize the phrases includes

00:04:22.930 --> 00:04:24.650
one of the entities.

00:04:24.650 --> 00:04:26.630
So it's highlighted.

00:04:26.630 --> 00:04:28.970
Next, we are skipping
the events part.

00:04:28.970 --> 00:04:31.610
And in the API.AI
Action section,

00:04:31.610 --> 00:04:36.070
we need, one, to type price
as the action name that we

00:04:36.070 --> 00:04:37.810
will pass to our WebHook.

00:04:37.810 --> 00:04:41.350
You could think of it as
our key for this intent

00:04:41.350 --> 00:04:43.210
when invoking the WebHook.

00:04:43.210 --> 00:04:46.570
This information will let us
run the right functionality

00:04:46.570 --> 00:04:48.410
in the WebHook.

00:04:48.410 --> 00:04:51.000
Make sure that our
current entity is not

00:04:51.000 --> 00:04:54.540
required, as in this
video, we are not

00:04:54.540 --> 00:04:57.160
going to use it due to
the time limitation.

00:04:57.160 --> 00:04:59.790
However, if you wish
to extend it later,

00:04:59.790 --> 00:05:02.100
you could require it
and have several options

00:05:02.100 --> 00:05:05.530
to get the value of the bitcoin
in different currencies.

00:05:05.530 --> 00:05:07.870
Finally, in the
Fulfillment section,

00:05:07.870 --> 00:05:11.230
you need to check
the WebHook checkbox.

00:05:11.230 --> 00:05:13.060
But before we could
do that, you need

00:05:13.060 --> 00:05:16.900
to click on the Fulfillment
menu item and enable WebHook.

00:05:16.900 --> 00:05:20.500
After you enable it,
you will get the option

00:05:20.500 --> 00:05:24.240
to enter your
WebHook parameters.

00:05:24.240 --> 00:05:27.270
In this phase, you
could just fill the URL

00:05:27.270 --> 00:05:30.470
that we gave you in the demo.

00:05:30.470 --> 00:05:32.740
Now click Save, and
return to the intent,

00:05:32.740 --> 00:05:34.870
and click on Price Intent.

00:05:34.870 --> 00:05:36.820
Scroll all the way
down, and you'll

00:05:36.820 --> 00:05:39.630
see the new option, Fulfillment.

00:05:39.630 --> 00:05:42.000
Please make sure to
check the two checkboxes

00:05:42.000 --> 00:05:48.300
so API.AI will know to send
this information to our WebHook.

00:05:48.300 --> 00:05:51.570
Let's build our Quit intent.

00:05:51.570 --> 00:05:53.970
A good design principle
is to allow our users

00:05:53.970 --> 00:05:55.800
to end the conversation.

00:05:55.800 --> 00:05:58.380
You should click again
on Create Intent button,

00:05:58.380 --> 00:06:00.540
then start typing
a few sentences

00:06:00.540 --> 00:06:04.240
that you will want to see when
you're ending the conversation.

00:06:04.240 --> 00:06:08.790
For example, bye-bye,
or quit bitcoin info.

00:06:08.790 --> 00:06:11.960
Below is how this
content will look like.

00:06:11.960 --> 00:06:14.700
You need to check the
End Conversation checkbox

00:06:14.700 --> 00:06:16.500
so that it will
know to really end

00:06:16.500 --> 00:06:19.520
the conversation at this point.

00:06:19.520 --> 00:06:22.060
Let's test the price intent.

00:06:22.060 --> 00:06:24.070
It's very important
to check your work

00:06:24.070 --> 00:06:25.750
while you are developing it.

00:06:25.750 --> 00:06:29.080
Luckily for us, it's very
easy to do with API.AI.

00:06:29.080 --> 00:06:31.780
All you need to do is, after
that you create the intents,

00:06:31.780 --> 00:06:33.980
is to look at the right
side of the screen.

00:06:33.980 --> 00:06:37.780
Type what you wish to test,
and you will get the response.

00:06:37.780 --> 00:06:40.510
In the example below,
we type, please

00:06:40.510 --> 00:06:44.150
tell me what is the price
of bitcoin in US dollars.

00:06:44.150 --> 00:06:46.600
And as you can see here,
it's working nicely,

00:06:46.600 --> 00:06:49.330
since we got the
price in the response.

00:06:49.330 --> 00:06:51.640
A quick way to test
how our new app works

00:06:51.640 --> 00:06:53.920
on Google Home and
other devices will

00:06:53.920 --> 00:06:56.110
be to use our web simulator.

00:06:56.110 --> 00:06:58.910
We need to click on Integrations
in the left side menu,

00:06:58.910 --> 00:07:03.180
and then click on Publish
checkbox in the top right side.

00:07:03.180 --> 00:07:06.910
On Actions on Google, as
it will be our integration.

00:07:06.910 --> 00:07:08.710
Click on the Test button.

00:07:08.710 --> 00:07:11.520
If this is the first time you
are enabling the integration,

00:07:11.520 --> 00:07:14.380
you will need to click on the
switch at the top right corner

00:07:14.380 --> 00:07:16.390
to enable this integration.

00:07:16.390 --> 00:07:18.820
The next step is to
click on View in order

00:07:18.820 --> 00:07:22.180
to open the Actions
on Google simulator.

00:07:22.180 --> 00:07:23.960
You can see it in the image.

00:07:23.960 --> 00:07:28.210
You'll get a screen that lets
you talk with the simulator.

00:07:28.210 --> 00:07:32.284
On the left side, you can
type or talk your commands,

00:07:32.284 --> 00:07:33.700
and on the right
side, you can see

00:07:33.700 --> 00:07:37.090
the response in a JSON format.

00:07:37.090 --> 00:07:39.250
Here, we get the
full conversation

00:07:39.250 --> 00:07:41.890
that tests our two intents.

00:07:41.890 --> 00:07:44.500
If the web simulators
give you an error,

00:07:44.500 --> 00:07:48.600
then you need to click on
this link and activate it.

00:07:48.600 --> 00:07:51.240
We could also test our action
with the automatic page

00:07:51.240 --> 00:07:54.300
that API.AI created
for our new app.

00:07:54.300 --> 00:07:56.730
First you need to click on
Deploy so the new app will

00:07:56.730 --> 00:07:58.590
be available to the world.

00:07:58.590 --> 00:08:00.960
Then, you need to customize
the URL so it will be easier

00:08:00.960 --> 00:08:02.190
to remember it.

00:08:02.190 --> 00:08:04.140
In our case, we
type bitcoin info.

00:08:04.140 --> 00:08:06.710
Now you could try it.

00:08:06.710 --> 00:08:09.260
It's very powerful,
as you could now

00:08:09.260 --> 00:08:11.000
share your creation
with the world,

00:08:11.000 --> 00:08:13.280
and it will work
on any device that

00:08:13.280 --> 00:08:15.990
is connected to the
internet and got a browser.

00:08:15.990 --> 00:08:17.090
That's it for today.

00:08:17.090 --> 00:08:18.440
Good job.

00:08:18.440 --> 00:08:19.790
Thank you for watching.

00:08:19.790 --> 00:08:22.340
We'd love your feedback, so
please don't be a stranger,

00:08:22.340 --> 00:08:23.880
and leave us comments below.

00:08:23.880 --> 00:08:26.980
Until next time, be strong,
and create an amazing Assistant

00:08:26.980 --> 00:08:27.910
apps.

00:08:27.910 --> 00:08:29.110
Bye-bye.

00:08:29.110 --> 00:08:32.460
[MUSIC PLAYING]

