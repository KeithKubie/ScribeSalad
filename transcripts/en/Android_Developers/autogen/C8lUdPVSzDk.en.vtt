WEBVTT
Kind: captions
Language: en

00:00:00.384 --> 00:00:01.550
 welcome 

00:00:01.550 --> 00:00:03.841
 I'm Joanna Smith, I'm here with Android Development 

00:00:03.841 --> 00:00:06.610
 Pattern to show you our new model of permissions at run time 

00:00:06.610 --> 00:00:07.850
 With Android Marshmallow. 

00:00:07.850 --> 00:00:10.600
 So, let's take a look. 

00:00:10.600 --> 00:00:12.420
 It is frightening to prove an application 

00:00:12.420 --> 00:00:14.890
 Requires 14 different permissions. 

00:00:14.890 --> 00:00:16.820
 But it's an application for Android Marshmallow 

00:00:16.820 --> 00:00:20.150
 It can now ask the user permission at run time 

00:00:20.150 --> 00:00:22.030
 Instead of the installation time. 

00:00:22.030 --> 00:00:24.650
 Hopefully now, it will help avoid a fixation dialogue 

00:00:24.650 --> 00:00:27.720
 Horrible like that. 

00:00:27.720 --> 00:00:30.440
 And because run-time permissions are required for all 

00:00:30.440 --> 00:00:32.330
 Programs that target Marshmallow, so 

00:00:32.330 --> 00:00:35.670
 There are a few additional steps that will help you avoid exceptions 

00:00:35.670 --> 00:00:36.810
 Horrible runtime. 

00:00:36.810 --> 00:00:40.100
 Because, we all come across. 

00:00:40.100 --> 00:00:42.700
 So in the beginning, make sure the platform. 

00:00:42.700 --> 00:00:46.440
 Late run-time permissions are compatible with older SDKs versions 

00:00:46.440 --> 00:00:49.580
 By reference to the original installation time request. 

00:00:49.580 --> 00:00:51.770
 So if your user is on an older SDK, 

00:00:51.770 --> 00:00:53.520
 You'll know that permissions are taken 

00:00:53.520 --> 00:00:55.230
 When the application was installed. 

00:00:55.230 --> 00:00:57.330
 If your user is on Marshmallow, 

00:00:57.330 --> 00:01:00.630
 You can not be sure then. 

00:01:00.630 --> 00:01:03.440
 This brings us to the next step, 

00:01:03.440 --> 00:01:06.370
 Check the status of the permissions. 

00:01:06.370 --> 00:01:08.940
 A simple call to checkSelfPermission 

00:01:08.940 --> 00:01:10.570
 With the permission you care about 

00:01:10.570 --> 00:01:13.790
 It will tell you whether the permission is granted or not. 

00:01:13.790 --> 00:01:16.070
 If granted, you are ready to launch. 

00:01:16.070 --> 00:01:19.930
 But if not granted, you will need to ask for it. 

00:01:19.930 --> 00:01:23.490
 Note that you must conduct this investigation every time, because users 

00:01:23.490 --> 00:01:25.990
 They can also revoke permissions now. 

00:01:25.990 --> 00:01:28.990
 This in the end is very good for developers, 

00:01:28.990 --> 00:01:31.900
 Even if it requires little extra work. 

00:01:31.900 --> 00:01:34.010
 Because users will receive your order for permission 

00:01:34.010 --> 00:01:37.970
 In the context that it provides clear justification and utility 

00:01:37.970 --> 00:01:38.830
 for them. 

00:01:38.830 --> 00:01:40.670
 This builds confidence at the user. 

00:01:40.670 --> 00:01:43.570
 And let them say no thanks for a certain advantage 

00:01:43.570 --> 00:01:47.530
 Maybe it makes them like you increase. 

00:01:47.530 --> 00:01:49.040
 So we move on in our steps. 

00:01:49.040 --> 00:01:51.080
 If you do not already have permission, 

00:01:51.080 --> 00:01:52.940
 You can take a moment to explain why 

00:01:52.940 --> 00:01:55.460
 This permission is required. 

00:01:55.460 --> 00:01:58.480
 Draw your user a clear picture of the great potential of this feature 

00:01:58.480 --> 00:02:01.407
 If you are given access to that source. 

00:02:01.407 --> 00:02:03.490
 To help with this, there is a method 

00:02:03.490 --> 00:02:06.310
 shouldShowRequestPermissionRationale 

00:02:06.310 --> 00:02:08.710
 This will help you discover if you have some 

00:02:08.710 --> 00:02:11.760
 Illustration to do. 

00:02:11.760 --> 00:02:14.640
 The wrong method returns if the user asks 

00:02:14.640 --> 00:02:16.940
 Question no longer ask or if permission 

00:02:16.940 --> 00:02:18.930
 Hang on the device. 

00:02:18.930 --> 00:02:22.870
 But the method will return correctly if the user previously refused 

00:02:22.870 --> 00:02:26.200
 The permission now tries to access the property again 

00:02:26.200 --> 00:02:28.350
 Because this is a sign that your user 

00:02:28.350 --> 00:02:31.000
 May be nervous about app behavior. 

00:02:31.000 --> 00:02:33.140
 So make it clear to them. 

00:02:33.140 --> 00:02:36.110
 So you're ready to ask permission. 

00:02:39.162 --> 00:02:41.490
 The requestPermissions method needs to be 

00:02:41.490 --> 00:02:46.270
 The list of the permission you are interested in and the request code. 

00:02:46.270 --> 00:02:49.100
 This asynchronous call will generate a user dialog 

00:02:49.100 --> 00:02:51.260
 Their response will call back again, 

00:02:51.260 --> 00:02:53.410
 This is why the demand symbol is so important 

00:02:53.410 --> 00:02:55.200
 Which you specify. 

00:02:55.200 --> 00:02:58.070
 It helps you locate the user of your app 

00:02:58.070 --> 00:03:00.420
 And how to capture application behavior. 

00:03:00.420 --> 00:03:02.930
 This brings us near the final step, 

00:03:02.930 --> 00:03:06.600
 Dealing with permission results. 

00:03:06.600 --> 00:03:09.130
 You can onRequestPermissionsResult, 

00:03:09.130 --> 00:03:11.280
 Check the results of this connection. 

00:03:11.280 --> 00:03:13.570
 If permission has been granted, 

00:03:13.570 --> 00:03:15.860
 You can use the request code to return 

00:03:15.860 --> 00:03:18.190
 To create an API connection and create 

00:03:18.190 --> 00:03:20.620
 Magic moments for your user. 

00:03:20.620 --> 00:03:22.930
 But if no permission has been granted, 

00:03:22.930 --> 00:03:26.330
 You must accept the loss. 

00:03:26.330 --> 00:03:28.800
 The easiest solution is to disable the property 

00:03:28.800 --> 00:03:30.920
 With some kind of clear visual signal 

00:03:30.920 --> 00:03:33.170
 That's because of the ear order. 

00:03:33.170 --> 00:03:37.000
 So you can provide a dialog or update UI text. 

00:03:37.000 --> 00:03:38.950
 But you probably want to keep 

00:03:38.950 --> 00:03:41.260
 The UI layout is effective if you change your mind. 

00:03:41.260 --> 00:03:43.040
 So do not disable this button. 

00:03:43.040 --> 00:03:46.840
 Let them go back to the current when they care about it. 

00:03:46.840 --> 00:03:48.400
 This is how to update your app 

00:03:48.400 --> 00:03:51.230
 To handle the runtime permissions in Marshmallow. 

00:03:51.230 --> 00:03:53.330
 One of my last tips 

00:03:53.330 --> 00:03:56.720
 It's about testing these changes because it's not fun 

00:03:56.720 --> 00:03:59.790
 Be kept hesitant between the application and its settings. 

00:03:59.790 --> 00:04:02.220
 So check out the Package Order from the PackageManager 

00:04:02.220 --> 00:04:04.810
 To grant and pull permissions programmatically 

00:04:04.810 --> 00:04:05.880
 On the device. 

00:04:05.880 --> 00:04:09.772
 Always, check the documentation at first. 

00:04:09.772 --> 00:04:11.230
 Keep in mind that these changes 

00:04:11.230 --> 00:04:14.990
 Meaning to help your user understand the behavior of your app. 

00:04:14.990 --> 00:04:17.740
 So do not ask them for many permissions 

00:04:17.740 --> 00:04:18.700
 cash all in one. 

00:04:18.700 --> 00:04:22.169
 Put these permissions in context and build a better program. 

