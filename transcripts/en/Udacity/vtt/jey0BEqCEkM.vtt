WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.600
There are some dangers that come with the write-back policy

00:00:02.600 --> 00:00:06.090
of the buffer cache, a sudden system rash or power failure

00:00:06.090 --> 00:00:09.120
would mean that all the changes made in memory only would

00:00:09.120 --> 00:00:12.760
be lost. If the storage device is removal, it could just

00:00:12.760 --> 00:00:15.480
be that the user unplugged it before ejecting. It would be

00:00:15.480 --> 00:00:18.650
a nice idea if we could periodically copy all the changes

00:00:18.650 --> 00:00:21.800
reflected in memory to the disk. Maybe we could do this

00:00:21.800 --> 00:00:25.600
when some fixed number of dirty blocks is reached. The trouble

00:00:25.600 --> 00:00:27.710
is that the dirty blocks will likely be scattered all

00:00:27.710 --> 00:00:30.770
over the disks and we have to spend an inordinate amount

00:00:30.770 --> 00:00:33.620
of seek time just putting the right head of the disk

00:00:33.620 --> 00:00:37.440
in their correct place. Indeed it's the seek time, that makes

00:00:37.440 --> 00:00:40.860
random access to a disk so slow in general. Sequetial

00:00:40.860 --> 00:00:44.150
access can be thousands of times faster than random access. It'd

00:00:44.150 --> 00:00:46.320
be so much easier if we could just write everything to

00:00:46.320 --> 00:00:50.670
one contiguous block. This is the idea behind journalling file systems.

00:00:50.670 --> 00:00:53.190
They reserve a contiguous portion of the disk for this

00:00:53.190 --> 00:00:57.140
express purpose. We write the changes to the journal quickly,

00:00:57.140 --> 00:01:00.140
and mark the dirty box in memory as clean. Then,

00:01:00.140 --> 00:01:03.390
at a more opportune time, we apply all these changes stored

00:01:03.390 --> 00:01:07.060
in the journal to the appropriate files on the disk.

00:01:07.060 --> 00:01:09.720
The name journal comes from the analogy to a diary that

00:01:09.720 --> 00:01:12.150
one might write in every day to record the changes

00:01:12.150 --> 00:01:15.780
in one's life, in time sequential order. Here we are recording

00:01:15.780 --> 00:01:19.070
the changes to the file system. Of course, this does complicate

00:01:19.070 --> 00:01:22.080
reading from the disk somewhat. Any time we read from the disk,

00:01:22.080 --> 00:01:24.250
we need to check the journal to see if there are any

00:01:24.250 --> 00:01:29.120
changes to apply. Total time spent on writing is slower. After all,

00:01:29.120 --> 00:01:32.070
we are doing two writes, instead of just one. The key

00:01:32.070 --> 00:01:34.970
is, that the write to the journal is faster, and that is

00:01:34.970 --> 00:01:37.570
the one we're doing at the critical time when we found that

00:01:37.570 --> 00:01:41.125
we found we had too many dirty pages, or blocks, in memory.

00:01:41.125 --> 00:01:44.200
Journalling also has the advantage that it helps with crashes.

00:01:44.200 --> 00:01:46.860
Problems typically occur when the right to summon important data

00:01:46.860 --> 00:01:50.760
structure, like an inode, is interrupted by some system crash

00:01:50.760 --> 00:01:54.870
or power failure. Let's consider what happens, when a write

00:01:54.870 --> 00:01:57.340
from the journal to the rest of the disk is

00:01:57.340 --> 00:02:01.050
interrupted first. Well, in that case, the change that we

00:02:01.050 --> 00:02:03.400
need to apply will still be in a journal and

00:02:03.400 --> 00:02:06.840
so we can just reapply it on restart. No problem.

00:02:06.840 --> 00:02:09.038
The other write to worry about is the write to the

00:02:09.038 --> 00:02:12.910
journal itself. A failed write to the journal, however, can be detected

00:02:12.910 --> 00:02:16.190
by a checksum. And then the change can simply be ignored,

00:02:16.190 --> 00:02:19.630
again, leaving the important data structure on disk in a consistent state.

