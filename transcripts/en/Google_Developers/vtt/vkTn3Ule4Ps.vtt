WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.115
[MUSIC PLAYING]

00:00:02.115 --> 00:00:03.990
COLT MCANLIS: For modern
mobile applications,

00:00:03.990 --> 00:00:06.220
one of the easiest
performance traps to fall into

00:00:06.220 --> 00:00:08.352
is drawing elements
too many times.

00:00:08.352 --> 00:00:10.810
But the tools that are available
to help you detect and fix

00:00:10.810 --> 00:00:12.950
this problem for
standard views frequently

00:00:12.950 --> 00:00:15.460
don't help when you're using
highly customized views.

00:00:15.460 --> 00:00:16.460
My name is Colt McAnlis.

00:00:16.460 --> 00:00:18.010
And the trick to
fast performance

00:00:18.010 --> 00:00:21.170
involves updating your code
to use a few simple APIs that

00:00:21.170 --> 00:00:23.290
help the hardware spend
less time drawing.

00:00:23.290 --> 00:00:25.810
Now, if you remember, overdraw
occurs when the hardware spin

00:00:25.810 --> 00:00:28.500
cycle's drawing pixels on
the screen that don't end up

00:00:28.500 --> 00:00:30.700
contributing to the final
image-- for example, when

00:00:30.700 --> 00:00:33.420
the Nav Drawer slides out in
front of your current activity.

00:00:33.420 --> 00:00:35.610
See, we still have to draw
all those original items

00:00:35.610 --> 00:00:37.570
under the Nav Drawer,
which aren't actually

00:00:37.570 --> 00:00:40.530
visible to the final image
and thus wasted time.

00:00:40.530 --> 00:00:42.880
Now, the Android system
will try to reduce overdraw

00:00:42.880 --> 00:00:45.540
as much as it can by trying to
avoid drawing any items that

00:00:45.540 --> 00:00:48.210
are completely hidden by
another opaque surface.

00:00:48.210 --> 00:00:49.880
Now, for example,
all those labels

00:00:49.880 --> 00:00:53.450
underneath the Nav Drawer won't
actually waste processing time.

00:00:53.450 --> 00:00:55.630
But sadly, this technique
doesn't extend itself

00:00:55.630 --> 00:00:57.730
to complex custom
views where you're

00:00:57.730 --> 00:00:59.510
overriding the on draw method.

00:00:59.510 --> 00:01:01.330
In these cases, the
underlying system

00:01:01.330 --> 00:01:02.830
doesn't have insight
into how you're

00:01:02.830 --> 00:01:05.300
drawing your content, which
makes it really hard for it

00:01:05.300 --> 00:01:06.766
to know what to avoid.

00:01:06.766 --> 00:01:08.890
But you can help the system
get a better visibility

00:01:08.890 --> 00:01:13.330
into this process by utilizing
the canvas.cliprect API.

00:01:13.330 --> 00:01:15.890
This function allows you to
define the drawable boundaries

00:01:15.890 --> 00:01:17.100
for your given view.

00:01:17.100 --> 00:01:19.280
Only the stuff inside
the clipping rectangle

00:01:19.280 --> 00:01:20.410
will actually be drawn.

00:01:20.410 --> 00:01:22.600
Everything else will be ignored.

00:01:22.600 --> 00:01:24.800
This API can be really
helpful for custom views

00:01:24.800 --> 00:01:27.070
with lots of
overlapping components.

00:01:27.070 --> 00:01:29.832
For example, if you've got
a set of stacked UI cards,

00:01:29.832 --> 00:01:31.790
you can determine what
part of the current card

00:01:31.790 --> 00:01:33.820
is hidden by the
one on top of it

00:01:33.820 --> 00:01:37.087
and set your cliprect bounds
to ignore that area entirely.

00:01:37.087 --> 00:01:39.420
What's nice here is that
cliprect helps save performance

00:01:39.420 --> 00:01:41.780
on the CPU and on the GPU.

00:01:41.780 --> 00:01:44.050
See, on the CPU side,
each one of those canvas

00:01:44.050 --> 00:01:46.570
draw commands have a bit of
overhead associated with them

00:01:46.570 --> 00:01:49.360
once they're actually
submitted to OpenGL ES to draw.

00:01:49.360 --> 00:01:52.590
So any draw commands that lie
entirely outside the cliprect

00:01:52.590 --> 00:01:54.180
won't be submitted
to the hardware

00:01:54.180 --> 00:01:56.580
and thus won't
produce that overhead.

00:01:56.580 --> 00:01:59.310
Now, anything that's partially
intersecting the cliprect

00:01:59.310 --> 00:02:02.320
will still be drawn, which
is why, on the GPU side,

00:02:02.320 --> 00:02:05.480
cliprect will help define an
exclusion rectangle that allows

00:02:05.480 --> 00:02:09.139
the GPU at a per pixel level to
avoid coloring anything that's

00:02:09.139 --> 00:02:10.509
actually clipped.

00:02:10.509 --> 00:02:12.130
In addition to
cliprect, you can also

00:02:12.130 --> 00:02:14.740
use the quickreject
API, which will

00:02:14.740 --> 00:02:18.170
allow you to test for cliprect
intersection inside of your

00:02:18.170 --> 00:02:19.080
on draw function.

00:02:19.080 --> 00:02:20.580
If you've got some
part of your view

00:02:20.580 --> 00:02:22.670
that takes up a lot
of processing time,

00:02:22.670 --> 00:02:25.950
quickreject can help tell you
if it's outside the cliprect

00:02:25.950 --> 00:02:28.730
and let you skip all of
that processing altogether.

00:02:28.730 --> 00:02:31.080
And don't forget that you can
see the impact of overdraw

00:02:31.080 --> 00:02:33.950
right on your device with the
help of the Show GPU Overdraw

00:02:33.950 --> 00:02:34.560
tool.

00:02:34.560 --> 00:02:36.170
This tool visualize
how much overdraw

00:02:36.170 --> 00:02:38.120
is happening in
your app by tinting

00:02:38.120 --> 00:02:39.500
the pixels different colors.

00:02:39.500 --> 00:02:42.059
Lots of red is really
bad in this regard.

00:02:42.059 --> 00:02:44.600
If you're looking to know more
about overdraw and validations

00:02:44.600 --> 00:02:46.101
and how it affects
your performance,

00:02:46.101 --> 00:02:48.516
make sure to check out the
rest of the Android performance

00:02:48.516 --> 00:02:49.830
patterns resources on the web.

00:02:49.830 --> 00:02:53.550
Oh, and don't forget to join
our Google+ community for more

00:02:53.550 --> 00:02:55.120
great tips and tricks.

00:02:55.120 --> 00:02:57.740
So keep calm, profile your
code, and always remember

00:02:57.740 --> 00:02:58.940
Perf Matters.

00:02:58.940 --> 00:03:02.590
[MUSIC PLAYING]

