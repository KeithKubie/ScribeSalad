WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
The solution to this is a technique known as blind signatures.

00:00:05.000 --> 00:00:08.000
This gives us a way to associate a unique ID with a bill

00:00:08.000 --> 00:00:11.000
to be able to detect double spending but doesn't allow the bank to associate

00:00:11.000 --> 00:00:16.000
the unique IDs on the bills with the person who acquires that bill.

00:00:16.000 --> 00:00:19.000
Here's the idea--Alice will deposit her $100 in the bank,

00:00:19.000 --> 00:00:23.000
and along with the bill she'll generate a message that says Bill # rA--

00:00:23.000 --> 00:00:29.000
some unique ID generated by Alice--Invisible Primes Bank owes the bearer $100.

00:00:29.000 --> 00:00:35.000
She'll go to the bank, give the banker the $100 bill, and ask the bank to sign the message m.

00:00:35.000 --> 00:00:39.000
To make it a blind signature, though, she'll insist the bank wear a blindfold

00:00:39.000 --> 00:00:42.000
before bringing out the message m and the banker will have to sign it

00:00:42.000 --> 00:00:44.000
without being able to see this message.

00:00:44.000 --> 00:00:47.000
The bank will give that signed message back to Alice.

00:00:47.000 --> 00:00:51.000
This protocol has an obvious flaw in it. The bank doesn't know what it's signing.

00:00:51.000 --> 00:00:58.000
Alice could deposit $100 and ask the bank to sign a message for $100 gazillion.

00:00:58.000 --> 00:01:02.000
When someone deposits that bill, the banker will no longer be smiling.

00:01:02.000 --> 00:01:06.000
The solution to this is a technique known as cut-and-choose.

00:01:06.000 --> 00:01:10.000
This is somewhat similar to what we saw in auditing for mix nets.

00:01:10.000 --> 00:01:14.000
It has lots of applications to other cryptographic problems as well.

00:01:14.000 --> 00:01:18.000
The way we would do that with this scheme is instead of just generating one message like this,

00:01:18.000 --> 00:01:21.000
Alice would generate a large number of messages--

00:01:21.000 --> 00:01:24.000
let's say 100 of them--send them all to the bank.

00:01:24.000 --> 00:01:27.000
The banker who is no longer blind folded or frowny

00:01:27.000 --> 00:01:31.000
will randomly pick one of these messages.

00:01:31.000 --> 00:01:35.000
Let's say he picks message 38. We'll look at the other ones.

00:01:35.000 --> 00:01:38.000
Each one of those should have a message like this but with a different random value.

00:01:38.000 --> 00:01:40.000
Check that they're all okay.

00:01:40.000 --> 00:01:44.000
If they're all okay, then without looking at message 38, then the banker will be blindfolded

00:01:44.000 --> 00:01:46.000
and sign message 38.

00:01:46.000 --> 00:01:50.000
The point of this is that Alice generates all the messages,

00:01:50.000 --> 00:01:55.000
transfers them to the bank, but the bank doesn't see them until the bank randomly picks one.

00:01:55.000 --> 00:02:00.000
Since the bank is picking the one to sign randomly and inspecting all the others,

00:02:00.000 --> 00:02:06.000
the probability of Alice being able to cheat without getting caught is 1 in the number of messages.

00:02:06.000 --> 00:02:08.000
That could work with blindfolds.

00:02:08.000 --> 00:02:12.000
We'd have to be careful how we deliver the messages to the bank

00:02:12.000 --> 00:02:15.000
and let the banker pick one and then see them without the blindfold.

00:02:15.000 --> 00:02:19.000
But that could work. It's not very convenient though.

00:02:19.000 --> 99:59:59.000
What we want to do is figure out a way to do this using cryptography instead of blindfolds.

