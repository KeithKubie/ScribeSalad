WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.880
[MUSIC PLAYING]

00:00:06.240 --> 00:00:07.490
DAVID SINGLETON: Good morning.

00:00:07.490 --> 00:00:11.580
Hi, folks, and welcome to
What's New in Android Wear.

00:00:11.580 --> 00:00:15.450
My name is David Singleton and
I lead the Wear team globally.

00:00:15.450 --> 00:00:17.920
It's been a really
busy year for us.

00:00:17.920 --> 00:00:21.030
And I'm really excited to be
able to share some updates

00:00:21.030 --> 00:00:24.210
on Android Wear 2.0, and
also some of the new watches

00:00:24.210 --> 00:00:28.200
that are coming later
this year with you today.

00:00:28.200 --> 00:00:31.050
So even before the
Android Wear 2.0 launch,

00:00:31.050 --> 00:00:34.170
we were seeing really nice
momentum in this market.

00:00:34.170 --> 00:00:35.790
During the holiday
period last year,

00:00:35.790 --> 00:00:39.510
we saw 72% growth in
new devices activated

00:00:39.510 --> 00:00:41.670
compared to the year before.

00:00:41.670 --> 00:00:44.610
And since the launch
of Android Wear,

00:00:44.610 --> 00:00:46.560
we've always said
that people should

00:00:46.560 --> 00:00:48.710
be able to wear what they want.

00:00:48.710 --> 00:00:51.750
And part of this is
the choice that users

00:00:51.750 --> 00:00:55.260
have between a host of different
designs and styles of watch.

00:00:55.260 --> 00:00:59.010
And we can only deliver
that through partnerships

00:00:59.010 --> 00:01:01.410
with iconic brands.

00:01:01.410 --> 00:01:03.630
The number of brands
supporting Android Wear

00:01:03.630 --> 00:01:08.970
doubled from 12 last
year to 24 this year.

00:01:08.970 --> 00:01:10.950
And the choice of
Android Wear watches

00:01:10.950 --> 00:01:17.350
has doubled from 23 last
year to 46 this year.

00:01:17.350 --> 00:01:20.520
And we've seen continued support
from our consumer electronics

00:01:20.520 --> 00:01:21.530
partners.

00:01:21.530 --> 00:01:24.430
And now they're joined by
their fashion counterparts.

00:01:24.430 --> 00:01:26.370
And this means that
whatever your style,

00:01:26.370 --> 00:01:30.030
our partners have
a watch for you.

00:01:30.030 --> 00:01:33.420
For example, Tag Heuer
have updated their lineup

00:01:33.420 --> 00:01:36.120
with the Connected Modular 45.

00:01:36.120 --> 00:01:38.310
It's a really innovative
hardware design,

00:01:38.310 --> 00:01:41.250
which means that you can change
everything from the horns

00:01:41.250 --> 00:01:44.496
to the bracelet and the clasp.

00:01:44.496 --> 00:01:45.870
Another partner
that's refreshing

00:01:45.870 --> 00:01:48.120
their lineup this
year is Michael Kors

00:01:48.120 --> 00:01:50.430
with their new Access
Grayson and for men

00:01:50.430 --> 00:01:52.620
and Access Sofie for women.

00:01:52.620 --> 00:01:53.580
I love these watches.

00:01:53.580 --> 00:01:56.850
They've done a really
nice job with the design,

00:01:56.850 --> 00:01:58.530
and with watch
faces, including one

00:01:58.530 --> 00:02:01.560
that lets you put Instagram
photos right there

00:02:01.560 --> 00:02:05.070
to see throughout the day.

00:02:05.070 --> 00:02:06.780
As well as existing
partners, we're

00:02:06.780 --> 00:02:09.449
also welcoming a bunch of
new partners this year.

00:02:09.449 --> 00:02:10.979
And we're excited
to see partners

00:02:10.979 --> 00:02:14.640
like Movado, one of the
most iconic watch brands,

00:02:14.640 --> 00:02:16.620
bringing their
trademark minimalist

00:02:16.620 --> 00:02:20.020
designs to Android Wear.

00:02:20.020 --> 00:02:22.900
Aside from watch hardware,
we're seeing app developers,

00:02:22.900 --> 00:02:25.750
like many of you in the
room and on the live steam,

00:02:25.750 --> 00:02:30.130
take full advantage
of Android Wear 2.0.

00:02:30.130 --> 00:02:32.380
We know that people
love to stay connected

00:02:32.380 --> 00:02:35.920
while they're out and about
via their Android Wear watches.

00:02:35.920 --> 00:02:37.990
And our partner
Telegram is taking

00:02:37.990 --> 00:02:42.790
full advantage of the standalone
functionality in Wear 2.0.

00:02:42.790 --> 00:02:44.890
Not only does the
app work the same way

00:02:44.890 --> 00:02:48.070
if you're connected to an
Android phone or an iPhone,

00:02:48.070 --> 00:02:50.110
but when you're watch has
a cellular connection,

00:02:50.110 --> 00:02:51.820
it even works without the phone.

00:02:51.820 --> 00:02:53.230
And so sending
stickers, like you

00:02:53.230 --> 00:02:55.800
can see in this little
video, to your friends

00:02:55.800 --> 00:02:59.140
has never been easier.

00:02:59.140 --> 00:03:02.080
Another great experience made
possible by the rich display

00:03:02.080 --> 00:03:04.840
on Android Wear watches
is getting coaching

00:03:04.840 --> 00:03:06.650
while you're working out.

00:03:06.650 --> 00:03:08.830
So let's take a look at
this app from our partner

00:03:08.830 --> 00:03:10.660
7 Minute Workout.

00:03:10.660 --> 00:03:11.660
This app's really great.

00:03:11.660 --> 00:03:12.618
I really love using it.

00:03:12.618 --> 00:03:16.780
It guides you through 12
30-second long exercises.

00:03:16.780 --> 00:03:18.520
And you don't need
any fancy equipment.

00:03:18.520 --> 00:03:20.590
Just a wall, a chair,
and your Android Wear

00:03:20.590 --> 00:03:24.460
watch, and you can use it
to stay fit and healthy.

00:03:24.460 --> 00:03:26.950
Another feature that
we added to Wear 2.0

00:03:26.950 --> 00:03:29.350
is the ability to have
complication support.

00:03:29.350 --> 00:03:31.540
So users can now
select the watch face

00:03:31.540 --> 00:03:34.510
that they love the look of and
have the important information

00:03:34.510 --> 00:03:38.350
that they care about available
at a glance throughout the day.

00:03:38.350 --> 00:03:40.870
Here you can see Robinhood,
the financial investments app,

00:03:40.870 --> 00:03:43.840
is showing your overall
portfolio's value right there

00:03:43.840 --> 00:03:45.274
on the watch face.

00:03:45.274 --> 00:03:46.690
And tapping on
that, if it's maybe

00:03:46.690 --> 00:03:50.080
changed in an interesting way,
takes you to their watch list.

00:03:50.080 --> 00:03:51.670
You can then tap on
individual stocks

00:03:51.670 --> 00:03:55.400
to see their current value
and the trend over time.

00:03:55.400 --> 00:03:57.820
So we see that the best
Android Wear apps really

00:03:57.820 --> 00:04:01.600
focus on users' needs
and what they care about,

00:04:01.600 --> 00:04:04.797
and then play to the strengths
of the wearable form factor,

00:04:04.797 --> 00:04:05.630
as you can see here.

00:04:08.170 --> 00:04:10.510
As part of the Wear
2.0 launch, we also

00:04:10.510 --> 00:04:12.430
announced that the
Google Assistant is now

00:04:12.430 --> 00:04:14.380
available right on your wrist.

00:04:14.380 --> 00:04:15.940
You can find answers
and get things

00:04:15.940 --> 00:04:19.832
done by starting a
conversation with Google.

00:04:19.832 --> 00:04:21.290
And we have some
new features here.

00:04:21.290 --> 00:04:23.590
So for instance, you
can now long-press

00:04:23.590 --> 00:04:26.710
on the crown on your watch and
say, send a WhatsApp message

00:04:26.710 --> 00:04:28.300
to Felicity, who's my wife.

00:04:28.300 --> 00:04:31.660
And the assistant will deal
with the interface presentation,

00:04:31.660 --> 00:04:34.720
message dictation, and deliver
to WhatsApp just the data

00:04:34.720 --> 00:04:37.376
that it needs to
complete that action.

00:04:37.376 --> 00:04:39.250
So we're testing this
functionality right now

00:04:39.250 --> 00:04:41.110
with selected partner
apps, and it's

00:04:41.110 --> 00:04:44.020
going to be open to all
actions on Google Developers

00:04:44.020 --> 00:04:46.480
in the coming months.

00:04:46.480 --> 00:04:48.820
In the meantime, if you
can't wait to get started,

00:04:48.820 --> 00:04:51.940
you can develop your actions for
the Google Home and the phone

00:04:51.940 --> 00:04:54.070
today, and your actions
will automatically

00:04:54.070 --> 00:04:56.060
be adopted for Wear
when Actions on Google

00:04:56.060 --> 00:04:58.450
is enabled for Android
Wear coming soon.

00:04:58.450 --> 00:05:00.550
No additional work is
going to be required.

00:05:00.550 --> 00:05:02.410
And that means that
going forward, as well

00:05:02.410 --> 00:05:05.590
as notifications, watch
faces, and native apps,

00:05:05.590 --> 00:05:09.160
you have another option to bring
your service to Android Wear.

00:05:09.160 --> 00:05:11.290
And we're super excited
about the new capabilities

00:05:11.290 --> 00:05:14.420
that this is going to bring.

00:05:14.420 --> 00:05:18.710
So in the rest of this talk, Jen
from our user experience design

00:05:18.710 --> 00:05:21.590
team will give you an
update on material design

00:05:21.590 --> 00:05:23.930
and what we're doing to make
designing and developing

00:05:23.930 --> 00:05:26.090
an Android Wear easier.

00:05:26.090 --> 00:05:29.630
After that, Griff will highlight
some of the Android O features

00:05:29.630 --> 00:05:33.410
that are of particular interest
to Android Wear developers.

00:05:33.410 --> 00:05:36.320
And finally, Nancy will
talk about power and what

00:05:36.320 --> 00:05:38.360
you can do to conserve battery.

00:05:38.360 --> 00:05:40.780
So with that, I'd love
to hand it over to Jen.

00:05:40.780 --> 00:05:43.600
[APPLAUSE]

00:05:46.505 --> 00:05:48.130
JEN FERNQUIST: All
right, hi, everyone.

00:05:48.130 --> 00:05:51.750
I'm Jen and I lead User
Research for Android Wear.

00:05:51.750 --> 00:05:54.300
So today I'm going to talk to
you about some of the changes

00:05:54.300 --> 00:05:58.110
that we've made to Wear 2.0 as a
result of research and feedback

00:05:58.110 --> 00:06:00.700
that we've received
over the past year.

00:06:00.700 --> 00:06:02.910
So I'll go over some
design guidelines,

00:06:02.910 --> 00:06:04.980
some common pitfalls,
and how we're

00:06:04.980 --> 00:06:09.120
working on improving the
developer experience.

00:06:09.120 --> 00:06:10.920
To start off, I just
want to say thank you

00:06:10.920 --> 00:06:14.340
so much for all of the feedback
that you guys have given us

00:06:14.340 --> 00:06:17.610
over the past year on the
Android Wear Developer Preview.

00:06:17.610 --> 00:06:19.860
So we've made many
improvements to the platform

00:06:19.860 --> 00:06:22.050
as a direct result
of your feedback,

00:06:22.050 --> 00:06:25.390
like bringing back theater
mode and swipe to go back.

00:06:25.390 --> 00:06:26.657
So thank you.

00:06:26.657 --> 00:06:29.142
[APPLAUSE]

00:06:30.640 --> 00:06:33.490
OK, so today I'm going
to cover three topics--

00:06:33.490 --> 00:06:37.630
watch face complications,
Android Wear UI design,

00:06:37.630 --> 00:06:38.800
and developer feedback.

00:06:41.630 --> 00:06:44.930
All right, so first, let's
talk about complications.

00:06:44.930 --> 00:06:47.080
So a quick refresh
of terminology.

00:06:47.080 --> 00:06:51.130
A complication is a piece of
information on the watch face

00:06:51.130 --> 00:06:54.010
that tells the user something
other than the time.

00:06:54.010 --> 00:06:57.230
So like these
highlighted bits here.

00:06:57.230 --> 00:07:00.460
So last year at Google
I/O, we introduced new EPIs

00:07:00.460 --> 00:07:03.520
to help developers
build complications.

00:07:03.520 --> 00:07:07.360
They enable any app
to supply information

00:07:07.360 --> 00:07:09.310
to be displayed
on the watch face.

00:07:09.310 --> 00:07:11.320
And they also allow
any watch face

00:07:11.320 --> 00:07:14.080
to be able to present that
information to the user

00:07:14.080 --> 00:07:16.540
in a way that fits its style.

00:07:16.540 --> 00:07:18.640
So we found in user
research that people really

00:07:18.640 --> 00:07:19.840
like complications.

00:07:19.840 --> 00:07:22.180
They like being able to
choose the data that they want

00:07:22.180 --> 00:07:24.280
to see at a glance
and which actions

00:07:24.280 --> 00:07:27.140
they want to perform quickly.

00:07:27.140 --> 00:07:28.960
So here's a series of
watch faces from one

00:07:28.960 --> 00:07:30.310
of our user studies.

00:07:30.310 --> 00:07:32.800
Now, these are actual
screenshots of watch

00:07:32.800 --> 00:07:35.560
faces that participants had
set up after they'd been

00:07:35.560 --> 00:07:37.390
using their watches for a week.

00:07:37.390 --> 00:07:39.340
So we didn't give them
any instructions on how

00:07:39.340 --> 00:07:40.720
to set up their watch faces.

00:07:40.720 --> 00:07:43.300
They customized these
all on their own.

00:07:43.300 --> 00:07:46.850
And I'll point out a couple
of interesting examples.

00:07:46.850 --> 00:07:48.460
So in this watch
face on the bottom,

00:07:48.460 --> 00:07:50.800
the user wanted quick
access to their music.

00:07:50.800 --> 00:07:53.770
So they set a complication to
launch the Google Play Music

00:07:53.770 --> 00:07:55.180
app.

00:07:55.180 --> 00:07:57.220
And in this
complication on the top,

00:07:57.220 --> 00:08:00.479
the user wanted quick
access to their schedule.

00:08:00.479 --> 00:08:02.020
So they've got a
complication to show

00:08:02.020 --> 00:08:04.010
the name of their
next meeting, one

00:08:04.010 --> 00:08:05.940
to show the time of
their next meeting,

00:08:05.940 --> 00:08:09.914
and one to show their
unread notification count.

00:08:09.914 --> 00:08:11.830
So in user research, we
also learned something

00:08:11.830 --> 00:08:13.930
that frustrates
users, and that's

00:08:13.930 --> 00:08:16.990
watch faces that look like
they have complications,

00:08:16.990 --> 00:08:19.450
but the data is
actually not editable.

00:08:19.450 --> 00:08:21.220
So users quickly
become used to being

00:08:21.220 --> 00:08:23.770
able to change the
data on the watch

00:08:23.770 --> 00:08:25.880
faces to be whatever they want.

00:08:25.880 --> 00:08:27.730
So if you're a
watch face creator,

00:08:27.730 --> 00:08:30.280
then don't just display a
static set of information

00:08:30.280 --> 00:08:31.570
on your watch face.

00:08:31.570 --> 00:08:33.530
Adopt the Android
Wear complication

00:08:33.530 --> 00:08:38.169
API to let your users choose
the data that they want to see.

00:08:38.169 --> 00:08:39.970
And if you're an
app developer, then

00:08:39.970 --> 00:08:42.730
think about what information
that your app provides

00:08:42.730 --> 00:08:46.620
that users might want
to see at a glance.

00:08:46.620 --> 00:08:48.850
All right, so we learned
that complications are great

00:08:48.850 --> 00:08:50.320
and users love them.

00:08:50.320 --> 00:08:54.850
So why haven't all watch face
creators implemented them?

00:08:54.850 --> 00:08:57.940
The answer that we hear from you
is that it's hard, especially

00:08:57.940 --> 00:09:00.500
if you're implementing
everything from scratch.

00:09:00.500 --> 00:09:02.710
So watch face developers
have the freedom

00:09:02.710 --> 00:09:05.200
to draw complications
however they want,

00:09:05.200 --> 00:09:08.450
but that means they have to
handle everything themselves,

00:09:08.450 --> 00:09:13.700
including the text size,
position, style, and layout.

00:09:13.700 --> 00:09:16.000
So to make it easier,
we've added two components

00:09:16.000 --> 00:09:18.580
to the Wearable
Support library--

00:09:18.580 --> 00:09:21.220
TextRenderer, which
auto-resizes text

00:09:21.220 --> 00:09:23.890
to fit the area
that you specify,

00:09:23.890 --> 00:09:27.370
and ComplicationDrawable,
which goes one step further

00:09:27.370 --> 00:09:29.950
and completely renders
the complications for you,

00:09:29.950 --> 00:09:33.740
if you tell us the location,
style, and size that you want.

00:09:33.740 --> 00:09:34.698
Yea.

00:09:34.698 --> 00:09:36.650
[APPLAUSE]

00:09:38.207 --> 00:09:40.290
And one other thing that
makes it really difficult

00:09:40.290 --> 00:09:44.460
to create complications is
implementing the configuration

00:09:44.460 --> 00:09:46.770
screen, like this one
that you see here,

00:09:46.770 --> 00:09:49.860
which can show the user exactly
where the complication is laid

00:09:49.860 --> 00:09:52.140
out on the watch face and
all of the different things

00:09:52.140 --> 00:09:53.950
that they can customize.

00:09:53.950 --> 00:09:56.100
So to help you
implement this part,

00:09:56.100 --> 00:09:57.570
we've created a
watch face setting

00:09:57.570 --> 00:10:01.230
example posted on GitHub
that you can take and easily

00:10:01.230 --> 00:10:04.050
adopt to change however
you want it to be.

00:10:04.050 --> 00:10:06.780
And after coding,
then comes testing,

00:10:06.780 --> 00:10:08.610
and so to help you
with that, we've

00:10:08.610 --> 00:10:12.580
created an open source
test suite data provider.

00:10:12.580 --> 00:10:15.030
So this makes it easy to
check that all types of data

00:10:15.030 --> 00:10:17.070
are going to look good
on your complication

00:10:17.070 --> 00:10:18.690
on your watch face.

00:10:18.690 --> 00:10:20.400
And since it's open
source, you can also

00:10:20.400 --> 00:10:23.190
supply your own data if you
want to test for a specific use

00:10:23.190 --> 00:10:24.574
case.

00:10:24.574 --> 00:10:26.990
And if you want to find out
more about all of these tools,

00:10:26.990 --> 00:10:29.700
then go to the Android
Wear UI session tomorrow

00:10:29.700 --> 00:10:31.480
where one of our
lead engineers, Oli

00:10:31.480 --> 00:10:33.497
will talk about the
Complications API

00:10:33.497 --> 00:10:35.330
And walk you through a
bunch of these tools.

00:10:39.200 --> 00:10:40.274
There it is.

00:10:40.274 --> 00:10:42.440
All right, so the second
topic I want to talk to you

00:10:42.440 --> 00:10:45.380
about is Android
Wear app design.

00:10:45.380 --> 00:10:48.650
So last year, we introduced
a number of new UI patterns

00:10:48.650 --> 00:10:51.650
as part of the Android
Wear 2.0 Developer Preview.

00:10:51.650 --> 00:10:54.590
So we've learned a lot from
your feedback in the past year

00:10:54.590 --> 00:10:57.950
and we've updated the guidelines
on when to use certain features

00:10:57.950 --> 00:11:00.260
and when not to.

00:11:00.260 --> 00:11:03.290
So for example, take the
Wearable Navigation Drawer.

00:11:03.290 --> 00:11:06.770
So this should be used for
infrequent context changes,

00:11:06.770 --> 00:11:11.450
like accessing settings,
logging out, or switching users.

00:11:11.450 --> 00:11:14.990
If your app has a small number
of discrete functions, however,

00:11:14.990 --> 00:11:17.000
then instead of using
the navigation drawer,

00:11:17.000 --> 00:11:21.650
it might be better to use
multiple app launchers.

00:11:21.650 --> 00:11:24.050
So say you have a
fitness app that has

00:11:24.050 --> 00:11:26.660
two discrete functions--

00:11:26.660 --> 00:11:29.751
activity tracking and
historical analysis.

00:11:29.751 --> 00:11:31.250
So you can put these
functionalities

00:11:31.250 --> 00:11:33.680
under two different
launcher icons.

00:11:33.680 --> 00:11:36.170
And so another
question that we get

00:11:36.170 --> 00:11:39.860
asked a lot is, how many
launcher icons can you have?

00:11:39.860 --> 00:11:41.570
The answer is as
few as possible,

00:11:41.570 --> 00:11:45.080
but as a rule of thumb,
we'd say no more than three.

00:11:45.080 --> 00:11:48.290
And in addition to those updates
on the material design spec,

00:11:48.290 --> 00:11:50.000
we're also launching
two things to help

00:11:50.000 --> 00:11:54.950
both designers and developers
build wearable apps.

00:11:54.950 --> 00:11:59.826
For designers, we're providing a
sticker sheet on the spec site.

00:11:59.826 --> 00:12:01.700
Yeah-- sticker sheet on
the spec site, sorry.

00:12:01.700 --> 00:12:03.890
Definitely utilize this,
because not only will it

00:12:03.890 --> 00:12:06.680
help you make your
app Wear native,

00:12:06.680 --> 00:12:09.560
but it's also much easier
to try out different layouts

00:12:09.560 --> 00:12:13.490
and designs in something like
Sketch rather than in code.

00:12:13.490 --> 00:12:15.850
And for developers, we're
starting the journey

00:12:15.850 --> 00:12:18.860
to open source the
Android Wear UI library.

00:12:18.860 --> 00:12:21.350
What this means is you
can expect three things--

00:12:21.350 --> 00:12:24.860
consistent and stable
APIs, frequent releases,

00:12:24.860 --> 00:12:28.604
and better responsiveness
to feedback.

00:12:28.604 --> 00:12:30.270
And if you want to
find out more, please

00:12:30.270 --> 00:12:33.396
go to Aga's session
tomorrow on Android Wear UI.

00:12:33.396 --> 00:12:34.770
And yes, this is
the same session

00:12:34.770 --> 00:12:38.310
where Oli will be talking
about complications.

00:12:38.310 --> 00:12:41.400
And last but not least, I want
to mention developer feedback.

00:12:41.400 --> 00:12:44.430
So in the past year and a half,
we've periodically sent surveys

00:12:44.430 --> 00:12:46.740
to the Wear developer
community trying

00:12:46.740 --> 00:12:50.430
to identify the top pain points
to developing apps for Wear.

00:12:50.430 --> 00:12:52.380
And so as a result
of that feedback,

00:12:52.380 --> 00:12:54.510
we've made improvements
to the emulator,

00:12:54.510 --> 00:12:57.480
we've simplified the
API, like in the work

00:12:57.480 --> 00:13:00.750
we've done with complications
and the UI library,

00:13:00.750 --> 00:13:03.870
and we've adopted more examples
into the Developer Guide

00:13:03.870 --> 00:13:07.652
to help developers get up and
running on their projects.

00:13:07.652 --> 00:13:09.610
And so we want to continue
to make improvements

00:13:09.610 --> 00:13:11.130
to the developer experience.

00:13:11.130 --> 00:13:13.500
So if you have any suggestions
on what we can do better,

00:13:13.500 --> 00:13:16.710
then please file a feature
request and we will get on it.

00:13:16.710 --> 00:13:19.500
And thank you again for all
of your feedback thus far.

00:13:19.500 --> 00:13:22.570
And with that, I will
hand it over to Griff.

00:13:22.570 --> 00:13:24.920
[APPLAUSE]

00:13:29.160 --> 00:13:30.990
GRIFF HAZEN: Hi,
I'm Griff Hazen.

00:13:30.990 --> 00:13:32.730
I'm a software
engineer and tech lead

00:13:32.730 --> 00:13:35.070
on Wear's Developer Platform.

00:13:35.070 --> 00:13:37.800
I'm here to showcase a few
of the new Android platform

00:13:37.800 --> 00:13:41.100
features of particular
interest to Wear developers.

00:13:41.100 --> 00:13:45.650
But first, I have a general
Wear developer announcement.

00:13:45.650 --> 00:13:48.080
Earlier this year, we launched
the Play Store for Wear

00:13:48.080 --> 00:13:50.330
as part of Wear 2.0.

00:13:50.330 --> 00:13:52.970
It allows you to search for
and install apps directly

00:13:52.970 --> 00:13:54.500
on the watch.

00:13:54.500 --> 00:13:58.010
We also automatically
suggest apps

00:13:58.010 --> 00:14:00.450
to install if the user
has them on their phone.

00:14:00.450 --> 00:14:03.030
They also have a Wear version.

00:14:03.030 --> 00:14:04.700
Developers upload
their watch app

00:14:04.700 --> 00:14:08.400
to the Play Developer
console, just like phone apps.

00:14:08.400 --> 00:14:12.090
The same app can include
watch, phone, or APKs

00:14:12.090 --> 00:14:14.640
from other form factors
at the same time

00:14:14.640 --> 00:14:17.310
using the multi-APK feature.

00:14:17.310 --> 00:14:19.740
When the user installs
an app on their device,

00:14:19.740 --> 00:14:22.200
Play Store will automatically
select the right APK

00:14:22.200 --> 00:14:24.000
to download.

00:14:24.000 --> 00:14:27.000
This works great on Wear
2.0, but if your app also

00:14:27.000 --> 00:14:31.130
supports Wear 1.0, it
can get complicated.

00:14:31.130 --> 00:14:33.860
The old way to do
this for Wear 1.0

00:14:33.860 --> 00:14:36.410
required the developer to
embed their wearable app

00:14:36.410 --> 00:14:38.490
within their phone app.

00:14:38.490 --> 00:14:40.140
When the user installed
the phone app,

00:14:40.140 --> 00:14:42.130
the wearable app was
extracted and sent

00:14:42.130 --> 00:14:44.670
to the Wear 1.0 device.

00:14:44.670 --> 00:14:47.010
This setup caused a
number of complications,

00:14:47.010 --> 00:14:50.190
including increased phone APK
size and a coupled release

00:14:50.190 --> 00:14:52.110
process.

00:14:52.110 --> 00:14:55.220
I'm happy to announce that we're
starting to roll out a new way

00:14:55.220 --> 00:14:57.720
to distribute-- improved way
to distribute your app for Wear

00:14:57.720 --> 00:15:00.270
1.0.

00:15:00.270 --> 00:15:04.250
The new flow, coming
soon, uses multi-APK.

00:15:04.250 --> 00:15:06.900
It allows you to distribute
your Wear app the same way

00:15:06.900 --> 00:15:10.730
for both Wear 1.0 and Wear 2.0.

00:15:10.730 --> 00:15:12.350
When a user installs
your phone app,

00:15:12.350 --> 00:15:14.600
if you have a compatible
Wear up in the Play Store,

00:15:14.600 --> 00:15:18.130
it will automatically be
installed on Wear 1.0.

00:15:18.130 --> 00:15:20.880
This feature is currently
being tested with a few apps.

00:15:20.880 --> 00:15:24.610
We'll be opening it up to
all third party developers.

00:15:24.610 --> 00:15:27.030
You'll soon be able to stop
embedding your Wear app

00:15:27.030 --> 00:15:29.560
with your phone app.

00:15:29.560 --> 00:15:31.710
If you're developing
for Wear 2.0 already,

00:15:31.710 --> 00:15:34.950
you'll want to make sure that
your app works well on Wear 1.0

00:15:34.950 --> 00:15:38.440
if you set a low
minimum SDK level.

00:15:38.440 --> 00:15:41.010
All right, now back to my
main topic, which is Android O

00:15:41.010 --> 00:15:43.300
and Wear.

00:15:43.300 --> 00:15:46.040
The What's New in Android
talk yesterday covered many

00:15:46.040 --> 00:15:47.990
of the updates to
the Android platform

00:15:47.990 --> 00:15:51.020
for Android O. Android
O also has a lot

00:15:51.020 --> 00:15:53.480
to offer Wear developers,
and I'll showcase

00:15:53.480 --> 00:15:56.110
a few of particular interest--

00:15:56.110 --> 00:16:00.700
notifications, autosizing text
view, and background limits.

00:16:03.360 --> 00:16:06.250
First, notifications.

00:16:06.250 --> 00:16:08.950
Notifications posted
by phone and watch apps

00:16:08.950 --> 00:16:12.150
continue to be a
cornerstone feature of Wear.

00:16:12.150 --> 00:16:14.520
Android O has added
a few new APIs

00:16:14.520 --> 00:16:18.120
to make it easier for users
and developers to control them.

00:16:18.120 --> 00:16:22.370
The most prominent one
is notification channels.

00:16:22.370 --> 00:16:24.650
Notification
channels is a new API

00:16:24.650 --> 00:16:27.360
to organize notifications
of the same type

00:16:27.360 --> 00:16:30.020
so they can be controlled
by the user together.

00:16:30.020 --> 00:16:32.630
All notifications in a channel
share the same behavior

00:16:32.630 --> 00:16:38.030
when posted, like vibration,
interruption level, et cetera.

00:16:38.030 --> 00:16:40.040
On an Android O
phone, when the user

00:16:40.040 --> 00:16:41.990
long-presses a
notification, they

00:16:41.990 --> 00:16:44.180
can quickly toggle
future notifications

00:16:44.180 --> 00:16:46.220
from just that channel.

00:16:46.220 --> 00:16:47.960
They can also tap
to get to the phone

00:16:47.960 --> 00:16:50.210
notification settings
for that app, where

00:16:50.210 --> 00:16:54.750
they can control other channels
and notification behaviors.

00:16:54.750 --> 00:16:57.270
Starting with Android
O, all notifications

00:16:57.270 --> 00:16:59.950
need to be posted to a channel.

00:16:59.950 --> 00:17:02.190
Here's an example
for setting one up.

00:17:02.190 --> 00:17:04.930
First, create a
notification channel object

00:17:04.930 --> 00:17:07.869
and provide a unique ID,
a user visible channel

00:17:07.869 --> 00:17:11.290
name, and an initial
importance level.

00:17:11.290 --> 00:17:13.270
Next, set some
optional properties,

00:17:13.270 --> 00:17:16.030
like vibration pattern
and description.

00:17:16.030 --> 00:17:19.940
And call Create Notification
Channel to create the channel.

00:17:19.940 --> 00:17:22.700
Once this is done, you can
start posting notifications

00:17:22.700 --> 00:17:25.130
with that channel ID.

00:17:25.130 --> 00:17:27.069
The Android Wear SDK
for O does not yet

00:17:27.069 --> 00:17:29.320
include a settings
UI for channels,

00:17:29.320 --> 00:17:31.430
but the APIs are
available now for testing,

00:17:31.430 --> 00:17:35.634
and we'll be providing
updates in future previews.

00:17:35.634 --> 00:17:37.050
The next feature
I'd like to cover

00:17:37.050 --> 00:17:39.690
is an update to Android's
TextView control

00:17:39.690 --> 00:17:43.140
to support the automatic
sizing of text.

00:17:43.140 --> 00:17:45.570
Android Wear devices
have small screens.

00:17:45.570 --> 00:17:49.740
And real estate and readability
are important considerations.

00:17:49.740 --> 00:17:52.090
With user provided
or localized text,

00:17:52.090 --> 00:17:55.200
it takes extra care to make
sure the content fits well

00:17:55.200 --> 00:17:57.960
on the screen and is readable.

00:17:57.960 --> 00:17:59.900
In Android O in the
support library,

00:17:59.900 --> 00:18:01.830
TextView has a new
feature that allows

00:18:01.830 --> 00:18:04.380
it to automatically
select its text size

00:18:04.380 --> 00:18:07.270
to fill the available space.

00:18:07.270 --> 00:18:10.480
The screens above show the
same TextView layout adapting

00:18:10.480 --> 00:18:12.920
based on the contained text.

00:18:12.920 --> 00:18:16.270
This API includes two ways
to control this behavior.

00:18:16.270 --> 00:18:19.650
The first is to provide a
minimum and maximum text size

00:18:19.650 --> 00:18:22.740
and TextView will select
a size within that range.

00:18:22.740 --> 00:18:27.520
The second is to provide
a list of preset sizes.

00:18:27.520 --> 00:18:31.530
Here's an example using the
list of preset sizes in XML.

00:18:31.530 --> 00:18:35.640
To turn on autosizing, first
set the new autosize text type

00:18:35.640 --> 00:18:37.710
property to uniform.

00:18:37.710 --> 00:18:39.720
Then provide the
presets by setting

00:18:39.720 --> 00:18:42.690
the autosize preset
sizes property

00:18:42.690 --> 00:18:45.080
to an array of text sizes.

00:18:45.080 --> 00:18:48.560
Both methods can be configured
in XML or programmatically.

00:18:48.560 --> 00:18:51.760
And also, previewed
in Android Studio.

00:18:51.760 --> 00:18:54.380
The support library has
been updated to include

00:18:54.380 --> 00:18:57.140
compatibility on older
versions of Android, including

00:18:57.140 --> 00:18:59.650
all Wear versions, so you can
start using this in your apps

00:18:59.650 --> 00:19:00.149
today.

00:19:02.650 --> 00:19:05.380
My final topic is
background limits.

00:19:05.380 --> 00:19:07.774
As our next speaker,
Nancy, will detail shortly,

00:19:07.774 --> 00:19:09.940
preserving battery life is
one of the most important

00:19:09.940 --> 00:19:13.210
considerations when
developing a Wear app.

00:19:13.210 --> 00:19:16.367
We all want to create
responsive and useful apps,

00:19:16.367 --> 00:19:17.950
but also make sure
that the device can

00:19:17.950 --> 00:19:19.710
last through the day.

00:19:19.710 --> 00:19:22.120
Android O brings with it a
number of platform changes

00:19:22.120 --> 00:19:25.650
to help accomplish this.

00:19:25.650 --> 00:19:27.810
Android allows apps
to run and respond

00:19:27.810 --> 00:19:30.660
to events in the background,
but when too many apps

00:19:30.660 --> 00:19:33.360
are running or
execute for too long,

00:19:33.360 --> 00:19:37.720
it can overly consume limited
resources like RAM and battery.

00:19:37.720 --> 00:19:39.640
Background services
and apps targeting

00:19:39.640 --> 00:19:42.340
Android O have new
limitations on how long

00:19:42.340 --> 00:19:44.580
and when they can execute.

00:19:44.580 --> 00:19:47.940
In general, if an app no longer
has a foreground activity

00:19:47.940 --> 00:19:51.470
or service running, it will be
considered idle, at which point

00:19:51.470 --> 00:19:54.360
all of its services are stopped.

00:19:54.360 --> 00:19:56.010
In past versions
of Android, an app

00:19:56.010 --> 00:19:59.010
could also register for implicit
broadcasts in its Android

00:19:59.010 --> 00:20:00.480
manifest.

00:20:00.480 --> 00:20:02.730
This made it a bit too
easy for many processes

00:20:02.730 --> 00:20:05.640
to spin up for common events.

00:20:05.640 --> 00:20:07.610
This is no longer
supported in general,

00:20:07.610 --> 00:20:10.110
but your app can still register
for these events at runtime.

00:20:13.250 --> 00:20:16.870
A few best practices to
preserve app functionality.

00:20:16.870 --> 00:20:19.090
The JobScheduler and
AlarmManager APIs

00:20:19.090 --> 00:20:21.040
can still be used to
run background work

00:20:21.040 --> 00:20:23.050
at appropriate times.

00:20:23.050 --> 00:20:25.630
There's also a new class in
the support library, the Java

00:20:25.630 --> 00:20:28.180
IntentService, which
uses JobScheduler

00:20:28.180 --> 00:20:31.930
on Android O and a fallback to
just regular services on older

00:20:31.930 --> 00:20:33.670
platforms.

00:20:33.670 --> 00:20:36.070
When your app receives a
Firebase Cloud message,

00:20:36.070 --> 00:20:37.540
it will also have
a window of time

00:20:37.540 --> 00:20:40.640
to execute before
being considered idle.

00:20:40.640 --> 00:20:42.980
If you really need to run,
you can start your service

00:20:42.980 --> 00:20:43.787
in the foreground.

00:20:43.787 --> 00:20:46.370
A notification will displayed
to the user while it is running.

00:20:48.950 --> 00:20:51.530
Receiving location
updates in background apps

00:20:51.530 --> 00:20:54.240
is another area where there is
a behavior change in Android

00:20:54.240 --> 00:20:58.824
O. It was found to be a major
contributor to power issues

00:20:58.824 --> 00:21:00.740
with background apps
being allowed to register

00:21:00.740 --> 00:21:03.050
for high rates of updates.

00:21:03.050 --> 00:21:04.910
In Android O,
background services

00:21:04.910 --> 00:21:08.360
are now limited to receiving a
few location updates per hour

00:21:08.360 --> 00:21:11.740
instead of having
unlimited access.

00:21:11.740 --> 00:21:13.960
As a best practice,
you can switch your app

00:21:13.960 --> 00:21:16.207
to use the batch location API.

00:21:16.207 --> 00:21:18.040
Your app will still
receive location updates

00:21:18.040 --> 00:21:19.780
at a reduced rate,
but each update

00:21:19.780 --> 00:21:22.990
can contain multiple
location events.

00:21:22.990 --> 00:21:24.700
If your app needs to
continue receiving

00:21:24.700 --> 00:21:27.730
a high rate of updates, for
example, it's a fitness app

00:21:27.730 --> 00:21:31.150
and you're doing a run, it
can start a foreground service

00:21:31.150 --> 00:21:33.250
and continue getting
the faster rate.

00:21:36.080 --> 00:21:37.910
This is a brief look
at a few Android O

00:21:37.910 --> 00:21:39.740
features relevant to Wear.

00:21:39.740 --> 00:21:41.460
There are more detailed
talks available,

00:21:41.460 --> 00:21:44.480
for example, the background
check talk by Ben Poiesz,

00:21:44.480 --> 00:21:48.080
and there's a notification
talk this afternoon at 4:30 PM.

00:21:48.080 --> 00:21:49.760
If you'd like to try
some of these APIs

00:21:49.760 --> 00:21:52.610
on a watch form factor, the
Android O Developer Preview

00:21:52.610 --> 00:21:55.490
has been updated to include a
new version of the Android Wear

00:21:55.490 --> 00:21:57.120
emulator.

00:21:57.120 --> 00:21:58.050
Thank you.

00:21:58.050 --> 00:22:00.605
And with that, I'll hand over
to Nancy to talk about power.

00:22:00.605 --> 00:22:03.030
[APPLAUSE]

00:22:04.800 --> 00:22:06.050
NANCY ZHENG: Thank you, Griff.

00:22:08.570 --> 00:22:10.050
So hi, everyone.

00:22:10.050 --> 00:22:13.580
My name is Nancy and I'm a
software engineer and tech

00:22:13.580 --> 00:22:16.530
lead of the Wear Power team.

00:22:16.530 --> 00:22:19.610
So over the last year,
the Android Wear team

00:22:19.610 --> 00:22:23.000
has been doubling down on
improving the battery life

00:22:23.000 --> 00:22:25.970
of the Android Wear platform.

00:22:25.970 --> 00:22:28.870
And we've developed a
set of best practices

00:22:28.870 --> 00:22:31.580
that we'd like to
share with you today

00:22:31.580 --> 00:22:36.380
that can help you improve the
battery life of your Wear app.

00:22:36.380 --> 00:22:38.210
To get started, I'd
like to give you

00:22:38.210 --> 00:22:42.980
a sense of how much battery we
have to work with on the watch.

00:22:46.110 --> 00:22:50.060
So here is a representation of
battery capacity on the Pixel

00:22:50.060 --> 00:22:53.190
XL and Pixel phones.

00:22:53.190 --> 00:22:56.280
Now compare that to two
of our recently launched

00:22:56.280 --> 00:23:02.080
watches, the LG Watch
Sport and Style.

00:23:02.080 --> 00:23:05.130
As you can see here,
our watch batteries

00:23:05.130 --> 00:23:08.700
are about 1/10 the
battery capacity

00:23:08.700 --> 00:23:10.697
of their phone counterparts.

00:23:13.500 --> 00:23:15.830
So that's really
not a lot of battery

00:23:15.830 --> 00:23:18.050
we have to work with here.

00:23:18.050 --> 00:23:21.830
But despite this, Wear
users expect their watch

00:23:21.830 --> 00:23:25.520
to last all day long,
because oftentimes,

00:23:25.520 --> 00:23:28.040
having a dead
watch on your wrist

00:23:28.040 --> 00:23:30.980
can be worse than
having a dead phone

00:23:30.980 --> 00:23:34.580
in your pocket or your purse.

00:23:34.580 --> 00:23:38.570
But what are some of the things
that use battery on your watch?

00:23:41.470 --> 00:23:44.890
Well, one of the key
drivers is the display.

00:23:44.890 --> 00:23:47.260
Now, on Android Wear
watches, we have a lot

00:23:47.260 --> 00:23:49.150
of different types of displays.

00:23:49.150 --> 00:23:51.670
But for the next
couple of slides,

00:23:51.670 --> 00:23:54.870
I'm going to focus on an
OLED display as an example.

00:23:58.380 --> 00:24:03.740
Now, here we have the power
draw when the display is off.

00:24:03.740 --> 00:24:09.170
Compare that to an
always-on display.

00:24:09.170 --> 00:24:15.570
And again, compare that
to an interactive display.

00:24:15.570 --> 00:24:19.070
As you can see, with
each step, the power

00:24:19.070 --> 00:24:21.950
draw increases substantially.

00:24:21.950 --> 00:24:24.850
And that means that the
battery life will decrease.

00:24:29.030 --> 00:24:32.620
So the takeaway here is that
reducing interactive display

00:24:32.620 --> 00:24:35.740
time will save power.

00:24:35.740 --> 00:24:40.450
One way to do this is to
reduce the amount of time

00:24:40.450 --> 00:24:42.460
that the user has
to spend in your app

00:24:42.460 --> 00:24:44.920
by making it quick
and easy for the user

00:24:44.920 --> 00:24:49.360
to do what they need and
move on with their day.

00:24:49.360 --> 00:24:52.750
Sometimes you might need to
continuously show information

00:24:52.750 --> 00:24:54.250
to the user.

00:24:54.250 --> 00:24:59.120
And in those cases, you
should implement ambient mode.

00:24:59.120 --> 00:25:01.690
So in ambient mode, you
should switch your UI

00:25:01.690 --> 00:25:04.810
to a black and white color
theme and only update

00:25:04.810 --> 00:25:07.250
the display once a minute.

00:25:07.250 --> 00:25:09.490
And this will allow the
application processor

00:25:09.490 --> 00:25:12.560
to go to sleep in between
and conserve power.

00:25:15.740 --> 00:25:18.840
Another thing you should
consider is using dark themes.

00:25:18.840 --> 00:25:21.370
Now, in our
experiments, we noticed

00:25:21.370 --> 00:25:25.510
that an all white display can
use up to seven times more

00:25:25.510 --> 00:25:29.770
power than an all black
display in interactive mode.

00:25:29.770 --> 00:25:33.310
And so if you're writing
a watch face or an app

00:25:33.310 --> 00:25:36.790
where you expect a lot
of user interaction time,

00:25:36.790 --> 00:25:39.760
you should switch to
using a dark theme.

00:25:42.830 --> 00:25:45.470
Now, aside from just
color, animations

00:25:45.470 --> 00:25:49.530
are also very expensive.

00:25:49.530 --> 00:25:55.250
Now, remember that display power
chart from a few slides ago?

00:25:55.250 --> 00:25:57.900
Here's how it looks
with animation power

00:25:57.900 --> 00:26:00.390
usage in the mix.

00:26:00.390 --> 00:26:04.500
Now, before you panic,
remember that most animations

00:26:04.500 --> 00:26:08.400
only last fractions of a
second, and so aren't usually

00:26:08.400 --> 00:26:10.750
cause for concern.

00:26:10.750 --> 00:26:13.530
It's a different story,
however, if you're

00:26:13.530 --> 00:26:16.840
working with a long-running
animation, such as a loading

00:26:16.840 --> 00:26:17.340
spinner.

00:26:20.270 --> 00:26:24.470
This is why, in Wear 2.0, we
switch our framework loading

00:26:24.470 --> 00:26:28.700
spinner from the one on the
left to the one on the right.

00:26:28.700 --> 00:26:32.900
The difference here is that
we're only rendering one out

00:26:32.900 --> 00:26:36.560
of every three seconds
in our low power spinner.

00:26:36.560 --> 00:26:42.060
And just by doing this, we
saw a 3x power improvement.

00:26:42.060 --> 00:26:46.340
So if you use the default
framework spinner on Wear,

00:26:46.340 --> 00:26:49.430
you will also get these battery
savings, which you should do.

00:26:53.230 --> 00:26:57.280
Another example of animations
is with the watch face.

00:26:57.280 --> 00:27:00.460
Watch faces that have
a sweeping second hand,

00:27:00.460 --> 00:27:04.410
like the one on the left,
uses substantially more power

00:27:04.410 --> 00:27:08.200
than watch faces that use
a ticking second hand.

00:27:08.200 --> 00:27:11.170
So if a ticking second hand
works with your watch face

00:27:11.170 --> 00:27:14.829
stylistically, you should stick
with that one to save power.

00:27:18.661 --> 00:27:22.590
Aside from the display,
another major battery hog

00:27:22.590 --> 00:27:23.585
is network usage.

00:27:26.580 --> 00:27:28.920
So perhaps the
biggest battery issue

00:27:28.920 --> 00:27:31.470
that we have on
Wear devices today

00:27:31.470 --> 00:27:34.700
is unnecessary
background syncing.

00:27:34.700 --> 00:27:37.410
Now, let me give you an
example of an anti-pattern that

00:27:37.410 --> 00:27:39.570
could happen.

00:27:39.570 --> 00:27:43.830
An app could be periodically
sending data between the watch

00:27:43.830 --> 00:27:46.190
and the phone or the cloud.

00:27:46.190 --> 00:27:51.570
Periodically, let's
say every 15 minutes.

00:27:51.570 --> 00:27:55.090
When the user is not
actively using your app,

00:27:55.090 --> 00:27:57.450
there should be no
reason for your app

00:27:57.450 --> 00:28:01.080
to be syncing periodically
in the background.

00:28:01.080 --> 00:28:03.180
The only exception
to this is if you

00:28:03.180 --> 00:28:05.160
need to alert the
user of something,

00:28:05.160 --> 00:28:08.220
like a message or notification.

00:28:08.220 --> 00:28:11.880
And in those cases, you should
use SCM push notifications.

00:28:14.440 --> 00:28:19.120
Having said that, if you really
can't avoid background syncing,

00:28:19.120 --> 00:28:21.310
you should at least
try to batch your data.

00:28:21.310 --> 00:28:25.790
And we recommend batching
to transfer once per day,

00:28:25.790 --> 00:28:29.020
and preferably, when the
watch is on the charger.

00:28:29.020 --> 00:28:33.010
And you can do this using
the JobScheduler API.

00:28:33.010 --> 00:28:35.230
Now, I have talked a
lot about network usage,

00:28:35.230 --> 00:28:38.290
but you might be wondering,
how much of an impact

00:28:38.290 --> 00:28:41.710
is it on the battery really?

00:28:41.710 --> 00:28:44.840
Well, I'm glad you asked.

00:28:44.840 --> 00:28:48.550
Assuming you want to transfer
10,000 one-kilobyte chunks

00:28:48.550 --> 00:28:52.390
of data throughout a user's day.

00:28:52.390 --> 00:28:57.610
If you do this in one batch,
in one 10-megabyte batch once

00:28:57.610 --> 00:29:02.530
per day, you'll use about 1%
of the user's battery, which

00:29:02.530 --> 00:29:03.240
is OK.

00:29:05.770 --> 00:29:08.040
But if you do not
batch this data

00:29:08.040 --> 00:29:11.520
and send this in 10,000
separate batches,

00:29:11.520 --> 00:29:15.810
you will end up using
over 100% of the battery

00:29:15.810 --> 00:29:17.710
on certain devices.

00:29:17.710 --> 00:29:20.650
So the difference
is night and day.

00:29:20.650 --> 00:29:22.140
So always batch your data.

00:29:25.690 --> 00:29:27.840
Now, another scenario
I want to discuss

00:29:27.840 --> 00:29:31.870
is if you have to transfer
a large chunk of data.

00:29:31.870 --> 00:29:35.509
An example might be if the user
wants to download some music

00:29:35.509 --> 00:29:37.800
or if they want to download
an app from the Play Store,

00:29:37.800 --> 00:29:39.850
for example.

00:29:39.850 --> 00:29:43.440
If you are transferring
more than a few megabytes,

00:29:43.440 --> 00:29:46.170
you should use a high
bandwidth network,

00:29:46.170 --> 00:29:47.625
such as Wi-Fi or cellular.

00:29:51.070 --> 00:29:54.100
Here's an example of the
cost of transferring data

00:29:54.100 --> 00:29:55.600
over different radios.

00:29:55.600 --> 00:30:01.090
We have here Wi-Fi,
cellular, and Bluetooth.

00:30:01.090 --> 00:30:05.645
So with one-megabyte case,
the difference is not so huge.

00:30:05.645 --> 00:30:07.270
But let's look at
what happens if we're

00:30:07.270 --> 00:30:08.880
transferring 30 megabytes.

00:30:11.670 --> 00:30:15.360
As you can see, Bluetooth
is much more power

00:30:15.360 --> 00:30:17.220
intensive than
Wi-Fi or cellular.

00:30:21.270 --> 00:30:24.570
So to transfer data
over Wi-Fi or cellular,

00:30:24.570 --> 00:30:28.950
you can use the
NetworkRequest API shown here.

00:30:28.950 --> 00:30:33.720
Unlike on phones, starting
in Wear 2.0, using this API

00:30:33.720 --> 00:30:36.360
will actually turn
on these radios

00:30:36.360 --> 00:30:39.210
if they're not already on.

00:30:39.210 --> 00:30:43.020
And of course, there is a
cost to turning on radios,

00:30:43.020 --> 00:30:45.840
so you should only do this
if you're transferring

00:30:45.840 --> 00:30:47.010
a large chunk of data.

00:30:50.540 --> 00:30:52.910
In your network
request, you should

00:30:52.910 --> 00:30:55.400
include a network callback.

00:30:55.400 --> 00:30:59.750
And once a network that meets
your needs is available,

00:30:59.750 --> 00:31:02.720
you should get a
callback and bind

00:31:02.720 --> 00:31:06.560
to the network
that was provided.

00:31:06.560 --> 00:31:10.190
And then you can make
your data transfer there.

00:31:10.190 --> 00:31:14.060
And when you're done, don't
forget to release your network

00:31:14.060 --> 00:31:15.200
request.

00:31:15.200 --> 00:31:17.810
This will allow the
framework to turn off

00:31:17.810 --> 00:31:20.230
these radios to conserve power.

00:31:23.050 --> 00:31:27.210
So for more examples of how
to use the NetworkRequest API,

00:31:27.210 --> 00:31:29.130
you can visit our
Developer Guide

00:31:29.130 --> 00:31:32.010
by searching for
Android Wear Networking.

00:31:35.167 --> 00:31:37.810
Now, aside from the
display and the radio,

00:31:37.810 --> 00:31:39.850
there are also other
expensive features

00:31:39.850 --> 00:31:41.860
on the watch that
you might be using,

00:31:41.860 --> 00:31:46.150
such as vibration,
location, and music.

00:31:46.150 --> 00:31:49.010
I don't have time to go
into all of these today,

00:31:49.010 --> 00:31:51.880
but just remember to use
these features sparingly

00:31:51.880 --> 00:31:53.530
because they're very expensive.

00:31:57.410 --> 00:32:00.870
Also, if you want to debug
your app further and look

00:32:00.870 --> 00:32:03.820
at how your app is
doing on battery life,

00:32:03.820 --> 00:32:06.690
you might want to try
out Battery Historian.

00:32:06.690 --> 00:32:09.180
You might have seen
previous I/O talks

00:32:09.180 --> 00:32:12.660
about how to use Battery
Historian to debug your phone

00:32:12.660 --> 00:32:14.880
bug reports for power.

00:32:14.880 --> 00:32:17.910
As you might have guessed,
Battery Historian also

00:32:17.910 --> 00:32:20.040
works great on Android Wear.

00:32:20.040 --> 00:32:22.620
So give it a go and let
us know what you think.

00:32:25.950 --> 00:32:28.800
Now, I want to mention
one more thing.

00:32:28.800 --> 00:32:31.800
In many cases, where
we're seeing a user not

00:32:31.800 --> 00:32:35.220
get a full day of
battery usage, it's

00:32:35.220 --> 00:32:39.990
often caused by an app doing
some background network

00:32:39.990 --> 00:32:44.820
processing or location
processing overly aggressively.

00:32:44.820 --> 00:32:47.850
This is why in future
versions of Android Wear,

00:32:47.850 --> 00:32:49.500
we're planning to
put further process

00:32:49.500 --> 00:32:54.270
restrictions on background
processes and watch faces.

00:32:54.270 --> 00:32:58.050
This is in addition to
the Android O background

00:32:58.050 --> 00:33:02.280
restrictions that Griff
mentioned earlier in the talk.

00:33:02.280 --> 00:33:05.370
And so to prepare
for this, you should

00:33:05.370 --> 00:33:07.860
make sure to implement
the best practices

00:33:07.860 --> 00:33:12.240
that I mentioned here today
to get ahead of the game.

00:33:12.240 --> 00:33:15.390
And always remember to test
your app before you launch it.

00:33:18.530 --> 00:33:20.720
So we talked about a
lot of things today.

00:33:20.720 --> 00:33:24.500
And just to give a
quick recap, watches

00:33:24.500 --> 00:33:29.500
have tiny batteries,
1/10 of phones.

00:33:29.500 --> 00:33:34.060
Displays are expensive, so try
to reduce interactive display

00:33:34.060 --> 00:33:39.010
time, implement ambient
mode, use dark color themes,

00:33:39.010 --> 00:33:43.020
and reduce animation usage.

00:33:43.020 --> 00:33:45.630
You should also be
careful with network

00:33:45.630 --> 00:33:47.840
and make sure to avoid
background syncs,

00:33:47.840 --> 00:33:51.420
to batch your data, and to
use high bandwidth networks

00:33:51.420 --> 00:33:54.840
for large data transfers.

00:33:54.840 --> 00:33:59.970
And finally, don't forget to try
out Battery Historian for Wear.

00:33:59.970 --> 00:34:03.954
And with that, I'll hand it
over to David to wrap us up.

00:34:03.954 --> 00:34:06.339
[APPLAUSE]

00:34:09.210 --> 00:34:11.340
DAVID SINGLETON:
Thank you, Nancy.

00:34:11.340 --> 00:34:15.330
So to recap, we're making
complications and Wear user

00:34:15.330 --> 00:34:18.449
interfaces much easier to
build, so there's no better time

00:34:18.449 --> 00:34:20.040
to get started.

00:34:20.040 --> 00:34:22.710
Second, as part of
the Android family,

00:34:22.710 --> 00:34:25.920
we're getting a whole host of
new features from Android O.

00:34:25.920 --> 00:34:29.250
So be sure to check those out
and test your app, especially

00:34:29.250 --> 00:34:30.940
the background limits.

00:34:30.940 --> 00:34:33.150
And finally, battery
is really precious,

00:34:33.150 --> 00:34:38.889
so please conserve it using
the tips that Nancy presented.

00:34:38.889 --> 00:34:42.130
Apart from this session, we have
two more sessions on Android

00:34:42.130 --> 00:34:44.739
Wear at Google I/O.
So firstly, we're

00:34:44.739 --> 00:34:48.340
hosting office hours
at 5:30 PM today

00:34:48.340 --> 00:34:50.670
where you can ask experts
from the team anything

00:34:50.670 --> 00:34:53.170
about the issues that you face
or the opportunities that you

00:34:53.170 --> 00:34:57.070
see while designing or
developing for Android Wear.

00:34:57.070 --> 00:35:00.310
And second, we have that
other session that Jen already

00:35:00.310 --> 00:35:03.340
mentioned tomorrow
focusing on the new UI

00:35:03.340 --> 00:35:05.230
tools we talked about today.

00:35:05.230 --> 00:35:07.270
And we'll go through
in more detail

00:35:07.270 --> 00:35:09.730
the new, simpler
complications rendering system

00:35:09.730 --> 00:35:12.050
that you can start to
use if you would like to,

00:35:12.050 --> 00:35:14.050
as well as the new
Wear UI library

00:35:14.050 --> 00:35:16.390
that we're open sourcing.

00:35:16.390 --> 00:35:18.520
Thanks for attending this talk.

00:35:18.520 --> 00:35:20.980
And if you have any
questions, the presenters

00:35:20.980 --> 00:35:23.180
will be over in our sandbox
right after the talk,

00:35:23.180 --> 00:35:26.350
and we'd love to
talk to you then.

00:35:26.350 --> 00:35:30.880
The sandbox is where you
can see right on this map.

00:35:30.880 --> 00:35:31.870
Thank you very much.

00:35:31.870 --> 00:35:33.070
[APPLAUSE]

00:35:34.870 --> 00:35:37.920
[MUSIC PLAYING]

