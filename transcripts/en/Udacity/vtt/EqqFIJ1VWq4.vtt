WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Well, let's take a look.

00:00:02.000 --> 00:00:04.000
The first one is actually true.

00:00:04.000 --> 00:00:09.000
With only one function in our program, we'll have our top level global environment

00:00:09.000 --> 00:00:12.000
and then the environment for our new function, and

00:00:12.000 --> 00:00:14.000
we're making its declaration, or its parent pointer,

00:00:14.000 --> 00:00:18.000
go back here to the global environment.

00:00:18.000 --> 00:00:22.000
That's where it should go, but that's also where the bug is putting it,

00:00:22.000 --> 00:00:24.000
so we won't be able to tell the difference.

00:00:24.000 --> 00:00:26.000
Now if this weren't an anonymous function

00:00:26.000 --> 00:00:29.000
but were instead a recursive function like factorial,

00:00:29.000 --> 00:00:31.000
we might be able to see the bug with only one.

00:00:31.000 --> 00:00:35.000
But with just one anonymous function, we can't quite see the bug.

00:00:35.000 --> 00:00:38.000
We need at least three variables in the global environment to see the bug.

00:00:38.000 --> 00:00:40.000
This isn't really true.

00:00:40.000 --> 00:00:43.000
One variable in the global environment--one local variable--

00:00:43.000 --> 00:00:45.000
maybe even no variables in the

00:00:45.000 --> 00:00:47.000
global environment--should be totally fine.

00:00:47.000 --> 00:00:50.000
The only time the parent pointer matters is when

00:00:50.000 --> 00:00:53.000
we're looking up a variable in

00:00:53.000 --> 00:00:57.000
a child environment and we don't find it locally.

00:00:57.000 --> 00:00:59.000
So we should be able to construct a test case

00:00:59.000 --> 00:01:02.000
that has just one such variable, like the "a" in

00:01:02.000 --> 00:01:04.000
the Balder example we did earlier.

00:01:04.000 --> 00:01:06.000
We won't need three.

00:01:06.000 --> 00:01:08.000
We can show the bug with only two functions,

00:01:08.000 --> 00:01:10.000
each separately declared at the top level.

00:01:10.000 --> 00:01:13.000
If I have another function, function two, declared at the top level,

00:01:13.000 --> 00:01:16.000
its parent pointer should point back to global

00:01:16.000 --> 00:01:19.000
and because of the bug, it will point back to global anyway.

00:01:19.000 --> 00:01:22.000
So this won't let us see the bug.

00:01:22.000 --> 00:01:25.000
We can show the bug with one function nested inside another.

00:01:25.000 --> 00:01:27.000
This is the plan.

00:01:27.000 --> 00:01:30.000
Let's say we have function one with function two nested inside of it.

00:01:30.000 --> 00:01:32.000
The parent pointer for function one,

00:01:32.000 --> 00:01:34.000
or this pointer, should go back to global.

00:01:34.000 --> 00:01:36.000
The bug will make it go back to global.

00:01:36.000 --> 00:01:38.000
Function two should point back to function one

00:01:38.000 --> 00:01:42.000
but the bug will make it point to global.

00:01:42.000 --> 00:01:45.000
So all I have to do is put some variable "a" in here,

00:01:45.000 --> 00:01:48.000
and have function two refer to it.

00:01:48.000 --> 00:01:51.000
Then in my test case we won't find it and we'll get an error,

00:01:51.000 --> 00:01:53.000
but in the real world we should find it and that will

00:01:53.000 --> 09:59:59.000
allow me to pin down the defect.

