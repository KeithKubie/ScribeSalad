WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Now, of course Python has a regular expression module called the "re module."

00:00:04.000 --> 00:00:08.000
If you really want to use regular expressions, you import re and get started.

00:00:08.000 --> 00:00:11.000
The point here is not so much to use regular expressions

00:00:11.000 --> 00:00:14.000
as to show you what it's like to build a language processer.

00:00:14.000 --> 00:00:19.000
So to get started doing that, I started by writing a test function

00:00:19.000 --> 00:00:22.000
that defines some regular expressions using this API.

00:00:22.000 --> 00:00:26.000
First I defined a, b, and c as being these literals.

00:00:26.000 --> 00:00:28.000
Then I combine some more complicated examples.

00:00:28.000 --> 00:00:33.000
Then I showed some example of assertions, of what we want to be true.

00:00:33.000 --> 00:00:38.000
We've defined two functions that match the functions in the re module.

00:00:38.000 --> 00:00:41.000
The first function is called "search."

00:00:41.000 --> 00:00:47.000
It takes a pattern and a text, and in the regular expression module

00:00:47.000 --> 00:00:50.000
this function returns something called a "matched object."

00:00:50.000 --> 00:00:58.000
What we'll have it do is return a string which will be the earliest match in the text

00:00:58.000 --> 00:01:01.000
for the pattern, and if there is more than one match at the same location,

00:01:01.000 --> 00:01:04.000
it'll be the longest of those.

00:01:04.000 --> 00:01:14.000
For example, search('def', 'abcdef') would return "def" because it's found there.

00:01:14.000 --> 00:01:17.000
The next function is called "match."

00:01:17.000 --> 00:01:22.000
It also takes a pattern and a text and returns the string that matches.

00:01:22.000 --> 00:01:27.000
But for match, the match must occur at the very start of the string.

00:01:27.000 --> 00:01:33.000
Search('def') would return None, indicating that there is no match.

00:01:33.000 --> 00:01:39.000
But search('def') in this string that has 'def' at the beginning would return that match.

00:01:39.000 --> 00:01:43.000
Here are some examples of the types of things that I want to be able to do.

00:01:43.000 --> 09:59:59.000
That gives me the start of a specification for how I want to write my search and match functions.

