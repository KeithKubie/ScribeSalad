WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
The first question we had was about debugging and logging and how to make

00:00:05.000 --> 00:00:10.000
the development process a little bit smoother and any advice you had about that.

00:00:10.000 --> 00:00:13.000
Ok. Yeah. That's a good question.

00:00:13.000 --> 00:00:16.000
Ok. So, testing and debugging.

00:00:16.000 --> 00:00:21.000
Let's start with debugging first cause this one I actually do know how to do.

00:00:21.000 --> 00:00:25.000
First thing you want to do is in your file. You can take import logging.

00:00:25.000 --> 00:00:30.000
And this is the Python standard logging library, and it's already configured

00:00:30.000 --> 00:00:39.000
so throughout your code, you can basically say logging debug and just give this a string,

00:00:39.000 --> 00:00:44.000
and it will print that in the console whenever this line is running if you're in the bug mode.

00:00:44.000 --> 00:00:49.000
Now, there is another series of lines that I'm not going to write here,

00:00:49.000 --> 00:00:56.000
but if you look at the homework exams that I put up basically at the top of all my source files

00:00:56.000 --> 00:01:04.000
I have this line that's basically DEBUG, and basically what it does is it looks at the environment

00:01:04.000 --> 00:01:09.000
to see if I'm running an app engine debug mode or in production.

00:01:09.000 --> 00:01:15.000
In production, this would be false, and in development, this value would be true.

00:01:15.000 --> 00:01:17.000
And this basically triggers all of these statements.

00:01:17.000 --> 00:01:19.000
In production, we don't log all these debug statements,

00:01:19.000 --> 00:01:24.000
but in development we log--everything that gets called by .debug gets printed to the console.

00:01:24.000 --> 00:01:28.000
Now you could also say .error, logging.error,

00:01:28.000 --> 00:01:33.000
and this will print in production and in development, and so this is really handy.

00:01:33.000 --> 00:01:36.000
If there is a case where something went wrong, the database did not load right

00:01:36.000 --> 00:01:40.000
or some user error happened that you want to be aware of,

00:01:40.000 --> 00:01:44.000
even if it's happening in production, you can call logging dot error,

00:01:44.000 --> 00:01:50.000
and then you can go into the admin console, which, in app engine, you go to appengine.com

00:01:50.000 --> 00:01:52.000
and you can see all your admin stuff.

00:01:52.000 --> 00:01:54.000
You can actually look at all of your logs,

00:01:54.000 --> 00:01:57.000
and it'll include everything from error, but it won't include the stuff from debug.

00:01:57.000 --> 00:02:01.000
That's really helpful kind of way of seeing what's going on in your program.

00:02:01.000 --> 00:02:05.000
Of course, it's always print. It is really helpful as well.

00:02:05.000 --> 00:02:08.000
Now, using things like the actual Python debugger,

00:02:08.000 --> 00:02:11.000
is really hard with web apps because you're not running this module.

00:02:11.000 --> 00:02:13.000
This is whole framework around it.

00:02:13.000 --> 00:02:18.000
There are more complicated setups, but I found over the years that

00:02:18.000 --> 00:02:22.000
just having a really good output to your console, you can go a long way.

00:02:22.000 --> 00:02:28.000
Now, for how to test--testing is really, really hard on web apps.

00:02:28.000 --> 00:02:31.000
There's a whole Udacity course on how to do testing.

00:02:31.000 --> 00:02:35.000
And a lot of your modules, a lot of the stuff that I would put in a utils file

00:02:35.000 --> 00:02:39.000
like the hashing and the cookies and salting and all that stuff,

00:02:39.000 --> 00:02:44.000
you can just write functions to test that--there's a whole course.

00:02:44.000 --> 00:02:48.000
Now, for actually testing the behavior of your web app that's a lot harder.

00:02:48.000 --> 00:02:54.000
What we used to do at Reddit is we would deploy our code on one server,

00:02:54.000 --> 00:02:58.000
and we'd have an error log that was constantly scrolling in real time of all of our errors

00:02:58.000 --> 00:03:01.000
across all of the app servers, and if that starts scrolling faster,

00:03:01.000 --> 00:03:04.000
we know there's a bug we just pushed into production,

00:03:04.000 --> 00:03:10.000
and we take that machine out of rotation and investigate.

00:03:10.000 --> 00:03:14.000
That's I would say not the most professional way of doing things.

00:03:14.000 --> 00:03:18.000
However, I have on good authority that that many of the largest websites from the world

00:03:18.000 --> 00:03:22.000
actually do things that way because testing website is fairly non-deterministic.

00:03:22.000 --> 00:03:24.000
You just don't know what the errors are going to be.

00:03:24.000 --> 00:03:26.000
It was very hard to know what the errors are going to be.

00:03:26.000 --> 00:03:30.000
Another strategy we used in Reddit a lot is we would take before doing a big deployment,

00:03:30.000 --> 00:03:35.000
we would capture the last 10,000 requests or so, and we would store those,

00:03:35.000 --> 00:03:39.000
and we'd re-played them against our new app servers or in development.

00:03:39.000 --> 00:03:42.000
We just ran all of those requests against the development app server.

00:03:42.000 --> 00:03:46.000
If that produced an error, then we'd go investigate.

00:03:46.000 --> 00:03:52.000
That works really well, because we figured if the error is serious, we're going to see it immediately.

00:03:52.000 --> 00:03:55.000
If it's not something we see immediately, it's probably not serious.

00:03:55.000 --> 00:03:58.000
That's basically how we've done our testing.

00:03:58.000 --> 00:04:02.000
Every once in a while something bad sneaks through.

00:04:02.000 --> 00:04:06.000
Fortunately, we've never lost data or really corrupted any data,

00:04:06.000 --> 00:04:10.000
because we try to do the best we can locally, but it's still a real challenge.

00:04:10.000 --> 00:04:14.000
And every website is a little different, so it's something you need to think pretty hard about.

00:04:14.000 --> 00:04:20.000
What can go wrong and what happens if this piece of data is null or is full of malicious text.

00:04:20.000 --> 00:04:24.000
As long as you kind of think through that way, you can catch the most errors while you're developing.

00:04:24.000 --> 00:04:27.000
I hope that helps--it's an inexact science I've met

00:04:27.000 --> 00:04:31.000
but that's the way we've gotten by in a pretty large website.

