WEBVTT
Kind: captions
Language: en

00:00:02.000 --> 00:00:04.167
Ryan:
Hello. My name is Ray.

00:00:04.167 --> 00:00:05.834
And I'll be talking
to you today

00:00:05.834 --> 00:00:09.300
about GWT application
architecture best practices.

00:00:09.300 --> 00:00:12.634
We tried to find a drier title,
but this is the one that won.

00:00:12.634 --> 00:00:15.734
I am stunned, amazed,
and flattered

00:00:15.734 --> 00:00:17.767
that you all are here
when you could be eating lunch

00:00:17.767 --> 00:00:18.801
or learning about Wave,

00:00:18.801 --> 00:00:21.968
so thank you very much
for showing up.

00:00:21.968 --> 00:00:24.400
I was going to go
get lunch myself if you hadn't.

00:00:24.400 --> 00:00:27.033
So, I'll warn you also

00:00:27.033 --> 00:00:29.501
that all of my rehearsals
of this have run long.

00:00:29.501 --> 00:00:31.267
And I've responded to that
by adding more slides

00:00:31.267 --> 00:00:33.567
to the presentation,
so I'm probably going to do

00:00:33.567 --> 00:00:35.400
a lot of mumbling
and a lot of talking fast.

00:00:35.400 --> 00:00:37.467
And we'll see where it goes.

00:00:37.467 --> 00:00:39.167
So what are we talking about
today?

00:00:39.167 --> 00:00:41.567
This is about
how to put together

00:00:41.567 --> 00:00:43.234
a nontrivial GWT application.

00:00:43.234 --> 00:00:45.367
Something that you
actually want to ship.

00:00:45.367 --> 00:00:46.868
Something that
you're going to have

00:00:46.868 --> 00:00:50.434
more than two or three people
at a time working on

00:00:50.434 --> 00:00:52.234
without stomping
on each other's toads.

00:00:52.234 --> 00:00:53.367
Toes.

00:00:53.367 --> 00:00:54.701
We're going to look,
in particular,

00:00:54.701 --> 00:00:56.000
at the client side,

00:00:56.000 --> 00:00:57.934
because that's where I tend
to pay attention.

00:00:57.934 --> 00:01:01.133
And what we're really
exploring here

00:01:01.133 --> 00:01:03.868
are lessons that were learned
over the past year

00:01:03.868 --> 00:01:06.834
building the new AdWords
user interface.

00:01:06.834 --> 00:01:08.901
AdWords is a small product
at Google.

00:01:08.901 --> 00:01:10.534
You may have heard of it.

00:01:10.534 --> 00:01:13.400
And it's recently been--
the user interface of that

00:01:13.400 --> 00:01:15.033
has been revamped
from the ground up

00:01:15.033 --> 00:01:17.167
as a GWT application.

00:01:17.167 --> 00:01:18.267
But first, let's go

00:01:18.267 --> 00:01:20.300
to the last slide
of the presentation.

00:01:20.300 --> 00:01:22.300
If you take nothing else
away today,

00:01:22.300 --> 00:01:25.167
there are three things that you
really want to remember.

00:01:25.167 --> 00:01:28.501
First thing, which I'm not going
to talk about much at all,

00:01:28.501 --> 00:01:30.300
but still,
you want to remember it,

00:01:30.300 --> 00:01:33.834
get your browser history right,
and get it right early.

00:01:33.834 --> 00:01:35.367
One of the first things
that you should nail down

00:01:35.367 --> 00:01:37.234
on your app
if you want it to work

00:01:37.234 --> 00:01:39.067
is what the back button
and the forth button

00:01:39.067 --> 00:01:40.434
are going to do to your users,

00:01:40.434 --> 00:01:42.067
how they're going
to be bookmarking things.

00:01:42.067 --> 00:01:44.334
GWT gives you a very nice
history library

00:01:44.334 --> 00:01:45.868
to take care of that,

00:01:45.868 --> 00:01:47.534
and if you apply it early,
it's easy.

00:01:47.534 --> 00:01:48.801
If you apply it
after the fact,

00:01:48.801 --> 00:01:51.400
and try to retrofit it in,
not so easy.

00:01:51.400 --> 00:01:55.000
The next takeaway point
is you're going to use

00:01:55.000 --> 00:01:57.667
an Event Bus as the backbone
of your application

00:01:57.667 --> 00:01:59.000
to let yourself--
let you make sure

00:01:59.000 --> 00:02:00.601
that the left hand of your app

00:02:00.601 --> 00:02:02.267
has no more
than a nodding acquaintance

00:02:02.267 --> 00:02:03.801
with the right hand
of your app.

00:02:03.801 --> 00:02:06.133
Preferably
through conversations

00:02:06.133 --> 00:02:08.200
brokered by
a neutral third party.

00:02:08.200 --> 00:02:11.200
And then finally, you're going
to start saying to yourself,

00:02:11.200 --> 00:02:13.300
"DI + MVP FTW."

00:02:13.300 --> 00:02:15.434
Which is to say,
dependency injection

00:02:15.434 --> 00:02:18.200
and the Model/View/Presenter
pattern for the win.

00:02:18.200 --> 00:02:20.234
And I promise that that'll all
make a lot more sense

00:02:20.234 --> 00:02:22.200
in about 50 minutes or so.

00:02:22.200 --> 00:02:26.701
So let us start
with a demonstration

00:02:26.701 --> 00:02:28.834
of the app that I mentioned,
the AdWords UI.

00:02:28.834 --> 00:02:32.267
Which I, of course,
forgot to cue up.

00:02:32.267 --> 00:02:38.400
So give me a moment
to rectify that situation.

00:02:38.400 --> 00:02:42.501
Yeah.

00:02:42.501 --> 00:02:44.167
We might just blow off
this part of it

00:02:44.167 --> 00:02:45.801
if I can't
get my act together here.

00:02:50.901 --> 00:02:52.834
There it is.

00:02:52.834 --> 00:02:56.033
And it has decided to reload.

00:02:56.033 --> 00:02:57.868
Good.

00:02:57.868 --> 00:02:59.501
So this is live right now.

00:02:59.501 --> 00:03:01.300
I'm looking
at the production site.

00:03:01.300 --> 00:03:03.400
If I run into glitches here,
there are people

00:03:03.400 --> 00:03:06.667
in ten countries
around the world,

00:03:06.667 --> 00:03:08.200
a number of users--

00:03:08.200 --> 00:03:11.000
which number I have been
cautioned not to disclose--

00:03:11.000 --> 00:03:14.467
but they'd notice.

00:03:14.467 --> 00:03:16.834
You can see that this is
a pretty traditional kind of

00:03:16.834 --> 00:03:18.968
table full of data
sort of app.

00:03:18.968 --> 00:03:20.901
But we've got
nice little widgets

00:03:20.901 --> 00:03:24.133
like the GWT Incubator
tree view, fast tree view,

00:03:24.133 --> 00:03:28.400
helping us guide our way
through things here.

00:03:28.400 --> 00:03:33.100
Our users are going to do things
using the paging scrolling table

00:03:33.100 --> 00:03:36.400
from the GWT Incubator to make
lots of edits of their data.

00:03:36.400 --> 00:03:39.801
Maybe several fields at once
in that kind of a thing.

00:03:39.801 --> 00:03:42.467
Or I might want to type around
and change my matching

00:03:42.467 --> 00:03:44.200
and change my CPC.

00:03:44.200 --> 00:03:45.367
I forget what that means,
actually,

00:03:45.367 --> 00:03:46.868
although this
is my live account.

00:03:46.868 --> 00:03:48.901
So I'm not going to actually
commit any of these changes

00:03:48.901 --> 00:03:50.901
that I'm making.

00:03:50.901 --> 00:03:55.334
They might take advantage
of the GWT visualization stuff

00:03:55.334 --> 00:03:57.467
that you might have
learned about yesterday

00:03:57.467 --> 00:03:59.267
to show graphs and such.

00:03:59.267 --> 00:04:00.701
There's my pretty graph.

00:04:00.701 --> 00:04:02.767
I'm not doing so well, really.

00:04:02.767 --> 00:04:05.434
Maybe we're going to compare
my click-through rate

00:04:05.434 --> 00:04:06.767
to the number of clicks
that I get

00:04:06.767 --> 00:04:08.267
and see if there's
a correlation there.

00:04:08.267 --> 00:04:09.901
Yep, there is.

00:04:09.901 --> 00:04:13.567
So this is the app
that we've built

00:04:13.567 --> 00:04:17.334
with a team of more
than a few engineers.

00:04:17.334 --> 00:04:20.267
I really forget the handful,
but the sizeable handful

00:04:20.267 --> 00:04:22.567
has grown lately.

00:04:22.567 --> 00:04:24.868
And we're all able
to commit changes to this

00:04:24.868 --> 00:04:26.167
and test portions of this

00:04:26.167 --> 00:04:28.300
without necessarily talking
to each other every day

00:04:28.300 --> 00:04:30.400
and destroying
each other's code.

00:04:30.400 --> 00:04:33.968
So let's get back
to the presentation.

00:04:33.968 --> 00:04:36.567
And before we get back
to the presentation,

00:04:36.567 --> 00:04:38.100
let's get my speaker notes back,

00:04:38.100 --> 00:04:40.667
or this is going to be
a much shorter presentation.

00:04:46.133 --> 00:04:48.501
Dude, it all worked.
All right.

00:04:48.501 --> 00:04:50.000
So we've got three major themes

00:04:50.000 --> 00:04:51.300
that we're going
to talk about here

00:04:51.300 --> 00:04:54.701
on your way to making
no bad apps the AdWords way.

00:04:54.701 --> 00:04:56.067
You're going to embrace

00:04:56.067 --> 00:04:57.968
the asynchronous nature
of your app.

00:04:57.968 --> 00:04:59.634
You are an AJAX developer.

00:04:59.634 --> 00:05:02.934
And the first word in AJAX
is "asynchronous."

00:05:02.934 --> 00:05:04.834
Let's just not kid ourselves.

00:05:04.834 --> 00:05:06.767
You want to always be
decoupling your app.

00:05:06.767 --> 00:05:09.734
Like I said, the bit over here
and the bit over here

00:05:09.734 --> 00:05:11.801
just shouldn't really know
much about each other.

00:05:11.801 --> 00:05:13.868
And finally,
you're going to strive

00:05:13.868 --> 00:05:15.300
to achieve statelessness,

00:05:15.300 --> 00:05:17.501
so as various bits of your
infrastructure fall over,

00:05:17.501 --> 00:05:19.334
the other bits
aren't bothered by it.

00:05:19.334 --> 00:05:22.701
So, embracing asynchrony.

00:05:22.701 --> 00:05:26.033
These Keynote builds, man.
I can't get enough of 'em.

00:05:26.033 --> 00:05:27.167
Yes.

00:05:27.167 --> 00:05:29.601
The "A" in AJAX
is for asynchronous.

00:05:29.601 --> 00:05:31.734
There is nothing interesting
that you're going to do

00:05:31.734 --> 00:05:34.100
in your application
that isn't going to,

00:05:34.100 --> 00:05:35.901
at some point or another,
require some kind

00:05:35.901 --> 00:05:37.267
of an asynchronous callback.

00:05:37.267 --> 00:05:39.901
So you need to just
come to terms with that fact.

00:05:39.901 --> 00:05:41.567
You don't want to spend
a lot of energy

00:05:41.567 --> 00:05:43.868
trying to create
little synchronous bits

00:05:43.868 --> 00:05:45.801
that you can call
once everything is swapped in,

00:05:45.801 --> 00:05:49.100
because you've got better things
to do with your time.

00:05:49.100 --> 00:05:50.567
And if you do it well,

00:05:50.567 --> 00:05:53.234
it's really not
such a bad thing.

00:05:53.234 --> 00:05:54.667
So here's an example

00:05:54.667 --> 00:05:57.033
of what you might start out
trying to do.

00:05:57.033 --> 00:05:58.367
Through the talk,
I'm going to assume

00:05:58.367 --> 00:06:00.501
that we're writing
an address book application.

00:06:00.501 --> 00:06:01.934
A contact manager.

00:06:01.934 --> 00:06:06.334
Could you all turn your cell
phone ringers on, please?

00:06:06.334 --> 00:06:08.400
The first thing you're going
to do as a good developer

00:06:08.400 --> 00:06:10.334
is you're going to create
your data objects,

00:06:10.334 --> 00:06:12.067
your model objects
at the heart of your app.

00:06:12.067 --> 00:06:14.868
And at the heart
of an address book

00:06:14.868 --> 00:06:16.501
we have contacts.

00:06:16.501 --> 00:06:19.534
And my contacts have things
like a name field,

00:06:19.534 --> 00:06:21.434
and they have ContactDetails.

00:06:21.434 --> 00:06:23.667
ContactDetails
are an interface

00:06:23.667 --> 00:06:26.501
to cover phone numbers
and street addresses

00:06:26.501 --> 00:06:29.834
and mother-in-law's birth date
and that sort of a thing.

00:06:29.834 --> 00:06:31.934
And the mistake
that we made here

00:06:31.934 --> 00:06:36.067
is that we are downloading
the kilobytes and kilobytes

00:06:36.067 --> 00:06:38.167
of ContactDetail information
at the same time

00:06:38.167 --> 00:06:40.133
that we're downloading
our contact objects.

00:06:40.133 --> 00:06:42.000
At least,
that's what I see implied here.

00:06:42.000 --> 00:06:43.801
That's a mistake.

00:06:43.801 --> 00:06:45.133
The odds are that you want
to get your hands

00:06:45.133 --> 00:06:47.100
on that list of contacts
with as little information

00:06:47.100 --> 00:06:50.000
as you need as possible
to display them to your users,

00:06:50.000 --> 00:06:51.701
and then you want
to move on from there

00:06:51.701 --> 00:06:53.868
to fetch just the details
that the user cares about.

00:06:53.868 --> 00:06:56.601
So probably you want a structure
that looks more like this.

00:06:56.601 --> 00:07:00.267
My contact comes down
with a list of DetailIds.

00:07:00.267 --> 00:07:01.968
Some kind of opaque Id object.

00:07:01.968 --> 00:07:03.567
It's probably
a string under the hood.

00:07:03.567 --> 00:07:05.801
But we're all
Java developers here.

00:07:05.801 --> 00:07:06.968
We like our strong types.

00:07:06.968 --> 00:07:08.501
And that way
we don't accidentally

00:07:08.501 --> 00:07:11.234
ask for a contact
with a phone number Id.

00:07:11.234 --> 00:07:12.734
Another small change
I made here,

00:07:12.734 --> 00:07:13.968
which is kind of sneaky,

00:07:13.968 --> 00:07:18.467
is that instead of using
a list of ContactDetails,

00:07:18.467 --> 00:07:21.234
doing the Josh Bloch thing
and correctly providing

00:07:21.234 --> 00:07:22.868
an interface
for my field name

00:07:22.868 --> 00:07:26.968
rather than the implementation
class name.

00:07:26.968 --> 00:07:30.567
I'm actually being very
straightforward about the fact

00:07:30.567 --> 00:07:32.667
that this is an ArrayList
that I'm looking at.

00:07:32.667 --> 00:07:35.834
I picked up this superstition
from a talk

00:07:35.834 --> 00:07:38.400
that I may have misunderstood
on optimizing GWT RPC.

00:07:38.400 --> 00:07:40.267
Where if you know that all
you're ever going to send

00:07:40.267 --> 00:07:42.467
across the wire
are array list instances,

00:07:42.467 --> 00:07:44.601
you don't want to give
the GWT RPC--

00:07:44.601 --> 00:07:47.000
the magic generator--
a chance to try to pick up

00:07:47.000 --> 00:07:48.734
every other possible
implementation of the list

00:07:48.734 --> 00:07:50.734
and accidentally compile that
into your app.

00:07:50.734 --> 00:07:52.267
Small point.

00:07:52.267 --> 00:07:55.033
So here we are, writing
everything asynchronously.

00:07:55.033 --> 00:07:57.601
And thinking to ourselves,
"This is really going to suck."

00:07:57.601 --> 00:07:59.100
It doesn't have to.

00:07:59.100 --> 00:08:01.801
If we wrap
our asynchronous calls

00:08:01.801 --> 00:08:04.367
and asynchronous operations
in the command pattern,

00:08:04.367 --> 00:08:06.334
life can be pretty good.

00:08:06.334 --> 00:08:10.000
A command pattern
is a kind of a thing you do

00:08:10.000 --> 00:08:12.267
where instead of having
a call for this--

00:08:12.267 --> 00:08:15.968
you know, a "do this" method
and a "do that" method

00:08:15.968 --> 00:08:17.400
and an "update the other"
method--

00:08:17.400 --> 00:08:20.701
we have objects
that embody such calls.

00:08:20.701 --> 00:08:23.467
So when it's time for me
to get ContactDetails,

00:08:23.467 --> 00:08:26.367
I'll make an instance
of getContacts command,

00:08:26.367 --> 00:08:28.167
and I'll hand that off
to a command processor

00:08:28.167 --> 00:08:31.901
and receive back in return
a "got the contacts" response.

00:08:31.901 --> 00:08:34.734
Every action I want to take
with my app,

00:08:34.734 --> 00:08:37.267
I encapsulate into an object
like that.

00:08:37.267 --> 00:08:40.767
And because I have all of these
nice little command objects,

00:08:40.767 --> 00:08:43.334
I've got a nice unit
of currency

00:08:43.334 --> 00:08:45.067
for implementing caching
policies.

00:08:45.067 --> 00:08:47.968
Maybe whenever I see
the same GET request twice,

00:08:47.968 --> 00:08:50.200
I'll cache away
the response I got last time

00:08:50.200 --> 00:08:51.901
and just return that to myself
immediately.

00:08:51.901 --> 00:08:53.834
Not bother
with a server-side trip.

00:08:53.834 --> 00:08:57.334
I've got a place where I can do
batching mechanisms.

00:08:57.334 --> 00:09:00.501
If I see five getCalls
in succession

00:09:00.501 --> 00:09:03.033
that aren't interlayered
with updateCalls,

00:09:03.033 --> 00:09:04.767
I'll have a timer going

00:09:04.767 --> 00:09:06.267
where I can collect
all of those guys

00:09:06.267 --> 00:09:09.534
and put them into one do this
group of operations command,

00:09:09.534 --> 00:09:10.767
send that over
to the wire,

00:09:10.767 --> 00:09:13.200
over the wire
in a single HTTP request,

00:09:13.200 --> 00:09:16.367
rather than sending them off
as bits of the app ask for them.

00:09:16.367 --> 00:09:18.701
I got a place that I can
centralize my failure handling.

00:09:18.701 --> 00:09:21.334
So that every time I'm making
one of these async calls,

00:09:21.334 --> 00:09:24.467
I can inherit the "oops,
something went wrong" behavior

00:09:24.467 --> 00:09:26.901
rather than having
to call it out in line there.

00:09:26.901 --> 00:09:29.033
This also, if I want to get

00:09:29.033 --> 00:09:31.067
a little bit forward-looking
about this,

00:09:31.067 --> 00:09:33.234
since I'm being honest
with myself

00:09:33.234 --> 00:09:35.501
about the asynchronous nature
of what's going on here,

00:09:35.501 --> 00:09:37.734
I've done all of the hard parts
of chopping up my app

00:09:37.734 --> 00:09:39.367
into bits
that can be code split

00:09:39.367 --> 00:09:41.367
at GWT.runAsync points.

00:09:41.367 --> 00:09:43.501
I won't go into detail
on GWT.runAsync,

00:09:43.501 --> 00:09:45.467
because I'm sure you've been
hearing about it for two days,

00:09:45.467 --> 00:09:48.067
but do it this way
and you're halfway there.

00:09:48.067 --> 00:09:51.267
If you ever read a book
on "how I'm going to implement

00:09:51.267 --> 00:09:53.300
undo and redo
on my application," the odds are

00:09:53.300 --> 00:09:55.667
the term "command pattern"
is going to come up.

00:09:55.667 --> 00:09:57.234
And you're already working
that way.

00:09:57.234 --> 00:09:59.234
Because you're so clever,
you're halfway there.

00:09:59.234 --> 00:10:01.667
And then finally,
the work that you've done

00:10:01.667 --> 00:10:03.901
to isolate yourself
from all of this RPC.

00:10:03.901 --> 00:10:06.067
You've got a nice funnel point
at which you could slip in

00:10:06.067 --> 00:10:09.868
your HTML5 persistence
type of code

00:10:09.868 --> 00:10:12.067
when you decide you want to get
into offline work.

00:10:12.067 --> 00:10:13.133
So...

00:10:13.133 --> 00:10:15.567
And it shines your shoes too.

00:10:15.567 --> 00:10:18.701
So let's look
at some actual code here,

00:10:18.701 --> 00:10:20.667
how we might implement
something like this.

00:10:20.667 --> 00:10:23.534
Are there any AdWords engineers
in the audience?

00:10:23.534 --> 00:10:25.734
I can say anything.
Okay.

00:10:25.734 --> 00:10:27.367
[audience laughs]

00:10:27.367 --> 00:10:30.167
They won't actually recognize
this interface.

00:10:30.167 --> 00:10:31.434
It's not exactly
what they do.

00:10:31.434 --> 00:10:33.968
But there are tools
that they created

00:10:33.968 --> 00:10:35.133
specifically for the project,

00:10:35.133 --> 00:10:36.300
which when you pull back
the hood,

00:10:36.300 --> 00:10:37.801
this is what's going on there.

00:10:37.801 --> 00:10:40.267
So I assume most of you
are GWT developers

00:10:40.267 --> 00:10:41.734
or you would be off
looking at Wave.

00:10:41.734 --> 00:10:44.234
You probably recognize
the bottom half of this slide

00:10:44.234 --> 00:10:48.734
where we are defining
a GWT RPC service.

00:10:48.734 --> 00:10:50.334
When we're working
in this style,

00:10:50.334 --> 00:10:51.701
we have a single service,

00:10:51.701 --> 00:10:53.901
and that service provides
a single call,

00:10:53.901 --> 00:10:55.934
which is basically
that "execute" word there.

00:10:55.934 --> 00:10:59.400
Do something for me, and then
return to me the response.

00:10:59.400 --> 00:11:00.801
What happened?

00:11:00.801 --> 00:11:04.167
And then the various somethings
that we want our app to do

00:11:04.167 --> 00:11:06.534
are going to implement
this Action interface,

00:11:06.534 --> 00:11:09.968
which we couldn't call Command
because that word is taken

00:11:09.968 --> 00:11:12.434
by another GWT class.

00:11:12.434 --> 00:11:14.701
So an example
of an Action object

00:11:14.701 --> 00:11:17.334
that we might write
would be this GetDetails thing.

00:11:17.334 --> 00:11:21.601
Remember that we are working
on our address book,

00:11:21.601 --> 00:11:24.267
because the world doesn't have
enough address books.

00:11:24.267 --> 00:11:26.300
The command will be something
as simple as

00:11:26.300 --> 00:11:28.234
I'll instantiate the thing.

00:11:28.234 --> 00:11:33.100
I'll give it a list of the Ids
of the details that I want.

00:11:33.100 --> 00:11:35.400
On the server,
I'll do something clever

00:11:35.400 --> 00:11:37.400
to actually fulfill
that request

00:11:37.400 --> 00:11:41.000
and send back across the wire
a GetDetailsResponse object,

00:11:41.000 --> 00:11:43.033
which has this nice ArrayList
of the details

00:11:43.033 --> 00:11:44.467
that I can then
go and render.

00:11:44.467 --> 00:11:47.801
Now, I'm not trying to say
what the granularity

00:11:47.801 --> 00:11:50.367
of your operation should be
when you write your app.

00:11:50.367 --> 00:11:52.934
I'm implying
a pretty verbose world here

00:11:52.934 --> 00:11:56.701
where I've got 500 different
flavors of Get command,

00:11:56.701 --> 00:11:59.767
based on my 500 different
model objects.

00:11:59.767 --> 00:12:01.701
Maybe you want to do something
a little bit more generic

00:12:01.701 --> 00:12:04.067
and just have a single
Get something command

00:12:04.067 --> 00:12:06.567
that's parameterized based on
the type that you're fetching.

00:12:06.567 --> 00:12:08.868
Maybe it's going to make sense
for your app

00:12:08.868 --> 00:12:09.934
to be more coarse-grained.

00:12:09.934 --> 00:12:12.100
Maybe you want
to write actions like,

00:12:12.100 --> 00:12:14.000
"Get me all the stuff I need

00:12:14.000 --> 00:12:16.868
to render
the first page of the UI."

00:12:16.868 --> 00:12:20.100
The level at which you break
stuff down is up to you.

00:12:20.100 --> 00:12:21.934
I'm just trying
to pound home the idea

00:12:21.934 --> 00:12:23.234
that you've got objects
that embody

00:12:23.234 --> 00:12:25.501
what it is
you're trying to ask for

00:12:25.501 --> 00:12:27.367
and the ways you ask for it.

00:12:27.367 --> 00:12:30.968
And I took that digression
one slide too early.

00:12:30.968 --> 00:12:34.167
We've had our...whoops.

00:12:34.167 --> 00:12:35.968
We have our action class.

00:12:35.968 --> 00:12:38.033
We have our response class.

00:12:38.033 --> 00:12:41.400
To make the code a little bit
more pleasant to deal with,

00:12:41.400 --> 00:12:44.400
we're going to write
probably a third class

00:12:44.400 --> 00:12:48.467
which is a custom subclass
of the asynchronous callback

00:12:48.467 --> 00:12:51.234
that happens--is handed
to each GWT RPC call.

00:12:51.234 --> 00:12:54.968
This gives us a spot
to write failure handling

00:12:54.968 --> 00:12:57.133
that the application code
can inherit

00:12:57.133 --> 00:12:59.467
and not have to worry
its pretty little head about.

00:12:59.467 --> 00:13:01.868
Maybe we'll pre-chew
the response a little bit

00:13:01.868 --> 00:13:04.100
to keep everybody
from having to write

00:13:04.100 --> 00:13:05.634
the Get, the Get, the Get,
the code

00:13:05.634 --> 00:13:07.467
to actually get the meat
of the response.

00:13:07.467 --> 00:13:09.234
So what I actually will end up
writing in my app

00:13:09.234 --> 00:13:11.000
when it's time
to render a contact

00:13:11.000 --> 00:13:12.701
or something like that

00:13:12.701 --> 00:13:15.267
is a method like
this showContact thing.

00:13:15.267 --> 00:13:18.300
Where I somehow magically--
we'll discuss it--

00:13:18.300 --> 00:13:20.801
got my hands on the service.

00:13:20.801 --> 00:13:22.467
I've called this execute method.

00:13:22.467 --> 00:13:24.033
I've given it an instance

00:13:24.033 --> 00:13:26.200
of the GetDetails command
that I want it to run.

00:13:26.200 --> 00:13:29.467
And I've instantiated
my callback GotDetails

00:13:29.467 --> 00:13:31.300
so that once I've got
all my information,

00:13:31.300 --> 00:13:33.634
I can call renderContact,
I can call renderDetails,

00:13:33.634 --> 00:13:36.667
and go mess with widgets
and stuff.

00:13:36.667 --> 00:13:41.400
As Java goes,
that's fairly concise.

00:13:41.400 --> 00:13:43.467
We don't have anonymous...

00:13:43.467 --> 00:13:45.534
we don't have closures
and probably never will.

00:13:45.534 --> 00:13:47.267
But this is about as short
as it's going to get

00:13:47.267 --> 00:13:49.100
in a Java sort of world.

00:13:49.100 --> 00:13:52.300
So, on with the theming.

00:13:52.300 --> 00:13:55.601
I mentioned that you want
to decouple your app.

00:13:55.601 --> 00:13:58.567
The whole left hand/right hand
don't talk situation.

00:13:58.567 --> 00:14:01.267
The way that we're going
to make that happen

00:14:01.267 --> 00:14:03.701
is the combination
of an Event Bus,

00:14:03.701 --> 00:14:05.767
using the MVP pattern

00:14:05.767 --> 00:14:08.868
when we have custom widgets
to implement,

00:14:08.868 --> 00:14:10.934
and by using
dependency injection,

00:14:10.934 --> 00:14:13.267
preferably via a tool
like Google GIN,

00:14:13.267 --> 00:14:14.901
which is derived
from Google Guice,

00:14:14.901 --> 00:14:17.100
which all of you--
all of you

00:14:17.100 --> 00:14:18.534
should be attending
the Guice tech talks

00:14:18.534 --> 00:14:19.834
that follow this one,
by the way,

00:14:19.834 --> 00:14:21.133
since you're already
blowing off the Wave guys.

00:14:21.133 --> 00:14:24.334
Guice, Guice, Guice.

00:14:24.334 --> 00:14:26.467
Let's go into depth
on each of those.

00:14:26.467 --> 00:14:28.634
Oh, the reason
that you're going to do this

00:14:28.634 --> 00:14:30.234
is because it buys you things.

00:14:30.234 --> 00:14:33.567
Because your app
is nicely encapsulated,

00:14:33.567 --> 00:14:35.200
you're going to be able
to throw away bits of it

00:14:35.200 --> 00:14:37.267
without the entire thing
falling over.

00:14:37.267 --> 00:14:40.667
You're going to give yourself
a spot

00:14:40.667 --> 00:14:42.801
where you can delay,
as long as possible,

00:14:42.801 --> 00:14:44.567
the slow DOM operations

00:14:44.567 --> 00:14:47.000
that you might want to be--
required to perform.

00:14:47.000 --> 00:14:50.334
Your application logic
will be separated enough

00:14:50.334 --> 00:14:52.634
from your widget
and DOM manipulation logic

00:14:52.634 --> 00:14:55.467
that the slow things can happen
later or never.

00:14:55.467 --> 00:14:57.133
You're going to find
that unit testing

00:14:57.133 --> 00:14:58.567
is a lot simpler to do.

00:14:58.567 --> 00:15:00.868
If I can--
if it's very clear

00:15:00.868 --> 00:15:03.133
how I instantiate
this particular part of the app,

00:15:03.133 --> 00:15:04.200
it's going to be easy for me

00:15:04.200 --> 00:15:05.868
to test
that particular part of the app

00:15:05.868 --> 00:15:09.234
without having to swap in
the other 500 parts of the app.

00:15:09.234 --> 00:15:10.467
And if I do this right,

00:15:10.467 --> 00:15:12.067
I'm going to have
really fast unit tests

00:15:12.067 --> 00:15:15.567
that I can execute in a JRE
rather than in a GWTTestCase.

00:15:15.567 --> 00:15:18.033
So unit tests that execute
in microseconds

00:15:18.033 --> 00:15:22.100
rather than in
the 20-whatever seconds

00:15:22.100 --> 00:15:24.334
it takes to launch GWTTestCase
these days.

00:15:24.334 --> 00:15:28.400
Which time we are improving,
let me say.

00:15:28.400 --> 00:15:32.934
But it'll never be the same
as simply not doing it at all.

00:15:32.934 --> 00:15:36.200
So what's an Event Bus?

00:15:36.200 --> 00:15:40.000
Let's show you first
what an Event Bus is not.

00:15:40.000 --> 00:15:41.767
You're writing your app
in a typical style,

00:15:41.767 --> 00:15:43.934
and you've probably
created yourself

00:15:43.934 --> 00:15:46.000
a bunch of model objects
in our address book

00:15:46.000 --> 00:15:47.934
that are probably contact groups
and contacts.

00:15:47.934 --> 00:15:49.801
And they got property lists.

00:15:49.801 --> 00:15:51.701
They're throwing
property change events.

00:15:51.701 --> 00:15:53.934
Each one has
a list of listeners

00:15:53.934 --> 00:15:56.267
that are watching for changes
to the thing.

00:15:56.267 --> 00:15:58.467
And we'll start adding in
bits of our UI.

00:15:58.467 --> 00:16:01.067
We've got our contact
group list UI,

00:16:01.067 --> 00:16:03.334
which is going to have
a listener attached

00:16:03.334 --> 00:16:04.868
to each one
of these group objects.

00:16:04.868 --> 00:16:06.901
And then we've got
the list of contacts

00:16:06.901 --> 00:16:09.033
within an individual group
that's listening,

00:16:09.033 --> 00:16:10.901
attaching handlers--
event handlers

00:16:10.901 --> 00:16:12.767
to some of those contact guys.

00:16:12.767 --> 00:16:16.067
We probably have a display
with individual contacts

00:16:16.067 --> 00:16:18.601
that the list UI needs to know
how to swap in.

00:16:18.601 --> 00:16:21.901
And the contact list is going
to want to edit these things,

00:16:21.901 --> 00:16:23.667
and these are all going to be
listening to each other

00:16:23.667 --> 00:16:25.734
for update notifications,
you know,

00:16:25.734 --> 00:16:27.534
show yourself, hide yourself,
I'm done now.

00:16:27.534 --> 00:16:29.567
And then marketing comes in
and says,

00:16:29.567 --> 00:16:31.267
"We don't have enough
bread crumbs on this thing,

00:16:31.267 --> 00:16:33.267
and that Window Title's
looking kind of sloppy."

00:16:33.267 --> 00:16:34.834
We got kind of
a messy world here.

00:16:34.834 --> 00:16:37.467
We've got a lot of handler
objects that we've instantiated.

00:16:37.467 --> 00:16:40.033
We've got a lot of things
that we can forget to decouple

00:16:40.033 --> 00:16:41.767
when it's time
to tear things down.

00:16:41.767 --> 00:16:43.667
It's not a fun world.

00:16:43.667 --> 00:16:46.100
I won't even talk
about testing.

00:16:46.100 --> 00:16:49.300
It's an excellent profile.

00:16:49.300 --> 00:16:54.200
So we can reduce this coupling
in a couple of steps.

00:16:54.200 --> 00:16:58.200
But first, we'll introduce
our Event Bus.

00:16:58.200 --> 00:16:59.934
This thing
on the side of the app

00:16:59.934 --> 00:17:02.100
that everybody has access to,
where they can listen

00:17:02.100 --> 00:17:04.200
for the stuff that has happened
in the application

00:17:04.200 --> 00:17:05.601
that might be
of interest to them

00:17:05.601 --> 00:17:07.334
without necessarily
needing to know

00:17:07.334 --> 00:17:10.100
who was responsible for that
event in the first place.

00:17:10.100 --> 00:17:13.133
So, for example,
when the contact list UI

00:17:13.133 --> 00:17:14.601
wants to tell the world,

00:17:14.601 --> 00:17:17.000
"Hey, the user thinks that
it's time to look at the details

00:17:17.000 --> 00:17:18.501
of contact X,"

00:17:18.501 --> 00:17:21.934
it can just post that event
to the Event Bus.

00:17:21.934 --> 00:17:23.734
And whatever parts of the UI
are responsible

00:17:23.734 --> 00:17:25.934
for actually showing
the user contact display,

00:17:25.934 --> 00:17:29.434
contact number X
can take care of doing that.

00:17:29.434 --> 00:17:32.400
And it doesn't have to know
that it's--this week,

00:17:32.400 --> 00:17:34.267
it's the contact list UI
that's responsible

00:17:34.267 --> 00:17:35.501
for doing that,
even though next week

00:17:35.501 --> 00:17:38.801
it'll probably be
some other gesture

00:17:38.801 --> 00:17:39.968
that some UI designer--

00:17:39.968 --> 00:17:42.133
respected UI-designing
colleague--

00:17:42.133 --> 00:17:43.567
came up with.

00:17:43.567 --> 00:17:45.200
But you see we still have
a lot of mess

00:17:45.200 --> 00:17:46.534
in the middle there.

00:17:46.534 --> 00:17:47.901
We've got all these
property change listeners

00:17:47.901 --> 00:17:49.167
that I keep clearly implying

00:17:49.167 --> 00:17:50.734
I don't think
you should have.

00:17:50.734 --> 00:17:53.601
And what I espouse
doing instead

00:17:53.601 --> 00:17:55.601
is just getting rid
of that model core.

00:17:55.601 --> 00:17:57.567
Not saying that you don't have
model objects,

00:17:57.567 --> 00:18:00.367
just saying that they're not
terribly of central importance.

00:18:00.367 --> 00:18:03.734
Instead, remember that we know
that everything that we do

00:18:03.734 --> 00:18:05.167
is asynchronous.

00:18:05.167 --> 00:18:06.801
Let's just push
that asynchrony

00:18:06.801 --> 00:18:09.367
right through to the bottom
of our application.

00:18:09.367 --> 00:18:13.300
When the contact display UI
is ready to display somebody,

00:18:13.300 --> 00:18:14.767
it'll tell the RPC service,

00:18:14.767 --> 00:18:17.868
"Hey, get me contact XYZ.
I've been told to display him."

00:18:17.868 --> 00:18:19.434
With any luck,
that's cached,

00:18:19.434 --> 00:18:20.868
and so my callback
fires right away,

00:18:20.868 --> 00:18:22.367
and I've got him immediately.

00:18:22.367 --> 00:18:26.901
When the editing UI needs
to mess with that contact,

00:18:26.901 --> 00:18:28.434
and change his data,

00:18:28.434 --> 00:18:29.834
he's going
to tell the RPC service,

00:18:29.834 --> 00:18:31.501
"Hey, I've got an update
for you.

00:18:31.501 --> 00:18:33.067
Push that down to the service
for me."

00:18:33.067 --> 00:18:35.567
When the response comes back in
to the RPC service,

00:18:35.567 --> 00:18:37.601
he will announce to everybody
who is interested,

00:18:37.601 --> 00:18:39.601
"A contact has changed.

00:18:39.601 --> 00:18:42.167
"Here is the new copy
of that contact.

00:18:42.167 --> 00:18:45.701
Why don't you all who are
interested display that thing?"

00:18:45.701 --> 00:18:48.767
And everything is nicely
isolated from each other.

00:18:48.767 --> 00:18:53.667
So let's look at what the code
would shape up as for that.

00:18:53.667 --> 00:18:56.400
You'll remember
this showContact method

00:18:56.400 --> 00:18:57.801
that we wrote earlier.

00:18:57.801 --> 00:19:00.067
We're going to add
a little bit to it.

00:19:00.067 --> 00:19:01.634
We're going to start
paying attention

00:19:01.634 --> 00:19:05.000
to just which contact
we're looking at at the moment

00:19:05.000 --> 00:19:07.100
over here
in our contact display UI.

00:19:07.100 --> 00:19:09.934
So just something as simple
as holding on to that Id object

00:19:09.934 --> 00:19:12.767
so that we know
who's important to us.

00:19:12.767 --> 00:19:15.734
Before we ever tried
to show a contact,

00:19:15.734 --> 00:19:17.667
we attached ourselves
to the listener bus.

00:19:17.667 --> 00:19:20.734
Sorry, the Event Bus.

00:19:20.734 --> 00:19:22.567
We're going to use a GWT class

00:19:22.567 --> 00:19:24.100
to actually instantiate
our Event Bus,

00:19:24.100 --> 00:19:26.367
because that's simpler
than writing our own.

00:19:26.367 --> 00:19:29.868
With GWT 1.6, we revamped
our event handling mechanism.

00:19:29.868 --> 00:19:31.701
And at the heart
of each one of our widgets

00:19:31.701 --> 00:19:34.200
is a handy class
called the HandlerManager.

00:19:34.200 --> 00:19:36.100
There's no reason
that you can't use

00:19:36.100 --> 00:19:37.634
your own instance
of HandlerManager

00:19:37.634 --> 00:19:41.267
to provide your app-wide event
dispatch services.

00:19:41.267 --> 00:19:44.067
So our contact display
has somehow magically

00:19:44.067 --> 00:19:46.200
gotten its hand
on the HandlerManager

00:19:46.200 --> 00:19:47.868
Event Bus instance
for this app.

00:19:47.868 --> 00:19:51.300
And he's attaching to it
a typical event handler.

00:19:51.300 --> 00:19:54.100
You've created for yourself
a custom ChangeEvent type

00:19:54.100 --> 00:19:55.901
called ContactChangeEvent.

00:19:55.901 --> 00:19:57.334
And you're implementing

00:19:57.334 --> 00:19:59.334
your custom event handling
interface.

00:19:59.334 --> 00:20:01.100
So when a contact change
comes in,

00:20:01.100 --> 00:20:03.734
you're going to look
at the new contact object

00:20:03.734 --> 00:20:05.234
that's hanging off
of that event,

00:20:05.234 --> 00:20:07.000
see if it's the one
that you're actually displaying,

00:20:07.000 --> 00:20:10.868
and if so,
do something about it.

00:20:10.868 --> 00:20:14.534
And a subtlety here
is that you don't really know

00:20:14.534 --> 00:20:16.901
if that's the one and only
copy of this contact,

00:20:16.901 --> 00:20:19.367
if it's one
that's been handed to you

00:20:19.367 --> 00:20:20.934
for your purposes
at this moment.

00:20:20.934 --> 00:20:23.634
The contact goes from being
of central importance

00:20:23.634 --> 00:20:25.801
where you might be attaching
handlers to and from it

00:20:25.801 --> 00:20:27.634
to this kind of ephemeral,
disposable thing

00:20:27.634 --> 00:20:28.634
you can kind of wad up
and toss

00:20:28.634 --> 00:20:30.133
on the floor when you're done.

00:20:30.133 --> 00:20:31.300
But don't change it,

00:20:31.300 --> 00:20:33.534
'cause other people
might be looking.

00:20:33.534 --> 00:20:35.567
Continuing with the code,

00:20:35.567 --> 00:20:38.801
let's move over
to the RPC service itself.

00:20:38.801 --> 00:20:43.400
What we're doing here is we have
wrapped the GWT RPC service

00:20:43.400 --> 00:20:46.467
that we defined
with somebody who's implementing

00:20:46.467 --> 00:20:49.868
the interface itself.

00:20:49.868 --> 00:20:51.467
In this particular case,

00:20:51.467 --> 00:20:54.567
we're taking that execute method
that our RPC service provides

00:20:54.567 --> 00:20:58.601
and we're overloading it
to provide specialized handling

00:20:58.601 --> 00:21:01.667
of this UpdateContact
type of action.

00:21:01.667 --> 00:21:05.667
And the interesting bit is that
we are wrapping the callback

00:21:05.667 --> 00:21:08.200
that the caller gave us
with our own callback,

00:21:08.200 --> 00:21:11.000
which on a successful response
is going to update

00:21:11.000 --> 00:21:13.133
whatever kind of a cache
we're maintaining.

00:21:13.133 --> 00:21:15.734
It'll fire off
the real onSuccess result

00:21:15.734 --> 00:21:17.234
for the real callback,

00:21:17.234 --> 00:21:19.033
and then it's going to tell
the rest of the application,

00:21:19.033 --> 00:21:20.400
"Hey, contact changed.

00:21:20.400 --> 00:21:22.467
You might want to do something
about that."

00:21:22.467 --> 00:21:25.734
It's as simple as that.

00:21:25.734 --> 00:21:29.133
So continuing
with our decoupling theme.

00:21:29.133 --> 00:21:32.033
I keep saying
"MVP, MVP, MVP."

00:21:32.033 --> 00:21:34.868
And I did not say MVC.

00:21:34.868 --> 00:21:37.501
Now the odds are
that when you got out

00:21:37.501 --> 00:21:40.000
of the five or ten years
you spent doing JSP

00:21:40.000 --> 00:21:41.234
and Web 1.0 app,

00:21:41.234 --> 00:21:42.868
you kind of dusted off
some desktop knowledge

00:21:42.868 --> 00:21:45.734
or somebody who had once
done that kind of work

00:21:45.734 --> 00:21:47.267
told you, "You know
what we should really be doing

00:21:47.267 --> 00:21:48.367
"now that we've got
these widgets

00:21:48.367 --> 00:21:49.567
is model, view, controller."

00:21:49.567 --> 00:21:52.801
And it's this kind
of triangular thing.

00:21:52.801 --> 00:21:54.067
And the model throws events.

00:21:54.067 --> 00:21:55.534
And then the view throws events.

00:21:55.534 --> 00:21:57.367
And the controller
messes with both of them.

00:21:57.367 --> 00:21:59.000
And I forget what code
goes in the controller

00:21:59.000 --> 00:22:00.434
and what code
goes into the view.

00:22:00.434 --> 00:22:02.701
And no two people
will give you the same answer

00:22:02.701 --> 00:22:04.567
for what MVC actually means.

00:22:04.567 --> 00:22:07.300
There are a handful of guys
who wrote Smalltalk-80,

00:22:07.300 --> 00:22:09.200
but they may well be retired.

00:22:09.200 --> 00:22:12.234
You also wind up
with a problem here

00:22:12.234 --> 00:22:13.934
that, like I said,
some of your code

00:22:13.934 --> 00:22:14.968
landed in the controller.

00:22:14.968 --> 00:22:16.234
Some of it landed
in the view.

00:22:16.234 --> 00:22:17.567
You need to test it all.

00:22:17.567 --> 00:22:19.667
And the code that landed
in the view

00:22:19.667 --> 00:22:21.100
is not going to run
real fast.

00:22:21.100 --> 00:22:22.968
It's messing with the DOM.

00:22:22.968 --> 00:22:25.567
And you either need to have
a pretend DOM there

00:22:25.567 --> 00:22:27.801
if you're lucky,
which we don't provide you--

00:22:27.801 --> 00:22:29.234
yet--

00:22:29.234 --> 00:22:31.767
or you need to fire up
a real DOM.

00:22:31.767 --> 00:22:34.167
And those tests are just not
going to run fast.

00:22:34.167 --> 00:22:36.534
So what you want to do instead

00:22:36.534 --> 00:22:39.200
is use the model, view,
presenter pattern.

00:22:39.200 --> 00:22:42.534
We found ourselves implementing
this style kind of by accident,

00:22:42.534 --> 00:22:44.334
just trying to isolate our code
from tests.

00:22:44.334 --> 00:22:46.167
And then some people
who are brighter than me

00:22:46.167 --> 00:22:47.601
were reading
Martin Fowler's blog

00:22:47.601 --> 00:22:49.767
and saw that he had already
invented this pattern

00:22:49.767 --> 00:22:52.334
before most of us
were professionally active

00:22:52.334 --> 00:22:53.801
and had called it MVP.

00:22:53.801 --> 00:22:56.067
So we call it that too.

00:22:56.067 --> 00:22:58.634
Then what you're doing
is just much simpler layering.

00:22:58.634 --> 00:23:01.467
Your view class
down there at the bottom

00:23:01.467 --> 00:23:03.033
is the only thing
that actually knows anything

00:23:03.033 --> 00:23:04.934
about DOM elements
and widgets.

00:23:04.934 --> 00:23:07.801
And it's a source of things
like KeyboardEvent

00:23:07.801 --> 00:23:11.667
and ClickEvent and very
browser-specific events.

00:23:11.667 --> 00:23:13.501
The model at the top,

00:23:13.501 --> 00:23:14.834
we're familiar with
at this point.

00:23:14.834 --> 00:23:17.367
It's this kind of
overglorified bag

00:23:17.367 --> 00:23:19.067
of setters and getters
that we're using

00:23:19.067 --> 00:23:20.167
because we decided
we don't like

00:23:20.167 --> 00:23:21.534
property change listeners.

00:23:21.534 --> 00:23:24.100
And that leaves the presenter
in the middle

00:23:24.100 --> 00:23:25.801
as the only object
that has anything

00:23:25.801 --> 00:23:27.300
that's really worth testing.

00:23:27.300 --> 00:23:30.067
This is the thing
that knows how to take, say,

00:23:30.067 --> 00:23:32.701
a contact in one end
and take its values

00:23:32.701 --> 00:23:34.567
and cram them into
a bunch of text fields

00:23:34.567 --> 00:23:36.000
on the other side,
listen for changes

00:23:36.000 --> 00:23:37.334
to those text fields,

00:23:37.334 --> 00:23:38.734
and interpret them
as something--

00:23:38.734 --> 00:23:40.734
as values to push back
into the model.

00:23:40.734 --> 00:23:44.300
When it comes test time,
we can ignore

00:23:44.300 --> 00:23:47.968
that silly little collection
of DOM widgets that we created

00:23:47.968 --> 00:23:50.133
and replace it
with a bunch of mocks.

00:23:50.133 --> 00:23:55.534
And in fact, we can even use
the GWT MockUtilities package,

00:23:55.534 --> 00:23:57.667
which I think was also
introduced in 1.6,

00:23:57.667 --> 00:24:00.968
to use something
like EasyMock

00:24:00.968 --> 00:24:02.701
or JMock--
or actually,

00:24:02.701 --> 00:24:04.167
there's something called
Mockalicious now,

00:24:04.167 --> 00:24:05.834
which looks interesting--

00:24:05.834 --> 00:24:08.667
to provide fake test fields,
fake this and fake the other,

00:24:08.667 --> 00:24:10.868
and run them under a JRE.

00:24:10.868 --> 00:24:13.667
Although today I'm actually not
going to show you doing that,

00:24:13.667 --> 00:24:16.434
because I found that for
the pretend code

00:24:16.434 --> 00:24:18.267
that I'm putting together,
it was easier

00:24:18.267 --> 00:24:19.801
to do the mocks by hand.

00:24:19.801 --> 00:24:23.200
So let's get concrete again.

00:24:23.200 --> 00:24:28.234
In our address book,
we are doing things

00:24:28.234 --> 00:24:30.901
like editing contact details.

00:24:30.901 --> 00:24:33.334
Say we're going to edit
somebody's phone number.

00:24:33.334 --> 00:24:35.734
So a phone number
looks like that,

00:24:35.734 --> 00:24:38.467
it's got an Id,
it's got the telephone number,

00:24:38.467 --> 00:24:42.434
and it's got the work, home,
mobile, babysitter label.

00:24:42.434 --> 00:24:45.033
The UI probably looks
something like this.

00:24:45.033 --> 00:24:48.400
I'm sure we've all
seen that numerous times.

00:24:48.400 --> 00:24:50.067
And all
of the interesting stuff

00:24:50.067 --> 00:24:51.367
is here
at the presenter layer,

00:24:51.367 --> 00:24:52.434
where we're going
to implement

00:24:52.434 --> 00:24:53.801
a thing called
the PhoneEditor,

00:24:53.801 --> 00:24:55.801
whose job in life
is to take a phone object

00:24:55.801 --> 00:24:57.901
in one end
and a phone UI in the other end

00:24:57.901 --> 00:24:59.501
and make them all go.

00:24:59.501 --> 00:25:02.901
So the PhoneEditor probably
looks something like this.

00:25:02.901 --> 00:25:04.467
At least it does
when I write it.

00:25:04.467 --> 00:25:06.167
Oh, the brace
is in the wrong place.

00:25:06.167 --> 00:25:08.701
Damn.

00:25:08.701 --> 00:25:11.267
It's going to define
an interface

00:25:11.267 --> 00:25:14.367
for the kinds of widgets
it wishes it was talking to.

00:25:14.367 --> 00:25:16.934
And you'll note
that I'm describing things

00:25:16.934 --> 00:25:18.734
like a save button
and a cancel button

00:25:18.734 --> 00:25:19.834
and a number field.

00:25:19.834 --> 00:25:21.133
But I'm not calling them
"button."

00:25:21.133 --> 00:25:22.734
I'm calling them
HasClickHandlers

00:25:22.734 --> 00:25:24.000
and HasValue&lt;String&gt;.

00:25:24.000 --> 00:25:26.167
These are characteristic
interfaces

00:25:26.167 --> 00:25:30.300
that the GWT widget set
is littered with.

00:25:30.300 --> 00:25:33.901
And if I define
my display interface

00:25:33.901 --> 00:25:36.200
in terms of these
characteristic interfaces,

00:25:36.200 --> 00:25:38.634
it becomes quite easy
at test time

00:25:38.634 --> 00:25:41.100
for me to provide
mock instances of those things.

00:25:41.100 --> 00:25:44.834
A lot of people think that
providing this display interface

00:25:44.834 --> 00:25:46.167
is more trouble
than it's worth.

00:25:46.167 --> 00:25:49.367
And they will tend to give
their presenter objects

00:25:49.367 --> 00:25:51.167
actual knowledge
of the specific widgets,

00:25:51.167 --> 00:25:52.868
like text field,
like button.

00:25:52.868 --> 00:25:54.701
Not a big deal,
because you can, again,

00:25:54.701 --> 00:25:56.400
use EasyMock or its like

00:25:56.400 --> 00:25:59.901
to put in fake versions
of those in the JRE.

00:25:59.901 --> 00:26:01.701
But that made the slides
too big,

00:26:01.701 --> 00:26:03.067
so I didn't do that today.

00:26:03.067 --> 00:26:04.968
So we've got
our display interface.

00:26:04.968 --> 00:26:08.000
How are we actually
going to use the thing?

00:26:08.000 --> 00:26:10.033
At some point in the lifetime
of our PhoneEditor,

00:26:10.033 --> 00:26:11.634
we'll be handed
our display object,

00:26:11.634 --> 00:26:14.534
which--don't tell anybody--
it's a composite.

00:26:14.534 --> 00:26:16.100
We'll hold on to that thing.

00:26:16.100 --> 00:26:17.534
We'll attach a few handlers
to it.

00:26:17.534 --> 00:26:20.567
OnClick of the save button,
I want to call my doSave method.

00:26:20.567 --> 00:26:24.100
OnClick of my cancel button,
I'm gonna do my cancel method.

00:26:24.100 --> 00:26:26.400
Sooner or later,
somebody's going to tell me

00:26:26.400 --> 00:26:27.701
to edit a phone number.

00:26:27.701 --> 00:26:29.667
And I'll do that simply
by holding on

00:26:29.667 --> 00:26:31.968
to the phone instance
that I'm editing.

00:26:31.968 --> 00:26:34.334
I'm implying a kind of
sneaky thing there

00:26:34.334 --> 00:26:36.100
with that static method
on phone.

00:26:36.100 --> 00:26:39.834
I'm figuring that
the instance of phone

00:26:39.834 --> 00:26:42.167
that I'm editing
may not turn out to be

00:26:42.167 --> 00:26:43.667
the one that I actually want
to keep.

00:26:43.667 --> 00:26:45.934
And to make sure that I'm not
going to accidentally

00:26:45.934 --> 00:26:49.000
mess with the phone object
that other parts of the app

00:26:49.000 --> 00:26:50.267
might be trying to display,

00:26:50.267 --> 00:26:52.434
I'm going to assume
that I defined

00:26:52.434 --> 00:26:55.367
a kind of a clone style method
on my POJO.

00:26:55.367 --> 00:26:57.567
You can follow this convention
or make up something else.

00:26:57.567 --> 00:26:58.934
This is more or less
what we did,

00:26:58.934 --> 00:27:01.567
except our code was uglier.

00:27:01.567 --> 00:27:04.334
Once I've got this safe copy
of the phone,

00:27:04.334 --> 00:27:05.901
which I can toss away
when I'm done

00:27:05.901 --> 00:27:08.067
because model objects
aren't special anymore,

00:27:08.067 --> 00:27:10.200
I'll just tell my display
to show the number

00:27:10.200 --> 00:27:12.567
and update the label picker
and that kind of thing.

00:27:12.567 --> 00:27:14.701
Oh, there's another cheat
that I'm doing in here.

00:27:14.701 --> 00:27:16.067
I have implied--

00:27:16.067 --> 00:27:18.200
head back
to our interface here--

00:27:18.200 --> 00:27:21.334
I have implied that GWT has
a pop-up widget

00:27:21.334 --> 00:27:23.667
that implements
the HasValue interface.

00:27:23.667 --> 00:27:25.567
It does not.
We ran out of time.

00:27:25.567 --> 00:27:29.334
I think it will have such
sooner or later.

00:27:29.334 --> 00:27:30.801
Maybe even in the 2.0 timeframe.

00:27:30.801 --> 00:27:33.000
I need to talk to my boss
about that.

00:27:33.000 --> 00:27:36.133
But in the meantime,
it is no big thing

00:27:36.133 --> 00:27:37.934
for you to write
your own HasValue wrapper

00:27:37.934 --> 00:27:39.901
around the list picker
as you're going to use it.

00:27:39.901 --> 00:27:41.200
We did.

00:27:41.200 --> 00:27:43.234
And it didn't take us
hardly any time at all.

00:27:43.234 --> 00:27:47.133
So full disclosure
out of the way.

00:27:47.133 --> 00:27:49.968
Now let's actually save
what the user has done.

00:27:49.968 --> 00:27:54.534
Again, it's a simple thing
to pull the values

00:27:54.534 --> 00:27:57.300
back out of
that display instance

00:27:57.300 --> 00:28:01.501
and then fire off my nice
asynchronous service method.

00:28:01.501 --> 00:28:03.467
When I hear back
that my POJO--

00:28:03.467 --> 00:28:05.767
my phone number
was updated successfully,

00:28:05.767 --> 00:28:07.901
I'll tear myself down,
whatever teardown means

00:28:07.901 --> 00:28:09.067
for my PhoneEditor.

00:28:09.067 --> 00:28:10.133
If there were errors,

00:28:10.133 --> 00:28:12.300
I'll have some error reporting

00:28:12.300 --> 00:28:15.100
and rendering convention
that I will have implemented,

00:28:15.100 --> 00:28:16.567
and I'll display
those things there.

00:28:16.567 --> 00:28:19.267
Obviously,
I'm glossing over a lot.

00:28:19.267 --> 00:28:21.267
And you'll call me on that
at question time.

00:28:21.267 --> 00:28:24.067
But until then,
I can just get away with this.

00:28:24.067 --> 00:28:27.767
So let's talk about
dependency injection.

00:28:27.767 --> 00:28:29.701
I'm sure you've all heard
the term.

00:28:29.701 --> 00:28:31.400
And you've all been meaning
to adopt it,

00:28:31.400 --> 00:28:32.534
and it seems like a good idea,

00:28:32.534 --> 00:28:34.367
but maybe
on my next project.

00:28:34.367 --> 00:28:36.200
Dependency injection
ain't no thing.

00:28:36.200 --> 00:28:37.601
It is just a pattern.

00:28:37.601 --> 00:28:40.634
All it means is that instead
of having global instances

00:28:40.634 --> 00:28:42.601
of my services
that I reach out for,

00:28:42.601 --> 00:28:45.300
like GetEventBus.singleton
instance,

00:28:45.300 --> 00:28:48.634
GetRPC.singleton instance.

00:28:48.634 --> 00:28:50.467
And instead of using
a service locator

00:28:50.467 --> 00:28:52.167
that I kind of cram full

00:28:52.167 --> 00:28:53.801
of every interesting
property of my app

00:28:53.801 --> 00:28:56.133
and shove it down the throat
of any part of the app

00:28:56.133 --> 00:28:57.701
that might want it,

00:28:57.701 --> 00:28:58.767
I'm very explicit,

00:28:58.767 --> 00:29:00.834
preferably via constructor
arguments,

00:29:00.834 --> 00:29:03.801
about just what it is
this particular object needs

00:29:03.801 --> 00:29:06.267
to exist in a useful way.

00:29:06.267 --> 00:29:09.000
DI is really not at all hard
to do manually.

00:29:09.000 --> 00:29:11.701
And in fact, AdWords does do
all of its DI manually,

00:29:11.701 --> 00:29:13.934
because we didn't have any way
to do it automatically

00:29:13.934 --> 00:29:15.734
at the time
that we started the project.

00:29:15.734 --> 00:29:18.300
In the interim,

00:29:18.300 --> 00:29:20.567
there was a GWT developer
on another project...

00:29:20.567 --> 00:29:21.868
this is public.

00:29:21.868 --> 00:29:25.601
You know the contact manager
in the personal profiles

00:29:25.601 --> 00:29:28.868
that Google is starting
to flog these days?

00:29:28.868 --> 00:29:31.534
The group that put that together
were a big fan

00:29:31.534 --> 00:29:35.634
of the Guice dependency
injection framework for Java,

00:29:35.634 --> 00:29:36.767
and they wrote
their own version of it,

00:29:36.767 --> 00:29:38.501
called GIN.

00:29:38.501 --> 00:29:40.901
And now more and more apps,
internally and publicly,

00:29:40.901 --> 00:29:42.000
are taking advantage of that.

00:29:42.000 --> 00:29:43.501
You can find both Guice
and GIN

00:29:43.501 --> 00:29:45.067
at the URLs provided there.

00:29:45.067 --> 00:29:48.467
There are also talks coming up
on Guice right after this one,

00:29:48.467 --> 00:29:51.033
and if you leave this room,

00:29:51.033 --> 00:29:52.234
I suggest you go to that room.

00:29:52.234 --> 00:29:53.400
I'm not sure which one it is,

00:29:53.400 --> 00:29:55.167
but it's on
your little badge-y thing.

00:29:55.167 --> 00:29:57.167
I had a picture
of Snoop Dogg here

00:29:57.167 --> 00:29:58.300
for the GIN and Guice thing,

00:29:58.300 --> 00:29:59.767
but the lawyers
wouldn't let me do it.

00:29:59.767 --> 00:30:01.434
So, sorry.

00:30:01.434 --> 00:30:02.934
So what does the code
actually look like

00:30:02.934 --> 00:30:04.200
when we do something like this?

00:30:04.200 --> 00:30:06.334
Well, let's start
at the bottom of it.

00:30:06.334 --> 00:30:08.601
Let's assume
that we have a widget

00:30:08.601 --> 00:30:11.667
that is a widget
in the MVP style

00:30:11.667 --> 00:30:13.501
that is my contactViewer.

00:30:13.501 --> 00:30:15.901
And that's kind of
the heart of my app.

00:30:15.901 --> 00:30:17.667
And when the contact viewer
is ready to go,

00:30:17.667 --> 00:30:19.934
it wants to get the root panel

00:30:19.934 --> 00:30:21.267
and just start
to jump into it.

00:30:21.267 --> 00:30:22.334
So what do I need to do

00:30:22.334 --> 00:30:23.934
to instantiate
my contactViewer?

00:30:23.934 --> 00:30:25.968
Well, I'm going to look
at its constructor arguments.

00:30:25.968 --> 00:30:27.434
It needs its ContactWidget,

00:30:27.434 --> 00:30:29.434
probably implementing
its display interface,

00:30:29.434 --> 00:30:30.868
because I wrote it.

00:30:30.868 --> 00:30:32.100
It's going to need an instance

00:30:32.100 --> 00:30:35.634
of that PhoneEditor
MVP presenter thingy

00:30:35.634 --> 00:30:39.100
because it's going to--
it uses that end line.

00:30:39.100 --> 00:30:40.834
It doesn't go talk to it
through the Event Bus.

00:30:40.834 --> 00:30:42.467
Not everything needs to talk
to everything else

00:30:42.467 --> 00:30:43.701
through the Event Bus.

00:30:43.701 --> 00:30:45.300
Things that want to deal
with each other directly--

00:30:45.300 --> 00:30:46.400
there's no reason
that they can't have

00:30:46.400 --> 00:30:47.534
handles onto each other.

00:30:47.534 --> 00:30:49.200
We still like composition
in this world.

00:30:49.200 --> 00:30:52.400
It needs the RPC service
to ask for the contacts,

00:30:52.400 --> 00:30:54.133
and it needs the Event Bus
to listen for changes

00:30:54.133 --> 00:30:55.634
to the contacts
that it cares about.

00:30:55.634 --> 00:30:57.901
So it's going to get its hand
on the ContactWidget

00:30:57.901 --> 00:30:59.434
with a simple "new."

00:30:59.434 --> 00:31:00.901
It's going to get
that PhoneEditor

00:31:00.901 --> 00:31:02.067
with a simple "new"--ooh.

00:31:02.067 --> 00:31:03.968
But the PhoneEditor
has dependencies too.

00:31:03.968 --> 00:31:05.234
It's going to need a widget

00:31:05.234 --> 00:31:07.501
and it too needs its hands
on the RPC service.

00:31:07.501 --> 00:31:08.968
But we're not really using

00:31:08.968 --> 00:31:11.801
the actual GWT generated
RPC service.

00:31:11.801 --> 00:31:13.501
We have our wrapping thing
around that.

00:31:13.501 --> 00:31:17.000
So let's instantiate
our CachedBatching rpcService,

00:31:17.000 --> 00:31:19.901
into which we will jam
the one that we GWT.created

00:31:19.901 --> 00:31:21.100
to do the real work.

00:31:21.100 --> 00:31:22.734
And then finally,
everybody seems to want

00:31:22.734 --> 00:31:23.934
this Event Bus thing,

00:31:23.934 --> 00:31:25.934
so we'll instantiate
one of those.

00:31:25.934 --> 00:31:27.767
So that's kind of a lot of code,

00:31:27.767 --> 00:31:29.434
but it wasn't really
hard to look at.

00:31:29.434 --> 00:31:31.667
Part of the payoff
starts to come

00:31:31.667 --> 00:31:33.100
when new dependencies appear.

00:31:33.100 --> 00:31:36.100
Marketing has heard about
this Google Voice service,

00:31:36.100 --> 00:31:37.267
and they're
absolutely convinced

00:31:37.267 --> 00:31:39.234
that we should have
Google Voice integration

00:31:39.234 --> 00:31:40.501
with the PhoneEditor.

00:31:40.501 --> 00:31:42.033
So we're going to add that

00:31:42.033 --> 00:31:44.634
by instantiating
the voice service.

00:31:44.634 --> 00:31:47.200
We're going to change
the PhoneEditor constructor.

00:31:47.200 --> 00:31:49.367
And nobody else
knows about that change.

00:31:49.367 --> 00:31:51.834
Even though the PhoneEditor
is fairly far down

00:31:51.834 --> 00:31:53.334
in our tiny little stack,

00:31:53.334 --> 00:31:56.100
the thing that needs
a PhoneEditor

00:31:56.100 --> 00:31:58.267
because it never
instantiated it itself

00:31:58.267 --> 00:31:59.601
doesn't need to know

00:31:59.601 --> 00:32:02.067
that PhoneEditor
now needs the VoiceService.

00:32:02.067 --> 00:32:04.734
And I didn't have to add
a VoiceService argument

00:32:04.734 --> 00:32:06.667
and a VoiceService argument
and a VoiceService argument

00:32:06.667 --> 00:32:08.601
at every level in my code.

00:32:08.601 --> 00:32:11.367
But still, you can see
that this is going to grow

00:32:11.367 --> 00:32:13.300
into a lot of kind of
grungy code to maintain,

00:32:13.300 --> 00:32:15.000
and a big list
of instantiation

00:32:15.000 --> 00:32:16.934
to do all at the top.

00:32:16.934 --> 00:32:18.767
If you were to use
a framework to do it,

00:32:18.767 --> 00:32:20.400
something like GIN--
talk--

00:32:20.400 --> 00:32:22.200
Actually, there's no talk
about GIN itself today.

00:32:22.200 --> 00:32:23.534
I don't want to imply that.

00:32:23.534 --> 00:32:25.868
But there is a talk about Guice.

00:32:25.868 --> 00:32:29.000
And GIN is just like Guice,
but on the client side.

00:32:29.000 --> 00:32:30.667
Anyway,
if you use GIN correctly,

00:32:30.667 --> 00:32:31.968
and using it correctly
is easier

00:32:31.968 --> 00:32:33.434
than using it incorrectly,

00:32:33.434 --> 00:32:35.634
the code winds up
looking like this.

00:32:35.634 --> 00:32:38.133
So I highly recommend it.

00:32:38.133 --> 00:32:40.868
Now why are we doing
all of this stuff?

00:32:40.868 --> 00:32:42.701
What's the punch line?

00:32:42.701 --> 00:32:45.834
Besides having the app
isolated from itself

00:32:45.834 --> 00:32:47.467
for that purposes,

00:32:47.467 --> 00:32:49.434
we're particularly happy
because this gives us

00:32:49.434 --> 00:32:52.667
easy to write
and fast tests.

00:32:52.667 --> 00:32:53.968
So to write a test
in this style,

00:32:53.968 --> 00:32:55.300
we need our mock objects.

00:32:55.300 --> 00:32:56.901
We're not using EasyMock here,

00:32:56.901 --> 00:32:59.234
so we're just implementing
these things ourselves.

00:32:59.234 --> 00:33:01.167
We're going to make stuff
that looks like this.

00:33:01.167 --> 00:33:03.234
I'm going to have
a mock version

00:33:03.234 --> 00:33:04.968
of my ContactsService.

00:33:04.968 --> 00:33:07.601
And it's going to have
these fields here,

00:33:07.601 --> 00:33:09.467
the lastAction
and the lastCallback,

00:33:09.467 --> 00:33:11.534
and I'm going to fill those
at obvious times.

00:33:11.534 --> 00:33:14.501
When somebody gives me a pretend
execute this object,

00:33:14.501 --> 00:33:16.834
execute this action call,
I'll hold on to it

00:33:16.834 --> 00:33:19.133
so that my test code
can take a peek.

00:33:19.133 --> 00:33:21.033
Throughout
the code examples here,

00:33:21.033 --> 00:33:22.167
I've been leaving off things

00:33:22.167 --> 00:33:24.300
like public and private
and so forth so on.

00:33:24.300 --> 00:33:26.634
On this slide,
that's not pretend.

00:33:26.634 --> 00:33:31.234
I probably would have
package access

00:33:31.234 --> 00:33:32.834
or even public access

00:33:32.834 --> 00:33:34.167
to the fields
on this mock object

00:33:34.167 --> 00:33:36.067
because there's not
a lot to be gained.

00:33:36.067 --> 00:33:37.367
By having accessor discipline,

00:33:37.367 --> 00:33:39.067
I wind up
with more concise code.

00:33:39.067 --> 00:33:41.534
We're going to need
a few more mock objects

00:33:41.534 --> 00:33:42.834
as we're working through here.

00:33:42.834 --> 00:33:43.968
So I'm going to have to have

00:33:43.968 --> 00:33:45.701
a nice fake version
of that ClickEvent.

00:33:45.701 --> 00:33:49.000
Because for reasons
that I don't remember,

00:33:49.000 --> 00:33:52.667
we decided you shouldn't be able
to do new ClickEvent.

00:33:52.667 --> 00:33:55.467
But let's not worry
about that.

00:33:55.467 --> 00:33:57.534
We have a mock version
of the thing

00:33:57.534 --> 00:33:58.567
that has ClickHandlers.

00:33:58.567 --> 00:33:59.801
This is our pretend button.

00:33:59.801 --> 00:34:02.133
It's got the same notion
of the last ClickHandler

00:34:02.133 --> 00:34:03.434
that was added to me.

00:34:03.434 --> 00:34:05.367
I'll hold on to it
so that people can find it.

00:34:05.367 --> 00:34:07.267
When I'm told to...

00:34:07.267 --> 00:34:09.300
Does this do anything else
interesting?

00:34:09.300 --> 00:34:10.834
Nope.

00:34:10.834 --> 00:34:13.200
Yeah, in fact, the fireEvent,
it doesn't even do anything.

00:34:13.200 --> 00:34:15.834
It's a no-op.
Our tests don't tend to do that.

00:34:15.834 --> 00:34:18.133
Similarly, we had
our HasValue thing.

00:34:18.133 --> 00:34:19.634
We've got a mock version
of that

00:34:19.634 --> 00:34:20.834
that'll hold on
to the last value

00:34:20.834 --> 00:34:22.234
that was set into it.

00:34:22.234 --> 00:34:26.801
It also,
because I have access to...

00:34:26.801 --> 00:34:27.901
Never mind.

00:34:27.901 --> 00:34:29.400
That's not a point
worth making.

00:34:29.400 --> 00:34:31.501
And then finally,
we'll put together

00:34:31.501 --> 00:34:34.801
a bigger, more interesting
composite mock object,

00:34:34.801 --> 00:34:36.968
the thing that implements
our PhoneEditorDisplay.

00:34:36.968 --> 00:34:39.901
So where we would have needed
a phone editing widget,

00:34:39.901 --> 00:34:42.701
remember that our PhoneEditor
presenter

00:34:42.701 --> 00:34:44.067
wants a phone edit widget.

00:34:44.067 --> 00:34:46.934
We gave it a nice instance
of MockPhoneEditorDisplay,

00:34:46.934 --> 00:34:49.601
which is made up of
MockHasClickHandlers

00:34:49.601 --> 00:34:51.367
and some MockHasValues.

00:34:51.367 --> 00:34:52.400
Oops.

00:34:52.400 --> 00:34:54.434
Oh, well.

00:34:54.434 --> 00:34:58.467
Some fake accessor methods
for those,

00:34:58.467 --> 00:35:01.033
and again,
nice visible fields

00:35:01.033 --> 00:35:02.834
so that the test
can play with it.

00:35:02.834 --> 00:35:05.634
So that's a lot of work
that we had to do

00:35:05.634 --> 00:35:07.667
for what's going to be a test
for three lines of code.

00:35:07.667 --> 00:35:09.467
On the other hand,
the three lines of code

00:35:09.467 --> 00:35:11.634
will probably be
more interesting in real life

00:35:11.634 --> 00:35:13.100
when I need to test, say,

00:35:13.100 --> 00:35:15.100
"Did I warn the user
that they're about to abandon

00:35:15.100 --> 00:35:17.234
their changes when they navigate
away from this page?"

00:35:17.234 --> 00:35:19.067
And when I have tests
for the cancel path

00:35:19.067 --> 00:35:20.434
and for the save path,

00:35:20.434 --> 00:35:22.200
all of these guys
are eminently reusable.

00:35:22.200 --> 00:35:23.734
In fact,
you might be asking yourself,

00:35:23.734 --> 00:35:25.300
"Why doesn't the GWT team
provide me

00:35:25.300 --> 00:35:27.834
"with a prerolled
MockHasValues

00:35:27.834 --> 00:35:29.033
and MockClickHandlers?"

00:35:29.033 --> 00:35:31.200
And yeah,
we should probably do that.

00:35:31.200 --> 00:35:33.667
So on to the test itself.

00:35:33.667 --> 00:35:36.367
We're going to put together
our mock world.

00:35:36.367 --> 00:35:37.734
We've got our fake service.

00:35:37.734 --> 00:35:40.100
We've got our fake display.

00:35:40.100 --> 00:35:42.667
We're creating
our fake phone object

00:35:42.667 --> 00:35:44.567
that we wanted to be editing.

00:35:44.567 --> 00:35:46.534
And we're setting--actually,
it's a real phone object

00:35:46.534 --> 00:35:47.634
that we wanted to be editing.

00:35:47.634 --> 00:35:49.033
And we're setting up
another one

00:35:49.033 --> 00:35:53.634
for how we expect
the "after" phone object

00:35:53.634 --> 00:35:55.300
to look that we're going
to send across the wire

00:35:55.300 --> 00:35:57.334
for comparison purposes.

00:35:57.334 --> 00:36:00.934
We're going to instantiate
the PhoneEditor,

00:36:00.934 --> 00:36:02.534
the thing that we actually
want to test here.

00:36:02.534 --> 00:36:05.367
We're going to tell it
"Go edit this phone number,"

00:36:05.367 --> 00:36:07.067
just like we would tell it
in our real code.

00:36:07.067 --> 00:36:08.968
And then we're going to sneak
into our mock objects.

00:36:08.968 --> 00:36:10.100
We're going to tell
the labelPicker,

00:36:10.100 --> 00:36:11.467
"Okay, the user typed 'work.'"

00:36:11.467 --> 00:36:12.667
And we're going to tell
our number field,

00:36:12.667 --> 00:36:14.234
"This is the phone number
she provided."

00:36:14.234 --> 00:36:17.167
And then we're going to tell
the fake save button,

00:36:17.167 --> 00:36:19.701
"Do a click for me now, okay?"

00:36:19.701 --> 00:36:21.767
That should have been enough
to kick off

00:36:21.767 --> 00:36:24.133
our presenter object,
the PhoneEditor.

00:36:24.133 --> 00:36:25.901
And now we're going
to verify all of that.

00:36:25.901 --> 00:36:27.367
We're going to sneak
into our service.

00:36:27.367 --> 00:36:29.534
We're going to see what action
it actually requested.

00:36:29.534 --> 00:36:32.400
We're going to make sure
that it was an instance

00:36:32.400 --> 00:36:36.300
of UpdatePhone,
based on this expected...

00:36:36.300 --> 00:36:40.400
Oh.
That'll work, actually.

00:36:40.400 --> 00:36:44.234
It should've been
UpdatePhone before,

00:36:44.234 --> 00:36:46.367
but they're equivalent

00:36:46.367 --> 00:36:47.968
because they have
the same contactId

00:36:47.968 --> 00:36:49.968
is the idea.

00:36:49.968 --> 00:36:51.334
And I did run this test.

00:36:51.334 --> 00:36:53.734
It compiles and passes.

00:36:53.734 --> 00:36:55.100
Buh-buh-buh-buh-buh.

00:36:55.100 --> 00:36:59.100
And then we get out
of the action.

00:36:59.100 --> 00:37:01.968
The phone object that was
actually sent across the wire,

00:37:01.968 --> 00:37:03.701
we compare
the interesting bits of that

00:37:03.701 --> 00:37:08.467
with what we expected to see,
and our test works.

00:37:08.467 --> 00:37:11.601
So, um...
oh, blew the transition.

00:37:11.601 --> 00:37:13.300
There we go.

00:37:13.300 --> 00:37:17.868
So finally, I talked about
you wanting to have

00:37:17.868 --> 00:37:19.868
statelessness going on
in your app.

00:37:19.868 --> 00:37:22.200
And what
I'm talking about there

00:37:22.200 --> 00:37:24.467
is you want to have
a lot of disposability.

00:37:24.467 --> 00:37:26.167
When your server falls over,

00:37:26.167 --> 00:37:28.767
your user doesn't want
a notice about it.

00:37:28.767 --> 00:37:30.501
What I'm saying here is,

00:37:30.501 --> 00:37:33.133
you really do want
to have stateless servers.

00:37:33.133 --> 00:37:34.767
And in particular,

00:37:34.767 --> 00:37:38.834
the--doing anything interesting
based on the session,

00:37:38.834 --> 00:37:40.801
the Servlet session object
on your server,

00:37:40.801 --> 00:37:42.133
is just a bad idea.

00:37:42.133 --> 00:37:43.734
It's a fine thing
to use for caching.

00:37:43.734 --> 00:37:45.467
Caching is a wonderful thing.

00:37:45.467 --> 00:37:47.367
But anything--

00:37:47.367 --> 00:37:49.501
If you're coming
from a JSP background

00:37:49.501 --> 00:37:51.033
and you've written
a multi-step wizard--

00:37:51.033 --> 00:37:52.734
you know, step one,
step two, step three--

00:37:52.734 --> 00:37:54.834
there's a good chance
that you implemented that

00:37:54.834 --> 00:37:56.934
via some kind of session object
on your server.

00:37:56.934 --> 00:37:59.367
And your user's sort of
halfway through your wizard

00:37:59.367 --> 00:38:01.534
when the server falls over
or its refresh time--

00:38:01.534 --> 00:38:02.667
they're all screwed.

00:38:02.667 --> 00:38:04.300
Or you wrote something
really confusing

00:38:04.300 --> 00:38:06.100
and difficult to maintain
to try to bounce

00:38:06.100 --> 00:38:08.234
that session state
from one server to another,

00:38:08.234 --> 00:38:09.567
and that was more trouble
than it was worth

00:38:09.567 --> 00:38:10.667
and pagers go off and stuff.

00:38:10.667 --> 00:38:12.133
Don't do that anymore.

00:38:12.133 --> 00:38:14.200
You've got a browser now.
You're an AJAX developer.

00:38:14.200 --> 00:38:15.968
The browser provides
all the server state,

00:38:15.968 --> 00:38:17.701
all the server session
you actually need.

00:38:17.701 --> 00:38:19.834
So that means that when
it comes time

00:38:19.834 --> 00:38:22.300
for rolling updates
and servers are falling over

00:38:22.300 --> 00:38:23.701
and new ones
are taking their place,

00:38:23.701 --> 00:38:24.901
or it means that at your desk,

00:38:24.901 --> 00:38:26.300
when you need to restart
your server

00:38:26.300 --> 00:38:28.801
because you rejiggered
some of the business logic code,

00:38:28.801 --> 00:38:30.400
what's going on
in your browser

00:38:30.400 --> 00:38:31.868
doesn't even need to notice
that that happened.

00:38:31.868 --> 00:38:33.300
Maybe some calls will be
a little bit slower

00:38:33.300 --> 00:38:34.534
because the cache fell off.

00:38:34.534 --> 00:38:36.133
But otherwise you're fine.

00:38:36.133 --> 00:38:38.133
If you're developing
an App Engine app,

00:38:38.133 --> 00:38:40.868
you've got the Memcache package
that's available for you

00:38:40.868 --> 00:38:43.734
which works really, really well
for this kind of thing.

00:38:43.734 --> 00:38:45.434
So we've got disposable servers.

00:38:45.434 --> 00:38:48.367
We similarly want to have
disposable clients.

00:38:48.367 --> 00:38:50.734
I'm afraid I'm going
to gloss over this

00:38:50.734 --> 00:38:51.868
more than it deserves,

00:38:51.868 --> 00:38:54.934
but the punch line here is,

00:38:54.934 --> 00:38:56.767
as I said
at the beginning,

00:38:56.767 --> 00:39:00.100
you want to get
your history right.

00:39:00.100 --> 00:39:02.601
As your user
is doing things

00:39:02.601 --> 00:39:04.801
that feel like navigating
around your app--

00:39:04.801 --> 00:39:06.100
you remember
in the AdWords demo,

00:39:06.100 --> 00:39:08.234
I was clicking
around the tree

00:39:08.234 --> 00:39:09.367
and clicking on--
navigating

00:39:09.367 --> 00:39:10.667
into different parts
of the app.

00:39:10.667 --> 00:39:13.467
Each one of those places
in your app

00:39:13.467 --> 00:39:16.801
wants to be embodied
by a GWT History token,

00:39:16.801 --> 00:39:19.100
so that as the user
hits that back button,

00:39:19.100 --> 00:39:20.701
she'll return to where she was.

00:39:20.701 --> 00:39:22.334
If she hits the forth button,
she goes on.

00:39:22.334 --> 00:39:24.667
If she keeps a bookmark,
that bookmark actually works,

00:39:24.667 --> 00:39:26.767
and she returns to the space
where she was in the app.

00:39:26.767 --> 00:39:28.734
If you've done that right,

00:39:28.734 --> 00:39:30.701
you've got a disposable client.

00:39:30.701 --> 00:39:32.367
When the user hits F5,

00:39:32.367 --> 00:39:35.767
or you copy a URL
from one browser to another,

00:39:35.767 --> 00:39:36.934
it just works.

00:39:36.934 --> 00:39:38.601
Your development life
is happier.

00:39:38.601 --> 00:39:39.934
Your users are happier.

00:39:39.934 --> 00:39:41.434
That said,

00:39:41.434 --> 00:39:45.868
the History library
is in the traditional GWT way.

00:39:45.868 --> 00:39:47.434
It is a bit low-level.

00:39:47.434 --> 00:39:51.934
Making every bit of your app
knowing about History tokens,

00:39:51.934 --> 00:39:54.200
and knowing to listen
for OnHistory token change,

00:39:54.200 --> 00:39:56.200
and to try to push
History tokens

00:39:56.200 --> 00:39:57.934
if they want to change
is sort of nasty.

00:39:57.934 --> 00:40:00.234
And you want to come up
with some kind of an abstraction

00:40:00.234 --> 00:40:02.701
to isolate
the bits of your app

00:40:02.701 --> 00:40:04.367
from that kind of knowledge.

00:40:04.367 --> 00:40:06.367
What we did in AdWords
was we came up

00:40:06.367 --> 00:40:08.767
with a package called Place.

00:40:08.767 --> 00:40:11.100
It's not open sourced.

00:40:11.100 --> 00:40:12.701
It wound up being
very ad-specific.

00:40:12.701 --> 00:40:14.801
But the pattern itself
is pretty straightforward.

00:40:14.801 --> 00:40:16.868
It pretty much winds up being,
just like I have

00:40:16.868 --> 00:40:19.734
command objects, action objects
to embody operations,

00:40:19.734 --> 00:40:23.334
I've got place objects to embody
addresses within my app.

00:40:23.334 --> 00:40:26.200
They're kind of
incarnate bookmarks

00:40:26.200 --> 00:40:29.701
and each place object
knows how to talk

00:40:29.701 --> 00:40:31.767
to the History service,
to push tokens,

00:40:31.767 --> 00:40:33.868
and read tokens
and that kind of a thing.

00:40:33.868 --> 00:40:36.033
And it's all integrated
into the Event Bus.

00:40:36.033 --> 00:40:38.300
So you remember this picture,
where all of my bits of my app

00:40:38.300 --> 00:40:39.834
are talking to each other.

00:40:39.834 --> 00:40:43.133
To introduce place management
into this,

00:40:43.133 --> 00:40:46.100
I'll create something
called the place service,

00:40:46.100 --> 00:40:47.534
which is the only part
of the app

00:40:47.534 --> 00:40:48.634
that's actually responsible

00:40:48.634 --> 00:40:50.868
for knowing about
the GWT History library.

00:40:50.868 --> 00:40:53.601
So when a bookmark
is pasted in,

00:40:53.601 --> 00:40:55.767
when the back button is hit,
when the forth button is hit,

00:40:55.767 --> 00:40:57.534
place service
notices about that.

00:40:57.534 --> 00:40:58.901
And it announces
to the rest of the app,

00:40:58.901 --> 00:41:00.434
"The user has changed places.

00:41:00.434 --> 00:41:01.934
Here's the new place
that they're going."

00:41:01.934 --> 00:41:03.234
Maybe it represents
a contact.

00:41:03.234 --> 00:41:05.701
Maybe it represents a text ad
in AdWords.

00:41:05.701 --> 00:41:08.133
And the bits of the app
that need to swap themselves in

00:41:08.133 --> 00:41:09.901
or swap themselves out
can listen

00:41:09.901 --> 00:41:13.167
for those more semantic objects,
the place changes,

00:41:13.167 --> 00:41:15.567
and go on their merry way.

00:41:15.567 --> 00:41:20.234
I've actually run out of things
to talk about.

00:41:20.234 --> 00:41:22.334
Like I said, it always
ran long before.

00:41:22.334 --> 00:41:23.868
So I did talk faster.

00:41:23.868 --> 00:41:26.267
But we have ample time
for questions and answers now.

00:41:26.267 --> 00:41:28.567
So if people could line up
at the microphones,

00:41:28.567 --> 00:41:30.501
so I don't have to try
to repeat your question

00:41:30.501 --> 00:41:31.767
and get it wrong,

00:41:31.767 --> 00:41:34.267
this would be
an excellent time.

00:41:34.267 --> 00:41:36.834
[applause]

00:41:36.834 --> 00:41:39.267
Thank you.

00:41:42.300 --> 00:41:43.601
man: I just wanted
to reiterate

00:41:43.601 --> 00:41:45.467
something you mentioned briefly,
that...

00:41:45.467 --> 00:41:47.300
about creating
some of these mock objects

00:41:47.300 --> 00:41:48.634
inside of GWT.

00:41:48.634 --> 00:41:51.734
And not so much a question,
but a hope

00:41:51.734 --> 00:41:53.667
that that is something
that would happen,

00:41:53.667 --> 00:41:55.701
because anything we can do
to make it easier

00:41:55.701 --> 00:41:58.868
for testability
and to get these designs right,

00:41:58.868 --> 00:42:00.501
I think that would really help
with adoption.

00:42:00.501 --> 00:42:02.501
Because in past projects,
we've tried to use it,

00:42:02.501 --> 00:42:03.934
and it's really difficult
to get it right

00:42:03.934 --> 00:42:05.200
and to get the decoupling in.

00:42:05.200 --> 00:42:07.734
So if that was baked in
to just standard GWT,

00:42:07.734 --> 00:42:08.834
that would be, I think,

00:42:08.834 --> 00:42:10.934
a really, really
beneficial adoption part.

00:42:10.934 --> 00:42:13.701
Ryan: We totally agree.

00:42:13.701 --> 00:42:15.033
And we're getting better--

00:42:15.033 --> 00:42:16.200
learning more
about that kind of thing

00:42:16.200 --> 00:42:18.033
as real people
build real applications

00:42:18.033 --> 00:42:19.968
inside of Google
and yell and scream at us.

00:42:19.968 --> 00:42:23.067
Before we get to actual changes
inside of GWT,

00:42:23.067 --> 00:42:24.667
one of the things that I'd hoped
to deliver today

00:42:24.667 --> 00:42:26.400
was a simple sample app

00:42:26.400 --> 00:42:28.501
that actually embodies
all of these practices.

00:42:28.501 --> 00:42:30.033
So if nothing else,
there's code to point at

00:42:30.033 --> 00:42:31.767
and show people,
"No, do it that way."

00:42:31.767 --> 00:42:34.534
And I'm going to try
to block out some time

00:42:34.534 --> 00:42:35.901
to actually finish that thing
and post it

00:42:35.901 --> 00:42:39.367
up on the GWT website
sooner or later.

00:42:39.367 --> 00:42:42.200
man: First I just wanted
to say thanks.

00:42:42.200 --> 00:42:44.000
All the things in this talk

00:42:44.000 --> 00:42:46.501
were definitely things
I've been struggling with.

00:42:46.501 --> 00:42:47.567
Ryan: Great.

00:42:47.567 --> 00:42:48.801
man: I was about halfway there,

00:42:48.801 --> 00:42:52.501
and this kind of--
going to help me fix things.

00:42:52.501 --> 00:42:56.968
I was just going to ask
about testing and mocking.

00:42:56.968 --> 00:42:59.467
I've seen a lot of discussions
back and forth

00:42:59.467 --> 00:43:03.133
about is it feasible
to test the GUI itself.

00:43:03.133 --> 00:43:04.901
So the techniques here
are great.

00:43:04.901 --> 00:43:08.067
I didn't think about doing it
where you're actually

00:43:08.067 --> 00:43:10.901
getting most of your code
out of the DOM

00:43:10.901 --> 00:43:12.634
and you're just testing
everything else.

00:43:12.634 --> 00:43:15.033
But yet, let's say
you're trying to make

00:43:15.033 --> 00:43:18.501
a very complicated,
you know, interface.

00:43:18.501 --> 00:43:20.667
Drag and drop, resizing,
crazy stuff.

00:43:20.667 --> 00:43:21.734
Ryan: Yep.

00:43:21.734 --> 00:43:23.033
man: How do you test that?

00:43:23.033 --> 00:43:25.300
Ryan: Then you're back
to a GWTTestCase.

00:43:25.300 --> 00:43:28.801
But, you know, it's not like
GWTTestCase is poison.

00:43:28.801 --> 00:43:31.300
You've got a--kind of
a 20-second startup time

00:43:31.300 --> 00:43:32.834
to get it going,
but each individual test

00:43:32.834 --> 00:43:35.467
beyond that actually
runs pretty quickly.

00:43:35.467 --> 00:43:39.434
And as long as you've got...

00:43:39.434 --> 00:43:42.467
We've got a discipline
within Google

00:43:42.467 --> 00:43:44.634
about small, medium,
and large tests.

00:43:44.634 --> 00:43:47.434
And I think for a GWT app,

00:43:47.434 --> 00:43:50.133
that breaks down
into JRE-type unit tests

00:43:50.133 --> 00:43:51.567
are the small tests.

00:43:51.567 --> 00:43:53.667
You want those to be
about 70% of your test coverage

00:43:53.667 --> 00:43:55.133
in an ideal world.

00:43:55.133 --> 00:43:57.267
And GWTTestCases
are medium tests.

00:43:57.267 --> 00:43:58.501
The ones that, you know,

00:43:58.501 --> 00:43:59.834
they're a little bit
more complicated,

00:43:59.834 --> 00:44:01.033
but they're still not
involving

00:44:01.033 --> 00:44:02.434
setting up the entire world.

00:44:02.434 --> 00:44:05.334
If I'm writing a widget
that has enough DOM-based code

00:44:05.334 --> 00:44:06.467
that it'd be worth testing,

00:44:06.467 --> 00:44:09.367
I'll write a sample app.

00:44:09.367 --> 00:44:11.400
Or just a display of that.

00:44:11.400 --> 00:44:14.167
And I'll have a GWTTestCase
that drives that thing.

00:44:14.167 --> 00:44:16.033
And then the third part
of that puzzle,

00:44:16.033 --> 00:44:18.133
the large tests,

00:44:18.133 --> 00:44:20.133
for us, that tends to mean
Selenium tests,

00:44:20.133 --> 00:44:22.601
where I'm actually going
to put my entire app together--

00:44:22.601 --> 00:44:25.300
or maybe put together some
subpart of my app together

00:44:25.300 --> 00:44:27.367
if my app is too big
to want to fire it up

00:44:27.367 --> 00:44:28.901
every time I test
on everything--

00:44:28.901 --> 00:44:30.400
and have kind of
happy path tests

00:44:30.400 --> 00:44:32.667
that make sure that I can flow
through the entire app

00:44:32.667 --> 00:44:34.200
and off to other pages
and back again.

00:44:34.200 --> 00:44:35.334
That sort of thing.

00:44:35.334 --> 00:44:37.300
There's also work being done

00:44:37.300 --> 00:44:39.534
under the Selenium umbrella
called WebDriver--

00:44:39.534 --> 00:44:43.534
which I think is going to be
rechristened Selenium 2.0--

00:44:43.534 --> 00:44:48.100
that provides
much better browser control.

00:44:48.100 --> 00:44:49.267
Actual little plug-ins

00:44:49.267 --> 00:44:51.033
that can go inside of IE
in particular.

00:44:51.033 --> 00:44:53.501
So that instead of having
to pretend to do a click

00:44:53.501 --> 00:44:55.067
and find that
you emulated it wrong,

00:44:55.067 --> 00:44:56.267
it will do
an honest-to-God click

00:44:56.267 --> 00:44:57.434
of an honest-to-God button.

00:44:57.434 --> 00:44:58.801
You can test off of that.

00:44:58.801 --> 00:45:01.234
So, 70-20-10.
Small, medium, and large.

00:45:01.234 --> 00:45:03.968
man: Would that new
Selenium stuff

00:45:03.968 --> 00:45:07.400
work in conjunction
with the in-browser hosting mode

00:45:07.400 --> 00:45:09.100
where it's kind of
built in right now?

00:45:09.100 --> 00:45:10.400
Ryan: Yeah.

00:45:10.400 --> 00:45:11.534
man: 'Cause the stuff
that's in there now

00:45:11.534 --> 00:45:13.133
is kind of--
there's docs on it,

00:45:13.133 --> 00:45:14.834
but it's not really
well exposed.

00:45:14.834 --> 00:45:16.133
Ryan: We're still getting
our story straight

00:45:16.133 --> 00:45:18.133
on how to get those all
to play well together.

00:45:18.133 --> 00:45:20.100
Another fun thing
that we started looking at

00:45:20.100 --> 00:45:22.434
is the HtmlUnit package.

00:45:22.434 --> 00:45:24.901
They've been, for quite
a while now, saying,

00:45:24.901 --> 00:45:27.033
"Hey, guys.
We work with GWT apps."

00:45:27.033 --> 00:45:32.534
And we're looking to actually
take advantage of that fact

00:45:32.534 --> 00:45:34.200
in GWT for you.

00:45:34.200 --> 00:45:37.734
So that when you do stuff
like run a GWTTestCase

00:45:37.734 --> 00:45:39.567
that doesn't actually care
about accurate layout

00:45:39.567 --> 00:45:40.834
or that kind of a thing,

00:45:40.834 --> 00:45:42.701
you can talk
to the pretend browser

00:45:42.701 --> 00:45:44.400
in this HtmlUnit package

00:45:44.400 --> 00:45:46.067
and get faster execution
that way.

00:45:46.067 --> 00:45:47.667
But still even with that,

00:45:47.667 --> 00:45:50.267
the more you can isolate
application logic

00:45:50.267 --> 00:45:51.934
from view logic,

00:45:51.934 --> 00:45:55.801
the simpler and faster
your tests are going to be.

00:45:55.801 --> 00:45:59.000
man: We're using the Event Bus
approach, partially.

00:45:59.000 --> 00:46:01.801
I'm curious what you do
if a bunch of objects

00:46:01.801 --> 00:46:04.167
that get put on it that aren't
being used anymore--

00:46:04.167 --> 00:46:05.567
they're basically
dead listeners

00:46:05.567 --> 00:46:07.033
that are added
but never removed.

00:46:07.033 --> 00:46:08.801
And how do you manage that?

00:46:08.801 --> 00:46:10.534
Ryan: Uh, badly.

00:46:10.534 --> 00:46:12.634
We don't have weak references.

00:46:12.634 --> 00:46:14.734
This isn't really Java.
It's just a pretend Java.

00:46:14.734 --> 00:46:18.033
So you pretty much have to...

00:46:18.033 --> 00:46:20.901
It's all developer discipline
of listening--well, actually,

00:46:20.901 --> 00:46:22.934
the place change event
simplifies that some.

00:46:22.934 --> 00:46:25.367
Because we've got that
at the heart of our app,

00:46:25.367 --> 00:46:27.100
widgets are able to hear,

00:46:27.100 --> 00:46:30.100
"I'm not relevant right now,
and so I'm going to--

00:46:30.100 --> 00:46:31.901
"When a place change happens,

00:46:31.901 --> 00:46:33.167
"and it's not a place
that I live in,

00:46:33.167 --> 00:46:35.167
"I'm going to tear down
my Event Bus handlers

00:46:35.167 --> 00:46:38.033
and throw those away."

00:46:38.033 --> 00:46:41.400
We...of all of the many
fascinating performance

00:46:41.400 --> 00:46:42.868
and memory problems
we have run into

00:46:42.868 --> 00:46:44.467
in the course of AdWords,
I don't think that that one

00:46:44.467 --> 00:46:46.501
has proven to be
too big of a deal.

00:46:46.501 --> 00:46:50.934
I'd put that down to having
that kind of consistent

00:46:50.934 --> 00:46:52.634
place handling story.

00:46:52.634 --> 00:46:54.334
man: Okay, related to that,

00:46:54.334 --> 00:46:57.334
if I have multiple tables
and I have an object

00:46:57.334 --> 00:46:59.400
that's interested in events
from one of the tables

00:46:59.400 --> 00:47:01.267
and you want to use
this Event Bus approach

00:47:01.267 --> 00:47:03.133
to communicate that,

00:47:03.133 --> 00:47:06.501
how do I know
which table it is

00:47:06.501 --> 00:47:08.701
without being
directly connected to them?

00:47:08.701 --> 00:47:10.767
Is there--have you guys
solved that problem?

00:47:10.767 --> 00:47:12.534
Without knowing
the object itself.

00:47:12.534 --> 00:47:13.934
Loosely coupling.

00:47:13.934 --> 00:47:16.567
Ryan: Yeah.
I'm not following the question.

00:47:16.567 --> 00:47:18.000
man: Maybe it's too complex.

00:47:18.000 --> 00:47:19.567
Ryan: If you want to come up
afterward,

00:47:19.567 --> 00:47:22.167
we can hash it out.

00:47:22.167 --> 00:47:24.801
man: I just thought of--
the other question I had--

00:47:24.801 --> 00:47:27.934
So I went through the whole
property change listeners mess.

00:47:27.934 --> 00:47:30.634
And I'm looking forward
to getting rid of them.

00:47:30.634 --> 00:47:33.901
But how do you deal
with efficiency?

00:47:33.901 --> 00:47:37.667
Like, now you get an event
that this object changed.

00:47:37.667 --> 00:47:41.667
And you have to update
the UI to reflect it.

00:47:41.667 --> 00:47:42.801
But you don't know exactly--

00:47:42.801 --> 00:47:44.968
if you knew, like,
this one field changed,

00:47:44.968 --> 00:47:47.501
you can just go
and change one field

00:47:47.501 --> 00:47:50.267
or move the corner over.

00:47:50.267 --> 00:47:52.934
But now all you know
is something changed.

00:47:52.934 --> 00:47:55.200
And how do you get around...

00:47:55.200 --> 00:47:56.968
Ryan: Well, I know this...

00:47:56.968 --> 00:47:58.234
I know the something
that it is

00:47:58.234 --> 00:48:00.367
that is actually interesting
to me.

00:48:00.367 --> 00:48:02.934
And you've got
more efficiency now,

00:48:02.934 --> 00:48:05.000
because instead of having
this one-to-one mapping

00:48:05.000 --> 00:48:06.200
of everything that wants
to listen to something

00:48:06.200 --> 00:48:07.634
and what they're listening to,

00:48:07.634 --> 00:48:09.868
I've got a lot fewer
instances of handler.

00:48:09.868 --> 00:48:12.367
The execution speed,
I don't think,

00:48:12.367 --> 00:48:13.767
has turned out to be
such a big deal.

00:48:13.767 --> 00:48:16.167
Especially if I'm good
about only listening

00:48:16.167 --> 00:48:18.000
while it makes sense
for me to listen.

00:48:18.000 --> 00:48:21.868
So if I'm
the tree of contacts,

00:48:21.868 --> 00:48:24.133
just, you know, then I'm
displaying all of them,

00:48:24.133 --> 00:48:25.701
well, every single
contact event

00:48:25.701 --> 00:48:27.300
is going to be
of interest to me.

00:48:27.300 --> 00:48:31.033
If I'm the editing UI
that's only displaying

00:48:31.033 --> 00:48:32.534
a particular contact
at the moment,

00:48:32.534 --> 00:48:34.734
it's very unlikely
that some other contact changed,

00:48:34.734 --> 00:48:36.467
because
I'm only one application.

00:48:36.467 --> 00:48:37.701
I'm not, like,
some kind of server

00:48:37.701 --> 00:48:38.934
handling all of the stuff.

00:48:38.934 --> 00:48:40.400
man: And what if there is...

00:48:40.400 --> 00:48:43.434
Our app has, a lot of times,
more than one view

00:48:43.434 --> 00:48:44.767
on the same object
in different ways.

00:48:44.767 --> 00:48:46.234
Ryan: But you're still--
you're usually not

00:48:46.234 --> 00:48:47.334
going to have
hundreds of views, right?

00:48:47.334 --> 00:48:48.601
There have--
two or three views,

00:48:48.601 --> 00:48:50.601
and those two or three views
will be listening

00:48:50.601 --> 00:48:52.033
and maybe will hear
some irrelevant stuff.

00:48:52.033 --> 00:48:53.834
I think that that'll all
wash out.

00:48:53.834 --> 00:48:55.667
man: All right.
Thanks.

00:48:55.667 --> 00:48:56.801
Ryan: Hi.

00:48:56.801 --> 00:48:58.701
man: Yeah, my question is,

00:48:58.701 --> 00:49:00.033
you talked about
the importance

00:49:00.033 --> 00:49:03.667
of being able to bookmark
or refresh pages.

00:49:03.667 --> 00:49:05.634
So going with
the contact example,

00:49:05.634 --> 00:49:07.300
you know, it's not just,
you know, good enough

00:49:07.300 --> 00:49:09.667
that I'm on, you know,
hit the back button

00:49:09.667 --> 00:49:12.033
and it knows I was at
the contact page.

00:49:12.033 --> 00:49:13.667
You know, I want
to hit the back button and know

00:49:13.667 --> 00:49:15.667
I was viewing, you know,
John Doe.

00:49:15.667 --> 00:49:17.267
And then I want to hit
the back button again

00:49:17.267 --> 00:49:19.601
and know, you know,
it was Jane Smith.

00:49:19.601 --> 00:49:21.434
So, you know,
I'm kind of wondering,

00:49:21.434 --> 00:49:24.267
like, in the HTML
or in the Web 1.0

00:49:24.267 --> 00:49:27.434
or JSP world,
you would pass URL parameters.

00:49:27.434 --> 00:49:29.634
You know, with
a question mark Id.

00:49:29.634 --> 00:49:30.801
Ryan: That's pretty much how

00:49:30.801 --> 00:49:32.400
the History library's
implemented.

00:49:32.400 --> 00:49:35.234
Except everything winds up
after the hash mark

00:49:35.234 --> 00:49:36.767
rather than after
the question mark.

00:49:36.767 --> 00:49:38.567
So what you wind up doing

00:49:38.567 --> 00:49:42.434
is I've got
a subclass of place

00:49:42.434 --> 00:49:46.968
per type of object
that I want to be--

00:49:46.968 --> 00:49:48.501
that my location
is relevant to.

00:49:48.501 --> 00:49:50.634
So in the AdWords case,
we wind up with

00:49:50.634 --> 00:49:53.267
campaign places,
ad group places,

00:49:53.267 --> 00:49:54.534
and stuff like that.

00:49:54.534 --> 00:49:57.100
These place objects
know enough

00:49:57.100 --> 00:49:58.667
about the History
management system

00:49:58.667 --> 00:50:01.501
to provide
a History token string

00:50:01.501 --> 00:50:04.033
that includes the ad group Id
and the campaign Id.

00:50:04.033 --> 00:50:06.000
And so boom,
it's right back there

00:50:06.000 --> 00:50:07.200
in the URL.

00:50:07.200 --> 00:50:09.767
man: And so then
does the place interact

00:50:09.767 --> 00:50:10.834
with the Event Bus,
so when it notices...

00:50:10.834 --> 00:50:12.167
Ryan: Yes.

00:50:12.167 --> 00:50:13.901
man: That a new Id was passed,
it triggers an event?

00:50:13.901 --> 00:50:15.834
Ryan: Exactly.
man: And notifies pages?

00:50:15.834 --> 00:50:18.033
Ryan: So we can go back
to our pretty picture here.

00:50:18.033 --> 00:50:19.501
That pretty picture.

00:50:19.501 --> 00:50:23.033
So the user hits the back button
or the forth button.

00:50:23.033 --> 00:50:25.167
The History event
hits the place service,

00:50:25.167 --> 00:50:27.367
which is where the code
that actually implements

00:50:27.367 --> 00:50:30.033
the History client interface
lives.

00:50:30.033 --> 00:50:34.400
The place service instantiates
a new little place object,

00:50:34.400 --> 00:50:37.801
which...let's see.

00:50:37.801 --> 00:50:40.267
The place service might actually
talk to your RPC service

00:50:40.267 --> 00:50:42.300
to, you know, say,
"Get me this contact

00:50:42.300 --> 00:50:45.534
that is relevant
to the URL that I just had."

00:50:45.534 --> 00:50:47.534
And then it will announce
to the world,

00:50:47.534 --> 00:50:49.234
"Hi, everybody,
we're at a new place.

00:50:49.234 --> 00:50:52.634
And this is the contact object
that I found at that place."

00:50:52.634 --> 00:50:54.133
Nobody else has to know
about the fact

00:50:54.133 --> 00:50:55.667
that it happened to live
on the URL

00:50:55.667 --> 00:50:57.033
or whatever else went on.

00:50:57.033 --> 00:50:59.267
man: And then, you know,
around your Event Bus,

00:50:59.267 --> 00:51:01.033
how--
I'm just kind of interested

00:51:01.033 --> 00:51:03.868
in how many different things

00:51:03.868 --> 00:51:05.634
that subscribe
to a single event,

00:51:05.634 --> 00:51:07.567
like, you know--
let's say I have

00:51:07.567 --> 00:51:09.267
a tiered navigation,
you know, maybe.

00:51:09.267 --> 00:51:12.300
Or I have top navigation
and side navigation.

00:51:12.300 --> 00:51:15.033
So kind of pages
within pages with, you know--

00:51:15.033 --> 00:51:17.734
or in terms of GWT,
like a panel within a panel.

00:51:17.734 --> 00:51:18.901
You know, maybe I have,
you know,

00:51:18.901 --> 00:51:20.167
a bunch of tabs at the top.

00:51:20.167 --> 00:51:22.334
And I have a contact tab
and I have tabs on the left.

00:51:22.334 --> 00:51:24.901
I mean, does--
do you try and just subscribe

00:51:24.901 --> 00:51:27.534
to the event in one place
and then top down drive,

00:51:27.534 --> 00:51:28.734
like, "Hey, this was changed,"

00:51:28.734 --> 00:51:30.200
or do you have
multiple places--

00:51:30.200 --> 00:51:31.667
Ryan: No, it...

00:51:31.667 --> 00:51:35.267
People did start talking
directly to the Event Bus

00:51:35.267 --> 00:51:36.667
all of the time
for everything.

00:51:36.667 --> 00:51:38.434
And that was
kind of retrograde.

00:51:38.434 --> 00:51:40.000
If I've just got--

00:51:40.000 --> 00:51:42.634
It's like
in the PhoneEditor example.

00:51:42.634 --> 00:51:44.033
The PhoneEditor...

00:51:44.033 --> 00:51:45.801
Or in the dependency injection
example.

00:51:45.801 --> 00:51:47.834
We created our contact display
and we gave it an instance

00:51:47.834 --> 00:51:48.934
of PhoneEditor display.

00:51:48.934 --> 00:51:50.267
PhoneEditor
didn't have to know

00:51:50.267 --> 00:51:52.801
about navigation changes
within the app

00:51:52.801 --> 00:51:54.934
because it had
a really tight relationship

00:51:54.934 --> 00:51:57.901
with the contact display object
that needs to know

00:51:57.901 --> 00:51:59.334
how to edit phone numbers.

00:51:59.334 --> 00:52:02.467
There's no reason for that
to go crazy with it there.

00:52:02.467 --> 00:52:05.434
So I don't have
a pat answer for you.

00:52:05.434 --> 00:52:08.200
But I think it's the...

00:52:08.200 --> 00:52:10.701
the top-level bits of the app

00:52:10.701 --> 00:52:12.267
that need to appear
and disappear

00:52:12.267 --> 00:52:14.567
are probably the ones
listening to, for example,

00:52:14.567 --> 00:52:16.000
place changes.

00:52:16.000 --> 00:52:18.267
Maybe other types of events--
you know, contact editing

00:52:18.267 --> 00:52:20.667
or whatever, maybe there you do
want to be a bit finer grained.

00:52:20.667 --> 00:52:22.434
But you kind of...

00:52:22.434 --> 00:52:24.267
It becomes a feel thing.

00:52:24.267 --> 00:52:25.901
I don't really have
a simple answer.

00:52:25.901 --> 00:52:28.167
man: So have you guys
thought about

00:52:28.167 --> 00:52:29.901
just taking a simple app
like this

00:52:29.901 --> 00:52:31.133
and putting it out there
as an example?

00:52:31.133 --> 00:52:32.534
Ryan: Yeah, absolutely.

00:52:32.534 --> 00:52:34.033
man: 'Cause, I mean,
you know, what's out there,

00:52:34.033 --> 00:52:35.200
I think it was the sandbox
or the--

00:52:35.200 --> 00:52:36.367
Ryan: Yeah, um--

00:52:36.367 --> 00:52:37.834
man: It's nice,
but it's not really

00:52:37.834 --> 00:52:39.367
real-world scenarios.

00:52:39.367 --> 00:52:40.667
Ryan: I have been
reliably informed

00:52:40.667 --> 00:52:41.767
that I will be doing that.

00:52:41.767 --> 00:52:43.567
man: Well, thanks.
Appreciate it.

00:52:43.567 --> 00:52:45.434
[audience chuckles]

00:52:45.434 --> 00:52:47.567
man: Hi.
Quick question.

00:52:47.567 --> 00:52:51.567
I started recently using GWT,
and I really like it.

00:52:51.567 --> 00:52:54.868
My question is more about
the History button in general,

00:52:54.868 --> 00:52:57.000
since you've talked about
different design paradigms

00:52:57.000 --> 00:52:58.133
and patterns.

00:52:58.133 --> 00:53:00.267
Is History button really,
in your view,

00:53:00.267 --> 00:53:01.534
still a useful thing?

00:53:01.534 --> 00:53:02.601
Or not History button.

00:53:02.601 --> 00:53:03.701
The back button,
I'm sorry, I meant.

00:53:03.701 --> 00:53:05.067
Ryan: Oh, sure.

00:53:05.067 --> 00:53:06.868
man: Because now we're talking

00:53:06.868 --> 00:53:08.200
more and more
rich applications.

00:53:08.200 --> 00:53:09.701
You know,
fancy applications.

00:53:09.701 --> 00:53:11.234
More like
desktop applications.

00:53:11.234 --> 00:53:12.767
You really--you know,
once you add--

00:53:12.767 --> 00:53:14.567
you may want
to let them delete it,

00:53:14.567 --> 00:53:16.868
but not necessarily delete
by going back, for example.

00:53:16.868 --> 00:53:18.200
So--
Ryan: I wouldn't--

00:53:18.200 --> 00:53:20.467
You don't want to let them
delete by going back.

00:53:20.467 --> 00:53:22.601
But...especially if you're
doing an application like this,

00:53:22.601 --> 00:53:24.534
where at the end of the day,
it's a big bag of objects

00:53:24.534 --> 00:53:25.834
and I want to navigate
around the space

00:53:25.834 --> 00:53:27.734
that that big bag of objects
defines,

00:53:27.734 --> 00:53:30.234
your users are used
to clicking on the thing

00:53:30.234 --> 00:53:31.400
and then
hitting the back button

00:53:31.400 --> 00:53:33.400
to get back to the place
that they were before.

00:53:33.400 --> 00:53:36.567
I'm certainly not suggesting
that you encourage--

00:53:36.567 --> 00:53:38.567
that the back button becomes
your undo mechanism.

00:53:38.567 --> 00:53:40.100
I think you'll go insane.

00:53:40.100 --> 00:53:42.801
But you can't stop your user
from hitting that back button.

00:53:42.801 --> 00:53:44.167
And it's a pretty nice way

00:53:44.167 --> 00:53:45.534
to work your way
through a space.

00:53:45.534 --> 00:53:47.234
man: What we did in our app
is basically

00:53:47.234 --> 00:53:50.133
we would stop having
the back button at all.

00:53:50.133 --> 00:53:51.701
So as a result,
user get used

00:53:51.701 --> 00:53:53.200
to using in a different way.

00:53:53.200 --> 00:53:55.000
More like they're used to using
a rich application.

00:53:55.000 --> 00:53:56.834
Ryan: I've never had the luxury
of working in an app

00:53:56.834 --> 00:53:58.467
where I was allowed
to take the back button away.

00:53:58.467 --> 00:54:00.434
So...but I wouldn't want to.

00:54:00.434 --> 00:54:02.067
I mean, it's...

00:54:02.067 --> 00:54:04.000
There's a reason
that the Web browsers

00:54:04.000 --> 00:54:05.734
got shaped the way they did--
it feels really good.

00:54:05.734 --> 00:54:08.067
If you're--I mean--not every app
is this kind of an app.

00:54:08.067 --> 00:54:10.834
I don't know if the back button
really makes sense for Lombardi,

00:54:10.834 --> 00:54:12.667
where they're, you know,
doing more--

00:54:12.667 --> 00:54:14.400
I'm doing
a big diagramming thing.

00:54:14.400 --> 00:54:16.067
But for an app like this,

00:54:16.067 --> 00:54:17.400
I think it's pretty natural.

00:54:17.400 --> 00:54:18.801
And it's not something
to hide from.

00:54:18.801 --> 00:54:20.300
man: Thank you.

00:54:20.300 --> 00:54:22.133
man: When you build the UI
in GWT,

00:54:22.133 --> 00:54:23.934
it's very developer-centric,
usually.

00:54:23.934 --> 00:54:25.133
It's basically Swing.

00:54:25.133 --> 00:54:27.534
It feels like that
when I'm building a UI.

00:54:27.534 --> 00:54:29.901
But usually, UI designers
want to make it with mark-up.

00:54:29.901 --> 00:54:32.801
So there was some talk
a while ago

00:54:32.801 --> 00:54:34.200
about a declarative UI.

00:54:34.200 --> 00:54:35.868
I may have missed it
if that came out.

00:54:35.868 --> 00:54:38.167
But what do you use
for AdWords,

00:54:38.167 --> 00:54:39.334
and are there--

00:54:39.334 --> 00:54:41.267
Ryan: We use declarative UI.
man: Yeah?

00:54:41.267 --> 00:54:42.901
Ryan: The code's there.
It exists.

00:54:42.901 --> 00:54:44.133
It's called UiBinder now.

00:54:44.133 --> 00:54:45.501
Its documentation
is all public,

00:54:45.501 --> 00:54:46.801
to make it painfully obvious

00:54:46.801 --> 00:54:49.534
that we haven't actually
released the code itself.

00:54:49.534 --> 00:54:52.734
We are trying to actually
get it out there,

00:54:52.734 --> 00:54:54.868
and it's just been a question
of too few engineers

00:54:54.868 --> 00:54:56.334
being pulled
in too many dimensions.

00:54:56.334 --> 00:54:59.100
But yeah, UiBinder is used
by AdWords.

00:54:59.100 --> 00:55:00.267
Wave uses it.

00:55:00.267 --> 00:55:02.234
And getting those guys
to ship

00:55:02.234 --> 00:55:03.767
has kept managing to trump

00:55:03.767 --> 00:55:05.200
actually open sourcing
the thing.

00:55:05.200 --> 00:55:07.167
It will go out.

00:55:07.167 --> 00:55:10.667
There's also, in AdWords,
there's some code that we rolled

00:55:10.667 --> 00:55:13.334
to try to--
I implied a lot of Glue there.

00:55:13.334 --> 00:55:17.701
Of...here's my phone object,
here's my string display,

00:55:17.701 --> 00:55:20.234
copy the string to here,
copy the string back,

00:55:20.234 --> 00:55:21.834
and, you know,
that kind of stuff.

00:55:21.834 --> 00:55:24.667
We managed to generate
some amount of that code

00:55:24.667 --> 00:55:25.868
in AdWords.

00:55:25.868 --> 00:55:28.501
We weren't super thrilled--

00:55:28.501 --> 00:55:30.534
or I wasn't super thrilled
with what we came up with.

00:55:30.534 --> 00:55:31.801
But we've got notions there too

00:55:31.801 --> 00:55:34.367
of frameworks
we'd like to provide

00:55:34.367 --> 00:55:36.033
to kind of minimize that need.

00:55:36.033 --> 00:55:39.033
But I don't have
particular promises

00:55:39.033 --> 00:55:40.200
or particular dates to say.

00:55:40.200 --> 00:55:41.434
We're aware of it
as an issue.

00:55:41.434 --> 00:55:43.067
And we'll get there.

00:55:43.067 --> 00:55:45.467
man: Hi.
Thank you for your talk.

00:55:45.467 --> 00:55:46.601
Ryan: Thank you.

00:55:46.601 --> 00:55:48.300
man: So the application
that we work on,

00:55:48.300 --> 00:55:50.133
we've done something
similar to this

00:55:50.133 --> 00:55:53.000
with something that roughly
translates to the Event Bus.

00:55:53.000 --> 00:55:56.300
But we don't have all the other
constituent pieces

00:55:56.300 --> 00:55:58.167
talking to the services.

00:55:58.167 --> 00:56:00.534
Instead, they--
there's, like,

00:56:00.534 --> 00:56:02.434
this back and forth
propagation of events.

00:56:02.434 --> 00:56:06.534
And can you comment
on why that would be--

00:56:06.534 --> 00:56:08.501
Ryan: If it's working for you,

00:56:08.501 --> 00:56:10.067
I wouldn't tell you
to change it

00:56:10.067 --> 00:56:11.367
just for the sake of changing.

00:56:11.367 --> 00:56:13.701
We...this worked nicely
for us

00:56:13.701 --> 00:56:16.300
because it...

00:56:16.300 --> 00:56:18.601
I think we have no more events
than we actually need

00:56:18.601 --> 00:56:20.501
traveling around the place,
and...

00:56:20.501 --> 00:56:21.934
Again, you know,
for the testing

00:56:21.934 --> 00:56:24.567
and for configuration purposes,

00:56:24.567 --> 00:56:26.901
the contact list
can stand on its own

00:56:26.901 --> 00:56:28.901
without having to know
who, actually,

00:56:28.901 --> 00:56:31.367
it will be calling
into display contacts

00:56:31.367 --> 00:56:33.167
and that kind of a thing.

00:56:33.167 --> 00:56:34.634
If you don't have a problem,

00:56:34.634 --> 00:56:37.400
there's no reason for you
to find a solution.

00:56:37.400 --> 00:56:39.200
So...
man: All right, thank you.

00:56:39.200 --> 00:56:41.033
Ryan: Yeah. Hi.

00:56:41.033 --> 00:56:44.601
man: Hi. One of the
classic patterns

00:56:44.601 --> 00:56:48.067
that people use
while writing UI code,

00:56:48.067 --> 00:56:50.801
especially
in JavaScript libraries

00:56:50.801 --> 00:56:52.334
like YUI
and other things like that,

00:56:52.334 --> 00:56:55.534
is having data objects,
i.e. beings,

00:56:55.534 --> 00:56:58.234
that they can then take
into a widget

00:56:58.234 --> 00:57:00.934
that is able to take
that data object

00:57:00.934 --> 00:57:03.667
and using
a reflection-like mechanism

00:57:03.667 --> 00:57:07.033
of one sort or another
display things

00:57:07.033 --> 00:57:10.000
into the widget.

00:57:10.000 --> 00:57:11.167
Manipulate the data,

00:57:11.167 --> 00:57:14.534
potentially even edit it
then spew it back out.

00:57:14.534 --> 00:57:16.701
There's nothing like that
today in GWT,

00:57:16.701 --> 00:57:19.968
and I'm suspecting
very strongly

00:57:19.968 --> 00:57:21.834
that you guys internally
at Google

00:57:21.834 --> 00:57:23.667
have some way
of dealing with this

00:57:23.667 --> 00:57:25.400
for the large apps
that you have.

00:57:25.400 --> 00:57:27.067
And what are your plans
in the future

00:57:27.067 --> 00:57:28.200
with respect to this?

00:57:28.200 --> 00:57:32.400
Ryan: We do have kind of
part of that in AdWords.

00:57:32.400 --> 00:57:34.100
Other teams...

00:57:34.100 --> 00:57:35.901
AdWords is the...

00:57:35.901 --> 00:57:37.167
maybe the only app,

00:57:37.167 --> 00:57:38.334
or one of the only apps
at Google,

00:57:38.334 --> 00:57:39.934
that's actually
this kind of classical,

00:57:39.934 --> 00:57:41.667
J2EE-style app.

00:57:41.667 --> 00:57:44.534
And so we don't tend
to have broad solutions

00:57:44.534 --> 00:57:45.701
for those types of things.

00:57:45.701 --> 00:57:46.968
We have the solution
that AdWords rolled

00:57:46.968 --> 00:57:49.434
for their particular needs.

00:57:49.434 --> 00:57:53.634
You've probably seen
some borderline flame fests

00:57:53.634 --> 00:57:56.167
on the GWT contributors list
about data binding

00:57:56.167 --> 00:57:59.834
and the need
for doing something about this.

00:57:59.834 --> 00:58:02.667
The approach
that we have taken

00:58:02.667 --> 00:58:04.501
is where you would have used
reflection,

00:58:04.501 --> 00:58:06.801
we will decorate
bits of our UI

00:58:06.801 --> 00:58:08.234
with annotations,

00:58:08.234 --> 00:58:11.934
with the name
of the particular property

00:58:11.934 --> 00:58:14.033
of the model object
that that part of the UI

00:58:14.033 --> 00:58:15.467
wants to display,

00:58:15.467 --> 00:58:16.968
and we can generate the code

00:58:16.968 --> 00:58:18.400
that would have been
reflection-based

00:58:18.400 --> 00:58:22.334
for--this text field
is tied to the name property.

00:58:22.334 --> 00:58:23.801
Oh, this thing looks
like a JavaBean

00:58:23.801 --> 00:58:25.234
and it has a GetName method.

00:58:25.234 --> 00:58:28.701
I'll GetName, I'll call SetName
at appropriate times.

00:58:28.701 --> 00:58:31.334
We want to make that better

00:58:31.334 --> 00:58:33.100
to generate
more of that code

00:58:33.100 --> 00:58:34.767
than we're generating
right now.

00:58:34.767 --> 00:58:37.501
And there's also
similar problems

00:58:37.501 --> 00:58:39.968
that are coming up
on the server side

00:58:39.968 --> 00:58:43.667
with AppEngine
and the ORM objects

00:58:43.667 --> 00:58:45.300
that you're probably
persisting through JDO.

00:58:45.300 --> 00:58:47.334
A lot of people have found
that they've created

00:58:47.334 --> 00:58:48.601
these crafty little objects

00:58:48.601 --> 00:58:50.100
that get all nice
and persistent for them

00:58:50.100 --> 00:58:51.400
on the server side,
and then they try

00:58:51.400 --> 00:58:52.834
to serialize them
for GWT RPC,

00:58:52.834 --> 00:58:54.033
and that doesn't work,

00:58:54.033 --> 00:58:55.133
and how do I get around that

00:58:55.133 --> 00:58:56.734
without making
separate copies

00:58:56.734 --> 00:58:59.234
and calling set and get
and get and set back and forth?

00:58:59.234 --> 00:59:02.634
I think there's going to be
a similar solution to that,

00:59:02.634 --> 00:59:04.300
but we don't--

00:59:04.300 --> 00:59:05.968
We haven't quite
come upon it yet.

00:59:05.968 --> 00:59:07.868
But we are
thinking about it actively.

00:59:07.868 --> 00:59:09.167
I'm sorry, Fred,
I was just told

00:59:09.167 --> 00:59:11.400
I have to shut up now.

00:59:11.400 --> 00:59:12.767
So thanks, everybody.

00:59:12.767 --> 00:59:15.701
[applause]

