WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
All right. The next question I would like to address deals with internationalization.

00:00:06.000 --> 00:00:12.000
In reality, web browsers like Firefox or Internet Explorer can handle words,

00:00:12.000 --> 00:00:16.000
strings, sentences in language other than English.

00:00:16.000 --> 00:00:21.000
The question from students is, basically, how does that work? What's up with that?

00:00:21.000 --> 00:00:27.000
To answer that fully, I need to take a little aside into how we even represent English characters.

00:00:27.000 --> 00:00:31.000
It turns out that it's totally arbitrary.

00:00:31.000 --> 00:00:34.000
We're essentially going to use numbers under the hood.

00:00:34.000 --> 00:00:38.000
Computers can already manipulate numbers. Let's say we believe that's possible.

00:00:38.000 --> 00:00:40.000
A computer file could just be a big list of numbers.

00:00:40.000 --> 00:00:47.000
Well, we're all going to agree on a standard that certain numbers stand for certain letters.

00:00:47.000 --> 00:00:50.000
This standard is totally arbitrary.

00:00:50.000 --> 00:00:55.000
For example, the decimal number 65 stands for uppercase English "A."

00:00:55.000 --> 00:00:58.000
The decimal number 66 is uppercase English "B."

00:00:58.000 --> 00:01:01.000
Why did we start at 65? Why not?

00:01:01.000 --> 00:01:06.000
This standard is called ASCII--the American Standard Code for Information Interchange.

00:01:06.000 --> 00:01:12.000
There are 256 possible number to letter conversions in it.

00:01:12.000 --> 00:01:17.000
We only need 52 of those for the alphabet--26 lowercase letters, 26 uppercase letters--

00:01:17.000 --> 00:01:23.000
but there are also spaces, periods, parentheses, all of the number signs, multiplication,

00:01:23.000 --> 00:01:26.000
division, quotes, that sort of thing.

00:01:26.000 --> 00:01:30.000
Then the remainder is sort of filled out with special characters that aren't typically printed--

00:01:30.000 --> 00:01:34.000
like new line character that we've been escape sequences for.

00:01:34.000 --> 00:01:37.000
Two hundred fifty six might seem like a lot of room,

00:01:37.000 --> 00:01:40.000
since we're really only using maybe 80 of them,

00:01:40.000 --> 00:01:46.000
but it is not enough to encode--for example--all Chinese characters or ideograms

00:01:46.000 --> 00:01:53.000
or all of the other scripts that exist in the world from Greek or Cyrillic or Tagalog,

00:01:53.000 --> 00:01:55.000
which I believe has a different alphabet.

00:01:55.000 --> 00:01:58.000
Someone will correct me on this one. Make it known in the forums.

00:01:58.000 --> 00:02:02.000
Anyway, there are a bunch of different scripts used in natural languages,

00:02:02.000 --> 00:02:05.000
and there are more than 256 characters in the entire world.

00:02:05.000 --> 00:02:09.000
The basic solution is we need more numbers.

00:02:09.000 --> 00:02:15.000
Rather than saying that numbers 1 through 256 correspond to letters,

00:02:15.000 --> 00:02:17.000
we'll just decide to use more room.

00:02:17.000 --> 00:02:25.000
We'll say numbers between 1 and 65,536 correspond to letters.

00:02:25.000 --> 00:02:27.000
Maybe the ones at the beginning correspond to English.

00:02:27.000 --> 00:02:30.000
Then there's some for Greek. Then there's some for Russian.

00:02:30.000 --> 00:02:35.000
It's just a bigger standard. Somehow we have to agree on the order in which they appear.

00:02:35.000 --> 00:02:42.000
You may have heard words like Unicode or UTF8 mentioned in this sort of discussion.

00:02:42.000 --> 00:02:48.000
Those are just standards for using bigger sequences of numbers to represent letters

00:02:48.000 --> 00:02:52.000
that occur in the natural languages throughout the world.

00:02:52.000 --> 00:02:55.000
All right. Let's get back now to the meat of the question.

00:02:55.000 --> 00:03:00.000
How does a web browser like Firefox handle words written in other languages,

00:03:00.000 --> 00:03:03.000
especially if you're doing token definitions or whatnot.

00:03:03.000 --> 00:03:08.000
Essentially, as a convenience feature for programmers like you,

00:03:08.000 --> 00:03:13.000
we've written out A through Z--or a through z, capital A through capital Z--

00:03:13.000 --> 00:03:18.000
to mean I want this to be a word, but often there are special shortcuts,

00:03:18.000 --> 00:03:23.000
like \w, which you can write down--kind of like we might write down

00:03:23.000 --> 00:03:29.000
\n for new line, \w often means this is a word character.

00:03:29.000 --> 00:03:34.000
Someone else at the standards committee once and for all has written down all of the numbers

00:03:34.000 --> 00:03:39.000
corresponding to English letters, Cyrillic letters, Latin letters, Greek letters,

00:03:39.000 --> 00:03:44.000
all the way on down, including a bunch of Chinese, Japanese, Korean ideograms,

00:03:44.000 --> 00:03:48.000
or letters in their syllabaries, and listed all of the ones that don't correspond

00:03:48.000 --> 00:03:52.000
to space or punctuation in essentially a big lookup table.

00:03:52.000 --> 00:03:56.000
Then whenever you want to say I want to get a word in any language,

00:03:56.000 --> 00:03:59.000
you just refer to something like \w.

00:03:59.000 --> 00:04:03.000
You refer to this lookup table, often provided by a library for you,

00:04:03.000 --> 00:04:08.000
and it expands under the hood to actually thousands of individual characters

00:04:08.000 --> 00:04:10.000
or character ranges.

00:04:10.000 --> 00:04:15.000
In practice--one again, the answer to this is someone in one particular standards committee

00:04:15.000 --> 00:04:19.000
essentially enumerated every possible letter, every possible script sequence ,

00:04:19.000 --> 00:04:24.000
in all of human natural languages--or at least all of the ones that we have thus far

00:04:24.000 --> 00:04:28.000
encountered or codified--and we've written down which of those correspond

00:04:28.000 --> 00:04:31.000
to word letters and which of them correspond to number.

00:04:31.000 --> 00:04:37.000
Then we provide special shortcuts that you can use to reference those sets.

00:04:37.000 --> 00:04:40.000
So when a Firefox developer is writing a regular expression,

00:04:40.000 --> 00:04:43.000
instead of using A through Z if they mean it's part of a word,

00:04:43.000 --> 00:04:46.000
they'll use something special like \w.

00:04:46.000 --> 00:04:49.000
The actual name for this escape sequence is different depending on which regular expression

00:04:49.000 --> 00:04:52.000
library you're using, but the basic concepts--

00:04:52.000 --> 00:04:57.000
parenthesis grouping, plus, star--they stay the same for the Firefox developers

00:04:57.000 --> 09:59:59.000
even if you're supporting multiple international languages.

