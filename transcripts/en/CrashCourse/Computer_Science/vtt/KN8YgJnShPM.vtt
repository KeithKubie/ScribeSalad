WEBVTT
Kind: captions
Language: en

00:00:03.120 --> 00:00:05.940
Hi, I'm Carrie Anne, and welcome to Crash
Course Computer Science!

00:00:05.940 --> 00:00:10.100
Last episode we talked about data storage,
how technologies like magnetic tape and hard

00:00:10.110 --> 00:00:13.640
disks can store millions, billions and trillions of bits of data, for long durations, even

00:00:13.651 --> 00:00:14.651
without power.

00:00:14.651 --> 00:00:18.520
Which is perfect for recording “big blobs”
of related data, what are more commonly called

00:00:18.520 --> 00:00:19.640
computer files.

00:00:19.640 --> 00:00:24.310
You’ve no doubt encountered many types,
like text files, music files, photos and videos.

00:00:24.310 --> 00:00:28.550
Today, we’re going to talk about how files
work, and how computers keep them all organized

00:00:28.550 --> 00:00:29.960
with File Systems.

00:00:29.960 --> 00:00:38.860
INTRO

00:00:38.860 --> 00:00:43.180
It’s perfectly legal for a file to contain
arbitrary, unformatted data, but it’s most

00:00:43.180 --> 00:00:47.070
useful and practical if the data inside the
file is organized somehow.

00:00:47.070 --> 00:00:48.839
This is called a file format.

00:00:48.839 --> 00:00:52.649
You can invent your own, and programmers do
that from time to time, but it’s usually

00:00:52.649 --> 00:00:56.269
best and easiest to use an existing standard, like JPEG and MP3.

00:00:56.269 --> 00:00:58.739
Let’s look at some simple file formats.

00:00:58.739 --> 00:01:04.480
The most straightforward are T-X-T files,
which contain, surprise, text.

00:01:04.480 --> 00:01:08.360
Like all computer files, this is just a huge
list of numbers, stored as binary.

00:01:08.360 --> 00:01:13.000
If we look at the raw values of a T-X-T file
in storage, it would look something like this:

00:01:13.000 --> 00:01:16.910
We can view this as decimal numbers instead of binary, but that still doesn’t help us

00:01:16.910 --> 00:01:17.910
read the text.

00:01:17.910 --> 00:01:22.060
The key to interpreting this data is knowing
that T-X-T files use ASCII, a character encoding

00:01:22.060 --> 00:01:24.550
standard we discussed way back in Episode 4.

00:01:24.550 --> 00:01:29.980
So, in ASCII, our first value, 72, maps to
the capital letter H. And in this way, we

00:01:29.980 --> 00:01:31.240
decode the whole file.

00:01:31.240 --> 00:01:35.280
Let’s look at a more complicated example:
a WAVE File – also called a WAV – which

00:01:35.280 --> 00:01:36.280
stores audio.

00:01:36.280 --> 00:01:40.200
Before we can correctly read the data, we
need to know some information, like the bit

00:01:40.200 --> 00:01:42.690
rate and whether it’s a single track or
stereo.

00:01:42.690 --> 00:01:45.370
Data, about data, is called meta data.

00:01:45.370 --> 00:01:49.210
This metadata is stored at the front of the
file, ahead of any actual data, in what’s

00:01:49.210 --> 00:01:50.260
known as a Header.

00:01:50.260 --> 00:01:53.670
Here’s what the first 44 bytes of a WAV
file looks like.

00:01:53.670 --> 00:01:58.120
Some parts are always the same, like where it spells out W-A-V-E.

00:01:58.120 --> 00:02:01.480
Other parts contain numbers that change depending
on the data contained within.

00:02:01.480 --> 00:02:06.160
The audio data comes right behind the metadata, and it’s stored as a long list of numbers.

00:02:06.160 --> 00:02:10.540
These values represent the amplitude of sound captured many times per second, and if you

00:02:10.549 --> 00:02:14.820
want a primer on sound, check out our video all about it in Crash Course Physics.

00:02:14.830 --> 00:02:16.110
Link in the dobblydoo.

00:02:16.110 --> 00:02:19.810
As an example, let’s look at a waveform
of me saying: "hello!" Hello!

00:02:19.810 --> 00:02:23.060
Now that we’ve captured some sound, let’s
zoom into a little snippet.

00:02:23.060 --> 00:02:27.200
A digital microphone, like the one in your
computer or smartphone, samples the sound

00:02:27.200 --> 00:02:28.780
pressure thousands of times.

00:02:28.780 --> 00:02:31.200
Each sample can be represented as a number.

00:02:31.200 --> 00:02:34.609
Larger numbers mean higher sound pressure, what’s called amplitude.

00:02:34.609 --> 00:02:37.640
And these numbers are exactly what gets stored in a WAVE file!

00:02:37.640 --> 00:02:40.180
Thousands of amplitudes for every single second of audio!

00:02:40.180 --> 00:02:44.739
When it’s time to play this file, an audio
program needs to actuate the computer's speakers

00:02:44.740 --> 00:02:47.120
such that the original waveform is emitted.

00:02:47.120 --> 00:02:47.860
“Hello!”

00:02:47.860 --> 00:02:50.840
So, now that you’re getting the hang of
file formats, let’s talk about bitmaps or

00:02:50.840 --> 00:02:53.050
B-M-Ps, which store pictures.

00:02:53.050 --> 00:02:56.860
On a computer, PICtures are made up of little tiny square ELements called pixels.

00:02:56.860 --> 00:03:00.480
Each pixel is a combination of three colors:
red, green and blue.

00:03:00.480 --> 00:03:03.620
These are called additive primary colors,
and they can be mixed together to create any

00:03:03.620 --> 00:03:05.549
other color on our electronic displays.

00:03:05.549 --> 00:03:10.480
Now, just like WAV files, BMPs start with
metadata, including key values like image

00:03:10.480 --> 00:03:12.260
width, image height, and color depth.

00:03:12.260 --> 00:03:17.290
As an example, let’s say the metadata specified an image 4 pixels wide, by 4 pixels tall,

00:03:17.290 --> 00:03:22.240
with a 24-bit color depth - that’s 8-bits
for red, 8-bits for green, and 8-bits for blue.

00:03:22.240 --> 00:03:25.040
As a reminder, 8 bits is the same as one byte.

00:03:25.040 --> 00:03:28.860
The smallest number a byte can store is 0,
and the largest is 255.

00:03:28.860 --> 00:03:31.459
Our image data is going to look something
like this:

00:03:31.459 --> 00:03:34.099
Let’s look at the color of our first pixel.

00:03:34.099 --> 00:03:39.519
It has 255 for its red value, 255 for green
and 255 for blue.

00:03:39.519 --> 00:03:43.909
This equates to full intensity red, full intensity green and full intensity blue.

00:03:43.909 --> 00:03:46.810
These colors blend together on your computer monitor to become white.

00:03:46.810 --> 00:03:48.700
So our first pixel is white!

00:03:48.700 --> 00:03:54.700
The next pixel has a Red-Green-Blue, or RGB value of 255, 255, 0.

00:03:54.700 --> 00:03:56.040
That’s the color yellow!

00:03:56.040 --> 00:04:02.740
The pixel after that has a RGB value of 0,0,0
- that’s zero intensity everything, which is black.

00:04:02.740 --> 00:04:04.440
And the next one is yellow.

00:04:04.450 --> 00:04:08.140
Because the metadata specified this was a
4 by 4 image, we know that we’ve reached

00:04:08.150 --> 00:04:10.190
the end of our first row of pixels.

00:04:10.190 --> 00:04:12.300
So, we need to drop down a row.

00:04:12.300 --> 00:04:16.979
The next RGB value is 255,255,0 – yellow
again.

00:04:16.979 --> 00:04:21.070
Okay, let’s go ahead and read all the pixels
in our 4x4 image… tada!

00:04:21.070 --> 00:04:22.800
A very low resolution pac-man!

00:04:22.800 --> 00:04:27.590
Obviously this is a simple example of a small image, but we could just as easily store this

00:04:27.590 --> 00:04:28.960
image in a BMP.

00:04:28.960 --> 00:04:32.880
I want to emphasize again that it doesn’t
matter if it’s a text file, WAV, BMP, or

00:04:32.880 --> 00:04:35.520
fancier formats we don’t have time to discuss, like ZIPs and PPTs.

00:04:35.520 --> 00:04:40.500
Under the hood, they’re all the same: long
lists of numbers, stored as binary, on a storage device.

00:04:40.540 --> 00:04:43.920
File formats are the key to reading and understanding
the data inside.

00:04:43.920 --> 00:04:47.150
Now that you understand files a little better,
let’s move on to how computers go about

00:04:47.150 --> 00:04:48.220
storing them.

00:04:48.220 --> 00:04:52.280
Even though the underlying storage medium
might be a strip of tape, a drum, a disk,

00:04:52.280 --> 00:04:56.379
or integrated circuits... hardware and software abstractions let us think of storage as a

00:04:56.379 --> 00:04:58.690
long line of little buckets that store values.

00:04:58.690 --> 00:05:03.060
In the early days, when computers only performed one computation like calculating artillery

00:05:03.060 --> 00:05:07.020
range tables – the entire storage operated
like one big file.

00:05:07.020 --> 00:05:11.320
Data started at the beginning of storage,
and then filled it up in order as output was

00:05:11.320 --> 00:05:13.009
produced, up to the storage capacity.

00:05:13.009 --> 00:05:17.680
However, as computational power and storage capacity improved, it became possible, and

00:05:17.680 --> 00:05:20.500
useful, to store more than one file at a time.

00:05:20.500 --> 00:05:23.449
The simplest option is to store files back-to-back.

00:05:23.449 --> 00:05:27.460
This can work... but how does the computer know where files begin and end?

00:05:27.460 --> 00:05:31.980
Storage devices have no notion of files – they’re just a mechanism for storing lots of bits.

00:05:31.990 --> 00:05:37.580
So, for this to work, we need to have a special file that records where other ones are located.

00:05:37.580 --> 00:05:40.930
This goes by many names, but a good general term is Directory File.

00:05:40.930 --> 00:05:45.860
Most often, it’s kept right at the front
of storage, so we always know where to access it.

00:05:45.860 --> 00:05:47.520
Location zero!

00:05:47.520 --> 00:05:50.880
Inside the Directory File are the names of
all the other files in storage.

00:05:50.880 --> 00:05:54.780
In our example, they each have a name, followed by a period, and end with what’s called

00:05:54.780 --> 00:05:57.970
a File Extension, like “BMP” or “WAV”.

00:05:57.970 --> 00:06:01.419
Those further assist programs in identifying file types.

00:06:01.419 --> 00:06:05.949
The Directory File also stores metadata about these files, like when they were created and

00:06:05.949 --> 00:06:09.940
last modified, who the owner is, and if it
can be read, written or both.

00:06:09.940 --> 00:06:14.220
But most importantly, the directory file contains where these files begin in storage, and how

00:06:14.220 --> 00:06:15.220
long they are.

00:06:15.220 --> 00:06:19.639
If we want to add a file, remove a file, change a filename, or similar, we have to update

00:06:19.639 --> 00:06:21.460
the information in the Directory File.

00:06:21.460 --> 00:06:25.780
It’s like the Table of Contents in a book,
if you make a chapter shorter, or move it

00:06:25.780 --> 00:06:30.480
somewhere else, you have to update the table of contents, otherwise the page numbers won’t match!

00:06:30.480 --> 00:06:35.220
The Directory File, and the maintenance of
it, is an example of a very basic File System,

00:06:35.230 --> 00:06:39.560
the part of an Operating System that manages and keep track of stored files.

00:06:39.560 --> 00:06:44.400
This particular example is a called a Flat
File System, because they’re all stored at one level.

00:06:44.400 --> 00:06:45.300
It’s flat!

00:06:45.300 --> 00:06:48.630
Of course, packing files together, back-to-back, is a bit of a problem, because if we want

00:06:48.630 --> 00:06:53.069
to add some data to let’s say “todo.txt”,
there’s no room to do it without overwriting

00:06:53.069 --> 00:06:55.069
part of “carrie.bmp”.

00:06:55.069 --> 00:06:57.229
So modern File Systems do two things.

00:06:57.229 --> 00:06:59.340
First, they store files in blocks.

00:06:59.340 --> 00:07:02.699
This leaves a little extra space for changes,
called slack space.

00:07:02.699 --> 00:07:07.660
It also means that all file data is aligned
to a common size, which simplifies management.

00:07:07.660 --> 00:07:11.470
In a scheme like this, our Directory File
needs to keep track of what block each one

00:07:11.470 --> 00:07:12.470
is stored in.

00:07:12.470 --> 00:07:16.560
The second thing File Systems do, is allow
files to be broken up into chunks and stored

00:07:16.560 --> 00:07:17.849
across many blocks.

00:07:17.849 --> 00:07:22.009
So let’s say we open “todo.txt”, and
we add a few more items then the file becomes

00:07:22.009 --> 00:07:24.219
too big to be saved in its one block.

00:07:24.219 --> 00:07:28.020
We don’t want to overwrite the neighboring
one, so instead, the File System allocates

00:07:28.020 --> 00:07:30.840
an unused block, which can accommodate extra data.

00:07:30.840 --> 00:07:35.139
With a File System scheme like this, the Directory File needs to store not just one block per

00:07:35.139 --> 00:07:37.590
file, but rather a list of blocks per file.

00:07:37.590 --> 00:07:42.169
In this way, we can have files of variable
sizes that can be easily expanded and shrunk,

00:07:42.169 --> 00:07:44.710
simply by allocating and deallocating blocks.

00:07:44.710 --> 00:07:49.280
If you watched our episode on Operating Systems,
this should sound a lot like Virtual Memory.

00:07:49.280 --> 00:07:51.000
Conceptually it’s very similar!

00:07:51.000 --> 00:07:53.449
Now let’s say we want to delete “carrie.bmp”.

00:07:53.449 --> 00:07:56.580
To do that, we can simply remove the entry
from the Directory File.

00:07:56.580 --> 00:07:59.159
This, in turn, causes one block to become
free.

00:07:59.160 --> 00:08:04.000
Note that we didn’t actually erase the file’s
data in storage, we just deleted the record of it.

00:08:04.000 --> 00:08:08.360
At some point, that block will be overwritten with new data, but until then, it just sits there.

00:08:08.360 --> 00:08:12.680
This is one way that computer forensic teams can “recover” data from computers even

00:08:12.700 --> 00:08:15.420
though people think it has been deleted. Crafty!

00:08:15.440 --> 00:08:20.000
Ok, let’s say we add even more items to
our todo list, which causes the File System

00:08:20.010 --> 00:08:24.680
to allocate yet another block to the file,
in this case, recycling the block freed from

00:08:24.680 --> 00:08:25.810
carrie.bmp.

00:08:25.810 --> 00:08:30.620
Now our “todo.txt” is stored across 3
blocks, spaced apart, and also out of order.

00:08:30.620 --> 00:08:34.060
Files getting broken up across storage like
this is called fragmentation.

00:08:34.070 --> 00:08:38.420
It’s the inevitable byproduct of files being
created, deleted and modified.

00:08:38.430 --> 00:08:41.430
For many storage technologies, this is bad
news.

00:08:41.430 --> 00:08:46.399
On magnetic tape, reading todo.txt into memory would require seeking to block 1, then fast

00:08:46.400 --> 00:08:50.380
forwarding to block 5, and then rewinding
to block 3 – that’s a lot of back and forth!

00:08:50.400 --> 00:08:54.820
In real world File Systems, large files might
be stored across hundreds of blocks, and you

00:08:54.820 --> 00:08:57.260
don’t want to have to wait five minutes
for your files to open.

00:08:57.260 --> 00:08:59.620
The answer is defragmentation!

00:08:59.640 --> 00:09:03.589
That might sound like technobabble, but the process is really simple, and once upon a

00:09:03.589 --> 00:09:05.829
time it was really fun to watch!

00:09:05.829 --> 00:09:10.440
The computer copies around data so that files have blocks located together in storage and

00:09:10.440 --> 00:09:11.520
in the right order.

00:09:11.520 --> 00:09:16.411
After we’ve defragged, we can read our todo file, now located in blocks 1 through 3, in

00:09:16.411 --> 00:09:17.880
a single, quick read pass.

00:09:17.880 --> 00:09:21.931
So far, we’ve only been talking about Flat
File Systems, where they’re all stored in

00:09:21.931 --> 00:09:23.130
one directory.

00:09:23.130 --> 00:09:27.010
This worked ok when computers only had a little bit of storage, and you might only have a

00:09:27.010 --> 00:09:28.320
dozen or so files.

00:09:28.320 --> 00:09:33.190
But as storage capacity exploded, like we
discussed last episode, so did the number

00:09:33.190 --> 00:09:34.360
of files on computers.

00:09:34.360 --> 00:09:38.700
Very quickly, it became impractical to store
all files together at one level.

00:09:38.700 --> 00:09:42.760
Just like documents in the real world, it’s
handy to store related files together in folders.

00:09:42.760 --> 00:09:46.330
Then we can put connected folders into folders, and so on.

00:09:46.330 --> 00:09:51.010
This is a Hierarchical File System, and its
what your computer uses.There are a variety

00:09:51.010 --> 00:09:54.250
of ways to implement this, but let’s stick
with the File System example we’ve been

00:09:54.250 --> 00:09:56.060
using to convey the main idea.

00:09:56.060 --> 00:10:00.000
The biggest change is that our Directory File needs to be able to point not just to files,

00:10:00.000 --> 00:10:01.470
but also other directories.

00:10:01.470 --> 00:10:05.850
To keep track of what’s a file and what’s
a directory, we need some extra metadata.

00:10:05.850 --> 00:10:09.949
This Directory File is the top-most one, known as the Root Directory.

00:10:09.949 --> 00:10:14.630
All other files and folders lie beneath this
directory along various file paths.

00:10:14.630 --> 00:10:19.730
We can see inside of our “Root” Directory
File that we have 3 files and 2 subdirectories:

00:10:19.730 --> 00:10:21.180
music and photos.

00:10:21.180 --> 00:10:25.130
If we want to see what’s stored in our music directory, we have to go to that block and

00:10:25.130 --> 00:10:29.459
read the Directory File located there; the
format is the same as our root directory.

00:10:29.459 --> 00:10:31.300
There’s a lot of great songs in there!

00:10:31.300 --> 00:10:35.740
In addition to being able to create hierarchies of unlimited depth, this method also allows

00:10:35.740 --> 00:10:37.750
us to easily move around files.

00:10:37.750 --> 00:10:42.300
So, if we wanted to move “theme.wav” from our root directory to the music directory,

00:10:42.300 --> 00:10:44.860
we don’t have to re-arrange any blocks of
data.

00:10:44.860 --> 00:10:50.440
We can simply modify the two Directory Files, removing an entry from one and adding it to another.

00:10:50.520 --> 00:10:53.410
Importantly, the theme.wav file stays in block 5.

00:10:53.410 --> 00:10:56.920
So that’s a quick overview of the key principles of File Systems.

00:10:56.920 --> 00:11:06.600
They provide yet another way to move up a
new level of abstraction.

00:11:06.600 --> 00:11:11.260
File systems allow us to hide the raw bits
stored on magnetic tape, spinning disks and

00:11:11.260 --> 00:11:15.980
the like, and they let us think of data as
neatly organized and easily accessible files.

00:11:15.980 --> 00:11:20.820
We even started talking about users, not programmers, manipulating data, like opening files and

00:11:20.820 --> 00:11:24.820
organizing them, foreshadowing where the series will be going in a few episodes.

00:11:24.820 --> 00:11:26.140
I’ll see  you next week.

