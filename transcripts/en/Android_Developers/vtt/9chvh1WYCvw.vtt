WEBVTT
Kind: captions
Language: en

00:00:00.356 --> 00:00:01.730
SPEAKER: Making
money with an app

00:00:01.730 --> 00:00:04.160
is a goal pursued
by many developers.

00:00:04.160 --> 00:00:07.280
To help Android developers, we
launched the In-App Billing API

00:00:07.280 --> 00:00:10.580
v3 in 2013, to make it
easier for developers

00:00:10.580 --> 00:00:14.630
to offer products and
subscription within their apps.

00:00:14.630 --> 00:00:16.790
And now, we are
taking a new step

00:00:16.790 --> 00:00:20.850
to simplify billing further with
the new Play Billing Library.

00:00:20.850 --> 00:00:23.960
This library includes several
convenience classes, as well as

00:00:23.960 --> 00:00:25.910
a wrapper for the
billing service,

00:00:25.910 --> 00:00:28.430
allowing you to focus on
implementing the logic

00:00:28.430 --> 00:00:30.260
specific to your app.

00:00:30.260 --> 00:00:32.450
In-app billing relies
on the Google Play Store

00:00:32.450 --> 00:00:35.240
app, which handles the
communication between your app

00:00:35.240 --> 00:00:37.020
and Google's billing service.

00:00:37.020 --> 00:00:38.870
To use in-app billing
features, your app

00:00:38.870 --> 00:00:42.050
must first request the
com.android.vending billing

00:00:42.050 --> 00:00:45.591
permission in your
Android manifest XML file.

00:00:45.591 --> 00:00:47.590
To use the library, add
the following dependency

00:00:47.590 --> 00:00:49.600
in your [INAUDIBLE] file.

00:00:49.600 --> 00:00:51.890
But attention-- check on
the Play Billing Library

00:00:51.890 --> 00:00:53.750
page for the latest
version number

00:00:53.750 --> 00:00:56.330
to add the correct
dependency in your app.

00:00:56.330 --> 00:00:58.790
After you're set up, you
are good to go and start

00:00:58.790 --> 00:01:01.300
using the Play Billing Library.

00:01:01.300 --> 00:01:02.810
To start sending
billing requests,

00:01:02.810 --> 00:01:05.090
you must establish a
connection to the service

00:01:05.090 --> 00:01:07.760
on Google Play using
the following steps.

00:01:07.760 --> 00:01:10.190
First, create a
BillingClient instance

00:01:10.190 --> 00:01:13.790
using the Builder class, passing
the [INAUDIBLE] at Context,

00:01:13.790 --> 00:01:15.560
and set a reference
to an instance

00:01:15.560 --> 00:01:17.710
of PurchasesUpdatedListener.

00:01:17.710 --> 00:01:20.870
You can implement this
interface in your activity.

00:01:20.870 --> 00:01:23.030
When the user finishes
a purchase process,

00:01:23.030 --> 00:01:26.240
Google Play calls the
onPurchasesUpdated method

00:01:26.240 --> 00:01:29.370
on the listener that implements
the PurchasesUpdatedListener

00:01:29.370 --> 00:01:33.830
interface, where you should
handle the transaction result.

00:01:33.830 --> 00:01:36.670
Second, establish a connection
to the in-app billing service

00:01:36.670 --> 00:01:37.700
on Google Play.

00:01:37.700 --> 00:01:39.580
The setup process
is asynchronous,

00:01:39.580 --> 00:01:42.310
and you must implement a
BillingClientStateListener

00:01:42.310 --> 00:01:45.850
to receive a callback once
the setup is completed.

00:01:45.850 --> 00:01:48.940
Overwrite the onBillingServices
connected callback method

00:01:48.940 --> 00:01:50.980
and implement your
own retry policy

00:01:50.980 --> 00:01:53.440
to handle lost connections
with in-app billing service,

00:01:53.440 --> 00:01:55.900
in the case the client
loses connection.

00:01:55.900 --> 00:01:58.180
For example, the Play
Billing Library client

00:01:58.180 --> 00:02:00.670
may lose connection if
the Play Store Service

00:02:00.670 --> 00:02:02.200
is updating in the background.

00:02:02.200 --> 00:02:06.630
You can check the full sample
code in our documentation.

00:02:06.630 --> 00:02:08.699
With your app connected
to Google Play,

00:02:08.699 --> 00:02:11.790
you can state sending
requests for in-app products.

00:02:11.790 --> 00:02:13.830
Let's start by listing
the products available

00:02:13.830 --> 00:02:16.560
for purchase, executing
the asynchronous method,

00:02:16.560 --> 00:02:19.350
querySkuDetailsAsync.

00:02:19.350 --> 00:02:22.680
To make a request using
querySkuDetailsAsync,

00:02:22.680 --> 00:02:25.320
you have to specify
the purchase type--

00:02:25.320 --> 00:02:28.080
in this case, SkuType.INAPP--

00:02:28.080 --> 00:02:31.080
and a list of
product ID strings,

00:02:31.080 --> 00:02:35.580
where each record is a product
ID for a purchasable item.

00:02:35.580 --> 00:02:37.740
These product IDs
were defined by you

00:02:37.740 --> 00:02:40.080
when you created the product
list on the Google Play

00:02:40.080 --> 00:02:41.040
Console.

00:02:41.040 --> 00:02:43.590
For more information about
creating a product list,

00:02:43.590 --> 00:02:46.350
see Administering
In-App Billing.

00:02:46.350 --> 00:02:48.370
You must also
specify a listener,

00:02:48.370 --> 00:02:51.510
which implements the
SkuDetailsResponseListener

00:02:51.510 --> 00:02:56.220
interface that overwrites the
onSkuDetailsResponse method

00:02:56.220 --> 00:02:59.820
to handle the method result.
Call the ResponseCode

00:02:59.820 --> 00:03:02.370
method on the
SkuDetailsResult object

00:03:02.370 --> 00:03:04.050
to check for the response code.

00:03:04.050 --> 00:03:07.080
The response code should
be BillingResponse.OK

00:03:07.080 --> 00:03:09.600
if the request
finishes successfully.

00:03:09.600 --> 00:03:11.190
To view all the
possible response

00:03:11.190 --> 00:03:15.210
codes from Google Play, see
Play Billing Library Reference.

00:03:15.210 --> 00:03:17.700
To retrieve the list
of SkuDetails objects,

00:03:17.700 --> 00:03:19.970
call the
getSkuDetailsList method

00:03:19.970 --> 00:03:22.560
from the
SkuDetailsResult. You can

00:03:22.560 --> 00:03:25.920
call a variety of methods
on SkuDetails objects

00:03:25.920 --> 00:03:28.860
to view relevant
information about each item,

00:03:28.860 --> 00:03:31.950
such as its price
or description.

00:03:31.950 --> 00:03:34.260
Of course, being able
to just list products

00:03:34.260 --> 00:03:36.210
doesn't lead to profit.

00:03:36.210 --> 00:03:38.460
To start a purchase
request from your app,

00:03:38.460 --> 00:03:40.410
call the
launchBillingFlow method

00:03:40.410 --> 00:03:43.860
on the Play Billing Library
client from the UI thread.

00:03:43.860 --> 00:03:45.930
Pass a reference to
the billingFlowParams

00:03:45.930 --> 00:03:48.440
object that contains the
relevant data to complete

00:03:48.440 --> 00:03:50.250
the purchase, such
as the product

00:03:50.250 --> 00:03:52.800
ID of an item and
the purchase type.

00:03:52.800 --> 00:03:55.950
In this case, SkuType.INAPP.

00:03:55.950 --> 00:03:58.020
To get an instance of
Billing Flow Params,

00:03:58.020 --> 00:04:00.660
use the Billing Flow
Params Builder class.

00:04:00.660 --> 00:04:02.230
Calling the
launchBillingFlow method

00:04:02.230 --> 00:04:05.430
displays a Google Pay
UI purchase screen.

00:04:05.430 --> 00:04:07.530
Google Play provides
an interface for users

00:04:07.530 --> 00:04:09.900
to enter their payment method.

00:04:09.900 --> 00:04:12.810
As mentioned earlier, when
the user finishes a process,

00:04:12.810 --> 00:04:15.300
Google Play calls the
onPurchasesUpdated method

00:04:15.300 --> 00:04:18.570
on the listener that implements
the PurchasesUpdatedListener

00:04:18.570 --> 00:04:19.980
interface.

00:04:19.980 --> 00:04:22.740
In this method, each purchase
will be an item on a list,

00:04:22.740 --> 00:04:24.340
as you can see here.

00:04:24.340 --> 00:04:26.870
When you receive the purchase
response from Google Play,

00:04:26.870 --> 00:04:29.760
perform a secure validation
in your own account.

00:04:29.760 --> 00:04:33.070
Don't trust the client, since an
Android app could be decompiled

00:04:33.070 --> 00:04:36.780
and your security checks
replaced with stubs.

00:04:36.780 --> 00:04:38.990
To retrieve the history
of user purchase,

00:04:38.990 --> 00:04:41.960
call the queryPurchases method
on the Play Billing Library

00:04:41.960 --> 00:04:43.310
client.

00:04:43.310 --> 00:04:45.370
The Google Play service
returns the purchase

00:04:45.370 --> 00:04:47.410
made by the user
account associated

00:04:47.410 --> 00:04:48.970
with the app installed.

00:04:48.970 --> 00:04:51.690
If the request is successful,
the Play Billing Library

00:04:51.690 --> 00:04:55.210
stores the query result in a
list of purchasable objects.

00:04:55.210 --> 00:04:58.480
To retrieve the list, call
the getPurchasesList method

00:04:58.480 --> 00:05:01.220
on the PurchaseResult object.

00:05:01.220 --> 00:05:04.380
The Purchase object has methods
to view relevant information

00:05:04.380 --> 00:05:08.300
about the item, such as
the purchase date or time.

00:05:08.300 --> 00:05:11.210
Google Play prevents the user
from owning more than one copy

00:05:11.210 --> 00:05:13.610
of an item by product ID.

00:05:13.610 --> 00:05:16.970
The item must be consumed before
it can be purchased again.

00:05:16.970 --> 00:05:19.840
Your app controls how
items are consumed.

00:05:19.840 --> 00:05:22.520
To consume items, you
first implement an instance

00:05:22.520 --> 00:05:26.930
of ConsumeResponseListener to
handle the consumption result.

00:05:26.930 --> 00:05:30.050
Then you call the consumeAsync
method on the Play Billing

00:05:30.050 --> 00:05:32.540
Library client, passing the
identifying purchaseToken

00:05:32.540 --> 00:05:34.060
string value.

00:05:34.060 --> 00:05:37.040
If the response code
in onConsumeFinished

00:05:37.040 --> 00:05:39.230
from your
ConsumeResponseListener

00:05:39.230 --> 00:05:42.530
is billing OK, it's time to
call a method that implements

00:05:42.530 --> 00:05:45.710
the logic in your app to
update the player's inventory

00:05:45.710 --> 00:05:48.020
or release credits to be used.

00:05:48.020 --> 00:05:50.810
Another great feature
covered by Play Billing API

00:05:50.810 --> 00:05:52.190
is subscriptions.

00:05:52.190 --> 00:05:55.280
But before launching the
billing flow for subscriptions,

00:05:55.280 --> 00:05:57.650
call the
isFeatureSupported method

00:05:57.650 --> 00:05:59.380
on the Play Billing
Library client

00:05:59.380 --> 00:06:02.330
to check that the device
supports subscriptions

00:06:02.330 --> 00:06:05.605
with the type as
featureType.SUBSCRIPTIONS.

00:06:05.605 --> 00:06:07.820
Purchasing or renewing
a subscription

00:06:07.820 --> 00:06:11.120
is similar to launching the
purchase flow for a product.

00:06:11.120 --> 00:06:15.000
You just set the product type
to SkuType.SUBS and the product

00:06:15.000 --> 00:06:19.200
ID of the subscription before
you call launchBillingFlow.

00:06:19.200 --> 00:06:21.740
If the user is changing
a subscription option,

00:06:21.740 --> 00:06:23.960
you must also pass
the product IDs

00:06:23.960 --> 00:06:26.660
for the subscription
items you are replacing

00:06:26.660 --> 00:06:31.040
in the BillingFlowParams object
using the addOldSku method.

00:06:31.040 --> 00:06:33.590
You can create an instance
of BillingFlowParams

00:06:33.590 --> 00:06:36.230
using the BillingFlowParams
Builder class.

00:06:36.230 --> 00:06:38.450
Just as in purchase,
Google Play returns

00:06:38.450 --> 00:06:40.030
the result of the
operation using

00:06:40.030 --> 00:06:42.470
the onPurchasesUpdated callback.

00:06:42.470 --> 00:06:45.200
This library is designed and
maintained by our engineers,

00:06:45.200 --> 00:06:48.625
and we make plans to keep it up
to date with the latest In-App

00:06:48.625 --> 00:06:51.110
Billing API and Google Play app.

00:06:51.110 --> 00:06:53.600
If you want to see details of
how to use the Play Billing

00:06:53.600 --> 00:06:57.290
Library, including support for
Android Wear and Android TV,

00:06:57.290 --> 00:07:00.400
check the refreshed version
of the Trivial Drive sample.

00:07:00.400 --> 00:07:02.120
We look forward to
hearing your feedback

00:07:02.120 --> 00:07:03.380
about this new library.

00:07:03.380 --> 00:07:04.550
Thanks for watching.

00:07:04.550 --> 00:07:05.050
Bye.

00:07:05.050 --> 00:07:07.800
[MUSIC PLAYING]

