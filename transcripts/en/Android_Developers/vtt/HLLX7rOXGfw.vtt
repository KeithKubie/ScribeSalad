WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670
JUSTIN BROUGHTON: In
Firebase Test Lab,

00:00:01.670 --> 00:00:05.670
you use real and virtual
devices to test your app.

00:00:05.670 --> 00:00:08.630
These devices run in
a Google data center.

00:00:08.630 --> 00:00:12.410
They contain the latest APIs
and have customizable locale

00:00:12.410 --> 00:00:15.650
settings, enabling you to
test your app as people

00:00:15.650 --> 00:00:18.590
around the world would use it.

00:00:18.590 --> 00:00:20.660
You can let Test
Lab test your app

00:00:20.660 --> 00:00:23.540
for you, which is
called Robo testing,

00:00:23.540 --> 00:00:26.540
or you can create Espresso
Instrumentation tests

00:00:26.540 --> 00:00:30.260
in Android Studio and
have Test Lab run them.

00:00:30.260 --> 00:00:34.530
I will look at both of these
in more detail shortly.

00:00:34.530 --> 00:00:37.820
You can also run Robo tests
from the Google Play Console

00:00:37.820 --> 00:00:40.760
pre-launch report each
time you upload an app

00:00:40.760 --> 00:00:44.150
to the closed or
open test tracks.

00:00:44.150 --> 00:00:47.750
The pre-launch report offers
the same Robo test features

00:00:47.750 --> 00:00:49.910
as Firebase Test Lab.

00:00:49.910 --> 00:00:52.130
The benefit of Test
Lab comes from being

00:00:52.130 --> 00:00:56.120
able to run tests on a wider
range of devices with more

00:00:56.120 --> 00:01:00.080
options, as well as to be able
to run your own instrumentation

00:01:00.080 --> 00:01:02.380
tests.

00:01:02.380 --> 00:01:06.120
OK, let's take a close
look at Robo tests.

00:01:06.120 --> 00:01:09.270
When you run a Robo test,
an application crawler

00:01:09.270 --> 00:01:12.780
analyzes the structure
of your app's UI

00:01:12.780 --> 00:01:14.910
and then explores
it methodically,

00:01:14.910 --> 00:01:17.640
simulating user activity.

00:01:17.640 --> 00:01:22.170
Robo tests capture log
files, performance data,

00:01:22.170 --> 00:01:25.770
screenshots of unique screens,
as well as annotated video

00:01:25.770 --> 00:01:29.460
to show you the simulated
user actions it performed.

00:01:29.460 --> 00:01:32.430
These logs and performance
data and screenshots and videos

00:01:32.430 --> 00:01:35.340
can help you determine
the cause of crashes

00:01:35.340 --> 00:01:39.090
and find issues
with your app's UI.

00:01:39.090 --> 00:01:42.480
You can also use Robo
tests to validate bug fixes

00:01:42.480 --> 00:01:44.160
and test for regressions.

00:01:44.160 --> 00:01:47.910
This is because Robo testing
simulates the same user

00:01:47.910 --> 00:01:53.470
activities in the same order
each time it tests your app.

00:01:53.470 --> 00:01:55.620
There is also an option
to control Robo tests.

00:01:55.620 --> 00:01:59.070
For example, you may want to
test a common user journey

00:01:59.070 --> 00:02:02.610
or start the crawler
at a specific screen.

00:02:02.610 --> 00:02:05.430
You do this using a Robo script.

00:02:05.430 --> 00:02:08.759
You create these scripts
in Android Studio, simply

00:02:08.759 --> 00:02:11.500
select Firebase
from the tools menu,

00:02:11.500 --> 00:02:16.080
then click Record Robo Script,
and use it to guide Robo test.

00:02:16.080 --> 00:02:21.310
Now record and upload your
scripts to Firebase Test Lab.

00:02:21.310 --> 00:02:24.020
In addition to a regular crawl
from the beginning of your app,

00:02:24.020 --> 00:02:27.110
you can test up to
three deep links.

00:02:27.110 --> 00:02:29.560
Here, the crawler
follows the link

00:02:29.560 --> 00:02:33.160
and then exercises your app
for an additional 30 seconds,

00:02:33.160 --> 00:02:35.350
reporting on anything
it finds in the same way

00:02:35.350 --> 00:02:38.260
as it does for the main test.

00:02:38.260 --> 00:02:42.000
Robo test can also sign into
your app using either a Google

00:02:42.000 --> 00:02:46.150
login or your own custom
login credentials.

00:02:46.150 --> 00:02:49.870
Robo tests are a great way to
get started with app testing

00:02:49.870 --> 00:02:52.600
with minimal effort
on your part.

00:02:52.600 --> 00:02:56.740
However, for a truly
high quality app,

00:02:56.740 --> 00:02:59.530
you will almost
certainly need to create

00:02:59.530 --> 00:03:02.290
your own instrumentation
test which Firebase Test

00:03:02.290 --> 00:03:05.100
Lab can then run for you.

00:03:05.100 --> 00:03:07.280
You can create these test
scripts in Android Studio

00:03:07.280 --> 00:03:09.710
either manually,
or you can record

00:03:09.710 --> 00:03:13.550
them using Record Espresso
Test on the run menu.

00:03:13.550 --> 00:03:16.970
You record your test script
by interacting with your app,

00:03:16.970 --> 00:03:20.880
when done saving your
test script locally.

00:03:20.880 --> 00:03:22.860
For more details on
recording test scripts,

00:03:22.860 --> 00:03:25.800
check out the Android
Tool Time video,

00:03:25.800 --> 00:03:28.590
Create UI Tests with
Espresso Test Recorder.

00:03:28.590 --> 00:03:32.410
There is a link in
the video details.

00:03:32.410 --> 00:03:34.240
To get the most out
of Espresso tests,

00:03:34.240 --> 00:03:36.970
the key is to
modularize your tests,

00:03:36.970 --> 00:03:40.510
creating test snippets
for the functions used

00:03:40.510 --> 00:03:43.810
in the majority of your
tests, such as logging in

00:03:43.810 --> 00:03:45.910
or filling out a search form.

00:03:45.910 --> 00:03:48.700
You can then invoke these
snippets from your test scripts

00:03:48.700 --> 00:03:51.250
whenever you need
these common functions.

00:03:51.250 --> 00:03:55.720
Then as you update your app,
use Espresso Test Recorder

00:03:55.720 --> 00:04:00.590
to quickly rerecord the snippets
where there have been changes.

00:04:00.590 --> 00:04:02.872
You can then run these
test scripts locally

00:04:02.872 --> 00:04:05.330
or load the suite of tests into
your continuous integration

00:04:05.330 --> 00:04:08.090
server and get the
assurance that you haven't

00:04:08.090 --> 00:04:12.440
broken your app at each update.

00:04:12.440 --> 00:04:14.750
And of course, you can
upload the test scripts

00:04:14.750 --> 00:04:16.579
to Firebase Test Lab.

00:04:16.579 --> 00:04:18.410
You can then choose
to run the tests

00:04:18.410 --> 00:04:21.709
on a selection of over 50
virtual and physical devices,

00:04:21.709 --> 00:04:26.170
many of them available with
a range of Android versions.

00:04:26.170 --> 00:04:28.390
Other options include
testing your app

00:04:28.390 --> 00:04:34.090
in different languages or
screen orientations and more.

00:04:34.090 --> 00:04:36.510
You can also run your
tests in Firebase Test

00:04:36.510 --> 00:04:39.120
Lab from your continuous
integration server.

00:04:39.120 --> 00:04:41.010
You can find details
on how to do this

00:04:41.010 --> 00:04:45.610
from the link in the
video description.

00:04:45.610 --> 00:04:48.220
Espresso Test
Recorder enables you

00:04:48.220 --> 00:04:50.230
to quickly and
easily create tests

00:04:50.230 --> 00:04:52.775
for all parts of your app.

00:04:52.775 --> 00:04:55.150
You can then use the features
of a continuous integration

00:04:55.150 --> 00:04:58.120
server, the pre-launch
report, and Firebase Test Lab

00:04:58.120 --> 00:05:01.120
to automate your testing,
improving your app

00:05:01.120 --> 00:05:05.650
quality, while freeing your
time to focus on development.

00:05:05.650 --> 00:05:08.470
To find out about this
and other features

00:05:08.470 --> 00:05:11.480
and get tips to grow your
app or game business,

00:05:11.480 --> 00:05:15.310
check out the Playbook app,
available on Google Play.

00:05:15.310 --> 00:05:17.400
Thanks for watching.

