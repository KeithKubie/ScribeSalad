WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.191
[MUSIC PLAYING]

00:00:02.690 --> 00:00:04.380
Services are an
integral component

00:00:04.380 --> 00:00:06.260
for almost every
Android application,

00:00:06.260 --> 00:00:07.830
but the functionality
they provide

00:00:07.830 --> 00:00:10.262
comes with a drain on
battery and system resources.

00:00:10.262 --> 00:00:11.880
And if you're not
paying attention,

00:00:11.880 --> 00:00:14.330
they can get a little
greedy with that, too.

00:00:14.330 --> 00:00:15.910
My name is Colt
McAnlis, and using

00:00:15.910 --> 00:00:17.920
services in the most
efficient way possible

00:00:17.920 --> 00:00:19.620
means killing them
off the right way

00:00:19.620 --> 00:00:21.700
and sometimes not
even using them.

00:00:21.700 --> 00:00:24.289
Remember, services are how
an application indicates

00:00:24.289 --> 00:00:26.000
to the operating
system that it needs

00:00:26.000 --> 00:00:29.100
to perform a longer
running operation outside

00:00:29.100 --> 00:00:31.060
of normal activity UI flow.

00:00:31.060 --> 00:00:32.780
Basically, you can
do work and don't

00:00:32.780 --> 00:00:34.867
have to wait for
input events to do it.

00:00:34.867 --> 00:00:36.860
Which is all great, but
there's a few things

00:00:36.860 --> 00:00:38.030
you need to be aware of.

00:00:38.030 --> 00:00:40.120
Firstly, that from a
system-level, services

00:00:40.120 --> 00:00:41.090
aren't free.

00:00:41.090 --> 00:00:44.220
Creating, scheduling, running,
and even destroying services

00:00:44.220 --> 00:00:46.340
costs time and memory.

00:00:46.340 --> 00:00:48.450
Secondly, services
run on the UI thread

00:00:48.450 --> 00:00:50.160
of your application,
which is trying

00:00:50.160 --> 00:00:52.447
to update the screen every
16 milliseconds or so.

00:00:52.447 --> 00:00:54.890
This means if you're doing a
bunch of work in a service,

00:00:54.890 --> 00:00:57.090
you can easily miss that
16 millisecond window

00:00:57.090 --> 00:00:59.080
and end up dropping a frame.

00:00:59.080 --> 00:01:01.035
Now, let me be very
clear about this.

00:01:01.035 --> 00:01:05.030
In 90% of the cases, the best
way to avoid these issues

00:01:05.030 --> 00:01:06.860
is to not use a service.

00:01:06.860 --> 00:01:08.360
In fact, there's a
lot of situations

00:01:08.360 --> 00:01:11.470
where services are being used
when they don't need to be.

00:01:11.470 --> 00:01:14.640
For example, using a service
to listen and respond to events

00:01:14.640 --> 00:01:16.390
is way overkill.

00:01:16.390 --> 00:01:20.470
APIs like BroadcastReceiver can
still respond fine to events

00:01:20.470 --> 00:01:22.610
even when your app is
running in the background.

00:01:22.610 --> 00:01:24.880
This goes double for
spinning up a service just

00:01:24.880 --> 00:01:26.040
to poll a server for data.

00:01:26.040 --> 00:01:27.820
Again, bad idea.

00:01:27.820 --> 00:01:30.590
You should be leveraging
Google Cloud Messaging instead

00:01:30.590 --> 00:01:33.870
to allow the server to push
updates to you which you can

00:01:33.870 --> 00:01:36.140
still receive in your app
directly without needing

00:01:36.140 --> 00:01:37.620
a service running.

00:01:37.620 --> 00:01:39.330
And if you know
that your work is

00:01:39.330 --> 00:01:41.217
going to be happening
in the background,

00:01:41.217 --> 00:01:43.300
then it doesn't make sense
to bother the framework

00:01:43.300 --> 00:01:45.270
to be scheduling
services for you.

00:01:45.270 --> 00:01:47.830
Instead, try using an
actual threading setup,

00:01:47.830 --> 00:01:50.310
like IntentServices, or
[? HandlerThreads, ?]

00:01:50.310 --> 00:01:52.512
or Async Task
Loaders, all of which

00:01:52.512 --> 00:01:54.720
will get you the same result
but with less scheduling

00:01:54.720 --> 00:01:56.386
overhead on the system,
and actually get

00:01:56.386 --> 00:01:57.880
your things off the UI thread.

00:01:57.880 --> 00:01:59.389
Which is a bonus, as well.

00:01:59.389 --> 00:02:01.180
Basically, there's lots
of options provided

00:02:01.180 --> 00:02:03.860
by the framework to do various
types of asynchronous work

00:02:03.860 --> 00:02:07.000
without needing to resort to the
overhead that services demand.

00:02:07.000 --> 00:02:10.479
So if you can, try to leverage
one of those solutions first.

00:02:10.479 --> 00:02:13.210
But if you've exhausted
all of those options

00:02:13.210 --> 00:02:15.730
and you still find that
a service is the only way

00:02:15.730 --> 00:02:17.330
to solve the problem,
then you need

00:02:17.330 --> 00:02:20.260
to adhere to the one
primary rule of services--

00:02:20.260 --> 00:02:23.570
do not let services live
longer than they are needed.

00:02:23.570 --> 00:02:26.700
You've got to remember there's
two distinct types of services

00:02:26.700 --> 00:02:29.470
with two distinct ways
to terminate them.

00:02:29.470 --> 00:02:33.210
See, started services stay
alive until they are explicitly

00:02:33.210 --> 00:02:36.550
stopped with a stopSelf
or stopService call,

00:02:36.550 --> 00:02:38.120
or your app ends.

00:02:38.120 --> 00:02:39.560
Until then, the
service just sits

00:02:39.560 --> 00:02:42.860
around waiting to process
things and eating up resources.

00:02:42.860 --> 00:02:45.840
Now, a bound service,
on the other hand,

00:02:45.840 --> 00:02:47.820
stays around and
consumes system resources

00:02:47.820 --> 00:02:50.900
until all of its clients
unbind from it by calling

00:02:50.900 --> 00:02:53.630
unbindService or your app ends.

00:02:53.630 --> 00:02:56.420
Now, mixing these two
services is useful

00:02:56.420 --> 00:02:58.740
but it's a common
source of errors.

00:02:58.740 --> 00:03:00.420
For example, calling
[? startService ?]

00:03:00.420 --> 00:03:02.050
to create your service
and then calling

00:03:02.050 --> 00:03:05.090
bindService on it for
IPC communication.

00:03:05.090 --> 00:03:06.570
The problem here
is that even when

00:03:06.570 --> 00:03:08.800
the client calls
unbindService, it

00:03:08.800 --> 00:03:10.880
won't terminate yet
because it's waiting around

00:03:10.880 --> 00:03:13.590
for a stopService to be called.

00:03:13.590 --> 00:03:16.580
The gist is this-- you must get
your pairing of start, stop,

00:03:16.580 --> 00:03:20.120
bind, and unbind right before
this service will actually

00:03:20.120 --> 00:03:23.090
terminate, and basically,
that's the trick with services.

00:03:23.090 --> 00:03:24.450
Avoid them if you can.

00:03:24.450 --> 00:03:26.669
And if you are using them,
make sure that you're not

00:03:26.669 --> 00:03:28.710
letting them ramble off
into the weeds for longer

00:03:28.710 --> 00:03:29.580
than they should be.

00:03:29.580 --> 00:03:31.840
And if you have a suspicion
that your services might

00:03:31.840 --> 00:03:35.810
be doing that, Systrace
is a great visual tool

00:03:35.810 --> 00:03:37.890
to help you see where
your system time is going

00:03:37.890 --> 00:03:40.204
and what apps are
responsible for it.

00:03:40.204 --> 00:03:42.370
And that's what Android
Performance Patterns are all

00:03:42.370 --> 00:03:44.411
about-- making sure you're
doing the right things

00:03:44.411 --> 00:03:47.521
at the right times so that you
don't waste resources or perf

00:03:47.521 --> 00:03:48.480
cycles.

00:03:48.480 --> 00:03:49.950
Which is why you should check
out the rest of the Android

00:03:49.950 --> 00:03:51.158
Performance Patterns content.

00:03:51.158 --> 00:03:54.080
And don't forget to join our
Google+ community for tips from

00:03:54.080 --> 00:03:55.910
other great developers.

00:03:55.910 --> 00:03:58.880
So keep calm, profile your
code, and always remember

00:03:58.880 --> 00:03:59.450
perf matters.

00:03:59.450 --> 00:04:02.200
[MUSIC PLAYING]

