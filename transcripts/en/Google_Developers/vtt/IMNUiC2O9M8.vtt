WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:02.185
SPEAKER 1: So the
first of those is Will.

00:00:02.185 --> 00:00:05.552
Will, you're one of the first
uses of Dart internally, right?

00:00:05.552 --> 00:00:06.760
WILL EKIEL: My team was, yes.

00:00:06.760 --> 00:00:07.606
SPEAKER 1: Yes.

00:00:07.606 --> 00:00:11.700
Let's talk about how he uses
Dart and Angular and Flutter

00:00:11.700 --> 00:00:13.270
inside Google to
build real things.

00:00:13.270 --> 00:00:14.090
WILL EKIEL: This is synergy.

00:00:14.090 --> 00:00:14.881
SPEAKER 1: Synergy.

00:00:14.881 --> 00:00:16.160
[LAUGHTER]

00:00:16.160 --> 00:00:17.570
WILL EKIEL: Servers.

00:00:17.570 --> 00:00:23.110
[SPEAKING GERMAN] Any
Germans in the audience?

00:00:23.110 --> 00:00:23.730
One!

00:00:23.730 --> 00:00:24.110
Oh, OK.

00:00:24.110 --> 00:00:24.440
Three.

00:00:24.440 --> 00:00:25.090
OK.

00:00:25.090 --> 00:00:25.960
All right.

00:00:25.960 --> 00:00:28.290
Thanks for hosting us.

00:00:28.290 --> 00:00:30.060
OK.

00:00:30.060 --> 00:00:34.540
I'm going to talk about one
of the largest and earliest

00:00:34.540 --> 00:00:37.390
applications we've had
built in Dart at Google.

00:00:37.390 --> 00:00:38.890
We don't really
talk a lot about it.

00:00:38.890 --> 00:00:40.431
Because it's an
internal application,

00:00:40.431 --> 00:00:43.650
you wouldn't be able to see
it unless you work at Google.

00:00:43.650 --> 00:00:47.604
It's the system that
we use to power sales.

00:00:47.604 --> 00:00:48.520
My name is Will Ekiel.

00:00:48.520 --> 00:00:51.000
I'm an engineering
manager, and I

00:00:51.000 --> 00:00:56.780
manage the team that builds
the UI for mobile and for web.

00:00:56.780 --> 00:00:58.890
Any other managers
in the audience?

00:00:58.890 --> 00:00:59.770
Any managers?

00:00:59.770 --> 00:01:00.270
One?

00:01:00.270 --> 00:01:00.770
Two?

00:01:00.770 --> 00:01:01.503
Oh, yeah.

00:01:04.269 --> 00:01:06.960
Well, I'm going to
tell you a little

00:01:06.960 --> 00:01:10.800
about perspective of managing
a project built on Dart,

00:01:10.800 --> 00:01:12.380
and some of the
things that might

00:01:12.380 --> 00:01:14.620
be interesting to your
manager-- I don't know.

00:01:14.620 --> 00:01:15.480
OK.

00:01:15.480 --> 00:01:17.420
So let me tell you
a little background.

00:01:17.420 --> 00:01:21.700
So if you have a product
that you need to sell,

00:01:21.700 --> 00:01:25.280
you're probably going
to need salespeople.

00:01:25.280 --> 00:01:28.290
And if it's a successful
product, a big company,

00:01:28.290 --> 00:01:30.890
you're going to have a very
big team of sales people

00:01:30.890 --> 00:01:34.950
and they're going to need some
software to stay organized.

00:01:34.950 --> 00:01:38.020
So Google is just
like anybody else.

00:01:38.020 --> 00:01:40.750
We use a CRM system, which is
called customer relationship

00:01:40.750 --> 00:01:47.250
manager-- and that's what keeps
the sales organization running.

00:01:47.250 --> 00:01:49.940
Just bear with me very quick.

00:01:49.940 --> 00:01:53.090
The CRM system is supposed to
make the salespeople smarter,

00:01:53.090 --> 00:01:56.090
it lets them see who
the customers are,

00:01:56.090 --> 00:02:00.800
what they need-- let's them
understand what kind of revenue

00:02:00.800 --> 00:02:02.740
they get, where
it's coming from.

00:02:02.740 --> 00:02:04.710
Let's them plan jointly
with the customers.

00:02:04.710 --> 00:02:06.440
So for example if
a customer needs

00:02:06.440 --> 00:02:09.259
to introduce a new video
game or a new movie,

00:02:09.259 --> 00:02:13.200
our sales people can work with
them about how to do that.

00:02:13.200 --> 00:02:14.980
And then, it let's
them collaborate.

00:02:14.980 --> 00:02:19.000
Because a lot of the
products are complex,

00:02:19.000 --> 00:02:20.920
you need to sell
them in teams, so you

00:02:20.920 --> 00:02:24.650
need to be able to
work with one another.

00:02:24.650 --> 00:02:28.130
Now, unlike other
companies, Google

00:02:28.130 --> 00:02:33.790
has its own CRM system--
which is the system I work on.

00:02:33.790 --> 00:02:36.840
And why would we do that?

00:02:36.840 --> 00:02:42.444
Well, it's really important for
us to have a very fast system.

00:02:42.444 --> 00:02:44.610
We have a lot of data and
we need to crunch it very,

00:02:44.610 --> 00:02:45.151
very quickly.

00:02:45.151 --> 00:02:48.760
And we want to show a lot
of data in a very simplified

00:02:48.760 --> 00:02:50.560
manner, very quickly
to our sales people.

00:02:50.560 --> 00:02:53.399
So it needs to be
very, very fast.

00:02:53.399 --> 00:02:54.940
We like to stay on
top of innovations

00:02:54.940 --> 00:02:58.160
and be in control of
rolling things out

00:02:58.160 --> 00:02:59.899
as quickly as possible.

00:02:59.899 --> 00:03:01.440
We have a lot of
other systems, so we

00:03:01.440 --> 00:03:04.360
would like it to be very deeply
integrated with everything else

00:03:04.360 --> 00:03:06.350
that's going on.

00:03:06.350 --> 00:03:08.755
Update real quick if
something changes.

00:03:08.755 --> 00:03:10.130
And the other
thing is we want it

00:03:10.130 --> 00:03:13.250
to be tailored to our values,
and the way that we sell,

00:03:13.250 --> 00:03:17.900
and our work flows-- and want
to be in control of that.

00:03:17.900 --> 00:03:20.885
So give you a few numbers.

00:03:20.885 --> 00:03:22.260
This is a big
application or not?

00:03:22.260 --> 00:03:25.250
I don't know, is it important?

00:03:25.250 --> 00:03:28.720
That's not a number, it's
a order of magnitude.

00:03:28.720 --> 00:03:29.840
But a lot of revenue.

00:03:29.840 --> 00:03:32.680
I can't say how much,
but a lot of money

00:03:32.680 --> 00:03:36.790
is managed through the system--
so it's a very important system

00:03:36.790 --> 00:03:45.318
and it's written 100% in
Dart-- the front end at least.

00:03:45.318 --> 00:03:47.190
[LAUGHTER]

00:03:50.940 --> 00:03:53.230
It's been in production
for three years.

00:03:53.230 --> 00:03:55.970
It's been serving live
production traffic, mission

00:03:55.970 --> 00:04:00.440
critical three years ago.

00:04:00.440 --> 00:04:02.370
As of today, we
have 30 engineers

00:04:02.370 --> 00:04:04.610
whose only job is to
write Dart code every day.

00:04:07.390 --> 00:04:13.430
Half a million lines of Dart
code, and about 40% of that

00:04:13.430 --> 00:04:17.620
is shared with other
applications, such as AdSense,

00:04:17.620 --> 00:04:19.899
that you heard
yesterday-- AdWords,

00:04:19.899 --> 00:04:25.680
and the AngularDart widgets
that Ted talked about.

00:04:25.680 --> 00:04:26.730
What else?

00:04:26.730 --> 00:04:28.651
All the code is
strong mode clean.

00:04:31.360 --> 00:04:35.810
We have 800 AngularDart
2.0 components.

00:04:35.810 --> 00:04:38.220
AngularDart 2.0 launched
yesterday-- so no,

00:04:38.220 --> 00:04:40.440
we did not write all
of that in 24 hours.

00:04:43.130 --> 00:04:45.630
We've been in production
serving again,

00:04:45.630 --> 00:04:48.200
live mission critical
production traffic

00:04:48.200 --> 00:04:51.720
for six months with
AngularDart 2.0.

00:04:51.720 --> 00:04:55.150
So when we launched
it, we've already

00:04:55.150 --> 00:04:57.800
dog food-ed it
ourselves quite a bit.

00:05:00.540 --> 00:05:03.040
All right.

00:05:03.040 --> 00:05:08.460
This is kind of what it looks
like minus the numbers, which

00:05:08.460 --> 00:05:11.010
are confidential.

00:05:11.010 --> 00:05:13.320
But I can kind of show you
that it's a complex UI.

00:05:13.320 --> 00:05:15.850
There are dozens and dozens
and dozens of views like this.

00:05:15.850 --> 00:05:16.350
OK?

00:05:16.350 --> 00:05:18.854
And lots of components.

00:05:18.854 --> 00:05:21.020
And all of these little
panels are reusable widgets.

00:05:21.020 --> 00:05:22.978
And every single thing
is an Angular component,

00:05:22.978 --> 00:05:25.850
because we like
it to be reusable.

00:05:25.850 --> 00:05:28.300
So there's a lot
of stuff going on.

00:05:28.300 --> 00:05:33.280
And this whole thing needs
to build in under one second.

00:05:33.280 --> 00:05:37.210
It has to make RPCs too, so
minus the cost of the RPCs--

00:05:37.210 --> 00:05:42.410
so it has to be very, very
performant, which is tricky.

00:05:42.410 --> 00:05:47.090
So 3 and 1/2 years ago,
we had this legacy system

00:05:47.090 --> 00:05:50.170
that had reached sort of
the end of its evolution

00:05:50.170 --> 00:05:54.520
and we had an opportunity
to start afresh.

00:05:54.520 --> 00:05:58.480
So we looked around at a
bunch of different things--

00:05:58.480 --> 00:05:59.654
and this was before my time.

00:05:59.654 --> 00:06:01.320
I've been in this
project for two years,

00:06:01.320 --> 00:06:03.630
there was another team
that was here before.

00:06:03.630 --> 00:06:07.320
And we looked around all
the other possibilities

00:06:07.320 --> 00:06:11.190
and Dart looked very
appealing for several reasons.

00:06:11.190 --> 00:06:13.850
Dart could scale.

00:06:13.850 --> 00:06:16.942
Because we knew it was
going to be a large team.

00:06:16.942 --> 00:06:18.900
We knew it was going to
be a large application,

00:06:18.900 --> 00:06:20.775
because the previous
application was a beast.

00:06:23.290 --> 00:06:27.180
We knew that Dart was promised
to be very, very productive,

00:06:27.180 --> 00:06:29.994
as we've heard here already.

00:06:29.994 --> 00:06:31.410
Productivity was
really important,

00:06:31.410 --> 00:06:34.785
because our build times had
gotten very slow, for example.

00:06:38.600 --> 00:06:41.579
We wanted a language that had
good libraries to begin with,

00:06:41.579 --> 00:06:43.370
but allowed us to build
a lot of libraries.

00:06:43.370 --> 00:06:45.890
Because we really
wanted to be able to,

00:06:45.890 --> 00:06:48.820
not just build one application,
but build an ecosystem

00:06:48.820 --> 00:06:52.010
and leverage the
investment from building

00:06:52.010 --> 00:06:54.550
one application through all
the other applications, right?

00:06:54.550 --> 00:07:00.600
And you saw the vast amount of
code that we are able to share.

00:07:00.600 --> 00:07:03.690
And last, but not
least it had to be

00:07:03.690 --> 00:07:05.920
easy to learn-- because
we knew that it was going

00:07:05.920 --> 00:07:10.340
to be a large team and it
had to be easy to join people

00:07:10.340 --> 00:07:12.440
to the team.

00:07:12.440 --> 00:07:16.048
Nobody knew this tech, so it
had to be easy to pick it up.

00:07:19.510 --> 00:07:23.920
Well, there's at least one way
of finding out if all of this

00:07:23.920 --> 00:07:28.760
is actually true in practice,
which is to try it out--

00:07:28.760 --> 00:07:34.500
so the team did and
their initial impression

00:07:34.500 --> 00:07:37.350
was that, yes,
everything is true.

00:07:37.350 --> 00:07:40.320
And they launched an
entire CRM in six months,

00:07:40.320 --> 00:07:41.710
starting from nothing.

00:07:41.710 --> 00:07:43.015
[APPLAUSE]

00:07:44.470 --> 00:07:47.800
Thanks to Dart three years ago.

00:07:47.800 --> 00:07:52.530
And that included
porting AngularJS to Dart

00:07:52.530 --> 00:07:55.220
and launching Dart 1.0.

00:07:55.220 --> 00:07:59.580
So yeah, it's very
productive evidently.

00:07:59.580 --> 00:08:01.384
All right.

00:08:01.384 --> 00:08:03.050
You would want to
think that when you're

00:08:03.050 --> 00:08:05.470
done launching something,
that's your architecture

00:08:05.470 --> 00:08:09.430
you can just move on
and stand back in awe.

00:08:09.430 --> 00:08:11.872
But in reality, you
need to keep evolving,

00:08:11.872 --> 00:08:13.830
you need to keep adding
a lot of functionality.

00:08:13.830 --> 00:08:16.870
So in reality, you have people
sticking their hands there

00:08:16.870 --> 00:08:22.400
and trying to evolve your system
without toppling it, right?

00:08:22.400 --> 00:08:25.432
So that brought us to
one of the problems

00:08:25.432 --> 00:08:26.890
that enough you
guys can relate to,

00:08:26.890 --> 00:08:29.170
which is how do you scale
an application after you

00:08:29.170 --> 00:08:30.930
have an initial
launch-- and you need

00:08:30.930 --> 00:08:33.570
to now make it 10 times bigger.

00:08:33.570 --> 00:08:35.299
OK.

00:08:35.299 --> 00:08:38.780
So I'm going to tell a little
bit about some of the scaling

00:08:38.780 --> 00:08:43.539
problems we found with Angular,
which explains why we have

00:08:43.539 --> 00:08:46.510
Angular 2.0 today, for example.

00:08:46.510 --> 00:08:51.050
So how many of you
guys have used Angular?

00:08:51.050 --> 00:08:52.100
A lot?

00:08:52.100 --> 00:08:53.130
OK, cool.

00:08:53.130 --> 00:08:58.530
So Anger 1.0 had this
really awesome feature,

00:08:58.530 --> 00:09:01.230
which is-- well,
Angular in itself

00:09:01.230 --> 00:09:03.120
allows it to do data
bindings declaratively,

00:09:03.120 --> 00:09:06.530
which saves you a ton of code--
it's very, very productive.

00:09:06.530 --> 00:09:09.180
But we were able to do
bi-directional bindings

00:09:09.180 --> 00:09:10.780
and we used a lot of these.

00:09:10.780 --> 00:09:14.990
So we have two things, they
both sync to each other.

00:09:14.990 --> 00:09:17.910
You had a third thing.

00:09:17.910 --> 00:09:21.050
Before you know it, you
end up with one of these.

00:09:21.050 --> 00:09:24.789
Obviously, not with three
things, you would see it.

00:09:24.789 --> 00:09:27.080
But when you have a lot of
them, especially when you're

00:09:27.080 --> 00:09:30.230
adding components
that you didn't write,

00:09:30.230 --> 00:09:32.200
and that not always
run the same way,

00:09:32.200 --> 00:09:36.120
and they make a bunch
of RPCs and so on.

00:09:36.120 --> 00:09:37.660
So we this was one
of the problems

00:09:37.660 --> 00:09:41.510
that we had encountered.

00:09:41.510 --> 00:09:44.840
Angular, it's actually not
as bad as it might seem.

00:09:44.840 --> 00:09:47.930
Angular will run through
the loop several times.

00:09:47.930 --> 00:09:50.630
Eventually, the
model stabilizes.

00:09:50.630 --> 00:09:55.021
You've just wasted a little
bit of CPU, but you chug along.

00:09:55.021 --> 00:09:57.142
After a while, as
the system keeps

00:09:57.142 --> 00:09:58.600
getting bigger and
bigger, it needs

00:09:58.600 --> 00:10:00.330
to run more and
more of these loops.

00:10:00.330 --> 00:10:02.900
Eventually, we were
running 10 of these

00:10:02.900 --> 00:10:04.790
and it was still not
stabilizing, just giving

00:10:04.790 --> 00:10:08.860
up-- so that's a problem.

00:10:08.860 --> 00:10:10.170
Then, another version of this.

00:10:10.170 --> 00:10:14.430
A similar problem is with
uni-directional bindings.

00:10:14.430 --> 00:10:16.750
You have these
hierarchies, right?

00:10:16.750 --> 00:10:21.050
Components nested
within all the way down.

00:10:21.050 --> 00:10:23.070
Again, not with three levels.

00:10:23.070 --> 00:10:27.200
We had 11 levels in our system.

00:10:27.200 --> 00:10:29.460
And before you know
it, I mean, somebody

00:10:29.460 --> 00:10:32.410
has to propagate some
state back all the way up

00:10:32.410 --> 00:10:37.440
and that triggers another
digest and change propagation.

00:10:37.440 --> 00:10:38.393
Same kind of problem.

00:10:41.540 --> 00:10:44.200
For the first kind,
you solve that

00:10:44.200 --> 00:10:46.152
by getting of
bidirectional bindings.

00:10:46.152 --> 00:10:48.110
You need to re-architect
your app a little bit.

00:10:48.110 --> 00:10:52.630
This one-- we came up
with this Event Bus, which

00:10:52.630 --> 00:10:56.810
decouples it and
lets you decide when

00:10:56.810 --> 00:10:59.480
you take the changes-- which is
a little bit if you guys have

00:10:59.480 --> 00:11:04.490
looked at Redux, similar,
kind of directionally

00:11:04.490 --> 00:11:05.116
in the pattern.

00:11:08.280 --> 00:11:12.250
The other thing that
was a big deal was-- I

00:11:12.250 --> 00:11:15.860
mean, how are you going to
build a UI in one second

00:11:15.860 --> 00:11:18.230
when it takes you about 800
milliseconds to do in RPC?

00:11:20.740 --> 00:11:25.050
Well, maybe you can do it
in one second on average.

00:11:25.050 --> 00:11:28.540
If you can do a lot
of caching, you're

00:11:28.540 --> 00:11:33.610
able to build your UI
out of cache data, right?

00:11:33.610 --> 00:11:37.140
So has anybody ever used Streamy
or they know about Streamy,

00:11:37.140 --> 00:11:38.710
the library?

00:11:38.710 --> 00:11:39.210
Yes?

00:11:39.210 --> 00:11:43.040
Well, none of my team.

00:11:43.040 --> 00:11:43.940
OK.

00:11:43.940 --> 00:11:50.650
So this is a library that
some folks in our team

00:11:50.650 --> 00:11:53.650
developed, and it's open source.

00:11:53.650 --> 00:11:56.310
You can play around with
it, it's pretty smart.

00:11:56.310 --> 00:11:59.640
What it does, and
intermediates all your RPCs

00:11:59.640 --> 00:12:04.370
and it catches all
the other responses.

00:12:04.370 --> 00:12:07.370
And if you get a hit, it
gives you the cached data.

00:12:07.370 --> 00:12:10.404
But in the background,
it's still issues the RPC

00:12:10.404 --> 00:12:12.320
and it compares it with
what it just gave you.

00:12:12.320 --> 00:12:16.010
And if it's different, it
gives you a newer version

00:12:16.010 --> 00:12:17.870
of the response.

00:12:17.870 --> 00:12:20.480
So what this means is that the
experience that the user sees,

00:12:20.480 --> 00:12:23.290
is as they're navigating,
they see data that's

00:12:23.290 --> 00:12:24.632
perhaps a little bit stale.

00:12:24.632 --> 00:12:26.590
But depending on your
system, it may or may not

00:12:26.590 --> 00:12:29.389
change that often.

00:12:29.389 --> 00:12:31.430
And still they need to
understand what's going on

00:12:31.430 --> 00:12:33.715
and then, maybe in
a second they see

00:12:33.715 --> 00:12:40.400
like one cell get updated
in the table, which is fine.

00:12:40.400 --> 00:12:44.020
Now, streamy-- that's
what gives it its name--

00:12:44.020 --> 00:12:46.380
is that it leverages
Dart streams, which

00:12:46.380 --> 00:12:49.780
are pretty awesome-- everybody
here is a fan of that.

00:12:49.780 --> 00:12:53.722
You don't have to write your
code that will explicitly

00:12:53.722 --> 00:12:55.680
check in the cache at
every single place, which

00:12:55.680 --> 00:12:58.597
would be like very annoying.

00:12:58.597 --> 00:13:00.430
Well, you can do it
this way or you can just

00:13:00.430 --> 00:13:02.900
listen on the stream.

00:13:02.900 --> 00:13:06.522
And you can either get one
value if there was a cache miss

00:13:06.522 --> 00:13:08.480
or you can get two values
if it was a cache hit

00:13:08.480 --> 00:13:10.070
and there was an updated value.

00:13:10.070 --> 00:13:12.520
Or we don't do this
right now, but we

00:13:12.520 --> 00:13:16.150
could-- is the server could
push a new value at some point

00:13:16.150 --> 00:13:19.090
and you can get
additional values.

00:13:19.090 --> 00:13:23.430
So we were very pleased
to have construct

00:13:23.430 --> 00:13:27.837
like streams available to us.

00:13:27.837 --> 00:13:29.420
So I don't know if
you saw this thing.

00:13:29.420 --> 00:13:34.460
What's this services thing
on top of the UI components?

00:13:37.000 --> 00:13:40.270
As the app grew,
the UI component

00:13:40.270 --> 00:13:43.240
started to accumulate more
and more business logic.

00:13:43.240 --> 00:13:44.920
Some of them were
making RPCs and they

00:13:44.920 --> 00:13:53.740
had much more complicated setup
and they did too much stuff,

00:13:53.740 --> 00:13:57.380
so it became very hard to
test them and to debug them.

00:13:57.380 --> 00:13:59.410
So what we did is we
at some point said, OK.

00:13:59.410 --> 00:14:01.590
Fine, let's do a big refactor.

00:14:01.590 --> 00:14:04.220
And we moved all the code
out of the components

00:14:04.220 --> 00:14:08.670
into just pure Dart objects.

00:14:08.670 --> 00:14:12.270
And by moving all of this stuff
out of the component domain

00:14:12.270 --> 00:14:16.467
and into just plain Dart
domain, tons of advantages--

00:14:16.467 --> 00:14:19.050
one is like you can just use all
the features of the language.

00:14:19.050 --> 00:14:21.640
Like you can use inheritance.

00:14:21.640 --> 00:14:25.060
You can delegate certain
behaviors to Mixins.

00:14:25.060 --> 00:14:26.820
You can have
services that manage

00:14:26.820 --> 00:14:28.450
the lifecycle of
multiple components,

00:14:28.450 --> 00:14:30.040
like an entire view.

00:14:30.040 --> 00:14:32.810
You can have a view services
that cooperate with other view

00:14:32.810 --> 00:14:34.800
services.

00:14:34.800 --> 00:14:36.642
All sorts of stuff.

00:14:36.642 --> 00:14:38.100
Plus all of the
stuff can be tested

00:14:38.100 --> 00:14:39.880
later on in simple
command line VM

00:14:39.880 --> 00:14:41.770
tests without involving
the browser-- this

00:14:41.770 --> 00:14:43.100
saved a ton of time.

00:14:43.100 --> 00:14:48.520
I recommend that you look
into doing things this way.

00:14:48.520 --> 00:14:50.709
Anyway, we had a very
close partnership

00:14:50.709 --> 00:14:52.250
with the Angular
team-- they actually

00:14:52.250 --> 00:14:54.270
sit across the hallway from us.

00:14:54.270 --> 00:14:58.110
And a lot of the
stuff that I just

00:14:58.110 --> 00:15:01.330
showed you plus
many other things

00:15:01.330 --> 00:15:05.010
are actually in AngularDart 2.0.

00:15:05.010 --> 00:15:08.280
In the release version,
you guys can just

00:15:08.280 --> 00:15:11.460
take advantage of a lot of stuff
that we had to go through-- you

00:15:11.460 --> 00:15:12.305
guys don't have to.

00:15:16.680 --> 00:15:20.830
Our testing team was
able to take advantage

00:15:20.830 --> 00:15:22.460
of a few features of
the Dart language,

00:15:22.460 --> 00:15:26.340
such as that are lended to do
static analysis and generating

00:15:26.340 --> 00:15:29.259
code-- and they built us
a few very cool tools,

00:15:29.259 --> 00:15:30.800
they're here by the
way, [INAUDIBLE].

00:15:33.820 --> 00:15:36.440
So I don't know if you guys
write any memory leaks,

00:15:36.440 --> 00:15:38.810
but we do.

00:15:38.810 --> 00:15:43.330
So they built tools that are
able to find specific code

00:15:43.330 --> 00:15:46.880
patterns that lead to
memory leaks-- kind of cool

00:15:46.880 --> 00:15:48.990
to be able to do that.

00:15:48.990 --> 00:15:52.410
Also, the set up of
certain test cases

00:15:52.410 --> 00:15:54.680
can be a pain to do,
a lot of boilerplate--

00:15:54.680 --> 00:15:59.800
it's not quite exactly always
the same tools to build that.

00:15:59.800 --> 00:16:03.350
You saw [INAUDIBLE] talk about
page loader and page objects

00:16:03.350 --> 00:16:06.810
in Ted's talk-- we have
generators for that.

00:16:06.810 --> 00:16:09.300
And all these tools are going
to be made all open source

00:16:09.300 --> 00:16:10.970
or they're already open source.

00:16:13.780 --> 00:16:19.190
We also partner very closely
with Dan and the Dart team.

00:16:19.190 --> 00:16:22.280
As the app started to
grow and get out of hand,

00:16:22.280 --> 00:16:26.880
the refresh cycles started
to get very, very slow,

00:16:26.880 --> 00:16:29.836
and so we told them.

00:16:29.836 --> 00:16:32.230
[CHUCKLING]

00:16:32.230 --> 00:16:34.840
And they delivered.

00:16:34.840 --> 00:16:36.780
They made it 8 times
faster this summer.

00:16:36.780 --> 00:16:41.060
So if you haven't used the
tools since the beginning

00:16:41.060 --> 00:16:45.190
of the summer, they're
a lot faster now.

00:16:45.190 --> 00:16:45.720
All right.

00:16:45.720 --> 00:16:46.990
What else?

00:16:46.990 --> 00:16:49.130
People in the team,
what do they tell us?

00:16:49.130 --> 00:16:53.130
Well, we hired
some people who are

00:16:53.130 --> 00:16:57.820
fresh out of school-- this
is one of the first languages

00:16:57.820 --> 00:16:59.340
that they learn.

00:16:59.340 --> 00:17:02.410
And they tell us that Dart
feels like a smaller, more

00:17:02.410 --> 00:17:05.250
agile blank.

00:17:05.250 --> 00:17:07.075
Any guesses?

00:17:07.075 --> 00:17:07.950
I'll give you a hint.

00:17:07.950 --> 00:17:10.871
It starts with J
and ends with ava.

00:17:14.884 --> 00:17:16.800
It's very easy to learn,
very easy to pick up,

00:17:16.800 --> 00:17:21.550
very into intuitive for people
coming fresh out of school.

00:17:21.550 --> 00:17:24.109
Now, we have people who
have a lot of experience

00:17:24.109 --> 00:17:27.770
with Google with
different tech stacks--

00:17:27.770 --> 00:17:30.180
and they tell us this is a
much more productive stack

00:17:30.180 --> 00:17:32.350
than anything else
they've worked with.

00:17:32.350 --> 00:17:37.630
This is not like me with
a timer taking benchmarks.

00:17:37.630 --> 00:17:39.530
But just asking people,
OK, how long would

00:17:39.530 --> 00:17:42.940
it take you to implement
this feature with that tech

00:17:42.940 --> 00:17:44.500
stack or this tech stack?

00:17:44.500 --> 00:17:48.308
Pretty much I get this answer
consistently, a lot faster.

00:17:51.450 --> 00:17:51.950
OK.

00:17:51.950 --> 00:17:53.190
We're done.

00:17:53.190 --> 00:17:54.890
Everything's great.

00:17:54.890 --> 00:17:57.530
We have a productive team,
productive tech stack.

00:17:57.530 --> 00:18:00.900
We have a great application
by the way, users love it.

00:18:00.900 --> 00:18:03.380
Great partnerships.

00:18:03.380 --> 00:18:05.000
We're good.

00:18:05.000 --> 00:18:07.220
Well, there's still
time left on the clock,

00:18:07.220 --> 00:18:10.830
so obviously you that's a psych.

00:18:10.830 --> 00:18:13.630
So there's something missing.

00:18:13.630 --> 00:18:16.530
Something very big
missing from all of this.

00:18:16.530 --> 00:18:17.870
Any guesses?

00:18:17.870 --> 00:18:18.944
AUDIENCE: [INAUDIBLE]

00:18:18.944 --> 00:18:19.610
WILL EKIEL: Yes.

00:18:19.610 --> 00:18:20.720
Yes.

00:18:20.720 --> 00:18:21.720
You saw the slides.

00:18:21.720 --> 00:18:22.220
OK.

00:18:22.220 --> 00:18:23.760
So yes what about mobile?

00:18:23.760 --> 00:18:24.670
What about mobile?

00:18:24.670 --> 00:18:26.030
Yes, mobile.

00:18:26.030 --> 00:18:26.630
All right.

00:18:26.630 --> 00:18:27.130
All right.

00:18:27.130 --> 00:18:30.660
I guess we missed mobile,
let's do mobile then.

00:18:30.660 --> 00:18:31.920
All right.

00:18:31.920 --> 00:18:32.670
Voila.

00:18:32.670 --> 00:18:33.410
There it is.

00:18:33.410 --> 00:18:33.910
See?

00:18:33.910 --> 00:18:35.368
I just showed you
the screen shots.

00:18:35.368 --> 00:18:37.650
We put them in there.

00:18:37.650 --> 00:18:38.600
Yes, yes.

00:18:38.600 --> 00:18:39.170
Done.

00:18:39.170 --> 00:18:39.669
Done.

00:18:39.669 --> 00:18:40.562
Mobile web.

00:18:40.562 --> 00:18:41.520
Mobile web for the win.

00:18:41.520 --> 00:18:46.320
So you just need to have very
small fingers to type on that.

00:18:46.320 --> 00:18:49.060
So well, what happens
is even if you

00:18:49.060 --> 00:18:54.260
did-- even if that made sense,
they're different workflows.

00:18:54.260 --> 00:18:56.510
The kinds of things you would
want to do on your phone

00:18:56.510 --> 00:18:57.610
are not the kinds
of things you want

00:18:57.610 --> 00:19:00.120
to do at your desk-- it's
completely different things.

00:19:00.120 --> 00:19:02.590
So it's not just that
the user experience

00:19:02.590 --> 00:19:05.710
needs to be designed
for mobile, but just

00:19:05.710 --> 00:19:08.830
like different features or
different interpretations

00:19:08.830 --> 00:19:10.080
of the features.

00:19:10.080 --> 00:19:11.367
So I don't know.

00:19:11.367 --> 00:19:12.950
I don't know if
that's a sales person.

00:19:12.950 --> 00:19:14.930
I know that's a model,
it's a stock photo.

00:19:14.930 --> 00:19:18.420
I don't know if sales people on
the go look like that or not,

00:19:18.420 --> 00:19:21.370
but we needed to find out--
so we had to go talk to them

00:19:21.370 --> 00:19:22.801
and we did.

00:19:22.801 --> 00:19:25.050
And we found out what they
cared about when they're on

00:19:25.050 --> 00:19:29.040
mobile, blah, blah, blah--
and we build these apps

00:19:29.040 --> 00:19:31.439
with numbers in the real world.

00:19:31.439 --> 00:19:33.230
And so, you have a
bunch of visualizations.

00:19:33.230 --> 00:19:35.915
The same thing, well, different.

00:19:35.915 --> 00:19:38.700
The analog thing,
but for mobile.

00:19:38.700 --> 00:19:43.170
Now, we didn't want to
compromise the user experience,

00:19:43.170 --> 00:19:44.060
right?

00:19:44.060 --> 00:19:46.460
We want it to feel great.

00:19:46.460 --> 00:19:49.260
And we wanted our users
to love it, right?

00:19:49.260 --> 00:19:51.500
So there was only
one way to do that,

00:19:51.500 --> 00:19:56.534
which is to build a native
application-- so we did.

00:19:56.534 --> 00:19:58.450
It has all the gestures,
everything, 60 frames

00:19:58.450 --> 00:20:01.190
per second-- it's great.

00:20:01.190 --> 00:20:08.840
But the problem is that--
OK, we have a web stack.

00:20:08.840 --> 00:20:11.090
We have an Angular.

00:20:11.090 --> 00:20:12.740
We have Android.

00:20:12.740 --> 00:20:15.850
And well, we have users and iOS.

00:20:15.850 --> 00:20:19.000
So all right, we get to
do it all over again.

00:20:19.000 --> 00:20:21.140
OK.

00:20:21.140 --> 00:20:24.120
I wasn't excited about that.

00:20:24.120 --> 00:20:26.924
So it means I need to spin
up a whole other team.

00:20:26.924 --> 00:20:27.680
No.

00:20:27.680 --> 00:20:31.180
So I was like there's
got to be a better way.

00:20:31.180 --> 00:20:38.140
And so, I talked to Flutter
team-- this was six months ago.

00:20:38.140 --> 00:20:41.674
And I'm like, OK,
guys, can we try this?

00:20:41.674 --> 00:20:43.340
And like, well, we're
like in pre-alpha.

00:20:43.340 --> 00:20:44.506
There's still kind of alpha.

00:20:47.720 --> 00:20:49.987
What we put up with some bugs?

00:20:49.987 --> 00:20:51.070
And it was like, OK, sure.

00:20:51.070 --> 00:20:52.630
So built a prototype, right?

00:20:52.630 --> 00:20:57.690
Because that's one way to find
out if things actually work.

00:20:57.690 --> 00:21:00.640
And honestly, I had
some skepticism.

00:21:00.640 --> 00:21:03.662
Because I've work with things
that are cross-platform before

00:21:03.662 --> 00:21:04.870
and they feel a little weird.

00:21:04.870 --> 00:21:07.820
I mean, when you're in a
virtualized thing that lands

00:21:07.820 --> 00:21:10.930
and abstracts the OS,
it's like it's not

00:21:10.930 --> 00:21:12.740
going to feel like
the right thing-- it's

00:21:12.740 --> 00:21:16.355
going to feel a little
weird to be like, you know?

00:21:16.355 --> 00:21:21.250
I can't really
control this stuff.

00:21:21.250 --> 00:21:24.280
So well, I don't know.

00:21:24.280 --> 00:21:26.700
Want to see what happened?

00:21:26.700 --> 00:21:27.290
All right.

00:21:56.260 --> 00:21:58.470
OK.

00:21:58.470 --> 00:21:59.410
So that happened.

00:21:59.410 --> 00:22:02.450
That's our prototype app.

00:22:02.450 --> 00:22:04.440
All the data is fake
and so on, but you

00:22:04.440 --> 00:22:06.660
get an idea of what it does.

00:22:06.660 --> 00:22:09.660
We built this
prototype on Flutter--

00:22:09.660 --> 00:22:15.260
and it's kind of a clone
of our Android app.

00:22:15.260 --> 00:22:18.450
What it does is, for instance,
if you're a salesperson,

00:22:18.450 --> 00:22:21.910
you want to know how you're
trending against your targets

00:22:21.910 --> 00:22:23.954
and so on, so this gives
you some vital stats.

00:22:28.500 --> 00:22:30.800
Let's see.

00:22:30.800 --> 00:22:31.580
Pacing.

00:22:31.580 --> 00:22:38.167
Companies, who's doing well,
who's not doing so well.

00:22:38.167 --> 00:22:39.750
You can see it's the
exact same thing.

00:22:46.560 --> 00:22:48.170
So we built this
hierarchical table,

00:22:48.170 --> 00:22:51.950
which is a custom component
that we had to build.

00:22:51.950 --> 00:22:54.460
This is one of the reasons why
we had chosen to go native,

00:22:54.460 --> 00:22:58.380
so that we could create certain
types of specific experiences

00:22:58.380 --> 00:23:01.630
we wanted to have.

00:23:01.630 --> 00:23:03.940
For instance, the
back little arrow

00:23:03.940 --> 00:23:05.660
is a little bit
different on each OS.

00:23:05.660 --> 00:23:10.520
And you know, the text is
left aligned on Android

00:23:10.520 --> 00:23:13.480
and centered in iOS--
Flutter does all of that

00:23:13.480 --> 00:23:14.686
automatically for you.

00:23:17.450 --> 00:23:19.410
And look what else it does.

00:23:19.410 --> 00:23:19.910
See?

00:23:19.910 --> 00:23:20.640
I made this bill.

00:23:20.640 --> 00:23:23.790
This is a bill that we
did right before I came.

00:23:23.790 --> 00:23:29.310
And as you can see, it's
got a bug right there.

00:23:29.310 --> 00:23:31.642
And it's the exact same
bug on both of them.

00:23:31.642 --> 00:23:33.630
[LAUGHTER]

00:23:34.830 --> 00:23:39.620
I mean, I'm excited about
that, because it means

00:23:39.620 --> 00:23:41.210
that I get to test things once.

00:23:41.210 --> 00:23:42.640
I mean, if we fix
it on one, it's

00:23:42.640 --> 00:23:44.180
going to be fixed
in the other one.

00:23:44.180 --> 00:23:49.701
And I don't think that's
a feature, so anyway.

00:23:49.701 --> 00:23:50.200
All right.

00:23:50.200 --> 00:23:52.600
Let's go back to our phone.

00:24:00.130 --> 00:24:01.210
All right.

00:24:01.210 --> 00:24:06.190
So what was our experience
working with Flutter?

00:24:06.190 --> 00:24:09.250
Mind you, we've been working
with Flutter for six months

00:24:09.250 --> 00:24:12.430
and it was buggy when
we started, and so on.

00:24:12.430 --> 00:24:14.720
But the Flutter teams,
like Eric was saying,

00:24:14.720 --> 00:24:18.230
they just kept building
the road in front of us.

00:24:18.230 --> 00:24:22.400
And we were really
productive with it.

00:24:22.400 --> 00:24:24.640
We were surprised how much
progress we were making.

00:24:24.640 --> 00:24:26.098
Because ideally,
we were just going

00:24:26.098 --> 00:24:28.050
to build some really
tiny little toy thing,

00:24:28.050 --> 00:24:30.450
we were not even planning
on building that much.

00:24:30.450 --> 00:24:32.800
But once we got
started, we figured out

00:24:32.800 --> 00:24:34.930
it was like hard to stop.

00:24:34.930 --> 00:24:37.120
It was hard to stop
building the prototype,

00:24:37.120 --> 00:24:40.190
because it was fun--
because you didn't really

00:24:40.190 --> 00:24:44.640
have to wait to see the results
and it was so productive.

00:24:44.640 --> 00:24:46.240
It got to be about,
we're guessing,

00:24:46.240 --> 00:24:49.280
about three times more
productive than working

00:24:49.280 --> 00:24:50.960
in Android alone.

00:24:50.960 --> 00:24:51.740
OK?

00:24:51.740 --> 00:24:53.850
That's not even
counting what it would

00:24:53.850 --> 00:24:57.290
have taken to build an iOS app.

00:24:57.290 --> 00:25:01.130
We had no problem
coming up to speed.

00:25:01.130 --> 00:25:02.050
Everything made sense.

00:25:02.050 --> 00:25:03.508
I'm sure, you know,
it helps if you

00:25:03.508 --> 00:25:06.380
have some mobile background.

00:25:06.380 --> 00:25:07.920
The widget fidelity,
which was one

00:25:07.920 --> 00:25:13.790
of the things that had driven
us to go native is incredible.

00:25:13.790 --> 00:25:16.570
The team that that's
doing these things

00:25:16.570 --> 00:25:20.250
is very connected with
the material design team.

00:25:20.250 --> 00:25:23.370
They know a lot about widgets.

00:25:23.370 --> 00:25:26.940
The shadows and all
the time little details

00:25:26.940 --> 00:25:30.180
are very well taken care of.

00:25:30.180 --> 00:25:31.680
And I don't know
about you, but when

00:25:31.680 --> 00:25:36.290
I see something, a project that
makes some big bold promise

00:25:36.290 --> 00:25:39.990
and then they actually
do that, I don't know.

00:25:39.990 --> 00:25:41.160
I think that's noteworthy.

00:25:41.160 --> 00:25:44.020
It doesn't happen
to me very often.

00:25:44.020 --> 00:25:45.738
[APPLAUSE]

00:25:47.200 --> 00:25:47.912
Sure, yeah.

00:25:52.890 --> 00:25:56.510
And last, I mean, there's this
really interesting possibility

00:25:56.510 --> 00:25:58.640
you now have, which
is you can share code

00:25:58.640 --> 00:26:00.930
with your web application.

00:26:00.930 --> 00:26:03.100
OK.

00:26:03.100 --> 00:26:05.685
And they're not
even beta actually,

00:26:05.685 --> 00:26:07.480
they've still got a ways to go.

00:26:07.480 --> 00:26:10.290
So wow, I was impressed.

00:26:10.290 --> 00:26:14.019
So given Flutter,
this is actually

00:26:14.019 --> 00:26:15.810
the way we're thinking
about building apps.

00:26:15.810 --> 00:26:18.950
And I think this is the way you
may want to think about them

00:26:18.950 --> 00:26:22.660
as well, which is you
have your web application,

00:26:22.660 --> 00:26:24.410
you have your mobile
application-- there's

00:26:24.410 --> 00:26:25.940
going to be always a
little bit of native code

00:26:25.940 --> 00:26:28.110
you need to write, because
they're never going

00:26:28.110 --> 00:26:30.580
to be exactly parity, right?

00:26:30.580 --> 00:26:34.020
But the interesting thing for
me is this layer right here.

00:26:34.020 --> 00:26:37.050
This code is very
expensive code to write.

00:26:37.050 --> 00:26:40.150
It's the code that has business
logic, the code that knows how

00:26:40.150 --> 00:26:43.407
to make certain types of RPCs.

00:26:43.407 --> 00:26:45.240
It took us a lot of
work to write that code,

00:26:45.240 --> 00:26:47.170
is pretty non-trivial.

00:26:47.170 --> 00:26:51.750
And when you're
building another client,

00:26:51.750 --> 00:26:53.670
you typically have to
start from scratch.

00:26:53.670 --> 00:26:53.900
Why?

00:26:53.900 --> 00:26:55.775
Because it's a completely
different language.

00:26:55.775 --> 00:26:58.400
Maybe you can read them
and then side by side,

00:26:58.400 --> 00:27:03.760
move your Dart to
Objective C or whatever.

00:27:03.760 --> 00:27:05.980
But that's not a fun process.

00:27:05.980 --> 00:27:09.720
So the ability of leveraging
all of this investment

00:27:09.720 --> 00:27:12.080
and putting it on your mobile
clients is actually huge.

00:27:12.080 --> 00:27:16.940
And I think this
changes a lot of things.

00:27:16.940 --> 00:27:17.440
All right.

00:27:17.440 --> 00:27:21.420
So what am I excited about?

00:27:21.420 --> 00:27:24.600
Well, excited about the one
that will launch of Flutter,

00:27:24.600 --> 00:27:26.020
which we have no ETA for.

00:27:26.020 --> 00:27:29.120
But I'm really excited
about having that.

00:27:29.120 --> 00:27:33.180
Although, since I sit in
the building next to Eric,

00:27:33.180 --> 00:27:37.340
we'll probably
launch before that.

00:27:37.340 --> 00:27:39.010
I'm really excited
about all this stuff

00:27:39.010 --> 00:27:42.360
that [INAUDIBLE] talked
about with Angular--

00:27:42.360 --> 00:27:46.000
with faster, smaller code size.

00:27:46.000 --> 00:27:49.700
Angular has a very exciting
roadmap ahead of them.

00:27:49.700 --> 00:27:53.440
And frankly, I'm very excited
about the evolution of the Dart

00:27:53.440 --> 00:27:56.030
ecosystem.

00:27:56.030 --> 00:27:58.989
Of course, we need your
help, because well,

00:27:58.989 --> 00:28:00.280
we need your help promoting it.

00:28:00.280 --> 00:28:01.550
We need your help growing it.

00:28:01.550 --> 00:28:04.310
We're making a lot more
stuff open source now,

00:28:04.310 --> 00:28:06.230
so we're hoping
that you guys can

00:28:06.230 --> 00:28:10.530
take it, and make it bigger, and
contribute to it-- it's yours.

00:28:10.530 --> 00:28:11.370
Thank you.

00:28:11.370 --> 00:28:14.120
[APPLAUSE]

