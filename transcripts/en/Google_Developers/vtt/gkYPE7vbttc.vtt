WEBVTT
Kind: captions
Language: en

00:00:08.960 --> 00:00:10.130
Hi, I'm Mano Marks.

00:00:10.130 --> 00:00:12.430
I'm a developer advocate on
the Google Maps Developer

00:00:12.430 --> 00:00:13.980
Relations team.

00:00:13.980 --> 00:00:16.079
I'm coming to you from our
Sydney office, where I'm going

00:00:16.079 --> 00:00:19.090
to be talking to you about
using geocoding with the

00:00:19.090 --> 00:00:23.041
Google Maps SDK for iOS.

00:00:23.041 --> 00:00:26.280
Now geocoding is the art of
turning an address into a

00:00:26.280 --> 00:00:31.410
lat-long pair with some
additional information.

00:00:31.410 --> 00:00:34.220
Let me show you an example.

00:00:34.220 --> 00:00:36.530
You see my screen here.

00:00:36.530 --> 00:00:39.910
I'm in the iOS simulator.

00:00:39.910 --> 00:00:47.870
I'm going to try and geocode
Sydney, New South Wales,

00:00:47.870 --> 00:00:49.356
because that's where I am.

00:00:49.356 --> 00:00:54.140
So I click on Geocode, and it
returns to me, shifts the

00:00:54.140 --> 00:00:57.070
center of the map and returns
to me the latitude and

00:00:57.070 --> 00:00:59.570
longitude, so I can create a
marker there, and actually

00:00:59.570 --> 00:01:03.570
gives me the full formatted
address as well.

00:01:03.570 --> 00:01:06.340
Now this is done using the
Google geocoding API.

00:01:06.340 --> 00:01:13.150
So this is something that we
use when we're looking at

00:01:13.150 --> 00:01:15.510
doing geocoding on
mobile devices.

00:01:15.510 --> 00:01:20.360
It's a web service that can
return either JSON or XML and

00:01:20.360 --> 00:01:23.710
allows you to get a lot of
information about it.

00:01:23.710 --> 00:01:29.880
You can see here a standard
JSON return.

00:01:29.880 --> 00:01:32.530
So you'll see here there's
lots of different

00:01:32.530 --> 00:01:33.370
information in there.

00:01:33.370 --> 00:01:36.890
You get address components, so
you get the street number, the

00:01:36.890 --> 00:01:40.220
street, the city, state or
province, the ZIP, the

00:01:40.220 --> 00:01:44.180
country, all that sort of thing,
as well as a formatted

00:01:44.180 --> 00:01:47.130
address and the geometry,
which includes a

00:01:47.130 --> 00:01:49.820
latitude-longitude pair.

00:01:49.820 --> 00:01:53.690
There's some more information
in here as well.

00:01:53.690 --> 00:01:57.880
You get some viewpoints
and the location type.

00:01:57.880 --> 00:01:59.370
We're going to just
concentrate on the

00:01:59.370 --> 00:02:02.710
latitude-longitude pair.

00:02:02.710 --> 00:02:06.050
OK, so let's take a look
at the code here.

00:02:06.050 --> 00:02:08.820
So what I've done is
I've created an

00:02:08.820 --> 00:02:11.445
object geocoding service.

00:02:11.445 --> 00:02:13.380
Let's take a look at the
header file here.

00:02:13.380 --> 00:02:17.500
All I've got on it is init
and a geocoding address

00:02:17.500 --> 00:02:19.190
that takes a string.

00:02:19.190 --> 00:02:23.030
And then it has, as a property,
a dictionary, which

00:02:23.030 --> 00:02:24.680
is just a geocode.

00:02:27.190 --> 00:02:33.150
So what I do is when I
initialize it, I set

00:02:33.150 --> 00:02:35.390
geocode to 0, 0--

00:02:35.390 --> 00:02:38.000
that's latitude and
longitude zero--

00:02:38.000 --> 00:02:40.090
and call it Null Island.

00:02:40.090 --> 00:02:41.430
Anybody play "Myst"?

00:02:41.430 --> 00:02:42.680
It's an old video game.

00:02:42.680 --> 00:02:45.157
Null Island was at 0, 0.

00:02:45.157 --> 00:02:48.980
Anyway, then in geocode address,
I just create a

00:02:48.980 --> 00:02:54.710
string, which is the base URL,
which you can see here, and

00:02:54.710 --> 00:03:00.340
pass in the address as a
parameter to that string, and

00:03:00.340 --> 00:03:03.550
then I construct a
URL out of it.

00:03:03.550 --> 00:03:07.190
It's important to do a string
by adding percent escapes

00:03:07.190 --> 00:03:08.700
using encoding.

00:03:08.700 --> 00:03:14.440
And then I use UTF string
encoding just in case it's an

00:03:14.440 --> 00:03:18.590
address that comes from a
different set of characters

00:03:18.590 --> 00:03:21.920
than ASCII or whatever
else I'm using.

00:03:21.920 --> 00:03:25.030
So then I create an
NSURL object.

00:03:25.030 --> 00:03:29.380
And here I'm doing dispatch
sync, which is synchronous

00:03:29.380 --> 00:03:33.340
dispatch, just to make the code
a little bit easier for

00:03:33.340 --> 00:03:34.540
demo purposes.

00:03:34.540 --> 00:03:37.170
But you probably want to do
this in an async manner so

00:03:37.170 --> 00:03:40.040
that, when you send off the
geocode request, you can keep

00:03:40.040 --> 00:03:45.550
doing other things and
then come back to it.

00:03:45.550 --> 00:03:51.190
OK, so then I create an NSData
object, data with contents of

00:03:51.190 --> 00:04:01.130
that particular URL, and I use
fetchData is my callback.

00:04:01.130 --> 00:04:07.710
Or when it fetches the
data, it puts it

00:04:07.710 --> 00:04:10.630
into this data object.

00:04:10.630 --> 00:04:18.200
OK, so then what I do is I use
NSDictionary JSON, NSJSON

00:04:18.200 --> 00:04:21.450
serialization, JSON
with object data.

00:04:21.450 --> 00:04:27.100
So I'm just creating a
serialization of the JSON as a

00:04:27.100 --> 00:04:30.410
NSDictionary and then I can just
pull out the different

00:04:30.410 --> 00:04:31.590
sets of things.

00:04:31.590 --> 00:04:33.600
So it's a results object.

00:04:33.600 --> 00:04:36.470
So I pull out results object.

00:04:36.470 --> 00:04:38.660
And then I get the individual
results.

00:04:38.660 --> 00:04:42.160
So it's possible that you'll
get more than one result if

00:04:42.160 --> 00:04:46.080
we're not 100% confident that
what we're giving you is the

00:04:46.080 --> 00:04:48.455
full and complete address.

00:04:51.110 --> 00:04:54.690
So then I'm pulling out
the first result.

00:04:54.690 --> 00:04:58.440
And then I just pull out the
address, and latitude and

00:04:58.440 --> 00:05:03.801
longitude, using objectForKey,
formatted address, then I pull

00:05:03.801 --> 00:05:08.090
out geometry, which has a
location object, which is

00:05:08.090 --> 00:05:09.190
latitude and longitude.

00:05:09.190 --> 00:05:13.400
It's kind of this, basically,
stepping through, creating

00:05:13.400 --> 00:05:15.630
these little dictionaries, and
then strings for each of the

00:05:15.630 --> 00:05:17.350
different values.

00:05:17.350 --> 00:05:21.190
And then I create a dictionary
object that has the latitude

00:05:21.190 --> 00:05:27.070
and longitude and make
the geocode property

00:05:27.070 --> 00:05:29.730
equal to that object.

00:05:29.730 --> 00:05:37.350
And then, in my service,
what I did was I

00:05:37.350 --> 00:05:39.055
have an object that--

00:05:39.055 --> 00:05:41.540
you know, I have my View,
and I have my Button,

00:05:41.540 --> 00:05:42.720
and I have all that--

00:05:42.720 --> 00:05:45.540
I'm not going to get into all
of that at the moment.

00:05:45.540 --> 00:05:49.310
But I just have an addMarker
function that gets

00:05:49.310 --> 00:05:52.300
called when I'm done.

00:05:52.300 --> 00:05:57.980
So you can see it's actually
conceptually pretty easy to

00:05:57.980 --> 00:06:00.250
use a geocoding web service.

00:06:00.250 --> 00:06:04.190
You can also apply this, then,
to our directions and other

00:06:04.190 --> 00:06:05.570
APIs as well.

00:06:05.570 --> 00:06:08.260
So hopefully this'll
get you started.

00:06:08.260 --> 00:06:11.380
And I'm going to post this
to my GitHub repository,

00:06:11.380 --> 00:06:14.890
github.com/manomarks.

00:06:14.890 --> 00:06:19.560
Under demos, you'll
see this code.

00:06:19.560 --> 00:06:22.700
And we'll link to that
in the description of

00:06:22.700 --> 00:06:23.910
the video as well.

00:06:23.910 --> 00:06:27.860
So thanks a lot and
happy geocoding.

00:06:27.860 --> 00:06:29.110
Bye.

