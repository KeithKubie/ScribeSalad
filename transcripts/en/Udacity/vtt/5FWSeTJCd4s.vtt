WEBVTT
Kind: captions
Language: en

00:00:00.720 --> 00:00:04.670
Continuing on,
let's read the csv file for SPY.

00:00:05.680 --> 00:00:08.500
In dfSPY, a temporary DataFrame.

00:00:09.520 --> 00:00:12.970
The next step is the heart of
building the final DataFrame.

00:00:12.970 --> 00:00:19.690
We combine the empty DataFrame, df1,
with the temporary DataFrame, dfSPY.

00:00:19.690 --> 00:00:23.410
We use the join function of
the DataFrame for this purpose.

00:00:23.410 --> 00:00:23.965
Let's do it.

00:00:23.965 --> 00:00:28.980
DataFrame.join does
a left join by default.

00:00:28.980 --> 00:00:34.500
So if we write a.join b,
it will read in all the rules from a,

00:00:34.500 --> 00:00:40.410
but only those rules from b whose
index values are present in a's index.

00:00:40.410 --> 00:00:44.758
For the remaining rows, that is
the index values, not present in b,

00:00:44.758 --> 00:00:48.040
pandas introduce nans.

00:00:48.040 --> 00:00:54.180
So in this case, all the rules from
the df1 will be retained and we will get

00:00:54.180 --> 00:01:00.410
all the values for the prizes from dfSPY
for the given range we defined above.

00:01:00.410 --> 00:01:05.190
So in our case, all the rules
from the df1 will be retained and

00:01:05.190 --> 00:01:10.960
only those rules of dfSPY, which is
present in df1, will be retained.

00:01:10.960 --> 00:01:17.740
This will give us all the prices for
the stock SPY in the defined date range.

00:01:17.740 --> 00:01:22.840
Let's use join df1 one after
the join step to make it clear.

00:01:22.840 --> 00:01:27.770
You should expect to see all
the values of SPY for the given dates.

00:01:27.770 --> 00:01:29.230
Observe the output.

00:01:29.230 --> 00:01:32.570
We did not get any
values from the dfSpy.

00:01:32.570 --> 00:01:33.320
What do you think?

00:01:33.320 --> 00:01:35.224
What could be the reason?

00:01:35.224 --> 00:01:38.285
Let's print dfSPY to investigate.

00:01:38.285 --> 00:01:41.100
Commenting out the join lines.

00:01:41.100 --> 00:01:44.925
So let's see what dfSPY has.

00:01:44.925 --> 00:01:49.231
We told pandas to join df1, and dfSPY.

00:01:49.231 --> 00:01:52.480
But dfSPY has an index of integers,

00:01:52.480 --> 00:01:58.360
which is not the same as
the dates index that df1 uses.

00:01:58.360 --> 00:02:01.660
We fix this by informing
the read_csv function,

00:02:01.660 --> 00:02:06.580
that the date column in the csv
file should be used as index.

00:02:06.580 --> 00:02:09.740
We do this by using
the index_col parameter.

00:02:09.740 --> 00:02:12.590
Make sure you give
the correct column name.

00:02:12.590 --> 00:02:17.110
We also want the dates present in
the DataFrame to be converted into date

00:02:17.110 --> 00:02:18.850
time index objects.

00:02:18.850 --> 00:02:24.720
This can be done by setting the value
for the parse_dates parameter to True.

00:02:24.720 --> 00:02:26.710
Let's see if this works.

00:02:26.710 --> 00:02:31.060
Notice that the Date column is
now being used as the index.

00:02:31.060 --> 00:02:33.750
There is no separate
integer index on the left.

00:02:34.870 --> 00:02:38.840
Now let's see what the resulting
join DataFrame looks like

00:02:38.840 --> 00:02:41.430
by uncommenting these lines.

00:02:41.430 --> 00:02:47.140
But before that, let's add some more
parameters to the read_csv function.

00:02:47.140 --> 00:02:51.060
Note that we are interested in just
two columns, which is the Date and

00:02:51.060 --> 00:02:52.760
the Adj Close.

00:02:52.760 --> 00:02:55.380
We can get rid of the other column,

00:02:55.380 --> 00:03:00.030
by using the usecols
parameter of the read_csv.

00:03:00.030 --> 00:03:04.545
We pass a list of column name we
are interested in, which are Date and

00:03:04.545 --> 00:03:05.790
Adj Close.

00:03:05.790 --> 00:03:07.920
Now let's see what's there in df1.

00:03:09.140 --> 00:03:15.100
You see now we have just the Adj Close
for the SPY for a given date range.

00:03:15.100 --> 00:03:19.010
Also observe that weekend
dates have NaN value.

00:03:19.010 --> 00:03:25.490
Before we go ahead,
let's understand that csv NaN as string,

00:03:25.490 --> 00:03:30.930
so we need to tell the read_csv that NaN
should be interpreted as not a number.

00:03:32.000 --> 00:03:33.480
This is how you indicate it.

00:03:35.130 --> 00:03:36.530
One last step.

00:03:36.530 --> 00:03:39.970
We just want the date,
on which SPY traded, so

00:03:39.970 --> 00:03:43.200
we can add more stocks
based on these dates.

00:03:43.200 --> 00:03:46.420
Let's drop the rows where SPY is NaN.

00:03:46.420 --> 00:03:49.315
For this, we use the dropna function.

00:03:49.315 --> 00:03:57.090
df1.dropna will drop all the rows
which has NaN values for the SPY.

00:03:57.090 --> 00:03:59.450
Let's go ahead and print this.

00:03:59.450 --> 00:04:04.390
Now we have built a clean DataFrame
filled with SPY data using

00:04:04.390 --> 00:04:09.320
a selected date range and keeping
only the dates that SPY traded on.

