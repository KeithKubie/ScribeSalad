WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:04.720
So, let's discuss, can compilers help improve IPC? Which

00:00:04.720 --> 00:00:07.210
is the number of instructions per cycle, that the processor

00:00:07.210 --> 00:00:10.254
achieves. There are really two things that the compiler can

00:00:10.254 --> 00:00:14.001
help with. One, is the ILP of the program itself

00:00:14.001 --> 00:00:17.750
may be limited. For example, due to dependence chains,

00:00:17.750 --> 00:00:20.540
which is when we have instructions that depend on each

00:00:20.540 --> 00:00:22.834
other, so really if we have a long chain like

00:00:22.834 --> 00:00:25.252
this then there will be very limited ILP in this

00:00:25.252 --> 00:00:28.352
program because we can really execute only one instruction

00:00:28.352 --> 00:00:30.715
at a time. So, the compiler, as we will

00:00:30.715 --> 00:00:33.134
see, might help us actually avoid these kinds of

00:00:33.134 --> 00:00:37.015
dependence chains. And also, the hardware has a limited

00:00:37.015 --> 00:00:40.580
window into the program. For example, there might be

00:00:40.580 --> 00:00:44.760
independent instructions, so an ideal processor might be able

00:00:44.760 --> 00:00:47.410
to achieve good ILP on that program. But because

00:00:47.410 --> 00:00:50.780
these independent instructions are far apart, a real processor

00:00:50.780 --> 00:00:53.926
simply can not see those instructions. Because, for example, it

00:00:53.926 --> 00:00:56.578
runs out of ROB space before it reaches those instructions if

00:00:56.578 --> 00:01:00.190
they're independent. So, in the same example, if we have

00:01:00.190 --> 00:01:04.202
a long chain like this followed by, this instruction doesn't depend

00:01:04.202 --> 00:01:06.378
on any of those in the chain, but if the

00:01:06.378 --> 00:01:09.098
chain is too long, we run out of ROB space before

00:01:09.098 --> 00:01:12.254
we reach this instruction. So, as far as this processor

00:01:12.254 --> 00:01:15.838
is concerned, this instruction cannot execute in parallel with those just

00:01:15.838 --> 00:01:18.260
because we never see it. As we will see,

00:01:18.260 --> 00:01:21.320
the compiler can help us put these independent instructions

00:01:21.320 --> 00:01:23.670
closer to each other, so that the IPC achieved

00:01:23.670 --> 00:01:26.200
by the processor is closer to the available ILP.

