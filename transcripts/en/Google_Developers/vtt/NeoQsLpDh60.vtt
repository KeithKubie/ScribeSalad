WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.988
[MUSIC PLAYING]

00:00:17.254 --> 00:00:18.920
ALEXIS MOUSSINE-POUCHKINE:
Hi we're here

00:00:18.920 --> 00:00:21.910
at dotJS, an amazing
place and I'm here

00:00:21.910 --> 00:00:25.240
with Addy Osmani, who
was on stage minutes

00:00:25.240 --> 00:00:27.400
ago talking about
a lot of things.

00:00:27.400 --> 00:00:29.307
You managed to cram, you know--

00:00:29.307 --> 00:00:31.015
ADDY OSMANI: I crammed
in all the things.

00:00:31.015 --> 00:00:32.348
ALEXIS MOUSSINE-POUCHKINE: Yeah.

00:00:32.348 --> 00:00:34.480
So how about we talk
about maybe Yeoman.

00:00:34.480 --> 00:00:38.290
And you talk about Yeoman
being part of those three tools

00:00:38.290 --> 00:00:40.130
that you think are
important, not just

00:00:40.130 --> 00:00:42.435
because developers
are lazy, because they

00:00:42.435 --> 00:00:43.560
want to be more productive.

00:00:43.560 --> 00:00:45.730
So can you maybe
set the stage here.

00:00:45.730 --> 00:00:46.480
ADDY OSMANI: Sure.

00:00:46.480 --> 00:00:49.560
So Yeoman is a project we've
been working on for a year.

00:00:49.560 --> 00:00:51.590
It's sort of this workflow
for the front end,

00:00:51.590 --> 00:00:53.959
for helping developers
stay really productive.

00:00:53.959 --> 00:00:55.500
And it gives them
three things and we

00:00:55.500 --> 00:00:59.120
think are really compelling
for you to stay efficient.

00:00:59.120 --> 00:01:01.046
The first is a tool
called yo, which

00:01:01.046 --> 00:01:02.420
is really useful
for scaffolding.

00:01:02.420 --> 00:01:05.430
So let's say you're trying to
create a new AngularJS app,

00:01:05.430 --> 00:01:08.010
or something using
Ember or Backbone.

00:01:08.010 --> 00:01:10.200
Rather than having to go
looking for the boilerplate

00:01:10.200 --> 00:01:14.250
for that app, and trying to fit
a workflow of tools around it

00:01:14.250 --> 00:01:17.650
that works well for you, we can
actually give you all of that

00:01:17.650 --> 00:01:19.330
just by running one command.

00:01:19.330 --> 00:01:21.050
So it saves you time
and it gets you up

00:01:21.050 --> 00:01:22.320
and running much quicker.

00:01:22.320 --> 00:01:22.840
ALEXIS MOUSSINE-POUCHKINE: OK.

00:01:22.840 --> 00:01:24.715
ADDY OSMANI: We've also
got in that workflow,

00:01:24.715 --> 00:01:27.790
we've also got Grunts, which
is a really great task runner,

00:01:27.790 --> 00:01:30.140
gives you a really great build
process, and Bower, which

00:01:30.140 --> 00:01:32.079
is really useful for
managing dependencies.

00:01:32.079 --> 00:01:33.870
ALEXIS MOUSSINE-POUCHKINE:
So Yeoman and yo

00:01:33.870 --> 00:01:36.300
is really co-generator,
and those are mostly

00:01:36.300 --> 00:01:38.750
known for one chaw
generation, and then

00:01:38.750 --> 00:01:42.480
you kind of need to re-run it,
and you start from scratch,

00:01:42.480 --> 00:01:43.630
and how does that work?

00:01:43.630 --> 00:01:45.672
Is there any
incremental side to it?

00:01:45.672 --> 00:01:47.630
ADDY OSMANI: Yes, so we
thought a lot about how

00:01:47.630 --> 00:01:50.400
we can improve iterative
development as well.

00:01:50.400 --> 00:01:54.266
And so Yeoman also comes with
a concept of sub generators.

00:01:54.266 --> 00:01:55.640
And the idea is,
let's say you're

00:01:55.640 --> 00:01:58.290
trying to scaffold out a
smaller piece of your app.

00:01:58.290 --> 00:02:01.426
It might be a view, or a
router, or a new component.

00:02:01.426 --> 00:02:03.050
You can run commands
that will actually

00:02:03.050 --> 00:02:05.630
let you do that on top of
the initial set of things

00:02:05.630 --> 00:02:06.839
that you've scaffolded out.

00:02:06.839 --> 00:02:08.630
So you can continuously
keep using the tool

00:02:08.630 --> 00:02:10.520
whenever you want to create
something new, regardless

00:02:10.520 --> 00:02:12.080
of how large or how small it is.

00:02:12.080 --> 00:02:14.430
So the best place to find
out information about Yeoman

00:02:14.430 --> 00:02:15.191
is Yeoman.io.

00:02:15.191 --> 00:02:16.440
ALEXIS MOUSSINE-POUCHKINE: OK.

00:02:16.440 --> 00:02:18.481
ADDY OSMANI: But the
community around the project

00:02:18.481 --> 00:02:21.080
has been growing pretty
rapidly over the past year.

00:02:21.080 --> 00:02:23.800
There isn't a day that goes by
where I haven't seen someone

00:02:23.800 --> 00:02:26.020
trying to create something
new with the project.

00:02:26.020 --> 00:02:28.660
And we've got a whole
ecosystem of generators

00:02:28.660 --> 00:02:32.870
now whereby, if in most cases
you pick out a framework

00:02:32.870 --> 00:02:37.510
you want to use-- and not just
if it's a JavaScript framework,

00:02:37.510 --> 00:02:41.140
but in many cases it could
be a mobile framework or even

00:02:41.140 --> 00:02:42.840
a back end server
language-- there

00:02:42.840 --> 00:02:45.130
are people that everyone
generators to scaffold you

00:02:45.130 --> 00:02:46.860
up projects using those.

00:02:46.860 --> 00:02:49.550
Probably the most
surprising for me

00:02:49.550 --> 00:02:51.170
was one of our most
popular generators

00:02:51.170 --> 00:02:53.450
is actually one for
WordPress Project.

00:02:53.450 --> 00:02:53.860
ALEXIS MOUSSINE-POUCHKINE:
Interesting.

00:02:53.860 --> 00:02:55.943
ADDY OSMANI: Something we
hadn't considered at all

00:02:55.943 --> 00:02:58.040
but people are using it
for whatever's useful.

00:02:58.040 --> 00:02:59.415
ALEXIS
MOUSSINE-POUCHKINE: So you

00:02:59.415 --> 00:03:02.077
mentioned mobile, does Yeoman
do anything specific for mobile?

00:03:02.077 --> 00:03:03.160
ADDY OSMANI: Yes actually.

00:03:03.160 --> 00:03:06.479
So our team spent a month
doing a lot of mobile web

00:03:06.479 --> 00:03:08.270
development, just to
get a really good feel

00:03:08.270 --> 00:03:09.970
for the current
landscape of tools

00:03:09.970 --> 00:03:11.610
that developers have to use.

00:03:11.610 --> 00:03:13.430
And on the back of
that, we put together

00:03:13.430 --> 00:03:16.350
a Yeoman generator
called generator-mobile.

00:03:16.350 --> 00:03:17.990
And what that gives
you out of the box

00:03:17.990 --> 00:03:21.480
is a really great boilerplate
for creating mobile web apps.

00:03:21.480 --> 00:03:22.140
It's fast.

00:03:22.140 --> 00:03:23.150
It's very small.

00:03:23.150 --> 00:03:25.540
But we also give you a
whole set up of tools

00:03:25.540 --> 00:03:28.960
for testing in the cloud,
local device testing,

00:03:28.960 --> 00:03:31.120
on getting a live
iterative workflow

00:03:31.120 --> 00:03:33.260
across multiple
devices at one time.

00:03:33.260 --> 00:03:35.070
So edit on your
desktop, refreshes

00:03:35.070 --> 00:03:36.364
across all of your devices.

00:03:36.364 --> 00:03:38.030
And it just makes it
a little bit easier

00:03:38.030 --> 00:03:39.320
when you're trying
to create something

00:03:39.320 --> 00:03:40.650
that works great on mobile.

00:03:40.650 --> 00:03:42.108
ALEXIS MOUSSINE-POUCHKINE:
Awesome.

00:03:42.108 --> 00:03:43.950
So another big part
of your talk was

00:03:43.950 --> 00:03:49.290
about Web Components and
Polymer, the Polymer Project.

00:03:49.290 --> 00:03:51.530
So tell us a little
bit how that plays

00:03:51.530 --> 00:03:55.570
versus existing standards
that are being developed.

00:03:55.570 --> 00:03:57.020
Should people
consider this today,

00:03:57.020 --> 00:03:59.610
or is it just so they
know, and then start

00:03:59.610 --> 00:04:01.504
using it maybe once it's ready?

00:04:01.504 --> 00:04:03.920
ADDY OSMANI: So I think Polymer
is a really great solution

00:04:03.920 --> 00:04:05.210
to be aware of.

00:04:05.210 --> 00:04:07.880
One of the fantastic things
in recent years about sort

00:04:07.880 --> 00:04:09.650
of standards bodies
is that they've

00:04:09.650 --> 00:04:13.360
been paying a keen eye on
what developers are using.

00:04:13.360 --> 00:04:15.246
So like things like data
binding is something

00:04:15.246 --> 00:04:16.620
that you tend to
use a JavaScript

00:04:16.620 --> 00:04:18.524
framework for a lot
of time these days.

00:04:18.524 --> 00:04:20.649
And wouldn't it be fantastic
if something like that

00:04:20.649 --> 00:04:22.540
was actually in the platform?

00:04:22.540 --> 00:04:25.560
Templating, another thing,
being able to create

00:04:25.560 --> 00:04:28.000
sort of components with
proper encapsulation.

00:04:28.000 --> 00:04:29.636
We've had to hack
around the platform

00:04:29.636 --> 00:04:31.260
to get these features
in place whenever

00:04:31.260 --> 00:04:32.980
we're trying to
create large apps.

00:04:32.980 --> 00:04:35.040
And finally, through
Web Components,

00:04:35.040 --> 00:04:36.840
we're getting some of those.

00:04:36.840 --> 00:04:38.370
We're getting a
proper template tag.

00:04:38.370 --> 00:04:41.690
We're getting imports that
allow you to package together

00:04:41.690 --> 00:04:45.720
different pieces of your app
and let the people use them.

00:04:45.720 --> 00:04:48.220
Custom Elements, Shadow
DOM for encapsulation,

00:04:48.220 --> 00:04:49.840
lots of really
exciting pieces that

00:04:49.840 --> 00:04:51.990
are coming to the platform.

00:04:51.990 --> 00:04:54.070
I know a lot of developers
will be wondering,

00:04:54.070 --> 00:04:56.740
is this stuff just
landing in Chrome?

00:04:56.740 --> 00:04:59.630
And thankfully, no it's not.

00:04:59.630 --> 00:05:01.870
We've been talking to
Firefox a lot lately,

00:05:01.870 --> 00:05:03.820
and it's actually
looking like they're

00:05:03.820 --> 00:05:06.510
going to ship most of the
features needed for web

00:05:06.510 --> 00:05:09.070
components directly with Firefox
nightlies in the next couple

00:05:09.070 --> 00:05:09.640
weeks.

00:05:09.640 --> 00:05:10.250
ALEXIS MOUSSINE-POUCHKINE: Nice.

00:05:10.250 --> 00:05:10.860
ADDY OSMANI: Should be exciting.

00:05:10.860 --> 00:05:11.660
ALEXIS MOUSSINE-POUCHKINE:
Very nice.

00:05:11.660 --> 00:05:13.990
So Polymer is more than
just implementation

00:05:13.990 --> 00:05:15.560
of those standards in the word?

00:05:15.560 --> 00:05:16.700
ADDY OSMANI: Yeah, so--

00:05:16.700 --> 00:05:19.033
ALEXIS MOUSSINE-POUCHKINE:
Is it a UI component library?

00:05:19.033 --> 00:05:19.840
Is it a framework?

00:05:19.840 --> 00:05:20.889
Is it all of the above?

00:05:20.889 --> 00:05:22.680
ADDY OSMANI: It's sort
of all of the above.

00:05:22.680 --> 00:05:24.770
It's an ambitious
project, but it's

00:05:24.770 --> 00:05:26.620
solving lots of
interesting problems.

00:05:26.620 --> 00:05:30.270
Like so consider it
built on top of layers.

00:05:30.270 --> 00:05:33.240
The first layer is
polyfills for the platform.

00:05:33.240 --> 00:05:36.950
So if you're trying to target
users using a modern browser,

00:05:36.950 --> 00:05:38.560
Polymer will work
great in all those.

00:05:38.560 --> 00:05:40.370
And with the platform
layer, you'll

00:05:40.370 --> 00:05:43.870
be able to work with any of
the standard features that

00:05:43.870 --> 00:05:45.810
are being implemented
in browsers.

00:05:45.810 --> 00:05:48.090
On top of that, it
has sugaring layer,

00:05:48.090 --> 00:05:50.422
which takes away even
more of the boilerplate

00:05:50.422 --> 00:05:51.380
that you'd have to use.

00:05:51.380 --> 00:05:55.010
If you were authoring just using
regular old web components.

00:05:55.010 --> 00:05:57.180
And I've personally
found it really,

00:05:57.180 --> 00:06:01.810
really nice for writing pretty
interactive apps without having

00:06:01.810 --> 00:06:03.930
to write a lot of code.

00:06:03.930 --> 00:06:06.730
And because it's built
in such a way that

00:06:06.730 --> 00:06:10.120
encourages code reuse,
and element reuse,

00:06:10.120 --> 00:06:13.020
you'll often find that there are
smaller things that you don't

00:06:13.020 --> 00:06:15.280
need to go re-implant yourself.

00:06:15.280 --> 00:06:20.250
Like the app I was showing on
stage was sort of a YouTube app

00:06:20.250 --> 00:06:24.330
for helping you manage
playlists and stuff like that.

00:06:24.330 --> 00:06:25.926
And when I was
developing that, I

00:06:25.926 --> 00:06:28.050
found that there are some
really nice elements that

00:06:28.050 --> 00:06:30.341
helped you do things like
YouTube search, or displaying

00:06:30.341 --> 00:06:32.056
YouTube videos, and so on.

00:06:32.056 --> 00:06:33.805
And tying those all
together using Polymer

00:06:33.805 --> 00:06:35.638
and Web Components was
actually pretty easy.

00:06:35.638 --> 00:06:39.370
So I think it's a great
thing to keep an eye on.

00:06:39.370 --> 00:06:42.270
Production wise I would
say that we're probably

00:06:42.270 --> 00:06:43.920
at least a little while off--

00:06:43.920 --> 00:06:45.170
ALEXIS MOUSSINE-POUCHKINE: OK.

00:06:45.170 --> 00:06:46.910
ADDY OSMANI: But it's still
something to be aware of.

00:06:46.910 --> 00:06:48.940
As soon as these things are in
the platform, they're faster,

00:06:48.940 --> 00:06:50.120
they're easier to use.

00:06:50.120 --> 00:06:50.980
ALEXIS MOUSSINE-POUCHKINE:
And for those people

00:06:50.980 --> 00:06:52.850
interested in checking
it out, that actually

00:06:52.850 --> 00:06:53.811
plays well with Yeoman.

00:06:53.811 --> 00:06:55.060
ADDY OSMANI: Yes, yes it does.

00:06:55.060 --> 00:06:57.520
There's actually a
generator for Yeoman

00:06:57.520 --> 00:07:00.280
that lets you scaffold up
Polymer apps and Polymer

00:07:00.280 --> 00:07:01.145
elements as well.

00:07:01.145 --> 00:07:02.770
So if people want to
check that, that's

00:07:02.770 --> 00:07:04.155
called generator-polymer.

00:07:04.155 --> 00:07:05.530
ALEXIS
MOUSSINE-POUCHKINE: Great.

00:07:05.530 --> 00:07:08.180
Well I think that's all
the time we have for.

00:07:08.180 --> 00:07:11.060
So I'd like to thank you Addy
for answering my questions.

00:07:11.060 --> 00:07:14.570
And wishing everyone
great time, and I

00:07:14.570 --> 00:07:16.990
hope to see you for
the dot conferences.

00:07:16.990 --> 00:07:17.700
Cheers.

00:07:17.700 --> 00:07:19.500
ADDY OSMANI: Cheers.

00:07:19.500 --> 00:07:30.025
[MUSIC PLAYING]

