WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.630
&gt;&gt; CHANEZON: Hello, everybody. So, my name
is Patrick Chanezon. I'm a developer advocate

00:00:08.630 --> 00:00:14.840
at Google. I've been working on--I've been
at Google for five years. I'm based in San

00:00:14.840 --> 00:00:22.659
Francisco. I've been doing lots of different
stuff at Google. I started with Adwords and

00:00:22.659 --> 00:00:28.249
then Google Checkout. And a few years ago,
I was in charge of OpenSocial, which is quite

00:00:28.249 --> 00:00:33.890
relevant for today's theme. And then, I did
HTML5. And these days, I'm more focused on

00:00:33.890 --> 00:00:40.261
Cloud computing. So the talk today is about
the social web and how it evolved and what

00:00:40.261 --> 00:00:47.990
are the current technologies and standards
that are used for building social apps. So,

00:00:47.990 --> 00:00:55.469
again, there's a mobile agenda that you can
find there, where you can see the list of

00:00:55.469 --> 00:01:02.359
sessions and rate the sessions and all that.
So I have a huge slide deck for today. I'm

00:01:02.359 --> 00:01:08.070
going to skip through lots of the sections
because there's lots of ground to cover. I

00:01:08.070 --> 00:01:15.150
will post my slides online, so feel them more
like as references than anything else. And

00:01:15.150 --> 00:01:22.960
you can find them on the web. The big news
for today is what--what was announced in the

00:01:22.960 --> 00:01:30.250
keynote this morning which is the release
of Jambool for Orkut. So, I'll dedicate some

00:01:30.250 --> 00:01:37.700
time at the end about that. I think that's
the--most important news. So I'm going to

00:01:37.700 --> 00:01:43.850
explain what is social, a little bit of history
about social software, the list of Google

00:01:43.850 --> 00:01:50.141
social products and then we'll go over all
the standards and technologies, the Open Standards

00:01:50.141 --> 00:01:58.180
and technologies that are used in social software.
I'll talk a little bit about the Buzz API

00:01:58.180 --> 00:02:04.610
and then we'll talk about monetization. So--but
first, I'd like to know a little bit about

00:02:04.610 --> 00:02:13.380
your interest. So, who among you is developing
social apps today? Okay, quite a few. That's

00:02:13.380 --> 00:02:23.720
good. How many are doing that on Orkut? Hey,
great. How many have used the Buzz API? Oh,

00:02:23.720 --> 00:02:33.390
wow. Okay. And then, how many are building
apps for Facebook? Wow, pretty impressive.

00:02:33.390 --> 00:02:43.640
Great. Okay, so what is social? Like some
of you may seen these slides already from

00:02:43.640 --> 00:02:47.970
a few years ago when I went to Brazil and
talked about OpenSocial, maybe last year.

00:02:47.970 --> 00:02:54.610
I like these because it's a good reminder
of what social is about. To me, social is

00:02:54.610 --> 00:02:59.900
a horizontal layer for the web that just bring
on the web a lot of the social activities

00:02:59.900 --> 00:03:05.200
we have in real life. But because there are
many definitions of what social means, I just

00:03:05.200 --> 00:03:10.140
find it useful to go back to kids to see what
their point of view is. So I asked my daughter,

00:03:10.140 --> 00:03:17.750
Eliette, what social means to her. And she's
a very good drawer, so she give me some drawings.

00:03:17.750 --> 00:03:22.790
"We look at each other," lots of looking at
pictures and all that; we were talking, communication

00:03:22.790 --> 00:03:28.420
is an important theme; laughing, like all
the fun apps and games and all that; "We help

00:03:28.420 --> 00:03:34.650
each other," collaboration is a big theme
for social apps; "We read together," like

00:03:34.650 --> 00:03:40.521
sharing links and reading lists and all that;
and then, collaboration again, do projects

00:03:40.521 --> 00:03:47.180
together. So that's kind of--that's kind of
what social is in real life and what's been

00:03:47.180 --> 00:03:53.810
happening in the past three years, I would
say, is that all these activities, thanks

00:03:53.810 --> 00:04:00.940
to social APIs from social networks, have
moved to the web. We're in the process of

00:04:00.940 --> 00:04:08.250
moving all these, in the forms of applications,
using social APIs. A bit of history about

00:04:08.250 --> 00:04:13.660
social networking; and when I say history,
I'm talking about recent history and more

00:04:13.660 --> 00:04:22.469
about the history of APIs, how can you leverage
social networking in your apps. So in 2007,

00:04:22.469 --> 00:04:29.550
it was all of the rage about building social
apps inside of the social network. So you

00:04:29.550 --> 00:04:35.809
had the Facebook platform on one side that
allowed you to build--take a smaller version

00:04:35.809 --> 00:04:40.770
of your site and build it inside of Facebook.
And then, you could use their API there and

00:04:40.770 --> 00:04:47.639
have access to the social graph of users.
Same thing for--on the other side, on the

00:04:47.639 --> 00:04:53.229
open site, I would say. There was OpenSocial
which allowed you to do the same thing for

00:04:53.229 --> 00:04:58.960
Orkut, MySpace and all the other networks
in the world pretty much, except Facebook.

00:04:58.960 --> 00:05:08.689
So, you had Facebook platform and OpenSocial;
that was 2007. Then, 2008; in 2008 we saw

00:05:08.689 --> 00:05:16.270
a generalization of social networking where
a lot more people started using social networks

00:05:16.270 --> 00:05:23.289
and at that time, the social network APIs
themselves were starting to go out. Instead

00:05:23.289 --> 00:05:30.780
of requiring developers to build a smaller
version of their site inside of the social

00:05:30.780 --> 00:05:36.699
network environment, they started to provide
APIs like Facebook Connect or Google Friend

00:05:36.699 --> 00:05:42.639
Connect that allowed a regular website with
just a few snippets of JavaScript or backend

00:05:42.639 --> 00:05:50.729
calls to just pull the social graph from the
site. So, you're on Huffington Post or time.com,

00:05:50.729 --> 00:05:57.129
you log-in with either your Orkut login or
your Facebook login and then you get access

00:05:57.129 --> 00:06:03.029
to--and then the site get access to your social
graph and they can do some personalization

00:06:03.029 --> 00:06:12.110
with that. So that was 2008. At the API level,
and when I say at the API level--at the open

00:06:12.110 --> 00:06:20.690
standard API level, the standards we are talking
about were OpenID, OAuth and OpenSocial again.

00:06:20.690 --> 00:06:28.159
Twitter Anywhere is part of that move as well
and the Facebook open graph API is part of

00:06:28.159 --> 00:06:38.240
that. Now 2009, there's been a shift in 2009
where it's not only about the social graph,

00:06:38.240 --> 00:06:46.059
people--and not only people but social networks
themselves realized that the most important

00:06:46.059 --> 00:06:54.639
aspect of social networking for users was
not only playing with apps inside of the social

00:06:54.639 --> 00:06:59.589
networks, it was all about the update, what
we call the activity stream; seeing the feed

00:06:59.589 --> 00:07:08.589
of update from your friends. And so in 2009--and
Twitter is really the company that kind of

00:07:08.589 --> 00:07:18.529
created that--created that--not the ID, but
made it work a lot and all their growth was

00:07:18.529 --> 00:07:24.669
linked to the activity stream. And basically
after Twitter became popular, Facebook redesigned

00:07:24.669 --> 00:07:30.619
their page to focus it around the activity
stream. If you've tried the new Orkut, you

00:07:30.619 --> 00:07:36.749
see that the activity stream is pretty central
there as well. Google Buzz is all about the

00:07:36.749 --> 00:07:44.550
activity stream. So, all the social networking
companies kind of took notice of that switch

00:07:44.550 --> 00:07:52.460
and the whole focus in social networking switched
to activity streams. So at the API level and

00:07:52.460 --> 00:07:57.460
at the open standards level where that mentioned
that there's been a bunch of standards defined

00:07:57.460 --> 00:08:04.909
in this area; one called ActivityStreams,
another called Salmon about commands on websites,

00:08:04.909 --> 00:08:14.599
Pubsubhubbub and Webfinger. We'll talk about
these in the session. And then 2010, the activity

00:08:14.599 --> 00:08:22.569
stream is still very strong. But then, what
is strong as well is geo and mobile with FourSquare,

00:08:22.569 --> 00:08:30.970
Latitude, Gowalla; Twitter added Geolocation,
Facebook implemented Places. So, geo and mobile

00:08:30.970 --> 00:08:36.870
was one of the big theme for this year in
social networking. In terms of APIs, it was

00:08:36.870 --> 00:08:43.529
GPS APIs in phone where you can have access
from the native platform or from HTML5, with

00:08:43.529 --> 00:08:50.990
the W3C Geolocation API in JavaScript. And
then another big theme was social gaming with

00:08:50.990 --> 00:08:59.790
companies like Zinga becoming very successful;
and when I say Zinga--also when we talk about

00:08:59.790 --> 00:09:07.170
Brazil, Vostu or Mentes, pretty popular on
Orkut. And then, monetization; monetization

00:09:07.170 --> 00:09:13.029
and virtual currencies, and we're going to
talk about that with Jambool. So that's kind

00:09:13.029 --> 00:09:19.149
of my version of the history, recent quick
history of social networking. Now in terms

00:09:19.149 --> 00:09:25.569
of Google social products, the historical,
and still very strong social product by Google

00:09:25.569 --> 00:09:32.579
is Orkut. Then we had Google Friend Connect,
Google Buzz, Google Web Elements and more

00:09:32.579 --> 00:09:40.690
recently Social Search. So, I'll go quickly
about Google Buzz which is integrated with

00:09:40.690 --> 00:09:52.860
Gmail and it's just a new way of doing conversations.
So, the whole idea about Buzz is that your--it's

00:09:52.860 --> 00:09:58.690
based on the notion of an activity stream,
but your stream is not limited to 140 character.

00:09:58.690 --> 00:10:03.279
You can put some rich content in there, you
can attach images and movies and stuff like

00:10:03.279 --> 00:10:11.680
that. But also there's a conversation in there
so people can reply in Buzz and--like for

00:10:11.680 --> 00:10:17.300
people who use it, there are some rich conversations
that are happening in this--in this media.

00:10:17.300 --> 00:10:22.500
And some of us at Google, like de Wit for
example, is using it as a blog. Like, he has

00:10:22.500 --> 00:10:29.110
really long entries and people are commenting
in there. It's very, very powerful. Google

00:10:29.110 --> 00:10:40.410
Web Elements is another--it's one of the AJAX
APIs. Google Web Elements are--it's a system

00:10:40.410 --> 00:10:45.060
where you log-in and then you say, "I'm a
site owner, but I'm not technical at all.

00:10:45.060 --> 00:10:49.840
And I want to add a little bit of Google to
my site." And so, you choose whether you want

00:10:49.840 --> 00:10:56.490
to add a calendar or a map, you customize
it into a UI designer and then we give you

00:10:56.490 --> 00:11:00.380
a snippet of JavaScript to put to your site.
I add this to the list of social products

00:11:00.380 --> 00:11:06.339
because there's this conversation widget,
which is very social, that allows you to add

00:11:06.339 --> 00:11:12.870
a conversation widget to your website where
the conversation actually can happen on several

00:11:12.870 --> 00:11:17.529
websites at the same time. So, if you have
a network of blogs, for example, that talk

00:11:17.529 --> 00:11:22.149
about the same topic, you can have the same
thread on several blogs. And plus, it's all

00:11:22.149 --> 00:11:27.560
translated, so you can translate the whole
thing. For example, if you have Chinese speakers

00:11:27.560 --> 00:11:32.139
in there, you can say, "I want to see the
whole thing in Brazilian-Portuguese." So,

00:11:32.139 --> 00:11:41.690
it's pretty cool and it's very easy to use.
Usages of social networking. So, you have

00:11:41.690 --> 00:11:49.190
large companies, like consumer companies like
Nike who created Nike+. So, they create social

00:11:49.190 --> 00:11:54.819
networks that are focused around their brand
or product. So, in Nike+ you can share your

00:11:54.819 --> 00:12:00.930
activity when you are running and all that
with your friends and then you can talk about

00:12:00.930 --> 00:12:09.389
the Nike products and all that. People are
using it for outwards communication like what

00:12:09.389 --> 00:12:16.230
Best Buy did with Twelpforce. When you're
twittering about Best--an experience you had

00:12:16.230 --> 00:12:20.949
at Best Buy, with products you bought there,
or something like that, some representative

00:12:20.949 --> 00:12:26.779
from Best Buy from your area can answer in
there and they have an internal application

00:12:26.779 --> 00:12:35.340
that they use to tweet there, to verify that
these guys are indeed Best Buy buyers--Best

00:12:35.340 --> 00:12:42.180
Buy representatives. Then you have things
like SocialWork, which is social networking

00:12:42.180 --> 00:12:48.410
but inside the Enterprise. So, SocialWork
is some kind of Twitter for the Enterprise.

00:12:48.410 --> 00:12:54.360
It's integrated in the apps marketplace with
Google Docs and Google Apps and it's running

00:12:54.360 --> 00:12:59.170
on app engine and it's using GWT. It's like
they're our poster child forum. They're using

00:12:59.170 --> 00:13:06.230
pretty much everything we're doing there.
And then one--one trend that personally I

00:13:06.230 --> 00:13:12.120
though would develop in 2008 but only starting
to develop now is social networking in the

00:13:12.120 --> 00:13:20.170
Enterprise. So you have companies like Oracle,
SAP and IBM who are starting to build offerings

00:13:20.170 --> 00:13:26.769
for the Enterprise. Cisco also recently outlined
a product for social in the Enterprise. The

00:13:26.769 --> 00:13:32.259
pioneers in there were eXo Platform and Atlassian
who had implemented open social two years

00:13:32.259 --> 00:13:43.660
ago already. Okay, the technologies. So, there
are--I'd say there are two approaches to social

00:13:43.660 --> 00:13:50.180
networking technologies. On one side, you
have Facebook who has the Facebook platform

00:13:50.180 --> 00:13:55.749
which was--like, they're going on their own
and they don't want to collaborate on standards,

00:13:55.749 --> 00:14:00.890
and that was like two years ago. Now, since
two years, they start to open up a little

00:14:00.890 --> 00:14:07.660
bit, like, they start to reuse existing standards
like OpenID and OAuth and Activity Streams.

00:14:07.660 --> 00:14:15.279
They were the first one to implement it. And
then there's the open way which is what Google

00:14:15.279 --> 00:14:22.230
is trying to do, trying to leverage existing
standards or create new standards when need

00:14:22.230 --> 00:14:30.000
arises. And the goal of these is to have very
narrow standards that just solve one particular

00:14:30.000 --> 00:14:36.670
aspect of the problem. And then you assemble
all these together, you have open source implementations

00:14:36.670 --> 00:14:44.730
for all of these and then you ensure that
there's a vibrant ecosystem around these technologies.

00:14:44.730 --> 00:14:50.589
So, the standards we're talking about is OpenID,
Atom, PubSubHubbub, Activity Streams, OAuth,

00:14:50.589 --> 00:14:59.470
WebFinger and Salmon. So, I'll start with
OpenSocial which is the oldest one. That's

00:14:59.470 --> 00:15:06.180
what you are using to develop apps on Orkut
today, but also on 20 other social networks

00:15:06.180 --> 00:15:13.580
in the world. OpenSocial is a very simple
API; it's an API in JavaScript and there's

00:15:13.580 --> 00:15:19.019
a REST version of it that allows you to--when
you're building your application to have access

00:15:19.019 --> 00:15:25.100
to the social graph of the user and to send
things to their activity stream, and to read

00:15:25.100 --> 00:15:32.640
their profile as well. It's been very successful,
it has a global reach; tons of social networks

00:15:32.640 --> 00:15:39.029
have implemented it and it's very popular
on Orkut. So this is an example, I just went

00:15:39.029 --> 00:15:46.499
to the Orkut list of applications and found
these ones; Mini Fazenda and Colheita Feliz

00:15:46.499 --> 00:15:53.320
by Vostu or Mentes. These apps have like 16
million and 21 million users, it's pretty

00:15:53.320 --> 00:16:00.100
impressive. So there are some people who make
money with it already. So let's talk about

00:16:00.100 --> 00:16:10.670
the Open Standards. Yes, so that's--okay.
So, at Google we're doing lots of Open Source.

00:16:10.670 --> 00:16:19.529
Open Source was part of the Google culture
even before we started doing APIs. So what

00:16:19.529 --> 00:16:25.480
you get from Open Source is freedom and a
community. And then Open Standards; the goal

00:16:25.480 --> 00:16:30.959
of Open Standards is to have interoperability
between different implementations and different

00:16:30.959 --> 00:16:36.009
websites, and it simplifies development. For
the developer, instead of having to develop

00:16:36.009 --> 00:16:41.589
for 20 different platforms, they just develop
to the standard and that's it, and then everybody

00:16:41.589 --> 00:16:49.450
does the same thing on the server side. So,
one of the first standard is OAuth. OAuth

00:16:49.450 --> 00:16:59.160
is all about authorization. It's about distributed
authorization. So, the way the process works

00:16:59.160 --> 00:17:04.230
is that you have a service provider, let's
say for example Google Buzz or Google Calendar,

00:17:04.230 --> 00:17:09.490
and then you have your application who wants
to access the calendar of the best feed of

00:17:09.490 --> 00:17:22.160
the user. So your application needs--when
your application needs to have access to that

00:17:22.160 --> 00:17:28.210
sheet, they just--the application just goes
to the feed and then they receive a--they

00:17:28.210 --> 00:17:35.510
receive unauthorized request token to say,
"You're not authorized to use that, you need

00:17:35.510 --> 00:17:41.740
the user to authorize you to do that." So
then what happens is that the user is redirected

00:17:41.740 --> 00:17:48.300
to the service provider, to Google in this
case, and in the--in the redirection there's

00:17:48.300 --> 00:17:57.990
a parameter of that, gives the URL where the
user should be redirected to your app at the

00:17:57.990 --> 00:18:03.650
end. And so you're going through that--through
that process with the service provider and

00:18:03.650 --> 00:18:09.260
I'm sure it may have happened to you where
you are using an application, you were redirected

00:18:09.260 --> 00:18:14.060
to Google, you log-in, and then Google asks
you, "Do you want this application to have

00:18:14.060 --> 00:18:19.090
access to your calendar or to your best feed?"
And you say, "Yes." And then when you say

00:18:19.090 --> 00:18:24.710
yes, you're redirected back to the application
and with this redirection there's a token

00:18:24.710 --> 00:18:31.800
that is given to the application. With that
token they can now make requests on your behalf

00:18:31.800 --> 00:18:39.250
from the API. And the nice--the way OAuth--the
reason OAuth was designed is because of the

00:18:39.250 --> 00:18:46.370
way people were doing that before were, "Oh,
do you want to invite your friends on Gmail?

00:18:46.370 --> 00:18:50.300
Okay, give me your Gmail password." And when
you were doing that, basically you are giving

00:18:50.300 --> 00:18:56.310
them access to all your Google services because
it's your same password for Gmail and Calendar

00:18:56.310 --> 00:19:04.470
and Google Checkout and all that. So now with
OAuth, you can be very specific, you can say,

00:19:04.470 --> 00:19:10.280
"Oh, I want to give that application just
read access to my Calendar. And that other

00:19:10.280 --> 00:19:15.730
application is going to have write access."
And when I'm not using the application anymore,

00:19:15.730 --> 00:19:19.420
you can go in your settings in Google and
say, "I want to revoke this token." And then

00:19:19.420 --> 00:19:24.350
the application won't be able to do--to do
the request anymore. So that's what OAuth

00:19:24.350 --> 00:19:30.950
is doing. So they get an authorized token,
and then they can access your feed or your

00:19:30.950 --> 00:19:38.240
data. So that's what--so OAuth is just solving
the authorization piece of the puzzle. Another

00:19:38.240 --> 00:19:46.581
technology, OpenID, allows log-in in a standard
way. Then there's another piece of the puzzle

00:19:46.581 --> 00:19:54.040
which is called the Atom Publishing Protocol
and the Atom Feed Format. It's kind of a standardization,

00:19:54.040 --> 00:20:04.430
at AITEF, of RSS. They took the, kind of the
RSS mess of tags and different specs; I think

00:20:04.430 --> 00:20:16.280
there's something like 12 different RSS versions.
So a few years ago, some guys got together

00:20:16.280 --> 00:20:22.500
at the AITEF and they standardized it in the
name of Atom. And so, Atom defines a format

00:20:22.500 --> 00:20:29.420
for feeds. It's kind of an envelope format.
And so here you have things that the author

00:20:29.420 --> 00:20:37.900
of the feed, OpenSearch is integrated in there
and you have entries which have dates and

00:20:37.900 --> 00:20:44.010
titles and stuff like that. So Atom is a very
simple format to implement. Now, where it

00:20:44.010 --> 00:20:51.400
gets interesting is that inside of Atom you
can put some--you can put some Namespace XML

00:20:51.400 --> 00:20:58.520
data that is specific to a specific service.
And so, Google is using Atom in all its APIs.

00:20:58.520 --> 00:21:04.720
When you're accessing the Calendar API or
the Picasa API, all you access to is Atom

00:21:04.720 --> 00:21:10.930
feeds with namespaces that are specific to
each service. So for example, in a calendar

00:21:10.930 --> 00:21:19.770
feed, you'll have a namespace that will describe
calendar entries. In the Picasa, you have

00:21:19.770 --> 00:21:30.630
a namespace that describes images. So that's
Atom for feeds. Then PubSubHubbub, one of

00:21:30.630 --> 00:21:37.670
the problems--there's a hilarious video with
Bret Slatkin and Brad Fitzpatrick that explains

00:21:37.670 --> 00:21:45.690
really well what PubSubHubbub is about in
a nutshell. And I think I have only 15 minutes

00:21:45.690 --> 00:21:51.300
left. Yeah, so I have 15 minutes left so I'm
going to go real fast on this one. PubSubHubbub,

00:21:51.300 --> 00:21:57.860
what it addresses is the problem where--when
you're dealing with feeds, you have the client

00:21:57.860 --> 00:22:01.570
who's asking the server all the time, "Do
you have anything new for me? Do you have

00:22:01.570 --> 00:22:06.910
anything new for me?" And that, that is not
efficient and that generates lots of useless

00:22:06.910 --> 00:22:14.590
traffic. And so, a more efficient to--way
to do that is to have a published-subscribed

00:22:14.590 --> 00:22:18.970
architecture. But because it's all distributed,
it's important to have hubs in the middle.

00:22:18.970 --> 00:22:28.520
So that's what PubSubHubbub is doing. Basically,
when you have a--so you have a subscriber--yeah,

00:22:28.520 --> 00:22:36.190
so a publisher's feed has a link to a hub
where they are going to publish their feed.

00:22:36.190 --> 00:22:42.480
And so, when a subscriber asks for a feed,
the publisher tells him, "Hey, the feed, you

00:22:42.480 --> 00:22:49.270
can get it into that hub." And so then, the
subscriber asks the hub, "Hey, I want to subscribe

00:22:49.270 --> 00:22:55.790
to that feed." And then, there's a little
bit of a handshake to say, "Are you really

00:22:55.790 --> 00:23:00.880
not a spammer?" And the guy says, "Yeah, I
really want the updates on that feed, I'm

00:23:00.880 --> 00:23:06.710
not a DoS attacker." And then what happens
is that when the publisher has some new stuff,

00:23:06.710 --> 00:23:10.480
he's bringing the hub to say, "Hey, I have
some new stuff." And then the hub pulls the

00:23:10.480 --> 00:23:21.800
updates. And then--and then pushes them to
the subscriber, and these can be many subscribers.

00:23:21.800 --> 00:23:27.090
So instead of having all the subscribers pull
on the publisher all the time and all. All

00:23:27.090 --> 00:23:33.210
the publishers, here you have hubs in the
middle where the publisher is pushing to the

00:23:33.210 --> 00:23:38.100
hub only once when there's some new stuff.
And then, the hub is pushing to everybody

00:23:38.100 --> 00:23:43.090
only when there is some new stuff as well.
And it's a distributed system so there would

00:23:43.090 --> 00:23:52.860
be many hubs and many publishers and subscribers.
Salmon is another protocol. The problem he's

00:23:52.860 --> 00:23:58.530
trying to solve is, there are a lot of commenting
system out there and when you're having a

00:23:58.530 --> 00:24:03.670
blog and you're using a distributed comment
system, you can comment on something on Twitter

00:24:03.670 --> 00:24:09.780
and then you end up commenting about the same
stuff on Buzz. And then, maybe the conversation

00:24:09.780 --> 00:24:14.460
ends up in FriendFeed. And if you start to
use many of the systems, the conversation

00:24:14.460 --> 00:24:20.670
is completely fragmented. Salmon is trying
to solve that by having this notion of source

00:24:20.670 --> 00:24:28.000
and aggregators where a source is using PubSubHubbub
to warn an aggregator that they have a new

00:24:28.000 --> 00:24:34.720
entry. The aggregator is publishing it and
when the aggregator gets new comments, it

00:24:34.720 --> 00:24:42.090
pushes them to the source. And so, the source
can publish it into his own thread. And then,

00:24:42.090 --> 00:24:47.450
when the source has new comments it can use
PubSubHubbub to push it to all the aggregators

00:24:47.450 --> 00:24:54.450
that have registered for this entry. And then,
they will republish it into their own threads.

00:24:54.450 --> 00:25:00.850
That means that you can start a conversation,
let's say on Buzz, continue it on Twitter,

00:25:00.850 --> 00:25:05.940
have a comment in WordPress. And all that
stuff can go together into a single thread

00:25:05.940 --> 00:25:12.970
or actually each system could have the whole
commenting story. That's the--that's the story

00:25:12.970 --> 00:25:24.240
behind Salmon. Activity Streams. So, as I
told you, the whole social web is re-centering

00:25:24.240 --> 00:25:30.240
around the Activity Streams. Activity Streams
is the standard for interoperating with these

00:25:30.240 --> 00:25:36.570
feeds. And, basically, it just defines a scheme
on top of Atom like a specific name space

00:25:36.570 --> 00:25:47.040
to define a few things about a stream of updates
so that in the user interface of the activity

00:25:47.040 --> 00:25:56.740
stream, you can make things nicer. So what
it defines is an actor, a verb, and an object.

00:25:56.740 --> 00:26:03.100
So, for example, "Timothy is posting a note,"
or, "Barack Obama started following Timothy,"

00:26:03.100 --> 00:26:15.370
or stuff like that. So an Activity Stream
is just a list of these subject, you know.

00:26:15.370 --> 00:26:21.790
Okay. So, I'll be really short on the Buzz
API because--if you have anymore questions,

00:26:21.790 --> 00:26:26.850
you can find some great slides online, and
I'll publish these as well. Basically, the

00:26:26.850 --> 00:26:32.091
Buzz API--so, Buzz is a Google product that
allows you to have conversations in a very

00:26:32.091 --> 00:26:38.450
easy way on the web, and the API is all based
in all of these standards. So, you use OAuth

00:26:38.450 --> 00:26:47.810
to have access to it and then you use a PubSubHubbub
to have access to the, like, the--how is it

00:26:47.810 --> 00:26:57.330
called--define a host feed like the host feed
on Buzz. The feed itself is in the Atom Publishing

00:26:57.330 --> 00:27:04.090
Protocol format. You can ask for adjacent
version of it and it's so full of the Activity

00:27:04.090 --> 00:27:12.680
Stream spec. And, so, I'll just skip pretty
quickly. I'll just show you what that looks

00:27:12.680 --> 00:27:16.760
like in the feed. So that's what it looks
like. For the Activity Stream, you have an

00:27:16.760 --> 00:27:24.650
actor named blah-blah-blah; profile, URL.
The verb is post and the object here is a

00:27:24.650 --> 00:27:30.860
note and all that. So, we don't implement
the whole Activity Streams spec in Buzz. I

00:27:30.860 --> 00:27:37.930
think there's only a few. So, these are all
the verbs, objects that are available in the

00:27:37.930 --> 00:27:45.620
Activity Streams spec. Now, in Buzz, we implement
post, and for article; note, photo, photo

00:27:45.620 --> 00:27:55.460
album, or video, so these are the object that
are supported by Buzz. Okay, so I'll just

00:27:55.460 --> 00:28:02.100
skip through that. There's a whole lot of
links to code and all that, but I'll just

00:28:02.100 --> 00:28:09.090
skip to the awkward part, which I think is
more relevant here. And there's lots of code

00:28:09.090 --> 00:28:28.570
out there that helps you play with the Buzz
API. Okay. Just one last note, we talked about

00:28:28.570 --> 00:28:34.280
Open Standards. Now, another important part
of Open Standard is open source implementation

00:28:34.280 --> 00:28:39.620
of them. So you have status.net, which is
a, like, some kind of white-label Twitter

00:28:39.620 --> 00:28:46.080
implementation, but it's open source, so you
can run your own version of it, and it's implementing

00:28:46.080 --> 00:28:51.180
most of these standards. Then, you have Shindig,
which is the open source implementation of--it's

00:28:51.180 --> 00:28:56.970
an Apache projects, an open source implementation
of open social server. Social site, which

00:28:56.970 --> 00:29:02.830
is another Apache project, which is the whole
social network on top of Shindig that implements

00:29:02.830 --> 00:29:10.030
OpenSocial. And then PubSubHubbub, which is
a--the server implementation for PubSubHubbub

00:29:10.030 --> 00:29:18.980
hub, which is written in--yeah, yeah, you
need to train a lot to be able to say that--and

00:29:18.980 --> 00:29:24.890
it's implemented in Python. It's running on
App Engine. It's lovely. Now, let's talk about

00:29:24.890 --> 00:29:31.380
Jambool because all these stuff is good and
fun and all that, but at the end of the day,

00:29:31.380 --> 00:29:37.620
we developers, we need to make money. So,
one good way of monetizing your social applications

00:29:37.620 --> 00:29:44.430
especially on Orkut is building virtual currencies,
of having a payment system. But, building

00:29:44.430 --> 00:29:51.370
that takes a lot of time and it's pretty painful,
and so there's a company called Jambool who

00:29:51.370 --> 00:29:59.020
created such a system where you can create
your own virtual currency, white-label virtual

00:29:59.020 --> 00:30:04.790
currency, and they give you--they manage all
of it for you. And so that company has been

00:30:04.790 --> 00:30:11.690
bought--acquired by Google in August 2010.
I was very happy about that. I heard about

00:30:11.690 --> 00:30:19.350
it in the media but I had met one of the founders
before--because he used to be the guy who

00:30:19.350 --> 00:30:24.830
designed the Amazon Payments API, which I
found very well designed. And so in Jambool,

00:30:24.830 --> 00:30:33.640
he just did the same kind of APIs but for
social networking. And so the other leading

00:30:33.640 --> 00:30:40.700
leader in virtual economy monetization platform,
and their platform is called Social Gold and

00:30:40.700 --> 00:30:46.390
it allows for micropayments, subscriptions;
you can create your own virtual currency and

00:30:46.390 --> 00:30:51.770
they do inventory management for you. They
have a pretty powerful analytics and reporting

00:30:51.770 --> 00:30:57.840
platform and they do fraud management as well.
So, basically, it makes it very easy for you

00:30:57.840 --> 00:31:04.520
to create a virtual currency or have payment
inside of your social application or games.

00:31:04.520 --> 00:31:10.590
And that kind of stuff is very fashionable
this day and it's a very good way of monetizing

00:31:10.590 --> 00:31:18.410
these apps. So what has been announced today
that Jambool is available on Orkut right now

00:31:18.410 --> 00:31:26.170
and it starts today. So just get signed up.
And the key features for Orkut are support

00:31:26.170 --> 00:31:34.380
for Boleto Bancario, which seems to be a Brazilian
payment method. I hadn't heard about it but

00:31:34.380 --> 00:31:44.100
it seems it's a--yeah, I'm living in San Francisco,
but I'm told it's very popular in Brazil.

00:31:44.100 --> 00:31:53.580
The experience is completely localizing Portuguese.
The fee for using it is 10% and then there's

00:31:53.580 --> 00:32:03.230
24/7 customer support for it. So in terms
of features, you have a seamless in-app experience.

00:32:03.230 --> 00:32:09.690
The wallet that you created is associated
with the user's user ID in Orkut. And you

00:32:09.690 --> 00:32:15.560
can use a wide array of payment method. So,
you can see all of them here, including the

00:32:15.560 --> 00:32:25.070
Boleto Bancario. The transaction can happen
in--so lots of these games are built in Flash.

00:32:25.070 --> 00:32:33.761
You can make these transactions directly in
Flash. You can pause the game just when you

00:32:33.761 --> 00:32:40.470
are doing the transaction. And they don't
need to leave the game in order to purchase

00:32:40.470 --> 00:32:47.350
more stuff. You have a subscription offering
in there where--and it's completely configurable.

00:32:47.350 --> 00:32:55.110
So, you can have free and discounted trials
weekly, monthly or annual billing cycles.

00:32:55.110 --> 00:33:02.810
And you can customize the CSS for the subscription
page. And then you have some APIs, to have

00:33:02.810 --> 00:33:09.140
access in your game on your back end to the
user's status in the--in terms of payment

00:33:09.140 --> 00:33:22.190
or in terms of subscription. Local currencies,
they are live with 25 currencies. And when

00:33:22.190 --> 00:33:26.760
you get into the system, you're default currency's
based on the IP address that you're coming

00:33:26.760 --> 00:33:34.460
from. Now, one of the very popular thing that
happened in social networking in the past

00:33:34.460 --> 00:33:40.900
two years is the rise of virtual currencies.
So you're in your game and you need to buy

00:33:40.900 --> 00:33:47.270
some stuff in that game and then you can buy
this virtual currency with real money. So

00:33:47.270 --> 00:33:52.600
building that virtual currency is a lot of
work. Jambool just does it for you. So they

00:33:52.600 --> 00:33:59.230
have a very simple API that let's you build
your own white-label virtual currency. So

00:33:59.230 --> 00:34:05.830
you can name it, you set the exchange rates,
you determine the events in which people earn

00:34:05.830 --> 00:34:14.530
money or not and you can manage, or go credit,
debits and the balance. Analytics; so Jambool

00:34:14.530 --> 00:34:21.030
provides you lots of analytics about your
virtual currency that is very useful to tune

00:34:21.030 --> 00:34:28.250
it and tune your game or your app for it,
and you can sign up today. So you sign up

00:34:28.250 --> 00:34:35.899
on jambool.com. And the APIs are very easy
to use and it's a great way to monetize your

00:34:35.899 --> 00:34:47.320
social apps. Okay, I think I'm done within
time for once. So, you can find the--again,

00:34:47.320 --> 00:34:53.201
the agenda, to rate the sessions, at this
URL. And since I have time, maybe I have time

00:34:53.201 --> 00:34:57.400
for a few questions. Okay. Thanks very much.

