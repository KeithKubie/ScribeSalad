WEBVTT
Kind: captions
Language: en

00:00:00.374 --> 00:00:01.040
ALEX DANILO: Hi!

00:00:01.040 --> 00:00:03.787
I'm Alex Danilo from the Google
Developer Relations team.

00:00:03.787 --> 00:00:06.120
One of the things I found
really hard as a web developer

00:00:06.120 --> 00:00:08.410
is making compelling
animations on a site.

00:00:08.410 --> 00:00:11.279
It seems easy enough at first
to throw some CSS animations

00:00:11.279 --> 00:00:13.820
onto a site, and then watch the
browser fly stuff around you,

00:00:13.820 --> 00:00:15.640
and you feel all chuffed
when you first see it.

00:00:15.640 --> 00:00:17.973
But if you're like me, you
want to make your site really

00:00:17.973 --> 00:00:19.472
stand out, you
know, be memorable.

00:00:19.472 --> 00:00:21.680
Not just another pre-canned
clone of something people

00:00:21.680 --> 00:00:22.909
have already seen.

00:00:22.909 --> 00:00:25.200
So I started experimenting
with different web animation

00:00:25.200 --> 00:00:26.825
techniques, and right
away hit problems

00:00:26.825 --> 00:00:27.871
with doing fancy things.

00:00:27.871 --> 00:00:29.870
For example, I wanted to
make two things animate

00:00:29.870 --> 00:00:31.960
in perfect sync, but
couldn't find a way

00:00:31.960 --> 00:00:33.660
to do it really easily.

00:00:33.660 --> 00:00:36.700
My solution took 1,000 lines
of code, was extremely choppy,

00:00:36.700 --> 00:00:38.330
and riddled with jank.

00:00:38.330 --> 00:00:40.910
If only there was a better way.

00:00:40.910 --> 00:00:42.910
Now this is the kind of
thing I wanted to build,

00:00:42.910 --> 00:00:45.060
a 3D [INAUDIBLE] [INAUDIBLE]
view of the world,

00:00:45.060 --> 00:00:48.460
with silky smooth jank-free
animation, and total control.

00:00:48.460 --> 00:00:50.500
Well, now there is a better way.

00:00:50.500 --> 00:00:52.510
A bunch of browser writers
and animation experts

00:00:52.510 --> 00:00:53.926
got together a
couple of years ago

00:00:53.926 --> 00:00:56.795
to look at this with a fresh set
of eyes, lots of eyes, in fact.

00:00:56.795 --> 00:00:58.170
We spent a lot of
time discussing

00:00:58.170 --> 00:01:00.770
what web developers need,
how animation designers work,

00:01:00.770 --> 00:01:02.160
and a whole lot more.

00:01:02.160 --> 00:01:05.110
What we came up with
is Web Animations 1.0.

00:01:05.110 --> 00:01:07.280
We aim to take all the
existing web animation

00:01:07.280 --> 00:01:08.999
primitives out there,
and unify them.

00:01:08.999 --> 00:01:11.040
And also bring new
capabilities that weren't just

00:01:11.040 --> 00:01:13.340
more powerful, but would
run faster and smoother

00:01:13.340 --> 00:01:14.730
as a result.

00:01:14.730 --> 00:01:17.660
Now one of the best APIs to play
with animation from JavaScript

00:01:17.660 --> 00:01:19.809
is, of course,
requestAnimationFrame,

00:01:19.809 --> 00:01:21.725
especially if you want
to fine-grained control

00:01:21.725 --> 00:01:24.539
of everything that's happening
on a frame-by-frame basis.

00:01:24.539 --> 00:01:26.330
So let's take a quick
look at how animation

00:01:26.330 --> 00:01:29.400
works when you use
requestAnimationFrame.

00:01:29.400 --> 00:01:31.730
Now using requestAnimationFrame
gives great control,

00:01:31.730 --> 00:01:34.460
but forces JavaScript
execution on every frame.

00:01:34.460 --> 00:01:37.060
Now this is fine if you're not
doing much in your JavaScript.

00:01:37.060 --> 00:01:39.310
But we only have 16
milliseconds for each frame.

00:01:39.310 --> 00:01:41.790
And that includes paint
and layout time, too.

00:01:41.790 --> 00:01:43.890
So if you run out of time,
you know what happens?

00:01:43.890 --> 00:01:45.700
Skipped frames,
resulting in jank,

00:01:45.700 --> 00:01:47.337
which some people call jitter.

00:01:47.337 --> 00:01:49.170
Now this is the main
reason it's a good idea

00:01:49.170 --> 00:01:52.670
to decouple the animations from
JavaScript execution itself.

00:01:52.670 --> 00:01:54.510
So we wanted the
flexibility of control

00:01:54.510 --> 00:01:56.350
from JavaScript,
but not the jank.

00:01:56.350 --> 00:01:58.180
And so this is what we designed.

00:01:58.180 --> 00:02:00.470
The Web Animations API
lets you create animations

00:02:00.470 --> 00:02:03.050
from JavaScript, then offload
the animation calculations

00:02:03.050 --> 00:02:04.620
to the browser, so
it can take care

00:02:04.620 --> 00:02:06.274
of all the heavy
lifting for you.

00:02:06.274 --> 00:02:07.940
And in many cases,
it can take advantage

00:02:07.940 --> 00:02:09.439
of hardware
acceleration, so there's

00:02:09.439 --> 00:02:11.582
very little work to
do for each frame.

00:02:11.582 --> 00:02:13.540
Now what this means, it
enables proper hardware

00:02:13.540 --> 00:02:16.630
accelerated animations to happen
via the use of a JavaScript

00:02:16.630 --> 00:02:19.270
API, but without the
slowdown from recalculating

00:02:19.270 --> 00:02:20.537
lots of stuff each frame.

00:02:20.537 --> 00:02:23.120
This is something we didn't have
before, which is pretty cool,

00:02:23.120 --> 00:02:24.094
huh?

00:02:24.094 --> 00:02:25.260
I know what you're thinking.

00:02:25.260 --> 00:02:27.050
Yeah, but we already
have CSS animations

00:02:27.050 --> 00:02:28.560
that are hardware-accelerated.

00:02:28.560 --> 00:02:29.920
Right, well that's true.

00:02:29.920 --> 00:02:32.020
And by unifying
everything, we extend

00:02:32.020 --> 00:02:33.700
the reach of hardware
acceleration.

00:02:33.700 --> 00:02:36.690
The Web Animations design
brings together CSS animations,

00:02:36.690 --> 00:02:40.340
transitions, SVG animation, and
JavaScript-created animations

00:02:40.340 --> 00:02:41.629
all into one thing.

00:02:41.629 --> 00:02:43.045
In fact, the Web
Animations engine

00:02:43.045 --> 00:02:46.040
is currently used to run both
CSS animations and transitions

00:02:46.040 --> 00:02:46.805
in Chrome.

00:02:46.805 --> 00:02:48.930
You probably didn't even
notice when that happened,

00:02:48.930 --> 00:02:51.310
and that's testament to how
seamlessly the Web Animations

00:02:51.310 --> 00:02:53.425
engine integrates into browsers.

00:02:53.425 --> 00:02:56.390
Now even better, is that
in addition to powering CSS

00:02:56.390 --> 00:02:58.942
animations, you can
call element.animate,

00:02:58.942 --> 00:03:00.900
which creates an animation
player object that's

00:03:00.900 --> 00:03:02.340
used to interface
to the animation

00:03:02.340 --> 00:03:04.530
internals inside the browser.

00:03:04.530 --> 00:03:06.660
Now the object return
lets you query and modify

00:03:06.660 --> 00:03:08.990
the running animation, so
you get decoupled running

00:03:08.990 --> 00:03:11.540
of animation in the browser,
but retain the ability

00:03:11.540 --> 00:03:13.840
to modify running
animation from JavaScript,

00:03:13.840 --> 00:03:16.020
kind of the best of both worlds.

00:03:16.020 --> 00:03:17.270
Now remember this?

00:03:17.270 --> 00:03:19.820
The cool 3D globe is actually
built using web animations.

00:03:19.820 --> 00:03:21.210
Bet you didn't guess that.

00:03:21.210 --> 00:03:22.830
And it's just the
tip of the iceberg.

00:03:22.830 --> 00:03:24.330
Here's another demo,
which shows how

00:03:24.330 --> 00:03:26.720
you can manipulate a running
animation using input

00:03:26.720 --> 00:03:27.830
like touch.

00:03:27.830 --> 00:03:30.709
Now you can't build something
like this using CSS animation,

00:03:30.709 --> 00:03:32.625
since there's no way to
dynamically manipulate

00:03:32.625 --> 00:03:34.660
a running animation
once it's started.

00:03:34.660 --> 00:03:36.246
But with Web Animations you can.

00:03:36.246 --> 00:03:38.870
And here's another, which shows
true synchronization, something

00:03:38.870 --> 00:03:41.390
almost everyone I've
talked to is excited about.

00:03:41.390 --> 00:03:44.429
Web Animations are so cool,
and you can use them right now.

00:03:44.429 --> 00:03:45.970
Not only does Chrome
have [INAUDIBLE]

00:03:45.970 --> 00:03:47.430
support for web
animations, but we

00:03:47.430 --> 00:03:49.910
launched an open source
implementation in JavaScript,

00:03:49.910 --> 00:03:52.730
which let's you use the
API in any one browser.

00:03:52.730 --> 00:03:55.410
That Polyfill let's you use
web animations right away,

00:03:55.410 --> 00:03:57.960
and we're doing all of this
work in public at the W3C

00:03:57.960 --> 00:04:00.310
to make sure all browser
vendors are on board.

00:04:00.310 --> 00:04:02.630
So take a look at the
Polyfill, the demos,

00:04:02.630 --> 00:04:03.830
hack through the code.

00:04:03.830 --> 00:04:06.210
Make your site shine with
the most powerful animation

00:04:06.210 --> 00:04:08.640
primitives available to
web developers today.

00:04:08.640 --> 00:04:10.840
I know you'll blow
people's socks off.

00:04:10.840 --> 00:04:13.460
I'm Alex Danilo, and I'm excited
to see what kinds of things

00:04:13.460 --> 00:04:15.950
you'll build using
Web Animations.

