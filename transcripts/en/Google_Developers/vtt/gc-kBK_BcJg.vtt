WEBVTT
Kind: captions
Language: en

00:00:03.040 --> 00:00:05.040
RYAN BOYD: Hi everyone,
welcome back.

00:00:05.040 --> 00:00:05.870
My name is Ryan Boyd.

00:00:05.870 --> 00:00:07.780
I'm a developer advocate at
Google in the Cloud Platform.

00:00:07.780 --> 00:00:11.240
And I'm serving as your
emcee here today.

00:00:11.240 --> 00:00:15.080
Next up, we have Chris from
Google and Rafael from

00:00:15.080 --> 00:00:18.130
RightScale to talk about
creating amazingly scalable

00:00:18.130 --> 00:00:20.520
games on the Google
Cloud Platform.

00:00:20.520 --> 00:00:23.710
This pretty much ties together a
lot of the technologies that

00:00:23.710 --> 00:00:27.200
we talked about in the first
session of the day today, ties

00:00:27.200 --> 00:00:30.370
together Compute Engine, App
Engine, BigQuery, and Storage

00:00:30.370 --> 00:00:33.580
all together to create games
which scale really well.

00:00:33.580 --> 00:00:35.860
So, Chris?

00:00:35.860 --> 00:00:37.290
CHRIS ELLIOTT: Thanks, Ryan.

00:00:37.290 --> 00:00:39.600
That definitely summarized
it pretty good.

00:00:39.600 --> 00:00:40.790
So my name's Chris Elliott.

00:00:40.790 --> 00:00:44.970
I'm a solutions architect on
the Cloud Platform team.

00:00:44.970 --> 00:00:46.420
It's kind of funny internally
at Google.

00:00:46.420 --> 00:00:48.450
We're a very engineering driven
company, so I often get

00:00:48.450 --> 00:00:50.150
asked, like, what do you do
as a solutions architect?

00:00:50.150 --> 00:00:52.270
People don't really understand
internally.

00:00:52.270 --> 00:00:54.540
But I essentially work with
people, with developers, to

00:00:54.540 --> 00:00:56.990
help me build massive
distributed systems to

00:00:56.990 --> 00:00:59.240
leverage the power of the
Google Cloud Platform.

00:00:59.240 --> 00:01:01.050
And specifically, I work very
closely with a lot of game

00:01:01.050 --> 00:01:03.640
developers who are just doing--
the amount of things

00:01:03.640 --> 00:01:05.850
you guys are doing
is mind-blowing.

00:01:05.850 --> 00:01:08.000
Especially when you combine a
platform like Google with

00:01:08.000 --> 00:01:11.510
amazing ideas, every day I'm
blown away with what people

00:01:11.510 --> 00:01:12.250
are creating.

00:01:12.250 --> 00:01:16.480
So this talk, Amazingly Scalable
Games on Google.

00:01:16.480 --> 00:01:20.630
And it really breaks down
to three core messages.

00:01:20.630 --> 00:01:23.040
The first one is really speed.

00:01:23.040 --> 00:01:25.870
Speed not only in terms of
development speed, of building

00:01:25.870 --> 00:01:28.490
up and deploying your game as
quick as possible by not

00:01:28.490 --> 00:01:31.340
focusing on building out the
core infrastructure, but also

00:01:31.340 --> 00:01:34.200
speed in terms of sheer
speed of the platform.

00:01:34.200 --> 00:01:36.480
Technology like Compute Engine,
developers are pushing

00:01:36.480 --> 00:01:39.220
in amazing ways and really
leveraging that powerful

00:01:39.220 --> 00:01:40.650
performance.

00:01:40.650 --> 00:01:42.410
Second up really is scale.

00:01:42.410 --> 00:01:45.900
Scale, in terms of the
amount of huge

00:01:45.900 --> 00:01:47.650
resources Google has available.

00:01:47.650 --> 00:01:50.780
At Google I/O we did sort of a
demo of how much that actually

00:01:50.780 --> 00:01:53.930
is, but also in terms of
scaling correctly.

00:01:53.930 --> 00:01:56.610
If you only have two users and
you're testing and getting the

00:01:56.610 --> 00:01:58.870
ball just rolling, you should
only be using the resources

00:01:58.870 --> 00:02:00.720
that are required for two.

00:02:00.720 --> 00:02:02.490
Vice versa, once you get to a
million users, you need to be

00:02:02.490 --> 00:02:04.300
able to seamlessly
scale up to that.

00:02:04.300 --> 00:02:05.580
And that's really
the underlying

00:02:05.580 --> 00:02:06.660
message of the talk.

00:02:06.660 --> 00:02:09.070
And lastly and most
importantly, it's

00:02:09.070 --> 00:02:12.180
heartbreaking when you see
amazing games with a huge

00:02:12.180 --> 00:02:15.530
amount of effort poured into
them have issues at launch

00:02:15.530 --> 00:02:17.580
because they become successful,
they're huge,

00:02:17.580 --> 00:02:19.680
everybody wants to play them
and the back end services

00:02:19.680 --> 00:02:21.180
cannot keep the game going.

00:02:21.180 --> 00:02:21.860
I mean, it's tragic.

00:02:21.860 --> 00:02:23.960
And it's really about surviving
that unexpected

00:02:23.960 --> 00:02:27.150
success, or surviving traffic
that's way beyond your

00:02:27.150 --> 00:02:30.230
craziest expectations and be
able to handle that so that

00:02:30.230 --> 00:02:32.290
everything works out smoothly.

00:02:32.290 --> 00:02:36.070
And on that sort of morbid
side note, the game plan

00:02:36.070 --> 00:02:38.710
really is to go over Google
Compute Engine because that

00:02:38.710 --> 00:02:41.320
really is a powerful feature for
enabling a lot of things

00:02:41.320 --> 00:02:43.910
developers need to
do on a platform.

00:02:43.910 --> 00:02:45.970
Next up is really
the main show.

00:02:45.970 --> 00:02:48.570
It's how do you tie together all
of these components of the

00:02:48.570 --> 00:02:51.930
Google Cloud Platform to solve
really challenging problems?

00:02:51.930 --> 00:02:54.340
How to leverage each of the
components to the best of

00:02:54.340 --> 00:02:56.660
their ability to focus on
solving the right problems and

00:02:56.660 --> 00:02:59.170
leveraging the technology to
where it performs best.

00:02:59.170 --> 00:03:01.150
And then finally, when you're
building on GC, RightScale is

00:03:01.150 --> 00:03:03.970
a very compelling technology to
help solve some challenging

00:03:03.970 --> 00:03:04.780
problems there.

00:03:04.780 --> 00:03:06.450
And we'll discuss how that
fits into the reference

00:03:06.450 --> 00:03:09.850
architecture as well as how
people are using it in general

00:03:09.850 --> 00:03:11.830
on Compute Engine.

00:03:11.830 --> 00:03:14.790
So without further ado,
let's jump into the

00:03:14.790 --> 00:03:16.000
Compute Engine Overview.

00:03:16.000 --> 00:03:20.720
And with this, it's a service we
announced at last I/O, and

00:03:20.720 --> 00:03:22.110
it's infrastructure
as a service.

00:03:22.110 --> 00:03:24.070
You get raw, virtual
machines to run in

00:03:24.070 --> 00:03:25.270
Google's Data Center.

00:03:25.270 --> 00:03:27.500
And I mean, honestly, is there
anybody in this room who would

00:03:27.500 --> 00:03:30.545
not want their code executing
in a data center like that?

00:03:30.545 --> 00:03:33.410
That's absolutely gorgeous.

00:03:33.410 --> 00:03:35.715
I've seen some pretty crazy data
centers at past jobs that

00:03:35.715 --> 00:03:37.100
are just not where you'd
want your code running.

00:03:37.100 --> 00:03:40.440
And that is one awesome
looking data center.

00:03:40.440 --> 00:03:42.540
There might have been a little
bit of extra lights added for

00:03:42.540 --> 00:03:47.020
the photo shoot, but nobody's
confirmed or denied that yet.

00:03:47.020 --> 00:03:48.960
But really what your looking
at, leveraging with Compute

00:03:48.960 --> 00:03:51.790
Engine, is utilizing Google's
scale, their speed.

00:03:51.790 --> 00:03:54.000
And actually one of the most
impressive things is the

00:03:54.000 --> 00:03:55.180
global footprint.

00:03:55.180 --> 00:03:57.400
The fact that we have fiber
connecting all of our data

00:03:57.400 --> 00:04:00.150
centers, you start to lose the
concept of having regions that

00:04:00.150 --> 00:04:01.030
are completely independent.

00:04:01.030 --> 00:04:02.260
You can actually have
really great

00:04:02.260 --> 00:04:03.730
performance between regions.

00:04:03.730 --> 00:04:06.090
And you can view it really as
just an interconnected grid of

00:04:06.090 --> 00:04:07.550
data centers all
over the world.

00:04:07.550 --> 00:04:11.850
And when you utilize that,
it's very compelling.

00:04:11.850 --> 00:04:14.230
And throughout this
presentation, there are really

00:04:14.230 --> 00:04:17.670
four guiding principles that
come up time and time again.

00:04:17.670 --> 00:04:19.050
Consistency is huge.

00:04:19.050 --> 00:04:21.779
When you're building out on a
cloud platform, if you do an

00:04:21.779 --> 00:04:24.030
implementation, a proof of
concept, you need to expect

00:04:24.030 --> 00:04:26.450
that exact same performance
from those instances

00:04:26.450 --> 00:04:29.870
regardless of there's one or
100,000 instances spun up.

00:04:29.870 --> 00:04:32.660
And with that, it's almost
challenging some preconceived

00:04:32.660 --> 00:04:34.900
notions people have about
cloud computing.

00:04:34.900 --> 00:04:37.890
There's some practices common
on other platforms where you

00:04:37.890 --> 00:04:41.160
spin up 1,000 instances, you run
performance tests, you see

00:04:41.160 --> 00:04:42.420
what gets to disks.

00:04:42.420 --> 00:04:43.820
And if it's a terrible
performance,

00:04:43.820 --> 00:04:44.790
you throw it away.

00:04:44.790 --> 00:04:46.070
Don't do that on
Compute Engine.

00:04:46.070 --> 00:04:47.400
You're wasting your
time and money.

00:04:47.400 --> 00:04:50.440
Because the instance should
perform exactly the same

00:04:50.440 --> 00:04:52.630
regardless of where it is and
what's running on it.

00:04:52.630 --> 00:04:55.870
We strive always to go for
consistency and have a

00:04:55.870 --> 00:04:57.750
consistent level of performance
as opposed to a

00:04:57.750 --> 00:04:59.420
massive variable swing.

00:04:59.420 --> 00:05:01.740
And also very important
is security.

00:05:01.740 --> 00:05:04.860
I mean, I also have not got
anybody to confirm about the

00:05:04.860 --> 00:05:06.650
stormtrooper in our
data center.

00:05:06.650 --> 00:05:08.020
But actually R2-D2--

00:05:08.020 --> 00:05:11.960
I guarantee there'll be R2-D2s
in our data centers.

00:05:11.960 --> 00:05:13.240
We're huge fans of robots.

00:05:13.240 --> 00:05:15.850
And even at my desk back
in California--

00:05:15.850 --> 00:05:17.480
well, Mountain View--

00:05:17.480 --> 00:05:21.085
I have a Nerf robot that is
telepresence controlled.

00:05:21.085 --> 00:05:23.460
I can drive it anywhere on
campus and troll my coworkers

00:05:23.460 --> 00:05:24.730
whether or not I'm in and out.

00:05:24.730 --> 00:05:27.350
So I would expect the exact same
crazy guys in the data

00:05:27.350 --> 00:05:29.710
centers to be spending their
spare weekends hacking on

00:05:29.710 --> 00:05:30.420
robots as well.

00:05:30.420 --> 00:05:32.190
So that's pretty much
guaranteed.

00:05:32.190 --> 00:05:34.580
But really with Compute Engine,
it's about allowing

00:05:34.580 --> 00:05:37.380
developers to do what they want
to be open and flexible

00:05:37.380 --> 00:05:39.810
and really allow them to benefit
from Google's proven

00:05:39.810 --> 00:05:40.760
technology.

00:05:40.760 --> 00:05:43.730
And so these principles come
up time and time again.

00:05:43.730 --> 00:05:46.520
And gaming customers are
really noticing this.

00:05:46.520 --> 00:05:49.605
Kunal from Phyken Media was
moving all their game servers

00:05:49.605 --> 00:05:50.500
to Compute Engine.

00:05:50.500 --> 00:05:51.370
And it was amazing.

00:05:51.370 --> 00:05:54.060
Our second time we talked he
came up and he's like,

00:05:54.060 --> 00:05:56.590
everything is just noticeably
faster on Compute Engine.

00:05:56.590 --> 00:05:58.200
What are you guys doing?

00:05:58.200 --> 00:06:00.360
I forgot to mention the amazing
network performance.

00:06:00.360 --> 00:06:02.950
And it's great when it's not a
matter of looking the logs and

00:06:02.950 --> 00:06:04.310
seeing no second improvement.

00:06:04.310 --> 00:06:05.880
It's actually in-game from
the application.

00:06:05.880 --> 00:06:07.815
When you click on an action,
it responds faster.

00:06:07.815 --> 00:06:09.860
It performs as you'd expect.

00:06:09.860 --> 00:06:11.820
And this kind of message comes
up again and again from

00:06:11.820 --> 00:06:13.100
everybody we talked to.

00:06:13.100 --> 00:06:14.840
So it's really cool stuff what
they're able to do there.

00:06:14.840 --> 00:06:17.540
And it's amazing when it's not
even a placebo effect, it's

00:06:17.540 --> 00:06:19.040
actually people experiencing
it and then

00:06:19.040 --> 00:06:20.650
telling you about it.

00:06:20.650 --> 00:06:22.120
It's great to see.

00:06:22.120 --> 00:06:25.480
And so at a high level overview,
here are the four

00:06:25.480 --> 00:06:27.230
core components of
Compute Engine.

00:06:29.820 --> 00:06:32.580
This is not a super
deep technical

00:06:32.580 --> 00:06:33.510
overview of Compute Engine.

00:06:33.510 --> 00:06:35.400
I can talk for hours about
all these components.

00:06:35.400 --> 00:06:37.100
And if you're interested in
that, I'd love to talk to you

00:06:37.100 --> 00:06:37.790
afterwards.

00:06:37.790 --> 00:06:38.880
It's more of a higher
level overview.

00:06:38.880 --> 00:06:41.130
And if you're interested in much
more detailed content,

00:06:41.130 --> 00:06:43.270
there's some great sessions from
I/O last year, look to

00:06:43.270 --> 00:06:44.540
this year's I/O as well.

00:06:44.540 --> 00:06:48.850
And also the developer docs
has a ton of detail.

00:06:48.850 --> 00:06:51.480
So this is just a high level
overview of how the components

00:06:51.480 --> 00:06:52.870
fit together and what
you look at.

00:06:52.870 --> 00:06:55.700
And so at the core of it is
the Linux virtual machines

00:06:55.700 --> 00:06:57.560
that are running in
the data center.

00:06:57.560 --> 00:07:00.310
That is the speed, the
core performance.

00:07:00.310 --> 00:07:02.280
That is really the heart
of the system.

00:07:02.280 --> 00:07:04.760
And the other technology's
really about augmenting that

00:07:04.760 --> 00:07:07.450
and helping solve challenging
problems by using that core,

00:07:07.450 --> 00:07:09.600
raw computing power.

00:07:09.600 --> 00:07:13.720
And so on that, you're looking
at three types of disk store

00:07:13.720 --> 00:07:17.050
for when you're storing objects
or files, et cetera.

00:07:17.050 --> 00:07:20.460
Persistent disk is very common
for mission critical data.

00:07:20.460 --> 00:07:22.350
This lives beyond the life
of the instance.

00:07:22.350 --> 00:07:24.240
And what's really interesting
about persistent disk is

00:07:24.240 --> 00:07:27.480
performance is good
by default.

00:07:27.480 --> 00:07:29.360
And also, it's consistent.

00:07:29.360 --> 00:07:31.550
The level of performance is
exactly the same regarding

00:07:31.550 --> 00:07:32.970
when you're using it,
how many you have,

00:07:32.970 --> 00:07:33.930
where they're attached.

00:07:33.930 --> 00:07:35.870
And so you can rely on that
when building it out.

00:07:35.870 --> 00:07:37.750
And also, it's all encrypted
by rest.

00:07:37.750 --> 00:07:39.565
And so there's some features
that are really compelling a

00:07:39.565 --> 00:07:41.330
lot of people to do things they
hadn't been able to do

00:07:41.330 --> 00:07:43.360
before as easy as this.

00:07:43.360 --> 00:07:45.340
The other option is local
or ephemeral disk.

00:07:45.340 --> 00:07:46.980
And this really is if you
need to write logs

00:07:46.980 --> 00:07:48.460
out, scratch disk.

00:07:48.460 --> 00:07:50.290
It lives and dies with
the instance.

00:07:50.290 --> 00:07:52.730
And on the consistency as well,
if you have four cores,

00:07:52.730 --> 00:07:54.510
you actually have your own
dedicated spindle.

00:07:54.510 --> 00:07:56.330
So you're the only project
using that spindle.

00:07:56.330 --> 00:08:00.220
So you can rely on the
performance of that as well.

00:08:00.220 --> 00:08:01.950
But once again, it lives and
dies with the instance.

00:08:01.950 --> 00:08:04.040
We can never get that back,
especially since all the

00:08:04.040 --> 00:08:06.540
data's encrypted at rest.

00:08:06.540 --> 00:08:09.540
And finally, the last really big
component of the system is

00:08:09.540 --> 00:08:10.830
Google Cloud Storage.

00:08:10.830 --> 00:08:12.740
And when you're building up
large scale distributed

00:08:12.740 --> 00:08:15.040
systems, this is really where
you need to look to store game

00:08:15.040 --> 00:08:17.450
files, game binaries, all
the assets there.

00:08:17.450 --> 00:08:19.680
Or if you have all these log
files on your local disk,

00:08:19.680 --> 00:08:22.440
keeping them stored long term
in Cloud Storage to use for

00:08:22.440 --> 00:08:23.960
MapReduce pipelines later on.

00:08:23.960 --> 00:08:25.600
That's really how to think
about these three core

00:08:25.600 --> 00:08:27.260
technologies and how
they fit together.

00:08:27.260 --> 00:08:31.330
And there's more on that later
in the reference architecture.

00:08:31.330 --> 00:08:31.990
The networking.

00:08:31.990 --> 00:08:35.260
This is huge for gaming
companies, and it's opening up

00:08:35.260 --> 00:08:36.230
new possibilities.

00:08:36.230 --> 00:08:37.870
The latency to connect
to Compute Engine is

00:08:37.870 --> 00:08:39.850
fantastically fast.

00:08:39.850 --> 00:08:42.330
I can't believe I just said
fantastically fast.

00:08:42.330 --> 00:08:43.500
I think I stole that
from Michael

00:08:43.500 --> 00:08:45.370
Manoochehri who's up later.

00:08:45.370 --> 00:08:46.670
He loves using that
word when talking

00:08:46.670 --> 00:08:47.760
about BigQuery as well.

00:08:47.760 --> 00:08:49.600
But that's a side
note I guess.

00:08:49.600 --> 00:08:51.620
But the networking performance
is great.

00:08:51.620 --> 00:08:54.330
And also within regions, the
private network, being able to

00:08:54.330 --> 00:08:57.010
have a direct private fiber
network between all of your

00:08:57.010 --> 00:09:00.380
instances and regions allows for
very impressive throughput

00:09:00.380 --> 00:09:02.020
and very impressive latency.

00:09:02.020 --> 00:09:05.490
And so the technology is there
to enable these new kind of

00:09:05.490 --> 00:09:06.330
experiences with gaming.

00:09:06.330 --> 00:09:08.532
And it also makes ones that
previously didn't fit great in

00:09:08.532 --> 00:09:11.010
the cloud actually work well.

00:09:11.010 --> 00:09:12.570
And the last aspect
really is the API.

00:09:12.570 --> 00:09:14.800
And this is built on tried
and true Google

00:09:14.800 --> 00:09:16.240
RESTful API OAuth 2.

00:09:16.240 --> 00:09:18.240
If you've ever used any Google
API , you know exactly what to

00:09:18.240 --> 00:09:19.140
expect here.

00:09:19.140 --> 00:09:23.320
And as we're Google, we build on
top of that exact same API

00:09:23.320 --> 00:09:26.080
when putting together command
line tools, building out

00:09:26.080 --> 00:09:27.070
libraries, et cetera.

00:09:27.070 --> 00:09:28.980
So it's robust, it's true.

00:09:28.980 --> 00:09:31.530
And it allows you to actually
access all of these items as

00:09:31.530 --> 00:09:32.460
you would expect.

00:09:32.460 --> 00:09:34.200
And so that's really
the Compute

00:09:34.200 --> 00:09:35.370
Engine high level overview.

00:09:35.370 --> 00:09:37.860
But really, as a solutions
architect, the key thing is

00:09:37.860 --> 00:09:39.840
thinking that it's not
just Compute Engine.

00:09:39.840 --> 00:09:41.740
When building out on the
platform, you need to think

00:09:41.740 --> 00:09:43.780
about all of the different
technologies that are provided

00:09:43.780 --> 00:09:45.710
to make sure you leverage the
ones that are best for doing

00:09:45.710 --> 00:09:47.180
the job you're actually
tackling.

00:09:47.180 --> 00:09:50.280
And so the Compute Engine
interfaces with a lot of the

00:09:50.280 --> 00:09:51.940
other products we
provide as well.

00:09:51.940 --> 00:09:54.280
For example, if you want to use
Queues from App Engine,

00:09:54.280 --> 00:09:56.590
which was talked about earlier,
or if you want to put

00:09:56.590 --> 00:09:59.670
files to Cloud Storage, the
command line utility to do

00:09:59.670 --> 00:10:02.000
that is already set-- you can
have that set up by default

00:10:02.000 --> 00:10:02.880
when creating an instance.

00:10:02.880 --> 00:10:04.500
So there's a lot of seamless
connections here.

00:10:04.500 --> 00:10:06.470
And we're always working to make
that even more seamless

00:10:06.470 --> 00:10:08.790
in the future.

00:10:08.790 --> 00:10:11.310
And the last couple of parts on
the Compute Engine overview

00:10:11.310 --> 00:10:14.870
really is giving examples of
what people have seen that

00:10:14.870 --> 00:10:17.540
really put facts behind these
things I'm saying.

00:10:17.540 --> 00:10:19.640
I could easily stand up here
and say all these amazing

00:10:19.640 --> 00:10:21.140
things, then we get in and it's
not what you experience.

00:10:21.140 --> 00:10:22.180
But this is actually
what people are

00:10:22.180 --> 00:10:23.700
experiencing on the platform.

00:10:23.700 --> 00:10:26.130
This is from Ed with PA
consulting, and they work

00:10:26.130 --> 00:10:27.960
closely on a product
called Chrome Jam.

00:10:27.960 --> 00:10:30.630
Has anybody tried Chrome
Jam in the audience?

00:10:30.630 --> 00:10:31.220
You should try it.

00:10:31.220 --> 00:10:32.440
It's fantastic.

00:10:32.440 --> 00:10:33.980
It basically allows
you to go in.

00:10:33.980 --> 00:10:36.640
And you request a place
to jam with friends.

00:10:36.640 --> 00:10:38.870
You send an invite to three
friends, and you all get

00:10:38.870 --> 00:10:40.240
guitars, drums, et cetera.

00:10:40.240 --> 00:10:43.220
And you can all play real-time
with the instruments and have

00:10:43.220 --> 00:10:44.240
a jam session, essentially.

00:10:44.240 --> 00:10:45.850
And they've done a lot of work,
actually, making that

00:10:45.850 --> 00:10:47.270
game play really fun.

00:10:47.270 --> 00:10:50.630
And so basically, this is the
quote he said after trying it

00:10:50.630 --> 00:10:53.180
out on Compute Engine, "you
latency crazy low.

00:10:53.180 --> 00:10:54.860
You should pat the Compute
Engine team on the back for

00:10:54.860 --> 00:10:55.380
that."

00:10:55.380 --> 00:10:57.530
After I got this quote I sent
it off to the Compute Engine

00:10:57.530 --> 00:11:00.250
networking team and let them
know that people are still

00:11:00.250 --> 00:11:02.550
appreciating the amazing hard
work they're doing.

00:11:02.550 --> 00:11:04.140
It's blowing away everybody
when they

00:11:04.140 --> 00:11:05.010
first get on the platform.

00:11:05.010 --> 00:11:07.170
And with this, an interesting
note is they actually tried

00:11:07.170 --> 00:11:07.770
implementing this.

00:11:07.770 --> 00:11:10.085
The requirements for latency are
extremely tight when they

00:11:10.085 --> 00:11:11.680
were dealing with
real-time audio.

00:11:11.680 --> 00:11:13.940
And the fact of the matter is,
it wasn't possible on some

00:11:13.940 --> 00:11:16.130
other platforms to even run this
technology, but it worked

00:11:16.130 --> 00:11:19.450
on Computer Engine, which
was really, really cool.

00:11:19.450 --> 00:11:22.000
And this one is actually
really relevant

00:11:22.000 --> 00:11:23.000
for gaming as well.

00:11:23.000 --> 00:11:26.650
MapR broke the Terasort world
record on Compute Engine a

00:11:26.650 --> 00:11:28.360
couple months ago.

00:11:28.360 --> 00:11:30.750
And what's really amazing and
relevant about this is the

00:11:30.750 --> 00:11:33.780
fact that the previous record
was held by data centers with

00:11:33.780 --> 00:11:36.950
dedicate machines in their
own environment.

00:11:36.950 --> 00:11:39.030
And it was actually beaten
by a cloud platform.

00:11:39.030 --> 00:11:41.320
Nobody would have expected this
was even possible just

00:11:41.320 --> 00:11:42.700
because of the past experiences

00:11:42.700 --> 00:11:43.530
working with cloud.

00:11:43.530 --> 00:11:45.910
But that consistency, the
performance, the networking

00:11:45.910 --> 00:11:47.800
allows you to have all of
your instances run.

00:11:47.800 --> 00:11:49.755
You didn't have any idle
instances getting stuck or

00:11:49.755 --> 00:11:50.930
hung because of poor
performance.

00:11:50.930 --> 00:11:53.710
Everything spun up, processed,
shut down, and allowed them to

00:11:53.710 --> 00:11:56.030
smash this record with a third
of the number of cores.

00:11:56.030 --> 00:11:57.960
And so in thinking about
building out game services,

00:11:57.960 --> 00:12:00.090
and if you're actually in that
situation of we want to build

00:12:00.090 --> 00:12:02.610
our dedicated capacity,
seriously look at cloud

00:12:02.610 --> 00:12:07.000
platform for potentially
allowing you to have provision

00:12:07.000 --> 00:12:08.840
capacity where the game
is successful.

00:12:08.840 --> 00:12:10.650
If you end up having a bunch of
capacity, you've probably

00:12:10.650 --> 00:12:13.110
heard this before, in East Coast
and your games end up

00:12:13.110 --> 00:12:14.570
being a huge success in Europe
and you don't have the

00:12:14.570 --> 00:12:17.260
capacity there, something like
Cloud Platform is a perfect

00:12:17.260 --> 00:12:20.260
way to start scaling up once you
verify the core technology

00:12:20.260 --> 00:12:22.190
works great on the platform.

00:12:22.190 --> 00:12:24.170
And really, the last one, this
is an article that came out

00:12:24.170 --> 00:12:26.440
recently that when
we saw it posted

00:12:26.440 --> 00:12:27.710
everybody internally just--

00:12:27.710 --> 00:12:29.830
we get really fired up about
this when we see people

00:12:29.830 --> 00:12:32.160
externally excited about
the platform.

00:12:32.160 --> 00:12:34.840
And this was from Scalar,
Sebastian.

00:12:34.840 --> 00:12:35.960
He put up this article.

00:12:35.960 --> 00:12:39.300
And the inter-region latency
was under 23 milliseconds

00:12:39.300 --> 00:12:40.760
between two regions.

00:12:40.760 --> 00:12:42.740
That actually opens
up possibilities.

00:12:42.740 --> 00:12:45.240
For example, if you're doing
real-time gaming, if you're

00:12:45.240 --> 00:12:47.930
over 90 milliseconds or near 90
milliseconds, by the time

00:12:47.930 --> 00:12:49.680
it hits the player, their
latency is going to be so high

00:12:49.680 --> 00:12:52.220
it will remind them of being
back on 56K modems.

00:12:52.220 --> 00:12:53.780
And nobody's going
to play that.

00:12:53.780 --> 00:12:56.720
But if you actually have 23
milliseconds between data

00:12:56.720 --> 00:12:59.310
centers consistent, that allows
you to actually do some

00:12:59.310 --> 00:13:01.140
new things there as well with
actually connecting the

00:13:01.140 --> 00:13:02.580
instances across zones.

00:13:02.580 --> 00:13:04.540
And also if you look at the
bandwidth, the bandwidth is

00:13:04.540 --> 00:13:07.060
off the charts, 300 megabits
per second.

00:13:07.060 --> 00:13:09.760
And that's really, once again,
telling the story of the

00:13:09.760 --> 00:13:11.400
Google Global Network there.

00:13:11.400 --> 00:13:13.900
And this one, although it
technically doesn't affect the

00:13:13.900 --> 00:13:16.570
core performance you see running
the game servers, the

00:13:16.570 --> 00:13:19.380
time to boot up instances
is exceptionally fast.

00:13:19.380 --> 00:13:22.890
And I was talking to Rafael from
RightScale who's going to

00:13:22.890 --> 00:13:25.830
come up later, and I couldn't
remember the last time I

00:13:25.830 --> 00:13:27.800
actually sat around waiting
for an instance to be

00:13:27.800 --> 00:13:28.940
provisioned.

00:13:28.940 --> 00:13:30.560
I go on the web UI, spin
up some instances.

00:13:30.560 --> 00:13:32.760
By the time I get my terminal
up and go to SSH in, the

00:13:32.760 --> 00:13:34.940
instance is already
there ready to go.

00:13:34.940 --> 00:13:39.160
So it's new ways of thinking
that are really being observed

00:13:39.160 --> 00:13:41.700
as well by people when they
get up and running.

00:13:41.700 --> 00:13:44.370
And so some of you may have
tried for access.

00:13:44.370 --> 00:13:46.570
The response has been
overwhelming.

00:13:46.570 --> 00:13:48.450
But game developers
are a fantastic

00:13:48.450 --> 00:13:49.560
fit for Compute Engine.

00:13:49.560 --> 00:13:50.530
It's currently limited
to preview.

00:13:50.530 --> 00:13:52.360
But if you'd like access,
either talk to me right

00:13:52.360 --> 00:13:54.170
afterwards, we can get you in.

00:13:54.170 --> 00:13:56.230
Game developers are a perfect
fit for the platform.

00:13:56.230 --> 00:13:57.650
Otherwise, sign up for
the newsletter.

00:13:57.650 --> 00:13:58.920
Follow the blog.

00:13:58.920 --> 00:14:01.890
Check out cloud.google.com for
latest updates, or send me

00:14:01.890 --> 00:14:04.610
email after the fact if you have
an interesting use case.

00:14:04.610 --> 00:14:05.990
It's just great to hear
from game developers.

00:14:05.990 --> 00:14:07.510
And we can definitely
get in the platform.

00:14:07.510 --> 00:14:09.350
I wouldn't be up here talking
about Compute Engine, how

00:14:09.350 --> 00:14:11.810
amazing it is, and then
not let anybody in.

00:14:11.810 --> 00:14:13.060
That would be ridiculous evil.

00:14:13.060 --> 00:14:15.410
And last time I checked,
we weren't an evil

00:14:15.410 --> 00:14:16.540
company as of yet.

00:14:16.540 --> 00:14:18.230
It's pretty good stuff.

00:14:18.230 --> 00:14:20.670
Not that we ever plan to be.

00:14:20.670 --> 00:14:27.330
So with that this is really
the main course.

00:14:27.330 --> 00:14:30.120
How do you tie all of the
components together to solve

00:14:30.120 --> 00:14:35.540
really challenging scalability
problems faced by developers?

00:14:35.540 --> 00:14:39.530
And with that we had to find a
game to demonstrate this on.

00:14:39.530 --> 00:14:41.600
And this was a perfect
candidate.

00:14:41.600 --> 00:14:43.250
There's a game called GRITS
that they showed

00:14:43.250 --> 00:14:44.880
off at I/O last year.

00:14:44.880 --> 00:14:45.900
It was fantastic.

00:14:45.900 --> 00:14:49.360
It was player versus player,
real-time, no JS on Compute

00:14:49.360 --> 00:14:50.565
Engine using HTML5.

00:14:50.565 --> 00:14:53.740
And it was meant to show off
the performance of what web

00:14:53.740 --> 00:14:55.570
technology can actually do.

00:14:55.570 --> 00:14:57.780
And so we took this core game
that had some scalability

00:14:57.780 --> 00:15:00.150
built into it and applied a lot
of the core concepts from

00:15:00.150 --> 00:15:02.620
this reference architecture to
this existing game, which

00:15:02.620 --> 00:15:05.140
Google owned all the source
codes, so it made licensing

00:15:05.140 --> 00:15:06.560
not a problem at all.

00:15:06.560 --> 00:15:08.110
Actually, Fred in the
audience worked on

00:15:08.110 --> 00:15:09.130
some of that as well.

00:15:09.130 --> 00:15:11.970
And so it's an amazing point to
start to demonstrate, this

00:15:11.970 --> 00:15:14.000
huge amount of effort spent
creating this game.

00:15:14.000 --> 00:15:15.900
Just a little bit more, an extra
week or two, you can

00:15:15.900 --> 00:15:18.120
start to apply some of these
concepts to allow this to

00:15:18.120 --> 00:15:20.540
seamlessly autoscale in the
background and handle a huge

00:15:20.540 --> 00:15:22.550
amount of traffic.

00:15:22.550 --> 00:15:24.240
And so it's a top down,
robot shooting game.

00:15:24.240 --> 00:15:24.760
It's awesome.

00:15:24.760 --> 00:15:26.500
Check it out if you
have a chance.

00:15:26.500 --> 00:15:27.890
There'll be more links
at the end.

00:15:27.890 --> 00:15:30.250
And so this gaming reference
architecture really is about

00:15:30.250 --> 00:15:34.350
creating real-time multiplayer
on dedicated servers, having

00:15:34.350 --> 00:15:36.430
your own binaries running on
Compute Engine, providing

00:15:36.430 --> 00:15:39.890
low-latency, TCIP full duplex
connections to handle all of

00:15:39.890 --> 00:15:41.890
that streaming, running whatever
existing software you

00:15:41.890 --> 00:15:45.610
want, while providing the
scalability to go up to

00:15:45.610 --> 00:15:46.890
millions of users,
handle the huge

00:15:46.890 --> 00:15:48.480
number of incoming requests.

00:15:48.480 --> 00:15:50.530
And really it's about building
a full-featured gameplay

00:15:50.530 --> 00:15:52.250
experience.

00:15:52.250 --> 00:15:54.680
It's about having a store,
having a marketplace, having

00:15:54.680 --> 00:15:55.990
things to draw players
back and thinking

00:15:55.990 --> 00:15:56.990
about the whole package.

00:15:56.990 --> 00:15:59.950
And this also ties together
all the components of the

00:15:59.950 --> 00:16:02.050
Cloud platform, like
Ryan mentioned.

00:16:02.050 --> 00:16:04.330
From using App Engine to head
a lot of the user-facing

00:16:04.330 --> 00:16:08.100
scalable aspects to if you have
100,000 servers and they

00:16:08.100 --> 00:16:10.040
need to actually connect to a
source of truth, using App

00:16:10.040 --> 00:16:12.840
Engine for that and scaling as
well accordingly and things

00:16:12.840 --> 00:16:15.880
like Cloud Storage for large
object store log files.

00:16:15.880 --> 00:16:19.200
BigQuery, which is an amazing
tool for real-time analytics

00:16:19.200 --> 00:16:21.770
of ridiculously huge
data sets.

00:16:21.770 --> 00:16:23.460
And we actually don't use Cloud
SQL in this as well.

00:16:23.460 --> 00:16:24.927
But it's exactly what
you'd expect from

00:16:24.927 --> 00:16:26.180
a managed SQL database.

00:16:26.180 --> 00:16:27.750
And so if you're really familiar
with that technology,

00:16:27.750 --> 00:16:31.500
you have a good use case that
fits within the scalability

00:16:31.500 --> 00:16:32.620
constraints of MySQL.

00:16:32.620 --> 00:16:34.550
It's a great fit
there as well.

00:16:34.550 --> 00:16:37.670
So to get started, you have
to be game client.

00:16:37.670 --> 00:16:40.800
I'm sure there's no
surprises here.

00:16:40.800 --> 00:16:42.270
The only question I've got,
actually-- we didn't have time

00:16:42.270 --> 00:16:44.220
to change it-- is that that
Android phone looks a lot like

00:16:44.220 --> 00:16:47.000
an iPhone, completely
accidental.

00:16:47.000 --> 00:16:49.690
But so it's really about
regardless of whatever phone

00:16:49.690 --> 00:16:52.390
you want to use, whether it's
iOS, Android, you have Android

00:16:52.390 --> 00:16:53.570
application.

00:16:53.570 --> 00:16:56.580
Or if you are developing
console games, or games

00:16:56.580 --> 00:16:59.310
running on PC clients, or if
you're just a web browser

00:16:59.310 --> 00:17:01.420
game, regardless you have to
start somewhere with the core

00:17:01.420 --> 00:17:04.210
gaming aspect and building out
that client, whether it's

00:17:04.210 --> 00:17:06.200
downloaded or obtained
over the web.

00:17:06.200 --> 00:17:08.880
And so for GRITS, this is
what was provided by

00:17:08.880 --> 00:17:09.660
the existing product.

00:17:09.660 --> 00:17:10.950
And so there's an Android
application.

00:17:10.950 --> 00:17:12.359
This just shows you
the controls.

00:17:12.359 --> 00:17:15.335
And then also, when you connect
to the IP address

00:17:15.335 --> 00:17:17.240
there, you're pretty
much good to go.

00:17:17.240 --> 00:17:21.010
And you're jumping in and
playing a server connected.

00:17:21.010 --> 00:17:23.310
And you pull all the data
content from the server as

00:17:23.310 --> 00:17:24.420
well and play all
in the browser.

00:17:24.420 --> 00:17:27.400
That was the really awesome
thing about GRITS.

00:17:27.400 --> 00:17:30.610
And so once you have the client
installed, you have to

00:17:30.610 --> 00:17:32.020
go in and find a match.

00:17:32.020 --> 00:17:33.750
As everyone in the audience
knows, server matchmaking can

00:17:33.750 --> 00:17:37.270
be ridiculously challenging
depending on the techniques

00:17:37.270 --> 00:17:39.650
you use, the ways you go
about implementing it.

00:17:39.650 --> 00:17:41.520
And the key aspect here is
really leveraging the

00:17:41.520 --> 00:17:43.020
scalability of App Engine.

00:17:43.020 --> 00:17:44.690
We highlighted a lot of this
in the keynote and the key

00:17:44.690 --> 00:17:45.570
components here.

00:17:45.570 --> 00:17:48.020
But really it's technology like
the App Engine Data Store

00:17:48.020 --> 00:17:51.370
which is a huge NoSQL database
built on top of Megastore that

00:17:51.370 --> 00:17:54.220
can scale up to serve millions
and millions of users.

00:17:54.220 --> 00:17:57.050
At last I/O we said it was over
two trillion operations

00:17:57.050 --> 00:17:59.090
per month, I believe,
or per week.

00:17:59.090 --> 00:18:01.690
And I mean that, as you can
expect, can continue to grow.

00:18:01.690 --> 00:18:04.400
And so that is one of the key
components to build out a lot

00:18:04.400 --> 00:18:05.250
of this logic.

00:18:05.250 --> 00:18:07.140
Initially, when you put Memcache
on top for a lot of

00:18:07.140 --> 00:18:10.000
real-time accessing, if when you
have server data that is

00:18:10.000 --> 00:18:12.260
frequently accessed, memcache is
a free layer to put on top

00:18:12.260 --> 00:18:13.880
of that to help scale
up there.

00:18:13.880 --> 00:18:16.260
And also if you're doing a lot
of background processing, if

00:18:16.260 --> 00:18:18.960
you're keeping lists of
servers under certain

00:18:18.960 --> 00:18:21.425
categories updated, you can use
things like Task Queues

00:18:21.425 --> 00:18:23.120
and background processes
for that.

00:18:23.120 --> 00:18:25.790
And so really those are the core
technologies to use when

00:18:25.790 --> 00:18:27.210
building up the logic.

00:18:27.210 --> 00:18:29.390
Whether it's something like
having all of your servers

00:18:29.390 --> 00:18:32.030
maintain health checks with
App Engine and having that

00:18:32.030 --> 00:18:36.380
status also in the Data Store
for future reference--

00:18:36.380 --> 00:18:38.770
at the end of the day, it's
about what do you return from

00:18:38.770 --> 00:18:40.760
the server matchmaking, whether
it's a simple quick

00:18:40.760 --> 00:18:43.620
match, give me the best match
with players of my skill, or

00:18:43.620 --> 00:18:46.780
they're actually looking at
building out something that

00:18:46.780 --> 00:18:49.600
returns a large list of IP
addresses to the client to

00:18:49.600 --> 00:18:51.150
allow them to find the
low-latency ones

00:18:51.150 --> 00:18:52.320
that are close by.

00:18:52.320 --> 00:18:55.800
That's really the core aspect
there of server matchmaking.

00:18:55.800 --> 00:18:58.060
And there are lots of
interesting techniques if you

00:18:58.060 --> 00:18:59.550
want to talk about that after
the fact as well.

00:18:59.550 --> 00:19:01.450
And actually, Cloud Endpoint's
here as well.

00:19:01.450 --> 00:19:04.800
It's kind of fun in this diagram
having a cloud and

00:19:04.800 --> 00:19:05.670
then leaving the cloud.

00:19:05.670 --> 00:19:08.430
All the right hand side is in
the cloud for the most part.

00:19:08.430 --> 00:19:10.640
But Cloud Endpoint is a
fantastic technology for

00:19:10.640 --> 00:19:13.870
having a strong RESTful API
around App Engine to provide a

00:19:13.870 --> 00:19:16.250
way of scaling out, to have
authentication built in.

00:19:16.250 --> 00:19:19.230
And there's also libraries
available for all the Android,

00:19:19.230 --> 00:19:22.110
iOS, JavaScript as well to
make that really easy and

00:19:22.110 --> 00:19:23.610
seamless to get up and
running with these

00:19:23.610 --> 00:19:24.620
powerful RESTful APIs.

00:19:24.620 --> 00:19:26.620
Because a lot of people building
an App Engine put a

00:19:26.620 --> 00:19:27.290
RESTful API.

00:19:27.290 --> 00:19:30.390
And now that's provided to you
leveraging Google's experience

00:19:30.390 --> 00:19:32.530
building out these API.

00:19:32.530 --> 00:19:35.700
And so for GRITS, we took a
reasonably straightforward

00:19:35.700 --> 00:19:37.670
approach to implementing this.

00:19:37.670 --> 00:19:40.270
And so this is what we added to
the existing application.

00:19:40.270 --> 00:19:43.110
So essentially, when you log in
you either can do a Quick

00:19:43.110 --> 00:19:44.890
Game, just give me a server
that has players on it.

00:19:44.890 --> 00:19:47.180
Or you can also see a list of
all the servers you have here.

00:19:47.180 --> 00:19:48.080
Right now there's only five.

00:19:48.080 --> 00:19:50.730
But as this scales up the
servers are added to the

00:19:50.730 --> 00:19:51.520
bottom of the list.

00:19:51.520 --> 00:19:54.110
And so you can currently see
the IP addresses, how many

00:19:54.110 --> 00:19:55.790
players are currently active.

00:19:55.790 --> 00:19:57.380
You can go in and access
the admin as well.

00:19:57.380 --> 00:19:58.310
So it's fairly basic.

00:19:58.310 --> 00:20:00.120
But it gives you a general idea
of how App Engine is the

00:20:00.120 --> 00:20:02.790
spot you go to get matched
with your server.

00:20:02.790 --> 00:20:04.910
And then from there, once you
have that IP address, you

00:20:04.910 --> 00:20:08.200
directly connect to the client,
and you're good to go.

00:20:08.200 --> 00:20:10.460
And so the next aspect-- and
I mean this is, as game

00:20:10.460 --> 00:20:11.790
developers, where the
majority of the

00:20:11.790 --> 00:20:13.130
effort should be focused--

00:20:13.130 --> 00:20:15.780
is building those really
compelling experiences running

00:20:15.780 --> 00:20:19.690
on the dedicated servers,
running whatever existing

00:20:19.690 --> 00:20:22.780
software you have, the game
engines that you develop on,

00:20:22.780 --> 00:20:23.800
having that full connection.

00:20:23.800 --> 00:20:24.920
This is where the player's
going to spend the

00:20:24.920 --> 00:20:25.880
majority of the time.

00:20:25.880 --> 00:20:28.220
And having that deployed across
regions is really

00:20:28.220 --> 00:20:29.010
compelling.

00:20:29.010 --> 00:20:30.590
Actually, a note on the Compute
Engine as well, the

00:20:30.590 --> 00:20:33.280
consistent performance is really
important for dedicated

00:20:33.280 --> 00:20:34.320
game servers.

00:20:34.320 --> 00:20:36.130
When you look at the situation,
if 5% of your

00:20:36.130 --> 00:20:38.490
servers aren't performing well,
5% players are going to

00:20:38.490 --> 00:20:39.320
have a bad time.

00:20:39.320 --> 00:20:41.430
And most likely, some of
those will actually be

00:20:41.430 --> 00:20:42.580
very vocal about it.

00:20:42.580 --> 00:20:44.270
And it's not going to be a
good experience overall.

00:20:44.270 --> 00:20:46.470
And so by having that consistent
performance it

00:20:46.470 --> 00:20:49.135
allows you to play 100,000
servers and actually know that

00:20:49.135 --> 00:20:50.770
that performance will
be what you expect.

00:20:50.770 --> 00:20:53.620
And you can sleep safe at night
for that one aspect.

00:20:53.620 --> 00:20:56.090
Building scalable
systems is hard.

00:20:56.090 --> 00:20:58.850
But the end goal is to really
allow developers to sleep

00:20:58.850 --> 00:21:01.600
better at night and have Google
engineers and SREs on

00:21:01.600 --> 00:21:04.540
call for a lot of the scalable
problems that are involved

00:21:04.540 --> 00:21:09.190
with building out large
distributed systems.

00:21:09.190 --> 00:21:15.500
So on GRITS this is exactly what
it looks like after you

00:21:15.500 --> 00:21:16.740
click on one of those
IP addresses.

00:21:16.740 --> 00:21:17.610
You'll see that the--

00:21:17.610 --> 00:21:19.200
actually you probably might
not be able to see it.

00:21:19.200 --> 00:21:22.160
But the address bar is now the
actual IP address of the

00:21:22.160 --> 00:21:23.390
server you're connecting to.

00:21:23.390 --> 00:21:25.640
You can put DNS on top of
that if you wanted.

00:21:25.640 --> 00:21:28.690
Otherwise, you're directly
connected to Compute Engine

00:21:28.690 --> 00:21:31.210
server, running no JS, pulls
in all the assets.

00:21:31.210 --> 00:21:33.720
And you're pretty much good to
go, respond, run around,

00:21:33.720 --> 00:21:36.090
update other players, and
start having fun.

00:21:36.090 --> 00:21:38.080
It's actually really funny,
every time I show this off--

00:21:38.080 --> 00:21:39.620
I was presenting at Google.

00:21:39.620 --> 00:21:40.930
And there was about
50 people there.

00:21:40.930 --> 00:21:43.130
And afterwards, I noticed there
was about 40 people in

00:21:43.130 --> 00:21:44.130
the servers.

00:21:44.130 --> 00:21:46.830
And so I felt pretty bad for the
guy in the talk afterwards

00:21:46.830 --> 00:21:49.860
because everyone was on their
laptop actually playing.

00:21:49.860 --> 00:21:51.550
So I had to kind of shut
those down to be nice.

00:21:51.550 --> 00:21:55.020
But they were back up
after the fact.

00:21:55.020 --> 00:22:00.950
And so this really highlights
the source of truth aspect.

00:22:00.950 --> 00:22:03.270
If you have 100,000 game servers
and you want to do

00:22:03.270 --> 00:22:06.790
things like save end of match
statistics, being able to post

00:22:06.790 --> 00:22:08.740
those to App Engine through
Cloud Endpoints and the

00:22:08.740 --> 00:22:11.340
RESTful API that's provided and
store those long-term in

00:22:11.340 --> 00:22:13.590
the Data Store is a really
important aspect there.

00:22:13.590 --> 00:22:15.610
And the Data Store is fantastic
when you're scaling

00:22:15.610 --> 00:22:16.550
up to millions of users.

00:22:16.550 --> 00:22:18.610
The underlying Megastore
technology, that's its bread

00:22:18.610 --> 00:22:20.910
and butter is scaling to
millions of users, storing all

00:22:20.910 --> 00:22:23.040
of that data in a way,
and having cross-user

00:22:23.040 --> 00:22:24.770
transactions, et cetera
when you start

00:22:24.770 --> 00:22:27.270
looking at user groups.

00:22:27.270 --> 00:22:29.210
And so this can also
be the simplest as

00:22:29.210 --> 00:22:30.360
complex as you want.

00:22:30.360 --> 00:22:32.980
If you actually want to build it
up that every single action

00:22:32.980 --> 00:22:35.510
is sent off every second to
App Engine, App Engine can

00:22:35.510 --> 00:22:37.020
scale up to handle that.

00:22:37.020 --> 00:22:38.915
The thing you need to think
about is actually scaling up

00:22:38.915 --> 00:22:41.180
to handle that takes
a lot of resources.

00:22:41.180 --> 00:22:42.785
And Cloud Platform, it's
pay by resources.

00:22:42.785 --> 00:22:44.585
So you need to really understand
the cost associated

00:22:44.585 --> 00:22:47.380
if you want to make those
engineering decisions.

00:22:47.380 --> 00:22:50.200
Otherwise, things like if you
have a store and you have a

00:22:50.200 --> 00:22:52.480
free to play model, keeping
track of everything that's

00:22:52.480 --> 00:22:54.580
happening there and making sure
that if a player has a

00:22:54.580 --> 00:22:56.340
customization on a client,
that they actually have

00:22:56.340 --> 00:22:59.250
purchased the required
components and have the rights

00:22:59.250 --> 00:22:59.930
to use them.

00:22:59.930 --> 00:23:01.800
And so that's really where App
Engine provides a scalable

00:23:01.800 --> 00:23:05.420
infrastructure to handle any
of those in-game requests.

00:23:05.420 --> 00:23:08.960
And last aspect of App Engine
really is the virtual machine

00:23:08.960 --> 00:23:09.910
orchestration.

00:23:09.910 --> 00:23:12.090
If you're running 100,000 game
servers, you need to start

00:23:12.090 --> 00:23:14.600
thinking about-- well, well
before you hit 100,000,

00:23:14.600 --> 00:23:17.060
otherwise that's going to
be a lot of SSHing.

00:23:17.060 --> 00:23:19.170
And it's going to be
a massive team.

00:23:19.170 --> 00:23:21.020
But you really need to think
about how do I scale this in a

00:23:21.020 --> 00:23:22.110
way that makes sense?

00:23:22.110 --> 00:23:24.970
And so if you have a region
that is running out of

00:23:24.970 --> 00:23:26.980
capacity how do--

00:23:26.980 --> 00:23:30.390
oh, sorry, throat's a little bit
dry up here-- you utilize

00:23:30.390 --> 00:23:34.940
the GCE API from App
Engine to call out

00:23:34.940 --> 00:23:36.900
and create more instances?

00:23:36.900 --> 00:23:40.830
Similarly, if players are not
currently active, you can pull

00:23:40.830 --> 00:23:42.400
those instances from
server matchmaking.

00:23:42.400 --> 00:23:44.450
Once all the players leave, you
can also turn that down

00:23:44.450 --> 00:23:45.280
through the API.

00:23:45.280 --> 00:23:47.250
So App Engine can really be
used to build out that

00:23:47.250 --> 00:23:48.880
orchestration component.

00:23:48.880 --> 00:23:51.200
Because it also scales up to if
you have 100,000 machines

00:23:51.200 --> 00:23:52.650
giving [? heart, ?]

00:23:52.650 --> 00:23:56.360
basically checking in, the
infrastructure can scale up to

00:23:56.360 --> 00:23:58.510
handle that number
of requests.

00:23:58.510 --> 00:24:01.840
And it can be as complex or as
simple as you want as well.

00:24:01.840 --> 00:24:03.440
So you can have an API console,
and [INAUDIBLE]

00:24:03.440 --> 00:24:05.480
console we go in and say, give
me another 100 instances, or

00:24:05.480 --> 00:24:07.640
you can do some autoscaling.

00:24:07.640 --> 00:24:13.120
So with GRITS, we did a fairly
straightforward autoscaling

00:24:13.120 --> 00:24:15.530
algorithm here where
essentially--

00:24:15.530 --> 00:24:18.220
this is the admin console
by the way--

00:24:18.220 --> 00:24:20.520
once capacity reaches a certain
threshold within a

00:24:20.520 --> 00:24:25.040
region, new game servers will
automatically be spun up and

00:24:25.040 --> 00:24:27.830
added to be the rotation
there.

00:24:27.830 --> 00:24:30.160
So it starts off with five by
the default configuration, but

00:24:30.160 --> 00:24:35.040
I've scaled this up 20, 30,
40 servers very easily.

00:24:35.040 --> 00:24:36.440
And I haven't had a chance
to actually push it.

00:24:36.440 --> 00:24:38.540
But the underlying core
infrastructure of spinning up

00:24:38.540 --> 00:24:40.596
those servers is exactly the
same and repeatable all the

00:24:40.596 --> 00:24:42.380
way up to 100,000 servers.

00:24:42.380 --> 00:24:44.920
If you start hitting 100,000
with the sample application,

00:24:44.920 --> 00:24:46.610
you'll start to need to do a
little bit more tweaks with

00:24:46.610 --> 00:24:49.740
server matchmaking just not to
provide a list of 100,000

00:24:49.740 --> 00:24:50.530
servers to players.

00:24:50.530 --> 00:24:51.820
That wouldn't be a
good experience.

00:24:51.820 --> 00:24:53.940
But the core fundamentals of
scaling [INAUDIBLE] that looks

00:24:53.940 --> 00:24:56.670
like from App Engine is
provided by the sample

00:24:56.670 --> 00:24:57.920
application here.

00:25:00.130 --> 00:25:04.470
And so this is the last aspect
of the solution is the past

00:25:04.470 --> 00:25:06.700
component was really about the
game play experience and what

00:25:06.700 --> 00:25:08.850
players take.

00:25:08.850 --> 00:25:10.230
I feel bad for people
taking pictures.

00:25:10.230 --> 00:25:11.710
There's one more part
added to this.

00:25:11.710 --> 00:25:15.190
So unless you want to go through
the pictures and

00:25:15.190 --> 00:25:18.470
slowly see it build
itself magically--

00:25:18.470 --> 00:25:20.550
The last aspect is you're going
to have a huge amount of

00:25:20.550 --> 00:25:23.210
data being generated on all
of these game servers.

00:25:23.210 --> 00:25:26.630
And this log data can be very
valuable for a lot of business

00:25:26.630 --> 00:25:28.150
decisions and even understanding
what your

00:25:28.150 --> 00:25:29.080
players are doing.

00:25:29.080 --> 00:25:31.470
And so taking those logs from
ephemeral disk and keeping

00:25:31.470 --> 00:25:33.300
them permanently stored in
cloud storage, which is a

00:25:33.300 --> 00:25:36.190
large online object store, it's
a great place for those

00:25:36.190 --> 00:25:37.680
logs to live for a long time.

00:25:37.680 --> 00:25:39.810
And what people are doing is
essentially then taking those,

00:25:39.810 --> 00:25:42.150
running MapReduce pipelines on
it to aggregate it down to a

00:25:42.150 --> 00:25:44.170
level they actually
care about.

00:25:44.170 --> 00:25:46.520
So for example, if you have
every single player action per

00:25:46.520 --> 00:25:48.660
day, that is a huge amount of
data they you're not going to

00:25:48.660 --> 00:25:49.900
be able to wrap your
mind around.

00:25:49.900 --> 00:25:53.680
But if you take it down to
actions per player per day and

00:25:53.680 --> 00:25:56.370
not every single actions, it
starts to get to a level of

00:25:56.370 --> 00:25:58.270
granularity you can actually
start looking at.

00:25:58.270 --> 00:25:59.900
And that's really where
the next thing--

00:25:59.900 --> 00:26:01.500
oh, wrong way in the slides.

00:26:01.500 --> 00:26:03.730
This is the final thing here.

00:26:03.730 --> 00:26:06.130
This is really where BiqQuery
comes into play as well, which

00:26:06.130 --> 00:26:09.440
is a real-time tool for doing
analytics over billions of

00:26:09.440 --> 00:26:10.860
rows of data in real-time.

00:26:10.860 --> 00:26:12.340
We're talking seconds
to return.

00:26:12.340 --> 00:26:15.480
And so you can do things like
AB testing or see what the

00:26:15.480 --> 00:26:17.590
effect of a double experience
weekend is on player

00:26:17.590 --> 00:26:19.040
engagement.

00:26:19.040 --> 00:26:21.030
You can do a lot of these
queries that you don't really

00:26:21.030 --> 00:26:23.410
need to have off of the top of
your head right away and build

00:26:23.410 --> 00:26:24.300
your MapReduce pipeline.

00:26:24.300 --> 00:26:26.860
But you can do it after
the fact ad hoc.

00:26:26.860 --> 00:26:29.130
And before joining the Cloud
Platform team, I worked on

00:26:29.130 --> 00:26:30.310
AdSense at Google.

00:26:30.310 --> 00:26:32.610
And this was my bread and
butter, building out these

00:26:32.610 --> 00:26:33.760
MapReduce BigQuery--

00:26:33.760 --> 00:26:35.450
they really are a
dynamic duo--

00:26:35.450 --> 00:26:38.680
that can solve ridiculous
scalable big data problems.

00:26:38.680 --> 00:26:40.720
And so with ads, for example,
looking at all of the ad

00:26:40.720 --> 00:26:42.280
traffic per website per day.

00:26:42.280 --> 00:26:44.280
And then being able to go and
to look at a huge range of

00:26:44.280 --> 00:26:46.720
sites every day or look at
things like how partners are

00:26:46.720 --> 00:26:48.510
performing, being able to
go in after the fact and

00:26:48.510 --> 00:26:50.990
troubleshoot if specific
sites are not

00:26:50.990 --> 00:26:52.130
performing as expected.

00:26:52.130 --> 00:26:53.390
So it's really powerful.

00:26:53.390 --> 00:26:55.370
And the session happening
after this by Michael

00:26:55.370 --> 00:26:57.940
Manoochehri will provide some
more insight to what people

00:26:57.940 --> 00:26:58.785
are doing with BigQuery because

00:26:58.785 --> 00:27:00.380
it's absolutely amazing.

00:27:00.380 --> 00:27:02.530
And so this slide is going
away slowly for

00:27:02.530 --> 00:27:04.060
anybody else who--

00:27:04.060 --> 00:27:05.420
it's actually also published
online if you

00:27:05.420 --> 00:27:06.450
want to look at it.

00:27:06.450 --> 00:27:08.700
There'll be a link at the end.

00:27:08.700 --> 00:27:11.760
So that's just really
highlighting some of the core

00:27:11.760 --> 00:27:12.300
functionality.

00:27:12.300 --> 00:27:15.180
But really it's about building
a full featured gameplay

00:27:15.180 --> 00:27:18.540
experience, having user profiles
configuration, seeing

00:27:18.540 --> 00:27:21.390
after match stats, looking in to
that player configuration.

00:27:21.390 --> 00:27:25.000
Go in and build out your
mecs as necessary.

00:27:25.000 --> 00:27:26.110
And starting to build
in some social

00:27:26.110 --> 00:27:27.810
aspects, events, new feeds.

00:27:27.810 --> 00:27:29.250
If you're free to play, you're
going to need to have some

00:27:29.250 --> 00:27:32.080
market plays, even if you're
not, to allow players to keep

00:27:32.080 --> 00:27:34.450
that engagement, to highlight
really interesting things they

00:27:34.450 --> 00:27:37.270
can purchase, and build that
into the core game logic, and

00:27:37.270 --> 00:27:38.540
start to build out friends
and favorites.

00:27:38.540 --> 00:27:40.010
I mean, there's a million
different ways you can build a

00:27:40.010 --> 00:27:41.810
full-featured game play
experience to keep people

00:27:41.810 --> 00:27:42.690
coming back.

00:27:42.690 --> 00:27:45.650
And the platform of App Engine
and Compute Engine can really

00:27:45.650 --> 00:27:48.070
scale to handle that and allow
you to build that out in a way

00:27:48.070 --> 00:27:51.760
that you can be rest assured
that it's going to scale out.

00:27:51.760 --> 00:27:54.600
And so regarding GRITS, there's
a dedicated game

00:27:54.600 --> 00:27:56.300
server solution paper
I put out.

00:27:56.300 --> 00:27:59.575
It's available on
cloud.google.com resources.

00:27:59.575 --> 00:28:00.970
You can find it there
as well as other

00:28:00.970 --> 00:28:02.600
ones our team's producing.

00:28:02.600 --> 00:28:05.660
Also the sample code is going to
come very, very, very soon.

00:28:05.660 --> 00:28:08.050
We're literally about to
press the button on it.

00:28:08.050 --> 00:28:10.890
And so keep an eye on the GitHub
Google Cloud Platform

00:28:10.890 --> 00:28:13.780
for all the samples there, and
to keep an eye out for the

00:28:13.780 --> 00:28:17.000
scalable GRITS example put in.

00:28:17.000 --> 00:28:22.020
And so now I'd like to introduce
Rafael on stage to

00:28:22.020 --> 00:28:23.320
talk a little bit about
RightScale, how

00:28:23.320 --> 00:28:24.710
they play into this.

00:28:24.710 --> 00:28:26.220
He's a senior systems
architect at

00:28:26.220 --> 00:28:27.040
RightScale as well.

00:28:27.040 --> 00:28:30.660
And so when looking at just that
past example, by the way,

00:28:30.660 --> 00:28:32.890
anybody impressed with
is all Google Docs.

00:28:32.890 --> 00:28:34.550
I mean, this is Google
presentation.

00:28:34.550 --> 00:28:37.210
I wanted to give the audience
3D glasses, but marketing

00:28:37.210 --> 00:28:38.470
didn't really approve of that.

00:28:38.470 --> 00:28:42.160
But really when looking at
RightScale, this is one of be

00:28:42.160 --> 00:28:43.960
examples where it can come
into play to solve some

00:28:43.960 --> 00:28:46.630
amazingly challenging problems
with scalability.

00:28:46.630 --> 00:28:49.300
So orchestrating virtual
machines can become very

00:28:49.300 --> 00:28:50.590
complex as you scale.

00:28:50.590 --> 00:28:52.790
And although you could build
on an App Engine, if you're

00:28:52.790 --> 00:28:54.270
familiar or you want to
leverage tools like

00:28:54.270 --> 00:28:56.530
RightScale, it's a perfect place
to come in and start

00:28:56.530 --> 00:28:58.770
managing scaling up all of these
game servers in a way

00:28:58.770 --> 00:29:02.430
that's repeatable, easy to
monitor, easy manage, easy to

00:29:02.430 --> 00:29:04.860
overall keep it up and running
with speed and leveraging the

00:29:04.860 --> 00:29:05.620
performance.

00:29:05.620 --> 00:29:08.370
So on that, I'll hand
it off to Rafael.

00:29:08.370 --> 00:29:09.620
RAFAEL SAAVEDRA: Thank
you, Chris.

00:29:14.520 --> 00:29:17.100
So I'd like to start with a
quick overview of RightScale.

00:29:17.100 --> 00:29:18.550
Some of you might not
know about it.

00:29:18.550 --> 00:29:23.280
So RightScale was founded in
2006, which in cloud time is

00:29:23.280 --> 00:29:25.100
prehistory.

00:29:25.100 --> 00:29:26.940
And what that means, too, is
that RightScale really

00:29:26.940 --> 00:29:30.490
believed in the cloud vision
since the beginning.

00:29:30.490 --> 00:29:33.650
There are currently thousands
of paying customers that are

00:29:33.650 --> 00:29:36.930
using scale and more than
70,000 users worldwide.

00:29:36.930 --> 00:29:40.780
We do have a free tier
that's very popular.

00:29:40.780 --> 00:29:43.710
And about 5.5 million instances
have been launched

00:29:43.710 --> 00:29:44.690
through the platform.

00:29:44.690 --> 00:29:47.890
And what's interesting is that
that number is that two years

00:29:47.890 --> 00:29:49.660
ago it was one million.

00:29:49.660 --> 00:29:52.830
So I took four years to launch
the first million instance in

00:29:52.830 --> 00:29:53.110
the platform.

00:29:53.110 --> 00:29:56.000
And in two years, for 4 million
more were launched,

00:29:56.000 --> 00:29:59.200
which is talk to the exponential
growth of the

00:29:59.200 --> 00:30:01.180
cloud consumption.

00:30:01.180 --> 00:30:04.540
RightScale is the first SaaS
management platform, which has

00:30:04.540 --> 00:30:08.320
solutions built specifically
for the gaming industry.

00:30:08.320 --> 00:30:12.340
And so what that resulted in it
is basically RightScale has

00:30:12.340 --> 00:30:16.080
become the de facto standard
for running gaming

00:30:16.080 --> 00:30:18.030
infrastructure on the cloud.

00:30:18.030 --> 00:30:21.120
15 of the top 20 Facebook
games are run on top of

00:30:21.120 --> 00:30:21.870
RightScale.

00:30:21.870 --> 00:30:25.560
Games like Angry Birds,
CityVille, FarmVille, all use

00:30:25.560 --> 00:30:29.760
RightScale as their management
solution.

00:30:29.760 --> 00:30:32.990
And when other thing that I
really enjoy working at

00:30:32.990 --> 00:30:35.970
RightScale is seeing all the
crazy things that our

00:30:35.970 --> 00:30:37.650
customers build on top
of the platform.

00:30:37.650 --> 00:30:41.270
And the gaming industry seems
to be some of the more

00:30:41.270 --> 00:30:42.110
creative folks.

00:30:42.110 --> 00:30:44.630
And so we see people already
taking automation to the

00:30:44.630 --> 00:30:50.860
extreme and be able to achieve
ratios of 10,000 servers being

00:30:50.860 --> 00:30:52.825
managed by one [INAUDIBLE],
which is amazing.

00:30:55.500 --> 00:30:59.640
So why is it that game
developers choose RightScale

00:30:59.640 --> 00:31:01.160
to manage their infrastructure?

00:31:01.160 --> 00:31:03.970
So this is turning down
to the technical

00:31:03.970 --> 00:31:05.390
aspects of the platform.

00:31:05.390 --> 00:31:08.090
And basically what the platform
lets you do is write

00:31:08.090 --> 00:31:11.230
code that gets run when an
instance is launched in the

00:31:11.230 --> 00:31:13.250
cloud on that instance.

00:31:13.250 --> 00:31:16.260
It also let's you run the code
that's going to get run when

00:31:16.260 --> 00:31:18.520
instances shut down
or when some

00:31:18.520 --> 00:31:20.720
interesting events happen.

00:31:20.720 --> 00:31:23.250
And the platform also let's
you define what those

00:31:23.250 --> 00:31:24.500
interesting events are.

00:31:24.500 --> 00:31:27.780
So the platform is
going to connect

00:31:27.780 --> 00:31:29.500
monitoring data in real-time.

00:31:29.500 --> 00:31:33.040
And you can use that data
to create events.

00:31:33.040 --> 00:31:35.470
So it could be that the CPU's
running hot, or you're running

00:31:35.470 --> 00:31:38.030
low on memory, or low
on disk space.

00:31:38.030 --> 00:31:41.040
And when those things happen,
then you can trigger some code

00:31:41.040 --> 00:31:43.390
to run on that instance.

00:31:43.390 --> 00:31:46.020
It's also possible to extend
those metrics.

00:31:46.020 --> 00:31:48.590
So you can have application
specific metrics, like number

00:31:48.590 --> 00:31:52.210
of requests per second, number
of reads per second and use

00:31:52.210 --> 00:31:54.620
those metrics to trigger
execution of

00:31:54.620 --> 00:31:56.020
code in those instances.

00:31:56.020 --> 00:31:58.750
So if an app server hasn't
gotten any requests in the

00:31:58.750 --> 00:32:02.340
past two minutes, then there's
something wrong with it.

00:32:02.340 --> 00:32:05.460
And you can actually do
something about that.

00:32:05.460 --> 00:32:08.070
And finally, what RightScale
lets you do is take all those

00:32:08.070 --> 00:32:11.100
rules, all the alerts and all
this code, and wrap that into

00:32:11.100 --> 00:32:14.470
a single unit, which we call a
sort of a template, and let's

00:32:14.470 --> 00:32:16.800
you share that template
across your teams.

00:32:16.800 --> 00:32:19.190
So if you have an organization
that's [INAUDIBLE] multiple

00:32:19.190 --> 00:32:23.150
games that have similar
infrastructure requirements,

00:32:23.150 --> 00:32:25.240
you get to actually share a lot
of that code and a lot of

00:32:25.240 --> 00:32:28.190
that configuration logic.

00:32:28.190 --> 00:32:33.700
That code, you can also publish
it in the marketplace.

00:32:33.700 --> 00:32:36.350
And I will cover that in a few
slides, where you can actually

00:32:36.350 --> 00:32:39.240
have external people from your
organization input that code

00:32:39.240 --> 00:32:42.520
as well if that's something
that you need to do.

00:32:42.520 --> 00:32:45.980
So once you have crafted those
ServerTemplates encapsulating

00:32:45.980 --> 00:32:49.060
all that code an all those other
alerts, you can use that

00:32:49.060 --> 00:32:51.680
to leverage all those gaining
by launching servers that

00:32:51.680 --> 00:32:54.260
executive the code and
most of the template.

00:32:54.260 --> 00:32:59.190
And the way the scaling works is
that those same alerts that

00:32:59.190 --> 00:33:03.290
you use to trigger execution of
code when things happen you

00:33:03.290 --> 00:33:06.560
can also use that to
trigger votes.

00:33:06.560 --> 00:33:09.350
So an instance can vote to scale
up [INAUDIBLE] if the

00:33:09.350 --> 00:33:14.720
CPU's running hot or can voter
to scale down if it's idle.

00:33:14.720 --> 00:33:16.680
And then you get to choose
the threshold.

00:33:16.680 --> 00:33:18.740
How many voters need
to be voting before

00:33:18.740 --> 00:33:20.300
scaling even happens?

00:33:20.300 --> 00:33:22.280
And when the scaling even
happens, you get to choose how

00:33:22.280 --> 00:33:24.030
many instances should boot
or how many instances

00:33:24.030 --> 00:33:25.190
should be shut down.

00:33:25.190 --> 00:33:27.540
And there's all kinds of
other levels of knobs

00:33:27.540 --> 00:33:28.580
that you can turn.

00:33:28.580 --> 00:33:31.370
You can which data center those
instances should be

00:33:31.370 --> 00:33:34.880
booted in and all kinds of other
settings that you can

00:33:34.880 --> 00:33:38.720
specify through both the
dashboard and the REST APIs.

00:33:38.720 --> 00:33:41.510
I have some pretty pictures
here on all those slides.

00:33:41.510 --> 00:33:43.320
But all of that functionality
is available

00:33:43.320 --> 00:33:46.530
through our REST APIs.

00:33:46.530 --> 00:33:49.690
So then the monitoring data that
is used to trigger those

00:33:49.690 --> 00:33:51.970
events is also used
to plot graphs.

00:33:51.970 --> 00:33:53.660
So you get different
kinds of graphs.

00:33:53.660 --> 00:33:56.240
You have simple graphs like
the one shown here.

00:33:56.240 --> 00:33:58.660
You can also get stacked graphs
that works great if you

00:33:58.660 --> 00:34:01.120
have a 100 or less servers.

00:34:01.120 --> 00:34:03.360
Past 100 servers stacked graphs
start to get a little

00:34:03.360 --> 00:34:05.480
bit useless and you want to
use things like heat maps.

00:34:05.480 --> 00:34:09.190
So we have heat maps where the
color of the pixel indicates

00:34:09.190 --> 00:34:12.800
the intensity of the metric.

00:34:12.800 --> 00:34:15.380
The other thing that RightScale
lets you do is get

00:34:15.380 --> 00:34:17.199
notifications when those
errors trigger.

00:34:17.199 --> 00:34:18.600
So you can get an email.

00:34:18.600 --> 00:34:20.010
You can get paged.

00:34:20.010 --> 00:34:24.090
You can get woken up at 2:00
AM, All those great things.

00:34:24.090 --> 00:34:26.330
And it also lets you run those
scripts on demand.

00:34:26.330 --> 00:34:27.880
So it's not just pure
automation.

00:34:27.880 --> 00:34:29.929
You can actually say,
OK, I need to backup

00:34:29.929 --> 00:34:30.909
this database now.

00:34:30.909 --> 00:34:34.500
You can click the button
and take a back up now.

00:34:34.500 --> 00:34:37.010
And once you have all those
servers running most of

00:34:37.010 --> 00:34:40.060
templates and those server
arrays, you can organize all

00:34:40.060 --> 00:34:42.199
that in deployments.

00:34:42.199 --> 00:34:45.179
And what RightScale lets you do
then is once you have those

00:34:45.179 --> 00:34:47.460
deployments is you
can clone them.

00:34:47.460 --> 00:34:50.060
So you can have your production
deployment, and you

00:34:50.060 --> 00:34:50.969
can clone that.

00:34:50.969 --> 00:34:54.469
Then have QA use that clone
to render the test code.

00:34:54.469 --> 00:34:56.520
And if you have to test
different branch, you can

00:34:56.520 --> 00:34:59.750
clone again and launch
in the cloud and run

00:34:59.750 --> 00:35:00.830
that different code.

00:35:00.830 --> 00:35:03.620
So it's very powerful.

00:35:03.620 --> 00:35:06.360
So going back to the
marketplace, the marketplace

00:35:06.360 --> 00:35:08.870
is a repository of previous
server templates.

00:35:08.870 --> 00:35:12.030
And so I was counting them to
prepare for this presentation

00:35:12.030 --> 00:35:18.810
and as of March 21 we had a
bit more than 67 templates

00:35:18.810 --> 00:35:20.710
built for GCE.

00:35:20.710 --> 00:35:22.580
And actually, those
ServerTemplates will run on

00:35:22.580 --> 00:35:24.480
multiple clouds.

00:35:24.480 --> 00:35:27.390
And 20 of which were published
by RightScale.

00:35:27.390 --> 00:35:30.380
And what that means is that
they are supporting by

00:35:30.380 --> 00:35:31.080
RightScale.

00:35:31.080 --> 00:35:33.160
So if you have issues with any
of the ServerTemplates or

00:35:33.160 --> 00:35:36.020
stacks, you can actually
send tickets and we

00:35:36.020 --> 00:35:37.940
will look at that.

00:35:37.940 --> 00:35:40.170
And the thing is because
we built them--

00:35:40.170 --> 00:35:42.480
and these are the same
ServerTemplates that the

00:35:42.480 --> 00:35:45.860
people running CityVille or
Angry Birds are using--

00:35:45.860 --> 00:35:48.520
these are things that have best
practice built in and you

00:35:48.520 --> 00:35:52.280
get to leverage all of that
knowledge right off the bat by

00:35:52.280 --> 00:35:53.690
using those.

00:35:53.690 --> 00:35:56.020
And they cover all the different
tiers that you may

00:35:56.020 --> 00:36:00.070
use, database, application
servers, front-ends, and other

00:36:00.070 --> 00:36:03.940
things like Syslog, Memcache,
all kinds of things.

00:36:03.940 --> 00:36:07.110
And we also have a lot more
ServerTemplates that are going

00:36:07.110 --> 00:36:08.970
to get ported to the [? C ?]
little by little--

00:36:08.970 --> 00:36:11.390
a bit more than 400
ServerTemplates in the

00:36:11.390 --> 00:36:14.050
marketplace, and they are all
going to get ported into the

00:36:14.050 --> 00:36:15.800
[? C ?] little by little.

00:36:15.800 --> 00:36:20.140
So at the end of the day, what
all that means is that you

00:36:20.140 --> 00:36:23.810
spend less time managing your
infrastructure and more time

00:36:23.810 --> 00:36:26.560
actually on the games, which
is what you want.

00:36:26.560 --> 00:36:30.620
Some of the easiest sell we
have at RightScale is when

00:36:30.620 --> 00:36:35.230
somebody has tried doing the VM
orchestration by piece by

00:36:35.230 --> 00:36:38.740
themselves and realize after six
months of development that

00:36:38.740 --> 00:36:40.360
it's going to take another
six months.

00:36:40.360 --> 00:36:41.770
And it's not worth the effort.

00:36:41.770 --> 00:36:45.130
You might as well just go with
a company that just does that

00:36:45.130 --> 00:36:46.380
as a [? reading. ?]

00:36:48.670 --> 00:36:53.610
So going back to GCE and
Google, today GCE is

00:36:53.610 --> 00:36:55.510
completely integrated
within RightScale.

00:36:55.510 --> 00:36:58.230
So all of the features that
RightScale provides are

00:36:58.230 --> 00:37:00.300
available on GCE.

00:37:00.300 --> 00:37:03.430
And that's really awesome
because you get an incredible

00:37:03.430 --> 00:37:04.300
infrastructure.

00:37:04.300 --> 00:37:07.020
And on top of that you get the
flexibility and the power of

00:37:07.020 --> 00:37:08.630
RightScale.

00:37:08.630 --> 00:37:11.980
And my little anecdote here is
about three weeks ago we

00:37:11.980 --> 00:37:14.640
released a new revision of
our ServerTemplates.

00:37:14.640 --> 00:37:19.050
And that means that we had to
launch about 1,000 servers to

00:37:19.050 --> 00:37:21.570
test all the various
combinations of crowds,

00:37:21.570 --> 00:37:26.610
platforms, software stacks, so
MySQL, using Ubuntu, MySQL

00:37:26.610 --> 00:37:30.390
using CentOS, all of those
different combinations.

00:37:30.390 --> 00:37:33.310
And consistently on all those
platforms and all those

00:37:33.310 --> 00:37:36.350
software stacks you see it has
been the fastest cloud.

00:37:36.350 --> 00:37:43.540
So I think it's a testament to
the quality of the cloud.

00:37:43.540 --> 00:37:46.420
Now you get that quick
set up that the cloud

00:37:46.420 --> 00:37:47.310
provides you with.

00:37:47.310 --> 00:37:49.320
And on top of that you get the
ability that RightScale

00:37:49.320 --> 00:37:51.540
provides to clone those
deployments.

00:37:51.540 --> 00:37:53.810
And you end up with something
that is very powerful where

00:37:53.810 --> 00:37:56.120
you can take your entire
infrastructure and duplicate

00:37:56.120 --> 00:37:58.120
it in minutes.

00:37:58.120 --> 00:38:01.260
That's basically the time it
takes to clone and launch.

00:38:01.260 --> 00:38:03.220
But two minutes and you have
your entire infrastructure

00:38:03.220 --> 00:38:07.360
just replicated and available
for testing.

00:38:07.360 --> 00:38:11.440
And because it's running on GCE,
you get to publish your

00:38:11.440 --> 00:38:15.220
assets to YouTube, Google+, and
other Google properties

00:38:15.220 --> 00:38:17.910
without being charged for
bandwidth, which can be

00:38:17.910 --> 00:38:20.260
significant depending on what
your game needs to do.

00:38:24.670 --> 00:38:29.260
And I am pleased to announce
that as of today the

00:38:29.260 --> 00:38:31.130
RightScale Social Gaming
Edition is actually

00:38:31.130 --> 00:38:33.110
available on GCE.

00:38:33.110 --> 00:38:36.030
So this is the same edition that
all those other games I

00:38:36.030 --> 00:38:37.640
mentioned have been using.

00:38:37.640 --> 00:38:43.370
And what you get with that is
both a set of software stacks,

00:38:43.370 --> 00:38:46.170
pre-built ServerTemplates
pre-built for you to use, but

00:38:46.170 --> 00:38:49.550
also and maybe more importantly,
you get support

00:38:49.550 --> 00:38:51.010
and services from RightScale.

00:38:51.010 --> 00:38:56.740
So you get an OnBoarding package
where you get to work

00:38:56.740 --> 00:38:59.470
with the same people that have
worked with those other games.

00:38:59.470 --> 00:39:02.720
So you get to leverage
a lot of expertise

00:39:02.720 --> 00:39:04.660
right off the bat.

00:39:04.660 --> 00:39:08.430
We also include some JumpStart
training so that you get quick

00:39:08.430 --> 00:39:10.830
started on RightScale
and using the

00:39:10.830 --> 00:39:12.080
cloud if you need that.

00:39:14.850 --> 00:39:18.780
So I think the website is
being built as I speak.

00:39:18.780 --> 00:39:20.030
So it's not available
just yet.

00:39:20.030 --> 00:39:20.760
So check back on

00:39:20.760 --> 00:39:22.110
rightscale.com during the week.

00:39:22.110 --> 00:39:24.640
It should be there in
the next few days.

00:39:24.640 --> 00:39:27.260
In the meantime, you
can contact me.

00:39:27.260 --> 00:39:30.110
There will be an email address
in the next slide that you can

00:39:30.110 --> 00:39:33.360
send me to if you are interested
in subscribing to

00:39:33.360 --> 00:39:35.360
this program.

00:39:35.360 --> 00:39:38.642
And I think this is it.

00:39:38.642 --> 00:39:39.962
CHRIS ELLIOTT: Awesome.

00:39:39.962 --> 00:39:45.160
In a nutshell and to really
wrap it all up, what we've

00:39:45.160 --> 00:39:48.870
seen is Google Cloud Platform
is the best place for

00:39:48.870 --> 00:39:50.570
cutting-edge developers.

00:39:50.570 --> 00:39:53.880
Whether it's an indie or a AAA
game studio, there are people

00:39:53.880 --> 00:39:55.440
doing amazing things
by leveraging the

00:39:55.440 --> 00:39:56.550
power of the platform.

00:39:56.550 --> 00:39:58.730
And really, the next time you're
going out, building a

00:39:58.730 --> 00:40:00.440
platform, if you're already on
the platform as well, just

00:40:00.440 --> 00:40:02.010
keep thinking about how you
can integrate all of the

00:40:02.010 --> 00:40:05.070
components to solve the
extremely challenging game

00:40:05.070 --> 00:40:06.700
problems that we
see every day.

00:40:06.700 --> 00:40:08.330
So that's basically it.

00:40:08.330 --> 00:40:09.800
And we can take any questions.

00:40:09.800 --> 00:40:11.900
And please reach out to us if
there's anything else you're

00:40:11.900 --> 00:40:13.260
interested in.

00:40:13.260 --> 00:40:14.670
Feel free to use the microphone
in the middle if

00:40:14.670 --> 00:40:15.450
you have any questions.

00:40:15.450 --> 00:40:18.200
Otherwise, just raise
your hand and I can

00:40:18.200 --> 00:40:19.450
repeat it as well.

00:40:23.030 --> 00:40:24.010
All right, no questions.

00:40:24.010 --> 00:40:26.510
That's a first I think.

00:40:26.510 --> 00:40:27.950
Well, thank you everybody.

00:40:27.950 --> 00:40:29.870
And keep an eye out for the
other tracks as well.

