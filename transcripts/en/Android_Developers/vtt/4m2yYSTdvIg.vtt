WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.944
[MUSIC PLAYING]

00:00:07.309 --> 00:00:09.600
JONATHAN GERRISH: It's great
to see so many people here

00:00:09.600 --> 00:00:12.270
interested in testing.

00:00:12.270 --> 00:00:15.000
My name's Jonathan Gerrish,
and together with my colleague,

00:00:15.000 --> 00:00:18.600
Yuki Hamada, we're going to be
presenting a session on testing

00:00:18.600 --> 00:00:20.670
APIs today.

00:00:20.670 --> 00:00:23.520
So just to get
started, just hands up,

00:00:23.520 --> 00:00:26.140
anyone who's written unit tests.

00:00:26.140 --> 00:00:27.692
It's not a trick question.

00:00:27.692 --> 00:00:28.870
Good.

00:00:28.870 --> 00:00:31.500
And what about
integration tests?

00:00:31.500 --> 00:00:33.300
You can be honest.

00:00:33.300 --> 00:00:35.130
Awesome.

00:00:35.130 --> 00:00:38.000
OK, let's get started.

00:00:38.000 --> 00:00:41.316
So on Android, there's
two kinds of tests

00:00:41.316 --> 00:00:42.440
you might be familiar with.

00:00:42.440 --> 00:00:45.610
There's local unit
tests and then

00:00:45.610 --> 00:00:47.480
there's instrumentation tests.

00:00:47.480 --> 00:00:51.960
So let's start by looking
at local unit tests.

00:00:51.960 --> 00:00:55.150
So these are tests
that are executed

00:00:55.150 --> 00:00:56.950
on your local
developer's workstation

00:00:56.950 --> 00:00:59.220
on the local VM running there.

00:00:59.220 --> 00:01:02.530
And because you don't need to
run the entire Android build

00:01:02.530 --> 00:01:03.260
chain--

00:01:03.260 --> 00:01:06.400
you avoid dexing and packaging
and installing on a device--

00:01:06.400 --> 00:01:10.730
these tests are actually
really, really fast.

00:01:10.730 --> 00:01:14.040
On these kind of tests, you can
use a tool like Roboelectric,

00:01:14.040 --> 00:01:17.130
which comes with its
own set of testing APIs

00:01:17.130 --> 00:01:19.920
for setting up the state of
your Android environment,

00:01:19.920 --> 00:01:21.840
or you can use a
tool like Mockito

00:01:21.840 --> 00:01:24.420
and you can stub
out the interactions

00:01:24.420 --> 00:01:26.850
with the Android framework.

00:01:26.850 --> 00:01:31.920
Either way, they allow
you to write tests,

00:01:31.920 --> 00:01:34.350
setting up the state
of the environment that

00:01:34.350 --> 00:01:36.330
satisfy the
preconditions that you

00:01:36.330 --> 00:01:40.130
might want in your test case.

00:01:40.130 --> 00:01:43.870
The second kind of tests
are instrumentation tests.

00:01:43.870 --> 00:01:46.140
Now, these are the
tests that will run

00:01:46.140 --> 00:01:49.000
on a virtual or real device.

00:01:49.000 --> 00:01:51.030
A real device could just
be a phone connected

00:01:51.030 --> 00:01:54.690
to your workstation or it
could be a farm of devices

00:01:54.690 --> 00:01:57.480
somewhere in the cloud.

00:01:57.480 --> 00:01:59.880
These kind of tests
run slower because you

00:01:59.880 --> 00:02:02.520
have to execute the whole
build chain and install

00:02:02.520 --> 00:02:06.180
an application onto
the device, but they

00:02:06.180 --> 00:02:08.370
have the advantage
of being a lot more

00:02:08.370 --> 00:02:11.970
accurate because the
real or virtual device is

00:02:11.970 --> 00:02:15.570
very similar, or in some
cases, identical to devices

00:02:15.570 --> 00:02:17.800
that your users will be
using out in the field.

00:02:17.800 --> 00:02:19.560
And this brings
you the confidence

00:02:19.560 --> 00:02:23.110
that your app is going
to behave as you expect.

00:02:23.110 --> 00:02:27.330
One criticism we have heard is
that on these kinds of tests,

00:02:27.330 --> 00:02:30.450
there's actually a lack
of testing APIs available,

00:02:30.450 --> 00:02:32.430
which makes it difficult
for you to set up

00:02:32.430 --> 00:02:36.000
the state of your environment
in a way that satisfies

00:02:36.000 --> 00:02:38.580
certain preconditions or edge
cases that you might want

00:02:38.580 --> 00:02:39.817
to be testing.

00:02:39.817 --> 00:02:41.400
And so we've heard
you loud and clear,

00:02:41.400 --> 00:02:45.950
and this is something
we're actively working on.

00:02:45.950 --> 00:02:48.980
So a bit of a little
history lesson.

00:02:48.980 --> 00:02:52.270
In 2017 at Google
I/O, we presented

00:02:52.270 --> 00:02:54.520
what we called the
Android testing story.

00:02:54.520 --> 00:02:57.010
So it was based loosely around
the software development

00:02:57.010 --> 00:02:58.460
pyramid.

00:02:58.460 --> 00:03:02.270
And in this model,
we encouraged you

00:03:02.270 --> 00:03:06.230
to write lots and lots of
fast, scalable unit tests

00:03:06.230 --> 00:03:09.506
that test all your
exhaustive conditions.

00:03:09.506 --> 00:03:11.760
We encouraged you
to write a smaller

00:03:11.760 --> 00:03:15.930
number of instrumentation
tests that will actually

00:03:15.930 --> 00:03:18.630
prove that all these
units assembled together

00:03:18.630 --> 00:03:21.580
behave as you would
expect on a real device.

00:03:21.580 --> 00:03:24.840
And in some ways, this
was kind of a compromise.

00:03:24.840 --> 00:03:31.830
It was a compromise between the
advantages of one kind of test

00:03:31.830 --> 00:03:33.400
and the trade-offs of another.

00:03:33.400 --> 00:03:37.050
So it brings you a holistic
way of testing your app.

00:03:40.172 --> 00:03:44.470
And we showed how
this kind of approach

00:03:44.470 --> 00:03:48.660
can lead to test trim
development on Android.

00:03:48.660 --> 00:03:51.630
First of all, you would
start with a failing UI test.

00:03:51.630 --> 00:03:54.030
This would be an instrumentation
test, probably written

00:03:54.030 --> 00:03:59.440
with Espresso, and it would
test the UI of your component--

00:03:59.440 --> 00:04:00.750
your feature.

00:04:00.750 --> 00:04:06.240
And then you would satisfy that
feature by a series of units--

00:04:06.240 --> 00:04:10.380
classes-- coming together
with their interactions.

00:04:10.380 --> 00:04:12.480
And you could test
drive these, as well,

00:04:12.480 --> 00:04:17.640
using a tool like
Roboelectric or Mockito

00:04:17.640 --> 00:04:21.060
running as a local
test, and this gives you

00:04:21.060 --> 00:04:23.140
very fast development cycles.

00:04:23.140 --> 00:04:25.720
Finally, when you bring
them all together,

00:04:25.720 --> 00:04:29.970
you're able to run the slower
running, but more faithful

00:04:29.970 --> 00:04:33.830
instrumentation test, and
hopefully, it goes green

00:04:33.830 --> 00:04:37.455
and you're done.

00:04:37.455 --> 00:04:40.110
Well, we enter a
refactoring cycle

00:04:40.110 --> 00:04:43.210
because maybe your code
leaves a little to be desired

00:04:43.210 --> 00:04:45.370
and you want to do some cleanup.

00:04:45.370 --> 00:04:49.322
So you can spend some
refactoring cycles there,

00:04:49.322 --> 00:04:54.742
before coming around to the
beginning of the cycle, where,

00:04:54.742 --> 00:04:56.450
if you have any more
work on the feature,

00:04:56.450 --> 00:04:57.710
you might add another test--

00:04:57.710 --> 00:04:59.780
test another aspect
of that feature--

00:04:59.780 --> 00:05:03.020
and you'll keep iterating until
you're complete, at which time,

00:05:03.020 --> 00:05:05.780
you're good to submit your code
and move on to the next task.

00:05:08.606 --> 00:05:12.860
So at Google I/O this year,
we realized there was somewhat

00:05:12.860 --> 00:05:15.851
of a test writing crisis.

00:05:15.851 --> 00:05:18.530
And because there's so
many tools available,

00:05:18.530 --> 00:05:22.740
it's not always clear
which one to use.

00:05:22.740 --> 00:05:26.190
And each of these tools all
have their own different styles

00:05:26.190 --> 00:05:30.840
and APIs and paradigms
for the same concepts

00:05:30.840 --> 00:05:34.660
that exist on Android.

00:05:34.660 --> 00:05:38.340
And the problem with
this is that tests

00:05:38.340 --> 00:05:42.150
written at different levels
are not portable across levels.

00:05:42.150 --> 00:05:45.200
Your test is kind of stuck.

00:05:45.200 --> 00:05:48.330
It's coupled to the testing
tool and the environment

00:05:48.330 --> 00:05:51.500
that you've written it on.

00:05:51.500 --> 00:05:53.770
So this year at Google
I/O, we announced

00:05:53.770 --> 00:05:56.700
a beta of AndroidX Test.

00:05:56.700 --> 00:05:59.050
It brings testing as
a first class citizen

00:05:59.050 --> 00:06:02.846
as part of the tool
chain, as part of Jetpack.

00:06:02.846 --> 00:06:05.320
And we include some of
the existing libraries

00:06:05.320 --> 00:06:09.890
you've used before, some new
APIs, full Kotlin support,

00:06:09.890 --> 00:06:13.570
which allows you to write really
beautiful and concise tests,

00:06:13.570 --> 00:06:15.790
and it's available
on and off device.

00:06:18.730 --> 00:06:22.930
Well, last week, AndroidX
Test moved out of beta,

00:06:22.930 --> 00:06:24.720
into the first full
and final release--

00:06:24.720 --> 00:06:27.695
1.0.

00:06:27.695 --> 00:06:32.210
It's also, as of last
week, fully open sourced,

00:06:32.210 --> 00:06:35.440
so we look forward to
welcoming your contributions.

00:06:35.440 --> 00:06:39.370
And all of the documentation
on developer.Androi

00:06:39.370 --> 00:06:44.420
d.com/training/testing has
all been revamped to show you

00:06:44.420 --> 00:06:46.250
the new styles of APIs.

00:06:46.250 --> 00:06:50.070
So please go and check that out.

00:06:50.070 --> 00:06:53.330
So let's take a look inside.

00:06:53.330 --> 00:06:54.990
The first module
that we pulled across

00:06:54.990 --> 00:06:57.859
was the existing
JUnit for support--

00:06:57.859 --> 00:07:00.150
the runner and the rules that
you may have used before.

00:07:03.440 --> 00:07:06.970
We've also added a new
module, which we call Core,

00:07:06.970 --> 00:07:10.200
and this includes some new APIs.

00:07:10.200 --> 00:07:12.420
ApplicationProvider--
as its name

00:07:12.420 --> 00:07:14.910
suggests, it's a
quick and easy way

00:07:14.910 --> 00:07:18.600
to get a hold of the
application context.

00:07:18.600 --> 00:07:22.620
ActivityScenario, which
is a brand new API that

00:07:22.620 --> 00:07:27.180
provides coarse and fine
grained APIs for which

00:07:27.180 --> 00:07:29.140
you can test your activities.

00:07:29.140 --> 00:07:31.980
And FragmentScenario, which
was released, actually,

00:07:31.980 --> 00:07:36.120
just this week, providing a
very similar set of testing

00:07:36.120 --> 00:07:37.470
features for fragments.

00:07:40.690 --> 00:07:45.720
We've also brought Espresso into
the Jetpack AndroidX family.

00:07:45.720 --> 00:07:52.130
Espresso, if you're
not aware, is a library

00:07:52.130 --> 00:07:56.050
with a set of view matching
APIs and a set of view actions.

00:07:56.050 --> 00:07:59.600
So it'll allow you to match
and then interact with those UI

00:07:59.600 --> 00:08:00.680
elements.

00:08:00.680 --> 00:08:03.650
It also includes some other
things like the ability

00:08:03.650 --> 00:08:06.290
to capture and stub
intents for the system.

00:08:09.212 --> 00:08:14.540
And finally, we've also released
some Truth Android extensions.

00:08:14.540 --> 00:08:19.140
And Truth is Google's
open-source fluent testing

00:08:19.140 --> 00:08:21.780
sessions library,
and we've brought

00:08:21.780 --> 00:08:25.350
in a bunch of components
for Android subjects,

00:08:25.350 --> 00:08:26.970
which allow you to
test your Android

00:08:26.970 --> 00:08:30.270
objects in a way that reads
beautifully and concisely.

00:08:33.559 --> 00:08:35.960
Those of you who've been
using Roboelectric will

00:08:35.960 --> 00:08:38.030
know that we've had a version--

00:08:38.030 --> 00:08:40.850
4.0-- in beta for a while.

00:08:40.850 --> 00:08:44.510
And as of last week, we
did a simultaneous release.

00:08:44.510 --> 00:08:47.490
That's now gone into final.

00:08:47.490 --> 00:08:51.050
Roboelectric 4 fully supports
all of the unified APIs

00:08:51.050 --> 00:08:53.390
that are in AndroidX
Test, as well as

00:08:53.390 --> 00:08:56.750
a number of its own new
features and improvements.

00:09:02.184 --> 00:09:03.666
OK.

00:09:03.666 --> 00:09:08.040
And so I'd like to
welcome Yuki on stage.

00:09:08.040 --> 00:09:11.400
He's going to give you
a deeper dive into some

00:09:11.400 --> 00:09:13.240
of the APIs available.

00:09:19.120 --> 00:09:21.427
Yuki?

00:09:21.427 --> 00:09:23.263
[APPLAUSE]

00:09:24.181 --> 00:09:25.640
Here you go.

00:09:25.640 --> 00:09:26.600
YUKI HAMADA: Thanks.

00:09:26.600 --> 00:09:28.610
Thanks, Jonathan.

00:09:28.610 --> 00:09:30.520
Hi, everyone.

00:09:30.520 --> 00:09:35.390
So let me introduce
our new APIs.

00:09:35.390 --> 00:09:37.500
Let's start with
ApplicationProvider,

00:09:37.500 --> 00:09:41.225
which is a new way of accessing
context from your test board.

00:09:44.620 --> 00:09:47.230
So when you work
on Android testing,

00:09:47.230 --> 00:09:51.340
you need to handle two
different context objects.

00:09:51.340 --> 00:10:00.770
The first one comes from
application under your test

00:10:00.770 --> 00:10:05.210
and the second one comes
from the instrumentation APK,

00:10:05.210 --> 00:10:06.950
where your test code is stored.

00:10:10.296 --> 00:10:16.330
So with today's library, we
have two different methods

00:10:16.330 --> 00:10:20.680
to access this context object,
and this makes your test code

00:10:20.680 --> 00:10:24.280
harder to understand
because the library uses

00:10:24.280 --> 00:10:26.890
library static terminology.

00:10:26.890 --> 00:10:32.200
Target context means context
from your instrumentation APK,

00:10:32.200 --> 00:10:33.530
while--

00:10:33.530 --> 00:10:34.380
sorry.

00:10:34.380 --> 00:10:37.390
The target context means the
context from your application,

00:10:37.390 --> 00:10:40.510
while get context
means the context

00:10:40.510 --> 00:10:42.880
from your instrumentation APK.

00:10:42.880 --> 00:10:51.330
Also, it is not obvious which
one to use for your test.

00:10:51.330 --> 00:10:56.570
So in our new API, we hide
the instrumentation context

00:10:56.570 --> 00:11:02.390
from public API, and
ApplicationProvider only

00:11:02.390 --> 00:11:05.950
provides our application context
in the form of your application

00:11:05.950 --> 00:11:06.450
graph.

00:11:09.200 --> 00:11:11.380
Let's take a look
at the example code.

00:11:11.380 --> 00:11:16.040
So here, let's say we have a
test for the location tracker

00:11:16.040 --> 00:11:20.300
activity, and in
the setup method,

00:11:20.300 --> 00:11:24.500
we get the target context
in the old fashioned way,

00:11:24.500 --> 00:11:29.160
and we typecast it to our
location tracker application

00:11:29.160 --> 00:11:33.050
so that we can register our
mock object for testing.

00:11:33.050 --> 00:11:37.905
And second line, set the
mock object for that.

00:11:37.905 --> 00:11:41.936
And this code is pretty
simple and it actually works,

00:11:41.936 --> 00:11:44.990
but you could have
used a wrong context

00:11:44.990 --> 00:11:50.060
and faced a runtime
error and ended up

00:11:50.060 --> 00:11:52.938
with wasting your
time for debugging.

00:11:56.074 --> 00:12:02.260
Now, with the new way,
application context provider

00:12:02.260 --> 00:12:06.490
provides your context in
your application graph,

00:12:06.490 --> 00:12:09.550
so you can do the
exact same thing,

00:12:09.550 --> 00:12:12.958
but there is much less
chance for confusion or bugs.

00:12:15.946 --> 00:12:17.440
OK.

00:12:17.440 --> 00:12:20.150
Let me move onto the
more complicated stuff--

00:12:20.150 --> 00:12:22.020
ActivityScenario.

00:12:22.020 --> 00:12:25.260
Actually, before we
dive into details,

00:12:25.260 --> 00:12:27.550
I have a few questions for you.

00:12:27.550 --> 00:12:30.570
How many of you have
written your own activity

00:12:30.570 --> 00:12:36.210
and handled the lifecycle
transition by yourself?

00:12:36.210 --> 00:12:39.240
Please raise your
hand if you are.

00:12:39.240 --> 00:12:40.240
Cool.

00:12:40.240 --> 00:12:44.060
And how many of you have
shipped your activity

00:12:44.060 --> 00:12:48.612
with a nig related
to life cycles?

00:12:48.612 --> 00:12:50.512
Oh, many of you.

00:12:50.512 --> 00:12:54.680
And who didn't like
the test for that?

00:12:54.680 --> 00:12:57.140
Who did not like the test?

00:12:57.140 --> 00:12:57.910
Cool.

00:12:57.910 --> 00:12:58.810
Well, yeah.

00:12:58.810 --> 00:13:00.790
I see some hands
up-- keeping up.

00:13:00.790 --> 00:13:02.590
And to be honest, I did, too.

00:13:02.590 --> 00:13:04.150
And I agree.

00:13:04.150 --> 00:13:08.680
The writing test for the
activity life cycle transition

00:13:08.680 --> 00:13:13.390
is pretty hard, and
there is no such good API

00:13:13.390 --> 00:13:15.910
in our testing library as now.

00:13:15.910 --> 00:13:19.660
So that's why me and
Jonathan and our team

00:13:19.660 --> 00:13:22.220
have sought for a
solution, and we developed

00:13:22.220 --> 00:13:25.090
the ActivityScenario,
which-- you can use it

00:13:25.090 --> 00:13:27.740
for driving your activity
state to an arbitrary

00:13:27.740 --> 00:13:31.010
state for testing.

00:13:31.010 --> 00:13:35.420
So let's revisit the
activity state first.

00:13:35.420 --> 00:13:39.440
So the created state is
when activity is created--

00:13:39.440 --> 00:13:47.270
I mean, instantiated-- but it
is not visible to users yet,

00:13:47.270 --> 00:13:51.440
or activity can be
created state while it is

00:13:51.440 --> 00:13:54.920
running in background, as well.

00:13:54.920 --> 00:13:57.310
And the started state
is when activity

00:13:57.310 --> 00:13:59.610
is created and started.

00:13:59.610 --> 00:14:03.460
It's partially visible to
users, but not the foreground

00:14:03.460 --> 00:14:04.870
activity.

00:14:04.870 --> 00:14:10.700
Activities running in picture
mode are also in this state.

00:14:10.700 --> 00:14:13.870
And the resumed state
is where your activity

00:14:13.870 --> 00:14:17.000
is fully visible to users
and running in foreground.

00:14:20.910 --> 00:14:24.320
And under the framework-- can
change the life cycle state

00:14:24.320 --> 00:14:27.330
by any time by the
user interactions,

00:14:27.330 --> 00:14:29.840
so your activity has
to handle those state

00:14:29.840 --> 00:14:34.400
transitions properly for
a good user experience.

00:14:34.400 --> 00:14:37.934
Otherwise, you'll see some bugs.

00:14:37.934 --> 00:14:40.620
And the ActivityScenario
provides a method move

00:14:40.620 --> 00:14:44.840
to state, which you can drive
your activity's life cycle

00:14:44.840 --> 00:14:47.180
state to an arbitrary
state for testing.

00:14:47.180 --> 00:14:50.000
Let's take a look
at the example code.

00:14:50.000 --> 00:14:53.600
Here, we have our test for
our location tracker activity,

00:14:53.600 --> 00:14:57.710
and here, we want to verify
that the location listener is

00:14:57.710 --> 00:15:00.380
properly unregistered
from the system

00:15:00.380 --> 00:15:04.090
when the activity
becomes a created state.

00:15:04.090 --> 00:15:07.250
So at first, we have
this start activity.

00:15:07.250 --> 00:15:12.380
Launch activity takes your
activity graph and start

00:15:12.380 --> 00:15:16.670
activity, and waits for it
until it becomes resumed state.

00:15:20.918 --> 00:15:24.960
And move to state initiates
that life cycle transition

00:15:24.960 --> 00:15:28.610
and moves the life cycle
state to the created state.

00:15:28.610 --> 00:15:32.400
Also, the older
ActivityScenario method

00:15:32.400 --> 00:15:34.200
works as a blocking code.

00:15:34.200 --> 00:15:38.130
So after this method
go, it is guaranteed

00:15:38.130 --> 00:15:43.440
that the activity's life
cycle state-- to be created.

00:15:43.440 --> 00:15:47.050
And then you can inspect your
activity's internal state

00:15:47.050 --> 00:15:49.800
by coding own activity method.

00:15:49.800 --> 00:15:51.320
Yes, that's easy.

00:15:51.320 --> 00:15:54.200
Now we have our API.

00:15:54.200 --> 00:15:56.840
And also, you can
use ActivityScenario

00:15:56.840 --> 00:16:01.560
for testing the creation
of your activity.

00:16:01.560 --> 00:16:07.380
So activity recreation
happens when your activity

00:16:07.380 --> 00:16:09.537
is running in background
for a long time

00:16:09.537 --> 00:16:10.745
and when you come back later.

00:16:13.350 --> 00:16:17.000
And your activity has to
save its internal state

00:16:17.000 --> 00:16:22.340
to a saved instance
state bundle before it

00:16:22.340 --> 00:16:25.822
is destroyed, otherwise,
you will lose the state.

00:16:25.822 --> 00:16:28.140
And ActivityScenario
has a method--

00:16:28.140 --> 00:16:33.090
recreate-- where you can use
it for testing such a scenario.

00:16:33.090 --> 00:16:35.690
Let's see the example code.

00:16:35.690 --> 00:16:38.580
So here in this test,
we want to make sure

00:16:38.580 --> 00:16:42.240
that input text is restored
properly after the activity is

00:16:42.240 --> 00:16:45.482
recreated after destruction.

00:16:45.482 --> 00:16:51.260
So first, we have some test
data like test user as an input,

00:16:51.260 --> 00:16:55.320
and again, we start
activity, and then

00:16:55.320 --> 00:17:00.595
we fill a text box by
using the Espresso library.

00:17:00.595 --> 00:17:03.060
As you can see, the
ActivityScenario

00:17:03.060 --> 00:17:05.599
works pretty nicely
with Espresso,

00:17:05.599 --> 00:17:11.220
and then we code recreate, which
actually destroys the activity

00:17:11.220 --> 00:17:16.200
and recreates a new instance
and waits for the activity

00:17:16.200 --> 00:17:18.093
to be resumed state.

00:17:18.093 --> 00:17:21.470
And then, again, using
your Espresso again,

00:17:21.470 --> 00:17:26.480
we can make sure that the
text is there, as we expected.

00:17:26.480 --> 00:17:27.780
Yes, it's all so simple.

00:17:30.330 --> 00:17:34.230
Finally, I'd like to show you
one more example from the Truth

00:17:34.230 --> 00:17:36.210
extension.

00:17:36.210 --> 00:17:40.320
Intent subject-- by
use of intent subject,

00:17:40.320 --> 00:17:47.010
you can verify
your intent values,

00:17:47.010 --> 00:17:50.850
and it produces really
good human friendly error

00:17:50.850 --> 00:17:54.380
messages if the error happens.

00:17:54.380 --> 00:17:55.710
Let's see an example code.

00:17:55.710 --> 00:17:58.360
In this time, we
want to, again, make

00:17:58.360 --> 00:18:04.470
sure our data intent has an
expected contact name in it--

00:18:04.470 --> 00:18:05.560
extra.

00:18:05.560 --> 00:18:11.182
So first, we create a
bundle of the data intent,

00:18:11.182 --> 00:18:15.120
and then we assert
by three lines.

00:18:15.120 --> 00:18:19.340
One is checking if that
intent has expected actions,

00:18:19.340 --> 00:18:21.740
and the second one is
type, and the third one

00:18:21.740 --> 00:18:25.014
is the extra bundles.

00:18:25.014 --> 00:18:28.890
And if the value doesn't
match your expectation,

00:18:28.890 --> 00:18:30.990
you see this error.

00:18:30.990 --> 00:18:33.270
As you can see,
you can immediately

00:18:33.270 --> 00:18:37.620
know in this example,
the intent action

00:18:37.620 --> 00:18:39.790
is not what you expected.

00:18:43.252 --> 00:18:49.580
And [INAUDIBLE] component
come with AndroidX Test 1.0.

00:18:49.580 --> 00:18:51.573
I can't show you
everything today,

00:18:51.573 --> 00:18:55.160
but for example, we
have more assertions

00:18:55.160 --> 00:18:57.880
and we also have
Android builders

00:18:57.880 --> 00:19:00.950
where you can create
your testing data easily.

00:19:00.950 --> 00:19:05.420
And also, scenarios for
activity and fragments, and you

00:19:05.420 --> 00:19:08.660
can take a look at this link
or documentation to see more.

00:19:08.660 --> 00:19:10.650
I hope you do try it
out after the talk.

00:19:15.100 --> 00:19:15.600
OK.

00:19:15.600 --> 00:19:20.180
So this is our solution for
the test writing crisis.

00:19:20.180 --> 00:19:25.620
So with unified
API, you no longer

00:19:25.620 --> 00:19:28.200
consider whether to
write an instrumentation

00:19:28.200 --> 00:19:33.270
test or the Roboelectric test
because you can now just write

00:19:33.270 --> 00:19:35.820
an Android test,
and that test runs

00:19:35.820 --> 00:19:41.542
on both runtime
environments nicely.

00:19:41.542 --> 00:19:46.580
So with the unified API, you
can focus on what to test

00:19:46.580 --> 00:19:51.024
and you can forget
about where and how.

00:19:51.024 --> 00:19:53.920
And to ensure the
consistency of the behavior

00:19:53.920 --> 00:19:58.120
of our API, we have
a verification test,

00:19:58.120 --> 00:20:01.840
and we run the same
test against the--

00:20:01.840 --> 00:20:02.460
sorry.

00:20:02.460 --> 00:20:05.770
We run the same test
locally with Roboelectric,

00:20:05.770 --> 00:20:09.910
and also, we run our
test on virtual devices,

00:20:09.910 --> 00:20:13.860
from the API level 15
to the latest version.

00:20:18.100 --> 00:20:21.590
And let's go back to the
workflow we showed you

00:20:21.590 --> 00:20:23.810
earlier in this talk.

00:20:23.810 --> 00:20:27.760
So we can execute the
test driven development

00:20:27.760 --> 00:20:31.690
much more efficiently
using the device agnostic

00:20:31.690 --> 00:20:37.340
test with the data test
writing in a unified API.

00:20:37.340 --> 00:20:40.240
As our recommendation,
we recommend

00:20:40.240 --> 00:20:46.930
that you write the test and
run the test with Roboelectric,

00:20:46.930 --> 00:20:51.520
until your code is ready
to submit, and then

00:20:51.520 --> 00:20:55.360
run the same test, but
on the virtual devices

00:20:55.360 --> 00:20:58.210
before actually you submit
the test to maximize

00:20:58.210 --> 00:20:59.710
your confidence.

00:20:59.710 --> 00:21:03.100
Also, you can run the same test
as a continuous integration

00:21:03.100 --> 00:21:05.435
test against the
[INAUDIBLE] binaries.

00:21:08.500 --> 00:21:12.150
With the upcoming Nitrogen
[? two ?] [? chains, ?] you can

00:21:12.150 --> 00:21:14.040
set up such a
configuration easily.

00:21:17.130 --> 00:21:20.820
If you want to know more
about the Project Nitrogen,

00:21:20.820 --> 00:21:24.810
we have a session
tomorrow, and we highly

00:21:24.810 --> 00:21:27.834
recommend attending it.

00:21:27.834 --> 00:21:28.554
Cool.

00:21:28.554 --> 00:21:29.970
Thank you very
much for listening,

00:21:29.970 --> 00:21:31.840
and have a happy testing.

00:21:31.840 --> 00:21:33.040
[APPLAUSE]

00:21:33.940 --> 00:21:36.390
[MUSIC PLAYING]

