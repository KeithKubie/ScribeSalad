WEBVTT
Kind: captions
Language: en

00:00:02.430 --> 00:00:05.320
 We live in a time of thirst for data. 

00:00:05.320 --> 00:00:08.866
 Users want more data, and often spend a lot of time searching for it. 

00:00:09.050 --> 00:00:13.950
 As a developer of a great future social networking application, this may look exactly like your business plan. 

00:00:14.184 --> 00:00:16.764
 But unless you create network requests in the right way, 

00:00:16.811 --> 00:00:19.756
 Your business plan will become a big flop. 

00:00:20.020 --> 00:00:21.034
 My name is Colt McCannless. 

00:00:21.034 --> 00:00:23.922
 It is not known to most developers that each application is a single network 

00:00:23.953 --> 00:00:27.152
 Often involves a set of performance issues for users. 

00:00:27.510 --> 00:00:30.740
 In essence, network performance is about reducing the amount of time 

00:00:30.741 --> 00:00:33.831
 Between when the user wants the data and when the network returns it. 

00:00:33.854 --> 00:00:36.102
 There are a lot of things that affect this variable, 

00:00:36.134 --> 00:00:39.688
 For example, delay in bandwidth, speed of cellular communication, 

00:00:40.010 --> 00:00:42.276
 The small mammals, it seems. 

00:00:42.415 --> 00:00:44.586
 These are typical things that users should know, 

00:00:44.587 --> 00:00:46.714
 And generally understand, when it comes to networking. 

00:00:46.738 --> 00:00:49.167
 But there is also a second set of performance concerns 

00:00:49.210 --> 00:00:52.842
 Developers must pay attention to it, which is more realistic. 

00:00:53.039 --> 00:00:55.429
 For example, the use of cellular broadcast waves to connect to the network 

00:00:55.660 --> 00:00:59.088
 Is primarily responsible for spoiling battery performance in mobile phones 

00:00:59.283 --> 00:01:03.836
 The more data you transmit, the more costs and fees for users. 

00:01:04.160 --> 00:01:06.720
 Note, most of the time, people who use limited bandwidth devices 

00:01:06.720 --> 00:01:09.454
 Do not feel grateful to you for downloading 2 gigabytes of image data 

00:01:09.498 --> 00:01:10.945
 For the application of social media. 

00:01:11.320 --> 00:01:13.915
 But in the end, it's all about two main things 

00:01:13.938 --> 00:01:15.414
 Which developers need to focus on. 

00:01:15.540 --> 00:01:19.250
 First, reduce the time that the broadcast waves remain active. 

00:01:19.250 --> 00:01:22.703
 Second, reduce the size of the data you bring. 

00:01:23.120 --> 00:01:26.230
 Now, reducing the number of applications is in fact a complex equation. 

00:01:26.230 --> 00:01:29.729
 But for reason, you can circulate them to three primary groups. 

00:01:30.050 --> 00:01:34.179
 First things that the user asks you to do. Such as, update now. 

00:01:34.450 --> 00:01:38.486
 Second, the things the server needs to let you know, such as a response 

00:01:38.502 --> 00:01:40.855
 Or inform you that new social data is available. 

00:01:40.900 --> 00:01:43.754
 Thirdly, things that must be loaded periodically, 

00:01:43.755 --> 00:01:45.950
 Such as downloading analytics and searching for the location of any device, 

00:01:45.986 --> 00:01:47.912
 Or anything else interesting. 

00:01:48.420 --> 00:01:52.457
 Now, the second and third categories are the main candidates for improvement. 

00:01:53.050 --> 00:01:57.998
 For example, you should never under any circumstances query the server regularly for updates. 

00:01:58.162 --> 00:02:00.577
 You basically waste bandwidth and battery 

00:02:00.664 --> 00:02:02.768
 To tell you the server that nothing has changed 

00:02:02.942 --> 00:02:07.293
 Instead, it is better to take advantage of other services like Google Cloud Email, 

00:02:07.535 --> 00:02:10.580
 Which will allow the server to flag the app when there is new content. 

00:02:10.737 --> 00:02:13.333
 This will reduce the battery consumption of the phone 

00:02:13.334 --> 00:02:15.608
 As well as reducing the total number of server responses 

00:02:15.636 --> 00:02:17.010
 Which you should worry about. 

00:02:17.320 --> 00:02:20.606
 For cases where the use of the cathode is not possible, 

00:02:20.764 --> 00:02:24.888
 It is extremely important to limit the frequency of such requests. 

00:02:24.934 --> 00:02:29.071
 For example, instead of querying the server every five seconds to request data, 

00:02:29.182 --> 00:02:30.920
 You can try using the Undo style 

00:02:30.920 --> 00:02:34.372
 To reduce the number of applications and to obtain the same results. 

00:02:34.482 --> 00:02:37.119
 Instead of leaving your orders organized over time, 

00:02:37.293 --> 00:02:40.196
 Try to group them together, so that they are executed in short batches 

00:02:40.306 --> 00:02:42.271
 In order to improve the active cellular transmission waves, 

00:02:42.294 --> 00:02:44.720
 Which of course, will reduce waste battery. 

00:02:44.820 --> 00:02:48.841
 You can even consider pre-fetching your data so you can reduce the need 

00:02:48.931 --> 00:02:51.992
 To make future requests for what you can do now. 

00:02:52.252 --> 00:02:55.249
 Now, organizing all these improvements together is a quick way 

00:02:55.257 --> 00:02:57.218
 To reduce the total number of applications, 

00:02:57.258 --> 00:03:00.820
 Which will miracles in terms of battery life and costs to users. 

00:03:00.945 --> 00:03:03.839
 The good news is that you can update your app to take these patterns 

00:03:03.840 --> 00:03:05.915
 Without having to write a huge amount of code. 

00:03:06.122 --> 00:03:09.422
 GCMNetworkManager is an API of Google Play services, 

00:03:09.430 --> 00:03:13.870
 Which helps you schedule tasks for the network and do the assembly for you. 

00:03:13.870 --> 00:03:16.661
 This greatly simplifies the implementation of common patterns, 

00:03:16.662 --> 00:03:21.106
 Such as waiting for network connection, retry network, accelerated decline, 

00:03:21.304 --> 00:03:24.885
 Basically all the good things you need are a handy and simple API. 

00:03:25.380 --> 00:03:27.840
 Now, of course, is the second important goal that performance targets 

00:03:27.840 --> 00:03:30.647
 Is to limit the size of the data in your order, 

00:03:30.824 --> 00:03:34.419
 These problems, no matter how complicated they are, are my favorite. 

00:03:34.568 --> 00:03:37.217
 Let's see if we can get all this into one chip, do we start? 

00:03:37.310 --> 00:03:39.567
 First, watch the CompressorHead video series 

00:03:39.567 --> 00:03:42.134
 So that you can understand more about data compression in general 

00:03:42.196 --> 00:03:44.048
 And the algorithms that make up this science. 

00:03:44.120 --> 00:03:47.673
 Then make sure that you take the time to read my article about image compression 

00:03:47.674 --> 00:03:52.889
 Then continue to be strict in terms of the quality and format of the images you send to the servers. 

00:03:52.922 --> 00:03:54.922
 Remember, the smaller they are the better. 

00:03:54.996 --> 00:03:58.410
 Oh, and if you are a game developer, check out the topic of " 

00:03:58.410 --> 00:04:02.355
 Or from fast-paced image formats to get better results for an ideal structure. 

00:04:02.560 --> 00:04:05.881
 Once you have completed this, count and check the theme "GZip is not enough" 

00:04:06.024 --> 00:04:09.060
 For a better understanding of compression without loss of textual data. 

00:04:09.061 --> 00:04:11.071
 There is an article about it too. 

00:04:11.072 --> 00:04:13.335
 That follows, of course, a clear look 

00:04:13.351 --> 00:04:16.171
 The number of times you send XML and JSON packets, 

00:04:16.298 --> 00:04:20.661
 Which we hope to frustrate you, you have to realize that you should not send raw text data, 

00:04:20.701 --> 00:04:23.721
 Instead, you should take advantage of Protobufs or FlatBuffers formats, 

00:04:23.757 --> 00:04:26.027
 Which I have a video about too. 

00:04:26.690 --> 00:04:28.249
 I talk a lot about pressure. 

00:04:28.540 --> 00:04:32.474
 However, if you have ever wondered how your application uses the network well or badly, 

00:04:32.474 --> 00:04:34.567
 Make sure you spend a lot of time getting familiar enough 

00:04:34.567 --> 00:04:36.731
 About the networking tool within Android Studio. 

00:04:36.790 --> 00:04:39.724
 You'll see how many times your orders were submitted, the size of those requests, 

00:04:39.725 --> 00:04:41.664
 How long it takes to complete the return trip. 

00:04:41.694 --> 00:04:46.302
 Basically, if something is wrong, this tool is the first step to tracking the error. 

00:04:46.500 --> 00:04:49.000
 But as we all know, this is just the beginning. 

00:04:49.000 --> 00:04:51.977
 For a more in-depth discussion of any of the topics you've put forward, 

00:04:51.978 --> 00:04:54.916
 Check out the rest of the resources of Android performance patterns 

00:04:55.036 --> 00:04:59.875
 And do not forget that there are a lot of developers out there who solve the same performance problems as you. 

00:05:00.050 --> 00:05:04.079
 So visit the Google+ community and ask for advice when you're having trouble. 

00:05:04.444 --> 00:05:09.280
 However, keep calm, write your code, and remember, performance is important. 

