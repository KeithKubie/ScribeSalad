WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.400
[MUSIC PLAYING]

00:00:08.400 --> 00:00:09.150
Hi.

00:00:09.150 --> 00:00:10.640
My name is Trevor Johns.

00:00:10.640 --> 00:00:13.510
I'm a Developer Programs
Engineer on the Android team.

00:00:13.510 --> 00:00:15.770
Let's take a bit to talk about
how to do network service

00:00:15.770 --> 00:00:17.210
discovery on Android.

00:00:17.210 --> 00:00:19.720
So what is network service
discovery?

00:00:19.720 --> 00:00:21.730
So say that you have a game and
you want to let friends

00:00:21.730 --> 00:00:23.050
play with each other.

00:00:23.050 --> 00:00:25.490
One approach is to get email
addresses for everyone in the

00:00:25.490 --> 00:00:28.440
game and use that to set up
a shared room on a server

00:00:28.440 --> 00:00:30.030
somewhere in the cloud.

00:00:30.030 --> 00:00:31.580
It's not a bad approach,
especially if you're going to

00:00:31.580 --> 00:00:33.510
be competing with someone
far away.

00:00:33.510 --> 00:00:36.190
But if all your friends are
sitting right next to, all

00:00:36.190 --> 00:00:37.460
those email addresses are
going to get a bit

00:00:37.460 --> 00:00:38.790
inconvenient.

00:00:38.790 --> 00:00:41.480
Wouldn't it be great if you
could just find nearby users

00:00:41.480 --> 00:00:43.650
who also happen to have
your app just based on

00:00:43.650 --> 00:00:45.550
the physical proximity?

00:00:45.550 --> 00:00:48.260
This is where network service
discovery, or NSD, comes into

00:00:48.260 --> 00:00:49.400
the picture.

00:00:49.400 --> 00:00:52.670
NSD lets your app find other
devices on the local network

00:00:52.670 --> 00:00:54.670
that support services you're
interested in.

00:00:54.670 --> 00:00:56.430
Those services could be
physical devices like

00:00:56.430 --> 00:01:02.110
printers, webcams, HTTP servers,
and, yes, even games.

00:01:02.110 --> 00:01:04.430
In a sense, it terms any
local network into a

00:01:04.430 --> 00:01:06.240
social network for apps.

00:01:06.240 --> 00:01:09.180
Take this game here, which uses
NSD to place everyone on

00:01:09.180 --> 00:01:11.620
the same subnet into a
virtual waiting room.

00:01:11.620 --> 00:01:13.790
It's a quick way
to form teams.

00:01:13.790 --> 00:01:16.250
Once discovered, you'll then be
able to connect directly to

00:01:16.250 --> 00:01:18.000
any of those apps using
the standard

00:01:18.000 --> 00:01:20.450
Android networking stack.

00:01:20.450 --> 00:01:22.050
So let's go into a bit
more details about

00:01:22.050 --> 00:01:23.420
how all this works.

00:01:23.420 --> 00:01:25.365
And then I'll show you how to
implement the code for all of

00:01:25.365 --> 00:01:27.270
this inside of your app.

00:01:27.270 --> 00:01:29.340
NSD is based on two
protocols--

00:01:29.340 --> 00:01:33.070
DNS-SD and multicast DNS.

00:01:33.070 --> 00:01:35.180
The SD stands for service
discovery.

00:01:35.180 --> 00:01:37.760
Like DNS on the internet, this
provides a mapping between

00:01:37.760 --> 00:01:39.320
human friendly host names--

00:01:39.320 --> 00:01:41.480
so, say, myphone.local--

00:01:41.480 --> 00:01:43.950
and the IP address where
that device lives.

00:01:43.950 --> 00:01:46.780
Now normally you'd go to
something like google.com.

00:01:46.780 --> 00:01:48.920
In this case, everything is
going to be ending in

00:01:48.920 --> 00:01:51.590
something.local because it's
on the local subnet.

00:01:51.590 --> 00:01:53.620
That's how the device can
distinguish between devices

00:01:53.620 --> 00:01:57.900
advertised via multicast DNS and
devices advertised using

00:01:57.900 --> 00:02:00.740
the global DNS system.

00:02:00.740 --> 00:02:04.400
So unlike traditional DNS,
MDNS is completely

00:02:04.400 --> 00:02:07.560
distributed, which means
no central server.

00:02:07.560 --> 00:02:10.229
Devices communicate amongst
themselves to build a network

00:02:10.229 --> 00:02:11.890
directory of services.

00:02:11.890 --> 00:02:14.920
Since it's based on multicast,
it only works between devices

00:02:14.920 --> 00:02:16.550
on the same broadcast domain.

00:02:16.550 --> 00:02:18.750
So such as a LAN.

00:02:18.750 --> 00:02:22.050
It also requires the network
supports multicast traffic,

00:02:22.050 --> 00:02:23.560
which some businesses
or university

00:02:23.560 --> 00:02:25.280
networks might disable.

00:02:25.280 --> 00:02:27.760
But it should work without
problems on most home

00:02:27.760 --> 00:02:30.780
networks, or even small
business networks.

00:02:30.780 --> 00:02:35.450
DNS-SD extends multicast DNS to
provide service discovery,

00:02:35.450 --> 00:02:39.270
listing what hosts implement
specific protocols.

00:02:39.270 --> 00:02:41.990
Many people think of DNS
exclusively in the context of

00:02:41.990 --> 00:02:44.660
mapping host names
to IP addresses.

00:02:44.660 --> 00:02:47.400
But DNS is actually general,
if somewhat limited,

00:02:47.400 --> 00:02:48.660
hierarchical database.

00:02:48.660 --> 00:02:50.540
It can store almost
any kind of data

00:02:50.540 --> 00:02:53.050
for almost any purpose.

00:02:53.050 --> 00:02:56.110
So service names in this case
will take the form of

00:02:56.110 --> 00:02:57.360
service.transport.local.

00:02:59.330 --> 00:03:01.590
This is how we're mapping from
a service name to what you

00:03:01.590 --> 00:03:04.090
traditionally think of
as a domain name.

00:03:04.090 --> 00:03:08.030
So in this case, we're
using myapp.tcp.

00:03:08.030 --> 00:03:11.160
myapp is the service name.

00:03:11.160 --> 00:03:14.300
And tcp is the network transport
that we're using.

00:03:14.300 --> 00:03:16.890
Clients can then go and query
on this name to retrieve the

00:03:16.890 --> 00:03:19.430
listing of devices
supporting it.

00:03:19.430 --> 00:03:23.410
Once a desired device is
selected, the IP address, port

00:03:23.410 --> 00:03:25.650
number, and any other necessary
metadata are

00:03:25.650 --> 00:03:29.620
requested via DNS service
or SRV records.

00:03:29.620 --> 00:03:32.050
Since we're using multicast
DNS rather than the usual

00:03:32.050 --> 00:03:34.880
internet DNS infrastructure,
there's no need to go and

00:03:34.880 --> 00:03:38.140
register these domains within
any registrar or pay money.

00:03:38.140 --> 00:03:40.900
You can just simply broadcast
them to network peers as

00:03:40.900 --> 00:03:42.100
they're needed.

00:03:42.100 --> 00:03:44.020
Now that said, it's still a
good idea to register your

00:03:44.020 --> 00:03:47.980
service name with the IANA to
prevent any name collisions.

00:03:47.980 --> 00:03:50.800
There's a free service
iana.org that

00:03:50.800 --> 00:03:52.950
will let you do this.

00:03:52.950 --> 00:03:55.090
Now we've gone over the protocol
details, let's talk

00:03:55.090 --> 00:03:58.580
about using the NSD APIs on
Android to broadcast your

00:03:58.580 --> 00:04:00.250
app's custom service.

00:04:00.250 --> 00:04:02.380
The good news is you don't need
to worry about most of

00:04:02.380 --> 00:04:04.590
the protocol details since the
OS takes care of almost

00:04:04.590 --> 00:04:06.120
everything for you.

00:04:06.120 --> 00:04:09.220
So before you start, let's say
that we have our app listening

00:04:09.220 --> 00:04:10.840
on an available port.

00:04:10.840 --> 00:04:13.250
This is just the code that you
typically use to open up a

00:04:13.250 --> 00:04:14.960
socket on Android.

00:04:14.960 --> 00:04:16.800
But notice that we're
not explicitly

00:04:16.800 --> 00:04:18.779
selecting a port here.

00:04:18.779 --> 00:04:20.700
Be careful to never hardcode
your port number when you're

00:04:20.700 --> 00:04:23.560
using NSD, since other apps
could be using the same port

00:04:23.560 --> 00:04:24.980
number as your app.

00:04:24.980 --> 00:04:27.290
Instead, we'll ask the
system to give us a

00:04:27.290 --> 00:04:29.200
random unused port.

00:04:29.200 --> 00:04:30.950
This is OK though, because
we're going to go and

00:04:30.950 --> 00:04:33.100
advertise this to other devices
so they'll be able to

00:04:33.100 --> 00:04:35.330
discover which port you're
listening on.

00:04:35.330 --> 00:04:38.450
So, now we have a service
listening for traffic on our

00:04:38.450 --> 00:04:41.380
device, we'll want to register
that on the local network.

00:04:41.380 --> 00:04:43.070
The first thing to do
is to create an NSD

00:04:43.070 --> 00:04:44.780
service info object.

00:04:44.780 --> 00:04:47.850
This object provides all the
information that other devices

00:04:47.850 --> 00:04:50.620
on the network will use when
they're deciding whether or

00:04:50.620 --> 00:04:52.420
not to connect to your
device or not.

00:04:52.420 --> 00:04:54.840
The service type, again,
uniquely identifies the

00:04:54.840 --> 00:04:56.690
service your phone
is advertising.

00:04:56.690 --> 00:04:59.680
So something like appname.tcp.

00:04:59.680 --> 00:05:01.730
And you'll typically put an
underscore in front of each

00:05:01.730 --> 00:05:04.460
section as a matter
of convention.

00:05:04.460 --> 00:05:08.120
The service name uniquely
identifies a particular

00:05:08.120 --> 00:05:09.090
instance of your app.

00:05:09.090 --> 00:05:12.060
So this is not the service
type, the service name.

00:05:12.060 --> 00:05:14.780
Now with the service name, it's
usually a good idea to

00:05:14.780 --> 00:05:17.490
use the device's Bluetooth name,
just as something that's

00:05:17.490 --> 00:05:19.360
nice and human friendly.

00:05:19.360 --> 00:05:20.790
It should be unique.

00:05:20.790 --> 00:05:22.230
But if not, it's
not a big deal.

00:05:22.230 --> 00:05:24.290
Android we go and append a
number to the end of the name

00:05:24.290 --> 00:05:26.050
to correct that error.

00:05:26.050 --> 00:05:29.380
Finally, we'll set the port
number that we selected above

00:05:29.380 --> 00:05:33.400
so that other apps know which
port we selected.

00:05:33.400 --> 00:05:36.370
Calling register service,
finally, will inform the OS

00:05:36.370 --> 00:05:37.660
about the new service.

00:05:37.660 --> 00:05:40.210
And Android will take care of
broadcasting that information

00:05:40.210 --> 00:05:42.890
out to other devices
as needed.

00:05:42.890 --> 00:05:44.860
At the end here there's a
registration listener, which

00:05:44.860 --> 00:05:47.790
is a set of call backs, like on
service registered, that'll

00:05:47.790 --> 00:05:50.520
let us know about the success or
failure of this operation.

00:05:50.520 --> 00:05:52.190
We're going to see this pattern
a lot over the next

00:05:52.190 --> 00:05:54.040
few slides.

00:05:54.040 --> 00:05:57.260
The important thing to notice
here is on service registered,

00:05:57.260 --> 00:06:00.880
which is where our app can go
and store the service name.

00:06:00.880 --> 00:06:03.490
Even though we set this when
registering, the OS might have

00:06:03.490 --> 00:06:06.200
changed it to resolve a conflict
from another device

00:06:06.200 --> 00:06:07.030
in the network.

00:06:07.030 --> 00:06:08.710
Remember I said that
the service name

00:06:08.710 --> 00:06:09.920
always has to be unique.

00:06:09.920 --> 00:06:13.440
So this is your chance to go and
discover if it wasn't and

00:06:13.440 --> 00:06:15.160
update your UI if needed.

00:06:15.160 --> 00:06:17.860
You might want to go and show
the service name to the user.

00:06:17.860 --> 00:06:18.950
Not all apps do though.

00:06:18.950 --> 00:06:22.190
So this might or might not
be of interest to you.

00:06:22.190 --> 00:06:24.370
Now that our app is registered,
let's take a look

00:06:24.370 --> 00:06:27.520
at how to issue a query
to find other devices.

00:06:27.520 --> 00:06:29.320
Service discovery, like service

00:06:29.320 --> 00:06:31.750
registration, has two steps--

00:06:31.750 --> 00:06:33.600
setting up a discovery listener
with the relevant

00:06:33.600 --> 00:06:36.900
call backs and making a single
asynchronous API call to

00:06:36.900 --> 00:06:38.600
discover services.

00:06:38.600 --> 00:06:39.480
Let's work backwards.

00:06:39.480 --> 00:06:41.930
We'll start with the call
to discover services.

00:06:41.930 --> 00:06:43.700
Here you'll pass in the service
name that you're

00:06:43.700 --> 00:06:44.390
interested in.

00:06:44.390 --> 00:06:47.540
So again, something
like myapp.tcp.

00:06:47.540 --> 00:06:50.450
The name of the discovery
protocol to use, which is

00:06:50.450 --> 00:06:51.690
always DNS-SD--

00:06:51.690 --> 00:06:54.010
again, this is not the
protocol of your app.

00:06:54.010 --> 00:06:56.130
It's the service discovery
protocol.

00:06:56.130 --> 00:06:58.750
And right now Android only
supports DNS-SD.

00:06:58.750 --> 00:07:01.950
So this argument will always
be protocol DNS-SD.

00:07:01.950 --> 00:07:04.880
And finally, a discovery
listener object, which is what

00:07:04.880 --> 00:07:08.260
we'll use to get the results
of this discovery process.

00:07:08.260 --> 00:07:11.660
The listener will get a call
back for each device found.

00:07:11.660 --> 00:07:13.240
And of course there's callbacks
where your app can

00:07:13.240 --> 00:07:15.010
handle any errors found.

00:07:15.010 --> 00:07:18.680
The important method here is
on service found, which is

00:07:18.680 --> 00:07:21.040
where we're going to find out
about all the services and the

00:07:21.040 --> 00:07:23.910
devices that we're potentially
interested in and store them

00:07:23.910 --> 00:07:25.400
in the list.

00:07:25.400 --> 00:07:28.500
This is the list that you'll
typically present to the user.

00:07:28.500 --> 00:07:31.100
And that will let them pick
which devices that they want

00:07:31.100 --> 00:07:32.340
to connect to.

00:07:32.340 --> 00:07:35.420
So once we know which devices we
want to connect to, we call

00:07:35.420 --> 00:07:37.090
resolve service.

00:07:37.090 --> 00:07:38.670
This is another asynchronous
call.

00:07:38.670 --> 00:07:39.820
It's a little bit expensive.

00:07:39.820 --> 00:07:43.220
So again, we have a listener
that's going to go and get the

00:07:43.220 --> 00:07:44.670
results of this.

00:07:44.670 --> 00:07:47.660
And this is where we find out
the IP address and port number

00:07:47.660 --> 00:07:49.820
of the device that we
want to connect to.

00:07:49.820 --> 00:07:51.740
Once you get that information,
then we're just going to go

00:07:51.740 --> 00:07:53.020
ahead and connect
to it directly

00:07:53.020 --> 00:07:55.210
using a standard socket.

00:07:55.210 --> 00:07:57.570
Now, before you go off and play
your game, there's one

00:07:57.570 --> 00:07:59.030
last thing you want to do.

00:07:59.030 --> 00:08:01.560
When your application exits,
it is very important to

00:08:01.560 --> 00:08:04.340
unregister your service so
that the OS will stop

00:08:04.340 --> 00:08:07.130
advertising it to
other devices.

00:08:07.130 --> 00:08:10.830
To do this, call NSD manager's
unregister service method

00:08:10.830 --> 00:08:13.290
whenever your application's
onDestroy or onPause method

00:08:13.290 --> 00:08:14.560
gets called.

00:08:14.560 --> 00:08:18.690
You'll also want to make sure to
call stop service discovery

00:08:18.690 --> 00:08:21.840
since the discovery process is
also a bit expensive, and we

00:08:21.840 --> 00:08:24.240
don't want to leave that
running unchecked.

00:08:24.240 --> 00:08:25.310
And that's it.

00:08:25.310 --> 00:08:27.300
You're all set to use network
service discovery to find

00:08:27.300 --> 00:08:29.290
other copies of your
app on the network.

00:08:29.290 --> 00:08:30.540
Happy networking.

