WEBVTT
Kind: captions
Language: en

00:00:02.110 --> 00:00:03.200
Thank you guys so much.

00:00:03.200 --> 00:00:06.360
This is really awesome
to be on the stage today.

00:00:06.360 --> 00:00:07.950
Over the past year,
I've spent a lot

00:00:07.950 --> 00:00:10.500
of time talking
about web components,

00:00:10.500 --> 00:00:13.660
really teaching developers
the basics of the standards

00:00:13.660 --> 00:00:15.985
and teaching folks how to
focus on building elements.

00:00:15.985 --> 00:00:17.360
And we're now at
this place where

00:00:17.360 --> 00:00:20.879
we have this burgeoning
ecosystem of elements

00:00:20.879 --> 00:00:21.670
that are out there.

00:00:21.670 --> 00:00:23.420
There's a lot of developers
out in the open source world

00:00:23.420 --> 00:00:25.177
who are creating
elements but also got

00:00:25.177 --> 00:00:27.510
element sets that have been
created by the Polymer team.

00:00:27.510 --> 00:00:29.462
We've got the core and
the paper elements.

00:00:29.462 --> 00:00:30.920
And so we're at
this point where we

00:00:30.920 --> 00:00:32.670
have this flourishing
ecosystem and I

00:00:32.670 --> 00:00:33.910
think it's time for
us to start to think

00:00:33.910 --> 00:00:36.520
about the next challenge, which
is how do we leverage that

00:00:36.520 --> 00:00:40.260
ecosystem to actually
build real applications.

00:00:40.260 --> 00:00:42.410
And I'm particularly
interested in figuring out

00:00:42.410 --> 00:00:45.490
how to build compelling
experiences on mobile.

00:00:45.490 --> 00:00:48.530
The mobile web has a
ton of opportunity,

00:00:48.530 --> 00:00:50.890
but it's one of those areas
where for web developers,

00:00:50.890 --> 00:00:52.570
it's always been a
challenge to create

00:00:52.570 --> 00:00:55.597
a real compelling experience
on a mobile device.

00:00:55.597 --> 00:00:58.180
And so when I was preparing for
this talk, what I wanted to do

00:00:58.180 --> 00:01:01.240
was just like pop my phone out
and look at the applications

00:01:01.240 --> 00:01:02.740
that I use all
the time, things I

00:01:02.740 --> 00:01:05.860
consider sort of
successful experiences.

00:01:05.860 --> 00:01:08.480
And I wanted to go through them
and just sort of catalog what

00:01:08.480 --> 00:01:12.970
I see as the kind of common
UI and UX expectations

00:01:12.970 --> 00:01:14.890
in a successful app.

00:01:14.890 --> 00:01:16.660
So what I've got
here is Twitter,

00:01:16.660 --> 00:01:19.030
I've got Pocket Cast for
listening to podcasts,

00:01:19.030 --> 00:01:20.451
and I've got RDO.

00:01:20.451 --> 00:01:22.450
And one thing that struck
me as I was doing this

00:01:22.450 --> 00:01:24.230
is if I just take
these applications

00:01:24.230 --> 00:01:27.160
and I put them side by side,
even though each of them

00:01:27.160 --> 00:01:30.890
kind of feels unique when I'm
looking at it in isolation,

00:01:30.890 --> 00:01:32.390
when they're all
lined up like that,

00:01:32.390 --> 00:01:34.720
it feels like they're just
like a ton of commonalities

00:01:34.720 --> 00:01:36.480
in their interfaces.

00:01:36.480 --> 00:01:39.500
And so using Twitter
as an example here,

00:01:39.500 --> 00:01:42.160
I want to just catalog some
of those common UI patterns

00:01:42.160 --> 00:01:43.710
that I see.

00:01:43.710 --> 00:01:45.810
So up at the top,
we have a toolbar.

00:01:45.810 --> 00:01:46.490
Pretty familiar.

00:01:46.490 --> 00:01:48.156
And oftentimes, if
you've got a toolbar,

00:01:48.156 --> 00:01:50.890
you're going to fill it
up with some icon buttons.

00:01:50.890 --> 00:01:52.390
And below that,
you've got some tabs

00:01:52.390 --> 00:01:54.286
for switching between content.

00:01:54.286 --> 00:01:56.421
You've got a primary
content area,

00:01:56.421 --> 00:01:57.920
and oftentimes,
you're going to have

00:01:57.920 --> 00:02:01.144
like an infinite list of
contents inside of there,

00:02:01.144 --> 00:02:03.060
or you might just be
lazy loading more content

00:02:03.060 --> 00:02:05.390
as the user is
scrolling down the page.

00:02:05.390 --> 00:02:07.640
And down at the bottom,
you've got a secondary toolbar

00:02:07.640 --> 00:02:11.120
for doing additional
actions of some kind.

00:02:11.120 --> 00:02:14.050
Now, if we take
a step back again

00:02:14.050 --> 00:02:17.007
and we line these apps
up again, like when

00:02:17.007 --> 00:02:18.590
I was looking at
Twitter a moment ago,

00:02:18.590 --> 00:02:20.140
it felt like a very
unique experience.

00:02:20.140 --> 00:02:21.750
It felt kind of
aligned with its brand

00:02:21.750 --> 00:02:23.620
and it had kind of its
own thing going on.

00:02:23.620 --> 00:02:25.390
But again, I line
these guys up and I

00:02:25.390 --> 00:02:27.590
can see that they all
kind of have those same UI

00:02:27.590 --> 00:02:28.380
patterns going on.

00:02:28.380 --> 00:02:30.899
They're all kind of doing
the exact same thing.

00:02:30.899 --> 00:02:32.440
And the reason they
all look the same

00:02:32.440 --> 00:02:35.560
is because they're all
built using an SDK.

00:02:35.560 --> 00:02:37.630
So these are examples
coming from Android,

00:02:37.630 --> 00:02:40.206
but the same is true if
you're working in iOS.

00:02:40.206 --> 00:02:42.080
If you're building on
one of those platforms,

00:02:42.080 --> 00:02:44.649
you already have this SDK
that's available to you,

00:02:44.649 --> 00:02:46.190
grab a bunch of
components out of it.

00:02:46.190 --> 00:02:47.940
Maybe you kind of tweak
them a little bit,

00:02:47.940 --> 00:02:49.224
color them differently.

00:02:49.224 --> 00:02:50.640
But in general,
you're using stuff

00:02:50.640 --> 00:02:53.416
that's already available to
compose your application.

00:02:53.416 --> 00:02:57.170
Now, on the web, we've kind of
never really had this thing.

00:02:57.170 --> 00:03:00.050
We've never had app
building primitives.

00:03:00.050 --> 00:03:03.790
We've never had
a mobile web SDK,

00:03:03.790 --> 00:03:05.520
and I think it's time
for that to change.

00:03:05.520 --> 00:03:07.270
And I really think
that the way that we're

00:03:07.270 --> 00:03:11.100
going about doing this is using
Polymer and Web Components.

00:03:11.100 --> 00:03:14.190
So my goal today is to teach
you how to build mobile web

00:03:14.190 --> 00:03:17.500
applications using
these new technologies.

00:03:17.500 --> 00:03:19.730
And I basically split
this up into four parts.

00:03:19.730 --> 00:03:21.688
[? The very ?] part, I'm
going to show you just

00:03:21.688 --> 00:03:24.092
how you can structure the
UI for your application,

00:03:24.092 --> 00:03:26.550
then we're going to look at
how you can transition from one

00:03:26.550 --> 00:03:28.466
state of your
application to the next.

00:03:28.466 --> 00:03:30.090
After that, we're
going to look at ways

00:03:30.090 --> 00:03:32.270
to make sure your application
is performant, because that's

00:03:32.270 --> 00:03:34.175
really crucial for a
mobile application.

00:03:34.175 --> 00:03:35.800
And lastly, we're
going to look at ways

00:03:35.800 --> 00:03:38.110
you can make sure your
application runs offline

00:03:38.110 --> 00:03:40.550
because if your mobile
app doesn't run offline,

00:03:40.550 --> 00:03:42.580
then you really don't
have a mobile app.

00:03:42.580 --> 00:03:44.600
People are oftentimes
on their mobile devices

00:03:44.600 --> 00:03:47.401
when they're in low connectivity
to no connectivity situations.

00:03:47.401 --> 00:03:48.775
So it's got to
run offline for it

00:03:48.775 --> 00:03:52.720
to be a real, compelling
mobile app experience.

00:03:52.720 --> 00:03:55.380
Let's start with structure
and just think about ways

00:03:55.380 --> 00:03:58.420
that we can compose the
UI for our application.

00:03:58.420 --> 00:04:00.900
And really, that's the
key word here-- compose.

00:04:00.900 --> 00:04:03.470
What I want to do is I'm going
to take as many preexisting

00:04:03.470 --> 00:04:06.500
elements from the Polymer
core sets to the paper sets

00:04:06.500 --> 00:04:09.882
and I want to bolt them together
to build my application.

00:04:09.882 --> 00:04:11.340
So this is the app
that we're going

00:04:11.340 --> 00:04:14.125
to be working from today, just
a really simple contacts app

00:04:14.125 --> 00:04:15.380
that I threw together.

00:04:15.380 --> 00:04:18.207
And I'm trying to utilize
a lot of the same patterns

00:04:18.207 --> 00:04:20.290
that I was showing in the
previous successful apps

00:04:20.290 --> 00:04:21.920
that I had before.

00:04:21.920 --> 00:04:24.670
So you've got the toolbar at
the top with some icon buttons.

00:04:24.670 --> 00:04:25.570
You start scrolling
around, you're

00:04:25.570 --> 00:04:27.653
going to get this sort of
infinite list of content

00:04:27.653 --> 00:04:29.000
inside of there.

00:04:29.000 --> 00:04:31.772
You've got a drawer panel that
you can pop out for your menu.

00:04:31.772 --> 00:04:33.230
Clicking on any
one of the contacts

00:04:33.230 --> 00:04:35.313
is going to do kind of
like an animated transition

00:04:35.313 --> 00:04:37.520
to show you that
person's contact details.

00:04:37.520 --> 00:04:40.370
I get it's really nice, cool
condensing header effect

00:04:40.370 --> 00:04:42.267
as I scroll around.

00:04:42.267 --> 00:04:44.350
And also, I've got a little
floating action button

00:04:44.350 --> 00:04:45.391
down there in the corner.

00:04:45.391 --> 00:04:47.479
I can click that, pop
open another screen.

00:04:47.479 --> 00:04:48.895
These are all
animated transitions

00:04:48.895 --> 00:04:51.370
that I'm using here.

00:04:51.370 --> 00:04:53.710
Now, if you've seen
me talk before,

00:04:53.710 --> 00:04:56.390
you've probably seen me start
off by using this element.

00:04:56.390 --> 00:04:57.320
Anytime I'm building
an application,

00:04:57.320 --> 00:04:58.510
it seems like I'm
always starting off

00:04:58.510 --> 00:05:00.364
with this core
toolbar element, which

00:05:00.364 --> 00:05:01.780
is just a really
simple container.

00:05:01.780 --> 00:05:03.145
It lays out its
children using Flexbox

00:05:03.145 --> 00:05:04.603
and it's a really
good place to get

00:05:04.603 --> 00:05:07.130
started with one
of your screens.

00:05:07.130 --> 00:05:08.790
And because
composition is really

00:05:08.790 --> 00:05:10.800
the name of the game,
what I want to do first

00:05:10.800 --> 00:05:12.860
is I want to just throw
some additional elements

00:05:12.860 --> 00:05:14.770
inside of here, and I
just want to compose

00:05:14.770 --> 00:05:16.880
the UI for my toolbar.

00:05:16.880 --> 00:05:19.200
So I've dropped a paper
icon button inside of there.

00:05:19.200 --> 00:05:21.200
I've configured it
with an icon attribute

00:05:21.200 --> 00:05:23.870
to give me the hamburger
menu from that application,

00:05:23.870 --> 00:05:26.487
and so I'm going to
slide out my menu later.

00:05:26.487 --> 00:05:28.070
I've also dropped a
div inside of here

00:05:28.070 --> 00:05:31.190
for the title of my application.

00:05:31.190 --> 00:05:33.400
Now, one of the cool things
about the core toolbar

00:05:33.400 --> 00:05:35.780
is that since it uses
Flexbox, I can kind of

00:05:35.780 --> 00:05:37.460
take advantage of
that a little bit.

00:05:37.460 --> 00:05:39.942
There's things called layout
attributes in Polymer,

00:05:39.942 --> 00:05:41.400
and what I can do
is I can actually

00:05:41.400 --> 00:05:43.400
tell the title of
my toolbar that I

00:05:43.400 --> 00:05:46.120
want it to flex to take
up as much space is

00:05:46.120 --> 00:05:47.900
it can inside of the toolbar.

00:05:47.900 --> 00:05:49.400
This is a really
handy trick to know

00:05:49.400 --> 00:05:51.810
because it means that
I can then pin controls

00:05:51.810 --> 00:05:53.464
to the other side of my toolbar.

00:05:53.464 --> 00:05:54.880
What I want to do
here is actually

00:05:54.880 --> 00:05:56.380
add a little context
menu so I can

00:05:56.380 --> 00:05:58.720
have things like
settings and feedback.

00:05:58.720 --> 00:06:00.970
So to do that, I'm going to
use another element called

00:06:00.970 --> 00:06:03.550
paper-menu-button, and
paper-menu-button's

00:06:03.550 --> 00:06:06.710
pretty interesting because
by itself, it really

00:06:06.710 --> 00:06:07.945
doesn't do anything.

00:06:07.945 --> 00:06:08.820
It's kind of useless.

00:06:08.820 --> 00:06:10.445
If you just put a
paper-menu-button tag

00:06:10.445 --> 00:06:13.060
on the page, you
get really nothing.

00:06:13.060 --> 00:06:15.120
It only really
comes into its own

00:06:15.120 --> 00:06:18.040
when you start composing
other elements inside of it.

00:06:18.040 --> 00:06:20.460
That's really how you
unlock the potential of it.

00:06:20.460 --> 00:06:22.280
So I've got another
paper icon button

00:06:22.280 --> 00:06:24.071
that I've thrown inside
of here, and that's

00:06:24.071 --> 00:06:26.860
going to give the user
something to click on.

00:06:26.860 --> 00:06:28.820
Then I'm going to throw
in a paper drop down,

00:06:28.820 --> 00:06:30.990
and that's going to give me
this little animated rectangle

00:06:30.990 --> 00:06:31.630
thing up there.

00:06:31.630 --> 00:06:33.130
So when the menu
expands, it's going

00:06:33.130 --> 00:06:34.870
to kind of like come
out from the corner,

00:06:34.870 --> 00:06:36.839
expand towards the
center of the site.

00:06:36.839 --> 00:06:38.380
The halign attribute
that I've thrown

00:06:38.380 --> 00:06:40.427
on there is going to
indicate which direction it

00:06:40.427 --> 00:06:41.260
should animate from.

00:06:41.260 --> 00:06:42.760
So here, we're
telling it to animate

00:06:42.760 --> 00:06:45.921
from the right edge towards
the center of the screen.

00:06:45.921 --> 00:06:48.170
Lastly, I'm going to throw
a core menu inside of here,

00:06:48.170 --> 00:06:50.669
and that's going to give me the
actual menu items that users

00:06:50.669 --> 00:06:53.900
are going to select for
my sending them feedback.

00:06:53.900 --> 00:06:56.299
Now, the cool thing
here is that each

00:06:56.299 --> 00:06:58.840
of those elements that I threw
inside of my paper menu button

00:06:58.840 --> 00:07:00.490
is useful on its own.

00:07:00.490 --> 00:07:04.035
I can use core menu elsewhere
my site if I need a menu.

00:07:04.035 --> 00:07:05.410
What's awesome,
though, is when I

00:07:05.410 --> 00:07:07.210
start to compose
these things together,

00:07:07.210 --> 00:07:11.581
I get different interesting
complex behaviors.

00:07:11.581 --> 00:07:13.080
And it's also
important to point out

00:07:13.080 --> 00:07:15.930
that I didn't write any CSS or
JavaScript to make this happen.

00:07:15.930 --> 00:07:18.445
I just nipped together
these-- oh, yay.

00:07:22.809 --> 00:07:23.850
Thank you, [? Demetri ?].

00:07:26.355 --> 00:07:28.230
These elements just know
how to work together

00:07:28.230 --> 00:07:31.710
because they're app building
primitives, which is awesome.

00:07:31.710 --> 00:07:34.280
And once I'm happy with
the look of my toolbar,

00:07:34.280 --> 00:07:36.780
then you take all of this markup
and I could throw it inside

00:07:36.780 --> 00:07:38.720
of another element
called core-header-panel.

00:07:38.720 --> 00:07:41.220
And the core-header-panel is
just a really simple container.

00:07:41.220 --> 00:07:43.136
It's got a header section
up at the top, which

00:07:43.136 --> 00:07:46.014
will hold the toolbar,
content area down below.

00:07:46.014 --> 00:07:47.930
And the cool thing about
the core header panel

00:07:47.930 --> 00:07:50.860
is it only really cares about
managing the scroll behavior

00:07:50.860 --> 00:07:52.170
from my application.

00:07:52.170 --> 00:07:54.250
If I put a toolbar
inside of it, it's

00:07:54.250 --> 00:07:56.280
going to make sure
that that toolbar stays

00:07:56.280 --> 00:07:58.129
sticky up there at the
top of the document

00:07:58.129 --> 00:08:00.670
and all my other content is just
going to move underneath it.

00:08:00.670 --> 00:08:03.014
Again, no CSS or JavaScript
to make this happen.

00:08:03.014 --> 00:08:04.430
These are just
smarter primitives.

00:08:04.430 --> 00:08:07.330
They know how to work
together like that.

00:08:07.330 --> 00:08:10.840
Now, when someone's actually
looking at one of my contacts,

00:08:10.840 --> 00:08:14.650
I want to have this cool, big
shot of Addy Osmani's face

00:08:14.650 --> 00:08:19.040
basically, and I want it to
do this cool animating effect.

00:08:19.040 --> 00:08:20.660
So as the person
is scrolling down,

00:08:20.660 --> 00:08:22.118
it kind of collapses,
and it's sort

00:08:22.118 --> 00:08:23.970
of crossfading with
the background image.

00:08:23.970 --> 00:08:26.650
And to do that, I'm using a
cousin of the core-header-panel

00:08:26.650 --> 00:08:28.520
called the
core-scroll-header-panel.

00:08:28.520 --> 00:08:29.950
It's basically the
same component,

00:08:29.950 --> 00:08:31.700
but it adds this nice
condenses attribute,

00:08:31.700 --> 00:08:34.659
and it gives me that
kind of cool effect.

00:08:34.659 --> 00:08:38.179
Now, once I have the different
screens for my mobile site laid

00:08:38.179 --> 00:08:40.669
out in a way that I like
them, I can drop all of this

00:08:40.669 --> 00:08:42.799
into another element
called core-drawer-panel,

00:08:42.799 --> 00:08:44.790
and that's going to
give me a responsive

00:08:44.790 --> 00:08:47.271
scaffold for desktop and mobile.

00:08:47.271 --> 00:08:48.770
And the way this
element works, it's

00:08:48.770 --> 00:08:50.404
basically got a drawer area.

00:08:50.404 --> 00:08:52.070
Any content that I
place inside of there

00:08:52.070 --> 00:08:54.090
is going to end
up in my sidebar.

00:08:54.090 --> 00:08:55.040
It's got a main area.

00:08:55.040 --> 00:08:56.706
Any content that I
place inside of there

00:08:56.706 --> 00:08:58.642
ends up in the
primary content area.

00:08:58.642 --> 00:09:00.100
And the cool thing
is, this element

00:09:00.100 --> 00:09:01.500
is responsive by default.

00:09:01.500 --> 00:09:04.684
So if I'm on my desktop and
I just start dragging it out,

00:09:04.684 --> 00:09:06.350
you'll see the drawer
panel opens there.

00:09:06.350 --> 00:09:07.350
I can open and close it.

00:09:07.350 --> 00:09:10.130
I drag this thing out, and
when I hit a certain size,

00:09:10.130 --> 00:09:11.760
the toolbar just
pops out for me.

00:09:11.760 --> 00:09:12.290
This is really nice.

00:09:12.290 --> 00:09:14.340
Again, I'm not writing any
breakpoints or media queries

00:09:14.340 --> 00:09:15.410
to make this happen.

00:09:15.410 --> 00:09:19.730
The element's just responsive by
default, which is really nice.

00:09:19.730 --> 00:09:22.990
Now, at this point, I've built
the skeleton of an application.

00:09:22.990 --> 00:09:24.800
I've kind of shown you
how to put the shell

00:09:24.800 --> 00:09:27.460
around everything, but
what we're still missing

00:09:27.460 --> 00:09:29.230
is the lifeblood
of our application.

00:09:29.230 --> 00:09:31.930
We're missing the content.

00:09:31.930 --> 00:09:33.597
And when I'm showing
these apps earlier,

00:09:33.597 --> 00:09:35.763
I mentioned that oftentimes
what they're going to do

00:09:35.763 --> 00:09:37.770
is they're going to do
like an infinite list,

00:09:37.770 --> 00:09:39.739
or of a lazy load of
content so the user can

00:09:39.739 --> 00:09:41.530
keep scrolling through
all of their tweets,

00:09:41.530 --> 00:09:44.164
or all of their albums,
and things like that,

00:09:44.164 --> 00:09:46.580
and we can achieve the same
thing in our application using

00:09:46.580 --> 00:09:48.167
an element called core-list.

00:09:48.167 --> 00:09:50.000
And core-list is one
of my favorite elements

00:09:50.000 --> 00:09:52.000
because I feel like it's
sort of the thing that

00:09:52.000 --> 00:09:53.940
knits all the scaffolding
and the content

00:09:53.940 --> 00:09:56.340
together in this way
that I really love.

00:09:56.340 --> 00:09:59.270
The core-list is basically
a virtualized infinite list.

00:09:59.270 --> 00:10:01.500
You connect it to
a data provider

00:10:01.500 --> 00:10:03.020
and then it stamps
out a template

00:10:03.020 --> 00:10:06.230
for every single instance in
that data provider's array.

00:10:06.230 --> 00:10:10.080
So here, I'm saying
list.data equals some array.

00:10:10.080 --> 00:10:12.120
I've got objects
inside of that array.

00:10:12.120 --> 00:10:14.000
Each of those
objects has a name.

00:10:14.000 --> 00:10:16.600
And inside my core-list,
I have a template element

00:10:16.600 --> 00:10:19.370
and I'm just binding to
each of those instances

00:10:19.370 --> 00:10:20.580
as they come in.

00:10:20.580 --> 00:10:23.730
It gives me this really,
really performant infinite list

00:10:23.730 --> 00:10:26.740
so I can go through
all of my contacts.

00:10:26.740 --> 00:10:28.544
Now, as I was building
my application,

00:10:28.544 --> 00:10:29.960
I kind of came
across this thing--

00:10:29.960 --> 00:10:31.709
which I'm going to
share with you as a tip

00:10:31.709 --> 00:10:35.326
if you want to go out and
start using core-list yourself.

00:10:35.326 --> 00:10:36.700
One of things that
core-list does

00:10:36.700 --> 00:10:38.166
is it recycles its children.

00:10:38.166 --> 00:10:39.790
That's actually how
it's so performant.

00:10:39.790 --> 00:10:42.081
It makes a fixed set of
children and as they're moving,

00:10:42.081 --> 00:10:44.800
it's pulling them back
around the other way.

00:10:44.800 --> 00:10:47.184
So if you have image tags
inside of your core-list,

00:10:47.184 --> 00:10:49.350
you can end up in a situation
where you're basically

00:10:49.350 --> 00:10:52.486
racing the network and you're
having stale images fly

00:10:52.486 --> 00:10:54.110
past the screen, and
then they catch up

00:10:54.110 --> 00:10:56.424
and change, which
sort of looks weird.

00:10:56.424 --> 00:10:58.590
So I found that there's an
element called core-image

00:10:58.590 --> 00:11:00.390
which you can use to
prevent stale images

00:11:00.390 --> 00:11:01.340
in your application.

00:11:01.340 --> 00:11:02.210
It's pretty easy.

00:11:02.210 --> 00:11:03.680
You just drop it in here.

00:11:03.680 --> 00:11:05.725
You give it a preload
attribute, and what

00:11:05.725 --> 00:11:07.850
that does is it says, hey,
if I'm loading an image,

00:11:07.850 --> 00:11:10.400
I'm not going to display
the stale image that

00:11:10.400 --> 00:11:12.300
perhaps was inside
of here before.

00:11:12.300 --> 00:11:15.497
I'm just going to display
a little background color.

00:11:15.497 --> 00:11:17.330
And so what we can do
now is we can actually

00:11:17.330 --> 00:11:19.264
have this cool contacts list.

00:11:19.264 --> 00:11:20.680
We can sort of
race the networking

00:11:20.680 --> 00:11:22.380
and you can see the
images loading in,

00:11:22.380 --> 00:11:25.962
but what you're not seeing is
stale images, which is good.

00:11:25.962 --> 00:11:28.170
The other thing that I
discovered as I was doing this

00:11:28.170 --> 00:11:31.270
is that it's really important to
make sure to set your core-list

00:11:31.270 --> 00:11:34.700
scroll target to your
core-header-panel-scroller.

00:11:34.700 --> 00:11:37.640
I know that this is a
little bit of a rough edge,

00:11:37.640 --> 00:11:39.380
but I wanted to make
you guys aware of it

00:11:39.380 --> 00:11:40.860
if you're going to go out and
start hacking on these things

00:11:40.860 --> 00:11:41.384
today.

00:11:41.384 --> 00:11:42.800
Basically what
happens when you do

00:11:42.800 --> 00:11:44.270
this is you're
telling the core-list

00:11:44.270 --> 00:11:46.770
to listen to the scroll events
that the core header panel is

00:11:46.770 --> 00:11:51.060
firing and that way, the two
can work together in harmony.

00:11:51.060 --> 00:11:53.890
Now, there's two ways that
you can go about doing this.

00:11:53.890 --> 00:11:56.380
You can either set the
scroll target in JavaScript.

00:11:56.380 --> 00:12:00.476
You could say list.scrollTarget
equals hPanel.scroller,

00:12:00.476 --> 00:12:03.100
or you can do this with bindings
if you want to be really fancy

00:12:03.100 --> 00:12:04.141
and impress your friends.

00:12:04.141 --> 00:12:07.834
You could just say scrollTarget
equals hPanel.scroller.

00:12:07.834 --> 00:12:09.750
Now, this is one of those
things which, again,

00:12:09.750 --> 00:12:11.280
I think it's a little
bit of a rough edge.

00:12:11.280 --> 00:12:13.610
Perhaps we might be able to
clean this up in the future

00:12:13.610 --> 00:12:15.610
so that you don't have
to wire this up yourself,

00:12:15.610 --> 00:12:16.560
but I wanted to
make you aware of it

00:12:16.560 --> 00:12:18.130
because it was like the
first thing I wanted to do

00:12:18.130 --> 00:12:19.796
was put one of those
lists inside of one

00:12:19.796 --> 00:12:21.559
of those fancy
headers, and I needed

00:12:21.559 --> 00:12:23.350
to set up this linkage
to make it all work.

00:12:25.384 --> 00:12:27.800
Now, through the beauty of
composition, I've taken my list

00:12:27.800 --> 00:12:29.650
and I've thrown it
inside of my scaffold,

00:12:29.650 --> 00:12:32.119
and I have this really,
really cool application now.

00:12:32.119 --> 00:12:33.660
Now, I want to give
you a quick recap

00:12:33.660 --> 00:12:34.951
of what we have inside of here.

00:12:34.951 --> 00:12:38.240
So up at the top, I've
got a core toolbar.

00:12:38.240 --> 00:12:40.950
After that, a paper-icon-button,
a paper-menu-button

00:12:40.950 --> 00:12:42.084
for my contacts menu.

00:12:42.084 --> 00:12:43.542
I've got a
core-header-panel, which

00:12:43.542 --> 00:12:45.912
is controlling the scroll
behavior for my home page.

00:12:45.912 --> 00:12:47.370
I've got a
core-drawer-panel, which

00:12:47.370 --> 00:12:49.100
gives me that
responsive scaffolding

00:12:49.100 --> 00:12:51.426
so it works on
desktop and mobile,

00:12:51.426 --> 00:12:55.726
and I've got a core list for
my infinite content provider.

00:12:55.726 --> 00:12:57.100
Now, one thing
that's really cool

00:12:57.100 --> 00:13:00.720
to do once your application
has reached the state where you

00:13:00.720 --> 00:13:02.810
feel like it's kind of
shaped up a little bit

00:13:02.810 --> 00:13:05.290
is to think about ways
that you could change it.

00:13:05.290 --> 00:13:08.300
And if I look at this
and I just imagine

00:13:08.300 --> 00:13:10.620
perhaps applying a little
CSS to that toolbar

00:13:10.620 --> 00:13:13.910
and perhaps adding a little
bit more content to the list,

00:13:13.910 --> 00:13:15.980
then I'm really not
that far from something

00:13:15.980 --> 00:13:18.610
that looks a lot
like Inbox, right.

00:13:18.610 --> 00:13:21.100
All the parts remain
the exact same,

00:13:21.100 --> 00:13:23.730
we're just tweaking slightly the
appearance of them-- changing

00:13:23.730 --> 00:13:25.850
some colors, adding a
little bit more content--

00:13:25.850 --> 00:13:29.060
but we've now got a very
different experience.

00:13:29.060 --> 00:13:31.980
And because the core list
supports variable height

00:13:31.980 --> 00:13:34.670
content-- meaning that
our rows don't all

00:13:34.670 --> 00:13:37.310
have to be the exact
same fixed size--

00:13:37.310 --> 00:13:39.825
we can think about throwing
cards inside of here.

00:13:39.825 --> 00:13:42.950
And if we do that, then we have
an experience that looks kind

00:13:42.950 --> 00:13:44.890
of like G+.

00:13:44.890 --> 00:13:47.730
And again, none of my
markup actually changed.

00:13:47.730 --> 00:13:50.830
I still have a core-toolbar, I
still have paper-icon-button,

00:13:50.830 --> 00:13:54.220
still have paper-menu-button,
header-panel, core-panel,

00:13:54.220 --> 00:13:55.610
and core-list.

00:13:55.610 --> 00:13:58.429
So my markup remained
the exact same.

00:13:58.429 --> 00:14:00.220
The only thing that
changed was the content

00:14:00.220 --> 00:14:02.386
that I'm placing inside of
it, which is pretty cool.

00:14:04.890 --> 00:14:08.220
Now in my mind, this is
the power of composition.

00:14:08.220 --> 00:14:10.560
When we have a mobile SDK
that's full of these really

00:14:10.560 --> 00:14:13.600
good generic building blocks,
we can build vastly different

00:14:13.600 --> 00:14:16.150
experiences just by arranging
them differently and tweaking

00:14:16.150 --> 00:14:17.070
them slightly.

00:14:17.070 --> 00:14:19.550
I think that's huge.

00:14:19.550 --> 00:14:22.090
So let's go back to our
contacts app for a second.

00:14:22.090 --> 00:14:26.550
We've got the basic pages
kind of figured out,

00:14:26.550 --> 00:14:29.200
but I haven't really shown
you how to move from one state

00:14:29.200 --> 00:14:31.030
to the next, and this is a
dilemma for a lot of folks.

00:14:31.030 --> 00:14:32.950
They start building components,
they get really excited,

00:14:32.950 --> 00:14:34.408
they throw them
together on a page,

00:14:34.408 --> 00:14:37.270
and then they're like,
how do I go from point A

00:14:37.270 --> 00:14:40.710
to point B. Basically,
how do I do transitions?

00:14:40.710 --> 00:14:42.720
And this is one of those
areas where we're still

00:14:42.720 --> 00:14:44.220
working on it, but
I think we've got

00:14:44.220 --> 00:14:46.380
some really cool
stuff in the pipeline.

00:14:46.380 --> 00:14:48.967
One of the elements that I've
shown before which I think

00:14:48.967 --> 00:14:51.550
is really awesome-- I put this
little experimental badge on it

00:14:51.550 --> 00:14:53.950
because it also is a
little experimental--

00:14:53.950 --> 00:14:56.170
but it's so freaking
cool I like to show it.

00:14:56.170 --> 00:14:58.140
It's this element called
core-animated-pages,

00:14:58.140 --> 00:15:00.350
which gives you a pluggable
system for transitioning

00:15:00.350 --> 00:15:03.060
of one state of your
application to the next.

00:15:03.060 --> 00:15:04.660
And basically, the
way this works is I

00:15:04.660 --> 00:15:07.600
put some sections inside
of my core animated pages.

00:15:07.600 --> 00:15:09.020
I configure its
selected attribute

00:15:09.020 --> 00:15:12.424
to tell it which section should
be displaying at the time,

00:15:12.424 --> 00:15:14.590
and I give it a transitions
property and I tell it--

00:15:14.590 --> 00:15:16.340
or sorry, transitions
attribute to tell it

00:15:16.340 --> 00:15:17.714
which transitions
I would like it

00:15:17.714 --> 00:15:20.840
to play as it moves from
one state to the next.

00:15:20.840 --> 00:15:23.430
And with basically
just that I've wired up

00:15:23.430 --> 00:15:25.360
this is really cool
system for animating

00:15:25.360 --> 00:15:28.770
through different states
in my application.

00:15:28.770 --> 00:15:31.810
So inside of my app, my markup
kind of looks like this.

00:15:31.810 --> 00:15:34.510
I've got a whole bunch of markup
that makes up every single page

00:15:34.510 --> 00:15:36.580
and it's all kind of
composed together.

00:15:36.580 --> 00:15:38.770
And so the way that
I'm going to transition

00:15:38.770 --> 00:15:41.700
from one state to the next is
actually take all this markup

00:15:41.700 --> 00:15:45.870
and turn each section of my
application into a custom tag.

00:15:45.870 --> 00:15:49.050
Keep all that markup,
make an element out of it.

00:15:49.050 --> 00:15:50.550
Then I start nesting
those elements

00:15:50.550 --> 00:15:52.460
inside of core-animated-pages.

00:15:52.460 --> 00:15:55.340
So I start with
my contacts page.

00:15:55.340 --> 00:15:58.080
I drop in an info page for
when you click on a contact

00:15:58.080 --> 00:16:00.127
and you actually can
see their profile.

00:16:00.127 --> 00:16:01.960
So I created a little
custom transition here

00:16:01.960 --> 00:16:03.450
called fade scale.

00:16:03.450 --> 00:16:05.450
It's on my info page
as an attribute.

00:16:05.450 --> 00:16:07.290
It's also in the
transitions attribute

00:16:07.290 --> 00:16:08.600
for core-animated-pages.

00:16:08.600 --> 00:16:10.308
So now when you click
on a contact, which

00:16:10.308 --> 00:16:12.740
is going to animate up,
so you're adding there

00:16:12.740 --> 00:16:15.170
and then it goes away.

00:16:15.170 --> 00:16:18.121
And again, for the page
where I add a user,

00:16:18.121 --> 00:16:19.370
it's basically the same thing.

00:16:19.370 --> 00:16:20.710
I nest that element
inside of here.

00:16:20.710 --> 00:16:21.670
I give it a transition.

00:16:21.670 --> 00:16:24.510
I add that transition to
animated-pages transitions

00:16:24.510 --> 00:16:25.300
attribute.

00:16:25.300 --> 00:16:27.810
I click on my floating
action button now, pops up.

00:16:27.810 --> 00:16:32.230
I can add a new user if
I want and it goes away.

00:16:32.230 --> 00:16:34.470
Now, another tip that I
want to share with you

00:16:34.470 --> 00:16:38.672
is something that I came
across as I was building this.

00:16:38.672 --> 00:16:40.130
Core animated pages
does this thing

00:16:40.130 --> 00:16:41.714
where if an element
is not displaying,

00:16:41.714 --> 00:16:43.921
it's going to make it display
none, which can totally

00:16:43.921 --> 00:16:46.100
screw it up if it's trying
to figure out its height

00:16:46.100 --> 00:16:47.238
or do anything like that.

00:16:47.238 --> 00:16:49.446
So this magical event here
called core animated pages

00:16:49.446 --> 00:16:52.310
transition prepare,
which is the longest

00:16:52.310 --> 00:16:55.550
this event name in the
history of the world.

00:16:55.550 --> 00:16:57.800
But this event
does magical things

00:16:57.800 --> 00:17:00.660
because it basically fires the
moment that your element goes

00:17:00.660 --> 00:17:02.900
from being display none
to being display block.

00:17:02.900 --> 00:17:04.310
And that means that you
can then do all the work

00:17:04.310 --> 00:17:06.250
that you need to do to make
sure that things are measured

00:17:06.250 --> 00:17:08.586
and have the right height
and everything like that.

00:17:08.586 --> 00:17:11.210
Again, this is one of the things
that I'm sure if you see this,

00:17:11.210 --> 00:17:12.918
you're like dude, that
feels like a wart,

00:17:12.918 --> 00:17:14.895
and I totally agree.

00:17:14.895 --> 00:17:15.770
I think you're right.

00:17:15.770 --> 00:17:18.369
And this is one of
the things that I

00:17:18.369 --> 00:17:20.020
know the team is
aware of and we're

00:17:20.020 --> 00:17:22.436
going to work on to see if we
can actually smooth this out

00:17:22.436 --> 00:17:25.229
for people so you don't have to
do all that finagling yourself.

00:17:25.229 --> 00:17:27.020
But again, I wanted to
make you aware of it

00:17:27.020 --> 00:17:29.170
so if you're following along
with this video or something

00:17:29.170 --> 00:17:31.753
afterwards, you want to try and
implement this stuff yourself,

00:17:31.753 --> 00:17:34.040
you know how to do it.

00:17:34.040 --> 00:17:37.070
So at this point, I have all the
sections of my site together.

00:17:37.070 --> 00:17:38.890
They animate, they
do really cool stuff,

00:17:38.890 --> 00:17:41.280
but really that's
just animation.

00:17:41.280 --> 00:17:43.840
We're not really changing
the state, per se.

00:17:43.840 --> 00:17:46.651
We're missing the other half of
the puzzle, which is routing,

00:17:46.651 --> 00:17:47.650
and this comes up a lot.

00:17:47.650 --> 00:17:50.450
Developers are always like,
how do I do routing in Polymer?

00:17:50.450 --> 00:17:55.080
And Polymer and Webfluenz don't
really have an opinion here.

00:17:55.080 --> 00:17:56.840
We're not going to
tell you specifically

00:17:56.840 --> 00:17:58.776
you have to do routing this way.

00:17:58.776 --> 00:18:00.900
There's really two ways
that you can go about this.

00:18:00.900 --> 00:18:03.400
You can do it
imperatively in JavaScript

00:18:03.400 --> 00:18:05.615
or you can do it
declaratively with element.

00:18:05.615 --> 00:18:07.490
And so I'm going to show
you both approaches,

00:18:07.490 --> 00:18:10.154
and you can decide
which you prefer.

00:18:10.154 --> 00:18:11.820
So if you're going
the imperative route,

00:18:11.820 --> 00:18:13.050
looks something like this.

00:18:13.050 --> 00:18:14.675
It's really as simple
as just listening

00:18:14.675 --> 00:18:17.290
for a route change using
some sort of routing library.

00:18:17.290 --> 00:18:20.090
Here, I'm using flat
iron director library,

00:18:20.090 --> 00:18:23.380
so when I hear a route match, I
tell core-animated-pages, hey,

00:18:23.380 --> 00:18:25.515
change whichever page
is currently selected.

00:18:25.515 --> 00:18:27.979
It's pretty straightforward.

00:18:27.979 --> 00:18:30.270
Now, one of the nice things
about routing in JavaScript

00:18:30.270 --> 00:18:32.730
is it gives you pretty fine
grained control if you want it.

00:18:32.730 --> 00:18:34.610
So if there's
parameters in my route,

00:18:34.610 --> 00:18:36.340
I can catch those when
the route matches.

00:18:36.340 --> 00:18:38.550
I can go fetch more
data if I need to

00:18:38.550 --> 00:18:40.552
and feed that to the
page, or I can just

00:18:40.552 --> 00:18:42.260
pass those parameters
to the page itself,

00:18:42.260 --> 00:18:44.760
be like, here you go, here's
the parameter that's coming in,

00:18:44.760 --> 00:18:46.320
and change.

00:18:46.320 --> 00:18:48.330
So some interesting stuff there.

00:18:48.330 --> 00:18:51.297
One thing that is pretty cool,
which I wasn't actually using

00:18:51.297 --> 00:18:52.880
my contacts as I
experimented with it.

00:18:52.880 --> 00:18:54.070
I think it's a really cool idea.

00:18:54.070 --> 00:18:54.987
It's something
that we're probably

00:18:54.987 --> 00:18:56.737
going to be using a
lot more in the future

00:18:56.737 --> 00:18:59.090
is this notion of
lazy loading imports.

00:18:59.090 --> 00:19:01.640
So actually, let's say
you've got part of your site

00:19:01.640 --> 00:19:04.090
that's four or five
pages deep, someone

00:19:04.090 --> 00:19:06.280
doesn't need all of those
components right away.

00:19:06.280 --> 00:19:07.370
There's this
mechanism in Polymer

00:19:07.370 --> 00:19:08.828
called Polymer
Import which you can

00:19:08.828 --> 00:19:11.380
use to just sort of
dynamically import things.

00:19:11.380 --> 00:19:13.100
So you can add that
to your router.

00:19:13.100 --> 00:19:14.850
You can say, hey, when
that route matches,

00:19:14.850 --> 00:19:18.780
that far away route, let's
import some of that new stuff,

00:19:18.780 --> 00:19:21.277
maybe throw a loading
screen up during that time.

00:19:21.277 --> 00:19:23.610
And when it's ready, Polymer
Import gives us a call back

00:19:23.610 --> 00:19:25.760
and we can change that page.

00:19:25.760 --> 00:19:27.630
So that's the JavaScript
way of doing it.

00:19:27.630 --> 00:19:30.360
There are also projects out
there which do this in markup

00:19:30.360 --> 00:19:31.120
with elements.

00:19:31.120 --> 00:19:32.911
In particular, there's
this really cool one

00:19:32.911 --> 00:19:34.500
called app-router
by Erik Ringsmuth.

00:19:34.500 --> 00:19:35.980
It allows you to
handle URL changes

00:19:35.980 --> 00:19:38.200
and update the views
in your application.

00:19:38.200 --> 00:19:43.250
It handles hashchange URLs,
as well as HTMLs history API.

00:19:43.250 --> 00:19:46.015
So you get either
flavor that you prefer.

00:19:46.015 --> 00:19:48.390
The other cool thing is that
it actually already supports

00:19:48.390 --> 00:19:51.350
core-animated pages and
doing lazy importing

00:19:51.350 --> 00:19:52.270
with Polymer import.

00:19:52.270 --> 00:19:54.061
But it does all that
under the hood for you

00:19:54.061 --> 00:19:55.640
so you don't have
to do it yourself.

00:19:55.640 --> 00:19:56.580
So again, two options.

00:19:56.580 --> 00:19:58.470
It really depends
on which flavor

00:19:58.470 --> 00:20:00.900
you prefer, but definitely
try both out and see

00:20:00.900 --> 00:20:02.316
what you like in
your application.

00:20:03.977 --> 00:20:06.560
So this one, I feel like I have
my application pretty sewn up.

00:20:06.560 --> 00:20:08.730
It does all sorts of really
interesting behaviors.

00:20:08.730 --> 00:20:10.396
I'm pretty stoked
with the way it looks,

00:20:10.396 --> 00:20:13.746
and now it's time to
focus on performance.

00:20:13.746 --> 00:20:16.200
Sorry, that's the wrong
slide-- performance.

00:20:16.200 --> 00:20:19.582
There we go.

00:20:19.582 --> 00:20:22.785
I love that lady's face.

00:20:22.785 --> 00:20:24.910
One of the areas that people
run afoul with Polymer

00:20:24.910 --> 00:20:27.404
often is the route file size.

00:20:27.404 --> 00:20:28.320
You'll even hear this.

00:20:28.320 --> 00:20:30.080
People will be like,
Polymer's too big.

00:20:30.080 --> 00:20:31.740
It's just bloated, whatever.

00:20:31.740 --> 00:20:34.940
And there's some ways that
you can mitigate this.

00:20:34.940 --> 00:20:37.450
First is this thing that I
stole from Glen Maddern, who

00:20:37.450 --> 00:20:40.740
is the creator of x-gif, which
is the most important custom

00:20:40.740 --> 00:20:42.720
element ever made.

00:20:42.720 --> 00:20:44.430
Yeah.

00:20:44.430 --> 00:20:45.800
Thank you.

00:20:45.800 --> 00:20:49.940
If you haven't seen x-gif
you should take some time

00:20:49.940 --> 00:20:51.714
and spend it with x-gif.

00:20:51.714 --> 00:20:53.380
So one really quick
win that you can get

00:20:53.380 --> 00:20:55.050
is just conditionally
loading the polyfills.

00:20:55.050 --> 00:20:57.230
You don't have to load the
polyfills on every platform.

00:20:57.230 --> 00:20:58.813
There are platforms
that support them.

00:20:58.813 --> 00:21:01.530
Chrome supports it, Opera
supports it, Chrome for Android

00:21:01.530 --> 00:21:04.050
supports it, and hopefully
very soon Firefox.

00:21:04.050 --> 00:21:05.600
So all we're doing
here's is just

00:21:05.600 --> 00:21:09.200
checking to see if the different
standards are implemented

00:21:09.200 --> 00:21:09.700
on the page.

00:21:09.700 --> 00:21:11.550
If they are, we just
move right along.

00:21:11.550 --> 00:21:13.840
If they're not, then
we load the polyfills.

00:21:13.840 --> 00:21:17.110
So this is an easy
way to save yourself

00:21:17.110 --> 00:21:18.290
quite a bit of kilobytes.

00:21:18.290 --> 00:21:20.610
Just conditionally load stuff.

00:21:20.610 --> 00:21:21.890
That's one trick.

00:21:21.890 --> 00:21:22.680
And the other thing
you've got to do

00:21:22.680 --> 00:21:24.120
is you've got to actually
pop open the dev tools

00:21:24.120 --> 00:21:26.860
and you got to make sure that
you're inspecting your page.

00:21:26.860 --> 00:21:29.144
So I looked at the
contacts app after I

00:21:29.144 --> 00:21:30.560
built it and was
very proud of it.

00:21:30.560 --> 00:21:32.220
I popped open the
network panel there

00:21:32.220 --> 00:21:36.870
and I saw that I was making
109 requests-- which is a lot--

00:21:36.870 --> 00:21:40.500
and I'm loading 943
kilobytes of stuff.

00:21:40.500 --> 00:21:43.280
Now, keep in mind, I
have excluded the images

00:21:43.280 --> 00:21:47.100
from this network panel,
so that's just my code.

00:21:47.100 --> 00:21:50.370
Holy crap, that's a lot.

00:21:50.370 --> 00:21:52.370
I recognize that 109
requests for some of you

00:21:52.370 --> 00:21:54.640
might be concerning.

00:21:54.640 --> 00:21:59.400
But what's going on
there is under the hood,

00:21:59.400 --> 00:22:00.500
I'm importing elements.

00:22:00.500 --> 00:22:02.239
Those elements
have dependencies.

00:22:02.239 --> 00:22:03.780
They're importing
their dependencies,

00:22:03.780 --> 00:22:04.430
and so on and so on.

00:22:04.430 --> 00:22:06.130
It's basically this
whole tree that's

00:22:06.130 --> 00:22:07.960
growing out of my application.

00:22:07.960 --> 00:22:10.050
And so to mitigate
this, we created

00:22:10.050 --> 00:22:11.920
a tool called Vulcanize.

00:22:11.920 --> 00:22:18.060
And Vulcanize is a module
which will actually

00:22:18.060 --> 00:22:20.617
take all of your imports,
concatenate them together,

00:22:20.617 --> 00:22:22.700
smoosh them all together,
take all your JavaScript

00:22:22.700 --> 00:22:25.030
and your CSS, mash
it all into one file,

00:22:25.030 --> 00:22:26.510
and allow you to
just load that one

00:22:26.510 --> 00:22:28.520
thing into your application.

00:22:28.520 --> 00:22:31.255
Now, it is available
as a node module,

00:22:31.255 --> 00:22:33.380
but if you are not so stoked
about doing everything

00:22:33.380 --> 00:22:35.810
on the command line, it's
also available in a Grunt

00:22:35.810 --> 00:22:37.750
task and a Gulp task.

00:22:37.750 --> 00:22:40.070
And for the contacts app,
I just used the Grunt task.

00:22:40.070 --> 00:22:43.142
I set it up once and I just
never thought about it again.

00:22:43.142 --> 00:22:44.850
It just runs every
time I'm about to push

00:22:44.850 --> 00:22:46.920
to production, which is cool.

00:22:46.920 --> 00:22:50.960
Now, after I
Vulcanize and I make

00:22:50.960 --> 00:22:53.990
sure to put my stuff on a server
that supports [INAUDIBLE],

00:22:53.990 --> 00:22:56.150
my application is
now three requests,

00:22:56.150 --> 00:22:57.950
which is a significant change.

00:22:57.950 --> 00:23:00.395
And I've got it down
to 114 kilobytes, which

00:23:00.395 --> 00:23:01.020
is pretty nice.

00:23:01.020 --> 00:23:03.780
Now, this is all the code
for my entire application.

00:23:03.780 --> 00:23:05.800
This is all the
JavaScript, all the CSS,

00:23:05.800 --> 00:23:08.820
all the HTML for my
entire application.

00:23:08.820 --> 00:23:10.790
So I've got it down to
114 K, and this number

00:23:10.790 --> 00:23:13.340
gets actually even
smaller, much smaller,

00:23:13.340 --> 00:23:16.740
in Polymer 0.8, which is cool.

00:23:16.740 --> 00:23:19.150
Now, the last thing
we've got to do,

00:23:19.150 --> 00:23:20.970
we've got our app to
the point where we're

00:23:20.970 --> 00:23:23.300
ready to put it up there,
share it with the world,

00:23:23.300 --> 00:23:25.634
but we've got to make sure
we're thinking about offline.

00:23:25.634 --> 00:23:27.633
Because again, if your
app doesn't work offline,

00:23:27.633 --> 00:23:29.610
you really don't have
a mobile experience.

00:23:29.610 --> 00:23:32.130
And I know that we've talked
a lot about ServiceWorker

00:23:32.130 --> 00:23:35.370
today, so I will talk about
it again here because it's so

00:23:35.370 --> 00:23:37.520
freaking awesome and
I'm so excited about it.

00:23:37.520 --> 00:23:40.790
What I did was I added service
worker to this application.

00:23:40.790 --> 00:23:41.810
Pretty straightforward.

00:23:41.810 --> 00:23:44.460
I just checked to see
if ServiceWorker exists.

00:23:44.460 --> 00:23:47.159
If it does, I install it.

00:23:47.159 --> 00:23:48.950
Important thing to note
here is that as I'm

00:23:48.950 --> 00:23:49.990
installing my
ServiceWorker, I've

00:23:49.990 --> 00:23:52.490
got to make sure that I'm using
the root scope so that I can

00:23:52.490 --> 00:23:56.260
catch any request at sort of
the top level of my application.

00:23:56.260 --> 00:23:59.435
If you nest your ServiceWorker
inside of a subdirectory

00:23:59.435 --> 00:24:00.810
or something like
that, then it's

00:24:00.810 --> 00:24:03.527
only going to have access to
the request in that scope, which

00:24:03.527 --> 00:24:04.110
sort of sucks.

00:24:04.110 --> 00:24:07.440
You want to put it
high up if you can.

00:24:07.440 --> 00:24:09.800
Inside my application,
as soon as we boot up,

00:24:09.800 --> 00:24:12.460
I just try and cache
as much stuff as I can.

00:24:12.460 --> 00:24:16.180
You'll notice that I'm caching
the vulcanized bundle of all

00:24:16.180 --> 00:24:17.770
of my elements.

00:24:17.770 --> 00:24:20.220
So my UI is just like
instantly available.

00:24:20.220 --> 00:24:24.450
I'm also caching the initial
response from my data service

00:24:24.450 --> 00:24:27.832
so that there are contacts
to populate my list there.

00:24:27.832 --> 00:24:29.290
And then the other
thing that I did

00:24:29.290 --> 00:24:31.150
was as the user is
scrolling around,

00:24:31.150 --> 00:24:33.910
I'm dynamically caching
any sort of image

00:24:33.910 --> 00:24:37.130
that has a host
name from S3.amazon.

00:24:37.130 --> 00:24:39.130
So as you pass through
an avatar image

00:24:39.130 --> 00:24:40.950
and call this S3
response method.

00:24:40.950 --> 00:24:43.280
And really, all it's doing
is it's fetching that image,

00:24:43.280 --> 00:24:46.010
it's caching it, and then
serving up for people.

00:24:46.010 --> 00:24:48.490
So as user kind of
uses my app, it just

00:24:48.490 --> 00:24:50.650
consumes things for them.

00:24:50.650 --> 00:24:52.830
Now, if we pop
this open in Canary

00:24:52.830 --> 00:24:54.760
and we've got Service
Worker running,

00:24:54.760 --> 00:24:55.940
we started running our app.

00:24:55.940 --> 00:24:57.170
And what I'm doing
here is at first,

00:24:57.170 --> 00:24:59.180
I'm just racing to the
bottom of my application.

00:24:59.180 --> 00:25:02.670
And right now, there's no
Service Worker in play,

00:25:02.670 --> 00:25:04.770
and so what it's doing
is loading all 300

00:25:04.770 --> 00:25:07.560
of my contact images at once
and just hammering the crap out

00:25:07.560 --> 00:25:08.950
of the network.

00:25:08.950 --> 00:25:10.420
And you'll see
it's like, oh God,

00:25:10.420 --> 00:25:11.970
why are you doing this to me.

00:25:11.970 --> 00:25:14.800
And it finally all
starts to load in.

00:25:14.800 --> 00:25:17.309
Now let's refresh
it and see what

00:25:17.309 --> 00:25:18.850
happens when
ServiceWorker's in play.

00:25:18.850 --> 00:25:23.270
Let's turn our Wi-Fi
off, refresh the page.

00:25:23.270 --> 00:25:25.050
You'll see here
over in the column

00:25:25.050 --> 00:25:28.450
that our assets are now
coming from ServiceWorker.

00:25:28.450 --> 00:25:30.200
So I race to the bottom
of my application.

00:25:30.200 --> 00:25:32.730
All those things are just
coming in immediately.

00:25:32.730 --> 00:25:35.836
There's no wait on those
assets, which is really cool.

00:25:35.836 --> 00:25:39.676
[APPLAUSE]

00:25:42.670 --> 00:25:44.360
So, wrap up.

00:25:44.360 --> 00:25:45.630
What did we learn?

00:25:45.630 --> 00:25:47.400
For structuring
your application,

00:25:47.400 --> 00:25:49.870
for structuring your UI, you've
got the core and the paper

00:25:49.870 --> 00:25:50.270
elements.

00:25:50.270 --> 00:25:51.644
So you can compose
those together

00:25:51.644 --> 00:25:54.752
to make a really awesome
mobile experience.

00:25:54.752 --> 00:25:57.210
From moving from one state of
your application to the next,

00:25:57.210 --> 00:25:59.168
you've got core-animated-pages,
and you've also

00:25:59.168 --> 00:26:00.850
got imperative or
declarative routing.

00:26:00.850 --> 00:26:03.360
Kind of depends on how
you like to do that.

00:26:03.360 --> 00:26:05.570
For performance,
conditional polyfills.

00:26:05.570 --> 00:26:08.320
And most importantly,
vulcanize all the things.

00:26:08.320 --> 00:26:11.190
Use Vulcanize to bundle up
as much as you possibly can.

00:26:11.190 --> 00:26:12.670
It'll save you a lot.

00:26:12.670 --> 00:26:14.952
Also, consider
exploring lazy loading.

00:26:14.952 --> 00:26:16.660
It's one of those
things that we're still

00:26:16.660 --> 00:26:18.580
trying to figure out what's
the right pattern, what's

00:26:18.580 --> 00:26:19.560
the right UX there.

00:26:19.560 --> 00:26:21.101
But it's something
that I think we'll

00:26:21.101 --> 00:26:23.052
be seeing a lot
more in the future,

00:26:23.052 --> 00:26:24.510
especially in the
world of Polymer.

00:26:24.510 --> 00:26:26.890
Lastly, for offline,
ServiceWorker's got your back.

00:26:26.890 --> 00:26:29.365
So as that starts to land
in the various browsers--

00:26:29.365 --> 00:26:30.990
I mean, even today,
experiment with it.

00:26:30.990 --> 00:26:33.531
As it starts to land in various
browsers, put it in your app.

00:26:33.531 --> 00:26:34.960
It's going to be really awesome.

00:26:34.960 --> 00:26:37.043
If you want to play around
with this contacts app,

00:26:37.043 --> 00:26:39.070
it's available up
on the GitHubs.

00:26:39.070 --> 00:26:41.860
It totally has a lot
of bugs, so please

00:26:41.860 --> 00:26:45.470
file bug reports, but even
better, submit pull requests.

00:26:47.996 --> 00:26:49.620
If you want to learn
more about Polymer

00:26:49.620 --> 00:26:51.161
and you're just
excited by everything

00:26:51.161 --> 00:26:54.120
you've seen this afternoon,
as Matt mentioned,

00:26:54.120 --> 00:26:56.486
we're running Polymer
events all over the world.

00:26:56.486 --> 00:26:57.610
We call these Polytechnics.

00:26:57.610 --> 00:26:59.401
I see some of you
wearing the shirts, which

00:26:59.401 --> 00:27:01.480
means you are cool.

00:27:01.480 --> 00:27:03.690
If you go to
itshackademic.com, you

00:27:03.690 --> 00:27:05.740
can find a Polytechnic near you.

00:27:05.740 --> 00:27:07.760
If you want to
participate in one,

00:27:07.760 --> 00:27:10.470
maybe you want to run
your own, whatever,

00:27:10.470 --> 00:27:11.990
all the material is up there.

00:27:11.990 --> 00:27:14.480
If you set one up,
please let me know.

00:27:14.480 --> 00:27:16.542
Tweet about it, whatever.

00:27:16.542 --> 00:27:19.760
It's freaking awesome, so you
should all go check it out.

00:27:19.760 --> 00:27:21.657
Most importantly,
polymer-project.org.

00:27:21.657 --> 00:27:23.990
As you've all been sitting
here, we've actually secretly

00:27:23.990 --> 00:27:25.400
been updating the website.

00:27:25.400 --> 00:27:27.420
So there's kind of a
new experience there.

00:27:27.420 --> 00:27:31.460
It's just a slight-- it's
just a nicer coat of paint.

00:27:31.460 --> 00:27:33.610
It's not a full blown
reboot of the site,

00:27:33.610 --> 00:27:35.485
but now it's a lot easier
to find the content

00:27:35.485 --> 00:27:36.574
that you're looking for.

00:27:36.574 --> 00:27:38.990
The getting started experience
is a lot easier if you just

00:27:38.990 --> 00:27:40.656
want to get up and
running with Polymer,

00:27:40.656 --> 00:27:42.120
so definitely
check out the site,

00:27:42.120 --> 00:27:44.140
go through some
of the tutorials.

00:27:44.140 --> 00:27:46.460
And I'm looking forward to
seeing all the really cool

00:27:46.460 --> 00:27:48.780
stuff that you guys
build, so thanks.

00:27:48.780 --> 00:27:52.079
[APPLAUSE]

