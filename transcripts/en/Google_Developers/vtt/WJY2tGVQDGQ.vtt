WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:03.050
ANKUR KOTWAL: Good morning,
ladies and gentlemen.

00:00:03.050 --> 00:00:07.782
Welcome to day three of
Google I/O. How are we doing?

00:00:07.782 --> 00:00:09.577
Tired.

00:00:09.577 --> 00:00:10.160
Well, I hope--

00:00:10.160 --> 00:00:11.970
LAURENCE MORONEY: Did
you party last night?

00:00:11.970 --> 00:00:14.011
ANKUR KOTWAL: Well, I hope
that this session will

00:00:14.011 --> 00:00:15.910
get you inspired and excited.

00:00:15.910 --> 00:00:19.540
I'm Ankur Kotwal and I'm a
developer advocate from Sydney.

00:00:19.540 --> 00:00:22.880
This is Laurence Moroney, the
star of "Coffee with a Googler"

00:00:22.880 --> 00:00:23.820
based out of Seattle.

00:00:23.820 --> 00:00:25.310
He's also a developer advocate.

00:00:25.310 --> 00:00:28.580
And we're on the Google Maps
API, the developer relations

00:00:28.580 --> 00:00:31.470
team, and today we have an
interesting talk for you.

00:00:31.470 --> 00:00:33.970
We've taken a different
approach to what we've

00:00:33.970 --> 00:00:36.132
done in the past with our APIs.

00:00:36.132 --> 00:00:37.840
But I'm going to start
off by telling you

00:00:37.840 --> 00:00:41.780
a little bit about the history
of the Google Maps API.

00:00:41.780 --> 00:00:44.740
This is a blog post that
we launched 10 years ago,

00:00:44.740 --> 00:00:49.290
and it was us announcing
the Google Maps API.

00:00:49.290 --> 00:00:52.530
We were really, really
excited to make the Maps

00:00:52.530 --> 00:00:56.710
API available to the
world, but we were really

00:00:56.710 --> 00:01:00.580
impressed with just how
innovative developers were

00:01:00.580 --> 00:01:01.095
with it.

00:01:01.095 --> 00:01:03.310
The types of
experiences that you all

00:01:03.310 --> 00:01:06.800
built was just astounding,
and that really inspired

00:01:06.800 --> 00:01:11.320
us to add more and more
capabilities to the Maps APIs

00:01:11.320 --> 00:01:13.070
as time went on.

00:01:13.070 --> 00:01:17.140
And so just a quick sort of
historic tour through this.

00:01:17.140 --> 00:01:19.460
You can see how the
Maps API has changed,

00:01:19.460 --> 00:01:22.940
and these are clearly
the JavaScript Maps APIs.

00:01:22.940 --> 00:01:26.310
And this is where we landed
on just a couple of years ago.

00:01:26.310 --> 00:01:28.980
So today what we
want to do is talk

00:01:28.980 --> 00:01:33.480
about that full set of APIs that
we have, but from a perspective

00:01:33.480 --> 00:01:35.340
of where do I get started?

00:01:35.340 --> 00:01:37.970
Which API should
I use when I want

00:01:37.970 --> 00:01:41.130
to build certain types
of user experiences?

00:01:41.130 --> 00:01:42.990
And to support that,
we've developed

00:01:42.990 --> 00:01:46.615
a framework, a
four-layer framework,

00:01:46.615 --> 00:01:48.740
and we're going to start
going through these layers

00:01:48.740 --> 00:01:49.940
in a minute.

00:01:49.940 --> 00:01:51.890
But really, with
this framework, you

00:01:51.890 --> 00:01:56.110
get to decide how much code you
want to write and balance that

00:01:56.110 --> 00:02:00.186
off with what type of
customizability you want.

00:02:00.186 --> 00:02:02.060
So I'm now going to hand
it over to Laurence,

00:02:02.060 --> 00:02:03.740
who's going to start
walking us through this.

00:02:03.740 --> 00:02:04.210
LAURENCE MORONEY:
Thank you, Ankur.

00:02:04.210 --> 00:02:06.190
And good morning
again, everybody.

00:02:06.190 --> 00:02:08.860
Now, I don't know about you,
but I'm a really, really lazy

00:02:08.860 --> 00:02:09.940
developer.

00:02:09.940 --> 00:02:12.000
I like to do as little
work as possible

00:02:12.000 --> 00:02:14.339
and get as much benefit
from that work as possible.

00:02:14.339 --> 00:02:16.505
That's why I'm probably
doing a talk at 9:00 o'clock

00:02:16.505 --> 00:02:18.080
in the morning after the party.

00:02:18.080 --> 00:02:21.710
So when talking about building
maps, the first level--

00:02:21.710 --> 00:02:23.515
and the one that
appeals to me a lot,

00:02:23.515 --> 00:02:25.680
you know, in being able
to do this-- is what we've

00:02:25.680 --> 00:02:27.388
been calling the
Delegate Layer, and what

00:02:27.388 --> 00:02:29.470
the Delegate Layer
is let someone else

00:02:29.470 --> 00:02:30.622
do the work for me.

00:02:30.622 --> 00:02:32.580
In this case, it's if I
want to build something

00:02:32.580 --> 00:02:34.600
that incorporates a map, I'm
going to say, you know what?

00:02:34.600 --> 00:02:36.440
I'm going to have
Google do all the work.

00:02:36.440 --> 00:02:38.250
I don't want to do
anything myself.

00:02:38.250 --> 00:02:40.420
And what technologies
are available for that

00:02:40.420 --> 00:02:42.510
so that I can have
maps, I can have

00:02:42.510 --> 00:02:44.647
geo stuff in my
application, without me

00:02:44.647 --> 00:02:45.730
doing a whole lot of work?

00:02:45.730 --> 00:02:47.560
And in some cases,
not doing any?

00:02:47.560 --> 00:02:52.110
So the first one is let's
just use the Google Maps app.

00:02:52.110 --> 00:02:53.720
So if I have an
application and I

00:02:53.720 --> 00:02:55.490
want to put a map
into it, instead

00:02:55.490 --> 00:02:57.260
of embedding a map
myself, I'm going

00:02:57.260 --> 00:02:59.400
to launch the Google Maps app.

00:02:59.400 --> 00:03:02.020
In Android we do
this using intents.

00:03:02.020 --> 00:03:04.250
So when I have an
intent and there

00:03:04.250 --> 00:03:09.240
is a URI structure that works
within the Google Maps app,

00:03:09.240 --> 00:03:12.040
so if I say geo colon
and a couple of numbers--

00:03:12.040 --> 00:03:13.800
anybody know what
these numbers are?

00:03:13.800 --> 00:03:14.290
ANKUR KOTWAL: Pick me.

00:03:14.290 --> 00:03:14.830
Pick me.

00:03:14.830 --> 00:03:16.080
LAURENCE MORONEY: Go on, then.

00:03:16.080 --> 00:03:17.140
ANKUR KOTWAL: Latitude
and longitude.

00:03:17.140 --> 00:03:18.030
LAURENCE MORONEY:
Latitude and longitude.

00:03:18.030 --> 00:03:18.850
Which one's the latitude?

00:03:18.850 --> 00:03:19.800
Which one's the longitude?

00:03:19.800 --> 00:03:21.510
ANKUR KOTWAL: The first
one is the latitude.

00:03:21.510 --> 00:03:21.640
LAURENCE MORONEY: Very good.

00:03:21.640 --> 00:03:23.000
Wasn't it with
Google Maps they used

00:03:23.000 --> 00:03:24.520
to be the other way around
in the beginning, right?

00:03:24.520 --> 00:03:25.811
It was longitude then latitude.

00:03:25.811 --> 00:03:27.160
I learned that this week.

00:03:27.160 --> 00:03:29.940
So if I start, like, with
a geo colon something

00:03:29.940 --> 00:03:31.980
and I give it a
latitude and a longitude

00:03:31.980 --> 00:03:35.010
and then I start up a
map intent from that,

00:03:35.010 --> 00:03:37.770
and this map intent is
set to use the package

00:03:37.770 --> 00:03:41.200
com.google.android.apps.maps,
now

00:03:41.200 --> 00:03:44.170
it's a case of what Android will
do is it will launch the Google

00:03:44.170 --> 00:03:47.090
Maps app for me, it
will pass this URI

00:03:47.090 --> 00:03:50.630
to it, which is geo colon
latitude, longitude, and that

00:03:50.630 --> 00:03:52.750
will render a map
centered on that latitude

00:03:52.750 --> 00:03:53.930
and longitude for me.

00:03:53.930 --> 00:03:56.880
So now by just putting these
four lines of code in here,

00:03:56.880 --> 00:03:59.820
I'm able to get a map of
a location that I want.

00:03:59.820 --> 00:04:01.700
Lazy developer like
me, this is great.

00:04:01.700 --> 00:04:03.740
I haven't had to
really implement much.

00:04:03.740 --> 00:04:05.680
But because we're
using this URI,

00:04:05.680 --> 00:04:07.365
and you can see it's
prefixed by geo,

00:04:07.365 --> 00:04:09.490
we get the latitude
and longitude,

00:04:09.490 --> 00:04:13.240
there's lots of other stuff in
the URI that we can do as well.

00:04:13.240 --> 00:04:15.790
So here now I've added
a parameter at the end,

00:04:15.790 --> 00:04:17.510
?q=restaurant.

00:04:17.510 --> 00:04:19.490
So go on, Ankur, what
do you think the q is?

00:04:19.490 --> 00:04:20.149
ANKUR KOTWAL: Query?

00:04:20.149 --> 00:04:21.148
LAURENCE MORONEY: Query.

00:04:21.148 --> 00:04:21.950
Very good.

00:04:21.950 --> 00:04:24.030
So I'm taking a
latitude and longitude

00:04:24.030 --> 00:04:26.140
and I'm querying for
restaurants in that.

00:04:26.140 --> 00:04:29.540
And now the Google
Maps app is launching,

00:04:29.540 --> 00:04:32.910
it's going to this location, and
it's highlighting restaurants

00:04:32.910 --> 00:04:33.970
at that location.

00:04:33.970 --> 00:04:37.320
So say I'm building a travel app
or something along those lines

00:04:37.320 --> 00:04:39.410
and I want one of the
activities in my app

00:04:39.410 --> 00:04:41.720
to be that people can
see a map of restaurants,

00:04:41.720 --> 00:04:45.230
instead of me building that for
myself, the package is doing it

00:04:45.230 --> 00:04:45.730
for me.

00:04:45.730 --> 00:04:48.330
The Google Maps app
is doing that for me.

00:04:48.330 --> 00:04:49.960
But wait, there's more.

00:04:49.960 --> 00:04:51.650
It gets better.

00:04:51.650 --> 00:04:54.540
Now I can actually parse
different real things.

00:04:54.540 --> 00:04:56.280
Like, so if I want
to say, for example,

00:04:56.280 --> 00:05:00.560
do navigation instead of-- so
say maybe I have a restaurant

00:05:00.560 --> 00:05:03.150
myself and I want people to
be able to navigate, you know,

00:05:03.150 --> 00:05:07.260
to my restaurant, now within
this URI structure I can say

00:05:07.260 --> 00:05:11.137
it's a google.navigation?q--
q was what again?

00:05:11.137 --> 00:05:11.970
ANKUR KOTWAL: Query?

00:05:11.970 --> 00:05:12.250
LAURENCE MORONEY: Query.

00:05:12.250 --> 00:05:13.000
Thank you.

00:05:13.000 --> 00:05:14.880
And then I can
specify to navigate

00:05:14.880 --> 00:05:17.010
to a particular location.

00:05:17.010 --> 00:05:19.840
In this case, Taronga
Zoo in Sydney, Australia.

00:05:19.840 --> 00:05:21.369
He's lucky enough
to live in Sydney.

00:05:21.369 --> 00:05:22.410
He can go there any time.

00:05:22.410 --> 00:05:24.800
I wish I could go, because I
really want to see a koala.

00:05:24.800 --> 00:05:27.390
And I Ankur has taught me all
about drop bears that drop out

00:05:27.390 --> 00:05:29.310
of trees and they
look like koalas,

00:05:29.310 --> 00:05:30.726
but they're really fierce.

00:05:30.726 --> 00:05:33.067
And something tells me
they're not real, though.

00:05:33.067 --> 00:05:33.650
Are they real?

00:05:33.650 --> 00:05:34.213
ANKUR KOTWAL: They're real.

00:05:34.213 --> 00:05:34.586
They're totally real.

00:05:34.586 --> 00:05:35.461
LAURENCE MORONEY: OK.

00:05:35.461 --> 00:05:37.600
So, again, if I want
to do navigation

00:05:37.600 --> 00:05:41.490
and I want the Google Maps app
to handle navigation for me,

00:05:41.490 --> 00:05:42.600
this is all I have to do.

00:05:42.600 --> 00:05:45.270
Very, very simple; very,
very straightforward.

00:05:45.270 --> 00:05:49.071
And then finally, my very, very
favorite Google technology.

00:05:49.071 --> 00:05:51.320
When I first interviewed for
Google, one of the things

00:05:51.320 --> 00:05:53.740
they ask you is, OK, tell us
your favorite Google technology

00:05:53.740 --> 00:05:56.176
and, you know, tell us some
things about it and, you know,

00:05:56.176 --> 00:05:57.301
maybe how you'd improve it.

00:05:57.301 --> 00:05:59.000
And I wear my
heart on my sleeve.

00:05:59.000 --> 00:06:01.189
My absolute favorite
is Google Street View.

00:06:01.189 --> 00:06:02.980
So, again, if I want
to have a Street View,

00:06:02.980 --> 00:06:06.920
like maybe a-- I do volunteer
work in Seattle, where I live,

00:06:06.920 --> 00:06:09.930
for it's like a
youth hockey group

00:06:09.930 --> 00:06:11.620
and we have a
couple of ice rinks.

00:06:11.620 --> 00:06:13.934
And ice rinks a really
big, expensive places,

00:06:13.934 --> 00:06:16.100
so you have to put them a
little bit out of the way.

00:06:16.100 --> 00:06:17.974
You can't put them
in city centers.

00:06:17.974 --> 00:06:19.390
And sometimes it's
hard for people

00:06:19.390 --> 00:06:22.470
to find the ice rink, so, like,
something like a Street View

00:06:22.470 --> 00:06:24.762
so people can see, hey,
navigate to this location.

00:06:24.762 --> 00:06:26.970
This is what it's going to
look like from the street,

00:06:26.970 --> 00:06:28.830
this is our ice
rink, and that kind

00:06:28.830 --> 00:06:31.320
of thing, that's where Street
View just works brilliantly.

00:06:31.320 --> 00:06:33.710
And you can also view inside
places with Street View.

00:06:33.710 --> 00:06:34.959
So you can see what it's like.

00:06:34.959 --> 00:06:36.590
So we put, like, a
couple of our ice

00:06:36.590 --> 00:06:38.930
rinks that the actual
ice sheets that we did,

00:06:38.930 --> 00:06:41.450
like, a surround view that
you could navigate into it

00:06:41.450 --> 00:06:42.575
with Street View with that.

00:06:42.575 --> 00:06:43.640
And it was just fabulous.

00:06:43.640 --> 00:06:45.990
And now people can see
what the facility is like.

00:06:45.990 --> 00:06:48.520
And, again, if I want to
have a Street View launch,

00:06:48.520 --> 00:06:50.555
all I have to do is
create a URI like this.

00:06:50.555 --> 00:06:53.490
You know google.streetview
dot something and two numbers,

00:06:53.490 --> 00:06:57.260
latitude and longitude
again, and I'm

00:06:57.260 --> 00:06:59.950
getting all of that
functionality done for me

00:06:59.950 --> 00:07:01.040
without me doing anything.

00:07:01.040 --> 00:07:03.180
Pretty cool, right?

00:07:03.180 --> 00:07:05.130
For lazy developers like me.

00:07:05.130 --> 00:07:08.330
Now, this doesn't just
work with Android.

00:07:08.330 --> 00:07:10.800
We also can make
this work with iOS.

00:07:10.800 --> 00:07:15.040
Now, not everybody on iOS has
the Google Maps app installed,

00:07:15.040 --> 00:07:16.340
of course.

00:07:16.340 --> 00:07:20.180
So using URL schemes on iOS,
we can do something like this.

00:07:20.180 --> 00:07:22.570
Now, in this case you see I
clicked that Launch button

00:07:22.570 --> 00:07:25.040
and what happened is in
this scenario is I did not

00:07:25.040 --> 00:07:27.660
have Google Maps installed
on the emulator--

00:07:27.660 --> 00:07:29.610
I recorded this off
of the emulator--

00:07:29.610 --> 00:07:32.030
so it falls back
gracefully to Safari

00:07:32.030 --> 00:07:34.380
and uses Google
Maps within Safari.

00:07:34.380 --> 00:07:35.290
Pretty cool.

00:07:35.290 --> 00:07:37.980
So let's take a look at what
the code for that would be.

00:07:37.980 --> 00:07:40.230
Now, I'm sorry, I'm a
little bit more old school

00:07:40.230 --> 00:07:41.140
when it comes iOS.

00:07:41.140 --> 00:07:42.410
I'm an Objective C guy.

00:07:42.410 --> 00:07:44.248
I haven't become a fan
of Taylor Swift yet.

00:07:44.248 --> 00:07:44.748
So--

00:07:44.748 --> 00:07:46.020
[LAUGHTER]

00:07:46.020 --> 00:07:48.461
Hey, they laughed at it.

00:07:48.461 --> 00:07:50.210
ANKUR KOTWAL: That's
one out of, like, 15.

00:07:50.210 --> 00:07:50.882
LAURENCE MORONEY: Yeah.

00:07:50.882 --> 00:07:53.090
OK, we had a debate whether
they would like that one.

00:07:53.090 --> 00:07:53.700
So they did.

00:07:53.700 --> 00:07:56.840
So, you know, in our
Objective C all I have to do

00:07:56.840 --> 00:07:59.090
is I'm going to create
a string of my location,

00:07:59.090 --> 00:08:01.510
and it has the latitude
and longitude in it.

00:08:01.510 --> 00:08:03.510
And then the URL
scheme prefix for that,

00:08:03.510 --> 00:08:05.250
the same as you saw
on the Android slide,

00:08:05.250 --> 00:08:08.831
where I'm saying it's
com.googlemaps:// latitude,

00:08:08.831 --> 00:08:09.330
longitude.

00:08:09.330 --> 00:08:11.000
Also, sorry, there
was a zoom here.

00:08:11.000 --> 00:08:13.580
When you talk about maps,
when you want to render maps,

00:08:13.580 --> 00:08:16.580
so if you imagine a camera up
in outer space looking down

00:08:16.580 --> 00:08:18.370
on the map, and
then your zoom level

00:08:18.370 --> 00:08:21.030
is the closer you get to the
map, the more detail you see.

00:08:21.030 --> 00:08:22.822
So this was zoom equals 14.

00:08:22.822 --> 00:08:25.280
So that view on the last slide
that we had of New York City

00:08:25.280 --> 00:08:27.363
was like I'm zoomed right
down rather than viewing

00:08:27.363 --> 00:08:28.850
New York City from orbit.

00:08:28.850 --> 00:08:31.000
So I'm just saying, you
know, com.googlemaps,

00:08:31.000 --> 00:08:32.980
here's my latitude,
here's my longitude,

00:08:32.980 --> 00:08:34.370
here's my zoom level.

00:08:34.370 --> 00:08:36.770
And I'm going to create
a URL out of that.

00:08:36.770 --> 00:08:39.470
If you're an Objective C-er,
if you're an iOS developer,

00:08:39.470 --> 00:08:41.630
how you will launch
an application

00:08:41.630 --> 00:08:44.450
is you use the UI application
shared application,

00:08:44.450 --> 00:08:46.670
and then you open a URL on that.

00:08:46.670 --> 00:08:48.890
So now I've tried
to open a URL, which

00:08:48.890 --> 00:08:50.960
is prefixed by com.googlemaps.

00:08:50.960 --> 00:08:54.510
Now, maybe this URL will
open, maybe it won't.

00:08:54.510 --> 00:08:57.710
When it will open is when the
Google Maps app is installed.

00:08:57.710 --> 00:09:00.200
When it won't open is when
the Google Maps app is not

00:09:00.200 --> 00:09:01.180
installed.

00:09:01.180 --> 00:09:03.360
So in this case I say,
hey, if it fails, I'm just

00:09:03.360 --> 00:09:08.620
going to fall back to
http://maps.google.com/?=

00:09:08.620 --> 00:09:10.730
and then my location
parameter from the beginning,

00:09:10.730 --> 00:09:12.380
the latitude,
longitude, and zoom.

00:09:12.380 --> 00:09:15.350
And that's when Safari opened,
went to Google Maps for me,

00:09:15.350 --> 00:09:17.370
and showed that
particular location.

00:09:17.370 --> 00:09:20.290
So, again, Google Maps is
really doing everything for me

00:09:20.290 --> 00:09:23.100
as a developer in this case,
and I'm writing minimal code.

00:09:23.100 --> 00:09:25.740
It would be great if the
Google Maps app was installed

00:09:25.740 --> 00:09:28.460
and then I get all the richness
from that, but if it's not,

00:09:28.460 --> 00:09:30.470
I still have the maps
within safari itself,

00:09:30.470 --> 00:09:31.684
within my browser itself.

00:09:31.684 --> 00:09:33.850
So I think this is a really,
really cool technology.

00:09:33.850 --> 00:09:35.830
And, again, for
lazy people like me,

00:09:35.830 --> 00:09:37.400
you know, who just
want to delegate,

00:09:37.400 --> 00:09:39.191
who want to have Google
Maps do everything,

00:09:39.191 --> 00:09:41.190
you know, we have these
things that we can do--

00:09:41.190 --> 00:09:44.490
the URL schemes, the activities
that we can launch on Android,

00:09:44.490 --> 00:09:45.760
and that type of stuff.

00:09:45.760 --> 00:09:47.370
ANKUR KOTWAL: Hey, Laurence?

00:09:47.370 --> 00:09:50.280
What if I don't want
users to get out of my app

00:09:50.280 --> 00:09:52.127
and I want to keep
them in my app?

00:09:52.127 --> 00:09:53.710
LAURENCE MORONEY:
Then we incorporate.

00:09:53.710 --> 00:09:54.418
ANKUR KOTWAL: OK.

00:09:54.418 --> 00:09:56.846
Tell us all about it.

00:09:56.846 --> 00:09:58.470
LAURENCE MORONEY: So
here is a case of,

00:09:58.470 --> 00:09:59.940
I just want a simple map.

00:09:59.940 --> 00:10:01.010
I want the simple map.

00:10:01.010 --> 00:10:02.720
I want it in my application.

00:10:02.720 --> 00:10:04.570
As Ankur said, I don't
want to drive people

00:10:04.570 --> 00:10:06.585
out of my application
to the Google Maps app,

00:10:06.585 --> 00:10:07.960
or I don't want
to drive them out

00:10:07.960 --> 00:10:09.760
of my application
to the browser.

00:10:09.760 --> 00:10:11.510
How do I get a map
in my application,

00:10:11.510 --> 00:10:14.630
and how do I make it as
simple as possible to use?

00:10:14.630 --> 00:10:16.370
Well, let's take a
look at what we have.

00:10:16.370 --> 00:10:20.090
First of all is the
Web Static Maps API,

00:10:20.090 --> 00:10:22.140
and this is a pretty
cool API where, I mean,

00:10:22.140 --> 00:10:24.630
if I were to summarize
it, you give a URL,

00:10:24.630 --> 00:10:26.750
you get an image back
containing a map.

00:10:26.750 --> 00:10:28.570
But it's not just
going to be a standard,

00:10:28.570 --> 00:10:31.010
boring map that's the
same as everybody else's.

00:10:31.010 --> 00:10:32.202
It can be customized.

00:10:32.202 --> 00:10:34.535
Here you can see the one on
the left has been customized

00:10:34.535 --> 00:10:36.660
and has been themed
so it's this really

00:10:36.660 --> 00:10:38.130
nice arty black and white.

00:10:38.130 --> 00:10:41.300
So maybe if your site has that
kind of design language in it,

00:10:41.300 --> 00:10:43.100
your map could do
the same thing.

00:10:43.100 --> 00:10:45.280
The center one is
a satellite image.

00:10:45.280 --> 00:10:46.585
I don't know where it's of.

00:10:46.585 --> 00:10:47.335
Can anybody guess?

00:10:47.335 --> 00:10:49.182
Is that Iceland or?

00:10:49.182 --> 00:10:50.890
I'm not sure, but it
looks really pretty.

00:10:50.890 --> 00:10:52.770
There's lots of fjords there.

00:10:52.770 --> 00:10:54.970
And so, again, you can set
it to be a satellite map.

00:10:54.970 --> 00:10:56.877
So maybe you want
to-- I don't know,

00:10:56.877 --> 00:10:58.710
maybe you want to show
off, like, landscape.

00:10:58.710 --> 00:11:00.500
It's a real estate app
or something like that

00:11:00.500 --> 00:11:02.350
and you want to show off
the beautiful landscape

00:11:02.350 --> 00:11:03.110
around the house.

00:11:03.110 --> 00:11:06.174
So those kind of things, you
can show satellite images.

00:11:06.174 --> 00:11:07.840
And then finally, you
can also set it so

00:11:07.840 --> 00:11:09.600
that you could have a routing.

00:11:09.600 --> 00:11:12.330
So a, you know, how to
get from A to B. So,

00:11:12.330 --> 00:11:14.080
again, if I go
back to my example

00:11:14.080 --> 00:11:17.900
that I was talking about earlier
on of the hockey organization

00:11:17.900 --> 00:11:21.500
that I volunteer with, this one
is really, really great for us

00:11:21.500 --> 00:11:23.720
because we want, on
our website, to have

00:11:23.720 --> 00:11:26.790
people be able to find
where our rinks are.

00:11:26.790 --> 00:11:29.780
And it's like, here's
navigation from various points.

00:11:29.780 --> 00:11:32.506
And so it makes it-- you
know, it's a static map

00:11:32.506 --> 00:11:33.380
that we're embedding.

00:11:33.380 --> 00:11:36.470
I don't have to worry about
embedding logic in a website.

00:11:36.470 --> 00:11:38.980
I don't have to worry about
putting lots of JavaScript

00:11:38.980 --> 00:11:40.110
and all that kind of thing.

00:11:40.110 --> 00:11:42.720
I have a URL that I call,
I could iframe it in,

00:11:42.720 --> 00:11:44.200
and I get what I want on there.

00:11:44.200 --> 00:11:46.370
So that's that Web
Static Maps API.

00:11:46.370 --> 00:11:48.980
Again, it's not taking
me away from my site

00:11:48.980 --> 00:11:51.490
or not taking me away from
my app to something else,

00:11:51.490 --> 00:11:54.040
it's just giving me
in-line what I have.

00:11:54.040 --> 00:11:56.310
And I'm incorporating
Google Maps's functionality

00:11:56.310 --> 00:11:58.780
into my own site.

00:11:58.780 --> 00:12:00.410
Then there's the Embed API.

00:12:00.410 --> 00:12:02.630
And here's where we take
it a little bit further.

00:12:02.630 --> 00:12:04.990
So instead of it
being a static map,

00:12:04.990 --> 00:12:06.519
I'm getting all
the functionality

00:12:06.519 --> 00:12:08.060
that you would be
used to if you were

00:12:08.060 --> 00:12:10.930
using Google Maps in the
browser independently.

00:12:10.930 --> 00:12:15.117
So things such as roads,
navigation, traffic conditions,

00:12:15.117 --> 00:12:17.200
all those kind of things
that you see on the left,

00:12:17.200 --> 00:12:18.210
it's just iframed in.

00:12:18.210 --> 00:12:24.240
In this case, the source is
google.com/maps/ something,

00:12:24.240 --> 00:12:27.300
and I can get whatever I want
based on what's available

00:12:27.300 --> 00:12:28.040
in the API.

00:12:28.040 --> 00:12:29.710
As you can see on
the left here, I

00:12:29.710 --> 00:12:31.066
have navigation around London.

00:12:31.066 --> 00:12:33.690
And as you can see on the right,
I have my favorite technology,

00:12:33.690 --> 00:12:34.631
it's Street View.

00:12:34.631 --> 00:12:35.630
And here is the example.

00:12:35.630 --> 00:12:37.010
This is a really
beautiful restaurant.

00:12:37.010 --> 00:12:37.640
I don't know where it is.

00:12:37.640 --> 00:12:38.550
Do you know where that is?

00:12:38.550 --> 00:12:39.573
ANKUR KOTWAL: I don't.

00:12:39.573 --> 00:12:40.531
LAURENCE MORONEY: OK.

00:12:40.531 --> 00:12:42.780
So if like, for example, we
have this really beautiful

00:12:42.780 --> 00:12:44.830
restaurant-- so if I was
operating a restaurant

00:12:44.830 --> 00:12:47.060
and I wanted people to see
how beautiful it is inside

00:12:47.060 --> 00:12:49.490
of my restaurant, instead
of just telling them

00:12:49.490 --> 00:12:51.930
or instead of having
static photos on my site,

00:12:51.930 --> 00:12:55.080
I could embed the Street View
of the inside of my restaurant

00:12:55.080 --> 00:12:57.180
so people can pan around,
they can zoom around,

00:12:57.180 --> 00:12:58.972
they can step around
inside the restaurant.

00:12:58.972 --> 00:13:00.846
And they can really,
really get an experience

00:13:00.846 --> 00:13:03.240
for what it would be like to
be in my awesome restaurant.

00:13:03.240 --> 00:13:06.720
I hope the cooking is
as good as the pictures.

00:13:06.720 --> 00:13:08.320
So then there's Autocomplete.

00:13:08.320 --> 00:13:10.440
So have you ever
gone onto a phone

00:13:10.440 --> 00:13:12.730
and you've had to start
typing in an address,

00:13:12.730 --> 00:13:15.570
and it's like, you know, typing
with thumbs the way that you do

00:13:15.570 --> 00:13:18.694
is, like, I want to go to
Hogwarts School of Witchcraft

00:13:18.694 --> 00:13:20.860
and Wizardry, it's like,
what's the address of that?

00:13:20.860 --> 00:13:21.590
I have no idea.

00:13:21.590 --> 00:13:23.340
It's somewhere in Scotland.

00:13:23.340 --> 00:13:24.920
The Autocomplete,
what that will do

00:13:24.920 --> 00:13:27.870
is once I start typing-- in
this case I was typing Hogwarts,

00:13:27.870 --> 00:13:30.380
and now I'm typing the
Eiffel Tower-- what that's

00:13:30.380 --> 00:13:32.450
going to do for me is
once I start typing,

00:13:32.450 --> 00:13:35.790
we have a places API
and we have places data

00:13:35.790 --> 00:13:38.250
in Google Maps that will
then come back and start

00:13:38.250 --> 00:13:40.190
autocompleting based
on what I'm typing.

00:13:40.190 --> 00:13:43.290
If I start typing H-O-G for
Hogwarts, all of the Hogwartses

00:13:43.290 --> 00:13:45.490
around are going to be
listed, and I can pick one

00:13:45.490 --> 00:13:47.830
and get address details back.

00:13:47.830 --> 00:13:50.391
Anybody ever been
to the Eiffel Tower?

00:13:50.391 --> 00:13:52.390
Did you know the address
of it before you saw it

00:13:52.390 --> 00:13:54.150
on this slide?

00:13:54.150 --> 00:13:54.650
Right?

00:13:54.650 --> 00:13:56.650
We don't know the address
of places like that.

00:13:56.650 --> 00:13:58.990
You know, you go to Paris and
you see this great, big tower

00:13:58.990 --> 00:14:00.200
and you know that's
the Eiffel Tower.

00:14:00.200 --> 00:14:01.540
Or you ask people
how to get there.

00:14:01.540 --> 00:14:02.956
But if you want
the address of it,

00:14:02.956 --> 00:14:04.570
it's really, really
hard to find.

00:14:04.570 --> 00:14:07.920
So if, I in this case, started
typing Eiffel Tower, then

00:14:07.920 --> 00:14:10.560
the autocomplete-- if I'm
dropping the Autocomplete

00:14:10.560 --> 00:14:12.070
widget into my
application-- that's

00:14:12.070 --> 00:14:14.150
going to give me data back
about the Eiffel Tower

00:14:14.150 --> 00:14:15.506
once the user's selected it.

00:14:15.506 --> 00:14:18.130
And that's how on this one I was
able to find the address of it

00:14:18.130 --> 00:14:20.600
and the latitude and
longitude of it as well.

00:14:20.600 --> 00:14:23.720
And the code for this--
oh, it's cropped off here.

00:14:23.720 --> 00:14:25.390
It's not cropped off
there, thankfully.

00:14:25.390 --> 00:14:27.895
So the code for
this is on Android,

00:14:27.895 --> 00:14:30.550
you know, we have this
place Autocomplete widget,

00:14:30.550 --> 00:14:32.600
and we start an
activity for that.

00:14:32.600 --> 00:14:34.420
And then that
activity, once the user

00:14:34.420 --> 00:14:37.300
has finished typing in stuff,
is going to get a callback.

00:14:37.300 --> 00:14:39.000
So on the left,
the activity result

00:14:39.000 --> 00:14:41.490
code that you can see at
the bottom, whenever you're

00:14:41.490 --> 00:14:43.150
in Android, if you
start an activity

00:14:43.150 --> 00:14:44.870
and you get a callback,
that callback's

00:14:44.870 --> 00:14:46.520
always going to
contain the data.

00:14:46.520 --> 00:14:47.790
And you're going to
have data and you're

00:14:47.790 --> 00:14:49.540
going to cast it into
the relevant object.

00:14:49.540 --> 00:14:51.180
And in this case,
you know, my data

00:14:51.180 --> 00:14:54.010
that's coming back for me is
actually going to be a place,

00:14:54.010 --> 00:14:55.810
and the place is
something that's

00:14:55.810 --> 00:14:57.970
an object within the Places API.

00:14:57.970 --> 00:15:00.380
And then from that I can
start querying metadata

00:15:00.380 --> 00:15:01.510
around that place.

00:15:01.510 --> 00:15:03.270
In the example that I
showed, the metadata

00:15:03.270 --> 00:15:05.790
was things like the address
and the latitude and longitude.

00:15:05.790 --> 00:15:07.490
But, for example, if
it's a restaurant,

00:15:07.490 --> 00:15:09.300
you can start seeing
photographs of it,

00:15:09.300 --> 00:15:11.130
you can start
seeing reviews, you

00:15:11.130 --> 00:15:12.670
can start seeing
links to the site,

00:15:12.670 --> 00:15:14.147
menus, all of those
kind of things.

00:15:14.147 --> 00:15:16.355
And there are tons of
entities, not just restaurants.

00:15:16.355 --> 00:15:19.420
There's everything from A to
Z, from accountants to zoos,

00:15:19.420 --> 00:15:21.350
available within that API.

00:15:21.350 --> 00:15:23.710
And then iOS it's
very, very similar.

00:15:23.710 --> 00:15:25.530
You can see the
pattern is the same.

00:15:25.530 --> 00:15:29.190
On iOS on my autocomplete
press button in this case,

00:15:29.190 --> 00:15:31.180
I'm going to start to
view controller, which

00:15:31.180 --> 00:15:33.960
was a-- I have to read it out--
it's a GMS autocomplete view

00:15:33.960 --> 00:15:34.877
controller.

00:15:34.877 --> 00:15:37.210
And what that's going to do
is that's presenting the UI,

00:15:37.210 --> 00:15:38.470
as we saw in the video.

00:15:38.470 --> 00:15:40.220
And when the user
types in something,

00:15:40.220 --> 00:15:42.440
gets an address back,
they've selected the Hogwarts

00:15:42.440 --> 00:15:45.540
that they want to go to, then
this will call you back with a

00:15:45.540 --> 00:15:47.640
did auto complete with place.

00:15:47.640 --> 00:15:50.247
And from that you can then
pull the place details.

00:15:50.247 --> 00:15:52.080
And you can see the
last line of code there.

00:15:52.080 --> 00:15:54.490
I'm just saying, you know,
a string place details is

00:15:54.490 --> 00:15:56.220
the place name itself.

00:15:56.220 --> 00:15:59.477
So while the user might have
just typed H-O-G for Hogwarts,

00:15:59.477 --> 00:16:01.310
they were able to get
all these details back

00:16:01.310 --> 00:16:03.290
and the name was being
returned in one of them.

00:16:03.290 --> 00:16:04.414
Very, very straightforward.

00:16:04.414 --> 00:16:08.010
Very simple code for
lazy programmers like me.

00:16:08.010 --> 00:16:10.300
So next is the PlacePicker.

00:16:10.300 --> 00:16:12.630
So now, for example,
I'm in a location

00:16:12.630 --> 00:16:15.090
and I'm walking around in
downtown-- this is Rome,

00:16:15.090 --> 00:16:15.820
I believe.

00:16:15.820 --> 00:16:18.030
So if I'm walking
around in downtown Rome

00:16:18.030 --> 00:16:20.210
and I know that there
are places around me,

00:16:20.210 --> 00:16:21.790
wouldn't it be nice
if I had, like,

00:16:21.790 --> 00:16:23.650
an app that I could
take out and I can start

00:16:23.650 --> 00:16:25.260
looking at all these places?

00:16:25.260 --> 00:16:28.220
And it's, like, highlighting
interesting things for me

00:16:28.220 --> 00:16:30.460
from cafes to tourist sites?

00:16:30.460 --> 00:16:32.130
And as I move around
and I touch on them

00:16:32.130 --> 00:16:34.400
and I get the details
back about it?

00:16:34.400 --> 00:16:37.870
And if I play it, we
can see this in action.

00:16:37.870 --> 00:16:38.570
There we go.

00:16:38.570 --> 00:16:41.130
So, like, I'm moving around and
I see, oh, look, this place.

00:16:41.130 --> 00:16:42.740
It's updating my location.

00:16:42.740 --> 00:16:45.090
It's finding things
that are around me.

00:16:45.090 --> 00:16:47.120
I'm able to drop the
pin on some of these

00:16:47.120 --> 00:16:49.710
and find out interesting
details about it.

00:16:49.710 --> 00:16:52.000
Or I can find, like, the
places that are near me.

00:16:52.000 --> 00:16:54.070
You'll see the list
at the bottom updates

00:16:54.070 --> 00:16:55.960
what's available around there.

00:16:55.960 --> 00:16:58.950
I pick some of those places,
and I get details about that.

00:16:58.950 --> 00:17:00.460
And I can do all
of this and I can

00:17:00.460 --> 00:17:03.130
get all of this
functionality out of the box

00:17:03.130 --> 00:17:04.940
by writing very,
very little code.

00:17:04.940 --> 00:17:07.210
So let's look at the code.

00:17:07.210 --> 00:17:09.660
Looks very similar to the
previous slide, right?

00:17:09.660 --> 00:17:12.589
You know, in Android I'm
going to start an activity,

00:17:12.589 --> 00:17:15.910
and this activity is going
to be a PlacePicker activity.

00:17:15.910 --> 00:17:17.890
And whenever in Android
you start an activity,

00:17:17.890 --> 00:17:19.930
the user has done
something, all of that

00:17:19.930 --> 00:17:22.990
functionality that you saw is
built into that PlacePicker

00:17:22.990 --> 00:17:23.950
activity.

00:17:23.950 --> 00:17:26.339
And when I get a callback
from that and the data,

00:17:26.339 --> 00:17:29.550
then I can cast
that into a place.

00:17:29.550 --> 00:17:31.882
And that place object then
has all the properties

00:17:31.882 --> 00:17:33.340
and all the methods
that will allow

00:17:33.340 --> 00:17:35.730
me to pull information
about that place

00:17:35.730 --> 00:17:37.500
and light up my app with them.

00:17:37.500 --> 00:17:40.210
Maybe my app is showing
menus, or maybe my app

00:17:40.210 --> 00:17:41.980
is showing photos or
those kind of things,

00:17:41.980 --> 00:17:44.170
and all that data is going
to be available there.

00:17:44.170 --> 00:17:47.560
All I had to do as a developer
was use the PlacePicker

00:17:47.560 --> 00:17:50.380
activity, launch a PlacePicker
activity, catch the callback,

00:17:50.380 --> 00:17:51.850
back, parse the data.

00:17:51.850 --> 00:17:55.210
And in iOS very, very similar;
very, very straightforward.

00:17:55.210 --> 00:17:59.190
There is an object called a GMS
PlacePicker config in the SDK--

00:17:59.190 --> 00:17:59.840
sorry.

00:17:59.840 --> 00:18:02.980
And the PlacePicker config
is used to configure details

00:18:02.980 --> 00:18:06.660
about my place, and then I
launch a GMS PlacePicker object

00:18:06.660 --> 00:18:08.440
passing that configuration.

00:18:08.440 --> 00:18:10.799
And that configuration might
be-- you saw in my example

00:18:10.799 --> 00:18:12.840
I was in Rome-- the
configuration would be, like,

00:18:12.840 --> 00:18:13.870
location about Rome.

00:18:13.870 --> 00:18:15.030
That type of thing.

00:18:15.030 --> 00:18:16.770
I will launch my
PlacePicker, and then

00:18:16.770 --> 00:18:19.850
I get a callback from that, and
the callback, as you can see,

00:18:19.850 --> 00:18:22.000
has a GMS place object.

00:18:22.000 --> 00:18:23.840
And that GMS place
object, again,

00:18:23.840 --> 00:18:26.940
has all those properties
that I can parse for name,

00:18:26.940 --> 00:18:29.980
address, all those goodies.

00:18:29.980 --> 00:18:33.190
So I'm the lazy one,
he's the hardworking one.

00:18:33.190 --> 00:18:35.240
So we're going to move
on to the next layer,

00:18:35.240 --> 00:18:37.890
and that's, like, when we start
moving deeper into integration

00:18:37.890 --> 00:18:40.940
and we start moving deeper into
using mapping functionality

00:18:40.940 --> 00:18:41.960
in our applications.

00:18:41.960 --> 00:18:43.209
And, Ankur, can you--

00:18:43.209 --> 00:18:44.000
ANKUR KOTWAL: Sure.

00:18:44.000 --> 00:18:44.790
LAURENCE MORONEY: Take it away.

00:18:44.790 --> 00:18:45.940
ANKUR KOTWAL: So as you
can see, the journey

00:18:45.940 --> 00:18:47.920
that we've been
taking you on so far

00:18:47.920 --> 00:18:50.430
is about getting you
started with the Maps APIs

00:18:50.430 --> 00:18:53.460
with little effort and adding
little bits of user experience

00:18:53.460 --> 00:18:54.160
to your app.

00:18:54.160 --> 00:18:55.910
And now we're starting
to get to the point

00:18:55.910 --> 00:18:59.090
where you really want
some more customizability

00:18:59.090 --> 00:19:02.920
and you want that flexibility
to really tailor the experience.

00:19:02.920 --> 00:19:07.206
No pun intended for his
Taylor Swift comment earlier.

00:19:07.206 --> 00:19:09.080
LAURENCE MORONEY: You
can tailor it in Swift.

00:19:09.080 --> 00:19:10.550
ANKUR KOTWAL: Yes, you can.

00:19:10.550 --> 00:19:13.270
So I'm going to start off by
talking about the JS Maps API

00:19:13.270 --> 00:19:14.210
v3.

00:19:14.210 --> 00:19:16.650
So this screenshot
here is actually

00:19:16.650 --> 00:19:18.745
from an app we just
recently wrote.

00:19:18.745 --> 00:19:22.280
And for those of you
that are here at I/O,

00:19:22.280 --> 00:19:24.120
please go check out
the Geo Sandbox,

00:19:24.120 --> 00:19:27.450
because what we did was
built a bus tracker.

00:19:27.450 --> 00:19:29.340
So if you took any
of the Google buses

00:19:29.340 --> 00:19:31.600
to get to and from
I/O this year,

00:19:31.600 --> 00:19:34.200
you'll notice that there were
some QR codes on the window

00:19:34.200 --> 00:19:36.340
and you could actually
track your journey.

00:19:36.340 --> 00:19:39.050
And here we're using
the Maps API v3

00:19:39.050 --> 00:19:42.270
to provide an experience that
you can see is very customized.

00:19:42.270 --> 00:19:46.270
We're using styled maps to
use a color scheme that's

00:19:46.270 --> 00:19:49.350
actually matching the
theme of I/O for the year.

00:19:49.350 --> 00:19:51.460
But we also have custom markers.

00:19:51.460 --> 00:19:54.030
We've used polylines
at different points,

00:19:54.030 --> 00:19:56.330
and actually we've integrated
other APIs as well,

00:19:56.330 --> 00:19:58.840
which I will talk about
a little bit later.

00:19:58.840 --> 00:20:00.132
Things like the directions API.

00:20:00.132 --> 00:20:01.923
LAURENCE MORONEY: I
really like how the map

00:20:01.923 --> 00:20:04.365
itself fades into the
background so that you can focus

00:20:04.365 --> 00:20:05.490
on what's important, right?

00:20:05.490 --> 00:20:07.280
The bus stops and where
the buses are now.

00:20:07.280 --> 00:20:08.530
That they really pop.

00:20:08.530 --> 00:20:09.530
ANKUR KOTWAL: Exactly.

00:20:09.530 --> 00:20:12.780
And it's this API that's
taking you beyond just

00:20:12.780 --> 00:20:14.650
dropping a map in your app.

00:20:14.650 --> 00:20:17.910
It's really styling
the experience

00:20:17.910 --> 00:20:20.440
to match whatever else
you're building around it,

00:20:20.440 --> 00:20:26.710
because the map may only be
a part of your app or site.

00:20:26.710 --> 00:20:30.360
On Android, we also
offer a similar API.

00:20:30.360 --> 00:20:32.160
And where Laurence
has had his chance

00:20:32.160 --> 00:20:35.100
to tell you what his
favorite API is, which was?

00:20:35.100 --> 00:20:36.810
LAURENCE MORONEY: Street View.

00:20:36.810 --> 00:20:38.439
Anybody else love Street View?

00:20:38.439 --> 00:20:40.480
ANKUR KOTWAL: Only a few
people love Street View.

00:20:43.190 --> 00:20:45.500
For me, my favorite
API is actually

00:20:45.500 --> 00:20:49.350
a subset of the Android and
iOS APIs, and it's the camera.

00:20:49.350 --> 00:20:51.760
So here you can
see a top-down map.

00:20:51.760 --> 00:20:53.340
You're used to seeing it before.

00:20:53.340 --> 00:20:55.040
You've seen it many times.

00:20:55.040 --> 00:20:59.260
But on Android and iOS, we give
you really, really good control

00:20:59.260 --> 00:20:59.890
of that camera.

00:20:59.890 --> 00:21:01.510
So have a look at
this video here,

00:21:01.510 --> 00:21:03.790
and you'll start to see
that what we're doing

00:21:03.790 --> 00:21:06.280
is really changing the
position of the camera.

00:21:06.280 --> 00:21:08.006
And this is downtown LA.

00:21:08.006 --> 00:21:09.630
And now that we've
zoomed in far enough

00:21:09.630 --> 00:21:12.980
and changed our
angles of view, you'll

00:21:12.980 --> 00:21:14.880
see those 3D buildings pop up.

00:21:14.880 --> 00:21:17.230
This feels like a
real place, right?

00:21:17.230 --> 00:21:18.636
It's not that top-down map.

00:21:18.636 --> 00:21:20.010
In fact, if you
think about maps,

00:21:20.010 --> 00:21:21.990
we've been using them
for hundreds of years

00:21:21.990 --> 00:21:23.380
and they've always
been top-down.

00:21:23.380 --> 00:21:27.360
In the digital age we get
to provide such amazing user

00:21:27.360 --> 00:21:29.480
experiences.

00:21:29.480 --> 00:21:31.980
And so, to me, this is
my favorite part of it,

00:21:31.980 --> 00:21:34.600
because when I build an
app with a map in it,

00:21:34.600 --> 00:21:38.180
I really want the user to
feel like they're there.

00:21:38.180 --> 00:21:41.240
And you can actually
achieve this sort of effect

00:21:41.240 --> 00:21:43.220
with, again, very little code.

00:21:43.220 --> 00:21:45.080
Here's the Android code.

00:21:45.080 --> 00:21:49.240
We create a camera
position using the builder.

00:21:49.240 --> 00:21:53.290
Bearing will basically help
us rotate as to which degree

00:21:53.290 --> 00:21:54.440
we're facing.

00:21:54.440 --> 00:21:57.290
Target is obviously the
location that we're looking at.

00:21:57.290 --> 00:21:59.700
But it's Tilt that makes
the big difference to me.

00:21:59.700 --> 00:22:02.830
So Tilt basically helps
us move our camera

00:22:02.830 --> 00:22:05.680
and face it in-- and
offer some depth.

00:22:05.680 --> 00:22:08.500
And that's how you're starting
to see more of the horizon.

00:22:08.500 --> 00:22:11.160
And that's really, to
me, the magic value

00:22:11.160 --> 00:22:13.540
that made that sort of
experience in that last demo

00:22:13.540 --> 00:22:14.330
possible.

00:22:14.330 --> 00:22:16.780
And, of course, Zoom Level
brings you in or further out,

00:22:16.780 --> 00:22:18.820
as Laurence described.

00:22:18.820 --> 00:22:22.740
But you'll notice that as we
were moving in downtown LA

00:22:22.740 --> 00:22:26.287
from point to point, the camera
was smoothly moving there.

00:22:26.287 --> 00:22:28.370
And that's because we
weren't calling Move Camera,

00:22:28.370 --> 00:22:30.110
we were calling Animate Camera.

00:22:30.110 --> 00:22:32.130
And the nice thing
about Animate Camera

00:22:32.130 --> 00:22:35.960
is that when you pass in a
new camera position to it,

00:22:35.960 --> 00:22:38.030
it will work out what
the difference is

00:22:38.030 --> 00:22:41.120
between the current viewport
and the target viewport

00:22:41.120 --> 00:22:43.120
and it will animate
nicely there.

00:22:43.120 --> 00:22:44.760
It'll animate each
of those values

00:22:44.760 --> 00:22:48.540
that you see up there with
the Camera Position Builder.

00:22:48.540 --> 00:22:50.070
So please do use it.

00:22:50.070 --> 00:22:54.360
It's a great way to provide good
navigation through your apps.

00:22:54.360 --> 00:22:57.850
Of course, with iOS,
you are able to achieve

00:22:57.850 --> 00:22:59.380
a similar type of effect.

00:22:59.380 --> 00:23:03.170
Here we've zoomed in far enough
that, again, we have those 3D

00:23:03.170 --> 00:23:06.030
buildings, we're able
to zoom in further

00:23:06.030 --> 00:23:07.620
and interact with it, and so on.

00:23:07.620 --> 00:23:10.230
And so this, to me,
is really those maps

00:23:10.230 --> 00:23:14.310
coming alive and providing
that customizable experience

00:23:14.310 --> 00:23:17.030
that I talked about earlier.

00:23:17.030 --> 00:23:20.580
The code for iOS is, again
very, very similar to Android.

00:23:20.580 --> 00:23:22.960
We have this GMS
Camera Position Object.

00:23:22.960 --> 00:23:25.790
We're able to pass in a
bunch of parameters to it.

00:23:25.790 --> 00:23:28.950
Here our Tilt is actually
called Viewing Angle,

00:23:28.950 --> 00:23:30.700
but we're able to
customize that, too.

00:23:30.700 --> 00:23:33.572
And then we pass it in to
get a map view out of it.

00:23:33.572 --> 00:23:35.030
LAURENCE MORONEY:
We iOS developers

00:23:35.030 --> 00:23:37.942
are a bit more literal.

00:23:37.942 --> 00:23:40.400
ANKUR KOTWAL: You like lots of
characters in your parameter

00:23:40.400 --> 00:23:40.960
names.

00:23:40.960 --> 00:23:42.959
LAURENCE MORONEY: We've
got beautiful keyboards.

00:23:42.959 --> 00:23:45.300
We like to type on them.

00:23:45.300 --> 00:23:49.040
ANKUR KOTWAL: So moving
right along, Lawrence.

00:23:49.040 --> 00:23:51.540
Another thing that you might
want to be doing with your maps

00:23:51.540 --> 00:23:53.248
is that you want to
put markers on there,

00:23:53.248 --> 00:23:55.970
but, like, if you look
at this example here,

00:23:55.970 --> 00:23:57.700
we have some
restaurants in Rome,

00:23:57.700 --> 00:24:00.320
and here I actually did a
search for "Italian restaurants

00:24:00.320 --> 00:24:00.872
in Rome."

00:24:00.872 --> 00:24:02.580
It turns out there's
quite a few of them.

00:24:02.580 --> 00:24:05.719
I was shocked.

00:24:05.719 --> 00:24:07.510
This is not a great
user experience, right?

00:24:07.510 --> 00:24:10.210
Like, you want your users to
be able to explore and discover

00:24:10.210 --> 00:24:13.350
restaurants, but putting in
a thousand markers on a map,

00:24:13.350 --> 00:24:15.470
it's not much fun for anybody.

00:24:15.470 --> 00:24:17.360
So instead, I'm
going to show you

00:24:17.360 --> 00:24:20.470
marker clustering, which we
provide with a library called

00:24:20.470 --> 00:24:21.790
Android Maps Util.

00:24:21.790 --> 00:24:24.650
And you'll see as we zoom,
those numeric markers

00:24:24.650 --> 00:24:27.860
start to split and more
markers come out of it.

00:24:27.860 --> 00:24:29.420
And then when we
zoom, these markers

00:24:29.420 --> 00:24:31.105
come together and
form into clusters.

00:24:33.770 --> 00:24:35.420
It's actually much,
much nicer to be

00:24:35.420 --> 00:24:37.700
able to see this kind
of zoomed out view

00:24:37.700 --> 00:24:40.480
where you know where there's
lots and lots of markers

00:24:40.480 --> 00:24:41.130
around.

00:24:41.130 --> 00:24:42.930
And it's very obvious to users.

00:24:42.930 --> 00:24:44.710
LAURENCE MORONEY: And it's
great for perf was well, right?

00:24:44.710 --> 00:24:45.120
ANKUR KOTWAL: Yeah.

00:24:45.120 --> 00:24:46.121
Performance, absolutely.

00:24:46.121 --> 00:24:47.661
LAURENCE MORONEY:
Like, in this view,

00:24:47.661 --> 00:24:49.540
instead of seeing 200
pins and tracking them

00:24:49.540 --> 00:24:51.820
as you pan the map around,
you're seeing one blob.

00:24:51.820 --> 00:24:52.861
ANKUR KOTWAL: Absolutely.

00:24:52.861 --> 00:24:54.480
The cool thing about
marker clustering

00:24:54.480 --> 00:24:57.670
is that implementing
it often results

00:24:57.670 --> 00:25:00.490
in less code than when you're
managing your markers yourself.

00:25:00.490 --> 00:25:02.760
So let's have a
quick look at that.

00:25:02.760 --> 00:25:05.570
As I mentioned, we have this
Android Maps Utils Library.

00:25:05.570 --> 00:25:09.350
So in our Gradle configuration,
we just add that library in.

00:25:09.350 --> 00:25:12.150
And then we have to go and
implement this interface called

00:25:12.150 --> 00:25:13.310
ClusterItem.

00:25:13.310 --> 00:25:15.470
So in our case, we had
a list of restaurants,

00:25:15.470 --> 00:25:17.320
and we would have had,
like, a Java object

00:25:17.320 --> 00:25:19.290
that was the restaurant itself.

00:25:19.290 --> 00:25:22.900
We just implement this interface
that provides this method

00:25:22.900 --> 00:25:25.970
getPosition, and it just returns
this latitude and longitude.

00:25:25.970 --> 00:25:28.210
So you're probably already
tracking this data anyway,

00:25:28.210 --> 00:25:30.380
just add that
interface, take out

00:25:30.380 --> 00:25:35.710
all of your own marker code, and
instantiate a Cluster Manager.

00:25:35.710 --> 00:25:38.400
You're associating the
Cluster Manager to the map,

00:25:38.400 --> 00:25:42.000
and you're also telling the
map that you want the Cluster

00:25:42.000 --> 00:25:47.440
Manager to get these callbacks
whenever the viewpoint changes,

00:25:47.440 --> 00:25:50.120
or if the user is clicking
any of these markers.

00:25:50.120 --> 00:25:52.330
So that it's able
to manage, you know,

00:25:52.330 --> 00:25:55.760
like as the Zoom Levels change
or the viewport changes,

00:25:55.760 --> 00:25:58.760
it's able to work out what needs
to be done with your markers.

00:25:58.760 --> 00:26:01.270
And then you just give
your Cluster Manager

00:26:01.270 --> 00:26:02.970
those data items.

00:26:02.970 --> 00:26:04.510
In our case, they
were restaurants.

00:26:04.510 --> 00:26:07.800
So you're just passing in
an object that implements

00:26:07.800 --> 00:26:09.150
that interface, and that's it.

00:26:09.150 --> 00:26:10.795
It'll manage the rest for you.

00:26:10.795 --> 00:26:14.340
You'll get that experience with
just these few lines of code.

00:26:14.340 --> 00:26:16.470
It's pretty amazing.

00:26:16.470 --> 00:26:18.810
But, of course,
Marker Clustering

00:26:18.810 --> 00:26:21.820
isn't the only way to deal
with lots and lots of markers.

00:26:21.820 --> 00:26:23.810
The other one is heat maps.

00:26:23.810 --> 00:26:26.400
So here what we've done
is kind of tried to see,

00:26:26.400 --> 00:26:29.580
in Rome again, where
those restaurants are.

00:26:29.580 --> 00:26:32.130
Because if you think about it,
where there's more restaurants

00:26:32.130 --> 00:26:34.362
are really where the
more crowded areas are.

00:26:34.362 --> 00:26:36.070
It's where more tourists
are going to be,

00:26:36.070 --> 00:26:37.990
and if you are a tourist,
it's probably where

00:26:37.990 --> 00:26:39.680
all the attractions are, right?

00:26:39.680 --> 00:26:43.200
So here, if we have a look at
the demo again, as we zoom in,

00:26:43.200 --> 00:26:45.610
it's generating new heat maps.

00:26:45.610 --> 00:26:48.280
Those heat maps start to
split up as we zoom in,

00:26:48.280 --> 00:26:50.340
because, again, we're
starting to see the density

00:26:50.340 --> 00:26:53.170
of these various restaurants.

00:26:53.170 --> 00:26:55.760
And it just, like,
results in a-- I mean,

00:26:55.760 --> 00:26:57.640
this is-- I clearly
am not a designer

00:26:57.640 --> 00:26:59.860
because I've been told
my choice of colors

00:26:59.860 --> 00:27:03.570
wasn't quite the best, but
it's totally customizable.

00:27:03.570 --> 00:27:07.020
I intentionally went with this
sort of stand-out set of colors

00:27:07.020 --> 00:27:09.535
to show you that you can
customize that gradient that's

00:27:09.535 --> 00:27:10.620
shown there.

00:27:10.620 --> 00:27:13.100
And the code for this
is similar to what

00:27:13.100 --> 00:27:15.200
we saw for Marker Clustering.

00:27:15.200 --> 00:27:18.890
Add a library, the same
Android Maps Utils Library,

00:27:18.890 --> 00:27:20.330
but this time
you're instantiating

00:27:20.330 --> 00:27:24.080
a HeatMapTileProvider, and
you're associating your data

00:27:24.080 --> 00:27:25.400
items with it.

00:27:25.400 --> 00:27:27.600
And then you're telling
the map that my tile

00:27:27.600 --> 00:27:31.360
overlay will be provided by
that Heat Map Tile Provider.

00:27:31.360 --> 00:27:32.525
That's it.

00:27:32.525 --> 00:27:34.400
You don't need to do
anything more than that.

00:27:34.400 --> 00:27:37.060
It will manage the rest for you.

00:27:37.060 --> 00:27:38.870
So that's pretty
cool, and that's

00:27:38.870 --> 00:27:40.460
some of the
customization that you

00:27:40.460 --> 00:27:43.950
get at that integration layer.

00:27:43.950 --> 00:27:46.600
But many of us developers
are like, you know what?

00:27:46.600 --> 00:27:49.900
I don't want you to manage any
of the visualizations for me.

00:27:49.900 --> 00:27:51.200
I know what I'm doing.

00:27:51.200 --> 00:27:53.640
I just want the raw
data, and I will

00:27:53.640 --> 00:27:55.090
be able to put it on a map.

00:27:55.090 --> 00:27:59.250
So orchestration is really
about you wanting that raw data

00:27:59.250 --> 00:28:01.120
and taking full control.

00:28:01.120 --> 00:28:04.460
So let's have a look at some
of the APIs that enable that.

00:28:04.460 --> 00:28:07.200
And it really starts off
with the web services

00:28:07.200 --> 00:28:10.090
that we provide.

00:28:10.090 --> 00:28:12.570
I'm going to talk about the
Directions API to start with.

00:28:12.570 --> 00:28:16.340
So remember I mentioned that bus
tracker that we built earlier?

00:28:16.340 --> 00:28:17.850
That bus tracker,
what it's doing

00:28:17.850 --> 00:28:21.350
is that we stuck an Android
device on each of those buses,

00:28:21.350 --> 00:28:23.450
and it's reporting its
location to a Firebase

00:28:23.450 --> 00:28:24.720
real-time database.

00:28:24.720 --> 00:28:27.690
And then our web app is
consuming those locations.

00:28:27.690 --> 00:28:29.750
We know where the
buses are going to go,

00:28:29.750 --> 00:28:32.890
and we're feeding it in
to the Directions API

00:28:32.890 --> 00:28:36.180
to give all the attendees
at I/O accurate times

00:28:36.180 --> 00:28:38.940
as to how long it's going to
take for you to get to I/O

00:28:38.940 --> 00:28:41.480
or get back to your
hotel from I/O.

00:28:41.480 --> 00:28:44.410
And buy "accurate times," we're
taking into account things

00:28:44.410 --> 00:28:47.260
like the traffic conditions, the
real time traffic conditions.

00:28:47.260 --> 00:28:49.470
And for buses that are
not taking off till later

00:28:49.470 --> 00:28:51.220
in the day, we're
using a feature

00:28:51.220 --> 00:28:53.330
that we call Predictive
Travel Times.

00:28:53.330 --> 00:28:57.460
So we're able to forecast what
the traffic conditions are

00:28:57.460 --> 00:29:01.680
likely to be like when you
leave maybe this afternoon

00:29:01.680 --> 00:29:04.680
to go to the airport, to
go back to your homes.

00:29:04.680 --> 00:29:08.160
So the Directions API actually
gives you tons and tons

00:29:08.160 --> 00:29:09.780
of great functionality.

00:29:09.780 --> 00:29:13.130
And actually, in terms
of your own apps,

00:29:13.130 --> 00:29:16.240
if you're a fitness app and
it's about running or cycling,

00:29:16.240 --> 00:29:18.000
we can give you
walking directions,

00:29:18.000 --> 00:29:20.090
we can give you
cycling directions,

00:29:20.090 --> 00:29:23.370
we can give you public
transport directions as well.

00:29:23.370 --> 00:29:24.990
You can also customize
your waypoints.

00:29:24.990 --> 00:29:27.400
So maybe you're getting
from point A to point B,

00:29:27.400 --> 00:29:29.650
but you have to make
some stops along the way.

00:29:29.650 --> 00:29:32.620
So imagine you're building
a logistics type app,

00:29:32.620 --> 00:29:34.920
asset tracking type
app, waypoints really,

00:29:34.920 --> 00:29:36.880
really help you there.

00:29:36.880 --> 00:29:39.460
So Directions API is a great
way to get that information,

00:29:39.460 --> 00:29:42.160
and you can get it
back as JSON or XML

00:29:42.160 --> 00:29:45.550
and then pause it and
display it on a Google Map

00:29:45.550 --> 00:29:47.575
whether it's on the
web, Android, or iOS.

00:29:50.300 --> 00:29:54.120
Laurence mentioned the
Places API, Autocomplete,

00:29:54.120 --> 00:29:55.820
and PlacePicker earlier on.

00:29:55.820 --> 00:29:58.400
We actually have a web
service for this as well.

00:29:58.400 --> 00:30:00.010
And don't worry too
much if you can't

00:30:00.010 --> 00:30:01.330
read the text on the left.

00:30:01.330 --> 00:30:06.080
The idea is that with
just a fairly short URL,

00:30:06.080 --> 00:30:09.450
we're able to give you a ton
of information about the places

00:30:09.450 --> 00:30:11.000
that meet that criteria.

00:30:11.000 --> 00:30:13.280
So here we've just asked
for restaurants in Sydney.

00:30:13.280 --> 00:30:15.130
And you can start
to see that we are

00:30:15.130 --> 00:30:16.610
getting a lot of information.

00:30:16.610 --> 00:30:20.500
It's paginated as well, so
you'll get a few hits at a time

00:30:20.500 --> 00:30:24.410
and you can request the
next batch as you go.

00:30:24.410 --> 00:30:26.600
Places API is really,
really amazing

00:30:26.600 --> 00:30:28.870
because we don't think
of our location in terms

00:30:28.870 --> 00:30:30.490
of latitudes and longitudes.

00:30:30.490 --> 00:30:32.520
As Laurence said,
we mostly don't even

00:30:32.520 --> 00:30:35.282
think of our location
in terms of an address.

00:30:35.282 --> 00:30:36.740
We use an address
when we're trying

00:30:36.740 --> 00:30:39.620
to get somewhere specific,
somewhere that's unfamiliar.

00:30:39.620 --> 00:30:43.540
But really often we think about
where we are based on its name,

00:30:43.540 --> 00:30:48.670
because as people, we tend to
think of our location by name.

00:30:48.670 --> 00:30:52.940
And the Places API provides
a fantastic set of tools

00:30:52.940 --> 00:30:55.735
to be able to help you bridge
that gap with your users.

00:30:55.735 --> 00:30:57.110
So it's really,
really worthwhile

00:30:57.110 --> 00:31:00.510
looking at this web service.

00:31:00.510 --> 00:31:04.190
On Android and iOS, we also
offer a Native Places API.

00:31:04.190 --> 00:31:07.000
So where you saw earlier we had
Autocomplete in PlacePicker,

00:31:07.000 --> 00:31:08.820
those were predefined
experiences.

00:31:08.820 --> 00:31:11.520
They were widgets that you
could just drop into your app.

00:31:11.520 --> 00:31:15.360
But maybe you want to customize
the look and feel, right?

00:31:15.360 --> 00:31:17.360
You don't have to use
those PlacePickers.

00:31:17.360 --> 00:31:20.530
I highly recommend you do
because it's very little effort

00:31:20.530 --> 00:31:22.300
to use them, but
let's say you have

00:31:22.300 --> 00:31:24.260
a special need where
you need the underlying

00:31:24.260 --> 00:31:26.520
data on those devices.

00:31:26.520 --> 00:31:30.015
So we have these APIs, so
you'll see on Android and iOS

00:31:30.015 --> 00:31:33.800
there they have similar
names, but the top ones,

00:31:33.800 --> 00:31:36.349
getCurrentPlace and
currentPlaceWithCallback,

00:31:36.349 --> 00:31:37.890
they give you the
same functionality.

00:31:37.890 --> 00:31:41.370
They list a number of
places that are around you.

00:31:41.370 --> 00:31:43.870
And so I'm going to show you
this demo on the left-hand side

00:31:43.870 --> 00:31:44.590
here.

00:31:44.590 --> 00:31:47.320
And what it is is that we're
driving along on the freeway,

00:31:47.320 --> 00:31:50.670
and the list at the bottom is
just a list of the place names

00:31:50.670 --> 00:31:52.390
as well as the
value that we return

00:31:52.390 --> 00:31:54.340
to that we call likelihood.

00:31:54.340 --> 00:31:56.870
And you can think of
it like a probability.

00:31:56.870 --> 00:31:59.206
What is the probability that
the user is at that place?

00:31:59.206 --> 00:32:01.080
So let me show you what
that demo looks like.

00:32:01.080 --> 00:32:02.430
It's really quick.

00:32:02.430 --> 00:32:04.570
And particularly, look
at that first item.

00:32:04.570 --> 00:32:06.540
You'll see the
probability values

00:32:06.540 --> 00:32:09.040
of that one are changing while
the others are sort of moving

00:32:09.040 --> 00:32:09.702
up and down.

00:32:09.702 --> 00:32:10.660
So have a look at that.

00:32:10.660 --> 00:32:13.140
It's a very short demo.

00:32:13.140 --> 00:32:15.480
So as we're going
along this freeway,

00:32:15.480 --> 00:32:17.530
the device is using
all of its sensors.

00:32:17.530 --> 00:32:22.470
It's using GPS, it's using Wi-Fi
scans, where you have beacons,

00:32:22.470 --> 00:32:26.920
it's able to use BLE beacons--
Bluetooth, sorry-- beacons

00:32:26.920 --> 00:32:29.380
to give your location
quite accurately.

00:32:29.380 --> 00:32:32.110
But we're able to put other
smarts in there as well.

00:32:32.110 --> 00:32:34.840
Are you really going to
be at that coffee shop

00:32:34.840 --> 00:32:38.380
at 1:00 AM when that coffee
shop closed at 9:00 PM?

00:32:38.380 --> 00:32:39.380
Unlikely.

00:32:39.380 --> 00:32:41.290
And we're able to put
those sorts of smarts

00:32:41.290 --> 00:32:44.920
in in determining the
user's current place,

00:32:44.920 --> 00:32:48.300
because we have that set of
data in the Places Database.

00:32:48.300 --> 00:32:51.670
And we've used machine
learning to really tune what

00:32:51.670 --> 00:32:54.220
those likely values are.

00:32:54.220 --> 00:32:56.950
So suddenly with just,
again, these few APIs, you're

00:32:56.950 --> 00:32:59.490
able to get very
accurate information

00:32:59.490 --> 00:33:02.860
about where the user is and
then present them with options.

00:33:02.860 --> 00:33:05.630
Maybe your app is something
that helps the users explore

00:33:05.630 --> 00:33:09.180
their surroundings, and so
getCurrentPlace is a great way

00:33:09.180 --> 00:33:10.802
to show, here are restaurants.

00:33:10.802 --> 00:33:12.010
Here are tourist attractions.

00:33:12.010 --> 00:33:14.630
Maybe when we were in Rome.

00:33:14.630 --> 00:33:18.040
And getAutocompletePredictions
is the underlying API

00:33:18.040 --> 00:33:21.080
that we saw that sort of
powers the Autocomplete widget

00:33:21.080 --> 00:33:21.580
earlier.

00:33:21.580 --> 00:33:25.280
So as your user is typing in
their keystrokes, you can say,

00:33:25.280 --> 00:33:27.600
well, what are the Autocomplete
Predictions for this?

00:33:27.600 --> 00:33:29.744
And present them how
you like to your users.

00:33:33.620 --> 00:33:37.030
We love our smartphones, but one
thing that we take for granted

00:33:37.030 --> 00:33:39.050
is actually the
GPS sensor in them.

00:33:39.050 --> 00:33:39.950
We use it a lot.

00:33:39.950 --> 00:33:42.730
We rely on it a lot, but
what you might not realize

00:33:42.730 --> 00:33:47.000
is that the GPS sensors in our
phones are not very accurate.

00:33:47.000 --> 00:33:50.290
So Laurence took a drive
around the Google Sydney office

00:33:50.290 --> 00:33:51.040
here, and he--

00:33:51.040 --> 00:33:53.206
LAURENCE MORONEY: I promise
I was sober, although it

00:33:53.206 --> 00:33:54.742
doesn't look like it.

00:33:54.742 --> 00:33:57.200
ANKUR KOTWAL: He was driving
around our Sydney office here,

00:33:57.200 --> 00:33:59.090
and if you look at
those orange points,

00:33:59.090 --> 00:34:02.110
he was actually in
a car on the road,

00:34:02.110 --> 00:34:04.460
yet the sensor on this
phone is telling us

00:34:04.460 --> 00:34:07.620
that he drove through
a park, on the field,

00:34:07.620 --> 00:34:09.904
and through a casino.

00:34:09.904 --> 00:34:12.320
Now, I've been worried about
Laurence's gambling problems,

00:34:12.320 --> 00:34:14.650
but I didn't think he
would do it in a car.

00:34:14.650 --> 00:34:16.290
And I was right.

00:34:16.290 --> 00:34:18.810
And so what we find is that
this was a common problem.

00:34:18.810 --> 00:34:21.040
Developers came to
us and said, look,

00:34:21.040 --> 00:34:24.010
while I know that my
users are in a vehicle,

00:34:24.010 --> 00:34:26.989
we know they're on a road,
this GPS tends to be noisy.

00:34:26.989 --> 00:34:29.570
We know that we need
a straight line,

00:34:29.570 --> 00:34:32.060
but the GPS points
tend to be more zigzag.

00:34:32.060 --> 00:34:33.770
Can you help us out?

00:34:33.770 --> 00:34:35.850
The Roads API helps
you achieve this.

00:34:35.850 --> 00:34:38.639
So now what we do is we
take these orange points,

00:34:38.639 --> 00:34:41.360
we throw it into the Roads
API, and we plot them here

00:34:41.360 --> 00:34:44.219
as green points, because that's
what the Roads API's giving us

00:34:44.219 --> 00:34:45.540
back.

00:34:45.540 --> 00:34:47.489
And you'll see now these
points are actually

00:34:47.489 --> 00:34:49.000
following the road.

00:34:49.000 --> 00:34:50.310
In fact, we can insert.

00:34:50.310 --> 00:34:53.340
With the Roads API, you
may get back more points

00:34:53.340 --> 00:34:55.210
than what you input,
because when you're

00:34:55.210 --> 00:34:59.080
taking curved roads, you want
to have a few more points coming

00:34:59.080 --> 00:35:01.260
through so it's tracking
nicely and you're

00:35:01.260 --> 00:35:02.510
able to plot that well.

00:35:02.510 --> 00:35:04.680
So let's get rid of these
noisy orange points,

00:35:04.680 --> 00:35:06.130
but I wanted to
show both of them

00:35:06.130 --> 00:35:09.690
to show you the
delta between them.

00:35:09.690 --> 00:35:12.770
And here, this is
more-- this is exactly

00:35:12.770 --> 00:35:15.000
what Laurence's route was.

00:35:15.000 --> 00:35:16.850
So the Roads API's
a good way for you

00:35:16.850 --> 00:35:22.940
to be able to snap your
drivers to their roads.

00:35:22.940 --> 00:35:26.210
Now, we have tons and
tons of web services.

00:35:26.210 --> 00:35:28.027
We've just covered
a few of them.

00:35:28.027 --> 00:35:30.360
But the thing is, we want you
to be able to consume them

00:35:30.360 --> 00:35:34.900
in the languages that you use
on your server-side components.

00:35:34.900 --> 00:35:37.670
Let me forewarn you
that with web services,

00:35:37.670 --> 00:35:40.490
you should not consume them
directly in the mobile apps.

00:35:40.490 --> 00:35:43.120
They're designed to be
consumed server-side.

00:35:43.120 --> 00:35:45.380
They're protected by
an API key, and you

00:35:45.380 --> 00:35:47.270
don't want that API
key being distributed

00:35:47.270 --> 00:35:48.240
in your mobile apps.

00:35:48.240 --> 00:35:50.760
So please do proxy them
through the web servers,

00:35:50.760 --> 00:35:53.700
through your cloud servers.

00:35:53.700 --> 00:35:55.210
But we have some
client libraries

00:35:55.210 --> 00:35:58.660
that we produce for Go,
for Java, and for Python

00:35:58.660 --> 00:36:02.220
so that you can consume them
in whichever of these languages

00:36:02.220 --> 00:36:03.280
that you prefer.

00:36:03.280 --> 00:36:05.102
If your favorite
languages aren't on here,

00:36:05.102 --> 00:36:07.310
let us know what you'd like
and we can take that back

00:36:07.310 --> 00:36:09.630
to the team.

00:36:09.630 --> 00:36:13.260
Before we wrap up, I want
to thank you for being here

00:36:13.260 --> 00:36:15.870
and I want to show you something
new that we're kicking off

00:36:15.870 --> 00:36:18.762
today, or just recently.

00:36:18.762 --> 00:36:20.220
We've had some
feedback in the past

00:36:20.220 --> 00:36:22.178
that you would love to
know more about what are

00:36:22.178 --> 00:36:23.600
the things we're working on.

00:36:23.600 --> 00:36:27.790
So we're now announcing
a new beta program.

00:36:27.790 --> 00:36:30.470
So if you could go to
this link and sign up,

00:36:30.470 --> 00:36:32.700
you have the opportunity
to join a community

00:36:32.700 --> 00:36:35.300
of other like-minded developers.

00:36:35.300 --> 00:36:36.920
And we will reach
out to you as we're

00:36:36.920 --> 00:36:40.450
launching betas of new
and upcoming features

00:36:40.450 --> 00:36:41.757
of the Maps API.

00:36:41.757 --> 00:36:43.590
And this is, of course,
across all our apps,

00:36:43.590 --> 00:36:45.390
all of our platforms.

00:36:45.390 --> 00:36:47.800
But the best part of
this is that they're

00:36:47.800 --> 00:36:48.920
pre-launch features.

00:36:48.920 --> 00:36:53.110
So your feedback helps
us to shape the product.

00:36:53.110 --> 00:36:55.210
We want to take that
feedback on board,

00:36:55.210 --> 00:36:58.680
we want you to tell us which
use cases it's meeting well,

00:36:58.680 --> 00:37:00.850
which use cases that
we're maybe not meeting

00:37:00.850 --> 00:37:04.740
as well, we want you to give us
feedback on the quality of it,

00:37:04.740 --> 00:37:06.460
and in turn, we're
able to share with you

00:37:06.460 --> 00:37:08.100
a bit more about our roadmap.

00:37:08.100 --> 00:37:11.500
So as of today-- so if
you're watching on YouTube,

00:37:11.500 --> 00:37:14.650
as of today at I/O,
the form is open.

00:37:14.650 --> 00:37:16.210
But we will be
taking developers,

00:37:16.210 --> 00:37:18.100
accepting developers,
in batches,

00:37:18.100 --> 00:37:21.450
so if you find at some point
that that form is closed,

00:37:21.450 --> 00:37:22.110
don't worry.

00:37:22.110 --> 00:37:26.422
We will open it up over time
as new APIs are being launched.

00:37:29.630 --> 00:37:33.530
I hope today that you've had a
good look at the various APIs

00:37:33.530 --> 00:37:37.480
that we offer, and you can
see your own apps and sites

00:37:37.480 --> 00:37:40.160
slotting into one or
more of these layers

00:37:40.160 --> 00:37:42.570
and seeing which of
these layers are most

00:37:42.570 --> 00:37:45.780
relevant to your development.

00:37:45.780 --> 00:37:46.900
Thank you very much.

00:37:46.900 --> 00:37:48.066
LAURENCE MORONEY: Thank you.

00:37:48.066 --> 00:37:49.034
[APPLAUSE]

00:37:49.034 --> 00:37:53.742
[MUSIC PLAYING]

