WEBVTT
Kind: captions
Language: en

00:00:08.160 --> 00:00:08.640
CHET HAASE: Hi.

00:00:08.640 --> 00:00:12.240
I'm Chet Haase, an engineer on
the Android team at Google.

00:00:12.240 --> 00:00:16.560
Today I'm going to show a demo
that's a little bit more about

00:00:16.560 --> 00:00:18.540
motivating some of the
techniques I've talked about

00:00:18.540 --> 00:00:20.350
in previous DevBytes episodes.

00:00:20.350 --> 00:00:23.350
I'll walk through some code, but
it's going to be a pretty

00:00:23.350 --> 00:00:25.590
blistering pace because
frankly, a lot of the

00:00:25.590 --> 00:00:28.160
techniques in the code are ones
that we've already talked

00:00:28.160 --> 00:00:29.400
about on the show.

00:00:29.400 --> 00:00:32.350
What I wanted to do with this
application is instead

00:00:32.350 --> 00:00:33.990
motivate some of the techniques
that I've talked

00:00:33.990 --> 00:00:36.330
about, specifically around
cartoon animation.

00:00:36.330 --> 00:00:38.820
So it's a little bit hard when
you click on a button and you

00:00:38.820 --> 00:00:41.630
see it fall down to the bottom
of the screen and squish at

00:00:41.630 --> 00:00:43.600
the bottom, to understand why
you would want to do that in

00:00:43.600 --> 00:00:45.350
your application.

00:00:45.350 --> 00:00:47.700
And frankly, most applications
probably

00:00:47.700 --> 00:00:48.630
shouldn't do that maybe.

00:00:48.630 --> 00:00:50.550
It would be a little disturbing
or silly.

00:00:50.550 --> 00:00:52.910
But there are some applications
that really want

00:00:52.910 --> 00:00:54.580
to be more engaging
to the user.

00:00:54.580 --> 00:00:58.410
And it's worth understanding a
type of application that might

00:00:58.410 --> 00:01:00.920
want to use that to be more
playful and engaging in

00:01:00.920 --> 00:01:02.810
general, more interactive
with the user.

00:01:02.810 --> 00:01:05.440
I wanted to show how to use some
of these techniques that

00:01:05.440 --> 00:01:09.230
we've talked about in previous
episodes, as well as in the

00:01:09.230 --> 00:01:13.380
talk at Google I/O 2013 called
"A Moving Experience," to show

00:01:13.380 --> 00:01:15.330
how you want to use some of
these cartoon animation

00:01:15.330 --> 00:01:18.270
techniques, and put them all
together in some larger

00:01:18.270 --> 00:01:21.960
example to give that more
engaging feeling to the user.

00:01:21.960 --> 00:01:24.680
We're going to be showing things
about anticipation,

00:01:24.680 --> 00:01:28.330
about overshoot, about
exaggeration, and in general,

00:01:28.330 --> 00:01:31.790
just being a little bit more
fun, engaging, and playful.

00:01:31.790 --> 00:01:34.530
So let's take a look
at the demo.

00:01:34.530 --> 00:01:34.940
Here we go.

00:01:34.940 --> 00:01:37.670
We get into the application, and
we've got this button that

00:01:37.670 --> 00:01:38.890
is bouncing.

00:01:38.890 --> 00:01:40.400
It's ready to go.

00:01:40.400 --> 00:01:41.980
It wants us to engage.

00:01:41.980 --> 00:01:43.610
Even though we're not
interacting with the

00:01:43.610 --> 00:01:45.980
application, that's not a reason
why the application

00:01:45.980 --> 00:01:48.310
can't be interacting with us.

00:01:48.310 --> 00:01:50.110
It's trying to attract our
attention here, and then

00:01:50.110 --> 00:01:51.270
eventually we'll fall for it.

00:01:51.270 --> 00:01:52.570
We'll press on the button.

00:01:52.570 --> 00:01:55.010
This is a technique that we
showed in some earlier

00:01:55.010 --> 00:01:58.340
episodes about anticipation,
where when we click on the

00:01:58.340 --> 00:02:00.350
button, maybe it doesn't just
have to change color.

00:02:00.350 --> 00:02:02.680
Maybe it can actually physically
interact with the

00:02:02.680 --> 00:02:04.940
user, and actually press
in or press out.

00:02:04.940 --> 00:02:07.080
To show that there's a physical
interaction with the

00:02:07.080 --> 00:02:10.229
button actually going down as
the user presses on it.

00:02:10.229 --> 00:02:11.560
So we press the button
and then when we

00:02:11.560 --> 00:02:13.600
let go, watch carefully.

00:02:13.600 --> 00:02:16.080
It's going to launch out and
then just keep going.

00:02:16.080 --> 00:02:18.280
It launches out toward
the user.

00:02:18.280 --> 00:02:20.750
And then we get into this
other activity.

00:02:20.750 --> 00:02:22.350
And this is actually a
separate activity.

00:02:22.350 --> 00:02:24.910
Again, this is a technique I
talked about in a previous

00:02:24.910 --> 00:02:27.000
episode about custom activity
animations.

00:02:27.000 --> 00:02:29.320
We're not running a window
animation here, which has a

00:02:29.320 --> 00:02:32.330
standard way of running where
things scale and fade in.

00:02:32.330 --> 00:02:35.030
Instead, we're disabling that,
and we're running a custom

00:02:35.030 --> 00:02:37.680
activity animation by
automatically launching the

00:02:37.680 --> 00:02:39.860
sub activity with a
white background.

00:02:39.860 --> 00:02:42.320
So it's fully opaque, but it's
the same opaque background as

00:02:42.320 --> 00:02:43.380
the one we came from.

00:02:43.380 --> 00:02:45.620
But first, we basically animate
the stuff to get out

00:02:45.620 --> 00:02:48.220
of the way, and then the sub
activity launches with that

00:02:48.220 --> 00:02:49.420
same plain white background.

00:02:49.420 --> 00:02:51.570
And then the contents in
that activity animate.

00:02:51.570 --> 00:02:52.950
They scale in.

00:02:52.950 --> 00:02:55.430
So we have this continuous
motion from the previous

00:02:55.430 --> 00:02:58.610
activity launching, fading, and
going past the user, and

00:02:58.610 --> 00:03:00.620
then the new content
coming in with this

00:03:00.620 --> 00:03:02.520
custom activity animation.

00:03:02.520 --> 00:03:04.500
Now we're on the first screen
here, and we have some things

00:03:04.500 --> 00:03:06.280
that look vaguely like buttons
down at the bottom.

00:03:06.280 --> 00:03:08.200
And did you notice that
they popped in?

00:03:08.200 --> 00:03:11.230
Everything here is about being
more interactive and playful

00:03:11.230 --> 00:03:12.950
and alive, in general.

00:03:12.950 --> 00:03:14.000
We can click on one of these.

00:03:14.000 --> 00:03:16.700
We can say, OK-- and it's
very simple too, right?

00:03:16.700 --> 00:03:17.910
It's just asking
for your name.

00:03:17.910 --> 00:03:19.030
Not a lot going on here.

00:03:19.030 --> 00:03:21.520
Maybe the game is intended
for kids, right?

00:03:21.520 --> 00:03:23.040
So you want to make
it as simple and

00:03:23.040 --> 00:03:24.060
streamlined as possible.

00:03:24.060 --> 00:03:25.190
So we say, yep.

00:03:25.190 --> 00:03:26.280
I'm going to play--

00:03:26.280 --> 00:03:28.200
I'm the returning player
called Pat.

00:03:28.200 --> 00:03:29.510
OK, what difficulty
are going to play?

00:03:29.510 --> 00:03:32.020
I am awesome at this game, I'm
going to be mega hard.

00:03:32.020 --> 00:03:34.390
Now, notice when I press on the
buttons again it's that

00:03:34.390 --> 00:03:35.360
same interactive thing.

00:03:35.360 --> 00:03:37.350
I press on the button, the
button actually goes into the

00:03:37.350 --> 00:03:39.500
screen, away from the user.

00:03:39.500 --> 00:03:43.150
And then comes back out, it
springs and overshoots,

00:03:43.150 --> 00:03:47.120
showing that interactive model
of engaging the user through

00:03:47.120 --> 00:03:51.380
actually interacting through
the physical presses and

00:03:51.380 --> 00:03:53.050
releases on the screen.

00:03:53.050 --> 00:03:55.040
As I release the button, you're
going to see the same

00:03:55.040 --> 00:03:57.020
thing you did on the previous
screen, which is the button is

00:03:57.020 --> 00:03:59.690
going to launch out at the user
and then animate into

00:03:59.690 --> 00:04:01.240
place at the top
of the screen.

00:04:01.240 --> 00:04:04.510
You notice another element on
all these screens is the text

00:04:04.510 --> 00:04:05.300
is going to animate out.

00:04:05.300 --> 00:04:07.470
We have this flow of the
application going

00:04:07.470 --> 00:04:09.160
from right to left.

00:04:09.160 --> 00:04:11.800
And we do this with a little
bit of anticipation on the

00:04:11.800 --> 00:04:14.420
text, again, a technique that
we saw on a previous demo.

00:04:14.420 --> 00:04:16.740
Where the text will actually
skew to the right and then

00:04:16.740 --> 00:04:17.579
shift to the left.

00:04:17.579 --> 00:04:20.000
This is like traditional cartoon
animations where

00:04:20.000 --> 00:04:20.730
someone's going to run.

00:04:20.730 --> 00:04:22.370
But before they run, they're
going to rear

00:04:22.370 --> 00:04:23.210
back and get ready.

00:04:23.210 --> 00:04:25.420
Which really helps the user
understand exactly what's

00:04:25.420 --> 00:04:26.680
about to happen.

00:04:26.680 --> 00:04:28.420
Not just during the action, but

00:04:28.420 --> 00:04:30.010
actually before the action.

00:04:30.010 --> 00:04:31.200
We anticipate the text.

00:04:31.200 --> 00:04:33.280
It's going to anticipate
the animation.

00:04:33.280 --> 00:04:35.420
And then it's going to shift
quickly off the screen.

00:04:35.420 --> 00:04:37.490
And then finally, of course,
you want to ask for the

00:04:37.490 --> 00:04:38.890
child's credit card number.

00:04:38.890 --> 00:04:42.640
Because that's where the
real money is, right?

00:04:42.640 --> 00:04:43.310
That's it.

00:04:43.310 --> 00:04:44.490
We can step through it again.

00:04:44.490 --> 00:04:45.280
You see the button.

00:04:45.280 --> 00:04:47.710
You see the engaging,
playful thing.

00:04:47.710 --> 00:04:49.860
You launch into the
sub activity here,

00:04:49.860 --> 00:04:50.680
pressing the buttons.

00:04:50.680 --> 00:04:53.780
The buttons are interacting,
the text is giving all this

00:04:53.780 --> 00:04:54.760
playful stuff.

00:04:54.760 --> 00:04:56.400
Let's take a very quick
look at the code.

00:04:56.400 --> 00:04:57.850
There's a lot of code here.

00:04:57.850 --> 00:05:00.050
But again, the techniques are
similar to techniques that we

00:05:00.050 --> 00:05:02.150
saw in these previous
DevBytes episodes.

00:05:02.150 --> 00:05:04.720
So it's not worth belaboring
these too much.

00:05:04.720 --> 00:05:05.510
We have Toon Game.

00:05:05.510 --> 00:05:07.240
This is the main activity.

00:05:07.240 --> 00:05:10.670
We're listening for touches
on the button.

00:05:10.670 --> 00:05:16.080
And when we get one, we're going
to animate the scale so

00:05:16.080 --> 00:05:18.920
the button scales into the
screen away from the user.

00:05:18.920 --> 00:05:25.590
And when they release, we're
going to trap that here, and

00:05:25.590 --> 00:05:28.380
we're going to animate back to
the regular scale thing.

00:05:28.380 --> 00:05:30.660
But then we're also going to
perform the click operation,

00:05:30.660 --> 00:05:34.100
which is going to go into
the subactivity.

00:05:34.100 --> 00:05:38.250
That is down here.

00:05:38.250 --> 00:05:40.600
When we play, we're
going to animate.

00:05:40.600 --> 00:05:42.720
We're going to keep scaling
the button out

00:05:42.720 --> 00:05:44.000
from where it was.

00:05:44.000 --> 00:05:45.900
It's going to scale, and it's
also going to fade out at the

00:05:45.900 --> 00:05:48.480
same time and come out
toward the user.

00:05:48.480 --> 00:05:53.497
And then when it's done, we're
going to launch the sub

00:05:53.497 --> 00:05:54.970
activity, this new intent.

00:05:54.970 --> 00:05:56.150
We're going to start
the activity.

00:05:56.150 --> 00:05:58.150
We're going to override the
pending transition.

00:05:58.150 --> 00:05:59.680
I don't want window
animations here.

00:05:59.680 --> 00:06:02.260
I'm already doing my custom
activity animation.

00:06:02.260 --> 00:06:04.690
You get the window animations
out of the way with overriding

00:06:04.690 --> 00:06:07.130
pending transitions with zero.

00:06:07.130 --> 00:06:09.090
And then it launches the sub
activity, which is this

00:06:09.090 --> 00:06:11.740
PlayerSetupActiviy here.

00:06:11.740 --> 00:06:15.980
Player Setup Activity has
various elements.

00:06:15.980 --> 00:06:17.640
A lot of code in here,
not worth going into.

00:06:17.640 --> 00:06:20.170
Again, same techniques all
over the place in here.

00:06:20.170 --> 00:06:21.700
We have the button
press listeners.

00:06:21.700 --> 00:06:23.210
When you click on one of
these things, it's

00:06:23.210 --> 00:06:24.060
going to scale in.

00:06:24.060 --> 00:06:25.640
When you release, it's
going to scale back

00:06:25.640 --> 00:06:28.740
out to where it was.

00:06:28.740 --> 00:06:31.810
And then when a button is
clicked, it's going to animate

00:06:31.810 --> 00:06:34.460
into place up at the
top of the screen.

00:06:34.460 --> 00:06:36.800
I didn't simply want to pop that
view out from where it

00:06:36.800 --> 00:06:38.970
was because the layout would
have been affected by that.

00:06:38.970 --> 00:06:42.980
Instead, I'm going to set that
invisible ability there in its

00:06:42.980 --> 00:06:44.150
previous state.

00:06:44.150 --> 00:06:46.480
And then I'm going to create
a copy of that button and

00:06:46.480 --> 00:06:48.880
animate that in a parent
container.

00:06:48.880 --> 00:06:51.930
As I move that in this virtual
curve, scaling out and then

00:06:51.930 --> 00:06:55.250
scaling back down into place at
the top of the screen where

00:06:55.250 --> 00:06:57.630
it's going to live.

00:06:57.630 --> 00:07:00.970
Then the text skewing
animation--

00:07:00.970 --> 00:07:04.220
again, we've seen this
in previous demos.

00:07:04.220 --> 00:07:07.400
That happens in this custom
text view sub class I have

00:07:07.400 --> 00:07:09.310
here, called skewable
text view.

00:07:09.310 --> 00:07:11.500
We're going to animate the skew
property of the text as

00:07:11.500 --> 00:07:15.010
it skews to the right and then
shifts over to the left.

00:07:15.010 --> 00:07:18.275
And that happens by simply
animating the skew value,

00:07:18.275 --> 00:07:21.270
invalidating appropriately,
also invalidate the parent

00:07:21.270 --> 00:07:22.700
around the area of the skew.

00:07:22.700 --> 00:07:27.930
So we actually erase and redraw
the appropriate area.

00:07:27.930 --> 00:07:30.230
And that's the utility method
for doing that.

00:07:30.230 --> 00:07:31.360
And that's about it.

00:07:31.360 --> 00:07:32.390
There's a lot of code in here.

00:07:32.390 --> 00:07:36.130
But again, we went over the
actual techniques of the code

00:07:36.130 --> 00:07:38.590
in detail in the previous
DevBytes episodes.

00:07:38.590 --> 00:07:41.360
So be sure to check those out,
as well as the code for this

00:07:41.360 --> 00:07:41.930
application.

00:07:41.930 --> 00:07:44.920
It should be available at a link
on this YouTube video.

00:07:44.920 --> 00:07:46.170
Thanks.

