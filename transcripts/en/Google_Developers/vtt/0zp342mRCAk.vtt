WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:12.532
[MUSIC PLAYING]

00:00:12.532 --> 00:00:15.840
MALE SPEAKER 1: Shanghai GDG
is a very interesting

00:00:15.840 --> 00:00:16.515
developer community.

00:00:16.515 --> 00:00:17.640
FEMALE SPEAKER 1: I'm
glad somebody

00:00:17.640 --> 00:00:18.470
has asked this question.

00:00:18.470 --> 00:00:20.056
MALE SPEAKER 2: This is where
the magic happens.

00:00:20.056 --> 00:00:21.664
FEMALE SPEAKER 1: This is
primarily a question and

00:00:21.664 --> 00:00:23.200
answer show so if any
of you out there

00:00:23.200 --> 00:00:24.450
would like to ask questions.

00:00:29.490 --> 00:00:30.580
VIC FRYZEL: Hello, everyone.

00:00:30.580 --> 00:00:31.970
Welcome back to Google
Developers Live.

00:00:31.970 --> 00:00:33.630
I'm Vic Fryzel, and this
is Nicolas Garnier.

00:00:33.630 --> 00:00:34.680
NICOLAS GARNIER: Hello.

00:00:34.680 --> 00:00:36.200
VIC FRYZEL: Today we're going to
be talking about the Google

00:00:36.200 --> 00:00:39.640
Drive SDK again, specifically
around how to get started

00:00:39.640 --> 00:00:42.800
using Java and the Drive SDK.

00:00:42.800 --> 00:00:45.840
So what we're going to do today
is walk through the Java

00:00:45.840 --> 00:00:49.510
Quickstart example that we
provide in the Drive SDK

00:00:49.510 --> 00:00:50.665
documentation.

00:00:50.665 --> 00:00:51.770
And we're going to
show that on the

00:00:51.770 --> 00:00:53.160
screen here in a minute.

00:00:53.160 --> 00:00:57.100
Essentially, what the
example does is

00:00:57.100 --> 00:00:58.415
upload a file to Drive.

00:00:58.415 --> 00:01:01.860
It's a basic command-line
example that you can run by

00:01:01.860 --> 00:01:05.239
downloading the Java client
library, setting your client

00:01:05.239 --> 00:01:07.995
ID in secret, and then
just running it.

00:01:07.995 --> 00:01:08.810
NICOLAS GARNIER: Yep,
that's right.

00:01:08.810 --> 00:01:10.300
VIC FRYZEL: So we're going to
walk through how to do that.

00:01:10.300 --> 00:01:12.830
So first, let's take a look
at the documentation.

00:01:12.830 --> 00:01:15.120
Can you pull this up here?

00:01:15.120 --> 00:01:19.110
So here's the Drive SDK
homepage, but we need to pull

00:01:19.110 --> 00:01:21.600
up the Java Quickstart
example.

00:01:21.600 --> 00:01:24.840
So we're going to click Get
Started Now, and then this is

00:01:24.840 --> 00:01:27.750
going to take us to the
Quickstart page.

00:01:27.750 --> 00:01:30.260
We're having a bit of network
latency at the moment.

00:01:30.260 --> 00:01:31.660
OK, so here we go.

00:01:31.660 --> 00:01:34.350
This is going to walk you
through in about five minutes

00:01:34.350 --> 00:01:37.690
how to set up the Java
Quickstart example.

00:01:37.690 --> 00:01:41.550
So you can see here that Java's
highlighted already.

00:01:41.550 --> 00:01:44.520
But all of the different
languages have to walk through

00:01:44.520 --> 00:01:45.920
these first steps.

00:01:45.920 --> 00:01:48.250
So do you just want to
talk about these?

00:01:48.250 --> 00:01:50.260
NICOLAS GARNIER: Yeah, I'll
do the first steps, Vic.

00:01:50.260 --> 00:01:54.270
So the very first step is to
create an API project in the

00:01:54.270 --> 00:01:55.520
Google API console.

00:01:58.020 --> 00:01:59.440
I'll show that in a minute.

00:01:59.440 --> 00:02:03.960
Then basically enable the Drive
API and create your

00:02:03.960 --> 00:02:05.960
OAuth 2 credentials.

00:02:05.960 --> 00:02:08.699
That will allow you to basically
tell us who you are

00:02:08.699 --> 00:02:12.500
as a developer, register your
application, and where we'll

00:02:12.500 --> 00:02:15.430
give you a quota, and you'll
be able to use OAuth 2

00:02:15.430 --> 00:02:18.100
basically in your application.

00:02:18.100 --> 00:02:20.490
So the first step you need to
do here is the Google APIs

00:02:20.490 --> 00:02:24.230
console, which you can access
through the URL code

00:02:24.230 --> 00:02:27.000
google.com/api/console.

00:02:27.000 --> 00:02:28.560
You need to create
a new project.

00:02:28.560 --> 00:02:30.740
So you go into the little
menu on the top

00:02:30.740 --> 00:02:31.905
here and click Create.

00:02:31.905 --> 00:02:34.230
If you have no project, you'll
have one big button in the

00:02:34.230 --> 00:02:35.300
center of the screen.

00:02:35.300 --> 00:02:38.010
It will say Create a Project.

00:02:38.010 --> 00:02:39.090
You can give it any name.

00:02:39.090 --> 00:02:42.280
I'm just going to
leave that name.

00:02:42.280 --> 00:02:43.550
The project is getting
created.

00:02:47.618 --> 00:02:48.780
Here you go.

00:02:48.780 --> 00:02:52.450
And the second step is to enable
the drive API because

00:02:52.450 --> 00:02:56.520
the API we're going to use with
the OAuth 2 credentials

00:02:56.520 --> 00:02:57.810
that we are going to create.

00:02:57.810 --> 00:03:01.770
If you want to use any other
APIs in your code later on,

00:03:01.770 --> 00:03:05.250
just come here, enable the other
APIs, and your OAuth 2

00:03:05.250 --> 00:03:07.750
credentials will work for
these APIs as well.

00:03:07.750 --> 00:03:12.020
So the first step is to go to
API access here and create an

00:03:12.020 --> 00:03:14.520
OAuth 2 client ID.

00:03:14.520 --> 00:03:17.900
So you have to give another,
again, your product name.

00:03:17.900 --> 00:03:19.320
We're going to go with--

00:03:19.320 --> 00:03:20.180
I don't know--

00:03:20.180 --> 00:03:21.430
I like testproject.

00:03:24.930 --> 00:03:28.240
Then, for this particular
sample, you need to select

00:03:28.240 --> 00:03:30.590
Install application because it's
a command-line tool, so

00:03:30.590 --> 00:03:33.540
it's not a web application.

00:03:33.540 --> 00:03:40.020
It basically means that the
application doesn't really

00:03:40.020 --> 00:03:43.840
have access directly to a
browser and cannot do the

00:03:43.840 --> 00:03:49.390
OAuth 2 full server-side flow
where the application directs

00:03:49.390 --> 00:03:54.530
you to a website and you
get redirected back.

00:03:54.530 --> 00:03:56.980
So you have to choose Install
Application here.

00:03:56.980 --> 00:04:00.230
OK, create a client
ID, and that's it.

00:04:00.230 --> 00:04:02.660
We got our client
ID in secret.

00:04:02.660 --> 00:04:05.460
So let's go back to the steps
you want to follow up.

00:04:05.460 --> 00:04:08.130
VIC FRYZEL: Yeah, so the next
thing Nicolas is going to do

00:04:08.130 --> 00:04:12.390
is download the Google Drive
Java client library.

00:04:12.390 --> 00:04:15.370
So this is essentially a Java
library that allows you to

00:04:15.370 --> 00:04:18.519
easily interact with
Google APIs.

00:04:18.519 --> 00:04:19.769
So this is something
we provide as

00:04:19.769 --> 00:04:20.880
an open source project.

00:04:20.880 --> 00:04:22.660
I think Nicolas already has
it downloaded here.

00:04:22.660 --> 00:04:24.880
NICOLAS GARNIER: Yeah, it's
about, I think, 11 megabytes.

00:04:24.880 --> 00:04:28.680
So just to avoid waiting for the
download, I have the zip

00:04:28.680 --> 00:04:31.940
file here, which I
just unzipped.

00:04:31.940 --> 00:04:33.130
VIC FRYZEL: Yep.

00:04:33.130 --> 00:04:37.210
So it contains just
a bunch of jars.

00:04:37.210 --> 00:04:40.100
And what we're going to do is
add these jars to our class

00:04:40.100 --> 00:04:43.300
path and then download the
actual source code that we're

00:04:43.300 --> 00:04:45.850
going to run, which is just
a short little hop here.

00:04:45.850 --> 00:04:47.850
NICOLAS GARNIER: So this right
here that I have highlighted

00:04:47.850 --> 00:04:52.990
is the contents of Google Drive
classes that you'll need

00:04:52.990 --> 00:04:54.470
to use to access Google Drive.

00:04:54.470 --> 00:04:57.750
That makes it easy for you to
access Google Drive API.

00:04:57.750 --> 00:05:00.410
It contains also the Libs
folder, which contains

00:05:00.410 --> 00:05:03.136
basically our dependencies that
you also need to add in

00:05:03.136 --> 00:05:03.948
the class path.

00:05:03.948 --> 00:05:07.680
VIC FRYZEL: OK, so
lets add these.

00:05:10.380 --> 00:05:14.765
So if you're using an IDE like
Eclipse or IntelliJ, this is

00:05:14.765 --> 00:05:16.060
going to be a little
bit different.

00:05:16.060 --> 00:05:20.810
You should know how to add
JARs to your class path.

00:05:20.810 --> 00:05:24.010
If you don't though, we
actually link in the

00:05:24.010 --> 00:05:28.180
documentation on how to do it
for each individual IDE.

00:05:28.180 --> 00:05:33.270
So here you have the command
all set to run to compile a

00:05:33.270 --> 00:05:38.830
sample, except one step
we didn't show is just

00:05:38.830 --> 00:05:41.190
downloading the source code,
like copying and pasting it

00:05:41.190 --> 00:05:42.900
from the documentation.

00:05:42.900 --> 00:05:44.990
So just show where that
is really quick in the

00:05:44.990 --> 00:05:46.280
documentation.

00:05:46.280 --> 00:05:48.726
NICOLAS GARNIER: That
is-- set of sample.

00:05:48.726 --> 00:05:51.110
VIC FRYZEL: If we just
scroll down here.

00:05:51.110 --> 00:05:52.230
So this is actually
the source code.

00:05:52.230 --> 00:05:53.325
Nicolas--

00:05:53.325 --> 00:05:54.690
NICOLAS GARNIER: Well, I'm going
to actually create the

00:05:54.690 --> 00:05:59.310
file right now using
VI, using VIM.

00:05:59.310 --> 00:06:01.210
So this is the sample
for the project.

00:06:01.210 --> 00:06:01.930
It's very simple.

00:06:01.930 --> 00:06:04.020
It's only one class.

00:06:04.020 --> 00:06:06.045
Inside the template, you're
going to have to enter the

00:06:06.045 --> 00:06:08.060
client ID and the
client secret.

00:06:08.060 --> 00:06:13.670
And then we'll also have to
create an example file, which

00:06:13.670 --> 00:06:17.550
is going to be called
document.text, which is the

00:06:17.550 --> 00:06:20.050
file that's going to be uploaded
to Google Drive using

00:06:20.050 --> 00:06:22.960
that sample using
the Java code.

00:06:22.960 --> 00:06:25.140
So let me just create
that tile.

00:06:35.460 --> 00:06:38.650
Just trying to get
the name right.

00:06:38.650 --> 00:06:44.900
All right, that's it.

00:06:44.900 --> 00:06:46.960
VIC FRYZEL: So like you
mentioned before, the only

00:06:46.960 --> 00:06:48.910
thing we have to do to the
source code now is paste in

00:06:48.910 --> 00:06:50.205
our client ID and secret.

00:06:50.205 --> 00:06:52.700
NICOLAS GARNIER: Yeah, I'm also
going to create, very

00:06:52.700 --> 00:06:56.750
quickly here, the example file,
which is going to be

00:06:56.750 --> 00:06:59.110
documents.text.

00:06:59.110 --> 00:07:01.070
And what do you want
in there, Vic?

00:07:01.070 --> 00:07:02.300
VIC FRYZEL: Hello World.

00:07:02.300 --> 00:07:05.860
NICOLAS GARNIER: Hello
World, for a change.

00:07:05.860 --> 00:07:09.975
All right, that's it.

00:07:09.975 --> 00:07:12.950
VIC FRYZEL: So let's
just go back.

00:07:12.950 --> 00:07:17.170
So here, you can see that we
have two lines where we place

00:07:17.170 --> 00:07:19.600
our client ID and our
client secret.

00:07:19.600 --> 00:07:26.610
These are in the API console
project that we just created.

00:07:26.610 --> 00:07:28.606
NICOLAS GARNIER: So this
is the client ID?

00:07:28.606 --> 00:07:29.856
VIC FRYZEL: Mm-hm.

00:07:36.542 --> 00:07:38.420
NICOLAS GARNIER: And now
the client secret.

00:07:41.270 --> 00:07:42.302
And then I save and quit.

00:07:42.302 --> 00:07:43.628
VIC FRYZEL: Yep.

00:07:43.628 --> 00:07:46.450
OK, and then let's just go back
to the previous command

00:07:46.450 --> 00:07:49.145
where we added all of the
JARs to the class.

00:07:49.145 --> 00:07:52.080
NICOLAS GARNIER: All right, then
what we're going to show

00:07:52.080 --> 00:07:57.700
now is basically simply
compiling that source file

00:07:57.700 --> 00:08:00.070
that we just created
and then running it

00:08:00.070 --> 00:08:02.810
in the command line.

00:08:02.810 --> 00:08:04.990
So I had the commands ready.

00:08:04.990 --> 00:08:08.800
As you can see, we're setting
the class pass correctly,

00:08:08.800 --> 00:08:12.590
including the current folder,
which contains the Google API

00:08:12.590 --> 00:08:16.960
server's drive v2, rev5,
172-bit, a JAR, which

00:08:16.960 --> 00:08:22.820
contains, as I said, the drive
business subjects, basically,

00:08:22.820 --> 00:08:26.365
and the Libs folder, which
contains all our dependencies.

00:08:26.365 --> 00:08:28.596
VIC FRYZEL: Yep.

00:08:28.596 --> 00:08:29.420
NICOLAS GARNIER: All right.

00:08:29.420 --> 00:08:30.430
VIC FRYZEL: So that worked?

00:08:30.430 --> 00:08:31.245
No errors?

00:08:31.245 --> 00:08:32.614
NICOLAS GARNIER: Perfect,
no errors.

00:08:32.614 --> 00:08:34.009
VIC FRYZEL: Now we just
have to run it.

00:08:34.009 --> 00:08:36.750
NICOLAS GARNIER: Now
let's just run it.

00:08:36.750 --> 00:08:41.070
Here is the Java command
to run it.

00:08:41.070 --> 00:08:43.539
All right.

00:08:43.539 --> 00:08:46.440
So now we have to go through the
out-of-band OAuth 2 flow,

00:08:46.440 --> 00:08:47.690
which basically--

00:08:49.440 --> 00:08:50.470
here's basically how it works.

00:08:50.470 --> 00:08:55.460
We are asking the user to go to
that particular URL, which

00:08:55.460 --> 00:09:00.280
we printed on the screen
here, which we're

00:09:00.280 --> 00:09:03.380
going to do right now.

00:09:03.380 --> 00:09:10.930
Then the user is going to say if
he wants to allow access to

00:09:10.930 --> 00:09:14.880
his Google Drive data to the
test project or if he doesn't

00:09:14.880 --> 00:09:17.120
actually want to allow access.

00:09:17.120 --> 00:09:20.940
And here is how the out-of-band
OAuth2 works is,

00:09:20.940 --> 00:09:25.100
we give you the OAuth code here
in the browser, and you

00:09:25.100 --> 00:09:31.110
have to copy paste that
into the application.

00:09:31.110 --> 00:09:35.650
The application is using the
code going through the OAuth

00:09:35.650 --> 00:09:38.320
protocol, exchanging the code
for tokens, then uploading the

00:09:38.320 --> 00:09:39.960
file, and here you go.

00:09:39.960 --> 00:09:40.920
And now we have the file ID.

00:09:40.920 --> 00:09:42.900
The file has been uploaded
to Google Drive.

00:09:42.900 --> 00:09:47.590
So I'm going to go to my
drive and search for--

00:09:47.590 --> 00:09:50.100
let's say, a text file.

00:09:50.100 --> 00:09:53.860
Maybe there's a bit
of a delay.

00:09:53.860 --> 00:09:54.300
What was the name?

00:09:54.300 --> 00:09:54.460
Document--

00:09:54.460 --> 00:09:55.270
VIC FRYZEL: Document.txt.

00:09:55.270 --> 00:09:56.520
NICOLAS GARNIER: --.txt.

00:10:02.210 --> 00:10:03.405
We're facing a bit of trouble.

00:10:03.405 --> 00:10:04.720
VIC FRYZEL: This is unusual.

00:10:04.720 --> 00:10:05.810
NICOLAS GARNIER: This
is unusual.

00:10:05.810 --> 00:10:08.220
Usually the file shows up right
away in your drive.

00:10:08.220 --> 00:10:10.860
So maybe the network
agency that we're

00:10:10.860 --> 00:10:12.690
having are causing this.

00:10:12.690 --> 00:10:14.306
VIC FRYZEL: So refresh.

00:10:14.306 --> 00:10:15.800
NICOLAS GARNIER: Lets just
do a full refresh.

00:10:23.758 --> 00:10:26.785
As you can see we're having
a very slow connection.

00:10:26.785 --> 00:10:28.035
VIC FRYZEL: Yeah.

00:10:36.638 --> 00:10:38.294
NICOLAS GARNIER: All right,
it's not there.

00:10:38.294 --> 00:10:39.500
VIC FRYZEL: You lied.

00:10:39.500 --> 00:10:39.880
NICOLAS GARNIER: I lied.

00:10:39.880 --> 00:10:41.510
I totally lied.

00:10:41.510 --> 00:10:42.515
If you want--

00:10:42.515 --> 00:10:44.410
VIC FRYZEL: Did you use
the right account?

00:10:44.410 --> 00:10:44.850
NICOLAS GARNIER: I did.

00:10:44.850 --> 00:10:46.420
There's only one account.

00:10:46.420 --> 00:10:48.850
So if you want, I'm going
to get the file idea.

00:10:48.850 --> 00:10:52.020
And do you want me to use the
OAuth 2 Playground maybe to

00:10:52.020 --> 00:10:54.970
show the actual file has
been uploaded to Drive?

00:10:54.970 --> 00:10:55.330
We could.

00:10:55.330 --> 00:10:55.820
VIC FRYZEL: Sure.

00:10:55.820 --> 00:10:57.070
NICOLAS GARNIER: Yeah?

00:10:59.250 --> 00:11:02.136
So if you guys know the
OAuth 2 Playground--

00:11:02.136 --> 00:11:03.386
sorry.

00:11:05.540 --> 00:11:07.670
Playground is a tool that allows
you to play around with

00:11:07.670 --> 00:11:09.855
APIs that use the OAuth
2 protocol.

00:11:13.239 --> 00:11:14.820
It lets you go through
your protocol.

00:11:14.820 --> 00:11:21.140
This is the OAuth 2
web server flow.

00:11:23.860 --> 00:11:27.230
We're just enabling the
Playground to access the

00:11:27.230 --> 00:11:30.520
Google Drive API for us on my
accounts, exchanging the code

00:11:30.520 --> 00:11:31.770
for tokens.

00:11:33.950 --> 00:11:38.890
And here is a little convenient
tool to allow you

00:11:38.890 --> 00:11:41.600
to select the right
REST operation.

00:11:41.600 --> 00:11:45.150
And we want to actually
get the file that

00:11:45.150 --> 00:11:47.320
we've uploaded to Drive.

00:11:47.320 --> 00:11:49.040
We can see the file
has been uploaded.

00:11:49.040 --> 00:11:51.350
VIC FRYZEL: Yes, it's
definitely there.

00:11:51.350 --> 00:11:53.440
The title is My Document,
though.

00:11:53.440 --> 00:11:54.730
VIC FRYZEL: Oh, whoops.

00:11:54.730 --> 00:11:56.410
NICOLAS GARNIER: Which is
probably a little issue in our

00:11:56.410 --> 00:11:59.070
Java sample, which we'll
fix later on.

00:11:59.070 --> 00:12:00.520
VIC FRYZEL: Actually, for what
it's worth, I think all of the

00:12:00.520 --> 00:12:01.800
samples are called
My Document.

00:12:01.800 --> 00:12:02.325
NICOLAS GARNIER: Oh, OK.

00:12:02.325 --> 00:12:04.140
VIC FRYZEL: So maybe our search
was just incorrect the

00:12:04.140 --> 00:12:04.750
entire time.

00:12:04.750 --> 00:12:06.121
NICOLAS GARNIER: All right.

00:12:06.121 --> 00:12:07.371
VIC FRYZEL: Whoops.

00:12:09.120 --> 00:12:12.100
NICOLAS GARNIER: We can see the
My Document file has been

00:12:12.100 --> 00:12:12.750
uploaded here.

00:12:12.750 --> 00:12:13.960
VIC FRYZEL: Yeah, good
job, Nicolas

00:12:13.960 --> 00:12:14.710
NICOLAS GARNIER:
Yeah, awesome.

00:12:14.710 --> 00:12:17.670
This totally worked exactly
as expected.

00:12:17.670 --> 00:12:21.540
So I'm just going to
open the file.

00:12:21.540 --> 00:12:23.930
You can see the ID here
on the URL, which is

00:12:23.930 --> 00:12:25.180
with the correct ID.

00:12:29.270 --> 00:12:30.330
VIC FRYZEL: Next time we'll
have better network

00:12:30.330 --> 00:12:30.810
connection.

00:12:30.810 --> 00:12:31.250
NICOLAS GARNIER: Yes.

00:12:31.250 --> 00:12:32.410
VIC FRYZEL: Oh, there we go.

00:12:32.410 --> 00:12:32.655
NICOLAS GARNIER: Now
we can see the

00:12:32.655 --> 00:12:33.110
Hello World file, awesome.

00:12:33.110 --> 00:12:33.401
VIC FRYZEL: Yeah.

00:12:33.401 --> 00:12:33.500
Success.

00:12:33.500 --> 00:12:34.450
NICOLAS GARNIER:
Success, boom.

00:12:34.450 --> 00:12:35.200
VIC FRYZEL: Massive
excitement.

00:12:35.200 --> 00:12:36.922
NICOLAS GARNIER: Yes.

00:12:36.922 --> 00:12:40.100
VIC FRYZEL: So now we can go
through the source code a

00:12:40.100 --> 00:12:41.505
little bit and talk
through, line by

00:12:41.505 --> 00:12:44.330
line, what we're doing.

00:12:44.330 --> 00:12:47.022
NICOLAS GARNIER: OK.

00:12:47.022 --> 00:12:51.190
VIC FRYZEL: So, pretty much
what we start off doing is

00:12:51.190 --> 00:12:52.730
setting up authorization.

00:12:52.730 --> 00:12:55.720
This is something that you
have to do in pretty much

00:12:55.720 --> 00:12:59.350
every interaction you have
with the Drive SDK.

00:12:59.350 --> 00:13:01.730
So authorization varies
language by language.

00:13:01.730 --> 00:13:04.630
But here, we're creating the
Google authorization code flow

00:13:04.630 --> 00:13:07.600
and just giving it
a few parameters.

00:13:07.600 --> 00:13:10.250
Most of these parameters you
don't really ever have to

00:13:10.250 --> 00:13:12.280
modify except for the client
ID and client secret.

00:13:12.280 --> 00:13:14.950
And that's pointed out
pretty directly at

00:13:14.950 --> 00:13:17.740
the top of file there.

00:13:17.740 --> 00:13:21.980
And if you were writing a web
application, you would also

00:13:21.980 --> 00:13:23.030
have to modify the
redirect URI.

00:13:23.030 --> 00:13:24.650
NICOLAS GARNIER: Yeah, you
wouldn't really use this

00:13:24.650 --> 00:13:25.080
out-of-bound flow.

00:13:25.080 --> 00:13:27.560
If you were billing a web app,
you would actually use

00:13:27.560 --> 00:13:30.880
probably the web service flow or
the client side flow, which

00:13:30.880 --> 00:13:34.745
is a flow for JavaScript
application, which includes,

00:13:34.745 --> 00:13:38.840
as I've just shown, using
the OAuth2 Playground.

00:13:38.840 --> 00:13:41.990
Your app would handle the
redirect back and forth to the

00:13:41.990 --> 00:13:46.600
grant page, which makes it way
better for users than having

00:13:46.600 --> 00:13:47.630
to copy paste this URL.

00:13:47.630 --> 00:13:48.380
VIC FRYZEL: Yep.

00:13:48.380 --> 00:13:52.870
So once we set up the
authorization flow, we

00:13:52.870 --> 00:13:58.630
actually initialize it and then
run a request to Google

00:13:58.630 --> 00:14:01.360
to get an authorization URL,
which the user then

00:14:01.360 --> 00:14:02.730
has to browse to.

00:14:02.730 --> 00:14:05.160
And once they browse to that,
that's when they get the

00:14:05.160 --> 00:14:08.070
authorization code and copy
and paste that back to us.

00:14:08.070 --> 00:14:11.690
So you can see here in the next
five lines that we're

00:14:11.690 --> 00:14:12.515
pretty much just--

00:14:12.515 --> 00:14:13.480
NICOLAS GARNIER: This
is all done here.

00:14:13.480 --> 00:14:15.270
VIC FRYZEL: Yeah, getting the
URL, telling the user to

00:14:15.270 --> 00:14:16.690
browse to it, and then clicking
the code back.

00:14:16.690 --> 00:14:21.500
NICOLAS GARNIER: Yeah, so when
the user copy/pastes that code

00:14:21.500 --> 00:14:24.590
back, we take it, and we
exchange it for tokens, so an

00:14:24.590 --> 00:14:26.280
access token and a
refresh token.

00:14:26.280 --> 00:14:28.690
And we get this credential
object here on that line,

00:14:28.690 --> 00:14:32.480
which contains actually the
access token and the refresh

00:14:32.480 --> 00:14:34.380
token that we got back
from Google.

00:14:34.380 --> 00:14:37.780
And then you can use that to
initialize your Drive service.

00:14:37.780 --> 00:14:39.240
That's this line.

00:14:39.240 --> 00:14:41.370
And then, very simply,
it's a few lines.

00:14:41.370 --> 00:14:44.450
You create the file, which
actually correctly has the

00:14:44.450 --> 00:14:45.260
title My Document.

00:14:45.260 --> 00:14:46.080
I'm so sorry.

00:14:46.080 --> 00:14:48.060
I really thought we were
giving the name

00:14:48.060 --> 00:14:50.950
of the actual file.

00:14:50.950 --> 00:14:55.215
So my search was wrong, but the
sample worked as expected.

00:14:57.890 --> 00:15:03.230
And then we simply also read
the actual file itself, the

00:15:03.230 --> 00:15:07.620
content of the actual file,
and then insert the file.

00:15:07.620 --> 00:15:09.010
It's like this one
command line.

00:15:09.010 --> 00:15:11.900
Insert the file to Google Drive,
giving it the metadata

00:15:11.900 --> 00:15:14.220
that we've created here
and the file content.

00:15:14.220 --> 00:15:14.644
VIC FRYZEL: Yep.

00:15:14.644 --> 00:15:18.900
OK, so now that we've walked
through that, we can talk

00:15:18.900 --> 00:15:22.210
about other ways that you might
be able to extend this

00:15:22.210 --> 00:15:25.100
to be more of a realistic
application.

00:15:25.100 --> 00:15:29.210
So there are few things that,
if you were running a real

00:15:29.210 --> 00:15:31.290
command-line application
using the Drive SDK,

00:15:31.290 --> 00:15:32.840
that you should do.

00:15:32.840 --> 00:15:34.540
And not even just a command-line
application, but

00:15:34.540 --> 00:15:38.030
rather a desktop application.

00:15:38.030 --> 00:15:42.100
The out-of-band flow is what you
would use in order to do

00:15:42.100 --> 00:15:43.120
authorization.

00:15:43.120 --> 00:15:45.610
But having the user copy and
paste a link into their

00:15:45.610 --> 00:15:49.590
browser frankly is not a very
good user experience, right?

00:15:49.590 --> 00:15:52.000
And having them copy and paste
the code back to your

00:15:52.000 --> 00:15:55.260
application just doesn't make
any sense to a user.

00:15:55.260 --> 00:16:01.370
So what you should do is fire
up a web server locally.

00:16:01.370 --> 00:16:09.270
And then the redirect URI for
an out-of-band OAuth flow

00:16:09.270 --> 00:16:11.800
redirects the user back
to local host.

00:16:11.800 --> 00:16:13.150
That's a valid redirect URI.

00:16:13.150 --> 00:16:17.640
So here you would redirect the
user back to local host and

00:16:17.640 --> 00:16:23.100
spawn up a web server on their
computer and then receive the

00:16:23.100 --> 00:16:26.570
authorization code
in the request.

00:16:26.570 --> 00:16:29.680
Once your web server receives
that, you would shut the web

00:16:29.680 --> 00:16:32.840
server down, and now you have
the code that's needed.

00:16:32.840 --> 00:16:36.880
So again, those steps are, one,
start up a web server.

00:16:36.880 --> 00:16:40.190
Two, open up the user's browser
for them and send them

00:16:40.190 --> 00:16:41.270
straight to that link.

00:16:41.270 --> 00:16:45.110
When they click Allow Access,
your web server will receive

00:16:45.110 --> 00:16:46.130
the request.

00:16:46.130 --> 00:16:47.855
And then close the browser,
close the web server.

00:16:47.855 --> 00:16:49.070
NICOLAS GARNIER: Or you could
display a message to the user

00:16:49.070 --> 00:16:51.190
like, hey, switch back
to the application.

00:16:51.190 --> 00:16:52.120
we've got the code now.

00:16:52.120 --> 00:16:56.350
You can shut off your browser
and go back to the--

00:16:56.350 --> 00:16:58.140
VIC FRYZEL: Yeah, there are
probably even fancy ways to

00:16:58.140 --> 00:17:00.760
detect that you've received the
grant and then close the

00:17:00.760 --> 00:17:02.350
browser for the user
and just come

00:17:02.350 --> 00:17:04.920
straight back into context.

00:17:04.920 --> 00:17:08.500
So that's what you would do in
a more real-world context.

00:17:08.500 --> 00:17:10.050
We don't do that here because
this is a very

00:17:10.050 --> 00:17:13.339
quick-start-oriented sample.

00:17:13.339 --> 00:17:17.579
Also, if you were writing a real
Drive integration on a

00:17:17.579 --> 00:17:19.099
desktop application, you
would do much more

00:17:19.099 --> 00:17:21.359
than upload, right?

00:17:21.359 --> 00:17:23.430
You would probably at least
download files.

00:17:23.430 --> 00:17:27.410
NICOLAS GARNIER: Yeah, list
files, download content,

00:17:27.410 --> 00:17:30.510
everything you can do through
the Drive API, change the

00:17:30.510 --> 00:17:33.000
sharing of files, search
for files.

00:17:33.000 --> 00:17:35.770
VIC FRYZEL: Yeah, so we list
complete Java samples on how

00:17:35.770 --> 00:17:38.420
to do every single thing in
the API in the reference

00:17:38.420 --> 00:17:43.070
documentation, which is linked
to in the left half of our

00:17:43.070 --> 00:17:43.470
documentation.

00:17:43.470 --> 00:17:45.710
NICOLAS GARNIER: If you're
building also a web

00:17:45.710 --> 00:17:48.380
application and want to use the
server side flow, we have

00:17:48.380 --> 00:17:53.560
a really good sample on our
authorization documentation

00:17:53.560 --> 00:17:54.830
page online.

00:17:54.830 --> 00:17:57.350
So invite you to go
check it out.

00:17:57.350 --> 00:17:58.970
VIC FRYZEL: We call that
sample Dr.Edit.

00:17:58.970 --> 00:18:02.090
It's our flagship web
application sample.

00:18:02.090 --> 00:18:04.910
And we have that in every
language as well.

00:18:04.910 --> 00:18:05.980
So I think that's
pretty much it.

00:18:05.980 --> 00:18:07.366
NICOLAS GARNIER: Yep.

00:18:07.366 --> 00:18:08.530
VIC FRYZEL: Anything else
you'd like to add?

00:18:08.530 --> 00:18:09.350
NICOLAS GARNIER: I think
that's it as well.

00:18:09.350 --> 00:18:09.840
VIC FRYZEL: All right.

00:18:09.840 --> 00:18:11.580
Well, thank you so
much for joining.

00:18:11.580 --> 00:18:13.625
We're super glad to have you.

00:18:13.625 --> 00:18:15.070
I'm Vic Fryzel, and this
is Nicolas Garnier.

00:18:15.070 --> 00:18:15.360
NICOLAS GARNIER: Thank
you, everyone.

00:18:15.360 --> 00:18:16.590
VIC FRYZEL: And we'll
see you next time.

00:18:16.590 --> 00:18:16.740
Bye.

00:18:16.740 --> 00:18:18.720
NICOLAS GARNIER: Bye-bye.

00:18:18.720 --> 00:18:43.400
[MUSIC PLAYING]

