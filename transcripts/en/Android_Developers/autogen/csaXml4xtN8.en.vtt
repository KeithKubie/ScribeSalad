WEBVTT
Kind: captions
Language: en

00:00:04.950 --> 00:00:07.260
 (Steve Cumberton): Good morning 

00:00:07.260 --> 00:00:08.170
 Hi 

00:00:08.170 --> 00:00:11.520
 [clap] 

00:00:11.520 --> 00:00:13.910
 Welcome all of us in our conversation today 

00:00:13.910 --> 00:00:17.250
 About the new Android Developer Tools 

00:00:17.250 --> 00:00:19.800
 It is amazing to see so many developers here 

00:00:19.800 --> 00:00:22.870
 From around the world and in a concert theater 

00:00:22.870 --> 00:00:27.140
 I want you guys to know that this is great for us 

00:00:27.140 --> 00:00:29.000
 I (Steve Cumberton) I'm here today 

00:00:29.000 --> 00:00:31.930
 With amazing Tor Torby and amazing beauty of Eason 

00:00:31.930 --> 00:00:34.710
 We will give you a tour behind the scenes 

00:00:34.710 --> 00:00:35.840
 For Android Studio 

00:00:35.840 --> 00:00:38.540
 And to those who are primarily familiar with you 

00:00:38.540 --> 00:00:41.700
 You noticed that Zaf is not on stage this year 

00:00:41.700 --> 00:00:43.202
 I only answer him 

00:00:43.202 --> 00:00:44.660
 It is on the beach in Hawaii 

00:00:44.660 --> 00:00:47.690
 So hello (Zaf) 

00:00:47.690 --> 00:00:51.130
 When we first started working on Android Studio 

00:00:51.130 --> 00:00:53.650
 We wanted a specialized IDE 

00:00:53.650 --> 00:00:54.650
 Modified specifically for our languages 

00:00:54.650 --> 00:00:59.273
 That's why we chose IntelliJ, the original Android product 

00:01:00.190 --> 00:01:03.590
 Now Android Studio has created tremendous momentum 

00:01:03.590 --> 00:01:05.660
 In a short period 

00:01:05.660 --> 00:01:08.070
 Among the things we announced yesterday 

00:01:08.070 --> 00:01:14.380
 Is that now 92% of the top 125 applications and games 

00:01:14.380 --> 00:01:17.960
 You are using Android Studio 

00:01:17.960 --> 00:01:21.180
 Since we announced it here at the Google Developers Conference of three years 

00:01:21.180 --> 00:01:23.930
 You may remember that Tor was the show 

00:01:23.930 --> 00:01:28.200
 We launched it 131 times along with preview and beta versions 

00:01:28.200 --> 00:01:31.150
 And stable issuances 

00:01:31.150 --> 00:01:34.030
 What this reflects is indeed a large part 

00:01:34.030 --> 00:01:36.260
 From our drive to success 

00:01:36.260 --> 00:01:39.010
 We have a community of astoundingly committed developers 

00:01:39.010 --> 00:01:41.490
 Try all our previous versions 

00:01:41.490 --> 00:01:43.660
 They provide us with wonderful comments 

00:01:43.660 --> 00:01:45.680
 This is what makes the team focus 

00:01:45.680 --> 00:01:48.110
 It helps us to work very quickly 

00:01:48.110 --> 00:01:51.570
 We've been thinking a lot over the past year about what we can do next 

00:01:51.570 --> 00:01:53.950
 In order to accelerate productivity 

00:01:53.950 --> 00:01:54.958
 Improve your life 

00:01:57.980 --> 00:01:59.690
 If of those in the audience 

00:01:59.690 --> 00:02:02.430
 Who does not know Android Studio well 

00:02:02.430 --> 00:02:06.146
 I will take you on a stormy tour of 2016 

00:02:06.146 --> 00:02:07.270
 And what we have achieved so far 

00:02:07.270 --> 00:02:08.669
 In about 60 seconds 

00:02:08.669 --> 00:02:10.630
 So I will put everyone on the same page 

00:02:10.630 --> 00:02:15.100
 So we keep talking about version 2.2 and the way ahead 

00:02:15.100 --> 00:02:18.810
 If this year we launched version 2.0 

00:02:18.810 --> 00:02:22.400
 Which focused on speed with instant playback rendering 

00:02:22.400 --> 00:02:23.700
 And simulators 

00:02:23.700 --> 00:02:28.990
 We also launched the user interface for the new simulation and corrective graphics processing unit 

00:02:30.380 --> 00:02:34.390
 Creating sub search links, checking and much more 

00:02:34.390 --> 00:02:39.130
 And then for a short time version 2.1 that we created in collaboration with Android N 

00:02:39.130 --> 00:02:42.760
 Which gives you support for all Android N features and APIs 

00:02:42.760 --> 00:02:44.280
 It gives you simulators 

00:02:44.280 --> 00:02:46.930
 For you to check out Android N and Jack Translator 

00:02:46.930 --> 00:02:48.980
 To be able to experience Java 8 support 

00:02:48.980 --> 00:02:53.310
 Specifically in version 2.1 we speed up immediate operation 

00:02:53.310 --> 00:02:55.810
 We did this by changing the December step 

00:02:55.810 --> 00:03:00.480
 To coincide with this process, it gave us amazing developments in speed 

00:03:00.480 --> 00:03:05.460
 If all this leads us to version 2.2 

00:03:05.460 --> 00:03:10.450
 Which focuses on speed and self-monitoring technology system, analysis, media and Android system support 

00:03:10.450 --> 00:03:13.220
 One of the great things for us at the A / O conference 

00:03:13.220 --> 00:03:16.280
 Is that the public of developers, if we do 

00:03:16.280 --> 00:03:20.170
 Is a 25-minute signature of our conversation today 

00:03:20.170 --> 00:03:24.740
 To give you a direct view of each feature of the experimental version 2.2 

00:03:24.740 --> 00:03:27.174
 Which you can use as well 

00:03:27.174 --> 00:03:30.492
 [Cheers and applause] 

00:03:31.920 --> 00:03:35.180
 For reminder only, this is a trial version 

00:03:35.180 --> 00:03:37.500
 So expect the quality of the trial version 

00:03:37.500 --> 00:03:39.750
 So we do the natural thing that we always do 

00:03:39.750 --> 00:03:41.220
 Over the coming weeks 

00:03:41.220 --> 00:03:43.170
 We will stabilize it as we do 

00:03:43.170 --> 00:03:45.450
 While we pass the beta system and stability 

00:03:45.450 --> 00:03:48.370
 After that, we will restore him and (Jamal) 

00:03:48.370 --> 00:03:50.340
 We will inform you of the design 

00:03:50.340 --> 00:03:54.120
 Development, structure and testing to give you a consistent summary 

00:03:54.120 --> 00:03:57.020
 With screen shots as we will take you behind the scenes 

00:03:57.020 --> 00:04:00.090
 To talk more about how the features work and why 

00:04:00.090 --> 00:04:03.150
 So, in order to take you on a tour of version 2.2 

00:04:03.150 --> 00:04:06.650
 Please welcome (Tor Nurbi) 

00:04:06.650 --> 00:04:07.602
 thank you 

00:04:07.602 --> 00:04:10.300
 [clap] 

00:04:11.620 --> 00:04:13.200
 Tour Norby: Well 

00:04:13.200 --> 00:04:15.660
 Can you see the screen? 

00:04:15.660 --> 00:04:17.310
 Display 

00:04:17.310 --> 00:04:19.320
 Okay 

00:04:19.320 --> 00:04:20.490
 Can we get the projector? 

00:04:23.530 --> 00:04:24.141
 Thanks 

00:04:24.141 --> 00:04:24.640
 Okay 

00:04:24.640 --> 00:04:26.290
 If I start something 

00:04:26.290 --> 00:04:28.410
 Very small and simple, but I think you will like it 

00:04:28.410 --> 00:04:31.380
 If we launch a lot of components of the software development toolkit yesterday 

00:04:31.380 --> 00:04:33.760
 And install Android Studio 2.2 

00:04:33.760 --> 00:04:37.790
 And go to install them, they noticed how we became 

00:04:37.790 --> 00:04:38.560
 Button for background now 

00:04:38.560 --> 00:04:41.182
 [clap] 

00:04:41.182 --> 00:04:43.240
 So you can mark up 

00:04:43.240 --> 00:04:44.850
 During your installation of the latest products 

00:04:44.850 --> 00:04:47.370
 If we spent the past year 

00:04:47.370 --> 00:04:48.660
 We focus on making versions faster 

00:04:48.660 --> 00:04:50.719
 We know that this is a great concern for you 

00:04:50.719 --> 00:04:53.010
 So I want to show you where we've come in now 

00:04:54.220 --> 00:04:58.350
 If this is an I / O conference application running to the right of the screen 

00:04:58.350 --> 00:05:01.570
 I can go ahead and put some code here and run it 

00:05:01.570 --> 00:05:03.400
 And when I make this change 

00:05:03.400 --> 00:05:06.460
 You can see that in a second 

00:05:06.460 --> 00:05:07.660
 This change reflects the device 

00:05:07.660 --> 00:05:10.380
 It takes about 15 seconds without instant playback 

00:05:10.380 --> 00:05:12.630
 I can also make some non-matching changes 

00:05:12.630 --> 00:05:16.020
 For example, by extracting this in the medium 

00:05:16.020 --> 00:05:21.215
 This change takes a second or two to run 

00:05:22.270 --> 00:05:25.530
 After the show, Steve will talk more 

00:05:25.530 --> 00:05:27.620
 About what we will do in Instant Play in version 2.2 and 2.3 

00:05:30.675 --> 00:05:32.050
 So one of the things we should have done 

00:05:32.050 --> 00:05:34.340
 Is to determine what happens inside the APK files 

00:05:36.120 --> 00:05:39.820
 To do this, we created a new feature, the APK Analyzer 

00:05:39.820 --> 00:05:44.732
 I can open any APK or in my project 

00:05:44.732 --> 00:05:46.940
 Now I can dive into what happens in the file 

00:05:46.940 --> 00:05:49.420
 For example, I can see what is inside the asset file 

00:05:49.420 --> 00:05:52.330
 Or resource file, or in this case 

00:05:52.330 --> 00:05:53.190
 Instant playback 

00:05:53.190 --> 00:05:57.270
 Repack the app 

00:05:57.270 --> 00:06:00.210
 So let me withdraw a real production application 

00:06:00.210 --> 00:06:02.340
 Chrome APK 

00:06:02.340 --> 00:06:04.610
 The purpose of this tool there are two objectives 

00:06:04.610 --> 00:06:06.845
 The first is to be able to see the download size 

00:06:06.845 --> 00:06:08.470
 In some markets, it is important 

00:06:08.470 --> 00:06:10.970
 The loading size is small and the installation size is small 

00:06:10.970 --> 00:06:14.010
 If this allows you to actually see what's inside your app 

00:06:14.010 --> 00:06:16.430
 And focus on what you can get rid of 

00:06:16.430 --> 00:06:19.700
 If I dive into the file I look at the files 

00:06:19.700 --> 00:06:22.180
 I can see example file designs 

00:06:22.180 --> 00:06:25.262
 It removes the binary XML translation and returns it to the source 

00:06:25.262 --> 00:06:27.470
 Although we need to do better in resource references 

00:06:28.040 --> 00:06:31.870
 We will soon assign them to resource names 

00:06:31.870 --> 00:06:34.630
 You can also see the value table 

00:06:34.630 --> 00:06:37.350
 Which was previously obscure 

00:06:37.350 --> 00:06:39.830
 Now we have a viewer, so you can go in and see what's inside 

00:06:41.000 --> 00:06:42.105
 last but not least-- 

00:06:42.105 --> 00:06:42.420
 [clap] 

00:06:42.420 --> 00:06:42.920
 Yup 

00:06:46.540 --> 00:06:49.150
 Last but not least, this lets you look at .dex files 

00:06:49.150 --> 00:06:52.475
 You are probably aware of the 64k limit on the medium 

00:06:52.475 --> 00:06:53.850
 Is not actually an end to the means 

00:06:53.850 --> 00:06:55.720
 The limit is on the medium added to the reference 

00:06:55.720 --> 00:06:57.762
 If you can now enter it and see 

00:06:57.762 --> 00:06:59.470
 What you announce 

00:06:59.470 --> 00:07:01.080
 And what thing you assign 

00:07:01.080 --> 00:07:03.810
 In order to get to that limit or multidex occupancy 

00:07:03.810 --> 00:07:08.820
 [clap] 

00:07:08.820 --> 00:07:10.342
 If you ever see a data file in the construction output 

00:07:10.342 --> 00:07:11.800
 You may have noticed that there are a lot of things in the data file that you did not type 

00:07:15.190 --> 00:07:16.600
 Right? where are you from? 

00:07:16.600 --> 00:07:20.880
 Well, we have a new editor in version 2.2 which is a data editor 

00:07:20.880 --> 00:07:23.360
 If this is an XML tab, you can see it below 

00:07:23.360 --> 00:07:25.710
 There is now a tab for the merged data 

00:07:25.710 --> 00:07:28.800
 When you press it, you can see that we are now 

00:07:28.800 --> 00:07:30.430
 We give you the complete, combined, and updated data directly whenever you edit 

00:07:32.722 --> 00:07:34.680
 There is a guide on the right that tells you 

00:07:34.680 --> 00:07:35.804
 Where things come from 

00:07:35.804 --> 00:07:39.110
 If for example, I can see that the Internet permit 

00:07:39.110 --> 00:07:42.860
 [clap] 

00:07:42.860 --> 00:07:44.540
 Coming from PlayService 

00:07:44.540 --> 00:07:48.150
 If I can also enter here and go to the line 

00:07:48.150 --> 00:07:49.689
 Which is the source of integration 

00:07:49.689 --> 00:07:51.230
 Hopefully this helps simplify 

00:07:51.230 --> 00:07:55.530
 What happens in the process of integration of Gradle data 

00:07:55.530 --> 00:07:57.310
 On the mention of Gradle, do not want you to learn 

00:07:57.310 --> 00:07:59.720
 How to edit build files in order to adjust your project settings 

00:08:01.380 --> 00:08:04.500
 We central rewrite the entire structure of the project 

00:08:05.362 --> 00:08:07.320
 I say middle, because it is all we have achieved so far 

00:08:07.320 --> 00:08:08.694
 Dependencies are, though perhaps the hardest part 

00:08:11.530 --> 00:08:15.440
 The best section I have in developing the software package is the message board 

00:08:15.440 --> 00:08:18.140
 What they refer to are the suggestions made by the interpreter 

00:08:18.140 --> 00:08:20.000
 You see here that my project 

00:08:20.000 --> 00:08:21.555
 Uses jCenter for dependencies 

00:08:21.555 --> 00:08:22.930
 He tells me that there is 

00:08:22.930 --> 00:08:25.147
 A new version of these dependencies 

00:08:25.147 --> 00:08:27.230
 All I have to do is click on the update link 

00:08:27.230 --> 00:08:28.800
 Now I'm using the newer version 

00:08:28.800 --> 00:08:31.253
 I can also press "Update All" to select all the suggestions 

00:08:31.253 --> 00:08:32.669
 Note that they do not just look 

00:08:32.669 --> 00:08:35.679
 To local warehouses, which was Lint 

00:08:35.679 --> 00:08:39.610
 But it also looks for remote warehouses 

00:08:39.610 --> 00:08:41.640
 If you go to view Dependencies 

00:08:41.640 --> 00:08:45.000
 I can go to Dependencies, either through the software module 

00:08:45.000 --> 00:08:48.580
 Or considering the total dependencies of all the software units 

00:08:48.580 --> 00:08:49.460
 In the project 

00:08:49.460 --> 00:08:51.440
 I can go for example 

00:08:51.440 --> 00:08:54.620
 Dependent dependencies to see 

00:08:54.620 --> 00:08:57.660
 How do I reach some dependencies in my project 

00:08:57.660 --> 00:09:00.220
 I can also add dependencies 

00:09:00.220 --> 00:09:03.280
 If we have a beautiful user interface now where I can search 

00:09:03.280 --> 00:09:06.660
 I repeat, as in the update suggestions 

00:09:06.660 --> 00:09:08.780
 This displays remote repositories 

00:09:08.780 --> 00:09:11.680
 It also displays local warehouses 

00:09:11.680 --> 00:09:13.240
 Looks at all existing versions 

00:09:13.240 --> 00:09:15.760
 It also helps me adjust the range 

00:09:15.760 --> 00:09:18.480
 In the Dependencies list 

00:09:18.480 --> 00:09:20.964
 You can run this day in the experimental settings 

00:09:20.964 --> 00:09:22.130
 If you want to play it 

00:09:22.130 --> 00:09:23.160
 We will try to end it 

00:09:23.160 --> 00:09:24.760
 In future releases 

00:09:24.760 --> 00:09:31.360
 [clap] 

00:09:31.360 --> 00:09:32.869
 Let's talk about C ++ 

00:09:32.869 --> 00:09:35.410
 Last year, we show you that we have fantastic support 

00:09:35.410 --> 00:09:36.230
 In editing 

00:09:36.230 --> 00:09:39.990
 This is a Sea-lion ++ function from Jetbrains 

00:09:39.990 --> 00:09:42.100
 Which we have integrated 

00:09:42.100 --> 00:09:45.060
 But you need to use the experimental Gradle extension 

00:09:45.060 --> 00:09:48.170
 The good news for version 2.2 is that we are now 

00:09:48.170 --> 00:09:50.420
 We added support for exterior building systems 

00:09:50.420 --> 00:09:55.190
 You can use the CMake to build the innards 

00:09:55.190 --> 00:09:57.770
 You just have to make it with a stable attachment 

00:09:57.770 --> 00:10:01.030
 You can now build C ++ 

00:10:01.030 --> 00:10:03.670
 For C ++, we will have a processor in the next two versions 

00:10:03.670 --> 00:10:07.860
 You can add C ++ support 

00:10:07.860 --> 00:10:08.612
 To your project 

00:10:08.612 --> 00:10:11.070
 When you do, you have a project model 

00:10:11.070 --> 00:10:12.730
 This model is exactly similar 

00:10:12.730 --> 00:10:16.540
 If you have a major activity that holds the authentic library 

00:10:16.540 --> 00:10:18.920
 Then you have a typical authentic library series titled "Hello World" 

00:10:19.420 --> 00:10:20.800
 Let's connect these 

00:10:20.800 --> 00:10:23.720
 I will initially set a breakpoint here in C ++ 

00:10:25.780 --> 00:10:28.690
 The main activity only displays the initial shape 

00:10:28.690 --> 00:10:29.940
 Which includes a string in the middle 

00:10:29.940 --> 00:10:34.160
 Let me return and change that string to show the value 

00:10:34.160 --> 00:10:35.040
 From C ++ 

00:10:35.040 --> 00:10:41.270
 If we write text view = fine view by ID 

00:10:41.270 --> 00:10:43.165
 Then we will explain the explanatory instructions ID 

00:10:43.165 --> 00:10:47.840
 We go to convert it and then write set text on it 

00:10:47.840 --> 00:10:50.410
 With the C ++ Connector 

00:10:50.410 --> 00:10:52.620
 Let's put a stop here too 

00:10:52.620 --> 00:10:55.620
 I will launch the debugger 

00:10:55.620 --> 00:10:58.270
 This works by Gradle which is in turn operated by CMake 

00:10:58.270 --> 00:11:02.380
 He builds everything and sets it up 

00:11:02.380 --> 00:11:06.940
 In one second, this application should work on the emulator 

00:11:06.940 --> 00:11:07.440
 This is 

00:11:07.440 --> 00:11:09.481
 We click on the breakpoint and we convert it into the Java code 

00:11:09.481 --> 00:11:11.270
 You can clearly walk around 

00:11:11.270 --> 00:11:15.370
 In the case of data I mean the status of the activity 

00:11:15.370 --> 00:11:17.480
 If you have completed the debugger now 

00:11:17.480 --> 00:11:19.450
 Now you see that we are in C ++ 

00:11:19.450 --> 00:11:21.352
 [clap] 

00:11:21.352 --> 00:11:22.310
 I can walk around 

00:11:26.320 --> 00:11:29.670
 This is a hybrid debugger and a CMake support group 

00:11:29.670 --> 00:11:31.890
 And the last thing I will show you in the area of ​​the building system 

00:11:31.890 --> 00:11:33.910
 Is in the command line 

00:11:33.910 --> 00:11:37.295
 Let's say you've received a project from your coworker 

00:11:37.295 --> 00:11:40.310
 Or maybe you've explored Git and not one of them 

00:11:40.310 --> 00:11:42.750
 Version Tools or a compiled software development toolkit 

00:11:42.750 --> 00:11:44.090
 Of your project 

00:11:44.090 --> 00:11:48.900
 Then you build and then click on a message like this 

00:11:48.900 --> 00:11:51.290
 You do not have Construction Tools 2201 What are you doing now? 

00:11:51.290 --> 00:11:53.570
 The software package management tool opens up and installs, does not it? 

00:11:53.570 --> 00:11:58.220
 Well, in version 2.2 Alpha 1, we now have an experimental signal 

00:11:58.220 --> 00:12:00.970
 You can select it 

00:12:00.970 --> 00:12:04.220
 When I run the version, if I have 

00:12:04.220 --> 00:12:06.604
 Approved this license, Gradle will 

00:12:06.604 --> 00:12:09.270
 Download it for me immediately, as you can see here 

00:12:09.270 --> 00:12:15.000
 [clap] 

00:12:15.000 --> 00:12:16.560
 This makes tuning settings 

00:12:16.560 --> 00:12:18.750
 Continuous integration servers are much easier 

00:12:18.750 --> 00:12:19.250
 Okay 

00:12:19.250 --> 00:12:23.230
 Let's move from the command line to visual editing 

00:12:23.230 --> 00:12:25.960
 Let's look at the new design editor 

00:12:25.960 --> 00:12:28.590
 In fact, I should not call it design editor because it is 

00:12:28.590 --> 00:12:29.660
 It does more than just designs 

00:12:29.660 --> 00:12:35.120
 First, open the options menu file 

00:12:35.120 --> 00:12:35.710
 This is a list of options 

00:12:35.710 --> 00:12:38.630
 I can now drag and drop the layout options menus 

00:12:38.630 --> 00:12:42.420
 We can also open preference files 

00:12:42.420 --> 00:12:44.960
 I can pull preference files and leave them here 

00:12:44.960 --> 00:12:48.666
 Obviously, this is a Component Monitor 

00:12:51.540 --> 00:12:54.010
 But of course the designs are the bulk of them 

00:12:54.010 --> 00:12:55.390
 You see that we have a new observer factors 

00:12:55.390 --> 00:12:56.973
 On the right, this shows you 

00:12:56.973 --> 00:13:00.300
 Important properties for the worker you have selected 

00:13:00.300 --> 00:13:01.750
 In this case it is text view 

00:13:01.750 --> 00:13:03.400
 For example, for text view, 

00:13:03.400 --> 00:13:04.710
 We show you the text format 

00:13:04.710 --> 00:13:07.830
 Note that there is a gray text here in the Factors Monitor 

00:13:07.830 --> 00:13:10.210
 Although I did not specify the text format 

00:13:10.210 --> 00:13:11.480
 We show you how it will be 

00:13:11.480 --> 00:13:12.563
 Form it directly 

00:13:12.563 --> 00:13:15.371
 I can see that the font type would be 14sp for example 

00:13:15.371 --> 00:13:16.870
 If you moved to something else 

00:13:16.870 --> 00:13:18.990
 It will calculate what it should be 

00:13:18.990 --> 00:13:22.210
 We only have a subset of the properties here 

00:13:22.210 --> 00:13:23.540
 For easy searching 

00:13:23.540 --> 00:13:25.930
 But if you want anything else, the whole set of characteristics 

00:13:25.930 --> 00:13:28.280
 One click away here 

00:13:28.280 --> 00:13:32.120
 If on the design surface, we have the status of the chart 

00:13:32.120 --> 00:13:35.776
 If the position of the chart shows the shape 

00:13:35.776 --> 00:13:37.650
 It is like a ray showing what the application does 

00:13:37.650 --> 00:13:40.120
 I can put the position of the chart and design status 

00:13:40.120 --> 00:13:41.059
 side by side 

00:13:41.059 --> 00:13:42.850
 We have something you asked for 

00:13:42.850 --> 00:13:46.320
 Is the scrolling option and I can scroll the design interface 

00:13:46.320 --> 00:13:47.895
 directly 

00:13:47.895 --> 00:13:54.162
 [Cheers and applause] 

00:13:54.162 --> 00:13:55.620
 The position of the chart is particularly useful 

00:13:55.620 --> 00:13:57.161
 For the new design of the 

00:13:57.161 --> 00:13:59.680
 Take a look at the styling 

00:13:59.680 --> 00:14:03.320
 First, close the automatic connection mode 

00:14:03.320 --> 00:14:05.130
 To withdraw some factors 

00:14:05.130 --> 00:14:07.010
 I will put the text view here 

00:14:07.010 --> 00:14:15.920
 We edit the text, display another text and field for the password 

00:14:15.920 --> 00:14:17.680
 Probably 

00:14:17.680 --> 00:14:20.220
 Then add some buttons on the bottom right of the screen 

00:14:22.839 --> 00:14:24.630
 You now notice that I am a little neglected 

00:14:24.630 --> 00:14:27.586
 Because I can press and select 

00:14:27.586 --> 00:14:28.960
 I can click on the right 

00:14:28.960 --> 00:14:31.740
 I say that I want to describe these things on the left 

00:14:31.740 --> 00:14:34.840
 I want to row all these things on the left 

00:14:34.840 --> 00:14:37.310
 Maybe I want to pop them vertically 

00:14:40.600 --> 00:14:42.830
 If I have my design here to see what will happen 

00:14:42.830 --> 00:14:46.012
 If you go to the horizontal position 

00:14:46.012 --> 00:14:46.970
 This is not good right? 

00:14:46.970 --> 00:14:49.130
 I have some buttons off the screen 

00:14:49.130 --> 00:14:50.870
 Let's try to fix it 

00:14:50.870 --> 00:14:52.870
 We have this small bulb here 

00:14:52.870 --> 00:14:55.570
 Indicative limitations 

00:14:55.570 --> 00:14:58.122
 Notice what happens when you press it 

00:14:58.122 --> 00:14:59.580
 I now have these limitations, where I tried 

00:14:59.580 --> 00:15:02.030
 Guess what we mean here 

00:15:02.030 --> 00:15:04.866
 And when I try to resize now 

00:15:04.866 --> 00:15:06.740
 You can see that the buttons move correctly 

00:15:06.740 --> 00:15:12.970
 [clap] 

00:15:12.970 --> 00:15:15.450
 Normally, you are in automatic dialing mode 

00:15:15.450 --> 00:15:17.820
 So if you want to pull a button here 

00:15:17.820 --> 00:15:19.640
 You can see that just to pull it, 

00:15:19.640 --> 00:15:22.050
 He alone adds these restrictions for me 

00:15:22.050 --> 00:15:23.550
 If I did not like it, 

00:15:23.550 --> 00:15:25.758
 I can cancel the restrictions by simply clicking on them 

00:15:25.758 --> 00:15:27.340
 I can also withdraw the new restrictions 

00:15:27.340 --> 00:15:28.960
 We offer you kind of premiere display 

00:15:28.960 --> 00:15:31.060
 What they will do when they agree 

00:15:31.060 --> 00:15:33.634
 Constraints can also be strong 

00:15:33.634 --> 00:15:35.050
 While I pull it, you can see 

00:15:35.050 --> 00:15:38.650
 They are locked alone to a quarter or to a specified percentage 

00:15:38.650 --> 00:15:41.207
 One yesterday asked if he was also working through XML editing 

00:15:41.207 --> 00:15:42.290
 If you prefer 

00:15:42.290 --> 00:15:44.347
 And postponed, already works 

00:15:44.347 --> 00:15:45.680
 You can see here, we are in XML 

00:15:45.680 --> 00:15:49.270
 I can continue to manipulate restrictions here 

00:15:49.270 --> 00:15:51.819
 You can see that XML editing works well 

00:15:51.819 --> 00:15:52.985
 If this is strong-- 

00:15:52.985 --> 00:15:53.770
 [clap] 

00:15:53.770 --> 00:15:54.396
 thank you 

00:15:58.490 --> 00:16:02.210
 If this is a very strong solution to the constraints 

00:16:02.210 --> 00:16:06.450
 Allows you to adjust your design gradients 

00:16:06.450 --> 00:16:09.510
 This is very good for performance 

00:16:09.510 --> 00:16:12.580
 We've added a feature to take this off 

00:16:12.580 --> 00:16:17.160
 If we open another design, this design 

00:16:17.160 --> 00:16:21.140
 Move to the status of the chart to see what is happening here 

00:16:21.140 --> 00:16:22.840
 If this design actually longer 

00:16:22.840 --> 00:16:26.200
 A set of intertwined longitudinal designs 

00:16:26.200 --> 00:16:30.650
 If I go now I will say about this longitudinal design 

00:16:30.650 --> 00:16:32.360
 To my design, it shows you 

00:16:32.360 --> 00:16:34.310
 Adjust the entire design 

00:16:34.310 --> 00:16:36.676
 As you can see, theoretically it seems the same 

00:16:36.676 --> 00:16:37.800
 Except that we have limitations 

00:16:37.800 --> 00:16:39.799
 On the left, you can see a single longitudinal list 

00:16:39.799 --> 00:16:43.996
 [clap] 

00:16:47.341 --> 00:16:47.840
 Okay 

00:16:47.840 --> 00:16:51.440
 Let's take a look at the editing 

00:16:51.440 --> 00:16:54.510
 In the editing section, we added two features 

00:16:54.510 --> 00:16:57.240
 First, there is Firebase integration 

00:16:57.240 --> 00:17:00.350
 If you are trying to accomplish a task with Firebase 

00:17:00.350 --> 00:17:02.660
 For example, you want to add crash reporting 

00:17:02.660 --> 00:17:04.680
 Just open the plugin window 

00:17:04.680 --> 00:17:06.650
 And choose the task you want 

00:17:06.650 --> 00:17:09.579
 For example, reporting faults, you enter 

00:17:09.579 --> 00:17:12.490
 You see that you can get this step through a set of tutorials 

00:17:12.490 --> 00:17:14.210
 Located next to the source editor 

00:17:14.210 --> 00:17:15.890
 If you see an example 

00:17:15.890 --> 00:17:18.280
 You want to execute these lines 

00:17:18.280 --> 00:17:21.246
 Drag them to the source code to work on this edit, for example 

00:17:24.839 --> 00:17:27.482
 If you're trying to figure out how to use the API 

00:17:27.482 --> 00:17:29.940
 Let's say you heard that you should use the Job Scheduler application 

00:17:29.940 --> 00:17:32.390
 Then, you should use the Job Scheduler 

00:17:32.390 --> 00:17:33.890
 You can click on the right 

00:17:33.890 --> 00:17:35.800
 And you can tell my grandfather a typical code for this 

00:17:35.800 --> 00:17:39.608
 [clap] 

00:17:43.267 --> 00:17:45.350
 As you can see, basically go to the server 

00:17:45.350 --> 00:17:47.960
 Find suggested models that you can walk around 

00:17:47.960 --> 00:17:50.090
 You can click on the right and say Open this in a browser 

00:17:50.090 --> 00:17:51.464
 Let me know more about him 

00:17:55.120 --> 00:17:58.120
 Version 2.2 based on IntelliJ 16.1 

00:17:58.120 --> 00:18:00.790
 So we have a number of new features for this as well 

00:18:00.790 --> 00:18:06.150
 The other thing that we have is support for editing 

00:18:06.150 --> 00:18:08.200
 Two-way series 

00:18:08.200 --> 00:18:10.484
 If this is something our global audience has demanded 

00:18:10.484 --> 00:18:11.650
 From us for some time 

00:18:11.650 --> 00:18:13.556
 Here we have Arabic text 

00:18:13.556 --> 00:18:15.180
 · View that source editor now 

00:18:15.180 --> 00:18:16.888
 Pleased to handle the matter correctly 

00:18:16.888 --> 00:18:19.760
 I know this was a black point, if we finally analyzed it 

00:18:19.760 --> 00:18:21.620
 Thanks IntelliJ 

00:18:21.620 --> 00:18:25.180
 IntelliJ 16 also comes with a range of surveys 

00:18:25.180 --> 00:18:26.380
 New in editing 

00:18:26.380 --> 00:18:28.860
 Moreover, we added it 

00:18:28.860 --> 00:18:32.540
 A set of new Android surveys 

00:18:32.540 --> 00:18:36.010
 Let's look at them 

00:18:36.010 --> 00:18:38.070
 First, I hope everyone 

00:18:38.070 --> 00:18:40.110
 Know that it is bad practice 

00:18:40.110 --> 00:18:44.180
 Solve the problem of transferring data from activities by making 

00:18:44.180 --> 00:18:45.560
 Your field is fixed 

00:18:45.560 --> 00:18:46.260
 This is unacceptable 

00:18:46.260 --> 00:18:48.342
 Now Lint will warn you 

00:18:48.342 --> 00:18:50.050
 Not because this is a leak, but 

00:18:50.050 --> 00:18:53.392
 Because it makes instant playback work well when you do so 

00:18:53.392 --> 00:18:56.860
 It is not easy this situation as well 

00:18:56.860 --> 00:18:59.510
 If you make other fields here, for example 

00:18:59.510 --> 00:19:02.470
 Fixed, app data 1 is not a problem, but after app data 2 

00:19:02.470 --> 00:19:06.260
 This seems to have an Instant State 

00:19:06.260 --> 00:19:08.849
 It is a context, but there is a constant reference to it, 

00:19:08.849 --> 00:19:09.390
 This is not good 

00:19:09.390 --> 00:19:13.182
 [clap] 

00:19:14.672 --> 00:19:16.880
 Let's take a look at the new support comments now 

00:19:16.880 --> 00:19:18.629
 We launched the support library yesterday 

00:19:18.629 --> 00:19:20.200
 There are some good features in it 

00:19:20.200 --> 00:19:23.409
 First, you can finally say that this is the way 

00:19:23.409 --> 00:19:25.450
 With it within a working chain 

00:19:25.450 --> 00:19:27.130
 These are excluded from the string 

00:19:27.130 --> 00:19:28.966
 You can isolate it from any string 

00:19:31.810 --> 00:19:34.410
 For a period of time, we had an API check 

00:19:34.410 --> 00:19:36.700
 Lint was therefore viewed and compared to the API platform 

00:19:36.700 --> 00:19:38.370
 Basic Software Development Kit 

00:19:38.370 --> 00:19:41.810
 We have a quick solution where we say, well, 

00:19:41.810 --> 00:19:42.950
 Enter this test for me 

00:19:42.950 --> 00:19:47.550
 But what you can do now is say 

00:19:47.550 --> 00:19:51.680
 I'm expecting my way to ask for this API 

00:19:51.680 --> 00:19:53.669
 If you transfer responsibility 

00:19:53.669 --> 00:19:54.710
 Connect them from your API 

00:19:54.710 --> 00:19:57.810
 You can get the API check for your libraries to the customer 

00:19:57.810 --> 00:20:00.020
 If you can see these other connections 

00:20:00.020 --> 00:20:03.070
 They contact your API but the API check is applied 

00:20:06.250 --> 00:20:11.485
 I will then give you the resources of dimensions 

00:20:11.485 --> 00:20:13.530
 Dimensions Comments 

00:20:13.530 --> 00:20:16.920
 This allows you to say that this correct number represents a dimension 

00:20:16.920 --> 00:20:18.670
 There are many modules that you can apply 

00:20:18.670 --> 00:20:20.753
 Bixal seems to be very important 

00:20:20.753 --> 00:20:23.020
 Most APIs in the Software Development Kit work in Pixel 

00:20:23.020 --> 00:20:25.520
 So we have a new comment to determine the bixalat 

00:20:25.520 --> 00:20:28.226
 If you type @ px when I do this 

00:20:28.226 --> 00:20:30.600
 You can see misuse warnings 

00:20:30.600 --> 00:20:33.130
 Where the supplier recognizes dimensions and should be dimensioned 

00:20:33.130 --> 00:20:35.099
 I hope this is useful 

00:20:35.099 --> 00:20:36.890
 And the last comment I want to highlight 

00:20:36.890 --> 00:20:38.080
 Keep is suspended 

00:20:38.080 --> 00:20:41.270
 If you can write Keep @ on your devices and categories 

00:20:41.270 --> 00:20:42.400
 And postponed 

00:20:42.400 --> 00:20:47.920
 [clap] 

00:20:47.920 --> 00:20:51.104
 As of the Gradle 2.2 extension, we automatically do 

00:20:51.104 --> 00:20:53.520
 If you use ProGuard or 

00:20:53.520 --> 00:20:58.350
 The new Incremental Shrinker ensures that these devices will not be released at launch 

00:20:58.350 --> 00:21:00.140
 If you like the explanatory support comments 

00:21:00.140 --> 00:21:02.250
 Our advantage I think it 

00:21:02.250 --> 00:21:03.600
 It will make it more useful to you 

00:21:03.600 --> 00:21:06.000
 It is the new induction engine 

00:21:06.000 --> 00:21:09.440
 If IntelliJ has a specific time, the Analysis option 

00:21:09.440 --> 00:21:10.810
 To infer the invalidity 

00:21:10.810 --> 00:21:13.220
 We now have a new feature, it's under the alarm now 

00:21:13.220 --> 00:21:16.810
 But you can try it if you want to infer support comments 

00:21:16.810 --> 00:21:19.350
 So when I run this on the current file 

00:21:19.350 --> 00:21:20.900
 Performs a whole set of analyzes 

00:21:20.900 --> 00:21:23.170
 In order to identify a lot of new comments build 

00:21:23.170 --> 00:21:24.320
 On use in your project 

00:21:24.320 --> 00:21:26.400
 If you return to my file here 

00:21:26.400 --> 00:21:28.817
 All the div tags you see here are for new comments 

00:21:28.817 --> 00:21:29.650
 Which I drew 

00:21:29.650 --> 00:21:31.510
 For example, access is required 

00:21:31.510 --> 00:21:33.640
 We hope this helps to make comments 

00:21:33.640 --> 00:21:36.876
 Lint helps you find more in your code 

00:21:36.876 --> 00:21:38.750
 We were also on co-operation with FREIF RESEARCH 

00:21:38.750 --> 00:21:43.700
 At the University of Oregon to work on permits 

00:21:43.700 --> 00:21:47.820
 This is still in progress 

00:21:47.820 --> 00:21:51.260
 But when it's finished, lets you move your app 

00:21:51.260 --> 00:21:52.740
 To Android's final permissions 

00:21:52.740 --> 00:21:55.870
 Here I can call this act 

00:21:55.870 --> 00:21:58.870
 It helps me to make the right requests 

00:21:58.870 --> 00:22:01.152
 And handling the callback of Android's final licenses 

00:22:01.152 --> 00:22:04.905
 [clap] 

00:22:08.390 --> 00:22:12.180
 We also have manufacturing armament to remove unused resources 

00:22:12.180 --> 00:22:15.322
 So if you add some unused resources in fact 

00:22:15.322 --> 00:22:17.030
 I can now delete the re-manufacturing list 

00:22:17.030 --> 00:22:21.272
 Selecting the removal of unused resources and integrated development environments 

00:22:21.272 --> 00:22:23.296
 Find and remove them for you 

00:22:23.296 --> 00:22:24.420
 This helps make your application lighter 

00:22:24.420 --> 00:22:30.560
 [clap] 

00:22:30.560 --> 00:22:31.110
 Okay 

00:22:31.110 --> 00:22:36.190
 The last thing I want to show you is the Espresso test recorder 

00:22:38.290 --> 00:22:41.291
 I hear the enthusiasm of the audience 

00:22:41.291 --> 00:22:41.790
 Okay 

00:22:41.790 --> 00:22:46.290
 To do this, all I have to do is enter into my project 

00:22:46.290 --> 00:22:50.140
 Then enter the execution menu and press the espresso test register 

00:22:50.140 --> 00:22:53.515
 They noted that Espresso was not an "Expresso" 

00:22:53.515 --> 00:22:55.640
 When I do, you can see 

00:22:55.640 --> 00:22:58.930
 They build the application 

00:22:58.930 --> 00:23:03.790
 He starts recording the event on the left here 

00:23:03.790 --> 00:23:06.780
 On the right, the application works 

00:23:06.780 --> 00:23:08.840
 If I can now go, for example 

00:23:08.840 --> 00:23:11.600
 On this category here and you can see 

00:23:11.600 --> 00:23:13.640
 He records her event 

00:23:13.640 --> 00:23:16.027
 I can press the back button 

00:23:16.027 --> 00:23:17.860
 And then go down and press 

00:23:17.860 --> 00:23:20.070
 On the music button 

00:23:20.070 --> 00:23:22.570
 They noticed while I was clicking, recording events here 

00:23:22.570 --> 00:23:24.819
 He tries to understand what he is pressing 

00:23:24.819 --> 00:23:26.850
 For example when you press the red button 

00:23:26.850 --> 00:23:31.090
 He records that I press the Test Fashion button 

00:23:31.090 --> 00:23:33.590
 There's something nice I can do while I sign up 

00:23:33.590 --> 00:23:35.590
 Is to add affirmations 

00:23:35.590 --> 00:23:39.510
 If I click the "Add confirmation" button here 

00:23:39.510 --> 00:23:42.750
 Now a screenshot and a hierarchical view appear 

00:23:42.750 --> 00:23:45.770
 What happens in the application 

00:23:45.770 --> 00:23:48.370
 Now you can see that I can walk around 

00:23:48.370 --> 00:23:50.950
 In the logical form of the application 

00:23:50.950 --> 00:23:52.520
 If pressed, for example 

00:23:52.520 --> 00:23:54.360
 To the question: "Who was the youngest member of the Beetle band?" 

00:23:54.360 --> 00:23:56.200
 This displays and suggests 

00:23:56.200 --> 00:23:58.412
 Confirmation, that is at this stage 

00:23:58.412 --> 00:23:59.870
 When the app is running, wait 

00:23:59.870 --> 00:24:02.516
 To be this series: "Who was the youngest individual in the Beetle band?" 

00:24:02.516 --> 00:24:06.324
 [clap] 

00:24:09.180 --> 00:24:11.920
 Then click on "Save confirmation" and continue to work 

00:24:11.920 --> 00:24:15.890
 Is there anyone - I will press some wrong answers 

00:24:15.890 --> 00:24:18.110
 Until they stop me 

00:24:18.110 --> 00:24:20.560
 Okay? 

00:24:20.560 --> 00:24:22.010
 Error 

00:24:22.010 --> 00:24:23.900
 Still wrong 

00:24:23.900 --> 00:24:25.381
 George is right 

00:24:25.381 --> 00:24:25.880
 Okay? 

00:24:25.880 --> 00:24:30.770
 Then click the Delivery button 

00:24:30.770 --> 00:24:32.839
 You can see here that the answer was correct 

00:24:32.839 --> 00:24:34.380
 I think it is enough 

00:24:34.380 --> 00:24:35.550
 For the test recording part 

00:24:35.550 --> 00:24:37.450
 Now I will press "End registration" 

00:24:37.450 --> 00:24:39.390
 When I do that, ask me what class that is 

00:24:39.390 --> 00:24:40.890
 I want to save the test 

00:24:40.890 --> 00:24:43.620
 I will accept the default 

00:24:43.620 --> 00:24:45.885
 Here is our espresso test 

00:24:48.467 --> 00:24:50.800
 Notice that I pressed wrong things at first 

00:24:50.800 --> 00:24:52.340
 I can edit this test if you want 

00:24:52.340 --> 00:24:56.010
 For example, I can pull the option of pressing the wrong button 

00:24:56.010 --> 00:24:57.660
 And return 

00:24:57.660 --> 00:24:59.980
 Then I run the test 

00:24:59.980 --> 00:25:01.590
 To do so 

00:25:01.590 --> 00:25:05.850
 If all I have to do is press the play button here 

00:25:05.850 --> 00:25:09.092
 You can also use cloud scanning 

00:25:09.092 --> 00:25:11.550
 I do not have enough time, but you can register 

00:25:11.550 --> 00:25:14.012
 Then the user interface checks on the number 

00:25:14.012 --> 00:25:15.720
 Of various hidden model factors 

00:25:15.720 --> 00:25:16.751
 It is very useful 

00:25:16.751 --> 00:25:17.250
 Okay 

00:25:17.250 --> 00:25:20.280
 To restart this on the emulator 

00:25:20.280 --> 00:25:23.680
 If he builds the examination, he publishes it to take a look 

00:25:23.680 --> 00:25:25.660
 On the right here, when the application starts working 

00:25:25.660 --> 00:25:27.659
 Because he can press him faster than me 

00:25:30.700 --> 00:25:34.040
 Install APK, here we click 

00:25:36.800 --> 00:25:38.195
 And we have the green light 

00:25:38.195 --> 00:25:38.760
 Okay 

00:25:38.760 --> 00:25:43.640
 [clap] 

00:25:43.640 --> 00:25:44.434
 Thanks 

00:25:44.434 --> 00:25:45.850
 However, I will move 

00:25:45.850 --> 00:25:47.790
 To (Jamal), who will speak 

00:25:47.790 --> 00:25:50.085
 For Visual Editor 

00:25:50.085 --> 00:25:54.106
 [clap] 

00:25:56.480 --> 00:25:59.420
 (Miss Eason): Thank you, (Tor), a wonderful show 

00:25:59.420 --> 00:26:01.594
 If it is presented (Tor) to you is what we do 

00:26:01.594 --> 00:26:03.260
 I'll take some time to talk 

00:26:03.260 --> 00:26:06.010
 Why we have worked and what you might want to integrate 

00:26:06.010 --> 00:26:08.260
 In your progress in development 

00:26:08.260 --> 00:26:12.550
 For design, we think of two main themes: 

00:26:12.550 --> 00:26:16.070
 XML and designs 

00:26:16.070 --> 00:26:20.760
 For XML, I know that some of you like the full UI design 

00:26:20.760 --> 00:26:22.785
 In XML, this is great 

00:26:22.785 --> 00:26:24.980
 But for me and many others 

00:26:24.980 --> 00:26:27.090
 It's nice to have a kind of tool for visualization 

00:26:27.090 --> 00:26:30.250
 Allows you to see how your app is translated 

00:26:30.250 --> 00:26:32.540
 And our team set a goal, as we think 

00:26:32.540 --> 00:26:34.660
 Can we create a tool 

00:26:34.660 --> 00:26:36.057
 Does not require editing XML? 

00:26:36.057 --> 00:26:38.390
 Of course this means you can look at your code 

00:26:38.390 --> 00:26:40.560
 Later, but should not be in the way 

00:26:40.560 --> 00:26:43.160
 Towards your work 

00:26:43.160 --> 00:26:45.420
 This was the reason for the new design editor 

00:26:45.420 --> 00:26:47.961
 As you view (Tor), you have a full set of features 

00:26:47.961 --> 00:26:50.780
 Especially ways to pull tools into the tree of elements 

00:26:50.780 --> 00:26:53.511
 To the design interface or schema status, 

00:26:53.511 --> 00:26:55.260
 Allowing you to look behind your app 

00:26:55.260 --> 00:26:57.810
 See how to link all your tools together 

00:26:57.810 --> 00:26:59.399
 Finally, the new properties panel 

00:26:59.399 --> 00:27:01.940
 Previously, it was showing you all the different properties 

00:27:01.940 --> 00:27:03.700
 Available for viewing 

00:27:03.700 --> 00:27:05.460
 Now, we have organized and introduced 

00:27:05.460 --> 00:27:09.180
 The most effective properties for your presentation design 

00:27:10.801 --> 00:27:12.550
 The second question we were thinking about 

00:27:12.550 --> 00:27:13.940
 It is about what designs 

00:27:13.940 --> 00:27:16.440
 For Android designs, you have some different options 

00:27:16.440 --> 00:27:19.306
 You have a longitudinal design, of course horizontal and longitudinal 

00:27:19.306 --> 00:27:20.930
 But you might think that maybe 

00:27:20.930 --> 00:27:23.184
 I want to use the design of the design table 

00:27:23.184 --> 00:27:24.850
 Hey, this will not actually work 

00:27:24.850 --> 00:27:29.010
 To think about the use of network design or relative design 

00:27:29.010 --> 00:27:30.540
 Hey, what should we use here? 

00:27:30.540 --> 00:27:32.498
 This is the problem we are trying to think about 

00:27:32.498 --> 00:27:36.810
 Because many times, you may think about any of the varieties 

00:27:36.810 --> 00:27:39.120
 Which I want to use in my designs? 

00:27:39.120 --> 00:27:41.560
 If linear design is the solution 

00:27:41.560 --> 00:27:45.080
 For this problem, you can think less about the class 

00:27:45.080 --> 00:27:47.290
 More about content and how to design 

00:27:47.290 --> 00:27:51.267
 Your tools on your designs 

00:27:51.267 --> 00:27:52.850
 Let us talk about why you use it 

00:27:52.850 --> 00:27:54.170
 Linear design 

00:27:54.170 --> 00:27:56.660
 First, it is a rapid development of the user interface 

00:27:56.660 --> 00:27:58.870
 As you saw in the demo, you can 

00:27:58.870 --> 00:28:01.100
 Add tools quickly and connect 

00:28:01.100 --> 00:28:03.060
 All different restrictions 

00:28:03.060 --> 00:28:05.390
 More importantly think about it 

00:28:05.390 --> 00:28:08.107
 Is that this will help you produce a more responsive design 

00:28:08.107 --> 00:28:09.690
 Instead of thinking about what 

00:28:09.690 --> 00:28:14.200
 My screen is for a Nexus 4 phone, a tablet, or a Nexus 6 

00:28:14.200 --> 00:28:15.760
 We can now put restrictions 

00:28:15.760 --> 00:28:19.330
 Which allows you to respond to content according to size 

00:28:19.330 --> 00:28:20.770
 the screen 

00:28:20.770 --> 00:28:23.760
 The third most important aspect is performance 

00:28:23.760 --> 00:28:25.810
 As you have seen in the show 

00:28:25.810 --> 00:28:28.460
 We can find a hierarchy for you 

00:28:28.460 --> 00:28:31.040
 If you do not know that, if you put a relative design 

00:28:31.040 --> 00:28:33.650
 Under a longitudinal design and other relative design, 

00:28:33.650 --> 00:28:35.691
 This slows the Android system 

00:28:35.691 --> 00:28:36.580
 Operational work 

00:28:36.580 --> 00:28:38.480
 So we have settled all this overlap 

00:28:38.480 --> 00:28:40.680
 In the new spatial design 

00:28:40.680 --> 00:28:43.050
 Finally, it is identical to reverse work 

00:28:43.050 --> 00:28:45.410
 That is, you can use it for new projects 

00:28:45.410 --> 00:28:46.890
 But the support library is 

00:28:46.890 --> 00:28:49.220
 Which allows you to use it in existing projects as well 

00:28:49.220 --> 00:28:55.510
 [clap] 

00:28:55.510 --> 00:28:58.070
 If the third tool we offered about the design 

00:28:58.070 --> 00:28:59.647
 Is a design monitor 

00:28:59.647 --> 00:29:01.730
 Sometimes when you download your app 

00:29:01.730 --> 00:29:04.120
 You may wonder why the offer is intertwined 

00:29:04.120 --> 00:29:06.640
 Or maybe why not one of the properties 

00:29:06.640 --> 00:29:08.220
 As I expected to be? 

00:29:08.220 --> 00:29:09.890
 If you can now do with our tools 

00:29:09.890 --> 00:29:11.680
 Is clicking on the right and taking a screenshot 

00:29:11.680 --> 00:29:14.310
 For your current design and visual inspection 

00:29:14.310 --> 00:29:16.640
 For all the different properties and look at the hierarchy of presentation 

00:29:16.640 --> 00:29:18.167
 Full of your design 

00:29:18.167 --> 00:29:20.000
 This should be useful in error handling 

00:29:22.406 --> 00:29:24.530
 Now is the time to speak a little 

00:29:24.530 --> 00:29:26.620
 About the "phase" and tools 

00:29:26.620 --> 00:29:29.450
 Which we did to help you do that 

00:29:29.450 --> 00:29:34.456
 As we mentioned in the show, we have a new Firebase extension 

00:29:34.456 --> 00:29:36.330
 This supports the new Firebase services 

00:29:36.330 --> 00:29:39.410
 Which we launched yesterday in Google IE 

00:29:39.410 --> 00:29:42.810
 Now you can add things like Google Analytics and Ads 

00:29:42.810 --> 00:29:45.280
 And cloud messages, all with the click of a button inside 

00:29:45.280 --> 00:29:49.750
 Android Studio 2.0 

00:29:49.750 --> 00:29:53.190
 The other great thing we talked about was the model browser 

00:29:53.190 --> 00:29:54.820
 As we offered, if you are looking 

00:29:54.820 --> 00:29:57.170
 About the API example of how to use something 

00:29:57.170 --> 00:29:59.860
 We now provide the power of all Google models 

00:29:59.860 --> 00:30:00.934
 At the click of a button 

00:30:00.934 --> 00:30:02.350
 This is easy for you 

00:30:02.350 --> 00:30:04.255
 Search and find a good starting point 

00:30:04.255 --> 00:30:05.630
 To develop your application 

00:30:09.200 --> 00:30:10.880
 So I would like to talk 

00:30:10.880 --> 00:30:12.296
 A little about construction tools 

00:30:12.296 --> 00:30:15.050
 I will call (Steve) to talk about these two changes 

00:30:15.050 --> 00:30:16.050
 STEVE CATHBERTSEN: Awesome 

00:30:16.050 --> 00:30:20.270
 [clap] 

00:30:20.270 --> 00:30:22.810
 Thank you very much (Jamal) 

00:30:22.810 --> 00:30:26.240
 For "construction", I would like to start talking about immediate operation 

00:30:26.240 --> 00:30:28.660
 As a developer, I think one is better 

00:30:28.660 --> 00:30:31.250
 Feelings in the world is a sense of total harmony 

00:30:31.250 --> 00:30:33.380
 And one of our goals in Android 

00:30:33.380 --> 00:30:35.170
 Is to make Android development 

00:30:35.170 --> 00:30:36.850
 As light as web development 

00:30:36.850 --> 00:30:38.480
 If you can make changes to your code 

00:30:38.480 --> 00:30:40.500
 You see it fundamentally and it changes 

00:30:40.500 --> 00:30:43.820
 In order to stay in perfect harmony while working on your code 

00:30:43.820 --> 00:30:45.700
 That is why we have built immediate operation 

00:30:45.700 --> 00:30:49.240
 I want to talk a little bit about how it works 

00:30:49.240 --> 00:30:53.920
 The integrated development environment changes your changes in one of three ways 

00:30:53.920 --> 00:30:56.440
 For incremental changes, we do the quickest switch 

00:30:56.440 --> 00:30:58.410
 We call it hot switch 

00:30:58.410 --> 00:31:00.150
 Here's what you do is equip 

00:31:00.150 --> 00:31:02.370
 Byte code on the first version 

00:31:02.370 --> 00:31:05.030
 And then, when you make changes 

00:31:05.030 --> 00:31:08.800
 We only convert the code path to capture the changed code 

00:31:08.800 --> 00:31:11.460
 The second type of switch is the warm switch 

00:31:11.460 --> 00:31:13.870
 This is when we need to restart the activity 

00:31:13.870 --> 00:31:16.036
 If this is what you need when you are doing 

00:31:16.036 --> 00:31:18.250
 Such as resource changes 

00:31:18.250 --> 00:31:21.260
 A cold switch is when we need to restart the application 

00:31:21.260 --> 00:31:24.910
 This is required when you make structural changes 

00:31:24.910 --> 00:31:27.750
 The proverbs are so changes to genetics 

00:31:27.750 --> 00:31:31.100
 Or if you change the signature of the medium 

00:31:31.100 --> 00:31:34.110
 What I would like to do is turn back and unload a bit 

00:31:34.110 --> 00:31:36.740
 Some of the performance metrics we talked about yesterday 

00:31:36.740 --> 00:31:38.410
 In the basic subject 

00:31:38.410 --> 00:31:41.880
 We benchmark performance using a wide range of different applications 

00:31:41.880 --> 00:31:42.780
 And various tools 

00:31:42.780 --> 00:31:45.410
 I will not give them just one example 

00:31:45.410 --> 00:31:47.340
 We set a benchmark for the Wikipedia application 

00:31:47.340 --> 00:31:49.800
 It is an open-source application, and you can get it on GitHub 

00:31:49.800 --> 00:31:53.280
 All of our standards have been published here 

00:31:53.280 --> 00:31:55.830
 If we want to repeat them 

00:31:55.830 --> 00:32:00.030
 What you notice is that we are setting a performance benchmark other than version 2.0 

00:32:00.030 --> 00:32:02.050
 Instant playback is off 

00:32:02.050 --> 00:32:05.180
 You can see that in version 2.1 with cold switch 

00:32:05.180 --> 00:32:11.900
 It is 4.7 times faster while the hot switch is 10.7 times faster 

00:32:11.900 --> 00:32:13.990
 Now what that means, if you think about it 

00:32:13.990 --> 00:32:18.500
 Is that the speed of our construction actually faster than 10 times, because we 

00:32:18.500 --> 00:32:22.930
 We put performance measures without 2.0 and version 2.0 faster than 1.5 

00:32:22.930 --> 00:32:25.010
 Because of the changes we made in Dex 

00:32:25.010 --> 00:32:28.550
 We also made the Android protocol for debugging 10 times faster 

00:32:28.550 --> 00:32:31.060
 We are tweaking our value a bit 

00:32:31.060 --> 00:32:33.850
 But what matters most to us is 

00:32:33.850 --> 00:32:35.810
 You get very fast construction 

00:32:35.810 --> 00:32:37.185
 This is what we have focused on 

00:32:37.185 --> 00:32:39.390
 This gives us a fair comparison 

00:32:39.390 --> 00:32:41.910
 In our performance metrics 

00:32:41.910 --> 00:32:44.620
 To talk about another type of performance measure we are doing 

00:32:44.620 --> 00:32:49.120
 Look at the user statistics for the subscribed users 

00:32:49.120 --> 00:32:52.180
 We are prepared in a variety of different ways 

00:32:52.180 --> 00:32:55.180
 For those of you, thank you 

00:32:55.180 --> 00:32:57.160
 This is an example of the statistic we look at 

00:32:57.160 --> 00:33:02.890
 Represents the average construction time for immediate operation on the hot switch 

00:33:02.890 --> 00:33:05.120
 This statistic displays all users 

00:33:05.120 --> 00:33:08.880
 If this is universal, on all operating systems 

00:33:08.880 --> 00:33:10.900
 In all states and on all computer components 

00:33:10.900 --> 00:33:14.060
 This includes very old components with slow processors 

00:33:14.060 --> 00:33:15.670
 And things like that 

00:33:15.670 --> 00:33:17.840
 What you see is that most users 

00:33:17.840 --> 00:33:22.390
 They see the hot switch in four or five seconds or less 

00:33:22.390 --> 00:33:24.510
 Our goal is always to push this figure to its limits 

00:33:24.510 --> 00:33:28.450
 Try to get as much as possible in one second 

00:33:28.450 --> 00:33:30.980
 If what we are looking for is trying to identify 

00:33:30.980 --> 00:33:32.870
 How to take down the full build speed 

00:33:32.870 --> 00:33:35.320
 Make hot switch faster and how to make 

00:33:35.320 --> 00:33:39.060
 The largest number of possible substitutions of hot relays 

00:33:39.060 --> 00:33:40.750
 If we look at things from this point of view 

00:33:40.750 --> 00:33:44.460
 Look at the hot and warm switch distribution 

00:33:44.460 --> 00:33:48.250
 Cold and full construction times, as we look at 

00:33:48.250 --> 00:33:50.500
 What causes the cold switch 

00:33:50.500 --> 00:33:52.840
 And to consider these measurement tools 

00:33:52.840 --> 00:33:54.960
 Truly, all of your data is brilliant 

00:33:54.960 --> 00:33:58.730
 Is what gave us proof of one of the big changes you will see in version 2.2 

00:33:58.730 --> 00:34:03.470
 2.2 contains changes in the AAPT 

00:34:03.470 --> 00:34:09.400
 And many of you know when a resource changes, enters the AAPT 

00:34:09.400 --> 00:34:11.800
 Explanation of ID instructions in data 

00:34:11.800 --> 00:34:16.520
 What you do not know maybe and what we do not know 

00:34:16.520 --> 00:34:20.239
 Is that if you change a resource or add a new resource 

00:34:20.239 --> 00:34:23.150
 AAPT was renumbering the interpreter instructions 

00:34:23.150 --> 00:34:25.780
 The result is that you are changing the code 

00:34:25.780 --> 00:34:27.530
 But you get a cool change 

00:34:27.530 --> 00:34:31.409
 We determined that this caused about 16 to 19% 

00:34:31.409 --> 00:34:32.989
 Of our cold substitutions 

00:34:32.989 --> 00:34:37.679
 If with version 2.2, we changed the AAPT to load 

00:34:37.679 --> 00:34:38.872
 Explains instructions for resources in a consistent manner 

00:34:38.872 --> 00:34:41.330
 If I take you somewhere in a round the backstage 

00:34:41.330 --> 00:34:45.340
 What will happen to you in version 2.2 is faster than immediate operation 

00:34:45.340 --> 00:34:48.010
 Because you will see a lot of hot relays 

00:34:48.010 --> 00:34:52.580
 The other change we have made is that we are using Split APK 

00:34:52.580 --> 00:34:55.710
 Now, when you build, it will break your application 

00:34:55.710 --> 00:34:58.740
 To about 11 to 12 Dex files 

00:34:58.740 --> 00:35:00.380
 And when you build a full 

00:35:00.380 --> 00:35:03.350
 We are rebuilding the code that has changed only 

00:35:06.310 --> 00:35:08.890
 We plan to take down construction speed 

00:35:08.890 --> 00:35:12.140
 In several consecutive versions and not in version 2.2 

00:35:12.140 --> 00:35:15.260
 So if you're still experiencing slow construction speeds 

00:35:15.260 --> 00:35:17.650
 Our engineering team will appreciate 

00:35:17.650 --> 00:35:18.728
 If you communicate with us 

00:35:21.720 --> 00:35:23.680
 Let's talk about the structure of the project 

00:35:23.680 --> 00:35:25.880
 Now, Tor (View) introduced our amazing 

00:35:25.880 --> 00:35:28.760
 I will give you the look behind the scenes 

00:35:28.760 --> 00:35:30.790
 At the bottom of the project structure dialogue 

00:35:30.790 --> 00:35:34.450
 You will find interesting changes to the Gradle building model 

00:35:34.450 --> 00:35:36.540
 Gradle was amazing to us 

00:35:36.540 --> 00:35:40.469
 It is a very flexible and very powerful language for Android 

00:35:40.469 --> 00:35:41.510
 But let's think about it 

00:35:41.510 --> 00:35:44.180
 The integrated development environment expects the organization input 

00:35:44.180 --> 00:35:46.070
 And Gradle programming language 

00:35:46.070 --> 00:35:47.710
 It is therefore very complex 

00:35:47.710 --> 00:35:50.640
 One of the changes we made in version 2.2 

00:35:50.640 --> 00:35:54.560
 Is that we have rewritten the Gradle parser from below to 

00:35:54.560 --> 00:35:55.060
 the above 

00:35:55.060 --> 00:35:58.180
 What this means is that we are now more accurate 

00:35:58.180 --> 00:36:00.670
 When we read the files in Gradle as we are 

00:36:00.670 --> 00:36:04.000
 More accurate in the integrated development environment when we rewrite it 

00:36:04.000 --> 00:36:07.070
 An example of what you will see, for example 

00:36:07.070 --> 00:36:09.570
 If you type the variables in the Gradle file 

00:36:09.570 --> 00:36:12.240
 It will be read correctly in the integrated development environment 

00:36:12.240 --> 00:36:14.580
 And in the future, in the project structure dialogue 

00:36:14.580 --> 00:36:18.590
 You will also be able to modify it in the user interface 

00:36:18.590 --> 00:36:22.760
 [clap] 

00:36:22.760 --> 00:36:26.800
 The Gradle Rewrite Form was completed in version 2.2 

00:36:26.800 --> 00:36:29.450
 As Tor stated, the project structure dialogue 

00:36:29.450 --> 00:36:32.290
 Completely completed in version 2.2 

00:36:32.290 --> 00:36:34.750
 You'll be able to try it under a beta tag 

00:36:34.750 --> 00:36:37.410
 We plan to complete it in version 2.3, at that point 

00:36:37.410 --> 00:36:41.322
 It will be default 

00:36:41.322 --> 00:36:43.530
 This is a beautiful screenshot to display the merged data 

00:36:43.530 --> 00:36:45.910
 (Tor) 

00:36:45.910 --> 00:36:48.390
 I would like to skip a step forward to talk about 

00:36:48.390 --> 00:36:49.940
 Jack 

00:36:49.940 --> 00:36:54.560
 The Jack interpreter is integrated with Gradle in version 2.1 

00:36:54.560 --> 00:36:57.900
 In version 2.2, we included comment processing 

00:36:57.900 --> 00:37:02.029
 You can use comment processors on the category path 

00:37:02.029 --> 00:37:02.528
 [clap] 

00:37:06.530 --> 00:37:09.000
 This includes, for example, translation reliability 

00:37:09.000 --> 00:37:11.310
 It will be applied automatically 

00:37:11.310 --> 00:37:14.380
 Now we will give you detailed information on how to use them in our documents 

00:37:14.380 --> 00:37:17.050
 Among the things I wanted to mention here is in Google IE 

00:37:17.050 --> 00:37:20.760
 If you are someone who writes tools and works 

00:37:20.760 --> 00:37:23.390
 On pre and post processing in class files 

00:37:23.390 --> 00:37:25.280
 One of the beautiful things about Jack 

00:37:25.280 --> 00:37:28.160
 Is that it has a structural API for processors 

00:37:28.160 --> 00:37:31.190
 We will look to move more and more Jack 

00:37:31.190 --> 00:37:32.410
 In future releases 

00:37:32.410 --> 00:37:34.350
 So try it please 

00:37:34.350 --> 00:37:38.850
 Let us know if there is any shortage 

00:37:38.850 --> 00:37:40.697
 The last topic we ask is C ++ support 

00:37:40.697 --> 00:37:43.280
 So I will give you a comprehensive picture of what we are doing 

00:37:44.010 --> 00:37:46.960
 Because I think it's a nice way to understand C ++ from the party 

00:37:46.960 --> 00:37:48.020
 To the party 

00:37:48.020 --> 00:37:49.900
 The reason behind our big investment 

00:37:49.900 --> 00:37:53.300
 Is that we know that many of you are building 

00:37:53.300 --> 00:37:55.720
 Rich graphics applications and games 

00:37:55.720 --> 00:37:59.420
 You talked to us and you told us that C ++ is essential 

00:37:59.420 --> 00:38:02.860
 We support editing and debugging C ++ 

00:38:02.860 --> 00:38:05.070
 All this comes through IntelliJ 

00:38:05.070 --> 00:38:08.900
 So among the new things you will get in 2016.1 

00:38:08.900 --> 00:38:13.830
 The new IntelliJ support is optimized for C ++ 

00:38:13.830 --> 00:38:16.220
 But I think the biggest change you'll see in version 2.2 

00:38:16.220 --> 00:38:18.480
 Is CMake and Gradle 

00:38:18.480 --> 00:38:21.400
 To give you an example of CMake 

00:38:21.400 --> 00:38:24.810
 You can refer the CMake project to the Gradle file 

00:38:24.810 --> 00:38:26.700
 This builds the so. 

00:38:26.700 --> 00:38:29.040
 To be packaged in the APK 

00:38:29.040 --> 00:38:32.590
 The Gradle now delivers work to CMake 

00:38:32.590 --> 00:38:35.060
 We urge CMake to emit more metadata 

00:38:35.060 --> 00:38:37.850
 In the same project, in how it is built 

00:38:37.850 --> 00:38:39.840
 And what files inside the project 

00:38:39.840 --> 00:38:41.660
 This shows you how, as presented to you (Tor) 

00:38:41.660 --> 00:38:44.450
 You can see cpp files. In the hierarchy of the project 

00:38:44.450 --> 00:38:47.557
 You will receive. Also 

00:38:47.557 --> 00:38:48.890
 If they are in the same file 

00:38:51.930 --> 00:38:55.190
 The same files will appear in a node in the project hierarchy 

00:38:55.190 --> 00:38:57.300
 Under external construction files 

00:38:57.300 --> 00:39:00.170
 So you can also edit it from the integrated development environment 

00:39:00.170 --> 00:39:01.670
 As Tor said, you can 

00:39:01.670 --> 00:39:05.210
 Run the application, set a breakpoint and will all work as expected 

00:39:05.210 --> 00:39:07.790
 NDKBuild is installed as itself 

00:39:07.790 --> 00:39:11.090
 So you can forward the mk file. For Android from your build model 

00:39:15.020 --> 00:39:18.300
 I would also like to take you on a quick tour of C ++ debugger improvements 

00:39:19.330 --> 00:39:22.040
 First in version 2.2, as we mentioned 

00:39:22.040 --> 00:39:26.050
 You should not choose C ++, Java, 

00:39:26.050 --> 00:39:28.480
 Or hybrid debugger, you can use the automatic option 

00:39:28.480 --> 00:39:30.990
 The integrated development environment will choose the appropriate debugger 

00:39:30.990 --> 00:39:33.700
 for you 

00:39:33.700 --> 00:39:36.540
 If correct in Android N system, you can use 

00:39:36.540 --> 00:39:39.720
 One debugger for Java and C ++ 

00:39:39.720 --> 00:39:42.560
 And there's something we've finally added, the stops 

00:39:42.560 --> 00:39:44.670
 You can add a variable 

00:39:44.670 --> 00:39:48.640
 The process is frozen if the red color is shown or marked 

00:39:48.640 --> 00:39:53.070
 Stop points can be used on x86 and Nexus 9 

00:39:53.070 --> 00:39:55.334
 We plan to add more devices 

00:39:55.334 --> 00:39:57.250
 Until then, the wonderful way to experience it 

00:39:57.250 --> 00:39:59.100
 Is by experimenting with our simulators 

00:39:59.100 --> 00:40:01.210
 We have also fixed many matching problems 

00:40:01.210 --> 00:40:04.260
 With Samsung S5 and S6 devices 

00:40:04.260 --> 00:40:07.900
 If we mention everything about C ++ in version 2.2, you should keep seeing 

00:40:07.900 --> 00:40:10.440
 Improvements in upcoming releases 

00:40:10.440 --> 00:40:13.540
 The last point we would like to talk about is the examination 

00:40:13.540 --> 00:40:15.899
 For this, I would like to move back to (Jamal) 

00:40:15.899 --> 00:40:16.940
 Thank you very much 

00:40:16.940 --> 00:40:22.620
 [clap] 

00:40:22.620 --> 00:40:24.490
 Beauty Eason: So for the examination 

00:40:24.490 --> 00:40:27.089
 The basic feature you need is the local scan environment 

00:40:27.089 --> 00:40:29.630
 So we are very excited to launch the Android Simulator 

00:40:29.630 --> 00:40:30.860
 At the beginning of this year 

00:40:30.860 --> 00:40:33.290
 If you have not tried it yet, it's a great tool 

00:40:33.290 --> 00:40:35.730
 What makes it great is that we are well CPU 

00:40:35.730 --> 00:40:39.640
 Graphics processing unit and I / O speeds, becomes faster than the device 

00:40:39.640 --> 00:40:41.740
 As well as the speeds of the Android protocol for debugging 

00:40:41.740 --> 00:40:44.060
 Believe it or not, the alleys are between 

00:40:44.060 --> 00:40:46.775
 Your payment for your assets and your application is an Android protocol for debugging 

00:40:46.775 --> 00:40:49.870
 It is ten times faster with the new Android simulator 

00:40:50.647 --> 00:40:52.230
 And of course, as you view (Tor) 

00:40:52.230 --> 00:40:53.430
 We have a new user interface 

00:40:53.430 --> 00:40:55.860
 You can do things like screen layout and screen capture 

00:40:55.860 --> 00:40:58.000
 But there is also an extended user interface 

00:40:58.000 --> 00:40:59.499
 Which allows you to control the sensors 

00:40:59.499 --> 00:41:01.490
 Such as a location, or send a text message 

00:41:01.490 --> 00:41:04.360
 Or make phone calls and all tools allow you to examine your application 

00:41:07.002 --> 00:41:09.960
 [clap] 

00:41:09.960 --> 00:41:12.040
 In addition to local screening 

00:41:12.040 --> 00:41:13.810
 We also launched Firebase Lab for testing 

00:41:13.810 --> 00:41:15.320
 Inside the Android Studio 

00:41:15.320 --> 00:41:17.100
 So if you click on your tab for zipper 

00:41:17.100 --> 00:41:19.450
 Which is displayed (Tor), allows you to 

00:41:19.450 --> 00:41:21.926
 Choose devices on the cloud 

00:41:21.926 --> 00:41:23.800
 Now you can turn on a device that you might not have 

00:41:23.800 --> 00:41:27.070
 Try to send your application and check with it 

00:41:27.070 --> 00:41:28.545
 To help you check your application 

00:41:32.350 --> 00:41:34.930
 As I mentioned earlier, we have an espresso test recorder 

00:41:34.930 --> 00:41:36.680
 This is a fantastic demo 

00:41:36.680 --> 00:41:38.390
 The reason why this is important 

00:41:38.390 --> 00:41:40.240
 Find us that making tests is heavy 

00:41:40.240 --> 00:41:42.860
 And sometimes does not like a lot of people do 

00:41:42.860 --> 00:41:44.630
 So now, you can press your device 

00:41:44.630 --> 00:41:46.260
 We can take all these tests 

00:41:46.260 --> 00:41:48.950
 You can upload them to the testing lab 

00:41:48.950 --> 00:41:50.450
 Or run locally on your device 

00:41:54.320 --> 00:41:56.930
 Finally we talked about APK parser 

00:41:56.930 --> 00:41:59.647
 I repeat, the importance of this is that sometimes you 

00:41:59.647 --> 00:42:01.730
 You think that you have completed the work, and built your application 

00:42:01.730 --> 00:42:03.362
 But your APK is too large 

00:42:03.362 --> 00:42:05.070
 Because in the end, your users want 

00:42:05.070 --> 00:42:06.986
 Who carry your app from Google Play 

00:42:06.986 --> 00:42:09.160
 The smallest APK is possible 

00:42:09.160 --> 00:42:11.167
 So this tool allows you to dive into your application 

00:42:11.167 --> 00:42:12.750
 Search the files and your dex assets 

00:42:12.750 --> 00:42:15.697
 And identify the problem because my application is too large 

00:42:19.061 --> 00:42:21.310
 We do not have time to talk about every feature 

00:42:21.310 --> 00:42:24.640
 But we talked about the new Lint analysis and the new Intellijs 2016 features 

00:42:24.640 --> 00:42:27.232
 We have invested heavily in easy access 

00:42:27.232 --> 00:42:29.440
 All new features we added 

00:42:29.440 --> 00:42:32.820
 Inside Android Studio 2.2 

00:42:32.820 --> 00:42:35.680
 In short, we launched a full range of features 

00:42:35.680 --> 00:42:37.890
 In the design and management of new restricted setup 

00:42:45.045 --> 00:42:46.586
 And a trial recorder to help you check 

00:42:50.886 --> 00:42:52.010
 How do you start? 

00:42:52.010 --> 00:42:54.707
 All you have to do, if you're using Android Studio 2.2 today 

00:42:54.707 --> 00:42:56.290
 Is going to check for updates 

00:42:56.290 --> 00:42:57.960
 We will ask you to download Android Studio 2.2 

00:42:57.960 --> 00:43:00.550
 In Canary Channel 

00:43:00.550 --> 00:43:05.400
 If you do not use Android Studio 

00:43:05.400 --> 00:43:07.570
 Enter this link and upload a new version 

00:43:07.570 --> 00:43:09.990
 Again, change the channel to Canary 

00:43:09.990 --> 00:43:14.597
 Download Android 2.2 Studio 

00:43:14.597 --> 00:43:15.180
 That's all we have 

00:43:15.180 --> 00:43:15.930
 Thank you so much 

00:43:16.690 --> 00:43:17.630
 Thanks 

