WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:04.210
So in this lesson, we will talk about Denial of service attacks and defenses.

00:00:04.210 --> 00:00:04.642
We'll talk about; what denial of service

00:00:04.642 --> 00:00:05.640
attacks are, various defenses. We'll talk about

00:00:11.210 --> 00:00:14.260
how to infer denial of service activity

00:00:14.260 --> 00:00:16.840
and we'll talk about how to secure networks

00:00:16.840 --> 00:00:20.700
against denial of service attacks. Using, Software Defined

00:00:20.700 --> 00:00:24.060
Networking. So what is denial of service? Denial

00:00:24.060 --> 00:00:25.550
of service is simply an attack that

00:00:25.550 --> 00:00:29.330
attempts to exhaust, various resources. One resource that

00:00:29.330 --> 00:00:31.860
a Denial of service attack might exhaust, is

00:00:31.860 --> 00:00:36.650
network bandwidth. Another, is TCP connections. For example,

00:00:36.650 --> 00:00:39.650
a host, might only have a limited number

00:00:39.650 --> 00:00:42.600
of TCP connections that, that it can open,

00:00:42.600 --> 00:00:45.115
to various clients. What the Denial of service

00:00:45.115 --> 00:00:48.660
attack might attempt to exhaust various server resources.

00:00:48.660 --> 00:00:52.110
For example, this victim might be web server

00:00:52.110 --> 00:00:56.420
running complicated scripts to render web pages, and

00:00:56.420 --> 00:00:59.320
if web server suddenly becomes the target of

00:00:59.320 --> 00:01:01.790
a bunch of bogus requests, the server may

00:01:01.790 --> 00:01:06.180
spent lot of resources Rendering pages for

00:01:06.180 --> 00:01:09.630
requests that are not legitimate. Before 2000,

00:01:09.630 --> 00:01:11.970
these denial of service attacks were typically

00:01:11.970 --> 00:01:15.740
single source. After 2000, with the rise of

00:01:15.740 --> 00:01:17.580
internet worms as we saw in an

00:01:17.580 --> 00:01:20.940
earlier lesson, these attacks could become distributed,

00:01:20.940 --> 00:01:24.570
effectively being launched from many attackers. Let's

00:01:24.570 --> 00:01:27.160
talk about three different types of defenses against

00:01:27.160 --> 00:01:29.460
denial of service attacks. First we have

00:01:29.460 --> 00:01:32.230
something called ingress filtering. Then we have something

00:01:32.230 --> 00:01:37.860
called URPF, or reverse path filtering checks. And

00:01:37.860 --> 00:01:39.750
then in the case of an attack on

00:01:39.750 --> 00:01:45.160
TCP connection resources, We can use something called TCP syn cookies to defend

00:01:45.160 --> 00:01:49.920
against denial of service. Let's suppose that we have a stub autonomous system,

00:01:49.920 --> 00:01:56.850
whose IP prefix was 204.69.207.0/24.

00:01:56.850 --> 00:01:59.570
Now this is a stub network, that has no

00:01:59.570 --> 00:02:02.020
other networks connected to it. And this is the only

00:02:02.020 --> 00:02:05.910
IP address space that this network owns. Then, the router

00:02:05.910 --> 00:02:09.570
that is immediately upstream of that internet service provider can

00:02:09.570 --> 00:02:13.150
simply drop all traffic for which the source IP address

00:02:13.150 --> 00:02:15.800
is not in the IP address range of that particular

00:02:15.800 --> 00:02:18.980
network. So this is foolproof and it works at the

00:02:18.980 --> 00:02:22.680
edges of the internet. Where it's very easy to determine

00:02:22.680 --> 00:02:24.970
the IP address range that's owned by a

00:02:24.970 --> 00:02:28.210
downstream stub autonomous system. Unfortunately it doesn't work

00:02:28.210 --> 00:02:31.170
well in the core, where a particular router

00:02:31.170 --> 00:02:34.890
might have a lot of difficulty determining whether packets

00:02:34.890 --> 00:02:37.270
from a particular source IP address could be

00:02:37.270 --> 00:02:41.000
allowed on a particular incoming interface. So the solution

00:02:41.000 --> 00:02:43.780
that operators try to use in the core

00:02:43.780 --> 00:02:48.020
is to use the routing tables to determine whether

00:02:48.020 --> 00:02:53.440
a packet could feasibly arrive on a particular incoming interface. So

00:02:53.440 --> 00:02:58.830
if a router had a routing table that said all packets for ten, that's 0.1.0/24,

00:02:58.830 --> 00:03:06.478
should be sent. Via interface one. And all packets destined for 10.0.18.0/24

00:03:06.478 --> 00:03:12.730
should be sent via interface two, then URPF says if we see a packet for,

00:03:12.730 --> 00:03:15.240
with a particular source IP address on an

00:03:15.240 --> 00:03:18.680
incoming interface. That is different than where would

00:03:18.680 --> 00:03:21.850
have sent the packet in the reverse direction,

00:03:21.850 --> 00:03:23.860
then we should go ahead and drop this

00:03:23.860 --> 00:03:27.390
packet. So the benefits of URPF is that

00:03:27.390 --> 00:03:30.150
it's automatic, but the drawbacks are that it

00:03:30.150 --> 00:03:34.340
requires symmetric routing. And we know from earlier

00:03:34.340 --> 00:03:38.470
lessons that routing in the internet is often asymmetric

00:03:38.470 --> 00:03:43.040
Therefore in any situation where asymmetric routing is a possibility it

00:03:43.040 --> 00:03:48.020
is not possible or reasonable to use URPF. So we've talked about

00:03:48.020 --> 00:03:53.000
ingress filtering and URPF checks, and let's now talk about the use

00:03:53.000 --> 00:03:57.940
of Syn cookies to defend against TPC based denial of service attacks.

