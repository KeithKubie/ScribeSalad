WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.810
And the answer is all the above. As we just spoke

00:00:02.810 --> 00:00:07.550
about, it's nice when you have a separate app server, database, cache,

00:00:07.550 --> 00:00:10.310
all of the, all of those separate pieces because different web

00:00:10.310 --> 00:00:13.900
applications have different needs and over time you may add features that

00:00:13.900 --> 00:00:16.440
strain the system in different ways. So having all of these

00:00:16.440 --> 00:00:17.600
separate systems means they can be

00:00:17.600 --> 00:00:19.660
scaled and operated independently. Increasing fault

00:00:19.660 --> 00:00:22.170
tolerance is a great reason. You know you don't want to

00:00:22.170 --> 00:00:25.120
have, the fact that your caches are bad, to ruin you know,

00:00:25.120 --> 00:00:27.160
all the parts of your website, you know maybe parts of your

00:00:27.160 --> 00:00:29.640
application don't need the database, so don't need the cache, there's no

00:00:29.640 --> 00:00:33.160
reason why one system should you know, ruin another. Or if you

00:00:33.160 --> 00:00:36.160
lose them you know, one cache machine, you shouldn't lose the ability to

00:00:36.160 --> 00:00:39.470
handle app server requests as well. So two different processes aren't competing

00:00:39.470 --> 00:00:42.970
for resources, whenever we talk about this one, but you know we've

00:00:42.970 --> 00:00:45.760
got an apps server and a database on the same machine. They

00:00:45.760 --> 00:00:50.315
use your computer in very different ways and having two machines running one

00:00:50.315 --> 00:00:52.420
an app server and one a database. And ma-, many

00:00:52.420 --> 00:00:55.800
cases under high load will actually doubly out perform a single

00:00:55.800 --> 00:00:59.350
machine. Because you've got the machine can make use of its

00:00:59.350 --> 00:01:02.300
own caching. You know, the processor cache and the OS cache

00:01:02.300 --> 00:01:04.580
and all that sort of stuff. That will be constantly being

00:01:04.580 --> 00:01:07.880
trampled by, you know, your app server tramping, your database caching

00:01:07.880 --> 00:01:12.290
and vice versa. So separating processes that behave wildly differently from

00:01:12.290 --> 00:01:15.370
each other onto separate physical machines makes a lot of sense.

00:01:15.370 --> 00:01:18.300
And also so these systems can be updated independently. Say you want to

00:01:18.300 --> 00:01:21.220
switch from PostgreSQL to MySQL or you want to switch from Memcache to Redis

00:01:21.220 --> 00:01:23.590
or something like that. Well, there is no reason why you need to

00:01:23.590 --> 00:01:26.305
take down the rest of your site to do that. You can update these

00:01:26.305 --> 00:01:29.927
pieces one at a time you know as, as you need to. So,

00:01:29.927 --> 00:01:33.523
these are all reasons why you want to separate your services and it's good

00:01:33.523 --> 00:01:36.887
even if you have all these services on the same machine initially that

00:01:36.887 --> 00:01:38.999
there's some kind of walls between them.

00:01:38.999 --> 00:01:40.727
So that, you know, have them communicate

00:01:40.727 --> 00:01:43.463
over tcp or communicate over some other sub system such that when you

00:01:43.463 --> 00:01:46.727
switch to having separate machines, you don't have to rewrite your whole web

00:01:46.727 --> 00:01:48.311
application, you know you don't have

00:01:48.311 --> 00:01:50.087
to re architect everything, you just kind of

00:01:50.087 --> 00:01:52.469
moving different programs around. So that's kind of

00:01:52.469 --> 00:01:54.060
one of the big keys to scaling.

