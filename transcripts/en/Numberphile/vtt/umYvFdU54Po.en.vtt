WEBVTT
Kind: captions
Language: en

00:00:00.966 --> 00:00:04.330
JAMES CLEWETT: Today we are
talking about Pac-Man, which

00:00:04.330 --> 00:00:08.020
is a game from the early '80s,
and obviously one of the

00:00:08.020 --> 00:00:09.715
definitive arcade games.

00:00:09.715 --> 00:00:13.660
[VIDEO GAME SOUNDS]

00:00:13.660 --> 00:00:16.219
And something that probably a
lot of people don't know,

00:00:16.219 --> 00:00:18.990
because most people don't spend
their time compulsively

00:00:18.990 --> 00:00:22.700
playing video games, is that
Pac-Man comes to a dead halt

00:00:22.700 --> 00:00:24.920
at level 255.

00:00:24.920 --> 00:00:27.900
We are going to be talking today
about the number 255.

00:00:27.900 --> 00:00:30.880
BRADY HARAN: Have you ever
got to level 255?

00:00:30.880 --> 00:00:31.080
JAMES CLEWETT: No.

00:00:31.080 --> 00:00:34.840
Pac-Man's not my game, so I've
made it to level 20 or 30, and

00:00:34.840 --> 00:00:38.470
then normally I need a wee
or something, and so.

00:00:38.470 --> 00:00:40.650
I guess what this relates to
is the way computers and

00:00:40.650 --> 00:00:42.740
microchips were built back
in the early '80s.

00:00:42.740 --> 00:00:45.500
They were all just
8-bit processors.

00:00:45.500 --> 00:00:48.950
And what that meant was that
they had eight lines inside

00:00:48.950 --> 00:00:52.270
the processor for carrying the
numbers on, which limited what

00:00:52.270 --> 00:00:53.530
the computers could do.

00:00:53.530 --> 00:00:56.970
Today I'm going to show you how
and why that limits what

00:00:56.970 --> 00:00:57.970
computers can do.

00:00:57.970 --> 00:00:59.860
Well, I'm going to start
by showing you

00:00:59.860 --> 00:01:01.500
how computers count.

00:01:01.500 --> 00:01:05.200
Computers count in a thing
called binary, which basically

00:01:05.200 --> 00:01:08.050
means they have on and off.

00:01:08.050 --> 00:01:10.490
So let's start with off.

00:01:10.490 --> 00:01:12.280
And we're going to pretend
that this is a

00:01:12.280 --> 00:01:14.090
computer with 4 bits.

00:01:14.090 --> 00:01:19.700
And for the number 0, each one
of those lines is set to 0.

00:01:19.700 --> 00:01:22.360
So all I'm going to do is start
adding numbers to the

00:01:22.360 --> 00:01:23.630
rightmost column.

00:01:23.630 --> 00:01:27.820
I'm going to add a 1 to the 0,
and then the rest of the

00:01:27.820 --> 00:01:29.620
numbers stay the same.

00:01:29.620 --> 00:01:30.810
And that is the number 1.

00:01:30.810 --> 00:01:33.610
So now we're going to aim
to add another 1 to go

00:01:33.610 --> 00:01:34.970
to the number 2.

00:01:34.970 --> 00:01:38.730
So when I add a 1 to this column
in binary, there's no

00:01:38.730 --> 00:01:39.990
more space in this column.

00:01:39.990 --> 00:01:43.540
OK, so what we're going to have
to do now is carry 1 into

00:01:43.540 --> 00:01:47.600
the next column, exactly the
same as adding 1 to 9 would be

00:01:47.600 --> 00:01:48.180
in decimal.

00:01:48.180 --> 00:01:52.570
So I add 1, that becomes
a 0, and we carry 1

00:01:52.570 --> 00:01:53.950
into the next column.

00:01:53.950 --> 00:01:56.010
And the rest of the columns
stay the same.

00:01:56.010 --> 00:01:57.210
And that is the number 2.

00:01:57.210 --> 00:02:01.830
So for number 3, what we're
going to do is add 1 to the 2,

00:02:01.830 --> 00:02:04.480
so 0 plus 1 is 1.

00:02:04.480 --> 00:02:07.480
This column remains unchanged,
and these

00:02:07.480 --> 00:02:08.949
columns remain unchanged.

00:02:08.949 --> 00:02:11.530
OK, now then, the number 4.

00:02:11.530 --> 00:02:12.750
Well, that's 3 plus 1.

00:02:12.750 --> 00:02:15.660
So I add 1 to this column,
and it has to carry.

00:02:15.660 --> 00:02:19.460
So we get a 0, which means I
add 1 to this column, and

00:02:19.460 --> 00:02:20.410
again it has to carry.

00:02:20.410 --> 00:02:24.370
So I get another 0, and I
carry into this column.

00:02:24.370 --> 00:02:26.460
And that is unchanged again.

00:02:26.460 --> 00:02:27.670
That is the number 4.

00:02:27.670 --> 00:02:29.350
OK, let's rattle through
a few more.

00:02:29.350 --> 00:02:34.440
I'm going to write down the
number 6, which is 0, 1, 1, 0.

00:02:34.440 --> 00:02:39.150
The number 7, 0, 1, 1, 1.

00:02:39.150 --> 00:02:43.510
The number 15, 1, 1, 1, 1.

00:02:43.510 --> 00:02:47.890
And then we get to the number
16, and we have a problem.

00:02:47.890 --> 00:02:52.200
OK, because I'm going to add 1
to this column, which means

00:02:52.200 --> 00:02:55.740
it's got to carry, which means
I add 1 to this column.

00:02:55.740 --> 00:02:57.130
It has to carry.

00:02:57.130 --> 00:03:00.440
I add 1 to this column,
it carries.

00:03:00.440 --> 00:03:04.120
I add 1 to this column,
and so it carries.

00:03:04.120 --> 00:03:05.410
We've run out of space.

00:03:05.410 --> 00:03:09.140
I don't have another line
to add a number to.

00:03:09.140 --> 00:03:12.300
Because what I want to
do is put 1 here.

00:03:12.300 --> 00:03:14.650
But that, as far as the
computer's concerned, this

00:03:14.650 --> 00:03:16.420
simply doesn't exist.

00:03:16.420 --> 00:03:17.280
So what's happened?

00:03:17.280 --> 00:03:20.050
We've wrapped back to where
we started from.

00:03:20.050 --> 00:03:24.190
So we've hit a dead end, and we
can only count to 15 using

00:03:24.190 --> 00:03:25.480
a 4-bit number.

00:03:25.480 --> 00:03:28.120
And what I want to do is take
this back to the Pac-Man

00:03:28.120 --> 00:03:29.200
problem, OK?

00:03:29.200 --> 00:03:32.010
So Pac-Man had a microprocessor
which was an

00:03:32.010 --> 00:03:35.020
8-bit microprocessor, not
a 4-bit microprocessor.

00:03:35.020 --> 00:03:37.060
And what that means is that if
we want to represent the

00:03:37.060 --> 00:03:40.410
number 0, we need eight 0's.

00:03:40.410 --> 00:03:45.990
1, 2, 3, 4, 1, 2, 3, 4.

00:03:45.990 --> 00:03:47.500
OK, let's do it again.

00:03:47.500 --> 00:03:48.750
The number 1.

00:03:54.110 --> 00:03:56.420
What about the number 2?

00:03:56.420 --> 00:03:59.955
I'm going to be drawing
a lot here, but OK.

00:03:59.955 --> 00:04:01.255
I'm going to do the number 8.

00:04:07.880 --> 00:04:11.740
Now let's skip up just a few
more to what would be the

00:04:11.740 --> 00:04:14.880
number 253.

00:04:14.880 --> 00:04:17.125
OK, so we're getting close
to the end here.

00:04:17.125 --> 00:04:18.560
1, 0, 1.

00:04:18.560 --> 00:04:26.140
OK, the number 254.

00:04:26.140 --> 00:04:33.630
The number 255.

00:04:33.630 --> 00:04:36.070
And we've come back to
a point where we

00:04:36.070 --> 00:04:37.660
reach a familiar problem.

00:04:37.660 --> 00:04:41.540
If I want to count to
256, here we go.

00:04:41.540 --> 00:04:44.700
I'm going to add 1 to 255.

00:04:44.700 --> 00:04:48.280
So it carries here, it
carries here, it

00:04:48.280 --> 00:04:50.450
carries here and here.

00:04:50.450 --> 00:04:53.370
And again, it carries here,
here, here, and here.

00:04:53.370 --> 00:04:55.860
And I want to put 1 here.

00:04:55.860 --> 00:04:59.190
But the computer, Pac-Man simply
doesn't have a number

00:04:59.190 --> 00:05:01.540
big enough to store
that value.

00:05:01.540 --> 00:05:03.080
And we're scuppered.

00:05:03.080 --> 00:05:04.730
OK, so that's it.

00:05:04.730 --> 00:05:08.320
That is why 8-bit computers
can only count

00:05:08.320 --> 00:05:10.530
to the number 255.

00:05:10.530 --> 00:05:13.230
And as a child, I was
fascinated by this.

00:05:13.230 --> 00:05:17.530
Absolutely fascinated, but it's
taken me 15 years to get

00:05:17.530 --> 00:05:18.850
to the point where I can
explain it to you.

