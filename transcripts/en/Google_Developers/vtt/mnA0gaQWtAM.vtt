WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.020
Within the Billing API, you
can integrate in-app billing

00:00:03.020 --> 00:00:05.010
into your Android applications.

00:00:05.010 --> 00:00:05.590
Hi.

00:00:05.590 --> 00:00:06.430
I'm Neto Marin.

00:00:06.430 --> 00:00:08.520
In a previous episode,
we looked at what

00:00:08.520 --> 00:00:10.900
you can offer to users
through in-app billing.

00:00:10.900 --> 00:00:13.307
In this episode,
let's implement it.

00:00:13.307 --> 00:00:14.890
To make it generally
more comfortable,

00:00:14.890 --> 00:00:16.560
we created a [INAUDIBLE]
implementation

00:00:16.560 --> 00:00:19.990
for in-app billing version
3 API called Trivial Drive.

00:00:19.990 --> 00:00:21.940
This app includes
convenience class

00:00:21.940 --> 00:00:24.590
to quick setup the
in-app billing service.

00:00:24.590 --> 00:00:27.120
You can import this
sample from Android Studio

00:00:27.120 --> 00:00:29.745
or use a GUID to
clone repository.

00:00:29.745 --> 00:00:31.730
But before we
actually start coding,

00:00:31.730 --> 00:00:34.490
I will help you to set up
your app in the Google Play

00:00:34.490 --> 00:00:37.430
Developer Console and prepare
development environment

00:00:37.430 --> 00:00:39.120
with Android Studio.

00:00:39.120 --> 00:00:41.920
To sell products, you need to
add them to the Google Play

00:00:41.920 --> 00:00:43.200
Developer Console.

00:00:43.200 --> 00:00:45.850
To add these products,
you must have an app.

00:00:45.850 --> 00:00:48.450
But don't necessarily
publish it.

00:00:48.450 --> 00:00:51.100
If you need help about
how to create and set up

00:00:51.100 --> 00:00:55.086
a developer account on Google
Play, check our documentation.

00:00:55.086 --> 00:00:58.690
To create your app, click the
Add New Application button.

00:00:58.690 --> 00:01:00.960
Enter a name for
your new application

00:01:00.960 --> 00:01:03.130
and click on Prepare
Store Listing.

00:01:03.130 --> 00:01:05.950
And now you have an
Android app as a draft.

00:01:05.950 --> 00:01:10.630
And you imagine, now it's time
to add your products, right?

00:01:10.630 --> 00:01:11.370
Almost.

00:01:11.370 --> 00:01:14.160
Before you can start
adding new products,

00:01:14.160 --> 00:01:17.540
you need to upload an APK, the
Android application package,

00:01:17.540 --> 00:01:20.390
with the billing
permission in your app.

00:01:20.390 --> 00:01:22.690
Now, let's move to
Android Studio and check

00:01:22.690 --> 00:01:25.620
what you need to do to prepare
the development environment,

00:01:25.620 --> 00:01:29.910
generate and upload your APK
with in-app billing enabled.

00:01:29.910 --> 00:01:32.690
First, you have to install
the in-app billing library

00:01:32.690 --> 00:01:34.750
using the Android SDK Manager.

00:01:34.750 --> 00:01:37.560
In Android Studio, we can
access it through the icon,

00:01:37.560 --> 00:01:42.030
or using the menu, Tools,
Android, Android SDK Manager.

00:01:42.030 --> 00:01:45.840
Then, in the SDK Manager,
go to the SDK Tools tab.

00:01:45.840 --> 00:01:49.260
In the list of tools, check the
Google Play Billing library.

00:01:49.260 --> 00:01:51.740
Click OK to complete
the installation.

00:01:51.740 --> 00:01:55.010
Now you can create your project
to integrate in-app billing

00:01:55.010 --> 00:01:57.600
or open existing
project for which you

00:01:57.600 --> 00:02:00.730
want to use in-app billing
and start preparing it.

00:02:00.730 --> 00:02:03.500
The communication between
Google Play and your app

00:02:03.500 --> 00:02:05.430
will be done using a service.

00:02:05.430 --> 00:02:07.500
And to define this
service, you need

00:02:07.500 --> 00:02:10.090
to create an Android
Interface Definition Language

00:02:10.090 --> 00:02:12.180
file, or AIDL.

00:02:12.180 --> 00:02:13.820
In your project,
this file should

00:02:13.820 --> 00:02:17.940
be placed inside a specific
directory in a package.

00:02:17.940 --> 00:02:23.049
First, create the director AIDL
under the path Search [? Me. ?]

00:02:23.049 --> 00:02:25.590
Then create a new package called
com.android.vending.BILLING.

00:02:28.930 --> 00:02:32.770
A simple AIDL file,
inappbillingservice.aidl,

00:02:32.770 --> 00:02:34.870
is provided by in-app
billing library,

00:02:34.870 --> 00:02:37.425
and you can find it in your
SDK installation in the folder

00:02:37.425 --> 00:02:38.550
extras/google/play_billing.

00:02:41.440 --> 00:02:43.660
You can check during
the SDK installation

00:02:43.660 --> 00:02:46.010
inside Android Studio.

00:02:46.010 --> 00:02:48.130
Using the File Explorer
and Operation assistant,

00:02:48.130 --> 00:02:51.020
copy this file
into your project.

00:02:51.020 --> 00:02:54.010
The next step is to update
your Android manifest,

00:02:54.010 --> 00:02:58.050
adding the permissions to
com.android.vending.BILLING

00:02:58.050 --> 00:03:00.640
under the Application tag.

00:03:00.640 --> 00:03:03.910
Now your approach is ready and
with the right permissions.

00:03:03.910 --> 00:03:07.300
So you can generate APK and
upload into the Google Play

00:03:07.300 --> 00:03:10.355
Developer Console, and
use the web interface

00:03:10.355 --> 00:03:12.950
to add the products
and subscriptions you

00:03:12.950 --> 00:03:14.123
want to offer.

00:03:14.123 --> 00:03:17.670
To add your products, go to
Google Play Developer Console,

00:03:17.670 --> 00:03:20.250
and then to the
In-app Products tab.

00:03:20.250 --> 00:03:22.390
For example, here,
we have a product

00:03:22.390 --> 00:03:26.560
called Gas with the ID
Gas and the price of $1.

00:03:26.560 --> 00:03:29.320
And it's configured
as a managed product.

00:03:29.320 --> 00:03:32.190
These IDs, also
known as SKUs, are

00:03:32.190 --> 00:03:35.660
important because they will be
used to start the purchase flow

00:03:35.660 --> 00:03:38.160
and make other requests.

00:03:38.160 --> 00:03:41.370
Now that you created a product,
configured the development

00:03:41.370 --> 00:03:44.510
environment, let's see how
to send requests and purchase

00:03:44.510 --> 00:03:45.860
products.

00:03:45.860 --> 00:03:48.140
Before I can start sending
requests from Google Play,

00:03:48.140 --> 00:03:51.160
you need to establish the
connection between your app

00:03:51.160 --> 00:03:53.290
and the in-app billing service.

00:03:53.290 --> 00:03:57.070
The convenience class IAB
Helper provided in this sample

00:03:57.070 --> 00:03:59.130
under the package
[INAUDIBLE] handles

00:03:59.130 --> 00:04:01.630
the binding to the
in-app billing service.

00:04:01.630 --> 00:04:04.410
For example, to bind your app
to the Google Play Service,

00:04:04.410 --> 00:04:07.810
first create an IAB Helper
instance in your activities

00:04:07.810 --> 00:04:12.070
on create method, passing
your public license key along

00:04:12.070 --> 00:04:13.620
to the construct.

00:04:13.620 --> 00:04:16.940
And important point here
is about your license key.

00:04:16.940 --> 00:04:20.269
This license key can be found
in Google Play Developer Console

00:04:20.269 --> 00:04:22.870
under the section
Services and API.

00:04:22.870 --> 00:04:25.120
But instead of hard
coding your key,

00:04:25.120 --> 00:04:29.610
construct it at runtime from
substrings or retrieve it from

00:04:29.610 --> 00:04:33.280
encrypted resource before
using with the constructor.

00:04:33.280 --> 00:04:36.720
Next, perform the service
binding by calling the start

00:04:36.720 --> 00:04:40.840
setup method on the IAB
Helper instance you created.

00:04:40.840 --> 00:04:42.930
To check if the
binding's finished,

00:04:42.930 --> 00:04:47.290
implement the listener on
IAB setup finished listener.

00:04:47.290 --> 00:04:49.720
And, if setup
completed successfully,

00:04:49.720 --> 00:04:51.970
you can now use the
service [INAUDIBLE]

00:04:51.970 --> 00:04:54.180
to communicate with
the Google Play.

00:04:54.180 --> 00:04:56.860
Remember to unbind from
in-app billing service

00:04:56.860 --> 00:04:58.910
when you are done
with your activity

00:04:58.910 --> 00:05:02.510
because if you don't unbind,
this open service connection

00:05:02.510 --> 00:05:05.917
could cause your device
performance to degrade.

00:05:05.917 --> 00:05:07.750
With your connection
to Google Play working,

00:05:07.750 --> 00:05:09.690
you can start
listing your products

00:05:09.690 --> 00:05:11.740
and present some details.

00:05:11.740 --> 00:05:14.250
To get the item details
from Google Play,

00:05:14.250 --> 00:05:17.550
you can call
getSkuDetails, passing

00:05:17.550 --> 00:05:20.990
a bundle that contains a string
[INAUDIBLE] list of product

00:05:20.990 --> 00:05:26.130
IDs with key item ID list,
where each string is a product

00:05:26.130 --> 00:05:28.290
ID for an item.

00:05:28.290 --> 00:05:31.080
GetSkuDetails
returns a bundle that

00:05:31.080 --> 00:05:34.680
contains the response code
with the key response code

00:05:34.680 --> 00:05:37.980
and a string [INAUDIBLE] list
with the key details list.

00:05:37.980 --> 00:05:39.560
Each string in the
[INAUDIBLE] list

00:05:39.560 --> 00:05:43.460
is a JSON containing
the product information.

00:05:43.460 --> 00:05:47.080
And when the user chooses a
product in your list, like Gas

00:05:47.080 --> 00:05:49.780
in your sample, and
hits the Buy button,

00:05:49.780 --> 00:05:52.740
it's time to start
the purchase flow.

00:05:52.740 --> 00:05:55.440
Since all transactions
are done by Google Play,

00:05:55.440 --> 00:05:59.230
you must create an intent
with purchase information.

00:05:59.230 --> 00:06:02.450
This is done by calling
the method getBuyIntent,

00:06:02.450 --> 00:06:05.940
passing the in-app building
API version, the app's package

00:06:05.940 --> 00:06:09.680
name, the product ID to be
purchased, the purchase type,

00:06:09.680 --> 00:06:12.270
and a developer payload string.

00:06:12.270 --> 00:06:14.050
The developer payload
string is used

00:06:14.050 --> 00:06:16.445
to specify any additional
argument that you

00:06:16.445 --> 00:06:20.800
want Google Play sent back along
with the purchase information.

00:06:20.800 --> 00:06:22.500
This method will
return a bundle,

00:06:22.500 --> 00:06:24.340
and you can get
the pendingIntent

00:06:24.340 --> 00:06:26.830
with the key BuyIntent.

00:06:26.830 --> 00:06:29.330
To complete the
purchase transaction,

00:06:29.330 --> 00:06:32.790
call the
startIntentSenderForResult

00:06:32.790 --> 00:06:33.500
method.

00:06:33.500 --> 00:06:36.110
Then use the pendingIntent
that you created.

00:06:36.110 --> 00:06:39.540
In this example, we are using
an arbitrary value of 1001

00:06:39.540 --> 00:06:41.640
for the request code.

00:06:41.640 --> 00:06:43.545
Once the user finishes
the transaction,

00:06:43.545 --> 00:06:46.540
you will receive the
response from Google Play

00:06:46.540 --> 00:06:50.380
in your pendingIntent through
the method onActiveToResult.

00:06:50.380 --> 00:06:54.630
The purchase data for the order
is a string in the JSON format

00:06:54.630 --> 00:06:56.960
that it's mapped to the
in-app purchase data

00:06:56.960 --> 00:07:00.910
key and the response
intent, like this one.

00:07:00.910 --> 00:07:03.870
Anything you need you can
hit a list of purchases

00:07:03.870 --> 00:07:07.850
that were made by your user,
calling the method getPurchase.

00:07:07.850 --> 00:07:10.400
And Google Play
manages the local cache

00:07:10.400 --> 00:07:12.220
for purchased
items, so you don't

00:07:12.220 --> 00:07:15.420
need to keep your own
database or history.

00:07:15.420 --> 00:07:18.670
Some products can be purchased
several times, like Gas

00:07:18.670 --> 00:07:20.910
on our Trivial Drive sample.

00:07:20.910 --> 00:07:23.970
But the in-app billing API
offers managed products,

00:07:23.970 --> 00:07:27.050
which means that Google
Play manages and tracks

00:07:27.050 --> 00:07:29.260
the product's ownership for you.

00:07:29.260 --> 00:07:32.450
And before a user can purchase
the same product again,

00:07:32.450 --> 00:07:35.710
you must send the consumption
request to Google Play.

00:07:35.710 --> 00:07:37.460
To record a purchase
consumption,

00:07:37.460 --> 00:07:40.890
send the consumePurchase method
to the in-app billing service

00:07:40.890 --> 00:07:43.420
and pass in the
purchase token string

00:07:43.420 --> 00:07:46.970
the value that identifies
a purchase to be consumed.

00:07:46.970 --> 00:07:49.860
The purchase token is
part of the data returned

00:07:49.860 --> 00:07:51.910
in the in-app
purchase data string

00:07:51.910 --> 00:07:54.650
after a successful
purchase request.

00:07:54.650 --> 00:07:56.280
Other options you
can offer in your app

00:07:56.280 --> 00:07:58.250
is a subscription service.

00:07:58.250 --> 00:08:01.710
Let's suppose I want my car to
go on forever without having

00:08:01.710 --> 00:08:03.300
to worry about fuel.

00:08:03.300 --> 00:08:04.150
Great, huh?

00:08:04.150 --> 00:08:06.330
For a small fee,
Trivial Drive lets

00:08:06.330 --> 00:08:08.140
me purchase a
recurring subscription

00:08:08.140 --> 00:08:10.670
so that my tank is always full.

00:08:10.670 --> 00:08:12.230
The purchase flow
for subscriptions

00:08:12.230 --> 00:08:14.750
is similar to the purchase
flow for a product,

00:08:14.750 --> 00:08:16.640
with the exception
that the product type

00:08:16.640 --> 00:08:19.250
must be set to Subs.

00:08:19.250 --> 00:08:23.040
Check out this video for more
details about subscriptions.

00:08:23.040 --> 00:08:25.350
And now you know how
to prepare your project

00:08:25.350 --> 00:08:28.040
to use in-app billing, add
the products to Google Play

00:08:28.040 --> 00:08:30.830
Developer Console,
and also how to use

00:08:30.830 --> 00:08:34.890
the API to list products, start
a purchase, and list purchase.

00:08:34.890 --> 00:08:38.390
For handling funds and manging
your products programmatically,

00:08:38.390 --> 00:08:41.919
check out docs about the
Google Play Developer API.

00:08:41.919 --> 00:08:43.549
If you have any
questions, check out

00:08:43.549 --> 00:08:45.965
documentation for in-app billing
on developer.android.com.

00:08:47.934 --> 00:08:51.170
And don't forget the download
this sample application,

00:08:51.170 --> 00:08:53.890
Trivial Drive, where you can
see all the in-app billing

00:08:53.890 --> 00:08:56.390
implementation working.

00:08:56.390 --> 00:08:58.520
Looking forward to
see you making money

00:08:58.520 --> 00:08:59.430
with in-app billing.

00:08:59.430 --> 00:09:00.370
Thanks for watching.

00:09:00.370 --> 00:09:01.270
Bye bye.

00:09:01.270 --> 00:09:04.020
[MUSIC PLAYING]

