WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:04.830
We seem to have some users that
either by mistake or on purpose

00:00:04.830 --> 00:00:09.250
are signing up with email addresses
that don't exist or are not theirs.

00:00:09.250 --> 00:00:13.010
This issue's made worse by the fact that
we've associated Google login emails

00:00:13.010 --> 00:00:15.770
with the email password
logins that the user enters.

00:00:15.770 --> 00:00:18.670
This is starting to look
like a major security issue.

00:00:18.670 --> 00:00:19.620
Here, let me show you.

00:00:21.070 --> 00:00:22.780
All right.
So here's Walter.

00:00:22.780 --> 00:00:24.660
And here we have an evil hacker.

00:00:24.660 --> 00:00:26.860
Let's say that Walter
logs in with Google and

00:00:26.860 --> 00:00:29.930
that his Google account is
associated with his Gmail account

00:00:29.930 --> 00:00:33.870
which has the address
americanguyw1521@gmail.com.

00:00:33.870 --> 00:00:36.910
When this account was created it
also creates a user in our database.

00:00:36.910 --> 00:00:40.330
So he logs in and he's all happy and
he makes some shopping lists.

00:00:40.330 --> 00:00:43.600
Okay, so the hacker figures out
Walter's Gmail address because

00:00:43.600 --> 00:00:45.620
maybe Walter isn't too
shy about sharing it.

00:00:45.620 --> 00:00:48.700
He puts it up on a social networking
site or something like that.

00:00:48.700 --> 00:00:51.800
And then what the hacker does is he
makes an account through email and

00:00:51.800 --> 00:00:54.340
password, that uses
the same email address.

00:00:54.340 --> 00:00:57.600
And with how we've set things up,
he can still choose whatever password he

00:00:57.600 --> 00:00:59.670
likes and it's fine for
him to use this email.

00:00:59.670 --> 00:01:02.470
Because the real Walter never made
a user in fire base with an email and

00:01:02.470 --> 00:01:03.570
password, just with Google.

00:01:03.570 --> 00:01:05.030
With the code as it is now.

00:01:05.030 --> 00:01:06.580
These two accounts here are associated,

00:01:06.580 --> 00:01:08.760
and they are considered
to be the same user.

00:01:08.760 --> 00:01:12.260
So the hacker has now essentially
gotten into Walter's account

00:01:12.260 --> 00:01:14.390
because the same email
address was used for both.

00:01:14.390 --> 00:01:17.550
And all those new permissions that we
added such as only the owner can change

00:01:17.550 --> 00:01:20.280
the name of the list, or
only the owner can delete a list

00:01:20.280 --> 00:01:23.430
are meaningless because well, the hacker
has gotten into Water's account.

00:01:23.430 --> 00:01:26.370
So he can rename Walter's
list as much as he likes and

00:01:26.370 --> 00:01:28.850
poor Walter is powerless
to do anything about it.

00:01:28.850 --> 00:01:31.980
As we start writing more code related to
ownership of the app, Walter is going to

00:01:31.980 --> 00:01:34.880
get the ability to make lists that
are private to himself, but with this

00:01:34.880 --> 00:01:38.580
security flaw, a hacker would be able
to see all of Walter's items and lists.

00:01:38.580 --> 00:01:41.720
Now you might be saying let's
unassociate the two email addresses.

00:01:41.720 --> 00:01:45.845
But this would still leave an issue that
the hacker could enter the account and

00:01:45.845 --> 00:01:47.210
sort of masquerade as Walter.

00:01:47.210 --> 00:01:50.340
It would also mean that Walter could not
use his own email address if he ever

00:01:50.340 --> 00:01:52.950
decided to make an email
password provider user.

00:01:52.950 --> 00:01:55.900
So I think a better way to go about
this is to try to think of a way that we

00:01:55.900 --> 00:01:58.560
can have the user prove that they
actually own the email address

00:01:58.560 --> 00:01:59.510
that they've put in.

00:01:59.510 --> 00:02:00.190
To do this,

00:02:00.190 --> 00:02:04.440
you could employ a creative use of
Firebase's password reset functionality.

00:02:04.440 --> 00:02:06.280
Here I am in the Login and off tab.

00:02:06.280 --> 00:02:07.620
And if you scroll down,

00:02:07.620 --> 00:02:10.120
you'll see the section that's
all about password resets.

00:02:10.120 --> 00:02:14.190
In your code, you could trigger for a
user to receive a password reset email.

00:02:14.190 --> 00:02:16.660
And here's where you can configure
what that email will will look like.

00:02:16.660 --> 00:02:19.360
You can configure things like what
the subject of the email will be

00:02:19.360 --> 00:02:20.590
or who it's from.

00:02:20.590 --> 00:02:22.430
And if you scroll down
a little bit more,

00:02:22.430 --> 00:02:23.830
here's the actual body of the email.

00:02:23.830 --> 00:02:26.530
Now, this includes a token string and
this token string is

00:02:26.530 --> 00:02:29.690
basically the reset password
that is generated for your user.

00:02:29.690 --> 00:02:32.990
So with all of this in mind, here's
the new flow that I'm thinking of.

00:02:32.990 --> 00:02:36.360
First, when the user signs up, they'll
no longer be asked for a password.

00:02:36.360 --> 00:02:39.220
Instead, the screen will just
take their email and their name.

00:02:39.220 --> 00:02:42.130
This is the information that will
be used in the call to create user.

00:02:42.130 --> 00:02:44.980
We'll generate a sort of dummy password
that we're going to throw away pretty

00:02:44.980 --> 00:02:47.890
quickly, because if creating
that user is successful,

00:02:47.890 --> 00:02:51.080
we'll immediately reset the password
using the resetPassword method.

00:02:51.080 --> 00:02:53.140
Immediately after
resetting the password,

00:02:53.140 --> 00:02:55.980
an intent will open
the user's default email app.

00:02:55.980 --> 00:02:59.280
Now, resetPassword is the method that
triggers that email to be sent to

00:02:59.280 --> 00:03:02.140
the user and it uses the email
address that they entered here so

00:03:02.140 --> 00:03:04.780
as long as they're connected
to the Internet they should

00:03:04.780 --> 00:03:08.039
see that first email in their email
inbox is the password reset email.

00:03:08.039 --> 00:03:09.947
And they can go ahead and
open that email and

00:03:09.947 --> 00:03:11.625
get a randomly generated password.

00:03:11.625 --> 00:03:13.845
They can then copy the password
that's in their email and

00:03:13.845 --> 00:03:14.975
navigate back to the app.

00:03:14.975 --> 00:03:18.255
When they return to the app instead
of seeing the create account activity

00:03:18.255 --> 00:03:21.335
screen instead they'll see
the log in activity screen.

00:03:21.335 --> 00:03:22.497
And we can even be nice and

00:03:22.497 --> 00:03:26.410
pre populate the email up here with
whatever email they originally gave us.

00:03:26.410 --> 00:03:28.630
Then if we instructed them
to copy the password here,

00:03:28.630 --> 00:03:30.500
they could paste it here and sign in.

00:03:30.500 --> 00:03:32.800
And for now,
the first time that the user signs in,

00:03:32.800 --> 00:03:35.850
we can actually use fire
bases change password method

00:03:35.850 --> 00:03:38.790
to then change the random password
that was originally generated for

00:03:38.790 --> 00:03:41.110
the user, to the reset password
that they just put in.

00:03:41.110 --> 00:03:43.810
And then this way we can
confirm that the user

00:03:43.810 --> 00:03:46.840
at least has access to the email
account that they put in here.

00:03:46.840 --> 00:03:48.770
Okay, now this is by no means perfect.

00:03:48.770 --> 00:03:52.620
For one, it makes the reset password
the user's permanent password, and

00:03:52.620 --> 00:03:54.560
the reset password's
fairly hard to remember,

00:03:54.560 --> 00:03:57.580
it's just some sort of random
string of numbers and digits.

00:03:57.580 --> 00:03:59.920
Also, when you call
the resetPassword method,

00:03:59.920 --> 00:04:03.270
whatever password is generated
only works for 24 hours.

00:04:03.270 --> 00:04:06.970
So there is a scenario where
a user could create a new user,

00:04:06.970 --> 00:04:10.550
get the reset email and
then get busy and decide not to sign in,

00:04:10.550 --> 00:04:14.290
and then try to sign in after 24 hours
and lose access to their account.

00:04:14.290 --> 00:04:18.350
But for beta version 0.3,
I think this is a pretty good flow, and

00:04:18.350 --> 00:04:21.940
it does remove the most glaring security
flaws of our current login process.

00:04:21.940 --> 00:04:25.230
Okay, so let me quickly show you these
two methods that are new to you.

00:04:25.230 --> 00:04:26.820
The reset code is
pretty straightforward.

00:04:26.820 --> 00:04:29.560
Just like everything else that we've
been doing with authentication,

00:04:29.560 --> 00:04:30.920
you should grab a Firebase ref.

00:04:30.920 --> 00:04:34.020
You can then code reset password
on that Firebase ref, and

00:04:34.020 --> 00:04:36.880
all it really needs is an email
address that's in the system,

00:04:36.880 --> 00:04:39.510
which means an email address that
you've called create user with.

00:04:39.510 --> 00:04:42.525
If this reset password call is
successful, it will send an email and

00:04:42.525 --> 00:04:46.045
take it here, and if it's not successful
you'll get the error down here.

00:04:46.045 --> 00:04:46.925
This might happen for

00:04:46.925 --> 00:04:50.735
example if you put in an email address
here that doesn't exist in the system,

00:04:50.735 --> 00:04:53.585
you'd get the user does not exist
error that we've talked about before.

00:04:53.585 --> 00:04:57.020
When the user signs in for the first
time, you call change password method.

00:04:57.020 --> 00:04:59.340
This will take that same
email address of the user,

00:04:59.340 --> 00:05:01.610
as well as the old password and
the new password.

00:05:01.610 --> 00:05:03.750
You can use the reset password for
both of these.

00:05:03.750 --> 00:05:05.100
Now you should only change the password

00:05:05.100 --> 00:05:06.840
if this is the first time
that the user is logging in.

00:05:06.840 --> 00:05:10.420
I'll leave it up to you to decide how
to check whether the user has logged in

00:05:10.420 --> 00:05:12.140
before or hasn't logged in before.

00:05:12.140 --> 00:05:14.560
And if you forgot why calling
changePassword is important,

00:05:14.560 --> 00:05:17.740
it's because the users reset password
that they received in their email

00:05:17.740 --> 00:05:19.430
is only valid for 24 hours.

00:05:19.430 --> 00:05:22.790
Now if Shopping List Plus, Plus was
going into production immediately,

00:05:22.790 --> 00:05:24.900
what I'd have you do is
create some extra screen so

00:05:24.900 --> 00:05:27.790
the user could change their
password from the reset password

00:05:27.790 --> 00:05:30.330
to something that they could
memorize a little bit easier.

00:05:30.330 --> 00:05:32.060
But, again we'll start with this.

00:05:32.060 --> 00:05:34.260
Okay the full spec is on the way,
so good luck.

