WEBVTT
Kind: captions
Language: en-GB

00:00:00.420 --> 00:00:04.820
Sooner or later, every programmer has to deal with time zones.

00:00:04.840 --> 00:00:09.780
And I can't really offer much advice here; I can offer a cautionary tale.

00:00:09.780 --> 00:00:16.600
I can tell you why you really should never, ever deal with time zones if you can help it.

00:00:18.440 --> 00:00:21.560
Let's imagine that someone has built an application

00:00:21.560 --> 00:00:25.920
that lets you calculate how many seconds something is in the past.

00:00:25.920 --> 00:00:29.500
You type in a date and a time, it gives you the number of seconds.

00:00:29.500 --> 00:00:32.860
And they look at that and think "OK, that kind of works for me..."

00:00:32.860 --> 00:00:36.160
"But let's add a little box that lets you change the time zone"

00:00:36.160 --> 00:00:44.620
So if you're comparing between now in New York and five days ago in London, you can work that out.

00:00:44.620 --> 00:00:50.780
And that's fine - the little drop down lets you change which hour forward or backward of Greenwich you are.

00:00:50.780 --> 00:00:51.620
Brilliant.

00:00:51.620 --> 00:00:56.240
Sooner or later, after it gets a bit popular, they'll get a call from Australia.

00:00:56.240 --> 00:00:58.020
And Australia will say "G'day ma--"

00:00:58.020 --> 00:01:00.360
-- I'm not gonna try and do accents.

00:01:00.360 --> 00:01:02.360
I just shouldn't do accents.

00:01:02.360 --> 00:01:04.680
Australia will say "Hello!"

00:01:04.680 --> 00:01:09.640
"By the way, we're 9½ hours ahead of Greenwich."

00:01:09.640 --> 00:01:11.640
And the programmer will go "really?"

00:01:11.640 --> 00:01:13.080
"Yeah, 9½ hours."

00:01:13.080 --> 00:01:16.020
"OK, I'll add a special case for you. That's fine."

00:01:16.020 --> 00:01:18.800
A little bit later, someone will call from Nepal.

00:01:18.800 --> 00:01:24.180
And they'll say "Hello. We're 5¼ hours ahead of Greenwich."

00:01:24.180 --> 00:01:28.580
And they'll say "really?"
"Yeah we've been that for ages! Yeah 5¼ hours!"

00:01:28.580 --> 00:01:31.900
Great. Okay. And they'll put in a special case.
And maybe they'll look up

00:01:31.900 --> 00:01:35.760
the list of time zones. The Canonical list that tells you

00:01:35.760 --> 00:01:40.400
what everything is, and they'll make sure they've covered every time zone in the world.

00:01:40.740 --> 00:01:42.620
And then Autumn will come along.

00:01:42.620 --> 00:01:44.620
And they'll get a call from England.

00:01:44.620 --> 00:01:49.540
And England will say "Excuse me. Um, we're an hour out at the minute, what's going on?"

00:01:49.540 --> 00:01:51.540
"Hold on the clock's just changed!"

00:01:51.540 --> 00:01:53.960
"That's fine - no, we dealt with that."

00:01:53.960 --> 00:01:58.400
"We made a note of when daylight savings changes for us, and we've put that in!"

00:01:58.400 --> 00:02:03.260
And England will say "No, see daylight savings changes a week earlier for us."

00:02:03.260 --> 00:02:05.260
"It's different depending on where you live."

00:02:05.260 --> 00:02:08.660
"We shift our clocks back a week before you do."

00:02:08.660 --> 00:02:10.660
And at that point

00:02:10.660 --> 00:02:14.020
generally the programmer will start to hold their head in their hands

00:02:14.020 --> 00:02:16.240
and realise what they've gotten themselves into.

00:02:16.240 --> 00:02:18.240
And that's fine! They'll put that in

00:02:18.240 --> 00:02:22.620
and they will deal with each country shifting to daylight savings time on a different day.

00:02:22.620 --> 00:02:27.060
They'll look at the file that tells them how to do that and they'll copy all that in.

00:02:27.660 --> 00:02:30.940
Then they'll get a call from someone in the southern hemisphere again who will say

00:02:30.940 --> 00:02:34.680
"Yeah we're not shifting back in the Autumn we shift forward."

00:02:34.680 --> 00:02:38.380
"Our spring... is in November."

00:02:38.760 --> 00:02:44.600
At that point they'll generally start looking longingly at their intoxicant of choice

00:02:44.600 --> 00:02:47.880
and wondering whether they should have a quick drink before keeping going...

00:02:48.080 --> 00:02:50.080
...and they'll code that in as well.

00:02:50.080 --> 00:02:52.540
Then they'll get a call from Samoa.

00:02:52.540 --> 00:02:54.820
Out in the Pacific on the international date line.

00:02:54.820 --> 00:02:57.460
And Samoa will say "Hello!"

00:02:57.460 --> 00:02:59.840
"Yeah we skipped a day the other year."

00:02:59.840 --> 00:03:01.840
And the programmer will say "what?"

00:03:01.840 --> 00:03:10.540
"Yeah we skipped a day. We went from December 29th, 2011 to December 31st."

00:03:10.540 --> 00:03:15.980
"We shifted from one side of the international date line from being hours and hours behind Greenwich ...

00:03:15.980 --> 00:03:20.200
... to being hours and hours ahead of Greenwich. Helps us with trading with Australia."

00:03:20.680 --> 00:03:27.140
"Can you take account of that when you work out how many days things are, and how many seconds things are in the past?"

00:03:27.140 --> 00:03:33.000
[breathing deeply]
That's fine, there's a file that tells you when any country has changed its time zone.

00:03:33.000 --> 00:03:35.660
It turns out that that happens fairly often.

00:03:35.660 --> 00:03:40.140
But they're announced ahead of schedule so as long as you keep that file updated

00:03:40.140 --> 00:03:43.580
and code that into your program's logic as well, it'll be fine.

00:03:43.580 --> 00:03:46.680
Then you look back and you notice that during World War II,

00:03:46.680 --> 00:03:49.620
England had double British Summer Time.

00:03:49.620 --> 00:03:54.240
It went completely onto BST and then just added an extra hour.

00:03:54.240 --> 00:03:57.660
So it was two hours ahead of Greenwich despite... having Greenwich.

00:03:57.660 --> 00:03:59.260
That's fine you deal with that.

00:03:59.260 --> 00:04:02.740
Have you noticed I've started talking as if it was you or me?

00:04:02.740 --> 00:04:05.960
Because I've done this before and it's really, really frustrating.

00:04:05.960 --> 00:04:08.900
And you make sure you subscribe to the list

00:04:08.900 --> 00:04:14.280
of when countries are going to change their time zones - which happens, apparently, many times!

00:04:14.280 --> 00:04:18.940
Like, sometimes, several times in a year because governments change over.

00:04:18.940 --> 00:04:22.580
And then this mythical programmer gets a call from Libya;

00:04:22.580 --> 00:04:28.600
who in 2013, with only a couple of days' notice, decided that they weren't going to put the clocks back.

00:04:28.740 --> 00:04:34.020
With enough notice that it wasn't possible for anyone to get the update out in time.

00:04:34.020 --> 00:04:38.520
Meaning that every Libyan computer, no matter what operating system it ran...

00:04:38.520 --> 00:04:40.520
... was an hour out.

00:04:41.080 --> 00:04:45.660
That's OK, you read the news article about that and you hurriedly code that in as well.

00:04:45.660 --> 00:04:49.260
And then, then you get a call from the West Bank.

00:04:49.260 --> 00:04:56.080
Where the Israeli population is on a different time zone to the Palestinian population.

00:04:56.080 --> 00:04:59.220
Because one is following Israel and one isn't.

00:04:59.220 --> 00:05:05.080
Now you have two populations of people in the same location who are following different time zones.

00:05:05.080 --> 00:05:11.640
And now they're all having to ask themselves whether they're on this time zone or this one, depending on who they are and where they are

00:05:11.640 --> 00:05:14.400
And there's no way to code that into your program! And then...

00:05:14.400 --> 00:05:17.640
Then you get a call from the historian.

00:05:17.640 --> 00:05:23.900
Who says "Right, I'm trying to calculate some times back in the 18th century."

00:05:23.900 --> 00:05:29.060
"And we changed from the Julian calendar to the Gregorian calendar."

00:05:29.060 --> 00:05:32.120
"It's not that we lost about three weeks ...

00:05:32.120 --> 00:05:37.260
... it's just that we skipped right from this date to this date, and missed the others."

00:05:38.040 --> 00:05:42.760
"Can you code it so that it just kind of works that out for me?"

00:05:43.240 --> 00:05:47.320
It's fine because someone has already told you when those dates are,

00:05:47.320 --> 00:05:49.660
and you can code that into your program's logic as well

00:05:49.660 --> 00:05:52.240
but now it's looking really, long and really complicated

00:05:52.240 --> 00:05:55.800
and it's a tangled mess of spaghetti code that somehow works

00:05:55.800 --> 00:05:58.620
and then you get a call from the Russian historian!

00:05:58.620 --> 00:06:03.360
Who says "Yeah, we only changed to the Gregorian calendar in the 20th century ...

00:06:03.360 --> 00:06:08.300
... and it turns out the dates you've skipped change depending on your location ...

00:06:08.300 --> 00:06:11.320
... and can you deal with that as well?"
And then you get a call from the British historian!

00:06:11.320 --> 00:06:15.140
Who says that until, I think it was the 16th century ...

00:06:15.140 --> 00:06:19.240
the year started on the March 25th!

00:06:19.700 --> 00:06:21.500
Just to blow your mind there.

00:06:21.500 --> 00:06:26.300
From March 24th, 924

00:06:26.300 --> 00:06:31.340
and then it would be March 25th, 925. And that is the next day.

00:06:31.340 --> 00:06:39.120
Because you have gone from December 31st, 924, to January 1st, 924 because it goes in that order!

00:06:39.120 --> 00:06:41.240
It's massively complicated, AND THEN...

00:06:41.240 --> 00:06:44.240
You get the call from the astrophysicist...

00:06:44.240 --> 00:06:48.520
Who says "By the way, we just had a leap second!"

00:06:48.900 --> 00:06:52.220
And at this point, you just kind of go "... what?!"

00:06:52.220 --> 00:06:56.500
Leap seconds; because the Earth does not rotate at a constant speed.

00:06:56.500 --> 00:07:00.260
It slows down, it speeds up, as tectonic plates move about

00:07:00.260 --> 00:07:04.800
and magnetic fields shift, or something like that. And so occasionally

00:07:04.800 --> 00:07:10.140
the International Astronomical Union will work out whether we need a leap second.

00:07:10.140 --> 00:07:16.640
If you do, the clocks go 23:59:58

00:07:16.640 --> 00:07:19.140
and then it's 23:59:59

00:07:19.140 --> 00:07:23.680
and then instead of going [00:00:00] like any sensible time zone would

00:07:23.680 --> 00:07:26.840
it goes 23:59:60!

00:07:26.840 --> 00:07:31.600
And everything breaks because suddenly you have 61 seconds in a minute!

00:07:31.600 --> 00:07:35.120
So depending on your implementation, either ...

00:07:35.120 --> 00:07:39.160
... your clock gets one second out of sync with the rest of the world

00:07:39.160 --> 00:07:41.560
or it repeats a second.

00:07:41.560 --> 00:07:46.020
The way you're meant to deal with this is with something called the Unix Timestamp.

00:07:46.020 --> 00:07:48.960
And Numberphile, I think, has talked about this before.

00:07:48.960 --> 00:07:54.680
That you have this number that started on the first exact second of 1970

00:07:54.680 --> 00:07:57.620
and increments one second, per second.

00:07:57.620 --> 00:08:00.720
Constantly. Tick. Tick. Tick.

00:08:00.720 --> 00:08:05.840
And that's great because what you're meant to do is take whatever date has been given to you,

00:08:05.840 --> 00:08:08.200
and you calculate that as a Unix Timestamp,

00:08:08.200 --> 00:08:10.200
and you put that into your database.

00:08:10.200 --> 00:08:12.520
And that'll just deal with leap seconds

00:08:12.520 --> 00:08:14.580
EXCEPT IT DOESN'T! Of course it doesn't!

00:08:14.580 --> 00:08:18.500
Because you have Universal Coordinated Time

00:08:18.500 --> 00:08:21.020
which includes leap seconds!

00:08:21.020 --> 00:08:24.500
It repeats occasionally, and it just includes 23:59:60

00:08:24.500 --> 00:08:28.460
and then you have astronomical time! Which does not include leap seconds

00:08:28.460 --> 00:08:31.380
and has steadily been getting out of sync with the rest of the world

00:08:31.380 --> 00:08:34.700
because we need to look at the stars and design telescopes around it!

00:08:34.700 --> 00:08:36.580
[deep sigh]

00:08:36.580 --> 00:08:38.320
And what you learn...

00:08:38.320 --> 00:08:42.880
What you learn after dealing with time zones, is that what you do ...

00:08:42.880 --> 00:08:45.000
... is you put away your code ...

00:08:45.000 --> 00:08:47.540
... you don't try and write anything to deal with this.

00:08:47.540 --> 00:08:50.540
You look at the people who have been there before you.

00:08:50.540 --> 00:08:54.480
You look at the first people, the people who have dealt with this before,

00:08:54.480 --> 00:08:56.480
the people who have built the spaghetti code,

00:08:56.480 --> 00:09:00.860
and you thank them very much for making it open source,

00:09:00.860 --> 00:09:05.520
and you give them credit, and you take what they have made and you put it in your program,

00:09:05.520 --> 00:09:08.080
and you never ever look at it again.

00:09:08.080 --> 00:09:11.320
Because that way lies madness.

00:09:16.000 --> 00:09:20.440
Google actually has a really, really good approach to leap seconds that they invented themselves.

00:09:20.440 --> 00:09:23.640
There's an article about it on their blog, I think, that explains it.

00:09:23.640 --> 00:09:25.940
They do something called a "leap smear."

00:09:25.940 --> 00:09:28.980
Because having 61 seconds in a minute,

00:09:28.980 --> 00:09:31.820
or because having a clock tick back a second,

00:09:31.820 --> 00:09:36.620
can be really, really bad for massive agencies that have to

00:09:36.620 --> 00:09:42.500
synchronise everything really precisely and have to trust that one bit of data was stored before another,

00:09:42.500 --> 00:09:46.300
they essentially smear the second out over the whole day.

00:09:46.300 --> 00:09:49.660
They increase their clock by a microsecond at a time.

00:09:49.660 --> 00:09:52.320
Tick tick tick, all the way through the day.

00:09:52.320 --> 00:09:56.420
So that it's, sometimes maybe even half a second out from reality,

00:09:56.420 --> 00:09:59.520
but as long as everything on their servers is half a second out.

00:09:59.520 --> 00:10:07.280
It's built to be out of sync with the world, as long as it knows that one thing happened before another.

00:10:07.280 --> 00:10:12.120
Having continuity is more important than actually having accurate time.

