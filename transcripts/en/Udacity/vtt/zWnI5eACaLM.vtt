WEBVTT
Kind: captions
Language: en

00:00:00.560 --> 00:00:03.110
So, we can do another example of defining a recursive

00:00:03.110 --> 00:00:05.870
procedure. And the goal this time is to take in

00:00:05.870 --> 00:00:09.260
a string, and determine whether or not it's a palindrome.

00:00:09.260 --> 00:00:11.490
What a palindrome is, is a string that reads the same

00:00:11.490 --> 00:00:15.590
way, forwards and backwards. So, an example of a palindrome

00:00:15.590 --> 00:00:19.040
would be level. If we read level forwards, we get

00:00:19.040 --> 00:00:22.130
level If we read it backwards, we get exactly the

00:00:22.130 --> 00:00:25.900
same thing. Another example of a palindrome would be the word,

00:00:25.900 --> 00:00:28.530
the single letter a. If we read a forwards, we

00:00:28.530 --> 00:00:31.920
get a. If we read a backwards, we also get

00:00:31.920 --> 00:00:35.230
a. In fact, any single letter must be a palindrome.

00:00:35.230 --> 00:00:38.390
The empty string is also a palindrome. If we read

00:00:38.390 --> 00:00:41.520
the empty string forward, we have the empty string, if

00:00:41.520 --> 00:00:45.310
we read the string backward, we also have empty string.

00:00:45.310 --> 00:00:48.001
So, our goal is to define a procedure that will

00:00:48.001 --> 00:00:51.106
take any string as input and output true if that string

00:00:51.106 --> 00:00:54.040
is a palindrome. I am going to view, give you a few hints how

00:00:54.040 --> 00:00:57.770
to do this, but start thinking on your own, if you can think

00:00:57.770 --> 00:01:01.200
of a way to define a procedure that tests whether or not a

00:01:01.200 --> 00:01:04.542
string is a palindrome. So, this is a pretty tough question. See how far

00:01:04.542 --> 00:01:07.134
you can get on your own, but I'm going to provide some hints before

00:01:07.134 --> 00:01:09.960
we make the quiz. So, the first hint is, we want to think

00:01:09.960 --> 00:01:12.760
of what it means to be a palindrome. To try to formalize that

00:01:12.760 --> 00:01:16.520
definition, if we knew easy ways to produce the reverse of the string, and

00:01:16.520 --> 00:01:18.480
check if it's equal. Well that would be an easy way

00:01:18.480 --> 00:01:20.550
to solve this, and in fact there are ways to do that

00:01:20.550 --> 00:01:23.420
in Python. But we haven't seen them yet. And I want to

00:01:23.420 --> 00:01:26.610
have you think about ways to do this palindrome that don't depend

00:01:26.610 --> 00:01:29.850
on that. So, that means we need to think about a

00:01:29.850 --> 00:01:33.970
way of defining a palindrome in terms of simpler things. So, the

00:01:33.970 --> 00:01:37.660
first thing to notice is, there's one simple case where we know

00:01:37.660 --> 00:01:41.700
right away whether a string's a palindrome. So, we should think that

00:01:41.700 --> 00:01:44.820
that might be our base case. When we do

00:01:44.820 --> 00:01:48.320
procedures on numbers our base case is often something

00:01:48.320 --> 00:01:50.820
that deals with a number like zero or one,

00:01:50.820 --> 00:01:55.330
a small number. When we do recursive procedures on strings,

00:01:55.330 --> 00:01:57.340
it's more likely that our base case is going to

00:01:57.340 --> 00:02:01.310
be the simpler string, which is the empty string. So,

00:02:01.310 --> 00:02:03.190
we know that if the input is an empty

00:02:03.190 --> 00:02:06.970
string, the result of this palindrome is true. The empty

00:02:06.970 --> 00:02:09.580
string is a palindrome. What if the input's not an empty

00:02:09.580 --> 00:02:12.610
string. Well then, one way to solve that would be to

00:02:12.610 --> 00:02:15.150
look at the first letter of the string, and look at

00:02:15.150 --> 00:02:17.970
the last letter of the string. If those two are equal.

00:02:17.970 --> 00:02:21.630
Well, then it might be a palindrome. It's a palindrome if

00:02:21.630 --> 00:02:24.430
all the ones left over in the middle are also a

00:02:24.430 --> 00:02:28.190
palindrome. So, this is how we could break the question of

00:02:28.190 --> 00:02:31.980
testing whether a string's a palindrome into smaller steps, that our

00:02:31.980 --> 00:02:36.050
recursive case is going to test the first and the last

00:02:36.050 --> 00:02:39.570
character of the string, see if those are equal, so if

00:02:39.570 --> 00:02:42.840
our recursive case. We're going to test the first and the last

00:02:42.840 --> 00:02:45.770
characters of the string. If those don't match, we know it's

00:02:45.770 --> 00:02:48.520
not a palindrome. That means we know the result is

00:02:48.520 --> 00:02:51.100
false. If they do match, we're not done. We need to

00:02:51.100 --> 00:02:54.190
check the rest of the string. And that means, we need

00:02:54.190 --> 00:02:58.130
to check the middle of the string, if that's a palindrome.

00:02:58.130 --> 00:03:02.500
And because we're able to define this recursively, remember that

00:03:02.500 --> 00:03:06.080
we're defining the procedure is_palindrome, but we can do this test

00:03:06.080 --> 00:03:08.750
assuming that we've already defined it. In order to check whether

00:03:08.750 --> 00:03:11.260
the middle of the string is a palindrome we can use

00:03:11.260 --> 00:03:13.610
the procedure that we're defining. This is like we were

00:03:13.610 --> 00:03:16.530
able to use factorial to define factorial in terms of a

00:03:16.530 --> 00:03:20.210
smaller number. In this case, we're defining a palindrome in terms

00:03:20.210 --> 00:03:23.160
of the smaller string. So, I hope this is enough for

00:03:23.160 --> 00:03:24.380
you to get started, so see if you

00:03:24.380 --> 00:03:28.160
can define the code for is_palindrome, keeping in mind

00:03:28.160 --> 00:03:31.820
that we can break it down into these two cases where if it's empty, we know it's

00:03:31.820 --> 00:03:34.530
a palindrome right away, if it's not empty,

00:03:34.530 --> 00:03:35.970
well, we need to look at that first and

00:03:35.970 --> 00:03:38.990
last characters. If they do match, we also

00:03:38.990 --> 00:03:40.670
need to look at the middle of the string.

