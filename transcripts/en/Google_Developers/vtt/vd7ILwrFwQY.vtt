WEBVTT
Kind: captions
Language: en

00:00:01.569 --> 00:00:05.609
&gt;&gt; RUBY: Sorry about all this. My name is
Sam Ruby. IBM, Emerging Technology, Co-chair

00:00:05.609 --> 00:00:09.620
of W3C HTML working group and I work from
the FeedValidator, and that's--that's a bit

00:00:09.620 --> 00:00:16.980
relevant to some of the topics I'm bringing
up. I share a lot of Brad's perspectives and

00:00:16.980 --> 00:00:23.590
actually, you'll see--we'll actually share
some tapes and music, and not music, and movies.

00:00:23.590 --> 00:00:27.599
All these slides will be up on the Web. You
can see the link here but it will be up for

00:00:27.599 --> 00:00:35.390
everybody to get to, and there'll be links.
I also have a Weblog. The Weblog has a fair

00:00:35.390 --> 00:00:43.410
amount of SVG, every single one of my--okay.
Every single one of my entries has got an

00:00:43.410 --> 00:00:48.109
SVG element. I've done that for now for like
several years. Most of them are completely

00:00:48.109 --> 00:00:53.760
handcrafted. I was going to demo that, though
I can't--for technical reasons that are preventing

00:00:53.760 --> 00:01:01.879
me from actually demoing the editing MBI,
which is just as exciting as it sounds. [laugh]

00:01:01.879 --> 00:01:11.110
These are all in line SVG elements off serve
as application XHTML plus XML, and I do some

00:01:11.110 --> 00:01:16.890
special magic to make SVG Web work with this
on IE. So, even though, this is not officially

00:01:16.890 --> 00:01:23.619
supported, I supported it anyway. [pause]
That's not just on every image. I do some

00:01:23.619 --> 00:01:30.290
creative things to show the same images on
my archive's page. So, you can actually see

00:01:30.290 --> 00:01:37.360
on various days what I posted on and go to
them. That's--it's very helpful to be able

00:01:37.360 --> 00:01:41.240
to see just an image and that helps you quickly
find the entry you want to find on a Weblog.

00:01:41.240 --> 00:01:50.280
[pause] My site is called Intertwingly because
I tend to believe that things are often intermixed

00:01:50.280 --> 00:01:55.219
and related and interesting and on different
ways and sometimes not so wonderful ways.

00:01:55.219 --> 00:01:59.840
A lot of the things--Brad said, "This works."
Like, for example, you can search into hypertext

00:01:59.840 --> 00:02:03.729
links; just use the little asterisk next to
that. It works just as long you do this to

00:02:03.729 --> 00:02:07.020
the other but not if you do this other third
thing. Now that third thing is the thing that

00:02:07.020 --> 00:02:11.790
you end up finding out accidentally when you
run into it not because it's well documented

00:02:11.790 --> 00:02:17.500
everywhere. And I'll show an example of two
of that. So, the things are often all knotted

00:02:17.500 --> 00:02:23.610
up. Ground rules. This is--everything I'm
presenting here as I've said will be online

00:02:23.610 --> 00:02:27.110
here.
As you see it already is. Most important stuff

00:02:27.110 --> 00:02:30.420
first, if I happen to run over time I just
will kind of cut short. What I really mean

00:02:30.420 --> 00:02:33.870
by that is feel free to ask questions. This
is the reasonable response of the audience

00:02:33.870 --> 00:02:41.140
where if you've got something to say that's
fine. The presentation contains some code

00:02:41.140 --> 00:02:47.560
but this is all faster when it's [INDISTINCT].
Don't focus on the details. Focus on the social

00:02:47.560 --> 00:02:52.990
ramifications. That's really what I'm here
to talk about. [pause] Question to the audience,

00:02:52.990 --> 00:03:03.230
how did you learn HTML? Reading the spec?
[laugh] Formal education? There are classes

00:03:03.230 --> 00:03:13.730
on this stuff. Still no hands? [pause] Come
on. From a book? There are books. Hey, we

00:03:13.730 --> 00:03:24.040
got a couple of books and view source. Okay.
That's to be expected. [pause] Change the

00:03:24.040 --> 00:03:34.100
question to SVG. How many people learned SVG
from reading the spec? [laugh] It's a different--okay,

00:03:34.100 --> 00:03:44.890
formal education, from a book and view source.
Okay. For me I started with the spec. For

00:03:44.890 --> 00:03:52.280
HTML it was--of course, it was the other way
around and augmented with view source. Where's

00:03:52.280 --> 00:03:57.090
the source? A typical site, like this one,
it happens to have some SVG but you don't

00:03:57.090 --> 00:04:02.360
get to see it. It's not really SVG that's
shown there for various technical reasons.

00:04:02.360 --> 00:04:11.630
But hidden away in this particular one in
a link, if you go to "About" and scroll to

00:04:11.630 --> 00:04:17.120
the bottom, you might actually be able to
find there's a link to the Header Graphics.

00:04:17.120 --> 00:04:23.790
And if you go there, you'll find an SVG image
and--I don't know what the key button is for

00:04:23.790 --> 00:04:30.700
view source but I'll--okay, I might just have
backed up. You can--I'll try to do it. View

00:04:30.700 --> 00:04:46.530
source, page source, let's see. That's the
wrong source. [pause] What was that? That's

00:04:46.530 --> 00:04:57.460
fine. Okay. It's not so important in this
case. [pause] So in this one case, you can

00:04:57.460 --> 00:05:01.590
get to it but it's not that obvious. Let me
contrast something else that's a little more

00:05:01.590 --> 00:05:09.810
vital than SVG has been to date. PHP, lots
of people code in PHP and one convention they've

00:05:09.810 --> 00:05:17.280
got is on their website. Even though PHP is
all service side stuff, at the bottom of every

00:05:17.280 --> 00:05:21.790
single page they've got, right next to their
item link, is a show source button that will

00:05:21.790 --> 00:05:28.690
actually show the source of the server code.
So, this is very helpful for getting people

00:05:28.690 --> 00:05:31.000
to learn PHP. They can actually see it on
the site and actually view the source and

00:05:31.000 --> 00:05:35.580
use it. You don't tend to see that as often
in SVG, and that's something I think needs

00:05:35.580 --> 00:05:42.740
to be improved. More people's experience is
they see this little mushroom and they learn

00:05:42.740 --> 00:05:46.840
SVG that way. It's sort of hidden for them
because it's actually taken care of. It's--this

00:05:46.840 --> 00:05:59.420
is the icon for Inkscape. If they do happen
to view source, what they see is this. [laugh]

00:05:59.420 --> 00:06:12.780
Some people call this name Space Form. Okay.
This is not the ideal way to learn SVG. Jeff,

00:06:12.780 --> 00:06:26.220
I presume, will be talking about Scour later.
I see a hand. Okay. [pause] If that was a

00:06:26.220 --> 00:06:29.440
question, the question--the--what he asked
was that the idea was to split them into small

00:06:29.440 --> 00:06:33.810
pieces, we have learned to individual small
pieces. My experience has been--it almost

00:06:33.810 --> 00:06:37.530
takes hand-editing to get to the point where
it's basically a teaching aid. Things that

00:06:37.530 --> 00:06:41.450
are generated by code tend to look like they
were generated by a code. And I'll show you

00:06:41.450 --> 00:06:47.070
in a second, view source sounds good, but
what's the downside? This is--I'll come back

00:06:47.070 --> 00:06:50.680
to that in a second. View source sounds good,
but what's the downside? And as I said, we

00:06:50.680 --> 00:06:55.410
got somewhere testing movies. You have to
be willing to seek the truth. You have to

00:06:55.410 --> 00:06:58.210
take the red pill. This is where you get to
see the grungy side. This is the--where you

00:06:58.210 --> 00:07:01.450
actually go down and see the truth as it really
is. And I'll touch on that in on a number

00:07:01.450 --> 00:07:10.360
of aspects to that in my presentation, in
particular, obviously how much to the matrix.

00:07:10.360 --> 00:07:14.800
Tolerance is a key aspect. And I want to tell
you my tolerance in a couple of different

00:07:14.800 --> 00:07:23.180
ways. First, Postel's law; be conservative
in what you do, liberal on what you accept

00:07:23.180 --> 00:07:27.770
from others. This is controversial right now
in the HTML and SVG communities. The idea

00:07:27.770 --> 00:07:35.240
that SVG when put in HTML context the browser
will tend to view it in a very tolerant fashion,

00:07:35.240 --> 00:07:40.430
which means if someone misses a quote, they'll
try to still render it. That is controversial

00:07:40.430 --> 00:07:43.870
in a sense that you can then put some HTML.
When you're done, you got something--you might

00:07:43.870 --> 00:07:52.460
not go take back out. And you still will be
able to. Mime type, text HTML, mime type is

00:07:52.460 --> 00:07:58.639
forgiving. If you send it as HTML, it will
be forgiving. If you send it as application

00:07:58.639 --> 00:08:03.320
XHTML plus XML, it's called draconian. If
it fails--if it's got a parse error, nothing

00:08:03.320 --> 00:08:12.110
will display. And how much to another movie,
choose wisely. That's a link to Indiana Jones.

00:08:12.110 --> 00:08:19.020
XHTML, service tech XHTML is not processed
as XML, just to show about the red pill aspects

00:08:19.020 --> 00:08:30.199
of it. CSS acts differently, JavaScript acts
differently, namespaces don't work. It's parsed

00:08:30.199 --> 00:08:37.300
differently. A couple of just aspects to that,
actually, it's parsed subtly different, which

00:08:37.300 --> 00:08:41.680
makes it worse. It's not like it's black and
white, it almost works almost all the time.

00:08:41.680 --> 00:08:47.490
And then there are one or two edge cases.
Linked to more details, but it really, each

00:08:47.490 --> 00:08:51.700
one can give us some highlights. Script source
sequels and you give something; you use the

00:08:51.700 --> 00:08:56.040
slash greater than. Despite the fact that
I have done this for a number of years, I

00:08:56.040 --> 00:09:03.930
still trip over this to this day every once
in a while. When you do that in HTML, it eats

00:09:03.930 --> 00:09:10.580
the rest of your page. Basically, the entire
rest of the pages are treated as if they're

00:09:10.580 --> 00:09:17.930
manuscripts waiting on the network. I apologize
for all of this. But it does eat the rest

00:09:17.930 --> 00:09:23.800
of the page in texthtml mode because it's
looking for an end close to the script tag.

00:09:23.800 --> 00:09:27.440
If you got br slash br, so you take the opposite
thing, which you'll say, "Okay, I can't always

00:09:27.440 --> 00:09:33.380
use the closing thing so I'll actually use
the opposite." That's treated as two line

00:09:33.380 --> 00:09:44.620
breaks in HTML mode. It's just the way browsers
are implemented. So I actually got code in

00:09:44.620 --> 00:09:50.440
some of my source that does things, like,
these are the list of five, ten, eleven, twelve

00:09:50.440 --> 00:09:54.980
elements that--can you stop closing the elements.
And that's what you should use on everything

00:09:54.980 --> 00:10:00.140
else you're not, and then next path expression,
which says find all that elements that have--don't

00:10:00.140 --> 00:10:03.630
have sub-children and don't have text. And
if so, out of text note. This is the code

00:10:03.630 --> 00:10:09.200
that we'll be using our XML that will basically
clean up XML before you serialize it. Things

00:10:09.200 --> 00:10:18.020
you got to deal with if you wish to remain
using XML tools to do this. Another subtle

00:10:18.020 --> 00:10:24.830
different pre-line, close pre, this is a pre-form
editing in HTML. In HTML that's one line.

00:10:24.830 --> 00:10:30.850
It shows that it goes one line, so what do
you expect? Next HTML, what you see is actually

00:10:30.850 --> 00:10:38.490
two lines; a line break followed by one line
because in XHTML, the pre-element is followed

00:10:38.490 --> 00:10:43.560
by a new line, and that new line is actually
in the dot, subtle differences that will trip

00:10:43.560 --> 00:10:48.899
you up if you want to keep using XHTML mode.
So, XHTML has been preached for a long time,

00:10:48.899 --> 00:10:53.260
particularly by W3C. It's not necessarily
something I would recommend despite the fact

00:10:53.260 --> 00:10:57.750
that it's what I pretty much exclusively use.
And this presentation itself is XHTML, which

00:10:57.750 --> 00:11:04.540
is sort of what--is required right now today
to do this demo. Tolerance means, tolerance

00:11:04.540 --> 00:11:09.690
of user mistakes, tolerance of different values
and perspectives. How many Anchor Tags in

00:11:09.690 --> 00:11:20.529
the following, how many A Tags do you see
there? One, two? The right answer is one.

00:11:20.529 --> 00:11:28.680
The reason why it's Plain Text is a element
that says the rest of the page is--be treated

00:11:28.680 --> 00:11:34.750
as it is. It's sort of an archaic element.
It's strongly deprecated but it's still implemented

00:11:34.750 --> 00:11:44.330
by all the browsers today. And the next question
is, where does that anchor point? It actually

00:11:44.330 --> 00:11:50.220
points before the table. The reason why is
browsers today, when they see the Table Tag,

00:11:50.220 --> 00:11:53.690
you can't actually render a table until you
actually read the contents. They come through

00:11:53.690 --> 00:11:56.790
the table and they get to this thing that
doesn't belong in the table, and says, "What

00:11:56.790 --> 00:12:01.810
shall I do with this?" And historically, their
choices were to throw it away or just simply

00:12:01.810 --> 00:12:06.209
render it right now and get back to the--doing
my table and then render the table. So what

00:12:06.209 --> 00:12:11.730
it ends up doing it is it ends up reordering
the page. This is how browsers are forgiving.

00:12:11.730 --> 00:12:18.690
These are things that end up making lives
more difficult. [pause] The good news is there

00:12:18.690 --> 00:12:25.490
are tools, like HTML2XML and XHTML, XML2HTML
that can take all these things and give you

00:12:25.490 --> 00:12:30.810
the clean output that matches precisely HTML
files behavior. An HTML files behavior is

00:12:30.810 --> 00:12:33.660
engineered to exactly to what browsers are
doing. So what I'm saying here, here's all

00:12:33.660 --> 00:12:38.620
the messy things. These--what I'm saying,
here's a tool that can help you and hopefully

00:12:38.620 --> 00:12:45.230
there'll be more. [pause] Three ways to embed
SVG; you can use an Object Tag. This is what's

00:12:45.230 --> 00:12:49.270
been documenting HTML standard for years.
You can use that bag tag which was what Netscape

00:12:49.270 --> 00:12:54.470
has been using, but it hasn't been documented
to HTML5. An image source is sort of what

00:12:54.470 --> 00:13:01.220
most people would think to use and want to
use. [pause] Guess which one doesn't work

00:13:01.220 --> 00:13:10.240
in Firefox today? [pause] Here I chuckle.
I assume that's because you know. [pause]

00:13:10.240 --> 00:13:14.180
Right, Image Source doesn't work. Anybody
guess why?

00:13:14.180 --> 00:13:14.649
&gt;&gt; The security.

00:13:14.649 --> 00:13:18.700
&gt;&gt; RUBY: I don't think it's obvious. The security,
he's got the right answer. It seems odd to

00:13:18.700 --> 00:13:22.860
me that you look at this and this is just
syntax. So, somebody is just producing syntax.

00:13:22.860 --> 00:13:28.420
It's just another spelling way of doing it,
but it turns out object embed intentionally

00:13:28.420 --> 00:13:34.959
create boxes or sandboxes as it were, and
they do that upfront and the secure thought

00:13:34.959 --> 00:13:39.570
given to that. An image they say, "I--I'm
just going to assume what's going to go."

00:13:39.570 --> 00:13:43.649
It's okay. It's just a bit of bunch of bits.
Well, it turns out SVG is not just a bunch

00:13:43.649 --> 00:13:48.950
of bits. It can add dynamic behavior. That
dynamic behavior could do things like leak

00:13:48.950 --> 00:13:57.399
passwords, capture clicks, and that is kind
of scary. Now, Firefox is the only browser

00:13:57.399 --> 00:14:03.330
right now that doesn't--right now, Opera.
And WebKit do support SVG with an Image Tag.

00:14:03.330 --> 00:14:07.820
They only support a subset of it though; they
do not support scripting behavior of it. So

00:14:07.820 --> 00:14:11.720
that's an example of where it seems like it
should all work, but that's why there's a

00:14:11.720 --> 00:14:15.149
little asterisk that says, "Ah, but if you
do it this way, you can't do the other things."

00:14:15.149 --> 00:14:19.360
So, like, if you have a Hypertext links if
you do it with an image tag. [pause]

00:14:19.360 --> 00:14:21.310
&gt;&gt; [INDISTINCT].

00:14:21.310 --> 00:14:24.839
&gt;&gt; RUBY: Sure. Sure, what?

00:14:24.839 --> 00:14:27.580
&gt;&gt; [INDISTINCT]

00:14:27.580 --> 00:14:34.670
&gt;&gt; RUBY: [pause] Inline versus Embed. My page
uses Inline. Here's an embedded image and

00:14:34.670 --> 00:14:38.050
here's an Inline image. They look about the
same. And in my screen, they actually look

00:14:38.050 --> 00:14:43.399
closer together, but that's cool. [pause]
This has got a hypertext link on the embedded

00:14:43.399 --> 00:14:48.459
image. As we show an example of why the hypertext
or why the embedded image is a Sandbox. If

00:14:48.459 --> 00:14:55.670
you click on the link, what you're actually
going to see is the actual Webpage that it's

00:14:55.670 --> 00:15:02.920
linked to in kind of a very small place because
it was Sandboxed. The exact same image Inline

00:15:02.920 --> 00:15:10.930
gives you a link to the page. It behaves differently
depending on how you do that. So these are

00:15:10.930 --> 00:15:13.300
the things where--it should all just work
and you should get all these behaviors, but

00:15:13.300 --> 00:15:21.220
at the end you're finding out that they're
not quite. [pause] SVG integrates better with

00:15:21.220 --> 00:15:28.540
XHTML, and you can do more. That's how I do
it, but nobody uses XHTML. And by that, I

00:15:28.540 --> 00:15:37.670
mean the Mime type, actually almost nobody.
I--I do. [pause] Is SVG XHTML the answer?

00:15:37.670 --> 00:15:47.160
[pause] A couple of issues by and large, it
is, graceful degradation. If you do SVG Inline,

00:15:47.160 --> 00:15:52.120
not Brad's way, which is using the Script
Tag, you have to do things like avoid the

00:15:52.120 --> 00:15:57.810
self-closing tags. So, your SVG images need
to use Path, close Path. If you want to have

00:15:57.810 --> 00:16:03.680
the page, service text XHTML and actually
processed properly by some browsers. Okay.

00:16:03.680 --> 00:16:08.209
It turns out there are techniques to get to
work without the self-closing tags with IE,

00:16:08.209 --> 00:16:13.560
and that's--that you serve everybody but IE,
Application XHTML plus XML, you're okay. But

00:16:13.560 --> 00:16:19.769
most of you don't want to use the actual Mime
type because that means it got to be draconian.

00:16:19.769 --> 00:16:25.910
[pause] The other issue is unknown tags maybe
ignored, but the naked text will be displayed.

00:16:25.910 --> 00:16:30.839
So if you're marking a CDATA, XML will treat
that as if it were a text and HTML will treat

00:16:30.839 --> 00:16:35.000
that as a comment. Later, I worked around
and so over time I've developed because I've

00:16:35.000 --> 00:16:42.640
been developing this stuff. [pause] SVG is
valid in HTML file. It's part of the spec

00:16:42.640 --> 00:16:50.260
so that you can actually include it. [pause]
Other name spaces are not.

00:16:50.260 --> 00:16:52.420
&gt;&gt; Except MathML.

00:16:52.420 --> 00:16:57.260
&gt;&gt; RUBY: MathML, yes, and NxLink. Almost all
generated SVG I've seen, actually probably

00:16:57.260 --> 00:17:02.930
generated SVG I've seen contains some foreign
namespace. So if you copy and paste that into

00:17:02.930 --> 00:17:09.119
a document, you will get validation errors
that will tend to discourage the use of SVG

00:17:09.119 --> 00:17:14.149
Inline. That will undermine the credibility
of the validator. That's not good social engineering.

00:17:14.149 --> 00:17:23.699
[pause] I say it's not currently validated.
It's actually under active discussion. [pause]

00:17:23.699 --> 00:17:32.379
There's a bug report, it opened, that's in
active debate on how it should be dealt with.

00:17:32.379 --> 00:17:39.429
The current says that the bug report is as
follows: HTML defines a mapping of the bytes

00:17:39.429 --> 00:17:45.190
to DOM, and an element names may contain a
colon. When it gets into DOM, you might have

00:17:45.190 --> 00:17:49.820
a colon on the element names. SVG defines
a valid set of elements in the SVG Namespace,

00:17:49.820 --> 00:17:56.480
but SVG does not currently define element
names with a colon. So could you have a RTF

00:17:56.480 --> 00:18:03.109
colon about element name in SVG's Namespace?
Is that valid? There is no spec right now

00:18:03.109 --> 00:18:10.460
that says "That is valid." Notice it's "RDF:about".
It's not RDF expanded to some prefix to the

00:18:10.460 --> 00:18:16.629
RDF Namespace, it's literally a character
string, "RDF:" So these things are kind of

00:18:16.629 --> 00:18:20.549
on the edge. And again, social engineering
aspects are what I really don't like, which

00:18:20.549 --> 00:18:25.369
is people who try to use SVG find out that
they just copy and paste. Then all of a sudden,

00:18:25.369 --> 00:18:29.889
the validator says, "You're doing it bad."
And trust me, most users or validators aren't

00:18:29.889 --> 00:18:38.330
that sophisticated. They just say it's--"I'm
doing it bad. What am I doing wrong?" Yes,

00:18:38.330 --> 00:18:44.850
can you speak up?

00:18:44.850 --> 00:18:49.200
&gt;&gt; [INDISTINCT]

00:18:49.200 --> 00:18:55.480
&gt;&gt; RUBY: Okay, I always use the word "DOM"
not necessarily literally. Basically, a lot

00:18:55.480 --> 00:18:59.059
of the information that I know are built on
"DOMs". There is actually no requirement that

00:18:59.059 --> 00:19:03.080
HTML is--requires a "DOM". It's just a short-hand
way of saying "This is how you represent it

00:19:03.080 --> 00:19:09.619
in an abstract tree. So no, I wasn't implying
any sort of implementation. I was being imprecise.

00:19:09.619 --> 00:19:12.619
&gt;&gt; [INDISTINCT]

00:19:12.619 --> 00:19:21.350
&gt;&gt; RUBY: No, that's fine. Okay, so the current
stance at the moment is that it's not valid.

00:19:21.350 --> 00:19:27.299
And again, I find that unfortunate for a social
engineering perspective. The other one is

00:19:27.299 --> 00:19:34.129
Microsoft has got a proposal for allowing
Namespaces in HTML syntax. And that's under

00:19:34.129 --> 00:19:39.940
an act to debate too and we'll see how that
one goes. This is a link to the proposal that

00:19:39.940 --> 00:19:45.330
just came out probably two days ago. And people
were noticing a bit that that doesn't match

00:19:45.330 --> 00:19:55.590
IE's behavior in a number of interesting ways.
And so that's--it impede its ability to succeed.

00:19:55.590 --> 00:20:15.639
Validation in general--yes? [pause]. Yes,
at the moment, they are not actively saying

00:20:15.639 --> 00:20:20.119
that. They're actually participating in discussion,
but actually not into making clear statements

00:20:20.119 --> 00:20:23.479
like, "We are going to implement this, et
cetera. It's just--it's out for discussion.

00:20:23.479 --> 00:20:28.690
So at the moment, it's a little unclear. I'm--obviously
actively watching it. I'm very hopeful, because

00:20:28.690 --> 00:20:33.869
I would actually like to see Namespaces work.
The idea of validation in general, I think,

00:20:33.869 --> 00:20:40.840
is something we need to rethink as a community.
Google.com, if you validate it, it's got a

00:20:40.840 --> 00:20:49.229
whole bunch of errors. And yet, I don't believe
any browser in the world could ship--that

00:20:49.229 --> 00:20:56.489
did not support Google's Homepage. I think
that's a requirement. These errors as it were

00:20:56.489 --> 00:21:00.559
are not accidental oversights. I don't believe
that Google doesn't have the resources to

00:21:00.559 --> 00:21:07.940
address this. I believe they are intentional.
They are put in there and saying, "Look, we

00:21:07.940 --> 00:21:14.169
can save four bytes by loosing the M--three
bytes, by loosing, "MP;" because it doesn't

00:21:14.169 --> 00:21:17.869
matter. All the browsers are implemented in
the same way. So it's almost like we need

00:21:17.869 --> 00:21:22.119
another mode of validation that says "Let
me--just tell me the things that do matter,"

00:21:22.119 --> 00:21:27.549
versus, "Here's all the things that where
at somebody's opinion that this not the right

00:21:27.549 --> 00:21:33.379
way to do it." So I'm showing some of my own
personal opinion on how validations work and

00:21:33.379 --> 00:21:38.330
I'm starting to invest some time in backing
that up by working on the validator, the HTML5

00:21:38.330 --> 00:21:42.580
validator. Now, the dangers that warn about
it are real. You can actually--if you don't--actually,

00:21:42.580 --> 00:21:47.729
when you just put an ampersand without caring
what goes after it. You can actually get entities

00:21:47.729 --> 00:21:53.239
accidentally that you didn't need to. It's
rare but it can happen. But they only play

00:21:53.239 --> 00:21:58.960
in certain circumstances. And they only--and
they may not apply the situations where they

00:21:58.960 --> 00:22:05.119
validate that your site has a bug. So a lot
of people are choosing to ignore the validator.

00:22:05.119 --> 00:22:10.470
And most--many cases amount to recommendations.
For example, font is treated as non-performing

00:22:10.470 --> 00:22:16.999
because style is preferred. So you can make
a generic transformation of Font Tags into

00:22:16.999 --> 00:22:23.019
span style equals in the same--the font stuff.
And you add a "no value". You have not changed

00:22:23.019 --> 00:22:27.879
the behavior one bit. You've not changed the
number of browsers reported, not changed the

00:22:27.879 --> 00:22:33.289
breadth or the media independence of it one
bit. And all of a sudden, one is valid and

00:22:33.289 --> 00:22:39.570
the other one is not. Omitted End Tags are
more likely to cause hardy debug problems.

00:22:39.570 --> 00:22:43.759
You're allowed to omit End Tags for list items,
for example. More likely it will cause problems

00:22:43.759 --> 00:22:56.970
but that's not flagged. [pause]. My first
SVG was this comp bench. This is the first

00:22:56.970 --> 00:23:02.440
thing I ever did. I did it by flying on an
airplane, bored out of my mind. I had the

00:23:02.440 --> 00:23:09.700
SVG spec, I had a cute little tool, but this
is actually the source. You can actually take

00:23:09.700 --> 00:23:13.200
a look at this source. And this source is
an example of source that looks it was edited

00:23:13.200 --> 00:23:19.889
by a human because it was. It's the stuff
I did five or six years ago. I mean a post,

00:23:19.889 --> 00:23:27.299
a foot, the back, a seat, and then a box of
chocolates. And the bench has got a lot of

00:23:27.299 --> 00:23:31.679
used statements which you don't tend to see
in generated code. It uses affordance--more

00:23:31.679 --> 00:23:35.470
for human authors, in my opinion that says,
"I have this one reusable element. I apply

00:23:35.470 --> 00:23:41.169
it three or four times." So it got--the benches
got slats. I've got--several foot, a couple

00:23:41.169 --> 00:23:46.940
of posts and the like, and I apply it with--just
changing "X" and "Y". This looks like a code

00:23:46.940 --> 00:23:49.859
and you could say, "I could pick that up and
change it. I can modify it." It looks like

00:23:49.859 --> 00:23:57.539
it was edited by a human. And again, I used
a tool called "Batik", which we have one of

00:23:57.539 --> 00:24:03.220
the main authors out right here. All I did
on the airplane. I had three windows up, AVI,

00:24:03.220 --> 00:24:08.840
as editing and text, another window, I use
command prompt that use JAVA--the name of

00:24:08.840 --> 00:24:13.340
the JAVA for Batik, and actually converted
that to an image. Another was just a browser

00:24:13.340 --> 00:24:17.320
to see the image. And I had time to kill and
just one by one, I edited this thing and went

00:24:17.320 --> 00:24:22.830
through the build cycle, et cetera. It sounds
boring as all; I now do it as my demo with

00:24:22.830 --> 00:24:28.529
how I do it today, which is a little faster
but still boring as it all get out. It passes

00:24:28.529 --> 00:24:33.599
the time and it's actually, it's been interesting
and educational to me. The demo was how I

00:24:33.599 --> 00:24:40.489
took an image for--that looks kind of like
the Internet Explorer, actually the--the old

00:24:40.489 --> 00:24:45.960
version of the Internet Explorer logo. Took
an image of that--it's certainly like Chrome

00:24:45.960 --> 00:24:53.249
and I don't actually have--be able to do the
demo, but I built this image that looks kind

00:24:53.249 --> 00:24:57.049
of like a mash-up of the two. This is what
I've been using my--on my Web blog to talk

00:24:57.049 --> 00:25:06.710
about the--I call it ChromeIE, Chrome-I-E,
but it's a Chrome plug in a Google Chrome

00:25:06.710 --> 00:25:17.340
Frame. Google Chrome Frame--I want to just
review it right now in the context of SVG.

00:25:17.340 --> 00:25:23.039
It doesn't support application/XHTML + XML.
You cannot serve that Mime type and have Google

00:25:23.039 --> 00:25:27.609
Chrome Frame take it. That kind of blows me
out of the water because that's the Mime type

00:25:27.609 --> 00:25:32.269
I'm using. But few people do use that Mime
type. That's not a big problem. The only real

00:25:32.269 --> 00:25:39.399
problem is that high percentage of people
do make keynotes. [laugh] It does support

00:25:39.399 --> 00:25:44.340
image source sequels, because that's one thing
Web--it does. Unfortunately, I would not recommend

00:25:44.340 --> 00:25:50.220
it because you can't do things like animation,
and if you do that you can't use Firefox,

00:25:50.220 --> 00:25:57.229
which cuts you out of a good portion of the
browser market that does support SVG. This

00:25:57.229 --> 00:26:02.489
is another example, one of those asterisk
so, don't go there, it does support embed.

00:26:02.489 --> 00:26:08.149
So, the embed tag works. So if you actually
didn't want to use SVG in Google Chrome Frame,

00:26:08.149 --> 00:26:12.919
use XHTML and embed, because this is one of
those--you can get there from here but only

00:26:12.919 --> 00:26:19.289
this way type of passing and I seem to find
a lot of those. Links are Sandboxed as I showed

00:26:19.289 --> 00:26:23.200
you. If you actually have a hypertext link
in an embed tag, it'll actually just show

00:26:23.200 --> 00:26:28.389
up inside that little Sandbox, it's not quite
what you might want. And content negotiation

00:26:28.389 --> 00:26:31.359
can be improved by discussing it on a Web
blog, that's really outside of the scope of

00:26:31.359 --> 00:26:40.509
this. Wrapping up, recommendations from ATU;
show your source. If you got SVG on your site,

00:26:40.509 --> 00:26:48.179
go out of your way to try to make it obvious
and how to find the source to it. Be tolerant

00:26:48.179 --> 00:26:53.090
of users, you know, there's people who built
SVG are going to make mistakes. Figure out

00:26:53.090 --> 00:26:56.679
a way to deal with the persons that actually
use the same URL, if nothing else, they outnumber

00:26:56.679 --> 00:27:04.379
you. Specs that seem arbitrary generally aren't.
There are lots of rules and things are built

00:27:04.379 --> 00:27:08.899
in specs and will say, people have all sorts
of interesting debates, but they take one

00:27:08.899 --> 00:27:12.009
side of the other and say, obviously it's
got to be this way. You're looking at one

00:27:12.009 --> 00:27:14.940
aspect to the problem and somebody else is
looking at a completely different aspect and

00:27:14.940 --> 00:27:19.649
comes with a completely different conclusion.
That's why most of the debates I see are happening.

00:27:19.649 --> 00:27:25.700
There are actually are reasons for most of
these things. And my last real comment is

00:27:25.700 --> 00:27:31.950
we need multiple--log out your profiles. I
actually do believe that Namespaces inside

00:27:31.950 --> 00:27:35.899
SVG, that's copied and pasted, you probably
should not get the same level of warning or

00:27:35.899 --> 00:27:43.629
error as things are just put randomly in HTML.
So figuring out exactly when and where, that's

00:27:43.629 --> 00:27:46.869
going to be interesting. People have strong
debates and whatever. And it might just be

00:27:46.869 --> 00:27:55.450
we--we have to move away from profiles and
validate each. And I forgot what time we're

00:27:55.450 --> 00:28:07.159
supposed to end but, well, ahead of time,
or on time, or what? Okay. Questions? (pause)

00:28:07.159 --> 00:28:19.649
Yes. (pause) Am I an inventor of SVG? No,
I just happened to be a user of SVG who has

00:28:19.649 --> 00:28:25.779
been using it now for several years on his
Web blog and I found some interesting issues

00:28:25.779 --> 00:28:36.759
and I just stand by to let you know. (pause)
One of the original.

00:28:36.759 --> 00:28:51.450
&gt;&gt; Have you [INDISTINCT]? (laughs) Anyone
else contributed [INDISTINCT], any other [INDISTINCT]?

00:28:51.450 --> 00:28:57.749
&gt;&gt; RUBY: I've contributed.

00:28:57.749 --> 00:29:06.149
&gt;&gt; These are the most [INDISTINCT].

00:29:06.149 --> 00:29:12.559
&gt;&gt; RUBY: Okay. I would second that. I've been
using it for years, I've enjoyed it, despite

00:29:12.559 --> 00:29:16.729
the fact that my pitch sounds a bit of a downer
but it's--he actually is somewhat excited

00:29:16.729 --> 00:29:18.919
and do want to try to work through the issues.

00:29:18.919 --> 00:29:20.509
&gt;&gt; Okay, thank you, Sam.

00:29:20.509 --> 00:29:21.190
&gt;&gt; RUBY: Okay.

