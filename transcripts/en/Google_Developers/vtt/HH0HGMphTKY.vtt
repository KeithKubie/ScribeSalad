WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:02.228
SHAWN BUSOLITS: Welcome
to the Quickstart video

00:00:02.228 --> 00:00:03.630
for the IMA HTML5 SDK.

00:00:03.630 --> 00:00:07.230
The IMA SDK for HTML5 allows
you to display inline videos

00:00:07.230 --> 00:00:09.390
and overlay ads on
web video content.

00:00:09.390 --> 00:00:11.730
Its most common use is
to show preroll video ads

00:00:11.730 --> 00:00:13.590
before a video is
played on a website,

00:00:13.590 --> 00:00:16.110
but it can also be used to
show TV-style commercial ad

00:00:16.110 --> 00:00:17.456
breaks in long-form content.

00:00:17.456 --> 00:00:19.080
When we're done with
this video, you'll

00:00:19.080 --> 00:00:20.454
have a simple web
page that plays

00:00:20.454 --> 00:00:22.200
video ads onto content video.

00:00:22.200 --> 00:00:24.450
If you want to follow along,
download the sample video

00:00:24.450 --> 00:00:27.120
player we've hosted at the
link on the screen now.

00:00:27.120 --> 00:00:29.160
Once you have that file
downloaded and unzipped,

00:00:29.160 --> 00:00:31.140
you can host the sample
web page by navigating

00:00:31.140 --> 00:00:34.170
to the unzipped folder in your
terminal or command prompt

00:00:34.170 --> 00:00:37.710
and running python
-m SimpleHTTPServer.

00:00:37.710 --> 00:00:41.490
That will host the sample web
page at local host port 8,000.

00:00:41.490 --> 00:00:43.584
Let's see what the sample
video player looks like.

00:00:43.584 --> 00:00:45.000
As you can see,
the page currently

00:00:45.000 --> 00:00:46.630
just contains a Play button.

00:00:46.630 --> 00:00:48.870
When we click that, we
see our content video.

00:00:48.870 --> 00:00:51.690
Now let's take a look at the
files that make this happen.

00:00:51.690 --> 00:00:54.150
The sample video player
contains three files--

00:00:54.150 --> 00:00:58.020
index.html, which is the sample
HTML for our sample web page,

00:00:58.020 --> 00:01:01.020
style.css, which is the style
sheet that lays out the sample

00:01:01.020 --> 00:01:04.170
web page, and ads.js, which
is where all of our Javascript

00:01:04.170 --> 00:01:04.777
will go.

00:01:04.777 --> 00:01:07.110
Currently, this is set up to
just play the content video

00:01:07.110 --> 00:01:08.470
when we click the Play button.

00:01:08.470 --> 00:01:10.660
We're going to do all of our
work in the JavaScript file,

00:01:10.660 --> 00:01:12.201
but let's first walk
through the HTML

00:01:12.201 --> 00:01:14.040
so we know what
we're working with.

00:01:14.040 --> 00:01:16.200
The two most important
things in this HTML file

00:01:16.200 --> 00:01:18.896
are the video player and
the ad container div.

00:01:18.896 --> 00:01:20.520
The video player will
play our content,

00:01:20.520 --> 00:01:22.770
and the ad container will
be populated by the SDK

00:01:22.770 --> 00:01:25.440
to show ads on top
of the video player.

00:01:25.440 --> 00:01:28.260
In most web browsers, the SDK
will use its own video player

00:01:28.260 --> 00:01:30.320
to play ads, not your player.

00:01:30.320 --> 00:01:32.460
That SDK-owned player,
along with any ad

00:01:32.460 --> 00:01:34.591
UI, will be created in this div.

00:01:34.591 --> 00:01:36.840
We also create a Play button
at the bottom of the page

00:01:36.840 --> 00:01:38.295
to start the video.

00:01:38.295 --> 00:01:40.170
You'll also notice that
we're loading our CSS

00:01:40.170 --> 00:01:42.000
file in the head of the HTML.

00:01:42.000 --> 00:01:44.070
This sets up our component
sizes and locations

00:01:44.070 --> 00:01:45.930
to ensure our ad
container is on top of

00:01:45.930 --> 00:01:47.790
and completely covers
the video player.

00:01:47.790 --> 00:01:49.460
The SDK will
automatically show the div

00:01:49.460 --> 00:01:52.050
to play ads, and hide it
when content is playing.

00:01:52.050 --> 00:01:53.700
Lastly, at the
bottom of the page,

00:01:53.700 --> 00:01:57.090
we load the IMA SDK, followed by
the ads.js file in which we'll

00:01:57.090 --> 00:01:58.200
be working.

00:01:58.200 --> 00:02:00.910
Now that we have a basic idea
of the HTML for the page,

00:02:00.910 --> 00:02:02.555
let's take a look
at the JavaScript.

00:02:02.555 --> 00:02:04.680
Currently, it's getting
handles to the video player

00:02:04.680 --> 00:02:06.638
and the Play button, and
playing the video when

00:02:06.638 --> 00:02:07.980
a user clicks the button.

00:02:07.980 --> 00:02:09.690
Let's modify this
to request and show

00:02:09.690 --> 00:02:11.770
an ad before our content plays.

00:02:11.770 --> 00:02:14.220
First, we're going to create
an ad display container.

00:02:14.220 --> 00:02:16.470
This SDK object holds a
handle to the ad container

00:02:16.470 --> 00:02:18.630
div we talked about
in the HTML file,

00:02:18.630 --> 00:02:20.492
as well as your video player.

00:02:20.492 --> 00:02:22.950
Remember earlier that I said
the SDK will use its own video

00:02:22.950 --> 00:02:24.404
player in most browsers?

00:02:24.404 --> 00:02:26.070
We give it a handle
to your video player

00:02:26.070 --> 00:02:28.470
here for those instances where
it can't use its own video

00:02:28.470 --> 00:02:30.900
player, like older versions
of iPhone and Android,

00:02:30.900 --> 00:02:33.120
which only support one
video player at a time.

00:02:33.120 --> 00:02:36.122
In those cases, the SDK will
reuse your video player.

00:02:36.122 --> 00:02:37.830
Now that we have an
ad display container,

00:02:37.830 --> 00:02:39.315
we can create an ads loader.

00:02:39.315 --> 00:02:42.270
An ads loader is used by
the SDK to request a vast ad

00:02:42.270 --> 00:02:44.160
response from an ad server.

00:02:44.160 --> 00:02:46.380
This response contains
tracking URLs, as well as

00:02:46.380 --> 00:02:48.450
links to the media for the ad.

00:02:48.450 --> 00:02:50.850
We're going to listen for two
events on the ads loader--

00:02:50.850 --> 00:02:53.090
ads manager loaded and ad error.

00:02:53.090 --> 00:02:55.980
Ads manager loaded will be fired
when the SDK has successfully

00:02:55.980 --> 00:02:57.990
created an ads manager for us.

00:02:57.990 --> 00:03:01.862
We'll talk about what an
ads manager is in a minute.

00:03:01.862 --> 00:03:03.320
Ad error will be
fired if something

00:03:03.320 --> 00:03:06.400
goes wrong in the process
of requesting ads.

00:03:06.400 --> 00:03:08.620
Let's fill in that
ad error handler now.

00:03:08.620 --> 00:03:10.360
When something goes
wrong requesting ads,

00:03:10.360 --> 00:03:12.340
we've got no chance
of playing ads,

00:03:12.340 --> 00:03:15.010
so we'll just log the error
and play our content video.

00:03:15.010 --> 00:03:18.516
We'll fill in the ads manager
loaded handler in a bit.

00:03:18.516 --> 00:03:20.140
Next, we'll add a
content ended handler

00:03:20.140 --> 00:03:22.371
to let the SDK know
when to play postrolls.

00:03:22.371 --> 00:03:24.370
We'll listen for the video
player's ended event,

00:03:24.370 --> 00:03:26.161
and call content complete
on the ads loader

00:03:26.161 --> 00:03:30.019
to let it know it can play
postrolls, if it has any.

00:03:30.019 --> 00:03:31.560
Now that we've
created our ads loader

00:03:31.560 --> 00:03:34.640
and assigned event listeners,
let's build our ads request.

00:03:34.640 --> 00:03:37.260
The ads request object
contains all the information

00:03:37.260 --> 00:03:40.020
the SDK needs to request
ads for your video player.

00:03:40.020 --> 00:03:41.970
First, we provide
an ad tag URL, which

00:03:41.970 --> 00:03:44.550
points to the vast response
that the SDK needs in order

00:03:44.550 --> 00:03:47.689
to know which ad to play
and where to get it from.

00:03:47.689 --> 00:03:49.855
Then we provide linear and
non-linear ad slot widths

00:03:49.855 --> 00:03:50.890
and heights.

00:03:50.890 --> 00:03:53.254
These tell the SDK what
size ads you want to show.

00:03:53.254 --> 00:03:54.670
The linear width
and height should

00:03:54.670 --> 00:03:56.200
be the same as
your video player,

00:03:56.200 --> 00:03:57.658
and the non-linear
width and height

00:03:57.658 --> 00:04:00.570
can be anything that will
fit inside your ad container.

00:04:00.570 --> 00:04:02.220
The most common type
of non-linear ad

00:04:02.220 --> 00:04:04.350
is a bottom-third ad, which
fills the bottom third

00:04:04.350 --> 00:04:05.299
of the video player.

00:04:05.299 --> 00:04:07.590
So we'll set the width to
the full width of our player,

00:04:07.590 --> 00:04:10.739
and the height to one-third
the full height of our player.

00:04:10.739 --> 00:04:12.280
Now that we've built
our ads request,

00:04:12.280 --> 00:04:14.366
we can give it to the ads
loader to request ads.

00:04:14.366 --> 00:04:16.240
We're going to modify
the onPlay button click

00:04:16.240 --> 00:04:18.670
function to do this when the
user clicks the Play button.

00:04:18.670 --> 00:04:21.279
We'll also initialize the
ad display container here.

00:04:21.279 --> 00:04:23.590
This must be done as the
result of a user action,

00:04:23.590 --> 00:04:25.631
and clicking on the Play
button will be that user

00:04:25.631 --> 00:04:27.470
action for this sample.

00:04:27.470 --> 00:04:29.920
If the ads loader successfully
loads ads using your ads

00:04:29.920 --> 00:04:32.030
request, it will fire
the ads manager loaded

00:04:32.030 --> 00:04:33.260
event I mentioned earlier.

00:04:33.260 --> 00:04:35.051
This event will give
you a handle to an ads

00:04:35.051 --> 00:04:37.610
manager, which is your main
interface with the SDK.

00:04:37.610 --> 00:04:40.340
It provides ad interactions
like pause, resume, and volume

00:04:40.340 --> 00:04:41.180
control.

00:04:41.180 --> 00:04:43.102
Let's write the handler
for that event now.

00:04:43.102 --> 00:04:45.560
The first thing we'll do is
store a local handle to the ads

00:04:45.560 --> 00:04:47.871
manager provided in the
ads manager loaded event.

00:04:47.871 --> 00:04:49.370
I'm going to declare
the ads manager

00:04:49.370 --> 00:04:51.911
variable on the global scope,
so that we'll have access to it

00:04:51.911 --> 00:04:53.510
in the functions we write later.

00:04:53.510 --> 00:04:56.112
We retrieve the ads manager from
the ads manager loaded event

00:04:56.112 --> 00:04:58.070
and provide a handle to
our video player, which

00:04:58.070 --> 00:05:00.350
allows the SDK to track
our content position if we

00:05:00.350 --> 00:05:01.770
want to play midrolls.

00:05:01.770 --> 00:05:03.332
Now we add a handler
for an ad error.

00:05:03.332 --> 00:05:05.540
This will be fired if
something goes wrong in the SDK

00:05:05.540 --> 00:05:07.280
during ad playback--
for example,

00:05:07.280 --> 00:05:09.500
if the SDK gets a badly
encoded media file

00:05:09.500 --> 00:05:10.809
and needs to abort playback.

00:05:10.809 --> 00:05:13.100
The ad error handler will be
the same as the ads loader

00:05:13.100 --> 00:05:15.620
error handler, but we'll
modify it to also destroy

00:05:15.620 --> 00:05:17.750
the ads manager if it exists.

00:05:17.750 --> 00:05:20.420
Now we need to add content
pause and resume handlers.

00:05:20.420 --> 00:05:22.910
Because the SDK plays
ads in a separate player,

00:05:22.910 --> 00:05:25.250
it needs to tell us to pause
our content when ads start.

00:05:25.250 --> 00:05:26.630
Otherwise, we'd have
our content playing

00:05:26.630 --> 00:05:27.980
at the same time as the ads.

00:05:27.980 --> 00:05:29.899
That's what this event is for.

00:05:29.899 --> 00:05:31.940
The content pause handler
will pause your content

00:05:31.940 --> 00:05:32.990
so an ad can play.

00:05:32.990 --> 00:05:35.450
We also need to remove our
content ended handler here.

00:05:35.450 --> 00:05:37.550
If we're in a browser that
causes the SDK to reuse

00:05:37.550 --> 00:05:39.604
our content player, leaving
that listener enabled

00:05:39.604 --> 00:05:41.270
during ad playback
will cause us to call

00:05:41.270 --> 00:05:43.790
content complete on the ads
loader when the ad finishes.

00:05:43.790 --> 00:05:45.206
And we only want
that to be called

00:05:45.206 --> 00:05:47.190
when our content finishes.

00:05:47.190 --> 00:05:48.750
Similarly, we'll
declare our contact

00:05:48.750 --> 00:05:50.250
resume handler,
which will be called

00:05:50.250 --> 00:05:51.604
when an ad break finishes.

00:05:51.604 --> 00:05:54.145
This readds our content ended
handler, and plays our content.

00:06:00.900 --> 00:06:02.940
Once we've got our ads
manager handler set up,

00:06:02.940 --> 00:06:04.865
we can initialize and
start playing ads.

00:06:04.865 --> 00:06:06.990
The init method takes the
size of your video player

00:06:06.990 --> 00:06:07.830
and the view mode.

00:06:07.830 --> 00:06:09.913
The view mode is the mode
you consider your player

00:06:09.913 --> 00:06:12.120
to be in when you start
ads, either full-screen,

00:06:12.120 --> 00:06:14.010
if the video is
full-screen, or normal,

00:06:14.010 --> 00:06:15.260
if it's embedded in a page.

00:06:15.260 --> 00:06:17.010
Since this player is
embedded in the page,

00:06:17.010 --> 00:06:18.900
we'll pass in Normal
for the view mode.

00:06:18.900 --> 00:06:21.180
If you're using ad rolls
to play an ad playlist,

00:06:21.180 --> 00:06:23.850
your preroll will start playing
ads immediately on init.

00:06:23.850 --> 00:06:25.800
For single ads,
preroll playback won't

00:06:25.800 --> 00:06:27.105
start until we call Start.

00:06:27.105 --> 00:06:29.370
Now let's take a look
at what we've got.

00:06:29.370 --> 00:06:31.620
Now when I load the page
and click the Play button,

00:06:31.620 --> 00:06:33.000
we see a preroll ad.

00:06:33.000 --> 00:06:35.707
Once the preroll finishes,
we see our content video.

00:06:35.707 --> 00:06:38.040
If we keep watching, we'll
see some midrolls breaking up

00:06:38.040 --> 00:06:40.340
our content.

00:06:40.340 --> 00:06:41.909
And that's all there is to it.

00:06:41.909 --> 00:06:43.700
If you're looking to
expand on this sample,

00:06:43.700 --> 00:06:45.350
check out our advanced
sample on GitHub

00:06:45.350 --> 00:06:46.725
and the rest of
our documentation

00:06:46.725 --> 00:06:48.290
on developers.google.com.

00:06:48.290 --> 00:06:49.790
We've also got some
more sample tags

00:06:49.790 --> 00:06:51.890
so you can play around
with different ad formats.

00:06:51.890 --> 00:06:53.306
These will all
work in your player

00:06:53.306 --> 00:06:55.050
without any additional
modifications.

00:06:55.050 --> 00:06:57.050
If you have any questions,
feel free to visit us

00:06:57.050 --> 00:06:59.060
on the support forum,
and we'll see you around.

00:06:59.060 --> 00:07:02.410
[MUSIC PLAYING]

