WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So now that we built it ourselves, I am going to show you the easy way to do it, which is to use

00:00:04.000 --> 00:00:09.040
the built-in Python type called the dictionary and what a dictionary is is really an implementation

00:00:09.040 --> 00:00:15.450
of a hashtable. It is built-in to Python so it is much easier to use than defining our own hashtable.

00:00:15.450 --> 00:00:23.020
So far we have seen two complex types in Python. We have seen the string type and we have seen the

00:00:23.020 --> 00:00:27.630
list type. Now we are going to introduce the dictionary type. So there are many things that are

00:00:27.630 --> 00:00:33.200
common between these three. There are other things that are different so to create a string

00:00:33.200 --> 00:00:38.310
we could have a sequence of characters inside quotes. To create a list, we use the square bracket

00:00:38.310 --> 00:00:44.080
and we could have a sequence of elements inside the square bracket and the elements

00:00:44.080 --> 00:00:48.850
could be any type unlike a string where they had to be characters. So our string was a sequence of

00:00:48.850 --> 00:00:56.460
characters. Our list was a list of any kind of value so a list of elements of any value. The dictionary

00:00:56.460 --> 00:01:03.730
type we are going to create using the curly bracket and entries inside the dictionary are key-value

00:01:03.730 --> 00:01:09.240
pairs so here I have created dictionary with two elements and each element the key is a string.

00:01:09.240 --> 00:01:15.540
Here is the string hydrogen and the value associated with that element is a number. The keys

00:01:15.540 --> 00:01:19.510
in the dictionary can be any immutable value so they do not need to be strings. They could be

00:01:19.510 --> 00:01:24.450
numbers. They could be other things. The values can be any value so what a dictionary is

00:01:24.450 --> 00:01:30.890
is a set of key-value pairs and the property that a dictionary will give us is like the hashtable

00:01:30.890 --> 00:01:36.030
that we can look up a key and get the value associated with that key so one important

00:01:36.030 --> 00:01:41.270
property of all types is whether they are immutable or mutable. We saw that the string was immutable.

00:01:41.270 --> 00:01:48.040
That means once we create a string we cannot modify that string. It has the same value.

00:01:48.040 --> 00:01:55.320
It always has. A list was mutable. We could change the values of elements in the list after we

00:01:55.320 --> 00:01:59.690
create the list. We could append to the list adding new elements to it. The dictionary is also mutable.

00:01:59.690 --> 00:02:05.430
So after we create a dictionary we could add new key-value pairs to it. We could change the value

00:02:05.430 --> 00:02:12.430
of values associated with keys. We saw with strings - if s is a string then we could do s[i]

00:02:12.430 --> 00:02:20.370
that will give us the i letter in string. With list, we can do something very similar. If p is a list,

00:02:20.370 --> 00:02:26.750
we can do p[i] to get the i element of the list. With dictionaries, it is a little bit different.

00:02:26.750 --> 00:02:34.250
The syntax is the same. We can do d[k]. With both strings and lists, these were numbers.

00:02:34.250 --> 00:02:41.330
Here, the k is whatever the key value is so this is the key in the dictionary. What d[k] will give us

00:02:41.330 --> 00:02:47.300
the value associated with that key in the dictionary. We will see some examples soon. We can also use

00:02:47.300 --> 00:02:52.910
our indexing in assignments we saw with the list we could do this that would replace the value

00:02:52.910 --> 00:03:00.480
of the i element of p with whatever we have here. With the string, we cannot do that. That produces

00:03:00.480 --> 00:03:04.950
an error, and the reason we cannot do it is because strings are immutable so there is no way to

00:03:04.950 --> 00:03:11.260
modify characters in the string. With the dictionary, we can and what the meaning of this is very

00:03:11.260 --> 00:03:16.300
similar to the meaning of update in our hashtable so that is equivalent to update the value

00:03:16.300 --> 99:59:59.000
the value associated with k to be v.

