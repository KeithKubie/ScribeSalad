WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:02.895
&gt;&gt; So, we saw before when we looked at AND and

00:00:02.895 --> 00:00:05.377
OR versus XOR that in the case of AND and OR

00:00:05.377 --> 00:00:08.077
we only needed two nodes but in the case of XOR

00:00:08.077 --> 00:00:11.928
we needed three. The difference between two and three is not that

00:00:11.928 --> 00:00:14.474
big, but it actually does turn out to be big if

00:00:14.474 --> 00:00:18.986
you start thinking about having more than simply two attributes. So, let's

00:00:18.986 --> 00:00:22.850
look at generalized versions of OR and generalized versions of XOR

00:00:22.850 --> 00:00:25.541
and see if we can see how the size of the decision

00:00:25.541 --> 00:00:33.130
tree grows differently. So in the case of an n version of OR. That is we have n

00:00:33.130 --> 00:00:35.730
attributes as opposed to just two. We might call

00:00:35.730 --> 00:00:40.320
that the any function. That is a function were any

00:00:40.320 --> 00:00:42.700
of the variables are true then the output is

00:00:42.700 --> 00:00:45.110
true. We can see that the decision tree for that

00:00:45.110 --> 00:00:48.540
has a very particular and kind of interesting form.

00:00:48.540 --> 00:00:51.430
Any ideas Michael about what that decision tree looks like?

00:00:51.430 --> 00:00:53.800
&gt;&gt; So, well. So going off of the way you described

00:00:53.800 --> 00:00:56.550
OR in the two case. We can start with that. And you.

00:00:56.550 --> 00:01:01.480
You pick Pick one of the variables. And if its true

00:01:01.480 --> 00:01:04.700
then yeah. Any of them is true since the leaf is true.

00:01:04.700 --> 00:01:06.500
&gt;&gt; What happens if its false?

00:01:06.500 --> 00:01:11.970
&gt;&gt; Well, then we have to check what everything that's left. [LAUGH]

00:01:11.970 --> 00:01:14.470
So then we move on to one of the other attributes like A2.

00:01:14.470 --> 00:01:15.050
&gt;&gt; mm hm.

00:01:15.050 --> 00:01:16.903
&gt;&gt; And again, if it's

00:01:16.903 --> 00:01:22.180
true, it's true and if it's false then we don't know.

00:01:22.180 --> 00:01:24.600
&gt;&gt; Look at A3.

00:01:24.600 --> 00:01:26.380
&gt;&gt; Good idea.

00:01:29.070 --> 00:01:30.820
This could take some time.

00:01:30.820 --> 00:01:33.210
&gt;&gt; Yes, oh that was actually an interesting point. Let's

00:01:33.210 --> 00:01:37.270
say if there were only three, we would be done. Right?

00:01:37.270 --> 00:01:38.950
&gt;&gt; Right.

00:01:38.950 --> 00:01:40.590
&gt;&gt; But wait, what if there were five?

00:01:40.590 --> 00:01:42.000
&gt;&gt; Then we need one more node.

00:01:43.130 --> 00:01:44.260
&gt;&gt; What if there were n?

00:01:44.260 --> 00:01:45.960
&gt;&gt; Then we need n minus 4 more nodes.

00:01:47.520 --> 00:01:49.260
&gt;&gt; Right, so what you end up with in

00:01:49.260 --> 00:01:54.080
this case is a nice little structure around the

00:01:54.080 --> 00:01:56.630
decision tree. And how many nodes do we need?

00:01:57.900 --> 00:02:00.090
&gt;&gt; Looks like one for each attribute, so that would be n.

00:02:00.090 --> 00:02:05.040
&gt;&gt; n nodes, exactly right. So we have a term for this

00:02:05.040 --> 00:02:09.350
sort of thing, the size of the decision tree is, in fact, linear.

00:02:12.450 --> 00:02:16.310
In n. And that's for any. Now what about an n version of XOR?

00:02:16.310 --> 00:02:24.750
&gt;&gt; Mm. So XOR is, if one is true but the other one's not true then it's true.

00:02:24.750 --> 00:02:26.560
And if they're both true. Yeah I don't. It's

00:02:26.560 --> 00:02:29.960
not clear headed. Generalize that. So why not hmm.

00:02:29.960 --> 00:02:32.840
&gt;&gt; So, while the usual general version of this we like

00:02:32.840 --> 00:02:37.470
to think of as parity. All parity is a way of counting,

00:02:37.470 --> 00:02:40.820
so there's usual two forms of parity that we worry about. Either

00:02:40.820 --> 00:02:44.850
even parity or odd parity. So let's pick one, it doesn't matter.

00:02:47.250 --> 00:02:48.280
Let's say.

00:02:48.280 --> 00:02:48.770
&gt;&gt; Odd.

00:02:48.770 --> 00:02:51.780
&gt;&gt; I like that, we'll do odd parity. And all that

00:02:51.780 --> 00:02:54.390
works out to be in this case is, if the number

00:02:54.390 --> 00:02:58.360
of attributes that are true is an odd number, then the

00:02:58.360 --> 00:03:02.240
output of the function is true, otherwise it's false. Got it?

00:03:02.240 --> 00:03:03.260
&gt;&gt; Got it.

00:03:03.260 --> 00:03:06.060
&gt;&gt; Okay, so, how would we make that decision tree work?

00:03:06.060 --> 00:03:12.370
&gt;&gt; Ooh. Well, we got to split on something and there all the same, so let's

00:03:12.370 --> 00:03:13.340
split on A1 again.

00:03:13.340 --> 00:03:13.850
&gt;&gt; Okay.

00:03:16.280 --> 00:03:20.080
So what do we do if A1 is true, versus being false.

00:03:20.080 --> 00:03:26.730
&gt;&gt; We don't know much if A1 is true. We have to look at everybody else.

00:03:26.730 --> 00:03:34.790
&gt;&gt; Right. So let's look at A2. What if A2 is true versus false?

00:03:34.790 --> 00:03:37.580
&gt;&gt; Well if A1 and A2 are true then, then the output is going to be

00:03:37.580 --> 00:03:40.350
whatever the parity of all the remaining variables

00:03:40.350 --> 00:03:41.600
are. So you still have to do that.

00:03:41.600 --> 00:03:45.170
&gt;&gt; Uh-huh, yup. And I'm already running out of room,

00:03:45.170 --> 00:03:48.170
so let's pretend there's only three variables. What's the output?

00:03:48.170 --> 00:03:51.400
&gt;&gt; [LAUGH] All right, so the far left. Is there's

00:03:51.400 --> 00:03:53.660
three trues which is odd so the output is true.

00:03:53.660 --> 00:03:54.180
&gt;&gt; Yep.

00:03:54.180 --> 00:04:01.560
&gt;&gt; The next leaf over, only two trues. A1 is true, A2 is true,

00:04:01.560 --> 00:04:05.430
but A3 is false, so that's two trues which is is even so the answer's false.

00:04:05.430 --> 00:04:07.100
&gt;&gt; Um-huh.

00:04:07.100 --> 00:04:08.164
&gt;&gt; Is this going to, is this pattern

00:04:08.164 --> 00:04:09.910
continuing? Now we've got. No, so then it's

00:04:09.910 --> 00:04:12.835
false again because we've got two trues and a false to get to the next leaf.

00:04:12.835 --> 00:04:13.675
&gt;&gt; Mm-hm.

00:04:13.675 --> 00:04:15.660
&gt;&gt; And we've got one true to get to the

00:04:15.660 --> 00:04:19.610
next leaf so that's true. Oh, that looks like XOR.

00:04:19.610 --> 00:04:22.100
&gt;&gt; It looks just like XOR. In fact, each

00:04:22.100 --> 00:04:23.860
one of these sub trees is kind of a version

00:04:23.860 --> 00:04:27.690
of XOR isn't it? Now what we have is, we have to do the same thing on the right.

00:04:30.020 --> 00:04:33.230
So we gotta redo A2, and we're going to be in the same

00:04:33.230 --> 00:04:36.340
situation before. And we're going to start drawing on top of each other because.

00:04:36.340 --> 00:04:36.725
&gt;&gt; [LAUGH]

00:04:36.725 --> 00:04:41.970
&gt;&gt; there's just not enough room. Hm, so, what's the answer to the one

00:04:41.970 --> 00:04:44.730
on the very right. Where all of them is false. All of them are false.

00:04:44.730 --> 00:04:50.650
&gt;&gt; So that's, an even number of trues. Zero is even. So that's false.

00:04:50.650 --> 00:04:55.490
Okay, so in the case where only A3 is true, it's true and

00:04:55.490 --> 00:04:59.030
we just keep going on and on and on again. Now imagine what would happen, in

00:04:59.030 --> 00:05:00.140
fact let me ask you Michael, what would

00:05:00.140 --> 00:05:03.750
happen if we had four attributes instead of three.

00:05:03.750 --> 00:05:06.200
&gt;&gt; Then we would be really tired of this game.

00:05:06.200 --> 00:05:09.350
&gt;&gt; Yes, and I am already tired of this game so the question is, can you.

00:05:09.350 --> 00:05:11.560
&gt;&gt; We get a whole another, a whole other level of this tree.

00:05:11.560 --> 00:05:15.290
&gt;&gt; Yep. We have the, it just goes on and on and on and nobody

00:05:15.290 --> 00:05:16.580
wants to think about it anymore. [LAUGH] So,

00:05:16.580 --> 00:05:18.230
how many nodes do you think there are?

00:05:18.230 --> 00:05:20.240
&gt;&gt; Well, for three there was one,

00:05:20.240 --> 00:05:23.050
two, three, four, five, six, seven. Which seems

00:05:23.050 --> 00:05:26.660
suspiciously like one less than the power of two.

00:05:26.660 --> 00:05:30.130
&gt;&gt; Mm-hm. And that is exactly right. You need

00:05:30.130 --> 00:05:32.320
more or less 2 to the n nodes. Or.

00:05:32.320 --> 00:05:34.720
&gt;&gt; 2 to the n, maybe, minus 1.

00:05:34.720 --> 00:05:39.110
&gt;&gt; Yeah. So let's just say big O of 2 to the n. Everyone watching this is a

00:05:39.110 --> 00:05:41.460
computer scientist to they know what they're doing. Okay

00:05:41.460 --> 00:05:45.370
so, you need an exponential therefore, as opposed to linear

00:05:49.500 --> 00:05:50.390
number of nodes.

00:05:50.390 --> 00:05:52.180
&gt;&gt; Gad.

00:05:52.180 --> 00:05:54.443
&gt;&gt; Yeah, so you very, very quickly run

00:05:54.443 --> 00:05:56.830
out of room here. You very, very quickly

00:05:56.830 --> 00:05:58.460
have a really, really big tree because it's

00:05:58.460 --> 00:06:02.520
growing exponentially. So, XOR is an exponential problem and

00:06:02.520 --> 00:06:06.380
is also known as hard. Whereas OR, at

00:06:06.380 --> 00:06:08.580
least in terms of space that you need, it's

00:06:08.580 --> 00:06:10.820
a relatively easy one. This is linear. We

00:06:10.820 --> 00:06:13.540
have another name for exponential and that is evil.

00:06:14.700 --> 00:06:17.300
Evil, evil, evil. And it's evil because it's a very

00:06:17.300 --> 00:06:21.380
difficult problem. There is no clever way to pick the right

00:06:21.380 --> 00:06:23.560
attributes in order to give you an answer. You have to

00:06:23.560 --> 00:06:27.040
look at every single thing. That's what make this kind of

00:06:27.040 --> 00:06:30.370
problem difficult. So, just as a general point, Michael, I

00:06:30.370 --> 00:06:33.390
want to make, is that we hope that in our machine

00:06:33.390 --> 00:06:37.080
learning problems we're looking at things that are more like any

00:06:37.080 --> 00:06:40.150
than we are looking at things that are more like parity.

00:06:40.150 --> 00:06:44.780
Because otherwise, we're going to need to ask a lot of questions in order to

00:06:44.780 --> 00:06:47.040
answer the, the parity questions. And we can't

00:06:47.040 --> 00:06:48.670
be particularly clever about how we do it.

00:06:48.670 --> 00:06:51.530
&gt;&gt; Though, if we were kind of clever and added another attribute,

00:06:51.530 --> 00:06:55.150
which is like, the sum of all the other attribute values, that

00:06:55.150 --> 00:06:58.331
would make it not so bad again. So maybe it's just a,

00:06:58.331 --> 00:07:01.530
it's just a kind of, bad way of writing the problem down.

00:07:01.530 --> 00:07:03.632
&gt;&gt; Well, you know, what they say about AI

00:07:03.632 --> 00:07:05.230
is that the hardest problem is coming up with

00:07:05.230 --> 00:07:07.490
a good representation. So what you just did

00:07:07.490 --> 00:07:09.820
is, you came up with a better representation,

00:07:09.820 --> 00:07:11.785
where you created some new pair, new variable.

00:07:11.785 --> 00:07:14.710
Let's call it B, which is just the sum

00:07:16.770 --> 00:07:19.000
of all of the As, where we pretend that I don't know,

00:07:19.000 --> 00:07:21.710
true is one and false is zero. This is actually a really good

00:07:21.710 --> 00:07:26.370
idea. It's also called cheating. [LAUGH] Because you [LAUGH] got to solve the

00:07:26.370 --> 00:07:29.980
problem by picking the best representation in the first place. But you know

00:07:29.980 --> 00:07:32.270
what? It's a good point, that in order for a machine running

00:07:32.270 --> 00:07:34.480
to work, you either need an easy problem or you need to find

00:07:34.480 --> 00:07:37.090
a clever way of cheating. So, let's come back and think about that

00:07:37.090 --> 00:07:39.340
throughout all the rest of the lessons. What's the best way to cheat?

