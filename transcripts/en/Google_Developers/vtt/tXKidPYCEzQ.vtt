WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:37.040
&gt;&gt; FOX: All right. Hey, everyone. Welcome
to the session. This is one of our--oh, I'll

00:00:37.040 --> 00:01:09.490
just press the button. I will press the button.
Tada, all right, so this is Anatomy of a Great

00:01:09.490 --> 00:01:59.840
Extension and this one of the--this is the
first actual talk in the Wave Track at I/O.

00:01:59.840 --> 00:02:22.990
And this talk is actually geared towards people
that have actually already probably used the

00:02:22.990 --> 00:02:46.490
APIs and have made a gadget or a robot, and
they're thinking about how to actually make

00:02:46.490 --> 00:03:19.450
their extensions better and more usable. So
hopefully, you know, that applies to you guys.

00:03:19.450 --> 00:03:49.320
So to start off with, I want to remind everyone
that we are using Wave as a back channel for

00:03:49.320 --> 00:04:18.370
the conference. And since you guys are probably
a fan to Wave, this is, you know, a great

00:04:18.370 --> 00:04:54.630
thing for you. So if
you do have your laptop out and you do have

00:04:54.630 --> 00:05:22.290
wireless access, you can go to "bit.ly/wavey-ext"
and that'll take you to the live wave for

00:05:22.290 --> 00:05:45.920
this session. So, that live wave has a place
where you can ask questions. It has a place

00:05:45.920 --> 00:06:21.560
where my colleagues going to be taking notes
during the session and then also, you know--obviously,

00:06:21.560 --> 00:06:52.330
it's a wave. You can have free forum discussion
on it. So feel free to join there and we'll

00:06:52.330 --> 00:07:28.720
add our resources to that wave after the talk
too, so you can review the slides. All right,

00:07:28.720 --> 00:07:58.840
so first, talking a bit about me, so my name
is Pamela Fox and I work on Developer Relations

00:07:58.840 --> 00:08:25.370
for the Wave APIs, which basically means that
I'm helping developers, like you guys, write

00:08:25.370 --> 00:08:55.790
very cool extensions. Now, I want to know
a little bit about you guys just so you have

00:08:55.790 --> 00:09:22.860
a feel for what the audience is. So how many
of you guys have developed with the Wave APIs

00:09:22.860 --> 00:09:51.800
before? All right, how many of you guys have
used a wave extension before inside your Web?

00:09:51.800 --> 00:10:26.361
Okay, good. All right, so it seems about half
of you guys have actually used the APIs, and

00:10:26.361 --> 00:10:48.840
most of you or all of you have used the wave
extensions. So, you know, some of the things

00:10:48.840 --> 00:11:01.360
for people who haven't done the APIs, you
know, make it a little bit over your heads.

00:11:01.360 --> 00:11:19.910
But I think that you'll still get some insights
from this. All right, so first, let's just

00:11:19.910 --> 00:11:31.230
review what Google Wave is, right? It's basically
this communication tool that combines a lot

00:11:31.230 --> 00:11:53.191
of nice features into one, right? So we have
stuff like, you know, multiple people on a

00:11:53.191 --> 00:12:16.551
wave. You can reply anywhere. You can reply
in line. You can have nested replies. You

00:12:16.551 --> 00:12:39.279
can have live editing and real time transition
of what's happening and you can have this

00:12:39.279 --> 00:13:02.430
rich media inside your wave whether it's attachments
or gadgets or stuff like that. So really,

00:13:02.430 --> 00:13:25.730
this product could be used for all kinds of
things, right? You know, it could be Email

00:13:25.730 --> 00:13:46.620
2.0. It could be Wiki or whatever. But what
it turns out being best for is--right now,

00:13:46.620 --> 00:14:03.779
at least--is getting stuff done with groups
of people, all right? Basically, everyone

00:14:03.779 --> 00:14:23.110
who's really enjoying using Wave now is using
it to do something project-oriented with some

00:14:23.110 --> 00:14:37.880
people. Now, Google Wave Extensions, a racy
ways of extending this very generic communication

00:14:37.880 --> 00:14:57.070
tool into something customized for a particular
use-case, right? So for example, out-of-the-box,

00:14:57.070 --> 00:15:25.800
Google Wave may be very good for task tracking,
but when you add in a task tracking robot

00:15:25.800 --> 00:15:33.649
that auto-tags, auto-assigns, create, save,
searches then it becomes--like Google Wave

00:15:33.649 --> 00:15:50.310
becomes a killer app for task tracking, right?
So the whole point of Wave extension is helping

00:15:50.310 --> 00:16:14.890
these users get stuff done faster and better
by customizing this generic tool even further

00:16:14.890 --> 00:16:48.700
for them, right? So as--well, as a developer
making an extension, you should be thinking

00:16:48.700 --> 00:17:05.789
about, you know, what does your extension
is helping people do, and making sure that

00:17:05.789 --> 00:17:27.439
it's highly usable, right? So in this talk,
we're basically talking about, you know, how

00:17:27.439 --> 00:17:50.049
do you make these extensions that users are
going to love and that are really going to

00:17:50.049 --> 00:18:11.640
take advantage of the power of Wave for working
with groups of people? All right, and much

00:18:11.640 --> 00:18:30.059
of this advice is actually based on advice
that I've given developers. So when you create

00:18:30.059 --> 00:18:45.659
an extension, as a wave developer, and you
want to share in the gallery, you actually

00:18:45.659 --> 00:19:08.539
submit it using this in wave submission process.
So you create a wave with us in the review

00:19:08.539 --> 00:19:34.869
team where you answer a bunch of questions
and, you know, you link to a sample wave,

00:19:34.869 --> 00:20:07.620
and then we--basically, we go back and forth.
And, you know, we say like, "Well, you know,

00:20:07.620 --> 00:20:32.149
the getting started is a little bit hard,"
or "The thumbnail just doesn't work for me,"

00:20:32.149 --> 00:20:57.090
right? So

00:20:57.090 --> 00:21:26.450
we go back and forth, iterate. And then when
we're all satisfied, we approve the extension

00:21:26.450 --> 00:21:51.700
for the gallery. So every extension that you've
seen in the gallery is gone through this process.

00:21:51.700 --> 00:22:16.869
So I've done about 80 of those extensions.
You can see my save, search within there.

00:22:16.869 --> 00:22:50.369
And in doing those 80 extensions, I've developed
quite a few opinions and ideas about what

00:22:50.369 --> 00:23:23.340
it is that actually makes a good extension.
And I would eventually guess that I've probably

00:23:23.340 --> 00:24:00.009
tried more extensions than anyone in the world.
And you should see my toolbar. My editing

00:24:00.009 --> 00:24:26.289
toolbar takes the entire page up. So I've
tried a lot of extensions. So basically today,

00:24:26.289 --> 00:24:54.940
it's all about sharing what I've learned with
you guys. And, you know, I'm hoping to hear

00:24:54.940 --> 00:25:41.739
what you guys think as well. All right, so
I've broken this up into different steps and

00:25:41.739 --> 00:25:55.519
kind of go in sequentially through the process
of using an extension. So the first thing

00:25:55.519 --> 00:26:12.379
that a user does when they're using an extension
is that they see the installer. So the installer

00:26:12.379 --> 00:26:19.499
is how you actually insert an extension into
your Wave experience. So here's a wave within

00:26:19.499 --> 00:26:32.149
an installer. Installer is a very basic widget,
okay? It has just a couple parts of it, but

00:26:32.149 --> 00:26:46.129
all of those parts are actually very important.
The first part is the name. Okay. So name

00:26:46.129 --> 00:26:58.129
should be descriptive and it should also,
ideally, unique and maybe also be a bit Wave-y,

00:26:58.129 --> 00:27:13.009
all right? So this, here, this is an installer
for a task tracking robot that I highly recommend,

00:27:13.009 --> 00:27:27.389
and it's called Tasky. So it's good because
task indicates its task tracking, right? Tasky

00:27:27.389 --> 00:27:39.149
makes it more unique because it actually,
you know, has a Y in the end. The ending Y

00:27:39.149 --> 00:27:46.440
is something comes more unique, and it also
makes it Wave-y because if, you know--if you

00:27:46.440 --> 00:28:22.929
haven't notice, we tend to end a lot of our
robots with Y. And it's a little bit of a

00:28:22.929 --> 00:28:43.700
tradition that we intend to keep doing forever
and ever and ever. So it's a great name for

00:28:43.700 --> 00:28:52.919
this robot: descriptive, unique, catchy. Then
we have the description. The description says,

00:28:52.919 --> 00:29:05.549
"Use the new wave menu to create task or the
toolbar to create task from selected test."

00:29:05.549 --> 00:29:21.419
So this description's really great because
it says how we're actually going to be using

00:29:21.419 --> 00:29:35.870
the extension. We're going to be clicking
new wave or we're going to be selecting test.

00:29:35.870 --> 00:29:49.499
And it says what happens when we do that.
It actually creates new task. So I know what

00:29:49.499 --> 00:30:02.119
this thing's going to do for me and how I'm
going to use it, so a great description. And

00:30:02.119 --> 00:30:13.609
then we have the thumbnail or what I call
like the iconography. And the thumbnail here

00:30:13.609 --> 00:30:28.749
is a very basic check mark with the simple
color scheme. And this thumbnail is important

00:30:28.749 --> 00:30:53.750
for a couple of reasons. One is that it's
going to show up when they look at the extensions

00:30:53.750 --> 00:31:16.599
gallery. So when they're clickily looking
through, they're going to be looking at all

00:31:16.599 --> 00:31:29.570
those images. And you know, people love to
look at images. So the more descriptive and

00:31:29.570 --> 00:31:45.120
catchy you can make your images, the better
because they're going to be drawn to that--to

00:31:45.120 --> 00:31:59.049
your extension and be clicking on that instead
of the other ones. The other thing that it's

00:31:59.049 --> 00:32:16.479
important is because this thumbnail is actually
used in multiple places when a user is using

00:32:16.479 --> 00:32:26.390
the extension. So you want to have it be recognizable
and be the same everywhere. So for example,

00:32:26.390 --> 00:32:40.369
this one, here, I've created the new wave--new
task wave basically. And I can see the thumbnail

00:32:40.369 --> 00:33:00.129
is the robot avatar, right? So when I'm looking
at the waves that I've created with Tasky,

00:33:00.129 --> 00:33:33.479
I immediately know that they're Tasky-created
because I see this thumbnail. So

00:33:33.479 --> 00:34:05.259
it's a nice visual recognition for me. Now,
when I want to select text and click a toolbar

00:34:05.259 --> 00:34:26.410
icon, the toolbar icon is once again that
checkmark, right? So this is good because

00:34:26.410 --> 00:34:47.200
now when I've seen the image in the installer
then it's the same image I see on the toolbar,

00:34:47.200 --> 00:35:17.510
it's the same image I see on the robot avatar.
So you want to keep your images and your iconography

00:35:17.510 --> 00:35:38.490
the same throughout, and you want to make
sure that iconography is descriptive and recognizable.

00:35:38.490 --> 00:36:07.320
All right, so now once they've installed your
extension, they're actually going to see it,

00:36:07.320 --> 00:36:53.630
right? They're going to put it inside a wave
and see what it looks like. And you have to

00:36:53.630 --> 00:37:10.480
decide, what is your extension actually going
to like? What's the look and feel going to

00:37:10.480 --> 00:37:41.890
be, right? What's the interface? How's it
going to be styled? So the way I see it, you

00:37:41.890 --> 00:38:04.940
basically have two options or two situations.
The first situation is if you are creating

00:38:04.940 --> 00:38:27.731
an extension that integrates with an existing
website that you have, right? And maybe that

00:38:27.731 --> 00:38:49.370
existing website already has users. People
already know it. If you're doing that then

00:38:49.370 --> 00:39:09.020
you should actually paste "Look &amp; Feel" on
your website, right? Because users will see

00:39:09.020 --> 00:39:34.650
your extension, see the website and they'll
make the visual link and think, "Ah, this

00:39:34.650 --> 00:39:45.170
is just bringing that website into wave. I
understand that this is the same website."

00:39:45.170 --> 00:40:07.570
This example here, this is 6rounds. They're
actually at I/O in the Sandbox pod if you

00:40:07.570 --> 00:40:30.840
want to go visit them. And they're an existing
website for interactive video chatting. You

00:40:30.840 --> 00:40:50.010
know, they were around before Wave. And their
look and feel is this orange, gray, black,

00:40:50.010 --> 00:41:05.130
bubbly, rounded corner thing, right? When
they went to make a wave extension, they brought

00:41:05.130 --> 00:41:19.800
that look and feel into the wave extension
as well. So when you look at it, it looks

00:41:19.800 --> 00:41:33.890
very distinctively like you're using the app
of another company. And if you decided to

00:41:33.890 --> 00:42:11.150
become like a full on 6rounds user and using
it outside of wave, it would feel like a consistent

00:42:11.150 --> 00:42:37.000
experience. So as a company, that's probably
fairly obvious for you to reuse your existing

00:42:37.000 --> 00:42:57.600
user interface. So then the question comes
up, if you're not making an extension that's

00:42:57.600 --> 00:43:16.960
based on some existing website company then
what it should look like? So some people use

00:43:16.960 --> 00:43:41.210
like jQuery UI. I mean, everybody uses jQuery
UI. Some people use GWT and some people don't

00:43:41.210 --> 00:44:06.870
do any styling at all. But
what I would recommend is that you try to

00:44:06.870 --> 00:44:27.630
make your extension look like the Wave interface,
right? Because imagine that a user has like

00:44:27.630 --> 00:44:48.270
five different gadgets in a Wave, imagine
each of those gadgets uses their own like

00:44:48.270 --> 00:45:04.690
arbitrary look and feel, maybe they each use
five different jQuery UI themes, right? It's

00:45:04.690 --> 00:45:22.890
just when you're looking at your wave, it's
going to look kind of cluttered. It's going

00:45:22.890 --> 00:45:38.980
to feel a little awkward--maybe a little bit
ugly, right? So if instead each of those gadgets

00:45:38.980 --> 00:45:58.620
all mirrored the Wave user-interface then
you look at your wave and it's just--it feels

00:45:58.620 --> 00:46:13.640
like this cohesive experience and you feel
like those extensions were actually built

00:46:13.640 --> 00:46:32.050
to live inside Wave and it's a happy habitat.
Now the thing is that it wasn't easy to mimic

00:46:32.050 --> 00:46:51.670
the Wave UI in the past because the Wave UI,
it's all created from GWT widget that's Java

00:46:51.670 --> 00:47:18.080
to JavaScript. And so if you wanted to pull
them in, you'd have to do some crazy copy

00:47:18.080 --> 00:47:44.650
and paste, which I did do, but it's not easy.
So what we've done--and we launch this today--is

00:47:44.650 --> 00:48:06.700
made a Wave UI library. This is inside the
gadgets API. You can check now the reference.

00:48:06.700 --> 00:48:32.630
It's live. And it's simple right now. It's
got a couple of methods in it. And they basically

00:48:32.630 --> 00:48:45.170
take elements and convert them into Wave-y
looking elements. So we have "wave.ui.makeButton".

00:48:45.170 --> 00:49:00.160
It takes a link element, turns it into a button
even with little mousedown-effects. "wave.ui.makeDialog"

00:49:00.160 --> 00:49:20.190
it takes a div and turns it into, you know,
basically what you'd use instead of an alert.

00:49:20.190 --> 00:49:42.470
Please don't use alerts as a general rule.
I mean I do it too, but let's just all try

00:49:42.470 --> 00:49:52.580
not to use alerts when possible, okay? And
then we have "wave.ui.makeFrame", which is

00:49:52.580 --> 00:50:01.190
a nice way to give a border to your gadget.
I always recommend bordering your gadgets

00:50:01.190 --> 00:50:13.090
so people know where a gadget ends and text
begins so, that's a nice way to border your

00:50:13.090 --> 00:50:17.430
gadget. And then "wave.ui.loadCSS", that's
actually called by each of those, but you

00:50:17.430 --> 00:50:32.070
can also call it separately. And that just
imports the style sheet that defines very

00:50:32.070 --> 00:50:47.880
basic CSS rules like the body, font family,
font size--so it just takes on the--you know,

00:50:47.880 --> 00:51:02.730
the general look of the client. So we just
want this--there may be a few issues with

00:51:02.730 --> 00:51:19.640
it. Please, you know, try it out. Give your
feedback. Let us know what other elements

00:51:19.640 --> 00:51:22.490
you think you need like, you know, dropdown,
et cetera. Because I think it's really--it's

00:51:22.490 --> 00:51:34.220
going to make extensions just look a lot better
if they're all kind of supporting this cohesive

00:51:34.220 --> 00:51:42.210
look and feel. All right, so now you've looked
at the extension and you're like, "Oh, its

00:51:42.210 --> 00:51:52.890
pretty. It looks like Wave. It looks like
company," or whatever, right? Now you actually

00:51:52.890 --> 00:52:01.680
want to start using it. Now, there's a lot
of things that you can say about user experience

00:52:01.680 --> 00:52:16.330
and there's actually a talk later at I/O that
you should go to. That's entirely about user

00:52:16.330 --> 00:52:30.190
experience. You know, it's always useful to
learn more about that. What I often find myself

00:52:30.190 --> 00:52:42.600
telling developers is just to improve the
user experience of the "getting started" experience.

00:52:42.600 --> 00:52:57.930
The first few minutes of using a gadget, those
are really important, okay? Because, you know,

00:52:57.930 --> 00:53:12.770
they try--they insert your gadget, they see
it. If they can't get it working in two minutes,

00:53:12.770 --> 00:53:21.310
they're probably never going to use it again,
right? And as developers, I think we often

00:53:21.310 --> 00:53:33.860
forget about this few minutes because we know
how to use a gadget, we're used to it, and

00:53:33.860 --> 00:53:47.070
we get then, you know, we get beyond this
"getting started" and we get to the next stage

00:53:47.070 --> 00:53:49.560
and we're like, "Ah, it's so cool once you're
in advance mode." But if they never get to

00:53:49.560 --> 00:54:16.590
advance mode then you've lost them, right?
So you should really focus on what that "getting

00:54:16.590 --> 00:54:38.070
started" experience is like if you want to
keep them users. So a couple of examples here,

00:54:38.070 --> 00:54:51.570
this one is your brainstormer. It's a great
brainstorming gadget created by a couple of

00:54:51.570 --> 00:55:02.520
students in Singapore for a class assignment
on Wave. And as soon as you insert this gadget,

00:55:02.520 --> 00:55:21.790
it pops up a dialogue that prompts you to
fill up the main topic, right? So when you're

00:55:21.790 --> 00:55:29.500
looking at this, the only thing that you can
do here is fill-out that main topic, which

00:55:29.500 --> 00:55:34.840
I think is cool. Because as a user, I don't
have to think, right? I can just do the first

00:55:34.840 --> 00:55:47.440
thing that needs to be done which is fill-out
that topic. So then when I do that, it shows

00:55:47.440 --> 00:55:50.190
me the main topic, food. I always think about
food. And then I'm looking at this blank spaces

00:55:50.190 --> 00:55:56.010
canvass and thinking, "Okay, well. What do
I do next?" Well, what it does is that this

00:55:56.010 --> 00:56:08.360
gadget actually pops up this little call out,
up in upper left there that says, "Click here

00:56:08.360 --> 00:56:27.510
to learn how to use this gadget," and points
back to a how-to-use button. And it keeps

00:56:27.510 --> 00:56:44.080
it up for about 15 seconds and fades it out.
So this is really cool because if I've never

00:56:44.080 --> 00:56:51.300
used this gadget before and I'm staring at
this node in the middle and I'm not sure what

00:56:51.300 --> 00:57:00.390
to do next, I immediately see this little
call out in the corner and think, "Yeah, I'm

00:57:00.390 --> 00:57:07.210
going to click there. That's a good idea."
So then when you click there, you got a very

00:57:07.210 --> 00:57:08.210
simple to understand help screen, which has
a legend and has some keyboard and mouse shortcuts,

00:57:08.210 --> 00:57:11.571
all right? And so I can look at this help
screen then do some stuff. If forget some

00:57:11.571 --> 00:57:12.571
things, I can always click back on that how
to use button, right? So I mean, the lessons

00:57:12.571 --> 00:57:22.650
you learn from this one is making the first
step really easy whether it's setting the

00:57:22.650 --> 00:57:29.030
location or adding a person or whatever it
is. And then always making it easy to find

00:57:29.030 --> 00:57:30.030
the help screen, help button, and maybe pointing
it--making it a little more clear to people

00:57:30.030 --> 00:57:32.230
that are using it for the first time. Now,
another inter-experience that I really like

00:57:32.230 --> 00:57:36.950
is this is from CS Odessa MindWave. And this
is another set of developers that are at the

00:57:36.950 --> 00:57:56.580
Sandbox and actually sitting in the audience
as well. And they--basically, they've created

00:57:56.580 --> 00:58:09.050
this mind mapping gadget. And it actually--it
exports to their desktops afterward, which

00:58:09.050 --> 00:58:10.440
I think is really cool. And when I first try
to use their gadget, I couldn't really figure

00:58:10.440 --> 00:58:11.440
out. I haven't done much mind mapping. I've
never used their--I've never used their thing

00:58:11.440 --> 00:58:12.440
before. And I was presented with this blank
canvass and I just didn't know what to do.

00:58:12.440 --> 00:58:13.440
I couldn't figure out the navigation. And
I explained this to them. And I said, like,

00:58:13.440 --> 00:58:14.440
"Listen, I just really need a better "getting
started" experience. So they came back with

00:58:14.440 --> 00:58:15.440
this, which is when you first insert the gadget
it actually creates a tutorial mind map, right?

00:58:15.440 --> 00:58:20.300
So this is just--this is actually the help
in the form of a mind map. So what you do

00:58:20.300 --> 00:58:24.490
is you actually browse around this mind map
to learn how to do stuff and you can go and

00:58:24.490 --> 00:58:25.490
add some nodes to it, collapse nodes, expand
nodes, et cetera. So I'm both reading the

00:58:25.490 --> 00:58:27.680
help and using this interface at the same
time. So I think it's a really cool interface

00:58:27.680 --> 00:58:28.680
for learning how to use this, you know, this
mind mapping thing. So this, I think--I mean,

00:58:28.680 --> 00:58:29.680
you're not going to be able to do this with
all the things you're doing but it's, you

00:58:29.680 --> 00:58:30.680
know, a really nice way of approaching the
help screen "getting started" experience.

00:58:30.680 --> 00:58:33.700
So yeah, you can visit them in the Sandbox
later if you want to see more and actually

00:58:33.700 --> 00:58:34.700
play around with this tutorial screen yourself.
All right, so now we have to get "to using"

00:58:34.700 --> 00:58:35.700
the extension. So here's is we're talking
about Wave-y-ness, which is the characteristics

00:58:35.700 --> 00:58:36.790
of your extension that really make it fit
inside the Wave environment and it's really

00:58:36.790 --> 00:58:38.210
different from being inside of any other environment,
right? Stuff like ease of use, and look and

00:58:38.210 --> 00:58:40.700
feel, that's kind of stuff you'd be thinking
about, you know, in any gadget container,

00:58:40.700 --> 00:58:42.670
robot container, or whatever. But Wave-y-ness
is something only for Wave. So let's talk

00:58:42.670 --> 00:58:44.210
about that. So first, I'll talk about gadgets
because they have their own unique characteristics.

00:58:44.210 --> 00:59:03.210
And first, let me clarify, you know, what
it is that gadgets are and why is it that

00:59:03.210 --> 00:59:08.270
we use them. So this example wave here is
completely text-based, right, just using the

00:59:08.270 --> 00:59:17.640
textual editing functionality of Wave that
comes out of the box, all right? And it's--if

00:59:17.640 --> 00:59:38.860
you can't sell, it's a zombie-killing planning
wave, which is a very common use-case for

00:59:38.860 --> 01:00:16.790
Wave as it turns out. So what we have here
is we have a list of addresses which is where

01:00:16.790 --> 01:00:19.230
we're going to kill the zombies. We have the
weather, so, you know, sometimes it's shady,

01:00:19.230 --> 01:00:21.370
you know, shady weather when you're killing
zombies, and then we have a list of volunteers

01:00:21.370 --> 01:00:22.970
for the mission, all right? So, you know,
this is cool. You're looking at those Wave,

01:00:22.970 --> 01:00:25.160
you're thinking, "Yeah, all right, I think
I know what it is we're doing. I think I'm

01:00:25.160 --> 01:00:26.160
ready to kill some zombies." But what if you're
looking at this wave? This is a wave that's

01:00:26.160 --> 01:00:27.560
used gadgets in order to visualize some of
the information that we saw on the other one.

01:00:27.560 --> 01:00:30.670
So instead of that list of addresses, we have
a map with polylines and polygons and markers

01:00:30.670 --> 01:00:32.030
on it, right? And instead of the weather that
was listing, we have a visual image of that

01:00:32.030 --> 01:00:33.030
weather. Instead of that bulleted list of
people, we have a yes-no-maybe gadget. So

01:00:33.030 --> 01:00:34.050
now when I look at this wave, I really start
to understand it better and I don't even have

01:00:34.050 --> 01:00:35.050
to parse that much information. So basically
the point of gadgets is to extend textual

01:00:35.050 --> 01:00:36.050
communication, individual communication where
it makes more sense, right, where it's just

01:00:36.050 --> 01:00:37.050
easier for the user to visualize that kind
of information, you know, with the gadget

01:00:37.050 --> 01:00:38.050
instead of as text. So because gadgets are
basically, you know, an extension of textual

01:00:38.050 --> 01:00:39.050
communication, gadgets should share all the
same properties as textual communication.

01:00:39.050 --> 01:00:40.050
And sharing those properties is what makes
gadgets Wave-y. So I'll explain more on this

01:00:40.050 --> 01:00:41.050
to, you know, making more sense. So for example,
one property of textual communication wave

01:00:41.050 --> 01:00:42.070
is the fact that you have multiple users editing
at once at the same time. So when you see

01:00:42.070 --> 01:00:43.730
this in text, what you see is multiple users'
indicators, right? So we call them the user

01:00:43.730 --> 01:00:44.730
carats, the colored little indicators with
their names. So here, we're writing this story

01:00:44.730 --> 01:00:45.730
and I see that Vadim is at the top, Austin's
at the bottom and this is in the middle. So

01:00:45.730 --> 01:00:46.730
it's really helpful when multiple people are
editing at once to know where they are because

01:00:46.730 --> 01:00:47.730
that way, you know, you only work on the parts
that you need to. If Austin's working on the

01:00:47.730 --> 01:00:48.730
conclusion, and I'm not going to work on the
conclusion because I hate conclusion, I'm

01:00:48.730 --> 01:00:49.730
happy to work in the middle, right? And it
means that, you know, we work on different

01:00:49.730 --> 01:00:50.730
parts and we can paralyze the work more because
we can see where each other's are and so we

01:00:50.730 --> 01:00:51.730
can get to the endpoint faster. So being able
to visualize where other people are makes

01:00:51.730 --> 01:00:52.730
you more productive, right, makes you get
that stuff done faster. In gadgets, it's the

01:00:52.730 --> 01:00:53.730
same thing. If you have multiple people working
on a gadget at the same time, you want to

01:00:53.730 --> 01:01:05.450
know where those people are and what it is
that they're modifying in that gadget so that

01:01:05.450 --> 01:01:17.120
you know that you're not replicating work
and that you're going to get this done faster.

01:01:17.120 --> 01:01:18.990
So this example, Sudoku, you know, when they
first got this re-launched. And basically,

01:01:18.990 --> 01:01:19.990
the goal is to try and solve the Sudoku board,
right, so figure out the numbers that go in

01:01:19.990 --> 01:01:26.350
each spot. So what it does is that it visualizes
the colors of the cells as in relates them

01:01:26.350 --> 01:01:29.030
as a legend here to actual people that have--that
are in those cells right now. So when I'm

01:01:29.030 --> 01:01:30.830
looking at this, I know that Dan is in that
purple cell so there's no reason for me to

01:01:30.830 --> 01:01:31.830
be in that purple cell because he'll probably
figure it out first, right? So by knowing

01:01:31.830 --> 01:01:32.850
where the people are, we can actually solve
this Sudoku board faster. So generally, you

01:01:32.850 --> 01:01:34.130
should try to visualize where it is that everybody
is inside your gadget. I mean, the visual

01:01:34.130 --> 01:01:35.340
space for everybody's gadgets is different
so it's not going to always be like this straightforward

01:01:35.340 --> 01:01:36.470
grid. But if there are multiple people at
once, try and show people where the other

01:01:36.470 --> 01:01:37.530
people are. And if you are using something
like colors, include the legend, otherwise,

01:01:37.530 --> 01:01:38.830
you can always use--a lot of people use thumbnails.
People do tend to recognize photos quite easily

01:01:38.830 --> 01:01:39.960
except when people use ridiculous avatars.
All right, so similar to that, when you have

01:01:39.960 --> 01:01:41.900
multiple people doing stuff in a wave, Wave
actually points out or calls out the information

01:01:41.900 --> 01:01:43.930
about your state in a particular way. It renders
your information differently. And I call this

01:01:43.930 --> 01:01:44.930
"Viewer-Specific Information". So, one example
is that when you're typing, Vadim and Austin,

01:01:44.930 --> 01:01:45.930
they have these colored indicators. I just
have a blinking cursor, right. So when you

01:01:45.930 --> 01:01:46.930
look at a wave and you're wondering, oh, where
am I editing right now? You look for the blinking

01:01:46.930 --> 01:01:47.930
cursor, right. You don't look for your colored
indicator. So this way, it's really easy for

01:01:47.930 --> 01:01:48.930
me to actually figure out where it is I am
in the wave because it has a unique rendering

01:01:48.930 --> 01:01:49.930
versus visualizing where the other people
are. So you want to use this in a gadget as

01:01:49.930 --> 01:01:50.930
well is to call out the information that's
most important to the viewer. All right. So

01:01:50.930 --> 01:01:51.930
this example here, is a very simple gadget
called Likey which leads you like or dislike

01:01:51.930 --> 01:01:52.930
things, right. So I click like and it's, you
know, says its total account and then it also

01:01:52.930 --> 01:01:53.930
says you like this on the bottom. So immediately
when I look at this gadget, I don't have to

01:01:53.930 --> 01:01:54.930
sit there and try to figure out, you know,
did I like it, did I dislike it? I see, oh,

01:01:54.930 --> 01:01:55.930
I like this. So this is the same example,
if you're doing something like a game, you

01:01:55.930 --> 01:01:56.930
would call out the viewer's score in a different,
you know, visual then the rest of people's

01:01:56.930 --> 01:01:57.930
scores because you care more about your score
than everybody else is. So there's different

01:01:57.930 --> 01:01:58.930
ways that you can kind of separate or distinguish
the viewer's information versus the other

01:01:58.930 --> 01:01:59.930
people, but you should try to do it because
people are always the most concerned about

01:01:59.930 --> 01:02:00.930
their particular contribution to something,
so emphasizing that is good. And you can do

01:02:00.930 --> 01:02:01.930
this in a Gadgets API pretty easily because
you can get the current idea of the viewer

01:02:01.930 --> 01:02:02.930
and you should always be storing participant
IDs in your state when you're relating it

01:02:02.930 --> 01:02:03.930
to pieces of information because you know
you can just compare. All right, there's a

01:02:03.930 --> 01:02:04.930
current viewer ID and this bit of information
to the gadget was contributed to our business

01:02:04.930 --> 01:02:05.930
participant, so I'm going to give this special
rendering. All right. Now another aspect of

01:02:05.930 --> 01:02:06.930
text editing in wave is that there are two
different modes of editing a wave or a blip,

01:02:06.930 --> 01:02:07.930
one is edit and one is view. And these have
basically, you know, different ways of showing

01:02:07.930 --> 01:02:08.930
the interface. So edit mode that's when I'm
actually editing the text in a blip. And here,

01:02:08.930 --> 01:02:09.930
I've got a blinking cursor, I have a done
button, and I have a full on editing toolbar

01:02:09.930 --> 01:02:10.930
at the top to let me do stuff like bullets
and certain gadgets, et cetera. Now, if I

01:02:10.930 --> 01:02:11.930
look at the map gadget in edit mode, it's
similar. It has a toolbar at the bottom for

01:02:11.930 --> 01:02:12.930
adding markers and lines, and polygons. When
I click on an info window, it has the textboxes

01:02:12.930 --> 01:02:13.930
so I can actually enter in information and
change it inside that info window. So it's

01:02:13.930 --> 01:02:14.930
fairly clear to me when I'm looking at the
map gadget in edit mode that I am editing

01:02:14.930 --> 01:02:15.930
this information. All right. I'm contributing
to the state of the gadget. When you go into

01:02:15.930 --> 01:02:16.930
view mode, when you're textural editing, your
cursor changes, you lose your blinking cursor

01:02:16.930 --> 01:02:17.930
and that toolbar at the top goes to just doing
these private read-only actions. So it's pretty

01:02:17.930 --> 01:02:18.930
clear that you are in read mode. And just
on a note because I did mention cursor, always

01:02:18.930 --> 01:02:19.930
pay attention to what your cursor is doing
in a gadget. I think cursor changes are really

01:02:19.930 --> 01:02:20.930
important to users to indicating when stuff
is clickable, when stuff is mouse, you know,

01:02:20.930 --> 01:02:21.930
mouse roverable, stuff like that. So, cursor
changes are pretty important. Don't treat

01:02:21.930 --> 01:02:22.930
your cursor lightly. So here's view mode for
text editing, and if I go into view mode on

01:02:22.930 --> 01:02:23.930
the map gadget, you can see I lose my editing
toolbar at the bottom, I only have the zoom

01:02:23.930 --> 01:02:24.930
toolbar left. And when I click on an info
window or simply seeing text nodes and not

01:02:24.930 --> 01:02:25.930
input nodes, right. So it's pretty clear that
I can't actually edit any of this information

01:02:25.930 --> 01:02:26.930
anymore. Now you don't have to obey the edit
mode, view mode difference in your gadgets.

01:02:26.930 --> 01:02:27.930
You could technically you have it so they
can be editable in all modes and that's kind

01:02:27.930 --> 01:02:28.930
of the design decision you have to make. But
there are many situations where it really

01:02:28.930 --> 01:02:29.930
makes sense to have a distinction between
edit mode and view mode, and we'll see one

01:02:29.930 --> 01:02:30.930
in a demo coming up. And if you want to do
that, it's really easy in the API, Gadgets

01:02:30.930 --> 01:02:31.930
API, you do set mode callback to a particular
function and whenever the mode changes between

01:02:31.930 --> 01:02:32.930
edit and view, because it can change multiple
times, you can get the current mode and you

01:02:32.930 --> 01:02:33.930
can switch your interface the cause and functions
depending on when the current mode is. All

01:02:33.930 --> 01:02:34.930
right. So actually, on that note, I want to
bring up this team here to show off their

01:02:34.930 --> 01:02:35.930
gadget would shows off a lot of the wavey
features that we're just talking about for

01:02:35.930 --> 01:02:36.930
gadgets.
&gt;&gt; GODERBAUER: Okay. Thank you. My name is

01:02:36.930 --> 01:02:37.930
Michael Goderbauer, I'm from the processWave.org
team and today I'm here to introduce you to

01:02:37.930 --> 01:02:38.930
our processWave.org Editor. And the processWave.org
Editor basically is a collaborative diagram

01:02:38.930 --> 01:02:39.930
tool for Google Wave so that means it allow
multiple persons to edit the same diagram

01:02:39.930 --> 01:02:40.930
at the same time. While I present this editor
to you, I'll point out some of the maybe features

01:02:40.930 --> 01:02:41.930
Pamela was talking about earlier and show
how we implement it those features into our

01:02:41.930 --> 01:02:42.930
gadget. So, to get started, I have created
a wave here. Right now, it's still empty,

01:02:42.930 --> 01:02:43.930
so we should get started right away and insert
our editor into this wave using the button

01:02:43.930 --> 01:02:44.930
up here in the toolbar. As you can see, we
currently support six different diagram languages

01:02:44.930 --> 01:02:45.930
from the area of computer of software modeling
as well as business process modeling. For

01:02:45.930 --> 01:02:46.930
example, there are UML class diagrams for
the computer fellows as well as event driven

01:02:46.930 --> 01:02:47.930
process change for the business department.
But today, I feel like illustrating this very

01:02:47.930 --> 01:02:48.930
process of me presenting the gadget to you
using the business process modeling notation.

01:02:48.930 --> 01:02:49.930
So, that's why I pick BPMN up here. The editor
will file up that will just take a few seconds

01:02:49.930 --> 01:02:50.930
and if you would have better Internet connection
that would be a lot faster. Okay. There it

01:02:50.930 --> 01:02:51.930
is. And, here, you can see our drawing canvas
and there's a shape repository on the far

01:02:51.930 --> 01:02:52.930
left side. So, since each process starts with
a unique starting event, it starts our process

01:02:52.930 --> 01:02:53.930
here by dragging out a starting event onto
the canvas, so there it is. Next, mutant activity.

01:02:53.930 --> 01:02:54.930
So activities in business process modeling
notation are represented by those rectangle

01:02:54.930 --> 01:02:55.930
shapes which you can see here. So I just take
one and put it next to the starting event

01:02:55.930 --> 01:02:56.930
onto the canvas. The first activity of our
process would be me entering the stage. So

01:02:56.930 --> 01:02:57.930
I just type, enter stage. Next, we need to
connect those two shapes to indicate the process

01:02:57.930 --> 01:02:58.930
flow so I did that by using this little arrow
down here. Okay. At this point, I now realize

01:02:58.930 --> 01:02:59.930
that modeling all by myself is kind of boring
and if you don't really want to do that but,

01:02:59.930 --> 01:03:00.930
hey, this is a wave and it has actually never
been easier to invite all your friends to

01:03:00.930 --> 01:03:01.930
a crazy modeling session, and that's what
I'm going to do right now here. So I'll add

01:03:01.930 --> 01:03:02.930
my friend, Martin, he is in my contact list
right here. Martin is sitting here in the

01:03:02.930 --> 01:03:03.930
audience and we'll just have to wait a few
seconds until the wave has loaded on his screen;

01:03:03.930 --> 01:03:04.930
hope that doesn't take too long here given
the Internet connectivity here. Is it loading?

01:03:04.930 --> 01:03:05.930
Okay, we just have to wait a few more seconds,
hopefully. Well, I can just use a time to

01:03:05.930 --> 01:03:06.930
add another activity here to our diagram using
those shape menus as a shortcut. So, what

01:03:06.930 --> 01:03:07.930
would be the next thing, that would be me,
load the extension. Are you with me now? He's

01:03:07.930 --> 01:03:08.930
with me now. So Martin will now do some contributions
to this diagram and we should see his changes

01:03:08.930 --> 01:03:09.930
to a diagram instantly on my screen just like
you would expect in a wave-like environment.

01:03:09.930 --> 01:03:10.930
So, we hope, there they are. So he edited
another activity here, and you might also

01:03:10.930 --> 01:03:11.930
notice that the shapes created by him caused
a green shadow while my shapes caused a red

01:03:11.930 --> 01:03:12.930
shadow. So we actually use those different
colored shadows to indicate which person touched

01:03:12.930 --> 01:03:13.930
a shape last. So the green shapes obviously
were last touched by my friend Martin here

01:03:13.930 --> 01:03:14.930
while I touched the red shapes. And in case
if I got, which color belongs to whom, you

01:03:14.930 --> 01:03:15.930
can always refer to the editor tips down here
which has a complete list of all colors and

01:03:15.930 --> 01:03:16.930
all contributors to the diagram. In addition
to that, you can also have buffer shape and

01:03:16.930 --> 01:03:17.930
you can learn more about its last edit. So
this shape here for example was last touched

01:03:17.930 --> 01:03:18.930
by Martin [INDISTINCT] and he moved the shape
about 20 seconds ago. To give you even more

01:03:18.930 --> 01:03:19.930
information about the modeling process, we
also implemented a little change look down

01:03:19.930 --> 01:03:20.930
here which basically lists all changes to
the diagram in chronological order. So, this

01:03:20.930 --> 01:03:21.930
can, for example, come and [INDISTINCT] even
you haven't open away from quite some time

01:03:21.930 --> 01:03:22.930
and you want to do some catch-up on the recent
changes through the wave. You can just open

01:03:22.930 --> 01:03:23.930
here that change look and tweet it. As a little
bonus, we also implement a little under redo

01:03:23.930 --> 01:03:24.930
functionality into this change look. So, say
that I don't like the contributions Martin

01:03:24.930 --> 01:03:25.930
has done to the diagram, I can just click
here and they're all gone. But, since I will

01:03:25.930 --> 01:03:26.930
say goodbye to you eventually, I got to redo
that by clicking done here, and they there

01:03:26.930 --> 01:03:27.930
are again. So let's get all focused back onto
the diagram. You might notice that there are

01:03:27.930 --> 01:03:28.930
something missing in between. There's a step
missing between loading of the extension and

01:03:28.930 --> 01:03:29.930
saying goodbye. So we should better fix that.
I now delete this arrow and Martin is going

01:03:29.930 --> 01:03:30.930
to insert a split into the diagram. Now, a
split in business process modeling notation

01:03:30.930 --> 01:03:31.930
means that two things are happening in parallel.
And, obviously, here are those two things

01:03:31.930 --> 01:03:32.930
would be me talking to you while I present
the gadget on that screen here. So, let me

01:03:32.930 --> 01:03:33.930
just add another activity down here and then,
okay. Just, when I added the shape down here

01:03:33.930 --> 01:03:34.930
at about the same time Martin also edited,
created a shape up here. As you can see those

01:03:34.930 --> 01:03:35.930
two concurrent edits coming from two different
lines were merged into this beautiful consistent

01:03:35.930 --> 01:03:36.930
diagram just like you will expect in a wavey
environment here. Okay. Now to finish the

01:03:36.930 --> 01:03:37.930
diagram, we would have to add some more arrows
and we also would have to label those shapes,

01:03:37.930 --> 01:03:38.930
but since my professor of software, of business
process modeling is not present here today,

01:03:38.930 --> 01:03:39.930
I just skip that step as I'd like to say a
few more words about the user interface. Then

01:03:39.930 --> 01:03:40.930
we created the processWave.org Editor, we
realized that is actually kind of hard to

01:03:40.930 --> 01:03:41.930
create a goto UI for an application inside
of Google Wave, because when you picture the

01:03:41.930 --> 01:03:42.930
wave, we have that navigation bound in the
far left, then there's a huge inbox leafing

01:03:42.930 --> 01:03:43.930
you with only one-third of the space for our
gadget. So, you really have to come up for

01:03:43.930 --> 01:03:44.930
some Slim UI to make produce of that space
because when you think about it, there's not

01:03:44.930 --> 01:03:45.930
really that much space. Well, you can see
our solution here up on the screen. We have

01:03:45.930 --> 01:03:46.930
created that slim user interface which only
has a few interface control elements attached

01:03:46.930 --> 01:03:47.930
to the edges leaving you with as much space
as possible for the extra diagram. In addition

01:03:47.930 --> 01:03:48.930
to that, we also implemented a view-only mode
Pamela was talking about earlier. So, when

01:03:48.930 --> 01:03:49.930
I finished editing this blip by pressing the
done button down there, all the user interface

01:03:49.930 --> 01:03:50.930
control elements disappeared leaving you with
as much space as possible for the diagram

01:03:50.930 --> 01:03:51.930
and to think it goes without saying, I cannot
edit the diagram any longer when I'm in this

01:03:51.930 --> 01:03:52.930
mode. Well, that's pretty much all I have
to say to you here today. I hope you like

01:03:52.930 --> 01:03:53.930
our editor and if you do, I'd like to invite
you to turn your browser to our website, processWave.org,

01:03:53.930 --> 01:03:54.930
there you'll find an installer for our gadget
and we'd like to invite you to take it for

01:03:54.930 --> 01:03:55.930
a test run. We are also curious to know what
you think about our gadget. So, if you have

01:03:55.930 --> 01:03:56.930
the time you should stop by at our spot, in
the developer Sandbox and talk to us in person.

01:03:56.930 --> 01:03:57.930
So, thank you very much and we are looking
forward to seeing you there.

01:03:57.930 --> 01:03:58.930
&gt;&gt; FOX: I think that's really, really cool.
I'm really impressed. So, if you make your

01:03:58.930 --> 01:03:59.930
[INDISTINCT] as cool as that then you're doing
great. All right. So that's an example of,

01:03:59.930 --> 01:04:00.930
just a really, really nice wavey gadget. It
has a clear use-case you collaboratively modeling

01:04:00.930 --> 01:04:01.930
together and it uses all this nice characteristics
of wave. So now let's talk about Robots which

01:04:01.930 --> 01:04:02.930
is another, you know, one of our big APIs.
So, you know, the, let's look at, you know,

01:04:02.930 --> 01:04:03.930
what it is without Robots, right. So normally
when you're waving, you're waving with normal

01:04:03.930 --> 01:04:04.930
humans. All right. So in this example wave
here, I'm waving my friend Austin or ask him

01:04:04.930 --> 01:04:05.930
a bunch of questions, and I'm like, okay,
well, what is life, what is the meaning of

01:04:05.930 --> 01:04:06.930
life? So Austin responds really slowly. He
takes about 30 minutes to respond and he response

01:04:06.930 --> 01:04:07.930
really just poorly, all right. He thinks a
meaning of life is to drink beer whenever

01:04:07.930 --> 01:04:08.930
he knows this [INDISTINCT] to. So, the point
of humans is that, you know, they're great

01:04:08.930 --> 01:04:09.930
for, you know, conversations, and opinions
and all that but they're, you know, they're

01:04:09.930 --> 01:04:10.930
human so they're subject to faults and they're
also slow. So, Robots are basically programmatic

01:04:10.930 --> 01:04:11.930
participants that can be smart because it
let me accessing datastores and APIs and information

01:04:11.930 --> 01:04:12.930
systems, you know, outside the wave and they
can be fast because they can respond as fast

01:04:12.930 --> 01:04:13.930
as a server can respond, right. So the point
of Robots is just to be, these are basically,

01:04:13.930 --> 01:04:14.930
you know, automated participants that can
really streamline different aspects of communication

01:04:14.930 --> 01:04:15.930
and make it better. So in this example here,
I'm actually asking about the same question

01:04:15.930 --> 01:04:16.930
and he responds within the minute and he responds
with, you know, definitions that you pulled

01:04:16.930 --> 01:04:17.930
from a dictionary. So, when you're creating
a Robot, your Robot should have all the same

01:04:17.930 --> 01:04:18.930
characteristics of a human, just better, right?
So, we'll take a look at some of the characteristics

01:04:18.930 --> 01:04:19.930
of, you know, the ideal Robot participants.
So one of the things about wave is the fact

01:04:19.930 --> 01:04:20.930
that people can respond you in real-time and
people can typed in real-time. So when you're

01:04:20.930 --> 01:04:21.930
on a wave with another person at the same
time, you actually see them typing and people

01:04:21.930 --> 01:04:22.930
really love that moment when they first see
somebody else typing in a wave at the same

01:04:22.930 --> 01:04:23.930
time, it's their little wave aha moment. So
real-time responses, one of those great features

01:04:23.930 --> 01:04:24.930
of wave but just makes it feel more real and
also when it come to stuff like document writing,

01:04:24.930 --> 01:04:25.930
it helps you get stuff done faster, right,
because you don't have to wait for the other

01:04:25.930 --> 01:04:26.930
people to edit, you see them immediately.
So when you're creating a Robot, you should

01:04:26.930 --> 01:04:27.930
try and create Robots that respond as quickly
as possible, right? So, ideally, Robots respond

01:04:27.930 --> 01:04:28.930
as soon as they see something happens. So,
this example here, a emoticon Robot; I'm typing

01:04:28.930 --> 01:04:29.930
and I've typed, you know, a sentence and then
I type colon and then I type a parenthesis,

01:04:29.930 --> 01:04:30.930
and as soon as I typed that parenthesis, the
Robot detects that and turns that into a smiley

01:04:30.930 --> 01:04:31.930
face, right? So here, when a Robot is responding
in real-time and I don't have to wait to see

01:04:31.930 --> 01:04:32.930
what's going to happen, I see immediately.
So that's kind of, you know, ideal when you're

01:04:32.930 --> 01:04:33.930
doing a Robot like that and in a Robot API
you can register for the document change event

01:04:33.930 --> 01:04:34.930
which is the most high frequency event which
occur something like every four characters

01:04:34.930 --> 01:04:35.930
so you will get notified quite a lot of when
stuff is happening in the wave. But you can,

01:04:35.930 --> 01:04:36.930
now, with the new API you can set filters
to say, I care about document change event

01:04:36.930 --> 01:04:37.930
but only if that, if the current blip text
actually contains the information that I'm

01:04:37.930 --> 01:04:38.930
looking for, right. So here I set a filter
for smiley face because I only care about

01:04:38.930 --> 01:04:39.930
the event if there's a smiley face that I
can convert. And so depending on what your

01:04:39.930 --> 01:04:40.930
Robot is doing, you should think about whether
it is that you can actually respond as quickly

01:04:40.930 --> 01:04:41.930
as document change and if you can optimize
that by setting a filter. So another thing

01:04:41.930 --> 01:04:42.930
about wave is that you can be waving with
multiple participants at the same time, right.

01:04:42.930 --> 01:04:43.930
I've seen waves with up to 500 people on it,
right? Actually, I had a wave for one of these

01:04:43.930 --> 01:04:44.930
I/Os sessions, the Android, you know, the
Android Wave, there are something like 700

01:04:44.930 --> 01:04:45.930
participants on that wave and 400 blips, which
is pretty ridiculous. But, all these participants

01:04:45.930 --> 01:04:46.930
are on the way together and they're actually
managing to have conversations with each other

01:04:46.930 --> 01:04:47.930
and actually falling in etiquette, right?
They have these conversations in different

01:04:47.930 --> 01:04:48.930
places. So, they're collaborating together
on having conversation inside the wave. So

01:04:48.930 --> 01:04:49.930
you should be able to collaborate with Robots
just as easily you can collaborate with humans,

01:04:49.930 --> 01:04:50.930
all right. You shouldn't have to worry about
adding a Robot to your wave because you're

01:04:50.930 --> 01:04:51.930
worried about what it's going to do to you.
You should always expect that a Robot is going

01:04:51.930 --> 01:04:52.930
to have the same sense of etiquette that a
human would have. So there's never a fear

01:04:52.930 --> 01:04:53.930
of collaborating with Robot and with a multiple
Robots. So to explain this, I usually give

01:04:53.930 --> 01:04:54.930
an example of a non-collaborative Robot which
is incredibly; it's just a very bad experience

01:04:54.930 --> 01:04:55.930
for people. So this is actually the first
Robot that I wrote and it was called Cartoony,

01:04:55.930 --> 01:04:56.930
it's actually still alive if you want to use
it. And Cartoony would take every single blip

01:04:56.930 --> 01:04:57.930
and turn it into a word, a cute word bubble
that was colored using the Google Chart API.

01:04:57.930 --> 01:04:58.930
So I thought this was really cute because
suddenly all my waves were filled with this

01:04:58.930 --> 01:04:59.930
cute word bubbles and, you know, they just
look so happy. But everybody else hated it

01:04:59.930 --> 01:05:00.930
because as soon as you added Cartoony onto
a wave, Cartoony would go through and basically

01:05:00.930 --> 01:05:01.930
take away all your content and replace it
with all this silly images, right? So people

01:05:01.930 --> 01:05:02.930
could no longer go back and edit their text
because it was gone, it was just an image.

01:05:02.930 --> 01:05:03.930
Other Robots couldn't operate on the text
that was there because the text was gone.

01:05:03.930 --> 01:05:04.930
So, basically, destroyed all the content and
replace it with something that was not useful

01:05:04.930 --> 01:05:05.930
and wasn't what people wanted. So it's highly
non-collaborative Robot and my colleague ended

01:05:05.930 --> 01:05:06.930
up writing a Robot specifically designed to
kill Cartoony. So if your Robot is so bad

01:05:06.930 --> 01:05:07.930
that people create Robots to counter that
Robot, that's a good sign that your Robot

01:05:07.930 --> 01:05:08.930
is not collaborative. Or even if people ever
say about your Robot, no, no, no, don't add

01:05:08.930 --> 01:05:09.930
this Robot onto this wave, that means that
your Robot is potentially be non-collaborative,

01:05:09.930 --> 01:05:10.930
right? So, you need to have your Robot operate
in a way that people aren't afraid of adding

01:05:10.930 --> 01:05:11.930
it onto a wave. Here's an example of two highly
collaborative Robots. And these Robots were

01:05:11.930 --> 01:05:12.930
both developed independently but they have
the word beautifully and synergistically together

01:05:12.930 --> 01:05:13.930
in fact, and this example were, you know,
Robots together could really shine. So here

01:05:13.930 --> 01:05:14.930
we have syntax in Monty. So when you put Python
code in a blip, Syntax-C sees Python code

01:05:14.930 --> 01:05:15.930
and it applies annotations to that text to
make it look colored so that it's basically

01:05:15.930 --> 01:05:16.930
syntax highlighted, right? And then Monty
comes along and looks at the actual text inside

01:05:16.930 --> 01:05:17.930
that blip, and basically evaluates that Python
text and outputs the result, right? So you

01:05:17.930 --> 01:05:18.930
can basically have this syntax highlighted,
evaluated Python code inside your wave. And

01:05:18.930 --> 01:05:19.930
these Robots work beautifully because they
actually operate on different parts of the

01:05:19.930 --> 01:05:20.930
wave and they basically miss each other, so
they don't touch each other at all. Syntax-C

01:05:20.930 --> 01:05:21.930
sets annotations which, if you're not familiar
with the wave model, annotations are separate

01:05:21.930 --> 01:05:22.930
from the text. So can set annotations for
style and for storing custom data and that'll

01:05:22.930 --> 01:05:23.930
be restored separately from the text. Syntax-C
only operates on the text and completely ignores

01:05:23.930 --> 01:05:24.930
the annotations. And so, because they operate
on these two different parts, they actually

01:05:24.930 --> 01:05:25.930
work really well together. So the lesson here
is that, you should think about what it is

01:05:25.930 --> 01:05:26.930
that you're operating on and whether you could
be using something like annotations better

01:05:26.930 --> 01:05:27.930
in order to not actually affect the content
as much. But it's kind of hard just find what

01:05:27.930 --> 01:05:28.930
it is that makes a collaborative Robot, so
give a few more examples here of aspects of

01:05:28.930 --> 01:05:29.930
collaborative Robots. So one thing is that
Robots like humans, you should be able to

01:05:29.930 --> 01:05:30.930
use human language or natural language to
speak with them, right? When you're speaking

01:05:30.930 --> 01:05:31.930
with your colleagues, you don't use, well,
you might use command lines because we're

01:05:31.930 --> 01:05:32.930
developers. But, generally, you use natural
language to speak with your colleagues, right?

01:05:32.930 --> 01:05:33.930
When you're speaking with a Robot or interacting
with a Robot, you should be able to use the

01:05:33.930 --> 01:05:34.930
same thing. You should be able to use natural
language. But for some reason developers,

01:05:34.930 --> 01:05:35.930
I mean, I know why, like developers really
like to have Robots that respond to command

01:05:35.930 --> 01:05:36.930
line and stuff because number one, we're used
to it. We think the whole world is, you know,

01:05:36.930 --> 01:05:37.930
just this big vi shell. And number two, it's
a lot easier to parse, right? You simply look

01:05:37.930 --> 01:05:38.930
for that command and you execute it, all right.
So this Robot here, it looked for a slash

01:05:38.930 --> 01:05:39.930
map and then an address, it would take that
line and it would convert it into a map, so

01:05:39.930 --> 01:05:40.930
it worked but it's back for two reasons. One
reason is that it's not collaborative, right?

01:05:40.930 --> 01:05:41.930
Talking about the collaborated nature. If
you have two Robots that operate on addresses

01:05:41.930 --> 01:05:42.930
and one Robot says that the syntax is slash
map, and the other Robot says that the syntax

01:05:42.930 --> 01:05:43.930
is pound map, then the user can't use both
these Robots as ones because they expect different

01:05:43.930 --> 01:05:44.930
syntaxes or the user has to repeat their addresses
with a two different command lines, right?

01:05:44.930 --> 01:05:45.930
So it's not collaborative if a user has to
learn a different syntax for interacting with

01:05:45.930 --> 01:05:46.930
your robot because it means that that syntax
is probably incompatible with all the other

01:05:46.930 --> 01:05:47.930
robots out there. And it's also just not user-friendly
because you don't want to have to memorize

01:05:47.930 --> 01:05:48.930
the syntaxes for all these different robots.
So the better thing to do is to actually be

01:05:48.930 --> 01:05:49.930
able to respond to natural language. So, this
example here, this robot, Geobot, when you

01:05:49.930 --> 01:05:50.930
create a wave that has placed names in it.
It actually analyzes a wave by sending it

01:05:50.930 --> 01:05:51.930
to the Yahoo Placemaker API which then responds
back with places that is recognized and the

01:05:51.930 --> 01:05:52.930
ranges that they found those places in and
also the latitude, longitude for each place.

01:05:52.930 --> 01:05:53.930
And gets--it gets that back and then it annotates
each of the place names with a link to Google

01:05:53.930 --> 01:05:54.930
Maps for that location. So this is great because
it's simply operating on place names said

01:05:54.930 --> 01:05:55.930
the natural way, right? I didn't use any special
syntax here. And it's also sending an annotation

01:05:55.930 --> 01:05:56.930
on these, which means the other robots could
come along and the place name is still there,

01:05:56.930 --> 01:05:57.930
other robots could also operate on this place
names. So, it's not easy to necessarily respond

01:05:57.930 --> 01:05:58.930
to natural language, right? I mean there's
massive research in natural language processing

01:05:58.930 --> 01:05:59.930
and all that. But when you can do it, you
should really should. And there's APIs out

01:05:59.930 --> 01:06:00.930
there that would help you, right? There's
Yahoo Placemaker API. There's a couple of

01:06:00.930 --> 01:06:01.930
other semantic analysis APIs. There's a group
of developers at the developer Sandbox that

01:06:01.930 --> 01:06:02.930
have a robot, an Amazon robot that actually
analyzes your texts to find possible product

01:06:02.930 --> 01:06:03.930
names and then links those off to Amazon and
they use this name entity analysis technique.

01:06:03.930 --> 01:06:04.930
So, it's not easy but when you can, you should
try to actually respond to this natural language.

01:06:04.930 --> 01:06:05.930
All right. So another way that robot should
be collaborative is by being non-destructive

01:06:05.930 --> 01:06:06.930
and I kind of hit into this before is that,
you know, your users type stuff in the wave,

01:06:06.930 --> 01:06:07.930
you should do what you can to leave that content
there and just add to it. It's always better

01:06:07.930 --> 01:06:08.930
to add to content because users can always
take away stuff later, but if you take away

01:06:08.930 --> 01:06:09.930
content, then they want to get that stuff
back. They have to go back into restore or

01:06:09.930 --> 01:06:10.930
whatever. They have to go and find it somewhere.
So, when possible, try not to remove content,

01:06:10.930 --> 01:06:11.930
try to append content and then let the user
decide what to do afterwards. It's similar

01:06:11.930 --> 01:06:12.930
to when you're interacting with users like
with other humans, you know, when we're editing

01:06:12.930 --> 01:06:13.930
a draft together, if we're trying to figure
out the title of the blog post, we'll often

01:06:13.930 --> 01:06:14.930
just put a list of different blog post titles
and kind of decide from that list instead

01:06:14.930 --> 01:06:15.930
of actually, you know, replacing one title
one after another with our different ideas,

01:06:15.930 --> 01:06:16.930
right? Because if you're not a 100% certain
that a particular content is what you want,

01:06:16.930 --> 01:06:17.930
then you want to have all the possibilities
and be able to kind of look at that. So, here's

01:06:17.930 --> 01:06:18.930
an example of a robot that went from being
destructive to actually collaborative and

01:06:18.930 --> 01:06:19.930
appending. So this is Googley and Googley
is a URL shortening robot. So when Googley

01:06:19.930 --> 01:06:20.930
was first submitted to me in the extensions
gallery, what it would do is that it would

01:06:20.930 --> 01:06:21.930
look at wave, it would find every single link
in that wave and then it would replace every

01:06:21.930 --> 01:06:22.930
single link with a shortened URL, right? So,
that wave would become this one which has

01:06:22.930 --> 01:06:23.930
all this Google shortening URLs in it, right?
So, this is bad for a couple of reasons. One

01:06:23.930 --> 01:06:24.930
thing is that it's operative on every single
link and not giving me an option which links

01:06:24.930 --> 01:06:25.930
I want to operate on. Usually, I'd only want
to operate on a few and it's also gotten rid

01:06:25.930 --> 01:06:26.930
of my original link title that I had there,
so it's removed content that's going to be

01:06:26.930 --> 01:06:27.930
hard for me to get back. So, when we revised
Googley, the new interface is as follows.

01:06:27.930 --> 01:06:28.930
Basically, you have your wave with your links.
You select the link you're interested in,

01:06:28.930 --> 01:06:29.930
you click the Googley icon on the toolbar
and then the Googley robot sees what you've

01:06:29.930 --> 01:06:30.930
selected and it responds by appending a Google
URL after that, right? So, this is good because

01:06:30.930 --> 01:06:31.930
now I can decide which link I want to be operated
on and I can decide whether I want to retain

01:06:31.930 --> 01:06:32.930
my original link or combine it with a new
link or do whatever I want with the content,

01:06:32.930 --> 01:06:33.930
right? So, it's giving me the option of what
to operate on and it's appending the new information

01:06:33.930 --> 01:06:34.930
instead of removing, right? So, always try
to give an option and always try to append

01:06:34.930 --> 01:06:35.930
instead of remove. And if you do want to respond
to user selection which I recommend for actually

01:06:35.930 --> 01:06:36.930
quite a few robots these days; it's pretty
easy to do it with the extension installers.

01:06:36.930 --> 01:06:37.930
You just have--your menu hook for the toolbar
which says there's an icon on the toolbar,

01:06:37.930 --> 01:06:38.930
when that icon is clicked, you do annotate
selection which says that this current user

01:06:38.930 --> 01:06:39.930
selection will get annotated with a particular
key in value and then your vote gets out on

01:06:39.930 --> 01:06:40.930
to wave and your robot will get an event and
it can look through the event and the wave

01:06:40.930 --> 01:06:41.930
let's you see where that annotation was applied
and then it can operate on the annotated text.

01:06:41.930 --> 01:06:42.930
And there's some examples of that in the article
section if you want more information. But

01:06:42.930 --> 01:06:43.930
that user selection paradigm is actually a
pretty useful one. All right. So, that's robots

01:06:43.930 --> 01:06:44.930
generally and robots are a little bit harder
to describe what it is that makes them wavey,

01:06:44.930 --> 01:06:45.930
but, I mean, generally being collaborative,
trying not to be destructive, trying to be

01:06:45.930 --> 01:06:46.930
as helpful as possible, giving users the option,
these are the things to think about. Now,

01:06:46.930 --> 01:06:47.930
I just want to touch briefly on a particular
type of extension that could be a gadget,

01:06:47.930 --> 01:06:48.930
could be a robot, and could be a combination
of a gadget and a robot because there are

01:06:48.930 --> 01:06:49.930
some interesting characteristics of this,
and that type is games, right? There's a lot

01:06:49.930 --> 01:06:50.930
of people that are excited about wave as a
gaming platform because hey, it's really easy

01:06:50.930 --> 01:06:51.930
to add multiple people on to a game, right?
I always use to make this silly little games

01:06:51.930 --> 01:06:52.930
in, you know, college and high school and
I always wanted to make them multiplayer but

01:06:52.930 --> 01:06:53.930
I just couldn't be bothered to set up a multiplayer
infrastructure, right? So, wave kind of have

01:06:53.930 --> 01:06:54.930
this nice--like multiplayer stuff already
built in and then it also has the surrounding

01:06:54.930 --> 01:06:55.930
interface which could let you do other stuff
like combined conversation with games. So

01:06:55.930 --> 01:06:56.930
a couple of games here, Shoots and Ladders,
a great card thing. Japanese Chess and Dungeon

01:06:56.930 --> 01:06:57.930
and Dragons or, you know, Dice. So one thing
that you want to think about is the fact that--yeah,

01:06:57.930 --> 01:06:58.930
let's move this--the fact that in wave, you
can have multiple participants, right? You

01:06:58.930 --> 01:06:59.930
don't know how many participants are going
to be on a wave. Okay, it might be 2 and it

01:06:59.930 --> 01:07:00.930
might be 300. All right. Most likely on an
average wave, it's probably more like three

01:07:00.930 --> 01:07:01.930
or four or somewhere between, you know, two
and six. But I see a lot of people who create

01:07:01.930 --> 01:07:02.930
these wave games and they create them as two
player games, right? And two player games

01:07:02.930 --> 01:07:03.930
are just--it's not a good experience inside
wave because if you're on the wave with a

01:07:03.930 --> 01:07:04.930
two player game and you're the third person
on that wave, you're going to be really sad

01:07:04.930 --> 01:07:05.930
because you don't get to play this game, right,
because it's only be targeted towards being

01:07:05.930 --> 01:07:06.930
for two people. A better experience is if
the game can actually accommodate more than

01:07:06.930 --> 01:07:07.930
two people, right? Multiple people, maybe
infinite, maybe up to some reasonable amount,

01:07:07.930 --> 01:07:08.930
right? So, Sudoku is an example that, you
know, supports quite a few people on it. And

01:07:08.930 --> 01:07:09.930
another example that I like is Poker which
is a new extension that came out recently,

01:07:09.930 --> 01:07:10.930
which is a combination of a robot for the
dealer and a gadget for the visual and it

01:07:10.930 --> 01:07:11.930
supports between two and eight participants
which is pretty good size. So if I've got

01:07:11.930 --> 01:07:12.930
those two people I can play and I can go up
to eight. That's a nice experience because

01:07:12.930 --> 01:07:13.930
I, you know, I can actually have those three
people on it and still get to play. So, I

01:07:13.930 --> 01:07:14.930
know that there's a lot of two player games
out there so it's really tempting to put a

01:07:14.930 --> 01:07:15.930
two-player game over the wave and, you know,
call it a day. But, like, I encourage you

01:07:15.930 --> 01:07:16.930
to think about how you can actually turn those
two-player games into something back and actually

01:07:16.930 --> 01:07:17.930
work with more than two players. Because then
you can actually end up turning the game into

01:07:17.930 --> 01:07:18.930
something new entirely, right? So, maybe instead
of being two players, maybe up two teams of

01:07:18.930 --> 01:07:19.930
players, right, so that you divvy up the different
people on the wave into teams. Maybe, you

01:07:19.930 --> 01:07:20.930
know, I don't know, there's a lot of different
things that you could do but it can challenge

01:07:20.930 --> 01:07:21.930
you to actually rethink the game and maybe
come up with some new games that we haven't

01:07:21.930 --> 01:07:22.930
seen before. So, keep that in mind. Another
thing to keep in mind is kind of the opposite

01:07:22.930 --> 01:07:23.930
of that is the fact that on a wave, you can
just have one person. I have lots of waves

01:07:23.930 --> 01:07:24.930
that only I'm on, right? I'm taking notes.
I'm checking some tasks by myself, writing

01:07:24.930 --> 01:07:25.930
my epic diary entries, whatever it is, right?
So, you can have wave as only single people.

01:07:25.930 --> 01:07:26.930
So, ideally, your game could actually be played
by just one person in a wave who's bored and

01:07:26.930 --> 01:07:27.930
wants to play, right, because this is a bad
experience if you can. This example here Mafia

01:07:27.930 --> 01:07:28.930
which I think it would be a great thing to
do in wave, but when I insert it into a wave,

01:07:28.930 --> 01:07:29.930
it says, it needs 48 players. And when I see
this, I think, no, I can't find 48 friends.

01:07:29.930 --> 01:07:30.930
That's hard. I don't have that many friends
and I kind of get said because I don't get

01:07:30.930 --> 01:07:31.930
to play Mafia, right? A better experience
is something like this Row of Four robot,

01:07:31.930 --> 01:07:32.930
when I add a Row of Four on to a wave, it
checks to see if there's anybody else on the

01:07:32.930 --> 01:07:33.930
wave and if there is, it lets me play Row
of Four with them, also known as Connect Four.

01:07:33.930 --> 01:07:34.930
And if there isn't, it lets me play against
the robot, right? So, if I'm alone, I can

01:07:34.930 --> 01:07:35.930
always play against that robot. So that's
the thing to keep in mind with wave. You can

01:07:35.930 --> 01:07:36.930
always fake participants because you've got
robots, right? And, you know, it's a little

01:07:36.930 --> 01:07:37.930
bit harder because you have to write some
logic into the robots. This Row of Four robot

01:07:37.930 --> 01:07:38.930
was 23 lines of Python code and it beats me
every single time. My colleague Roter and

01:07:38.930 --> 01:07:39.930
he's really proud and he's going to get a
shirt that says, he beat me in 23 lines Python

01:07:39.930 --> 01:07:40.930
code. So, Row of Four, you know, maybe that's--it's
fairly easy to make that logic but for other

01:07:40.930 --> 01:07:41.930
games, you may be able to do it as well, so
consider using a robot for your ultimate players.

01:07:41.930 --> 01:07:42.930
Another thing is you can do is simply, you
know, inside--this is Colcrop. What they do

01:07:42.930 --> 01:07:43.930
is actually let you play against the computer
and their computer is just, you know, JavaScript

01:07:43.930 --> 01:07:44.930
simulated player inside the gadget which is,
you know, another example, not maybe quite

01:07:44.930 --> 01:07:45.930
a wavey but still an option. And the thing
I like about this one is that it actually

01:07:45.930 --> 01:07:46.930
lets you pick between computer level 1, 2,
3, and 4. So, this will be good for Row of

01:07:46.930 --> 01:07:47.930
Four where I clearly cannot compete against
the current level of that robot. And I can

01:07:47.930 --> 01:07:48.930
pick my lower level because that's the thing,
right? When you're playing games with friends,

01:07:48.930 --> 01:07:49.930
you pick through you're playing with depending
on whether you want to win that day or whether

01:07:49.930 --> 01:07:50.930
you actually want a challenge. So, ideally,
you can do the same thing with these robot

01:07:50.930 --> 01:07:51.930
or computer participants inside games. All
right. So those are kind of the, you know,

01:07:51.930 --> 01:07:52.930
the big picture of the stuff that you should
be thinking about when you're making your

01:07:52.930 --> 01:07:53.930
extension and you're really polishing it and
trying to make it ready for users. So, we

01:07:53.930 --> 01:07:54.930
talked about the installer and having the--and
installer be descriptive and be recognizable.

01:07:54.930 --> 01:07:55.930
We talked about the look and feel. Having
it look like your company site or looking

01:07:55.930 --> 01:07:56.930
like the actual wave look and feel. The ease
of use getting started, how easy it is in

01:07:56.930 --> 01:07:57.930
those first two minutes of using the gadget
and then the wave-y-ness which is all these

01:07:57.930 --> 01:07:58.930
different factors, you know, which are unique
to the wave environment. So now, first of

01:07:58.930 --> 01:07:59.930
our next steps and for you guys, you know,
basically homework. The first thing you do

01:07:59.930 --> 01:08:00.930
is I really encourage you to try other people's
extensions, right? The reason that I have

01:08:00.930 --> 01:08:01.930
all these opinions and, you know, experiences
with, you know, good, bad, before, after is

01:08:01.930 --> 01:08:02.930
because I've tried so many different extensions
and actually tried to use them in real life,

01:08:02.930 --> 01:08:03.930
you know, try to use them with friends that
aren't, you know, wave really wave users,

01:08:03.930 --> 01:08:04.930
aren't technical. So try out different extensions
and see what fields could you use, see what

01:08:04.930 --> 01:08:05.930
makes sense to use. See what you like, what
you don't like. And, you know, that'll help

01:08:05.930 --> 01:08:06.930
and form your decisions because you can think
like, "Well, I'm remembering this gadget.

01:08:06.930 --> 01:08:07.930
I didn't really like when that happened."
And so, you can go to the extension's gallery.

01:08:07.930 --> 01:08:08.930
If you click on all, I think there's about
55 or 60 in there that you can play through

01:08:08.930 --> 01:08:09.930
so that will take you a fair amount of time.
And then once you've actually tried the extensions

01:08:09.930 --> 01:08:10.930
and you've built your extension and you're
ready to share it with the world, then you

01:08:10.930 --> 01:08:11.930
can submit it to our extension gallery and
go through our extension review process. And--but

01:08:11.930 --> 01:08:12.930
hopefully, the fact that you guys are all
here today will mean that the extension review

01:08:12.930 --> 01:08:13.930
process will only take like five seconds and
then I can just immediately click through

01:08:13.930 --> 01:08:14.930
and we're good to go. But it's really fun
process because you get to actually talk about

01:08:14.930 --> 01:08:15.930
the design and, you know, have discussions
about what would be the, you know, the best

01:08:15.930 --> 01:08:16.930
interface for it. And also, as a next step,
you should go to the other Wave talks at Wave,

01:08:16.930 --> 01:08:17.930
all right, because if you're interested in
making extensions then these talks are going

01:08:17.930 --> 01:08:18.930
to help you a lot, right? So, we have--we've
already done the "Fireside chat" in this one

01:08:18.930 --> 01:08:19.930
today. About 3:00 pm, we have "Waving across
the web". We're just going to be talking about

01:08:19.930 --> 01:08:20.930
a couple of the new APIs that we launched
this morning. Wave this, wave date APIs, and

01:08:20.930 --> 01:08:21.930
also talking about the embed API which we've
made some recent improvements too. So let

01:08:21.930 --> 01:08:22.930
me check that out. 4:15, that's more about
the protocol then platform, but if you are

01:08:22.930 --> 01:08:23.930
interested in wave federation and having your
own wave server, you can go to that. I mean,

01:08:23.930 --> 01:08:24.930
the cool thing about wave federation is that
federated servers can actually support gadgets

01:08:24.930 --> 01:08:25.930
and hopefully, you know, robots in the future
too. So when you're building your extensions,

01:08:25.930 --> 01:08:26.930
you're not just building them for a Google
Wave, you're potentially building them for

01:08:26.930 --> 01:08:27.930
all the other wave servers out there. So there's
already a few wave servers that support--loading

01:08:27.930 --> 01:08:28.930
other people gadget's in there so that kind
of multiplies the possibilities for the number

01:08:28.930 --> 01:08:29.930
of users and the types of users that are going
to be using your extensions, right? Because

01:08:29.930 --> 01:08:30.930
our Google Wave maybe consumer-oriented now,
other people's wave servers maybe enterprise-oriented,

01:08:30.930 --> 01:08:31.930
so it's a different use case. Thursday, we
have "Making smart and scaleable wave robots".

01:08:31.930 --> 01:08:32.930
I highly encourage you to go into that one
because that's really going to--most sophisticated

01:08:32.930 --> 01:08:33.930
extensions do involve the robot and that's
going to really give you some tips about making

01:08:33.930 --> 01:08:34.930
a good robot and also taking advantage of
some of the new things we launched, including

01:08:34.930 --> 01:08:35.930
the ability to have robots not running on
AP engines. So, if you already have an existing

01:08:35.930 --> 01:08:36.930
server and infrastructure, you want to use
that to use your robots, you should go to

01:08:36.930 --> 01:08:37.930
that talk to learn how. And just go to learn
how to optimize your robot usage and make

01:08:37.930 --> 01:08:38.930
them awesome. "Google Wave and the Enterprise"
is going to talk about more of the business

01:08:38.930 --> 01:08:39.930
use cases of wave, and also step through an
example of an extension that we would actually

01:08:39.930 --> 01:08:40.930
use inside our enterprise for software development,
so for release management, so that should

01:08:40.930 --> 01:08:41.930
be a good one. And then 4:45, it says, "Surprise
session" but we announced it today so it's

01:08:41.930 --> 01:08:42.930
no longer a surprise, and that's going to
be talking about the attachment APIs. So,

01:08:42.930 --> 01:08:43.930
in Google Wave, you can attach things to your
wave like PDFs, images, et cetera. And for

01:08:43.930 --> 01:08:44.930
a long time, robots could not access them
but now as of today, they can. So you can

01:08:44.930 --> 01:08:45.930
do some pretty cool stuff being able to access
and create attachments because you can imagine

01:08:45.930 --> 01:08:46.930
like one person would drag a bunch of CSVs
into their wave and then add on the CSVbot

01:08:46.930 --> 01:08:47.930
and the CSVbot would come along and take all
that and then convert it into a map of the

01:08:47.930 --> 01:08:48.930
addresses, right? Or another example that
they're going to show is actually being able

01:08:48.930 --> 01:08:49.930
to convert a wave into a PowerPoint, right,
and then export it back into wave. So, really

01:08:49.930 --> 01:08:50.930
cool stuff that you can do with attachments
so definitely go to that as well. So, including,

01:08:50.930 --> 01:08:51.930
you should go to everything, you should learn
everything and you should build everything.

01:08:51.930 --> 01:08:52.930
Okay? And in conclusion, I have the cutest
little goodbye, cartoony. Thanks guys. So,

01:08:52.930 --> 01:08:53.930
we have two minutes and 10--or seven minutes
and 10 seconds for minutes--questions. I can't

01:08:53.930 --> 01:08:54.930
read that far away. All right. So, we'll go
to wave to see if we got any questions on

01:08:54.930 --> 01:08:55.930
wave.
&gt;&gt; Can I ask you a question?

01:08:55.930 --> 01:08:56.930
&gt;&gt; FOX: Yup.
&gt;&gt; It's open-question to you and to all, everybody

01:08:56.930 --> 01:08:57.930
here, the usability question. The gadget that
we build is based nearly entirely on keyboard

01:08:57.930 --> 01:08:58.930
shortcuts. And keyboard shortcuts will go
work when the iFrame is host, the gadget is

01:08:58.930 --> 01:08:59.930
focused. So now, you should just double-click
the gadget so it will be usable. Otherwise,

01:08:59.930 --> 01:09:00.930
you'll be heading enter, it will start new
blips instead of topic [INDISTINCT] or something.

01:09:00.930 --> 01:09:01.930
So, what is the best way to indicate it and
how to indicate user that it's not activated

01:09:01.930 --> 01:09:02.930
gadget or it shouldn't be [INDISTINCT] representation
or should be some guides--what is the best

01:09:02.930 --> 01:09:03.930
decision?
&gt;&gt; FOX: So, you're wondering about how do

01:09:03.930 --> 01:09:04.930
you indicate to the users using keyboard shortcuts.
&gt;&gt; Yeah. Or maybe keyboard shortcut is not

01:09:04.930 --> 01:09:05.930
a good practice at all.
&gt;&gt; FOX: I mean, I'm not personally a keyboard

01:09:05.930 --> 01:09:06.930
shortcut user and I always forget about them,
you know, CTRL C and CTRL V of course but

01:09:06.930 --> 01:09:07.930
then beyond that, CTRL E maybe. But, no, I
think keyboard shortcuts--they are a good

01:09:07.930 --> 01:09:08.930
thing but I think, you know, what we've started
doing in wave is actually writing the keyboard

01:09:08.930 --> 01:09:09.930
shortcuts on the elements so done, here's
SHIFT ENTER. So, you immediately know--when

01:09:09.930 --> 01:09:10.930
you look at this that the keyboard shortcut
for that is SHIFT ENTER and we did that in

01:09:10.930 --> 01:09:11.930
a couple of other places as well because we
actually analyze--so, one thing you can do

01:09:11.930 --> 01:09:12.930
is actually analytics to figure out how many
of them are using your keyboard shortcuts

01:09:12.930 --> 01:09:13.930
and which ones are they not using? And that
helps us figure out that we needed to messagize

01:09:13.930 --> 01:09:14.930
better. So, I think using keyboard shortcuts
is a good thing. The specifics is using it

01:09:14.930 --> 01:09:15.930
inside gadgets. I haven't run into too much,
but I think, messaging it and giving them

01:09:15.930 --> 01:09:16.930
a little hint is important.
&gt;&gt; Okay. Okay. Thank you.

01:09:16.930 --> 01:09:17.930
&gt;&gt; FOX: So, seven seconds left. We have had
space bar forever but it was one of those

01:09:17.930 --> 01:09:18.930
keyboard shortcuts that once again was not
discovered by people, so now, we added this

01:09:18.930 --> 01:09:19.930
little button at the bottom that says, next
on red which is basically doing the same thing

01:09:19.930 --> 01:09:20.930
as short--as a space bar and if you scroll
over it, it says, go to the next on red blip

01:09:20.930 --> 01:09:21.930
space bar. So, this is another one of our
attempts to try and make it clear to people

01:09:21.930 --> 01:09:22.930
that actually we've had all these really useful
keyboard shortcuts all along. So, by actually

01:09:22.930 --> 01:09:23.930
putting other UI elements in there, so I'm
not sure that we're actually going to have

01:09:23.930 --> 01:09:24.930
that button forever, we're probably like evolve
that interface a bit. But it's tricky with

01:09:24.930 --> 01:09:25.930
wave because it's an entirely new interface
and you do need different shortcuts for it

01:09:25.930 --> 01:09:26.930
so, getting people to use the shortcuts is,
you know, it takes some experimentation, so

01:09:26.930 --> 01:09:27.930
we're doing a lot of analytics and stats on
our various attempts here and to try and figure

01:09:27.930 --> 01:09:28.930
out if it's helping or what other stuff we
should be doing. Yeah.

01:09:28.930 --> 01:09:29.930
&gt;&gt; [INDISTINCT]
&gt;&gt; FOX: Right. No, I know. So, I was using

01:09:29.930 --> 01:09:30.930
a Chrome extension for unread bullet navigation
which is really cool. It actually will show

01:09:30.930 --> 01:09:31.930
you an arrow that points down to say how many
unread blips are there and arrow that points

01:09:31.930 --> 01:09:32.930
up that says how many unread blips are there.
That's ultimate. That's what we want to have

01:09:32.930 --> 01:09:33.930
in the client, right? And maybe integrate
it into the scroll bar and I don't know what

01:09:33.930 --> 01:09:34.930
I would do without that. So, possibly not
due to the paging we did for scaling large

01:09:34.930 --> 01:09:35.930
waves. I think that unfortunately we are done.
That's I've been waiting. But feel free to

01:09:35.930 --> 01:09:35.938
come up afterwards, all right. Thank you everyone.

