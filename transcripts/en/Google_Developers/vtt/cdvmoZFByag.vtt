WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.820
[THEME MUSIC]

00:00:07.520 --> 00:00:09.670
SYLVANO LUCIANI: Welcome
to Personalize Actions

00:00:09.670 --> 00:00:11.590
for the Google Assistant.

00:00:11.590 --> 00:00:13.090
Thanks for being here.

00:00:13.090 --> 00:00:14.380
I'm Sylvano Luciani.

00:00:14.380 --> 00:00:16.300
I work in the
Assistant and Actions

00:00:16.300 --> 00:00:18.736
on Google Developer
Relations team.

00:00:18.736 --> 00:00:19.610
ADAM DAWES: Hi there.

00:00:19.610 --> 00:00:22.060
My name's Adam Dawes, and
I'm a product manager.

00:00:22.060 --> 00:00:25.970
And we build Identity
tools for developers.

00:00:25.970 --> 00:00:27.880
SYLVANO LUCIANI: So in
the next half an hour

00:00:27.880 --> 00:00:31.750
or so we're going to present
you some of the functionality

00:00:31.750 --> 00:00:33.760
that the Actions
on Google Platform

00:00:33.760 --> 00:00:37.540
provides to you to
personalize your actions.

00:00:37.540 --> 00:00:39.580
But first, I'd like
to briefly talk

00:00:39.580 --> 00:00:44.240
about why is it important
to personalize your action,

00:00:44.240 --> 00:00:47.590
and let's start by looking
at the Google Assistant.

00:00:47.590 --> 00:00:49.920
The Assistant is an
assistive technology

00:00:49.920 --> 00:00:53.970
that is at the center of an
ecosystem of more than 500--

00:00:53.970 --> 00:00:57.070
sorry, millions
devices, and it's

00:00:57.070 --> 00:01:00.280
there to help users
to get things done,

00:01:00.280 --> 00:01:03.970
things like get entertained,
listening to some music,

00:01:03.970 --> 00:01:08.740
or playing some games, get
informed by reading or watching

00:01:08.740 --> 00:01:12.570
some news, learn new
recipes, and so on.

00:01:12.570 --> 00:01:15.190
Actions on Google
is the platform

00:01:15.190 --> 00:01:17.860
that allows you to
extend the Assistant.

00:01:17.860 --> 00:01:21.820
You can add your own actions
so that you can provide help

00:01:21.820 --> 00:01:25.450
for a knowledge domain where
you think you are an expert,

00:01:25.450 --> 00:01:27.830
and you can provide
value to the user.

00:01:27.830 --> 00:01:30.790
You can connect with new
users across all the devices

00:01:30.790 --> 00:01:34.200
that we've seen,
and you can innovate

00:01:34.200 --> 00:01:36.440
by adding conversational
interface that

00:01:36.440 --> 00:01:39.390
can make some of
the tasks very easy,

00:01:39.390 --> 00:01:42.670
just a straight voice command.

00:01:42.670 --> 00:01:44.620
So thinking about
this, there are

00:01:44.620 --> 00:01:48.580
two aspects where it's important
to personalize your action.

00:01:48.580 --> 00:01:51.640
The aspect, number one,
is for some of the things

00:01:51.640 --> 00:01:55.570
that you might want to do, like
for example present some music

00:01:55.570 --> 00:01:59.470
that a user can listen to to be
entertained, if you know more

00:01:59.470 --> 00:02:02.080
about their preferences
and their tastes,

00:02:02.080 --> 00:02:04.900
you can provide them with
music that will be more in line

00:02:04.900 --> 00:02:07.270
with that expectation
and that will fulfill

00:02:07.270 --> 00:02:09.910
their intent in a better way.

00:02:09.910 --> 00:02:12.310
The other aspect to
consider is we've

00:02:12.310 --> 00:02:14.740
seen that your actions
can be involved

00:02:14.740 --> 00:02:17.020
across different
devices, and so you

00:02:17.020 --> 00:02:20.080
want to be able, if
the user has expressed

00:02:20.080 --> 00:02:24.440
some preferences on, for
example, a smart speaker,

00:02:24.440 --> 00:02:27.220
honor those preferences
also when they start

00:02:27.220 --> 00:02:30.250
another conversation with your
action on a different device,

00:02:30.250 --> 00:02:33.760
like a phone or a smart
display, where you will also

00:02:33.760 --> 00:02:37.030
be able to provide a better
experience because now you

00:02:37.030 --> 00:02:42.560
can also show visuals to provide
a better output to the user.

00:02:42.560 --> 00:02:47.110
So we are going to look
at three main buckets

00:02:47.110 --> 00:02:50.260
that I've already
almost mentioned.

00:02:50.260 --> 00:02:54.130
The first one is what is
the platform providing to us

00:02:54.130 --> 00:02:57.670
so that we can learn something
more about the Assistant user?

00:02:57.670 --> 00:03:00.640
Then we'll see how we can
store this information

00:03:00.640 --> 00:03:04.090
in the current conversation that
we are having with the user,

00:03:04.090 --> 00:03:06.460
or in all the conversation
that we might have

00:03:06.460 --> 00:03:10.030
with the user, which means
future conversation and also

00:03:10.030 --> 00:03:12.560
conversation on
different devices.

00:03:12.560 --> 00:03:17.200
Finally, Adam will talk about
adding Identity to your action.

00:03:17.200 --> 00:03:19.180
That can be a
requirement in cases

00:03:19.180 --> 00:03:21.850
where, for example,
the user wants

00:03:21.850 --> 00:03:27.230
to know where the next payment
for a certain service is due.

00:03:27.230 --> 00:03:29.170
If you are the
service provider, you

00:03:29.170 --> 00:03:31.450
need to know who they
are on your system.

00:03:31.450 --> 00:03:33.700
You need to authenticate
them so that you can actually

00:03:33.700 --> 00:03:38.460
retrieve the correct
information for their account.

00:03:38.460 --> 00:03:42.470
So starting from learning
more about the Assistant user,

00:03:42.470 --> 00:03:46.140
I'm going to introduce
Helper Intents.

00:03:46.140 --> 00:03:48.470
Helper Intents
are a core concept

00:03:48.470 --> 00:03:50.720
of the Assistant platform.

00:03:50.720 --> 00:03:54.240
You can request to the
Assistant to momentarily take

00:03:54.240 --> 00:03:56.150
over the conversation
so that you

00:03:56.150 --> 00:03:59.570
can perform some special
tasks on your behalf.

00:03:59.570 --> 00:04:01.700
Some of these special
tasks are things

00:04:01.700 --> 00:04:04.940
like you can ask to
transfer the conversation

00:04:04.940 --> 00:04:07.730
to a different surface with
different capabilities.

00:04:07.730 --> 00:04:09.950
If, for example, you
started a conversation

00:04:09.950 --> 00:04:13.950
on a smart speaker, you want
to show a visual to the user,

00:04:13.950 --> 00:04:15.410
you can ask the
conversation to be

00:04:15.410 --> 00:04:18.620
transferred to a phone
or another device that

00:04:18.620 --> 00:04:20.329
can show the visual.

00:04:20.329 --> 00:04:23.060
Or you can even [INAUDIBLE]
into an Android app.

00:04:23.060 --> 00:04:26.180
If, for example, the user
[INAUDIBLE] request the task

00:04:26.180 --> 00:04:30.010
that you think it's not very--

00:04:30.010 --> 00:04:31.730
doesn't provide a
good user experience

00:04:31.730 --> 00:04:33.920
with a voice interface,
and you'd rather

00:04:33.920 --> 00:04:36.440
pan to your existing
Android app.

00:04:36.440 --> 00:04:40.160
In this talk, we are going to
look at a subset of the Helpers

00:04:40.160 --> 00:04:44.730
that allow you to ask to obtain
some information from the user.

00:04:44.730 --> 00:04:47.490
This information can be
of two different types.

00:04:47.490 --> 00:04:52.850
One is you can ask, to the user,
their consent for the Assistant

00:04:52.850 --> 00:04:56.690
to share some information with
your action, like the user

00:04:56.690 --> 00:04:59.450
name or the device
location-- the location

00:04:59.450 --> 00:05:02.710
of the device where that
conversation is happening.

00:05:02.710 --> 00:05:04.950
Date and time and
place and location

00:05:04.950 --> 00:05:08.570
are rather a way of asking
an input to the user.

00:05:08.570 --> 00:05:10.020
I need a date for you.

00:05:10.020 --> 00:05:14.420
If, for example, your actions
allow users to book services,

00:05:14.420 --> 00:05:17.510
and you want to know when
they want the service,

00:05:17.510 --> 00:05:20.990
or a place or location if
you are arranging a delivery,

00:05:20.990 --> 00:05:24.350
and you want to know
where to deliver the goods

00:05:24.350 --> 00:05:26.147
that are part of
the transaction.

00:05:31.880 --> 00:05:36.130
So starting from the first one,
how can we get the username?

00:05:36.130 --> 00:05:38.200
In this slide, what
you see on your left

00:05:38.200 --> 00:05:40.600
is a simulation
of a conversation

00:05:40.600 --> 00:05:44.380
that I did on a test app that
I wrote, and on the right,

00:05:44.380 --> 00:05:47.440
you can see some of the
code from our Node.JS client

00:05:47.440 --> 00:05:48.550
library.

00:05:48.550 --> 00:05:50.750
It's not the complete
code for the action.

00:05:50.750 --> 00:05:52.990
It's just the bits that
are relevant to the helpers

00:05:52.990 --> 00:05:55.970
that I'm showing, and
you can see how it works.

00:05:55.970 --> 00:06:00.640
So the first, you ask the
permission, the permission

00:06:00.640 --> 00:06:04.660
to get the name of the user,
and you provide the context

00:06:04.660 --> 00:06:06.910
that it's very important
because with the context,

00:06:06.910 --> 00:06:10.240
you are explaining to the
user why you need the name.

00:06:10.240 --> 00:06:13.060
How is your service
going to be better

00:06:13.060 --> 00:06:14.990
if you obtain that information?

00:06:14.990 --> 00:06:16.960
So in this case, I'm
just telling them, hey,

00:06:16.960 --> 00:06:19.710
I want to address
you by your name.

00:06:19.710 --> 00:06:22.840
In the Assistant, they
covered the conversation.

00:06:22.840 --> 00:06:26.080
Ask the user, can I share this
information with the action?

00:06:26.080 --> 00:06:28.650
If there is a positive
reply, then you've

00:06:28.650 --> 00:06:30.370
got access to the
name, and you can

00:06:30.370 --> 00:06:33.760
use it straight to greet
the user by their name.

00:06:33.760 --> 00:06:36.260
If not, you need
to deal with it.

00:06:36.260 --> 00:06:38.500
Acknowledge that they
didn't want to share

00:06:38.500 --> 00:06:39.970
the information with you.

00:06:39.970 --> 00:06:44.480
Try to provide the best
service that you can.

00:06:44.480 --> 00:06:48.800
This next slide is showing
to you the role JSON API.

00:06:48.800 --> 00:06:50.780
So if you're not using
the client library,

00:06:50.780 --> 00:06:54.620
and instead, you're using
the conversation web book,

00:06:54.620 --> 00:06:56.970
this is how you
request the permission.

00:06:56.970 --> 00:06:59.300
So you can see the
intent name is Action,

00:06:59.300 --> 00:07:01.760
that intent of
permission, and then

00:07:01.760 --> 00:07:04.460
there's a bag of
parameters that can go.

00:07:04.460 --> 00:07:06.740
They are different with--

00:07:06.740 --> 00:07:09.350
for every helper
intent, and they

00:07:09.350 --> 00:07:12.320
are defined in a value
spec that is just saying,

00:07:12.320 --> 00:07:14.870
this request might contain
this type of field.

00:07:14.870 --> 00:07:17.330
And you can see the context
where I'm explaining

00:07:17.330 --> 00:07:20.420
why I want that information,

00:07:20.420 --> 00:07:23.840
This is showing you, in the
following request that you

00:07:23.840 --> 00:07:26.840
receive from the Assistant--
if the user consented

00:07:26.840 --> 00:07:29.730
to give you access
to the information,

00:07:29.730 --> 00:07:32.530
this is how you receive it.

00:07:32.530 --> 00:07:37.060
Location is very similar because
it's exactly the same intent.

00:07:37.060 --> 00:07:40.450
It's an intent that is called
permission, and one again--

00:07:40.450 --> 00:07:43.200
once again, the Assistant
is asking the user,

00:07:43.200 --> 00:07:47.110
can I share the location of
your device with the action?

00:07:47.110 --> 00:07:51.470
If the user replies yes, you
get access to the location,

00:07:51.470 --> 00:07:55.360
and now in this case, you
could resolve the latitude

00:07:55.360 --> 00:07:57.530
then the longitude to
the place where they are,

00:07:57.530 --> 00:08:02.080
and then find something that
it's near that location.

00:08:02.080 --> 00:08:04.600
JSON is pretty similar.

00:08:04.600 --> 00:08:06.820
If you see, there's
only a different value

00:08:06.820 --> 00:08:09.430
for the type of permission
that we're asking.

00:08:09.430 --> 00:08:11.230
And one thing that
you can notice now

00:08:11.230 --> 00:08:13.360
is Permissions is
an array, which

00:08:13.360 --> 00:08:17.080
means if you want to ask for
both the name and the location

00:08:17.080 --> 00:08:19.150
at the same time, you can do it.

00:08:19.150 --> 00:08:22.480
You can just ask for multiple
permissions in that array.

00:08:25.910 --> 00:08:30.560
This is how you get the location
if the user consent to give it

00:08:30.560 --> 00:08:32.940
to you.

00:08:32.940 --> 00:08:36.000
Now, Date/Time is slightly
different, as I mentioned,

00:08:36.000 --> 00:08:38.190
because in this case,
we are not anymore

00:08:38.190 --> 00:08:43.289
asking the user if the Assistant
can share some information

00:08:43.289 --> 00:08:44.400
without action.

00:08:44.400 --> 00:08:48.630
We are directly asking the
user, can you give me a date--

00:08:48.630 --> 00:08:50.100
a date value?

00:08:50.100 --> 00:08:53.430
And the most powerful
thing, when you do this

00:08:53.430 --> 00:08:57.750
through the Assistant,
is we can resolve

00:08:57.750 --> 00:09:02.320
ways of specifying a date there
are not just a date format.

00:09:02.320 --> 00:09:04.680
So if you look at
the example, when

00:09:04.680 --> 00:09:06.540
would you like to
reserve the table?

00:09:06.540 --> 00:09:08.130
I reply tomorrow.

00:09:08.130 --> 00:09:12.000
The Assistant resolves tomorrow
to what tomorrow is at the time

00:09:12.000 --> 00:09:14.590
that we are having
the conversation.

00:09:14.590 --> 00:09:17.680
Another thing that you might
notice is, in this case,

00:09:17.680 --> 00:09:19.030
we have three prompts.

00:09:19.030 --> 00:09:20.230
There's an initial prompt.

00:09:20.230 --> 00:09:25.810
There is the reason why we
want to ask that information.

00:09:25.810 --> 00:09:29.790
But there's also a date
and time additional prompt

00:09:29.790 --> 00:09:32.070
that the Assistant
uses if it gets

00:09:32.070 --> 00:09:35.080
only parts of the information
that you need from the user.

00:09:35.080 --> 00:09:38.460
So if I only specify a
date, like in the case

00:09:38.460 --> 00:09:41.040
of the example, where
I just said tomorrow,

00:09:41.040 --> 00:09:43.080
the Assistant will
ask, what time,

00:09:43.080 --> 00:09:45.250
using the prompt
that you specify.

00:09:45.250 --> 00:09:48.780
And once you have that
information, you can access it.

00:09:48.780 --> 00:09:52.390
In the case of the
Node.JS client library,

00:09:52.390 --> 00:09:56.950
represent it as an
out of date object.

00:09:56.950 --> 00:09:59.490
Again, not very different.

00:09:59.490 --> 00:10:02.600
This is the JSON,
so what is changing

00:10:02.600 --> 00:10:05.630
is just the bag of parameters
that you are passing

00:10:05.630 --> 00:10:07.910
when you ask for this helper.

00:10:07.910 --> 00:10:11.960
And the value that you get in
this case from the Assistant--

00:10:11.960 --> 00:10:15.500
it's a little longer because you
have the date part and the time

00:10:15.500 --> 00:10:17.500
part.

00:10:17.500 --> 00:10:19.980
The last helper that I
want to present to you

00:10:19.980 --> 00:10:22.380
is the place and
location helper.

00:10:22.380 --> 00:10:24.990
Again, this is not
any more asking

00:10:24.990 --> 00:10:28.290
the user can they share
your current location

00:10:28.290 --> 00:10:29.760
with the action.

00:10:29.760 --> 00:10:34.410
It's asking the user, give me
a place, give me a location.

00:10:34.410 --> 00:10:37.200
Again, you can see that
if you use this helper,

00:10:37.200 --> 00:10:41.340
we can resolve things like
the public name of a place.

00:10:41.340 --> 00:10:45.780
So for example, when the
action asks, where would

00:10:45.780 --> 00:10:49.500
you like to pick it up, and I
reply Shoreline Amphitheatre,

00:10:49.500 --> 00:10:52.220
what you actually get
is the whole address--

00:10:52.220 --> 00:10:55.530
Shoreline Amphitheatre,
Amphitheatre Parkway, and so

00:10:55.530 --> 00:10:57.950
on.

00:10:57.950 --> 00:10:59.760
Not a lot of difference, again.

00:10:59.760 --> 00:11:01.370
You already know this API.

00:11:01.370 --> 00:11:04.820
It's all-- it's a very
familiar API by now.

00:11:04.820 --> 00:11:06.290
The only things
that are changing

00:11:06.290 --> 00:11:08.060
are the type of
parameters that you

00:11:08.060 --> 00:11:11.341
can send along with the helper
and the name of the helper

00:11:11.341 --> 00:11:11.840
itself.

00:11:15.260 --> 00:11:17.780
And the request, in
this case, you've

00:11:17.780 --> 00:11:19.830
got a little bit more
info because you also

00:11:19.830 --> 00:11:23.200
got the formatted address,
the public name, and some more

00:11:23.200 --> 00:11:23.700
stuff.

00:11:26.414 --> 00:11:27.330
Why is it not working?

00:11:29.920 --> 00:11:32.460
In this example,
where you have--

00:11:32.460 --> 00:11:33.970
I have site to site--

00:11:33.970 --> 00:11:36.320
two different situations.

00:11:36.320 --> 00:11:37.750
The first one is the place.

00:11:37.750 --> 00:11:40.520
We've seen how we can
resolve a public place.

00:11:40.520 --> 00:11:42.340
You asked for
Shoreline Amphitheatre.

00:11:42.340 --> 00:11:44.440
You just get the address.

00:11:44.440 --> 00:11:47.000
But the sample on the right is
showing something different.

00:11:47.000 --> 00:11:48.100
It's showing a location.

00:11:48.100 --> 00:11:51.680
A location is something
that a user defines in maps,

00:11:51.680 --> 00:11:53.020
and it's private to them--

00:11:53.020 --> 00:11:55.970
for example, my home
or my workplace.

00:11:55.970 --> 00:12:00.040
And so in the example on
the right, when I ask Work,

00:12:00.040 --> 00:12:03.220
the Assistant requests
again another type

00:12:03.220 --> 00:12:08.005
of consent, which is can I
share with the action what Work

00:12:08.005 --> 00:12:09.190
is for you?

00:12:09.190 --> 00:12:12.280
And only if the user
says yes, then you

00:12:12.280 --> 00:12:14.005
can get that resolved address.

00:12:17.590 --> 00:12:21.010
If you want to see more about
helpers, we have a sample--

00:12:21.010 --> 00:12:23.590
github.com/actions on
google/dialogflow helper

00:12:23.590 --> 00:12:26.890
intents nodejs.

00:12:26.890 --> 00:12:29.200
It shows usage of
all the helpers

00:12:29.200 --> 00:12:30.700
that are available
on the platform.

00:12:33.650 --> 00:12:36.080
There's a couple of
other information

00:12:36.080 --> 00:12:38.720
that can be useful that we
can find in every request

00:12:38.720 --> 00:12:45.020
without the need of requesting
any specific helper.

00:12:45.020 --> 00:12:48.230
The first one is just there,
and it's called the lastSeen,

00:12:48.230 --> 00:12:50.870
and it's just the timestamp
of the last interaction

00:12:50.870 --> 00:12:51.990
with the user.

00:12:51.990 --> 00:12:54.585
The first time they use it as
an interaction with your action,

00:12:54.585 --> 00:12:56.300
it will be undefined.

00:12:56.300 --> 00:12:58.850
After that, you will
always have the timestamp

00:12:58.850 --> 00:13:00.510
of the last interaction.

00:13:00.510 --> 00:13:04.640
This means that you can use
it, for example, to greet them

00:13:04.640 --> 00:13:05.480
differently.

00:13:05.480 --> 00:13:07.880
You can just say
Welcome the first time,

00:13:07.880 --> 00:13:10.460
and then if the time
stamp has a value,

00:13:10.460 --> 00:13:13.850
you can say Welcome Back because
you know that they visited

00:13:13.850 --> 00:13:15.650
your action at least once.

00:13:15.650 --> 00:13:17.690
And you can even do
more complex stuff,

00:13:17.690 --> 00:13:20.990
like you could calculate
how much time has passed

00:13:20.990 --> 00:13:23.150
since the last time
they visited you,

00:13:23.150 --> 00:13:25.040
and depending on
whether you consider

00:13:25.040 --> 00:13:28.400
that range to be a
short or a long time,

00:13:28.400 --> 00:13:33.029
you can greet them and reengage
with them in a different way.

00:13:33.029 --> 00:13:35.320
The other one that it's
interesting for all of you that

00:13:35.320 --> 00:13:40.710
have Android apps that allow
users to purchase or subscribe

00:13:40.710 --> 00:13:43.950
to entitlements is you
can connect your action

00:13:43.950 --> 00:13:44.970
to your Android app.

00:13:44.970 --> 00:13:48.030
It's just configuration in
the console and verification

00:13:48.030 --> 00:13:50.970
that you actually
own the Android app,

00:13:50.970 --> 00:13:54.720
and then all the entitlements
that that user has bought

00:13:54.720 --> 00:13:59.010
on your Android App on Play will
be available in every request.

00:13:59.010 --> 00:14:02.310
And this is an example
of how you will see it.

00:14:02.310 --> 00:14:03.870
In this case, I'm
just giving you

00:14:03.870 --> 00:14:06.630
a JSON example because
in the client library,

00:14:06.630 --> 00:14:10.380
we basically just build
a JavaScript object that

00:14:10.380 --> 00:14:14.290
contains all this information.

00:14:14.290 --> 00:14:18.390
So this was it for some ways of
learning more about the user.

00:14:18.390 --> 00:14:21.210
What about storing information
in the conversation?

00:14:21.210 --> 00:14:23.730
We've said that it's
important that we can do that

00:14:23.730 --> 00:14:27.360
so that we can give a more
personalized experience

00:14:27.360 --> 00:14:30.270
inside a conversation,
but also across all

00:14:30.270 --> 00:14:32.310
the different conversation
that the user can

00:14:32.310 --> 00:14:34.650
have with your action.

00:14:34.650 --> 00:14:37.350
The first concept that I'd
like to introduce to you

00:14:37.350 --> 00:14:38.940
is the conversation token.

00:14:38.940 --> 00:14:41.100
The conversation
token-- it's available

00:14:41.100 --> 00:14:44.820
only if you're using
an action, SDK action,

00:14:44.820 --> 00:14:48.810
and it's a field of the
response and the request defined

00:14:48.810 --> 00:14:51.570
in the conversation
[INAUDIBLE] API.

00:14:51.570 --> 00:14:54.740
It's just a screen
that we recirulate.

00:14:54.740 --> 00:14:56.610
If you've write to
it, we will send back

00:14:56.610 --> 00:14:58.590
what you've written
in the next request.

00:14:58.590 --> 00:15:01.140
If you change it,
we will do it again.

00:15:01.140 --> 00:15:03.930
The main catch is its value.

00:15:03.930 --> 00:15:06.330
It's always initialized
to an empty string

00:15:06.330 --> 00:15:08.380
at the beginning of
the conversation,

00:15:08.380 --> 00:15:12.200
so the lifespan is only
the current conversation,

00:15:12.200 --> 00:15:14.250
and it-- all the
values that you've

00:15:14.250 --> 00:15:18.090
stored in there will be cleared
when the conversation ends.

00:15:18.090 --> 00:15:20.520
So you can use it
for some improvements

00:15:20.520 --> 00:15:22.740
where those
improvements make sense

00:15:22.740 --> 00:15:26.070
only in the life cycle of
the current conversation

00:15:26.070 --> 00:15:27.520
that you're having.

00:15:27.520 --> 00:15:33.120
One example of how to write
the value, in the first case,

00:15:33.120 --> 00:15:35.280
I'm just writing
a simple string.

00:15:35.280 --> 00:15:37.380
In the second case,
what I'm doing is,

00:15:37.380 --> 00:15:41.400
because I want to use a
more structured approach,

00:15:41.400 --> 00:15:43.980
I'm serializing a JSON
object to a string

00:15:43.980 --> 00:15:46.200
so that I can get a
representation that

00:15:46.200 --> 00:15:49.610
contains an object.

00:15:49.610 --> 00:15:52.760
An exam-- sorry,
on Dialogflow, you

00:15:52.760 --> 00:15:55.070
don't have access to
the conversation token,

00:15:55.070 --> 00:15:56.960
but you have the
same functionality

00:15:56.960 --> 00:15:59.720
expressed with a more
powerful abstraction called

00:15:59.720 --> 00:16:01.310
output context.

00:16:01.310 --> 00:16:03.680
And the reason why I say
that it's more powerful

00:16:03.680 --> 00:16:06.650
is you can have more
than one output context.

00:16:06.650 --> 00:16:09.900
Each one has a name, and you
can identify them by name.

00:16:09.900 --> 00:16:14.210
You can set the lifespan
in terms of conversation

00:16:14.210 --> 00:16:16.580
for which that data
will be available,

00:16:16.580 --> 00:16:19.670
and it already provides an
interface that gives you

00:16:19.670 --> 00:16:22.070
access to a structured value.

00:16:22.070 --> 00:16:24.680
So to see an example
of an output context,

00:16:24.680 --> 00:16:27.110
you can see that output
context add an array.

00:16:27.110 --> 00:16:29.690
In this case, I have only
one, but I could have more.

00:16:29.690 --> 00:16:32.690
It's identified by
a very long name.

00:16:32.690 --> 00:16:35.630
The lifespan count is
five turns in this case,

00:16:35.630 --> 00:16:39.770
and then I'm writing an object
for what are the value that I

00:16:39.770 --> 00:16:42.620
want to store in this context.

00:16:42.620 --> 00:16:45.190
If you use the client
library or Node.JS,

00:16:45.190 --> 00:16:48.190
we gave you the best of both
worlds because what we do

00:16:48.190 --> 00:16:50.070
is we provide you
an abstraction.

00:16:50.070 --> 00:16:51.760
Data is just an object.

00:16:51.760 --> 00:16:54.370
You write whatever you
want with the object,

00:16:54.370 --> 00:16:57.590
and then depending on whether
your action is an action

00:16:57.590 --> 00:17:00.280
SDK or a Dialogflow,
we do the right thing

00:17:00.280 --> 00:17:03.400
at the low level using the
conversation token in one case,

00:17:03.400 --> 00:17:06.760
or the output
context in the other.

00:17:06.760 --> 00:17:09.020
To see an example of
how you could use it,

00:17:09.020 --> 00:17:11.770
let's say you have some
music that you want to play.

00:17:11.770 --> 00:17:14.680
The user asks, I want
to listen to some music.

00:17:14.680 --> 00:17:17.210
You can ask them, do
you want a random genre?

00:17:17.210 --> 00:17:19.210
Do you want a specific genre?

00:17:19.210 --> 00:17:21.579
If they give you
one, you can save it

00:17:21.579 --> 00:17:23.930
so that for the rest
of the conversation,

00:17:23.930 --> 00:17:27.520
you can keep giving them
music coming from that genre.

00:17:27.520 --> 00:17:29.920
In advanced use
case, you could also

00:17:29.920 --> 00:17:33.670
have a counter where you
count how many songs for that

00:17:33.670 --> 00:17:36.250
genre you've been
giving to the user.

00:17:36.250 --> 00:17:39.610
And when they reach a certain
point, let's say 10 songs,

00:17:39.610 --> 00:17:42.460
you ask do you still
want this genre,

00:17:42.460 --> 00:17:46.000
or do you want to change?

00:17:46.000 --> 00:17:48.430
In some other cases,
the conversation token

00:17:48.430 --> 00:17:50.590
doesn't work because,
let's say you

00:17:50.590 --> 00:17:53.560
want to store the preferences
for an action that is giving

00:17:53.560 --> 00:17:55.900
you weather forecast,
and you want

00:17:55.900 --> 00:17:59.680
to save the zip or an area code
to identify the area for where

00:17:59.680 --> 00:18:02.380
they want the forecast.

00:18:02.380 --> 00:18:05.410
If you save this in the
conversation token, what

00:18:05.410 --> 00:18:09.670
happens is that value is lost
at the next conversation,

00:18:09.670 --> 00:18:12.850
so you would be asking
again, what is your zip,

00:18:12.850 --> 00:18:15.130
and that's not a
good experience.

00:18:15.130 --> 00:18:18.550
And that's where user
storage comes into play,

00:18:18.550 --> 00:18:21.530
and this slide might seem
very familiar to you.

00:18:21.530 --> 00:18:24.580
It's exactly the same API
of conversation token,

00:18:24.580 --> 00:18:26.470
so you already know
how to use this.

00:18:26.470 --> 00:18:28.520
It's a field of
response requests.

00:18:28.520 --> 00:18:29.500
It's a string.

00:18:29.500 --> 00:18:33.550
You can write just a screen or
serialize a structure of data.

00:18:33.550 --> 00:18:37.180
We will recirculate it
across all the conversation

00:18:37.180 --> 00:18:38.980
that you're having
with the user--

00:18:38.980 --> 00:18:40.900
future conversation,
conversation

00:18:40.900 --> 00:18:42.890
on different devices.

00:18:42.890 --> 00:18:45.820
The main difference
is the content

00:18:45.820 --> 00:18:50.440
can be clear only by the
app itself or by the user,

00:18:50.440 --> 00:18:53.780
and we will see how to do
it in a couple of slides.

00:18:53.780 --> 00:18:58.060
So this is exactly
the same example

00:18:58.060 --> 00:19:00.310
that I had for the
conversation token.

00:19:00.310 --> 00:19:03.230
The only thing that has changed
is the name of the field.

00:19:03.230 --> 00:19:05.350
Now, I'm using user
storage, and that

00:19:05.350 --> 00:19:10.060
means I have access
to a bigger lifespan.

00:19:10.060 --> 00:19:11.860
Going back to the
example of storing

00:19:11.860 --> 00:19:15.200
that zip, now that we store
it in the user storage,

00:19:15.200 --> 00:19:18.820
if I started this conversation
on a smart speaker,

00:19:18.820 --> 00:19:23.800
save the zip, the moment I ask
for the forecast from my phone,

00:19:23.800 --> 00:19:25.960
the action will
know the zip code

00:19:25.960 --> 00:19:29.990
and won't need to
ask for it again.

00:19:29.990 --> 00:19:32.850
That said, this is how
you [INAUDIBLE] the value.

00:19:32.850 --> 00:19:34.580
You raise the Boolean.

00:19:34.580 --> 00:19:36.110
If you're using
the client library,

00:19:36.110 --> 00:19:38.960
you set the value of the
storage to an empty object,

00:19:38.960 --> 00:19:41.360
and we clear it for you.

00:19:41.360 --> 00:19:44.430
Last thing I have to say
about the user storage

00:19:44.430 --> 00:19:46.830
is very important.

00:19:46.830 --> 00:19:50.670
This is mostly like a cookie,
and so there are some countries

00:19:50.670 --> 00:19:54.600
that have strong regulations
about obtaining consent

00:19:54.600 --> 00:19:57.560
from the user before you
can save or read data

00:19:57.560 --> 00:19:58.900
from the user storage.

00:19:58.900 --> 00:20:01.450
So if you're operating
one of those country,

00:20:01.450 --> 00:20:04.200
make sure that you use the
Confirmation Helper, that

00:20:04.200 --> 00:20:07.440
is an helper that allows you
to ask something to the user

00:20:07.440 --> 00:20:10.290
and get the yes or no
request before you actually

00:20:10.290 --> 00:20:13.920
start writing or reading
data from the user storage.

00:20:13.920 --> 00:20:17.928
And with that, it's now time
for Adam to talk about Identity.

00:20:22.608 --> 00:20:24.850
ADAM DAWES: All right,
thank you, Silvano.

00:20:24.850 --> 00:20:27.760
So user storage is
a terrific feature

00:20:27.760 --> 00:20:30.370
to be able to hold state
and build continuity

00:20:30.370 --> 00:20:33.850
with a user across
multiple conversations.

00:20:33.850 --> 00:20:37.170
It works a lot like a
cookie or HTML5 storage

00:20:37.170 --> 00:20:38.950
might in a browser.

00:20:38.950 --> 00:20:40.900
But we know that
isn't always enough,

00:20:40.900 --> 00:20:42.670
so let me talk a
little bit about how

00:20:42.670 --> 00:20:45.100
you can use Identity
to further deepen

00:20:45.100 --> 00:20:48.130
your experience with the user.

00:20:48.130 --> 00:20:50.130
So the first thing that
you get with Identity

00:20:50.130 --> 00:20:52.230
is you get to know
who the user is.

00:20:52.230 --> 00:20:55.320
You get to know her
name, her email address,

00:20:55.320 --> 00:20:57.870
and you get access to
her profile picture.

00:20:57.870 --> 00:21:00.840
This allows you to build
a direct relationship

00:21:00.840 --> 00:21:03.390
with the user, where
you can engage her

00:21:03.390 --> 00:21:08.800
via email outside of the
context of using your app.

00:21:08.800 --> 00:21:10.890
The next thing that
Identity provides

00:21:10.890 --> 00:21:14.070
is the ability to have
a consistent experience

00:21:14.070 --> 00:21:18.310
across multiple devices
and on different platforms.

00:21:18.310 --> 00:21:21.350
So with user storage, you're
able to keep application state

00:21:21.350 --> 00:21:24.360
and user preferences,
but all of that data

00:21:24.360 --> 00:21:27.000
is stored in Google's
cloud and only

00:21:27.000 --> 00:21:30.030
available to your
conversational action.

00:21:30.030 --> 00:21:34.350
But with Identity, now you can
store all of the user's data

00:21:34.350 --> 00:21:37.890
on your own back end, and
whether or not the user

00:21:37.890 --> 00:21:40.800
comes back via your
mobile app, the web,

00:21:40.800 --> 00:21:42.960
or your conversational
action, you'll

00:21:42.960 --> 00:21:45.480
be able to reset the
state for the user

00:21:45.480 --> 00:21:48.330
and get her going where she
left off the last time she

00:21:48.330 --> 00:21:50.720
used your service.

00:21:50.720 --> 00:21:53.540
And finally, with
Identity, now that you

00:21:53.540 --> 00:21:56.870
have all of her data
stored on your back end,

00:21:56.870 --> 00:22:01.220
Identity can now help you secure
that data so only the user

00:22:01.220 --> 00:22:05.930
has access to it,
and nobody else does.

00:22:05.930 --> 00:22:07.660
So the Actions on
Google Cloud Platform

00:22:07.660 --> 00:22:11.290
has supported Identity from
the very beginning with OAuth

00:22:11.290 --> 00:22:13.840
based account linking.

00:22:13.840 --> 00:22:17.680
But the problem that we found
is that when a user engages

00:22:17.680 --> 00:22:20.440
with your action via
voice, the only way

00:22:20.440 --> 00:22:23.350
to be able to do that
account linking experience

00:22:23.350 --> 00:22:26.050
was to punt the
user to the phone

00:22:26.050 --> 00:22:28.540
and get the user to
then go to your website,

00:22:28.540 --> 00:22:32.350
log in, and complete
the linking experience.

00:22:32.350 --> 00:22:37.210
These kinds of cross device
flows are super difficult,

00:22:37.210 --> 00:22:42.200
and as you can imagine, the
conversion rate is pretty low.

00:22:42.200 --> 00:22:45.370
That's why we're super
excited to announce

00:22:45.370 --> 00:22:49.750
the developer preview of Google
Sign In for the Assistant.

00:22:49.750 --> 00:22:52.030
It provides a way
for your existing

00:22:52.030 --> 00:22:57.370
users or your new users to
sign into your app completely

00:22:57.370 --> 00:23:00.850
via voice without needing to--

00:23:00.850 --> 00:23:05.230
without needing to leave the
context of the conversation.

00:23:05.230 --> 00:23:07.990
Inside Google Sign In
on other platforms,

00:23:07.990 --> 00:23:10.510
we're actually able
to automatically log

00:23:10.510 --> 00:23:13.060
users in if they've
previously used

00:23:13.060 --> 00:23:15.560
your service on a different
device or another platform.

00:23:18.830 --> 00:23:21.420
Google Sign In for
Assistant comes in two

00:23:21.420 --> 00:23:23.520
different developer modes.

00:23:23.520 --> 00:23:28.230
In multi-platform mode, we layer
Google sign in on top of OAuth

00:23:28.230 --> 00:23:30.060
based account linking.

00:23:30.060 --> 00:23:33.210
This is what provides this
seamless voice based account

00:23:33.210 --> 00:23:36.030
linking experience
for Google users,

00:23:36.030 --> 00:23:38.370
yet still maintains
a path for users

00:23:38.370 --> 00:23:42.120
that registered with your
service with another identity,

00:23:42.120 --> 00:23:44.730
be it a Hotmail account or
a Yahoo account or something

00:23:44.730 --> 00:23:46.800
like that.

00:23:46.800 --> 00:23:48.930
Now, for Assistant
only developers,

00:23:48.930 --> 00:23:50.670
we're especially
excited about what

00:23:50.670 --> 00:23:53.980
Google Sign In for Assistant
is going to be able to do.

00:23:53.980 --> 00:23:56.850
We know that there are a lot
of Assistant only developers

00:23:56.850 --> 00:23:59.070
out there, and we've heard you--

00:23:59.070 --> 00:24:02.850
that Identity and account
linking is a heavy lift just

00:24:02.850 --> 00:24:05.350
to get started on the platform.

00:24:05.350 --> 00:24:08.040
So now, with Google
Sign In for Assistant,

00:24:08.040 --> 00:24:12.090
you're able to rely
completely on Google to manage

00:24:12.090 --> 00:24:14.370
all of your users' identity.

00:24:14.370 --> 00:24:16.740
That means you don't
need to build an account

00:24:16.740 --> 00:24:19.600
system of your own,
and it's totally cool

00:24:19.600 --> 00:24:22.310
if you've never
even heard of OAuth.

00:24:22.310 --> 00:24:26.340
Let's take a look at how one of
these Assistant only developers

00:24:26.340 --> 00:24:29.920
is planning on using the tool.

00:24:29.920 --> 00:24:33.250
So Starbutter AI
was founded by four

00:24:33.250 --> 00:24:35.800
self-described
personal finance geeks

00:24:35.800 --> 00:24:39.130
who love to argue with each
other about the best way

00:24:39.130 --> 00:24:42.130
to manage their
personal finances

00:24:42.130 --> 00:24:45.460
and look for financial
services products.

00:24:45.460 --> 00:24:48.160
They all found themselves
with a similar experience,

00:24:48.160 --> 00:24:50.680
where their friends and
families would inundate them

00:24:50.680 --> 00:24:54.160
with questions about the
best credit cards to get

00:24:54.160 --> 00:24:56.420
or how to get a mortgage.

00:24:56.420 --> 00:24:59.770
It was through this
experience that they realized

00:24:59.770 --> 00:25:03.670
that the best way to recommend
financial services products was

00:25:03.670 --> 00:25:06.400
to get to know the user
through a question and answer

00:25:06.400 --> 00:25:08.510
kind of dialogue.

00:25:08.510 --> 00:25:10.570
This is why they
founded the company

00:25:10.570 --> 00:25:13.960
and are investing so big
into AI and are building

00:25:13.960 --> 00:25:15.820
on the Assistant platform.

00:25:15.820 --> 00:25:16.970
And they're doing great.

00:25:16.970 --> 00:25:18.970
Just last year,
they won an award

00:25:18.970 --> 00:25:22.780
for being one of the top actions
on the Assistant platform.

00:25:22.780 --> 00:25:26.140
But to offer the kind
of personalized advice

00:25:26.140 --> 00:25:28.790
that will keep users coming
back again and again,

00:25:28.790 --> 00:25:31.810
and that's relevant for
them, Starbutter really

00:25:31.810 --> 00:25:34.270
needs a user's identity.

00:25:34.270 --> 00:25:36.820
Last week, we gave them
access to Google Sign

00:25:36.820 --> 00:25:40.150
In for the Assistant, so let's
take a look at their demo app

00:25:40.150 --> 00:25:42.730
to see what they're thinking
about in terms of getting

00:25:42.730 --> 00:25:44.580
set up with this new feature.

00:25:44.580 --> 00:25:47.478
[VIDEO PLAYBACK]

00:25:50.380 --> 00:25:52.680
- Talk to Mortgage Helper Demo.

00:25:55.960 --> 00:25:58.320
- All right, getting the test
version of Mortgage Helper

00:25:58.320 --> 00:25:59.940
Demo.

00:25:59.940 --> 00:26:02.750
- Hi, I'm Morgan, an
artificial intelligence

00:26:02.750 --> 00:26:04.400
assistant for home loans.

00:26:04.400 --> 00:26:06.350
I analyze millions
of data points

00:26:06.350 --> 00:26:08.540
to finding you
the best mortgage.

00:26:08.540 --> 00:26:10.940
Want to compare loan
offers or calculate

00:26:10.940 --> 00:26:14.140
how much you can borrow?

00:26:14.140 --> 00:26:16.028
- Calculate how
much I can borrow.

00:26:20.240 --> 00:26:22.080
- To compare home
loan offers, I'll

00:26:22.080 --> 00:26:25.185
need your basic info to create
a new Mortgage Helper Demo

00:26:25.185 --> 00:26:26.360
account.

00:26:26.360 --> 00:26:28.970
If you want more details,
say Tell Me More.

00:26:28.970 --> 00:26:32.000
Can I have your name, email
address, and profile picture

00:26:32.000 --> 00:26:33.758
from Google?

00:26:33.758 --> 00:26:34.258
- Yes.

00:26:38.681 --> 00:26:39.180
- Great.

00:26:39.180 --> 00:26:42.200
Alex, I created a new
Mortgage Helper Demo account

00:26:42.200 --> 00:26:44.170
using your Google account.

00:26:44.170 --> 00:26:45.170
You're all set.

00:26:45.170 --> 00:26:46.070
- All right, Alex.

00:26:46.070 --> 00:26:48.590
Are you purchasing a property,
or are you refinancing

00:26:48.590 --> 00:26:50.734
a property you already own?

00:26:50.734 --> 00:26:51.580
[END PLAYBACK]

00:26:51.580 --> 00:26:54.050
ADAM DAWES: All right,
wasn't that so much better?

00:26:54.050 --> 00:26:56.630
The user was able
to create an account

00:26:56.630 --> 00:27:00.020
without leaving the context
of their conversation.

00:27:00.020 --> 00:27:02.207
And Starbutter said
that it was super easy

00:27:02.207 --> 00:27:04.790
for them to get set up, so let's
take a look behind the scenes

00:27:04.790 --> 00:27:06.547
at what's going on.

00:27:06.547 --> 00:27:08.380
So the first thing to
know about Google Sign

00:27:08.380 --> 00:27:11.510
In for the Assistant is that
it operates like Google Sign

00:27:11.510 --> 00:27:13.880
In on all other platforms.

00:27:13.880 --> 00:27:16.700
The same principles apply, where
you want to get information

00:27:16.700 --> 00:27:18.650
about who the user is.

00:27:18.650 --> 00:27:21.080
Google presents
a UI for the user

00:27:21.080 --> 00:27:23.390
to make a decision
about whether or not

00:27:23.390 --> 00:27:27.680
they want to reveal their
basic profile info to your app.

00:27:27.680 --> 00:27:31.790
If the user says yes, then
we generate an ID token

00:27:31.790 --> 00:27:34.650
and hand it back to your client.

00:27:34.650 --> 00:27:38.060
Now, let's take a look at
one of these ID tokens.

00:27:38.060 --> 00:27:41.450
So an ID token is
just a JSON web token,

00:27:41.450 --> 00:27:43.970
and that's basically a
dictionary of JSON which

00:27:43.970 --> 00:27:46.710
is cryptographically
signed by Google,

00:27:46.710 --> 00:27:50.540
so you can be sure that the
information inside the token

00:27:50.540 --> 00:27:52.520
is authentic.

00:27:52.520 --> 00:27:55.190
Inside the token, you'll
see all of the information

00:27:55.190 --> 00:27:58.220
that you need in order
to be able to make

00:27:58.220 --> 00:28:00.230
a decision about whether
to link the account

00:28:00.230 --> 00:28:02.700
or create a new
account for the user.

00:28:02.700 --> 00:28:06.350
So that includes the user's
name, their profile picture,

00:28:06.350 --> 00:28:08.990
and their email
address, as well as

00:28:08.990 --> 00:28:13.910
the Google specific identifier
that's unique to that user.

00:28:13.910 --> 00:28:16.550
You'll also notice at
the top of this screen,

00:28:16.550 --> 00:28:17.900
there's the AUD field.

00:28:17.900 --> 00:28:19.730
That's short for Audience.

00:28:19.730 --> 00:28:21.800
This is also a super
important field

00:28:21.800 --> 00:28:25.370
because that protects the
security of your user's data.

00:28:25.370 --> 00:28:28.190
It's what prevents another
app from getting an ID

00:28:28.190 --> 00:28:31.730
token for that Google
user and replaying

00:28:31.730 --> 00:28:34.940
that token against your
back end to get access

00:28:34.940 --> 00:28:37.850
to that user's data.

00:28:37.850 --> 00:28:39.350
Let's take a look
at what Starbutter

00:28:39.350 --> 00:28:42.192
had to do to get this
set up in their action.

00:28:42.192 --> 00:28:43.900
So the first thing
that they needed to do

00:28:43.900 --> 00:28:47.150
was to go to the Actions
on Google Developer console

00:28:47.150 --> 00:28:50.360
and go to the Identity and
account linking section.

00:28:50.360 --> 00:28:53.240
And there, they configured
that they used Google Sign

00:28:53.240 --> 00:28:57.230
In as their linking type.

00:28:57.230 --> 00:29:00.870
Next, they need to
update their action,

00:29:00.870 --> 00:29:03.770
so first, they need to
initialize their client ID.

00:29:03.770 --> 00:29:05.510
This is what comes
back in the audience

00:29:05.510 --> 00:29:07.940
and protects the user's data.

00:29:07.940 --> 00:29:10.610
And then they need to
find the right time

00:29:10.610 --> 00:29:14.060
to be able to ask the user
to log in and provide consent

00:29:14.060 --> 00:29:16.610
to give their
account information.

00:29:16.610 --> 00:29:18.722
Now, Starbutter did
that relatively early,

00:29:18.722 --> 00:29:20.930
and you're going to want to
be thoughtful about where

00:29:20.930 --> 00:29:22.010
you do this.

00:29:22.010 --> 00:29:25.700
It's generally not best practice
to immediately ask the user

00:29:25.700 --> 00:29:28.070
to sign in when they
open your action,

00:29:28.070 --> 00:29:31.750
so think about that carefully.

00:29:31.750 --> 00:29:35.260
And then finally, the last thing
that Starbutter needed to do

00:29:35.260 --> 00:29:37.730
was to be able to
handle the resolution.

00:29:37.730 --> 00:29:39.880
Now, this can break two ways--

00:29:39.880 --> 00:29:43.750
the user can agree to provide
their profile information,

00:29:43.750 --> 00:29:46.000
or they can decide not to.

00:29:46.000 --> 00:29:49.390
If they agree, then
we'll be able to return

00:29:49.390 --> 00:29:53.020
that whole set of JSON that
comes back in the ID token,

00:29:53.020 --> 00:29:57.400
and then you'll be able to
extract the user's email

00:29:57.400 --> 00:30:00.070
address or their
Google identifier,

00:30:00.070 --> 00:30:04.150
and then you can start keying
data on your back end based

00:30:04.150 --> 00:30:06.610
on that user's identity.

00:30:06.610 --> 00:30:09.860
If the user decides not to
provide that information,

00:30:09.860 --> 00:30:12.160
then you're going to want
to handle that gracefully.

00:30:12.160 --> 00:30:14.410
You're going to want to be
able to explain to the user

00:30:14.410 --> 00:30:17.560
the benefit of logging
in, and if they still

00:30:17.560 --> 00:30:20.080
decide that they don't want
to share their information,

00:30:20.080 --> 00:30:22.690
you're going to try to forward
the conversation and give--

00:30:22.690 --> 00:30:27.970
be useful to the user even
without knowing who they are.

00:30:27.970 --> 00:30:30.910
Now, let's shift back to
the other developer type--

00:30:30.910 --> 00:30:33.190
the multi-platform developer.

00:30:33.190 --> 00:30:35.020
So for them, things
are a little bit more

00:30:35.020 --> 00:30:37.390
complicated because they
want to be able to support

00:30:37.390 --> 00:30:39.070
two types of users--

00:30:39.070 --> 00:30:41.890
both the Google user
as well as any user

00:30:41.890 --> 00:30:44.860
who may have registered
with their service

00:30:44.860 --> 00:30:49.210
given another identity provider
like Microsoft or Outlook.

00:30:49.210 --> 00:30:53.830
So for them, they need to
be able to have that path

00:30:53.830 --> 00:30:57.460
to be able to connect to
data for both user types.

00:30:57.460 --> 00:31:01.570
Now, I understand it may feel
like a little bit of a caveat

00:31:01.570 --> 00:31:05.110
that only Google users are able
to get this voice based account

00:31:05.110 --> 00:31:07.630
linking experience,
but I want to stress

00:31:07.630 --> 00:31:10.210
that it's still going
to be super impactful

00:31:10.210 --> 00:31:12.430
for your action.

00:31:12.430 --> 00:31:15.250
We know that you've invested
a lot of time and energy

00:31:15.250 --> 00:31:17.590
to build a great
experience for users,

00:31:17.590 --> 00:31:20.920
and so we want to make sure
that we bring as many users

00:31:20.920 --> 00:31:22.250
through that front door.

00:31:22.250 --> 00:31:26.350
And so by having Google users
get this streamlined voice

00:31:26.350 --> 00:31:29.320
experience, that's
going to bring many more

00:31:29.320 --> 00:31:32.730
users to enjoy all the benefits
that your action provides.

00:31:36.030 --> 00:31:39.210
So let's take another
look at an action that

00:31:39.210 --> 00:31:40.620
is on multiple platforms.

00:31:40.620 --> 00:31:43.320
So this is Itcher,
and their goal in life

00:31:43.320 --> 00:31:46.890
is to be able to answer that
age old question of what

00:31:46.890 --> 00:31:50.310
movie or TV show
should I watch tonight.

00:31:50.310 --> 00:31:53.610
So they've built a personalized
recommendation that's

00:31:53.610 --> 00:31:58.830
available on iOS, Android, web,
and the Assistant platform,

00:31:58.830 --> 00:32:01.050
and they've offered many
different ways for users

00:32:01.050 --> 00:32:04.530
to sign in via Google,
Facebook, username, password,

00:32:04.530 --> 00:32:06.450
even Twitter.

00:32:06.450 --> 00:32:09.150
So now, it's pretty
self-evident that Itcher really

00:32:09.150 --> 00:32:11.010
needs a user's identity.

00:32:11.010 --> 00:32:14.340
They can't store users
likes and dislikes

00:32:14.340 --> 00:32:16.050
and make meaningful
recommendations

00:32:16.050 --> 00:32:18.930
without being able to have
a consistent experience

00:32:18.930 --> 00:32:21.940
across time and across devices.

00:32:21.940 --> 00:32:23.340
So let's see how
they're planning

00:32:23.340 --> 00:32:27.414
on using Google Sign In for
Assistant with their demo app.

00:32:27.414 --> 00:32:30.258
[VIDEO PLAYBACK]

00:32:32.630 --> 00:32:33.670
- Talk to Itcher.

00:32:37.340 --> 00:32:40.610
- OK, let's get the
test version of Itcher.

00:32:40.610 --> 00:32:42.770
- To get started, I'll
need your basic info

00:32:42.770 --> 00:32:45.130
to personalize your experience.

00:32:45.130 --> 00:32:47.810
If you want more details,
say, tell me more.

00:32:47.810 --> 00:32:50.840
Can I have your name, email
address, and profile picture

00:32:50.840 --> 00:32:52.830
from Google?

00:32:52.830 --> 00:32:53.330
- Yes.

00:32:57.161 --> 00:32:57.660
- Great.

00:32:57.660 --> 00:33:00.950
So now, I can check to see if
you have an account with us.

00:33:00.950 --> 00:33:03.200
Just a sec.

00:33:03.200 --> 00:33:05.030
I found your account, Alex.

00:33:05.030 --> 00:33:07.170
Your account is now
linked to Google.

00:33:07.170 --> 00:33:08.840
- Hey, this is Itcher.

00:33:08.840 --> 00:33:11.810
I can give you personalized
movie, TV show, and book

00:33:11.810 --> 00:33:13.640
recommendations you'll love.

00:33:13.640 --> 00:33:14.750
How can I help?

00:33:14.750 --> 00:33:15.590
[END PLAYBACK]

00:33:15.590 --> 00:33:18.170
ADAM DAWES: All right
so that was also

00:33:18.170 --> 00:33:20.570
a much, much better experience.

00:33:20.570 --> 00:33:23.150
That-- in the
background, we were

00:33:23.150 --> 00:33:25.400
able to detect whether
or not Alex already

00:33:25.400 --> 00:33:29.250
had an account with Itcher and
seamlessly make the experience.

00:33:29.250 --> 00:33:32.440
So how does Itcher
create that experience,

00:33:32.440 --> 00:33:34.990
and other multi-platform
developers, with Google Sign

00:33:34.990 --> 00:33:36.420
In for Assistant?

00:33:36.420 --> 00:33:38.660
So first, just like
Starbutter, they

00:33:38.660 --> 00:33:41.630
need to go to their actions
on Google Developer console,

00:33:41.630 --> 00:33:44.630
but in this case, they
pick OAuth and Google

00:33:44.630 --> 00:33:47.440
Sign In as the way that they
want to do account linking.

00:33:50.500 --> 00:33:52.670
Next, they do exactly
like Starbutter.

00:33:52.670 --> 00:33:55.130
They find the right
time in the conversation

00:33:55.130 --> 00:33:58.640
to ask the user to
sign in, and then this

00:33:58.640 --> 00:34:00.960
is where things get a
little bit different.

00:34:00.960 --> 00:34:03.560
So in that interaction,
we went and we

00:34:03.560 --> 00:34:05.660
went to do a discovery
to whether or not

00:34:05.660 --> 00:34:07.950
that account already exists.

00:34:07.950 --> 00:34:10.400
So in order to make
that happen, Starbutter,

00:34:10.400 --> 00:34:13.730
and in this example,
the Food Bot app,

00:34:13.730 --> 00:34:17.659
they created a separate
API, a separate REST API,

00:34:17.659 --> 00:34:22.130
from their conversational
action fulfillment endpoint.

00:34:22.130 --> 00:34:24.380
So we call this endpoint
the token endpoint,

00:34:24.380 --> 00:34:29.510
and it allows us to do account
discovery and creation.

00:34:29.510 --> 00:34:31.510
So the way the logic
of this endpoint works

00:34:31.510 --> 00:34:33.380
is pretty straightforward.

00:34:33.380 --> 00:34:35.380
So we ask the user
whether or not

00:34:35.380 --> 00:34:37.750
they want to sign into the app.

00:34:37.750 --> 00:34:40.630
If they say yes, then
we generate an ID token,

00:34:40.630 --> 00:34:43.750
and we send it to
the token endpoint.

00:34:43.750 --> 00:34:46.929
Food Bot, in this case,
validates the ID token,

00:34:46.929 --> 00:34:50.110
and then they extract
the user's email address

00:34:50.110 --> 00:34:53.409
and do a look up on
their account database.

00:34:53.409 --> 00:34:56.690
If they find that
user already exists,

00:34:56.690 --> 00:34:59.830
then they'll link the account
by taking the Google identifier

00:34:59.830 --> 00:35:02.240
and storing that for the user.

00:35:02.240 --> 00:35:05.080
And then they'll also
generate their own credential

00:35:05.080 --> 00:35:07.600
and return that to Google.

00:35:07.600 --> 00:35:09.610
Google will store
that credential

00:35:09.610 --> 00:35:12.940
and then return that in
every turn of conversation

00:35:12.940 --> 00:35:15.130
back to the Food
Bot app, and that's

00:35:15.130 --> 00:35:19.390
how it will be able to keep
state on who the user is.

00:35:19.390 --> 00:35:22.450
Now if, in that look
up on whether or not

00:35:22.450 --> 00:35:28.090
that user already exists, that
a user doesn't exist, then

00:35:28.090 --> 00:35:30.010
Food Bot will return
an error saying

00:35:30.010 --> 00:35:32.800
I've never heard of that user.

00:35:32.800 --> 00:35:37.060
So then what Google does is
we look up Food Bot's settings

00:35:37.060 --> 00:35:40.780
and see if they want to support
account creation via voice.

00:35:40.780 --> 00:35:42.490
Not all apps want to do that.

00:35:42.490 --> 00:35:44.530
Sometimes, the
registration process

00:35:44.530 --> 00:35:47.200
requires that they
gather more information

00:35:47.200 --> 00:35:49.450
than just the name
and email address,

00:35:49.450 --> 00:35:52.180
or maybe that they want to make
sure that the user has really

00:35:52.180 --> 00:35:55.990
evaluated their privacy
policy in terms of service.

00:35:55.990 --> 00:35:57.490
But if they do
decide that they want

00:35:57.490 --> 00:35:59.830
to do voice based
account creation,

00:35:59.830 --> 00:36:02.560
then we'll ask the user
do you want to create

00:36:02.560 --> 00:36:04.510
an account with Food Bot?

00:36:04.510 --> 00:36:08.890
If the user says yes, we'll then
again hit this token endpoint,

00:36:08.890 --> 00:36:10.720
and the token
endpoint will again

00:36:10.720 --> 00:36:13.360
validate the request
as coming from Google

00:36:13.360 --> 00:36:17.350
and then extract the name, email
address and profile picture

00:36:17.350 --> 00:36:20.200
and store that
information as a new user

00:36:20.200 --> 00:36:21.880
in their user database.

00:36:21.880 --> 00:36:24.160
And then they'll
also create a token

00:36:24.160 --> 00:36:26.860
and return that
to Google to store

00:36:26.860 --> 00:36:29.920
and then respond with
every turn of conversation

00:36:29.920 --> 00:36:32.650
to keep that context.

00:36:32.650 --> 00:36:34.510
Now, if Food Bot
decides that they

00:36:34.510 --> 00:36:37.360
don't want to do voice
based account creation,

00:36:37.360 --> 00:36:40.210
or the user decides
that they don't want

00:36:40.210 --> 00:36:42.010
to create a new
account, they want

00:36:42.010 --> 00:36:44.860
to go and log into their
existing account that

00:36:44.860 --> 00:36:48.370
might be based on a Yahoo
or a Microsoft Identity,

00:36:48.370 --> 00:36:53.050
then we fall back to the regular
OAuth based account flow,

00:36:53.050 --> 00:36:55.060
where we punt the
user to the phone,

00:36:55.060 --> 00:36:57.790
and they manually log
in via their web site.

00:36:57.790 --> 00:37:01.270
And then Food Bot returns a
credential back to Google.

00:37:01.270 --> 00:37:04.600
This ensures that all
users are able to complete

00:37:04.600 --> 00:37:07.870
the account linking flow,
and all the Google users

00:37:07.870 --> 00:37:11.580
have this streamlined
experience.

00:37:11.580 --> 00:37:13.170
So that's pretty much it.

00:37:13.170 --> 00:37:16.050
It's really easy to take
advantage of Google Sign

00:37:16.050 --> 00:37:17.820
In for the Assistant,
whether you're

00:37:17.820 --> 00:37:22.290
an Assistant only developer
or a multi-platform developer.

00:37:22.290 --> 00:37:25.410
The developer preview
is available today.

00:37:25.410 --> 00:37:30.240
Just go out-- go and check
out the actions on developer--

00:37:30.240 --> 00:37:32.580
actions on Google
Developer docs and look

00:37:32.580 --> 00:37:35.890
for the Identity section.

00:37:35.890 --> 00:37:38.860
Now, as a recap,
Sylvano talked to you

00:37:38.860 --> 00:37:42.640
about how you can build a
more personalized experience

00:37:42.640 --> 00:37:45.970
with the user by using Helper
Intents to get permission

00:37:45.970 --> 00:37:49.900
to get the user's name,
location, and time.

00:37:49.900 --> 00:37:52.990
He also talked about
how to use the request

00:37:52.990 --> 00:37:56.770
info to see when the user
last used your action

00:37:56.770 --> 00:38:01.120
and whether or not the user
has already purchased info

00:38:01.120 --> 00:38:04.660
from your surface
via the Play Store.

00:38:04.660 --> 00:38:08.830
Next, he talked about how to
store information and build

00:38:08.830 --> 00:38:12.820
continuity with the user using
the conversational token, as

00:38:12.820 --> 00:38:15.010
well as user storage.

00:38:15.010 --> 00:38:17.410
And then I lead
you through how you

00:38:17.410 --> 00:38:20.200
can use Google Sign
In for Assistant

00:38:20.200 --> 00:38:22.180
to get the user's
identity and email

00:38:22.180 --> 00:38:25.870
address and the power of
voice based account creation

00:38:25.870 --> 00:38:27.430
and account linking.

00:38:27.430 --> 00:38:30.820
And for Actions only
developers, now they

00:38:30.820 --> 00:38:35.720
don't even need to have
their own account system.

00:38:35.720 --> 00:38:37.810
So we know your time
is very valuable.

00:38:37.810 --> 00:38:41.300
We would love to hear what you
thought of our presentation,

00:38:41.300 --> 00:38:44.490
so please navigate back
to the I/O schedule,

00:38:44.490 --> 00:38:48.560
find this session,
and give us a rating.

00:38:48.560 --> 00:38:52.150
And if you want more
information, please go online.

00:38:52.150 --> 00:38:58.960
We've got helpful-- docs that
describes Sylvano's experiences

00:38:58.960 --> 00:39:01.300
and the best practices,
and you can learn more

00:39:01.300 --> 00:39:04.170
about Google Sign In for
Assistant in the developer docs

00:39:04.170 --> 00:39:04.880
section.

00:39:04.880 --> 00:39:08.650
We'll also be across the
way at the Assistant Code

00:39:08.650 --> 00:39:13.502
Lab and igloo tent, so please
come and ask us questions.

00:39:13.502 --> 00:39:15.460
Thank you very much for
you attention, and have

00:39:15.460 --> 00:39:17.410
a great last day at I/O.

00:39:17.410 --> 00:39:21.660
[MUSIC PLAYING]

