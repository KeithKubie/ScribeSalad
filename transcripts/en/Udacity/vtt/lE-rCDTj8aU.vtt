WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:06.040
So we just described how to read
a row into the sense amplifier and

00:00:06.040 --> 00:00:09.000
the row buffer, and
then get 1 bit out of that row.

00:00:09.000 --> 00:00:12.680
So let's suppose that the bits
we had here were 1 0 1 1,

00:00:12.680 --> 00:00:17.590
and let's say this was DRAM, so
these bits drained into the bitline.

00:00:17.590 --> 00:00:22.111
The sense amplifier amplifies them,
outputs here 1 0 1 1, 1.

00:00:22.111 --> 00:00:27.160
The row buffer now stores this value and
starts outputting it here.

00:00:28.270 --> 00:00:32.400
Let's say that the column address
finally selects this bit to the output.

00:00:32.400 --> 00:00:34.410
So we output a 0.

00:00:34.410 --> 00:00:37.800
Remember, that DRAM
reads are destructive.

00:00:37.800 --> 00:00:41.680
Once we do that,
we no longer have our bits here.

00:00:41.680 --> 00:00:44.920
So what needs to be done is, after
the sense amplifier determines what

00:00:44.920 --> 00:00:49.520
the correct values of the bits are, and
the cells by now have been exhausted,

00:00:49.520 --> 00:00:55.040
we reverse the direction, and raise each
of the bit lines to its proper value.

00:00:55.040 --> 00:01:00.830
So now the sense amplifier is driving
this correct values back into the cells,

00:01:00.830 --> 00:01:03.220
and the cells get their values again.

00:01:03.220 --> 00:01:06.180
So destructive reads
from DRAM means that,

00:01:06.180 --> 00:01:08.640
really, we have to read and
then write each cell.

00:01:08.640 --> 00:01:12.870
So we cannot just wait long
enough to get the value,

00:01:12.870 --> 00:01:17.340
we also have to wait long enough
to put the value back in the cell.

00:01:17.340 --> 00:01:21.360
This is one of the reasons
why DRAM is slower than SRAM.

00:01:21.360 --> 00:01:22.460
Another reason, of course,

00:01:22.460 --> 00:01:26.480
is that the cell does not as
strongly pull the bitline, so

00:01:26.480 --> 00:01:29.740
the sense amplifier needs more
time to figure out what it has.

00:01:29.740 --> 00:01:32.960
After this read and then write approach,

00:01:32.960 --> 00:01:39.270
the cells have the correct values for
1011, and have been refreshed.

00:01:39.270 --> 00:01:43.650
Even if they have reduced to,
let's say 90% of what they should have,

00:01:43.650 --> 00:01:48.100
once we read them out and put it back
in, we put back in the full value.

00:01:48.100 --> 00:01:49.630
So now they can again leak for

00:01:49.630 --> 00:01:52.850
awhile before we need to read and
then write them again.

00:01:52.850 --> 00:01:54.790
So refresh, is really,

00:01:54.790 --> 00:02:00.380
to make sure that each of the rows
is red every once in a while.

00:02:00.380 --> 00:02:03.750
If the time for
the cell to lose the value enough so

00:02:03.750 --> 00:02:06.830
that we cannot recover
it is some sort of time,

00:02:06.830 --> 00:02:12.580
t, then every row needs to be read and
then written within the time t.

00:02:12.580 --> 00:02:16.870
A destructive read, and
then a write, will refresh the row.

00:02:16.870 --> 00:02:21.810
But we cannot rely on the processor
to access every row in the memory so

00:02:21.810 --> 00:02:23.640
that we don't have to do anything else.

00:02:23.640 --> 00:02:28.440
In fact, when you have caches, it often
happens that some rows that are very

00:02:28.440 --> 00:02:31.860
popular, and
accessed by the processor all the time,

00:02:31.860 --> 00:02:34.540
are actually the ones that
don't get refreshed this way.

00:02:34.540 --> 00:02:37.530
And the reason is that those
become cache hits, and

00:02:37.530 --> 00:02:41.770
the cache keeps keeping that data
because the processor wants it so often.

00:02:41.770 --> 00:02:44.130
So we end up actually not
accessing the memory for

00:02:44.130 --> 00:02:46.770
things that the processor is
accessing the most often.

00:02:46.770 --> 00:02:51.000
So we can not even rely on the program
to go through the whole memory.

00:02:51.000 --> 00:02:55.350
So what needs to happen for refresh is
that we have this refresh row counter.

00:02:55.350 --> 00:03:00.660
It starts at 0, we use it to refresh
this row, then it moves to 1.

00:03:00.660 --> 00:03:03.680
We then use it to refresh this row,
and so on.

00:03:03.680 --> 00:03:09.000
If a row needs to be refreshed within
some refresh period, let's say t,

00:03:09.000 --> 00:03:14.420
and we have n rows,
then every t over n seconds

00:03:14.420 --> 00:03:17.810
we have to refresh one row, so
that by the time we are done,

00:03:17.810 --> 00:03:23.810
we are ready to refresh again, a row,
which would only last for a period of t.

00:03:23.810 --> 00:03:30.190
Modern DRMs have a lot of rows, and the
refresh period is well under a second.

00:03:30.190 --> 00:03:33.450
So we're actually seeing a lot of
refreshes happen every second.

00:03:33.450 --> 00:03:35.810
This is not something that
happens occasionally.

00:03:35.810 --> 00:03:39.090
This actually significantly
interferes with when we can read and

00:03:39.090 --> 00:03:40.330
write our memory.

00:03:40.330 --> 00:03:45.450
because, while a refresh is going on, we
cannot do a useful read, because the row

00:03:45.450 --> 00:03:50.800
decoder, sense amps, and the row buffer
are used by the refresh operation,

00:03:50.800 --> 00:03:53.810
which is reading a row that we
didn't need, and writing it back.

00:03:53.810 --> 00:03:57.750
Meanwhile, we have to sit and wait with
our real read until that gets done so

00:03:57.750 --> 00:03:59.000
that we can move on.

