WEBVTT
Kind: captions
Language: en

00:00:02.299 --> 00:00:03.965
In the world of
application performance,

00:00:03.965 --> 00:00:06.050
you hear us talk
a lot about the 60

00:00:06.050 --> 00:00:08.874
frames per second and
16-millisecond barriers.

00:00:08.874 --> 00:00:11.540
But have you ever stopped to ask
why those numbers are relevant?

00:00:11.540 --> 00:00:13.123
My name is Colt
McAnlis, and if you're

00:00:13.123 --> 00:00:15.070
a developer who's serious
about performance,

00:00:15.070 --> 00:00:18.080
this is the type of technical
minutia that's worth knowing.

00:00:18.080 --> 00:00:20.700
Now, let's take a step back and
understand that most of this

00:00:20.700 --> 00:00:23.130
has to do with hardware,
human hardware.

00:00:23.130 --> 00:00:25.190
See, the human eye
doesn't act like a camera.

00:00:25.190 --> 00:00:27.487
There's no snapshot of the
world that gets sent over

00:00:27.487 --> 00:00:29.320
to the brain to make
sure that you don't run

00:00:29.320 --> 00:00:31.528
into that new piece of
furniture in your living room.

00:00:31.528 --> 00:00:33.200
Instead, the brain
is continuously

00:00:33.200 --> 00:00:35.950
processing visual signals
that the eye is sending to it.

00:00:35.950 --> 00:00:39.100
There's no concept of frame
or snapshots in this regard.

00:00:39.100 --> 00:00:41.980
Our concept of motion that
comes from still frames

00:00:41.980 --> 00:00:43.230
is effectively a hack.

00:00:43.230 --> 00:00:45.410
See, by displaying
images fast enough,

00:00:45.410 --> 00:00:47.920
we can trick the human
brain into perceiving motion

00:00:47.920 --> 00:00:49.500
where there actually isn't any.

00:00:49.500 --> 00:00:52.710
The caveat here is that how
fast we display those images has

00:00:52.710 --> 00:00:55.360
a large effect on how fluid
the motion will actually

00:00:55.360 --> 00:00:56.170
look to us.

00:00:56.170 --> 00:00:58.660
See, at a minimum, you
need about 10 to 12 frames

00:00:58.660 --> 00:01:00.320
per second before
the human brain

00:01:00.320 --> 00:01:03.260
starts to perceive
motion from a flip book.

00:01:03.260 --> 00:01:05.790
However, it doesn't
actually look that smooth.

00:01:05.790 --> 00:01:09.220
24 frames per second allows the
human eye to see fluid motion,

00:01:09.220 --> 00:01:12.110
but that's only thanks to visual
effects like motion blurring.

00:01:12.110 --> 00:01:14.500
And by the way, 24
frames per second

00:01:14.500 --> 00:01:16.330
is a sweet spot for
the film industry

00:01:16.330 --> 00:01:18.500
since it's fast
enough to show motion,

00:01:18.500 --> 00:01:21.010
but cheap enough to produce
for films on a budget, which

00:01:21.010 --> 00:01:23.710
is why, for the past 50 years,
most of the movies you see

00:01:23.710 --> 00:01:26.140
are displaying at 24
frames per second.

00:01:26.140 --> 00:01:28.700
Now, 30 frames per second
is enough for movies.

00:01:28.700 --> 00:01:30.720
But without the fancy
cinematic effects,

00:01:30.720 --> 00:01:32.250
it's actually not
that convincing.

00:01:32.250 --> 00:01:35.350
While 60 frames per second
is actually the sweet spot.

00:01:35.350 --> 00:01:37.660
Great, smooth motion
without all the tricks.

00:01:37.660 --> 00:01:39.760
And most humans can't
perceive the benefits

00:01:39.760 --> 00:01:42.150
of going higher
than this number.

00:01:42.150 --> 00:01:45.060
Now, it's worth noting that the
human eye is very discerning

00:01:45.060 --> 00:01:47.610
when it comes to inconsistencies
in these frame rates.

00:01:47.610 --> 00:01:50.277
For example, if you're moving
along at 60 frames per second,

00:01:50.277 --> 00:01:52.360
and then you suddenly drop
to 20 frames per second

00:01:52.360 --> 00:01:53.950
every now and
again, the human eye

00:01:53.950 --> 00:01:55.930
will see this lack
of smoothness.

00:01:55.930 --> 00:01:58.460
This tends to cause lots
of tension and uneasiness

00:01:58.460 --> 00:01:59.860
for your users.

00:01:59.860 --> 00:02:02.090
As an app developer,
your goal is clear.

00:02:02.090 --> 00:02:04.230
Keep your app at 60
frames per second.

00:02:04.230 --> 00:02:06.070
And then keep it there
through the duration

00:02:06.070 --> 00:02:07.980
of the user's
experience with it.

00:02:07.980 --> 00:02:11.090
Now, what 60 frames per second
means for you as a developer

00:02:11.090 --> 00:02:13.820
is that you've got 16
milliseconds per frame

00:02:13.820 --> 00:02:15.030
to do all of your work.

00:02:15.030 --> 00:02:17.620
That is input, computing,
network, and rendering,

00:02:17.620 --> 00:02:20.217
every frame to stay
fluid for your users.

00:02:20.217 --> 00:02:21.300
You can't argue with this.

00:02:21.300 --> 00:02:23.310
The math says so.

00:02:23.310 --> 00:02:25.040
And there's an entire
boatload of issues

00:02:25.040 --> 00:02:26.414
that can cause
your frame to take

00:02:26.414 --> 00:02:27.690
longer than 16 milliseconds.

00:02:27.690 --> 00:02:29.862
To find those problems
and fix them right,

00:02:29.862 --> 00:02:32.320
make sure you check out the
rest of the Android Performance

00:02:32.320 --> 00:02:33.260
Patterns content.

00:02:33.260 --> 00:02:36.310
And don't forget to join our
Google+ community as well.

00:02:36.310 --> 00:02:39.200
So keep calm, profile your
code, and always remember,

00:02:39.200 --> 00:02:39.800
perf matters.

00:02:39.800 --> 00:02:43.150
[MUSIC PLAYING]

