WEBVTT
Kind: captions
Language: en

00:00:02.160 --> 00:00:05.370
A second key programming
tool is the for loop.

00:00:05.370 --> 00:00:07.860
A for loop is a structure used
to execute a set of code

00:00:07.860 --> 00:00:09.430
repeatedly.

00:00:09.430 --> 00:00:11.920
The for loop statement specifier
is an index over

00:00:11.920 --> 00:00:14.710
which the loop is computed.

00:00:14.710 --> 00:00:17.360
For example, here I'll execute
a for loop using an

00:00:17.360 --> 00:00:19.550
index called i.

00:00:19.550 --> 00:00:22.400
The object, i, will start the
loop by taking the first value

00:00:22.400 --> 00:00:24.660
in the 1 through 10 vector.

00:00:24.660 --> 00:00:27.520
That is, to start,
i will equal 1.

00:00:27.520 --> 00:00:30.090
Next, the for loop
will execute.

00:00:30.090 --> 00:00:32.049
Then i will take the next value
in this vector, which is

00:00:32.049 --> 00:00:34.650
2, and loop will
execute again.

00:00:34.650 --> 00:00:36.910
This will continue until i has
taken the last value in the

00:00:36.910 --> 00:00:41.930
vector, 10, and the code
executes one last time.

00:00:41.930 --> 00:00:44.960
In this set of code, the value
i squared will be appended to

00:00:44.960 --> 00:00:49.100
the vector, x, using the
append function.

00:00:49.100 --> 00:00:50.350
Here I got an error.

00:00:50.350 --> 00:00:52.380
I'll take a closer look.

00:00:52.380 --> 00:00:55.280
I can see that x never actually
existed, so there was

00:00:55.280 --> 00:00:59.020
no way to append anything onto
the first iteration.

00:00:59.020 --> 00:01:01.360
To fix this, I'll just
initialize x as an empty

00:01:01.360 --> 00:01:03.990
vector using the concatenate
function, but leaving the

00:01:03.990 --> 00:01:06.630
arguments empty.

00:01:06.630 --> 00:01:08.580
OK, this runs well.

00:01:08.580 --> 00:01:09.650
Look at x.

00:01:09.650 --> 00:01:12.430
In each iteration the value
of i squared was appended

00:01:12.430 --> 00:01:14.200
to the end of x.

00:01:14.200 --> 00:01:17.000
So the first element was created
when i was 1, the

00:01:17.000 --> 00:01:21.250
second when i was
2, and so on.

00:01:21.250 --> 00:01:23.810
OK, I've done something
pretty cool here.

00:01:23.810 --> 00:01:26.390
I've done 10 calculations
using a for loop, and it

00:01:26.390 --> 00:01:27.840
wouldn't be hard to
do many more with

00:01:27.840 --> 00:01:29.530
the same set of code.

00:01:29.530 --> 00:01:32.610
For example, i could easily go
from 1 to 100, rather than

00:01:32.610 --> 00:01:35.820
just 1 to 10.

00:01:35.820 --> 00:01:38.250
While there are other, better
ways to do this particular

00:01:38.250 --> 00:01:41.080
calculation, there are instances
where for loop is

00:01:41.080 --> 00:01:43.810
very useful.

00:01:43.810 --> 00:01:47.120
All right, one more look
at the stock data.

00:01:47.120 --> 00:01:50.800
To calculate the smallest and
largest values for each stock

00:01:50.800 --> 00:01:53.750
in the stock data set, I'm going
to start by creating an

00:01:53.750 --> 00:01:57.390
object called the.tickers that
is just a list of the unique

00:01:57.390 --> 00:02:00.940
stock tickers in the data.

00:02:00.940 --> 00:02:04.490
Since for loops can iterate over
any vector, I will write

00:02:04.490 --> 00:02:06.970
a for loop to iterate over the
object that I've called

00:02:06.970 --> 00:02:08.220
the.tickers.

00:02:10.139 --> 00:02:12.800
It's sometimes helpful to also
give a meaningful name to the

00:02:12.800 --> 00:02:16.480
index, so I'm going to change
the index i to ticker.

00:02:20.240 --> 00:02:22.850
Now I need to create code
for the general case.

00:02:22.850 --> 00:02:25.070
For a given ticker, calculate
both the low

00:02:25.070 --> 00:02:28.480
and the high value.

00:02:28.480 --> 00:02:30.980
I'll start by identifying which
rows are of interest in

00:02:30.980 --> 00:02:34.240
the stocks data set.

00:02:34.240 --> 00:02:37.250
The vector called look.at is
a Boolean vector indicating

00:02:37.250 --> 00:02:39.140
which observations represent
the.ticker

00:02:39.140 --> 00:02:41.550
for the given iteration.

00:02:41.550 --> 00:02:43.880
Next, I can create two
statements to calculate the

00:02:43.880 --> 00:02:46.720
lowest low and highest high
of these observations.

00:02:50.450 --> 00:02:53.410
Finally, I need to store
these values somehow.

00:02:53.410 --> 00:02:58.050
I can start by initializing two
objects, lows and highs.

00:02:58.050 --> 00:03:00.750
Next, I can use an append
command to append a value on

00:03:00.750 --> 00:03:02.000
to the end of the vector.

00:03:05.890 --> 00:03:09.030
All right, I can run the code
and print the results, but

00:03:09.030 --> 00:03:10.510
something's wrong.

00:03:10.510 --> 00:03:13.370
While I'd want to spot check
some of my data anyways,

00:03:13.370 --> 00:03:16.660
something bad has happened.

00:03:16.660 --> 00:03:20.570
A value of NA in R means that a
value is missing, and, more

00:03:20.570 --> 00:03:23.530
generally, oftentimes functions
will return NA if

00:03:23.530 --> 00:03:26.650
any of the observations
are missing.

00:03:26.650 --> 00:03:29.080
If I took a look through our
data set, I'd find that there

00:03:29.080 --> 00:03:31.285
are several observations
with missing NA values.

00:03:36.110 --> 00:03:38.520
Here, I've checked how many
entries in the column low of

00:03:38.520 --> 00:03:42.030
the stocks data set
are missing.

00:03:42.030 --> 00:03:46.110
In many functions, such as min
and max, there's an optional

00:03:46.110 --> 00:03:49.790
extra argument that is useful
for ignoring missing data, the

00:03:49.790 --> 00:03:53.080
NA.RM argument, which I
will set to true in

00:03:53.080 --> 00:03:54.800
the min and max functions.

00:04:00.960 --> 00:04:04.650
Now when I re-run the code,
I get sensible results.

00:04:04.650 --> 00:04:07.270
I'd want to look at the data
more carefully to see why some

00:04:07.270 --> 00:04:10.200
observations are missing, but
I'll leave this as a topic for

00:04:10.200 --> 00:04:11.450
another set of videos.

00:04:13.970 --> 00:04:15.740
One final word--

00:04:15.740 --> 00:04:18.160
even in this example, there are
other, better functions

00:04:18.160 --> 00:04:19.420
that could have been used
to get the same

00:04:19.420 --> 00:04:22.470
results much more quickly.

00:04:22.470 --> 00:04:24.000
This would be important for
code that should be

00:04:24.000 --> 00:04:26.720
implemented efficiently, and
I'll get to these functions in

00:04:26.720 --> 00:04:28.630
the future.

00:04:28.630 --> 00:04:31.320
However, for the beginning R
programmer, it's sometimes

00:04:31.320 --> 00:04:34.130
easier and clearer to simply
implement a for loop.

