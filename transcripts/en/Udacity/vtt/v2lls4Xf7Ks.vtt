WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:01.120
&gt;&gt; So let's talk about a new

00:00:01.120 --> 00:00:02.850
kind of value function, that's going to actually make

00:00:02.850 --> 00:00:05.070
that optimization part easier and the learning

00:00:05.070 --> 00:00:07.770
part easier. So but it's really closely related

00:00:07.770 --> 00:00:11.130
to the stuff you talked about, Charles, so let's let's start with what you told

00:00:11.130 --> 00:00:15.750
us. Which is here's a definition of, of you. This is, we're going to define you.

00:00:15.750 --> 00:00:16.350
&gt;&gt; Mm.

00:00:16.350 --> 00:00:17.470
&gt;&gt; And put you in a box.

00:00:17.470 --> 00:00:19.520
&gt;&gt; It's been tried before.

00:00:19.520 --> 00:00:23.260
&gt;&gt; It can't be done. All right, so well, you know, if you,

00:00:23.260 --> 00:00:26.290
if you're a good dog, I'll give you some pie next. So U,

00:00:26.290 --> 00:00:27.542
&gt;&gt; [LAUGH]

00:00:27.542 --> 00:00:30.890
&gt;&gt; [LAUGH] U is defined for each state, the utility

00:00:30.890 --> 00:00:33.640
being the state, this is, the long-term value of being in

00:00:33.640 --> 00:00:36.680
a state is the reward for arriving in that state,

00:00:36.680 --> 00:00:40.110
plus the discounted reward of the future, and what's going to

00:00:40.110 --> 00:00:42.070
happen in the future? Well, in the future, to leave

00:00:42.070 --> 00:00:44.930
this state we're going to choose some action, then we're going to

00:00:44.930 --> 00:00:48.092
take an expectation over all possible next states. And we're

00:00:48.092 --> 00:00:51.290
going to arrive in some next state, S prime, and then U

00:00:51.290 --> 00:00:53.740
is representing the utility of that as well.

00:00:53.740 --> 00:00:55.970
So this is, is recursive and nonlinear, but

00:00:55.970 --> 00:00:57.060
we know how to solve this, we can

00:00:57.060 --> 00:00:59.130
use things like value iteration to do that. Agreed?

00:00:59.130 --> 00:01:00.080
&gt;&gt; Agreed.

00:01:00.080 --> 00:01:03.310
&gt;&gt; Alright, and you also said, here's how you can use this quantity to

00:01:03.310 --> 00:01:06.730
decide what to do. That the policy in a state S is, well, let's

00:01:06.730 --> 00:01:10.360
consider all of the actions we can take to leave that state. We'll look

00:01:10.360 --> 00:01:13.605
to what their expected values are, so

00:01:13.605 --> 00:01:16.590
we'll iterate over all the possible next states

00:01:16.590 --> 00:01:18.790
weighted by their probability of the utility of

00:01:18.790 --> 00:01:20.210
landing in the state that we'd end up in.

00:01:20.210 --> 00:01:20.680
&gt;&gt; Mm-hm.

00:01:20.680 --> 00:01:22.540
&gt;&gt; And that, that tells us how to behave.

00:01:22.540 --> 00:01:23.110
&gt;&gt; Yes.

00:01:23.110 --> 00:01:24.430
&gt;&gt; Alright, so these are, these are the value

00:01:24.430 --> 00:01:26.650
functions, well the value function of the policy that

00:01:26.650 --> 00:01:28.610
we talked about before. Here's our new kind of

00:01:28.610 --> 00:01:32.310
value function. It is sometimes called the Q function. Though,

00:01:32.310 --> 00:01:33.840
you know, some people in the know don't like

00:01:33.840 --> 00:01:36.250
that. It's, it's called the Q function because it's

00:01:36.250 --> 00:01:39.460
the letter Q. But it's, some people have said

00:01:39.460 --> 00:01:41.590
that it stands for quality but it's just, it's just

00:01:41.590 --> 00:01:45.770
a letter in the latter half of the alphabet, you know, V was taken, U was taken,

00:01:45.770 --> 00:01:47.330
you know, W is used for weights, like,

00:01:47.330 --> 00:01:50.100
Q was available. So, it was brought to bear.

00:01:50.100 --> 00:01:54.020
So, so this is, this is a, a new definition and you can see it's got elements

00:01:54.020 --> 00:01:58.240
of the other two. Let me maybe write down what it, it, a way to interpret this.

00:01:58.240 --> 00:01:58.750
&gt;&gt; Okay.

00:01:58.750 --> 00:02:03.390
&gt;&gt; So, again, here's the, the Q function. And what we're going to think

00:02:03.390 --> 00:02:07.310
of this as, is, this is the value for arriving in some state, S.

00:02:07.310 --> 00:02:08.610
And this is, you know, this is the reward we

00:02:08.610 --> 00:02:12.290
get for, for that arrival. Then what we're going to do is

00:02:12.290 --> 00:02:16.090
we're going to leave S via action A. So we're going to add

00:02:16.090 --> 00:02:19.110
to that the discounted expected value that we get for taking

00:02:19.110 --> 00:02:22.460
action A. It's going to now drop us to some next

00:02:22.460 --> 00:02:25.590
state S prime, according to this probability, and once we land

00:02:25.590 --> 00:02:29.420
in S prime, we're going to take whichever action has the highest

00:02:29.420 --> 00:02:32.660
Q value from there, okay? So that turned out to be

00:02:32.660 --> 00:02:34.870
the value for arriving in S, leaving via A,

00:02:34.870 --> 00:02:37.610
and proceeding optimally thereafter. Like once, once we get

00:02:37.610 --> 00:02:38.920
to a new state, we're going to be choosing the

00:02:38.920 --> 00:02:42.050
best actions each time. Does that work for you?

00:02:42.050 --> 00:02:44.910
&gt;&gt; It makes sense right, because you could, U is basically defined the

00:02:44.910 --> 00:02:46.770
same way. It's the value for arriving

00:02:46.770 --> 00:02:49.250
in S and then proceeding optimally thereafter.

00:02:49.250 --> 00:02:51.670
&gt;&gt; That's right. And all the, the only thing that we're doing here is

00:02:51.670 --> 00:02:55.319
we're, we're basically tying the algorithm's hands

00:02:55.319 --> 00:02:57.870
briefly. We're saying, we're going to force

00:02:57.870 --> 00:03:00.990
you to leave via ac, via action A. After that, do the normal

00:03:00.990 --> 00:03:03.825
thing. But just for a moment I'd like you to just take action A.

00:03:03.825 --> 00:03:05.900
&gt;&gt; Mm-hm. Okay, that makes sense. So you

00:03:05.900 --> 00:03:08.230
just, you, you inserted basically a, a kind

00:03:08.230 --> 00:03:10.210
of, kind of utility step in there that I

00:03:10.210 --> 00:03:12.180
assume you're about to use in some clever way.

00:03:12.180 --> 00:03:13.670
&gt;&gt; Indeed, yes, this is going to turn out

00:03:13.670 --> 00:03:15.200
to be really helpful, because it's going to allow us

00:03:15.200 --> 00:03:17.880
to compare the values of different actions without having

00:03:17.880 --> 00:03:19.920
to actually stare at the model to do it.

