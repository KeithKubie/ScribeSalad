WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.305
[ROCKET BLAST OFF]

00:00:03.230 --> 00:00:05.260
FLORINA MUNTENESCU:
At Google I/O 2017

00:00:05.260 --> 00:00:08.109
we opened the door to
Room, a persistence

00:00:08.109 --> 00:00:11.680
library that provides an
abstraction layer over SQ Lite.

00:00:11.680 --> 00:00:15.650
Now, Room has reached version
2.0 and is part of Jetpack.

00:00:15.650 --> 00:00:19.040
We fixed the bugs you reported,
and added some of the features

00:00:19.040 --> 00:00:20.770
you asked for.

00:00:20.770 --> 00:00:22.402
Let's go over Room's
main components

00:00:22.402 --> 00:00:23.860
and see what queries
are supported,

00:00:23.860 --> 00:00:26.380
how to implement
migrations, and how to test

00:00:26.380 --> 00:00:29.790
your work with the database.

00:00:29.790 --> 00:00:32.330
Let's say that you want
to have a table of users,

00:00:32.330 --> 00:00:34.190
and you want every
row of that table

00:00:34.190 --> 00:00:36.830
to be an instance
of the user class.

00:00:36.830 --> 00:00:39.100
Annotate your class
with that entity.

00:00:39.100 --> 00:00:40.541
Define the table
name if you don't

00:00:40.541 --> 00:00:41.915
want to use the
name of the class

00:00:41.915 --> 00:00:45.740
as tableName, set the
mandatory primary key,

00:00:45.740 --> 00:00:48.080
and the optional column info.

00:00:48.080 --> 00:00:50.900
But only if you want to
change the name of the column.

00:00:50.900 --> 00:00:53.750
Otherwise the
field name is used.

00:00:53.750 --> 00:00:54.900
And that's it.

00:00:54.900 --> 00:00:57.650
Room will take care of the
creation of the user table

00:00:57.650 --> 00:00:58.730
for you.

00:00:58.730 --> 00:01:00.740
So that's how the
entity is done.

00:01:00.740 --> 00:01:04.310
But we need a way to access
the data in the database.

00:01:04.310 --> 00:01:08.770
We do that with data access
objects, DAOs for short.

00:01:08.770 --> 00:01:11.390
More precisely,
create an interface.

00:01:11.390 --> 00:01:13.610
Annotate it with @Dao.

00:01:13.610 --> 00:01:16.250
In this interface
declare all the methods

00:01:16.250 --> 00:01:18.160
needed to work
with the database,

00:01:18.160 --> 00:01:21.200
annotating them with the
corresponding SQL query.

00:01:21.200 --> 00:01:24.860
Room takes care of implementing
these methods for you.

00:01:24.860 --> 00:01:28.520
The supported queries are
insert, update, delete, query,

00:01:28.520 --> 00:01:30.140
and rawquery.

00:01:30.140 --> 00:01:32.600
All of them except
rawquery are checked

00:01:32.600 --> 00:01:34.820
at compile time, which
means that if you

00:01:34.820 --> 00:01:39.350
write an invalid query, you'll
find this out immediately.

00:01:39.350 --> 00:01:42.140
The class that puts together
the entities and the DAOs

00:01:42.140 --> 00:01:44.070
is the room database.

00:01:44.070 --> 00:01:47.370
Create an extra class that
extends the Room database.

00:01:47.370 --> 00:01:48.680
Annotate it.

00:01:48.680 --> 00:01:52.070
Declare the entities and
the corresponding DAOs.

00:01:52.070 --> 00:01:55.280
Let's take a closer
look at the queries.

00:01:55.280 --> 00:01:57.410
The return type of
query and rawquery

00:01:57.410 --> 00:02:02.150
can be the entire entity, but
also a subset of its fields.

00:02:02.150 --> 00:02:04.220
If you're working with
Guava or with Optional

00:02:04.220 --> 00:02:06.500
from the Java util
package, you can also

00:02:06.500 --> 00:02:08.699
use them as return types.

00:02:08.699 --> 00:02:10.550
So this means that if
there are no values

00:02:10.550 --> 00:02:12.950
to satisfy your
query, then your query

00:02:12.950 --> 00:02:16.640
will return Optional.empty
or Optional.absent,

00:02:16.640 --> 00:02:19.640
depending on which Optional
you're working with.

00:02:19.640 --> 00:02:22.050
All of these queries
are synchronous,

00:02:22.050 --> 00:02:24.230
meaning that they will
be run on the same thread

00:02:24.230 --> 00:02:27.210
that you are
triggering them from.

00:02:27.210 --> 00:02:30.140
Room ensures you follow best
practices by throwing an error

00:02:30.140 --> 00:02:32.420
if you run queries
on the main thread.

00:02:32.420 --> 00:02:35.600
So use your preferred method
of handling threads in Android,

00:02:35.600 --> 00:02:38.410
and make sure you are
off the main thread.

00:02:38.410 --> 00:02:40.730
Room also supports
asynchronous query

00:02:40.730 --> 00:02:43.610
when working with
LiveData or RXJava.

00:02:43.610 --> 00:02:46.130
What's more, the queries
that return LiveData,

00:02:46.130 --> 00:02:49.400
or [? flowable, ?] are
observable queries,

00:02:49.400 --> 00:02:51.850
meaning that you will
get notified every time

00:02:51.850 --> 00:02:56.580
the data in the table,
or tables, updates.

00:02:56.580 --> 00:02:58.770
Whenever you alter your
database schema, either

00:02:58.770 --> 00:03:01.680
because you've added or
renamed a column or a table,

00:03:01.680 --> 00:03:05.430
you need to tell the database
how to handle that change.

00:03:05.430 --> 00:03:07.530
In order to do that
in your database class

00:03:07.530 --> 00:03:11.420
you'll need to first update
your database version.

00:03:11.420 --> 00:03:14.430
Second, implement
a migration class,

00:03:14.430 --> 00:03:17.610
which defines how to handle the
migration from the old schema

00:03:17.610 --> 00:03:19.260
to the new one.

00:03:19.260 --> 00:03:21.210
And then, thirdly, add
that migration class

00:03:21.210 --> 00:03:23.840
as a parameter to
the database filter.

00:03:23.840 --> 00:03:26.010
After triggering
the migrations, Room

00:03:26.010 --> 00:03:29.250
validates the schema for you to
ensure that the migration was

00:03:29.250 --> 00:03:30.850
done correctly.

00:03:30.850 --> 00:03:32.790
If you don't want to
handle migrations,

00:03:32.790 --> 00:03:35.610
and you don't need to
preserve your database data,

00:03:35.610 --> 00:03:38.130
call
fallbacktodestructivemigrations

00:03:38.130 --> 00:03:40.220
when building the database.

00:03:40.220 --> 00:03:42.690
To destructively
recreate the database

00:03:42.690 --> 00:03:45.270
only from a specific
version on, call

00:03:45.270 --> 00:03:48.000
fallbacktodestru
ctivemigrationfrom.

00:03:48.000 --> 00:03:49.890
And provide the number
for that version.

00:03:49.890 --> 00:03:53.610
So we have our entities, DAOs,
database, and migrations.

00:03:53.610 --> 00:03:54.740
How do we test that?

00:03:54.740 --> 00:03:57.840
To test the DAOs, you'll need
to implement an Android JUnit

00:03:57.840 --> 00:04:00.750
test that creates an
in-memory database.

00:04:00.750 --> 00:04:02.790
The in-memory database
holds the data

00:04:02.790 --> 00:04:05.360
only for as long as
the process is alive,

00:04:05.360 --> 00:04:09.350
meaning that after every test,
the database is destroyed.

00:04:09.350 --> 00:04:13.200
To test asynchronous queries,
use an instanttaskexecutorrule

00:04:13.200 --> 00:04:16.910
to execute each
task synchronously.

00:04:16.910 --> 00:04:18.744
In your app's
implementation, you'll

00:04:18.744 --> 00:04:21.779
end up referencing the
DAOs in other classes.

00:04:21.779 --> 00:04:24.840
To unit test those
classes, just mock the DAO

00:04:24.840 --> 00:04:27.300
or implement the fake version.

00:04:27.300 --> 00:04:28.530
Here's another tip.

00:04:28.530 --> 00:04:30.840
To implement Espresso
tests, covering

00:04:30.840 --> 00:04:33.150
code that uses
asynchronous queries,

00:04:33.150 --> 00:04:35.970
extend the
countingtaskexecutorrule

00:04:35.970 --> 00:04:39.400
to count the tasks as
they start and finish.

00:04:39.400 --> 00:04:42.600
Finally, don't forget
to test the migrations.

00:04:42.600 --> 00:04:44.310
Explore the database
schema first,

00:04:44.310 --> 00:04:49.027
and then use another handy test
rule, the migrationtesthelper.

00:04:49.027 --> 00:04:51.360
This class allows you to
create the database in an older

00:04:51.360 --> 00:04:54.690
version, and run and
validate each migration.

00:04:54.690 --> 00:04:56.490
All you need to do is
check that the data

00:04:56.490 --> 00:04:58.230
you inserted in
the older version

00:04:58.230 --> 00:05:01.570
is also present
after the migration.

00:05:01.570 --> 00:05:02.070
OK.

00:05:02.070 --> 00:05:03.640
So let's summarize this.

00:05:03.640 --> 00:05:04.960
Less boilerplate code.

00:05:04.960 --> 00:05:06.630
Compile-time checked queries.

00:05:06.630 --> 00:05:08.820
Ease of implementing migrations.

00:05:08.820 --> 00:05:10.410
A high degree of testability.

00:05:10.410 --> 00:05:12.090
And checks for
keeping the database

00:05:12.090 --> 00:05:14.250
work away from the main thread.

00:05:14.250 --> 00:05:16.260
All of these
qualities of Room make

00:05:16.260 --> 00:05:19.770
it easier and more pleasant to
work with databases, helping

00:05:19.770 --> 00:05:20.970
you deliver better apps.

00:05:20.970 --> 00:05:23.720
[ROCKET BLASTING OFF]

