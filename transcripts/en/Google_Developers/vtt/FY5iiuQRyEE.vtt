WEBVTT
Kind: captions
Language: en

00:00:05.880 --> 00:00:07.080
IVAN ZUZAK: Hey, everyone.

00:00:07.080 --> 00:00:11.170
So I noticed on Moderator that
someone said, why do we have

00:00:11.170 --> 00:00:13.870
testing and tooling
in the same panel?

00:00:13.870 --> 00:00:17.470
So we will try to cover
both topics equally.

00:00:17.470 --> 00:00:23.060
And with that, please join me
in welcoming Simon Stewart.

00:00:23.060 --> 00:00:26.720
He works at Facebook, and he is
known for creating Selenium

00:00:26.720 --> 00:00:28.890
and WebDriver.

00:00:28.890 --> 00:00:34.070
Next to him is Remy Sharp, who
is the creator of JS Bin, JS

00:00:34.070 --> 00:00:38.720
Console, and he curates the
Full Frontal conference.

00:00:38.720 --> 00:00:41.530
David Blooman from BBC
News, who is the

00:00:41.530 --> 00:00:43.180
testing superhero there.

00:00:43.180 --> 00:00:46.030
And next to him is Paul Irish,
who is our opener.

00:00:46.030 --> 00:00:50.510
He is a guru on the Chrome
Developer Relations team.

00:00:50.510 --> 00:00:55.360
And he's also known for many,
many developer tools, such as

00:00:55.360 --> 00:00:58.240
Modernizr, Yeoman, et
cetera, et cetera.

00:00:58.240 --> 00:01:03.400
So I will invite Paul to give
an excellent introduction.

00:01:03.400 --> 00:01:09.040
[APPLAUSE]

00:01:09.040 --> 00:01:11.370
PAUL IRISH: All right.

00:01:11.370 --> 00:01:13.290
I'm going to go fast on this.

00:01:13.290 --> 00:01:16.040
And I apologize, because I'm
speaking with an accent, for

00:01:16.040 --> 00:01:17.896
probably most of you.

00:01:17.896 --> 00:01:19.520
But we're going to go quick.

00:01:19.520 --> 00:01:21.410
First, I'm going to give
a lay of the land

00:01:21.410 --> 00:01:22.730
of the tooling ecosystem.

00:01:22.730 --> 00:01:26.330
And then I'm going to give a few
demos showcasing some of

00:01:26.330 --> 00:01:29.570
the cool stuff that's emerging
or things you might have not

00:01:29.570 --> 00:01:31.670
seen in this area.

00:01:31.670 --> 00:01:34.490
So first, it's hard to
conceptualize as far as all

00:01:34.490 --> 00:01:36.790
the things that are captured
by tooling.

00:01:36.790 --> 00:01:37.980
This is one approach--

00:01:37.980 --> 00:01:39.650
Addy Osmani and I
worked on this--

00:01:39.650 --> 00:01:42.480
kind of laying out a bunch of
the tools as far as the life

00:01:42.480 --> 00:01:45.280
cycle of a project, from
boilerplate to abstractions,

00:01:45.280 --> 00:01:48.130
the application stack, and then
into workflow performance

00:01:48.130 --> 00:01:49.440
and builds.

00:01:49.440 --> 00:01:53.040
But then we in the group here
were thinking about something

00:01:53.040 --> 00:01:54.220
along these lines, too--

00:01:54.220 --> 00:01:56.330
this is very much in
the tooling vein--

00:01:56.330 --> 00:01:59.970
the package and dependency
management of my application

00:01:59.970 --> 00:02:01.010
source code.

00:02:01.010 --> 00:02:03.260
What my editing experience is
like, what the tools that the

00:02:03.260 --> 00:02:05.790
browser actually provides is.

00:02:05.790 --> 00:02:07.820
When it comes to testing, both
unit testing, integration

00:02:07.820 --> 00:02:08.979
testing, CSS testing.

00:02:08.979 --> 00:02:10.860
I'm going to show a demo
of some of that.

00:02:10.860 --> 00:02:13.340
Then build and deployment, how
I'm automating browsers.

00:02:13.340 --> 00:02:15.190
I'm probably going to be doing
that inside Continuous

00:02:15.190 --> 00:02:16.290
Integration.

00:02:16.290 --> 00:02:17.700
And then there's a lot
inside mobile.

00:02:17.700 --> 00:02:20.690
So handling mobile devices,
whether they're local or in

00:02:20.690 --> 00:02:23.000
the cloud, there's a lot.

00:02:23.000 --> 00:02:24.520
So I want to dive into
a few things.

00:02:24.520 --> 00:02:29.730
So CSS testing, this is a
fantastic slide deck and site

00:02:29.730 --> 00:02:31.870
put together by Simon Madine.

00:02:31.870 --> 00:02:34.040
This is focused on
four styles.

00:02:34.040 --> 00:02:36.620
How can we better have
a feel for if we're

00:02:36.620 --> 00:02:37.810
screwing up or not?

00:02:37.810 --> 00:02:40.310
One of the projects that's
listed here--

00:02:40.310 --> 00:02:44.560
a number of these are pretty
young projects, but this one,

00:02:44.560 --> 00:02:46.480
called Fighting Layout Bugs,
has been around for about

00:02:46.480 --> 00:02:48.420
three years.

00:02:48.420 --> 00:02:51.230
And it's actually offered
in Java, mostly

00:02:51.230 --> 00:02:52.910
for use with Maven.

00:02:52.910 --> 00:02:55.040
And it does things like
these five tests here.

00:02:55.040 --> 00:02:56.260
One of them is DetectTextNearOr

00:02:56.260 --> 00:02:57.510
OverlappingVerticalEdge.

00:03:01.970 --> 00:03:04.670
But what you'll end up
is this sort of test.

00:03:04.670 --> 00:03:07.210
So it can actually detect when
you have text that's running

00:03:07.210 --> 00:03:09.380
up against something
like an image or

00:03:09.380 --> 00:03:11.150
even overflowing here.

00:03:11.150 --> 00:03:13.610
And this is completely
automated, so on every commit,

00:03:13.610 --> 00:03:16.300
Finding Layout Bugs is going to
make sure that you do not

00:03:16.300 --> 00:03:19.370
have one of these problems
in your target browsers.

00:03:19.370 --> 00:03:22.110
Pretty cool.

00:03:22.110 --> 00:03:24.045
So you might be running this
inside Continuous Integration,

00:03:24.045 --> 00:03:26.280
and I've seen a lot of movement
here recently.

00:03:26.280 --> 00:03:28.850
Travis has kind of opened up
everyone's eyes in the open

00:03:28.850 --> 00:03:32.750
source world, as far as
what can be done here.

00:03:32.750 --> 00:03:37.920
This here is Travis running
the new Dojo 2 tests.

00:03:37.920 --> 00:03:43.050
And so actually, Travis pulled
down the latest Dojo 2 source,

00:03:43.050 --> 00:03:46.590
built out what it needed, and
then it connected up to Sauce

00:03:46.590 --> 00:03:50.210
Labs, and opened up a bunch of
desktop and mobile browsers,

00:03:50.210 --> 00:03:54.190
and ran the test suite of
Dojo 2 on all of them.

00:03:54.190 --> 00:03:56.700
Reported back, and now for every
single commit and every

00:03:56.700 --> 00:04:00.270
single pull request, we know
if we are looking good and

00:04:00.270 --> 00:04:01.520
green or not.

00:04:03.950 --> 00:04:05.930
Telemetry was mentioned
a little bit before.

00:04:05.930 --> 00:04:09.860
And I just wanted to give a
better idea of what it does

00:04:09.860 --> 00:04:10.950
and how it works.

00:04:10.950 --> 00:04:15.210
Unfortunately, it requires a
check out of the Chromium code

00:04:15.210 --> 00:04:17.200
base, which is about five gigs,
and I didn't want to

00:04:17.200 --> 00:04:18.279
pull that down on the Wi-Fi.

00:04:18.279 --> 00:04:21.149
So let me just talk it out.

00:04:21.149 --> 00:04:22.830
Telemetry would take something
like this page.

00:04:22.830 --> 00:04:25.290
Now, it's going to do something
like scroll the page

00:04:25.290 --> 00:04:27.950
down, and it's going
to pop back up and

00:04:27.950 --> 00:04:29.240
scroll it down again.

00:04:29.240 --> 00:04:31.570
While it did those two things,
it's going to be extracting a

00:04:31.570 --> 00:04:33.070
bunch of metrics from
the browser.

00:04:33.070 --> 00:04:34.110
Like what was the paint rate?

00:04:34.110 --> 00:04:37.240
How many million pixels per
second are being painted?

00:04:37.240 --> 00:04:39.260
What was the FPS?

00:04:39.260 --> 00:04:41.120
And now it's going to take all
these metrics and provide them

00:04:41.120 --> 00:04:41.730
to me in a nice way.

00:04:41.730 --> 00:04:44.300
And then I can take this and
plot it out against time or

00:04:44.300 --> 00:04:46.870
against all my commits and
see, are my performance

00:04:46.870 --> 00:04:49.010
thresholds being met
as the project is

00:04:49.010 --> 00:04:50.550
growing and as it's living?

00:04:50.550 --> 00:04:54.010
Or are me and my teammate adding
things to it that kill

00:04:54.010 --> 00:04:56.050
the visual performance?

00:04:56.050 --> 00:04:57.770
So there's a lot
of power here.

00:04:57.770 --> 00:04:59.940
Another project from
the Chromium

00:04:59.940 --> 00:05:01.990
team is called Endure.

00:05:01.990 --> 00:05:04.220
This is something where you
can write a test like, OK,

00:05:04.220 --> 00:05:06.410
open up Gmail, start
composing.

00:05:06.410 --> 00:05:07.890
Now discard.

00:05:07.890 --> 00:05:08.660
Start composing again.

00:05:08.660 --> 00:05:09.510
Discard.

00:05:09.510 --> 00:05:11.990
Repeat this for six hours.

00:05:11.990 --> 00:05:14.370
Now tell me what's up.

00:05:14.370 --> 00:05:17.420
So Endure will take this and
just handle the browser

00:05:17.420 --> 00:05:19.550
automation for you.

00:05:19.550 --> 00:05:22.370
And then it will give you back
some really fantastic insight

00:05:22.370 --> 00:05:26.320
on the memory consumption of
this application over time

00:05:26.320 --> 00:05:28.080
across a number of
different axes.

00:05:28.080 --> 00:05:31.610
So you're able to understand
if you're increasing in an

00:05:31.610 --> 00:05:34.840
uncontrollable way in your
memory situation.

00:05:34.840 --> 00:05:35.860
All right.

00:05:35.860 --> 00:05:39.620
Now, we've seen a lot of new
advancements when it comes to

00:05:39.620 --> 00:05:41.420
mobile and cross-device
testing.

00:05:41.420 --> 00:05:44.290
This was a project I bet a
number of you have seen called

00:05:44.290 --> 00:05:49.630
Remote Preview, where I can
navigate to a URL here on my

00:05:49.630 --> 00:05:53.150
machine, and all the browsers
follow my navigation.

00:05:53.150 --> 00:05:56.350
Adobe Edge Inspect also has
a similar functionality.

00:05:56.350 --> 00:05:57.020
And so it's cool.

00:05:57.020 --> 00:05:59.650
I got all these phones right
here, and they're just

00:05:59.650 --> 00:06:00.540
following me around.

00:06:00.540 --> 00:06:01.850
It's pretty fantastic.

00:06:01.850 --> 00:06:04.060
Mixture is another project.

00:06:04.060 --> 00:06:05.030
Does some fantastic things.

00:06:05.030 --> 00:06:07.720
It also does the same
thing, but on top of

00:06:07.720 --> 00:06:08.740
this, it will add--

00:06:08.740 --> 00:06:10.430
let's say there's a button.

00:06:10.430 --> 00:06:11.210
I click it.

00:06:11.210 --> 00:06:13.800
It pops up a dialogue, and
I close that dialogue.

00:06:13.800 --> 00:06:17.560
Mixture will do the same stuff
but actually repeat those same

00:06:17.560 --> 00:06:20.610
actions on all of these
devices as well.

00:06:20.610 --> 00:06:25.050
So not just navigation but
actual click events so you can

00:06:25.050 --> 00:06:27.640
see and verify that things are
occurring the way that you

00:06:27.640 --> 00:06:29.690
would expect.

00:06:29.690 --> 00:06:33.450
Now, I think it's cool to have
all this on devices that are

00:06:33.450 --> 00:06:33.990
next to you.

00:06:33.990 --> 00:06:37.070
But not everyone can afford all
the devices that you need

00:06:37.070 --> 00:06:38.450
to actually support.

00:06:38.450 --> 00:06:41.460
So we've been seeing things like
cloud browser testing.

00:06:41.460 --> 00:06:44.830
BrowserStack is one I think most
people are familiar with.

00:06:44.830 --> 00:06:50.650
And for mobile, they use
emulators, which is cool.

00:06:50.650 --> 00:06:53.560
DeviceAnywhere actually features
real devices, which

00:06:53.560 --> 00:06:54.290
is pretty cool.

00:06:54.290 --> 00:06:55.140
It's a paid service, though.

00:06:55.140 --> 00:06:58.760
They did just recently offer
this free service.

00:06:58.760 --> 00:07:03.640
So I'm opening up
an iPhone 4S.

00:07:03.640 --> 00:07:06.860
So this is actually a real
device, and I'm able to kind

00:07:06.860 --> 00:07:08.480
of play around with it--

00:07:08.480 --> 00:07:08.910
[INAUDIBLE]

00:07:08.910 --> 00:07:10.410
Google News--

00:07:10.410 --> 00:07:11.440
and click around.

00:07:11.440 --> 00:07:13.560
I can also do--

00:07:13.560 --> 00:07:18.790
let's see, I can mimic
a swipe and see that.

00:07:18.790 --> 00:07:21.560
And you can see that the
performance here is actually

00:07:21.560 --> 00:07:22.670
pretty good.

00:07:22.670 --> 00:07:25.350
It's telling me that
my latency is OK.

00:07:25.350 --> 00:07:28.010
And so this could actually even
get quite a bit better.

00:07:28.010 --> 00:07:30.570
But it's pretty fantastic to
connect to an actual device

00:07:30.570 --> 00:07:33.350
and get a better idea of
what my performance

00:07:33.350 --> 00:07:36.760
situation is on that.

00:07:36.760 --> 00:07:39.150
This is a project that is
totally alpha and has never

00:07:39.150 --> 00:07:42.180
really been shown at all.

00:07:42.180 --> 00:07:43.130
So I just want to FYI.

00:07:43.130 --> 00:07:45.205
It's got some rough edges,
but it's pretty cool.

00:07:45.205 --> 00:07:47.410
It's a project from some
engineers at Google.

00:07:47.410 --> 00:07:49.250
It's called Tracing Framework.

00:07:49.250 --> 00:07:54.120
And it's a bunch of analyses
for smoothness

00:07:54.120 --> 00:07:56.160
inside of the browser.

00:07:56.160 --> 00:07:58.670
And so the cool thing about it
is the instrumentation is

00:07:58.670 --> 00:08:01.200
written completely in
JavaScript, which means it

00:08:01.200 --> 00:08:04.630
runs in Chrome, Firefox,
IE, mobile

00:08:04.630 --> 00:08:06.290
browsers, and web views.

00:08:06.290 --> 00:08:08.180
So if you ever feel like you're
in a situation where

00:08:08.180 --> 00:08:11.110
you do not have the browser
tooling to give you enough

00:08:11.110 --> 00:08:13.800
insight in any of these
situations,

00:08:13.800 --> 00:08:15.190
check out Tracing Framework.

00:08:15.190 --> 00:08:18.410
Still, it's rough in alpha,
but it's worth a look.

00:08:18.410 --> 00:08:21.050
Now, this conversation wouldn't
be complete without

00:08:21.050 --> 00:08:24.200
talking about the dev tools
that are in the browser.

00:08:24.200 --> 00:08:26.440
And I wanted to show
a few things.

00:08:26.440 --> 00:08:29.190
The first up is Canvas
Inspection.

00:08:29.190 --> 00:08:31.390
And the cool thing is we've
never showed this before.

00:08:31.390 --> 00:08:32.890
And it's coming out.

00:08:32.890 --> 00:08:35.559
It's still kind of
an experiment.

00:08:35.559 --> 00:08:37.049
But I'm excited to show it.

00:08:37.049 --> 00:08:40.020
So I brought up here this
WebGL Aquarium.

00:08:40.020 --> 00:08:41.299
It's pretty cool.

00:08:41.299 --> 00:08:43.770
Now, when we're in Profiles, we
see Capture Canvas Frame.

00:08:43.770 --> 00:08:47.020
But I actually need to have the
dev tools open while this

00:08:47.020 --> 00:08:49.650
canvas is created.

00:08:49.650 --> 00:08:52.730
Now I'm going to capture
that frame.

00:08:52.730 --> 00:08:57.420
And up here, it looks like we
captured it at 4,300 calls to

00:08:57.420 --> 00:08:59.140
the context.

00:08:59.140 --> 00:09:01.360
And these are all the calls that
were made that changed

00:09:01.360 --> 00:09:02.220
the context.

00:09:02.220 --> 00:09:04.800
And I can step through
all of them.

00:09:04.800 --> 00:09:06.790
And what it's going to do is
it's going to replay all the

00:09:06.790 --> 00:09:08.410
calls up to this point.

00:09:08.410 --> 00:09:12.830
And I can set through
all the draw calls.

00:09:12.830 --> 00:09:14.430
Let's see.

00:09:14.430 --> 00:09:15.680
Give me some fishes.

00:09:18.060 --> 00:09:19.310
Fishes!

00:09:23.640 --> 00:09:24.890
Fish, fish.

00:09:27.700 --> 00:09:28.833
Yeah, good.

00:09:28.833 --> 00:09:29.660
Great.

00:09:29.660 --> 00:09:30.540
Fishes.

00:09:30.540 --> 00:09:34.220
So we're able to see
step-by-step as this frame is

00:09:34.220 --> 00:09:38.410
being constructed and correlate
that back to my

00:09:38.410 --> 00:09:41.630
actual code of what
was happening.

00:09:41.630 --> 00:09:44.460
So I can click over there and
see this, in fact, was making

00:09:44.460 --> 00:09:45.610
these draw calls.

00:09:45.610 --> 00:09:47.320
Now, I don't know if you guys
noticed this, but when I

00:09:47.320 --> 00:09:51.750
actually clicked from Profiles
over into the Sources panel,

00:09:51.750 --> 00:09:54.590
there was a little
bit of a delay.

00:09:54.590 --> 00:09:58.060
Now, let's say I actually want
to figure out why there's such

00:09:58.060 --> 00:09:59.620
a delay there.

00:09:59.620 --> 00:10:05.380
So first, I'm going to undock
this move over that guy, and I

00:10:05.380 --> 00:10:08.160
think you see what's happening
here is that I'm using the dev

00:10:08.160 --> 00:10:10.360
tools on the dev tools.

00:10:10.360 --> 00:10:13.230
I'm going to start a new
timeline, and I'm going to

00:10:13.230 --> 00:10:15.880
repeat this action.

00:10:15.880 --> 00:10:18.440
And there we go, capture that.

00:10:18.440 --> 00:10:20.550
So inside the timeline, we're
getting some good information

00:10:20.550 --> 00:10:22.500
on how long things like
paints, recalc

00:10:22.500 --> 00:10:24.250
styles are all taking.

00:10:24.250 --> 00:10:27.700
And over here on the left-hand
side, we can see this yellow.

00:10:27.700 --> 00:10:29.730
And this is my click event.

00:10:29.730 --> 00:10:31.820
And we can see that it
was pretty long.

00:10:31.820 --> 00:10:33.800
In this case, it
took almost 400

00:10:33.800 --> 00:10:35.720
milliseconds to complete that.

00:10:35.720 --> 00:10:38.251
Now why was that?

00:10:38.251 --> 00:10:39.540
Eesh.

00:10:39.540 --> 00:10:42.585
So you look over here, and you
see this is what happened

00:10:42.585 --> 00:10:43.410
inside that time.

00:10:43.410 --> 00:10:45.570
We got a lot of Recalculate
Style and Layout, and Recalc

00:10:45.570 --> 00:10:47.120
Style, Layout.

00:10:47.120 --> 00:10:48.650
And this is what we were talking
about before when we

00:10:48.650 --> 00:10:53.290
were talking about excess
reflows, layout thrashing.

00:10:53.290 --> 00:10:57.470
Layout and reflow are the same
thing across browsers.

00:10:57.470 --> 00:10:59.300
But this is a bad situation.

00:10:59.300 --> 00:11:00.630
This is a pattern you
want to avoid.

00:11:00.630 --> 00:11:01.950
And the cool thing here
is the dev tools are

00:11:01.950 --> 00:11:03.240
actually telling you this.

00:11:03.240 --> 00:11:05.980
There's a little indicator that
says you might have a

00:11:05.980 --> 00:11:08.040
problem. "Forced synchronous
layer is a possible

00:11:08.040 --> 00:11:09.970
performance bottleneck." And
the fact that we're seeing

00:11:09.970 --> 00:11:13.010
this nonstop back and forth
means there's probably an

00:11:13.010 --> 00:11:14.960
ability to optimize.

00:11:14.960 --> 00:11:17.855
So Pavel, you should
probably optimize

00:11:17.855 --> 00:11:21.210
this in the dev tools.

00:11:21.210 --> 00:11:22.850
Sounds good.

00:11:22.850 --> 00:11:24.310
All right.

00:11:24.310 --> 00:11:27.950
So a lot of times, there is
a problem with paint.

00:11:27.950 --> 00:11:30.490
Paint is consuming a lot of
time, and it's a little hard

00:11:30.490 --> 00:11:32.420
to get a feel for
what's going on.

00:11:32.420 --> 00:11:34.840
So earlier in some talks, they
brought up continuous page

00:11:34.840 --> 00:11:40.940
repainting, and I want to show
what that looks like.

00:11:40.940 --> 00:11:42.750
Let's try this guy.

00:11:42.750 --> 00:11:45.120
Yeah, cool.

00:11:45.120 --> 00:11:47.663
All right, bringing back the dev
tools, I'm going to dock

00:11:47.663 --> 00:11:49.010
them again.

00:11:49.010 --> 00:11:51.530
And over here in the settings,
I'm going to turn on

00:11:51.530 --> 00:11:53.860
continuous page repainting.

00:11:53.860 --> 00:11:57.390
So up here, we get an idea of
how long it's taking to paint

00:11:57.390 --> 00:11:58.890
this page right here.

00:11:58.890 --> 00:12:02.910
So let's say right now it's
taking about 15 milliseconds.

00:12:02.910 --> 00:12:05.880
But first, I'm going to go over
here, and I'm going to

00:12:05.880 --> 00:12:07.350
turn off some of the styles.

00:12:07.350 --> 00:12:10.445
So on each of these little
Chrome logos, I got a box

00:12:10.445 --> 00:12:11.580
shadow and a border radius.

00:12:11.580 --> 00:12:12.965
I'm going to clear those off.

00:12:12.965 --> 00:12:16.050
And my paint time jumps
down, which is good.

00:12:16.050 --> 00:12:17.780
It's much cheaper to
paint this page.

00:12:17.780 --> 00:12:20.090
Now, the interesting thing here
is that because I have

00:12:20.090 --> 00:12:22.960
this live feedback and kind of
play around, I can see what is

00:12:22.960 --> 00:12:24.980
contributing to long paints.

00:12:24.980 --> 00:12:28.440
So if I add on border radius,
you can see it jumped up from

00:12:28.440 --> 00:12:32.010
about twos and threes up
to the fours and fives.

00:12:32.010 --> 00:12:32.970
Cool.

00:12:32.970 --> 00:12:36.310
Take that off and put on box
shadow, which is normally kind

00:12:36.310 --> 00:12:37.880
of expensive, you hear.

00:12:37.880 --> 00:12:41.750
But my paint time is actually
pretty reasonable.

00:12:41.750 --> 00:12:43.130
But check this out.

00:12:43.130 --> 00:12:44.380
I add both of them--

00:12:46.880 --> 00:12:48.460
ooh--

00:12:48.460 --> 00:12:50.770
and my paint time just
went up to about 20

00:12:50.770 --> 00:12:53.660
milliseconds per frame.

00:12:53.660 --> 00:12:56.820
And so I get great feedback
here on what is actually

00:12:56.820 --> 00:12:57.390
contributing.

00:12:57.390 --> 00:13:01.300
It turns out that by themselves,
these styles,

00:13:01.300 --> 00:13:02.390
they're pretty cheap.

00:13:02.390 --> 00:13:05.600
But in combination, the browser
takes a little bit of

00:13:05.600 --> 00:13:07.980
time on it.

00:13:07.980 --> 00:13:11.080
Now, painting can be expensive,
and there's a lot

00:13:11.080 --> 00:13:13.010
that could be done.

00:13:13.010 --> 00:13:16.405
And I wanted to show one thing
that has been done recently.

00:13:16.405 --> 00:13:17.670
So--

00:13:17.670 --> 00:13:18.480
cool.

00:13:18.480 --> 00:13:23.360
This right here is Chrome
for Android stable.

00:13:23.360 --> 00:13:26.880
And so we have an article
on HTML5 Rocks.

00:13:26.880 --> 00:13:30.590
And now what I'm going to do
is just scroll the page.

00:13:30.590 --> 00:13:31.250
Scroll.

00:13:31.250 --> 00:13:31.750
There we go.

00:13:31.750 --> 00:13:32.900
Cool.

00:13:32.900 --> 00:13:37.100
And you see I'm scrolling down,
and the browser kind of

00:13:37.100 --> 00:13:38.390
catches up.

00:13:38.390 --> 00:13:41.930
But for a little while,
the page is blank.

00:13:41.930 --> 00:13:44.260
And then it comes in.

00:13:44.260 --> 00:13:47.660
So it's probably not optimal.

00:13:47.660 --> 00:13:50.010
We just added a new thing to
Chrome on Android called

00:13:50.010 --> 00:13:52.080
multi-threaded painting.

00:13:52.080 --> 00:13:55.820
And so here--

00:13:55.820 --> 00:13:57.780
so this is Chrome for
Android beta.

00:13:57.780 --> 00:14:00.090
You can get this from
Google Play.

00:14:00.090 --> 00:14:05.740
Now if I scroll, I think you
see that there's no white.

00:14:05.740 --> 00:14:06.290
That's cool.

00:14:06.290 --> 00:14:07.210
Another thing--

00:14:07.210 --> 00:14:09.430
you might be able to see it--
is the text actually gets a

00:14:09.430 --> 00:14:11.790
little blurry when this
is going too fast.

00:14:11.790 --> 00:14:15.620
And we have low-res tiles that
are in place just in case

00:14:15.620 --> 00:14:17.940
you're moving really, really
fast, that it will resolve to

00:14:17.940 --> 00:14:20.380
the crisp picture that
you're looking for.

00:14:20.380 --> 00:14:23.090
So this actual painting is
happening on a separate

00:14:23.090 --> 00:14:26.390
thread, which is pretty cool,
one, for the performance

00:14:26.390 --> 00:14:30.340
benefit, but two, for speed.

00:14:30.340 --> 00:14:31.850
Over here, this is
about tracing.

00:14:31.850 --> 00:14:35.000
I think this has been mentioned
before as well.

00:14:35.000 --> 00:14:36.370
Here, we get kind of--

00:14:36.370 --> 00:14:38.270
I mean, this looks
intimidating.

00:14:38.270 --> 00:14:42.870
And it is, but there's good
ways to read these things.

00:14:42.870 --> 00:14:45.920
So right now, I'm zooming in
on the RendererMain thread.

00:14:45.920 --> 00:14:47.270
This is the UI thread.

00:14:47.270 --> 00:14:50.910
This is the "don't block
this thread" thread.

00:14:50.910 --> 00:14:52.280
There's a lot of other parts
in the browser, like the

00:14:52.280 --> 00:14:56.150
compositor up here, but I'm
going to jump in to this guy

00:14:56.150 --> 00:14:56.970
and zoom in.

00:14:56.970 --> 00:15:00.530
And down here, we've
got a few things.

00:15:00.530 --> 00:15:01.440
V8.callFunction.

00:15:01.440 --> 00:15:02.300
This is JavaScript.

00:15:02.300 --> 00:15:04.410
JavaScript is running
right now.

00:15:04.410 --> 00:15:07.520
And then, all of a sudden,
we hit Picture Record.

00:15:07.520 --> 00:15:13.090
So this is a capture from Chrome
Canary on desktop doing

00:15:13.090 --> 00:15:14.760
multi-threaded painting.

00:15:14.760 --> 00:15:16.690
And this Picture Record is
actually recording all the

00:15:16.690 --> 00:15:19.500
draw calls that are coming
into Chrome.

00:15:19.500 --> 00:15:21.020
And Chrome is like, OK, I've
got all these draws.

00:15:21.020 --> 00:15:22.830
Here they are.

00:15:22.830 --> 00:15:23.500
I'm going to pass it up
to the compositor.

00:15:23.500 --> 00:15:25.980
The compositors are like, cool,
I'm going to spawn off a

00:15:25.980 --> 00:15:28.170
new thread that's
CompositorWorker, and he's

00:15:28.170 --> 00:15:30.040
going to take care
of this for you.

00:15:30.040 --> 00:15:33.450
So CompositorWorker right here,
he's doing the paint.

00:15:33.450 --> 00:15:36.310
This paint raster right here
is the actual paints.

00:15:36.310 --> 00:15:39.230
And what this means is because
this is on a separate thread,

00:15:39.230 --> 00:15:42.950
I can now be executing
JavaScript at the same time.

00:15:42.950 --> 00:15:45.140
So here we are in v8, executing
JavaScript at the

00:15:45.140 --> 00:15:47.050
same time as I'm doing paints.

00:15:47.050 --> 00:15:49.000
We haven't been able to do
this before, but now it's

00:15:49.000 --> 00:15:49.710
finally happening.

00:15:49.710 --> 00:15:52.330
I'm really excited about that.

00:15:52.330 --> 00:15:56.310
All right, the last thing I just
want to mention is I'm

00:15:56.310 --> 00:15:58.170
not going to demo Remote
Debugging, but everything that

00:15:58.170 --> 00:16:02.800
I showed is available, just
the same thing, just

00:16:02.800 --> 00:16:05.130
connecting on here.

00:16:05.130 --> 00:16:08.430
Really fantastic, because the
performance characteristics on

00:16:08.430 --> 00:16:12.620
a device with hardware that is
so different as a laptop is

00:16:12.620 --> 00:16:14.660
something that you really want
to be very mindful of as

00:16:14.660 --> 00:16:17.680
you're developing all
these experiences.

00:16:17.680 --> 00:16:21.840
Lastly, a few trends I think
I've been witnessing and will

00:16:21.840 --> 00:16:24.070
continue in 2013.

00:16:24.070 --> 00:16:26.040
We're seeing a rise of people
leveraging Continuous

00:16:26.040 --> 00:16:28.790
Integration, not just for
running things like unit tests

00:16:28.790 --> 00:16:30.500
but also making sure that
there's no performance

00:16:30.500 --> 00:16:32.960
regressions as the project
is built out.

00:16:32.960 --> 00:16:35.300
Things like people are focusing
on a better mobile

00:16:35.300 --> 00:16:39.820
debugging workflow and making
sure that for throwing tests

00:16:39.820 --> 00:16:44.440
on there, getting tests out of
it, and seeing their work,

00:16:44.440 --> 00:16:46.570
that everything is working
very nicely.

00:16:46.570 --> 00:16:49.060
A bigger adoption of using
dependency management, not

00:16:49.060 --> 00:16:51.820
just for third-party libraries
but also for your own

00:16:51.820 --> 00:16:54.140
application code, and people
being very mindful of

00:16:54.140 --> 00:16:57.440
performance from the beginning
of the project so that a

00:16:57.440 --> 00:17:00.110
project can sail nicely from
these devices to these

00:17:00.110 --> 00:17:04.640
devices, and all your
users are happy.

00:17:04.640 --> 00:17:07.680
That's it for this little
opener, and let's

00:17:07.680 --> 00:17:09.158
get into the panel.

00:17:09.158 --> 00:17:15.990
[APPLAUSE]

00:17:15.990 --> 00:17:17.240
IVAN ZUZAK: That's awesome.

00:17:20.390 --> 00:17:23.130
[INAUDIBLE].

00:17:23.130 --> 00:17:25.090
PAUL IRISH: I do.

00:17:25.090 --> 00:17:27.384
IVAN ZUZAK: OK, that's
all we have as intro.

00:17:35.440 --> 00:17:38.870
So there is, like, 30 questions
on Moderator--

00:17:38.870 --> 00:17:39.330
33.

00:17:39.330 --> 00:17:42.500
And let's just try to
get as much through.

00:18:01.090 --> 00:18:06.280
So the first question that
[INAUDIBLE], also from Google

00:18:06.280 --> 00:18:10.440
Chrome Developer Relations put
on Moderator was, mobile is a

00:18:10.440 --> 00:18:14.540
big focus for developers
this year.

00:18:14.540 --> 00:18:17.250
So what do you see as being the
biggest pain points in the

00:18:17.250 --> 00:18:18.280
mobile test--

00:18:18.280 --> 00:18:19.840
mobile tooling landscape?

00:18:19.840 --> 00:18:23.160
And I think everyone can just
chip in what they think.

00:18:23.160 --> 00:18:24.410
So let's start from Remy.

00:18:27.485 --> 00:18:31.420
REMY SHARP: The other browsers
is the big pain point for me

00:18:31.420 --> 00:18:33.030
at the moment.

00:18:33.030 --> 00:18:38.380
The fact that I've got Dev Tools
on Android is amazing.

00:18:38.380 --> 00:18:45.610
But then I have to use Safari,
and that's horrible for me.

00:18:45.610 --> 00:18:47.790
And that has kind of
set me up to--

00:18:47.790 --> 00:18:51.180
I've started a project
in my company--

00:18:51.180 --> 00:18:54.660
very, very early days-- where
I'm trying to get the point,

00:18:54.660 --> 00:18:58.010
ultimately, to just use Dev
Tools to debug every single

00:18:58.010 --> 00:19:00.940
mobile platform--

00:19:00.940 --> 00:19:06.170
Safari, Firefox, Opera, Chrome,
Windows, all of them--

00:19:06.170 --> 00:19:07.860
using the debugger protocol.

00:19:07.860 --> 00:19:12.540
And it's not so much of an
automation tool, and it's

00:19:12.540 --> 00:19:15.900
having the hardware there but
using just Dev Tools to go in

00:19:15.900 --> 00:19:19.880
and do that micro debugging, but
have one familiar tool and

00:19:19.880 --> 00:19:22.000
just debug the other tools.

00:19:22.000 --> 00:19:24.410
I hate working with Safari's
remote debugger.

00:19:24.410 --> 00:19:27.410
It's great that we've got it,
but I really, really struggle

00:19:27.410 --> 00:19:28.910
with the tool.

00:19:28.910 --> 00:19:34.630
So the pain point, for me, is
it just kind of exposes how

00:19:34.630 --> 00:19:36.470
bad the other dev tools are.

00:19:36.470 --> 00:19:39.270
IE 10 mobile, that's
a great browser.

00:19:39.270 --> 00:19:40.520
But where are the dev tools?

00:19:43.360 --> 00:19:45.934
SIMON STEWART: OK.

00:19:45.934 --> 00:19:51.290
So the desktop world was
surprisingly simple, entirely

00:19:51.290 --> 00:19:52.440
by accident.

00:19:52.440 --> 00:19:54.620
But it was surprisingly
simple.

00:19:54.620 --> 00:19:57.390
We only had web apps running
in a browser,

00:19:57.390 --> 00:19:58.750
and that was fine.

00:19:58.750 --> 00:20:03.120
The mobile world, because the
devices are underpowered, and

00:20:03.120 --> 00:20:05.800
they're a little bit puny, and
Moore's Law is helping, but

00:20:05.800 --> 00:20:08.360
they are improving.

00:20:08.360 --> 00:20:11.820
The apps we get when we need
to test aren't just

00:20:11.820 --> 00:20:12.710
running in a browser.

00:20:12.710 --> 00:20:14.990
They're running in web views
contained within the native

00:20:14.990 --> 00:20:16.070
application.

00:20:16.070 --> 00:20:18.940
And you need to be able to test
the communication between

00:20:18.940 --> 00:20:21.000
the native part of the app in
the web part of the app, and

00:20:21.000 --> 00:20:22.250
the web part in the
native part.

00:20:22.250 --> 00:20:23.520
And who knows, right?

00:20:23.520 --> 00:20:26.180
It's a complete nightmare.

00:20:26.180 --> 00:20:29.980
So not only do we have a more
complex testing environment to

00:20:29.980 --> 00:20:32.630
begin with, the tooling
just isn't there.

00:20:32.630 --> 00:20:36.260
It's still early days.

00:20:36.260 --> 00:20:38.800
There are very few tools out
there that can actually be

00:20:38.800 --> 00:20:42.820
used to test a hybrid
application successfully and

00:20:42.820 --> 00:20:47.730
in a way that won't cause your
developers to scream at you in

00:20:47.730 --> 00:20:50.880
just pure rage and
frustration.

00:20:50.880 --> 00:20:54.530
We'll get there one day, but
that's the main pain point,

00:20:54.530 --> 00:20:57.761
just that the tooling
isn't there.

00:20:57.761 --> 00:21:01.940
DAVID BLOOMAN: Yeah, similar
to Remy, but [INAUDIBLE].

00:21:09.260 --> 00:21:12.310
I don't like Safari at all,
so I don't use it.

00:21:12.310 --> 00:21:16.050
But the generic Web Inspector
Remote has been quite

00:21:16.050 --> 00:21:19.170
successful, quite
useful for me.

00:21:19.170 --> 00:21:21.350
But that's only for
WebKit browsers.

00:21:21.350 --> 00:21:22.570
But what about everything
else?

00:21:22.570 --> 00:21:25.790
And things like BlackBerrys,
which are still very high

00:21:25.790 --> 00:21:28.150
usage and something like News
is very difficult to do

00:21:28.150 --> 00:21:29.390
anything with.

00:21:29.390 --> 00:21:33.025
And then automations, iOS and
Android are pretty much the

00:21:33.025 --> 00:21:33.730
only two platforms.

00:21:33.730 --> 00:21:35.830
So you're stuck with them.

00:21:35.830 --> 00:21:38.880
Even the new platforms, like
BlackBerry, how do you even

00:21:38.880 --> 00:21:41.090
approach them with no tools?

00:21:41.090 --> 00:21:42.380
You can't do much with them.

00:21:42.380 --> 00:21:45.080
So there's a lot lacking.

00:21:45.080 --> 00:21:49.610
And hopefully, some nice people
will come along and

00:21:49.610 --> 00:21:52.900
build something new, and
the tools will mature.

00:21:52.900 --> 00:21:55.320
But there are still the legacy
browsers and operating systems

00:21:55.320 --> 00:21:57.390
that we're going to have to
deal with for a long time.

00:21:57.390 --> 00:21:59.960
So tooling is going to get
better, but it's also going to

00:21:59.960 --> 00:22:01.470
stay bad at the same time.

00:22:04.440 --> 00:22:08.370
PAUL IRISH: I would say one part
of this is that I think a

00:22:08.370 --> 00:22:11.730
lot of developers' workflow for
their mobile testing is

00:22:11.730 --> 00:22:13.300
extremely manual.

00:22:13.300 --> 00:22:17.630
It is a matter of putting up the
newest version on stage,

00:22:17.630 --> 00:22:21.460
hitting Refresh, seeing,
exploring, then going to the

00:22:21.460 --> 00:22:23.950
next device that has the
viewport that they care about,

00:22:23.950 --> 00:22:25.730
and hitting Refresh,
testing that.

00:22:25.730 --> 00:22:28.300
And I think it's just
really slow.

00:22:28.300 --> 00:22:30.500
And there's a lot of existing
solutions that can totally

00:22:30.500 --> 00:22:31.520
improve that.

00:22:31.520 --> 00:22:34.850
And I think that's worth
looking into.

00:22:34.850 --> 00:22:37.010
The other part that I think is
important-- and I mentioned

00:22:37.010 --> 00:22:41.630
this in the opening, which is
that I don't think every

00:22:41.630 --> 00:22:45.040
developer can afford all the
devices that they need to be

00:22:45.040 --> 00:22:47.330
testing on.

00:22:47.330 --> 00:22:51.580
I mean, the Remote Debugging
capability that we're seeing

00:22:51.580 --> 00:22:53.960
is very important when you
have the device there.

00:22:53.960 --> 00:22:59.700
But I do think that
having access to--

00:22:59.700 --> 00:23:04.200
being able to run your
application in these mobile

00:23:04.200 --> 00:23:05.350
devices that you don't actually

00:23:05.350 --> 00:23:06.860
own is really important.

00:23:06.860 --> 00:23:10.600
So I'm looking forward to seeing
how we can solve that.

00:23:10.600 --> 00:23:11.902
Yeah.

00:23:11.902 --> 00:23:15.810
IVAN ZUZAK: Great OK,
so let's continue.

00:23:15.810 --> 00:23:18.840
The question is, what are
currently the best tools and

00:23:18.840 --> 00:23:22.280
workflows for testing and
debugging mobile devices?

00:23:22.280 --> 00:23:25.534
And I think David
can start this.

00:23:25.534 --> 00:23:29.760
DAVID BLOOMAN: Yeah,
so I've tried to--

00:23:29.760 --> 00:23:32.990
in my role at the BBC, tried to
just use as many tools as I

00:23:32.990 --> 00:23:36.000
can, really, to get the best
out of all our devices.

00:23:36.000 --> 00:23:40.530
But as you said, it's a
very manual process

00:23:40.530 --> 00:23:42.370
a lot of the time.

00:23:42.370 --> 00:23:46.270
But we've implemented, recently,
the CSS Regression

00:23:46.270 --> 00:23:50.705
Testing, which internally we
call a "snappy snaps." So it

00:23:50.705 --> 00:23:53.880
will capture two images
of two domains.

00:23:53.880 --> 00:23:59.060
So we use a stage and a live
environment, every

00:23:59.060 --> 00:24:01.520
[? resolution ?] we really want,
and then various asset

00:24:01.520 --> 00:24:05.040
types, so front page and story
pages, and then compare them

00:24:05.040 --> 00:24:08.570
using ImageMagick to output a
[? DIF ?] image, which you can

00:24:08.570 --> 00:24:09.060
then review.

00:24:09.060 --> 00:24:13.220
So you can test a massive amount
of pages of different

00:24:13.220 --> 00:24:16.300
resolutions very quickly and
identify the differences and

00:24:16.300 --> 00:24:18.220
then collaboratively decide
how you want to

00:24:18.220 --> 00:24:19.280
move on from there.

00:24:19.280 --> 00:24:22.150
So there are tools like that
that really just cut down the

00:24:22.150 --> 00:24:25.470
amount of manual testing you can
do, because you can just

00:24:25.470 --> 00:24:27.530
automate a lot of it.

00:24:27.530 --> 00:24:30.190
ImageMagick is a very powerful
tool, so you can use

00:24:30.190 --> 00:24:31.440
percentage differences,
as well.

00:24:31.440 --> 00:24:34.375
So it's just a series of numbers
that come out, and you

00:24:34.375 --> 00:24:38.610
know whether you've got
huge CSS regressions.

00:24:38.610 --> 00:24:41.215
And again, tools like Web
Inspector Remote and Remote

00:24:41.215 --> 00:24:44.150
Debugging on Android, especially
of picking up

00:24:44.150 --> 00:24:48.492
networking things, like are we
making sure that stats are

00:24:48.492 --> 00:24:52.860
being recorded over the Chrome
Dev Tools is so important.

00:24:52.860 --> 00:24:57.510
And using those tools has been
really beneficial for us.

00:24:57.510 --> 00:25:00.210
There are other tools, like
Remote Preview and Adobe

00:25:00.210 --> 00:25:01.900
Shadow, which you can use.

00:25:01.900 --> 00:25:06.690
But the things is that Adobe
Shadow or Edge Inspect is a

00:25:06.690 --> 00:25:07.600
costly one.

00:25:07.600 --> 00:25:10.170
And I think that's where the
cost element is quite

00:25:10.170 --> 00:25:11.660
difficult in mobile
[? responsive ?]

00:25:11.660 --> 00:25:15.410
because you need all the devices
in a lot of cases, and

00:25:15.410 --> 00:25:19.250
financially, it's impossible to
have for an independent or

00:25:19.250 --> 00:25:20.750
small company.

00:25:20.750 --> 00:25:23.810
BrowserStack is a good option.

00:25:23.810 --> 00:25:30.030
And I haven't really looked into
TestPlant, but it's an

00:25:30.030 --> 00:25:31.552
option as well.

00:25:31.552 --> 00:25:33.920
But there are some good tools.

00:25:33.920 --> 00:25:37.460
I think if you're interested,
there's a great amount of

00:25:37.460 --> 00:25:40.840
tools on RGA Online, a site
which will point you in the

00:25:40.840 --> 00:25:41.325
right direction.

00:25:41.325 --> 00:25:42.430
IVAN ZUZAK: Great.

00:25:42.430 --> 00:25:45.590
Simon, what can you tell
us about WebDriver?

00:25:45.590 --> 00:25:47.640
SIMON STEWART: Yeah,
WebDriver.

00:25:47.640 --> 00:25:51.350
So tools for doing testing
on mobile.

00:25:51.350 --> 00:25:54.480
The first thing I was going to
suggest was it isn't that

00:25:54.480 --> 00:25:56.970
different from being on
the desktop, right?

00:25:56.970 --> 00:25:59.810
So you could use all the
JavaScript frameworks that are

00:25:59.810 --> 00:26:02.370
already out there, things like
Jasmine, for example, if

00:26:02.370 --> 00:26:07.130
you're a BDD fan, still work
in a mobile browser.

00:26:07.130 --> 00:26:09.990
And a mobile browser nowadays
runs on a device that has the

00:26:09.990 --> 00:26:14.760
same power as the old G5 Macs
that people used to do their

00:26:14.760 --> 00:26:16.170
development on.

00:26:16.170 --> 00:26:18.640
We think of them as underpowered
devices.

00:26:18.640 --> 00:26:20.240
They're enormously
capable, and they

00:26:20.240 --> 00:26:21.590
keep on getting faster.

00:26:21.590 --> 00:26:25.230
So you could keep
on doing that.

00:26:25.230 --> 00:26:27.480
I obviously have a
vested interest.

00:26:27.480 --> 00:26:29.360
I am the lead of the
Selenium project.

00:26:29.360 --> 00:26:30.670
I invented WebDriver.

00:26:30.670 --> 00:26:33.580
We're standardizing
that with the W3C.

00:26:33.580 --> 00:26:36.960
Hopefully, the best way to test
mobile browsers will be

00:26:36.960 --> 00:26:41.220
to use the WebDriver APIs, which
will enable you to do

00:26:41.220 --> 00:26:44.070
all sorts of fun things,
particularly from the point of

00:26:44.070 --> 00:26:46.930
view of automating a browser
from a user's perspective.

00:26:46.930 --> 00:26:50.010
Go to this page, click on this
link, execute this piece of

00:26:50.010 --> 00:26:50.900
JavaScript.

00:26:50.900 --> 00:26:54.070
Now let me see what the text is
on the page as a user would

00:26:54.070 --> 00:26:57.180
see it, which is an enormously
powerful thing to do.

00:26:57.180 --> 00:27:00.850
And I've been on projects
where we've had those

00:27:00.850 --> 00:27:04.220
end-to-end tests, smaller
integration tests, unit tests,

00:27:04.220 --> 00:27:07.510
realize that we've made some
fundamental failures in the

00:27:07.510 --> 00:27:09.820
architecture of the application,
thrown away every

00:27:09.820 --> 00:27:13.100
test apart from the WebDriver
tests, and rebuilt everything

00:27:13.100 --> 00:27:14.680
just using those.

00:27:14.680 --> 00:27:18.900
So if you write them well,
they can work.

00:27:18.900 --> 00:27:22.040
If I was going to name
frameworks, obviously Selenium

00:27:22.040 --> 00:27:23.920
is probably one that I
would rush out and

00:27:23.920 --> 00:27:26.510
download right now.

00:27:26.510 --> 00:27:30.310
I'm biased, though,
so that's OK.

00:27:30.310 --> 00:27:32.780
For mobile, it might be worth
having a look at a thing

00:27:32.780 --> 00:27:36.630
called iOS Driver, which is
written by Francois Reynaud,

00:27:36.630 --> 00:27:39.940
who is working at eBay.

00:27:39.940 --> 00:27:44.110
And Sauce Labs recently put a
lot of weight behind a project

00:27:44.110 --> 00:27:45.570
called Appium.

00:27:45.570 --> 00:27:48.760
So if you go to saucelabs.com
and take a look for Appium on

00:27:48.760 --> 00:27:51.050
their site, you'll be
able to find it.

00:27:51.050 --> 00:27:53.230
Both of those are for iOS.

00:27:53.230 --> 00:27:57.210
And they allow you to test
native apps, hybrid apps, and

00:27:57.210 --> 00:27:58.880
just plain web apps, as well.

00:27:58.880 --> 00:28:00.390
So that's pretty cool.

00:28:00.390 --> 00:28:04.860
On the Android platform, I think
it's still fair game.

00:28:04.860 --> 00:28:07.920
There will be something that
uses UI automation.

00:28:07.920 --> 00:28:10.330
And there's going to be a period
of about a year, two

00:28:10.330 --> 00:28:13.010
years, while people
go, what about the

00:28:13.010 --> 00:28:14.410
older versions of Android?

00:28:14.410 --> 00:28:15.450
They're still really popular.

00:28:15.450 --> 00:28:17.310
And then people will realize
that it's a pain in the

00:28:17.310 --> 00:28:19.340
backside to test those things.

00:28:19.340 --> 00:28:23.510
And time will be on our side,
and hopefully, we'll only have

00:28:23.510 --> 00:28:29.190
ICS and above in about 50 years
of something, in the way

00:28:29.190 --> 00:28:30.930
that Android is updating.

00:28:30.930 --> 00:28:32.900
But it'll happen eventually,
and that will

00:28:32.900 --> 00:28:35.975
be extremely cool.

00:28:35.975 --> 00:28:37.460
IVAN ZUZAK: Want to add
something, Remy?

00:28:37.460 --> 00:28:41.110
REMY SHARP: Yeah, I'm
more in the kind of

00:28:41.110 --> 00:28:42.080
debugging end of things.

00:28:42.080 --> 00:28:47.270
So actually, for a project that
we are releasing for a

00:28:47.270 --> 00:28:50.840
client literally Friday, we're
trying to get the last style

00:28:50.840 --> 00:28:51.430
changes in.

00:28:51.430 --> 00:28:56.240
And we've got this iPad Mini,
and what I ended up doing was

00:28:56.240 --> 00:29:01.140
using Dev Tools in Chrome,
having it save as I was making

00:29:01.140 --> 00:29:04.390
changes to the local disk, and
then I had LiveReload just

00:29:04.390 --> 00:29:05.310
sitting on there.

00:29:05.310 --> 00:29:08.770
And the UX guy was sat next
to me with the iPad.

00:29:08.770 --> 00:29:11.540
And he was like, OK, just
tweak this color.

00:29:11.540 --> 00:29:13.290
I'd tweak it on my desktop.

00:29:13.290 --> 00:29:15.730
And in the inspector, I'm
changing the color and

00:29:15.730 --> 00:29:21.580
releasing, and it's immediately
on the iPad Mini.

00:29:21.580 --> 00:29:30.250
Which for me, getting away
from coding, saving,

00:29:30.250 --> 00:29:32.970
switching, hitting Refresh,
going to the device, hitting

00:29:32.970 --> 00:29:35.280
Refresh, that's where I
live at the moment.

00:29:35.280 --> 00:29:37.970
And the closer I get to actually
using the browser as

00:29:37.970 --> 00:29:41.550
my development--

00:29:41.550 --> 00:29:43.722
an IDE by IDE--

00:29:43.722 --> 00:29:44.890
the happier I get.

00:29:44.890 --> 00:29:48.110
And I'm really impatient.

00:29:48.110 --> 00:29:49.380
I want that feedback.

00:29:49.380 --> 00:29:50.280
I want to know now.

00:29:50.280 --> 00:29:54.210
And I want it all reloading
live, and my workflow is

00:29:54.210 --> 00:29:56.502
getting really, really
close to that.

00:29:56.502 --> 00:29:59.393
And I see some of my guys
working, using--

00:29:59.393 --> 00:30:02.795
in JS Bin, we've got a remote
rendering feature in it so you

00:30:02.795 --> 00:30:05.400
can code away, and it will just
automatically update on

00:30:05.400 --> 00:30:05.870
the device.

00:30:05.870 --> 00:30:07.440
And I see them actually using
that as well, which is really

00:30:07.440 --> 00:30:10.150
cool for me.

00:30:10.150 --> 00:30:12.370
But yeah, basically, immediacy,
that's what

00:30:12.370 --> 00:30:13.275
[INAUDIBLE].

00:30:13.275 --> 00:30:16.420
IVAN ZUZAK: So there's this
question from Addy again.

00:30:16.420 --> 00:30:20.290
And he says, seeing browser
developer tools flourish into

00:30:20.290 --> 00:30:23.160
fully blown editors
is very exciting.

00:30:23.160 --> 00:30:26.990
And at what point should we stop
pushing the envelope and

00:30:26.990 --> 00:30:28.820
suggest developers use
their own tools?

00:30:28.820 --> 00:30:32.800
So do you think that will
happen, or will we push the

00:30:32.800 --> 00:30:36.730
envelope far and beyond and
use browser dev tools for

00:30:36.730 --> 00:30:38.760
everything?

00:30:38.760 --> 00:30:42.200
REMY SHARP: For me, personally,
I'm much more

00:30:42.200 --> 00:30:46.110
towards the end of using the
browser as close as--

00:30:46.110 --> 00:30:49.980
I want to get the output, the
rendered page, and what I'm

00:30:49.980 --> 00:30:52.240
typing as close as possible.

00:30:52.240 --> 00:30:55.180
I'm typing, I want to see
the output immediately.

00:30:55.180 --> 00:30:58.420
If it lives inside of the
IDE itself, then fine.

00:30:58.420 --> 00:30:58.890
But at the moment.

00:30:58.890 --> 00:31:02.586
Dev Tools is kind of ticking
that box for me.

00:31:02.586 --> 00:31:05.010
IVAN ZUZAK: So are there any
key parts that are missing

00:31:05.010 --> 00:31:11.520
from dev tools currently for
any browser for you?

00:31:11.520 --> 00:31:13.160
REMY SHARP: The testing,
for me.

00:31:16.560 --> 00:31:17.210
Event proxying--

00:31:17.210 --> 00:31:19.080
that's something I mentioned.

00:31:19.080 --> 00:31:20.743
SIMON STEWART: That's
in WebDriver.

00:31:20.743 --> 00:31:21.670
REMY SHARP: What's that?

00:31:21.670 --> 00:31:24.482
SIMON STEWART: WebDriver's
got that.

00:31:24.482 --> 00:31:26.310
REMY SHARP: I haven't
seen WebDriver.

00:31:26.310 --> 00:31:29.481
SIMON STEWART: It's being
standardized.

00:31:29.481 --> 00:31:33.270
REMY SHARP: So one thing that's
missing for me is I

00:31:33.270 --> 00:31:35.570
don't want to type in a lat-long
to be able to emulate

00:31:35.570 --> 00:31:36.220
geolocation.

00:31:36.220 --> 00:31:38.020
I want my phone to
give it to me.

00:31:38.020 --> 00:31:39.450
The accelerometer, I
want that to feed

00:31:39.450 --> 00:31:42.176
straight into the desktop.

00:31:42.176 --> 00:31:46.395
I know Paul and Addy
have hinted at, or

00:31:46.395 --> 00:31:49.376
might mention something.

00:31:49.376 --> 00:31:53.270
PAUL IRISH: There's likely going
to be some more stuff

00:31:53.270 --> 00:31:56.180
that would make Remy happy, as
far as developing in the

00:31:56.180 --> 00:31:57.430
browser more.

00:31:59.920 --> 00:32:04.740
And actually, to add on to a
little bit of the mobile tools

00:32:04.740 --> 00:32:09.640
and workflows, we talked a lot
about what are the ways to

00:32:09.640 --> 00:32:11.050
work with these devices.

00:32:11.050 --> 00:32:13.300
But the other thing is that a
lot of times, you can end up

00:32:13.300 --> 00:32:16.230
doing a lot of development just
on desktop, straight up.

00:32:16.230 --> 00:32:19.620
Firefox has a fantastic,
responsive design tool built

00:32:19.620 --> 00:32:20.980
into their dev tools now.

00:32:20.980 --> 00:32:22.700
Inside Chrome, there's
device metrics.

00:32:22.700 --> 00:32:25.580
And there's, like, 50
different sites and

00:32:25.580 --> 00:32:28.760
bookmarklets to get various
different iframes so they can

00:32:28.760 --> 00:32:32.050
test your viewport
for any site.

00:32:32.050 --> 00:32:34.830
But things like emulating touch
events, emulating and

00:32:34.830 --> 00:32:37.980
spoofing geolocation,
these are all in the

00:32:37.980 --> 00:32:38.850
browser now, too.

00:32:38.850 --> 00:32:42.190
So there's a good amount that
you can get away with on

00:32:42.190 --> 00:32:45.210
desktop before you go to the
device to make sure that your

00:32:45.210 --> 00:32:46.590
performance goals are
being met, too.

00:32:46.590 --> 00:32:47.890
So I'd add that in.

00:32:47.890 --> 00:32:49.005
SIMON STEWART: Right.

00:32:49.005 --> 00:32:51.230
So I think one of the things
we're missing here are the

00:32:51.230 --> 00:32:53.790
audiences for testing, right?

00:32:53.790 --> 00:32:56.070
Your workflow sounds very
developer-centric, like you

00:32:56.070 --> 00:32:59.930
want to make sure that the CSS
and the UX is perfect.

00:32:59.930 --> 00:33:02.130
The people that tend to use
WebDriver tend to be more

00:33:02.130 --> 00:33:04.450
interested in the end-to-end
testing and the functionality

00:33:04.450 --> 00:33:07.857
of the application, particularly
as a workflow or

00:33:07.857 --> 00:33:10.860
a walkthrough goes.

00:33:10.860 --> 00:33:15.160
So I probably wouldn't recommend
end-to-end testers

00:33:15.160 --> 00:33:18.800
use dev tools, because it's
not the right hammer to be

00:33:18.800 --> 00:33:22.680
hitting this particular
nail with.

00:33:22.680 --> 00:33:25.870
And it's got to be like take
a look at what people are

00:33:25.870 --> 00:33:29.330
actually attempting to do and
their relative skill levels

00:33:29.330 --> 00:33:32.590
and try and figure out what
the best approach is.

00:33:32.590 --> 00:33:35.070
For a handful of people, being
in the dev tools and being

00:33:35.070 --> 00:33:37.790
highly technical and getting
all the metrics out of the

00:33:37.790 --> 00:33:39.760
browser is entirely the
right thing to do.

00:33:39.760 --> 00:33:42.700
And that's a fantastic option
for those people.

00:33:42.700 --> 00:33:46.880
But for hundreds of people, for
a majority of developers,

00:33:46.880 --> 00:33:48.520
actually, it's enough to be
able to throw something

00:33:48.520 --> 00:33:50.880
together with a bit of Python
or a small amount of

00:33:50.880 --> 00:33:54.460
JavaScript and use that to
verify that the application is

00:33:54.460 --> 00:33:56.950
doing what it's meant
to be doing.

00:33:56.950 --> 00:34:00.630
So yeah, think about the
audience of who's going to be

00:34:00.630 --> 00:34:03.200
using this and how they're going
to be using it and how

00:34:03.200 --> 00:34:05.160
they're going to be integrating
with the team.

00:34:05.160 --> 00:34:07.860
And it may turn out that
actually, not being in the

00:34:07.860 --> 00:34:10.070
browser is a better way
of going about it.

00:34:10.070 --> 00:34:11.820
And sometimes, it's
going to be better

00:34:11.820 --> 00:34:13.780
to do things manually.

00:34:13.780 --> 00:34:16.870
"Does this feel right" is a
really hard question for

00:34:16.870 --> 00:34:19.159
machine to answer but a
really easy question

00:34:19.159 --> 00:34:20.483
for a person to answer.

00:34:20.483 --> 00:34:23.850
REMY SHARP: Can I just tack
on to the end of that?

00:34:23.850 --> 00:34:25.880
I can't remember who the
conversations were with, but

00:34:25.880 --> 00:34:30.120
I've got a feeling it might
be Paul, like a year ago.

00:34:30.120 --> 00:34:34.139
Web developers don't jump on
to the command line as

00:34:34.139 --> 00:34:38.870
frequently as a Python developer
or a Ruby developer.

00:34:38.870 --> 00:34:40.440
I'm comfortable with
the command line.

00:34:40.440 --> 00:34:45.850
But out of the web developers
here, you probably do

00:34:45.850 --> 00:34:46.710
server-side coding, anyway.

00:34:46.710 --> 00:34:49.429
But hands up who's pretty
comfortable using the command

00:34:49.429 --> 00:34:51.602
line or coding up--

00:34:51.602 --> 00:34:53.240
actually, this is a bit
of a [INAUDIBLE]

00:34:53.240 --> 00:34:53.685
[LAUGHTER]

00:34:53.685 --> 00:34:57.350
REMY SHARP: It's a technical
audience in the first place.

00:34:57.350 --> 00:34:59.310
Loaded question, bias,
so on and so forth.

00:34:59.310 --> 00:35:02.621
But there's that question
as well.

00:35:02.621 --> 00:35:06.070
IVAN ZUZAK: So it seems like
having a huge number of mobile

00:35:06.070 --> 00:35:08.850
devices is the only way to
reliably test on Android and

00:35:08.850 --> 00:35:09.720
BlackBerry.

00:35:09.720 --> 00:35:12.820
Is there any hope of having
accurate, reliable emulators

00:35:12.820 --> 00:35:16.390
for platforms other than iOS?

00:35:16.390 --> 00:35:19.010
REMY SHARP: I would add iOS
to that list as well.

00:35:19.010 --> 00:35:20.930
IVAN ZUZAK: Yeah?

00:35:20.930 --> 00:35:22.540
Anyone?

00:35:22.540 --> 00:35:24.590
So is there any hope for having

00:35:24.590 --> 00:35:26.680
really reliable emulators?

00:35:26.680 --> 00:35:27.730
SIMON STEWART: No.

00:35:27.730 --> 00:35:28.995
IVAN ZUZAK: Excellent.

00:35:28.995 --> 00:35:31.180
REMY SHARP: Just to
give Opera props,

00:35:31.180 --> 00:35:34.050
isn't the Opera emulator--

00:35:34.050 --> 00:35:34.940
isn't it supposed to
be exactly the

00:35:34.940 --> 00:35:36.570
same as Opera Mobile?

00:35:36.570 --> 00:35:38.318
AUDIENCE: [INAUDIBLE]

00:35:38.318 --> 00:35:38.804
backed up.

00:35:38.804 --> 00:35:41.720
But it obviously doesn't have
the same [INAUDIBLE]

00:35:41.720 --> 00:35:43.178
device.

00:35:43.178 --> 00:35:45.122
AUDIENCE: WebOS is
pretty good.

00:35:45.122 --> 00:35:46.094
IVAN ZUZAK: Hmm?

00:35:46.094 --> 00:35:47.225
AUDIENCE: WebOS is
pretty good.

00:35:47.225 --> 00:35:48.380
PAUL IRISH: WebOS.

00:35:48.380 --> 00:35:53.070
Yeah, I think you could say
that there is hope that

00:35:53.070 --> 00:35:54.580
they'll get better.

00:35:54.580 --> 00:35:57.850
I would expect those
vendors to put

00:35:57.850 --> 00:35:59.405
support into those tools.

00:35:59.405 --> 00:36:00.150
So yeah.

00:36:00.150 --> 00:36:00.770
SIMON STEWART: Great.

00:36:00.770 --> 00:36:02.800
More optimistically than
just a flat no.

00:36:02.800 --> 00:36:05.090
I think the Pareto principle
is going to kick in here--

00:36:05.090 --> 00:36:07.550
the 80-20 rule.

00:36:07.550 --> 00:36:10.910
Testing on a simulator and
emulator is going to be fairly

00:36:10.910 --> 00:36:14.510
close, and in the common case,
actually enough for our

00:36:14.510 --> 00:36:15.140
testing needs.

00:36:15.140 --> 00:36:17.230
But there's always going to
be some weird quirk in the

00:36:17.230 --> 00:36:21.850
hardware that we're going
to need the devices for.

00:36:21.850 --> 00:36:24.315
So are the emulators going to
get enough where it'll move

00:36:24.315 --> 00:36:28.610
away from the 80-20
to 90-10 or 95-5?

00:36:28.610 --> 00:36:29.815
I don't know.

00:36:29.815 --> 00:36:33.170
But having seen the progress of
the Android emulator, which

00:36:33.170 --> 00:36:35.930
has gone from being quite
painful to use to actually

00:36:35.930 --> 00:36:39.270
being good enough to do a
majority of my testing on,

00:36:39.270 --> 00:36:43.810
particularly with the Intel
version that's available now,

00:36:43.810 --> 00:36:47.250
yeah, I'm actually relatively
hopeful about hitting the

00:36:47.250 --> 00:36:47.770
90-10 point.

00:36:47.770 --> 00:36:49.901
IVAN ZUZAK: Excellent.

00:36:49.901 --> 00:36:52.056
REMY SHARP: There's a
question over back.

00:36:52.056 --> 00:36:53.400
AUDIENCE: I just want to
give a shout out to

00:36:53.400 --> 00:36:57.570
opendevicelab.com, which is
actually opening device labs

00:36:57.570 --> 00:36:58.760
all over the world right now.

00:36:58.760 --> 00:36:59.880
They've got 40 locations.

00:36:59.880 --> 00:37:01.280
One of them is a
Mozilla office.

00:37:01.280 --> 00:37:02.980
Google is thinking about it.

00:37:02.980 --> 00:37:05.880
So if you've got hardware you
don't use, you can donate it

00:37:05.880 --> 00:37:08.300
to one of them, and every
developer can go there and try

00:37:08.300 --> 00:37:10.570
on real devices to play
with their things.

00:37:10.570 --> 00:37:13.060
Because we can make emulators
as much as we want.

00:37:13.060 --> 00:37:15.420
Most of the errors come through
touching and playing

00:37:15.420 --> 00:37:18.610
with the thing on the
real hardware.

00:37:18.610 --> 00:37:23.820
When I put Firefox OS on SIIs,
three devices, same device,

00:37:23.820 --> 00:37:25.050
completely different results.

00:37:25.050 --> 00:37:27.510
So it's not that easy.

00:37:27.510 --> 00:37:30.440
But OpenDeviceLab is a really,
really good idea for people

00:37:30.440 --> 00:37:33.050
that can't afford all these
phones to actually play with

00:37:33.050 --> 00:37:35.320
them in an office that
is a sharing space.

00:37:35.320 --> 00:37:36.880
And there's lots and lots
of them worldwide.

00:37:36.880 --> 00:37:38.375
So just wanted to
mention that.

00:37:38.375 --> 00:37:41.590
PAUL IRISH: They also have a lot
of information for people

00:37:41.590 --> 00:37:44.980
that want to set up their own
device labs, too, and

00:37:44.980 --> 00:37:46.355
community support for that.

00:37:46.355 --> 00:37:50.025
DAVID BLOOMAN: I also, if I'm
passing a phone shop, I'll

00:37:50.025 --> 00:37:52.860
just go in and have a play,
see what's going on.

00:37:52.860 --> 00:37:56.395
And I recommend you do, too,
because the important thing to

00:37:56.395 --> 00:37:58.310
know is what's in a shop
is what somebody could

00:37:58.310 --> 00:38:00.640
potentially be using to
access your site.

00:38:00.640 --> 00:38:03.630
So that's a great idea
of what exactly is

00:38:03.630 --> 00:38:04.950
going on in the market.

00:38:04.950 --> 00:38:07.700
And obviously, it's going to be
market specific, but you'd

00:38:07.700 --> 00:38:10.010
be surprised at some of the
travesties that are in phone

00:38:10.010 --> 00:38:11.470
shops nowadays.

00:38:11.470 --> 00:38:13.498
So yeah.

00:38:13.498 --> 00:38:15.940
AUDIENCE: Really quick, it's
worth pointing out that most

00:38:15.940 --> 00:38:19.690
of the emulator execution is
somewhere else in the stack.

00:38:19.690 --> 00:38:21.165
There's a great company
called [INAUDIBLE]

00:38:21.165 --> 00:38:24.580
Incorporated, which has proven
that they can run ARM code on

00:38:24.580 --> 00:38:27.050
x86 faster than ARM
executes on ARM.

00:38:27.050 --> 00:38:29.652
So obviously, the problem isn't
with the ARM device or

00:38:29.652 --> 00:38:30.350
the instruction set.

00:38:30.350 --> 00:38:31.710
It's somewhere in the
stack to get these

00:38:31.710 --> 00:38:32.900
emulators up and running.

00:38:32.900 --> 00:38:35.040
Most of the time, it's a balance
between the teams

00:38:35.040 --> 00:38:36.670
trying to get their products
out the door

00:38:36.670 --> 00:38:38.340
versus actually caring--

00:38:38.340 --> 00:38:40.530
or to put it in correct
terminology, since we're about

00:38:40.530 --> 00:38:43.240
to have beers-- giving enough
shits about getting their

00:38:43.240 --> 00:38:44.170
emulators up and running.

00:38:44.170 --> 00:38:46.380
So if this is something that
matters to web dev as a whole,

00:38:46.380 --> 00:38:49.660
you should definitely be putting
more pressure on these

00:38:49.660 --> 00:38:51.310
manufacturers to get
their emulators up

00:38:51.310 --> 00:38:52.955
to speed to do things.

00:38:52.955 --> 00:38:54.455
IVAN ZUZAK: Excellent.

00:38:54.455 --> 00:38:54.840
Great.

00:38:54.840 --> 00:38:58.060
So let's switch gears a bit.

00:38:58.060 --> 00:38:59.500
Here's one of my questions.

00:38:59.500 --> 00:39:02.680
Will we get a solution for
package management and module

00:39:02.680 --> 00:39:03.510
loading soon?

00:39:03.510 --> 00:39:06.490
There have been several tools
that have shown that it could

00:39:06.490 --> 00:39:09.140
be done, but there's
no real consensus.

00:39:09.140 --> 00:39:12.470
And will ECMAScript 6
modules solve this?

00:39:12.470 --> 00:39:13.510
And Addy corrected me.

00:39:13.510 --> 00:39:16.360
So these are actually two
questions in one.

00:39:16.360 --> 00:39:18.980
And package management
is somewhat

00:39:18.980 --> 00:39:20.280
separate from module loading.

00:39:20.280 --> 00:39:24.180
So this is a real problem
for a lot of developers.

00:39:24.180 --> 00:39:26.955
And Paul, perhaps you
can start this.

00:39:26.955 --> 00:39:29.670
PAUL IRISH: Sure.

00:39:29.670 --> 00:39:32.260
So right now in client-side
package management, there's a

00:39:32.260 --> 00:39:34.930
few possibilities.

00:39:34.930 --> 00:39:38.730
A while ago, there was a project
called Ender, and the

00:39:38.730 --> 00:39:40.820
people who made Ender decided
that it didn't really work

00:39:40.820 --> 00:39:43.040
out, so that's mostly dead.

00:39:43.040 --> 00:39:47.370
There's also volo, made by
James Burke, who created

00:39:47.370 --> 00:39:49.690
Require.js, which
is pretty cool.

00:39:49.690 --> 00:39:54.190
Bower, originally released by
Twitter, and there's also a

00:39:54.190 --> 00:39:58.360
lot of folks using NPM, sending
it through Browserify,

00:39:58.360 --> 00:40:00.600
and getting it to work there.

00:40:00.600 --> 00:40:04.200
And these are all kind of
using different registry

00:40:04.200 --> 00:40:09.010
approaches, different ideas on,
should we start an entire

00:40:09.010 --> 00:40:12.880
new JavaScript library ecosystem
from scratch or use

00:40:12.880 --> 00:40:15.240
one that's already available?

00:40:15.240 --> 00:40:18.390
Do we just accept that we can
use node packages inside the

00:40:18.390 --> 00:40:20.720
browser and make that work?

00:40:23.370 --> 00:40:27.710
And it's kind of messy
right now.

00:40:27.710 --> 00:40:29.820
I mean, I'm most excited about
what's happening with the

00:40:29.820 --> 00:40:31.220
Bower project.

00:40:31.220 --> 00:40:34.820
It has about 900 packages
in it, all working.

00:40:34.820 --> 00:40:36.710
Dependency resolution
works fantastic.

00:40:36.710 --> 00:40:41.980
You actually get updated inside
the UI when JavaScript

00:40:41.980 --> 00:40:43.250
library ships a new version.

00:40:43.250 --> 00:40:44.790
So it kind of keeps
you up to date.

00:40:48.030 --> 00:40:51.240
But there's a lot of challenges,
because package

00:40:51.240 --> 00:40:54.810
management for client side is
something where it's useful

00:40:54.810 --> 00:40:56.520
when it hits a critical mass.

00:40:56.520 --> 00:40:58.530
And I don't think
we're there yet.

00:40:58.530 --> 00:41:02.320
So I'm looking forward to seeing
what we can do, either

00:41:02.320 --> 00:41:04.870
inside this tool or another
tool, to kind of get there.

00:41:04.870 --> 00:41:09.530
Because without package
management client side,

00:41:09.530 --> 00:41:12.180
everyone's going to be afraid of
calling jQuery dependency.

00:41:12.180 --> 00:41:15.940
And jQuery is already too big.

00:41:15.940 --> 00:41:19.350
So it could have been smaller
had we had proper package

00:41:19.350 --> 00:41:21.450
management.

00:41:21.450 --> 00:41:24.160
And I think it would really open
up a lot of progress and

00:41:24.160 --> 00:41:26.340
forward momentum in what we're
able to get away with on the

00:41:26.340 --> 00:41:29.290
front end when we can actually
create reasonable

00:41:29.290 --> 00:41:31.260
dependencies.

00:41:31.260 --> 00:41:34.900
IVAN ZUZAK: So there's this
point where at one point,

00:41:34.900 --> 00:41:36.620
standardization should
come in?

00:41:39.742 --> 00:41:40.992
PAUL IRISH: Alex?

00:41:42.900 --> 00:41:43.990
You want to talk about
ESX modules?

00:41:43.990 --> 00:41:46.920
ALEX RUSSELL: Sure.

00:41:46.920 --> 00:41:51.280
So I'm Alex Russell, Google, one
of our representatives on

00:41:51.280 --> 00:41:54.040
TC39, the standards body
for JavaScript.

00:41:54.040 --> 00:41:58.720
So there is a module system
coming in the next version of

00:41:58.720 --> 00:41:59.440
JavaScript.

00:41:59.440 --> 00:42:01.450
Will you be able to use it on
all the devices that are

00:42:01.450 --> 00:42:02.220
deployed today?

00:42:02.220 --> 00:42:03.500
Well, that depends on whether
or not you're

00:42:03.500 --> 00:42:04.730
targeting new browsers.

00:42:04.730 --> 00:42:06.250
So the answer is no.

00:42:06.250 --> 00:42:08.190
At least no in the short term.

00:42:08.190 --> 00:42:10.070
In the long term--

00:42:10.070 --> 00:42:13.310
well, in the intermediary time,
you'll be able to use

00:42:13.310 --> 00:42:16.490
tools like Tracer and
other transpilers--

00:42:16.490 --> 00:42:18.540
JavaScript to JavaScript
compilers--

00:42:18.540 --> 00:42:22.160
that will allow you to sort of
program in the source language

00:42:22.160 --> 00:42:24.400
and then convert to the other
one, based on a standard

00:42:24.400 --> 00:42:28.490
syntax, which sort of sets you
up for living in the wonderful

00:42:28.490 --> 00:42:30.190
future that will eventually
arrive.

00:42:30.190 --> 00:42:32.220
So that's a strategy that
you can use today.

00:42:32.220 --> 00:42:34.810
There's a little bit of tension
right now in the

00:42:34.810 --> 00:42:37.150
committee about what's going to
happen with the particulars

00:42:37.150 --> 00:42:39.370
of the syntax and some
of the semantics.

00:42:39.370 --> 00:42:40.780
And we're ironing
those out now.

00:42:40.780 --> 00:42:44.710
But the goal for us is to have a
version of the language that

00:42:44.710 --> 00:42:47.890
has this done, more or less
feature complete, by the end

00:42:47.890 --> 00:42:48.750
of the year.

00:42:48.750 --> 00:42:50.420
So wish us luck.

00:42:50.420 --> 00:42:55.020
And I guess if you'd like to
start using what is likely to

00:42:55.020 --> 00:42:58.620
become the module system for the
next version of ECMAScript

00:42:58.620 --> 00:43:00.210
today, it's not a
package manager.

00:43:00.210 --> 00:43:01.120
It's just a module system.

00:43:01.120 --> 00:43:03.310
But you can check out Tracer
and a couple of other

00:43:03.310 --> 00:43:05.632
transpilers that are starting
to support it.

00:43:05.632 --> 00:43:06.100
IVAN ZUZAK: Good.

00:43:06.100 --> 00:43:08.250
So while you have the
mic, I want to

00:43:08.250 --> 00:43:10.430
ask you another question.

00:43:10.430 --> 00:43:13.390
So what should be the role
of standardization in web

00:43:13.390 --> 00:43:16.730
development during testing, and
what are some of the areas

00:43:16.730 --> 00:43:19.265
that would benefit from
standardization right now?

00:43:19.265 --> 00:43:25.790
ALEX RUSSELL: OK, so with my
non-Google hat on, with my W3C

00:43:25.790 --> 00:43:28.240
TAG member hat on, let me answer
the question in terms

00:43:28.240 --> 00:43:30.800
of, what's the role of
a standards body.

00:43:30.800 --> 00:43:33.030
My view is that the role of a
standards body-- and this is

00:43:33.030 --> 00:43:36.430
not the TAG's view, but it's my
personal view-- is that the

00:43:36.430 --> 00:43:40.230
role of a standards body is to
hold the coats while everybody

00:43:40.230 --> 00:43:43.220
gets yelled at to go have a
fight inside of a ring, right?

00:43:43.220 --> 00:43:45.340
They set the rules, and they
hold the coats while people

00:43:45.340 --> 00:43:50.740
duke it out inside some
preordained boxing ring.

00:43:50.740 --> 00:43:54.930
And they aren't let out again
until users have one answer.

00:43:54.930 --> 00:43:58.270
The goal here is to get users
to say, holy cow, you guys

00:43:58.270 --> 00:43:59.120
have made this really hard.

00:43:59.120 --> 00:44:01.350
You might all have some answer,
but we need one

00:44:01.350 --> 00:44:02.420
standard answer.

00:44:02.420 --> 00:44:05.300
And that usually only happens
when A, everybody understands

00:44:05.300 --> 00:44:06.170
the problem.

00:44:06.170 --> 00:44:08.220
So until everybody understands
the problem, if there's some

00:44:08.220 --> 00:44:09.900
vocal minority that says,
look, there's this giant

00:44:09.900 --> 00:44:12.220
problem, well, that's probably
not enough to get a standards

00:44:12.220 --> 00:44:14.130
effort to a successful
conclusion.

00:44:14.130 --> 00:44:16.120
So if everyone understands the
problem, and there are

00:44:16.120 --> 00:44:19.350
competing answers, that's sort
of the predicate for a

00:44:19.350 --> 00:44:21.590
successful standards scrum.

00:44:21.590 --> 00:44:24.840
You can't really start the
game until those set of

00:44:24.840 --> 00:44:26.200
conditions have been met.

00:44:26.200 --> 00:44:29.560
So it's good for browser vendors
to innovate, to start

00:44:29.560 --> 00:44:31.760
working together to
collaboratively look at what's

00:44:31.760 --> 00:44:33.280
happening inside the world.

00:44:33.280 --> 00:44:34.500
What are the libraries doing?

00:44:34.500 --> 00:44:36.140
What are the compilers doing?

00:44:36.140 --> 00:44:37.850
Where are we falling
down on the job?

00:44:37.850 --> 00:44:40.080
Where are users yelling
at us most loudly?

00:44:40.080 --> 00:44:43.360
And once that happens, go to
the standards body and say,

00:44:43.360 --> 00:44:45.730
OK, well, this is the subset of
what we clearly understand

00:44:45.730 --> 00:44:47.630
is a relatively good answer.

00:44:47.630 --> 00:44:48.770
Let's standardize that.

00:44:48.770 --> 00:44:51.900
And then to hopefully integrate
more of what is then

00:44:51.900 --> 00:44:54.580
collectively understood to be
the right problem or the right

00:44:54.580 --> 00:44:56.200
answer as time passes.

00:44:56.200 --> 00:44:56.900
IVAN ZUZAK: OK, thanks.

00:44:56.900 --> 00:44:58.830
Simon.

00:44:58.830 --> 00:45:02.810
What's your experience from
being on W3C group for testing

00:45:02.810 --> 00:45:03.510
and tooling?

00:45:03.510 --> 00:45:06.910
SIMON STEWART: Yeah, so
WebDriver is in a really

00:45:06.910 --> 00:45:09.820
interesting space in that it's a
de facto standard that we're

00:45:09.820 --> 00:45:12.866
turning into a de
jure standard.

00:45:12.866 --> 00:45:17.290
A lot of the tools that Paul
was talking about earlier,

00:45:17.290 --> 00:45:19.220
anything that connects to
Sauce Labs is using the

00:45:19.220 --> 00:45:20.470
WebDriver APIs.

00:45:23.260 --> 00:45:28.120
Michael Tamm's Fighting Layout
Bugs, that uses WebDriver.

00:45:28.120 --> 00:45:30.990
It keeps on cropping up in these
sort of unusual places.

00:45:30.990 --> 00:45:32.860
The Appium stuff, that
uses the wire

00:45:32.860 --> 00:45:35.280
protocol from WebDriver.

00:45:35.280 --> 00:45:38.650
And so yeah, what we're
attempting to do right now is

00:45:38.650 --> 00:45:41.600
go, what we need is--

00:45:41.600 --> 00:45:44.480
that work is currently being
done by a relatively small

00:45:44.480 --> 00:45:46.640
open source team.

00:45:46.640 --> 00:45:47.840
And they're brilliant.

00:45:47.840 --> 00:45:50.000
They are an amazing team.

00:45:50.000 --> 00:45:52.350
But we're now at the point,
and we're past the point,

00:45:52.350 --> 00:45:56.040
where in order to make the
things that people want to be

00:45:56.040 --> 00:45:59.820
able to test work properly, we
need the aid and help of the

00:45:59.820 --> 00:46:00.850
people writing the browsers.

00:46:00.850 --> 00:46:03.010
We need to be baked
into the browsers.

00:46:03.010 --> 00:46:05.940
Opera were the first people that
stepped up to the plate

00:46:05.940 --> 00:46:07.200
and went, you know what?

00:46:07.200 --> 00:46:08.680
We could actually do this.

00:46:08.680 --> 00:46:12.880
And the Opera driver was a
fantastic step forward and was

00:46:12.880 --> 00:46:15.080
incredibly fast and
incredibly stable.

00:46:15.080 --> 00:46:18.350
Chrome followed relatively
swiftly after that.

00:46:18.350 --> 00:46:22.540
And we went from having a fairly
buggy, painful to use

00:46:22.540 --> 00:46:26.110
Chrome driver to something
that was amazing.

00:46:26.110 --> 00:46:29.830
Mozilla, we talk about
M-Day on the project.

00:46:29.830 --> 00:46:31.980
Mozilla have a project called
Marionette, which is their

00:46:31.980 --> 00:46:35.800
implementation of the
WebDriver APIs.

00:46:35.800 --> 00:46:38.300
So my experience has been
actually really, really

00:46:38.300 --> 00:46:40.980
positive, like everybody sees
the need for these things.

00:46:40.980 --> 00:46:43.260
Everyone is pulling together,
and we're all just trying to

00:46:43.260 --> 00:46:46.410
figure out the nicest way of
standardizing these things.

00:46:46.410 --> 00:46:49.226
REMY SHARP: Is Microsoft
on that list?

00:46:49.226 --> 00:46:53.380
SIMON STEWART: So yes,
Microsoft, Apple.

00:46:53.380 --> 00:46:58.740
There are now representatives
from Microsoft on the working

00:46:58.740 --> 00:47:01.130
group mailing list, and I think
they're planning on

00:47:01.130 --> 00:47:06.320
showing up to the next
face-to-face session.

00:47:06.320 --> 00:47:09.750
There were Microsoft
representatives at TPAC last

00:47:09.750 --> 00:47:14.160
year, in 2012, as well, who
attended a full day of

00:47:14.160 --> 00:47:15.620
discussion.

00:47:15.620 --> 00:47:19.460
So actually, Microsoft,
obviously they don't tell us

00:47:19.460 --> 00:47:19.880
everything.

00:47:19.880 --> 00:47:22.060
But they are taking
it seriously.

00:47:22.060 --> 00:47:24.890
Apple are Apple, and nobody
knows quite what's going to

00:47:24.890 --> 00:47:26.140
happen there.

00:47:28.140 --> 00:47:30.170
But I think it's inevitable.

00:47:30.170 --> 00:47:32.920
I really hope it's inevitable,
because everyone

00:47:32.920 --> 00:47:33.700
else is doing it.

00:47:33.700 --> 00:47:35.040
We're turning it into
a standard.

00:47:35.040 --> 00:47:37.840
And there are people who
implement it because it's good

00:47:37.840 --> 00:47:39.080
for the users.

00:47:39.080 --> 00:47:40.890
And there are people who
implement it because they like

00:47:40.890 --> 00:47:43.630
to be seen as conforming
to standards.

00:47:43.630 --> 00:47:46.750
And the more pressure we apply
by allowing more of these

00:47:46.750 --> 00:47:48.130
check boxes to be applied,
the better.

00:47:48.130 --> 00:47:50.920
IVAN ZUZAK: So are there any
other tools that are going to

00:47:50.920 --> 00:47:51.790
get standardized?

00:47:51.790 --> 00:47:55.570
I saw the charter, and you
have Console API from

00:47:55.570 --> 00:47:57.226
Developer Tools.

00:47:57.226 --> 00:47:59.000
Is that going to happen soon?

00:47:59.000 --> 00:48:03.880
PAUL IRISH: So there's
a Java spec for

00:48:03.880 --> 00:48:06.760
standardizing Console API.

00:48:06.760 --> 00:48:09.490
Mostly, it just needs
more work.

00:48:09.490 --> 00:48:13.000
But right now, actually, Console
API is extremely

00:48:13.000 --> 00:48:14.250
consistent across browsers.

00:48:17.260 --> 00:48:19.730
There's a bunch of different
features in console.log that

00:48:19.730 --> 00:48:22.800
most people don't know about
that are actually implemented

00:48:22.800 --> 00:48:24.290
across browsers.

00:48:24.290 --> 00:48:30.320
Just last summer, we changed the
definition of the dollar

00:48:30.320 --> 00:48:33.320
sign symbol in the command
line API in the console.

00:48:33.320 --> 00:48:37.850
And while it's not in any
standard, we just talked to

00:48:37.850 --> 00:48:40.020
the guys who make Firebug, the
Firefox developer tools, the

00:48:40.020 --> 00:48:43.030
Opera guys, and we all just
changed it at once.

00:48:43.030 --> 00:48:48.000
So these things stay in sync
pretty well without the

00:48:48.000 --> 00:48:50.260
standard being published.

00:48:50.260 --> 00:48:50.930
Yeah.

00:48:50.930 --> 00:48:53.680
SIMON STEWART: There is a
Browser Tools and Testing

00:48:53.680 --> 00:48:54.500
Working Group.

00:48:54.500 --> 00:48:56.410
If anyone's interested, they
should think about

00:48:56.410 --> 00:48:59.430
joining at the W3C.

00:48:59.430 --> 00:49:02.630
And I think there's some efforts
to actually kick start

00:49:02.630 --> 00:49:04.650
that and give it some
shape and form.

00:49:04.650 --> 00:49:07.060
You may know a bit more about
that, Paul, than I do.

00:49:07.060 --> 00:49:09.310
Yeah, OK.

00:49:09.310 --> 00:49:12.130
There's an effort, and I'm not
quite sure how far it's gone.

00:49:12.130 --> 00:49:12.690
But it'll happen.

00:49:12.690 --> 00:49:15.800
REMY SHARP: The debugger
protocol, is that part of the

00:49:15.800 --> 00:49:19.130
standard, or is it just that
it's been written and looks

00:49:19.130 --> 00:49:20.380
like a standard?

00:49:22.999 --> 00:49:23.880
PAUL IRISH: The debugger
protocol--

00:49:23.880 --> 00:49:25.810
IVAN ZUZAK: We're talking
about which protocol?

00:49:25.810 --> 00:49:27.810
SIMON STEWART: Whose debugger
protocol is that?

00:49:27.810 --> 00:49:30.620
Scope or the Firefox one
or the WebKit one?

00:49:30.620 --> 00:49:33.505
REMY SHARP: The one that came
out of WebKit that--

00:49:33.505 --> 00:49:36.490
like I said, it looked like
a standard Scope.

00:49:36.490 --> 00:49:38.890
Looked like it came
from Opera.

00:49:38.890 --> 00:49:43.020
The debugger protocol looked
like Chrome and Safari were

00:49:43.020 --> 00:49:44.280
kind of adhering to it.

00:49:44.280 --> 00:49:44.570
And--

00:49:44.570 --> 00:49:44.880
[INTERPOSING VOICES]

00:49:44.880 --> 00:49:45.760
PAUL IRISH: Yeah,
so both are--

00:49:45.760 --> 00:49:46.780
REMY SHARP: [INAUDIBLE].

00:49:46.780 --> 00:49:50.950
PAUL IRISH: Both are published
open specifications and both

00:49:50.950 --> 00:49:56.270
designed for use in a
generalized fashion.

00:49:56.270 --> 00:49:59.060
I think Firefox was the
last one to add

00:49:59.060 --> 00:50:01.650
support for remote debugging.

00:50:01.650 --> 00:50:05.930
And they didn't use either
of these two protocols.

00:50:05.930 --> 00:50:10.870
So I don't expect to see
standardization along these

00:50:10.870 --> 00:50:14.200
lines, which is a bummer,
but it's just how it is.

00:50:14.200 --> 00:50:14.540
SIMON STEWART: Not yet.

00:50:14.540 --> 00:50:16.895
PAUL IRISH: Not yet.

00:50:16.895 --> 00:50:20.310
IVAN ZUZAK: So we have time
for a few questions.

00:50:20.310 --> 00:50:21.560
Andrew?

00:50:23.740 --> 00:50:26.050
So let's get one in.

00:50:26.050 --> 00:50:28.410
What's the best way to test
against varying network

00:50:28.410 --> 00:50:29.760
conditions in real life?

00:50:29.760 --> 00:50:33.850
We have devices that are
constantly changing, network

00:50:33.850 --> 00:50:35.930
switching between
speeds and such.

00:50:35.930 --> 00:50:37.570
So how do you test this?

00:50:37.570 --> 00:50:41.620
PAUL IRISH: There's two ways,
the two best ways I know.

00:50:41.620 --> 00:50:44.380
There's Charles Proxy.

00:50:44.380 --> 00:50:46.170
It runs on all platforms.

00:50:46.170 --> 00:50:48.970
Can simulate a lot of different
network conditions,

00:50:48.970 --> 00:50:51.780
including packet loss and
throttled bandwidth.

00:50:51.780 --> 00:50:58.310
And anyone on Lion or better on
OSX, if they install Xcode,

00:50:58.310 --> 00:51:01.560
they can get this thing called
Link Conditioner, which is

00:51:01.560 --> 00:51:02.760
just in System Preferences.

00:51:02.760 --> 00:51:07.750
And it has a few presets for
packet loss percentage and

00:51:07.750 --> 00:51:09.350
bandwidth throughput.

00:51:09.350 --> 00:51:11.725
But you can mimic a few
different common profiles,

00:51:11.725 --> 00:51:13.710
which are pretty cool.

00:51:13.710 --> 00:51:15.810
REMY SHARP: Can I also
add something there?

00:51:15.810 --> 00:51:19.380
Something I've noticed is that
the iPhone behaves differently

00:51:19.380 --> 00:51:21.780
when it has a Wi-Fi connection,
regardless of

00:51:21.780 --> 00:51:26.950
whether or not it's on 3G, as
in tethered, to when it

00:51:26.950 --> 00:51:27.910
doesn't have a Wi-Fi.

00:51:27.910 --> 00:51:29.300
It does different things.

00:51:35.140 --> 00:51:38.640
IOS 6 has the Network
Conditioner thing on the

00:51:38.640 --> 00:51:41.080
actual device, as well, so you
can play around with that.

00:51:41.080 --> 00:51:43.030
But seeing real network
traffic when

00:51:43.030 --> 00:51:44.700
you're not on Wi-Fi--

00:51:44.700 --> 00:51:46.910
the phone acts differently when
it's on Wi-Fi to when

00:51:46.910 --> 00:51:49.160
it's not on Wi-Fi.

00:51:49.160 --> 00:51:51.450
When it's on Wi-Fi, it
sends shitloads of

00:51:51.450 --> 00:51:52.370
data over the wire.

00:51:52.370 --> 00:51:56.600
And I found an article this
morning and tweeted the link

00:51:56.600 --> 00:52:02.170
to show you how to sniff traffic
whilst it's on 3G,

00:52:02.170 --> 00:52:04.025
connecting through a USB.

00:52:04.025 --> 00:52:07.746
But it's something to be
wary of, basically.

00:52:07.746 --> 00:52:09.440
IVAN ZUZAK: Great.

00:52:09.440 --> 00:52:11.930
So can we get native support
for proxy events?

00:52:11.930 --> 00:52:13.880
So--

00:52:13.880 --> 00:52:14.490
oh, sorry.

00:52:14.490 --> 00:52:16.800
AUDIENCE: Just one additional
question, then.

00:52:16.800 --> 00:52:20.540
Testing things like app cache
and simulating offline whilst

00:52:20.540 --> 00:52:22.290
remote debugging.

00:52:22.290 --> 00:52:22.900
Is it possible?

00:52:22.900 --> 00:52:26.665
We try blacklisting domains in
Charles, and that kind of half

00:52:26.665 --> 00:52:29.754
simulates it but not totally.

00:52:29.754 --> 00:52:31.780
PAUL IRISH: Not yet.

00:52:31.780 --> 00:52:34.140
SIMON STEWART: Yeah, in
lots of the WebDriver

00:52:34.140 --> 00:52:36.990
implementations, there's an
expectation there's a working

00:52:36.990 --> 00:52:38.450
network stack.

00:52:38.450 --> 00:52:41.150
And if you go offline,
that disappears.

00:52:41.150 --> 00:52:42.400
D'oh.

00:52:44.506 --> 00:52:48.160
AUDIENCE: Offline, we shut
down the server.

00:52:48.160 --> 00:52:49.500
That's how we--

00:52:49.500 --> 00:52:50.820
I mean, we're not
emulating it.

00:52:50.820 --> 00:52:51.980
We're just killing the
server that it's

00:52:51.980 --> 00:52:52.390
trying to connect to.

00:52:52.390 --> 00:52:55.442
So it kind of fakes it.

00:52:55.442 --> 00:52:57.350
IVAN ZUZAK: So here's
one for Remy.

00:52:57.350 --> 00:53:00.500
Can we get native support for
proxy events in Dev Tools

00:53:00.500 --> 00:53:03.260
injecting geolocation based
on Google Maps inputs?

00:53:03.260 --> 00:53:05.270
REMY SHARP: We kind of touched
on that earlier, didn't we?

00:53:05.270 --> 00:53:06.170
IVAN ZUZAK: OK.

00:53:06.170 --> 00:53:09.343
REMY SHARP: I mean, you can
answer, Paul, if you want to.

00:53:13.056 --> 00:53:14.720
IVAN ZUZAK: So here's
one for you, Remy.

00:53:14.720 --> 00:53:18.710
You had a recent blog post
that touched upon CORS.

00:53:18.710 --> 00:53:23.150
So the headers views to get
across the main [INAUDIBLE]

00:53:23.150 --> 00:53:25.020
requests.

00:53:25.020 --> 00:53:27.800
And there was a lengthy
discussion after that post.

00:53:27.800 --> 00:53:31.476
And can you explain what the
discussion was about?

00:53:31.476 --> 00:53:34.650
REMY SHARP: The discussion on
Google+ or the discussion on

00:53:34.650 --> 00:53:35.646
the comments?

00:53:35.646 --> 00:53:38.300
IVAN ZUZAK: The discussion that
touched upon that we're

00:53:38.300 --> 00:53:42.270
not sure, actually, how to
use CORS headers on which

00:53:42.270 --> 00:53:43.255
[INAUDIBLE].

00:53:43.255 --> 00:53:44.850
REMY SHARP: Who asked
the question?

00:53:44.850 --> 00:53:47.176
Because you might be able
to clarify it for me.

00:53:47.176 --> 00:53:49.445
IVAN ZUZAK: So it was actually
my question.

00:53:49.445 --> 00:53:50.610
REMY SHARP: That was
your question.

00:53:50.610 --> 00:53:51.060
All right.

00:53:51.060 --> 00:53:52.410
[LAUGHTER]

00:53:52.410 --> 00:53:54.210
IVAN ZUZAK: Your
last blog post.

00:53:54.210 --> 00:53:58.370
So it started quite a discussion
about when to use

00:53:58.370 --> 00:53:59.485
CORS on images.

00:53:59.485 --> 00:54:02.090
REMY SHARP: Oh yeah, I
basically said, just

00:54:02.090 --> 00:54:04.370
turn that shit on.

00:54:04.370 --> 00:54:06.152
And I linked to--

00:54:06.152 --> 00:54:09.082
I'm going to butcher
his name--

00:54:09.082 --> 00:54:10.332
Anne van Kesteren.

00:54:12.660 --> 00:54:17.140
So he's got a blog post that
says turn CORS on for XHR, for

00:54:17.140 --> 00:54:18.450
basically Ajax.

00:54:18.450 --> 00:54:22.210
And I'm suggesting if you're
a Flickr or Instagram or

00:54:22.210 --> 00:54:24.850
something with images, and I
think, actually, there's some

00:54:24.850 --> 00:54:27.890
other asset types, you should
turn on CORS support for that.

00:54:27.890 --> 00:54:30.570
So send, access origin, star.

00:54:30.570 --> 00:54:33.720
There's a link at the bottom of
the blog post that opens a

00:54:33.720 --> 00:54:40.740
discussion about the security
implications if

00:54:40.740 --> 00:54:42.010
you add a star rule.

00:54:42.010 --> 00:54:46.270
And there's a back and
forth between Anne

00:54:46.270 --> 00:54:51.500
and Malte from Google.

00:54:54.130 --> 00:54:56.700
I don't really know how it
ended, but I want to see

00:54:56.700 --> 00:54:59.840
these, particularly image
services, giving us

00:54:59.840 --> 00:55:02.490
cross-origin rules to allow us
to import that data into

00:55:02.490 --> 00:55:06.000
things like Canvas and have full
access to that data so we

00:55:06.000 --> 00:55:11.466
can remix the image data and
produce new content.

00:55:11.466 --> 00:55:13.640
I can't remember-- there's
something else you can put it

00:55:13.640 --> 00:55:14.520
on as well.

00:55:14.520 --> 00:55:18.600
PAUL IRISH: If you're really
lazy, just add the Apache

00:55:18.600 --> 00:55:21.320
config that's in HTML5
boilerplate, because it

00:55:21.320 --> 00:55:25.262
enables this CORS for images
automatically.

00:55:25.262 --> 00:55:28.430
IVAN ZUZAK: So do you think that
it's a place where tools

00:55:28.430 --> 00:55:32.710
can improve to give you more
information on how you should

00:55:32.710 --> 00:55:34.660
use a mechanism or an API?

00:55:34.660 --> 00:55:37.760
Because there was a lot of
misunderstanding on, should

00:55:37.760 --> 00:55:38.390
you be doing this?

00:55:38.390 --> 00:55:39.110
Is it secure?

00:55:39.110 --> 00:55:40.050
Is it not secure?

00:55:40.050 --> 00:55:42.270
Are we doing [INAUDIBLE]
requests or not?

00:55:42.270 --> 00:55:45.700
So like when you're writing
code, should you get a warning

00:55:45.700 --> 00:55:48.830
from your IDE and say, hey look,
this is something you

00:55:48.830 --> 00:55:51.790
probably are not an expert in.

00:55:51.790 --> 00:55:56.050
Check these sections in the
standard, or check this--

00:55:56.050 --> 00:55:58.870
PAUL IRISH: Yeah, I think
there's a lot of opportunity

00:55:58.870 --> 00:56:02.900
for providing them a bit more
context of what you're seeing.

00:56:02.900 --> 00:56:06.850
If you're looking at the
headers, and you're misusing

00:56:06.850 --> 00:56:09.340
one of the new security headers,
the tool should be

00:56:09.340 --> 00:56:11.420
able to let you know and tell
you where you can find more

00:56:11.420 --> 00:56:13.580
documentation on how to
use it correctly.

00:56:13.580 --> 00:56:16.930
Same situation on performance,
when you're getting back a lot

00:56:16.930 --> 00:56:19.860
of information, it can give
you some guidance and some

00:56:19.860 --> 00:56:21.975
resources to learn better
about what this means.

00:56:21.975 --> 00:56:24.310
IVAN ZUZAK: Yeah.

00:56:24.310 --> 00:56:25.920
OK, that's it.

00:56:25.920 --> 00:56:26.630
Thanks, everyone.

00:56:26.630 --> 00:56:29.630
[APPLAUSE]

