WEBVTT
Kind: captions
Language: en

00:00:00.187 --> 00:00:03.066
♪ (music) ♪

00:00:07.255 --> 00:00:10.557
Flutter and Dart
are asynchronous by nature.

00:00:10.557 --> 00:00:13.065
With Dart's <i>Futures</i>, you can manage IO

00:00:13.065 --> 00:00:16.346
without worrying
about threads or deadlocks.

00:00:16.346 --> 00:00:19.734
But how do you build widgets
when a <i>Future</i> is involved?

00:00:19.737 --> 00:00:24.087
Enter FutureBuilder,
the future of handling, well, <i>futures</i>.

00:00:24.087 --> 00:00:28.327
FutureBuilder lets you easily determine
the current state of a <i>future</i>

00:00:28.327 --> 00:00:31.026
and choose what to show
while the data's loading

00:00:31.026 --> 00:00:32.666
and when it's available.

00:00:32.666 --> 00:00:35.536
Start by giving FutureBuilder a <i>future</i>,

00:00:36.328 --> 00:00:38.045
and then a <i>builder</i>.

00:00:38.045 --> 00:00:41.697
But make sure to check the state
of the <i>future</i> with <i>connectionState</i>

00:00:41.697 --> 00:00:45.596
and display an appropriate widget
when your <i>future</i> is busy.

00:00:45.596 --> 00:00:49.557
Finally, it's good practice to check
that no error has occurred

00:00:49.557 --> 00:00:52.077
while your <i>future</i> was resolving.

00:00:52.077 --> 00:00:55.117
There are other <i>ConnectionState</i>s
that you can use.

00:00:55.117 --> 00:00:59.065
For more info on FutureBuilder
and all the other Flutter widgets,

00:00:59.065 --> 00:01:01.606
head on over to <i>flutter.io</i>.

00:01:02.250 --> 00:01:04.923
♪ (music) ♪

