WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:03.410
Can you tell me a little
about your role at LogicBox?

00:00:03.410 --> 00:00:06.230
&gt;&gt; So I'm a Chief Application Architect.

00:00:06.230 --> 00:00:10.440
And what this means is that I oversee
all of our app development and

00:00:10.440 --> 00:00:15.360
pretty central in coming up
with the initial design for

00:00:15.360 --> 00:00:16.750
any kind of new products
that we develop.

00:00:17.750 --> 00:00:20.420
I often do a fair amount of prototyping,
data modeling,

00:00:20.420 --> 00:00:25.330
early in a new product that we're
developing for a new client.

00:00:25.330 --> 00:00:29.890
I'll sometimes, often actually,
interact with customers

00:00:29.890 --> 00:00:32.509
to make sure we're clear on
requirements when we start.

00:00:32.509 --> 00:00:36.980
And I'll often make a lot of
the initial programing decisions and

00:00:36.980 --> 00:00:39.220
then start to farm it out
to a group of developers.

00:00:39.220 --> 00:00:43.090
&gt;&gt; And I'm guessing you also
have a strategic role as far as

00:00:43.090 --> 00:00:46.690
how a company is going to be
developing applications on into

00:00:46.690 --> 00:00:47.570
the future
&gt;&gt; That's right.

00:00:47.570 --> 00:00:50.290
So, in addition to
Chief Application Architect I'm also

00:00:50.290 --> 00:00:51.500
Executive Vice President.

00:00:51.500 --> 00:00:57.450
&gt;&gt; So, as an architect,
what kinds of decisions

00:00:57.450 --> 00:01:02.929
do you have to deal with in terms
of structuring this code base.

00:01:04.230 --> 00:01:08.860
&gt;&gt; So typically, there are kind of
two scenarios where I get involved.

00:01:08.860 --> 00:01:12.560
So there are new configurations of
existing services that we've implemented

00:01:12.560 --> 00:01:16.450
before and there most of my
work is just in requirements

00:01:16.450 --> 00:01:19.650
analysis to understand
differences between clients.

00:01:19.650 --> 00:01:24.280
And helping to put together
an application development team to go

00:01:24.280 --> 00:01:27.050
extend that configuration
to the new client.

00:01:27.050 --> 00:01:33.100
That's kind of the normal
development role, and I do that for

00:01:33.100 --> 00:01:37.630
several products in our family
that we've done many times before.

00:01:37.630 --> 00:01:41.430
We've deployed these services many
times before for previous clients and

00:01:41.430 --> 00:01:45.900
it's really just a matter of kind of
bringing up a team of developers and

00:01:45.900 --> 00:01:50.220
just showing them what the architecture
is and telling them how to flesh it out.

00:01:50.220 --> 00:01:53.000
For new products, and
as of not too long ago,

00:01:53.000 --> 00:01:58.020
the forecast manager that we're going to
talk about later was a new product.

00:01:58.020 --> 00:02:01.330
For that, I actually had to do a lot
of the initial development of it,

00:02:01.330 --> 00:02:04.570
and we did things like
initial scalability analysis.

00:02:04.570 --> 00:02:09.758
There's often some pretty complex
calculations that need to be performed.

00:02:09.758 --> 00:02:11.938
Under not under real-time, but

00:02:11.938 --> 00:02:17.220
under time constraints that a user
would need to deem acceptable.

00:02:17.220 --> 00:02:19.430
So I do a lot of initial
scalability analysis,

00:02:19.430 --> 00:02:23.260
which involves coding up
some solution approaches.

00:02:23.260 --> 00:02:26.710
Making sure that we understand how to
do the integration with all the various

00:02:26.710 --> 00:02:30.320
data that come from the customer and
also just doing data modeling.

00:02:30.320 --> 00:02:33.350
Because, a lot of the times we
find when we do a new application,

00:02:33.350 --> 00:02:36.890
there's a significant data modeling
exercise that needs to get done

00:02:36.890 --> 00:02:39.280
before we can really
start making progress.

00:02:39.280 --> 00:02:45.000
&gt;&gt; And how about the software process
itself, the development activities in

00:02:45.000 --> 00:02:51.040
particularly, strategically, as far as
improving productivity in the long run.

00:02:51.040 --> 00:02:55.880
&gt;&gt; Yeah, I also play a role
in that as you might imagine.

00:02:55.880 --> 00:03:00.850
We use, we're an agile shop,
and so we tend to like

00:03:00.850 --> 00:03:06.130
really short iterations where we have
demos at the end of those iterations.

00:03:06.130 --> 00:03:10.440
We use your traditional Jeera and
other kinds of technologies for

00:03:10.440 --> 00:03:11.590
issue tracking.

00:03:11.590 --> 00:03:16.490
But yeah, our process mainly is
one of when we have a new project,

00:03:16.490 --> 00:03:18.890
do an initial architectural
assessment which may take a month or

00:03:18.890 --> 00:03:23.390
two, to do the kind of prototyping and
scalability analysis that we need.

00:03:23.390 --> 00:03:26.100
And then we proceed when we
start bringing developers on,

00:03:26.100 --> 00:03:28.780
usually with a small number of
developers it scales up over time.

00:03:28.780 --> 00:03:31.940
Rather than with a big group
that starts at the beginning.

00:03:31.940 --> 00:03:37.210
And we use a very iterative usually
one to two week cycle iterations.

00:03:37.210 --> 00:03:38.760
So this is a grunt process.

