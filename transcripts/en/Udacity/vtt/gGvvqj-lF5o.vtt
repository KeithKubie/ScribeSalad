WEBVTT
Kind: captions
Language: en

00:00:00.070 --> 00:00:03.340
When we move to a signal,
which is now of course pulsed or

00:00:03.340 --> 00:00:05.990
flutter shuttered like this,
we might have a signal like this.

00:00:05.990 --> 00:00:09.040
Of course, the output we know is
convolution of this to this one,

00:00:09.040 --> 00:00:11.800
and this is also a sinc function.

00:00:11.800 --> 00:00:12.570
And of course,

00:00:12.570 --> 00:00:16.260
the big thing here is it is actually
preserving all of the high frequencies.

00:00:16.260 --> 00:00:18.660
It's not going down into
the low frequencies.

00:00:18.660 --> 00:00:22.320
By basically being able to do this,
we actually now are able to get rid of

00:00:22.320 --> 00:00:25.080
modeling all of the low frequencies and
high frequencies are there.

00:00:25.080 --> 00:00:26.315
And this is my sinc function.

00:00:26.315 --> 00:00:30.456
Again, I would get this by trying to
compute the discrete Fourier transform

00:00:30.456 --> 00:00:32.270
of an image in this process.

00:00:32.270 --> 00:00:36.380
Recall again, that convolution has a lot
to do with Fourier transforms, when we

00:00:36.380 --> 00:00:40.000
looked at all of our signal processing
stuff in one of the earlier lectures.

00:00:40.000 --> 00:00:41.760
Here are the two signals
next to each other.

00:00:41.760 --> 00:00:44.640
Full open shutter,
sinc function looks like this.

00:00:44.640 --> 00:00:47.678
And of course, our flutter shutter,
or a pulse shutter like this,

00:00:47.678 --> 00:00:49.331
the since function looks like this,

00:00:49.331 --> 00:00:52.076
never gets to some of the low
frequencies always basically.

00:00:52.076 --> 00:00:55.130
And again you can see this that
there is a lot more low frequency

00:00:55.130 --> 00:00:56.146
information here.

00:00:56.146 --> 00:00:58.773
And because of the sharp lines and
stuff like that,

00:00:58.773 --> 00:01:02.050
here we are actually seeing a lot
more of the high frequencies.

00:01:02.050 --> 00:01:05.700
Simply, again, we flutter shuttered or
pulsed our sense,

00:01:05.700 --> 00:01:08.420
our, our shutter to be
able to get this image.

00:01:08.420 --> 00:01:10.480
We are interest in, of course,
is the inversion, right?

00:01:10.480 --> 00:01:13.800
We are trying to invert this, being able
to go from this to an original image.

00:01:13.800 --> 00:01:17.010
Of course, we can do this by
doing inverse Fourier transforms.

00:01:17.010 --> 00:01:21.580
And again, in this case, we can now look
at the inverse filters for doing these

00:01:21.580 --> 00:01:24.520
types of things, and of course we look
at the two different sine functions.

00:01:24.520 --> 00:01:27.260
The thing that is, and this is something
I'm going to refer you to back

00:01:27.260 --> 00:01:29.450
to some of the literature
on signal processing.

00:01:29.450 --> 00:01:34.438
This kind of a filter is unstable, while
a signal like this is much more stable

00:01:34.438 --> 00:01:37.893
because again it's only kind
of capturing the high or

00:01:37.893 --> 00:01:40.224
low frequencies in this instance.

00:01:40.224 --> 00:01:43.483
And we can represent this much better to
be able to kind of do the inversion to

00:01:43.483 --> 00:01:44.640
compute our signals.

00:01:44.640 --> 00:01:48.040
And that's the basic idea here
is that trying to do an inverse

00:01:48.040 --> 00:01:52.190
discrete Fourier transform, this kind
actually would be much more suitable for

00:01:52.190 --> 00:01:53.850
our reconstruction.

00:01:53.850 --> 00:01:54.980
Let's look at the examples.

00:01:54.980 --> 00:01:58.320
In this case I'm going to basically
show short exposure, long exposure and

00:01:58.320 --> 00:01:59.630
coded exposure.

00:01:59.630 --> 00:02:02.310
For a long, short exposure,
of course, no light.

00:02:02.310 --> 00:02:05.160
We get a ray thing, but
of course we get a nice, crisp image.

00:02:05.160 --> 00:02:07.420
Long exposure,
we get a lot of blurriness.

00:02:07.420 --> 00:02:10.370
Coded exposure we get
blurriness with a lot more

00:02:10.370 --> 00:02:12.279
high frequency information still there.

00:02:13.400 --> 00:02:16.810
And of course, we can de-blur this using
the approach I kind of talked about, and

00:02:16.810 --> 00:02:19.510
this is what we would get,
much crisper image.

00:02:19.510 --> 00:02:22.511
If we were to de-blurring this with
a variety of different approaches,

00:02:22.511 --> 00:02:24.242
we might still get some incompleteness.

00:02:24.242 --> 00:02:27.767
But in this case by doing it the method
I was doing with discrete Fourier

00:02:27.767 --> 00:02:31.010
transforms and stuff like that,
we will get more bars.

00:02:31.010 --> 00:02:34.065
By the way, just to compare, this is the
ground truth image that we would have

00:02:34.065 --> 00:02:36.350
had if we actually had
captured it correctly.

00:02:36.350 --> 00:02:37.830
And this one looks pretty good.

00:02:37.830 --> 00:02:40.720
There's a little bit of noise, and
a little bit of banding going on, but

00:02:40.720 --> 00:02:41.740
much better than this.

00:02:41.740 --> 00:02:44.840
And that's the basic idea of
this flutter shutter camera.

00:02:44.840 --> 00:02:50.090
Being able to kind of use this knowledge
to be able to now reconstruct an image

00:02:50.090 --> 00:02:52.310
that knows how the variations happen.

00:02:52.310 --> 00:02:56.060
Again, we know the code,
we know the output, we can deconvolve

00:02:56.060 --> 00:02:59.670
with the knowledge itself to help us
figure out how to actually generate

00:02:59.670 --> 00:03:03.590
a reconstruction that's much more true
to what the original image would be.

00:03:03.590 --> 00:03:05.440
Same idea as what we looked at for

00:03:05.440 --> 00:03:09.510
coded aperture, except this time
of course it's a coded shutter.

00:03:09.510 --> 00:03:12.520
Let's see some examples produced
by these authors and their paper.

00:03:12.520 --> 00:03:17.288
Here is an example using this camera
here, of basically looking at a car.

00:03:17.288 --> 00:03:19.660
Of course, if this car is moving fast,

00:03:19.660 --> 00:03:24.840
you cannot actually see
the license plate, which is here.

00:03:24.840 --> 00:03:28.800
But, of course, if we had a flutter
shutter camera, you should be able to

00:03:28.800 --> 00:03:31.944
reconstruct from this and
actually get the license plate number.

00:03:31.944 --> 00:03:36.450
Another example of the same thing again,
somebody says I want more detail here.

00:03:36.450 --> 00:03:37.860
This is the original image, but

00:03:37.860 --> 00:03:41.390
if I had a flutter shutter camera,
I should be able to generate more.

00:03:41.390 --> 00:03:45.370
Another example with the cars again,
this is the orig image, image.

00:03:45.370 --> 00:03:46.693
Let's just focus in in there.

00:03:46.693 --> 00:03:49.807
And actually,
the whole car image can be regenerated.

00:03:49.807 --> 00:03:54.025
And if you notice, we can actually
now start looking up, and

00:03:54.025 --> 00:03:58.450
start even reading some of
the numbers and additional detail.

00:03:58.450 --> 00:04:02.450
Another input image, we can
rectify the cropped image here and

00:04:02.450 --> 00:04:05.720
again create a de-blurred result,
much more crisper.

