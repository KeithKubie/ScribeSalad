WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
The answer is the first one.

00:00:02.000 --> 00:00:06.000
The property that we need is to provide this collision resistance property.

00:00:06.000 --> 00:00:09.000
All of these provide the compression needed.

00:00:09.000 --> 00:00:11.000
We're taking a large input x that could be any size,

00:00:11.000 --> 00:00:13.000
turning it into the size of 1 block.

00:00:13.000 --> 00:00:17.000
The other 3 don't provide the collision resistance we need.

00:00:17.000 --> 00:00:22.000
So with counter mode, the value of the last output block is the encryption of the last block

00:00:22.000 --> 00:00:26.000
in the message XORed with the counter value and the nonce.

00:00:26.000 --> 00:00:30.000
That doesn't depend on any other blocks in the message.

00:00:30.000 --> 00:00:31.000
It only depends on the last block.

00:00:31.000 --> 00:00:34.000
It depends on the length--the number of blocks before that.

00:00:34.000 --> 00:00:38.000
But if we want to find that pair of values, x and y that hash to the same value,

00:00:38.000 --> 00:00:40.000
well, in this case that's easy.

00:00:40.000 --> 00:00:43.000
We can change any of the previous blocks.

00:00:43.000 --> 00:00:45.000
For the other 2, it's a little less clear to see that.

00:00:45.000 --> 00:00:49.000
The ouptut does depend on all of the input

00:00:49.000 --> 00:00:51.000
because we're XORing all those inputs into the ouput,

00:00:51.000 --> 00:00:55.000
but there are lots of things we could do that would still allow us to find collisions.

00:00:55.000 --> 00:01:00.000
One example with ECB mode--well, we can just flip the messages.

00:01:00.000 --> 00:01:02.000
If we swapped the first block of the message with the second block of the message,

00:01:02.000 --> 00:01:06.000
the XOR of all the output blocks will still be the same

00:01:06.000 --> 00:01:09.000
since with ECB mode these will encrypt to the same thing.

00:01:09.000 --> 00:01:11.000
With counter mode, this swap is not quite as simple.

00:01:11.000 --> 00:01:14.000
We'd have to adjust what's in the block to also adjust the change in the counter,

00:01:14.000 --> 00:01:18.000
but we could produce things that hash to the same value.

00:01:18.000 --> 00:01:19.000
So none of these would work.

00:01:19.000 --> 00:01:23.000
The first one is actually pretty close to what traditional hash functions used,

00:01:23.000 --> 00:01:27.000
and it's a construction known as the Merkle-Dangard Construction,

00:01:27.000 --> 00:01:30.000
which is quite similar to CBC mode encryption.

00:01:30.000 --> 00:01:32.000
Since it's a hash, we don't need a secret key.

00:01:32.000 --> 00:01:35.000
We can use the same key for each steps.

00:01:35.000 --> 00:01:37.000
We could select the key being 0.

00:01:37.000 --> 00:01:40.000
There are some subtleties to make this work as a hash function,

00:01:40.000 --> 00:01:45.000
and in fact, there's a lot of controversy today about how well hash functions work.

00:01:45.000 --> 00:01:50.000
The ones that were considered the standard, until recently, was a hash function known as

00:01:50.000 --> 00:01:54.000
SHA-1. This was a standard accepted by NIST.

00:01:54.000 --> 00:01:57.000
People have found ways to find collisions in SHA-1.

00:01:57.000 --> 00:02:02.000
There's an ongoing competition to select a new standard hash to find a replacement--

00:02:02.000 --> 00:02:07.000
to find a hash function that is closer to achieving these properties,

00:02:07.000 --> 00:02:11.000
and it's expected that the winner will be announced in 2012.

00:02:11.000 --> 00:02:14.000
There are 5 finalists currently under consideration.

00:02:14.000 --> 00:02:18.000
We're not going to look any more in detail at how to construct a modern hash function.

00:02:18.000 --> 00:02:22.000
Instead we're going to assume that we have an ideal one.

