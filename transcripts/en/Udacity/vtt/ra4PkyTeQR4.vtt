WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:02.670
So far, we've only
been requesting the server

00:00:02.669 --> 00:00:05.650
to send data to us
using the GET method.

00:00:05.650 --> 00:00:07.890
However, sometimes you
might want the user

00:00:07.889 --> 00:00:10.679
to type in some data
or upload a picture

00:00:10.679 --> 00:00:13.059
and send that to the server.

00:00:13.060 --> 00:00:15.150
This is where the POST
method comes into play

00:00:15.150 --> 00:00:16.679
that we mentioned earlier.

00:00:16.679 --> 00:00:19.710
With a POST request, the
request itself can also

00:00:19.710 --> 00:00:21.780
have a payload, or
body, something we

00:00:21.780 --> 00:00:25.679
have already seen in
responses but not in requests.

00:00:25.679 --> 00:00:27.780
What exactly happens
to the data once it

00:00:27.780 --> 00:00:30.929
has been sent to the server is
up to the back-end developer

00:00:30.929 --> 00:00:33.119
and is not in the
scope of this course.

00:00:33.119 --> 00:00:35.820
It is, however, important to
know that POST requests are

00:00:35.820 --> 00:00:39.030
potentially handled differently
by proxies and the browser

00:00:39.030 --> 00:00:40.439
than GET requests.

00:00:40.439 --> 00:00:42.269
Have you ever seen one of these?

00:00:42.270 --> 00:00:44.430
This is what happens when
the page you're currently

00:00:44.429 --> 00:00:47.880
looking at was the
result of a POST request.

00:00:47.880 --> 00:00:50.310
If you try to reload
such a website,

00:00:50.310 --> 00:00:53.490
the browser will prompt you
to confirm this reload action,

00:00:53.490 --> 00:00:56.730
as POST requests are allowed
to be destructive operations,

00:00:56.729 --> 00:01:00.239
and repeating it might be more
destructive than you originally

00:01:00.240 --> 00:01:01.380
intended.

00:01:01.380 --> 00:01:03.240
That's why it is
usually recommended

00:01:03.240 --> 00:01:04.890
for the back-end
developer to not

00:01:04.890 --> 00:01:08.760
respond to a POST request with
a web site but with a redirect,

00:01:08.760 --> 00:01:11.190
to avoid this rather
jarring behavior.

00:01:11.189 --> 00:01:14.489
For the user, this redirect
is practically invisible

00:01:14.489 --> 00:01:17.390
but avoids the
problems of a reload.

