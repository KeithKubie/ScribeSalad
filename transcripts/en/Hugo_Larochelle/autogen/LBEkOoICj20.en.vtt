WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.819
 in this capsule we started 

00:00:02.520 --> 00:00:09.030
 our description of the algorithms of 

00:00:05.819 --> 00:00:11.759
 heuristic research then the 

00:00:09.030 --> 00:00:14.030
 objectives of this part of the short this 

00:00:11.759 --> 00:00:17.279
 will be first to learn to 

00:00:14.030 --> 00:00:19.080
 formulate the resolution of a problem to 

00:00:17.279 --> 00:00:21.720
 using a search in a graph 

00:00:19.080 --> 00:00:24.150
 then we will look specifically 

00:00:21.720 --> 00:00:26.670
 the star algorithm to solve this 

00:00:24.150 --> 00:00:30.230
 kind of problem and that will get us to 

00:00:26.670 --> 00:00:32.550
 talk about the notions of ristic and 

00:00:30.230 --> 00:00:35.340
 to explore the theoretical properties of 

00:00:32.550 --> 00:00:37.320
 the star algorithm and finally we're going 

00:00:35.340 --> 00:00:39.120
 see a description of the algorithm that 

00:00:37.320 --> 00:00:42.120
 will allow you to learn how to 

00:00:39.120 --> 00:00:46.590
 implement and simulate the algorithm to 

00:00:42.120 --> 00:00:48.360
 star we will start by looking in 

00:00:46.590 --> 00:00:51.180
 burst different types of problems 

00:00:48.360 --> 00:00:53.969
 that we will be able to solve with the help of the 

00:00:51.180 --> 00:00:56.910
 heuristic search so a problem 

00:00:53.969 --> 00:00:59.129
 very simple is that of finding a 

00:00:56.910 --> 00:01:01.770
 path between two places in a 

00:00:59.129 --> 00:01:03.989
 city ​​so let's imagine I find myself 

00:01:01.770 --> 00:01:06.900
 in a city with horizontal streets 

00:01:03.989 --> 00:01:08.490
 and vertical and that I'm at 

00:01:06.900 --> 00:01:09.930
 certain places 

00:01:08.490 --> 00:01:12.240
 then I want to go to a 

00:01:09.930 --> 00:01:13.470
 some destinations but using 

00:01:12.240 --> 00:01:14.850
 the heuristic research that we are going to be 

00:01:13.470 --> 00:01:17.090
 able to find out what's the path 

00:01:14.850 --> 00:01:18.900
 the most that between the source 

00:01:17.090 --> 00:01:22.140
 the place where our 

00:01:18.900 --> 00:01:25.110
 destination that's an example 

00:01:22.140 --> 00:01:26.580
 maybe a little played and simplified but 

00:01:25.110 --> 00:01:28.470
 really have an algorithm that is 

00:01:26.580 --> 00:01:30.450
 able to be generalized to networks 

00:01:28.470 --> 00:01:32.009
 much more complex where we have 

00:01:30.450 --> 00:01:34.650
 different cities to different 

00:01:32.009 --> 00:01:38.220
 interconnected road networks between 

00:01:34.650 --> 00:01:41.430
 them and like a little like the problem of 

00:01:38.220 --> 00:01:43.860
 who ultimately solved by the website 

00:01:41.430 --> 00:01:46.799
 google maps be able to find a 

00:01:43.860 --> 00:01:49.399
 route between imposition to a 

00:01:46.799 --> 00:01:49.399
 position b 

00:01:49.740 --> 00:01:55.590
 another application example is going to be 

00:01:52.170 --> 00:01:58.340
 that of planning a robot on 

00:01:55.590 --> 00:02:01.409
 has an example here where we have a robot in 

00:01:58.340 --> 00:02:04.649
 a factory with several pieces and 

00:02:01.409 --> 00:02:06.370
 where we actually want to move different 

00:02:04.649 --> 00:02:09.369
 pieces of 

00:02:06.370 --> 00:02:11.350
 so different package actually between 

00:02:09.369 --> 00:02:14.680
 different pieces to reach 

00:02:11.350 --> 00:02:17.620
 possibly a configuration of all 

00:02:14.680 --> 00:02:21.880
 packages that is different than the one to 

00:02:17.620 --> 00:02:24.580
 which we start our problem at 

00:02:21.880 --> 00:02:26.530
 using a search algorithm 

00:02:24.580 --> 00:02:27.340
 heuristic for example algorithms in 

00:02:26.530 --> 00:02:28.390
 star 

00:02:27.340 --> 00:02:32.650
 what are we going to see if it's going to be able 

00:02:28.390 --> 00:02:34.120
 to deliver ckoi the algorithm what is it 

00:02:32.650 --> 00:02:35.740
 planning to do what is the 

00:02:34.120 --> 00:02:38.830
 series of actions offered by the robot 

00:02:35.740 --> 00:02:42.210
 to make her move the way 

00:02:38.830 --> 00:02:42.210
 the most effective possible 

00:02:42.960 --> 00:02:46.570
 another application of algae from 

00:02:45.580 --> 00:02:49.240
 rustic search 

00:02:46.570 --> 00:02:52.660
 it's still an obligation of robots or 

00:02:49.240 --> 00:02:55.150
 for example we would be given a 

00:02:52.660 --> 00:02:58.600
 observation that would give us sight of 

00:02:55.150 --> 00:03:02.530
 as the crow flies the land in which must 

00:02:58.600 --> 00:03:05.350
 to move a robot and in this case 

00:03:02.530 --> 00:03:07.600
 what we would like to do is if our 

00:03:05.350 --> 00:03:09.820
 beautiful start let's say the position here and 

00:03:07.600 --> 00:03:11.140
 we want him to go here but 

00:03:09.820 --> 00:03:12.610
 is able to determine what is it 

00:03:11.140 --> 00:03:15.580
 the path to follow to meet the 

00:03:12.610 --> 00:03:18.489
 fewer possible obstacles remained 

00:03:15.580 --> 00:03:21.700
 on the easiest terrain to 

00:03:18.489 --> 00:03:24.370
 browse for the robot using 

00:03:21.700 --> 00:03:26.080
 actually this type of system there is rather 

00:03:24.370 --> 00:03:28.570
 complicated different algorithms 

00:03:26.080 --> 00:03:32.620
 behind but among others the routine 

00:03:28.570 --> 00:03:35.200
 problem-solving routines 

00:03:32.620 --> 00:03:39.209
 via the star algorithm are between 

00:03:35.200 --> 00:03:39.209
 others evoked in this type of system there 

00:03:39.239 --> 00:03:45.760
 another example this real-there resolution 

00:03:42.430 --> 00:03:48.100
 puzzle game an example of a very game 

00:03:45.760 --> 00:03:50.890
 simple is the npws hall where we have a 

00:03:48.100 --> 00:03:53.230
 grid so in that 6 3 by 3 with 

00:03:50.890 --> 00:03:54.310
 an element of the grid that is empty and 

00:03:53.230 --> 00:03:56.380
 the other elements that would be 

00:03:54.310 --> 00:03:59.830
 associated with tiles with a number one 

00:03:56.380 --> 00:04:01.780
 up to 8 and the goal of the game is to 

00:03:59.830 --> 00:04:05.470
 start an initial setup 

00:04:01.780 --> 00:04:07.480
 and 2 will be in bus configuration or in 

00:04:05.470 --> 00:04:11.590
 this case also a reality of one up to 8 

00:04:07.480 --> 00:04:13.269
 who would go around our crime is 

00:04:11.590 --> 00:04:14.500
 so again with an algorithm 

00:04:13.269 --> 00:04:16.540
 heuristic search it's going to be 

00:04:14.500 --> 00:04:18.220
 possible to find what is next 

00:04:16.540 --> 00:04:19.630
 actions so following the 

00:04:18.220 --> 00:04:21.600
 current displacements 

00:04:19.630 --> 00:04:24.580
 you have an example if we move 

00:04:21.600 --> 00:04:27.550
 the current 6 down so we move 

00:04:24.580 --> 00:04:28.530
 northward the part of the grid that 

00:04:27.550 --> 00:04:31.120
 is empty 

00:04:28.530 --> 00:04:34.720
 so that's a possible action and 

00:04:31.120 --> 00:04:36.010
 with a heuristic research group 

00:04:34.720 --> 00:04:37.810
 we are finally able to 

00:04:36.010 --> 00:04:42.130
 determine the series of actions to be done 

00:04:37.810 --> 00:04:49.740
 to finally arrive at the solution 

00:04:42.130 --> 00:04:52.900
 desire or the solution of an enigma so 

00:04:49.740 --> 00:04:56.860
 in general when solving 

00:04:52.900 --> 00:04:58.840
 a problem we often follow in a way 

00:04:56.860 --> 00:05:00.820
 very general to roughly solve 

00:04:58.840 --> 00:05:04.180
 Any problem is 

00:05:00.820 --> 00:05:06.100
 start by modeling our 

00:05:04.180 --> 00:05:09.190
 environment where the current situation 

00:05:06.100 --> 00:05:11.080
 the context of net applications then 

00:05:09.190 --> 00:05:14.370
 of care to list all the solutions 

00:05:11.080 --> 00:05:18.310
 paul possible a plate of the others 

00:05:14.370 --> 00:05:20.140
 to evaluate the value or blow the 

00:05:18.310 --> 00:05:22.600
 performance measure of each of these 

00:05:20.140 --> 00:05:26.440
 solutions there then finally to keep 

00:05:22.600 --> 00:05:29.170
 the one that is associated with mermoz or 

00:05:26.440 --> 00:05:31.750
 performance or in this case also who 

00:05:29.170 --> 00:05:36.670
 allows to finally satisfy our 

00:05:31.750 --> 00:05:37.900
 goal of solutions and the problem 

00:05:36.670 --> 00:05:40.540
 that we are facing and that for 

00:05:37.900 --> 00:05:42.280
 several applications the number of 

00:05:40.540 --> 00:05:45.250
 possible solutions and exponential and 

00:05:42.280 --> 00:05:46.750
 so this approach to enumerate all 

00:05:45.250 --> 00:05:49.750
 solutions in an arbitrary order 

00:05:46.750 --> 00:05:51.370
 and just not applicable so 

00:05:49.750 --> 00:05:53.590
 the problem to solve is to comment 

00:05:51.370 --> 00:05:56.740
 what we can go through this list of 

00:05:53.590 --> 00:05:58.510
 solutions there in an efficient and 

00:05:56.740 --> 00:06:00.190
 meanwhile allowing us not to 

00:05:58.510 --> 00:06:02.590
 eventually all of them browse and then 

00:06:00.190 --> 00:06:05.620
 to go through a very small whole 

00:06:02.590 --> 00:06:06.730
 is to arrive at a situation where we are 

00:06:05.620 --> 00:06:07.860
 guarantee that the solution has been found 

00:06:06.730 --> 00:06:10.480
 optimal 

00:06:07.860 --> 00:06:12.640
 is what we will see is that in fact 

00:06:10.480 --> 00:06:14.530
 it's possible to do this kind of 

00:06:12.640 --> 00:06:16.480
 effective journey by formulating our 

00:06:14.530 --> 00:06:19.570
 problem as a research problem 

00:06:16.480 --> 00:06:21.910
 in a grave in our graph each 

00:06:19.570 --> 00:06:22.800
 will only match one and todd of our 

00:06:21.910 --> 00:06:25.090
 environment 

00:06:22.800 --> 00:06:27.700
 now every way in our 

00:06:25.090 --> 00:06:31.419
 graph will correspond to a sequel 

00:06:27.700 --> 00:06:32.569
 actions taken by our agent is in 

00:06:31.419 --> 00:06:35.149
 do each 

00:06:32.569 --> 00:06:37.369
 the links between two will not match 

00:06:35.149 --> 00:06:40.509
 finally to a single action taken by 

00:06:37.369 --> 00:06:43.429
 notable to solve our problem 

00:06:40.509 --> 00:06:45.979
 we will have to find the path that 

00:06:43.429 --> 00:06:47.149
 best meets our measure 

00:06:45.979 --> 00:06:49.159
 of performance 

00:06:47.149 --> 00:06:51.679
 so we see that with algorithms of 

00:06:49.159 --> 00:06:54.139
 heuristic search we're going to be in 

00:06:51.679 --> 00:06:57.649
 able to do this exploration there of 

00:06:54.139 --> 00:07:01.629
 our graph effectively for 

00:06:57.649 --> 00:07:01.629
 solve problems pretty quickly 

