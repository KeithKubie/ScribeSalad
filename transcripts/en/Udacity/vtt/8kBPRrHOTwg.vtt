WEBVTT
Kind: captions
Language: en

00:00:00.005 --> 00:00:04.600
To understand how the multi-level
page table saves space,

00:00:04.600 --> 00:00:09.150
let's look at an example of a simple and
small two-level page table.

00:00:09.150 --> 00:00:12.470
In this example,
we will use a very small virtual address

00:00:12.470 --> 00:00:16.590
where we have an offset and the page
number, and each of these is 4 bits.

00:00:16.590 --> 00:00:19.350
So using a flat page table,

00:00:19.350 --> 00:00:24.650
we would need 2 to the 4th entries in
it, one for each possible page number.

00:00:24.650 --> 00:00:26.980
So the entries would be
numbered 0 through 15.

00:00:26.980 --> 00:00:32.980
And we would index with our page
number here, and get our frame number.

00:00:32.980 --> 00:00:34.899
With the two-level page table,

00:00:34.899 --> 00:00:39.430
let's say we split this 4-bit page
number into two 2-bit pieces.

00:00:39.430 --> 00:00:43.330
So the same virtual address
still has a 4-bit page number

00:00:43.330 --> 00:00:46.410
that we split into two, 2-bit pieces.

00:00:46.410 --> 00:00:48.950
The outer part of the page number

00:00:48.950 --> 00:00:52.750
is used to index into a four-entry
outer page table, and

00:00:52.750 --> 00:00:59.010
each entry in this outer page table can
point to a four-entry inner page table.

00:00:59.010 --> 00:01:02.240
So in total,
we have fourinner page tables.

00:01:02.240 --> 00:01:06.700
Once we find the pointer to
the correct one, we can use

00:01:06.700 --> 00:01:11.580
the inner part of the page number
to tell us which entry to use and

00:01:11.580 --> 00:01:13.410
that gives us our frame number.

00:01:13.410 --> 00:01:19.420
So as indicated previously, the total
size of all the inner page tables

00:01:19.420 --> 00:01:24.080
here is the same as the original
size of the flat page table here.

00:01:24.080 --> 00:01:28.970
We had 16 entries here,
we have 4 times 4 entries here,

00:01:28.970 --> 00:01:32.840
plus we added the space for
the outer page table.

00:01:32.840 --> 00:01:34.850
So where are the savings?

00:01:34.850 --> 00:01:40.660
The savings are in that if there is an
unused large part of the address space,

00:01:40.660 --> 00:01:45.750
such that all of these entries do
not correspond to physical memory,

00:01:47.160 --> 00:01:51.980
then we don't need this and
we can mark here in the outer page table

00:01:51.980 --> 00:01:57.440
that the entry's not necessary, and then
we can eliminate this inner page table.

00:01:57.440 --> 00:02:01.990
In a larger address space the outer
page table will have many pointers,

00:02:01.990 --> 00:02:07.850
most of which will point to inner page
tables like this, so we eliminate them.

00:02:07.850 --> 00:02:12.970
So we end up having one reasonably
large outer page table, but

00:02:12.970 --> 00:02:15.300
one that we can fit in memory.

00:02:15.300 --> 00:02:19.540
And a small number of inner page tables,
each of which is reasonably sized,

00:02:19.540 --> 00:02:21.530
and fits in memory.

00:02:21.530 --> 00:02:25.650
But we don't have most of the inner
page tables, so we save a lot of space.

