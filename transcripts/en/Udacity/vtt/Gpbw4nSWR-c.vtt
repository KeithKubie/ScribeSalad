WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:03.240
I'm going to take a moment getting around to the answer to this question,

00:00:03.240 --> 00:00:07.110
because there is so many different mistakes one can make right here.

00:00:07.110 --> 00:00:09.870
Let's explore some of the incorrect options before we arrive at

00:00:09.870 --> 00:00:11.130
the right answer.

00:00:11.130 --> 00:00:14.000
A simple idea might be to repeat the code that we saw in

00:00:14.000 --> 00:00:17.860
the car function right here in the Van subclass constructor.

00:00:17.860 --> 00:00:19.630
Since there's so little of it.

00:00:19.630 --> 00:00:24.520
Notice this would have the effect of creating a loc property on every instance.

00:00:24.520 --> 00:00:27.260
And that loc property would point to the number in question.

00:00:27.260 --> 00:00:31.360
But that's not exactly what we want if it forces us to repeat the same code in

00:00:31.360 --> 00:00:32.320
two different places.

00:00:33.500 --> 00:00:35.800
But this poses a few issues.

00:00:35.800 --> 00:00:39.110
For one, if you ever change how instantiation works,

00:00:39.110 --> 00:00:42.060
you would have to remember to change both places.

00:00:42.060 --> 00:00:45.110
Furthermore, you can tell that the logic here is quite simple, but

00:00:45.110 --> 00:00:47.110
that's just for the purpose of our example.

00:00:47.110 --> 00:00:48.200
In most classes,

00:00:48.200 --> 00:00:51.630
there's going to be a lot more code in a super class constructor.

00:00:51.630 --> 00:00:54.340
You would have to repeat in the subclass.

00:00:54.340 --> 00:00:56.480
So we have a bit of a puzzle on our hands.

00:00:56.480 --> 00:00:59.870
We'd really like to simply run the Car function in the middle of

00:00:59.870 --> 00:01:01.380
the Van function.

00:01:01.380 --> 00:01:05.470
But in such a way that it modifies the new van instance that's being created.

00:01:05.470 --> 00:01:09.150
You might suppose we could simply call car the way you normally do

00:01:09.150 --> 00:01:10.720
with the keyword new in front of it.

00:01:10.720 --> 00:01:13.320
But this is problematic for a couple of reasons.

00:01:13.320 --> 00:01:15.950
What would you expect the effect of this technique to

00:01:15.950 --> 00:01:18.120
be on your in-memory model?

00:01:18.120 --> 00:01:21.070
Take a moment to imagine how this code would play out when it's

00:01:21.070 --> 00:01:21.740
actually running.

00:01:22.750 --> 00:01:26.890
For reference, here is the in memory model that we're starting to build up.

00:01:26.890 --> 00:01:30.800
The answer is that if we tried to call the Car function with the keyword new,

00:01:30.800 --> 00:01:34.970
it's going to have the effect of creating another new instance object,

00:01:34.970 --> 00:01:37.410
in addition to the one that got created in Rhonda JS,

00:01:37.410 --> 00:01:40.040
as a result of calling new van.

