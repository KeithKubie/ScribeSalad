WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:03.883
While it's great that we can query
our database through the content provider,

00:00:03.993 --> 00:00:06.856
it would be nice if we
could also use the content provider

00:00:06.856 --> 00:00:07.910
to put data in.

00:00:08.280 --> 00:00:10.040
We'll begin with the insert function.

00:00:11.450 --> 00:00:14.470
Let's fill the insert function
with the same Uri matcher code

00:00:14.470 --> 00:00:16.740
we had in the other
content provider functions

00:00:17.440 --> 00:00:19.130
but with one change.

00:00:19.300 --> 00:00:21.780
We're only going to match
the base Uris.

00:00:22.160 --> 00:00:23.660
There's a good reason for this.

00:00:24.770 --> 00:00:26.730
When we insert into our database,

00:00:26.730 --> 00:00:29.500
we want it to notify
every content observer

00:00:29.500 --> 00:00:32.119
that might have data modified
by our insert.

00:00:32.689 --> 00:00:35.920
It turns out that cursors
register themselves as notify

00:00:35.920 --> 00:00:40.040
for descendants which means
that notifying the root Uri,

00:00:40.040 --> 00:00:42.760
we'll also notify
all descendants of that Uri.

00:00:43.550 --> 00:00:45.690
If we were to notify
based on anything else

00:00:45.690 --> 00:00:48.150
other than the root Uri,
then a cursor

00:00:48.150 --> 00:00:50.780
listening on the root Uri
will not get notified

00:00:50.780 --> 00:00:52.873
of a change that
would certainly impact it.

00:00:52.873 --> 00:00:55.136
So we have to be very careful
when doing that.

00:00:55.696 --> 00:00:57.790
For this reason it makes a lot of sense

00:00:57.790 --> 00:01:01.480
to only allow insertions
at our root Uri into our database.

00:01:02.330 --> 00:01:05.410
That way, it's very, very easy
to handle notifications.

00:01:05.740 --> 00:01:07.080
It means that we
also don't have to build

00:01:07.080 --> 00:01:09.310
a combination query for our insert,

00:01:09.310 --> 00:01:11.650
containing a parameter
coming from the Uri,

00:01:11.650 --> 00:01:13.900
with the rest of the parameters
coming from a function.

00:01:14.110 --> 00:01:18.260
So for weather we just pass the parameters
into a database insert call.

00:01:19.070 --> 00:01:21.430
We should throw an exception
if the insert fails.

00:01:22.630 --> 00:01:24.190
The only trick here is to make sure

00:01:24.190 --> 00:01:26.980
we return the correct value,
which is a Uri.

00:01:27.680 --> 00:01:30.500
Fortunately we made a function
to build these Uri's

00:01:30.540 --> 00:01:33.670
which contain the weather path
followed by an _id.

00:01:34.030 --> 00:01:35.410
Let's go task this.

00:01:36.060 --> 00:01:40.270
Once again, we go to TestProvider
and we modify our test.

00:01:41.010 --> 00:01:44.650
Because, after all, it's supposed
to be testInsertReadProvider.

00:01:45.540 --> 00:01:47.193
Here's our insert statement.

00:01:47.193 --> 00:01:49.006
Obviously it's still talking
to the database.

00:01:49.276 --> 00:01:51.210
We're going to want to make it
talk to the provider.

00:01:51.610 --> 00:01:53.850
As always, that's pretty straightforward.

00:01:54.220 --> 00:01:56.910
We always get our provider
by using our ContentResolver

00:01:56.910 --> 00:01:59.540
so we can replace
this insert statement with the db.

00:01:59.540 --> 00:02:01.570
with a ContentResolver instead.

00:02:01.970 --> 00:02:05.680
And, of course, we don't use
a ContentResolver against a TABLE_NAME.

00:02:06.120 --> 00:02:10.288
Instead we do it against
the WeatherEntry.CONTENT_URI.

00:02:11.070 --> 00:02:12.400
But there's still something wrong.

00:02:12.820 --> 00:02:17.690
Of course, we don't actually return
the weatherRowId, we return a Uri.

00:02:18.290 --> 00:02:20.410
But we can still get a weatherRowId.

00:02:20.600 --> 00:02:23.120
How do we do that?
Quite simply.

00:02:23.500 --> 00:02:26.910
Using a helper function in ContentUris,

00:02:26.910 --> 00:02:28.880
and we don't really need that insert.

00:02:29.240 --> 00:02:31.520
After all, we know that
this ContentResolver function

00:02:31.520 --> 00:02:34.902
isn't actually going to return
unless the value is true.

00:02:34.902 --> 00:02:36.832
Now that we finished that,
let's run the test,

00:02:36.832 --> 00:02:39.492
and make sure that we can actually
insert using our content provider.

00:02:39.842 --> 00:02:41.261
And our test passed.

00:02:42.811 --> 00:02:44.400
Well, you know what time it is.

00:02:44.850 --> 00:02:47.130
Time for you to write
some of this as well.

