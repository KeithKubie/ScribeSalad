WEBVTT
Kind: captions
Language: en

00:00:00.720 --> 00:00:02.790
MALE SPEAKER: In this video,
I'll cover how to pass

00:00:02.790 --> 00:00:05.300
arguments to existing functions
inside the functions

00:00:05.300 --> 00:00:06.880
you are creating.

00:00:06.880 --> 00:00:09.440
To do so I'll use the website,
Revenue Data, highlighted in

00:00:09.440 --> 00:00:12.280
the last section.

00:00:12.280 --> 00:00:14.640
I'd like to create a function
that summarizes the revenue

00:00:14.640 --> 00:00:16.400
and other objects like it.

00:00:16.400 --> 00:00:18.410
I'll call the function,
RevSummary.

00:00:18.410 --> 00:00:20.760
And it'll take just one argument
that should be a data

00:00:20.760 --> 00:00:24.500
frame, or a matrix, where the
rows represent days, columns

00:00:24.500 --> 00:00:27.700
represent different websites,
and entries represent revenue

00:00:27.700 --> 00:00:30.530
for the websites on each day.

00:00:30.530 --> 00:00:32.759
I'll build in a simple check
to make sure that the data

00:00:32.759 --> 00:00:36.310
object comes in in a form of
a matrix or a data frame.

00:00:36.310 --> 00:00:38.640
If it doesn't, then I'll provide
a suitable error.

00:00:41.160 --> 00:00:44.720
Next, I'll calculate two
summaries, the average revenue

00:00:44.720 --> 00:00:46.440
per company and the
average revenue

00:00:46.440 --> 00:00:47.690
per day for the companies.

00:00:50.250 --> 00:00:53.560
In a previous video, I used the
Apply function for this,

00:00:53.560 --> 00:00:55.160
but here I'll use two
functions that are

00:00:55.160 --> 00:00:57.450
specifically built for taking
the Mean across rows and

00:00:57.450 --> 00:01:00.170
columns, rowMeans
and colMeans.

00:01:03.170 --> 00:01:05.630
I'll return those results in a
list with two items that will

00:01:05.630 --> 00:01:09.120
be returned at the close of the
function, mean revenue per

00:01:09.120 --> 00:01:12.860
company, and mean
revenue per day.

00:01:12.860 --> 00:01:17.660
Finally, I'll apply my new
function to the revenue data.

00:01:17.660 --> 00:01:21.590
When I execute the function, I
get a list back, as expected.

00:01:21.590 --> 00:01:23.930
However, there are some n/a
values that indicate that some

00:01:23.930 --> 00:01:25.260
data are missing.

00:01:25.260 --> 00:01:27.500
Here I'll identify which
observations in the revenue

00:01:27.500 --> 00:01:30.100
data are missing using the is
n/a function together with the

00:01:30.100 --> 00:01:32.786
which function, and an
additional argument, array

00:01:32.786 --> 00:01:35.810
index equals true.

00:01:35.810 --> 00:01:39.210
The first is for the 12th day
and the third company.

00:01:39.210 --> 00:01:43.400
The second is for the 13th day
and the third company.

00:01:43.400 --> 00:01:45.860
It's possible that some end
users of this function,

00:01:45.860 --> 00:01:48.720
including myself, may
occasionally want to have such

00:01:48.720 --> 00:01:51.450
observations omitted from the
calculations in the functions

00:01:51.450 --> 00:01:53.980
using an n/a argument, similar
to how we've seen this

00:01:53.980 --> 00:01:56.820
argument used with
other functions.

00:01:56.820 --> 00:01:59.390
However, this n/a remove
argument would need to be

00:01:59.390 --> 00:02:02.570
passed to both row Means
and col Means.

00:02:02.570 --> 00:02:04.360
This is fine, but it's actually
a little bit more

00:02:04.360 --> 00:02:07.280
generalizable to accept an
arbitrary number of arguments

00:02:07.280 --> 00:02:10.210
be passed to these functions.

00:02:10.210 --> 00:02:12.860
I can do this using an ellipsis
in RevSummary's

00:02:12.860 --> 00:02:14.600
declaration.

00:02:14.600 --> 00:02:16.760
This allows the RevSummary
function to accept extra

00:02:16.760 --> 00:02:20.300
arguments not specified in
the function declaration.

00:02:20.300 --> 00:02:23.370
Next, I indicate which functions
should receive these

00:02:23.370 --> 00:02:25.820
extra arguments.

00:02:25.820 --> 00:02:28.290
Since my intention here is to
allow users to pass the n/a

00:02:28.290 --> 00:02:31.930
remove argument to rowMeans
and colMeans I will add an

00:02:31.930 --> 00:02:33.665
ellipsis to the end of each
of these functions.

00:02:36.910 --> 00:02:40.010
Now, if I pass n/a remove
equals true into the

00:02:40.010 --> 00:02:42.550
RevSummary function, this
argument will be passed to the

00:02:42.550 --> 00:02:45.550
rowMeans and colMeans functions,
which will then

00:02:45.550 --> 00:02:48.900
remove the n/a values from
the calculations.

00:02:48.900 --> 00:02:51.630
Note that if you want, you may
access the arguments from the

00:02:51.630 --> 00:02:54.980
ellipsis in your function using
the List function with

00:02:54.980 --> 00:02:57.680
an ellipsis as its argument.

00:02:57.680 --> 00:03:00.180
In this way, you may also write
functions that allow for

00:03:00.180 --> 00:03:02.500
an arbitrary number of
arguments, and then access all

00:03:02.500 --> 00:03:06.000
of those arguments in a list.

00:03:06.000 --> 00:03:08.210
What's been covered in this
video is how to easily pass

00:03:08.210 --> 00:03:10.660
additional arguments inside
your functions, and how to

00:03:10.660 --> 00:03:14.530
access those extra arguments
using the List function.

00:03:14.530 --> 00:03:17.150
In the next video, I'll show
how to hide function output

00:03:17.150 --> 00:03:19.010
that might flood a
user's screen.

00:03:19.010 --> 00:03:21.320
And I'll also cover a useful
tool for building recursive

00:03:21.320 --> 00:03:23.660
functions, which are functions
that call themselves.

