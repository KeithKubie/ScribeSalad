WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.412
[MUSIC PLAYING]

00:00:05.412 --> 00:00:07.330
Hello, and welcome
to Dev.Bytes.

00:00:07.330 --> 00:00:09.330
My name is Jan-Felix Schmakeit,
and I'm from the

00:00:09.330 --> 00:00:10.980
Android Developer
Relations team.

00:00:10.980 --> 00:00:13.160
In this episode, we are looking
at the Hierarchy

00:00:13.160 --> 00:00:16.440
Viewer and how you can use that
tool to help you optimize

00:00:16.440 --> 00:00:18.930
your layouts and views
in your application.

00:00:18.930 --> 00:00:21.890
And we are going to be using
the BaconReader sample

00:00:21.890 --> 00:00:23.530
application again that you've
seen in one of the other

00:00:23.530 --> 00:00:24.840
Dev.Bytes before.

00:00:24.840 --> 00:00:26.780
Let's have a look at our
Hierarchy Viewer again,

00:00:26.780 --> 00:00:28.800
because I noticed there's
something strange going on in

00:00:28.800 --> 00:00:30.190
one of our layouts.

00:00:30.190 --> 00:00:34.290
So we have our main article
view, where we have some text,

00:00:34.290 --> 00:00:36.140
we have a title, and we have a
background picture, and then

00:00:36.140 --> 00:00:38.550
we have our main body of text
here, so it's what's happening

00:00:38.550 --> 00:00:42.040
here at the top of
the current view.

00:00:42.040 --> 00:00:44.980
And our hierarchy looks very,
very complicated.

00:00:44.980 --> 00:00:47.670
We have RelativeLayout and
then we have FrameLayout.

00:00:47.670 --> 00:00:49.840
And then we have the ImageView
and then we have

00:00:49.840 --> 00:00:50.270
TextView down here.

00:00:50.270 --> 00:00:52.310
So we can definitely
simplify that.

00:00:52.310 --> 00:00:57.060
And each of these steps in our
layout adds extra time that's

00:00:57.060 --> 00:00:59.520
needed to measure and draw
everything to the screen.

00:00:59.520 --> 00:01:02.790
So if you go to our layout here,
so this is where we're

00:01:02.790 --> 00:01:08.610
defining what the image and
what the title looks like.

00:01:08.610 --> 00:01:10.270
So this is very, very
confusing, we have a

00:01:10.270 --> 00:01:12.510
RelativeLayout here,
FrameLayout, LinearLayout.

00:01:12.510 --> 00:01:15.380
Let's simplify this.

00:01:15.380 --> 00:01:20.770
So the way this is structured
is that we have an ImageView

00:01:20.770 --> 00:01:22.830
that has our main-- the big
picture that we have in the

00:01:22.830 --> 00:01:23.660
background.

00:01:23.660 --> 00:01:27.430
And then we have this gradient
on top of that.

00:01:27.430 --> 00:01:29.180
And then we have our title.

00:01:29.180 --> 00:01:31.045
And then we have a smaller
subtitle as well, a

00:01:31.045 --> 00:01:32.750
subheading.

00:01:32.750 --> 00:01:34.150
Let's simplify this a lot.

00:01:34.150 --> 00:01:37.140
What we can do is we can simply
have the ImageView, the

00:01:37.140 --> 00:01:38.180
big picture.

00:01:38.180 --> 00:01:40.555
And then we can just use one
simple view on top, we can use

00:01:40.555 --> 00:01:41.830
a TextView on top.

00:01:41.830 --> 00:01:44.560
In the TextView, we can specify
the background as the

00:01:44.560 --> 00:01:45.880
gradient that we have.

00:01:45.880 --> 00:01:50.770
We can set the gravity of our
text here to bottom, which

00:01:50.770 --> 00:01:54.590
means that the text that we've
put inside the title is drawn

00:01:54.590 --> 00:01:57.100
at the bottom of the image.

00:01:57.100 --> 00:01:59.070
This is all we have down here,
so we can have a place.

00:01:59.070 --> 00:02:01.150
All of this.

00:02:01.150 --> 00:02:03.240
The RelativeLayout, you
lay everything out.

00:02:03.240 --> 00:02:05.915
The simple FrameLayout, if you
have an ImageView, and you

00:02:05.915 --> 00:02:06.910
have a TextView on top.

00:02:06.910 --> 00:02:09.460
And the TextView contains
the background

00:02:09.460 --> 00:02:11.060
and the entire text.

00:02:11.060 --> 00:02:17.020
But you're saying, look, this
title, this headline actually

00:02:17.020 --> 00:02:18.380
contains two different
or three different

00:02:18.380 --> 00:02:20.010
types of text styles.

00:02:20.010 --> 00:02:21.790
We have our main headline,
and then some

00:02:21.790 --> 00:02:23.730
smaller text down below.

00:02:23.730 --> 00:02:27.320
To do that, we have to use
TextAppearance Spannables.

00:02:27.320 --> 00:02:31.800
And we have one simple TextView,
but you can style

00:02:31.800 --> 00:02:34.460
different parts of your
TextView differently.

00:02:34.460 --> 00:02:38.180
So here we have these
TextAppearanceSpan objects.

00:02:38.180 --> 00:02:41.500
And you're loading each of
them in with a different

00:02:41.500 --> 00:02:43.800
TextAppearance style that
we have to find in XML.

00:02:43.800 --> 00:02:46.660
That's just a normal style.

00:02:46.660 --> 00:02:47.990
We're loading this in.

00:02:47.990 --> 00:02:56.400
And then when we set up the
views, if we set the title,

00:02:56.400 --> 00:03:03.350
this is where we are loading
the text here.

00:03:03.350 --> 00:03:06.070
So we are using a
SpannableString to do this.

00:03:06.070 --> 00:03:09.600
And a SpannableString allows
you to set a text, and then

00:03:09.600 --> 00:03:11.400
you can apply different
spannables

00:03:11.400 --> 00:03:12.700
for parts of a text.

00:03:12.700 --> 00:03:16.420
So in our case here, the first
thing we do is we compile our

00:03:16.420 --> 00:03:18.080
text we want to display,
including the [INAUDIBLE]

00:03:18.080 --> 00:03:19.420
characters.

00:03:19.420 --> 00:03:24.430
And then we apply each of the
different texts appearances to

00:03:24.430 --> 00:03:26.150
a part of this string.

00:03:26.150 --> 00:03:28.700
In this case, here we have the
title appearance, we have the

00:03:28.700 --> 00:03:29.250
[? by-text ?]

00:03:29.250 --> 00:03:31.410
underneath that, and
then we have the

00:03:31.410 --> 00:03:33.440
AuthorAppearance as well.

00:03:33.440 --> 00:03:35.960
We basically just specify the
start and end characters.

00:03:35.960 --> 00:03:37.440
It's a normal character count.

00:03:37.440 --> 00:03:43.100
So once we've done that,
we basically set the

00:03:43.100 --> 00:03:48.750
SpannableString to our
TextView using the

00:03:48.750 --> 00:03:51.360
SpannableBuffer type, so that
it gets applied properly.

00:03:51.360 --> 00:03:58.330
We keep our setMovementMethod,
and we can remove our old way

00:03:58.330 --> 00:04:00.340
of setting the title.

00:04:00.340 --> 00:04:02.510
And if you start our application
again, you will

00:04:02.510 --> 00:04:04.930
see that it basically looks
exactly the same, but we have

00:04:04.930 --> 00:04:09.860
much, much fewer views than what
we had before, simply by

00:04:09.860 --> 00:04:12.370
using TextAppearance spannables
and combining them

00:04:12.370 --> 00:04:14.880
together into one
single TextView.

00:04:14.880 --> 00:04:16.630
So let's see what it
looks like here.

00:04:16.630 --> 00:04:18.870
And as you can see, it looks
basically identical to what we

00:04:18.870 --> 00:04:19.790
had before.

00:04:19.790 --> 00:04:23.160
But our layout hierarchy
is much, much simpler.

00:04:23.160 --> 00:04:24.980
So I really hope you're going
to try HierarchyView in your

00:04:24.980 --> 00:04:27.570
own application and see what it
looks like and how you can

00:04:27.570 --> 00:04:28.970
optimize your application
to make it

00:04:28.970 --> 00:04:30.220
perform much, much better.

