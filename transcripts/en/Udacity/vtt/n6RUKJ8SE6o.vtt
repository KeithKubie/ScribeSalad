WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Well, there are a number of ways to go about this--

00:00:02.000 --> 00:00:05.000
actually, an infinite number of ways to go about this.

00:00:05.000 --> 00:00:09.000
An entirely legitimate strategy but one that might feel almost like cheating

00:00:09.000 --> 00:00:11.000
would be just to put these together.

00:00:11.000 --> 00:00:16.000
You could submit the Python code that corresponds to either this or this or this.

00:00:16.000 --> 00:00:20.000
Now you're guaranteed that it accepts the three strings on the left and nothing else.

00:00:20.000 --> 00:00:23.000
Now, you'd have to be careful about how you group things or whatnot,

00:00:23.000 --> 00:00:27.000
so that the or and the parentheses would bind correctly, but that's one way to do it.

00:00:27.000 --> 00:00:32.000
Let's go see if we can make a more natural feeling regular expression that actually does it though.

00:00:32.000 --> 00:00:34.000
It looks like we definitely have to start with an a.

00:00:34.000 --> 00:00:39.000
Now I have my choice of what I want to say the difference is between these other strings--

00:00:39.000 --> 00:00:42.000
abb and here we've got aabbb.

00:00:42.000 --> 00:00:46.000
In some sense one of the key differences is the number of b's.

00:00:46.000 --> 00:00:51.000
Here's one regular expression that captures all the ones on the left and none of the ones on the right.

00:00:51.000 --> 00:00:56.000
It's an a*--so that gets this first one, and then after you're done with the a's,

00:00:56.000 --> 00:01:01.000
you may optionally have either bb or cc. Great.

00:01:01.000 --> 00:01:04.000
That gets 1, 2, and 3 but none of these to hers.

00:01:04.000 --> 00:01:08.000
This one is ruled because it's not bb cc with a's in front of it.

00:01:08.000 --> 00:01:10.000
These have too many b's. These have too many c's.

00:01:10.000 --> 00:01:13.000
But there are a large number of ways you could've done this.

00:01:13.000 --> 00:01:19.000
In fact, there is an area of study called learning theory that tries to make machines find patterns

00:01:19.000 --> 00:01:21.000
the same way that we can with our brain.

00:01:21.000 --> 00:01:27.000
There's a notion that you've really learned something when you've abstracted it to a small rule.

00:01:27.000 --> 00:01:32.000
The reason we're less happy with this answer up here is because its' over-fitting the data in some sense.

00:01:32.000 --> 00:01:36.000
It's just recording the yes instances. It's not really generalizing the pattern.

00:01:36.000 --> 00:01:41.000
We say that more learning is happening when we generalize a smaller pattern

00:01:41.000 --> 09:59:59.000
than just copying all of the available input, but that was by no means required for this problem.

