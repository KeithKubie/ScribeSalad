WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.860
[MUSIC PLAYING]

00:00:05.860 --> 00:00:08.330
Now before we add any kind
of sign-in button to our

00:00:08.330 --> 00:00:11.130
application, let's take a moment
to understand what's

00:00:11.130 --> 00:00:14.100
going on underneath the hood
when the user signs in.

00:00:14.100 --> 00:00:18.330
And that means it's time
for, ta-da, our

00:00:18.330 --> 00:00:21.030
introduction to OAuth 2.0.

00:00:21.030 --> 00:00:23.160
Now if you feel like you're
already an expert in this

00:00:23.160 --> 00:00:25.620
stuff, you know it like the back
of your hand, feel free

00:00:25.620 --> 00:00:27.150
to skip the rest
of this video.

00:00:27.150 --> 00:00:29.870
But you must be some kind of
crazy genius, because,

00:00:29.870 --> 00:00:32.530
frankly, I think this whole
topic is kind of complicated.

00:00:32.530 --> 00:00:33.970
You could write a whole
book on it.

00:00:33.970 --> 00:00:36.980
Come to think of it, this guy
did, and you should read it if

00:00:36.980 --> 00:00:40.270
you want a more thorough
understanding of OAuth 2.0.

00:00:40.270 --> 00:00:43.080
And that does mean for the
purposes of fitting this

00:00:43.080 --> 00:00:46.430
entire topic into a 10 to
15-minute YouTube video, I'm

00:00:46.430 --> 00:00:48.560
going to be over-simplifying
this thing in places.

00:00:48.560 --> 00:00:51.080
In fact, probably to the point
where some bits maybe aren't

00:00:51.080 --> 00:00:52.360
entirely accurate.

00:00:52.360 --> 00:00:54.030
Also, I should probably
make this clear.

00:00:54.030 --> 00:00:55.230
I'm no expert here.

00:00:55.230 --> 00:00:57.820
I just happen to be able to talk
to people who really are

00:00:57.820 --> 00:00:59.830
experts and then hopefully
I can pass that

00:00:59.830 --> 00:01:01.550
information on to you.

00:01:01.550 --> 00:01:03.800
But that said, this should be
enough for you to have a

00:01:03.800 --> 00:01:05.760
general understanding
of what's going on

00:01:05.760 --> 00:01:06.570
underneath the hood.

00:01:06.570 --> 00:01:09.590
While all the nitty gritty
details of OAuth 2.0 are going

00:01:09.590 --> 00:01:12.550
to be hidden from you by the
libraries we provide, I always

00:01:12.550 --> 00:01:14.800
think it's just kind of good
practice to have a general

00:01:14.800 --> 00:01:17.320
understanding of what some
library is doing for you

00:01:17.320 --> 00:01:19.830
behind the scenes when you're
calling any of these

00:01:19.830 --> 00:01:21.860
mysterious functions.

00:01:21.860 --> 00:01:24.900
But if you do notice anything
that just seems outright

00:01:24.900 --> 00:01:27.070
wrong, please let me know
in the comments.

00:01:27.070 --> 00:01:28.330
I do read them.

00:01:28.330 --> 00:01:29.670
I might even respond.

00:01:29.670 --> 00:01:32.080
So with that disclaimer out of
the way, let's get into our

00:01:32.080 --> 00:01:33.930
presentation.

00:01:33.930 --> 00:01:37.060
So the analogy I frequently hear
with OAuth 2.0, and it's

00:01:37.060 --> 00:01:39.440
one that I really like, is that
it's kind of like dealing

00:01:39.440 --> 00:01:41.200
with a system of valet keys.

00:01:41.200 --> 00:01:44.140
If I have a valet key for a
car, it probably lets the

00:01:44.140 --> 00:01:47.390
valet, say, unlock the doors
and start the engine.

00:01:47.390 --> 00:01:49.720
But maybe it doesn't let
them open the trunk.

00:01:49.720 --> 00:01:53.310
So you can still keep your
valuables, or your bodies, or

00:01:53.310 --> 00:01:54.930
what have you in there.

00:01:54.930 --> 00:01:57.920
If you happen to have a very
fancy car, which I do not,

00:01:57.920 --> 00:02:00.800
these valet keys might also
prevent you from, say, driving

00:02:00.800 --> 00:02:03.850
over a certain speed or taking
it off any sweet jumps.

00:02:03.850 --> 00:02:05.740
I mean, think about how
different "Ferris Bueller's

00:02:05.740 --> 00:02:08.490
Day Off" might have been if
Cameron had just had a valet

00:02:08.490 --> 00:02:10.800
key that he could have given
to the parking attendants.

00:02:10.800 --> 00:02:11.570
Right?

00:02:11.570 --> 00:02:13.540
Totally different movie.

00:02:13.540 --> 00:02:16.530
Incidentally, in the world of
OAuth 2.0, these valet keys

00:02:16.530 --> 00:02:19.880
also have the special ability to
self-destruct in a certain

00:02:19.880 --> 00:02:20.860
amount of time.

00:02:20.860 --> 00:02:24.030
So this valet better park my car
in the next 60 minutes or

00:02:24.030 --> 00:02:26.120
he's not going to be able
to do anything with it.

00:02:26.120 --> 00:02:29.220
The bright side is that if my
valet happens to lose the key

00:02:29.220 --> 00:02:31.870
in the parking lot somewhere,
there's only a limited window

00:02:31.870 --> 00:02:36.050
in which someone could find it
and steal my car with it.

00:02:36.050 --> 00:02:38.070
By the way, these keys are
generally referred to as

00:02:38.070 --> 00:02:39.400
access tokens.

00:02:39.400 --> 00:02:42.500
They're also sometimes called
bearer tokens, meaning that

00:02:42.500 --> 00:02:45.560
all the powers of this key are
granted to the owner, or

00:02:45.560 --> 00:02:47.260
bearer, of the key.

00:02:47.260 --> 00:02:50.020
Technically speaking, I guess
not all bearer tokens are

00:02:50.020 --> 00:02:53.400
access tokens, but in the
world of OAuth 2.0, they

00:02:53.400 --> 00:02:54.250
usually are.

00:02:54.250 --> 00:02:57.250
So for the purposes of our
oversimplified tutorial, I'm

00:02:57.250 --> 00:02:59.670
going to use these two phrases
interchangeably throughout

00:02:59.670 --> 00:03:01.450
these lessons.

00:03:01.450 --> 00:03:03.130
So what do these keys
look like in

00:03:03.130 --> 00:03:04.670
an application context?

00:03:04.670 --> 00:03:07.000
Well, you might have a valet key
that lets an application,

00:03:07.000 --> 00:03:10.290
say, view the contents of a
Google Drive folder, but maybe

00:03:10.290 --> 00:03:11.830
not delete files there.

00:03:11.830 --> 00:03:15.250
In the case of Play Games, our
valet key gives an application

00:03:15.250 --> 00:03:19.430
access to achievements, leader
boards, and lets them view

00:03:19.430 --> 00:03:20.900
some basic user info.

00:03:20.900 --> 00:03:23.680
But it wouldn't, for instance,
let that application view the

00:03:23.680 --> 00:03:26.730
user's Google Drive folder, or
say, send Gmail on their

00:03:26.730 --> 00:03:29.990
behalf, or use any other
Google services.

00:03:29.990 --> 00:03:32.670
By the way, these specific
abilities that these valet

00:03:32.670 --> 00:03:36.070
keys have are referred to as
scopes, and you'll hear that

00:03:36.070 --> 00:03:39.400
term used throughout the
rest of this video.

00:03:39.400 --> 00:03:41.600
So what does it look like if
you're trying to sign into an

00:03:41.600 --> 00:03:43.870
application using one
of these valet keys?

00:03:43.870 --> 00:03:45.540
Well, maybe you can think
of it a little

00:03:45.540 --> 00:03:47.380
something like this.

00:03:47.380 --> 00:03:49.830
Let's say I want to get into a
club, but the bouncer won't

00:03:49.830 --> 00:03:51.730
let me in until he
sees some ID.

00:03:51.730 --> 00:03:53.730
Well, I might say to
the bouncer, tell

00:03:53.730 --> 00:03:55.200
you what, Mr. Bouncer.

00:03:55.200 --> 00:03:57.590
I'm going to give you this
special valet key.

00:03:57.590 --> 00:03:59.900
This key will let you open
the doors and the glove

00:03:59.900 --> 00:04:02.280
compartment of my car.

00:04:02.280 --> 00:04:04.310
It won't let you drive my car,
it won't let you open the

00:04:04.310 --> 00:04:07.100
trunk, but you can get into
the glove compartment.

00:04:07.100 --> 00:04:10.400
And there you can find, say,
my registration, which will

00:04:10.400 --> 00:04:12.630
tell you my name, and my date
of birth, and maybe then

00:04:12.630 --> 00:04:14.070
you'll let me in.

00:04:14.070 --> 00:04:17.980
So let's look at this again in
a non-nightclub setting.

00:04:17.980 --> 00:04:20.740
Let's say I've got my fantastic
new Angry Fruit game

00:04:20.740 --> 00:04:22.960
that I've just added a
sign-in button to.

00:04:22.960 --> 00:04:25.480
When the user clicks that
sign-in button, my application

00:04:25.480 --> 00:04:26.980
is going to say, Hi, Google.

00:04:26.980 --> 00:04:28.590
This is Angry Fruit, the game.

00:04:28.590 --> 00:04:31.855
Please give me a valet key, or
an access key, that lets me

00:04:31.855 --> 00:04:34.630
see basic user info, submit
high scores, and set

00:04:34.630 --> 00:04:36.310
achievement progress.

00:04:36.310 --> 00:04:39.000
The first thing Google will do
is present a dialog box to the

00:04:39.000 --> 00:04:42.670
user saying, hey user, this is
the information that this

00:04:42.670 --> 00:04:44.570
Angry Fruit app is asking for.

00:04:44.570 --> 00:04:46.320
Are you cool with this?

00:04:46.320 --> 00:04:48.780
Let's assume the
user says yes.

00:04:48.780 --> 00:04:51.260
At this point, Google will then
give our application a

00:04:51.260 --> 00:04:53.020
valet key and say, here you go.

00:04:53.020 --> 00:04:54.240
Have fun.

00:04:54.240 --> 00:04:57.030
At this point, by the way, our
application still doesn't know

00:04:57.030 --> 00:04:58.120
who this user is.

00:04:58.120 --> 00:05:01.360
We just have a valet key that we
know belongs to this user.

00:05:01.360 --> 00:05:05.330
But what we can then do is ping
Google Services and say

00:05:05.330 --> 00:05:07.630
"Hi, I have this user's
valet key.

00:05:07.630 --> 00:05:10.160
Can you please send me the user
ID that's associated with

00:05:10.160 --> 00:05:11.120
it?"

00:05:11.120 --> 00:05:13.600
The first thing Google will do
is verify that the valet key

00:05:13.600 --> 00:05:16.410
is valid, that it has the proper
scope that allows my

00:05:16.410 --> 00:05:18.810
application to see the
user's ID, and

00:05:18.810 --> 00:05:20.220
that it hasn't expired.

00:05:20.220 --> 00:05:22.230
Assuming that's all cool,
it'll say, sure thing.

00:05:22.230 --> 00:05:23.900
Here's the user's ID number.

00:05:23.900 --> 00:05:26.350
And at that point, I have
an ID number from an

00:05:26.350 --> 00:05:29.370
authoritative service that I
trust, in this case Google,

00:05:29.370 --> 00:05:32.480
and I can proceed without ever
having to ask my user to set

00:05:32.480 --> 00:05:35.800
up yet another user name and
password that I need to hire a

00:05:35.800 --> 00:05:38.260
security team to watch over.

00:05:38.260 --> 00:05:40.890
So let's take a look at this
request again, maybe a little

00:05:40.890 --> 00:05:42.890
closer to the code.

00:05:42.890 --> 00:05:43.960
Here's our request.

00:05:43.960 --> 00:05:44.510
Hi, Google!

00:05:44.510 --> 00:05:45.560
This is Angry Fruit.

00:05:45.560 --> 00:05:47.370
Please give me a key
with these scopes.

00:05:47.370 --> 00:05:50.130
And you'll notice I've added
another bit of information,

00:05:50.130 --> 00:05:52.960
which is, when you're all done,
please send this info to

00:05:52.960 --> 00:05:55.570
this URL that I'm providing
to you.

00:05:55.570 --> 00:05:57.630
Now what does this call
actually look like?

00:05:57.630 --> 00:06:01.100
Well, this part here, "Hi,
Google," or perhaps more

00:06:01.100 --> 00:06:05.470
accurately, "Hi, Google OAuth
2.0 servers," is equivalent to

00:06:05.470 --> 00:06:09.080
redirecting the user to a URL
that points here, to accounts

00:06:09.080 --> 00:06:10.660
dot Google dot com.

00:06:10.660 --> 00:06:13.350
Now this part where we say
"This is Angry Fruit," is

00:06:13.350 --> 00:06:16.720
equivalent to adding a client
ID to this request.

00:06:16.720 --> 00:06:21.280
This is a unique ID that
identifies our application.

00:06:21.280 --> 00:06:24.510
"I want a key that lets me get
basic user info, set leader

00:06:24.510 --> 00:06:27.640
boards and achievements," is
equivalent to adding this

00:06:27.640 --> 00:06:29.780
particular scope
to our request.

00:06:29.780 --> 00:06:31.680
You'll notice that our scope
looks like a URL.

00:06:31.680 --> 00:06:31.930
Right?

00:06:31.930 --> 00:06:33.980
It looks like a webpage
I could access.

00:06:33.980 --> 00:06:36.230
There's actually nothing special
about scopes that

00:06:36.230 --> 00:06:38.370
requires it takes the
form of a URL.

00:06:38.370 --> 00:06:40.770
In fact, if you've done any work
on Facebook, I believe

00:06:40.770 --> 00:06:43.480
their scopes look like just
plain old tech strings that

00:06:43.480 --> 00:06:47.060
say things like email or
user underscore info.

00:06:47.060 --> 00:06:49.740
I think Google decided to make
their scopes look more like

00:06:49.740 --> 00:06:52.480
URLs partly because it makes it
easier to break things up

00:06:52.480 --> 00:06:53.100
hierarchically.

00:06:53.100 --> 00:06:54.820
You know, different product
can have different

00:06:54.820 --> 00:06:55.820
directories.

00:06:55.820 --> 00:06:57.870
And I suppose, at some point in
the future, we could set up

00:06:57.870 --> 00:07:00.710
a web page for each of these
scopes that, say, gives you

00:07:00.710 --> 00:07:02.350
additional information
about them.

00:07:02.350 --> 00:07:04.130
But again, there's no rule
that says these have

00:07:04.130 --> 00:07:05.150
to look like URLs.

00:07:05.150 --> 00:07:07.800
It's just something
we chose to do.

00:07:07.800 --> 00:07:10.200
Anyway, the final part of this
request, which is to send the

00:07:10.200 --> 00:07:13.320
info back to a particular page,
is equivalent to adding

00:07:13.320 --> 00:07:15.800
a redirect URI to the
end of our request.

00:07:15.800 --> 00:07:18.630
So this big URL here at the
bottom, this is actually the

00:07:18.630 --> 00:07:20.990
URL that we would send
this user to.

00:07:20.990 --> 00:07:23.100
And it looks a little
something like this.

00:07:23.100 --> 00:07:25.430
It's the OAuth 2.0 dialogue.

00:07:25.430 --> 00:07:28.560
Now assuming, at this point, the
user clicks Accept, this

00:07:28.560 --> 00:07:32.250
page would take a look at this
redirect URI, and it would

00:07:32.250 --> 00:07:36.580
redirect the user back to a page
beginning with that URI.

00:07:36.580 --> 00:07:39.210
But then we'd also need to send
across the access token,

00:07:39.210 --> 00:07:41.970
and so we can send that along
as a get parameter.

00:07:41.970 --> 00:07:44.950
This URI, by the way, will
correspond, or hopefully

00:07:44.950 --> 00:07:48.130
should correspond, to a page
that I've created on my Angry

00:07:48.130 --> 00:07:49.240
Fruit website.

00:07:49.240 --> 00:07:51.710
It can grab this access token
information, either through

00:07:51.710 --> 00:07:55.280
JavaScript, or maybe as a
dynamic server page, and then

00:07:55.280 --> 00:07:58.020
I can start making calls to
Google Services using this

00:07:58.020 --> 00:07:59.180
access token.

00:07:59.180 --> 00:08:00.700
And we're all done, right?

00:08:00.700 --> 00:08:01.550
Wrong.

00:08:01.550 --> 00:08:03.040
Turns out, I just lied to you.

00:08:03.040 --> 00:08:04.040
And why did I do that?

00:08:04.040 --> 00:08:06.850
Why did I break this bond of
trust we've been forming over

00:08:06.850 --> 00:08:08.070
the last seven minutes?

00:08:08.070 --> 00:08:09.790
Well, because I want
to demonstrate a

00:08:09.790 --> 00:08:11.580
security issue to you.

00:08:11.580 --> 00:08:13.930
Now imagine that this
is my redirect URI.

00:08:13.930 --> 00:08:17.600
It's redirecting to a page
that's not using SSL, and our

00:08:17.600 --> 00:08:21.450
user is signing in from Joe's
Internet Cafe and Laundrymat

00:08:21.450 --> 00:08:24.530
on some open-end wireless
access point somewhere.

00:08:24.530 --> 00:08:27.350
But it also turns out that
inside Joe's Internet Cafe is

00:08:27.350 --> 00:08:28.460
our hacker man.

00:08:28.460 --> 00:08:30.390
I don't know why he's wearing
a ski mask and gloves.

00:08:30.390 --> 00:08:33.429
It seems like that might make
him kind of conspicuous, but I

00:08:33.429 --> 00:08:35.230
guess that's how he rolls.

00:08:35.230 --> 00:08:38.320
Now this redirect, itself, is
still being sent securely.

00:08:38.320 --> 00:08:40.900
All communication with Google
is being done over SSL.

00:08:40.900 --> 00:08:43.770
But since our user's browser
needs to access example dot

00:08:43.770 --> 00:08:47.680
com, it might do that over a
plain old insecure connection,

00:08:47.680 --> 00:08:51.480
and our conspicuously dressed
hacker man, along with, say,

00:08:51.480 --> 00:08:54.250
anybody else that decides to
view our server's web logs,

00:08:54.250 --> 00:08:56.790
will see this access token
right there in the open.

00:08:56.790 --> 00:08:59.500
And suddenly they can start
masquerading as our player,

00:08:59.500 --> 00:09:02.650
because they now have a bearer
token belonging to that user.

00:09:02.650 --> 00:09:04.810
And they can wreak all
sorts of havoc.

00:09:04.810 --> 00:09:07.670
So there are a couple of
alternative methods that we

00:09:07.670 --> 00:09:09.080
can look at instead.

00:09:09.080 --> 00:09:11.930
The first way, and probably the
most common, is to send a

00:09:11.930 --> 00:09:15.520
single-use code instead
of an access token.

00:09:15.520 --> 00:09:18.290
Now this code can be sent down
to our server at example dot

00:09:18.290 --> 00:09:22.040
com, and then our server makes
a separate call to Google to

00:09:22.040 --> 00:09:25.100
exchange this code for
a real access token.

00:09:25.100 --> 00:09:27.800
And it does this by sending
along the code along with the

00:09:27.800 --> 00:09:29.970
client ID and a client
secret that

00:09:29.970 --> 00:09:32.600
exists only on our server.

00:09:32.600 --> 00:09:35.390
Now assuming all this
information checks out, Google

00:09:35.390 --> 00:09:38.850
servers can then send back an
access token to our servers at

00:09:38.850 --> 00:09:40.180
example dot com.

00:09:40.180 --> 00:09:42.790
Our server can then make its own
request to the Google Play

00:09:42.790 --> 00:09:45.700
Service, like getting
the user's ID.

00:09:45.700 --> 00:09:48.160
And then it can send that
information back to the

00:09:48.160 --> 00:09:51.540
client, which also gives us a
nice little benefit of not

00:09:51.540 --> 00:09:53.980
needing to keep the access
token, which is a sensitive

00:09:53.980 --> 00:09:56.500
bit of information, over
on the client.

00:09:56.500 --> 00:09:58.090
It's just one less place
where our access

00:09:58.090 --> 00:09:59.570
token needs to live.

00:09:59.570 --> 00:10:02.440
But more importantly, even if
our hacker dude is able to

00:10:02.440 --> 00:10:05.270
intercept the code, he can't do
anything with it because A,

00:10:05.270 --> 00:10:06.990
he doesn't have our
client secret--

00:10:06.990 --> 00:10:09.310
remember, that exists
only on our server.

00:10:09.310 --> 00:10:11.950
And B, these codes are
only valid once.

00:10:11.950 --> 00:10:14.320
After they're redeemed, they
can't be used again.

00:10:14.320 --> 00:10:16.130
So he's pretty much
out of luck.

00:10:16.130 --> 00:10:17.980
Sorry, Mr. Hacker.

00:10:17.980 --> 00:10:20.780
But Todd, you're saying, what if
I'm a JavaScript engineer?

00:10:20.780 --> 00:10:23.550
I don't want to spend a lot of
time doing server side code.

00:10:23.550 --> 00:10:26.100
Can I just do this whole
"exchange a code for an access

00:10:26.100 --> 00:10:28.140
token" thing directly
on the client?

00:10:28.140 --> 00:10:29.730
Well, the answer is no.

00:10:29.730 --> 00:10:32.770
And it's because remember, in
order to exchange a code for

00:10:32.770 --> 00:10:35.750
an access token, we need to pass
along that client secret.

00:10:35.750 --> 00:10:37.300
And that client secret
is supposed to

00:10:37.300 --> 00:10:39.160
remain well, secret.

00:10:39.160 --> 00:10:41.770
And if you were to keep a copy
of it stored as a JavaScript

00:10:41.770 --> 00:10:45.480
variable somewhere, just about
anybody with a copy of Chrome

00:10:45.480 --> 00:10:47.570
Developer Tools could
dig it out.

00:10:47.570 --> 00:10:50.150
Luckily it turns out there's
another way to send access

00:10:50.150 --> 00:10:52.260
tokens to a client if you don't
want to do a lot of

00:10:52.260 --> 00:10:56.580
server side logic, and that's
sending it has a URL fragment.

00:10:56.580 --> 00:10:58.370
See how our question mark
has been replaced

00:10:58.370 --> 00:11:00.090
with a little hashtag?

00:11:00.090 --> 00:11:03.600
You're probably used to seeing
these to jump to a particular

00:11:03.600 --> 00:11:05.230
section of a web page.

00:11:05.230 --> 00:11:07.520
But it turns out they
are also useful in

00:11:07.520 --> 00:11:08.990
situations like this.

00:11:08.990 --> 00:11:11.410
You see, URL fragments
don't get sent

00:11:11.410 --> 00:11:12.960
across in web requests.

00:11:12.960 --> 00:11:16.390
So when our user's browser goes
out to example dot com,

00:11:16.390 --> 00:11:19.430
the request doesn't include
any type of access token

00:11:19.430 --> 00:11:20.980
information.

00:11:20.980 --> 00:11:23.380
But in the page that we get
back, we can run some

00:11:23.380 --> 00:11:27.090
JavaScript that analyzes the
full URL, including that

00:11:27.090 --> 00:11:29.740
fragment, and can extract
the access token

00:11:29.740 --> 00:11:31.190
information from there.

00:11:31.190 --> 00:11:33.670
Again, leaving our conspicuously
dressed hacker

00:11:33.670 --> 00:11:35.710
man out in the cold.

00:11:35.710 --> 00:11:38.040
That said, if you are going to
be using this approach, you

00:11:38.040 --> 00:11:42.120
should do this using HTTPS,
otherwise a very sophisticated

00:11:42.120 --> 00:11:45.410
hacker, probably one not wearing
a ski mask, might be

00:11:45.410 --> 00:11:48.510
able to do something malicious
like serve up your page with

00:11:48.510 --> 00:11:51.315
some modified JavaScript they
could read the access token

00:11:51.315 --> 00:11:53.940
and do bad things with it,
or send it somewhere.

00:11:53.940 --> 00:11:55.720
And that's probably
not a good thing.

00:11:55.720 --> 00:11:58.320
So in a situation like this,
you should always use SSL.

00:11:58.320 --> 00:11:59.990
In fact, use it wherever
you can.

00:11:59.990 --> 00:12:02.450
It's just a good idea.

00:12:02.450 --> 00:12:04.630
As long as we're talking about
security by the way, let's

00:12:04.630 --> 00:12:06.630
bring up one other situation.

00:12:06.630 --> 00:12:10.340
Let's say that my game is
incredibly successful and my

00:12:10.340 --> 00:12:13.290
competitors over at Scammy Games
are so jealous that they

00:12:13.290 --> 00:12:15.620
want to sabotage my game.

00:12:15.620 --> 00:12:17.530
And so they create their own
game, and have their own

00:12:17.530 --> 00:12:20.570
sign-in button, and their
sign-in button creates a URL

00:12:20.570 --> 00:12:22.890
that looks a little something
like this.

00:12:22.890 --> 00:12:25.490
This looks like a pretty normal
OAuth dialogue request,

00:12:25.490 --> 00:12:28.060
except that you'll notice that
it's using Angry Fruits client

00:12:28.060 --> 00:12:32.390
ID, but asking the redirect
URI to go to Scammy Games.

00:12:32.390 --> 00:12:35.050
Now if Google were to blindly
trust that information, it

00:12:35.050 --> 00:12:37.600
would bring up an OAuth 2
dialogue box, the user would

00:12:37.600 --> 00:12:40.170
probably click Accept, and
then it would send that

00:12:40.170 --> 00:12:43.340
information on to Scammy
Games dot com.

00:12:43.340 --> 00:12:46.930
And if we're using our "send
the access token as a URL

00:12:46.930 --> 00:12:49.735
fragment" approach, Scammy Games
would be able to grab

00:12:49.735 --> 00:12:51.410
the user's access token.

00:12:51.410 --> 00:12:54.200
At that point, it could trick
my Angry Fruit game into

00:12:54.200 --> 00:12:56.890
pretending they were my
unsuspecting player, and wreak

00:12:56.890 --> 00:12:59.730
all sorts of havoc with their
game, because it now has a

00:12:59.730 --> 00:13:02.960
valid Angry Fruit bearer token
belonging to our poor,

00:13:02.960 --> 00:13:04.490
unsuspecting player.

00:13:04.490 --> 00:13:06.780
And we don't want
that to happen.

00:13:06.780 --> 00:13:09.840
So instead, what we do is Google
keeps a database of all

00:13:09.840 --> 00:13:13.210
client IDs, along with all
redirect URIs, that are

00:13:13.210 --> 00:13:15.950
allowed to be associated
with this client ID.

00:13:15.950 --> 00:13:19.430
So in this case, my Angry Fruit
game has a client ID,

00:13:19.430 --> 00:13:22.300
and we've set up a redirect URI
that points to example dot

00:13:22.300 --> 00:13:24.820
com slash OAuth 2 callback.

00:13:24.820 --> 00:13:27.845
So now when Scammy Games makes
this request, Google will

00:13:27.845 --> 00:13:30.700
notice that it's got a client
ID that matches something in

00:13:30.700 --> 00:13:34.150
our database, but it will also
notice that the redirect URI

00:13:34.150 --> 00:13:37.170
does not match, and it will
deny this request.

00:13:37.170 --> 00:13:40.270
And Scammy Games will not be
able to grab a valid Angry

00:13:40.270 --> 00:13:42.400
Fruit access token.

00:13:42.400 --> 00:13:45.440
So at this point, I know we've
been talking a lot about web

00:13:45.440 --> 00:13:48.320
games, but I know that we're
making an iOS game.

00:13:48.320 --> 00:13:51.020
So what does this look like
in the mobile world?

00:13:51.020 --> 00:13:54.300
It's pretty similar, except that
instead of a request that

00:13:54.300 --> 00:13:58.010
looks like this, we're going to
be on a mobile device, and

00:13:58.010 --> 00:14:01.290
we're going to ask the redirect
URI to point to com

00:14:01.290 --> 00:14:05.860
dot example dot AF colon
slash OAuth 2 callback.

00:14:05.860 --> 00:14:08.570
Now you'll notice this no longer
looks like a web page,

00:14:08.570 --> 00:14:12.050
but this is still a valid
address that is pointing to my

00:14:12.050 --> 00:14:14.030
Angry Fruit game
on the iPhone.

00:14:14.030 --> 00:14:17.490
And that's because this com
dot example dot AF is

00:14:17.490 --> 00:14:20.830
associated with my bundle
identifier in my application,

00:14:20.830 --> 00:14:24.180
and I'll be registering with the
system that if you open up

00:14:24.180 --> 00:14:28.220
a URI that starts with com dot
example dot AF instead of,

00:14:28.220 --> 00:14:32.700
say, HTTP, or mail to, or FTP,
that should go to my

00:14:32.700 --> 00:14:34.560
application.

00:14:34.560 --> 00:14:37.140
Google is still going to keep
a database of client IDs and

00:14:37.140 --> 00:14:38.290
authorized redirects.

00:14:38.290 --> 00:14:41.270
And this authorized redirect
is going to begin with a

00:14:41.270 --> 00:14:43.890
bundle identifier instead of
looking like a web address

00:14:43.890 --> 00:14:45.680
beginning with HTTP.

00:14:45.680 --> 00:14:47.900
The other difference, and one
that might surprise you, is

00:14:47.900 --> 00:14:50.490
that you might expect that since
we're on a client-only

00:14:50.490 --> 00:14:54.130
application, we'd be doing the
"pass the access token as a

00:14:54.130 --> 00:14:55.970
URL fragment" trick.

00:14:55.970 --> 00:14:59.060
And indeed, in many situations
on mobile devices, this is

00:14:59.060 --> 00:15:00.020
what happens.

00:15:00.020 --> 00:15:01.790
But in our case, we
don't do that.

00:15:01.790 --> 00:15:05.650
We're actually going to pass
in a single use code.

00:15:05.650 --> 00:15:06.680
But wait, you're saying.

00:15:06.680 --> 00:15:08.720
We don't want to pass a single
use code, right?

00:15:08.720 --> 00:15:11.380
Because in order to exchange
that, we need to pass along

00:15:11.380 --> 00:15:13.960
our client secret, and you told
us that it's a really bad

00:15:13.960 --> 00:15:17.250
idea to store a client secret
on a client device.

00:15:17.250 --> 00:15:18.450
What's up with that?

00:15:18.450 --> 00:15:22.520
Well, it turns out that when
we exchange a code for a

00:15:22.520 --> 00:15:26.490
token, using a client ID that
we know is associated with a

00:15:26.490 --> 00:15:28.470
mobile device, we actually
don't need to

00:15:28.470 --> 00:15:29.970
use the client secret.

00:15:29.970 --> 00:15:31.680
This might seem like we're
losing a little bit of

00:15:31.680 --> 00:15:32.490
security, right?

00:15:32.490 --> 00:15:34.520
Since anybody that intercepts
our code might

00:15:34.520 --> 00:15:35.630
be able to use it.

00:15:35.630 --> 00:15:38.130
But you have to remember that
now we're redirecting to

00:15:38.130 --> 00:15:42.120
another local application on
the device instead of, say,

00:15:42.120 --> 00:15:44.320
another web page out
there in the world.

00:15:44.320 --> 00:15:46.320
And that's considerably
more secure.

00:15:46.320 --> 00:15:49.880
So this all generally works out
in our favor, and we're

00:15:49.880 --> 00:15:53.360
able to get an access token
back from our servers.

00:15:53.360 --> 00:15:55.940
So now that we hopefully
understand a little more about

00:15:55.940 --> 00:15:59.620
the OAuth 2.0 process and this
tutorial hasn't confused you

00:15:59.620 --> 00:16:02.770
more than it's helped, let's
get started by creating our

00:16:02.770 --> 00:16:04.130
very own client ID.

00:16:04.130 --> 00:16:05.650
And we'll be doing that
in the next lesson.

00:16:05.650 --> 00:16:16.375
[MUSIC PLAYING]

