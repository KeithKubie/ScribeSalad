WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:02.925
In this lesson, you created two plots for conditional

00:00:02.925 --> 00:00:05.800
means. Let's take a closer look at both of the

00:00:05.800 --> 00:00:08.980
plots and see how they're different. This second block of

00:00:08.980 --> 00:00:12.430
code gave us this plot. And this first block of

00:00:12.430 --> 00:00:15.960
code gave us this plot. Now, you subset this data

00:00:15.960 --> 00:00:18.440
frame to only consider uses who are age 71 or

00:00:18.440 --> 00:00:21.830
less. So, let's do the same up here. Running the

00:00:21.830 --> 00:00:25.010
code, we can see that we're limiting our x axis.

00:00:25.010 --> 00:00:27.560
Now, what I want to do is put these two plots

00:00:27.560 --> 00:00:30.500
side by side so we can look at them together. Now,

00:00:30.500 --> 00:00:33.550
you know this before, we basically just say, each plot into

00:00:33.550 --> 00:00:36.800
a variable, and then we plot those variables in one column.

00:00:36.800 --> 00:00:40.430
So, here's the difference between age and age with months.

00:00:40.430 --> 00:00:44.270
By decreasing the size of our bins and increasing the number

00:00:44.270 --> 00:00:48.150
of bins, we have less data to estimate each conditional mean.

00:00:48.150 --> 00:00:50.260
We can see that the noise is a lot worse on

00:00:50.260 --> 00:00:53.870
this graph since we have finer bin choices. On the other

00:00:53.870 --> 00:00:56.870
hand, we could go the other direction and increase the size

00:00:56.870 --> 00:01:00.550
of the bins. Say, we could lump everyone together whose age

00:01:00.550 --> 00:01:03.920
falls under a multiple of five. Essentially what we'll do is, we'll

00:01:03.920 --> 00:01:07.430
cut our graph in pieces and average these mean friend counts

00:01:07.430 --> 00:01:10.090
together. So, users who are within two and a half years

00:01:10.090 --> 00:01:13.155
of 40 will get lumped into one point. The same will

00:01:13.155 --> 00:01:15.465
be true for users who are within two and a half years

00:01:15.465 --> 00:01:17.445
of 50 and for users who are in two and a half

00:01:17.445 --> 00:01:20.690
years of 60. I'll show you what I mean in code. Here,

00:01:20.690 --> 00:01:24.720
I'm creating a plot with age that's been divided by five, rounded

00:01:24.720 --> 00:01:28.190
and then multiplied by five. I've also subsetted our data frame, just

00:01:28.190 --> 00:01:30.660
like the other plots. The last thing I'll do is I'll add

00:01:30.660 --> 00:01:34.120
a geom line with a stat summary. I don't really want to

00:01:34.120 --> 00:01:36.860
plot the friend count, I want to plot the mean friend count.

00:01:36.860 --> 00:01:40.710
So I'll pass summary to stat, and I'll pass mean to fun.y.

00:01:40.710 --> 00:01:42.500
I'll save this plot, and add it in with the

00:01:42.500 --> 00:01:45.909
others. So, see how we have less data points here? And

00:01:45.909 --> 00:01:49.580
wider bin widths. By doing this, we would estimate the

00:01:49.580 --> 00:01:53.780
mean more precisely, but potentially miss important features of the age

00:01:53.780 --> 00:01:57.080
and friend count relationship. These three plots are an example

00:01:57.080 --> 00:02:00.200
of the bias variance tradeoff, and it's similar to the tradeoff

00:02:00.200 --> 00:02:03.450
we make when choosing the bin width in histograms. One way

00:02:03.450 --> 00:02:05.890
that analysts can better make this trade off is by using

00:02:05.890 --> 00:02:09.370
a flexible statistical model to smooth our estimates of

00:02:09.370 --> 00:02:13.555
conditional means. ggplot makes it easier fit such models using

00:02:13.555 --> 00:02:16.610
geom smooth. So, instead of seeing all this noise,

00:02:16.610 --> 00:02:19.690
we'll have a smooth modular function that will fit along

00:02:19.690 --> 00:02:21.540
the data. We will do the same for this

00:02:21.540 --> 00:02:24.760
plot as well. Here, I've added the geom smooth layer

00:02:24.760 --> 00:02:27.590
to both our first plot and our second plot. I'm

00:02:27.590 --> 00:02:31.000
just using ggplot's defaults so all the decisions about what

00:02:31.000 --> 00:02:33.430
model we'll be using will be made for us.

00:02:33.430 --> 00:02:36.370
If you're interested in exploring the models and the parameters,

00:02:36.370 --> 00:02:39.460
take a look at the geom smooth documentation. So, I'll

00:02:39.460 --> 00:02:41.690
save these two plots and then I'll run the code

00:02:41.690 --> 00:02:45.610
again. So, here's our smoother for age_with_months, and here's our

00:02:45.610 --> 00:02:49.290
smoother for age. While the smoother captures some of the

00:02:49.290 --> 00:02:52.165
features of this relationship, it doesn't draw attention to the

00:02:52.165 --> 00:02:56.280
non-motonic relationship in the low ages well. Not only that,

00:02:56.280 --> 00:02:58.740
but it really misses the discontinuity at age 69.

00:02:58.740 --> 00:03:02.610
This highlights that using models like LOESS or

00:03:02.610 --> 00:03:06.270
smoothing splines can be useful. But, like nearly any

00:03:06.270 --> 00:03:09.010
model, it can be subject to systematic errors, when

00:03:09.010 --> 00:03:12.090
the true process generating our data isn't so consistent

00:03:12.090 --> 00:03:14.640
with the model itself. Here the models are based

00:03:14.640 --> 00:03:17.730
on the idea that true function is smooth. But,

00:03:17.730 --> 00:03:20.470
we really know that there's some discontinuity in the relationship.

