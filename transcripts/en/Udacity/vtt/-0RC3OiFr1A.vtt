WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:03.210
The Swift standard library
has a function called sort,

00:00:03.210 --> 00:00:05.740
which is a part of
the sequence type protocol.

00:00:05.740 --> 00:00:08.722
This function can be called
by any type that conforms

00:00:08.722 --> 00:00:12.398
to the sequence type protocol,
often an array or a dictionary.

00:00:12.398 --> 00:00:14.404
The sort function takes one argument,

00:00:14.404 --> 00:00:19.100
a closure expression indicating how the
items in a collection should be sorted.

00:00:19.100 --> 00:00:21.469
In the end,
the function returns a sorted array.

00:00:22.650 --> 00:00:26.020
For example, let's imagine
we're at a silent auction and

00:00:26.020 --> 00:00:30.060
we have an array of bids that we'd
like to sort from lowest to highest.

00:00:30.060 --> 00:00:32.500
Here's our array of bids
along with an array for

00:00:32.500 --> 00:00:35.560
the return value called orderedBids.

00:00:35.560 --> 00:00:37.740
The bids array will call
the sort method, and

00:00:37.740 --> 00:00:40.420
that's where the closure
expression comes in.

00:00:40.420 --> 00:00:45.060
Closure expressions typically take
the form in between curly braces,

00:00:45.060 --> 00:00:49.150
first you'll see the parameters being
passed in, followed by an arrow

00:00:49.150 --> 00:00:53.660
pointing to the return type, similar to
what you'd see in a function signature.

00:00:53.660 --> 00:00:56.230
Then the return type is
followed by the word, in,

00:00:56.230 --> 00:00:59.800
and then the statements to be executed.

00:00:59.800 --> 00:01:03.240
Back up here in the closure we're
passing into the sort function,

00:01:03.240 --> 00:01:04.750
notice that there's no name.

00:01:04.750 --> 00:01:07.470
We skip straight to the curly braces.

00:01:07.470 --> 00:01:11.757
In between curly braces, first we
write the parameters being passed in,

00:01:11.757 --> 00:01:12.734
which are Ints.

00:01:12.734 --> 00:01:15.948
We're passing in two Ints
from the array each time.

00:01:15.948 --> 00:01:19.635
Sort always takes two parameters that
match the type of the array calling

00:01:19.635 --> 00:01:21.260
the function.

00:01:21.260 --> 00:01:24.660
After the parameters we see an arrow
pointing to the return type.

00:01:24.660 --> 00:01:29.005
The return type here is a bool
indicating whether bid1 should be placed

00:01:29.005 --> 00:01:31.125
before bid2 or not.

00:01:31.125 --> 00:01:35.645
Next comes the word, in, signaling the
beginning of the executable statements.

00:01:35.645 --> 00:01:38.781
And then the executable statement
in this case is very short.

00:01:38.781 --> 00:01:41.977
It's just bid2 &gt; bid1.

00:01:41.977 --> 00:01:46.947
If bid2 is greater than bid1, then bid1
should go first in the sorted array.

00:01:46.947 --> 00:01:49.697
If we print out the results,
the orderedBids array,

00:01:49.697 --> 00:01:53.057
we can see that the bids are in
order from lowest to highest.

00:01:53.057 --> 00:01:55.617
Let's alter the example just a bit and

00:01:55.617 --> 00:01:58.857
say that the auction goers
put in more exact bids.

00:01:58.857 --> 00:02:01.007
They put in their bids in as doubles.

00:02:01.007 --> 00:02:02.849
How would our closure expression change?

00:02:04.200 --> 00:02:06.925
In this case,
since the parameters are now doubles,

00:02:06.925 --> 00:02:11.000
we'll need to change the parameter
types of bid1 and bid2.

00:02:11.000 --> 00:02:14.670
But notice that the return type and the
sorting statement both remain the same.

00:02:15.730 --> 00:02:18.518
Let's do one more example for
good measure.

00:02:18.518 --> 00:02:21.082
Let's say we're sorting
an array of birthYears and

00:02:21.082 --> 00:02:24.570
we want to put the years in
reverse chronological order.

00:02:24.570 --> 00:02:27.120
What should our closure
expression look like?

00:02:27.120 --> 00:02:29.380
What should we place
between curly braces here?

00:02:30.490 --> 00:02:33.550
Like before, we're sorting an array
of Ints, which means that the two

00:02:33.550 --> 00:02:37.330
parameters passed into the closure
expression will also be Ints.

00:02:37.330 --> 00:02:39.800
Let's call those parameters year1 and
year2.

00:02:40.950 --> 00:02:43.408
Next comes an arrow pointing
to the return type.

00:02:43.408 --> 00:02:47.477
And remember that sort always takes
a closure with the same return type, and

00:02:47.477 --> 00:02:48.950
that return type is a bool.

00:02:50.180 --> 00:02:51.170
Next comes the word,

00:02:51.170 --> 00:02:55.440
in, to signal the beginning of
the closure's executable statements.

00:02:55.440 --> 00:03:00.326
And since we want the birth years in or
verse chronological order that means

00:03:00.326 --> 00:03:04.368
the bool should return true if
year1 is greater than year2.

00:03:04.368 --> 00:03:07.390
And over here in the sidebar,
we can see our sorted array.

00:03:08.410 --> 00:03:12.950
Even though in this case the array is
sorted essentially instantaneously,

00:03:12.950 --> 00:03:17.100
you can see that the closure represents
a passing of the flow of control.

00:03:17.100 --> 00:03:20.850
It's as if we're saying, here,
sort, take this chunk of code and

00:03:20.850 --> 00:03:21.670
use it when you need it.

