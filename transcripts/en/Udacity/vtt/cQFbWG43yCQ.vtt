WEBVTT
Kind: captions
Language: en

00:00:00.830 --> 00:00:05.150
As you saw earlier in the course,
protocol stacks are made of layers.

00:00:05.150 --> 00:00:08.010
For each layer depends on abstractions
provided by the layer below.

00:00:09.070 --> 00:00:12.490
Let's take another look up and
down that stack to see where we are.

00:00:12.490 --> 00:00:13.530
As a developer,

00:00:13.530 --> 00:00:17.960
you're usually working at one particular
layer of abstraction at a time.

00:00:17.960 --> 00:00:20.530
But it's important to know
about the lower layers,

00:00:20.530 --> 00:00:23.930
because the way they work affects
the way they can fail, and

00:00:23.930 --> 00:00:26.630
what strange things can
happen to your application.

00:00:26.630 --> 00:00:30.570
Web applications rely on HTTP to
send requests about resources and

00:00:30.570 --> 00:00:32.290
get responses.

00:00:32.290 --> 00:00:37.320
You use libraries like Flask or
requests to build HTTP applications.

00:00:37.320 --> 00:00:41.550
Some ideas that are visible at
the HTTP layer include URLs for

00:00:41.550 --> 00:00:45.960
resources and methods,
cookies, HTTP verbs.

00:00:45.960 --> 00:00:50.770
Any misbehavior of lower layers is
mostly visible at the HTTP layer

00:00:50.770 --> 00:00:52.880
as errors and high latency.

00:00:52.880 --> 00:00:56.640
Requests that fail, or
the take unreasonably long to complete.

00:00:56.640 --> 00:00:59.840
HTTP is implemented in browsers and
in web servers,

00:00:59.840 --> 00:01:03.540
as well as in proxies and firewalls,
and some other tools like that.

00:01:03.540 --> 00:01:05.680
That code uses TCP.

00:01:05.680 --> 00:01:10.070
But the code that says in order to send
an HTTP request, connect to the server

00:01:10.070 --> 00:01:13.890
on port 80 and transmit the following
bytes is part of the web browser.

00:01:13.890 --> 00:01:17.360
And the corresponding code for
understanding HTTP requests and

00:01:17.360 --> 00:01:19.950
sending responses is
part of the web server.

00:01:19.950 --> 00:01:21.850
Web apps don't need to reinvent that.

00:01:21.850 --> 00:01:25.490
They just make use of the features the
browser and server already implement.

00:01:25.490 --> 00:01:28.800
But the browser up here
doesn't tell your Wi-Fi or

00:01:28.800 --> 00:01:32.410
ethernet adapter down here exactly
what to transmit to your router.

00:01:32.410 --> 00:01:35.360
The browser makes use of the TCP
networking services that your

00:01:35.360 --> 00:01:37.360
operating system provides.

00:01:37.360 --> 00:01:39.010
Connecting to a server on a port and

00:01:39.010 --> 00:01:41.560
having a reliable stream of
bytes between that client and

00:01:41.560 --> 00:01:46.000
server is a feature provided by
your OS's TCP implementation.

00:01:46.000 --> 00:01:49.110
Whether you're on Mac or Windows or
Linux or something else.

00:01:49.110 --> 00:01:51.550
Modern OSs provide TCP built in.

00:01:51.550 --> 00:01:54.790
User program such as browsers
just have to use them.

00:01:54.790 --> 00:01:58.080
Within the OSs networking
code TCP in turn

00:01:58.080 --> 00:02:02.650
relies on the lower level protocol
IP to deliver packets between hosts.

00:02:02.650 --> 00:02:05.580
And to pass them through
the intermediate hops, the routers.

00:02:05.580 --> 00:02:10.440
An IP in turn, relies on hardware like
Wi-Fi or ethernet and device drivers to

00:02:10.440 --> 00:02:13.240
physically shift data between devices
on the same physical network.

00:02:14.670 --> 00:02:17.790
Now, not all network
applications use TCP.

00:02:17.790 --> 00:02:19.710
Ping uses ICMP.

00:02:19.710 --> 00:02:23.920
DNS primarily uses UDP as to a number
of other things like the network time

00:02:23.920 --> 00:02:26.620
protocol that keeps your time and
date in sync.

00:02:26.620 --> 00:02:30.325
But all of these underlying protocols
are provided by the operating system.

00:02:30.325 --> 00:02:32.770
We'll see a lot more about
these in this lesson.

00:02:32.770 --> 00:02:35.990
One more thing, be careful what
layer you're talking about.

00:02:35.990 --> 00:02:38.740
There are a lot of terms
in common between them.

00:02:38.740 --> 00:02:43.118
For example, a Wi-Fi connection or
associating with a particular Wi-Fi

00:02:43.118 --> 00:02:47.078
access point has nothing particularly
to do with a TCP connection,

00:02:47.078 --> 00:02:49.160
also known as a session.

00:02:49.160 --> 00:02:53.400
And a TCP session has nothing
particularly to do with a web user

00:02:53.400 --> 00:02:56.850
session, identified by, for instance,
session cookies on a logged in user.

