WEBVTT
Kind: captions
Language: en

00:00:13.910 --> 00:00:15.490
PAUL KINLAN: Hi guys,
I'm Paul Kinlan.

00:00:15.490 --> 00:00:18.120
Welcome to our Chrome
apps special event.

00:00:18.120 --> 00:00:19.260
I think it's a special event.

00:00:19.260 --> 00:00:21.370
I'd like to introduce
you to Renato.

00:00:21.370 --> 00:00:23.200
RENATO MANGINI: Why
is this special?

00:00:23.200 --> 00:00:23.530
I mean--

00:00:23.530 --> 00:00:24.290
PAUL KINLAN: Why
is it special?

00:00:24.290 --> 00:00:26.250
RENATO MANGINI: Just because we
are both in the same place?

00:00:26.250 --> 00:00:27.040
PAUL KINLAN: It is, right.

00:00:27.040 --> 00:00:28.570
So I'm from London--

00:00:28.570 --> 00:00:29.450
RENATO MANGINI: And
I'm from Brazil.

00:00:29.450 --> 00:00:30.380
PAUL KINLAN: And we're here
in Mountain View.

00:00:30.380 --> 00:00:32.720
We just came across all the
way especially today.

00:00:32.720 --> 00:00:34.620
RENATO MANGINI: And we are both
developer advocates for

00:00:34.620 --> 00:00:35.990
their Chrome.

00:00:35.990 --> 00:00:37.390
PAUL KINLAN: Yeah, actually this
is a Chrome apps thing.

00:00:37.390 --> 00:00:38.125
We work on Chrome.

00:00:38.125 --> 00:00:40.010
We do lots of Chrome things.

00:00:40.010 --> 00:00:41.750
Today's actually kind of special
because it's our

00:00:41.750 --> 00:00:46.770
first, I think, talk about using
NodeJS libraries inside

00:00:46.770 --> 00:00:48.130
Chrome applications.

00:00:48.130 --> 00:00:50.690
For you guys who don't know,
NodeJS is, basically, in the

00:00:50.690 --> 00:00:53.600
past, people have used it
as mainly a server-based

00:00:53.600 --> 00:00:58.576
infrastructure, like a web
server, SMTP servers, FTP--

00:00:58.576 --> 00:00:59.275
I was going to say FMTP.

00:00:59.275 --> 00:01:01.660
I have no idea what that is.

00:01:01.660 --> 00:01:04.690
It's probably rude.

00:01:04.690 --> 00:01:07.420
But yeah, so a lot of people
have been using NodeJS,

00:01:07.420 --> 00:01:11.090
JavaScript on the server to
build their applications.

00:01:11.090 --> 00:01:12.070
Its asynchronous.

00:01:12.070 --> 00:01:13.770
It's all JavaScript.

00:01:13.770 --> 00:01:15.730
It's one single process.

00:01:15.730 --> 00:01:17.930
So it's pretty crazy
to work with.

00:01:17.930 --> 00:01:20.430
Basically, the whole thing
about NodeJS is that

00:01:20.430 --> 00:01:22.720
everything that you develop and
build is all meant to be

00:01:22.720 --> 00:01:23.700
asynchronous.

00:01:23.700 --> 00:01:27.170
So if you have any code that
blocks, like making a database

00:01:27.170 --> 00:01:29.650
call, actually, what should
happen is, it should sleep and

00:01:29.650 --> 00:01:33.165
then, the next time the next
tick happens, maybe there's

00:01:33.165 --> 00:01:34.080
some data ready for you--

00:01:34.080 --> 00:01:36.550
RENATO MANGINI: Which is quite
similar as the JavaScript

00:01:36.550 --> 00:01:38.340
runtime runs on the
browser, right?

00:01:38.340 --> 00:01:39.566
PAUL KINLAN: Yeah, that's the
big thing that we are trying

00:01:39.566 --> 00:01:41.780
to do inside the browser is
to make every single API

00:01:41.780 --> 00:01:42.730
asynchronous.

00:01:42.730 --> 00:01:44.540
So that the whole user interface
doesn't block when

00:01:44.540 --> 00:01:45.350
you scroll.

00:01:45.350 --> 00:01:47.810
Everyone knows what it's like
if you put a near-infinite

00:01:47.810 --> 00:01:49.830
loop inside your code.

00:01:49.830 --> 00:01:52.910
RENATO MANGINI: So NodeJS is
running JavaScript on the

00:01:52.910 --> 00:01:53.880
server, basically?

00:01:53.880 --> 00:01:57.240
PAUL KINLAN: Yeah, JavaScript on
the server, powered by V8.

00:01:57.240 --> 00:01:59.720
And what the we're going to do
today, at least, is show you

00:01:59.720 --> 00:02:02.200
how to run your NodeJS
applications.

00:02:02.200 --> 00:02:04.110
Not all of them, because we
don't have all the API

00:02:04.110 --> 00:02:08.030
support, through a tool, called
Browserify, which lets

00:02:08.030 --> 00:02:13.950
you run NodeJS-based code inside
your applications, or

00:02:13.950 --> 00:02:15.860
inside your web apps,
traditionally, but you'll

00:02:15.860 --> 00:02:17.760
notice, from the actual project
itself, it doesn't

00:02:17.760 --> 00:02:20.950
have access to, say, the network
sockets APIs, which,

00:02:20.950 --> 00:02:23.820
if you're doing server-based
work, and this is a kind of

00:02:23.820 --> 00:02:25.960
key thing for Chrome OS, at
least-- if you're doing

00:02:25.960 --> 00:02:30.350
server-based work, you never
have the ability to, inside

00:02:30.350 --> 00:02:32.690
the browser, open up a
socket, for instance.

00:02:32.690 --> 00:02:34.190
And we can do that
inside Chrome.

00:02:34.190 --> 00:02:36.590
So we're going to show you two
applications, how to build

00:02:36.590 --> 00:02:39.250
them, and we're going
to do that today.

00:02:39.250 --> 00:02:39.670
RENATO MANGINI: Excellent.

00:02:39.670 --> 00:02:40.420
PAUL KINLAN: Are we good?

00:02:40.420 --> 00:02:41.790
Should we go?

00:02:41.790 --> 00:02:42.220
Should we jump in?

00:02:42.220 --> 00:02:44.480
RENATO MANGINI: So just one
question before you start

00:02:44.480 --> 00:02:46.340
diving into the code.

00:02:46.340 --> 00:02:50.675
So the point here is that NodeJS
is good for running on

00:02:50.675 --> 00:02:51.230
the server, right?

00:02:51.230 --> 00:02:51.550
PAUL KINLAN: Yeah.

00:02:51.550 --> 00:02:53.870
RENATO MANGINI: So why
would we want to

00:02:53.870 --> 00:02:56.270
run it on the browser?

00:02:56.270 --> 00:03:00.580
And what's the difference
between NodeJS code running on

00:03:00.580 --> 00:03:03.150
the server and running and
a Chrome-packaged app.

00:03:03.150 --> 00:03:03.940
PAUL KINLAN: Yeah.

00:03:03.940 --> 00:03:05.440
So I think there's two
bits to this, right?

00:03:05.440 --> 00:03:07.450
There's-- we're getting
developers to build web

00:03:07.450 --> 00:03:08.610
applications, right?

00:03:08.610 --> 00:03:10.920
And we want developers to build
web applications in

00:03:10.920 --> 00:03:13.770
JavaScript for the entirety of
the stack, the client side,

00:03:13.770 --> 00:03:15.040
and on the server side.

00:03:15.040 --> 00:03:17.770
And what we're trying to do, at
least with getting NodeJS

00:03:17.770 --> 00:03:20.740
modules to run inside the
browser is, we're saying that,

00:03:20.740 --> 00:03:24.580
actually, NodeJS via the MPM
package manager has got a huge

00:03:24.580 --> 00:03:25.900
ecosystem of libraries
out there--

00:03:25.900 --> 00:03:28.480
work that's already been done
by developers to get

00:03:28.480 --> 00:03:32.650
integration with FTP servers,
FTP clients, HTPP web servers,

00:03:32.650 --> 00:03:34.510
all these types of things.

00:03:34.510 --> 00:03:38.460
That connect and express--

00:03:38.460 --> 00:03:41.680
these are middleware pieces of
software that run web servers

00:03:41.680 --> 00:03:42.810
inside the server.

00:03:42.810 --> 00:03:45.160
We should be able to take all
that code and then also run

00:03:45.160 --> 00:03:47.820
that inside the client.

00:03:47.820 --> 00:03:49.035
You might ask why you
want to run a

00:03:49.035 --> 00:03:49.840
server inside the client.

00:03:49.840 --> 00:03:52.420
If you look at Chrome OS, for
instance, one of the things

00:03:52.420 --> 00:03:54.570
about Chrome OS is that there's
always been this

00:03:54.570 --> 00:03:57.980
reliance on a remote server
for your web applications.

00:03:57.980 --> 00:04:00.310
And we've always had packaged
applications, which we're

00:04:00.310 --> 00:04:02.780
trying to say, offline first
is the way you should go.

00:04:02.780 --> 00:04:04.700
You should build applications
that work offline inside a

00:04:04.700 --> 00:04:05.670
packaged app.

00:04:05.670 --> 00:04:08.370
RENATO MANGINI: But you can only
run offline applications

00:04:08.370 --> 00:04:11.400
if all the data you need, and
all the processes you need,

00:04:11.400 --> 00:04:13.036
it's on the client, right?

00:04:13.036 --> 00:04:14.080
PAUL KINLAN: Yeah, exactly.

00:04:14.080 --> 00:04:16.930
So what we're trying
to do is say that--

00:04:16.930 --> 00:04:19.420
I go to one of the big
use cases, right?

00:04:19.420 --> 00:04:21.640
You look at the IDs that
are inside the browser,

00:04:21.640 --> 00:04:25.200
JavaScript, HTML-based IDs for
developing web applications.

00:04:25.200 --> 00:04:27.450
A lot of them coming inside the
browser, but they still

00:04:27.450 --> 00:04:31.420
need a server to run and
debug the code, right?

00:04:31.420 --> 00:04:33.770
If you look at people like Cloud
9 IDE, they basically

00:04:33.770 --> 00:04:37.210
have a NodeJS background
service, essentially, where

00:04:37.210 --> 00:04:39.045
you can connect to it, and you
can debug your application

00:04:39.045 --> 00:04:40.330
inside the browser.

00:04:40.330 --> 00:04:42.950
We want to make sure that if
you're building applications

00:04:42.950 --> 00:04:46.420
on the web today for your
browser, then you should also

00:04:46.420 --> 00:04:48.515
be able to, actually, run and
debug them inside your Chrome

00:04:48.515 --> 00:04:50.380
OS machine.

00:04:50.380 --> 00:04:51.550
OK, Chrome OS is one use case.

00:04:51.550 --> 00:04:54.350
You bring that to Mac,
Windows, and Linux--

00:04:54.350 --> 00:04:56.590
wherever Chrome is, that's a
pretty compelling story.

00:04:56.590 --> 00:04:58.500
You have one piece of code that
can run across all these

00:04:58.500 --> 00:05:01.590
different platforms on the
client, in the server, and all

00:05:01.590 --> 00:05:02.410
these types of things.

00:05:02.410 --> 00:05:06.860
RENATO MANGINI: And it would be
another compelling use case

00:05:06.860 --> 00:05:10.330
for using the NodeJS libraries
on the browser--

00:05:10.330 --> 00:05:11.360
distribution?

00:05:11.360 --> 00:05:16.390
Because currently, if I ask my
mother to install NodeJS and

00:05:16.390 --> 00:05:20.740
run an applications on her
non-Chrome OS machine, she

00:05:20.740 --> 00:05:23.370
would probably have some
troubles with that.

00:05:23.370 --> 00:05:28.510
So maybe the distribution model
for the web and for the

00:05:28.510 --> 00:05:33.310
Chrome packaged app is very
compelling because it uses a

00:05:33.310 --> 00:05:35.110
store, the Chrome web store.

00:05:35.110 --> 00:05:36.840
PAUL KINLAN: Yeah, so all these
apps, they're obviously

00:05:36.840 --> 00:05:38.850
delivered through the Chrome
web store at the moment, or

00:05:38.850 --> 00:05:40.250
still will be.

00:05:40.250 --> 00:05:44.060
So the interesting thing is that
you can build this IDE --

00:05:44.060 --> 00:05:45.620
I'm not saying you're mother's
going to use an IDE-- is your

00:05:45.620 --> 00:05:46.735
mother a web developer?

00:05:46.735 --> 00:05:50.480
RENATO MANGINI: I cannot
tell you that.

00:05:50.480 --> 00:05:51.940
Maybe she works for Google,
I don't know.

00:05:51.940 --> 00:05:53.170
PAUL KINLAN: Yeah, maybe.

00:05:53.170 --> 00:05:55.840
If you want to have these
applications and make them

00:05:55.840 --> 00:05:57.390
available offline, you
can install them

00:05:57.390 --> 00:05:58.470
from the web store.

00:05:58.470 --> 00:06:00.110
You don't have to install
NodeJS and all

00:06:00.110 --> 00:06:00.760
these types of things.

00:06:00.760 --> 00:06:02.440
You don't have to go and
install that whole

00:06:02.440 --> 00:06:03.530
infrastructure.

00:06:03.530 --> 00:06:04.830
The browser is the runtime.

00:06:04.830 --> 00:06:06.890
The browser is this thing that
can go off and run all your

00:06:06.890 --> 00:06:10.230
applications, and that's what
we want to try and enable.

00:06:10.230 --> 00:06:12.410
And I think that's where Chrome
OS is going, is like,

00:06:12.410 --> 00:06:16.060
these applications can live
inside the browser or even

00:06:16.060 --> 00:06:18.060
outside the browser, but just
written with the same

00:06:18.060 --> 00:06:19.660
technology stack all
the way through.

00:06:19.660 --> 00:06:20.490
RENATO MANGINI: That is great.

00:06:20.490 --> 00:06:23.000
PAUL KINLAN: So I think
it's pretty exciting.

00:06:23.000 --> 00:06:23.940
Should we jump to some code?

00:06:23.940 --> 00:06:24.590
RENATO MANGINI: Yeah.

00:06:24.590 --> 00:06:25.190
PAUL KINLAN: Yeah?

00:06:25.190 --> 00:06:25.316
RENATO MANGINI: Fine.

00:06:25.316 --> 00:06:26.270
I love code.

00:06:26.270 --> 00:06:26.926
PAUL KINLAN: You love code?

00:06:26.926 --> 00:06:27.798
Really?

00:06:27.798 --> 00:06:28.670
Nice.

00:06:28.670 --> 00:06:29.530
Cool.

00:06:29.530 --> 00:06:31.440
So we've got my Chrome screen
in front of us.

00:06:31.440 --> 00:06:33.210
I think what we're going to do
first is actually show two

00:06:33.210 --> 00:06:36.220
applications just to kind of
get the feel of what we're

00:06:36.220 --> 00:06:38.330
actually trying to
build with these.

00:06:38.330 --> 00:06:41.110
The first is a thing
called Markdown.

00:06:41.110 --> 00:06:42.480
So for any of you guys--

00:06:42.480 --> 00:06:43.480
oopsie daisy.

00:06:43.480 --> 00:06:44.730
Sorry.

00:06:51.990 --> 00:06:57.910
So for any of you guys who know
Markdown, and we've seen

00:06:57.910 --> 00:07:00.020
some of these things in the
past, recently, where we're

00:07:00.020 --> 00:07:02.650
trying to standardize the
Markdown editor, I basically

00:07:02.650 --> 00:07:03.900
built a Markdown application--

00:07:06.270 --> 00:07:08.540
RENATO MANGINI: Markdown
editor, right?

00:07:08.540 --> 00:07:08.693
A

00:07:08.693 --> 00:07:10.450
PAUL KINLAN: A Markdown
editor.

00:07:10.450 --> 00:07:11.990
Its three or four
lines of code.

00:07:11.990 --> 00:07:13.950
So yeah, this is the interesting
thing, right, is

00:07:13.950 --> 00:07:17.420
that we have MPM, which is a
big package manager, node

00:07:17.420 --> 00:07:22.730
package manager, for your web
services, which basically

00:07:22.730 --> 00:07:26.870
allows you to install any piece
of code that's been put

00:07:26.870 --> 00:07:30.070
in that repository into your
web server application.

00:07:30.070 --> 00:07:32.310
Using Browserify, we can
actually do that inside Chrome

00:07:32.310 --> 00:07:35.240
OS, or inside your Chrome
applications.

00:07:35.240 --> 00:07:37.490
RENATO MANGINI: So you still use
the same package that are

00:07:37.490 --> 00:07:40.920
MPM, but you use it on
your web application?

00:07:40.920 --> 00:07:42.010
PAUL KINLAN: Yes.

00:07:42.010 --> 00:07:44.520
There's a package called
Markdown, which was MPM

00:07:44.520 --> 00:07:47.220
install Markdown, which
installed into my application,

00:07:47.220 --> 00:07:49.240
and then it's like two lines of
code to actually interact

00:07:49.240 --> 00:07:50.590
with that module.

00:07:50.590 --> 00:07:52.130
So I'm going to show you,
roughly kind of what

00:07:52.130 --> 00:07:53.500
it looks like now.

00:07:53.500 --> 00:07:54.220
This is the code.

00:07:54.220 --> 00:07:59.800
So testing, hello world.

00:07:59.800 --> 00:08:00.950
It's just a simple--

00:08:00.950 --> 00:08:01.810
and I can't spell.

00:08:01.810 --> 00:08:04.100
I can't type either, which
is kind of cool--

00:08:04.100 --> 00:08:05.310
but it's just a simple
application.

00:08:05.310 --> 00:08:07.315
It does things where it can
integrate with a file system,

00:08:07.315 --> 00:08:09.440
so I can then go and
say I'm going to

00:08:09.440 --> 00:08:11.980
save this to my desktop.

00:08:11.980 --> 00:08:12.500
So testing GDL--

00:08:12.500 --> 00:08:14.880
RENATO MANGINI: So on the left,
you type the Markdown

00:08:14.880 --> 00:08:17.797
syntax, and on the right you'll
get the HTML, the

00:08:17.797 --> 00:08:19.190
beautified [? markup ?].

00:08:19.190 --> 00:08:20.340
PAUL KINLAN: Yeah,
exactly, yeah.

00:08:20.340 --> 00:08:22.700
So you get the rendered output
on the right hand side and the

00:08:22.700 --> 00:08:25.680
actual raw text inside here.

00:08:25.680 --> 00:08:26.340
This is kind of cool.

00:08:26.340 --> 00:08:27.100
I kind of like this.

00:08:27.100 --> 00:08:29.890
RENATO MANGINI: It looks like
it's not two lines of code,

00:08:29.890 --> 00:08:32.669
three lines.

00:08:32.669 --> 00:08:34.409
PAUL KINLAN: I do tell a
little bit of a fib.

00:08:34.409 --> 00:08:36.490
The thing is that we're trying
to say, it's two lines--

00:08:36.490 --> 00:08:37.900
did I say two lines?

00:08:37.900 --> 00:08:40.890
About ten lines of code,
of my code, at least.

00:08:40.890 --> 00:08:42.980
So the Markdown editor has
already been made and

00:08:42.980 --> 00:08:44.500
distributed by our MPM.

00:08:44.500 --> 00:08:48.040
So the idea behind MPM, at
least, and what we were saying

00:08:48.040 --> 00:08:50.330
before is that there are
thousands and thousands of

00:08:50.330 --> 00:08:52.520
modules, and thousands and
thousands of developer hours

00:08:52.520 --> 00:08:55.250
that have been spent building
the JavaScript libraries up to

00:08:55.250 --> 00:08:57.080
help you, as a developer,
build applications

00:08:57.080 --> 00:08:58.520
that users will love.

00:08:58.520 --> 00:09:00.860
And one of those things
is a Markdown module.

00:09:00.860 --> 00:09:02.920
So should we jump
into the code?

00:09:02.920 --> 00:09:04.535
Let me see if I can just
show you the code

00:09:04.535 --> 00:09:05.785
that we have here.

00:09:07.770 --> 00:09:10.070
This is what we're going
to build today.

00:09:10.070 --> 00:09:13.570
So we go to source, index.js.

00:09:13.570 --> 00:09:14.670
I do have a lot of extra code.

00:09:14.670 --> 00:09:15.940
We're not going to go
too much into this.

00:09:15.940 --> 00:09:19.470
And I do have a bug in some of
my code as well at the moment.

00:09:19.470 --> 00:09:22.620
But essentially, this can
interact with the Chrome file

00:09:22.620 --> 00:09:25.020
system, like with the user's
file system, and all

00:09:25.020 --> 00:09:25.810
that type of stuff.

00:09:25.810 --> 00:09:27.560
We're not going to go into that
part today because we

00:09:27.560 --> 00:09:33.340
want to just talk about the node
part of this application.

00:09:33.340 --> 00:09:36.430
So let's jump into the code.

00:09:36.430 --> 00:09:40.860
So I'll do index.html, so you
can actually see, this is our

00:09:40.860 --> 00:09:42.630
kind of basic structure
of our application.

00:09:42.630 --> 00:09:44.980
We have some images
down the side.

00:09:44.980 --> 00:09:48.300
They're not too important for
today, in fact, just to prove

00:09:48.300 --> 00:09:50.120
it, I'm going to delete two of
them because we're not going

00:09:50.120 --> 00:09:50.720
to use them.

00:09:50.720 --> 00:09:53.670
And we have a text area where
we're going to input our text,

00:09:53.670 --> 00:09:57.250
our Markdown code, our Markdown
code, and then an

00:09:57.250 --> 00:10:00.170
HTML area on the right
hand side.

00:10:00.170 --> 00:10:03.150
I used normal CSS to style it
up, nothing kind of special.

00:10:03.150 --> 00:10:04.510
I don't even use Flexbox.

00:10:04.510 --> 00:10:06.780
I was going to use Flexbox,
[INAUDIBLE]

00:10:06.780 --> 00:10:08.880
it didn't matter at all.

00:10:08.880 --> 00:10:10.780
So let's just jump into this.

00:10:10.780 --> 00:10:14.400
v split index.js.

00:10:14.400 --> 00:10:17.400
So index.js is the bit where
we're going to put all of our

00:10:17.400 --> 00:10:20.590
logic for our Markdown editor,
which is this-- literally,

00:10:20.590 --> 00:10:22.510
it's going to be 10
lines of code.

00:10:22.510 --> 00:10:24.460
So I'm going to do the thing
that everyone hates, but I'm

00:10:24.460 --> 00:10:27.520
going to do it onload.

00:10:27.520 --> 00:10:28.660
So this is basically
just saying the

00:10:28.660 --> 00:10:30.640
window onload event.

00:10:30.640 --> 00:10:31.780
I don't want to do add
event listener--

00:10:31.780 --> 00:10:35.540
it just adds too much
extra cruft.

00:10:35.540 --> 00:10:36.580
But let's have a look.

00:10:36.580 --> 00:10:40.420
So md element = document--

00:10:40.420 --> 00:10:42.336
oops, sorry.

00:10:42.336 --> 00:10:44.470
[INAUDIBLE]

00:10:44.470 --> 00:10:47.478
This is boilerpate code.

00:10:47.478 --> 00:10:48.800
And I can't type, still.

00:10:51.990 --> 00:11:04.130
Markdown, there we are,
HTML = document.

00:11:04.130 --> 00:11:06.170
I really can't type today--

00:11:06.170 --> 00:11:07.390
by ID.

00:11:07.390 --> 00:11:08.500
RENATO MANGINI: It's
the jetlag.

00:11:08.500 --> 00:11:09.270
PAUL KINLAN: It's the jetlag.

00:11:09.270 --> 00:11:12.742
I woke up at 3 o'clock this
morning, wide awake.

00:11:12.742 --> 00:11:13.410
I thought, you know what?

00:11:13.410 --> 00:11:14.420
I'm going to have
to go the gym.

00:11:14.420 --> 00:11:15.170
So I went to the gym.

00:11:15.170 --> 00:11:16.780
So this is the really
interesting bit, right?

00:11:16.780 --> 00:11:18.910
This is, if you're a NodeJS
developer, you'll know this

00:11:18.910 --> 00:11:21.820
bit just straight away.

00:11:21.820 --> 00:11:25.480
We're going to use the required
syntax, Markdown.

00:11:25.480 --> 00:11:29.120
And so what this will do, this
will actually pull in Markdown

00:11:29.120 --> 00:11:30.610
that we've actually
pulled into our--

00:11:30.610 --> 00:11:31.600
RENATO MANGINI: So the
require is like

00:11:31.600 --> 00:11:32.720
import for other languages.

00:11:32.720 --> 00:11:33.910
PAUL KINLAN: Yeah, it's
basically like an import and

00:11:33.910 --> 00:11:36.640
include, those types
of things.

00:11:36.640 --> 00:11:40.110
We have to do, this is just a
bit of, for brevity, is put

00:11:40.110 --> 00:11:41.800
that on the end because I
just don't want to do

00:11:41.800 --> 00:11:43.600
another line of code.

00:11:43.600 --> 00:11:45.890
What you'll see now is, if
we try and run this, this

00:11:45.890 --> 00:11:49.050
application won't work because
I actually haven't imported

00:11:49.050 --> 00:11:51.790
the node package manager
system into our Chrome

00:11:51.790 --> 00:11:52.560
application.

00:11:52.560 --> 00:11:54.670
And I haven't run it
through Browserify.

00:11:54.670 --> 00:11:56.640
So right now this won't
work, but I'm just

00:11:56.640 --> 00:11:57.790
showing you the code.

00:11:57.790 --> 00:11:59.910
So we'll go into this.

00:11:59.910 --> 00:12:02.790
MDL, which is the markdown
area, dot

00:12:02.790 --> 00:12:07.180
onkeypress = function.

00:12:07.180 --> 00:12:08.430
Here we go.

00:12:10.720 --> 00:12:13.800
output = Markdown.

00:12:13.800 --> 00:12:17.550
I just realized I made
a really weird noise.

00:12:17.550 --> 00:12:23.340
md.toHTML, that's the
one, mdl.value.

00:12:23.340 --> 00:12:25.530
So what we're doing here, it's
relatively simple, we're

00:12:25.530 --> 00:12:29.720
taking the data from the text
area, passing it through the

00:12:29.720 --> 00:12:30.770
markdown system, and--

00:12:30.770 --> 00:12:34.410
RENATO MANGINI: So on every
keypress, you run it through

00:12:34.410 --> 00:12:35.790
the renderer?

00:12:35.790 --> 00:12:40.020
PAUL KINLAN: Yeah, it's
pretty inefficient.

00:12:40.020 --> 00:12:41.990
But yeah, it's pretty cool.

00:12:41.990 --> 00:12:43.850
And I'm doing something we
probably shouldn't do as

00:12:43.850 --> 00:12:50.120
well-- innerHTML = output,
and that's it.

00:12:50.120 --> 00:12:51.070
That's all we need.

00:12:51.070 --> 00:12:55.340
RENATO MANGINI: Is this
innerHTML = output a big

00:12:55.340 --> 00:12:59.440
problem for a Chrome-patched app
as it is for a web page?

00:12:59.440 --> 00:13:00.660
PAUL KINLAN: It's not
as big a problem.

00:13:00.660 --> 00:13:02.190
We have content security
policy.

00:13:02.190 --> 00:13:05.130
And by default, content security
policy inside Chrome

00:13:05.130 --> 00:13:05.830
applications.

00:13:05.830 --> 00:13:07.840
RENATO MANGINI: Because this is
one of the biggest source

00:13:07.840 --> 00:13:09.290
of exploits, right?

00:13:09.290 --> 00:13:10.480
On web pages.

00:13:10.480 --> 00:13:12.226
PAUL KINLAN: Yeah, it is.

00:13:12.226 --> 00:13:13.118
Yes it is.

00:13:13.118 --> 00:13:14.650
[INAUDIBLE]

00:13:14.650 --> 00:13:15.840
But yeah, this is the
point, right?

00:13:15.840 --> 00:13:18.620
We have this thing called
content security policy, which

00:13:18.620 --> 00:13:21.480
basically says, well, I know
all the resources that my

00:13:21.480 --> 00:13:23.340
application can access.

00:13:23.340 --> 00:13:26.300
So I don't allow dynamic script
loading and injection

00:13:26.300 --> 00:13:27.680
from third party sources.

00:13:27.680 --> 00:13:30.630
I won't allow images to be
loaded in from other source as

00:13:30.630 --> 00:13:32.230
well, and, likewise, with
cookies and all

00:13:32.230 --> 00:13:32.970
that type of stuff.

00:13:32.970 --> 00:13:36.540
And if we can disable those
things, and eval, and--

00:13:36.540 --> 00:13:39.870
RENATO MANGINI: So it's
basically impossible to put a

00:13:39.870 --> 00:13:43.840
script tag on HTML because
it doesn't evolve.

00:13:43.840 --> 00:13:47.160
PAUL KINLAN: Yeah, with
Markdown, in some versions or

00:13:47.160 --> 00:13:48.750
flavors of Markdown,
at least, you can

00:13:48.750 --> 00:13:50.450
inject HTML code yourself.

00:13:50.450 --> 00:13:53.300
Which the normal, plain HTML
code will be fine.

00:13:53.300 --> 00:13:56.240
But if it injects, finds
a script tag, it

00:13:56.240 --> 00:13:57.360
won't let you do it.

00:13:57.360 --> 00:13:59.020
You can't run script
tags in line.

00:13:59.020 --> 00:14:01.050
Eval is disabled as well.

00:14:01.050 --> 00:14:02.860
So we can't do those
types of things.

00:14:02.860 --> 00:14:06.450
So it's not great, from the
way that we encourage

00:14:06.450 --> 00:14:08.030
developers to build applications
that interact

00:14:08.030 --> 00:14:10.390
with the DOM, and make
new DOM elements, but

00:14:10.390 --> 00:14:12.100
it's relatively safe.

00:14:12.100 --> 00:14:16.010
So let's break out this.

00:14:16.010 --> 00:14:21.950
The thing I really want to do
is, I will show you how to

00:14:21.950 --> 00:14:25.100
build and bring in your
nodes modules.

00:14:25.100 --> 00:14:29.480
So the basic thing we do, NPM
install, which, if you've

00:14:29.480 --> 00:14:32.090
installed node inside your
development environment, NPM

00:14:32.090 --> 00:14:33.920
basically comes pre-installed.

00:14:33.920 --> 00:14:36.692
And we have the ability, it's
like kind of git, where it's

00:14:36.692 --> 00:14:38.970
got a special set of
command lines.

00:14:38.970 --> 00:14:43.550
Install is the ability to
install modules into your

00:14:43.550 --> 00:14:45.540
local application working
directory.

00:14:45.540 --> 00:14:49.410
So let's install Markdown.

00:14:49.410 --> 00:14:53.900
It goes off, gets it, and if all
this works, this is cool.

00:14:53.900 --> 00:14:56.860
So if I do a brief look at this,
we have this directory

00:14:56.860 --> 00:14:59.310
called node modules--

00:14:59.310 --> 00:15:00.560
Oopsie daisy, sorry--

00:15:04.120 --> 00:15:06.290
with a Markdown module
inside there.

00:15:06.290 --> 00:15:08.810
This is packaged up inside my
application when I deploy it,

00:15:08.810 --> 00:15:11.110
so I know I've got all the
dependencies that I need.

00:15:11.110 --> 00:15:14.920
If Markdown required other
dependencies for other node

00:15:14.920 --> 00:15:17.220
modules, it'd bring them
and import them in.

00:15:17.220 --> 00:15:19.050
RENATO MANGINI: And now you
are talking about NodeJS

00:15:19.050 --> 00:15:19.860
specifically?

00:15:19.860 --> 00:15:23.220
There is nothing related
to the Chrome

00:15:23.220 --> 00:15:24.580
packaged app yet, right?

00:15:24.580 --> 00:15:26.775
PAUL KINLAN: Yeah, this isn't
specific at all to Chrome

00:15:26.775 --> 00:15:27.480
packaged apps.

00:15:27.480 --> 00:15:28.740
This is just a very--

00:15:28.740 --> 00:15:30.690
we want to use a basic
node module.

00:15:30.690 --> 00:15:33.670
How do we actually use a node
module inside Chrome?

00:15:33.670 --> 00:15:34.820
We're not quite there
just yet.

00:15:34.820 --> 00:15:36.070
We have to do this thing
called Browserify.

00:15:38.910 --> 00:15:41.350
Yeah, it's a really
nice project.

00:15:41.350 --> 00:15:45.440
Basically, the reason why this
all works, and the reason we

00:15:45.440 --> 00:15:48.720
can do today, is because an
external developer has

00:15:48.720 --> 00:15:50.530
basically made it so that
you can run node

00:15:50.530 --> 00:15:51.510
modules in the web.

00:15:51.510 --> 00:15:54.520
And we're taking advantage of
all this functionality to say,

00:15:54.520 --> 00:15:56.560
well, we can do is for our
Chrome applications now.

00:15:56.560 --> 00:15:57.970
So Browserify is the project.

00:15:57.970 --> 00:16:00.220
It's on github.com.

00:16:00.220 --> 00:16:05.590
But basically, what we do is, we
import the Markdown module,

00:16:05.590 --> 00:16:08.280
which is fine, and we
then output it to

00:16:08.280 --> 00:16:09.530
a file called bundle.js.

00:16:11.880 --> 00:16:14.620
So this is not going to make too
much sense, but if we look

00:16:14.620 --> 00:16:18.750
at bundle.js, it's basically
including all the code that is

00:16:18.750 --> 00:16:21.780
needed to run basic NodeJS
applications inside the

00:16:21.780 --> 00:16:23.640
browser and also Chrome
applications.

00:16:23.640 --> 00:16:25.610
RENATO MANGINI: So that's
the secret step.

00:16:25.610 --> 00:16:27.470
PAUL KINLAN: Yeah, it does
all the secret step.

00:16:27.470 --> 00:16:28.410
I've done none of this work.

00:16:28.410 --> 00:16:30.690
It's all been done by the
community at large, and we're

00:16:30.690 --> 00:16:34.440
just taking advantage of that
for your Chrome applications.

00:16:34.440 --> 00:16:35.920
But we'll jump out.

00:16:35.920 --> 00:16:38.330
It's important, Markdown,
it's in there.

00:16:38.330 --> 00:16:48.270
And if we jump into Chrome,
load unpacked extension,

00:16:48.270 --> 00:16:58.420
projects, GPL, Markdown, styles,
we've added an in, and

00:16:58.420 --> 00:17:06.319
this should, if we view the
code, this is our code, yep.

00:17:06.319 --> 00:17:12.140
This is our proper project
testing, hello.

00:17:12.140 --> 00:17:12.940
RENATO MANGINI: That's
awesome.

00:17:12.940 --> 00:17:14.119
PAUL KINLAN: --world.

00:17:14.119 --> 00:17:18.010
Yeah, from, like, my user code,
I've already done a

00:17:18.010 --> 00:17:21.810
couple of lines of basic code,
10 lines of code, a lot of is

00:17:21.810 --> 00:17:24.540
bootstrap of bringing in
elements and all this type of

00:17:24.540 --> 00:17:27.599
stuff, but we've literally
been able to build this

00:17:27.599 --> 00:17:30.950
application out using other
third party modules, quickly

00:17:30.950 --> 00:17:33.935
using the Node MPN package
manager, yeah,

00:17:33.935 --> 00:17:35.320
and it's pretty cool.

00:17:35.320 --> 00:17:35.610
RENATO MANGINI: Awesome.

00:17:35.610 --> 00:17:36.480
PAUL KINLAN: It's pretty nice.

00:17:36.480 --> 00:17:38.160
RENATO MANGINI: That's
really cool.

00:17:38.160 --> 00:17:41.700
PAUL KINLAN: So do we have
any questions from--?

00:17:41.700 --> 00:17:43.670
RENATO MANGINI: We
have some, but--

00:17:43.670 --> 00:17:45.290
PAUL KINLAN: We can deal with,
actually, can we debug.

00:17:45.290 --> 00:17:46.460
I think that's the biggest one,
right, is like, can we

00:17:46.460 --> 00:17:49.330
debug a node application?

00:17:49.330 --> 00:17:52.500
So the thing to notice about
this is, node is built on the

00:17:52.500 --> 00:17:53.585
back of V8.

00:17:53.585 --> 00:17:56.090
Chrome's JavaScript engine is
built on the back of V8.

00:17:56.090 --> 00:17:58.770
There's a lot of things inside
of node which are purely

00:17:58.770 --> 00:18:00.320
written in C, essentially.

00:18:00.320 --> 00:18:04.070
They're like hard wrappers
to the V8 engine.

00:18:04.070 --> 00:18:06.350
So what's actually happening now
is, this is really just an

00:18:06.350 --> 00:18:12.120
emulation of node and its
libraries inside Chrome it's

00:18:12.120 --> 00:18:15.260
not a full NodeJS system
inside Chrome.

00:18:15.260 --> 00:18:20.600
So that might have some kind
of negative benefits, like

00:18:20.600 --> 00:18:24.600
negative aspects to this, in
the sense that, if some

00:18:24.600 --> 00:18:27.090
modules had been written in
C, and they're specially

00:18:27.090 --> 00:18:31.230
optimized for node on the server
environment, we're not

00:18:31.230 --> 00:18:33.270
necessarily going to get that
kind of performance out of it

00:18:33.270 --> 00:18:36.390
because the buffer object, for
instance, in NodeJS, we have

00:18:36.390 --> 00:18:38.500
to manage that ourselves.

00:18:38.500 --> 00:18:40.450
We to manage that inside
JavaScript.

00:18:40.450 --> 00:18:42.350
Inside node, that's actually
managed by a

00:18:42.350 --> 00:18:44.470
basically native code.

00:18:44.470 --> 00:18:48.360
So the interesting thing is, it
has a negative, which is,

00:18:48.360 --> 00:18:49.510
potentially, performance.

00:18:49.510 --> 00:18:50.540
I don't think it's going
to be that much

00:18:50.540 --> 00:18:51.550
of a problem, though.

00:18:51.550 --> 00:18:54.020
The benefit, though, and to
answer this question, is that

00:18:54.020 --> 00:18:56.160
we can actually debug these
things a lot better inside the

00:18:56.160 --> 00:18:57.830
Chrome dev tools.

00:18:57.830 --> 00:18:59.960
The reason why we can debug
these things inside Chrome dev

00:18:59.960 --> 00:19:04.270
tools, is, well, you'll
see it now.

00:19:04.270 --> 00:19:06.170
Is it's just an HTML and
JavaScript web-based

00:19:06.170 --> 00:19:07.610
application.

00:19:07.610 --> 00:19:14.240
So if we go here, reload page,
so if we reload the page, we

00:19:14.240 --> 00:19:16.200
should still have our break
points still set.

00:19:16.200 --> 00:19:18.740
If we break into this, you'll
see it breaks into this

00:19:18.740 --> 00:19:21.200
bundle.js, which is
the compiled code

00:19:21.200 --> 00:19:23.590
from Browserify project.

00:19:23.590 --> 00:19:24.450
So it's pretty cool, right?

00:19:24.450 --> 00:19:26.500
I mean, we can do a whole
lot of stuff.

00:19:26.500 --> 00:19:28.190
It doesn't make much sense for
me to show them too much else

00:19:28.190 --> 00:19:28.870
about this.

00:19:28.870 --> 00:19:31.640
But everything's JavaScript,
everything's imported inside

00:19:31.640 --> 00:19:33.100
the browser, which means
that you can debug your

00:19:33.100 --> 00:19:34.200
applications.

00:19:34.200 --> 00:19:36.400
It doesn't mean that you can go
and debug your node-based

00:19:36.400 --> 00:19:38.970
application on the server.

00:19:38.970 --> 00:19:41.165
You still have to go through the
existing methods that you

00:19:41.165 --> 00:19:41.950
used that way.

00:19:41.950 --> 00:19:44.940
RENATO MANGINI: So basically,
what you're doing there, on

00:19:44.940 --> 00:19:50.170
the debug part, you are
debugging the bundle js, and

00:19:50.170 --> 00:20:00.250
the bundle js, it will be like
the "node runtime," quoted.

00:20:00.250 --> 00:20:05.070
So does the bundle js--

00:20:05.070 --> 00:20:09.950
what type of limitations, aside
from performance, that

00:20:09.950 --> 00:20:11.350
you already mentioned?

00:20:11.350 --> 00:20:12.530
PAUL KINLAN: So some
of the limitations

00:20:12.530 --> 00:20:14.430
it has at the moment--

00:20:14.430 --> 00:20:17.910
it's only got the basic APIs
of NodeJS stubbed out.

00:20:17.910 --> 00:20:20.350
Which, for the majority
of modules, is fine.

00:20:20.350 --> 00:20:21.820
It's absolutely fine.

00:20:21.820 --> 00:20:25.010
But if you want to do network
sockets, for instance, or

00:20:25.010 --> 00:20:28.720
serial port access, those types
of things, they don't

00:20:28.720 --> 00:20:29.400
exist on the web.

00:20:29.400 --> 00:20:32.410
So the engineers behind that
Browserify project have not

00:20:32.410 --> 00:20:34.350
implemented them.

00:20:34.350 --> 00:20:38.650
But that doesn't stop us from
doing it because the really

00:20:38.650 --> 00:20:41.610
cool thing is that Chrome has
got, inside this packaged app,

00:20:41.610 --> 00:20:44.370
this new apps platform module
at least, anyway, it's got

00:20:44.370 --> 00:20:47.420
access to a whole load of
hardware based APIs.

00:20:47.420 --> 00:20:50.480
So we can talk to serial ports,
network sockets, so we

00:20:50.480 --> 00:20:52.595
can do TCP and UDP.

00:20:52.595 --> 00:20:54.840
What else can we do,
USB, Bluetooth--

00:20:54.840 --> 00:20:58.320
RENATO MANGINI: Bluetooth
on some platforms.

00:20:58.320 --> 00:21:03.360
We have Windows access, we have
a different file system--

00:21:03.360 --> 00:21:05.240
PAUL KINLAN: Yeah, so we've got
file system API as well.

00:21:05.240 --> 00:21:09.650
The FS module as well, inside
node, is pretty cool.

00:21:09.650 --> 00:21:12.530
But what this allows us to do,
in quite a few cases, as long

00:21:12.530 --> 00:21:16.440
as it's an asynchronous API
inside the NodeJS, is that we

00:21:16.440 --> 00:21:21.020
can have a really good kind of
go at fleshing out the actual

00:21:21.020 --> 00:21:21.630
implementation.

00:21:21.630 --> 00:21:24.230
So we can provide the Chrome
implementation over, say, the

00:21:24.230 --> 00:21:27.570
network socket API that maps
directly to the Chrome's

00:21:27.570 --> 00:21:28.620
socket API.

00:21:28.620 --> 00:21:29.295
RENATO MANGINI: Like
a wrapper?

00:21:29.295 --> 00:21:31.210
Yeah, it's just basically
a wrapper.

00:21:31.210 --> 00:21:32.400
And it's on github today.

00:21:32.400 --> 00:21:35.330
I've already got one for net
module, which is what I'm

00:21:35.330 --> 00:21:36.510
going to show you now.

00:21:36.510 --> 00:21:39.770
So it's a nice lead in
there, thank you.

00:21:39.770 --> 00:21:43.190
So this is our next
application.

00:21:43.190 --> 00:21:44.830
It's not going to
look like much.

00:21:44.830 --> 00:21:47.600
If you've ever done anything
with XML HTTP request, you'll

00:21:47.600 --> 00:21:50.450
say, well, I can just use
XML HTTP request.

00:21:50.450 --> 00:21:52.180
But this is all about
just doing a demo.

00:21:52.180 --> 00:21:53.430
So news.ycombinator.org--

00:21:55.866 --> 00:21:59.950
I really should do
my blog instead.

00:21:59.950 --> 00:22:04.060
Port 80, because this
is a bug in my code.

00:22:04.060 --> 00:22:07.950
And all it does is, it makes a
request out from my Chrome

00:22:07.950 --> 00:22:09.810
packaged application.

00:22:09.810 --> 00:22:13.530
And actually, rather than does
XML HTTP request, it uses the

00:22:13.530 --> 00:22:17.160
net module inside Chrome OS,
well not inside Chrome OS,

00:22:17.160 --> 00:22:20.240
NodeJS, so that we can actually
make our requests out

00:22:20.240 --> 00:22:21.660
using the module.

00:22:21.660 --> 00:22:22.130
In this case--

00:22:22.130 --> 00:22:24.270
RENATO MANGINI: So it
does a raw TCP--

00:22:24.270 --> 00:22:27.420
PAUL KINLAN: It does a raw TCP
connection and then writes the

00:22:27.420 --> 00:22:30.290
HTTP request out
to the socket.

00:22:30.290 --> 00:22:31.760
And then the web server
will respond, and we

00:22:31.760 --> 00:22:32.950
just display the data.

00:22:32.950 --> 00:22:35.560
So as you can see, I mean, it's
just telling you all the

00:22:35.560 --> 00:22:38.300
header information and a whole
lot of other stuff there.

00:22:38.300 --> 00:22:39.440
It's pretty cool.

00:22:39.440 --> 00:22:41.740
I really want to show you
guys the code because I

00:22:41.740 --> 00:22:44.600
really like this code.

00:22:44.600 --> 00:22:48.290
Most of it's taken from the
NodeJS documentation, just to

00:22:48.290 --> 00:22:50.310
kind of see how easily
it works.

00:22:50.310 --> 00:22:52.170
Let me just remove this there.

00:22:52.170 --> 00:22:55.860
So as you can see here, we have
the net module, require

00:22:55.860 --> 00:23:01.160
net, this doesn't come with
Browserify, but I've made the

00:23:01.160 --> 00:23:03.420
wrapper for Chrome, so we'll see
that in a second when we

00:23:03.420 --> 00:23:05.140
get into the code.

00:23:05.140 --> 00:23:07.080
We basically pass the URL.

00:23:07.080 --> 00:23:08.460
This is actually a
really nice API.

00:23:08.460 --> 00:23:11.130
Someone in the NodeJS community,
I think it actually

00:23:11.130 --> 00:23:15.410
might be default inside node,
actually, they wrote a proper

00:23:15.410 --> 00:23:16.720
URL object.

00:23:16.720 --> 00:23:20.120
Which means that we don't have
this in the browser, right?

00:23:20.120 --> 00:23:22.430
RENATO MANGINI: To deal with
schema, ports, and et cetera.

00:23:22.430 --> 00:23:24.840
PAUL KINLAN: To deal with
schema, ports, passing, query

00:23:24.840 --> 00:23:26.980
strings, path, the closest
that we get to it is the

00:23:26.980 --> 00:23:28.410
location object.

00:23:28.410 --> 00:23:31.490
I mean, we can't construct a
brand new location object just

00:23:31.490 --> 00:23:32.580
inside the browser.

00:23:32.580 --> 00:23:33.960
It's a real pain.

00:23:33.960 --> 00:23:35.570
But now it's in node.

00:23:35.570 --> 00:23:37.930
You just do, and here's the code
here, if we just zoom in

00:23:37.930 --> 00:23:42.000
a bit more-- oh, I won't
zoom in that much.

00:23:42.000 --> 00:23:45.620
url.pass, and it passes the
value, the string that we put

00:23:45.620 --> 00:23:47.500
in and returns the url object.

00:23:47.500 --> 00:23:48.090
It's beautiful.

00:23:48.090 --> 00:23:50.970
It's really nice, and that's
all thanks to node and the

00:23:50.970 --> 00:23:54.620
fact that we can run this inside
Chrome via Browserify.

00:23:54.620 --> 00:23:57.410
So should we just jump in?

00:23:57.410 --> 00:23:58.890
I mean, I've shown you the
code anyway, but we'll

00:23:58.890 --> 00:24:00.186
probably just jump in
to show how easy it

00:24:00.186 --> 00:24:01.700
is to do this thing?

00:24:01.700 --> 00:24:03.220
RENATO MANGINI: Is it's like,
three lines of code?

00:24:03.220 --> 00:24:05.470
PAUL KINLAN: No, this is
a little bit more.

00:24:05.470 --> 00:24:08.910
It's four lines of code now.

00:24:08.910 --> 00:24:10.110
Web requester.

00:24:10.110 --> 00:24:14.770
So if we view index.html, you'll
see that I've just got

00:24:14.770 --> 00:24:16.460
everything already
made for us.

00:24:16.460 --> 00:24:20.640
It takes too much effort to go
and do all the html live.

00:24:20.640 --> 00:24:21.200
So [? let's edit ?]

00:24:21.200 --> 00:24:25.030
vsplit, I can't spell vsplit
at all today--

00:24:25.030 --> 00:24:27.120
index.js.

00:24:27.120 --> 00:24:29.520
Add it anyway, that's fine,
all right, cool.

00:24:29.520 --> 00:24:31.450
And in this one, I've prepared
all the boilerplate

00:24:31.450 --> 00:24:32.530
code ahead of time.

00:24:32.530 --> 00:24:34.060
RENATO MANGINI: Ah, OK.

00:24:34.060 --> 00:24:35.450
PAUL KINLAN: So let's just
jump into the code.

00:24:35.450 --> 00:24:39.200
I actually have written it out
down here, so it's var net =

00:24:39.200 --> 00:24:40.790
require net.

00:24:40.790 --> 00:24:44.810
This is using the same NodeJS
import system to import the

00:24:44.810 --> 00:24:45.570
net module.

00:24:45.570 --> 00:24:49.910
Var url = require url.

00:24:53.260 --> 00:24:59.790
And then var sys
= require sys.

00:24:59.790 --> 00:25:01.640
And that's basically all of the
modules that we need for

00:25:01.640 --> 00:25:02.580
our application.

00:25:02.580 --> 00:25:04.670
Now the really cool thing about
this is that we're going

00:25:04.670 --> 00:25:08.780
to basically pass the host.

00:25:08.780 --> 00:25:10.390
This, I love this.

00:25:10.390 --> 00:25:11.330
It sounds stupid.

00:25:11.330 --> 00:25:12.240
It does sound stupid.

00:25:12.240 --> 00:25:16.280
But I just love this module
because I can do

00:25:16.280 --> 00:25:17.530
so much with it.

00:25:20.070 --> 00:25:21.940
I'm just going to take some
values I'm going to use for

00:25:21.940 --> 00:25:25.630
later on, port, and this is
why I love it, right?

00:25:25.630 --> 00:25:31.980
Pass int, host.port,
or port 80.

00:25:31.980 --> 00:25:34.580
So the bug that I had in my
code originally, it didn't

00:25:34.580 --> 00:25:37.200
have this or 80, essentially.

00:25:37.200 --> 00:25:38.840
So if you didn't put port in,
it'd just assume that there

00:25:38.840 --> 00:25:40.090
was no port.

00:25:42.060 --> 00:25:45.162
Host, host.hostname.

00:25:45.162 --> 00:25:47.290
Cool.

00:25:47.290 --> 00:25:50.770
And that's all we need
to pass it out.

00:25:50.770 --> 00:25:51.960
If you've ever done anything
like this in JavaScript,

00:25:51.960 --> 00:25:55.260
trying to pass out URL fragments
and syntax, like

00:25:55.260 --> 00:25:57.150
some if someone's giving
you a URL, you'll

00:25:57.150 --> 00:25:57.860
know how hard it is.

00:25:57.860 --> 00:25:59.410
So it's just nice, the fact
that we can actually bring

00:25:59.410 --> 00:26:00.950
this into our applications.

00:26:00.950 --> 00:26:03.760
This is actually, if you use
Browserify just normally, this

00:26:03.760 --> 00:26:05.520
is available to every
web application.

00:26:05.520 --> 00:26:09.740
So if you need a URL object
parser that's the one to use.

00:26:09.740 --> 00:26:11.980
So client, so if you're a NodeJS
developer, you'll know

00:26:11.980 --> 00:26:13.070
this already.

00:26:13.070 --> 00:26:22.540
net.creat net.create connection
with my options,

00:26:22.540 --> 00:26:29.700
set some encoding, actually,
I put this in just

00:26:29.700 --> 00:26:31.266
to be a nice citizen.

00:26:31.266 --> 00:26:34.800
I actually haven't stubbed
out the code for this.

00:26:34.800 --> 00:26:39.290
So right, this is the meat
of the code now.

00:26:39.290 --> 00:26:42.296
Client connect, ooh, can't
spell function.

00:26:46.860 --> 00:26:48.460
There we are.

00:26:48.460 --> 00:26:51.580
RENATO MANGINI: We have some
YouTube commenters telling

00:26:51.580 --> 00:26:54.000
that you will misspelled
require--

00:26:54.000 --> 00:26:55.650
[INAUDIBLE] require.

00:26:55.650 --> 00:26:57.010
PAUL KINLAN: Aww!

00:26:57.010 --> 00:26:59.660
Nice, nice, real
time feedback.

00:26:59.660 --> 00:27:00.720
RENATO MANGINI: Thank you.

00:27:00.720 --> 00:27:02.690
PAUL KINLAN: I still
can't spell it.

00:27:02.690 --> 00:27:03.720
There we are.

00:27:03.720 --> 00:27:04.970
Thank you very much.

00:27:07.720 --> 00:27:10.420
Yeah, so this is done live.

00:27:10.420 --> 00:27:14.260
Only practiced lots of times,
as you can't tell, sorry.

00:27:14.260 --> 00:27:19.550
Host.path, so this is going to
look like a bit of voodoo

00:27:19.550 --> 00:27:22.920
magic, well, not necessarily
really voodoo magic, but

00:27:22.920 --> 00:27:24.770
you'll see what I'm doing
in a second second.

00:27:24.770 --> 00:27:28.830
So this is because we, as kind
of web developers, we know and

00:27:28.830 --> 00:27:31.490
understand the structure of the
code and how to make an

00:27:31.490 --> 00:27:33.520
HTTP request.

00:27:33.520 --> 00:27:36.540
The thing about the NodeJS
stuff, this application, is

00:27:36.540 --> 00:27:38.460
that we're using the
raw socket API.

00:27:38.460 --> 00:27:40.830
It doesn't know how to make
an HTTP request, so we're

00:27:40.830 --> 00:27:43.430
actually formulating the request
that we're going to

00:27:43.430 --> 00:27:46.340
make out to the remote
service.

00:27:46.340 --> 00:27:49.030
So once we have a connection,
and we know that we can

00:27:49.030 --> 00:27:51.480
successfully connect it to the
service, we're going to build

00:27:51.480 --> 00:27:58.360
out this request,
host, host.host.

00:27:58.360 --> 00:28:00.300
I could've refracted this a
little bit more, I suppose,

00:28:00.300 --> 00:28:05.950
slash n, slash n, boom,
client.write.

00:28:05.950 --> 00:28:08.920
And I'm going to explain a lot
more about this right now.

00:28:08.920 --> 00:28:14.530
So what we've done here is,
we've created a connection to

00:28:14.530 --> 00:28:19.060
the URL that we specified
in the text box--

00:28:19.060 --> 00:28:21.400
I couldn't think of the word,
then, to save my life.

00:28:21.400 --> 00:28:23.400
We've basically passed the URL
out, we've made the connection

00:28:23.400 --> 00:28:26.400
to the service, once we know
that we're connected, there's

00:28:26.400 --> 00:28:27.450
an on event, essentially.

00:28:27.450 --> 00:28:28.100
It's an [? eventer ?]

00:28:28.100 --> 00:28:29.120
method inside NodeJS.

00:28:29.120 --> 00:28:33.060
So it's the same style event
model, like event inventing

00:28:33.060 --> 00:28:36.400
logic that you have, which is
different in normal website.

00:28:36.400 --> 00:28:38.370
RENATO MANGINI: Yeah, this
is very common for node

00:28:38.370 --> 00:28:40.640
developers they would look
at the code and--

00:28:40.640 --> 00:28:42.220
PAUL KINLAN: Yeah, exactly.

00:28:42.220 --> 00:28:43.390
We formulate the request.

00:28:43.390 --> 00:28:44.060
It's just a get request.

00:28:44.060 --> 00:28:44.980
It doesn't do much else.

00:28:44.980 --> 00:28:49.930
It takes the path, tells it it's
a HTTP 1.1 protocol, and

00:28:49.930 --> 00:28:51.580
then gives it the host,
the host name, because

00:28:51.580 --> 00:28:54.420
that's what we need.

00:28:54.420 --> 00:28:55.760
And then it writes out
to the socket.

00:28:55.760 --> 00:28:57.720
So what we've done in this part
now is that we've taken

00:28:57.720 --> 00:29:00.890
this code, and we've basically
said, open the connection and

00:29:00.890 --> 00:29:02.930
send the data to
the web server.

00:29:02.930 --> 00:29:06.220
The web server will send us data
back, however, we can't

00:29:06.220 --> 00:29:07.940
do anything with it just
yet because we've no

00:29:07.940 --> 00:29:09.080
way to handle it.

00:29:09.080 --> 00:29:11.730
So let's have a quick
go at that.

00:29:11.730 --> 00:29:13.890
So client.on.

00:29:13.890 --> 00:29:16.130
So this is another event.

00:29:16.130 --> 00:29:17.810
I can't spell.

00:29:17.810 --> 00:29:19.790
Data, oh wow.

00:29:22.810 --> 00:29:24.990
Data--

00:29:24.990 --> 00:29:27.850
and we're not going to do
too much with this.

00:29:27.850 --> 00:29:34.090
result.innerText, yeah, it
can be multiple requests.

00:29:34.090 --> 00:29:35.260
So let's do that.

00:29:35.260 --> 00:29:39.040
data.toString, and
there we go.

00:29:41.890 --> 00:29:42.840
I think we're all closed off.

00:29:42.840 --> 00:29:44.970
RENATO MANGINI: So what you're
doing with the response from

00:29:44.970 --> 00:29:47.390
the server is just
setting it on--

00:29:47.390 --> 00:29:50.030
PAUL KINLAN: Yeah, we're just
setting it on the div, just to

00:29:50.030 --> 00:29:51.840
show what's happening.

00:29:51.840 --> 00:29:55.643
So the interesting thing is,
this, again, will not work.

00:29:55.643 --> 00:29:56.350
RENATO MANGINI: Why?

00:29:56.350 --> 00:29:58.920
PAUL KINLAN: Because we've
not imported the module.

00:29:58.920 --> 00:30:00.810
So I actually have the URL.

00:30:00.810 --> 00:30:03.530
I've not published it live
into MPM just yet because

00:30:03.530 --> 00:30:05.680
there's a whole load of things
I want to get sorted out.

00:30:05.680 --> 00:30:07.190
But it is on github.

00:30:07.190 --> 00:30:10.870
So MPM install git,
github.com/paulk

00:30:10.870 --> 00:30:12.120
inlan/net-chromify.git.

00:30:26.630 --> 00:30:27.920
RENATO MANGINI: Installed?

00:30:27.920 --> 00:30:29.970
PAUL KINLAN: It's actually
installed it from my local

00:30:29.970 --> 00:30:34.670
system because I actually
had it on previously.

00:30:34.670 --> 00:30:35.420
Demo fail.

00:30:35.420 --> 00:30:37.720
But let's have a look.

00:30:37.720 --> 00:30:40.720
Let's see if we can load--
what am I doing?

00:30:40.720 --> 00:30:41.950
I apologize--

00:30:41.950 --> 00:30:44.530
load it in.

00:30:44.530 --> 00:30:45.780
Web requestor.

00:30:49.160 --> 00:31:03.510
Testing.org It doesn't
have an index.html.

00:31:03.510 --> 00:31:04.760
Oh, we've got an error.

00:31:04.760 --> 00:31:06.010
Let's have a look what it is.

00:31:09.880 --> 00:31:11.130
Hmm.

00:31:14.770 --> 00:31:18.830
well, should we show off
the debugging support.

00:31:18.830 --> 00:31:21.730
RENATO MANGINI: Oh, leave
the bug session, uh oh.

00:31:21.730 --> 00:31:23.190
Leave the bug session.

00:31:23.190 --> 00:31:25.410
Live the bug session.

00:31:25.410 --> 00:31:29.290
There is one question
on YouTube .

00:31:29.290 --> 00:31:32.440
[? Montis Lewis ?] is asking
where is window.require?

00:31:32.440 --> 00:31:35.300
Because you call a require
method on the full name space.

00:31:35.300 --> 00:31:37.910
PAUL KINLAN: Yes, so let
me show you actually.

00:31:37.910 --> 00:31:40.400
So where's the window.require?

00:31:40.400 --> 00:31:41.270
This is interesting, right?

00:31:41.270 --> 00:31:44.990
So this is exactly what
Browserify does for us.

00:31:50.180 --> 00:31:52.340
Oh, you know why
it didn't work?

00:31:52.340 --> 00:31:53.250
RENATO MANGINI: Why?

00:31:53.250 --> 00:31:54.640
PAUL KINLAN: I'll tell you
why it didn't work.

00:31:54.640 --> 00:31:58.250
So let's actually answer
that question.

00:31:58.250 --> 00:32:02.397
So Browserify -r netChromify
net.

00:32:05.380 --> 00:32:09.650
So map the net Chromify module
to the net name space.

00:32:09.650 --> 00:32:16.230
-sys, and also include url
and output bundle.js.

00:32:18.820 --> 00:32:19.920
So if we look at bundle--

00:32:19.920 --> 00:32:25.110
I apologize again,
bundle.js this is

00:32:25.110 --> 00:32:27.160
actually where it's defined.

00:32:27.160 --> 00:32:30.740
RENATO MANGINI: All right, so
what Browserify did there is

00:32:30.740 --> 00:32:35.580
imported out the node modules
that you specified, and

00:32:35.580 --> 00:32:38.160
generated the bundle
without this--

00:32:38.160 --> 00:32:41.910
PAUL KINLAN: Yeah, so basically
if we do a search

00:32:41.910 --> 00:32:44.890
for net, then it's basically
brought net

00:32:44.890 --> 00:32:46.210
into this bundle object.

00:32:46.210 --> 00:32:49.540
So bundle.js is a collection
of all our node modules.

00:32:49.540 --> 00:32:52.170
It's a collection of all the
core functionality that's

00:32:52.170 --> 00:32:53.510
needed via--

00:32:53.510 --> 00:32:56.120
RENATO MANGINI: And what does it
also look for dependencies

00:32:56.120 --> 00:32:57.280
inside those modules?

00:32:57.280 --> 00:33:00.440
For example, if net depends
another module,

00:33:00.440 --> 00:33:01.610
it does look for--

00:33:01.610 --> 00:33:04.060
PAUL KINLAN: Yeah, so I've
actually got a bug fix out as

00:33:04.060 --> 00:33:05.790
well for this, inside
Browserify.

00:33:05.790 --> 00:33:08.780
But essentially, if you look at
the Markdown project that

00:33:08.780 --> 00:33:11.420
we had before, it had
some sub modules.

00:33:11.420 --> 00:33:18.270
So if you go to require./
another js file, when you do

00:33:18.270 --> 00:33:20.710
the Browserify process, it will
go and pass out all the

00:33:20.710 --> 00:33:24.690
modules it needs to load in into
this one JavaScript file.

00:33:24.690 --> 00:33:28.860
And to the same extent as well,
you have to prerequire

00:33:28.860 --> 00:33:31.070
all the call libraries
yourself.

00:33:31.070 --> 00:33:33.230
But it will spit out an error
that you can't find one of the

00:33:33.230 --> 00:33:34.955
modules you'll need.

00:33:34.955 --> 00:33:37.710
But the really interesting thing
is, generally, is if you

00:33:37.710 --> 00:33:40.650
do an MPM install, you only
really have to do the

00:33:40.650 --> 00:33:42.800
highlight, the top level module,
for it to go off and

00:33:42.800 --> 00:33:46.140
go, well I know all the
node modules I need--

00:33:46.140 --> 00:33:51.325
RENATO MANGINI: If if net
required a TCP module, I don't

00:33:51.325 --> 00:33:56.122
even know if that is one, if you
do in MPM install net, the

00:33:56.122 --> 00:33:57.560
TCP module would
also install--

00:33:57.560 --> 00:34:01.070
PAUL KINLAN: Yeah, I mean,
it's all part of it.

00:34:01.070 --> 00:34:03.605
And net in our case here
is our own module.

00:34:03.605 --> 00:34:06.000
But if we required any extra
modules, if we broke it up a

00:34:06.000 --> 00:34:08.500
little bit to make the code a
bit more maintainable, it'll

00:34:08.500 --> 00:34:09.699
bring all them in.

00:34:09.699 --> 00:34:11.560
So it can do that.

00:34:11.560 --> 00:34:13.989
So I actually want to
see if I fixed this.

00:34:20.889 --> 00:34:22.139
News.ycominator.org--

00:34:24.809 --> 00:34:27.195
let's do port 80 as well,
just in case, in case I

00:34:27.195 --> 00:34:27.520
didn't fix the bugs.

00:34:27.520 --> 00:34:29.150
No, it didn't work.

00:34:29.150 --> 00:34:30.820
So yeah, this is live.

00:34:30.820 --> 00:34:31.850
We had a demo fail today.

00:34:31.850 --> 00:34:34.540
RENATO MANGINI: No problem,
I trust you

00:34:34.540 --> 00:34:35.886
that the code is working.

00:34:35.886 --> 00:34:37.136
PAUL KINLAN: Thank
you very much.

00:34:39.230 --> 00:34:40.440
RENATO MANGINI: That's
really awesome.

00:34:40.440 --> 00:34:44.219
So what it did there, you
created a simple code that

00:34:44.219 --> 00:34:46.139
used the net module.

00:34:46.139 --> 00:34:50.320
But the net module is
not Browserify.

00:34:50.320 --> 00:34:52.130
It doesn't come with
Browserify, right?

00:34:52.130 --> 00:34:57.300
So you wrote a wrapper around a
Chrome-packaged app, socket

00:34:57.300 --> 00:35:02.970
APIs and converting those
APIs to the the same

00:35:02.970 --> 00:35:03.830
syntax as net module.

00:35:03.830 --> 00:35:04.400
PAUL KINLAN: Yeah, exactly.

00:35:04.400 --> 00:35:05.680
RENATO MANGINI: So you can use
exactly the same code that

00:35:05.680 --> 00:35:09.020
uses net module, you can use it
on your Chrome [INAUDIBLE]

00:35:09.020 --> 00:35:09.150
PAUL KINLAN: Yeah, exactly.

00:35:09.150 --> 00:35:11.690
Basically, it's a complete
mapper to the node APIs.

00:35:11.690 --> 00:35:12.410
RENATO MANGINI: That's
really cool.

00:35:12.410 --> 00:35:14.200
PAUL KINLAN: So what's just kind
of cool is, if we want to

00:35:14.200 --> 00:35:16.830
access serial ports and all
these types of things, it's

00:35:16.830 --> 00:35:17.520
pretty cool.

00:35:17.520 --> 00:35:19.430
RENATO MANGINI: So we can have
developers creating those

00:35:19.430 --> 00:35:22.410
wrappers for every API
that's not supported

00:35:22.410 --> 00:35:23.440
by Browserify, fight?

00:35:23.440 --> 00:35:24.220
PAUL KINLAN: Yeah,
exactly, yeah.

00:35:24.220 --> 00:35:25.290
RENATO MANGINI: Awesome.

00:35:25.290 --> 00:35:26.750
PAUL KINLAN: So the really
interesting thing as well is

00:35:26.750 --> 00:35:30.250
that the net module itself
doesn't come with a server.

00:35:30.250 --> 00:35:31.290
So I'll rephrase it.

00:35:31.290 --> 00:35:32.920
It comes with client
connections.

00:35:32.920 --> 00:35:35.120
You make the connection, but
you can also create a TCP

00:35:35.120 --> 00:35:36.610
server with it as well.

00:35:36.610 --> 00:35:40.220
And I think from our talk two
or three weeks ago, when we

00:35:40.220 --> 00:35:42.680
talked about Chrome actually has
listen and accept methods

00:35:42.680 --> 00:35:45.230
now, so you can actually have
Chrome running as a web server

00:35:45.230 --> 00:35:47.460
or any type of server
that you want.

00:35:47.460 --> 00:35:48.540
I'm doing a little
bit more work.

00:35:48.540 --> 00:35:52.340
It's not an amazing amount, but
what's going to happen is,

00:35:52.340 --> 00:35:55.640
basically, you're going to be
able to run your node-based

00:35:55.640 --> 00:36:00.430
server, in theory, "in theory,"
inside your Chrome

00:36:00.430 --> 00:36:01.250
application.

00:36:01.250 --> 00:36:03.300
So if we have the complete
mapping between the net name

00:36:03.300 --> 00:36:06.000
space, then it'd be so cool if
we can get, you know, you're

00:36:06.000 --> 00:36:08.940
building applications with
Express or any of the node

00:36:08.940 --> 00:36:11.660
middleware modules for building
web servers--

00:36:11.660 --> 00:36:13.320
you could actually run your web
server and all your code

00:36:13.320 --> 00:36:14.390
inside your app.

00:36:14.390 --> 00:36:17.410
And when you're thinking about
these new kind of native like

00:36:17.410 --> 00:36:20.085
applications where you have all
the logic on the server,

00:36:20.085 --> 00:36:22.240
and, well, you're offline, what
happens, well you can

00:36:22.240 --> 00:36:24.430
have the similar type of
logic on the client.

00:36:24.430 --> 00:36:27.390
And then your pure UI client
itself still make the same

00:36:27.390 --> 00:36:30.040
types of requests out
to the server.

00:36:30.040 --> 00:36:31.350
It doesn't really have
to know it's offline.

00:36:31.350 --> 00:36:33.760
It just says, well, I'm going
to make these requests, and

00:36:33.760 --> 00:36:36.870
they get delegated back to our
application and then to the

00:36:36.870 --> 00:36:37.560
main web server.

00:36:37.560 --> 00:36:38.670
RENATO MANGINI: That's
really cool.

00:36:38.670 --> 00:36:42.150
And we have a huge community of
NodeJS developers, right?

00:36:42.150 --> 00:36:46.480
So we have a huge amount of
projects using NodeJS.

00:36:46.480 --> 00:36:49.800
And if those projects can run on
the client side, and if it

00:36:49.800 --> 00:36:52.670
makes sense for those projects
to run on the client side,

00:36:52.670 --> 00:36:57.200
it's interesting for users and
for developers that have a

00:36:57.200 --> 00:37:01.970
user base much bigger
than the--

00:37:01.970 --> 00:37:03.570
PAUL KINLAN: Yeah, it kickstarts
your whole

00:37:03.570 --> 00:37:04.925
development process.

00:37:04.925 --> 00:37:07.620
You can built these native type
applications using code

00:37:07.620 --> 00:37:08.730
that developers have
already made.

00:37:08.730 --> 00:37:10.990
And if you don't want to use
node, then we still have our

00:37:10.990 --> 00:37:13.830
raw, kind of low level socket
APIs for instance, for

00:37:13.830 --> 00:37:14.760
networking.

00:37:14.760 --> 00:37:17.920
Like the raw APIs that you
might need, but a lot of

00:37:17.920 --> 00:37:19.650
developers don't like dealing
with raw APIs.

00:37:19.650 --> 00:37:22.970
But we have the ability to go
deep into the raw API or

00:37:22.970 --> 00:37:24.770
higher level with the node
modules at least.

00:37:24.770 --> 00:37:25.720
RENATO MANGINI: That's
really cool.

00:37:25.720 --> 00:37:28.240
We are running out of time,
maybe we can jump--

00:37:28.240 --> 00:37:30.940
PAUL KINLAN: Should we jump
into some questions?

00:37:30.940 --> 00:37:34.540
RENATO MANGINI: OK, so the first
question from Luis, from

00:37:34.540 --> 00:37:38.150
Phoenix, how does MPM fit in?

00:37:38.150 --> 00:37:42.210
This question was made before
the session begin, but even

00:37:42.210 --> 00:37:44.950
though, I think you can
give a quick answer.

00:37:44.950 --> 00:37:48.150
PAUL KINLAN: Yeah, so I mean,
I hope it's been kind of

00:37:48.150 --> 00:37:51.740
relatively clear about how MPM
fits in, is that it's just

00:37:51.740 --> 00:37:53.710
part of your development
life cycle, right?

00:37:53.710 --> 00:37:55.310
So you'll have your application
that you're

00:37:55.310 --> 00:37:58.760
developing, say, on your Mac
box, or Linux, Windows.

00:37:58.760 --> 00:38:00.370
And you'll do MPM install.

00:38:00.370 --> 00:38:03.040
You'll install the
modules locally.

00:38:03.040 --> 00:38:05.230
They don't have to be locally
installed because,

00:38:05.230 --> 00:38:08.490
essentially, what happens is,
Browserify inspects all the

00:38:08.490 --> 00:38:09.990
node modules that you've
installed into your

00:38:09.990 --> 00:38:12.630
application space, essentially,
and then says,

00:38:12.630 --> 00:38:15.490
well, that's cool, they're
there, but we're going to make

00:38:15.490 --> 00:38:16.560
this big bundle file.

00:38:16.560 --> 00:38:18.310
And then you'll install that
inside the browser.

00:38:18.310 --> 00:38:22.910
RENATO MANGINI: So the user of
your web application that's

00:38:22.910 --> 00:38:27.820
uses Browserify doesn't need to
have node or MPM installed?

00:38:27.820 --> 00:38:29.240
PAUL KINLAN: It's just
you as a developer.

00:38:29.240 --> 00:38:32.300
And if you're developing node
based applications, you'll be

00:38:32.300 --> 00:38:34.570
using MPM anyway.

00:38:34.570 --> 00:38:36.980
It's the same time of process,
apart from this Browserify

00:38:36.980 --> 00:38:41.780
step, which you basically have
to use to convert your code

00:38:41.780 --> 00:38:43.830
and import all the module syntax
[? and all type of ?]

00:38:43.830 --> 00:38:44.790
stuff in.

00:38:44.790 --> 00:38:46.070
RENATO MANGINI: That's cool.

00:38:46.070 --> 00:38:47.590
PAUL KINLAN: It fits in.

00:38:47.590 --> 00:38:49.660
RENATO MANGINI: The
next question--

00:38:49.660 --> 00:38:54.270
what are the sandboxing
restrictions?

00:38:54.270 --> 00:38:56.360
PAUL KINLAN: So I suppose
there's a couple of different

00:38:56.360 --> 00:39:00.370
types of answers that we
can deal with on this.

00:39:00.370 --> 00:39:03.490
The sandboxing, it comes in in
a couple of different senses.

00:39:03.490 --> 00:39:06.050
There's the content security
policy, which basically

00:39:06.050 --> 00:39:09.465
sandboxes the things that you
can inject into a page.

00:39:09.465 --> 00:39:11.650
So you can't include external
resources unless you

00:39:11.650 --> 00:39:13.920
explicitly, in your manifest,
allow them.

00:39:16.670 --> 00:39:20.560
If you're making requests out
to the services, then, if

00:39:20.560 --> 00:39:24.060
you're using the node based net
API for sandboxing, then

00:39:24.060 --> 00:39:25.560
it's all permission based
inside Chrome.

00:39:25.560 --> 00:39:29.240
So let me just, if we can, jump
back into some code for

00:39:29.240 --> 00:39:30.880
the web requestor.

00:39:30.880 --> 00:39:35.110
The manifest basically has this
line at the bottom which

00:39:35.110 --> 00:39:38.060
I tried to highlight,
socket TCP connect.

00:39:38.060 --> 00:39:40.910
RENATO MANGINI: So you have
the same restrictions as a

00:39:40.910 --> 00:39:44.720
standard JavaScript code running
on a Chrome packaged

00:39:44.720 --> 00:39:45.360
app, right?

00:39:45.360 --> 00:39:45.940
PAUL KINLAN: Yeah.

00:39:45.940 --> 00:39:47.300
RENATO MANGINI: It's
exactly the same.

00:39:47.300 --> 00:39:50.880
You don't run native code,
you don't run to the

00:39:50.880 --> 00:39:52.750
native part of NodeJS.

00:39:52.750 --> 00:39:53.050
It's just JavaScript.

00:39:53.050 --> 00:39:55.640
PAUL KINLAN: Yeah, you don't run
the native part of NodeJS.

00:39:55.640 --> 00:39:59.330
And if we, for instance, used
the net module, for instance,

00:39:59.330 --> 00:40:03.170
that breaks out to the
Chrome.socket API, which is

00:40:03.170 --> 00:40:05.000
permission based.

00:40:05.000 --> 00:40:07.480
So when you actually want to
deal with these lower level

00:40:07.480 --> 00:40:09.860
APIs and these kind of more
advanced functionality than

00:40:09.860 --> 00:40:12.080
you get with a normal
application, then this is

00:40:12.080 --> 00:40:14.730
actually done through a
permission based system.

00:40:14.730 --> 00:40:17.890
So we have this exact same
sandboxing model as a normal

00:40:17.890 --> 00:40:19.220
website, a normal web page.

00:40:19.220 --> 00:40:21.770
Web pages can't request data
automatically from another web

00:40:21.770 --> 00:40:24.000
page, like inject--

00:40:24.000 --> 00:40:27.120
they just can't go
across process.

00:40:27.120 --> 00:40:29.240
So it's the same type of
sandboxing models.

00:40:29.240 --> 00:40:34.560
RENATO MANGINI: OK, next
question from Juice, what

00:40:34.560 --> 00:40:36.570
build is this available in?

00:40:36.570 --> 00:40:38.840
PAUL KINLAN: Yeah, so this
should work in--

00:40:38.840 --> 00:40:40.530
I think we're at
beta aren't we?

00:40:40.530 --> 00:40:43.420
We're in beta for the beta
channel at least--

00:40:43.420 --> 00:40:44.350
RENATO MANGINI: The 23?

00:40:44.350 --> 00:40:44.990
PAUL KINLAN: 23

00:40:44.990 --> 00:40:45.460
RENATO MANGINI: Yeah.

00:40:45.460 --> 00:40:47.500
PAUL KINLAN: Yeah, so the best
place says, this is all still

00:40:47.500 --> 00:40:49.520
kind of in development and
experimental at the moment.

00:40:49.520 --> 00:40:53.640
But it's getting to the point
where we want to get it live.

00:40:53.640 --> 00:40:56.350
The main thing to notice is
that I'd say, work on Dev

00:40:56.350 --> 00:40:58.550
Channel and Canary because
there are still kind of

00:40:58.550 --> 00:41:02.050
changes to some of the APIs
going on, and while the

00:41:02.050 --> 00:41:04.770
network socket API hasn't
changed in a long time, and

00:41:04.770 --> 00:41:07.800
I'm pretty sure it wont', we've
just got to make sure

00:41:07.800 --> 00:41:10.100
it's not unstable just yet.

00:41:10.100 --> 00:41:12.790
So I would work on the
Dev Channel for now.

00:41:12.790 --> 00:41:14.160
Work with Browserify as well--

00:41:14.160 --> 00:41:16.000
RENATO MANGINI: Especially if
you use the TCP lesson, and

00:41:16.000 --> 00:41:18.020
TCP lesson is only on Canary.

00:41:18.020 --> 00:41:18.660
PAUL KINLAN: Yeah,
so TCP lesson,

00:41:18.660 --> 00:41:19.650
actually, is only on Canary.

00:41:19.650 --> 00:41:21.790
And it's only on the
experimental flag as well, I

00:41:21.790 --> 00:41:22.435
think, isn't it?

00:41:22.435 --> 00:41:22.730
RENATO MANGINI: Yeah.

00:41:22.730 --> 00:41:24.840
PAUL KINLAN: So if you want to
do server-based work, we'd

00:41:24.840 --> 00:41:27.750
love you guys to go out and demo
it and kind of work on it

00:41:27.750 --> 00:41:29.416
and give us a lot of feedback
about that.

00:41:29.416 --> 00:41:32.310
But yeah.

00:41:32.310 --> 00:41:33.910
RENATO MANGINI: Where
we can find more

00:41:33.910 --> 00:41:35.680
docs on patched apps?

00:41:35.680 --> 00:41:39.070
PAUL KINLAN: So
developer.chrome.com/apps,

00:41:39.070 --> 00:41:41.880
that includes more of all
of our documentation.

00:41:41.880 --> 00:41:44.560
It actually doesn't have this
web, I can't believe someone

00:41:44.560 --> 00:41:46.050
actually noticed this unless
they looked at the code.

00:41:46.050 --> 00:41:46.980
RENATO MANGINI: Yeah,
that's really cool.

00:41:46.980 --> 00:41:48.420
PAUL KINLAN: That's actually
pretty cool.

00:41:48.420 --> 00:41:49.270
RENATO MANGINI: Do you
want to explain this?

00:41:49.270 --> 00:41:53.040
PAUL KINLAN: Yeah, webkit
app region--

00:41:53.040 --> 00:41:57.870
webkit app region is a piece of
CSS syntax that allows you

00:41:57.870 --> 00:41:59.510
to [INAUDIBLE], because you
notice in this application

00:41:59.510 --> 00:42:03.070
that we have here, we don't
actually have a title bar.

00:42:03.070 --> 00:42:04.660
And if you don't have a title
bar, how do you drag the

00:42:04.660 --> 00:42:05.850
application around?

00:42:05.850 --> 00:42:10.300
Well, webkit app region is the
piece of CSS syntax that you

00:42:10.300 --> 00:42:12.370
use to actually define
what's draggable.

00:42:12.370 --> 00:42:14.320
So I've made the left
bar here draggable.

00:42:14.320 --> 00:42:16.710
And if we inspect element.

00:42:16.710 --> 00:42:20.470
RENATO MANGINI: Actually, the
webkit app region specifies

00:42:20.470 --> 00:42:21.730
what is not draggable.

00:42:21.730 --> 00:42:25.010
PAUL KINLAN: Yes, and then you
specify it in here, the drag.

00:42:25.010 --> 00:42:27.360
So basically, you've specified
the drag area.

00:42:27.360 --> 00:42:30.200
So you can say non draggable.

00:42:30.200 --> 00:42:32.000
We don't actually have
that documentation.

00:42:32.000 --> 00:42:34.220
We need to get some
documentation for that because

00:42:34.220 --> 00:42:35.870
it's very Chrome
apps specific.

00:42:35.870 --> 00:42:41.100
RENATO MANGINI: OK, so do we
need to make a difference HTTP

00:42:41.100 --> 00:42:42.690
package to use the Chrome
TCP list editor?

00:42:45.580 --> 00:42:48.090
PAUL KINLAN: So I was under the
impression that the HTTP

00:42:48.090 --> 00:42:51.570
package was mainly about making
XML HTTP requests,

00:42:51.570 --> 00:42:54.660
like, style requests out, which
is kind of supported

00:42:54.660 --> 00:42:58.670
with XML HTTP request, anyway,
inside the Browserify project.

00:42:58.670 --> 00:43:02.260
If you want to go and make a
special Chrome-only version

00:43:02.260 --> 00:43:05.030
that uses the sockets, then
that's perfectly possible, but

00:43:05.030 --> 00:43:07.040
I think the code's
already there.

00:43:07.040 --> 00:43:09.380
For the actual TCP
listener, that's

00:43:09.380 --> 00:43:11.750
included in the net project.

00:43:11.750 --> 00:43:15.030
So in theory, if there was a
server component to the HTTP

00:43:15.030 --> 00:43:18.370
project, and it included the net
module, then they should

00:43:18.370 --> 00:43:21.410
just work in theory
and get pulled in.

00:43:21.410 --> 00:43:24.710
I will say now that the code
inside the net module for

00:43:24.710 --> 00:43:30.380
creating server based accept
and listen modules, it

00:43:30.380 --> 00:43:30.945
doesn't work yet.

00:43:30.945 --> 00:43:33.660
And I'm going to
get live soon.

00:43:33.660 --> 00:43:36.355
I've got to run through
all the unit tests.

00:43:36.355 --> 00:43:39.310
RENATO MANGINI: But you don't
need a different HTTP package?

00:43:39.310 --> 00:43:41.990
I mean, you need a wrapper
around the HTTP package?

00:43:41.990 --> 00:43:45.340
There's already an HTTP package,
and the way that

00:43:45.340 --> 00:43:49.930
Browserify works is, you have
HTTP-Browserify, it will use

00:43:49.930 --> 00:43:50.500
that module.

00:43:50.500 --> 00:43:53.680
So you can make your own
Browserify package to replace

00:43:53.680 --> 00:43:56.030
what comes by default.

00:43:56.030 --> 00:43:57.730
RENATO MANGINI: So your
application that is the HTTP

00:43:57.730 --> 00:44:01.110
package doesn't change if you
provide the same service?

00:44:01.110 --> 00:44:02.740
PAUL KINLAN: If you provide the
same base level API, you

00:44:02.740 --> 00:44:03.420
should be fine.

00:44:03.420 --> 00:44:04.570
RENATO MANGINI: OK.

00:44:04.570 --> 00:44:08.220
And here we come to the last
question on Moderator, is

00:44:08.220 --> 00:44:13.330
there a register to compare
builds in node packages versus

00:44:13.330 --> 00:44:19.660
what has been done like
your net package?

00:44:19.660 --> 00:44:20.630
PAUL KINLAN: We could
start a list.

00:44:20.630 --> 00:44:22.200
So could we start a
list somewhere?

00:44:22.200 --> 00:44:25.020
So the interesting thing is that
we definitely don't want

00:44:25.020 --> 00:44:26.810
to fork the Browserify
project.

00:44:26.810 --> 00:44:29.610
But the Browserify project
basically says these modules

00:44:29.610 --> 00:44:30.640
need work to do.

00:44:30.640 --> 00:44:33.280
But like we said in the previous
question is, if you

00:44:33.280 --> 00:44:37.010
make the module itself
net-browserify, or

00:44:37.010 --> 00:44:41.060
http-browserify, and then you
import that into your project,

00:44:41.060 --> 00:44:46.450
and you're via MPM install of
that module, then Browserify

00:44:46.450 --> 00:44:48.050
will delegate to that
piece functionality.

00:44:48.050 --> 00:44:50.170
So you can override all those
different areas with your own

00:44:50.170 --> 00:44:51.550
functionality.

00:44:51.550 --> 00:44:53.160
So we do need a lot more.

00:44:53.160 --> 00:44:55.100
I've only worked on net because
it was the sexiest one

00:44:55.100 --> 00:44:56.020
to work on.

00:44:56.020 --> 00:44:57.970
Because I could build a web
server inside the browser.

00:44:57.970 --> 00:44:59.980
RENATO MANGINI: But it doesn't
include robots.

00:44:59.980 --> 00:45:01.440
Why is this the sexiest?

00:45:01.440 --> 00:45:02.590
PAUL KINLAN: It doesn't
include the robots?

00:45:02.590 --> 00:45:04.770
RENATO MANGINI: Yeah, it should
include robots, should

00:45:04.770 --> 00:45:05.620
be the sexiest--

00:45:05.620 --> 00:45:07.150
PAUL KINLAN: So, funny
you should say this.

00:45:07.150 --> 00:45:10.590
There's a whole competition now
for accessing Mindstorms,

00:45:10.590 --> 00:45:14.530
Arduinos, what else is there,
the AR drones, and all those

00:45:14.530 --> 00:45:18.110
types of things, where people
are doing it inside NodeJS.

00:45:18.110 --> 00:45:19.970
And we've written our own stuff
to access a Mindstorm

00:45:19.970 --> 00:45:21.840
before in Chrome, and
we've also written--

00:45:21.840 --> 00:45:23.110
RENATO MANGINI: We definitely
should do that.

00:45:23.110 --> 00:45:24.175
PAUL KINLAN: Yeah, I
mean, it's already

00:45:24.175 --> 00:45:24.850
been done in node.

00:45:24.850 --> 00:45:26.630
So the thing that should happen
is, we should just

00:45:26.630 --> 00:45:28.390
provide the base API wrapper.

00:45:28.390 --> 00:45:29.490
RENATO MANGINI: That's true.

00:45:29.490 --> 00:45:30.930
PAUL KINLAN: And then all these
applications that are

00:45:30.930 --> 00:45:32.270
written for node should work--

00:45:32.270 --> 00:45:35.770
RENATO MANGINI: Controlling a
robot using a web application.

00:45:35.770 --> 00:45:36.390
PAUL KINLAN: We should do it.

00:45:36.390 --> 00:45:38.870
I mean, we just need to get
those extra bits filled in.

00:45:38.870 --> 00:45:40.920
And if anyone wants to
help me, email me

00:45:40.920 --> 00:45:44.475
paulkinlan@google.com, and
we'll get started.

00:45:44.475 --> 00:45:46.470
RENATO MANGINI: OK, and
let me check if

00:45:46.470 --> 00:45:49.930
there is anymore questions?

00:45:49.930 --> 00:45:51.170
PAUL KINLAN: Why Vim?

00:45:51.170 --> 00:45:53.380
I like Vim.

00:45:53.380 --> 00:45:55.300
Renato's done some really cool
stuff with Sublime, which

00:45:55.300 --> 00:45:57.900
we'll show in a future
episode.

00:45:57.900 --> 00:46:00.370
So I might move to that
at some point.

00:46:00.370 --> 00:46:02.610
RENATO MANGINI: Maybe I can do
the same for vi, because I

00:46:02.610 --> 00:46:03.630
also love vi.

00:46:03.630 --> 00:46:05.340
PAUL KINLAN: Yes, [INAUDIBLE]

00:46:05.340 --> 00:46:09.010
special Vim package or bundle,
or whatever they are called.

00:46:09.010 --> 00:46:11.230
RENATO MANGINI: OK, so we
are pretty much done.

00:46:11.230 --> 00:46:12.435
PAUL KINLAN: I think we're
pretty much done.

00:46:12.435 --> 00:46:13.660
Thanks, guys, for listening.

00:46:13.660 --> 00:46:14.725
I'm Paul Kinlan.

00:46:14.725 --> 00:46:17.430
RENATO MANGINI: I'm Renato
Mangin, thanks for coming.

00:46:17.430 --> 00:46:19.010
PAUL KINLAN: And we'll
see you next week.

