WEBVTT
Kind: captions
Language: en

00:10:21.771 --> 00:10:23.771
... 

00:24:53.018 --> 00:24:55.255
&gt;&gt; Welcome to Google I/O2018. By
now, you've checked into 

00:24:56.484 --> 00:24:58.764
registration to receive your 
badge. It must be visibly worn 

00:24:58.765 --> 00:25:01.623
at all times. And don't forget, 
you'll need it to 

00:25:04.695 --> 00:25:06.695
enter the after-hours activities
at the end of days one and two.

00:25:09.005 --> 00:25:11.005
Throughout the event, visit 
Google.

00:25:13.926 --> 00:25:15.926
com/IO, or download the IO 
mobile app. 

00:25:16.810 --> 00:25:18.667
For questions or assistance, 
stop by the information desk 

00:25:18.668 --> 00:25:21.113
located across from the code 
labs building or chat with any 

00:25:22.729 --> 00:25:24.729
staff member wearing a yellow 
badge.

00:25:31.109 --> 00:25:33.777
If you haven't already, reserve 
a seat for your favorite session

00:25:33.778 --> 00:25:37.456
on the I/O website or mobile 
app. If you miss a session, 

00:25:37.457 --> 00:25:39.700
don't worry, recordings will be 
available online shortly after 

00:25:39.701 --> 00:25:42.145
they end. 
    Be sure to visit the code 

00:25:42.146 --> 00:25:46.025
labs building for hands on 
experience for ready to code 

00:25:46.026 --> 00:25:48.026
kiosks.

00:25:49.696 --> 00:25:51.316
Google staff will be on hand for
helpful device and provide 

00:25:51.317 --> 00:25:53.317
direction if you need support.

00:25:56.300 --> 00:25:58.300
Make time to visit office hours 
to meet 

00:25:59.761 --> 00:26:01.761
one-on-one with Googlers and get
feedback on your projects. 

00:26:02.611 --> 00:26:04.837
If you're looking to network 
with Googlers and fellow 

00:26:04.838 --> 00:26:07.680
developers, join one of the 
several meetups hosted in the 

00:26:08.086 --> 00:26:10.978
lounge. Finally, we'd like to 
invite you to 

00:26:15.277 --> 00:26:17.712
visit the Sandbox domes where 
you can play with our latest 

00:26:17.713 --> 00:26:20.186
demos, physical installations 
and more. After sessions are 

00:26:20.187 --> 00:26:22.427
done for the day, stick around 
for food, drinks, music and fun.

00:26:24.855 --> 00:26:26.294
And be prepared for surprises 
along the way. 

00:26:26.295 --> 00:26:28.295
We'd like to take this 
opportunity 

00:26:29.329 --> 00:26:31.409
to remind you that we are 
dedicated to providing an 

00:26:31.410 --> 00:26:34.053
inclusive event experience for 
everyone and that by attending 

00:26:38.138 --> 00:26:39.353
Google I/O, you agree to our 
code of conduct posting 

00:26:39.354 --> 00:26:42.813
throughout the venue. Your 
opinion is valuable to us. After

00:26:42.814 --> 00:26:44.460
the event, look out for a 
feedback forum to share your 

00:26:44.461 --> 00:26:48.567
experience. Thanks for attending
and have a wonderful time 

00:26:48.568 --> 00:26:50.568
exploring Google I/O.

00:36:26.866 --> 00:36:28.901
&gt;&gt; Hi, everyone, I'm Alesha 
unpingco, we're here to talk to 

00:36:28.902 --> 00:36:30.902
you about 

00:36:32.316 --> 00:36:34.613
designing AR applications so 
Google has a long history in 

00:36:35.220 --> 00:36:37.470
designing for AR. We've been 
doing mobile AR for the past 

00:36:39.905 --> 00:36:41.128
four years and working on other 
augmented reality projects 

00:36:41.129 --> 00:36:43.129
before that.

00:36:44.213 --> 00:36:45.689
What's changed most recently is 
that mobile AR is really 

00:36:45.690 --> 00:36:49.556
starting to take off. 
    And Google's AR core makes 

00:36:49.557 --> 00:36:52.599
it possible for anybody to 
create quality AR content.

00:36:57.905 --> 00:37:02.420
So I'll share some fun facts 
about AR Core. We released 1.0 

00:37:02.421 --> 00:37:05.300
at the end of February, and that
made AR content available to 

00:37:05.301 --> 00:37:07.301
more than 100 million devices.

00:37:10.379 --> 00:37:12.379
We're already seeing rapid 
growth with 

00:37:14.244 --> 00:37:16.078
more than 300 apps available in 
the Play Store. 

00:37:16.079 --> 00:37:19.537
You're here because you want to 
learn how to design for AR. And 

00:37:19.538 --> 00:37:20.760
what we found is once you 
understand your users and the 

00:37:20.761 --> 00:37:22.761
type of 

00:37:26.247 --> 00:37:27.056
experience you're trying to 
create, design principles for 

00:37:27.057 --> 00:37:29.057
getting started fall into five 
different categories, 

00:37:32.550 --> 00:37:34.375
which we call the Pillars of AR 
Design. 

00:37:34.376 --> 00:37:37.615
First, you want to understand 
your user's environment. Where 

00:37:37.616 --> 00:37:39.045
will the users be experiencing 
your app? Think about the 

00:37:39.046 --> 00:37:41.046
surfaces that are 

00:37:42.361 --> 00:37:43.389
available and how your app can 
adapt to different environmental

00:37:43.390 --> 00:37:45.390
constraints.

00:37:47.669 --> 00:37:49.908
Then, you want to consider the 
user's movement and how much 

00:37:49.909 --> 00:37:52.587
space the user will need to 
experience your app. 

00:37:54.212 --> 00:37:56.863
And when it comes to 
initialization and onboarding, 

00:37:56.864 --> 00:38:00.141
you want to make the onboarding 
process as clear as possible so 

00:38:00.142 --> 00:38:02.142
that users understand exactly 
what to 

00:38:04.264 --> 00:38:06.515
do in this entirely new medium. 
When it comes to object 

00:38:06.516 --> 00:38:08.800
interactions, design natural 
object interactions that 

00:38:12.527 --> 00:38:13.945
convey the feedback so that 
users understand how these 

00:38:13.946 --> 00:38:15.779
digital objects fit in the 
context of your real, physical 

00:38:15.780 --> 00:38:19.045
space. 
    And when you're thinking 

00:38:19.046 --> 00:38:21.046
about user 

00:38:24.846 --> 00:38:26.069
interfaces, balance on-screen UI
with interface design so you're 

00:38:26.070 --> 00:38:30.132
able to create an experience 
that's meaningful and usable for

00:38:30.133 --> 00:38:32.588
your users. 
    So we have some examples 

00:38:32.589 --> 00:38:35.434
that showcase the different 
guidelines within each of these 

00:38:35.435 --> 00:38:40.354
pillars. And the thing that we 
want to point out is that this 

00:38:40.355 --> 00:38:42.586
framework can help anybody get 
started with AR Content 

00:38:42.587 --> 00:38:44.880
Creation. 
    So throughout our talk, 

00:38:44.881 --> 00:38:49.184
we're going to show you some 
different demos that you'll be 

00:38:49.185 --> 00:38:51.185
able to play with very soon 

00:38:53.671 --> 00:38:56.341
through an app we're launch 
called ARCore elements. And many

00:38:56.342 --> 00:38:58.342
of the Core interaction 

00:39:00.153 --> 00:39:02.153
patterns in the talk are 
available

00:39:05.095 --> 00:39:07.347
in theme form and will be 
available later this summer. 

00:39:07.348 --> 00:39:11.033
   &gt;&gt; ALEX FAABORG: Let's start 
out talking about the user 

00:39:11.034 --> 00:39:13.034
environment.

00:39:14.926 --> 00:39:17.168
ARCore is a regular technology. 
Let's talk about what ARCore can

00:39:17.169 --> 00:39:20.024
do. It does lots of things. I 
think the first thing everyone's

00:39:23.080 --> 00:39:24.902
familiar with is surface 
detection. It can understand 

00:39:24.903 --> 00:39:27.337
surfaces, tables, floors those 
types of things. It can also do 

00:39:27.338 --> 00:39:32.252
walls. Protocol surfaces. 
    And what's better than 

00:39:32.253 --> 00:39:35.763
horizontal and vertical 
surfaces? It can also do angled 

00:39:35.764 --> 00:39:38.814
surfaces with oriented points, 
being able to place an object on

00:39:38.815 --> 00:39:43.118
any angle. 
    ARCore does light 

00:39:43.119 --> 00:39:46.994
estimation. This is really 
important for having objects 

00:39:46.995 --> 00:39:48.835
sort of look realistic in a 
scene. And there's also some 

00:39:48.836 --> 00:39:50.836
other fun things 

00:39:52.089 --> 00:39:54.089
you can do with that that we'll 
get into. 

00:39:57.171 --> 00:39:59.171
And announced at I/O yesterday, 

00:40:02.416 --> 00:40:04.416
Cloud Anchors, both on Android 
and iOS.

00:40:06.390 --> 00:40:08.852
Two people viewing the same 
thing. And also announced 

00:40:08.853 --> 00:40:10.853
yesterday, augmented images.

00:40:12.918 --> 00:40:13.729
The ability to remember NIZ an 
image, but also not just 

00:40:13.730 --> 00:40:17.606
recognize it, but use that image
to get 3D pose data off of it so

00:40:17.607 --> 00:40:19.607
you know where it is in space. 

00:40:21.551 --> 00:40:23.586
That's the current set of ARCore
capabilities. And this is 

00:40:23.587 --> 00:40:27.649
growing over time. And the more 
your app integrates with the 

00:40:27.650 --> 00:40:29.694
user's environment, really the 
more magical your app is going 

00:40:29.695 --> 00:40:34.789
to feel. Let's look through a 
few examples here. First, for a 

00:40:34.790 --> 00:40:37.227
surface plane detection, a lot 
of AR apps currently only use 

00:40:37.228 --> 00:40:41.292
one surface. Say you're playing 
a game, a game board will appear

00:40:41.293 --> 00:40:42.926
on a surface. 
    What we found is -- there's 

00:40:42.927 --> 00:40:46.194
really no reason that you have 
to use one surface, you could 

00:40:46.195 --> 00:40:51.131
use all of the detected surfaces
. At moments when you have your 

00:40:51.132 --> 00:40:54.590
game interacting with the 
multiple surfaces, these can be 

00:40:54.591 --> 00:40:57.260
breakout moments in your game. 
It feels magical. 

00:40:58.864 --> 00:41:01.113
Even something, like, say you're
playing a physics-based game, 

00:41:01.114 --> 00:41:04.997
you destroy your opponent's 
castle and the bricks fall on to

00:41:04.998 --> 00:41:09.893
the floor. Or that moment when 
you see the items on the floor. 

00:41:09.894 --> 00:41:14.366
It can really be quite stunning.
    All right. Light estimation.

00:41:16.801 --> 00:41:18.635
This is critical for making 
objects look realistic in the 

00:41:18.636 --> 00:41:22.094
scene. Here's an example that 
we're working on sort of test 

00:41:22.095 --> 00:41:25.343
out some different techniques. 
Here we have three fake plants 

00:41:25.344 --> 00:41:28.604
and one real plant. I think it's
actually a real fake plant. 

00:41:33.097 --> 00:41:34.935
And we have unlit, which is the 
most basic lighting you can do, 

00:41:34.936 --> 00:41:37.981
really not very realistic. And 
dynamic and a combination of 

00:41:39.403 --> 00:41:41.403
dynamic and baked.

00:41:43.470 --> 00:41:46.513
And what's great with dynamic, 
you get realtime shadows. And 

00:41:46.514 --> 00:41:48.539
then, when you combine Dynamic 
with Baked, you see things like 

00:41:51.185 --> 00:41:53.185
self-shadowing, where the leaves
of the 

00:41:55.459 --> 00:41:57.459
plant are a little bit darker 
and it's picking that up. 

00:41:57.929 --> 00:42:00.580
You can see how this looks with 
movement. And lighting is -- 

00:42:00.581 --> 00:42:02.581
there's definitely a lot of 
innovation that's going to be 

00:42:04.075 --> 00:42:05.493
occurring in this space as we 
try to get more and more 

00:42:05.494 --> 00:42:07.494
realistic lighting.

00:42:08.957 --> 00:42:10.836
You can see where we are right 
now. 

00:42:10.837 --> 00:42:13.488
And especially, like, as the 
scene gets darker, you start to 

00:42:13.489 --> 00:42:16.362
see the unlit object doesn't 
perform as well. So it's really 

00:42:16.363 --> 00:42:20.842
important that you're using the 
realtime lighting APIs that are 

00:42:20.843 --> 00:42:23.515
in ARCore. 
    The other thing you can do 

00:42:23.516 --> 00:42:25.966
is you can actually use lighting
as a trigger to change 

00:42:25.967 --> 00:42:30.904
something. So here, in this 
example, when you turn the light

00:42:30.905 --> 00:42:32.932
switch off in the room, the city
actually glows. And it responds 

00:42:32.933 --> 00:42:35.643
to that change. 
    And these types of moments 

00:42:35.644 --> 00:42:39.750
can really feel great and 
magical for users where imagine 

00:42:39.751 --> 00:42:42.196
you're playing a city simulation
game. And it's having these kind

00:42:42.197 --> 00:42:46.261
of, you know, significant, 
meaningful changes based off of 

00:42:46.262 --> 00:42:51.598
the environmental light. 
    Oriented points. This is, 

00:42:51.599 --> 00:42:53.599
actually, a very new feature. So
we don't have a whole lot of 

00:42:53.671 --> 00:42:58.557
examples here. But here's one of
the more basic ones. I filmed 

00:42:58.558 --> 00:43:00.640
this when I was out skiing. And 
here, I'm just attaching 

00:43:00.641 --> 00:43:03.895
androids to the side of a tree. 
And you can see, you know, as I 

00:43:03.896 --> 00:43:09.200
placed them, they stick to 
exactly that point on the tree 

00:43:09.201 --> 00:43:11.201
at the angle of where the 
branches were.

00:43:23.511 --> 00:43:25.535
Cloud Anchors, announced 
yesterday. You can see the exact

00:43:25.536 --> 00:43:27.780
game board in exactly the same 
place and they can play that 

00:43:27.781 --> 00:43:30.260
game together. And this is 
tremendously fun.

00:43:33.301 --> 00:43:35.748
You can actually try it out in 
the sandbox if you want to stop 

00:43:35.749 --> 00:43:37.749
by later today.

00:43:39.016 --> 00:43:43.896
This works with Android and iOS.
    All right. Augmented Images.

00:43:45.521 --> 00:43:47.521
There's a lot of different ways 
you can use this.

00:43:48.974 --> 00:43:50.974
One demo we have in the Sandbox 
you can 

00:43:53.033 --> 00:43:55.880
check out is actually an art 
exhibit built using Augmented 

00:43:55.881 --> 00:43:57.881
Images.

00:44:36.884 --> 00:44:39.135
We're really excited about what 
you can do with Augmented 

00:44:39.136 --> 00:44:41.565
Images.
There's a lot of possibilities 

00:44:41.566 --> 00:44:45.061
from artwork to something like a
toy coming to life. A surface of

00:44:45.062 --> 00:44:47.062
a product box.

00:44:50.574 --> 00:44:52.574
Where you can see 3D models of 
what you're about to play with.

00:44:57.698 --> 00:44:59.698
Now that we've got the sort of 
basics 

00:45:01.372 --> 00:45:03.207
on the capabilities of ARCore, 
let's talk about how you design 

00:45:03.208 --> 00:45:06.254
an app for AR. One of the first 
things you're thinking, okay, 

00:45:06.255 --> 00:45:08.255
where do I actually start?

00:45:10.530 --> 00:45:11.748
Blank page and ready to start 
brainstorming and new ideas for 

00:45:11.749 --> 00:45:14.213
AR. 
    And one of the first things 

00:45:14.214 --> 00:45:18.293
to focus on, AR exists outside 
of the phone. Your design work 

00:45:18.294 --> 00:45:20.294
should exist outside of the 
phone, as well.

00:45:22.409 --> 00:45:23.571
So something I found a lot of 
people have done tremendous 

00:45:23.572 --> 00:45:27.266
amounts of mobile design is they
tend to be very attached to the 

00:45:27.267 --> 00:45:29.519
phone frame and flows of screens
and they've been doing that for 

00:45:29.520 --> 00:45:33.391
so long that one of the first 
things to do when you're 

00:45:33.392 --> 00:45:35.392
starting to think about AR is to

00:45:36.847 --> 00:45:38.265
actually, you know, put away all
of the stencils and don't think 

00:45:38.266 --> 00:45:40.507
about the phone at all. 
    Instead, what you want to do

00:45:40.508 --> 00:45:45.181
is sketch the actual environment
that the user is in. You should 

00:45:45.182 --> 00:45:49.250
be sketching living rooms and 
tables and outdoor spaces. And 

00:45:49.251 --> 00:45:51.107
then, as you sketch the user's 
environment, you start to sketch

00:45:51.108 --> 00:45:54.403
the various AR objects they're 
going to be interacting with in 

00:45:54.404 --> 00:45:57.465
that environment. 
    You can sort of think of AR 

00:45:57.466 --> 00:46:02.164
as having the same challenges as
response design in terms of 

00:46:02.165 --> 00:46:06.256
different window sizes. But it's
more complicated. You have 

00:46:06.257 --> 00:46:08.322
response design for 3D spaces 
that are the user's actual 

00:46:08.323 --> 00:46:10.994
living room. 
    So you want to sketch the 

00:46:10.995 --> 00:46:14.474
user for scale to get a sense of
how you're going to start 

00:46:14.475 --> 00:46:16.104
crafting this experience. The 
user could be very large 

00:46:16.105 --> 00:46:19.357
relative to the AR objects or 
very small. And then, you want 

00:46:19.358 --> 00:46:22.814
to start thinking about how that
user's going to move around in 

00:46:22.815 --> 00:46:24.815
that environment.

00:46:28.934 --> 00:46:32.799
   &gt;&gt; ALESHA UNPINGCO: And that 
brings us to user movement. And 

00:46:32.800 --> 00:46:34.800
now that we understand how to 

00:46:35.869 --> 00:46:37.481
design for the environment, 
let's understand how to design 

00:46:37.482 --> 00:46:41.354
for user movement. It's okay to 
design beyond the bounds of the 

00:46:41.355 --> 00:46:44.251
screen. 
    And what we found in many 

00:46:44.252 --> 00:46:47.708
ways, this can make the 
experience feel more delightful 

00:46:47.709 --> 00:46:49.709
and more immersive. When you 
have an object that begins on 

00:46:52.390 --> 00:46:53.818
screen and extends beyond the 
boundaries, it can make the user

00:46:53.819 --> 00:46:55.819
feel like the object is really 
there. 

00:46:56.675 --> 00:46:58.675
And beyond that, it can also 

00:47:01.301 --> 00:47:02.424
motivate user to organically
beyond the bounds of the screen.

00:47:02.425 --> 00:47:06.025
    And what we found in many 
ways, this can make the 

00:47:02.425 --> 00:47:06.491
experience feel more delightful 
and more immersive. When you 

00:47:02.425 --> 00:47:06.425
have an object that begins on 
screen and extends beyond the 

00:47:02.425 --> 00:47:06.625
boundaries, it can make the user
feel like the object is really 

00:47:02.425 --> 00:47:05.025
there. 
    And beyond that, it can also

00:47:02.425 --> 00:47:03.027
motivate user to organically 
begin moving the phone around 

00:47:03.028 --> 00:47:06.705
the environment to appreciate 
the full scale of the digital 

00:47:06.706 --> 00:47:08.706
objects in the physical space. 
And that brings us to our next 

00:47:09.545 --> 00:47:11.545
observation.

00:47:12.809 --> 00:47:14.431
Because users are more familiar 
with 2D mobile applications that

00:47:14.432 --> 00:47:16.432
don't typically require user 
movement as a form of 

00:47:17.922 --> 00:47:19.556
interaction, it can be very 
challenging to help convey to 

00:47:19.557 --> 00:47:21.557
users that they're able to move 
around. 

00:47:22.631 --> 00:47:24.631
So many users don't because it 

00:47:25.698 --> 00:47:27.322
doesn't feel natural based on 
how you've used 2D apps in the 

00:47:27.323 --> 00:47:29.323
past.

00:47:30.592 --> 00:47:32.604
What we realized is that 
characters, animations or 

00:47:32.605 --> 00:47:35.439
objects that convey visual 
interest on screen and then move

00:47:35.440 --> 00:47:38.280
off screen can be a natural way 
to motivate users to move. 

00:47:41.547 --> 00:47:42.561
And so, here we have a bird and 
it appears in the middle of the 

00:47:42.562 --> 00:47:46.042
screen. And when it flies off 
screen, it's replaced with a 

00:47:46.043 --> 00:47:48.488
marker that moves around and 
slides around the edge to help 

00:47:48.489 --> 00:47:53.183
users understand the bird's 
location in relation to the 

00:47:53.184 --> 00:47:56.661
user. 
    Another major thing you want

00:47:56.662 --> 00:48:00.975
to think about is whenever you 
have an experience that requires

00:48:00.976 --> 00:48:03.870
a user to move, you also want to
think about how much space a 

00:48:03.871 --> 00:48:07.318
user needs. 
    So we found that experiences

00:48:07.319 --> 00:48:10.374
fall into three different sizes.
There's table scale, there's 

00:48:10.375 --> 00:48:13.016
room scale and there's also 
world scale. 

00:48:15.053 --> 00:48:17.079
And when it comes to table 
scale, what we found is that 

00:48:17.080 --> 00:48:19.080
your experience is able to scale
to the smallest of 

00:48:22.598 --> 00:48:28.004
surfaces so that many users are 
able to enjoy your experience. 

00:48:28.005 --> 00:48:30.097
And with room scale, it expands 
the impact of AR so that content

00:48:30.098 --> 00:48:34.444
will start to feel life-sized 
and you're able to do a lot more

00:48:34.445 --> 00:48:36.445
with the space that's available.

00:48:41.292 --> 00:48:43.292
And world scale has no limits

00:48:44.606 --> 00:48:48.577
-- I this is an area we're 
particularly excited about 

00:48:48.578 --> 00:48:50.578
because for what it means 

00:48:51.823 --> 00:48:53.823
for procedurally generated 
content in world scale. 

00:48:54.084 --> 00:48:56.528
So no matter what size your 
experience ends up being, just 

00:48:56.529 --> 00:49:01.236
remember to set the user -- set 
the right expectation for the 

00:49:01.237 --> 00:49:03.482
users so they have an 
understanding of how much space 

00:49:04.091 --> 00:49:08.376
they'll need. Because it can be 
a very frustrating part of the 

00:49:08.377 --> 00:49:10.631
experience if the user's playing
a game. And in the middle of the

00:49:10.632 --> 00:49:14.280
game, they realize they don't 
have enough space to enjoy it. 

00:49:17.565 --> 00:49:19.213
And when it comes to how much 
movement your experience 

00:49:19.214 --> 00:49:21.214
requires, 

00:49:23.101 --> 00:49:24.308
there's no one-size-fits-all 
solution, it depends on the 

00:49:24.309 --> 00:49:26.309
experience that you're trying to
create.

00:49:28.797 --> 00:49:31.653
For example, if you have a game 
that requires user movement as a

00:49:31.654 --> 00:49:33.894
core part of interaction, that 
can be a very delightful 

00:49:33.895 --> 00:49:35.895
experience.

00:49:36.930 --> 00:49:38.971
You can use proximity or 
distance to trigger different 

00:49:38.972 --> 00:49:40.972
actions so that as a 

00:49:44.516 --> 00:49:47.354
user gets closer to the sprog, 
it can leap behind the mushroom 

00:49:47.355 --> 00:49:50.438
or the mushroom can disappear. 
    However, if you have a 

00:49:50.439 --> 00:49:54.934
utility app where the core 
purpose of the app is to help 

00:49:54.935 --> 00:49:57.164
users understand complex data 
and information, then requiring 

00:49:57.165 --> 00:50:01.026
users to move might be a really 
bad experience because what it 

00:50:01.027 --> 00:50:02.864
means is that users who have 
different movement or 

00:50:02.865 --> 00:50:05.496
environment limitations won't be
able to get the complete app 

00:50:05.497 --> 00:50:07.497
experience. 

00:50:09.589 --> 00:50:12.286
So allowing users to manipulate 
the object, to rotate it, move 

00:50:12.287 --> 00:50:14.287
it around in a space that's more
appropriate will 

00:50:17.567 --> 00:50:19.567
ensure that all users have easy 
access 

00:50:21.858 --> 00:50:24.100
to the data that they seek. 
   &gt;&gt; ALEX FAABORG: Because AR's

00:50:26.799 --> 00:50:28.799
relatively new, the process for 
users to 

00:50:30.053 --> 00:50:31.924
flow from 2D to 3D, at times, 
can be awkward. And we're 

00:50:31.925 --> 00:50:35.006
starting to create some 
standards around that. So we'll 

00:50:35.007 --> 00:50:37.257
talk about initializing into AR.
One of the first things you can 

00:50:37.258 --> 00:50:40.113
do, you can leverage standard 
view in AR material icon. 

00:50:42.472 --> 00:50:43.936
So users, when they see that, 
they know when they hit the 

00:50:43.937 --> 00:50:47.192
icon, they're going to be going 
into AR. You can use this in all

00:50:47.193 --> 00:50:49.227
of the normal places that icons 
appear, like, you 

00:50:53.364 --> 00:50:55.821
know, floating action or on top 
of cards as the indicator to 

00:50:55.822 --> 00:50:57.822
view this object in 3D in your 
environment.

00:51:02.159 --> 00:51:04.159
One over the next things you'll 
see 

00:51:06.453 --> 00:51:07.468
playing with AR apps is 
something you might not 

00:51:07.469 --> 00:51:09.469
initially understand.

00:51:11.604 --> 00:51:13.604
How understanding depth requires
some movement. 

00:51:15.897 --> 00:51:19.630
You'll see these types of 
animationsaction or on top of 

00:51:15.897 --> 00:51:19.697
cards as the indicator to view 
this object in 3D in your 

00:51:15.897 --> 00:51:20.030
environment. One over the next 
things you'll see playing with 

00:51:15.897 --> 00:51:19.963
AR apps is something you might 
not initially understand. How 

00:51:15.897 --> 00:51:18.830
understanding depth requires 
some movement. 

00:51:15.897 --> 00:51:19.763
You'll see these types of 
animations where I was trying to

00:51:15.897 --> 00:51:17.897
get the user to move their phone
around.

00:51:20.870 --> 00:51:22.894
Why is that actually happening? 
Basically, we perceive depth 

00:51:22.895 --> 00:51:24.895
because we 

00:51:26.574 --> 00:51:28.400
have two eyes, but we get a lot 
by moving our head around and 

00:51:28.401 --> 00:51:30.401
being in the scene.

00:51:32.089 --> 00:51:33.530
And for the case of AR Core, 
current -- most current phones 

00:51:33.531 --> 00:51:37.182
on the market only have a single
camera on the back, device only 

00:51:37.183 --> 00:51:39.183
has one eye.

00:51:40.294 --> 00:51:41.304
If it hasn't moved yet, it 
doesn't necessarily know what's 

00:51:41.305 --> 00:51:45.384
going on. This is the first 
thing the phone sees. It's going

00:51:45.385 --> 00:51:48.235
to say, all right, that's 
interesting. But I don't totally

00:51:48.236 --> 00:51:50.236
have a sense of, you know, where
these objects are yet. 

00:51:51.906 --> 00:51:54.564
And once you move a little bit, 
then it becomes clear. As soon 

00:51:54.565 --> 00:51:56.825
as you bring in a little bit of 
movement, then you have enough 

00:51:56.826 --> 00:51:58.826
of that 

00:52:00.292 --> 00:52:03.166
data on different angles on to 
the scene, it's starting to 

00:52:03.167 --> 00:52:06.640
bring up a model of what it's 
seeing. That's why we have the 

00:52:06.641 --> 00:52:09.916
animations to start to get the 
movement, to have enough 

00:52:09.917 --> 00:52:11.917
information to recognize the 
scene. 

00:52:12.588 --> 00:52:14.588
Next thing you want to think 
about 

00:52:16.435 --> 00:52:18.477
is deciding if users are able to
easily move the objects after 

00:52:18.478 --> 00:52:22.138
they've been placed or if these 
are more permanent objects. 

00:52:23.777 --> 00:52:26.656
And, again, there's no right 
answer here. So, you know, more 

00:52:26.657 --> 00:52:28.657
persistent object might be, 
like, a game board or 

00:52:31.170 --> 00:52:33.815
something that itself takes 
input. We want to recommend you 

00:52:33.816 --> 00:52:37.477
use standard icons to set 
expectations for users so they 

00:52:37.478 --> 00:52:39.321
know as they're placing that 
object if that object is going 

00:52:39.322 --> 00:52:41.322
to move around later on as they 
swipe on it.

00:52:45.883 --> 00:52:49.567
    Examples of that. Here, as 
you're swiping on the city, 

00:52:51.384 --> 00:52:53.384
you're going to be interacting 
with the game itself.

00:52:55.261 --> 00:52:58.098
So we recommend using an Anchor 
icon for the more specific 

00:52:58.099 --> 00:53:03.199
object placements. And you want 
to enable the user to move the 

00:53:03.200 --> 00:53:05.200
game board later, perhaps, 
through a menu screen. 

00:53:06.113 --> 00:53:08.564
But to set expectations ahead of
time, the city, actually, is 

00:53:08.565 --> 00:53:11.420
going to be stuck to the ground 
there for a while as you 

00:53:11.421 --> 00:53:13.421
interact with the game. Versus, 
you know, something like say 

00:53:14.907 --> 00:53:16.545
you're shopping for furniture 
and placing a chair on the 

00:53:16.546 --> 00:53:21.030
scene. Here, the chair itself is
an interactive so you can map 

00:53:21.031 --> 00:53:25.504
swipe gestures on to the chair 
and move it around. Using the 

00:53:25.505 --> 00:53:27.947
plus icon to set expectations 
ahead of time that you're not 

00:53:27.948 --> 00:53:30.013
really committing to exactly 
where you're placing this 

00:53:30.014 --> 00:53:32.664
object. 
    So now that we're talking 

00:53:32.665 --> 00:53:34.501
about object interactions, 
there's quite a bit of details 

00:53:34.502 --> 00:53:36.502
there.

00:53:38.972 --> 00:53:42.264
   &gt;&gt; ALESHA UNPINGCO: Now let's
start thinking about how users 

00:53:42.265 --> 00:53:44.265
can interact with objects in 
their space.

00:53:47.970 --> 00:53:50.017
One of the things we challenge 
you to think about as designers 

00:53:50.018 --> 00:53:54.891
and developers in the community 
is thinking about how to problem

00:53:54.892 --> 00:53:58.194
solve for user behavior even 
when it's unintentional. One of 

00:53:58.195 --> 00:54:00.024
the things we recommend is 
giving users feedback on object 

00:54:00.025 --> 00:54:04.494
collisions. And this solves a 
huge problem that we see in 

00:54:04.495 --> 00:54:06.542
mobile AR where a user will be 
moving the device around and 

00:54:06.543 --> 00:54:10.829
once the device collides with an
object in AR, that object might 

00:54:10.830 --> 00:54:13.285
disappear and the user has no 
feedback in terms of how to fix 

00:54:13.483 --> 00:54:15.483
it. 

00:54:16.936 --> 00:54:18.758
So what we recommend is we 
recommend providing feedback in 

00:54:18.759 --> 00:54:22.213
the form of camera filters or 
special effects that helps users

00:54:22.214 --> 00:54:26.715
understand when object collision
is not an intended interaction. 

00:54:26.716 --> 00:54:29.390
And this tends to work really 
well. The other thing you want 

00:54:29.391 --> 00:54:32.845
to think about is how to give 
users the right type of feedback

00:54:32.846 --> 00:54:35.929
on object placement. 
    And it's really important, 

00:54:35.930 --> 00:54:40.200
in this case, think of each 
stage of the user journey even 

00:54:40.201 --> 00:54:42.201
as it relates to surface 
feedback.

00:54:43.458 --> 00:54:45.323
So surface feedback in AR is 
very important because it helps 

00:54:45.324 --> 00:54:47.324
users 

00:54:49.817 --> 00:54:51.246
understand how ARcore 
understands the environment. It 

00:54:51.247 --> 00:54:53.300
gives a sense of the surfaces 
available, the range of the 

00:54:53.301 --> 00:54:55.784
surfaces that are available. 
    So we recommend including 

00:54:55.785 --> 00:54:58.616
feedback on the surfaces when 
the user's placing objects in 

00:54:58.617 --> 00:55:01.070
the scene. 
    The other thing that we 

00:55:01.071 --> 00:55:03.338
recommend is maintaining the 
height of the tallest 

00:55:06.424 --> 00:55:08.051
surface as a user drags an 
object from one surface to 

00:55:08.052 --> 00:55:10.052
another.

00:55:11.902 --> 00:55:13.902
And once an object is suspended 
in the 

00:55:15.901 --> 00:55:16.911
air, make sure you're always 
communicateing a visual feedback

00:55:16.912 --> 00:55:20.821
on the job point that way it's 
very clear to the user at all 

00:55:20.822 --> 00:55:23.066
times where the object is going 
to land. 

00:55:24.903 --> 00:55:27.763
And once an object is placed 
into the scene, we also 

00:55:27.764 --> 00:55:32.851
recommend providing feedback in 
the form of visual feedback on 

00:55:32.852 --> 00:55:35.102
the surface or even on the 
object itself just to 

00:55:35.103 --> 00:55:38.995
communicate the object's entry 
into the physical environment. 

00:55:38.996 --> 00:55:42.482
    So now that we know how to 
play with objects in your scene,

00:55:42.483 --> 00:55:44.483
let's think about how an object 
might get there.

00:55:48.007 --> 00:55:50.314
We recommend using gallery 
interfaces in order to 

00:55:50.315 --> 00:55:52.373
communicate user -- to users how
they can take objects that live 

00:55:52.374 --> 00:55:56.863
on screen and drag it out into 
their real world. So here, you 

00:55:56.864 --> 00:55:59.751
see we have a gallery strip at 
the bottom bar. And as a user 

00:55:59.752 --> 00:56:02.168
selects an object, they're able 
to drag it on to their space. 

00:56:02.169 --> 00:56:06.497
    And not only that, we're 
able to support both selection 

00:56:06.498 --> 00:56:08.498
states and also 

00:56:09.750 --> 00:56:10.961
very familiar gestures that 
allow users to manipulate the 

00:56:10.962 --> 00:56:12.962
objects.

00:56:14.214 --> 00:56:15.672
So you can use pinch to scale, 
twist to rotate and even drag to

00:56:15.673 --> 00:56:20.363
move. 
    And you've seen many 

00:56:20.364 --> 00:56:22.364
examples in our 

00:56:23.449 --> 00:56:25.283
talk of how dragging objects is 
a very common and expected 

00:56:25.284 --> 00:56:27.284
behavior. But another 
alternative for object 

00:56:31.234 --> 00:56:33.234
selection and object movement is
through 

00:56:34.236 --> 00:56:36.236
a Redicle.

00:56:40.965 --> 00:56:42.188
Allows objects to manipulate in 
the scene without covering too 

00:56:42.189 --> 00:56:44.189
much of the view.

00:56:45.857 --> 00:56:47.705
We have an example where Reticle
selection is being used to 

00:56:47.706 --> 00:56:50.148
select a rock. And that's 
triggered in the bottom right. 

00:56:50.149 --> 00:56:54.042
    But it allows users to do, 
it allows users to see the many 

00:56:54.043 --> 00:56:57.321
surfaces that are available. And
as you can imagine, if the user 

00:56:57.322 --> 00:57:00.829
is selecting an object with 
their finger and dragging it 

00:57:00.830 --> 00:57:03.503
across the screen, you don't 
have as much screen real estate 

00:57:03.504 --> 00:57:07.390
to see all of the surfaces that 
the user might want to place the

00:57:07.391 --> 00:57:09.391
object on. 

00:57:11.416 --> 00:57:13.416
So

00:57:14.748 --> 00:57:17.825
Reticle Selection is very 
impactful here. The other thing 

00:57:17.826 --> 00:57:20.713
you get are Raycasts. So 
Raycasts are very effective in 

00:57:21.733 --> 00:57:24.280
helping the user get a sense of 
the virtual weights applied to 

00:57:24.281 --> 00:57:26.865
each of these objects. 
    Here, we have another 

00:57:26.866 --> 00:57:28.866
example.

00:57:30.553 --> 00:57:32.603
Where the user is able to pick 
up a feather. And once the 

00:57:32.604 --> 00:57:34.604
feather is picked up, 

00:57:35.892 --> 00:57:37.303
you'll notice that the Raycast 
has very little movement and 

00:57:37.304 --> 00:57:40.159
little bend on it. And for the 
most part, it remains straight. 

00:57:40.160 --> 00:57:43.822
    However, when the user picks
up the rock, you're able to see 

00:57:43.823 --> 00:57:46.677
a more dramatic bend applied to 
the Raycast that 

00:57:50.335 --> 00:57:51.967
signifies the larger amount of 
mass, the heavier weight in 

00:57:51.968 --> 00:57:53.968
relation to the feather.

00:57:59.575 --> 00:58:02.043
   &gt;&gt; ALEX FAABORG: Let's move 
on to the final pillar.

00:58:05.096 --> 00:58:08.762
One of the first things
    However, when the user picks

00:58:05.096 --> 00:58:09.362
up the rock, you're able to see 
a more dramatic bend applied to 

00:58:05.096 --> 00:58:08.962
the Raycast that signifies the 
larger amount of mass, the 

00:58:05.096 --> 00:58:07.962
heavier weight in relation to 
the feather. 

00:58:05.096 --> 00:58:09.296
&gt;&gt; ALEX FAABORG: Let's move on 
to the final pillar. One of the 

00:58:05.096 --> 00:58:05.299
first things you want to 
consider here is that the phone 

00:58:05.300 --> 00:58:10.413
is the user's view port. They're
actually using the phone to look

00:58:10.414 --> 00:58:12.414
out into the scene and see the 
application. 

00:58:13.055 --> 00:58:15.055
And because of that, you don't 

00:58:18.177 --> 00:58:20.231
actually want to place a lot of 
2D UI on the screen that's going

00:58:20.232 --> 00:58:22.232
to skew the view on the 
application. 

00:58:22.878 --> 00:58:24.939
I'll show you a quick example. 
It's obviously a lot nicer to 

00:58:24.940 --> 00:58:27.827
have a limited set of controls. 
As soon as you start to clutter 

00:58:27.828 --> 00:58:32.531
the screen, it gets in the way 
of the user's ability to enjoy 

00:58:32.532 --> 00:58:34.532
the AR.

00:58:35.610 --> 00:58:37.842
And the counterintuitive thing 
is users are so focused on the 

00:58:37.843 --> 00:58:39.843
app out in the 

00:58:41.096 --> 00:58:42.357
world that often designers will 
place a control on a screen 

00:58:42.358 --> 00:58:44.358
level because they 

00:58:46.379 --> 00:58:50.523
want to draw attention to that 
control. They're more focused 

00:58:50.524 --> 00:58:52.978
out in the screen. They're 
missed controls on the surface. 

00:58:52.979 --> 00:58:56.660
    So really, you want to be 
very mindful of where you're 

00:58:56.661 --> 00:58:59.719
making decisions on if you're 
going to put a control up on the

00:58:59.720 --> 00:59:02.387
scene versus out into the scene 
itself. For not just, you know, 

00:59:02.388 --> 00:59:04.632
obscuring the view but 
discoverability of them and 

00:59:04.837 --> 00:59:06.688
finding that. 
    It's not to say that you 

00:59:06.689 --> 00:59:11.208
should never put a control up on
to the screen. But you want to 

00:59:11.209 --> 00:59:14.930
be considering a few different 
metrics on it. Recommendations 

00:59:14.931 --> 00:59:16.931
is that you only really 

00:59:18.018 --> 00:59:19.832
leverage on-screen surface UI 
for things, like, controls that 

00:59:19.833 --> 00:59:23.281
have a high frequency of use or 
controls that require very fast 

00:59:23.282 --> 00:59:25.282
access. 

00:59:26.546 --> 00:59:28.204
So, like, a camera shutter 
button is a perfect example of 

00:59:28.205 --> 00:59:30.242
something that hits both 
criteria where, in a camera, 

00:59:30.243 --> 00:59:33.285
you're taking lots of pictures. 
And also, you want to take 

00:59:33.286 --> 00:59:35.980
pictures very quickly. But 
imagine if you're, like, playing

00:59:35.981 --> 00:59:37.981
a 

00:59:40.285 --> 00:59:41.514
game and there's some ability to
fire or something, that would be

00:59:41.515 --> 00:59:46.232
a good candidate for an onscreen
control. You need to get to that

00:59:46.233 --> 00:59:48.268
button very quickly. 

00:59:52.931 --> 00:59:54.931
So we talked about using the 
View in 

00:59:56.796 --> 00:59:59.443
AR icon to transition into 2D to
AR. But you also want to be 

00:59:59.444 --> 01:00:02.118
careful of the opposite when 
they're transitioning back to a 

01:00:02.119 --> 01:00:04.119
2D experience.

01:00:05.171 --> 01:00:07.622
And one thing we found is if the
user's not initiating that 

01:00:07.623 --> 01:00:10.294
action to go back into a 2D 
experience, it can be pretty 

01:00:13.547 --> 01:00:16.400
obnoxious because they're so 
focused out on the scene. The 

01:00:16.401 --> 01:00:18.401
users during the application and

01:00:20.905 --> 01:00:22.124
suddenly a 2D UI shows up and 
blocks the port. That can be 

01:00:22.125 --> 01:00:24.125
annoying. 

01:00:26.041 --> 01:00:28.550
Depending on, even if the user 
is exiting, customizing an item 

01:00:28.551 --> 01:00:33.294
in the scene. You want that flow
back to 2D screen level UI 

01:00:33.295 --> 01:00:34.570
covering most of the screen to 
be something that the user's 

01:00:34.571 --> 01:00:39.669
actively doing and not something
that happens by surprise. 

01:00:43.159 --> 01:00:45.204
So common thing with mobile 
application design, you want to 

01:00:45.205 --> 01:00:49.486
maintain touch targets about the
size of the user's finger. For 

01:00:49.487 --> 01:00:51.534
3D, this is of course, a bit 
harder because the object could 

01:00:51.535 --> 01:00:54.800
be any distance away from the 
user. Quick example of some 

01:00:54.801 --> 01:00:57.648
things you can do here. Here we 
have two tennis balls, and when 

01:01:00.506 --> 01:01:03.181
you tap on the tennis ball, 
confetti fires out of it because

01:01:03.182 --> 01:01:06.522
in AR, you can do whatever you 
want. And we're showing the 

01:01:06.523 --> 01:01:08.523
touch target size with the 
dotted line. 

01:01:09.574 --> 01:01:11.380
One of the tennis balls is 
maintaining a reasonable touch 

01:01:11.381 --> 01:01:15.466
target sides size as it gets 
farther away, whereas the other 

01:01:15.467 --> 01:01:17.592
is not, it's mapping to the 
virtual size of the object.

01:01:20.846 --> 01:01:22.846
And of course, it's easier to 
interact 

01:01:23.940 --> 01:01:25.940
with the one with the large 
target size. 

01:01:26.851 --> 01:01:28.492
We've also found where 
manipulating objects, if you're 

01:01:28.493 --> 01:01:30.544
not doing tricks to maintain 
target size, you get problems 

01:01:32.974 --> 01:01:34.974
where you swipe the object to 
very far 

01:01:37.101 --> 01:01:39.137
away and it's hard to bring the 
object back. So you have to walk

01:01:39.138 --> 01:01:41.138
over to the object to get it, 
which is a little bit 

01:01:41.179 --> 01:01:46.123
frustrating. Maybe, you could 
say it's very immersive, but 

01:01:46.124 --> 01:01:48.124
it's nicer to be able to bring 
the objects back, as well.

01:01:53.950 --> 01:01:57.833
    You want to be thinking 
about what controls are on the 

01:01:57.834 --> 01:01:59.834
screen versus out on the scene.

01:02:01.717 --> 01:02:05.186
And a mantra that the team has 
had is say scene over screen. 

01:02:05.187 --> 01:02:07.214
Obviously, we talked about 
boundary cases of when you'd 

01:02:07.215 --> 01:02:10.281
want to put something on the 
screen level. I found, it's many

01:02:10.282 --> 01:02:12.282
people's initial reaction to 
design everything for the 

01:02:14.791 --> 01:02:17.086
screen level because that's the 
type of design work we've been 

01:02:17.087 --> 01:02:19.087
doing for 2D applications.

01:02:22.773 --> 01:02:24.773
You want to start thinking about
volumetricUI. 

01:02:26.079 --> 01:02:28.079
To give a quick example of this.

01:02:29.133 --> 01:02:32.024
This is one of the demos. It's a
solar system simulator. Loads of

01:02:32.025 --> 01:02:34.025
fun.

01:02:35.489 --> 01:02:37.949
Also, it's missing a planet 
right now. We did fix that for 

01:02:37.950 --> 01:02:40.383
the public release, in case you 
notice that in the video.

01:02:44.480 --> 01:02:47.534
But imagine -- now, you need to 
design the UI for this. A lot of

01:02:47.535 --> 01:02:50.183
people initially think, oh, a 
gear menu up in the corner. That

01:02:50.184 --> 01:02:52.184
will throw something up on the 
screen. 

01:02:52.653 --> 01:02:54.653
The problem there is, you're not

01:02:56.972 --> 01:02:58.192
going to be able to be as 
immersed as you're interacting 

01:02:58.193 --> 01:03:03.267
with it. An alternative way is 
to leverage these objects, you 

01:03:03.268 --> 01:03:06.146
know, on the scene itself. As 
you're tapping on planets, 

01:03:06.147 --> 01:03:11.049
you'll get feedback on what 
planet that is, which is nice 

01:03:11.050 --> 01:03:13.530
for educational use cases. And 
then, in this particular demo, 

01:03:13.531 --> 01:03:17.864
when you tap on the sun, that's 
how you start to control the 

01:03:17.865 --> 01:03:19.865
entire solar system.

01:03:21.739 --> 01:03:24.602
    Here, the user's tapping on 
the sun. And that brings up a 

01:03:24.603 --> 01:03:29.507
panel. This is actually an 
android view. So in theme form, 

01:03:29.508 --> 01:03:32.567
you can map standard android 
views into AR. And here, you 

01:03:32.568 --> 01:03:35.209
have controls like, you know, 
changing the orbit speed or the 

01:03:37.050 --> 01:03:39.503
rotational speed of the planets 
themselves. And it's really nice

01:03:39.504 --> 01:03:41.504
to be able to interact with 
these objects in the scene 

01:03:44.437 --> 01:03:46.516
and not to have that sort of 
sudden loss of being able to see

01:03:46.517 --> 01:03:48.747
things and be taken out of the 
experience. 

01:03:51.644 --> 01:03:53.705
And that kind of brings me to 
final point, which is this idea 

01:03:53.706 --> 01:03:57.359
of the AR presence. So we'd 
actually seen this coming up in 

01:04:00.846 --> 01:04:04.779
user research studiescontrols 
like, you know, changing the 

01:04:00.846 --> 01:04:04.979
orbit speed or the rotational 
speed of the planets themselves.

01:04:00.846 --> 01:04:05.046
And it's really nice to be able 
to interact with these objects 

01:04:00.846 --> 01:04:04.646
in the scene and not to have 
that sort of sudden loss of 

01:04:00.846 --> 01:04:04.912
being able to see things and be 
taken out of the experience. 

01:04:00.846 --> 01:04:04.912
    And that kind of brings me 
to final point, which is this 

01:04:00.846 --> 01:04:05.112
idea of the AR presence. So we'd
actually seen this coming up in 

01:04:00.846 --> 01:04:01.660
user research studies where 
people would be looking through 

01:04:01.661 --> 01:04:05.152
a phone and then, they would 
kind of step outside of the -- 

01:04:05.153 --> 01:04:08.845
look outside of the phone to see
something was placed correctly. 

01:04:08.846 --> 01:04:11.070
And then, of course, we're 
recording it and they laugh and 

01:04:11.071 --> 01:04:12.716
they're like, yeah, right, you 
can only see it through the 

01:04:12.717 --> 01:04:14.999
phone. 
    And you know, we always 

01:04:15.000 --> 01:04:17.000
laughed when we saw this happen.

01:04:18.934 --> 01:04:21.572
And then, I was testing out an 
app. It was sort of, you know, 

01:04:21.573 --> 01:04:24.828
plastic interlocking bricks and 
had instructions of what I was 

01:04:24.829 --> 01:04:26.829
building and I was playing it 
for a long time.

01:04:29.536 --> 01:04:30.962
And one moment, I looked over 
for the instruction book, and it

01:04:30.963 --> 01:04:32.801
wasn't there. 
    I had the reaction that you 

01:04:32.802 --> 01:04:34.802
normally 

01:04:36.263 --> 01:04:38.706
have of, like, an object 
disappears in real life. And 

01:04:38.707 --> 01:04:41.997
then immediately, I'm like, 
that's silly, yeah, it's AR. But

01:04:41.998 --> 01:04:43.839
I was so immersed in the 
experience in the application, 

01:04:43.840 --> 01:04:45.840
I'd been playing it 

01:04:46.879 --> 01:04:48.350
for so long, I was no longer 
mentally tracking what was real 

01:04:48.351 --> 01:04:50.386
and what was virtual. And I was 
sort of buying that the 

01:04:51.192 --> 01:04:53.875
experience was happening. And 
you're going to start or the 

01:04:53.876 --> 01:04:56.515
have that experience, as well, 
when you're interacting with the

01:04:56.516 --> 01:05:00.193
applications. That's the moment 
that the application is 

01:05:00.194 --> 01:05:02.282
performing really, really well. 
    It means the user is 

01:05:02.283 --> 01:05:05.751
completely immersed and 
engrossed in the application. If

01:05:05.752 --> 01:05:07.796
you have these moments where 
people are, you know, looking at

01:05:07.797 --> 01:05:10.228
a vase through their phone and 
look down and it 

01:05:13.728 --> 01:05:15.626
disappears and they react, 
that's good. The app is 

01:05:15.627 --> 01:05:18.712
performing great. 
   &gt;&gt; ALESHA UNPINGCO: We've 

01:05:18.713 --> 01:05:24.426
gone through the five pillars of
AR design, which include 

01:05:24.427 --> 01:05:26.427
understanding the user's 
environment, planning for user's

01:05:27.872 --> 01:05:30.713
movement, onboarding users by 
initializing smoothly, designing

01:05:30.714 --> 01:05:32.714
natural object interactions and 
balancing on 

01:05:36.632 --> 01:05:38.690
screen and volumetric interface 
design. This framework, we 

01:05:38.691 --> 01:05:42.365
believe, will help anybody get 
started with creating apps that 

01:05:42.366 --> 01:05:44.197
everybody can enjoy. 
    We have a quick video for 

01:05:44.198 --> 01:05:46.198
you.

01:05:47.441 --> 01:05:49.508
Some amazing content that many 
designers and developers like 

01:05:49.509 --> 01:05:52.389
yourselves from the community 
have created. We hope you enjoy.

01:09:49.864 --> 01:09:54.748
that, we're happy to share 
everything we did today and 

01:09:54.749 --> 01:09:56.749
happy to see what you create.

01:09:58.024 --> 01:10:00.024
Please fill out our survey and 
check out resources online. 

01:10:00.875 --> 01:10:02.875
&gt;&gt; ALEX FAABORG: Thanks a lot. 
Nice job.

01:10:21.965 --> 01:10:25.441
   &gt;&gt; Thank you for joining this
session, brand ambassadors will 

01:10:25.442 --> 01:10:29.546
assist with directing you 
through the designated exits. 

01:10:29.547 --> 01:10:31.547
We'll be making room for those 
registered for the next session.

01:10:32.633 --> 01:10:34.886
If you've registered for the 
next session in this room, we 

01:10:34.887 --> 01:10:38.759
ask that you clear the room and 
return via the registration line

01:10:38.760 --> 01:10:41.204
outside. Thank you. 

01:30:19.903 --> 01:30:21.903
Determines the performance. So 
what does that mean?

01:30:26.677 --> 01:30:28.318
Say you have 50 documents in a 
database. That's not a hard 

01:30:28.319 --> 01:30:30.339
problem to solve.
But the performance is based on 

01:30:30.340 --> 01:30:32.340
the 50 that you query for.

01:30:36.066 --> 01:30:38.101
Now what if you have 100,000 
items in your database. The 

01:30:38.102 --> 01:30:40.361
performance is exactly the same.
And what about 100 million?

01:30:44.629 --> 01:30:45.453
Well, still with Firestore, if 
you're querying, you're getting 

01:30:45.454 --> 01:30:48.446
the same performance

01:30:51.585 --> 01:30:52.797
. Not with the size of the 
entire data, but the size of the

01:30:52.798 --> 01:30:56.743
result set. And it's effortless.
There's no sharding, no 

01:30:56.744 --> 01:30:58.744
maintenance, 

01:30:59.801 --> 01:31:01.643
you write the queries, populate 
the database and write the 

01:31:01.644 --> 01:31:03.644
queries on top of that.

01:31:12.070 --> 01:31:15.753
thousands of users, they support
a lot of infrastructure. They 

01:31:15.754 --> 01:31:17.754
were looking for a way to 
increase 

01:31:20.856 --> 01:31:22.121
the velocity, lower their ops 
burden and deliver new features 

01:31:22.122 --> 01:31:24.122
to the customers all at the same
time.

01:31:28.085 --> 01:31:29.950
They mentioned some of the 
primary reasons for choosing 

01:31:29.951 --> 01:31:31.951
fire store.

01:31:33.233 --> 01:31:36.165
These aren't the same ones 
everyone picks and I thought 

01:31:36.166 --> 01:31:38.249
this was insightful. They are 
really excited about the 

01:31:41.252 --> 01:31:47.659
offline support. So the client 
SDKs allow for writing when 

01:31:47.660 --> 01:31:49.502
you're disconnected and syncing 
with the server when you get 

01:31:49.503 --> 01:31:51.503
back online.

01:31:57.699 --> 01:31:59.699
And the consistent APIs across 
the 

01:32:02.256 --> 01:32:04.885
client SDKs really, really speed
development and they're super 

01:32:04.886 --> 01:32:06.886
excited about that. 

01:32:10.014 --> 01:32:12.014
Evernote usersen often use 
multiple devices.

01:32:14.097 --> 01:32:16.963
They might use the desktop app 
or the mobile app. And then at 

01:32:16.964 --> 01:32:18.964
home, they use the tablet.

01:32:25.399 --> 01:32:27.441
This app, everybody's keeping 
the really important, personal 

01:32:27.442 --> 01:32:29.442
data and observations on the 
world.

01:32:34.354 --> 01:32:36.354
I wanted to take a moment and 
tell you 

01:32:37.384 --> 01:32:39.384
about

01:32:40.474 --> 01:32:42.474
Firebase Rules and this is a key
part 

01:32:45.177 --> 01:32:47.177
that makes the Firebase data 
storage options work well.

01:32:57.009 --> 01:33:01.316
    You can't have the queries 
open to the world. You have to 

01:33:01.317 --> 01:33:03.200
do authorization, you need to do
-- open to things you normally 

01:33:03.201 --> 01:33:06.518
have to do. They're not fancy. 
They're just stuff that is 

01:33:06.519 --> 01:33:08.519
important. 

01:33:11.916 --> 01:33:14.767
And so, with Firebase, Firebase 
Rules is a simple declarative 

01:33:14.768 --> 01:33:19.242
syntax that you just upload to 
the server and that says which 

01:33:19.243 --> 01:33:21.243
of your data paths are 
accessible.

01:33:30.478 --> 01:33:32.111
You can also do validation when 
you limit the length of a string

01:33:32.112 --> 01:33:34.112
or, you 

01:33:36.642 --> 01:33:38.642
know, make sure integers are 
within a valid range.

01:33:45.124 --> 01:33:47.124
Doug, tell us more about Fire

01:33:48.653 --> 01:33:49.689
store. 
   &gt;&gt; DOUG STEVENSON: I would 

01:33:49.690 --> 01:33:54.854
love to. For those of you who 
have already used that, you know

01:33:54.855 --> 01:33:56.899
it's a cloud-hosted no SQL 
database. We observed what 

01:33:56.900 --> 01:33:58.900
developers were doing with it.

01:34:03.015 --> 01:34:05.015
We found some patterns, best 
practices 

01:34:07.334 --> 01:34:09.334
and tried to code that into the 

01:34:10.386 --> 01:34:12.847
destructuring of Firestore. It 
mirrors the most common use 

01:34:12.848 --> 01:34:14.848
cases. 

01:34:16.713 --> 01:34:17.722
At the very top level of the 
Firebase, you have collections 

01:34:17.723 --> 01:34:19.723
and these are containers for 
documents.

01:34:22.409 --> 01:34:25.265
You have to organize your 
documents into collections. A 

01:34:25.266 --> 01:34:27.100
document is the lowest level, 
unit of data. Nothing really 

01:34:27.101 --> 01:34:31.642
smaller than a document. But a 
document can have fields in it. 

01:34:31.643 --> 01:34:33.643
And those fields can have tight 
values. 

01:34:33.671 --> 01:34:35.537
You're getting all of the 
fields, all the data types in 

01:34:35.538 --> 01:34:39.623
one query. Now, within a 
collection, the documents can be

01:34:39.624 --> 01:34:42.937
ordered and they can be filtered
based on the content. If you 

01:34:42.938 --> 01:34:45.823
have fields in there you want to
use to narrow down your search 

01:34:45.824 --> 01:34:49.942
or order by, say, date or count 
or something like that, you can 

01:34:49.943 --> 01:34:52.354
perform queries like that in, 
like, I said, that scales with 

01:34:52.355 --> 01:34:54.355
the size of the result set.

01:35:00.606 --> 01:35:04.909
   &gt;&gt; SARAH ALLEN: So I'm 
excited that Ever Note decided 

01:35:04.910 --> 01:35:06.910
to share about how their data is
modelled.

01:35:10.193 --> 01:35:12.193
And they're doing some common 
patterns

01:35:14.955 --> 01:35:18.634
-- this can give you a sense of 
how the data modelling works. 

01:35:18.635 --> 01:35:22.711
You have a collection of all of 
the users. When somebody logs 

01:35:22.712 --> 01:35:25.154
in, the client will write this 
data whatever user data they 

01:35:28.464 --> 01:35:30.304
signed up with and, then, you 
have your basic profile 

01:35:30.305 --> 01:35:32.305
information.

01:35:35.381 --> 01:35:37.471
From then on, that's cash cached
locally on the device. 

01:35:39.103 --> 01:35:40.725
So if you connected on a 
different device and changed 

01:35:40.726 --> 01:35:42.726
your profile, it would 
automatically sync.

01:35:46.235 --> 01:35:48.716
So then, they organize data in 
your notes, in notebooks and 

01:35:48.717 --> 01:35:50.717
spaces.

01:35:52.824 --> 01:35:55.889
And those -- you also listen to 
from the client side. And 

01:35:55.890 --> 01:35:57.890
there's another top-level 
collection of all of your notes.

01:36:01.181 --> 01:36:03.181
This is a common pattern for how
Firestore organizes these datas.

01:36:05.343 --> 01:36:07.343
You have the top-level 
collections, 

01:36:17.937 --> 01:36:20.846
which can have a huge number of 
documents, but the individual 

01:36:20.847 --> 01:36:20.862
user is only getting a small 
subset of them. And therefore, 

01:36:20.863 --> 01:36:22.863
you can have that result 

01:36:24.003 --> 01:36:26.003
set be small and queries be 
fast. 

01:36:26.844 --> 01:36:28.081
So the client listens to the 
notes they have access to. And 

01:36:28.082 --> 01:36:31.948
then, when they change, it 
automatically is synced across 

01:36:28.082 --> 01:36:30.082
devices and between users.

01:36:33.854 --> 01:36:36.104
And then Firebase rules works on
the server side, keeping user 

01:36:36.105 --> 01:36:38.105
data safe.

01:36:43.099 --> 01:36:48.196
we build? Our use case is a 
little bit different than Ever 

01:36:48.197 --> 01:36:50.197
Note, calling it Friendly Shop, 
and the idea here is, this is 

01:36:51.681 --> 01:36:53.530
totally fictional, of course, 
the companies all over the world

01:36:53.531 --> 01:36:55.755
can upload images with 
inspirational quotes. 

01:36:57.596 --> 01:36:59.843
So you can think of it kind of 
like a shop. And the idea is you

01:36:59.844 --> 01:37:04.381
can go and browse them and maybe
buy them. What's common between 

01:37:04.382 --> 01:37:07.070
the Ever Note case and our case,
we don't need to show all of the

01:37:07.071 --> 01:37:11.146
documents. We don't need to show
all of the items together. We 

01:37:11.147 --> 01:37:12.773
only need to show what can fit 
on the screen or in this case, 

01:37:12.774 --> 01:37:14.774
we're showing 50 items per 
query.

01:37:25.801 --> 01:37:28.320
We wanted to put a million 
documents. How many did we get 

01:37:28.321 --> 01:37:31.584
to? 
   &gt;&gt; SARAH ALLEN: About 

01:37:31.585 --> 01:37:32.999
260,000. 
   &gt;&gt; DOUG STEVENSON: We'll demo

01:37:33.000 --> 01:37:35.000
about 

01:37:36.092 --> 01:37:38.136
260,000 items today. We didn't 
quite get to a million. 

01:37:39.173 --> 01:37:41.173
&gt;&gt; SARAH ALLEN: I'll get into a 

01:37:42.222 --> 01:37:45.081
little bit of details about some
of the gotchas we got into. Not 

01:37:45.082 --> 01:37:46.973
the limitation of the scale of 
Google storage or anything like 

01:37:46.974 --> 01:37:48.411
that. 
   &gt;&gt; DOUG STEVENSON: Yeah, that

01:37:48.412 --> 01:37:50.882
was our lack of planning. 
   &gt;&gt; SARAH ALLEN: Our 

01:37:50.883 --> 01:37:54.126
excitement and enthusiasm for 
adding features at the last 

01:37:54.127 --> 01:37:56.781
minute. 
   &gt;&gt; DOUG STEVENSON: And Sarah 

01:37:56.782 --> 01:37:58.782
will 

01:38:00.069 --> 01:38:03.038
talk about how we populate the 
database. We used Firestore like

01:38:03.039 --> 01:38:06.296
mentioned earlier, but a variety
of cloud-based products to build

01:38:06.297 --> 01:38:10.598
this out. And what we didn't 
have to do is stand up a server,

01:38:10.599 --> 01:38:12.869
configure it, log into it, we 
didn't have to scale it. It 

01:38:12.870 --> 01:38:14.870
happened automatically.

01:38:22.992 --> 01:38:24.454
&gt;&gt; SARAH ALLEN: Firebase 
hosting, for web app, this is of

01:38:24.455 --> 01:38:26.455
course, essential. But whenever 
you have a mobile app, 

01:38:27.716 --> 01:38:29.716
typically, you'll have at least 
a few 

01:38:31.937 --> 01:38:35.265
screens that you want to deliver
on the web. And you want to be 

01:38:35.266 --> 01:38:37.266
able to easily serve 

01:38:40.357 --> 01:38:42.357
up your static assets, html, 
JavaScript and images.

01:38:45.471 --> 01:38:47.471
And then, you also want to be 
able to do this globally.

01:38:49.369 --> 01:38:52.209
And have those accessible, close
to the edge. And Firebase 

01:38:52.210 --> 01:38:54.884
hosting is a global content 
delivery network with physical 

01:38:56.508 --> 01:38:58.508
edges all over the world. 

01:38:59.973 --> 01:39:02.827
So no matter where users are, 
they get -- they get low 

01:39:02.828 --> 01:39:04.828
latency, which turns 

01:39:05.928 --> 01:39:07.373
into speed for the user 
experience. 

01:39:07.374 --> 01:39:09.374
&gt;&gt; DOUG STEVENSON: So planetary 
by definition, right? 

01:39:09.807 --> 01:39:11.807
&gt;&gt; SARAH ALLEN: Exactly. 

01:39:12.861 --> 01:39:16.712
&gt;&gt; DOUG STEVENSON: The other is 
Firebase Authentication. It 

01:39:16.713 --> 01:39:18.713
helps you get your users logged 
into your mobile application.

01:39:23.785 --> 01:39:25.785
Supports Google log-in, 
Facebook, twitter.

01:39:27.019 --> 01:39:28.257
If that's not enough to suit 
your own planetary needs, you 

01:39:28.258 --> 01:39:32.578
can write your own plug-in, your
own users, your own OS system, 

01:39:32.579 --> 01:39:34.579
you can plug that in yourself 
and that's fine.

01:39:39.925 --> 01:39:41.925
&gt;&gt; SARAH ALLEN: Cloud storage, 
each 

01:39:43.204 --> 01:39:45.044
poster has its own image, and we
need a massively Scalable data 

01:39:45.045 --> 01:39:47.045
storage place to put them.

01:39:50.999 --> 01:39:52.217
We don't need something as 
massive as cloud storage, but 

01:39:52.218 --> 01:39:54.218
it's good to know 

01:39:56.111 --> 01:39:58.111
it's there -- the images can get
pretty big.

01:40:00.407 --> 01:40:02.228
And there's room for extra 
thumbnails and variance across 

01:40:02.229 --> 01:40:04.254
the devices. 
    And let me tell you a little

01:40:04.255 --> 01:40:06.255
bit 

01:40:07.936 --> 01:40:09.936
about how big Google Cloud 
Storage is.

01:40:10.939 --> 01:40:12.939
It's

01:40:15.227 --> 01:40:17.227
exobytes of data.

01:40:21.880 --> 01:40:23.880
It's a number of bytes with 18 
zeros after it.

01:40:28.814 --> 01:40:30.227
And roughly a million terabytes.
And I don't know if anybody's 

01:40:30.228 --> 01:40:32.872
old enough to remember when we 
had to worry about physical 

01:40:32.873 --> 01:40:35.926
disks. 
    Like, we get bigger and 

01:40:35.927 --> 01:40:39.993
bigger disks and that was, like,
really exciting. And then, if 

01:40:39.994 --> 01:40:42.232
your stuff had to go on multiple
disks, that's a lot of work.

01:40:46.346 --> 01:40:48.183
It's lovely not to have to worry
about that and not to have to 

01:40:48.184 --> 01:40:50.634
plan for that to be in the 
future. 

01:40:53.716 --> 01:40:55.716
And so, with our poster app, 
even if 

01:40:56.802 --> 01:40:58.802
we were storing a really high 
res image 

01:40:59.863 --> 01:41:01.869
that was, like, ten megabytes, I
could search trillions of those.

01:41:04.959 --> 01:41:06.392
And that's really delightful. 
And it'll work for our friendly 

01:41:06.393 --> 01:41:11.055
shop even if we get to planet 
scale with our user base. 

01:41:11.869 --> 01:41:13.869
&gt;&gt; DOUG STEVENSON: That's right.

01:41:16.804 --> 01:41:18.804
And the last component we used 
to wrap 

01:41:20.993 --> 01:41:22.993
these products up is called 
Cloud Functions.

01:41:25.719 --> 01:41:31.039
A serverless back end. It's a 
managed environment. Write node,

01:41:31.040 --> 01:41:33.040
write JavaScript, deploy it to 
cloud functions and it runs in 

01:41:34.086 --> 01:41:36.086
response to events that happen 
in your system.

01:41:39.001 --> 01:41:40.623
What about the events that 
happened? Well, for example, 

01:41:40.624 --> 01:41:44.094
what we could do in the app, 
when a new user signs up, we can

01:41:44.095 --> 01:41:46.095
turn around and create a user 
record for them.

01:41:48.119 --> 01:41:50.428
PVR or anytime 

01:41:53.493 --> 01:41:55.993
We can automatically kick off a 
process that generates 

01:41:55.994 --> 01:41:57.994
thumbnails.

01:42:00.920 --> 01:42:02.783
Or if -- oh, I don't have a 
third case. The point is, all 

01:42:02.784 --> 01:42:05.036
you do is write and deploy that 
code, you don't manage any 

01:42:07.097 --> 01:42:09.097
servers, don't log into 
anything.

01:42:10.810 --> 01:42:12.810
And you don't scale it up or 
down.

01:42:14.335 --> 01:42:16.571
It scales up and scales down to 
zero if all of your demand goes 

01:42:16.572 --> 01:42:21.222
away. You only pay for what you 
use. You don't have hundreds of 

01:42:21.223 --> 01:42:25.089
servers fired up. You only pay 
for the compute resources that 

01:42:25.090 --> 01:42:27.090
you actually use with cloud 
functions. 

01:42:31.221 --> 01:42:33.054
And in this product, or live app
that will add functionality to 

01:42:33.055 --> 01:42:35.709
the app without deploying a new 
version of the web app.

01:42:41.825 --> 01:42:44.103
. 
   &gt;&gt; SARAH ALLEN: This is a 

01:42:44.104 --> 01:42:47.353
serverless experience, which 
significantly simplifies both 

01:42:47.354 --> 01:42:49.354
the development and the 
operations.

01:42:54.687 --> 01:42:56.687
This illustrates

01:42:58.642 --> 01:43:01.323
how to power the friendly shop 
app. You can do capacity 

01:43:01.324 --> 01:43:03.324
planning on a napkin.

01:43:06.678 --> 01:43:08.550
Having this fully managed 
infrastructure means we can 

01:43:08.551 --> 01:43:11.210
focus more on our application 
features and that is 

01:43:14.860 --> 01:43:15.883
really what drives the business 
value for our friendly shop. 

01:43:15.884 --> 01:43:22.009
    One place that we do need to
do careful thinking. As we 

01:43:22.010 --> 01:43:25.499
mentioned before, how our data 
is modelled. It's not auto 

01:43:25.500 --> 01:43:28.777
magic. You have to think about 
your use case and how you're 

01:43:28.778 --> 01:43:30.778
going to put that data together.

01:43:33.037 --> 01:43:34.699
And Firestore is structured to 
organize your data for scale. 

01:43:38.661 --> 01:43:41.721
So I want to dive into the 
Firestore experience. This is an

01:43:41.722 --> 01:43:43.722
image from our -- from the 

01:43:45.826 --> 01:43:47.826
data console in Firebase UI from
our 

01:43:49.946 --> 01:43:52.213
friendly shop data -- data 
structures. And I'll just walk 

01:43:52.214 --> 01:43:55.492
you through the interface, which
also walks you through our data 

01:43:55.493 --> 01:43:57.493
structure.

01:44:01.590 --> 01:44:04.039
If the app were more real, you 
could have more collections on 

01:44:04.040 --> 01:44:08.741
the first panel on the left, 
you'll see items. So that would 

01:44:08.742 --> 01:44:11.624
show a list of collections, 
normally, to have items, users, 

01:44:11.625 --> 01:44:13.479
whatnot. 
    And you can also add 

01:44:13.480 --> 01:44:15.480
collections direct in the 
interface.

01:44:17.999 --> 01:44:19.423
Being able to direct that in the
interface sometimes means that 

01:44:19.424 --> 01:44:24.744
you can get started on the view 
of your app without -- before 

01:44:24.745 --> 01:44:27.395
you build all of the interaction
into your app. 

01:44:29.013 --> 01:44:31.712
The next column is a list of 
documents for the selected 

01:44:31.713 --> 01:44:33.713
collection.

01:44:37.164 --> 01:44:39.273
And here, we have -- 260,000 
plus documents and you can 

01:44:42.339 --> 01:44:44.796
actually scroll through all of 
those and snap to a particular 

01:44:44.797 --> 01:44:46.797
ID and pick a particular 
document. 

01:44:48.739 --> 01:44:50.739
And when you select the 
document, 

01:44:52.225 --> 01:44:54.225
its content show up on the 
right.

01:44:55.597 --> 01:44:57.597
And here is some of the data or 
all of 

01:45:00.378 --> 01:45:02.216
the data for an hour, all of the
metadata for each of the posters

01:45:02.217 --> 01:45:04.459
in our shop. And you can also, 
our app doesn't do 

01:45:07.764 --> 01:45:09.764
this, but if you want to 
structure your 

01:45:11.248 --> 01:45:13.716
data more and deeper, you can 
control how much you access at a

01:45:13.717 --> 01:45:16.148
time by creating subcollections.
You can see that you can add a 

01:45:16.762 --> 01:45:19.214
collection, as well. 
    Although, our app has a 

01:45:19.215 --> 01:45:21.215
fairly 

01:45:22.466 --> 01:45:25.958
cynical but flexible data model 
with a top-level. 

01:45:26.985 --> 01:45:30.485
&gt;&gt; DOUG STEVENSON: You hold on 
to that one. Here is how you 

01:45:30.486 --> 01:45:32.486
query the database. It's a 
simple few lines of JavaScript.

01:45:36.348 --> 01:45:39.337
If you go and view the source, 
you'll get something like this, 

01:45:39.338 --> 01:45:41.338
although, it's a little bit 
broken out.

01:45:42.368 --> 01:45:42.554
What we do here is we're using 
the Firebase SDK, JavaScript 

01:45:42.555 --> 01:45:46.209
SDK, reaching into the Firestore
product for that. Firebase has a

01:45:46.210 --> 01:45:49.891
bunch of different products in 
it, we're just interested in the

01:45:49.892 --> 01:45:51.327
Firestore here and reach into 
the items collection and then, 

01:45:51.328 --> 01:45:55.400
we're going to order all of the 
items, all 260,000 of them by 

01:45:55.401 --> 01:45:58.651
price, descending. We'll get the
most expensive one and the least

01:45:58.652 --> 01:46:00.734
expensive ones last. 
    And then, we're going to 

01:46:00.735 --> 01:46:02.735
limit by 

01:46:04.401 --> 01:46:06.675
the first 50, the top 50, again,
based on the ordering that we're

01:46:06.676 --> 01:46:13.166
going to get a asynchronous. 
This is how we populate the home

01:46:13.167 --> 01:46:16.240
screen for our apps. Let's jump 
into a demo.

01:46:19.834 --> 01:46:22.502
We'll jump into the demo. If you
want to view this demo live, see

01:46:23.923 --> 01:46:26.573
that short link, go ahead and 
copy that into your mobile 

01:46:26.574 --> 01:46:28.000
browser or your laptop or 
whatever and you can follow 

01:46:28.001 --> 01:46:31.871
along with me. 
    What I'll do is copy this 

01:46:31.872 --> 01:46:33.872
and paste it into the browser.

01:46:37.252 --> 01:46:39.252
And it loads up. And we have 
results.

01:46:42.402 --> 01:46:44.860
So here's 50 something, the top 
50 by price. We have all of the 

01:46:44.861 --> 01:46:46.861
expensive ones here.

01:46:48.746 --> 01:46:50.746
Everything is 25.99.

01:46:53.230 --> 01:46:55.510
I can reverse that sort if we 
want. I'm a budget shopper, so 

01:46:55.511 --> 01:46:57.511
I'm going to keep it on the 
cheapest ones first. 

01:47:01.196 --> 01:47:04.079
So that's how we populate the 
home screen. Could we go back to

01:47:04.080 --> 01:47:06.770
the slides, please? 

01:47:10.040 --> 01:47:12.077
&gt;&gt; SARAH ALLEN: When we want to 
add an additional query, we want

01:47:12.078 --> 01:47:14.078
to add 

01:47:16.329 --> 01:47:18.858
filters, we can specify another 
ware clause. We want to filter 

01:47:18.859 --> 01:47:20.859
by topic.

01:47:23.141 --> 01:47:25.183
So we can say where a topic 
equals whatever the user's 

01:47:25.184 --> 01:47:27.184
picked in the interface.

01:47:29.077 --> 01:47:31.077
And then, the prior query is in 
gray 

01:47:32.365 --> 01:47:34.845
and the new part is highlighted.
And this is just another option 

01:47:34.846 --> 01:47:36.846
in the 

01:47:39.964 --> 01:47:42.634
query builder that let uss us 
filter the results. Let's go 

01:47:42.635 --> 01:47:44.635
back to the demo and see what 
that looks like in the app. 

01:47:46.529 --> 01:47:48.559
&gt;&gt; DOUG STEVENSON: Let's choose 
a topic. And these are randomly 

01:47:48.560 --> 01:47:50.560
generated.

01:47:51.639 --> 01:47:53.639
We used a node module called 
faker and 

01:47:56.129 --> 01:47:58.158
faker generated this business-y 
sounding things. Tongue in 

01:47:58.159 --> 01:48:00.159
cheek, kind of humorous. I'm 
going to filter on a topic.

01:48:03.083 --> 01:48:06.760
I'm totally into e business. I'm
going to do e-business. And the 

01:48:06.761 --> 01:48:10.271
results come in. Notice that the
queries are just as fast as all 

01:48:10.272 --> 01:48:12.272
of the others.

01:48:13.324 --> 01:48:15.999
Adding a where clause -- now, we
can see we have all e business 

01:48:16.000 --> 01:48:20.877
posters. And I can go in there 
and change that, again. I'm also

01:48:20.878 --> 01:48:22.878
totally into platforms. How 
about platforms? 

01:48:25.921 --> 01:48:26.988
Want to do that? 
   &gt;&gt; SARAH ALLEN: Inspirational

01:48:26.989 --> 01:48:29.221
posters for businesses around 
the world. 

01:48:30.444 --> 01:48:32.283
&gt;&gt; DOUG STEVENSON: And the 
query's the same no matter how 

01:48:32.284 --> 01:48:35.602
many where clauses we add. So 
I'm going to go back to the 

01:48:35.603 --> 01:48:37.222
slides. 
   &gt;&gt; SARAH ALLEN: Now, we want 

01:48:37.223 --> 01:48:39.873
to add another filter. We do it 
in an intuitive way by adding 

01:48:41.300 --> 01:48:43.300
another where clause.

01:48:44.373 --> 01:48:46.373
So these particular poster 
images have a range of colors .

01:48:48.904 --> 01:48:51.595
And so, we can choose the top 50
posters, sorted by price, 

01:48:51.596 --> 01:48:53.596
starting with the most 
expensive.

01:48:56.907 --> 01:48:59.143
And then, for a particular topic
and a particular color, we can 

01:48:59.144 --> 01:49:01.663
see the result set. 
   &gt;&gt; DOUG STEVENSON: Let's go 

01:49:01.664 --> 01:49:04.950
to the demo, again. So you saw 
on the last page, that bit 

01:49:09.273 --> 01:49:11.729
of code, they're been anded 
together. If I want to look at 

01:49:11.730 --> 01:49:13.730
the posters on the 

01:49:14.840 --> 01:49:17.100
target platforms and in, orange,
that's the closest thing to 

01:49:17.101 --> 01:49:20.767
Firebase. Let's look at the ones
that are orange. And again, we 

01:49:20.768 --> 01:49:22.768
get -- that's actually really 
attractive. 

01:49:24.240 --> 01:49:25.880
Again, you notice we made the 
query more complex by adding 

01:49:25.881 --> 01:49:29.966
another where clause, but the 
query took the same amount of 

01:49:29.967 --> 01:49:33.466
time because it's the same 50 
size results. Queries scale 

01:49:33.467 --> 01:49:35.907
based on the size of the result 
set, not on the source data set.

01:49:36.112 --> 01:49:39.374
    And I should have added -- I
should have mentioned earlier, 

01:49:39.375 --> 01:49:41.375
we actually have 

01:49:42.418 --> 01:49:44.662
a script over here that's 
constantly adding new -- oh, now

01:49:44.663 --> 01:49:48.145
you can see it added new ones. 
This is simulating what users 

01:49:48.146 --> 01:49:50.146
might be doing. 

01:49:52.218 --> 01:49:54.716
Imagine there's users all over 
adding new documents. That's 

01:49:54.717 --> 01:49:56.717
what this script is doing.

01:49:57.772 --> 01:49:59.259
The result set you see on screen
or your mobile app could change 

01:49:59.260 --> 01:50:02.945
over time. This isn't just a 
static result set. This is a 

01:50:02.946 --> 01:50:04.584
constantly changing result set. 
And this becomes significant 

01:50:04.585 --> 01:50:06.833
later on. 
    Let's switch back to the 

01:50:06.834 --> 01:50:08.834
slides.

01:50:11.745 --> 01:50:14.831
   &gt;&gt; SARAH ALLEN: You can keep 
doing this. And we could go 

01:50:14.832 --> 01:50:16.832
through another one and another 
one and another one and keep 

01:50:20.176 --> 01:50:22.050
making up variations of our 
posters. But we think you get 

01:50:22.051 --> 01:50:24.051
the idea by now.

01:50:25.619 --> 01:50:27.619
So the only requirement is that 
when 

01:50:30.326 --> 01:50:32.326
you're doing these composite 
indexes 

01:50:35.013 --> 01:50:37.488
that you create a -- composite 
queries that you create a 

01:50:37.489 --> 01:50:39.732
composite index. 
    And so that allows you to 

01:50:39.733 --> 01:50:42.443
support all of the combinations 
of filters and ordering that you

01:50:42.444 --> 01:50:46.828
need. So, we have another demo? 
   &gt;&gt; DOUG STEVENSON: No, we're 

01:50:46.829 --> 01:50:49.301
talking about indexes now. 
   &gt;&gt; SARAH ALLEN: Okay. 

01:50:49.738 --> 01:50:51.738
&gt;&gt; DOUG STEVENSON: Yeah.

01:50:52.843 --> 01:50:55.705
You can keep adding clauses to 
your heart's content, but your 

01:50:55.706 --> 01:51:00.217
only constraint is you have to 
add indexes for them. Here's a 

01:51:00.218 --> 01:51:04.707
screenshot of what it looks in 
the Firebase console. We've got 

01:51:04.708 --> 01:51:06.950
all of the combinations of 
things we want to filter and 

01:51:06.951 --> 01:51:10.202
order by. As long as the indexes
exist, your queries will be 

01:51:10.203 --> 01:51:11.628
fast. 
    And there's nothing you have

01:51:11.629 --> 01:51:16.108
to do. When you create an index,
it'll go off and do it. You can 

01:51:16.109 --> 01:51:17.755
also put these in a 
configuration file and deploy 

01:51:17.756 --> 01:51:20.436
them with your app so you don't 
have to manually create any one 

01:51:20.437 --> 01:51:22.872
of these. 
    But the interesting thing 

01:51:22.873 --> 01:51:26.821
here is that if you don't -- if 
you forget to create an index 

01:51:26.822 --> 01:51:28.822
and you try to query on 

01:51:30.087 --> 01:51:32.353
it, Firebase or sorry Firestore 
will say, well, I'm not going to

01:51:32.354 --> 01:51:37.842
do that query, it doesn't scale.
I only do Scalable things. It'll

01:51:37.843 --> 01:51:39.843
give you an interesting error 
message.

01:51:41.717 --> 01:51:44.588
This is an error message of what
Firestore SDK. You can create it

01:51:44.589 --> 01:51:49.496
here. And it gives you a link to
go create that index. You don't 

01:51:49.497 --> 01:51:51.497
have to, like, know any sort 

01:51:52.972 --> 01:51:54.215
of magical incantations, you 
click the link and makes that 

01:51:54.216 --> 01:51:56.454
index for you. 
    During development, if you 

01:51:56.455 --> 01:51:59.735
forget to think of the different
combinations of things you want 

01:51:59.736 --> 01:52:01.736
to query on, you can create one 
ad hoc.

01:52:04.833 --> 01:52:06.834
This is maybe the most 
actionable error message in an 

01:52:06.835 --> 01:52:08.835
SDK. It's literally telling you 
how to fix 

01:52:11.843 --> 01:52:12.888
-- thank you. We hope Firebase 
is easy to use. 

01:52:16.961 --> 01:52:18.961
&gt;&gt; SARAH ALLEN: So just wrapping
up 

01:52:20.462 --> 01:52:22.462
the scaScalable Queries, 
indexing made 

01:52:24.165 --> 01:52:26.886
easy, all of your individual 
fields are indexed by default. 

01:52:26.887 --> 01:52:29.356
So if you're just doing a very 
simple query on a single 

01:52:29.357 --> 01:52:32.219
property, you don't have to do 
anything. And then, for compound

01:52:32.220 --> 01:52:35.901
queries, we have a little helper
there. 

01:52:38.975 --> 01:52:39.992
So I think you've seen lots of 
different demonstrations of how 

01:52:39.993 --> 01:52:41.993
the 

01:52:43.066 --> 01:52:45.935
performance is based on the 
result set. And we have a lot of

01:52:45.936 --> 01:52:50.628
great documentation on how to 
structure your data. We've gone 

01:52:50.629 --> 01:52:54.737
through some really common 
patterns today. And once you get

01:52:54.738 --> 01:52:56.738
a feel for it, then 

01:52:58.760 --> 01:53:00.760
you can put together

01:53:01.880 --> 01:53:04.770
these really Scalable apps. 

01:53:09.052 --> 01:53:11.950
So we can also expand our app on
the server side with cloud 

01:53:11.951 --> 01:53:13.951
functions. We talked about two 
different data 

01:53:16.852 --> 01:53:18.852
storage ways to scale your app 
with 

01:53:20.958 --> 01:53:23.802
Firestore and with Cloud 
Storage. And with Cloud 

01:53:23.803 --> 01:53:25.803
functions, you can provide 
server side code.

01:53:27.757 --> 01:53:29.804
You can do a lot with Firebase, 
only with client side code, but 

01:53:29.805 --> 01:53:31.805
server side 

01:53:33.707 --> 01:53:35.343
code can be helpful for three 
things on the had slide, data 

01:53:35.344 --> 01:53:39.362
wrangling when you're creating 
your profile, want to get some 

01:53:39.363 --> 01:53:41.904
stuff from, like, social sharing
sites or figure out who people's

01:53:42.542 --> 01:53:44.778
friends are. 
    You might have some business

01:53:44.779 --> 01:53:46.779
logic 

01:53:48.066 --> 01:53:50.066
to drive user growth with a 
shopping frenzy.

01:53:58.063 --> 01:54:00.903
The other kinds of things people
do with cloud functions is put 

01:54:00.904 --> 01:54:05.616
code on the server rather than 
client -- in order to make fair 

01:54:05.617 --> 01:54:08.290
decisions. In order to be really
careful with that 

01:54:11.992 --> 01:54:13.992
business logic and protect that 
so it's 

01:54:15.460 --> 01:54:17.309
not, kind of, in the wild, in an
untrusted client but secure on 

01:54:17.310 --> 01:54:19.310
the server side.

01:54:21.212 --> 01:54:23.212
And then, it's also a great way 
to do 

01:54:24.878 --> 01:54:25.907
multiparty interactions to 
create a bot, to coordinate many

01:54:25.908 --> 01:54:30.379
users at the same time. 
   &gt;&gt; DOUG STEVENSON: So Cloud 

01:54:30.380 --> 01:54:32.380
Functions has support for a 
BUMPL of different 

01:54:35.493 --> 01:54:37.493
event providers within Google 
infrastructure.

01:54:39.978 --> 01:54:41.978
You've already seen Firestore 
and Realtime Database.

01:54:45.379 --> 01:54:49.318
We've mentioned Firestore and 
RealtimeDatabase. If a document 

01:54:49.319 --> 01:54:50.736
is created or changed or 
deleted, you can write code to 

01:54:50.737 --> 01:54:52.737
respond to that. .

01:54:58.107 --> 01:55:01.373
bunch of different event 
providers within Google 

01:54:58.107 --> 01:55:02.040
infrastructure. You've already 
seen Firestore and Realtime 

01:54:58.107 --> 01:55:01.973
Database. We've mentioned 
Firestore and RealtimeDatabase. 

01:54:58.107 --> 01:55:01.840
If a document is created or 
changed or deleted, you can 

01:54:58.107 --> 01:54:59.942
write code to respond to that. .
    So this is good for doing 

01:54:59.943 --> 01:55:05.112
things like data sanitization. 
If you want to change a value 

01:55:05.113 --> 01:55:07.587
that's invalid at the time of 
insertion, you can do that with 

01:55:07.588 --> 01:55:09.588
a cloud function.

01:55:11.816 --> 01:55:13.816
With Firebase

01:55:15.370 --> 01:55:17.223
authentication figures, if 
there's a new account created, 

01:55:17.224 --> 01:55:19.224
you could create a 

01:55:20.312 --> 01:55:21.740
new profile, or if that is 
deleted, you can clean up the 

01:55:21.741 --> 01:55:24.400
data so you're not paying for 
extra storage for a user that no

01:55:24.401 --> 01:55:26.401
longer exists.

01:55:28.672 --> 01:55:30.672
You can write code in response 
to conversion events.

01:55:32.618 --> 01:55:35.265
A typical event if someone buys 
something or performs a 

01:55:35.266 --> 01:55:37.118
high-profile action. 
    You can write code to 

01:55:37.119 --> 01:55:39.553
respond to that and keep track 
of it on the back end.

01:55:43.297 --> 01:55:44.722
Cloud storage triggers -- if 
it's changed within your cloud 

01:55:44.723 --> 01:55:49.050
storage bucket. In our app, if a
poster was uploaded, we could 

01:55:49.051 --> 01:55:51.503
write some code that creates the
thumbnails of various sizes that

01:55:51.504 --> 01:55:55.181
are appropriate. We don't have 
to know anything else. It 

01:55:55.182 --> 01:55:57.182
happens automatically.

01:55:58.861 --> 01:56:00.912
You can use cloud pub subs.

01:56:06.615 --> 01:56:10.779
Also, you can use Crashlytics. 
So you can get what's called 

01:56:10.780 --> 01:56:14.253
Velocity Alerts to know if an 
error happens and how severe it 

01:56:14.254 --> 01:56:16.254
is among all of the users for 
the apps. 

01:56:19.434 --> 01:56:21.434
And lastly, http trigger. A web 
hook of some sort.

01:56:24.520 --> 01:56:26.960
So you can use this to create 
bots as Sarah said, rest APIs 

01:56:26.961 --> 01:56:31.069
for your app. Or even if you 
want to do something like 

01:56:31.070 --> 01:56:33.070
populate a database which we'll 
talk about later. 

01:56:35.345 --> 01:56:37.345
So let's switch to the demo, 
again.

01:56:39.036 --> 01:56:41.092
Remember before, there was that 
script that was populating the 

01:56:41.093 --> 01:56:45.369
database. This has been going on
about every minute or so, it 

01:56:45.370 --> 01:56:49.878
adds a new poster. Now, this is 
simulating what users might do. 

01:56:49.879 --> 01:56:52.340
It's not the real thing. 
    Let's say I want to drive 

01:56:52.341 --> 01:56:57.276
traffic to my website by 
creating a trigger that responds

01:56:57.277 --> 01:56:59.277
to when a new poster is 
uploaded.

01:57:00.949 --> 01:57:03.391
What I want to do is Tweet that 
out to everyone. I can do that 

01:57:03.392 --> 01:57:07.288
without changing any of the web 
app codes. What I'll do is fire 

01:57:07.289 --> 01:57:11.616
up my editor here. And this is 
my cloud functions code. And I 

01:57:11.617 --> 01:57:13.617
have in my copy buffer a -- oh, 
that's not it.

01:57:17.968 --> 01:57:20.619
How about this one? 
    This is our new function, 

01:57:20.620 --> 01:57:23.894
I'll walk through a redacted 
version of it. If we could -- 

01:57:23.895 --> 01:57:26.576
oh, actually, let's not switch 
just yet. What I'm going to do 

01:57:26.577 --> 01:57:28.577
is deploy it.

01:57:29.625 --> 01:57:31.459
And while that's deploying, 
maybe it will pick up one of the

01:57:31.460 --> 01:57:33.460
posters that's being created by 
the script. 

01:57:35.001 --> 01:57:37.001
If we could switch back to the 

01:57:38.018 --> 01:57:42.458
slides now. This is a strip down
version of what basically this 

01:57:42.459 --> 01:57:44.459
function is doing.

01:57:47.304 --> 01:57:49.304
Three SDKs in this, the 
functions

01:57:53.696 --> 01:57:55.696
and we're using a twitter SDK, 
as well.

01:58:02.489 --> 01:58:04.659
We're going to define a new 
function, call it Tweet new 

01:58:04.660 --> 01:58:06.660
items and say, hey, 

01:58:08.370 --> 01:58:10.015
functions SDK, I want a 
Firestore trigger and pay 

01:58:10.016 --> 01:58:14.937
attention documents to the items
collection with wild card ID. 

01:58:14.938 --> 01:58:16.938
And whenever a document that 
matches 

01:58:17.985 --> 01:58:19.622
that pattern is created, my 
anonymous function here is going

01:58:19.623 --> 01:58:21.623
to get invoked 

01:58:22.715 --> 01:58:24.715
with a snapshot and context 
surrounding the context.

01:58:28.280 --> 01:58:30.280
Reach into the snapshot, get the
raw data.

01:58:34.856 --> 01:58:36.856
I'm going to build a reference 
to a 

01:58:38.107 --> 01:58:39.785
path -- a reference to location 
in cloud storage where the 

01:58:39.786 --> 01:58:43.509
poster was uploaded. 
    So this is now, for those of

01:58:43.510 --> 01:58:45.510
you 

01:58:46.757 --> 01:58:49.424
know cloud storage, it's a path 
within the bucket. We're going 

01:58:49.425 --> 01:58:53.098
to generate a URL that's going 
to -- you want to go back? Just 

01:58:53.099 --> 01:58:55.140
that one -- yeah, so we're going
to generate the actual URL to 

01:58:55.141 --> 01:59:00.974
that poster in the web shop. So 
what I want to do now is advance

01:59:00.975 --> 01:59:03.877
the slide. And what we'll do is 
download that file from storage.

01:59:05.973 --> 01:59:07.588
We'll download it locally in the
instance it's running in cloud 

01:59:07.589 --> 01:59:10.647
functions. 
    And we're going to use the 

01:59:10.648 --> 01:59:13.537
Twitter API to download that 
image once it's downloaded.

01:59:16.639 --> 01:59:18.302
And once we have the media ID 
string, we'll turn around and 

01:59:18.303 --> 01:59:21.187
build a message, Tweet a message
that says take a look at our 

01:59:21.188 --> 01:59:23.642
latest poster. The name of the 
poster and the URL so 

01:59:26.760 --> 01:59:28.796
the user can click on it and go 
to the store. You'll get to see 

01:59:28.797 --> 01:59:32.868
the poster along with the Tweet.
    Let's go back to the demo 

01:59:32.869 --> 01:59:34.869
and see what happened here.

01:59:43.849 --> 01:59:45.849
Here we are in twit Twitter.

01:59:48.439 --> 01:59:49.642
So we had unleash granular web 
readiness, which is something 

01:59:49.643 --> 01:59:53.142
I've always wanted to do. If we 
click the link, we go to the 

01:59:56.435 --> 01:59:58.066
store and, and we see the poster
there. 

01:59:58.067 --> 02:00:00.067
So it works.

02:00:01.938 --> 02:00:03.169
So we had a Firestore trigger 
that triggered in response to a 

02:00:03.170 --> 02:00:06.647
new poster being added and 
automatically generates social 

02:00:06.648 --> 02:00:07.664
media to drive traffic to our 
store. I think that's pretty 

02:00:07.665 --> 02:00:10.546
cool. 
   &gt;&gt; SARAH ALLEN: Very cool. 

02:00:10.547 --> 02:00:13.375
   &gt;&gt; DOUG STEVENSON: Can we go 
back to the slides, please? 

02:00:13.376 --> 02:00:14.608
Thank you. 
   &gt;&gt; SARAH ALLEN: Now, I'm 

02:00:14.609 --> 02:00:17.922
going to give you a whirlwind 
tour of how we generated the 

02:00:17.923 --> 02:00:19.923
images.

02:00:22.957 --> 02:00:24.418
So this is kind of you can 
imagine lots of batch jobs where

02:00:24.419 --> 02:00:26.419
this would work.

02:00:30.503 --> 02:00:32.503
We -- I use this amazing, fun,

02:00:34.469 --> 02:00:36.522
library called fractastic. Turns
out to be one of the great ways 

02:00:38.355 --> 02:00:40.355
to create a lot of random 
images.

02:00:47.964 --> 02:00:49.964
This is an http function.

02:00:52.865 --> 02:00:54.865
It created a function so that we
can curl that URL.

02:00:55.887 --> 02:00:58.885
And I created a little class 
that makes the -- generates the 

02:00:58.886 --> 02:01:00.886
fractal image.

02:01:04.033 --> 02:01:06.033
And then, optionally, the script
takes 

02:01:08.993 --> 02:01:11.487
parameter, or lack of parameter 
will tinge this a whole bunch of

02:01:11.488 --> 02:01:13.986
colors. 
    Ships with cloud functions 

02:01:13.987 --> 02:01:15.987
on an environment you've got 
there.

02:01:18.343 --> 02:01:20.374
So then, it creates a random 
image using the faker module.

02:01:23.876 --> 02:01:25.931
So we decided to use the company
noun as a topic.

02:01:30.586 --> 02:01:32.586
And we get a verb an

02:01:34.174 --> 02:01:37.067
adjective to put those together 
into an inspirational message. 

02:01:37.068 --> 02:01:39.985
And we take the immanuals we've 
created earlier and we generate 

02:01:39.986 --> 02:01:43.441
a unique path based on a 
document ID. Because then, we 

02:01:43.442 --> 02:01:45.442
can make sure that 

02:01:47.111 --> 02:01:50.006
each of these posters has a 
unique storage path and we 

02:01:50.007 --> 02:01:52.007
upload a poster to a bucket.

02:01:53.490 --> 02:01:55.490
This is happening multiple times
to each color.

02:01:57.749 --> 02:01:59.403
And we finally get a download 
URL. It's really important for 

02:01:59.404 --> 02:02:03.705
the Tweeting. 
    And then, we put it all 

02:02:03.706 --> 02:02:05.706
together. It shows you, you 
know, we're putting 

02:02:08.998 --> 02:02:10.998
together a documents and we call
set on our document reference.

02:02:15.535 --> 02:02:18.252
And that changes the data in 
Firestore. We're updating 

02:02:18.253 --> 02:02:21.153
Firestore and storage in this 
Google Cloud Function.

02:02:26.686 --> 02:02:28.686
And then, you end up with a JSON
blob like this.

02:02:30.618 --> 02:02:35.521
And there's a couple of 
configuration options. It can 

02:02:35.522 --> 02:02:37.522
take two minutes or so, so we 
extended the time out. 

02:02:37.966 --> 02:02:40.393
I actually increased the memory 
because I found out that 

02:02:40.394 --> 02:02:44.070
sometimes it ended up using a 
lot of memory and then, that was

02:02:44.071 --> 02:02:46.071
causing things to fail 
occasionally.

02:02:47.955 --> 02:02:49.955
And you can also adjust your 
quota.

02:02:51.011 --> 02:02:53.011
So it turned out, one of the 
challenges 

02:02:54.319 --> 02:02:56.151
we came up -- we ran into in the
last 24 hours, we decided that 

02:02:56.152 --> 02:03:00.249
we wanted to have a nice URL for
our friendly shop. 

02:03:01.676 --> 02:03:05.762
Recreated the app. I forgot to 
turn on billings. You get a lot 

02:03:05.763 --> 02:03:09.247
of free executions without even 
setting up billing. But if you 

02:03:09.248 --> 02:03:11.305
want to make a million images, 
in fact, if you want to make 

02:03:14.573 --> 02:03:16.573
42,000, you'll get -- in a very 
short 

02:03:19.211 --> 02:03:21.211
amount of time, you'll get a quo

02:03:23.174 --> 02:03:25.174
quota exceeded.

02:03:29.336 --> 02:03:29.429
I had a bug there where I forgot
something to do with my file and

02:03:29.430 --> 02:03:31.430
didn't have the twitter set up. 

02:03:34.350 --> 02:03:35.367
This is the health tab for 
functions, it's really super 

02:03:35.368 --> 02:03:37.368
handy for figuring out what's 
going on. 

02:03:37.598 --> 02:03:39.598
So also, the local disk turned 
out 

02:03:42.159 --> 02:03:42.962
to be one of the reasons I was 
having things fail because of 

02:03:42.963 --> 02:03:44.963
memory.

02:03:46.656 --> 02:03:48.656
Doug, actually, pointed out in 
our 

02:03:49.659 --> 02:03:51.659
documentation

02:03:56.948 --> 02:03:59.391
something I hadn't practiced. It
turns out to be handy but can 

02:03:59.392 --> 02:04:03.735
also be a gotcha. You can put 
whatever you want in your 

02:04:05.365 --> 02:04:06.848
functions directory and when you
deploy your functions, all of 

02:04:06.849 --> 02:04:08.885
those files are available to 
you. You can access them 

02:04:08.886 --> 02:04:12.343
locally. But if you want to 
write, you can write in the temp

02:04:12.344 --> 02:04:16.421
directory. But you want to use 
platform independent paths so 

02:04:16.422 --> 02:04:19.329
you can test locally and on the 
server even if you have windows 

02:04:19.330 --> 02:04:21.330
locally.

02:04:26.110 --> 02:04:28.110
Normally, you create a temp file
like 

02:04:29.327 --> 02:04:33.922
this and then also need to be 
careful to know that the local 

02:04:33.923 --> 02:04:35.923
files might be there next time. 
Or they might not. 

02:04:37.424 --> 02:04:39.667
They're good for, like, caching 
something. But if you don't need

02:04:39.668 --> 02:04:41.668
them, you should delete them.

02:04:43.185 --> 02:04:44.416
Because it's an in-memory file 
system, it'll chew up your 

02:04:44.417 --> 02:04:47.463
memory. It's super fast and 
that's great. But you want to 

02:04:47.464 --> 02:04:51.757
clean them up. So you want to 
make sure after whatever you do,

02:04:51.758 --> 02:04:53.758
you delete the file. Unless you 
really want to keep it there 

02:04:55.217 --> 02:04:57.217
for, you know, you're going to 
reuse it next time. 

02:05:00.543 --> 02:05:02.982
So in summary cloud functions is
server side code without 

02:05:02.983 --> 02:05:04.983
servers, we love it for that.

02:05:07.544 --> 02:05:10.392
Most people use it for core app 
logic or most of the things 

02:05:10.393 --> 02:05:12.393
we've talked about today.

02:05:13.597 --> 02:05:18.567
It's also like our user, driving
user growth example. You can 

02:05:18.568 --> 02:05:20.568
easily add features when your 
app's in motion.

02:05:22.898 --> 02:05:26.167
   &gt;&gt; DOUG STEVENSON: Without 
publishing your app, again. 

02:05:29.054 --> 02:05:31.106
&gt;&gt; SARAH ALLEN: And also great 
for back-end jobs. 

02:05:32.322 --> 02:05:34.322
&gt;&gt; DOUG STEVENSON: That's how we
built our app.

02:05:36.017 --> 02:05:38.017
A total of five Firebase and 
Cloud features.

02:05:40.901 --> 02:05:43.151
Authentication for log-in, 
Firestore, cloud storage for our

02:05:43.152 --> 02:05:45.200
images and Cloud functions to do
things on the backend in 

02:05:46.642 --> 02:05:47.663
response to events that happen 
in our system. This is pretty 

02:05:47.664 --> 02:05:49.664
easy. This is pretty standard.

02:05:52.567 --> 02:05:54.404
Application architecture for 
what I would consider 

02:05:54.405 --> 02:05:56.866
development of a mobile app in 
2018. This is, I think, the way 

02:05:56.867 --> 02:06:01.056
things will go for a lot of 
developers. If you're building a

02:06:01.057 --> 02:06:03.057
mobile app or web 

02:06:05.366 --> 02:06:07.623
app, I would urge you to 
consider. You don't stand up 

02:06:07.624 --> 02:06:12.351
servers, don't log into servers,
don't have passwords, don't have

02:06:12.352 --> 02:06:14.600
configurations. 
    That's all you have to do to

02:06:14.601 --> 02:06:17.132
build an app these days. That's 
all the content we have.

02:06:21.005 --> 02:06:23.005
We will be in the tent if you 
want to ask questions.

02:06:25.077 --> 02:06:26.330
In the tent across the way and 
we'll see you over there soon. 

02:06:26.331 --> 02:06:28.331
Thanks.

02:06:48.148 --> 02:06:50.387
session. Brand ambassadors will 
assist with 

02:06:53.542 --> 02:06:55.387
directing you through the 
designated exits. We'll be 

02:06:55.388 --> 02:06:57.723
making room for those registered
for the next session. If you've 

02:06:57.724 --> 02:06:59.765
registered for the next session 
in this room, we ask that you 

02:07:01.804 --> 02:07:03.427
please clear the room and return
via the registration line 

02:07:03.428 --> 02:07:05.428
outside. Thank you.

02:22:09.567 --> 02:22:11.567
the seats near the front of the 
room. Thank you.

02:26:18.044 --> 02:26:21.321
   &gt;&gt; JAMES BIRNEY: All right, 
good morning, everybody, how's 

02:26:21.322 --> 02:26:23.322
everyone doing today? Yeah? 
Good. All right.

02:26:32.051 --> 02:26:34.051
Well, welcome to Google I/O, my 
name is 

02:26:35.063 --> 02:26:37.063
Eitan

02:26:38.409 --> 02:26:41.866
Marder-Epstein. How many of you 
are familiar with Augmented 

02:26:41.867 --> 02:26:43.867
Reality in general?

02:26:46.004 --> 02:26:48.004
Okay.

02:26:54.197 --> 02:26:55.618
I'll give a quick refresher 
about augmented reality for 

02:26:55.619 --> 02:26:59.496
those of you who maybe aren't 
quite familiar with it. And 

02:26:59.497 --> 02:27:01.497
especially how augmented reality

02:27:03.607 --> 02:27:04.630
relates to smartphones which, 
which is something we're excited

02:27:04.631 --> 02:27:06.631
about.

02:27:14.146 --> 02:27:17.417
    I need my clicker. I'm going
to go over here to get the 

02:27:18.230 --> 02:27:20.230
presentation started. But off we
go.

02:27:27.653 --> 02:27:31.119
So, smartphone AR stems 
fromfamiliar with Augmented 

02:27:27.653 --> 02:27:31.653
Reality in general? Okay. I'll 
give a quick refresher about 

02:27:27.653 --> 02:27:31.519
augmented reality for those of 
you who maybe aren't quite 

02:27:27.653 --> 02:27:31.919
familiar with it. And especially
how augmented reality relates to

02:27:27.653 --> 02:27:31.186
smartphones, which is something 
we're excited about. 

02:27:27.653 --> 02:27:31.386
I need my clicker. I'm going to 
go over here to get the 

02:27:27.653 --> 02:27:31.919
presentation started. But off we
go. So, smartphone AR stems from

02:27:27.653 --> 02:27:29.933
this observation that over the 
last decade our phones have 

02:27:29.934 --> 02:27:32.781
gotten immensely more powerful. 
CPUs and GPUs have improved a 

02:27:32.782 --> 02:27:34.782
lot.

02:27:42.525 --> 02:27:45.188
Until very recently it was 
largely unchanged and limited. 

02:27:45.189 --> 02:27:46.806
If you point your phone at this 
table, it will allow you to take

02:27:46.807 --> 02:27:49.485
a picture of the table or even a
video of your friend climbing 

02:27:49.486 --> 02:27:52.340
over the table. But your phone 
wouldn't really have an 

02:27:53.997 --> 02:27:56.241
understanding of the geometry of
the table of its position 

02:27:56.242 --> 02:27:58.242
relative to the table as it 
moves through space. 

02:28:00.349 --> 02:28:02.349
And so, what augmented reality 
seeks 

02:28:04.380 --> 02:28:06.380
to do on smartphones

02:28:10.438 --> 02:28:11.882
is takes the advances and 
leverages it to bring new 

02:28:11.883 --> 02:28:13.551
capabilities to your phone. And 
to take your phone from beyond 

02:28:13.552 --> 02:28:15.552
just 

02:28:16.836 --> 02:28:18.265
the screen, beyond its own 
little box to expand it to 

02:28:18.266 --> 02:28:20.733
understanding the world around 
it. 

02:28:22.161 --> 02:28:23.798
Now, when my phone looks at the 
table, it can see there's a 

02:28:23.799 --> 02:28:26.635
surface there, there are chairs 
next to it. And as I move 

02:28:26.636 --> 02:28:28.668
through the environment, my 
phone can actually track its 

02:28:28.669 --> 02:28:31.990
position as it moves. And we 
think at Google that augmented 

02:28:33.707 --> 02:28:35.332
reality is really exciting and 
we've been excited to see some 

02:28:35.333 --> 02:28:37.333
of the stuff that you've built.

02:28:39.472 --> 02:28:41.332
And we've kind of categorized it
into two main buckets where we 

02:28:41.333 --> 02:28:43.787
think augmented reality can be 
really, really great for 

02:28:43.788 --> 02:28:45.788
applications. 

02:28:47.454 --> 02:28:49.694
So the first bucket is we think 
that augmented reality can be 

02:28:49.695 --> 02:28:52.968
useful on smartphones. So 
recently, I was remodelling my 

02:28:53.392 --> 02:28:55.392
kitchen.

02:28:56.651 --> 02:28:58.651
Another poll, how many of you 
have 

02:29:00.339 --> 02:29:01.962
remodelled anything in a house? 
If you've done that, you know 

02:29:01.963 --> 02:29:05.019
that measurements is a real 
pain. And what I needed to do 

02:29:05.020 --> 02:29:07.020
was to measure 

02:29:09.719 --> 02:29:12.639
for a back splash, we were 
buying subway tile for our 

02:29:12.640 --> 02:29:17.151
kitchen. I pulled out my phone, 
went to my counter and measured 

02:29:17.152 --> 02:29:20.620
from point A to B to C and I did
all of that without moving any 

02:29:20.621 --> 02:29:22.861
of my appliances where I would 
have normally had to move in 

02:29:22.862 --> 02:29:26.536
order to get an accurate 
measurement with my tape 

02:29:26.537 --> 02:29:29.179
measure. 
    AR can be useful in 

02:29:29.180 --> 02:29:32.462
providing a better, geometric 
understanding about your 

02:29:32.463 --> 02:29:34.463
environment.

02:29:35.542 --> 02:29:38.394
It can also be useful for 
shopping applications. Recently,

02:29:38.395 --> 02:29:41.272
we had some very old chairs at 
my house. And my partner and I 

02:29:41.273 --> 02:29:43.742
were looking to replace them, 
kind of like these customaries 

02:29:43.743 --> 02:29:46.183
here and we were getting into a 
debate over which chairs we 

02:29:46.184 --> 02:29:50.935
liked more. And so, with 
augmented reality, we were able 

02:29:50.936 --> 02:29:52.362
to take a 3D model of a chair, 
place it in the environment, see

02:29:52.363 --> 02:29:54.363
the exact size and scale and 
color. 

02:29:55.231 --> 02:29:58.127
And we could have our arguments 
about inevitably what kind of 

02:29:58.128 --> 02:30:02.016
chair we would have at home 
rather than exposing everyone to

02:30:02.017 --> 02:30:03.238
it at the store and be more 
targeted about how we made our 

02:30:03.239 --> 02:30:05.239
purchase 

02:30:07.100 --> 02:30:10.683
and even buy this furniture 
online and be more comfortable 

02:30:10.684 --> 02:30:13.358
with it. That's how AR can 
provide more utility in your 

02:30:13.359 --> 02:30:15.359
life.

02:30:17.476 --> 02:30:19.476
But AR can also be fun. Imagine 
a character running across the 

02:30:21.367 --> 02:30:24.052
floor, jumping on to this chair 
and table. Or, me sitting in one

02:30:24.053 --> 02:30:27.970
of these chairs and having the 
floor drop out from under me to 

02:30:27.971 --> 02:30:29.998
create an ice fishing game. 
    Ice fishing sounds a little 

02:30:29.999 --> 02:30:33.476
bit boring, but I can tell you 
that in this game, it's actually

02:30:33.477 --> 02:30:35.477
a lot of fun.

02:30:36.554 --> 02:30:38.554
And AR can also be used for 
creative expression.

02:30:42.040 --> 02:30:43.916
So here, now in your pocket, you
have a lot of ability to go out 

02:30:43.917 --> 02:30:45.917
and create new 

02:30:47.009 --> 02:30:49.262
things that were previously only
capable to be created by 

02:30:49.263 --> 02:30:51.548
professionals. So you can 
generate computer generated 

02:30:53.398 --> 02:30:55.020
content on the go, on the fly. 
    You can take your favorite 

02:30:55.021 --> 02:30:58.786
character and put them into your
scene and have your friend pose 

02:30:58.787 --> 02:31:00.787
next to them.

02:31:01.845 --> 02:31:03.471
Or you can take pizza or hot 
dogs or your favorite food items

02:31:03.472 --> 02:31:05.922
as we show here and put them on 
the table in front of you. 

02:31:08.571 --> 02:31:10.635
But now, you have the amazing 
video editing capability in your

02:31:10.636 --> 02:31:12.636
pocket.

02:31:13.714 --> 02:31:16.421
And for those of you who have 
seen our AR stickers But now, 

02:31:16.422 --> 02:31:20.022
you have the amazing video 
editing capability in your 

02:31:16.422 --> 02:31:20.288
pocket. And for those of you who
have seen our AR stickers 

02:31:16.422 --> 02:31:17.850
application on the Google pixel 
phone, you know what I'm talking

02:31:17.851 --> 02:31:21.304
about. And for those who 
haven't, check it out. It's cool

02:31:21.305 --> 02:31:23.305
to have this creation power in 
your pocket. 

02:31:24.829 --> 02:31:26.829
So that's great.

02:31:28.346 --> 02:31:30.404
AR can be useful, AR can be fun,
how do you actually build 

02:31:30.405 --> 02:31:33.669
applications for AR? How do you 
get involved as developers? This

02:31:33.670 --> 02:31:35.670
is the developer conference. 

02:31:37.559 --> 02:31:40.867
So how many of you are familiar 
with ARCore? All right. About 

02:31:40.868 --> 02:31:42.868
half of you.

02:31:45.558 --> 02:31:46.799
So ARCore is Google's 
development platform for 

02:31:46.800 --> 02:31:50.068
augmented reality. We want to 
make it easy for you to build 

02:31:50.069 --> 02:31:52.290
applications that take advantage
of the new capabilities that 

02:31:52.291 --> 02:31:56.001
phones provide. Of the ability 
of phones to see and understand 

02:31:56.002 --> 02:31:58.659
their environments and to build 
applications that actually react

02:31:59.331 --> 02:32:01.331
to this understanding. 

02:32:06.015 --> 02:32:08.015
And ARCore was launched a few 
months ago.

02:32:11.666 --> 02:32:13.666
The first is what we call motion
tracking.

02:32:17.846 --> 02:32:19.846
Imagine taking the scare crow 
from the 

02:32:21.553 --> 02:32:23.377
Wizard of Oz and place in front 
of a taco stand and make it seem

02:32:23.378 --> 02:32:26.058
like he's waiting in line for 
tacos. 

02:32:27.898 --> 02:32:29.898
If I look at the scarecrow with 
my 

02:32:31.220 --> 02:32:32.856
phone, ARCore understands its 
position relative to a virtual 

02:32:32.857 --> 02:32:34.857
object I've placed in space.

02:32:36.582 --> 02:32:38.212
As I move a meter forward, the 
phone knows I've moved ha meter 

02:32:38.213 --> 02:32:41.260
in this direction. And as I turn
left, the phone also knows that.

02:32:44.111 --> 02:32:46.111
It's able to track its motion as
I move through space.

02:32:47.584 --> 02:32:49.820
And now, if I combine that with 
my desire to place the scare 

02:32:49.821 --> 02:32:51.821
crow a meter 

02:32:55.816 --> 02:32:57.816
in front of me, I can put the --
I can 

02:32:59.637 --> 02:33:01.637
change where I'm rend

02:33:07.384 --> 02:33:09.657
ing that is to register virtual 
objects to a physical seen in a 

02:33:09.658 --> 02:33:11.658
natural and intuitive way. 

02:33:13.761 --> 02:33:15.397
The second capability that 
ARCore provides is lighting 

02:33:15.398 --> 02:33:17.398
estimation.

02:33:20.127 --> 02:33:22.127
Continuing our Wizard of Oz 
theme.

02:33:23.245 --> 02:33:25.245
We want to make the lion afraid 
because it's cowardly.

02:33:27.310 --> 02:33:29.965
Here, the AR core is looking at 
the camera feed, estimating the 

02:33:29.966 --> 02:33:31.966
real world lighting of your 
environments.

02:33:37.568 --> 02:33:39.850
And with that estimate, ARcore 
can light characteristics in a 

02:33:39.851 --> 02:33:44.323
realistic fashion. The virtual 
objects that you're putting in 

02:33:44.324 --> 02:33:46.571
your scene look correct. You'll 
see the tone on the lion change 

02:33:48.193 --> 02:33:49.855
when it goes from light to dark.
And you can even script 

02:33:49.856 --> 02:33:51.856
interactions 

02:33:53.545 --> 02:33:55.370
for your characters, in this 
case making the lion afraid when

02:33:55.371 --> 02:33:58.468
the lights go off. 
    And the third capability 

02:33:58.469 --> 02:34:00.469
that ARCore provides is 
environment to understanding.

02:34:03.782 --> 02:34:06.042
So here, as ARCore is moving 
around the world and tracks its 

02:34:06.043 --> 02:34:08.043
motion and also estimating the 
lighting of the environment.

02:34:11.763 --> 02:34:13.763
The ARCore is recognizing 
surfaces.

02:34:15.032 --> 02:34:16.882
Might recognize this plane below
me, which is the ground or this 

02:34:16.883 --> 02:34:18.883
surface 

02:34:20.140 --> 02:34:22.854
here, which is the table or 
maybe this vertical surface 

02:34:22.855 --> 02:34:24.855
behind me and allows you to 
place objects that are grounded 

02:34:24.901 --> 02:34:26.901
to reality. 

02:34:28.013 --> 02:34:29.644
If we want to place the Android 
character on this table, I can 

02:34:29.645 --> 02:34:32.899
detect the surface and place my 
virtual character on a physical 

02:34:32.900 --> 02:34:36.013
object in the world. 
    Those are three 

02:34:36.014 --> 02:34:38.242
capabilities, motion tracking, 
lighting estimation and 

02:34:38.850 --> 02:34:40.850
environment understanding.

02:34:44.168 --> 02:34:45.695
And when you combine them 
together it allows you to bill 

02:34:45.696 --> 02:34:48.753
on these experiences that were 
previously impossible. That 

02:34:48.754 --> 02:34:51.623
bring the virtual and physical 
worlds together and meld them 

02:34:51.624 --> 02:34:53.624
into a new 

02:34:56.113 --> 02:34:58.113
reality that enables people to 
see in new and different light.

02:35:12.830 --> 02:35:15.286
You have worked really, really 
hard. And with help from our 

02:35:15.287 --> 02:35:17.287
partners in our 

02:35:21.671 --> 02:35:23.504
Android OEM eco system, today, 
ARCore is supported on 100 

02:35:23.505 --> 02:35:26.200
million devices and we're 
working to increase that number 

02:35:26.844 --> 02:35:28.873
every single day. 
    We believe that augmented 

02:35:28.874 --> 02:35:32.950
reality is a next shift in 
computing. And that soon 

02:35:32.951 --> 02:35:34.951
everyone will take for granted 
that this power is in their P 

02:35:35.006 --> 02:35:37.006
devices.

02:35:40.134 --> 02:35:43.442
devices. That's our scale, but 
we're also interested in scaling

02:35:43.443 --> 02:35:45.443
the capabilities of ARCore.

02:35:48.210 --> 02:35:49.683
We want to teach ARCore to do 
new and interesting things and 

02:35:49.684 --> 02:35:51.684
that's what the rest of the talk
is going to be. 

02:35:54.394 --> 02:35:56.234
Today, new things into AR Core. 
And the first is we're 

02:35:56.235 --> 02:36:00.206
announcing some new capabilities
for AR Core, improving what the 

02:36:00.207 --> 02:36:02.207
devices can do.

02:36:03.667 --> 02:36:05.509
And those are Augmented Images 
and Cloud Anchors and we'll talk

02:36:05.510 --> 02:36:08.995
about them in the talk today. 
    And then, we're also 

02:36:08.996 --> 02:36:13.081
announcing new tools for ARCore.
How you can use augmented 

02:36:13.082 --> 02:36:16.618
reality on the web, which we 
think is really exciting and you

02:36:16.619 --> 02:36:18.878
can check out a talk to that 
later today at 12:30 p.m.

02:36:22.620 --> 02:36:24.620
And another is how you can more 
easily 

02:36:25.676 --> 02:36:27.676
write 3D applications for 
Android and AR specifically.

02:36:29.948 --> 02:36:31.948
We've introduced our seam form 
library, 

02:36:33.473 --> 02:36:35.837
which is for 3D rendering on 
Android and encourage you to 

02:36:35.838 --> 02:36:37.838
check out that talk at 5:30 
today. 

02:36:39.304 --> 02:36:40.967
So enough about the preamble. 
We're going to get into the meat

02:36:40.968 --> 02:36:42.968
of it 

02:36:44.048 --> 02:36:46.048
and talk about what's new in 
ARCore and 

02:36:47.630 --> 02:36:50.300
kick it off with our first 
feature Augmented Images. They 

02:36:50.301 --> 02:36:52.301
stem from your feedback.

02:36:54.478 --> 02:36:56.499
We heard you as you develop 
Augmented Realities applications

02:36:56.500 --> 02:36:59.824
ask us, hey, AR is great. 
Wouldn't it be better if we 

02:36:59.825 --> 02:37:03.967
could also trigger augmented 
reality experiences off of 2D 

02:37:03.968 --> 02:37:06.424
images in our environment, like,
movie posters or textbooks? 

02:37:09.081 --> 02:37:11.081
And so augmented images seek to 
do just that.

02:37:13.636 --> 02:37:15.636
Augmented images provide a 
mechanism to 

02:37:17.804 --> 02:37:19.804
take a 2D texture in a world and
make it 

02:37:21.521 --> 02:37:23.521
more engaging by expanding it to
a 3D interactive object.

02:37:25.593 --> 02:37:27.635
And to show a concrete example 
of this, consider the case where

02:37:27.636 --> 02:37:29.636
we have new 

02:37:30.920 --> 02:37:32.920
children's toy called castle 
toy, I think. 

02:37:35.677 --> 02:37:37.749
And we have told AR Core, hey, 
we want you to recognize the 

02:37:37.750 --> 02:37:41.611
surface of this castle toy box.
take a 2D texture in a world and

02:37:41.612 --> 02:37:45.412
make it more engaging by 
expanding it to a 3D interactive

02:37:41.612 --> 02:37:45.678
object. And to show a concrete 
example of this, consider the 

02:37:41.612 --> 02:37:45.078
case where we have new 
children's toy called castle 

02:37:41.612 --> 02:37:44.545
toy, I think. 
    And we have told AR Core, 

02:37:41.612 --> 02:37:45.678
hey, we want you to recognize 
the surface of this castle toy 

02:37:41.612 --> 02:37:42.426
box. Now, as part of the 
product, you can hold up your 

02:37:42.427 --> 02:37:44.427
phone to it and you can 

02:37:45.491 --> 02:37:47.943
actually have an immersive 
experience come out of that box,

02:37:47.944 --> 02:37:50.183
a more engaging experience for 
your product. 

02:37:52.428 --> 02:37:55.110
Augmented images allow you to 
detect these kinds of textures 

02:37:55.111 --> 02:37:59.816
and then scripts, behaviors and 
then take this 2D flat surface 

02:37:59.817 --> 02:38:02.518
and turn it into 3D, which we 
think is really exciting. And 

02:38:02.519 --> 02:38:04.568
it's based on your feedback. You
told us that you wanted this 

02:38:05.373 --> 02:38:07.662
feature and now we have it. 
    So that's the feature in a 

02:38:07.663 --> 02:38:11.156
nutshell. But I want to tell you
about how it works and also, how

02:38:11.157 --> 02:38:13.157
you can use it in your 
applications.

02:38:16.652 --> 02:38:17.892
So augmented images 
fundamentally work in three 

02:38:17.893 --> 02:38:19.893
major steps.

02:38:21.588 --> 02:38:23.588
The first step is you need to 
tell 

02:38:26.352 --> 02:38:28.199
ARCore what images you're 
interested in. And there are two

02:38:28.200 --> 02:38:31.048
ways you can do this. The first 
way is to tell ARCore that 

02:38:34.135 --> 02:38:37.248
you want to detect certain kinds
of images in realtime. You could

02:38:37.249 --> 02:38:39.316
download from a server, bundled 
into your application.

02:38:43.325 --> 02:38:45.142
And you tell ARCore at run time 
that, hey, please load this 

02:38:45.143 --> 02:38:47.408
image, learn how to detect it in
the scene and tell me when you 

02:38:47.409 --> 02:38:49.409
do. 

02:38:51.110 --> 02:38:52.933
The second option is to tell 
ARCore in advance where we 

02:38:52.934 --> 02:38:55.804
provided tools on your desktop 
computer can take up to a 

02:38:58.868 --> 02:39:01.153
thousand images and train ARCore
on them in an offline fashion 

02:39:01.154 --> 02:39:03.154
saying I would like you to be 
able to recognize any of 

02:39:07.694 --> 02:39:09.694
these a thousand images when I 
run my application on device.

02:39:13.840 --> 02:39:16.750
The next step, we've trained 
ARcore to run these images. We 

02:39:16.751 --> 02:39:18.204
want to show as seen and have it
detect the images that we've 

02:39:18.205 --> 02:39:20.205
trained. 

02:39:21.671 --> 02:39:24.119
So now, when ARCore moves around
the environment with your phone,

02:39:24.120 --> 02:39:27.785
ARCore will also look for 
textures in the environment and 

02:39:27.786 --> 02:39:29.786
match those to the textures you 
trained on.

02:39:31.674 --> 02:39:32.891
And when it finds a match, 
ARCore provides you information 

02:39:32.892 --> 02:39:34.892
on that match 

02:39:37.360 --> 02:39:39.360
with the third step, which is a 
tracked object.

02:39:50.594 --> 02:39:51.412
So this point that's been 
planes, both horizontal and 

02:39:51.413 --> 02:39:53.413
vertical.

02:39:55.086 --> 02:39:56.946
But it can also give you points 
of interest you can attach to. 

02:39:56.947 --> 02:40:01.487
    And now, an augmented image 
is another tracked object. You 

02:40:01.488 --> 02:40:05.364
use it just like you would use 
any plane or any points. And you

02:40:05.365 --> 02:40:09.265
can attach your virtual contents
to the detection of the physical

02:40:09.266 --> 02:40:11.266
object in the world. 
    So that's it. Really simple.

02:40:11.930 --> 02:40:13.930
Three simple steps.

02:40:15.182 --> 02:40:17.182
Number one, tell ARCore what 
you're looking for.

02:40:18.716 --> 02:40:21.409
Number two, have ARCore detect 
objects in the scene. And number

02:40:21.410 --> 02:40:23.261
three, attach your virtual 
content to these physical 

02:40:23.262 --> 02:40:25.515
objects. 
    And because this is a 

02:40:25.516 --> 02:40:28.163
developer conference, I want to 
show you the same steps in code.

02:40:32.230 --> 02:40:34.230
We're going to go through them 
in Java really quick.

02:40:37.350 --> 02:40:40.008
But this is the same for Unity 
and Unreal. We'll go through the

02:40:40.009 --> 02:40:42.681
same exact steps, again. 
    Step number one, you need to

02:40:42.682 --> 02:40:47.403
add images to AR Core's memory. 
You need to tell it what images 

02:40:47.404 --> 02:40:49.404
it's interested in.

02:40:51.665 --> 02:40:53.665
And so, here we're

02:40:55.386 --> 02:40:57.033
creating image base and adding 
an one, you need to add images 

02:40:57.034 --> 02:41:00.834
to AR Core's memory. You need to
tell it what images it's 

02:40:57.034 --> 02:41:00.900
interested in. And so, here 
we're creating image base and 

02:40:57.034 --> 02:40:58.865
adding an image to it. And doing
it realtime on the phone. 

02:40:58.866 --> 02:41:00.866
This is a little bit expensive, 
you 

02:41:02.485 --> 02:41:04.485
have to pay a

02:41:06.447 --> 02:41:07.480
-- I'll show you how to create 
it with alternate flow on the 

02:41:07.481 --> 02:41:09.481
computer.

02:41:12.212 --> 02:41:13.224
Once AR Core has a database of 
images, we go to the second 

02:41:13.225 --> 02:41:15.895
step. The second step is always 
looking for those images for 

02:41:15.896 --> 02:41:18.345
you. And you can get it from the
AR frame.

02:41:22.274 --> 02:41:23.503
Each and every frame that AR 
sees or ARCore sees in the 

02:41:23.504 --> 02:41:25.359
world. 
    Now, you've got a list in 

02:41:25.360 --> 02:41:28.497
the scene. And you want to 
attach virtual content to it.

02:41:31.952 --> 02:41:34.788
So that brings me to the third 
step. So for step number three, 

02:41:34.789 --> 02:41:38.255
you just take the augmented 
images that the augmented image 

02:41:38.256 --> 02:41:40.256
that you want.

02:41:41.295 --> 02:41:44.177
And you create an anchor off of 
it and then, you can attach 

02:41:44.178 --> 02:41:47.643
virtual content to the anchor 
and the same you would for any 

02:41:47.644 --> 02:41:49.517
kind of plane detection or point
detection that you've been used 

02:41:49.518 --> 02:41:51.764
to in the past. 
    So that's it. Three simple 

02:41:51.765 --> 02:41:53.765
steps.

02:41:55.237 --> 02:41:56.880
And if you want to do the 
precomputation on the computer 

02:41:56.881 --> 02:41:58.881
disk, this is what you run.

02:42:00.767 --> 02:42:03.033
So this is a command called 
build DB, and you can pass up to

02:42:03.034 --> 02:42:05.034
a thousand images 

02:42:06.375 --> 02:42:09.046
into the command and it'll build
in advance that you can, then, 

02:42:09.047 --> 02:42:13.188
load in ARCore using this code. 
This loads the database from 

02:42:13.189 --> 02:42:17.117
file, pulls it in. It's 
computationally efficient.

02:42:20.614 --> 02:42:21.637
ARCore has done the work it 
needs to recognize the images 

02:42:21.638 --> 02:42:25.899
later. And now, you can go off 
and running with the other two 

02:42:25.900 --> 02:42:29.785
steps we showed before detecting
the image and replacing content 

02:42:29.786 --> 02:42:33.670
relative to it. 
    Pretty simple. Now, I want 

02:42:33.671 --> 02:42:35.671
to show you a demo of this in 
action.

02:42:37.144 --> 02:42:41.277
So we're going tothis code. This
loads the database from file, 

02:42:37.144 --> 02:42:40.144
pulls it in. It's 
computationally efficient. 

02:42:37.144 --> 02:42:41.010
ARCore has done the work it 
needs to recognize the images 

02:42:37.144 --> 02:42:41.277
later. And now, you can go off 
and running with the other two 

02:42:37.144 --> 02:42:41.410
steps we showed before detecting
the image and replacing content 

02:42:37.144 --> 02:42:40.277
relative to it. 
    Pretty simple. Now, I want 

02:42:37.144 --> 02:42:41.277
to show you a demo of this in 
action. So we're going to switch

02:42:37.144 --> 02:42:39.144
to the pixel phone here.

02:42:42.693 --> 02:42:44.693
And we're going to run this 
augmented images demo. 

02:42:47.605 --> 02:42:49.677
So here, we've actually trained 
ARCore to recognize this poster 

02:42:49.678 --> 02:42:54.787
on the wall. And so, when I look
at the poster. You can see that 

02:42:54.788 --> 02:42:59.124
it fades out and goes from 2D 
into 3D. And now, as I move, the

02:42:59.125 --> 02:43:01.125
perspective that I see changes.

02:43:11.691 --> 02:43:14.739
I can make it more engaging and 
immersive. That's the demo. 

02:43:14.740 --> 02:43:16.740
Pretty simple.

02:43:24.544 --> 02:43:25.765
We think that augmented images 
have a lot more potential, as 

02:43:25.766 --> 02:43:27.766
well.

02:43:29.222 --> 02:43:31.107
So the first use case is 
education. Imagine a textbook 

02:43:31.108 --> 02:43:33.346
coming to life in front of you 
or going into a museum tour 

02:43:35.653 --> 02:43:37.282
where artwork on the wall jumps 
out at you and gives you more 

02:43:37.283 --> 02:43:40.764
information about the artists or
maybe their progression as they 

02:43:40.765 --> 02:43:43.233
were sketching a painting. 
    We think augmented images 

02:43:43.234 --> 02:43:46.892
are useful for advertising. 
Advertising is all about 

02:43:46.893 --> 02:43:50.561
engagement. Imagine being at a 
movie theater and holding your 

02:43:50.562 --> 02:43:52.401
phone up to a movie poster and 
having content come out or 

02:43:52.402 --> 02:43:56.478
telling you showtimes. Imagine 
being at a bus stop with ha 

02:43:59.535 --> 02:44:01.188
little bit of time to kill and 
engaging with the ad you have on

02:44:01.189 --> 02:44:03.189
the side of the bus stop 
station. 

02:44:04.275 --> 02:44:05.927
We think augmented images can 
also be useful for the products 

02:44:05.928 --> 02:44:07.928
that you're advertising.

02:44:10.612 --> 02:44:12.612
You can build products that meld
the 

02:44:13.666 --> 02:44:15.666
physical and digital worlds that
bring both together.

02:44:21.218 --> 02:44:23.064
It could be a how-to guide for 
your coffee machine as you try 

02:44:23.065 --> 02:44:25.065
to make coffee 

02:44:26.539 --> 02:44:28.771
for the first time with your 
expensive espresso machine and 

02:44:28.772 --> 02:44:30.772
have no idea what to do. 

02:44:35.544 --> 02:44:37.382
We think Augmented Images, we're
excited to see what you build 

02:44:37.383 --> 02:44:41.860
with them. And we are not done, 
yet. We're going to talk about 

02:44:41.861 --> 02:44:43.861
one more feature today, and for 
that, I'm going 

02:44:47.386 --> 02:44:49.386
to bring up James Birney and 
he's going 

02:44:50.474 --> 02:44:51.722
to talk to you about Cloud 
Anchors, and I think you'll 

02:44:51.723 --> 02:44:54.615
really enjoy it. Come on up, 
James. 

02:44:55.641 --> 02:44:57.474
[ Applause ] 
   &gt;&gt; JAMES BIRNEY: Real quick, 

02:44:57.475 --> 02:45:01.557
before we get started, you've 
been sitting for a while. We're 

02:45:01.558 --> 02:45:03.200
going to do the wave real quick 
going across the room. All 

02:45:03.201 --> 02:45:05.201
right? You ready?

02:45:08.837 --> 02:45:10.837
Laptops, ready

02:45:16.618 --> 02:45:18.618
? Three, two, one, ARCore

02:45:24.001 --> 02:45:26.001
. There you go, guys. 

02:45:31.575 --> 02:45:33.672
Like Eitan mentioned, I'm 
talking about Cloud Anchors.

02:45:38.167 --> 02:45:40.853
Tell me if you saw the 
presentation on Cloud Anchors 

02:45:40.854 --> 02:45:43.308
yesterday. You're going to want 
to immediately start building.

02:45:48.909 --> 02:45:51.752
So before we hop into Cloud 
Anchors, it's important to start

02:45:51.753 --> 02:45:55.011
with where AR is today. 
    Could I get a quick hand if 

02:45:55.012 --> 02:45:57.012
you've 

02:45:59.544 --> 02:46:00.756
BIMT built an AR app before. 
That's roughly about half of 

02:46:00.757 --> 02:46:02.757
you. For the other half, what 
happens when 

02:46:06.068 --> 02:46:07.316
-- let's say we're going to 
build an app or play some 

02:46:07.317 --> 02:46:09.317
dinosaurs.

02:46:12.636 --> 02:46:15.495
They're going to interact. The 
way that we would do that in an 

02:46:15.496 --> 02:46:17.496
AR app today is plant an anchor.

02:46:24.311 --> 02:46:26.311
Then the T-rex and

02:46:29.697 --> 02:46:31.697
and that becomes your reference 
frame. 

02:46:33.789 --> 02:46:36.031
Let's say he's going to come 
back up on stage, he's not going

02:46:36.032 --> 02:46:38.032
to, that's a long walk.

02:46:40.092 --> 02:46:42.092
He goes ahead and creates a 
separate 

02:46:46.597 --> 02:46:48.597
dinosaur app and places a bunch 
of

02:46:53.269 --> 02:46:57.760
teradactyls. The app is running 
a different reality. A different

02:46:57.761 --> 02:46:59.761
augmented reality than the app 
we have over here.

02:47:01.877 --> 02:47:05.368
And the reason why, the anchors 
can't talk to each other. This 

02:47:05.369 --> 02:47:08.423
is what cloud anchor solves. 
    We give you the ability to 

02:47:08.424 --> 02:47:10.424
create a shared reference frame.

02:47:18.686 --> 02:47:21.134
Anchor and the offsets, which 
now, we can have a common anchor

02:47:21.135 --> 02:47:23.135
in the middle and all of the AR 
content.

02:47:26.222 --> 02:47:30.520
So everything are able to 
interact and play. And you can 

02:47:30.521 --> 02:47:32.521
create these funny 

02:47:35.431 --> 02:47:37.431
experiences where not only is my
content 

02:47:38.940 --> 02:47:40.562
interacting with Eitan's 
content, but he can control mine

02:47:40.563 --> 02:47:42.563
and I can control his. 

02:47:43.861 --> 02:47:45.280
That's an abstract thing where 
I'm moving my hands around on 

02:47:45.281 --> 02:47:47.281
stage.

02:47:49.987 --> 02:47:53.491
A more concrete example would be
our lineup. Which is an 

02:47:53.492 --> 02:47:55.362
experimental app that we as 
Google built. It draws a single 

02:47:55.363 --> 02:47:57.363
line in space.

02:47:59.879 --> 02:48:01.879
And what we added to it is the 
ability 

02:48:02.950 --> 02:48:04.950
to do not just one artist, but 
multiple 

02:48:07.275 --> 02:48:09.275
art IGSist, but multiple 
artists.

02:48:16.537 --> 02:48:19.231
You can see multiple artists 
drawing together. You can see 

02:48:19.232 --> 02:48:21.232
the powerful experience you get 
out of this.

02:48:23.985 --> 02:48:26.027
Where no longer is it -- you're 
able to draw together. What one 

02:48:26.028 --> 02:48:28.028
person draws the line, you can 
build on top of that.

02:48:35.025 --> 02:48:37.066
I'll give it a second for the 
video to finish and you to 

02:48:37.067 --> 02:48:40.562
absorb what's going on. That's a
new concept. 

02:48:40.957 --> 02:48:46.702
Okay. So let's talk a little bit
about how we create these Cloud 

02:48:46.703 --> 02:48:50.991
Anchors. We've done an awful lot
of work to make it simple. It's 

02:48:50.992 --> 02:48:54.867
only a few steps. Let me walk 
you through them. Step one is --

02:48:54.868 --> 02:48:58.591
let's take in this example, we 
want to make our stick woman, 

02:48:58.592 --> 02:49:01.427
her name was going to be Alice. 
And Alice is going to place a 

02:49:01.428 --> 02:49:03.428
Cloud Anchor.

02:49:05.158 --> 02:49:07.389
Now, the verb we use to create a
Cloud Anchor is called hosting. 

02:49:07.390 --> 02:49:09.424
The reason why, we're going to 
host that native anchor up to 

02:49:09.425 --> 02:49:11.425
the cloud. 

02:49:13.490 --> 02:49:15.126
Some when we host that Cloud 
Anchor, the features, the visual

02:49:15.127 --> 02:49:17.127
features in the environment.

02:49:20.200 --> 02:49:22.475
So let's say that Alice is 
standing here. And as Alice is 

02:49:22.476 --> 02:49:24.476
looking at the table, 

02:49:26.228 --> 02:49:28.228
she places a Cloud Anchor or the
app 

02:49:29.290 --> 02:49:31.290
will place a Cloud Anchor for 
her.

02:49:32.992 --> 02:49:34.992
Do you like it? Thank you. 
Appreciate the one person.

02:49:37.673 --> 02:49:41.873
hosting. The reason why, we're 
going to host that native anchor

02:49:37.673 --> 02:49:40.939
up to the cloud. 
    Some when we host that Cloud

02:49:37.673 --> 02:49:41.939
Anchor, the features, the visual
features in the environment. So 

02:49:37.673 --> 02:49:41.939
let's say that Alice is standing
here. And as Alice is looking at

02:49:37.673 --> 02:49:41.739
the table, she places a Cloud 
Anchor or the app will place a 

02:49:37.673 --> 02:49:41.673
Cloud Anchor for her. Do you 
like it? Thank you. Appreciate 

02:49:37.673 --> 02:49:39.725
the one person. Okay. What the 
phone is going to extract from 

02:49:42.198 --> 02:49:45.059
the environment is all the 
points where these leaves come 

02:49:45.060 --> 02:49:48.311
to what the phone will see as 
contrast points. Where the 

02:49:48.312 --> 02:49:50.312
colors change, where the 
lighting changes. 

02:49:50.570 --> 02:49:52.813
So the edge of this table, the 
edge of this table cloth, every 

02:49:52.814 --> 02:49:56.721
point where the leaves kind of 
change. Those are the visual 

02:49:56.722 --> 02:49:58.776
features that get abstracted and
then get uploaded to the cloud.

02:50:02.441 --> 02:50:04.441
That, then, gets saved and 
processed.

02:50:05.521 --> 02:50:08.187
And when Alice gets back in a 
couple of seconds is that Cloud 

02:50:08.188 --> 02:50:11.440
Anchor. In that Cloud Anchor is 
a really important attribute.

02:50:14.520 --> 02:50:16.520
That attribute is the Cloud 
Anchor ID. 

02:50:17.209 --> 02:50:19.209
You can kind of think about the 

02:50:20.281 --> 02:50:22.753
Cloud Anchor ID as -- you can 
think about Cloud Anchors the 

02:50:22.754 --> 02:50:25.614
same way you think about a file.
Say you're going to save a file 

02:50:25.615 --> 02:50:29.752
to Google Drive. And when you 
save it, you need to create a 

02:50:29.753 --> 02:50:33.600
file name. We're going to 
create, essentially, that file 

02:50:33.601 --> 02:50:35.601
name or that ID for you. And 
that ID is the way that you're 

02:50:37.271 --> 02:50:39.271
going to reference it later. It 
would be hard to find the file 

02:50:40.761 --> 02:50:42.761
without knowing the name, right?

02:50:44.318 --> 02:50:46.318
The Cloud Anchor ID is the same 
concept. 

02:50:46.777 --> 02:50:48.777
How this comes into play is all 

02:50:50.044 --> 02:50:52.692
Alice needs to do to get Bob, 
our stick man over there to 

02:50:52.693 --> 02:50:54.693
connect to Alice's 

02:50:55.971 --> 02:50:57.971
cloud anchor is to -- excuse me,
to send 

02:51:00.060 --> 02:51:01.895
over that Cloud Anchor ID to 
Bob. And that's all she needs to

02:51:01.896 --> 02:51:04.959
send over. 
    Once Bob has the Cloud 

02:51:04.960 --> 02:51:06.960
Anchor ID, he 

02:51:08.414 --> 02:51:10.414
then uses the ID to -- and our 
verb here is resolve.

02:51:12.093 --> 02:51:13.529
And resolving will add the Cloud
Anchor ID to Bob's reference 

02:51:13.530 --> 02:51:17.002
frame. Let's say that Bob is 
standing right here, as well, he

02:51:17.003 --> 02:51:19.256
looks at the same area, the 
visual features that we'll get 

02:51:21.708 --> 02:51:23.756
uploaded to the Cloud, in the 
Cloud will match those visual 

02:51:23.757 --> 02:51:26.011
features against the visual 
features that Alice had 

02:51:26.620 --> 02:51:28.620
previously uploaded.

02:51:30.348 --> 02:51:31.569
And we will give Bob back a 
Cloud Anchor that will be 

02:51:31.570 --> 02:51:34.516
relative to where his device is.
Even though both devices are in 

02:51:36.622 --> 02:51:38.622
different locations, we'll 
create the 

02:51:40.897 --> 02:51:44.152
Cloud Anchor in a consistent 
physical location. You then have

02:51:44.153 --> 02:51:46.812
a shared reference frame. And 
then, at that point, we can 

02:51:46.813 --> 02:51:48.813
place, 

02:51:49.896 --> 02:51:51.120
again, use dinosaurs because 
everybody loves dinosaurs, 

02:51:51.121 --> 02:51:53.121
right?

02:51:54.176 --> 02:51:56.176
We can place our dinosaurs 
relative to 

02:51:57.835 --> 02:52:00.107
the Cloud Anchor. Hopefully that
makes sense, Cloud 

02:52:03.428 --> 02:52:06.080
Anchor comes back. 
    And we created a fancy 

02:52:06.081 --> 02:52:10.007
visualization. The orange dots 
come up, those are the visual 

02:52:10.008 --> 02:52:12.008
features, they go up to the 

02:52:13.708 --> 02:52:15.336
cloud, Bob uploads his up to the
cloud, they get matched and the 

02:52:15.337 --> 02:52:19.406
two create the same shared 
reference frame. And once that 

02:52:19.407 --> 02:52:21.407
is created, wait a second 

02:52:22.653 --> 02:52:25.119
for the gif to loop around, 
you'll see that spaceship show 

02:52:25.120 --> 02:52:27.120
up and the two of them can 
follow the spaceship around the 

02:52:27.168 --> 02:52:29.168
room. 

02:52:32.074 --> 02:52:34.296
Once they're paired, the devices
can interact together and go 

02:52:34.297 --> 02:52:38.017
anywhere in the room. All right.
So let's keep on going one level

02:52:41.469 --> 02:52:42.275
deeper, like inception with some
sample code. 

02:52:42.276 --> 02:52:44.276
Okay.

02:52:45.592 --> 02:52:48.068
So same format as before, but 
before we get to the two methods

02:52:48.069 --> 02:52:50.921
of hosting and resolving, it's 
really important that we enable 

02:52:50.922 --> 02:52:56.494
the feature. So when you're 
working with ARCore, interact 

02:52:56.495 --> 02:52:58.495
with the session.

02:53:01.638 --> 02:53:03.262
config and turn on our feature. 
Hopefully, this is 

02:53:03.263 --> 02:53:07.545
straightforward. Then, on the 
first device, so this is Alice's

02:53:07.546 --> 02:53:09.982
device, the one that creates the
Cloud Anchor.

02:53:13.502 --> 02:53:15.502
The main method is host Cloud 
Anchor.

02:53:19.904 --> 02:53:22.365
And with -- excuse me, with Host
Cloud Anchor, you can feed in 

02:53:22.366 --> 02:53:26.090
any existing Cloud Anchor. As 
mentioned before, normally this 

02:53:26.091 --> 02:53:29.800
is created from a horizontal 
plane or vertical plane and you 

02:53:29.801 --> 02:53:32.472
can pass that into host Cloud 
Anchor.

02:53:36.185 --> 02:53:38.185
Asynchronously that will create 
in a couple of seconds. 

02:53:39.031 --> 02:53:41.475
What we talk about is the 
important thing that comes from 

02:53:41.476 --> 02:53:44.129
the Cloud Anchor. All right. 
Cloud Anchor ID, thank you.

02:53:49.152 --> 02:53:51.410
So and then, it is completely up
to you what the device 

02:53:51.411 --> 02:53:54.523
communication you want to use. 
The demo we're going to show you

02:53:54.524 --> 02:53:58.997
in a second shows you Firebase. 
There's two other demos, those 

02:53:58.998 --> 02:54:00.998
also use Firebase, as well. It's
a great means to communicate 

02:54:05.144 --> 02:54:07.144
between -- you can use any means
you want. 

02:54:09.045 --> 02:54:10.082
So then, on Bob's device and 
it's really important point 

02:54:10.083 --> 02:54:12.083
here.

02:54:16.006 --> 02:54:18.006
We can also have Bob, Jerry, 
Johnny, 

02:54:19.710 --> 02:54:21.710
Eitan, it can be as many users 
as we 

02:54:22.806 --> 02:54:24.806
want that all they need to do to
join 

02:54:26.721 --> 02:54:28.551
that Cloud Anchor is receive the
Cloud Anchor ID, the one that 

02:54:28.552 --> 02:54:30.552
Alice just sent over.

02:54:33.887 --> 02:54:35.887
And then, we need to resolve the
Cloud Anchor. Dead simple.

02:54:38.410 --> 02:54:40.410
All you need to do is pass in 
the Cloud 

02:54:41.887 --> 02:54:43.728
Anchor ID in the back end under 
the hood, we'll take the visual 

02:54:43.729 --> 02:54:45.729
features.

02:54:48.016 --> 02:54:50.016
It's important that the users's,
again, looking where Alice was.

02:54:54.338 --> 02:54:56.338
You're good to go.

02:54:59.066 --> 02:55:01.710
You can start placing assets to 
that Cloud Anchor. What 

02:55:01.711 --> 02:55:03.130
operating system were those 
devices in that code example 

02:55:03.131 --> 02:55:06.424
running on? 
    Anyone? All right.

02:55:09.687 --> 02:55:11.687
So the really important point 
here.

02:55:23.794 --> 02:55:25.837
Any iOS/AR kit enabled device. 
Which today is going to be 

02:55:25.838 --> 02:55:30.570
iPhones. And we believe this is 
a really important. This is 

02:55:30.571 --> 02:55:32.571
incredibly important to making 

02:55:34.182 --> 02:55:36.182
sure AR reality

02:55:47.159 --> 02:55:49.159
. 

02:55:53.691 --> 02:55:57.176
So so now I'm going to invite 
Eitan up on the stage. And we're

02:55:57.177 --> 02:55:59.177
going to give you a live demo.

02:56:01.279 --> 02:56:02.897
It's one thing to show you -- 
one thing to say that everything

02:56:02.898 --> 02:56:04.898
works across platform but it's 
another thing with a 

02:56:07.771 --> 02:56:09.771
live demo

02:56:11.516 --> 02:56:12.938
. 
   &gt;&gt; EITAN MARDER-EPPSTEIN: Who

02:56:12.939 --> 02:56:17.236
thinks I'm going to win? Raise 
your hand? Oh, it's tough. Who 

02:56:17.237 --> 02:56:20.286
thinks James is going to win? 
That's the rest of you, right? 

02:56:20.287 --> 02:56:22.287
   &gt;&gt; JAMES BIRNEY: Okay.

02:56:26.834 --> 02:56:28.281
You are getting to know Eitan 
better every minute. He sandbags

02:56:28.282 --> 02:56:30.282
a lot.

02:56:31.963 --> 02:56:34.809
   &gt;&gt; EITAN MARDER-EPPSTEIN: 
I've got to join this room. And 

02:56:34.810 --> 02:56:36.654
now, I'm going to set up my 
board and James, you set up 

02:56:36.655 --> 02:56:39.370
yours. 
   &gt;&gt; JAMES BIRNEY: Yep. 

02:56:40.204 --> 02:56:44.299
&gt;&gt; EITAN MARDER-EPPSTEIN: You 
want to get close to me. Jam

02:56:46.548 --> 02:56:48.587
&gt;&gt; JAMES BIRNEY: The state is 
being reflected in both. I'm 

02:56:48.588 --> 02:56:50.588
going to press that.

02:56:52.066 --> 02:56:54.066
Here's our futuristic-looking 
light boards. 

02:56:55.162 --> 02:56:56.376
&gt;&gt; EITAN MARDER-EPPSTEIN: Here 
we go. 

02:56:56.377 --> 02:56:58.627
&gt;&gt; JAMES BIRNEY: And we have 
people in the back organizing 

02:56:58.628 --> 02:57:00.628
bets in case anybody wants to 
make money off of this.

02:57:04.971 --> 02:57:07.818
   &gt;&gt; EITAN MARDER-EPPSTEIN: I 
feel like James has been 

02:57:07.819 --> 02:57:09.861
sandbagging me in all of our 
practice sessions because he's 

02:57:09.862 --> 02:57:15.587
doing much better than he has in
the past. Let's see. 

02:57:17.640 --> 02:57:19.640
&gt;&gt; JAMES BIRNEY: Oh, no.

02:57:25.688 --> 02:57:29.179
   &gt;&gt; EITAN MARDER-EPPSTEIN: Oh,
so close. 

02:57:29.789 --> 02:57:31.789
&gt;&gt; JAMES BIRNEY: All right. Did 
I get him?

02:57:37.780 --> 02:57:41.285
Hey, it worked. 
[ Applause ] 

02:57:43.115 --> 02:57:45.115
And just to reiterate, that was 
an 

02:57:46.418 --> 02:57:48.418
iPhone that Eitan was using, but
this 

02:57:53.745 --> 02:57:56.602
could have been any Android 
ARCore enabled device. That 

02:57:56.603 --> 02:57:59.493
could have been any enabled 
device. And there's my clicker. 

02:57:59.494 --> 02:58:03.151
    Okay. Let's talk about use 
cases. That was gaming, that was

02:58:03.152 --> 02:58:05.152
an example of gaming working 
really well.

02:58:07.461 --> 02:58:12.356
But there's shared AR does not 
need to stop at gameing. Shared 

02:58:12.357 --> 02:58:14.357
AR can make a big difference in 
the world. Oops.

02:58:17.449 --> 02:58:22.751
Lance help me going back a 
slide, please. Pretty please. 

02:58:22.752 --> 02:58:24.752
Thank you. Okay.

02:58:27.222 --> 02:58:29.222
So four categories that briefly 
let's talk about. 

02:58:30.322 --> 02:58:32.365
One is in the education space. 
This is an example of -- let me 

02:58:32.366 --> 02:58:36.435
phrase this as a question. So 
which would be -- raise your 

02:58:36.436 --> 02:58:38.436
hand after I say two options.

02:58:48.490 --> 02:58:50.553
Option B, you can learn from an 
interactive 3D model that you 

02:58:50.554 --> 02:58:52.554
can play with your friends.

02:58:55.464 --> 02:58:58.520
All for option A? Option B? All 
right. See, we're making 

02:58:58.521 --> 02:59:02.577
improvements in how people 
learn. And the demo we're 

02:59:02.578 --> 02:59:04.578
showing you here, an example 
that NASA built for us. 

02:59:08.295 --> 02:59:10.755
The -- this doesn't need to stop
the space exploration, you can 

02:59:10.756 --> 02:59:12.756
do this, as 

02:59:14.010 --> 02:59:16.267
well, any sort of visual area 
such as biology, there's a 

02:59:16.268 --> 02:59:18.539
couple of cool demos that you 
can explore the human body 

02:59:18.960 --> 02:59:22.404
together. I'll leave it at that.

02:59:25.511 --> 02:59:27.511
Creative -- let's hop on down to
creative expression.

02:59:29.157 --> 02:59:33.036
We draw the white line in space.
But we can go beyond that. Take,

02:59:33.037 --> 02:59:35.037
for example, this block building

02:59:36.728 --> 02:59:39.216
app that was built by euphoria. 
You can build a full block 

02:59:39.217 --> 02:59:41.240
building thing and 3D print it 
later. 

02:59:42.258 --> 02:59:44.258
It's very, very cool.

02:59:46.881 --> 02:59:48.881
And you can imagine what this 
would 

02:59:49.904 --> 02:59:51.904
look like, as well, with the AR 
stickers.

02:59:53.683 --> 02:59:55.302
You can imagine what this would 
look like now as you're placing 

02:59:55.303 --> 02:59:57.303
storm 

02:59:58.321 --> 03:00:00.321
troopers

03:00:03.420 --> 03:00:06.358
or -- as you're replacing 
demigorgon andBut we can go 

03:00:06.359 --> 03:00:10.625
beyond that. Take, for example, 
this block building app that was

03:00:06.359 --> 03:00:10.625
built by euphoria. You can build
a full block building thing and 

03:00:06.359 --> 03:00:09.625
3D print it later. 
    It's very, very cool. And 

03:00:06.359 --> 03:00:10.625
you can imagine what this would 
look like, as well, with the AR 

03:00:06.359 --> 03:00:10.292
stickers. You can imagine what 
this would look like now as 

03:00:06.359 --> 03:00:10.025
you're placing storm troopers or
-- as you're replacing 

03:00:06.359 --> 03:00:08.359
demigorgon and have the fight 
between 

03:00:09.363 --> 03:00:11.363
different phones

03:00:14.312 --> 03:00:16.312
. Now, you can do ice fishing 
with your friends.

03:00:30.285 --> 03:00:32.524
Looking at the sidewalk and turn
it into an ice fishing pool. 

03:00:32.525 --> 03:00:36.634
    Beyond ice fishing, you can 
imagine playing laser tags with 

03:00:36.635 --> 03:00:39.692
your friends can now be with 
your phones. You don't need to 

03:00:39.693 --> 03:00:42.425
buy special gear. 
    You can just, you know, two 

03:00:42.426 --> 03:00:44.426
people quickly pair, host and 
resolve.

03:00:47.140 --> 03:00:49.140
And then, you're off and going 
and is 

03:00:52.441 --> 03:00:56.508
playing laser -- Cloud Anchors 
are not limited to two devices. 

03:00:56.509 --> 03:01:00.389
And then, shopping. How many of 
you guys have bought something 

03:01:00.390 --> 03:01:02.390
and then had your partner when 

03:01:04.056 --> 03:01:06.098
it actually showed up veto it 
and then you had to return it? 

03:01:06.099 --> 03:01:09.756
Show of hands? Yeah, that's like
a big pain, right? And then, you

03:01:09.757 --> 03:01:12.464
have to go through, find the UPS
store, FedEx store, mail it 

03:01:15.313 --> 03:01:17.591
back, that's not a good 
experience. It's a lot better if

03:01:17.592 --> 03:01:19.592
you can preview it with your 
partners.

03:01:21.511 --> 03:01:23.511
So now, with Cloud Anchors, if 
I'm 

03:01:26.204 --> 03:01:28.045
placing a speaker system here, I
can have my wife also look at 

03:01:28.046 --> 03:01:30.046
that speaker system from her 
phone. 

03:01:32.852 --> 03:01:35.279
There's a feeling of consistency
and that feeling of trust that 

03:01:35.280 --> 03:01:40.603
you built if you're the 
advertiser or e commerce site. 

03:01:40.604 --> 03:01:43.078
If you have two users looking at
it and it shows up consistently 

03:01:43.079 --> 03:01:45.079
for both of them, it builds this
trust.

03:01:48.409 --> 03:01:49.828
The product I'm buying, when I'm
previewing it, it's looking that

03:01:49.829 --> 03:01:53.691
way. It's showing up on multiple
devices. 

03:01:55.797 --> 03:01:57.797
So that's everything for Cloud 
Anchors.

03:02:00.625 --> 03:02:02.625
Now, let's talk about getting 
started

03:02:09.311 --> 03:02:11.311
. So ARCore already supports 
Unity and 

03:02:12.616 --> 03:02:14.616
Android Studio for Android 
native development.

03:02:16.277 --> 03:02:18.277
As well, since Cloud Anchors are
across 

03:02:19.749 --> 03:02:22.188
platform, we provide SDK so you 
can do your development X code, 

03:02:22.189 --> 03:02:26.860
as well. All four of the 
developments are live as of 

03:02:26.861 --> 03:02:28.861
yesterday at 1:00 p.m.. 

03:02:30.061 --> 03:02:33.407
[ Applause ] 
Thank you.

03:02:37.107 --> 03:02:38.808
So for the folks here at I/O, 
you guys have a bunch of 

03:02:38.809 --> 03:02:41.243
resources, you folks have a 
bunch of resources you have at 

03:02:43.120 --> 03:02:45.120
your disposal. Please take 
advantage of them.

03:02:47.300 --> 03:02:49.300
There are three awesome demos in
the Sandbox.

03:02:50.826 --> 03:02:52.826
If you like playing lightboard 
and want 

03:02:53.909 --> 03:02:55.909
to play Eitan, our Sandbox is 
over there 

03:02:57.414 --> 03:02:59.414
in the AR Sandbox.

03:03:02.748 --> 03:03:04.816
He'll be there until somebody 
beats him? We also have the just

03:03:04.817 --> 03:03:06.817
align demo over in the 
experiment sandbox.

03:03:09.705 --> 03:03:11.759
And then, the demo that Eitan 
showed with this picture frame 

03:03:11.760 --> 03:03:16.032
as well as two others are 
available in the AR sand box. 

03:03:16.033 --> 03:03:17.902
It's a really, really fun 
exhibit. Pleads go ahead and 

03:03:17.903 --> 03:03:21.784
play around with it. I suspect 
it'll give you a bunch of cool 

03:03:21.785 --> 03:03:23.827
ideas for what you can build. 

03:03:27.100 --> 03:03:30.345
For code labs, we have over 80 
workstations set up. Please play

03:03:30.346 --> 03:03:32.346
around with them. Every 
workstation is paired with an 

03:03:32.809 --> 03:03:34.809
android device.

03:03:36.267 --> 03:03:40.333
Not only can you goas two others
are available in the AR sand 

03:03:36.267 --> 03:03:40.267
box. It's a really, really fun 
exhibit. Pleads go ahead and 

03:03:36.267 --> 03:03:40.400
play around with it. I suspect 
it'll give you a bunch of cool 

03:03:36.267 --> 03:03:40.400
ideas for what you can build. 
    For code labs, we have over 

03:03:36.267 --> 03:03:40.267
80 workstations set up. Please 
play around with them. Every 

03:03:36.267 --> 03:03:40.400
workstation is paired with an 
android device. Not only can you

03:03:36.267 --> 03:03:38.267
go through the code, you can 
compile it on to the phone and 

03:03:38.502 --> 03:03:40.125
then, you can play with -- you 
can see what the code you just 

03:03:40.126 --> 03:03:42.151
built actually works like on a 
phone. 

03:03:44.839 --> 03:03:45.851
And then, we also have office 
hours, please take advantage of 

03:03:45.852 --> 03:03:47.852
that.

03:03:51.158 --> 03:03:53.158
We have incredibly intelligent 
staff to answer questions.

03:03:56.084 --> 03:03:57.920
And the AR Core team is 
incredibly busy giving talks 

03:03:57.921 --> 03:04:01.814
this week. Please take advantage
of those. Done an awful lot of 

03:04:01.815 --> 03:04:04.856
work to give you a concise 
explanation. There's two more 

03:04:04.857 --> 03:04:06.923
today and two more tomorrow. 

03:04:10.051 --> 03:04:12.749
And then, after I/O or for the 
folks online, developers.

03:04:17.061 --> 03:04:19.061
com/AR -- or developers.

03:04:20.360 --> 03:04:22.177
com/Google/AR, has all of the 
resources plus the code labs are

03:04:22.178 --> 03:04:25.041
available on there. And again, 
all four our of SDKs are 

03:04:26.470 --> 03:04:30.803
available as of yesterday. Thank
you very much. Appreciate your 

03:04:30.804 --> 03:04:32.804
time. 

03:04:34.632 --> 03:04:36.632
[ Applause ] 

03:05:03.465 --> 03:05:05.465
Thank you for joining this 
session.

03:05:08.091 --> 03:05:10.091
Brand

03:05:12.026 --> 03:05:15.551
ambassadors will assist with 
ushering through the exits. If 

03:05:15.552 --> 03:05:17.780
you've registered for the next 
session in this room, please 

03:05:17.781 --> 03:05:20.445
clear the room and return via 
the registration line outside. 

03:05:20.446 --> 03:05:22.446
Thank you.

03:26:17.923 --> 03:26:20.767
   &gt;&gt; Hello, good morning, and 
welcome to today's session.

03:26:24.595 --> 03:26:27.997
Frictional It's so great to see 
such a great turnout. Thank you 

03:26:27.998 --> 03:26:30.662
so much for coming. My name's 
Jonathan, and I work on the 

03:26:34.209 --> 03:26:38.094
mobile ninjas. We're a team 
within Google passionate about 

03:26:38.095 --> 03:26:40.095
testing.

03:26:43.208 --> 03:26:45.208
It's likely you've used some of 
our products .

03:26:53.419 --> 03:26:55.419
Both within and outside of 
Google.

03:27:03.414 --> 03:27:05.870
There's a general consensus of 
the virtues of writing tests. 

03:27:05.871 --> 03:27:07.871
Therest a cost of writing tests.

03:27:09.131 --> 03:27:10.959
It's one that quickly pays 
dividends throughout the life 

03:27:10.960 --> 03:27:12.960
cycle of your project.

03:27:20.112 --> 03:27:22.187
A bug caught early on is far 
cheaper to fix than after the 

03:27:22.188 --> 03:27:24.423
deployed application. They give 
you a safety net for making 

03:27:25.235 --> 03:27:27.679
changes to your code. You're 
free to refactor, cleanup and 

03:27:28.094 --> 03:27:30.094
optimize.

03:27:34.625 --> 03:27:36.625
What's more?

03:27:38.344 --> 03:27:40.162
A suite of readable tests 
provides the living, breathing 

03:27:40.163 --> 03:27:42.163
specification applications 
behavior.

03:27:49.777 --> 03:27:52.215
There exists the concept of the 
testing pyramid made up of three

03:27:52.216 --> 03:27:54.216
layers, unit, integration and 
end-to-end tests.

03:28:00.601 --> 03:28:04.171
    It also gets harder to 
maintain and debug these kinds 

03:28:04.172 --> 03:28:06.172
of tests.

03:28:18.247 --> 03:28:19.903
You're leveraging the advantages
of one layer to compensate for 

03:28:19.904 --> 03:28:21.904
tradeoffs in 

03:28:25.024 --> 03:28:27.024
others, to produce a holistic 
automated testing environment.

03:28:32.053 --> 03:28:35.340
We recommend a 70/20/10 split as
a general healthy guideline. 

03:28:35.341 --> 03:28:39.003
    And now, while the rules 
apply, the unique 

03:28:39.004 --> 03:28:40.674
characteristics of android 
development have introduced 

03:28:40.675 --> 03:28:42.675
difficulties along the way.

03:28:44.950 --> 03:28:48.407
    So unit tests. Due to the 
need to be fast, run on the 

03:28:49.398 --> 03:28:51.398
local workstation.

03:29:01.219 --> 03:29:03.882
Integrations run on a real or 
virtual device. And so, separate

03:29:03.883 --> 03:29:06.336
tools have evolved at each layer
of the pyramid.

03:29:10.622 --> 03:29:12.718
Robo electric or the markable 
android framework for the device

03:29:12.719 --> 03:29:14.719
unit tests.

03:29:16.196 --> 03:29:18.196
Espresso, and the android 
testing 

03:29:19.657 --> 03:29:21.494
support library for the on 
device tests. 

03:29:21.495 --> 03:29:23.495
Now, Android's got really 
familiar 

03:29:25.210 --> 03:29:27.241
core concepts, such as getting a
handle to your application 

03:29:27.242 --> 03:29:30.897
context or maybe driving your 
activity life cycle. And each of

03:29:30.898 --> 03:29:32.898
these tools has its own 

03:29:34.984 --> 03:29:37.226
distinct APIs and ways for doing
things for achieving the exact 

03:29:37.227 --> 03:29:39.227
same tasks.

03:29:44.557 --> 03:29:47.613
This has led to a test writing 
contest? As a developer, it's 

03:29:47.614 --> 03:29:49.614
hard to know what tools are 
available for use and which of 

03:29:50.455 --> 03:29:52.455
those are recommended.

03:29:54.598 --> 03:29:57.463
Having multiple tools at each 
level has led to an explosion of

03:29:57.464 --> 03:30:00.971
styles, each with their own 
distinct patterns and APIs. 

03:30:04.019 --> 03:30:06.019
And this, in turn, leads to a 
lack of mobility between layers.

03:30:08.959 --> 03:30:10.400
Tests can't be easily refracted 
or reused between layers in a 

03:30:10.401 --> 03:30:14.089
pyramid without being completely
rewritten for a new tool. 

03:30:18.314 --> 03:30:20.314
To discuss this further, let's

03:30:23.289 --> 03:30:23.697
orientate ourselves to 
constitute a well-structured 

03:30:23.698 --> 03:30:25.997
test. 
    There's some following 

03:30:25.998 --> 03:30:27.998
common patterns that define a 
well-structured test.

03:30:31.097 --> 03:30:33.097
And so, we generally break tests
down into three clear sections.

03:30:39.282 --> 03:30:43.816
And I like to separate them with
a blank line to demarcate them. 

03:30:43.817 --> 03:30:45.817
So given some predetermined 
state of the system.

03:30:53.659 --> 03:30:56.137
When you exan action and verify 
the state of the system or 

03:30:56.138 --> 03:30:58.138
behavior that's 

03:30:59.396 --> 03:31:01.071
occurred, be sure to name the 
test after the condition you're 

03:31:01.072 --> 03:31:03.072
testing and the expected 
outcome.

03:31:05.559 --> 03:31:07.275
Keep the test focused on very 
specific behavior and then test 

03:31:07.276 --> 03:31:09.276
all of the 

03:31:11.308 --> 03:31:13.308
behaviors independent

03:31:16.224 --> 03:31:17.644
ly -- these guidelines will help
you keep each test 

03:31:17.645 --> 03:31:19.645
understandable in isolation. 

03:31:22.578 --> 03:31:24.210
Use common setup methods for 
scaffolding. And this is maybe 

03:31:24.211 --> 03:31:26.211
creating the object 

03:31:27.454 --> 03:31:32.565
that's on the test and wiring up
some dependencies. Let's take a 

03:31:32.566 --> 03:31:34.829
look at the problem of the 
explosion of styles and 

03:31:34.830 --> 03:31:36.830
highlight this using a simple 
test case. 

03:31:38.675 --> 03:31:41.350
We'll have a single activity 
with one button that responds to

03:31:41.351 --> 03:31:46.069
a click sending an intent to the
Android system. And I'm going to

03:31:46.070 --> 03:31:48.070
walk you through this 

03:31:49.349 --> 03:31:51.349
test case comparing the 
different styles 

03:31:56.477 --> 03:31:58.477
of Markito, Robo Electric or 
espresso. 

03:32:03.631 --> 03:32:05.631
First up, let's consider 
Mockito.

03:32:07.298 --> 03:32:09.298
Sometimes it's used 
inappropriately or overused.

03:32:10.385 --> 03:32:12.649
Mocking your own is great, but 
while mocking the Android 

03:32:12.650 --> 03:32:14.650
framework may seem 

03:32:15.731 --> 03:32:16.953
like a good idea at first, it 
can lead down a path of 

03:32:16.954 --> 03:32:18.954
difficult problems.

03:32:22.042 --> 03:32:23.061
Many classes are stateful, they 
have complex contracts and these

03:32:23.062 --> 03:32:25.308
are difficult or impossible to 
satisfy with marks. 

03:32:26.731 --> 03:32:29.190
So even though we don't 
recommend it, let's just start 

03:32:29.191 --> 03:32:31.191
by taking a look at one of these
tests and walk through it 

03:32:36.875 --> 03:32:38.875
using the Mockito framework.

03:32:43.216 --> 03:32:45.216
So in the given section, we

03:32:49.798 --> 03:32:51.443
first of all have to stomp out 
the framework behavior in the 

03:32:51.444 --> 03:32:54.506
super class activity. So that it
responds as we expect in our 

03:32:55.928 --> 03:33:00.250
tests. Now, this introduces some
problems. 

03:33:03.386 --> 03:33:06.425
First of all, we're partially 
stubbing the test. We're not 

03:33:06.426 --> 03:33:08.426
testing the true behavior of 
that object on the test.

03:33:11.968 --> 03:33:14.220
And furthermore, it brings with 
it excessive stubbing, which 

03:33:14.221 --> 03:33:16.221
introduces all 

03:33:18.697 --> 03:33:20.697
of the undesirable boilerplate.

03:33:26.233 --> 03:33:27.651
For the WNT section over the 
test to execute the code in the 

03:33:27.652 --> 03:33:32.186
test, you have to register an 
argument captor earlier to get a

03:33:32.187 --> 03:33:34.187
handle on the click listener 

03:33:35.235 --> 03:33:36.854
that you will, then vote 
manually to call a code that 

03:33:36.855 --> 03:33:38.855
you're wishing to test.

03:33:44.636 --> 03:33:46.872
You can descend into argument 
captors, stubbing calls and 

03:33:46.873 --> 03:33:48.873
answer invocations.

03:33:56.311 --> 03:33:58.311
Finally, you're going to have to
use another argument captor.

03:34:01.226 --> 03:34:03.226
Mocking the Android framework in
this 

03:34:04.307 --> 03:34:06.538
way tends to force you into 
testing implementation details 

03:34:06.539 --> 03:34:08.539
when you want to be testing 
behavior instead. 

03:34:10.195 --> 03:34:11.209
And furthermore, these drawbacks
have tended to lead to 

03:34:11.210 --> 03:34:14.097
developers to build their own 
abstractions to isolate Android.

03:34:16.344 --> 03:34:20.254
    This leads to its own set of
problems. Firstly, you're 

03:34:20.255 --> 03:34:22.255
introducing another 

03:34:23.306 --> 03:34:25.970
layer of craft into your 
application. And secondly, 

03:34:25.971 --> 03:34:27.971
you're introducing 

03:34:29.469 --> 03:34:32.147
texting gaps where bugs can 
hide. And we believe that while 

03:34:32.148 --> 03:34:34.994
you should architect your 
application very thoughtfully, 

03:34:34.995 --> 03:34:36.995
the limitations of the 

03:34:39.410 --> 03:34:41.410
tools shouldn't dictate your 
application architecture either.

03:34:43.452 --> 03:34:47.741
    So let's see how this looks 
like with roboelectric.

03:34:53.394 --> 03:34:56.362
The popular open source testing 
framework. You're able to use 

03:34:56.363 --> 03:34:58.604
real android objects in your 
tests rather than having to 

03:35:00.023 --> 03:35:03.288
program your own stubbing 
behavior in each test. It runs 

03:35:03.289 --> 03:35:05.540
on your local host, which means,
it's very fast, making it ideal 

03:35:06.759 --> 03:35:08.759
for unit tests. 

03:35:11.031 --> 03:35:14.130
Roboelectric tends to create 
tests that read a lot cleaner. 

03:35:14.131 --> 03:35:16.131
Let's walk through each section 
in turn.

03:35:20.469 --> 03:35:22.937
In the given section, we can 
simply bring an activity just by

03:35:22.938 --> 03:35:24.938
calling the 

03:35:27.168 --> 03:35:29.168
set of activity API

03:35:31.047 --> 03:35:33.047
. In the WNT section, we're able
to use 

03:35:36.018 --> 03:35:38.018
real Android SDK APIs to get 
ahold of 

03:35:39.872 --> 03:35:42.745
the views and Roboelectric's 
click on the API and invoke the 

03:35:42.746 --> 03:35:44.746
code we wish to test.

03:35:47.065 --> 03:35:51.779
    Finally, we then use the 
testing APIs to check that the 

03:35:51.780 --> 03:35:53.780
intent was sent to the system.

03:35:56.298 --> 03:35:58.961
See how much cleaner this 
version is. We're focusing on 

03:35:58.962 --> 03:36:02.416
the items that really matter in 
the test and free from the extra

03:36:02.417 --> 03:36:07.750
distraction. 
    Now, espresso is a UI 

03:36:07.751 --> 03:36:10.196
testing framework and runs on a 
real or virtual device.

03:36:13.282 --> 03:36:15.565
It provides you with a really 
realistic environment. The 

03:36:15.566 --> 03:36:17.566
tradeoff here is a much lower 
execution speed.

03:36:20.050 --> 03:36:22.050
You're building up your entire 
APK, 

03:36:23.095 --> 03:36:24.523
deploying it to the device, and 
substantiating the test run, 

03:36:24.524 --> 03:36:27.391
waiting for the results and 
collecting those back on your 

03:36:27.392 --> 03:36:30.239
local workstation. 
    All of this is adding 

03:36:30.240 --> 03:36:32.240
valuable development cycles.

03:36:34.961 --> 03:36:37.604
Now, the exact same Android 
concepts exist here, we're just 

03:36:37.605 --> 03:36:42.268
getting ahold of an activity, 
clicking a button and then very

03:36:48.149 --> 03:36:49.781
verifying the intent to the 
system. Let's step through this 

03:36:49.782 --> 03:36:53.917
one together. 
    In the given section, we'll 

03:36:53.918 --> 03:36:55.990
use the activity test rule, 
which comes from the 

03:36:59.854 --> 03:37:02.098
Android testing support library.
This can be used to start an 

03:37:02.099 --> 03:37:04.099
activity 

03:37:05.546 --> 03:37:08.217
and provide us with a handle to 
it with our tests. 

03:37:11.872 --> 03:37:14.742
For the WNT section, we can use 
the Espresso view APIs, find the

03:37:14.743 --> 03:37:19.014
viewing question and safely 
click on it to invoke the code 

03:37:19.015 --> 03:37:21.015
that we wish to test.

03:37:27.221 --> 03:37:29.099
And finally, we use Espresso 
intent library to capture the 

03:37:29.100 --> 03:37:31.553
intent and verify it was the one
we want sent to the system. 

03:37:33.614 --> 03:37:35.614
Notice here, that while a test 
has 

03:37:37.944 --> 03:37:40.586
many similar structures to 
Roboelectric test, the syntax is

03:37:40.587 --> 03:37:42.587
very, very different.

03:37:50.035 --> 03:37:51.887
Each have contrasting strengths 
and weaknesses. It's an 

03:37:51.888 --> 03:37:54.328
explosion of L styles that's 
become the big problem for 

03:37:54.329 --> 03:37:56.329
writing tests.

03:38:01.313 --> 03:38:02.531
Who has been using roboelectric 
for writing tests? Raise your 

03:38:02.532 --> 03:38:06.207
hands? And what about Espresso? 
And who is using both?

03:38:21.327 --> 03:38:22.541
Wouldn't you rather thinking 
about writing an Android test 

03:38:22.542 --> 03:38:25.593
instead? We feel as a developer,
no matter what kind of test 

03:38:25.594 --> 03:38:27.594
you're writing, you shouldn't 
first have to think about 

03:38:28.655 --> 03:38:30.655
environments and tools and 
libraries that you'll need. 

03:38:32.120 --> 03:38:33.954
We believe that you shouldn't 
have to suffer the mental load 

03:38:33.955 --> 03:38:35.955
of having to 

03:38:37.036 --> 03:38:39.036
learn multiple sets of APIs for 
exactly the same thing.

03:38:48.737 --> 03:38:50.737
Use your code no matter where 
you choose to run it.

03:38:53.436 --> 03:38:55.095
What if there was only one set 
of APIs that you needed to 

03:38:55.096 --> 03:38:59.829
learn? And now, imagine, also, 
being free to focus on writing 

03:38:59.830 --> 03:39:01.830
on your test rather than 
considering those tools and 

03:39:02.539 --> 03:39:04.539
libraries and environments.

03:39:24.178 --> 03:39:26.178
We're unifying the experience 
around a 

03:39:27.294 --> 03:39:28.713
canonical, high-quality set of 
APIs that will reduce the 

03:39:28.714 --> 03:39:30.983
boilerplate and eliminate the 
number of tools you need to 

03:39:30.984 --> 03:39:32.984
learn. 

03:39:35.038 --> 03:39:37.038
Naturally,

03:39:40.151 --> 03:39:40.942
support is included allowing you
to write beautifully concise 

03:39:40.943 --> 03:39:43.584
tests and all of this will be 
open sourced, we love 

03:39:45.635 --> 03:39:47.635
contributions from the community
members.

03:39:48.892 --> 03:39:50.763
We're going to satisfy 
developers' needs in each of the

03:39:50.764 --> 03:39:52.764
four key sections of the test.

03:39:55.070 --> 03:39:57.070
Remember, scaffolding given when
and then.

03:39:59.745 --> 03:40:03.420
Scaffolding encompasses the 
configuration and control APIs. 

03:40:03.421 --> 03:40:05.421
Getting ahold of that 
application context.

03:40:18.993 --> 03:40:20.993
Today, we're excited to announce
for 

03:40:22.512 --> 03:40:25.143
the first time, you can now use 
these APIs for your on and off 

03:40:25.144 --> 03:40:27.144
device tests.

03:40:29.246 --> 03:40:33.567
    The next section of a test 
is the given section and here 

03:40:33.568 --> 03:40:36.209
we're going to provide two key 
categories of APIs for you.

03:40:40.099 --> 03:40:42.099
Firstly, the Android rules from 
the 

03:40:43.807 --> 03:40:46.675
library will become part of 
JetPack and soon be adding more 

03:40:46.676 --> 03:40:48.676
to help drive the life cycle for
you in tests. 

03:40:49.968 --> 03:40:52.405
As you've seen previously, thing
aivity test rule is used to 

03:40:52.406 --> 03:40:55.244
start of your activity and make 
it available to test in the 

03:40:55.245 --> 03:40:57.245
resume state.

03:40:59.185 --> 03:41:01.185
You probably use the API running
on a device many times before.

03:41:03.902 --> 03:41:05.539
Well, today, this API, too, will
be available for tests that run 

03:41:05.540 --> 03:41:10.910
off device, as well. 
    Secondly, we'll be providing

03:41:10.911 --> 03:41:12.911
you 

03:41:13.970 --> 03:41:15.994
with a set of Android test data 
builders. These will help you 

03:41:15.995 --> 03:41:18.444
construct Android objects that 
your code and the test will 

03:41:18.858 --> 03:41:20.858
interact with.

03:41:22.953 --> 03:41:25.610
Many of the Android framework 
classes that you need for 

03:41:25.611 --> 03:41:27.611
setting up your test date are 
difficult to create.

03:41:31.101 --> 03:41:34.270
Often, there's no constructer. 
Perhaps, they're final so 

03:41:34.271 --> 03:41:38.827
mocking's out of the question. 
And sometimes, they're plain 

03:41:38.828 --> 03:41:40.841
clumsy to substantiate with any 
degree of gravity at all.

03:41:44.620 --> 03:41:46.880
So we're including Android test 
builders to give you a concise 

03:41:46.881 --> 03:41:49.966
way to set up your test 
environment. They produce 

03:41:49.967 --> 03:41:51.967
readable code.

03:41:53.440 --> 03:41:54.679
A fluent way to create the 
Android components you need to 

03:41:54.680 --> 03:41:57.743
interact with. 
    And, of course, they're 

03:41:57.744 --> 03:42:00.384
portable. Both your on and off 
device use cases.

03:42:10.017 --> 03:42:12.663
The structured test, the WNT 
section. Usually, this is a case

03:42:12.664 --> 03:42:14.938
of calling your own code 
directly, but when you're 

03:42:17.417 --> 03:42:19.417
writing a UI test, it's likely 
you would 

03:42:21.438 --> 03:42:24.961
reach for the espresso APIs. 
Today, we're happy to announce 

03:42:24.962 --> 03:42:26.962
that 

03:42:29.809 --> 03:42:35.817
Espresso, too, is joining 
JetPack. They read beautifully. 

03:42:35.818 --> 03:42:36.836
You've used them for your 
on-device tests for a while now.

03:42:36.837 --> 03:42:40.498
    And today, we're providing 
preliminary support for the 

03:42:40.499 --> 03:42:42.499
tests in the off device use case
also.

03:42:47.619 --> 03:42:49.260
The final part of a 
well-structured test is the then

03:42:49.261 --> 03:42:52.925
section. This is where you make 
assertions on the state of the 

03:42:52.926 --> 03:42:54.926
system in response to an action.

03:42:59.072 --> 03:43:01.072
So firstly, espresso is going to
be 

03:43:02.497 --> 03:43:04.497
joining Jet

03:43:06.064 --> 03:43:08.708
Pack as intends. The APIs for 
your own device testing, great 

03:43:08.709 --> 03:43:10.709
news.

03:43:13.009 --> 03:43:15.009
Today, they, too, will run in 
your device tests.

03:43:18.332 --> 03:43:20.173
And finally, we're also 
releasing an assertions library 

03:43:20.174 --> 03:43:22.174
to help reduce the boilerplate 
in your tests.

03:43:29.971 --> 03:43:33.649
    See here how easy it is to 
get the arguments mixed up.

03:43:41.043 --> 03:43:43.900
This makes it difficult to 
comprehend the error messages in

03:43:43.901 --> 03:43:46.781
tests. At Google, we love to use
truth.

03:43:50.252 --> 03:43:52.252
It's our own open source, fluent
testing assertions library.

03:43:55.388 --> 03:43:57.388
Using affluent assertions 
library is a 

03:43:58.840 --> 03:44:01.511
great step toward producing 
readable code. You can lean on 

03:44:01.512 --> 03:44:03.512
the built-in support of 

03:44:04.768 --> 03:44:06.768
your ID's autocompletion 
feature.

03:44:09.492 --> 03:44:11.747
To help you write concise tests 
against Android code, we'll be 

03:44:11.748 --> 03:44:13.748
releasing a set 

03:44:14.804 --> 03:44:16.804
of truth extensions for Android 
which 

03:44:18.889 --> 03:44:20.553
reduces the boilerplate and 
gives meaningful error messages.

03:44:20.554 --> 03:44:24.818
    Of course, these will work 
across all environments, both 

03:44:24.819 --> 03:44:26.819
the on and off device tests.

03:44:37.243 --> 03:44:40.131
We'll be bringing you the tools 
you need so you can concentrate 

03:44:40.132 --> 03:44:42.383
on writing beautifully concise, 
easy to read tests.

03:44:47.917 --> 03:44:49.738
A single set of canonical APIs 
for common tasks that will 

03:44:49.739 --> 03:44:52.407
reduce the boilerplate leaving 
your tests clear and readable. 

03:44:56.265 --> 03:44:58.265
And the environmental agnostic, 

03:44:59.931 --> 03:45:01.784
allowing it on your local 
workstation or perhaps in a 

03:45:01.785 --> 03:45:06.865
cloud test lab. And now, that 
I've shown you how to use the 

03:45:06.866 --> 03:45:08.492
unified set of APIs that 
decouple the act of writing a 

03:45:08.493 --> 03:45:10.493
test from where 

03:45:11.558 --> 03:45:14.557
it's going to run, I'll hand you
over to my colleague

03:45:18.690 --> 03:45:20.690
Stefan who is going to show you 
how to 

03:45:21.758 --> 03:45:23.758
run the tests in a new, 
simplified world. 

03:45:24.971 --> 03:45:28.543
[ Applause ]  
   &gt;&gt; STEFAN RAMSAUER: Thank 

03:45:28.544 --> 03:45:31.843
you, Jonathan. Welcome, 
everyone.

03:45:38.361 --> 03:45:42.869
Quite amazing. I want to say a 
big welcome to everybody joining

03:45:42.870 --> 03:45:44.870
us at the live stream today.

03:45:46.979 --> 03:45:48.979
At Google, we believe that 
testing 

03:45:50.449 --> 03:45:53.703
should be a fundamental part of 
your app development strategy. 

03:45:53.704 --> 03:45:55.704
Let's bring back the pyramid. 

03:46:00.648 --> 03:46:02.891
As we can see, our friend with 
the JetPack has solved the API 

03:46:02.892 --> 03:46:04.892
dilemma.

03:46:05.987 --> 03:46:08.420
Now that we have one API to rule
them all, it's easy to start 

03:46:08.421 --> 03:46:10.671
writing tests for Android. 
    No more excuses.

03:46:15.416 --> 03:46:18.268
We can start with a simple test 
for our business logic. Usually,

03:46:18.269 --> 03:46:20.269
a unit test.

03:46:22.555 --> 03:46:25.625
And over time, we can add more 
and more tests. Once we start 

03:46:25.626 --> 03:46:27.664
implementing the UI for our 
application, it might be worth 

03:46:29.074 --> 03:46:31.074
adding an integration test. 

03:46:35.181 --> 03:46:37.181
This just became a fluent 
experience

03:46:38.742 --> 03:46:40.742
since both layer support the 
same APIs.

03:46:47.349 --> 03:46:49.349
That's not the only use case for
the 

03:46:50.603 --> 03:46:52.603
new API becomes handy. Let's 
imagine we have an integration 

03:46:54.493 --> 03:46:56.493
test that got too large and 
complicated.

03:46:58.970 --> 03:47:01.610
I have seen many of those tests.
It's just too convenient to test

03:47:06.684 --> 03:47:08.684
business logic and UI flow in 
one single test.

03:47:09.931 --> 03:47:12.794
At Google, we don't like those 
tests. They are hard to read and

03:47:12.795 --> 03:47:16.050
they tend to become flakey. 

03:47:19.331 --> 03:47:21.331
Small, well-focused tests are 
much better.

03:47:24.041 --> 03:47:26.041
So let's refactor this large, 
complicated test.

03:47:29.388 --> 03:47:31.388
Refactoring a large test can be 
a very 

03:47:33.279 --> 03:47:35.944
painful task. Who in the 
audience has experienced this 

03:47:35.945 --> 03:47:39.448
recently? Raise your hand. 
Here's some good news for you. 

03:47:39.449 --> 03:47:42.139
    If the original test was 
written 

03:47:45.965 --> 03:47:47.965
with the new API, this task 
becomes much simpler.

03:47:50.658 --> 03:47:53.086
We still have to test our UI. 
And we'll keep this part in the 

03:47:54.521 --> 03:47:56.521
integration test.

03:47:57.971 --> 03:47:59.971
This layer provides high 
fidelity.

03:48:02.039 --> 03:48:04.039
And we don't want to lose that 
for our UI tests.

03:48:05.249 --> 03:48:10.041
The rest can directly go into 
the unit test layer. Here, we 

03:48:10.042 --> 03:48:12.042
gain speed.

03:48:15.722 --> 03:48:17.722
Since we can run off device.

03:48:20.201 --> 03:48:22.838
Let's verify the refactoring 
together. We still have high 

03:48:22.839 --> 03:48:24.839
fidelity, that's good.

03:48:28.323 --> 03:48:30.810
We gain speed, even better. And 
the tests are decoupled and less

03:48:31.010 --> 03:48:33.010
complex.

03:48:45.071 --> 03:48:49.229
But wait, EF to we have to 
choose an environment. It's not 

03:48:49.230 --> 03:48:51.090
always trivial to pick the right
one. 

03:48:51.091 --> 03:48:53.956
We also have to work in multiple
source sets . The combination of

03:48:53.957 --> 03:48:55.957
run time 

03:48:57.646 --> 03:49:00.126
environments, plus source sets 
will lead to an explosion of 

03:49:00.127 --> 03:49:02.127
test configurations.

03:49:03.817 --> 03:49:05.242
Just imagine how hard it will 
get to choose the right 

03:49:05.243 --> 03:49:07.243
configuration.

03:49:10.958 --> 03:49:15.469
    And don't we need to run the
entire test on our continuous 

03:49:15.470 --> 03:49:17.915
integration server before we 
submit?

03:49:21.396 --> 03:49:23.396
And you all know the feeling 
after we 

03:49:24.464 --> 03:49:26.464
kicked off the test run.

03:49:28.131 --> 03:49:30.131
Waiting eagerly for the results.

03:49:32.842 --> 03:49:34.881
Oh, no, one of the tests is 
flakey. I'm pretty sure many of 

03:49:34.882 --> 03:49:36.882
you have been 

03:49:38.136 --> 03:49:43.230
in this situation. Flakeyness is
one of the biggest pain points 

03:49:43.231 --> 03:49:45.231
for developing productivity. 

03:49:50.809 --> 03:49:52.809
So what if there was a better 
way to 

03:49:54.679 --> 03:49:56.679
set up your test harness, 
execute your 

03:49:58.756 --> 03:50:00.756
tests in a reliable environment 
with unified test results.

03:50:07.316 --> 03:50:10.180
Today, we are proud to announce 
Project Nitrogen. The new single

03:50:10.181 --> 03:50:12.253
entry point for all Android 
tests.

03:50:19.595 --> 03:50:21.595
Nitrogen is fuel for your 
JetPacks.

03:50:33.652 --> 03:50:35.652
We had to build the fastest, 
most reliable tests. 

03:50:37.362 --> 03:50:39.362
Covers from set up to test 
execution and reporting.

03:50:44.679 --> 03:50:46.679
Nitrogen tests behavior across 
different systems.

03:50:49.165 --> 03:50:51.165
It will be fully integrated in 
Android Studio.

03:50:53.452 --> 03:50:55.452
At Google, we already use 
Nitrogen to 

03:50:58.299 --> 03:51:00.299
test our own apps, such as 
Gmail, Google 

03:51:01.377 --> 03:51:03.479
Maps, photos, YouTube and many 
more. 

03:51:09.604 --> 03:51:11.604
Nitrogen is highly extensible.

03:51:14.527 --> 03:51:16.527
It customizes the testing 
vocation at any point.

03:51:20.034 --> 03:51:23.503
Nitrogen will be fully open 
sourced later this year. Let me 

03:51:23.504 --> 03:51:25.504
give you an overview. 

03:51:27.970 --> 03:51:30.247
Starting with setup, Nitrogen 
connects your test to any 

03:51:30.248 --> 03:51:32.248
execution environment.

03:51:34.337 --> 03:51:36.337
On device, off device or in the 
cloud.

03:51:37.873 --> 03:51:39.873
It installs test artifacts.

03:51:40.950 --> 03:51:42.950
And if necessary, it can run 
custom fixture scripts for you.

03:51:55.857 --> 03:51:57.857
This can be a real device.

03:52:01.654 --> 03:52:03.654
Once the device is ready, 
Nitrogen 

03:52:05.351 --> 03:52:07.792
installs the application. Stages
any tested independencies.

03:52:17.860 --> 03:52:20.917
It can all be done here. Let me 
give you examples. Setting up a 

03:52:20.918 --> 03:52:22.918
network tunnel.

03:52:27.294 --> 03:52:29.294
And much more.

03:52:30.577 --> 03:52:33.358
And finally prepares the device 
for the next step, test 

03:52:33.359 --> 03:52:35.359
execution.

03:52:49.921 --> 03:52:51.921
Here we have sprints, mid 
distance and long distance runs.

03:52:52.369 --> 03:52:54.369
We also have different 
environments.

03:52:55.827 --> 03:52:57.827
Trek running, road running, 
cross country running.

03:53:04.229 --> 03:53:08.504
A unit test on your workstation 
is a fast sprint, as fast as 

03:53:08.505 --> 03:53:10.505
possible to the finish line.

03:53:12.597 --> 03:53:14.820
The test on your continuous 
integration server is the 

03:53:14.821 --> 03:53:16.821
marathon.

03:53:18.102 --> 03:53:19.988
The goal is to get to the finish
line and not to fail along the 

03:53:19.989 --> 03:53:21.989
way.

03:53:28.967 --> 03:53:31.435
These tests are executed in 
different ways. From the command

03:53:31.436 --> 03:53:33.436
line, from Android 

03:53:34.474 --> 03:53:36.474
Studio or trick it automatically
when you submit. 

03:53:38.153 --> 03:53:40.181
With project nitrogen, this will
become consistent.

03:53:46.080 --> 03:53:48.080
We provide a well-defined 
protocol and 

03:53:50.002 --> 03:53:52.002
a unifying all the Android test 
offerings.

03:53:55.117 --> 03:53:57.378
Nitrogen uses our own device 
infrastructure to run your 

03:53:57.379 --> 03:53:59.379
tests.

03:54:01.606 --> 03:54:03.606
Android

03:54:05.328 --> 03:54:07.525
orchestrater and Android Unit 
Runner.

03:54:11.676 --> 03:54:14.202
You can enable the 
infrastructure device today. It 

03:54:14.203 --> 03:54:19.386
has been available since Android
studio 3.0. The orchestrater 

03:54:19.387 --> 03:54:21.387
collects your tests and kicks 
off test execution.

03:54:25.647 --> 03:54:27.647
    By running each test in a 
separate 

03:54:30.814 --> 03:54:32.238
process, shared state is 
minimized and crashes are 

03:54:32.239 --> 03:54:34.239
isolated.

03:54:38.926 --> 03:54:40.926
Moreover, your tests are 
executed in a 

03:54:42.868 --> 03:54:45.394
familiar unit environment, 
provided by the UnitCupp runner.

03:54:48.062 --> 03:54:50.117
The orchestrater collects all 
test results, additional 

03:54:50.118 --> 03:54:52.374
artifacts and streams it back to
Nitrogen.

03:54:58.167 --> 03:55:01.867
    Nitrogen provides a unified 
reporting format for these test 

03:55:01.868 --> 03:55:03.868
results.

03:55:05.412 --> 03:55:07.412
In addition, it provides a huge 

03:55:11.577 --> 03:55:14.270
selection of test output data, 
such as screenshots, profiling 

03:55:14.271 --> 03:55:16.271
data, performance and much more.

03:55:19.911 --> 03:55:21.911
All artifacts are scoped per 
test. 

03:55:26.189 --> 03:55:28.458
This means, for example, a 
locket snippet is reduced to the

03:55:28.459 --> 03:55:30.459
test method.

03:55:33.919 --> 03:55:36.829
No more hundreds of lines of 
locket. So let me show you how 

03:55:36.830 --> 03:55:39.951
Nitrogen improves the entire 
testing flow on Android.

03:55:45.099 --> 03:55:46.343
First, Nitrogen finds the device
and configures it for the test 

03:55:46.344 --> 03:55:48.344
run. 

03:55:51.282 --> 03:55:53.962
Second, it runs tests in 
isolation using the 

03:55:53.963 --> 03:55:55.963
orchestrater.

03:55:57.552 --> 03:55:59.552
And finally, while tests are 
running, 

03:56:00.989 --> 03:56:05.356
nitrogen hosts infrastructure 
will be streaming the test 

03:56:05.357 --> 03:56:07.863
results from the device, pulling
down all test output data and 

03:56:07.864 --> 03:56:09.864
feeding it back to you.

03:56:15.272 --> 03:56:18.227
With Nitrogen, all of this 
complexity is hidden from you. 

03:56:18.228 --> 03:56:21.013
    Whether you're running a 
test on 

03:56:25.641 --> 03:56:27.641
Android Studio or on the CI 
server.

03:56:30.173 --> 03:56:33.109
Nitrogen is the single entry 
point for all Android tests.

03:56:38.000 --> 03:56:40.000
It works from a sprint to a 
marathon

03:56:42.134 --> 03:56:44.134
. Nitrogen can regress the 
device in a test lab.

03:56:48.086 --> 03:56:53.193
Reliable lyy running your tests,
returning unified test results. 

03:56:53.194 --> 03:56:55.194
Nitrogen supports Google Cloud.

03:56:59.992 --> 03:57:01.240
You can deploy and run tests on 
the real device or the virtual 

03:57:01.241 --> 03:57:03.241
device.

03:57:11.908 --> 03:57:13.908
Nitrogen works seamlessly with 
roboelectric.

03:57:21.056 --> 03:57:23.346
We have made big improvements in
start-up time and memory 

03:57:23.347 --> 03:57:25.347
consumption.

03:57:27.313 --> 03:57:29.313
It's released today.

03:57:33.172 --> 03:57:35.172
Roboelectric 4.0.

03:57:38.207 --> 03:57:39.651
And if this is not enough, 
Nitrogen supports your custom 

03:57:39.652 --> 03:57:41.652
needs.

03:57:46.140 --> 03:57:48.140
For example, if you have an 
in-house

03:57:49.398 --> 03:57:51.398
device, allow me to summarize. 

03:57:52.914 --> 03:57:54.580
Previously, you had to learn 
multiple approaches for doing 

03:57:54.581 --> 03:57:56.581
the same thing.

03:58:02.199 --> 03:58:03.644
Tools lack the mobility to move 
between the layers of the 

03:58:03.645 --> 03:58:05.645
pyramid.

03:58:08.168 --> 03:58:10.168
You had to choose wisely.

03:58:13.809 --> 03:58:15.809
We have reduced a cognitive load
by 

03:58:18.920 --> 03:58:20.920
providing you a single set of 
APIs that 

03:58:22.730 --> 03:58:24.730
work across environments for 
both on and off scenarios. 

03:58:32.240 --> 03:58:34.240
And a single entry point for 
Android 

03:58:35.880 --> 03:58:37.880
tests with the

03:58:39.086 --> 03:58:41.086
customizability at any point.

03:58:44.501 --> 03:58:46.501
JetPack is a giant leap forward 
in test 

03:58:48.363 --> 03:58:50.363
automation for Android

03:58:52.186 --> 03:58:55.107
. Write your test once, run it 
everywhere. 

03:58:58.108 --> 03:59:00.108
[ Applause ] 

03:59:04.711 --> 03:59:06.711
This is just the beginning.

03:59:10.294 --> 03:59:12.294
Now, you have been both the 
tools and 

03:59:13.447 --> 03:59:18.706
the knowledge to accelerate your
testing experience. I strongly 

03:59:18.707 --> 03:59:20.707
encourage you to check out 

03:59:21.725 --> 03:59:24.732
our codelabs, especially, our 
latest edition.

03:59:27.741 --> 03:59:29.741
Build

03:59:33.574 --> 03:59:35.574
addition,

03:59:37.264 --> 03:59:39.392
. Allowing you to build large 
Android apps at Google scale.

03:59:44.559 --> 03:59:46.559
If you have further questions or
would 

03:59:47.917 --> 03:59:49.917
like to discuss your testing 
strategy, 

03:59:52.912 --> 03:59:54.912
come find us tomorrow morning at
11:00 a.m.

04:00:00.127 --> 04:00:02.127
in the office hours in section 8
. 

04:00:02.355 --> 04:00:04.355
We hope you enjoyed our session.

04:00:08.492 --> 04:00:10.492
We will love to hear from you.

04:00:13.065 --> 04:00:15.065
With that, happy testing.

04:00:40.109 --> 04:00:42.109
    Thank you for joining this 
session.

04:00:46.242 --> 04:00:47.675
Brand ambassadors will assist 
with directing you through the 

04:00:47.676 --> 04:00:50.955
designated exits. We'll be 
making room for those registered

04:00:50.956 --> 04:00:55.030
for the next session. If you've 
registered for the next session 

04:00:55.031 --> 04:00:56.458
in this room, we ask that you 
clear the room and return via 

04:00:56.459 --> 04:00:58.459
the registration line outside. 
Thank you.

04:26:23.901 --> 04:26:25.901
. 
   &gt;&gt; SUMIER PHALAKE: All right.

04:26:26.953 --> 04:26:28.953
Hello, everyone, and welcome to 
the 

04:26:30.446 --> 04:26:32.307
Value of Immersive Design 
Sprints. Have you designed and 

04:26:32.308 --> 04:26:34.985
developed products for users 
very different from you? 

04:26:37.431 --> 04:26:38.858
Well, today, we're going to go 
over tips and strategies to 

04:26:38.859 --> 04:26:41.109
deeply understand your user and 
to create effective 

04:26:44.772 --> 04:26:46.804
products for them at speed using
immersive design sprints. 

04:26:50.591 --> 04:26:53.335
I'm Sumier Phalake.

04:26:57.836 --> 04:27:00.060
Building public WI-FI for users 
and next users markets. 

04:27:02.299 --> 04:27:04.299
&gt;&gt; BURGAN SHEALY: And I'm Burgan
on 

04:27:06.586 --> 04:27:08.586
the Chrome team focusing on the 
next billion users.

04:27:11.613 --> 04:27:13.921
Let's jump right in and talk 
about -- oh, what is a design 

04:27:13.922 --> 04:27:15.922
sprint?

04:27:21.505 --> 04:27:23.561
We define a design sprint for a 
framework for answering critical

04:27:25.220 --> 04:27:26.663
business questions through 
design, prototyping and testing 

04:27:26.664 --> 04:27:28.664
our ideas with 

04:27:30.524 --> 04:27:34.005
users to deny actionable 
feedback and insights. The 

04:27:34.006 --> 04:27:35.853
design sprints were created at 
Google and they have evolved 

04:27:35.854 --> 04:27:40.950
over time. There are a mix of 
methods from design thinking, 

04:27:40.951 --> 04:27:43.198
business strategy, psychology 
and user research that were all 

04:27:43.199 --> 04:27:45.199
selected 

04:27:47.664 --> 04:27:49.918
and ordered specifically to 
support divergent and convergent

04:27:49.919 --> 04:27:52.181
thinking and to drive toward a 
targeted outcome. 

04:27:53.649 --> 04:27:55.649
What's different about a design 

04:27:56.903 --> 04:27:58.903
sprint is that we set clear 
goals and deliverables up front.

04:28:00.575 --> 04:28:02.429
We time box all of the 
activities so that we not only 

04:28:02.430 --> 04:28:04.872
speed up the learning and 
development process but we also 

04:28:07.305 --> 04:28:10.166
drive the right behaviors from 
our users. And then, finally, we

04:28:10.167 --> 04:28:12.422
enable a wide range of 
disciplines and stakeholders to 

04:28:13.841 --> 04:28:17.702
participate in the design and 
development process. 

04:28:19.990 --> 04:28:22.429
Now, design is not an individual
sport. And design sprints are a 

04:28:22.430 --> 04:28:25.676
highly collaborative process. We
want to be able to include 

04:28:25.677 --> 04:28:30.365
multiple perspectives and points
of views. And to that end, we 

04:28:30.366 --> 04:28:32.366
leverage sprints to 

04:28:33.974 --> 04:28:35.974
include all participants' 
voices. 

04:28:39.118 --> 04:28:40.101
But the design sprint is a 
highly flexible framework and 

04:28:40.102 --> 04:28:42.143
you'll want to flex it and adapt
it to your particular challenge 

04:28:42.144 --> 04:28:44.144
or scenario.

04:28:49.480 --> 04:28:50.906
You can reduce the risk of 
downstream mistakes by getting 

04:28:50.907 --> 04:28:52.935
to insights that lead to a 
better understanding of your 

04:28:55.787 --> 04:28:57.787
user and your problem space 
quicker. 

04:28:58.639 --> 04:29:01.110
So today, we're going to talk 
about a way that we have flexed 

04:29:01.111 --> 04:29:04.591
the design sprint to really get 
a better understanding of users 

04:29:04.592 --> 04:29:06.592
that are very different from 
ourselves. 

04:29:08.494 --> 04:29:10.494
Through immersion, intercepts 
and 

04:29:12.158 --> 04:29:14.604
cocreation, we're bringing 
actual users instead of 

04:29:14.605 --> 04:29:16.870
representatives of those users 
into the center of the design 

04:29:16.871 --> 04:29:18.871
and development process.

04:29:21.746 --> 04:29:24.172
There's a phenomenon known as 
the co-creation effect. And 

04:29:24.173 --> 04:29:26.642
shows when organizations and 
consumers create something 

04:29:26.643 --> 04:29:31.601
together, both parties are more 
invested in the outcome. 

04:29:33.015 --> 04:29:35.663
What does this look like in 
practice? We're going to start 

04:29:35.664 --> 04:29:37.900
by bringing a team together a 
very different disciplines, 

04:29:40.926 --> 04:29:42.926
include

04:29:47.387 --> 04:29:49.387
to create a powerful team. This 
is going to allow us to 

04:29:50.641 --> 04:29:53.133
dramatically reduce the amount 
of time that we spend 

04:29:53.134 --> 04:29:55.134
communicating and increase the 
number of viable ideas.

04:30:02.933 --> 04:30:04.933
We're going to walk through the 
five sprint phases.

04:30:07.913 --> 04:30:09.913
Understand, sketch, decide, 
prototype and validate. 

04:30:11.430 --> 04:30:13.419
Now, we have a mix of structured
individual work and planned 

04:30:13.420 --> 04:30:15.420
group discussions.

04:30:17.912 --> 04:30:19.339
That support a clear diverge and
converge process that will guide

04:30:19.340 --> 04:30:21.340
the 

04:30:23.607 --> 04:30:25.444
team to get on the same page 
around the artifact it's going 

04:30:25.445 --> 04:30:28.302
to produce to test users . Now, 
the ideal design sprint is going

04:30:30.535 --> 04:30:32.351
to provide time for team members
to reflect on the challenge, and

04:30:32.352 --> 04:30:38.094
also, opportunities to validate 
or disrupt those ideas. 

04:30:40.547 --> 04:30:42.169
So the goal for the first phase,
the understand phase is to 

04:30:42.170 --> 04:30:46.450
gather all of the relevant data 
and information at hand. We 

04:30:46.451 --> 04:30:49.388
really want to create a shared 
brain and align around a new 

04:30:49.389 --> 04:30:51.389
world together and a new 
understanding of the problem 

04:30:51.425 --> 04:30:53.666
space. 
    Then, we're going to move on

04:30:53.667 --> 04:30:58.553
to the sketch phase. And this is
when we're going to generate 

04:30:58.554 --> 04:31:02.233
tons and tons of ideas, tons of 
potential solutions. And we're 

04:31:02.234 --> 04:31:04.271
going to use a couple of 
exercises that are designed to 

04:31:04.272 --> 04:31:09.217
get the ideas out of your 
participant's head on to paper 

04:31:09.218 --> 04:31:13.297
and to really push them to go 
beyond their first idea. They 

04:31:13.298 --> 04:31:15.298
get better and more innovative 
ideas. 

04:31:16.152 --> 04:31:18.197
Now, once we have all of these 
ideas, we're in the middle of a 

04:31:18.198 --> 04:31:22.896
sprint, we have tons and tons of
solutions, it's time to start 

04:31:22.897 --> 04:31:24.897
narrowing down and making hard 
choices.

04:31:26.861 --> 04:31:28.069
So the decide phase is all about
those hard decisions and 

04:31:28.070 --> 04:31:30.070
selecting what you're going to 
prototype with users.

04:31:38.519 --> 04:31:40.519
You can test your hypothesis and
validate your assumptions.

04:31:48.139 --> 04:31:50.395
Maybe you have a day to build 
that prototype, it should only 

04:31:50.396 --> 04:31:52.840
be as high fidelity as needed to
answer your questions and 

04:31:52.841 --> 04:31:54.841
nothing more.

04:31:56.077 --> 04:32:00.588
    Finally, we're going to 
validate. The goal of the test 

04:32:00.589 --> 04:32:04.294
phase is to confirm the product 
you prototyped is good and you 

04:32:04.295 --> 04:32:06.295
prototyped the right thing.

04:32:07.937 --> 04:32:09.984
We're going to discuss two case 
studies to show you how we've 

04:32:09.985 --> 04:32:14.532
used this framework to give 
users the tool to engage in the 

04:32:14.533 --> 04:32:16.533
ideation and creation process.

04:32:26.867 --> 04:32:28.544
Really, you can sprint at any 
point and the life cycle of your

04:32:28.545 --> 04:32:32.234
product. You might be at the 
beginning and want to use a 

04:32:32.235 --> 04:32:34.235
sprint finish visioning or 
creating a road map.

04:32:40.211 --> 04:32:42.052
Whatever point in the life cycle
of your product that you run a 

04:32:42.053 --> 04:32:44.053
sprint, it's important to 
remember that involving 

04:32:47.559 --> 04:32:48.791
users early and often can help 
validate the problem space and 

04:32:48.792 --> 04:32:50.792
create better ideas.

04:32:55.309 --> 04:32:57.309
And there are a couple of 
outcomes from a sprint. 

04:32:57.588 --> 04:32:59.015
I like to say, there's never a 
failed sprint. Because you 

04:32:59.016 --> 04:33:01.016
always learn something.

04:33:03.778 --> 04:33:05.220
We have defined three potential 
outcomes and the first is an 

04:33:05.221 --> 04:33:07.221
official failure.

04:33:08.882 --> 04:33:11.332
It can be a little disspiriting 
that something didn't work. It's

04:33:11.333 --> 04:33:13.333
useful to know.

04:33:16.943 --> 04:33:18.162
Saved all of that time, money 
resources that you spent 

04:33:18.163 --> 04:33:20.163
building out the product and 
then learning it didn't work.

04:33:23.705 --> 04:33:26.423
Now, most sprints fit in this 
middle bucket, what we called 

04:33:26.424 --> 04:33:28.059
flawed success. 
    Some things worked, some 

04:33:28.060 --> 04:33:31.718
things didn't. But you have a 
path forward. You know what you 

04:33:31.719 --> 04:33:34.639
need to do next. And sometimes, 
you have an epic win.

04:33:45.086 --> 04:33:47.970
You'll need to set expectations 
at the beginning of the sprint 

04:33:47.971 --> 04:33:49.971
so everyone is aware of this and
know what the outcomes might be.

04:33:52.259 --> 04:33:54.259
Let's talk a little bit about 
immersion.

04:34:00.204 --> 04:34:02.204
   &gt;&gt; SUMIER PHALAKE: And the 
reason 

04:34:05.349 --> 04:34:06.608
that we rushed through that is 
because we're assuming if you're

04:34:06.609 --> 04:34:10.486
here, then you've heard of a 
design sprint before. You have 

04:34:10.487 --> 04:34:12.313
most likely taken part in a 
design sprint before and maybe 

04:34:12.314 --> 04:34:14.343
some of you have even run your 
own design sprints.

04:34:17.778 --> 04:34:20.441
So we're going to jump into 
immersion. 

04:34:22.902 --> 04:34:24.757
Now, before we talk about 
immersive sprints, let's 

04:34:24.758 --> 04:34:26.758
understand what immersion 
actually means.

04:34:29.865 --> 04:34:31.292
To think about immersion, I went
to Google and looked up the 

04:34:31.293 --> 04:34:34.016
dictionary. And here's a 
definition of the term 

04:34:34.841 --> 04:34:36.841
immersion. 

04:34:38.172 --> 04:34:40.646
Immersion is instruction based 
on extensive exposure to 

04:34:40.647 --> 04:34:44.112
surroundings or conditions that 
are NAT i or pertinent to the 

04:34:44.113 --> 04:34:47.379
object of study. 
    This is a lot to take in. So

04:34:47.380 --> 04:34:50.048
I kept Googling. Here's another 
definition, much simpler.

04:34:53.091 --> 04:34:55.091
Immersion is a deep, mental 
involvement.

04:34:56.347 --> 04:34:58.810
Here's the third one. Immersion 
is the state of being deeply 

04:35:00.446 --> 04:35:02.693
engaged or involved, absorption.
    All right, there's common 

04:35:02.694 --> 04:35:06.628
themes emerging from all of 
these definitions. Let's bring 

04:35:06.629 --> 04:35:09.918
this back to UX. How can 
immersion guide your interaction

04:35:09.919 --> 04:35:15.502
with users? Especially, users 
that you don't know very well? I

04:35:15.503 --> 04:35:17.503
like to think of it in terms of 
three steps.

04:35:19.781 --> 04:35:23.817
    Immersion is about 
awareness. So, first, doing the 

04:35:23.818 --> 04:35:27.751
background research and study 
that it actually takes before 

04:35:27.752 --> 04:35:29.752
you go into a new environment 
and users.

04:35:37.566 --> 04:35:38.587
They can provide you the context
you need to process that 

04:35:38.588 --> 04:35:40.588
correctly.

04:35:47.600 --> 04:35:49.631
Observing without bias or 
judgment. That's awareness. 

04:35:51.503 --> 04:35:53.503
Step two, immersion is about 
listening.

04:35:55.599 --> 04:35:58.459
So you're going to hear a lot of
new sounds, process a lot of new

04:35:58.460 --> 04:36:02.531
sights, you're going to talk to 
a lot of users you haven't 

04:36:02.532 --> 04:36:03.971
interacted with before. And 
these users are going to tell 

04:36:03.972 --> 04:36:07.832
you about their lives, about 
their problems. Problems that 

04:36:07.833 --> 04:36:09.833
you haven't faced before . 

04:36:11.127 --> 04:36:13.769
And so, it's really important to
listen attentively. And this is 

04:36:13.770 --> 04:36:16.239
actually pretty hard to do. If 
you tried yourself right now, 

04:36:16.240 --> 04:36:20.763
when you try to listen to 
someone speaking, it's very easy

04:36:20.764 --> 04:36:23.210
to let your mind wander and 
think about what you want to say

04:36:23.406 --> 04:36:28.108
next. It's very hard to 
mindfully listen. I hope that's 

04:36:28.109 --> 04:36:30.109
not what you all are doing right
now, by the way. 

04:36:32.599 --> 04:36:34.599
It's really important to listen 
attentively.

04:36:36.697 --> 04:36:37.720
That's step two, and step three 
is taking awareness and taking 

04:36:37.721 --> 04:36:39.721
listening and bringing it to 
empathy.

04:36:42.412 --> 04:36:44.276
This is when you're actually 
stepping into someone's shoes 

04:36:44.277 --> 04:36:48.520
and experiencing what they 
experience, understanding their

04:36:52.459 --> 04:36:54.459
needs, pain points and hopes and
dreams.

04:36:56.175 --> 04:36:57.818
When you have awareness, 
listening, empathy, all of the 

04:36:57.819 --> 04:36:59.819
two things together, 

04:37:01.064 --> 04:37:03.064
that's when we consider it 
immersion. How does this relate?

04:37:04.948 --> 04:37:06.948
-- to design sprints and design?

04:37:10.726 --> 04:37:12.726
You're making a call and 
designing 

04:37:14.172 --> 04:37:17.104
solutions for users based on 
what you think is going to work 

04:37:17.105 --> 04:37:20.807
well for them. Where does this 
come from? It comes from 

04:37:20.808 --> 04:37:23.866
intuition, right? And how does 
it get built? 

04:37:26.364 --> 04:37:29.654
It comes from a lifetime of 
experience. It comes from 

04:37:29.655 --> 04:37:32.137
knowledge and STOED, trial and 
error, like launching a lot of 

04:37:33.589 --> 04:37:35.020
designs and seeing what works 
and learning from success, 

04:37:35.021 --> 04:37:37.021
learning from 

04:37:39.353 --> 04:37:41.788
failure -- it's a constant loop 
of learning and tweaking. But 

04:37:41.789 --> 04:37:43.628
when you're designing for LURZs 
that you've never interacted 

04:37:43.629 --> 04:37:46.896
with before, you don't have this
intuition. 

04:37:47.912 --> 04:37:49.912
What happens in the context of a
sprint?

04:37:55.268 --> 04:37:57.268
In a sprint, you're time boxed, 
doing 

04:37:58.909 --> 04:38:00.909
things really

04:38:04.636 --> 04:38:06.636
fast, it's a high pressure

04:38:07.971 --> 04:38:12.880
situation. We're often placed in
situations like this. Because we

04:38:12.881 --> 04:38:17.148
both work on products where 
we're distant from our users. We

04:38:17.149 --> 04:38:19.149
don't understand our users very 
well that often. What happens?

04:38:21.030 --> 04:38:23.514
You've seen that in sprints like
this, there's analysis 

04:38:23.515 --> 04:38:25.558
paralysis. 
    Because your sprinters are 

04:38:25.559 --> 04:38:28.651
not confident about deciding how
to move forward with your 

04:38:28.652 --> 04:38:30.652
design.

04:38:33.395 --> 04:38:35.395
You end up making safe choices. 
So your design solutions are not

04:38:35.638 --> 04:38:37.476
strong, sprint outcomes suffer. 
You just don't see that big leap

04:38:37.477 --> 04:38:40.319
that you want to see at the end 
of a sprint. 

04:38:43.001 --> 04:38:46.675
So we need to help you and your 
sprinters build intuition. How 

04:38:46.676 --> 04:38:48.676
do we do this?

04:38:49.790 --> 04:38:51.790
So we think immersion is a great
solution to doing this.

04:38:55.529 --> 04:38:57.370
Good design and sprints is about
making educated and informed 

04:38:57.371 --> 04:38:59.371
decisions about 

04:39:00.666 --> 04:39:03.305
how to solve a problem that your
users are facing. With 

04:39:03.306 --> 04:39:05.306
immersion, you're helping your 
sprinters gain the foundation to

04:39:06.182 --> 04:39:08.182
confidently design solutions.

04:39:12.727 --> 04:39:14.727
Let's bring it all together.

04:39:17.857 --> 04:39:20.057
Guide your sprinters, drive 
great outcomes and validate 

04:39:20.058 --> 04:39:22.113
sprint outcomes. 
    If you don't understand your

04:39:22.114 --> 04:39:26.410
users really well and you want 
to design solutions for them in 

04:39:26.411 --> 04:39:30.103
a fast-paced sprint environment,
then immersion is a great 

04:39:30.104 --> 04:39:32.104
technique to set you up for 
success.

04:39:34.832 --> 04:39:36.832
How do we do this?

04:39:38.550 --> 04:39:40.550
Going over a few techniques 
today.

04:39:53.286 --> 04:39:55.325
Participatory design sprint. You
actually ask your users to come 

04:39:55.326 --> 04:39:57.634
to the sprint with you and take 
part in it as a sprinter. 

04:39:59.872 --> 04:40:01.872
And then, last, instead of 
saving 

04:40:03.370 --> 04:40:05.219
validation for the last stage, 
incorporate validation at every 

04:40:05.220 --> 04:40:10.731
stage of the sprint. Make sure 
you check in with your users at 

04:40:10.732 --> 04:40:12.732
the end of each day so you know 
you're on the right path.

04:40:21.591 --> 04:40:23.591
We're walking through two case 
studies.

04:40:24.845 --> 04:40:26.845
First, I'm going to hand it 
offer to 

04:40:28.357 --> 04:40:29.574
Burgen to talk about an 
interesting sprint she ran in 

04:40:29.575 --> 04:40:31.575
Kenya.

04:40:36.173 --> 04:40:40.893
   &gt;&gt; BURGAN SHEALY: We were 
kicking off this app to help 

04:40:40.894 --> 04:40:42.894
herders survive ongoing drought.

04:40:46.456 --> 04:40:48.456
Pastoralists move their 
livestock 

04:40:50.274 --> 04:40:52.509
between pastors depending on the
season. And rainfall patterns 

04:40:52.510 --> 04:40:54.510
have shifted.

04:40:58.743 --> 04:41:01.414
Forcing herders to find new 
routes and pastures sources of 

04:41:01.415 --> 04:41:03.415
waters.

04:41:07.961 --> 04:41:09.580
Word of mouth, scouting, 
ancestral knowledge have proven 

04:41:09.581 --> 04:41:12.248
insufficient to maintain healthy
herds in this changing 

04:41:12.450 --> 04:41:14.450
landscape.

04:41:17.957 --> 04:41:20.009
An organization called project 
concern international, a 

04:41:20.010 --> 04:41:22.010
nonprofit based in San Diego and
a Google.

04:41:24.504 --> 04:41:26.504
org grantee created a program 
that 

04:41:27.996 --> 04:41:29.663
relaid satellite data to 
pastoralists that showed current

04:41:29.664 --> 04:41:31.664
vegetative conditions.

04:41:37.017 --> 04:41:39.279
    The proof of concept was 
highly 

04:41:44.851 --> 04:41:46.879
SETSZly successful, we saw an 
80% adoption rate in the local 

04:41:46.880 --> 04:41:48.880
populations it was tested with.

04:41:52.605 --> 04:41:54.605
The delivery system was 
cumbersome and inefficient.

04:42:02.613 --> 04:42:03.826
District livestock officers 
would then pass them on to the 

04:42:03.827 --> 04:42:08.106
locals. So this process was slow
and difficult to scale. 

04:42:11.591 --> 04:42:13.614
So our question was, would it be
possible for us to cut out those

04:42:13.615 --> 04:42:16.109
middle men and simply deliver 
the maps from the 

04:42:20.550 --> 04:42:22.550
satellite straight to 
smartphones

04:42:23.702 --> 04:42:25.536
? As we planned the sprint, we 
recognized the difficulty in 

04:42:25.537 --> 04:42:30.492
properly understanding the 
cultural, societal and usage 

04:42:30.493 --> 04:42:33.008
scenarios encountered by 
population so different from 

04:42:33.009 --> 04:42:36.259
ourselves. 
    But we knew that the 

04:42:36.260 --> 04:42:38.260
community as experts of their 
own experience would 

04:42:42.187 --> 04:42:44.208
have the historical context and 
the knowledge of what was and 

04:42:44.209 --> 04:42:47.320
what wasn't important to the 
community. Rather than consult 

04:42:47.321 --> 04:42:49.321
the community, we decided to 
involve it. 

04:42:51.412 --> 04:42:53.238
Now, as designers and 
developers, we often create 

04:42:53.239 --> 04:42:55.239
products for people.

04:42:57.788 --> 04:42:59.852
Co-design is the act of creating
with stakeholders and users, 

04:42:59.853 --> 04:43:01.853
ensuring that 

04:43:03.155 --> 04:43:05.607
the people most effected by the 
solutions are part of the 

04:43:05.608 --> 04:43:09.280
development process. And this is
really based on the idea and the

04:43:09.281 --> 04:43:11.726
belief that all people are 
creative. 

04:43:13.589 --> 04:43:15.225
The design sprint gives us a 
framework to put this into 

04:43:15.226 --> 04:43:20.561
practice. And through the sprint
process, we can guide users to 

04:43:20.562 --> 04:43:22.595
the ideation and creation 
process to really give voice to 

04:43:22.596 --> 04:43:24.596
their ideas.

04:43:28.515 --> 04:43:31.015
As you can imagine, we had a lot
of different perspectives around

04:43:31.016 --> 04:43:35.714
this challenge. Had to build the
right sprint team and quite a 

04:43:35.715 --> 04:43:37.715
large team with a number of 
diverse stakeholders. 

04:43:40.622 --> 04:43:42.448
We had our geographic 
information system specialist 

04:43:42.449 --> 04:43:45.720
who was our mapping specialist. 
We had local developers and a UX

04:43:49.379 --> 04:43:51.379
researcher from ihub, which is 
an 

04:43:52.888 --> 04:43:54.888
incubation space in Nairobi.

04:43:56.543 --> 04:43:58.543
And we had UX designers from 
Google.

04:44:01.401 --> 04:44:02.813
But most importantly, we had two
pastoralists from different 

04:44:02.814 --> 04:44:04.814
districts in Tanzania.

04:44:19.968 --> 04:44:22.114
Now, this team required the 
integration of experts and users

04:44:22.115 --> 04:44:24.337
really working closely together.
So empathy between our 

04:44:24.338 --> 04:44:28.003
participants was essential and 
face-to-face communication was 

04:44:28.004 --> 04:44:30.004
best. 

04:44:31.714 --> 04:44:33.987
So we all gathered in ihub's 
office in Nairobi.

04:44:37.683 --> 04:44:39.107
Now co-creation can be applied 
at any stage of the design 

04:44:39.108 --> 04:44:41.108
development process through 
different activities. 

04:44:42.599 --> 04:44:44.018
And as we created the schedule, 
we thought deeply about how to 

04:44:44.019 --> 04:44:48.565
include our users at each stage 
of this process. And by 

04:44:48.566 --> 04:44:50.615
incorporating user feedback 
throughout the process.

04:44:56.777 --> 04:44:58.846
We're going to see the human 
tendency to rely on that first 

04:44:58.847 --> 04:45:01.524
piece of information. To make 
subsequent judgments.

04:45:07.073 --> 04:45:09.073
Our users helped us understand 
the 

04:45:10.547 --> 04:45:15.059
problems phase through lightning
talks and documenting. You can 

04:45:15.060 --> 04:45:17.285
see some of the topics we 
discussed were technical 

04:45:17.286 --> 04:45:19.286
infrastructure, offline 
experience, battery life, 

04:45:20.552 --> 04:45:22.552
traditional decisionmaking.

04:45:32.537 --> 04:45:34.219
It wasn't something we would 
talk about if we ran this sprint

04:45:34.220 --> 04:45:36.220
in San Diego or 

04:45:37.613 --> 04:45:39.613
here in Mountainview.

04:45:41.384 --> 04:45:43.384
We learned the elders make a lot
of the 

04:45:44.862 --> 04:45:45.942
decisions of where to move the 
herds. But the younger 

04:45:45.943 --> 04:45:47.943
generation are the ones with the
smartphones. 

04:45:50.272 --> 04:45:52.717
We had to take those types of 
things into consideration as we 

04:45:52.718 --> 04:45:54.718
considered the design.

04:45:57.017 --> 04:45:58.222
To make the pastoralist 
experience resonate with all of 

04:45:58.223 --> 04:46:00.223
the team members, 

04:46:01.509 --> 04:46:03.187
we broke into groups and created
user journey maps. These are 

04:46:03.188 --> 04:46:05.188
really important.

04:46:06.691 --> 04:46:08.691
People are good in terms of 
stories of people.

04:46:23.574 --> 04:46:25.006
We use crazy eights to generate 
a ton of different ideas based 

04:46:25.007 --> 04:46:28.702
on everything we learned in the 
understand phase and to help our

04:46:28.703 --> 04:46:30.559
users with this activity. We 
really gave some structure to 

04:46:30.560 --> 04:46:32.560
it.

04:46:39.291 --> 04:46:42.283
Did this in four phases. And we 
gave our users more power in the

04:46:45.140 --> 04:46:47.140
decisionmaking process with 
extra votes 

04:46:49.194 --> 04:46:51.194
and reminded our other 
participants to 

04:46:52.485 --> 04:46:54.485
evaluate each idea considering 
what our 

04:46:56.914 --> 04:46:59.626
audience experienced and what 
they wanted. Depending on the 

04:46:59.627 --> 04:47:04.193
level of fidelity you're aiming 
for, one of the most difficult 

04:47:04.194 --> 04:47:06.194
phases to incorporate users can 
be the prototyping phase.

04:47:17.573 --> 04:47:20.414
We considered letting our users 
go during this phase. But they 

04:47:20.415 --> 04:47:22.415
they wanted to stay. 

04:47:25.104 --> 04:47:27.626
And their participation actually
proved crucial. When the 

04:47:27.627 --> 04:47:29.042
designers were designing this 
middle screen, they were 

04:47:29.043 --> 04:47:33.947
struggling to come up with 
iconography that would really 

04:47:33.948 --> 04:47:35.570
represent some of the diverse 
ideas that we were trying to get

04:47:35.571 --> 04:47:37.615
across. Like, this location has 
no water.

04:47:41.265 --> 04:47:43.090
Or, scary animals were sighted 
in this location, maybe you 

04:47:43.091 --> 04:47:45.091
shouldn't take your herd there. 

04:47:49.012 --> 04:47:51.012
We were able to rapidly iterate 
and 

04:47:52.087 --> 04:47:53.716
show the designs to the users 
and get immediate feedback so we

04:47:53.717 --> 04:47:57.182
were able to confirm which icons
resonated and which ones didn't.

04:47:58.001 --> 04:48:01.872
    So for user testing, it was 
important to solicit feedback 

04:48:01.873 --> 04:48:03.873
from a 

04:48:04.924 --> 04:48:07.965
larger and more diverse group 
than was just the sprint team. 

04:48:07.966 --> 04:48:10.201
If you'll remember, we had 
sprinters from Ethiopia and 

04:48:10.202 --> 04:48:14.921
Tanzania. But we were in Kenya. 
Western able to go about an hour

04:48:14.922 --> 04:48:16.922
south 

04:48:18.545 --> 04:48:21.326
of Nairobi and test our 
prototype.

04:48:27.441 --> 04:48:30.718
And the approach we chose would 
transcend tribal boundaries. 

04:48:35.004 --> 04:48:36.844
The sprint process allowed us to
find common ground and develop a

04:48:36.845 --> 04:48:40.558
common language and work 
together to fully understand the

04:48:40.559 --> 04:48:42.559
user needs from the outset of 
the project.

04:48:53.031 --> 04:48:56.936
   &gt;&gt; SUMIER PHALAKE: What an 
impactful sprint. So cool. I'm 

04:48:56.937 --> 04:48:57.958
going to switch gears a bit and 
talk about the product I work on

04:48:57.959 --> 04:49:01.427
and that's Google station. Now, 
just as a recap, Google station 

04:49:01.428 --> 04:49:03.478
is a product that's bringing 
high-quality 

04:49:07.195 --> 04:49:10.033
public WI-FI to the user markets
worldwide. A little bit of a 

04:49:10.034 --> 04:49:13.341
caveat, I can't really talk 
about the actual product that we

04:49:13.342 --> 04:49:14.970
were designing in the sprint, 
but I can the talk about the 

04:49:14.971 --> 04:49:16.971
process. And that's what I'm 
going to do here.

04:49:24.072 --> 04:49:26.072
So a while ago, someone on our

04:49:27.753 --> 04:49:29.753
team

04:49:32.235 --> 04:49:35.745
they -- -- we talked to this 
team and that team got super 

04:49:35.746 --> 04:49:37.985
excited. 
    We were all, like, ready to 

04:49:37.986 --> 04:49:41.558
have this happen. But we didn't 
know how. We didn't know what 

04:49:41.559 --> 04:49:47.492
this experience would look like.
Great reason to have a sprint. 

04:49:47.493 --> 04:49:49.718
We also had never worked 
together as a team. So there 

04:49:49.719 --> 04:49:51.368
was, like, no working 
relationship. 

04:49:51.369 --> 04:49:53.401
Another great reason to have a 
sprint to bring teams together 

04:49:53.402 --> 04:49:59.715
so they can establish trust. 
Now, here's another challenge. 

04:49:59.716 --> 04:50:01.716
The Google station team is based
largely in mountain view.

04:50:05.276 --> 04:50:06.522
This other product is based in 
Asia and at the time, the user 

04:50:06.523 --> 04:50:08.584
we were designing for was in 
India . 

04:50:10.635 --> 04:50:12.635
So three different countries. 
Really challenging.

04:50:18.254 --> 04:50:19.878
And going back to the slide that
Burgan showed earlier, we had an

04:50:19.879 --> 04:50:23.183
answer from the business side 
how this product would work. And

04:50:23.184 --> 04:50:25.828
we also knew from an engineering
standpoint we could most likely 

04:50:25.829 --> 04:50:29.717
make it work. But what we didn't
know is this something that our 

04:50:29.718 --> 04:50:32.164
users even care about? 
    We didn't know if this was 

04:50:32.165 --> 04:50:34.165
desirable for our users.

04:50:36.050 --> 04:50:38.050
So this big gap was something we
needed to address.

04:50:39.818 --> 04:50:41.818
So we decided that we should run
an immersive sprint.

04:50:44.495 --> 04:50:46.495
So the sprint challenge was 
design and 

04:50:48.381 --> 04:50:50.012
experience aligned with user 
needs that would combine 

04:50:50.013 --> 04:50:52.013
functionality of two products in
a very seamless way.

04:50:55.108 --> 04:50:56.343
But before we could even talk 
about seamless and the 

04:50:56.344 --> 04:50:58.840
interaction design and all of 
that, I really wanted us to 

04:51:00.693 --> 04:51:02.693
figure out does this make sense 
for our users.

04:51:17.799 --> 04:51:19.424
Is there a strong user focus 
strategy for this product? 

04:51:19.425 --> 04:51:21.474
And this was critical. We didn't
know if this would work for our 

04:51:21.475 --> 04:51:24.916
users. And this product strategy
needed to come from actual user 

04:51:24.917 --> 04:51:27.184
insights. We didn't know our 
user that well. 

04:51:29.623 --> 04:51:33.517
So we added two more phases to 
the sprint. Before the sprint, 

04:51:33.518 --> 04:51:37.220
we added research. After the 
sprint, we added research. 

04:51:37.221 --> 04:51:39.252
Different kinds of research, 
though. Before the sprint, we 

04:51:39.253 --> 04:51:41.253
added foundational research.

04:51:44.979 --> 04:51:46.408
#1K7 And we were going to 
validate the design solutions we

04:51:46.409 --> 04:51:48.409
come up with with the research 
to validate it.

04:51:50.885 --> 04:51:52.885
So that was

04:51:55.304 --> 04:51:56.724
also a different style of 
research. 

04:51:56.725 --> 04:51:59.579
This extended the duration of 
the sprint. And we invited all 

04:51:59.580 --> 04:52:02.009
of our participants to take part
in the research. We thought this

04:52:02.010 --> 04:52:04.038
was really important because 
that would be an immersive 

04:52:05.473 --> 04:52:06.689
experience for them and lay the 
foundation for them to 

04:52:06.690 --> 04:52:10.154
effectively participate in the 
sprint and come up with great 

04:52:10.155 --> 04:52:14.853
design solutions? . So this was 
also a lot of overhead in terms 

04:52:14.854 --> 04:52:16.854
of planning.

04:52:19.145 --> 04:52:21.145
. So this was also a lot of 
overhead in terms of planning.

04:52:22.391 --> 04:52:25.637
That meant travel, going out 
into the field. Understand the 

04:52:25.638 --> 04:52:28.340
user context during foundational
research. Use the user insights 

04:52:28.341 --> 04:52:31.446
to drive the entire sprint. 
    And then, when you have 

04:52:31.447 --> 04:52:35.307
design solutions as outcomes, 
take them back into the field to

04:52:35.308 --> 04:52:38.601
validate them with your users. 
So that was the process that we 

04:52:39.208 --> 04:52:41.208
followed.

04:52:43.484 --> 04:52:45.484
How did we do the research?

04:52:46.936 --> 04:52:48.957
For both the pre and post sprint
research, we used a technique 

04:52:48.958 --> 04:52:50.958
known as intercepts. 

04:52:53.020 --> 04:52:55.680
By intercepts, I mean going out 
into the field, finding a user, 

04:52:55.681 --> 04:52:59.418
asking them if they can spend a 
few minutes with you and then 

04:52:59.419 --> 04:53:01.419
doing an interview.

04:53:05.522 --> 04:53:10.190
    A lot of foundational 
information about them or show 

04:53:10.191 --> 04:53:15.295
them a prototype. This could be 
a clickable prototype, it could 

04:53:15.296 --> 04:53:17.296
be a live product.

04:53:20.171 --> 04:53:22.171
You can ask them to use this 
prototype 

04:53:23.250 --> 04:53:25.511
to do certain tasks and observe 
how they do it. And this would 

04:53:25.512 --> 04:53:27.512
be evaluative.

04:53:33.674 --> 04:53:36.108
It's also in a user's natural 
environment. So instead of 

04:53:36.109 --> 04:53:38.563
bringing a user to you and 
asking them to come to a lab, 

04:53:38.564 --> 04:53:41.622
you're going out to a user. 
You're putting them at ease.

04:53:45.362 --> 04:53:47.193
And prototypes are totally okay.
One of the things I really love 

04:53:47.194 --> 04:53:51.664
about intercepts is that they're
really scrappy. You can put them

04:53:51.665 --> 04:53:53.665
together in a short time. 

04:53:55.980 --> 04:53:57.803
And also they're cross 
functional, this gives your team

04:53:57.804 --> 04:53:59.804
your nonuser experience research
and design team, 

04:54:03.099 --> 04:54:05.139
your PMs, engineers to take part
in research and come face to 

04:54:05.140 --> 04:54:07.140
face with the users.

04:54:13.316 --> 04:54:14.937
That was the research part. 
Let's talk about that strategy 

04:54:14.938 --> 04:54:17.176
piece. 
    To figure out if we had the 

04:54:17.177 --> 04:54:19.609
right user focus product 
strategy, use a 

04:54:24.115 --> 04:54:26.115
technique known as Value Prop 
Canvas.

04:54:28.785 --> 04:54:30.620
We asked users using Google 
Station. We made a list of all 

04:54:30.621 --> 04:54:33.670
of the features in that product.
And what the pain points of 

04:54:33.671 --> 04:54:36.736
users were, using Google Station
then. So we had all of the user 

04:54:36.737 --> 04:54:40.825
pains. Then, we made a list of 
all of the gains that users are 

04:54:40.826 --> 04:54:42.826
seeing by using that product.

04:54:45.338 --> 04:54:47.359
So we knew the user gains and 
then went to the sprint, been 

04:54:47.360 --> 04:54:50.017
through a lot of sketching, 
diverged, voted on ideas, we 

04:54:52.850 --> 04:54:54.850
converged, with came up with a 
few solutions. 

04:54:55.293 --> 04:54:57.293
We did the same with the 
solutions.

04:54:59.365 --> 04:55:01.202
Any of the features in the 
solution going to relieve the 

04:55:01.203 --> 04:55:03.203
pains that the 

04:55:04.994 --> 04:55:08.049
users are facing, boost the 
gains that users are seeing? If 

04:55:08.050 --> 04:55:10.085
both of these map, you know what
your designer is great for 

04:55:10.086 --> 04:55:12.086
users. 

04:55:13.087 --> 04:55:15.087
&gt;&gt;&gt;

04:55:17.433 --> 04:55:19.412
You have to decide whether this 
makes sense to move forward 

04:55:19.413 --> 04:55:22.389
with. 
    This is what we use finish 

04:55:22.390 --> 04:55:24.390
exploring product strategy.

04:55:38.148 --> 04:55:40.399
If I hadn't taken the time to 
add a strategy piece, we 

04:55:40.400 --> 04:55:41.621
wouldn't have been successful. 
Think about the sequence of 

04:55:41.622 --> 04:55:43.622
products, 

04:55:44.673 --> 04:55:47.310
do a dry run, try to see if one 
method feeds into the other, 

04:55:47.311 --> 04:55:49.380
does the output of one method 
feed into the input of the 

04:55:49.381 --> 04:55:51.381
other.

04:55:52.703 --> 04:55:55.779
Is there a gap? Then address it.
Make stakeholders your partners,

04:55:57.399 --> 04:55:59.236
especially a broad sprint like 
this, you want them to be your 

04:55:59.237 --> 04:56:01.237
partners, want them to agree 
with you, invest the time and 

04:56:02.699 --> 04:56:04.699
money and resources and you want
to do 

04:56:07.401 --> 04:56:09.401
daily check-ins with them. 

04:56:11.061 --> 04:56:13.635
Get feedback, work on it. I've 
never run a sprint always gone 

04:56:14.232 --> 04:56:16.919
according to plan. Things go 
wrong, people have questions, 

04:56:18.940 --> 04:56:20.940
they question the very premise 
of pure sprint.

04:56:22.238 --> 04:56:24.678
Things take too long to run, 
methods don't go as you plan. 

04:56:24.679 --> 04:56:26.679
Logistical issues.

04:56:28.373 --> 04:56:29.386
So be nimble, be agile, be 
prepared to change things around

04:56:29.387 --> 04:56:32.660
on the fly. 
    One of the great side 

04:56:32.661 --> 04:56:34.661
benefits of a sprint is that 
you're bringing two teams 

04:56:38.175 --> 04:56:40.214
together who have not worked 
together and you're going to 

04:56:40.215 --> 04:56:42.903
drive a lot of alignment between
them and strong relationship 

04:56:42.904 --> 04:56:45.348
between them. No matter what 
happens, you're going to get 

04:56:45.349 --> 04:56:48.204
that and we got that. 
    And then, the last thing I 

04:56:48.205 --> 04:56:52.692
wanted to leave you with for 
this case study is that this was

04:56:52.693 --> 04:56:54.693
a super successful sprint 

04:56:56.504 --> 04:56:58.504
for us not because

04:57:01.483 --> 04:57:03.703
we -- we actually learned we did
not have a strong value 

04:57:03.704 --> 04:57:05.704
proposition with this new idea.

04:57:11.488 --> 04:57:13.488
We decided we didn't want to 
move forward with this. 

04:57:14.796 --> 04:57:16.823
The fact that the sprint helped 
us understand very quickly if 

04:57:16.824 --> 04:57:21.153
the time, effort and resources 
required to build this was worth

04:57:21.154 --> 04:57:23.154
it makes it super powerful for 
us.

04:57:30.877 --> 04:57:32.935
So you might be thinking, I'm 
not going to Kenya and I'm not 

04:57:32.936 --> 04:57:34.936
going to India.

04:57:36.391 --> 04:57:38.391
Why does any of this matter to 
me?

04:57:41.194 --> 04:57:41.824
Have you designed for users in 
regions different from where you

04:57:41.825 --> 04:57:43.825
live? I bet you have.

04:57:46.872 --> 04:57:51.507
Have youer ever designed or 
developed? The kids, elderly, 

04:57:51.508 --> 04:57:54.196
minorities, people less tech is 
savvy than you? I bet you have.

04:57:58.686 --> 04:58:01.795
Have you designed for use cases 
you aren't familiar with? Have 

04:58:01.796 --> 04:58:03.796
you made a product for the 

04:58:05.017 --> 04:58:06.663
automotive industry or made a 
fitness app and never been to 

04:58:06.664 --> 04:58:10.437
the gym? You know? We do this 
all the time. This is our job.

04:58:14.448 --> 04:58:16.448
Immersive sprints are perfect 
for these use cases. 

04:58:18.313 --> 04:58:20.166
And why they're powerful is you 
know have the opportunity to 

04:58:20.167 --> 04:58:22.167
bring your team 

04:58:23.634 --> 04:58:25.634
with you to learn instead of 
doing 

04:58:28.057 --> 04:58:29.398
research in a silo and bringing 
a research report back, you can 

04:58:29.399 --> 04:58:31.642
bring them with you. This is 
where the power of sprints 

04:58:32.255 --> 04:58:34.255
really shines through.

04:58:36.520 --> 04:58:38.617
They're cross-functional, 
participatory and democratic. 

04:58:38.618 --> 04:58:40.618
    So now, I'm going to present
some 

04:58:44.564 --> 04:58:46.564
tips to run your own immersive 
sprints with Burgan.

04:58:50.627 --> 04:58:53.922
So the very first one, I bent 
over a little bit in advance. 

04:58:53.923 --> 04:58:56.980
Intercepts. A great research 
method. They're very scrappy and

04:58:56.981 --> 04:59:00.240
fast. They don't work well when 
you need to recreate a lab 

04:59:00.241 --> 04:59:02.241
setting.

04:59:04.116 --> 04:59:06.116
So if you're doing -- and you 
need 

04:59:08.410 --> 04:59:09.867
hardware, you want to recreate a
home, intercepts don't work 

04:59:09.868 --> 04:59:11.868
well.

04:59:13.965 --> 04:59:16.189
If you have an app, prototypes, 
talk to users and learn about 

04:59:16.190 --> 04:59:18.190
them, intercepts are great. 

04:59:21.839 --> 04:59:23.667
Now, it's important to know if 
you go in a large group of ten 

04:59:23.668 --> 04:59:27.895
people trying to talk too one 
user, you're going to scare them

04:59:27.896 --> 04:59:30.937
off. Don't do that. Try to split
up into smaller groups. And 

04:59:30.938 --> 04:59:33.386
then, split up and talk to 
people on your own, come back, 

04:59:33.387 --> 04:59:35.387
regroup and share your notes.

04:59:40.412 --> 04:59:42.661
There's a couple over things to 
be aware of. Be aware of 

04:59:42.662 --> 04:59:44.662
cultural nuances.

04:59:46.566 --> 04:59:47.992
How to talk to people, address 
them, do some research 

04:59:47.993 --> 04:59:49.993
beforehand. 

04:59:51.308 --> 04:59:53.308
Get good interpreters or 
translators.

04:59:55.993 --> 04:59:57.993
There might be important nuances
that you would miss.

05:00:02.146 --> 05:00:04.643
If it's possible and if your 
user is okay with it, ask them 

05:00:04.644 --> 05:00:08.391
beforehand if you can take a 
video. If they say, yes, take a 

05:00:08.392 --> 05:00:10.392
video of your interaction with 
them. 

05:00:11.047 --> 05:00:13.047
Because when you take a video 
back 

05:00:14.109 --> 05:00:15.986
to your team, it is super 
powerful. Way more powerful than

05:00:15.987 --> 05:00:17.987
a research report can be.

05:00:19.883 --> 05:00:25.505
    Paper prototypes and focus 
groups are okay for this. You're

05:00:25.506 --> 05:00:28.565
talking to so many users, you 
correct for that. And then, 

05:00:28.566 --> 05:00:30.566
watch out for selection bias.

05:00:31.843 --> 05:00:34.117
We have an idea in our head of 
who our user is. So there's, 

05:00:34.118 --> 05:00:36.367
like, a bias to go and talk to 
users that you think would be 

05:00:36.368 --> 05:00:40.992
likely users of your app. Don't 
do that. You're outside in the 

05:00:40.993 --> 05:00:43.956
field. You have access to a 
diverse range of users.

05:00:52.802 --> 05:00:57.683
    So we try not to tell them 
that, hey, I designed this, give

05:00:57.684 --> 05:01:02.433
me your feedback. They'll be 
nice to you and tell you this is

05:01:02.434 --> 05:01:04.719
amazing even if they don't like 
it. We try to save that 

05:01:04.720 --> 05:01:09.187
information for after the 
interview. 

05:01:10.852 --> 05:01:12.683
&gt;&gt; BURGAN SHEALY: Those are 
great tips and they'll apply to 

05:01:12.684 --> 05:01:14.927
co-design, as well. It's a 
fundamental change in the 

05:01:16.761 --> 05:01:18.761
relationship between product 
creators and users.

05:01:21.054 --> 05:01:23.054
Traditionally, experts have gone
out 

05:01:24.099 --> 05:01:26.099
and observed, done interviews, 
with 

05:01:27.559 --> 05:01:29.799
mostly passive users. Co-design,
users are involved in the 

05:01:31.232 --> 05:01:32.854
ideation and the creation 
process. You really want to 

05:01:32.855 --> 05:01:34.855
prepare your users 

05:01:35.996 --> 05:01:37.996
in advance, let them know what 
to expect 

05:01:39.253 --> 05:01:40.463
in the design sprint, talk about
the different activities they 

05:01:40.464 --> 05:01:44.960
might go through and help the 
them reflect on their 

05:01:44.961 --> 05:01:46.961
experiences that they normally 
perceive as routine. 

05:01:48.942 --> 05:01:51.796
So, perhaps, you ask them to do 
a diary study beforehand or have

05:01:51.797 --> 05:01:56.267
them talk to other members of 
their community to get a wider 

05:01:56.268 --> 05:01:59.925
perspective. Logistics are also 
quite important. You're going to

05:01:59.926 --> 05:02:01.926
want to allow more time 

05:02:03.018 --> 05:02:04.046
for each of the activities and 
more time to explain them, as 

05:02:04.047 --> 05:02:06.532
well. 
    Do you need a translator?

05:02:09.610 --> 05:02:12.273
Similar to intercepts, it might 
be useful. Are you in the 

05:02:12.274 --> 05:02:14.913
natural context of the 
experience? Or are you asking 

05:02:14.914 --> 05:02:17.567
the users to come into your 
space? What would make them more

05:02:17.568 --> 05:02:20.639
comfortable? 
    What materials do you need 

05:02:20.640 --> 05:02:22.640
to allow 

05:02:23.734 --> 05:02:25.562
your users to fully express 
themselves and to take their 

05:02:25.563 --> 05:02:27.563
ideas down?

05:02:30.471 --> 05:02:32.095
Are they comfortable with 
drawing? Would they be more 

05:02:32.096 --> 05:02:35.171
comfortable if you gave them 
something to build with? 

05:02:35.172 --> 05:02:37.401
Different components they could 
put together? Would they be 

05:02:37.402 --> 05:02:39.402
interested in 

05:02:40.653 --> 05:02:43.553
role-playing or story telling? 
Think through all of the 

05:02:43.554 --> 05:02:45.554
contingencies and the schedule 
of your sprint. 

05:02:48.892 --> 05:02:50.892
Now, facilitation is going to be
key 

05:02:51.950 --> 05:02:53.985
here and you're going to be 
switching roles from translator 

05:02:53.986 --> 05:02:56.230
to facilitating the users and 
guiding them through the 

05:02:56.643 --> 05:02:58.643
creative process.

05:03:01.597 --> 05:03:03.645
Finally, make sure you include a
diversive -- sorry, a diverse 

05:03:03.646 --> 05:03:05.646
and 

05:03:07.115 --> 05:03:10.172
inclusive user set. And why do 
we do this? This sounds like a 

05:03:10.173 --> 05:03:14.040
lot of work. What are the 
benefits of codesign? You're 

05:03:14.041 --> 05:03:16.041
going to get an increased 

05:03:17.081 --> 05:03:18.300
knowledge and empathy for the 
user for the full team. And 

05:03:18.301 --> 05:03:20.301
that's key. You're going to have
all of your 

05:03:24.232 --> 05:03:26.696
engineers, PMs face-to-face with
the users. You're going to build

05:03:26.697 --> 05:03:29.338
better and more innovative 
ideas. You're going to have lots

05:03:29.339 --> 05:03:33.411
and lots more and better ideas. 
    Your decisionmaking is going

05:03:33.412 --> 05:03:36.500
to be more efficient and your 
sprint participants are going to

05:03:36.501 --> 05:03:38.501
be more 

05:03:39.762 --> 05:03:41.751
confident in the decisions that 
they make. You're going to have 

05:03:41.752 --> 05:03:46.961
immediate validations of 
concepts and ideas just as I 

05:03:46.962 --> 05:03:48.962
discussed with iconography in 
our app. 

05:03:49.647 --> 05:03:50.650
We were able to immediately 
validate what worked and what 

05:03:50.651 --> 05:03:52.651
didn't.

05:03:54.305 --> 05:03:56.138
You'll be able to establish a 
deeper and long-term 

05:03:56.139 --> 05:03:58.139
relationship with your 

05:03:59.155 --> 05:04:01.155
users

05:04:03.721 --> 05:04:06.601
. What if you can't bring users 
in for the full sprint? What if 

05:04:06.602 --> 05:04:08.449
they're not able to take that 
much time off and participate in

05:04:08.450 --> 05:04:10.450
your sprint.

05:04:12.115 --> 05:04:14.582
We also often do something 
called extender user 

05:04:14.583 --> 05:04:17.448
participation. 
    So this is an alternative 

05:04:17.449 --> 05:04:20.499
that we bring users in a key 
milestones within the sprint.

05:04:23.751 --> 05:04:25.789
We'll recruit users to do 
check-ins at critical milestones

05:04:25.790 --> 05:04:27.790
at the end of each phase.

05:04:30.718 --> 05:04:33.700
We'll do cognitive walk 
throughs, look at sketches

05:04:38.702 --> 05:04:42.785
. You'll want to plan time to 
act on the feedback they give 

05:04:42.786 --> 05:04:44.786
you.

05:04:47.865 --> 05:04:49.865
What if you can't bring your 
users to 

05:04:51.118 --> 05:04:53.212
you at all or can't go to them? 
What do we do then? 

05:04:54.643 --> 05:04:56.643
&gt;&gt; SUMIER PHALAKE: That's when 
remote sprinting comes in.

05:04:58.510 --> 05:05:01.158
And we'll be honest, this has 
not been successful. Sometimes, 

05:05:01.159 --> 05:05:03.159
it's unavoidable.

05:05:05.705 --> 05:05:08.636
Your users are far away, you can
use things like slides or docs 

05:05:08.637 --> 05:05:10.637
to collaborate remotely, Google 
forms and 

05:05:13.306 --> 05:05:16.646
send out a venture survey. 
    One of the things we've 

05:05:16.647 --> 05:05:18.647
done, especially when you're 
doing research 

05:05:22.006 --> 05:05:24.945
from many time zones away is 
overnight research. An example 

05:05:24.946 --> 05:05:26.946
was we were doing a sprint here 
for a product that was based in 

05:05:27.939 --> 05:05:29.963
Indonesia. So we did a lot of 
work all day, 

05:05:33.020 --> 05:05:35.059
packaged it up, sent it over 
there. Researcher ran research 

05:05:35.060 --> 05:05:37.910
for us overnight. And we had 
feedback waiting for us the next

05:05:37.911 --> 05:05:41.405
morning. That was great. 
Obviously, this very 

05:05:41.406 --> 05:05:43.682
situation-specific. So if you 
can't do this, you might want 

05:05:47.762 --> 05:05:50.005
to consider taking a break and 
then sort instead of doing all 

05:05:50.006 --> 05:05:53.411
five days, do two days at a 
time, break off, do research and

05:05:53.412 --> 05:05:56.128
then regroup the next week. 
    These are some techniques 

05:05:56.129 --> 05:06:00.868
for doing remote sprinting. All 
right. So the recap. We talked 

05:06:00.869 --> 05:06:02.869
about intercepts, talked 

05:06:04.123 --> 05:06:06.123
about co-design, talked about 
extended user participation.

05:06:09.826 --> 05:06:11.856
And remote sprinting. With that,
we hope we've shown you the 

05:06:14.703 --> 05:06:16.343
value of immersive design 
sprints and given you the right 

05:06:16.344 --> 05:06:18.344
tools to run your own successful
immersive sprint. 

05:06:19.633 --> 05:06:22.340
We'd love to hear from you. To 
please provide feedback for the 

05:06:24.986 --> 05:06:27.655
session by signing in on Google.
com/IO/schedule.

05:06:30.901 --> 05:06:32.901
And if you want more helpful 
tips, go 

05:06:34.736 --> 05:06:38.880
to designsprint.com. That's it 
from us. Thank you. 

05:06:39.734 --> 05:06:41.734
&gt;&gt; BURGAN SHEALY: Thank you.

06:14:31.900 --> 06:14:33.900
May 9,

06:14:37.673 --> 06:14:39.673
2018

06:17:22.547 --> 06:17:23.761
.
   Google IO.

06:17:27.474 --> 06:17:29.474
Total mobile development made 
fun 

06:17:30.520 --> 06:17:32.520
with

06:17:36.116 --> 06:17:38.116
Flutter and Firebase.

06:22:11.354 --> 06:22:15.225
   &gt;&gt; Welcome.  Please fill in 
the seats near the front of the 

06:22:15.226 --> 06:22:17.226
room.  Thank you.

06:26:14.568 --> 06:26:16.568
   (applause).

06:26:24.291 --> 06:26:26.136
&gt;&gt; Hello and welcome to total 
Dev made fun with Flutter and 

06:26:26.137 --> 06:26:28.399
Firebase.
   &gt;&gt; I'm Emily Shack.

06:26:30.860 --> 06:26:31.895
&gt;&gt; EMILY FORTUNA:  I'm Emily 
Fortuna.

06:26:31.896 --> 06:26:33.719
&gt;&gt; EMILY SHACK:  Today we'll 
show you how fun and easy it is 

06:26:33.720 --> 06:26:36.595
to build your very own mobile 
app using Flutter live here on 

06:26:36.596 --> 06:26:38.596
stage.  But to kick things off, 
we'll tell you 

06:26:41.690 --> 06:26:44.340
a little story about our friend,
Francine.

06:26:45.563 --> 06:26:46.990
&gt;&gt; EMILY FORTUNA:  Francine was 
the proud owner much a pet store

06:26:46.991 --> 06:26:51.300
and she realized the one thing 
that she needed for her business

06:26:51.301 --> 06:26:53.546
was to write a mobile app that 
would allow people to see her 

06:26:56.824 --> 06:26:58.653
inventory, reserve if they were 
interested, so when they came 

06:26:58.654 --> 06:27:02.146
into the store, they would be on
hold and they could adopt them.

06:27:06.834 --> 06:27:09.752
Now, I know that Google I/O is 
the worldwide gathering of 

06:27:09.753 --> 06:27:12.007
aquarium enthusiasts.
   &gt;&gt; EMILY SHACK:  I'm not sure

06:27:12.008 --> 06:27:15.879
that's quite right, but I know 
we have a lot of mobile develop 

06:27:15.880 --> 06:27:18.132
erpz in the audience, so I think
they'll still appreciate it.

06:27:18.336 --> 06:27:21.463
&gt;&gt; EMILY FORTUNA:  It's still 
relevant.  Today we'll be live 

06:27:21.464 --> 06:27:23.464
coding a pet 

06:27:24.935 --> 06:27:27.567
adoption app for fish for 
Francine on stage.  So let's 

06:27:27.568 --> 06:27:29.568
switch over to the devices, and 
we can see the app that we'll be

06:27:32.246 --> 06:27:34.246
live coding today.

06:27:37.144 --> 06:27:39.144
As you see, we have these nice 
cards 

06:27:40.222 --> 06:27:42.515
with information about the fish.
They're nice animations as you 

06:27:42.516 --> 06:27:48.004
can slide between the 
information about the fish.  

06:27:48.005 --> 06:27:50.039
Some of the fish are even 
animated.  And if you decide 

06:27:50.040 --> 06:27:52.040
that a fish is the 

06:27:53.702 --> 06:27:55.546
right one for you, you can hit 
that cache button and it is 

06:27:55.547 --> 06:27:57.400
reserved.
   Then you can hop over and you

06:27:57.401 --> 06:27:59.401
can see 

06:28:00.505 --> 06:28:02.759
that it has disappeared from the
view of the other phone, so no 

06:28:02.760 --> 06:28:06.209
one else can reserve that same 
fish.  Now, if you have a 

06:28:06.210 --> 06:28:11.539
reserve view, which Emily has, 
you can see that the fish she's 

06:28:11.540 --> 06:28:13.368
reserved is available, and if 
she decides that Dart is not 

06:28:13.369 --> 06:28:15.996
actually the fish that's right 
for her, then she can 

06:28:20.731 --> 06:28:23.187
swipe up and it has been cleared
from your reservation.

06:28:28.902 --> 06:28:30.975
And if you decide that you have 
a regret, if you let loose the 

06:28:30.976 --> 06:28:36.112
wrong fish, you can shake and 
your fish is back reserved.  And

06:28:36.113 --> 06:28:37.961
as you noticed, there are all 
these great sound effects to go 

06:28:37.962 --> 06:28:42.059
along with all of your actions.
   So let's hop back to the 

06:28:42.060 --> 06:28:44.060
slides.

06:28:46.938 --> 06:28:51.234
   So whether you are creating 
an app to create a home for  

06:28:51.235 --> 06:28:54.513
unloved marine animals or just 
coding up that app that you've 

06:28:54.514 --> 06:28:56.536
been talking about for years, 
what we hope you'll find today 

06:28:56.537 --> 06:29:01.069
is just how easy it is with 
Flutter to make your vision a 

06:29:01.070 --> 06:29:05.760
reality.  One of the great 
things about Flutter is you can 

06:29:05.761 --> 06:29:07.761
get a native look and feel 

06:29:10.460 --> 06:29:12.510
for both iOS and Android all 
from a single code base, so you 

06:29:12.511 --> 06:29:15.588
don't have to learn multiple new
technologies just to get an app 

06:29:15.589 --> 06:29:17.633
that can serve all of your users
and not only is it a native look

06:29:20.701 --> 06:29:22.565
and feel, it is an actual 
Flutter compiles down to native 

06:29:22.566 --> 06:29:24.566
code, so you 

06:29:25.646 --> 06:29:28.288
don't have to sacrifice quality 
to get a great-looking app.

06:29:30.076 --> 06:29:32.076
One of the reasons that I always
look 

06:29:33.197 --> 06:29:35.866
forward to developing in flut is
hot reload.  So all I have to do

06:29:35.867 --> 06:29:37.867
is type my code 

06:29:40.346 --> 06:29:42.382
into the IDE, hit save, and then
it's instantaneously on my 

06:29:42.383 --> 06:29:44.383
phone.

06:29:45.632 --> 06:29:47.632
The only downside is I no longer
have 

06:29:50.121 --> 06:29:52.585
time to make coffee because my 
code is already running.

06:29:53.822 --> 06:29:55.046
&gt;&gt; EMILY SHACK:  Flutter also 
has many powerful components you

06:29:55.047 --> 06:29:57.905
can integrate with that go 
beyond the scope of Flutter 

06:29:57.906 --> 06:29:59.906
itself.  In this talk we'll be 
showing you how 

06:30:02.996 --> 06:30:04.820
to integrate Cloud Fire  Store 
which is an option for your 

06:30:04.821 --> 06:30:07.875
server side component of your 
app.  You can also integrate the

06:30:09.695 --> 06:30:11.695
accelerometer, that's how we're 
showing 

06:30:12.744 --> 06:30:14.986
you shake to undo and we're also
going to integrate those crucial

06:30:14.987 --> 06:30:19.083
sound effects for the flushing 
of that fish.  All of this is 

06:30:19.084 --> 06:30:21.567
done in the same code base so 
that you don't have to deal with

06:30:24.035 --> 06:30:26.530
the hairy details of those 
device platform-specific API's.

06:30:26.941 --> 06:30:31.202
   So I'm going to jump on over 
to the code base and we're going

06:30:31.203 --> 06:30:34.697
to give a little tour of what 
we're going to be coding before 

06:30:34.698 --> 06:30:36.698
we go ahead and dive into 

06:30:37.953 --> 06:30:39.953
the coding portion.

06:30:41.005 --> 06:30:43.701
   &gt;&gt; EMILY FORTUNA:  So we went
ahead 

06:30:46.759 --> 06:30:48.391
and typed some class 
recollections for you, typing is

06:30:48.392 --> 06:30:51.866
a little Borg.  At the top we 
have our main furksz our entry 

06:30:51.867 --> 06:30:54.113
point, that's where we're going 
to be building our top level 

06:30:54.114 --> 06:30:56.972
widget or component that we're 
drawing in our app.

06:30:59.684 --> 06:31:03.366
Our top level widget is very 
creatively called my app.  My 

06:31:03.367 --> 06:31:05.367
app is in charge of getting the 

06:31:06.426 --> 06:31:08.426
information from Cloud fire 
store or AKA 

06:31:10.082 --> 06:31:11.941
Francine's Fish Database and 
then telling to draw that app to

06:31:11.942 --> 06:31:13.942
the screen.

06:31:15.599 --> 06:31:17.599
My app has a fish page and a 
corresponding fish page state.

06:31:20.698 --> 06:31:22.319
Now, you'll notice that fish 
page is a stateful widget, 

06:31:22.320 --> 06:31:24.813
whereas all the other widgets 
you see are stateless widgets.

06:31:28.078 --> 06:31:30.552
If you remember when we demoed, 
we had that undo functionality, 

06:31:30.553 --> 06:31:35.443
so that's some information that 
we need to store and have a  

06:31:35.444 --> 06:31:37.916
long-running per Sis stement 
action to what we last did to 

06:31:37.917 --> 06:31:40.800
the fish so if we decide that we
need to undo that, we have that.

06:31:41.200 --> 06:31:45.316
   So for this reason, we're 
storing that in fish page so we 

06:31:45.317 --> 06:31:48.356
can have that long running per 
Sis stented state.  For 

06:31:48.357 --> 06:31:51.009
everything else, we have 
stateless widgets, so that it 

06:31:51.010 --> 06:31:52.637
can just draw on the screen 
whatever information we provide 

06:31:52.638 --> 06:31:54.638
it.

06:31:57.916 --> 06:31:59.946
Fish page has a fish options, 
that is that center section that

06:31:59.947 --> 06:32:01.977
allows you to scroll through all
of the available fish 

06:32:05.451 --> 06:32:07.925
that you are able to adopt and 
then fish options is made up of 

06:32:07.926 --> 06:32:09.926
many profile cards and that's 
the individual cards that you 

06:32:11.202 --> 06:32:13.202
have for your fish.

06:32:14.858 --> 06:32:16.858
Now, there's probably a few more
class 

06:32:18.677 --> 06:32:21.237
declarations in here than -- you
would want to have if you were 

06:32:23.534 --> 06:32:25.574
code this for real, but we're 
putting it all in one file so 

06:32:25.575 --> 06:32:28.636
it's easy for us to jump exparnd
for you see so see what's going 

06:32:28.637 --> 06:32:31.900
on.  We have one more file, u 
tirks ls class, two classes in 

06:32:31.901 --> 06:32:36.854
it.  Fish data is just a 
convenience class, so when we're

06:32:36.855 --> 06:32:38.298
writing information to Cloud 
fire store, it will be in the 

06:32:38.299 --> 06:32:40.299
form 

06:32:41.397 --> 06:32:44.275
of a map, so fish data takes 
that map and converts it into a 

06:32:44.276 --> 06:32:47.531
dart object and then when we 
want to write it back to Cloud 

06:32:47.532 --> 06:32:49.532
fire store, we convert it back 
to a map.

06:32:51.660 --> 06:32:53.692
Local audio tools is just a 
wrapper around the audio tools 

06:32:53.693 --> 06:32:55.693
function or 

06:32:59.020 --> 06:33:01.020
plug-in which allows us to play 
audio 

06:33:02.078 --> 06:33:04.760
files locally from our devices.
   So let's go back to main.

06:33:08.007 --> 06:33:10.085
Emily has our app running up on 
the devices, so let's switch 

06:33:10.086 --> 06:33:15.188
over to the device view and see 
what we've got.  Okay.  I think 

06:33:15.189 --> 06:33:17.453
this is a pretty good app to 
start out with.  Obviously we 

06:33:17.454 --> 06:33:19.501
have a long way to go here.  One
thing I'm noticing right off the

06:33:21.335 --> 06:33:23.379
bat though is that the text in 
that app bar and in that button 

06:33:23.380 --> 06:33:25.824
at the bottom is a little bit 
larger than I might have on apps

06:33:25.825 --> 06:33:30.341
on my phone.  Why is that?
   &gt;&gt; EMILY FORTUNA:  That's a 

06:33:30.342 --> 06:33:34.612
good question.  Actually this is
a good illustration of Flutter's

06:33:34.613 --> 06:33:36.642
accessibility features.  So if 
you are vision-impaired or if 

06:33:37.875 --> 06:33:39.517
you are giving a presentation 
and you want to make sure the 

06:33:39.518 --> 06:33:41.518
people in the back 

06:33:43.982 --> 06:33:45.982
rows are able to see the text, 
you can 

06:33:47.055 --> 06:33:49.330
set default text size on your 
phone to be larger and Flutter 

06:33:49.331 --> 06:33:51.331
will respond to 

06:33:53.643 --> 06:33:55.725
this and then increase all the 
text size in the app so we 

06:33:55.726 --> 06:33:57.591
increase the text size without 
changing anything in our code 

06:33:57.592 --> 06:34:00.515
itself.
   &gt;&gt; EMILY SHACK:  Okay.  Soin 

06:34:00.516 --> 06:34:02.417
that I can read this app but 
there's not really much here 

06:34:02.418 --> 06:34:05.300
that I'm reading yet.  Why don't
we go ahead and get some content

06:34:05.301 --> 06:34:07.301
in there.  I think the most 
important thing to 

06:34:12.079 --> 06:34:13.707
start out with is that we have 
nautical  theming in the 

06:34:13.708 --> 06:34:15.949
background to really show we're 
shopping for a fish.

06:34:16.368 --> 06:34:19.033
&gt;&gt; EMILY FORTUNA:  Sounds good. 
We can do that by setting the 

06:34:19.034 --> 06:34:21.709
color of that section.  We're in
fish stage state, there's a 

06:34:24.211 --> 06:34:26.211
build method, this is the method
that 

06:34:27.475 --> 06:34:30.962
gets called when flulter wants 
to draw this widget to screen.  

06:34:30.963 --> 06:34:32.963
It exists for every single wij 
elt 

06:34:34.651 --> 06:34:37.269
that you have.
   &gt;&gt; Here we are construct a 

06:34:37.270 --> 06:34:41.616
scaffold which provides the 
outline for its children wij 

06:34:41.617 --> 06:34:44.880
elts and where they should be 
displayed on the screen.  

06:34:44.881 --> 06:34:46.881
Scaffold has an app bar, that 
title 

06:34:48.145 --> 06:34:50.215
bar at the top giving the name 
of our app, then we have the 

06:34:50.216 --> 06:34:52.263
bottom navigation bar that 
allows us to technology between 

06:34:54.295 --> 06:34:56.295
the two individual  views, and 
then at 

06:34:57.348 --> 06:34:59.586
the bottom we have this fish 
options as that main body.

06:35:02.639 --> 06:35:04.479
So to set the color, Emily will 
wrap this in a container and set

06:35:04.480 --> 06:35:09.018
color of the container.  Why are
we wrapping this in another 

06:35:10.874 --> 06:35:12.295
widget rather than just setting 
the color of fish options 

06:35:12.296 --> 06:35:17.011
directly?  This is actually a 
common design pattern in Flutter

06:35:17.012 --> 06:35:19.065
to fairly composition over 
inhair tans and if you can 

06:35:19.066 --> 06:35:23.591
imagine, we could potentially 
have parameters in fish options 

06:35:23.592 --> 06:35:25.592
to set the color and width 

06:35:26.896 --> 06:35:29.139
and padding but you could then 
maybe have 100 parameters and it

06:35:29.140 --> 06:35:32.014
could get pretty overwhelming.  
Having a composition in the way 

06:35:32.015 --> 06:35:34.015
we 

06:35:35.500 --> 06:35:37.369
build our widgets keeps our 
API's much leaner and it allows 

06:35:37.370 --> 06:35:41.482
us to build a combination of 
widget says in ways that the API

06:35:41.483 --> 06:35:43.483
designer maybe originally had 

06:35:44.546 --> 06:35:46.546
never envisioned.

06:35:49.488 --> 06:35:51.310
Emily specified indigo, 
specified, saving, let's switch 

06:35:51.311 --> 06:35:56.449
over to the devices, there it 
is.  Stare at that forever.

06:35:57.267 --> 06:36:01.336
&gt;&gt; EMILY SHACK:  That was pretty
fast, sub-second I would say.  

06:36:01.337 --> 06:36:02.771
So we didn't have to rebuild our
entire app to get that to show 

06:36:02.772 --> 06:36:06.682
up.  So now I like the color but
I think it would be nice if we 

06:36:06.683 --> 06:36:08.714
had some content on top of that.
   &gt;&gt; EMILY FORTUNA:  All right.

06:36:09.130 --> 06:36:13.018
All right.  So we can do that by
adding that profile card.

06:36:16.469 --> 06:36:18.701
So in our fish options right now
let's go to that build function,

06:36:18.702 --> 06:36:22.584
and right now we have a 
placeholder container, so we get

06:36:22.585 --> 06:36:26.445
rid of that and then we'll 
construct a profile card.  Emily

06:36:26.446 --> 06:36:28.683
is also constructing a default 
fish data because right now 

06:36:28.684 --> 06:36:33.980
we're not connected to our fish 
database on Cloud fire store so 

06:36:33.981 --> 06:36:36.485
fish data just has some 
placeholder images, placeholder 

06:36:36.486 --> 06:36:38.724
name and information, so that we
can see what it 

06:36:42.038 --> 06:36:44.684
looks like before we connected 
to Cloud fire store.  Now, if 

06:36:44.685 --> 06:36:47.376
you're familiar with Dart, which
is what we are using to code, 

06:36:47.377 --> 06:36:51.708
you might be noticing, hey, 
Emily is constructing this 

06:36:51.709 --> 06:36:56.422
profile card but she's not using
do anywhere.  What's with that? 

06:36:56.423 --> 06:37:01.113
(Correction, new).  Well, this 
is a good example how the dart 

06:37:01.114 --> 06:37:03.114
and Flutter teams have 
collaborated.

06:37:04.167 --> 06:37:06.167
Flutter was saying hey we have a
lot 

06:37:07.229 --> 06:37:08.656
of Flutter users noticing that 
new is cluttering up their code 

06:37:08.657 --> 06:37:12.322
because they're constructing all
these wij elts.  What do we do?

06:37:15.824 --> 06:37:18.682
Dart team made new optional, 
part of dart team's 2.0 so you 

06:37:18.683 --> 06:37:21.131
can right a profile card.  Emily
has it all written up, we'll hit

06:37:23.391 --> 06:37:25.391
save, and it's going to hot 
reload, switch over to devices.

06:37:25.834 --> 06:37:28.304
   &gt;&gt; EMILY SHACK:  All right.  
We've got a pretty empty card on

06:37:28.305 --> 06:37:33.226
here.  I think what I want most 
in my viewing of a fish is to 

06:37:33.227 --> 06:37:34.851
see the big picture of the fish.
   &gt;&gt; EMILY FORTUNA:  Okay, 

06:37:34.852 --> 06:37:36.852
okay.

06:37:38.107 --> 06:37:40.107
So let us modify the profile 
card.

06:37:41.157 --> 06:37:43.034
So if we swap back over to the 
code, inside profile card let's 

06:37:43.035 --> 06:37:47.811
look at their profile card's 
build function.  That's pretty 

06:37:47.812 --> 06:37:51.693
simple, we're just calling get 
card contents and wrapping it in

06:37:51.694 --> 06:37:54.334
a card, that's a material 
widget.  Get card contents does 

06:37:54.335 --> 06:37:58.881
three things.  It's calling show
profile picture, which is 

06:37:58.882 --> 06:38:00.882
clearly a falling down on the 

06:38:03.391 --> 06:38:06.447
job, it is calling show data, 
and then lals show button.  

06:38:06.448 --> 06:38:08.349
Let's go into show profile 
picture and make it actually 

06:38:08.350 --> 06:38:10.350
display a picture.

06:38:12.280 --> 06:38:15.562
Take out that container and 
let's call in fade in image.  

06:38:15.563 --> 06:38:18.221
Usually we're going to be 
getting an image from Cloud fire

06:38:18.222 --> 06:38:20.222
store so that's a 

06:38:21.474 --> 06:38:23.756
call to the server that's 
potentially asynchronous data, 

06:38:23.757 --> 06:38:25.384
so when we build we might not 
have that data at the moment of 

06:38:25.385 --> 06:38:27.466
building.
   So for that reason, now, you 

06:38:27.467 --> 06:38:29.467
could 

06:38:30.504 --> 06:38:32.747
just pass an image, but once it 
has that image datd, it might 

06:38:32.748 --> 06:38:35.607
pop in, that could be visually 
jarring, so instead Emily is 

06:38:37.852 --> 06:38:39.852
making a fade-in image that once
we have 

06:38:41.528 --> 06:38:44.006
the image, it will fade into 
view very nicely.  Lastly, we're

06:38:44.007 --> 06:38:46.007
specifying the facility 

06:38:48.476 --> 06:38:50.940
so images have a width and 
height and in saying box fit dot

06:38:50.941 --> 06:38:55.628
cover, saying expand to fill all
the available size even if it 

06:38:55.629 --> 06:38:57.629
means cutting off some part of 
the image.

06:38:58.515 --> 06:39:00.515
So going to hit save, which hot 

06:39:02.008 --> 06:39:05.677
reloads, and we'll switch over 
to the devices.  It already 

06:39:05.678 --> 06:39:09.427
faded in, you didn't get to see 
that.  So fast.  All right.  

06:39:09.428 --> 06:39:11.026
We've got our big picture of a 
fish, but I need to know more 

06:39:11.027 --> 06:39:15.311
about that fish before I decide 
to adopt T I want to know the 

06:39:15.312 --> 06:39:17.147
fish's name, its personality.
   &gt;&gt; EMILY FORTUNA:  Yes, that 

06:39:17.148 --> 06:39:20.000
is very important for human fish
bonding.  So let's go back to 

06:39:20.001 --> 06:39:22.001
the code.

06:39:24.542 --> 06:39:27.203
And we'll modify show data and 
we have declared three text 

06:39:27.204 --> 06:39:29.452
widgets, first is the name 
widget, second someone the 

06:39:32.504 --> 06:39:35.206
music widget, fish's preferred 
music, and lastly preferred pH 

06:39:35.207 --> 06:39:38.266
and to display those, we'll wrap
those three in a column widget 

06:39:38.267 --> 06:39:42.960
which is going to stack them 
from top to bottom.  Emily will 

06:39:42.961 --> 06:39:46.827
hit save, it will hot reload, go
over the devices, do we see it? 

06:39:46.828 --> 06:39:48.828
Yes, there it is.
   &gt;&gt; EMILY SHACK:  All right.

06:39:51.373 --> 06:39:53.373
So I can understand now this is 

06:39:54.446 --> 06:39:56.291
Frank, his favorite pH is 7, but
the information is a little 

06:39:56.292 --> 06:39:58.569
cluttered right now and I feel 
like the name is probably the 

06:39:58.570 --> 06:40:00.653
most important piece of this.  
How could I set that apart?

06:40:00.821 --> 06:40:02.640
&gt;&gt; EMILY FORTUNA:  All right.  
We can do that by setting the 

06:40:02.641 --> 06:40:04.641
text style.

06:40:07.857 --> 06:40:10.510
So instead how about we make it 
bold and we could double the 

06:40:10.511 --> 06:40:16.880
font size.  That would help it 
stand out a little bit more.  

06:40:16.881 --> 06:40:18.306
That way people can look up 
Frank by name.  Let's look at 

06:40:18.307 --> 06:40:20.542
the devices again.  Oh, much 
better.

06:40:21.554 --> 06:40:23.425
&gt;&gt; EMILY SHACK:  Okay, I think 
we're getting there, but I still

06:40:23.426 --> 06:40:25.899
think the Frank should be a 
little bit apart from the rest 

06:40:25.900 --> 06:40:27.900
of the information.
   &gt;&gt; EMILY FORTUNA:  Okay.

06:40:29.395 --> 06:40:31.254
Back at the code, how about we 
wrap that text widget in some 

06:40:31.255 --> 06:40:35.786
padding.  Now, there's a really 
handy feature with visual studio

06:40:35.787 --> 06:40:37.787
code, which is what we are 
currently using.

06:40:41.898 --> 06:40:44.129
This also works in Android 
Studio and IntelliJ, you can 

06:40:44.130 --> 06:40:46.390
wrap a widget inside noir 
widget, it takes -- inside 

06:40:46.391 --> 06:40:48.391
another widget.

06:40:49.881 --> 06:40:51.924
It takes care of all the 
indentation.  Wrapping it in 8 

06:40:51.925 --> 06:40:54.584
pixels of padding, good enough 
for us, we'll hit save, hot  

06:40:57.242 --> 06:40:59.515
reloading, and look at our 
devices, much better.  Can.

06:40:59.725 --> 06:41:02.144
&gt;&gt; EMILY SHACK:  Okay.  So I 
think the card is in a pretty 

06:41:03.781 --> 06:41:06.851
good place but I'm a little 
tired of looking at Frank.  What

06:41:06.852 --> 06:41:08.311
if we got some real datd in 
there?

06:41:08.312 --> 06:41:11.429
&gt;&gt; EMILY FORTUNA:  I like Frank.
But okay.  Let's connected to 

06:41:11.430 --> 06:41:13.430
Cloud fire store.

06:41:17.125 --> 06:41:19.163
So at the top that my app, right
now we are parsing an empty list

06:41:19.164 --> 06:41:21.164
because 

06:41:23.640 --> 06:41:25.712
we're not getting any data from 
Cloud fire store so instead 

06:41:25.713 --> 06:41:28.596
we'll be making our call to 
Cloud fire store.  There are two

06:41:28.597 --> 06:41:30.597
different ways you could deal 
with  asynchronous datd because 

06:41:33.331 --> 06:41:34.800
we're making a call to database 
or Cloud fire store to get our 

06:41:34.801 --> 06:41:38.474
information.  The first way to 
deal with asynchronous data is 

06:41:38.475 --> 06:41:42.804
futures or proms depending on 
where -- or promises depending 

06:41:42.805 --> 06:41:44.847
on where you're coming from, 
this is if you want one bit of 

06:41:44.848 --> 06:41:47.307
data asynchronously.  Streams 
are your other option.

06:41:49.336 --> 06:41:51.336
Now, streams are if you need 
multiple pieces of data.

06:41:53.255 --> 06:41:56.146
In this case we want a snapshot 
of Cloud, all the information on

06:41:56.147 --> 06:42:00.437
Cloud fire store and then when 
something changes on that 

06:42:00.438 --> 06:42:02.473
database we want to get a new 
snapshot of all the fish that 

06:42:02.474 --> 06:42:05.345
are still there.  So in this 
case stream is the correct 

06:42:07.216 --> 06:42:09.526
option, and then there's this 
convenient stream builder which 

06:42:09.527 --> 06:42:13.186
allows us to build widgets from 
the stream.  So Emily has 

06:42:13.187 --> 06:42:15.434
specified the source of the  
stream, this is from Cloud fire 

06:42:17.485 --> 06:42:19.949
store, we are getting a 
collection of fish profiles, and

06:42:19.950 --> 06:42:21.950
then we are calling 

06:42:24.616 --> 06:42:25.831
the builder so build widgets 
based on that fish information.

06:42:25.832 --> 06:42:28.709
   You might notice on the line 
32 we 

06:42:32.770 --> 06:42:35.050
have this interesting question 
mark syntax.  What's going on 

06:42:35.051 --> 06:42:39.616
there?  We're saying is data 
null?  If it is don't call dot 

06:42:39.617 --> 06:42:44.313
documents.  Then you can return 
that empty list or sign that 

06:42:44.314 --> 06:42:46.973
empty list to the documents 
variable.  Otherwise, get the 

06:42:46.974 --> 06:42:50.095
documents from Cloud fire store.
   Then we're taking that map 

06:42:50.096 --> 06:42:54.412
and converting it to a fish data
object so we have a list of fish

06:42:54.413 --> 06:42:58.291
data, passing it into fish page.
   Now, you might be wondering 

06:42:58.292 --> 06:43:03.644
how are we accessing this fire 
store variable?  If you scroll 

06:43:03.645 --> 06:43:05.704
up to the import, you see we 
have these package imports, 

06:43:07.510 --> 06:43:09.510
particularly Cloud fire store.  
Where does that come from?

06:43:12.081 --> 06:43:14.081
Well, if you go over to pub 
spec, this 

06:43:16.176 --> 06:43:19.033
is just a Yamo file that allows 
us to specify All of our 

06:43:19.034 --> 06:43:21.034
dependencies for dart and the 
pub which is our package manager

06:43:22.917 --> 06:43:24.917
is able to calculate all the 
versioning 

06:43:26.407 --> 06:43:28.237
things, pulls them down from 
online, seat belts up all the 

06:43:28.238 --> 06:43:30.305
paths correctly, then you're 
good to go, you can just import 

06:43:30.306 --> 06:43:32.306
them.

06:43:33.985 --> 06:43:35.985
So back to our main file.

06:43:37.089 --> 06:43:39.142
We have one more change we need 
to do because if you recall, 

06:43:39.143 --> 06:43:42.461
Emily constructed that fish data
object that was default, it had 

06:43:42.462 --> 06:43:47.555
no information.  Now we want to 
take that stream that we just 

06:43:47.556 --> 06:43:51.106
got from Cloud fire store and 
display  it.  So here she's 

06:43:51.107 --> 06:43:53.107
saying if we have data, just 
call the first one because we're

06:43:54.387 --> 06:43:56.387
only displaying one card right 
now.

06:43:59.904 --> 06:44:01.740
So now Emily saved, it's hot 
reloaded, we switch over to 

06:44:01.741 --> 06:44:05.472
devices, we've got some good 
data.  Okay.  I'm looking at 

06:44:05.473 --> 06:44:07.531
flow, feeling pretty good, I 
think I might want to adopt her 

06:44:08.758 --> 06:44:12.032
accident I'm not sure how I did 
that from this view.

06:44:14.257 --> 06:44:17.353
&gt;&gt; Yeah, catch does not seem to 
be implemented.

06:44:18.165 --> 06:44:19.573
&gt;&gt; EMILY FORTUNA:  I think it's 
time to implement that show 

06:44:19.574 --> 06:44:21.574
button.

06:44:24.324 --> 06:44:24.929
Right now show button our 
unpressedful is not doing 

06:44:24.930 --> 06:44:28.399
anything.  On premised we'll 
pass in a function that's going 

06:44:28.400 --> 06:44:30.024
to be called when the user 
presses it, in this case we want

06:44:30.025 --> 06:44:34.496
the button to function as a 
toggle button between reserved 

06:44:34.497 --> 06:44:36.497
and  unreserved so 

06:44:37.562 --> 06:44:39.232
we'll be passing these, already 
reserved, unreserve it.  

06:44:39.233 --> 06:44:41.670
Otherwise, reserve it.  These 
call-backs haven't been 

06:44:43.116 --> 06:44:45.780
implemented yet because we're 
not writing to Cloud fire store 

06:44:45.781 --> 06:44:47.843
so let's implement those.  Those
are in this reserve fish and 

06:44:48.447 --> 06:44:51.091
remove fish.  So we're up in the
fish page state 

06:44:54.188 --> 06:44:56.706
class right now, if you recall, 
it's a stateful widget.  So in 

06:44:56.707 --> 06:44:58.707
this case we're going to be 

06:45:01.041 --> 06:45:02.461
calling set state, that tems the
widget hey there's something 

06:45:02.462 --> 06:45:05.719
that might have changed in how I
displayed, so Flutter, you are 

06:45:05.720 --> 06:45:08.584
might want to redraw me.  Emily 
is setting the reserved by field

06:45:11.018 --> 06:45:13.056
to this user ID that's a unique 
ID when we fire into Firebase 

06:45:13.057 --> 06:45:16.556
and it's unique per device.  
Then remove fish is just the 

06:45:16.557 --> 06:45:21.263
same except we set the reserve 
by field to null.  So we have to

06:45:21.264 --> 06:45:23.264
implement our save method, 
that's going to be actually 

06:45:24.335 --> 06:45:26.335
writing to Cloud fire store.

06:45:27.402 --> 06:45:29.402
That's inside fish data.

06:45:31.735 --> 06:45:32.773
And it's pretty easy, it's going
take our documents, reference to

06:45:32.774 --> 06:45:34.774
that individual fish and we're 
going on say 

06:45:38.119 --> 06:45:40.119
set data and then we mapify our 
object.

06:45:41.031 --> 06:45:43.296
So now when we hit save, our 
button should be implemented, 

06:45:43.297 --> 06:45:45.297
let's hop over to 

06:45:46.359 --> 06:45:48.359
the devices, hot reload should 
be in 

06:45:49.632 --> 06:45:51.632
action, we've got a button, go 
reserve t Emily.

06:45:51.673 --> 06:45:54.935
&gt;&gt; EMILY SHACK:  Okay, it's 
time.  Hmm.  It looks like I 

06:45:54.936 --> 06:45:58.000
reserved Flo on the one device 
but she's still available to be 

06:45:58.001 --> 06:45:59.855
reserved on the other, so I'm 
not really sure if I'm going to 

06:45:59.856 --> 06:46:04.348
come into the store and everyone
is going to think they've 

06:46:04.349 --> 06:46:04.961
reserved Flo.
   &gt;&gt; EMILY FORTUNA:  Yeah, we 

06:46:04.962 --> 06:46:09.273
could get had a fight.  
Everybody wants Flo.  I will hop

06:46:09.274 --> 06:46:11.537
onto the computer and you can 
talk us through the rest.

06:46:11.752 --> 06:46:14.402
&gt;&gt; EMILY SHACK:  All right.  So 
we have one fish showing, we can

06:46:16.481 --> 06:46:17.934
reserve it on one phone but it's
not really showing a different 

06:46:17.935 --> 06:46:20.179
fish on the other phone, so what
we really want fod 

06:46:24.105 --> 06:46:25.955
is pass in the list of fish that
a user can reserve or a user 

06:46:25.956 --> 06:46:30.285
already has reserved to that 
particular user, rather passing 

06:46:30.286 --> 06:46:32.286
in all of our fish blindly, we 
want to filter that list.

06:46:35.416 --> 06:46:38.262
So to do that, we're going to 
use the dot where operator.  

06:46:38.263 --> 06:46:41.311
This is an example of functional
operators in dart.  You can use 

06:46:41.312 --> 06:46:43.576
the dot where operator or if you
were paying close attention when

06:46:45.620 --> 06:46:47.701
I was implementing the Cloud 
fire store piece of this, you 

06:46:47.702 --> 06:46:49.730
would have seen the dot map 
operator, both of these are 

06:46:52.599 --> 06:46:54.653
examples of functional 
operators, and in this case we 

06:46:54.654 --> 06:46:56.654
are iterating over every 

06:46:58.139 --> 06:47:00.615
item in the all fish list and 
only returning a list of fish 

06:47:00.616 --> 06:47:03.083
that meet the qualifications 
that the user has either 

06:47:05.148 --> 06:47:07.832
reserved the fish or the fish is
not reserved by anyone.  Now, if

06:47:07.833 --> 06:47:09.890
we're in that reserved view, 
which is our shopping cart view,

06:47:09.891 --> 06:47:11.891
then we only want to display the
fish that are 

06:47:15.753 --> 06:47:17.888
reserved by the current user.  
So now when we hot reload and 

06:47:17.889 --> 06:47:19.889
switch over to the devices, we 
should be tiebl 

06:47:22.645 --> 06:47:24.894
see a new fish displayed -- we 
should be able to see a new fish

06:47:24.895 --> 06:47:27.112
displayed.
   &gt;&gt; EMILY FORTUNA:  Emily, I 

06:47:27.113 --> 06:47:27.938
broke it.
   &gt;&gt; EMILY SHACK:  It's not 

06:47:27.939 --> 06:47:32.039
looking good.  We have the red 
screen of doom of the it seems 

06:47:32.040 --> 06:47:35.915
we've encountered ANR or, so 
let's try to debug this here.  

06:47:35.916 --> 06:47:38.561
When you hit ANR or in Flutter 
it will show up on your devices 

06:47:38.562 --> 06:47:42.895
in this red screen with a very 
heful error message which will 

06:47:42.896 --> 06:47:44.923
be a little more concise than 
the more verbose version you 

06:47:44.924 --> 06:47:48.349
would see in your debug console 
but let's see if we can debug it

06:47:48.350 --> 06:47:50.350
from here.

06:47:52.249 --> 06:47:54.249
It looks like from the phones it
said 

06:47:56.776 --> 06:47:59.011
something like type where it 
rabl is not a subtype of type 

06:47:59.012 --> 06:48:03.534
list.  Probably what was 
happening is when we converted 

06:48:03.535 --> 06:48:05.535
using the where operator it 

06:48:07.236 --> 06:48:08.698
was converting to n ait he is 
rable, not convert to go hey 

06:48:08.699 --> 06:48:11.132
list until it had to.  We want 
to explicitly convert to a list.

06:48:16.098 --> 06:48:16.712
So let's go ahead and do that.
   &gt;&gt; EMILY FORTUNA:  I 

06:48:16.713 --> 06:48:21.397
accidentally closed out of the 
file.  I'm rewriting it.

06:48:21.589 --> 06:48:23.589
&gt;&gt; EMILY SHACK:  All right.

06:48:24.664 --> 06:48:26.909
This is example of why hot 
reload is so handy.  We appear 

06:48:26.910 --> 06:48:28.807
to have accidentally stopped the
app and it's going take a long 

06:48:28.808 --> 06:48:34.972
time toll restart it.  With hot 
reload, you don't have to wait 

06:48:34.973 --> 06:48:36.973
all of that time.

06:48:38.431 --> 06:48:40.488
So I believe if we switched back
to the code, we're still going 

06:48:40.489 --> 06:48:44.596
to need to implement that dot 
list.  Or dot to list.  I see.  

06:48:44.597 --> 06:48:46.597
You've already done ha.  All 
right.

06:48:46.866 --> 06:48:48.287
How are the phones doing?
   &gt;&gt; EMILY FORTUNA:  We're 

06:48:48.288 --> 06:48:50.288
waiting for iPhone.

06:48:53.976 --> 06:48:56.208
   &gt;&gt; EMILY SHACK:  It takes so 
long.  Really good selling point

06:48:56.209 --> 06:48:59.891
for flurlt.  I bet all of you 
mobile develop erpz in the 

06:48:59.892 --> 06:49:02.741
audience can relate to this 
problem.  This is why Emily is 

06:49:02.742 --> 06:49:04.742
flincking so much 

06:49:05.801 --> 06:49:07.801
less coffee and tea after 
switching to 

06:49:09.070 --> 06:49:11.070
Flutter and using hot reload.

06:49:14.232 --> 06:49:16.232
All right.

06:49:17.281 --> 06:49:19.281
Why don't we switch to slide 19,
which is our backup.

06:49:19.536 --> 06:49:22.626
&gt;&gt; EMILY FORTUNA:  We're back.
   &gt;&gt; EMILY SHACK:  Nevermind.  

06:49:22.627 --> 06:49:25.682
We'll go over to the devices and
see it's working so fast.  Hot 

06:49:25.683 --> 06:49:27.683
reload really saved us there.
   (applause).

06:49:29.193 --> 06:49:33.090
All right.  Now, I know that you
didn't quite get to see this 

06:49:33.091 --> 06:49:35.730
because we had a little bit of a
technical difficulty, but hot  

06:49:38.171 --> 06:49:41.052
reload can actually hot reload 
past errors.  So if the devices 

06:49:41.053 --> 06:49:43.053
had stayed connected and we had 
been able to hot reload, it 

06:49:44.607 --> 06:49:46.667
would have shown up just like 
this instead of us having to 

06:49:46.668 --> 06:49:49.310
quit out of the app after we hit
ANR or, which can be really 

06:49:49.311 --> 06:49:51.311
handy.

06:49:53.838 --> 06:49:58.311
In this case (Hit an error, 
which can be really handy.  When

06:49:58.312 --> 06:49:59.741
we reserve a fish, the fish has 
disappeared from the other 

06:49:59.742 --> 06:50:01.742
phone, it 

06:50:05.145 --> 06:50:06.775
appears we're back to Frank.  
Firebase probably had a little 

06:50:06.776 --> 06:50:08.776
time reserve the fish.

06:50:11.502 --> 06:50:12.312
Now when we reserve Flo, Flo is 
no longer available on the other

06:50:12.313 --> 06:50:15.215
phone.  Perfect.  All right.

06:50:19.743 --> 06:50:20.348
Something doesn't seem right.
   &gt;&gt; EMILY FORTUNA:  Emily I'm 

06:50:20.349 --> 06:50:24.845
not really digging Marlon Brando
I would like to have some other 

06:50:24.846 --> 06:50:25.650
options to adopt.
   &gt;&gt; EMILY SHACK:  True, we're 

06:50:25.651 --> 06:50:27.651
only 

06:50:30.640 --> 06:50:32.464
seeing one fish right now but as
we all know, there are plenty of

06:50:32.465 --> 06:50:36.570
fish in the sea and we would 
like to give you have the option

06:50:36.571 --> 06:50:38.571
to adopt all of them.  Let's go 
ahead and switch back to the 

06:50:41.472 --> 06:50:43.113
code and we'll try and implement
a cover Flo widget, which is a 

06:50:43.114 --> 06:50:47.411
widget that we are getting with 
another plug-in just like we got

06:50:47.412 --> 06:50:49.412
the fire store  plug-in and 

06:50:50.734 --> 06:50:53.643
that's the simple cover Flo 
plug-in.  Now, cover Flo takes 

06:50:53.644 --> 06:50:58.320
in two arguments, it takes in an
item builder and an item count. 

06:50:58.321 --> 06:50:59.948
Item builder is going to take in
just basically the same code 

06:50:59.949 --> 06:51:03.860
that we had before, we're just 
going to change that index in 

06:51:03.861 --> 06:51:06.501
fish to make sure that when 
we're displaying multiple cards 

06:51:06.502 --> 06:51:11.031
we're not displaying Flo every 
single time, then we're passing 

06:51:11.032 --> 06:51:14.733
in the length of the fish list 
to item count so that we're not 

06:51:14.734 --> 06:51:17.609
going to scroll infinitely 
through cover flow.  Now we 

06:51:17.610 --> 06:51:19.610
should be able to hot reload 

06:51:22.457 --> 06:51:22.887
and switch over to the phones.
   &gt;&gt; EMILY FORTUNA:  This is so

06:51:22.888 --> 06:51:25.107
much better.  Look at all these 
fish I could adopted.

06:51:28.390 --> 06:51:30.390
I could adopt Gayle the whale 
except I 

06:51:32.109 --> 06:51:33.109
don't think I have space for 
Gail the whale.

06:51:33.110 --> 06:51:34.542
&gt;&gt; EMILY SHACK:  I think you 
might have gone a little  

06:51:34.543 --> 06:51:39.510
overboard there.  Why don't we 
try and see how we can remove a 

06:51:39.511 --> 06:51:41.745
fish from that reserved view.  
That seems like a pretty handy 

06:51:41.746 --> 06:51:46.258
case for our users.  Back to the
code, we're going to implement 

06:51:46.259 --> 06:51:48.259
two more arguments on that 

06:51:50.170 --> 06:51:52.016
cover flow, we're going to add a
dismissible items argument which

06:51:52.017 --> 06:51:56.309
will tell cover flow whether it 
should be able to dismiss cards 

06:51:56.310 --> 06:51:57.968
by dragging up or down and 
having those disappear from the 

06:51:57.969 --> 06:52:03.470
list.  We're also adding in a 
call back, a dismiss I believe 

06:52:03.471 --> 06:52:05.515
call back that will be -- 
dismissible call back that will 

06:52:05.516 --> 06:52:07.516
be 

06:52:09.027 --> 06:52:11.027
triggered whenever we dismiss a 
card from the list.

06:52:12.115 --> 06:52:14.115
Let's go back to the devices, 
hot 

06:52:15.158 --> 06:52:17.158
reload and see that in action.

06:52:21.157 --> 06:52:23.157
.  And I think I saw.

06:52:25.668 --> 06:52:27.089
&gt;&gt; EMILY FORTUNA:  Yeah, Gail is
available for anyone else to 

06:52:27.090 --> 06:52:31.600
reserve.  I don't have space for
Gail the whale but I think my 

06:52:31.601 --> 06:52:33.601
parents have space.

06:52:34.680 --> 06:52:35.700
I do want to adoment her.
   &gt;&gt; EMILY SHACK:  We don't 

06:52:35.701 --> 06:52:39.591
want to dismiss a fish and 
instantly regret T we want to 

06:52:39.592 --> 06:52:41.631
give the user the option to get 
fish back N this is where we'll 

06:52:45.322 --> 06:52:48.194
implement the accel rom terks if
a simple  undo functionality.  

06:52:48.195 --> 06:52:50.634
We need first of all our fish 
data to store the fish that has 

06:52:50.635 --> 06:52:54.492
last been undone or the fish 
that has last been removed from 

06:52:54.493 --> 06:52:56.940
the list so that we can undo 
that later on.  We're going to 

06:52:56.941 --> 06:52:58.941
keep track of that variable and 
then go ahead and set it 

06:52:59.805 --> 06:53:01.805
whenever we remove a fish.  This
is a pretty simple version of  

06:53:03.725 --> 06:53:05.589
undo, we're only going to be 
able to remove one fish at a 

06:53:05.590 --> 06:53:08.071
time but you can imagine some 
more complex version, we're 

06:53:08.892 --> 06:53:10.734
removing multipill fish.  For 
our purposes, this will work 

06:53:10.735 --> 06:53:13.001
just fine.
   Now we're going to need to 

06:53:13.002 --> 06:53:15.259
actual trig are an undo with the
accelerometer.

06:53:21.397 --> 06:53:23.397
Here we're implementing a nit 
state.

06:53:25.522 --> 06:53:27.805
All  stateful widgets have this 
method but a lot of times it 

06:53:27.806 --> 06:53:31.062
defults to the default 
implementation.  It will be 

06:53:31.063 --> 06:53:33.143
called whenever we start up that
case N our case we want to 

06:53:35.385 --> 06:53:38.030
introduce our own logic so we'll
write it out.  Here we'll 

06:53:38.031 --> 06:53:40.253
initialize a listener onto the 
accelerometer events stream, 

06:53:40.254 --> 06:53:43.321
that stream is something we're 
getting from the sensors 

06:53:43.322 --> 06:53:46.381
plug-in.  Now, we're going to 
listen to these events in the 

06:53:46.382 --> 06:53:49.240
background and it's going on 
throw us back any accelerometer 

06:53:50.655 --> 06:53:52.655
events it finds where the phone 
has 

06:53:54.410 --> 06:53:55.427
moved in some way.
   In our case, we want to 

06:53:55.428 --> 06:53:58.549
trigger a shake whenever the 
phone has accelerated in 

06:54:01.849 --> 06:54:03.849
the X axis by at least 2 meters 
per 

06:54:05.591 --> 06:54:07.850
second and we also want to 
trigger an undo if we recognize 

06:54:07.851 --> 06:54:10.511
the undo data is null and we're 
in that reserved view.

06:54:15.025 --> 06:54:17.501
So I believe, yes, we have to 
impose our less than or equal to

06:54:17.502 --> 06:54:21.811
or greater than or equal to 2 to
make sure that we have some 

06:54:21.812 --> 06:54:24.664
threshold there and then when we
go ahead and you think I'm about

06:54:24.665 --> 06:54:28.166
to say hot reload but I'm 
actually not, there's another 

06:54:28.167 --> 06:54:30.167
function here that we 

06:54:32.330 --> 06:54:34.579
can use called hot restart.  Hot
reload is actually going to be 

06:54:36.009 --> 06:54:38.440
stateful and bring you tbook 
your current state.  Hot restart

06:54:38.441 --> 06:54:40.441
is a little bit different.

06:54:41.911 --> 06:54:43.152
Because we have these anit state
calls and maybe some calls in 

06:54:43.153 --> 06:54:47.208
our main function before we bill
the widgets, those aren't going 

06:54:47.209 --> 06:54:51.724
to get rerun when we do a 
stateful hot reload.  We want to

06:54:51.725 --> 06:54:53.725
fully restart the app to display
our new changes.

06:54:55.009 --> 06:54:57.258
But a hot restarted is better 
than a full restart in that it's

06:54:57.259 --> 06:55:01.348
a lot faster, almost as fast as 
a hot reload.  We've hot 

06:55:01.349 --> 06:55:05.020
restarted and we can jump on 
over to the phones.

06:55:07.060 --> 06:55:09.937
&gt;&gt; EMILY FORTUNA:  So reserving 
Gail, remove, and she's back.

06:55:10.952 --> 06:55:12.787
   &gt;&gt; EMILY SHACK:  Perfect and 
she's disappeared from the other

06:55:12.788 --> 06:55:14.788
phone.

06:55:16.066 --> 06:55:18.739
(applause).
   Fort fort you know what would

06:55:18.740 --> 06:55:21.602
really be icing on the cake 
though?  If we had sound 

06:55:21.603 --> 06:55:23.603
effects.
   &gt;&gt; EMILY SHACK:  Okay.  Yeah.

06:55:25.088 --> 06:55:27.933
Those are pretty important in 
any fully featured app that's 

06:55:27.934 --> 06:55:31.190
trying to be a little bit  
whimsical.  So we want to 

06:55:31.191 --> 06:55:33.864
incorporate sound effect using 
our local audio tools class, 

06:55:33.865 --> 06:55:38.970
which is calling the audio tools
plug-in.  So here we are going 

06:55:38.971 --> 06:55:42.835
to at the top of our main  
function, we're going to load a 

06:55:42.836 --> 06:55:44.895
couple audio files, our 
background audio and our removed

06:55:44.896 --> 06:55:46.896
audio.

06:55:49.634 --> 06:55:51.722
We're also going to initialize 
an add yoa loop on that 

06:55:51.723 --> 06:55:54.842
background audio so that when we
start up the background audio, 

06:55:54.843 --> 06:55:56.843
it keeps playing until we maybe 

06:55:58.312 --> 06:56:00.312
interrupt it with a different 
audio file.

06:56:00.979 --> 06:56:02.902
So this would be a good time to 
pause and talk a little bit 

06:56:02.903 --> 06:56:04.775
about asynchronous functions in 
dart.  You'll notice that the 

06:56:04.776 --> 06:56:06.776
main function 

06:56:08.858 --> 06:56:10.287
is marked with the async 
keyword, meaning it's  

06:56:10.288 --> 06:56:12.288
asynchronous ask will return a 
future or a promise of a value 

06:56:13.339 --> 06:56:15.997
that's going to come a little 
bit later on.  It's also calling

06:56:15.998 --> 06:56:17.998
two more asynchronous functions.

06:56:20.267 --> 06:56:21.917
We have this Firebase sign in 
anonymously call as well as our 

06:56:21.918 --> 06:56:27.241
audio stools load file call, 
both are asipg nus, but we're 

06:56:27.242 --> 06:56:29.489
handling these no two different 
ways.  In the first case, we're 

06:56:29.490 --> 06:56:33.359
using the await keyword, that's 
saying we're dealing with an 

06:56:33.360 --> 06:56:35.604
asynchronous function but we 
really don't want the rest of 

06:56:35.605 --> 06:56:39.480
our main function to continue 
until this one has completed, 

06:56:39.481 --> 06:56:42.750
until the future has completed.
   So we're going to call a wait

06:56:42.751 --> 06:56:47.227
and that will pause execution on
everything after that await call

06:56:47.228 --> 06:56:51.504
in our main function.  For audio
tools we're using the dot then 

06:56:51.505 --> 06:56:55.834
operator.  That's going to pause
execution of everything inside 

06:56:55.835 --> 06:56:57.879
of that body of the operator, 
but it's not going to pause 

06:57:00.960 --> 06:57:02.800
execution on anything else, so 
in our case, we want to wait for

06:57:02.801 --> 06:57:07.491
the file to be loaded before we 
can play it but don't care if 

06:57:07.492 --> 06:57:09.515
the rest of the app builds a 
little bit before the we've 

06:57:09.516 --> 06:57:12.395
loaded our file.
   We have one more case to 

06:57:12.396 --> 06:57:15.693
incorporate audio which is that 
whenever we remove a fish, of 

06:57:15.694 --> 06:57:18.764
course we want to have a nice 
sound effect there as well.  So 

06:57:18.765 --> 06:57:21.474
we're just going to call play 
audio and then we should be 

06:57:21.475 --> 06:57:24.132
ready to switch back to the apps
-- on the devices.

06:57:27.915 --> 06:57:30.080
So we can do another hot restart
this time, and then switch over,

06:57:30.081 --> 06:57:35.169
and we should be able to hear 
some ocean breeze sounds in the 

06:57:35.170 --> 06:57:37.170
background.

06:57:41.089 --> 06:57:43.733
(Flush sound) as well as that 
crucial flushing noise when we 

06:57:43.734 --> 06:57:46.590
dismiss a fish.
   (Flushing sound) what do you 

06:57:46.591 --> 06:57:48.241
think?
   &gt;&gt; EMILY FORTUNA:  Looks 

06:57:48.242 --> 06:57:49.053
good.
   &gt;&gt; EMILY SHACK:  I think our 

06:57:49.054 --> 06:57:52.315
sap pretty good, so why don't we
go ahead and deliver this to 

06:57:52.316 --> 06:57:54.316
Francine.  Let's go back over to
the slides.

06:58:00.899 --> 06:58:02.519
And this app is a huge success 
with Francine!  She's so 

06:58:02.520 --> 06:58:05.188
excited.  She delivers it to her
customers, and 

06:58:08.499 --> 06:58:10.499
it drives business by over 300%,
all because of Flutter.

06:58:11.575 --> 06:58:13.606
But how did we get here?  Well, 
using Flutter, we were able toll

06:58:15.639 --> 06:58:17.639
achieve a native customizable 
look and 

06:58:18.904 --> 06:58:20.955
feel for both iOS and Android 
from a single code base, but not

06:58:20.956 --> 06:58:25.454
only was it a native look and 
feel, we also did really compile

06:58:25.455 --> 06:58:27.283
down to native code under the 
hood, so we didn't have to make 

06:58:27.284 --> 06:58:29.284
any 

06:58:30.955 --> 06:58:33.184
sacrifices in quality or 
customizeability.  We also 

06:58:33.185 --> 06:58:35.224
integrated with Cloud fire 
store, which gave us all of that

06:58:35.225 --> 06:58:40.753
fish data that updated in 
realtime and finally we 

06:58:40.754 --> 06:58:43.421
integrated our device level 
controls, the accelerometer and 

06:58:43.422 --> 06:58:45.863
sound to get that app really 
fully featured.

06:58:47.738 --> 06:58:49.597
And all of this, all of that 
functionality, hard to believe, 

06:58:49.598 --> 06:58:51.598
but it 

06:58:52.856 --> 06:58:54.914
was done in 310 lines of code.  
That's everything we wrote in 

06:58:54.915 --> 06:59:00.210
advance of the talk and 
everything we showed you today. 

06:59:00.211 --> 06:59:02.211
So that's pretty low.

06:59:03.428 --> 06:59:05.428
(applause)

06:59:07.623 --> 06:59:09.485
.
   &gt;&gt; EMILY FORTUNA:  Flutter is

06:59:09.486 --> 06:59:11.918
currently in beta.  What does 
that mean?  Well, it means we 

06:59:11.919 --> 06:59:14.169
support right to left layouts in
case you're writing a 

06:59:17.447 --> 06:59:19.447
fish adoption app around the 
Daddy Sea, it means we support 

06:59:20.101 --> 06:59:22.101
internationalization, also 
related for 

06:59:24.193 --> 06:59:26.643
that  Daddy Sea app, it means we
support accessibility H Flutter 

06:59:26.644 --> 06:59:28.644
has apps in all sorts of 
industries, we have finance, 

06:59:32.372 --> 06:59:34.200
health, music, travel, did hear 
are some of the brands and 

06:59:34.201 --> 06:59:36.443
companies that are writing 
Flutter apps.  I want to 

06:59:36.444 --> 06:59:41.173
highlight three of them for you.
First one is Hamilton.  If you 

06:59:41.174 --> 06:59:43.408
haven't heard of Hamilton, I'm 
sorry, you're probably not -- 

06:59:43.409 --> 06:59:45.409
you probably don't live in the  
U.S.

06:59:48.525 --> 06:59:50.755
, this is the name of the hit 
Broadway musical that is about 

06:59:50.756 --> 06:59:52.756
Alexander Hamilton and their 
official app is written using 

06:59:54.825 --> 06:59:57.453
Flutter, it has over a million 
downloads and over a half a 

06:59:57.454 --> 06:59:59.454
million monthly active users.

07:00:01.385 --> 07:00:03.385
On the left you see AdWords 
which is 

07:00:05.221 --> 07:00:07.925
the multimillion dollar product 
by Google that helps keep the 

07:00:07.926 --> 07:00:11.365
lights on in Google and their 
new app is also written in 

07:00:11.366 --> 07:00:13.366
Flutter and will be released 
soon.

07:00:15.875 --> 07:00:17.919
On the right we have Ali Baba, 
which is the top 10 internet 

07:00:17.920 --> 07:00:19.920
company sp their new mobile app 
is written in Flutter and 

07:00:22.000 --> 07:00:26.568
they're in the process of 
releasing it to users now.  If 

07:00:26.569 --> 07:00:28.206
you want to learn more about 
Flutter, we have so many great 

07:00:28.207 --> 07:00:32.750
resources for you.  First check 
out Flutter.io where you have 

07:00:32.751 --> 07:00:34.751
information about how to 
download it, set it up on your 

07:00:37.235 --> 07:00:39.491
computer, there's documentation,
we have a udacity Flutter  

07:00:39.492 --> 07:00:43.376
course.  If you want to learn 
about it right now, run over to 

07:00:43.377 --> 07:00:45.422
the codelabs, we have a whopping
nine codelabs about Flutter and 

07:00:48.115 --> 07:00:50.115
dart and at various points 
between today 

07:00:51.165 --> 07:00:52.788
and tomorrow you might see 
someone that looks kind of like 

07:00:52.789 --> 07:00:56.882
this and someone that looks kind
of like this helping out.  Also 

07:00:56.883 --> 07:00:58.904
we have a sandbox, there's the 
Flutter, Firebase and Cloud 

07:00:58.905 --> 07:01:03.247
sandbox, we have a great section
of goodies there, there's this 

07:01:03.248 --> 07:01:05.689
hot reload game, which is pretty
fun explings one of you played 

07:01:05.690 --> 07:01:06.722
it.
   &gt;&gt; EMILY SHACK:  I have 

07:01:06.723 --> 07:01:11.428
actually played the hot reload 
game, also a great example of 

07:01:11.429 --> 07:01:13.429
how you can get really good 

07:01:14.688 --> 07:01:15.493
looking 2D animations working in
Flutter.

07:01:15.494 --> 07:01:17.543
&gt;&gt; EMILY FORTUNA:  And there is 
one more talk tomorrow that is 

07:01:17.544 --> 07:01:22.484
about how you can set up good 
design patterns for your Flutter

07:01:22.485 --> 07:01:24.530
apps so say you're like I have 
so many widget, how do I manage 

07:01:24.531 --> 07:01:28.213
them and how do they talk to 
each other?  You should go to 

07:01:28.214 --> 07:01:30.214
this talk tomorrow.  There was 
one more talk that happened 

07:01:32.538 --> 07:01:34.398
earlier today, and if your time 
machine is not in order, you 

07:01:34.399 --> 07:01:36.399
should check it out 

07:01:37.675 --> 07:01:40.333
on YouTube and pretty soon.
   Here is the code that we 

07:01:40.334 --> 07:01:42.334
wrote today, 

07:01:44.423 --> 07:01:46.240
this link will also be out in 
two slides.  We would love to 

07:01:46.241 --> 07:01:48.241
hear your feedback.

07:01:49.755 --> 07:01:52.445
Go to the I/O web page, then the
lipg that's still there.  Thank 

07:01:52.446 --> 07:01:55.764
you so much, it was great to 
share Flutter with you.  We'll 

07:01:55.765 --> 07:01:58.045
take questions in the Flutter 
sandbox, and adoment a lobster.

07:02:01.261 --> 07:02:03.261
(applause)

07:02:04.440 --> 07:02:06.440
adopt a lobster.

07:02:07.863 --> 07:02:09.863
(applause).

07:02:16.448 --> 07:02:18.448
(End of the session).
   &gt;&gt;

07:02:18.567 --> 07:02:19.571
&gt;&gt;
   &gt;&gt;

07:02:19.572 --> 07:02:20.187
&gt;&gt;
   &gt;&gt;

07:02:20.188 --> 07:02:22.188
&gt;&gt;

07:02:23.460 --> 07:02:25.460
&gt;&gt; Pli
   &gt;&gt;

07:02:26.876 --> 07:02:28.876
&gt;&gt; 

07:02:29.967 --> 07:02:34.122
   &gt;&gt; Brand ambassadors will 
assist with directing you 

07:02:34.123 --> 07:02:36.775
through the designated exits.  
We'll be making room for those 

07:02:36.776 --> 07:02:40.054
who have registered for the next
session.  If you've registered 

07:02:40.055 --> 07:02:43.747
for the next session in this 
room, we ask that you please 

07:02:43.748 --> 07:02:47.066
clear the exproom return via the
registration line outside.  

07:02:47.067 --> 07:02:47.872
Thank you.
   &gt;&gt;

07:02:47.873 --> 07:02:48.708
&gt;&gt;
   &gt;&gt;

07:02:48.709 --> 07:02:49.511
&gt;&gt;
   &gt;&gt;

07:02:49.512 --> 07:02:50.346
&gt;&gt;
   &gt;&gt;

07:02:50.347 --> 07:02:52.347
&gt;&gt;
   &gt;&gt;

07:02:53.968 --> 07:02:55.968
&gt;&gt; 

07:04:07.686 --> 07:04:09.686
May 9, 2018.

07:04:45.921 --> 07:04:47.975
   Stage 6.

07:04:52.679 --> 07:04:54.772
Build Effective OEM-level Apps 
on Android Things.

07:11:43.699 --> 07:11:45.699
&gt;&gt; 

07:11:54.090 --> 07:11:55.711
gs.
   &gt;&gt;

07:11:55.712 --> 07:11:56.518
&gt;&gt;
   &gt;&gt;

07:11:56.519 --> 07:11:57.562
&gt;&gt;
   &gt;&gt;

07:11:57.563 --> 07:11:58.176
&gt;&gt;
   &gt;&gt;

07:11:58.177 --> 07:11:59.201
&gt;&gt;
   &gt;&gt;

07:11:59.202 --> 07:12:00.647
&gt;&gt;
   &gt;&gt;

07:12:00.648 --> 07:12:03.135
&gt;&gt;
   May 9, 2018.

07:12:04.564 --> 07:12:06.564
Stage 6.

07:12:10.881 --> 07:12:12.881
Build Effective OEM-Level Apps 
on Android Things.

07:17:01.686 --> 07:17:03.686
   &gt;&gt;

07:17:05.297 --> 07:17:07.297
&gt;&gt; 

07:21:05.826 --> 07:21:07.826
#

07:22:13.387 --> 07:22:16.276
.
   &gt;&gt; Welcome.  Please fill in 

07:22:16.277 --> 07:22:18.277
the seats near the front of the 
room.  Thank you.

07:26:20.064 --> 07:26:22.557
   &gt;&gt; DAVE SMITH:  Good 
afternoon, everybody.  Come on, 

07:26:22.558 --> 07:26:24.604
I got nothing?  Good afternoon, 
everybody.  There we go.

07:26:25.212 --> 07:26:28.061
(applause).
   There we go.  There we go.  

07:26:28.062 --> 07:26:29.294
Well, thank you so much for 
spending your time with me 

07:26:29.295 --> 07:26:31.295
today.

07:26:32.364 --> 07:26:34.387
My name is Dave Smith, I'm a 
developer advocate here at 

07:26:34.388 --> 07:26:36.388
Google working on the Android 
Things platform, I'm here to 

07:26:38.047 --> 07:26:39.487
talk to you a little bit about 
building apps for the Android 

07:26:39.488 --> 07:26:43.804
Things platform and how you can 
be more effective in the apps 

07:26:43.805 --> 07:26:46.855
that you build using the Android
SDK.  Whether you're new to 

07:26:46.856 --> 07:26:50.524
Android or whether you've been 
building Android apps since the 

07:26:50.525 --> 07:26:52.566
beginning, targeting Android 
Things devices has some subtle 

07:26:53.998 --> 07:26:55.821
differences from what you may or
may not be used to in working 

07:26:55.822 --> 07:26:59.480
with Android.  Understanding 
these differences is what will 

07:26:59.481 --> 07:27:01.716
ensure that you can build better
apps on the platform.

07:27:03.368 --> 07:27:05.368
Before we jump into too much of 
that, 

07:27:06.628 --> 07:27:07.638
left me do a quick  overview of 
what Android Things is maybe for

07:27:07.639 --> 07:27:12.167
the uninitiated.  Android Things
is a fully managed platform for 

07:27:12.168 --> 07:27:15.431
building connected devices at 
scale.  It's a variant of the 

07:27:15.432 --> 07:27:17.432
Android platform that is opt 
miemsed for use in embedded 

07:27:19.319 --> 07:27:21.319
devices, it enables you to build
apps 

07:27:22.925 --> 07:27:24.987
for embedded in IOT using the 
same Android SDK and Google Play

07:27:24.988 --> 07:27:28.334
Services that you use to build 
for the Android mobile.  You can

07:27:28.335 --> 07:27:30.335
develop apps using the same 

07:27:31.391 --> 07:27:33.635
tools such as Android Studio to 
deploy and debug your apps to 

07:27:33.636 --> 07:27:38.561
devices as well.  It includes 
the Android Things Developer 

07:27:38.562 --> 07:27:41.204
Console, this is a place where 
you can securely manage your 

07:27:41.205 --> 07:27:46.561
software stability and security 
updates for your devices.  You 

07:27:46.562 --> 07:27:49.060
simply upload your apps, choose 
the OS version that you want to 

07:27:49.061 --> 07:27:51.061
run on your device and then 
deploy those 

07:27:55.051 --> 07:27:57.280
updates to those devices over 
the air.  Security updates are 

07:27:57.281 --> 07:28:01.787
even deployed automatically to 
those devices for you.  Android 

07:28:01.788 --> 07:28:03.788
Things also supports powerful 

07:28:04.846 --> 07:28:06.272
hardware that's suitable for 
edge  computing and production, 

07:28:06.273 --> 07:28:09.534
capable of driving artificial 
intelligence and machine 

07:28:09.535 --> 07:28:13.016
learning out to the edge.
   This hardware is packaged 

07:28:13.017 --> 07:28:17.088
into system on modules that make
it easy for you to integrate 

07:28:17.089 --> 07:28:19.167
into your final production 
designs.

07:28:22.700 --> 07:28:23.933
When you look at all these 
things together, the process is 

07:28:23.934 --> 07:28:26.776
a little bit different than when
you were building apps on a 

07:28:26.777 --> 07:28:31.719
mobile twice.  Building a 
typical app for Android devices 

07:28:31.720 --> 07:28:34.392
means distributing a single app 
binary through the Google Play 

07:28:34.393 --> 07:28:36.423
Store typically, apps have to 
work on multiple 

07:28:39.913 --> 07:28:41.332
devices made by multiple OEM's 
targeting multiple versions of 

07:28:41.333 --> 07:28:44.198
the Android operating  system.  
Typically requiring you to do 

07:28:44.199 --> 07:28:47.452
various compatibility checks and
other things like that to make 

07:28:47.453 --> 07:28:49.923
sure that your app runs well 
across that entire breadth of 

07:28:50.945 --> 07:28:53.805
the ecosystem.
   With Android Things, you are 

07:28:53.806 --> 07:28:55.806
the 

07:28:56.860 --> 07:28:58.932
device OEM, you control when the
OS on your device gets upgraded 

07:28:58.933 --> 07:29:02.820
and the various apps that are 
bundled into that system image 

07:29:02.821 --> 07:29:04.821
along with it and you do all of 
this through the Android Things 

07:29:06.539 --> 07:29:08.539
Console instead of through the 
Google Play Store.

07:29:10.437 --> 07:29:12.274
This can greatly simplify your 
code because you don't need to 

07:29:12.275 --> 07:29:16.965
incorporate a lot of those same 
compatibility checks, but there 

07:29:16.966 --> 07:29:18.808
are some things to consider that
are going to be a little bit 

07:29:18.809 --> 07:29:21.462
different.  Let's start with 
displays.

07:29:22.897 --> 07:29:26.593
In Android Things, displays are 
optional.  They're supported and

07:29:26.594 --> 07:29:28.830
you can use the full Android UI 
toolkit to build 

07:29:33.129 --> 07:29:34.975
applications that have a 
graphical user interface, 

07:29:34.976 --> 07:29:36.614
whether it's touch-enabled or 
not, but we've removed a lot of 

07:29:36.615 --> 07:29:41.556
the default system UI and 
disabled or reworked some of the

07:29:41.557 --> 07:29:46.276
API's that assume the graphical 
displays are in place, because 

07:29:46.277 --> 07:29:47.904
many IOT devices will not have 
these pieces and we don't want 

07:29:47.905 --> 07:29:49.905
to place those requirements in 
there.

07:29:52.627 --> 07:29:56.307
The best example of this in 
practice is app permissions.  So

07:29:56.308 --> 07:29:58.308
in Android Things, permissions 
are 

07:29:59.769 --> 07:30:01.611
not granted at run time by the 
end user because we can't assume

07:30:01.612 --> 07:30:05.714
that there's a graphical display
to show things like this 

07:30:05.715 --> 07:30:07.955
dialogue and we can't even 
really assume that user granting

07:30:07.956 --> 07:30:09.956
specific types 

07:30:11.007 --> 07:30:13.007
of permission ss appropriate for
an IOT device.

07:30:14.876 --> 07:30:17.140
So instead, these permissions 
are actually granted by you the 

07:30:17.141 --> 07:30:19.982
developer using the Android 
Things Console.  Okay?

07:30:22.235 --> 07:30:24.682
So as the owner of your device, 
you're responsible for taking 

07:30:24.683 --> 07:30:27.943
control of the apps that run on 
this device and the permissions 

07:30:27.944 --> 07:30:30.795
that those particular 
applications have.  Okay?

07:30:34.318 --> 07:30:36.318
Now, because of this, 
permissions may 

07:30:37.410 --> 07:30:39.668
not be granted by end users, so 
that means you don't necessarily

07:30:39.669 --> 07:30:43.358
have to check whether or not 
those permissions were granted 

07:30:43.359 --> 07:30:45.359
-- or you don't have to request 
for those permissions to be 

07:30:47.251 --> 07:30:49.272
granted at run time, but since 
they are still granted 

07:30:49.273 --> 07:30:53.421
dynamically, the best practice 
is still for your code to verify

07:30:53.422 --> 07:30:56.066
that you have that permission.  
Okay?  Because that permission 

07:30:56.067 --> 07:30:58.508
could have been revoked by one 
of the console users 

07:31:01.774 --> 07:31:04.232
and you don't want your 
application code to behave 

07:31:04.233 --> 07:31:05.466
improper until those cases, so 
you'll still want to have checks

07:31:05.467 --> 07:31:09.532
like this one in your code when 
you are accessing dangerous 

07:31:09.533 --> 07:31:12.022
permissions that could be 
granted or revoked by the 

07:31:13.467 --> 07:31:16.303
console but you won't have to 
include the code that requests 

07:31:16.304 --> 07:31:18.757
those permissions upfront from 
the end user.

07:31:20.590 --> 07:31:21.820
Not doing this will result in 
the same security exception that

07:31:21.821 --> 07:31:26.122
you would otherwise see by 
trying to access those protected

07:31:26.123 --> 07:31:29.625
permissions if in fact that 
permission is disabled.

07:31:32.334 --> 07:31:34.809
Additionally, in Android Things 
1.0, permissions are no longer 

07:31:34.810 --> 07:31:38.677
granted automatically on reboot.
This is and that we did in some 

07:31:38.678 --> 07:31:42.772
of the earlier previews and is 
no longer the case, so that 

07:31:42.773 --> 07:31:44.830
means that as a developer, you 
can't simply just reboot your 

07:31:44.831 --> 07:31:48.134
device to try and get all those 
permissions brought into your 

07:31:48.135 --> 07:31:51.394
app automatically.  You have to 
actually use the tooling to make

07:31:51.395 --> 07:31:53.055
that happen.
   So during development, what 

07:31:53.056 --> 07:31:57.609
you're going to want to do is 
provide the dash G flag when 

07:31:57.610 --> 07:32:01.081
installing the applications on 
your device.  This will grant 

07:32:01.082 --> 07:32:03.082
all the permissions 

07:32:04.393 --> 07:32:06.393
requested by your app by 
default.

07:32:07.436 --> 07:32:09.346
Android Studio actual disl this 
for you automatically, so 

07:32:09.347 --> 07:32:12.628
whenever you click build and run
out of the IDE, this process is 

07:32:12.629 --> 07:32:14.629
taken care of for you.  But if 
you want to do this from the 

07:32:15.320 --> 07:32:17.320
command line, you're going to 
have to add that flag yourself.

07:32:19.929 --> 07:32:23.387
   Another option is to use the 
PM grant command to individually

07:32:23.388 --> 07:32:28.325
grant or revoke permissions 
inside of your application.  You

07:32:28.326 --> 07:32:30.761
can do this during development 
or maybe just to test what the 

07:32:30.762 --> 07:32:33.001
individual behavior is of a 
certain permission if 

07:32:37.091 --> 07:32:39.091
you deny that inside of your 
application.

07:32:39.173 --> 07:32:41.008
If you prefer to usms the Gradle
command line or perhaps you're 

07:32:41.009 --> 07:32:45.081
running automated tests or other
things where the IDE is not 

07:32:45.082 --> 07:32:47.112
involved, you can actually add 
this to your build.

07:32:53.294 --> 07:32:55.294
Gradle file using an ADP options
block 

07:32:56.997 --> 07:32:58.656
to afly that dash flag anytime 
your application is installed.

07:33:02.130 --> 07:33:04.130
Speaking of UI, we should talk 
about activities.

07:33:08.962 --> 07:33:12.562
Most developers think that 
activities are essentially 

07:33:08.962 --> 07:33:10.962
screens.

07:33:13.944 --> 07:33:15.944
So if we remove displays, why do
we need to keep them around?

07:33:22.032 --> 07:33:22.919
Now, it turns out that 
activities are a little bit more

07:33:22.920 --> 07:33:24.920
than that, and an activity 
represents a component of user 

07:33:27.950 --> 07:33:29.950
focus in Android.  For devices 
with graphical displays, 

07:33:32.923 --> 07:33:32.953
that does mean that it will 
render the contents of the view 

07:33:32.954 --> 07:33:34.935
onto the window, but even for 
devices without displays, 

07:33:34.936 --> 07:33:38.869
activity also handle all of the 
user input events, whether 

07:33:34.936 --> 07:33:36.936
that's coming from a touchscreen
input or maybe it's a game 

07:33:36.963 --> 07:33:37.932
control are or a keyboard or any
other external input device that

07:33:37.933 --> 07:33:40.191
you may have connected, all of 
those events are going to be 

07:33:40.192 --> 07:33:42.192
delivered to the foreground 
activity.

07:33:43.709 --> 07:33:46.381
So even without a graphical 
display, activities are still a 

07:33:46.382 --> 07:33:48.382
very important 

07:33:51.578 --> 07:33:53.578
portion of Android user 
interface, even 

07:33:55.696 --> 07:33:57.127
though the user interface may 
not actually include the 

07:33:57.128 --> 07:33:59.554
graphical UI.
   It's important to know when 

07:33:59.555 --> 07:34:02.648
talking about many activity, 
activities are still vulnerable 

07:34:02.649 --> 07:34:05.549
to configuration changes the 
same way they are on Android.  

07:34:05.550 --> 07:34:07.789
As an Android developer, you're 
probably used to at least at 

07:34:07.790 --> 07:34:11.102
some point having to deal with 
an orientation change of a 

07:34:11.103 --> 07:34:13.976
device and having that destroy 
your activity and re-create a 

07:34:14.794 --> 07:34:16.794
new snrans of it.  That's 
effectively a very common 

07:34:18.156 --> 07:34:20.156
configuration change on Android 
mobile devices.

07:34:21.412 --> 07:34:23.665
While on Android Things that 
specific instance probably is 

07:34:23.666 --> 07:34:27.584
not very common, if it would 
happen at all, there are still a

07:34:27.585 --> 07:34:29.653
number of other configuration 
changes that might still happen 

07:34:29.654 --> 07:34:31.665
on Android Things devices, 
things like changing the 

07:34:34.718 --> 07:34:36.153
default locale, or connecting or
disconnect a keyboard, a 

07:34:36.154 --> 07:34:38.190
physical keyboard from the 
device.

07:34:41.462 --> 07:34:44.118
All of these events have the 
same net effect in that that 

07:34:44.119 --> 07:34:47.006
activity will be destroyed and 
re-created if it happens to be 

07:34:47.007 --> 07:34:51.335
in the foreground.  So generally
speaking with your -- whether 

07:34:51.336 --> 07:34:53.584
you're working with activities 
on Android Things, the same 

07:34:53.585 --> 07:34:57.678
rules apply to activities in 
terms of the logic that you put 

07:34:57.679 --> 07:34:59.679
into those components.  They're 
effectively just as fragile in 

07:35:01.789 --> 07:35:03.857
terms of their life cycle, so 
you're only going to want to 

07:35:03.858 --> 07:35:07.532
have view base logic or user 
interface based logic inside of 

07:35:07.533 --> 07:35:11.444
these activities.  Try not to 
put too much additional state 

07:35:11.445 --> 07:35:13.445
into these components.  You're 
going to want to push that out 

07:35:14.964 --> 07:35:16.964
into other parts of your 
application.

07:35:18.468 --> 07:35:21.330
Android Things even uses 
activities to launch your 

07:35:21.331 --> 07:35:25.618
primary application as part of 
the boot process.  We do this 

07:35:25.619 --> 07:35:27.619
using the home intent, which is 
the same intent used to trigger 

07:35:29.491 --> 07:35:31.998
the app launcher on an Android 
mobile device.  This intent 

07:35:31.999 --> 07:35:34.235
starts your app automatically on
boot and specifically 

07:35:37.891 --> 07:35:39.750
the activity inside of that 
application, start it 

07:35:39.751 --> 07:35:41.979
automatically on boot, and in 
addition to that, if that 

07:35:41.980 --> 07:35:44.244
application crashes or 
terminates for any  reason, 

07:35:45.868 --> 07:35:50.203
Android is going to restart that
application automatically.  So 

07:35:50.204 --> 07:35:52.257
this becomes the main entry 
point into your application that

07:35:52.258 --> 07:35:58.014
is automatically managed by the 
Android Things platform.  So we 

07:35:58.015 --> 07:36:00.276
don't want to forget about 
activities just yet.

07:36:01.925 --> 07:36:04.803
A couple other things about 
Android Things devices.  Android

07:36:04.804 --> 07:36:07.061
Things devices are also 
relatively memory constrained 

07:36:07.062 --> 07:36:11.780
when you compare them to an 
Android phone.  A typical 

07:36:11.781 --> 07:36:13.781
Android Things device may have 5
&lt;!

07:36:16.666 --> 07:36:18.729
0&gt; megabytes of -- 512 megabytes
of RAM or  so, compare that with

07:36:18.730 --> 07:36:20.992
the multiple gigabytes of RAM 
you would have on an 

07:36:24.674 --> 07:36:27.102
Android phone like say a Pixel 
or Pixel 2.  For you the 

07:36:27.103 --> 07:36:31.009
developer, there's actually a 
much lower per process heap size

07:36:31.010 --> 07:36:33.460
for your individual application.
   So if you're not familiar 

07:36:33.461 --> 07:36:38.167
with this idea, Android sets a 
fixed heap level on every 

07:36:38.168 --> 07:36:39.981
application running on that 
device, and it's significantly 

07:36:39.982 --> 07:36:45.773
lower than the total available 
memory on that device.  And 

07:36:45.774 --> 07:36:48.624
since the Android Things devices
are relatively memory 

07:36:48.625 --> 07:36:50.675
constrained, that per process 
limit is significantly lower 

07:36:52.940 --> 07:36:54.940
than it would be on an Android 
phone.

07:36:55.205 --> 07:36:57.063
Because of that, if you're 
porting code fre an Android 

07:36:57.064 --> 07:37:00.959
mobile device over to Android 
Things, you just have to realize

07:37:00.960 --> 07:37:02.581
that if you're using the same 
amount of memory in your app, 

07:37:02.582 --> 07:37:06.698
there's going to be a lot less 
free memory in that same process

07:37:06.699 --> 07:37:09.155
available to you.  Okay?  So you
have to keep that in mind, and 

07:37:11.399 --> 07:37:13.399
you also want to realize that 
this can 

07:37:14.454 --> 07:37:16.926
also translate into a 
significantly larger amount of 

07:37:16.927 --> 07:37:18.976
garbage collection events 
happening as you allocate new 

07:37:19.180 --> 07:37:24.474
objects.  Okay?  So you want to 
keep a close eye on object 

07:37:24.475 --> 07:37:26.750
allocations, how often you're 
doing allocations, because you 

07:37:26.751 --> 07:37:30.865
may run into that ceiling much 
more quickly than you otherwise 

07:37:30.866 --> 07:37:32.776
would on an Android device or 
you might see the garbage 

07:37:32.777 --> 07:37:34.777
collector kicking in quite a bit
more.

07:37:37.061 --> 07:37:39.953
The memory profiler in Android 
Studio is a really great 

07:37:39.954 --> 07:37:43.618
resource to help you key an eye 
on what's going on inside your 

07:37:43.619 --> 07:37:45.472
memory, it will allow you to 
track those allocations over 

07:37:45.473 --> 07:37:49.162
time as well as see overlaid 
into it the individual garbage 

07:37:49.163 --> 07:37:51.711
collection events, so you can 
get a really good idea of 

07:37:51.712 --> 07:37:56.118
whether or not your application 
is allocating too much memory 

07:37:56.119 --> 07:37:59.377
and causing trouble.
   Some of the things you can do

07:37:59.378 --> 07:38:02.439
to help understand your device 
ailtz bit better is use some of 

07:38:02.440 --> 07:38:07.227
the activity manager methods to 
do some inspection on the memory

07:38:07.228 --> 07:38:10.497
capabilities of your particular 
device.  So for example, you can

07:38:10.498 --> 07:38:15.413
use the memory class attribute 
on activity manager, this will 

07:38:15.414 --> 07:38:17.055
give you the exact heap size 
that's available to your 

07:38:17.056 --> 07:38:19.056
application, the value that's 
returned is the value 

07:38:22.151 --> 07:38:27.393
in mega bytes that is how much 
memory you have.  Large class is

07:38:27.394 --> 07:38:30.482
how much your application would 
have if you added the large heap

07:38:30.483 --> 07:38:32.326
attribute to your manifest.
   I would caution you against 

07:38:32.327 --> 07:38:35.993
doing this on Android Things.  
Generally speaking, because 

07:38:35.994 --> 07:38:37.994
Android 

07:38:39.079 --> 07:38:40.718
Things devices are memory 
constrained, the memory class 

07:38:40.719 --> 07:38:42.719
and the large memory class of 
these devices are generally 

07:38:44.191 --> 07:38:46.489
configured to be the same value.
So adding this at tribility to 

07:38:46.490 --> 07:38:50.557
your manifest is essentially not
going to do anything.  Okay?

07:38:54.481 --> 07:38:56.526
You also want to inspect the low
memory threshold of this device 

07:38:56.527 --> 07:38:59.417
to get a sense for what that 
actually looks like.  When the 

07:38:59.418 --> 07:39:01.486
available memory on the device 
falls below that memory 

07:39:02.932 --> 07:39:05.188
threshold, the device is in a 
state that we call memory 

07:39:05.189 --> 07:39:06.636
pressure, and we'll talk a 
little bit more about what that 

07:39:06.637 --> 07:39:11.172
means and why it's important in 
a little bit.  But just keep it 

07:39:11.173 --> 07:39:12.820
in mind for  now.
   So I want you to notice 

07:39:12.821 --> 07:39:17.748
something else about this 
diagram that I had up before.  

07:39:17.749 --> 07:39:19.795
Because of this per process heap
limit that's a fixed value for a

07:39:19.796 --> 07:39:21.796
single 

07:39:23.045 --> 07:39:25.045
application, if you try to put 
all of 

07:39:27.376 --> 07:39:29.628
your application code into a 
single process or a single AP-K 

07:39:29.629 --> 07:39:33.551
you're going to be severely 
limited if your ability to fully

07:39:33.552 --> 07:39:35.552
utilize the memory that is 

07:39:37.242 --> 07:39:38.681
available on this device.
   Now, keep in mind, with 

07:39:38.682 --> 07:39:40.917
Android Things, the only apps on
the device are 

07:39:44.647 --> 07:39:46.486
your apps, so you should be able
to take full advantage of those 

07:39:46.487 --> 07:39:48.487
memory resources as much as you 
possibly can.

07:39:53.245 --> 07:39:55.120
The way to do that is to splilt 
your application into multiple 

07:39:55.121 --> 07:39:59.637
processes, because that limit 
essentially will apply to each 

07:39:59.638 --> 07:40:01.482
one of those processes 
individually, so if you can fed 

07:40:01.483 --> 07:40:05.770
rate the design of your 
application out into multiple 

07:40:05.771 --> 07:40:08.440
components that are actually 
running in separate APK's, 

07:40:08.441 --> 07:40:10.441
you'll have a 

07:40:12.325 --> 07:40:14.169
much better ability to fully 
utilize the memory available on 

07:40:14.170 --> 07:40:16.170
whatever device ha you're 
running.

07:40:18.268 --> 07:40:20.102
To make the most effective use 
of our device, we're going to 

07:40:20.103 --> 07:40:25.428
break this app up into multiple 
APK's with the primary activity 

07:40:25.429 --> 07:40:27.429
running in the foreground and 
additional apps running in the 

07:40:29.731 --> 07:40:31.731
background with support services
running inside.

07:40:32.382 --> 07:40:34.637
The additional benefit of 
running this architecture is 

07:40:34.638 --> 07:40:36.638
that it actually insulates these
various components from 

07:40:39.596 --> 07:40:41.446
one another, so in this 
scenario, if a crash happens in 

07:40:41.447 --> 07:40:46.024
one of these components, it's 
localized just to that element. 

07:40:46.025 --> 07:40:48.025
And it won't bring down your 
entire 

07:40:49.701 --> 07:40:51.979
application and have to restart 
all of that from the beginning. 

07:40:51.980 --> 07:40:54.003
So you can manage those 
individual issues just within 

07:40:54.004 --> 07:40:56.068
that component and leave the 
rest of the applications or 

07:40:58.719 --> 07:41:00.719
components running on your 
device to be unaffected.

07:41:02.011 --> 07:41:04.689
It also means that you can 
launch or relaunch these 

07:41:04.690 --> 07:41:07.621
components individually as 
needed by your application.  So 

07:41:07.622 --> 07:41:10.256
if you don't need to load 
everything at once at boot, you 

07:41:10.257 --> 07:41:13.562
can launch various services and 
components just as you need 

07:41:13.563 --> 07:41:17.848
them.
   Now, it turns out the 

07:41:17.849 --> 07:41:21.942
decision to put some of your 
components into background apps 

07:41:21.943 --> 07:41:24.196
has consequences as well.  
Android treelts foreground and 

07:41:25.815 --> 07:41:28.046
background processes a little 
bit differently and we need to 

07:41:28.047 --> 07:41:30.047
be aware of what's going on 
under the hood here.

07:41:32.746 --> 07:41:35.020
Android marks application 
processes by priority based on 

07:41:35.021 --> 07:41:37.021
how closely they are 

07:41:39.710 --> 07:41:40.529
related to the foreground 
application, and this is very 

07:41:40.530 --> 07:41:42.530
important because of a system 
process known as the Low Memory 

07:41:42.995 --> 07:41:44.995
Killer.

07:41:47.499 --> 07:41:49.765
The low Low Memory Killer is a 
process constantly prowling in 

07:41:49.766 --> 07:41:53.680
the background looking for new 
processes to devour, its job is 

07:41:53.681 --> 07:41:55.681
to ensure that the free memory 
on the system is available 

07:42:00.556 --> 07:42:03.041
to the foreground app at any 
girve given time.  So if the 

07:42:03.042 --> 07:42:05.893
foreground app needs new memory 
and the app happens to be in a 

07:42:08.237 --> 07:42:09.864
process of memory pressure, Low 
Memory Killer will go around 

07:42:09.865 --> 07:42:13.125
looking for processes it can 
terminate to Al loaf indicate 

07:42:13.126 --> 07:42:15.126
that memory back to the  
foreground.

07:42:15.376 --> 07:42:17.842
On an Android device like a 
typical user-driven Android  

07:42:17.843 --> 07:42:21.701
device, this can be somewhat of 
a new San to developers because 

07:42:21.702 --> 07:42:23.352
their app may get terminated 
from the background but at some 

07:42:23.353 --> 07:42:26.438
point the user will relaunch it 
later and everything will be  

07:42:26.439 --> 07:42:29.117
fine.
   On Android Things, the Low 

07:42:29.118 --> 07:42:34.001
Memory Killer could mean that 
you have critical device 

07:42:34.002 --> 07:42:35.862
functionality that is being 
terminated out from underneath 

07:42:35.863 --> 07:42:39.418
you and you didn't even know it.
Perhaps there's a device driver 

07:42:39.419 --> 07:42:43.122
run ng that service, and Android
killed that because it thought 

07:42:43.123 --> 07:42:45.123
it was low enough priority in 
the background.  Okay?

07:42:45.969 --> 07:42:47.969
So something to keep in mind as 
you're moving through this.

07:42:51.867 --> 07:42:53.686
In addition, Android Oreo 
introduced execution limit for 

07:42:53.687 --> 07:42:57.366
background apps, so applications
can no longer be started into a 

07:42:57.367 --> 07:42:59.620
background state, they must 
either be launched from the  

07:42:59.621 --> 07:43:03.514
foreground app or bound to it in
some way.

07:43:05.536 --> 07:43:06.983
So because of these two things, 
there's a number of different 

07:43:06.984 --> 07:43:11.914
common ways that you may or may 
not have used in the past to 

07:43:11.915 --> 07:43:14.173
launch components into the 
background.  We're going to kind

07:43:14.174 --> 07:43:16.205
of walk through those a little 
bit.  The first that you might 

07:43:16.206 --> 07:43:20.892
be familiar with is using the 
boot completed broadcast to 

07:43:20.893 --> 07:43:22.893
listen for a final boot message 
coming from the Android 

07:43:24.214 --> 07:43:26.048
framework saying that the system
is up and running, you can 

07:43:26.049 --> 07:43:30.761
launch other apps if you would 
like.  Do not use this on 

07:43:30.762 --> 07:43:32.795
Android Things.  Approximate.
   The primary reason is because

07:43:32.796 --> 07:43:37.069
of those background execution 
limits, your background services

07:43:37.070 --> 07:43:41.362
actually can't be properly 
started into that state.  In a 

07:43:41.363 --> 07:43:44.238
lot of cases, it won't even 
work.  Okay?  In addition to 

07:43:44.239 --> 07:43:48.770
that, this background broadcast,
this boot completed broadcast is

07:43:48.771 --> 07:43:52.853
very unpredictable in terms of 
its timing.  In a lot of cases, 

07:43:52.854 --> 07:43:55.419
this boot completed broadcast 
actually triggers much, much 

07:43:59.457 --> 07:44:03.723
later than when the home intent 
and the home activity are fully 

07:43:59.457 --> 07:44:02.326
up and running in the 
foreground.  Okay?  So if you're

07:44:02.327 --> 07:44:04.327
trying to synchronize between 
these two things, it's not a 

07:44:05.623 --> 07:44:07.860
very good mechanism on rely on.
   In addition, I would 

07:44:07.861 --> 07:44:12.810
recommend you don't use start 
service.  For a similar reason, 

07:44:12.811 --> 07:44:17.482
start service is limited by 
those same background execution 

07:44:17.483 --> 07:44:22.401
limits unless you are starting a
service in foreground mode.  

07:44:22.402 --> 07:44:24.402
Now, foreground services require
you 

07:44:26.256 --> 07:44:27.280
as a developer to actually build
in a notification that would 

07:44:27.281 --> 07:44:32.013
typically display to the user 
when that service is running.   

07:44:32.014 --> 07:44:33.639
Well, we took away the system UI
where that notification would 

07:44:33.640 --> 07:44:38.171
display, so you end up doing a 
bunch of work for dissplaipg the

07:44:38.172 --> 07:44:39.591
service that doesn't -- 
displaying the service that 

07:44:39.592 --> 07:44:41.592
doesn't actually gain you 
anything.

07:44:42.257 --> 07:44:44.110
In addition to that, there are 
some difficulties with started 

07:44:44.111 --> 07:44:46.111
services when it comes to 
managing their life cycle.

07:44:50.113 --> 07:44:51.537
A started service, if that 
crashes for some reason, you 

07:44:51.538 --> 07:44:55.214
don't have a direct connection 
to understand that that occurred

07:44:55.215 --> 07:44:57.317
and that you need to restart 
that service so that you can 

07:44:57.318 --> 07:44:59.318
manage that process a little bit
better.

07:45:02.048 --> 07:45:03.686
Now, Android does have this 
thing that services can return 

07:45:03.687 --> 07:45:07.978
this start sticky attribute and 
that's a way for applications to

07:45:07.979 --> 07:45:10.060
tell Android that this service 
is important and if it crashes 

07:45:12.514 --> 07:45:14.595
or terminates for some reason, I
need it to be restarted.

07:45:16.831 --> 07:45:19.672
However, Android usually only 
does this about once or twice 

07:45:19.673 --> 07:45:22.538
for a given service.  Before 
they just sort of giver up and 

07:45:24.779 --> 07:45:26.819
realize that at some point the 
user will launch this app again,

07:45:26.820 --> 07:45:30.296
maybe this will start again and 
everything will be fine.  That 

07:45:30.297 --> 07:45:32.755
type of thinking doesn't go well
for those background services 

07:45:32.756 --> 07:45:36.262
that have critical functionality
in them like a device driver.  

07:45:36.263 --> 07:45:38.263
Okay?

07:45:39.317 --> 07:45:41.960
So we recommend you use bind 
service instead.  By using bound

07:45:41.961 --> 07:45:44.413
services, this gives the 
background processes an active 

07:45:47.906 --> 07:45:49.763
connection to that foreground 
app, so you'll have a good 

07:45:49.764 --> 07:45:53.465
indication of when that service 
is running and when that service

07:45:53.466 --> 07:45:55.545
has died for some reason so that
you can manage that, relaunch it

07:45:55.546 --> 07:45:57.619
if you need to, do any of those 
things.

07:45:59.480 --> 07:46:01.362
This also happens the added 
benefit of a built-in 

07:46:01.363 --> 07:46:03.826
communication channel between 
the applications that are bound,

07:46:05.461 --> 07:46:07.290
so you can do some more direct 
communication with that service 

07:46:07.291 --> 07:46:09.291
without 

07:46:10.915 --> 07:46:12.355
having to use intense or other 
mechanisms like that to pass 

07:46:12.356 --> 07:46:15.252
data back and forth.
   So looking at this diagram 

07:46:15.253 --> 07:46:17.510
again, one of the other 
important reasons to use 

07:46:21.448 --> 07:46:24.403
bound services is that pure 
background  applications like 

07:46:24.404 --> 07:46:28.137
those that would have been 
started by boot completed or 

07:46:24.404 --> 07:46:28.303
just start service on its own 
are very low priority on the 

07:46:28.304 --> 07:46:34.899
scale.  Okay?  Whereas bound 
service applications are almost 

07:46:34.900 --> 07:46:37.161
as high priority as the 
foreground app.  They are  

07:46:37.162 --> 07:46:39.396
literally the highest priority 
you can get without being the  

07:46:40.024 --> 07:46:42.867
foreground app.
   So this ensures that those 

07:46:42.868 --> 07:46:44.868
background 

07:46:46.765 --> 07:46:48.193
processes stay safe from 
something like Low Memory Killer

07:46:48.194 --> 07:46:50.835
if the device ever does get into
a memory pressure situation.  

07:46:50.836 --> 07:46:54.716
Okay?  So you get better 
management of those services and

07:46:54.717 --> 07:46:57.370
you get better protection from a
memory management perspective.

07:46:57.987 --> 07:47:01.713
   All right.  Let's take a look
at what this would actually look

07:47:01.714 --> 07:47:05.638
like in code.  So if I have just
a basic example of a service 

07:47:05.639 --> 07:47:07.506
here that has a device driver 
inside of it, in this case this 

07:47:07.507 --> 07:47:11.627
is just a device driver to take 
some button inputs and convert 

07:47:11.628 --> 07:47:13.628
them into key events like they 
were coming off of the keyboard.

07:47:16.109 --> 07:47:17.937
All of this logic can be fully 
en cans laitd into this external

07:47:17.938 --> 07:47:22.654
service and can run on its own, 
so we can build this service 

07:47:22.655 --> 07:47:24.962
component and then from the 
foreground app we can construct 

07:47:24.963 --> 07:47:28.250
an intent to that service 
component and we can bind to it.

07:47:29.068 --> 07:47:32.936
   Notice that I'm doing this 
from the application class and 

07:47:32.937 --> 07:47:36.241
not from the primary activity.  
Remember our discussion from 

07:47:38.296 --> 07:47:41.137
activities before and the life 
cycle associated with those.  If

07:47:41.138 --> 07:47:45.666
this is a service that needs to 
be as persistent as possible.  

07:47:45.667 --> 07:47:47.731
We want to bind to it from a 
component that is expected to be

07:47:47.732 --> 07:47:50.846
around just as long.  Okay?  So 
that you don't end up with life 

07:47:52.298 --> 07:47:54.130
cycle issues where your activity
gets destroyed, re-created and 

07:47:54.131 --> 07:47:57.624
you're rebinding to that service
unnecessarily.  It doesn't 

07:47:57.625 --> 07:48:00.537
necessarily cause a major 
problem, but it's not the best 

07:48:00.538 --> 07:48:03.394
idea.
   In addition with bound 

07:48:03.395 --> 07:48:07.054
services, this also means that 
you get this feedback mechanism 

07:48:07.055 --> 07:48:10.127
coming through the service 
connection call-back.  So when 

07:48:10.128 --> 07:48:12.391
you bind to a service, you 
provide this call back as a 

07:48:12.392 --> 07:48:16.038
service connection and when the 
service is up and running, you 

07:48:16.039 --> 07:48:19.912
will be notified through the on 
service connected method, so you

07:48:19.913 --> 07:48:21.534
know exactly when this is now 
something you can interact with 

07:48:21.535 --> 07:48:23.592
or communicate with if you need 
to.

07:48:26.663 --> 07:48:28.663
In addition, on service 
disconnected 

07:48:29.753 --> 07:48:32.000
tells us anytime that service 
stops unexpectedly, maybe 

07:48:32.001 --> 07:48:35.063
because it has crashed or 
something else has occurred, and

07:48:35.064 --> 07:48:37.326
at that point we probably need 
to take a look although 

07:48:37.327 --> 07:48:41.272
restarting this -- at restarting
this, especially if it's running

07:48:41.273 --> 07:48:43.154
some critical functionality on 
our device.  We now have the 

07:48:43.155 --> 07:48:45.155
information we need to properly 
manage this functionality from 

07:48:47.491 --> 07:48:49.331
within our applications, which 
we wouldn't get with started 

07:48:49.332 --> 07:48:53.872
services or other of these more 
independent mechanisms.

07:48:55.284 --> 07:48:57.284
Here is kind of a final picture 
of that architecture again.

07:49:01.808 --> 07:49:04.093
Android is going to manage for 
us on automatically that 

07:49:04.094 --> 07:49:06.720
foreground app using the home 
intent, launch it automatic on 

07:49:08.487 --> 07:49:11.948
boolt and  relaunch it if that 
application crashes.  Then our 

07:49:11.949 --> 07:49:13.773
application code can manage 
these additional background 

07:49:13.774 --> 07:49:16.637
support services through the 
bound service mechanism.

07:49:19.911 --> 07:49:23.012
   The last thing I want to 
share with you today are a 

07:49:23.013 --> 07:49:26.923
couple quick tips on doing this 
type of development from within 

07:49:26.924 --> 07:49:28.962
Android Studio or within the 
development tools.

07:49:34.467 --> 07:49:36.132
So you can manage multiple APK's
from within a single Android 

07:49:36.133 --> 07:49:39.015
Studio project by adding each 
additional package as a new 

07:49:39.016 --> 07:49:43.271
module.  You can add multiple 
modules to the same project ask 

07:49:43.272 --> 07:49:45.967
all those modules can represent 
an APK or an individual app 

07:49:46.394 --> 07:49:50.486
process.  This allows you to 
manage all of your code in one 

07:49:50.487 --> 07:49:53.146
place, even though they're 
technically separate apps.

07:49:55.618 --> 07:49:57.618
Now, by default, Android Studio 
does 

07:49:58.727 --> 07:50:01.010
not allow you to deploy an app 
module that does not contain a 

07:50:01.011 --> 07:50:04.262
launcher activity.  Okay?  A 
activity that has that main 

07:50:04.263 --> 07:50:07.954
launcher intent filter on it.  
This doesn't work so well for 

07:50:09.408 --> 07:50:12.286
background service apps that 
don't have any activities at all

07:50:12.287 --> 07:50:16.772
in them in some cases, but you 
can modify this behavior.  For a

07:50:16.773 --> 07:50:19.434
background services app, you can
he had it's the run 

07:50:19.435 --> 07:50:21.706
configuration and -- you can 
edit the run configuration 

07:50:23.342 --> 07:50:25.220
option and simply adjust the 
launch options for that 

07:50:25.221 --> 07:50:27.043
particular module, set that 
target to noggin stead of 

07:50:27.044 --> 07:50:29.710
default activity.
   This will enable Android 

07:50:29.711 --> 07:50:31.711
Studio to 

07:50:32.782 --> 07:50:34.782
deploy that service only app to 
your 

07:50:36.069 --> 07:50:39.148
device and it won't complain.
   You can also do this from the

07:50:39.149 --> 07:50:41.149
command line, and one of the 
advantages of doing 

07:50:44.053 --> 07:50:46.096
this way is that Android Studio 
does require that you deploy 

07:50:46.097 --> 07:50:50.795
only one module at a time by 
selecting that module from the 

07:50:50.796 --> 07:50:53.233
run configuration listed in the 
UI.  So if you have an 

07:50:53.234 --> 07:50:55.234
application that's constructed 
of four or five different 

07:50:57.918 --> 07:51:00.772
modules all as individual APKs, 
it can be a bit cumbersome if 

07:51:00.773 --> 07:51:04.506
you have toly deploy them all 
individually all the time.  One 

07:51:04.507 --> 07:51:06.545
of the advantages of using the 
Gradle command line is that by 

07:51:08.613 --> 07:51:11.296
defaulted, when you run a 
command like install debug with 

07:51:11.297 --> 07:51:13.731
no other  modifiers, it builds 
and installs every module in 

07:51:14.337 --> 07:51:16.839
that project.  So with one 
command, you can deploy 

07:51:18.690 --> 07:51:20.690
everything on the latest version
to that device.

07:51:21.133 --> 07:51:23.172
And you can still do individual 
modules if you would prefer to 

07:51:23.173 --> 07:51:27.167
do that by just adding the 
module name to the command as 

07:51:27.168 --> 07:51:29.629
well.
   Once you've got the modules 

07:51:29.630 --> 07:51:32.890
on the device, the other thing 
you can do directly from the 

07:51:32.891 --> 07:51:34.891
command line that isn't really 
supported in Android Studio 

07:51:37.211 --> 07:51:39.472
today is the ability to start 
those individual components 

07:51:39.473 --> 07:51:43.954
whether they're activities or 
services, so user rg the AM 

07:51:43.955 --> 07:51:45.579
Shell commands, you can trigger 
those services manually if you 

07:51:45.580 --> 07:51:49.257
want to test out some of that 
behavior sort of independently 

07:51:49.258 --> 07:51:51.258
from the rest of the system even
though they may be managed 

07:51:54.148 --> 07:51:56.148
by the foreground app in 
production.  All right.

07:51:56.997 --> 07:51:58.453
So let's quickly review some of 
the tips we've gone through here

07:51:58.454 --> 07:52:01.505
today.
   Don't assume a graphical UI.

07:52:02.118 --> 07:52:04.554
   Design for your memory 
constraints on these devices.

07:52:05.416 --> 07:52:07.848
   Break your app up into 
modules.

07:52:09.289 --> 07:52:11.539
Bind your background services to
the foreground app.  Don't use 

07:52:11.540 --> 07:52:13.780
started services.
   And use the Gradle command 

07:52:13.781 --> 07:52:17.666
line if you want to have more 
control over deploying your 

07:52:17.667 --> 07:52:22.154
modules to the device.
   Now, if you're just as 

07:52:22.155 --> 07:52:25.189
excited about Android thing as 
we are, I want to remind every 

07:52:25.190 --> 07:52:29.530
twhawn we're doing a scavenger 
hunt here at Google I/O.  If you

07:52:29.531 --> 07:52:31.360
visit the link here or use the 
app, you can follow the 

07:52:31.361 --> 07:52:35.059
instructions to find various 
items around the conference, and

07:52:35.060 --> 07:52:37.299
once you've completed those 
challenges, you can then receive

07:52:37.300 --> 07:52:40.991
a free Android Things developer 
kit to take home.

07:52:43.060 --> 07:52:44.888
To learn more about Android 
Things, visit the developer site

07:52:44.889 --> 07:52:46.889
and make sure 

07:52:47.948 --> 07:52:49.390
to visit the codelabs, office 
hours, and other dem mows that 

07:52:49.391 --> 07:52:53.081
we have here in the sandbox.  
Also be sure to visit Android 

07:52:53.082 --> 07:52:57.372
Things with Google.com to find 
featured community projects and 

07:52:57.373 --> 07:52:59.623
additional sample code.  You'll 
also find a lot of the sample 

07:53:01.239 --> 07:53:03.307
code available for some of the 
demos that we have here at the 

07:53:03.308 --> 07:53:05.963
conference on Android Things 
with Google.com as well.

07:53:07.427 --> 07:53:09.050
So thank you everyone for your 
time today, and I'm really 

07:53:09.051 --> 07:53:11.098
excited to see the apps that you
build with Android Things.

07:53:11.541 --> 07:53:13.541
(applause).

07:53:24.225 --> 07:53:26.225
(The session has concluded, 3:57
p.m.

07:53:27.538 --> 07:53:29.538
)

07:53:54.678 --> 07:53:58.150
   &gt;&gt; Thank you for joining this
session.  Brand ambassadors will

07:53:58.151 --> 07:54:02.008
assist with direct you through 
the designated exits.  We'll be 

07:54:02.009 --> 07:54:04.009
making room for those who have 
registered for the next session.

07:54:04.873 --> 07:54:07.313
If you've registered for the 
next session in this room, we 

07:54:07.314 --> 07:54:09.351
ask that you please clear the 
room and return via the 

07:54:10.798 --> 07:54:12.798
registration line outside.  
Thank you.

07:54:12.841 --> 07:54:13.857
&gt;&gt;
   &gt;&gt;

07:54:13.858 --> 07:54:14.680
&gt;&gt;
   &gt;&gt;

07:54:14.681 --> 07:54:15.818
&gt;&gt;
   &gt;&gt;

07:54:15.819 --> 07:54:18.817
&gt;&gt;
   &gt;&gt; 

07:56:39.438 --> 07:56:41.438
May 9, 2018.

07:59:07.914 --> 07:59:09.914
TensorFlow in production:  TF 
Extended,

07:59:17.900 --> 07:59:19.900
, TF Had you been and 

07:59:25.992 --> 07:59:27.992
Hub and TF Serving

07:59:29.102 --> 07:59:31.102
.

08:06:24.887 --> 08:06:26.887
Serving..

08:06:28.301 --> 08:06:30.301
.

08:13:45.494 --> 08:13:48.892
..
   &gt;&gt;

08:13:49.499 --> 08:13:50.109
&gt;&gt;
   &gt;&gt;

08:13:50.110 --> 08:13:51.131
&gt;&gt;
   &gt;&gt;

08:13:51.132 --> 08:13:51.954
&gt;&gt;
   &gt;&gt;

08:13:51.955 --> 08:13:52.775
&gt;&gt;
   &gt;&gt;

08:13:52.776 --> 08:13:54.776
&gt;&gt;

08:13:55.979 --> 08:14:00.583
&gt;&gt; 
   May 9, 2018.

08:14:04.087 --> 08:14:06.087
TensorFlow in production:  TF 
Hub, TF 

08:14:09.985 --> 08:14:11.985
Serving, and TensorFlow extended

08:14:18.407 --> 08:14:20.407
.

08:20:51.325 --> 08:20:53.325
.

08:22:10.944 --> 08:22:12.944
   &gt;&gt; Welcome.

08:22:15.463 --> 08:22:17.091
Please fill in the seats near 
the front of the room.  Thank 

08:22:17.092 --> 08:22:19.092
you.

08:26:15.780 --> 08:26:17.780
   &gt;&gt; Welcome, everyone.

08:26:22.086 --> 08:26:24.973
I am Jeremiah, and this is are 
TensorFlow in production.  I'm 

08:26:24.974 --> 08:26:26.206
excited that you're all here 
because that means you're 

08:26:26.207 --> 08:26:28.207
excited about production, and 
that means you're 

08:26:30.356 --> 08:26:32.356
building things that people 
actually use.

08:26:32.851 --> 08:26:35.296
So our talk today has three 
parts.  I want to start by 

08:26:35.297 --> 08:26:37.757
quickly drawing a thread that 
kind of connects all of them.

08:26:41.661 --> 08:26:44.426
The first thread is the origin 
of these projects.  These 

08:26:44.427 --> 08:26:46.427
projects really come from our 

08:26:51.454 --> 08:26:55.654
teams that are on the frontline 
of machine  learning, so these 

08:26:51.454 --> 08:26:53.454
are real 

08:27:00.431 --> 08:27:00.446
problems that we've come across 
doing machine learning at Google

08:27:00.447 --> 08:27:02.477
scale and these are the real 
solutions that let us 

08:27:07.935 --> 08:27:07.950
do machine learning at Google.
   The second thing I want to 

08:27:07.951 --> 08:27:11.419
talk about is this observation, 
if we look at software 

08:27:11.420 --> 08:27:14.461
engineering over the years, we 
see this growth.  As we discover

08:27:14.462 --> 08:27:16.462
new tools, as we discover best 
practices, we're really 

08:27:19.203 --> 08:27:20.834
getting more effective at doing 
software engineering and we're 

08:27:20.835 --> 08:27:24.927
getting more efficient.
   We're seeing the same kind of

08:27:24.928 --> 08:27:29.407
growth on the machine learning 
side.  Right?  We're discovering

08:27:29.408 --> 08:27:31.408
new best practices and new  
tools.

08:27:33.510 --> 08:27:35.510
The catch is that this growth is
maybe 

08:27:36.838 --> 08:27:39.294
ten or fifteen years behind 
software engineering.  And we're

08:27:39.295 --> 08:27:41.750
also rediscovering a lot of the 
same things that exist in 

08:27:41.751 --> 08:27:46.854
software engineering, but in a 
machine learning context.  So 

08:27:46.855 --> 08:27:49.728
we're doing things like 
discovering version control for 

08:27:49.729 --> 08:27:51.729
machine learning or 

08:27:53.411 --> 08:27:55.411
continuous integration for 
machine learning.

08:27:56.692 --> 08:27:58.343
So I think it's worth keeping 
that in mind as we move through 

08:27:58.344 --> 08:28:00.996
the talks.  The first one up 
will be TensorFlow 

08:28:04.264 --> 08:28:06.302
hub and this is something that 
lets you share reusable pieces 

08:28:06.303 --> 08:28:10.189
of machine learning much the 
same way we share code, then 

08:28:10.190 --> 08:28:12.434
we'll talk a little bit about 
deploying machine learning model

08:28:12.435 --> 08:28:14.435
says with TensorFlow serving and
we'll finish 

08:28:17.727 --> 08:28:19.399
up with TensorFlow Extended 
which wraps a lot of these 

08:28:19.400 --> 08:28:22.051
things together in a platform to
increase your velocity as a 

08:28:23.061 --> 08:28:25.061
machine learning practitioner.

08:28:26.964 --> 08:28:28.964
So with that, I would like to 
hand it 

08:28:31.704 --> 08:28:34.984
over to Andrew to talk about 
TensorFlow hub.  Dl.

08:28:38.025 --> 08:28:40.256
&gt;&gt; ANDREW GASPAROVIC:  Thanks, 
Jeremiah.  I would like to talk 

08:28:40.257 --> 08:28:42.257
to you a little 

08:28:43.511 --> 08:28:45.974
bit about TensorFlow hub which 
is a new library designed to 

08:28:45.975 --> 08:28:48.214
bring reusability to machine 
learning.

08:28:53.967 --> 08:28:56.016
Software repositories have been 
a real benefit to developer 

08:28:56.017 --> 08:28:58.017
productivity over the past ten 
or fifteen years and 

08:29:03.031 --> 08:29:04.064
they're great first of all 
because when you're writing 

08:29:04.065 --> 08:29:06.124
something new, if you have a 
repository, you think oh, maybe 

08:29:07.147 --> 08:29:09.147
I'll check whether there's 
something 

08:29:12.445 --> 08:29:14.072
that already exists and reuse 
that rather than starting from 

08:29:14.073 --> 08:29:16.073
scratch, but a 

08:29:17.332 --> 08:29:19.780
second thing that happens is you
started thinking maybe I'll 

08:29:19.781 --> 08:29:24.272
write my code in a way that's 
specifically designed for reuse,

08:29:24.273 --> 08:29:26.273
which is great because it makes 

08:29:27.316 --> 08:29:29.760
your code more modular, but it 
also has a potential to benefit 

08:29:29.761 --> 08:29:31.761
a whole community, if you share 
that code.

08:29:34.036 --> 08:29:36.071
   What we are doing with 
TensorFlow Hub 

08:29:39.317 --> 08:29:41.317
is bringing that idea of a 
repository to 

08:29:43.246 --> 08:29:46.923
machine learning.  In this case,
TensorFlow Hub is designed so 

08:29:46.924 --> 08:29:48.924
that you can create, share 

08:29:51.428 --> 08:29:53.428
and reuse components of ML 
models.

08:29:55.120 --> 08:29:57.120
And if you think about it, it's 
even 

08:29:58.625 --> 08:30:00.253
more important to have a 
repository for machine learning,

08:30:00.254 --> 08:30:05.208
even more so than software 
development balls in the case of

08:30:05.209 --> 08:30:07.209
machine learning, not only are 
you 

08:30:08.915 --> 08:30:11.791
reusing the algorithm and the 
expertise, but you're also 

08:30:11.792 --> 08:30:13.792
reusing potentially enormous 
amount of compute power that 

08:30:15.266 --> 08:30:18.142
went into training the model and
all of the training data as well

08:30:18.143 --> 08:30:21.002
well.
   So all four of thoarksz the 

08:30:22.667 --> 08:30:24.667
algorithm, the training data, 
the 

08:30:26.557 --> 08:30:28.557
compute and the expertise all go
into a 

08:30:30.836 --> 08:30:32.708
module which is shareable did 
with TensorFlow Hub and then you

08:30:32.709 --> 08:30:37.157
can import those into your 
model.

08:30:40.633 --> 08:30:43.557
Those modules are pretrained, so
they have the weights and the 

08:30:43.558 --> 08:30:45.558
TensorFlow 

08:30:48.638 --> 08:30:52.983
graph inside.  And unlike a 
model, they're designed to be 

08:30:52.984 --> 08:30:54.738
composable, which means you can 
put them together like building 

08:30:54.739 --> 08:30:56.739
blocks 

08:30:59.005 --> 08:31:00.444
and add your own stuff on top, 
they're reusable which means 

08:31:00.445 --> 08:31:03.090
they have common signatures so 
that you can swap one for 

08:31:05.127 --> 08:31:07.160
another, and they're 
retrainable, which means that 

08:31:07.161 --> 08:31:12.499
you can actually back-propagate 
through a module you've inserted

08:31:12.500 --> 08:31:15.376
into your graph.
   So let's take a quick look at

08:31:15.377 --> 08:31:18.647
an example.  In this case we'll 
do a little bit of image 

08:31:18.648 --> 08:31:21.308
classification.  Let's say we 
want to make an app to 

08:31:25.415 --> 08:31:27.415
classify rabbit breeds from 
Photos, but 

08:31:29.110 --> 08:31:31.367
we voanl a few hundred example 
Photos.  Probably not enough to 

08:31:31.368 --> 08:31:33.644
build a whole image classifier 
from scratch.

08:31:37.323 --> 08:31:39.323
But what we could do is start 
from a 

08:31:43.274 --> 08:31:45.748
general purpose model and we 
could take the reusable part of 

08:31:45.749 --> 08:31:47.749
it, architecture on the weights 
there, take off the 

08:31:49.984 --> 08:31:54.571
classification and then add our 
own classifier on top and train 

08:31:54.572 --> 08:31:56.572
it with our own examples.

08:31:59.452 --> 08:32:01.452
We'll keep that reawsable part 
fixed

08:32:03.214 --> 08:32:05.214
and train our own classifier on 
tovment.

08:32:05.532 --> 08:32:07.555
So if you're using TensorFlow 
Hub, you started at  TensorFlow.

08:32:10.206 --> 08:32:12.206
org/hub where you can find a 
whole bunch 

08:32:13.256 --> 08:32:15.256
of newly  releasted state of the
art 

08:32:17.365 --> 08:32:19.365
research-oriented and well-known
image modules.

08:32:24.073 --> 08:32:27.848
Some of them are including 
classification and some of the 

08:32:27.849 --> 08:32:30.312
them chop off the classification
layers and just output feature 

08:32:30.313 --> 08:32:32.313
vectors, that's what we want in 
our own case, in 

08:32:35.005 --> 08:32:37.005
this case, because we're going 
to add 

08:32:40.575 --> 08:32:43.027
classification on top so maybe 
we'll choose NASNet which is an 

08:32:43.028 --> 08:32:45.695
image module created by a neural
architecture search.

08:32:48.194 --> 08:32:50.066
So we'll choose NASNet-A the 
large version with the feature 

08:32:50.067 --> 08:32:52.067
vectors.

08:32:53.573 --> 08:32:55.573
We just paste the URL for the 
module 

08:32:58.053 --> 08:33:00.053
into our TF Hub code, then we're
ready 

08:33:01.125 --> 08:33:03.781
to use that module just like a 
function.  In between, the 

08:33:03.782 --> 08:33:06.265
module gets downloads and had 
instantiated into your graph so 

08:33:08.080 --> 08:33:09.358
all you have to do is get those 
feature vectors being add your 

08:33:09.359 --> 08:33:11.359
own 

08:33:14.051 --> 08:33:16.503
classification on top, and 
output the new  categories.

08:33:18.548 --> 08:33:21.024
So specificallily we're training
just the classification part 

08:33:21.025 --> 08:33:25.963
while keeping all of the modules
weights fixed.  But the great 

08:33:25.964 --> 08:33:27.964
thing about reusing a 

08:33:31.069 --> 08:33:33.991
module is that you get all of 
the training and compute that's 

08:33:33.992 --> 08:33:39.293
gone into that reusable portion.
So in the case of NASNet, it was

08:33:39.294 --> 08:33:44.013
over 62,000GPU hours that went 
into finding the architecture 

08:33:44.014 --> 08:33:46.014
and training the model, 

08:33:47.527 --> 08:33:50.396
plus all of the expertise, the 
testing, and the research that 

08:33:50.397 --> 08:33:53.250
went into NASNet.  You're 
reusing all of that in that one 

08:33:55.508 --> 08:33:59.773
line of code.
   And as I mentioned before, 

08:33:59.774 --> 08:34:04.741
those modules are trainable, so 
if you have enough data, you can

08:34:04.742 --> 08:34:08.649
do fine-tuning with the module. 
If you set that trainable 

08:34:08.650 --> 08:34:10.650
parameter to true and you select
that you want to use 

08:34:13.771 --> 08:34:16.651
the training graph, what you'll 
end up doing is training the 

08:34:16.652 --> 08:34:21.377
entire thing along with your 
classification.  The cav yalt 

08:34:21.378 --> 08:34:24.013
being that of course you have to
lower the learning rate so that 

08:34:26.466 --> 08:34:28.507
you don't ruin the weights 
inside the module.  But if you 

08:34:28.508 --> 08:34:30.508
have enough training data, it's 
something that you can do to get

08:34:32.879 --> 08:34:34.879
even better accuracy.

08:34:36.606 --> 08:34:39.262
And in general, we have lots of 
image modules on TF Hub, we have

08:34:39.263 --> 08:34:43.333
ones that are straight out of 
research papers like NASNet, we 

08:34:43.334 --> 08:34:46.000
have ones that are great for 
production, even ones made for 

08:34:46.001 --> 08:34:50.117
on-device usage like MobileNet, 
plus all the industry standard 

08:34:50.118 --> 08:34:52.118
ones that people are 

08:34:53.989 --> 08:34:55.989
familiar with like  Inception 
and ResNet.

08:34:57.308 --> 08:34:59.419
So let's look at one more 
example, in this case doing a 

08:34:59.420 --> 08:35:01.420
little bit of text 
classification.

08:35:04.577 --> 08:35:07.270
We'll look at some restaurant  
reviews and decide whether 

08:35:07.271 --> 08:35:09.271
they're positive or negative  
sentiment.

08:35:12.427 --> 08:35:15.293
And one of the great things 
about TF Hub is that all of 

08:35:15.294 --> 08:35:19.840
those modules, because they're 
TensorFlow graphs, you can 

08:35:19.841 --> 08:35:21.879
include things like 
preprocessing.  So the text 

08:35:21.880 --> 08:35:23.880
modules that are available 

08:35:25.197 --> 08:35:27.436
on TF Hub take whole sentences 
and phrases, not just individual

08:35:27.437 --> 08:35:29.437
words, because they have all of 
the 

08:35:32.936 --> 08:35:35.388
tokennization and preprocessing 
stored in the graph itself.

08:35:37.638 --> 08:35:39.475
So we'll use one of those, and 
basically the same idea, we're 

08:35:39.476 --> 08:35:41.476
going to 

08:35:42.989 --> 08:35:45.443
select a sentence-embedding 
module, we'll add our own 

08:35:45.444 --> 08:35:47.484
classification on top and we'll 
train it with our own data, 

08:35:51.791 --> 08:35:53.791
but we'll keep the module itself
fixed.

08:35:54.664 --> 08:35:56.664
And just like before, we'll 
start by going on  TensorFlow.

08:35:58.741 --> 08:36:00.741
org/hub and take a look at the 
text modules that are available.

08:36:04.071 --> 08:36:05.276
In this case maybe we'll choose 
the Universal Sentence Encoder 

08:36:05.277 --> 08:36:07.277
which is just 

08:36:08.560 --> 08:36:10.815
recently released based on a 
research paper from last month 

08:36:10.816 --> 08:36:15.201
and the idea is that it was 
trained on a variety of tasks 

08:36:15.202 --> 08:36:17.451
and it's specifically meant to 
support using it with a variety 

08:36:17.452 --> 08:36:20.156
of tasks and it also takes just 
a very small 

08:36:24.238 --> 08:36:26.238
amount of training data to use 
it in 

08:36:27.308 --> 08:36:30.239
your model, which is perfect for
our example case, so we'll use 

08:36:30.240 --> 08:36:34.557
that Universal Sentence Encoder 
and just like before we'll paste

08:36:34.558 --> 08:36:38.009
the URL into our code.
   The difference here is we're 

08:36:38.010 --> 08:36:40.010
using it 

08:36:42.499 --> 08:36:45.493
with a text embedding column.  
That way, we can feed it into 

08:36:45.494 --> 08:36:49.819
one of the high level TensorFlow
estimators in this case the DNN 

08:36:49.820 --> 08:36:51.883
classifier, but you could also 
use that module like I showed 

08:36:57.235 --> 08:36:59.235
in the earlier example, calling 
it just as a function.

08:37:00.506 --> 08:37:02.351
If you are using the text 
embedding column, just like in 

08:37:02.352 --> 08:37:04.352
the other example, 

08:37:05.808 --> 08:37:07.242
that also can be trained as well
and just like in the other 

08:37:07.243 --> 08:37:10.716
example, it's something that you
can do with a lower learning 

08:37:10.717 --> 08:37:12.717
rate if you have a lot of 

08:37:15.619 --> 08:37:18.900
training data, and it may give 
you better accuracy.

08:37:21.545 --> 08:37:23.545
So we have a lot of text modules
available on TF Hub.

08:37:26.863 --> 08:37:28.863
We actually just added three new

08:37:31.469 --> 08:37:33.115
languages to the NNLM modules, 
Chinese, Korean and Indonesian, 

08:37:33.116 --> 08:37:38.220
those are all trained on GINU's 
training data.  We also have a 

08:37:38.221 --> 08:37:40.467
really great module called ELMo 
from some recent research, 

08:37:44.383 --> 08:37:46.622
which understands words in 
context, and of course the 

08:37:46.623 --> 08:37:49.686
Universal Sentence Encoder, as I
talked about.

08:37:51.723 --> 08:37:54.582
So just to show you for a minute
some of those URL's that we've 

08:37:54.583 --> 08:37:56.583
been looking 

08:37:57.686 --> 08:37:59.686
at, maybe we'll take apart the 
pieces here.

08:38:02.391 --> 08:38:04.391
Dl tfhub.

08:38:06.667 --> 08:38:09.574
did he have is our new -- tfhub.
dev is our new source for 

08:38:09.575 --> 08:38:13.448
selected partner modules, Google
is the publisher, Universal 

08:38:13.449 --> 08:38:18.379
Sentence Encoder is the name of 
the module.  The one at the end 

08:38:18.380 --> 08:38:20.380
is a version 

08:38:22.061 --> 08:38:24.061
number, so TensorFlow Hub 
considers 

08:38:25.337 --> 08:38:27.337
modules to be immutable and so 
the 

08:38:28.880 --> 08:38:31.721
version number is there so that 
if you're doing one training run

08:38:31.722 --> 08:38:33.722
and then another, you descroanlt
a situation 

08:38:36.234 --> 08:38:38.234
where the module changes 
unexpectedly.

08:38:40.714 --> 08:38:43.583
So all modules on TF Hub.dev are
versioned that way.

08:38:47.662 --> 08:38:50.240
And one of the nice things about
those URL's, if you pace them 

08:38:50.241 --> 08:38:52.241
into a browser, you are get the 
module documentation, 

08:38:55.615 --> 08:38:58.462
the idea being that maybe you 
read a new paper accident you 

08:38:58.463 --> 08:39:00.906
see oh there's a URL for a TF 
Hub module, paste it into your 

08:39:02.361 --> 08:39:05.126
broirs, see the documentation, 
you paste it into some code and 

08:39:05.127 --> 08:39:07.127
in one line you're 

08:39:09.929 --> 08:39:14.867
able to use that module and try 
out the new research.  And 

08:39:14.868 --> 08:39:16.931
speaking of the universal encode
ler, the team just re:  leased a

08:39:16.932 --> 08:39:18.932
new 

08:39:20.431 --> 08:39:23.325
light version, which is a much 
smaller size, it's about 25 

08:39:23.326 --> 08:39:25.326
megabytes and it's 

08:39:28.282 --> 08:39:30.966
specifically designed for cases 
where the full text module 

08:39:30.967 --> 08:39:32.967
wouldn't work for doing things 
like on device classification.

08:39:33.217 --> 08:39:38.342
   Also today we released a new 
module from deep mind, this one 

08:39:38.343 --> 08:39:43.957
you can feed in video and it 
will classify and detect action 

08:39:43.958 --> 08:39:46.208
says in that video, so in this 
case it correctly guesses the 

08:39:46.209 --> 08:39:48.209
video is 

08:39:50.238 --> 08:39:52.238
of people flaig cricket

08:39:58.395 --> 08:40:00.668
playing cricket.
   Other modules, there's a 

08:40:00.669 --> 08:40:02.669
general 

08:40:06.993 --> 08:40:08.826
ative module trained on it  
CelebA frrks also deep local 

08:40:08.827 --> 08:40:10.664
features module which can 
identify the key points of 

08:40:10.665 --> 08:40:15.179
landmark images, those are all 
available now on TF Hub.

08:40:17.241 --> 08:40:19.241
And last but not least, I wanted
to 

08:40:20.443 --> 08:40:22.443
mention that we just announced 
our support for TensorFlow JS.

08:40:25.358 --> 08:40:27.611
So using the TensorFlow JS 
converter, you can directly 

08:40:27.612 --> 08:40:29.650
convert a TF Hub module into a 
format that can be used on the 

08:40:30.058 --> 08:40:32.665
web.  It's a really simple 
integration to be 

08:40:36.788 --> 08:40:39.023
able to take a module and use it
in the web browser with 

08:40:39.024 --> 08:40:43.095
TensorFlow.JS and we're really 
excited to see what you build 

08:40:43.096 --> 08:40:45.096
with it.

08:40:47.424 --> 08:40:49.881
So just to summarize, TensorFlow
Hub is designed to be a  

08:40:49.882 --> 08:40:51.979
starting point for reusable 
machine learning, and the idea 

08:40:55.236 --> 08:40:57.236
is just like with a software 
repository, 

08:40:58.891 --> 08:41:01.154
before you start from scratch, 
check out what's available on 

08:41:01.155 --> 08:41:03.155
TensorFlow Hub and 

08:41:04.438 --> 08:41:06.438
you may find that it's better to
start 

08:41:07.685 --> 08:41:09.322
with a module and import that 
into your model rather than 

08:41:09.323 --> 08:41:13.407
starting the task completely 
from scratch.  We have a lot of 

08:41:13.408 --> 08:41:16.071
modules available and we're 
adding more all the time, and 

08:41:17.292 --> 08:41:19.781
we're really exiertd to see what
you build.  So thanks.

08:41:22.681 --> 08:41:24.681
Next up is Jeremiah to talk 
about TF Serving.

08:41:26.738 --> 08:41:28.670
(applause).
   &gt;&gt; JEREMIAH HARMSEN:  All 

08:41:28.671 --> 08:41:32.374
right.  Thank you, Andrew.  So 
next, TensorFlow serving, this 

08:41:32.375 --> 08:41:34.375
is 

08:41:36.861 --> 08:41:39.330
going to be how we deploy 
modules or deploy models, just 

08:41:39.331 --> 08:41:41.331
to get a sense for where this 
falls in the machine learning 

08:41:44.227 --> 08:41:46.227
process, we start with our data,
we use 

08:41:49.327 --> 08:41:51.355
TensorFlow to train a model and 
output our artifact there, these

08:41:51.356 --> 08:41:53.356
are saved model says, it's a 
graphical 

08:41:58.357 --> 08:41:59.781
representation of the data flow 
accident and once we have those,

08:41:59.782 --> 08:42:02.015
we want to share them with the 
world, that's where this 

08:42:03.845 --> 08:42:05.937
TensorFlow Serving comes in, 
it's this big orange box, this 

08:42:05.938 --> 08:42:07.938
takes our models and exposes 
them to the world through a 

08:42:11.893 --> 08:42:13.893
service so clients can make 
requests, 

08:42:15.198 --> 08:42:17.237
TensorFlow takes them and runs 
the inference, run the model, 

08:42:17.238 --> 08:42:21.119
come up with an answer and 
return that in a response.

08:42:23.183 --> 08:42:25.680
So TensorFlow Serving is 
actually the libraries and 

08:42:25.681 --> 08:42:27.681
binaries you need to do this to 
do this production grade 

08:42:30.177 --> 08:42:32.177
imprints over trained TensorFlow
models.

08:42:33.658 --> 08:42:35.658
It's written in C++ and supports

08:42:36.935 --> 08:42:41.611
things like GRPC and plays 
nicely with kubernetes.  So to 

08:42:41.612 --> 08:42:43.612
do this well, it has a couple of
features.

08:42:45.306 --> 08:42:47.306
The first and most important is 
it supports multiple models.

08:42:50.424 --> 08:42:52.266
So on one TensorFlow model 
server, you can load multiple 

08:42:52.267 --> 08:42:57.365
models.  Right?  Just like most 
folks probably wouldn't push a 

08:42:57.366 --> 08:42:59.613
new binary right to production, 
you don't want to push a new 

08:42:59.614 --> 08:43:02.710
model right to production 
either.  So having these 

08:43:02.711 --> 08:43:04.711
multiple models in 

08:43:06.457 --> 08:43:08.083
memory lets you be serving one 
model on production traffic and 

08:43:08.084 --> 08:43:12.991
load a new one and maybe send it
some canary requests, send it 

08:43:12.992 --> 08:43:14.401
some QA requests, make sure 
everything is all right and then

08:43:14.402 --> 08:43:18.898
move the traffic over to that 
new model.

08:43:21.388 --> 08:43:23.454
This supports doing things like 
reloading if you have a stream 

08:43:23.455 --> 08:43:27.372
of models you're producing, 
TensorFlow Serving will 

08:43:27.373 --> 08:43:32.079
transparently load the new ones 
and unload the old ones.  We've 

08:43:32.080 --> 08:43:33.915
built in a lot of isolation.  If
you have a model that's serving 

08:43:33.916 --> 08:43:38.435
a lot of traffic in one thread 
and it's time to load a new 

08:43:38.436 --> 08:43:42.560
model, we make sure to do that 
in a separate thread, that way 

08:43:42.561 --> 08:43:44.993
we don't cause any hiccups in 
the thread that's serving 

08:43:44.994 --> 08:43:47.879
production traffic.
   And again, this entire system

08:43:47.880 --> 08:43:49.880
has been built from the ground 
up to be very 

08:43:52.946 --> 08:43:55.036
high throughput, things like 
selecting those different models

08:43:55.037 --> 08:43:58.788
based on the name or selecting 
different versions, that's very,

08:43:58.789 --> 08:44:00.789
very efficient.

08:44:01.878 --> 08:44:04.545
Similarly, it has some advanced 
bachg, this way we can make use 

08:44:04.546 --> 08:44:07.047
of accelerators and also see 
improvements on standard 

08:44:10.931 --> 08:44:12.974
CPU's with this batching.  Then 
lots of other enhancements, 

08:44:14.807 --> 08:44:17.664
everything from protocol are 
buffer magic to lots more.

08:44:21.139 --> 08:44:23.139
This is really what we use 
inside 

08:44:25.044 --> 08:44:26.268
Google to serve TensorFlow, 
there's over 1500 projects that 

08:44:26.269 --> 08:44:28.722
use it, it serves somewhere in 
the nailed of 10 million 

08:44:32.394 --> 08:44:35.265
QPS, which ends up being about 
100 million items there 

08:44:35.266 --> 08:44:37.266
predicted per second.  We're 
also seeing some adoption 

08:44:39.364 --> 08:44:41.364
outside of Google.

08:44:44.459 --> 08:44:45.674
A new thing I would like to 
share today is distributed 

08:44:45.675 --> 08:44:51.413
severing.  Looking inside Google
we've seen a couple trends, one 

08:44:51.414 --> 08:44:53.414
is that models are getting 
bigger and bigger, some of the 

08:44:54.939 --> 08:44:57.743
ones inside Google are over aim 
terabyte in size.  The other 

08:44:57.744 --> 08:44:59.744
thing we're seeing is this 
sharing of sub graphs, TF Hub is

08:45:03.910 --> 08:45:05.369
producing these common pieces of
models and we're also seeing 

08:45:05.370 --> 08:45:09.892
more and more specialization in 
these models as they get bigger 

08:45:09.893 --> 08:45:14.381
and bigger.  If you look at some
of these model structures, they 

08:45:14.382 --> 08:45:16.382
look less like a model that 
would belong on one machine and 

08:45:18.057 --> 08:45:20.089
more like an entire system, so 
this is exactly what distributed

08:45:20.090 --> 08:45:23.982
serving is meant for, lets us 
take the single model ask 

08:45:23.983 --> 08:45:26.034
basically break it up into 
microservices.

08:45:29.502 --> 08:45:32.179
So to get a better feel for 
that, we'll say that Andrew has 

08:45:32.180 --> 08:45:34.180
taken his 

08:45:35.254 --> 08:45:37.286
rabbit classifier and is serving
it on a model server and say I 

08:45:37.287 --> 08:45:41.432
want to create a similar system 
to classify cat breeds, so I've 

08:45:41.433 --> 08:45:43.433
done the same thing, started 

08:45:45.130 --> 08:45:47.130
from TensorFlow Hub so you can 
see I 

08:45:48.596 --> 08:45:50.621
have the are TensorFlow module 
in the center there.  You notice

08:45:50.622 --> 08:45:52.686
since we both started from the 
same module, we have the same 

08:45:52.687 --> 08:45:55.169
bits of code, we have the same 
core to our 

08:46:00.674 --> 08:46:02.907
machine learned model so we can 
start a third server and put the

08:46:02.908 --> 08:46:06.373
TensorFlow Hub module on that 
server and we can remove it from

08:46:06.374 --> 08:46:08.398
the servers on the outside and 
leave in its place this 

08:46:08.399 --> 08:46:11.669
placeholder we call a remote op.
You can think of this as a 

08:46:11.670 --> 08:46:13.670
portal, 

08:46:16.791 --> 08:46:19.231
kind of a forwarding op that 
when we run the inference it 

08:46:19.232 --> 08:46:22.090
forwards in the appropriate 
point in the processing to the 

08:46:22.091 --> 08:46:24.091
model server.  There the 
computation is done and the 

08:46:25.946 --> 08:46:28.184
result gets sent back, and the 
computation continues on our 

08:46:28.185 --> 08:46:31.652
classifiers on the outside.
   So there are a few reasons we

08:46:31.653 --> 08:46:34.695
might want to do this, right?  
We can get rid of some 

08:46:34.696 --> 08:46:38.596
duplication, now we only have 
one model server loading all 

08:46:38.597 --> 08:46:40.597
these weights.

08:46:42.098 --> 08:46:44.353
We also get the benefit that 
that can batch requests that are

08:46:44.354 --> 08:46:46.381
coming from both sides and also 
we can set up different 

08:46:46.596 --> 08:46:48.647
configurations.  You can imagine
we might have this 

08:46:52.757 --> 08:46:54.995
model server just loaded with 
TPU's, tensor processing ujts so

08:46:54.996 --> 08:46:56.996
that it can do 

08:46:58.693 --> 08:47:00.544
what are most likely 
convolutional items and things 

08:47:00.545 --> 08:47:02.545
like that very efficiently.

08:47:04.860 --> 08:47:06.860
Another place we use this is 
with 

08:47:07.937 --> 08:47:10.201
large did sharded models.  Dr. 
There's this technique of 

08:47:10.202 --> 08:47:12.202
embedding 

08:47:15.736 --> 08:47:17.736
things like words or YouTube 
video ID's 

08:47:19.824 --> 08:47:21.648
as a string of numbers, we 
represent them as this vector of

08:47:21.649 --> 08:47:23.100
numbers.
   And if you have I've lot of 

08:47:23.101 --> 08:47:25.734
words or you have a lot of 
YouTube videos, you'll have a 

08:47:25.735 --> 08:47:27.786
lot of data.
   So much that it won't fit on 

08:47:27.787 --> 08:47:29.787
one machine.

08:47:33.339 --> 08:47:35.996
So we use a system like this to 
split up those embeddings for 

08:47:35.997 --> 08:47:40.469
the words into these shards and 
we can distribute there.  The 

08:47:40.470 --> 08:47:41.695
main model when it needs 
something can reach out, get it,

08:47:41.696 --> 08:47:47.431
and then do the computation.
   Another example is what we 

08:47:47.432 --> 08:47:49.873
call triggering models.  We'll 
say we are building a Spam 

08:47:51.742 --> 08:47:54.621
detector and we have a full 
model which is a very, very 

08:47:54.622 --> 08:47:56.622
powerful Spam detector, maybe it
looks at the words, understands 

08:47:58.742 --> 08:48:00.398
the context, it's very powerful 
but it's very expensive and we 

08:48:00.399 --> 08:48:02.399
can't afford to 

08:48:03.494 --> 08:48:05.494
run it on every single e-mail 
message we get.

08:48:06.561 --> 08:48:08.561
So instead we put this 
triggering model in front of it.

08:48:10.014 --> 08:48:12.034
As you can imagine, there's a 
lot of cases where we're in a 

08:48:12.035 --> 08:48:14.100
position to very quickly say 
yes, this is Spam or no it's 

08:48:14.317 --> 08:48:19.431
not.  So frinsz, if we get an 
e-mail that's from within our 

08:48:19.432 --> 08:48:21.432
own domain, maybe we can just 
say that's not Spam and the 

08:48:25.151 --> 08:48:27.922
triggering model can quickly 
return that.  If it's something 

08:48:27.923 --> 08:48:29.923
that's difficult t can go ahead 
and forward that on to the 

08:48:35.126 --> 08:48:37.126
full model where it will process
it.

08:48:37.616 --> 08:48:40.065
So a similar concept is this 
mixture of experts.  So in this 

08:48:40.066 --> 08:48:42.750
case, let's say we want to build
a system where we're going to 

08:48:44.947 --> 08:48:49.834
classify the breed of either a 
rabbit or a cat.  So we're going

08:48:49.835 --> 08:48:54.303
to have two models we're going 
to call expert models.  So we 

08:48:54.304 --> 08:48:57.188
have one that's an expert at 
rabbits, and another that's an 

08:48:57.189 --> 08:49:03.313
expert at cats.  So here we're 
going to use a gating model to 

08:49:03.314 --> 08:49:05.356
get a picture of either a rabbit
or cat and the thoij it's going 

08:49:07.208 --> 08:49:09.208
to do is decide if it's a rabbit
or a 

08:49:10.502 --> 08:49:12.502
cat and forward it on to the 
appropriate 

08:49:14.192 --> 08:49:18.303
expert who will process it and 
will send that result back.

08:49:18.498 --> 08:49:22.437
All right.  There's lots of use 
cases we're excited to see what 

08:49:22.438 --> 08:49:24.479
people start to build with these
remote ops.

08:49:27.581 --> 08:49:29.581
The next thing I'll quickly 
mention is a rest API.

08:49:32.077 --> 08:49:33.917
This was one of the top requests
on GitHub so we're happy to be 

08:49:33.918 --> 08:49:37.618
releasing this soon, this will 
make it much easier to integrate

08:49:37.619 --> 08:49:40.276
things with existing services.  
And it's nice because you don't 

08:49:40.277 --> 08:49:42.277
actual 

08:49:44.648 --> 08:49:46.872
have to choose, on one model 
server with one TensorFlow 

08:49:46.873 --> 08:49:48.873
server, you can serve 

08:49:50.387 --> 08:49:52.387
either the RESTful endpoint or 
the GRPC.

08:49:54.069 --> 08:49:56.069
There's three API's, there's 
some higher level ones like for 

08:49:56.927 --> 08:49:58.975
classification and regression, 
there's also a lower level  

08:49:58.976 --> 08:50:01.854
predict, and this is more of a 
tensor in, tensor out for the 

08:50:04.076 --> 08:50:06.076
things that don't fit in the 
classes phi and regress.

08:50:07.352 --> 08:50:09.416
-- in the classify and regress.
   Looking at this quickly, you 

08:50:09.417 --> 08:50:13.785
can see the URI here, we can 
specify the model, this may be 

08:50:13.786 --> 08:50:19.148
rabbit or cat.  We can 
optionally specify a version and

08:50:19.149 --> 08:50:20.965
our verbs are the classify, 
regress and predict.  We have 

08:50:20.966 --> 08:50:22.966
two examples.

08:50:25.071 --> 08:50:27.558
The first one you can seal we're
scmpg the IRIS model to classify

08:50:27.559 --> 08:50:30.416
something in here.  We aren't 
giving it a version, model 

08:50:32.041 --> 08:50:34.097
version, so it will just use the
most recent or the highest 

08:50:34.098 --> 08:50:36.794
version automatically.  The 
bottom example is one where 

08:50:36.795 --> 08:50:38.795
we're 

08:50:41.925 --> 08:50:44.377
using the MNIST model and 
specifying the version to be 314

08:50:44.378 --> 08:50:46.378
and asking it to do a 
prediction.

08:50:48.475 --> 08:50:51.127
This lets you easily integrate 
things and earsly version models

08:50:51.128 --> 08:50:54.870
and switch between them.
   I'll quickly mention the API,

08:50:54.871 --> 08:50:56.871
if you're familiar with 
TensorFlow example, 

08:50:59.823 --> 08:51:02.507
you know that representing it in
JSON is a little cumbersome, 

08:51:02.508 --> 08:51:06.607
it's pretty verbose here you can
see, there are some other warts 

08:51:06.608 --> 08:51:09.258
like needing to encode things, 
base 64.  Instead with 

08:51:09.259 --> 08:51:11.259
TensorFlow Serving, the 

08:51:13.138 --> 08:51:15.598
RESTful API uses a more  
idiomatic JSON which is much 

08:51:15.599 --> 08:51:17.599
more pleasant, much more 
succinct.

08:51:18.658 --> 08:51:20.658
Here this last example just kind
of 

08:51:22.463 --> 08:51:24.465
pulls it all together where you 
can use curl to actually make 

08:51:24.466 --> 08:51:26.895
predictions from the command 
line.

08:51:29.358 --> 08:51:31.209
So I encourage you to check out 
the project at TensorFlow 

08:51:31.210 --> 08:51:35.316
Serving, sthairpz lots of great 
documentation and things like 

08:51:35.317 --> 08:51:38.165
that, we also welcome 
contributions and code 

08:51:38.166 --> 08:51:41.046
discussion, ideas on our GitHub 
project page.  So I would like 

08:51:41.047 --> 08:51:43.047
to finish with James 

08:51:44.326 --> 08:51:46.326
to talk about TensorFlow 
Extended.

08:51:47.734 --> 08:51:51.927
(applause).
   &gt;&gt; JAMES PINE:  Thanks.  All 

08:51:51.928 --> 08:51:57.091
right.  So I'm going to start 
with a single noncontroversial 

08:51:57.092 --> 08:51:59.092
statement.

08:52:00.346 --> 08:52:02.346
This has been shown true many 
times by many people.

08:52:05.473 --> 08:52:10.016
In short, TFX is our answer to 
that statement.  I'll start with

08:52:10.017 --> 08:52:13.486
a simple diagram.  This core box
represents your machine learning

08:52:13.487 --> 08:52:15.555
code, they say the magic bits of
algorithms that actually take 

08:52:15.556 --> 08:52:17.556
the 

08:52:18.671 --> 08:52:20.671
data in and produce reasonable 
results.

08:52:21.303 --> 08:52:23.755
The blue boxes represent 
everything else you need to 

08:52:23.756 --> 08:52:26.217
actual use machine learning 
reliably and scale tbli an 

08:52:29.704 --> 08:52:32.749
actual real -- scalably in an 
actual real production setting. 

08:52:32.750 --> 08:52:35.208
Blue boxes are where you'll be 
spending most of your time, it 

08:52:35.209 --> 08:52:38.716
comprises most of the lines of 
code and also the source of 

08:52:38.717 --> 08:52:42.019
things setting off your pagers 
in the middle of the night.  In 

08:52:42.020 --> 08:52:44.020
our case if we squint at this 
just 

08:52:45.279 --> 08:52:47.750
about correctly, the core ML box
looks like TensorFlow and all 

08:52:47.751 --> 08:52:51.259
the blue boxes together comprise
TFX.  We'll quickly run through 

08:52:51.260 --> 08:52:54.510
four of the key principles that 
TFX was built on.

08:52:56.975 --> 08:52:58.249
First is flexibility, and TFX is
going to be flexible in three 

08:52:58.250 --> 08:53:02.621
ways.  First of all, we're going
to take advantage of the 

08:53:02.622 --> 08:53:04.871
flexibility built into 
TensorFlow using it as our 

08:53:04.872 --> 08:53:08.314
trainer means that we can do 
anything TensorFlow can do at 

08:53:08.315 --> 08:53:10.315
the model level, which means you

08:53:11.408 --> 08:53:13.408
can have wide models, deep 
models, 

08:53:15.704 --> 08:53:17.178
supervised models, 
unsupervisorred, from tree 

08:53:17.179 --> 08:53:19.179
models, anything we can whip up 
together.

08:53:19.649 --> 08:53:21.649
Second, we're flexible with 
regards to input data.

08:53:23.730 --> 08:53:26.188
We can handle images, text, 
sparse data, multimodal models 

08:53:26.189 --> 08:53:29.847
where you might want to train 
images and surrounding text or 

08:53:29.848 --> 08:53:31.848
something like videos plus 

08:53:32.863 --> 08:53:37.267
captions.  Third, there are 
multiple ways you might go about

08:53:37.268 --> 08:53:39.702
actually training a model.  If 
your goal is to build a kitten 

08:53:40.925 --> 08:53:43.587
detector accident you may have 
all your data up front and your 

08:53:43.588 --> 08:53:46.247
goal may be to build one model 
of sufficient high quality, then

08:53:46.248 --> 08:53:51.573
you're done.  In contrast to 
that f your goal is to build a 

08:53:51.574 --> 08:53:53.850
environment kitten video 
detector or a personalized 

08:53:53.851 --> 08:53:57.547
kitten recommender, you're not 
going to have all your data 

08:53:57.548 --> 08:53:59.548
upfront, typically you train a 
model, get it into production, 

08:54:00.825 --> 08:54:02.429
then as data comes in you'll 
TensorFlow away that model and 

08:54:02.430 --> 08:54:04.719
train a new model and then 
TensorFlow away that model and 

08:54:05.555 --> 08:54:07.789
train a new model.  We're 
actually throwing out some good 

08:54:10.060 --> 08:54:12.060
data along with these models, 
though, so 

08:54:13.766 --> 08:54:15.592
we can try a worm starting 
strategy instead where we'll 

08:54:15.593 --> 08:54:17.593
continuously train 

08:54:18.853 --> 08:54:21.089
the same model but as data comes
in we'll worm start based on the

08:54:21.090 --> 08:54:23.090
previous state of the model and 
just ad the additional new data.

08:54:25.214 --> 08:54:27.287
This will let us result in 
higher quality models with 

08:54:27.288 --> 08:54:29.288
faster convergence.

08:54:30.389 --> 08:54:34.671
   Next let's talk about 
portability.  Each of the TFX 

08:54:34.672 --> 08:54:38.776
modules briptd the blue boxes 
don't -- represented by the blue

08:54:38.777 --> 08:54:41.630
boxes don't need to do all the 
heavy lifting themselves.  

08:54:41.631 --> 08:54:43.073
They're part of an open source 
ecosystem which means we can 

08:54:43.074 --> 08:54:46.788
lean on things like TensorFlow 
and take advantage of its native

08:54:46.789 --> 08:54:51.551
portability, which means we can 
run locally, we can scale up and

08:54:51.552 --> 08:54:53.552
run in a Cloud environment, we 
can scale to devices that you're

08:54:56.279 --> 08:54:58.279
thinking about today and to 
devices that 

08:55:00.825 --> 08:55:02.650
you might be thinking about 
tomorrow.

08:55:02.651 --> 08:55:04.651
A large portion of machine 
learning 

08:55:06.811 --> 08:55:08.479
is data processing, so we rely 
Apache Beam which is built for 

08:55:08.480 --> 08:55:10.480
this task, and 

08:55:11.597 --> 08:55:13.597
again, we can take advantage of 
Beam's 

08:55:15.938 --> 08:55:17.938
portability as our own, which 
means we 

08:55:19.455 --> 08:55:22.073
can use the direct, start with a
small piece of data building 

08:55:22.074 --> 08:55:25.366
small models to confirm your 
approaches are correct and scale

08:55:25.367 --> 08:55:27.825
up into the Cloud with a data 
flow runner, also utilize 

08:55:27.826 --> 08:55:31.514
something like the Flink Runner 
or things that are in progress 

08:55:31.515 --> 08:55:35.398
right now like a spark runner.
   We'll see the same story 

08:55:35.399 --> 08:55:39.943
again with kubernetes where we 
can start with Minikube running 

08:55:39.944 --> 08:55:42.404
locally, scale up into the Cloud
or to clusters that we have 

08:55:45.478 --> 08:55:47.918
for other purposes and 
eventually scale to things that 

08:55:47.919 --> 08:55:51.940
don't yet exist but are still in
progress.

08:55:54.941 --> 08:55:57.034
Sco port ability is only part --
so porlt ability is only part of

08:55:57.035 --> 08:55:59.696
the scaleability story.  
Traditional we've seen two very 

08:56:00.713 --> 08:56:02.565
different roles involved in 
machine learning.  You'll have 

08:56:02.566 --> 08:56:04.214
the data scientists on one side 
and the production 

08:56:04.215 --> 08:56:06.906
infrastructure engineers on the 
other side.

08:56:09.426 --> 08:56:11.426
The differences between these 
are not 

08:56:13.469 --> 08:56:16.448
just amounts of data but there 
are key concerns that each has 

08:56:16.449 --> 08:56:18.439
as they go about their daily 
business.  With TFX we can 

08:56:18.440 --> 08:56:20.440
specifically target use cases 
that are in common between the 

08:56:20.707 --> 08:56:24.394
two as well as things that are 
specific to the two.  So this 

08:56:24.395 --> 08:56:25.842
will allow you to have one 
unified system that can scale up

08:56:25.843 --> 08:56:27.843
to the 

08:56:28.916 --> 08:56:30.801
Cloud and down to smaller 
environments and actually unlock

08:56:30.802 --> 08:56:32.840
collaboration between these two 
roles.

08:56:36.336 --> 08:56:41.040
   Finally, we believe heavily 
in interactivity d able to get 

08:56:41.041 --> 08:56:45.947
quick iterative results with 
responsive tooling and faster  

08:56:45.948 --> 08:56:50.226
debugging and this interactivity
should remain such even at scale

08:56:50.227 --> 08:56:54.195
with large sets of data or large
models.

08:56:56.018 --> 08:56:58.018
So this is a fairly ambitious 
goal, 

08:56:59.109 --> 08:57:01.109
so where are we now?

08:57:03.233 --> 08:57:06.746
Today we've open sourced a few 
key areas of responsibility.  We

08:57:06.747 --> 08:57:08.992
have transform, moondle Sis, 
serving and facets, each one of 

08:57:08.993 --> 08:57:13.487
these is useful on its own but 
is much more so when used in 

08:57:13.488 --> 08:57:15.488
concert with the others.  Let's 
walk through what this might 

08:57:16.151 --> 08:57:18.151
look like in practice.

08:57:20.871 --> 08:57:22.773
(Correction, model analysis).
   Our goal here is to take a 

08:57:22.774 --> 08:57:26.462
bunch of data we've accumulated 
and do something useful for our 

08:57:26.463 --> 08:57:27.900
users of our product.
   These are the steps we want 

08:57:27.901 --> 08:57:29.941
to take along the way.  Let's 
start with step one with the 

08:57:30.363 --> 08:57:32.363
data.

08:57:34.271 --> 08:57:37.145
We're going to pull this up in 
facets and use it to actually 

08:57:37.146 --> 08:57:42.287
analyze what features might be 
useful predictors, look for any 

08:57:42.288 --> 08:57:44.786
anomalies so outliers in our 
data or missing features to try 

08:57:44.787 --> 08:57:49.106
to avoid the classic garbage in,
garbage out problem, and to try 

08:57:49.107 --> 08:57:53.449
on inform what data we're going 
to need to further process 

08:57:53.450 --> 08:57:55.450
before it's useful for our ML 
training.

08:57:56.759 --> 08:57:59.427
Which leads into our next step, 
which is to actually use 

08:57:59.428 --> 08:58:01.679
transform to transform our 
features.

08:58:05.087 --> 08:58:07.087
So fif

08:58:08.261 --> 08:58:10.261
TF transform lets you do full 
pass 

08:58:12.335 --> 08:58:13.142
analysis of data, attached on 
the TF graph itself which will 

08:58:13.143 --> 08:58:16.220
ensure that you're applying the 
same transforms in training as 

08:58:16.221 --> 08:58:19.934
in serving.
   From the code you can see 

08:58:19.935 --> 08:58:24.243
that we're taking advantage of a
few ops built into transform and

08:58:24.244 --> 08:58:26.244
we can do things like 

08:58:27.306 --> 08:58:29.306
scale, generate vocabularies or 

08:58:30.587 --> 08:58:32.216
buckettize our base data, this 
code will look the same 

08:58:32.217 --> 08:58:34.484
regardless of our execution 
environment.  Of course if you 

08:58:34.485 --> 08:58:36.554
needed to find your own 
operations, you can do so.

08:58:39.005 --> 08:58:40.629
So this puts us at the point 
where we're strongly suspicious 

08:58:40.630 --> 08:58:42.903
that we have data we can 
actually use to generate a 

08:58:43.101 --> 08:58:45.962
model.  So let's look at doing 
that.

08:58:47.386 --> 08:58:49.386
We're going to use a TensorFlow 

08:58:51.924 --> 08:58:53.924
estimator, which is a high level
API 

08:58:55.606 --> 08:58:57.606
that will let us quickly dine, 
train and export our model.

08:59:01.414 --> 08:59:03.421
This is a small set of 
estimators that are present in 

08:59:03.422 --> 08:59:05.422
core TensorFlow, there 

08:59:07.475 --> 08:59:09.475
are a it lot more available and 
you can also create your own.

08:59:11.162 --> 08:59:15.486
   We'll look ahead to future 
steps and purposely export two 

08:59:15.487 --> 08:59:17.724
graphs into our saved model.  
One specific to serving, one 

08:59:17.725 --> 08:59:23.943
specific to model evaluate.
   Again from the code you can 

08:59:23.944 --> 08:59:28.285
see that in this case we're 
going on use a wide and deep 

08:59:28.286 --> 08:59:30.286
model, we'll define it, train 

08:59:32.185 --> 08:59:35.736
it and do our exports.
   So now we have a model.  We 

08:59:35.737 --> 08:59:37.145
could just push this directly to
production but that would 

08:59:37.146 --> 08:59:40.020
probably be a very bad idea so 
let's try to gain a little more 

08:59:40.021 --> 08:59:42.263
confidence in what would happen 
if we actual did so for our end 

08:59:43.892 --> 08:59:45.892
users.

08:59:48.915 --> 08:59:50.176
So we'll step into TF model 
analysis.  We'll utilize this to

08:59:50.177 --> 08:59:52.177
evaluate our 

08:59:53.438 --> 08:59:55.438
model over a large dataset, then
we're 

08:59:57.527 --> 08:59:59.205
going to define in this case one
but you could possibly use many,

08:59:59.206 --> 09:00:03.902
slices of this data that we want
to analyze independently from 

09:00:03.903 --> 09:00:06.351
others.
   This will allow us to 

09:00:06.352 --> 09:00:10.847
actually look at subsets of our 
data that may be representative 

09:00:10.848 --> 09:00:12.918
of subsets of our users and how 
our metrics actually track 

09:00:15.400 --> 09:00:18.041
between these groups.  For 
example, you may have sets of 

09:00:21.091 --> 09:00:22.330
users in different languages, 
maybe accessing different 

09:00:22.331 --> 09:00:24.576
devices, or maybe you have a 
very small but passionate 

09:00:30.361 --> 09:00:31.794
community of rability 
aficionados aficionados mixed in

09:00:31.795 --> 09:00:36.713
with your larger community of 
kitten fanatics and you want to 

09:00:36.714 --> 09:00:38.977
make sure your model gives 
positive experiences to both 

09:00:38.978 --> 09:00:41.013
groups equally.
   Now we have a model we're 

09:00:41.014 --> 09:00:45.962
confident in and we want to push
it to serving.  Let's get this 

09:00:45.963 --> 09:00:50.451
up and TensorFlow some queries 
at it.

09:00:50.644 --> 09:00:52.714
This is quick.  Now we have a 
model up, we have a 

09:00:55.788 --> 09:00:58.231
server listening on port 9,000, 
now we'll back out into our 

09:00:58.232 --> 09:01:01.478
actual product code, we can 
assemble individual prediction 

09:01:01.479 --> 09:01:03.560
requests and send them out to 
our server.

09:01:07.430 --> 09:01:08.621
If this slide doesn't look like 
your actual code, and this one 

09:01:08.622 --> 09:01:12.128
looks more similar, then you'll 
be happy to see that this is 

09:01:12.129 --> 09:01:13.792
coming soon, I'm cheating a 
little by showing you this now 

09:01:13.793 --> 09:01:17.293
as current state, but we're 
super-excited about this and 

09:01:17.294 --> 09:01:19.294
this is one of those real soon 
now scenarios.

09:01:22.585 --> 09:01:25.935
   What's coming next?

09:01:30.627 --> 09:01:34.705
So first, please contribute and 
join the toafl.org community, we

09:01:34.706 --> 09:01:38.852
-- the TensorFlow.org community,
we don't want the only time 

09:01:38.853 --> 09:01:43.019
we're talking back and forth is 
at summit says and conferences. 

09:01:43.020 --> 09:01:45.506
Secondly some of you may have 
seen the TFX paper last year at 

09:01:45.507 --> 09:01:48.563
KDD, this specifies what we 
believe an end-to-end platform 

09:01:48.564 --> 09:01:50.564
actually looks like.  Here it 
is.

09:01:52.243 --> 09:01:54.074
And by we believing that this is
what it looks like, this is what

09:01:54.075 --> 09:01:58.400
it looks like, this is actually 
what's powering some of the 

09:01:58.401 --> 09:02:00.401
pretty awesome first products 
you've been seeing at IO and 

09:02:01.464 --> 09:02:04.548
that you've probably been using 
yourselves.

09:02:07.621 --> 09:02:09.646
But again, this is where we are 
at OSS right now.  This is not 

09:02:09.647 --> 09:02:11.496
the full platform, but you can 
see what we're aiming for and 

09:02:11.497 --> 09:02:14.953
we'll get there eventually.

09:02:18.685 --> 09:02:21.361
So again, please download this 
software, use it to make good 

09:02:21.362 --> 09:02:23.362
things, and send us feedback.

09:02:27.480 --> 09:02:29.532
And thank you from all of us for
being current and future users 

09:02:29.533 --> 09:02:31.802
and for choosing to spend your 
time with us today.

09:02:32.013 --> 09:02:34.013
(applause).

09:02:41.419 --> 09:02:43.419
(The session concluded at 5:06 
p.m.

09:02:46.586 --> 09:02:48.586
)

09:03:46.078 --> 09:03:49.567
   &gt;&gt; Thank you for joining this
session.  Brand ambassadors will

09:03:49.568 --> 09:03:54.069
assist with directing you 
through the designated exits.  

09:03:54.070 --> 09:03:55.498
We'll be making room for those 
who have registered for the next

09:03:55.499 --> 09:03:59.427
session.  If you've registered 
for the next session in this 

09:03:59.428 --> 09:04:01.510
room, we ask that you please 
clear the room and return via 

09:04:01.511 --> 09:04:04.185
the registration line outside.  
Thank you.

09:04:04.931 --> 09:04:06.409
&gt;&gt;
   &gt;&gt;

09:04:06.410 --> 09:04:07.410
&gt;&gt;
   &gt;&gt;

09:04:06.410 --> 09:04:08.044
&gt;&gt;
   &gt;&gt;

09:04:08.045 --> 09:04:10.045
&gt;&gt;
   &gt;&gt;

09:05:47.890 --> 09:05:51.798
May 9, 2018.
   5:30 p.m.

09:05:56.025 --> 09:05:59.002
Change the way you work with 
Analytics.

09:12:19.832 --> 09:12:21.832
..

09:17:22.727 --> 09:17:24.727
.

09:18:21.379 --> 09:18:22.595
.
   &gt;&gt;

09:18:22.596 --> 09:18:24.596
&gt;&gt;
   &gt;&gt;

09:18:26.218 --> 09:18:28.218
&gt;&gt; 

09:18:38.445 --> 09:18:39.671
.
   &gt;&gt;

09:18:39.672 --> 09:18:40.527
&gt;&gt;
   &gt;&gt;

09:18:40.528 --> 09:18:41.571
&gt;&gt;
   &gt;&gt;

09:18:41.572 --> 09:18:44.016
&gt;&gt;
   &gt;&gt; 

09:18:49.091 --> 09:18:51.091
Realtime Captioning on this 
screen

09:22:11.995 --> 09:22:14.475
.
   &gt;&gt; Welcome.  Please fill in 

09:22:14.476 --> 09:22:17.544
the seats near the front of the 
room.  Thank you.

09:26:16.761 --> 09:26:18.444
S.
   &gt;&gt; RUSS KETCHUM:  Hello and 

09:26:18.445 --> 09:26:20.445
welcome, 

09:26:21.949 --> 09:26:24.206
I'm Russ Ketchum, the product 
lead for Google Analytics for 

09:26:24.207 --> 09:26:26.274
Firebase and it's so great to be
back here with all of you 

09:26:29.952 --> 09:26:30.987
at IO, it was two years ago that
we launched Google Analytics for

09:26:30.988 --> 09:26:35.521
Firebase and in the time since 
it's been awesome to partner 

09:26:35.522 --> 09:26:37.522
with so many of you across so 

09:26:38.574 --> 09:26:40.250
many apps to harness the power 
of app first analytics that's 

09:26:40.251 --> 09:26:44.313
tightly integrated into a mobile
developer platform.

09:26:49.891 --> 09:26:53.980
   You've used Firebase and 
Google Analytics for Firebase 

09:26:53.981 --> 09:26:55.981
specifically to 

09:26:58.847 --> 09:27:00.847
create so many magical, 
intuitive, fun, 

09:27:01.965 --> 09:27:03.800
useful, creative, I can't 
imagine my life before I had 

09:27:03.801 --> 09:27:06.651
them apps.  The range that 
you've created is truly 

09:27:07.668 --> 09:27:12.136
incredible.  It's also 
incredible to have had so many 

09:27:12.137 --> 09:27:14.172
conversations with you all about
the range of business goals that

09:27:14.173 --> 09:27:19.296
you have and life cycle 
challenges that you face.  Some 

09:27:19.297 --> 09:27:23.824
of you are just starting out.  
Others are established players. 

09:27:23.825 --> 09:27:26.299
Some of you are focused on 
growth.  Others of you are 

09:27:26.300 --> 09:27:28.300
expanding your focus to include 
reengagement.

09:27:31.605 --> 09:27:33.842
For some, monetization is a goal
of the hopefully not-so-distant 

09:27:33.843 --> 09:27:37.972
future, and yet others, you're 
onto your second or even your 

09:27:37.973 --> 09:27:40.140
third simultaneous monetization 
strategy.

09:27:42.163 --> 09:27:44.408
Now, while you have a lot of 
diversity to the challenges and 

09:27:44.409 --> 09:27:47.538
goals you have, there's also a 
lot of things that you have in 

09:27:47.539 --> 09:27:52.247
common, and one of the big ones 
remains.  Let's face it, 

09:27:52.248 --> 09:27:54.248
building a successful 

09:27:55.550 --> 09:27:57.167
app is still really hard, but 
it's no surprise when you ask 

09:27:57.168 --> 09:28:02.058
the Google Analytics team, we 
think that having good data is 

09:28:02.059 --> 09:28:04.522
often the key to making the 
process achievable and 

09:28:04.523 --> 09:28:09.299
repeatable.  But of course 
having good data isn't always 

09:28:09.300 --> 09:28:11.300
easy in the first place.

09:28:12.848 --> 09:28:15.537
So mobile apps generate an 
incredibly large amount of data,

09:28:15.538 --> 09:28:19.648
even small apps do, and that's 
why when we were building Google

09:28:19.649 --> 09:28:21.514
Analytics for Firebase, we built
it to scale, and that's how 

09:28:21.515 --> 09:28:26.031
we're able to offer free and 
unlimited event reporting even 

09:28:26.032 --> 09:28:28.032
for the largest of apps.  But 
then once you collect all that  

09:28:29.684 --> 09:28:32.749
data, that creates another set 
of challenges.  You shouldn't 

09:28:32.750 --> 09:28:36.842
have to be a forensic scientist 
sifting through your data to try

09:28:36.843 --> 09:28:39.081
to glean some sort of 
understanding, and that's why 

09:28:39.082 --> 09:28:43.207
Google Analytics for Firebase 
surfaces key themes and insights

09:28:43.208 --> 09:28:46.462
and brings them right to the 
forefront.  But you can have all

09:28:46.463 --> 09:28:49.734
the understanding in the world 
but if you can't take action on 

09:28:49.735 --> 09:28:52.169
it, then really what's the 
point?  And that's why Google 

09:28:52.170 --> 09:28:54.844
Analytics is immediately 
actionable inside of 

09:28:58.358 --> 09:28:59.775
Firebase and across our other 
app focused products at Google.

09:28:59.776 --> 09:29:01.799
   Now, we believe these three 
pieces 

09:29:05.765 --> 09:29:07.765
are a good starting point for 
getting 

09:29:09.222 --> 09:29:11.222
your data right, but really 
they're 

09:29:12.455 --> 09:29:14.455
that, a starting point.  Today 
we're really excited to share 

09:29:14.489 --> 09:29:16.562
with you how some of our latest 
features we think will truly 

09:29:16.563 --> 09:29:18.563
change the way that you work 
with analytics.

09:29:21.897 --> 09:29:24.381
So the first is truly a 
foundational  change.  So up 

09:29:24.382 --> 09:29:27.243
until this point, if you had two
apps in a Firebase project, 

09:29:27.244 --> 09:29:29.244
regardless 

09:29:32.312 --> 09:29:34.312
if they were the same platform 
or a mix

09:29:35.483 --> 09:29:37.945
of i ore S or Android, you had 
to analyze them individually.  

09:29:37.946 --> 09:29:39.771
We've heard from you all loud 
and clear that this forced 

09:29:39.772 --> 09:29:41.808
isolation doesn't really map to 
how you think about 

09:29:43.236 --> 09:29:45.296
understanding in-app activity.  
You think about what goes on in 

09:29:45.297 --> 09:29:47.297
your project more holistically.

09:29:49.359 --> 09:29:51.359
So today, I'm really excited to 

09:29:53.093 --> 09:29:53.700
announce project level reporting
in Google Analytics for 

09:29:53.701 --> 09:29:55.939
Firebase.
   So with it, the event data 

09:29:55.940 --> 09:29:57.940
for all of 

09:29:59.808 --> 09:30:02.268
your apps in a given project are
clctd together to give you a -- 

09:30:02.269 --> 09:30:06.165
are collected together to ghif 
you a single and comprehensive 

09:30:06.166 --> 09:30:08.166
view of what's happening.  We're
excited about the possibilities 

09:30:08.615 --> 09:30:10.243
this will unlock.
   These possibilities are not 

09:30:10.244 --> 09:30:12.244
limited 

09:30:14.749 --> 09:30:17.193
to one moment in time.  Being 
able to take this holistic 

09:30:19.651 --> 09:30:22.303
perspective has exciting 
implications across your journey

09:30:22.304 --> 09:30:24.304
as an app developer.

09:30:25.342 --> 09:30:27.610
Across Firebase and Google 
Analytics for Firebase we've 

09:30:27.611 --> 09:30:32.311
developed a slew of capabilities
to help you glow your app.  Now 

09:30:32.312 --> 09:30:34.139
all those features become even 
more powerful but also now that 

09:30:34.140 --> 09:30:39.061
we have a core foundation that's
inherently multiplatform, this 

09:30:39.062 --> 09:30:43.422
is going to unlock entirely new 
types of capabilities that we're

09:30:43.423 --> 09:30:45.423
really excited to begin to 
explore.

09:30:46.068 --> 09:30:49.117
We're going to look at a lot 
more of these today.  

09:30:49.118 --> 09:30:51.777
Specifically, we're going to 
show you what this new holistic 

09:30:51.778 --> 09:30:55.670
perspective looks like in Google
Analytics for Firebase.  Then 

09:30:55.671 --> 09:30:58.303
we're going on Pivot and show 
you how you can use it to build 

09:30:58.304 --> 09:31:00.304
stable, well 

09:31:01.369 --> 09:31:04.029
functioning apps, how to 
monetize more effectively and 

09:31:04.030 --> 09:31:07.300
how to grow and retain your 
high-value users.  So without 

09:31:07.301 --> 09:31:09.943
further delay, I would like to 
invite Steve and Mai up on stage

09:31:09.944 --> 09:31:12.602
to show you what this looks like
in action.

09:31:15.819 --> 09:31:18.568
(applause).
   &gt;&gt; STEVE GANEM:  Thanks, 

09:31:18.569 --> 09:31:20.569
Russ.

09:31:22.035 --> 09:31:24.929
Hi, everyone, I am Steve  Ganem.
   &gt;&gt; MAI LOWE:  I'm Mai low, 

09:31:24.930 --> 09:31:28.675
we're product managers for 
Google Analytics for Firebase.

09:31:33.584 --> 09:31:36.225
Mai Lowe.
   &gt;&gt; MAI LOWE:  Today we'll 

09:31:36.226 --> 09:31:39.273
start with what Russ has already
mentioned, gaining a holistic 

09:31:39.274 --> 09:31:43.127
view of your app.
   So let's dive in.

09:31:45.790 --> 09:31:47.790
For many of you, your faib 
project 

09:31:48.857 --> 09:31:50.857
represents your product and your

09:31:52.884 --> 09:31:54.887
business, and seeing the 
analytics for each of your apps 

09:31:54.888 --> 09:31:57.442
independently can be useful and 
inspiring meaningful actions, 

09:31:59.444 --> 09:32:01.465
but you really want to know how 
your product is being used and 

09:32:01.466 --> 09:32:03.466
how your business is performing 
as a whole.

09:32:04.461 --> 09:32:05.165
And up until this point, the 
only solution had been to 

09:32:05.166 --> 09:32:07.360
integrate with big query and 
then to do some kind of data 

09:32:09.000 --> 09:32:11.463
manipulation elsewhere, possibly
in data studio or in a tool 

09:32:11.464 --> 09:32:14.960
that's internal to your company.

09:32:18.872 --> 09:32:20.962
Yet over 90% of the top 100 apps
on Google Pay are also available

09:32:20.963 --> 09:32:24.626
in the app store.
   What this means, it's just 

09:32:24.627 --> 09:32:26.627
one of 

09:32:27.883 --> 09:32:29.883
many statistics that highlights 
how it's 

09:32:30.975 --> 09:32:32.816
important to see and understand 
your app data across platforms 

09:32:32.817 --> 09:32:36.959
because many of you in fact have
it across platforms.  So I'm 

09:32:36.960 --> 09:32:39.419
excited to announce that within 
the next few weeks, you can view

09:32:39.420 --> 09:32:44.512
all of the an lilt iks for your 
app at the project level.  So 

09:32:44.513 --> 09:32:46.513
instead of seeing your datd 

09:32:48.468 --> 09:32:49.687
separated by platform, you can 
now see your event activity 

09:32:49.688 --> 09:32:51.688
combined.

09:32:53.364 --> 09:32:55.364
You will see things like first 
opens, 

09:32:57.038 --> 09:33:00.525
purchases, revenue, across your 
Android and iOS app.  And 

09:33:00.526 --> 09:33:02.563
project level analytics as a 
concept also aplieps to the 

09:33:02.564 --> 09:33:06.856
other places in -- applies to 
the other places in analytics 

09:33:06.857 --> 09:33:09.347
that you've become used to, such
as  audiences, funnels and 

09:33:10.943 --> 09:33:12.995
retention cohorts.
   Of course you'll still need 

09:33:12.996 --> 09:33:16.097
to be able to focus in on one 
app in your project to make sure

09:33:16.098 --> 09:33:19.765
there are no issues with key 
metrics or efforts that you have

09:33:19.766 --> 09:33:21.766
that are specific to a platform.
And you can still do that.

09:33:28.818 --> 09:33:34.143
   By applying a stream filter.
   So a stream is just a source 

09:33:34.144 --> 09:33:36.399
of analytics data, and it Maps 
one to one 

09:33:39.662 --> 09:33:41.697
with an app in Firebase.  It's 
not an all or nothing situation.

09:33:43.983 --> 09:33:45.614
So you can filter on other 
dimensions in addition to a 

09:33:45.615 --> 09:33:49.522
stream.  So maybe sometimes you 
want to only see production 

09:33:49.523 --> 09:33:51.523
versions of your app and 

09:33:53.025 --> 09:33:55.664
not the noise of the test 
versions.  Our new flexibility 

09:33:55.665 --> 09:33:59.960
filters control allows you to do
just that.  The use case is just

09:33:59.961 --> 09:34:02.199
built from there, right?  You 
can see the concept applied to 

09:34:02.200 --> 09:34:04.200
age 

09:34:05.445 --> 09:34:07.445
or user properties, OS versions,
et  cetera.

09:34:07.689 --> 09:34:09.325
Another place where you find a 
particularly powerful to have 

09:34:09.326 --> 09:34:13.873
project level insights is 
realtime.  So here the changes 

09:34:13.874 --> 09:34:17.557
in the way you work with 
analytics are twofold.  One is 

09:34:17.558 --> 09:34:20.196
around what we've been talking 
about, which is project level 

09:34:20.197 --> 09:34:27.118
data.  And two is around where 
you're seeing the data.  Some of

09:34:27.119 --> 09:34:29.789
you may remember last year we 
launched stream view, which 

09:34:29.790 --> 09:34:33.060
helps you understand what your 
users are doing inside your 

09:34:33.061 --> 09:34:35.533
product right now.  It's a big 
and exciting launch for 

09:34:36.140 --> 09:34:40.403
analytics.  And at the time it 
was its own dedicated section in

09:34:40.404 --> 09:34:42.682
our UI and it lived separately, 
which made it hard to 

09:34:44.545 --> 09:34:45.970
incorporate the insights from 
that section within the rest of 

09:34:45.971 --> 09:34:51.068
the context of your app.
   So I'm excited to let you 

09:34:51.069 --> 09:34:54.111
know that now as of today 
throughout the whole product you

09:34:54.112 --> 09:34:56.112
see realtime cards to give you 
that missing connection to your 

09:34:57.981 --> 09:34:59.820
users, so you know what they're 
doing right at this moment in 

09:34:59.821 --> 09:35:04.565
time.  This gives you an idea if
your product -- of how your 

09:35:04.566 --> 09:35:06.604
business is performing right now
within the con tesks all the 

09:35:08.456 --> 09:35:10.301
other app data that may not be 
realtime in nature, and of 

09:35:10.302 --> 09:35:12.542
course if you want to dive 
deeper into realtime data, you 

09:35:12.543 --> 09:35:14.988
can still do that, click through
and you'll 

09:35:18.270 --> 09:35:20.544
arrive in our Stream View 
section.  Okay, time to look at 

09:35:20.545 --> 09:35:23.597
some of this stuff live.  Steve 
is it going to do just that.

09:35:25.648 --> 09:35:28.490
&gt;&gt; STEVE GANEM:  Today we'll 
look at Flood-It!, which is a 

09:35:28.491 --> 09:35:30.941
simple fun addictive puzzle game
available on Google Pay and on 

09:35:30.942 --> 09:35:34.657
the Apple app store and it 
leverages a number of different 

09:35:34.658 --> 09:35:36.658
Firebase features.

09:35:37.755 --> 09:35:39.218
It also the public Firebase demo
project, so it's a place you can

09:35:39.219 --> 09:35:43.749
go to check out all the latest 
Firebase features, see what 

09:35:43.750 --> 09:35:45.786
Firebase has to offer.  To 
access the demo project, just go

09:35:45.787 --> 09:35:49.477
to the Firebase console and look
for the prompt that says explore

09:35:49.478 --> 09:35:53.971
a demo project and click on it.
   And you'll be able to take a 

09:35:53.972 --> 09:35:57.647
look at all the features, the 
analytics features we're talking

09:35:57.648 --> 09:35:59.324
about today, which will be 
rolling out to your projects in 

09:35:59.325 --> 09:36:02.164
the coming weeks.
   Now, for a special treat for 

09:36:02.165 --> 09:36:06.658
those of you who are attending  
IO, if you're interested in 

09:36:06.659 --> 09:36:08.926
getting priority access to these
features, just head over to the 

09:36:10.767 --> 09:36:13.047
Firebase sandbox at any time, 
look for somebody wearing that 

09:36:13.048 --> 09:36:15.709
bright yellow Firebase shirt and
let them know that you're 

09:36:15.710 --> 09:36:17.742
interested in that and they can 
get you signed up for it.

09:36:18.964 --> 09:36:20.964
So without further atorques 
let's 

09:36:22.230 --> 09:36:25.760
switch to the demo, please.
   The demo starts here on the 

09:36:25.761 --> 09:36:29.212
project overview for Flood-It!. 
This is also being revamped and 

09:36:29.213 --> 09:36:32.937
will be rolling out soon.  Among
other changes, there's a focus 

09:36:35.190 --> 09:36:37.636
on a lot more analytics data 
being shown here so that at a 

09:36:37.637 --> 09:36:42.363
glance you can check the pulse 
of your project.  Previously 

09:36:42.364 --> 09:36:44.205
there was one day worth of 
analytics data here, nowr that's

09:36:44.206 --> 09:36:48.289
been expanded to show two weeks 
worth and it focuses on daily 

09:36:48.290 --> 09:36:52.174
active users, day one retention 
and revenue.  Now, this is 

09:36:52.175 --> 09:36:55.029
across your project but also 
broken down by app in your 

09:36:55.030 --> 09:36:57.030
project.

09:36:58.298 --> 09:36:59.744
Also as Mai mentioned before, 
we're spreading realtime data 

09:36:59.745 --> 09:37:03.239
out throughout the product 
showing it in context in other 

09:37:03.240 --> 09:37:05.240
places so you can see even here 
in 

09:37:07.722 --> 09:37:10.569
the project overview we're 
showing a count of players 

09:37:10.570 --> 09:37:12.855
playing food it actually 
participate ng my demo now, 79 

09:37:13.256 --> 09:37:15.256
of them.

09:37:17.929 --> 09:37:19.929
It the project overview act as a
good springboard into analytics 

09:37:19.930 --> 09:37:21.961
if that's your destination.  You
can click on any of these cards 

09:37:21.962 --> 09:37:23.962
to jump right into the Analytics
dashboard.

09:37:28.007 --> 09:37:30.007
Am

09:37:33.313 --> 09:37:34.532
I've landed on the dashboard and
I'll take a moment foinlt 

09:37:34.533 --> 09:37:37.427
something out.  Some of you who 
are familiar with the 

09:37:40.442 --> 09:37:42.442
dashboard might have noticed 
there's a 

09:37:44.475 --> 09:37:48.208
small change in our user 
interface, the app selector is 

09:37:44.475 --> 09:37:48.639
gone.  There used to be a 
drop-down next to the word 

09:37:48.640 --> 09:37:49.651
dashboard that would require you
to select the app that you want 

09:37:49.652 --> 09:37:52.495
to analyze and by removing that 
we're actually showing together 

09:37:52.496 --> 09:37:57.638
all the data from all of the 
apps in the project together.  

09:37:57.639 --> 09:37:59.947
This is project-level reporting.
Now, it may seem like a small 

09:37:59.948 --> 09:38:04.075
change in UI but actually this 
signals a fundamental shift in 

09:38:04.076 --> 09:38:07.579
how Analytics is going to work 
going forward.  From now on, the

09:38:07.580 --> 09:38:09.580
events being logged 

09:38:10.852 --> 09:38:13.291
from any of the apps in your 
product are actually being 

09:38:13.292 --> 09:38:15.292
collected in a single 

09:38:16.794 --> 09:38:18.404
Analytics property and the way 
that you configure your 

09:38:18.405 --> 09:38:21.261
Analytics is going on change as 
well.  It used to be that you 

09:38:21.262 --> 09:38:23.262
configure each app 
independently.  So for Flood-It!

09:38:25.978 --> 09:38:27.843
I registered a whole set of user
audiences, properties and 

09:38:27.844 --> 09:38:32.367
funnels for the iOS version and 
then had to go and do the exact 

09:38:32.368 --> 09:38:34.368
same set yum for the Android 
version and any changes I would 

09:38:36.232 --> 09:38:36.861
make thereo I would have to go 
and mimic copies on the other 

09:38:36.862 --> 09:38:40.178
ones.  Going forward we'll 
configure Analytics at the 

09:38:40.179 --> 09:38:42.179
project level so you can 
configure it just once for your 

09:38:43.458 --> 09:38:45.340
project and it applies to all 
apps in the project going 

09:38:45.341 --> 09:38:47.341
forward.

09:38:50.446 --> 09:38:52.525
What we've done also is combined
the configuration that you have 

09:38:52.526 --> 09:38:57.222
at the app level into a single 
configuration and promoted that 

09:38:57.223 --> 09:38:58.865
to the project lefl and our 
engineers have worked extremely 

09:38:58.866 --> 09:39:02.791
hard and I have to give them a 
shout out, really, really hard 

09:39:02.792 --> 09:39:07.304
to ensure that your historical 
data and your configuration is 

09:39:07.305 --> 09:39:09.337
high grating seamlessly into 
this new world to make sure that

09:39:09.338 --> 09:39:12.981
you don't miss a beat.
   The results is an Analytics 

09:39:12.982 --> 09:39:16.871
product which says simpler to 
set up, easier to maintain and 

09:39:16.872 --> 09:39:19.545
more powerful in its reporting 
capabilities.

09:39:21.976 --> 09:39:23.604
It makes it easy to answer 
important questions like how 

09:39:23.605 --> 09:39:25.686
much money is my app business 
making or how much time are 

09:39:31.216 --> 09:39:33.426
users spending in my app across 
plat formtz?  The answer to 

09:39:33.427 --> 09:39:35.680
those questions starts in this 
dashboard.  If you haven't seen 

09:39:35.681 --> 09:39:39.774
the dashboard in a little while,
it's actually gone through a 

09:39:39.775 --> 09:39:41.815
huge overhaul, complete 
facelift.  We center the 

09:39:41.816 --> 09:39:45.491
reporting around questions that 
people in your organization need

09:39:45.492 --> 09:39:49.586
to ask and answer on a daily 
basis to do their jobs.  

09:39:49.587 --> 09:39:51.587
Questions related to 
conversions, 

09:39:54.655 --> 09:39:56.655
engagement, revenue, stability, 
your 

09:39:58.707 --> 09:40:00.344
latest release, acquisition and 
so forth.  And we have realtime 

09:40:00.345 --> 09:40:02.424
cards everywhere as Mai 
mentioned, showing us that now 

09:40:07.296 --> 09:40:10.865
it's up to 86 users playing food
Flood-It! since I started.  

09:40:10.866 --> 09:40:12.929
That's 84 users across the apps 
on the project.  I recognize 

09:40:12.930 --> 09:40:17.272
this is a developers conference 
and there's bound to be some of 

09:40:17.273 --> 09:40:21.473
you in the awd jens going this 
project-level stuff sounds great

09:40:17.273 --> 09:40:21.329
for someone but I work on just 
the iOS version of the app.  Are

09:40:21.330 --> 09:40:22.749
you telling me that I have to 
look at all the data together 

09:40:22.750 --> 09:40:26.614
and I can't just isolate the iOS
version?  And of course that's 

09:40:26.615 --> 09:40:29.474
not what we're saying.  We just 
changed the way suddenly that 

09:40:31.336 --> 09:40:33.336
you're going to look at data 
from one specific app.

09:40:34.274 --> 09:40:36.128
Going forward, you're going to 
apply a stream filter if that's 

09:40:36.129 --> 09:40:38.129
what you want to do.

09:40:40.223 --> 09:40:42.463
A stream is just a source of 
Analytics data and in faib that 

09:40:42.464 --> 09:40:46.136
Maps one to one with an app in 
your project.  So if I wanted to

09:40:46.137 --> 09:40:48.137
look at data just 

09:40:50.408 --> 09:40:52.408
for the iOS version of

09:40:53.691 --> 09:40:55.382
flood t I could lick r click 
that, or just the Android or the

09:40:55.383 --> 09:40:57.383
whole  project.  Flood-It!

09:40:58.852 --> 09:41:00.852
is set up pretty simply but I've
seen a 

09:41:01.914 --> 09:41:04.364
lot of projects set wup many 
more apps.  For example some 

09:41:04.365 --> 09:41:07.013
projects have one app for every 
stage, beta, production version.

09:41:08.649 --> 09:41:10.272
If you're set up like that, now 
you'll have the ability to 

09:41:10.273 --> 09:41:12.544
actually just filter in the 
release version of your app or 

09:41:14.775 --> 09:41:15.982
just beta or just alpha so you 
have more flexibility than you 

09:41:15.983 --> 09:41:18.036
had before actually, you haven't
lost any.

09:41:20.090 --> 09:41:21.908
So let's look at how this works.
We put it together to answer 

09:41:21.909 --> 09:41:25.175
some real questions.  As a 
product manager on flood t I 

09:41:25.176 --> 09:41:27.176
want 

09:41:28.891 --> 09:41:31.739
to know how much time are people
playing Flood-It! each daivment 

09:41:31.740 --> 09:41:33.740
I'll go to the user 

09:41:35.970 --> 09:41:38.457
engagement card, shows me daily 
user Engage support a minute and

09:41:38.458 --> 09:41:42.549
4 seconds -- is eleven minutes 
and 45 seconds, average user 

09:41:42.550 --> 09:41:44.550
playing each day.

09:41:46.067 --> 09:41:48.130
If I'm curious about  iOS, I can
apply at that as a filter and 

09:41:48.131 --> 09:41:50.585
see that it goes down to 11 
minutes, 3-9D seconds, 

09:41:52.836 --> 09:41:54.896
remarkably consistent, not too 
shocking because there's feature

09:41:54.897 --> 09:41:56.965
parity among the apps.
   But I can go further than 

09:41:56.966 --> 09:42:01.487
that.  There's new flexibility 
here which will allow me to also

09:42:01.488 --> 09:42:06.094
apply filters beyond just the 
stream, and if I'm curious how 

09:42:06.095 --> 09:42:08.942
this metric holds up with people
on new devices, maybe I want to 

09:42:13.965 --> 09:42:16.631
filter for iPhone 8's and the 
iPhone 10 as well, I can apply 

09:42:16.632 --> 09:42:18.632
all those filters all at the 
same time.

09:42:19.895 --> 09:42:21.126
You can see that engagement 
actually goes up by a little 

09:42:21.127 --> 09:42:23.127
bit.

09:42:24.604 --> 09:42:26.238
Maybe this is a small sample 
size or maybe there's some 

09:42:26.239 --> 09:42:28.239
correlation between 

09:42:29.478 --> 09:42:30.724
people on these latest phones, 
and Flood-It! or maybe the 

09:42:30.725 --> 09:42:32.725
experience is just better.  It's
hard to tell without diving 

09:42:32.775 --> 09:42:36.920
deeper.  But you can do that 
with these calls to action at 

09:42:36.921 --> 09:42:38.954
the bottom of each of the cards 
letting you go deeper along 

09:42:38.955 --> 09:42:41.625
those same lines of 
investigation.

09:42:43.441 --> 09:42:45.280
So I could go into more and more
examples, but now that you know 

09:42:45.281 --> 09:42:49.414
how to access the demo project 
yourself, I encourage you to 

09:42:49.415 --> 09:42:53.125
check out these features for 
imrurs is get a sense of how 

09:42:53.126 --> 09:42:55.383
these new features and analytics
will open up new ways for you to

09:42:55.384 --> 09:42:58.240
analyze your own app business in
the coming weeks.

09:43:00.903 --> 09:43:02.903
Can we switch to the slides, 
please?

09:43:07.284 --> 09:43:10.544
   &gt;&gt; MAI LOWE:  We worked 
really hard to meet your needs 

09:43:10.545 --> 09:43:12.582
with our reports and dashboards 
we're building, we know 

09:43:14.014 --> 09:43:15.491
sometimes you just have to take 
the data and manipulate it 

09:43:15.492 --> 09:43:17.119
yourself, maybe it's an 
additional analysis or joining 

09:43:17.120 --> 09:43:20.625
the data with outside sources.  
Up until this point, the only 

09:43:20.626 --> 09:43:25.947
way to do that is to integrate 
with big query and we love big 

09:43:25.948 --> 09:43:29.307
query but it may be more than 
what you need.  So I'm happy to 

09:43:29.308 --> 09:43:31.308
let you know that 

09:43:32.788 --> 09:43:34.618
we've built CSV export into our 
UI and now you can download 

09:43:34.619 --> 09:43:38.275
almost any report that you see 
with the click of a button in 

09:43:38.276 --> 09:43:41.368
the overflow menu.
   But CSV export is aggregates 

09:43:41.369 --> 09:43:45.652
only, so some of you may be 
interested in the raw underlying

09:43:45.653 --> 09:43:47.653
data and of course some of you 
are already integrated with big 

09:43:53.474 --> 09:43:54.451
query and are loving using it in
collaboration with data studio 

09:43:54.452 --> 09:43:58.494
so you're wondering what does 
project level mean for me.  I 

09:43:58.495 --> 09:43:59.543
want to show you, we've got you 
covered and project level data 

09:43:59.544 --> 09:44:03.457
is also available in big query 
and data studio, so you'll be 

09:44:03.458 --> 09:44:06.330
able to see and visualize 
project level data without any 

09:44:06.331 --> 09:44:10.051
telling of any kind.  You can 
just focus on customizing your 

09:44:10.675 --> 09:44:12.951
dashboard.  So let's take a look
at these  slides.

09:44:16.272 --> 09:44:18.272
Please switch to the demo.

09:44:20.647 --> 09:44:23.489
   Dr. 
   &gt;&gt; STEVE GANEM:  We'll pick 

09:44:23.490 --> 09:44:29.083
wrup we left off, and start with
access to your reporting data.  

09:44:29.084 --> 09:44:32.137
Access to reporting data, you 
download CSV.  First keep in 

09:44:32.138 --> 09:44:34.365
mind with CSV download is what 
you see whraw get, so the CSV 

09:44:36.024 --> 09:44:37.449
that you download will reflect 
the report you're looking at, 

09:44:37.450 --> 09:44:39.690
including the date range and the
filters that you have applied to

09:44:39.691 --> 09:44:44.576
it.  So in this case, if I want 
to download the metrics for my 

09:44:44.577 --> 09:44:46.431
dashboard for project level 
Analytics I'll remove the 

09:44:46.432 --> 09:44:48.432
filters that I had applied for 
the earlier part 

09:44:51.292 --> 09:44:53.292
of the demo

09:44:57.507 --> 09:44:59.507
and now just choose download 
CSV, that 

09:45:00.552 --> 09:45:02.572
finishes downloading and take a 
look at the data and it looks 

09:45:02.573 --> 09:45:06.272
like this.
   So we have the data you see 

09:45:06.273 --> 09:45:10.330
on the dash borksd a section for
each of the cards and the 

09:45:10.331 --> 09:45:12.789
metrics for every daivment you 
can copy this into a spreadsheet

09:45:12.790 --> 09:45:17.747
to continue your analysis, I've 
done that ahead of time because 

09:45:17.748 --> 09:45:21.399
I'm crafty like that, and you 
can see that my daily, weekly 

09:45:21.400 --> 09:45:23.239
and monthly active users are 
shown per Dale here in the 

09:45:23.240 --> 09:45:27.349
sheet, where I can do a one-off 
analysis.  I'll do one for 

09:45:27.350 --> 09:45:29.350
example here today.

09:45:31.437 --> 09:45:33.150
Sometimes people want to compute
dowmow which is the ratio of 

09:45:33.151 --> 09:45:35.383
daily active users to monthly 
active users, 

09:45:39.060 --> 09:45:41.720
this is a common proxy for 
stickiness in an app.  Maybe we 

09:45:41.721 --> 09:45:43.721
want to do a one-off here.

09:45:45.534 --> 09:45:47.534
We'll define

09:45:48.535 --> 09:45:50.571
DOWMOW say it's equally to daily
divided by monthly, apply that 

09:45:50.572 --> 09:45:52.572
down and 

09:45:56.690 --> 09:45:58.971
then graph it, I've done a 
one-off analysis where I can 

09:45:58.972 --> 09:46:01.830
give an answer to someone asking
for it or check the pulse on 

09:46:01.831 --> 09:46:04.283
some metric that I care about.
   This is your reporting data, 

09:46:04.284 --> 09:46:06.284
it's ago 

09:46:08.806 --> 09:46:11.687
galt as Mai said, there are some
tasks -- it's ago galt.  If you 

09:46:11.688 --> 09:46:13.688
wanted to combine your Analytics
user data with data you 

09:46:16.794 --> 09:46:18.833
collect independently like from 
a CRM data base you'll need 

09:46:18.834 --> 09:46:22.731
access to raw data.  Would he 
make that possible through our 

09:46:22.732 --> 09:46:25.010
integration with big query.  The
way you access big query, first 

09:46:26.646 --> 09:46:28.882
you have to link your Firebase 
project to big query, do you 

09:46:28.883 --> 09:46:32.679
that start with this gear, go to
your project setting and in the 

09:46:32.680 --> 09:46:34.502
integration section you'll find 
big query and you can link to 

09:46:34.503 --> 09:46:38.864
that product there.
   Once you do that, I'll head 

09:46:38.865 --> 09:46:43.972
over to big query to show you 
the result.  This is the big 

09:46:43.973 --> 09:46:47.642
query user interface for those 
you unfamiliar with it.  And big

09:46:47.643 --> 09:46:49.510
query for those of you 
unfamiliar with the product is 

09:46:49.511 --> 09:46:54.645
Google's tool for running 
super-fast queries over massive 

09:46:54.646 --> 09:46:59.564
datasets.  When I have linked 
any Firebase project to big 

09:46:59.565 --> 09:47:01.565
query, previously what that 
would do is actually create a 

09:47:03.254 --> 09:47:05.913
dataset for each app so I have 
highlighted the dataset for my 

09:47:05.914 --> 09:47:09.161
iOS app and the dataset for my 
Android app.  Going forward and 

09:47:09.162 --> 09:47:14.665
keeping with the team of project
level analytics, faib will 

09:47:14.666 --> 09:47:16.711
export its analytics data to a 
single project level dataset and

09:47:16.712 --> 09:47:20.805
all the data for those for all 
of your apps will be exported 

09:47:20.806 --> 09:47:23.634
into that single dataset.  This 
will make it much simpler to run

09:47:25.539 --> 09:47:27.385
queries across your apps and to 
join data from your project with

09:47:27.386 --> 09:47:29.386
external data.

09:47:31.492 --> 09:47:33.744
I'll run a quick query here just
to show you a simple example of 

09:47:33.745 --> 09:47:38.068
how it works.  This is a 
calendar of eempts broken down 

09:47:38.069 --> 09:47:39.897
by event name and platform and 
I'll run the query, it usually 

09:47:39.898 --> 09:47:43.164
just takes a second and there 
you go.  It's a count of 

09:47:43.165 --> 09:47:45.423
accounts for Android and if I 
scroll through you'll see the 

09:47:46.240 --> 09:47:48.290
iOS events as well.  Some of you
may not be looking for a 

09:47:49.520 --> 09:47:51.344
technical interface, you would 
rather have something more 

09:47:51.345 --> 09:47:53.345
visual to work with, but you 
still want to access your raw 

09:47:55.211 --> 09:47:56.432
data, that's where our 
integration with data studio 

09:47:56.433 --> 09:47:59.714
really shines.  It's additive on
top of this big query export.

09:48:03.382 --> 09:48:05.382
Product managers from data 
studio and 

09:48:06.590 --> 09:48:09.534
gaks for Google Analytics for 
Firebase have 

09:48:12.593 --> 09:48:14.636
created this set of two 
templates toll give you a quick 

09:48:14.637 --> 09:48:18.747
head start to analyzing your raw
data in a visual way.  Nothing 

09:48:18.748 --> 09:48:20.375
technical required here in our 
help center I can walk you 

09:48:20.376 --> 09:48:24.075
through just a series of clicks 
to get and you running and see 

09:48:24.076 --> 09:48:26.076
these visualizations for 
yourself.

09:48:26.729 --> 09:48:28.729
This is what our public demo 
project reporting looks like.

09:48:31.847 --> 09:48:33.492
And there's three pages full of 
curated reports that give you 

09:48:33.493 --> 09:48:35.493
insights 

09:48:36.546 --> 09:48:39.441
into your users, location, 
broken down by city,  language, 

09:48:39.442 --> 09:48:43.593
et cetera, filtererrable by 
platform, app, et cetera, and it

09:48:43.594 --> 09:48:45.594
goes much deeper than 

09:48:47.636 --> 09:48:49.429
this, and you can just make it 
your own.  You click the Ed it 

09:48:49.430 --> 09:48:52.121
button and you can start editing
the graphics, give it your own 

09:48:52.122 --> 09:48:54.364
branding, remove metrics rs add 
your own, you can click on any 

09:48:54.365 --> 09:48:59.468
control, change the dimension or
change the metric.  When you 

09:48:59.469 --> 09:49:01.515
have it looking just the way you
want it, you click share and you

09:49:01.516 --> 09:49:04.828
can share the report with any 
party that's interested in 

09:49:04.829 --> 09:49:06.829
seeing it, and it keeps up 

09:49:08.337 --> 09:49:10.337
to date as new data pipes into 
big query.

09:49:11.852 --> 09:49:13.694
So now we've talked about how 
project level Analytics will 

09:49:13.695 --> 09:49:17.361
change your report and go we've 
talked about how it also changes

09:49:17.362 --> 09:49:19.362
the way you get access to the 
underlying data.

09:49:19.816 --> 09:49:21.848
Now we'll Pivot and talk about 
some features which will change 

09:49:21.849 --> 09:49:25.326
the way developers work with 
Analytics.  Can we switch back 

09:49:25.327 --> 09:49:27.362
to the slides, please?

09:49:34.397 --> 09:49:37.250
   &gt;&gt; MAI LOWE:  We all know 
it's critical to have insights 

09:49:37.251 --> 09:49:40.910
into your user base, revenue, 
growth and so on, foundational 

09:49:40.911 --> 09:49:42.911
of course to have an app that's 
stable and actually works as you

09:49:47.630 --> 09:49:52.644
intend it to and we all know you
guys love Crashlytics, that's 

09:49:52.645 --> 09:49:56.106
why we're dmietd Crashlytics is 
now part of Firebase and the 

09:49:56.107 --> 09:49:58.755
crash reporter for Firebase.  
But if you thriekd Crashlytics 

09:49:58.756 --> 09:50:00.756
before, 

09:50:02.480 --> 09:50:04.480
just wailt, it gets even better 
with 

09:50:05.945 --> 09:50:07.945
Google Analytics for Firebase.

09:50:09.204 --> 09:50:11.204
We also know many of you guys 
love our 

09:50:13.064 --> 09:50:15.064
breadcrumbless feature, now 
being access 

09:50:17.386 --> 09:50:19.662
it in the it analytics base of 
the console.  We want to make 

09:50:19.663 --> 09:50:23.325
sure you have all the data you 
need at your fingertips when you

09:50:23.326 --> 09:50:26.179
need to troubleshoot.  Steve 
will show you in a second.

09:50:27.621 --> 09:50:30.098
Beyond understanding your 
crashes, you also want to know 

09:50:30.099 --> 09:50:33.921
how your releases are lapgd with
your users.  You want to know 

09:50:33.922 --> 09:50:35.929
the answers to questions like 
how is my latest release 

09:50:38.927 --> 09:50:40.927
affecting the it user experience
or how am I trending it release?

09:50:40.979 --> 09:50:42.805
Thus far we didn't have 
information for you.  So I'm 

09:50:42.806 --> 09:50:44.845
happy to show you that we have a
latest release report which was 

09:50:47.923 --> 09:50:49.774
inspired by the fabric report of
the same name and here we show 

09:50:49.775 --> 09:50:51.775
you how your latest builds are 
performing.

09:50:54.512 --> 09:50:55.934
And to make things easy for you,
if you have any issues around 

09:50:55.935 --> 09:51:00.276
stability in your latest 
release, we deep link you into 

09:51:00.277 --> 09:51:01.718
Crashlytics or crash reporting 
depending on what you're using 

09:51:01.719 --> 09:51:07.431
so you can be in the right place
to troubleshoot right away.

09:51:09.278 --> 09:51:11.318
Coming up we have a case study 
to bring these features to life 

09:51:11.319 --> 09:51:15.460
and center stage is actually an 
app that Steve built much let's 

09:51:15.461 --> 09:51:16.865
take a look.
   &gt;&gt; STEVE GANEM:  Before 

09:51:16.866 --> 09:51:20.999
coming to Google I was a 
lifelong game developer and one 

09:51:21.000 --> 09:51:25.758
of the last games I re:  leased 
was transworld endless skater.  

09:51:25.759 --> 09:51:27.759
Skate as we call is a 
skateboarding 

09:51:29.637 --> 09:51:31.637
take on the endless runner 
genre, 

09:51:33.360 --> 09:51:34.792
tracking my KPI and Crashlytics 
to track my stability much I 

09:51:34.793 --> 09:51:37.046
want to reiterate what Mai said,
we are so stoked to have 

09:51:38.469 --> 09:51:39.686
crashlytic as part of Firebase 
now, there's not a better tool 

09:51:39.687 --> 09:51:43.185
on the market to help monitor 
the stability of your app.

09:51:44.801 --> 09:51:46.439
Most crash reporting tools at 
least give you a list of issues 

09:51:46.440 --> 09:51:51.170
and number of users it's 
affecting and also will give you

09:51:51.171 --> 09:51:53.626
a call stack related to each 
issue.  But as we all know, call

09:51:53.627 --> 09:51:57.513
stacks aren't always enough to 
understand where a crash is 

09:51:57.514 --> 09:51:59.995
occurring or how to reproduce 
it.  For example, take a look at

09:51:59.996 --> 09:52:01.996
this crash 

09:52:03.432 --> 09:52:03.863
report, this issue shown in 
Crashlytics for my own app 

09:52:03.864 --> 09:52:05.868
Skate.  The issue I'm looking at
is identified 

09:52:09.934 --> 09:52:10.984
as an open GL rendering crash, 
the crash occurs at an open GL 

09:52:10.985 --> 09:52:12.985
driver, basically 

09:52:14.041 --> 09:52:15.670
some triangle somewhere caused a
crash.  Good luck trying to fix 

09:52:15.671 --> 09:52:17.671
that.

09:52:19.578 --> 09:52:21.819
If my own QA dprlz department 
had reported this, I would say 

09:52:21.820 --> 09:52:25.378
give me more info, what skater, 
what level, what screens the 

09:52:25.379 --> 09:52:26.603
user used before the crash 
occurred and then maybe you can 

09:52:26.604 --> 09:52:31.405
actually get started fixing it, 
and that's why I'm so excited 

09:52:31.406 --> 09:52:33.443
about the bread crumbs 
integration because that's 

09:52:33.444 --> 09:52:35.444
exactly the 

09:52:37.451 --> 09:52:37.528
sort of data you'll get, context
you'll get from having logged 

09:52:37.529 --> 09:52:39.664
analytics events already.  So 
you can see in this example 

09:52:39.665 --> 09:52:41.665
after 

09:52:43.377 --> 09:52:45.443
the sessions start this user 
logged a select content event, 

09:52:45.444 --> 09:52:49.355
identify the skater the user 
chose and then a level start 

09:52:49.356 --> 09:52:51.185
event at the start of the level 
which identifies that the user 

09:52:51.186 --> 09:52:54.439
started at the school level, 
they were not using the game pad

09:52:54.440 --> 09:52:56.440
or logged in, basically give me 
all this context about the 

09:52:57.747 --> 09:53:00.184
answers to the questions I might
otherwise ask.

09:53:02.056 --> 09:53:04.056
And so this changes how 
developers 

09:53:06.347 --> 09:53:07.783
think about analytics, now they 
want to log events because it 

09:53:07.784 --> 09:53:11.884
will help them do their job 
better on a daily basis F I'm an

09:53:11.885 --> 09:53:13.304
app dwoarp, I'm put these in 
there not necessarily because it

09:53:13.305 --> 09:53:17.365
will help the business person 
track success because r but 

09:53:17.366 --> 09:53:19.612
because it will help me fix bugs
when they occur, really excite 

09:53:19.613 --> 09:53:23.294
to go me to think it will change
the way developers work with 

09:53:23.295 --> 09:53:28.065
Analytics.  Crash report sg one 
way to examine the health of 

09:53:28.066 --> 09:53:29.690
your app, but latest release 
report we launched approaches 

09:53:29.691 --> 09:53:32.350
the problem from another 
direction.

09:53:36.469 --> 09:53:38.323
This is a screenshot of the 
latest release report for Skate 

09:53:38.324 --> 09:53:41.595
and it compares the stability 
and engagement of your latest 

09:53:41.596 --> 09:53:42.810
release compared to previous 
versions to make sure everything

09:53:42.811 --> 09:53:46.532
is looking good.  It might be 
that your app is just as stable 

09:53:46.533 --> 09:53:48.367
but people are spending a lot 
less time in it because you 

09:53:48.368 --> 09:53:50.368
messed up and this is a case 
study of when that 

09:53:55.289 --> 09:53:57.932
recently happened to me.  
Looking at the adoption charted,

09:53:57.933 --> 09:53:59.933
an area looks fishy.

09:54:02.652 --> 09:54:04.909
7 day period an app was rolled 
out and subsequently rolled 

09:54:04.910 --> 09:54:07.172
expwak a new one pushed back.  
That time period core ponds to a

09:54:08.783 --> 09:54:11.445
vacation I went on, right after 
releasing a new version of my 

09:54:11.446 --> 09:54:13.488
app, and I forgot to bring my 
work laptop, so I 

09:54:17.345 --> 09:54:19.345
couldn't fix it until I got back
from 

09:54:20.412 --> 09:54:22.412
vacation and it really stunk to 
do this 

09:54:23.927 --> 09:54:25.781
to my users, I wanted nothing 
northern fix but at least I 

09:54:25.782 --> 09:54:27.782
became aware of the problem 
right away and I discovered 

09:54:29.258 --> 09:54:31.090
actually using our own tool, 
latest release, no joke.  How 

09:54:31.091 --> 09:54:33.091
did I discover it?

09:54:34.156 --> 09:54:36.392
The previous version of my app 
users spending an average of 

09:54:36.393 --> 09:54:38.393
almost 9½ minutes playing the 
game each day and the new 

09:54:41.085 --> 09:54:43.752
version of my app that went down
to 27 seconds.  For those of you

09:54:43.753 --> 09:54:47.665
interested in the gorey details,
I had forgotten to associate my 

09:54:47.666 --> 09:54:49.666
expansion file with my APK 

09:54:51.129 --> 09:54:52.988
and it has all my game data in 
it so basically users were 

09:54:52.989 --> 09:54:57.080
update to go a new version of my
app that had no game data at 

09:54:57.081 --> 09:54:59.081
which point they would leave and
often uninstall.

09:55:00.970 --> 09:55:03.010
I fix it and I can see that the 
user engagement went up to 

09:55:03.011 --> 09:55:05.670
almost 14 minutes a day.  So I'm
happy to report that  Skate is 

09:55:08.557 --> 09:55:10.997
stable again and ready on make 
money.  Thank you.

09:55:12.828 --> 09:55:15.268
(laughter).
   So like with many games, 

09:55:15.269 --> 09:55:18.984
Skate monetizes using both in 
app purchases and in app 

09:55:18.985 --> 09:55:22.476
advertisements.  Next we'll talk
about some new features that 

09:55:22.477 --> 09:55:25.133
actually will change the way 
that you monetize your apps as 

09:55:25.134 --> 09:55:28.606
well.
   &gt;&gt; MAI LOWE:  Nowf you have 

09:55:28.607 --> 09:55:33.118
an idea of how to get both 
broader and deeper insights into

09:55:33.119 --> 09:55:35.119
yoor app, you know how to build 
something that's stable and 

09:55:35.970 --> 09:55:38.622
functions, so let's talk about 
the next step in some of your 

09:55:38.623 --> 09:55:42.938
journey which is how to make 
some revenue with your app.  Our

09:55:42.939 --> 09:55:44.939
app integration is a break 

09:55:46.847 --> 09:55:48.847
throughway -- AdMob integration.

09:55:50.545 --> 09:55:52.422
We included ads re:  new when we
launched as well as lifetime 

09:55:52.423 --> 09:55:56.079
value and campaign reporting in 
acquisitions card on the 

09:55:56.080 --> 09:55:57.739
dashboard, but at the time 
mediated revenue was missing and

09:55:57.740 --> 09:56:04.146
we know how helpful it is for 
you all to have it included.  

09:56:04.147 --> 09:56:06.042
Maybe some of you already heard 
this announced yesterday, the 

09:56:06.043 --> 09:56:10.344
launch of open bidding, but 
nonetheless I'm excited to let 

09:56:10.345 --> 09:56:12.190
you know that as of today you 
can see mediated revenue for 

09:56:12.191 --> 09:56:14.191
participating 

09:56:15.902 --> 09:56:17.363
ad networks as part of both 
revenue and lifetime value and 

09:56:17.364 --> 09:56:20.230
of course like everything else, 
also at the project level.

09:56:22.675 --> 09:56:25.535
And once you've begun monetizing
your app, you can really lean on

09:56:25.536 --> 09:56:29.416
your data to help you build the 
best possible ads experience for

09:56:29.417 --> 09:56:33.363
your users.  What does that 
mean?  Well, we've all been 

09:56:33.364 --> 09:56:35.364
there in an app 

09:56:36.829 --> 09:56:38.829
that has ads that are irrelevant
and 

09:56:39.907 --> 09:56:41.730
annoying and they distract you 
from what you've come to do, 

09:56:41.731 --> 09:56:44.248
it's really not good for 
anybody.  We want to help you 

09:56:44.249 --> 09:56:46.249
build the best possible ads 
experience for your users 

09:56:48.375 --> 09:56:50.802
because we want your users to 
discover new great content that 

09:56:50.803 --> 09:56:52.803
dliets them and we want the 
discovery to be seamless, 

09:56:55.275 --> 09:56:57.275
natural and organic and to make 
sense.

09:57:00.010 --> 09:57:01.842
Faib A/B testing launched -- 
fire basis A/B testing launched 

09:57:01.843 --> 09:57:05.765
last year, and this is the data 
driven way for you to make 

09:57:05.766 --> 09:57:07.620
decisions around what kinds of 
ads experience best for your  

09:57:07.621 --> 09:57:09.621
users.

09:57:11.324 --> 09:57:14.256
You optimize on AdMob revenue 
and totals revenue, in app 

09:57:14.257 --> 09:57:16.702
purchase and AdMob revenue.  The
beauty is it's a win-win 

09:57:18.371 --> 09:57:20.816
situation, your users have a 
better experience, they discover

09:57:20.817 --> 09:57:24.080
content that delights them and 
you make more revenue in the 

09:57:24.081 --> 09:57:27.337
process.
   But A/B testing isn't the 

09:57:27.338 --> 09:57:29.338
only way 

09:57:30.347 --> 09:57:32.911
you can maximize your earning 
potential.

09:57:35.975 --> 09:57:37.812
Predictions is in beta and it's 
one of the ways Google applies 

09:57:37.813 --> 09:57:41.944
machine learning to the wealth 
of your app data to bring you 

09:57:41.945 --> 09:57:43.377
meaningful insights and 
actionable calls so you can 

09:57:43.378 --> 09:57:46.862
groal your business.
   Your app event data is 

09:57:46.863 --> 09:57:49.118
analyzed to discover 
statistically significant 

09:57:50.342 --> 09:57:52.208
correlations between something 
like spend can other 

09:57:52.209 --> 09:57:56.510
characteristics of your users 
and your app.  And machine 

09:57:56.511 --> 09:57:58.511
learning is applied and 

09:57:59.582 --> 09:58:01.582
Firebase can target an audience 
deemed 

09:58:02.845 --> 09:58:04.089
most likely to spend either with
remote config or a push 

09:58:04.090 --> 09:58:07.864
notification.  Take note that 
machine learning is most 

09:58:07.865 --> 09:58:09.717
powerful when you have a high 
volume and high variety of 

09:58:09.718 --> 09:58:11.718
events that are important to 
your app.

09:58:14.835 --> 09:58:16.886
So the more meaningful and 
contextualized you instrument 

09:58:16.887 --> 09:58:19.966
your  app, the better machine 
learning can train the models 

09:58:19.967 --> 09:58:22.004
and the more helpful the results
will be for you and in this case

09:58:23.638 --> 09:58:26.332
maximizing revenue.
   All right.  Let's look at a 

09:58:26.333 --> 09:58:30.032
real life case study on 
visualize what all this means.  

09:58:30.033 --> 09:58:31.868
As you're trying to build the 
best possible ads experience and

09:58:31.869 --> 09:58:37.606
effectively monetize your app.  
Let's take a look.

09:58:38.647 --> 09:58:41.088
&gt;&gt; STEVE GANEM:  So Rockbite 
makes the hit game Deep Town 

09:58:41.089 --> 09:58:46.244
which I'm sure all of you have 
heard of already and in this 

09:58:46.245 --> 09:58:48.498
game you mine for metals and 
gems using robots with skills 

09:58:48.499 --> 09:58:50.499
and abilities.

09:58:51.551 --> 09:58:53.177
It has a deep skill tree and 
robust in game economy which 

09:58:53.178 --> 09:58:56.855
includes both items that you can
purchase with real money and 

09:58:56.856 --> 09:58:58.856
items that you can earn over 
time.

09:58:59.757 --> 09:59:01.815
Now, Rockbite wanted to optimize
their app for revenue like we 

09:59:01.816 --> 09:59:05.092
all do and this is a study of 
what they did and how it all 

09:59:05.093 --> 09:59:07.093
worked out.

09:59:08.380 --> 09:59:10.380
For some background, Rockbite's 
Deep 

09:59:11.834 --> 09:59:13.671
Town involves two type of in app
currency, crystals shown at the 

09:59:13.672 --> 09:59:16.969
top that you can buy with real 
money and there are chests which

09:59:16.970 --> 09:59:19.473
you can purchase with crystals. 
Previously the team at Rockbite 

09:59:19.474 --> 09:59:23.750
was doing experiments based on 
in-house heuristics for how to 

09:59:23.751 --> 09:59:26.407
organize this shop for each 
user, but all their experiments 

09:59:28.651 --> 09:59:30.651
were inconclusive.  Using a 
combination of Firebase 

09:59:33.180 --> 09:59:34.618
Predictions and remote 
configure,  however, they were 

09:59:34.619 --> 09:59:36.619
able to dynamically adjust the 
layout in the shop based on 

09:59:39.361 --> 09:59:41.583
users predicted behaviors, they 
tried and test the multiple 

09:59:41.584 --> 09:59:43.834
options but ultimately here is 
what worked for them, 

09:59:48.110 --> 09:59:50.922
if a user was predicted to not 
spend by Firebase Predictions, 

09:59:50.923 --> 09:59:52.991
they would show crystals at the 
top of their shop, which 

09:59:56.071 --> 09:59:58.532
again you can buy with real 
money.  The result was an 

09:59:58.533 --> 10:00:00.533
increase in 24% 

10:00:02.445 --> 10:00:04.905
revenue among nonspending users.
   Conversely, if a user was 

10:00:04.906 --> 10:00:10.049
predicted to spend, they would 
move chests which you can't buy 

10:00:10.050 --> 10:00:11.687
with real money to the top of 
the shop and put crystals which 

10:00:11.688 --> 10:00:13.688
you 

10:00:15.366 --> 10:00:17.366
can buy with real money 
underneath those.

10:00:19.930 --> 10:00:22.126
That celled revenue among this 
group by 25%.  Now, at first 

10:00:22.127 --> 10:00:24.924
glance, this may not seem 
intuitive to you, the user is 

10:00:26.190 --> 10:00:27.130
predicted to spend you might 
think that will you're going to 

10:00:27.131 --> 10:00:30.887
put the items that they can 
purchase at the top of the shop,

10:00:30.888 --> 10:00:32.748
but they tried and tested and 
this is ultimately what worked, 

10:00:32.749 --> 10:00:36.215
is it just goes to show you how 
important it is that you have 

10:00:36.216 --> 10:00:38.216
the ability to experiment 

10:00:40.120 --> 10:00:42.975
and measure because intuition is
great, but data is king.

10:00:44.646 --> 10:00:46.646
The C he O from Rockbite was 

10:00:49.197 --> 10:00:52.042
impressed -- CEO saying this 
faib predictions from remote 

10:00:52.043 --> 10:00:54.043
config gave us the power to 
target users based on their 

10:00:56.822 --> 10:00:58.640
predictive behavior and rapidly 
test different purchase flows in

10:00:58.641 --> 10:01:01.325
our bait appear.  Without 
Firebase we would not have 

10:01:03.193 --> 10:01:04.214
become profitable in today's 
competitive mobile gaming 

10:01:04.215 --> 10:01:07.141
industry.  Sounds like Deep Town
is in great 

10:01:10.439 --> 10:01:13.134
shape now, enviable position 
where your engagement and 

10:01:13.135 --> 10:01:15.135
conversion metrics are looking 
good and now they can focus on 

10:01:16.391 --> 10:01:19.648
acquiring the best users.
   &gt;&gt; MAI LOWE:  All right.  

10:01:19.649 --> 10:01:21.269
Let's move on to the last part 
of the journey we'll cover 

10:01:21.270 --> 10:01:25.390
today, which is to grow your 
users with high value users and 

10:01:25.391 --> 10:01:28.395
to make sure they keep coming 
back in your app.  First let's 

10:01:28.396 --> 10:01:31.626
tack Elm the problem of finding 
your high value users.  We all 

10:01:31.627 --> 10:01:34.090
know this is really difficult to
do.  Many businesses have 

10:01:34.091 --> 10:01:36.091
multiple efforts going on on 
this front and they often 

10:01:37.612 --> 10:01:41.097
increase in volume as your 
business matures.  Generally 

10:01:41.098 --> 10:01:43.098
speaking when you try to 

10:01:45.260 --> 10:01:47.522
find your high value users, you 
start by identifying an event or

10:01:47.523 --> 10:01:49.523
action that's important to you 
and mark that as a conversion.

10:01:53.673 --> 10:01:55.347
This unlocks attribution 
reporting and shows you what 

10:01:55.348 --> 10:01:57.348
will drove that user to 

10:01:59.065 --> 10:02:01.065
perform the action you've deem 
as high value.

10:02:02.355 --> 10:02:04.355
Thus far attribution reporting 
and 

10:02:07.287 --> 10:02:10.982
Analytics for Firebase has only 
included ad clicks as input.  

10:02:10.983 --> 10:02:12.983
It's hard to justify that only a
click 

10:02:14.047 --> 10:02:15.864
will credit an ad network or 
campaign with a conversion, 

10:02:15.865 --> 10:02:18.116
especially in our age of rich 
media where there's plenty of 

10:02:20.361 --> 10:02:23.864
mediums that may not neatly fall
into a  click-only model.

10:02:25.951 --> 10:02:28.614
I'm excited to anuns in the next
few weeks our view through 

10:02:28.615 --> 10:02:33.095
attribution feature will be made
publicly available, not only 

10:02:33.096 --> 10:02:35.096
look at click data to credit a 
conversion to source, medium and

10:02:36.595 --> 10:02:38.665
campaign but also impression 
data, so you can have multiple 

10:02:38.666 --> 10:02:40.666
lenses to judge your success by.

10:02:45.039 --> 10:02:49.543
   Building holistic unbiased 
and accurate attribution model 

10:02:49.544 --> 10:02:53.049
is one of the cornstones of 
Analytics product.  We 

10:02:53.050 --> 10:02:55.511
understand your need that you 
want all your advertising 

10:02:55.512 --> 10:02:57.973
efforts evaluated for 
effectiveness by one engine and 

10:03:00.653 --> 10:03:02.937
seeing the results side by side.
To address this need, we're 

10:03:02.938 --> 10:03:07.230
integrated with many different 
ad networks that we think you 

10:03:07.231 --> 10:03:09.231
would tap into as you continue 

10:03:10.530 --> 10:03:13.032
to build on and expand your 
growth efforts.  We've been 

10:03:13.033 --> 10:03:14.877
integrated with AdWords since 
our launch at IO two years ago 

10:03:14.878 --> 10:03:19.251
and a couple months ago we went 
to the public with our 

10:03:19.252 --> 10:03:21.252
integration with double click, 
and in addition to that, we're 

10:03:23.772 --> 10:03:25.772
also integrated with all of the 
major 

10:03:27.253 --> 10:03:30.331
third party ad networks that you
all use.  All right.  So the 

10:03:30.332 --> 10:03:32.569
last step once you've found 
these high value users is 

10:03:32.570 --> 10:03:35.433
figuring out how to get them to 
continually come back in your  

10:03:35.434 --> 10:03:37.434
app.

10:03:38.732 --> 10:03:41.021
So how do you do that?
   As some of you who have 

10:03:41.022 --> 10:03:43.022
already 

10:03:44.244 --> 10:03:46.244
linked faib

10:03:48.414 --> 10:03:50.414
Firebase and AdWords together, 
linked 

10:03:52.143 --> 10:03:55.645
so you can create campaigns that
target Firebase audiences.  Late

10:03:55.646 --> 10:03:58.733
last year we expanded on this 
integration.  We wanted to 

10:03:58.734 --> 10:04:00.734
leverage the rich audience 
builder functionality you've 

10:04:03.495 --> 10:04:06.336
come to love in our AdWords 
front front end.  We publicly  

10:04:06.337 --> 10:04:10.233
launched dynamic remarketing 
late last year, this sends raw 

10:04:10.234 --> 10:04:12.684
conversion and parameter data to
AdWords so that you can 

10:04:12.685 --> 10:04:17.605
customize and configure your 
audiences in the AdWords front 

10:04:17.606 --> 10:04:20.339
end for your marketing campaign 
purposes.  We're really excited 

10:04:20.340 --> 10:04:22.340
about this launch because I 
think it really show cases the 

10:04:24.655 --> 10:04:26.499
flexibility of our data and for 
us to have the ability to meet 

10:04:26.500 --> 10:04:31.034
you wherever you happen to be.
   All right.  That's it for 

10:04:31.035 --> 10:04:33.931
Steve and I.  Russ is going to 
come back and close us out.

10:04:36.957 --> 10:04:38.957
(applause)

10:04:40.074 --> 10:04:41.522
.
   &gt;&gt; RUSS KETCHUM:  Thanks, 

10:04:41.523 --> 10:04:44.194
Mai, thanks, Steve.  You guys 
covered a ton of ground today.

10:04:49.114 --> 10:04:51.114
We announced a fundamental 
change to 

10:04:52.996 --> 10:04:54.996
Google Analytics for Firebase 
that will 

10:04:56.689 --> 10:04:59.973
let all of you take a new 
approach to Google Analytics.  

10:04:59.974 --> 10:05:01.974
We saw it across our data export

10:05:03.045 --> 10:05:05.108
queries, big query, Crashlytics,
now enhanced with bread crumbs, 

10:05:05.109 --> 10:05:10.655
how you can leverage A/B testing
prediction all in service of 

10:05:10.656 --> 10:05:13.519
monetization and across growth 
and retention.

10:05:16.181 --> 10:05:19.067
With that, I want to thank you 
all for staying late, for coming

10:05:19.068 --> 10:05:22.133
out or for tuning into the live 
stream, we definitely want to 

10:05:22.134 --> 10:05:24.839
keep the conversation going.  To
do that, we would love for you 

10:05:24.840 --> 10:05:29.160
all to stop by the Firebase 
sandbox, just look for anyone in

10:05:29.161 --> 10:05:33.274
a yellow shirt, we also have a 
bunch of related sessions for 

10:05:33.275 --> 10:05:35.093
you to check out both the live 
one tomorrow and others on 

10:05:35.094 --> 10:05:36.753
YouTube now and we would of 
course love to hear your 

10:05:36.754 --> 10:05:40.633
feedback.  So with that, thanks 
again for coming and enjoy the 

10:05:40.634 --> 10:05:42.634
rest of IO.
   (applause).

10:05:46.708 --> 10:05:48.708
(The session concluded at

10:05:50.444 --> 10:05:52.444
6:09)

10:06:00.777 --> 10:06:02.195
.
   &gt;&gt; Thank you for joining this

10:06:02.196 --> 10:06:06.298
session.  Brand am bals dors 
will assist with directing you 

10:06:06.299 --> 10:06:08.556
through the designated exitsz.  
We'll be making room for those 

10:06:08.557 --> 10:06:11.868
who have registered for the next
session.  If you've registered 

10:06:11.869 --> 10:06:16.174
for the next session in this 
room, we ask that you please 

10:06:16.175 --> 10:06:19.061
clear the room and return via 
the registration line outside.  

10:06:19.062 --> 10:06:20.486
Thank you.
   &gt;&gt;

10:06:20.487 --> 10:06:21.525
&gt;&gt;
   &gt;&gt;

10:06:21.526 --> 10:06:22.358
&gt;&gt;
   &gt;&gt;

10:06:22.359 --> 10:06:23.385
&gt;&gt;
   &gt;&gt;

10:06:23.386 --> 10:06:25.386
&gt;&gt;

10:06:26.612 --> 10:06:28.612
&gt;&gt; 

10:10:41.497 --> 10:10:43.497
&gt;&gt;
   &gt;&gt;

10:10:43.822 --> 10:10:45.822
&gt;&gt;

10:10:51.630 --> 10:10:53.630
Realtime Captioning on this 
screen

10:17:52.833 --> 10:17:54.833
.

10:22:11.508 --> 10:22:14.598
   &gt;&gt; Welcome.  Please fill in 
the seats near the front of the 

10:22:14.599 --> 10:22:16.897
room.  Thank you.

10:26:14.925 --> 10:26:19.442
   &gt;&gt; Good evening, everyone, 
welcome, I hope you're having a 

10:26:19.443 --> 10:26:21.443
great time at Google IO so far.

10:26:25.255 --> 10:26:27.327
I'm Avnish Midthuri, I'm a 
product manager at Google.

10:26:28.982 --> 10:26:30.982
&gt;&gt; TONY CHEN:  I'm Tony Chen, 

10:26:33.226 --> 10:26:35.226
software jerks also working

10:26:37.241 --> 10:26:39.241
soft software engineer also 
working on Google Play.

10:26:39.685 --> 10:26:41.114
&gt;&gt; AVNISH MIDUTHURI:  I'm sure a
lot of you here are already 

10:26:41.115 --> 10:26:44.389
excited about the potential for 
e-commerce and rightly so.  In 

10:26:44.390 --> 10:26:46.390
the U.S.

10:26:48.317 --> 10:26:51.172
alone in 2017, retail sales near
half a trillion dollars with the

10:26:51.173 --> 10:26:56.111
highest year on year growth in 
the last six years.  We're 

10:26:56.112 --> 10:26:58.112
seeing similar growth trends 
globally.

10:27:04.943 --> 10:27:07.007
   But this growth is happening 
DES spite the fact that online 

10:27:07.008 --> 10:27:10.488
con verges haven't really 
improved, conversions across 

10:27:10.489 --> 10:27:12.572
desktop and mobile devices has 
been large the flat over the 

10:27:12.573 --> 10:27:14.617
last couple of years.

10:27:17.887 --> 10:27:19.328
Thinlts hard to see that carted 
abandonment during checkout is 

10:27:19.329 --> 10:27:23.882
one of the liegd causes, when 
users go to check out online, 

10:27:23.883 --> 10:27:28.192
they see long checkout forms, 15
plus form fields to enter their 

10:27:28.193 --> 10:27:30.669
card information, billing 
address, their shipping address,

10:27:30.670 --> 10:27:33.791
log-ins, passwords, and the list
goes on.

10:27:35.814 --> 10:27:37.681
When users see all these forms, 
it's not surprise that go they 

10:27:37.682 --> 10:27:42.445
drop off, especially when 
they're in a low speed data 

10:27:42.446 --> 10:27:44.288
connection on mobile devices.  
So we think there's a huge 

10:27:44.289 --> 10:27:46.289
opportunity here to really 
improve online checkout.

10:27:49.874 --> 10:27:51.874
That's what we hope to do with 
Google pay.

10:27:54.830 --> 10:27:56.864
Thereto start of this year we 
uniif -- the start of this year 

10:27:56.865 --> 10:27:59.730
we unified our checkout process 
across all of Google 

10:28:02.814 --> 10:28:05.458
under a single brand, Google 
pay.  Vision for Google pay is 

10:28:05.459 --> 10:28:09.208
to enable users everywhere to 
pay with their Google account 

10:28:09.209 --> 10:28:12.096
anywhere they're signed in.  
Google Pay is more than just an 

10:28:12.097 --> 10:28:16.824
app on a device or a button on a
website.  We're building it as a

10:28:16.825 --> 10:28:21.594
platform integrated as a core 
part of a user's Google account 

10:28:21.595 --> 10:28:26.090
and available to them everywhere
they're signed in to Google.

10:28:28.113 --> 10:28:29.971
In this session we'll spend some
time to share some of the 

10:28:29.972 --> 10:28:34.710
changes we've made over the last
year as we've launched Google 

10:28:34.711 --> 10:28:37.144
pay and talk about how you can 
implement the Google pay API and

10:28:37.145 --> 10:28:39.145
share 

10:28:40.637 --> 10:28:45.121
product enhance mghts coming up.
   A few years ago we launched 

10:28:45.122 --> 10:28:47.820
Android Pay and started our 
journey with 

10:28:51.699 --> 10:28:54.165
enabling easy in app can 
payments using cards users 

10:28:54.166 --> 10:28:56.166
provisioned on the device.  We 
launched the feature in 12 

10:28:59.111 --> 10:29:00.617
countries and saw great adoption
from thousands of developers but

10:29:00.618 --> 10:29:04.886
we heard from you our developers
that you wanted more, you wanted

10:29:04.887 --> 10:29:06.887
access to many more 

10:29:08.005 --> 10:29:09.841
users paying with more payment 
methods and in several more 

10:29:09.842 --> 10:29:14.131
countries.
   So we went back to the 

10:29:14.132 --> 10:29:16.132
strengths of 

10:29:17.593 --> 10:29:19.593
Google, our billions of users 
across 

10:29:20.924 --> 10:29:23.166
multiple popular products around
the world.  Our users have saved

10:29:23.167 --> 10:29:27.522
hundreds of millions of cards to
their Google accounts, making 

10:29:27.523 --> 10:29:29.523
purchases on apps like 

10:29:31.167 --> 10:29:33.886
the play store accident, 
YouTube, even shock being the 

10:29:33.887 --> 10:29:35.887
web using Chrome.

10:29:37.764 --> 10:29:39.988
Google Pay users can make 
payments with payment methods 

10:29:39.989 --> 10:29:43.879
stored in their Google account 
anywhere they're signed in, a 

10:29:43.880 --> 10:29:45.880
consistent and seamless 
experience.

10:29:48.273 --> 10:29:50.273
Google Pay is already the way 
users 

10:29:51.553 --> 10:29:53.552
pay cross Google, users see 
Google Pay today when they check

10:29:53.553 --> 10:29:56.073
out on the play store buying an 
app, renting a movie, or 

10:29:59.442 --> 10:30:01.442
just on Chrome auto filling a  
checkout form.

10:30:03.928 --> 10:30:05.928
Not only is Google Pay present 
when 

10:30:06.986 --> 10:30:08.986
users buy from Google, but it's 
also 

10:30:10.050 --> 10:30:11.886
being incorporated into several 
new services for transactions 

10:30:11.887 --> 10:30:16.382
that users can make with third 
party merchants.  For instance, 

10:30:16.383 --> 10:30:18.861
you'll see Google Pay powering 
checkout promotion experiences 

10:30:20.686 --> 10:30:22.549
with Android messages former 
chants that have used rich 

10:30:22.550 --> 10:30:24.550
business messaging.

10:30:25.849 --> 10:30:27.849
And also from assist in enable 

10:30:29.127 --> 10:30:31.169
transactions with Google 
Assistant or on web actions.

10:30:37.529 --> 10:30:39.414
We've extended Google Pay API's 
to Google developers so users 

10:30:39.415 --> 10:30:41.415
can pay with their cards on 
their Google account when 

10:30:42.904 --> 10:30:44.312
they're on your sites or apps 
without any additional setup or 

10:30:44.313 --> 10:30:46.766
having to download a new app.

10:30:49.879 --> 10:30:51.928
We launched earlier this year 
with payments enabled on Android

10:30:51.929 --> 10:30:56.020
devices, both native apps and on
the mobile web using Chrome's 

10:30:56.021 --> 10:30:59.297
implementation of the payment 
request standard.  In the last 

10:30:59.298 --> 10:31:01.298
few months, we've already seen 
great adoption from several 

10:31:03.950 --> 10:31:06.929
developers around the world.  
Take a look.  Users can already 

10:31:06.930 --> 10:31:08.930
use Google Pay on a 

10:31:10.956 --> 10:31:13.416
range of measure chantsz to 
sites, retail sites, travel, 

10:31:13.417 --> 10:31:18.295
transportation sh ridesharing 
and many more.  If you have 

10:31:18.296 --> 10:31:20.296
merchants live across the world 
from the U.S.

10:31:25.240 --> 10:31:27.240
, Brazil, Russia,  UK, 
Australia, Japan and many more.

10:31:28.938 --> 10:31:30.365
Merchants with a global user 
base can enable Google Pay for 

10:31:30.366 --> 10:31:32.844
all their users with a single 
API integration.

10:31:38.370 --> 10:31:41.263
For instance, a leading order 
ahead app deliver U launched 

10:31:41.264 --> 10:31:46.179
Google pail in over 12 markets 
and Uber is rolling out Google 

10:31:46.180 --> 10:31:48.180
Pay for all their users globally
cht.

10:31:48.238 --> 10:31:50.472
Early developers have seen great
results from their integration 

10:31:50.473 --> 10:31:52.473
says.

10:31:54.433 --> 10:31:56.433
Franches

10:31:59.504 --> 10:32:01.989
For example, HotelTonight 
converted of 5% thanks to easy 

10:32:01.990 --> 10:32:03.990
payment experience.

10:32:05.442 --> 10:32:07.483
As I mentioned earlier, on you 
newer Google Pay APIs enable 

10:32:07.484 --> 10:32:09.484
many more users to pay with all 
their cards in the 

10:32:12.552 --> 10:32:14.376
Google account so when stub hub 
updated from Android pay they 

10:32:14.377 --> 10:32:19.021
saw a 7X increase in the number 
of unique users paying with 

10:32:19.022 --> 10:32:21.022
Google Pay

10:32:23.271 --> 10:32:25.742
.  When Airbnb updated they saw 
an 11X increase in daily 

10:32:25.743 --> 10:32:27.743
transactions from Google Pay.

10:32:29.241 --> 10:32:31.481
Our APIs also enable merchants 
to build streamlined onboarding 

10:32:31.482 --> 10:32:33.482
experiences for their users.

10:32:36.662 --> 10:32:38.746
For example, new Airbnb users 
when they set up the app can 

10:32:38.747 --> 10:32:43.283
completely skip the payment 
method setup flow and complete a

10:32:43.284 --> 10:32:45.515
booking with Google Pay without 
ever having to enter any payment

10:32:48.785 --> 10:32:50.785
information or billing 
addresses.

10:32:56.377 --> 10:32:58.058
We're now taking a huge step to 
make Google Pay available to 

10:32:58.059 --> 10:33:02.017
many users on the web, last week
we announced it's available as 

10:33:02.018 --> 10:33:04.864
cross the web, from Android to 
desktop and yes even on iOS 

10:33:04.865 --> 10:33:06.865
devices.

10:33:07.946 --> 10:33:10.413
Through one integration with our
JavaScript libraries, merchants 

10:33:10.414 --> 10:33:14.952
can enable Google Pay globally 
available to all your users, 

10:33:14.953 --> 10:33:18.063
regardless of what dwiels or 
browser they're shopping on.

10:33:19.510 --> 10:33:21.510
-- what device or browser 
they're shopping on.

10:33:26.008 --> 10:33:28.008
We've also focus odd making our 
APIs

10:33:31.176 --> 10:33:35.727
focused on making the making (?
).  Reported it took one of 

10:33:35.728 --> 10:33:38.796
their developers a week to 
enable and launch Google Pay.

10:33:41.437 --> 10:33:45.524
   &gt;&gt; In queepg our mission to 
make inltd graitions as simple 

10:33:45.525 --> 10:33:47.525
as possible, we've also 
partnered with leading 

10:33:49.435 --> 10:33:52.310
e-commerce platforms to make 
accepting Google Pay on the web 

10:33:52.311 --> 10:33:56.826
even simpler.  For instance f 
you're a in Shopify merchant, 

10:33:56.827 --> 10:33:58.827
all you have to do is go to your
merchant setting page in the 

10:34:01.736 --> 10:34:04.240
payment provider section and 
with a single click you can 

10:34:04.241 --> 10:34:06.900
enable Google Pay.  Shopify 
launched a few weeks ago, in 

10:34:08.948 --> 10:34:10.948
that time we've already seen 
tens of 

10:34:12.656 --> 10:34:14.749
thousands of merchants enable 
Google Pay.  Finally we 

10:34:14.750 --> 10:34:16.750
partnered with several leading 
payment providers, gateways and 

10:34:19.321 --> 10:34:21.364
processors around the world to 
enhance security and make it 

10:34:21.365 --> 10:34:23.621
easy for their merchants to add 
Google Pay.

10:34:25.684 --> 10:34:28.545
These providers have already 
enabled Google Pay in their 

10:34:28.546 --> 10:34:33.235
SDK's and merchant solutions and
we have many more coming soon.  

10:34:33.236 --> 10:34:35.061
To show you now how Google Pay 
work on the web and how you can 

10:34:35.062 --> 10:34:38.794
integrate the Google Pay APIs, 
I'll hand it over to Tony.

10:34:40.080 --> 10:34:42.759
&gt;&gt; TONY CHEN:  Thank you, 
Avnish.  Can you switch to my 

10:34:42.760 --> 10:34:47.695
iPhone please?  So I can't 
really walk very far with this. 

10:34:47.696 --> 10:34:48.944
So I'm going on quickly walk you
through what the web experience 

10:34:48.945 --> 10:34:52.548
is going to be like.  I'm on a 
merchant site right now, I'll 

10:34:54.173 --> 10:34:56.173
buy something and check out with
Google Pay.

10:34:58.883 --> 10:35:01.466
As you all know, moarpz day is 
coming up and I haven't bought 

10:35:01.467 --> 10:35:03.938
anything for my mom yet.  As Fay
father of two, I would normally 

10:35:05.618 --> 10:35:07.249
try to buy something for my wife
first but every time I try to 

10:35:07.250 --> 10:35:09.705
pick out clothes for her, 
somehow they always end up 

10:35:11.122 --> 10:35:13.600
getting returned.
   So I think my mom will 

10:35:13.601 --> 10:35:18.327
appreciate this nice green 
sweater, so I'll go ahead and 

10:35:18.328 --> 10:35:20.328
add it to the cart.

10:35:21.638 --> 10:35:25.107
I'll click checkout and up pops 
a buy Google Pay button.

10:35:27.158 --> 10:35:29.840
I'll open this, this shows our 
payment sheet, our payment sheet

10:35:29.841 --> 10:35:34.133
shoarpz the available cards and 
shipping addresses associated 

10:35:34.134 --> 10:35:38.272
with the particular Google 
account.  If you happen to be 

10:35:38.273 --> 10:35:40.273
logged into more than one 
accounted, you can easily 

10:35:42.396 --> 10:35:46.090
technology it like so.  As you 
can see, this is a test account,

10:35:46.091 --> 10:35:48.167
so there aren't any cards set 
up.  I'll go ahead and switch it

10:35:48.168 --> 10:35:50.168
back, so I 

10:35:51.632 --> 10:35:54.510
can easily check out.
   I'll ship this to my mom, so 

10:35:54.511 --> 10:35:57.779
I need to add her shipping 
address.

10:35:59.421 --> 10:36:02.288
Sometimes I really have a tough 
time remembering exactly what my

10:36:02.289 --> 10:36:05.362
mom's shipping address is.  It's
a good thing that Google Pay 

10:36:07.237 --> 10:36:09.498
shows auto fill suggestions from
the Google Maps API to make even

10:36:09.499 --> 10:36:13.388
filling out this form 
super-simple.  Now that I'm 

10:36:13.389 --> 10:36:15.389
done, I'm just going to go ahead
and click the continue button 

10:36:18.561 --> 10:36:20.561
and now we've just made a 
purchase.

10:36:27.371 --> 10:36:30.053
   Google Pay also remember the 
last selected card and shipping 

10:36:30.054 --> 10:36:32.054
address to make your next 
checkout easier.

10:36:36.413 --> 10:36:38.891
For example, if I open up the 
payments sheet again, you'll now

10:36:38.892 --> 10:36:42.828
see that my mom's shipping 
address is now the default.  

10:36:42.829 --> 10:36:45.723
Users will see the same 
consistent user experience 

10:36:45.724 --> 10:36:47.724
across all major browser 

10:36:49.256 --> 10:36:51.256
platforms, such as safari, 
Firefox and 

10:36:52.579 --> 10:36:57.495
coming soon Microsoft Edge.
   One other thing to note is 

10:36:57.496 --> 10:37:01.593
that this merchant page even 
though we built this just for 

10:37:01.594 --> 10:37:03.594
IO, we'll actually release this 
to the public and to all of you 

10:37:04.901 --> 10:37:06.948
developers so you can play 
around with our APIs without 

10:37:06.949 --> 10:37:08.949
first having to integrate.

10:37:10.252 --> 10:37:11.091
We built this nifty little 
developer console on the top 

10:37:11.092 --> 10:37:15.373
right.  There's a little bug 
little icon and you can easily 

10:37:15.374 --> 10:37:17.374
manipulate the request.

10:37:18.887 --> 10:37:21.743
So for example, if I wanted to 
not collect shipping address for

10:37:21.744 --> 10:37:23.744
whatever 

10:37:25.815 --> 10:37:28.255
reason, I can change this to 
false and if I for some reason 

10:37:28.256 --> 10:37:31.105
can't support all available 
Cornett works, I'll easily 

10:37:32.959 --> 10:37:34.959
remove one like so and then I'll
click 

10:37:36.658 --> 10:37:38.285
on the Google Pay button, and 
now you'll see that the shipping

10:37:38.286 --> 10:37:42.582
address is no longer available 
and my previously selected Visa 

10:37:42.583 --> 10:37:44.583
card is no longer accepted.

10:37:46.287 --> 10:37:49.581
   Can you switch back to the 
slides, please.

10:37:59.484 --> 10:38:03.560
For that test site you just saw 
go to G/co/demo.  Nowf let me 

10:38:03.561 --> 10:38:05.817
walk you through how easy it is 
to integrate with the Google Pay

10:38:06.005 --> 10:38:10.361
API.  With these four simple 
steps, you can enable the same 

10:38:10.362 --> 10:38:14.448
payment snearns I just showed 
you for all Google users.  The 

10:38:14.449 --> 10:38:16.906
four steps are as follows.  
You'll download some Java 

10:38:16.907 --> 10:38:21.279
scripted, check if the user is 
on a supported browser, add the 

10:38:21.280 --> 10:38:23.280
Google Pay button and 

10:38:26.217 --> 10:38:28.478
then open up our payments sheet.
First you'll add the script tag 

10:38:28.479 --> 10:38:31.741
to your site, as soon as the 
script is loaded, you construct 

10:38:31.742 --> 10:38:35.435
the payments client object by 
passing it in an environment 

10:38:35.436 --> 10:38:38.486
field.  We support two 
environment fields, test and 

10:38:38.487 --> 10:38:41.525
production.
   In environment test, you 

10:38:41.526 --> 10:38:44.391
don't have to register with us. 
You can actually play around 

10:38:44.392 --> 10:38:48.913
with the APIs yourself and 
integrate into your site.  In 

10:38:48.914 --> 10:38:50.914
environment test we do show the 

10:38:52.823 --> 10:38:54.823
users real data.  However, 
whenever they make it a 

10:38:56.544 --> 10:38:59.008
selection, we actual return you 
a fake token.  If you're 

10:38:59.009 --> 10:39:00.652
integrating with one of our 
supported processors, we'll 

10:39:00.653 --> 10:39:04.941
actually return you a token that
you can actually charge in their

10:39:04.942 --> 10:39:06.942
test environment.  Once you 
complete the integration and 

10:39:09.472 --> 10:39:11.761
you're ready on handle real 
payment, come register with us 

10:39:11.762 --> 10:39:14.016
through our self-service portal 
and then flip the environment to

10:39:14.017 --> 10:39:16.017
production.

10:39:19.723 --> 10:39:21.723
Now that you have the payment 
coin 

10:39:23.414 --> 10:39:25.414
constructed, first API you'll 
call is is 

10:39:26.479 --> 10:39:27.911
ready on pay, tells you whether 
the user is on a supported 

10:39:27.912 --> 10:39:32.084
browse error not.  At Google we 
really focus on optimizing for 

10:39:32.085 --> 10:39:34.937
conversion so rather than you 
showing yet another payment 

10:39:34.938 --> 10:39:38.411
option, we should only show 
Google Pay if you think it will 

10:39:38.412 --> 10:39:40.412
help improve your checkout 
experience.

10:39:42.743 --> 10:39:44.380
So if is ready to pay returns 
false, don't render the Google 

10:39:44.381 --> 10:39:46.623
Pay button.
   In the near future, we're 

10:39:46.624 --> 10:39:51.801
going on make an en lancement to
the is ready to pay API so you 

10:39:51.802 --> 10:39:53.802
can ask for ready to pay Google 
users with an existing payment 

10:39:54.483 --> 10:39:57.772
method.
   Now that you know that the 

10:39:57.773 --> 10:40:01.888
user is ready for making a 
payment, you're going to call 

10:40:01.889 --> 10:40:03.889
our second API, create button.

10:40:05.850 --> 10:40:07.850
Create button returns a simple 
HTML 

10:40:10.551 --> 10:40:13.241
element that you can append to 
the  dom of your site.  We 

10:40:13.242 --> 10:40:15.311
recommend you should call this 
piel over constructing your own 

10:40:15.312 --> 10:40:18.848
button with static assets so you
can take advantage to you athe 

10:40:18.849 --> 10:40:21.507
improvement we make to the 
button over  time.  For example,

10:40:21.508 --> 10:40:23.790
in the near future we're going 
on automatically translate the 

10:40:27.288 --> 10:40:28.316
button tolt users' locale in 
order to improve click through 

10:40:28.317 --> 10:40:30.317
raitle.

10:40:34.045 --> 10:40:35.669
Another thing we recommend is 
that you should use our default 

10:40:35.670 --> 10:40:37.670
color which is black.  However, 
if you happen to have a site 

10:40:39.577 --> 10:40:42.057
with a dark theme, we provide an
alternate White color that you 

10:40:42.058 --> 10:40:44.058
can use.

10:40:46.372 --> 10:40:48.372
The minimum that you need to 
pass 

10:40:49.458 --> 10:40:52.750
this create button API is this 
click event listener function.  

10:40:52.751 --> 10:40:54.751
So once you add the button to 
your 

10:40:56.637 --> 10:40:58.511
site, the user clicks on the 
button, you're going to have to 

10:40:58.512 --> 10:41:02.863
call -- you're going to call or 
load payment data to actually 

10:41:02.864 --> 10:41:04.507
open up the payments sheet.  The
first thing you're going to do 

10:41:04.508 --> 10:41:08.422
is construct this payment data 
request object, which is just a 

10:41:08.423 --> 10:41:10.869
set of payment configuration 
used for this particular  

10:41:10.870 --> 10:41:14.787
transaction.  For example, if 
you need to collect a full 

10:41:14.788 --> 10:41:17.234
billing address because you want
to do an ABS check or to collect

10:41:17.235 --> 10:41:21.753
a phone number so that you can 
contact a user, you can easily 

10:41:21.754 --> 10:41:24.211
configure it like so.
   We highly recommend that you 

10:41:24.212 --> 10:41:29.174
collect as little information as
necessary from the user as we've

10:41:29.175 --> 10:41:31.175
seen conversion rates tend to 
drop whenever you ask the user 

10:41:32.078 --> 10:41:35.611
for additional information.
   One other thing to call out 

10:41:35.612 --> 10:41:39.317
in this request object is this 
payment method tokennization 

10:41:39.318 --> 10:41:44.070
parameters.  This object may 
have a long name but all it is 

10:41:44.071 --> 10:41:46.071
is a set of key value pairs that
we're going to forward to your 

10:41:47.773 --> 10:41:49.773
processor, so be sure to check 
your 

10:41:50.843 --> 10:41:52.652
processor's integration 
guidelines to find out what they

10:41:52.653 --> 10:41:57.619
need from us.
   Now that you constructed the 

10:41:57.620 --> 10:42:01.520
request object, you're going to 
pass it to load payment data, 

10:42:01.521 --> 10:42:03.985
that's going to open up our 
payment sheet, the user is going

10:42:03.986 --> 10:42:07.858
to make a selection, and we're 
going to return to you a payment

10:42:07.859 --> 10:42:09.859
data object.

10:42:11.164 --> 10:42:13.250
The payment data object consists
of metadata about the user 

10:42:13.251 --> 10:42:16.743
selection so that you can use it
to render the order confirmation

10:42:16.744 --> 10:42:20.237
screen.  Also within the payment
data object is this payment 

10:42:20.238 --> 10:42:23.997
method token.  The payment 
method token is what you're 

10:42:23.998 --> 10:42:25.866
going to actually use to 
complete the transaction by pass

10:42:25.867 --> 10:42:28.121
it go to the processor.

10:42:31.591 --> 10:42:32.826
One thing to know is that 
security is already baked into 

10:42:32.827 --> 10:42:37.749
our product.  Our payments sheet
is always opened within a 

10:42:37.750 --> 10:42:39.750
separate popup window to 

10:42:40.883 --> 10:42:42.113
eliminate user clickjacking or 
any other security  

10:42:42.114 --> 10:42:47.487
vulnerabilities.  What that 
means is if the site happens to 

10:42:47.488 --> 10:42:49.544
be compromised, no malicious 
content can be overlaid onto our

10:42:49.545 --> 10:42:54.551
payments sheet so it won't 
confuse the user by obscuring 

10:42:54.552 --> 10:42:57.430
their data, what that means is 
Google user's datd is always 

10:42:57.431 --> 10:42:59.431
kept in 

10:43:00.705 --> 10:43:02.950
their control.
   So what that means for you as

10:43:02.951 --> 10:43:04.951
a 

10:43:06.032 --> 10:43:08.684
developer is that when the click
event happened, you must call 

10:43:08.685 --> 10:43:11.571
load payment data  
synchronously.  Don't make 

10:43:11.572 --> 10:43:14.046
network requests to the server 
or any other asynchronous calls 

10:43:16.102 --> 10:43:18.351
in order to avoid having the 
popup window blocked by the 

10:43:18.352 --> 10:43:23.099
user's browser.
   And that's our entire 

10:43:23.100 --> 10:43:27.006
integration.
   So it's super-simple.  I'm 

10:43:27.007 --> 10:43:29.477
going on prove to you how simple
it is by doing a live 

10:43:29.478 --> 10:43:34.206
implementation from scratch, and
all I'm going to do is basically

10:43:34.207 --> 10:43:35.888
copy and paste from the deck 
that I've already presented to 

10:43:35.889 --> 10:43:38.125
you to show the entire 
integration.

10:43:43.578 --> 10:43:46.285
Can we stwoich my pixel book 
switch to my pixel book, please?

10:43:48.047 --> 10:43:49.469
Remember folks this is a live 
implementation, there is a 

10:43:49.470 --> 10:43:51.470
pobilityd that things may not 
work.

10:43:53.149 --> 10:43:55.426
Just in case, I have this cheat 
sheet that may help me out, but 

10:43:55.427 --> 10:43:57.427
hopefully I won't need it.
   All right.

10:43:59.736 --> 10:44:02.390
So I'll do this implementation 
on JS Fiddle which allows me to 

10:44:02.391 --> 10:44:05.666
enter JavaScript on the fly and 
print out onto this result page 

10:44:05.667 --> 10:44:07.667
on the bottom right here.

10:44:10.616 --> 10:44:12.445
On the left we have HTML, 
JavaScript in the middle, CSS on

10:44:12.446 --> 10:44:17.345
the right.  We've already 
downloaded the scripted tag for 

10:44:17.346 --> 10:44:18.777
pay dot JS and already 
constructed the payments client 

10:44:18.778 --> 10:44:22.646
with environment test so I'm 
just going to expand the 

10:44:22.647 --> 10:44:24.647
JavaScript section a little 

10:44:28.618 --> 10:44:30.618
bit so you have more room to 
see, first 

10:44:32.325 --> 10:44:34.325
sthing we'll call is ready on 
pay.

10:44:37.034 --> 10:44:39.691
, returns a simple bouillon that
tells you whether the user is on

10:44:39.692 --> 10:44:41.908
a supported browse error not.  
So I'll print out the response 

10:44:41.909 --> 10:44:43.909
of is 

10:44:47.448 --> 10:44:49.448
ready to pay

10:44:56.306 --> 10:44:58.315
, I'll update the site rkts, 
it's taking a little time think 

10:44:58.316 --> 10:45:00.316
about 

10:45:04.662 --> 10:45:06.918
t I'll try it again, wow, this 
is -- let me try that.

10:45:16.305 --> 10:45:18.442
Are -- thawrks
   Thank you for catching that, 

10:45:18.443 --> 10:45:21.932
I changed this based on someone 
else's suggestion.  Thank you 

10:45:21.933 --> 10:45:23.933
for catching that.

10:45:25.472 --> 10:45:27.472
Let's print that out again.

10:45:29.346 --> 10:45:32.855
   All right.  Run it again.

10:45:36.095 --> 10:45:38.806
The result shows you that we're 
on a supported browser.  Next 

10:45:38.807 --> 10:45:40.807
thing we'll do is it call create
button.

10:45:42.698 --> 10:45:44.391
Create button returns a simple 
HTML element that we'll uses to 

10:45:44.392 --> 10:45:46.392
embed into 

10:45:49.438 --> 10:45:51.438
our site

10:45:54.631 --> 10:45:56.631
so I'll ald the append a button 
into 

10:45:58.449 --> 10:46:00.449
the site and then

10:46:02.022 --> 10:46:04.697
need to fill in this click list 
function which I'll leave blank 

10:46:04.698 --> 10:46:08.166
for now, updates again, and here
you go, here is our black Google

10:46:08.167 --> 10:46:11.686
Pay button.  By default as I 
mentioned, we always use the 

10:46:11.687 --> 10:46:16.454
black color.  However, if your 
site happens to have a dark 

10:46:16.455 --> 10:46:18.455
theme, you can easily change the

10:46:21.570 --> 10:46:23.211
button color to White like so, 
then you'll automatically get 

10:46:23.212 --> 10:46:25.212
this White button.

10:46:26.960 --> 10:46:28.397
If you're having to develop a 
responsive page or if you just 

10:46:28.398 --> 10:46:30.398
don't 

10:46:31.691 --> 10:46:33.746
have real estate and you need a 
narrower button, you can easily 

10:46:33.747 --> 10:46:37.651
change the button type to short 
to get a shorter but tofnl as I 

10:46:37.652 --> 10:46:40.491
mentioned earlier, you don't 
need to fill in any of this at 

10:46:40.492 --> 10:46:43.773
all, by default, we'll always 
use the black button and 

10:46:43.774 --> 10:46:45.869
standard size.
   Now we'll call payment data, 

10:46:45.870 --> 10:46:48.523
call load payment data by 
constructing this payment data 

10:46:48.524 --> 10:46:50.524
request.

10:46:53.213 --> 10:46:55.213
So I'll copy the request object 
from 

10:46:57.315 --> 10:46:59.315
these two slides, then I'll 
merge them 

10:47:03.876 --> 10:47:05.558
together, and then we're going 
to fill in, we're going to call 

10:47:05.559 --> 10:47:07.559
load payment 

10:47:08.640 --> 10:47:10.640
data on the button click event, 
which I 

10:47:13.388 --> 10:47:15.476
left empty, and then to show 
that everything is wired 

10:47:15.477 --> 10:47:17.477
together properly, I'm going to 
fill in this process 

10:47:22.069 --> 10:47:24.069
payment function.  So the 
process payment function is 

10:47:26.946 --> 10:47:28.946
going to take in our payment 
method 

10:47:30.023 --> 10:47:32.023
token and the token itself is a 
JSON object.

10:47:36.566 --> 10:47:38.859
So I'm going to call JSON dot 
stringafy so you can see the 

10:47:38.860 --> 10:47:40.860
content.  All right.  Here we 
go.

10:47:43.967 --> 10:47:46.639
One click, wait a little bit, 
click on the button, up pops the

10:47:46.640 --> 10:47:48.640
payment sheet, 

10:47:50.544 --> 10:47:52.399
you make a selection, this 
always seems to happen.  All 

10:47:52.400 --> 10:47:55.246
right.  Update again.

10:47:59.564 --> 10:48:01.606
It's going to work the second 
time.  We're we go.

10:48:05.329 --> 10:48:07.329
Here is the exact token onto the
result page.

10:48:07.944 --> 10:48:09.944
(applause).
   Thank you.

10:48:14.136 --> 10:48:15.578
Can we switch back to the 
slides, snrees super simple, you

10:48:15.579 --> 10:48:19.482
can complete the entire 
implementation within a matter 

10:48:19.483 --> 10:48:21.483
of minutes.

10:48:25.473 --> 10:48:30.202
   I just shared with you what 
we've been working on for the 

10:48:30.203 --> 10:48:32.871
past few months leading up to 
this launch.  I'll share with 

10:48:32.872 --> 10:48:34.921
you a couple things we'll be 
launching soon to enhance our 

10:48:36.554 --> 10:48:38.554
offering to both users and for 
you the developer.

10:48:38.608 --> 10:48:40.608
Let's start with the user 
experience first.

10:48:41.293 --> 10:48:43.298
As I mentioned before, we want 
to have the same consistent 

10:48:43.299 --> 10:48:47.788
payment experience for all major
browser platforms.  However, 

10:48:47.789 --> 10:48:51.688
we're going to try and optimize 
wherever we can.  So for the 

10:48:51.689 --> 10:48:53.746
browsers that support native UI,
such as Chrome with payment 

10:48:56.624 --> 10:48:58.680
request, we can offer this nice 
native payment sheet experience 

10:48:58.681 --> 10:49:00.681
on mobile websites.

10:49:03.381 --> 10:49:05.466
Sloo tr a popup window, this 
native sheet is impossible to 

10:49:05.467 --> 10:49:07.772
clickjack because the sheet 
itself is completely separated 

10:49:10.847 --> 10:49:13.077
and detached from the Chrome app
itself.  But unlike a popup 

10:49:13.078 --> 10:49:17.383
window, this payment sheet is a 
streamlined purchase experience 

10:49:17.384 --> 10:49:19.857
because it allows the user to 
stay in context of the payment 

10:49:19.858 --> 10:49:23.764
within your site.
   Soon we're going to be 

10:49:23.765 --> 10:49:29.077
expanding native support from 
mobile onto the desktop with the

10:49:29.078 --> 10:49:32.763
payment handler spec.
   So payment handler works by 

10:49:34.391 --> 10:49:36.391
installing service workers into 
the 

10:49:37.924 --> 10:49:40.078
users' browser.  A service 
worker is just a JavaScript 

10:49:41.300 --> 10:49:43.300
interface between our payments 
sheet and 

10:49:45.177 --> 10:49:47.225
the native UI in the browser.  
You don't really have to 

10:49:47.226 --> 10:49:50.489
understand what a service worker
is, nor do you really have to 

10:49:50.490 --> 10:49:52.490
understand what payment handler 
does because when you integrate 

10:49:55.181 --> 10:49:57.824
with the Google Pay API, all 
this will happen automatically. 

10:49:57.825 --> 10:49:59.825
We're going to do all the heavy 
lifting for you.

10:50:01.709 --> 10:50:03.373
So let me walk you through a 
quick  preview of what that's 

10:50:03.374 --> 10:50:06.464
going to look like on Chrome 
desktop.

10:50:08.702 --> 10:50:10.735
Can you switch me to my pixel 
book, please?

10:50:18.149 --> 10:50:19.780
We're on you're merchant page 
again.  This time when I click 

10:50:19.781 --> 10:50:24.493
on the Google Pay button, up 
pops our payment sheet within 

10:50:24.494 --> 10:50:26.494
this nice secure native frame.

10:50:27.572 --> 10:50:29.572
Very similar to the mobile 
experience, 

10:50:30.710 --> 10:50:33.792
this thing is  not -- you cannot
clickjack this.  Also because 

10:50:33.793 --> 10:50:35.617
it's embedded nicely into the 
popup window, you can tell that 

10:50:35.618 --> 10:50:40.337
it's part.  Same sheet.  It's 
native and secure, it's not part

10:50:41.361 --> 10:50:44.082
of the website because you can 
see that the native sheet itself

10:50:44.083 --> 10:50:47.771
is laid,  overlaid right on top 
of my tool bars.  So I'm going 

10:50:47.772 --> 10:50:50.629
to click continue just to show 
you that it works, and there we 

10:50:50.630 --> 10:50:54.728
go, we just completed payment 
with payment handler.

10:50:56.547 --> 10:51:00.914
Let's switch back to the slides,
please.

10:51:02.340 --> 10:51:04.998
So as you can see, we're going 
to always look for new ways to 

10:51:04.999 --> 10:51:06.999
improve our payment experience.

10:51:09.498 --> 10:51:11.348
Now, for developers, this 
payment handler example is a 

10:51:11.349 --> 10:51:13.349
great way to 

10:51:14.633 --> 10:51:16.683
showcase what our mantra is, 
which is we want to ensure that 

10:51:16.684 --> 10:51:20.181
you only have to integrate with 
the Google Pay API once and 

10:51:20.182 --> 10:51:22.257
after that you're going to be 
able to continuously benefit 

10:51:22.258 --> 10:51:25.577
from all the improvements that 
we make without you having to 

10:51:25.578 --> 10:51:27.578
change any parts of your 
integration.

10:51:28.839 --> 10:51:30.839
When you integrate on Android, 
for 

10:51:32.963 --> 10:51:34.963
example, we can make  updates 
through 

10:51:37.879 --> 10:51:40.940
the Google Pay services to the 2
billion Android devices.  This 

10:51:40.941 --> 10:51:43.671
has always limited us to client 
releases.  Now that we switched 

10:51:43.672 --> 10:51:45.722
to the web -- now that we 
launched on web and switched to 

10:51:48.166 --> 10:51:49.581
this new JSON interface, we're 
able to take advantage of the 

10:51:49.582 --> 10:51:52.459
continuous server pushes so that
we can bring new features 

10:51:56.780 --> 10:51:59.640
and improvements on a daily 
basis.  As we look to expand 

10:51:59.641 --> 10:52:03.776
Google Pay to additional 
surfaces, we want to bring the 

10:52:03.777 --> 10:52:06.214
same consistent unified 
integration experience for all 

10:52:06.215 --> 10:52:08.475
developers, so I'm happy to 
announce we're going to be 

10:52:11.126 --> 10:52:13.126
extending the same JSON 
interface and 

10:52:15.254 --> 10:52:16.476
bring it from the web to 
Android, AMP, actions on Google 

10:52:16.477 --> 10:52:18.534
and more.
   So let me walk you through a 

10:52:18.535 --> 10:52:22.014
couple of these examples by  
starting with accelerated mobile

10:52:22.015 --> 10:52:27.128
pages.
   Now we've seen tremendous 

10:52:27.129 --> 10:52:29.129
adoption of AMP from around the 
world.

10:52:34.303 --> 10:52:36.200
AMP by design is a restricted 
set of HTML with limited 

10:52:36.201 --> 10:52:38.839
JavaScript support.  By working 
cloarsly with the AMP team, 

10:52:40.877 --> 10:52:43.371
you'll soon be able to enable 
Google Pay by using these 

10:52:43.372 --> 10:52:46.274
standard AMP components, all you
need to do is drop in the same 

10:52:49.144 --> 10:52:50.974
JSON payload as you would to 
load payment data and easily 

10:52:50.975 --> 10:52:53.432
render Google Pay button within 
your AMP page.

10:52:57.600 --> 10:52:59.043
The button itself auto mactdly 
opens the payment sheet and 

10:52:59.044 --> 10:53:01.930
returning the payment token.  As
we all know, payments is no 

10:53:01.931 --> 10:53:03.931
longer 

10:53:05.838 --> 10:53:08.511
limited to just websites and 
native apps.  If you happen to 

10:53:08.512 --> 10:53:12.000
be collecting payments through 
Android messages or through the 

10:53:12.001 --> 10:53:14.691
Google Assistant, you'll soon be
able to also enable the same 

10:53:17.946 --> 10:53:21.000
Google Pay experience with the 
same JSON interface.  Consistent

10:53:21.001 --> 10:53:23.001
and easy to integrate on 

10:53:24.288 --> 10:53:26.753
all  surfaces, we're making 
Google Pay as easy to integrate 

10:53:26.754 --> 10:53:28.754
everywhere as it is 

10:53:30.594 --> 10:53:32.658
for users to pay everywhere.
   Now, if you're interested in 

10:53:32.659 --> 10:53:36.158
learning more about how to 
collect payments on Android 

10:53:36.159 --> 10:53:38.829
messages or through the Google 
Assistant, go find my buddy 

10:53:38.830 --> 10:53:43.513
Shawn who will be at the Google 
Assistant sandbox from 12:00 to 

10:53:43.514 --> 10:53:46.519
2:00 tomorrow.  All right,  
Avnish, take us home.

10:53:46.520 --> 10:53:50.413
&gt;&gt; AVNISH MIDUTHURI:  All right.
Thank you, Tony.

10:53:51.851 --> 10:53:53.710
So we've shared a lot of details
with you today about how you can

10:53:53.711 --> 10:53:57.406
add Google Pay to your site to 
improve conversion, we're 

10:53:57.407 --> 10:53:58.838
excited to see how you'll 
integrate.  We know there's a 

10:53:58.839 --> 10:54:00.926
lot of information out there, 
nicely integrated in two 

10:54:02.980 --> 10:54:04.822
websites there, there's one so 
you can learn about how Google 

10:54:04.823 --> 10:54:06.823
Pay can improve 

10:54:08.362 --> 10:54:10.362
things for your business overall
so that's g.

10:54:13.712 --> 10:54:16.180
co/pay/business, if you're ready
on start integrating, go into 

10:54:16.181 --> 10:54:19.656
your developer docs there.  Tony
and I will be available in our 

10:54:21.306 --> 10:54:23.368
sandbox after the session 
located in Dome G, please stop 

10:54:23.369 --> 10:54:26.619
by, ask questions, we'll also 
have members from the Google Pay

10:54:26.620 --> 10:54:28.650
team vainl tomorrow if you can't
make it today -- available 

10:54:28.651 --> 10:54:30.651
tomorrow if you can't make it 
today.

10:54:32.549 --> 10:54:34.549
So stop by, ask questions, try a
few demos out.

10:54:36.055 --> 10:54:37.897
We also if you want to learn 
more about Google Pay, we vawls 

10:54:37.898 --> 10:54:39.898
two more sessions tomorrow.

10:54:42.444 --> 10:54:45.286
First is led by our payments UX 
team.  Walks through design 

10:54:45.287 --> 10:54:47.347
principles, optimize conversion 
using Google Pay.

10:54:49.631 --> 10:54:51.631
And for learning about how you 
can 

10:54:53.122 --> 10:54:55.363
enables via the Assistant, check
out a section on adding 

10:54:55.364 --> 10:54:57.364
transactional capabilities to 
your actions tomorrow 

10:55:01.030 --> 10:55:05.455
afternoon, hosted bill by our 
assistant team.  Finally, a 

10:55:05.456 --> 10:55:07.269
hack-a-thon next month in San 
Francisco in June, you can sign 

10:55:07.270 --> 10:55:10.330
up at the link there or stop by 
at our sandbox if you want more 

10:55:10.331 --> 10:55:13.409
information.
   We host developer events 

10:55:13.410 --> 10:55:17.320
globally so if you would like to
see an event near you or if you 

10:55:17.321 --> 10:55:19.321
want to stay tuned for upcoming 
events, sign up for your 

10:55:20.835 --> 10:55:24.510
developer documentation and 
we'll keep you posted.

10:55:26.155 --> 10:55:28.155
And that's T thank you so much 
for attending.

10:55:31.042 --> 10:55:34.113
Enjoy the rest of Google I/O.  
Dr. 

10:55:40.428 --> 10:55:42.428
(The session ended at

10:55:44.758 --> 10:55:47.414
.
   (The session concluded at 

10:55:47.415 --> 10:55:49.415
6:59 p.m.

10:55:50.627 --> 10:55:52.627
)

