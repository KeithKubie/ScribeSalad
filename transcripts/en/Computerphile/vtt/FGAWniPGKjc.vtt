WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.250
I think it was a sort of major
achievement for UNIX, actually, that

00:00:04.250 --> 00:00:10.200
y' know its big claim to fame is:
... yes we (Dennis and Ken) we wrote the UNIX

00:00:10.200 --> 00:00:16.529
kernel in C. We had to have a few dozen
lines of assembler and maybe, somewhere

00:00:16.529 --> 00:00:22.380
in there, there's the odd sprinkling of
gotos --  and there's good excuses for it,

00:00:22.380 --> 00:00:25.460
sometimes, in the heart of an operating
system but they're, even then,

00:00:25.460 --> 00:00:30.090
massively reduced from what they would
have been. So, that was the whole thing:  we

00:00:30.090 --> 00:00:37.320
must eliminate gotos. You can call them
gotos, if you like, you can call them

00:00:37.320 --> 00:00:42.629
jumps; you can call them branches. All
essentially resolve into being the same

00:00:42.629 --> 00:00:49.320
thing. They ... and I think most of you - from
the education you're having already, or having

00:00:49.320 --> 00:00:54.710
seen previous Computerphile videos, will
know that gotos, branches, jumps etc are

00:00:54.710 --> 00:01:01.260
unavoidable at the assembly language
level. OK? That's the way that machines

00:01:01.260 --> 00:01:08.189
actually work. You tell them to `goto' a different
[next instruction] address. So what's wrong with

00:01:08.189 --> 00:01:11.790
incorporating that idea into
higher-level languages? Well, the argument

00:01:11.790 --> 00:01:17.390
was - and it's quite right - the problem
with the goto is that programmers never [seldom?!]

00:01:17.390 --> 00:01:23.460
adequately document alongside *why* they
are `going to' ...  A common construct, of

00:01:23.460 --> 00:01:27.600
course, is to have a go-to at the bottom
of a loop to jump back to the top. You

00:01:27.600 --> 00:01:31.560
check at the top whether you've
finished the loop or not. But in the end,

00:01:31.560 --> 00:01:35.189
when it's finished, you do another goto when 
you jump past it [i.e. the loop body] to the next

00:01:35.189 --> 00:01:38.549
instruction. A good assembler program
will put a little note in there saying

00:01:38.549 --> 00:01:45.000
`loop finished', or something like that, so
the argument is, well, that looping

00:01:45.000 --> 00:01:52.259
construct, in a higher-level language,
could be replaced by a `while'. And if that

00:01:52.259 --> 00:01:57.840
`while' is then compiled down into
assembler the gotos will be there, but

00:01:57.840 --> 00:02:02.159
when you consult back with the high-level 
language you know that it [the goto] was

00:02:02.159 --> 00:02:06.420
there because it's a `while' loop. And that
is, basically, what it comes down to. By

00:02:06.420 --> 00:02:10.899
using higher level constructs you make
your intentions plain.

00:02:10.899 --> 00:02:16.629
This enables me to kill two birds
with one stone! Some of you are getting

00:02:16.629 --> 00:02:21.909
very, very worried about unsolved Rubik
cubes. Now I left one here there's some

00:02:21.909 --> 00:02:25.120
unsolved in a particular way that I hope I
can do, in real time now, without

00:02:25.120 --> 00:02:32.319
embarrassing myself. This cube is
solvable with two operations called

00:02:32.319 --> 00:02:40.030
Goto monotwists. Goto is a very common
Japanese surname and I'm guessing that

00:02:40.030 --> 00:02:45.040
the Goto of Goto-monetwist fame must
have been a Japanese mathematician going

00:02:45.040 --> 00:02:49.810
way back to the early 1970s when I first got this 
from a set of notes [by David Singmaster] on how to

00:02:49.810 --> 00:02:53.680
solve the cube. It always amused me, and I
always delighted in doing it, because there

00:02:53.680 --> 00:02:57.760
is another Goto who was a
very famous Japanese computer

00:02:57.760 --> 00:03:02.409
scientist. And to everybody's great
amusement - in the 70s or 80s - he was at a

00:03:02.409 --> 00:03:08.500
conference saying: "You have no idea how
stressful it is to have the surname Goto

00:03:08.500 --> 00:03:14.579
and to be involved in high-level
programming language design and analysis"

00:03:14.579 --> 00:03:21.160
And people said: "But, Professor, why ... ? ".   He 
said: "People are always trying to eliminate me! 

00:03:21.160 --> 00:03:26.260
So, anyway, back to the gotos. [looks at cube]
I see that that one, and that one, are needing a

00:03:26.260 --> 00:03:32.260
twist - and you can get things that twist
on their own axis - but while leaving the

00:03:32.260 --> 00:03:36.579
rest of the cube unchanged - or `invariant'
as mathematicians like to call it. You

00:03:36.579 --> 00:03:40.900
can see that there's a sort of threefold
symmetry on these corners. You can do one

00:03:40.900 --> 00:03:44.230
twist, two twists and when you've done
three twists you're bound to be back to

00:03:44.230 --> 00:03:48.040
the same place. I can see from this one
that it's actually going to need a

00:03:48.040 --> 00:03:52.030
couple of these Goto monotwist operations 
[or one inverse monotwist], to get it to being perfectly

00:03:52.030 --> 00:03:58.840
right. And I hope I can do them without
goofing up. If you write ... if you post a

00:03:58.840 --> 00:04:02.530
comment on this please *don't* point out
that that this is heavily sub-optimal. Yes, I

00:04:02.530 --> 00:04:06.459
know! There's brilliant [ but non-Goto] ways to 
do it much more quickly I'm sure. So, I remember,

00:04:06.459 --> 00:04:14.760
in group theoretical notation, [using ' to denote 
"-1" i.e. an anti-clockwise move] it goes
something like R' D R F D F' U 

00:04:14.760 --> 00:04:29.050
F D' F' R' D' R U'

00:04:29.050 --> 00:04:34.630
That's progress! There's still two things that
are wrong but they now have exactly the

00:04:34.630 --> 00:04:40.720
same colour. And I know from my suboptimal
- but at least I can remember it (!) -

00:04:40.720 --> 00:04:43.960
algorithm, that another Goto monotwist, given

00:04:43.960 --> 00:04:48.160
they're both the same colour and provided
I don't goof up,  one more will get it

00:04:48.160 --> 00:05:15.699
right. So here we go: - R' D R F D F' U.  
F D' F' R' D' R U'. Yippeee!
Computer Scientists can do limited Group Theory

00:05:15.699 --> 00:05:20.229
if they try very hard!
But it's not enough trespassing on

00:05:20.229 --> 00:05:25.449
Numberphile territory. I cannot commit - and will not
commit to memory - the 

00:05:25.449 --> 00:05:30.099
something like 90 algorithms, I think,
that you've got to know, to be even moderately

00:05:30.099 --> 00:05:33.550
good at doing a cube really, really
quickly. I tend to try and remember about

00:05:33.550 --> 00:05:39.029
10 or 12 [algorithms] and accept that they're sub-
optimal - but I find them easier to remember!

