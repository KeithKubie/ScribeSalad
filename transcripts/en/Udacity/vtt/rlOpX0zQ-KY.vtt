WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:03.430
That brings us to a new coherence protocol,

00:00:03.430 --> 00:00:06.520
which is multiple writer protocol. So, the idea

00:00:06.520 --> 00:00:09.770
is we want to maintain coherence information still

00:00:09.770 --> 00:00:13.460
at the granularity of pages. Because that is

00:00:13.460 --> 00:00:16.970
the granularity at which the operating system operates,

00:00:16.970 --> 00:00:19.910
and therefore, the DSM can be integrated with

00:00:19.910 --> 00:00:23.140
the operating system if the granularity of the

00:00:23.140 --> 00:00:26.360
coherence maintenance is at the level of a page.

00:00:26.360 --> 00:00:29.010
But, at the same time, we want to allow

00:00:29.010 --> 00:00:31.820
multiple writers to be able to write to the

00:00:31.820 --> 00:00:36.080
same page, recognizing that an application programmer may have

00:00:36.080 --> 00:00:38.930
packed lots of different data structures within the same

00:00:38.930 --> 00:00:40.780
page. So we are going to see how the

00:00:40.780 --> 00:00:44.910
multiple writer coherence protocol works, and in particular we're

00:00:44.910 --> 00:00:47.430
going to use that in concert with these lazy

00:00:47.430 --> 00:00:51.667
release consistency. The background for what I'm going to describe

00:00:51.667 --> 00:00:53.935
is covered in the paper that is assigned for

00:00:53.935 --> 00:00:57.040
you, which is the Treadmarks paper. I encourage you

00:00:57.040 --> 00:00:59.700
to read that paper to get all the details.

00:00:59.700 --> 00:01:02.228
But here, I'm going to give you a high

00:01:02.228 --> 00:01:06.968
level view of how LRC is integrated with multiple writer protocol in the

00:01:06.968 --> 00:01:12.010
Treadmarks system. So the processor P1 acquires a lock and makes

00:01:12.010 --> 00:01:17.740
modifications. This notation that I'm using is to indicate that these pages,

00:01:17.740 --> 00:01:20.650
X, Y, and Z, actually they are data structures

00:01:20.650 --> 00:01:23.270
that are being modified, but we are maintaining coherence

00:01:23.270 --> 00:01:25.570
of the level of pages so we'll say that

00:01:25.570 --> 00:01:29.120
the data structures that we're modifying within this critical section

00:01:29.120 --> 00:01:31.650
are contained in pages X, Y and Z, and

00:01:31.650 --> 00:01:34.310
so those are the pages that are being modified within

00:01:34.310 --> 00:01:37.720
this critical section when processor P1 executes this piece

00:01:37.720 --> 00:01:42.780
of code. Now the operating system has no knowledge of

00:01:42.780 --> 00:01:46.480
the association between the lock, L, and the

00:01:46.480 --> 00:01:48.330
pages that have been modified. All that it

00:01:48.330 --> 00:01:52.920
knows, is that within the critical section these

00:01:52.920 --> 00:01:55.080
are the pages that were modified. That's what the

00:01:55.080 --> 00:01:57.810
operating system knows. And what we're going to

00:01:57.810 --> 00:02:01.630
do is, we're going to create a diff

00:02:01.630 --> 00:02:07.930
of the changes that were made to the pages x, y and z in this critical section.

00:02:07.930 --> 00:02:09.740
So we know at the beginning of this critical

00:02:09.740 --> 00:02:12.840
section what the contents of the page x, y and

00:02:12.840 --> 00:02:15.890
z is. And at the end of this critical

00:02:15.890 --> 00:02:18.770
section we're going to find out what is the difference

00:02:18.770 --> 00:02:21.660
that has been made, or what are the changes

00:02:21.660 --> 00:02:26.000
that have made and compute the diffs between the original

00:02:26.000 --> 00:02:30.280
page, and the modified page. Xd, Yd and Zd

00:02:30.280 --> 00:02:33.930
are the diffs to pages X, Y, and Z respectively

00:02:33.930 --> 00:02:36.010
as a result of executing this critical

00:02:36.010 --> 00:02:38.250
section. So, the coherence protocol we are going

00:02:38.250 --> 00:02:45.530
to use is LRC, or lazy release consistency. So the next time the same lock L

00:02:45.530 --> 00:02:47.950
is requested by some other process of

00:02:47.950 --> 00:02:52.870
P2 we're going to first invalidate the pages

00:02:52.870 --> 00:02:56.580
we know were modified by the previous lock

00:02:56.580 --> 00:02:59.970
holder, because this is information that is available

00:02:59.970 --> 00:03:07.520
to the DSN that at the point of unlock it knows that these were the pages that

00:03:07.520 --> 00:03:12.860
were modified by this critical section. It doesn't know what part of the pages

00:03:12.860 --> 00:03:18.240
are modified. That's contained in the diffs. But it knows that pages X, Y, and

00:03:18.240 --> 00:03:21.810
Z are associated with this lock L, and

00:03:21.810 --> 00:03:25.550
therefore, when P2 makes the lock request L,

00:03:25.550 --> 00:03:32.680
the DSN is going to first invalidate. If copies of pages x, y, and z are locally

00:03:32.680 --> 00:03:38.500
resident in the processor P2, then the DSM software is going to invalidate

00:03:38.500 --> 00:03:43.584
those pages x, y, and z at the point of lock acquisition. That's consistent with

00:03:43.584 --> 00:03:46.940
the lazy release consistency model. So, once

00:03:46.940 --> 00:03:50.920
we've invalidated these pages, then you can allow

00:03:50.920 --> 00:03:53.210
this guy to get the lock and start

00:03:53.210 --> 00:03:55.940
getting into its critical section. Now once it is

00:03:55.940 --> 00:03:57.910
in the critical section, it can do whatever it

00:03:57.910 --> 00:04:02.970
wants. But if it tries to access page X,

00:04:02.970 --> 00:04:06.260
at that point we know that page is invalid

00:04:06.260 --> 00:04:08.450
because we've done that at the beginning of this

00:04:08.450 --> 00:04:12.240
critical section, invalidated page X. And at this point,

00:04:12.240 --> 00:04:16.190
the DSM software also knows that the previous lock

00:04:16.190 --> 00:04:20.410
holder has the modifications that need to be

00:04:20.410 --> 00:04:24.530
made to the original page to get the current

00:04:24.530 --> 00:04:27.240
version of the page. The current version of

00:04:27.240 --> 00:04:30.480
the page is with some owner for this page.

00:04:30.480 --> 00:04:33.220
I mentioned this ownership based protocol in the

00:04:33.220 --> 00:04:36.940
DSM software. So the DSM software knows who the

00:04:36.940 --> 00:04:41.770
owner of the page is. From the owner of the page I can get the original content

00:04:41.770 --> 00:04:49.320
of X. I'll do that, but I'll also go and get the diff that is created by the

00:04:49.320 --> 00:04:53.890
execution of the previous critical section by the previous lock holder. So the

00:04:53.890 --> 00:05:01.890
DSM software brings at the point of access to X, Xd and the original version

00:05:01.890 --> 00:05:07.140
of the page from the owner of the page, it can then create the current version

00:05:07.140 --> 00:05:09.220
of the page for use by P2.

