WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
So far for the automated test now comes the simplification strategy.

00:00:05.000 --> 00:00:08.000
What could such a strategy possibly look like.

00:00:08.000 --> 00:00:13.000
In their book, The Practice of Programming, Kernighan and Pike describe

00:00:13.000 --> 00:00:16.000
a simple binary search simplification strategy.

00:00:16.000 --> 00:00:20.000
Throw away half the input and see if the output is still wrong.

00:00:20.000 --> 00:00:25.000
If not, go back to the previous state and discard the other half of the input.

00:00:25.000 --> 00:00:30.000
This is something that Kernighan and Pike meant to be used in a manual setting,

00:00:30.000 --> 00:00:33.000
which actually requires your editor in which you are editing the input

00:00:33.000 --> 00:00:36.000
to have a good undo facility.

00:00:36.000 --> 00:00:42.000
However, we can also translate this binary search approach directly into a program

00:00:42.000 --> 00:00:45.000
which does the simplification for us.

00:00:45.000 --> 00:00:48.000
We assume there is a function simplify() which takes an input,

00:00:48.000 --> 00:00:52.000
and based on the test automatically simplifies it.

00:00:52.000 --> 00:00:56.000
We assume that the test we're passing to the simplify function already fails.

00:00:56.000 --> 00:01:01.000
Since we want to test the two halves of the input separately,

00:01:01.000 --> 00:01:03.000
we need to split it into two parts.

00:01:03.000 --> 00:01:06.000
We're figuring out what the length of the input is,

00:01:06.000 --> 00:01:11.000
divide this by two, and we split the input into strings s1 and s2,

00:01:11.000 --> 00:01:14.000
which go up to this index,

00:01:14.000 --> 00:01:18.000
and start with this index such that s1 plus s2 concatenated

00:01:18.000 --> 00:01:20.000
still result in the original string.

00:01:20.000 --> 00:01:23.000
Now we test the first substring.

00:01:23.000 --> 00:01:28.000
If it's fail, then we proceed simplifying this first substring.

00:01:28.000 --> 00:01:32.000
What should we do if the first test does not fail?

00:01:32.000 --> 00:01:36.000
Well, I guess we then must go and work on the second string.

00:01:36.000 --> 00:01:38.000
How do you do that? Over to you?

