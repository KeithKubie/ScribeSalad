WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.930
[MUSIC PLAYING]

00:00:08.930 --> 00:00:10.770
Hey there, gang, great
to see you again.

00:00:10.770 --> 00:00:12.336
So I want you to check this out.

00:00:12.336 --> 00:00:14.210
In this app, I have a
view that it can rotate

00:00:14.210 --> 00:00:15.737
around using a rotate gesture.

00:00:15.737 --> 00:00:18.070
Probably if you've done any
sort of gesture work before,

00:00:18.070 --> 00:00:20.030
this looks pretty
standard to you.

00:00:20.030 --> 00:00:21.520
But as you can see
here, my object

00:00:21.520 --> 00:00:23.590
is always rotating
around its center.

00:00:23.590 --> 00:00:25.080
Now, in many cases,
this make sense

00:00:25.080 --> 00:00:27.465
and matches up with what
your users are expecting.

00:00:27.465 --> 00:00:29.090
But there might be
times where you want

00:00:29.090 --> 00:00:30.372
something a little different.

00:00:30.372 --> 00:00:31.830
For example, there
may be times I'd

00:00:31.830 --> 00:00:34.390
want to rotate my view around
where my user's fingers are,

00:00:34.390 --> 00:00:36.110
instead of the view center.

00:00:36.110 --> 00:00:37.950
Well, how would I do that?

00:00:37.950 --> 00:00:40.220
Well, that's where this
episode's quick tip comes in.

00:00:40.220 --> 00:00:42.520
And as you may have guessed
from the title here,

00:00:42.520 --> 00:00:44.650
it's all about
using anchor points.

00:00:44.650 --> 00:00:47.200
An anchor point of a view
is a local coordinate system

00:00:47.200 --> 00:00:50.740
that goes from 0 to 1
in the x- and y-axes.

00:00:50.740 --> 00:00:53.920
When you manipulate a view
using CGAffine Transform, which

00:00:53.920 --> 00:00:56.520
is the way you would typically
rotate or scale a view,

00:00:56.520 --> 00:00:58.480
iOS calculates
the transformation

00:00:58.480 --> 00:01:00.730
based on the view's
anchor point.

00:01:00.730 --> 00:01:02.480
By default, every
view's anchor point

00:01:02.480 --> 00:01:07.270
is set to 0.5, 0.5, or the
exact center of the view, which

00:01:07.270 --> 00:01:10.080
means that by default,
any rotation you get

00:01:10.080 --> 00:01:13.170
from the CGAffine Transform is
calculated around this center

00:01:13.170 --> 00:01:14.170
point.

00:01:14.170 --> 00:01:16.600
However, I can change the
anchor point for my view

00:01:16.600 --> 00:01:19.890
by setting the core animation
layer's anchor point property.

00:01:19.890 --> 00:01:21.480
So going back to my
application, where

00:01:21.480 --> 00:01:23.750
I want the view to rotate
around my two fingers,

00:01:23.750 --> 00:01:26.330
I can look at where the
user's two touches are

00:01:26.330 --> 00:01:28.960
relative to the view and
calculate the midpoint

00:01:28.960 --> 00:01:30.590
of those two points.

00:01:30.590 --> 00:01:33.280
Then I divide the x and
y values of that midpoint

00:01:33.280 --> 00:01:36.145
by the width and height of
my view to normalize them.

00:01:36.145 --> 00:01:37.520
And then I've got
an anchor point

00:01:37.520 --> 00:01:40.580
that reflects the midway
point between my two fingers.

00:01:40.580 --> 00:01:42.500
And so now if I set
my view's layer's

00:01:42.500 --> 00:01:44.350
anchorPoint to be
this new value,

00:01:44.350 --> 00:01:46.700
I should be able to rotate
it by one of its corners.

00:01:46.700 --> 00:01:50.065
So let's see this in action.

00:01:50.065 --> 00:01:53.241
Huh, well, uh, that's weird.

00:01:53.241 --> 00:01:55.240
It does look like my view
is now rotating around

00:01:55.240 --> 00:01:58.250
its corner instead of its
center, which is what I wanted.

00:01:58.250 --> 00:01:59.842
But it's also jumping
around as soon

00:01:59.842 --> 00:02:01.050
as I change its anchor point.

00:02:01.050 --> 00:02:02.879
Well, why is it doing that?

00:02:02.879 --> 00:02:04.920
Well, the answer basically
boils down to the fact

00:02:04.920 --> 00:02:08.410
that core animation places views
based on their anchor points.

00:02:08.410 --> 00:02:10.699
So when I change my
view's anchor point,

00:02:10.699 --> 00:02:12.870
iOS tries to make sure
that anchor point is

00:02:12.870 --> 00:02:14.480
in the same place
in its superview

00:02:14.480 --> 00:02:17.220
as it was before, which means
that it shifts my view's

00:02:17.220 --> 00:02:17.880
frame around.

00:02:17.880 --> 00:02:20.340
And that's exactly what
happened in my app.

00:02:20.340 --> 00:02:21.700
So how can you fix this?

00:02:21.700 --> 00:02:24.180
Well, the easiest way is to
translate your view immediately

00:02:24.180 --> 00:02:26.731
before or after you
change your anchor point.

00:02:26.731 --> 00:02:28.230
Basically, figure
out the difference

00:02:28.230 --> 00:02:30.900
between your old anchor point
and your new anchor point,

00:02:30.900 --> 00:02:32.874
and shift your
view by that much.

00:02:32.874 --> 00:02:34.540
Then, when you change
your anchor point,

00:02:34.540 --> 00:02:37.210
iOS shifts your view
in the other direction.

00:02:37.210 --> 00:02:38.960
Those two shifts
cancel each other out,

00:02:38.960 --> 00:02:41.890
and your view will go back
to its original place.

00:02:41.890 --> 00:02:44.120
Incidentally, I do recommend
applying this shift

00:02:44.120 --> 00:02:45.940
as a CGAffine
transform, instead of

00:02:45.940 --> 00:02:48.417
trying to move the
view's frame directly.

00:02:48.417 --> 00:02:50.250
Otherwise you can end
up in weird situations

00:02:50.250 --> 00:02:52.166
where your move gets
affected by the rotation,

00:02:52.166 --> 00:02:54.540
and things just end
up all sorts of messy.

00:02:54.540 --> 00:02:57.060
So if I try this now in my
app, where I immediately

00:02:57.060 --> 00:02:59.450
translate my view and then
move the anchor point,

00:02:59.450 --> 00:03:01.202
we get something like this.

00:03:01.202 --> 00:03:04.150
Ah, well, that's
exactly what I wanted.

00:03:04.150 --> 00:03:06.266
Incidentally, once you're
done rotating an object,

00:03:06.266 --> 00:03:08.640
you can either leave its anchor
point at its new position

00:03:08.640 --> 00:03:10.507
or reset it back to
the center again,

00:03:10.507 --> 00:03:12.590
depending on whether you
think other methods might

00:03:12.590 --> 00:03:14.140
be manipulating this view.

00:03:14.140 --> 00:03:16.777
After all, some other animation,
like a scale animation,

00:03:16.777 --> 00:03:18.860
might be assuming that
your view's anchor point is

00:03:18.860 --> 00:03:21.570
in the center, and you
don't want to throw it off.

00:03:21.570 --> 00:03:23.070
So today's quick
tip was brought you

00:03:23.070 --> 00:03:25.200
by Jeff Verkoeyen, one
of the main authors

00:03:25.200 --> 00:03:27.830
of the popular open
source library NimbusKit.

00:03:27.830 --> 00:03:30.650
Jeff is also working on a number
of cool graphics and animation

00:03:30.650 --> 00:03:32.186
libraries here inside of Google.

00:03:32.186 --> 00:03:33.060
So thank you to Jeff.

00:03:33.060 --> 00:03:34.250
And you know what?

00:03:34.250 --> 00:03:35.700
Even though you
already work here,

00:03:35.700 --> 00:03:38.320
I'll send you a t-shirt anyway
because I'm nice like that.

00:03:38.320 --> 00:03:39.130
But what about you?

00:03:39.130 --> 00:03:40.070
Do have a quick tip?

00:03:40.070 --> 00:03:41.324
If you do, send it to me.

00:03:41.324 --> 00:03:42.740
If I end up using
it in the video,

00:03:42.740 --> 00:03:44.430
I will send you a T-shirt.

00:03:44.430 --> 00:03:46.260
Listen, I've seen
engineers at conferences

00:03:46.260 --> 00:03:48.360
like knock small children
out of the way in order

00:03:48.360 --> 00:03:49.940
to get themselves
a free T-shirt,

00:03:49.940 --> 00:03:52.356
so trust me when I say it'll
be a whole lot easier for you

00:03:52.356 --> 00:03:55.280
to just mail me a tip, and
no children will get hurt.

00:03:55.280 --> 00:03:56.710
So go on, I believe in you.

00:03:56.710 --> 00:03:57.322
You can do it.

00:03:57.322 --> 00:03:59.280
And as for the rest of
you, I will see you soon

00:03:59.280 --> 00:04:01.890
on "Route 85."

00:04:01.890 --> 00:04:04.940
[MUSIC PLAYING]

