WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
We now have seen how we can check the input parameters through the time class.

00:00:04.000 --> 00:00:10.000
But what happens if there is more setters and getters which can all compromise the state?

00:00:10.000 --> 00:00:14.000
Let's assume we have a method advance which takes a number of seconds

00:00:14.000 --> 00:00:16.000
by which to advance the time.

00:00:16.000 --> 00:00:22.000
For instance, a value of 3600 would advance the time forward by 1 hour

00:00:22.000 --> 00:00:26.000
whereas a -60 would set back time by 1 minute.

00:00:26.000 --> 00:00:30.000
Here's our advance method. I skipped the details of the computation right now,

00:00:30.000 --> 00:00:33.000
but instead, we focus on the postcondition.

00:00:33.000 --> 00:00:38.000
We assume we do have a method seconds-since-midnight which returns the number of seconds

00:00:38.000 --> 00:00:42.000
that have a lapse in this very day, then we can set up a postcondition

00:00:42.000 --> 00:00:47.000
which simply says that after we advance the time, then the new second since midnight

00:00:47.000 --> 00:00:50.000
should be the old value plus the offset of seconds,

00:00:50.000 --> 00:00:53.000
all of this modulo the number of seconds in a day, such that

00:00:53.000 --> 00:00:59.000
we probably take care out of advances that go beyond or before midnight.

00:00:59.000 --> 00:01:03.000
The method seconds-since-midnight is rather straightforward to implement:

00:01:03.000 --> 00:01:07.000
it's the hours times 3600 plus the minutes times 60 plus the seconds.

00:01:07.000 --> 00:01:12.000
So again, we use the helper function to help us define our postcondition,

00:01:12.000 --> 00:01:18.000
but for all of this to work, we need to make sure that even after the complex computation,

00:01:18.000 --> 00:01:21.000
the state of the time object is still sane,

00:01:21.000 --> 00:01:26.000
that is, minutes, hours and seconds are still within the right ranges,

00:01:26.000 --> 00:01:31.000
no matter what happens in this complex computation and this is not checked at this point.

00:01:31.000 --> 00:01:36.000
What we need here is a property that always holds.

00:01:36.000 --> 00:01:40.000
In Computer Science problems, we call such a thing an invariant.

00:01:40.000 --> 00:01:46.000
An invariant is a condition that always holds for some data object. What does always means?

00:01:46.000 --> 00:01:50.000
Always means from the perspective of a user of that object,

00:01:50.000 --> 00:01:54.000
that is at the beginning and at the end of each public method.

00:01:54.000 --> 00:01:59.000
While the method is executing, invariants can and frequently must be violated,

00:01:59.000 --> 00:02:03.000
but when the method is done, invariants should hold again.

00:02:03.000 --> 00:02:09.000
For our time object, the invariant condition is already encoded here in the argument checker,

00:02:09.000 --> 00:02:16.000
in the precondition of the initializer, but now we want to check this condition over and over again.

00:02:16.000 --> 00:02:18.000
At the end and at the beginning of each public method.

00:02:18.000 --> 00:02:21.000
What we do is we write an invariant checker.

00:02:21.000 --> 00:02:23.000
This invariant checker called checkRep here

00:02:23.000 --> 00:02:29.000
checks whether the internal representation is sane or correct.

00:02:29.000 --> 00:02:31.000
In our case, we simply set up three assertions to check whether

00:02:31.000 --> 00:02:35.000
hours, minutes and seconds are within the right ranges.

00:02:35.000 --> 00:02:39.000
Once we do have such a checker, we can now use this in all functions

00:02:39.000 --> 00:02:42.000
at the beginning or at the end, as appropriate.

00:02:42.000 --> 00:02:45.000
For instance, after initialization, we invoke checkRep

00:02:45.000 --> 00:02:50.000
then make sure whether the internal state is within the right ranges.

00:02:50.000 --> 00:02:53.000
This is also true for setters like advance.

00:02:53.000 --> 00:02:58.000
Before we change something, we check whether the invariant is satisfied

00:02:58.000 --> 00:03:03.000
and we do the same after the computation such that if the computation in someway messes up

00:03:03.000 --> 00:03:07.000
hours, minutes, or seconds, then checkRep will immediately find this.

