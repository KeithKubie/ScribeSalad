WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.000
Hi.

00:00:01.000 --> 00:00:02.040
My name is Lisa Wray.

00:00:02.040 --> 00:00:04.290
And I'm a developer advocate
with the Google Developer

00:00:04.290 --> 00:00:05.636
Relations team.

00:00:05.636 --> 00:00:07.260
If you're interested
in fitness and you

00:00:07.260 --> 00:00:08.730
want to give yourself,
or your users,

00:00:08.730 --> 00:00:10.771
more information with just
the device you already

00:00:10.771 --> 00:00:12.950
have in your pocket,
you're in the right place.

00:00:12.950 --> 00:00:15.325
Today I'm going to talk about
the step sensors available,

00:00:15.325 --> 00:00:18.256
starting with Android KitKat.

00:00:18.256 --> 00:00:19.880
These step sensors
are hardware sensors

00:00:19.880 --> 00:00:21.200
based on the accelerometer.

00:00:21.200 --> 00:00:22.950
They're designed to
be low power and won't

00:00:22.950 --> 00:00:24.350
burn through your battery.

00:00:24.350 --> 00:00:26.620
The step sensors count steps
during walking, running,

00:00:26.620 --> 00:00:27.454
and climbing stairs.

00:00:27.454 --> 00:00:29.994
And they're smart enough not to
count activities like biking,

00:00:29.994 --> 00:00:31.490
driving cars, or
riding in trains.

00:00:34.180 --> 00:00:36.420
Android has two sensors
for step counting.

00:00:36.420 --> 00:00:38.360
The first is the step detector.

00:00:38.360 --> 00:00:40.230
It fires an event when
a step is detected.

00:00:40.230 --> 00:00:41.290
One event per step.

00:00:41.290 --> 00:00:43.060
The only value it
can return is one.

00:00:43.060 --> 00:00:46.160
So if you want to count steps,
you have to do that yourself.

00:00:46.160 --> 00:00:48.660
There are two ways to receive
events from the step detector,

00:00:48.660 --> 00:00:51.720
continuously or in batches.

00:00:51.720 --> 00:00:54.444
If you register your listener
with a maximum delay of zero,

00:00:54.444 --> 00:00:55.860
then you'll get
continuous events,

00:00:55.860 --> 00:00:58.280
posted as fast as the
sensor can produce them.

00:00:58.280 --> 00:01:00.176
The step detector has
a pretty low latency.

00:01:00.176 --> 00:01:02.050
So the times at which
you receive step events

00:01:02.050 --> 00:01:05.160
should correspond closely
with the user's actual steps.

00:01:05.160 --> 00:01:08.750
On the other hand, if you
don't need real-time reporting,

00:01:08.750 --> 00:01:10.700
you can allow
events to be batched

00:01:10.700 --> 00:01:12.930
by providing a
higher maximum delay.

00:01:12.930 --> 00:01:15.790
You'll still get one event
per step but, in this example,

00:01:15.790 --> 00:01:18.870
the events could come at as
much as five seconds afterward.

00:01:18.870 --> 00:01:21.230
This allows for optimization
at the sensor level.

00:01:21.230 --> 00:01:23.650
So be a good Android citizen
and only ask for events

00:01:23.650 --> 00:01:27.610
as quickly as you
actually need them.

00:01:27.610 --> 00:01:30.210
The step counter is similar to
the step detector in that it

00:01:30.210 --> 00:01:32.210
also sends one event per step.

00:01:32.210 --> 00:01:35.179
However, the value it sends is
a cumulative number of steps.

00:01:35.179 --> 00:01:36.970
The step counter also
takes a little longer

00:01:36.970 --> 00:01:39.870
to process the event but it
produces fewer false positives.

00:01:39.870 --> 00:01:43.260
So when accuracy is paramount,
use the step counter.

00:01:43.260 --> 00:01:44.700
You can also
request these events

00:01:44.700 --> 00:01:47.640
as continuous or batched.

00:01:47.640 --> 00:01:49.140
So how do we use these sensors?

00:01:49.140 --> 00:01:52.620
First, check the device
runs at least Android 4.4

00:01:52.620 --> 00:01:54.760
and that it has the
sensors we want.

00:01:54.760 --> 00:01:57.110
You can require the
sensors and minimum API

00:01:57.110 --> 00:01:59.480
level in the manifest.

00:01:59.480 --> 00:02:01.994
Or if your app can work
without the step sensors,

00:02:01.994 --> 00:02:03.660
you can check
programmatically for them,

00:02:03.660 --> 00:02:04.743
using the package manager.

00:02:07.280 --> 00:02:08.990
The simplest way to
use the step sensors

00:02:08.990 --> 00:02:10.823
is to listen for steps
only while the app is

00:02:10.823 --> 00:02:12.860
running, unregistering
and re-registering

00:02:12.860 --> 00:02:14.735
your listeners with
the app lifecycle,

00:02:14.735 --> 00:02:17.360
and persisting the previous step
count to add to the new values

00:02:17.360 --> 00:02:18.500
reported.

00:02:18.500 --> 00:02:21.290
It is also possible to use the
step sensors in the background

00:02:21.290 --> 00:02:23.150
when the CPU is suspended.

00:02:23.150 --> 00:02:25.402
This requires manually
flushing the sensor event queue

00:02:25.402 --> 00:02:26.235
before it overflows.

00:02:28.890 --> 00:02:32.007
Speaking of listeners, here's
a sample sensor event listener.

00:02:32.007 --> 00:02:34.590
Once you've registered, you get
a callback to on sensor change

00:02:34.590 --> 00:02:36.080
every time there's a step event.

00:02:36.080 --> 00:02:37.830
We've sum delayed
depending on whether you

00:02:37.830 --> 00:02:39.320
requested batched mode.

00:02:39.320 --> 00:02:41.130
This listener is
for a step detector.

00:02:41.130 --> 00:02:42.980
Here we're implementing
a step counter.

00:02:42.980 --> 00:02:45.711
At this point, we can go ahead
and display the step count.

00:02:45.711 --> 00:02:47.460
Your listener will be
different, depending

00:02:47.460 --> 00:02:48.840
on the type of sensor.

00:02:48.840 --> 00:02:51.699
And what you want
to do with the data.

00:02:51.699 --> 00:02:53.990
To see this in action, please
download the batched step

00:02:53.990 --> 00:02:56.360
sensor sample linked from
the video description

00:02:56.360 --> 00:02:58.410
for a full working
example of this code.

00:02:58.410 --> 00:02:59.940
And go take it for a walk.

00:02:59.940 --> 00:03:01.810
Thanks for watching.

