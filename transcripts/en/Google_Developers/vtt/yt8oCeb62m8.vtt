WEBVTT
Kind: captions
Language: en

00:00:08.650 --> 00:00:11.260
Hello, internets, and welcome
to this week's episode of

00:00:11.260 --> 00:00:13.220
Google+ Developers Live.

00:00:13.220 --> 00:00:15.240
So we're going to take a break
from the best practices

00:00:15.240 --> 00:00:16.780
episodes that we've been doing,
and we're going to be

00:00:16.780 --> 00:00:18.630
showing you the Quickstarts.

00:00:18.630 --> 00:00:22.560
So this week, we'll be doing the
C# Quickstart on Windows,

00:00:22.560 --> 00:00:25.510
and the short version of what
this does is it's going to

00:00:25.510 --> 00:00:29.720
create a web server built on top
of ASP.NET, and it's going

00:00:29.720 --> 00:00:32.380
to host a [INAUDIBLE]

00:00:32.380 --> 00:00:35.860
that will render the Sign-In
button, sign in the user, and

00:00:35.860 --> 00:00:39.820
then pass authorization tokens
to the server in order to make

00:00:39.820 --> 00:00:41.820
API calls server side.

00:00:41.820 --> 00:00:45.940
So if you want to get started
with this, the launching off

00:00:45.940 --> 00:00:47.246
point is going to be
developers.googl

00:00:47.246 --> 00:00:54.730
e.com/plus/quickstart/C#.

00:00:54.730 --> 00:00:56.710
So let's take a look
at my screen and

00:00:56.710 --> 00:00:58.350
walk through the sample.

00:00:58.350 --> 00:01:04.300
So here you have the landing
page for the C# sample, and

00:01:04.300 --> 00:01:06.960
inside of this set of
instructions is going to be--

00:01:06.960 --> 00:01:10.360
the first command is going to
be for cloning the actual

00:01:10.360 --> 00:01:14.080
sources from our GitHub
project page

00:01:14.080 --> 00:01:16.520
into your local machine.

00:01:16.520 --> 00:01:21.920
So what you would do is just
copy this command, get clone,

00:01:21.920 --> 00:01:23.170
GitHub.com/Googl
e+/G+quickstartC#.get.

00:01:27.790 --> 00:01:29.850
So let's run that command.

00:01:29.850 --> 00:01:32.010
So what it's doing is it's just
copying the sources from

00:01:32.010 --> 00:01:34.120
GitHub into my local machine.

00:01:34.120 --> 00:01:39.330
So now, in the folder that I've
set up for my Git Bash, I

00:01:39.330 --> 00:01:42.760
will now have the Google+
Quickstart.

00:01:42.760 --> 00:01:45.780
So here's the Quickstart
itself.

00:01:45.780 --> 00:01:48.170
Now what I will do is, I'm
just going to open up the

00:01:48.170 --> 00:01:52.480
solution inside of
Visual Studio.

00:01:52.480 --> 00:01:55.220
So once the solution's opened,
what I'm going to have to do

00:01:55.220 --> 00:01:57.640
is set up the client credentials
before I'm going

00:01:57.640 --> 00:02:00.710
to be able to make API calls
on behalf of the user.

00:02:00.710 --> 00:02:04.170
So what I'm going to have to do
next then is set up an API

00:02:04.170 --> 00:02:09.060
project inside of the
API's console.

00:02:09.060 --> 00:02:10.550
The place that you
start here is

00:02:10.550 --> 00:02:17.760
code.google.com/APIs/console.

00:02:17.760 --> 00:02:19.780
Here we have the
API's console.

00:02:19.780 --> 00:02:22.030
For those of you who are
unfamiliar with it, this is

00:02:22.030 --> 00:02:25.460
where you create all the
projects that use Google APIs.

00:02:25.460 --> 00:02:27.910
So if I want to create a project
that uses the Google+

00:02:27.910 --> 00:02:31.220
APIs, for example, then this
is where I would start.

00:02:31.220 --> 00:02:34.560
So let's create a new project.

00:02:34.560 --> 00:02:36.670
When you create the project, the
first thing you need to do

00:02:36.670 --> 00:02:38.330
is come up with a name
for your project.

00:02:38.330 --> 00:02:41.060
So the name that you give your
project is just for you.

00:02:41.060 --> 00:02:43.210
This is not going to be a
public-- this is not going to

00:02:43.210 --> 00:02:44.500
be public facing information.

00:02:44.500 --> 00:02:47.360
This is just information so
that you know one of your

00:02:47.360 --> 00:02:48.910
projects from another.

00:02:48.910 --> 00:02:51.560
I'll just create a project
for this GDL.

00:02:55.320 --> 00:02:57.260
Here's the project
that's created.

00:02:57.260 --> 00:03:00.140
And after the project gets
created, you then turn on the

00:03:00.140 --> 00:03:02.900
services that your project
is going to consume.

00:03:02.900 --> 00:03:05.310
So because this project is only
going to be using the

00:03:05.310 --> 00:03:08.480
Google+ API, I just need to
turn on the Google+ API.

00:03:08.480 --> 00:03:11.490
So it's right in the middle, and
it's sorted alphabetically

00:03:11.490 --> 00:03:16.280
for those of you who are hunting
through, and the plus

00:03:16.280 --> 00:03:19.380
in Google+ actually appears
as a P in the

00:03:19.380 --> 00:03:21.170
alphabetical ordering.

00:03:21.170 --> 00:03:24.240
After you've created your
project, and you've turned on

00:03:24.240 --> 00:03:28.100
the service for Google+, you now
are ready to create your

00:03:28.100 --> 00:03:31.320
authorization credentials.

00:03:31.320 --> 00:03:34.980
So what I did there was I
clicked this Create An OAuth2

00:03:34.980 --> 00:03:37.450
client ID button, the
big blue one.

00:03:37.450 --> 00:03:40.350
And inside of here is going to
be the branding information

00:03:40.350 --> 00:03:42.410
that will be facing
your customers.

00:03:42.410 --> 00:03:45.380
So when you label this
information, please take the

00:03:45.380 --> 00:03:50.510
time to ensure that the
information is accurate and is

00:03:50.510 --> 00:03:54.830
consistent with the branding for
your particular product.

00:03:54.830 --> 00:03:58.870
Because this is just a GDL
Quickstart, I'm just going to

00:03:58.870 --> 00:04:03.540
have a less meaningful name,
but this is fine for now.

00:04:03.540 --> 00:04:08.260
So I'm going to be creating a
web application, and I'm going

00:04:08.260 --> 00:04:16.730
to be running it from local host
port 4567, just as is set

00:04:16.730 --> 00:04:20.149
up inside of the tutorial.

00:04:20.149 --> 00:04:24.220
The reason that I switched this
also was because HTTP

00:04:24.220 --> 00:04:26.330
versus HTTPS matters.

00:04:26.330 --> 00:04:29.670
So when you set up these
projects, pay extra careful

00:04:29.670 --> 00:04:32.790
attention to the port and the
protocol that you're using,

00:04:32.790 --> 00:04:34.900
because it needs to match
wherever you're going to be

00:04:34.900 --> 00:04:36.120
running this code.

00:04:36.120 --> 00:04:39.880
So I'll create that client ID,
and after that's done, what

00:04:39.880 --> 00:04:43.430
will happen is there'll be a
client ID and a client secret.

00:04:43.430 --> 00:04:45.730
And so these are the credentials
that Google uses

00:04:45.730 --> 00:04:49.140
to ensure that the people who
are accessing the APIs are the

00:04:49.140 --> 00:04:51.040
right ones for that particular
project.

00:04:51.040 --> 00:04:53.820
So make sure that you protect
this information on your

00:04:53.820 --> 00:04:56.330
deployed applications.

00:04:56.330 --> 00:04:58.270
Here we have the
project again.

00:04:58.270 --> 00:05:02.820
I'm going to open signin.ashx,
and this will actually open

00:05:02.820 --> 00:05:04.630
the code-behind.

00:05:04.630 --> 00:05:08.930
And so inside of the code-behind
is the settings,

00:05:08.930 --> 00:05:10.810
your client ID and your
client secret.

00:05:10.810 --> 00:05:14.730
So these are the ones that you
got from the API console.

00:05:14.730 --> 00:05:20.740
So here's the client ID, the
client secret, and now, if we

00:05:20.740 --> 00:05:26.300
run the sample, you will see
the application running.

00:05:26.300 --> 00:05:27.820
Here's the sign-in dialogue.

00:05:27.820 --> 00:05:28.770
I click it.

00:05:28.770 --> 00:05:32.490
I'm presented then with this
request for permission.

00:05:32.490 --> 00:05:37.230
So all of the services that are
set up and included inside

00:05:37.230 --> 00:05:39.860
of the scopes will appear
here for your users.

00:05:39.860 --> 00:05:44.630
So make sure that when you
request scopes, you request

00:05:44.630 --> 00:05:47.350
the right ones for what your
users will be doing.

00:05:47.350 --> 00:05:51.610
After you've done this, you
accept, because you trust this

00:05:51.610 --> 00:05:56.710
product, and then after you
accept, the sample will run.

00:05:56.710 --> 00:06:00.650
So what happens when the sample
runs is, up top we

00:06:00.650 --> 00:06:04.780
render some really minimal UI,
and then we use the JavaScript

00:06:04.780 --> 00:06:07.920
client library in order to
retrieve a user profile, and

00:06:07.920 --> 00:06:11.980
then we perform a RESTful API
call to the server endpoint

00:06:11.980 --> 00:06:13.340
which was created.

00:06:13.340 --> 00:06:17.290
And then that will retrieve HTML
for the people that are

00:06:17.290 --> 00:06:18.460
visible to this app.

00:06:18.460 --> 00:06:20.580
So there's a server side call
that's happening there.

00:06:20.580 --> 00:06:22.490
There's a client call that's
happening there.

00:06:22.490 --> 00:06:25.420
And so once you've got this
working, then you've seen the

00:06:25.420 --> 00:06:28.300
Google+ Client Libraries running
inside of your Google+

00:06:28.300 --> 00:06:30.340
application.

00:06:30.340 --> 00:06:32.480
And that's pretty much all
there is to it for the

00:06:32.480 --> 00:06:33.830
Quickstart.

00:06:33.830 --> 00:06:36.440
Now, let's take a closer look at
some of the things that are

00:06:36.440 --> 00:06:39.470
happening behind the scenes
when this is done.

00:06:39.470 --> 00:06:44.150
I'm going to put a breakpoint
in here, and this breakpoint

00:06:44.150 --> 00:06:49.880
will cause the code to pause
when we have retrieved the

00:06:49.880 --> 00:06:51.810
user's list of circled people.

00:06:51.810 --> 00:06:54.950
So let's see where the
endpoint is for that.

00:06:54.950 --> 00:06:58.930
So here's the request path that
contains people, and here

00:06:58.930 --> 00:07:00.920
you can see something that
starts to look like

00:07:00.920 --> 00:07:02.250
a Google API call.

00:07:02.250 --> 00:07:05.360
So you have this PeopleFeed
object, you've got- PS is

00:07:05.360 --> 00:07:08.650
actually a plus service object,
and then inside of the

00:07:08.650 --> 00:07:11.680
plus service object, all
of the client APIs are

00:07:11.680 --> 00:07:13.720
encapsulated into methods
and objects.

00:07:13.720 --> 00:07:18.270
So this is a real
simple API call.

00:07:18.270 --> 00:07:21.310
Doing this does not require
very much setup, very much

00:07:21.310 --> 00:07:25.590
work, and when you run it, the
result that you get is going

00:07:25.590 --> 00:07:31.030
to be that object representing
the list of people.

00:07:31.030 --> 00:07:32.740
I'll just go back to
my server again.

00:07:32.740 --> 00:07:37.120
We'll run the sample again, and
here's where that server

00:07:37.120 --> 00:07:40.400
has set up that PeopleFeed
request.

00:07:40.400 --> 00:07:44.440
And after it's concluded with
that fetch command, you'll

00:07:44.440 --> 00:07:47.440
have, inside of this PeopleFeed,
an object that

00:07:47.440 --> 00:07:50.190
just represents something from
that users Google account.

00:07:50.190 --> 00:07:52.840
This gives you a general idea
of how to get started with

00:07:52.840 --> 00:07:56.650
Google+ and the Google+ Client
Libraries and C#.

00:07:56.650 --> 00:08:01.570
And feel free to ask questions
on our Google+ Developers page

00:08:01.570 --> 00:08:03.750
in the Google+ Developer
community on Google+.

00:08:03.750 --> 00:08:09.070
And feel free to reach out to
us directly on Google+ if

00:08:09.070 --> 00:08:11.530
you'd like to as well.

00:08:11.530 --> 00:08:14.080
Once you have all this set up,
you're pretty much ready for

00:08:14.080 --> 00:08:19.000
C# development, but what if you
wanted to use or create a

00:08:19.000 --> 00:08:19.920
client application.

00:08:19.920 --> 00:08:24.930
So this is sort of one of the
problems that our client

00:08:24.930 --> 00:08:28.120
libraries team has been thinking
of, and they recently

00:08:28.120 --> 00:08:33.360
announced a new version of
the Google API libraries.

00:08:33.360 --> 00:08:39.320
And this is built on top of the
PCL, and so when you use

00:08:39.320 --> 00:08:42.140
the new library, you can put
your applications on Windows

00:08:42.140 --> 00:08:47.610
Phone, on Windows desktop,
and in the new Windows 8.

00:08:47.610 --> 00:08:50.220
Feel free to check out that new
library, but there are few

00:08:50.220 --> 00:08:51.850
quirks to it that I want
to share with you

00:08:51.850 --> 00:08:53.990
before we move on.

00:08:53.990 --> 00:08:58.490
So I'll close the solution, and
I'll open up-- so I have

00:08:58.490 --> 00:09:00.080
another one.

00:09:00.080 --> 00:09:04.670
I have another solution that
has been updated to the new

00:09:04.670 --> 00:09:06.580
client library.

00:09:06.580 --> 00:09:10.250
When you set up these projects,
it's basically the

00:09:10.250 --> 00:09:11.980
same setup that we
had. before.

00:09:11.980 --> 00:09:16.040
You just want to add references
for DotNetOpenAuth,

00:09:16.040 --> 00:09:20.160
the Google APIs library, OAuth2,
and then the Google

00:09:20.160 --> 00:09:21.300
Apis.Plus.v1.

00:09:21.300 --> 00:09:24.920
So if you look inside of my
project references, you can

00:09:24.920 --> 00:09:26.710
see where I've added
these four.

00:09:26.710 --> 00:09:30.520
The next thing you need to do is
you need to turn on the New

00:09:30.520 --> 00:09:39.010
Git packages for all the BCL
stuff and also for the

00:09:39.010 --> 00:09:40.730
dependencies of the new
client library.

00:09:40.730 --> 00:09:44.440
So the major dependency is
the Microsoft HTTP client

00:09:44.440 --> 00:09:47.090
libraries, and so you want to
make sure that you include

00:09:47.090 --> 00:09:50.100
that, and then that should
also pull in the other

00:09:50.100 --> 00:09:50.970
components.

00:09:50.970 --> 00:09:53.570
You also will need to pull in
the [INAUDIBLE] for .NET

00:09:53.570 --> 00:09:58.120
framework library and then
the Newtonsoft.JSON.

00:09:58.120 --> 00:10:01.210
We used to ship the sample with
Newtonsoft.JSON in it,

00:10:01.210 --> 00:10:04.470
but now that you can acquire
these libraries very easily,

00:10:04.470 --> 00:10:08.680
get the latest ones using New
Git, it just makes sense to

00:10:08.680 --> 00:10:13.050
instead ship it without, and
then have people who are

00:10:13.050 --> 00:10:16.380
playing with the API to just
add it themselves.

00:10:16.380 --> 00:10:19.580
So that's pretty much it.

00:10:19.580 --> 00:10:21.890
Everything looks and works
exactly the same.

00:10:21.890 --> 00:10:26.550
When I updated to this new
client library inside of my

00:10:26.550 --> 00:10:29.980
test app, there were absolutely
no changes that I

00:10:29.980 --> 00:10:30.980
had to make to my code.

00:10:30.980 --> 00:10:33.970
Everything just was using
the same API footprint.

00:10:33.970 --> 00:10:36.680
So there were no major breaking
changes except you

00:10:36.680 --> 00:10:39.830
just now have to be able to
import all these libraries

00:10:39.830 --> 00:10:43.580
that are required for
Microsoft HTTP.

00:10:43.580 --> 00:10:46.250
So that's it for today.

00:10:46.250 --> 00:10:49.250
Thank you for watching, and
come back next week at the

00:10:49.250 --> 00:10:53.430
same time, 2:30 PM PST, to
watch another episode of

00:10:53.430 --> 00:10:54.700
Google+ Developers Live.

