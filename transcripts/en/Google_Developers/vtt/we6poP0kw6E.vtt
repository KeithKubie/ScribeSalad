WEBVTT
Kind: captions
Language: en

00:00:02.365 --> 00:00:04.560
Fancy animations and
smooth transitions

00:00:04.560 --> 00:00:07.290
are at the core of
modern mobile app design.

00:00:07.290 --> 00:00:09.490
While these things may make
beautiful, transcendent

00:00:09.490 --> 00:00:11.830
experiences for your
users, it's easy to forget

00:00:11.830 --> 00:00:14.310
what they might be costing
you, in terms of performance.

00:00:14.310 --> 00:00:15.480
My name is Colt McCanlis.

00:00:15.480 --> 00:00:17.670
And writing performant
Android applications

00:00:17.670 --> 00:00:19.860
start with the simple
step of understanding

00:00:19.860 --> 00:00:21.960
what's going on in
the Android system,

00:00:21.960 --> 00:00:24.392
when you update the visual
properties of a view.

00:00:24.392 --> 00:00:26.350
Remember that to draw
something on your device,

00:00:26.350 --> 00:00:29.350
Android generally needs to
convert all that high-level XML

00:00:29.350 --> 00:00:31.020
into some that
the GPU can accept

00:00:31.020 --> 00:00:32.800
and use to render to the screen.

00:00:32.800 --> 00:00:35.150
This is done with the help
of an internal object called

00:00:35.150 --> 00:00:36.410
a display list.

00:00:36.410 --> 00:00:39.090
I display list basically holds
all the information needed

00:00:39.090 --> 00:00:41.440
to render a view on the GPU.

00:00:41.440 --> 00:00:43.530
It contains a list of
any GPU resident assets

00:00:43.530 --> 00:00:45.250
that might be needed,
as well as a list

00:00:45.250 --> 00:00:47.390
of commands to
execute to OpenGL,

00:00:47.390 --> 00:00:49.049
when it's time to render it.

00:00:49.049 --> 00:00:50.840
The first time a view
needs to be rendered,

00:00:50.840 --> 00:00:52.475
a display list is
created for it.

00:00:52.475 --> 00:00:54.600
And when we need to render
that view to the screen,

00:00:54.600 --> 00:00:57.540
we execute that display list by
submitting its drawing commands

00:00:57.540 --> 00:00:58.935
to the GPU.

00:00:58.935 --> 00:01:01.060
If we want to render that
view again in the future,

00:01:01.060 --> 00:01:03.140
like if it's position
changed on the screen,

00:01:03.140 --> 00:01:06.189
we simply need to execute that
display list one extra time.

00:01:06.189 --> 00:01:08.480
However, in the future, if
some visual part of the view

00:01:08.480 --> 00:01:12.180
changes, the previous display
list may no longer be valid.

00:01:12.180 --> 00:01:14.790
As such, we'll need to go back,
recreate the display list,

00:01:14.790 --> 00:01:18.270
and then re-execute it once
again, to update the screen.

00:01:18.270 --> 00:01:19.340
But remember this.

00:01:19.340 --> 00:01:21.790
Any time the drawing content
of your view changes,

00:01:21.790 --> 00:01:24.630
it will repeat this process
of recreating the display list

00:01:24.630 --> 00:01:27.160
and re-executing it to the
screen, the performance

00:01:27.160 --> 00:01:29.055
of which varies,
depending on how complex

00:01:29.055 --> 00:01:30.390
your review actually is.

00:01:30.390 --> 00:01:32.390
And depending on the
type of visual change,

00:01:32.390 --> 00:01:35.000
there's other impact on the
rendering pipeline as well.

00:01:35.000 --> 00:01:37.850
For example, let's say, a text
box suddenly doubles in size,

00:01:37.850 --> 00:01:41.000
causing the parent container to
reposition other sibling views,

00:01:41.000 --> 00:01:43.330
before updating its own size.

00:01:43.330 --> 00:01:45.620
In this case, we've
updated one view,

00:01:45.620 --> 00:01:48.920
and it cascaded to other work
that needed to be done as well.

00:01:48.920 --> 00:01:50.860
These types of visual
changes require

00:01:50.860 --> 00:01:53.570
additional stages of the
rendering pipeline to occur.

00:01:53.570 --> 00:01:55.550
See, when the sizing
of your view changes,

00:01:55.550 --> 00:01:57.666
the measure phase
will be kicked off.

00:01:57.666 --> 00:01:59.540
And it will walk through
your view hierarchy,

00:01:59.540 --> 00:02:02.090
asking each view what
its new sizes are.

00:02:02.090 --> 00:02:04.680
And if you change the position
of things, call Request Layout,

00:02:04.680 --> 00:02:07.280
or if a view group
repositions its children,

00:02:07.280 --> 00:02:10.060
the layout phase will kick
off, traverse the hierarchy,

00:02:10.060 --> 00:02:12.440
and figure out where
everything needs to be located.

00:02:12.440 --> 00:02:15.000
And you need to be conscious
that each one of these stages

00:02:15.000 --> 00:02:16.310
takes time to run.

00:02:16.310 --> 00:02:18.726
While by themselves, that
may not be impactful,

00:02:18.726 --> 00:02:20.725
when there's a sudden
large amount of views that

00:02:20.725 --> 00:02:22.410
get invalidated or
repositioned, this

00:02:22.410 --> 00:02:25.070
can trigger a large
performance drain, which means,

00:02:25.070 --> 00:02:27.390
to improve the overall
performance of your rendering

00:02:27.390 --> 00:02:29.880
system minimizing
invalidations in layouts

00:02:29.880 --> 00:02:31.677
is a really great
place to start.

00:02:31.677 --> 00:02:33.260
Of course, you'll
need some way to get

00:02:33.260 --> 00:02:35.050
more specific
information about where

00:02:35.050 --> 00:02:36.702
your problems are showing up.

00:02:36.702 --> 00:02:38.160
Firstly, you can
get a better sense

00:02:38.160 --> 00:02:39.840
of what part of your
rendering pipeline

00:02:39.840 --> 00:02:43.300
has issues by turning on the
profile GPU rendering tool

00:02:43.300 --> 00:02:45.090
on your device, which
will provide you

00:02:45.090 --> 00:02:48.050
with a handy, at-a-glance view
of the time it took to create,

00:02:48.050 --> 00:02:51.511
execute, and process portions
of your drawing pipeline.

00:02:51.511 --> 00:02:54.010
Secondly, you can get a sense
of what types of invalidations

00:02:54.010 --> 00:02:55.600
are occurring in
your application,

00:02:55.600 --> 00:02:58.870
by turning on the Show
GPU View Updates option.

00:02:58.870 --> 00:03:01.010
Any time and invalidation
occurs in your app,

00:03:01.010 --> 00:03:03.410
you'll see invalidated
part briefly flash

00:03:03.410 --> 00:03:05.680
red, which can help
you understand what

00:03:05.680 --> 00:03:08.080
parts of your screen are
getting invalidated, even

00:03:08.080 --> 00:03:09.920
for the simplest of actions.

00:03:09.920 --> 00:03:12.640
Thirdly, make sure you're using
Hierarchy Viewer to constantly

00:03:12.640 --> 00:03:14.300
check your view
hierarchy and work

00:03:14.300 --> 00:03:16.420
to keep it as flat
as possible, trying

00:03:16.420 --> 00:03:18.060
to remove any redundant views.

00:03:18.060 --> 00:03:20.060
This will help reduce the
overhead of the layout

00:03:20.060 --> 00:03:22.289
and measure phases when
they actually occur.

00:03:22.289 --> 00:03:23.580
But this is just the beginning.

00:03:23.580 --> 00:03:25.996
For more information on reducing
invalidations, flattening

00:03:25.996 --> 00:03:28.030
your hierarchy, and
using hardware layers,

00:03:28.030 --> 00:03:30.200
check out the rest of the
resources on the Android

00:03:30.200 --> 00:03:31.590
Performance Patterns page.

00:03:31.590 --> 00:03:33.620
And don't forget to join
the Google community

00:03:33.620 --> 00:03:35.620
for more great tips and tricks.

00:03:35.620 --> 00:03:36.440
So keep calm.

00:03:36.440 --> 00:03:37.270
Profile your code.

00:03:37.270 --> 00:03:40.220
And always remember,
perf matters.

