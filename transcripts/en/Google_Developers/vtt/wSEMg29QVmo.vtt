WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:02:04.850
[MUSIC PLAYING]

00:02:04.850 --> 00:02:06.520
VAN RIPER: Hi.

00:02:06.520 --> 00:02:09.840
I'm Van Riper, from the Google
Developer Relations Team and

00:02:09.840 --> 00:02:12.210
the program manager for our
Google Developer Groups, which

00:02:12.210 --> 00:02:14.880
are our local meetups run
by the community.

00:02:14.880 --> 00:02:18.940
We have over 300 of them in
95 countries to date.

00:02:18.940 --> 00:02:22.150
And I'm kicking off
this what we call

00:02:22.150 --> 00:02:22.980
Google Developer Groups--

00:02:22.980 --> 00:02:23.680
the GDGs--

00:02:23.680 --> 00:02:28.260
All Hands monthly intro to
various product areas, with a

00:02:28.260 --> 00:02:31.440
talk from Pete LePage from the
Google Chrome Developer

00:02:31.440 --> 00:02:32.320
Relations Team.

00:02:32.320 --> 00:02:35.160
I want to thank Peter Lubbers
from the Chrome team as well,

00:02:35.160 --> 00:02:39.050
as well as Louis Gray, who's
is also in the studio here

00:02:39.050 --> 00:02:42.440
with me in Mountain View for
Google Developers Live--

00:02:42.440 --> 00:02:44.160
for the infrastructure to
do these kind of talks.

00:02:44.160 --> 00:02:47.100
And now I'm going to turn
it over to Pete in

00:02:47.100 --> 00:02:48.360
our New York office.

00:02:48.360 --> 00:02:48.870
PETE LEPAGE: Awesome.

00:02:48.870 --> 00:02:49.760
Thanks very much, Van.

00:02:49.760 --> 00:02:51.790
It's awesome to be here.

00:02:51.790 --> 00:02:54.630
And thanks for getting everybody
together to talk

00:02:54.630 --> 00:02:55.870
about Chrome apps.

00:02:55.870 --> 00:02:59.770
I think it's a really exciting
evolution of some of the stuff

00:02:59.770 --> 00:03:00.340
that we have.

00:03:00.340 --> 00:03:02.970
And I think it's something
that a lot of the Google

00:03:02.970 --> 00:03:05.010
Developers are going to get
really excited about, because

00:03:05.010 --> 00:03:08.550
it means that you can build apps
that look and feel native

00:03:08.550 --> 00:03:13.360
on your desktop, just using
HTML and web technologies.

00:03:13.360 --> 00:03:14.480
So why don't we jump in?

00:03:14.480 --> 00:03:16.580
I've got a couple of slides
that I want to walk folks

00:03:16.580 --> 00:03:21.240
through and show a few things as
we go so that you can get a

00:03:21.240 --> 00:03:23.510
little bit of an idea of what's
going on with Chrome

00:03:23.510 --> 00:03:29.040
apps, how you can use them,
and why they're so cool.

00:03:29.040 --> 00:03:34.000
So let's start by having a look
at a couple of the key

00:03:34.000 --> 00:03:36.060
points about Chrome apps.

00:03:36.060 --> 00:03:39.525
So there's four things we're
going to cover today.

00:03:39.525 --> 00:03:42.310
First we're going to talk about
how Chrome apps break

00:03:42.310 --> 00:03:43.590
out of the browser.

00:03:43.590 --> 00:03:47.290
They don't feel like
web apps anymore.

00:03:47.290 --> 00:03:50.300
They now feel like they are
installed, native apps.

00:03:50.300 --> 00:03:52.530
The second thing we're going to
talk about is the enhanced

00:03:52.530 --> 00:03:53.470
user interface.

00:03:53.470 --> 00:03:56.500
So how you can really take all
of the stuff that you're used

00:03:56.500 --> 00:04:00.000
to using today and really
be able to make a really

00:04:00.000 --> 00:04:03.640
beautiful user interface that
looks and feels like a native

00:04:03.640 --> 00:04:07.610
app, without looking like
the stuff that you

00:04:07.610 --> 00:04:10.180
see on the web today.

00:04:10.180 --> 00:04:13.890
We'll talk about how these apps
work offline, by default.

00:04:13.890 --> 00:04:16.300
This is one of the coolest
things, I think, about this

00:04:16.300 --> 00:04:18.350
new Chrome packaged
app platform.

00:04:18.350 --> 00:04:22.320
It means that your apps work
offline, by default.

00:04:22.320 --> 00:04:25.350
Everything that you're used
to being able to have with

00:04:25.350 --> 00:04:28.650
offline apps, just
right there.

00:04:28.650 --> 00:04:31.950
And then finally, we'll talk
about some of the new APIs,

00:04:31.950 --> 00:04:34.380
things that you can do with
these Chrome apps that you

00:04:34.380 --> 00:04:37.550
just simply can't do with
the drive-by web.

00:04:37.550 --> 00:04:41.050
Drive-by web is a great place,
but do you really want to open

00:04:41.050 --> 00:04:46.870
up things like USB or networking
APIs in case

00:04:46.870 --> 00:04:51.370
somebody gets access to them
in some not so nice, not so

00:04:51.370 --> 00:04:53.990
friendly kind of way.

00:04:53.990 --> 00:04:56.670
So I think the best thing to do
is actually just start off

00:04:56.670 --> 00:04:59.420
and how to look at a
couple of demos.

00:04:59.420 --> 00:05:01.230
So I've got here on
my computer a

00:05:01.230 --> 00:05:02.230
couple of things running.

00:05:02.230 --> 00:05:05.470
And of course, I
always do this.

00:05:05.470 --> 00:05:07.870
You move your mouse to the wrong
place, and you kick your

00:05:07.870 --> 00:05:08.290
screen saver in.

00:05:08.290 --> 00:05:11.550
So let's not do that again.

00:05:11.550 --> 00:05:12.930
So I'm going to bring
up Chrome.

00:05:12.930 --> 00:05:16.990
In fact, the slide deck that
we're looking at is a Chrome

00:05:16.990 --> 00:05:18.530
app as well.

00:05:18.530 --> 00:05:23.080
But the ones I want to take a
look at are here already.

00:05:23.080 --> 00:05:27.410
So today, with Chrome apps,
they're being launched from

00:05:27.410 --> 00:05:28.840
the New Tab page.

00:05:28.840 --> 00:05:31.100
In the future, they'll get
launched either from the task

00:05:31.100 --> 00:05:32.570
bar or from a launcher.

00:05:32.570 --> 00:05:35.150
But right now, we're
still in a little

00:05:35.150 --> 00:05:37.380
bit of an early phase.

00:05:37.380 --> 00:05:40.240
And so I'll bring one up.

00:05:40.240 --> 00:05:41.370
So this is weather app.

00:05:41.370 --> 00:05:44.590
It's telling you that, here in
New York, it's 45 degrees and

00:05:44.590 --> 00:05:46.480
a high of 50 today.

00:05:46.480 --> 00:05:48.240
I want to point out a couple
of things though.

00:05:48.240 --> 00:05:50.970
Notice that there's no
address bar here.

00:05:50.970 --> 00:05:56.100
There's no look and feel that
this looks like a web

00:05:56.100 --> 00:05:57.320
application.

00:05:57.320 --> 00:05:59.250
I can move it around.

00:05:59.250 --> 00:06:02.520
I can, interestingly,
close it using a

00:06:02.520 --> 00:06:03.740
different close mechanism.

00:06:03.740 --> 00:06:05.670
It doesn't have the typical--

00:06:05.670 --> 00:06:08.950
on this Mac that I'm using--
the X, the minus,

00:06:08.950 --> 00:06:10.950
and the plus sign.

00:06:10.950 --> 00:06:13.380
But you can have those
experiences if you want.

00:06:13.380 --> 00:06:16.200
I'll bring up a calculator.

00:06:16.200 --> 00:06:18.570
And again, these are just a
couple simple examples that

00:06:18.570 --> 00:06:19.610
you can have a look at.

00:06:19.610 --> 00:06:22.390
But notice the calculator
does have those pieces.

00:06:22.390 --> 00:06:25.560
Again, no address bar or
anything like that.

00:06:25.560 --> 00:06:28.840
If I wanted to be so brave, I
could go turn my network off.

00:06:28.840 --> 00:06:31.500
So my Wi-Fi is off.

00:06:31.500 --> 00:06:34.920
If I start the calculator again,
sure enough, it works.

00:06:34.920 --> 00:06:38.010
It behaves exactly like
I expect it to.

00:06:38.010 --> 00:06:39.920
There's no real need for
network connection.

00:06:39.920 --> 00:06:43.660
I can say on this, one
plus one equals two.

00:06:43.660 --> 00:06:44.220
Woo-hoo.

00:06:44.220 --> 00:06:46.530
So we know that our
math works.

00:06:46.530 --> 00:06:48.290
OK.

00:06:48.290 --> 00:06:52.560
One of my favorite and, I think,
more interesting apps

00:06:52.560 --> 00:06:55.492
right now is something that one
of the guys on the Chrome

00:06:55.492 --> 00:06:57.420
Dev Rel Team worked on.

00:06:57.420 --> 00:06:59.430
And it was a Markdown app.

00:06:59.430 --> 00:07:02.400
We'll talk about why this is
kind of cool in a sec.

00:07:02.400 --> 00:07:05.000
But I wanted to show you
a couple other things.

00:07:05.000 --> 00:07:07.180
I can go create a new file.

00:07:07.180 --> 00:07:08.950
I can open a file.

00:07:08.950 --> 00:07:10.930
I can save it or print it.

00:07:10.930 --> 00:07:13.680
So I'm just going to go here,
and I'm going to open this

00:07:13.680 --> 00:07:17.440
file, grab this Markdown file.

00:07:17.440 --> 00:07:20.690
So one of the things to notice
is I can open files anywhere

00:07:20.690 --> 00:07:22.140
on my desktop.

00:07:22.140 --> 00:07:23.780
And sure enough, here's
the file.

00:07:23.780 --> 00:07:25.490
And we've got two pieces here.

00:07:25.490 --> 00:07:30.240
We've got the left hand panel
here, which has the Markdown,

00:07:30.240 --> 00:07:33.430
and the right hand panel that
shows the actual Markdown

00:07:33.430 --> 00:07:34.860
rendered in the HTML.

00:07:34.860 --> 00:07:39.700
The really neat thing is that
you can edit this on the fly,

00:07:39.700 --> 00:07:41.060
live, in real time.

00:07:41.060 --> 00:07:43.310
So I can do things like,
oh yeah, I just

00:07:43.310 --> 00:07:43.830
don't really want that.

00:07:43.830 --> 00:07:45.540
[? Is it ?] one or two?

00:07:45.540 --> 00:07:49.350
So you've got the ability to
be able to go and edit

00:07:49.350 --> 00:07:51.360
Markdown in real time.

00:07:51.360 --> 00:07:55.840
One of the neat things about
this is it's actually using

00:07:55.840 --> 00:08:00.790
Node in the back end to do the
compilation and convert the

00:08:00.790 --> 00:08:07.920
Markdown into HTML and render
that HTML in the application.

00:08:07.920 --> 00:08:10.510
So let's close this guy.

00:08:10.510 --> 00:08:13.010
And I'm going to bring my
Chrome app back up,

00:08:13.010 --> 00:08:14.660
along with my slides.

00:08:14.660 --> 00:08:20.220
And let's go and move on a
little bit and take a look at

00:08:20.220 --> 00:08:22.310
a couple other points in here.

00:08:22.310 --> 00:08:24.670
So we saw the demos,
a couple of these.

00:08:24.670 --> 00:08:27.670
Let's talk first about that what
it really means to break

00:08:27.670 --> 00:08:29.140
out of the browser.

00:08:29.140 --> 00:08:31.810
So when I talk about breaking
out of the browser, one of the

00:08:31.810 --> 00:08:34.929
big things that I'm really
talking about is that they're

00:08:34.929 --> 00:08:37.030
launched from outside
the browser.

00:08:37.030 --> 00:08:40.590
Now today, unfortunately we
don't have that in today's

00:08:40.590 --> 00:08:41.860
Chrome build.

00:08:41.860 --> 00:08:45.070
But the plan is that you'll be
able to go to the Start menu,

00:08:45.070 --> 00:08:49.220
you'll be able to go to the
Dock, or wherever you launch

00:08:49.220 --> 00:08:53.130
your applications, and you'll be
able to go and launch those

00:08:53.130 --> 00:08:55.170
apps without having to go
and do anything crazy.

00:08:55.170 --> 00:08:58.480
It's not like you have
to open the browser.

00:08:58.480 --> 00:09:02.480
And that's a really important
thing, because users think

00:09:02.480 --> 00:09:05.910
about the web as something
that only works

00:09:05.910 --> 00:09:07.150
when they're connected.

00:09:07.150 --> 00:09:09.910
These apps work when they're
disconnected, when they're not

00:09:09.910 --> 00:09:11.560
necessarily on the network.

00:09:11.560 --> 00:09:14.730
So getting them out of the
browser is a really important

00:09:14.730 --> 00:09:17.910
thing so that there isn't a
level of confusion there for

00:09:17.910 --> 00:09:19.430
some users.

00:09:19.430 --> 00:09:23.180
The other thing is that these
apps have the same first-class

00:09:23.180 --> 00:09:25.440
feel as other OS windows.

00:09:25.440 --> 00:09:27.640
So that means you can alt+tab
between them.

00:09:27.640 --> 00:09:30.300
You can go in and you can see
the apps that are running in

00:09:30.300 --> 00:09:31.570
your task list.

00:09:31.570 --> 00:09:35.560
They have that same look and
feel that you expect from a

00:09:35.560 --> 00:09:38.090
native application.

00:09:38.090 --> 00:09:41.130
In terms of the enhanced user
interface, there's a couple of

00:09:41.130 --> 00:09:41.860
neat things.

00:09:41.860 --> 00:09:43.920
We've seen some of
these already.

00:09:43.920 --> 00:09:46.450
You've got full control
over multiple windows.

00:09:46.450 --> 00:09:51.190
In a web app, you can pop open
a new window, but typically

00:09:51.190 --> 00:09:52.950
it'll get blocked by
a pop-up blocker.

00:09:52.950 --> 00:09:56.930
Or if you go to do something
where you just don't expect

00:09:56.930 --> 00:09:58.920
certain behaviors,
you may have that

00:09:58.920 --> 00:10:00.540
stopped in its tracks.

00:10:00.540 --> 00:10:02.940
And because you've got that
address bar, you really have

00:10:02.940 --> 00:10:07.050
that concept of that
single window.

00:10:07.050 --> 00:10:10.820
You also have full customization
of the frame,

00:10:10.820 --> 00:10:12.350
without the browser Chrome.

00:10:12.350 --> 00:10:14.700
You noticed when I brought
up a couple of those apps

00:10:14.700 --> 00:10:18.070
earlier, we didn't have
the address bar.

00:10:18.070 --> 00:10:19.410
We didn't have the
browser frame.

00:10:19.410 --> 00:10:21.180
We didn't have the things
that you typically

00:10:21.180 --> 00:10:23.190
expect out of the web.

00:10:23.190 --> 00:10:29.160
Links open in a new tab, so that
if I go and click on this

00:10:29.160 --> 00:10:32.990
link, sure enough, it
opens in my browser.

00:10:32.990 --> 00:10:34.740
Now it's not going to open
anything, because I've

00:10:34.740 --> 00:10:36.140
disconnected myself
from the network.

00:10:36.140 --> 00:10:40.790
So let's go ahead and turn
the network back on.

00:10:40.790 --> 00:10:43.140
And we'll go back to
the slides here.

00:10:43.140 --> 00:10:45.570
So the links open in the
app, not the browser.

00:10:48.170 --> 00:10:52.150
The third point is that these
apps work offline by default.

00:10:52.150 --> 00:10:54.590
They work offline by default,
because they use the same

00:10:54.590 --> 00:11:00.030
packaged app experience that
we have in the current

00:11:00.030 --> 00:11:02.910
packaged app system, where
all of the resources--

00:11:02.910 --> 00:11:07.130
the HTML, the JavaScript, the
CSS, all of the images--

00:11:07.130 --> 00:11:09.190
sit locally on the
user's computer.

00:11:09.190 --> 00:11:12.710
So when they click Install,
it really is installing

00:11:12.710 --> 00:11:15.920
everything that they need to
be able to run this app.

00:11:15.920 --> 00:11:19.270
Just like when they click on
Install for any other native

00:11:19.270 --> 00:11:19.870
application--

00:11:19.870 --> 00:11:22.870
whether they install it through
a CD, whether they

00:11:22.870 --> 00:11:27.400
install it through an app
store or whatever--

00:11:27.400 --> 00:11:31.560
that app runs locally because
all the resources are sitting

00:11:31.560 --> 00:11:33.530
on the user's machine.

00:11:33.530 --> 00:11:36.270
We also enforced separation
of some of the

00:11:36.270 --> 00:11:38.640
client UI and data.

00:11:38.640 --> 00:11:43.390
We do that because the client UI
is sitting on the computer,

00:11:43.390 --> 00:11:46.390
and we need to go get that data
from the network somehow.

00:11:46.390 --> 00:11:51.260
So either through making XML
HTTP AJAX request, or maybe

00:11:51.260 --> 00:11:53.460
you've got some other
way of getting data

00:11:53.460 --> 00:11:56.300
into the user's machine.

00:11:56.300 --> 00:11:59.070
For example, in the Markdown
app, where I just opened the

00:11:59.070 --> 00:12:01.970
file locally, hit File, Open.

00:12:01.970 --> 00:12:07.030
And sure enough, I was able to
load the data from there.

00:12:07.030 --> 00:12:11.290
The APIs are also something
really interesting.

00:12:11.290 --> 00:12:17.170
We're providing a bunch of new
APIs that are available, that

00:12:17.170 --> 00:12:19.120
will provide new
functionality.

00:12:19.120 --> 00:12:22.750
So things like being able to
access USB, and networking,

00:12:22.750 --> 00:12:25.910
and Bluetooth.

00:12:25.910 --> 00:12:29.580
But we're also providing a set
of APIs that will do things

00:12:29.580 --> 00:12:33.140
like provide analytics or
user authentication.

00:12:33.140 --> 00:12:35.410
Right now, you try and go
authenticate a user and

00:12:35.410 --> 00:12:38.100
they're disconnected from the
net, it's going to be a little

00:12:38.100 --> 00:12:39.730
bit hard to do that.

00:12:39.730 --> 00:12:42.340
So the important thing here, is
that we want to make sure

00:12:42.340 --> 00:12:45.770
that these APIs degrade
gracefully, so that you don't

00:12:45.770 --> 00:12:48.220
have to go and handle
the-- like, ah

00:12:48.220 --> 00:12:49.920
crap, how do I do this?

00:12:49.920 --> 00:12:53.500
How do I go and make sure that
my behavior is right?

00:12:53.500 --> 00:12:58.160
It's really important to make
sure that we do this right.

00:12:58.160 --> 00:13:00.590
And then finally, again, I'll
come back to this one.

00:13:00.590 --> 00:13:02.320
But again, the apps
are launched

00:13:02.320 --> 00:13:03.950
from outside the browser.

00:13:03.950 --> 00:13:08.390
Removing that confusion from
folks going, oh, crap.

00:13:08.390 --> 00:13:09.830
I'm on the web right now.

00:13:09.830 --> 00:13:11.300
So I'm using my browser.

00:13:11.300 --> 00:13:13.900
That means this isn't going to
work, or it is going to work.

00:13:13.900 --> 00:13:18.680
The experience just works
because users are launching

00:13:18.680 --> 00:13:23.250
the app from outside
of their browser.

00:13:23.250 --> 00:13:24.960
Now there's a whole
bunch of new APIs.

00:13:24.960 --> 00:13:28.620
And this is an area that is
tremendously exciting.

00:13:28.620 --> 00:13:31.300
There are so many new things
that I think developers are

00:13:31.300 --> 00:13:33.770
going to be able to
do with this.

00:13:33.770 --> 00:13:37.070
First, there's a set of system
APIs that are going to allow

00:13:37.070 --> 00:13:41.040
you access to the system that
you've never had access to

00:13:41.040 --> 00:13:42.370
before through the web.

00:13:42.370 --> 00:13:45.630
You always had to go and either
write a native app, or

00:13:45.630 --> 00:13:49.410
maybe you had to go and write
some kind of plug-in, or some

00:13:49.410 --> 00:13:52.430
other experience that
just wasn't a lot of

00:13:52.430 --> 00:13:53.725
fun for us to do.

00:13:53.725 --> 00:13:55.890
I like writing JavaScript.

00:13:55.890 --> 00:13:57.850
I don't like writing C++.

00:13:57.850 --> 00:13:59.900
I don't like writing Java.

00:13:59.900 --> 00:14:03.790
I want to write my apps
using JavaScript.

00:14:03.790 --> 00:14:08.340
So by giving access to system
APIs, we can do that through

00:14:08.340 --> 00:14:09.490
JavaScript.

00:14:09.490 --> 00:14:11.930
Some of the new system APIs that
we're giving access to

00:14:11.930 --> 00:14:14.970
include things like USB.

00:14:14.970 --> 00:14:19.130
So if you plug a USB device into
your computer, you can

00:14:19.130 --> 00:14:21.090
access those devices.

00:14:21.090 --> 00:14:22.540
You can send commands to them.

00:14:22.540 --> 00:14:26.010
You can get interesting data
back and forth from them.

00:14:26.010 --> 00:14:30.610
One of the things that the
team's been working on is

00:14:30.610 --> 00:14:34.180
getting a Kinect to work so that
you can use the Kinect as

00:14:34.180 --> 00:14:38.190
some kind of input to your
applications, that you can

00:14:38.190 --> 00:14:42.930
turn that into gaming
input for web games.

00:14:42.930 --> 00:14:44.300
Something pretty slick--

00:14:44.300 --> 00:14:46.590
really neat to be able to do.

00:14:46.590 --> 00:14:48.700
We've got networking APIs.

00:14:48.700 --> 00:14:52.520
In fact, one of the
networking APIs--

00:14:52.520 --> 00:14:53.970
there's a couple of them.

00:14:53.970 --> 00:14:58.220
There's TCP, send and receive,
and there's also

00:14:58.220 --> 00:15:00.130
UDP send and receive.

00:15:00.130 --> 00:15:02.920
That means you can open up a
port and work as a server.

00:15:02.920 --> 00:15:07.140
You could write a web server
within a browser, which is a

00:15:07.140 --> 00:15:09.420
little bit meta, but
kind of cool.

00:15:09.420 --> 00:15:12.970
You actually get the browser
being able to serve stuff.

00:15:12.970 --> 00:15:19.610
You can also send just TCP
requests and send TCP data

00:15:19.610 --> 00:15:21.590
over the network.

00:15:21.590 --> 00:15:24.390
So for things like, the new
Phillips Hue, those new lights

00:15:24.390 --> 00:15:29.220
that are controllable via
networking, you can actually

00:15:29.220 --> 00:15:32.830
go and control those through
a web application.

00:15:32.830 --> 00:15:35.790
I've seen things like
IR controllers

00:15:35.790 --> 00:15:37.600
that work over TCP.

00:15:37.600 --> 00:15:40.770
So you send a TCP connection
to the IR controller.

00:15:40.770 --> 00:15:43.430
And then the IR controller
sends out an IR blast.

00:15:43.430 --> 00:15:44.630
Maybe it turns your TV on.

00:15:44.630 --> 00:15:46.390
Maybe it turns your air
conditioner on.

00:15:46.390 --> 00:15:48.850
Whatever the case is, you
can go through and

00:15:48.850 --> 00:15:51.060
be able to get that.

00:15:51.060 --> 00:15:53.660
There's also a set of
Shared Data APIs.

00:15:53.660 --> 00:15:57.390
Shared Data APIs allows us to
very easily go in and say,

00:15:57.390 --> 00:16:00.100
hey, I want to be able to
store data on the user's

00:16:00.100 --> 00:16:07.580
computer, or be able to load
data from alternate sources.

00:16:07.580 --> 00:16:10.380
If you're a Chrome user, you're
used to being signed

00:16:10.380 --> 00:16:13.860
into your browser, probably, and
love the fact that Chrome

00:16:13.860 --> 00:16:18.320
remembers who you are and your
usernames, passwords, your

00:16:18.320 --> 00:16:21.020
bookmarks, all that kind of
stuff across all the different

00:16:21.020 --> 00:16:22.410
devices that you're on.

00:16:22.410 --> 00:16:26.150
Well, with these Shared Data
APIs, as an application, we

00:16:26.150 --> 00:16:30.850
can also store data, our
application data, in the

00:16:30.850 --> 00:16:35.760
Google Cloud, so that when I
sign in on my computer, it

00:16:35.760 --> 00:16:36.440
works just fine.

00:16:36.440 --> 00:16:38.490
But if I then go switch to
another computer and sign into

00:16:38.490 --> 00:16:42.670
Chrome, start this app up, all
of that data is all synced

00:16:42.670 --> 00:16:45.980
down just in the same
way that it was if I

00:16:45.980 --> 00:16:48.880
had used my own computer.

00:16:48.880 --> 00:16:51.110
Finally, there's a set of
Service APIs that we're

00:16:51.110 --> 00:16:51.970
working on.

00:16:51.970 --> 00:16:54.210
So these will include things
like being able

00:16:54.210 --> 00:16:55.460
to do Google Analytics.

00:16:55.460 --> 00:16:58.600
So I can see, how many people
are using my app?

00:16:58.600 --> 00:17:01.780
And I can track those
kinds of things.

00:17:01.780 --> 00:17:05.040
Google Authentication, so that I
can sign in and validate the

00:17:05.040 --> 00:17:07.910
user as who they say they are.

00:17:07.910 --> 00:17:10.380
Hopefully they think they are
who they really are, because

00:17:10.380 --> 00:17:12.400
that would be a little
confusing.

00:17:12.400 --> 00:17:14.550
But being able to
validate users.

00:17:14.550 --> 00:17:17.750
And there's a bunch of other
service level APIs that we're

00:17:17.750 --> 00:17:22.630
working on and will be coming
over the next little while.

00:17:22.630 --> 00:17:26.700
The programming model is the
same, or very similar to

00:17:26.700 --> 00:17:27.569
Chrome apps.

00:17:27.569 --> 00:17:30.960
If you've written a Chrome
packaged app in the past,

00:17:30.960 --> 00:17:35.910
under the current Chrome Web
Store, you're already probably

00:17:35.910 --> 00:17:37.860
80% of the way there.

00:17:37.860 --> 00:17:40.060
It's based on that Chrome
packaged app where all the

00:17:40.060 --> 00:17:41.450
resources sit locally.

00:17:41.450 --> 00:17:45.840
The one thing that changes is
instead of having the index

00:17:45.840 --> 00:17:48.260
files, that first file that
gets loaded when the

00:17:48.260 --> 00:17:51.880
application starts, there's a
background page that works

00:17:51.880 --> 00:17:52.990
sort of as the hub.

00:17:52.990 --> 00:17:55.510
If you've written any kind of
native code-- maybe a native

00:17:55.510 --> 00:17:58.420
mobile app, maybe a Windows
or a Mac app--

00:17:58.420 --> 00:18:02.080
you're used to having that main
function body that kicks

00:18:02.080 --> 00:18:04.930
off the app, that opens that
first form, or opens that

00:18:04.930 --> 00:18:06.020
first window.

00:18:06.020 --> 00:18:06.835
It's very similar.

00:18:06.835 --> 00:18:08.300
And we'll take a look
at the code.

00:18:08.300 --> 00:18:11.940
We're actually going to go and
write a Hello World app and

00:18:11.940 --> 00:18:16.260
take a look at some other
examples in a minute.

00:18:16.260 --> 00:18:18.580
The app lifetime is controlled
by the run time.

00:18:18.580 --> 00:18:21.390
And it's all event driven, so
that you could say, when the

00:18:21.390 --> 00:18:22.450
app starts, do this.

00:18:22.450 --> 00:18:24.300
When the window closes,
do this.

00:18:24.300 --> 00:18:27.400
You've got that control and
ability to be able to do

00:18:27.400 --> 00:18:29.240
whatever you need to do.

00:18:29.240 --> 00:18:32.100
It is single-page, and there
isn't really that concept of

00:18:32.100 --> 00:18:32.870
navigation.

00:18:32.870 --> 00:18:35.050
There's no address bar
there anymore.

00:18:35.050 --> 00:18:37.410
So you can't go back and forth
between different pages.

00:18:37.410 --> 00:18:39.030
You can't do those
kinds of things.

00:18:39.030 --> 00:18:40.640
Now you can load different
pages.

00:18:40.640 --> 00:18:42.720
You can open different
windows.

00:18:42.720 --> 00:18:48.220
But the core concept is around
that single-page application.

00:18:48.220 --> 00:18:52.050
There are few web features
that are deprecated for a

00:18:52.050 --> 00:18:53.220
couple of reasons.

00:18:53.220 --> 00:18:59.390
So for things like
window.navigation, window.URL

00:18:59.390 --> 00:19:01.880
because they just don't make
sense when you don't have the

00:19:01.880 --> 00:19:02.860
address bar.

00:19:02.860 --> 00:19:03.830
There's a couple others.

00:19:03.830 --> 00:19:06.750
And there's some good
documentation on what's gone

00:19:06.750 --> 00:19:13.810
away and why it's changed, as
well as good alternatives for

00:19:13.810 --> 00:19:16.770
how you can go use some
of those things.

00:19:16.770 --> 00:19:19.030
So let's talk for a moment
about the security model.

00:19:19.030 --> 00:19:21.600
I already noticed a couple
questions pop up from people

00:19:21.600 --> 00:19:24.410
saying, hey, so what about the
security model on this?

00:19:24.410 --> 00:19:28.191
Or somebody asked, well,
what about viruses?

00:19:28.191 --> 00:19:31.480
Well, the security
model is really

00:19:31.480 --> 00:19:33.760
around process isolation.

00:19:33.760 --> 00:19:37.260
So that means that applications,
your app, is

00:19:37.260 --> 00:19:40.060
running in its own
isolated window.

00:19:40.060 --> 00:19:43.430
So sandbox, just like
other Chrome apps,

00:19:43.430 --> 00:19:44.840
you don't have to--

00:19:44.840 --> 00:19:46.580
and other web pages.

00:19:46.580 --> 00:19:48.440
They're not going to be
able to access other

00:19:48.440 --> 00:19:49.760
applications' data.

00:19:49.760 --> 00:19:52.090
They're not going to be able to
get into things that they

00:19:52.090 --> 00:19:54.720
shouldn't be able to get into.

00:19:54.720 --> 00:19:57.800
But they also have a set
of permissions model.

00:19:57.800 --> 00:20:01.740
That means that applications
need to ask permission before

00:20:01.740 --> 00:20:03.720
they can do certain things.

00:20:03.720 --> 00:20:07.250
For example, if you don't have
the USB permission, you can't

00:20:07.250 --> 00:20:09.960
use the USB APIs.

00:20:09.960 --> 00:20:11.670
If you don't have the networking
permissions, you

00:20:11.670 --> 00:20:13.800
can't use the networking APIs.

00:20:13.800 --> 00:20:17.260
So we really tried to make sure
that when a user installs

00:20:17.260 --> 00:20:21.180
an application, they know what
APIs are available and what

00:20:21.180 --> 00:20:23.320
APIs that the application
is being called.

00:20:23.320 --> 00:20:26.410
So that, they can make an
informed decision about how to

00:20:26.410 --> 00:20:30.670
go and whether they want to
trust that application or not.

00:20:30.670 --> 00:20:34.760
Because these apps are running
HTML and JavaScript, there

00:20:34.760 --> 00:20:38.250
really isn't an easy
way for viruses in

00:20:38.250 --> 00:20:39.940
the traditional sense.

00:20:39.940 --> 00:20:44.620
So it's much more about
protecting user data.

00:20:44.620 --> 00:20:49.450
Which actually leads perfectly
into the next comment, which

00:20:49.450 --> 00:20:51.590
is something called Content
Security Policy.

00:20:51.590 --> 00:20:53.810
If you're not familiar with
Content Security Policy,

00:20:53.810 --> 00:20:57.360
there's a great article up on
HTML5Rocks that I really

00:20:57.360 --> 00:20:58.980
recommend you check out.

00:20:58.980 --> 00:21:02.260
HTML5Rocks' article on
"Introduction to Content

00:21:02.260 --> 00:21:07.490
Security Policy" lays out all
of the great details.

00:21:07.490 --> 00:21:08.610
Short description of it--

00:21:08.610 --> 00:21:12.820
Content Security Policy helps
protect applications from

00:21:12.820 --> 00:21:15.370
cross-site scripting
vulnerabilities.

00:21:15.370 --> 00:21:19.730
So typically, when a web app
or a website is hit with a

00:21:19.730 --> 00:21:22.120
cross-site scripting
vulnerability, it's because

00:21:22.120 --> 00:21:25.800
somebody's able to inject a
bunch of JavaScript into

00:21:25.800 --> 00:21:27.740
somebody else's application.

00:21:27.740 --> 00:21:31.450
So if a bad guy manages to
inject some JavaScript into

00:21:31.450 --> 00:21:37.980
MyBank.com, and when I go sign
in on MyBank, that JavaScript

00:21:37.980 --> 00:21:41.440
sends my username and password
back to his website.

00:21:41.440 --> 00:21:45.400
So all of a sudden, evilguy.com
is able to get

00:21:45.400 --> 00:21:48.830
stuff that I don't necessarily
want to share.

00:21:48.830 --> 00:21:51.430
Now the way that Content
Security Policy helps to

00:21:51.430 --> 00:21:55.100
protect web applications from
cross-site scripting

00:21:55.100 --> 00:22:00.090
vulnerabilities is by limiting
where script can run and how

00:22:00.090 --> 00:22:01.180
it can run.

00:22:01.180 --> 00:22:06.480
So typically, when on any page,
if you don't have any

00:22:06.480 --> 00:22:10.080
Content Security Policy rules in
place, you could put script

00:22:10.080 --> 00:22:12.100
in line in your HTML.

00:22:12.100 --> 00:22:14.420
You could do evals.

00:22:14.420 --> 00:22:18.050
You could do all kinds of things
that are interesting to

00:22:18.050 --> 00:22:21.060
do and typically some
of the things that

00:22:21.060 --> 00:22:22.590
we're used to doing.

00:22:22.590 --> 00:22:25.840
Content Security Policy, the
rules that are implemented

00:22:25.840 --> 00:22:33.640
within Chrome apps, limit you
from putting any inline

00:22:33.640 --> 00:22:35.210
JavaScript within your HTML.

00:22:35.210 --> 00:22:38.745
So that means that you can't do
the script, close bracket,

00:22:38.745 --> 00:22:42.540
blah blah blah blah blah, and
put some script in there.

00:22:42.540 --> 00:22:45.570
You have to link to a
script source file.

00:22:45.570 --> 00:22:48.830
You actually have to put your
script into a separate file.

00:22:48.830 --> 00:22:51.910
We'll take a look at this when
we do some of the demos.

00:22:51.910 --> 00:22:55.580
The other thing that this limits
you from being able to

00:22:55.580 --> 00:23:00.300
do is anything like eval, or
return new function, or any

00:23:00.300 --> 00:23:02.340
equivalents to that
kind of thing.

00:23:02.340 --> 00:23:04.790
So if you're used to using evals
or anything like that,

00:23:04.790 --> 00:23:06.540
you're going to need to
change that process

00:23:06.540 --> 00:23:08.810
just a little bit.

00:23:08.810 --> 00:23:12.740
In some cases, some MVC
frameworks and some templating

00:23:12.740 --> 00:23:15.265
libraries do use eval.

00:23:15.265 --> 00:23:18.863
We're working with some of those
templating libraries to

00:23:18.863 --> 00:23:21.200
try and get them to switch
and not use those.

00:23:21.200 --> 00:23:24.910
But you may run into that issue
if you're using any of

00:23:24.910 --> 00:23:26.830
these things.

00:23:26.830 --> 00:23:28.330
There's also storage
isolation.

00:23:28.330 --> 00:23:33.090
So any data that you store for
the user's profile doesn't get

00:23:33.090 --> 00:23:34.130
shared between apps.

00:23:34.130 --> 00:23:37.260
There's no way to get
any additional data.

00:23:37.260 --> 00:23:39.680
And there's an explicit
shared data API.

00:23:39.680 --> 00:23:42.690
So we're really limiting
some of the stuff.

00:23:42.690 --> 00:23:45.500
And finally, you don't have
access to some of the

00:23:45.500 --> 00:23:46.440
extension APIs.

00:23:46.440 --> 00:23:49.650
One, it doesn't really make
sense to be able to go grab,

00:23:49.650 --> 00:23:52.010
like, the tabs in Chrome.

00:23:52.010 --> 00:23:54.840
Because you're an application
that has nothing to do with

00:23:54.840 --> 00:23:57.000
the browser, even though
you're written on web

00:23:57.000 --> 00:23:59.460
technology.

00:23:59.460 --> 00:24:02.970
I want to call out one other
cool and different thing.

00:24:02.970 --> 00:24:08.230
There's a Web View control, that
if you want to go and put

00:24:08.230 --> 00:24:11.160
live web content into your
app, you can use

00:24:11.160 --> 00:24:12.250
this Web View control.

00:24:12.250 --> 00:24:15.440
So you notice there,
I've got Web View.

00:24:15.440 --> 00:24:19.980
And all I do is open Web View,
provide a source, link to that

00:24:19.980 --> 00:24:22.970
particular place, and
it renders that.

00:24:22.970 --> 00:24:26.040
So that's particularly useful
if in your application you

00:24:26.040 --> 00:24:27.230
want to be running--

00:24:27.230 --> 00:24:31.220
or you want to put ads in your
application, and your ads are

00:24:31.220 --> 00:24:34.050
going to get served live, or
something to that effect.

00:24:34.050 --> 00:24:38.130
So the Web View is just an easy
way that you can put live

00:24:38.130 --> 00:24:42.408
HTML into your application.

00:24:42.408 --> 00:24:43.470
All right.

00:24:43.470 --> 00:24:45.860
So I think I've talked
too much.

00:24:45.860 --> 00:24:50.270
Let's actually go and take a
look at building our own

00:24:50.270 --> 00:24:51.850
Chrome app.

00:24:51.850 --> 00:24:53.710
So I'm going to get
out of here.

00:24:53.710 --> 00:24:57.600
So I'll close this down.

00:24:57.600 --> 00:25:04.470
So I've got the basics here in
Sublime for what I want to

00:25:04.470 --> 00:25:05.890
show and what I need.

00:25:05.890 --> 00:25:10.450
So first off, there's basically
three steps that we

00:25:10.450 --> 00:25:14.770
need to walk through in order to
be able to write our first

00:25:14.770 --> 00:25:15.900
Chrome app.

00:25:15.900 --> 00:25:19.680
So the first thing we need to do
is edit our manifest file.

00:25:19.680 --> 00:25:22.020
So if you've written a Chrome
app before and you're used to

00:25:22.020 --> 00:25:24.160
the manifest file, you've seen
it before, maybe you've

00:25:24.160 --> 00:25:27.690
written a Chrome extension the
manifest file is very similar.

00:25:27.690 --> 00:25:31.930
It's basically a JSON file
that defines how the

00:25:31.930 --> 00:25:35.840
application should get its
resources, where is should get

00:25:35.840 --> 00:25:37.960
its files, and all that
kind of stuff.

00:25:37.960 --> 00:25:40.250
So let's go ahead,
and we'll start.

00:25:40.250 --> 00:25:42.450
So I'm going to say name.

00:25:42.450 --> 00:25:47.750
And hello there.

00:25:47.750 --> 00:25:48.180
All right.

00:25:48.180 --> 00:25:49.340
So we've defined our name.

00:25:49.340 --> 00:25:52.750
Next thing we need
is a description.

00:25:52.750 --> 00:25:54.490
Always fun to type live.

00:25:54.490 --> 00:25:56.970
This is my description.

00:25:56.970 --> 00:26:00.610
I love it when it auto completes
stuff for me.

00:26:00.610 --> 00:26:01.810
We need a version number.

00:26:01.810 --> 00:26:05.626
So I'm going to say let's
call this 0.5.

00:26:05.626 --> 00:26:10.770
One little hint for folks, as
you start to put your apps in,

00:26:10.770 --> 00:26:13.450
don't go with version 0.1.

00:26:13.450 --> 00:26:16.750
Because if you upload an app
that's 0.1, users are going to

00:26:16.750 --> 00:26:19.740
go look at it and be like, why
would I want to install 0.1?

00:26:19.740 --> 00:26:22.320
That's like before beta.

00:26:22.320 --> 00:26:26.250
So put a reasonable
version number.

00:26:26.250 --> 00:26:28.640
So our case, seeing that this
is only going to be a Hello

00:26:28.640 --> 00:26:33.000
World app, I think we can safely
say this is a 0.9.

00:26:33.000 --> 00:26:36.100
So the next thing we need to do
is define how our app is.

00:26:36.100 --> 00:26:38.990
And this is another
adjacent object.

00:26:38.990 --> 00:26:42.310
And so we're going to
say, background.

00:26:42.310 --> 00:26:47.270
And the background is defining
what background script that we

00:26:47.270 --> 00:26:47.880
need to run.

00:26:47.880 --> 00:26:50.300
So I'm just going
to say, scripts.

00:26:50.300 --> 00:26:54.490
And I'm going to give it an
array, and with just one

00:26:54.490 --> 00:26:58.070
single item, with main.js.

00:26:58.070 --> 00:27:01.340
So that's going to say, this
background script--

00:27:01.340 --> 00:27:02.300
this main.js--

00:27:02.300 --> 00:27:04.690
is the file that you want
to load immediately.

00:27:04.690 --> 00:27:09.800
It's like when you're writing
native apps, it's that same

00:27:09.800 --> 00:27:15.250
thing that's got the application
start code in it.

00:27:15.250 --> 00:27:17.680
Next thing we want to do is add
some icons, because it's

00:27:17.680 --> 00:27:20.100
always nice to have some
icons for our app.

00:27:20.100 --> 00:27:21.240
We want some nice, high
quality stuff.

00:27:21.240 --> 00:27:26.210
So I'm going to go and add
a 16 by 16 pixel icon.

00:27:26.210 --> 00:27:31.660
And I'll say, image,
icon, 16.png.

00:27:31.660 --> 00:27:37.780
And I also want to have a 128
pixel by 128 pixel icon.

00:27:37.780 --> 00:27:41.470
So that way I've got a nice,
good size image for wherever I

00:27:41.470 --> 00:27:42.510
need it to show up.

00:27:42.510 --> 00:27:48.100
So img, icon, 128.

00:27:48.100 --> 00:27:49.160
So there's our icons.

00:27:49.160 --> 00:27:51.070
I guess I don't need
that there.

00:27:51.070 --> 00:27:52.610
And that's the manifest file.

00:27:52.610 --> 00:27:54.260
That's everything that I need.

00:27:54.260 --> 00:27:57.300
The key thing that I want to
highlight here is this one

00:27:57.300 --> 00:27:59.760
piece here, which has got
the background script.

00:27:59.760 --> 00:28:02.660
So let's go ahead and
save that file.

00:28:02.660 --> 00:28:06.820
The next thing we need to do
for step two is actually go

00:28:06.820 --> 00:28:09.340
write our main JavaScript
file.

00:28:09.340 --> 00:28:11.710
So again, this is the file
that kicks off our

00:28:11.710 --> 00:28:12.360
application.

00:28:12.360 --> 00:28:15.080
This is the file that says,
hey, we're good to go.

00:28:15.080 --> 00:28:17.460
And when the app starts,
this is the one

00:28:17.460 --> 00:28:18.750
that we want to use.

00:28:18.750 --> 00:28:21.920
So let's start here.

00:28:21.920 --> 00:28:25.270
This app uses the Chrome
namespace.

00:28:25.270 --> 00:28:28.180
So I'm going to say, Chrome.app,
runtime.

00:28:28.180 --> 00:28:31.420
And we want to add an
onLaunched listener.

00:28:31.420 --> 00:28:38.740
So launched, add listener,
and function--

00:28:41.490 --> 00:28:43.640
I'm just going to move this down
so that we can see this.

00:28:43.640 --> 00:28:46.210
There we go.

00:28:46.210 --> 00:28:48.140
Function--

00:28:48.140 --> 00:28:50.820
and pop that guy there.

00:28:50.820 --> 00:28:55.050
So now, inside our event
listener, we're going to say

00:28:55.050 --> 00:28:56.300
Chrome.app.window.create.

00:28:59.110 --> 00:29:04.860
And this is going to go and
create a new window with

00:29:04.860 --> 00:29:06.100
window.html.

00:29:06.100 --> 00:29:08.040
And we'll define
that in a sec.

00:29:08.040 --> 00:29:10.230
And then we want to provide
some properties to that

00:29:10.230 --> 00:29:11.460
particular window.

00:29:11.460 --> 00:29:19.060
So I want it to open
at width of 400--

00:29:19.060 --> 00:29:20.120
oops, close that.

00:29:20.120 --> 00:29:21.000
We don't want that.

00:29:21.000 --> 00:29:22.400
There we go.

00:29:22.400 --> 00:29:30.010
And a height of 500.

00:29:30.010 --> 00:29:31.560
So that's really all we need.

00:29:31.560 --> 00:29:34.090
So basically, what's going to
happen now, Chrome is going to

00:29:34.090 --> 00:29:37.760
listen for when this application
is launched.

00:29:37.760 --> 00:29:41.720
When it's launched, it's going
to create a new window using

00:29:41.720 --> 00:29:43.650
the Window HTML file.

00:29:43.650 --> 00:29:45.580
And it's going to create
that window as a 400

00:29:45.580 --> 00:29:49.030
by 500 pixel window.

00:29:49.030 --> 00:29:53.540
So we can go in, and we can
do that final piece.

00:29:53.540 --> 00:29:56.470
I'm using Sublime, so I'm going
to cheat a little bit.

00:29:56.470 --> 00:29:59.870
And I'm going to go in
and just put in the

00:29:59.870 --> 00:30:00.720
basis for my stuff.

00:30:00.720 --> 00:30:04.320
So this is my Hello There app.

00:30:04.320 --> 00:30:08.460
And I've already written a
little bit of CSS, because I

00:30:08.460 --> 00:30:11.430
figured you guys didn't want
to see me write CSS.

00:30:11.430 --> 00:30:14.140
It gets a little bit boring.

00:30:14.140 --> 00:30:19.460
So we'll put our CSS file
in there as main.CSS.

00:30:19.460 --> 00:30:23.770
And I'm going to put
this in as an H1.

00:30:23.770 --> 00:30:26.660
Hello there, everyone.

00:30:26.660 --> 00:30:31.130
Let's just do "hello there."
Hello world.

00:30:31.130 --> 00:30:34.220
Got to go for the
standard stuff.

00:30:34.220 --> 00:30:36.260
So now I'm going to save that.

00:30:36.260 --> 00:30:38.770
I'm going to save
my main.js file.

00:30:38.770 --> 00:30:40.630
And I've also saved
my manifest file.

00:30:40.630 --> 00:30:43.020
So those are the three
things that you need.

00:30:43.020 --> 00:30:48.470
Notice that in here, I've got my
two icons, so the icon 128

00:30:48.470 --> 00:30:49.460
and icon 16.

00:30:49.460 --> 00:30:52.100
I know they're a little small,
but you can trust me that

00:30:52.100 --> 00:30:53.160
they're there.

00:30:53.160 --> 00:30:56.910
And let's go and grab
Chrome Canary.

00:30:56.910 --> 00:30:59.830
And just to prove that this is
all working offline, I'll turn

00:30:59.830 --> 00:31:02.440
off my Wi-Fi again.

00:31:02.440 --> 00:31:07.120
And we need to go into
the Extensions tab.

00:31:07.120 --> 00:31:08.840
So if you're not familiar
on how to get to

00:31:08.840 --> 00:31:10.150
the Extensions tab--

00:31:10.150 --> 00:31:12.380
I'll just close this so
that we can see--

00:31:12.380 --> 00:31:16.450
you click on the three little
guys here, go to Tools, and

00:31:16.450 --> 00:31:18.020
click on Extensions.

00:31:18.020 --> 00:31:20.750
And that will open up
the Extensions tab.

00:31:20.750 --> 00:31:24.310
One thing that you want to make
sure that you do is check

00:31:24.310 --> 00:31:27.160
this little check box here, the
Developer Mode check box,

00:31:27.160 --> 00:31:29.660
because that's going to make
sure that Chrome is in

00:31:29.660 --> 00:31:30.370
Developer Mode.

00:31:30.370 --> 00:31:34.080
If that's not checked, notice
that the Load Unpacked

00:31:34.080 --> 00:31:36.330
Extensions goes away.

00:31:36.330 --> 00:31:38.110
So we want to make sure
that that's checked.

00:31:38.110 --> 00:31:40.900
So now I'm going to say Load
Unpacked Extensions.

00:31:40.900 --> 00:31:43.820
And I'm going to go and grab
the one that I just wrote.

00:31:43.820 --> 00:31:44.930
So here it is.

00:31:44.930 --> 00:31:48.580
Pointing to the directory,
I'll click Select.

00:31:48.580 --> 00:31:49.500
Ha ha.

00:31:49.500 --> 00:31:51.380
All right.

00:31:51.380 --> 00:31:52.410
Always fun.

00:31:52.410 --> 00:31:55.280
If there's any kind of problem
with your application as

00:31:55.280 --> 00:31:59.230
you're working on these things,
you'll get an error

00:31:59.230 --> 00:32:00.980
right off the bat telling
you, hey, there's

00:32:00.980 --> 00:32:02.080
something going on here.

00:32:02.080 --> 00:32:03.670
You're not quite right.

00:32:03.670 --> 00:32:08.690
So sure enough, I created a
backup directory just in case

00:32:08.690 --> 00:32:09.870
I had any typos.

00:32:09.870 --> 00:32:11.290
So I need to go get
rid of that.

00:32:11.290 --> 00:32:15.050
So let's just go, and we'll
rename this backup directory,

00:32:15.050 --> 00:32:17.890
and we'll call it,
XXXXXXX backup.

00:32:17.890 --> 00:32:19.590
There we go.

00:32:19.590 --> 00:32:23.180
So bring Chrome back up.

00:32:23.180 --> 00:32:27.072
And again, we'll load the
unpacked extension.

00:32:27.072 --> 00:32:28.322
I'll click Select.

00:32:30.800 --> 00:32:35.480
And sure enough, there it is
there, "Hello World." I'll

00:32:35.480 --> 00:32:40.740
open a new tab and there's
my Hello There app.

00:32:40.740 --> 00:32:43.280
So this is the same thing
that we saw, that we

00:32:43.280 --> 00:32:44.210
were working on.

00:32:44.210 --> 00:32:47.110
When I clicked on it, here's
"Hello World." So

00:32:47.110 --> 00:32:48.220
my app is now up.

00:32:48.220 --> 00:32:50.380
It's running, success.

00:32:50.380 --> 00:32:52.390
We have "Hello World."
We're set.

00:32:52.390 --> 00:32:53.530
We're good to go.

00:32:53.530 --> 00:32:55.720
Now I want to point out a couple
of little things that,

00:32:55.720 --> 00:32:58.920
as you're working on these
apps, that you can dive a

00:32:58.920 --> 00:33:02.190
little bit deeper into how
to debug these things.

00:33:02.190 --> 00:33:06.340
So first thing to note, is that
if you want to go in and

00:33:06.340 --> 00:33:09.810
bring up the developer tools,
well, you can't.

00:33:09.810 --> 00:33:13.740
Like Control-Shift-J
or Command--

00:33:13.740 --> 00:33:17.070
Option J, it's not there.

00:33:17.070 --> 00:33:20.830
And because there's no browser
frame, I can't go and click on

00:33:20.830 --> 00:33:21.990
the little icons.

00:33:21.990 --> 00:33:25.220
What I can do, because we're in
Developer Mode right now,

00:33:25.220 --> 00:33:30.390
and this is an application that
I installed myself, I can

00:33:30.390 --> 00:33:34.850
right-click on this, and I can
go in, and I can see Reload

00:33:34.850 --> 00:33:37.810
Page, Reload App, Inspect
Element, or

00:33:37.810 --> 00:33:39.860
Inspect Background Page.

00:33:39.860 --> 00:33:44.150
So I'm going to go and just
say Inspect Element.

00:33:44.150 --> 00:33:47.610
And sure enough, here's
my standard set

00:33:47.610 --> 00:33:50.030
of developer tools.

00:33:50.030 --> 00:33:52.820
I can go in, and I can do all
this stuff that I'm used to

00:33:52.820 --> 00:33:56.610
being able to do within Chrome's
Developer Tools.

00:33:56.610 --> 00:34:00.220
So I can maybe go turn
off centering.

00:34:00.220 --> 00:34:03.250
I can go in and I can say, oh,
hey, I want to go to the

00:34:03.250 --> 00:34:05.180
console and find out
what's going on on

00:34:05.180 --> 00:34:06.370
some of these things.

00:34:06.370 --> 00:34:09.949
So you have the full set of
developer tools that you're

00:34:09.949 --> 00:34:14.969
used to being able to use
completely within Chrome apps.

00:34:14.969 --> 00:34:18.780
You can go into the resources,
being able to see all the

00:34:18.780 --> 00:34:20.610
files that are getting loaded.

00:34:20.610 --> 00:34:24.310
You can see anything else that's
going on and know, all

00:34:24.310 --> 00:34:25.820
right, great, sweet.

00:34:25.820 --> 00:34:26.679
We're good to go.

00:34:26.679 --> 00:34:27.850
I'm happy.

00:34:27.850 --> 00:34:29.120
All right.

00:34:29.120 --> 00:34:32.110
So let me close this out.

00:34:32.110 --> 00:34:37.449
And I want to take a look at the
code for the calculator.

00:34:37.449 --> 00:34:41.750
So I'm going to go and grab the
code for the calculator.

00:34:41.750 --> 00:34:45.690
Now all of this code
is available.

00:34:45.690 --> 00:34:48.040
If you want to go and start
playing with some of these

00:34:48.040 --> 00:34:52.000
yourself, the link is down on
the bottom of the page.

00:34:52.000 --> 00:34:55.219
We've got a really phenomenal
set of resources that you can

00:34:55.219 --> 00:34:59.080
go and sample apps that you
can go download on GitHub.

00:34:59.080 --> 00:35:02.120
That's where that link
will take you.

00:35:02.120 --> 00:35:05.840
So I'll go grab the calculator,
open this guy up.

00:35:05.840 --> 00:35:09.690
So sure enough, you can see in
the calculator, we've just got

00:35:09.690 --> 00:35:11.145
a set of divs with
some buttons.

00:35:13.870 --> 00:35:18.220
Our controller, which is
where our view is in

00:35:18.220 --> 00:35:19.290
this particular case.

00:35:19.290 --> 00:35:21.660
We're using an MVC framework.

00:35:21.660 --> 00:35:23.290
It's right here.

00:35:23.290 --> 00:35:26.330
I can go in and see
my main.js.

00:35:26.330 --> 00:35:28.590
Now interestingly, with
this main.js--

00:35:28.590 --> 00:35:31.130
I'll move this down so we can
see a couple of these things.

00:35:31.130 --> 00:35:34.790
So remember how I
had window.HTML.

00:35:34.790 --> 00:35:39.790
This you can load whatever
file you happen to want.

00:35:39.790 --> 00:35:42.470
I just put in height and width
in my previous example.

00:35:42.470 --> 00:35:44.360
But in this case,
they set both a

00:35:44.360 --> 00:35:47.810
height minimum and maximum.

00:35:47.810 --> 00:35:51.130
So that actually means that I
can't resize that window.

00:35:51.130 --> 00:35:55.920
So you've got the same set of
experiences as you'd expect to

00:35:55.920 --> 00:35:58.540
be able to have in native
applications.

00:35:58.540 --> 00:36:01.370
You can go through and you can
actually minimize and maximize

00:36:01.370 --> 00:36:04.210
those things and really
be able to do a

00:36:04.210 --> 00:36:06.540
lot of great things.

00:36:06.540 --> 00:36:11.380
We've got all of our framework
stuff here, so that you can go

00:36:11.380 --> 00:36:15.180
through and see, OK, so this
is how we handle all of our

00:36:15.180 --> 00:36:17.090
application.

00:36:17.090 --> 00:36:20.220
And then the view for
this application.

00:36:20.220 --> 00:36:23.290
So again, that same thing
where everything is all

00:36:23.290 --> 00:36:25.340
available to you,
quickly, easily.

00:36:25.340 --> 00:36:28.560
And you can go through and
build some of these out

00:36:28.560 --> 00:36:32.870
yourself without going into
anything too crazy.

00:36:32.870 --> 00:36:40.710
So with that, what I want to
do is open it up to some of

00:36:40.710 --> 00:36:44.810
your questions that you guys
have as we're going through.

00:36:44.810 --> 00:36:46.940
So I'm going to bring Van
up here in a second.

00:36:46.940 --> 00:36:52.040
Van, you're on screen now,
and folks can hear you.

00:36:52.040 --> 00:36:56.410
I'm going to pop over to some
of the questions that I've

00:36:56.410 --> 00:37:00.670
already popped into
Google Moderator.

00:37:00.670 --> 00:37:02.200
I'm also going to put
the link up here.

00:37:02.200 --> 00:37:04.840
So if you've got questions
and you want to ask your

00:37:04.840 --> 00:37:08.870
questions, you can post your
questions to that URL there

00:37:08.870 --> 00:37:11.710
through Google Moderator.

00:37:11.710 --> 00:37:13.840
So let's take the
first question.

00:37:13.840 --> 00:37:16.910
And the first question
from Rob in Montana--

00:37:16.910 --> 00:37:18.200
or MT--

00:37:18.200 --> 00:37:21.870
is, "Will Chrome apps be
available on mobile Chrome?"

00:37:21.870 --> 00:37:25.550
And I'm really excited say,
yeah, they will be.

00:37:25.550 --> 00:37:27.750
We're still working through some
of the implementation.

00:37:27.750 --> 00:37:28.390
Yeah.

00:37:28.390 --> 00:37:30.730
This is really cool because it
means that you can write your

00:37:30.730 --> 00:37:35.700
app with the same set of code in
one place, and you can get

00:37:35.700 --> 00:37:37.640
it to work across multiple
devices.

00:37:37.640 --> 00:37:41.220
So not only will it work on a
Mac, and on a PC, and on a

00:37:41.220 --> 00:37:47.600
Chromebook, but it will also
work on and an iOS device and

00:37:47.600 --> 00:37:49.590
on an Android device.

00:37:49.590 --> 00:37:52.330
We still have a few details to
work through and to make sure

00:37:52.330 --> 00:37:53.190
that we get this right.

00:37:53.190 --> 00:37:56.100
Because we want to make sure
we get it absolutely right.

00:37:56.100 --> 00:37:57.950
But that's something that
we're working on.

00:37:57.950 --> 00:38:01.790
And expect to see more about
that in the next, hopefully,

00:38:01.790 --> 00:38:04.080
couple weeks.

00:38:04.080 --> 00:38:06.545
So keep an eye out for that.

00:38:09.160 --> 00:38:11.670
So the next question. "Does the
Chrome Apps Team have any

00:38:11.670 --> 00:38:13.795
plans to work with any of the
Mobile Team to allow Chrome

00:38:13.795 --> 00:38:16.900
apps?" I think we just
kind of hit that one.

00:38:16.900 --> 00:38:20.150
The one thing I will call out
on the way that we're doing

00:38:20.150 --> 00:38:24.260
this is that basically
we're doing it

00:38:24.260 --> 00:38:26.395
through Cordova or PhoneGap.

00:38:26.395 --> 00:38:28.980
So your app will get wrapped
in PhoneGap.

00:38:28.980 --> 00:38:32.450
We're putting a lot of effort
and a lot of energy into the

00:38:32.450 --> 00:38:35.460
Cordova project, the PhoneGap
project, to make sure that the

00:38:35.460 --> 00:38:38.550
project is really great, that it
rocks, that the experience

00:38:38.550 --> 00:38:43.300
is good for us as developers,
but as well as for consumers.

00:38:43.300 --> 00:38:47.930
Now 90% of our code is probably
going to work across

00:38:47.930 --> 00:38:50.100
devices without any
modification.

00:38:50.100 --> 00:38:54.500
But you will have to remember
the screen on a phone is a

00:38:54.500 --> 00:38:57.260
little bit different than that
on a tablet and is different

00:38:57.260 --> 00:39:00.000
than that on a laptop
or desktop.

00:39:00.000 --> 00:39:01.970
As well, some of the
interactions are different.

00:39:01.970 --> 00:39:06.500
So you will have to have
different code for each app.

00:39:06.500 --> 00:39:13.040
But the core components of your
app will remain the same.

00:39:13.040 --> 00:39:17.050
Joshua in Fresno, wants to know,
when's the store going

00:39:17.050 --> 00:39:19.450
to start accepting
Chrome apps?

00:39:19.450 --> 00:39:22.500
Well, Joshua, I don't
have an exact date.

00:39:22.500 --> 00:39:24.990
But keep an eye on the
Chromium blog,

00:39:24.990 --> 00:39:29.110
blog.chromium.org, because I
expect to see an announcement

00:39:29.110 --> 00:39:31.340
about that sometime
pretty soon .

00:39:31.340 --> 00:39:33.920
We've got all the little
stuff together.

00:39:33.920 --> 00:39:37.200
We're just doing those last
little things to make sure

00:39:37.200 --> 00:39:38.800
that we get everything right.

00:39:38.800 --> 00:39:40.520
And then we want to hear
your feedback.

00:39:40.520 --> 00:39:43.130
When we do put them up in the
store to begin with, it'll

00:39:43.130 --> 00:39:45.850
primarily be a developer
preview.

00:39:45.850 --> 00:39:49.990
So end users aren't going to be
able to go find those apps

00:39:49.990 --> 00:39:51.100
really easily.

00:39:51.100 --> 00:39:53.740
They're going to have to go to
a particular URL that you'll

00:39:53.740 --> 00:39:54.620
provide them.

00:39:54.620 --> 00:39:57.820
Because we want to make sure
that we don't launch them

00:39:57.820 --> 00:39:58.920
before they're ready.

00:39:58.920 --> 00:40:02.420
We want you to make sure that
the upload experience is

00:40:02.420 --> 00:40:05.060
right, that for us the
download and install

00:40:05.060 --> 00:40:06.540
experience is beautiful.

00:40:10.440 --> 00:40:13.670
So I guess that's the answer
to that question.

00:40:13.670 --> 00:40:17.090
Greg wants to know, "Does the
newly created window with

00:40:17.090 --> 00:40:20.400
frame none property require a
user to re-implement all of

00:40:20.400 --> 00:40:22.400
the standard Chrome window
features, including

00:40:22.400 --> 00:40:26.870
drag-to-move and reposition?"
So no, Greg.

00:40:26.870 --> 00:40:28.530
You're lucky there.

00:40:28.530 --> 00:40:30.500
You don't have to re-implement
that.

00:40:30.500 --> 00:40:33.250
That was something I didn't
show in my demo today.

00:40:33.250 --> 00:40:38.820
But you saw it in the weather
app, where it didn't have the

00:40:38.820 --> 00:40:42.850
standard buttons.

00:40:42.850 --> 00:40:45.910
If you put frame none, you've
got your own set.

00:40:45.910 --> 00:40:49.760
So when the user drags the app
around all of that stuff, you

00:40:49.760 --> 00:40:52.000
don't have to go in and
re-implement that or

00:40:52.000 --> 00:40:53.250
anything like that.

00:40:55.400 --> 00:40:58.330
Van, do we have any questions
from our live folks before I

00:40:58.330 --> 00:41:01.630
move on to the next question?

00:41:01.630 --> 00:41:02.670
VAN RIPER: Yeah.

00:41:02.670 --> 00:41:03.920
[INAUDIBLE] are you there?

00:41:06.120 --> 00:41:07.640
His question is, I
think, one of the

00:41:07.640 --> 00:41:08.920
next ones from Friedger.

00:41:08.920 --> 00:41:10.250
He's responding right now.

00:41:10.250 --> 00:41:11.436
PETE LEPAGE: OK.

00:41:11.436 --> 00:41:14.204
I'll do the next one and then
we'll come to his question.

00:41:14.204 --> 00:41:15.370
VAN RIPER: Here he is.

00:41:15.370 --> 00:41:18.110
PETE LEPAGE: All right.

00:41:18.110 --> 00:41:19.360
VAN RIPER: Make sure you
are un-muted, Friedger.

00:41:23.780 --> 00:41:24.860
Are you un-muted Friedger?

00:41:24.860 --> 00:41:26.660
PETE LEPAGE: The fun
of live stuff.

00:41:26.660 --> 00:41:28.330
While Friedger works
on un-muting,

00:41:28.330 --> 00:41:29.670
I'll answer this question.

00:41:29.670 --> 00:41:31.830
What happened to
Chrome.webrequest?

00:41:31.830 --> 00:41:34.220
It seems to be deprecated
in V2.

00:41:34.220 --> 00:41:35.440
Will it be coming back?

00:41:35.440 --> 00:41:36.910
All right.

00:41:36.910 --> 00:41:37.890
There we go.

00:41:37.890 --> 00:41:39.844
Friedger, you have a question.

00:41:39.844 --> 00:41:41.094
FRIEDGER: [INAUDIBLE PHRASE].

00:41:46.636 --> 00:41:48.130
PETE LEPAGE: All right.

00:41:48.130 --> 00:41:49.940
Friedger, we'll come to your
question in a sec.

00:41:49.940 --> 00:41:54.060
I think I see it there on the
next question so-- what

00:41:54.060 --> 00:41:55.760
happened to Chrome
Web Requests?

00:41:55.760 --> 00:41:57.050
It seems to be deprecated.

00:41:57.050 --> 00:42:03.380
I mentioned earlier that some
of the Chrome extension APIs

00:42:03.380 --> 00:42:04.730
have been deprecated.

00:42:04.730 --> 00:42:07.690
So particularly, the
Chrome.webrequest is one of

00:42:07.690 --> 00:42:09.710
those ones that has
been deprecated.

00:42:09.710 --> 00:42:12.700
You can't get access
to that anymore.

00:42:12.700 --> 00:42:14.760
And there's a couple
of things.

00:42:14.760 --> 00:42:18.570
But keep in mind, you have an
entire HTTP area, an entire

00:42:18.570 --> 00:42:19.400
network stack.

00:42:19.400 --> 00:42:23.390
So you could go make your own
web requests if you wanted to.

00:42:23.390 --> 00:42:29.160
As well, you can do an
XML HTTP request.

00:42:29.160 --> 00:42:32.010
For the most part, you really
shouldn't need the web request

00:42:32.010 --> 00:42:37.050
extension API, because that's
for modifying requests that go

00:42:37.050 --> 00:42:41.490
out on other websites, maybe to
do some kind of blocking,

00:42:41.490 --> 00:42:44.460
or maybe adding headers and
that kind of thing.

00:42:44.460 --> 00:42:46.744
So you really shouldn't
need it.

00:42:46.744 --> 00:42:49.610
If you do need it, and if you
have a particular use case for

00:42:49.610 --> 00:42:54.100
it, please file a bug
at crbug.com.

00:42:54.100 --> 00:42:58.120
You can go to new.crbug.com and
file a bug and say, hey,

00:42:58.120 --> 00:42:59.370
this is why I need it.

00:42:59.370 --> 00:43:03.080
Give us those reasons so that
it makes it a little bit

00:43:03.080 --> 00:43:04.690
easier for us.

00:43:04.690 --> 00:43:08.440
So Friedger, I know you're
joining us a

00:43:08.440 --> 00:43:09.690
little bit live here.

00:43:09.690 --> 00:43:11.415
Well I guess there's--

00:43:11.415 --> 00:43:12.900
there is no little bit live.

00:43:12.900 --> 00:43:14.390
You are either live or not.

00:43:14.390 --> 00:43:16.450
In any event.

00:43:16.450 --> 00:43:17.950
So what's the security model?

00:43:17.950 --> 00:43:20.950
I heard someone saying that I
could access my NFC Reader

00:43:20.950 --> 00:43:21.740
from Chrome apps.

00:43:21.740 --> 00:43:24.920
So we touched on this a
little bit earlier.

00:43:24.920 --> 00:43:29.360
The security model is really
around permissions.

00:43:29.360 --> 00:43:31.680
Does the application ask for
permission for this?

00:43:31.680 --> 00:43:32.940
And then does it use it?

00:43:32.940 --> 00:43:38.490
So when you install an app,
you're told what APIs or what

00:43:38.490 --> 00:43:41.110
permissions the application,
just like you get when you

00:43:41.110 --> 00:43:45.150
install an app through the
Android Play Store.

00:43:45.150 --> 00:43:47.920
What are the services
that this wants?

00:43:47.920 --> 00:43:49.770
Do you want to allow
this or not?

00:43:49.770 --> 00:43:50.710
And you can say yes.

00:43:50.710 --> 00:43:55.615
You can say no, and make your
decision based on that.

00:43:55.615 --> 00:43:58.500
NFC isn't something we
have access to today,

00:43:58.500 --> 00:44:03.050
unfortunately, because that's
not in most computers.

00:44:03.050 --> 00:44:07.660
If you had an NFC USB reader,
you could probably do it that

00:44:07.660 --> 00:44:10.260
way though, because there's
USB access.

00:44:10.260 --> 00:44:13.640
You can get to it that way.

00:44:13.640 --> 00:44:16.495
So Van, from Silicon Valley.

00:44:16.495 --> 00:44:19.780
Hey, I know this guy.

00:44:19.780 --> 00:44:21.530
Do you want to ask your
question, Van?

00:44:21.530 --> 00:44:22.840
VAN RIPER: Sure.

00:44:22.840 --> 00:44:25.340
So I wanted to ask on behalf
of all of our GDG

00:44:25.340 --> 00:44:27.150
organizers out there.

00:44:27.150 --> 00:44:29.350
I mean, obviously, they
could show this.

00:44:29.350 --> 00:44:31.240
This will be recorded and
will be available later.

00:44:31.240 --> 00:44:34.530
But there are other resources
you could provide that they

00:44:34.530 --> 00:44:35.990
could use to do local meetups?

00:44:35.990 --> 00:44:39.080
And I guess this would just be
a shout out to everyone to go

00:44:39.080 --> 00:44:42.590
look at
GoogleDevelopers.com/Groups.

00:44:42.590 --> 00:44:44.810
Find your local meetup, because
hopefully some of

00:44:44.810 --> 00:44:47.480
these guys will be doing meetups
around Chrome apps.

00:44:47.480 --> 00:44:47.870
PETE LEPAGE: Yeah.

00:44:47.870 --> 00:44:49.500
That would be really awesome.

00:44:49.500 --> 00:44:52.930
I just put up a link to our
developer documentation.

00:44:52.930 --> 00:44:56.410
I just put the short link up
there, because it doesn't

00:44:56.410 --> 00:44:57.880
really fit on screen.

00:44:57.880 --> 00:44:59.560
Hang on.

00:44:59.560 --> 00:45:00.480
Where is it?

00:45:00.480 --> 00:45:01.730
There it is.

00:45:04.210 --> 00:45:08.100
But you can also get it at
developer.chrome.com.

00:45:08.100 --> 00:45:11.160
And there's a link down towards
the bottom that says,

00:45:11.160 --> 00:45:11.890
Chrome apps.

00:45:11.890 --> 00:45:12.750
Click on that link.

00:45:12.750 --> 00:45:16.530
And all of the developer
documentation is there.

00:45:16.530 --> 00:45:20.280
And then the second piece that
I think I called this one out

00:45:20.280 --> 00:45:22.824
earlier was some
of the samples.

00:45:22.824 --> 00:45:26.790
We have about 20 Chrome app
samples that are already

00:45:26.790 --> 00:45:30.040
written, ready to go, that you
can go and grab, that you can

00:45:30.040 --> 00:45:32.300
go through and try yourself.

00:45:32.300 --> 00:45:35.940
You can install them
using Chrome.

00:45:35.940 --> 00:45:38.070
As well, the slide deck that
I used today, there's a

00:45:38.070 --> 00:45:42.970
modified, slightly older version
up there that you can

00:45:42.970 --> 00:45:46.870
go and-- so if you want to run
through a similar slide deck,

00:45:46.870 --> 00:45:50.700
that slide deck, as a Chrome
app, is already up there.

00:45:50.700 --> 00:45:52.940
So that you've got
the slide deck.

00:45:52.940 --> 00:45:55.740
You've got some demos
good to go.

00:45:55.740 --> 00:45:59.430
You can use this recording as
some good talking points.

00:45:59.430 --> 00:46:01.810
And I expect to see
some more stuff.

00:46:01.810 --> 00:46:06.330
One of the really cool ones--
and in fact, I'm going to stop

00:46:06.330 --> 00:46:07.110
talking for a sec.

00:46:07.110 --> 00:46:09.520
Well, I'll keep talking, but I'm
going to show you guys, I

00:46:09.520 --> 00:46:11.180
think, a cool video.

00:46:11.180 --> 00:46:14.620
When we first started working on
Chrome apps at Google-- or

00:46:14.620 --> 00:46:18.310
announced them at I/O, one of
the things we wanted to do is

00:46:18.310 --> 00:46:22.940
get it working with Bluetooth.

00:46:22.940 --> 00:46:26.480
And one of our guys spent a
little bit of time, figured

00:46:26.480 --> 00:46:30.980
out how to get the LEGO
Mindstorm kit working with

00:46:30.980 --> 00:46:33.350
Bluetooth, controlled
from a Chrome app.

00:46:33.350 --> 00:46:35.220
So we were doing serial
over Bluetooth,

00:46:35.220 --> 00:46:36.420
using the GamePad API.

00:46:36.420 --> 00:46:38.320
Well, you guys can see
what's up there.

00:46:38.320 --> 00:46:40.550
So there's a ton of really
neat things that

00:46:40.550 --> 00:46:41.720
you can do with this.

00:46:41.720 --> 00:46:44.480
So if you're going to have
a meetup or a Hangout, or

00:46:44.480 --> 00:46:47.770
something like that, I would
strongly recommend, go find

00:46:47.770 --> 00:46:51.120
something that you can go play
with, kind of like this.

00:46:51.120 --> 00:46:53.620
One of the other ones that's
up there, it's a little bit

00:46:53.620 --> 00:46:56.070
more expensive to go
get, but it is

00:46:56.070 --> 00:46:58.460
absolutely worth every penny--

00:46:58.460 --> 00:47:00.140
though you will probably need
two of them because you'll

00:47:00.140 --> 00:47:01.050
wreck one--

00:47:01.050 --> 00:47:02.890
is the Parrot AR drone.

00:47:02.890 --> 00:47:08.140
We figured out how to control
the Parrot AR drone from a

00:47:08.140 --> 00:47:08.840
Chrome app.

00:47:08.840 --> 00:47:14.430
So basically, it uses UDP,
network packets that it sends

00:47:14.430 --> 00:47:15.350
back and forth.

00:47:15.350 --> 00:47:22.570
So how much fun would it be to
start your meetup by flying a

00:47:22.570 --> 00:47:26.650
helicopter over the audience
and controlling it through

00:47:26.650 --> 00:47:28.525
your computer?

00:47:28.525 --> 00:47:32.196
Some really cool things that
you can do with that.

00:47:32.196 --> 00:47:36.420
VAN RIPER: Anyone that does
that, I'll send them a mini

00:47:36.420 --> 00:47:39.065
banner they can put on their
helicopter, GDG banner that

00:47:39.065 --> 00:47:40.749
they can put on that
helicopter.

00:47:40.749 --> 00:47:41.900
PETE LEPAGE: Sweet.

00:47:41.900 --> 00:47:44.450
Very nice.

00:47:44.450 --> 00:47:47.430
Controlling that helicopter
is just super cool.

00:47:47.430 --> 00:47:50.650
It's one of those really,
really fun things.

00:47:50.650 --> 00:47:54.570
So the next question from
Mooseman on the internet.

00:47:54.570 --> 00:47:57.950
"Can I build an app with a
script that updates files in

00:47:57.950 --> 00:48:00.570
the package from either my
server or the Chrome Web

00:48:00.570 --> 00:48:03.000
Store?" And Mooseman, that's
a wonderful question.

00:48:03.000 --> 00:48:05.330
And a lot of people are
sort of going, huh.

00:48:05.330 --> 00:48:07.180
So if all the resources
are sitting here,

00:48:07.180 --> 00:48:08.300
how do I go get stuff?

00:48:08.300 --> 00:48:09.890
Or how do I go--

00:48:09.890 --> 00:48:12.510
maybe I've got some kind of news
app where I need to go

00:48:12.510 --> 00:48:14.380
pull data, and I want to
pull images and all

00:48:14.380 --> 00:48:15.390
that kind of stuff.

00:48:15.390 --> 00:48:17.460
That's a wonderful question.

00:48:17.460 --> 00:48:18.540
Yes, you can.

00:48:18.540 --> 00:48:20.900
And there's a couple of ways
that you can do it.

00:48:20.900 --> 00:48:24.242
One of the ways that you could
do it is obviously making XML

00:48:24.242 --> 00:48:25.530
HTTP requests--

00:48:25.530 --> 00:48:28.100
AJAX request-- to go pull
the stuff down.

00:48:28.100 --> 00:48:31.310
And then you can cache it
locally on the user's machine.

00:48:31.310 --> 00:48:33.170
There's a couple of places
you can cache it.

00:48:33.170 --> 00:48:38.560
You have access to the HTML5
file system APIs.

00:48:38.560 --> 00:48:41.050
So you can store the files
there, so that you can just

00:48:41.050 --> 00:48:44.750
quickly load them right off the
file system to be able to

00:48:44.750 --> 00:48:46.400
render them there.

00:48:46.400 --> 00:48:50.890
You could also store in the
Chrome Storage APIs.

00:48:50.890 --> 00:48:53.180
I mentioned earlier.

00:48:53.180 --> 00:48:53.860
There's two of them.

00:48:53.860 --> 00:48:57.170
There's a Sync Storage API,
and a Local Storage API.

00:48:57.170 --> 00:49:00.620
You can't store big stuff in
the Sync one, but you can

00:49:00.620 --> 00:49:03.750
store some reasonable size
stuff in the local one.

00:49:03.750 --> 00:49:05.730
Obviously, the local one is
not going to get cached

00:49:05.730 --> 00:49:08.330
between computers.

00:49:08.330 --> 00:49:11.190
There's also IndexedDB
and Web SQL.

00:49:11.190 --> 00:49:14.250
I'd recommend going with
IndexedDB over Web SQL just

00:49:14.250 --> 00:49:17.550
because IndexedDB is
that thing that

00:49:17.550 --> 00:49:21.420
works across most places.

00:49:21.420 --> 00:49:26.290
And it's the spec that's
still supported.

00:49:26.290 --> 00:49:29.160
Web SQL has been a deprecated
spec, even though it is

00:49:29.160 --> 00:49:32.466
implemented in a bunch
of other places.

00:49:35.380 --> 00:49:39.000
So the next question from
Hussain and the Colorado GDG

00:49:39.000 --> 00:49:40.620
in Colorado.

00:49:40.620 --> 00:49:42.890
Will the new APIs work on
Chrome OS, and with

00:49:42.890 --> 00:49:46.400
Chromebooks, and Chromeboxes,
and all that kind of stuff?

00:49:46.400 --> 00:49:47.330
Absolutely.

00:49:47.330 --> 00:49:50.340
One of the really important
things to us is making sure

00:49:50.340 --> 00:49:53.880
that these apps work across all
devices, no matter whether

00:49:53.880 --> 00:49:56.280
you coming in on a Mac, whether
you are coming in on a

00:49:56.280 --> 00:49:59.660
PC, whether you're coming
in on a Chromebox.

00:49:59.660 --> 00:50:03.110
All of these APIs will work
across all these places.

00:50:03.110 --> 00:50:06.860
There may be a few today that
don't work on a Chrome OS

00:50:06.860 --> 00:50:09.340
machine, just because there's
a little bit more to

00:50:09.340 --> 00:50:10.840
implementing them,
that we haven't

00:50:10.840 --> 00:50:13.230
finished that stuff yet.

00:50:13.230 --> 00:50:16.040
But we are working
on these things.

00:50:16.040 --> 00:50:18.080
I do also want to call out that
you could start writing

00:50:18.080 --> 00:50:21.790
these today using Chrome
Stable, Chrome Beta.

00:50:21.790 --> 00:50:26.400
It's also in Chrome Dev
and Chrome Canary.

00:50:26.400 --> 00:50:29.110
My personal set up, so that
I've always got a stable

00:50:29.110 --> 00:50:32.380
browser and a development
browser that's sort of on the

00:50:32.380 --> 00:50:35.610
cutting edge of things, is
I keep Beta as my primary

00:50:35.610 --> 00:50:39.860
browser and then I keep
Canary installed.

00:50:39.860 --> 00:50:42.600
So that way I can always check
to see how things are coming

00:50:42.600 --> 00:50:43.850
down the pipe.

00:50:45.980 --> 00:50:48.980
Hussain also wanted to know if
Chrome apps are going to be

00:50:48.980 --> 00:50:50.780
available on Google TV.

00:50:50.780 --> 00:50:55.175
So because we're going
to wrap these as--

00:50:55.175 --> 00:50:57.530
will be available as Android
apps as well, I

00:50:57.530 --> 00:50:58.460
would suspect so.

00:50:58.460 --> 00:51:00.100
I don't see any reason
why not.

00:51:00.100 --> 00:51:03.800
I've not actually sat
down and written a

00:51:03.800 --> 00:51:05.710
Google TV app before.

00:51:05.710 --> 00:51:09.630
So I'm not 100% sure
on that one.

00:51:09.630 --> 00:51:13.530
But we'll have a look at that.

00:51:13.530 --> 00:51:15.270
I'm really impressed with
all the questions.

00:51:15.270 --> 00:51:18.450
There's a ton of really great
questions here, guys.

00:51:18.450 --> 00:51:20.440
This is fantastic.

00:51:20.440 --> 00:51:22.310
So I'll move on to the
next question.

00:51:25.490 --> 00:51:28.490
"Will there be apps available
for Chrome OS devices is to

00:51:28.490 --> 00:51:33.510
write Chrome apps?" So you
saw me today using my Mac

00:51:33.510 --> 00:51:35.270
I really hope so.

00:51:35.270 --> 00:51:39.020
That's the one thing I think
Chrome OS is missing.

00:51:39.020 --> 00:51:43.770
And there are a few web
IDEs available.

00:51:43.770 --> 00:51:46.760
And really, now that you've
seen that you can build a

00:51:46.760 --> 00:51:50.340
Chrome app, there's no reason
why you couldn't build a

00:51:50.340 --> 00:51:53.555
Chrome app development
environment to

00:51:53.555 --> 00:51:54.600
write Chrome apps.

00:51:54.600 --> 00:51:56.470
So it absolutely can be done.

00:51:56.470 --> 00:51:59.720
In fact, I think one of the
sample apps that's up and

00:51:59.720 --> 00:52:10.160
available on the repository is
an HTML text code editor.

00:52:10.160 --> 00:52:15.700
So I'll go for the next
question here.

00:52:15.700 --> 00:52:18.350
Again, another one from Mooseman
on the internet.

00:52:18.350 --> 00:52:21.760
I love on the internet.

00:52:21.760 --> 00:52:23.830
"How do the limitations
of access--

00:52:23.830 --> 00:52:26.090
for example, filesystem,
and getusermedia--

00:52:26.090 --> 00:52:30.280
differ between packaged apps
and apps from a server?" So

00:52:30.280 --> 00:52:32.520
really, there's no difference.

00:52:32.520 --> 00:52:35.910
If the app needs any kind of
permission, you still will

00:52:35.910 --> 00:52:39.840
either need to ask for
that permission, or--

00:52:39.840 --> 00:52:41.920
and that's done through
the manifest file.

00:52:41.920 --> 00:52:44.270
So if you want to use
getusermedia, you'd put the

00:52:44.270 --> 00:52:48.390
permission request into
the manifest file.

00:52:48.390 --> 00:52:50.830
And then you don't get that pop
up that says, hey, this

00:52:50.830 --> 00:52:54.280
app wants to do X, because
you've already given it

00:52:54.280 --> 00:52:55.280
permission.

00:52:55.280 --> 00:52:57.270
So you still have access
to the filesystem.

00:52:57.270 --> 00:52:59.290
You still have access
to getusermedia.

00:52:59.290 --> 00:53:01.870
You still have access
to geolocation.

00:53:01.870 --> 00:53:03.980
You don't need to go do anything
crazy to do them.

00:53:03.980 --> 00:53:08.350
You just need to make sure that
that request is in the

00:53:08.350 --> 00:53:12.820
permissions section of
your manifest file.

00:53:16.100 --> 00:53:19.570
So next question
from maxw3st--

00:53:19.570 --> 00:53:21.820
"What if you want to make
a communication app?

00:53:21.820 --> 00:53:24.450
Something that allows two or
more users to connect with

00:53:24.450 --> 00:53:26.540
each other?" Great
question, Max.

00:53:26.540 --> 00:53:30.130
And there's a lot of really
easy and great ways to go

00:53:30.130 --> 00:53:32.250
about this.

00:53:32.250 --> 00:53:35.720
One way that you could do it is
using WebSockets, so that

00:53:35.720 --> 00:53:41.580
you have a server sitting up on
your side, but you collect

00:53:41.580 --> 00:53:45.060
all the messages and send them
out to the different places.

00:53:45.060 --> 00:53:50.240
So through a web socket, being
able to do that bidirectional

00:53:50.240 --> 00:53:53.480
communication without having
to do HTTP requests or

00:53:53.480 --> 00:53:55.220
anything like that.

00:53:55.220 --> 00:53:59.010
You could go so far as to
do XML HTTP requests.

00:53:59.010 --> 00:54:03.220
But I think one of the coolest
ones that's just landing now

00:54:03.220 --> 00:54:05.340
is the WebRTC API.

00:54:05.340 --> 00:54:10.530
WebRTC API allows you to get
access to your camera and

00:54:10.530 --> 00:54:14.380
microphone, but also provides
all of the APIs you need to do

00:54:14.380 --> 00:54:19.910
peer-to-peer connections to
connect two or more users to

00:54:19.910 --> 00:54:22.900
each other and send data
back and forth.

00:54:22.900 --> 00:54:25.900
Right now, we do this
through Hangouts or

00:54:25.900 --> 00:54:27.030
through something else.

00:54:27.030 --> 00:54:30.110
But you could do that
exactly through--

00:54:30.110 --> 00:54:32.870
write your own Chrome
app to do this.

00:54:32.870 --> 00:54:37.130
So really easy to be able to do
that, same way as you'd go

00:54:37.130 --> 00:54:40.230
through and do this as
any other web app.

00:54:46.910 --> 00:54:49.180
Halyavin wants to know, "How you
project your laptop screen

00:54:49.180 --> 00:54:52.980
to us without using the
internet?" So we have a rather

00:54:52.980 --> 00:54:55.420
fun set up in our studios.

00:54:55.420 --> 00:54:58.310
I actually have to plug my
laptop into a special box that

00:54:58.310 --> 00:54:59.740
gets plugged into another
computer.

00:55:03.140 --> 00:55:06.740
I think we should do a Hangout
on how we do our Hangouts

00:55:06.740 --> 00:55:07.530
sometime in the future.

00:55:07.530 --> 00:55:10.930
I think that would be a little
bit of a fun one.

00:55:10.930 --> 00:55:13.950
Fabs from Switzerland wants to
know about the performance of

00:55:13.950 --> 00:55:16.000
Chrome mobile apps.

00:55:16.000 --> 00:55:18.060
And that's something that's
really important to us.

00:55:18.060 --> 00:55:20.400
We want to make sure that these
apps run beautifully.

00:55:20.400 --> 00:55:22.610
And that's why we are--

00:55:22.610 --> 00:55:24.510
we're not ready to start
sharing them

00:55:24.510 --> 00:55:26.340
with the world yet.

00:55:26.340 --> 00:55:28.910
One of the things that we're
doing to really try and make

00:55:28.910 --> 00:55:31.820
sure that these apps run
beautifully, and these apps

00:55:31.820 --> 00:55:36.000
are great, is we're investing
a lot of time on Cordova.

00:55:36.000 --> 00:55:36.910
I mentioned this earlier.

00:55:36.910 --> 00:55:40.490
By having the engineers
work on Cordova--

00:55:40.490 --> 00:55:43.750
so they're actually submitting
code to make Cordova better,

00:55:43.750 --> 00:55:48.350
as well is implementing some of
the Chrome APIs that aren't

00:55:48.350 --> 00:55:51.530
available today.

00:55:51.530 --> 00:55:55.530
So hopefully, that answers
your question, Fabs.

00:55:55.530 --> 00:55:58.660
AKFLOW from New York wants to
know, "Can I use WebRTC, and

00:55:58.660 --> 00:56:00.380
are there any examples
today?" Yes.

00:56:00.380 --> 00:56:02.880
You can absolutely use WebRTC.

00:56:02.880 --> 00:56:07.550
Go hit up HTML5rocks.com And
I believe there's a couple

00:56:07.550 --> 00:56:11.650
working samples up there and a
couple good tutorials that you

00:56:11.650 --> 00:56:14.360
can use to go through and figure
out how to do these.

00:56:17.320 --> 00:56:20.210
One of the things that I
just want to put up--

00:56:20.210 --> 00:56:23.510
we're almost out of time, so I'm
going to just put up the

00:56:23.510 --> 00:56:25.110
link to the documentation
again.

00:56:25.110 --> 00:56:28.130
So if you want to go find that
documentation, any of the

00:56:28.130 --> 00:56:30.750
resources, or anything like
that, definitely go

00:56:30.750 --> 00:56:32.400
check that link out.

00:56:32.400 --> 00:56:34.840
Again, it's
developer.chrome.com, and

00:56:34.840 --> 00:56:39.150
click on the link that
says Chrome Apps.

00:56:39.150 --> 00:56:41.430
VAN RIPER: Pete, could I just
make a plug for a hashtag?

00:56:41.430 --> 00:56:42.600
PETE LEPAGE: Absolutely.

00:56:42.600 --> 00:56:44.230
VAN RIPER: I mean, if you guys
want to have follow on

00:56:44.230 --> 00:56:47.670
discussions on Google+ or
elsewhere, please use the

00:56:47.670 --> 00:56:50.980
#chromeapps, all one
word, hashtag.

00:56:50.980 --> 00:56:51.160
PETE LEPAGE: Perfect.

00:56:51.160 --> 00:56:51.400
Yeah.

00:56:51.400 --> 00:56:54.920
So if you do hashtag that stuff,
we try to keep an eye

00:56:54.920 --> 00:56:59.360
on for those kinds of things
and respond as best we can.

00:56:59.360 --> 00:57:02.550
There's also a mailing list
that if you want to get

00:57:02.550 --> 00:57:04.790
involved, you can have
a look there.

00:57:04.790 --> 00:57:08.070
I'll add that as one of the
comments afterwards in the

00:57:08.070 --> 00:57:12.840
Hangout video on our Google+
page, on the Chrome Developers

00:57:12.840 --> 00:57:14.790
Google+ page.

00:57:14.790 --> 00:57:19.990
So with that, Djazz from Sweden
wants to know, "Can I

00:57:19.990 --> 00:57:23.870
access the native menu bar, or
global menu bar, in OS X in my

00:57:23.870 --> 00:57:27.370
app, or should I build my own
with HTML and JavaScript?" So,

00:57:27.370 --> 00:57:31.390
Djazz, right now the
answer is no.

00:57:31.390 --> 00:57:32.580
You can't access it.

00:57:32.580 --> 00:57:34.900
It is something we're trying
to figure out how to do and

00:57:34.900 --> 00:57:37.520
how to get it to work right,
because it's something that's

00:57:37.520 --> 00:57:39.740
really important to us.

00:57:39.740 --> 00:57:42.960
But we haven't been able to
figure out how to get that to

00:57:42.960 --> 00:57:44.725
work right.

00:57:44.725 --> 00:57:47.050
Under certain operating systems
and certain things,

00:57:47.050 --> 00:57:48.200
some things are restricted.

00:57:48.200 --> 00:57:50.250
And unfortunately, that's
one of them.

00:57:50.250 --> 00:57:55.950
So we're trying to see if it's
something that's possible.

00:57:55.950 --> 00:57:58.800
I would recommend, for the time
being, writing your own

00:57:58.800 --> 00:58:02.845
in HTML and JavaScript, but
doing it in such a way that

00:58:02.845 --> 00:58:07.270
you know that if we do get it,
you can quickly and easily

00:58:07.270 --> 00:58:11.360
remove it, and you're just
calling a set of APIs.

00:58:11.360 --> 00:58:16.220
So I'm going to take one more
question, and then we'll wrap

00:58:16.220 --> 00:58:18.010
up for today.

00:58:18.010 --> 00:58:22.160
And Dex, your question-- you
get to be the last one.

00:58:22.160 --> 00:58:24.002
Congratulations.

00:58:24.002 --> 00:58:25.590
"Can Chrome apps run in the

00:58:25.590 --> 00:58:28.010
background be launched remotely?

00:58:28.010 --> 00:58:30.600
For example, tap a button on
your phone, opens a full

00:58:30.600 --> 00:58:33.370
screen app on the desktop."
That's an interesting

00:58:33.370 --> 00:58:36.400
question, and in
many ways, yes.

00:58:36.400 --> 00:58:37.700
I haven't actually tried it.

00:58:40.400 --> 00:58:43.750
But theoretically, there should
be no reason why you

00:58:43.750 --> 00:58:45.030
can't do that.

00:58:45.030 --> 00:58:52.950
So you remember before, where we
had our listen for launched

00:58:52.950 --> 00:58:55.890
listener in our main.js, there's
no reason why you

00:58:55.890 --> 00:58:58.570
couldn't put a listener in
there that listens on a

00:58:58.570 --> 00:59:01.670
WebSocket, listens on something
else, that says,

00:59:01.670 --> 00:59:06.520
when you hear this particular
thing, great.

00:59:06.520 --> 00:59:07.720
Open the new window.

00:59:07.720 --> 00:59:08.380
And I lied.

00:59:08.380 --> 00:59:09.850
I'm going to take two more
questions, because there's two

00:59:09.850 --> 00:59:13.500
more really good questions that
I want to hit in here.

00:59:13.500 --> 00:59:16.720
The next question, "Why is
localStorage not available in

00:59:16.720 --> 00:59:17.430
Chrome apps?

00:59:17.430 --> 00:59:19.770
And is there any way to
use a Sync version of

00:59:19.770 --> 00:59:21.810
chrome.storage.local in apps?

00:59:21.810 --> 00:59:24.270
Async read/write is a
pain to work with."

00:59:24.270 --> 00:59:27.510
I agree with you on that
pain to work with.

00:59:27.510 --> 00:59:30.530
I was struggling with it
a little bit yesterday.

00:59:30.530 --> 00:59:32.790
But there are ways around it,
and there's some good things

00:59:32.790 --> 00:59:34.160
that you can do.

00:59:34.160 --> 00:59:36.220
It's not available for a couple
of reasons, and the

00:59:36.220 --> 00:59:40.680
primary reason being that
local storage, being

00:59:40.680 --> 00:59:42.880
synchronous, is terribly slow.

00:59:42.880 --> 00:59:46.420
If you actually go and look at
some of the analytics that

00:59:46.420 --> 00:59:49.390
people have done to see how fast
it runs, it's actually

00:59:49.390 --> 00:59:50.900
one of the slowest things
that you can do.

00:59:50.900 --> 00:59:52.860
It slows down your app a lot.

00:59:52.860 --> 00:59:56.960
So by using async and forcing
you to go that way, we're

00:59:56.960 --> 01:00:00.230
really trying to target on
performance, making sure that

01:00:00.230 --> 01:00:03.050
your apps run fast.

01:00:03.050 --> 01:00:06.100
So Ronny, I hope that answers
your question.

01:00:06.100 --> 01:00:08.400
I know it's a little bit fun.

01:00:08.400 --> 01:00:12.730
But there are some really good
ways of being able to make it

01:00:12.730 --> 01:00:16.460
less of a pain, to
put it politely.

01:00:16.460 --> 01:00:17.550
And then the final question--

01:00:17.550 --> 01:00:18.790
Ryan, in Connecticut.

01:00:18.790 --> 01:00:23.160
"Can I write Chrome packaged
apps using Dart?" Not yet.

01:00:23.160 --> 01:00:25.030
But the team's working on it.

01:00:25.030 --> 01:00:28.130
It is something that a bunch
of people have asked for.

01:00:28.130 --> 01:00:35.130
And it is something that
we are working on.

01:00:35.130 --> 01:00:35.225
Wow.

01:00:35.225 --> 01:00:36.270
That was an hour?

01:00:36.270 --> 01:00:38.230
There were a ton of fantastic
questions.

01:00:38.230 --> 01:00:41.660
And there's a lot more really
great questions in here.

01:00:41.660 --> 01:00:43.900
I'll try and take a look through
these questions and

01:00:43.900 --> 01:00:45.780
respond to the questions
inline over

01:00:45.780 --> 01:00:48.340
the next day or so.

01:00:48.340 --> 01:00:54.020
But if you see me on Google+,
add me to your circles and

01:00:54.020 --> 01:00:54.830
keep an eye on me there.

01:00:54.830 --> 01:00:57.920
You should also add the Chrome
Developers to your circles, if

01:00:57.920 --> 01:01:02.350
you don't already have that in
your circles, and follow that.

01:01:02.350 --> 01:01:04.450
So with that, I'll say, thank
you guys, very much.

01:01:04.450 --> 01:01:05.780
This was wonderful.

01:01:05.780 --> 01:01:08.472
And Van, I'll pass it
back over to you.

01:01:08.472 --> 01:01:09.970
VAN RIPER: Well, thank
you, Pete.

01:01:09.970 --> 01:01:13.610
This was a great inaugural GDG
All Hands, and I'm looking

01:01:13.610 --> 01:01:16.330
forward to doing many more of
these in the months ahead.

01:01:16.330 --> 01:01:16.890
Thank you, Pete.

01:01:16.890 --> 01:01:17.590
PETE LEPAGE: Awesome.

01:01:17.590 --> 01:01:18.020
All right.

01:01:18.020 --> 01:01:18.920
Thank you.

01:01:18.920 --> 01:01:20.360
And thank you to everybody.

