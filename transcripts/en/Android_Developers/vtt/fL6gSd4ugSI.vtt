WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:04.490
&gt;&gt; Cleron: Hi, my name is Mike Cleron. I’m
an engineer on the Android Development team.

00:00:04.490 --> 00:00:08.860
Android is an open software platform for mobile
development. It is intended to be a complete

00:00:08.860 --> 00:00:14.300
stack that includes everything from the operating
system through middleware and up through applications.

00:00:14.300 --> 00:00:19.109
Now, I’m going to talk about how Android
can achieve smooth integration of components

00:00:19.109 --> 00:00:23.740
that are written by different authors as user
navigates forward and backward through the

00:00:23.740 --> 00:00:29.980
experience. In Android, every application
runs in its own process. There’s a lot of

00:00:29.980 --> 00:00:36.329
benefits to this. It gives you security, protected
memory. It means that an application is doing

00:00:36.329 --> 00:00:42.199
something CPU intensive, won’t block other
critical activities, like, answering a phone.

00:00:42.199 --> 00:00:47.440
So, all applications are running in their
own processes and the Android system itself

00:00:47.440 --> 00:00:52.379
is responsible for starting these processes
and shutting them down as necessary to reclaim

00:00:52.379 --> 00:00:57.780
resources. I have an example that shows how
that works. Now, to explain this example,

00:00:57.780 --> 00:01:02.440
let me set up the scenario. In this example,
the user is going to navigate from the home

00:01:02.440 --> 00:01:08.939
screen to their inbox in the mail application.
They’re going to select a mail message,

00:01:08.939 --> 00:01:12.700
from the mail message, they’re going to
follow a link out to some Web content in the

00:01:12.700 --> 00:01:15.829
browser, and then from the browser, they’re
going to click on something that takes them

00:01:15.829 --> 00:01:20.670
in to the maps application which is a not
unreasonable scenario. Now, when they do this,

00:01:20.670 --> 00:01:25.189
they’re going to actually navigate through
four different applications running in four

00:01:25.189 --> 00:01:29.740
different processes that are potentially written
by four different authors. From the users

00:01:29.740 --> 00:01:34.130
point of view, none of that is important.
What they want is to be able to navigate forward,

00:01:34.130 --> 00:01:38.200
clicking on what they want to click on, getting
the component they want to have responding

00:01:38.200 --> 00:01:41.679
to each click, and then they want to be able
to go backwards and get back to where they

00:01:41.679 --> 00:01:45.530
were. And in particular, they don’t want
to have to worry about which applications

00:01:45.530 --> 00:01:49.409
are running, how much memory they’ve consumed,
how much memory is left on the device, whether

00:01:49.409 --> 00:01:53.420
they can launch that next process because
all the resources have been taken up. So the

00:01:53.420 --> 00:01:59.899
Android system manages all that for them.
Here’s how it works. At the start, the user

00:01:59.899 --> 00:02:05.289
is on the homepage, there are two processes,
in this example, that are running. There’s

00:02:05.289 --> 00:02:11.209
the system process which contains the activity
manager. That contains the common backstack

00:02:11.209 --> 00:02:16.200
that is used by all activities, regardless
of which process they run in, and then the

00:02:16.200 --> 00:02:22.409
home process is running and that has the home
activity running inside it. Now, before launching

00:02:22.409 --> 00:02:27.239
the mail application, the system is going
to save the state of the home application

00:02:27.239 --> 00:02:32.030
just in case, anything bad happens to it,
and you’ll see that bad stuff in a few minutes.

00:02:32.030 --> 00:02:37.629
So the home application has saved that state
in a little parcel that has been moved to

00:02:37.629 --> 00:02:44.349
the system process. And at that point, the
system can create the mail process, we can

00:02:44.349 --> 00:02:50.530
then launch the mail list activity into that
process, and now that’s what the user is

00:02:50.530 --> 00:02:55.970
seeing on the screen, their mail list. If
they click on a particular mail message, then

00:02:55.970 --> 00:03:02.079
that creates a request to launch the next
activity that goes to the system process.

00:03:02.079 --> 00:03:07.769
Again, before a new activity is launched,
we save the state of the last activity, so

00:03:07.769 --> 00:03:12.970
the mail list saves its state into the system
process. It’s worth noting that the state

00:03:12.970 --> 00:03:19.939
that it saves is not every message in your
inbox, it’s meta information about the current

00:03:19.939 --> 00:03:24.079
state of the activity. Things like, where
you are scrolled to in the list; which item

00:03:24.079 --> 00:03:29.780
is selected. You don’t have to store the
complete mail list in that parcel. So now,

00:03:29.780 --> 00:03:36.180
that the information has been saved, then
the system is free to launch the next activity

00:03:36.180 --> 00:03:41.860
that shows a particular mail message and now
that is what the user sees on the screen.

00:03:41.860 --> 00:03:47.110
From the mail message, they then click on
a link to go out to the Web. So again, another

00:03:47.110 --> 00:03:54.849
request is created. The state of the currently
running activity is saved in the system process,

00:03:54.849 --> 00:04:02.230
and now, we need to create a process to run
the browser in. So we launch the browser process,

00:04:02.230 --> 00:04:07.129
we launch the browser activity into that process
and the user is now looking at the browser.

00:04:07.129 --> 00:04:12.680
We’re going to do this one time where the
user clicks on a link in the browser to launch

00:04:12.680 --> 00:04:18.880
a map. We create the request. We save the
state of the foreground activity, in this

00:04:18.880 --> 00:04:25.000
case the browser, and we would like to launch
the maps application but, as you can see,

00:04:25.000 --> 00:04:30.720
we’re out of room. So, in order to launch
the maps application, we have to find a process

00:04:30.720 --> 00:04:34.620
that we can kill. We don’t want to kill
the home application because we use that for

00:04:34.620 --> 00:04:39.050
a navigation hub, we want that to be always
available, so it’s always responsive. We

00:04:39.050 --> 00:04:42.950
don’t want to kill the browser because that’s
the activity the user just came from. But

00:04:42.950 --> 00:04:47.600
the mail application is a few frames back
on the backstack. No one is looking at it.

00:04:47.600 --> 00:04:54.260
It’s a perfect candidate to kill, and so
it’s gone. Now, that the mail application

00:04:54.260 --> 00:05:01.550
is gone, we can create the maps process, and
in the maps process, we can create the maps

00:05:01.550 --> 00:05:07.080
activity and now the user is looking at the
map. So it’s worth noting that all of this

00:05:07.080 --> 00:05:10.860
happened without the user being aware of any
of the machinery from the user’s point of

00:05:10.860 --> 00:05:14.490
view. They click on mail, they went to mail.
They click on the message, they went to a

00:05:14.490 --> 00:05:18.470
message. They click from the message to the
Web, they went to the Web. From the Web, they

00:05:18.470 --> 00:05:22.740
click on a map, they went to a map. The fact
that these are different processes, different

00:05:22.740 --> 00:05:26.730
applications, different developers, it’s
invisible to the user which is as it should

00:05:26.730 --> 00:05:33.970
be. Now, the reason we saved all those little
pieces of state information, in the system

00:05:33.970 --> 00:05:39.100
process is so that we can go backwards and
the user can navigate backwards as seamlessly

00:05:39.100 --> 00:05:44.780
as they navigated forward. So, from the current
state, if the user hits back, the first thing

00:05:44.780 --> 00:05:51.780
that we’re going to do is pop the maps application
off the top of the activity stack and restore

00:05:51.780 --> 00:05:55.650
the browser. The browser doesn’t actually
need to restore its state because it’s the

00:05:55.650 --> 00:06:00.840
same object so, at this point, we can just
discard the saved state that was stored in

00:06:00.840 --> 00:06:05.830
the system process. And now the user is looking
at the browser, that’s the foreground activity.

00:06:05.830 --> 00:06:10.860
If they hit back again, they are expecting
to go back to the mail message that they came

00:06:10.860 --> 00:06:15.350
from. Unfortunately, the mail process isn’t
running anymore. So the first thing we have

00:06:15.350 --> 00:06:22.590
to do is make space to run the mail application.
We do that by killing the maps process and

00:06:22.590 --> 00:06:29.480
starting the mail process. Once we’ve done
that, we can then launch a fresh copy of the

00:06:29.480 --> 00:06:34.370
message activity. This is a new copy that
doesn’t have any of the state that the user

00:06:34.370 --> 00:06:39.540
saw when they left. In order to get it back
into the state that the user is expecting,

00:06:39.540 --> 00:06:45.400
we then take that saved parcel of information
from the system process and we restore the

00:06:45.400 --> 00:06:49.720
state of the message activity. Once we’ve
done that, it’s ready to be shown to the

00:06:49.720 --> 00:06:54.850
user. We can pop the browser off the top of
the activity stack, show them the message

00:06:54.850 --> 00:06:59.420
activity and they’re back where they started.
If we do that one more time, if we hit back

00:06:59.420 --> 00:07:04.180
again from the mail message to go back to
the mail list, we don’t have to create a

00:07:04.180 --> 00:07:08.310
new process because this one is still running
in the mail process, we just create a new

00:07:08.310 --> 00:07:13.620
instance of the mail list activity, that again
is a fresh activity to restore its state.

00:07:13.620 --> 00:07:18.680
We take the state from the system process.
Give that back to the mail list. Now the mail

00:07:18.680 --> 00:07:23.010
list is in the same state that it was when
the user left. We can pop the message and

00:07:23.010 --> 00:07:29.470
the user back where they came from. So the—what
this example is showing is that the user can

00:07:29.470 --> 00:07:34.320
navigate forwards and backwards through multiple
activities, they’re running multiple processes,

00:07:34.320 --> 00:07:38.450
they’re provided by multiple developers,
and have a very seamless experience because

00:07:38.450 --> 00:07:43.300
the android framework is doing the hard work
of launching and shutting down processes to

00:07:43.300 --> 00:07:49.750
manage resources and making sure that the
state is preserved as the user expects. If

00:07:49.750 --> 00:07:53.930
you’re interested in finding out more about
Android, I encourage you to visit the developer

00:07:53.930 --> 00:07:59.020
site and download the SDK. In the SDK, you’ll
find a lot more documentation, and sample

00:07:59.020 --> 00:08:03.810
code, and you’ll also be able to try building
applications of your own. There’s also a

00:08:03.810 --> 00:08:07.690
developer group that you can join to find
out more information, and I also encourage

00:08:07.690 --> 00:08:12.520
you to check back frequently because we’ll
be posting updates to the SDK as the platform

00:08:12.520 --> 00:08:14.150
matures. Thank you for watching.

