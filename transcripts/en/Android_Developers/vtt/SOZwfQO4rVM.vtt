WEBVTT
Kind: captions
Language: en

00:00:03.080 --> 00:00:05.540
MAYA BEN-ARI: Hello,
everyone, and welcome

00:00:05.540 --> 00:00:07.410
to "Inclusive
Design and Testing,

00:00:07.410 --> 00:00:10.220
Making Your App Accessible."

00:00:10.220 --> 00:00:12.120
My name is Maya Ben-Ari.

00:00:12.120 --> 00:00:15.590
I'm a product manager on
Android accessibility.

00:00:15.590 --> 00:00:17.730
With me today is
Casey Burkhardt,

00:00:17.730 --> 00:00:21.945
who is an engineer on
Google accessibility team,

00:00:21.945 --> 00:00:27.770
and we'll also have Michal who
runs APPlicable Google Tel Aviv

00:00:27.770 --> 00:00:28.580
program.

00:00:28.580 --> 00:00:33.590
Michal will be
joining us by video.

00:00:33.590 --> 00:00:35.850
We are very excited to have
you all in this session

00:00:35.850 --> 00:00:40.410
today and thank
you all for coming.

00:00:40.410 --> 00:00:43.310
Our agenda will start
with a brief overview

00:00:43.310 --> 00:00:45.810
about accessibility,
then we'll tell you

00:00:45.810 --> 00:00:49.040
more about the APPlicable
Google Tel Aviv program.

00:00:49.040 --> 00:00:52.340
We'll dive into inclusive
design best practices

00:00:52.340 --> 00:00:55.520
and we'll have a
section about testing.

00:01:00.280 --> 00:01:04.260
So first, what is accessibility?

00:01:04.260 --> 00:01:06.790
Accessibility is about
creating products

00:01:06.790 --> 00:01:09.190
that are usable by everyone.

00:01:09.190 --> 00:01:11.890
This include also users
with disabilities,

00:01:11.890 --> 00:01:15.690
such as vision impairment
or motor impairment,

00:01:15.690 --> 00:01:18.120
but I'd like to rephrase
this definition slightly

00:01:18.120 --> 00:01:21.650
differently, and I would
say that accessibility

00:01:21.650 --> 00:01:23.820
is about challenging
the assumptions we

00:01:23.820 --> 00:01:25.980
make about our users.

00:01:25.980 --> 00:01:28.940
For example, can the
user see the device?

00:01:28.940 --> 00:01:31.860
Can he or she distinguishes
between color?

00:01:31.860 --> 00:01:34.080
Can the user touch the device?

00:01:34.080 --> 00:01:38.280
And can the user hear the sound
that the device is producing

00:01:38.280 --> 00:01:41.860
and speak back to the device?

00:01:41.860 --> 00:01:45.200
Now, this is not a small number
that we are talking about.

00:01:45.200 --> 00:01:49.280
20% of the US population will
have some sort of a disability

00:01:49.280 --> 00:01:51.870
during their lifetime.

00:01:51.870 --> 00:01:54.710
But this is not all.

00:01:54.710 --> 00:01:57.600
Challenging the
assumption we make

00:01:57.600 --> 00:02:02.010
will benefit all users, as
some of the technologies that

00:02:02.010 --> 00:02:06.200
were developed in the past, such
as speech recognition and work

00:02:06.200 --> 00:02:09.720
prediction started as
technologies for users

00:02:09.720 --> 00:02:12.010
with accessibility needs.

00:02:12.010 --> 00:02:15.310
But this is not all.

00:02:15.310 --> 00:02:20.130
We are all users with
accessibility needs sometimes.

00:02:20.130 --> 00:02:23.500
This is called
situational disability.

00:02:23.500 --> 00:02:26.410
For example, when
we drive our car,

00:02:26.410 --> 00:02:29.590
we cannot look at our device.

00:02:29.590 --> 00:02:32.030
When we are in a
noisy environment,

00:02:32.030 --> 00:02:35.090
we cannot listen to the sound
that the device is producing

00:02:35.090 --> 00:02:37.930
and we cannot speak
back to the device.

00:02:37.930 --> 00:02:41.980
And when we carry heavy
bags from the supermarket,

00:02:41.980 --> 00:02:46.270
we cannot use our hands
to interact with a device.

00:02:46.270 --> 00:02:49.040
So we want to create
an inclusive experience

00:02:49.040 --> 00:02:53.800
for all our users regardless
of what restriction they

00:02:53.800 --> 00:02:57.050
might have.

00:02:57.050 --> 00:02:58.940
Now, in the next
section, we are going

00:02:58.940 --> 00:03:01.940
to tell you more about
APPlicable Google Tel Aviv

00:03:01.940 --> 00:03:03.260
program.

00:03:03.260 --> 00:03:05.810
So what is APPlicable?

00:03:05.810 --> 00:03:11.250
APPlicable is the program
that helps startups to make

00:03:11.250 --> 00:03:13.740
their app more accessible.

00:03:13.740 --> 00:03:18.740
And APPlicable does so by
inviting developer and startups

00:03:18.740 --> 00:03:24.520
to their campus to witness how
blind and motor-impaired user

00:03:24.520 --> 00:03:26.650
are using their apps.

00:03:26.650 --> 00:03:31.140
So this is a video that Michal
Waltner from Google Tel Aviv

00:03:31.140 --> 00:03:34.730
just sent us.

00:03:34.730 --> 00:03:37.410
Let's move to the video.

00:03:37.410 --> 00:03:38.290
[VIDEO PLAYBACK]

00:03:38.290 --> 00:03:42.940
-My name is Ilana Benish
and I am 38 years-old.

00:03:42.940 --> 00:03:45.290
I born blind.

00:03:45.290 --> 00:03:50.470
I had many surgeries
and they have succeeded

00:03:50.470 --> 00:03:55.560
to improve my sight in one eye.

00:03:55.560 --> 00:03:59.460
Independency means access.

00:03:59.460 --> 00:04:02.760
Many of the technologies
that available today are not

00:04:02.760 --> 00:04:08.730
accessible and that's
why I came to APPlicable.

00:04:08.730 --> 00:04:09.870
-My name is Michal.

00:04:09.870 --> 00:04:13.030
I'm the program manager
of Campus Tel Aviv, which

00:04:13.030 --> 00:04:15.910
is a Google space that is
dedicated to entrepreneurs

00:04:15.910 --> 00:04:19.200
and startups needing help
in the local ecosystem

00:04:19.200 --> 00:04:21.070
to create amazing startups.

00:04:21.070 --> 00:04:25.670
I started thinking, how is it
possible that this huge market

00:04:25.670 --> 00:04:27.470
is not being addressed?

00:04:27.470 --> 00:04:31.760
Because if they knew that
with some easy steps,

00:04:31.760 --> 00:04:36.970
they can actually make their app
accessible to this huge market,

00:04:36.970 --> 00:04:40.610
I was sure that they bound
to do something about this.

00:04:40.610 --> 00:04:43.961
So this is how the idea of this
program of APPlicable started.

00:04:43.961 --> 00:04:44.960
-My name is Ariel Kedem.

00:04:44.960 --> 00:04:48.590
I'm a mobile product
manager at Fiber.

00:04:48.590 --> 00:04:51.550
Fiber is a marketplace
for creative professionals

00:04:51.550 --> 00:04:55.170
who are helping people
productize and make money

00:04:55.170 --> 00:04:56.710
from their talent.

00:04:56.710 --> 00:04:59.870
Fiber is trying to
change how people work,

00:04:59.870 --> 00:05:04.820
and allowing people with
disabilities to work with Fiber

00:05:04.820 --> 00:05:06.060
is something big.

00:05:06.060 --> 00:05:09.030
-Well, we started with visually
impaired and blind people.

00:05:09.030 --> 00:05:11.280
Each table had a startup.

00:05:11.280 --> 00:05:15.100
Mentors from the design
world, from the product world,

00:05:15.100 --> 00:05:18.020
and developers sat
together with a person

00:05:18.020 --> 00:05:20.195
with a visual
impairment and a person

00:05:20.195 --> 00:05:25.260
who was blind to see how he's
actually using his own app.

00:05:25.260 --> 00:05:27.940
-My name is Jonathan, Android
developer and evangelist

00:05:27.940 --> 00:05:28.982
in Gett.

00:05:28.982 --> 00:05:31.820
Gett is a leading platform
for on-demand services,

00:05:31.820 --> 00:05:35.514
like Gett Taxi, or Gett Pizza,
or even Gett the Doctor.

00:05:35.514 --> 00:05:36.930
I remember at the
beginning, there

00:05:36.930 --> 00:05:38.580
was a woman who said,
ah, you're from Gett?

00:05:38.580 --> 00:05:39.621
I'm not talking with you.

00:05:39.621 --> 00:05:41.212
Like, you make my life awful.

00:05:41.212 --> 00:05:43.420
When you make this difference
for them, first of all,

00:05:43.420 --> 00:05:44.610
you feel proud.

00:05:44.610 --> 00:05:46.450
Because, like, you've
really helped someone.

00:05:46.450 --> 00:05:48.074
One of the really
small changes that we

00:05:48.074 --> 00:05:50.980
did that had a huge
impact was that we

00:05:50.980 --> 00:05:53.900
have-- when you open an app,
you have marketing pop-up right

00:05:53.900 --> 00:05:57.630
straight on the screen and
it doesn't have any label.

00:05:57.630 --> 00:06:00.670
So for the blind people,
it was, like, oh,

00:06:00.670 --> 00:06:03.510
so we're showing a
regular map with a address

00:06:03.510 --> 00:06:06.570
and Order a Taxi
button, and wasn't aware

00:06:06.570 --> 00:06:08.910
that there, actually, that
marketing pop-up and they

00:06:08.910 --> 00:06:11.820
can't click on anything
or using the TalkBack.

00:06:11.820 --> 00:06:17.220
And by just verifying that if
your-- that TalkBack is turned

00:06:17.220 --> 00:06:19.740
off, not showing this pop-up
is, like, huge difference,

00:06:19.740 --> 00:06:21.640
because now these people are
able to order a taxi instead

00:06:21.640 --> 00:06:23.556
of constantly clicking
on the marketing pop-up

00:06:23.556 --> 00:06:26.070
and not understanding why
they can't order a taxi.

00:06:26.070 --> 00:06:30.880
Actually, the input was that
she went out of the building

00:06:30.880 --> 00:06:33.640
and she said, oh, now
I'm able to order a taxi.

00:06:33.640 --> 00:06:36.580
-We actually did some
really small change.

00:06:36.580 --> 00:06:40.850
We have a page of
categories within Fiber.

00:06:40.850 --> 00:06:43.210
It was built like,
put a category

00:06:43.210 --> 00:06:46.710
next to a category
in a very long page.

00:06:46.710 --> 00:06:50.910
And when we did one of the
session, they just tell me,

00:06:50.910 --> 00:06:55.310
just build them one in a row
and not one next to each other.

00:06:55.310 --> 00:06:56.060
So we changed it.

00:06:56.060 --> 00:06:59.030
We put it in the app home
page and just changed

00:06:59.030 --> 00:07:01.780
dramatically how people
navigate the app.

00:07:01.780 --> 00:07:03.880
Thinking about a
simple experience,

00:07:03.880 --> 00:07:06.150
it just made me a
better product manager.

00:07:06.150 --> 00:07:08.960
-But it's a really
small effort just

00:07:08.960 --> 00:07:12.190
to change a little bit bytes
of code to add additional stuff

00:07:12.190 --> 00:07:14.540
and you can make really a
huge difference for them,

00:07:14.540 --> 00:07:16.950
for their daily routine.

00:07:16.950 --> 00:07:21.950
-Tagging your components
on a specific page.

00:07:21.950 --> 00:07:27.650
Giving an image
the right alt tag.

00:07:27.650 --> 00:07:32.520
It's really something that
when you change how you think,

00:07:32.520 --> 00:07:34.270
it's very simple.

00:07:34.270 --> 00:07:38.310
Enable the accessible
view on your phone.

00:07:38.310 --> 00:07:44.180
Try to use the phone as someone,
just for example, can't see.

00:07:44.180 --> 00:07:46.980
This will affect everything
you do dramatically.

00:07:50.881 --> 00:07:53.839
-Button 96, unlabeled.

00:07:53.839 --> 00:07:57.290
Button 13, unlabeled.

00:07:57.290 --> 00:07:58.769
Button 74, unlabeled.

00:07:58.769 --> 00:08:00.248
Button.

00:08:00.248 --> 00:08:02.220
Button 18, unlabeled.

00:08:02.220 --> 00:08:04.041
Button 35, unlabeled.

00:08:04.041 --> 00:08:04.540
Button.

00:08:07.035 --> 00:08:10.528
[MUSIC PLAYING]

00:08:12.030 --> 00:08:13.382
-How was was it?

00:08:13.382 --> 00:08:15.262
-A disaster.

00:08:15.262 --> 00:08:16.490
No, really, a disaster.

00:08:16.490 --> 00:08:21.190
-So after about half a year that
we dealt with visual impairment

00:08:21.190 --> 00:08:25.460
and blindness, we went to the
second stage of the program

00:08:25.460 --> 00:08:29.390
and addressed people
with motor disabilities.

00:08:29.390 --> 00:08:32.211
So again, we opened
testing labs.

00:08:32.211 --> 00:08:33.169
We brought the mentors.

00:08:33.169 --> 00:08:34.870
We brought people
with disabilities.

00:08:34.870 --> 00:08:36.230
We brought startups.

00:08:36.230 --> 00:08:38.900
And we realized that
this is definitely

00:08:38.900 --> 00:08:41.250
something that is so needed.

00:08:41.250 --> 00:08:45.090
-Take your phone in one
hand and start to run.

00:08:45.090 --> 00:08:46.070
Run.

00:08:46.070 --> 00:08:52.800
Running and try to send
message during the running.

00:08:52.800 --> 00:08:54.975
You will have a lot of mistakes.

00:08:54.975 --> 00:08:59.720
And you need to erase and
retype, erase and retype.

00:08:59.720 --> 00:09:04.740
And this is my life
when I'm using apps.

00:09:04.740 --> 00:09:06.270
I'm Ohad.

00:09:06.270 --> 00:09:08.010
I'm 39 years-old.

00:09:08.010 --> 00:09:14.470
I'm working in Gett as
a senior QA engineer.

00:09:14.470 --> 00:09:20.990
I have cerebral palsy, and the
effect of that you can see.

00:09:20.990 --> 00:09:25.930
My speech is very-- I
have a difficult speech.

00:09:25.930 --> 00:09:29.460
And my right hand
is not functional

00:09:29.460 --> 00:09:33.910
and also both two legs
are not functional.

00:09:33.910 --> 00:09:36.550
And I have only one hand.

00:09:36.550 --> 00:09:40.290
And even in that hand I
have-- in three fingers

00:09:40.290 --> 00:09:42.810
I have a spastic.

00:09:42.810 --> 00:09:48.360
It's very difficult to touch--
to reach all the corners

00:09:48.360 --> 00:09:50.580
with one finger.

00:09:50.580 --> 00:09:54.090
My wildest dream is that
I will have the ability

00:09:54.090 --> 00:09:59.060
to put each button in
the place that I want.

00:09:59.060 --> 00:10:04.500
I know that the designers and
UI and UX wouldn't love that,

00:10:04.500 --> 00:10:09.400
but it will make the app
more accessible for me

00:10:09.400 --> 00:10:13.360
and for the many,
many other people.

00:10:13.360 --> 00:10:15.000
This is my dream.

00:10:15.000 --> 00:10:18.250
-To meet with them, to
tell them our needs,

00:10:18.250 --> 00:10:21.340
it was very, very
important meetings.

00:10:21.340 --> 00:10:24.980
-My message to all developers
will be, hey, guys,

00:10:24.980 --> 00:10:25.910
you are there.

00:10:25.910 --> 00:10:29.130
You're actually the one
that can have the power

00:10:29.130 --> 00:10:34.400
to change, for a lot of
people, their entirely life.

00:10:34.400 --> 00:10:36.735
-I think about this
amazing APPlicable session

00:10:36.735 --> 00:10:41.905
in every screen, page, or button
that I'm adding to the app.

00:10:41.905 --> 00:10:46.750
And make the app more
accessible, it's a must.

00:10:46.750 --> 00:10:49.580
So now the ball
is in your hands.

00:10:49.580 --> 00:10:56.230
-Accessible apps are
changing our lives every day

00:10:56.230 --> 00:11:00.490
and will continue to change
everybody's life every day.

00:11:09.116 --> 00:11:10.090
[END PLAYBACK]

00:11:10.090 --> 00:11:13.499
[APPLAUSE]

00:11:20.830 --> 00:11:25.420
MAYA BEN-ARI: So I'd like to
thank Michal from Campus Google

00:11:25.420 --> 00:11:28.420
Tel Aviv APPlicable
program for sending us

00:11:28.420 --> 00:11:31.490
this wonderful video.

00:11:31.490 --> 00:11:37.180
From the video, we saw that
sometime small changes may have

00:11:37.180 --> 00:11:39.860
big impact on people lives.

00:11:39.860 --> 00:11:42.540
For example, as Jonathan
from Gett-- Jonathan

00:11:42.540 --> 00:11:44.320
is here, by the way.

00:11:44.320 --> 00:11:47.300
Just adding labeling
to the app that

00:11:47.300 --> 00:11:51.720
was previously not accessible
made a huge difference.

00:11:51.720 --> 00:11:53.840
And finally, and
then, like, suddenly,

00:11:53.840 --> 00:11:59.710
a user who couldn't use the
app could now order a cab.

00:11:59.710 --> 00:12:01.500
So in the next
section, we are going

00:12:01.500 --> 00:12:04.820
to get into specific
suggestion on how

00:12:04.820 --> 00:12:08.800
to create a more inclusive
experience for all users.

00:12:11.640 --> 00:12:16.180
So first, what is
inclusive design?

00:12:16.180 --> 00:12:20.320
Every product decision
that we make in our app

00:12:20.320 --> 00:12:25.220
may include or exclude
certain types of users.

00:12:25.220 --> 00:12:29.440
So what we want is to take
into this consideration

00:12:29.440 --> 00:12:32.610
those people with
a different need

00:12:32.610 --> 00:12:37.510
and to design our app which
is reachable and accessible

00:12:37.510 --> 00:12:39.970
to the different users.

00:12:39.970 --> 00:12:44.250
That all sounds good,
but how do we do that?

00:12:44.250 --> 00:12:46.470
So the first thing
that you need to do

00:12:46.470 --> 00:12:50.350
is to be familiar and try
the different accessibility

00:12:50.350 --> 00:12:51.530
services.

00:12:51.530 --> 00:12:54.420
This is what APPlicable
program is doing,

00:12:54.420 --> 00:12:56.800
is you want to
understand the experience

00:12:56.800 --> 00:12:58.920
of different users
with different needs.

00:13:01.880 --> 00:13:06.380
So first, what is an
accessibility service?

00:13:06.380 --> 00:13:10.000
An accessibility service is a
long-running privilege service

00:13:10.000 --> 00:13:12.950
that can do one of two things.

00:13:12.950 --> 00:13:18.700
One, it changes the way the
user interact with the design--

00:13:18.700 --> 00:13:20.130
interact with a device.

00:13:20.130 --> 00:13:23.360
Or second, it changes
the way that the content

00:13:23.360 --> 00:13:27.200
is represented to the users.

00:13:27.200 --> 00:13:30.420
Now, today we have four
different accessibility

00:13:30.420 --> 00:13:33.470
services available
on the platform.

00:13:33.470 --> 00:13:35.330
The first one is TalkBack.

00:13:35.330 --> 00:13:42.460
TalkBack is targeted for blind
and visually impaired user.

00:13:42.460 --> 00:13:44.870
And it's basically
a screen reader

00:13:44.870 --> 00:13:48.070
that the user can interact
with using gesture

00:13:48.070 --> 00:13:51.280
and the content is represented
through text to speech.

00:13:51.280 --> 00:13:54.179
Now, let's take a
look at that one.

00:13:54.179 --> 00:13:55.220
Let's switch to the demo.

00:14:00.420 --> 00:14:05.850
So now I'm inside of Android
settings in Accessibility,

00:14:05.850 --> 00:14:10.230
and I can go into TalkBack
and turn TalkBack on.

00:14:13.070 --> 00:14:14.910
PHONE: TalkBack on.

00:14:14.910 --> 00:14:17.300
MAYA BEN-ARI: I'll
go to home screen.

00:14:17.300 --> 00:14:18.400
PHONE: Home screen 1 of 1.

00:14:18.400 --> 00:14:20.804
Home screen 1 of 1.

00:14:20.804 --> 00:14:22.470
MAYA BEN-ARI: So with
TalkBack, the user

00:14:22.470 --> 00:14:25.240
has two ways to interact
with the device.

00:14:25.240 --> 00:14:28.090
The first one is called
linear navigation.

00:14:28.090 --> 00:14:31.900
So basically, for
whatever icon or element

00:14:31.900 --> 00:14:34.150
that currently has
focus, the user

00:14:34.150 --> 00:14:38.540
can use swipe gesture to
move between elements.

00:14:38.540 --> 00:14:39.720
PHONE: Phone.

00:14:39.720 --> 00:14:41.290
MAYA BEN-ARI: For example.

00:14:41.290 --> 00:14:43.190
PHONE: Messenger.

00:14:43.190 --> 00:14:45.040
Apps.

00:14:45.040 --> 00:14:46.910
MAYA BEN-ARI: Now,
when the user wants

00:14:46.910 --> 00:14:51.220
to activate a specific
element, he can basically

00:14:51.220 --> 00:14:54.080
double-tap anywhere
on the screen

00:14:54.080 --> 00:14:58.420
and the element that currently
has focus will open up.

00:14:58.420 --> 00:15:00.340
PHONE: Apps lock.

00:15:00.340 --> 00:15:02.550
MAYA BEN-ARI: So this
is linear navigation.

00:15:02.550 --> 00:15:04.770
The second way for
a user to interact

00:15:04.770 --> 00:15:07.410
is called explore by touch.

00:15:07.410 --> 00:15:11.560
In this case, the user
will put one finger down,

00:15:11.560 --> 00:15:15.540
and then he can navigate across
the screen, and every element

00:15:15.540 --> 00:15:19.860
that gains focus, TalkBack
will read out loud.

00:15:19.860 --> 00:15:21.790
Let's take a look.

00:15:21.790 --> 00:15:22.820
PHONE: Better Bug.

00:15:22.820 --> 00:15:23.723
Calculator.

00:15:23.723 --> 00:15:24.223
Click.

00:15:24.223 --> 00:15:25.440
Chrome.

00:15:25.440 --> 00:15:26.370
Drive.

00:15:26.370 --> 00:15:27.290
Gmail.

00:15:27.290 --> 00:15:28.980
Clock.

00:15:28.980 --> 00:15:30.900
MAYA BEN-ARI: Now,
when the user would

00:15:30.900 --> 00:15:33.220
like to open that
element, again, he

00:15:33.220 --> 00:15:37.820
can tap anywhere on the screen
and the element that has focus

00:15:37.820 --> 00:15:40.520
will open up.

00:15:40.520 --> 00:15:42.200
PHONE: Clock.

00:15:42.200 --> 00:15:44.190
MAYA BEN-ARI: This is TalkBack.

00:15:44.190 --> 00:15:48.159
The second service that we
have is called BrailleBack.

00:15:48.159 --> 00:15:48.700
BrailleBack--

00:15:48.700 --> 00:15:50.950
PHONE: Showing
items 1 to 2 of 2.

00:15:50.950 --> 00:15:52.594
MAYA BEN-ARI: Thank
you, TalkBack.

00:15:52.594 --> 00:15:54.879
[LAUGHTER]

00:15:56.705 --> 00:16:00.270
The second service that we
have on the platform today

00:16:00.270 --> 00:16:02.120
is called BrailleBack.

00:16:02.120 --> 00:16:05.490
Now, with BrailleBack,
the user is

00:16:05.490 --> 00:16:08.240
interacting with a
refreshable Braille

00:16:08.240 --> 00:16:10.600
display such as this one.

00:16:10.600 --> 00:16:16.040
In this case, the user have
this keyboard or the joystick

00:16:16.040 --> 00:16:19.220
and he can interact similarly
to how the user interact

00:16:19.220 --> 00:16:20.770
with TalkBack,
just in this case,

00:16:20.770 --> 00:16:23.250
the content is going
to be represented

00:16:23.250 --> 00:16:26.160
in Braille on
those Braille cells

00:16:26.160 --> 00:16:30.360
with the dots
raising and lowering.

00:16:30.360 --> 00:16:33.030
So this is BrailleBack.

00:16:33.030 --> 00:16:36.590
The third service we
have on the platform

00:16:36.590 --> 00:16:39.220
is called Switch Access.

00:16:39.220 --> 00:16:42.960
Switch Access is targeted
for motor-impaired user

00:16:42.960 --> 00:16:46.900
who have trouble interacting
with a touch screen.

00:16:46.900 --> 00:16:49.520
In this case, the
user can connect

00:16:49.520 --> 00:16:53.890
something which is called an
adaptive switch like this one.

00:16:53.890 --> 00:16:57.570
In this switch-- this
switch has two buttons.

00:16:57.570 --> 00:17:01.640
It can have more or less button.

00:17:01.640 --> 00:17:07.380
In this one, the user will
set one of the button as next

00:17:07.380 --> 00:17:10.200
and one of the button as select.

00:17:10.200 --> 00:17:12.690
Then the interaction
with switch access

00:17:12.690 --> 00:17:18.069
will be similar to the linear
navigation of TalkBack,

00:17:18.069 --> 00:17:21.010
just in this case,
the user will interact

00:17:21.010 --> 00:17:25.609
using the buttons
rather than gestures.

00:17:25.609 --> 00:17:29.470
Let's go to the slides, please.

00:17:29.470 --> 00:17:34.480
Now, the last service
is called Voice Access.

00:17:34.480 --> 00:17:38.290
This is a service we
recently launched.

00:17:38.290 --> 00:17:43.280
And the user can perform
low-level interaction

00:17:43.280 --> 00:17:44.400
using his voice.

00:17:44.400 --> 00:17:47.040
If you would like to
learn more about this one,

00:17:47.040 --> 00:17:51.720
we have the access
and [INAUDIBLE]

00:17:51.720 --> 00:17:56.510
sandbox just outside
of this room.

00:17:56.510 --> 00:18:00.400
Now, note, those are
representative examples

00:18:00.400 --> 00:18:05.390
of the capabilities
of accessibility APIs.

00:18:05.390 --> 00:18:11.320
Every developer can develop
services similar this one,

00:18:11.320 --> 00:18:15.340
but you can use those
one to actually test

00:18:15.340 --> 00:18:20.120
how your app interacts with
accessibility services.

00:18:20.120 --> 00:18:23.830
Now, if you would like to
focus on only two services,

00:18:23.830 --> 00:18:28.600
please test with Switch
Access and TalkBack.

00:18:28.600 --> 00:18:29.780
Why's that?

00:18:29.780 --> 00:18:32.580
Because with Switch
Access, what you can test

00:18:32.580 --> 00:18:35.200
is how accessibility
services interact

00:18:35.200 --> 00:18:40.480
with your UI, which is
basically testing your input.

00:18:40.480 --> 00:18:43.030
And with TalkBack, what
you are going to test

00:18:43.030 --> 00:18:46.890
is how content is
represented to the user.

00:18:46.890 --> 00:18:49.140
For example, whether
you have labeling,

00:18:49.140 --> 00:18:51.200
so you will test the output.

00:18:51.200 --> 00:18:52.870
So with Switch
Access and TalkBack,

00:18:52.870 --> 00:18:56.430
you are going to test both
your input and output.

00:19:00.350 --> 00:19:03.880
OK, so until now,
we are familiar

00:19:03.880 --> 00:19:06.800
with the different
accessibility services.

00:19:06.800 --> 00:19:10.600
Now, what you want to make
sure is that your application

00:19:10.600 --> 00:19:13.290
works well with those.

00:19:13.290 --> 00:19:14.660
And how do you do that?

00:19:14.660 --> 00:19:19.580
You following Android
accessibility best practices.

00:19:19.580 --> 00:19:21.690
In the next part of
the presentation,

00:19:21.690 --> 00:19:24.310
we brought to you
couple of highlights

00:19:24.310 --> 00:19:27.540
that we gather from
our testing data.

00:19:30.420 --> 00:19:34.420
So these are our top
four common suggestion

00:19:34.420 --> 00:19:39.230
based on testing data of how
to improve app accessibility.

00:19:39.230 --> 00:19:44.160
We have content labeling,
touch target size, contrast,

00:19:44.160 --> 00:19:45.680
and view attributes.

00:19:45.680 --> 00:19:48.600
Now, note, this is not
a comprehensive list,

00:19:48.600 --> 00:19:51.160
but these are small
changes that you

00:19:51.160 --> 00:19:58.915
can do in your app that may
have a significant impact.

00:20:02.030 --> 00:20:04.610
The first one is
content labeling.

00:20:07.350 --> 00:20:08.650
Why do we need that?

00:20:08.650 --> 00:20:11.150
This is for visually
impaired or blind user

00:20:11.150 --> 00:20:16.900
who are relying on screen reader
to understand what's going on.

00:20:16.900 --> 00:20:20.960
Specifically, screen readers
need the content description

00:20:20.960 --> 00:20:25.530
to understand UI elements
without visible text.

00:20:25.530 --> 00:20:28.750
This is what we saw in
the applicable video.

00:20:28.750 --> 00:20:31.220
Button 86, unlabel.

00:20:31.220 --> 00:20:34.270
Button 99, unlabel.

00:20:34.270 --> 00:20:40.110
So what you want is to use
content description in your XML

00:20:40.110 --> 00:20:42.580
layout to describe the element.

00:20:47.030 --> 00:20:50.760
For editable UI element,
our recommdation

00:20:50.760 --> 00:20:53.140
is slightly different.

00:20:53.140 --> 00:20:58.580
In this case, use android:hint
or android:labelfor

00:20:58.580 --> 00:21:00.140
for anything which is editable.

00:21:03.960 --> 00:21:07.660
Now, the next big
question is, how do I

00:21:07.660 --> 00:21:10.820
write my content labeling?

00:21:10.820 --> 00:21:13.820
And our most important
recommendation

00:21:13.820 --> 00:21:18.080
is make sure your
labeling make sense.

00:21:18.080 --> 00:21:20.280
So these are a
couple of do or don't

00:21:20.280 --> 00:21:22.580
with regarding to labeling.

00:21:22.580 --> 00:21:26.240
For example, if you have
an account switcher,

00:21:26.240 --> 00:21:30.860
how you should describe the
content, switch to a gmail

00:21:30.860 --> 00:21:35.150
some kind of a demo
account at gmail.com.

00:21:35.150 --> 00:21:39.920
What you don't want to do is
to add the content labeling,

00:21:39.920 --> 00:21:45.120
such as account switcher, switch
to account mydemo@gmail.com.

00:21:48.160 --> 00:21:52.320
So please be succinct
with your content labeling

00:21:52.320 --> 00:21:56.690
while describing enough context.

00:21:56.690 --> 00:21:59.840
The next one is if
you have a Close

00:21:59.840 --> 00:22:05.840
button, what you want to provide
is the labeling such as Close.

00:22:05.840 --> 00:22:09.620
You don't want to provide
the labeling for a Close

00:22:09.620 --> 00:22:15.240
button, because in that case,
the screen reader might read it

00:22:15.240 --> 00:22:18.970
as a Close button button.

00:22:18.970 --> 00:22:25.060
So please don't include the type
or the state of the UI element.

00:22:25.060 --> 00:22:27.950
Now, the last one--
my last example.

00:22:27.950 --> 00:22:33.810
If you have a pencil on
top of an image button,

00:22:33.810 --> 00:22:39.210
use content labeling such
as edit and not pencil.

00:22:39.210 --> 00:22:43.005
So please describe the
action and not the image.

00:22:47.880 --> 00:22:51.570
Now, our second recommendation
is about increasing touch

00:22:51.570 --> 00:22:53.040
target size.

00:22:53.040 --> 00:22:57.140
This will allow users
with mobility impairments

00:22:57.140 --> 00:23:00.840
to interact with
actionable UI elements.

00:23:00.840 --> 00:23:04.170
So what we'd like you to do
is to make your touch target

00:23:04.170 --> 00:23:07.340
size big enough.

00:23:07.340 --> 00:23:09.110
What is big enough?

00:23:09.110 --> 00:23:16.650
We recommend using touchable
items larger than 48 x 48 dp.

00:23:16.650 --> 00:23:20.210
Now, it doesn't mean
that the whole image

00:23:20.210 --> 00:23:22.570
needs to be 48 x 48.

00:23:22.570 --> 00:23:25.940
As you can see here with
the magnification glass,

00:23:25.940 --> 00:23:30.030
in that one, the
image is only 24 x 24.

00:23:30.030 --> 00:23:35.610
But we want that the touch area
which responds to user input

00:23:35.610 --> 00:23:39.980
will be bigger than 48 x 48.

00:23:39.980 --> 00:23:44.180
Now, you can extend the
touchable bound beyond the view

00:23:44.180 --> 00:23:47.770
size using TouchDelegate.

00:23:47.770 --> 00:23:51.730
So for the next example
and to talk about contrast,

00:23:51.730 --> 00:23:55.145
I'd like to invite
Casey onto the stage.

00:23:57.950 --> 00:24:01.296
[APPLAUSE]

00:24:04.483 --> 00:24:05.732
CASEY BURKHARDT: Thanks, Maya.

00:24:05.732 --> 00:24:07.320
My name is Casey Burkhardt.

00:24:07.320 --> 00:24:08.840
I'm a software
engineer on Google's

00:24:08.840 --> 00:24:11.510
accessibility engineering team.

00:24:11.510 --> 00:24:14.260
Our third best practice
today is about contrast.

00:24:14.260 --> 00:24:19.030
Ultimately, this comes down to
how well visually distinguished

00:24:19.030 --> 00:24:22.010
your elements in your UI are.

00:24:22.010 --> 00:24:23.930
This comes down to
the colors we choose

00:24:23.930 --> 00:24:26.320
to represent content in our UI.

00:24:26.320 --> 00:24:28.440
The way we measure
contrast is by looking

00:24:28.440 --> 00:24:30.760
at the luminance,
the brightness,

00:24:30.760 --> 00:24:33.530
of the colors used in the
foreground and background

00:24:33.530 --> 00:24:35.750
of an individual UI element.

00:24:35.750 --> 00:24:38.410
Having a high level of
contrast in our apps

00:24:38.410 --> 00:24:41.140
is important for users
with visual impairments,

00:24:41.140 --> 00:24:46.160
but also for people with light
sensitivity, like myself,

00:24:46.160 --> 00:24:48.950
and we want to
ensure that we meet

00:24:48.950 --> 00:24:51.280
a minimum level of
contrast between the colors

00:24:51.280 --> 00:24:54.530
we choose for the foreground and
the background of our content.

00:24:54.530 --> 00:24:57.090
Now, there are a bunch
of tools online that

00:24:57.090 --> 00:25:01.870
will allow you to plug
in your color values

00:25:01.870 --> 00:25:04.480
and obtain what we
call a contrast ratio.

00:25:04.480 --> 00:25:06.930
This is simply a ratio of the
luminance of the foreground

00:25:06.930 --> 00:25:08.336
to background.

00:25:08.336 --> 00:25:09.960
There are a number
of tools online that

00:25:09.960 --> 00:25:12.620
can be really helpful to
go and identify these,

00:25:12.620 --> 00:25:15.910
and we'll actually
see one in just a bit.

00:25:15.910 --> 00:25:18.130
So specifically,
what do we recommend?

00:25:18.130 --> 00:25:20.600
For any use of
images or iconography

00:25:20.600 --> 00:25:23.300
in your application, we
recommend a contrast ratio

00:25:23.300 --> 00:25:27.550
of 4.5:1, meaning either the
foreground or the background

00:25:27.550 --> 00:25:31.710
is going to be 4 and 1/2
times brighter than the other.

00:25:31.710 --> 00:25:34.450
For text content,
our recommendation

00:25:34.450 --> 00:25:37.040
varies based on
the size of text.

00:25:37.040 --> 00:25:42.250
If your text is large-- that's
18 scale pixels or larger--

00:25:42.250 --> 00:25:45.330
we recommend a ratio of 3:1.

00:25:45.330 --> 00:25:50.554
For text any smaller than that,
we recommend the 4.5:1 ratio.

00:25:50.554 --> 00:25:51.970
And on this slide,
we can actually

00:25:51.970 --> 00:25:56.270
see a few examples of
primary color combinations

00:25:56.270 --> 00:25:59.290
and how they stack up in
terms of contrast ratios.

00:25:59.290 --> 00:26:02.590
So as we can see, white
and yellow on black,

00:26:02.590 --> 00:26:07.730
and white and yellow on blue,
both meet the 4.5 ratio.

00:26:07.730 --> 00:26:11.260
But note that white
or yellow on red

00:26:11.260 --> 00:26:14.600
should only be used in
combination with large text.

00:26:14.600 --> 00:26:17.270
We also see a few examples
of color combinations

00:26:17.270 --> 00:26:21.030
that don't work well, such as
blue on black, red on blue,

00:26:21.030 --> 00:26:22.800
or white on yellow.

00:26:22.800 --> 00:26:26.090
These shouldn't be used in
combination with one another.

00:26:29.230 --> 00:26:32.190
Our fourth and final best
practice for accessibility,

00:26:32.190 --> 00:26:34.820
inclusive design,
is all around how

00:26:34.820 --> 00:26:36.990
your application
represents its views

00:26:36.990 --> 00:26:39.370
within the View hierarchy.

00:26:39.370 --> 00:26:41.640
Android's accessibility
services will

00:26:41.640 --> 00:26:45.890
use View attributes to determine
how to represent and navigate

00:26:45.890 --> 00:26:48.060
content within your app.

00:26:48.060 --> 00:26:51.190
Here we have an example
of a very simple demo

00:26:51.190 --> 00:26:53.610
application with two buttons.

00:26:53.610 --> 00:26:56.630
We're going to use Switch
Access, as an example,

00:26:56.630 --> 00:26:58.700
to see how the
application is interacted

00:26:58.700 --> 00:27:00.720
with with the
accessibility service.

00:27:00.720 --> 00:27:03.400
So in this case, the
layout is very simple.

00:27:03.400 --> 00:27:06.870
For button1, it's simply
a standard Android button

00:27:06.870 --> 00:27:08.310
within a linear layout.

00:27:08.310 --> 00:27:11.440
It is clickable by
default. So let's see

00:27:11.440 --> 00:27:14.000
how Switch Access interacts
with this widget when

00:27:14.000 --> 00:27:15.100
we try to click it.

00:27:15.100 --> 00:27:16.470
Let's roll the clip.

00:27:19.110 --> 00:27:22.410
So Switch Access focus is going
to move to the first button,

00:27:22.410 --> 00:27:24.960
we'll hit Select, and we
see a little snack bar

00:27:24.960 --> 00:27:27.360
at the bottom indicating that
the button's been clicked.

00:27:27.360 --> 00:27:29.450
This is the exact behavior
we're looking for.

00:27:29.450 --> 00:27:33.410
It's simple and
works as expected.

00:27:33.410 --> 00:27:35.380
Now, we'll complicate
the example a little bit

00:27:35.380 --> 00:27:36.670
for button2.

00:27:36.670 --> 00:27:39.440
In this case, we'll add an
additional linear layout

00:27:39.440 --> 00:27:42.570
and we'll mark it as
android:clickable equals true.

00:27:42.570 --> 00:27:45.720
Now, this represents that
we have two clickable things

00:27:45.720 --> 00:27:49.450
in our hierarchy, the button
and its parent linear layout.

00:27:49.450 --> 00:27:52.000
This can actually create
some confusion and difficulty

00:27:52.000 --> 00:27:55.470
when using this application
with Switch Access.

00:27:55.470 --> 00:27:56.930
Let's try it, and roll the clip.

00:27:59.690 --> 00:28:02.270
So we're going to
move focus to button2.

00:28:02.270 --> 00:28:04.220
We're going to hit
Select, and we're actually

00:28:04.220 --> 00:28:06.440
presented with a menu
where the user has

00:28:06.440 --> 00:28:09.210
to choose do they want to select
the higher level clickable

00:28:09.210 --> 00:28:11.420
item or the lower
level clickable item.

00:28:11.420 --> 00:28:13.189
And this is confusing,
because the user

00:28:13.189 --> 00:28:15.730
doesn't need to know the details
about our application's View

00:28:15.730 --> 00:28:16.910
hierarchy.

00:28:16.910 --> 00:28:20.360
So we force the user to memorize
that they need to click 1 or 2

00:28:20.360 --> 00:28:22.270
within a particular application.

00:28:22.270 --> 00:28:24.420
This is rather confusing,
but we can luckily

00:28:24.420 --> 00:28:26.650
fix this pretty easily.

00:28:26.650 --> 00:28:29.810
So the right fix here is
since this linear layout

00:28:29.810 --> 00:28:34.146
is not actually clickable, we'll
remove the clickable attribute.

00:28:34.146 --> 00:28:35.770
Alternatively, since
this layout really

00:28:35.770 --> 00:28:37.170
isn't used for anything
else, we can just

00:28:37.170 --> 00:28:38.295
remove the layout entirely.

00:28:41.390 --> 00:28:45.420
View attributes can also affect
how screen readers navigate

00:28:45.420 --> 00:28:49.150
content and present content to
users within your application.

00:28:49.150 --> 00:28:51.500
Here we have an
example of a receipt.

00:28:51.500 --> 00:28:54.350
We have information in
this UI that is associated.

00:28:54.350 --> 00:28:57.260
We have a subtotal,
tax, and a grand total

00:28:57.260 --> 00:28:59.800
that has a key
value relationship

00:28:59.800 --> 00:29:01.980
with other views on the screen.

00:29:01.980 --> 00:29:04.380
Since these values are
associated, what we'd really

00:29:04.380 --> 00:29:07.670
want is this information to
be spoken as one logical unit

00:29:07.670 --> 00:29:09.810
by the screen reader.

00:29:09.810 --> 00:29:11.850
As you can see in
this example, we just

00:29:11.850 --> 00:29:15.710
have a single relative layout
with two standard text cues.

00:29:15.710 --> 00:29:18.990
Nothing is defined as focusable.

00:29:18.990 --> 00:29:20.980
So each of these
text views is going

00:29:20.980 --> 00:29:23.420
to be focused and
spoken independently

00:29:23.420 --> 00:29:24.780
by the screen reader.

00:29:24.780 --> 00:29:28.120
And this has the potential to
create a confusing experience,

00:29:28.120 --> 00:29:30.230
because the screen
reader user may not

00:29:30.230 --> 00:29:34.050
be able to associate this
information linearly.

00:29:34.050 --> 00:29:35.820
So what do we do instead?

00:29:35.820 --> 00:29:38.560
Luckily, the fix here
is pretty simple.

00:29:38.560 --> 00:29:42.160
Anytime we have a layout that
groups associated information,

00:29:42.160 --> 00:29:45.880
we simply set android:focusable
equals to true.

00:29:45.880 --> 00:29:48.780
And we will see now
that the screen reader

00:29:48.780 --> 00:29:52.650
focuses that content and speaks
it as one logical unit, which

00:29:52.650 --> 00:29:56.210
is the behavior we want here.

00:29:56.210 --> 00:29:58.990
So we've seen a
number of examples

00:29:58.990 --> 00:30:02.630
of accessibility best practices,
what to do and what not to do,

00:30:02.630 --> 00:30:05.520
but there's a lot more
than just these four.

00:30:05.520 --> 00:30:07.880
You may find that throughout
your development process,

00:30:07.880 --> 00:30:10.550
you run into unique
accessibility challenges.

00:30:10.550 --> 00:30:12.750
So we encourage you
all to go and review

00:30:12.750 --> 00:30:16.020
the material design best
practices for accessibility.

00:30:16.020 --> 00:30:20.950
A link will be in the
spaces for this talk.

00:30:20.950 --> 00:30:23.310
So now that we know
about Android's

00:30:23.310 --> 00:30:25.930
accessibility services,
how to use them,

00:30:25.930 --> 00:30:28.890
and we know about Android's
accessibility best practices,

00:30:28.890 --> 00:30:32.450
let's talk about applying
them and integrating

00:30:32.450 --> 00:30:34.580
this testing for
these best practices

00:30:34.580 --> 00:30:36.660
into our development process.

00:30:36.660 --> 00:30:38.340
And with that, let's
talk about testing.

00:30:43.160 --> 00:30:46.340
Our recommended approach to
testing for accessibility

00:30:46.340 --> 00:30:47.860
is manual testing.

00:30:47.860 --> 00:30:52.740
As you've seen in the APPlicable
video, people, engineers,

00:30:52.740 --> 00:30:54.680
startups are
learning exactly how

00:30:54.680 --> 00:30:57.840
users with accessibility
needs are using their apps

00:30:57.840 --> 00:30:59.740
through one-on-one interaction.

00:30:59.740 --> 00:31:03.270
This is a great example of
how to do manual testing.

00:31:03.270 --> 00:31:06.830
It is the most reliable way to
find the user experience pain

00:31:06.830 --> 00:31:08.200
points within our apps.

00:31:08.200 --> 00:31:10.090
So we recommend that
you go and learn

00:31:10.090 --> 00:31:12.550
about each of Android's
accessibility services

00:31:12.550 --> 00:31:15.450
and try them out in your app.

00:31:15.450 --> 00:31:18.120
Now, there are some
challenges with this.

00:31:18.120 --> 00:31:20.680
It takes a lot of time to
actually go through an app

00:31:20.680 --> 00:31:22.940
with each of these
services and scaling

00:31:22.940 --> 00:31:25.300
this across multiple
applications

00:31:25.300 --> 00:31:27.400
can be a rather large endeavor.

00:31:27.400 --> 00:31:30.000
Understanding the
user experience

00:31:30.000 --> 00:31:32.450
takes a lot of time,
at least understanding

00:31:32.450 --> 00:31:36.410
what is expected of each of
these accessibility services.

00:31:36.410 --> 00:31:40.960
Also, just eyeballing an
application, looking at it,

00:31:40.960 --> 00:31:43.480
it's sometimes
difficult to assess

00:31:43.480 --> 00:31:46.020
some aspects of accessibility.

00:31:46.020 --> 00:31:48.670
It's difficult to sometimes
say, oh yes, the contrast

00:31:48.670 --> 00:31:51.800
is too low here or this
touch target is slightly

00:31:51.800 --> 00:31:53.970
below the guideline.

00:31:53.970 --> 00:31:56.150
So what we wanted
to do was build

00:31:56.150 --> 00:31:59.510
a set of tools that could
make these tasks easier

00:31:59.510 --> 00:32:01.320
for development teams.

00:32:01.320 --> 00:32:04.010
So we've created the Android
accessibility testing

00:32:04.010 --> 00:32:05.090
framework.

00:32:05.090 --> 00:32:07.050
And this is a Java
Android library

00:32:07.050 --> 00:32:10.360
that is intended to look
at Android UI constructs

00:32:10.360 --> 00:32:12.640
and make assessments
for accessibility.

00:32:12.640 --> 00:32:14.410
We'll make
recommendations for things

00:32:14.410 --> 00:32:17.080
you can improve in
your application's UI

00:32:17.080 --> 00:32:19.970
to make things a little
more accessible to people

00:32:19.970 --> 00:32:20.920
who need it.

00:32:20.920 --> 00:32:25.930
So this framework is integrated
with a number of other testing

00:32:25.930 --> 00:32:30.850
tools that we're
going to discuss now.

00:32:30.850 --> 00:32:32.990
The first is Espresso.

00:32:32.990 --> 00:32:35.970
It's a UI testing
framework for Android.

00:32:35.970 --> 00:32:40.300
And we've integrated with
Espresso and another framework,

00:32:40.300 --> 00:32:44.240
Robolectric, for unit
testing, in a way that

00:32:44.240 --> 00:32:48.370
allows you to use your
existing tests to leverage

00:32:48.370 --> 00:32:50.490
coverage for accessibility.

00:32:50.490 --> 00:32:52.150
So how does this work?

00:32:52.150 --> 00:32:53.320
We have one class.

00:32:53.320 --> 00:32:55.960
It's called
AccessibilityChecks, and it's

00:32:55.960 --> 00:32:58.860
used between Espresso
and Robolectric

00:32:58.860 --> 00:33:01.880
to enable accessibility
testing functionality

00:33:01.880 --> 00:33:03.550
in your current tests.

00:33:03.550 --> 00:33:08.250
So in Espresso, so I simply
call AccessibilityChecks.enable

00:33:08.250 --> 00:33:11.350
within my test
classes setup method.

00:33:11.350 --> 00:33:14.890
And in Robolectric, I simply
annotate my test class

00:33:14.890 --> 00:33:17.580
with AccessibilityChecks.

00:33:17.580 --> 00:33:23.830
Now, when I go ahead and run my
tests, we'll get some output.

00:33:23.830 --> 00:33:25.420
And here's an example of that.

00:33:25.420 --> 00:33:27.420
This is a Robolectric
test that I've

00:33:27.420 --> 00:33:29.260
written for a test application.

00:33:29.260 --> 00:33:32.510
And this test itself asserts
nothing about accessibility,

00:33:32.510 --> 00:33:36.670
it simply asserts that clicking
a button performs some action.

00:33:36.670 --> 00:33:40.750
Because I've annotated this test
class with AccessibilityChecks,

00:33:40.750 --> 00:33:45.400
we get accessibility evaluation
behavior for free any time

00:33:45.400 --> 00:33:48.460
Robolectric interacts
with one of our views.

00:33:48.460 --> 00:33:51.170
So as our test
clicks on this view,

00:33:51.170 --> 00:33:53.450
we actually run our
accessibility tests,

00:33:53.450 --> 00:33:56.610
and we found that this view is
missing a spoken description

00:33:56.610 --> 00:33:58.010
for a screen reader.

00:33:58.010 --> 00:34:01.150
So this would be a good cue for
you to go look at your content

00:34:01.150 --> 00:34:03.870
labeling, make sure you've
provided content descriptions

00:34:03.870 --> 00:34:06.340
or appropriate labels.

00:34:06.340 --> 00:34:10.550
So in this case, we actually
prevented an accessibility bug

00:34:10.550 --> 00:34:12.840
from getting checked
into our app's codebase

00:34:12.840 --> 00:34:18.320
by relying on accessibility
tests in our other test

00:34:18.320 --> 00:34:20.620
frameworks.

00:34:20.620 --> 00:34:22.650
Now, that's great for
engineers, but what

00:34:22.650 --> 00:34:24.900
about other members of
product development teams,

00:34:24.900 --> 00:34:26.100
app development teams?

00:34:26.100 --> 00:34:29.139
Well, we wanted to build a
tool that leveraged the power

00:34:29.139 --> 00:34:31.460
of Android's accessibility
test framework

00:34:31.460 --> 00:34:33.860
for other project
contributors too.

00:34:33.860 --> 00:34:37.270
So Google's recently shipped
Accessibility Scanner

00:34:37.270 --> 00:34:38.969
at the end of March.

00:34:38.969 --> 00:34:42.820
It's a tool for all members
of product development

00:34:42.820 --> 00:34:46.070
teams, technical or
non-technical alike.

00:34:46.070 --> 00:34:49.710
It allows for quick on-device
real time evaluations

00:34:49.710 --> 00:34:52.630
of accessibility and
will present suggestions

00:34:52.630 --> 00:34:54.889
for improving accessibility
within your app

00:34:54.889 --> 00:34:57.080
very quickly and easily.

00:34:57.080 --> 00:35:00.280
Let's actually take a look at
how Accessibility Scanner works

00:35:00.280 --> 00:35:00.860
in practice.

00:35:03.740 --> 00:35:06.600
Now let's switch to the demo.

00:35:06.600 --> 00:35:11.660
OK, so here I have a device with
Accessibility Scanner installed

00:35:11.660 --> 00:35:12.610
and enabled.

00:35:12.610 --> 00:35:15.190
There's a floating
action button that

00:35:15.190 --> 00:35:18.080
appears on top of every UI.

00:35:18.080 --> 00:35:21.720
And I'll open up a test
application that we created,

00:35:21.720 --> 00:35:26.320
which intentionally introduced
some accessibility issues.

00:35:26.320 --> 00:35:27.940
To run an evaluation,
I'll simply

00:35:27.940 --> 00:35:30.240
tap on the Scanner button.

00:35:30.240 --> 00:35:32.660
And in just a few
seconds, we'll see

00:35:32.660 --> 00:35:35.950
an overlay showing us
which areas of our UI

00:35:35.950 --> 00:35:37.270
may need some work.

00:35:37.270 --> 00:35:41.310
Let's take a look at a
few suggestions here.

00:35:41.310 --> 00:35:44.310
So it looks like this item
is missing a description

00:35:44.310 --> 00:35:45.450
for a screen reader.

00:35:45.450 --> 00:35:48.830
We should go back and look
at the content description

00:35:48.830 --> 00:35:50.115
we may have missed here.

00:35:52.800 --> 00:35:55.650
It looks like we have a
small touch target here.

00:35:55.650 --> 00:35:59.620
We can even get the specifics
about the current size.

00:35:59.620 --> 00:36:02.650
And it looks like we may
have some low contrast text.

00:36:02.650 --> 00:36:05.300
It looks like we only have
a contrast ratio of 1.9

00:36:05.300 --> 00:36:07.690
here, so we'll want to fix that.

00:36:07.690 --> 00:36:10.120
Accessibility Scanner
makes it easy to look

00:36:10.120 --> 00:36:12.970
at all the issues within
your application's UI,

00:36:12.970 --> 00:36:16.010
and even take those
issues and share them

00:36:16.010 --> 00:36:18.710
with my development team.

00:36:18.710 --> 00:36:20.650
Now, we can go and
get these bugs fixed.

00:36:20.650 --> 00:36:22.930
We get a simple report
with a screenshot

00:36:22.930 --> 00:36:26.300
and we can send that off.

00:36:26.300 --> 00:36:28.330
Now that we can go
and fix our issues,

00:36:28.330 --> 00:36:31.880
let's see how Accessibility
Scanner performs on a UI

00:36:31.880 --> 00:36:34.225
where we've taken its
suggestions into account.

00:36:38.470 --> 00:36:41.930
Looks like we're in good shape.

00:36:41.930 --> 00:36:44.252
That's Accessibility Scanner.

00:36:44.252 --> 00:36:47.450
[APPLAUSE]

00:36:51.170 --> 00:36:54.580
A few final words on
automated testing.

00:36:54.580 --> 00:36:57.040
Think of these automated
testing tools as a way

00:36:57.040 --> 00:37:01.530
to get first pass evaluations
of your apps for accessibility.

00:37:01.530 --> 00:37:04.310
We will not be able to find
every accessibility issue

00:37:04.310 --> 00:37:07.150
that an app may
have and we won't

00:37:07.150 --> 00:37:10.240
be able to fully understand
what a user experience is

00:37:10.240 --> 00:37:12.930
for various users with
accessibility needs.

00:37:12.930 --> 00:37:15.280
So we do really
advocate manual testing

00:37:15.280 --> 00:37:17.370
with Android's
accessibility services

00:37:17.370 --> 00:37:19.270
to get that full picture.

00:37:19.270 --> 00:37:21.440
Finally, our testing
tools are only

00:37:21.440 --> 00:37:25.500
as good as your use of
them or the coverage

00:37:25.500 --> 00:37:27.040
of your other tests.

00:37:27.040 --> 00:37:29.200
In Robolectric and
Espresso, you're

00:37:29.200 --> 00:37:31.690
only going to be able
to evaluate controls

00:37:31.690 --> 00:37:33.050
that you interact with.

00:37:33.050 --> 00:37:34.850
So you want to make sure that
your test coverage is good

00:37:34.850 --> 00:37:37.370
if you expect good coverage
from the accessibility automated

00:37:37.370 --> 00:37:39.170
tools.

00:37:39.170 --> 00:37:42.070
Similarly, Accessibility
Scanner can only

00:37:42.070 --> 00:37:44.280
evaluate the things that
it sees on the screen

00:37:44.280 --> 00:37:45.710
in that present time.

00:37:45.710 --> 00:37:48.090
You may need to do separate
evaluations for portrait

00:37:48.090 --> 00:37:50.290
versus landscape currently.

00:37:50.290 --> 00:37:52.650
So just a few caveats.

00:37:52.650 --> 00:37:55.050
These tools are here to
help you identify things

00:37:55.050 --> 00:37:58.110
quickly and prevent bugs
from being checked in,

00:37:58.110 --> 00:38:00.790
but always use manual testing
approaches to validate

00:38:00.790 --> 00:38:02.930
your user experience.

00:38:02.930 --> 00:38:07.605
And with that, I'd like to hand
it back to Maya to wrap up.

00:38:07.605 --> 00:38:10.832
[APPLAUSE]

00:38:15.090 --> 00:38:17.670
MAYA BEN-ARI: Thank you,
Casey, for the lively demo--

00:38:17.670 --> 00:38:19.380
lovely demo.

00:38:19.380 --> 00:38:22.930
So you saw today inclusive
design can create a better

00:38:22.930 --> 00:38:25.650
experience for everyone.

00:38:25.650 --> 00:38:29.204
And we recommend following
these three [INAUDIBLE].

00:38:29.204 --> 00:38:32.530
First, get familiar
with the experience

00:38:32.530 --> 00:38:35.670
for users with
accessibility needs

00:38:35.670 --> 00:38:38.380
by trying out
accessibility services.

00:38:38.380 --> 00:38:43.700
Specifically, please try out
TalkBack and Switch Access.

00:38:43.700 --> 00:38:48.310
Second, follow accessibility
best practices.

00:38:48.310 --> 00:38:52.020
In the next slide, we are going
to present a couple of links.

00:38:52.020 --> 00:38:57.730
We'll also share those
links on this talk spaces.

00:38:57.730 --> 00:39:03.340
And finally, develop and test
with accessibility in mind.

00:39:03.340 --> 00:39:08.280
And we provided today some
tools, such as Android testing

00:39:08.280 --> 00:39:11.000
frameworks with
Robolectric and Espresso,

00:39:11.000 --> 00:39:15.820
and Accessibility
Scanner, to try those out.

00:39:15.820 --> 00:39:18.230
Now, final word.

00:39:21.830 --> 00:39:24.780
The sooner you consider
accessibility users,

00:39:24.780 --> 00:39:28.440
their needs, the better
you can address those needs

00:39:28.440 --> 00:39:32.280
and design a better
experience in your app

00:39:32.280 --> 00:39:36.310
to include all type of users.

00:39:36.310 --> 00:39:38.930
So these are a few links.

00:39:38.930 --> 00:39:39.985
This is what's next.

00:39:45.550 --> 00:39:47.201
Waiting for people
to take a pictures.

00:39:50.642 --> 00:39:51.142
OK?

00:39:54.040 --> 00:39:55.110
All good?

00:39:55.110 --> 00:39:57.630
One more.

00:39:57.630 --> 00:40:00.120
One more.

00:40:00.120 --> 00:40:05.540
And I'd like to thank
Casey and thank Michal

00:40:05.540 --> 00:40:07.789
for creating this session.

00:40:07.789 --> 00:40:09.330
CASEY BURKHARDT:
Thank you very much.

00:40:09.330 --> 00:40:10.746
MAYA BEN-ARI: Thank
you, everyone.

00:40:10.746 --> 00:40:12.580
[APPLAUSE]

00:40:12.580 --> 00:40:15.930
[MUSIC PLAYING]

