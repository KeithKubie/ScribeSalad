WEBVTT
Kind: captions
Language: en

00:00:08.950 --> 00:00:13.240
&gt;&gt; Sauer: Hi. I'm Fred Sauer. I'm a developer
advocate with Google. And I have today with

00:00:13.240 --> 00:00:17.640
me three guys with a great idea, great application
that they built on top of App Engine. We'd

00:00:17.640 --> 00:00:25.130
like to talk about that today. So maybe you
guys can start with how you chose App Engine

00:00:25.130 --> 00:00:28.910
and did you evaluate any alternatives, work
us through the [INDISTINCT].

00:00:28.910 --> 00:00:32.559
&gt;&gt; Guang: So just to give you a little background,
based on what we have done is we've created

00:00:32.559 --> 00:00:37.180
the Socialwok, right, and you can check out
socialwok.com, it's basically a call service

00:00:37.180 --> 00:00:41.230
for everybody social. And, because of that,
we want to do everything in [INDISTINCT],

00:00:41.230 --> 00:00:47.460
right, and we looked at alternatives like
the EC2, Amazon's EC2 and S3, and we also

00:00:47.460 --> 00:00:52.630
possibly looked at our own server [INDISTINCT].
But at the end of the day, we settled on App

00:00:52.630 --> 00:00:56.600
Engine because we felt that it was highly
scalable, right, and enabled us at very low

00:00:56.600 --> 00:01:02.829
cost to create a web application very quickly
and host it on, in this case, App Engine Java

00:01:02.829 --> 00:01:09.240
on Google and we did not worry too much about
the scaling app, right? And because it's based

00:01:09.240 --> 00:01:14.670
on Google infrastructure and we are selling
as a small start-up enterprise, too, we could

00:01:14.670 --> 00:01:20.869
always leverage on Google's security, functionalities
and, you know, scalability, arguments, and

00:01:20.869 --> 00:01:22.719
that allow us to go to market quite nicely.

00:01:22.719 --> 00:01:24.920
&gt;&gt; Rangnekar: In short, I always, you know,
say this, is that we're software developers

00:01:24.920 --> 00:01:26.119
not system administrators, and Google App
Engine actually allow us to, you know, be

00:01:26.119 --> 00:01:29.310
just that software developers.

00:01:29.310 --> 00:01:39.090
&gt;&gt; Kumar: Another thing we do and we use is
we use the Java language for App Engine. And

00:01:39.090 --> 00:01:43.459
the great thing about that is that, you know,
while we don't really want to love App Engine,

00:01:43.459 --> 00:01:48.100
we love App Engine because it's great. We
like developing with the flexibility of being

00:01:48.100 --> 00:01:52.799
able to say, you know what, we move this far.
And that's really why we chose the App Engine

00:01:52.799 --> 00:01:56.959
Java language support. We believe that Google
is right on in saying you should be able to

00:01:56.959 --> 00:02:00.450
move stuff off of our infrastructure as part
of that new edition and some things like that.

00:02:00.450 --> 00:02:05.389
So what we're--our view is that, you know,
either probably we're going to stick with

00:02:05.389 --> 00:02:10.490
App Engine and then we'll always have one
or two customers who are going to say, let's

00:02:10.490 --> 00:02:12.090
stay off with one or more [INDISTINCT].

00:02:12.090 --> 00:02:17.670
&gt;&gt; Guang: Just a quick cap to Naveen, enterprise
portability, especially now space enterprise,

00:02:17.670 --> 00:02:23.180
people like to have portability as an option.
And I think what App Engine Java offers is

00:02:23.180 --> 00:02:28.510
very cheap. And, lastly, also for developers,
you have free callers. What's not to like

00:02:28.510 --> 00:02:33.709
about free callers that allows you to test
your app adoption? So, I highly encourage

00:02:33.709 --> 00:02:39.400
everyone, if you're doing any kind of application
and you want data portability, you want security,

00:02:39.400 --> 00:02:43.620
and you want to be as close to enterprise
tech as possible, I would say App Engine Java

00:02:43.620 --> 00:02:44.560
is the way to go.

00:02:44.560 --> 00:02:49.370
&gt;&gt; Sauer: Maybe you can share your thoughts
on a distributed datastore versus traditional

00:02:49.370 --> 00:02:55.390
relational model. How does that work for you?
And what advice do you maybe have for other

00:02:55.390 --> 00:02:57.000
developers thinking about a transition?

00:02:57.000 --> 00:03:01.280
&gt;&gt; Kumar: So, the thing is it really does
require you to change, you know, your mindset

00:03:01.280 --> 00:03:04.180
when you're, you know, going in. You know,
people, you know, most people when they use

00:03:04.180 --> 00:03:10.129
the traditional tools, they're using Joints.
You know, it's famous, you know, what's famous

00:03:10.129 --> 00:03:13.939
about the App Engine datastores is the datastore
does not support Joints, so that's almost

00:03:13.939 --> 00:03:18.730
one of the first things you have to start
changing how you program stuff. You start

00:03:18.730 --> 00:03:23.640
thinking about how do I normalize these things,
break them down into multiple queries? Also,

00:03:23.640 --> 00:03:29.530
you know, one of the things that we all, we
actually looked at is there's a certain niceness--niceties

00:03:29.530 --> 00:03:35.709
about the way App Engine index is certain
entities, one of the things that when you

00:03:35.709 --> 00:03:40.510
start developing, you realize that all queries
are based on index is that you have to define

00:03:40.510 --> 00:03:44.769
in your application. Well, one of the beauties
of these indexes is that many of these indexes

00:03:44.769 --> 00:03:49.280
can contain multiple values. So, a lot of
the times, you can basically perform queries

00:03:49.280 --> 00:03:53.989
that are very optimal that allow to do a lot
of powerful things. You just have to kind

00:03:53.989 --> 00:03:57.680
of work your way around it, realize it. And
one of the great things about App Engine is

00:03:57.680 --> 00:04:03.359
there's a lot of great documentation, videos,
demonstrations, things that basically automatically

00:04:03.359 --> 00:04:08.730
that already tell you, you know what, you
know, these things are out there, you should

00:04:08.730 --> 00:04:11.799
check them out. So that's sort of how we kind
of got around these things.

00:04:11.799 --> 00:04:16.900
&gt;&gt; Sauer: Okay. Would you describe a distributed
model as more complicated than a relational

00:04:16.900 --> 00:04:19.230
model? Or how would you compare the two?

00:04:19.230 --> 00:04:26.580
&gt;&gt; Kumar: So, it's just it's very different.
It's very different. It can be complex when

00:04:26.580 --> 00:04:31.190
you start dealing with certain things like
[INDISTINCT] and [INDISTINCT]. When you start

00:04:31.190 --> 00:04:36.030
getting into those areas, you'd think it's
very complex, but from the initial point of

00:04:36.030 --> 00:04:40.880
view it's more about changing how you basically
write stuff. So, much of the stuff, much of

00:04:40.880 --> 00:04:46.130
the code that you write normally from the
first, in the first place, is not that complex

00:04:46.130 --> 00:04:51.160
per se. It's just a little bit of a different
way around a certain problem. And so once

00:04:51.160 --> 00:04:55.630
you kind of get that, you can develop pretty
quickly. Then when you want to sort of start

00:04:55.630 --> 00:05:01.960
working on the complicated things, item [INDISTINCT],
things like consistency, transactions are

00:05:01.960 --> 00:05:06.350
a good example of things that work differently
on App Engine, the App Engine datastore than

00:05:06.350 --> 00:05:12.650
they do in normal relational database, that's
when things start to get complex and you start

00:05:12.650 --> 00:05:17.540
thinking about really, you know, developing,
you know, in a very strict way.

00:05:17.540 --> 00:05:21.710
&gt;&gt; Sauer: Okay. Are there things about the
App Engine datastore that are actually easier

00:05:21.710 --> 00:05:29.650
than on a relational database, things that
you could do now that maybe harder to get

00:05:29.650 --> 00:05:32.860
to perform correctly in a relational world?

00:05:32.860 --> 00:05:37.250
&gt;&gt; Kumar: It's hard to say that. One of the
things that I originally pointed out earlier

00:05:37.250 --> 00:05:42.390
is the multi-valued nature of the indexing.
So, one of the cool things about the App Engine

00:05:42.390 --> 00:05:46.880
datastore is its multi-valued property. So,
multi-valued properties in Java basically

00:05:46.880 --> 00:05:51.260
show up as, you know, collections, lists,
so a lot of times you refer to them as list

00:05:51.260 --> 00:05:55.680
properties, you know, if you're familiar with
the Python, where in Java it's more collection

00:05:55.680 --> 00:06:00.770
properties, things like that, of that nature.
So, those things are really, really cool because

00:06:00.770 --> 00:06:04.890
you can actually do queries on those properties
just like you do queries on single-valued

00:06:04.890 --> 00:06:07.990
properties, and that actually can do a lot
of very scalable optimal things. And it's

00:06:07.990 --> 00:06:15.270
not that hard to really, you know, code that
stuff up, it might be a little bit weird to

00:06:15.270 --> 00:06:20.280
sort of look at those queries.

00:06:20.280 --> 00:06:25.090
&gt;&gt; Rangnekar: And if you don't really want
to get into, you know, too much complexity,

00:06:25.090 --> 00:06:30.270
you can always just use JDO, which is a familiar
concept in most Java, your app would still

00:06:30.270 --> 00:06:31.330
work fine.

00:06:31.330 --> 00:06:34.220
&gt;&gt; Sauer: Okay. Can you talk maybe about some
of your other experiences with the platform

00:06:34.220 --> 00:06:36.980
to date?

00:06:36.980 --> 00:06:41.510
&gt;&gt; Kumar: So, a couple of other experiences
we've seen is weÃ­re pretty much at the

00:06:41.510 --> 00:06:45.730
cutting edge of most stuff, so, you know,
as soon as things get released, we tend to

00:06:45.730 --> 00:06:46.140
start using those features, things like the
task use which are really, really useful for

00:06:46.140 --> 00:06:56.930
us especially an app like as complex as this
and so we need to do things that run in the

00:06:56.930 --> 00:07:02.210
background that don't affect the user. A couple
of other things that we've run into, we had

00:07:02.210 --> 00:07:07.320
to actually do it on our own search engine
on App Engine. And, you know, while it seems

00:07:07.320 --> 00:07:12.150
kind of weird to say that Google is a search
company and they don't have full-time search

00:07:12.150 --> 00:07:14.610
on their datastore, we know that's complex,
and what we've done is we simply got around

00:07:14.610 --> 00:07:17.720
those problems using certain things that Google
themselves have already sort of provided.

00:07:17.720 --> 00:07:23.180
&gt;&gt; Guang: I'd like to add, I mean, from a
developing point, when you develop, you run

00:07:23.180 --> 00:07:27.090
into problems, right, so, to date our experience
of App Engine has been great. The IRC channels

00:07:27.090 --> 00:07:32.800
are a good example. You guys have impromptu
chats, the forms are not bad, you have a lot

00:07:32.800 --> 00:07:36.670
of knowledge base there, but I also want to
add that, you know, for example, for Socialwok's

00:07:36.670 --> 00:07:42.390
case, right, we actually gave a talk at Google
tech not too long ago for the secondary JUG

00:07:42.390 --> 00:07:49.150
and we were fortunate to be able to invite
Max Ross. He's an actual developer on the

00:07:49.150 --> 00:07:54.810
Google App Engine Java datastore team, right.
So that level is sort of really an interaction

00:07:54.810 --> 00:07:56.320
you can't really get anywhere else.

00:07:56.320 --> 00:07:59.880
&gt;&gt; Sauer: Okay, great. Well, thank you for
your time and thanks for talking to us today.

00:07:59.880 --> 00:08:01.010
&gt;&gt; Guang: Thank you.

00:08:01.010 --> 00:08:02.140
&gt;&gt; Naveen: Thank you.

00:08:02.140 --> 00:08:02.890
&gt;&gt; Rangnekar: Thank you.

