WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.000
 
using instant run is as simple as

00:00:02.000 --> 00:00:02.010
using instant run is as simple as
 

00:00:02.010 --> 00:00:03.770
using instant run is as simple as
pressing run or debug with the lightning

00:00:03.770 --> 00:00:03.780
pressing run or debug with the lightning
 

00:00:03.780 --> 00:00:06.050
pressing run or debug with the lightning
bolt displayed after making incremental

00:00:06.050 --> 00:00:06.060
bolt displayed after making incremental
 

00:00:06.060 --> 00:00:07.610
bolt displayed after making incremental
changes since your last build and deploy

00:00:07.610 --> 00:00:07.620
changes since your last build and deploy
 

00:00:07.620 --> 00:00:10.220
changes since your last build and deploy
on something simple and helpful most

00:00:10.220 --> 00:00:10.230
on something simple and helpful most
 

00:00:10.230 --> 00:00:12.650
on something simple and helpful most
people are satisfied with that hey Wayne

00:00:12.650 --> 00:00:12.660
people are satisfied with that hey Wayne
 

00:00:12.660 --> 00:00:16.189
people are satisfied with that hey Wayne
hey here you go what's that it's an

00:00:16.189 --> 00:00:16.199
hey here you go what's that it's an
 

00:00:16.199 --> 00:00:18.200
hey here you go what's that it's an
automatic dog feeder it makes it faster

00:00:18.200 --> 00:00:18.210
automatic dog feeder it makes it faster
 

00:00:18.210 --> 00:00:20.390
automatic dog feeder it makes it faster
and easier to feed your pets mmm nice

00:00:20.390 --> 00:00:20.400
and easier to feed your pets mmm nice
 

00:00:20.400 --> 00:00:23.210
and easier to feed your pets mmm nice
nice but we're engineers we're not

00:00:23.210 --> 00:00:23.220
nice but we're engineers we're not
 

00:00:23.220 --> 00:00:27.290
nice but we're engineers we're not
normal people uh Wayne oh yeah I think I

00:00:27.290 --> 00:00:27.300
normal people uh Wayne oh yeah I think I
 

00:00:27.300 --> 00:00:28.550
normal people uh Wayne oh yeah I think I
understand the mechanism for this and I

00:00:28.550 --> 00:00:28.560
understand the mechanism for this and I
 

00:00:28.560 --> 00:00:32.060
understand the mechanism for this and I
think I know how it works now huh so

00:00:32.060 --> 00:00:32.070
think I know how it works now huh so
 

00:00:32.070 --> 00:00:33.889
think I know how it works now huh so
let's take a look under the foot of

00:00:33.889 --> 00:00:33.899
let's take a look under the foot of
 

00:00:33.899 --> 00:00:35.209
let's take a look under the foot of
instant run and see how it actually

00:00:35.209 --> 00:00:35.219
instant run and see how it actually
 

00:00:35.219 --> 00:00:35.959
instant run and see how it actually
works

00:00:35.959 --> 00:00:35.969
works
 

00:00:35.969 --> 00:00:38.150
works
I'm ready Maya this is an Android tool

00:00:38.150 --> 00:00:38.160
I'm ready Maya this is an Android tool
 

00:00:38.160 --> 00:00:43.270
I'm ready Maya this is an Android tool
time deep dive and this is instant run

00:00:43.270 --> 00:00:43.280
 
 

00:00:43.280 --> 00:00:46.100
 
in Sarang minimizes the time taken to

00:00:46.100 --> 00:00:46.110
in Sarang minimizes the time taken to
 

00:00:46.110 --> 00:00:47.840
in Sarang minimizes the time taken to
build and deploy incremental changes to

00:00:47.840 --> 00:00:47.850
build and deploy incremental changes to
 

00:00:47.850 --> 00:00:49.729
build and deploy incremental changes to
your app when you run the debug variant

00:00:49.729 --> 00:00:49.739
your app when you run the debug variant
 

00:00:49.739 --> 00:00:52.130
your app when you run the debug variant
of your project rather than doing a full

00:00:52.130 --> 00:00:52.140
of your project rather than doing a full
 

00:00:52.140 --> 00:00:54.200
of your project rather than doing a full
build stopping the app reinstalling and

00:00:54.200 --> 00:00:54.210
build stopping the app reinstalling and
 

00:00:54.210 --> 00:00:56.119
build stopping the app reinstalling and
then relaunching it instant run tries to

00:00:56.119 --> 00:00:56.129
then relaunching it instant run tries to
 

00:00:56.129 --> 00:00:58.580
then relaunching it instant run tries to
only deploy changes avoid restarting or

00:00:58.580 --> 00:00:58.590
only deploy changes avoid restarting or
 

00:00:58.590 --> 00:01:00.680
only deploy changes avoid restarting or
reinstalling the app or even restarting

00:01:00.680 --> 00:01:00.690
reinstalling the app or even restarting
 

00:01:00.690 --> 00:01:02.869
reinstalling the app or even restarting
the activity there are three variations

00:01:02.869 --> 00:01:02.879
the activity there are three variations
 

00:01:02.879 --> 00:01:05.600
the activity there are three variations
to instant run a hot were warm or cold

00:01:05.600 --> 00:01:05.610
to instant run a hot were warm or cold
 

00:01:05.610 --> 00:01:08.270
to instant run a hot were warm or cold
swap understanding what does happen and

00:01:08.270 --> 00:01:08.280
swap understanding what does happen and
 

00:01:08.280 --> 00:01:10.160
swap understanding what does happen and
why we'll help you take full advantage

00:01:10.160 --> 00:01:10.170
why we'll help you take full advantage
 

00:01:10.170 --> 00:01:11.660
why we'll help you take full advantage
of instant run and to understand its

00:01:11.660 --> 00:01:11.670
of instant run and to understand its
 

00:01:11.670 --> 00:01:13.520
of instant run and to understand its
limitations and how your code change is

00:01:13.520 --> 00:01:13.530
limitations and how your code change is
 

00:01:13.530 --> 00:01:17.030
limitations and how your code change is
affected this is a very simplified look

00:01:17.030 --> 00:01:17.040
affected this is a very simplified look
 

00:01:17.040 --> 00:01:19.219
affected this is a very simplified look
at the Android build process your

00:01:19.219 --> 00:01:19.229
at the Android build process your
 

00:01:19.229 --> 00:01:20.960
at the Android build process your
manifest files are merged and packaged

00:01:20.960 --> 00:01:20.970
manifest files are merged and packaged
 

00:01:20.970 --> 00:01:22.520
manifest files are merged and packaged
along with your apps resources into an

00:01:22.520 --> 00:01:22.530
along with your apps resources into an
 

00:01:22.530 --> 00:01:25.249
along with your apps resources into an
apk similarly the Java files are

00:01:25.249 --> 00:01:25.259
apk similarly the Java files are
 

00:01:25.259 --> 00:01:26.899
apk similarly the Java files are
compiled into byte code and then convert

00:01:26.899 --> 00:01:26.909
compiled into byte code and then convert
 

00:01:26.909 --> 00:01:28.819
compiled into byte code and then convert
it to Dex files that are also included

00:01:28.819 --> 00:01:28.829
it to Dex files that are also included
 

00:01:28.829 --> 00:01:31.370
it to Dex files that are also included
in the apk first it adds bytecode

00:01:31.370 --> 00:01:31.380
in the apk first it adds bytecode
 

00:01:31.380 --> 00:01:33.260
in the apk first it adds bytecode
instrumentation to your class files so

00:01:33.260 --> 00:01:33.270
instrumentation to your class files so
 

00:01:33.270 --> 00:01:34.969
instrumentation to your class files so
we can replace code on the fly when we

00:01:34.969 --> 00:01:34.979
we can replace code on the fly when we
 

00:01:34.979 --> 00:01:37.190
we can replace code on the fly when we
update it later and it adds a new app

00:01:37.190 --> 00:01:37.200
update it later and it adds a new app
 

00:01:37.200 --> 00:01:38.840
update it later and it adds a new app
server class that will run within your

00:01:38.840 --> 00:01:38.850
server class that will run within your
 

00:01:38.850 --> 00:01:41.090
server class that will run within your
debug app in which the IDE will use to

00:01:41.090 --> 00:01:41.100
debug app in which the IDE will use to
 

00:01:41.100 --> 00:01:42.560
debug app in which the IDE will use to
transmit code changes that will be

00:01:42.560 --> 00:01:42.570
transmit code changes that will be
 

00:01:42.570 --> 00:01:45.319
transmit code changes that will be
applied at runtime Gradle also modifies

00:01:45.319 --> 00:01:45.329
applied at runtime Gradle also modifies
 

00:01:45.329 --> 00:01:47.330
applied at runtime Gradle also modifies
the application manifest to inject a new

00:01:47.330 --> 00:01:47.340
the application manifest to inject a new
 

00:01:47.340 --> 00:01:49.730
the application manifest to inject a new
application class this will proxy your

00:01:49.730 --> 00:01:49.740
application class this will proxy your
 

00:01:49.740 --> 00:01:51.530
application class this will proxy your
own custom application class if you're

00:01:51.530 --> 00:01:51.540
own custom application class if you're
 

00:01:51.540 --> 00:01:53.719
own custom application class if you're
using one and injects custom class

00:01:53.719 --> 00:01:53.729
using one and injects custom class
 

00:01:53.729 --> 00:01:55.069
using one and injects custom class
loaders that allow us to apply the

00:01:55.069 --> 00:01:55.079
loaders that allow us to apply the
 

00:01:55.079 --> 00:01:58.399
loaders that allow us to apply the
real-time code changes from now on when

00:01:58.399 --> 00:01:58.409
real-time code changes from now on when
 

00:01:58.409 --> 00:02:00.289
real-time code changes from now on when
you hit run Android studio checks if

00:02:00.289 --> 00:02:00.299
you hit run Android studio checks if
 

00:02:00.299 --> 00:02:01.819
you hit run Android studio checks if
there's an open socket to a server

00:02:01.819 --> 00:02:01.829
there's an open socket to a server
 

00:02:01.829 --> 00:02:04.340
there's an open socket to a server
running within your app and if so uses

00:02:04.340 --> 00:02:04.350
running within your app and if so uses
 

00:02:04.350 --> 00:02:05.870
running within your app and if so uses
that socket to confirm that there is an

00:02:05.870 --> 00:02:05.880
that socket to confirm that there is an
 

00:02:05.880 --> 00:02:07.670
that socket to confirm that there is an
instant run enabled version of your app

00:02:07.670 --> 00:02:07.680
instant run enabled version of your app
 

00:02:07.680 --> 00:02:09.680
instant run enabled version of your app
running in the foreground of that target

00:02:09.680 --> 00:02:09.690
running in the foreground of that target
 

00:02:09.690 --> 00:02:12.020
running in the foreground of that target
device you will then check the apps

00:02:12.020 --> 00:02:12.030
device you will then check the apps
 

00:02:12.030 --> 00:02:13.760
device you will then check the apps
build ID to make sure it's the version

00:02:13.760 --> 00:02:13.770
build ID to make sure it's the version
 

00:02:13.770 --> 00:02:16.850
build ID to make sure it's the version
expects before sending any changes while

00:02:16.850 --> 00:02:16.860
expects before sending any changes while
 

00:02:16.860 --> 00:02:18.170
expects before sending any changes while
you're developing Android studio

00:02:18.170 --> 00:02:18.180
you're developing Android studio
 

00:02:18.180 --> 00:02:20.180
you're developing Android studio
monitors which files have changed and

00:02:20.180 --> 00:02:20.190
monitors which files have changed and
 

00:02:20.190 --> 00:02:22.280
monitors which files have changed and
based on that runs a custom Gradle task

00:02:22.280 --> 00:02:22.290
based on that runs a custom Gradle task
 

00:02:22.290 --> 00:02:24.710
based on that runs a custom Gradle task
that creates a Dex file for only the

00:02:24.710 --> 00:02:24.720
that creates a Dex file for only the
 

00:02:24.720 --> 00:02:28.040
that creates a Dex file for only the
changed classes that new Dex file is

00:02:28.040 --> 00:02:28.050
changed classes that new Dex file is
 

00:02:28.050 --> 00:02:29.510
changed classes that new Dex file is
picked up by Android studio which

00:02:29.510 --> 00:02:29.520
picked up by Android studio which
 

00:02:29.520 --> 00:02:31.250
picked up by Android studio which
deploys it to the app server we inject

00:02:31.250 --> 00:02:31.260
deploys it to the app server we inject
 

00:02:31.260 --> 00:02:33.440
deploys it to the app server we inject
it into the running app the app server

00:02:33.440 --> 00:02:33.450
it into the running app the app server
 

00:02:33.450 --> 00:02:35.450
it into the running app the app server
uses the custom class loaders to load

00:02:35.450 --> 00:02:35.460
uses the custom class loaders to load
 

00:02:35.460 --> 00:02:38.390
uses the custom class loaders to load
and apply the updated classes but of

00:02:38.390 --> 00:02:38.400
and apply the updated classes but of
 

00:02:38.400 --> 00:02:40.430
and apply the updated classes but of
course the old versions of those classes

00:02:40.430 --> 00:02:40.440
course the old versions of those classes
 

00:02:40.440 --> 00:02:42.290
course the old versions of those classes
already exist in the running instance of

00:02:42.290 --> 00:02:42.300
already exist in the running instance of
 

00:02:42.300 --> 00:02:44.720
already exist in the running instance of
your app so Gradle has transformed the

00:02:44.720 --> 00:02:44.730
your app so Gradle has transformed the
 

00:02:44.730 --> 00:02:46.550
your app so Gradle has transformed the
updated versions to override the

00:02:46.550 --> 00:02:46.560
updated versions to override the
 

00:02:46.560 --> 00:02:49.550
updated versions to override the
pre-existing classes the app server then

00:02:49.550 --> 00:02:49.560
pre-existing classes the app server then
 

00:02:49.560 --> 00:02:51.050
pre-existing classes the app server then
uses the instrumentation that we

00:02:51.050 --> 00:02:51.060
uses the instrumentation that we
 

00:02:51.060 --> 00:02:52.850
uses the instrumentation that we
injected into our original classes to

00:02:52.850 --> 00:02:52.860
injected into our original classes to
 

00:02:52.860 --> 00:02:54.740
injected into our original classes to
delegate each method call to the new

00:02:54.740 --> 00:02:54.750
delegate each method call to the new
 

00:02:54.750 --> 00:02:56.800
delegate each method call to the new
override classes that we've just loaded

00:02:56.800 --> 00:02:56.810
override classes that we've just loaded
 

00:02:56.810 --> 00:02:59.390
override classes that we've just loaded
from now on each time the affected

00:02:59.390 --> 00:02:59.400
from now on each time the affected
 

00:02:59.400 --> 00:03:01.370
from now on each time the affected
method gets called anywhere within our

00:03:01.370 --> 00:03:01.380
method gets called anywhere within our
 

00:03:01.380 --> 00:03:03.320
method gets called anywhere within our
app the new modified version of the

00:03:03.320 --> 00:03:03.330
app the new modified version of the
 

00:03:03.330 --> 00:03:05.420
app the new modified version of the
method will get called instead if you

00:03:05.420 --> 00:03:05.430
method will get called instead if you
 

00:03:05.430 --> 00:03:07.280
method will get called instead if you
set breakpoints or look at your stack

00:03:07.280 --> 00:03:07.290
set breakpoints or look at your stack
 

00:03:07.290 --> 00:03:09.110
set breakpoints or look at your stack
trace you'll actually see the override

00:03:09.110 --> 00:03:09.120
trace you'll actually see the override
 

00:03:09.120 --> 00:03:11.990
trace you'll actually see the override
named classes methods called within your

00:03:11.990 --> 00:03:12.000
named classes methods called within your
 

00:03:12.000 --> 00:03:14.870
named classes methods called within your
stack okay so that takes care of our hot

00:03:14.870 --> 00:03:14.880
stack okay so that takes care of our hot
 

00:03:14.880 --> 00:03:17.360
stack okay so that takes care of our hot
swap so when do we need to warm swap and

00:03:17.360 --> 00:03:17.370
swap so when do we need to warm swap and
 

00:03:17.370 --> 00:03:20.900
swap so when do we need to warm swap and
what is a warm swap a warm swap restarts

00:03:20.900 --> 00:03:20.910
what is a warm swap a warm swap restarts
 

00:03:20.910 --> 00:03:23.360
what is a warm swap a warm swap restarts
the activity we do things like changing

00:03:23.360 --> 00:03:23.370
the activity we do things like changing
 

00:03:23.370 --> 00:03:25.040
the activity we do things like changing
resources the restart is needed to

00:03:25.040 --> 00:03:25.050
resources the restart is needed to
 

00:03:25.050 --> 00:03:27.740
resources the restart is needed to
reload the affected resources right now

00:03:27.740 --> 00:03:27.750
reload the affected resources right now
 

00:03:27.750 --> 00:03:30.020
reload the affected resources right now
that means changing any resource results

00:03:30.020 --> 00:03:30.030
that means changing any resource results
 

00:03:30.030 --> 00:03:31.670
that means changing any resource results
in all of them being repackaged and

00:03:31.670 --> 00:03:31.680
in all of them being repackaged and
 

00:03:31.680 --> 00:03:33.680
in all of them being repackaged and
resent but we're working on an

00:03:33.680 --> 00:03:33.690
resent but we're working on an
 

00:03:33.690 --> 00:03:35.330
resent but we're working on an
incremental packager that will only

00:03:35.330 --> 00:03:35.340
incremental packager that will only
 

00:03:35.340 --> 00:03:37.420
incremental packager that will only
package and deploy changed resources

00:03:37.420 --> 00:03:37.430
package and deploy changed resources
 

00:03:37.430 --> 00:03:40.730
package and deploy changed resources
that said warm swap won't work for

00:03:40.730 --> 00:03:40.740
that said warm swap won't work for
 

00:03:40.740 --> 00:03:42.470
that said warm swap won't work for
changes to resources that are referenced

00:03:42.470 --> 00:03:42.480
changes to resources that are referenced
 

00:03:42.480 --> 00:03:44.330
changes to resources that are referenced
within the manifest or changes to the

00:03:44.330 --> 00:03:44.340
within the manifest or changes to the
 

00:03:44.340 --> 00:03:46.520
within the manifest or changes to the
manifests itself that's because the

00:03:46.520 --> 00:03:46.530
manifests itself that's because the
 

00:03:46.530 --> 00:03:47.930
manifests itself that's because the
values read from the manifest are

00:03:47.930 --> 00:03:47.940
values read from the manifest are
 

00:03:47.940 --> 00:03:50.570
values read from the manifest are
determined when the apk is installed so

00:03:50.570 --> 00:03:50.580
determined when the apk is installed so
 

00:03:50.580 --> 00:03:52.190
determined when the apk is installed so
you need a reinstallation before those

00:03:52.190 --> 00:03:52.200
you need a reinstallation before those
 

00:03:52.200 --> 00:03:55.370
you need a reinstallation before those
changes can be seen so changing the

00:03:55.370 --> 00:03:55.380
changes can be seen so changing the
 

00:03:55.380 --> 00:03:56.990
changes can be seen so changing the
string resource used to define the app

00:03:56.990 --> 00:03:57.000
string resource used to define the app
 

00:03:57.000 --> 00:03:58.850
string resource used to define the app
name or drawable representing the app

00:03:58.850 --> 00:03:58.860
name or drawable representing the app
 

00:03:58.860 --> 00:04:01.270
name or drawable representing the app
icon aren't supported within instant run

00:04:01.270 --> 00:04:01.280
icon aren't supported within instant run
 

00:04:01.280 --> 00:04:03.770
icon aren't supported within instant run
so far we've looked at warm swaps to

00:04:03.770 --> 00:04:03.780
so far we've looked at warm swaps to
 

00:04:03.780 --> 00:04:05.540
so far we've looked at warm swaps to
update resources and before that hot

00:04:05.540 --> 00:04:05.550
update resources and before that hot
 

00:04:05.550 --> 00:04:07.400
update resources and before that hot
swaps that override methods within your

00:04:07.400 --> 00:04:07.410
swaps that override methods within your
 

00:04:07.410 --> 00:04:09.470
swaps that override methods within your
running app but what about structural

00:04:09.470 --> 00:04:09.480
running app but what about structural
 

00:04:09.480 --> 00:04:11.300
running app but what about structural
changes that can't be applied simply by

00:04:11.300 --> 00:04:11.310
changes that can't be applied simply by
 

00:04:11.310 --> 00:04:14.180
changes that can't be applied simply by
calling a method again like adding

00:04:14.180 --> 00:04:14.190
calling a method again like adding
 

00:04:14.190 --> 00:04:16.340
calling a method again like adding
removing or changing annotations fields

00:04:16.340 --> 00:04:16.350
removing or changing annotations fields
 

00:04:16.350 --> 00:04:18.320
removing or changing annotations fields
static or instant method signatures or

00:04:18.320 --> 00:04:18.330
static or instant method signatures or
 

00:04:18.330 --> 00:04:20.000
static or instant method signatures or
changing parent classes or static

00:04:20.000 --> 00:04:20.010
changing parent classes or static
 

00:04:20.010 --> 00:04:22.580
changing parent classes or static
initializers these cases require an

00:04:22.580 --> 00:04:22.590
initializers these cases require an
 

00:04:22.590 --> 00:04:24.920
initializers these cases require an
application restart using where possible

00:04:24.920 --> 00:04:24.930
application restart using where possible
 

00:04:24.930 --> 00:04:27.560
application restart using where possible
a called swap call swaps apply code

00:04:27.560 --> 00:04:27.570
a called swap call swaps apply code
 

00:04:27.570 --> 00:04:29.450
a called swap call swaps apply code
Changez by sending nude x-files that are

00:04:29.450 --> 00:04:29.460
Changez by sending nude x-files that are
 

00:04:29.460 --> 00:04:31.130
Changez by sending nude x-files that are
small slices containing only the

00:04:31.130 --> 00:04:31.140
small slices containing only the
 

00:04:31.140 --> 00:04:32.870
small slices containing only the
affected classes to the type device

00:04:32.870 --> 00:04:32.880
affected classes to the type device
 

00:04:32.880 --> 00:04:35.510
affected classes to the type device
before restarting the app as a result

00:04:35.510 --> 00:04:35.520
before restarting the app as a result
 

00:04:35.520 --> 00:04:37.070
before restarting the app as a result
called swaps dependent on uploading

00:04:37.070 --> 00:04:37.080
called swaps dependent on uploading
 

00:04:37.080 --> 00:04:39.110
called swaps dependent on uploading
multiple decks files so that requires

00:04:39.110 --> 00:04:39.120
multiple decks files so that requires
 

00:04:39.120 --> 00:04:41.510
multiple decks files so that requires
art which is only guaranteed available

00:04:41.510 --> 00:04:41.520
art which is only guaranteed available
 

00:04:41.520 --> 00:04:44.000
art which is only guaranteed available
on devices running Android 5.0 or epi

00:04:44.000 --> 00:04:44.010
on devices running Android 5.0 or epi
 

00:04:44.010 --> 00:04:48.260
on devices running Android 5.0 or epi
level 21 or higher the type device is

00:04:48.260 --> 00:04:48.270
level 21 or higher the type device is
 

00:04:48.270 --> 00:04:50.060
level 21 or higher the type device is
running API level 20 or lower and

00:04:50.060 --> 00:04:50.070
running API level 20 or lower and
 

00:04:50.070 --> 00:04:51.680
running API level 20 or lower and
possibly using the dalvik runtime

00:04:51.680 --> 00:04:51.690
possibly using the dalvik runtime
 

00:04:51.690 --> 00:04:54.820
possibly using the dalvik runtime
Android studio deploys a full apk

00:04:54.820 --> 00:04:54.830
Android studio deploys a full apk
 

00:04:54.830 --> 00:04:57.230
Android studio deploys a full apk
instant run tries to be clever but it

00:04:57.230 --> 00:04:57.240
instant run tries to be clever but it
 

00:04:57.240 --> 00:04:59.300
instant run tries to be clever but it
can't turn back time if you make code

00:04:59.300 --> 00:04:59.310
can't turn back time if you make code
 

00:04:59.310 --> 00:05:00.920
can't turn back time if you make code
changes that effect initializes that

00:05:00.920 --> 00:05:00.930
changes that effect initializes that
 

00:05:00.930 --> 00:05:02.480
changes that effect initializes that
will run when the application was first

00:05:02.480 --> 00:05:02.490
will run when the application was first
 

00:05:02.490 --> 00:05:04.700
will run when the application was first
started you'll need to restart your app

00:05:04.700 --> 00:05:04.710
started you'll need to restart your app
 

00:05:04.710 --> 00:05:06.950
started you'll need to restart your app
for the changes to take effect to

00:05:06.950 --> 00:05:06.960
for the changes to take effect to
 

00:05:06.960 --> 00:05:08.930
for the changes to take effect to
perform an incremental build and restart

00:05:08.930 --> 00:05:08.940
perform an incremental build and restart
 

00:05:08.940 --> 00:05:11.930
perform an incremental build and restart
the app click rerun if you want to stop

00:05:11.930 --> 00:05:11.940
the app click rerun if you want to stop
 

00:05:11.940 --> 00:05:13.790
the app click rerun if you want to stop
everything and redeploy a clean build

00:05:13.790 --> 00:05:13.800
everything and redeploy a clean build
 

00:05:13.800 --> 00:05:16.040
everything and redeploy a clean build
select run and then clean and rerun app

00:05:16.040 --> 00:05:16.050
select run and then clean and rerun app
 

00:05:16.050 --> 00:05:18.440
select run and then clean and rerun app
to stop the running app perform a clean

00:05:18.440 --> 00:05:18.450
to stop the running app perform a clean
 

00:05:18.450 --> 00:05:20.660
to stop the running app perform a clean
build and deploying your apk to the

00:05:20.660 --> 00:05:20.670
build and deploying your apk to the
 

00:05:20.670 --> 00:05:24.290
build and deploying your apk to the
target device so is knowing how it works

00:05:24.290 --> 00:05:24.300
target device so is knowing how it works
 

00:05:24.300 --> 00:05:26.150
target device so is knowing how it works
enough for an engineer let's check in

00:05:26.150 --> 00:05:26.160
enough for an engineer let's check in
 

00:05:26.160 --> 00:05:27.920
enough for an engineer let's check in
with Wayne I've replaced the mechanism

00:05:27.920 --> 00:05:27.930
with Wayne I've replaced the mechanism
 

00:05:27.930 --> 00:05:29.300
with Wayne I've replaced the mechanism
with a brillo board I think I can make

00:05:29.300 --> 00:05:29.310
with a brillo board I think I can make
 

00:05:29.310 --> 00:05:34.100
with a brillo board I think I can make
this thing internet-enabled that's what

00:05:34.100 --> 00:05:34.110
this thing internet-enabled that's what
 

00:05:34.110 --> 00:05:34.580
this thing internet-enabled that's what
I thought

00:05:34.580 --> 00:05:34.590
I thought
 

00:05:34.590 --> 00:05:36.800
I thought
in that spirit let's look at ways you

00:05:36.800 --> 00:05:36.810
in that spirit let's look at ways you
 

00:05:36.810 --> 00:05:38.360
in that spirit let's look at ways you
can tweak your use of instant run to get

00:05:38.360 --> 00:05:38.370
can tweak your use of instant run to get
 

00:05:38.370 --> 00:05:40.700
can tweak your use of instant run to get
the absolute most out of it instant run

00:05:40.700 --> 00:05:40.710
the absolute most out of it instant run
 

00:05:40.710 --> 00:05:42.380
the absolute most out of it instant run
is controlled by Android studio so you

00:05:42.380 --> 00:05:42.390
is controlled by Android studio so you
 

00:05:42.390 --> 00:05:44.360
is controlled by Android studio so you
need to start and restart your debug

00:05:44.360 --> 00:05:44.370
need to start and restart your debug
 

00:05:44.370 --> 00:05:46.760
need to start and restart your debug
instance from the IDE don't start and

00:05:46.760 --> 00:05:46.770
instance from the IDE don't start and
 

00:05:46.770 --> 00:05:48.080
instance from the IDE don't start and
restart your app from the device or

00:05:48.080 --> 00:05:48.090
restart your app from the device or
 

00:05:48.090 --> 00:05:49.730
restart your app from the device or
emulator or things will get out of whack

00:05:49.730 --> 00:05:49.740
emulator or things will get out of whack
 

00:05:49.740 --> 00:05:52.220
emulator or things will get out of whack
really quickly let's start by improving

00:05:52.220 --> 00:05:52.230
really quickly let's start by improving
 

00:05:52.230 --> 00:05:53.810
really quickly let's start by improving
those full build times by tweaking the

00:05:53.810 --> 00:05:53.820
those full build times by tweaking the
 

00:05:53.820 --> 00:05:56.870
those full build times by tweaking the
resources allocated to Dex you can edit

00:05:56.870 --> 00:05:56.880
resources allocated to Dex you can edit
 

00:05:56.880 --> 00:05:58.550
resources allocated to Dex you can edit
your projects Gradle dot properties file

00:05:58.550 --> 00:05:58.560
your projects Gradle dot properties file
 

00:05:58.560 --> 00:06:00.560
your projects Gradle dot properties file
to increase the maximum heap size of the

00:06:00.560 --> 00:06:00.570
to increase the maximum heap size of the
 

00:06:00.570 --> 00:06:02.720
to increase the maximum heap size of the
Gradle daemon to enable Dex in process

00:06:02.720 --> 00:06:02.730
Gradle daemon to enable Dex in process
 

00:06:02.730 --> 00:06:05.510
Gradle daemon to enable Dex in process
the default here is one gig so set it to

00:06:05.510 --> 00:06:05.520
the default here is one gig so set it to
 

00:06:05.520 --> 00:06:07.520
the default here is one gig so set it to
at least two and Dex in process will be

00:06:07.520 --> 00:06:07.530
at least two and Dex in process will be
 

00:06:07.530 --> 00:06:09.200
at least two and Dex in process will be
enabled allowing multiple decks

00:06:09.200 --> 00:06:09.210
enabled allowing multiple decks
 

00:06:09.210 --> 00:06:11.120
enabled allowing multiple decks
processors to run within a single VM

00:06:11.120 --> 00:06:11.130
processors to run within a single VM
 

00:06:11.130 --> 00:06:13.040
processors to run within a single VM
that's also shared with Gradle and

00:06:13.040 --> 00:06:13.050
that's also shared with Gradle and
 

00:06:13.050 --> 00:06:15.290
that's also shared with Gradle and
significantly increases build speeds if

00:06:15.290 --> 00:06:15.300
significantly increases build speeds if
 

00:06:15.300 --> 00:06:17.780
significantly increases build speeds if
you've increased the Java max heap size

00:06:17.780 --> 00:06:17.790
you've increased the Java max heap size
 

00:06:17.790 --> 00:06:19.640
you've increased the Java max heap size
in your module level build or Gradle

00:06:19.640 --> 00:06:19.650
in your module level build or Gradle
 

00:06:19.650 --> 00:06:21.650
in your module level build or Gradle
file from the default of one gig you'll

00:06:21.650 --> 00:06:21.660
file from the default of one gig you'll
 

00:06:21.660 --> 00:06:23.150
file from the default of one gig you'll
need to increase the Gradle daemon to

00:06:23.150 --> 00:06:23.160
need to increase the Gradle daemon to
 

00:06:23.160 --> 00:06:25.820
need to increase the Gradle daemon to
the M size accordingly thanks to support

00:06:25.820 --> 00:06:25.830
the M size accordingly thanks to support
 

00:06:25.830 --> 00:06:28.160
the M size accordingly thanks to support
in art for multiple decks loading you'll

00:06:28.160 --> 00:06:28.170
in art for multiple decks loading you'll
 

00:06:28.170 --> 00:06:29.750
in art for multiple decks loading you'll
get the best performance of instant run

00:06:29.750 --> 00:06:29.760
get the best performance of instant run
 

00:06:29.760 --> 00:06:32.330
get the best performance of instant run
by setting your min SDK version to 21 or

00:06:32.330 --> 00:06:32.340
by setting your min SDK version to 21 or
 

00:06:32.340 --> 00:06:34.430
by setting your min SDK version to 21 or
higher if your app supports earlier

00:06:34.430 --> 00:06:34.440
higher if your app supports earlier
 

00:06:34.440 --> 00:06:35.840
higher if your app supports earlier
platform versions it may be worth

00:06:35.840 --> 00:06:35.850
platform versions it may be worth
 

00:06:35.850 --> 00:06:37.760
platform versions it may be worth
creating a new product flavor that sets

00:06:37.760 --> 00:06:37.770
creating a new product flavor that sets
 

00:06:37.770 --> 00:06:39.860
creating a new product flavor that sets
your min SDK to 21 for your debugging

00:06:39.860 --> 00:06:39.870
your min SDK to 21 for your debugging
 

00:06:39.870 --> 00:06:40.879
your min SDK to 21 for your debugging
cycles

00:06:40.879 --> 00:06:40.889
cycles
 

00:06:40.889 --> 00:06:42.200
cycles
you can take full advantage of the

00:06:42.200 --> 00:06:42.210
you can take full advantage of the
 

00:06:42.210 --> 00:06:44.270
you can take full advantage of the
enhanced instant run support also

00:06:44.270 --> 00:06:44.280
enhanced instant run support also
 

00:06:44.280 --> 00:06:45.980
enhanced instant run support also
remember that any changes to the

00:06:45.980 --> 00:06:45.990
remember that any changes to the
 

00:06:45.990 --> 00:06:48.200
remember that any changes to the
manifest will necessitate a full build

00:06:48.200 --> 00:06:48.210
manifest will necessitate a full build
 

00:06:48.210 --> 00:06:50.629
manifest will necessitate a full build
and deploy cycle so if your build

00:06:50.629 --> 00:06:50.639
and deploy cycle so if your build
 

00:06:50.639 --> 00:06:52.610
and deploy cycle so if your build
process automatically updates any part

00:06:52.610 --> 00:06:52.620
process automatically updates any part
 

00:06:52.620 --> 00:06:54.200
process automatically updates any part
of the app manifest for example

00:06:54.200 --> 00:06:54.210
of the app manifest for example
 

00:06:54.210 --> 00:06:56.089
of the app manifest for example
automatically iterating version code or

00:06:56.089 --> 00:06:56.099
automatically iterating version code or
 

00:06:56.099 --> 00:06:58.219
automatically iterating version code or
version name consider disabling those

00:06:58.219 --> 00:06:58.229
version name consider disabling those
 

00:06:58.229 --> 00:07:00.050
version name consider disabling those
automatic updates in your debug build

00:07:00.050 --> 00:07:00.060
automatic updates in your debug build
 

00:07:00.060 --> 00:07:02.629
automatic updates in your debug build
variants instant run currently only

00:07:02.629 --> 00:07:02.639
variants instant run currently only
 

00:07:02.639 --> 00:07:04.760
variants instant run currently only
instruments the main process so if your

00:07:04.760 --> 00:07:04.770
instruments the main process so if your
 

00:07:04.770 --> 00:07:07.129
instruments the main process so if your
app uses multiple processes hot and warm

00:07:07.129 --> 00:07:07.139
app uses multiple processes hot and warm
 

00:07:07.139 --> 00:07:09.379
app uses multiple processes hot and warm
swaps on those other processes will

00:07:09.379 --> 00:07:09.389
swaps on those other processes will
 

00:07:09.389 --> 00:07:11.629
swaps on those other processes will
degrade to cold swaps or full builds if

00:07:11.629 --> 00:07:11.639
degrade to cold swaps or full builds if
 

00:07:11.639 --> 00:07:13.339
degrade to cold swaps or full builds if
you're targeting an API level less than

00:07:13.339 --> 00:07:13.349
you're targeting an API level less than
 

00:07:13.349 --> 00:07:15.920
you're targeting an API level less than
21 remember that hot swapping doesn't

00:07:15.920 --> 00:07:15.930
21 remember that hot swapping doesn't
 

00:07:15.930 --> 00:07:17.719
21 remember that hot swapping doesn't
reinitialize objects rerun class

00:07:17.719 --> 00:07:17.729
reinitialize objects rerun class
 

00:07:17.729 --> 00:07:19.670
reinitialize objects rerun class
initializes or modify data that's

00:07:19.670 --> 00:07:19.680
initializes or modify data that's
 

00:07:19.680 --> 00:07:21.170
initializes or modify data that's
already been saved or transferred

00:07:21.170 --> 00:07:21.180
already been saved or transferred
 

00:07:21.180 --> 00:07:23.390
already been saved or transferred
anything that has already run and won't

00:07:23.390 --> 00:07:23.400
anything that has already run and won't
 

00:07:23.400 --> 00:07:25.909
anything that has already run and won't
be rerun without the app restarting it's

00:07:25.909 --> 00:07:25.919
be rerun without the app restarting it's
 

00:07:25.919 --> 00:07:27.740
be rerun without the app restarting it's
not always possible for Android studio

00:07:27.740 --> 00:07:27.750
not always possible for Android studio
 

00:07:27.750 --> 00:07:29.809
not always possible for Android studio
to know when that happens so remember to

00:07:29.809 --> 00:07:29.819
to know when that happens so remember to
 

00:07:29.819 --> 00:07:31.610
to know when that happens so remember to
restart your activity or restart the app

00:07:31.610 --> 00:07:31.620
restart your activity or restart the app
 

00:07:31.620 --> 00:07:33.589
restart your activity or restart the app
when you know your changes will require

00:07:33.589 --> 00:07:33.599
when you know your changes will require
 

00:07:33.599 --> 00:07:36.110
when you know your changes will require
it if you're on Windows you may find

00:07:36.110 --> 00:07:36.120
it if you're on Windows you may find
 

00:07:36.120 --> 00:07:37.459
it if you're on Windows you may find
that Windows Defender real-time

00:07:37.459 --> 00:07:37.469
that Windows Defender real-time
 

00:07:37.469 --> 00:07:39.140
that Windows Defender real-time
protection is causing instant run

00:07:39.140 --> 00:07:39.150
protection is causing instant run
 

00:07:39.150 --> 00:07:40.879
protection is causing instant run
slowdowns you can get around that by

00:07:40.879 --> 00:07:40.889
slowdowns you can get around that by
 

00:07:40.889 --> 00:07:42.589
slowdowns you can get around that by
adding your project folder to the list

00:07:42.589 --> 00:07:42.599
adding your project folder to the list
 

00:07:42.599 --> 00:07:45.409
adding your project folder to the list
of Windows Defender exclusions as of

00:07:45.409 --> 00:07:45.419
of Windows Defender exclusions as of
 

00:07:45.419 --> 00:07:47.179
of Windows Defender exclusions as of
this recording instant run doesn't

00:07:47.179 --> 00:07:47.189
this recording instant run doesn't
 

00:07:47.189 --> 00:07:49.579
this recording instant run doesn't
support Jack instrumentation tests or

00:07:49.579 --> 00:07:49.589
support Jack instrumentation tests or
 

00:07:49.589 --> 00:07:51.140
support Jack instrumentation tests or
deploying to multiple devices

00:07:51.140 --> 00:07:51.150
deploying to multiple devices
 

00:07:51.150 --> 00:07:54.050
deploying to multiple devices
simultaneously but interneuron is

00:07:54.050 --> 00:07:54.060
simultaneously but interneuron is
 

00:07:54.060 --> 00:07:55.550
simultaneously but interneuron is
constantly evolving with the team

00:07:55.550 --> 00:07:55.560
constantly evolving with the team
 

00:07:55.560 --> 00:07:57.409
constantly evolving with the team
exploring new techniques to maximize the

00:07:57.409 --> 00:07:57.419
exploring new techniques to maximize the
 

00:07:57.419 --> 00:07:58.939
exploring new techniques to maximize the
number of cases that allow for a hot

00:07:58.939 --> 00:07:58.949
number of cases that allow for a hot
 

00:07:58.949 --> 00:08:00.709
number of cases that allow for a hot
swap and minimizing the need for called

00:08:00.709 --> 00:08:00.719
swap and minimizing the need for called
 

00:08:00.719 --> 00:08:03.170
swap and minimizing the need for called
swaps or full deploy and install cycles

00:08:03.170 --> 00:08:03.180
swaps or full deploy and install cycles
 

00:08:03.180 --> 00:08:05.480
swaps or full deploy and install cycles
and you can always find the latest tips

00:08:05.480 --> 00:08:05.490
and you can always find the latest tips
 

00:08:05.490 --> 00:08:07.249
and you can always find the latest tips
and tricks on optimizing instant run on

00:08:07.249 --> 00:08:07.259
and tricks on optimizing instant run on
 

00:08:07.259 --> 00:08:10.159
and tricks on optimizing instant run on
the Android studio documentation you can

00:08:10.159 --> 00:08:10.169
the Android studio documentation you can
 

00:08:10.169 --> 00:08:11.510
the Android studio documentation you can
also explore the cutting edge by

00:08:11.510 --> 00:08:11.520
also explore the cutting edge by
 

00:08:11.520 --> 00:08:13.129
also explore the cutting edge by
subscribing to the canary or beta

00:08:13.129 --> 00:08:13.139
subscribing to the canary or beta
 

00:08:13.139 --> 00:08:15.139
subscribing to the canary or beta
release channels if you're having

00:08:15.139 --> 00:08:15.149
release channels if you're having
 

00:08:15.149 --> 00:08:17.149
release channels if you're having
trouble with instant run or any Android

00:08:17.149 --> 00:08:17.159
trouble with instant run or any Android
 

00:08:17.159 --> 00:08:18.829
trouble with instant run or any Android
studio features let us know on Twitter

00:08:18.829 --> 00:08:18.839
studio features let us know on Twitter
 

00:08:18.839 --> 00:08:21.320
studio features let us know on Twitter
or Google+ I'm reto Meier and this has

00:08:21.320 --> 00:08:21.330
or Google+ I'm reto Meier and this has
 

00:08:21.330 --> 00:08:23.240
or Google+ I'm reto Meier and this has
been an Android tool time instant run

00:08:23.240 --> 00:08:23.250
been an Android tool time instant run
 

00:08:23.250 --> 00:08:30.740
been an Android tool time instant run
deep dive

00:08:30.740 --> 00:08:30.750
 
 

00:08:30.750 --> 00:08:33.750
 
yeah

