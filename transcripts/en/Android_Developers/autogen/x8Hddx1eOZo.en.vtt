WEBVTT
Kind: captions
Language: en

00:00:02.200 --> 00:00:04.848
 One of the dominant design principles that Android adheres to 

00:00:04.849 --> 00:00:06.999
 Is that it is a multi-tasking operating system. 

00:00:07.000 --> 00:00:10.943
 Users can run multiple applications and can quickly switch between them as needed. 

00:00:10.943 --> 00:00:12.082
 My name is Colt McCannless 

00:00:12.083 --> 00:00:14.469
 In order to ensure that your app is working well, 

00:00:14.493 --> 00:00:16.775
 No matter what other applications do in your device, 

00:00:16.802 --> 00:00:19.440
 It requires little preparatory work and little useful API. 

00:00:19.610 --> 00:00:22.618
 In essence, it is the main cause of the most common tragedies. 

00:00:22.832 --> 00:00:28.359
 In particular, applications work to their own advantage without taking into account the larger environment. 

00:00:28.622 --> 00:00:30.955
 For these applications, this is not necessarily a big problem. 

00:00:30.955 --> 00:00:35.319
 But remember that each running application takes a small portion of limited device resources. 

00:00:35.550 --> 00:00:39.645
 When the total resources start to take effect, the user experience will suffer. 

00:00:39.920 --> 00:00:43.799
 Each running application contains a resource pool that resides in the device memory. 

00:00:44.052 --> 00:00:47.442
 For example its status and the state of the graphics resources. For the most part, 

00:00:47.471 --> 00:00:50.538
 All of the allocated heap objects are in memory 

00:00:50.610 --> 00:00:52.986
 Even when the application is in the background. 

00:00:53.370 --> 00:00:56.597
 Over time, as expected, the memory available in the device will be executed 

00:00:56.598 --> 00:00:58.439
 Because it is consumed by other applications, 

00:00:58.462 --> 00:01:03.788
 You will need to terminate existing applications to free memory for the active application. 

00:01:03.955 --> 00:01:06.900
 Remember that the full reason is that we leave the application in the background in memory 

00:01:06.901 --> 00:01:09.868
 Is to switch between the application in the background and the application located in the foreground 

00:01:09.940 --> 00:01:11.374
 Very fast operation. 

00:01:11.660 --> 00:01:14.064
 But this does not apply to applications in the background that have been terminated. 

00:01:14.089 --> 00:01:17.856
 If your application is terminated and the user returns to it, we have to start from scratch, 

00:01:17.856 --> 00:01:19.038
 This means restarting the application 

00:01:19.038 --> 00:01:21.257
 As if it was not loaded into memory in the first place, 

00:01:21.291 --> 00:01:25.790
 And certainly a much slower process of switching to it than the background. 

00:01:25.913 --> 00:01:28.688
 But the good news is that it is not necessary to end your application. 

00:01:28.690 --> 00:01:30.324
 Instead, when memory becomes limited, 

00:01:30.365 --> 00:01:33.787
 The application can offer some of its allocated space to the system again 

00:01:33.915 --> 00:01:36.370
 In order to avoid the pain of ending. 

00:01:36.370 --> 00:01:41.450
 To facilitate the ritual of this sacrifice of memory transfer, Android offers a set of reverse calls 

00:01:41.450 --> 00:01:44.227
 Which will be released to your app and which you need to respond to. 

00:01:44.252 --> 00:01:48.060
 But first, let's talk about things that happen when things go wrong. 

00:01:48.355 --> 00:01:50.926
 Once all the applications in the background are terminated, 

00:01:50.927 --> 00:01:52.010
 In order to save memory, 

00:01:52.032 --> 00:01:55.606
 The active application on the reverse call will receive low memory, 

00:01:55.647 --> 00:01:57.485
 Indicating that things have become terrible 

00:01:57.485 --> 00:02:01.070
 Which requires the immediate release of any resources in memory 

00:02:01.070 --> 00:02:02.585
 To help stabilize the system. 

00:02:02.723 --> 00:02:05.230
 If you have things in memory do not have a need right now, 

00:02:05.230 --> 00:02:07.244
 This is the time to liberate it. 

00:02:07.394 --> 00:02:11.969
 Unfortunately, this reverse call occurs only after all applications have been terminated in the background. 

00:02:12.150 --> 00:02:13.160
 It would be really nice 

00:02:13.161 --> 00:02:15.520
 That instead of just ending those applications in the background, 

00:02:15.521 --> 00:02:18.737
 They must be allowed to re-edit the mass of part of the memory to the system, 

00:02:18.809 --> 00:02:22.208
 Which would help keep things going but also prevent applications from being terminated. 

00:02:22.510 --> 00:02:26.275
 This is the exact cause of the onTrimMemory reverse call 

00:02:26.276 --> 00:02:28.357
 Filed with IceCreamSandwich version. 

00:02:28.456 --> 00:02:31.067
 This reverse call was issued to all applications running 

00:02:31.067 --> 00:02:34.309
 And gave them the ability to free up memory instead of being exposed to termination. 

00:02:35.080 --> 00:02:38.070
 This is provided by having the correct value given to the inverse call. 

00:02:38.071 --> 00:02:42.670
 The level of decline given to you is between 0 and 100. 

00:02:42.670 --> 00:02:46.501
 But there are also a few known values ​​so you can choose to check on them. 

00:02:46.780 --> 00:02:49.580
 For example, the TRIM_MEMORY_MODERATE value 

00:02:49.580 --> 00:02:51.944
 Means the device is starting low memory. 

00:02:51.944 --> 00:02:53.360
 This is the time for your application 

00:02:53.360 --> 00:02:56.200
 To start expelling objects, such as your temporary memory for a bitmap thumbnail, 

00:02:56.201 --> 00:02:58.518
 While the TRIM_MEMORY_BACKGROUND option 

00:02:58.556 --> 00:03:01.420
 It means that some applications have started to hang in the background 

00:03:01.420 --> 00:03:05.384
 Where an application was recently moved to become an application in the background. 

00:03:05.602 --> 00:03:07.711
 This is the time to start editing memory 

00:03:07.728 --> 00:03:10.889
 This will not be critical if the user returns to your app quickly. 

00:03:11.130 --> 00:03:13.320
 If you compare these values, 

00:03:13.320 --> 00:03:16.418
 You may want to make sure you use a larger comparison of equality, 

00:03:16.419 --> 00:03:19.194
 Only if we add new specific values ​​in the future. 

00:03:19.194 --> 00:03:23.150
 The best part is that in order to help you free up memory from every corner of your application, 

00:03:23.150 --> 00:03:27.510
 This call can be bypassed on the activity, retail and service, 

00:03:27.510 --> 00:03:30.258
 Content provider and application categories. 

00:03:30.470 --> 00:03:32.627
 But in order to produce the best user experience, 

00:03:32.628 --> 00:03:35.208
 Your app should not be just a reaction to writing memory cases 

00:03:35.246 --> 00:03:37.419
 But also proactively, depending on the machine. 

00:03:37.610 --> 00:03:42.262
 The activity manager is dot isLowRamDevice added in KitKat 

00:03:42.349 --> 00:03:44.747
 It can be used to help detect if your application is running 

00:03:44.775 --> 00:03:46.049
 On the device with low memory. 

00:03:46.400 --> 00:03:52.201
 Currently, the true return value usually indicates 512 MB or less. 

00:03:52.410 --> 00:03:54.450
 This condition should be used by applications 

00:03:54.451 --> 00:03:57.245
 To help identify features that may be enabled or disabled 

00:03:57.269 --> 00:04:01.587
 Depending on whether it will be a good user experience for low-memory devices. 

00:04:01.787 --> 00:04:05.788
 Of course, a gentle disposition with the rest of the system is just the tip of the iceberg, 

00:04:05.812 --> 00:04:09.420
 That's why you need to check out the rest of Android's performance patterns 

00:04:09.420 --> 00:04:12.032
 Do not forget to join our community on Google+ 

00:04:12.040 --> 00:04:14.752
 To get other cool tips from other developers. 

00:04:15.010 --> 00:04:18.528
 So stay calm, type your code, and always remember, performance is important. 

