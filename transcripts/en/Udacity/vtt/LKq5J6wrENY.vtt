WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:05.930
Let's look at the solution to our history predictor quiz. In c a loop exits

00:00:05.930 --> 00:00:12.040
at the beginning. So the first loop will do something like initialize i to zero.

00:00:12.040 --> 00:00:17.140
If i is equal to 8. Jump to done otherwise do everything that is need for

00:00:17.140 --> 00:00:22.300
intraitation of the outer loop. And then, branch back here.

00:00:22.300 --> 00:00:26.840
The inner loop, we'll just do j equals zero. And

00:00:26.840 --> 00:00:33.311
then if j is equal to eight, go to sum label D1. Do something,

00:00:33.311 --> 00:00:37.804
jump back here. And the label D1 would really be here,

00:00:37.804 --> 00:00:42.360
after which we're going like this. So how many entries do we need?

00:00:42.360 --> 00:00:46.939
We need at least one entry per branch. Although in fact we need on entry for

00:00:46.939 --> 00:00:50.440
each instruction but at least we need to have entries for branches. So

00:00:50.440 --> 00:00:54.780
we have a branch that does this here. We have a branch that does this here.

00:00:54.780 --> 00:00:58.140
We have a loop back branch here and we have a loop back branch here so

00:00:58.140 --> 00:01:03.400
we are talking about at least four entries. In reality we need many many more.

00:01:03.400 --> 00:01:06.460
In order to do well on all four of these branches,

00:01:06.460 --> 00:01:10.800
we need to see what is the longest history that any one of them will have.

00:01:10.800 --> 00:01:15.250
The loop branch is always taken so, really, we don't need the history for it.

00:01:15.250 --> 00:01:18.310
Even a single 2-bit counter will do well on these two.

00:01:18.310 --> 00:01:23.900
But this one will be testing eight times, for zero through seven.

00:01:23.900 --> 00:01:28.796
And stay in the loop and then the ninth time it tests it jumps out. So

00:01:28.796 --> 00:01:35.973
really it has a pattern of length nine which means we need an 8 bit history.

00:01:35.973 --> 00:01:41.866
With an 8-bit history, we need two to the eighth two bit counters. So

00:01:41.866 --> 00:01:48.820
that leads to 256 2-bit counters. Now, what is the pattern of this branch here.

00:01:48.820 --> 00:01:55.070
It really is eight times it's not taken, followed by a taken, and that repeats.

00:01:55.070 --> 00:01:59.640
The inner branch does exactly the same thing, except it does it many more times.

00:01:59.640 --> 00:02:06.220
So, if you look at how many possible patterns we actually have, of length eight.

00:02:06.220 --> 00:02:11.915
We have a pattern of eight no takens. We have seven no takens

00:02:11.915 --> 00:02:17.550
followed by a taken. We have a pattern of six no taken, then taken no taken,

00:02:17.550 --> 00:02:22.210
ect. So we're really using only nine of these two big counters, which again,

00:02:22.210 --> 00:02:27.760
shows that. A predictor of this type with a very long history,

00:02:27.760 --> 00:02:31.180
will waste a lot of it's many, many entries.

