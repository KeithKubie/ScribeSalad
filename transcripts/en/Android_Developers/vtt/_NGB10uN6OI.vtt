WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.240
[MUSIC PLAYING]

00:00:08.240 --> 00:00:12.060
Hello, my name is Fred Chung,
developer advocate at Google.

00:00:12.060 --> 00:00:15.090
This is the first of a two-part
DevByte series covering

00:00:15.090 --> 00:00:18.150
the Android media router
framework in the support

00:00:18.150 --> 00:00:20.230
library.

00:00:20.230 --> 00:00:22.600
It has become increasingly
common for users

00:00:22.600 --> 00:00:25.550
to stream movies or play
music from their tablets

00:00:25.550 --> 00:00:27.110
or smart phones.

00:00:27.110 --> 00:00:29.100
In the living
room, for instance,

00:00:29.100 --> 00:00:31.390
you may want to make use
of those external speakers

00:00:31.390 --> 00:00:35.980
or Wi-Fi displays to enjoy
your personal library of media

00:00:35.980 --> 00:00:36.990
content.

00:00:36.990 --> 00:00:41.950
Android offers a flexible media
router framework for any apps

00:00:41.950 --> 00:00:45.020
to cast media content to
support its external devices

00:00:45.020 --> 00:00:47.060
for playback.

00:00:47.060 --> 00:00:49.680
In this episode, we are
going to talk about the media

00:00:49.680 --> 00:00:52.510
router, which is a
mediation layer for apps

00:00:52.510 --> 00:00:55.550
to cast media content
to supported devices.

00:00:55.550 --> 00:00:59.430
The paths to these devices
are known as media routes.

00:00:59.430 --> 00:01:01.480
At a high level,
the media router

00:01:01.480 --> 00:01:04.879
offers APIs to render
the cast buttons,

00:01:04.879 --> 00:01:07.080
discover and select media
routes, [? preread ?]

00:01:07.080 --> 00:01:10.130
the capabilities of
the routes, and control

00:01:10.130 --> 00:01:14.860
remote playback via an
intent-based protocol.

00:01:14.860 --> 00:01:16.390
In the next episode,
we are going

00:01:16.390 --> 00:01:18.890
to explore media
route providers, which

00:01:18.890 --> 00:01:21.690
is a component that
encapsulates the underlying

00:01:21.690 --> 00:01:25.410
communication between Android
and external media devices.

00:01:25.410 --> 00:01:28.630
Device manufacturers can
implement their own MRPs

00:01:28.630 --> 00:01:32.150
in order to publish themselves
as media routes on Android.

00:01:32.150 --> 00:01:34.750
For example, Chromecast
has implemented

00:01:34.750 --> 00:01:38.180
an MRP in the Google
Cast SDK through which

00:01:38.180 --> 00:01:40.030
apps can integrate with.

00:01:40.030 --> 00:01:42.820
With this architecture,
apps are essentially

00:01:42.820 --> 00:01:46.510
decoupled from underlying
transport implementations

00:01:46.510 --> 00:01:48.545
of the media routes.

00:01:48.545 --> 00:01:50.670
We're going to look at some
implementation details.

00:01:50.670 --> 00:01:52.580
But before doing that,
I wanted to call out

00:01:52.580 --> 00:01:55.400
that the media router
framework we are focusing here

00:01:55.400 --> 00:01:59.150
is in the support library,
which means that it is backward

00:01:59.150 --> 00:02:02.260
compatible with
Android 2.1 and above.

00:02:02.260 --> 00:02:05.100
And let's not mix it up with
the media router in the Android

00:02:05.100 --> 00:02:07.380
framework.

00:02:07.380 --> 00:02:10.220
To initiate media
routing, the user

00:02:10.220 --> 00:02:12.940
would click on the Cast
button, which typically

00:02:12.940 --> 00:02:16.010
is placed on the action bar.

00:02:16.010 --> 00:02:17.500
Through the button,
the user would

00:02:17.500 --> 00:02:21.240
be able to select a media route,
disconnect from the route,

00:02:21.240 --> 00:02:25.532
control playback on a
connected route, and so on.

00:02:25.532 --> 00:02:29.250
One way to add the Cast
button in the action bar

00:02:29.250 --> 00:02:32.470
is to add an action provider
manual item pointing

00:02:32.470 --> 00:02:36.100
to the class media
route action provider.

00:02:36.100 --> 00:02:38.850
Then, in the menu
initialization code,

00:02:38.850 --> 00:02:41.000
associate menu item
action provider

00:02:41.000 --> 00:02:44.300
with a media route
selector object.

00:02:44.300 --> 00:02:46.490
Route selector is
basically a filter

00:02:46.490 --> 00:02:48.540
for media route capabilities.

00:02:48.540 --> 00:02:51.990
An app can specify categories
of media routes and points

00:02:51.990 --> 00:02:53.720
it can work with.

00:02:53.720 --> 00:02:56.160
The framework uses the
selector to present

00:02:56.160 --> 00:02:58.970
only the appropriate
media routes to the user.

00:02:58.970 --> 00:03:03.050
For example, if an app asks
for video streaming capability,

00:03:03.050 --> 00:03:05.940
the system won't present
audio-only media routes

00:03:05.940 --> 00:03:07.130
to the user.

00:03:07.130 --> 00:03:09.080
There are several
predefined categories,

00:03:09.080 --> 00:03:13.130
including remote playback, audio
streaming, and video streaming.

00:03:13.130 --> 00:03:18.670
Of course, custom ones can
also be defined by the MRPs.

00:03:18.670 --> 00:03:21.060
Let's have a look at the
initialization of the media

00:03:21.060 --> 00:03:24.580
router object, which maintains
the overall state of media

00:03:24.580 --> 00:03:25.760
routing.

00:03:25.760 --> 00:03:28.440
Once you've gotten a reference
to the singleton media router

00:03:28.440 --> 00:03:32.530
object, you want to register
the media router callback, which

00:03:32.530 --> 00:03:34.910
provides events on
media route changes,

00:03:34.910 --> 00:03:38.310
such as route selections,
modifications,

00:03:38.310 --> 00:03:39.720
and volume changes.

00:03:39.720 --> 00:03:42.930
Have a look at the API
reference for details.

00:03:42.930 --> 00:03:46.490
In this code snippet, the
particular callback flag

00:03:46.490 --> 00:03:49.710
causes the system to
immediately discover

00:03:49.710 --> 00:03:51.360
available media routes.

00:03:51.360 --> 00:03:54.490
Keep in mind that route
discovery may involve network

00:03:54.490 --> 00:03:56.470
calls, and therefore
you should be

00:03:56.470 --> 00:03:59.765
diligent in removing a callback
when the route discovery is

00:03:59.765 --> 00:04:01.000
no longer needed in your app.

00:04:03.620 --> 00:04:06.160
I also want to point out that
if you're using fragments,

00:04:06.160 --> 00:04:09.180
another option is to use
Media Route Discovery

00:04:09.180 --> 00:04:12.500
Fragments, which gives you
the same hooks for callback

00:04:12.500 --> 00:04:14.730
registration.

00:04:14.730 --> 00:04:17.630
Once a media route is
selected by the user,

00:04:17.630 --> 00:04:20.870
the app can begin issuing
remote playback controls

00:04:20.870 --> 00:04:22.140
to the endpoint.

00:04:22.140 --> 00:04:24.140
The indications
are asynchronous,

00:04:24.140 --> 00:04:28.620
which makes sense considering
media endpoints may be remote.

00:04:28.620 --> 00:04:30.480
The media router
framework defines

00:04:30.480 --> 00:04:33.710
an intent-based protocol
for basic playback controls,

00:04:33.710 --> 00:04:36.420
such as Play, Pause, or Seek.

00:04:36.420 --> 00:04:40.130
You can find your definitions of
the action and extra parameters

00:04:40.130 --> 00:04:44.390
in the media control
intent class.

00:04:44.390 --> 00:04:46.870
This snippet illustrates
the indication

00:04:46.870 --> 00:04:51.370
of basic remote playback where
first, it constructs an intent

00:04:51.370 --> 00:04:53.390
with proper action
in category values

00:04:53.390 --> 00:04:56.720
as well as the
[? URI ?] of the media.

00:04:56.720 --> 00:05:00.170
It then checks if the
selected route is capable

00:05:00.170 --> 00:05:01.550
handling such request.

00:05:01.550 --> 00:05:04.930
It finally fires off the intent.

00:05:04.930 --> 00:05:07.040
The framework will
report the results

00:05:07.040 --> 00:05:10.270
of the invocation via the
asynchronous callback.

00:05:10.270 --> 00:05:11.990
While not included
in this snippet,

00:05:11.990 --> 00:05:14.780
of it is good practice to
account for situations where

00:05:14.780 --> 00:05:17.540
remote playback is not
possible, in which case

00:05:17.540 --> 00:05:21.970
your app should fall back
to the local playback.

00:05:21.970 --> 00:05:24.010
That's it for an
overview of media router

00:05:24.010 --> 00:05:26.490
from an app casting prospective.

00:05:26.490 --> 00:05:28.330
Have a look at the
docs and samples,

00:05:28.330 --> 00:05:31.570
and stay tuned for the episode
on media route providers.

00:05:31.570 --> 00:05:34.520
Thanks for watching
and happy casting.

