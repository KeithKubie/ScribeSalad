WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.540
One of our loyal viewers sent in a question the other day.

00:00:02.540 --> 00:00:05.480
He was asking why, when he creates an empty text document

00:00:05.490 --> 00:00:08.420
on his computer, does it have a file size of zero bytes.

00:00:09.080 --> 00:00:11.280
Well, there's no text in it, so that sort of makes sense,

00:00:11.280 --> 00:00:14.000
but he realized - well, actually, there's some information

00:00:14.000 --> 00:00:16.520
associated with it, this thing - it's got a file name,

00:00:16.540 --> 00:00:20.900
there's how big a size it is, there's a time it was created, and so on.

00:00:20.910 --> 00:00:23.100
Where's all that information stored?

00:00:23.100 --> 00:00:28.260
Why does it have zero bytes, and yet we know there's some information stored alongside it?

00:00:31.100 --> 00:00:34.400
So we can demonstrate what this actually means if we use the computer.

00:00:34.400 --> 00:00:36.840
So let's just create a simple text document.

00:00:37.400 --> 00:00:40.980
This document's got nothing in it, so let's save this out to disk...

00:00:40.980 --> 00:00:44.980
...and we'll call it "Empty.txt".

00:00:44.980 --> 00:00:47.100
So we've created an empty text file,

00:00:47.120 --> 00:00:52.840
and if we look on our system, we can see that we have created a file called "Empty.txt"

00:00:53.380 --> 00:00:56.240
with zero bytes in it. It's an empty file, there's nothing in there,

00:00:56.240 --> 00:00:58.960
and if we have a look at all the data that's in there...

00:00:58.960 --> 00:01:01.700
We try and cat the file - there's nothing in there.

00:01:01.700 --> 00:01:03.300
That's an empty document.

00:01:03.300 --> 00:01:06.820
Just to prove that a real text document would have

00:01:06.820 --> 00:01:11.260
some information in it, let's create one that says "Hello, Computerphile!"

00:01:11.540 --> 00:01:16.180
and save that out, we'll call this as "NotEmpty.txt".

00:01:16.180 --> 00:01:21.300
And if we look at that one now, we see we've got two files - "Empty", which has got 0 bytes associated with it,

00:01:21.800 --> 00:01:26.460
and "NotEmpty", which has 21 bytes associated with it.

00:01:26.460 --> 00:01:29.280
If we just look at what's inside "NotEmpty",

00:01:29.280 --> 00:01:34.020
we see that those 21 bytes form the ASCII codes for "Hello, Computerphile!"

00:01:34.020 --> 00:01:37.060
So we have these two files - one's "Empty", which has nothing in it,

00:01:37.360 --> 00:01:42.680
and one of them has 21 characters in it and the line feed at the end for "Hello, Computerphile!"

00:01:43.180 --> 00:01:45.900
But neither of them actually have the filename stored in them,

00:01:45.900 --> 00:01:48.800
they don't have the date there, they don't have how big the file is.

00:01:48.800 --> 00:01:52.280
So where is all that stored? What's going on there?

00:01:52.800 --> 00:01:57.120
Well, actually, we need to think about these bits of information as being two things.

00:01:57.360 --> 00:01:59.920
We have one bit of information, which is the document.

00:02:00.220 --> 00:02:03.980
In this case, it's either empty or it's got some ASCII characters in it.

00:02:04.480 --> 00:02:07.520
But the other information isn't really part of the document.

00:02:07.800 --> 00:02:10.480
It's describing that document.

00:02:10.480 --> 00:02:13.920
So it's information which tells us what we want to call the document,

00:02:13.940 --> 00:02:15.840
how big it is, when we edited it, and so on.

00:02:15.840 --> 00:02:17.280
It isn't actually about the document.

00:02:17.500 --> 00:02:19.640
And the easiest way to think about that is to think about it -

00:02:19.860 --> 00:02:22.760
if you rename a document, you don't change a document.

00:02:22.760 --> 00:02:30.120
So if I rename the file "NotEmpty.txt" to be "StillNotEmpty.txt"...

00:02:30.120 --> 00:02:32.760
We've changed the filename, but the file is still the same,

00:02:32.780 --> 00:02:34.420
even though we've given it a longer filename.

00:02:34.420 --> 00:02:39.420
So if we hexdump this one, the bytes match between the two different ones.

00:02:39.420 --> 00:02:43.140
The thing we have to think about first is that we have our document,

00:02:43.400 --> 00:02:46.860
and if we draw that out, so we have computer icon for the document,

00:02:46.960 --> 00:02:51.500
and we also have alongside that the information about what we called that.

00:02:51.500 --> 00:02:53.840
In this case, "Empty.txt".

00:02:53.840 --> 00:03:00.060
So this document is called "Empty.txt", and it has a size, which is zero bytes,

00:03:00.060 --> 00:03:01.940
and it'll have a date we created it.

00:03:02.220 --> 00:03:06.040
And as we change things about this, as we move it around, this information will change.

00:03:06.060 --> 00:03:10.640
So we might change the filename, so we call it "StillEmpty.txt",

00:03:10.820 --> 00:03:14.860
we get rid of the old filename, but we haven't actually changed the document. That stayed the same.

00:03:14.860 --> 00:03:17.200
Cause just as we think about these things as being separate,

00:03:17.200 --> 00:03:20.440
we have the name which describes the document, but isn't part of the document,

00:03:20.580 --> 00:03:23.880
the file system in the computer does exactly the same.

00:03:24.580 --> 00:03:29.100
So if you remember back to the videos we did on how data is stored on a disk,

00:03:29.100 --> 00:03:31.800
we divide the disk up into a set of tracks,

00:03:31.800 --> 00:03:35.000
and we break those tracks up into single sectors.

00:03:35.000 --> 00:03:39.740
So as well as storing the documents on the tracks and sectors on the system,

00:03:39.740 --> 00:03:43.180
even if it's an SSD, it's still emulating a lot of the time,

00:03:43.240 --> 00:03:45.540
this old system the hard disks tend to use.

00:03:45.540 --> 00:03:51.000
As well as storing the data, we also store a directory, or catalog,

00:03:51.180 --> 00:03:53.900
that represents where that information is stored.

00:03:54.080 --> 00:03:56.700
I'm going to use the FAT file system as an example here,

00:03:56.700 --> 00:03:59.300
because it's relatively straightforward to understand.

00:03:59.720 --> 00:04:05.060
Systems like NTFS, ext2, etc. - ZFS - will all use different variations,

00:04:05.060 --> 00:04:09.900
but they have similar concepts that use more efficient ways of representing the catalog.

00:04:09.920 --> 00:04:15.380
So in a flat file system, the directory is really just a special type of file.

00:04:15.460 --> 00:04:17.740
So there's a special directory called the "root" directory,

00:04:17.740 --> 00:04:20.180
which is the one that the system knows about where to find.

00:04:20.580 --> 00:04:25.180
But inside that you'll find entries that point to other directories, and also point to files.

00:04:25.780 --> 00:04:31.140
And each of those entries in the original FAT system is made up of 32 bytes of data.

00:04:31.140 --> 00:04:33.780
And these are stored consecutively after each other, so if we had another one,

00:04:33.780 --> 00:04:36.940
it would immediately follow these 32 bytes.

00:04:36.940 --> 00:04:42.000
So the first 8 bytes, for example, are used to store the first part of the filename.

00:04:42.000 --> 00:04:45.040
So if we had a file named - let's call it "Empty",

00:04:45.420 --> 00:04:49.940
which is what we used, we have E-M-P-T-Y, so that's five characters,

00:04:49.940 --> 00:04:52.580
and we store the other three being spaces.

00:04:52.580 --> 00:04:58.640
The next three bytes store the extension, so T-X-T.

00:04:58.640 --> 00:05:01.460
We don't store the dot, so we have the name padded up with spaces,

00:05:01.460 --> 00:05:03.320
then we have that extension there.

00:05:03.320 --> 00:05:05.580
We then have various other flags and so on,

00:05:05.580 --> 00:05:08.800
some of which tell it whether it's a directory or a special file, and so on.

00:05:08.800 --> 00:05:12.980
And then towards the end, we have the size, and there's four bytes

00:05:12.980 --> 00:05:18.600
which are specified for that, which means you can't have a file bigger than four gigabytes on the FAT file system.

00:05:18.620 --> 00:05:22.360
And there's also two bytes which say where the file starts.

00:05:22.380 --> 00:05:26.440
So in the start, at the beginning of a disk, we have this information which describes the file.

00:05:26.500 --> 00:05:29.520
Most importantly, it tells us where on the disk to find it,

00:05:29.520 --> 00:05:32.060
where it starts, and how big it is.

00:05:32.340 --> 00:05:33.700
Now, we need to know how big it is,

00:05:33.700 --> 00:05:37.600
because we can only allocate a whole number of sectors,

00:05:37.600 --> 00:05:43.800
or technically we use clusters, which is multiple sectors joined together, to store this file.

00:05:44.040 --> 00:05:46.700
So we know where the first one is, and that there's another section of the system

00:05:46.700 --> 00:05:52.260
which tells you which of the ones are formed together to form a linked list of the files that we'll use,

00:05:52.260 --> 00:05:54.300
we'll go into that in another video in some more detail.

00:05:54.300 --> 00:05:59.080
So we have the size, so we know exactly where to stop in the last cluster that we're using.

00:05:59.740 --> 00:06:01.580
So in this case, this will be zero,

00:06:01.580 --> 00:06:05.000
because the file is empty, and we have the name of it stored here.

00:06:05.420 --> 00:06:09.560
Interestingly, if the file is zero, you can say that the start cluster is also zero,

00:06:09.560 --> 00:06:12.660
so you don't actually have to take up a whole cluster storing nothing.

00:06:12.660 --> 00:06:14.500
So in terms of actual disk space,

00:06:14.820 --> 00:06:18.500
this empty file will still take up no disk space at all,

00:06:18.520 --> 00:06:22.460
because all the information it needs is part of the directory.

00:06:23.020 --> 00:06:25.300
Now there's one caveat to that. As we've said,

00:06:25.520 --> 00:06:28.460
each of these files take up 32 bytes,

00:06:28.500 --> 00:06:34.980
and eventually you'll fill up the cluster that is being used to store that directory.

00:06:35.500 --> 00:06:38.780
When you do that, the next file will need to start using another cluster,

00:06:38.780 --> 00:06:42.000
and so that will take up a whole kilobyte of disk,

00:06:42.000 --> 00:06:47.360
or 512 bytes of disk, or whatever it is, depending on how the file system is set up.

00:06:47.360 --> 00:06:50.140
So at some point, you will create a file that will use some disk space.

00:06:50.140 --> 00:06:52.640
So that margin is dependent on how many other files you've got,

00:06:52.640 --> 00:06:55.180
as to whether your next file takes any space up or not?

00:06:55.340 --> 00:06:56.060
Yes.

00:06:56.100 --> 00:06:59.640
So it depends on it, exactly. So as we add more files into a directory,

00:06:59.640 --> 00:07:02.500
more empty files, they won't take up any space,

00:07:02.500 --> 00:07:08.620
and then suddenly you'll add an empty file and it will take up a whole kilobyte of space on disk.

00:07:08.620 --> 00:07:11.680
And then you'll keep adding more, and they won't take up any extra space,

00:07:11.680 --> 00:07:13.780
then you'll add another one and it'll take up a whole kilobyte.

00:07:13.780 --> 00:07:20.620
So you could, theoretically, fill up your whole hard disk with empty files and have no space on that.

00:07:21.100 --> 00:07:25.920
If you want to try it, do so, but don't blame me if you suddenly find your computer doesn't work properly.

00:07:26.460 --> 00:07:29.040
You'll have to find some way of deleting the empty files,

00:07:29.040 --> 00:07:30.820
but your computer probably wouldn't boot properly.

00:07:30.820 --> 00:07:33.060
And no one uses FAT these days anyway.

00:07:37.180 --> 00:07:41.220
He created the empty .txt file and it didn't have anything in it.

00:07:41.220 --> 00:07:42.820
and it took up zero bytes.

00:07:42.820 --> 00:07:45.140
Now we discussed why they actually take up some space,

00:07:45.140 --> 00:07:50.280
but he also created a rich text file, an RTF document.

