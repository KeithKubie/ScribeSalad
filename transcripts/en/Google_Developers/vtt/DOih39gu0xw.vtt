WEBVTT
Kind: captions
Language: en

00:00:03.910 --> 00:00:06.210
COREY GOLDFEDER: Hi, welcome to
Apps, Add-ins and more with

00:00:06.210 --> 00:00:06.670
Apps Script.

00:00:06.670 --> 00:00:08.330
If you can say that
three times fast

00:00:08.330 --> 00:00:09.680
I'll give you a cookie.

00:00:09.680 --> 00:00:10.300
I'm Corey.

00:00:10.300 --> 00:00:11.210
I'll be presenting this.

00:00:11.210 --> 00:00:12.840
I'm an engineer in Google
Apps Script.

00:00:12.840 --> 00:00:15.260
I'll be presenting along with
Drew who's also an Apps Script

00:00:15.260 --> 00:00:19.430
engineer and James Ferreira
who's one of our users.

00:00:19.430 --> 00:00:21.340
Before we begin, here are
some important links.

00:00:21.340 --> 00:00:25.050
If you like to tweet about the
conference, or even Buzz,

00:00:25.050 --> 00:00:28.375
io2011 for the conference,
googleapps for the track.

00:00:28.375 --> 00:00:30.480
And if you'd like to give us
feedback, there's a short link

00:00:30.480 --> 00:00:33.130
up there, please go
ahead and use it.

00:00:33.130 --> 00:00:34.860
OK, so let's begin.

00:00:34.860 --> 00:00:37.720
Can I get a show of hands, has
anyone in the audience used

00:00:37.720 --> 00:00:39.990
Google Apps Script?

00:00:39.990 --> 00:00:41.310
Not bad, not bad.

00:00:41.310 --> 00:00:42.970
Those of you at home on YouTube,
you can also raise

00:00:42.970 --> 00:00:44.210
your hands if you like.

00:00:44.210 --> 00:00:46.150
We won't be watching, but it
makes you feel part of the IO

00:00:46.150 --> 00:00:47.370
experience.

00:00:47.370 --> 00:00:50.770
So let's define some terms.
An add-in, an

00:00:50.770 --> 00:00:52.170
app, and app script.

00:00:52.170 --> 00:00:55.030
Well, an add-in is an extension
to Google Apps that

00:00:55.030 --> 00:00:57.120
provides integrated
glue-logic.

00:00:57.120 --> 00:00:59.290
Think of it as a plug-in adding
functionality to an

00:00:59.290 --> 00:01:00.980
existing Google App.

00:01:00.980 --> 00:01:03.940
An app on the other hand, is a
full scale application with

00:01:03.940 --> 00:01:07.260
its own user interface at its
own URL that interacts with

00:01:07.260 --> 00:01:08.902
the rest of the Google
Apps suite.

00:01:08.902 --> 00:01:12.840
An apps script is Google's
cloud scripting language,

00:01:12.840 --> 00:01:15.890
which lets you build both
add-ins and apps that live

00:01:15.890 --> 00:01:17.850
entirely in the cloud
and participate in

00:01:17.850 --> 00:01:19.100
the Google Apps suite.

00:01:21.210 --> 00:01:22.980
This is Bob.

00:01:22.980 --> 00:01:25.570
Those of you who came to our
IO session last year may

00:01:25.570 --> 00:01:28.220
remember Bob as the guy who
automated everything at Acme

00:01:28.220 --> 00:01:31.990
Corp. Well, Bob no longer works
for Acme Corp. Don't

00:01:31.990 --> 00:01:32.945
worry, he wasn't fired.

00:01:32.945 --> 00:01:36.200
In fact, he did so well
that he retired.

00:01:36.200 --> 00:01:38.940
Then the housing bubble came and
all of Bob's friends were

00:01:38.940 --> 00:01:40.000
losing their homes.

00:01:40.000 --> 00:01:43.370
So Bob sprang into action as
a second career helping his

00:01:43.370 --> 00:01:45.730
friends refinance
their mortgages.

00:01:45.730 --> 00:01:48.250
Sure, why not?

00:01:48.250 --> 00:01:50.860
The problem is that this is
pretty labor intensive and Bob

00:01:50.860 --> 00:01:53.370
is a guy who doesn't like
to do a lot of labor.

00:01:53.370 --> 00:01:55.680
So today, we're going to help
Bob build a mortgage

00:01:55.680 --> 00:01:56.940
calculator.

00:01:56.940 --> 00:02:00.730
It's going to automate a lot
of his workflow process.

00:02:00.730 --> 00:02:03.790
This is going to involve a lot
of pieces, from debugging to

00:02:03.790 --> 00:02:07.630
GUIs, to how to deploy an app,
using Gmail, writing

00:02:07.630 --> 00:02:10.310
documents, things like blobs
and conversions that will

00:02:10.310 --> 00:02:12.210
become clearer as we
go through then.

00:02:12.210 --> 00:02:15.260
So let's step through it
one piece at a time.

00:02:15.260 --> 00:02:17.170
Here's the app we want
build today.

00:02:17.170 --> 00:02:18.940
This is Bob's calculator.

00:02:18.940 --> 00:02:21.490
On the top left is a panel
showing emails from Bob's

00:02:21.490 --> 00:02:23.580
Gmail accounts that have
something to do with

00:02:23.580 --> 00:02:25.230
refinancing a mortgage.

00:02:25.230 --> 00:02:27.860
Below that is a panel showing
the most recent--

00:02:27.860 --> 00:02:29.980
I'm sorry, the currently
selected email.

00:02:29.980 --> 00:02:32.110
And on the top right is a
mortgage calculator where Bob

00:02:32.110 --> 00:02:34.320
can fill in the amount, the
rate, and the years.

00:02:34.320 --> 00:02:38.420
Or even have it auto-populated
from an email.

00:02:38.420 --> 00:02:39.800
On the bottom is a
button that says,

00:02:39.800 --> 00:02:41.340
generate reply with quote.

00:02:41.340 --> 00:02:43.880
When Bob clicks that button, the
person who got the email

00:02:43.880 --> 00:02:47.710
gets back from him a quote
for a new mortgage.

00:02:47.710 --> 00:02:48.670
Looks pretty cool.

00:02:48.670 --> 00:02:50.850
How do we build it?

00:02:50.850 --> 00:02:54.130
Well the first thing we need is
to talk about the basics of

00:02:54.130 --> 00:02:58.305
a Mortgage calculation app
and how to debug it.

00:02:58.305 --> 00:03:00.800
This is a calculate monthly
payment function.

00:03:00.800 --> 00:03:04.240
You take in the principal, the
amount of money, the rate, and

00:03:04.240 --> 00:03:06.330
the number of years of the term
of the loan and it gives

00:03:06.330 --> 00:03:07.910
you back the expected
monthly payment.

00:03:07.910 --> 00:03:09.410
And I'm not going to
lie, I took this

00:03:09.410 --> 00:03:11.280
directly from Wikipedia.

00:03:11.280 --> 00:03:14.690
Now if you test this according
to Wikipedia with $100,000 at

00:03:14.690 --> 00:03:18.220
a 4.0 rate and 30-year mortgage,
you should get a

00:03:18.220 --> 00:03:20.755
$477 monthly payment.

00:03:20.755 --> 00:03:22.005
So let's see what happens.

00:03:25.898 --> 00:03:28.530
We run the function.

00:03:28.530 --> 00:03:30.020
Take a look at the logs.

00:03:30.020 --> 00:03:31.320
And that is not the value
that Wikipedia

00:03:31.320 --> 00:03:33.080
told us would be there.

00:03:33.080 --> 00:03:34.660
Something's wrong.

00:03:34.660 --> 00:03:36.500
Well luckily for us, this
year Google Apps

00:03:36.500 --> 00:03:38.740
Script launched a debugger.

00:03:38.740 --> 00:03:41.710
We can set a break point and
start debugging and see what's

00:03:41.710 --> 00:03:44.370
going on at every
line of code.

00:03:44.370 --> 00:03:46.620
Like any other debugger,
we have step into, step

00:03:46.620 --> 00:03:47.360
over, and step out.

00:03:47.360 --> 00:03:50.180
And here we're using step into
to step through the code line

00:03:50.180 --> 00:03:53.260
by line, see the values changing
in the bottom panel

00:03:53.260 --> 00:03:54.685
as the code executes.

00:03:54.685 --> 00:03:56.110
That looks good.

00:03:56.110 --> 00:03:57.880
That looks good.

00:03:57.880 --> 00:03:59.130
Still looking good.

00:04:02.910 --> 00:04:05.490
And the denominator is clearly
wrong on the bottom.

00:04:05.490 --> 00:04:08.250
OK, well we can fix that.

00:04:08.250 --> 00:04:10.410
Let's get out of
debugging mode.

00:04:10.410 --> 00:04:11.340
Ah, there it is.

00:04:11.340 --> 00:04:14.190
As with everything else, a
misplaced parenthesis is the

00:04:14.190 --> 00:04:16.680
problem with our program.

00:04:16.680 --> 00:04:17.930
OK, so we can fix it.

00:04:21.519 --> 00:04:22.769
Run it again.

00:04:26.700 --> 00:04:28.530
And there it is, the value
that God and Wikipedia

00:04:28.530 --> 00:04:30.950
intended, $477.

00:04:30.950 --> 00:04:33.280
Great, we have a calculate
monthly payment function.

00:04:33.280 --> 00:04:35.520
But of course, we don't want Bob
to have to come into the

00:04:35.520 --> 00:04:38.010
script and edit the code every
time he wants to calculate a

00:04:38.010 --> 00:04:39.700
new monthly payment.

00:04:39.700 --> 00:04:41.520
What we need is a GUI.

00:04:41.520 --> 00:04:43.710
Now, here's another question for
you guys, how many of you

00:04:43.710 --> 00:04:45.640
have tried to build a
UI using Google Apps

00:04:45.640 --> 00:04:47.550
Script, using UiApp?

00:04:47.550 --> 00:04:48.720
OK, a few people.

00:04:48.720 --> 00:04:50.680
It's pretty difficult because
you have to construct your

00:04:50.680 --> 00:04:53.710
entire UI in code, which
is sometimes

00:04:53.710 --> 00:04:54.920
complicated and painful.

00:04:54.920 --> 00:04:57.445
Which is why today, we're happy
to announce the Apps

00:04:57.445 --> 00:04:59.180
Script GUI Builder.

00:04:59.180 --> 00:05:01.520
This is a drag and
drop GUI Builder.

00:05:01.520 --> 00:05:03.580
I'm sure you're familiar
with the type.

00:05:03.580 --> 00:05:06.390
You can create a UI in it, use
it from Apps Script, and this

00:05:06.390 --> 00:05:07.340
is live today.

00:05:07.340 --> 00:05:09.326
You can go turn it on right now,
it's in the file menu and

00:05:09.326 --> 00:05:10.576
we'll show it to you
in a minute.

00:05:13.390 --> 00:05:14.640
[APPLAUSE]

00:05:17.970 --> 00:05:19.680
COREY GOLDFEDER: So what can
the GUI Builder do for you?

00:05:19.680 --> 00:05:22.550
Well of course, it can let you
build a user interface easily.

00:05:22.550 --> 00:05:24.260
It could also let you decorate
it later, and

00:05:24.260 --> 00:05:25.470
this is really important.

00:05:25.470 --> 00:05:28.150
You can build a functional
interface, make it work, and

00:05:28.150 --> 00:05:30.610
then worry about styling
it after the fact.

00:05:30.610 --> 00:05:32.620
You can script it as usual,
and we're going to go into

00:05:32.620 --> 00:05:34.810
that in detail in a moment.

00:05:34.810 --> 00:05:36.580
And finally, as with everything
in Google Apps

00:05:36.580 --> 00:05:40.940
Script, you can deploy it fast.
We barely have the word

00:05:40.940 --> 00:05:42.330
deploy in our dictionary.

00:05:42.330 --> 00:05:45.894
One-click deployment is
what we're all about.

00:05:45.894 --> 00:05:48.180
The GUI Builder helps you
reduce development time

00:05:48.180 --> 00:05:50.230
because you can iterate quickly
on the UI as you're

00:05:50.230 --> 00:05:51.540
building the script.

00:05:51.540 --> 00:05:54.040
It also reduces code size
because you can separate out

00:05:54.040 --> 00:05:57.030
the UI and the styling from
Business Logic and in fact,

00:05:57.030 --> 00:05:59.915
you don't even need to have
explicit code for your UI, it

00:05:59.915 --> 00:06:01.390
just works.

00:06:01.390 --> 00:06:03.825
And finally, it actually helps
you with the correctness of

00:06:03.825 --> 00:06:05.740
your code because the Builder
helps you avoid

00:06:05.740 --> 00:06:07.210
common UiApp pitfalls.

00:06:07.210 --> 00:06:09.130
You can't put widgets in panels
that don't support

00:06:09.130 --> 00:06:11.760
them, you can't set values
that aren't allowed.

00:06:11.760 --> 00:06:13.880
The Builder prevents common
UI of errors.

00:06:13.880 --> 00:06:15.100
And if it works in
the Builder, it

00:06:15.100 --> 00:06:16.350
will work in UiApp.

00:06:18.690 --> 00:06:21.340
Building a GUI should be fast
and intuitive because you guys

00:06:21.340 --> 00:06:24.550
are focused on application
design, not on website design.

00:06:24.550 --> 00:06:27.100
You don't want to deal
with CSS quirks.

00:06:27.100 --> 00:06:30.500
You don't want to deal with
setting values browser by

00:06:30.500 --> 00:06:32.960
browser, so we do
that for you.

00:06:32.960 --> 00:06:34.860
The GUIs real WYSIWYG
down to browser

00:06:34.860 --> 00:06:36.720
quirks like I just said.

00:06:36.720 --> 00:06:40.670
On the left is a UI from the
Builder showing in Firefox.

00:06:40.670 --> 00:06:43.250
On the right is the same
UI showing in Chrome.

00:06:43.250 --> 00:06:44.780
Notice that there are
slight differences.

00:06:44.780 --> 00:06:46.760
These are done by the browser,
so they look native to each

00:06:46.760 --> 00:06:48.320
browser in each OS.

00:06:48.320 --> 00:06:51.030
However, the functionality
will be the same.

00:06:51.030 --> 00:06:53.220
Most importantly, what you see
in the Builder is what you

00:06:53.220 --> 00:06:54.610
will see in that browser.

00:06:54.610 --> 00:06:57.840
So if you open this same UI in
Chrome, you will see the app

00:06:57.840 --> 00:06:59.500
as it will show in
running Chrome.

00:06:59.500 --> 00:07:02.310
If you open in Firefox, you will
see it as it shows if run

00:07:02.310 --> 00:07:03.620
in Firefox.

00:07:03.620 --> 00:07:06.050
I have not mentioned Internet
Explorer because we support

00:07:06.050 --> 00:07:09.720
all modern standard compliant
browsers.

00:07:09.720 --> 00:07:12.550
We do have rudimentary Internet
Explorer support and

00:07:12.550 --> 00:07:15.640
more should be coming, but it
works right now very well in

00:07:15.640 --> 00:07:18.050
Firefox and Chrome.

00:07:18.050 --> 00:07:19.810
OK, so how do you build a UI?

00:07:19.810 --> 00:07:22.370
You can use Draw or Drag
to create widgets.

00:07:22.370 --> 00:07:24.900
Dragging's when you just click
on the pallet, drag a

00:07:24.900 --> 00:07:25.920
widget right off.

00:07:25.920 --> 00:07:28.830
Drawing is when you select an
item on the pallet, carefully

00:07:28.830 --> 00:07:31.990
place and draw like you were
drawing in a paint program.

00:07:31.990 --> 00:07:34.660
And these are the same widgets
as in UiApp, so you should be

00:07:34.660 --> 00:07:36.220
immediately familiar
with them.

00:07:36.220 --> 00:07:37.770
Not all the UiApp widgets
are available.

00:07:37.770 --> 00:07:40.090
You can expect the rest of them
to come shortly and more

00:07:40.090 --> 00:07:42.300
widgets to be added both to the
Builder and UiApp in the

00:07:42.300 --> 00:07:43.920
days to come.

00:07:43.920 --> 00:07:46.400
You can lay out or group
widgets using panels.

00:07:46.400 --> 00:07:49.170
Nested panels can create complex
effects and flow

00:07:49.170 --> 00:07:53.040
panels, like Flow Panel or
Vertical Panel, et cetera, can

00:07:53.040 --> 00:07:56.000
let you create resolution
independence using both flow

00:07:56.000 --> 00:07:58.290
panels and percentage sizing
so that your UIs show up

00:07:58.290 --> 00:08:00.050
correctly on everything
from mobile

00:08:00.050 --> 00:08:03.210
devices to large screens.

00:08:03.210 --> 00:08:05.260
You can even try different
resolutions without resizing

00:08:05.260 --> 00:08:06.230
your browser.

00:08:06.230 --> 00:08:08.440
Because as we'll see in a
moment, there's an application

00:08:08.440 --> 00:08:11.000
window inside the Builder that
can be independently re-sized.

00:08:11.000 --> 00:08:13.870
And a lot more of this is coming
too in future versions

00:08:13.870 --> 00:08:15.690
of the near future, you can
expect things like snap to

00:08:15.690 --> 00:08:19.200
grid, dragging guidelines as you
drag near something, all

00:08:19.200 --> 00:08:21.850
that is on its way.

00:08:21.850 --> 00:08:24.400
Each widget in the Builder
exposes only the properties

00:08:24.400 --> 00:08:25.420
that it supports.

00:08:25.420 --> 00:08:27.630
So you can focus on exactly
what you need.

00:08:27.630 --> 00:08:29.370
And also, so that you can't
set a value that

00:08:29.370 --> 00:08:31.580
won't make any sense.

00:08:31.580 --> 00:08:34.100
Everything is checked as you
type, every value is validated

00:08:34.100 --> 00:08:36.330
and you get immediate
feedback.

00:08:36.330 --> 00:08:38.819
You see the effect in the
Builder as you type it and if

00:08:38.819 --> 00:08:41.370
it can't be applied to that
property, to that widget, it

00:08:41.370 --> 00:08:42.089
won't be saved.

00:08:42.089 --> 00:08:45.160
So if it works in the Builder,
it will work in your app.

00:08:45.160 --> 00:08:47.900
And finally, you can add
behaviors, event handlers,

00:08:47.900 --> 00:08:49.510
directly from the Builder
and we'll see an example

00:08:49.510 --> 00:08:51.330
of that right now.

00:08:51.330 --> 00:08:52.670
So here's the Builder.

00:08:52.670 --> 00:08:54.200
We load it from the file menu.

00:08:54.200 --> 00:08:56.120
That menu item is live today.

00:08:56.120 --> 00:08:58.980
And here it is, a floating
application window.

00:08:58.980 --> 00:09:01.260
On the right side is a
properties bar, editable

00:09:01.260 --> 00:09:02.590
properties.

00:09:02.590 --> 00:09:04.950
On the left side is a
widget palette with

00:09:04.950 --> 00:09:06.500
more widgets to come.

00:09:06.500 --> 00:09:09.000
Let's start building Bob's
mortgage calculator.

00:09:09.000 --> 00:09:10.470
Just the simple building
blocks.

00:09:10.470 --> 00:09:14.100
A flow panel to hold the
emails as they come in.

00:09:14.100 --> 00:09:18.190
An absolute panel for the
calculator, top right area.

00:09:18.190 --> 00:09:20.940
And a label at the bottom to
hold the text of the currently

00:09:20.940 --> 00:09:23.030
selected email.

00:09:23.030 --> 00:09:25.960
Once we've dropped items on the
application, we can edit

00:09:25.960 --> 00:09:31.510
them either by dragging them
or resizing them as so.

00:09:34.760 --> 00:09:37.390
Or, by using the Properties
bar to edit the currently

00:09:37.390 --> 00:09:40.330
selected widget or widgets.

00:09:40.330 --> 00:09:44.008
Changing the text, everything
is changed live.

00:09:44.008 --> 00:09:46.540
Changing the color.

00:09:46.540 --> 00:09:50.510
If you edit it here, you'll see
the result immediately.

00:09:50.510 --> 00:09:54.250
So how are we going to interact
with this UI in code?

00:09:54.250 --> 00:09:57.640
If we want to get a reference
to an element in the UI, we

00:09:57.640 --> 00:09:58.920
need to use its ID property.

00:09:58.920 --> 00:09:59.830
So let's set some IDs.

00:09:59.830 --> 00:10:03.348
The top left panel, well that's
the emails panel.

00:10:07.470 --> 00:10:12.610
The top right panel, that's
the calculator.

00:10:12.610 --> 00:10:13.880
Great, so now we have
references that

00:10:13.880 --> 00:10:15.390
we can use in code.

00:10:15.390 --> 00:10:17.880
Let's actually start building
the calculator.

00:10:17.880 --> 00:10:19.430
We'll need a calculate button.

00:10:19.430 --> 00:10:22.520
Rip it off, place it
where we like it.

00:10:22.520 --> 00:10:26.230
We'll give it an
ID, some text.

00:10:29.240 --> 00:10:29.640
Great.

00:10:29.640 --> 00:10:30.870
And of course, some behavior.

00:10:30.870 --> 00:10:32.830
The GUI Builder is aware
of your script.

00:10:32.830 --> 00:10:35.680
So all the function in your
script are available to set as

00:10:35.680 --> 00:10:38.000
event time that is right
there in the Builder.

00:10:38.000 --> 00:10:40.030
When you click on Calculate,
the calculate function will

00:10:40.030 --> 00:10:41.430
now be called.

00:10:41.430 --> 00:10:42.890
Oh, and we need a button
at the bottom for

00:10:42.890 --> 00:10:44.210
that reply with quote.

00:10:44.210 --> 00:10:45.110
Same thing.

00:10:45.110 --> 00:10:50.890
Replace it, re-size it, give it
an ID, give it some text,

00:10:50.890 --> 00:10:52.330
wait for the video to
catch up with me.

00:11:06.300 --> 00:11:08.040
Generate reply with
quote, and so on.

00:11:08.040 --> 00:11:10.040
OK, so let's go back to the
calculator on the top and

00:11:10.040 --> 00:11:11.770
continue building that.

00:11:11.770 --> 00:11:14.720
We'll need some labels
for the fields.

00:11:14.720 --> 00:11:16.870
And notice as these are drawn
that the component tree in the

00:11:16.870 --> 00:11:20.110
top right is showing you the
hierarchy, the panel based

00:11:20.110 --> 00:11:21.590
hierarchy of your UI.

00:11:21.590 --> 00:11:22.960
You can actually select
things and edit them

00:11:22.960 --> 00:11:24.530
directly from that tree.

00:11:24.530 --> 00:11:25.860
We need a label for
the results.

00:11:25.860 --> 00:11:28.880
We'll put a dollar sign in there
so that it looks nice

00:11:28.880 --> 00:11:30.130
when there's nothing
showing yet.

00:11:34.220 --> 00:11:36.400
And some text boxes to hold
the actual fields.

00:11:42.070 --> 00:11:44.300
Now, as I said before, the way
you get it referenced to an

00:11:44.300 --> 00:11:45.830
element in the UI is
through its ID.

00:11:45.830 --> 00:11:57.860
So we're going to set the ID as
Text Amount, Text Rate, and

00:11:57.860 --> 00:12:00.360
Text Years.

00:12:00.360 --> 00:12:01.940
And of course, we'll set
the labels to match.

00:12:04.620 --> 00:12:06.020
This next part is really
interesting.

00:12:06.020 --> 00:12:10.300
Each email that came in showed
its from and its subject on

00:12:10.300 --> 00:12:11.240
its own row.

00:12:11.240 --> 00:12:13.750
What we're going to do now is
build a single email row,

00:12:13.750 --> 00:12:16.560
which we can use as a template
to stamp out multiple copies

00:12:16.560 --> 00:12:18.700
of the same piece of the UI.

00:12:18.700 --> 00:12:20.710
So here we put a flow panel,
we call it row, and we're

00:12:20.710 --> 00:12:24.080
going to copy that over
and over in the app.

00:12:24.080 --> 00:12:28.080
We set some sizing on it, 100%
width, get rid of its border.

00:12:34.440 --> 00:12:35.980
And now let's drop some
labels on it.

00:12:35.980 --> 00:12:39.040
A label for From and a
label for Subject.

00:12:39.040 --> 00:12:41.630
And you can see that the
interaction with these widgets

00:12:41.630 --> 00:12:42.720
is pretty natural.

00:12:42.720 --> 00:12:45.340
You size them or you edit them
as you'd expect in any other

00:12:45.340 --> 00:12:46.590
application.

00:12:51.940 --> 00:12:53.570
A label for subject.

00:12:53.570 --> 00:12:55.520
Notice the blue boxes.

00:12:55.520 --> 00:12:57.310
The blue box shows where
the widget will go when

00:12:57.310 --> 00:12:58.000
you let go of it.

00:12:58.000 --> 00:13:00.165
So if you're dragging it or
resizing it, that's where it

00:13:00.165 --> 00:13:01.130
will end up.

00:13:01.130 --> 00:13:03.170
When you're doing this on an
absolute panel, it's not the

00:13:03.170 --> 00:13:06.000
most obvious thing because
it's directly behind what

00:13:06.000 --> 00:13:06.690
you're dragging.

00:13:06.690 --> 00:13:08.640
When you're working on a flow
panel, it's actually really

00:13:08.640 --> 00:13:13.082
helpful to see the entire UI
re-flowing as you're dragging.

00:13:13.082 --> 00:13:14.565
We have From, we have Subject.

00:13:17.320 --> 00:13:19.220
Great.

00:13:19.220 --> 00:13:20.440
100% width.

00:13:20.440 --> 00:13:22.100
And now let's just
add some styling.

00:13:22.100 --> 00:13:23.720
From should be bold.

00:13:23.720 --> 00:13:25.560
And let's drag all the
widgets that we want

00:13:25.560 --> 00:13:26.980
to be the same color.

00:13:26.980 --> 00:13:30.070
Select them all with Control.

00:13:30.070 --> 00:13:31.160
Set a nice color.

00:13:31.160 --> 00:13:33.590
And this is the decorate it
later part that I mentioned.

00:13:33.590 --> 00:13:37.340
Once we built the UI, we can
worry about the way it looks.

00:13:37.340 --> 00:13:38.590
Nice yellow backgrounds.

00:13:43.010 --> 00:13:44.780
A different color for the
label at the bottom.

00:13:49.390 --> 00:13:51.680
And there it is, Bob's
calculator app, exactly as we

00:13:51.680 --> 00:13:52.930
showed it before.

00:13:55.180 --> 00:13:56.760
So, we can build a UI.

00:13:56.760 --> 00:13:58.690
What can we do with
it in script?

00:13:58.690 --> 00:14:00.970
The first thing we need to do
with a Builder component, and

00:14:00.970 --> 00:14:02.550
here I'm going to
define a term.

00:14:02.550 --> 00:14:05.810
We call the UI you just
built a component.

00:14:05.810 --> 00:14:07.510
The first thing you can do
is load it in with a new

00:14:07.510 --> 00:14:10.520
function, UiApp loadComponent.

00:14:10.520 --> 00:14:13.130
Everything you do in the Builder
has 100% compatibility

00:14:13.130 --> 00:14:16.270
with UiApp code and components
act exactly as if you had

00:14:16.270 --> 00:14:18.280
typed in the code
to create them.

00:14:18.280 --> 00:14:21.970
Here's how you show the app,
show the UI you just created

00:14:21.970 --> 00:14:23.600
as its own web page.

00:14:23.600 --> 00:14:26.120
This is standard if you ever
use UiApp or if you look at

00:14:26.120 --> 00:14:27.710
our existing UiApp code.

00:14:27.710 --> 00:14:29.390
You write a doGet function.

00:14:29.390 --> 00:14:31.210
You create an application,
var app equals

00:14:31.210 --> 00:14:33.220
UIapp.createApplication.

00:14:33.220 --> 00:14:35.170
You add to it the loaded
component.

00:14:35.170 --> 00:14:38.370
And this is the only new part,
app.loadComponent.

00:14:38.370 --> 00:14:39.590
And you return the app.

00:14:39.590 --> 00:14:42.490
This will show that UI
that you just created

00:14:42.490 --> 00:14:45.330
as its own web page.

00:14:45.330 --> 00:14:46.840
Well, we can do more
than that.

00:14:46.840 --> 00:14:50.240
Builder components can be
edited in apparently.

00:14:50.240 --> 00:14:53.326
Builder components can be edited
in something, in code.

00:14:53.326 --> 00:14:56.180
Here we're loading a component
in from the GUI.

00:14:56.180 --> 00:14:57.940
We're grabbing a single
widget from it.

00:14:57.940 --> 00:15:00.880
So we're using the IDs that I
mentioned, app.getElementbyID

00:15:00.880 --> 00:15:03.180
and grabbing out button one.

00:15:03.180 --> 00:15:04.810
And then we're changing
the text.

00:15:04.810 --> 00:15:06.990
So were editing the UI
from the Builder.

00:15:06.990 --> 00:15:07.770
It's not static.

00:15:07.770 --> 00:15:11.770
You can use it just as if you
had created the code yourself.

00:15:11.770 --> 00:15:13.930
You can also add new UiApp
widgets inside

00:15:13.930 --> 00:15:15.160
of a Builder component.

00:15:15.160 --> 00:15:17.090
So here we're loading
a component.

00:15:17.090 --> 00:15:19.490
Grabbing out panel one from it,
again same way as before,

00:15:19.490 --> 00:15:21.420
using its ID to get
a reference to it.

00:15:21.420 --> 00:15:22.850
And then adding a new
button inside.

00:15:22.850 --> 00:15:24.630
And this button is completely
a UiApp.

00:15:24.630 --> 00:15:25.690
This is not from the Builder.

00:15:25.690 --> 00:15:29.270
So UiApp and the Builder
can totally interact.

00:15:29.270 --> 00:15:31.450
You can even pull out parts
of a component.

00:15:31.450 --> 00:15:33.930
Here we're loading a component,
grabbing a panel.

00:15:33.930 --> 00:15:36.530
Again, an inner panel, not
the entire component.

00:15:36.530 --> 00:15:39.020
And only adding part of the
component to the app.

00:15:39.020 --> 00:15:40.525
The only part that will
show now in the app

00:15:40.525 --> 00:15:41.560
is that inner panel.

00:15:41.560 --> 00:15:42.940
And I'll show an example
of this in a

00:15:42.940 --> 00:15:45.820
moment actually working.

00:15:45.820 --> 00:15:47.890
Finally, you can add the
same component to the

00:15:47.890 --> 00:15:49.060
app multiple times.

00:15:49.060 --> 00:15:51.890
This how we achieve using that
row as a template over and

00:15:51.890 --> 00:15:53.010
over again.

00:15:53.010 --> 00:15:55.630
Now of course, there's a problem
because every element

00:15:55.630 --> 00:15:58.080
in a UiApp must have
a unique ID.

00:15:58.080 --> 00:16:00.430
And these IDs are coming
from the Builder.

00:16:00.430 --> 00:16:05.480
So you can use the optional
prefix property and set a

00:16:05.480 --> 00:16:07.760
prefix for each version
that you load in.

00:16:07.760 --> 00:16:09.430
No longer will there be
a calculate button.

00:16:09.430 --> 00:16:11.462
There'll be a one calculate
and a two calculate.

00:16:11.462 --> 00:16:13.440
And this is how we can
distinguish them in code.

00:16:16.410 --> 00:16:17.180
Great.

00:16:17.180 --> 00:16:20.340
So now we've built a UI for
Bob's mortgage calculator.

00:16:20.340 --> 00:16:22.840
How can we get this application
out to the world?

00:16:22.840 --> 00:16:25.490
How can we deploy it?

00:16:25.490 --> 00:16:27.130
So there are a couple different
ways that code from

00:16:27.130 --> 00:16:28.520
Google Apps Script
can be deployed.

00:16:28.520 --> 00:16:30.760
The first is as an add-in,
either to a spreadsheet or

00:16:30.760 --> 00:16:34.410
more recently to a Google site
with more integrations coming.

00:16:34.410 --> 00:16:36.910
In a spreadsheet you can use is
at the custom function, or

00:16:36.910 --> 00:16:39.210
as a dialogue with its own user
interface that might be

00:16:39.210 --> 00:16:41.180
raised from an integrated
user menu.

00:16:41.180 --> 00:16:43.050
And the key here is when you're
publishing a Google

00:16:43.050 --> 00:16:45.380
Apps Script as an add-in,
it runs as

00:16:45.380 --> 00:16:46.590
the user at the keyboard.

00:16:46.590 --> 00:16:47.760
What does that mean?

00:16:47.760 --> 00:16:50.130
It means that when you load
a spreadsheet that has an

00:16:50.130 --> 00:16:53.600
add-in, you, the guy running the
spreadsheet, are the user

00:16:53.600 --> 00:16:54.830
who's being referenced
by the script.

00:16:54.830 --> 00:16:57.600
So if it's referencing contacts
or calendar, it's

00:16:57.600 --> 00:17:01.020
referencing your contacts
and your calendar.

00:17:01.020 --> 00:17:03.450
In contrast, the other way to
publish a Google Apps Script

00:17:03.450 --> 00:17:06.720
piece of code is as an app on
its own with its own URL and

00:17:06.720 --> 00:17:09.920
its own user interface not
inside of an existing app.

00:17:09.920 --> 00:17:11.780
In that case, it executes
as the publisher.

00:17:11.780 --> 00:17:13.710
And this is ideal for
things that want to

00:17:13.710 --> 00:17:15.040
be run as role accounts.

00:17:15.040 --> 00:17:18.000
So if, for example, you build
an HR based system, you can

00:17:18.000 --> 00:17:21.930
always run it as HR
at your domain.

00:17:21.930 --> 00:17:24.069
Let's see what it looks like
to do a custom function.

00:17:24.069 --> 00:17:26.690
Well we created a calculate
monthly payment function and

00:17:26.690 --> 00:17:29.060
we debugged it, so
it should work.

00:17:29.060 --> 00:17:31.000
And all we need to do to
make it work is go to a

00:17:31.000 --> 00:17:33.340
spreadsheet, type equals
calculate monthly payments and

00:17:33.340 --> 00:17:35.640
a couple of parameters
and bang, it works.

00:17:35.640 --> 00:17:36.600
No deployments.

00:17:36.600 --> 00:17:39.150
If it's a visible function in
your script, visible just

00:17:39.150 --> 00:17:40.840
means it doesn't end with an
underscore, so that you can

00:17:40.840 --> 00:17:42.480
hide implementation details.

00:17:42.480 --> 00:17:44.810
But if it's a visible function
in your script, then you can

00:17:44.810 --> 00:17:46.910
just use it in a spreadsheet
immediately.

00:17:46.910 --> 00:17:50.070
You can return a single value to
overwrite that cell, or an

00:17:50.070 --> 00:17:53.540
array or a double array
to overwrite a range.

00:17:53.540 --> 00:17:56.295
A slightly more complex, but
still pretty easy integration,

00:17:56.295 --> 00:17:59.270
is to use a custom dialogue
raised from a custom menu.

00:17:59.270 --> 00:18:01.870
The special onOpen function
lets you add menus to a

00:18:01.870 --> 00:18:04.640
spreadsheet as it's opened.

00:18:04.640 --> 00:18:05.310
Pretty easy code.

00:18:05.310 --> 00:18:07.500
Spreadsheet app, get
active spreadsheet.

00:18:07.500 --> 00:18:10.480
Add a menu, mortgage, with a
sub-menu of calculator that

00:18:10.480 --> 00:18:13.350
calls a function
[? showcalc. ?]

00:18:13.350 --> 00:18:15.000
Let's see how that works.

00:18:15.000 --> 00:18:17.590
Someone clicks on mortgage
calculator.

00:18:17.590 --> 00:18:21.510
Hey, there is the same little
calculator app that was in the

00:18:21.510 --> 00:18:23.860
top right corner of
Bob's application.

00:18:23.860 --> 00:18:26.890
And just like I promised, this
is an example of showing just

00:18:26.890 --> 00:18:29.230
part of something for the
Builder inside an app.

00:18:29.230 --> 00:18:32.860
So all we did was we added the
component from the Builder to

00:18:32.860 --> 00:18:36.670
a script, to an app, only
showing the inner panel.

00:18:36.670 --> 00:18:39.870
So we loaded it, but only added
an inner panel and the

00:18:39.870 --> 00:18:43.120
calculator works exactly as
we like without the email

00:18:43.120 --> 00:18:44.370
integration that we
showed before.

00:18:47.510 --> 00:18:48.810
How do you distribute
something like this?

00:18:48.810 --> 00:18:49.970
Well, there are two ways.

00:18:49.970 --> 00:18:51.910
You can publish it to the
public script gallery.

00:18:51.910 --> 00:18:53.960
And this public script gallery
is really public.

00:18:53.960 --> 00:18:55.920
It's accessible from
any spreadsheet.

00:18:55.920 --> 00:18:58.130
And for safety reasons, you can
only publish to the script

00:18:58.130 --> 00:19:00.400
gallery from a non-domain
account,

00:19:00.400 --> 00:19:01.570
from a Gmail.com account.

00:19:01.570 --> 00:19:04.040
This is important because we
don't want you to accidentally

00:19:04.040 --> 00:19:07.500
leak your personal company
enterprise assets into the

00:19:07.500 --> 00:19:09.500
public script gallery.

00:19:09.500 --> 00:19:11.270
In contrast, if you'd like to
publish something to your

00:19:11.270 --> 00:19:13.060
domain, you can use the
template gallery.

00:19:13.060 --> 00:19:15.760
That's local to your domain
and the entire spreadsheet

00:19:15.760 --> 00:19:18.030
gets saved with the script.

00:19:18.030 --> 00:19:19.800
So it's pretty nice if you
have a spreadsheet that

00:19:19.800 --> 00:19:21.210
assumes a certain layout--

00:19:21.210 --> 00:19:22.980
I'm sorry, if you have a script
that assumes a certain

00:19:22.980 --> 00:19:26.020
layout of your spreadsheet,
you can publish it to your

00:19:26.020 --> 00:19:28.590
domain template gallery and the
entire spreadsheet gets

00:19:28.590 --> 00:19:30.350
put up there.

00:19:30.350 --> 00:19:33.320
And this helps you save your
corporate assets from being

00:19:33.320 --> 00:19:34.570
leaked out.

00:19:36.410 --> 00:19:37.600
Here's what it looks like.

00:19:37.600 --> 00:19:41.080
You click, sorry, Share, Publish
script, and then you

00:19:41.080 --> 00:19:43.020
get this publisher
script dialogue.

00:19:43.020 --> 00:19:45.400
You fill it out with the
information you like and bang.

00:19:45.400 --> 00:19:47.440
There it is in the public
script gallery.

00:19:47.440 --> 00:19:51.570
The flow for the template
gallery is fairly similar.

00:19:51.570 --> 00:19:55.220
OK, how about publishing a fully
capable web app with its

00:19:55.220 --> 00:19:56.790
own user interface?

00:19:56.790 --> 00:19:58.930
Well the word publish in this
context means something

00:19:58.930 --> 00:19:59.920
slightly different.

00:19:59.920 --> 00:20:02.640
Rather than showing the code,
publishing the code so that

00:20:02.640 --> 00:20:05.450
someone else could run the
app, we mean actually

00:20:05.450 --> 00:20:07.430
publishing the app as an
executable that someone else

00:20:07.430 --> 00:20:10.520
could use at a URL directly.

00:20:10.520 --> 00:20:11.170
Here's the app.

00:20:11.170 --> 00:20:14.310
We'd like to just make this
exist at some web page.

00:20:14.310 --> 00:20:18.640
So in the sharing menu there's a
publish a service menu item.

00:20:18.640 --> 00:20:20.160
You can select how you
want it to be run.

00:20:20.160 --> 00:20:23.390
You can have it only available
to yourself for a personal

00:20:23.390 --> 00:20:25.710
script or maybe something you're
testing, to members of

00:20:25.710 --> 00:20:28.850
your domain, or to anybody,
where anybody either defines

00:20:28.850 --> 00:20:31.660
any Google user, or really,
anybody, any anonymous user on

00:20:31.660 --> 00:20:32.470
the internet.

00:20:32.470 --> 00:20:33.960
And here's the best part.

00:20:33.960 --> 00:20:36.400
As soon as you click Enable
service, that URL you see

00:20:36.400 --> 00:20:37.590
there is live.

00:20:37.590 --> 00:20:40.330
That is the entire deployment
process of Google Apps Script.

00:20:40.330 --> 00:20:42.275
When you want to undeploy
it, uncheck the box.

00:20:42.275 --> 00:20:44.100
That's all it takes.

00:20:44.100 --> 00:20:48.070
No XML, no manifest. I can't
stress this enough.

00:20:48.070 --> 00:20:51.090
OK, so I'm going to hand
this over to Drew now.

00:20:51.090 --> 00:20:54.440
Because although I've spoken a
lot about how to build the UI,

00:20:54.440 --> 00:20:59.060
I haven't actually told you
what to do with it.

00:20:59.060 --> 00:21:01.900
DREW CSILLAG: Well, Corey showed
you how to build this

00:21:01.900 --> 00:21:04.410
nice, fancy facade for building
this mortgage

00:21:04.410 --> 00:21:05.310
application.

00:21:05.310 --> 00:21:09.020
Unfortunately he kind of hand
waved over what I would

00:21:09.020 --> 00:21:12.900
consider the difficult parts,
the business logic.

00:21:12.900 --> 00:21:15.380
And some of you may have guessed
by the stuff that's in

00:21:15.380 --> 00:21:17.910
there as going, how on earth
did they actually read the

00:21:17.910 --> 00:21:19.890
stuff out of the inbox?

00:21:19.890 --> 00:21:23.850
Well I get to announce that
we're rolling out the Gmail

00:21:23.850 --> 00:21:26.440
service in the next couple of
days, which will allow you to

00:21:26.440 --> 00:21:28.230
full access--

00:21:28.230 --> 00:21:30.290
full fidelity access
to the Gmail inbox.

00:21:30.290 --> 00:21:32.180
It's not through some IMAP thing
or some of the other

00:21:32.180 --> 00:21:37.030
ways that people have done
this in the past.

00:21:37.030 --> 00:21:41.040
So I was going to say this gives
us a great way to be

00:21:41.040 --> 00:21:43.170
able to do all sorts of stuff.

00:21:43.170 --> 00:21:45.590
As far as the way the API works,
if you've used Gmail--

00:21:45.590 --> 00:21:47.910
anybody here use Gmail?

00:21:47.910 --> 00:21:50.540
If you use Gmail, when you see
the API you're going to be

00:21:50.540 --> 00:21:51.190
like, oh duh.

00:21:51.190 --> 00:21:53.520
That's just the way it's
supposed to work.

00:21:53.520 --> 00:21:55.880
And you can do all the normal
things: compose, you can check

00:21:55.880 --> 00:21:58.180
labels, all sorts of stuff.

00:21:58.180 --> 00:22:01.410
In Gmail, just as in the
interface, there are the main

00:22:01.410 --> 00:22:01.970
three things.

00:22:01.970 --> 00:22:04.900
There's threads, which contain
messages, and those messages

00:22:04.900 --> 00:22:06.700
can be labeled.

00:22:06.700 --> 00:22:09.214
And they could be labeled
multiple times.

00:22:09.214 --> 00:22:11.520
The interface to deal with
labels is pretty

00:22:11.520 --> 00:22:13.000
straightforward.

00:22:13.000 --> 00:22:15.260
You can create them, you can
delete them, and you can get

00:22:15.260 --> 00:22:17.730
them by either you could get all
of them or get a specific

00:22:17.730 --> 00:22:20.120
one that you're looking for.

00:22:20.120 --> 00:22:23.220
Within the threads, you can
get threads either by your

00:22:23.220 --> 00:22:26.060
inbox, priority inbox, we even
allow you to get it from your

00:22:26.060 --> 00:22:28.970
spam if you actually want
to look at your spam.

00:22:28.970 --> 00:22:31.990
And we provide convenience
methods to get things like the

00:22:31.990 --> 00:22:35.550
number of unread messages
in those threads.

00:22:35.550 --> 00:22:37.950
They can also be marked as
Important or Unimportant for

00:22:37.950 --> 00:22:41.620
like the priority inbox within
Gmail, you can mark them as

00:22:41.620 --> 00:22:47.060
Read or Unread and you can
move them around as well.

00:22:47.060 --> 00:22:50.200
This is my personal favorite one
because I use this all the

00:22:50.200 --> 00:22:52.450
time, I use search
for everything.

00:22:52.450 --> 00:22:55.640
And through the search interface
is really the longer

00:22:55.640 --> 00:22:57.410
form version of being able to
get all the things I just

00:22:57.410 --> 00:22:58.960
talked about before.

00:22:58.960 --> 00:23:01.450
And in the case of going back
to the mortgage app, this is

00:23:01.450 --> 00:23:04.030
how we're going to get the
emails that we display in that

00:23:04.030 --> 00:23:05.850
upper left pane.

00:23:05.850 --> 00:23:08.710
Just like whatever you could put
in that search box is the

00:23:08.710 --> 00:23:10.470
same thing that you could
put as the argument to

00:23:10.470 --> 00:23:13.520
GmailApp.search corrected
right there.

00:23:13.520 --> 00:23:15.900
And then iterate over the
threads, maybe do some

00:23:15.900 --> 00:23:18.260
additional filtering or data
munging if you want as you

00:23:18.260 --> 00:23:20.440
loop over them, and then return
the messages back.

00:23:23.650 --> 00:23:26.450
Well the other thing that the
mortgage app did is that at

00:23:26.450 --> 00:23:28.830
the end of the day, it could
send a quote to the person who

00:23:28.830 --> 00:23:32.360
originally sent the email
asking for the quote.

00:23:32.360 --> 00:23:35.460
So also rolling out in the next
couple of days is access

00:23:35.460 --> 00:23:38.400
to Google Documents.

00:23:38.400 --> 00:23:41.810
This allows you to write them,
edit them, create them, the

00:23:41.810 --> 00:23:44.630
whole nine yards.

00:23:44.630 --> 00:23:46.050
And of course, if you're going
to work with a document, you

00:23:46.050 --> 00:23:47.470
need to do one of two things.

00:23:47.470 --> 00:23:49.580
You need a document
to start with.

00:23:49.580 --> 00:23:52.080
So you can either create a new
one, you can give it a name.

00:23:52.080 --> 00:23:55.970
Or you can get an ID from
one and open it by that.

00:23:55.970 --> 00:23:59.700
And the IDs that we use here
are, when you've got a Google

00:23:59.700 --> 00:24:02.120
Document open, it's got a long
string of random looking text

00:24:02.120 --> 00:24:04.920
in the URL bar, that's what the
ID is and that's what you

00:24:04.920 --> 00:24:07.570
would pass in.

00:24:07.570 --> 00:24:11.230
Within the document, if you're
familiar with the W3C DOM,

00:24:11.230 --> 00:24:12.740
it's different here.

00:24:12.740 --> 00:24:15.420
The DOM for documents is a
little different, but it will

00:24:15.420 --> 00:24:17.580
be very familiar to you.

00:24:17.580 --> 00:24:20.370
Within the document there's the
body, there's paragraphs,

00:24:20.370 --> 00:24:22.820
headers, footers, list items,
tables, all that.

00:24:22.820 --> 00:24:24.790
For right now, headers and
footers are read only.

00:24:24.790 --> 00:24:28.720
They will be read/write
very soon.

00:24:28.720 --> 00:24:31.520
So in our case, what we wanted
to do for the mortgage app is

00:24:31.520 --> 00:24:33.180
that we have this template
document that's going to

00:24:33.180 --> 00:24:36.605
contain the relevant information
for the quote that

00:24:36.605 --> 00:24:37.610
we're going to send them.

00:24:37.610 --> 00:24:41.020
And so what we did is we made a
template document and we put

00:24:41.020 --> 00:24:43.855
in these placeholder fields
right here, the start and end

00:24:43.855 --> 00:24:44.290
with percent.

00:24:44.290 --> 00:24:46.340
There's nothing magical about
them, it's just something

00:24:46.340 --> 00:24:47.950
handy that we're going
to use to do a

00:24:47.950 --> 00:24:49.200
little magic in a minute.

00:24:51.810 --> 00:24:53.710
And Google Docs doesn't yet
support fields, so we can't

00:24:53.710 --> 00:24:56.080
use that for field
substitution.

00:24:56.080 --> 00:24:57.930
We've got this template
document.

00:24:57.930 --> 00:25:00.780
And then we're going to write a
little JavaScript function.

00:25:00.780 --> 00:25:04.280
And what it does is it goes to
the DocsList and gets the file

00:25:04.280 --> 00:25:06.430
with the original ID
of the template.

00:25:06.430 --> 00:25:09.570
You could do this by name
if you wanted to.

00:25:09.570 --> 00:25:12.510
And then we make a copy of it,
and then we get the ID of the

00:25:12.510 --> 00:25:14.670
document we just
made a copy of.

00:25:14.670 --> 00:25:17.860
Using that we use the document
app to open it up.

00:25:17.860 --> 00:25:21.980
We get the body content of the
document and then we just do

00:25:21.980 --> 00:25:24.700
basic search and replace for all
the items that we wanted

00:25:24.700 --> 00:25:25.960
to put in there.

00:25:25.960 --> 00:25:28.290
And then we return the document
and that'll become

00:25:28.290 --> 00:25:30.100
important a little bit later.

00:25:33.210 --> 00:25:36.500
Now I'm going to take a little
bit of a tangent and talk

00:25:36.500 --> 00:25:39.400
about something called blobs for
a reason that will become

00:25:39.400 --> 00:25:40.680
clear very shortly.

00:25:43.580 --> 00:25:46.260
First, what's a blob?

00:25:46.260 --> 00:25:48.310
It kind of looks like that
funny-looking fish.

00:25:48.310 --> 00:25:49.560
It's something ill-defined
or amorphous.

00:25:52.690 --> 00:25:54.690
Some people may have the notion
of a binary large

00:25:54.690 --> 00:25:56.970
object from a database, please
cast that from your mind.

00:25:56.970 --> 00:25:59.370
It reminds all of bad things
and we don't want to talk

00:25:59.370 --> 00:26:01.230
about them.

00:26:01.230 --> 00:26:04.000
We have a bunch of different
sources and sinks of data

00:26:04.000 --> 00:26:06.030
within Google Apps Script.

00:26:06.030 --> 00:26:09.850
And it might be you're in
something, something and

00:26:09.850 --> 00:26:12.230
you're putting it into your
DocsList, or you're going to

00:26:12.230 --> 00:26:16.150
query JDBC and then post that to
some website, or do a file

00:26:16.150 --> 00:26:19.260
upload into JDBC or
email attachment.

00:26:19.260 --> 00:26:21.220
I mean, you kind of get this
Cartesian product of different

00:26:21.220 --> 00:26:24.290
ways to interact with things
and very quickly, this gets

00:26:24.290 --> 00:26:25.080
out of hand.

00:26:25.080 --> 00:26:27.560
And nobody wants to deal
with any of this stuff.

00:26:27.560 --> 00:26:30.130
So hence, the blob.

00:26:30.130 --> 00:26:32.220
Anytime you're going to deal
with some massive data that's

00:26:32.220 --> 00:26:36.050
got a name, a type, and some
measure of content to it, this

00:26:36.050 --> 00:26:39.210
allows us to treat all these
things the same way,

00:26:39.210 --> 00:26:41.760
regardless of where they come
from and regardless of where

00:26:41.760 --> 00:26:43.010
they're going to be going to.

00:26:45.820 --> 00:26:46.990
Blobs are fairly
simple things.

00:26:46.990 --> 00:26:48.000
They have a name, like I said.

00:26:48.000 --> 00:26:50.710
They have a content type,
which is like the

00:26:50.710 --> 00:26:53.470
RFC style mime type.

00:26:53.470 --> 00:26:54.690
And then they have content,
either as

00:26:54.690 --> 00:26:55.450
bites or as a stream.

00:26:55.450 --> 00:26:57.340
You can treat them either way,
depending upon what you want

00:26:57.340 --> 00:26:59.170
to do with them.

00:26:59.170 --> 00:27:01.000
The idea with a blob is that
for a lot of times you're

00:27:01.000 --> 00:27:02.820
dealing with data, you don't
necessarily care about the

00:27:02.820 --> 00:27:04.910
specific format of the
data that's in there.

00:27:04.910 --> 00:27:06.870
Say you get a JPEG image
from someplace.

00:27:06.870 --> 00:27:08.690
Most people aren't going to go
parsing through the thing,

00:27:08.690 --> 00:27:11.180
they just want to ship it
off to something else.

00:27:11.180 --> 00:27:13.930
But there's some cases where if
you've gotten an RSS feed

00:27:13.930 --> 00:27:16.470
from someplace, you want to be
able to shuffle through the

00:27:16.470 --> 00:27:18.740
thing to parse it apart.

00:27:18.740 --> 00:27:21.390
And in some cases, depending
upon what you're doing in your

00:27:21.390 --> 00:27:23.190
scripts, you may actually in
fact, want to create a blob

00:27:23.190 --> 00:27:24.440
from scratch from code.

00:27:27.230 --> 00:27:30.890
So the question is, OK, we've
got these ideas of a blobs.

00:27:30.890 --> 00:27:31.950
What can we do with them?

00:27:31.950 --> 00:27:35.240
Well, say we'll get a bunch of
blobs from the attachments of

00:27:35.240 --> 00:27:38.970
this particular sites
page that we've got.

00:27:38.970 --> 00:27:42.470
And then we've got a URL fetch
that we're going to do, go

00:27:42.470 --> 00:27:44.260
fetch an image from someplace.

00:27:44.260 --> 00:27:47.230
And I've got an image of my
DocsList that I want to

00:27:47.230 --> 00:27:48.822
include too.

00:27:48.822 --> 00:27:51.980
And then, using the new zip
functionality that we've added

00:27:51.980 --> 00:27:56.040
to the utilities interface,
which we also have an unzip,

00:27:56.040 --> 00:27:57.330
which works the expected way.

00:27:57.330 --> 00:27:59.430
We can now zip all these
different things regardless of

00:27:59.430 --> 00:28:01.160
where they came from
and produce a

00:28:01.160 --> 00:28:05.370
zipped blob named files.zip.

00:28:05.370 --> 00:28:07.640
And then from there, we can take
all that and then mail it

00:28:07.640 --> 00:28:10.570
all as a attachment to
bob@example.com.

00:28:10.570 --> 00:28:12.800
And this all just works.

00:28:12.800 --> 00:28:15.520
One of our co-workers that we
were talking with and she had

00:28:15.520 --> 00:28:17.870
started using it and had
mentioned, it's almost like

00:28:17.870 --> 00:28:19.020
magic when she used
these things.

00:28:19.020 --> 00:28:21.050
And yeah, it is kind of cool.

00:28:21.050 --> 00:28:24.810
So why am I talking about
blobs for all of this?

00:28:24.810 --> 00:28:26.850
Spreadsheets and documents
are blobs also

00:28:26.850 --> 00:28:28.990
in this whole thing.

00:28:28.990 --> 00:28:31.770
And one of the things we need
to do if we're going to mail

00:28:31.770 --> 00:28:34.070
these things around depending
upon who gets them is we might

00:28:34.070 --> 00:28:36.710
need to convert them in some
fashion to some form that they

00:28:36.710 --> 00:28:37.450
can actually use.

00:28:37.450 --> 00:28:40.090
Because maybe they don't
want a link.

00:28:40.090 --> 00:28:44.130
So Google Docs can convert
automatically to PDF.

00:28:44.130 --> 00:28:46.530
A lot of other types we can
convert those to PDF too.

00:28:46.530 --> 00:28:49.680
Things that generally would have
some form of expected PDF

00:28:49.680 --> 00:28:51.860
form that you would expect.

00:28:51.860 --> 00:28:55.590
We can also convert between
image formats for the image

00:28:55.590 --> 00:28:56.790
formats that are listed there.

00:28:56.790 --> 00:28:59.030
And we also have a whole bunch
of other ideas of conversions

00:28:59.030 --> 00:29:01.130
we'd like to be able to do.

00:29:01.130 --> 00:29:05.980
Some things would be like take
an image, crop it, rotate it,

00:29:05.980 --> 00:29:07.160
you could do that
as a conversion.

00:29:07.160 --> 00:29:12.160
Or say, get the second page in
a spreadsheet, get this data

00:29:12.160 --> 00:29:15.280
range out of it, and convert
that to a PDF, or an image, or

00:29:15.280 --> 00:29:17.480
something else that
you could do.

00:29:17.480 --> 00:29:19.660
Some of the more cooler things
we were thinking of is that

00:29:19.660 --> 00:29:21.270
Google's got some really cool
stuff that can do speech

00:29:21.270 --> 00:29:22.490
recognition and stuff.

00:29:22.490 --> 00:29:28.380
So maybe you could convert a
WAV file to a Google Doc.

00:29:28.380 --> 00:29:30.450
All sorts of crazy things
that we can think of.

00:29:30.450 --> 00:29:35.660
Or doing OCR automatically
on the fly from an image.

00:29:35.660 --> 00:29:37.180
There's a lot more things
that we want to do,

00:29:37.180 --> 00:29:40.780
so watch this space.

00:29:40.780 --> 00:29:42.100
So how do we actually
do the conversions?

00:29:42.100 --> 00:29:43.560
Fortunately, it's actually
a pretty

00:29:43.560 --> 00:29:44.600
simple matter from code.

00:29:44.600 --> 00:29:48.920
You just say, getAs and here's
the content type that I want.

00:29:48.920 --> 00:29:51.630
So in this particular case,
I've got a photo in my

00:29:51.630 --> 00:29:55.810
DocsList and it's a JPEG
as it starts off and I

00:29:55.810 --> 00:29:56.650
want it as a PNG.

00:29:56.650 --> 00:29:59.010
Just say, getAs image PNG.

00:29:59.010 --> 00:30:00.700
And it's that simple.

00:30:00.700 --> 00:30:04.710
Or, if I've got my attachments
before, I can--

00:30:04.710 --> 00:30:07.420
arrays in JavaScript have a
bunch of couple of nifty

00:30:07.420 --> 00:30:09.770
methods that I kind of forget
that they're there.

00:30:09.770 --> 00:30:12.970
But there's a neat one called
map, which allows me to take

00:30:12.970 --> 00:30:15.740
an anonymous function and say
for each of the items that are

00:30:15.740 --> 00:30:20.010
in those attachments, get them
all as application PDF.

00:30:20.010 --> 00:30:23.580
The map function is very similar
and Python has a map

00:30:23.580 --> 00:30:25.030
function that's very similar,
and schemes

00:30:25.030 --> 00:30:27.160
it's the same thing.

00:30:27.160 --> 00:30:31.205
In the Java guava-libraries
it's intervals.transform.

00:30:31.205 --> 00:30:33.630
It shows up as it's a common
thing, where it's basically

00:30:33.630 --> 00:30:36.840
apply this function to every
element in the original array

00:30:36.840 --> 00:30:39.280
and return me array
of those results.

00:30:39.280 --> 00:30:43.610
Or to spell it out a little bit
more clearly, SitesApp.

00:30:43.610 --> 00:30:44.780
You get the original list
of attachments.

00:30:44.780 --> 00:30:48.620
You start off with an empty
array of PDFs and then for

00:30:48.620 --> 00:30:52.540
each of the blobs that were in
the blobs array is you push a

00:30:52.540 --> 00:30:58.570
converted one from
the blobs array.

00:30:58.570 --> 00:31:01.110
Or, going back to the mortgage
example, we had that

00:31:01.110 --> 00:31:04.520
createDocument function before
and it returned the document

00:31:04.520 --> 00:31:06.360
that it had produced.

00:31:06.360 --> 00:31:08.735
So we're going to take that
document and then we're going

00:31:08.735 --> 00:31:11.030
to take the message also that
we had some Gmail that we

00:31:11.030 --> 00:31:15.010
originally started with, and
we're going to reply to it.

00:31:15.010 --> 00:31:18.035
And then we're going to take the
document that we got that

00:31:18.035 --> 00:31:20.370
we had created, we're going to
convert it to PDF and attach

00:31:20.370 --> 00:31:21.680
it to that reply.

00:31:21.680 --> 00:31:23.200
And then it's going
to send off.

00:31:23.200 --> 00:31:24.870
And then we're going to mark the
message as read, so that

00:31:24.870 --> 00:31:27.880
therefore when we go back to
that UI, we don't see it

00:31:27.880 --> 00:31:32.050
anymore because it only looks
for things that were unread.

00:31:32.050 --> 00:31:34.725
So starting with this,
we've already

00:31:34.725 --> 00:31:35.930
got the email selected.

00:31:35.930 --> 00:31:41.550
He's going to punch in the
$240,000 at 4%, 25 years, come

00:31:41.550 --> 00:31:44.622
up with this payment of
$1,266.81 and he's going to

00:31:44.622 --> 00:31:46.880
generate the reply.

00:31:46.880 --> 00:31:48.410
He goes over to check
his email and sure

00:31:48.410 --> 00:31:50.190
enough there's the email.

00:31:50.190 --> 00:31:52.660
And if you look at the
attachments, there it is, the

00:31:52.660 --> 00:31:54.070
PDF file we made.

00:31:54.070 --> 00:31:55.320
And then opening it
up as a PDF--

00:31:55.320 --> 00:31:57.963
because Chrome nicely
supports PDF files--

00:31:57.963 --> 00:31:59.213
[APPLAUSE]

00:32:07.140 --> 00:32:09.300
DREW CSILLAG: So we've
done a bunch of

00:32:09.300 --> 00:32:11.130
boring data entry apps.

00:32:11.130 --> 00:32:14.140
But Apps Script doesn't always
have to be that boring.

00:32:14.140 --> 00:32:15.880
It can look really snappy
and snazzy.

00:32:15.880 --> 00:32:17.350
And here to talk about
that is James.

00:32:20.038 --> 00:32:21.300
JAMES FERREIRA: Well
hello everybody.

00:32:21.300 --> 00:32:22.760
I guess we're a little
early today.

00:32:22.760 --> 00:32:23.890
Thank you.

00:32:23.890 --> 00:32:27.150
So I'm really, really excited to
be here talking to you all

00:32:27.150 --> 00:32:29.220
today here at Google IO.

00:32:29.220 --> 00:32:32.130
And I wanted to show you some
of the things that you could

00:32:32.130 --> 00:32:35.040
do with that new GUI editor
and how we're

00:32:35.040 --> 00:32:38.390
going to use that.

00:32:38.390 --> 00:32:42.610
So as a developer that's always
on the go, I'm hopping

00:32:42.610 --> 00:32:44.480
from computer to computer, one
of the things I really

00:32:44.480 --> 00:32:48.270
appreciate about Google Script
is that it's 100% web

00:32:48.270 --> 00:32:49.360
environment.

00:32:49.360 --> 00:32:51.870
So while I'm developing
for the web, I can

00:32:51.870 --> 00:32:54.620
do that on the web.

00:32:54.620 --> 00:33:00.490
When Google Script put Script
Gadgets into sites, as

00:33:00.490 --> 00:33:03.480
developers, we gained a lot of
ability to be able to engage

00:33:03.480 --> 00:33:05.720
the viewers in a completely
new way that's very

00:33:05.720 --> 00:33:06.870
interactive.

00:33:06.870 --> 00:33:13.030
So now we can do things like
hover over pop-up menus and

00:33:13.030 --> 00:33:15.260
informational pieces.

00:33:15.260 --> 00:33:18.280
And this also works great for
the educational setting for

00:33:18.280 --> 00:33:21.840
teachers to better engage
students with the information

00:33:21.840 --> 00:33:23.090
they want to get out to them.

00:33:29.620 --> 00:33:32.486
I wanted to show you an
app that we built.

00:33:32.486 --> 00:33:34.160
It's called Andy.

00:33:34.160 --> 00:33:38.100
And Andy's got a few tasks he
wants to perform to you today.

00:33:38.100 --> 00:33:41.110
And what we have here is we have
a control panel that's a

00:33:41.110 --> 00:33:45.130
set of buttons up at the top of
the screen that move Andy.

00:33:45.130 --> 00:33:47.450
So what we're going to do is
we're going to head on over to

00:33:47.450 --> 00:33:52.470
the calendar app and we're going
to retrieve a list of

00:33:52.470 --> 00:33:54.590
Andy's events for the day.

00:33:54.590 --> 00:33:57.770
And we can format those in a way
that matches our theme for

00:33:57.770 --> 00:33:59.240
the application.

00:33:59.240 --> 00:34:00.710
Now Andy can see that he's
got some work that he

00:34:00.710 --> 00:34:01.470
needs to get done.

00:34:01.470 --> 00:34:03.760
So he's going to go up and do
a little writing in Docs.

00:34:08.050 --> 00:34:11.870
So here we have another list of
Andy's Docs pulled from a

00:34:11.870 --> 00:34:14.480
specific folder in his
Google Documents.

00:34:14.480 --> 00:34:16.780
And let's go ahead and create
a document, so we can get a

00:34:16.780 --> 00:34:18.030
little work done here.

00:34:23.230 --> 00:34:27.130
Now you see that automatically
updates the list there.

00:34:27.130 --> 00:34:29.070
Well it's time for Andy
to get social.

00:34:29.070 --> 00:34:31.239
So let's go ahead and in order
to do that we're going to have

00:34:31.239 --> 00:34:33.800
to connect to a service that's
outside Google Script.

00:34:33.800 --> 00:34:38.090
So here we see we're pulling in
the latest news and a Buzz

00:34:38.090 --> 00:34:43.460
from Andy's friends using
the URL fetch app.

00:34:43.460 --> 00:34:46.690
So say thank you, Andy.

00:34:46.690 --> 00:34:48.099
So these are the different
scripts we used.

00:34:48.099 --> 00:34:51.600
So what I want to do next is I
want to show you how we go

00:34:51.600 --> 00:34:55.570
about designing a UI
like this and--

00:34:55.570 --> 00:34:57.500
sorry, I have to stay
close to the mike--

00:34:57.500 --> 00:35:01.280
and how we make Andy move.

00:35:01.280 --> 00:35:07.430
So when you're building an app
in the UiApp, it's kind of

00:35:07.430 --> 00:35:08.910
like painting a picture.

00:35:08.910 --> 00:35:09.990
You add some [? gesso ?]

00:35:09.990 --> 00:35:12.550
and some color and pretty soon
you have mountains and trees

00:35:12.550 --> 00:35:14.350
and airplanes and things
like that.

00:35:14.350 --> 00:35:18.570
In order to get depth of field
in a painting, you paint over

00:35:18.570 --> 00:35:21.010
the top of other things and
that gives you that depth.

00:35:21.010 --> 00:35:25.260
Well in the UiApp, when we add
things to the UiApp, they add

00:35:25.260 --> 00:35:27.700
in the order that they were
placed on the page.

00:35:27.700 --> 00:35:31.630
So they stack to the
lowest point.

00:35:31.630 --> 00:35:33.750
Here we've added a couple
of grids to the

00:35:33.750 --> 00:35:35.300
page that have stacked.

00:35:35.300 --> 00:35:38.910
And what we can do next
is we can add in--

00:35:38.910 --> 00:35:40.720
and you'll be able to do
this obviously, in the

00:35:40.720 --> 00:35:42.910
GUI editor as well.

00:35:42.910 --> 00:35:48.090
So we can add elements to each
cell within a grid and create,

00:35:48.090 --> 00:35:52.640
basically a traditional table or
div type web page like you

00:35:52.640 --> 00:35:53.890
would traditionally do.

00:36:00.320 --> 00:36:02.245
What we'd like to do now is I'd
like to show you a little

00:36:02.245 --> 00:36:04.820
bit about how you can
use CSS to position

00:36:04.820 --> 00:36:07.420
objects on the page.

00:36:07.420 --> 00:36:13.900
And we use the position fixed
to set items above the page,

00:36:13.900 --> 00:36:15.480
so that we can move them.

00:36:15.480 --> 00:36:18.370
The problem with that is
directly in our code, when we

00:36:18.370 --> 00:36:23.460
start applying attributes, you
have to write an attribute for

00:36:23.460 --> 00:36:27.930
every single widget that
you want to use.

00:36:27.930 --> 00:36:29.150
And that gets really messy.

00:36:29.150 --> 00:36:33.470
So you can do that by using
a function that will cycle

00:36:33.470 --> 00:36:37.780
through-- you create the CSS
just as you normally would.

00:36:37.780 --> 00:36:39.860
Write CSS in an HTML page.

00:36:39.860 --> 00:36:45.130
And you use a function to apply
that to whatever widget

00:36:45.130 --> 00:36:46.000
you happen to want.

00:36:46.000 --> 00:36:49.400
So here we have a function
that will apply a given

00:36:49.400 --> 00:36:52.360
element there.

00:36:52.360 --> 00:36:55.020
So to make Andy move, what we're
going to do first is

00:36:55.020 --> 00:37:00.810
we're going to set some x-,
y-coordinates in the script

00:37:00.810 --> 00:37:01.870
properties.

00:37:01.870 --> 00:37:05.780
That way we can access that
property from anywhere in the

00:37:05.780 --> 00:37:10.420
script by just calling it
by, say, Get property x.

00:37:13.350 --> 00:37:15.210
Once we've set those positions,
then we can give

00:37:15.210 --> 00:37:19.120
Andy a starting position by
using, like I had said before,

00:37:19.120 --> 00:37:24.920
we use the function, or we set
a CSS element, the atAndy

00:37:24.920 --> 00:37:29.320
element, and give
him a position.

00:37:29.320 --> 00:37:34.430
Then we can create the atAndy
image and apply the CSS, and

00:37:34.430 --> 00:37:37.560
then he'll be in his
starting position.

00:37:37.560 --> 00:37:39.496
To make him move we're going to
need a couple of buttons.

00:37:42.490 --> 00:37:45.155
First we're going to create the
button, then we're going

00:37:45.155 --> 00:37:47.530
to attach a click handler to
it that's going to fire off

00:37:47.530 --> 00:37:50.720
the function move, and we're
going to set the idea of each

00:37:50.720 --> 00:37:53.530
button to be the direction
that it's going to press.

00:37:56.310 --> 00:37:58.130
Here's the move function.

00:37:58.130 --> 00:38:00.540
And the first thing we do in
the move function is we're

00:38:00.540 --> 00:38:03.120
going to get where Andy's
currently at by

00:38:03.120 --> 00:38:04.460
using the get property.

00:38:04.460 --> 00:38:06.440
We're going to set x and y.

00:38:06.440 --> 00:38:08.470
And then we're going to run
through a series of if

00:38:08.470 --> 00:38:11.050
statements where we're going
to check the e parameter

00:38:11.050 --> 00:38:16.090
source to find out which
button was pressed.

00:38:16.090 --> 00:38:18.840
And we're also going to use an
additional if that if Andy

00:38:18.840 --> 00:38:21.900
happen to be at the side or the
top or the bottom, that

00:38:21.900 --> 00:38:23.650
he's going to stop and it's
just going to return the

00:38:23.650 --> 00:38:23.800
[INAUDIBLE]

00:38:23.800 --> 00:38:25.580
directly.

00:38:25.580 --> 00:38:27.876
Once we know which button's been
pressed, then it's just a

00:38:27.876 --> 00:38:31.970
simple matter of incrementing or
decrementing the property.

00:38:31.970 --> 00:38:37.160
And then we'll apply the CSS
like we did before when we set

00:38:37.160 --> 00:38:38.410
his original start position.

00:38:40.780 --> 00:38:43.240
That's it.

00:38:43.240 --> 00:38:45.140
COREY GOLDFEDER: So
let me recap.

00:38:45.140 --> 00:38:46.430
Once again, this is Bob.

00:38:46.430 --> 00:38:48.890
And now Bob is really happy
because not only is he helping

00:38:48.890 --> 00:38:53.070
people, he's not wasting
any time doing it.

00:38:53.070 --> 00:38:56.110
Today we built Bob's mortgage
calculator using the brand new

00:38:56.110 --> 00:38:58.890
GUI Builder that like I said,
is available today.

00:38:58.890 --> 00:39:01.490
We were able to build a full
app, as well as a spreadsheet

00:39:01.490 --> 00:39:03.560
calculator add-in.

00:39:03.560 --> 00:39:07.610
And we deployed it as a service
and to the gallery.

00:39:07.610 --> 00:39:09.460
We also showed you the new
Gmail service, which is

00:39:09.460 --> 00:39:12.176
launching in the next
day or two.

00:39:12.176 --> 00:39:14.760
Which is just as simple
as using Gmail itself.

00:39:14.760 --> 00:39:17.580
And finally, we showed you
the document service.

00:39:17.580 --> 00:39:22.020
Which finally has an API for
scripting Google Documents.

00:39:22.020 --> 00:39:23.930
I keep saying finally, but we
have a lot more actually

00:39:23.930 --> 00:39:25.790
because we showed you blobs.

00:39:25.790 --> 00:39:27.340
Don't overthink it,
it will just work.

00:39:27.340 --> 00:39:30.600
Take objects, attachments from
sites, attachments from Gmail,

00:39:30.600 --> 00:39:32.930
post them directly to your
DocList. Don't worry about the

00:39:32.930 --> 00:39:35.520
type of the object,
it will just work.

00:39:35.520 --> 00:39:36.600
And conversions.

00:39:36.600 --> 00:39:38.590
Some simple cases like Google
Documents to PDF

00:39:38.590 --> 00:39:40.100
were covered today.

00:39:40.100 --> 00:39:43.100
Stay tuned for more and
interesting ones.

00:39:43.100 --> 00:39:45.900
Finally, James was kind enough
to show us Andy App and some

00:39:45.900 --> 00:39:48.420
expert tips on how to use Google
Apps Script to do more

00:39:48.420 --> 00:39:51.190
than just boring data entry.

00:39:51.190 --> 00:39:53.500
So at this point, we'd like
to take questions.

00:39:53.500 --> 00:39:56.510
Drew, James, and I will answer
any questions you have about

00:39:56.510 --> 00:40:00.078
what we showed you today.

00:40:00.078 --> 00:40:01.328
[APPLAUSE]

00:40:16.512 --> 00:40:19.106
AUDIENCE: They don't want
to hear the question.

00:40:19.106 --> 00:40:21.210
JAMES FERREIRA: We
can hear you.

00:40:21.210 --> 00:40:24.870
AUDIENCE: The question I have
about this new Gmail access

00:40:24.870 --> 00:40:28.310
service, which sounds
really exciting is,

00:40:28.310 --> 00:40:30.530
will this allow me--

00:40:30.530 --> 00:40:34.450
it wasn't clear to me how the
user is authenticated.

00:40:34.450 --> 00:40:38.435
You say this actually uses the
context like, for example, if

00:40:38.435 --> 00:40:41.300
I'm trying to access the context
of a user, do we have

00:40:41.300 --> 00:40:43.520
to use OATH or something
else like that to

00:40:43.520 --> 00:40:44.340
authenticate the user?

00:40:44.340 --> 00:40:47.370
JAMES FERREIRA: If you've used
like the contacts apps

00:40:47.370 --> 00:40:49.990
interface or the calendar app.

00:40:49.990 --> 00:40:51.600
You know how you get the auth
screen when you run it the

00:40:51.600 --> 00:40:52.490
first time?

00:40:52.490 --> 00:40:53.590
It's the same kind of thing.

00:40:53.590 --> 00:40:54.080
AUDIENCE: So it will be the
same thing for that?

00:40:54.080 --> 00:40:54.950
JAMES FERREIRA: Exactly
the same thing.

00:40:54.950 --> 00:40:56.250
COREY GOLDFEDER: Yeah, we
do the auth for you.

00:40:56.250 --> 00:40:59.475
So all you need to do is click
OK, I want to authorize this

00:40:59.475 --> 00:41:00.320
and it will work.

00:41:00.320 --> 00:41:00.790
AUDIENCE: OK.

00:41:00.790 --> 00:41:03.910
So sounds like it's a dramatic
simplification in terms of

00:41:03.910 --> 00:41:06.030
setting that up for us.

00:41:06.030 --> 00:41:07.260
JAMES FERREIRA: That
was the idea.

00:41:07.260 --> 00:41:07.700
AUDIENCE: Yeah.

00:41:07.700 --> 00:41:08.020
Great.

00:41:08.020 --> 00:41:09.280
Thank you so much for
your work on this.

00:41:15.585 --> 00:41:16.740
AUDIENCE: Hi.

00:41:16.740 --> 00:41:18.770
Do you have any plans
to include search

00:41:18.770 --> 00:41:21.810
as one of the services?

00:41:21.810 --> 00:41:23.160
COREY GOLDFEDER: I don't think
we have anything to

00:41:23.160 --> 00:41:24.080
say about that now.

00:41:24.080 --> 00:41:26.140
I don't think anyone's currently
working on that.

00:41:26.140 --> 00:41:29.010
But can never rule anything
out in the future.

00:41:29.010 --> 00:41:30.260
AUDIENCE: OK.

00:41:32.130 --> 00:41:33.520
COREY GOLDFEDER: You can always
use existing APIs.

00:41:33.520 --> 00:41:37.580
So for example, any kind of
existing REST based API can be

00:41:37.580 --> 00:41:39.820
hit through URL fetch.

00:41:39.820 --> 00:41:41.120
AUDIENCE: I can't remember
from the

00:41:41.120 --> 00:41:42.700
slide about the Gmail.

00:41:42.700 --> 00:41:45.645
Does it access as well
the contact and the

00:41:45.645 --> 00:41:46.510
group in the contact?

00:41:46.510 --> 00:41:49.590
Like if you say, want to do a
mailing to a group in your

00:41:49.590 --> 00:41:52.410
contact, can you do that?

00:41:52.410 --> 00:41:53.700
COREY GOLDFEDER: You can access
contacts through the

00:41:53.700 --> 00:41:55.540
existing contacts apps.

00:41:55.540 --> 00:41:59.300
So the new Gmail app doesn't
support that because we

00:41:59.300 --> 00:42:00.790
already have that support.

00:42:00.790 --> 00:42:03.290
But it's there.

00:42:03.290 --> 00:42:04.780
AUDIENCE: OK, but you can't--

00:42:04.780 --> 00:42:06.515
can't you do like the example
you had with the document

00:42:06.515 --> 00:42:10.860
where you send to people--
where you place--

00:42:10.860 --> 00:42:13.664
Let's say you have a group
in your contact and your

00:42:13.664 --> 00:42:15.960
[UNINTELLIGIBLE PHRASE]

00:42:15.960 --> 00:42:20.394
and they want to use that
template in their doc to send

00:42:20.394 --> 00:42:23.850
the same email with the PDF
attached to a group of people

00:42:23.850 --> 00:42:27.350
replacing just the
[INAUDIBLE].

00:42:27.350 --> 00:42:28.650
JAMES FERREIRA: You have a
contacts groups in your

00:42:28.650 --> 00:42:29.670
contacts that you want
to be able to--

00:42:29.670 --> 00:42:31.520
AUDIENCE: Yeah, you have
a group you want to--

00:42:31.520 --> 00:42:32.940
JAMES FERREIRA: Within the
contacts app, there's actually

00:42:32.940 --> 00:42:36.380
a way to say get me this
particular contact group and

00:42:36.380 --> 00:42:38.660
then get the email addresses
out of there.

00:42:38.660 --> 00:42:40.540
So from there, yeah, you'd have
the list of emails and

00:42:40.540 --> 00:42:42.690
then you just do the
message.reply like we did

00:42:42.690 --> 00:42:43.910
before, just with a list--

00:42:43.910 --> 00:42:45.880
with an array of
email addresses

00:42:45.880 --> 00:42:47.490
instead of the lone one.

00:42:52.620 --> 00:42:54.680
AUDIENCE: So I saw the
search in Gmail.

00:42:54.680 --> 00:42:56.520
I didn't see one in Docs.

00:42:56.520 --> 00:43:00.100
Is there a search function
inside of the documents now?

00:43:00.100 --> 00:43:01.430
COREY GOLDFEDER: Yeah,
it's called Find.

00:43:01.430 --> 00:43:02.680
It's docList.Find.

00:43:02.680 --> 00:43:03.010
It's there.

00:43:03.010 --> 00:43:04.792
We actually showed it in
one of the slides.

00:43:04.792 --> 00:43:05.756
AUDIENCE: Oh, I missed it.

00:43:05.756 --> 00:43:07.690
Sorry.

00:43:07.690 --> 00:43:08.250
COREY GOLDFEDER: I'm sorry.

00:43:08.250 --> 00:43:09.690
Are you asking about in the
DocsList or in the new

00:43:09.690 --> 00:43:11.830
document app?

00:43:11.830 --> 00:43:12.680
AUDIENCE: If you had
a new document.

00:43:12.680 --> 00:43:14.560
I guess if you have DocsList
you can find by--

00:43:14.560 --> 00:43:15.970
I didn't think about that.

00:43:15.970 --> 00:43:19.200
So you said document open
by ID basically, right?

00:43:19.200 --> 00:43:21.510
JAMES FERREIRA: Yeah, it was
document open by ID.

00:43:21.510 --> 00:43:23.390
Going through the DocsList,
you can search by name.

00:43:29.180 --> 00:43:30.380
AUDIENCE: Hi.

00:43:30.380 --> 00:43:34.165
The document creation and
updating features that you are

00:43:34.165 --> 00:43:39.030
just showing, is there an API
doing the same thing?

00:43:39.030 --> 00:43:42.420
Or do you plan to do this?

00:43:42.420 --> 00:43:44.030
JAMES FERREIRA: I don't think
I understand the question.

00:43:44.030 --> 00:43:44.990
I'm sorry.

00:43:44.990 --> 00:43:48.610
AUDIENCE: Here we are using
Google Script to create a

00:43:48.610 --> 00:43:53.460
document and to add
some custom data.

00:43:53.460 --> 00:44:00.650
But on GData API for external
application, we can't do this.

00:44:00.650 --> 00:44:05.280
So is there a plan to add the
possibility to create and

00:44:05.280 --> 00:44:09.420
update documents from an
external application?

00:44:09.420 --> 00:44:10.250
COREY GOLDFEDER:
We don't know.

00:44:10.250 --> 00:44:11.550
We're not on that team.

00:44:11.550 --> 00:44:12.390
JAMES FERREIRA: Yeah.

00:44:12.390 --> 00:44:15.910
We're just providing the glue
as far as that goes.

00:44:15.910 --> 00:44:17.880
The Docs people would
be a better people

00:44:17.880 --> 00:44:19.360
to ask about that.

00:44:19.360 --> 00:44:20.610
AUDIENCE: OK, thank you.

00:44:24.260 --> 00:44:28.320
AUDIENCE: Hi, I understand now
we can add an image to a

00:44:28.320 --> 00:44:31.090
Google spreadsheet.

00:44:31.090 --> 00:44:33.250
COREY GOLDFEDER: In general,
you mean, in spreadsheets?

00:44:33.250 --> 00:44:35.830
AUDIENCE: Is it possible to
assess the image using Google

00:44:35.830 --> 00:44:38.846
Apps Script?

00:44:38.846 --> 00:44:39.840
COREY GOLDFEDER:
I don't believe

00:44:39.840 --> 00:44:41.860
it's currently possible.

00:44:41.860 --> 00:44:43.630
We try to catch up with
spreadsheet features

00:44:43.630 --> 00:44:44.830
as they come in.

00:44:44.830 --> 00:44:49.740
So we will probably add
that as we go on.

00:44:49.740 --> 00:44:51.530
I do not think that's
currently possible.

00:44:51.530 --> 00:44:53.210
JAMES FERREIRA: I don't remember
seeing it in the API

00:44:53.210 --> 00:44:55.100
just yet, but we can
look into it.

00:44:59.240 --> 00:45:02.785
COREY GOLDFEDER: OK, are there
any more questions?

00:45:02.785 --> 00:45:06.070
Going once, going twice.

00:45:06.070 --> 00:45:06.990
OK, thank everyone very much.

00:45:06.990 --> 00:45:08.240
[APPLAUSE]

