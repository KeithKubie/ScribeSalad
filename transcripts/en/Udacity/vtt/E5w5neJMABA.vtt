WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:03.180
Building a Java project doesn't
seem too bad at first glance.

00:00:03.180 --> 00:00:07.520
You just call Java C on your source
files and it spits out some class files.

00:00:07.520 --> 00:00:10.860
You can also copy over resources
like images and strings.

00:00:10.860 --> 00:00:14.470
For distribution, you can Jar up
your class files and resources and

00:00:14.470 --> 00:00:15.940
you're done, right?

00:00:15.940 --> 00:00:19.320
Well, you might also want to
generate some documentation.

00:00:19.320 --> 00:00:21.910
Running some unit tests probably sounds
like it would be a good idea as well.

00:00:21.910 --> 00:00:25.440
If you're getting really serious, you
might even want to run multiple sets of

00:00:25.440 --> 00:00:28.120
unit tests,
including integration acceptance tests.

00:00:28.120 --> 00:00:30.390
Then, assuming those tests pass,

00:00:30.390 --> 00:00:33.460
you might want to deploy
your Jar to a repository.

00:00:33.460 --> 00:00:36.340
This is starting to sound like its
a lot of work to do by hand, but

00:00:36.340 --> 00:00:37.950
not impossible, right?

00:00:37.950 --> 00:00:40.940
Or you could write a shell script
that would automate this process.

00:00:40.940 --> 00:00:42.540
It'd be messy but it's doable.

00:00:43.660 --> 00:00:46.030
Android apps on the other
hand are beasts.

00:00:46.030 --> 00:00:48.935
The Java source isn't compiled
as standard Java byte code, but

00:00:48.935 --> 00:00:51.370
to custom byte code for
the Android run time.

00:00:51.370 --> 00:00:53.400
Android has three different
types of resources that

00:00:53.400 --> 00:00:55.230
all get packaged differently.

00:00:55.230 --> 00:00:58.480
There's an additional wrinkle in that
the resources that you define need

00:00:58.480 --> 00:01:02.530
to be pooled together with resources
coming from your included libraries.

00:01:02.530 --> 00:01:05.850
And the identifiers of all those
resources need to be known beforehand,

00:01:05.850 --> 00:01:08.130
before anything else gets compiled.

00:01:08.130 --> 00:01:11.010
Also, Android apps most be
cryptographically signed.

00:01:11.010 --> 00:01:13.479
When you put all that together,
it looks something like this.

00:01:14.540 --> 00:01:17.740
Now, considering you might want to build
both Debug and Release versions of your

00:01:17.740 --> 00:01:21.990
app, you might also want to
build free and paid variance.

00:01:21.990 --> 00:01:22.740
The point is,

00:01:22.740 --> 00:01:26.300
is that the process of building Android
app is not something we can do by hand.

00:01:26.300 --> 00:01:28.380
It's not even something that
we can do in a shell script.

00:01:28.380 --> 00:01:30.740
We need a more robust solution.

00:01:30.740 --> 00:01:32.940
That solution comes to Android
in the form of Gradle.

