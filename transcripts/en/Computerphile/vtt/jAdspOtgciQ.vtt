WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.460
Bell Labs got its first actual laser
printer in 1982, which I think was from a

00:00:05.460 --> 00:00:09.870
company called Imagen. Now in those days
yet you could get them but the big

00:00:09.870 --> 00:00:18.660
problem - the big big problem - was fonts. It
wasn't by any means impossible to get

00:00:18.660 --> 00:00:24.240
laser-printer technology - at lower
resolution than the Omnitech was doing

00:00:24.240 --> 00:00:30.380
[and] more reliable, in Nottingham and we
asked for a price, I think, for an Imagen

00:00:30.380 --> 00:00:36.540
early laser printer and we were told it
would be $18,000 in the UK, which would

00:00:36.540 --> 00:00:40.590
have translated to about 15,000 pounds.
It was ridiculously expensive. If you're

00:00:40.590 --> 00:00:46.559
getting to lower resolutions, like 300
dots per inch, what then happens is that

00:00:46.559 --> 00:00:52.440
your eyes are sensitive enough to notice
roughnesses on the edge of the character.

00:00:52.440 --> 00:00:59.670
In other words the pixel density of 300
dpi is such that if something goes wrong,

00:00:59.670 --> 00:01:05.250
in terms of the pattern of pixels, and
you get a fault at the edge of the

00:01:05.250 --> 00:01:11.700
character your eyes notice it. At 972 dpi
they probably wouldn't notice at all.

00:01:11.700 --> 00:01:15.600
So, the burning question was: "How can we do this

00:01:15.600 --> 00:01:20.189
rounding problem, if you like. We've got
these beautiful outlines; we need to

00:01:20.189 --> 00:01:24.869
translate them into dot patterns. How do
you work out which pixels to turn on,

00:01:24.869 --> 00:01:30.060
which to turn off. And if you've got half
a pixel, by the time you've done your

00:01:30.060 --> 00:01:34.200
calculations, do you turn it on or do you
turn it off? And, of course, you can

00:01:34.200 --> 00:01:40.860
imagine what happens. It looks bad if you
didn't turn that pixel on; it looks even

00:01:40.860 --> 00:01:47.100
worse if you did turn it on! You just
couldn't win. It was a huge problem and

00:01:47.100 --> 00:01:51.149
within the industry there was the most
ferocious debate  within Xerox,

00:01:51.149 --> 00:01:56.700
Canon, wherever. And even - many of you
know - the computer scientist who got

00:01:56.700 --> 00:02:00.630
involved, around about this time, with
typesetting: Don Knuth. And the

00:02:00.630 --> 00:02:06.530
consensus was that down at low
resolution you just had to have

00:02:06.530 --> 00:02:12.150
hand-tuned bitmap fonts, with all the
pixels put in place correctly. There was

00:02:12.150 --> 00:02:14.940
no shortcut. There was no way that you 
could, if you like,

00:02:14.940 --> 00:02:23.730
on-the-fly, scale down from outlines
to dots on a drum and get it right automatically.

00:02:23.730 --> 00:02:28.650
Hand tuning was the way forward. Well if 
that was the case it was

00:02:28.650 --> 00:02:33.120
a real mess. Because it meant that your
laser printer had to be backed up with

00:02:33.120 --> 00:02:38.940
an expensive hard disk, or cartridge,
system. And some commenters already, on

00:02:38.940 --> 00:02:43.410
the Jailbreak [202-system video] who have used 
these,  say what a nightmare it was. You had a very

00:02:43.410 --> 00:02:47.940
restricted range of fonts. They never
seemed to work correctly and that whole

00:02:47.940 --> 00:02:52.350
disk, instead of a holding 50 or 60
different typefaces, was devoted to

00:02:52.350 --> 00:02:59.040
holding Times Roman hand-tuned in about
40 usable point sizes. Stuff like that.

00:02:59.040 --> 00:03:04.860
The thing that kept us going though - the
rumours on the horizon if you like - were

00:03:04.860 --> 00:03:14.310
that two people, working for Xerox PARC,
called Warnock and Geschke, were about to

00:03:14.310 --> 00:03:20.790
leave Xerox PARC and form a new company
called Adobe. Now, the moment you say Xerox

00:03:20.790 --> 00:03:26.150
PARC you start thinking: "We need a
complete new video just on that alone".

00:03:26.150 --> 00:03:33.180
PARC --  Palo Alto Research Center
If Bell Labs was the one place that

00:03:33.180 --> 00:03:39.530
everybody wanted to work at in the 1970s
then Xerox PARC was certainly the other.

00:03:39.530 --> 00:03:45.030
And there was a similar background in
some ways. Bell Labs had lots and

00:03:45.030 --> 00:03:52.350
lots of money, because of AT&amp;T, but of
course they were under consistent

00:03:52.350 --> 00:03:58.170
scrutiny for "monopolistic practices"
and don't you ever dare turn yourselves

00:03:58.170 --> 00:04:02.639
into a computer company - it wouldn't be
allowed. Xerox probably didn't have quite

00:04:02.639 --> 00:04:06.600
as much money as Bell Labs but
nevertheless, even today, Xerox I

00:04:06.600 --> 00:04:11.250
think, turns over about twenty billion
dollars a year. So, they could afford a

00:04:11.250 --> 00:04:17.120
vanity project and they did. The Xerox
Palo Alto Research Center was run off

00:04:17.120 --> 00:04:22.380
the Xerox publicity budget! That's how
much money

00:04:22.380 --> 00:04:28.300
Xerox were making. And they still do make,
just out of being a photocopier company. But at

00:04:28.300 --> 00:04:35.590
Xerox PARC they invented - either invented
or had a very strong development role - in

00:04:35.590 --> 00:04:40.690
all sorts of things that are now
commonplace. The computer mouse; the laser

00:04:40.690 --> 00:04:46.090
printer; bitmapped terminals - which we
take for granted nowadays - but if you

00:04:46.090 --> 00:04:50.440
skip back to my earlier video on "From
Mainframes to Unix", just take a look at

00:04:50.440 --> 00:04:54.760
what the old character terminals used to
be like. Sort of cells of dots - about

00:04:54.760 --> 00:04:58.479
9 x 9,  with the characters in. You
certainly couldn't get down to the bit

00:04:58.479 --> 00:05:03.790
level on your screen - but with bitmapped
terminals you could. They had under

00:05:03.790 --> 00:05:08.500
development at Xerox PARC things with
names like Alto and Dorado, bitmap

00:05:08.500 --> 00:05:13.780
terminals, Wonderful! And they had Bob
Metcalfe there. They were crucially

00:05:13.780 --> 00:05:18.280
involved in the development of Ethernet.
They had it all. They had all the

00:05:18.280 --> 00:05:23.530
necessary components to pioneer the next
stage of computing. If you like, the

00:05:23.530 --> 00:05:28.780
workstation revolution. But in a book, I
think, called "Fumbling the Future" the

00:05:28.780 --> 00:05:33.010
author of that book makes the case that
they fumbled it - they let it all fall -

00:05:33.010 --> 00:05:36.910
they didn't market it and they could
have done. Well, to be fair to Xerox, at the

00:05:36.910 --> 00:05:41.200
time, you could argue they made the right
decision. Turning yourself into a

00:05:41.200 --> 00:05:45.450
computer company is hard to do, if you're
not a computer company already.

00:05:45.450 --> 00:05:51.940
And wonderful though their technology was, it
was reckoned at the time that the cost

00:05:51.940 --> 00:05:58.570
of the components alone, in mid-1970s
money, to make an Alto terminal - the

00:05:58.570 --> 00:06:03.070
components alone would have cost $10,000.
If they were mad enough

00:06:03.070 --> 00:06:07.169
to go into marketing the thing they
would have had to charge at least

00:06:07.169 --> 00:06:12.760
$25,000, in 1975 money, probably about 
$250,000 in

00:06:12.760 --> 00:06:18.400
today's money. So, you could say, in a
sense, they had to wait for the cost of

00:06:18.400 --> 00:06:22.720
the technology to come down. And they had
to accept that all these toys were very,

00:06:22.720 --> 00:06:27.940
very expensive indeed. Now the only
problem was, with sitting on, and

00:06:27.940 --> 00:06:32.229
developing, all this wonderful technology
was that the hot-shot computer scientists

00:06:32.229 --> 00:06:36.420
you've got working for you, got very
frustrated that their wonderful

00:06:36.420 --> 00:06:42.870
inventions, and developments, were not
being marketed. And so, gradually, as the

00:06:42.870 --> 00:06:47.010
70s wore on into the 80s, people
began to leave and to form their own

00:06:47.010 --> 00:06:51.870
startups. Chuck Geschke, John Warnock,
both considerable computer scientists in

00:06:51.870 --> 00:06:57.930
their own right, were working on Xerox's
Interpress language and just got so

00:06:57.930 --> 00:07:04.950
frustrated with Xerox's inability - a lack
of will to market this properly - that

00:07:04.950 --> 00:07:11.400
they upped sticks, left, and formed Adobe.
Which you've all heard of, in late 1982.

00:07:11.400 --> 00:07:14.610
I think they initially decided that they
were going to go for the high-end

00:07:14.610 --> 00:07:20.550
typesetting market. Soon after they left
and founded Adobe, John Warnock got to

00:07:20.550 --> 00:07:25.500
work on a language that's achieved great
fame ever since, called PostScript.

00:07:25.500 --> 00:07:30.060
I think it very carefully avoided the
precise way that Interpress had done

00:07:30.060 --> 00:07:34.680
things, and it reverted back to lots of
John's earlier work, because he was a

00:07:34.680 --> 00:07:39.390
computer graphics specialist, who came
out of the University of Utah, and also

00:07:39.390 --> 00:07:43.380
worked for the graphics company called
Evans &amp; Sutherland. And in his

00:07:43.380 --> 00:07:49.590
PhD he solved the infamous hidden
surface problem which had defied

00:07:49.590 --> 00:07:55.140
efficient solution for quite some time. I
think I've already told you, in the video

00:07:55.140 --> 00:08:00.420
I did about David Huffman and Huffman
trees - his PhD thesis was 12 pages.

00:08:00.420 --> 00:08:07.200
I think John told me that his PhD thesis,
about solving the hidden surface problem,

00:08:07.200 --> 00:08:13.260
was a little bit bigger -  all of 32 pages.
So here was this computer scientist - a

00:08:13.260 --> 00:08:18.900
computer graphics expert - joined up with
another considerable computer scientist,

00:08:18.900 --> 00:08:22.620
Chuck Geschke - it was the ideal
combination to found this new company.

00:08:22.620 --> 00:08:28.230
John came up with this language called
PostScript, which was going to be a tour

00:08:28.230 --> 00:08:33.540
de force of two-dimensional graphics and
it was. And, more to the point, he was

00:08:33.540 --> 00:08:39.630
going to get to grips with solving this
problem of how to make fonts look good

00:08:39.630 --> 00:08:45.750
at low resolutions. You want to hold the
outline of the font as arcs, splines,

00:08:45.750 --> 00:08:49.800
lines, whatever, for as long as possible. But, in the

00:08:49.800 --> 00:08:56.190
end, it has got to get down to being
pixels. It's got to be dots on a laser

00:08:56.190 --> 00:08:59.850
printer drum. And, in fact, there's some
other stuff of course. John Chapman's

00:08:59.850 --> 00:09:04.680
videos on "Computerphile are so relevant to
this. You really ought to watch them. So

00:09:04.680 --> 00:09:10.199
here's some more detail which relates to
that. Oh! by the way, thanks to Fontographer

00:09:10.199 --> 00:09:15.209
those of you want to know how I did
the so-called PrintOut font, in the

00:09:15.209 --> 00:09:18.600
"Jailbreak" video,
I think the papers that we Web-link to

00:09:18.600 --> 00:09:23.040
make this clear but anyway, I used
Fontographer and within the Fontographer

00:09:23.040 --> 00:09:28.500
manual, there is a very useful pair
of pages which makes very clear this

00:09:28.500 --> 00:09:33.889
difficulty with getting characters to
look good on a coarse resolution.

00:09:33.889 --> 00:09:40.279
Consider a letter H. Here's the outline
superimposed on top of a grid of pixels.

00:09:40.279 --> 00:09:47.790
Now, how do you decide which pixels of
these vertical stems are to be colored in?

00:09:47.790 --> 00:09:53.579
If you follow the argument that a pixel
should be made black only if it's

00:09:53.579 --> 00:10:01.230
totally within the outline, then if your
outline isn't quite as helpfully aligned

00:10:01.230 --> 00:10:05.790
with the pixels as it might be, this is
what you end up with. On the left hand

00:10:05.790 --> 00:10:11.279
side the only ones that are totally
within the outline is a single column,

00:10:11.279 --> 00:10:15.540
whereas on this [right] side there's two columns.
If you back off, take away the grid of

00:10:15.540 --> 00:10:20.370
pixels at the back, and look at what the
character looks like - it's awful. Y'know,

00:10:20.370 --> 00:10:26.130
you've got uneven stem widths. And do
notice in these, of course, the crossbar

00:10:26.130 --> 00:10:31.680
is gone [missing] on the H. Isn't that wonderful?! Of
course it would go - it's so thin, in that

00:10:31.680 --> 00:10:36.990
design, it's been rounded
down and it's vanished completely. Here's

00:10:36.990 --> 00:10:42.120
another thing. Even if you could solve
that, these 'flicky bits', as we know, are

00:10:42.120 --> 00:10:45.329
the tops and bottoms of characters. I
think probably everybody knows they

00:10:45.329 --> 00:10:50.459
are called 'serifs'. Well you'll need your serifs
to look good as well. And, if you're not

00:10:50.459 --> 00:10:54.540
careful, you can end up with the stems
getting better and more equal

00:10:54.540 --> 00:10:58.890
but the serifs having no symmetry
whatsoever, even though they're supposed

00:10:58.890 --> 00:11:02.430
to be the same shape.
The precise way they align with the

00:11:02.430 --> 00:11:07.050
grid underneath is such that they don't
look symmetrical anymore, whereas they

00:11:07.050 --> 00:11:13.529
were in the first instance. And then you
can say: "Oh! could we solve all of this by

00:11:13.529 --> 00:11:18.930
saying: well tell you what, we'll turn the
pixel on if any part of it touches the

00:11:18.930 --> 00:11:25.589
outline, however glancing, if you like, the
impact is between the pixels and the

00:11:25.589 --> 00:11:30.360
outline. If it's at all remotely touching
turn it on". And that's the kind of mess

00:11:30.360 --> 00:11:35.759
you end up with if you do that. So, what
you needed was a system of what came to

00:11:35.759 --> 00:11:41.910
be known as 'hints'. On the diagrams here,
for the letter M, hints show all the

00:11:41.910 --> 00:11:49.949
places in which the Adobe Type 1 font
system actually said mattered. 

00:11:49.949 --> 00:11:53.040
Hints about the serifs, these are important,
take care.

00:11:53.040 --> 00:11:57.990
Hints about horizontal lines like on the
H, don't round it down and don't have

00:11:57.990 --> 00:12:03.470
it disappear altogether. Within the font
mechanism it was, basically, when you are

00:12:03.470 --> 00:12:10.230
scaling down the outline and as John
Chapman's videos will also show you, in the

00:12:10.230 --> 00:12:15.779
end, although you can delay doing a
straight line approximation to curves, in

00:12:15.779 --> 00:12:20.519
the end that's what you do. You end up
with triangles and polygons, OK? And then

00:12:20.519 --> 00:12:24.089
those triangles and polygons, you work
out where they intersect with the

00:12:24.089 --> 00:12:29.459
underlying pixels, and so on so. Late on
in the process - and this is the advantage

00:12:29.459 --> 00:12:35.009
of this more modern approach compared to
the 202, rather faster processors, you can

00:12:35.009 --> 00:12:40.529
leave the - as it were - translation into
straight line approximations and pixels

00:12:40.529 --> 00:12:45.180
until the latest possible moment, thereby
giving yourself flexibility. Now this

00:12:45.180 --> 00:12:50.160
shows you this is Linotype 202
resolution up at the top. That is the

00:12:50.160 --> 00:12:55.050
base, I think, of a stem of a letter H, or
I, or something like that at something

00:12:55.050 --> 00:13:00.809
more like 970 dots per inch, and you see there's
no problem. If you back off from that your

00:13:00.809 --> 00:13:04.740
eyes are probably not sensitive enough
to notice the odd pixel that's gone

00:13:04.740 --> 00:13:09.509
astray but down at 300 dpi they
certainly will. And, of course, the problem

00:13:09.509 --> 00:13:14.730
manifests itself hugely at 300 dpi 
if you have small point sizes, like

00:13:14.730 --> 00:13:18.180
6-point or 8-point. You end up, if
you're not careful, with everything

00:13:18.180 --> 00:13:22.380
looking just like a full stop because
there's been so many errors, So, this is

00:13:22.380 --> 00:13:27.900
why you need these hints. You need stem
hints; you need serif hints; you need

00:13:27.900 --> 00:13:33.030
hints to stop horizontal things
vanishing altogether, due to rounding

00:13:33.030 --> 00:13:38.220
down. John Warnock was the recipient of a
very prestigious medal called the Lovelace

00:13:38.220 --> 00:13:46.590
Medal [from the BCS] and my friend, Conrad Taylor, 
has done a report on that talk, which he is

00:13:46.590 --> 00:13:54.480
happy for us to use. And in Conrad's
report you will see that John Warnock

00:13:54.480 --> 00:13:59.940
actually admitted - 20 years after the
event - that there was another dirty trick

00:13:59.940 --> 00:14:04.920
that they did as well as, if you like, as
part of the hint that they didn't let on

00:14:04.920 --> 00:14:11.430
about. If you look back at this diagram
here and how it translates to turned on

00:14:11.430 --> 00:14:17.130
pixels here, although we will enrage the
type designers there is a way that you

00:14:17.130 --> 00:14:21.960
can help yourself here. Type designers
like calling the gap to the left of a

00:14:21.960 --> 00:14:25.830
character the 'left side-bearing' and the
gap at the right of the character the

00:14:25.830 --> 00:14:29.880
'right side-bearing'. Now, if you look
carefully, the left side-bearing here is

00:14:29.880 --> 00:14:34.800
absolutely wider than the right side
there. This is part of the design. You

00:14:34.800 --> 00:14:40.370
position your character within the cell,
so it looks right in all combinations

00:14:40.370 --> 00:14:46.260
with all other characters and even in a
fixed-width font - like PrintOut of the

00:14:46.260 --> 00:14:50.960
previous [Jailbreak] video - you found that 
left or right side-bearings are still not equal. Yeah!

00:14:50.960 --> 00:14:56.360
But what John and his Merry Men did in
their Type 1 renderer was to say:

00:14:56.360 --> 00:15:02.040
" ... actually although the designer will
kill us they probably won't notice if, at

00:15:02.040 --> 00:15:09.020
the very last minute we just shove the
letter H ever so slightly further left".

00:15:09.020 --> 00:15:16.800
OK? So that, instead of ending up with
a one-pixel line and a two-pixel line,

00:15:16.800 --> 00:15:23.370
you might end up with both of them being
one and a half, because you've made

00:15:23.370 --> 00:15:30.329
the alignment of the character against
the background grid be just much more

00:15:30.329 --> 00:15:34.380
sympathetic. And if it's one and a half
it doesn't matter whether you round both

00:15:34.380 --> 00:15:41.100
sides to 1, or round them up to 2. They are
at least going to be equal. OK ? That's

00:15:41.100 --> 00:15:46.139
going to help a lot. So, he actually
admitted in 2004 that it was not beyond

00:15:46.139 --> 00:15:51.779
them to ever-so subtly shift the
character, within its unit cell, to get a

00:15:51.779 --> 00:15:58.290
better alignment and a better result. So
that is, then, pretty well a summary of

00:15:58.290 --> 00:16:04.259
what had to be done, what had to be got
right with hinting before, if you like,

00:16:04.259 --> 00:16:09.240
quality fonts stood any hope of working
properly with laser printers. John

00:16:09.240 --> 00:16:13.860
Warnock put the PostScript language,
effectively, into the public domain and

00:16:13.860 --> 00:16:18.990
said: Go on - implement it! I want it to be a
standard". You know: "Implementation is the

00:16:18.990 --> 00:16:24.029
sincerest form of flattery" -  as one of the
first implementers said. But the story

00:16:24.029 --> 00:16:27.660
was this: you can use all the graphics
operators in PostScript, you could do a

00:16:27.660 --> 00:16:33.329
pretty acceptable font that way. But it
was what Adobe called, at the time, a Type

00:16:33.329 --> 00:16:39.810
3 font. It did not have these hints to
enable you to survive and make it look

00:16:39.810 --> 00:16:46.440
good down at very small point sizes, on
low resolution devices. If you wanted

00:16:46.440 --> 00:16:52.949
that then, back in ... from about 1985
to 1989, you had to sign a contract with

00:16:52.949 --> 00:16:58.470
Adobe to license their hinting
technology. And this was secret; this was

00:16:58.470 --> 00:17:02.639
one of the ways that Adobe, as a young
company, wanted to make money. They were

00:17:02.639 --> 00:17:06.000
selling PostScript implementations, of
course, to other printer manufacturers

00:17:06.000 --> 00:17:11.159
but there was a nice font revenue stream
from licensing people to put Type 1

00:17:11.159 --> 00:17:18.209
hints onto Adobe Type 1 fonts, So, there
we are then. There's another story to

00:17:18.209 --> 00:17:24.720
come here, but we'll get onto that later,
about how Adobe survived with that model

00:17:24.720 --> 00:17:29.400
for about four or five years. But
eventually Gates and Jobs were not going to

00:17:29.400 --> 00:17:34.080
pay endless royalties for Type 1 to John
Warnock, dearly though they loved him.

00:17:34.080 --> 00:17:39.779
And we could do a talk at some stage
about the emergence of TrueType out of

00:17:39.779 --> 00:17:46.169
that. But for the moment here's the story
then. You needed a laser printer equipped

00:17:46.169 --> 00:17:52.679
with PostScript but with PostScript plus
the ability to cope with Type 1 fonts

00:17:52.679 --> 00:17:59.010
and - do be clear - this hinting information,
things like: "...  these stems should be of the

00:17:59.010 --> 00:18:04.830
same width; that cross-bar on the H - don't
round it down and don't lose it! " This is

00:18:04.830 --> 00:18:10.980
used at the very last moment when you're
converting things into pixels on the

00:18:10.980 --> 00:18:15.510
imaging drum. And it's ultra, ultra
important that you get it right. But,

00:18:15.510 --> 00:18:22.169
effectively, John and his Merry Men with
PostScript and the hinting, had

00:18:22.169 --> 00:18:27.090
solved a problem which many people in
the industry said was insoluble. Y'know:

00:18:27.090 --> 00:18:32.610
" ... there isn't a way to take outlines and
round them down, to all point sizes, and

00:18:32.610 --> 00:18:36.389
make it look good".  Well, you might say
that some of the tricks that John did

00:18:36.389 --> 00:18:43.620
were compromises and were a little bit
short of perfection but frankly, even to

00:18:43.620 --> 00:18:48.059
type professionals, I don't know, if you
did an A and B [comparison]. You know, hand-tuned

00:18:48.059 --> 00:18:54.539
bitmap vs. what the Adobe Type 1
mechanism did with that H. OK, with a

00:18:54.539 --> 00:18:58.409
good microscope you notice the
difference but, for everyday use, no

00:18:58.409 --> 00:19:03.169
problem at all. The problem was solved essentially.

