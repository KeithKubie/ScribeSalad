WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:02.940
Okay.
So Michael, for the last 15 minutes or

00:00:02.940 --> 00:00:07.700
so we've been talking about decision
trees, sort of in the abstract without

00:00:07.700 --> 00:00:10.690
saying too much about the kinds of
functions they can actually represent.

00:00:10.690 --> 00:00:14.050
So, for the next few minutes or so I
want to talk a little bit about not just

00:00:14.050 --> 00:00:18.570
decision trees in the abstract, but
exactly how expressive they can be.

00:00:18.570 --> 00:00:19.460
Is that okay?
&gt;&gt; Yeah,

00:00:19.460 --> 00:00:21.280
I think that would be really helpful.

00:00:21.280 --> 00:00:21.980
&gt;&gt; I think so too.

00:00:21.980 --> 00:00:24.150
So in fact, I want to look
at a set of functions, and

00:00:24.150 --> 00:00:27.090
in particular I'm interested in
looking at Boolean functions.

00:00:28.450 --> 00:00:29.840
&gt;&gt; Boolean.

00:00:29.840 --> 00:00:32.240
&gt;&gt; So what's your favorite
simple Boolean function?

00:00:32.240 --> 00:00:33.170
&gt;&gt; Implication.

00:00:33.170 --> 00:00:35.250
&gt;&gt; What's your other favorite
simple boolean function?

00:00:35.250 --> 00:00:37.940
&gt;&gt; Well I like Nor.

00:00:37.940 --> 00:00:38.500
&gt;&gt; Right.
So what I

00:00:38.500 --> 00:00:41.190
just heard you say is you like And,
so let's do that one.

00:00:41.190 --> 00:00:41.800
&gt;&gt; Oh, that's great.

00:00:41.800 --> 00:00:42.530
That is my favorite.

00:00:43.570 --> 00:00:44.080
&gt;&gt; All right.

00:00:44.080 --> 00:00:45.800
So, in fact, let's do very simple And.

00:00:45.800 --> 00:00:47.250
So, how does And work, right?

00:00:47.250 --> 00:00:49.360
So, you've got two attributes.

00:00:49.360 --> 00:00:50.560
Let's say A and B.

00:00:51.850 --> 00:00:56.420
And, this expression,
A and B, is true when?

00:00:56.420 --> 00:00:57.600
&gt;&gt; When A and B are true.

00:00:57.600 --> 00:00:59.861
When they are both
true at the same time.

00:00:59.861 --> 00:01:00.661
&gt;&gt; Right, exactly.

00:01:00.661 --> 00:01:03.346
So, how would you build a decision tree,

00:01:03.346 --> 00:01:09.250
given that there are only two attribute,
A and B, to represent that function?

00:01:09.250 --> 00:01:11.000
&gt;&gt; Okay so
I'd have a note that's A and B.

00:01:12.020 --> 00:01:13.441
And if that's true.
&gt;&gt; Nope, you're not allowed to do that.

00:01:13.441 --> 00:01:14.750
&gt;&gt; Oh.

00:01:14.750 --> 00:01:17.470
&gt;&gt; Every node can be,
have at most one attribute.

00:01:17.470 --> 00:01:20.390
&gt;&gt; All right well let's
let's put A in an attribute.

00:01:21.820 --> 00:01:23.310
&gt;&gt; Okay, so here's a little node.

00:01:23.310 --> 00:01:25.520
Let's call it A.

00:01:25.520 --> 00:01:26.560
&gt;&gt; Okay.
&gt;&gt; Now what?

00:01:26.560 --> 00:01:27.780
&gt;&gt; And well I mean, for

00:01:27.780 --> 00:01:29.680
it to be a node it needs to have
the little two branchy things.

00:01:30.750 --> 00:01:31.490
True and false.

00:01:31.490 --> 00:01:31.990
&gt;&gt; Okay.

00:01:33.160 --> 00:01:35.980
All right, so how about true on
the left and false on the right?

00:01:37.060 --> 00:01:38.410
&gt;&gt; Sure, as long as you label them.

00:01:38.410 --> 00:01:39.020
So, all right.

00:01:39.020 --> 00:01:42.120
So then A, if A is true,
okay, I don't know.

00:01:42.120 --> 00:01:46.860
But oh, but if A is false,
then we know that A and B must be false.

00:01:46.860 --> 00:01:48.030
Doesn't matter what B is.

00:01:48.030 --> 00:01:49.400
So we can just put a leaf under the F.

00:01:49.400 --> 00:01:49.900
&gt;&gt; That's correct.

00:01:51.020 --> 00:01:51.860
All right, I like that.

00:01:51.860 --> 00:01:52.890
&gt;&gt; Okay.

00:01:52.890 --> 00:01:53.950
What about when A is true?

00:01:53.950 --> 00:01:54.780
&gt;&gt; What, is that an F?

00:01:56.020 --> 00:01:57.643
&gt;&gt; That is an F, and
that is a minus sign for false.

00:01:57.643 --> 00:01:58.271
&gt;&gt; Oh, a minus sign.

00:01:58.271 --> 00:01:58.853
I get it, okay.

00:01:58.853 --> 00:02:01.800
I thought you were just not
done drawing the F yet.

00:02:01.800 --> 00:02:02.750
&gt;&gt; good.
All right.

00:02:02.750 --> 00:02:03.550
So, oh yeah.

00:02:03.550 --> 00:02:05.180
On the true side then,
I don't think we know.

00:02:05.180 --> 00:02:07.850
So I think we need to split on B also.

00:02:07.850 --> 00:02:08.699
&gt;&gt; Okay.

00:02:08.699 --> 00:02:09.960
&gt;&gt; So put a little B under there.

00:02:09.960 --> 00:02:11.340
&gt;&gt; All right, done.

00:02:11.340 --> 00:02:13.768
&gt;&gt; All right, and
then true-false split on B.

00:02:17.638 --> 00:02:19.500
All right and so
now we've got these two cases.

00:02:19.500 --> 00:02:23.410
So if B is false, then again,
it doesn't matter what A was but

00:02:23.410 --> 00:02:24.560
A turns out to be true.

00:02:24.560 --> 00:02:27.470
But it's still the, the, it should
be a minus sign underneath that.

00:02:28.540 --> 00:02:29.120
&gt;&gt; Okay.

00:02:29.120 --> 00:02:31.110
&gt;&gt; So it's not A and B is not true.

00:02:31.110 --> 00:02:34.610
But if A is true and
B is true then A and B is true.

00:02:34.610 --> 00:02:36.240
So there should be
a plus sign on the left.

00:02:37.410 --> 00:02:38.245
&gt;&gt; That's exactly right.

00:02:38.245 --> 00:02:39.590
&gt;&gt; Woo.

00:02:39.590 --> 00:02:41.850
&gt;&gt; So clearly decision trees proof by,

00:02:41.850 --> 00:02:45.720
we just drew it here,
can represent the Boolean function And.

00:02:45.720 --> 00:02:46.634
&gt;&gt; Sure.
&gt;&gt; [CROSSTALK].

00:02:46.634 --> 00:02:49.712
&gt;&gt; You said something int,
you said something interesting, Michael.

00:02:49.712 --> 00:02:52.310
You said it doesn't matter
what A is if B is false.

00:02:52.310 --> 00:02:58.920
So what would happen if I switch,
A and B around.

00:02:58.920 --> 00:02:59.620
&gt;&gt; That's the same.

00:02:59.620 --> 00:03:03.000
So if B, okay, in the beginning,
we say, if B is false, it's false.

00:03:03.000 --> 00:03:04.910
If B is true, we check A.

00:03:04.910 --> 00:03:06.420
If A is false, then it's false.

00:03:06.420 --> 00:03:08.750
But if A is true, then it's true.

00:03:08.750 --> 00:03:12.180
So it actually still represents
exactly the same function, A and B.

00:03:12.180 --> 00:03:15.530
Oh, because A and B is collaborative.

00:03:15.530 --> 00:03:17.580
No, commutative.

00:03:17.580 --> 00:03:19.020
Yes?
No?

00:03:19.020 --> 00:03:20.540
Hello?
&gt;&gt; It's one of those things.

00:03:20.540 --> 00:03:21.210
It's commutative.

00:03:21.210 --> 00:03:22.990
As opposed to associative.

00:03:22.990 --> 00:03:23.560
&gt;&gt; As opposed to what?

00:03:24.620 --> 00:03:25.280
&gt;&gt; Associative.

00:03:25.280 --> 00:03:26.450
&gt;&gt; Well I mean it, it's that too.

00:03:26.450 --> 00:03:28.830
But I mean, it's the reason that you
can just switch those two things and

00:03:28.830 --> 00:03:31.480
it didn't make a difference is because
they play the same role in the function.

00:03:32.480 --> 00:03:36.170
&gt;&gt; That's true in, in terms of
representation of the decision trees.

00:03:36.170 --> 00:03:38.470
You know, it doesn't really matter
which attribute you pick or

00:03:38.470 --> 00:03:39.450
the order in which you do them.

00:03:39.450 --> 00:03:42.820
You might get a better tree or a worse
tree or a longer tree or a shorter tree.

00:03:42.820 --> 00:03:45.790
But for something simple like,
two valued And,

00:03:45.790 --> 00:03:47.200
it really just doesn't matter.

00:03:47.200 --> 00:03:48.610
&gt;&gt; Okay.

00:03:48.610 --> 00:03:49.380
&gt;&gt; kind of neat, huh?

00:03:49.380 --> 00:03:49.880
&gt;&gt; Yeah.

