WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:02.600
Let's look at this first line and what it's going to do for us.

00:00:02.600 --> 00:00:06.740
It's going to create an object that delegates the car.prototype which is

00:00:06.740 --> 00:00:08.039
what we're already doing.

00:00:08.039 --> 00:00:11.430
That means we can get rid of the part where we were doing that ourselves.

00:00:11.430 --> 00:00:14.990
It also seems to be assigning the result of that object creation to

00:00:14.990 --> 00:00:16.290
the keyword this.

00:00:16.290 --> 00:00:19.030
Now, even though you couldn't possibly write this line of code in your own

00:00:19.030 --> 00:00:23.310
programs, the interpreter is capable of finding values to the keyword this.

00:00:23.310 --> 00:00:24.570
It kind of makes sense and

00:00:24.570 --> 00:00:28.150
is in keeping with our understanding of what the keyword this is used for.

00:00:28.150 --> 00:00:31.450
The intention of the keyword this is to be a convenient way of referring to

00:00:31.450 --> 00:00:35.690
whatever the target object is in some object oriented function call.

00:00:35.690 --> 00:00:37.820
This function call is pretty object oriented.

00:00:37.820 --> 00:00:39.950
The intent is that we're going to build a new thing.

00:00:39.950 --> 00:00:43.230
So it makes a lot of sense that whatever that new thing is could be

00:00:43.230 --> 00:00:45.030
the target of the keyword this.

00:00:45.030 --> 00:00:48.490
Now that we have a way of referring to a brand-new object that's created to

00:00:48.490 --> 00:00:50.760
delegate to the car prototype,

00:00:50.760 --> 00:00:55.150
we might as well get rid of all of these new obj variables that we introduced.

00:00:55.150 --> 00:00:57.680
We can just instead use the keyword this.

00:00:57.680 --> 00:01:01.260
Lastly, we can tell that this return statement that will be

00:01:01.260 --> 00:01:04.610
inserted by the interpreter seems to duplicate what's being done

00:01:04.610 --> 00:01:06.470
above in the line that we wrote.

00:01:06.470 --> 00:01:09.120
It's unnecessary to have two return statements, and, in fact,

00:01:09.120 --> 00:01:13.260
the way this code would operate, we should never be able to reach the last line

00:01:13.260 --> 00:01:17.210
since the second to last line would already have returned from the function.

00:01:17.210 --> 00:01:20.050
We can get rid of the return statement that we wrote, as well, and

00:01:20.050 --> 00:01:24.470
just trust that this inserted return statement will do the work we need.

00:01:24.470 --> 00:01:27.890
We're done refactoring to avoid the duplication between the code we had

00:01:27.890 --> 00:01:30.920
written and the code that got inserted for us.

00:01:30.920 --> 00:01:33.900
But remember, this code is just a mental note to remind us what

00:01:33.900 --> 00:01:35.470
the keyword new does.

00:01:35.470 --> 00:01:38.130
So let's get rid of those notes because we know they are not actually going to

00:01:38.130 --> 00:01:40.100
show up anywhere in our program.

00:01:40.100 --> 00:01:41.730
Let's take away the extra white space so

00:01:41.730 --> 00:01:43.570
that we can see it written more clearly.

00:01:43.570 --> 00:01:47.140
This is what we would expect to type when we're making a pseudo classical class.

