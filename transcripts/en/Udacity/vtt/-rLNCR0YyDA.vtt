WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
We've proved that one particular regular expression didn't do the job.

00:00:06.000 --> 00:00:10.000
It was too permissive, but that doesn't mean that there isn't a smarter, super tricky

00:00:10.000 --> 00:00:14.000
regular expression that would capture balanced parentheses.

00:00:14.000 --> 00:00:18.000
However, it just so happens that there isn't.

00:00:18.000 --> 00:00:24.000
It turns out that it's impossible to capture balanced parentheses with a regular expression.

00:00:24.000 --> 00:00:28.000
A formal proof may be presented in the supplemental material,

00:00:28.000 --> 00:00:30.000
but for now I'm just going to give the intuition.

00:00:30.000 --> 00:00:34.000
Here's what we want: an open parenthesis followed by a close parenthesis,

00:00:34.000 --> 00:00:38.000
each repeated the same number of times.

00:00:38.000 --> 00:00:42.000
This intuition or this notation is meant to remind you of mathematics.

00:00:42.000 --> 00:00:45.000
X-squared is just x times x,

00:00:45.000 --> 00:00:49.000
so open parenthesis raised to the power of 2 would just be two open parentheses

00:00:49.000 --> 00:00:51.000
next to each other in a string.

00:00:51.000 --> 00:00:58.000
What we really want is open parenthesis to the power of N, closed parenthesis to the power of N,

00:00:58.000 --> 00:01:01.000
but this has to be the same N in order for the parentheses to be balanced.

00:01:01.000 --> 00:01:05.000
Unfortunately, all we can write with regular expressions is

00:01:05.000 --> 00:01:08.000
open parenthesis star close parenthesis star.

00:01:08.000 --> 00:01:14.000
In regular expressions, these two stars need not be the same.

00:01:14.000 --> 00:01:19.000
In fact, if you think about the finite state machine interpretation of regular expressions,

00:01:19.000 --> 00:01:23.000
remember when we were simulating finite state machines the only thing we really

00:01:23.000 --> 00:01:28.000
had to remember was where we currently were and what the input was.

00:01:28.000 --> 00:01:31.000
We didn't really remember where we'd come from.

00:01:31.000 --> 00:01:35.000
In order to matchup the same number of opens and closes,

00:01:35.000 --> 00:01:38.000
we'd have to where we came from.

00:01:38.000 --> 00:01:41.000
Regular expressions just don't have that kind of memory.

00:01:41.000 --> 00:01:45.000
With regular expressions, I can say zero or more open parentheses

00:01:45.000 --> 00:01:48.000
followed by zero or more close parentheses,

00:01:48.000 --> 00:01:50.000
but those two numbers don't have to be the same.

00:01:50.000 --> 00:01:55.000
Regular expressions can't always remember to different numbers and force them to be equal.

00:01:55.000 --> 00:01:59.000
This notion of balanced parentheses is worth paying a lot of attention to,

00:01:59.000 --> 00:02:05.000
because balanced parentheses are everywhere in HTML and JavaScript.

00:02:05.000 --> 00:02:10.000
These tags for beginning bold and beginning italics, ending italics and ending bold,

00:02:10.000 --> 00:02:14.000
have to be perfectly nested for valid HTML.

00:02:14.000 --> 00:02:17.000
It's as if the beginning bold b were some sort of parenthesis

00:02:17.000 --> 00:02:20.000
and the ending bold b were a closed parenthesis.

00:02:20.000 --> 00:02:24.000
Then the italic tags maybe were angle brackets or some other type of parentheses

00:02:24.000 --> 00:02:26.000
that really had to match up.

00:02:26.000 --> 00:02:32.000
These have to be perfectly nested, and they have to open and close each other in tandem.

00:02:32.000 --> 00:02:37.000
Open the bold, open the italics, close the italics, close the bold.

00:02:37.000 --> 00:02:41.000
We can see the same sort of thing in a Python or Javascript assignment.

00:02:41.000 --> 00:02:46.000
These two parentheses match up. So do these two, and they're perfectly nested.

00:02:46.000 --> 00:02:49.000
Here we see an example of malformed HTML.

00:02:49.000 --> 00:02:54.000
The tags, the parentheses of HTML, don't match up properly.

00:02:54.000 --> 00:02:58.000
Let's see what happens when I try to draw that same sort of diagram.

00:02:58.000 --> 00:03:06.000
Oh, there's no way to connect these two i's without crossing the lines and crashing over each other.

00:03:06.000 --> 00:03:09.000
This tells us that the parentheses do not match.

00:03:09.000 --> 00:03:11.000
We could also look at it like this.

00:03:11.000 --> 00:03:17.000
If we view it as a mathematical formula, the normal parentheses and the square parentheses

00:03:17.000 --> 00:03:20.000
don't open and close in the right order.

00:03:20.000 --> 00:03:24.000
In order for something to be valid HTML, tag openings and tag closings

00:03:24.000 --> 00:03:26.000
must be perfectly nested.

00:03:26.000 --> 00:03:29.000
This is not valid HTML.

00:03:29.000 --> 09:59:59.000
For our web browser to work correctly, we're going to need to tell the difference.

