WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:02.160
So games are complicated.

00:00:02.160 --> 00:00:04.340
They often end up being way
more code than you expect.

00:00:05.350 --> 00:00:08.450
So to get an idea why,
let's try breaking down a classic game

00:00:08.450 --> 00:00:11.280
into it's components,
and it's behaviors.

00:00:11.280 --> 00:00:14.500
If you haven't played Tetris,
go play it like right now.

00:00:14.500 --> 00:00:16.610
It's an essential part
of gaming history.

00:00:16.610 --> 00:00:17.910
If you just google for Tetris,

00:00:17.910 --> 00:00:20.159
you'll find a dozen versions
you can play online for free.

00:00:21.630 --> 00:00:24.830
Let's do an object oriented
analysis of Tetris.

00:00:24.830 --> 00:00:27.990
What we're going to do is write down
a paragraph describing exactly how

00:00:27.990 --> 00:00:29.290
Tetris works.

00:00:29.290 --> 00:00:32.170
Then we're going to underline all
of the nouns to get an idea of what

00:00:32.170 --> 00:00:34.710
classes we might need
to implement Tetris.

00:00:34.710 --> 00:00:37.600
Then we'll underline all the verbs
to get an idea what methods those

00:00:37.600 --> 00:00:39.320
classes might need.

00:00:39.320 --> 00:00:41.430
So, what is Tetris?

00:00:41.430 --> 00:00:43.680
Tetris is a game where
colored Tetriminos,

00:00:43.680 --> 00:00:46.810
that's the technical term,
fall down a field of play

00:00:46.810 --> 00:00:49.190
until they collide with
the previously placed Tetrimino.

00:00:50.390 --> 00:00:54.970
As a Tetrimino is falling, the user can
rotate it and can drop it into place.

00:00:54.970 --> 00:00:56.890
Once a Tetrimino comes to rest,

00:00:56.890 --> 00:00:59.840
if a line of blocks in
the field of play is complete.

00:00:59.840 --> 00:01:03.820
It is removed, and all blocks
placed above it are moved down.

00:01:03.820 --> 00:01:05.980
Removing a line earns points.

00:01:05.980 --> 00:01:07.620
Points are displayed on a scoreboard,

00:01:07.620 --> 00:01:09.350
along with a preview
of the next tetromino.

00:01:09.350 --> 00:01:14.150
Now that's a super cursory
description But even here we have

00:01:14.150 --> 00:01:17.910
a bunch of classes we would need
in order to implement the game.

00:01:17.910 --> 00:01:20.860
We would need a game class to
set everything in motion and

00:01:20.860 --> 00:01:23.310
coordinate the rest of the actors.

00:01:23.310 --> 00:01:27.420
We would need a class for the falling
tetromino to represent its position and

00:01:27.420 --> 00:01:29.670
its rotation and also what shape it is.

00:01:29.670 --> 00:01:34.670
We would need a field of play to
represent where all the blocks are and

00:01:34.670 --> 00:01:37.130
to put the tetromino somewhere.

00:01:37.130 --> 00:01:40.080
Speaking of attributes of the tetromino,
you probably also want

00:01:40.080 --> 00:01:44.210
a class to represent colors, scanning
through some more for some more nouns.

00:01:44.210 --> 00:01:46.290
We find blocks, all right.

00:01:46.290 --> 00:01:48.060
So we might want a class for blocks or

00:01:48.060 --> 00:01:51.380
perhaps blocks is just
part of the field of play.

00:01:51.380 --> 00:01:53.870
I don't know it's hard to
say how to design it best.

00:01:53.870 --> 00:01:55.370
Then we see we have points.

00:01:55.370 --> 00:01:57.840
We need a class to represent
how many points we have.

00:01:57.840 --> 00:02:00.370
We'd also need a scoreboard
to display those points and

00:02:00.370 --> 00:02:02.110
we need this whole preview pane thing.

00:02:03.280 --> 00:02:04.460
Now let's scan through for

00:02:04.460 --> 00:02:08.180
some verbs to find what methods
these various classes would need.

00:02:08.180 --> 00:02:11.090
So the tetrominos need
to know how to fall.

00:02:11.090 --> 00:02:16.000
The tetrominos also need to know
how to rotate and how to drop.

00:02:16.000 --> 00:02:19.300
Some class needs to know when
a tetromino collides with blocks that

00:02:19.300 --> 00:02:22.520
are already in the field of play, maybe
the tetromino's responsible for that,

00:02:22.520 --> 00:02:25.090
maybe the field of play
is responsible for that.

00:02:25.090 --> 00:02:27.940
Then there's this concept
of coming to rest,

00:02:27.940 --> 00:02:32.080
where a falling tetromino just turns
into blocks in the field of play.

00:02:32.080 --> 00:02:33.230
Scanning through some more,

00:02:33.230 --> 00:02:36.330
we need a way to remove lines of
blocks from the field of play.

00:02:36.330 --> 00:02:40.320
We need a way to move down
blocks after a line is removed.

00:02:40.320 --> 00:02:44.360
Then there's the fact that all of this
needs to know how to draw itself, and

00:02:44.360 --> 00:02:46.590
that's a big task.

00:02:46.590 --> 00:02:49.510
So again, this is just a short
description of Tetris, and

00:02:49.510 --> 00:02:52.170
an incredibly simple analysis of it.

00:02:52.170 --> 00:02:53.760
We could keep going here.

00:02:53.760 --> 00:02:55.720
Point is, games are complicated.

00:02:55.720 --> 00:02:59.010
And decomposing them into their
component parts is essential to making

00:02:59.010 --> 00:03:00.790
any headway in actually
implementing them.

